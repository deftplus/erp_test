
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Перем ПоказателиМонитора;
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресРасшифровки) Тогда
		ТаблицаРасшифровок = ПолучитьИзВременногоХранилища(Параметры.АдресРасшифровки);
	Иначе
		ВыгрузкаРасшифровок = Расшифровки.Выгрузить();
		ТаблицаРасшифровок = ВыгрузкаРасшифровок.СкопироватьКолонки();
	КонецЕсли;

	Для Каждого Элемент Из ТаблицаРасшифровок Цикл
		Элемент.ЧислоРасшифровываемыхПолей = Элемент.РасшифровываемыеПоля.Количество();
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблицаРасшифровок, Расшифровки);
	// Параметр Расшифровка объектом.
	РасшифровкиОбъектомИнформационнойБазы.Очистить();
	Если ЭтоАдресВременногоХранилища(Параметры.АдресТаблицыРасшифровкиОбъектом) Тогда
		РасшифровкиОбъектомТаблица = ПолучитьИзВременногоХранилища(Параметры.АдресТаблицыРасшифровкиОбъектом);
		ЗначениеВДанныеФормы(РасшифровкиОбъектомТаблица, РасшифровкиОбъектомИнформационнойБазы);
	Иначе
		// Не задан адрес рашифровки объектом. Не добавляем данные в таблицу.
	КонецЕсли;
	// Параметр Параметры расшифровки объектом.
	ПараметрыРасшифровкиОбъектом.Очистить();
	Если ЭтоАдресВременногоХранилища(Параметры.АдресПараметровРасшифровкиОбъектом) Тогда
		ПараметрыРасшифровкиОбъектомТаблица = ПолучитьИзВременногоХранилища(Параметры.АдресПараметровРасшифровкиОбъектом);
		Для Каждого ТекПараметрыРасшифровкиОбъектомТаблица Из ПараметрыРасшифровкиОбъектомТаблица Цикл
			НоваяСтрока = ПараметрыРасшифровкиОбъектом.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПараметрыРасшифровкиОбъектомТаблица);
		КонецЦикла;
	Иначе
		// Не задан адрес параметров рашифровки объектом. Не добавляем данные в таблицу.
	КонецЕсли;

	Параметры.Свойство("КомпоновщикНастроек", КомпоновщикНастроек);
	Параметры.Свойство("ПоказателиМонитора", ПоказателиМонитора);
	
	Если ЗначениеЗаполнено(ПоказателиМонитора) Тогда
		
		Элементы.ПоказательМонитора.СписокВыбора.ЗагрузитьЗначения(ПоказателиМонитора.ВыгрузитьЗначения());
		
		Если ПоказателиМонитора.Количество() > 0 Тогда
			
			ПоказательМонитора = ПоказателиМонитора[0].Значение;
			ПредыдущийПоказательМонитора = ПоказательМонитора;
			
		КонецЕсли;
		
		НаложитьОтборПоПоказателюМонитора();
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_МониторЭффективности;
		
	Иначе
		
		Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.Страница_АналитическийОтчет;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиВариантОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Расшифровки.НайтиПоИдентификатору(Элементы.Расшифровки.ТекущаяСтрока);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СинонимОбъекта", ТекСтрока.Отчет);
	СтруктураНастроек.Вставить("РежимСохраненияНастройки", Ложь);
	СтруктураНастроек.Вставить("Отбор", Новый Структура("НастраиваемыйОбъект, ТипНастройки"
														, ТекСтрока.Отчет
														, ПредопределенноеЗначение("Перечисление.ТипыНастроек.НастройкиОтчета")));
	
	ВыбранноеЗначение = ОткрытьФорму("Справочник.СохраненныеНастройки.Форма.ФормаВыбора_Управляемая"
									, СтруктураНастроек, Элемент);
									
	
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиРасшифровываемыеПоляНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Расшифровки.НайтиПоИдентификатору(Элементы.Расшифровки.ТекущаяСтрока);
	СтруктураНастроек = Новый Структура("КомпоновщикНастроек, СписокПолей", КомпоновщикНастроек, ТекущаяСтрока.РасшифровываемыеПоля);
	ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаПолейКомпоновки_Управляемая", 
					СтруктураНастроек, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

// Сохраняет таблицы расшифровок во временном хранилище. Возвращает адрес временного хранилища.
&НаСервере
Функция СохранитьРасшифровкиВХранилище()
	// Инициализация.
	РезультатФункции = "";
	СтруктураРезультат = Новый Структура;
	Если ЗначениеЗаполнено(ПоказательМонитора) Тогда
		ПеренестиДанныеРасшифровки(ПоказательМонитора);
	КонецЕсли;
	// Расшифровки аналитическим отчетом.
	ТаблицаРасшифровок = Расшифровки.Выгрузить();
	ТаблицаРасшифровок.Колонки.Удалить("ЧислоРасшифровываемыхПолей");
	СтруктураРезультат.Вставить("ТаблицаРасшифровок", ТаблицаРасшифровок);
	// Расшифровки объектом информационной базы.
	ВыгрузкаТаблицыРасшифровкиОбъектом = РасшифровкиОбъектомИнформационнойБазы.Выгрузить();
	СтруктураРезультат.Вставить("РасшифровкаОбъектом", ВыгрузкаТаблицыРасшифровкиОбъектом);
	// Параметры расшифровки объектом информационной базы.
	ВыгрузкаПараметровВрем = ПараметрыРасшифровкиОбъектом.Выгрузить();
	ВыгрузкаПараметровРасшифровки = ВыгрузкаПараметровВрем.СкопироватьКолонки();
	Для Каждого ТекВыгрузкаПараметровВрем Из ВыгрузкаПараметровВрем Цикл
		Если СокрЛП(ТекВыгрузкаПараметровВрем.ИдентификаторСтроки) <> "" Тогда
			НоваяСтрока = ВыгрузкаПараметровРасшифровки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыгрузкаПараметровВрем);
		Иначе
			Продолжить;				// Пустой идентификатор параметра. Не переносим в таблицу.
		КонецЕсли;
	КонецЦикла;
	СтруктураРезультат.Вставить("ПараметрыРасшифровкиОбъектом", ВыгрузкаПараметровРасшифровки);
	// Вывод результата.
	РезультатФункции = ПоместитьВоВременноеХранилище(СтруктураРезультат);
	Возврат РезультатФункции;
КонецФункции

// Возвращает коллекцию метаданных, которая сопоставлена значению ТипОбъектаМетаданныхВход.
// Когда не удалось получить коллекцию - будет возвращён пустой массив.
&НаСервереБезКонтекста
Функция ПолучитьКоллекциюМетаданныхПоТипуОбъекта(ТипОбъектаМетаданныхВход)
	РезультатФункции = Новый Массив;
	Если ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Документ Тогда
		РезультатФункции = Метаданные.Документы;
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.ЖурналДокументов Тогда
		РезультатФункции = Метаданные.ЖурналыДокументов;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Обработка Тогда
		РезультатФункции = Метаданные.Обработки;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Отчет Тогда
		РезультатФункции = Метаданные.Отчеты;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.ПланВидовХарактеристик Тогда
		РезультатФункции = Метаданные.ПланыВидовХарактеристик;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрБухгалтерии Тогда
		РезультатФункции = Метаданные.РегистрыБухгалтерии;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрНакопления Тогда
		РезультатФункции = Метаданные.РегистрыНакопления;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрРасчета Тогда
		РезультатФункции = Метаданные.РегистрыРасчета;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрСведений Тогда
		РезультатФункции = Метаданные.РегистрыСведений;	
	ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Справочник Тогда
		РезультатФункции = Метаданные.Справочники;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный тип объекта: %ТипМетаданного%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипМетаданного%", Строка(ТипОбъектаМетаданныхВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает список наименований метаданных по типу метаданного ТипОбъектаМетаданныхВход.
&НаСервереБезКонтекста
Функция ПолучитьСписокВыборОбъектаМетаданного(ТипОбъектаМетаданныхВход)
	РезультатФункции = Новый СписокЗначений;
	// Выберем нужную коллекцию метаданных в зависимости от типа метаданных.
	КоллекцияМетаданных = ПолучитьКоллекциюМетаданныхПоТипуОбъекта(ТипОбъектаМетаданныхВход);
	// Заполним результирующий список значений по выбранной коллекции.
	Для Каждого ТекКоллекцияМетаданных Из КоллекцияМетаданных Цикл
		ЗначениеСписка = Строка(ТекКоллекцияМетаданных.Имя);
		ПредставлениеСписка = Строка(ТекКоллекцияМетаданных.Синоним) + " (" +Строка(ТекКоллекцияМетаданных.Имя) + ")";
		РезультатФункции.Добавить(ЗначениеСписка, ПредставлениеСписка);
	КонецЦикла;
	РезультатФункции.СортироватьПоПредставлению();
	Возврат РезультатФункции;
КонецФункции

// Возвращает список форм объектов по типу метаданного ТипОбъектаМетаданныхВход и наименованию 
// НаименованиеОбъектаМетаданныхВход.
&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораФормыОбъекта(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход)
	РезультатФункции = Новый СписокЗначений;
	// Получим коллекцию форм выбранного объекта метаданных.
	КоллекцияМетаданных = ПолучитьКоллекциюМетаданныхПоТипуОбъекта(ТипОбъектаМетаданныхВход);
	Если КоллекцияМетаданных.Найти(НаименованиеОбъектаМетаданныхВход) <> Неопределено Тогда
		КоллекцияФорм = КоллекцияМетаданных[НаименованиеОбъектаМетаданныхВход].Формы;	
		// Заполним результирующий список значений по выбранной коллекции.
		Для Каждого ТекКоллекцияФорм Из КоллекцияФорм Цикл
			ЗначениеСписка = "Форма." + Строка(ТекКоллекцияФорм.Имя);
			ПредставлениеСписка = Строка(ТекКоллекцияФорм.Синоним) + " (" +Строка(ТекКоллекцияФорм.Имя) + ")";
			РезультатФункции.Добавить(ЗначениеСписка, ПредставлениеСписка);
		КонецЦикла;
		// Добавим стандартные формы.
		Если КоллекцияФорм.Количество() = 0 Тогда
			Если ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Отчет Тогда
				РезультатФункции.Добавить("Форма", Нстр("ru = '<Форма отчета>'"));
				РезультатФункции.Добавить("ФормаВарианта", Нстр("ru = '<Форма варианта>'"));
				РезультатФункции.Добавить("ФормаНастроек", Нстр("ru = '<Форма настроек>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Документ Тогда	
				РезультатФункции.Добавить("ФормаОбъекта", Нстр("ru = '<Форма документа>'"));
				РезультатФункции.Добавить("ФормаСписка", Нстр("ru = '<Форма списка>'"));
				РезультатФункции.Добавить("ФормаВыбора", Нстр("ru = '<Форма выбора>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.ЖурналДокументов Тогда	
				РезультатФункции.Добавить("ФормаСписка", Нстр("ru = '<Форма списка>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Обработка Тогда	
				РезультатФункции.Добавить("Форма", Нстр("ru = '<Форма обработки>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрБухгалтерии Тогда	
				РезультатФункции.Добавить("ФормаСписка", Нстр("ru = '<Форма списка>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрСведений Тогда	
				РезультатФункции.Добавить("ФормаЗаписи", Нстр("ru = '<Форма записи>'"));
				РезультатФункции.Добавить("ФормаСписка", Нстр("ru = '<Форма списка>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.РегистрНакопления Тогда	
				РезультатФункции.Добавить("ФормаСписка", Нстр("ru = '<Форма списка>'"));
			ИначеЕсли ТипОбъектаМетаданныхВход = Перечисления.ТипыОбъектовИбДляРасшифровки.Справочник Тогда	
				РезультатФункции.Добавить("ФормаОбъекта", Нстр("ru = '<Форма элемента>'"));
				РезультатФункции.Добавить("ФормаСписка", Нстр("ru = '<Форма списка>'"));
				РезультатФункции.Добавить("ФормаГруппы", Нстр("ru = '<Форма группы>'"));
				РезультатФункции.Добавить("ФормаВыбораГруппы", Нстр("ru = '<Форма выбора группы>'"));
			Иначе
				// Для прочих вариантов не добавляем.
			КонецЕсли;
		Иначе
			// Формы уже определены.
		КонецЕсли;
		РезультатФункции.СортироватьПоПредставлению();
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найден %ТипОбъекта% ""%НаименованиеОбъекта%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипОбъекта%", Строка(ТипОбъектаМетаданныхВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОбъекта%", Строка(НаименованиеОбъектаМетаданныхВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает список значений, содержащий поля отбора для выбора пользователем в качестве параметра.
&НаСервере
Функция ПолучитьСписокПолейКомпоновкиОтчета(НаименованиеОбъектаМетаданныхВход)
	РезультатФункции = Новый СписокЗначений;
	Попытка
		Если Метаданные.Отчеты.Найти(НаименованиеОбъектаМетаданныхВход) <> Неопределено Тогда
			МетаданныеОтчета = Метаданные.Отчеты[НаименованиеОбъектаМетаданныхВход];
			ОсновнаяСКД = МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных;
			ИмяМакета = ОсновнаяСКД.Имя;
			Если ЗначениеЗаполнено(ИмяМакета) Тогда
				МакетСКД = Отчеты[НаименованиеОбъектаМетаданныхВход].ПолучитьМакет(ИмяМакета);
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
				ЭлементыДоступныхПолей = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
				Для Каждого ТекЭлементыДоступныхПолей Из ЭлементыДоступныхПолей Цикл
					ЭтоРесурс	 = ТекЭлементыДоступныхПолей.Ресурс;
					ЭтоПапка	 = ТекЭлементыДоступныхПолей.Папка;
					Если (НЕ ЭтоРесурс) И (НЕ ЭтоПапка) Тогда
						ЗначениеСписка = "Отбор." + Строка(ТекЭлементыДоступныхПолей.Поле);
						ПредставлениеСписка = НСтр("ru = 'Отбор -> '") + Строка(ТекЭлементыДоступныхПолей.Поле);
						РезультатФункции.Добавить(ЗначениеСписка, ПредставлениеСписка);
					Иначе
						Продолжить;			// Пропускаем поле.
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Не указан основная схема компоновки. Оставляем список пустым.
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить отчёт %НаименованиеОтчета%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОтчета%", Строка(НаименованиеОбъектаМетаданныхВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошли ошибки при получении полей отчета %НаименованиеОтчета%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОтчета%", Строка(НаименованиеОбъектаМетаданныхВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Получает список значений, содержащий реквизиты отчета НаименованиеОбъектаМетаданныхВход 
// для выбора пользователем в дополнительных свойств.
&НаСервере
Функция ПолучитьСписокРеквизитовКомпоновкиОтчета(НаименованиеОбъектаМетаданныхВход) Экспорт
	РезультатФункции = Новый СписокЗначений;
	Попытка
		МетаданныеОтчет = Метаданные.Отчеты[НаименованиеОбъектаМетаданныхВход];
		КоллекцияРеквизитов = МетаданныеОтчет.Реквизиты;
		Для Каждого ТекКоллекцияРеквизитов Из КоллекцияРеквизитов Цикл
			ЗначениеСписка = "ДополнительныеСвойства." + Строка(ТекКоллекцияРеквизитов.Имя);
			ПредставлениеСписка = НСтр("ru = 'Дополнительные свойства -> '") + Строка(ТекКоллекцияРеквизитов.Синоним);
			РезультатФункции.Добавить(ЗначениеСписка, ПредставлениеСписка);
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении реквизитов отчета %Отчет% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отчет%", Строка(НаименованиеОбъектаМетаданныхВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Возвращает описание типов, содержащее примитивные типы и все ссылки.
&НаСервереБезКонтекста
Функция СформироватьОписаниеТиповЛюбоеЗначение()
	МассивТипов = Новый Массив;
    МассивТипов.Добавить(Тип("Число"));
    МассивТипов.Добавить(Тип("Строка"));
    МассивТипов.Добавить(Тип("Дата"));
    МассивТипов.Добавить(Тип("Булево"));
    КЧ = Новый КвалификаторыЧисла(15,2);
    КС = Новый КвалификаторыСтроки(100);
    КД = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	РезультатФункции = Новый ОписаниеТипов(МассивТипов, КЧ, КС, КД);
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, Документы.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, Задачи.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, Перечисления.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, ПланыОбмена.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, ПланыСчетов.ТипВсеСсылки().Типы());
	РезультатФункции = Новый ОписаниеТипов(РезультатФункции, Справочники.ТипВсеСсылки().Типы());
	Возврат РезультатФункции;
КонецФункции

// Вставляет в структуру СтруктураРезультат пользовательские настройки, куда прописаны значения
// параметров отчета НаименованиеОбъектаМетаданныхВход. Когда ПользовательскиеНастройкиВход
// не определено, получает настройки по умолчанию.
&НаСервереБезКонтекста
Процедура ВставитьПользовательскиеПараметрыОтчетаВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураПараметровВход, СтруктураРезультат, ПользовательскиеНастройкиВход = Неопределено)
	Справочники.ПроизвольныеОтчеты.ВставитьПользовательскиеПараметрыОтчетаВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураПараметровВход, СтруктураРезультат, ПользовательскиеНастройкиВход);
КонецПроцедуры

// Вставляет в структуру СтруктураРезультат дополнительные свойства, куда прописаны значения
// параметров отчета НаименованиеОбъектаМетаданныхВход. Когда ПользовательскиеНастройкиВход
// не определено, получает настройки по умолчанию.
&НаСервереБезКонтекста
Процедура ВставитьПользовательскиеДополнительныеСвойстваВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураДополнительныеСвойстваВход, СтруктураРезультат, ПользовательскиеНастройкиВход = Неопределено)
	Справочники.ПроизвольныеОтчеты.ВставитьПользовательскиеДополнительныеСвойстваВСтруктуру(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, СтруктураДополнительныеСвойстваВход, СтруктураРезультат, ПользовательскиеНастройкиВход);
КонецПроцедуры

// Возвращает структуру, содержащую параметры, заданные фиксированными значениями по идентификатору
// строки ИдентификаторСтрокиВход.
&НаСервере
Функция ПолучитьСтруктуруПараметровРасшифровкиПоСтроке(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ИдентификаторСтрокиВход)
	РезультатФункции = Новый Структура;
	// Поиск строки.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ИдентификаторСтрокиВход);
	НайденныеСтроки = ПараметрыРасшифровкиОбъектом.НайтиСтроки(СтруктураПоиска);
	// Обход полученных расшифровок.	
	СтруктураДанных = Справочники.ПроизвольныеОтчеты.ПолучитьСтруктуруДанныхДляРасшифровкиОбъектом(НайденныеСтроки, Неопределено, Неопределено, Ложь);
	// Перенесём структуру данных в результирующую структуру.
	ПользовательскиеНастройки = Справочники.ПроизвольныеОтчеты.ПолучитьПользовательскиеНастройки(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход);
	РезультатФункции = Справочники.ПроизвольныеОтчеты.ПеренестиСтруктуруДанныхРасшифровкиОбъектом(СтруктураДанных, РезультатФункции, ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ПользовательскиеНастройки);
	Возврат РезультатФункции;
КонецФункции

// Для формы ФормаРасшифровкаВход отчета с именем НаименованиеОбъектаМетаданныхВход возвращает
// список выбора пользовательских параметров.
&НаКлиенте
Функция ПолучитьСписокПараметровОтчета(НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкаВход)
	РезультатФункции = Новый СписокЗначений;
	ТипОбъектаОтчет = ПредопределенноеЗначение("Перечисление.ТипыОбъектовИбДляРасшифровки.Отчет");
	ПользовательскиеНастройкиОтчета = БизнесАнализКлиентУХ.ВернутьПользовательскиеНастройкиПоОбъектуОтчета(ТипОбъектаОтчет, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкаВход);
	ЭлементыНастроек = ПользовательскиеНастройкиОтчета.Элементы;
	Для Каждого ТекЭлементыНастроек Из ЭлементыНастроек Цикл
		Если ТипЗнч(ТекЭлементыНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ТекИмяПараметра = СокрЛП(Строка(ТекЭлементыНастроек.Параметр));
			ЗначениеСписка = "ПараметрыОтчета." + ТекИмяПараметра;
			ПредставлениеСписка = Нстр("ru = 'Параметры отчета -> '") + ТекИмяПараметра;
			РезультатФункции.Добавить(ЗначениеСписка, ПредставлениеСписка);
		Иначе
			Продолжить;					// Не параметр отчета.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Выставляет отбор в таблице параметров расшифровки объектом по идентификатору расшифровки.
&НаКлиенте
Процедура УстановитьОтборПараметровРасшифровкиОбъектом()
	ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	СтруктураОтбора = Новый Структура;
	Если ТекДанные <> Неопределено Тогда
		ТекИдентификатор = ТекДанные.ИдентификаторСтроки;
		Если ЗначениеЗаполнено(ТекИдентификатор) Тогда
			СтруктураОтбора.Вставить("ИдентификаторСтроки", ТекИдентификатор);
		Иначе
			СтруктураОтбора.Вставить("ИдентификаторСтроки", "---");
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("ИдентификаторСтроки", "---");
	КонецЕсли;
	ФиксСтруктураОтбора = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	Элементы.ПараметрыРасшифровкиОбъектом.ОтборСтрок = ФиксСтруктураОтбора;
КонецПроцедуры

// Возвращает структуру, содержащую параметры, заданные фиксированными значениями по идентификатору
// строки ИдентификаторСтрокиВход.
&НаКлиенте
Функция ПолучитьСтруктуруПараметровФиксированныхЗначений(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ИдентификаторСтрокиВход)
	РезультатФункции = Новый Структура;
	РезультатФункции = ПолучитьСтруктуруПараметровРасшифровкиПоСтроке(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ИдентификаторСтрокиВход);
	Возврат РезультатФункции;
КонецФункции

// Возвращает список значений для выбора доступных выражений расшифровки.
&НаКлиенте
Функция ПолучитьСписокВыбораВыражения(КомпоновщикНастроекВход)
	РезультатФункции = Новый СписокЗначений;
	// Добавим доступные поля.
	ЭлементыВыбора = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы;
	Для Каждого ТекЭлементыВыбора Из ЭлементыВыбора Цикл
		ЭтоПапка = ТекЭлементыВыбора.Папка;
		ЭтоРесурс = ТекЭлементыВыбора.Ресурс;
		Если (НЕ ЭтоПапка) И (Не ЭтоРесурс) Тогда
			ЗначениеСписка = "Расшифровка." + Строка(ТекЭлементыВыбора.Поле);
			ПредставлениеСписка = Нстр("ru = 'Расшифровка -> '") + Строка(ТекЭлементыВыбора.Заголовок);
			РезультатФункции.Добавить(ЗначениеСписка, ПредставлениеСписка);
		Иначе
			Продолжить;			// Не добавляем поле в список.
		КонецЕсли;	
	КонецЦикла;
	// Добавим поля отборов контекста.
	РезультатФункции.Добавить("Контекст.БазовыйПериод",			 Нстр("ru = 'Контекст -> Базовый период'"));
	РезультатФункции.Добавить("Контекст.БазовыйСценарий",		 Нстр("ru = 'Контекст -> Базовый сценарий'"));
	РезультатФункции.Добавить("Контекст.ВнешняяИБ",				 Нстр("ru = 'Контекст -> Внешняя ИБ'"));
	РезультатФункции.Добавить("Контекст.ИспользуемаяИБ",		 Нстр("ru = 'Контекст -> Используемая ИБ'"));
	РезультатФункции.Добавить("Контекст.Организация",			 Нстр("ru = 'Контекст -> Организация'"));
	РезультатФункции.Добавить("Контекст.ОсновнаяВалюта",		 Нстр("ru = 'Контекст -> Основная валюта'"));
	РезультатФункции.Добавить("Контекст.ПериодОтчета",			 Нстр("ru = 'Контекст -> Период отчета'"));
	РезультатФункции.Добавить("Контекст.ПериодПрогноз",			 Нстр("ru = 'Контекст -> Период прогноз'"));
	РезультатФункции.Добавить("Контекст.ПериодСравнения",		 Нстр("ru = 'Контекст -> Период сравнения'"));
	РезультатФункции.Добавить("Контекст.ПериодОтборНачало",		 Нстр("ru = 'Контекст -> Период С:'"));
	РезультатФункции.Добавить("Контекст.ПериодОтборОкончание",	 Нстр("ru = 'Контекст -> Период По:'"));
	РезультатФункции.Добавить("Контекст.ПлановыйСценарий",		 Нстр("ru = 'Контекст -> Плановый сценарий'"));
	РезультатФункции.Добавить("Контекст.Сценарий",				 Нстр("ru = 'Контекст -> Сценарий'"));
	РезультатФункции.СортироватьПоПредставлению();
	Возврат РезультатФункции;
КонецФункции

// Возвращает список значений для выбора доступных параметров формы.
&НаКлиенте
Функция ПолучитьСписокДоступныхПараметровФормы(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкаВход)
	РезультатФункции = Новый СписокЗначений;
	Если ТипОбъектаМетаданныхВход = ПредопределенноеЗначение("Перечисление.ТипыОбъектовИбДляРасшифровки.Отчет") Тогда
		// Добавим поля компоновки для отчёта.
		СписокПолейОтчета = ПолучитьСписокПолейКомпоновкиОтчета(НаименованиеОбъектаМетаданныхВход);
		Для Каждого ТекСписокПолейОтчета Из СписокПолейОтчета Цикл
			РезультатФункции.Добавить(ТекСписокПолейОтчета.Значение, ТекСписокПолейОтчета.Представление);
		КонецЦикла;
		// Добавим пользовательские параметры для отчёта.
		СписокПараметровОтчета = ПолучитьСписокПараметровОтчета(НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкаВход);
		Для Каждого ТекСписокПараметровОтчета Из СписокПараметровОтчета Цикл
			РезультатФункции.Добавить(ТекСписокПараметровОтчета.Значение, ТекСписокПараметровОтчета.Представление);
		КонецЦикла;
		// Добавим реквизиты отчетов как дополнительные свойства.
		СписокРеквизитовОтчета = ПолучитьСписокРеквизитовКомпоновкиОтчета(НаименованиеОбъектаМетаданныхВход);
		Для Каждого ТекСписокРеквизитовОтчета Из СписокРеквизитовОтчета Цикл
			РезультатФункции.Добавить(ТекСписокРеквизитовОтчета.Значение, ТекСписокРеквизитовОтчета.Представление);
		КонецЦикла;
	Иначе
		// Для прочих объектов не добавляем поля компоновки.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Осуществляет ввод значения для Поля отчета в строку ТекДанныеВход
// табличной части Расшифровки объектом.
&НаКлиенте
Процедура ВвестиПолеОтчетаРасшифровки(ТекДанныеВход)
	ТекДанныеРасшифровка = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Если ТекДанныеРасшифровка <> Неопределено Тогда
		ТипОбъектаМетаданных			 = ТекДанныеРасшифровка.ТипОбъектаМетаданных;
		НаименованиеОбъектаМетаданных	 = ТекДанныеРасшифровка.НаименованиеОбъектаМетаданных;
		Если (ЗначениеЗаполнено(ТипОбъектаМетаданных)) И (ЗначениеЗаполнено(НаименованиеОбъектаМетаданных)) Тогда
			СписокДоступныхЗначений = ПолучитьСписокВыбораВыражения(КомпоновщикНастроек);
			Если СписокДоступныхЗначений.Количество() > 0 Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ТекДанные", ТекДанныеВход);
				Оповещение = Новый ОписаниеОповещения("СписокВыбораВыражения_ПослеВыбора", ЭтотОбъект, СтруктураПараметров);
				ПоказатьВыборИзСписка(Оповещение, СписокДоступныхЗначений);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить список доступных выражений. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для выполнения этого действия требуется указать Тип объекта и Объект. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пустая строка. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФиксированноеЗначениеРасшифровка_ПослеВводаЗначения(ЗначениеВыбора, ДопПараметры) Экспорт
	ДанныеСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ТекДанные", Неопределено);	
	Если ДанныеСтроки <> Неопределено Тогда
		ДанныеСтроки.ФиксированноеЗначение = ЗначениеВыбора;
		ДанныеСтроки.ВыражениеПолучения = "";
		ОбновитьПредставлениеЗначенияПараметровРасшифровки();
	Иначе
		// Передана пустая строка. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Осуществляет ввод значения для Фиксированное значение в строку ТекДанныеВход
// табличной части Расшифровки объектом.
&НаКлиенте
Процедура ВвестиФиксированноеЗначениеРасшифровки(ТекДанныеВход)
	Перем ВыбЗнач;
    ОписаниеТипов = СформироватьОписаниеТиповЛюбоеЗначение();
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТекДанные", ТекДанныеВход);
    Оповещение = Новый ОписаниеОповещения("ФиксированноеЗначениеРасшифровка_ПослеВводаЗначения", ЭтаФорма, СтруктураПараметров);
    ПоказатьВводЗначения(Оповещение, ВыбЗнач, НСтр("ru = 'Введите фиксированное значение расшифровки'"), ОписаниеТипов);
КонецПроцедуры

// Заполняет колонку Представление значения в табличной части параметры расшифровки.
&НаКлиенте
Процедура ОбновитьПредставлениеЗначенияПараметровРасшифровки()
	Для Каждого ТекПараметрыРасшифровкиОбъектом Из ПараметрыРасшифровкиОбъектом Цикл
		Если СокрЛП(ТекПараметрыРасшифровкиОбъектом.ВыражениеПолучения) <> "" Тогда
			ТекПараметрыРасшифровкиОбъектом.ПредставлениеЗначения = Строка(ТекПараметрыРасшифровкиОбъектом.ВыражениеПолучения);
		Иначе
			ТекПараметрыРасшифровкиОбъектом.ПредставлениеЗначения = Строка(ТекПараметрыРасшифровкиОбъектом.ФиксированноеЗначение);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредставлениеРасшифровкиОбъектомПоУмолчанию(СтрокаТаблицыВход = Неопределено)
	Если СтрокаТаблицыВход = Неопределено Тогда
		ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Иначе
		ТекДанные = СтрокаТаблицыВход;
	КонецЕсли;
	Если ТекДанные <> Неопределено Тогда
		ЕстьПредставление = (СокрЛП(ТекДанные.Представление) <> "");
		ЕстьНаименованиеОбъекта = (СокрЛП(ТекДанные.НаименованиеОбъектаМетаданных) <> "");
		Если (НЕ ЕстьПредставление) И (ЕстьНаименованиеОбъекта) Тогда
			НовоеПредставление = ОбщегоНазначенияКлиентСерверУХ.НаименованиеПоКоду(ТекДанные.НаименованиеОбъектаМетаданных);
			ТекДанные.Представление = НовоеПредставление;
		Иначе
			// Представление объекта уже установлено. Не изменяем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбораНаименованияМетаданного_ПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.НаименованиеОбъектаМетаданных = ЗначениеВыбора.Значение;
			УстановитьПредставлениеРасшифровкиОбъектомПоУмолчанию(ТекДанные);
		Иначе
			ТекстСообщения = НСтр("ru = 'Строка табицы не выбрана. Не удалось обновить значение наименования объекта.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Значение не выбрано. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбораФормыМетаданного_ПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.ФормаРасшифровки = ЗначениеВыбора.Значение;
		Иначе
			ТекстСообщения = НСтр("ru = 'Строка табицы не выбрана. Не удалось обновить значение формы расшифровки объекта.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Значение не выбрано. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбораВыражения_ПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		ТекДанные = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ТекДанные", Неопределено);
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.ВыражениеПолучения = ЗначениеВыбора.Значение;
			ТекДанные.ФиксированноеЗначение = Неопределено;
			ОбновитьПредставлениеЗначенияПараметровРасшифровки();
		Иначе
			ТекстСообщения = НСтр("ru = 'Строка табицы не выбрана. Не удалось обновить значение выражения значения.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Значение не выбрано. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбораПараметровФормы_ПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		ТекДанные = Элементы.ПараметрыРасшифровкиОбъектом.ТекущиеДанные;
		Если ТекДанные <> Неопределено Тогда
			ТекДанные.ИмяПараметраРасшифровки = ЗначениеВыбора.Значение;
		Иначе
			ТекстСообщения = НСтр("ru = 'Строка табицы не выбрана. Не удалось обновить значение параметра формы.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Значение не выбрано. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Оповестить("СписокРасшифровокОбновлен", СохранитьРасшифровкиВХранилище(), ЭтаФорма);
	Если Открыта() Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиРасшифровываемыеПоляОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Расшифровки.НайтиПоИдентификатору(Элементы.Расшифровки.ТекущаяСтрока);
	ТекущаяСтрока.ЧислоРасшифровываемыхПолей = ВыбранноеЗначение.Количество();
	
КонецПроцедуры

&НаСервере
Процедура НаложитьОтборПоПоказателюМонитора()
	
	ЗначениеВДанныеФормы(Расшифровки.Выгрузить(Новый Структура("ПоказательМонитора", ПоказательМонитора), "Отчет, ВариантОтчета, Представление"), Расшифровки_МониторЭффективности);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДанныеРасшифровки(ТекущийПоказательМонитора)
	
	НайденныеСтроки = Расшифровки.НайтиСтроки(Новый Структура("ПоказательМонитора", ТекущийПоказательМонитора));
	
	Для Каждого Элемент Из НайденныеСтроки Цикл
		Расшифровки.Удалить(Элемент);
	КонецЦикла;
	
	Для Каждого Элемент Из Расшифровки_МониторЭффективности Цикл
		
		НоваяСтрока = Расшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
		НоваяСтрока.ПоказательМонитора = ТекущийПоказательМонитора;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказательМонитораПриИзменении(Элемент)
	
	ПеренестиДанныеРасшифровки(ПредыдущийПоказательМонитора);
	НаложитьОтборПоПоказателюМонитора();
	ПредыдущийИсточникДанных = ПоказательМонитора;
	
КонецПроцедуры

&НаКлиенте
Процедура Расшифровки_МониторЭффективностиВариантОтчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Расшифровки_МониторЭффективности.НайтиПоИдентификатору(Элементы.Расшифровки_МониторЭффективности.ТекущаяСтрока);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СинонимОбъекта", ТекСтрока.Отчет);
	СтруктураНастроек.Вставить("РежимСохраненияНастройки", Ложь);
	СтруктураНастроек.Вставить("Отбор", Новый Структура("НастраиваемыйОбъект, ТипНастройки"
														, ТекСтрока.Отчет
														, ПредопределенноеЗначение("Перечисление.ТипыНастроек.НастройкиОтчета")));
	
	ВыбранноеЗначение = ОткрытьФорму("Справочник.СохраненныеНастройки.Форма.ФормаВыбора_Управляемая"
									, СтруктураНастроек, Элемент);
								
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиОбъектомИнформационнойБазыПриАктивизацииСтроки(Элемент)
	УстановитьОтборПараметровРасшифровкиОбъектом();
	ОбновитьПредставлениеЗначенияПараметровРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиОбъектомИнформационнойБазыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанныеРасшифровки = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
		Если ТекДанныеРасшифровки <> Неопределено Тогда
			НовыйИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			ТекДанныеРасшифровки.ИдентификаторСтроки = НовыйИдентификаторСтроки;
			Если Копирование Тогда
				//  Очистим текущую строку в случае копирования.
				ТекДанныеРасшифровки.ТипОбъектаМетаданных			 = ПредопределенноеЗначение("Перечисление.ТипыОбъектовИбДляРасшифровки.ПустаяСсылка");
				ТекДанныеРасшифровки.НаименованиеОбъектаМетаданных	 = "";
				ТекДанныеРасшифровки.ФормаРасшифровки				 = "";
			Иначе
				// Не очищаем данные строки.
			КонецЕсли;
		Иначе
			// Строка не выбрана. Не изменяем.
		КонецЕсли;
	Иначе
		// Не новая строка. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиОбъектомИнформационнойБазыПередУдалением(Элемент, Отказ)
	// Удалим зависимые текущей строке строки.
	ТекДанныеРасшифровки = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Если ТекДанныеРасшифровки <> Неопределено Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ИдентификаторСтроки", ТекДанныеРасшифровки.ИдентификаторСтроки);
		НайденныеСтроки = ПараметрыРасшифровкиОбъектом.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ПараметрыРасшифровкиОбъектом.Удалить(ТекНайденныеСтроки); 
		КонецЦикла; 
	Иначе
		// Строка не выбрана. Не удаляем зависимые.
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиОбъектомИнформационнойБазыНаименованиеОбъектаМетаданныхОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекДанные.ТипОбъектаМетаданных) Тогда
			СписокВыбораНаименованияМетаданного = ПолучитьСписокВыборОбъектаМетаданного(ТекДанные.ТипОбъектаМетаданных);
			Если СписокВыбораНаименованияМетаданного.Количество() > 0 Тогда
				Оповещение = Новый ОписаниеОповещения("СписокВыбораНаименованияМетаданного_ПослеВыбора", ЭтотОбъект);
				ПоказатьВыборИзСписка(Оповещение, СписокВыбораНаименованияМетаданного);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить список объектов для типа объектов %ТипМетаданного%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипМетаданного%", Строка(ТекДанные.ТипОбъектаМетаданных));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не заполнен тип объекта. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиОбъектомИнформационнойБазыФормаРасшифровкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекДанные.ТипОбъектаМетаданных) И ЗначениеЗаполнено(ТекДанные.НаименованиеОбъектаМетаданных) Тогда
			СписокВыбораФормыОбъекта = ПолучитьСписокВыбораФормыОбъекта(ТекДанные.ТипОбъектаМетаданных, ТекДанные.НаименованиеОбъектаМетаданных);
			Если СписокВыбораФормыОбъекта.Количество() > 0 Тогда
				Оповещение = Новый ОписаниеОповещения("СписокВыбораФормыМетаданного_ПослеВыбора", ЭтотОбъект);
				ПоказатьВыборИзСписка(Оповещение, СписокВыбораФормыОбъекта);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить список форм для типа объектов %ТипМетаданного%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипМетаданного%", Строка(ТекДанные.ТипОбъектаМетаданных));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не заполнены тип и наименование объекта. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПротестироватьФорму(Команда)
	ТекДанные = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		ТипОбъектаМетаданных			 = ТекДанные.ТипОбъектаМетаданных;
		НаименованиеОбъектаМетаданных	 = ТекДанные.НаименованиеОбъектаМетаданных;
		ФормаРасшифровки				 = ТекДанные.ФормаРасшифровки;
		Если (ЗначениеЗаполнено(ТипОбъектаМетаданных)) И (ЗначениеЗаполнено(НаименованиеОбъектаМетаданных)) И (ЗначениеЗаполнено(ФормаРасшифровки)) Тогда
			СтруктураПараметров = ПолучитьСтруктуруПараметровФиксированныхЗначений(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ТекДанные.ИдентификаторСтроки);
			БизнесАнализКлиентУХ.ОтобразитьРаскрытиеОбъектомИнформационнойБазы(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровки, СтруктураПараметров);
		Иначе
			ТекстСообщения = НСтр("ru = 'Для выполнения этого действия требуется указать Тип объекта, Объект и Форму объекта. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРасшифровкиОбъектомВыражениеПолученияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанныеРасшифровка = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	ВвестиПолеОтчетаРасшифровки(ТекДанныеРасшифровка);
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРасшифровкиОбъектомИмяПараметраРасшифровкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанныеРасшифровка = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
	Если ТекДанныеРасшифровка <> Неопределено Тогда
		ТипОбъектаМетаданных			 = ТекДанныеРасшифровка.ТипОбъектаМетаданных;
		НаименованиеОбъектаМетаданных	 = ТекДанныеРасшифровка.НаименованиеОбъектаМетаданных;
		ФормаРасшифровка				 = ТекДанныеРасшифровка.ФормаРасшифровки;
		Если (ЗначениеЗаполнено(ТипОбъектаМетаданных)) И (ЗначениеЗаполнено(НаименованиеОбъектаМетаданных)) И (ЗначениеЗаполнено(ФормаРасшифровка)) Тогда
			СписокДоступныхПараметрыФормы = ПолучитьСписокДоступныхПараметровФормы(ТипОбъектаМетаданных, НаименованиеОбъектаМетаданных, ФормаРасшифровка);
			Если СписокДоступныхПараметрыФормы.Количество() > 0 Тогда
				Оповещение = Новый ОписаниеОповещения("СписокВыбораПараметровФормы_ПослеВыбора", ЭтотОбъект);
				ПоказатьВыборИзСписка(Оповещение, СписокДоступныхПараметрыФормы);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить список параметров формы. Операция отменена.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Для выполнения этого действия требуется указать Тип объекта, Объект и Форму отображения. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкиОбъектомИнформационнойБазыНаименованиеОбъектаМетаданныхПриИзменении(Элемент)
	УстановитьПредставлениеРасшифровкиОбъектомПоУмолчанию();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРасшифровкиОбъектомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанныеРасшифровка = Элементы.РасшифровкиОбъектомИнформационнойБазы.ТекущиеДанные;
		Если ТекДанныеРасшифровка <> Неопределено Тогда
			ТекДанныеПараметры = Элементы.ПараметрыРасшифровкиОбъектом.ТекущиеДанные;
			Если ТекДанныеПараметры <> Неопределено Тогда
				ТекДанныеПараметры.ИдентификаторСтроки = ТекДанныеРасшифровка.ИдентификаторСтроки;
				УстановитьОтборПараметровРасшифровкиОбъектом();
			Иначе
				// Строка не выбрана. Ничего не делаем.
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не выбрана расшифровка. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Не новая строка. Не изменяем идентификатор.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеЗначенияРасшифровка_ПослеВыбора(ЗначениеВыбора, ДопПараметры) Экспорт
	Если ЗначениеВыбора <> Неопределено Тогда
		Если ЗначениеВыбора.Значение = "ПолеОтчета" Тогда
			ДанныеСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ТекДанные", Неопределено);
			ВвестиПолеОтчетаРасшифровки(ДанныеСтроки);
		ИначеЕсли ЗначениеВыбора.Значение = "ФиксированноеЗначение" Тогда
			ДанныеСтроки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДопПараметры, "ТекДанные", Неопределено);
			ВвестиФиксированноеЗначениеРасшифровки(ДанныеСтроки);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант выбранного значения: %ЗначениеВыбора%. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеВыбора%", Строка(ЗначениеВыбора));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пользователь отказался. Ничего не делаем.    
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРасшифровкиОбъектомПредставлениеЗначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанныеРасшифровка = Элементы.ПараметрыРасшифровкиОбъектом.ТекущиеДанные;
	Если ТекДанныеРасшифровка <> Неопределено Тогда
		СписокВыбора = Новый СписокЗначений();
		СписокВыбора.Добавить("ФиксированноеЗначение",	 Нстр("ru = 'Фиксированные значение'"));
		СписокВыбора.Добавить("ПолеОтчета",				 Нстр("ru = 'Поле отчета'"));
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекДанные", ТекДанныеРасшифровка);
        Оповещение = Новый ОписаниеОповещения("ПредставлениеЗначенияРасшифровка_ПослеВыбора", ЭтотОбъект, СтруктураПараметров);
        ПоказатьВыборИзСписка(Оповещение, СписокВыбора);
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОбновитьПредставлениеЗначенияПараметровРасшифровки();
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыРасшифровкиОбъектомПриИзменении(Элемент)
	ОбновитьПредставлениеЗначенияПараметровРасшифровки();
КонецПроцедуры
