Перем ТекущийЭтап;
Перем КэшСогласованияЭтапа;

// Отображает диалог выбора дополнительных согласующих.
&НаКлиенте
Процедура ВыбратьДополнительныхСогласующих()
	// Получим массив различных этапов, исключая дубликаты для разных пользователей.
	МассивРазличныхЭтапов = Новый Массив;
	Для Каждого ТекТекущиеЭтапыСогласования Из ТекущиеЭтапыСогласования Цикл
		Если МассивРазличныхЭтапов.Найти(ТекТекущиеЭтапыСогласования.ЭтапПроцесса) = Неопределено Тогда
			МассивРазличныхЭтапов.Добавить(ТекТекущиеЭтапыСогласования.ЭтапПроцесса);
		Иначе
			Продолжить;		// Выполняем поиск далее.
		КонецЕсли;	
	КонецЦикла;	
	// Убедимся, что этап единственный. В случае успеха - вызовем форму дополнительного согласования.
	Если МассивРазличныхЭтапов.Количество() = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Не удалось получить этапы согласования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	ИначеЕсли МассивРазличныхЭтапов.Количество() = 1 Тогда	
		Строка = ТекущиеЭтапыСогласования.НайтиСтроки(Новый Структура("ЭтапПроцесса", Наименование))[0];
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭкземплярПроцесса", Строка.ДокументПроцесса);
		СтруктураПараметров.Вставить("ЭтапСогласования", Наименование);
		ОткрытьФорму("Обработка.ДополнительноеСогласование.Форма.Форма", СтруктураПараметров, , , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		ТекстОшибки = НСтр("ru = 'Запрещено добавлять согласующих на несколько этапов согласования. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры		// ВыбратьДополнительныхСогласующих()

// Управляет доступностью элементов формы.
&НаСервере
Процедура УправлениеДоступностью()
	// Доступность команд Согласовать, На шаг назад и Отклонить в зависимости от режима открытия.
	ЭтоУтверждение	 = (СокрЛП(РежимСогласования) = "Утверждение");
	ЭтоОтклонение	 = (СокрЛП(РежимСогласования) = "Отклонение");
	ЭтоНаШагНазад	 = (СокрЛП(РежимСогласования) = "НаШагНазад");
	Если СокрЛП(РежимСогласования) = "" Тогда
		// Общий режим, не изменяем доступность команд.
	Иначе
		НужноСкрытьУтверждение	 = ЭтоНаШагНазад ИЛИ ЭтоОтклонение;
		НужноСкрытьНаШагНазад	 = ЭтоУтверждение ИЛИ ЭтоОтклонение;
		НужноСкрытьОтклонение	 = ЭтоУтверждение ИЛИ ЭтоНаШагНазад;
		Если НужноСкрытьУтверждение Тогда
			Элементы.СогласоватьОтчет.Видимость		 = Ложь;
		КонецЕсли;
		Если НужноСкрытьНаШагНазад Тогда
			Элементы.ОтклонитьОтчет.Видимость		 = Ложь;
		КонецЕсли;
		Если НужноСкрытьОтклонение Тогда
			Элементы.ВернутьИсполнителю.Видимость	 = Ложь;
		КонецЕсли;
	КонецЕсли;
	// Видимость кнопки На шаг назад в зависимости от этапов предшественников.
	Если ТекущиеЭтапыСогласования.Количество() > 0 Тогда
		ПерваяСтрокаЭтапа = ТекущиеЭтапыСогласования[0];
		МассивЭтаповПредшественников = Новый Массив;
		ТекЭтап = ПерваяСтрокаЭтапа.ЭтапПроцесса;
		ТекПроцесс = ПерваяСтрокаЭтапа.ДокументПроцесса;
		МассивЭтаповПредшественников = МодульРегламентныхЗаданийУХ.ПолучитьМассивПредшественниковЭтапаРекурсивно(ТекЭтап, ТекПроцесс, Истина);
		МассивЭтаповПредшественников = МодульРегламентныхЗаданийУХ.ОтделитьНеЭтапыСогласования(МассивЭтаповПредшественников); 
		ЕстьПредшественники = МассивЭтаповПредшественников.Количество() <> 0;
		Если Не ЕстьПредшественники Тогда
			Элементы.ОтклонитьОтчет.Видимость = Ложь;
		Иначе
			// Оставляем видимость команды прежней.
		КонецЕсли;
	Иначе
		// Нет этапов. Не изменяем видимость команды.
	КонецЕсли;
	// Доступность команды Добавить согласующих.
	Элементы.ДобавитьСогласующих.Доступность = ЗначениеЗаполнено(СогласовываемыйДокумент);
	// Блокировка отклонения для этапа Обработка.
	Если ЗначениеЗаполнено(Наименование) Тогда
		ЭтоЭтапОбработка = (Наименование.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
		Если ЭтоЭтапОбработка Тогда
			Элементы.ВернутьИсполнителю.Видимость	 = Ложь;
			Элементы.ОтклонитьОтчет.Видимость		 = Ложь;
		Иначе
			// Оставляем видимость элементов прежней.
		КонецЕсли;
	Иначе
		// Этап не заполнен.
	КонецЕсли;	
	// Отображение элементов в зависимости от множественного/единичного режима.
	ЕстьСогласовываемыйДокумент = (СогласовываемыйДокумент <> Неопределено);
	Элементы.ХодСогласования.Видимость = ЕстьСогласовываемыйДокумент;
	Элементы.ЭтапСогласования.Видимость = ЕстьСогласовываемыйДокумент;
	Элементы.ТаблицаПакетаДокументов.Видимость = Не ЕстьСогласовываемыйДокумент;
	Если ЕстьСогласовываемыйДокумент Тогда
		Элементы.ГруппаКомментарий.Заголовок = НСтр("ru = 'Виза (пометка, пояснение): '");
	Иначе
		Элементы.ГруппаКомментарий.Заголовок = НСтр("ru = 'Виза (пометка, пояснение ко всем документам): '");
	КонецЕсли;
КонецПроцедуры

// Изменяет текст на кнопке дополнительного согласования.
&НаСервере
Процедура ДобавитьТекстКоличествоДопСогласующих()
	ПерваяСтрокаЭтапа = ТекущиеЭтапыСогласования[0];
	ТаблицаДопСогласующих = МодульСогласованияДокументовУХ.ПолучитьТаблицуДопСогласующихПоЭтапу(ПерваяСтрокаЭтапа.ДокументПроцесса, Наименование);
	КоличествоДопСогласующих = ТаблицаДопСогласующих.Количество();
	Если КоличествоДопСогласующих > 0 Тогда
		НовыйЗаголовок = НСтр("ru = 'Дополнительные согласующие (%КоличествоДопСогласующих%)'");
		НовыйЗаголовок = СтрЗаменить(НовыйЗаголовок, "%КоличествоДопСогласующих%", Строка(КоличествоДопСогласующих));
		Элементы.ДобавитьСогласующих.Заголовок = НовыйЗаголовок; 
	Иначе
		Элементы.ДобавитьСогласующих.Заголовок = НСтр("ru = 'Дополнительные согласующие'");
	КонецЕсли;
КонецПроцедуры

// Заполняет таблицу пакета документов.
&НаСервере
Процедура ВывестиТаблицуПакетаДокументов()
	ТаблицаПакетаДокументов.Очистить();
	Если ЭтоАдресВременногоХранилища(АдресТаблицыЗадач) Тогда
		// Таблица задач получена ранее. Заполним по ней.
		ТаблицаЗадач = ПолучитьИзВременногоХранилища(АдресТаблицыЗадач);
		ТаблицаЗадачРабочая = ТаблицаЗадач.Скопировать();
		ТаблицаЗадачРабочая.Свернуть("Ссылка, Этап, Замещаемый, Пользователь");
		Для Каждого ТекТаблицаЗадачРабочая Из ТаблицаЗадачРабочая Цикл
			НоваяСтрока = ТаблицаПакетаДокументов.Добавить();
			НоваяСтрока.ОбъектСогласования	 = ТекТаблицаЗадачРабочая.Ссылка;
			НоваяСтрока.Этап				 = ТекТаблицаЗадачРабочая.Этап;
			Если ЗначениеЗаполнено(ТекТаблицаЗадачРабочая.Замещаемый) Тогда
				НоваяСтрока.Ответственный	 = ТекТаблицаЗадачРабочая.Замещаемый;
			Иначе
				НоваяСтрока.Ответственный	 = ТекТаблицаЗадачРабочая.Пользователь;
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Таблица задач не передана. Получим данные снова.
		ТаблицаПараметровЗадач = Справочники.Задачи.ПолучитьТаблицуПараметровЗадач(СписокЗадач);
		ТаблицаПараметровЗадач.Свернуть("ЭтапПроцесса, Ответственный, Выполнено, СвязанныйОбъект");	
		МассивПользователей = МодульУправленияПроцессамиУХ.ПолучитьЗамещаемыхТекущегоПользователя(ТекПользователь);
		МассивПользователей.Добавить(ТекПользователь);
		Для Каждого ТекТаблицаПараметровЗадач Из ТаблицаПараметровЗадач Цикл
			Если Не ТекТаблицаПараметровЗадач.Выполнено Тогда
				Если МассивПользователей.Найти(ТекТаблицаПараметровЗадач.Ответственный) <> Неопределено Тогда
					НоваяСтрока = ТаблицаПакетаДокументов.Добавить();
					НоваяСтрока.ОбъектСогласования = ТекТаблицаПараметровЗадач.СвязанныйОбъект;
					НоваяСтрока.Этап			 = ТекТаблицаПараметровЗадач.ЭтапПроцесса;
					НоваяСтрока.Ответственный	 = ТекТаблицаПараметровЗадач.Ответственный;
				Иначе
					// Задача принадлежит другому пользователю. Не выводим.
				КонецЕсли;
			Иначе
				// задача выполнена. Не отражаем в списке.
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Определяет, принадлежит ли СсылкаВход справочнику либо документу.
&НаСервереБезКонтекста
Функция	ЭтоСсылочныйОбъект(СсылкаВход)
	РезультатФункции = Ложь;
	ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаВход));
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаВход));
	РезультатФункции = (ЭтоСправочник ИЛИ ЭтоДокумент);
	Возврат РезультатФункции;
КонецФункции		// ЭтоСсылочныйОбъект()

// Возвращает соответствие даныых этапов из массива МассивЭтаповВход.
&НаСервереБезКонтекста
Функция СоответствиеДанныхЭтапов(МассивЭтаповВход)
	РезультатФункции = Справочники.ЭтапыУниверсальныхПроцессов.СоответствиеДанныхЭтапов(МассивЭтаповВход);
	Возврат РезультатФункции;
КонецФункции		// СоответствиеДанныхЭтапов()

// Возвращает соответствие даныых этапов из массива текущих этапов 
// МассивЭтаповВход.
&НаКлиенте
Функция СоответствиеДанныхТекущихЭтапов(МассивТекущихЭтаповВход)
	РезультатФункции = Новый Соответствие;
	МассивЭтапов = Новый Массив;
	Для Каждого ТекМассивТекущихЭтаповВход Из МассивТекущихЭтаповВход Цикл
		МассивЭтапов.Добавить(ТекМассивТекущихЭтаповВход.Этап);
	КонецЦикла;	
	РезультатФункции = СоответствиеДанныхЭтапов(МассивЭтапов);
	Возврат РезультатФункции;
КонецФункции		// СоответствиеДанныхТекущихЭтапов()

// Определяет, нужно ли обновить форму ФормаВход при окончании согласования.
&НаКлиенте
Функция НужноПеречитатьФрорму(ФормаВход)
	РезультатФункции = Ложь;
	Если ТипЗнч(ФормаВход) = Тип("УправляемаяФорма") Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВход, "Объект") Тогда
			ОбъектФормыВладельца = ФормаВход.Объект;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектФормыВладельца, "Ссылка") Тогда
				СсылкаВладелец = ОбъектФормыВладельца.Ссылка;
				РезультатФункции = ЭтоСсылочныйОбъект(СсылкаВладелец);
			Иначе
				РезультатФункции = Ложь; // Нет ссылки. Не обновляем форму.
			КонецЕсли;
		Иначе
			РезультатФункции = Ложь; // Объект не задан. Не обновляем форму.
		КонецЕсли;
	Иначе
		РезультатФункции = Ложь; // Владельцем выступает не форма. Не обновляем его.
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// НужноПеречитатьФрорму()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	//Параметр формы РежимОткрытия.
	Если Параметры.Свойство("РежимСогласования") Тогда
		РежимСогласования = Параметры.РежимСогласования;
	Иначе
		РежимСогласования = "";
	КонецЕсли;
	// Параметр формы ДопСогласование.
	Если Параметры.Свойство("ДопСогласование") Тогда
		ДопСогласование = Параметры.ДопСогласование;
	Иначе
		ДопСогласование = Ложь;
	КонецЕсли;
	// Параметр СписокЗадач.
	Если Параметры.Свойство("СписокЗадач") Тогда
		СписокЗадач = Параметры.СписокЗадач;
	Иначе
		СписокЗадач = Новый СписокЗначений;
	КонецЕсли;
	// Параметр АдресТаблицыЗадач.
	АдресТаблицыЗадач = Параметры.АдресТаблицыЗадач;
	
	СогласовываемыйДокумент = Параметры.СогласовываемыйДокумент;
	ПакетДокументов = ?(НЕ Параметры.Свойство("ПакетДокументов"),Неопределено,Параметры.ПакетДокументов);
	Элементы.ДобавитьСогласующих.Пометка=Ложь;
	Элементы.ГруппаСогласующие.Видимость=Элементы.ДобавитьСогласующих.Пометка;
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	Элементы.СогласовываемыйДокумент.Видимость = ЗначениеЗаполнено(СогласовываемыйДокумент);
	Если СогласовываемыйДокумент = Неопределено И (ПакетДокументов = Неопределено ИЛИ НЕ ПакетДокументов.Количество()) = Неопределено Тогда
		Отказ = истина;
		Возврат;
	КонецЕсли;
	ЕстьСогласовываемыйДокумент = (СогласовываемыйДокумент <> Неопределено);
	Если ЕстьСогласовываемыйДокумент Тогда	
		
		ТаблицаЭтаповПользователя = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляТекущегоПользователя(СогласовываемыйДокумент, СписокЗадач);

		ЗначениеВРеквизитФормы(ТаблицаЭтаповПользователя, "ТекущиеЭтапыСогласования");
		Если ТекущиеЭтапыСогласования.Количество() = 0 Тогда
			
			ТекущийСогласующий =  МодульУправленияПроцессамиУХ.ПолучитьОтветственногоЗаТипОбъекта(СогласовываемыйДокумент,,,,"Согласующий");
			
			Если НЕ ЗначениеЗаполнено(ТекущийСогласующий) Тогда
				Отказ  = Истина;
				Сообщение = Новый СообщениеПользователю;
				ТекстСообщения = НСтр("ru = 'Для объекта %Документ% ответственный за согласование в матрице полномочий не задан. Установите нужный статус согласования вручную'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(СогласовываемыйДокумент));
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();	
				Возврат;	
			КонецЕсли;
			
			
			Если НЕ МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(СогласовываемыйДокумент,Неопределено,,ТекущийСогласующий) Тогда
				Отказ  = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = НСтр("ru = 'Процесс согласования не запущен. Необходимо отправить объект на согласование'");
				Сообщение.Сообщить();	
				Возврат;
			КонецЕсли;
			
			Отказ  = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Текущий пользователь не может согласовывать документ на данном этапе'");
			Сообщение.Сообщить();
			Возврат;
		Иначе
			ПерваяСтрокаЭтапа = ТекущиеЭтапыСогласования[0];
			Наименование = ПерваяСтрокаЭтапа.ЭтапПроцесса;
			ЗначениеВРеквизитФормы(МодульУправленияПроцессамиУХ.ПолучитьИсториюСогласованияЭтапа(Наименование, СогласовываемыйДокумент), "ТаблицаСогласования");
			ЕстьСуперПользователь  = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ДействияСогласованиеУХСервер.ВернутьЦФОПоОбъекту(СогласовываемыйДокумент));
			// Выведем количество доп согласующих.
			ДобавитьТекстКоличествоДопСогласующих();
		КонецЕсли;
		//Вывести историю согласования
		ОтчетПоИстории = Отчеты.ИсторияСогласования.Создать();
		ОтчетПоИстории.КлючевойОбъектПроцесса = СогласовываемыйДокумент;
		ОтчетПоИстории.ВывестиОтчетКомментарии(ТД_ИсторияСогласования);
		ВысотаТабДок = ТД_ИсторияСогласования.ВысотаТаблицы;
		Элементы.ТД_ИсторияСогласования.ТекущаяОбласть = ТД_ИсторияСогласования.Область(ВысотаТабДок, 1, ВысотаТабДок, 1);
	Иначе
		Если ПакетДокументов.Количество() > 0 Тогда
			ТекЭтап = Неопределено;
			Для Каждого Док Из ПакетДокументов Цикл
				ЗначениеВРеквизитФормы(МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляТекущегоПользователя(Док.Значение, СписокЗадач), "ТекущиеЭтапыСогласования");
				Если ТекущиеЭтапыСогласования.Количество() = 0  Тогда
					Отказ  = Истина;
					ТекстСообщения = НСтр("ru = 'Текущий пользователь не может согласовывать документ ""%Документ%""'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(Док.Значение));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					Возврат;
				Иначе
					Если ТекЭтап = Неопределено Тогда
						ТекЭтап = ТекущиеЭтапыСогласования[0].ЭтапПроцесса;
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			// Отобразим таблицу документов.
			ВывестиТаблицуПакетаДокументов();
		Иначе
			Отказ  = Истина;
			ТекстСообщения = НСтр("ru = 'Передан пустой пакет документов на согласование'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	ОтборЭтап = Новый Структура("Этап", ТекущиеЭтапыСогласования[0].ЭтапПроцесса);
	УтверждающиеДобавленные = ТекущиеЭтапыСогласования[0].ДокументПроцесса.ДополнительныеСогласующие.Выгрузить(ОтборЭтап);
	Для каждого СтрУтв Из УтверждающиеДобавленные Цикл
		НовСогл = ДопСогласующие.Добавить();
		НовСогл.Пользователь		 = СтрУтв.Пользователь;		
		НовСогл.ДобавленИзМаршрута	 = Ложь;
	КонецЦикла;
	УправлениеДоступностью();	
	// Отображение команды ОтклонитьОтчет.
	Если НЕ ЕстьСогласовываемыйДокумент Тогда
	   Элементы.ОтклонитьОтчет.Видимость = Ложь;
    КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СогласоватьОтчет(Команда)
	// Получения данных для обработки.
	Если СогласовываемыйДокумент <> Неопределено Тогда
		ПакетДокументов = Новый СписокЗначений;
		ПакетДокументов.Добавить(СогласовываемыйДокумент);
		ТекущийЭтап = ВернутьМассивДляПередачиПоОповещению();
	Иначе
		ТекущийЭтап = ВернутьМассивДляПередачиПоОповещению();
	КонецЕсли;
	// Обход полученных данных.
	СоответствиеДанныхЭтапов = СоответствиеДанныхТекущихЭтапов(ТекущийЭтап);
	РазрешеноЗакрытие = Истина;
	Для Каждого СтрЭтап ИЗ ТекущийЭтап Цикл
		Замещение = (СтрЭтап.Пользователь <> ТекПользователь);
		ТекЭтап = СтрЭтап.Этап;
		// Проверим, что заполнен комментарий при утверждении.
		СтруктураДанныхЭтапа = СоответствиеДанныхЭтапов.Получить(ТекЭтап);
		Если СтруктураДанныхЭтапа <> Неопределено Тогда
			ОбязательныйКомментарийПриСогласовании = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхЭтапа, "ОбязательныйКомментарийПриСогласовании", Ложь);
		Иначе
			ОбязательныйКомментарийПриСогласовании = Ложь;
		КонецЕсли;
		НовыйКоментарий = Комментарий.ПолучитьТекст();
		Если (НЕ ОбязательныйКомментарийПриСогласовании) ИЛИ (СокрЛП(НовыйКоментарий) <> "") Тогда
			Если СтрЭтап.ДопСогласование Тогда
				// Виза доп согласующих.
				МодульСогласованияДокументовУХ.УтвердитьЭтапДополнительногоСогласования(СтрЭтап.Пользователь, СтрЭтап.ДокументСогласования, ТекЭтап, СтрЭтап.Комментарий, СтрЭтап.Организация, Замещение);	
			Иначе
				// Непосредственное утверждение.
				ТекущийЭтап_ = Новый Структура();
				ТекущийЭтап_.Вставить("Этап", ТекЭтап);
				ТекущийЭтап_.Вставить("ДокументСогласования", СтрЭтап.ДокументСогласования);
				ТекущийЭтап_.Вставить("Организация", СтрЭтап.Организация);
				ТекущийЭтап_.Вставить("Комментарий", НовыйКоментарий);
				Если ТипЗнч(ВладелецФормы) = Тип("УправляемаяФорма") Тогда
					ИдентификаторФормыДляПротокола = ВладелецФормы.УникальныйИдентификатор;
				Иначе
					ИдентификаторФормыДляПротокола = Неопределено;
				КонецЕсли;
				МодульУправленияПроцессамиУХ.УтвердитьЭтап(, ТекущийЭтап_, СтрЭтап.ТекущийДокумент, СтрЭтап.Пользователь, Замещение, ИдентификаторФормыДляПротокола);	
			КонецЕсли; 	
		Иначе
			ТекстСообщения = НСтр("ru = 'Требуется ввести комментарий перед утверждением'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РазрешеноЗакрытие = Ложь;
		КонецЕсли;
	КонецЦикла;
	// Обновление интерфейса.
	Оповестить("ОбновитьМоиЗадачиИОповещения");
	Оповестить("СостояниеЗаявкиПриИзменении");
	Если РазрешеноЗакрытие Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть(Новый Структура("Режим","КнопкаСогласовать"));
	Иначе
		// Не закрываем форму.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтклонитьОтчет(Команда)
	// Получения данных для обработки.
	Если СогласовываемыйДокумент <> Неопределено Тогда
		ПакетДокументов = Новый СписокЗначений;
		ПакетДокументов.Добавить(СогласовываемыйДокумент);
		ТекущийЭтап = ВернутьМассивДляПередачиПоОповещению();
	Иначе
		ТекущийЭтап = ВернутьМассивДляПередачиПоОповещению();
	КонецЕсли;
	// Обход полученных данных.
	СоответствиеДанныхЭтапов = СоответствиеДанныхТекущихЭтапов(ТекущийЭтап);
	РазрешеноЗакрытие = Истина;
	Для Каждого СтрЭтап ИЗ ТекущийЭтап Цикл
		ТекЭтап = СтрЭтап.Этап;
		// Проверим, что заполнен комментарий при отклонении.
		СтруктураДанныхЭтапа = СоответствиеДанныхЭтапов.Получить(ТекЭтап);
		Если СтруктураДанныхЭтапа <> Неопределено Тогда
			ОбязательныйКомментарийПриОтклонении = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхЭтапа, "ОбязательныйКомментарийПриОтклонении", Ложь);
		Иначе
			ОбязательныйКомментарийПриОтклонении = Ложь;
		КонецЕсли;
		НовыйКоментарий = Комментарий.ПолучитьТекст();
		Если (НЕ ОбязательныйКомментарийПриОтклонении) ИЛИ (СокрЛП(НовыйКоментарий) <> "") Тогда
			// Виза доп согласующих.
			Если СтрЭтап.ДопСогласование Тогда
				МодульСогласованияДокументовУХ.ПоставитьДопВизу(СтрЭтап.Пользователь, СтрЭтап.ДокументСогласования, СтрЭтап.Этап, Ложь, СтрЭтап.Комментарий, СтрЭтап.Организация);
			Иначе
				// Т.к. отклонить имеет право любой участник согласования, после установки визы доп согласующего продолжаем выполнение по стандартному алгоритму.
			КонецЕсли;  
			// Непосредственное отклонение.
			Замещение = (СтрЭтап.Пользователь <> ТекПользователь);
			ТекущийЭтап_ = Новый Структура();
			ТекущийЭтап_.Вставить("Этап", СтрЭтап.Этап);
			ТекущийЭтап_.Вставить("ДокументСогласования", СтрЭтап.ДокументСогласования);
			ТекущийЭтап_.Вставить("Организация", СтрЭтап.Организация);
			ТекущийЭтап_.Вставить("Комментарий", Комментарий.ПолучитьТекст());
			МодульУправленияПроцессамиУХ.ОтклонитьЭтап(,ТекущийЭтап_, СтрЭтап.ТекущийДокумент, СтрЭтап.Пользователь, Замещение);
		Иначе
			ТекстСообщения = НСтр("ru = 'Требуется ввести комментарий перед отклонением'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РазрешеноЗакрытие = Ложь;
		КонецЕсли;
	КонецЦикла;
	// Обновление интерфейса.
	Оповестить("ОбновитьМоиЗадачиИОповещения");		
	Оповестить("СостояниеЗаявкиПриИзменении");
	Если РазрешеноЗакрытие Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть(Новый Структура("Режим","КнопкаОтклонить"));
	Иначе
		// Не закрываем форму.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВернутьИсполнителю(Команда)
	// Получения данных для обработки.
	ТекущийЭтап = Новый Массив;
	Если СогласовываемыйДокумент <> Неопределено Тогда
		ПакетДокументов = Новый СписокЗначений;
		ПакетДокументов.Добавить(СогласовываемыйДокумент);
		ТекущийЭтап = ВернутьМассивДляПередачиПоОповещению();
	Иначе
		ТекущийЭтап = ВернутьМассивДляПередачиПоОповещению();
	КонецЕсли;
	// Обход полученных данных.
	СоответствиеДанныхЭтапов = СоответствиеДанныхТекущихЭтапов(ТекущийЭтап);
	РазрешеноЗакрытие = Истина;
	Для Каждого СтрЭтап ИЗ ТекущийЭтап Цикл   
		ТекЭтап = СтрЭтап.Этап;
		// Проверим, что заполнен комментарий при отклонении.
		СтруктураДанныхЭтапа = СоответствиеДанныхЭтапов.Получить(ТекЭтап);
		Если СтруктураДанныхЭтапа <> Неопределено Тогда
			ОбязательныйКомментарийПриОтклонении = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхЭтапа, "ОбязательныйКомментарийПриОтклонении", Ложь);
		Иначе
			ОбязательныйКомментарийПриОтклонении = Ложь;
		КонецЕсли;
		НовыйКоментарий = Комментарий.ПолучитьТекст();
		Если (НЕ ОбязательныйКомментарийПриОтклонении) ИЛИ (СокрЛП(НовыйКоментарий) <> "") Тогда
			// Виза дополнительных согласующих.
			Замещение = (СтрЭтап.Пользователь <> ТекПользователь);
			Если СтрЭтап.ДопСогласование Тогда
				МодульСогласованияДокументовУХ.ПоставитьДопВизу(СтрЭтап.Пользователь, СтрЭтап.ДокументСогласования, ТекЭтап, Ложь, СтрЭтап.Комментарий, СтрЭтап.Организация);
			Иначе
				// Т.к. отклонить имеет право любой участник согласования, после установки визы доп согласующего продолжаем выполнение по стандартному алгоритму.
			КонецЕсли;  
			// Непосредственное отклонение.
			ТекущийЭтап_ = Новый Структура();
			ТекущийЭтап_.Вставить("Этап",					 ТекЭтап);
			ТекущийЭтап_.Вставить("ДокументСогласования",	 СтрЭтап.ДокументСогласования);
			ТекущийЭтап_.Вставить("Организация",			 СтрЭтап.Организация);
			ТекущийЭтап_.Вставить("Комментарий",			 НовыйКоментарий);
			МодульУправленияПроцессамиУХ.ВернутьДокументНаДоработку(, ТекущийЭтап_, СтрЭтап.ТекущийДокумент, СтрЭтап.Пользователь, Замещение);
			ВладелецЭтойФормы = ЭтаФорма.ВладелецФормы;
			Если НужноПеречитатьФрорму(ВладелецЭтойФормы) Тогда
				ВладелецЭтойФормы.Прочитать();
			Иначе
				// Не перечитываем форму владельца.
			КонецЕсли;	
		Иначе
			ТекстСообщения = НСтр("ru = 'Требуется ввести комментарий перед отклонением'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РазрешеноЗакрытие = Ложь;
		КонецЕсли;
	КонецЦикла;
	// Обновление интерфейса.
	Оповестить("ОбновитьМоиЗадачиИОповещения");
	Оповестить("СостояниеЗаявкиПриИзменении");
	Если РазрешеноЗакрытие Тогда
		ЭтаФорма.Модифицированность = Ложь;
		Закрыть(Новый Структура("Режим","КнопкаВернутьИнициатору"));
	Иначе
		// Не закрываем форму.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьЭтапаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Наименование = ВыбранноеЗначение.Значение;
		ОбработатьВыборЭтапа();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаименованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	Для Каждого ТекЭлемент Из ТекущиеЭтапыСогласования Цикл
		СписокВыбора.Добавить(ТекЭлемент.ЭтапПроцесса);
	КонецЦикла;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьЭтапаЗавершение", ЭтотОбъект);
	ПоказатьВыборИзСписка(ОписаниеОповещения, СписокВыбора, Элемент,  СписокВыбора.НайтиПоЗначению(Наименование));

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборЭтапа()
		
КонецПроцедуры

&НаСервере
Функция ВернутьМассивДляПередачиПоОповещению(ПроизвольныйЭтап = Неопределено)
	ТекущийЭтап = Новый Массив;
	ПакетДокументовСвертка = ОбщегоНазначенияКлиентСерверУХ.СвернутьСписокЗначений(ПакетДокументов);
	Для Каждого Док Из ПакетДокументовСвертка Цикл
		Если СписокНеМаршрутных.НайтиПоЗначению(Док.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ТаблицаЭтаповПоТекДокументу = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляТекущегоПользователя(Док.Значение, СписокЗадач);
		ТаблицаЭтаповПоТекДокументу.Свернуть("ЭтапПроцесса, ПравоРедактирования, ДокументПроцесса, Организация, ДопСогласование, Пользователь");
		ЗначениеВРеквизитФормы(ТаблицаЭтаповПоТекДокументу, "ТекущиеЭтапыСогласования");
		ТекстКомментария = Комментарий.ПолучитьТекст();
		Для Каждого Строка Из ТекущиеЭтапыСогласования Цикл
			СтруктураДобавления = Новый Структура;
			СтруктураДобавления.Вставить("Этап",					 Строка.ЭтапПроцесса);
			СтруктураДобавления.Вставить("ДокументСогласования",	 Строка.ДокументПроцесса);
			СтруктураДобавления.Вставить("Организация",				 Строка.Организация);
			СтруктураДобавления.Вставить("Комментарий",				 ТекстКомментария);
			СтруктураДобавления.Вставить("ТекущийДокумент",			 Строка.ДокументПроцесса.КлючевойОбъектПроцесса);
			СтруктураДобавления.Вставить("ДопСогласование",			 Строка.ДопСогласование);
			СтруктураДобавления.Вставить("Пользователь",			 Строка.Пользователь);
			Если НЕ ПроизвольныйЭтап = Неопределено Тогда
				СтруктураДобавления.Вставить("ПроизвольныйЭтап", ПроизвольныйЭтап);
			КонецЕсли;
			ТекущийЭтап.Добавить(СтруктураДобавления);
		КонецЦикла;	
	КонецЦикла;
	Возврат ТекущийЭтап;
КонецФункции

&НаКлиенте
Процедура ДобавитьСогласующих(Команда)
	ВыбратьДополнительныхСогласующих();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьДопСогласующих" Тогда
		ДобавитьТекстКоличествоДопСогласующих();
	Иначе
		// Неизвестное оповещение. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодтверждениеЗакрытияЗавершение(Результат, Параметры) Экспорт
    Если Результат = КодВозвратаДиалога.Да Тогда
        ЭтаФорма.Модифицированность = Ложь;
		ЭтаФорма.Закрыть();
    Иначе       
		ЭтаФорма.Модифицированность = Истина;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Отказ = Ложь;
	Если ЭтаФорма.Модифицированность Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Виза сохранена не будет. Закрыть согласование?'");
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПодтверждениеЗакрытияЗавершение", ЭтаФорма);
		ПоказатьВопрос(Оповещение, ТекстВопроса, Режим, 0);
	Иначе
		Если НЕ ЗавершениеРаботы Тогда
			Оповестить("ОбновитьМоиЗадачиИОповещения");		
		Иначе
			// Не требуется изменять содержимое формы Мои оповещения. Отключено с целью избежать серверных вызовов.
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПакетаДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТаблицаПакетаДокументов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		Если ТекДанные.Свойство("ОбъектСогласования") Тогда
			ПоказатьЗначение(, ТекДанные.ОбъектСогласования);
		Иначе
			// Объекта согласования нет. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Строка не выбрана. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутСогласования(Команда)
	Если ЗначениеЗаполнено(СогласовываемыйДокумент) Тогда
		// Согласование для одного объекта.
		ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма, СогласовываемыйДокумент);
	Иначе	
		// Множественное согласование. Выведем маршрут текущего объекта.
		ТекущиеДанные = Элементы.ТаблицаПакетаДокументов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектСогласования) Тогда
			ДействияСогласованиеУХКлиент.МаршрутСогласования(ЭтаФорма,ТекущиеДанные.ОбъектСогласования);
		Иначе
			Возврат;			// Нет ссылки. Не показываем маршрут.
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСогласования(Команда)
	Если ЗначениеЗаполнено(СогласовываемыйДокумент) Тогда
		// Согласование для одного объекта.
		ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма, СогласовываемыйДокумент);
	Иначе
		// Множественное согласование. Выведем историю текущего объекта.
		ТекущиеДанные = Элементы.ТаблицаПакетаДокументов.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.ОбъектСогласования) Тогда
			ДействияСогласованиеУХКлиент.ИсторияСогласования(ЭтаФорма,ТекущиеДанные.ОбъектСогласования);
		Иначе
			Возврат;			// Нет ссылки. Не показываем историю.
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийПриИзменении(Элемент)
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры
