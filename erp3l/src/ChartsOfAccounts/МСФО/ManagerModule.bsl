#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ПолучитьРодителя(КодСчета) Экспорт

	Если СтрНайти(КодСчета, ".") > 0 Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	МСФО.Ссылка КАК Ссылка
		|ИЗ
		|	ПланСчетов.МСФО КАК МСФО
		|ГДЕ
		|	МСФО.Код В(&Код)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МСФО.Код УБЫВ");
		
		Запрос.УстановитьПараметр("Код", ПолучитьВозможныеКодыРодителей(КодСчета));
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();		
			Если Выборка.Следующий() Тогда
				Возврат Выборка.Ссылка;
			КонецЕсли; 
				
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("ПланСчетов.МСФО.ПустаяСсылка");

КонецФункции

Процедура ЗагрузитьПланСчетов(ДанныеТаблицы, ПолучитьСубконтоИзСчетаИсточника = Ложь) Экспорт
	
	КэшСозданных = ПолучитьКэшПометитьНаУдаление(ДанныеТаблицы.ТаблицаДанных);
	
	КэшЗначений = Новый Соответствие;
	ПоляТЧ = ПолучитьПоляТЧ();
	
	КэшироватьПланыСчетов(КэшЗначений);
	Если ПолучитьСубконтоИзСчетаИсточника Тогда		
		КэшСубконто = ПолучитьСопоставленияВидовСубконто(КэшЗначений.Получить("ПланСчетовИсточник"), КэшЗначений.Получить("ПланСчетовПриемник"));
	Иначе 
		КэшСубконто = Новый Соответствие;	
	КонецЕсли;	
	КэшЗначений.Вставить("ВидыСубконто", КэшСубконто);
		
	Для каждого СтрокаИсточник Из ДанныеТаблицы.ТаблицаДанных Цикл
		
		ТекущийКод = СокрЛП(СтрокаИсточник.Код);
		Если Не ЗначениеЗаполнено(ТекущийКод) Тогда
			Продолжить;
		КонецЕсли;
		
		ЕстьИзменение = Ложь;
		
		СсылкаСозданного = КэшСозданных.Получить(ТекущийКод);
		Если СсылкаСозданного = Неопределено Тогда			
			ТекущийОбъект = ПланыСчетов.МСФО.СоздатьСчет();
			ЕстьИзменение = Истина;
		Иначе 
			ТекущийОбъект = СсылкаСозданного.ПолучитьОбъект();
		КонецЕсли;
		
		Для каждого ТекущаяКолонка Из ДанныеТаблицы.ТаблицаДанных.Колонки Цикл			
			Если Не ПоляТЧ.Свойство(ТекущаяКолонка.Имя) Тогда
				УстановитьЗначение(ТекущийОбъект[ТекущаяКолонка.Имя], СтрокаИсточник[ТекущаяКолонка.Имя], КэшЗначений, ЕстьИзменение);
			КонецЕсли;			
		КонецЦикла;		
		
		Если ПолучитьСубконтоИзСчетаИсточника Тогда
			Если Не ТекущийОбъект.СчетИсточник.Пустая() Тогда
				ЗаполнитьСубконтоПоСчетуИсточнику(ТекущийОбъект, КэшСубконто, ЕстьИзменение);
			КонецЕсли;			
		Иначе	
			
			ДобавитьСубконто(ТекущийОбъект, СтрокаИсточник, КэшЗначений, 1, ЕстьИзменение);
			ДобавитьСубконто(ТекущийОбъект, СтрокаИсточник, КэшЗначений, 2, ЕстьИзменение);
			ДобавитьСубконто(ТекущийОбъект, СтрокаИсточник, КэшЗначений, 3, ЕстьИзменение);
						
			УдалитьПустыеСубконто(ТекущийОбъект);
			
		КонецЕсли;
		
		Если ЕстьИзменение Тогда
			
			ТекущийОбъект.Родитель = ПолучитьРодителя(ТекущийОбъект.Код);
			ТекущийОбъект.КодБыстрогоВыбора = СокрЛП(СтрЗаменить(ТекущийОбъект.Код, ".", ""));
			
			ПроверитьЗацикливаниеПоРодителю(ТекущийОбъект);
			
			ТекущийОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка				
				ТекущийОбъект.Записать();		
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Не удалось записать счет <%1> по причине: '");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, ТекущийОбъект) + ОписаниеОшибки(), ТекущийОбъект.СчетИсточник);
				
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	ОбновитьСчетаИБ();

КонецПроцедуры

Функция ПроверитьЗацикливаниеПоРодителю(ТекущийОбъект)
	
	Если ТекущийОбъект.ЭтоНовый() Тогда
		Возврат Ложь;//на него родители еще не ссылаются
	КонецЕсли;
	
	Если ТекущийОбъект.Родитель.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (ТекущийОбъект.Родитель = ТекущийОбъект.Ссылка) Или ТекущийОбъект.Родитель.ПринадлежитЭлементу(ТекущийОбъект.Ссылка) Тогда
		
		ТекущийОбъект.Родитель = ПредопределенноеЗначение("ПланСчетов.МСФО.ПустаяСсылка");		
		Сообщить(СтрШаблон(НСтр("ru = 'Родитель счета <%1> очищен т.к. произошло бы зацикливание уровней счетов'"), ТекущийОбъект.Код));
		
	КонецЕсли;
			
КонецФункции

Процедура ОбновитьСчетаИБ() Экспорт
	
	Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("МСФО").ПолучитьОбъект().ЗаполнитьРеквизитыОбъекта();
	ОбновитьПовторноИспользуемыеЗначения();

КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеПроцедурыФункции

Функция ПолучитьСопоставленияВидовСубконто(ПланСчетовИсточник, ПланСчетовПриемник)

	Запрос = Новый Запрос(ТекстЗапроса_ВидыСубконто());
	
	Запрос.УстановитьПараметр("ПланСчетовИсточник", ПланСчетовИсточник);
	Запрос.УстановитьПараметр("ПланСчетовПриемник", ПланСчетовПриемник);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(СокрЛП(Выборка.СтрокаВидСубконтоИсточник), Выборка.ВидСубконтоПриемник);
		Если Не ЗначениеЗаполнено(Выборка.ВидСубконтоПриемник) Тогда
			ТекстСообщения = НСтр("ru = 'Не найдено соответствие для вида субконто источника <%1> по типу <%2>'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ТекстСообщения, Выборка.ВидСубконтоИсточник, Выборка.ТипДанных), Выборка.ВидСубконтоИсточник);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ТекстЗапроса_ВидыСубконто()
	
	Возврат 
	"ВЫБРАТЬ
	|	СчетаБДВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	МАКСИМУМ(ВЫРАЗИТЬ(СчетаБДВидыСубконто.ТипДанных КАК СТРОКА(500))) КАК ТипДанных,
	|	МАКСИМУМ(СчетаБДВидыСубконто.ВидСубконтоСсылка) КАК ВидСубконтоСсылка
	|ПОМЕСТИТЬ втВидыСубконтоИсточника
	|ИЗ
	|	Справочник.СчетаБД.ВидыСубконто КАК СчетаБДВидыСубконто
	|ГДЕ
	|	СчетаБДВидыСубконто.Ссылка.Владелец = &ПланСчетовИсточник
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаБДВидыСубконто.ВидСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСубконтоКорпоративные.Наименование КАК ВидСубконто,
	|	ВидыСубконтоКорпоративные.ПредставлениеТипа КАК ТипДанных,
	|	ВидыСубконтоКорпоративные.Ссылка КАК ВидСубконтоСсылка
	|ПОМЕСТИТЬ втВидыСубконтоПриемника
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконтоКорпоративные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыСубконтоИсточника.ВидСубконто КАК СтрокаВидСубконтоИсточник,
	|	втВидыСубконтоИсточника.ВидСубконтоСсылка КАК ВидСубконтоИсточник,
	|	МАКСИМУМ(втВидыСубконтоПриемника.ВидСубконтоСсылка) КАК ВидСубконтоПриемник,
	|	МАКСИМУМ(втВидыСубконтоИсточника.ТипДанных) КАК ТипДанных
	|ИЗ
	|	втВидыСубконтоИсточника КАК втВидыСубконтоИсточника
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыСубконтоПриемника КАК втВидыСубконтоПриемника
	|		ПО (втВидыСубконтоПриемника.ТипДанных ПОДОБНО ""%"" + втВидыСубконтоИсточника.ТипДанных + ""%"")
	|
	|СГРУППИРОВАТЬ ПО
	|	втВидыСубконтоИсточника.ВидСубконто,
	|	втВидыСубконтоИсточника.ВидСубконтоСсылка";

КонецФункции

Процедура ЗаполнитьСубконтоПоСчетуИсточнику(ТекущийОбъект, КэшСубконто, ЕстьИзменение)
	
	ЧислоСубконтоИсточник = 0;
	ШаблонСообщения = НСтр("ru = 'Не удалось найти подходящий вид субконто для счета приемника <%1>, 
							|чтобы сопоставить вид субконто <%2> счета источника <%3>'");
	
	Для каждого СтрокаИсточник Из ТекущийОбъект.СчетИсточник.ВидыСубконто Цикл
		
		ВидСубконтоПриемник = КэшСубконто.Получить(СокрЛП(СтрокаИсточник.ВидСубконто));
		Если ВидСубконтоПриемник = Неопределено Тогда			
			Сообщить(СтрШаблон(ШаблонСообщения, ТекущийОбъект, СтрокаИсточник.ВидСубконто, ТекущийОбъект.СчетИсточник));
			Продолжить;			
		КонецЕсли;
		
		ЧислоСубконтоИсточник = ЧислоСубконтоИсточник + 1;
		
		Если ТекущийОбъект.ВидыСубконто.Количество() >= ЧислоСубконтоИсточник Тогда
			СтрокаПриемник = ТекущийОбъект.ВидыСубконто[ЧислоСубконтоИсточник-1];
		Иначе 
			СтрокаПриемник = ТекущийОбъект.ВидыСубконто.Добавить();
			ЕстьИзменение = Истина;
		КонецЕсли;
				
		УстановитьЗначение(СтрокаПриемник.ВидСубконто, ВидСубконтоПриемник, КэшСубконто, ЕстьИзменение);
		УстановитьЗначение(СтрокаПриемник.ТолькоОбороты, СтрокаИсточник.ТолькоОбороты, КэшСубконто, ЕстьИзменение);
				
	КонецЦикла;
	
	Для й = ЧислоСубконтоИсточник+1 По ТекущийОбъект.ВидыСубконто.Количество() Цикл
		ТекущийОбъект.ВидыСубконто.Удалить(ЧислоСубконтоИсточник);// удаляем субконто которых нет в источнике
		ЕстьИзменение = Истина;
	КонецЦикла;
	
	УдалитьПустыеСубконто(ТекущийОбъект);
	
КонецПроцедуры

Процедура УдалитьПустыеСубконто(ТекущийОбъект)

	ЧислоСубконто = ТекущийОбъект.ВидыСубконто.Количество();
	Для й = 1 По ЧислоСубконто Цикл
		СтрокаСубконто = ТекущийОбъект.ВидыСубконто[ЧислоСубконто-й];
		Если СтрокаСубконто.ВидСубконто.Пустая() Тогда
			ТекущийОбъект.ВидыСубконто.Удалить(СтрокаСубконто);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьВозможныеКодыРодителей(Знач ТекущийКод)
	
	КодыРодителей = Новый Массив;
	ДлинаКода = СтрДлина(ТекущийКод);
	ПозицияКода = ДлинаКода;
	ПозицияТочки = ДлинаКода;
	КодПодготовлен = Ложь;
	РазрядСоЗначениями = Ложь;
	
	Пока ПозицияКода <> 0 Цикл 
		
		ТекущийСимвол = Сред(ТекущийКод, ПозицияКода, 1);
		Если ТекущийСимвол = "." Тогда
			
			Если РазрядСоЗначениями Тогда			
				
				Если ПозицияТочки = ДлинаКода Тогда
					ТекущийКод = Лев(ТекущийКод, ПозицияКода) + Лев("00000", ПозицияТочки - ПозицияКода); //постфикса нет
				Иначе 
					ТекущийКод = Лев(ТекущийКод, ПозицияКода) + Лев("00000", ПозицияТочки - ПозицияКода - 1) + Сред(ТекущийКод, ПозицияТочки);//постфикс был с нулями
				КонецЕсли;
								
				КодПодготовлен = Истина;
				РазрядСоЗначениями = Ложь;
				
			КонецЕсли;		
			ПозицияТочки = ПозицияКода;		
			
		ИначеЕсли Не РазрядСоЗначениями И ТекущийСимвол <> "0" Тогда
			
			РазрядСоЗначениями = Истина;			
			Если КодПодготовлен Тогда
				
				ПозицияРодителя = ДлинаКода;
				КодыРодителей.Добавить(ТекущийКод);
				Пока ПозицияРодителя > ПозицияКода Цикл				
					
					Если Сред(ТекущийКод, ПозицияРодителя, 1) = "." Тогда
						КодыРодителей.Добавить(Лев(ТекущийКод, ПозицияРодителя-1));
					КонецЕсли;
					
					ПозицияРодителя = ПозицияРодителя - 1;
				КонецЦикла;
				
			КонецЕсли;
						
		КонецЕсли;
		ПозицияКода = ПозицияКода - 1;
		
	КонецЦикла;
	
	Возврат КодыРодителей;
	
КонецФункции

Функция ПолучитьПоляТЧ()
	
	ПоляТЧ = Новый Структура;
	Для каждого ПолеИсточник Из ПолучитьРеквизитыТЧ() Цикл
		Для й = 1 По 3 Цикл
			ПоляТЧ.Вставить(ПолеИсточник.Ключ + й, й);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ПоляТЧ;

КонецФункции

Процедура КэшироватьПланыСчетов(КэшЗначений)
	
	ПланСчетовПриемник = Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("МСФО");
	ПланСчетовИсточник = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланСчетовПриемник, "ПланСчетовИсточник");
	
	КэшЗначений.Вставить("ПланСчетовПриемник", ПланСчетовПриемник);
	КэшЗначений.Вставить("ПланСчетовИсточник", ПланСчетовИсточник);
	
	Если Не ЗначениеЗаполнено(ПланСчетовИсточник) Тогда
		Сообщить(НСтр("ru = 'Не указан план счетов источник для плана счетов ИБ ""МСФО"" текущей информационной базы'"));
		Возврат;
	КонецЕсли;			
	
КонецПроцедуры

Процедура УстановитьЗначение(Реквизит, Знач ЗначениеИсточник, КэшЗначений, ЕстьИзменение = Ложь)

	ТекущийТип = ТипЗнч(Реквизит);
	ТипИсточника = ТипЗнч(ЗначениеИсточник);
	
	Если ТекущийТип <> ТипИсточника Тогда		
		
		Если ТекущийТип = Тип("ВидСчета") Тогда
			ЗначениеИсточник = ПолучитьВидСчета(ЗначениеИсточник);
		Иначе 
			
			ЗначениеИзКэша = ПолучитьИзКэша(ТекущийТип, ЗначениеИсточник, КэшЗначений);
			Если ЗначениеИзКэша <> Неопределено Тогда
				ЗначениеИсточник = ЗначениеИзКэша;
			КонецЕсли;
			
		КонецЕсли;
					
	КонецЕсли;
		
	Если Реквизит <> ЗначениеИсточник Тогда
		ЕстьИзменение = Истина;
	КонецЕсли;
	
	Реквизит = ЗначениеИсточник;
			
КонецПроцедуры

Функция ПолучитьВидСчета(ЗначениеИсточник)

	ТекЗначение = СокрЛП(ЗначениеИсточник);
	Если ТекЗначение = "Активный" Тогда
		Возврат ВидСчета.Активный;
	ИначеЕсли ТекЗначение = "Пассивный" Тогда
		Возврат ВидСчета.Пассивный;
	Иначе 
		Возврат ВидСчета.АктивноПассивный;
	КонецЕсли;

КонецФункции

Функция ПолучитьИзКэша(ТекущийТип, ЗначениеИсточник, КэшЗначений)

	Если Не ЗначениеЗаполнено(ЗначениеИсточник) Тогда
		Возврат ЗначениеИсточник;
	КонецЕсли;
	
	//надо преобразвать строку к типу
	КэшТипа = КэшЗначений.Получить(ТекущийТип);
	Если КэшТипа <> Неопределено Тогда
		
		Результат = КэшТипа.Получить(ЗначениеИсточник);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	Иначе 
		
		КэшТипа = Новый Соответствие;
		Результат = Неопределено;
		
	КонецЕсли;
	
	мдТипа = Метаданные.НайтиПоТипу(ТекущийТип);
	
	Если Метаданные.Перечисления.Содержит(мдТипа) Тогда
		
		Для каждого ТекущееЗначениеПеречисления Из мдТипа.ЗначенияПеречисления Цикл		
			Если ТекущееЗначениеПеречисления.Синоним = ЗначениеИсточник Тогда
				Результат = ПредопределенноеЗначение(мдТипа.ПолноеИмя() + "." + ТекущееЗначениеПеречисления);
				Прервать;		
			КонецЕсли;		
		КонецЦикла;
		
	Иначе 
		
		Если мдТипа.ПолноеИмя() = "Справочник.СчетаБД" Тогда	
		
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СчетаБД КАК т
			|ГДЕ
			|	т.Код = &Поиск
			|	И т.Владелец = &ПланСчетовИсточник
			|
			|УПОРЯДОЧИТЬ ПО
			|	т.Предопределенный УБЫВ,
			|	т.ПометкаУдаления");
						
			Запрос.УстановитьПараметр("ПланСчетовИсточник", КэшЗначений.Получить("ПланСчетовИсточник"));
			
		Иначе 
						
			ШаблонЗапроса = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	т.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК т
			|ГДЕ
			|	т.Наименование = &Поиск
			|
			|УПОРЯДОЧИТЬ ПО
			|	т.Предопределенный УБЫВ,
			|	т.ПометкаУдаления";
			
			Запрос = Новый Запрос(СтрЗаменить(ШаблонЗапроса, "Справочник.Валюты", мдТипа.ПолноеИмя()));	
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Поиск", ЗначениеИсточник);		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Новый (ТекущийТип);
		Иначе 
			Выборка = РезультатЗапроса.Выбрать();	
			Если Выборка.Следующий() Тогда
				Результат = Выборка.Ссылка;
			КонецЕсли;		
		КонецЕсли;
	
	КонецЕсли;
	
	КэшТипа.Вставить(ЗначениеИсточник, Результат);
	КэшЗначений.Вставить(ТекущийТип, КэшТипа);
	
	Возврат Результат; 
	
КонецФункции

Процедура ДобавитьСубконто(ТекущийОбъект, СтрокаИсточник, КэшЗначений, НомерСубконто = 1, ЕстьИзменение = Ложь)

	УдалитьСубконто = Не ЗначениеЗаполнено(СтрокаИсточник["ВидСубконто" + НомерСубконто]);
	
	Если ТекущийОбъект.ВидыСубконто.Количество() >= (НомерСубконто) Тогда
		
		СтрокаСубконто = ТекущийОбъект.ВидыСубконто[НомерСубконто-1];
		Если УдалитьСубконто Тогда
			
			ТекущийОбъект.ВидыСубконто.Удалить(СтрокаСубконто);
			ЕстьИзменение = Истина;
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если УдалитьСубконто Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаСубконто = ТекущийОбъект.ВидыСубконто.Добавить();
		
	КонецЕсли;	
	
	РеквизитыТЧ = ПолучитьРеквизитыТЧ();	
	
	Для каждого ТекущийРеквизит Из РеквизитыТЧ Цикл
		УстановитьЗначение(СтрокаСубконто[ТекущийРеквизит.Ключ], СтрокаИсточник[ТекущийРеквизит.Ключ + НомерСубконто], КэшЗначений, ЕстьИзменение);	
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(СтрокаСубконто.ВидСубконто) Тогда	
		
		ТекущийОбъект.ВидыСубконто.Удалить(СтрокаСубконто);
		
		ТекстОшибки = НСтр("ru = 'Для счета <%1> не удалось найти субконто <%2> по наименованию'");		
		Сообщить(СтрШаблон(ТекстОшибки, ТекущийОбъект.Код, СтрокаИсточник["ВидСубконто" + НомерСубконто]));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРеквизитыТЧ()
	
	Возврат Новый Структура("ВидСубконто, Валютный, Количественный, Суммовой, ТолькоСальдо, ТолькоОбороты");

КонецФункции

Функция ПолучитьКэшПометитьНаУдаление(ТаблицаДанных)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МСФО.Ссылка КАК Ссылка,
	|	МСФО.Код КАК Код,
	|	МСФО.Код В (&Код) КАК ИзменитьОбъект,
	|	НЕ МСФО.Код В (&Код)
	|		И НЕ МСФО.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ПланСчетов.МСФО КАК МСФО");
	Запрос.УстановитьПараметр("Код", ТаблицаДанных.ВыгрузитьКолонку("Код"));
	
	Результат = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПометкаУдаления Тогда
			//Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина, Ложь);	
		ИначеЕсли Выборка.ИзменитьОбъект Тогда	
			Результат.Вставить(СокрЛП(Выборка.Код), Выборка.Ссылка);
		Иначе 
			//помеченный изначально на удаление
		КонецЕсли;		
	КонецЦикла; 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

#Область Отчеты

// Заполняет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	ВстраиваниеУХ.ДобавитьКомандуОбработчик(КомандыОтчетов, "ОСВМСФО.ПоСчету/Ссылка", НСтр("ru = 'Оборотно-сальдовая ведомость МСФО'"));
	
КонецПроцедуры

#КонецОбласти

Процедура Обновление_ЗаполнитьПланСчетов(Параметры = Неопределено) Экспорт
	
	псПоУмолчанию = МСФОУХ.ПланСчетовПоУмолчанию();
	псПустой = Справочники.ПланыСчетовБД.ПустаяСсылка();
	
	Выборка = ПланыСчетов.МСФО.Выбрать(,Новый Структура("ПланСчетовБД", псПустой));
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		Объект.ПланСчетовБД = псПоУмолчанию;
		ОбновлениеИнформационнойБазыБМ.ЗаписатьОбъект(Объект,, Истина);//включаем БЛ чтобы обновить счета БД
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли

