#Область ПрограммныйИнтерфейс

Процедура УстановитьЗаголовкиГрафика(Форма, ВидФИ, Выданный = Истина, ПрефиксЭлементов = "График", ИмяГруппаПроценты = Неопределено) Экспорт

	Элементы = Форма.Элементы; 
	
	Заголовки = ПолучитьЗаголовкиКолонок(ВидФИ, Выданный);
	
	Для каждого ЗаголовокЭлемента Из Заголовки Цикл	
		Элементы[ПрефиксЭлементов + ЗаголовокЭлемента.Ключ].Заголовок =  ЗаголовокЭлемента.Значение;	
	КонецЦикла;
	
	Если ИмяГруппаПроценты <> Неопределено Тогда
		ЭтоОблигация = ВидФИ = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.Облигация");
		Элементы[ИмяГруппаПроценты].Заголовок = ?(ЭтоОблигация, НСтр("ru = 'Купоны'"), НСтр("ru = 'Проценты'"));
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает каркасную структуру описания секции графика финансового инструмента.
// 
// Возвращаемое значение:
// Структура - описание секции графика.
//
Функция ОписаниеСекцииГрафика() Экспорт
	
	ОписаниеСекции = Новый Структура;
	ОписаниеСекции.Вставить("Имя",                            "");	// Название секции, должно быть корректным именем переменной.
	ОписаниеСекции.Вставить("Представление",                  "");	// Представление секции в графике на форме
	ОписаниеСекции.Вставить("ЭтоСекцияВзаиморасчетов",    Истина);	// Секция участвует в формировании движений по регистру РасчетыСКонтрагентамиГрафики.

	// Приход
	ОписаниеСекции.Вставить("КолонкаПриход",                  "");	// имя колонки, увеличивающей значение
	ОписаниеСекции.Вставить("КолонкаПриходПредставление",     "");	// заголовок колонки, увеличивающей значение
	ОписаниеСекции.Вставить("КолонкаПриходДДС",             Ложь);	// Истина - колонка, увеличивающая значение, формирует ДДС; Ложь - Начисление.
																	// Только для колонок, у которых ЭтоСекцияВзаиморасчетов = Истина. 
	ОписаниеСекции.Вставить("КолонкаПриходОперация",                // Основная операция графика, соответствующая колонке Приход
		ПредопределенноеЗначение("Справочник.ОперацииГрафиковДоговоров.ПустаяСсылка"));
		
	// Расход
	ОписаниеСекции.Вставить("КолонкаРасход",                  "");	// Имя колонки, уменьшающей значение
	ОписаниеСекции.Вставить("КолонкаРасходПредставление",     "");	// Заголовок колонки, уменьшающей значение
	ОписаниеСекции.Вставить("КолонкаРасходДДС",             Ложь);	// Истина - колонка, уменьшающая значение, формирует ДДС; Ложь - начисление.
	                                                            	// Только для колонок, у которых ЭтоСекцияВзаиморасчетов = Истина.
	ОписаниеСекции.Вставить("КолонкаРасходОперация",                // Основная операция графика, соответствующая колонке Приход
		ПредопределенноеЗначение("Справочник.ОперацииГрафиковДоговоров.ПустаяСсылка"));															
		
	// Остаток	
	ОписаниеСекции.Вставить("КолонкаОстаток",                 "");	// Имя колонки, содержащей результирующее значение.
	ОписаниеСекции.Вставить("КолонкаОстатокПредставление",    "");	// Заголовок колонки, содержащей результирующее значение.
	
	ОписаниеСекции.Вставить("ЭлементСтруктурыЗадолженности",                                 // Элемент структуры задолженности.
	ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.ПустаяСсылка")); 
	
	ОписаниеСекции.Вставить("ЭтоРасчетнаяСекция",           Ложь);	// Секция формируется расчетным способом. 
																	//Для нее отдельно хранятся рассчитанное значение и ручные корректировки.
	
	Возврат ОписаниеСекции;
	
КонецФункции

Процедура ПроверитьСекциюГрафика(ОписаниеСекции) Экспорт
КонецПроцедуры

Процедура ОбновитьИтоги(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	Для Каждого ТекОписаниеСекции Из ОписаниеГрафика Цикл
		//ТекСекцияГрафика = ТекОписаниеСекции.Значение;
		//Форма[ТекСекцияГрафика.Имя + "Отклонение"] = Объект.График.Итог(ТекСекцияГрафика.КолонкаПриход) - Объект.График.Итог(ТекСекцияГрафика.КолонкаРасход);
		//Элементы["ГрафикГруппа" + ТекСекцияГрафика.Имя].КартинкаШапки = ?(Форма[ТекСекцияГрафика.Имя + "Отклонение"] = 0, Новый Картинка, БиблиотекаКартинок.СообщениеОПроблемах);
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОтборСтрокГрафика(Форма) Экспорт
		
КонецПроцедуры

Процедура УстановитьТекстДлительность(ТекстДлительность, ДатаНачала, ДатаОкончания) Экспорт
	Если ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Длительность = Цел((ДатаОкончания - ДатаНачала)/86400 + 1);
		ТекстДлительность = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru=';%1 день;;%1 дня;%1 дней;'"), Длительность);
	Иначе
		ТекстДлительность = "";
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьВидимостьЭлементов(Элементы, ЗначениеПризнакаВидимость) Экспорт
	
	Для Каждого ТекЭлемент Из Элементы Цикл
		ТекЭлемент.Видимость = ЗначениеПризнакаВидимость;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеИсторииСтавок(ИсторияСтавок) Экспорт
	
	ПредставленияСтавок = Новый Массив;
	Для Каждого ТекСтавка Из ИсторияСтавок Цикл
		ПредставленияСтавок.Добавить(СтрШаблон(Нстр("ru = 'С %1 - %2%%'"), Формат(ТекСтавка.Дата, "ДЛФ=D"), ТекСтавка.ПроцентнаяСтавка));
	КонецЦикла;
	
	Возврат СтрСоединить(ПредставленияСтавок, "; ");
	
КонецФункции

// Функция возвращает имя секции графика по имени группы.
// Имя группы элементов имеет по умолчанию формат "Префикс + Имя секции". 
// Префиксом по умолчанию является "ГрафикГруппа".
// Параметры:
//  ЭлементИлиИмя	 - 	ГруппаФормы, Строка - группа формы или ее имя.
//  Префикс 		 - Строка - Префикс имени группы. Значение по умолчанию - "ГрафикГруппа".
// 
// Возвращаемое значение:
//  Строка - Имя секции графика
//
Функция ПолучитьИмяСекцииГрафикаПоИмениГруппы(ЭлементИлиИмя, Префикс = "ГрафикГруппа") Экспорт
	
	Если ТипЗнч(ЭлементИлиИмя) = Тип("ГруппаФормы") Тогда 
		ИмяГруппы = ЭлементИлиИмя.Имя;
	Иначе 
		ИмяГруппы = ЭлементИлиИмя;
	КонецЕсли;
	
	Возврат СтрЗаменить(ИмяГруппы, Префикс, "");
	
КонецФункции

#Область ЦенныеБумаги

Функция ПолучитьПараметрыГрафикаЦБ() Экспорт
	Возврат Новый Структура("ЕстьПроценты, ЕстьКомиссии, ЕстьШтрафы", Истина, Ложь, Ложь);
КонецФункции

Процедура ОбновитьИтогиФормаЦБ(Форма, График = Неопределено) Экспорт
	
	Если График = Неопределено Тогда
		График = Форма.Объект.График;
	КонецЕсли;
	
	Форма.ОсновнойДолгОтклонение = График.Итог("ОсновнойДолгПолучение") - График.Итог("ОсновнойДолгВозврат");
	Форма.ПроцентыОтклонение = График.Итог("ПроцентыНачислено") - График.Итог("ПроцентыУплачено");
	
КонецПроцедуры

Процедура УправлениеФормой(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГраницаФактическихДанных.Видимость = ЗначениеЗаполнено(Объект.ГраницаФактическихДанных);	
	
КонецПроцедуры

Процедура УправлениеФормойБюджетирование(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаБюджетирование.Видимость = 
		(Форма.ВидФинансовогоИнструмента = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.Облигация"));
		
КонецПроцедуры
	
#КонецОбласти

#Область ПрограммныйИнтерфейс_СчетаУчета

Процедура УправлениеФормой_СчетаУчета(Форма, ЗаполнитьСчетаУчета = Неопределено, ЗаполнитьСчетВзаиморасчетов = Истина) Экспорт
	
	Перем ИсточникВидимостиСчетов;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	ЭтоПараметры = (ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ПараметрыУчетаФИРСБУ"));
	
	ТекущийФИ = ПолучитьТекущийФИ(Форма, ЭтоПараметры);
		
	Если (ЗаполнитьСчетаУчета = Неопределено) Тогда
		Если КэшируемыеЗначения.Свойство("ИсточникВидимостиСчетов", ИсточникВидимостиСчетов) Тогда
			ЗаполнитьСчетаУчета = (ТекущийФИ <> ИсточникВидимостиСчетов) Или (ТипЗнч(ИсточникВидимостиСчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		Иначе	
			ЗаполнитьСчетаУчета = Ложь;
		КонецЕсли;		
	КонецЕсли;
		
	НовыеСчетаУчета = Неопределено;
	
	Если ЭтоПараметры Тогда
		
		НовыйИсточник = ?(ЗначениеЗаполнено(Объект.ФИ), Объект.ФИ, Объект.ВидФИ);
		Если НовыйИсточник <> ИсточникВидимостиСчетов Тогда
			
			ИсточникСчетов = ?(ЗначениеЗаполнено(Объект.ФИ), Объект.ФИ, Объект.ВидФИ);
			НовыеСчетаУчета = ФинансовыеИнструментыФормыВызовСервера.ПолучитьСчетаПоВидуФИ(ИсточникСчетов, Объект.Актив);
			КэшируемыеЗначения.Вставить("ИсточникВидимостиСчетов", НовыйИсточник);
		КонецЕсли;
		
	ИначеЕсли ЗаполнитьСчетаУчета Тогда // Форма документа с реквизитом "ФинансовыйИнструмент"
		
		ИмяДокумента = ?(ЭтоПараметры, "", КэшируемыеЗначения.ИмяДокумента);
		
		Если Не ЗначениеЗаполнено(ТекущийФИ)
			И СтрНайти("ВерсияСоглашенияКредит,ВерсияСоглашенияДепозит", КэшируемыеЗначения.ИмяДокумента) > 0 Тогда//Создание договора
			НовыеСчетаУчета = ФинансовыеИнструментыФормыВызовСервера.ПолучитьСчетаФИ(Объект.ВидДоговораУХ, КэшируемыеЗначения.ИмяДокумента, АктивПоИмениДокумента(Форма));			
		Иначе 
			НовыеСчетаУчета = ФинансовыеИнструментыФормыВызовСервера.ПолучитьСчетаФИ(ТекущийФИ, КэшируемыеЗначения.ИмяДокумента, АктивПоИмениДокумента(Форма));	
		КонецЕсли;
		
		КэшируемыеЗначения.Вставить("ИсточникВидимостиСчетов", ТекущийФИ);
		
	Иначе
		
		КэшируемыеЗначения.Вставить("ИсточникВидимостиСчетов", ТекущийФИ);
		
	КонецЕсли;
	
	Если НовыеСчетаУчета = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	Если ЗаполнитьСчетВзаиморасчетов Тогда
		
		СчетВзаиморасчетов = ПредопределенноеЗначение("Справочник.ВидыСчетовФИ.СчетВзаиморасчетов");
		ПараметрыСчетВзаиморасчетов = КэшируемыеЗначения.СчетаУчета.Получить(СчетВзаиморасчетов);
		Если ПараметрыСчетВзаиморасчетов = Неопределено Тогда
			НовыеСчетаУчета.Вставить(СчетВзаиморасчетов, Новый Структура("Счет,Субконто1,Субконто2,Субконто3"));
		Иначе
			НовыеСчетаУчета.Вставить(СчетВзаиморасчетов, ПараметрыСчетВзаиморасчетов);
		КонецЕсли;
	
	КонецЕсли;
	
	КэшируемыеЗначения.Вставить("СчетаУчета", НовыеСчетаУчета);//заменяем старые значения счетов и субконто на новые 
	
	ЗаполнитьСчетаУчетаВерсии(Форма);
		
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВерсии(Форма, ТекущийОбъект = Неопределено) Экспорт

	Если ТекущийОбъект = Неопределено Тогда
		Объект = Форма.Объект;
	Иначе
		Объект = ТекущийОбъект;
	КонецЕсли;
	
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	ПеренестиСчетаВОбъект = ТипЗнч(Объект.Ссылка) <> Тип("СправочникСсылка.ПараметрыУчетаФИРСБУ")
							И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВерсияСоглашенияКредит") 
							И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВерсияСоглашенияДепозит");
	
	Объект.СчетаУчета.Очистить();
	
	Для каждого ТекущийСчет Из КэшируемыеЗначения.СчетаУчета Цикл
		
		Если Не ЗначениеЗаполнено(ТекущийСчет.Ключ) Тогда
			Продолжить;
		ИначеЕсли ПеренестиСчетаВОбъект И (ТекущийСчет.Ключ = ПредопределенноеЗначение("Справочник.ВидыСчетовФИ.СчетВзаиморасчетов")) Тогда
			Объект.СчетВзаиморасчетов = ТекущийСчет.Значение.Счет;
			Продолжить;
		ИначеЕсли ПеренестиСчетаВОбъект И (ТекущийСчет.Ключ = ПредопределенноеЗначение("Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком")) Тогда
			Объект.СчетВзаиморасчетовСПлательщиком = ТекущийСчет.Значение.Счет;
			Продолжить;		
		КонецЕсли;
		
		СтрокаСчет = Объект.СчетаУчета.Добавить();
		
		СтрокаСчет.ВидСчетаФИ	= ТекущийСчет.Ключ;
		ЗаполнитьЗначенияСвойств(СтрокаСчет, ТекущийСчет.Значение);
		
	КонецЦикла;

КонецПроцедуры

Функция АктивПоИмениДокумента(Форма) Экспорт //используется в ВстраиваниеУХКлиентСервер
		
	Объект = Форма.Объект;
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	Если (КэшируемыеЗначения.ИмяДокумента = "ПоступлениеВекселя") 
		Или (КэшируемыеЗначения.ИмяДокумента = "ВыбытиеВекселей") 
		Или (КэшируемыеЗначения.ИмяДокумента = "АкцептПротестПереводногоВекселя")Тогда
		
		Возврат Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеВекселя.ПриобретениеВекселей")
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыбытиеВекселя.ПредъявлениеВекселяКПогашению")
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийВыбытиеВекселя.ПродажаВекселя")			
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийАкцептПротестПереводногоВекселя.ПредъявлениеВекселяКАкцепту")			
			
    Иначе 
		
		Возврат КэшируемыеЗначения.ИмяДокумента = "ПриобретениеЦеннойБумаги" Или КэшируемыеЗначения.ИмяДокумента = "ПродажаЦеннойБумаги";
		
	КонецЕсли;

КонецФункции

Функция ПолучитьТекущийФИ(Форма, ЭтоПараметры)
	
	Объект = Форма.Объект;
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	Если ЭтоПараметры Тогда
		ТекущийФИ = ?(Форма.ПараметрыУчетаДля=0, Неопределено, Объект.ФИ);		
	ИначеЕсли КэшируемыеЗначения.ИмяДокумента = "ВерсияСоглашенияКредит"
		Или КэшируемыеЗначения.ИмяДокумента = "ВерсияСоглашенияДепозит" Тогда
		ТекущийФИ = Объект.ДоговорКонтрагента;
	Иначе
		ТекущийФИ = Объект.ФинансовыйИнструмент;
	КонецЕсли;
	
	Возврат ТекущийФИ;

КонецФункции

Процедура ЗаполнитьСчетПоВиду(Форма, ИмяВидаСчета, ЗначениеСчета) Экспорт

	Форма.Объект[ИмяВидаСчета] = ЗначениеСчета;
	
	ВидСчетаФИ = ПредопределенноеЗначение("Справочник.ВидыСчетовФИ." + ИмяВидаСчета);
	Если Форма.КэшируемыеЗначения.СчетаУчета.Получить(ВидСчетаФИ) <> Неопределено Тогда
		Форма.КэшируемыеЗначения.СчетаУчета[ВидСчетаФИ].Вставить("Счет", ЗначениеСчета);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРольСчета(Форма, РольСчета = Неопределено)

	Если РольСчета <> Неопределено Тогда
		Возврат РольСчета;
	ИначеЕсли АктивПоИмениДокумента(Форма) Тогда	
		Возврат "РасчетыСПоставщиком";
	Иначе 
		Возврат "РасчетыСПокупателем";
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьСчетВзаиморасчетов(Форма, РольСчета = Неопределено) Экспорт	
	
	Договор = Форма.Объект.ДоговорКонтрагента;
	РольСчета = ПолучитьРольСчета(Форма, РольСчета);
	
	ЗаполнитьСчетПоВиду(Форма, "СчетВзаиморасчетов", ВстраиваниеУХВызовСервера.ПолучитьСчетВзаиморасчетов(Договор, РольСчета));
	
КонецПроцедуры

Процедура ЗаполнитьСчетВзаиморасчетовСПлательщиком(Форма, РольСчета = Неопределено) Экспорт	
	
	Договор = Форма.Объект.ОбъектРасчетовСТретьейСтороной;
	РольСчета = ПолучитьРольСчета(Форма, РольСчета);
	
	ЗаполнитьСчетПоВиду(Форма, "СчетВзаиморасчетовСПлательщиком", ВстраиваниеУХВызовСервера.ПолучитьСчетВзаиморасчетов(Договор, РольСчета));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьЗаголовкиКолонок(ВидФИ, Выданный = Истина)

	Заголовки = Новый Структура;
	
	Если ВидФИ = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.Вексель") Тогда
		
		Если Выданный Тогда
			
			Заголовки.Вставить("ОсновнойДолгПолучение", НСтр("ru = 'Выдача векселя'"));
			Заголовки.Вставить("ОсновнойДолгВозврат", 	НСтр("ru = 'Погашение векселя'"));
			Заголовки.Вставить("ПроцентыНачислено", 	НСтр("ru = 'Начисление'"));
			Заголовки.Вставить("ПроцентыУплачено", 		НСтр("ru = 'Погашение'"));
			
		Иначе 
			
			Заголовки.Вставить("ОсновнойДолгПолучение", НСтр("ru = 'Получение векселя'"));
			Заголовки.Вставить("ОсновнойДолгВозврат", 	НСтр("ru = 'Погашение, передача векселя'"));
			Заголовки.Вставить("ПроцентыНачислено", 	НСтр("ru = 'Начисление'"));			
			Заголовки.Вставить("ПроцентыУплачено", 		НСтр("ru = 'Погашение'"));
			
		КонецЕсли;
				
	ИначеЕсли ВидФИ = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.Облигация") Тогда
		
		Если Выданный Тогда
			
			Заголовки.Вставить("ОсновнойДолгПолучение", НСтр("ru = 'Выпуск облигации'"));
			Заголовки.Вставить("ОсновнойДолгВозврат", 	НСтр("ru = 'Погашение номинала'"));
			Заголовки.Вставить("ПроцентыНачислено", 	НСтр("ru = 'Начисление'"));
			Заголовки.Вставить("ПроцентыУплачено", 		НСтр("ru = 'Уплата'"));
			
		Иначе 
			
			Заголовки.Вставить("ОсновнойДолгПолучение", НСтр("ru = 'Приобретение облигации'"));
			Заголовки.Вставить("ОсновнойДолгВозврат", 	НСтр("ru = 'Погашение номинала'"));
			Заголовки.Вставить("ПроцентыНачислено", 	НСтр("ru = 'Начисление'"));			
			Заголовки.Вставить("ПроцентыУплачено", 		НСтр("ru = 'Получение'"));
			
		КонецЕсли;
		
	ИначеЕсли ВидФИ = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.ЗаемВыданный")
			ИЛИ ВидФИ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗаемВыданный") Тогда		
		
		Заголовки.Вставить("ОсновнойДолгПолучение", НСтр("ru = 'Выдача займа'"));
		Заголовки.Вставить("ОсновнойДолгВозврат", 	НСтр("ru = 'Возврат займа'"));
		Заголовки.Вставить("ПроцентыНачислено", 	НСтр("ru = 'Начисление'"));
		Заголовки.Вставить("ПроцентыУплачено", 		НСтр("ru = 'Получение'"));
		Заголовки.Вставить("КомиссииУплачено", 		НСтр("ru = 'Получение'"));
		Заголовки.Вставить("ШтрафыУплачено", 		НСтр("ru = 'Получение'"));
				
	ИначеЕсли ВидФИ = ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.ЗаемПолученный")
		ИЛИ ВидФИ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗаемПолученный")Тогда
		
		Заголовки.Вставить("ОсновнойДолгПолучение", НСтр("ru = 'Получение займа'"));
		Заголовки.Вставить("ОсновнойДолгВозврат", 	НСтр("ru = 'Возврат займа'"));
		Заголовки.Вставить("ПроцентыНачислено", 	НСтр("ru = 'Начисление'"));			
		Заголовки.Вставить("ПроцентыУплачено", 		НСтр("ru = 'Уплата'"));
		Заголовки.Вставить("КомиссииУплачено", 		НСтр("ru = 'Уплата'"));
		Заголовки.Вставить("ШтрафыУплачено", 		НСтр("ru = 'Уплата'"));
		
	КонецЕсли;
	
	Возврат Заголовки;
	
КонецФункции

#КонецОбласти

