#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьГоризонтПодневногоПланирования() Экспорт
	
	Если Константы.ГоризонтПодневногоПланирования.Получить() = 0 Тогда
	
		Константы.ГоризонтПодневногоПланирования.Установить(7);
	
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьНастройкиПериодическихОпераций() Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПериодическихОперацийПериодическиеОперации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НастройкиПериодическихОпераций.ПериодическиеОперации КАК НастройкиПериодическихОперацийПериодическиеОперации
	|ГДЕ
	|	(НастройкиПериодическихОперацийПериодическиеОперации.ВидБюджета = &ПустойВидБюджета
	|			ИЛИ НастройкиПериодическихОперацийПериодическиеОперации.ПриходРасход = &ПустойПриходРасход
	|			ИЛИ НастройкиПериодическихОперацийПериодическиеОперации.ТипОперацииФИ = &ПустойТипОперацииФИ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	НастройкиПериодическихОперацийГрафикиОпераций.Ссылка
	|ИЗ
	|	Справочник.НастройкиПериодическихОпераций.ГрафикиОпераций КАК НастройкиПериодическихОперацийГрафикиОпераций
	|ГДЕ
	|	(НастройкиПериодическихОперацийГрафикиОпераций.ВидБюджета = &ПустойВидБюджета
	|			ИЛИ НастройкиПериодическихОперацийГрафикиОпераций.ПриходРасход = &ПустойПриходРасход
	|			ИЛИ НастройкиПериодическихОперацийГрафикиОпераций.ТипОперацииФИ = &ПустойТипОперацииФИ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СпособыРасчетаСуммПериодическихОпераций.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыРасчетаСуммПериодическихОпераций КАК СпособыРасчетаСуммПериодическихОпераций
	|ГДЕ
	|	(СпособыРасчетаСуммПериодическихОпераций.ВидБюджета = &ПустойВидБюджета
	|			ИЛИ СпособыРасчетаСуммПериодическихОпераций.ПриходРасход = &ПустойПриходРасход
	|			ИЛИ СпособыРасчетаСуммПериодическихОпераций.ТипОперацииФИ = &ПустойТипОперацииФИ)";
	
	Запрос.УстановитьПараметр("ПустойВидБюджета", Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойПриходРасход", Перечисления.ВидыДвиженийПриходРасход.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойТипОперацииФИ", Перечисления.ТипыОперацийГрафикаФинансовыхИнструментов.ПустаяСсылка());
	
	Результаты = Запрос.ВыполнитьПакет();
	
	ВыборкаНастройкиПериодическихОпераций = Результаты[0].Выбрать();
	
	Пока ВыборкаНастройкиПериодическихОпераций.Следующий() Цикл
		
		Объект = ВыборкаНастройкиПериодическихОпераций.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТЧ Из Объект.ПериодическиеОперации Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидБюджета) Тогда
				СтрокаТЧ.ВидБюджета = СтрокаТЧ.УдалитьВидОперации.ВидБюджета;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПриходРасход) Тогда
				СтрокаТЧ.ПриходРасход = СтрокаТЧ.УдалитьВидОперации.ПриходРасход;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ТипОперацииФИ) Тогда
				СтрокаТЧ.ТипОперацииФИ = СтрокаТЧ.УдалитьВидОперации.ТипОперацииФИ;
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого СтрокаТЧ Из Объект.ГрафикиОпераций Цикл
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ВидБюджета) Тогда
				СтрокаТЧ.ВидБюджета = СтрокаТЧ.УдалитьВидОперации.ВидБюджета;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ПриходРасход) Тогда
				СтрокаТЧ.ПриходРасход = СтрокаТЧ.УдалитьВидОперации.ПриходРасход;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧ.ТипОперацииФИ) Тогда
				СтрокаТЧ.ТипОперацииФИ = СтрокаТЧ.УдалитьВидОперации.ТипОперацииФИ;
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
	ВыборкаСпособыРасчетаСуммПериодическихОпераций = Результаты[1].Выбрать();
	
	Пока ВыборкаСпособыРасчетаСуммПериодическихОпераций.Следующий() Цикл
		
		Объект = ВыборкаСпособыРасчетаСуммПериодическихОпераций.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Объект.ВидБюджета) Тогда
			Объект.ВидБюджета = Объект.УдалитьВидОперации.ВидБюджета;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ПриходРасход) Тогда
			Объект.ПриходРасход = Объект.УдалитьВидОперации.ПриходРасход;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ТипОперацииФИ) Тогда
			Объект.ТипОперацииФИ = Объект.УдалитьВидОперации.ТипОперацииФИ;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииУХВВидахОперацииБюджетирование() ЭКспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	УдалитьВидыОперацийБюджетирование.Ссылка КАК Ссылка,
	|	ВидыОперацийУХ.Ссылка КАК ВидОперацииУХ,
	|	УдалитьВидыОперацийБюджетирование.УдалитьТипОперацииБюджетирование КАК УдалитьТипОперацииБюджетирование,
	|	УдалитьВидыОперацийБюджетирование.УдалитьВидОперацииДвиженияДС КАК УдалитьВидОперацииДвиженияДС,
	|	УдалитьВидыОперацийБюджетирование.УдалитьВидОперацииДвиженияДСНаличные КАК УдалитьВидОперацииДвиженияДСНаличные,
	|	ВидыОперацийУХ.ТипОперацииБюджетирование КАК ТипОперацииБюджетирование,
	|	ВидыОперацийУХ.ВидОперацииДДСБезналичныйРасчет КАК ВидОперацииДДСБезналичныйРасчет,
	|	ВидыОперацийУХ.ВидОперацииДДСНаличныйРасчет КАК ВидОперацииДДСНаличныйРасчет,
	|	ВЫБОР
	|		КОГДА УдалитьВидыОперацийБюджетирование.УдалитьТипОперацииБюджетирование = ВидыОперацийУХ.ТипОперацииБюджетирование
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА УдалитьВидыОперацийБюджетирование.УдалитьВидОперацииДвиженияДС = ВидыОперацийУХ.ВидОперацииДДСБезналичныйРасчет
	|			ТОГДА 25
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА УдалитьВидыОперацийБюджетирование.УдалитьВидОперацииДвиженияДСНаличные = ВидыОперацийУХ.ВидОперацииДДСНаличныйРасчет
	|			ТОГДА 10
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вес
	|ПОМЕСТИТЬ ВТ_СвязьВидовОпераций
	|ИЗ
	|	Справочник.УдалитьВидыОперацийБюджетирование КАК УдалитьВидыОперацийБюджетирование
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|		ПО УдалитьВидыОперацийБюджетирование.ВидБюджета = ВидыОперацийУХ.ВидБюджета
	|			И УдалитьВидыОперацийБюджетирование.ПриходРасход = ВидыОперацийУХ.ПриходРасход
	|ГДЕ
	|	НЕ УдалитьВидыОперацийБюджетирование.ЭтоГруппа
	|	И УдалитьВидыОперацийБюджетирование.ВидОперацииУХ = ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ПустаяСсылка)
	|	И УдалитьВидыОперацийБюджетирование.ВидБюджета <> ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СвязьВидовОпераций.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_СвязьВидовОпераций.Вес) КАК Вес
	|ПОМЕСТИТЬ ВТ_МаксимальныеВеса
	|ИЗ
	|	ВТ_СвязьВидовОпераций КАК ВТ_СвязьВидовОпераций
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СвязьВидовОпераций.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СвязьВидовОпераций.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВТ_СвязьВидовОпераций.ВидОперацииУХ) КАК ВидОперацииУХ
	|ИЗ
	|	ВТ_СвязьВидовОпераций КАК ВТ_СвязьВидовОпераций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_МаксимальныеВеса КАК ВТ_МаксимальныеВеса
	|		ПО ВТ_СвязьВидовОпераций.Ссылка = ВТ_МаксимальныеВеса.Ссылка
	|			И ВТ_СвязьВидовОпераций.Вес = ВТ_МаксимальныеВеса.Вес
	|СГРУППИРОВАТЬ ПО
	|ВТ_СвязьВидовОпераций.Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ВидОперацииУХ = Выборка.ВидОперацииУХ;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииУХХранилищеШаблонов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	ХранилищеШаблонов.Ссылка КАК Ссылка,
	|	ХранилищеШаблонов.УдалитьВидОбъектаОповещения КАК УдалитьВидОбъектаОповещения,
	|	ХранилищеШаблонов.УдалитьВидОбъектаОповещения.ВидОперацииУХ КАК ВидОперацииУХ
	|ИЗ
	|	Справочник.УдалитьХранилищеШаблонов КАК ХранилищеШаблонов
	|ГДЕ
	|	ХранилищеШаблонов.УдалитьВидОбъектаОповещения <> НЕОПРЕДЕЛЕНО
	|	И ХранилищеШаблонов.ВидОбъектаОповещения = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ТипЗнч(Объект.УдалитьВидОбъектаОповещения) <> Тип("СправочникСсылка.УдалитьВидыОперацийБюджетирование") Тогда
			
			Объект.ВидОбъектаОповещения = Объект.УдалитьВидОбъектаОповещения;
		Иначе
			Объект.ВидОбъектаОповещения = Выборка.ВидОперацииУХ;
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьВидОперацииУХВНастройкахОповещений() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОповещений.УдалитьВидОбъектаОповещения КАК ВидОбъектаОповещения
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ВидОбъектаОповещения <> НЕОПРЕДЕЛЕНО
	|	И НастройкиОповещений.УдалитьВидОбъектаОповещения = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НЗ = РегистрыСведений.НастройкиОповещений.СоздатьНаборЗаписей();
		НЗ.Отбор.УдалитьВидОбъектаОповещения.Установить(Выборка.ВидОбъектаОповещения);
		НЗ.Прочитать();
		Для Каждого ТекЗапись Из НЗ Цикл
			Если ТипЗнч(ТекЗапись.УдалитьВидОбъектаОповещения) <> Тип("СправочникСсылка.УдалитьВидыОперацийБюджетирование") Тогда
				
				ТекЗапись.ВидОбъектаОповещения = ТекЗапись.УдалитьВидОбъектаОповещения;
			Иначе
				ТекЗапись.ВидОбъектаОповещения = ТекЗапись.УдалитьВидОбъектаОповещения.ВидОперацииУХ;
				
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗ);
		
	КонецЦикла;	
КонецПроцедуры

Процедура ЗаполнитьНастройкиОптимизацииПлатежногоКалендаря() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоступныеВариантыОптимизацииПлатежногоКалендаря.ВариантОптимизации КАК ВариантОптимизации
	|ИЗ
	|	РегистрСведений.ДоступныеВариантыОптимизацииПлатежногоКалендаря КАК ДоступныеВариантыОптимизацииПлатежногоКалендаря"
	);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ДоступныеВариантыОптимизацииПлатежногоКалендаря.СоздатьНаборЗаписей();
		
	КоллекцияМетаданных = Метаданные.Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ЗначенияПеречисления;
	Для каждого МетаданноеЗначения Из КоллекцияМетаданных Цикл
		СтрокаЗаписи = НаборЗаписей.Добавить();		
		Индекс = КоллекцияМетаданных.Индекс(МетаданноеЗначения); 
		СтрокаЗаписи.ВариантОптимизации = Перечисления.ВариантыОптимизацииПлатежногоКалендаря[Индекс];
	КонецЦикла;

	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура ЗаполнитьПлатежныеДниНедели() Экспорт
	
	НаборЗаписей = РегистрыСведений.ПлатежныеДниНедели.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() > 0 Тогда
		Возврат; // уже заполнили;
	КонецЕсли;
	
	Для НомерДня = 1 По 5 Цикл // пн - пт
		Строка = НаборЗаписей.Добавить();
		Строка.НомерДняНедели = НомерДня;
	КонецЦикла;
	
	ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);

КонецПроцедуры

Процедура ОбновитьРегистрНастроекФинансовыхИнструментов() Экспорт
	
	НЗ = РегистрыСведений.НастройкиФинансовыхИнструментов.СоздатьНаборЗаписей();
	НЗ.Прочитать();
	Для Каждого ТекЗапись Из НЗ Цикл
		
		Если Не ЗначениеЗаполнено(ТекЗапись.Операция) и ЗначениеЗаполнено(ТекЗапись.УдалитьОперация) Тогда
			ТекЗапись.Операция = ПредопределенноеЗначение("Справочник.ОперацииГрафиковДоговоров." + ТекЗапись.УдалитьОперация.ИмяПредопределенныхДанных);
		КонецЕсли
		
	КонецЦикла;

	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НЗ);	
	
КонецПроцедуры

Процедура ОбновитьВидыОперацийРасчетыСКонтрагентамиГрафики() Экспорт
	
	КэшВидовОпераций = Новый Соответствие;

	ИменаПредопределенныхСтарые = Метаданные.ПланыВидовХарактеристик.ОперацииФинансовыхИнструментов.ПолучитьИменаПредопределенных();
	ИменаПредопределенныхНовые = Метаданные.Справочники.ОперацииГрафиковДоговоров.ПолучитьИменаПредопределенных();

	Для Каждого ТекИмяПредопределенного Из ИменаПредопределенныхСтарые Цикл
		
		Если ИменаПредопределенныхНовые.Найти(ТекИмяПредопределенного) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КэшВидовОпераций.Вставить(
			ПредопределенноеЗначение("ПланВидовХарактеристик.ОперацииФинансовыхИнструментов." + ТекИмяПредопределенного),
			ПредопределенноеЗначение("Справочник.ОперацииГрафиковДоговоров." + ТекИмяПредопределенного)		
		);
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКонтрагентамиГрафики.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК РасчетыСКонтрагентамиГрафики
	|ГДЕ
	|	РасчетыСКонтрагентамиГрафики.УдалитьОперация <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ОперацииФинансовыхИнструментов.ПустаяСсылка)
	|	И РасчетыСКонтрагентамиГрафики.Операция = ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ПустаяСсылка)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.РасчетыСКонтрагентамиГрафики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			Если НЕ ЗначениеЗаполнено(ТекЗапись.Операция) И ЗначениеЗаполнено(ТекЗапись.УдалитьОперация) Тогда
				ТекЗапись.Операция = КэшВидовОпераций[ТекЗапись.УдалитьОперация];
			КонецЕсли
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла

КонецПроцедуры

Процедура ЗаполнитьДоговорКонтрагентаПлатежныхПозиций() Экспорт
	
	ЗаполнитьДоговорКонтрагентаПолучательВЗНО();
	ЗаполнитьДоговорКонтрагентаВРазмещенииЗаявок();
	
КонецПроцедуры

Процедура НачальноеЗаполнениеРежимАктуализацииГрафикаПриИзмененииПервичныхДокументов() Экспорт
	
	Константы.РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов.Установить(
		Перечисления.РежимыАктуализацииГрафикаПриИзмененииПервичныхДокументов.НеАктуализировать);
	
КонецПроцедуры
	
Процедура ЗаполнитьКонстантуРежимАктуализацииГрафикаПриИзмененииПервичныхДокументов() Экспорт
	
	ОбновлятьГрафикиИсполнения = Константы.УдалитьОбновлятьГрафикиИсполненияДоговоровПриВводеПервичныхДокументов.Получить();
	
	Если ОбновлятьГрафикиИсполнения Тогда
		ЗначениеКонстанты = Перечисления.РежимыАктуализацииГрафикаПриИзмененииПервичныхДокументов.СоздаватьНовыеВерсии;
	Иначе
		ЗначениеКонстанты = Перечисления.РежимыАктуализацииГрафикаПриИзмененииПервичныхДокументов.НеАктуализировать;
	КонецЕсли;
	
	Константы.РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов.Установить(ЗначениеКонстанты);

КонецПроцедуры

Процедура ЗаполнитьТабличныеЧастиГрафикРасчетов() Экспорт
	
	ЗАпрос = Новый Запрос;

	Запрос.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыйГрафик.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКоммерческийДоговор.УдалитьГрафик КАК СтарыйГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор.ГрафикРасчетов КАК НовыйГрафик
	|		ПО СтарыйГрафик.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыйГрафик.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияАккредитив.УдалитьГрафик КАК СтарыйГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияАккредитив.ГрафикРасчетов КАК НовыйГрафик
	|		ПО СтарыйГрафик.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыйГрафик.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияБанковскаяГарантия.УдалитьГрафик КАК СтарыйГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияБанковскаяГарантия.ГрафикРасчетов КАК НовыйГрафик
	|		ПО СтарыйГрафик.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыйГрафик.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютноПроцентныйСвоп.УдалитьГрафик КАК СтарыйГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютноПроцентныйСвоп.ГрафикРасчетов КАК НовыйГрафик
	|		ПО СтарыйГрафик.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыйГрафик.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияДепозит.УдалитьГрафик КАК СтарыйГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияДепозит.ГрафикРасчетов КАК НовыйГрафик
	|		ПО СтарыйГрафик.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтарыйГрафик.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит.УдалитьГрафик КАК СтарыйГрафик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКредит.ГрафикРасчетов КАК НовыйГрафик
	|		ПО СтарыйГрафик.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	| ";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.РежимИспользованияГрафика = Перечисления.РежимыИспользованияГрафика.СозданиеЗаявок;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		
		ОписаниеГрафика = МенеджерОбъекта.ОписаниеГрафика(Объект.ВидДоговораУХ);
		ОперацииГрафика = РаботаСДоговорамиКонтрагентовУХ.ОперацииГрафика(ОписаниеГрафика, Объект);
		
		// Будем обходить график по секциям.
		Для Каждого ТекКлючЗначение Из ОписаниеГрафика Цикл
			
			ОписаниеСекции = ТекКлючЗначение.Значение;
			
			ОписаниеОперацииПриход = РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(ОписаниеСекции.КолонкаПриходОперация, ОперацииГрафика);
			ОписаниеОперацииРасход = РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(ОписаниеСекции.КолонкаРасходОперация, ОперацииГрафика);
			
			Для Каждого ТекСтрокаГрафика Из Объект.УдалитьГрафик Цикл
				
				Если ОписаниеСекции.ЭтоРасчетнаяСекция Тогда
					
					ЕстьПриходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход] <> 0 ИЛИ ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход + "Расчет"] <> 0);
					ЕстьРасходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход] <> 0 ИЛИ ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход + "Расчет"] <> 0);
					
				Иначе
					
					ЕстьПриходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход] <> 0);
					ЕстьРасходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход] <> 0);
					
				КонецЕсли;
				
				Если ЕстьПриходнаяОперация Тогда
					НоваяСтрока = РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(
						Объект.ГрафикРасчетов, 
						ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход], 
						ТекСтрокаГрафика.Дата,
						,
						ОписаниеОперацииПриход
						);
						
					Если ОписаниеСекции.ЭтоРасчетнаяСекция  Тогда
						НоваяСтрока.СуммаРасчет =  ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход + "Расчет"];
						НоваяСтрока.СуммаКорректировка = ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход + "Корректировка"];
					КонецЕсли;
					
				КонецЕсли;
				
				Если ЕстьРасходнаяОперация Тогда
					НоваяСтрока = РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(
						Объект.ГрафикРасчетов, 
						ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход], 
						ТекСтрокаГрафика.Дата,
						,
						ОписаниеОперацииРасход
						);
						
					Если ОписаниеСекции.ЭтоРасчетнаяСекция  Тогда
						НоваяСтрока.СуммаРасчет =  ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход + "Расчет"];
						НоваяСтрока.СуммаКорректировка = ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход + "Корректировка"];
					Иначе
						НоваяСтрока.СуммаРасчет = 0;
						НоваяСтрока.СуммаКорректировка = 0;
					КонецЕсли;
					
				КонецЕсли;
				
				
			КонецЦикла;

			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;

	Запрос.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВалютныйФорвард.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйФорвард КАК ВалютныйФорвард
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютныйФорвард.ГрафикРасчетов КАК НовыйГрафик
	|		ПО ВалютныйФорвард.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВалютныйСвоп.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйСвоп КАК ВалютныйСвоп
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютныйСвоп.ГрафикРасчетов КАК НовыйГрафик
	|		ПО ВалютныйСвоп.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL
	|";
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
		Менеджер.ЗаполнитьГрафикРасчетов(Объект);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьГрафикИсполненияЗаказов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГрафикРасчетовСПокупателемПоставщиком.Ссылка КАК Ссылка,
	|	ГрафикРасчетовСПокупателемПоставщиком.ДоговорКонтрагента.ВерсияСоглашения КАК ВерсияИсточник
	|ИЗ
	|	Документ.ГрафикРасчетовСПокупателемПоставщиком КАК ГрафикРасчетовСПокупателемПоставщиком
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ГрафикРасчетовСПокупателемПоставщиком.ГрафикРасчетов КАК НовыйГрафик
	|		ПО ГрафикРасчетовСПокупателемПоставщиком.Ссылка = НовыйГрафик.Ссылка
	|ГДЕ
	|	НовыйГрафик.Ссылка ЕСТЬ NULL";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		ВерсияИсточник = Выборка.ВерсияИсточник.ПолучитьОбъект();
		
		ЗаполнитьЗначенияСвойств(Объект, ВерсияИсточник,, "Ссылка,Номер,Проведен,ПометкаУдаления,Дата");
		Объект.ПроизводственныеКалендари.Загрузить(ВерсияИсточник.ПроизводственныеКалендари.Выгрузить());
		
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
			
			ОписаниеГрафика = МенеджерОбъекта.ОписаниеГрафика(ВерсияИсточник.ВидДоговораУХ);
			ОперацииГрафика = РаботаСДоговорамиКонтрагентовУХ.ОперацииГрафика(ОписаниеГрафика, Объект);
			
			// Будем обходить график по секциям.
			Для Каждого ТекКлючЗначение Из ОписаниеГрафика Цикл
				
				ОписаниеСекции = ТекКлючЗначение.Значение;
				
				ОписаниеОперацииПриход = РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(ОписаниеСекции.КолонкаПриходОперация, ОперацииГрафика);
				ОписаниеОперацииРасход = РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(ОписаниеСекции.КолонкаРасходОперация, ОперацииГрафика);
				
				Для Каждого ТекСтрокаГрафика Из Объект.УдалитьГрафик Цикл
					
					Если ОписаниеСекции.ЭтоРасчетнаяСекция Тогда
						
						ЕстьПриходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход] <> 0 ИЛИ ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход + "Расчет"] <> 0);
						ЕстьРасходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход] <> 0 ИЛИ ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход + "Расчет"] <> 0);
						
					Иначе
						
						ЕстьПриходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход] <> 0);
						ЕстьРасходнаяОперация = (ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход] <> 0);
						
					КонецЕсли;
					
					Если ЕстьПриходнаяОперация Тогда
						НоваяСтрока = РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(
							Объект.ГрафикРасчетов, 
							ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход], 
							ТекСтрокаГрафика.Дата,
							,
							ОписаниеОперацииПриход
							);
							
						Если ОписаниеСекции.ЭтоРасчетнаяСекция  Тогда
							НоваяСтрока.СуммаРасчет =  ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход + "Расчет"];
							НоваяСтрока.СуммаКорректировка = ТекСтрокаГрафика[ОписаниеСекции.КолонкаПриход + "Корректировка"];
						КонецЕсли;
						
					КонецЕсли;
					
					Если ЕстьРасходнаяОперация Тогда
						НоваяСтрока = РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(
							Объект.ГрафикРасчетов, 
							ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход], 
							ТекСтрокаГрафика.Дата,
							,
							ОписаниеОперацииРасход
							);
							
						Если ОписаниеСекции.ЭтоРасчетнаяСекция  Тогда
							НоваяСтрока.СуммаРасчет =  ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход + "Расчет"];
							НоваяСтрока.СуммаКорректировка = ТекСтрокаГрафика[ОписаниеСекции.КолонкаРасход + "Корректировка"];
						Иначе
							НоваяСтрока.СуммаРасчет = 0;
							НоваяСтрока.СуммаКорректировка = 0;
						КонецЕсли;
						
					КонецЕсли;
					
					
				КонецЦикла;

				
			КонецЦикла;
		
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПерезаполнитьКовенантовВВерсииСоглашенияКредит() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсияСоглашенияКредитКовенанты.Ссылка КАК Документ
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит.Ковенанты КАК ВерсияСоглашенияКредитКовенанты
	|ГДЕ
	|	ВерсияСоглашенияКредитКовенанты.Ковенант = ЗНАЧЕНИЕ(Справочник.Ковенанты.ПустаяСсылка)
	|	И ВерсияСоглашенияКредитКовенанты.УдалитьКовенант <> ЗНАЧЕНИЕ(Справочник.Ковенанты.ПустаяСсылка)"
	);
	
	ТабЗаменыКовенантов = Новый ТаблицаЗначений;
	ТабЗаменыКовенантов.Колонки.Добавить("СтарыйКовенант", Новый ОписаниеТипов("СправочникСсылка.Ковенанты"));
	ТабЗаменыКовенантов.Колонки.Добавить("ДоговорКонтрагента", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	ТабЗаменыКовенантов.Колонки.Добавить("НовыйКовенант", Новый ОписаниеТипов("СправочникСсылка.Ковенанты"));
	ТабЗаменыКовенантов.Индексы.Добавить("СтарыйКовенант, ДоговорКонтрагента");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
			Если ЗначениеЗаполнено(ДокументОбъект.ДоговорКонтрагента) Тогда
				
				Для каждого Строка ИЗ ДокументОбъект.Ковенанты Цикл
					Если НЕ ЗначениеЗаполнено(Строка.Ковенант) И ЗначениеЗаполнено(Строка.УдалитьКовенант) Тогда
						
						СтрокиЗамены = ТабЗаменыКовенантов.НайтиСтроки(
											Новый Структура(
													"СтарыйКовенант, ДоговорКонтрагента",
													Строка.УдалитьКовенант,
													ДокументОбъект.ДоговорКонтрагента));
						
						Если ЗначениеЗаполнено(СтрокиЗамены) Тогда
							НовыйКовенант = СтрокиЗамены[0].НовыйКовенант; 
						Иначе	
							СтарыйКовенантОбъект = Строка.УдалитьКовенант.ПолучитьОбъект();
							Если НЕ ЗначениеЗаполнено(СтарыйКовенантОбъект.Владелец) Тогда
								
								СтарыйКовенантОбъект.Владелец = ДокументОбъект.ДоговорКонтрагента;
								ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(СтарыйКовенантОбъект);
								НовыйКовенант = СтарыйКовенантОбъект.Ссылка;
								
								СтрокаЗамены = ТабЗаменыКовенантов.Добавить();
								СтрокаЗамены.СтарыйКовенант = Строка.УдалитьКовенант;
								СтрокаЗамены.ДоговорКонтрагента = ДокументОбъект.ДоговорКонтрагента;
								СтрокаЗамены.НовыйКовенант = Строка.УдалитьКовенант;
								
							ИначеЕсли СтарыйКовенантОбъект.Владелец = ДокументОбъект.ДоговорКонтрагента Тогда
								
								НовыйКовенант = СтарыйКовенантОбъект.Ссылка;
								
								СтрокаЗамены = ТабЗаменыКовенантов.Добавить();
								СтрокаЗамены.СтарыйКовенант = Строка.УдалитьКовенант;
								СтрокаЗамены.ДоговорКОнтрагента = ДокументОбъект.ДоговорКонтрагента;
								СтрокаЗамены.НовыйКовенант = Строка.УдалитьКовенант;
								
							Иначе // другой договор у старого ковенанта
								КовенантОбъект = Справочники.Ковенанты.СоздатьЭлемент();
								ЗаполнитьЗначенияСвойств(КовенантОбъект, СтарыйКовенантОбъект,,"Владелец");
								КовенантОбъект.Владелец = ДокументОбъект.ДоговорКонтрагента;
								ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(КовенантОбъект);
								НовыйКовенант = КовенантОбъект.Ссылка;
								
								СтрокаЗамены = ТабЗаменыКовенантов.Добавить();
								СтрокаЗамены.СтарыйКовенант = Строка.УдалитьКовенант;
								СтрокаЗамены.ДоговорКОнтрагента = ДокументОбъект.ДоговорКонтрагента;
								СтрокаЗамены.НовыйКовенант = КовенантОбъект.Ссылка;
								
							КонецЕсли;
						КонецЕсли;
						
						Строка.Ковенант = НовыйКовенант;
					КонецЕсли;
				КонецЦикла;
				
				ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ДокументОбъект);
				
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(
				"ОбновлениеИБ: ПерезаполнитьКовенантовВВерсииСоглашенияКредит", 
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;			
	КонецЦикла
	
КонецПроцедуры

Процедура ЗаполнитьРежимИспользованияГрафикаВДокументах() Экспорт
	
	МассивИменТаблиц = Новый Массив;
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияАккредитив");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияБанковскаяГарантия");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияВалютноПроцентныйСвоп");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияВалютныйСвоп");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияВалютныйФорвард");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияДепозит");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияКоммерческийДоговор");
	МассивИменТаблиц.Добавить("Документ.ВерсияСоглашенияКредит");

	ШаблонТекстаЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка
	|ИЗ
	|	_ИмяТаблицы_ КАК Таблица
	|ГДЕ
	|	Таблица.РежимИспользованияГрафика = ЗНАЧЕНИЕ(Перечисление.РежимыИспользованияГрафика.ПустаяСсылка)"
	;
	
	МассивТекстовЗапросов = Новый Массив;
	Для каждого ИмяТаблицы Из МассивИменТаблиц Цикл
		ТекстЗапроса = СтрЗаменить(ШаблонТекстаЗапроса, "_ИмяТаблицы_", ИмяТаблицы);
		МассивТекстовЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(
						МассивТекстовЗапросов, 
						"
						|
						|ОБЪЕДИНИТЬ ВСЕ
						|
						|");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РежимИспользованияГрафика = Перечисления.РежимыИспользованияГрафика.СозданиеЗаявок;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПриоритетПлатежаВПлатежныхПозициях() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.Приоритет, РазмещениеЗаявок.ЗаявкаНаОперацию.ПриоритетПлатежа) КАК Приоритет,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|ГДЕ
	|	РазмещениеЗаявок.Приоритет = &ПустойПриоритет
	|	И ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.Приоритет, РазмещениеЗаявок.ЗаявкаНаОперацию.ПриоритетПлатежа) <> &ПустойПриоритет"
	);
	Запрос.УстановитьПараметр("ПустойПриоритет", Справочники.ПриоритетыПлатежей.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
		Для каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			ЭлементОтбора.Установить(Выборка[ЭлементОтбора.Имя]);
		КонецЦикла;
		НаборЗаписей.Прочитать();
		Если Не НаборЗаписей.Количество() Тогда
			Продолжить;
		КонецЕсли;
		НаборЗаписей[0].Приоритет = Выборка.Приоритет;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммуДокументаУпрЗаявок() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента <> 0
	|	И ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокументаУпр = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаРасход.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасход КАК ЗаявкаНаРасход
	|ГДЕ
	|	ЗаявкаНаРасход.СуммаДокумента <> 0
	|	И ЗаявкаНаРасход.СуммаДокументаУпр = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОжидаемоеПоступлениеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ОжидаемоеПоступлениеДенежныхСредств
	|ГДЕ
	|	ОжидаемоеПоступлениеДенежныхСредств.СуммаДокумента <> 0
	|	И ОжидаемоеПоступлениеДенежныхСредств.СуммаДокументаУпр = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПланируемыйДоход.Ссылка
	|ИЗ
	|	Документ.ПланируемыйДоход КАК ПланируемыйДоход
	|ГДЕ
	|	ПланируемыйДоход.СуммаДокумента <> 0
	|	И ПланируемыйДоход.СуммаДокументаУпр = 0"
	);
	
	ВалютаУпрУчета = ВстраиваниеОПКПереопределяемый.КонстантаВалютаУправленческогоУчета();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Реквизиты = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(ДокументОбъект.Ссылка));
		
		ПланируемаяДатаОперации = ЗаявкиНаОперации.РеквизитЗаявки(ДокументОбъект, Реквизиты.ПланируемаяДатаОперации);
		ДатаКурса = ?(ЗначениеЗаполнено(ПланируемаяДатаОперации), ПланируемаяДатаОперации, ДокументОбъект.Дата);
		
		СоответствиеКурсовВалют = Новый Соответствие;	
		Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпрУчета, ДатаКурса);
		СоответствиеКурсовВалют.Вставить(ВалютаУпрУчета, Курс);
		ВалютаДокумента = ЗаявкиНаОперации.РеквизитЗаявки(ДокументОбъект, Реквизиты.ВалютаДокумента);
		Если СоответствиеКурсовВалют.Получить(ВалютаДокумента) = Неопределено Тогда
			Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
			СоответствиеКурсовВалют.Вставить(ВалютаДокумента,Курс);
		КонецЕсли;
		
		СуммаДокумента = ЗаявкиНаОперации.РеквизитЗаявки(ДокументОбъект, Реквизиты.СуммаДокумента);
		ВалютаДокумента = ЗаявкиНаОперации.РеквизитЗаявки(ДокументОбъект, Реквизиты.ВалютаДокумента);
		Если ЗначениеЗаполнено(ВалютаУпрУчета) Тогда			
			ДокументОбъект.СуммаДокументаУпр = ВстраиваниеОПКПереопределяемый.ПересчитатьПоКурсу(
				СуммаДокумента,
				СоответствиеКурсовВалют[ВалютаДокумента],
				СоответствиеКурсовВалют[ВалютаУпрУчета]);
		Иначе
			ДокументОбъект.СуммаДокументаУпр = СуммаДокумента;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДоговорКредитаАрендыВПлатежныхПозициях() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорАренды КАК ДоговорАренды,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКредитаДепозита.ВерсияСоглашения.ФиксированныйСчетКонтрагента, ЛОЖЬ)) КАК ФиксированныйСчетКонтрагентаДоговор,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКредитаДепозита.ВерсияСоглашения.ФиксированныйСчетОрганизации, ЛОЖЬ)) КАК ФиксированныйСчетОрганизацииДоговор,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РазмещениеЗаявок.ЗапретИзмененияБанковскогоСчетаКассы КАК ЗапретИзмененияБанковскогоСчетаКассы,
	|	МАКСИМУМ(ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ФиксированныйСчетКонтрагента) КАК ФиксированныйСчетКонтрагентаЗаявка,
	|	МАКСИМУМ(ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ФиксированныйСчетОрганизации) КАК ФиксированныйСчетОрганизацииЗаявка,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РазмещениеЗаявок.Сумма КАК Сумма,
	|	РазмещениеЗаявок.ФормаОплаты КАК ФормаОплаты,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РазмещениеЗаявок.Проведен КАК Проведен,
	|	РазмещениеЗаявок.КурсПлатежа КАК КурсПлатежа,
	|	РазмещениеЗаявок.УдалитьФормаОплаты КАК УдалитьФормаОплаты,
	|	РазмещениеЗаявок.ЗапретИзмененияДаты КАК ЗапретИзмененияДаты,
	|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаОплаты,
	|	РазмещениеЗаявок.ВидОперацииУХ КАК ВидОперацииУХ,
	|	РазмещениеЗаявок.ДатаИсполнения КАК ДатаИсполнения,
	|	РазмещениеЗаявок.СчетКонтрагента КАК СчетКонтрагента,
	|	РазмещениеЗаявок.ЗапретРазбиенияСлияния КАК ЗапретРазбиенияСлияния,
	|	РазмещениеЗаявок.ИдентификаторВстречнойПозиции КАК ИдентификаторВстречнойПозиции,
	|	РазмещениеЗаявок.КратностьПлатежа КАК КратностьПлатежа,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.Приоритет КАК Приоритет,
	|	РазмещениеЗаявок.БезакцептноеСписание КАК БезакцептноеСписание,
	|	РазмещениеЗаявок.СпособОпределенияКурсаПлатежа КАК СпособОпределенияКурсаПлатежа,
	|	РазмещениеЗаявок.ДатаФиксацииКурсаПлатежа КАК ДатаФиксацииКурсаПлатежа,
	|	РазмещениеЗаявок.КурсПлатежаНеБолее КАК КурсПлатежаНеБолее,
	|	РазмещениеЗаявок.КурсПлатежаНеМенее КАК КурсПлатежаНеМенее,
	|	РазмещениеЗаявок.КурсПлатежаНеМенееВВалютеОплаты КАК КурсПлатежаНеМенееВВалютеОплаты,
	|	РазмещениеЗаявок.КурсПлатежаНеБолееВВалютеОплаты КАК КурсПлатежаНеБолееВВалютеОплаты,
	|	РазмещениеЗаявок.СдвигДатыФиксацииКурсаПлатежа КАК СдвигДатыФиксацииКурсаПлатежа,
	|	РазмещениеЗаявок.КрайняяДата КАК КрайняяДата
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|ГДЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|	И РазмещениеЗаявок.ДоговорКонтрагента В(&ПустыеДоговора)
	|	И (ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорАренды <> &ПустойДоговорАренды
	|			ИЛИ ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКредитаДепозита <> &ПустойДоговорКредитаДепозита)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаявок.ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции,
	|	РазмещениеЗаявок.ДоговорКонтрагента,
	|	РазмещениеЗаявок.ЗапретИзмененияБанковскогоСчетаКассы,
	|	РазмещениеЗаявок.БанковскийСчетКасса,
	|	РазмещениеЗаявок.Контрагент,
	|	РазмещениеЗаявок.СуммаВзаиморасчетов,
	|	РазмещениеЗаявок.Сумма,
	|	РазмещениеЗаявок.ФормаОплаты,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов,
	|	РазмещениеЗаявок.Проведен,
	|	РазмещениеЗаявок.КурсПлатежа,
	|	РазмещениеЗаявок.УдалитьФормаОплаты,
	|	РазмещениеЗаявок.ЗапретИзмененияДаты,
	|	РазмещениеЗаявок.ВалютаОплаты,
	|	РазмещениеЗаявок.ВидОперацииУХ,
	|	РазмещениеЗаявок.ДатаИсполнения,
	|	РазмещениеЗаявок.СчетКонтрагента,
	|	РазмещениеЗаявок.ЗапретРазбиенияСлияния,
	|	РазмещениеЗаявок.ИдентификаторВстречнойПозиции,
	|	РазмещениеЗаявок.КратностьПлатежа,
	|	РазмещениеЗаявок.Организация,
	|	РазмещениеЗаявок.Приоритет,
	|	РазмещениеЗаявок.БезакцептноеСписание,
	|	РазмещениеЗаявок.СпособОпределенияКурсаПлатежа,
	|	РазмещениеЗаявок.ДатаФиксацииКурсаПлатежа,
	|	РазмещениеЗаявок.КурсПлатежаНеБолее,
	|	РазмещениеЗаявок.КурсПлатежаНеМенее,
	|	РазмещениеЗаявок.КурсПлатежаНеМенееВВалютеОплаты,
	|	РазмещениеЗаявок.КурсПлатежаНеБолееВВалютеОплаты,
	|	РазмещениеЗаявок.СдвигДатыФиксацииКурсаПлатежа,
	|	РазмещениеЗаявок.КрайняяДата
	|ИТОГИ ПО
	|	ЗаявкаНаОперацию");

	Запрос.УстановитьПараметр("ПустойДоговорАренды", Справочники.ДоговорыАренды.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойДоговорКредитаДепозита", Справочники.ДоговорыКредитовИДепозитов.ПустаяСсылка());

	ПустыеДоговора = Новый Массив;
	ПустыеДоговора.Добавить(Справочники.ДоговорыАренды.ПустаяСсылка());
	ПустыеДоговора.Добавить( Справочники.ДоговорыКредитовИДепозитов.ПустаяСсылка());
	ПустыеДоговора.Добавить(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	ПустыеДоговора.Добавить(Неопределено);
	Запрос.УстановитьПараметр("ПустыеДоговора", ПустыеДоговора);

	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаявка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявка.Следующий() Цикл
		
		Если ВыборкаЗаявка.ФиксированныйСчетКонтрагентаЗаявка <> ВыборкаЗаявка.ФиксированныйСчетКонтрагентаДоговор 
			ИЛИ ВыборкаЗаявка.ФиксированныйСчетОрганизацииЗаявка <> ВыборкаЗаявка.ФиксированныйСчетОрганизацииДоговор Тогда
			
			ЗаявкаОбъект = ВыборкаЗаявка.ЗаявкаНаОперацию.ПолучитьОбъект();
			ЗаявкаОбъект.ФиксированныйСчетКонтрагента = ВыборкаЗаявка.ФиксированныйСчетКонтрагентаДоговор;
			ЗаявкаОбъект.ФиксированныйСчетОрганизации = ВыборкаЗаявка.ФиксированныйСчетОрганизацииДоговор;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗаявкаОбъект);
			
		КонецЕсли;
		
		ВыборкаПозиции = ВыборкаЗаявка.Выбрать();
		Пока ВыборкаПозиции.Следующий() Цикл
			
			НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(ВыборкаПозиции.ЗаявкаНаОперацию);
			НаборЗаписей.Отбор.ПриходРасход.Установить(ВыборкаПозиции.ПриходРасход);
			НаборЗаписей.Отбор.ИдентификаторПозиции.Установить(ВыборкаПозиции.ИдентификаторПозиции);
			
			Строка = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, ВыборкаПозиции);
			
			Если ЗначениеЗаполнено(ВыборкаПозиции.ДоговорКредитаДепозита) Тогда
				Строка.ДоговорКонтрагента = ВыборкаПозиции.ДоговорКредитаДепозита;
			ИначеЕсли ЗначениеЗаполнено(ВыборкаПозиции.ДоговорАренды) Тогда
				Строка.ДоговорКонтрагента = ВыборкаПозиции.ДоговорАренды;
			КонецЕсли;
			
			Строка.ЗапретИзмененияБанковскогоСчетаКассы = ВыборкаПозиции.ФиксированныйСчетОрганизацииДоговор;
			
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиВОжидаемомПоступленииДС() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОжидаемоеПоступлениеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ОжидаемоеПоступлениеДенежныхСредств
	|ГДЕ
	|	ОжидаемоеПоступлениеДенежныхСредств.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности"	
	);
	
	Запрос.УстановитьПараметр("ПустойЭлементСтруктурыЗадолженности", Перечисления.ЭлементыСтруктурыЗадолженности.ПустаяСсылка());
		
	ТаблицаЭлементыЗадолженности = ЭлементыСтруктурыЗадолженностиПоСтатьям();
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
					
		Договор = ВстраиваниеУХОжидаемоеПоступлениеДенежныхСредств.ДоговорДокумента(ДокументОбъект);
		
		Если ЗначениеЗаполнено(Договор) Тогда
			
			МассивЭлементов = ЗаявкиНаОперацииВызовСервера.ЭлементыСтруктурыЗадолженностиПоДоговору(Договор, ДокументОбъект.Ссылка);
			
			Если МассивЭлементов.Количество() > 1 Тогда 
				
				Если ЗначениеЗаполнено(ДокументОбъект.СтатьяДвиженияДенежныхСредств) Тогда
					
					ГруппаОпераций = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, 
						"ВидДоговораУХ.ГруппаОперацийГрафика");
					
					Отбор = Новый Структура("СтатьяБюджета, ГруппаОпераций", ДокументОбъект.СтатьяДвиженияДенежныхСредств, ГруппаОпераций);
					Отбор.Вставить("НаправлениеДвижения", ЗаявкиНаОперацииКлиентСервер.НаправлениеДвиженияДокумента(ДокументОбъект.Ссылка));
					
					НайденныеСтроки = ТаблицаЭлементыЗадолженности.НайтиСтроки(Отбор);
					Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
						ДокументОбъект.ЭлементСтруктурыЗадолженности = НайденныеСтроки[0].ЭлементСтруктурыЗадолженности;
					Иначе
						ДокументОбъект.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
					КонецЕсли;
				Иначе
					ДокументОбъект.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
				КонецЕсли;
			ИначеЕсли МассивЭлементов.Количество() = 1 Тогда
				ДокументОбъект.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
			Иначе
				ДокументОбъект.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
			КонецЕсли;	
		Иначе
			ДокументОбъект.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
		КонецЕсли;
	
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиВДокументах() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредствРасшифровкаПлатежа.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОжидаемоеПоступлениеДенежныхСредств.Ссылка
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ОжидаемоеПоступлениеДенежныхСредств
	|ГДЕ
	|	ОжидаемоеПоступлениеДенежныхСредств.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.ПоступлениеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	ПоступлениеБезналичныхДенежныхСредствРасшифровкаПлатежа.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.РасшифровкаПлатежа КАК РасходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	РасходныйКассовыйОрдерРасшифровкаПлатежа.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.Ссылка
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ПриходныйКассовыйОрдерРасшифровкаПлатежа
	|ГДЕ
	|	ПриходныйКассовыйОрдерРасшифровкаПлатежа.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности"	
	);
	
	Запрос.УстановитьПараметр("ПустойЭлементСтруктурыЗадолженности", Перечисления.ЭлементыСтруктурыЗадолженности.ПустаяСсылка());
		
	ТаблицаЭлементыЗадолженности = ЭлементыСтруктурыЗадолженностиПоСтатьям();
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДокументОбъект.Ссылка);
		Если ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
			ИЛИ ТипЗнч(ДокументОбъект.Ссылка) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
			МенеджерДокумента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ДокументОбъект, МассивВсехРеквизитов, МассивРеквизитовОперации);
		Иначе
			МенеджерДокумента.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(ДокументОбъект.ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
		КонецЕсли;
			
		Для каждого Строка ИЗ ДокументОбъект.РасшифровкаПлатежа Цикл
			
			Если НЕ ЗначениеЗаполнено(Строка.ЭлементСтруктурыЗадолженности) Тогда
				
				Договор = ДоговорСтрокиРасшифровки(Строка, ДокументОбъект, МассивРеквизитовОперации);
				
				Если ЗначениеЗаполнено(Договор) Тогда
				
					МассивЭлементов = ЗаявкиНаОперацииВызовСервера.ЭлементыСтруктурыЗадолженностиПоДоговору(Договор, ДокументОбъект.Ссылка);
								
					Если МассивЭлементов.Количество() > 1 Тогда 
					
						Если ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
							
							ГруппаОпераций = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, 
									"ВидДоговораУХ.ГруппаОперацийГрафика");
							
							Отбор = Новый Структура("СтатьяБюджета, ГруппаОпераций", Строка.СтатьяДвиженияДенежныхСредств, ГруппаОпераций);
							Отбор.Вставить("НаправлениеДвижения", ЗаявкиНаОперацииКлиентСервер.НаправлениеДвиженияДокумента(ДокументОбъект.Ссылка));
														
							НайденныеСтроки = ТаблицаЭлементыЗадолженности.НайтиСтроки(Отбор);
							Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
								Строка.ЭлементСтруктурыЗадолженности = НайденныеСтроки[0].ЭлементСтруктурыЗадолженности;
							Иначе
								Строка.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
							КонецЕсли;
						Иначе
							Строка.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
						КонецЕсли;
					ИначеЕсли МассивЭлементов.Количество() = 1 Тогда
						Строка.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
					Иначе
						Строка.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
					КонецЕсли;	
				Иначе
					Строка.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиВДвиженияхБюджетированияПоВерсиямСоглашений() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДвиженияБюджетированияПоПозициям.Аналитика1 КАК Аналитика1,
	|	ДвиженияБюджетированияПоПозициям.Аналитика2 КАК Аналитика2,
	|	ДвиженияБюджетированияПоПозициям.Аналитика3 КАК Аналитика3,
	|	ДвиженияБюджетированияПоПозициям.Аналитика4 КАК Аналитика4,
	|	ДвиженияБюджетированияПоПозициям.Аналитика5 КАК Аналитика5,
	|	ДвиженияБюджетированияПоПозициям.Аналитика6 КАК Аналитика6,
	|	ДвиженияБюджетированияПоПозициям.Партнер КАК Партнер,
	|	ДвиженияБюджетированияПоПозициям.Заказ КАК Заказ,
	|	ДвиженияБюджетированияПоПозициям.ЦФО КАК ЦФО,
	|	ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ДвиженияБюджетированияПоПозициям.ТипСуммыКредитаДепозита КАК ТипСуммыКредитаДепозита,
	|	ДвиженияБюджетированияПоПозициям.ДоговорАренды КАК ДоговорАренды,
	|	ДвиженияБюджетированияПоПозициям.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ДвиженияБюджетированияПоПозициям.Подразделение КАК Подразделение,
	|	ДвиженияБюджетированияПоПозициям.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДвиженияБюджетированияПоПозициям.Ведомость КАК Ведомость,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСчетУчета КАК УдалитьСчетУчета,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто1 КАК УдалитьСубконто1,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто2 КАК УдалитьСубконто2,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто3 КАК УдалитьСубконто3,
	|	ДвиженияБюджетированияПоПозициям.СтатьяРасходов КАК СтатьяРасходов,
	|	ДвиженияБюджетированияПоПозициям.АналитикаРасходов КАК АналитикаРасходов,
	|	ДвиженияБюджетированияПоПозициям.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДвиженияБюджетированияПоПозициям.Проект КАК Проект,
	|	ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ДвиженияБюджетированияПоПозициям.СтавкаНДС КАК СтавкаНДС,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|	ДвиженияБюджетированияПоПозициям.УдалитьОбъектРасчетов КАК УдалитьОбъектРасчетов,
	|	ДвиженияБюджетированияПоПозициям.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДвиженияБюджетированияПоПозициям.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДвиженияБюджетированияПоПозициям.ЦеннаяБумага КАК ЦеннаяБумага,
	|	ДвиженияБюджетированияПоПозициям.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	|	ДвиженияБюджетированияПоПозициям.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ДвиженияБюджетированияПоПозициям.Сумма КАК Сумма,
	|	ДвиженияБюджетированияПоПозициям.СуммаНДС КАК СуммаНДС,
	|	ДвиженияБюджетированияПоПозициям.ДокументОснование КАК ДокументОснование,
	|	РазмещениеЗаявок.ДатаИсполнения КАК Дата
	|ИЗ
	|	РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ПО ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию = РазмещениеЗаявок.ЗаявкаНаОперацию
	|			И ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции = РазмещениеЗаявок.ИдентификаторПозиции
	|ГДЕ
	|	ДвиженияБюджетированияПоПозициям.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|	И ТИПЗНАЧЕНИЯ(ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию) В (&ТипыВерсийСоглашений)
	|ИТОГИ ПО
	|	ЗаявкаНаОперацию"
	);
	Запрос.УстановитьПараметр("ПустойЭлементСтруктурыЗадолженности", Перечисления.ЭлементыСтруктурыЗадолженности.ПустаяСсылка());
	МассивТипов = Метаданные.ОпределяемыеТипы.ВерсияСоглашения.Тип.Типы();
	Запрос.УстановитьПараметр("ТипыВерсийСоглашений", МассивТипов);
	
	Отбор = Новый Структура("Дата, СтатьяБюджета, ЦФО, Проект");
	Для ном = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		Отбор.Вставить("Аналитика" + ном);
	КонецЦикла;
	
	ВыборкаЗаявки = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаявки.Следующий() Цикл
		
		ТабГрафик = ГрафикДДСВерсииСоглашения(ВыборкаЗаявки.ЗаявкаНаОперацию);
		
		Выборка = ВыборкаЗаявки.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НачатьТранзакцию();
			
			МЗ = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			МЗ.Удалить();
			
			МЗ = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка);
			
			ЗаполнитьЗначенияСвойств(Отбор, Выборка);
			Отбор.СтатьяБюджета = Выборка.СтатьяДвиженияДенежныхСредств;
			
			СтрокиГрафика = ТабГрафик.НайтиСтроки(Отбор);
			Если СтрокиГрафика.Количество() > 0 Тогда			
				МЗ.ЭлементСтруктурыЗадолженности = СтрокиГрафика[0].ЭлементСтруктурыЗадолженности; 
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(МЗ.ЭлементСтруктурыЗадолженности) Тогда
				МЗ.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг; 
			КонецЕсли;
			
			МЗ.Записать();
			
			ЗафиксироватьТранзакцию();
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиВДвиженияхБюджетированияПоЗаявкам() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДвиженияБюджетированияПоПозициям.Аналитика1 КАК Аналитика1,
	|	ДвиженияБюджетированияПоПозициям.Аналитика2 КАК Аналитика2,
	|	ДвиженияБюджетированияПоПозициям.Аналитика3 КАК Аналитика3,
	|	ДвиженияБюджетированияПоПозициям.Аналитика4 КАК Аналитика4,
	|	ДвиженияБюджетированияПоПозициям.Аналитика5 КАК Аналитика5,
	|	ДвиженияБюджетированияПоПозициям.Аналитика6 КАК Аналитика6,
	|	ДвиженияБюджетированияПоПозициям.Партнер КАК Партнер,
	|	ДвиженияБюджетированияПоПозициям.Заказ КАК Заказ,
	|	ДвиженияБюджетированияПоПозициям.ЦФО КАК ЦФО,
	|	ДвиженияБюджетированияПоПозициям.ДоговорКредитаДепозита КАК ДоговорКредитаДепозита,
	|	ДвиженияБюджетированияПоПозициям.ТипСуммыКредитаДепозита КАК ТипСуммыКредитаДепозита,
	|	ДвиженияБюджетированияПоПозициям.ДоговорАренды КАК ДоговорАренды,
	|	ДвиженияБюджетированияПоПозициям.ТипПлатежаПоАренде КАК ТипПлатежаПоАренде,
	|	ДвиженияБюджетированияПоПозициям.ДоговорЗаймаСотруднику КАК ДоговорЗаймаСотруднику,
	|	ДвиженияБюджетированияПоПозициям.Подразделение КАК Подразделение,
	|	ДвиженияБюджетированияПоПозициям.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДвиженияБюджетированияПоПозициям.Ведомость КАК Ведомость,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСчетУчета КАК УдалитьСчетУчета,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто1 КАК УдалитьСубконто1,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто2 КАК УдалитьСубконто2,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто3 КАК УдалитьСубконто3,
	|	ДвиженияБюджетированияПоПозициям.СтатьяРасходов КАК СтатьяРасходов,
	|	ДвиженияБюджетированияПоПозициям.АналитикаРасходов КАК АналитикаРасходов,
	|	ДвиженияБюджетированияПоПозициям.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДвиженияБюджетированияПоПозициям.Проект КАК Проект,
	|	ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ДвиженияБюджетированияПоПозициям.СтавкаНДС КАК СтавкаНДС,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
	|	ДвиженияБюджетированияПоПозициям.УдалитьОбъектРасчетов КАК УдалитьОбъектРасчетов,
	|	ДвиженияБюджетированияПоПозициям.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДвиженияБюджетированияПоПозициям.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДвиженияБюджетированияПоПозициям.ЦеннаяБумага КАК ЦеннаяБумага,
	|	ДвиженияБюджетированияПоПозициям.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	|	ДвиженияБюджетированияПоПозициям.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ДвиженияБюджетированияПоПозициям.Сумма КАК Сумма,
	|	ДвиженияБюджетированияПоПозициям.СуммаНДС КАК СуммаНДС,
	|	ДвиженияБюджетированияПоПозициям.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|ГДЕ
	|	ДвиженияБюджетированияПоПозициям.ЭлементСтруктурыЗадолженности = &ПустойЭлементСтруктурыЗадолженности
	|	И (ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ИЛИ ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств
	|			ИЛИ ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию ССЫЛКА Документ.РаспоряжениеНаПеремещениеДенежныхСредств)"
	);
	Запрос.УстановитьПараметр("ПустойЭлементСтруктурыЗадолженности", Перечисления.ЭлементыСтруктурыЗадолженности.ПустаяСсылка());
	
	ТаблицаЭлементыЗадолженности = ЭлементыСтруктурыЗадолженностиПоСтатьям();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ЗаявкаНаОперацию) Тогда
			Продолжить;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		МЗ = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Удалить();
		
		МЗ = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		
		Если ТипЗнч(Выборка.ЗаявкаНаОперацию) = Тип("ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств") Тогда
			МЗ.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
		Иначе	
		
			Договор = Неопределено;
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Договор = Выборка.ДоговорКонтрагента;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ДоговорКредитаДепозита) Тогда
				Договор = Выборка.ДоговорКредитаДепозита;
			ИначеЕсли ЗначениеЗаполнено(Выборка.ДоговорАренды) Тогда
				Договор = Выборка.ДоговорАренды;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Договор) Тогда
				
				МассивЭлементов = ЗаявкиНаОперацииВызовСервера.ЭлементыСтруктурыЗадолженностиПоДоговору(Договор, Выборка.ЗаявкаНаОперацию);
				
				Если МассивЭлементов.Количество() > 1 Тогда
					
					Если ЗначениеЗаполнено(Выборка.СтатьяДвиженияДенежныхСредств) Тогда
						
						ГруппаОпераций = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговораУХ.ГруппаОперацийГрафика");
						
						НаправлениеДвижения = ?(ТипЗнч(Выборка.ЗаявкаНаОперацию) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"),
							Перечисления.ВидыДвиженийПриходРасход.Расход,
							Перечисления.ВидыДвиженийПриходРасход.Приход);
						
						Отбор = Новый Структура("СтатьяБюджета, ГруппаОпераций, НаправлениеДвижения",
							Выборка.СтатьяДвиженияДенежныхСредств, 
							ГруппаОпераций,
							НаправлениеДвижения);
						
						НайденныеСтроки = ТаблицаЭлементыЗадолженности.НайтиСтроки(Отбор);
						Если ЗначениеЗаполнено(НайденныеСтроки) Тогда
							МЗ.ЭлементСтруктурыЗадолженности = НайденныеСтроки[0].ЭлементСтруктурыЗадолженности;
						Иначе
							МЗ.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
						КонецЕсли;			
					Иначе			
						МЗ.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];		
					КонецЕсли;
					
				ИначеЕсли МассивЭлементов.Количество() = 1 Тогда
					
					МЗ.ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
					
				Иначе
					
					МЗ.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
					
				КонецЕсли;
				
			Иначе
				
				МЗ.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
				
			КонецЕсли;
		КонецЕсли;
							
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗадатьНастройкиДокументаЗаявкаНаКорректировкуЛимитов() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.ДокументыБД.НайтиПоНаименованию("ЗаявкаНаКорректировкуЛимитов", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	 = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		 = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			 = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик			 = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаЗаявкаНаКорректировкуЛимитов()

Процедура ЗадатьНастройкиДокументаКорректировкаЛимитов() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.ДокументыБД.НайтиПоНаименованию("КорректировкаЛимитов", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	 = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		 = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			 = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик			 = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаКорректировкаЛимитов()

Процедура ЗаполнитьНовыеРеквизитыРегистраРазмещениеЗаявок() Экспорт

	// заполнение ИдентификаторВстречнойПозиции: только одна встречная операция может быть, с противоположным ПриходРасход		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.Приоритет КАК Приоритет,
	|	ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.БезакцептноеСписание, ЛОЖЬ) КАК БезакцептноеСписание,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.СпособОпределенияКурсаПлатежа КАК СпособОпределенияКурсаПлатежа,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.ДатаФиксацииКурсаПлатежа КАК ДатаФиксацииКурсаПлатежа,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеБолее КАК КурсПлатежаНеБолее,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеМенее КАК КурсПлатежаНеМенее,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеМенееВВалютеОплаты КАК КурсПлатежаНеМенееВВалютеОплаты,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеБолееВВалютеОплаты КАК КурсПлатежаНеБолееВВалютеОплаты,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.СдвигДатыФиксацииКурсаПлатежа КАК СдвигДатыФиксацииКурсаПлатежа,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию.КрайняяДата КАК КрайняяДата
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|ГДЕ
	|	(РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ИЛИ РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств)
	|	И (РазмещениеЗаявок.СчетКонтрагента = ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПУстаяСсылка)
	|			ИЛИ РазмещениеЗаявок.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ИЛИ РазмещениеЗаявок.Приоритет <> РазмещениеЗаявок.ЗаявкаНаОперацию.Приоритет
	|			ИЛИ РазмещениеЗаявок.БезакцептноеСписание <> ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.БезакцептноеСписание, ЛОЖЬ)
	|			ИЛИ РазмещениеЗаявок.СпособОпределенияКурсаПлатежа <> РазмещениеЗаявок.ЗаявкаНаОперацию.СпособОпределенияКурсаПлатежа
	|			ИЛИ РазмещениеЗаявок.ДатаФиксацииКурсаПлатежа <> РазмещениеЗаявок.ЗаявкаНаОперацию.ДатаФиксацииКурсаПлатежа
	|			ИЛИ РазмещениеЗаявок.КурсПлатежаНеБолее <> РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеБолее
	|			ИЛИ РазмещениеЗаявок.КурсПлатежаНеМенее <> РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеМенее
	|			ИЛИ РазмещениеЗаявок.КурсПлатежаНеМенееВВалютеОплаты <> РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеМенееВВалютеОплаты
	|			ИЛИ РазмещениеЗаявок.КурсПлатежаНеБолееВВалютеОплаты <> РазмещениеЗаявок.ЗаявкаНаОперацию.КурсПлатежаНеБолееВВалютеОплаты
	|			ИЛИ РазмещениеЗаявок.СдвигДатыФиксацииКурсаПлатежа <> РазмещениеЗаявок.ЗаявкаНаОперацию.СдвигДатыФиксацииКурсаПлатежа
	|			ИЛИ РазмещениеЗаявок.КрайняяДата <> РазмещениеЗаявок.ЗаявкаНаОперацию.КрайняяДата)";
	
	ВыборкаЗаявки = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаявки.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(ВыборкаЗаявки.ЗаявкаНаОперацию);
		НаборЗаписей.Отбор.ПриходРасход.Установить(ВыборкаЗаявки.ПриходРасход);
		НаборЗаписей.Отбор.ИдентификаторПозиции.Установить(ВыборкаЗаявки.ИдентификаторПозиции);
		
		НаборЗаписей.Прочитать();
		
		Если не НаборЗаписей.Количество() Тогда
			Продолжить;
		КонецЕсли;
		ПоляЗаполнения = "ДоговорКонтрагента,Приоритет,БезакцептноеСписание,СпособОпределенияКурсаПлатежа,ДатаФиксацииКурсаПлатежа,КурсПлатежаНеБолее,КурсПлатежаНеМенее,
						|КурсПлатежаНеМенееВВалютеОплаты,КурсПлатежаНеБолееВВалютеОплаты,СдвигДатыФиксацииКурсаПлатежа,КрайняяДата";
		
		ОбщегоНазначенияКлиентСерверУХ.ЗаполнитьЗначенияОтличающихсяСвойств(НаборЗаписей[0], 
																			ВыборкаЗаявки,
																			ПоляЗаполнения);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
			
КонецПроцедуры

Процедура ЗаполнитьПараметрыОперацийВерсийСоглашений() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияАккредитив КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияАккредитив.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияБанковскаяГарантия КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияБанковскаяГарантия.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютноПроцентныйСвоп КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютноПроцентныйСвоп.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйСвоп КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютныйСвоп.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйФорвард КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютныйФорвард.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияДепозит КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияДепозит.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКредит.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ВерсияСоглашения.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL"
	);
	
	СоответствиеОпераций = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ТаблицаПараметров = СоответствиеОпераций[ДокументОбъект.ВидДоговораУХ];
		Если ТаблицаПараметров = Неопределено Тогда
			ГруппаОперацийГрафика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.ВидДоговораУХ, "ГруппаОперацийГрафика");
			ТаблицаПараметров = РаботаСДоговорамиКонтрагентовУХ.ПараметрыОперацийГрафикаПоУмолчанию(ГруппаОперацийГрафика);
			СоответствиеОпераций.Вставить(ДокументОбъект.ВидДоговораУХ, ТаблицаПараметров);
		КонецЕсли;
		
		ДокументОбъект.ПараметрыОпераций.Загрузить(ТаблицаПараметров);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОперацийДокументовЦБ() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.АкцептПротестПереводногоВекселя КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АкцептПротестПереводногоВекселя.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ВыбытиеВекселей КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыбытиеВекселей.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПоступлениеВекселя КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеВекселя.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ВыкупЦеннойБумаги КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыкупЦеннойБумаги.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|	И Документ.ФинансовыйИнструмент.ВидФинансовогоИнструмента = &ВидФинансовогоИнструментаОблигация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ВыпускЦеннойБумаги КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВыпускЦеннойБумаги.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|		И Документ.ФинансовыйИнструмент.ВидФинансовогоИнструмента = &ВидФинансовогоИнструментаОблигация	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПриобретениеЦеннойБумаги КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеЦеннойБумаги.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|		И Документ.ФинансовыйИнструмент.ВидФинансовогоИнструмента = &ВидФинансовогоИнструментаОблигация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документ.Ссылка
	|ИЗ
	|	Документ.ПродажаЦеннойБумаги КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПродажаЦеннойБумаги.ПараметрыОпераций КАК ТЧПараметрыОпераций
	|		ПО (ТЧПараметрыОпераций.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ТЧПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|		И Документ.ФинансовыйИнструмент.ВидФинансовогоИнструмента = &ВидФинансовогоИнструментаОблигация"
	);
	Запрос.УстановитьПараметр("ВидФинансовогоИнструментаОблигация", Перечисления.ВидыФинансовыхИнструментов.Облигация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ЗаполнитьПараметрыОперацийПоУмолчанию();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьПроцентОплатыСрокОтсрочкиВМатрицеРекомендуемыхУсловий() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МатрицаРекомендуемыхУсловий.РольКонтрагента КАК РольКонтрагента,
	|	МатрицаРекомендуемыхУсловий.СтепеньРиска КАК СтепеньРиска,
	|	МатрицаРекомендуемыхУсловий.СтепеньДоходности КАК СтепеньДоходности,
	|	МатрицаРекомендуемыхУсловий.УдалитьУсловиеОплаты.ПроцентАванса КАК ПроцентАванса,
	|	МатрицаРекомендуемыхУсловий.УдалитьУсловиеОплаты.СрокОтсрочкиПриведенный КАК СрокОтсрочки
	|ИЗ
	|	РегистрСведений.МатрицаРекомендуемыхУсловий КАК МатрицаРекомендуемыхУсловий
	|ГДЕ
	|	МатрицаРекомендуемыхУсловий.УдалитьУсловиеОплаты <> ЗНАЧЕНИЕ(Справочник.УсловияОплаты.ПустаяСсылка)
	|	И МатрицаРекомендуемыхУсловий.ПроцентАванса = 0
	|	И МатрицаРекомендуемыхУсловий.СрокОтсрочки = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НЗ = РегистрыСведений.МатрицаРекомендуемыхУсловий.СоздатьНаборЗаписей();
		НЗ.Отбор.РольКонтрагента.Установить(Выборка.РольКонтрагента);
		НЗ.Отбор.СтепеньРиска.Установить(Выборка.СтепеньРиска);
		НЗ.Отбор.СтепеньДоходности.Установить(Выборка.СтепеньДоходности);
		НЗ.Прочитать();
		
		Для Каждого ТекЗапись из НЗ Цикл
			ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка, "ПроцентАванса,СрокОтсрочки");
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПроцентАвансаСрокОтсрочкиУстановкаКлассовКонтрагентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УсловияОплаты.Ссылка КАК Ссылка,
	|	УсловияОплаты.ПроцентАванса КАК ПроцентАванса,
	|	УсловияОплаты.СрокОтсрочкиПриведенный КАК СрокОтсрочкиПриведенный
	|ИЗ
	|	Справочник.УсловияОплаты КАК УсловияОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УстановкаКлассовКонтрагентовОценки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УстановкаКлассовКонтрагентов.Оценки КАК УстановкаКлассовКонтрагентовОценки
	|ГДЕ
	|	УстановкаКлассовКонтрагентовОценки.УдалитьУсловиеОплаты <> ЗНАЧЕНИЕ(Справочник.УсловияОплаты.ПустаяСсылка)
	|	И УстановкаКлассовКонтрагентовОценки.ПроцентАванса = 0
	|	И УстановкаКлассовКонтрагентовОценки.СрокОтсрочки = 0";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	КэшУсловийОплаты = Новый Соответствие;
	ВыборкаУсловияОплаты = РезультатыЗапроса[0].Выбрать();
	Пока ВыборкаУсловияОплаты.Следующий() Цикл
		КэшУсловийОплаты.Вставить(ВыборкаУсловияОплаты.Ссылка, 
									Новый Структура("ПроцентАванса,СрокОтсрочки", ВыборкаУсловияОплаты.ПроцентАванса, ВыборкаУсловияОплаты.СрокОтсрочкиПриведенный));
	КонецЦикла;
	
	ВыборкаДокументы = РезультатыЗапроса[1].Выбрать();
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			// Логика блокировки и обработки данных
			
			ДокОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
			
			Для Каждого Строка Из ДокОбъект.Оценки Цикл
				Если ЗначениеЗаполнено(Строка.УдалитьУсловиеОплаты) И Строка.ПроцентАванса = 0 И Строка.СрокОтсрочки = 0 Тогда
					ДанныеКэша = КэшУсловийОплаты.Получить(Строка.УдалитьУсловиеОплаты);
					Если ДанныеКэша <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(Строка, ДанныеКэша);
					КонецЕсли;
					Если Строка.УдалитьУсловиеОплатыВручную Тогда
						Строка.ПроцентАвансаВручную = Истина;
						Строка.СрокОтсрочкиВручную = Истина;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
			
			НаборЗаписей = РегистрыСведений.КлассыКонтрагентов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить( ВыборкаДокументы.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если ЗначениеЗаполнено(Запись.УдалитьУсловиеОплаты) И Запись.ПроцентАванса = 0 И Запись.СрокОтсрочки = 0 Тогда
					ДанныеКэша = КэшУсловийОплаты.Получить(Запись.УдалитьУсловиеОплаты);
					Если ДанныеКэша <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(Запись, ДанныеКэша);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьСоглашенияДляДоговоров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК Ссылка,
		|	ВерсияСоглашенияКоммерческийДоговор.ВидДоговораУХ В (&ВидыДоговоровСПоставщиком) КАК ЭтоДоговорСПоставщиком,
		|	ВерсияСоглашенияКоммерческийДоговор.Партнер КАК Партнер,
		|	ВерсияСоглашенияКоммерческийДоговор.УсловиеОплаты КАК УсловиеОплаты,
		|	ВерсияСоглашенияКоммерческийДоговор.ВалютаВзаиморасчетов КАК Валюта
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
		|ГДЕ
		|	ВерсияСоглашенияКоммерческийДоговор.УсловиеОплаты <> ЗНАЧЕНИЕ(Справочник.УсловияОплаты.ПустаяСсылка)
		|	И ВерсияСоглашенияКоммерческийДоговор.Соглашение = НЕОПРЕДЕЛЕНО
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка,
		|	ДоговорыКонтрагентов.ВидДоговораУХ В (&ВидыДоговоровСПоставщиком),
		|	ДоговорыКонтрагентов.Партнер,
		|	ДоговорыКонтрагентов.УсловиеОплаты,
		|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.УсловиеОплаты <> ЗНАЧЕНИЕ(Справочник.УсловияОплаты.ПустаяСсылка)
		|	И ДоговорыКонтрагентов.Соглашение В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.СоглашенияСПоставщиками.ПустаяСсылка))
		|ИТОГИ
		|	Количество(Ссылка)
		|ПО
		|	Валюта,
		|	ЭтоДоговорСПоставщиком,
		|	Партнер,
		|	УсловиеОплаты";
		
	ВидыДоговоровСПоставщиком = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ВидыДоговоровСПоставщиком();
	Запрос.УстановитьПараметр("ВидыДоговоровСПоставщиком", ВидыДоговоровСПоставщиком);
	Результат = Запрос.Выполнить();
	ВыборкаВалюта = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВалюта.Следующий() Цикл
		ВыборкаЭтоДоговорСПоставщиком = ВыборкаВалюта.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЭтоДоговорСПоставщиком.Следующий() Цикл
			ВыборкаПартнер = ВыборкаЭтоДоговорСПоставщиком.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПартнер.Следующий() Цикл
				ВыборкаУсловиеОплаты = ВыборкаПартнер.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаУсловиеОплаты.Следующий() Цикл
					Соглашение = СоздатьСоглашение(ВыборкаУсловиеОплаты.ЭтоДоговорСПоставщиком, 
					ВыборкаУсловиеОплаты.Партнер, 
					ВыборкаУсловиеОплаты.УсловиеОплаты,
					ВыборкаУсловиеОплаты.Валюта);
					ВыборкаОбъекты = ВыборкаУсловиеОплаты.Выбрать();
					Пока ВыборкаОбъекты.Следующий() Цикл
						Объект = ВыборкаОбъекты.Ссылка.ПолучитьОбъект();
						Объект.Соглашение = Соглашение;
						ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьКонстантыИспользоватьДоговоры() Экспорт
	
	Константы.ИспользоватьДоговорыСКлиентами.Установить(Истина);
	Константы.ИспользоватьДоговорыСПоставщиками.Установить(Истина);
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьЗаполнениеРаздела7ДекларацииПоНДС() Экспорт
	
	Константы.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС.Установить(Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыОперацийДокументовАренды() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ТабДокумент.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ТабДокумент.Договор.ВидДоговораУХ.ГруппаОперацийГрафика, НЕОПРЕДЕЛЕНО) КАК ГруппаОперацийГрафика
	|ИЗ
	|	Документ.ЗаключениеДоговораАренды КАК ТабДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаключениеДоговораАренды.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ТабДокумент.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабДокумент.Ссылка,
	|	ЕСТЬNULL(ТабДокумент.Договор.ВидДоговораУХ.ГруппаОперацийГрафика, НЕОПРЕДЕЛЕНО)
	|ИЗ
	|	Документ.ИзменениеУсловийДоговораАренды КАК ТабДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ИзменениеУсловийДоговораАренды.ПараметрыОпераций КАК ТабПараметрыОпераций
	|		ПО ТабДокумент.Ссылка = ТабПараметрыОпераций.Ссылка
	|ГДЕ
	|	ТабПараметрыОпераций.ОперацияГрафика ЕСТЬ NULL"
	);
	
	СоответствиеОпераций = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.ГруппаОперацийГрафика) Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ТаблицаПараметров = СоответствиеОпераций[Выборка.ГруппаОперацийГрафика];
		Если ТаблицаПараметров = Неопределено Тогда
			ТаблицаПараметров = РаботаСДоговорамиКонтрагентовУХ.ПараметрыОперацийГрафикаПоУмолчанию(Выборка.ГруппаОперацийГрафика);
			СоответствиеОпераций.Вставить(Выборка.ГруппаОперацийГрафика, ТаблицаПараметров);
		КонецЕсли;
		
		ДокументОбъект.ПараметрыОпераций.Загрузить(ТаблицаПараметров);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьИсточникДанныхКалендаряРезервыНеутвержденные() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторЗаписи КАК ИдентификаторЗаписи
	|ИЗ
	|	РегистрСведений.ПредставлениеПлатежногоКалендаря КАК ПредставлениеПлатежногоКалендаря
	|ГДЕ
	|	ПредставлениеПлатежногоКалендаря.ИсточникДанных = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхПлатежногоКалендаря.УдалитьРезервНеутвержденныйПлан)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьНаборЗаписей();
		НЗ.Отбор.ИдентификаторЗаписи = Выборка.ИдентификаторЗаписи;
		НЗ.Прочитать();
		Для Каждого ТекЗапись Из НЗ Цикл
			ТекЗапись.ИдентификаторЗаписи = Перечисления.ИсточникиДанныхПлатежногоКалендаря.РезервУтвержденный;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗ);
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДоговорКонтрагентаПолучательВЗНО() 
	
	//
	ПустыеЗначенияДоговор = Новый Массив;
	ПустыеЗначенияДоговор.Добавить(неопределено);
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.Договор.Тип.Типы() Цикл
		ПустыеЗначенияДоговор.Добавить(Новый (Тип));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПустыхЗначений", ПустыеЗначенияДоговор);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка,
	|	ЗаявкаНаРасходованиеДенежныхСредств.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаявкаНаРасходованиеДенежныхСредств.ДоговорКонтрагентаПолучатель КАК ДоговорКонтрагентаПолучатель,
	|	СвязанныеДоговоры.СвязанныйДоговор КАК СвязанныйДоговор
	|ИЗ
	|	РегистрСведений.СвязанныеДоговоры КАК СвязанныеДоговоры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|		ПО СвязанныеДоговоры.БазовыйДоговор = ЗаявкаНаРасходованиеДенежныхСредств.ДоговорКонтрагента
	|			И (СвязанныеДоговоры.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ВнутригрупповойДоговор))
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.ДоговорКонтрагентаПолучатель В(&СписокПустыхЗначений)";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ДоговорКонтрагентаПолучатель = Выборка.СвязанныйДоговор;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДоговорКонтрагентаВРазмещенииЗаявок()
	
	//
	ПустыеЗначенияДоговор = Новый Массив;
	ПустыеЗначенияДоговор.Добавить(неопределено);
	Для Каждого Тип Из Метаданные.ОпределяемыеТипы.Договор.Тип.Типы() Цикл
		ПустыеЗначенияДоговор.Добавить(Новый (Тип));
	КонецЦикла;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокПустыхЗначений", ПустыеЗначенияДоговор);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Запрос.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	Запрос.ПриходРасход КАК ПриходРасход,
	|	Запрос.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	Запрос.ДоговорКонтрагентаКУстановке КАК ДоговорКонтрагентаКУстановке
	|ИЗ
	|	(ВЫБРАТЬ
	|		РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|		РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|		РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|		РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКонтрагента КАК ДоговорКонтрагентаКУстановке
	|	ИЗ
	|		РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|	ГДЕ
	|		РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|		И РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|		И РазмещениеЗаявок.ДоговорКонтрагента В(&СписокПустыхЗначений)
	|		И НЕ ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКонтрагента В (&СписокПустыхЗначений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеЗаявок.ЗаявкаНаОперацию,
	|		РазмещениеЗаявок.ПриходРасход,
	|		РазмещениеЗаявок.ИдентификаторПозиции,
	|		РазмещениеЗаявок.ДоговорКонтрагента,
	|		ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКонтрагентаПолучатель
	|	ИЗ
	|		РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|	ГДЕ
	|		РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|		И РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|		И РазмещениеЗаявок.ДоговорКонтрагента В(&СписокПустыхЗначений)
	|		И НЕ ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств).ДоговорКонтрагентаПолучатель В (&СписокПустыхЗначений)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РазмещениеЗаявок.ЗаявкаНаОперацию,
	|		РазмещениеЗаявок.ПриходРасход,
	|		РазмещениеЗаявок.ИдентификаторПозиции,
	|		РазмещениеЗаявок.ДоговорКонтрагента,
	|		ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ОжидаемоеПоступлениеДенежныхСредств).ДоговорКонтрагента
	|	ИЗ
	|		РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|	ГДЕ
	|		РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств
	|		И РазмещениеЗаявок.ДоговорКонтрагента В(&СписокПустыхЗначений)
	|		И НЕ ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ОжидаемоеПоступлениеДенежныхСредств).ДоговорКонтрагента В (&СписокПустыхЗначений)) КАК Запрос";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(Выборка.ЗаявкаНаОперацию);
		НаборЗаписей.Отбор.ПриходРасход.Установить(Выборка.ПриходРасход);
		НаборЗаписей.Отбор.ИдентификаторПозиции.Установить(Выборка.ИдентификаторПозиции);
		
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДоговорКонтрагента = Выборка.ДоговорКонтрагентаКУстановке;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЭлементыСтруктурыЗадолженностиПоСтатьям()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиФинансовыхИнструментов.Операция.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	НастройкиФинансовыхИнструментов.СтатьяБюджета КАК СтатьяБюджета,
	|	НастройкиФинансовыхИнструментов.Операция.НаправлениеДвижения КАК НаправлениеДвижения,
	|	НастройкиФинансовыхИнструментов.Операция.Родитель КАК ГруппаОпераций
	|ИЗ
	|	РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|ГДЕ
	|	НастройкиФинансовыхИнструментов.Операция.ВидБюджета = &ВидБюджета"
	);
	Запрос.УстановитьПараметр("ВидБюджета", ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ДоговорСтрокиРасшифровки(Строка, Объект, МассивРеквизитовОперации)
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ОбъектРасчетов") <> Неопределено
		И ЗначениеЗаполнено(Строка.ОбъектРасчетов) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.ОбъектРасчетов, "Договор");
	КонецЕсли;
		
	Если МассивРеквизитовОперации.Найти("Договор") <> Неопределено Тогда
		Возврат Объект.Договор;
	ИначеЕсли МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
		Возврат Строка.ДоговорКредитаДепозита;
	ИначеЕсли МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорАренды") <> Неопределено Тогда
		Возврат Строка.ДоговорАренды;
	КонецЕсли;

	Возврат Неопределено;
	  
КонецФункции

Функция ГрафикДДСВерсииСоглашения(ВерсияСоглашения)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	&ТаблицаГрафика КАК ГрафикРасчетов
	|ГДЕ
	|	ГрафикРасчетов.Ссылка = &Ссылка
	|   И ГрафикРасчетов.ВидБюджета = &ВидБюджета"
	);
	Запрос.УстановитьПараметр("Ссылка", ВерсияСоглашения);
	Запрос.УстановитьПараметр("ВидБюджета", ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств);
	
	ИмяТаблицы = ВерсияСоглашения.Метаданные().ПолноеИмя() + ".ГрафикРасчетов";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаГрафика", ИмяТаблицы);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция СоздатьСоглашение(ЭтоДоговорСпоставщиком, Партнер, УсловиеОплаты, Валюта)
	
	Если ЭтоДоговорСПоставщиком Тогда
		Менеджер = Справочники.СоглашенияСПоставщиками;
		ХозОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		Статус = Перечисления.СтатусыСоглашенийСПоставщиками.Действует;
	Иначе
		Менеджер = Справочники.СоглашенияСКлиентами ;
		Статус = Перечисления.СтатусыСоглашенийСКлиентами.Действует;
		ХозОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
	КонецЕсли;
	
	СоглашениеОбъект = Менеджер.СоздатьЭлемент();
	
	СоглашениеОбъект.Партнер = Партнер;
	СоглашениеОбъект.Валюта = Валюта;
	СоглашениеОбъект.Статус = Статус;
	СоглашениеОбъект.ХозяйственнаяОперация = ХозОперация;
	СоглашениеОбъект.ИспользуютсяДоговорыКонтрагентов = Истина;
	
	СоглашениеОбъект.Наименование = УсловиеОплаты.Наименование;
	
	
	РасчетПоРабочимДням = Ложь;
	
	Для Каждого ЭтапОплаты Из УсловиеОплаты.ЭтапыОплаты Цикл
		
		НовыйЭтапОплаты = СоглашениеОбъект.ЭтапыГрафикаОплаты.Добавить();
		Если ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплаты.Аванс И ЭтоДоговорСпоставщиком Тогда
			НовыйЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления;
		ИначеЕсли ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплаты.Постоплата И ЭтоДоговорСпоставщиком Тогда
			НовыйЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплатыПоставщику.КредитСдвиг;
		ИначеЕсли ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплаты.Аванс И Не ЭтоДоговорСпоставщиком Тогда
			НовыйЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки;
		ИначеЕсли ЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплаты.Постоплата И Не ЭтоДоговорСпоставщиком Тогда
			НовыйЭтапОплаты.ВариантОплаты = Перечисления.ВариантыОплатыКлиентом.КредитСдвиг;
		КонецЕсли;
		
		НовыйЭтапОплаты.Сдвиг			= ЭтапОплаты.Срок;
		НовыйЭтапОплаты.ПроцентПлатежа	= ЭтапОплаты.ПроцентОплаты;
		
		Если ЭтапОплаты.ТипСрока = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоРабочимДням Тогда
			РасчетПоРабочимДням = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если РасчетПоРабочимДням Тогда
		СоглашениеОбъект.Календарь = Константы.ПроизводственныйКалендарьПоУмолчанию.Получить();
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СоглашениеОбъект);
	
	Возврат СоглашениеОбъект.Ссылка;
	
КонецФункции

#КонецОбласти
