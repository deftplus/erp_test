
#Область ОбработкаСобытийДляРасчетаРасхождений

// Подготовка для работы с расхождениями:
//	 1. Проверяем, что запущено фоновое задание по расчету расхождений
//	 2. Если запущено, то ждем завершения.
//	 3. Запускаем повторный расчет (могут появиться новые данные, после запуска фонового задания п. 2) и ждем завершения.
// Параметры:
//	ОтборДанных - струкутра с параметрами отбора (Сценарий, ПериодСверки, Этап, Организации, Дебитор, Кредитор).
//	ТекстОшибки - если возникает ошибка, то к значению переменной дописывается описание ошибки.
//	ОжидатьЗавершения - ждать завершения фонового задания.
//
Функция УбедитьсяЧтоРасхожденияРасчитаны(Знач ОтборДанных=Неопределено, ТекстОшибки=Неопределено, ОжидатьЗавершения=Истина, флОтладка=Ложь) Экспорт
	Возврат СверкаВГОУХ.УбедитьсяЧтоРасхожденияРасчитаны(ОтборДанных, ТекстОшибки, ОжидатьЗавершения, флОтладка);
КонецФункции

#КонецОбласти

#Область ФункцииДляОтчетов

// Возвращает соотвествие с описанием аналитик расхождения ВГО для указанной расшифровки СКД.
Функция ПолучитьПоляРасшифровки(Знач ПользовательскиеНастройки, Знач ДанныеРасшифровки, Знач Расшифровка) Экспорт
	Возврат СверкаВГОУХ.ПолучитьПоляРасшифровки(ПользовательскиеНастройки, ДанныеРасшифровки, Расшифровка);
КонецФункции

Функция ВыполненитьДействиеПорталаВГО(ВыполненноеДействие, Отбор) Экспорт

	ПериодРегистрации = ТекущаяДата();
	
	Если СтрЗаканчиваетсяНа(ВыполненноеДействие, "ОткрытьСпор") Тогда
		
		мз = РегистрыСведений.ИнформацияСверкиВГО.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз, Отбор);
		ЗаполнитьЗапись(мз, Отбор, ПериодРегистрации);
		мз.Состояние = ПредопределенноеЗначение("Перечисление.СостояниеСверкиВГО.Спор");
		мз.Записать();
		
		Возврат Истина;
			
	ИначеЕсли СтрЗаканчиваетсяНа(ВыполненноеДействие, "ПодтвердитьСумму") Тогда
		
		мз = РегистрыСведений.ИнформацияСверкиВГО.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз, Отбор);
		ЗаполнитьЗапись(мз, Отбор, ПериодРегистрации);
		мз.Состояние = ПредопределенноеЗначение("Перечисление.СостояниеСверкиВГО.Согласован");		
		мз.Записать();
		
		Возврат Истина;
		
	КонецЕсли;	

КонецФункции

Процедура ЗаполнитьЗапись(Запись, Отбор, ПериодРегистрации = Неопределено)

	Запись.ПериодСценария 	= Отбор.ПериодСценария;
	Запись.Сценарий 		= Отбор.Сценарий;
	Запись.Отправитель 		= Отбор.Организация;
	Запись.Получатель 		= Отбор.Контрагент;
	Запись.РазделВГО		= Отбор.РазделВГО;
	
	Если ЗначениеЗаполнено(ПериодРегистрации) Тогда
		Запись.Период = ПериодРегистрации;		
	КонецЕсли;
		
КонецПроцедуры

Функция ЗаписатьОтветственного(Организация, Роль, Ответственный) Экспорт
	Если ТипЗнч(Ответственный) = Тип("Массив") Тогда
		Для каждого Элемент Из Ответственный Цикл
			РегистрыСведений.ОтветственныеОрганизаций.ЗаписатьОтветственного(Организация, Роль, Элемент);
		КонецЦикла;
	Иначе 
		РегистрыСведений.ОтветственныеОрганизаций.ЗаписатьОтветственного(Организация, Роль, Ответственный);
	КонецЕсли;

КонецФункции

Функция УдалитьОтветственных(Организация, Роль) Экспорт

	РегистрыСведений.ОтветственныеОрганизаций
		.УдалитьОтветственных(Организация, Роль);

КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Получить список организаций участвующих в сверке
Функция ОрганизацииУчаствующиеВСверке(ПериодСценария, Сценарий, Пользователь=Неопределено) Экспорт
	Возврат СверкаВГОУХ.ОрганизацииУчаствующиеВСверке(ПериодСценария, Сценарий, Пользователь);
КонецФункции // ОрганизацииУчаствующиеВСверке()

// Проверяем возможность выбора шаблона сверки ВГО для использования в версии регламента
// подготовки отчетности.
// Параметры:
//		ШаблонСверкиВГО - ссылка на элемент справочника "ШаблоныСверкиВГО".
// Возвращаем:
//		Истина - шаблон еще не использован и может быть выбран.
//		Ложь - шаблон нельзя использовать, т.к. он уже участвовал в другой сверке.
//
Функция МожноИспользоватьШаблонСверки(ШаблонСверки) Экспорт
	Возврат Справочники.ШаблоныСверкиВГО.МожноРедактироватьОбъект(ШаблонСверки);
КонецФункции

// Возвращает структуру заполненную счетами
Функция НайтиСчетаНаСервере(Знач Текст, Знач ПланСчетов) Экспорт
	Возврат СверкаВГОУХ.НайтиСчетаНаСервере(Текст, ПланСчетов);
КонецФункции

Функция ЭтоДопАналитикаСверки(ТипДляЭлиминации) Экспорт
	Возврат Справочники.ГруппыАналитикСверкиВГО.ЭтоДопАналитикаСверки(ТипДляЭлиминации);
КонецФункции

// Представляет любое значение в строку для отображения пользователю, либо записи в лог в наглядном для человека представлении.
Функция ЗначениеВСтроку(Знач Значение, Знач Отступ = "") Экспорт
	Возврат СверкаВГОУХ.ЗначениеВСтроку(Значение, Отступ);
КонецФункции

#КонецОбласти
