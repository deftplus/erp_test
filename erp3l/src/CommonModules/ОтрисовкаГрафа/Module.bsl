
#Область ПрограммныйИнтерфейс

Функция ПолучитьГрафическуюСхемуГрафа(ТаблицаСвязи, ТаблицаУзлы = Неопределено, УсловноеОформлениеУзлов = Неопределено, Масштаб = 1) Экспорт

	ГрафическаяСхема = Новый ГрафическаяСхема;
	ГрафическаяСхема.ИспользоватьСетку = Ложь;
	
	УзлыНаГрафе = Новый Соответствие;	
	СтруктураГрафическойСхемы = ПолучитьСтруктуруНеПустойГрафическойСхемы(ГрафическаяСхема);
	Для Каждого Узел Из ТаблицаУзлы Цикл		
		
		Нечетное = Цел(Узел.Строка / 2) * 2 <> Узел.Строка;
		
		ДекорацияСхемы = ДобавитьДекорацию(СтруктураГрафическойСхемы, Узел.Представление, 
										25 + Цел((Узел.Колонка - 1) * 160 * Масштаб) ,
										20 + Цел(Масштаб * Узел.ВерхСтроки), 
										Цел(120 * Масштаб), Цел(60 * Масштаб), ,
										ПолучитьИмяЭлементаСхемы(Узел.Узел),, 
										2, 
										Узел.Оформление);
										
		ДекорацияСхемы.Вставить("НомерСтроки", Узел.Строка);
		ДекорацияСхемы.Вставить("НомерКолонки", Узел.Колонка);
										
		УзлыНаГрафе.Вставить(Узел.Узел, ДекорацияСхемы);
		
	КонецЦикла;
	
	НомерСвязи = 1;
	КэшЛиний = Новый Структура;	
	Для Каждого Связь Из ТаблицаСвязи Цикл
		
		УзелИсточник = УзлыНаГрафе.Получить(Связь.Источник);
		УзелПриемник = УзлыНаГрафе.Получить(Связь.Приемник);
		
		КоординатыЛинии = ОпределитьКоординатыЛинии(УзелИсточник, УзелПриемник, "Вниз");
		
		СтруктураЛинии  = ДобавитьЛинию(СтруктураГрафическойСхемы, Связь.Представление, 
													Строка(Связь.Источник) + "->" + Связь.Приемник, 
													УзелИсточник.СтруктураИмени.Номер, 
													УзелПриемник.СтруктураИмени.Номер, 
													КоординатыЛинии.НачалоСторона, КоординатыЛинии.КонецСторона, , , 
													Истина, Истина, ПолучитьЗначениеОформления(Связь.Оформление, "ЦветЛинии"),
													ПолучитьИдентификаторЛинии(Связь.Приемник, Связь.Источник, КэшЛиний), 
													2
												);
	
		ПровестиЛиниюМеждуТочками(СтруктураЛинии, 
								КоординатыЛинии.НачалоЛево, 
								КоординатыЛинии.НачалоВерх, 
								КоординатыЛинии.КонецЛево,
								КоординатыЛинии.КонецВерх,
								Связь.ОтступИзгиба,
								УзелИсточник,
								УзелПриемник
							);
		
	КонецЦикла;
	
	ОтобразитьГрафическуюСхему(СтруктураГрафическойСхемы, ГрафическаяСхема);
		
	ОформитьКартинкуУзлов(ГрафическаяСхема, ТаблицаУзлы, УзлыНаГрафе);

	Возврат ГрафическаяСхема;

КонецФункции

Функция ПолучитьИдентификаторЛинии(Приемник, Источник, КэшЛиний)
	
	ТекстИсточник = "Источник" + КэшЛиний.Количество();
	Если Метаданные.НайтиПоТипу(ТипЗнч(Источник)) <> Неопределено Тогда
		ТекстИсточник = СтрЗаменить(Строка(Источник.УникальныйИдентификатор()), "-", "_");
	КонецЕсли;
	
	ТекстПриемник = "Приемник" + КэшЛиний.Количество();
	Если Метаданные.НайтиПоТипу(ТипЗнч(Приемник)) <> Неопределено Тогда
		ТекстПриемник = СтрЗаменить(Строка(Приемник.УникальныйИдентификатор()), "-", "_");
	КонецЕсли;
	
	Возврат СтрШаблон("__%1__%2", ТекстИсточник, ТекстПриемник); 

КонецФункции

Функция ПолучитьДанныеЛинии(ИдентификаторЛинии) Экспорт

	Результат = Новый Массив;
	Мас = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИдентификаторЛинии, "__", Истина, Истина);	
	Для каждого Элемент Из Мас Цикл		
		
		Попытка
			ГУИД = Новый УникальныйИдентификатор(СтрЗаменить(Элемент, "_", "-"));	
		Исключение
			ГУИД = Элемент;
		КонецПопытки;
		
		Результат.Добавить(ГУИД);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ОформитьКартинкуУзлов(ГрафическаяСхема, ТаблицаУзлы, УзлыНаГрафе)
	
	Для каждого ТекущийУзел Из ТаблицаУзлы Цикл
		
		Если ТекущийУзел.Оформление = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		КартинкаУзла = ТекущийУзел.Оформление.Картинка;
		
		Если Не ЗначениеЗаполнено(КартинкаУзла) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексНаСхеме = УзлыНаГрафе.Получить(ТекущийУзел.Узел).СтруктураИмени.Номер - 1;
		
		ЭлементСхемы = ГрафическаяСхема.ЭлементыГрафическойСхемы.Получить(ИндексНаСхеме);
		ЭлементСхемы.Картинка = КартинкаУзла;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ОтрисовкаГрафическойСхемы

Функция ПрименитьУсловноеОформление(Узел, УсловноеОформлениеГрафа, Цвета)

	Если УсловноеОформлениеГрафа = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого ЭлементОформления Из УсловноеОформлениеГрафа Цикл
	
		Попытка
		    Результат = Вычислить(ЭлементОформления.Ключ);	
		Исключение
			Продолжить;
		КонецПопытки;
		
		Если Результат <> Истина Тогда
			Продолжить;
		КонецЕсли;
		
		Цвета = ЭлементОформления.Значение;
		Прервать;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьЗначениеОформления(Оформление, ИмяЭлемента)

	Перем Результат;
	
	Если Оформление = Неопределено Или Не Оформление.Свойство(ИмяЭлемента, Результат) Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьИмяЭлементаСхемы(Ссылка)
		
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		Возврат "_" + ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Ссылка, Истина, Ложь, Истина);
	Иначе	
		Возврат "_" + СтрЗаменить(Строка(Ссылка.УникальныйИдентификатор()), "-", "_");
	КонецЕсли;
	
КонецФункции

#Область Обработка

Функция ОпределитьКоординатыЛинии(ТекущийЭлемент, Координаты, Направление) 

	КонтекстКоординат = Новый Структура;
	
	Если Направление = "Вправо" Тогда
		
		КонтекстКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево + ТекущийЭлемент.Ширина);
		КонтекстКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх + Окр(ТекущийЭлемент.Высота / 2));
		КонтекстКоординат.Вставить("КонецЛево", Координаты.Лево);
		КонтекстКоординат.Вставить("КонецВерх", Координаты.Верх + Окр(Координаты.Высота / 2));
		КонтекстКоординат.Вставить("НачалоСторона", 3);
		КонтекстКоординат.Вставить("КонецСторона", 1);
		
	ИначеЕсли Направление = "Вниз" Тогда	
		
		КонтекстКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево + Окр(ТекущийЭлемент.Ширина / 2));
		КонтекстКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх + ТекущийЭлемент.Высота);
		КонтекстКоординат.Вставить("КонецЛево", Координаты.Лево + Окр(Координаты.Ширина / 2));
		КонтекстКоординат.Вставить("КонецВерх", Координаты.Верх);
		КонтекстКоординат.Вставить("НачалоСторона", 4);
		КонтекстКоординат.Вставить("КонецСторона", 2);
		
	ИначеЕсли Направление = "Вверх" Тогда
		
		КонтекстКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево + Окр(ТекущийЭлемент.Ширина / 2));
		КонтекстКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх);
		КонтекстКоординат.Вставить("КонецЛево", Координаты.Лево + Окр(Координаты.Ширина / 2));
		КонтекстКоординат.Вставить("КонецВерх", Координаты.Верх + Координаты.Высота);
		КонтекстКоординат.Вставить("НачалоСторона", 2);
		КонтекстКоординат.Вставить("КонецСторона", 4);
		
	ИначеЕсли Направление = "Влево" Тогда
		
		КонтекстКоординат.Вставить("НачалоЛево", ТекущийЭлемент.Лево);
		КонтекстКоординат.Вставить("НачалоВерх", ТекущийЭлемент.Верх + Окр(ТекущийЭлемент.Высота / 2));
		КонтекстКоординат.Вставить("КонецЛево", Координаты.Лево + Координаты.Ширина);
		КонтекстКоординат.Вставить("КонецВерх", Координаты.Верх + Окр(Координаты.Высота / 2));
		КонтекстКоординат.Вставить("НачалоСторона", 1);
		КонтекстКоординат.Вставить("КонецСторона", 3);
		
	КонецЕсли;	

	Возврат КонтекстКоординат;
	
КонецФункции 
 
Процедура ПровестиЛиниюМеждуТочками(КонтекстЛинии, НачалоЛево, НачалоВерх, КонецЛево, КонецВерх, 
					ОтступИзгиба = Неопределено, УзелИсточник = Неопределено, УзелПриемник = Неопределено) 
			
	ШиринаУзла = 120;	
	ОтступОбхода = 10;
	ВысотаМеждуУзлами = 35;
	КоличествоЭлементовСтроки = 20;
	
	ОтступИзгиба = Цел(ВысотаМеждуУзлами + УзелИсточник.НомерКолонки * ВысотаМеждуУзлами / КоличествоЭлементовСтроки);
	//вниз-всторону-вверху-всторону-вниз 	
	
	Если УзелИсточник.УИД = УзелПриемник.УИД Тогда	
		Лево2 = КонецЛево - ШиринаУзла/2 - ОтступОбхода;
		ОтступИзгиба = ОтступОбхода;
	ИначеЕсли (УзелПриемник.НомерКолонки = УзелИсточник.НомерКолонки) И (УзелПриемник.НомерСтроки = УзелИсточник.НомерСтроки + 1) Тогда
		Лево2 = КонецЛево;		
	ИначеЕсли УзелПриемник.НомерКолонки < УзелИсточник.НомерКолонки Тогда
		Лево2 = КонецЛево + ШиринаУзла/2 + ОтступОбхода;
	Иначе 
		Лево2 = КонецЛево - ШиринаУзла/2 - ОтступОбхода;
	КонецЕсли;
	
	Высота1 = НачалоВерх + ОтступИзгиба;
	Высота3 = КонецВерх - ОтступИзгиба;
	
	КонтекстЛинии.Точки.Добавить(Новый Структура("Лево, Верх", 	НачалоЛево, НачалоВерх));
	КонтекстЛинии.Точки.Добавить(Новый Структура("Лево, Верх", 	НачалоЛево, Высота1));
	КонтекстЛинии.Точки.Добавить(Новый Структура("Лево, Верх", 	Лево2, 		Высота1));
	КонтекстЛинии.Точки.Добавить(Новый Структура("Лево, Верх", 	Лево2, 		Высота3));
	КонтекстЛинии.Точки.Добавить(Новый Структура("Лево, Верх", 	КонецЛево, 	Высота3));
	КонтекстЛинии.Точки.Добавить(Новый Структура("Лево, Верх", 	КонецЛево,	КонецВерх));
	
КонецПроцедуры

Функция ОтобразитьГрафическуюСхему(КонтекстСхемы, ПолеФормы)
	
	ТекущееИмяФайла = ПолучитьИмяВременногоФайла("grs"); 
	СохранитьГрафическуюСхему(КонтекстСхемы, ТекущееИмяФайла);
	
	Попытка	
		ПолеФормы.Прочитать(ТекущееИмяФайла); 
	Исключение 
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Отрисовка графа: Не удалось прочитать сохраненную схему из файла: " + ТекущееИмяФайла + " по причине: " + ОписаниеОшибки()); 
	КонецПопытки; 
	
КонецФункции 

Функция ПолучитьСтруктуруНеПустойГрафическойСхемы(СхемаИсточник)
		
	КонтекстДекораций = Новый Соответствие;
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.Нет,                  0);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.Файл,                 1);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.Папка,                2);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СтрелкаВправо,        3);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СтрелкаВлево,         4);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СтрелкаВверх,         5);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СтрелкаВниз,          6);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СтрелкаВлевоВправо,   7);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СтрелкаВверхВниз,     8);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СкобкиВертикальные,   9);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.Документ,				10);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.Блок, 				11);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.СкобкиГоризонтальные, 12);
	КонтекстДекораций.Вставить(ФигурыГрафическойСхемы.Эллипс,               13);

	СтруктураСхемы = ПолучитьКонтекстСхемы(СхемаИсточник.ГоризонтальныйШагСетки, СхемаИсточник.ВертикальныйШагСетки, СхемаИсточник.ИспользоватьСетку);
	
	Возврат СтруктураСхемы;

КонецФункции

Функция ДобавитьДекорацию(СтруктураСхемы, Наименование = "", Лево = 100, Верх = 100, Ширина = 150, Высота = 50, Подсказка = "", Идентификатор = Неопределено, Фигура = 11, ТолщинаЛинии = 1, Цвета = Неопределено) 

	КонтекстДекорации = ДобавитьЭлементКонтекстаСхемы(СтруктураСхемы, 0, Наименование, Лево, Верх, Ширина, Высота, Подсказка, Идентификатор, ТолщинаЛинии, Цвета);
	КонтекстДекорации.Вставить("Фигура", Фигура);
	
	Возврат КонтекстДекорации;	

КонецФункции

Функция ДобавитьЛинию(КонтекстСхемы, НаименованиеЛинии = "", ПодсказкаЛинии = "", 
						ЭлементИсточник = -1, ЭлементПриемник = -1, ТочкаИсточник = 4, ТочкаПриемник = 2, 
						ТипСтрелкиНачала = 0, ТипСтрелкиКонца = 2, НаименованиеВСерединеЛинии = Ложь, 
						СвободнаяЛиния = Истина, ЦветЛинии = Неопределено, ИдентификаторЛинии = Неопределено, ТолщинаЛинии = 1) Экспорт
	
	КонтекстЛинии = Новый Структура("ТипЭлемента, ЭлементИсточник, ЭлементПриемник, ТочкаИсточник, ТочкаПриемник, ТипСтрелкиНачала, ТипСтрелкиКонца, СвободнаяЛиния", 
												1, ЭлементИсточник, ЭлементПриемник, ТочкаИсточник, ТочкаПриемник, ТипСтрелкиНачала, ТипСтрелкиКонца, СвободнаяЛиния);
												
	КонтекстЛинии.Вставить("Точки", 								Новый Массив);
	КонтекстЛинии.Вставить("РазмещатьНаименованиеВСерединеЛинии", 	НаименованиеВСерединеЛинии);
	КонтекстЛинии.Вставить("СтруктураЛинии", 						ПолучитьКонтекстЛинии(, ТолщинаЛинии));
	КонтекстЛинии.Вставить("СтруктураИмени", 						ПолучитьКонтекстИмени(КонтекстСхемы, ИдентификаторЛинии, НаименованиеЛинии));
	КонтекстЛинии.Вставить("СтруктураОтрисовки", 					ПолучитьКонтекстОтрисовки(ПодсказкаЛинии, , , , ЦветЛинии));
	
	КонтекстСхемы.Элементы.Добавить(КонтекстЛинии);
	
	Возврат КонтекстЛинии;
	
КонецФункции 

Функция СохранитьГрафическуюСхему(КонтекстСхемы, ИмяФайла)
	
	ТекущийДокумент = Новый ТекстовыйДокумент;
	ТекущийДокумент.УстановитьТекст(ПолучитьТекстФайлаГрафическойСхемы(КонтекстСхемы));
	ТекущийДокумент.Записать(ИмяФайла);
	
КонецФункции

Функция ПолучитьКонтекстСхемы(ШагСеткиПоГоризонтали = 20, ШагСеткиПоВертикали = 20, ВыравниватьПоСетке = Истина, ТипСетки = 3)
	
	КонтекстСхемы = Новый Структура("ШагСеткиПоГоризонтали, ШагСеткиПоВертикали, ВыравниватьПоСетке, ТипСетки", 
								ШагСеткиПоГоризонтали, ШагСеткиПоВертикали, ВыравниватьПоСетке, ТипСетки); 
								
	КонтекстСхемы.Вставить("Элементы", 					Новый Массив);	
	КонтекстСхемы.Вставить("ЦветФона", 					ЦветаСтиля.ЦветФонаПоля);    
	КонтекстСхемы.Вставить("НомерПоследнегоЭлемента", 	0);
	
	Возврат КонтекстСхемы;
	
КонецФункции

Функция ПолучитьТекстФайлаГрафическойСхемы(КонтекстСхемы)
	
	КэшЦветов = Новый Соответствие;
	
	ТекстФайла = ПолучитьТекстШапки(КонтекстСхемы, КэшЦветов) + Текстом(КонтекстСхемы.Элементы.Количество()) + ",";
	
	Для Каждого ТекущийЭлемент Из КонтекстСхемы.Элементы Цикл 
		ТекстФайла = ТекстФайла + Текстом(ТекущийЭлемент.ТипЭлемента) + "," + ПолучитьТекстЭлемента(ТекущийЭлемент, КэшЦветов); 
	КонецЦикла;
	
	Возврат ТекстФайла + Текстом(КонтекстСхемы.НомерПоследнегоЭлемента) + "}";
	
КонецФункции

Функция ДобавитьЭлементКонтекстаСхемы(КонтекстСхемы, ТипЭлемента, НаименованиеЭлемента = "", 
				ЛевоЭлемента = 100, ВерхЭлемента = 100, ШиринаЭлемента = 50, ВысотаЭлемента = 50, 
				ПодсказкаЭлемента="", ИдентификаторЭлемента = Неопределено, ТолщинаЛинии = 1, Цвета = Неопределено)
	
	ЭлементКонтекста = Новый Структура("Лево, Верх, Ширина, Высота", 
								ЛевоЭлемента, ВерхЭлемента, ШиринаЭлемента, ВысотаЭлемента);
								
	Если Цвета = Неопределено Тогда
		ЦветФона = Неопределено;
		ЦветРамки = Неопределено;
		ЦветТекста = Неопределено;
	Иначе	
		Цвета.Свойство("ЦветФона", ЦветФона);
		Цвета.Свойство("ЦветРамки", ЦветРамки);
		Цвета.Свойство("ЦветТекста", ЦветТекста);
	КонецЕсли;								
	
	ЭлементКонтекста.Вставить("ТипЭлемента", 		ТипЭлемента);
	ЭлементКонтекста.Вставить("УИД", 				Строка(Новый УникальныйИдентификатор));
	ЭлементКонтекста.Вставить("СтруктураЛинии", 	ПолучитьКонтекстЛинии(, ТолщинаЛинии));
	ЭлементКонтекста.Вставить("СтруктураИмени", 	ПолучитьКонтекстИмени(КонтекстСхемы, ИдентификаторЭлемента, НаименованиеЭлемента));
	ЭлементКонтекста.Вставить("СтруктураОтрисовки",	ПолучитьКонтекстОтрисовки(ПодсказкаЭлемента, , , ЦветФона, ЦветРамки, ЦветТекста));
	
	КонтекстСхемы.Элементы.Добавить(ЭлементКонтекста);
	
	Возврат ЭлементКонтекста;
	
КонецФункции 

Функция ПолучитьКонтекстЛинии(ТипЛинии = 1, ТолщинаЛинии = 1)
	
	Возврат Новый Структура("	ТипЛинии, ТолщинаЛинии", 
								ТипЛинии, ТолщинаЛинии); 
КонецФункции

Функция ПолучитьКонтекстИмени(КонтекстСхемы, ИдентификаторЭлемента = Неопределено, НаименованиеЭлемента = "")
	
	КонтекстСхемы.НомерПоследнегоЭлемента = КонтекстСхемы.НомерПоследнегоЭлемента + 1;
	
	НомерТекстом = ФорматЧисла(КонтекстСхемы.НомерПоследнегоЭлемента);
	
	Возврат 
	Новый Структура("Идентификатор, Наименование, Номер", 
			?(ИдентификаторЭлемента = Неопределено, "Элемент" + НомерТекстом, ИдентификаторЭлемента), 
			Экранировать(НаименованиеЭлемента),			
			НомерТекстом);
	
КонецФункции

Функция ПолучитьКонтекстОтрисовки(ПодсказкаОформления = "", ГоризонтальноеПоложениеОтрисовки = 1, ВертикальноеПоложениеОтрисовки = 1, 
									ЦветФона = Неопределено, ЦветРамки = Неопределено, ЦветТекста = Неопределено, 
									ПоложениеКартинки = 1, ГиперссылкаОтрисовки = 0, Прозрачность = 0, 
									НомерПорядкаОтрисовки = 0, КэшЦветаСтиля = Неопределено)
	
	ОформлениеЭлемента = Новый Структура;
	
	ОформлениеЭлемента.Вставить("ЦветФона", 				?(ЦветФона = Неопределено, WebЦвета.СветлоСерый, ЦветФона));
	ОформлениеЭлемента.Вставить("ЦветРамки", 				?(ЦветРамки = Неопределено, WebЦвета.СеребристоСерый, ЦветРамки));
	ОформлениеЭлемента.Вставить("ЦветТекста", 				?(ЦветТекста = Неопределено, ЦветаСтиля.ЦветТекстаПоля, ЦветТекста));
	ОформлениеЭлемента.Вставить("Подсказка", 				ПодсказкаОформления);
	ОформлениеЭлемента.Вставить("ГоризонтальноеПоложение", 	ГоризонтальноеПоложениеОтрисовки);
	ОформлениеЭлемента.Вставить("ВертикальноеПоложение", 	ВертикальноеПоложениеОтрисовки);
	ОформлениеЭлемента.Вставить("ПоложениеКартинки", 		ПоложениеКартинки);
	ОформлениеЭлемента.Вставить("НомерПорядкаОтрисовки", 	НомерПорядкаОтрисовки);
	ОформлениеЭлемента.Вставить("Гиперссылка", 				ГиперссылкаОтрисовки);
	ОформлениеЭлемента.Вставить("ПрозрачныйФон", 			Прозрачность);
	
	Возврат ОформлениеЭлемента;
	
КонецФункции 

Функция ПолучитьТекстЭлемента(ТекущийЭлемент, КэшЦветов = Неопределено)
	
	Если ТекущийЭлемент.ТипЭлемента = 1 Тогда 
		Возврат ПолучитьТекстЛинии(ТекущийЭлемент, КэшЦветов); 
	КонецЕсли;
	
	Если ТекущийЭлемент.ТипЭлемента = 0 Тогда 
		Возврат ПолучитьТекстДекорации(ТекущийЭлемент, КэшЦветов); 
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Функция ПолучитьТекстШапки(пСтруктураГрафическойСхемы, КэшЦветов = Неопределено)
	
	Возврат 
	"{5,{{1," 
	+ ПолучитьКодЦвета(ЦветаСтиля.ЦветФонаПоля, КэшЦветов) + "," 
	+ Текстом(пСтруктураГрафическойСхемы.ВыравниватьПоСетке) + "," 
	+ Текстом(пСтруктураГрафическойСхемы.ШагСеткиПоГоризонтали) + ","
	+ Текстом(пСтруктураГрафическойСхемы.ШагСеткиПоВертикали) + "," 
	+ Текстом(пСтруктураГрафическойСхемы.ТипСетки) 
	+ ",6,6,{""N"",10},7,{""N"",10},8,{""N"",10},9,{""N"",10},13,{""N"",0},16,{""N"",0}}}," + Символы.ПС;
	
КонецФункции

Функция ПолучитьКодЦвета(Цвет, КэшЦветов = Неопределено)

	Если КэшЦветов <> Неопределено Тогда
		
		Результат = КэшЦветов.Получить(Цвет);
		Если Результат <> Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЦветНачало = "{""#"",9cd510c7-abfc-11d4-9434-004095e12fc7,2,"+ Символы.ПС;
	ЦветКонец = "}" + Символы.ПС + "}";
	
	Результат = СтрЗаменить(СтрЗаменить(ЗначениеВСтрокуВнутр(Цвет), ЦветНачало, ""), ЦветКонец, Символы.ПС + "}") + Символы.ПС;
	Если КэшЦветов <> Неопределено Тогда
		КэшЦветов.Вставить(Цвет, Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТекстДекорации(ТекущийЭлемент, КэшЦветов = Неопределено)  

	Возврат
	СтрШаблон("{%1,2,{{%2,6,%3 %4 %5,0,%6,0,0}}},",
	
	ПолучитьТекстРазделаИмени(ТекущийЭлемент.СтруктураИмени),
	ПолучитьТекстРазделаОтрисовки(ТекущийЭлемент.СтруктураОтрисовки, КэшЦветов),
	ДобавитьТочку(ТекущийЭлемент.Лево, ТекущийЭлемент.Верх),
	ДобавитьТочку(ТекущийЭлемент.Лево + ТекущийЭлемент.Ширина, ТекущийЭлемент.Верх + ТекущийЭлемент.Высота),
	ПолучитьТекстРазделаКартинки(),
	ТекущийЭлемент.Фигура) 
	
	+ Символы.ПС;
	
КонецФункции

Функция ПолучитьТекстРазделаИмени(КонтекстИмени)
	
	Возврат 
	"{4," + КонтекстИмени.Номер + ",{1,"
	+ ?(ПустаяСтрока(КонтекстИмени.Наименование), "0", "1,{""#"",""" + КонтекстИмени.Наименование + """}") + "},"
	+ """" + КонтекстИмени.Идентификатор + """," + КонтекстИмени.Номер + "}";
	
КонецФункции

Функция ПолучитьТекстЛинии(ЭлементЛиния, КэшЦветов = Неопределено)
	
	Возврат 
	"{" 
	+ ПолучитьТекстРазделаИмени(ЭлементЛиния.СтруктураИмени) + ",3," 
	+ Текстом(ЭлементЛиния.ЭлементИсточник) + ",0,"
	+ Текстом(ЭлементЛиния.ЭлементПриемник) + "," 
	+ Текстом(ЭлементЛиния.СвободнаяЛиния)
	+ ",{{" + ПолучитьТекстРазделаОтрисовки(ЭлементЛиния.СтруктураОтрисовки, КэшЦветов) + ",6,"
	+ Текстом(ЭлементЛиния.Точки.Количество()) + "," 
	+ ПолучитьТекстТочек(ЭлементЛиния.Точки)
	+ ПолучитьТекстРазделаЛинии(ЭлементЛиния.СтруктураЛинии) + "," 
	+ Текстом(ЭлементЛиния.РазмещатьНаименованиеВСерединеЛинии) + ","
	+ Текстом(ЭлементЛиния.ТочкаИсточник) + "," 
	+ Текстом(ЭлементЛиния.ТочкаПриемник) + ",0,"
	+ Текстом(ЭлементЛиния.ТипСтрелкиНачала) + "," 
	+ Текстом(ЭлементЛиния.ТипСтрелкиКонца) + "}}}," 
	+ Символы.ПС;
	
КонецФункции

Функция ПолучитьТекстРазделаОтрисовки(КонтекстОтрисовки, КэшЦветов = Неопределено)
	
	Если ТипЗнч(КонтекстОтрисовки) = Тип("Строка") Тогда
	    Возврат КонтекстОтрисовки;
	КонецЕсли;
	
	Возврат 
	"{4," 
	+ ПолучитьКодЦвета(КонтекстОтрисовки.ЦветФона, КэшЦветов)+ ","
	+ ПолучитьКодЦвета(КонтекстОтрисовки.ЦветРамки, КэшЦветов)+ ","
	+ ПолучитьКодЦвета(КонтекстОтрисовки.ЦветТекста, КэшЦветов) + ","
	+ "{6,3,0,1},"
	+ "{1,"+?(ПустаяСтрока(КонтекстОтрисовки.Подсказка), "0", "1,{""#"",""" 
	+ Экранировать(КонтекстОтрисовки.Подсказка) + """}") + "},"
	+ Текстом(КонтекстОтрисовки.ГоризонтальноеПоложение) + "," 
	+ Текстом(КонтекстОтрисовки.ВертикальноеПоложение) + ","
	+ Текстом(КонтекстОтрисовки.ПоложениеКартинки) + "," 
	+ Текстом(КонтекстОтрисовки.НомерПорядкаОтрисовки) + ","
	+ Текстом(КонтекстОтрисовки.Гиперссылка) + "," 
	+ Текстом(КонтекстОтрисовки.ПрозрачныйФон) + ",0}"; 
	
КонецФункции 

Функция ПолучитьТекстРазделаЛинии(КонтекстЛинии)
	
	Возврат 
	"{4,0,{0}," 
	+ Текстом(КонтекстЛинии.ТипЛинии) 
	+ "," 
	+ Текстом(КонтекстЛинии.ТолщинаЛинии) 
	+ ",0,e45c0cd8-a878-4bcb-8e1a-af934481e1cc,0}";
	
КонецФункции

Функция ПолучитьТекстРазделаКартинки()
	
	Возврат "4,{3,0,{0},"""",-1,-1,1,0}";
	
КонецФункции

Функция Текстом(ЗначениеИсточник)
	
	Если ЗначениеИсточник = Неопределено Тогда 
		Возврат "0"; 
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеИсточник) = Тип("Булево") Тогда 
		Возврат ?(ЗначениеИсточник, "1", "0"); 
	КонецЕсли;
	
	Возврат ФорматЧисла(ЗначениеИсточник);
	
КонецФункции

Функция Экранировать(ЗначениеСтрока)
	Возврат СтрЗаменить(ЗначениеСтрока, """", """""");
КонецФункции

Функция ПолучитьТекстТочек(ТочкиЭлемента)
	
	ТекстТочек = "";
	
	Для Каждого ТекущаяТочка Из ТочкиЭлемента Цикл 
		ТекстТочек = ТекстТочек + ДобавитьТочку(ТекущаяТочка.Лево, ТекущаяТочка.Верх); 
	КонецЦикла;
	
	Возврат ТекстТочек;
	
КонецФункции

Функция ДобавитьТочку(ЛевоТочки, ВерхТочки)
	Возврат СтрШаблон("%1,%2,", ФорматЧисла(ЛевоТочки), ФорматЧисла(ВерхТочки));
КонецФункции 

Функция ФорматЧисла(ЗначениеЧисло)
	
	Если ЗначениеЧисло = 0 Тогда
		Возврат "0";
	Иначе
		Возврат Формат(ЗначениеЧисло, "ЧН=0; ЧГ=0");
	КонецЕсли;
	
КонецФункции

Функция ЦветЗаполнен(ТекущийЦвет) Экспорт
	Возврат (ТекущийЦвет.Зеленый <> 0) Или (ТекущийЦвет.Красный <> 0) Или (ТекущийЦвет.Синий <> 0);
КонецФункции

#КонецОбласти

#КонецОбласти