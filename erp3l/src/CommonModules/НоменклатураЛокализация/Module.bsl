#Область СлужебныеПроцедурыИФункции

#Область ВидНоменклатуры

Процедура СвязьОсобенностейУчетаИФО(СвязьОсобенностейУчетаИФО) Экспорт
	
	//++ Локализация
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция, "ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво, "ВестиСведенияДляДекларацийПоАлкогольнойПродукции");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы, "ИспользоватьУчетДрагоценныхМатериалов");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ, "ВестиУчетМаркировкиПродукцииВГИСМ");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ, "ВестиУчетМаркировкиПродукцииВГИСМ");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС, "ВестиУчетПодконтрольныхТоваровВЕТИС");
	СвязьОсобенностейУчетаИФО.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС, "ВестиУчетПодконтрольныхТоваровВЕТИС");
	
	Если ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП") Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВидПродукции КАК ВидПродукции
		|ИЗ
		|	РегистрСведений.НастройкиУчетаМаркируемойПродукцииИСМП
		|ГДЕ
		|	ВестиУчетПродукции";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ОсобенностьУчета = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Выборка.ВидПродукции);
			Если ЗначениеЗаполнено(ОсобенностьУчета) Тогда
				СвязьОсобенностейУчетаИФО.Вставить(ОсобенностьУчета, "ВестиУчетМаркируемойПродукцииИСМП");
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат;

КонецПроцедуры

Процедура ПодсказкаПоОсобенностиУчетаНоменклатуры(ТекстПодсказки, ОсобенностьУчета) Экспорт
	
	//++ Локализация
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Формируются декларации по алкогольной продукции и осуществляется обмен с ЕГАИС информацией по обороту.';
								|en = 'Alcoholic product declarations are generated and turnover information is exchanged with USAIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с %Парам1% информацией по обороту продукции животного происхождения.';
								|en = 'Information is exchanged with %Парам1% on turnover of manufactured products of animal origin.'");
		ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%Парам1%", "ВетИС");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.СодержитДрагоценныеМатериалы Тогда
		ТекстПодсказки = НСтр("ru = 'Статистическая отчетность по содержанию драгоценных материалов.';
								|en = 'Statistical reporting on precious material content.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
		ТекстПодсказки = НСтр("ru = 'Продукция маркируется специальными контрольными идентификационными знаками (%Парам1%) и осуществляется обмен с ГИСМ (информационной системой маркировки товаров) информацией по обороту.';
								|en = 'Goods are marked with special control identification marks (%Парам1%), and turnover information is exchanged with SPMS (State Product Marking System).'");
		ТекстПодсказки = СтрЗаменить(ТекстПодсказки, "%Парам1%", "КиЗ");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда
		ТекстПодсказки = НСтр("ru = 'Контрольные идентификационные знаки (КИЗ), которыми маркируется продукция, учитываемая в ГИСМ (информационной системе маркировки товаров).';
								|en = 'The control identification marks (CIM) with which products recorded in the SPMS (State Goods Marking System) are marked.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МОТП информацией по обороту табачной продукции.';
								|en = 'Information is exchanged on the turnover of tobacco products with IS MTPT.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ОбувнаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту обувной продукции.';
								|en = 'Information exchange with IS MT on shoes products turnover in progress.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту товаров легкой промышленности и одежды.';
								|en = 'Exchanging data on the turnover of light industry goods and clothing with LTIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП по обороту молока и молочной продукции, не подконтрольной ВетИС.';
								|en = 'Осуществляется обмен с ИС МП по обороту молока и молочной продукции, не подконтрольной ВетИС.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ВетИС информацией по обороту молока и молочной продукции.';
								|en = 'Exchanging data on the turnover of milk and milk goods with LTIS and VetIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Шины Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту шин и автопокрышек.';
								|en = 'Exchanging data on the turnover of tires with LTIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту фотоаппаратов и ламп-вспышек.';
								|en = 'Exchanging data on the turnover of cameras and flash lamps with LTIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту велосипедов и велосипедных рам.';
								|en = 'Exchanging data on the turnover of bicycles and bicycle frames with LTIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту кресла-колясок.';
								|en = 'Exchanging data on the turnover of wheelchairs with LTIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Духи Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту духов и туалетной воды.';
								|en = 'Exchanging data on the turnover of perfume and scented water with LTIS.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту альтернативного табака.';
								|en = 'Exchanging information on the alternative tobacco turnover with IS MT.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту упакованной воды.';
								|en = 'Exchanging data on the packaged water turnover with IS MT.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту антисептиков.';
								|en = 'Осуществляется обмен с ИС МП информацией по обороту антисептиков.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.БАДы Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту биологически активных добавок.';
								|en = 'Осуществляется обмен с ИС МП информацией по обороту биологически активных добавок.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП информацией по обороту никотиносодержащей продукции.';
								|en = 'Осуществляется обмен с ИС МП информацией по обороту никотиносодержащей продукции.'");
	ИначеЕсли ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво Тогда
		ТекстПодсказки = НСтр("ru = 'Осуществляется обмен с ИС МП и ЕГАИС информацией по обороту пива.';
								|en = 'Осуществляется обмен с ИС МП и ЕГАИС информацией по обороту пива.'");
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	РеквизитыНастройкиУказанияСерий - Массив из Строка
//
Процедура РеквизитыНастройкиУказанияСерий(РеквизитыНастройкиУказанияСерий) Экспорт
	
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьНомерКИЗГИСМСерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьПроизводителяЕГАИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьСправку2ЕГАИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьПроизводителяВЕТИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьИдентификаторПартииВЕТИССерии");
	РеквизитыНастройкиУказанияСерий.Добавить("ИспользоватьМРЦМОТПСерии");
	
	Возврат;
	
КонецПроцедуры

Процедура ОписаниеИспользованияРеквизитовСерии(ОписанияИспользованияРеквизитовСерии, НастройкиИспользованияСерий = Неопределено, ПараметрыУказанияСерий = Неопределено, ЗначенияПолейСвязи = Неопределено) Экспорт
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ПроизводительЕГАИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьПроизводителяЕГАИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "АлкогольнаяПродукция,Пиво";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%ПроизводительЕГАИС%';
																		|en = '%ПроизводительЕГАИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "Справка2ЕГАИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьСправку2ЕГАИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "АлкогольнаяПродукция,Пиво";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%Справка2ЕГАИС%';
																		|en = '%Справка2ЕГАИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ПроизводительВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьПроизводителяВЕТИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "ПодконтрольнаяПродукцияВЕТИС,МолочнаяПродукцияПодконтрольнаяВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%ПроизводительВЕТИС%';
																		|en = '%ПроизводительВЕТИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ЗаписьСкладскогоЖурналаВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьЗаписьСкладскогоЖурналаВЕТИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "ПодконтрольнаяПродукцияВЕТИС,МолочнаяПродукцияПодконтрольнаяВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%ЗаписьСкладскогоЖурналаВЕТИС%';
																		|en = '%ЗаписьСкладскогоЖурналаВЕТИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "ИдентификаторПартииВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьИдентификаторПартииВЕТИССерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "ПодконтрольнаяПродукцияВЕТИС,МолочнаяПродукцияПодконтрольнаяВЕТИС";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%ИдентификаторПартииВЕТИС%';
																		|en = '%ИдентификаторПартииВЕТИС%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "МаксимальнаяРозничнаяЦенаМОТП";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьМРЦМОТПСерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "ТабачнаяПродукция";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = 'МРЦ %МаксимальнаяРозничнаяЦенаМОТП%';
																		|en = 'MRC %МаксимальнаяРозничнаяЦенаМОТП%'");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.ПроверятьЗаполнение = Ложь;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	ОписаниеИспользованиеРеквизитаСерии = Справочники.ВидыНоменклатуры.ОписаниеИспользованиеРеквизитаСерии();
	ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита = "НомерКиЗГИСМ";
	ОписаниеИспользованиеРеквизитаСерии.ПредставлениеРеквизита
		= Метаданные.Справочники.СерииНоменклатуры.Реквизиты.Найти(ОписаниеИспользованиеРеквизитаСерии.ИмяРеквизита).Представление();
	ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки = "ИспользоватьНомерКИЗГИСМСерии";
	ОписаниеИспользованиеРеквизитаСерии.ОсобенностиУчета = "КиЗГИСМ,ПродукцияМаркируемаяДляГИСМ";
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = НСтр("ru = '%Парам1% %НомерКиЗГИСМ%';
																		|en = '%Парам1% %НомерКиЗГИСМ%'");
	ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования = СтрЗаменить(ОписаниеИспользованиеРеквизитаСерии.ТекстШаблонаНаименования, "%Парам1%", "КиЗ");
	ОписаниеИспользованиеРеквизитаСерии.Использование = НастройкиИспользованияСерий[ОписаниеИспользованиеРеквизитаСерии.ИмяНастройки];
	ОписаниеИспользованиеРеквизитаСерии.ПроверятьУникальностьЗначения = Истина;
	ОписанияИспользованияРеквизитовСерии.Добавить(ОписаниеИспользованиеРеквизитаСерии);
	
	//++ Локализация
	Если ЗначениеЗаполнено(ПараметрыУказанияСерий)
		И НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		
		Для Каждого Описание Из ОписанияИспользованияРеквизитовСерии Цикл
			Если Описание.ИмяРеквизита = "Номер" Тогда
				
				Описание.МожноРедактировать       = Ложь;
				Если ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий) Тогда
					
					Если Не ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Тогда
						Описание.ТекстУсловногоОформления = НСтр("ru = '<генерируются по данным RFID-метки>';
																|en = '<generated according to RFID tag data>'");
					Иначе
						Описание.ТекстУсловногоОформления = НСтр("ru = '<заполняется по данным %Парам1%>';
																|en = '<filled in by %Парам1% data>'");
						Описание.ТекстУсловногоОформления = СтрЗаменить(Описание.ТекстУсловногоОформления, "%Парам1%", "КиЗ");
					КонецЕсли;
					
					Если ИнтеграцияГИСМУТ.ЭтоМаркировкаОстатковГИСМ(ПараметрыУказанияСерий) Тогда
						Описание.ПроверятьЗаполнение = Ложь;
					Иначе
						Описание.ПроверятьЗаполнение = Истина;
					КонецЕсли;
					
				Иначе
					Если ИнтеграцияГИСМУТ.ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара(НастройкиИспользованияСерий,ПараметрыУказанияСерий) Тогда
						Описание.ПроверятьЗаполнение = Истина;
					Иначе
						Описание.ПроверятьЗаполнение = Ложь;
					КонецЕсли;
					
					Описание.ТекстУсловногоОформления = "";
				КонецЕсли;
			ИначеЕсли Описание.ИмяРеквизита = "RFIDEPC" Тогда	
				Если НастройкиИспользованияСерий.ОсобенностьУчета  = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
					Описание.МожноРедактировать = ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий)
													И Не ИнтеграцияГИСМУТ.ЭтоМаркировкаОстатковГИСМ(ПараметрыУказанияСерий)
													И Не ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий,
													ПараметрыУказанияСерий,
													ЗначенияПолейСвязи);
				ИначеЕсли НастройкиИспользованияСерий.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда 
					Описание.МожноРедактировать  = Ложь;
				КонецЕсли;
				
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Дополняет значения реквизитов строго заполняемые по особенностям учета, для локальных особенностей учета
// 
// Параметры:
//   ЗначенияЗаполнения - Соответствие - предопределенные фиксированные настройки НСИ для номенклатуры с особенностями учета
//
Процедура ЗначенияРеквизитовСтрогоЗаполняемыеПоОсобенностямУчета(ЗначенияЗаполнения) Экспорт
	
	//++ Локализация
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара);
	ЗначенияРеквизитов.Вставить("ИспользоватьНомерКИЗГИСМСерии", Истина);
	ЗначенияРеквизитов.Вставить("ИспользоватьНомерСерии", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользоватьСрокГодностиСерии", Ложь);
	ЗначенияРеквизитов.Вставить("ИспользоватьСерии", Истина);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ, ЗначенияРеквизитов);
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ЭкземплярТовара);
	ЗначенияРеквизитов.Вставить("ИспользоватьНомерКИЗГИСМСерии", Истина);
	ЗначенияРеквизитов.Вставить("ИспользоватьНомерСерии", Истина);
	ЗначенияРеквизитов.Вставить("АвтоматическиГенерироватьСерии", Истина);
	ЗначенияРеквизитов.Вставить("ИспользоватьСерии", Истина);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ, ЗначенияРеквизитов);
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция,                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС,         ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияБезВЕТИС,            ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС, ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция,                    ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Велосипеды,                           ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Духи,                                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.КреслаКоляски,                        ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.ЛегкаяПромышленность,                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Фотоаппараты,                         ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Шины,                                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.УпакованнаяВода,                      ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.АльтернативныйТабак,                  ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Антисептики,                          ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.БАДы,                                 ЗначенияРеквизитов);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.НикотиносодержащаяПродукция,          ЗначенияРеквизитов);
	
	ЗначенияРеквизитов = Новый Структура;
	ЗначенияРеквизитов.Вставить("НастройкаИспользованияСерий", Перечисления.НастройкиИспользованияСерийНоменклатуры.ПартияТоваров);
	ЗначенияРеквизитов.Вставить("АлкогольнаяПродукция", Истина);
	ЗначенияЗаполнения.Вставить(Перечисления.ОсобенностиУчетаНоменклатуры.Пиво, ЗначенияРеквизитов);
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПредусмотренаАвтоматическаяГенерацияСерий(ПредусмотренаАвтоматическаяГенерацияСерий, НастройкиИспользованияСерий) Экспорт
	
	//++ Локализация
	Если ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(НастройкиИспользованияСерий.ОсобенностьУчета)<>Неопределено
		Или НастройкиИспользованияСерий.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС Тогда
		ПредусмотренаАвтоматическаяГенерацияСерий = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры


// Заполняет элемент справочника ВидыНоменклатуры значениями по умолчанию.
// 
// Параметры:
// 	ВидНоменклатуры - СправочникОбъект.ВидыНоменклатуры - справочник объект
Процедура ЗаполнитьРеквизитыВидаНоменклатурыПоУмолчанию(ВидНоменклатуры) Экспорт
	
	//++ Локализация
	Если Не ЗначениеЗаполнено(ВидНоменклатуры.ЕдиницаИзмерения)
		И (ВидНоменклатуры.АлкогольнаяПродукция
		Или ВидНоменклатуры.ПродукцияМаркируемаяДляГИСМ
		Или ВидНоменклатуры.КиЗГИСМ) Тогда
		
		ВидНоменклатуры.ЕдиницаИзмерения = Константы.ЕдиницаИзмеренияКоличестваШтук.Получить();
		
	КонецЕсли;
	
	Если ВидНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
		ВидНоменклатуры.ИспользоватьRFIDМеткиСерии = Истина;
	КонецЕсли;
	
	Если ВидНоменклатуры.КиЗГИСМ Тогда
		ВидНоменклатуры.ИспользоватьRFIDМеткиСерии = Истина;
	КонецЕсли;
	
	Если ВидНоменклатуры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ТабачнаяПродукция Тогда
		ВидНоменклатуры.ИспользоватьМРЦМОТПСерии = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ОтборПолитикУчетаСерийПоПараметрам(Отбор, Параметры) Экспорт
	
	//++ Локализация
	ЭтоПодконтрольнаяПродукцияВЕТИС = Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		Или Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС;
	
	Если Параметры.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар
		И Параметры.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
		
		МассивДопустимыхТиповПолитик = Новый Массив;
		// Для отображения предопределенной политики "Серии не используются"
		МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.ПустаяСсылка());
		МассивДопустимыхТиповПолитик.Добавить(Перечисления.ТипыПолитикУказанияСерий.МаркировкаПродукцииДляГИСМ);
		Отбор.Вставить("ТипПолитики", Новый ФиксированныйМассив(МассивДопустимыхТиповПолитик));
		
	КонецЕсли;
	
	Если ЭтоПодконтрольнаяПродукцияВЕТИС Тогда
		Отбор.Вставить("УчитыватьОстаткиСерий", Истина);
	КонецЕсли;
	
	Склад = Параметры.Склад;
	
	Если ЗначениеЗаполнено(Склад) Тогда
		Если ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
			Если ЭтоПодконтрольнаяПродукцияВЕТИС
				И (СкладыСервер.ИспользоватьОрдернуюСхемуПриОтгрузке(Склад)
					Или СкладыСервер.ИспользоватьОрдернуюСхемуПриПоступлении(Склад)) Тогда
				Отбор.Вставить("УчитыватьСебестоимостьПоСериям", Истина);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ЭтоПодконтрольнаяПродукцияВЕТИС
			И (СкладыСервер.ЕстьОрдерныйНаПоступлениеСклад() Или СкладыСервер.ЕстьОрдерныйНаОтгрузкуСклад()) Тогда
			Отбор.Вставить("УчитыватьСебестоимостьПоСериям", Истина);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Проверяет особенность учета вида номенклатуры на соответствие КиЗГИСМ.
//
// Параметры:
//	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры - особенность учета вида номенклатуры.
//
// Возвращаемое значение:
//	Булево - Истина - вид номенклатуры имеет особенность учета КиЗГИСМ.
//
Функция ТоварКиЗГИСМ(ОсобенностьУчета) Экспорт
	
	ТоварКиЗГИСМ = Ложь;
	//++ Локализация
	ТоварКиЗГИСМ = ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ;
	//-- Локализация
	
	Возврат ТоварКиЗГИСМ;
	
КонецФункции

#КонецОбласти

#Область Номенклатура

Процедура РеквизитыНеРедактируемыеВГрупповойОбработкеНоменклатура(НеРедактируемыеРеквизиты) Экспорт
	
	Возврат;
	
КонецПроцедуры

// Возвращает имена блокируемых реквизитов для механизма блокирования реквизитов БСП.
// 
// Параметры:
// 	БлокируемыеРеквизиты - Массив из Строка - имена блокируемых реквизитов
// 
Процедура ПолучитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты) Экспорт
	
	БлокируемыеРеквизиты.Добавить("ВестиУчетПоГТД");
	БлокируемыеРеквизиты.Добавить("ОблагаетсяНДСУПокупателя");
	БлокируемыеРеквизиты.Добавить("ПодакцизныйТовар");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(БлокируемыеРеквизиты, РеквизитыГИСМ());
	
	БлокируемыеРеквизиты.Добавить("АлкогольнаяПродукцияВоВскрытойТаре");
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	СтрогоБерутсяИзВида - Массив из Строка
// 	ЗаполняютсяТолькоПриСозданииНоменклатуры - Массив из Строка
// 	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию - Массив из Строка
// 	ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены - Массив из Строка
// 	ЗначенияПоУмолчанию - Структура
//
Процедура ЗаполнитьРеквизитыПоВидуНоменклатуры(СтрогоБерутсяИзВида,
		ЗаполняютсяТолькоПриСозданииНоменклатуры,
		ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию,
		ПерезаполняютсяЕслиРаньшеБылиНеЗаполнены,
		ЗначенияПоУмолчанию) Экспорт
	
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ВестиУчетПоГТД");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ПодакцизныйТовар");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ИмпортнаяАлкогольнаяПродукция");
	ЗаполняютсяТолькоПриСозданииНоменклатуры.Добавить("ОблагаетсяНДСУПокупателя");
	
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("ВидАлкогольнойПродукции");
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("Крепость");
	ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию.Добавить("КодРаздел7ДекларацииНДС");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПерезаполняютсяЕслиИхЗначенияБылиРавныЗначениямПоУмолчанию,
	                                            РеквизитыОбщероссийскихКлассификаторов());
	
	Возврат;
	
КонецПроцедуры

Процедура ОтработатьЛогикуСвязиРеквизитов(Номенклатура) Экспорт
	
	Если ЗначениеЗаполнено(Номенклатура.ВидНоменклатуры)
		И Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Номенклатура.ВидНоменклатуры, "СодержитДрагоценныеМатериалы") Тогда
		
		Номенклатура.ДрагоценныеМатериалы.Очистить();
		
	КонецЕсли;
	
	//++ Локализация
	Если Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа
		Или Номенклатура.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга Тогда
		
		Номенклатура.КодОКП = Справочники.ОбщероссийскийКлассификаторПродукции.ПустаяСсылка();
		
	КонецЕсли;
	
	Если Номенклатура.ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво Тогда
		Номенклатура.АлкогольнаяПродукция = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Функция ТекстЗначенияНеЗаполнен(ИмяРаздела) Экспорт
	
	Если ИмяРаздела = "ВидАлкогольнойПродукции" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	ИначеЕсли ИмяРаздела = "ПроизводительИмпортерКонтрагент" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	ИначеЕсли ИмяРаздела = "КодОКВЭД" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	ИначеЕсли ИмяРаздела = "КодОКВЭД2" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	ИначеЕсли ИмяРаздела = "КодОКП" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	ИначеЕсли ИмяРаздела = "КодОКПД2" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	ИначеЕсли ИмяРаздела = "КодВидаНоменклатурнойКлассификации" Тогда
		Возврат НСтр("ru = '<не указан>';
					|en = '<not specified>'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Параметры:
// 	ТабличныйДокументПраво - ТабличныйДокумент
// 	Объект - СправочникОбъект.Номенклатура
// 	НастройкиВидимостиИЗаголовков - см. Справочники.Номенклатура.НастройкиВидимостиИЗаголовков
// 	ДляПечати - Булево
//
Процедура ВывестиГлавы(ТабличныйДокументПраво, Объект, НастройкиВидимостиИЗаголовков, ДляПечати) Экспорт
	
	//++ Локализация
	
	Перем Заголовок;
	
	СтруктураВидимости = НастройкиВидимостиИЗаголовков.ВидимостьЭлементов;
	СтруктураЗаголовков = НастройкиВидимостиИЗаголовков.ЗаголовкиЭлементов;
	
	Макет = Справочники.Номенклатура.ПолучитьМакет("ПФ_MXL_КарточкаНоменклатурыЛокализация");
		
	#Область РегламентированныйУчет
	
	Если ГлаваВидна("РегламентированныйУчет", СтруктураВидимости) Тогда 
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("РегламентированныйУчетЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Если Справочники.Номенклатура.РазделВиден("ВестиУчетПоГТД", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ВестиУчетПоГТДСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ВестиУчетПоГТД);
			Область.Область("ВестиУчетПоГТДФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ВестиУчетПоГТД";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ПодакцизныйТовар", СтруктураВидимости) Тогда 
			Область = Макет.ПолучитьОбласть("ПодакцизныйТоварСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ПодакцизныйТовар);
			Область.Область("ПодакцизныйТоварФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ПодакцизныйТовар";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);		
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ОблагаетсяНДСУПокупателя", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("ОблагаетсяНДСУПокупателяСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.ОблагаетсяНДСУПокупателя);
			Область.Область("ОблагаетсяНДСУПокупателяФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ОблагаетсяНДСУПокупателя";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодРаздел7ДекларацииНДС", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодРаздел7ДекларацииНДС";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодРаздел7ДекларацииНДССтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодРаздел7ДекларацииНДСРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КодРаздел7ДекларацииНДС;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
				
		Если Справочники.Номенклатура.РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимости) Тогда 
			
			Область = Макет.ПолучитьОбласть("ГиперссылкаПерейтиДрагоценныеМатериалыСтрока");
			Если СтруктураЗаголовков.Свойство("ГиперссылкаПерейтиДрагоценныеМатериалы", Заголовок) Тогда
				Область.Параметры.ГиперссылкаПерейтиДрагоценныеМатериалы = Заголовок;
			КонецЕсли;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "ГиперссылкаПерейтиДрагоценныеМатериалы";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СведенияОбАлкогольнойПродукции
	
	Если ГлаваВидна("СведенияОбАлкогольнойПродукции", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("СведенияОбАлкогольнойПродукцииЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		
		
		Если Справочники.Номенклатура.РазделВиден("ВидАлкогольнойПродукции", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "ВидАлкогольнойПродукции";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "ВидАлкогольнойПродукцииСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "ВидАлкогольнойПродукцииРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.ВидАлкогольнойПродукции;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ИмпортнаяАлкогольнаяПродукция", СтруктураВидимости) Тогда
			Если Объект.ИмпортнаяАлкогольнаяПродукция Тогда
				СтрокаЗаполнения = НСтр("ru = 'Импорт';
										|en = 'Import'");	
			Иначе
				СтрокаЗаполнения = НСтр("ru = 'Россия';
										|en = 'Russia'");
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "ИмпортнаяАлкогольнаяПродукция";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "ИмпортнаяАлкогольнаяПродукцияСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "ИмпортнаяАлкогольнаяПродукцияРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("АлкогольнаяПродукцияВоВскрытойТаре", СтруктураВидимости) Тогда
			Область = Макет.ПолучитьОбласть("АлкогольнаяПродукцияВоВскрытойТареСтрока");
			Картинка = Справочники.Номенклатура.КартинкаФлагаПоЗначению(Объект.АлкогольнаяПродукцияВоВскрытойТаре);
			Область.Область("АлкогольнаяПродукцияВоВскрытойТареФлаг").Картинка = Картинка;
			Если Не ДляПечати Тогда
				Область.Параметры.Расшифровка = "АлкогольнаяПродукцияВоВскрытойТаре";
			КонецЕсли;
			ТабличныйДокументПраво.Вывести(Область);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("ОбъемДАЛ", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%Объем% дал';
									|en = '%Объем% next'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Объем%", Объект.ОбъемДАЛ);
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "ОбъемДАЛ";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "ОбъемДАЛСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "ОбъемДАЛРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("Крепость", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%Крепость% % об.';
									|en = '%Крепость% % total'");
			СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%Крепость%", Объект.Крепость);
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "Крепость";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КрепостьСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КрепостьРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);	
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КиЗГИСМ
	
	Если ГлаваВидна("КиЗГИСМ", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("КиЗГИСМЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);		
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМВид", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМВид";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМВидСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМВидРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КиЗГИСМВид;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМСпособВыпускаВОборот", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМСпособВыпускаВОборот";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМСпособВыпускаВОборотСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМСпособВыпускаВОборотРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КиЗГИСМСпособВыпускаВОборот;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМРазмер", СтруктураВидимости) Тогда
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМРазмер";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМРазмерСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМРазмерРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =   Объект.КиЗГИСМРазмер;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);		
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КиЗГИСМGTIN", СтруктураВидимости) Тогда
			СтрокаЗаполнения = НСтр("ru = '%КиЗГИСМGTIN%';
									|en = '%КиЗГИСМGTIN%'");
			
			Если ЗначениеЗаполнено(Объект.ЕдиницаИзмерения) Тогда
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%КиЗГИСМGTIN%", Объект.КиЗГИСМGTIN);
			Иначе
				СтрокаЗаполнения = СтрЗаменить(СтрокаЗаполнения, "%КиЗГИСМGTIN%", НСтр("ru = '<не указан>';
																						|en = '<not specified>'"));
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КиЗГИСМGTIN";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КиЗГИСМGTINСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КиЗГИСМGTINРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаЗаполнения;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ОбщероссийскиеКлассификаторы
	
	Если ГлаваВидна("ОбщероссийскиеКлассификаторы", СтруктураВидимости) Тогда
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("ОбщероссийскиеКлассификаторыЗаголовок");
		ТабличныйДокументПраво.Вывести(ОбластьЗаголовок);
		
		Шаблон = НСтр("ru = '%Код% (%Наименование%)';
						|en = '%Код% (%Наименование%)'");
		
		Если Справочники.Номенклатура.РазделВиден("КодОКВЭД", СтруктураВидимости) Тогда
			СтрокаОКВЭД = "";
			Если ЗначениеЗаполнено(Объект.КодОКВЭД) Тогда 
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД, "Наименование");
				СтрокаОКВЭД = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКВЭД);
				СтрокаОКВЭД = СтрЗаменить(СтрокаОКВЭД, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКВЭД";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКВЭДСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКВЭДРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКВЭД;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодОКВЭД2", СтруктураВидимости) Тогда
			СтрокаОКВЭД2 = "";
			Если ЗначениеЗаполнено(Объект.КодОКВЭД2) Тогда 
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКВЭД2, "Наименование");
				СтрокаОКВЭД2 = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКВЭД2);
				СтрокаОКВЭД2 = СтрЗаменить(СтрокаОКВЭД2, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКВЭД2";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКВЭД2Строка";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКВЭД2Реквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКВЭД2;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодОКП", СтруктураВидимости) Тогда
			СтрокаОКП = "";
			Если ЗначениеЗаполнено(Объект.КодОКП) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКП, "Наименование");
				СтрокаОКП = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКП);
				СтрокаОКП = СтрЗаменить(СтрокаОКП, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКП";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКПСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКПРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКП;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
			
		Если Справочники.Номенклатура.РазделВиден("КодОКПД2", СтруктураВидимости) Тогда
			СтрокаОКПД2 = "";
			Если ЗначениеЗаполнено(Объект.КодОКПД2) Тогда
				Наименование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КодОКПД2, "Наименование");
				СтрокаОКПД2 = СтрЗаменить(Шаблон, "%Код%", Объект.КодОКПД2);
				СтрокаОКПД2 = СтрЗаменить(СтрокаОКПД2, "%Наименование%", Наименование);
			КонецЕсли;
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодОКПД2";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодОКПД2Строка";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодОКПД2Реквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаОКПД2;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
		Если Справочники.Номенклатура.РазделВиден("КодВидаНоменклатурнойКлассификации", СтруктураВидимости) Тогда
			СтрокаКВНК = "";
			Если ЗначениеЗаполнено(Объект.КодВидаНоменклатурнойКлассификации) Тогда
				Наименование = Объект.НаименованиеВидаНоменклатурнойКлассификации;
				СтрокаКВНК = СтрЗаменить(Шаблон, "%Код%", Объект.КодВидаНоменклатурнойКлассификации);
				СтрокаКВНК = СтрЗаменить(СтрокаКВНК, "%Наименование%", Наименование);
			КонецЕсли;
			
			ПараметрыВыводаРаздела = Справочники.Номенклатура.ПараметрыВыводаРазделаСУчетомРазмераЗначений();
			ПараметрыВыводаРаздела.ИмяРаздела = "КодВидаНоменклатурнойКлассификации";
			ПараметрыВыводаРаздела.ИмяОбластиСтрока = "КодВидаНоменклатурнойКлассификацииСтрока";
			ПараметрыВыводаРаздела.ИмяПараметраРеквизит = "КодВидаНоменклатурнойКлассификацииРеквизит";
			ПараметрыВыводаРаздела.ТекстЗначенияРеквизита =  СтрокаКВНК;
			Справочники.Номенклатура.ВывестиРазделСУчетомРазмераЗначений(ТабличныйДокументПраво, Макет, ДляПечати, ПараметрыВыводаРаздела);
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	РеквизитыОтключенныеПоФО - Массив из Строка
// 
Процедура РеквизитыОтключенныеПоФО(РеквизитыОтключенныеПоФО) Экспорт
	
	ИспользоватьИмпортныеТовары            = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеТовары");
	ИспользоватьИмпортныеЗакупки           = ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки");
	ИспользоватьПродажиНаЭкспорт           = ПолучитьФункциональнуюОпцию("ИспользоватьПродажиНаЭкспорт");
	ИспользоватьКлассификаторыНоменклатуры = ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры");
	ИспользоватьСтарыеКлассификаторы       = ПолучитьФункциональнуюОпцию("ИспользованиеСтарыхКлассификаторовОКПиОКВЭД");
	
	ИспользоватьУчетПрослеживаемыхИмпортныхТоваров = УчетПрослеживаемыхТоваровЛокализация.ИспользоватьУчетПрослеживаемыхИмпортныхТоваров(
														Дата(1, 1, 1));
	
	ИспользоватьУчетДрагоценныхМатериалов = Ложь;
	//++ Локализация
	ИспользоватьУчетДрагоценныхМатериалов = ПолучитьФункциональнуюОпцию("ИспользоватьУчетДрагоценныхМатериалов");
	//-- Локализация
	
	ВестиСведенияДляДекларацийАлкоВРознице = Ложь;
	ВестиУчетМаркировкиПродукцииВГИСМ      = Ложь;
	//++ Локализация
	ВестиСведенияДляДекларацийАлкоВРознице = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице");
	ВестиУчетМаркировкиПродукцииВГИСМ      = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ");
	//-- Локализация
	
	НастройкиУчетаНДС = УчетНДСУП.НастройкиУчета();
	ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС = НастройкиУчетаНДС.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС;
	ОперацииСТоварамиОблагаемымиНДСУПокупателя  = НастройкиУчетаНДС.ПродажаТоваровОблагаемыхНДСУПокупателя 
		Или НастройкиУчетаНДС.ПокупкаТоваровОблагаемыхНДСУПокупателя;
	
	Если Не ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС Тогда
		РеквизитыОтключенныеПоФО.Добавить("КодРаздел7ДекларацииНДС");
	КонецЕсли;
	
	Если Не ОперацииСТоварамиОблагаемымиНДСУПокупателя Тогда
		РеквизитыОтключенныеПоФО.Добавить("ОблагаетсяНДСУПокупателя");
	КонецЕсли;
	
	Если НЕ ВестиСведенияДляДекларацийАлкоВРознице Тогда
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РеквизитыОтключенныеПоФО, РеквизитыАлкогольнойПродукции());
		
	КонецЕсли;
	
	Если Не (ИспользоватьИмпортныеЗакупки
		Или ИспользоватьПродажиНаЭкспорт
		Или ВестиУчетМаркировкиПродукцииВГИСМ
		Или ИспользоватьУчетПрослеживаемыхИмпортныхТоваров) Тогда
		
		РеквизитыОтключенныеПоФО.Добавить("КодТНВЭД");
		
	КонецЕсли;
	
	Если Не ИспользоватьИмпортныеТовары Тогда
		РеквизитыОтключенныеПоФО.Добавить("ВестиУчетПоГТД");
	КонецЕсли;
	
	Если Не ИспользоватьКлассификаторыНоменклатуры Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РеквизитыОтключенныеПоФО, РеквизитыОбщероссийскихКлассификаторов());
		
		РеквизитыОтключенныеПоФО.Добавить("КодВидаНоменклатурнойКлассификации");
	ИначеЕсли Не ИспользоватьСтарыеКлассификаторы Тогда
		РеквизитыОтключенныеПоФО.Добавить("КодОКВЭД");
		РеквизитыОтключенныеПоФО.Добавить("КодОКП");
	КонецЕсли;
	
	Если Не ИспользоватьУчетДрагоценныхМатериалов Тогда
		РеквизитыОтключенныеПоФО.Добавить("ДрагоценныеМатериалы");
	КонецЕсли;
	
	Если Не ВестиУчетМаркировкиПродукцииВГИСМ Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РеквизитыОтключенныеПоФО, РеквизитыГИСМ());
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ОбязательноОтображаемыеПриСозданииРеквизиты - Массив из Строка
// 	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
// 	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
//
Процедура ОбязательноОтображаемыеПриСозданииРеквизиты(ОбязательноОтображаемыеПриСозданииРеквизиты, ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ВестиУчетПоГТД");
	
	Если ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар Тогда
		ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("ПодакцизныйТовар");
	КонецЕсли;
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбязательноОтображаемыеПриСозданииРеквизиты, РеквизитыАлкогольнойПродукции());
	КонецЕсли;
	
	Если ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПодконтрольнаяПродукцияВЕТИС
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.МолочнаяПродукцияПодконтрольнаяВЕТИС Тогда
		ОбязательноОтображаемыеПриСозданииРеквизиты.Добавить("Артикул");
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Процедура РеквизитыСПереопределеннойОбязательностьюЗаполнения(РеквизитыСПереопределеннойОбязательностьюЗаполнения, ТипНоменклатуры, ОсобенностьУчета, Объект) Экспорт
	
	//++ НЕ УТ
	РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("ДрагоценныеМатериалы.Расположение", Ложь);
	//-- НЕ УТ
	
	РеквизитыГИСМ = РеквизитыГИСМ(Истина);
	
	Для Каждого Реквизит Из РеквизитыГИСМ Цикл
		РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить(Реквизит, ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	КонецЦикла;
	
	РеквизитыСПереопределеннойОбязательностьюЗаполнения.Вставить("КодТНВЭД",
		ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ);
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	НеотображаемыеВТаблицеНастроекРеквизиты - Массив из Строка
// 
Процедура НеотображаемыеВТаблицеНастроекРеквизиты(НеотображаемыеВТаблицеНастроекРеквизиты) Экспорт
	
	НеотображаемыеВТаблицеНастроекРеквизиты.Добавить("ОблагаетсяНДПИПоПроцентнойСтавке");
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	НеиспользуемыеДляКонтроляУникальностиРеквизиты - Массив из Строка
// 
Процедура НеиспользуемыеДляКонтроляУникальностиРеквизиты(НеиспользуемыеДляКонтроляУникальностиРеквизиты) Экспорт
	
	НеиспользуемыеДляКонтроляУникальностиРеквизиты.Добавить("ДрагоценныеМатериалы");
	
	Возврат;
	
КонецПроцедуры

Процедура НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы(НеиспользуемыеДляКонтроляЗаполненияИОтборовТипы) Экспорт
	
	Возврат;
	
КонецПроцедуры

Процедура РекомендуемыеДляКонтроляУникальностиРеквизиты(РекомендуемыеДляКонтроляУникальностиРеквизиты, ТипНоменклатуры, ОсобенностьУчета) Экспорт
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(РекомендуемыеДляКонтроляУникальностиРеквизиты, РеквизитыГИСМ());
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ТаблицаРеквизитов - см. Справочники.Номенклатура.ЗависимостьРеквизитовОтТипаНоменклатуры
// 	ТипНоменклатуры - ПеречислениеСсылка.ТипыНоменклатуры
// 	ОсобенностьУчета - ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 	ИспользованиеХарактеристик - ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры
// 	ЭтоРеквизитыХарактеристик - Булево
// 
Процедура ЗависимостьРеквизитовОтТипаНоменклатуры(ТаблицаРеквизитов,
												ТипНоменклатуры,
												ОсобенностьУчета,
												ИспользованиеХарактеристик,
												ЭтоРеквизитыХарактеристик) Экспорт
	
	Если ТипЗнч(ИспользованиеХарактеристик) = Тип("ПеречислениеСсылка.ВариантыИспользованияХарактеристикНоменклатуры") Тогда
		ИспользоватьХарактеристики = ИспользованиеХарактеристик <> Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать;
	Иначе
		ИспользоватьХарактеристики = ИспользованиеХарактеристик;
	КонецЕсли;
	
	ЭтоТовар 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар);
	ЭтоУслуга 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга);
	ЭтоРабота 				= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Работа);
	ЭтоМногооборотнаяТара 	= (ТипНоменклатуры = Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	
	АлкогольнаяПродукция  = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.АлкогольнаяПродукция
		Или ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.Пиво);
	
	КиЗГИСМ               = (ОсобенностьУчета = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Реквизиты = Метаданные.Справочники.ХарактеристикиНоменклатуры.Реквизиты;
	Иначе
		Реквизиты = Метаданные.Справочники.Номенклатура.Реквизиты;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КиЗГИСМGTIN;
	НоваяСтрока.Использование = ЭтоТовар
								И КиЗГИСМ
								И (Не ИспользоватьХарактеристики
									Или ЭтоРеквизитыХарактеристик);
	
	Если ЭтоРеквизитыХарактеристик Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыГИСМ = РеквизитыГИСМ();
	Для Каждого Реквизит из РеквизитыГИСМ Цикл
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит      = Реквизиты[Реквизит];
		НоваяСтрока.Использование = ЭтоТовар
									И КиЗГИСМ;
	КонецЦикла;	
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ВестиУчетПоГТД;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоМногооборотнаяТара;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.ПодакцизныйТовар;
	НоваяСтрока.Использование = ЭтоТовар;
	
	РеквизитыАлкогольнойПродукции = РеквизитыАлкогольнойПродукции();
	Для Каждого Реквизит Из РеквизитыАлкогольнойПродукции Цикл
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока.Реквизит      = Реквизиты[Реквизит];
		НоваяСтрока.Использование = ЭтоТовар
									И АлкогольнаяПродукция;
	КонецЦикла;	
	
	
	#Область ОбщероссийскиеКлассификаторы
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодОКВЭД;
	НоваяСтрока.Использование = Не КиЗГИСМ;
		
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодОКВЭД2;
	НоваяСтрока.Использование = Не КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодОКП;
	НоваяСтрока.Использование = Не (ЭтоРабота
									Или ЭтоУслуга
									Или КиЗГИСМ);
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодОКПД2;
	НоваяСтрока.Использование = Не КиЗГИСМ;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.КодВидаНоменклатурнойКлассификации;
	НоваяСтрока.Использование = ЭтоТовар;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит      = Реквизиты.НаименованиеВидаНоменклатурнойКлассификации;
	НоваяСтрока.Использование = ЭтоТовар;
	#КонецОбласти
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.КодРаздел7ДекларацииНДС;
	НоваяСтрока.Использование = ЭтоТовар
								Или ЭтоРабота
								Или ЭтоУслуга;
	
	НоваяСтрока = ТаблицаРеквизитов.Добавить();
	НоваяСтрока.Реквизит            = Реквизиты.ОблагаетсяНДСУПокупателя;
	НоваяСтрока.Использование = ЭтоТовар;
	
	Возврат;
	
КонецПроцедуры

Процедура ИспользованиеЭлементов(ВидимостьЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов) Экспорт
	
	#Область РегламентированныйУчет
	ДрагоценныеМатериалы = Ложь;
	Если ЗначениеЗаполнено(Объект.ВидНоменклатуры) Тогда
		ДрагоценныеМатериалы = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидНоменклатуры, "СодержитДрагоценныеМатериалы");
	КонецЕсли;

	ВидимостьЭлементов.Вставить("ДрагоценныеМатериалы", ДрагоценныеМатериалы
														И (РежимПроверкиИспользованияРеквизитов
															Или Не РежимВидимостиПоказатьТолькоВажные
															И ПравоДоступа("Просмотр",
															Метаданные.Справочники.Номенклатура.ТабличныеЧасти.ДрагоценныеМатериалы)));
		
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьЭлементов.Вставить("ГиперссылкаПерейтиДрагоценныеМатериалы", ВидимостьЭлементов.ДрагоценныеМатериалы);
	КонецЕсли;
	
	ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС = ПолучитьФункциональнуюОпцию("ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС");
	
	ВидимостьКодаРаздела7ДекларацииНДС = ВидимостьЭлементов.КодРаздел7ДекларацииНДС
		И ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС
		И Не Объект.ОблагаетсяНДСУПокупателя
		И (Объект.СтавкаНДС = Справочники.СтавкиНДС.БезНДС)
		И (Не РежимВидимостиПоказатьТолькоВажные
			Или РежимПроверкиИспользованияРеквизитов);
		
	ВидимостьЭлементов.Вставить("КодРаздел7ДекларацииНДС", ВидимостьКодаРаздела7ДекларацииНДС);
	
	#КонецОбласти
	
	#Область СведенияПоАлкогольнойПродукции
	
	ВидимостьЭлементов.ОбъемДАЛ = ВидимостьЭлементов.ОбъемДАЛ
									И Не Объект.АлкогольнаяПродукцияВоВскрытойТаре
									И (Не РежимВидимостиПоказатьТолькоВажные
										Или РежимПроверкиИспользованияРеквизитов);
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьЭлементов.Вставить("ДекорацияДекалитры",         ВидимостьЭлементов.ОбъемДАЛ);
		ВидимостьЭлементов.Вставить("РассчитатьОбъемВДекалитрах", ВидимостьЭлементов.ОбъемДАЛ);
		ВидимостьЭлементов.Вставить("ДекорацияПроцентыКрепости",  ВидимостьЭлементов.ВидАлкогольнойПродукции);
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОбщероссийскиеКлассификаторы
	
	Если Не РежимПроверкиИспользованияРеквизитов Тогда
		ВидимостьЭлементов.Вставить("НаименованиеОКВЭД",	ВидимостьЭлементов.КодОКВЭД);
		ВидимостьЭлементов.Вставить("НаименованиеОКВЭД2",	ВидимостьЭлементов.КодОКВЭД2);
		ВидимостьЭлементов.Вставить("НаименованиеОКП",		ВидимостьЭлементов.КодОКП);
		ВидимостьЭлементов.Вставить("НаименованиеОКПД2",	ВидимостьЭлементов.КодОКПД2);
		ВидимостьЭлементов.Вставить("НаименованиеВидаНоменклатурнойКлассификации",
									ВидимостьЭлементов.КодВидаНоменклатурнойКлассификации);
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	ИнтеграцияИСМПУТ.ИспользованиеЭлементов(ВидимостьЭлементов, Объект, РежимВидимостиПоказатьТолькоВажные, РежимПроверкиИспользованияРеквизитов);
	//-- Локализация
	
КонецПроцедуры

Процедура ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов) Экспорт
	
	//++ Локализация
	ИнтеграцияИСМПУТ.ЗаголовкиЭлементов(ЗаголовкиЭлементов, Объект, ВидимостьЭлементов);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНоменклатура(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	
	Если Объект.КиЗГИСМ Тогда
		ИнтеграцияГИСМУТ.ОбработкаПроверкиЗаполненияGTIN(Объект, Отказ);
	КонецЕсли;
	
	//++ НЕ УТ
	Справочники.ДрагоценныеМатериалы.ПроверитьЗаполнениеДрагоценныхМатериалов(Объект, Объект.ДрагоценныеМатериалы, Отказ);
	//-- НЕ УТ
	
	//-- Локализация

	Возврат;
	
КонецПроцедуры

Процедура ПараметрыКопированияДополнительныхДанных(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	ВариантПереносаНастроекПоХарактеристикам =
	 НоменклатураСервер.ВариантПереносаНастроекПоХарактеристикам(Объект,
	 		ПараметрыСоздания.ИсточникКопирования,
			СоответствияСкопированныхОбъектов);
			
	Если ВариантПереносаНастроекПоХарактеристикам = "НеПереносить" Тогда
		Возврат;
	КонецЕсли;
	
	//++ Локализация
	ИнтеграцияИСУТ.ДополнитьПараметрыКопированияДополнительныхДанныхНоменклатуры(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания) Экспорт
	
	//++ Локализация
	ИнтеграцияИСУТ.ЗаполнитьПоПараметрамСоздания(Объект, ПараметрыСоздания);
	//-- Локализация
	
	Возврат;

КонецПроцедуры

Процедура СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов) Экспорт
	
	//++ Локализация
	ИнтеграцияИСУТ.СкопироватьДополнительныеДанные(Объект, ПараметрыСоздания, ПараметрыКопированияДополнительныхДанных, СоответствияСкопированныхОбъектов);
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик - Массив из ПеречислениеСсылка.ОсобенностиУчетаНоменклатуры
// 
Процедура ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик(ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик) Экспорт
	
	ОсобенностиУчетаОтКоторыхЗависятРеквизитыХарактеристик.Добавить(Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ);
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область ХарактеристикиНоменклатуры

Процедура ОбработкаПроверкиЗаполненияХарактеристикиНоменклатуры(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Владелец, "ОсобенностьУчета") = Перечисления.ОсобенностиУчетаНоменклатуры.КиЗГИСМ Тогда
		ИнтеграцияГИСМУТ.ОбработкаПроверкиЗаполненияGTIN(Объект, Отказ);
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

#Область СерииНоменклатуры

Процедура ПроверитьЗаполнениеСерий(ДокументОбъект, ПараметрыУказанияСерий, Отказ, МассивНепроверяемыхРеквизитов, ПараметрыПроверки) Экспорт
	
	//++ Локализация
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") Тогда
		Возврат;
	КонецЕсли;
		
	Если ПараметрыУказанияСерий.ТоварВШапке Тогда
		Возврат;
	КонецЕсли;
	
	КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(ДокументОбъект);
		
	Если ПараметрыУказанияСерий.ИмяТЧТовары = ПараметрыУказанияСерий.ИмяТЧСерии Тогда
		
		Если ПараметрыУказанияСерий.ОсобеннаяПроверкаСтатусовУказанияСерий Тогда
			
			МодульМенеджера = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПараметрыУказанияСерий.ПолноеИмяОбъекта);
			ТекстЗапроса =	МодульМенеджера.ТекстЗапросаПроверкиЗаполненияСерий(ПараметрыУказанияСерий);
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ТаблицаСерий.НомерСтроки КАК НомерСтроки,
			|	ТаблицаСерий.Номенклатура КАК Номенклатура,
			|	ТаблицаСерий.Характеристика КАК Характеристика,
			|	ТаблицаСерий.Серия КАК Серия,
			|	""Серия"" КАК ИмяПоляСерия,
			|	&ИмяПоляУпаковка КАК Упаковка,
			|	&ИмяПоляКоличество КАК КоличествоУпаковок
			|ПОМЕСТИТЬ ТаблицаСерийДляЗапроса
			|ИЗ
			|	&ТаблицаСерий КАК ТаблицаСерий
			|ГДЕ
			|	ТаблицаСерий.СтатусУказанияСерий > 0
			|	И НЕ ТаблицаСерий.СтатусУказанияСерий В (&СтатусыСерийСериюМожноУказать)";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляУпаковка",
				?(ПараметрыУказанияСерий.ПоляСвязи.Найти("Упаковка") <> Неопределено, "ТаблицаСерий.Упаковка","ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)"));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
			
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВПакете() +
		"ВЫБРАТЬ
		|	ТаблицаСерийДляЗапроса.Серия КАК Серия,
		|	ТаблицаСерийДляЗапроса.ИмяПоляСерия КАК ИмяПоляСерия,
		|	ВЫРАЗИТЬ(ТаблицаСерийДляЗапроса.Серия КАК Справочник.СерииНоменклатуры).НомерКиЗГИСМ КАК НомерКиЗГИСМ
		|ПОМЕСТИТЬ ТоварыСОшибкамиВКоличествеПоКиЗ
		|ИЗ
		|	ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
		|ГДЕ
		|	&ВестиУчетМаркировкиПродукцииВГИСМ	
		|	И ВЫРАЗИТЬ(ТаблицаСерийДляЗапроса.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьНомерКИЗГИСМСерии
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаСерийДляЗапроса.Серия,
		|	ТаблицаСерийДляЗапроса.ИмяПоляСерия
		|
		|ИМЕЮЩИЕ
		|	СУММА(ТаблицаСерийДляЗапроса.КоличествоУпаковок) > 1
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаСерийДляЗапроса.Номенклатура) КАК НоменклатураПредставление,
		|	ТоварыСОшибкамиВКоличествеПоКиЗ.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
		|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL КАК ОшибкаКоличестваКиЗ,
		|	ТаблицаСерийДляЗапроса.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	ТаблицаСерийДляЗапроса КАК ТаблицаСерийДляЗапроса
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОшибкамиВКоличествеПоКиЗ КАК ТоварыСОшибкамиВКоличествеПоКиЗ
		|		ПО ТаблицаСерийДляЗапроса.Серия = ТоварыСОшибкамиВКоличествеПоКиЗ.Серия
		|			И ТаблицаСерийДляЗапроса.ИмяПоляСерия = ТоварыСОшибкамиВКоличествеПоКиЗ.ИмяПоляСерия
		|ГДЕ
		|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТаблицаСерийДляЗапроса.НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяПоляКоличество", ПараметрыУказанияСерий.ИмяПоляКоличество);
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВестиУчетМаркировкиПродукцииВГИСМ", ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ"));
		Запрос.УстановитьПараметр("СтатусыСерийСериюМожноУказать", НоменклатураКлиентСервер.СтатусыСерийСериюМожноУказать());
		
		Если ПараметрыУказанияСерий.ОтборПроверяемыхСтрок <> Неопределено Тогда
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
		Иначе
			Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
		КонецЕсли;
		
		Если ПараметрыПроверки.ВыдаватьСообщения Тогда
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ОшибкаКоличестваКиЗ Тогда
					ТекстСообщения = НСтр("ru = 'Номер %Парам1% ГИСМ %НомерКиз% указан для товара ""%НоменклатураПредставление%"" и для других товаров. Нельзя использовать один номер %Парам1% для разных товаров.';
											|en = '%Парам1% SPMS number %НомерКиз% is already specified for the ""%НоменклатураПредставление%"" goods and other goods. You cannot use the same %Парам1% number for different goods.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Выборка.НоменклатураПредставление);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗГИСМ%", Выборка.НомерКиЗГИСМ);
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Номенклатура");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле,ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если Не Запрос.Выполнить().Пустой() Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаТоваров.Номенклатура КАК Номенклатура,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ТаблицаТоваров
	|ИЗ
	|	&ТаблицаТоваров КАК ТаблицаТоваров
	|ГДЕ
	|	&ВестиУчетМаркировкиПродукцииВГИСМ
	|		И ТаблицаТоваров.СтатусУказанияСерий = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.Серия КАК Серия,
	|	ТаблицаСерий.Номенклатура КАК Номенклатура,
	|	&ИмяПоляКоличествоСерии КАК Количество
	|ПОМЕСТИТЬ ТаблицаСерий
	|ИЗ
	|	&ТаблицаСерий КАК ТаблицаСерий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСерий.Серия КАК Серия,
	|	МАКСИМУМ(ТаблицаСерий.Номенклатура) КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТаблицаСерий.Серия КАК Справочник.СерииНоменклатуры).НомерКиЗГИСМ КАК НомерКиЗГИСМ
	|ПОМЕСТИТЬ ТоварыСОшибкамиВКоличествеПоКиЗ
	|ИЗ
	|	ТаблицаСерий КАК ТаблицаСерий
	|ГДЕ 
	|	&ВестиУчетМаркировкиПродукцииВГИСМ
	|	И ВЫРАЗИТЬ(ТаблицаСерий.Номенклатура КАК Справочник.Номенклатура).ВидНоменклатуры.ИспользоватьНомерКИЗГИСМСерии
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаСерий.Серия
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТаблицаСерий.Количество) > 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТоварыСОшибкамиВКоличествеПоКиЗ.НомерКиЗГИСМ КАК НомерКиЗГИСМ,
	|	ТаблицаТоваров.НомерСтроки КАК НомерСтроки,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаТоваров.Номенклатура) КАК Номенклатура,
	|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL КАК ОшибкаКоличестваКиЗ
	|ИЗ
	|	ТаблицаТоваров КАК ТаблицаТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварыСОшибкамиВКоличествеПоКиЗ КАК ТоварыСОшибкамиВКоличествеПоКиЗ
	|		ПО ТаблицаТоваров.Номенклатура = ТоварыСОшибкамиВКоличествеПоКиЗ.Номенклатура
	|ГДЕ
	|	НЕ ТоварыСОшибкамиВКоличествеПоКиЗ.Серия ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляКоличествоСерии", "ТаблицаСерий." + ПараметрыУказанияСерий.ИмяПоляКоличество);
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Если ПараметрыУказанияСерий.Свойство("ОтборПроверяемыхСтрок") Тогда
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить(ПараметрыУказанияСерий.ОтборПроверяемыхСтрок));
	Иначе
		Запрос.УстановитьПараметр("ТаблицаТоваров",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧТовары].Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВестиУчетМаркировкиПродукцииВГИСМ", ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ"));
	
	Запрос.УстановитьПараметр("ТаблицаСерий",
			ДокументОбъект[ПараметрыУказанияСерий.ИмяТЧСерии].Выгрузить());
	
	Если ПараметрыПроверки.ВыдаватьСообщения Тогда
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ОшибкаКоличестваКиЗ Тогда
				ТекстСообщения = НСтр("ru = 'Номер %Парам1% ГИСМ %НомерКиЗГИСМ% указан для товара ""%НоменклатураПредставление%"" и для других товаров. Нельзя использовать один номер %Парам1% для разных товаров.';
										|en = '%Парам1% SPMS number %НомерКиЗГИСМ% is already specified for the ""%НоменклатураПредставление%"" goods and other goods. You cannot use the same %Парам1% number for different goods.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НоменклатураПредставление%", Выборка.Номенклатура);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерКиЗГИСМ%", Выборка.НомерКиЗГИСМ);
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыУказанияСерий.ИмяТЧТовары, Выборка.НомерСтроки, "Номенклатура");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,КлючДанных,Поле, ПараметрыПроверки.ПутьКДаннымТаблицыФормы,Отказ);
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		Если Не Запрос.Выполнить().Пустой() Тогда
			Отказ = Истина;	
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПроверитьВозможностьОткрытияФормыУказанияСерий(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Экспорт
	
	//++ Локализация
	Если ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий) Тогда
		
		Если НастройкиИспользованияСерий.ОсобенностьУчета <> Перечисления.ОсобенностиУчетаНоменклатуры.ПродукцияМаркируемаяДляГИСМ Тогда
			ТекстИсключения = НСтр("ru = 'Номенклатура вида %ВидНоменклатуры% не является продукцией, которую нужно маркировать для ГИСМ.';
									|en = 'Products of the %ВидНоменклатуры% type are not the products that should be labeled for SPMS.'");
			ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ВидНоменклатуры%", НастройкиИспользованияСерий.ВидНоменклатуры);
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий, ПараметрыУказанияСерий, ЗначенияПолейСвязи) Тогда
			
			GTINИзКиЗ = ИнтеграцияГИСМУТ.GTINКиЗ(ЗначенияПолейСвязи.НоменклатураКиЗ, ЗначенияПолейСвязи.ХарактеристикаКиЗ);
			
			Если GTINИзКиЗ <> ЗначенияПолейСвязи.GTIN Тогда
				
				ТекстСообщения = НСтр("ru = 'Выбранный %Парам1% предназначен для маркировки товаров с GTIN %GTINИзКиЗ%, его нельзя использовать для маркировки товара с GTIN %GTIN%.';
										|en = 'The selected %Парам1% is intended for goods marking with the %GTINИзКиЗ% GTIN; you cannot use it to mark goods with the %GTIN% GTIN.'");
				
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTINИзКиЗ%", GTINИзКиЗ);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%GTIN%", ЗначенияПолейСвязи.GTIN);
				
				ВызватьИсключение ТекстСообщения;
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура ПредставлениеТовараВФормеУказанияСерий(ТоварПредставление, ЗначенияПолейСвязи) Экспорт
	
	Если ЗначенияПолейСвязи.Свойство("GTIN")
		И ЗначениеЗаполнено(ЗначенияПолейСвязи.GTIN) Тогда
		
		ТоварПредставление = НСтр("ru = '%ТоварПредставление% GTIN: %GTIN%';
									|en = '%ТоварПредставление% GTIN: %GTIN%'");
		ТоварПредставление = СтрЗаменить(ТоварПредставление, "%ТоварПредставление%", ТоварПредставление);
		ТоварПредставление = СтрЗаменить(ТоварПредставление, "%GTIN%", ЗначенияПолейСвязи.GTIN);
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Проверить заполнение реквизитов серий.
// 
// Параметры:
// 	Объект - ОбработкаОбъектИмяОбработки - должна содержать:
// 		* Серии - ТабличнаяЧасть
//  МассивНепроверяемыхРеквизитов - Массив - непроверяемых реквизитов
//  ПараметрыПроверки - Структура - параметров проверки
//  Отказ - Булево
Процедура ПроверитьЗаполнениеРеквизитовСерий(Объект, МассивНепроверяемыхРеквизитов, ПараметрыПроверки, Отказ) Экспорт
	
	НастройкиИспользованияСерий        = ПараметрыПроверки.НастройкиИспользованияСерий;
	ПараметрыУказанияСерий             = ПараметрыПроверки.ПараметрыУказанияСерий;
	ЗначенияПолейСвязи                 = ПараметрыПроверки.ЗначенияПолейСвязи;
	
	//++ Локализация
	ЭтоМаркировкаТоваровГИСМ  = ИнтеграцияГИСМУТ.ЭтоМаркировкаТоваровГИСМ(ПараметрыУказанияСерий);
	ЭтоМаркировкаОстатковГИСМ = ИнтеграцияГИСМУТ.ЭтоМаркировкаОстатковГИСМ(ПараметрыУказанияСерий);
	ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара = ИнтеграцияГИСМУТ.ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара(НастройкиИспользованияСерий,
			                                                                                                    ПараметрыУказанияСерий);
	ЭтоМаркировкаПерсонифицированнымиКиЗ = ИнтеграцияГИСМУТ.ЭтоМаркировкаПерсонифицированнымиКиЗ(НастройкиИспользованияСерий,
																					ПараметрыУказанияСерий,
																					ЗначенияПолейСвязи);
	//																				
	Если ЭтоМаркировкаТоваровГИСМ
		Или ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара Тогда
		
		Для каждого СтрТабл Из Объект.Серии Цикл
			
			Если ЭтоМаркировкаТоваровГИСМ
				И Не ЭтоМаркировкаОстатковГИСМ Тогда
				
				Если Не СтрТабл.ЗаполненRFIDTID Тогда
					Если Не ЭтоМаркировкаПерсонифицированнымиКиЗ Тогда
						
						ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не считана RFID-метка. При маркировке неперсонифицированными %Парам1% необходимо обязательно считывать метку и записывать EPC.';
												|en = 'RFID tag is not scanned in line %НомерСтроки%. The tag must be scanned and EPC must be written while marking using non-personal %Парам1%.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "СтатусРаботыRFID");
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
						
					ИначеЕсли Не ЗначениеЗаполнено(СтрТабл.Номер) Тогда
						
						ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не заполнен номер серии. Маркировка осуществляется персонифицированными %Парам1%, поэтому номер серии записан в RFID-метку %Парам1%. Необходимо считать метку RFID-считывателем.';
												|en = 'Series number is not populated in line %НомерСтроки%. Marking is executed with %Парам1%, that is why series number is written to %Парам1% RFID tag. Scan the tag using RFID reader.'");
						
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
						Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "Номер");
						
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
					КонецЕсли;
				КонецЕсли;
				
			ИначеЕсли ЭтоПоступлениеИзТаможенногоСоюзаМаркированногоТовара Тогда
				
				Если Не СтрТабл.ЗаполненRFIDTID Тогда
					
					ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не считана RFID-метка. Оформляется ввоз из стран ЕАЭС маркируемых товаров, поэтому считывать RFID-метки обязательно.';
											|en = 'RFID tag is not read in line %НомерСтроки%. Import of marked goods from the EEU countries is registered, RFID tags must be scanned. '");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "СтатусРаботыRFID");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
					
				ИначеЕсли Не ЗначениеЗаполнено(СтрТабл.Номер)Тогда
					
					ТекстСообщения = НСтр("ru = 'По строке %НомерСтроки% не заполнен номер серии. Оформляется ввоз из стран ЕАЭС маркируемых товаров, поэтому номер серии записан в RFID-метку %Парам1%. Необходимо считать метку RFID-считывателем.';
											|en = 'Series number is not populated in line %НомерСтроки%. Import of marked goods from the EEU countries is registered, that is why the series number is written to %Парам1% RFID tag. Scan the tag using RFID reader.'");
					
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Парам1%", "КиЗ");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", Строка(СтрТабл.НомерСтроки));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", СтрТабл.НомерСтроки, "Номер");
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
				КонецЕсли;
				
			КонецЕсли
		КонецЦикла;
		
	КонецЕсли;
	//-- Локализация
	
	Если НастройкиИспользованияСерий.ИспользоватьRFIDМеткиСерии
		И НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда 
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Серии.Серия КАК Серия,
		|	Серии.НомерСтроки КАК НомерСтроки,
		|	Серии.Номер КАК Номер,
		|	Серии.RFIDTID КАК RFIDTID,
		|	Серии.НомерКиЗГИСМ КАК НомерКиЗГИСМ
		|ПОМЕСТИТЬ Серии
		|ИЗ
		|	&Серии КАК Серии
		|ГДЕ
		|	Серии.Серия = ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Серии.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Серии КАК Серии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СерииНоменклатуры КАК СерииНоменклатуры
		|		ПО (СерииНоменклатуры.ВидНоменклатуры.ИспользоватьRFIDМеткиСерии)
		|			И (Серии.RFIDTID <> """")
		|			И Серии.RFIDTID = СерииНоменклатуры.RFIDTID
		|			И (ВЫБОР
		|				КОГДА СерииНоменклатуры.ВидНоменклатуры.ИспользоватьНомерКИЗГИСМСерии
		|					ТОГДА Серии.НомерКИЗГИСМ <> СерииНоменклатуры.НомерКиЗГИСМ
		|				КОГДА СерииНоменклатуры.ВидНоменклатуры.ИспользоватьНомерСерии
		|					ТОГДА Серии.Номер <> СерииНоменклатуры.Номер
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)";
		
		Запрос.УстановитьПараметр("ВидНоменклатуры",НастройкиИспользованияСерий.ВладелецСерий);
		Запрос.УстановитьПараметр("Серии",Объект.Серии.Выгрузить());
		
		ВыборкаПоОшибкамМеток = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаПоОшибкамМеток.Следующий() Цикл
			ТекстСообщения = НСтр("ru = 'В строке %НомерСтроки% указана информация о серии с привязкой к RFID-метке, по которой уже зарегистрирована другая серия. Попробуйте считать информацию о метке еще раз.';
									|en = 'Information about the batch with link to RFID tag by which another batch is already registered is specified in line %НомерСтроки%. Try to read information about the tag again.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НомерСтроки%", ВыборкаПоОшибкамМеток.НомерСтроки);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Серии", ВыборкаПоОшибкамМеток.НомерСтроки, "СтатусРаботыRFID");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,"Объект",Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

Функция ДобавитьСериюПоИнформацииОМетке(ТекущаяМетка, Параметры, ТЧСерии, ИдентификаторТекущейСтроки) Экспорт
	
	ОбрабатываемаяСтрока = Неопределено;
	
	//++ Локализация
	Если Параметры.НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		
		ИнформацияПоКиЗ = ИнтеграцияГИСМ.ИнформацияОКиЗПоRFIDTID(ТекущаяМетка.TID);
		
		Если ЗначениеЗаполнено(ИнформацияПоКиЗ.НомерКиЗ) Тогда
			ОбрабатываемаяСтрока = ИнтеграцияГИСМУТ.ДобавитьСериюПоИнформацииПоКиЗ(ИнформацияПоКиЗ, Параметры, ТЧСерии, ИдентификаторТекущейСтроки);
		КонецЕсли;
		
	КонецЕсли;
	//-- Локализация
	
	Возврат ОбрабатываемаяСтрока;
	
КонецФункции

Процедура РеквизитыСерииИзСтроки(РеквизитыСерии, Знач ВведеннаяСтрока, НастройкиИспользованияСерий) Экспорт
	
	ГоденДо = Неопределено;
	Номер   = Неопределено;
	НомерКиЗГИСМ = Неопределено;
	
	ВведеннаяСтрока = СтрЗаменить(ВведеннаяСтрока, " "+" "," ");
	
	Если НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии Тогда
		СтрокаГоденДо			= "";
		ФорматСтрокиГодности	= "";
		
		Для Каждого ОписаниеРеквизита Из НастройкиИспользованияСерий.ОписанияИспользованияРеквизитовСерии Цикл
			Если ОписаниеРеквизита.ИмяРеквизита = "ГоденДо" Тогда
				ФорматСтрокиГодности = ОписаниеРеквизита.Формат;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов") Тогда
			ДлинаСтрокиГоденДо = СтрДлина(ФорматСтрокиГодности) - 5; // 5 = СтрДлина("ДФ=''")
		Иначе	
			ДлинаСтрокиГоденДо = СтрДлина(ФорматСтрокиГодности) - 3; // 3 = СтрДлина("ДФ=")
		КонецЕсли;
		
		Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
			ПозицияДо = СтрНайти(ВведеннаяСтрока, НСтр("ru = 'до';
														|en = 'to'"));
			СтрокаГоденДо = СокрЛП(Сред(ВведеннаяСтрока, ПозицияДо+3, ДлинаСтрокиГоденДо));
		Иначе
			СтрокаГоденДо = Прав(СокрЛП(ВведеннаяСтрока), ДлинаСтрокиГоденДо);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьСрокГодностиСерии Тогда
		
		Если СтрДлина(СтрокаГоденДо) <> ДлинаСтрокиГоденДо Тогда
			ГоденДо = '00010101';
		КонецЕсли;
		
		Если ГоденДо = Неопределено Тогда
			МассивЧастей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаГоденДо,".");
			
			Если (НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев")
					И МассивЧастей.Количество() < 2)
				Или (НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии <> ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев")
					И МассивЧастей.Количество() < 3) Тогда
				
				ГоденДо = '00010101';
				
			КонецЕсли;
		КонецЕсли;
		
		Если ГоденДо = Неопределено Тогда
			Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии <> ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоМесяцев") Тогда
				День  = МассивЧастей[0];
				Месяц = МассивЧастей[1];
			Иначе
				День  = "01";
				Месяц = МассивЧастей[0];
				Год   = МассивЧастей[1];
			КонецЕсли;
			
			Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоЧасов") Тогда
				ГодЧас =  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(МассивЧастей[2]," ");
				Если ГодЧас.Количество() = 2 Тогда
					Год = ГодЧас[0];
					Час = ГодЧас[1];
				ИначеЕсли ГодЧас.Количество() = 1 Тогда
					Год = ГодЧас[0];
					Час = "00";
				Иначе
					Год = "00";
					Час = "00";
				КонецЕсли;	
			Иначе
				Если НастройкиИспользованияСерий.ТочностьУказанияСрокаГодностиСерии = ПредопределенноеЗначение("Перечисление.ТочностиУказанияСрокаГодности.СТочностьюДоДней") Тогда
					Год = МассивЧастей[2];
				КонецЕсли;
				Час = "00";
			КонецЕсли;
			
			Если СтрНайти(Час, ":") > 0 Тогда
				Час = Лев(Час, СтрНайти(Час, ":") - 1);
			КонецЕсли;
			
			ДатаСтрокой = "20" + Год + Месяц + День + Час + "0000";
			
			ТипДата = Новый ОписаниеТипов("Дата");
			ГоденДо = ТипДата.ПривестиЗначение(ДатаСтрокой);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
		Если ЗначениеЗаполнено(ГоденДо) Тогда
			Номер = СтрЗаменить(ВведеннаяСтрока," " + НСтр("ru = 'до';
															|en = 'to'") + " " + СтрокаГоденДо, "");
		Иначе
			Номер = ВведеннаяСтрока;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиИспользованияСерий.ИспользоватьНомерКИЗГИСМСерии Тогда
		Если НастройкиИспользованияСерий.ИспользоватьНомерСерии Тогда
			ПозицияКиЗ = СтрНайти(ВРег(Номер),НСтр("ru = 'КИЗ';
													|en = 'CIM'"));
			НомерКиЗГИСМ = ВРег(СокрЛП(Сред(Номер, ПозицияКиЗ + 4)));
			Номер = СокрЛП(Лев(Номер,ПозицияКиЗ-2));
		Иначе
			Если ЗначениеЗаполнено(ГоденДо) Тогда
				НомерКиЗГИСМ = СтрЗаменить(ВведеннаяСтрока," " + НСтр("ru = 'до';
																		|en = 'to'") + " " + СтрокаГоденДо, "");
			Иначе
				НомерКиЗГИСМ = ВведеннаяСтрока;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Номер <> Неопределено Тогда
		РеквизитыСерии.Номер = Номер;
	КонецЕсли;
	
	Если ГоденДо <> Неопределено Тогда
		РеквизитыСерии.ГоденДо = ГоденДо;
	КонецЕсли;
	
	Если НомерКиЗГИСМ  <> Неопределено Тогда
		РеквизитыСерии.НомерКиЗГИСМ = НомерКиЗГИСМ;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

// Параметры:
// 	ШтрихкодыПоТипам - см. ШтрихкодированиеНоменклатурыСервер.СтруктураПоТипамШтрихкодов
// 	ШтрихКод - см. ШтрихкодированиеНоменклатурыКлиент.СтруктураДанныхШтрихкода
// 	
// Возвращаемое значение:
// 	Булево - это типизированный штрих-код
// 
Функция ОтнестиШтрихкодКТипу(ШтрихкодыПоТипам, ШтрихКод) Экспорт
	
	ЭтоТипизированныйШтрихКод = Ложь;
	
	//++ Локализация
	Если Не ШтрихкодыПоТипам.Свойство("АкцизныеМарки") Тогда
		ШтрихкодыПоТипам.Вставить("АкцизныеМарки", Новый Массив);
	КонецЕсли;
	Если Не ШтрихкодыПоТипам.Свойство("КиЗ") Тогда
		ШтрихкодыПоТипам.Вставить("КиЗ", Новый Массив);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийПоАлкогольнойПродукции")
		И ШтрихкодированиеЕГАИС.ЭтоШтрихкодАкцизнойМарки(ШтрихКод.Штрихкод) Тогда
		
		ШтрихкодыПоТипам.АкцизныеМарки.Добавить(ШтрихКод);
		ЭтоТипизированныйШтрихКод = Истина;
	ИначеЕсли ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ")
		И ИнтеграцияГИСМКлиентСервер.ЭтоНомерКиЗ(ШтрихКод.Штрихкод) Тогда
		
		ШтрихкодыПоТипам.КиЗ.Добавить(ШтрихКод);
		ЭтоТипизированныйШтрихКод = Истина;
	КонецЕсли;
	//-- Локализация
	
	Возврат ЭтоТипизированныйШтрихКод; 
	
КонецФункции

#КонецОбласти

#Область ПолитикиУчетаСерий

Процедура ПередЗаписьюПолитикиУчетаСерий(Объект) Экспорт
	
	Если Объект.УказыватьПриМаркировкеПродукцииДляГИСМ Тогда
		Объект.ДляСклада = Истина;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

// Возвращает массив областей поиска товаров.
//
// Параметры:
// 	ОбластиПоиска - Массив - Массив метаданных областей поиска товаров.
// 	Форма - ФормаКлиентскогоПриложения - форма, из которой была вызвана функция поиска.
// 	ПараметрыПоиска - Структура
//
Процедура ОписанияОбластейПоиска(ОбластиПоиска, Форма, ПараметрыПоиска) Экспорт
	
	//++ Локализация
	
	Если ПараметрыПоиска.ИмяСпискаПоиска = "Номенклатура" Тогда
				
		Если ПолучитьФункциональнуюОпцию("ИспользованиеКлассификаторовНоменклатуры") Тогда
			
			Если ПолучитьФункциональнуюОпцию("ИспользованиеСтарыхКлассификаторовОКПиОКВЭД") Тогда
				
				ОписаниеОбластиПоиска                             = ПодборТоваровСервер.ОписаниеОбластиПоиска();
				ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.ОбщероссийскийКлассификаторПродукции;
				ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
				"ВЫБРАТЬ ПЕРВЫЕ 999
				|	ОбщероссийскийКлассификаторПродукции.Ссылка КАК Значение,
				|	""ОбщероссийскийКлассификаторПродукции"" КАК Метаданные
				|ИЗ
				|	Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
				|ГДЕ
				|	ОбщероссийскийКлассификаторПродукции.Код = &УсловиеСравнения";
				ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Номенклатура
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ОбщероссийскийКлассификаторПродукции КАК ОбщероссийскийКлассификаторПродукции
				|		ПО Номенклатура.КодОКП = ОбщероссийскийКлассификаторПродукции.Ссылка
				|ГДЕ
				|	ОбщероссийскийКлассификаторПродукции.Ссылка В(&ОбщероссийскийКлассификаторПродукции)";
				ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
			
			КонецЕсли;
			
			ОписаниеОбластиПоиска                             = ПодборТоваровСервер.ОписаниеОбластиПоиска();
			ОписаниеОбластиПоиска.ОбъектМетаданных            = Метаданные.Справочники.КлассификаторОКПД2;
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаПоОбласти =
			"ВЫБРАТЬ ПЕРВЫЕ 999
			|	КлассификаторОКПД2.Ссылка КАК Значение,
			|	""КлассификаторОКПД2"" КАК Метаданные
			|ИЗ
			|	Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
			|ГДЕ
			|	КлассификаторОКПД2.Код = &УсловиеСравнения";
			ОписаниеОбластиПоиска.ТекстЗапросаПоискаНоменклатуры =
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка КАК Номенклатура
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОКПД2 КАК КлассификаторОКПД2
			|		ПО Номенклатура.КодОКПД2 = КлассификаторОКПД2.Ссылка
			|ГДЕ
			|	КлассификаторОКПД2.Ссылка В(&КлассификаторОКПД2)";
			ОбластиПоиска.Добавить(ОписаниеОбластиПоиска);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//-- Локализация
	
	Возврат;
	
КонецПроцедуры

Процедура НастроитьФормуИОбновитьКарточку(Форма) Экспорт
	
	//++ Локализация
	ВидПродукции = ИнтеграцияИСУТКлиентСервер.ОсобенностьУчетаПоВидуПродукции(Форма.Объект.ОсобенностьУчета);
	Если ИнтеграцияИСПовтИсп.ЭтоПродукцияИСМП(ВидПродукции, Истина) Тогда
		ИнтеграцияИСМПУТ.ЗаполнитьЗначениеПолейПоВидамУпаковок(Форма);
		ИнтеграцияИСМПУТКлиентСервер.НастройкаЭлементовВидаУпаковки(Форма, Истина);
		ИнтеграцияИСМПУТ.ЗаполнитьПредставлениеТипаНоменклатуры(Форма);
	КонецЕсли;
	//-- Локализация
	Возврат;
	
КонецПроцедуры

//++ Локализация

Функция ГлаваВидна(ИмяГлавы, СтруктураВидимости)
	
	Если ИмяГлавы = "РегламентированныйУчет" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("ПодакцизныйТовар", СтруктураВидимости)
					Или Справочники.Номенклатура.РазделВиден("ВестиУчетПоГТД", СтруктураВидимости)
					Или Справочники.Номенклатура.РазделВиден("ГиперссылкаПерейтиДрагоценныеМатериалы", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "СведенияОбАлкогольнойПродукции" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("ВидАлкогольнойПродукции", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "КиЗГИСМ" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("КиЗГИСМВид", СтруктураВидимости);
	КонецЕсли;
	
	Если ИмяГлавы = "ОбщероссийскиеКлассификаторы" Тогда
		Возврат Справочники.Номенклатура.РазделВиден("КодОКВЭД", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодОКВЭД2", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодОКП", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодОКПД2", СтруктураВидимости)
				Или Справочники.Номенклатура.РазделВиден("КодВидаНоменклатурнойКлассификации", СтруктураВидимости);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

//-- Локализация

Функция РеквизитыАлкогольнойПродукции()
	
	РеквизитыАлкогольнойПродукции = Новый Массив;
	
	РеквизитыАлкогольнойПродукции.Добавить("ВидАлкогольнойПродукции");
	РеквизитыАлкогольнойПродукции.Добавить("ИмпортнаяАлкогольнаяПродукция");
	РеквизитыАлкогольнойПродукции.Добавить("ОбъемДАЛ");
	РеквизитыАлкогольнойПродукции.Добавить("Крепость");
	РеквизитыАлкогольнойПродукции.Добавить("АлкогольнаяПродукцияВоВскрытойТаре");
	
	Возврат РеквизитыАлкогольнойПродукции;
	
КонецФункции

Функция РеквизитыГИСМ(ИсключитьНепроверяемыеРеквизиты = Ложь)
	
	РеквизитыГИСМ = Новый Массив;
	
	РеквизитыГИСМ.Добавить("КиЗГИСМВид");
	РеквизитыГИСМ.Добавить("КиЗГИСМСпособВыпускаВОборот");
	РеквизитыГИСМ.Добавить("КиЗГИСМРазмер");
	
	Если Не ИсключитьНепроверяемыеРеквизиты Тогда
		РеквизитыГИСМ.Добавить("КиЗГИСМGTIN");
	КонецЕсли;
	
	Возврат РеквизитыГИСМ;
	
КонецФункции

Функция РеквизитыОбщероссийскихКлассификаторов()
	
	РеквизитыОбщероссийскихКлассификаторов = Новый Массив;
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКВЭД");
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКВЭД2");
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКП");
	РеквизитыОбщероссийскихКлассификаторов.Добавить("КодОКПД2");
	
	Возврат РеквизитыОбщероссийскихКлассификаторов;
	
КонецФункции

Процедура ЗаполнитьТекстМаркируемаяПродукция(ПолеЗапроса, ПутьКПолюНоменклатура) Экспорт
	
	//++ Локализация
	ПолеЗапроса = ИнтеграцияИСУТ.ОпределениеПризнакаМаркируемаяПродукцияТекстаЗапроса(ПутьКПолюНоменклатура);
	//-- Локализация
	Возврат;
	
КонецПроцедуры

#КонецОбласти
