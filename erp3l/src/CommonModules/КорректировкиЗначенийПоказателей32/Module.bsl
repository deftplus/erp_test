Функция ПолучитьДанныеУчетнойПолитики(Организация,Сценарий,Период) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ВалютаУчета КАК ВалютаУчета,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ВалютаУчетаДоп КАК ВалютаУчетаДоп,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ШаблонТрансляции КАК ШаблонТрансляции,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ШаблонТрансляции.НаправлениеТрансляции КАК НаправлениеТрансляции,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.СпособТрансляции КАК СпособТрансляции,
	             |	УчетныеПолитикиМСФО.Период КАК Период,
	             |	ВЫБОР
	             |		КОГДА УчетныеПолитикиМСФО.Организация = &Организация
	             |			ТОГДА 1
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК СтепеньСоответствия,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ВалютаИсточник КАК ВалютаИсточник,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ВалютаИсточникДоп КАК ВалютаИсточникДоп,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика.ПланСчетовУчета КАК ПланСчетовУчета
	             |ИЗ
	             |	РегистрСведений.УчетныеПолитикиМСФО КАК УчетныеПолитикиМСФО
	             |ГДЕ
	             |	(УчетныеПолитикиМСФО.Организация = &Организация
	             |			ИЛИ УчетныеПолитикиМСФО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	             |	И УчетныеПолитикиМСФО.Сценарий = &Сценарий
	             |	И УчетныеПолитикиМСФО.Период <= &Период
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	УчетныеПолитикиМСФО.Период УБЫВ,
	             |	СтепеньСоответствия УБЫВ";
	
	Запрос.УстановитьПараметр("Период",?(ЗначениеЗаполнено(Период),Период,ТекущаяДатаСеанса()));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Сценарий",?(ЗначениеЗаполнено(Сценарий),Сценарий,Справочники.Сценарии.Факт));
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ВалютаУчета",			Результат.ВалютаУчета);
		СтруктураПараметров.Вставить("ВалютаУчетаДоп",		Результат.ВалютаУчетаДоп);
		СтруктураПараметров.Вставить("ВалютаИсточник",		Результат.ВалютаИсточник);
		СтруктураПараметров.Вставить("ВалютаИсточникДоп",	Результат.ВалютаИсточникДоп);
		СтруктураПараметров.Вставить("ШаблонТрансляции",	Результат.ШаблонТрансляции);
		СтруктураПараметров.Вставить("СпособТрансляции",	Результат.СпособТрансляции);
		СтруктураПараметров.Вставить("УчетнаяПолитика",		Результат.УчетнаяПолитика);
		СтруктураПараметров.Вставить("НаправлениеТрансляции",Результат.НаправлениеТрансляции);
		СтруктураПараметров.Вставить("ПланСчетовУчета",		Результат.ПланСчетовУчета);
		
		
		Возврат СтруктураПараметров;
		
	Иначе
		
		ВалютаРеглУчета=Константы.ВалютаРегламентированногоУчета.Получить(); 
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ВалютаУчета",			ВалютаРеглУчета);
		СтруктураПараметров.Вставить("ВалютаУчетаДоп",		ВалютаРеглУчета);
		СтруктураПараметров.Вставить("ВалютаИсточник",		ВалютаРеглУчета);
		СтруктураПараметров.Вставить("ВалютаИсточникДоп",	ВалютаРеглУчета);
				
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		             |	ШаблоныТрансляций.Ссылка КАК Ссылка,
		             |	ШаблоныТрансляций.НаправлениеТрансляции КАК НаправлениеТрансляции
		             |ИЗ
		             |	Справочник.ШаблоныТрансляций КАК ШаблоныТрансляций
		             |ГДЕ
		             |	ШаблоныТрансляций.РегистрБухгалтерииПриемник = &МСФО
		             |	И ШаблоныТрансляций.РегистрБухгалтерииИсточник = &Хозрасчетный";
		
		Запрос.УстановитьПараметр("МСФО",			Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию("МСФО",			Истина,,Справочники.ТипыБазДанных.ТекущаяИБ));
		Запрос.УстановитьПараметр("Хозрасчетный",	Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию("Хозрасчетный",	Истина,,Справочники.ТипыБазДанных.ТекущаяИБ));
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			СтруктураПараметров.Вставить("ШаблонТрансляции",Результат.Ссылка);
			СтруктураПараметров.Вставить("НаправлениеТрансляции",Результат.НаправлениеТрансляции);
			
		Иначе
			
			СтруктураПараметров.Вставить("ШаблонТрансляции",Справочники.ШаблоныТрансляций.ПустаяСсылка());
			СтруктураПараметров.Вставить("НаправлениеТрансляции",Перечисления.НаправленияТрансляцииДанных.ПустаяСсылка());
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("СпособТрансляции",Перечисления.СпособыТрансляции.СводныеПоДатам);
		СтруктураПараметров.Вставить("УчетнаяПолитика");
		СтруктураПараметров.Вставить("ПланСчетовУчета",Константы.ПланСчетовПоУмолчанию.Получить());
	
		Возврат СтруктураПараметров;
		
	КонецЕсли;
				
КонецФункции // ПолучитьУчетнуюПолитику()

Функция ПолучитьПланСчетовОрганизации(Организация,Сценарий,Период) Экспорт
	
	Возврат ПолучитьДанныеУчетнойПолитики(Организация,Сценарий,Период).ПланСчетовУчета;	
			
КонецФункции // ПолучитьПланСчетовОрганизации() 


Функция ПолучитьТаблицаДанныхТрансляции(Организация,ИмяРегистра,Период)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ШаблоныТрансляций.Ссылка КАК ШаблоныТрансляций
	             |ПОМЕСТИТЬ ВозможныеШаблоны
	             |ИЗ
	             |	Справочник.ШаблоныТрансляций КАК ШаблоныТрансляций
	             |ГДЕ
	             |	ШаблоныТрансляций.РегистрБухгалтерииИсточник = &РегистрБухгалтерииИсточник
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УчетныеПолитикиМСФО.Период КАК Период,
	             |	УчетныеПолитикиМСФО.Организация КАК Организация,
	             |	УчетныеПолитикиМСФО.Сценарий КАК Сценарий,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	ВЫБОР
	             |		КОГДА УчетныеПолитикиМСФО.Организация = &Организация
	             |			ТОГДА 1
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК УровеньСоответствия
	             |ПОМЕСТИТЬ УчетныеПолитикиОрганизации
	             |ИЗ
	             |	РегистрСведений.УчетныеПолитикиМСФО КАК УчетныеПолитикиМСФО
	             |ГДЕ
	             |	(УчетныеПолитикиМСФО.Организация = &Организация
	             |			ИЛИ УчетныеПолитикиМСФО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	             |	И УчетныеПолитикиМСФО.Период <= &Период
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УчетныеПолитикиОрганизации.Сценарий КАК Сценарий,
	             |	МАКСИМУМ(УчетныеПолитикиОрганизации.Период) КАК Период
	             |ПОМЕСТИТЬ ДатыСценариев
	             |ИЗ
	             |	УчетныеПолитикиОрганизации КАК УчетныеПолитикиОрганизации
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УчетныеПолитикиОрганизации.Сценарий
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДатыСценариев.Сценарий КАК Сценарий,
	             |	ДатыСценариев.Период КАК Период,
	             |	МАКСИМУМ(УчетныеПолитикиОрганизации.УровеньСоответствия) КАК УровеньСоответствия
	             |ПОМЕСТИТЬ ДатыСценариевСоответствие
	             |ИЗ
	             |	ДатыСценариев КАК ДатыСценариев
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеПолитикиОрганизации КАК УчетныеПолитикиОрганизации
	             |		ПО ДатыСценариев.Сценарий = УчетныеПолитикиОрганизации.Сценарий
	             |			И ДатыСценариев.Период = УчетныеПолитикиОрганизации.Период
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДатыСценариев.Сценарий,
	             |	ДатыСценариев.Период
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	УчетныеПолитикиОрганизации.Сценарий КАК Сценарий,
	             |	УчетныеПолитикиОрганизации.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	УчетныеПолитикиОрганизации.УчетнаяПолитика.ШаблонТрансляции КАК ШаблонТрансляции,
	             |	УчетныеПолитикиОрганизации.УчетнаяПолитика.СпособТрансляции КАК СпособТрансляции
	             |ПОМЕСТИТЬ УчетныеПолитики
	             |ИЗ
	             |	ДатыСценариевСоответствие КАК ДатыСценариевСоответствие
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеПолитикиОрганизации КАК УчетныеПолитикиОрганизации
	             |		ПО ДатыСценариевСоответствие.Сценарий = УчетныеПолитикиОрганизации.Сценарий
	             |			И ДатыСценариевСоответствие.Период = УчетныеПолитикиОрганизации.Период
	             |			И ДатыСценариевСоответствие.УровеньСоответствия = УчетныеПолитикиОрганизации.УровеньСоответствия
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	&Организация КАК Организация,
	             |	ЛОЖЬ КАК Обработано,
	             |	УчетныеПолитики.Сценарий КАК Сценарий,
	             |	УчетныеПолитики.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	УчетныеПолитики.ШаблонТрансляции КАК ШаблонТрансляции,
	             |	УчетныеПолитики.СпособТрансляции КАК СпособТрансляции
	             |ИЗ
	             |	УчетныеПолитики КАК УчетныеПолитики
	             |ГДЕ
	             |	УчетныеПолитики.СпособТрансляции <> ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.СводныеПоДатам)
	             |	И УчетныеПолитики.ШаблонТрансляции В
	             |			(ВЫБРАТЬ
	             |				ВозможныеШаблоны.ШаблоныТрансляций
	             |			ИЗ
	             |				ВозможныеШаблоны)";
	
	Запрос.УстановитьПараметр("РегистрБухгалтерииИсточник",КэшируемыеПроцедурыУХ.ПолучитьОписаниеРегистраТекущейИБ(ИмяРегистра));
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Период",Период);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьМассивДанныхТрансляция() 

Функция ПолучитьТаблицаДанныхТрансляцииРегистров(Организация,Период)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ШаблоныТрансляций.Ссылка КАК ШаблоныТрансляций
	             |ПОМЕСТИТЬ ВозможныеШаблоны
	             |ИЗ
	             |	Справочник.ШаблоныТрансляций КАК ШаблоныТрансляций
	             |ГДЕ
	             |	ШаблоныТрансляций.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии)
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УчетныеПолитикиМСФО.Период КАК Период,
	             |	УчетныеПолитикиМСФО.Организация КАК Организация,
	             |	УчетныеПолитикиМСФО.Сценарий КАК Сценарий,
	             |	УчетныеПолитикиМСФО.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	ВЫБОР
	             |		КОГДА УчетныеПолитикиМСФО.Организация = &Организация
	             |			ТОГДА 1
	             |		ИНАЧЕ 0
	             |	КОНЕЦ КАК УровеньСоответствия
	             |ПОМЕСТИТЬ УчетныеПолитикиОрганизации
	             |ИЗ
	             |	РегистрСведений.УчетныеПолитикиМСФО КАК УчетныеПолитикиМСФО
	             |ГДЕ
	             |	(УчетныеПолитикиМСФО.Организация = &Организация
	             |			ИЛИ УчетныеПолитикиМСФО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	             |	И УчетныеПолитикиМСФО.Период <= &Период
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	УчетныеПолитикиОрганизации.Сценарий КАК Сценарий,
	             |	МАКСИМУМ(УчетныеПолитикиОрганизации.Период) КАК Период
	             |ПОМЕСТИТЬ ДатыСценариев
	             |ИЗ
	             |	УчетныеПолитикиОрганизации КАК УчетныеПолитикиОрганизации
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	УчетныеПолитикиОрганизации.Сценарий
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ДатыСценариев.Сценарий КАК Сценарий,
	             |	ДатыСценариев.Период КАК Период,
	             |	МАКСИМУМ(УчетныеПолитикиОрганизации.УровеньСоответствия) КАК УровеньСоответствия
	             |ПОМЕСТИТЬ ДатыСценариевСоответствие
	             |ИЗ
	             |	ДатыСценариев КАК ДатыСценариев
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеПолитикиОрганизации КАК УчетныеПолитикиОрганизации
	             |		ПО ДатыСценариев.Сценарий = УчетныеПолитикиОрганизации.Сценарий
	             |			И ДатыСценариев.Период = УчетныеПолитикиОрганизации.Период
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ДатыСценариев.Сценарий,
	             |	ДатыСценариев.Период
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	УчетныеПолитикиОрганизации.Сценарий КАК Сценарий,
	             |	УчетныеПолитикиОрганизации.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	УчетныеПолитикиОрганизации.УчетнаяПолитика.ШаблонТрансляции КАК ШаблонТрансляции,
	             |	УчетныеПолитикиОрганизации.УчетнаяПолитика.СпособТрансляции КАК СпособТрансляции
	             |ПОМЕСТИТЬ УчетныеПолитики
	             |ИЗ
	             |	ДатыСценариевСоответствие КАК ДатыСценариевСоответствие
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УчетныеПолитикиОрганизации КАК УчетныеПолитикиОрганизации
	             |		ПО ДатыСценариевСоответствие.Сценарий = УчетныеПолитикиОрганизации.Сценарий
	             |			И ДатыСценариевСоответствие.Период = УчетныеПолитикиОрганизации.Период
	             |			И ДатыСценариевСоответствие.УровеньСоответствия = УчетныеПолитикиОрганизации.УровеньСоответствия
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	&Организация КАК Организация,
	             |	ЛОЖЬ КАК Обработано,
	             |	УчетныеПолитики.Сценарий КАК Сценарий,
	             |	УчетныеПолитики.УчетнаяПолитика КАК УчетнаяПолитика,
	             |	УчетныеПолитики.ШаблонТрансляции КАК ШаблонТрансляции,
	             |	УчетныеПолитики.СпособТрансляции КАК СпособТрансляции
	             |ИЗ
	             |	УчетныеПолитики КАК УчетныеПолитики
	             |ГДЕ
	             |	УчетныеПолитики.СпособТрансляции <> ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.СводныеПоДатам)
	             |	И УчетныеПолитики.ШаблонТрансляции В
	             |			(ВЫБРАТЬ
	             |				ВозможныеШаблоны.ШаблоныТрансляций
	             |			ИЗ
	             |				ВозможныеШаблоны)";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Период",Период);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьМассивДанныхТрансляция()

Функция ПолучитьСпособТрансляции(Организация,Период,Сценарий) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеПолитикиМСФО.УчетнаяПолитика.СпособТрансляции КАК СпособТрансляции
	|ИЗ
	|	РегистрСведений.УчетныеПолитикиМСФО КАК УчетныеПолитикиМСФО
	|ГДЕ
	|	УчетныеПолитикиМСФО.Сценарий = &Сценарий
	|	И (УчетныеПолитикиМСФО.Организация = &Организация
	|			ИЛИ УчетныеПолитикиМСФО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И УчетныеПолитикиМСФО.Период <= &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	УчетныеПолитикиМСФО.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Период",		Период);
	Запрос.УстановитьПараметр("Сценарий",	Сценарий);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.СпособТрансляции;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
			
КонецФункции // ПолучитьМассивДанныхТрансляция()


Функция ВозможнаТрансляцияПоДокументам(Организация) Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	УчетныеПолитикиМСФО.УчетнаяПолитика КАК УчетнаяПолитика
	|ИЗ
	|	РегистрСведений.УчетныеПолитикиМСФО КАК УчетныеПолитикиМСФО
	|ГДЕ
	|	(УчетныеПолитикиМСФО.Организация = &Организация
	|			ИЛИ УчетныеПолитикиМСФО.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И УчетныеПолитикиМСФО.УчетнаяПолитика.СпособТрансляции <> ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.СводныеПоДатам)";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции // ВозможнаТрансляцияПоДокументам() 

Процедура ПриИзмененииРегистраБухгалтерииТрансляция(Источник, Отказ, РежимЗаписи) Экспорт
		
	Если Источник.Количество()>0 Тогда
		
		ИмяРегистра=Источник.Метаданные().Имя;
		
		ДанныеПроведения=Источник[0];
		ИсходныйДокумент=ДанныеПроведения.Регистратор;
		Организация		=ДанныеПроведения.Организация;
		
		ТаблицаДанныхТрансляции= ПолучитьТаблицаДанныхТрансляции(Организация,ИмяРегистра,ДанныеПроведения.Период);
		
		НаборЗаписей=РегистрыСведений.ОтражениеДокументовПоШаблонам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходныйДокумент.Установить(ИсходныйДокумент);
		НаборЗаписей.Отбор.Трансляция.Установить(Истина);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
						
			Для Каждого ДанныеТрансляции ИЗ ТаблицаДанныхТрансляции Цикл
					
				ДобавитьОбъектВОбработку(ДанныеПроведения,ДанныеТрансляции,НаборЗаписей,ИсходныйДокумент);
				
			КонецЦикла;
			
		Иначе
						
			Для Каждого ДанныеОбъекта Из НаборЗаписей Цикл
				
				МассивДанныхТрансляции=ТаблицаДанныхТрансляции.НайтиСтроки(Новый Структура("Организация,Сценарий,ШаблонТрансляции",ДанныеОбъекта.Организация,ДанныеОбъекта.Сценарий,ДанныеОбъекта.ШаблонОперации));
				
				Если МассивДанныхТрансляции.Количество()=0 Тогда // Изменились настройки учетной политики
					
					ОтменитьОбработкуОбъекта(ДанныеОбъекта,ИсходныйДокумент);
					
				Иначе	
					
					ДанныеОбъекта.ПериодОтбора=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДанныеПроведения.Период,КэшируемыеПроцедурыУХ.ПолучитьПериодичностьТрансляцииПроводок(),0);
					ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеОбъекта.Организация);
					ДанныеОбъекта.УчетнаяПолитика=МассивДанныхТрансляции[0].УчетнаяПолитика;
					
					УправлениеОтчетамиУХ.ОбработатьДанныеОбъекта(ДанныеОбъекта,МассивДанныхТрансляции[0].СпособТрансляции,ДанныеЗакрытияПериода);
					
					МассивДанныхТрансляции[0].Обработано=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			МассивДанныхТрансляции=ТаблицаДанныхТрансляции.НайтиСтроки(Новый Структура("Обработано",Ложь));
			
			Для Каждого ДанныеТрансляции ИЗ МассивДанныхТрансляции Цикл // Изменились настройки учетной политики
					
				ДобавитьОбъектВОбработку(ДанныеПроведения,ДанныеТрансляции,НаборЗаписей,ИсходныйДокумент);
				
			КонецЦикла;
			
		КонецЕсли;
				
		НаборЗаписей.Записать(Истина);
		
		Если ТаблицаДанныхТрансляции.Количество()=0 Тогда
			
			УправлениеОтчетамиУХ.УстановитьПризнакДляСводнойТрансляции(Источник);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого ЭлементОтбора ИЗ Источник.Отбор Цикл
			
			Если ЭлементОтбора.Имя="Регистратор" Тогда
				
				ИсходныйДокумент=ЭлементОтбора.Значение;
				Прервать
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Организация",ИсходныйДокумент) Тогда
									
			УправлениеОтчетамиУХ.УстановитьПризнакДляСводнойТрансляции(Источник);
			Возврат;
			
		КонецЕсли;
		
		НаборЗаписей=РегистрыСведений.ОтражениеДокументовПоШаблонам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходныйДокумент.Установить(ИсходныйДокумент);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ДанныеОбъекта ИЗ НаборЗаписей Цикл
			
			ОтменитьОбработкуОбъекта(ДанныеОбъекта,ИсходныйДокумент);
							
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
		
КонецПроцедуры // ПриИзмененииРегистраБухгалтерииТрансляция()

Процедура ДобавитьОбъектВОбработку(ДанныеПроведения,ДанныеТрансляции,НаборЗаписей,ИсходныйДокумент)
	
	ДанныеОбъекта=НаборЗаписей.Добавить();
	ДанныеОбъекта.ИсходныйДокумент	=ИсходныйДокумент;
	ДанныеОбъекта.Организация		=ДанныеПроведения.Организация;
	ДанныеОбъекта.Сценарий			=ДанныеТрансляции.Сценарий;
	ДанныеОбъекта.УчетнаяПолитика	=ДанныеТрансляции.УчетнаяПолитика;
	ДанныеОбъекта.ШаблонОперации	=ДанныеТрансляции.ШаблонТрансляции;
	ДанныеОбъекта.ПериодОтбора		=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДанныеПроведения.Период,КэшируемыеПроцедурыУХ.ПолучитьПериодичностьТрансляцииПроводок(),0);
	ДанныеОбъекта.Трансляция=Истина;
	
	ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеПроведения.Организация);
	
	УправлениеОтчетамиУХ.ОбработатьДанныеОбъекта(ДанныеОбъекта,ДанныеТрансляции.СпособТрансляции,ДанныеЗакрытияПериода);
		
КонецПроцедуры // ДобавитьОбъектВОбработку()

Процедура ОтменитьОбработкуОбъекта(ДанныеОбъекта,ИсходныйДокумент)
	
	ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеОбъекта.Организация);
	
	ДанныеОбъекта.ПроведениеОтменено=Истина;
	ДанныеОбъекта.ОбработкаВыполнена=Перечисления.ДаНет.нет;
	
	Если ДанныеЗакрытияПериода=Неопределено Тогда
		
		ДанныеОбъекта.ДатаЗакрытияПериодаОтражения="";
		ДанныеОбъекта.ДатаЗаписиДоЗакрытияПериода=ТекущаяДатаСеанса();
		ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода="";
		
	ИначеЕсли ДанныеЗакрытияПериода.ДатаЗакрытияПериода<ИсходныйДокумент.Дата Тогда 
		
		ДанныеОбъекта.ДатаЗакрытияПериодаОтражения=ДанныеЗакрытияПериода.ДатаЗакрытияПериода;
		ДанныеОбъекта.ДатаЗаписиДоЗакрытияПериода=ТекущаяДатаСеанса();
		ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода="";
		
	Иначе
		
		ДанныеОбъекта.ДатаЗакрытияПериодаОтражения=ДанныеЗакрытияПериода.ДатаЗакрытияПериода;
		ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода=ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	РегистрыСведений.ОтражениеДокументовПоШаблонам.ВыполнитьОтражениеОбъекта(ДанныеОбъекта);
		
КонецПроцедуры // ОтменитьОбработкуОбъекта()

Функция ОбработатьКорректировкиПоПараметрам(ВидКорректировки,
											ПериодСценария, 
											Сценарий, 
											Организация, 
											ШаблонКорректировки, 
											ДатаНачалаРасчетная,
											ДокументКорректировки=Неопределено,
											ПериодОтражения=Неопределено,
											ИсходныйДокумент=Неопределено,
											УчетнаяПолитика=Неопределено) Экспорт
		
	ИмяОбъектаМетаданных = ?(ВидКорректировки = Перечисления.ВидыДокументовЭтапа.ДокументыТрансляции, "Трансляция", "ТрансформационнаяКорректировка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыКорректировки.Ссылка КАК ДокументКорректировки,
	|	ДокументыКорректировки.ПометкаУдаления КАК ПометкаУдаления,	
	|	ДокументыКорректировки.НеВноситьИзменения КАК НеВноситьИзменения
	|ИЗ
	|	Документ." + ИмяОбъектаМетаданных + " КАК ДокументыКорректировки
	|ГДЕ";
	
	Если ДокументКорректировки=Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст+"
		|	ДокументыКорректировки.Организация 				= &Организация
		|	И ДокументыКорректировки.ПериодОтчета 			= &ПериодОтчета
		|	И ДокументыКорректировки.Сценарий 				= &Сценарий
		|	И ДокументыКорректировки.ШаблонКорректировки 	= &ШаблонКорректировки";
		
		Запрос.УстановитьПараметр("Организация",        	Организация);
		Запрос.УстановитьПараметр("ПериодОтчета",       	ПериодСценария);
		Запрос.УстановитьПараметр("Сценарий",           	Сценарий);
		Запрос.УстановитьПараметр("ШаблонКорректировки",	ШаблонКорректировки);
		
	Иначе
		
		Запрос.Текст = Запрос.Текст+"
		|ДокументыКорректировки.Ссылка = &ДокументКорректировки";
		Запрос.УстановитьПараметр("ДокументКорректировки",ДокументКорректировки);
		
	КонецЕсли;
	
	Если НЕ ИсходныйДокумент=Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст+"
		|	И ДокументыКорректировки.ИсходныйДокумент = &ИсходныйДокумент";
		Запрос.УстановитьПараметр("ИсходныйДокумент",	ИсходныйДокумент);		
		
	КонецЕсли;
	
	Если НЕ ПериодОтражения=Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст+"
		|	И ДокументыКорректировки.ПериодОтражения = &ПериодОтражения";
		Запрос.УстановитьПараметр("ПериодОтражения",	ПериодОтражения);		
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|И (НЕ ДокументыКорректировки.Сторнирование)";
		
	ЗначениеВыполнения = Запрос.Выполнить();
	
	Если ЗначениеВыполнения.Пустой() Тогда
				
		КлючевыеРеквизиты = Новый Структура;
		КлючевыеРеквизиты.Вставить("Организация",			Организация);
		КлючевыеРеквизиты.Вставить("ПериодОтчета",			ПериодСценария);
		КлючевыеРеквизиты.Вставить("ПериодОтражения",		?(ПериодОтражения=Неопределено,ПериодСценария,ПериодОтражения));
		КлючевыеРеквизиты.Вставить("Сценарий",				Сценарий);
		КлючевыеРеквизиты.Вставить("ИсходныйДокумент",		ИсходныйДокумент);
		КлючевыеРеквизиты.Вставить("ШаблонКорректировки",	ШаблонКорректировки);
		КлючевыеРеквизиты.Вставить("Состояние",				Перечисления.СостоянияОтчетов.Запланирован);
		КлючевыеРеквизиты.Вставить("ИмяОбъектаМетаданных",	ИмяОбъектаМетаданных);
		КлючевыеРеквизиты.Вставить("РасчетДатыОтраженияВУчете",	Перечисления.СпособыРасчетаДатыОтраженияВУчете.ДатаОкончанияПериода);
		
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			
			ДанныеУчетнойПолитики=ПолучитьДанныеУчетнойПолитики(Организация,КлючевыеРеквизиты.Сценарий,КлючевыеРеквизиты.ПериодОтражения.ДатаНачала);
			ОсновнаяВалюта=ДанныеУчетнойПолитики.ВалютаУчета;
			КлючевыеРеквизиты.Вставить("УчетнаяПолитика",	ДанныеУчетнойПолитики.УчетнаяПолитика);
			
		Иначе
			
			КлючевыеРеквизиты.Вставить("УчетнаяПолитика",УчетнаяПолитика);
			ОсновнаяВалюта=УчетнаяПолитика.ВалютаУчета;
			
		КонецЕсли;
						
		КлючевыеРеквизиты.Вставить("ОсновнаяВалюта", ОсновнаяВалюта);
		
		ОбработкаОбъект = Обработки.КорректировкиЗначенийПоказателей.Создать();
		ЗаполнитьЗначенияСвойств(ОбработкаОбъект, КлючевыеРеквизиты);
		ОбработкаОбъект.ИнициализироватьКонтекст();
		
		Если ИмяОбъектаМетаданных = "ТрансформационнаяКорректировка" Тогда
			
			ОбработкаОбъект.ЗаполнитьПоШаблонуТрансформации();
			
		ИначеЕсли ИмяОбъектаМетаданных = "Трансляция" Тогда
			
			ОбработкаОбъект.ЗаполнитьПоШаблонуТрансляции();
			
		КонецЕсли;
		
		ОбработкаОбъект.ДанныеПараметрикиАктуальны = Ложь;
		
		ОбработкаОбъект.ДокументОбъект = Документы[ИмяОбъектаМетаданных].СоздатьДокумент();
		ОбработкаОбъект.ДокументОбъект.Дата = ?(ЗначениеЗаполнено(ДатаНачалаРасчетная), ДатаНачалаРасчетная, ТекущаяДата());
		ОбработкаОбъект.ДокументОбъект.УстановитьНовыйНомер();
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбъект.ДокументОбъект, ОбработкаОбъект, , "Ссылка,Номер");
		
		ОбработкаОбъект.ЗаполнитьАвтоматически();
				
		Попытка
			
			ОбработкаОбъект.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1: '");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОбработкаОбъект.ДокументОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	Иначе
		
		Результат = ЗначениеВыполнения.Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			ОбработкаОбъект=Обработки.КорректировкиЗначенийПоказателей.Создать();
			ДокументОбъект=Результат.ДокументКорректировки.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
				Заблокирован=Истина;
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось заблокировать объект %1: '");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ДокументОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
				КонецЕсли;	
					
				Возврат Неопределено;
			КонецПопытки;
			
			ДокументОбъект.ПериодОтчета		= ПериодСценария;
			ДокументОбъект.ПериодОтражения	= ?(ПериодОтражения=Неопределено,ПериодСценария,ПериодОтражения);
			
			Если ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
				
				ЗаполнитьЗначенияСвойств(ОбработкаОбъект,ДокументОбъект);
				
			Иначе	
				
				ЗаполнитьЗначенияСвойств(ОбработкаОбъект,ДокументОбъект,,"РедактируемыеЗаписи");
				
			КонецЕсли;
			
			ОбработкаОбъект.ДанныеПараметрикиАктуальны=Ложь;			
			ОбработкаОбъект.ДокументОбъект=ДокументОбъект;
			ОбработкаОбъект.ИмяОбъектаМетаданных=ИмяОбъектаМетаданных;
			
			ОбработкаОбъект.ИнициализироватьКонтекст();	
			ОбработкаОбъект.ЗаполнитьАвтоматически();
			
			Попытка
				
				ОбработкаОбъект.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись);
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1: '");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОбработкаОбъект.ДокументОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат Неопределено;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ОбработкаОбъект.Ссылка;
	
КонецФункции 

Функция ОпределитьТаблицуФинансовыхРегистров(МетаданныеДокумента=Неопределено) Экспорт
	
	МассивРегистровУчета=КэшируемыеПроцедурыУХ.МассивРегистровФинансовогоУчета();
	
	Если МассивРегистровУчета.Количество()=0 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТаблицаРегистровОбъекта=Новый ТаблицаЗначений;
	ТаблицаРегистровОбъекта.Колонки.Добавить("ИмяРегистра");
	ТаблицаРегистровОбъекта.Колонки.Добавить("Обороты",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаРегистровОбъекта.Колонки.Добавить("ПараметрыОтраженияДвижений"); 
		
	Если МетаданныеДокумента=Неопределено Тогда 
		
		Для Каждого ИмяРегистра ИЗ МассивРегистровУчета Цикл
			
			НоваяСтрока=ТаблицаРегистровОбъекта.Добавить();
			НоваяСтрока.ИмяРегистра=ИмяРегистра;
			
			МетаданныеРегистра=Метаданные.РегистрыНакопления[ИмяРегистра];
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя()); // РегистрНакопленияМенеджер - 
			
			НоваяСтрока.ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();	
			НоваяСтрока.Обороты=(МетаданныеРегистра.ВидРегистра=Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты);
			
		КонецЦикла;
				
	Иначе
		
		Для Каждого Движение ИЗ МетаданныеДокумента.Движения Цикл
			
			Если НЕ МассивРегистровУчета.Найти(Движение.Имя)=Неопределено Тогда
				
				НоваяСтрока=ТаблицаРегистровОбъекта.Добавить();
				НоваяСтрока.ИмяРегистра=Движение.Имя;
				НоваяСтрока.Обороты=(Движение.ВидРегистра=Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты);
				
				МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрНакопления."+Движение.Имя);
				НоваяСтрока.ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
				
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаРегистровОбъекта;
		
КонецФункции // ОпределитьМассивФинансовыхРегистров()

Процедура ВыполнитьТрансляциюРегистровПоОбъекту(ИсходныйОбъект,ТаблицаФинансовыхРегистров,ДанныеУчетнойПолитики) Экспорт
	
	ТаблицаКорреспонденции=ПолучитьТаблицуКорреспонденцииРегистров(,ИсходныйОбъект.Ссылка); 
	
	Если ТаблицаКорреспонденции.Количество()>0 Тогда
		
		ИсходныйДокумент=ИсходныйОбъект.Ссылка;
		Организация		=ИсходныйОбъект.Организация; 
		
		ДанныеПроведения=Новый Структура;
		ДанныеПроведения.Вставить("Регистратор",ИсходныйДокумент);
		ДанныеПроведения.Вставить("Организация",ИсходныйДокумент.Организация);
		ДанныеПроведения.Вставить("Период",ИсходныйДокумент.Дата);
		
		ТаблицаДанныхТрансляции= ПолучитьТаблицаДанныхТрансляцииРегистров(Организация,ИсходныйОбъект.Дата);
		
		НаборЗаписей=РегистрыСведений.ОтражениеДокументовПоШаблонам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходныйДокумент.Установить(ИсходныйДокумент);
		НаборЗаписей.Отбор.Трансляция.Установить(Истина);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
						
			Для Каждого ДанныеТрансляции ИЗ ТаблицаДанныхТрансляции Цикл
					
				ДобавитьОбъектВОбработку(ДанныеПроведения,ДанныеТрансляции,НаборЗаписей,ИсходныйДокумент);
				
			КонецЦикла;
			
		Иначе
						
			Для Каждого ДанныеОбъекта Из НаборЗаписей Цикл
				
				МассивДанныхТрансляции=ТаблицаДанныхТрансляции.НайтиСтроки(Новый Структура("Организация,Сценарий,ШаблонТрансляции",ДанныеОбъекта.Организация,ДанныеОбъекта.Сценарий,ДанныеОбъекта.ШаблонОперации));
				
				Если МассивДанныхТрансляции.Количество()=0 Тогда // Изменились настройки учетной политики
					
					ОтменитьОбработкуОбъекта(ДанныеОбъекта,ИсходныйДокумент);
					
				Иначе	
					
					ДанныеОбъекта.ПериодОтбора=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДанныеПроведения.Период,КэшируемыеПроцедурыУХ.ПолучитьПериодичностьТрансляцииПроводок(),0);
					ДанныеЗакрытияПериода=УправлениеОтчетамиУХ.ПолучитьДанныеЗакрытогоПериода(ДанныеОбъекта.Организация);
					ДанныеОбъекта.УчетнаяПолитика=МассивДанныхТрансляции[0].УчетнаяПолитика;
					
					УправлениеОтчетамиУХ.ОбработатьДанныеОбъекта(ДанныеОбъекта,МассивДанныхТрансляции[0].СпособТрансляции,ДанныеЗакрытияПериода);
					
					МассивДанныхТрансляции[0].Обработано=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			МассивДанныхТрансляции=ТаблицаДанныхТрансляции.НайтиСтроки(Новый Структура("Обработано",Ложь));
			
			Для Каждого ДанныеТрансляции ИЗ МассивДанныхТрансляции Цикл // Изменились настройки учетной политики
					
				ДобавитьОбъектВОбработку(ДанныеПроведения,ДанныеТрансляции,НаборЗаписей,ИсходныйДокумент);
				
			КонецЦикла;
			
		КонецЕсли;
				
		НаборЗаписей.Записать(Истина);
				
	Иначе
						
		ИсходныйДокумент=ИсходныйОбъект.Ссылка;
		
		НаборЗаписей=РегистрыСведений.ОтражениеДокументовПоШаблонам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ИсходныйДокумент.Установить(ИсходныйДокумент);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ДанныеОбъекта ИЗ НаборЗаписей Цикл
			
			ОтменитьОбработкуОбъекта(ДанныеОбъекта,ИсходныйДокумент);
							
		КонецЦикла;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
		
КонецПроцедуры // ВыполнитьТрансляциюРегистровПоОбъекту() 

Функция ТрансляцияВРегистрБухгалтерии(НаправлениеТрансляции) Экспорт
	
	Возврат НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии
		ИЛИ НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии;
	
КонецФункции // ТрансляцияВРегистрБухгалтерии()
	
Функция ПолучитьТекстПоляДтКт(Дт=Истина,ПараметрыОтраженияДвижений,Обороты)

	ТекстУсловия=?(Дт,ПараметрыОтраженияДвижений.УсловиеДебет,ПараметрыОтраженияДвижений.УсловиеКредит);
	
	Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
		
		Возврат ТекстУсловия;
		
	ИначеЕсли Обороты Тогда
		
		Возврат "ЛОЖЬ";
		
	Иначе
		
		Если ПараметрыОтраженияДвижений.ИнверсияДвижений Тогда
			
			Возврат ?(Дт,"ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)","ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)");
			
		Иначе
			
			Возврат ?(Дт,"ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)","ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)");
			
		КонецЕсли;
		
	КонецЕсли;

КонецФункции // ПолучитьТекстПоляДтКт() 

Функция ПолучитьТаблицуКорреспонденцииРегистров(ПериодОтчета=Неопределено,ИсходныйДокумент=Неопределено,Организация=Неопределено) 
	
	Если Метаданные.ОбщиеМодули.Найти("МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров")=Неопределено Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	КомпоновщикНастроек=Новый КомпоновщикНастроекКомпоновкиДанных;
		
	ПараметрыЗапроса=Новый Структура;
	ПараметрыЗапроса.Вставить("КлючВарианта","АнализКорреспонденций");
	ПараметрыЗапроса.Вставить("ДополнительныйОтбор", КомпоновщикНастроек.ФиксированныеНастройки.Отбор);
  
	Если ЗначениеЗаполнено(Организация) Тогда
		
		ПараметрыЗапроса.Вставить("Организация",Организация);
		
	КонецЕсли;  
	
	Если ЗначениеЗаполнено(ИсходныйДокумент) Тогда
		
		ПараметрыЗапроса.Вставить("Регистратор",ИсходныйДокумент);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		
		ПараметрыЗапроса.Вставить("ДатаНачала",ПериодОтчета.ДатаНачала);
		ПараметрыЗапроса.Вставить("ДатаОкончания",КонецДня(ПериодОтчета.ДатаОкончания));
		
	КонецЕсли;
	
	МодульОперативногоУчета=ОбщегоНазначения.ОбщийМодуль("МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров");	
	ТаблицаКорреспонденцииОбщ=МодульОперативногоУчета.ЗапросАнализаКорреспонденцийОперативногоУчета(ПараметрыЗапроса).Выполнить().Выгрузить();
	
	Запрос=Новый Запрос;
	Запрос.Текст="Выбрать * Поместить ТаблицаКорреспонденцииОбщ ИЗ &ТаблицаКорреспонденцииОбщ КАК ТаблицаКорреспонденцииОбщ
	|;
	|ВЫБРАТЬ * ИЗ ТаблицаКорреспонденцииОбщ ГДЕ (НЕ (ОбъектУчетаДт=Значение(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка) ИЛИ ОбъектУчетаКт=Значение(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)))";
	
	Запрос.УстановитьПараметр("ТаблицаКорреспонденцииОбщ",ТаблицаКорреспонденцииОбщ);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьТаблицуКорреспонденцииРегистров()

Процедура ТранслироватьДанныеРегистров(ДанныеОбъекта) Экспорт
	
	ТаблицаКорреспонденцииОбщая=ПолучитьТаблицуКорреспонденцииРегистров(ДанныеОбъекта.ПериодОтчета,ДанныеОбъекта.ИсходныйДокумент,ДанныеОбъекта.Организация);	
	ТаблицаКорреспонденции=ТаблицаКорреспонденцииОбщая.Скопировать();
	ТаблицаКорреспонденции.Свернуть("ОбъектУчетаДт,ОбъектУчетаКт,ИмяРегистраДт,ИмяРегистраКт");
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросДанные.Текст="ВЫБРАТЬ
	                   |	ТаблицаКорреспонденцииОбщая.ОбъектУчетаДт КАК ОбъектУчетаДт,
	                   |	ТаблицаКорреспонденцииОбщая.ОбъектУчетаКт КАК ОбъектУчетаКт,
	                   |	ТаблицаКорреспонденцииОбщая.ИмяРегистраДт КАК ИмяРегистраДт,
	                   |	ТаблицаКорреспонденцииОбщая.ИмяРегистраКт КАК ИмяРегистраКт,
	                   |	ТаблицаКорреспонденцииОбщая.Регистратор КАК Регистратор,
	                   |	ТаблицаКорреспонденцииОбщая.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи
	                   |ПОМЕСТИТЬ ТаблицаКорреспонденцииОбщая
	                   |ИЗ
	                   |	&ТаблицаКорреспонденцииОбщая КАК ТаблицаКорреспонденцииОбщая
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                   |	ТаблицаКорреспонденцииОбщая.ОбъектУчетаДт КАК ОбъектУчетаДт,
	                   |	ТаблицаКорреспонденцииОбщая.ОбъектУчетаКт КАК ОбъектУчетаКт,
	                   |	ТаблицаКорреспонденцииОбщая.ИмяРегистраДт КАК ИмяРегистраДт,
	                   |	ТаблицаКорреспонденцииОбщая.ИмяРегистраКт КАК ИмяРегистраКт
	                   |ПОМЕСТИТЬ ТаблицаКорреспонденции
	                   |ИЗ
	                   |	ТаблицаКорреспонденцииОбщая КАК ТаблицаКорреспонденцииОбщая
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	СоответствияСчетовДляТрансляции.Ссылка КАК Ссылка,
	                   |	СоответствияСчетовДляТрансляции.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	                   |	СоответствияСчетовДляТрансляции.ОбъектНастройки КАК ОбъектНастройки,
	                   |	СоответствияСчетовДляТрансляции.ОбъектУчетаИсточник.ОбъектУчета КАК ОбъектУчета,
	                   |	СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
	                   |	СоответствияСчетовДляТрансляции.СчетПриемник.Код КАК СчетПриемникКод,
	                   |	СоответствияСчетовДляТрансляции.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	                   |	СоответствияСчетовДляТрансляции.КоррОбъектУчетаИсточник.ОбъектУчета КАК КоррОбъектУчета,
	                   |	СоответствияСчетовДляТрансляции.СчетПриемник.ДляИсключенийПриТрансляции КАК ДляИсключенийПриТрансляции,
	                   |	НастройкиПравилТрансляции.ИспользованиеДт КАК ИспользованиеДт,
	                   |	НастройкиПравилТрансляции.ИспользованиеКт КАК ИспользованиеКт
	                   |ПОМЕСТИТЬ ДанныеШаблона
	                   |ИЗ
	                   |	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	                   |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	                   |		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	                   |ГДЕ
	                   |	СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ДанныеШаблона.Ссылка КАК Ссылка,
	                   |	ДанныеШаблона.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	                   |	ДанныеШаблона.ОбъектНастройки КАК ОбъектНастройки,
	                   |	ДанныеШаблона.ОбъектУчета КАК ОбъектУчета,
	                   |	ДанныеШаблона.СчетПриемник КАК СчетПриемник,
	                   |	ДанныеШаблона.СчетПриемникКод КАК СчетПриемникКод,
	                   |	ДанныеШаблона.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	                   |	ДанныеШаблона.КоррОбъектУчета КАК КоррОбъектУчета,
	                   |	ДанныеШаблона.ИспользованиеДт КАК ИспользованиеДт,
	                   |	ДанныеШаблона.ИспользованиеКт КАК ИспользованиеКт
	                   |ПОМЕСТИТЬ ИсключенияПоКорреспонденции
	                   |ИЗ
	                   |	ДанныеШаблона КАК ДанныеШаблона
	                   |ГДЕ
	                   |	ДанныеШаблона.ДляИсключенийПриТрансляции
	                   |	И ДанныеШаблона.КоррОбъектУчетаИсточник = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ДанныеШаблона.Ссылка КАК Ссылка,
	                   |	ДанныеШаблона.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	                   |	ДанныеШаблона.ОбъектНастройки КАК ОбъектНастройки,
	                   |	ДанныеШаблона.ОбъектУчета КАК ОбъектУчета,
	                   |	ДанныеШаблона.СчетПриемник КАК СчетПриемник,
	                   |	ДанныеШаблона.СчетПриемникКод КАК СчетПриемникКод,
	                   |	ДанныеШаблона.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	                   |	ДанныеШаблона.КоррОбъектУчета КАК КоррОбъектУчета,
	                   |	ДанныеШаблона.ИспользованиеДт КАК ИспользованиеДт,
	                   |	ДанныеШаблона.ИспользованиеКт КАК ИспользованиеКт
	                   |ПОМЕСТИТЬ ТрансляцияПоКорреспонденции
	                   |ИЗ
	                   |	ДанныеШаблона КАК ДанныеШаблона
	                   |ГДЕ
	                   |	НЕ ДанныеШаблона.ДляИсключенийПриТрансляции
	                   |	И НЕ ДанныеШаблона.КоррОбъектУчетаИсточник = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ДанныеШаблона.Ссылка КАК Ссылка,
	                   |	ДанныеШаблона.ОбъектУчетаИсточник КАК ОбъектУчетаИсточник,
	                   |	ДанныеШаблона.ОбъектНастройки КАК ОбъектНастройки,
	                   |	ДанныеШаблона.ОбъектУчета КАК ОбъектУчета,
	                   |	ДанныеШаблона.СчетПриемник КАК СчетПриемник,
	                   |	ДанныеШаблона.СчетПриемникКод КАК СчетПриемникКод,
	                   |	ДанныеШаблона.КоррОбъектУчетаИсточник КАК КоррОбъектУчетаИсточник,
	                   |	ДанныеШаблона.КоррОбъектУчета КАК КоррОбъектУчета,
	                   |	ДанныеШаблона.ИспользованиеДт КАК ИспользованиеДт,
	                   |	ДанныеШаблона.ИспользованиеКт КАК ИспользованиеКт
	                   |ПОМЕСТИТЬ СоотвествияТрансляция
	                   |ИЗ
	                   |	ДанныеШаблона КАК ДанныеШаблона
	                   |ГДЕ
	                   |	ДанныеШаблона.КоррОбъектУчетаИсточник = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                   |	ТаблицаКорреспонденции.ИмяРегистраДт КАК ИмяРегистраДт,
	                   |	ТаблицаКорреспонденции.ИмяРегистраКт КАК ИмяРегистраКт,
	                   |	ТаблицаКорреспонденции.ОбъектУчетаДт КАК ОбъектУчетаДт,
	                   |	ТаблицаКорреспонденции.ОбъектУчетаКт КАК ОбъектУчетаКт,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииДт.ОбъектУчетаИсточник ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииДт.ОбъектУчетаИсточник
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.ОбъектУчетаИсточник ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииДт.ОбъектУчетаИсточник
	                   |		ИНАЧЕ СоответствияРегистровДт.ОбъектУчетаИсточник
	                   |	КОНЕЦ КАК ОбъектУчетаИсточникДт,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииДт.ОбъектНастройки ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииДт.ОбъектНастройки
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.ОбъектНастройки ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииДт.ОбъектНастройки
	                   |		ИНАЧЕ СоответствияРегистровДт.ОбъектНастройки
	                   |	КОНЕЦ КАК ОбъектНастройкиДт,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииДт.СчетПриемник ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииДт.СчетПриемник
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.СчетПриемник ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииДт.СчетПриемник
	                   |		ИНАЧЕ СоответствияРегистровДт.СчетПриемник
	                   |	КОНЕЦ КАК СчетДтПриемник,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииКт.ОбъектУчетаИсточник ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииКт.ОбъектУчетаИсточник
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.ОбъектУчетаИсточник ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииКт.ОбъектУчетаИсточник
	                   |		ИНАЧЕ СоответствияРегистровКт.ОбъектУчетаИсточник
	                   |	КОНЕЦ КАК ОбъектУчетаИсточникКт,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииКт.ОбъектНастройки ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииКт.ОбъектНастройки
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.ОбъектНастройки ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииКт.ОбъектНастройки
	                   |		ИНАЧЕ СоответствияРегистровКт.ОбъектНастройки
	                   |	КОНЕЦ КАК ОбъектНастройкиКт,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииКт.СчетПриемник ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииКт.СчетПриемник
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.СчетПриемник ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииКт.СчетПриемник
	                   |		ИНАЧЕ СоответствияРегистровКт.СчетПриемник
	                   |	КОНЕЦ КАК СчетКтПриемник,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииДт.Ссылка ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииДт.Ссылка
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииДт.Ссылка ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииДт.Ссылка
	                   |		ИНАЧЕ СоответствияРегистровДт.Ссылка
	                   |	КОНЕЦ КАК СоответствиеДт,
	                   |	ВЫБОР
	                   |		КОГДА НЕ ИсключенияПоКорреспонденцииКт.Ссылка ЕСТЬ NULL
	                   |			ТОГДА ИсключенияПоКорреспонденцииКт.Ссылка
	                   |		КОГДА НЕ ТрансляцияПоКорреспонденцииКт.Ссылка ЕСТЬ NULL
	                   |			ТОГДА ТрансляцияПоКорреспонденцииКт.Ссылка
	                   |		ИНАЧЕ СоответствияРегистровКт.Ссылка
	                   |	КОНЕЦ КАК СоответствиеКт
	                   |ПОМЕСТИТЬ ТаблицаРегистровСоответствия
	                   |ИЗ
	                   |	ТаблицаКорреспонденции КАК ТаблицаКорреспонденции
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ СоотвествияТрансляция КАК СоответствияРегистровДт
	                   |		ПО ТаблицаКорреспонденции.ОбъектУчетаДт = СоответствияРегистровДт.ОбъектУчета
	                   |			И (СоответствияРегистровДт.ИспользованиеДт)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ СоотвествияТрансляция КАК СоответствияРегистровКт
	                   |		ПО ТаблицаКорреспонденции.ОбъектУчетаКт = СоответствияРегистровКт.ОбъектУчета
	                   |			И (СоответствияРегистровКт.ИспользованиеКт)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ ИсключенияПоКорреспонденции КАК ИсключенияПоКорреспонденцииДт
	                   |		ПО ТаблицаКорреспонденции.ОбъектУчетаДт = ИсключенияПоКорреспонденцииДт.ОбъектУчета
	                   |			И ТаблицаКорреспонденции.ОбъектУчетаКт = ИсключенияПоКорреспонденцииДт.КоррОбъектУчета
	                   |			И (ИсключенияПоКорреспонденцииДт.ИспользованиеДт)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ ИсключенияПоКорреспонденции КАК ИсключенияПоКорреспонденцииКт
	                   |		ПО ТаблицаКорреспонденции.ОбъектУчетаКт = ИсключенияПоКорреспонденцииКт.ОбъектУчета
	                   |			И ТаблицаКорреспонденции.ОбъектУчетаДт = ИсключенияПоКорреспонденцииКт.КоррОбъектУчета
	                   |			И (ИсключенияПоКорреспонденцииКт.ИспользованиеКт)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияПоКорреспонденции КАК ТрансляцияПоКорреспонденцииДт
	                   |		ПО ТаблицаКорреспонденции.ОбъектУчетаДт = ТрансляцияПоКорреспонденцииДт.ОбъектУчета
	                   |			И ТаблицаКорреспонденции.ОбъектУчетаКт = ТрансляцияПоКорреспонденцииДт.КоррОбъектУчета
	                   |			И (ТрансляцияПоКорреспонденцииДт.ИспользованиеДт)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияПоКорреспонденции КАК ТрансляцияПоКорреспонденцииКт
	                   |		ПО ТаблицаКорреспонденции.ОбъектУчетаКт = ТрансляцияПоКорреспонденцииКт.ОбъектУчета
	                   |			И ТаблицаКорреспонденции.ОбъектУчетаДт = ТрансляцияПоКорреспонденцииКт.КоррОбъектУчета
	                   |			И (ТрансляцияПоКорреспонденцииКт.ИспользованиеКт)
	                   |;
	                   |
	                   |////////////////////////////////////////////////////////////////////////////////
	                   |ВЫБРАТЬ
	                   |	ТаблицаРегистровСоответствия.ИмяРегистраДт КАК ИмяРегистраДт,
	                   |	ТаблицаРегистровСоответствия.ОбъектУчетаДт КАК ОбъектУчетаДт,
	                   |	ТаблицаРегистровСоответствия.ОбъектУчетаИсточникДт КАК ОбъектУчетаИсточникДт,
	                   |	ТаблицаРегистровСоответствия.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	                   |	ТаблицаРегистровСоответствия.СчетДтПриемник КАК СчетДтПриемник,
	                   |	ТаблицаРегистровСоответствия.ИмяРегистраКт КАК ИмяРегистраКт,
	                   |	ТаблицаРегистровСоответствия.ОбъектУчетаКт КАК ОбъектУчетаКт,
	                   |	ТаблицаРегистровСоответствия.ОбъектУчетаИсточникКт КАК ОбъектУчетаИсточникКт,
	                   |	ТаблицаРегистровСоответствия.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	                   |	ТаблицаРегистровСоответствия.СчетКтПриемник КАК СчетКтПриемник,
	                   |	ТаблицаРегистровСоответствия.СоответствиеДт КАК СоответствиеДт,
	                   |	ТаблицаРегистровСоответствия.СоответствиеКт КАК СоответствиеКт,
	                   |	ПравилаДт.Ссылка КАК ПравилоДт,
	                   |	ПравилаКт.Ссылка КАК ПравилоКт,
	                   |	ЕСТЬNULL(НастройкиПравилТрансляцииДт.ИспользованиеДт, ЛОЖЬ) КАК ИспользованиеДт,
	                   |	ЕСТЬNULL(НастройкиПравилТрансляцииКт.ИспользованиеКт, ЛОЖЬ) КАК ИспользованиеКт
	                   |ИЗ
	                   |	ТаблицаРегистровСоответствия КАК ТаблицаРегистровСоответствия
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ПравилаДт
	                   |		ПО ТаблицаРегистровСоответствия.СоответствиеДт = ПравилаДт.ПотребительРасчета
	                   |			И (ПравилаДт.НазначениеРасчетов = &ПравилоОбработки)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ПравилаКт
	                   |		ПО ТаблицаРегистровСоответствия.СоответствиеКт = ПравилаКт.ПотребительРасчета
	                   |			И (ПравилаКт.НазначениеРасчетов = &ПравилоОбработки)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляцииДт
	                   |		ПО ТаблицаРегистровСоответствия.СоответствиеДт = НастройкиПравилТрансляцииДт.СоответствиеСчетов
	                   |			И (НастройкиПравилТрансляцииДт.ШаблонТрансляции = &ШаблонТрансляции)
	                   |			И (НастройкиПравилТрансляцииДт.ИспользованиеДт)
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляцииКт
	                   |		ПО ТаблицаРегистровСоответствия.СоответствиеКт = НастройкиПравилТрансляцииКт.СоответствиеСчетов
	                   |			И (НастройкиПравилТрансляцииКт.ШаблонТрансляции = &ШаблонТрансляции)
	                   |			И (НастройкиПравилТрансляцииКт.ИспользованиеКт)";
	
	ЗапросДанные.УстановитьПараметр("ТаблицаКорреспонденцииОбщая",ТаблицаКорреспонденцииОбщая);
	ЗапросДанные.УстановитьПараметр("ШаблонТрансляции",ДанныеОбъекта.ШаблонКорректировки);
	ЗапросДанные.УстановитьПараметр("ПравилоОбработки",ДанныеОбъекта.ПравилоОбработки);
		
	РабочаяТаблица=ЗапросДанные.Выполнить().Выгрузить();
	
	ЗапросДанные.Текст="Уничтожить ТаблицаКорреспонденции
	|;
	|Уничтожить ДанныеШаблона
	|;
	|Уничтожить ТрансляцияПоКорреспонденции
	|;
	|Уничтожить СоотвествияТрансляция
	|;
	|Уничтожить ТаблицаРегистровСоответствия";
	
	ЗапросДанные.Выполнить();

	
	мОписаниеТиповБулево=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();

	РабочаяТаблица.Колонки.Добавить("Транслировать",мОписаниеТиповБулево);
	
	ТаблицаКорреспонденции.Колонки.Добавить("ЕстьСоответствиеДт",	мОписаниеТиповБулево);
	ТаблицаКорреспонденции.Колонки.Добавить("ЕстьСоответствиеКт",	мОписаниеТиповБулево);
	ТаблицаКорреспонденции.Колонки.Добавить("ЕстьПравилоДт",			мОписаниеТиповБулево);
	ТаблицаКорреспонденции.Колонки.Добавить("ЕстьПравилоКт",			мОписаниеТиповБулево);
	ТаблицаКорреспонденции.Колонки.Добавить("ЕстьСчетБДИсточникДт",	мОписаниеТиповБулево);
	ТаблицаКорреспонденции.Колонки.Добавить("ЕстьСчетБДИсточникКт",	мОписаниеТиповБулево);
	ТаблицаКорреспонденции.Колонки.Добавить("ВозможнаТрансляция",	мОписаниеТиповБулево);
	
	Для Каждого СтрокаРегистр ИЗ ТаблицаКорреспонденции Цикл
		
		МассивСоответствий=РабочаяТаблица.НайтиСтроки(Новый Структура("ОбъектУчетаДт,ОбъектУчетаКт",СтрокаРегистр.ОбъектУчетаДт,СтрокаРегистр.ОбъектУчетаКт));
		
		Для Каждого РабочаяСтрока ИЗ МассивСоответствий Цикл
			
			Если ЗначениеЗаполнено(РабочаяСтрока.СоответствиеДт) Тогда
				
				СтрокаРегистр.ЕстьСоответствиеДт=Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочаяСтрока.СоответствиеКт) Тогда
				
				СтрокаРегистр.ЕстьСоответствиеКт=Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочаяСтрока.ПравилоДт) Тогда
				
				СтрокаРегистр.ЕстьПравилоДт=Истина;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочаяСтрока.ПравилоКт) Тогда
				
				СтрокаРегистр.ЕстьПравилоКт=Истина;
				
			КонецЕсли;
						
			РабочаяСтрока.Транслировать=(ЗначениеЗаполнено(РабочаяСтрока.СоответствиеДт) 
										И ЗначениеЗаполнено(РабочаяСтрока.СоответствиеКт)
										И ЗначениеЗаполнено(РабочаяСтрока.ПравилоДт)
										И ЗначениеЗаполнено(РабочаяСтрока.ПравилоКт));
										
		КонецЦикла;

		СтрокаРегистр.ВозможнаТрансляция=(СтрокаРегистр.ЕстьСоответствиеДт 
										И СтрокаРегистр.ЕстьСоответствиеКт 
										И СтрокаРегистр.ЕстьПравилоДт 
										И СтрокаРегистр.ЕстьПравилоКт);
		
	КонецЦикла;
	
	// Сформируем протокол проверки настроек перед трансляцией
	
	МассивОшибочные=ТаблицаКорреспонденции.НайтиСтроки(Новый Структура("ВозможнаТрансляция",Ложь));
	
	Для Каждого Строка ИЗ МассивОшибочные Цикл
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Корреспонденция Дт %1 - Кт %2: '"), Строка.ОбъектУчетаДт, Строка.ОбъектУчетаКт);
				
		Если Не Строка.ЕстьСоответствиеДт Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено соответствие для объекта учета %2'"), ТекстОшибки+Символы.ПС, 
				Строка.ОбъектУчетаДт);
			
		КонецЕсли;
		
		Если Не Строка.ЕстьСоответствиеКт Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено соответствие для объекта учета %2'"), ТекстОшибки+Символы.ПС, 
				Строка.ОбъектУчетаКт);
			
		КонецЕсли;
		
		Если Строка.ЕстьСоответствиеДт И (НЕ Строка.ЕстьПравилоДт) Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено правило трансляции по дебету.'"), ТекстОшибки+Символы.ПС);
			
		КонецЕсли;
		
		Если Строка.ЕстьСоответствиеКт И (НЕ Строка.ЕстьПравилоКт) Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1	не найдено правило трансляции по кредиту.'"), ТекстОшибки+Символы.ПС);
			
		КонецЕсли;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("КорректировкиЗначенийПоказателей32.ТранслироватьДанныеРегистров.1",,,ТекстОшибки);
		
	КонецЦикла;
	
	ДанныеОбъекта.ПроводкиДокумента.Очистить();
	ТаблицаТрансляции=РабочаяТаблица.Скопировать(Новый Структура("Транслировать",Истина));
	
    МассивБалансовые=Новый Массив;
	РесурсКоличество=Неопределено;
	РесурсВалютнаяСумма=Неопределено; 
	
	Для Каждого СоответствиеРесурсов ИЗ ДанныеОбъекта.ШаблонКорректировки.СоответствиеРесурсов Цикл
		
		Если НЕ (ЗначениеЗаполнено(СоответствиеРесурсов.РесурсИсточник) И ЗначениеЗаполнено(СоответствиеРесурсов.РесурсПриемник)) Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		СтрРесурс=ДанныеОбъекта.РегистрБухгалтерии.Ресурсы.Найти(СоответствиеРесурсов.РесурсПриемник,"Имя");
		
		Если СтрРесурс.Балансовый Тогда
			
			МассивБалансовые.Добавить(Новый Структура("Источник,Приемник",СоответствиеРесурсов.РесурсИсточник,СоответствиеРесурсов.РесурсПриемник));
			
		ИначеЕсли СтрНайти(СтрРесурс.ПризнакУчета,"Количественный")>0 Тогда
			
			РесурсКоличество=Новый Структура("Источник,Приемник",СоответствиеРесурсов.РесурсИсточник,СоответствиеРесурсов.РесурсПриемник);
			
		ИначеЕсли СтрНайти(СтрРесурс.ПризнакУчета,"Валютный")>0 Тогда
			
			РесурсВалютнаяСумма=Новый Структура("Источник,Приемник",СоответствиеРесурсов.РесурсИсточник,СоответствиеРесурсов.РесурсПриемник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.ТекстОтбора КАК ТекстОтбора,
	             |	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	             |		Поле КАК Поле,
	             |		Синоним КАК Синоним,
	             |		АналитикаОперанда КАК АналитикаОперанда,
	             |		КодАналитики КАК КодАналитики,
	             |		СпособЗаполнения КАК СпособЗаполнения,
	             |		ФиксированноеЗначение КАК ФиксированноеЗначение
	             |	) КАК ПравилаИспользованияПолейЗапроса,
	             |	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	             |		ПолеБД КАК ПолеБД,
	             |		НаименованиеБД КАК НаименованиеБД,
	             |		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	             |		ТипРасчета КАК ТипРасчета,
	             |		СмещениеПериода КАК СмещениеПериода,
	             |		ТекстМодуля КАК ТекстМодуля,
	             |		ИмяПараметра КАК ИмяПараметра
	             |	) КАК ТаблицаПараметровОтбораБД,
	             |	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	             |		ИмяПараметра КАК ИмяПараметра,
	             |		Значение КАК Значение,
	             |		Представление КАК Представление,
	             |		Пометка КАК Пометка,
	             |		Тип КАК Тип,
	             |		ПолеБД КАК ПолеБД
	             |	) КАК УточненияСпособовОпределения,
	             |	ИсточникиДанныхДляРасчетов.ПутьКДаннымОбъектНастройки КАК ПутьКДаннымОбъектНастройки,
	             |	ВЫБОР
	             |		КОГДА ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникШаблон
	             |			ТОГДА ИСТИНА
	             |		ИНАЧЕ ЛОЖЬ
	             |	КОНЕЦ КАК ЭтоШаблон,
	             |	ИсточникиДанныхДляРасчетов.СоответствиеРесурсовДляТрансляции.(
	             |		РесурсИсточник КАК РесурсИсточник,
	             |		РесурсПриемник КАК РесурсПриемник,
	             |		Коэффициент КАК Коэффициент
	             |	) КАК СоответствиеРесурсовДляТрансляции
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	(ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникПравило
	             |			ИЛИ ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникШаблон)
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	ЭтоШаблон";
		
	Для Каждого Строка ИЗ ТаблицаТрансляции Цикл 
					
		Запрос.УстановитьПараметр("ИсточникПравило",Строка.ПравилоДт);
		Запрос.УстановитьПараметр("ИсточникШаблон",Строка.ОбъектУчетаИсточникДт);
		
		ДанныеИсточниковДт=Запрос.Выполнить().Выгрузить();
		
		Запрос.УстановитьПараметр("ИсточникПравило",Строка.ПравилоКт);
		Запрос.УстановитьПараметр("ИсточникШаблон",Строка.ОбъектУчетаИсточникКт);
		
		ДанныеИсточниковКт=Запрос.Выполнить().Выгрузить(); 
		
		ЗапросДанные.Текст="";
		
		ДобавитьДанныеВЗапрос(ЗапросДанные,Строка,ДанныеОбъекта,ДанныеИсточниковДт,"Дт"); 
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
		|;";
		ДобавитьДанныеВЗапрос(ЗапросДанные,Строка,ДанныеОбъекта,ДанныеИсточниковКт,"Кт");
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
		|;
		|ВЫБРАТЬ ТаблицаКорреспонденцииОбщая.Регистратор,
		|ТаблицаКорреспонденцииОбщая.ИдентификаторФинЗаписи,
		|&СчетПриемникДт КАК СчетДт,
		|&СчетПриемникКт КАК СчетКт,
		|&ПравилоДт КАК ПравилоДт,
		|&ПравилоКт КАК ПравилоКт";
    		
		Для Индекс=1 ПО 3 Цикл
			
			ЗапросДанные.Текст=ЗапросДанные.Текст+",
			|ТаблицаДанныхДт.Аналитика"+Индекс+" КАК СубконтоДт"+Индекс+",
			|ТаблицаДанныхКт.Аналитика"+Индекс+" КАК СубконтоКт"+Индекс;
			
		КонецЦикла;
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+",
		|ТаблицаДанныхДт.Период КАК Период,
		|ТаблицаДанныхДт.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
		|ТаблицаДанныхКт.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
		|ТаблицаДанныхДт.Подразделение КАК ПодразделениеДт,
		|ТаблицаДанныхКт.Подразделение КАК ПодразделениеКт,
		|ТаблицаДанныхДт.Валюта КАК ВалютаДт,
		|ТаблицаДанныхКт.Валюта КАК ВалютаКт,
	    |ВЫБОР КОГДА ТаблицаДанныхДт.СуммаРегл<=ТаблицаДанныхКт.СуммаРегл
		|Тогда ТаблицаДанныхДт.СуммаРегл Иначе ТаблицаДанныхКт.СуммаРегл Конец КАК СуммаРегл,
		|ВЫБОР КОГДА ТаблицаДанныхДт.СуммаРегл<=ТаблицаДанныхКт.СуммаРегл
		|Тогда ТаблицаДанныхДт.СуммаУпр Иначе ТаблицаДанныхКт.СуммаУпр Конец КАК СуммаУпр,		
		|ТаблицаДанныхДт.ВалютнаяСумма КАК ВалютнаяСуммаДт,
		|ТаблицаДанныхКт.ВалютнаяСумма КАК ВалютнаяСуммаКт,
		|ТаблицаДанныхДт.Количество КАК КоличествоДт,
		|ТаблицаДанныхКт.Количество КАК КоличествоКт
		|ИЗ ТаблицаКорреспонденцииОбщая КАК ТаблицаКорреспонденцииОбщая
		|Левое соединение ТаблицаДанныхДт КАК ТаблицаДанныхДт
		|ПО ТаблицаКорреспонденцииОбщая.Регистратор=ТаблицаДанныхДт.Регистратор
		|И ТаблицаКорреспонденцииОбщая.ИдентификаторФинЗаписи=ТаблицаДанныхДт.ИдентификаторФинЗаписи
		|Левое соединение ТаблицаДанныхКт КАК ТаблицаДанныхКт
		|ПО ТаблицаКорреспонденцииОбщая.Регистратор=ТаблицаДанныхКт.Регистратор
		|И ТаблицаКорреспонденцииОбщая.ИдентификаторФинЗаписи=ТаблицаДанныхКт.ИдентификаторФинЗаписи
		|ГДЕ ТаблицаКорреспонденцииОбщая.ИмяРегистраДт=&ИмяРегистраДт
		|И ТаблицаКорреспонденцииОбщая.ИмяРегистраКт=&ИмяРегистраКт";
		
		ЗапросДанные.УстановитьПараметр("СчетПриемникДт",Строка.СчетДтПриемник);
		ЗапросДанные.УстановитьПараметр("СчетПриемникКт",Строка.СчетКтПриемник);
		ЗапросДанные.УстановитьПараметр("ИмяРегистраДт",Строка.ИмяРегистраДт);
		ЗапросДанные.УстановитьПараметр("ИмяРегистраКт",Строка.ИмяРегистраКт);
		ЗапросДанные.УстановитьПараметр("ПравилоДт",Строка.ПравилоДт);
		ЗапросДанные.УстановитьПараметр("ПравилоКт",Строка.ПравилоКт);
		
		ТаблицаДанных=ЗапросДанные.Выполнить().Выгрузить();
		
		КэшТаблицыКурсов=Новый ТаблицаЗначений;
		КэшТаблицыКурсов.Колонки.Добавить("Валюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		КэшТаблицыКурсов.Колонки.Добавить("Период",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		КэшТаблицыКурсов.Колонки.Добавить("Курс",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,4));
		КэшТаблицыКурсов.Колонки.Добавить("Кратность",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
		
		КэшТаблицыКурсов.Индексы.Добавить("Валюта,Период"); 
		
		ЗапросКурсов=Новый Запрос;
		ЗапросКурсов.Текст="ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Курс КАК Курс,
		|	КурсыВалютСрезПоследних.Кратность КАК Кратность
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Период, Валюта = &Валюта) КАК КурсыВалютСрезПоследних";
		
		Для Каждого СтрокаДанные ИЗ ТаблицаДанных Цикл
			
			НоваяСтрока=ДанныеОбъекта.ПроводкиДокумента.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанные); 
						
			Для Каждого СтрРесурс ИЗ МассивБалансовые Цикл
								
				Если СтрРесурс.Приемник="СуммаВВалютеУчета" ИЛИ СтрРесурс.Приемник="Сумма" Тогда 
				
					НоваяСтрока.Значение=Обработки.КорректировкиЗначенийПоказателей.ПолучитьЗначениеПриемник(СтрокаДанные.Период,
														СтрокаДанные[СтрРесурс.Источник],
														ДанныеОбъекта.ВалютаУчетаИсточник,
														ДанныеОбъекта.ВалютаУчетаПриемник,
														КэшТаблицыКурсов,ЗапросКурсов);
					
				ИначеЕсли СтрРесурс.Приемник="СуммаВВалютеОтчетности" Тогда
					
					Если ДанныеОбъекта.ВалютаПредставленияИсточник=
						ДанныеОбъекта.ВалютаПредставленияПриемник Тогда
						
						НоваяСтрока.ПредставлениеЗначения=СтрокаДанные[СтрРесурс.Источник];
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если НЕ РесурсКоличество=Неопределено Тогда
					
					НоваяСтрока.КоличествоДт=СтрокаДанные[РесурсКоличество.Источник+"Дт"];
					НоваяСтрока.КоличествоКт=СтрокаДанные[РесурсКоличество.Источник+"Кт"];
					
				КонецЕсли;
				
				Если НЕ РесурсВалютнаяСумма=Неопределено Тогда
					
					НоваяСтрока.ЗначениеВалютаДт=СтрокаДанные[РесурсВалютнаяСумма.Источник+"Дт"];
					НоваяСтрока.ЗначениеВалютаКт=СтрокаДанные[РесурсВалютнаяСумма.Источник+"Кт"];
					
				КонецЕсли;
					
			КонецЦикла;
			
			Если ЗначениеЗаполнено(ДанныеОбъекта.ВалютаПредставленияПриемник) И (НЕ ЗначениеЗаполнено(НоваяСтрока.ПредставлениеЗначения)) Тогда
				
				НоваяСтрока.ПредставлениеЗначения=Обработки.КорректировкиЗначенийПоказателей.ПолучитьЗначениеПриемник(НоваяСтрока.Период,
														НоваяСтрока.Значение,
														ДанныеОбъекта.ВалютаУчетаПриемник,
														ДанныеОбъекта.ВалютаПредставленияПриемник,
														КэшТаблицыКурсов,ЗапросКурсов);
														
			КонецЕсли;
				
			
		КонецЦикла;
		
		ЗапросДанные.Текст="Уничтожить ТаблицаДанныхДт
		|;
		|Уничтожить ТаблицаДанныхКт";
		
		ЗапросДанные.Выполнить();
	
	КонецЦикла;
	
КонецПроцедуры // ТранслироватьДанныеРегистров()

Процедура ДобавитьДанныеВЗапрос(ЗапросДанные,Строка,ДанныеОбъекта,ДанныеИсточников,Префикс,ВыбиратьАналитику=Истина)
	
	Для Индекс=0 По 1 Цикл
			
			ДанныеИсточника=ДанныеИсточников[Индекс];
			
			Если Индекс=0 Тогда
				
				ПреобразоватьДанныеОтбора(ДанныеИсточника.ТекстОтбора,ДанныеИсточника.ТаблицаПараметровОтбораБД,ДанныеИсточника.УточненияСпособовОпределения,Префикс);
				ТаблицаПараметровОтбораБД=ДанныеИсточника.ТаблицаПараметровОтбораБД.Скопировать();
				УточненияСпособовОпределения=ДанныеИсточника.УточненияСпособовОпределения.Скопировать();
				
				Если ВыбиратьАналитику Тогда
					ДанныеВыборки=СформироватьДанныеВыборки(ДанныеИсточника.ПравилаИспользованияПолейЗапроса);
				КонецЕсли;
				
				ТекстОтбора=ДанныеИсточника.ТекстОтбора;
				
			Иначе
				
				ПреобразоватьДанныеОтбора(ДанныеИсточника.ТекстОтбора,ДанныеИсточника.ТаблицаПараметровОтбораБД,ДанныеИсточника.УточненияСпособовОпределения,"Ш"+Префикс);
				
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ДанныеИсточника.ТаблицаПараметровОтбораБД,ТаблицаПараметровОтбораБД);
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ДанныеИсточника.УточненияСпособовОпределения,УточненияСпособовОпределения);
				ТекстРесурсы=СформироватьТекстРесурсы(ДанныеИсточника.СоответствиеРесурсовДляТрансляции);
				
				ПутьКДаннымОбъектНастройки=ДанныеИсточника.ПутьКДаннымОбъектНастройки;
				
				Если НЕ ПустаяСтрока(ДанныеИсточника.ТекстОтбора) Тогда
					
					ТекстОтбора=ТекстОтбора+" И "+ДанныеИсточника.ТекстОтбора;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТабПараметры=УправлениеОтчетамиУХ.ИнициализироватьТаблицуШаблонТаблицыПараметров();
		ДанныеОтбора=Новый Структура;
		ДанныеОтбора.Вставить("СпособПолучения",Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления);         
		ДанныеОтбора.Вставить("ВерсияПлатформы",Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие83);
        ДанныеОтбора.Вставить("ТаблицаПараметровОтбораБД",ТаблицаПараметровОтбораБД);
		ДанныеОтбора.Вставить("УточненияСпособовОпределения",УточненияСпособовОпределения);
		УправлениеОтчетамиУХ.ЗаполнитьТабПараметрыПоОперанду(ДанныеОтбора, ТабПараметры);
		
		ПравилаВычисленияПараметровЗапроса = ТабПараметры;
		ПравилаВычисленияПараметровЗапроса.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ПравилаВычисленияПараметровЗапроса.Колонки.Добавить("ЗначениеИзКонтекста");
		
	
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
		|ВЫБРАТЬ"+?(ВыбиратьАналитику,ДанныеВыборки.ТекстПоля," 1")+ТекстРесурсы+",Период,Регистратор,ИдентификаторФинЗаписи
		|Поместить ТаблицаДанных"+Префикс+"
		|ИЗ РегистрНакопления."+Строка["ИмяРегистра"+Префикс];
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ИсходныйДокумент) Тогда
			
			ЗапросДанные.Текст=ЗапросДанные.Текст+"		
			|ГДЕ Регистратор=&Регистратор ";
			
			ЗапросДанные.УстановитьПараметр("Регистратор",ДанныеОбъекта.ИсходныйДокумент);
			
		Иначе
			
			ЗапросДанные.Текст=ЗапросДанные.Текст+"		
			|	ГДЕ Период МЕЖДУ &ДатаНач И &ДатаКон И Регистратор.Организация = &Организация";
			
			ЗапросДанные.УстановитьПараметр("ДатаНач",ДанныеОбъекта.ПериодОтчета.ДатаНачала);
			ЗапросДанные.УстановитьПараметр("ДатаКон",ДанныеОбъекта.ПериодОтчета.ДатаОкончания);
			ЗапросДанные.УстановитьПараметр("Организация",ДанныеОбъекта.Организация);
			
		КонецЕсли;
			
		ЗапросДанные.Текст=ЗапросДанные.Текст+?(ПустаяСтрока(ТекстОтбора),""," И "+ТекстОтбора);
					
		Если НЕ ПустаяСтрока(Строка.ОбъектНастройкиДт) Тогда
			
			ЗапросДанные.Текст=ЗапросДанные.Текст+"
			|И "+ПутьКДаннымОбъектНастройки+"=&ОбъектНастройкиДт";
			
			ЗапросДанные.УстановитьПараметр("ОбъектНастройкиДт",Строка.ОбъектНастройкиДт);
			
		КонецЕсли;
		
		ЗапросДанные.Текст=ЗапросДанные.Текст+"
			|Сгруппировать ПО Период, Регистратор,ИдентификаторФинЗаписи";
				
		
		Если ВыбиратьАналитику Тогда
			
			Если НЕ ПустаяСтрока(ДанныеВыборки.ТекстГруппировки) Тогда
				
				ЗапросДанные.Текст=ЗапросДанные.Текст+"
				|,"+ДанныеВыборки.ТекстГруппировки;
				
			КонецЕсли;
			
			Для Каждого Параметр ИЗ ДанныеВыборки.СтруктураПараметров Цикл
				
				ЗапросДанные.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
				
			КонецЦикла;
			
		КонецЕсли; 
		
		Для Каждого СтрПараметр ИЗ ПравилаВычисленияПараметровЗапроса Цикл
			
			СвойстваОтбора=УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(ДанныеОбъекта,СтрПараметр);
			
			ЗапросДанные.УстановитьПараметр(СтрПараметр.ИмяПараметра,СтрПараметр.ЗначениеИзКонтекста);
			
		КонецЦикла;

	
	
	
КонецПроцедуры // ДобавитьДанныеВЗапрос() 

Функция ПодготовитьДанныеТрансляцияРегистров(СоответствиеСчетовДляТрансляции) Экспорт 
	
	ДанныеСоответствия=ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(СоответствиеСчетовДляТрансляции,"ОбъектУчетаИсточник,ОбъектНастройки");

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.ТекстОтбора КАК ТекстОтбора,
	|	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	|		Поле КАК Поле,
	|		Синоним КАК Синоним,
	|		АналитикаОперанда КАК АналитикаОперанда,
	|		КодАналитики КАК КодАналитики,
	|		СпособЗаполнения КАК СпособЗаполнения,
	|		ФиксированноеЗначение КАК ФиксированноеЗначение
	|	) КАК ПравилаИспользованияПолейЗапроса,
	|	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	|		ПолеБД КАК ПолеБД,
	|		НаименованиеБД КАК НаименованиеБД,
	|		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	|		ТипРасчета КАК ТипРасчета,
	|		СмещениеПериода КАК СмещениеПериода,
	|		ТекстМодуля КАК ТекстМодуля,
	|		ИмяПараметра КАК ИмяПараметра
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	|		ИмяПараметра КАК ИмяПараметра,
	|		Значение КАК Значение,
	|		Представление КАК Представление,
	|		Пометка КАК Пометка,
	|		Тип КАК Тип,
	|		ПолеБД КАК ПолеБД
	|	) КАК УточненияСпособовОпределения,
	|	ИсточникиДанныхДляРасчетов.ПутьКДаннымОбъектНастройки КАК ПутьКДаннымОбъектНастройки,
	|	ВЫБОР
	|		КОГДА ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникШаблон
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоШаблон,
	|	ИсточникиДанныхДляРасчетов.СоответствиеРесурсовДляТрансляции.(
	|		РесурсИсточник КАК РесурсИсточник,
	|		РесурсПриемник КАК РесурсПриемник,
	|		Коэффициент КАК Коэффициент
	|	) КАК СоответствиеРесурсовДляТрансляции
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	(ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникПравило
	|			ИЛИ ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникШаблон)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоШаблон";
	
	
	
	
КонецФункции // ПодготовитьДанныеТрансляцияРегистров() 

Функция СформироватьДанныеВыборки(ПравилаИспользованияПолейЗапроса)
	
	МассивПолейГруппировки=Новый Массив;
	ТекстПоля="";
	ТекстГруппировки="";
	СтруктураПараметров=Новый Структура;
	МассивПолейАналитики=Новый Массив;
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Если СтрПоле.КодАналитики="Значение" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		МассивПолейАналитики.Добавить(СтрПоле.КодАналитики);
		
		Если СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			ТекстПоля=ТекстПоля+",
			|&"+СтрПоле.КодАналитики+" КАК "+СтрПоле.КодАналитики;
			
			СтруктураПараметров.Вставить(СтрПоле.КодАналитики,СтрПоле.ФиксированноеЗначение);
			
		ИначеЕсли  СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки Тогда
			
		Иначе
			
			ТекстПоля=ТекстПоля+",
			|"+СтрПоле.Поле+" КАК "+СтрПоле.КодАналитики;
			
			Если МассивПолейГруппировки.Найти(СтрПоле.Поле)=Неопределено Тогда
				
				ТекстГруппировки=ТекстГруппировки+",
				|"+СтрПоле.Поле;
				
				МассивПолейГруппировки.Добавить(СтрПоле.Поле);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Индекс=1 По 3 Цикл
		
		ДобавитьНедостающиеПоля("Аналитика"+Индекс,МассивПолейАналитики,ТекстПоля);
		
	КонецЦикла;
	
	ДобавитьНедостающиеПоля("Организация",МассивПолейАналитики,ТекстПоля);
	ДобавитьНедостающиеПоля("Сценарий",МассивПолейАналитики,ТекстПоля);
	ДобавитьНедостающиеПоля("ВидОперации",МассивПолейАналитики,ТекстПоля);
	ДобавитьНедостающиеПоля("Подразделение",МассивПолейАналитики,ТекстПоля);
	ДобавитьНедостающиеПоля("НаправлениеДеятельности",МассивПолейАналитики,ТекстПоля);
	ДобавитьНедостающиеПоля("Валюта",МассивПолейАналитики,ТекстПоля);
			
	СтруктураВыборки=Новый Структура;
	СтруктураВыборки.Вставить("ТекстПоля",Сред(ТекстПоля,2));
	СтруктураВыборки.Вставить("ТекстГруппировки",Сред(ТекстГруппировки,2));
	СтруктураВыборки.Вставить("СтруктураПараметров",СтруктураПараметров); 
	
	Возврат СтруктураВыборки; 
				
КонецФункции // СформироватьДанныеВыборки 

Процедура ДобавитьНедостающиеПоля(ИмяПоля,МассивПолейАналитики,ТекстПоля)

	Если МассивПолейАналитики.Найти(ИмяПоля)=Неопределено Тогда
		
		ТекстПоля=ТекстПоля+",
		|Неопределено КАК "+ИмяПоля;
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьНедостающиеПоля() 

Функция СформироватьТекстРесурсы(СоответствиеРесурсовДляТрансляции)
	
	Возврат ","+СформироватьТекстРесурсПриемник("СуммаРегл",СоответствиеРесурсовДляТрансляции)+",
	|"+СформироватьТекстРесурсПриемник("СуммаУпр",СоответствиеРесурсовДляТрансляции)+",
	|"+СформироватьТекстРесурсПриемник("ВалютнаяСумма",СоответствиеРесурсовДляТрансляции)+",
	|"+СформироватьТекстРесурсПриемник("Количество",СоответствиеРесурсовДляТрансляции);
		
КонецФункции // СформироватьТекстРесурсы() 

Функция СформироватьТекстРесурсПриемник(ИмяРесурсаПриемник,СоответствиеРесурсовДляТрансляции)
	
	МассивИсточник=СоответствиеРесурсовДляТрансляции.НайтиСтроки(Новый Структура("РесурсПриемник",ИмяРесурсаПриемник));
	
	Если МассивИсточник.Количество()=0 Тогда
		
		Возврат "0 КАК "+ИмяРесурсаПриемник;
		
	Иначе
		
		ТекстСумма="";
		
		Для Каждого Строка ИЗ МассивИсточник Цикл
			
			ТекстСумма=ТекстСумма+" + "+Строка.РесурсИсточник+"*"+Строка.Коэффициент;
			
		КонецЦикла;
		
		Возврат "СУММА("+Сред(ТекстСумма,3)+") КАК "+ИмяРесурсаПриемник;
		
	КонецЕсли;
			
КонецФункции // СформироватьТекстРесурсПриемник() 
	

Процедура ПреобразоватьДанныеОтбора(ТекстОтбора,ТаблицаПараметровОтбораБД,УточненияСпособовОпределения,Постфикс) Экспорт

	Для Каждого Строка ИЗ ТаблицаПараметровОтбораБД Цикл
		
		ИмяПараметраНов=Строка.ИмяПараметра+"_"+Постфикс;
		ТекстОтбора=СтрЗаменить(ТекстОтбора,"&"+Строка.ИмяПараметра,"&"+ИмяПараметраНов);
		
		МассивУточнение=УточненияСпособовОпределения.НайтиСтроки(Новый Структура("ИмяПараметра",Строка.ИмяПараметра));
		
		Для Каждого СтрУточнение ИЗ МассивУточнение Цикл
			
			СтрУточнение.ИмяПараметра=ИмяПараметраНов;
			
		КонецЦикла; 
		
		Строка.ИмяПараметра=ИмяПараметраНов;
		
	КонецЦикла;
			
	
	
КонецПроцедуры // ПреобразоватьДанныеОтбора() 

Функция ПолучитьТаблицуДанныхИсточник(ДанныеОбъекта) Экспорт
	
	ТаблицаКорреспонденцииОбщая=ПолучитьТаблицуКорреспонденцииРегистров(ДанныеОбъекта.ПериодОтчета,ДанныеОбъекта.ИсходныйДокумент,ДанныеОбъекта.Организация);	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ * Поместить ТаблицаКорреспонденцииОбщая ИЗ &ТаблицаКорреспонденцииОбщая КАК ТаблицаКорреспонденцииОбщая
	|;
	|ВЫБРАТЬ ИсточникиДанныхДт.Ссылка КАК ОбъектУчетаИсточникДт,
	|ИсточникиДанныхКт.Ссылка КАК ОбъектУчетаИсточникКт,
	|СУММА(ВЫБОР Когда СуммаРеглДт<=СуммаРеглКт Тогда СуммаРеглДт ИНАЧЕ СуммаРеглКт Конец) КАК Значение
	|ИЗ ТаблицаКорреспонденцииОбщая 
	|Внутреннее Соединение Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДт
	|ПО ТаблицаКорреспонденцииОбщая.ОбъектУчетаДт=ИсточникиДанныхДт.ОбъектУчета
	|Внутреннее Соединение Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхКт
	|ПО ТаблицаКорреспонденцииОбщая.ОбъектУчетаКт=ИсточникиДанныхКт.ОбъектУчета
	|Сгруппировать ПО ИсточникиДанныхДт.Ссылка,ИсточникиДанныхКт.Ссылка";

	Запрос.УстановитьПараметр("ТаблицаКорреспонденцииОбщая",ТаблицаКорреспонденцииОбщая);
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьТаблицуДанныхИсточник() 

