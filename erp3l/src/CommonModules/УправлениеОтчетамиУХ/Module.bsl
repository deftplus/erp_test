
// Функция проверяет наличие в указанной группе раскрытия аналитики
// по организациям.
Функция ПроверитьНаличиеАналитикиОрганизацииВГруппеРаскрытия(ГруппаРаскрытия) Экспорт
	
	Возврат ГруппаРаскрытия.АналитикаВГО > 0;
	
КонецФункции

// Возвращает наименование объекта по его коду.
// Пример: "ОсновныеСредства" => "Основные средства".
//
Функция НаименованиеПоКоду(Знач Код) Экспорт
	
	ЗАГЛАВНЫЕБУКВЫ = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Код = СокрЛП(Код);
	Наименование = "";
	Для Инд = 1 По СтрДлина(Код) Цикл
		ТекСимв = Сред(Код, Инд, 1);
		Если СтрНайти(ЗаглавныеБуквы, ТекСимв) <> 0 Тогда // текущий сивмол - заглавный
			Если Инд <> 1 Тогда // текущий символ - не первый
				ПредыдущийСимвол = Сред(Код, Инд - 1, 1);
				Если СтрНайти(ЗаглавныеБуквы, ПредыдущийСимвол) = 0 И ПредыдущийСимвол <> " " И ПредыдущийСимвол <> "_" Тогда // предыдущий символ - не заглавный, не пробел и не подчеркивание
					Если Инд <> СтрДлина(Код) Тогда // текущий символ - не последний
						СледСимв = Сред(Код, Инд + 1, 1);
						Если СтрНайти(ЗаглавныеБуквы, СледСимв) <> 0 Тогда // следующий символ - заглавный
							Наименование = Наименование + ТекСимв;
						Иначе // следующий символ - прописной
							Наименование = Наименование + " " + НРег(ТекСимв);
						КонецЕсли;
					Иначе // текущий символ - последний
						Наименование = Наименование + " " + ТекСимв;
					КонецЕсли;
				Иначе // предыдущий символ - не заглавная буква, не пробел и не подчеркивание
					Наименование = Наименование + " " + НРег(ТекСимв);
				КонецЕсли;
			Иначе // текущий символ - первый
				Наименование = Наименование + ТекСимв;
			КонецЕсли;
		Иначе // текущий символ - прописной
			Наименование = Наименование + ?(ТекСимв = "_", " ", ТекСимв);
		КонецЕсли;
	КонецЦикла;
	Возврат Наименование;
	
КонецФункции

// Возвращает признак того, что переданная в качестве параметра строка
// может быть использована в качестве кода объекта.
//
Функция СтрокаМожетИспользоватьсяВКачествеКода(Знач Стр) Экспорт
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Стр = ВРЕГ(СокрЛП(Стр));
	
	РусАнглАлфавит = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	РусАнглАлфавитИВспомогательныеСимволы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789";
	
	Если СтрНайти(РусАнглАлфавит, Сред(Стр, 1, 1)) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд = 2 По СтрДлина(Стр) Цикл
		Если СтрНайти(РусАнглАлфавитИВспомогательныеСимволы, Сред(Стр, Инд, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Функция анализирует параметры файла Excel и возвращает структуру анализа
Функция ПровестиАнализФайлаExcel(ИмяФайла) Экспорт
	
	
	
КонецФункции

Функция ПолучитьИмяФайлаПоВидуОтчета(ВидОтчета) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ИменаФайловИКаталогов.Имя
	|ИЗ
	|	РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
	|ГДЕ
	|	ИменаФайловИКаталогов.Объект = &Объект";
	
	Запрос.УстановитьПараметр("Объект",ВидОтчета);
	
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Имя;
	Иначе
		ТекстСообщения = НСтр("ru = 'Виду отчета %ВидОтчета% не сопоставлено имя исходного файла.
		|		Сопоставление производится в регистре ""Имена файлов и каталогов""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ОбщгоНазначения.ПолучитьИмяФайлаПоВидуОтчета.1", , , ТекстСообщения);
		Возврат "";
		
	КонецЕсли;
				 	
КонецФункции // ПолучитьИмяФайлаПоВидуОтчета()

// Возвращает объект типа ОписаниеТипов, соответствующий указанному значению 
// типа ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов.
//
Функция ПолучитьОписаниеТиповПоТипуЗначения(ТипЗначения) Экспорт
	
	Если ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
		Возврат (Новый ОписаниеТипов("Булево"));
	ИначеЕсли ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
		Возврат (Новый ОписаниеТипов("Дата"));
	ИначеЕсли ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
		Возврат (Новый ОписаниеТипов("Строка"));
	Иначе
		Возврат (Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18,5)));
	КонецЕсли;
	
КонецФункции

// Возвращает список значений с кодами групп раскрытия, определенных
// для указанного вида отчета.
//
Функция ПолучитьСписокИменГруппРаскрытия(ВидОтчета,ВыводитьСтроки=Истина) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиОтчетов.ГруппаРаскрытия.Код КАК Код,
	|	ПоказателиОтчетов.ГруппаРаскрытия.Наименование КАК Наименование,
	|	"""" КАК КодСтроки
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Если ВыводитьСтроки Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокиОтчетов.ГруппаРаскрытия.Код,
		|	СтрокиОтчетов.ГруппаРаскрытия.Наименование,
		|	СтрокиОтчетов.Код
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &Владелец
		|И (НЕ СтрокиОтчетов.ПометкаУдаления)";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	СписокИмен = Новый СписокЗначений;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СписокИмен.Добавить(СокрЛП(Выборка.Код)+?(НЕ ПустаяСтрока(Выборка.КодСтроки),"_"+СокрЛП(Выборка.КодСтроки),""), СокрЛП(Выборка.Наименование));
	КонецЦикла;
	Возврат СписокИмен;
	
КонецФункции

Функция ПолучитьДанныеПараметрическойНастройки(ПравилоОбработки,ТолькоПроверка=Ложь,ТолькоПравилаПересчета=Ложь) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	Если ТолькоПроверка Тогда
		
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ХранилищаПараметрическойНастройки.ПравилоОбработки
		|ИЗ
		|	РегистрСведений.ХранилищаПараметрическойНастройки КАК ХранилищаПараметрическойНастройки
		|ГДЕ
		|	ХранилищаПараметрическойНастройки.ПравилоОбработки = &ПравилоОбработки";
		
		Результат=Запрос.Выполнить().Выбрать();
		Возврат Результат.Следующий();
		
	Иначе
		
		Запрос.Текст="ВЫБРАТЬ
		|	ХранилищаПравилПересчета.ДатаАктуальности
		|ИЗ
		|	РегистрСведений.ХранилищаПравилПересчета КАК ХранилищаПравилПересчета
		|ГДЕ
		|	ХранилищаПравилПересчета.ПравилоОбработки = &ПравилоОбработки";
		
		Результат=Запрос.Выполнить().Выбрать();			 
		
		Если Результат.Следующий() Тогда
			
			СтруктураПересчета=КэшируемыеПроцедурыУХ.ПолучитьПравилаПересчетаПоказателей(ПравилоОбработки,Результат.ДатаАктуальности);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если НЕ ТолькоПравилаПересчета Тогда
			
			Запрос.Текст="ВЫБРАТЬ
			|	ХранилищаПараметрическойНастройки.ДатаАктуальности
			|ИЗ
			|	РегистрСведений.ХранилищаПараметрическойНастройки КАК ХранилищаПараметрическойНастройки
			|ГДЕ
			|	ХранилищаПараметрическойНастройки.ПравилоОбработки = &ПравилоОбработки";
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				СтруктураПараметрики=КэшируемыеПроцедурыУХ.ПолучитьДанныеПараметрическойНастройки(ПравилоОбработки,Результат.ДатаАктуальности);
				
				Для Каждого КлючИЗначение ИЗ СтруктураПараметрики Цикл
					
					СтруктураПересчета.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Возврат СтруктураПересчета;
				
	КонецЕсли;				 
	
КонецФункции // ПолучитьДанныеПараметрическойНастройки()

Процедура СформироватьДанныеРегистраПараметрическихНастроек(ПравилоОбработки,СравниватьТаблицыПараметров=Истина,СтруктураПараметрики=Неопределено,ТолькоПравилаПересчета=Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(ПравилоОбработки) Тогда
		Возврат;
	КонецЕсли;
			
	мПоказателиДляОбработки=ПолучитьПорядокВычисленияПоказателей(ПравилоОбработки,ПравилоОбработки.Владелец);
	
	Если мПоказателиДляОбработки=Неопределено Тогда
		
		ОчиститьЗаписиРегистраПараметрическихНастроек(ПравилоОбработки);
		Возврат;
		
	КонецЕсли;
	
	мПоказателиДляОбработки.Индексы.Добавить("Код");
	
	ДанныеДляПересчета=ПолучитьДеревоПересчетаПоказателей(мПоказателиДляОбработки);
	
	НаборЗаписей=РегистрыСведений.ХранилищаПравилПересчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	НоваяСтрока=НаборЗаписей.Добавить();
	
	СтруктураПересчет=Новый Структура;
	СтруктураПересчет.Вставить("мТаблицаПересчета",ДанныеДляПересчета.мТаблицаПересчета);
	СтруктураПересчет.Вставить("мПоказателиОбязательныеКПересчету",ДанныеДляПересчета.мПоказателиОбязательныеКПересчету);
	СтруктураПересчет.Вставить("мПоказателиДляОбработки",мПоказателиДляОбработки);
	
	НоваяСтрока.ПравилаПересчетаПоказателей=Новый ХранилищеЗначения(СтруктураПересчет, Новый СжатиеДанных());
	НоваяСтрока.ПравилоОбработки=ПравилоОбработки;
	НоваяСтрока.ДатаАктуальности=ТекущаяДата();
	НаборЗаписей.Записать(Истина);
	
	ДанныеОперандов=ПолучитьДанныеОперандовДляРасчета(СравниватьТаблицыПараметров,
	ПравилоОбработки,
	?(ТипЗнч(ПравилоОбработки)=Тип("СправочникСсылка.ПравилаЗаполненияОбъектовБД"),Перечисления.СпособыИспользованияОперандов.ДляЗаполненияОбъектовБД,Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета));
	
	СтруктураОперанды=Новый Структура;
	
	СтруктураОперанды.Вставить("мОперанды",ДанныеОперандов.мОперанды);	
	СтруктураОперанды.Вставить("мТабПоказателиЗапросы",ДанныеОперандов.мТабПоказателиЗапросы);
	СтруктураОперанды.Вставить("мСоответствиеОперандовИПоказателейОтбора",ДанныеОперандов.мСоответствиеОперандовИПоказателейОтбора);
	СтруктураОперанды.Вставить("ЕстьОбращениеКВИБ",ДанныеОперандов.ЕстьОбращениеКВИБ);
	
	ТекДанныеПараметрическойНастройки=Новый ХранилищеЗначения(СтруктураОперанды, Новый СжатиеДанных());
	
	НаборЗаписей=РегистрыСведений.ХранилищаПараметрическойНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	
	НоваяСтрока=НаборЗаписей.Добавить();
	НоваяСтрока.ПравилоОбработки=ПравилоОбработки;
	НоваяСтрока.ДанныеПараметрическойНастройки=ТекДанныеПараметрическойНастройки;
	НоваяСтрока.ДатаАктуальности=ТекущаяДата();
	НаборЗаписей.Записать(Истина);
	
	Если Не СтруктураПараметрики=Неопределено Тогда
		
		Для Каждого КлючИЗначение ИЗ СтруктураПересчет Цикл
			
			СтруктураПараметрики.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЦикла;
		
		Для Каждого КлючИЗначение ИЗ СтруктураОперанды Цикл
			
			СтруктураПараметрики.Вставить(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры // СформироватьДанныеРегистраПараметрическихНастроек 

Функция ПолучитьТаблицуЗависимыхПоказателей(ПотребительРасчета,НазначениеРасчетов=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов,
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.СдвигПериодов
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор = &ПоказательОтбор
	|	И НЕ РеквизитыИсточниковДанныхДляФормул.НеИспользуется";
	
	Если ЗначениеЗаполнено(НазначениеРасчетов) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов=&НазначениеРасчетов";	
		Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
		
	КонецЕсли;			 
	
	Запрос.УстановитьПараметр("ПоказательОтбор",ПотребительРасчета);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции

Функция ПолучитьУточнениеСпособаОпределения(ПолеБД,ИмяПараметра,ТаблицаУточнений) Экспорт
		
	МассивУточнений=ТаблицаУточнений.НайтиСтроки(Новый Структура("ИмяПараметра",ИмяПараметра));
	
	Если МассивУточнений.Количество()=0 Тогда
		
		МассивУточнений=ТаблицаУточнений.НайтиСтроки(Новый Структура("ПолеБД",ПолеБД));
		
		Если МассивУточнений.Количество()=0 Тогда
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если МассивУточнений[0].Тип="СписокЗначений" Тогда
		
		УточнениеСпособаОпределения=Новый СписокЗначений;
		
		Для Каждого Строка ИЗ МассивУточнений Цикл
			
			УточнениеСпособаОпределения.Добавить(Строка.Значение,Строка.Представление,Строка.Пометка);
			
		КонецЦикла;
		
	ИначеЕсли МассивУточнений[0].Тип="Массив" Тогда

		УточнениеСпособаОпределения=Новый Массив;
		
		Для Каждого Строка ИЗ МассивУточнений Цикл
			
			УточнениеСпособаОпределения.Добавить(Строка.Значение);
			
		КонецЦикла;
		
	ИначеЕсли МассивУточнений[0].Тип="Структура" Тогда

		УточнениеСпособаОпределения=Новый Структура;
		
		Для Каждого Строка ИЗ МассивУточнений Цикл
			
			УточнениеСпособаОпределения.Вставить(Строка.Представление,Строка.Значение);
			
		КонецЦикла;
		
	Иначе
		
		УточнениеСпособаОпределения=МассивУточнений[0].Значение;
		
	КонецЕсли;
	
	Возврат УточнениеСпособаОпределения;
		
КонецФункции // ПолучитьУточнениеСпособаОпределения()

Функция СформироватьТекстОтбора(ДеревоПараметровОтбора,ПостфиксДтКт="",ОсновнаяТаблицаРегистра=Ложь,ТолькоРегистратор=Ложь,мТаблицаПоказателейБД=Неопределено) Экспорт
	
	НомерПараметра=1;
	ТекстОтбор="";
	
	Для Каждого СтрокаПараметр ИЗ ДеревоПараметровОтбора.Строки Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаПараметр.ПолеБД="ДатаНач" Тогда
			
			Если ОсновнаяТаблицаРегистра Тогда 
				
				СтрокаПараметр.ИмяПараметра="ПараметрИсточника"+НомерПараметра;
				ТекстОтбор=ТекстОтбор+" И Период>=&"+СтрокаПараметр.ИмяПараметра;
				НомерПараметра=НомерПараметра+1;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
					
		ИначеЕсли СтрокаПараметр.ПолеБД="ДатаКон" Тогда
			
			Если ОсновнаяТаблицаРегистра Тогда 
				
				СтрокаПараметр.ИмяПараметра="ПараметрИсточника"+НомерПараметра;
				ТекстОтбор=ТекстОтбор+" И Период<=&"+СтрокаПараметр.ИмяПараметра;
				НомерПараметра=НомерПараметра+1;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;

		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ Тогда
			
			ТекстГруппа=ПолучитьТекстГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД);
			ТекстОтбор=ТекстОтбор+" И("+Сред(ТекстГруппа,3)+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда
			
			ТекстГруппа=ПолучитьТекстГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД);
			ТекстОтбор=ТекстОтбор+" И НЕ("+Сред(ТекстГруппа,3)+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
			
			ТекстГруппа=ПолучитьТекстГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД);
			ТекстОтбор=ТекстОтбор+" И ("+Сред(ТекстГруппа,5)+")";
			
		Иначе
			
			Если ТолькоРегистратор И (НЕ СтрНайти(СтрокаПараметр.ПолеБД,"Регистратор")>0) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаПараметр.ИмяПараметра="ПараметрИсточника"+НомерПараметра+ПостфиксДтКт;
			ТекстОтбор=ТекстОтбор+" И "+ПолучитьКонструкциюОтбора(СтрокаПараметр,мТаблицаПоказателейБД);
			НомерПараметра=НомерПараметра+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сред(ТекстОтбор,3);
		
КонецФункции // СформироватьТекстОтбора()

Функция ОпределитьТекстотбораПоАналитике(СтрокаПараметр,мТаблицаПоказателейБД)
	
	МассивПутей=СтрРазделить(СтрокаПараметр.ПолеБД,".");
	ТипЗначения="";
	
	Если МассивПутей.Количество()=1 Тогда
		
		Если СтрокаПараметр.ТипЗначения.Количество()=1 Тогда
			
			ТипЗначения=СтрокаПараметр.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
	Иначе
		
		СтрПоле=мТаблицаПоказателейБД.Найти(МассивПутей[0],"ПолеБД");
		
		Если (НЕ СтрПоле=Неопределено) И СтрПоле.ТипЗначения.Количество()=1 Тогда
			
			ТипЗначения= СтрПоле.ТипЗначения[0].Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТипЗначения) Тогда
		
		МассивПутей[0]="ВЫРАЗИТЬ("+МассивПутей[0]+" КАК "+ТипЗначения+")";
		
		Возврат СтрСоединить(МассивПутей,".");
		
	Иначе
		
		Возврат СтрокаПараметр.ПолеБД;
		
	КонецЕсли;
				
КонецФункции // ОпределитьТипЗначенияПоляОтбора() 

Функция ПреобразоватьПолеБД(СтрокаПараметр,мТаблицаПоказателейБД) Экспорт
	
	Если мТаблицаПоказателейБД=Неопределено Тогда
		
		Возврат СтрокаПараметр.ПолеБД;
		
	ИначеЕсли (СтрНайти(СтрокаПараметр.ПолеБД,"Аналитика")>0 ИЛИ СтрНайти(СтрокаПараметр.ПолеБД,"Субконто")>0) Тогда
		
		Возврат ОпределитьТекстотбораПоАналитике(СтрокаПараметр,мТаблицаПоказателейБД);
				
	Иначе
		
		Возврат СтрокаПараметр.ПолеБД;
		
	КонецЕсли;
	
КонецФункции // ПреобразоватьПолеБД() 	

Функция ПолучитьТекстГруппыУсловий(КоллекцияСтрок,СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД)
	
	ТекстОтбор="";
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
		
		ТекстПредлог=" ИЛИ ";
		
	Иначе
		
		ТекстПредлог=" И ";
		
	КонецЕсли;
			
	Для Каждого СтрокаПараметр ИЗ КоллекцияСтрок Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ Тогда
			
			ТекстГруппа=ПолучитьТекстГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД);
			ТекстОтбор=ТекстОтбор+ТекстПредлог+"("+Сред(ТекстГруппа,3)+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда
			
			ТекстГруппа=ПолучитьТекстГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД);
			ТекстОтбор=ТекстОтбор+ТекстПредлог+" НЕ("+Сред(ТекстГруппа,3)+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
			
			ТекстГруппа=ПолучитьТекстГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра,ПостфиксДтКт,ТолькоРегистратор,мТаблицаПоказателейБД);
			ТекстОтбор=ТекстОтбор+ТекстПредлог+"("+Сред(ТекстГруппа,5)+")";
			
		Иначе
			
			Если ТолькоРегистратор И (НЕ СтрНайти(СтрокаПараметр.ПолеБД,"Регистратор")>0) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаПараметр.ИмяПараметра="ПараметрИсточника"+НомерПараметра+ПостфиксДтКт;
			ТекстОтбор=ТекстОтбор+ТекстПредлог+ПолучитьКонструкциюОтбора(СтрокаПараметр,мТаблицаПоказателейБД);
			НомерПараметра=НомерПараметра+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОтбор;	
	
КонецФункции // ПолучитьТекстГруппыУсловий()

Функция ПолучитьКонструкциюОтбора(СтрокаПараметр,мТаблицаПоказателейБД) Экспорт
	
	ПолеОтбора=ПреобразоватьПолеБД(СтрокаПараметр,мТаблицаПоказателейБД);
	
	Если ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения)=Тип("СписокЗначений")
		ИЛИ ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения)=Тип("Массив") Тогда
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
			
			Возврат "(НЕ "+ПолеОтбора+" В ИЕРАРХИИ(&"+СтрокаПараметр.ИмяПараметра+"))";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда			
			
			Возврат "(НЕ "+ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+"))";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
			
			Возврат ПолеОтбора+" В ИЕРАРХИИ(&"+СтрокаПараметр.ИмяПараметра+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений Тогда

			ТекстУсловия="";
			
			Для Каждого Элемент ИЗ СтрокаПараметр.УточнениеСпособаОпределения Цикл
				
				ТекстУсловия=ТекстУсловия+" ИЛИ "+ПолеОтбора+" ССЫЛКА "+Элемент.Значение;
				
			КонецЦикла;
			
			Возврат "("+Сред(ТекстУсловия,6)+")";
			
		Иначе
			
			Возврат ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+")";
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета Тогда
			
			Возврат ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда

			Возврат "(НЕ "+ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+"))";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия Тогда

			Возврат ПолеОтбора+" В ИЕРАРХИИ(&"+СтрокаПараметр.ИмяПараметра+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
			
			Если ЗначениеЗаполнено(СтрокаПараметр.НастройкаСоответствия) Тогда
				
				Возврат "(НЕ "+ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+"))";
				
			Иначе
				
				Возврат ПолеОтбора+"<>&"+СтрокаПараметр.ИмяПараметра;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
			
			Возврат ПолеОтбора+" МЕЖДУ &"+СтрокаПараметр.ИмяПараметра+"_1 И &"+СтрокаПараметр.ИмяПараметра+"_2";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше Тогда
			
			Возврат ПолеОтбора+">&"+СтрокаПараметр.ИмяПараметра;
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно Тогда
			
			Возврат ПолеОтбора+">=&"+СтрокаПараметр.ИмяПараметра;
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше Тогда
			
			Возврат ПолеОтбора+"<&"+СтрокаПараметр.ИмяПараметра;
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
			
			Возврат ПолеОтбора+"<=&"+СтрокаПараметр.ИмяПараметра;
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
			
			Возврат ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
			
			Возврат "(НЕ "+ПолеОтбора+" В ИЕРАРХИИ(&"+СтрокаПараметр.ИмяПараметра+"))";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда			
			
			Возврат "(НЕ "+ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+"))";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
			
			Возврат ПолеОтбора+" В ИЕРАРХИИ(&"+СтрокаПараметр.ИмяПараметра+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений Тогда
			
			Возврат ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения Тогда
			
			Возврат ПолеОтбора+" ССЫЛКА "+СтрокаПараметр.УточнениеСпособаОпределения;
			
		Иначе	
			
			Если ЗначениеЗаполнено(СтрокаПараметр.НастройкаСоответствия) Тогда
				
				Возврат ПолеОтбора+" В (&"+СтрокаПараметр.ИмяПараметра+")";
				
			Иначе
				
				Возврат ПолеОтбора+"=&"+СтрокаПараметр.ИмяПараметра;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецФункции // ПолучитьКонструкциюОтбора()

Функция ПолучитьПредставлениеГруппыУсловий(КоллекцияСтрок,СпособВычисленияПараметра,НомерПараметра)
	
	ТекстОтбор="";
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
		
		ТекстПредлог=" ИЛИ ";
		
	Иначе
		
		ТекстПредлог=" И ";
		
	КонецЕсли;
			
	Для Каждого СтрокаПараметр ИЗ КоллекцияСтрок Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ Тогда
			
			ТекстГруппа=ПолучитьПредставлениеГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра);
			ТекстОтбор=ТекстОтбор+ТекстПредлог+"("+Сред(ТекстГруппа,3)+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда
			
			ТекстГруппа=ПолучитьПредставлениеГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра);
			ТекстОтбор=ТекстОтбор+ТекстПредлог+" НЕ("+Сред(ТекстГруппа,3)+")";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
			
			ТекстГруппа=ПолучитьПредставлениеГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра);
			ТекстОтбор=ТекстОтбор+ТекстПредлог+"("+Сред(ТекстГруппа,5)+")";
			
		Иначе
			
			СтрокаПараметр.ИмяПараметра="ПараметрИсточника"+НомерПараметра;
			ТекстОтбор=ТекстОтбор+ТекстПредлог+ПолучитьПредставлениеОтбора(СтрокаПараметр);
			НомерПараметра=НомерПараметра+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОтбор;	
	
КонецФункции // ПолучитьТекстГруппыУсловий()

Функция ПолучитьПредставлениеОтбора(СтрокаПараметр) Экспорт
	
	Если СтрНайти(СтрокаПараметр.ПолеБД,"Аналитика")>0 Тогда
		
		ТекстПоля=СтрЗаменить(СтрокаПараметр.ПолеБД,"Аналитика","А");
		
	ИначеЕсли СтрНайти(СтрокаПараметр.ПолеБД,"СубконтоДт")>0 Тогда
		
		ТекстПоля=СтрЗаменить(СтрокаПараметр.ПолеБД,"СубконтоДт","С");
		
	ИначеЕсли СтрНайти(СтрокаПараметр.ПолеБД,"СубконтоКт")>0 Тогда
		
		ТекстПоля=СтрЗаменить(СтрокаПараметр.ПолеБД,"СубконтоКт","КС");
		
	ИначеЕсли СтрНайти(СтрокаПараметр.ПолеБД,"Субконто")>0 Тогда
		
		ТекстПоля=СтрЗаменить(СтрокаПараметр.ПолеБД,"Субконто","С");
		
	Иначе
		
		ТекстПоля=СтрокаПараметр.ПолеБД;
		
	КонецЕсли;
	
	Если ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения)=Тип("СписокЗначений")
		ИЛИ ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения)=Тип("Массив") Тогда
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
			
			Возврат СтрШаблон(Нстр("ru = '(НЕ %1 В ИЕРАРХИИ(%2))'"), ТекстПоля, ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения));
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда			
			
			Возврат СтрШаблон(Нстр("ru = '(НЕ %1 В (%2))'"), ТекстПоля, ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения));
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
			
			Возврат СтрШаблон(Нстр("ru = '%1 В ИЕРАРХИИ(%2)'"), ТекстПоля, ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения));
			
		Иначе
			
			Возврат СтрШаблон(Нстр("ru = '%1 В (%2)'"), ТекстПоля, ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения));
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета Тогда
			
			Возврат СтрШаблон(Нстр("ru = '%1 В ПЕРИМЕТРЕ %2'"), ТекстПоля, ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения));
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда

			Возврат СтрШаблон(Нстр("ru = '%1НЕ В ПЕРИМЕТРЕ %2'"), ТекстПоля, ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения));
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
			
			Возврат ТекстПоля+"<>"+ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения);
						
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше Тогда
			
			Возврат ТекстПоля+">"+ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения);
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно Тогда
			
			Возврат ТекстПоля+">="+ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения);
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше Тогда
			
			Возврат ТекстПоля+"<"+ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения);
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
			
			Возврат ТекстПоля+"<="+ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения);
			
		Иначе	
			
			Возврат ТекстПоля+"="+ПолучитьТекстОтбора(СтрокаПараметр.УточнениеСпособаОпределения);
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецФункции // ПолучитьКонструкциюОтбора()

Функция ПолучитьТекстОтбора(ДанныеОтбора)
	
	ТекстОтбора="";
	
	Если ТипЗнч(ДанныеОтбора)=Тип("СписокЗначений") Тогда
		
		Для Каждого Строка ИЗ ДанныеОтбора Цикл
			
			ТекстОтбора=ТекстОтбора+","+Строка.Значение;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДанныеОтбора)=Тип("Массив") Тогда
		
		Для Каждого Значение ИЗ ДанныеОтбора Цикл
			
			ТекстОтбора=ТекстОтбора+","+ Значение;
			
		КонецЦикла;
		
	Иначе
		
		ТекстОтбора=ТекстОтбора+","+ ДанныеОтбора;
		
	КонецЕсли;
	
	Возврат Сред(ТекстОтбора,2);	
	
КонецФункции // ПолучитьТекстОтбора()

////////////////////////////////////////////////////////////////////////////////////////////////////////
// Формирование представления отбора 

Функция СформироватьПредставлениеОтбора(ДеревоПараметровОтбора) Экспорт
	
	НомерПараметра=1;
	ТекстОтбор="";
	
	Для Каждого СтрокаПараметр ИЗ ДеревоПараметровОтбора.Строки Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется
			ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета
			ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
			ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета
			ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета
			ИЛИ СтрокаПараметр.ПолеБД="ДатаНач"
			ИЛИ СтрокаПараметр.ПолеБД="ДатаКон" Тогда
	
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ Тогда
			
			ТекстГруппа=ПолучитьПредставлениеГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра);
			ТекстОтбор=СтрШаблон(Нстр("ru = '%1 И(%2)'"), ТекстОтбор, Сред(ТекстГруппа,3));
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ Тогда
			
			ТекстГруппа=ПолучитьПредставлениеГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра);
			ТекстОтбор=СтрШаблон(Нстр("ru = '%1 И НЕ(%2)'"), ТекстОтбор, Сред(ТекстГруппа,3));
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ Тогда
			
			ТекстГруппа=ПолучитьПредставлениеГруппыУсловий(СтрокаПараметр.Строки,СтрокаПараметр.СпособВычисленияПараметра,НомерПараметра);
			ТекстОтбор=СтрШаблон(Нстр("ru = '%1 И (%2)'"), ТекстОтбор, Сред(ТекстГруппа,5));
			
		Иначе
			
			СтрокаПараметр.ИмяПараметра="ПараметрИсточника"+НомерПараметра;
			ТекстОтбор=СтрШаблон(Нстр("ru = '%1 И %2'"), ТекстОтбор, ПолучитьПредставлениеОтбора(СтрокаПараметр));
			НомерПараметра=НомерПараметра+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Сред(ТекстОтбор,3);
		
КонецФункции // СформироватьТекстОтбора()

Функция СформироватьПредставлениеСопоставления(ТаблицаСоответствияБД) Экспорт
	
	МассивСопоставлено=ТаблицаСоответствияБД.НайтиСтроки(Новый Структура("АналитикаОтчета",Ложь));
	
	ТекстСопоставлено="";
	
	Для Каждого СтрокаСопоставлено ИЗ МассивСопоставлено Цикл
		
		ТекстСопоставлено=ТекстСопоставлено+","+СтрЗаменить(СтрокаСопоставлено.АналитикаКонсолидации,"Аналитика","С")+"=";
		
		Если СтрокаСопоставлено.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			ТекстПоля=Строка(СтрокаСопоставлено.ФиксированноеЗначение);
			
		ИначеЕсли СтрНайти(СтрокаСопоставлено.ПолеБД,"Аналитика")>0 Тогда
			
			ТекстПоля=СтрЗаменить(СтрокаСопоставлено.ПолеБД,"Аналитика","А");
			
		ИначеЕсли СтрНайти(СтрокаСопоставлено.ПолеБД,"СубконтоДт")>0 Тогда
			
			ТекстПоля=СтрЗаменить(СтрокаСопоставлено.ПолеБД,"СубконтоДт","С");
			
		ИначеЕсли СтрНайти(СтрокаСопоставлено.ПолеБД,"СубконтоКт")>0 Тогда
			
			ТекстПоля=СтрЗаменить(СтрокаСопоставлено.ПолеБД,"СубконтоКт","КС");
			
		ИначеЕсли СтрНайти(СтрокаСопоставлено.ПолеБД,"Субконто")>0 Тогда
			
			ТекстПоля=СтрЗаменить(СтрокаСопоставлено.ПолеБД,"Субконто","С");
			
		Иначе
			
			ТекстПоля=СтрокаСопоставлено.ПолеБД;
			
		КонецЕсли;
		
		ТекстСопоставлено=ТекстСопоставлено+?(ПустаяСтрока(ТекстПоля),"?",ТекстПоля);
		
	КонецЦикла;
	
	Возврат Сред(ТекстСопоставлено,2);
	
КонецФункции // СформироватьПредставлениеСопоставления()

Процедура ОчиститьЗаписиРегистраПараметрическихНастроек(ПравилоОбработки) Экспорт
	
	НаборЗаписей=РегистрыСведений.ХранилищаПараметрическойНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей=РегистрыСведений.ХранилищаПравилПересчета.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.ХранилищаПараметрическойНастройкиРасширенный.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПравилоОбработки.Установить(ПравилоОбработки);
	НаборЗаписей.Записать();

КонецПроцедуры // ОчиститьЗаписиРегистраПараметрическихНастроек() 

Функция ПолучитьФормулыРасчета(НазначениеРасчетов,ПотребительРасчета=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПроцедурыРасчетов.ПотребительРасчета,
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПроцедурыРасчетов.ПроцедураВычисления,
	|	ПроцедурыРасчетов.СпособОбработки,
	|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии,
	|	ПроцедурыРасчетов.РедактированиеВозможно,
	|	ПроцедурыРасчетов.ТолькоСуммирование
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов";
	
	Если НЕ ПотребительРасчета=Неопределено Тогда
		Запрос.Текст=Запрос.Текст+"
		|И ПроцедурыРасчетов.ПотребительРасчета = &ПотребительРасчета";
		
		Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьФормулыРасчета() 

Процедура ОчиститьФормулыРасчета(НазначениеРасчетов=Неопределено,ПотребительРасчета=Неопределено) Экспорт
	
	// Очищаем настройки расчетов
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов ССЫЛКА Справочник.ПравилаОбработки";
	
	Если НЕ НазначениеРасчетов=Неопределено Тогда	
		
		Запрос.Текст=Запрос.Текст+"
		|И ПроцедурыРасчетов.НазначениеРасчетов=&НазначениеРасчетов";
		Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
		
	КонецЕсли;
	
	Если НЕ ПотребительРасчета=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПроцедурыРасчетов.ПотребительРасчета=&ПотребительРасчета";
		Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
		
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		ОчиститьЗаписиРегистраПараметрическихНастроек(Результат.НазначениеРасчетов);
	КонецЦикла;
				
	// Очищаем формулы расчета
	
	НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
	
	Если НЕ НазначениеРасчетов=Неопределено Тогда	
		НаборЗаписей.Отбор.НазначениеРасчетов.Установить(НазначениеРасчетов);
	КонецЕсли;
	
	Если НЕ ПотребительРасчета=Неопределено Тогда
		НаборЗаписей.Отбор.ПотребительРасчета.Установить(ПотребительРасчета);	
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры // ОчиститьЗаписиРегистраПараметрическихНастроек()

Процедура ЗаписатьПроцедуруРасчета(СтруктураДанных,ПроверятьИспользованиеОперандов=Истина,ФормироватьДанныеРасчетовПоказател=Истина) Экспорт
	
	Если ТипЗнч(СтруктураДанных.НазначениеРасчетов)=Тип("СправочникСсылка.ПравилаОбработки") Тогда
		
		ОчиститьЗаписиРегистраПараметрическихНастроек(СтруктураДанных.НазначениеРасчетов);
		
		Если (НЕ СтруктураДанных.ПроизвольныйКод) И ПроверятьИспользованиеОперандов Тогда 
			
			ОтметитьИспользованиеОперандов(СтруктураДанных.НазначениеРасчетов,СтруктураДанных.ПотребительРасчета,ПолучитьСписокКодовОперандов(СтруктураДанных.ТекстПроцедуры),Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НазначениеРасчетов.Установить(СтруктураДанных.НазначениеРасчетов);
	НаборЗаписей.Отбор.ПотребительРасчета.Установить(СтруктураДанных.ПотребительРасчета);
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если Не ПустаяСтрока(СтруктураДанных.ТекстПроцедуры) Тогда
		
		НоваяСтрока=НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураДанных);
		
		НоваяСтрока.Процедура=СтруктураДанных.ТекстПроцедуры;
		
		Если ФормироватьДанныеРасчетовПоказател Тогда
			
			НоваяСтрока.ДанныеРасчетовПоказателя=Новый ХранилищеЗначения(ПолучитьДанныеРасчетовПоказателя(СтруктураДанных.НазначениеРасчетов,СтруктураДанных.ПотребительРасчета));
			
		КонецЕсли;
		
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
				
КонецПроцедуры // ЗаписатьПроцедуруРасчета()

Функция ПолучитьДанныеРасчетовПоказателя(ПравилоОбработки,ПотребительРасчета) Экспорт
	
	ДанныеДляРасчета=ПолучитьДанныеОперандовДляРасчета(Истина,ПравилоОбработки,Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,ПотребительРасчета);
		
	Возврат ДанныеДляРасчета;
		
КонецФункции

Процедура ОбновитьСвойстваПроцедурыРасчетов(НазначениеРасчетов,ПотребительРасчета) Экспорт
	
	НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НазначениеРасчетов.Установить(НазначениеРасчетов);
	НаборЗаписей.Отбор.ПотребительРасчета.Установить(ПотребительРасчета);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 ИЛИ НаборЗаписей[0].ПроизвольныйКод Тогда
		Возврат;
	КонецЕсли;
	
	ВычисляемыйПоказатель=Истина;
	СписокКодов=Новый СписокЗначений;
	
	ТекПроцедура=НаборЗаписей[0].Процедура;
	ТекПроцедураВычисления=ТекПроцедура;
	ТекСпособОбработки=НаборЗаписей[0].СпособОбработки;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Код КАК КодОперанда,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК КодПоказателяОтбор,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета,
	|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы,
	|	ВЫБОР
	|		КОГДА ПринудительноеЗаполнение.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтандартноеЗаполнение
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|		ГДЕ
	|			ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов = &НазначениеРасчетов
	|			И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПотребительРасчета = &ПотребительРасчета
	|			И НЕ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПометкаУдаления
	|			И (ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки)
	|					ИЛИ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение))) КАК ПринудительноеЗаполнение
	|		ПО ИсточникиДанныхДляРасчетов.Ссылка = ПринудительноеЗаполнение.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если (Не (Результат.ПоказательТекущегоОтчета И Результат.СтандартноеЗаполнение)) ИЛИ Результат.ЕстьНестандартныеОтборы Тогда
			
			ВычисляемыйПоказатель=Ложь;	
			
		КонецЕсли;
		
		ТекПроцедураВычисления=СтрЗаменить(ТекПроцедураВычисления,Результат.КодОперанда,Результат.КодПоказателяОтбор);
			
	КонецЦикла;
	
	СпособОбработки=?(ВычисляемыйПоказатель,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	
	Если НЕ ТекСпособОбработки=СпособОбработки Тогда
		
		НаборЗаписей.Очистить();
		НоваяСтрока=НаборЗаписей.Добавить();
		НоваяСтрока.НазначениеРасчетов=НазначениеРасчетов;
		НоваяСтрока.ПотребительРасчета=ПотребительРасчета;
		НоваяСтрока.Процедура=ТекПроцедура;
		НоваяСтрока.ПроцедураВычисления=?(ВычисляемыйПоказатель,ТекПроцедураВычисления,ТекПроцедура);
		НоваяСтрока.СпособОбработки=СпособОбработки;	
		НоваяСтрока.ДанныеРасчетовПоказателя=Новый ХранилищеЗначения(ПолучитьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета));
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
		
КонецПроцедуры // ОбновитьСвойстваПроцедурыРасчетов() 

Процедура ОбновитьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета) Экспорт
	
	ОчиститьЗаписиРегистраПараметрическихНастроек(НазначениеРасчетов);
	
	НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НазначениеРасчетов.Установить(НазначениеРасчетов);
	НаборЗаписей.Отбор.ПотребительРасчета.Установить(ПотребительРасчета);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 ИЛИ НаборЗаписей[0].ПроизвольныйКод Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей[0].ДанныеРасчетовПоказателя=Новый ХранилищеЗначения(ПолучитьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета));
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ОбновитьДанныеРасчетовПоказателя() 

Функция ПолучитьСписокКодовОперандов(ТекстФормула) Экспорт
	
	ДлинаКодаОперанда=Метаданные.Справочники.ИсточникиДанныхДляРасчетов.ДлинаКода;
	
	СписокКодов=Новый СписокЗначений;
	
	ТекКод="";
	ЕстьОперанд=Ложь;
	
	Для НомСимв=1 По СтрДлина(ТекстФормула) Цикл
		
		ТекСимвол=Сред(ТекстФормула,НомСимв,1);
		
		Если ТекСимвол="[" Тогда
			
			ЕстьОперанд=Истина;
			
		ИначеЕсли ТекСимвол="]" Тогда
			
			ТекКод=ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(ТекКод,ДлинаКодаОперанда);
			
			СписокКодов.Добавить(ТекКод);
			ЕстьОперанд=Ложь;
			ТекКод="";
			
		ИначеЕсли ЕстьОперанд Тогда
			
			ТекКод=ТекКод+ТекСимвол;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат СписокКодов;
		
КонецФункции // ПолучитьСписокКодовОперандов()

Процедура ОтметитьИспользованиеОперандовСводно(НазначениеРасчетов) Экспорт
	
	Запрос=Новый Запрос;
	запрос.Текст="ВЫБРАТЬ
	|	ПроцедурыРасчетов.Процедура КАК Процедура
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И НЕ ПроцедурыРасчетов.ПроизвольныйКод";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	СписокКодов=Новый СписокЗначений;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ТекСписокКодов=ПолучитьСписокКодовОперандов(Результат.Процедура);
		
		Для Каждого Элемент ИЗ ТекСписокКодов Цикл
			
			СписокКодов.Добавить(ВРЕГ(Элемент.Значение));
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос=Новый Запрос();
		
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Операнд,
	|	ИсточникиДанныхДляРасчетов.Код КАК Код,
	|	ИсточникиДанныхДляРасчетов.НеИспользуется КАК НеИспользуется,
	|	ИсточникиДанныхДляРасчетов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов";
					 
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
		
	Результат=Запрос.Выполнить();
	
	Выборка=Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
				
		Если НЕ СписокКодов.НайтиПоЗначению(ВРЕГ(СокрЛП(Выборка.Код)))=Неопределено Тогда
						
			Если Выборка.НеИспользуется ИЛИ Выборка.ПометкаУдаления Тогда
				
				Операнд=Выборка.Операнд.ПолучитьОбъект();
				Операнд.ОбменДанными.Загрузка=Истина;
				Операнд.НеИспользуется=Ложь;
				Операнд.ПометкаУдаления=Ложь;
				
				Операнд.Записать();
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Выборка.НеИспользуется Тогда
				
				Операнд=Выборка.Операнд.ПолучитьОбъект();
				Операнд.ОбменДанными.Загрузка=Истина;
				Операнд.НеИспользуется=Истина;
				
				Операнд.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОтметитьИспользованиеОперандовСводно()

Процедура ОтметитьИспользованиеОперандов(НазначениеРасчетов,ПотребительРасчета,СписокКодов,СпособИспользования,ТекстПроцедуры="") Экспорт
		
	Если НЕ ПустаяСтрока(ТекстПроцедуры) Тогда
		
		СписокКодов=ПолучитьСписокКодовОперандов(ТекстПроцедуры);
		
	ИначеЕсли СписокКодов=Неопределено Тогда
		
		СписокКодов=Новый СписокЗначений;
		
	КонецЕсли;
			
	Запрос=Новый Запрос();
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ФиксированноеЗначение КАК Справочник.ИсточникиДанныхДляРасчетов) КАК ФиксированноеЗначение
	|ПОМЕСТИТЬ ИсточникиДополнения
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.СпособИспользования = &СпособИспользования
	|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных)
	|	И НЕ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФиксированноеЗначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Показатель,
	|	ИсточникиДанныхДляРасчетов.Код КАК Код,
	|	ИсточникиДанныхДляРасчетов.НеИспользуется КАК НеИспользуется,
	|	ИсточникиДанныхДляРасчетов.ПометкаУдаления КАК ПометкаУдаления
	|ПОМЕСТИТЬ ИсточникиДляРасчетов
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ИсточникиДополнения.ФиксированноеЗначение ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИсточникДополнения,
	|	ИсточникиДляРасчетов.Показатель КАК Показатель,
	|	ИсточникиДляРасчетов.Код КАК Код,
	|	ИсточникиДляРасчетов.НеИспользуется КАК НеИспользуется,
	|	ИсточникиДляРасчетов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	ИсточникиДляРасчетов КАК ИсточникиДляРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИсточникиДополнения КАК ИсточникиДополнения
	|		ПО ИсточникиДляРасчетов.Показатель = ИсточникиДополнения.ФиксированноеЗначение";
				 
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
	Запрос.УстановитьПараметр("СпособИспользования",СпособИспользования);
	
	Результат=Запрос.Выполнить();
	
	Выборка=Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ИсточникДополнения Тогда
			
			НеИспользуется=Ложь;
			
		Иначе
			
			НеИспользуется=Истина;
			
			Для Каждого КодФормулы ИЗ СписокКодов Цикл
				
				Если ВРЕГ(СокрЛП(КодФормулы.Значение))=ВРЕГ(СокрЛП(Выборка.Код)) Тогда
					
					НеИспользуется=Ложь;
					КодФормулы.Пометка=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ НеИспользуется Тогда
			
			Если Выборка.НеИспользуется ИЛИ Выборка.ПометкаУдаления Тогда
				
				Операнд=Выборка.Показатель.ПолучитьОбъект();
				Операнд.ОбменДанными.Загрузка=Истина;
				Операнд.НеИспользуется=Ложь;
				Операнд.ПометкаУдаления=Ложь;
				
				Операнд.Записать();
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ Выборка.НеИспользуется Тогда
				
				Операнд=Выборка.Показатель.ПолучитьОбъект();
				Операнд.ОбменДанными.Загрузка=Истина;
				Операнд.НеИспользуется=Истина;
				
				Операнд.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
						
	КонецЦикла;
		
КонецПроцедуры // ОтметитьИспользованиеОперандов()

Функция ИнвертироватьПоляДтКт(ПолеБД) Экспорт
		
	МассивПолей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеБД,".");
	
	Если СтрНайти(МассивПолей[0],"СубконтоДт")>0 Тогда
		
		МассивПолей[0]=СтрЗаменить(МассивПолей[0],"СубконтоДт","СубконтоКт");
		
	ИначеЕсли СтрНайти(МассивПолей[0],"СубконтоКт")>0 Тогда
		
		МассивПолей[0]=СтрЗаменить(МассивПолей[0],"СубконтоКт","СубконтоДт");
		
	ИначеЕсли Прав(МассивПолей[0],2)="Дт" Тогда
		
		МассивПолей[0]=Лев(МассивПолей[0],СтрДлина(МассивПолей[0])-2)+"Кт";
		
	ИначеЕсли Прав(МассивПолей[0],2)="Кт" Тогда
		
		МассивПолей[0]=Лев(МассивПолей[0],СтрДлина(МассивПолей[0])-2)+"Дт";
		
	КонецЕсли;
	
	ТекстПоля="";
	
	Для Каждого СтрПуть ИЗ МассивПолей Цикл
		
		ТекстПоля=ТекстПоля+"."+СтрПуть;
		
	КонецЦикла;
	
	Возврат Сред(ТекстПоля,2);
		
КонецФункции // ИнвертироватьПоляДтКт()

Процедура ОбновитьАналогичныеИсточникиДляСчетаБУ(ИсточникДанных) Экспорт
	
	ОбъектИсточник=ИсточникДанных.ПолучитьОбъект();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД = &СчетБД
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета.ГруппаРаскрытия = &ГруппаРаскрытия
	|	И ИсточникиДанныхДляРасчетов.СпособПолучения = &СпособПолучения
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета.Предназначение = &Предназначение
	|	И ИсточникиДанныхДляРасчетов.Ссылка <> &Ссылка";
	
	Если ОбъектИсточник.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ ОбъектИсточник.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ ОбъектИсточник.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ИсточникиДанныхДляРасчетов.Счет = &СчетБУ";
		
		Запрос.УстановитьПараметр("СчетБУ",ОбъектИсточник.Счет);
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|	И ИсточникиДанныхДляРасчетов.ПоказательОтбор.СчетБД = &СчетИсточника";
		
		Запрос.УстановитьПараметр("СчетИсточника",ОбъектИсточник.ПоказательОтбор.СчетБД);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",	ОбъектИсточник.НазначениеРасчетов);
	Запрос.УстановитьПараметр("СчетБД",				ОбъектИсточник.ПотребительРасчета.СчетБД);
	Запрос.УстановитьПараметр("ГруппаРаскрытия",	ОбъектИсточник.ПотребительРасчета.ГруппаРаскрытия);
	Запрос.УстановитьПараметр("СпособПолучения",	ОбъектИсточник.СпособПолучения);
	Запрос.УстановитьПараметр("Предназначение",		ОбъектИсточник.ПотребительРасчета.Предназначение);
	Запрос.УстановитьПараметр("Ссылка",				ИсточникДанных);
	
	Результат=Запрос.Выполнить().Выбрать();
	ЕстьИзмененныеОбъекты=Ложь;
	
	Пока Результат.Следующий() Цикл
		
		СвязанныйОбъект=Результат.Ссылка.ПолучитьОбъект();
				
		СвязанныйОбъект.ТаблицаПараметровОтбораБД.Загрузить(ОбъектИсточник.ТаблицаПараметровОтбораБД.Выгрузить());
		СвязанныйОбъект.ПравилаИспользованияПолейЗапроса.Загрузить(ОбъектИсточник.ПравилаИспользованияПолейЗапроса.Выгрузить());
		СвязанныйОбъект.УточненияСпособовОпределения.Загрузить(ОбъектИсточник.УточненияСпособовОпределения.Выгрузить());
		
		СвязанныйОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
		СвязанныйОбъект.мМодифицированность=Истина;
		
		Попытка
			СвязанныйОбъект.СохранитьНастройкиОперанда();
			СвязанныйОбъект.Записать();
			ЕстьИзмененныеОбъекты=Истина;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось изменить настройки источника данных %РезультатСсылка%: 
			|			%ИнформацияОбОшибке%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РезультатСсылка%", Строка(Результат.Ссылка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ИнформацияОбОшибке());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЦикла;	
	
	Если ЕстьИзмененныеОбъекты Тогда
		ОчиститьЗаписиРегистраПараметрическихНастроек(ОбъектИсточник.НазначениеРасчетов);
	КонецЕсли;	
			
КонецПроцедуры // ОбновитьАналогичныеИсточникиДляСчетаБУ()

Функция ОбновитьНастройкиДляСтороныПроводки(ИсточникДанных) Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	|		Ссылка,
	|		НомерСтроки,
	|		Поле,
	|		Синоним,
	|		АналитикаОперанда,
	|		КодАналитики,
	|		НастройкаСоответствия,
	|		РеквизитАналитики,
	|		ТаблицаАналитики,
	|		ТаблицаАналитикиВИБ,
	|		НеИспользоватьДляСинхронизации,
	|		СпособЗаполнения,
	|		ФиксированноеЗначение
	|	),
	|	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПолеБД,
	|		НаименованиеБД,
	|		СпособВычисленияПараметра,
	|		ЗначениеДляПроверки,
	|		ТипРасчета,
	|		Реквизит,
	|		СмещениеПериода,
	|		НастройкаСоответствия,
	|		ТаблицаАналитикиВИБ,
	|		ТекстМодуля,
	|		ИдентификаторСтроки,
	|		ИдентификаторРодителя,
	|		ИмяПараметра
	|	),
	|	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	|		Ссылка,
	|		НомерСтроки,
	|		ПолеБД,
	|		ИмяПараметра,
	|		Значение,
	|		Представление,
	|		Пометка,
	|		Тип
	|	),
	|	КонтрИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК КонтрИсточникиДанныхДляРасчетов
	|		ПО ИсточникиДанныхДляРасчетов.НазначениеРасчетов = КонтрИсточникиДанныхДляРасчетов.НазначениеРасчетов
	|			И ИсточникиДанныхДляРасчетов.ПотребительРасчета = КонтрИсточникиДанныхДляРасчетов.ПотребительРасчета
	|			И (ИсточникиДанныхДляРасчетов.ТрансляцияДебет
	|					И КонтрИсточникиДанныхДляРасчетов.ТрансляцияКредит
	|				ИЛИ ИсточникиДанныхДляРасчетов.ТрансляцияКредит
	|					И КонтрИсточникиДанныхДляРасчетов.ТрансляцияДебет)
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.Ссылка = &Ссылка";	
	
	Запрос.УстановитьПараметр("Ссылка",ИсточникДанных);
	
	Результат=Запрос.Выполнить().Выгрузить();
	
	Если Результат.Количество()>0 Тогда
		
		СвязанныйОбъект=Результат[0].Ссылка.ПолучитьОбъект();
		
		ДанныеОбъекта=Новый Структура;
		ДанныеОбъекта.Вставить("Ссылка",					СвязанныйОбъект.Ссылка);	
		ДанныеОбъекта.Вставить("КодСтар",					СокрЛП(СвязанныйОбъект.Код));	
		ДанныеОбъекта.Вставить("КодУпрощеннойФормулыСтар",	СокрЛП(СвязанныйОбъект.КодУпрощеннойФормулы));
		ДанныеОбъекта.Вставить("ПотребительРасчета",		СвязанныйОбъект.ПотребительРасчета);
		ДанныеОбъекта.Вставить("НазначениеРасчетов",		СвязанныйОбъект.НазначениеРасчетов);
		ДанныеОбъекта.Вставить("Счет",						СвязанныйОбъект.Счет);
		ДанныеОбъекта.Вставить("КоррСчет",					СвязанныйОбъект.КоррСчет);
		ДанныеОбъекта.Вставить("ТрансляцияДебет",			СвязанныйОбъект.ТрансляцияДебет);
		ДанныеОбъекта.Вставить("ТрансляцияКредит",			СвязанныйОбъект.ТрансляцияКредит);
		
		СвязанныйОбъект.ТаблицаПараметровОтбораБД.Очистить();
		
		Для Каждого Строка ИЗ Результат[0].ТаблицаПараметровОтбораБД Цикл
			
			НоваяСтрока=СвязанныйОбъект.ТаблицаПараметровОтбораБД.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			НоваяСтрока.ПолеБД=ИнвертироватьПоляДтКт(Строка.ПолеБД);	
			НоваяСтрока.НаименованиеБД	= СтрЗаменить(Строка.НаименованиеБД,?(СвязанныйОбъект.ТрансляцияДебет,"Кт","Дт"),?(СвязанныйОбъект.ТрансляцияДебет,"Дт","Кт"));
			
		КонецЦикла;
		
		СвязанныйОбъект.ПравилаИспользованияПолейЗапроса.Очистить();
		
		Для Каждого Строка ИЗ Результат[0].ПравилаИспользованияПолейЗапроса Цикл
			
			НоваяСтрока=СвязанныйОбъект.ПравилаИспользованияПолейЗапроса.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			НоваяСтрока.Поле=ИнвертироватьПоляДтКт(Строка.Поле);	
			НоваяСтрока.Синоним			= СтрЗаменить(Строка.Синоним,?(СвязанныйОбъект.ТрансляцияДебет,"Кт","Дт"),?(СвязанныйОбъект.ТрансляцияДебет,"Дт","Кт"));
			
		КонецЦикла;
		
		СвязанныйОбъект.УточненияСпособовОпределения.Очистить();
		
		Для Каждого Строка ИЗ Результат[0].УточненияСпособовОпределения Цикл
			
			НоваяСтрока=СвязанныйОбъект.УточненияСпособовОпределения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);	
			НоваяСтрока.ПолеБД=ИнвертироватьПоляДтКт(Строка.ПолеБД);
		
		КонецЦикла;
		
		СвязанныйОбъект.мМодифицированность=Истина;
		СвязанныйОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
		
		Попытка
			
			СвязанныйОбъект.СохранитьНастройкиОперанда();
			СвязанныйОбъект.Записать();
			ОчиститьЗаписиРегистраПараметрическихНастроек(СвязанныйОбъект.НазначениеРасчетов);
			
			ДанныеОбъекта.Вставить("Код",						СокрЛП(СвязанныйОбъект.Код));
			ДанныеОбъекта.Вставить("КодУпрощеннойФормулы",		СокрЛП(СвязанныйОбъект.КодУпрощеннойФормулы));
			ДанныеОбъекта.Вставить("ДополнительноеПредставление",СвязанныйОбъект.ДополнительноеПредставление);
			
			Возврат ДанныеОбъекта;
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось изменить настройки правила трансляции данных %ПотребительРасчета%: 
			|			%ИнформацияОбОшибке%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПотребительРасчета%", Строка(СвязанныйОбъект.ПотребительРасчета));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ИнформацияОбОшибке());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
			
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции // ОбновитьНастройкиДляСтороныПроводки() 

Функция ПолучитьКодыПоказателей(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)");
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	СписокИмен = Новый СписокЗначений;
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает признак активности, который должен быть установлен у всех движений объекта
// по регистру сведений ЗначенияПоказателейОтчетов.
//
Функция ПолучитьПризнакАктивностиДвижений(Объект) Экспорт
	
	Возврат (
				(Объект.Состояние = Перечисления.СостоянияОтчетов.Подготовлен 
					ИЛИ Объект.Состояние = Перечисления.СостоянияОтчетов.Утвержден 
					ИЛИ Объект.Состояние = Перечисления.СостоянияОтчетов.Возвращен
				) 
				И Объект.ПометкаУдаления = Ложь
			);
	
КонецФункции

Функция ПолучитьВыборкуВерсий(ЭкземплярОтчета, АктивностьДвижений = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка,
	|	ВерсииЗначенийПоказателей.Активность КАК Активность
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Регистратор = &Ссылка
	|	И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия";
	Если АктивностьДвижений <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
		|И ВерсииЗначенийПоказателей.Активность = &АктивностьДвижений";
		Запрос.УстановитьПараметр("АктивностьДвижений", АктивностьДвижений);
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ЭкземплярОтчета);
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

Процедура ИзменитьАктивностьСуществующимЗаписям(ЭкземплярОтчета, АктивностьДвижений) Экспорт
	
	Выборка = ПолучитьВыборкуВерсий(ЭкземплярОтчета, НЕ АктивностьДвижений);
	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекОбъект.Активность = АктивностьДвижений;
		ТекОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Сканирует области исходного табличного документа и удаляет те горизонтальные области,
// которые связаны с раскрытиями.
//
Процедура ПолучитьМакетОсновнойЧасти(Макет, ВидОтчета) Экспорт
	
	ИменаГруппРаскрытия = ПолучитьСписокИменГруппРаскрытия(ВидОтчета);
	Для Каждого ИмяГруппыРаскрытия Из ИменаГруппРаскрытия Цикл
		ОбластьШапка = Макет.Области.Найти(ИмяГруппыРаскрытия.Значение + "_Шапка");
		Если ОбластьШапка <> Неопределено Тогда
			Макет.УдалитьОбласть(ОбластьШапка, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		ОбластьСтрока = Макет.Области.Найти(ИмяГруппыРаскрытия.Значение);
		Если ОбластьСтрока <> Неопределено Тогда
			Макет.УдалитьОбласть(ОбластьСтрока, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
		ОбластьПодвал = Макет.Области.Найти(ИмяГруппыРаскрытия.Значение + "_Подвал");
		Если ОбластьПодвал <> Неопределено Тогда
			Макет.УдалитьОбласть(ОбластьПодвал, ТипСмещенияТабличногоДокумента.ПоВертикали);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ ПРОЦЕДУР ЗАПОЛНЕНИЯ И ВЫЧИСЛЕНИЯ
// ПОКАЗАТЕЛЕЙ ОТЧЕТОВ

// Функция возвращает дату со смещением (периодичность и кол-во периодов) от переданной.
//
Функция ПолучитьДатуСоСмещением(Дата, Периодичность, ЧислоПериодов) Экспорт
	
	Если (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Год
		ИЛИ Периодичность=Перечисления.Периодичность.Год) Тогда
		
		Возврат ДобавитьМесяц(Дата, 12 * ЧислоПериодов);
		
	ИначеЕсли (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Полугодие
		ИЛИ Периодичность = Перечисления.Периодичность.Полугодие) Тогда
		
		Возврат ДобавитьМесяц(Дата, 6 * ЧислоПериодов);
		
	ИначеЕсли (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал
		ИЛИ Периодичность = Перечисления.Периодичность.Квартал) Тогда
		
		Возврат ДобавитьМесяц(Дата, 3 * ЧислоПериодов);
		
	ИначеЕсли (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц
		ИЛИ Периодичность = Перечисления.Периодичность.Месяц) Тогда
		
		Возврат ДобавитьМесяц(Дата, ЧислоПериодов);
		
	ИначеЕсли (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Декада
		ИЛИ Периодичность = Перечисления.Периодичность.Декада) Тогда
		
		Возврат ПолучитьДатуСоСмещениемДляДекады(Дата, ЧислоПериодов);
		
	ИначеЕсли (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.Неделя
		ИЛИ Периодичность = Перечисления.Периодичность.Неделя) Тогда
		
		Возврат Дата + 3600 * 24 * 7 * ЧислоПериодов;
		
	ИначеЕсли (Периодичность = ТипЕдиницыИнтервалаВремениАнализаДанных.День
		ИЛИ Периодичность = Перечисления.Периодичность.День) Тогда
		
		Возврат Дата  + 3600 * 24 * ЧислоПериодов;
		
	Иначе 
		Возврат Дата;
	КонецЕсли;
КонецФункции

Функция ПолучитьСледующийПериод(ИсходныйПериод,Направление) Экспорт
	
	ДатаНачалаПериода = ПолучитьДатуИзПараметра(ИсходныйПериод, "ПериодыНачало", Направление);
	
	Если НЕ ЗначениеЗаполнено(ДатаНачалаПериода) Тогда
		
		Возврат Справочники.Периоды.ПустаяСсылка();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность";
	
	Запрос.УстановитьПараметр("ДатаНачала"   , ДатаНачалаПериода);
	Запрос.УстановитьПараметр("Периодичность", ИсходныйПериод.Периодичность);
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Возврат Результат.Выгрузить()[0].Ссылка;
	Иначе
		
		ОбъектПериод=Справочники.Периоды.СоздатьЭлемент();
		ОбъектПериод.ДатаНачала=ДатаНачалаПериода;
		ОбъектПериод.Периодичность=ИсходныйПериод.Периодичность;
		ОбъектПериод.Заполнить(Неопределено);
		
		Попытка
			
			ОбъектПериод.Записать();
			Возврат ОбъектПериод.Ссылка;
			
		Исключение
						
			Возврат Справочники.Периоды.ПустаяСсылка();
			
		КонецПопытки;

	КонецЕсли;
	
КонецФункции // ПолучитьСледующийПериод()

Функция ПолучитьСмещениеПоИнтервалуПериодов(ПериодНачало,ПериодОкончание) Экспорт
	
	
	Если НЕ ЗначениеЗаполнено(ПериодНачало) ИЛИ НЕ ЗначениеЗаполнено(ПериодОкончание)  Тогда	
		Возврат 0;	
	КонецЕсли;
	
	Если ПериодНачало.Периодичность <> ПериодОкончание.Периодичность Тогда
		 Возврат 0;
	КонецЕсли;	
	
	
	Запрос=Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Периоды.Ссылка
	               |ИЗ
	               |	Справочник.Периоды КАК Периоды
	               |ГДЕ
	               |	Периоды.ДатаНачала >= &ДатаНачала
	               |	И Периоды.ДатаНачала <= &ДатаОкончания
	               |	И Периоды.Периодичность = &Периодичность
	               |	И Периоды.ПометкаУдаления = ЛОЖЬ
	               |	И Периоды.Произвольный = Ложь";
	
	Запрос.УстановитьПараметр("ДатаНачала"   , 		ПериодНачало.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания"   , 	ПериодОкончание.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность", 		ПериодНачало.Периодичность);
	
	Результат = Запрос.Выполнить().Выгрузить().Количество();
	
	Возврат Результат;
		
КонецФункции // ПолучитьСледующийПериод()


// Возвращает текст фрагмента запроса с выборками по стандартным периодам
//
// Параметры
//	Периодичность(строка)	– периодичность выборки данных запроса
//  Период(строка)			- имя измерения, в котором хранится период данных
//
// Возвращаемое значение:
//   ТекстЗапросаПоПериодам   – текст фрагмента запроса
//
Функция СформироватьТекстЗапросаПоПериодам(Периодичность,Период) Экспорт
	
	СписокПериодов=Новый СписокЗначений;
	СписокПериодов.Добавить("День");
	СписокПериодов.Добавить("Неделя");
	СписокПериодов.Добавить("Месяц");
	СписокПериодов.Добавить("Квартал");
	СписокПериодов.Добавить("Год");
	
	ТекстЗапросаПоПериодам="";
	
	НачальныйИндекс=СписокПериодов.Индекс(СписокПериодов.НайтиПоЗначению(Периодичность));
	
	Для Сч=НачальныйИндекс По СписокПериодов.Количество()-1 Цикл
		
		ТекущаяПериодичность=СписокПериодов.Получить(Сч).Значение;
		ТекстЗапросаПоПериодам=ТекстЗапросаПоПериодам+"
		|НачалоПериода("+Период+", "+ТекущаяПериодичность+") КАК Период"+ТекущаяПериодичность+",";
		
	КонецЦикла;
	
	Возврат ТекстЗапросаПоПериодам;
	
КонецФункции // СформироватьТекстЗапросаПоПериодам()


Функция ПолучитьАбсолютнуюАдресациюСтрок(ВидОтчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК СтрокаСсылка,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ СтрокиОтчетов.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПорядковыйНомер ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	КэшСсылок=Запрос.Выполнить().Выгрузить();
	
	Индекс=1;
	
	Для Каждого СтрСсылка ИЗ КэшСсылок Цикл
		СтрСсылка.ПорядковыйНомер=Индекс;
		Индекс=Индекс+1;
	КонецЦикла;
	
	Возврат КэшСсылок; 
	
КонецФункции // ПолучитьАбсолютнуюАдресациюСтрок()

Функция СформироватьТаблицуСНепрерывнымИнтервалом(Знач ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса)
	
	РабочаяТаблица  = Новый ТаблицаЗначений;
	
	РабочаяТаблица.Колонки.Добавить("ПорядковыйНомер", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5, 0));
	РабочаяТаблица.Колонки.Добавить("Дата", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	РабочаяТаблица.Колонки.Добавить("Значение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	
	ПоследнееЗаполненное        = Неопределено;
	КоличествоЗаполненныхДанных = 0;
	ПорядковыйНомер             = 1;
	
	Для Инд = 1 По ГлубинаАнализа Цикл
		ТекДата    = ПолучитьДатуСоСмещением(Базис.ДатаНачала, Базис.Период, (Инд - ГлубинаАнализа) * Базис.КоличествоПериодов);
		ФактСтрока = ТаблицаЗначений.Найти(ТекДата, КолонкаХ);
		
		Если ФактСтрока = Неопределено Тогда
			
			Если ПоследнееЗаполненное <> Неопределено Тогда
				НоваяСтрока = РабочаяТаблица.Добавить();       	
				НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
				НоваяСтрока.Дата            = ТекДата;
				НоваяСтрока.Значение        = 0;
				ПорядковыйНомер             = ПорядковыйНомер + 1;
			КонецЕсли;
			
		Иначе
			НоваяСтрока = РабочаяТаблица.Добавить();
			НоваяСтрока.ПорядковыйНомер = ПорядковыйНомер;
			НоваяСтрока.Дата            = ТекДата;
			НоваяСтрока.Значение        = ФактСтрока[КолонкаУ];
			КоличествоЗаполненныхДанных = КоличествоЗаполненныхДанных + 1;
			Если ПоследнееЗаполненное <> Неопределено И ПоследнееЗаполненное < ПорядковыйНомер - 1 Тогда
				НачЗначение = РабочаяТаблица.Найти(ПоследнееЗаполненное, "ПорядковыйНомер").Значение;
				КонЗначение = НоваяСтрока.Значение;
				Коэффициент = (КонЗначение - НачЗначение) / (ПорядковыйНомер - ПоследнееЗаполненное + 1);
				
				Для Инд2 = ПоследнееЗаполненное + 1 По ПорядковыйНомер - 1 Цикл
					ПустойПериод          = РабочаяТаблица.Найти(Инд2, "ПорядковыйНомер");
					ПустойПериод.Значение = НачЗначение + Коэффициент * Инд2;
				КонецЦикла;
				
			КонецЕсли;
			
			ПоследнееЗаполненное = ПорядковыйНомер;			
			ПорядковыйНомер             = ПорядковыйНомер + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоЗаполненныхДанных < 2 Тогда 
		//#Если Клиент Тогда
			ТекстСообщения = НСтр("ru = 'Недостаточно данных для экстраполяции'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		//#КонецЕсли
		Возврат Неопределено;
	Иначе
		ПозицияБазиса = ПорядковыйНомер - 1;
		Возврат РабочаяТаблица;
	КонецЕсли;
	
КонецФункции

// Функция рассчитывает тренд на основании переданной таблицы значений.
//
// Параметры:
//   КолонкаХ       - строка, наименование колонки для данных по оси Х.
//   КолонкаУ       - строка, наименование колонки для данных по оси У.
//   Базис          - Структура:
//                    ДатаНачала, дата - базовая дата отчета.
//					  Период    , ТипЕдиницыИнтервалаВремениАнализаДанных - Используемый период для расчета.
//                    КоличествоПериодов, Число - количество периодов между соседними значениями дат по оси Х.
//   ГлубинаАнализа - смещение по оси Х, в пределах которого рассчитывается тренд.
//   Смещение       - смещение по оси Х, в пределах которого рассчитываются экстраполируемые значения.
//   ДополнятьТаблицу - булево, Истина - в таблицу значений добавляются экстраполированные значения.
// Возвращаемое значение:
//
//   Структура     - Значение      - Число,  экстраполированное значение для смещения по оси Х, или неопределено, при ошибке в расчете.
//                   Адекватность  - Число,  значение коэффициента отклонения.
//                   СпособРасчета - Строка, содержит наименование метода расчета.
//
Функция РасчетТренда(ТаблицаЗначений, КолонкаХ, КолонкаУ, КолонкаПризнак = Неопределено, Базис, ГлубинаАнализа, Смещение, ДополнятьТаблицу = Ложь) Экспорт
	СтруктураНеобходимостиРасчетов = Новый Структура("Линейная, Логарифмическая, Квадратичная, Экспоненциальная"
	, Истина
	, Истина
	, Истина
	, Истина);
	ПозицияБазиса = 0;
	
	СумФакт=0;
	СумЛогФакт=0;
	СумФактАргумент=0;
	СумФактЛогАргумент=0;
	СумЛогФактАргумент=0;
	СумФактАргумент2=0;
	СумАргумент=0;
	СумЛогАргумент=0;
	СумАргумент2=0;
	СумЛогАргумент2=0;
	СумАргумент3=0;
	СумАргумент4=0;
	ЗнакОткл=1;
	
	Если ТаблицаЗначений.Найти(Базис.ДатаНачала, КолонкаХ) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РабочаяТаблица = СформироватьТаблицуСНепрерывнымИнтервалом(ТаблицаЗначений, Базис, ГлубинаАнализа, КолонкаХ, КолонкаУ, ПозицияБазиса); 
	
	Если РабочаяТаблица = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РабочаяТаблица.Сортировать("ПорядковыйНомер");
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		НомерСтроки = Строка.ПорядковыйНомер;
		
		НомерПериода=0;
		
		Факт=Строка.Значение;
		
		
		СумФакт=СумФакт+Факт;
		СумЛогФакт=СумЛогФакт+?(Факт>0,Log(Факт),0);
		СумФактАргумент=СумФактАргумент+Факт*НомерСтроки;
		СумФактЛогАргумент=СумФактЛогАргумент+Факт*Log(НомерСтроки);
		СумЛогФактАргумент=СумЛогФактАргумент+?(Факт>0,Log(Факт),0)*НомерСтроки;
		СумФактАргумент2=СумФактАргумент2+Факт*Pow(НомерСтроки,2);
		СумАргумент=СумАргумент+НомерСтроки;
		СумЛогАргумент=СумЛогАргумент+Log(НомерСтроки);
		СумАргумент2=СумАргумент2+Pow(НомерСтроки,2);
		СумЛогАргумент2=СумЛогАргумент2+Pow(Log(НомерСтроки),2);
		СумАргумент3=СумАргумент3+Pow(НомерСтроки,3);
		СумАргумент4=СумАргумент4+Pow(НомерСтроки,4);
		
	КонецЦикла; 
	КолФакт  = РабочаяТаблица.Количество();
	СредФакт = ?(КолФакт>0,СумФакт/КолФакт,0);
	
	// Формулы Крамера для линейной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		ОпределительЛинПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЛин1      = СумФакт*СумАргумент2-СумАргумент*СумФактАргумент;
		ОпределительЛин2      = КолФакт*СумФактАргумент-СумФакт*СумАргумент;
		
		Если ОпределительЛинПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Линейная = Ложь;
		Иначе
			КоэффициентЛинейной1=ОпределительЛин1/ОпределительЛинПолный;
			КоэффициентЛинейной2=ОпределительЛин2/ОпределительЛинПолный;
		КонецЕсли; 
	КонецЕсли;
	
	// Формулы Крамера для экспоненциальной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		ОпределительЭкспПолный = КолФакт*СумАргумент2-Pow(СумАргумент,2);
		ОпределительЭксп1      = СумЛогФакт*СумАргумент2-СумАргумент*СумЛогФактАргумент;
		ОпределительЭксп2      = КолФакт*СумЛогФактАргумент-СумЛогФакт*СумАргумент;
		
		Если ОпределительЭкспПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Экспоненциальная = Ложь;
		Иначе
			КоэффициентЭкспоненциальной1=Exp(ОпределительЭксп1/ОпределительЭкспПолный);
			КоэффициентЭкспоненциальной2=ОпределительЭксп2/ОпределительЭкспПолный;
		КонецЕсли;
	КонецЕсли;
	
	// Формулы Крамера для логарифмической аппроксимации
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		ОпределительЛогПолный = КолФакт*СумЛогАргумент2-Pow(СумЛогАргумент,2);
		ОпределительЛог1      = СумФакт*СумЛогАргумент2-СумЛогАргумент*СумФактЛогАргумент;
		ОпределительЛог2      = КолФакт*СумФактЛогАргумент-СумФакт*СумЛогАргумент;
		
		Если ОпределительЛогПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Логарифмическая = Ложь;
		Иначе
			КоэффициентЛогарифмической1=ОпределительЛог1/ОпределительЛогПолный;
			КоэффициентЛогарифмической2=ОпределительЛог2/ОпределительЛогПолный;
		КонецЕсли;
		
	КонецЕсли;
	// Формулы Крамера для квадратичной аппроксимации
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		ОпределительКвПолный =КолФакт*СумАргумент2*СумАргумент4+2*СумАргумент*СумАргумент2*СумАргумент3-
		Pow(СумАргумент2,3)-КолФакт*Pow(СумАргумент3,2)-Pow(СумАргумент,2)*СумАргумент4;
		ОпределительКв1      =СумФакт*СумАргумент2*СумАргумент4+СумАргумент*СумАргумент3*СумФактАргумент2+СумФактАргумент*СумАргумент2*СумАргумент3-
		Pow(СумАргумент2,2)*СумФактАргумент2-СумФактАргумент*СумАргумент*СумАргумент4-Pow(СумАргумент3,2)*СумФакт;
		ОпределительКв2      =КолФакт*СумФактАргумент*СумАргумент4+СумФакт*СумАргумент3*СумАргумент2+СумАргумент*СумФактАргумент2*СумАргумент2-
		Pow(СумАргумент2,2)*СумФактАргумент-СумФакт*СумАргумент*СумАргумент4-КолФакт*СумФактАргумент2*СумАргумент3;
		ОпределительКв3      =КолФакт*СумАргумент2*СумФактАргумент2+СумАргумент*СумФактАргумент*СумАргумент2+СумАргумент*СумАргумент3*СумФакт-
		Pow(СумАргумент2,2)*СумФакт-Pow(СумАргумент,2)*СумФактАргумент2-КолФакт*СумАргумент3*СумФактАргумент;
		
		Если ОпределительКвПолный=0 тогда
			СтруктураНеобходимостиРасчетов.Квадратичная = Ложь;
		Иначе
			КоэффициентКвадратичной1=ОпределительКв1/ОпределительКвПолный;
			КоэффициентКвадратичной2=ОпределительКв2/ОпределительКвПолный;
			КоэффициентКвадратичной3=ОпределительКв3/ОпределительКвПолный;
		КонецЕсли;
		
	КонецЕсли;
	//*******************************************************************************************
	
	СумОстЛинейной=0;
	СумОстКвадратичной=0;
	СумОстЭкспоненциальной=0;
	СумОстЛогарифмической=0;
	СумПолн=0;
	
	
	Для Каждого Строка Из РабочаяТаблица Цикл
		
		Факт 		= Строка.Значение;
		НомерСтроки = Строка.ПорядковыйНомер;
		
		Если СтруктураНеобходимостиРасчетов.Линейная Тогда
			РасчетПоЛинейной=КоэффициентЛинейной1+КоэффициентЛинейной2*НомерСтроки;
			СумОстЛинейной=СумОстЛинейной+Pow((Факт-РасчетПоЛинейной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
			РасчетПоКвадратичной=КоэффициентКвадратичной1+КоэффициентКвадратичной2*НомерСтроки+КоэффициентКвадратичной3*Pow(НомерСтроки,2);
			СумОстКвадратичной=СумОстКвадратичной+Pow((Факт-РасчетПоКвадратичной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
			РасчетПоЭкспоненциальной=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*НомерСтроки);
			СумОстЭкспоненциальной=СумОстЭкспоненциальной+Pow((Факт-РасчетПоЭкспоненциальной),2);
		КонецЕсли;
		
		Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
			РасчетПоЛогарифмической=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(НомерСтроки);
			СумОстЛогарифмической=СумОстЛогарифмической+Pow((Факт-РасчетПоЛогарифмической),2);
		КонецЕсли;
		
		СумПолн=СумПолн+Pow((СредФакт-Факт),2);
		
	КонецЦикла;
	
	МаксКоэффициент   = Неопределено;
	ВыбранноеЗначение = Неопределено;
	
	Если СтруктураНеобходимостиРасчетов.Линейная Тогда
		КоэффДетЛинейной=?(СумПолн<>0,1-СумОстЛинейной/СумПолн,1);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент   = КоэффДетЛинейной;
		ИначеЕсли МаксКоэффициент < КоэффДетЛинейной Тогда
			ВыбранноеЗначение = "Линейная";
			МаксКоэффициент   = КоэффДетЛинейной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Квадратичная Тогда
		
		КоэффДетКвадратичной=?(СумПолн<>0,1-СумОстКвадратичной/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент   = КоэффДетКвадратичной;
		ИначеЕсли МаксКоэффициент < КоэффДетКвадратичной Тогда
			ВыбранноеЗначение = "Квадратичная";
			МаксКоэффициент   = КоэффДетКвадратичной;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Логарифмическая Тогда
		
		КоэффДетЛогарифмической=?(СумПолн<>0,1-СумОстЛогарифмической/СумПолн,0);
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Логарифимическая";
			МаксКоэффициент   = КоэффДетЛогарифмической;
		ИначеЕсли МаксКоэффициент < КоэффДетЛогарифмической Тогда
			ВыбранноеЗначение = "Логарифимическая";
			МаксКоэффициент   = КоэффДетЛогарифмической;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНеобходимостиРасчетов.Экспоненциальная Тогда
		
		КоэффДетЭкспоненциальной=?(СумПолн<>0,1-СумОстЭкспоненциальной/СумПолн,0);
		
		Если МаксКоэффициент = Неопределено Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент   = КоэффДетЭкспоненциальной;
		ИначеЕсли МаксКоэффициент < КоэффДетЭкспоненциальной Тогда
			ВыбранноеЗначение = "Экспоненциальная";
			МаксКоэффициент   = КоэффДетЭкспоненциальной;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Инд = ?(ДополнятьТаблицу, 1, Смещение) По Смещение Цикл
		
		Аргумент = ПозицияБазиса + Инд;
		
		Если ВыбранноеЗначение = "Линейная" тогда
			
			//****************** Линейная аппроксимация *******************************
			
			СуммаРасч    = КоэффициентЛинейной1+КоэффициентЛинейной2*Аргумент;
			Адекватность = КоэффДетЛинейной;
		ИначеЕсли ВыбранноеЗначение = "Квадратичная" тогда
			
			//****************** Квадратичная аппроксимация ***************************
			
			СуммаРасч=КоэффициентКвадратичной1+КоэффициентКвадратичной2*Аргумент+КоэффициентКвадратичной3*Pow(Аргумент,2); 
			Адекватность = КоэффДетКвадратичной;
			
		ИначеЕсли ВыбранноеЗначение = "Экспоненциальная" тогда
			
			//****************** Экспоненциальная аппроксимация *************************	 	
			
			СуммаРасч=КоэффициентЭкспоненциальной1*Exp(КоэффициентЭкспоненциальной2*Аргумент); 
			Адекватность = КоэффДетЭкспоненциальной;
			
		ИначеЕсли ВыбранноеЗначение = "Логарифмическая" тогда
			
			//****************** Логарифмическая аппроксимация *************************	 	
			
			СуммаРасч=КоэффициентЛогарифмической1+КоэффициентЛогарифмической2*Log(Аргумент);
			Адекватность = КоэффДетЛогарифмической;
			
		КонецЕсли;
		
		Если ДополнятьТаблицу Тогда
			ТекДата = ПолучитьДатуСоСмещением(Базис.ДатаНачала, Базис.Период, Инд * Базис.КоличествоПериодов);
			НоваяСтрока = ТаблицаЗначений.Добавить();
			НоваяСтрока[КолонкаХ] = ТекДата;
			НоваяСтрока[КолонкаУ] = СуммаРасч;
			
			Если КолонкаПризнак <> Неопределено Тогда
				НоваяСтрока[КолонкаПризнак] = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый Структура("Значение, Адекватность, СпособРасчета", СуммаРасч, Адекватность, ВыбранноеЗначение);
	
КонецФункции


// Возвращает список кодов показателей, использованных в произвольном тексте модуля
//
Функция РазобратьПроизвольныйКод(ТекстПроцедуры,КодПоказателя,ЕстьАбсолютныеЗначения=Ложь) Экспорт
	
	СписокКодов=Новый СписокЗначений;
	МассивСлужебныхСимволов=ПолучитьМассивСлужебныхСимволов();
	
	ЕстьПоказатель=Ложь;
	
	ЕстьЧисло=Ложь;
	ЕстьЗнак=Ложь;
	
	ТекСтрока="";
	ТекКодПоказателя="";
	ДлинаТекста=СтрДлина(ТекстПроцедуры);
	
	Для КодСимв=1 По ДлинаТекста Цикл
		
		ТекСимв=Сред(ТекстПроцедуры,КодСимв,1);
		
		Если ЕстьПоказатель Тогда  // Идет формирование строки кода показателя
			
			Если МассивСлужебныхСимволов.Найти(ТекСимв)=Неопределено Тогда
				
				ТекКодПоказателя=ТекКодПоказателя+ТекСимв;
				
			Иначе // найдено завершение кода показателя
				
				Если НЕ ТекКодПоказателя=КодПоказателя И СписокКодов.НайтиПоЗначению(ТекКодПоказателя)=Неопределено Тогда
					
					СписокКодов.Добавить(ТекКодПоказателя);
					
				КонецЕсли;
				
				ЕстьПоказатель=Ложь;
				ТекКодПоказателя="";
				
			КонецЕсли;
			
		Иначе // Идет поиск строки "ПОКАЗАТЕЛИ."
			
			Если СтрНайти("123456789",ТекСимв)>0 Тогда // найдены числовые символы, не относящиеся к коду показателя.
				ЕстьЧисло=Истина;
			ИначеЕсли 
				СтрНайти("+-=<>",ТекСимв)>0 Тогда // найдены арифметические символы.
				ЕстьЗнак=Истина;
			КонецЕсли;
			
			Если ЕстьЧисло И ЕстьЗнак Тогда
				ЕстьАбсолютныеЗначения=Истина;
				ЕстьЧисло=Ложь;
				ЕстьЗнак=Ложь;
			КонецЕсли;
			
			ТекСтрока=ТекСтрока+ТекСимв;
			
			Если СтрНайти(ВРЕГ(ТекСтрока),"ПОКАЗАТЕЛИ.")>0 Тогда // Со следующего символа начинается код показателя
				
				ЕстьПоказатель=Истина;
				ТекСтрока="";
				
				ЕстьЧисло=Ложь;
				ЕстьЗнак=Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	Возврат СписокКодов;
	
КонецФункции // РазобратьПроизвольныйКод()

Функция ПроверитьФормулуПоказателя(СтруктураДанных,ПроверятьОперанды=Истина) Экспорт
	
	ПроверкаПройдена=Истина;
	
	ПравилоОбработки 	= СтруктураДанных.НазначениеРасчетов;
	Показатель			= СтруктураДанных.ПотребительРасчета;
	ТекстПроцедуры		= СтруктураДанных.ТекстПроцедуры;
	ПроизвольныйКод		= СтруктураДанных.ПроизвольныйКод;
		
	СтрокаРасчет=Новый Структура;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтрокаРасчет.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПотребительРасчета.Код,
	|	ЕСТЬNULL(ОперандыТекущегоОтчета.ПоказательТекущегоОтчета, ЛОЖЬ) КАК ПоказателиТекущегоОтчета
	|ИЗ
	|	Справочник."+?(ТипЗнч(Показатель)=Тип("СправочникСсылка.ПоказателиОбъектовБД"),"ПоказателиОбъектовБД","ПоказателиОтчетов")+" КАК ПотребительРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	|			ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|			ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета
	|		ИЗ
	|			Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ГДЕ
	|			ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|			И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
	|			И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &Ссылка
	|			И ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета) КАК ОперандыТекущегоОтчета
	|		ПО ПотребительРасчета.Ссылка = ОперандыТекущегоОтчета.Показатель
	|ГДЕ
	|	ПотребительРасчета.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Показатель);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	ЗапросПоказатели.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК КодПоказателя,
	|	ИсточникиДанныхДляРасчетов.Код КАК КодОперанда,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета,
	|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|Поместить ИсточникиПравила
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется";
	
	ЗапросПоказатели.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	ЗапросПоказатели.Выполнить();
	
	СтрПоказательТаб=Запрос.Выполнить().Выбрать();
	
	Если СтрПоказательТаб.Следующий() Тогда
		
		Если ПроизвольныйКод Тогда
			
			СписокИспользуемых=РазобратьПроизвольныйКод(ТекстПроцедуры,СокрЛП(СтрПоказательТаб.Код));
			
			// Синтаксический контроль формулы
			ОписаниеОшибки = "";
			
			Если РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет() Тогда
				ОбработкаРасчета = РасширениеБизнесЛогикиУХ.ПолучитьОбработкуЗаполненияДанных();
				ПроверкаПройдена = ОбработкаРасчета.ПроверитьМодуль(ТекстПроцедуры, ОписаниеОшибки, Истина, Показатель);
			Иначе
				ДокНО = Документы.НастраиваемыйОтчет.СоздатьДокумент();
				ПроверкаПройдена = ДокНО.ПроверитьМодуль(ТекстПроцедуры, ОписаниеОшибки);
			КонецЕсли;
			
			Если Не ПроверкаПройдена Тогда
				
				ТекстСообщения = НСтр("ru = 'Процедура расчета показателя %КодПоказателя% содержит синтаксические ошибки.
				|				%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОписаниеОшибки));
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
				Возврат Ложь;				
			КонецЕсли;
						
			ДокНо=Неопределено;
			СтруктураДанных.Вставить("СпособОбработки",Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			СтруктураДанных.Вставить("ПроцедураВычисления",ТекстПроцедуры);
			
		ИначеЕсли СтрПоказательТаб.ПоказателиТекущегоОтчета Тогда
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,ТекстПроцедуры);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			СписокИспользуемыхТек	= ДанныеРасчета.СписокИспользуемыхТек;
			ВычисляемыйПоказатель	= ДанныеРасчета.ВычисляемыйПоказатель;
			
			// Синтаксический контроль формулы
			
			Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
				
				ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
				
				Попытка
					
					Выполнить(ТекФормулаДляПроверки);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
					Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
						
						ТекстСообщения = НСтр("ru = 'Возможно, формула для показателя %КодПоказателя% содержит синтаксические ошибки.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
						
						Возврат Ложь;
						
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;	
			
			СписокИспользуемых=Новый СписокЗначений;
			ПроцедураВычисления=ТекстПроцедуры;
			
			Для Каждого ТекОперанд ИЗ СписокИспользуемыхТек Цикл
				
				СписокИспользуемых.Добавить(ТекОперанд.Значение,ТекОперанд.Представление);
				
				ОперандФормулы=СписокИспользуемыхВсего.НайтиПоЗначению(ТекОперанд.Представление);
				
				Если Не ОперандФормулы=Неопределено Тогда
					
					СписокИспользуемыхВсего.Удалить(ОперандФормулы);
					
				КонецЕсли;
				
				Если ВычисляемыйПоказатель Тогда
					
					ПроцедураВычисления=СтрЗаменить(ПроцедураВычисления,ТекОперанд.Представление,ТекОперанд.Значение);
					
				КонецЕсли;			
				
			КонецЦикла;
			
			Для Каждого ОперандФормулы ИЗ СписокИспользуемыхВсего Цикл
				
				СписокИспользуемых.Добавить("",ОперандФормулы.Значение);
				
			КонецЦикла;	
			
			СписокИспользуемых=СписокИспользуемых;
			
			СтруктураДанных.Вставить("СпособОбработки",?(ВычисляемыйПоказатель,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение));
			СтруктураДанных.Вставить("ПроцедураВычисления",ПроцедураВычисления);
			
		Иначе 
			
			ДанныеРасчета			= ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,ТекстПроцедуры);
			СписокИспользуемых		= ДанныеРасчета.СписокИспользуемыхВсего;
						
			// Синтаксический контроль формулы
			
			Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
				
				ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
				
				Попытка
					
					Выполнить(ТекФормулаДляПроверки);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
					Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
						
						ТекстСообщения = НСтр("ru = 'Возможно, формула для показателя %КодПоказателя% содержит синтаксические ошибки.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
												
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;
			
			СтруктураДанных.Вставить("СпособОбработки",Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
			СтруктураДанных.Вставить("ПроцедураВычисления",ТекстПроцедуры);
			
		КонецЕсли;
		
		Если Не (СтрПоказательТаб.ПоказателиТекущегоОтчета И ПроверятьОперанды) Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ПроверкаПройдена Тогда
			
			ПроверкаПройдена=ПроверитьОперандыФормулыПоказателя(Показатель,СокрЛП(СтрПоказательТаб.Код),СписокИспользуемых,ПравилоОбработки,ЗапросПоказатели)
			
		КонецЕсли;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
	
КонецФункции // ПроверитьФормулуПоказателя()

// Формирует цепочку формул расчета показателей, приводящую к зацикливанию расчета
//
Процедура СформироватьСписокРекурсивноИспользуемыхПоказатель(ИсходныйПоказатель,СтрИспользуемыйПоказатель,ЭтапыЦикла,ДлинаКода,ПравилоОбработки,ЗапросПоказатели=Неопределено)
	
	Для Каждого Показатель ИЗ СтрИспользуемыйПоказатель.СписокИспользуемых Цикл
		
		Если НЕ ЭтапыЦикла.Найти(Показатель.Значение,"Операнд")=Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		НовыйЭтап=ЭтапыЦикла.Добавить();
		НовыйЭтап.Показатель=СтрИспользуемыйПоказатель.СокрКод;
		НовыйЭтап.Операнд=Показатель.Значение;
		
		Если Показатель.Значение=ИсходныйПоказатель  Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивКодов=Новый Массив;
	Для Каждого Код Из СтрИспользуемыйПоказатель.СписокИспользуемых Цикл
		МассивКодов.Добавить(ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(Код.Значение,ДлинаКода));
	КонецЦикла;	
	
	// Проверим наличие показателей, ссылающихся на данные текущего отчета
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.Код КАК Код,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.Владелец КАК ВидОтчета,
	|	ИСТИНА КАК ПоказателиТекущегоОтчета
	|ПОМЕСТИТЬ ПоказателиДляОбработки
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета.Код В(&Код)
	|	И ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПроцедурыРасчетов.ПотребительРасчета КАК Показатель,
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии,
	|	ПроцедурыРасчетов.РедактированиеВозможно,
	|	ПроцедурыРасчетов.ТолькоСуммирование
	|ПОМЕСТИТЬ ПроцедурыРасчетов
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И ПроцедурыРасчетов.ПотребительРасчета.Код В(&Код)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиДляОбработки.Показатель,
	|	ПоказателиДляОбработки.Код,
	|	ПоказателиДляОбработки.ВидОтчета,
	|	ПоказателиДляОбработки.ПоказателиТекущегоОтчета,
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии,
	|	ПроцедурыРасчетов.РедактированиеВозможно,
	|	ПроцедурыРасчетов.ТолькоСуммирование
	|ИЗ
	|	ПоказателиДляОбработки КАК ПоказателиДляОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ПО ПоказателиДляОбработки.Показатель = ПроцедурыРасчетов.Показатель";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	Запрос.УстановитьПараметр("Код",МассивКодов);
	
	ТабПоказатели=Запрос.Выполнить().Выгрузить();
	
	ТабПоказатели.Колонки.Добавить("СписокИспользуемых");
	ТабПоказатели.Колонки.Добавить("СокрКод");
	
	Если ЗапросПоказатели=Неопределено Тогда
		
		ЗапросПоказатели=Новый Запрос;
		ЗапросПоказатели.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
		ЗапросПоказатели.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК КодПоказателя,
		|	ИсточникиДанныхДляРасчетов.Код КАК КодОперанда,
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы,
		|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
		|Поместить ИсточникиПравила
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
		|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &Показатель
		|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
		|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется";
		
		ЗапросПоказатели.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
		ЗапросПоказатели.Выполнить();
		
	КонецЕсли;

	
	// Заполним для каждого показателя список кодов других показателей этого отчета, используемых
	// при расчете.
	
	Для Каждого СтрПоказательТаб ИЗ ТабПоказатели Цикл
		
		Если СтрПоказательТаб.ПроизвольныйКод Тогда
			
			СтрПоказательТаб.СписокИспользуемых=РазобратьПроизвольныйКод(СтрПоказательТаб.Процедура,СокрЛП(СтрПоказательТаб.Код));
			
		ИначеЕсли СтрПоказательТаб.ПоказателиТекущегоОтчета Тогда
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			СписокИспользуемыхТек	= ДанныеРасчета.СписокИспользуемыхТек;
			ВычисляемыйПоказатель	= ДанныеРасчета.ВычисляемыйПоказатель;
						
			СписокИспользуемых=Новый СписокЗначений;
			
			Для Каждого ТекОперанд ИЗ СписокИспользуемыхТек Цикл
				
				СписокИспользуемых.Добавить(ТекОперанд.Значение,ТекОперанд.Представление);
				
				ОперандФормулы=СписокИспользуемыхВсего.НайтиПоЗначению(ТекОперанд.Представление);
				
				Если Не ОперандФормулы=Неопределено Тогда
					
					СписокИспользуемыхВсего.Удалить(ОперандФормулы);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОперандФормулы ИЗ СписокИспользуемыхВсего Цикл
				
				СписокИспользуемых.Добавить("",ОперандФормулы.Значение);
				
			КонецЦикла;	
			
			СтрПоказательТаб.СписокИспользуемых=СписокИспользуемых;
			
		Иначе 
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);			
			СтрПоказательТаб.СписокИспользуемых=ДанныеРасчета.СписокИспользуемыхВсего;
			
		КонецЕсли;
		
		СтрПоказательТаб.СокрКод=СокрЛП(СтрПоказательТаб.Код);
		
		Если СтрПоказательТаб.СписокИспользуемых.Количество()>0 Тогда
			
			СформироватьСписокРекурсивноИспользуемыхПоказатель(ИсходныйПоказатель,СтрПоказательТаб,ЭтапыЦикла,ДлинаКода,ПравилоОбработки,ЗапросПоказатели);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСписокРекурсивноИспользуемыхПоказатель

Функция ПроверитьОперандыФормулыПоказателя(Показатель,СокрКод,СписокИспользуемых,ПравилоОбработки,ЗапросПоказатели)
	
	ФормулыКорректны=Истина;
	ТекстОшибок="";
	НайденаОшибка=Ложь;
	
	ДлинаКода=Метаданные.Справочники.ПоказателиОтчетов.ДлинаКода;
	
	МассивКодов=Новый Массив;
	Для Каждого Код Из СписокИспользуемых Цикл
		МассивКодов.Добавить(ОбщегоНазначенияУХ.ДополнитьДоЗаданнойДлины(Код.Значение,ДлинаКода));
	КонецЦикла;	
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ЕСТЬNULL(ПроцедурыОбработки.Процедура, &ПустойТекст) КАК Процедура,
	|	ЕСТЬNULL(ПроцедурыОбработки.ПроизвольныйКод, ЛОЖЬ) КАК ПроизвольныйКод,
	|	ЕСТЬNULL(ОперандыТекущегоОтчета.ПоказательТекущегоОтчета, ЛОЖЬ) КАК ПоказателиТекущегоОтчета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПроцедурыРасчетов.ПотребительРасчета КАК Показатель,
	|			ПроцедурыРасчетов.Процедура КАК Процедура,
	|			ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод
	|		ИЗ
	|			РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ГДЕ
	|			ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки) КАК ПроцедурыОбработки
	|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыОбработки.Показатель
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	|			ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|			ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета КАК ПоказательТекущегоОтчета
	|		ИЗ
	|			Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ГДЕ
	|			ИсточникиДанныхДляРасчетов.ПотребительРасчета.Код В(&Код)
	|			И ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|			И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
	|			И ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета) КАК ОперандыТекущегоОтчета
	|		ПО ПоказателиОтчетов.Ссылка = ОперандыТекущегоОтчета.Показатель
	|ГДЕ
	|	ПоказателиОтчетов.Код В(&Код)
	|	И ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)";
	
	Запрос.УстановитьПараметр("Код",МассивКодов);
	Запрос.УстановитьПараметр("ВидОтчета",ПравилоОбработки.Владелец);
	Запрос.УстановитьПараметр("ПустойТекст","");
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	ТабПоказатели=Запрос.Выполнить().Выгрузить();
	
	ТабПоказатели.Колонки.Добавить("СписокИспользуемых");
	ТабПоказатели.Колонки.Добавить("СокрКод");
	
	// Заполним для каждого показателя список кодов других показателей этого отчета, используемых
	// при расчете.
	
	Для Каждого СтрПоказательТаб ИЗ ТабПоказатели Цикл
		
		Если СтрПоказательТаб.ПроизвольныйКод Тогда
			
			СтрПоказательТаб.СписокИспользуемых=РазобратьПроизвольныйКод(СтрПоказательТаб.Процедура,СокрЛП(СтрПоказательТаб.Код));
			
		ИначеЕсли СтрПоказательТаб.ПоказателиТекущегоОтчета Тогда
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			СписокИспользуемыхТек	= ДанныеРасчета.СписокИспользуемыхТек;
			
			СписокИспользуемыхИтог=Новый СписокЗначений;
			
			Для Каждого ТекОперанд ИЗ СписокИспользуемыхТек Цикл
				
				СписокИспользуемыхИтог.Добавить(ТекОперанд.Значение,ТекОперанд.Представление);
				
				ОперандФормулы=СписокИспользуемыхВсего.НайтиПоЗначению(ТекОперанд.Представление);
				
				Если Не ОперандФормулы=Неопределено Тогда
					
					СписокИспользуемыхВсего.Удалить(ОперандФормулы);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОперандФормулы ИЗ СписокИспользуемыхВсего Цикл
				
				СписокИспользуемыхИтог.Добавить("",ОперандФормулы.Значение);
				
			КонецЦикла;	
			
			СтрПоказательТаб.СписокИспользуемых=СписокИспользуемыхИтог;
			
		Иначе 
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);			
			СтрПоказательТаб.СписокИспользуемых=ДанныеРасчета.СписокИспользуемыхВсего;
			
		КонецЕсли;
		
		СтрПоказательТаб.СокрКод=СокрЛП(СтрПоказательТаб.Код);
		
		// Проверим список рекурсивно зависимых
		
		Если СтрПоказательТаб.СписокИспользуемых.Количество()>0 Тогда
			
			ЭтапыЦикла=Новый ТаблицаЗначений;
			
			ЭтапыЦикла.Колонки.Добавить("Показатель");
			ЭтапыЦикла.Колонки.Добавить("Операнд");
			
			НовыйЭтап=ЭтапыЦикла.Добавить();
			НовыйЭтап.Показатель=СокрКод;
			НовыйЭтап.Операнд=СтрПоказательТаб.СокрКод;
			
			СформироватьСписокРекурсивноИспользуемыхПоказатель(СокрКод,СтрПоказательТаб,ЭтапыЦикла,ДлинаКода,ПравилоОбработки,ЗапросПоказатели);
			
			Если НЕ ЭтапыЦикла.Найти(СокрКод,"Операнд")=Неопределено Тогда
				
				// В списке рекурсивно используемых показателей присутствует исходный.
				
				ФормулыКорректны=Ложь;
				ТекстСообщения = НСтр("ru = '
				|%Код%: обнаружена циклическая ссылка в расчетах'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", Строка(СокрКод));
				ТекстОшибок = ТекстОшибок + ТекстСообщения;
				
				Для Каждого Код Из ЭтапыЦикла Цикл
					
					ТекстОшибок=ТекстОшибок+Символы.ПС+Код.Показатель+" - "+Код.Операнд+?(Код.Операнд=СокрКод,"!!","");
					
					Если Код.Операнд=СокрКод Тогда
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
	
	// Проверим операнды формулы
	
	Для Каждого Код ИЗ СписокИспользуемых Цикл
		
		Если ПустаяСтрока(Код.Значение) Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверяем на корректность указания кодов показателей в формуле	
		Если ТабПоказатели.Найти(Код.Значение,"СокрКод")=Неопределено Тогда
			
			// Используемый код показателя не принадлежит к 
			// показателям данного отчета
			ТекстСообщения = НСтр("ru = '
			|Формула расчета показателя %КодРасчет%: не найден показатель с кодом %КодПоиск%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодРасчет%", Строка(СокрКод));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоиск%", Строка(Код.Значение));
			ТекстОшибок = ТекстОшибок + ТекстСообщения;
			
			НайденаОшибка=Истина;
			ФормулыКорректны=Ложь;
			
		КонецЕсли;
		
		Если Код.Значение = СокрКод Тогда
			
			// В формуле расчета используется значение самого показателя 
			ТекстСообщения = НСтр("ru = '
			|Формула расчета показателя %КодПоказателя% использует значение самого показателя'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрКод));
			ТекстОшибок = ТекстОшибок + ТекстСообщения;
			
			НайденаОшибка = Истина;
			ФормулыКорректны = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;				
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибок);
		
	КонецЕсли;	
	
	Возврат ФормулыКорректны;
	
КонецФункции // ПроверитьОперандыФормулыПоказателя()

// Возвращает список кодов операндов, использованных в формуле расчета показателя 
// и формирует строку для проверки на синтаксическую правильность формулы.
//
// Параметры
//  ТекстФормула   - Строка, текст формулы процедуры расчета.
//  ТекстДляПроверки - Строка, переменная в которую помещается строка для проверки.
// Возвращаемое значение
//  СписокЗначений - список операндов, найденных в формуле.
//
Функция РазобратьОперанды(ТекстФормула, ТекстДляПроверки = Неопределено,ЕстьАбсолютныеЗначения=Ложь) Экспорт
	
	СписокКодов=Новый СписокЗначений;
	
	ТекКод="";
	ЕстьОперанд=Ложь;
	
	ЕстьЧисло=Ложь;
	ЕстьЗнак=Ложь;
	
	ДлинаТекста=СтрДлина(ТекстФормула);
	
	Для НомСимв=1 По ДлинаТекста Цикл
		
		ТекСимвол=Сред(ТекстФормула,НомСимв,1);
		
		Если (НЕ ЕстьОперанд) Тогда 
			
			Если СтрНайти("123456789",ТекСимвол)>0 Тогда // найдены числовые символы, не относящиеся к коду показателя.
				ЕстьЧисло=Истина;
			ИначеЕсли 
				СтрНайти("+-=<>",ТекСимвол)>0 Тогда // найдены арифметические символы.
				ЕстьЗнак=Истина;
			КонецЕсли;
			
			Если ЕстьЧисло И ЕстьЗнак Тогда
				ЕстьАбсолютныеЗначения=Истина;
				ЕстьЧисло=Ложь;
				ЕстьЗнак=Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекСимвол="[" ИЛИ ТекСимвол="{"Тогда
			
			ЕстьОперанд=Истина;
			
			ЕстьЧисло=Ложь;
			ЕстьЗнак=Ложь;
			
		ИначеЕсли ТекСимвол="]" ИЛИ ТекСимвол="}" Тогда
			
			Если СписокКодов.НайтиПоЗначению(ТекКод)=Неопределено Тогда
				
				СписокКодов.Добавить(ТекКод);
				
			КонецЕсли;
			
			ЕстьОперанд=Ложь;
			ТекКод="";
			
			Если ТекстДляПроверки <> Неопределено Тогда
				ТекстДляПроверки = ТекстДляПроверки + " 1 ";
			КонецЕсли;
			
		ИначеЕсли ЕстьОперанд Тогда
			
			ТекКод=ТекКод+ТекСимвол;
			
		ИначеЕсли ТекстДляПроверки <> Неопределено Тогда
			
			ТекстДляПроверки = ТекстДляПроверки + ТекСимвол;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокКодов;	
	
КонецФункции // РазобратьОперанды(ТекстПроцедуры)

Функция ИспользуетсяВДополнении(Показатель,ИсточникДанных)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.ФиксированноеЗначение = &ФиксированноеЗначение";
	
	Запрос.УстановитьПараметр("ПотребительРасчета",		Показатель);
	Запрос.УстановитьПараметр("ФиксированноеЗначение",	ИсточникДанных);
	
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ПроверитьИспользованиеВДополнении()

Функция ПолучитьОперанд(КодОперанда,ПотребительРасчета,НазначениеРасчетов) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	             |	И ИсточникиДанныхДляРасчетов.Код = &КодОперанда
	             |	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов";
	
	Запрос.УстановитьПараметр("ПотребительРасчета",	ПотребительРасчета);
	Запрос.УстановитьПараметр("КодОперанда",		КодОперанда);
	Запрос.УстановитьПараметр("НазначениеРасчетов",	НазначениеРасчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.Ссылка;

КонецФункции // ПолучитьОперанд()

Процедура ОтметитьКакНеиспользуемый(ИсточникДанных) Экспорт
	
	ИсточникОбъект=ИсточникДанных.ПолучитьОбъект();
	ИсточникОбъект.ОбменДанными.Загрузка=Истина;
	ИсточникОбъект.НеИспользуется=Истина;			
	ИсточникОбъект.Записать();
	
КонецПроцедуры // ОтметитьКакНеиспользуемый()

Функция ПолучитьДанныеРасчетаПоказателя(Показатель,ЗапросПоказатели,ТекстФормула) Экспорт
	
	ВычисляемыйПоказатель=Истина;
	
	ЗапросПоказатели.Текст="ВЫБРАТЬ 
	|	ИсточникиПравила.КодПоказателя,
	|	ИсточникиПравила.КодОперанда,
	|	ИсточникиПравила.ЕстьНестандартныеОтборы,
	|	ИсточникиПравила.ПоказательТекущегоОтчета
	|ИЗ
	|	ИсточникиПравила КАК ИсточникиПравила
	|ГДЕ
	|	ИсточникиПравила.ПотребительРасчета = &Показатель";
	
	ЗапросПоказатели.УстановитьПараметр("Показатель",Показатель);
		
	Результат=ЗапросПоказатели.Выполнить().Выбрать();
	СписокИспользуемыхТек	= Новый СписокЗначений;
	СписокИспользуемыхВсего	= Новый СписокЗначений;
	
	Пока Результат.Следующий() Цикл
		
		ТекКодОперанда=СокрЛП(Результат.КодОперанда);
		
		Если СтрНайти(ТекстФормула,ТекКодОперанда)=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СписокИспользуемыхВсего.Добавить(ТекКодОперанда);
		
		Если Результат.ПоказательТекущегоОтчета Тогда
			
			СписокИспользуемыхТек.Добавить(СокрЛП(Результат.КодПоказателя),ТекКодОперанда);
			
			Если Результат.ЕстьНестандартныеОтборы Тогда
				
				ВычисляемыйПоказатель=Ложь;
				
			КонецЕсли;
			
		Иначе
			
			ВычисляемыйПоказатель=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанные=Новый Структура;
	СтруктураДанные.Вставить("СписокИспользуемыхТек",	СписокИспользуемыхТек);
	СтруктураДанные.Вставить("СписокИспользуемыхВсего",	СписокИспользуемыхВсего);
	СтруктураДанные.Вставить("ВычисляемыйПоказатель",	ВычисляемыйПоказатель);
	
	ТекстДляПроверки="";
	
	РазобратьОперанды(ТекстФормула,ТекстДляПроверки);
	
	СтруктураДанные.Вставить("ТекстДляПроверки",ТекстДляПроверки);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеРасчетаПоказателя()

// Формирует цепочку формул расчета показателей, приводящую к зацикливанию расчета
//
Процедура СформироватьСписокРекурсивноИспользуемых(ИсходныйПоказатель,СтрИспользуемыйПоказатель,ТабПоказателиПроверка,ЭтапыЦикла)
	
	Для Каждого Показатель ИЗ СтрИспользуемыйПоказатель.СписокИспользуемых Цикл
		
		Если НЕ ЭтапыЦикла.Найти(Показатель.Значение,"Операнд")=Неопределено Тогда
			
			Прервать;
			
		КонецЕсли;
		
		НовыйЭтап=ЭтапыЦикла.Добавить();
		НовыйЭтап.Показатель=СтрИспользуемыйПоказатель.СокрКод;
		НовыйЭтап.Операнд=Показатель.Значение;
		
		Если Показатель.Значение=ИсходныйПоказатель  Тогда
			
			Прервать;
			
		Иначе
			
			ТекПоказатель=ТабПоказателиПроверка.Найти(Показатель.Значение,"СокрКод");
			
			Если Не ТекПоказатель=Неопределено Тогда
				
				СформироватьСписокРекурсивноИспользуемых(ИсходныйПоказатель,ТекПоказатель,ТабПоказателиПроверка,ЭтапыЦикла);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьСписокРекурсивноИспользуемых

Функция ПроверитьОперандыФормулРасчета(ТабПоказатели,ТабПоказателиПроверка,ТабКонечные) Экспорт
	
	ФормулыКорректны=Истина;
	ТекстОшибок="";
	
	Для Каждого Показатель ИЗ ТабПоказатели Цикл
		
		Для Каждого Код ИЗ Показатель.СписокИспользуемых Цикл
			
			НайденаОшибка=Ложь;
			
			Если ПустаяСтрока(Код.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверяем на корректность указания кодов показателей в формуле	
			Если ТабПоказателиПроверка.Найти(Код.Значение,"СокрКод")=Неопределено
				И ТабКонечные.Найти(Код.Значение,"СокрКод")=Неопределено Тогда
				
				// Используемый код показателя не принадлежит к 
				// показателям данного отчета
				
				#Если Клиент Тогда
					ТекстОшибок=СтрШаблон(Нстр("ru = '%1Формула расчета показателя %2: не найден показатель с кодом %3'"), 
					            	ТекстОшибок+Символы.ПС, Показатель.СокрКод, Код.Значение);
				#КонецЕсли
				
				НайденаОшибка=Истина;
				ФормулыКорректны=Ложь;
				
			КонецЕсли;
			
			Если Код.Значение=Показатель.СокрКод Тогда
				
				// В формуле расчета используется значение самого показателя 
				
				#Если Клиент Тогда
					ТекстОшибок=СтрШаблон(Нстр("ru = '%1Формула расчета показателя %2 использует значение самого показателя'"), 
					            	ТекстОшибок+Символы.ПС, Показатель.СокрКод);
				#КонецЕсли
				
				НайденаОшибка=Истина;
				ФормулыКорректны=Ложь;
				
			КонецЕсли;
			
			Если Не НайденаОшибка Тогда
				
				// Проверим наличие циклической ссылки рекурсивно.
				
				СтрИспользуемыйПоказатель=ТабПоказателиПроверка.Найти(Код.Значение,"СокрКод");
				
				Если НЕ СтрИспользуемыйПоказатель=Неопределено Тогда
					
					ЭтапыЦикла=Новый ТаблицаЗначений;
					
					ЭтапыЦикла.Колонки.Добавить("Показатель");
					ЭтапыЦикла.Колонки.Добавить("Операнд");
					ЭтапыЦикла.Индексы.Добавить("Операнд");
					
					НовыйЭтап=ЭтапыЦикла.Добавить();
					НовыйЭтап.Показатель=Показатель.СокрКод;
					НовыйЭтап.Операнд=Код.Значение;
					
					СформироватьСписокРекурсивноИспользуемых(Показатель.СокрКод,СтрИспользуемыйПоказатель,ТабПоказателиПроверка,ЭтапыЦикла);
					
					Если НЕ ЭтапыЦикла.Найти(Показатель.СокрКод,"Операнд")=Неопределено Тогда
						
						// В списке рекурсивно используемых показателей присутствует исходный.
						
						ФормулыКорректны=Ложь;
						
						#Если Клиент Тогда
							ТекстОшибок=СтрШаблон(Нстр("ru = '%1: обнаружена циклическая ссылка в расчетах'"), 
							            	ТекстОшибок+Символы.ПС+Показатель.СокрКод);
						#КонецЕсли
						
						Для Каждого Код Из ЭтапыЦикла Цикл
							
							#Если Клиент Тогда
								ТекстОшибок=ТекстОшибок+Символы.ПС+Код.Показатель+" - "+Код.Операнд+?(Код.Операнд=Показатель.СокрКод,"!!","");
							#КонецЕсли
							
							Если Код.Операнд=Показатель.СокрКод Тогда
								
								Прервать;
								
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстОшибок) Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибок);
		
	КонецЕсли;	
	
	Возврат ФормулыКорректны;
	
КонецФункции // ПроверитьОперандыФормулРасчета()

Функция ПолучитьПорядокВычисленияПоказателей(ПравилоОбработки,ВидОтчета) Экспорт	
	
	// Результирующая таблица показателей	
	Показатели=Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Код");
	Показатели.Колонки.Добавить("Показатель");
	Показатели.Колонки.Добавить("Процедура");
	Показатели.Колонки.Добавить("ПроизвольныйКод",			ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("СпособОбработки");
	Показатели.Колонки.Добавить("ПоказателиТекущегоОтчета",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("СписокИспользуемых");
	Показатели.Колонки.Добавить("Порядок");
	Показатели.Колонки.Добавить("ЕстьАбсолютныеЗначения",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("ПересчитыватьПриОткрытии",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("ТолькоСуммирование",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Показатели.Колонки.Добавить("ЕстьДополненияАналитик",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Показатели.Индексы.Добавить("Код");
	
	// Получим список показателей, использующих данные текущего отчета
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ЕСТЬNULL(ПринудительноеЗаполнение.Ссылка, ИСТИНА) КАК СтандартноеЗаполнение
	|ПОМЕСТИТЬ ПоказателиТекущегоОтчета
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|		ГДЕ
	|			ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов = &ПравилоОбработки
	|			И НЕ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПометкаУдаления
	|			И (ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки)
	|					ИЛИ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение))) КАК ПринудительноеЗаполнение
	|		ПО ИсточникиДанныхДляРасчетов.Ссылка = ПринудительноеЗаполнение.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется
	|	И ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПотребительРасчета КАК Показатель
	|ПОМЕСТИТЬ ПоказателиСДополнением
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных)
	|	И ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НеИспользуется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиТекущегоОтчета.Показатель
	|ИЗ
	|	ПоказателиТекущегоОтчета КАК ПоказателиТекущегоОтчета
	|ГДЕ
	|	ПоказателиТекущегоОтчета.СтандартноеЗаполнение = ИСТИНА";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);	
	МассивСтандартные		= Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
	// Получим показатели, при расчете которых используется дополнение аналитик одних операндов аналитиками других
			
	// Получим показатели, рассчитывающиеся только на основании данных текущей или внешних ИБ
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПроцедурыРасчетов.ПотребительРасчета КАК Показатель,
	|	ПроцедурыРасчетов.ПотребительРасчета.Код КАК Код,
	|	ПроцедурыРасчетов.Процедура КАК Процедура,
	|	ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод,
	|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии КАК ПересчитыватьПриОткрытии,
	|	ПроцедурыРасчетов.ТолькоСуммирование КАК ТолькоСуммирование,
	|	ЛОЖЬ КАК ПоказателиТекущегоОтчета,
	|	ВЫБОР
	|		КОГДА ПоказателиСДополнением.Показатель ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДополненияАналитик,
	|	ПроцедурыРасчетов.СпособОбработки КАК СпособОбработки
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиСДополнением КАК ПоказателиСДополнением
	|		ПО ПроцедурыРасчетов.ПотребительРасчета = ПоказателиСДополнением.Показатель
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ПроцедурыРасчетов.ПроизвольныйКод
	|	И НЕ ПроцедурыРасчетов.ПотребительРасчета.ПометкаУдаления
	|	И НЕ ПроцедурыРасчетов.ПотребительРасчета В
	|				(ВЫБРАТЬ
	|					ПоказателиТекущегоОтчета.Показатель
	|				ИЗ
	|					ПоказателиТекущегоОтчета)";
		
	ТабКонечные=Запрос.Выполнить().Выгрузить();
	ТабКонечные.Колонки.Добавить("СокрКод");
	
	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	ЗапросПоказатели.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК КодПоказателя,
	|	ИсточникиДанныхДляРасчетов.Код КАК КодОперанда,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета,
	|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|ПОМЕСТИТЬ ИсточникиПравила
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется";
	
	ЗапросПоказатели.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	ЗапросПоказатели.Выполнить();
	
	Для Каждого СтрПоказательКон ИЗ ТабКонечные Цикл
		
		СтрПоказательКон.СокрКод=СокрЛП(СтрПоказательКон.Код);
		
		СтрПоказатель=Показатели.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрПоказатель,СтрПоказательКон,,"Код");
		СтрПоказатель.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
		
		СтрПоказатель.Код=СтрПоказательКон.СокрКод;
		СтрПоказатель.Порядок=1;	
		ТекФормулаДляПроверки = "";
				
		ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(СтрПоказатель.Показатель,ЗапросПоказатели,СтрПоказатель.Процедура);
		СтрПоказатель.СписокИспользуемых	= ДанныеРасчета.СписокИспользуемыхВсего;
		
		Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
			
			ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
			
			Попытка
				
				Выполнить(ТекФормулаДляПроверки);
				
			Исключение
				
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
				Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
					
					ТекстСообщения = НСтр("ru = 'Возможно, формула для показателя %КодПоказателя% содержит синтаксические ошибки.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательКон.Показатель.Код)));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
					
				КонецЕсли;
				
			КонецПопытки;
			
		КонецЕсли;
		
		Если СтрПоказательКон.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление Тогда
			
			НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НазначениеРасчетов.Установить(ПравилоОбработки);
			НаборЗаписей.Отбор.ПотребительРасчета.Установить(СтрПоказательКон.Показатель);
			НаборЗаписей.Прочитать();
			НаборЗаписей[0].СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
			НаборЗаписей[0].ПроцедураВычисления=СтрПоказательКон.Процедура;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;	
		
	КонецЦикла;
	
	// Получим остальные показатели
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.Код КАК Код,
	|	ЕСТЬNULL(ПроцедурыОбработки.Процедура, &ПустойТекст) КАК Процедура,
	|	ЕСТЬNULL(ПроцедурыОбработки.ПроцедураВычисления, &ПустойТекст) КАК ПроцедураВычисления,
	|	ЕСТЬNULL(ПроцедурыОбработки.СпособОбработки, &ПустойТекст) КАК СпособОбработки,
	|	ЕСТЬNULL(ПроцедурыОбработки.ПроизвольныйКод, ЛОЖЬ) КАК ПроизвольныйКод,
	|	ЕСТЬNULL(ПроцедурыОбработки.ПересчитыватьПриОткрытии, ЛОЖЬ) КАК ПересчитыватьПриОткрытии,
	|	ЕСТЬNULL(ПроцедурыОбработки.РедактированиеВозможно, ЛОЖЬ) КАК РедактированиеВозможно,
	|	ЕСТЬNULL(ПроцедурыОбработки.ТолькоСуммирование, ЛОЖЬ) КАК ТолькоСуммирование,
	|	ВЫБОР КОГДА ПоказателиТекущегоОтчета.Показатель ЕСТЬ NULL Тогда ЛОЖЬ ИНАЧЕ Истина КОНЕЦ КАК ПоказателиТекущегоОтчета,
	|	ВЫБОР КОГДА ПоказателиСДополнением.Показатель ЕСТЬ NULL Тогда ЛОЖЬ ИНАЧЕ Истина КОНЕЦ КАК ЕстьДополненияАналитик
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПроцедурыРасчетов.ПотребительРасчета КАК Показатель,
	|			ПроцедурыРасчетов.Процедура КАК Процедура,
	|			ПроцедурыРасчетов.ПроцедураВычисления КАК ПроцедураВычисления,
	|			ПроцедурыРасчетов.СпособОбработки КАК СпособОбработки,
	|			ПроцедурыРасчетов.ПересчитыватьПриОткрытии КАК ПересчитыватьПриОткрытии,
	|			ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод,
	|			ПроцедурыРасчетов.РедактированиеВозможно КАК РедактированиеВозможно,
	|			ПроцедурыРасчетов.ТолькоСуммирование КАК ТолькоСуммирование
	|		ИЗ
	|			РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|		ГДЕ
	|			ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|			И (ПроцедурыРасчетов.ПроизвольныйКод
	|					ИЛИ ПроцедурыРасчетов.ПотребительРасчета В (ВЫБРАТЬ ПоказателиТекущегоОтчета.Показатель ИЗ ПоказателиТекущегоОтчета))) КАК ПроцедурыОбработки
	|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыОбработки.Показатель
	|		Левое Соединение ПоказателиТекущегоОтчета КАК ПоказателиТекущегоОтчета 
	|		ПО ПоказателиОтчетов.Ссылка = ПоказателиТекущегоОтчета.Показатель
	|		Левое Соединение ПоказателиСДополнением КАК ПоказателиСДополнением 
	|		ПО ПоказателиОтчетов.Ссылка = ПоказателиСДополнением.Показатель
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|	И НЕ ПоказателиОтчетов.Ссылка В
	|				(ВЫБРАТЬ
	|					ПроцедурыРасчетов.ПотребительРасчета КАК Показатель
	|				ИЗ
	|					РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|				ГДЕ
	|					ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|					И НЕ ПроцедурыРасчетов.ПотребительРасчета В (ВЫБРАТЬ ПоказателиТекущегоОтчета.Показатель ИЗ ПоказателиТекущегоОтчета)
	|					И НЕ ПроцедурыРасчетов.ПроизвольныйКод)";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ПустойТекст","");
	
	ТабПоказатели=Запрос.Выполнить().Выгрузить();
	ТабПоказатели.Колонки.Добавить("СписокИспользуемых");
	ТабПоказатели.Колонки.Добавить("СокрКод");
	ТабПоказатели.Колонки.Добавить("ЕстьАбсолютныеЗначения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	// Заполним для каждого показателя список кодов других показателей этого отчета, используемых
	// при расчете.
	
	Для Каждого СтрПоказательТаб ИЗ ТабПоказатели Цикл
		
		Если СтрПоказательТаб.ПроизвольныйКод Тогда
			
			СтрПоказательТаб.СписокИспользуемых=РазобратьПроизвольныйКод(СтрПоказательТаб.Процедура,СокрЛП(СтрПоказательТаб.Код),СтрПоказательТаб.ЕстьАбсолютныеЗначения);
			
			// Синтаксический контроль формулы
			ОписаниеОшибки = "";
			
			Если РасширениеБизнесЛогикиУХ.ИспользоватьРасширенныйРасчет() Тогда
				ОбработкаРасчета = РасширениеБизнесЛогикиУХ.ПолучитьОбработкуЗаполненияДанных();
				ПроверкаПройдена = ОбработкаРасчета.ПроверитьМодуль(СтрПоказательТаб.Процедура, ОписаниеОшибки, Истина, ВидОтчета);
			Иначе
				ДокНО = Документы.НастраиваемыйОтчет.СоздатьДокумент();
				ПроверкаПройдена = ДокНО.ПроверитьМодуль(СтрПоказательТаб.Процедура, ОписаниеОшибки);
			КонецЕсли;
			
			Если Не ПроверкаПройдена Тогда
				
				ТекстСообщения = НСтр("ru = 'Процедура расчета показателя %КодПоказателя% содержит синтаксические ошибки.
				|				%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОписаниеОшибки));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
				
				Возврат Неопределено;
				
			КонецЕсли;
			
			ДокНо=Неопределено;
			СтрПоказательТаб.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление;
			
		ИначеЕсли СтрПоказательТаб.ПоказателиТекущегоОтчета Тогда
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(СтрПоказательТаб.Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			СписокИспользуемыхТек	= ДанныеРасчета.СписокИспользуемыхТек;
			ВычисляемыйПоказатель	= ДанныеРасчета.ВычисляемыйПоказатель;
			
			Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
				
				ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
				
				Попытка
					
					Выполнить(ТекФормулаДляПроверки);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					
					ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
					Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
						
						ТекстСообщения = НСтр("ru = 'Возможно, формула для показателя %КодПоказателя% содержит синтаксические ошибки.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
														
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;	
						
			Если МассивСтандартные.Найти(СтрПоказательТаб.Показатель)=Неопределено Тогда
				
				ВычисляемыйПоказатель=Ложь;
				ТекСпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
				
			Иначе
				
				ТекСпособОбработки=?(ВычисляемыйПоказатель,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение); 
				
			КонецЕсли;
						
			////////////////////////////////////////////////////////////////////////////////////////////
			
			ТекПроцедураВычисления=СтрПоказательТаб.Процедура;
			
			СписокИспользуемых=Новый СписокЗначений;
			
			Для Каждого ТекОперанд ИЗ СписокИспользуемыхТек Цикл
				
				СписокИспользуемых.Добавить(ТекОперанд.Значение,ТекОперанд.Представление);
				
				ОперандФормулы=СписокИспользуемыхВсего.НайтиПоЗначению(ТекОперанд.Представление);
				
				Если Не ОперандФормулы=Неопределено Тогда
					
					СписокИспользуемыхВсего.Удалить(ОперандФормулы);
					
				КонецЕсли;
				
				Если ВычисляемыйПоказатель Тогда
					
					ТекПроцедураВычисления=СтрЗаменить(ТекПроцедураВычисления,ТекОперанд.Представление,ТекОперанд.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОперандФормулы ИЗ СписокИспользуемыхВсего Цикл
				
				СписокИспользуемых.Добавить("",ОперандФормулы.Значение);
				
			КонецЦикла;	
			
			Если НЕ СтрПоказательТаб.СпособОбработки=ТекСпособОбработки Тогда // Изменялись свойства источников данных после записи формулы
				
				СтруктураЗаписи=Новый Структура;
				СтруктураЗаписи.Вставить("НазначениеРасчетов",			ПравилоОбработки);
				СтруктураЗаписи.Вставить("ПотребительРасчета",			СтрПоказательТаб.Показатель);
				СтруктураЗаписи.Вставить("ТекстПроцедуры",				СтрПоказательТаб.Процедура);
				СтруктураЗаписи.Вставить("ПересчитыватьПриОткрытии",	СтрПоказательТаб.ПересчитыватьПриОткрытии);
				СтруктураЗаписи.Вставить("РедактированиеВозможно",		СтрПоказательТаб.РедактированиеВозможно);
				СтруктураЗаписи.Вставить("ТолькоСуммирование",			СтрПоказательТаб.ТолькоСуммирование);
				СтруктураЗаписи.Вставить("ПроцедураВычисления",			ТекПроцедураВычисления);
				СтруктураЗаписи.Вставить("СпособОбработки",				ТекСпособОбработки);
				СтруктураЗаписи.Вставить("ПроизвольныйКод",				Ложь);
				
				ЗаписатьПроцедуруРасчета(СтруктураЗаписи);
				
			КонецЕсли;
						
			СтрПоказательТаб.СписокИспользуемых=СписокИспользуемых;
			СтрПоказательТаб.СпособОбработки=ТекСпособОбработки;
			СтрПоказательТаб.Процедура=ТекПроцедураВычисления;
			
		Иначе 
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(СтрПоказательТаб.Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;

			СтрПоказательТаб.СписокИспользуемых=ДанныеРасчета.СписокИспользуемыхВсего;
			СтрПоказательТаб.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
				
			Если Не ПустаяСтрока(ДанныеРасчета.ТекстДляПроверки) Тогда
				
				ТекФормулаДляПроверки = "Тест = " + ДанныеРасчета.ТекстДляПроверки;
				
				Попытка
					
					Выполнить(ТекФормулаДляПроверки);
					
				Исключение
					
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ОписаниеВидаОшибки = НСтр("ru = 'Деление на 0'");
					Если НЕ ИнформацияОбОшибке.Описание = ОписаниеВидаОшибки Тогда
						
						ТекстСообщения = НСтр("ru = 'Формула для показателя: %КодПоказателя% содержит синтаксические ошибки.'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(СтрПоказательТаб.Код)));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
						
						Возврат Неопределено;
						
					КонецЕсли;
					
				КонецПопытки;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		СтрПоказательТаб.СокрКод=СокрЛП(СтрПоказательТаб.Код);
		
	КонецЦикла;
	
	Уровень=2;
		
	Пока ТабПоказатели.Количество()>0 Цикл
		
		МассивОбработанных=Новый Массив;
		
		Для Каждого Показатель ИЗ ТабПоказатели Цикл
			
			ЕстьВычисляемыеПозже=Ложь;
			
			Для Каждого Код ИЗ Показатель.СписокИспользуемых Цикл
				
				Если ПустаяСтрока(Код.Значение) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Показатели.Найти(Код.Значение,"Код")=Неопределено Тогда
					
					// В формуле расчета есть показатели, которые на данном шаге вычислений
					// еще не определены
					
					ЕстьВычисляемыеПозже=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ (ЕстьВычисляемыеПозже И Показатель.СписокИспользуемых.Количество()>0) Тогда
				
				СтрПоказатель=Показатели.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрПоказатель,Показатель,,"Код");
				
				СтрПоказатель.Код=Показатель.СокрКод;
				СтрПоказатель.Порядок=Уровень;
				
				МассивОбработанных.Добавить(Показатель);
				
				Уровень=Уровень+1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Обработанный ИЗ МассивОбработанных Цикл  // Удаляем уже упорядоченные показатели
			
			ТабПоказатели.Удалить(Обработанный);
			
		КонецЦикла;
		
		Если МассивОбработанных.Количество()=0 И ТабПоказатели.Количество()>0 Тогда
			
			Возврат Неопределено;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	ЗапросПоказатели.МенеджерВременныхТаблиц.Закрыть();
	
	Показатели.Сортировать("Порядок");
	
	Возврат Показатели;
	
КонецФункции // ПолучитьПорядокВычисленияПоказателей()

Процедура СформироватьДеревоРекурсивноЗависимых(СтрокаДерева,СписокИспользуемых,мПоказателиДляОбработки,СтруктураОбработанных);
	
	Для Каждого СтрПоказатель ИЗ СписокИспользуемых Цикл
		
		НоваяСтрока=СтрокаДерева.Строки.Добавить();
		НоваяСтрока.КодПоказателя=СтрПоказатель.Значение;
		
		ТекСтрокаОбработанных=СтруктураОбработанных.Найти(СтрПоказатель.Значение,"Код");
		Если ТекСтрокаОбработанных=Неопределено Тогда
			
			МассивСтрок=Новый Массив;
			МассивСтрок.Добавить(НоваяСтрока);
			
			СтрокаОбработанных=СтруктураОбработанных.Добавить();
			СтрокаОбработанных.Код=СтрПоказатель.Значение;
			СтрокаОбработанных.МассивСтрок=МассивСтрок;
			
		Иначе	
			
			ТекСтрокаОбработанных.МассивСтрок.Добавить(НоваяСтрока);
			
		КонецЕсли;
		
		ИспользуемыйПоказатель=мПоказателиДляОбработки.Найти(СтрПоказатель.Значение,"Код");
		
		Если (НЕ ИспользуемыйПоказатель=Неопределено) Тогда
			
			НоваяСтрока.Порядок=ИспользуемыйПоказатель.Порядок;
			
			Если ИспользуемыйПоказатель.СписокИспользуемых.Количество()>0 Тогда
				
				СформироватьДеревоРекурсивноЗависимых(НоваяСтрока,ИспользуемыйПоказатель.СписокИспользуемых,мПоказателиДляОбработки,СтруктураОбработанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДеревоРекурсивноЗависимых()

Функция ПолучитьДеревоПересчетаПоказателей(мПоказателиДляОбработки) Экспорт
	
	мПоказателиДляобработки.Сортировать("Порядок Убыв");
	
	ДеревоПересчета=Новый ДеревоЗначений;
	ДеревоПересчета.Колонки.Добавить("КодПоказателя");
	ДеревоПересчета.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0));
	
	СтруктураОбработанных=Новый ТаблицаЗначений;
	СтруктураОбработанных.Колонки.Добавить("Код");
	СтруктураОбработанных.Колонки.Добавить("МассивСтрок");
		
	СтруктураОбработанных.Индексы.Добавить("Код");
		
	Для Каждого СтрПоказатель ИЗ мПоказателиДляобработки Цикл
		
		Если СтрПоказатель.СписокИспользуемых.Количество()>0 Тогда
			
			Если СтруктураОбработанных.Найти(СтрПоказатель.Код,"Код")=Неопределено Тогда
				
				НоваяСтрока=ДеревоПересчета.Строки.Добавить();
				НоваяСтрока.КодПоказателя=СтрПоказатель.Код;
				НоваяСтрока.Порядок=СтрПоказатель.Порядок;
				
				СформироватьДеревоРекурсивноЗависимых(НоваяСтрока,СтрПоказатель.СписокИспользуемых,мПоказателиДляОбработки,СтруктураОбработанных);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	мПоказателиДляобработки.Сортировать("Порядок");
	
	ТаблицаПересчета=Новый ТаблицаЗначений;
	ТаблицаПересчета.Колонки.Добавить("КодПоказателя");
	ТаблицаПересчета.Колонки.Добавить("МассивКодовПоказателей");
		
	мПоказателиОбязательныеКПересчету=Новый Массив;
	
	Для Каждого Строка ИЗ СтруктураОбработанных Цикл
		
		ТабКодовПоказателейТек=Новый ТаблицаЗначений;
		ТабКодовПоказателейТек.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
		ТабКодовПоказателейТек.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0));
		ТабКодовПоказателейТек.Индексы.Добавить("Код");
		
		Для Каждого НачСтрока ИЗ Строка.МассивСтрок Цикл
			
			ПолучитьСписокРодителей(НачСтрока,ТабКодовПоказателейТек);
			
		КонецЦикла;
		
		ТабКодовПоказателейТек.Сортировать("Порядок");
		
		НоваяСтрока=ТаблицаПересчета.Добавить();
		НоваяСтрока.КодПоказателя=Строка.Код;
		НоваяСтрока.МассивКодовПоказателей=ТабКодовПоказателейТек.ВыгрузитьКолонку("Код");
		
	КонецЦикла;
	
	ТаблицаПересчета.Индексы.Добавить("КодПоказателя");	
	СтруктураПересчета=Новый Структура;
	СтруктураПересчета.Вставить("мТаблицаПересчета",ТаблицаПересчета);
	СтруктураПересчета.Вставить("мПоказателиОбязательныеКПересчету",мПоказателиОбязательныеКПересчету);
	
	Возврат СтруктураПересчета;
	
КонецФункции // ПолучитьДеревоПересчетаПоказателей()

Процедура ПолучитьСписокРодителей(Строка,ТабКодовПоказателейТек);
	
	ТекРодитель=Строка.Родитель;
		
	Если НЕ ТекРодитель=Неопределено Тогда
		
		КодПоказателя=ТекРодитель.КодПоказателя;
		
		Если ТабКодовПоказателейТек.Найти(КодПоказателя,"Код")=Неопределено Тогда
			
			НоваяСтрока=ТабКодовПоказателейТек.Добавить();
			НоваяСтрока.Код=ТекРодитель.КодПоказателя;
			НоваяСтрока.Порядок=ТекРодитель.Порядок;
			
		КонецЕсли;
		
		ПолучитьСписокРодителей(ТекРодитель,ТабКодовПоказателейТек);
			
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСписокРодителей()


Функция ПолучитьПорядокКорректировкиПоказателей(ТабКорректировок,ВидОтчета,ПравилоОбработки) Экспорт
	
	// Результирующая таблица показателей	
	Показатели=Новый ТаблицаЗначений;
	Показатели.Колонки.Добавить("Код");
	Показатели.Колонки.Добавить("Показатель");
	Показатели.Колонки.Добавить("Процедура");
	Показатели.Колонки.Добавить("ПроизвольныйКод");
	Показатели.Колонки.Добавить("СпособОбработки");
	Показатели.Колонки.Добавить("ПоказателиТекущегоОтчета");
	Показатели.Колонки.Добавить("СписокИспользуемых");
	Показатели.Колонки.Добавить("Порядок");
	
	// Получим список показателей, использующих данные текущего отчета
	МассивПоказатели=ТабКорректировок.ВыгрузитьКолонку("Показатель");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета.Владелец = &ВидОтчета
	|	И ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|	И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета В(&МассивПоказатели)
	|	И ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки";
	
	Запрос.УстановитьПараметр("МассивПоказатели",МассивПоказатели);
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	МассивТекущие=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
	// Получим показатели, рассчитывающиеся только на основании операндов
	Запрос=Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ТабКорректировок
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТабКорректировок);
	Запрос.Выполнить();	
	
	Запрос.Текст="ВЫБРАТЬ
	|	ТабКорректировок.Показатель КАК Показатель,
	|	ТабКорректировок.Показатель.Код КАК Код,
	|	ТабКорректировок.Процедура КАК Процедура,
	|	ТабКорректировок.ПроизвольныйКод КАК ПроизвольныйКод,
	|	ЛОЖЬ КАК ПоказателиТекущегоОтчета
	|ИЗ
	|	ТабКорректировок КАК ТабКорректировок
	|ГДЕ
	|	(НЕ ТабКорректировок.ПроизвольныйКод)
	|	И (НЕ ТабКорректировок.Показатель В (&МассивТекущие))";
	
	Запрос.УстановитьПараметр("МассивТекущие",МассивТекущие);
	
	ТабКонечные=Запрос.Выполнить().Выгрузить();
	ТабКонечные.Колонки.Добавить("СокрКод");
	
	Для Каждого СтрПоказательКон ИЗ ТабКонечные Цикл
		
		СтрПоказательКон.СокрКод=СокрЛП(СтрПоказательКон.Код);
		
		СтрПоказатель=Показатели.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрПоказатель,СтрПоказательКон,,"Код");
		СтрПоказатель.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
		
		СтрПоказатель.Код=СтрПоказательКон.СокрКод;
		СтрПоказатель.Порядок=1;	
		СтрПоказатель.СписокИспользуемых=РазобратьОперанды(СтрПоказатель.Процедура);
		
	КонецЦикла;
	
	// Получим остальные показатели
	
	Запрос.Текст="ВЫБРАТЬ
	|	ТабКорректировок.Показатель КАК Показатель,
	|	ТабКорректировок.Показатель.Код КАК Код,
	|	ТабКорректировок.Процедура КАК Процедура,
	|	ТабКорректировок.ПроизвольныйКод КАК ПроизвольныйКод,
	|	ВЫБОР КОГДА ТабКорректировок.Показатель В (&МассивТекущие) ТОГДА ИСТИНА ИНАЧЕ ЛОЖЬ КОНЕЦ КАК ПоказателиТекущегоОтчета
	|ИЗ
	|	ТабКорректировок КАК ТабКорректировок
	|ГДЕ
	|	(ТабКорректировок.ПроизвольныйКод
	|	ИЛИ ТабКорректировок.Показатель В (&МассивТекущие))";
	
	ТабПоказатели=Запрос.Выполнить().Выгрузить();
	ТабПоказатели.Колонки.Добавить("СписокИспользуемых");
	ТабПоказатели.Колонки.Добавить("СокрКод");
	
	ЗапросПоказатели=Новый Запрос;
	ЗапросПоказатели.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	ЗапросПоказатели.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Код КАК КодПоказателя,
	|	ИсточникиДанныхДляРасчетов.Код КАК КодОперанда,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета,
	|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета
	|Поместить ИсточникиПравила
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетов.НеИспользуется";
	
	ЗапросПоказатели.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	ЗапросПоказатели.Выполнить();
	
	// Заполним для каждого показателя список кодов других показателей этого отчета, используемых
	// при расчете.
	
	Для Каждого СтрПоказательТаб ИЗ ТабПоказатели Цикл
		
		Если СтрПоказательТаб.ПроизвольныйКод Тогда
			
			СтрПоказательТаб.СписокИспользуемых=РазобратьПроизвольныйКод(СтрПоказательТаб.Процедура,СокрЛП(СтрПоказательТаб.Код));
			СтрПоказатель.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление;
			
		ИначеЕсли СтрПоказательТаб.ПоказателиТекущегоОтчета Тогда
			
			ДанныеРасчета=ПолучитьДанныеРасчетаПоказателя(СтрПоказательТаб.Показатель,ЗапросПоказатели,СтрПоказательТаб.Процедура);
			СписокИспользуемыхВсего	= ДанныеРасчета.СписокИспользуемыхВсего;
			СписокИспользуемыхТек	= ДанныеРасчета.СписокИспользуемыхТек;
			ВычисляемыйПоказатель	= ДанныеРасчета.ВычисляемыйПоказатель;
	
			СписокИспользуемых=Новый СписокЗначений;
			
			Для Каждого ТекОперанд ИЗ СписокИспользуемыхТек Цикл
				
				СписокИспользуемых.Добавить(ТекОперанд.Значение,ТекОперанд.Представление);
				
				ОперандФормулы=СписокИспользуемыхВсего.НайтиПоЗначению(ТекОперанд.Представление);
				
				Если Не ОперандФормулы=Неопределено Тогда
					
					СписокИспользуемыхВсего.Удалить(ОперандФормулы);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого ОперандФормулы ИЗ СписокИспользуемыхВсего Цикл
				
				СписокИспользуемых.Добавить("",ОперандФормулы.Значение);
				
			КонецЦикла;	
			
			СтрПоказательТаб.СписокИспользуемых=СписокИспользуемых;
			СтрПоказатель.СпособОбработки=?(ВычисляемыйПоказатель,Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
			
		КонецЕсли;
		
		СтрПоказательТаб.СокрКод=СокрЛП(СтрПоказательТаб.Код);
		
	КонецЦикла;
	
	Уровень=2;
	
	// Сохраним исходную таблицу для возможной проверки
	
	ТабПоказателиПроверка=ТабПоказатели.Скопировать();
	ТабПоказателиПроверка.Индексы.Добавить("СокрКод");
	
	Пока ТабПоказатели.Количество()>0 Цикл
		
		МассивОбработанных=Новый Массив;
		
		Для Каждого Показатель ИЗ ТабПоказатели Цикл
			
			ЕстьВычисляемыеПозже=Ложь;
			
			Для Каждого Код ИЗ Показатель.СписокИспользуемых Цикл
				
				Если ПустаяСтрока(Код.Значение) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если Показатели.Найти(Код.Значение,"Код")=Неопределено Тогда
					
					// В формуле расчета есть показатели, которые на данном шаге вычислений
					// еще не определены
					
					ЕстьВычисляемыеПозже=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ (ЕстьВычисляемыеПозже И Показатель.СписокИспользуемых.Количество()>0) Тогда
				
				СтрПоказатель=Показатели.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрПоказатель,Показатель,,"Код");
				
				СтрПоказатель.Код=Показатель.СокрКод;
				СтрПоказатель.Порядок=Уровень;
				СтрПоказатель.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение;
				
				МассивОбработанных.Добавить(Показатель);
				
				Уровень=Уровень+1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Обработанный ИЗ МассивОбработанных Цикл  // Удаляем уже упорядоченные показатели
			
			ТабПоказатели.Удалить(Обработанный);
			
		КонецЦикла;
		
		Если МассивОбработанных.Количество()=0 И ТабПоказатели.Количество()>0 Тогда
			
			// Невозможно развязать формулу, возможны циклические ссылки
			
			ЕстьОшибки=ПроверитьОперандыФормулРасчета(ТабПоказатели,ТабПоказателиПроверка,ТабКонечные);
			
			Возврат Неопределено;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Показатели.Сортировать("Порядок");
	
	Возврат Показатели;
		
КонецФункции // ПолучитьПорядокКорректировкиПоказателей()

Функция ПолучитьМассивСлужебныхСимволов()
	
	// Инициируем массив специальных символов
	
	МассивСлужебныхСимволов=Новый Массив;
	МассивСлужебныхСимволов.Добавить("+");
	МассивСлужебныхСимволов.Добавить("-");
	МассивСлужебныхСимволов.Добавить("*");
	МассивСлужебныхСимволов.Добавить("/");
	МассивСлужебныхСимволов.Добавить("=");
	МассивСлужебныхСимволов.Добавить(";");
	МассивСлужебныхСимволов.Добавить(" ");
	МассивСлужебныхСимволов.Добавить("(");
	МассивСлужебныхСимволов.Добавить(")");
	МассивСлужебныхСимволов.Добавить(Символы.ВК);
	МассивСлужебныхСимволов.Добавить(Символы.ВТаб);
	МассивСлужебныхСимволов.Добавить(Символы.НПП);
	МассивСлужебныхСимволов.Добавить(Символы.ПС);
	МассивСлужебныхСимволов.Добавить(Символы.ПФ);
	МассивСлужебныхСимволов.Добавить(Символы.Таб);
	
	Возврат МассивСлужебныхСимволов;
	
КонецФункции // ПолучитьМассивСлужебныхСимволов()

Процедура ПодготовитьСтрокуОтбора(СтрокаОтбора,СпособПолучения,ВерсияПлатформы) Экспорт
	
	Если СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ СпособПолучения	= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		ПодготовитьСтрокуОтбораВИБ(СтрокаОтбора,ВерсияПлатформы);
			
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСтрокуОтбора()

Процедура ПодготовитьСтрокуОтбораВИБ(СтрокаОтбора,ВерсияПлатформы) Экспорт
			
	// Используются фиксированные значения параметров.
	Если СтрокаОтбора.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СтрокаОтбора.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СтрокаОтбора.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СтрокаОтбора.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
		ИЛИ СтрокаОтбора.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СтрокаОтбора.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда 
		
		// Уточнение параметра не задано. Для 7.7 не обрабатываем пустое значение.
		Если ПустаяСтрока(СтрокаОтбора.УточнениеСпособаОпределения) И ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
			Возврат;
		КонецЕсли;			
		
		Если ПустаяСтрока(СтрокаОтбора.НастройкаСоответствия) И (НЕ Лев(СтрокаОтбора.ТаблицаАналитикиВИБ,7)="Простой") Тогда
			
			ИспользуетсяПеречисление = СтрНайти(СтрокаОтбора.ТаблицаАналитикиВИБ,"Перечисление.")>0;
			
			СтруктураОтбора = Новый Структура("_Справочник",СтрокаОтбора.ТаблицаАналитикиВИБ);
			МассивЭлементаОтбора = Новый Массив;
			СтруктураОтбора.Вставить("МассивОтбора", МассивЭлементаОтбора);
			
			СписокЗначений    = СтрокаОтбора.УточнениеСпособаОпределения;
			
			Если ЗначениеЗаполнено(СписокЗначений) Тогда
				
				КоличествоЗаписей = СписокЗначений.Количество();
				
				Если КоличествоЗаписей > 0 Тогда
					
					Если КоличествоЗаписей = 1 Тогда
						
						Если ИспользуетсяПеречисление Тогда
							МассивЭлементаОтбора.Добавить(Новый Структура("Ссылка", "ЗНАЧЕНИЕ(" + СписокЗначений[0].Значение + ")"));
							//МассивЭлементаОтбора.Добавить(Новый Структура("Enums", СписокЗначений[0].Значение));
						Иначе
							
							Если НЕ СписокЗначений[0].Пометка Тогда
								
								МассивЭлементаОтбора.Добавить(Новый Структура("Наименование", СписокЗначений[0].Представление));
								
							Иначе
								
								ОтборТек=Новый Структура;
								ОтборТек.Вставить("Код",СписокЗначений[0].Значение);
								ОтборТек.Вставить("Наименование",СписокЗначений[0].Представление);
								
								МассивЭлементаОтбора.Добавить(ОтборТек);
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						Для Каждого Элемент Из СписокЗначений Цикл
							Если ИспользуетсяПеречисление Тогда
								МассивЭлементаОтбора.Добавить(Новый Структура("Ссылка", "ЗНАЧЕНИЕ(" + Элемент.Значение + ")"));
								//МассивЭлементаОтбора.Добавить(Новый Структура("Enums", Элемент.Значение));
							Иначе
								
								Если НЕ Элемент.Пометка  Тогда
									МассивЭлементаОтбора.Добавить(Новый Структура("Наименование", Элемент.Представление));
								Иначе
									
									ОтборТек=Новый Структура;
									ОтборТек.Вставить("Код",Элемент.Значение);
									ОтборТек.Вставить("Наименование",Элемент.Представление);
									
									МассивЭлементаОтбора.Добавить(ОтборТек);
									
								КонецЕсли;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаОтбора.УточнениеСпособаОпределения = СтруктураОтбора;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаОтбора.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СтрокаОтбора.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		СписокОрганизаций=Новый СписокЗначений;
		
		
		Если ЗначениеЗаполнено(СтрокаОтбора.УточнениеСпособаОпределения) Тогда
			
			СписокОрганизаций.Добавить(СтрокаОтбора.УточнениеСпособаОпределения);
			
		Иначе
			
			СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			
		КонецЕсли;
		
		СтрокаОтбора.УточнениеСпособаОпределения = СписокОрганизаций;
		
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьТаблицуОтбораВИБ()

Процедура ЗаполнитьСтрокуТаблицыОперандов(Строка,Операнд)
	
	ЗаполнитьЗначенияСвойств(Строка,Операнд,,"ПравилаИспользованияПолейЗапроса");
	Строка.ПравилаИспользованияПолейЗапроса=Операнд.ПравилаИспользованияПолейЗапроса.Скопировать(,"Поле,Синоним,КодАналитики,СпособЗаполнения,ФиксированноеЗначение");
	
КонецПроцедуры // ЗаполнитьСтрокуТаблицыОперандов() 

// Возвращает пустую таблицу МТабПоказателиЗапросы.
Функция ИнициализироватьТаблицуМТабПоказателиЗапросы()
	РезультатФункции = Новый ТаблицаЗначений;
	ОписаниеТиповБулево = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	РезультатФункции.Колонки.Добавить("ТаблицаОперандов");
	РезультатФункции.Колонки.Добавить("ПоказательОтбор");
	РезультатФункции.Колонки.Добавить("ГруппаРаскрытияОтбор");
	РезультатФункции.Колонки.Добавить("ГруппаРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ГруппыРаскрытия"));
	РезультатФункции.Колонки.Добавить("ПравилаВычисленияПараметров");
	РезультатФункции.Колонки.Добавить("ТабПравилаИспользованияПолей");
	РезультатФункции.Колонки.Добавить("ТекстЗапроса");
	РезультатФункции.Колонки.Добавить("РегистрБД");
	РезультатФункции.Колонки.Добавить("ТаблицаADO");
	РезультатФункции.Колонки.Добавить("ТипБД");
	РезультатФункции.Колонки.Добавить("ПланСчетов");
	РезультатФункции.Колонки.Добавить("СпособПолучения");
	РезультатФункции.Колонки.Добавить("ТолькоАналитическиеЗначения", ОписаниеТиповБулево);
	РезультатФункции.Колонки.Добавить("ПроизвольныйЗапрос", ОписаниеТиповБулево);
	РезультатФункции.Колонки.Добавить("ПоказательТекущегоОтчета", ОписаниеТиповБулево);
	РезультатФункции.Колонки.Добавить("СтруктураПараметров");
	РезультатФункции.Колонки.Добавить("СтруктураЗапроса");
	РезультатФункции.Колонки.Добавить("ВалютнаяСумма", ОписаниеТиповБулево);
	РезультатФункции.Колонки.Добавить("АналитикВидаОтчета", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	Возврат РезультатФункции;
КонецФункции

// Возвращает пустую таблицу ШаблонТаблицыПараметров.
Функция ИнициализироватьТаблицуШаблонТаблицыПараметров() Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	мОписаниеТиповСтрока=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255);
	РезультатФункции.Колонки.Добавить("ПолеБД", мОписаниеТиповСтрока);
	РезультатФункции.Колонки.Добавить("НаименованиеБД", мОписаниеТиповСтрока);
	РезультатФункции.Колонки.Добавить("ИмяПараметра", мОписаниеТиповСтрока);
	РезультатФункции.Колонки.Добавить("ТипРасчета", мОписаниеТиповСтрока);
	РезультатФункции.Колонки.Добавить("СпособВычисленияПараметра");
	РезультатФункции.Колонки.Добавить("УточнениеСпособаОпределения");
	РезультатФункции.Колонки.Добавить("ЗначениеДляПроверки");
	РезультатФункции.Колонки.Добавить("ТекстМодуля");
	РезультатФункции.Колонки.Добавить("НастройкаСоответствия");
	РезультатФункции.Колонки.Добавить("ТаблицаАналитикиВИБ");
	РезультатФункции.Колонки.Добавить("ИдентификаторСтроки");
	РезультатФункции.Колонки.Добавить("ИдентификаторРодителя");
	Возврат РезультатФункции;
КонецФункции

// Возвращает пустую таблицу ДанныеОперандовДляРасчета.
Функция ИнициализироватьТаблицуДанныеОперандовДляРасчета()
	РезультатФункции = Новый ТаблицаЗначений;
	ОписаниеТиповБулево = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	ОписаниеТиповТЗ = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ();
	РезультатФункции.Колонки.Добавить("Код");
	РезультатФункции.Колонки.Добавить("Ссылка");
	РезультатФункции.Колонки.Добавить("ТипЗначения");
	РезультатФункции.Колонки.Добавить("Показатель");
	РезультатФункции.Колонки.Добавить("ПоказательТекущегоОтчета", ОписаниеТиповБулево);
	РезультатФункции.Колонки.Добавить("ТаблицаАналитик", ОписаниеТиповТЗ);	
	РезультатФункции.Колонки.Добавить("ПравилаВычисленияПараметровЗапроса", ОписаниеТиповТЗ);
	РезультатФункции.Колонки.Добавить("ПравилаИспользованияПолейЗапроса", ОписаниеТиповТЗ);
	РезультатФункции.Колонки.Добавить("ПоказательОтбор");
	РезультатФункции.Колонки.Добавить("ЕстьДополненияАналитик", ОписаниеТиповБулево);	
	Возврат РезультатФункции;
КонецФункции

// Возвращает пустую таблицу ШаблонТаблицыКолонок.
Функция ИнициализироватьТаблицуШаблонТаблицыКолонок()
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("КодАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	РезультатФункции.Колонки.Добавить("ЗаполнениеПоДругимИсточникам", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Возврат РезультатФункции;
КонецФункции

// Заполняет таблицу параметров ТабПараметры по данным операнда ОперандВход.
Процедура ЗаполнитьТабПараметрыПоОперанду(ОперандВход, ТабПараметры) Экспорт
	// Получение данных из реквизитов операнда.
	СпособПолученияОперанда = ОперандВход.СпособПолучения;
	ВерсияПлатформыОперанда = ОперандВход.ВерсияПлатформы;
	УточнениеСпособовОпределенияОперанда = ОперандВход.УточненияСпособовОпределения;
	
	// Обход табличной части ТаблицаПараметровОтбораБД операнда.
	Для Каждого СтрПараметр ИЗ ОперандВход.ТаблицаПараметровОтбораБД Цикл
		
		ТекПолеБД = СтрПараметр.ПолеБД;
		ТекИмяПараметра = СтрПараметр.ИмяПараметра;
		
		НоваяСтрока = ТабПараметры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрПараметр);
		НовоеУточнениеСпособа = ПолучитьУточнениеСпособаОпределения(ТекПолеБД, ТекИмяПараметра, УточнениеСпособовОпределенияОперанда);
		НоваяСтрока.УточнениеСпособаОпределения = НовоеУточнениеСпособа;	
		ПодготовитьСтрокуОтбора(НоваяСтрока, СпособПолученияОперанда, ВерсияПлатформыОперанда);
		
	КонецЦикла;
КонецПроцедуры 

Функция ПолучитьПараметрыОтбораПоШаблону(ИсточникШаблон) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	            |	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	            |		ПолеБД КАК ПолеБД,
	            |		ИмяПараметра КАК ИмяПараметра,
	            |		НаименованиеБД КАК НаименованиеБД,
	            |		СпособВычисленияПараметра КАК СпособВычисленияПараметра,
	            |		ЗначениеДляПроверки КАК ЗначениеДляПроверки,
	            |		ТипРасчета КАК ТипРасчета,
	            |		НастройкаСоответствия КАК НастройкаСоответствия,
	            |		ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	            |		ИдентификаторСтроки КАК ИдентификаторСтроки,
	            |		ИдентификаторРодителя КАК ИдентификаторРодителя,
	            |		ТекстМодуля КАК ТекстМодуля
	            |	) КАК ТаблицаПараметровОтбораБД,
	            |	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	            |		ПолеБД КАК ПолеБД,
	            |		ИмяПараметра КАК ИмяПараметра,
	            |		Значение КАК Значение,
	            |		Представление КАК Представление,
	            |		Пометка КАК Пометка,
	            |		Тип КАК Тип
	            |	) КАК УточненияСпособовОпределения,
	            |	ИсточникиДанныхДляРасчетов.ТекстОтбора КАК ТекстОтбора
	            |ИЗ
	            |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	            |ГДЕ
	            |	ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникШаблон";
	
	Запрос.УстановитьПараметр("ИсточникШаблон",ИсточникШаблон);

	ДанныеШаблона=Запрос.Выполнить().Выгрузить()[0];
	
	ПреобразоватьДанныеОтбора(ДанныеШаблона.ТекстОтбора,
						ДанныеШаблона.ТаблицаПараметровОтбораБД,
						ДанныеШаблона.УточненияСпособовОпределения,"Ш");
						
	Возврат ДанныеШаблона;					
	
КонецФункции // ПолучитьПараметрыОтбораПоШаблону()

Процедура ПреобразоватьДанныеОтбора(ТекстОтбора,ТаблицаПараметровОтбораБД,УточненияСпособовОпределения,Постфикс) Экспорт

	Для Каждого Строка ИЗ ТаблицаПараметровОтбораБД Цикл
		
		ИмяПараметраНов=Строка.ИмяПараметра+"_"+Постфикс;
		ТекстОтбора=СтрЗаменить(ТекстОтбора,"&"+Строка.ИмяПараметра,"&"+ИмяПараметраНов);
		
		МассивУточнение=УточненияСпособовОпределения.НайтиСтроки(Новый Структура("ИмяПараметра",Строка.ИмяПараметра));
		
		Для Каждого СтрУточнение ИЗ МассивУточнение Цикл
			
			СтрУточнение.ИмяПараметра=ИмяПараметраНов;
			
		КонецЦикла; 
		
		Строка.ИмяПараметра=ИмяПараметраНов;
		
	КонецЦикла;
			
	
	
КонецПроцедуры // ПреобразоватьДанныеОтбора()

Функция ПодготовитьОперандыДляПолученияДанных(мОперанды,
										СравниватьТаблицыПараметров=Истина,
										ИсточникДанных=Неопределено,
										СпособИспользования=Неопределено,
										ДополнительныйОтбор=Неопределено,
										ГруппироватьОперанды=Истина,
										РазделятьПоПоказателям=Ложь)Экспорт
											
	// Сгруппируем операнды, обращающиеся к внутренним данным, по одинаковым таблицам
	// вычисления параметров отбора и сопоставления аналитик, чтобы минимизировать количество запросов к
	// базе данных.
		
	мСоответствиеОперандовИПоказателейОтбора = Новый Соответствие;
	
	ЕстьОбращениеКВИБ = Ложь;
	
	СтруктураПропускаемыхЗначенийРБ = Новый Структура("Синоним", "Значение");
	СтруктураПоискаРБ = Новый Структура("Поле,Синоним,КодАналитики");
	
	ШаблонТаблицыОперандов = мОперанды.СкопироватьКолонки("Код,Ссылка,Показатель,ТипЗначения,Счет,КоррСчет,Наименование,ПравилаИспользованияПолейЗапроса,Ресурс,АналитикВидаОтчета,ПоказательОтбор,ТолькоАналитическиеЗначения,ЧислоАналитикГруппыРаскрытия,ВидИтогаПоказателя,ТипЗначенияПоказателя");
	
	// Инициализация таблиц для расчета.
	мТабПоказателиЗапросы = ИнициализироватьТаблицуМТабПоказателиЗапросы();
	ШаблонТаблицыПараметров = ИнициализироватьТаблицуШаблонТаблицыПараметров();
	ДанныеОперандовДляРасчета = ИнициализироватьТаблицуДанныеОперандовДляРасчета();
	ШаблонТаблицыКолонок = ИнициализироватьТаблицуШаблонТаблицыКолонок();
	
	Для Каждого Операнд ИЗ мОперанды Цикл
		
		мСоответствиеОперандовИПоказателейОтбора.Вставить(Операнд.Код,Операнд.ПоказательОтбор);

		ВалютнаяСумма = (Операнд.ПоказательПересчитыватьВалютнуюСумму И Операнд.ПоказательОтборПересчитыватьВалютнуюСумму);
		
		// Подготовим рабочую таблицу параметров.
		ТабПараметры = ШаблонТаблицыПараметров.СкопироватьКолонки();
		
		//Если ЗначениеЗаполнено(Операнд.ИсточникШаблон) Тогда
		//	
		//	ДанныеШаблона=ПолучитьПараметрыОтбораПоШаблону(Операнд.ИсточникШаблон);
		//	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ДанныеШаблона.ТаблицаПараметровОтбораБД,Операнд.ТаблицаПараметровОтбораБД);
		//	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ДанныеШаблона.УточненияСпособовОпределения,Операнд.УточненияСпособовОпределения);
		//				
		//КонецЕсли;
	
		ЗаполнитьТабПараметрыПоОперанду(Операнд, ТабПараметры);
		
		Операнд.ПравилаВычисленияПараметровЗапроса = ТабПараметры;
		
		НоваяСтрока = ДанныеОперандовДляРасчета.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Операнд,,"ПравилаВычисленияПараметровЗапроса,ПравилаИспользованияПолейЗапроса,ПоказательОтбор");
		
		ТаблицаАналитик=ШаблонТаблицыКолонок.СкопироватьКолонки();
		
		ЕстьЗаполнениеАналитик=Ложь;
		
		Для Каждого СтрПоле ИЗ Операнд.ПравилаИспользованияПолейЗапроса Цикл
			
			Если СтрНайти(СтрПоле.КодАналитики,"Аналитика")=0 Тогда
				
				Продолжить;
				
			КонецЕсли;
											
			ЕстьЗаполнениеАналитик=Истина;
							
			СтрАналитика=ТаблицаАналитик.Добавить();
			СтрАналитика.КодАналитики=СтрПоле.КодАналитики;
			
			Если СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных Тогда
				
				СтрАналитика.ЗаполнениеПоДругимИсточникам=Истина;
				НоваяСтрока.ЕстьДополненияАналитик=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьЗаполнениеАналитик Тогда
			
			ТаблицаАналитик.Очистить();
			
		КонецЕсли;
		
		НоваяСтрока.ТаблицаАналитик=ТаблицаАналитик;
		
		Если Операнд.ПоказательТекущегоОтчета Тогда
			
			НоваяСтрока.ПравилаВычисленияПараметровЗапроса	= Операнд.ПравилаВычисленияПараметровЗапроса;
			НоваяСтрока.ПравилаИспользованияПолейЗапроса	= Операнд.ПравилаИспользованияПолейЗапроса;
			НоваяСтрока.ПоказательОтбор						= Операнд.ПоказательОтбор;
			
		КонецЕсли;
				
		Если (Операнд.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляПримечаний И ИсточникДанных=Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрРесурс=Операнд.ПравилаИспользованияПолейЗапроса.Найти("Значение","КодАналитики");
		
		Если Не СтрРесурс=Неопределено Тогда 
			Операнд.Ресурс=СтрРесурс.Поле;
		КонецЕсли;
				
		////////////////////////////////////////////////
				
		ЕстьАналогичныйОтбор=Ложь;
		
		// Определим последний номер аналитики отчета операнда
		
		АналитикВидаОтчета=0;
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Операнд["АналитикаОтчета"+Индекс]) Тогда
				АналитикВидаОтчета=Индекс;
			КонецЕсли;
		КонецЦикла;
		
		Операнд.АналитикВидаОтчета=АналитикВидаОтчета;
		
		Если ГруппироватьОперанды
			И Операнд.ТипЗначенияПоказателя=Перечисления.ТипыЗначенийПоказателейОтчетов.Число
			И Операнд.ПравилаИспользованияПолейЗапроса.Найти(Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки,"СпособЗаполнения")=Неопределено
			И Операнд.ПравилаИспользованияПолейЗапроса.Найти(Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение,"СпособЗаполнения")=Неопределено
			И (Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета 
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов) Тогда
			
			Для Каждого СтрокаОтбор ИЗ мТабПоказателиЗапросы Цикл 
				
				Если Операнд.СпособПолучения=СтрокаОтбор.СпособПолучения И (НЕ (РазделятьПоПоказателям И СтрокаОтбор.ТаблицаОперандов.Найти(Операнд.Показатель,"Показатель")=Неопределено)) Тогда
					
					Если Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
						
						Если ВалютнаяСумма=СтрокаОтбор.ВалютнаяСумма
							И СтрокаОтбор.ТолькоАналитическиеЗначения=Операнд.ТолькоАналитическиеЗначения
							И СтрокаОтбор.АналитикВидаОтчета=АналитикВидаОтчета Тогда
							
							Если Не СравниватьТаблицыПараметров Тогда
								
								ЕстьАналогичныйОтбор=Истина;
								
								НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
								ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
								
								Прервать;
								
							ИначеЕсли ОбщегоНазначенияУХ.СравнитьТаблицыВычисленияПараметров(ТабПараметры,СтрокаОтбор.ПравилаВычисленияПараметров) Тогда
								
								ЕстьАналогичныйОтбор=Истина;
								
								НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
								ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
								
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;
						
					ИначеЕсли Операнд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO 
						И Операнд.ТаблицаADO = СтрокаОтбор.ТаблицаADO
						И Операнд.ГруппаРаскрытия=СтрокаОтбор.ГруппаРаскрытия Тогда
						
						Если Не СравниватьТаблицыПараметров Тогда
							
							ЕстьАналогичныйОтбор=Истина;
							
							НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
							ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
							
							ЕстьАналогичноеПравило=Ложь;
							
							Для Каждого СтрокаПравило ИЗ СтрокаОтбор.ТабПравилаИспользованияПолей Цикл
								
								Если ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
									СтрокаПравило.ПравилаИспользованияПолей,Новый Структура("КодАналитики","Значение")) Тогда
									
									ЕстьАналогичноеПравило=Истина;
									СтрокаПравило.СписокКодовОперандов.Добавить(Операнд.Код);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если НЕ ЕстьАналогичноеПравило Тогда
								
								СписокКодовОперандов=Новый СписокЗначений;
								СписокКодовОперандов.Добавить(Операнд.Код);
								
								НоваяСтрока=СтрокаОтбор.ТабПравилаИспользованияПолей.Добавить();
								НоваяСтрока.СписокКодовОперандов=СписокКодовОперандов;
								НоваяСтрока.ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;
								
							КонецЕсли;
							
							Прервать;
							
						ИначеЕсли ОбщегоНазначенияУХ.СравнитьТаблицыВычисленияПараметров(ТабПараметры,СтрокаОтбор.ПравилаВычисленияПараметров) Тогда
							
							ЕстьАналогичныйОтбор=Истина;
							
							НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
							ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
							
							ЕстьАналогичноеПравило=Ложь;
							
							Для Каждого СтрокаПравило ИЗ СтрокаОтбор.ТабПравилаИспользованияПолей Цикл
								
								Если ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
									СтрокаПравило.ПравилаИспользованияПолей,Новый Структура("КодАналитики","Значение")) Тогда
									
									ЕстьАналогичноеПравило=Истина;
									СтрокаПравило.СписокКодовОперандов.Добавить(Операнд.Код);
									
									Прервать;
									
								КонецЕсли;
								
							КонецЦикла;
							
							Если НЕ ЕстьАналогичноеПравило Тогда
								
								СписокКодовОперандов=Новый СписокЗначений;
								СписокКодовОперандов.Добавить(Операнд.Код);
								
								НоваяСтрока=СтрокаОтбор.ТабПравилаИспользованияПолей.Добавить();
								НоваяСтрока.СписокКодовОперандов=СписокКодовОперандов;
								НоваяСтрока.ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;
								
							КонецЕсли;
							
							Прервать;
							
						КонецЕсли;
						
					ИначеЕсли Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
						
						Если Операнд.ПланСчетов=СтрокаОтбор.ПланСчетов И СтрНайти(Операнд.ТекстЗапросаМодуля,"КорДО")=0 Тогда // Корреспондирующие обороты обрабатываются отдельно
							
							Если (Не СравниватьТаблицыПараметров) И ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
								СтрокаОтбор.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей,
								Новый Структура("Синоним","Значение"))Тогда
								
								ЕстьАналогичныйОтбор=Истина;
								
								НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();									
								ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
								
								СтрокаОтбор.ТабПравилаИспользованияПолей[0].СписокКодовОперандов.Добавить(Операнд.Код);
								
								Прервать;
								
							ИначеЕсли ОбщегоНазначенияУХ.СравнитьТаблицыВычисленияПараметров(ТабПараметры,СтрокаОтбор.ПравилаВычисленияПараметров)
								И ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
								СтрокаОтбор.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей,
								Новый Структура("Синоним","Значение")) Тогда
								
								ЕстьАналогичныйОтбор=Истина;
								
								НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
								ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
								
								СтрокаОтбор.ТабПравилаИспользованияПолей[0].СписокКодовОперандов.Добавить(Операнд.Код);
								
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;	
						
					Иначе 
						
						Если Операнд.ТекстЗапросаМодуля=СтрокаОтбор.ТекстЗапроса
							И (НЕ ((Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии 
							ИЛИ Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии) И Операнд.ВидИтога="Оборот")) Тогда
							
							Если (Не СравниватьТаблицыПараметров) И ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
								СтрокаОтбор.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей,
								СтруктураПропускаемыхЗначенийРБ,СтруктураПоискаРБ)Тогда
								
								ЕстьАналогичныйОтбор=Истина;
								
								НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
								ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
								
								Если Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
									ИЛИ Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда 
									
									ЕстьАналогичноеПравило=Ложь;
									
									Для Каждого СтрокаПравило ИЗ СтрокаОтбор.ТабПравилаИспользованияПолей Цикл
										
										Если ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
											СтрокаПравило.ПравилаИспользованияПолей,
											Новый Структура("КодАналитики","Значение")) Тогда
											
											ЕстьАналогичноеПравило=Истина;
											СтрокаПравило.СписокКодовОперандов.Добавить(Операнд.Код);
											
											Прервать;
											
										КонецЕсли;
										
									КонецЦикла;
									
									Если НЕ ЕстьАналогичноеПравило Тогда
										
										СписокКодовОперандов=Новый СписокЗначений;
										СписокКодовОперандов.Добавить(Операнд.Код);
										
										НоваяСтрока=СтрокаОтбор.ТабПравилаИспользованияПолей.Добавить();
										НоваяСтрока.СписокКодовОперандов=СписокКодовОперандов;
										НоваяСтрока.ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;
										
									КонецЕсли;
									
								КонецЕсли;
								
								Прервать;
								
							ИначеЕсли ОбщегоНазначенияУХ.СравнитьТаблицыВычисленияПараметров(ТабПараметры,СтрокаОтбор.ПравилаВычисленияПараметров)
								И ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
								СтрокаОтбор.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей,
								СтруктураПропускаемыхЗначенийРБ,СтруктураПоискаРБ) Тогда
								
								ЕстьАналогичныйОтбор=Истина;
								
								НоваяСтрока=СтрокаОтбор.ТаблицаОперандов.Добавить();
								ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
								
								Если Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
									ИЛИ Операнд.СпособПолучения= Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда 
									
									ЕстьАналогичноеПравило=Ложь;
									
									Для Каждого СтрокаПравило ИЗ СтрокаОтбор.ТабПравилаИспользованияПолей Цикл
										
										Если ОбщегоНазначенияУХ.СравнитьТаблицыЗначений(Операнд.ПравилаИспользованияПолейЗапроса, 
											СтрокаПравило.ПравилаИспользованияПолей) Тогда
											
											ЕстьАналогичноеПравило=Истина;
											СтрокаПравило.СписокКодовОперандов.Добавить(Операнд.Код);
											
											Прервать;
											
										КонецЕсли;
										
									КонецЦикла;
									
									Если НЕ ЕстьАналогичноеПравило Тогда
										
										СписокКодовОперандов=Новый СписокЗначений;
										СписокКодовОперандов.Добавить(Операнд.Код);
										
										НоваяСтрока=СтрокаОтбор.ТабПравилаИспользованияПолей.Добавить();
										НоваяСтрока.СписокКодовОперандов=СписокКодовОперандов;
										НоваяСтрока.ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;
										
									КонецЕсли;
									
								КонецЕсли;
								
								Прервать;
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если НЕ ЕстьАналогичныйОтбор Тогда
			
			НовыйОтбор=мТабПоказателиЗапросы.Добавить();
			
			ТекТаблицаОперандов=ШаблонТаблицыОперандов.СкопироватьКолонки();
			
			НоваяСтрока=ТекТаблицаОперандов.Добавить();
			ЗаполнитьСтрокуТаблицыОперандов(НоваяСтрока,Операнд);
							
			Если Операнд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда
				
				ДанныеЗапроса=Новый Структура;
				ДанныеЗапроса.Вставить("СтрОперанд",Операнд);
				СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
				НовыйОтбор.ТекстЗапроса=СтруктураЗапроса.ТекстЗапроса;
				
			Иначе
				
				НовыйОтбор.ТекстЗапроса=Операнд.ТекстЗапросаМодуля;
					
			КонецЕсли;
			
			НовыйОтбор.ТаблицаОперандов				= ТекТаблицаОперандов;
			НовыйОтбор.ПравилаВычисленияПараметров	= ТабПараметры;
			НовыйОтбор.ВалютнаяСумма				= ВалютнаяСумма;
			НовыйОтбор.АналитикВидаОтчета           = АналитикВидаОтчета;
			
			Если Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПараметрическаяНастройка
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов 
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
				ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
				
				ТабПравилаИспользованияПолей=Новый ТаблицаЗначений;
				ТабПравилаИспользованияПолей.Колонки.Добавить("СписокКодовОперандов");
				ТабПравилаИспользованияПолей.Колонки.Добавить("ПравилаИспользованияПолей");
				
				СписокКодовОперандов=Новый СписокЗначений;
				СписокКодовОперандов.Добавить(Операнд.Код);
				
				НоваяСтрока=ТабПравилаИспользованияПолей.Добавить();
				НоваяСтрока.СписокКодовОперандов=СписокКодовОперандов;
				НоваяСтрока.ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;
				
				НовыйОтбор.ТабПравилаИспользованияПолей=ТабПравилаИспользованияПолей;
				
			КонецЕсли;
			
			НовыйОтбор.СпособПолучения=Операнд.СпособПолучения;
			НовыйОтбор.РегистрБД=Операнд.РегистрБД;
			НовыйОтбор.ПоказательТекущегоОтчета=Операнд.ПоказательТекущегоОтчета;
			НовыйОтбор.ПоказательОтбор=Операнд.ПоказательОтбор;
			НовыйОтбор.ГруппаРаскрытияОтбор=Операнд.ГруппаРаскрытияОтбор;
			НовыйОтбор.ПланСчетов=Операнд.ПланСчетов;
			НовыйОтбор.ТаблицаADO=Операнд.ТаблицаADO;
			НовыйОтбор.ГруппаРаскрытия=Операнд.ГруппаРаскрытия;
			
			Если Операнд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
				
				НовыйОтбор.ПроизвольныйЗапрос=Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПараметрическаяНастройка
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов 
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
			ИЛИ Операнд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
			
			ЕстьОбращениеКВИБ=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////////////////
	// Подготовим настройки построителя для выборки данных по показателям отчетов
	
	МассивОтбор=мТабПоказателиЗапросы.НайтиСтроки(Новый Структура("СпособПолучения",Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета));
	
	ДанныеДляЗапроса=Новый ТаблицаЗначений;
	ДанныеДляЗапроса.Колонки.Добавить("ИмяТаблицы");
	ДанныеДляЗапроса.Колонки.Добавить("СписокПоказателей");
	ДанныеДляЗапроса.Колонки.Добавить("ДанныеПоВалютам",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ДанныеДляЗапроса.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
	Для Каждого СтрЗапрос ИЗ МассивОтбор Цикл
		
		// Получим максимальный номер аналитики, по которой производится отбор (если есть)
		
		АналитикОтбора=0;
		МассивКлючевыхРеквизитов=Новый Массив;
		СтруктураПроизводныхАналитик=Новый Структура;
		ЕстьОтборПоВалюте=Ложь;
			
		Для Каждого СтрПравило ИЗ СтрЗапрос.ПравилаВычисленияПараметров Цикл
			
			Если (СтрПравило.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется
				ИЛИ СтрНайти(СтрПравило.ПолеБД,"Аналитика")=0) Тогда
				Продолжить;
			КонецЕсли;

			Если СтрПравило.ПолеБД="АналитикаВалюта" Тогда
				
				ЕстьОтборПоВалюте=Истина;
				
			Иначе
					
				НомерАналитики=Число(Лев(СтрЗаменить(СтрПравило.ПолеБД,"Аналитика",""),1));
				
				Если НомерАналитики<=СтрЗапрос.АналитикВидаОтчета Тогда
					
					Продолжить;
						
				ИначеЕсли НомерАналитики>АналитикОтбора Тогда
					
					АналитикОтбора=НомерАналитики;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ДанныеДляЗапроса.Очистить();
		ЧислоПолейАналитикиДляОбъединения=ПараметрыСеанса.ЧислоДопАналитик;
		
		// Определим данные, необходимые для построения запроса
				
		Для Каждого СтрОперанд ИЗ СтрЗапрос.ТаблицаОперандов Цикл
			
			ИтоговоеЗначение=Истина;
			ОтборПоАналитике=Ложь;
			ПерекладкаРеквизитов=Новый Структура;
			
			Если СтрОперанд.ТолькоАналитическиеЗначения ИЛИ АналитикОтбора>СтрОперанд.АналитикВидаОтчета Тогда 
				
				ИмяТаблицыСинтетики="ЗначенияПоказателейОтчетов"+(СтрОперанд.АналитикВидаОтчета+СтрОперанд.ЧислоАналитикГруппыРаскрытия);
				ОтборПоАналитике=Истина;
				ВыводитьСинтетику=Ложь;
				ИтоговоеЗначение=Ложь;

			Иначе	
				
				Если СтрОперанд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					
					ИмяТаблицыСинтетики=?(СтрОперанд.АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+СтрОперанд.АналитикВидаОтчета);
					
				Иначе
					
					ИмяТаблицыСинтетики="ЗначенияПоказателейОтчетовНечисловые";
					
				КонецЕсли;
				
				ВыводитьСинтетику=Истина;
									
			КонецЕсли;
			
			// Определим таблицу для получения аналитических данных
			
			ЧислоПолейАналитики=0;
			ЕстьАналитикаВалюты=Ложь;
			ЕстьАналитикаВидОтчета=Ложь;
			ЕстьАналитикаПоказателя=Ложь;
			
			Для Каждого СтрПоле ИЗ СтрОперанд.ПравилаИспользованияПолейЗапроса Цикл
				
				Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле)
					ИЛИ СтрПоле.КодАналитики="Значение" Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				Если СтрНайти(СтрПоле.Поле,"АналитикаВалюта")>0 Тогда
					
					ЕстьАналитикаВалюты=Истина;
					ЕстьАналитикаПоказателя=Истина;
					
					Если СтрНайти(СтрПоле.Поле,".")>0 Тогда
						
						Если НЕ СтруктураПроизводныхАналитик.Свойство("АналитикаВалюта") Тогда
							
							СтруктураПроизводныхАналитик.Вставить("АналитикаВалюта",Новый Массив);
							
						КонецЕсли;
						
						Если СтруктураПроизводныхАналитик["АналитикаВалюта"].Найти(СтрПоле.Поле)=Неопределено Тогда 
							
							СтруктураПроизводныхАналитик["АналитикаВалюта"].Добавить(СтрПоле.Поле);
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли СтрНайти(СтрПоле.Поле,"Аналитика")>0 Тогда
					
					НомерАналитики=Число(Лев(СтрЗаменить(СтрПоле.Поле,"Аналитика",""),1));
					
					Если НомерАналитики<=СтрЗапрос.АналитикВидаОтчета Тогда
						
						ЕстьАналитикаВидОтчета=Истина;
						
					Иначе
						
						ЕстьАналитикаПоказателя=Истина;
						
					КонецЕсли;
					
					Если НомерАналитики>ЧислоПолейАналитики Тогда
						
						ЧислоПолейАналитики=НомерАналитики;
						
					КонецЕсли;
					
					Если СтрНайти(СтрПоле.Поле,".")>0 Тогда
						
						Если НЕ СтруктураПроизводныхАналитик.Свойство("Аналитика"+НомерАналитики) Тогда
							
							СтруктураПроизводныхАналитик.Вставить("Аналитика"+НомерАналитики,Новый Массив);
							
						КонецЕсли;
						
						Если СтруктураПроизводныхАналитик["Аналитика"+НомерАналитики].Найти(СтрПоле.Поле)=Неопределено Тогда 
							
							СтруктураПроизводныхАналитик["Аналитика"+НомерАналитики].Добавить(СтрПоле.Поле);
							
						КонецЕсли;
						
					КонецЕсли;
			
				ИначеЕсли СтрНайти(СтрПоле.Поле,"Организация") > 0
					ИЛИ СтрНайти(СтрПоле.Поле,"ПериодОтчета") > 0
					ИЛИ СтрНайти(СтрПоле.Поле,"Сценарий") > 0
					ИЛИ СтрНайти(СтрПоле.Поле,"Валюта") > 0
					ИЛИ СтрНайти(СтрПоле.Поле,"Проект") > 0

					И (НЕ (СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки ИЛИ СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение)) Тогда
					
					ИтоговоеЗначение=Ложь;
					
					Если МассивКлючевыхРеквизитов.Найти(СтрПоле.Поле)=Неопределено Тогда
						
						МассивКлючевыхРеквизитов.Добавить(СтрПоле.Поле);
						
					КонецЕсли;
					
				КонецЕсли;

			КонецЦикла;
			
			Если (НЕ ИтоговоеЗначение) И ЕстьАналитикаПоказателя Тогда
				
				ВыводитьСинтетику=Ложь;
				
			КонецЕсли;
			
			Если ВыводитьСинтетику Тогда
				
				МассивТаблица=ДанныеДляЗапроса.НайтиСтроки(Новый Структура("ИмяТаблицы,ИтоговоеЗначение",ИмяТаблицыСинтетики,ИтоговоеЗначение));
				
				Если МассивТаблица.Количество()=0 Тогда
					
					НоваяСтрока=ДанныеДляЗапроса.Добавить();
					НоваяСтрока.ИмяТаблицы		=ИмяТаблицыСинтетики;
					НоваяСтрока.ИтоговоеЗначение=ИтоговоеЗначение;
					
					СписокПоказателей=Новый СписокЗначений;
					СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
					
					НоваяСтрока.СписокПоказателей=СписокПоказателей;
					
				Иначе
					
					МассивТаблица[0].СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
					
				КонецЕсли;
				
			КонецЕсли;
			
			ЧислоПолейАналитики=СтрОперанд.АналитикВидаОтчета+?(ЕстьАналитикаПоказателя И ЗначениеЗаполнено(СтрОперанд.ПоказательОтбор.ГруппаРаскрытия),СтрОперанд.ПоказательОтбор.ГруппаРаскрытия.ЧислоАналитик,0);

			Если ЧислоПолейАналитики=0 Тогда
				
				Если ЕстьАналитикаВалюты Тогда
					
					МассивТаблица=ДанныеДляЗапроса.НайтиСтроки(Новый Структура("ИмяТаблицы,ИтоговоеЗначение","ЗначенияПоказателейОтчетовВалютные",Ложь));
					
					Если МассивТаблица.Количество()=0 Тогда
						
						НоваяСтрока=ДанныеДляЗапроса.Добавить();
						НоваяСтрока.ИмяТаблицы="ЗначенияПоказателейОтчетовВалютные";
						НоваяСтрока.ИтоговоеЗначение=Ложь;
						НоваяСтрока.ДанныеПоВалютам=Истина;
						
						СписокПоказателей=Новый СписокЗначений;
						СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
						НоваяСтрока.СписокПоказателей=СписокПоказателей;
						
					Иначе
						
						МассивТаблица[0].СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
					КонецЕсли;
					
				ИначеЕсли ОтборПоАналитике Тогда
					
					МассивТаблица=ДанныеДляЗапроса.НайтиСтроки(Новый Структура("ИмяТаблицы,ИтоговоеЗначение",ИмяТаблицыСинтетики,Ложь));
					
					Если МассивТаблица.Количество()=0 Тогда
						
						НоваяСтрока=ДанныеДляЗапроса.Добавить();
						НоваяСтрока.ИмяТаблицы=ИмяТаблицыСинтетики;
						НоваяСтрока.ИтоговоеЗначение=Ложь;
						
						СписокПоказателей=Новый СписокЗначений;
						СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
						НоваяСтрока.СписокПоказателей=СписокПоказателей;
						
					Иначе
						
						МассивТаблица[0].СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ЧислоПолейАналитики<=СтрОперанд.АналитикВидаОтчета Тогда
				
				Если ЕстьАналитикаВидОтчета Тогда
					
					МассивТаблица=ДанныеДляЗапроса.НайтиСтроки(Новый Структура("ИмяТаблицы,ИтоговоеЗначение",ИмяТаблицыСинтетики,Ложь));

					Если МассивТаблица.Количество()=0 Тогда
						
						НоваяСтрока=ДанныеДляЗапроса.Добавить();
						НоваяСтрока.ИмяТаблицы=ИмяТаблицыСинтетики;
						НоваяСтрока.ИтоговоеЗначение=Ложь;
						
						СписокПоказателей=Новый СписокЗначений;
						СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
						НоваяСтрока.СписокПоказателей=СписокПоказателей;
						
					Иначе
						
						МассивТаблица[0].СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
					КонецЕсли;
				
				КонецЕсли;
				
			Иначе
				
				Если ИтоговоеЗначение Тогда
					
					МассивТаблица=ДанныеДляЗапроса.НайтиСтроки(Новый Структура("ИмяТаблицы,ИтоговоеЗначение",ИмяТаблицыСинтетики,Истина));
					
					Если МассивТаблица.Количество()=0 Тогда
						
						НоваяСтрока=ДанныеДляЗапроса.Добавить();
						НоваяСтрока.ИмяТаблицы=ИмяТаблицыСинтетики;
						НоваяСтрока.ИтоговоеЗначение=Истина;
						
						СписокПоказателей=Новый СписокЗначений;
						СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
						НоваяСтрока.СписокПоказателей=СписокПоказателей;
						
					Иначе
						
						МассивТаблица[0].СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если СтрОперанд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					
					ИмяТаблицыАналитики="ЗначенияПоказателейОтчетов"+ЧислоПолейАналитики;
					
				Иначе
					
					ИмяТаблицыАналитики="ЗначенияПоказателейОтчетовНечисловые";
					
				КонецЕсли;
				
				МассивТаблица=ДанныеДляЗапроса.НайтиСтроки(Новый Структура("ИмяТаблицы,ИтоговоеЗначение",ИмяТаблицыАналитики,Ложь));
				
				Если МассивТаблица.Количество()=0 Тогда
					
					НоваяСтрока=ДанныеДляЗапроса.Добавить();
					НоваяСтрока.ИмяТаблицы=ИмяТаблицыАналитики;
					НоваяСтрока.ИтоговоеЗначение=Ложь;
					НоваяСтрока.ДанныеПоВалютам=Истина;
					
					СписокПоказателей=Новый СписокЗначений;
					СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
					
					НоваяСтрока.СписокПоказателей=СписокПоказателей;
					
				Иначе
					
					МассивТаблица[0].СписокПоказателей.Добавить(СтрОперанд.ПоказательОтбор);
										
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстВыборки="";
		СтруктураПараметров=Новый Структура;
		
		Для Каждого СтрТаблица ИЗ ДанныеДляЗапроса Цикл
			
			ЧислоАналитикТаблицы=0;
			ТекстОтбор="";
			
			Если СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетов0" Тогда
				
				Если СтрТаблица.ДанныеПоВалютам Тогда
					
					СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетовВалютные";
					
				Иначе
					
					СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетовСинтетика";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетовНечисловые" Тогда
				
				  ЧислоАналитикТаблицы=ПараметрыСеанса.ЧислоДопАналитик;
			
			ИначеЕсли НЕ (СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетовСинтетика" 
				ИЛИ СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетовВалютные") Тогда
				
				ЧислоАналитикТаблицы=Число(Лев(СтрЗаменить(СтрТаблица.ИмяТаблицы,"ЗначенияПоказателейОтчетов",""),1));
				
			КонецЕсли;
			
			ИмяТаблицы=СтрТаблица.ИмяТаблицы+"_"+?(СтрТаблица.ИтоговоеЗначение,"Итог","Аналитика");
			
			ТекстВыборки=ТекстВыборки+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|"+ИмяТаблицы+".Показатель КАК Показатель,";
			
			ТекстГруппировки=ИмяТаблицы+".Показатель";
			
			Если СтрТаблица.ДанныеПоВалютам Тогда
				
				ТекстВыборки=ТекстВыборки+"
				|"+ИмяТаблицы+".АналитикаВалюта КАК АналитикаВалюта,";
				
				ТекстГруппировки=ТекстГруппировки+","+ИмяТаблицы+".АналитикаВалюта";
				
			Иначе
				
				ТекстВыборки=ТекстВыборки+"
				|Значение(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
				
			КонецЕсли;
				
			ТекстВыборки=ТекстВыборки+"
			|"+?(СтрТаблица.ИтоговоеЗначение,"ИСТИНА","ЛОЖЬ")+" КАК ИтогПоПоказателю,";
			
			Для Каждого СтрПоле ИЗ МассивКлючевыхРеквизитов Цикл
				
				ТекстВыборки=ТекстВыборки+"
				|"+ИмяТаблицы+"."+СтрПоле+" КАК "+СтрЗаменить(СтрПоле,".","")+",";
				
				ТекстГруппировки=ТекстГруппировки+",
				|"+ИмяТаблицы+"."+СтрПоле;
				
			КонецЦикла;
			
			Для Индекс=1 ПО ЧислоПолейАналитикиДляОбъединения Цикл
				
				ТекстВыборки=ТекстВыборки+"
				|"+?(ЧислоАналитикТаблицы>=Индекс,ИмяТаблицы+".Аналитика"+Индекс,"НЕОПРЕДЕЛЕНО")+" КАК Аналитика"+Индекс+",";
				
				Если ЧислоАналитикТаблицы>=Индекс Тогда
					ТекстГруппировки=ТекстГруппировки+",
					|"+ИмяТаблицы+".Аналитика"+Индекс;
				КонецЕсли;
				
				Если СтруктураПроизводныхАналитик.Свойство("Аналитика"+Индекс) Тогда
					
					Для Каждого СтрПоле ИЗ СтруктураПроизводныхАналитик["Аналитика"+Индекс] Цикл
						
						Если ЧислоАналитикТаблицы>=Индекс Тогда
							
							ТекстВыборки=ТекстВыборки+"
							|"+СтрПоле+" КАК "+СтрЗаменить(СтрПоле,".","")+",";
							
							ТекстГруппировки=ТекстГруппировки+",
							|"+ИмяТаблицы+"."+СтрПоле;
							
						Иначе
							
							ТекстВыборки=ТекстВыборки+"
							|НЕОПРЕДЕЛЕНО КАК "+СтрЗаменить(СтрПоле,".","")+",";
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрТаблица.ИмяТаблицы="ЗначенияПоказателейОтчетовНечисловые" Тогда
				
				ТекстВыборки=ТекстВыборки+"
				|"+ИмяТаблицы+".Значение КАК Значение";
				
			Иначе	
				
				ТекстВыборки=ТекстВыборки+"
				|СУММА("+ИмяТаблицы+".Значение) КАК Значение";
				
			КонецЕсли;
			
			ТекстВыборки=ТекстВыборки+"
			|{ВЫБРАТЬ "+ИмяТаблицы+".Версия.Регистратор КАК Регистратор,
			|"+ИмяТаблицы+".Версия.Организация КАК Организация,
			|"+ИмяТаблицы+".Версия.ПериодОтчета КАК ПериодОтчета,
			|"+ИмяТаблицы+".Версия.Сценарий КАК Сценарий,
			|"+ИмяТаблицы+".Версия.Проект КАК Проект,
			|"+ИмяТаблицы+".Версия.ВидОтчета КАК ВидОтчета,
			|"+ИмяТаблицы+".Версия.Валюта КАК Валюта}
			|ИЗ РегистрСведений."+СтрТаблица.ИмяТаблицы+" КАК "+ИмяТаблицы+"
			|ГДЕ 
			|"+ИмяТаблицы+".Показатель В(&"+ИмяТаблицы+"_Показатели) И (Версия.Активность=&ПараметрАктивность1 ИЛИ Версия.Активность=&ПараметрАктивность2) И ((НЕ Версия.ЧерноваяВерсия) ИЛИ Версия.ИдентификаторСеанса=&ИдентификаторСеанса)"+?(ПустаяСтрока(СтрЗапрос.ТекстЗапроса),""," И "+СтрЗапрос.ТекстЗапроса);
			
			Если СтрНайти(СтрТаблица.ИмяТаблицы,"ЗначенияПоказателейОтчетовНечисловые")>0 Тогда
				
				ТекстВыборки=ТекстВыборки+" И "+ИмяТаблицы+".ИтоговоеЗначение="+?(СтрТаблица.ИтоговоеЗначение,"ИСТИНА","ЛОЖЬ");
				
			КонецЕсли;
			
			СтруктураПараметров.Вставить(ИмяТаблицы+"_Показатели",СтрТаблица.СписокПоказателей);
			
			ТекстВыборки=ТекстВыборки+"
			|{ГДЕ
			|	"+ИмяТаблицы+".Версия.Организация.* КАК Организация,
			|	"+ИмяТаблицы+".Версия.Проект.* КАК Проект,
			|	"+ИмяТаблицы+".Версия.ВидОперации.* КАК ВидОперации,
			|	"+ИмяТаблицы+".Версия.Регистратор.* КАК Регистратор,
			|	"+ИмяТаблицы+".Версия.ПериодОтчета.* КАК ПериодОтчета,
			|	"+ИмяТаблицы+".Показатель.*,"+?(СтрТаблица.ДанныеПоВалютам,ИмяТаблицы+".АналитикаВалюта.*,","")+" 
			|	"+ИмяТаблицы+".Версия.Сценарий.* КАК Сценарий,";
			
			Для Индекс=1 По ЧислоАналитикТаблицы Цикл
				
				ТекстВыборки=ТекстВыборки+"	
				|	"+ИмяТаблицы+".Аналитика"+Индекс+".*,"
				
			КонецЦикла;
			
			ТекстВыборки=ТекстВыборки+"
			|
			|	"+ИмяТаблицы+".Версия.Валюта.* КАК Валюта,
			|	"+ИмяТаблицы+".Версия.Ссылка.* КАК Версия,
			|	"+ИмяТаблицы+".Версия.ЗаписьВДополнительнойВалюте КАК ЗаписьВДополнительнойВалюте,
			|	"+ИмяТаблицы+".Версия.Активность КАК Активность}";
			
			Если СтрНайти(СтрТаблица.ИмяТаблицы,"ЗначенияПоказателейОтчетовНечисловые")=0 Тогда
				
				ТекстВыборки=ТекстВыборки+"
				|СГРУППИРОВАТЬ ПО
				|"+ТекстГруппировки;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		СтрЗапрос.ТекстЗапроса=СРЕД(ТекстВыборки,16);
		СтрЗапрос.СтруктураПараметров=СтруктураПараметров;
				
		Попытка
			
			ПостроительЗапроса = Новый ПостроительЗапроса;
			ПостроительЗапроса.Текст = СтрЗапрос.ТекстЗапроса;
			
		Исключение
			
		КонецПопытки;
			
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Подготавливаем данные для формирования запросов к внешней информационной базе
	
	Для Каждого СтрЗапрос ИЗ мТабПоказателиЗапросы Цикл
		
		Если НЕ (СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПараметрическаяНастройка
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов 
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
			ИЛИ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтруктураЗапроса=Новый Структура;
		
		Если НЕ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			Если ДополнительныйОтбор=Неопределено Тогда	
				Если СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
					ТекПравилаВычисленияПараметров=РасширениеИнтеграцииУХ.ПолучитьРабочуюТаблицуВычисленияПараметровADO(СтрЗапрос.ПравилаВычисленияПараметров);	
				Иначе	
					ТекПравилаВычисленияПараметров=РасширениеИнтеграцииУХ.ПолучитьРабочуюТаблицуВычисленияПараметров(СтрЗапрос.ПравилаВычисленияПараметров);
				КонецЕсли;
			Иначе
				ПравилаВычисленияПараметровДоп=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
				ПравилаИспользованияПолейДоп=СтрЗапрос.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей;
				
				Для Каждого ТекЗапись Из ДополнительныйОтбор Цикл
					
					ТекПравило = ПравилаИспользованияПолейДоп.Найти(ТекЗапись.Ключ,"КодАналитики");
					
					Если ТекПравило=Неопределено Тогда
						
						ТекПравило = ПравилаИспользованияПолейДоп.Найти(ТекЗапись.Ключ,"Поле");
						
						Если ТекПравило = Неопределено Тогда
							
							Продолжить;
							
						КонецЕсли;
						
					КонецЕсли;		
					
					ИмяПараметра = ТекПравило.Поле;
					ТекСтрокаИсправления = ПравилаВычисленияПараметровДоп.Найти(ИмяПараметра, "ИмяПараметра");
					
					Значение     = ТекЗапись.Значение;
					ИмяПараметра = ТекПравило.Поле;
					
					ТекСтрокаИсправления = ПравилаВычисленияПараметровДоп.Найти(ИмяПараметра, "ИмяПараметра");
					
					Если ТекСтрокаИсправления = Неопределено Тогда					
						
						ТекСтрокаИсправления = ПравилаВычисленияПараметровДоп.Добавить();
						ТекСтрокаИсправления.ИмяПараметра = ИмяПараметра;
						
					КонецЕсли;
					
					ТекСтрокаИсправления.НастройкаСоответствия=ТекПравило.НастройкаСоответствия;
					ТекСтрокаИсправления.ТипРасчета   = "Простой";
					ТекСтрокаИсправления.СпособВычисленияПараметра   = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
					ТекСтрокаИсправления.УточнениеСпособаОпределения = Новый ХранилищеЗначения(Значение);
					
				КонецЦикла;
				
				ТекПравилаВычисленияПараметров=РасширениеИнтеграцииУХ.ПолучитьРабочуюТаблицуВычисленияПараметров(ПравилаВычисленияПараметровДоп);
				
			КонецЕсли;
			
			ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
			
			СтрЗапрос.ПравилаВычисленияПараметров=ТекПравилаВычисленияПараметров;
			
		КонецЕсли;
		
		Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
			ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			//////////////////////////////////////////////////////////////////////////////////////////////
			// Подготовим таблицы используемых счетов и ресурсов
			
			ТабСчетаСписок=Новый ТаблицаЗначений;
			ТабСчетаСписок.Колонки.Добавить("Операнд");
			ТабСчетаСписок.Колонки.Добавить("Счет");
			ТабСчетаСписок.Колонки.Добавить("КоррСчет");
			
			ТабСчетаОперандов=Новый ТаблицаЗначений;
			ТабСчетаОперандов.Колонки.Добавить("КодОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
			
			Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
				
				ТабСчетаОперандов.Колонки.Добавить("СчетДанные",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланСчетовСсылка."+СтрЗапрос.ПланСчетов.ПланСчетовМетаданные));
				ТабСчетаОперандов.Колонки.Добавить("КоррСчетДанные",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланСчетовСсылка."+СтрЗапрос.ПланСчетов.ПланСчетовМетаданные));
				
			Иначе
				
				ТабСчетаОперандов.Колонки.Добавить("СчетДанные",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
				ТабСчетаОперандов.Колонки.Добавить("КоррСчетДанные",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
				
			КонецЕсли;
			
			СоответствиеРесурсов=Новый Соответствие;
			
			Для Каждого Операнд ИЗ СтрЗапрос.ТаблицаОперандов Цикл 
				
				НоваяСтрока=ТабСчетаСписок.Добавить();
				НоваяСтрока.Счет=Операнд.Счет;
				НоваяСтрока.КоррСчет=Операнд.КоррСчет;
				НоваяСтрока.Операнд=СокрЛП(Операнд.Код);
				
				СоответствиеРесурсов.Вставить(СокрЛП(Операнд.Код),СтрЗаменить(Операнд.Ресурс,".",""));
				
			КонецЦикла;
			
			СтруктураЗапроса.Вставить("СоответствиеРесурсов",СоответствиеРесурсов);
			
			ПланСчетов=СтрЗапрос.ПланСчетов;
			ЕстьОбороты = СтрНайти(СтрЗапрос.ТекстЗапроса,"&СчетДт")>0;
			
			Если ЕстьОбороты Тогда
				
				СписокСчетов=Новый СписокЗначений;
				СписокКоррСчетов=Новый СписокЗначений;
				
				Если ТабСчетаСписок.Количество()=1 Тогда // Запрос строится для одного операнда
					
					СписокСчетовЛок=ПолучитьСчетаВИерархии(ПланСчетов,ТабСчетаСписок[0].Счет,СписокСчетов,СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
					СписокКоррСчетовЛок=ПолучитьСчетаВИерархии(ПланСчетов,ТабСчетаСписок[0].КоррСчет,СписокКоррСчетов,СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
					
					НоваяСтрока=ТабСчетаОперандов.Добавить();
					НоваяСтрока.КодОперанда=ТабСчетаСписок[0].Операнд;
					
				Иначе	
					
					Для Каждого СтрокаСчет ИЗ ТабСчетаСписок Цикл
						
						СписокСчетовЛок=ПолучитьСчетаВИерархии(ПланСчетов,СтрокаСчет.Счет,СписокСчетов,СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
						СписокКоррСчетовЛок=ПолучитьСчетаВИерархии(ПланСчетов,СтрокаСчет.КоррСчет,СписокКоррСчетов,СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
						
						Для Каждого ЛокСчет Из СписокСчетовЛок Цикл
							Для Каждого ЛокКоррСчет ИЗ СписокКоррСчетовЛок Цикл
								НоваяСтрока=ТабСчетаОперандов.Добавить();
								НоваяСтрока.КодОперанда=СтрокаСчет.Операнд;
								НоваяСтрока.СчетДанные=ЛокСчет.Значение;
								НоваяСтрока.КоррСчетДанные=ЛокКоррСчет.Значение;
							КонецЦикла;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтруктураЗапроса.Вставить("СписокСчетов",СписокСчетов);
				СтруктураЗапроса.Вставить("СписокКоррСчетов",СписокКоррСчетов);
				
			Иначе
				
				СписокСчетов=Новый СписокЗначений;
				
				Если ТабСчетаСписок.Количество()=1 Тогда // Запрос строится для одного операнда
					
					СписокСчетовЛок=ПолучитьСчетаВИерархии(ПланСчетов,ТабСчетаСписок[0].Счет,СписокСчетов,СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
					
					НоваяСтрока=ТабСчетаОперандов.Добавить();
					НоваяСтрока.КодОперанда=ТабСчетаСписок[0].Операнд;
					
				Иначе
					
					Для Каждого СтрокаСчет ИЗ ТабСчетаСписок Цикл
						
						СписокСчетовЛок=ПолучитьСчетаВИерархии(ПланСчетов,СтрокаСчет.Счет,СписокСчетов,СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
						
						Для Каждого ЛокСчет Из СписокСчетовЛок Цикл
							НоваяСтрока=ТабСчетаОперандов.Добавить();
							НоваяСтрока.КодОперанда=СтрокаСчет.Операнд;
							НоваяСтрока.СчетДанные=ЛокСчет.Значение;
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				СтруктураЗапроса.Вставить("СписокСчетов",СписокСчетов);
				
			КонецЕсли;
			
			СтруктураЗапроса.Вставить("ТабСчетаСписок",ТабСчетаСписок);
			СтруктураЗапроса.Вставить("ТабСчетаОперандов",ТабСчетаОперандов);
			
		ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений Тогда
			
			ТабСчетаСписок=Новый ТаблицаЗначений;
			ТабСчетаСписок.Колонки.Добавить("Операнд");
			
			Для Каждого Операнд ИЗ СтрЗапрос.ТаблицаОперандов Цикл 
				
				НоваяСтрока=ТабСчетаСписок.Добавить();
				НоваяСтрока.Операнд=СокрЛП(Операнд.Код);
				
			КонецЦикла;
			
			Если СтрНайти(СтрЗапрос.ТекстЗапроса ,"ПолеОсновнойТаблицыРегистраУХ")>0 Тогда
				
				Для Каждого СтрТабПравила ИЗ СтрЗапрос.ТабПравилаИспользованияПолей Цикл
					
					Для Каждого СтрПоле ИЗ СтрТабПравила.ПравилаИспользованияПолей Цикл
						
						Если СтрПоле.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы
							И (НЕ СтрПоле.КодАналитики="Значение") Тогда
							
							СтрПоле.Поле=СтрПоле.КодАналитики;
							СтрПоле.Синоним=СтрПоле.КодАналитики;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;	
			
			СтруктураЗапроса.Вставить("ТабСчетаСписок",ТабСчетаСписок);
						
		ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда 
						
			СтруктураЗапроса.Вставить("ТаблицаADO",СтрЗапрос.ТаблицаADO);
			
			Если СтрЗапрос.ТабПравилаИспользованияПолей.Количество()>1 Тогда // По разному настроено соотвествие, выбираем по наиболее полному
				
				РабочаяТаблица=Новый ТаблицаЗначений;
				
				СписокКодовОперандов=Новый СписокЗначений;
							
				Для Каждого СтрТаблица ИЗ СтрЗапрос.ТабПравилаИспользованияПолей Цикл
					
					Если СтрТаблица.ПравилаИспользованияПолей.Количество()>РабочаяТаблица.Количество() Тогда
						
						РабочаяТаблица=СтрТаблица.ПравилаИспользованияПолей.Скопировать();
						
					КонецЕсли;
					
					СписокКодовОперандов.ЗагрузитьЗначения(СтрТаблица.СписокКодовОперандов.ВыгрузитьЗначения()); 
					
				КонецЦикла;
				
				СтрЗапрос.ТабПравилаИспользованияПолей.Очистить();
				НоваяСтрока=СтрЗапрос.ТабПравилаИспользованияПолей.Добавить();
				НоваяСтрока.СписокКодовОперандов=СписокКодовОперандов;
				НоваяСтрока.ПравилаИспользованияПолей=РабочаяТаблица;
				
			КонецЕсли;
					
		КонецЕсли;
		
		Если НЕ СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
			
			///////////////////////////////////////////////////////////////////////////////////
			// Подготовим таблицы использование полей запроса
			
			СтруктураПолей=Новый Структура;
			
			Для Каждого СтрПравило ИЗ СтрЗапрос.ТабПравилаИспользованияПолей Цикл
				
				Если НЕ ЕстьСинхронизацияПоРеквизитам(СтрПравило.ПравилаИспользованияПолей) Тогда
					
					Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
						
						РабочаяТаблицаПолей=РасширениеИнтеграцииУХ.ADO_ПодготовитьТаблицуПолейДляЗапроса(СтрПравило.ПравилаИспользованияПолей);
						
					Иначе
						
						РабочаяТаблицаПолей=РасширениеИнтеграцииУХ.ПодготовитьТаблицуПолейДляЗапроса(СтрПравило.ПравилаИспользованияПолей,(СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов));	
						
					КонецЕсли;
					
					СтрПравило.ПравилаИспользованияПолей=РабочаяТаблицаПолей.Скопировать();
					
				КонецЕсли;
				
				Для Каждого КодОперанда ИЗ СтрПравило.СписокКодовОперандов Цикл
					
					СтруктураПолей.Вставить(СокрЛП(КодОперанда.Значение),СтрПравило.ПравилаИспользованияПолей);
					
				КонецЦикла;
				
			КонецЦикла;	
			
			СтруктураЗапроса.Вставить("СтруктураПолей",СтруктураПолей);
			
		КонецЕсли;
		
		СтрЗапрос.СтруктураЗапроса=СтруктураЗапроса;
		
	КонецЦикла;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////	
		
	ДанныеОперандов = Новый Структура;
	ДанныеОперандов.Вставить("мОперанды", ДанныеОперандовДляРасчета);
	ДанныеОперандов.Вставить("мТабПоказателиЗапросы", мТабПоказателиЗапросы);
	ДанныеОперандов.Вставить("мСоответствиеОперандовИПоказателейОтбора", мСоответствиеОперандовИПоказателейОтбора);
	ДанныеОперандов.Вставить("ЕстьОбращениеКВИБ", ЕстьОбращениеКВИБ);
	
	Возврат ДанныеОперандов;

КонецФункции // ПодготовитьОперандыДляПолученияДанных()

Функция ПолучитьДанныеОперандовДляРасчета(СравниватьТаблицыПараметров=Истина,
										НазначениеРасчетов=Неопределено,
										СпособИспользования=Неопределено,
										ПотребительРасчета=Неопределено,
										ИсточникДанных=Неопределено,
										ДополнительныйОтбор=Неопределено,
										ГруппироватьОперанды=Истина)Экспорт
	
	// Получим таблицу операндов, используемых при заполнении показателей
	
	
	Если ТипЗнч(ИсточникДанных)=Тип("СправочникОбъект.ИсточникиДанныхДляРасчетов") Тогда
		
		мОперанды=ПолучитьТаблицуОперандаПоОбъекту(ИсточникДанных);
		
	Иначе
		
		мОперанды=ПолучитьТаблицуОперандов(НазначениеРасчетов,
					СпособИспользования,
					ПотребительРасчета,
					ИсточникДанных,
					ДополнительныйОтбор);
		
	КонецЕсли;
										
	
	Возврат ПодготовитьОперандыДляПолученияДанных(мОперанды,
										СравниватьТаблицыПараметров,
										ИсточникДанных,
										СпособИспользования,
										ДополнительныйОтбор,
										ГруппироватьОперанды);

										
КонецФункции // ПолучитьРабочуюТаблицуОперандов()
									
Функция ПолучитьТаблицуОперандаПоОбъекту(ИсточникОбъект) Экспорт
		
	ТаблицаРеквизитов=Новый	ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Код");
	ТаблицаРеквизитов.Колонки.Добавить("Ссылка");
	ТаблицаРеквизитов.Колонки.Добавить("Наименование");
	ТаблицаРеквизитов.Колонки.Добавить("СпособПолучения");
	ТаблицаРеквизитов.Колонки.Добавить("ТекстЗапросаМодуля");
	ТаблицаРеквизитов.Колонки.Добавить("ТолькоАналитическиеЗначения");
	ТаблицаРеквизитов.Колонки.Добавить("РесурсРегистра");
	ТаблицаРеквизитов.Колонки.Добавить("ВидИтога");
	ТаблицаРеквизитов.Колонки.Добавить("ДтКт");
	ТаблицаРеквизитов.Колонки.Добавить("ТипЗначения");	
	ТаблицаРеквизитов.Колонки.Добавить("ПоказательОтбор");
	ТаблицаРеквизитов.Колонки.Добавить("ГруппаРаскрытияОтбор");
	ТаблицаРеквизитов.Колонки.Добавить("Счет");
	ТаблицаРеквизитов.Колонки.Добавить("КоррСчет");
	ТаблицаРеквизитов.Колонки.Добавить("РегистрБД");
	ТаблицаРеквизитов.Колонки.Добавить("КоррРегистрБД");
	ТаблицаРеквизитов.Колонки.Добавить("ИсточникШаблон");
	ТаблицаРеквизитов.Колонки.Добавить("ТаблицаADO");
	ТаблицаРеквизитов.Колонки.Добавить("СпособИспользования");
	ТаблицаРеквизитов.Колонки.Добавить("ПоказательТекущегоОтчета");
	ТаблицаРеквизитов.Колонки.Добавить("ЕстьНестандартныеОтборы");
	
	////Вычисляемые значения
	
	ТаблицаРеквизитов.Колонки.Добавить("ВерсияПлатформы");
	ТаблицаРеквизитов.Колонки.Добавить("Показатель");
	ТаблицаРеквизитов.Колонки.Добавить("ТипЗначенияПоказателя");
	ТаблицаРеквизитов.Колонки.Добавить("ВидИтогаПоказателя");
	ТаблицаРеквизитов.Колонки.Добавить("ГруппаРаскрытия");
	ТаблицаРеквизитов.Колонки.Добавить("ПоказательПересчитыватьВалютнуюСумму");
	
	Для Индекс=1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТаблицаРеквизитов.Колонки.Добавить("АналитикаОтчета"+Индекс);
	КонецЦикла;
	
	ТаблицаРеквизитов.Колонки.Добавить("ВидОтчетаОтбор");
	ТаблицаРеквизитов.Колонки.Добавить("ЧисловойПоказатель");
	ТаблицаРеквизитов.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия");
	ТаблицаРеквизитов.Колонки.Добавить("ПоказательОтборПересчитыватьВалютнуюСумму");
	
	ТаблицаРеквизитов.Колонки.Добавить("ТаблицаПараметровОтбораБД");
	ТаблицаРеквизитов.Колонки.Добавить("УточненияСпособовОпределения");
	ТаблицаРеквизитов.Колонки.Добавить("ПравилаИспользованияПолейЗапроса");
	
	ТаблицаРеквизитов.Колонки.Добавить("ПланСчетов");
	
	ТаблицаРеквизитов.Колонки.Добавить("АналитикВидаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	ТаблицаРеквизитов.Колонки.Добавить("Ресурс",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаРеквизитов.Колонки.Добавить("ПравилаВычисленияПараметровЗапроса");
	
	///////Заполняем строку таблицы по переданному объекту
	
	НоваяСтрока=ТаблицаРеквизитов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ИсточникОбъект,,"Код");
	
	НоваяСтрока.Код=СокрЛП(ИсточникОбъект.Код);
	НоваяСтрока.ВерсияПлатформы			=  ИсточникОбъект.ТипБД.ВерсияПлатформы;
	НоваяСтрока.ТипЗначенияПоказателя	=?(ИсточникОбъект.ПотребительРасчета.ТипЗначения	=NULL,Перечисления.ТипыЗначенийПоказателейОтчетов.Число,ИсточникОбъект.ПотребительРасчета.ТипЗначения);
	НоваяСтрока.ВидИтогаПоказателя		=?(ИсточникОбъект.ПотребительРасчета.ВидИтога		=NULL,Перечисления.ВидыИтоговПоказателя.Сумма,			ИсточникОбъект.ПотребительРасчета.ВидИтога);
	НоваяСтрока.ГруппаРаскрытия			=?(ИсточникОбъект.ПотребительРасчета.ГруппаРаскрытия=NULL,Справочники.ГруппыРаскрытия.ПустаяСсылка(),		ИсточникОбъект.ПотребительРасчета.ГруппаРаскрытия);
	НоваяСтрока.ПоказательПересчитыватьВалютнуюСумму=?(ИсточникОбъект.ПотребительРасчета.ПересчитыватьВалютнуюСумму	=NULL,Ложь,						ИсточникОбъект.ПотребительРасчета.ПересчитыватьВалютнуюСумму);

	Для Индекс=1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		НоваяСтрока["АналитикаОтчета"+Индекс]=?(ТипЗнч(ИсточникОбъект.ПоказательОтбор.Владелец)=Тип("СправочникСсылка.ВидыОтчетов"),ИсточникОбъект.ПоказательОтбор.Владелец["ВидАналитики"+Индекс],Неопределено);
		
	КонецЦикла;

	НоваяСтрока.ВидОтчетаОтбор=ИсточникОбъект.ПоказательОтбор.Владелец; 
	
	НоваяСтрока.ЧисловойПоказатель							=?(ИсточникОбъект.ПоказательОтбор.ЧисловойПоказатель			=NULL,Истина,ИсточникОбъект.ПоказательОтбор.ЧисловойПоказатель);
	НоваяСтрока.ЧислоАналитикГруппыРаскрытия				=?(ИсточникОбъект.ПоказательОтбор.ГруппаРаскрытия.ЧислоАналитик	=NULL,0,ИсточникОбъект.ПоказательОтбор.ГруппаРаскрытия.ЧислоАналитик);
	НоваяСтрока.ПоказательОтборПересчитыватьВалютнуюСумму	=?(ИсточникОбъект.ПоказательОтбор.ПересчитыватьВалютнуюСумму	=NULL,ЛОЖЬ,ИсточникОбъект.ПоказательОтбор.ПересчитыватьВалютнуюСумму);

	НоваяСтрока.ТаблицаПараметровОтбораБД=ИсточникОбъект.ТаблицаПараметровОтбораБД.Выгрузить(,"ПолеБД,
	|		ИмяПараметра,
	|		НаименованиеБД,
	|		СпособВычисленияПараметра,
	|		ЗначениеДляПроверки,
	|		ТипРасчета,
	|       НастройкаСоответствия,
	|       ТаблицаАналитикиВИБ,
	|       ТекстМодуля");
	
	НоваяСтрока.УточненияСпособовОпределения=ИсточникОбъект.УточненияСпособовОпределения.Выгрузить(,"ПолеБД,
	|		ИмяПараметра,
	|		Значение,
	|		Представление,
	|		Пометка,
	|		Тип");
		
	ПравилаИспользованияПолейЗапроса=ИсточникОбъект.ПравилаИспользованияПолейЗапроса.Выгрузить(,"Поле,
	|		Синоним,
	|		АналитикаОперанда,
	|		КодАналитики,
	|       НастройкаСоответствия,
	|       РеквизитАналитики,
	|       ТаблицаАналитики,
	|       ТаблицаАналитикиВИБ,
	|       НеИспользоватьДляСинхронизации,
	|       СпособЗаполнения,
	|       ФиксированноеЗначение");
	
	ПравилаИспользованияПолейЗапроса.Колонки.Добавить("СоздаватьНовые");
	ПравилаИспользованияПолейЗапроса.Колонки.Добавить("РазделятьПоОрганизациям");
	ПравилаИспользованияПолейЗапроса.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте");
	
	Для Каждого Строка ИЗ ПравилаИспользованияПолейЗапроса Цикл
		
		Строка.СоздаватьНовые			=?(Строка.АналитикаОперанда.СоздаватьПриНеудачномПоискеПриИмпорте	=NULL,Истина,Строка.АналитикаОперанда.СоздаватьПриНеудачномПоискеПриИмпорте);
		Строка.РазделятьПоОрганизациям	=?(Строка.АналитикаОперанда.РазделятьПоОрганизациям					=NULL,Ложь,Строка.АналитикаОперанда.РазделятьПоОрганизациям);
		Строка.ОбновлятьРеквизитыПриИмпорте	=?(Строка.АналитикаОперанда.ОбновлятьРеквизитыПриИмпорте		=NULL,Истина,Строка.АналитикаОперанда.ОбновлятьРеквизитыПриИмпорте);
		
	КонецЦикла;

	НоваяСтрока.ПравилаИспользованияПолейЗапроса=ПравилаИспользованияПолейЗапроса;
	
	Если ЗначениеЗаполнено(ИсточникОбъект.ПланСчетовБД) Тогда
		
		НоваяСтрока.ПланСчетов=ИсточникОбъект.ПланСчетовБД;
		
	Иначе
		
		НоваяСтрока.ПланСчетов=?((ИсточникОбъект.РегистрБД=Неопределено ИЛИ ИсточникОбъект.РегистрБД.ПланСчетов=NULL),Неопределено,ИсточникОбъект.РегистрБД.ПланСчетов);
		
	КонецЕсли;
	
	Возврат ТаблицаРеквизитов;
	
КонецФункции // ПолучитьТаблицуОперандаПоОбъекту()
									

Функция ПолучитьТаблицуОперандов(НазначениеРасчетов=Неопределено,
										СпособИспользования=Неопределено,
										ПотребительРасчета=Неопределено,
										ИсточникДанных=Неопределено,
										ДополнительныйОтбор=Неопределено) Экспорт
										
										
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.Наименование,
	|	ИсточникиДанныхДляРасчетов.СпособПолучения,
	|	ИсточникиДанныхДляРасчетов.ТипБД.ВерсияПлатформы КАК ВерсияПлатформы,
	|	ИсточникиДанныхДляРасчетов.ТекстЗапросаМодуля,
	|	ИсточникиДанныхДляРасчетов.ТолькоАналитическиеЗначения,
	|	ИсточникиДанныхДляРасчетов.РесурсРегистра,
	|	ИсточникиДанныхДляРасчетов.ВидИтога,
	|	ИсточникиДанныхДляРасчетов.ДтКт,
	|	ИсточникиДанныхДляРасчетов.ТипЗначения,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).ТипЗначения,ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)) КАК ТипЗначенияПоказателя,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).ВидИтога,ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Сумма)) КАК ВидИтогаПоказателя,
	|   ЕСТЬNULL(ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).ГруппаРаскрытия, ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)) КАК ГруппаРаскрытия,
	|   ЕСТЬNULL(ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).ПересчитыватьВалютнуюСумму, ЛОЖЬ) КАК ПоказательПересчитыватьВалютнуюСумму,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор,
	|	ИсточникиДанныхДляРасчетов.ГруппаРаскрытияОтбор,";
	
	Для Индекс=1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст=Запрос.Текст+"
		|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец.ВидАналитики"+Индекс+" КАК АналитикаОтчета"+Индекс+",";
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.Владелец КАК ВидОтчетаОтбор,
	|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ЧисловойПоказатель,ИСТИНА) КАК ЧисловойПоказатель,
	|	ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикГруппыРаскрытия,
	|   ЕСТЬNULL(ИсточникиДанныхДляРасчетов.ПоказательОтбор.ПересчитыватьВалютнуюСумму, ЛОЖЬ) КАК ПоказательОтборПересчитыватьВалютнуюСумму,
	|	ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД.(
	|		ПолеБД,
	|		ИмяПараметра,
	|		НаименованиеБД,
	|		СпособВычисленияПараметра,
	|		ЗначениеДляПроверки,
	|		ТипРасчета,
	|       НастройкаСоответствия,
	|       ТаблицаАналитикиВИБ,
	|		ИдентификаторСтроки,
	|		ИдентификаторРодителя,
	|       ТекстМодуля
	|	) КАК ТаблицаПараметровОтбораБД,
	|	ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения.(
	|		ПолеБД,
	|		ИмяПараметра,
	|		Значение,
	|		Представление,
	|		Пометка,
	|		Тип) КАК УточненияСпособовОпределения,
	|	ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса.(
	|		Поле,
	|		Синоним,
	|		АналитикаОперанда КАК АналитикаОперанда,
	|		ЕстьNULL(АналитикаОперанда.СоздаватьПриНеудачномПоискеПриИмпорте,Истина) КАК СоздаватьНовые,
	|		ЕстьNULL(АналитикаОперанда.РазделятьПоОрганизациям,Ложь) КАК РазделятьПоОрганизациям,
	|		ЕстьNULL(АналитикаОперанда.ОбновлятьРеквизитыПриИмпорте,Истина) КАК ОбновлятьРеквизитыПриИмпорте,
	|		КодАналитики,
	|       НастройкаСоответствия,
	|       РеквизитАналитики,
	|       ТаблицаАналитики,
	|       ТаблицаАналитикиВИБ,
	|       НеИспользоватьДляСинхронизации,
	|       СпособЗаполнения,
	|       ФиксированноеЗначение
	|	) КАК ПравилаИспользованияПолейЗапроса,
	|	ИсточникиДанныхДляРасчетов.Счет,
	|	ИсточникиДанныхДляРасчетов.КоррСчет,
	|	ИсточникиДанныхДляРасчетов.РегистрБД,
	|	ИсточникиДанныхДляРасчетов.КоррРегистрБД,
	|	ИсточникиДанныхДляРасчетов.ИсточникШаблон,
	|	ИсточникиДанныхДляРасчетов.ТаблицаADO,
	|	ВЫБОР Когда (НЕ ИсточникиДанныхДляРасчетов.ПланСчетовБД=Значение(Справочник.ПланыСчетовБД.ПустаяСсылка)) Тогда ИсточникиДанныхДляРасчетов.ПланСчетовБД
	|   Иначе ЕСТЬNULL(ВЫРАЗИТЬ(ИсточникиДанныхДляРасчетов.РегистрБД КАК Справочник.РегистрыБухгалтерииБД).ПланСчетов,Неопределено) Конец КАК ПланСчетов,
	|	ИсточникиДанныхДляРасчетов.СпособИспользования,
	|	ИсточникиДанныхДляРасчетов.ПоказательТекущегоОтчета,
	|	ИсточникиДанныхДляРасчетов.ЕстьНестандартныеОтборы
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	(НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)";
		
	Если ЗначениеЗаполнено(НазначениеРасчетов) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|И (НЕ ИсточникиДанныхДляРасчетов.НеИспользуется)";
		
		Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
		
		Если ТипЗнч(НазначениеРасчетов.Владелец)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И НЕ ИсточникиДанныхДляРасчетов.ПотребительРасчета.Отключен";
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СпособИспользования) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования";
		Запрос.УстановитьПараметр("СпособИспользования",СпособИспользования);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПотребительРасчета) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета";
		Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсточникДанных) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.Ссылка = &ИсточникДанных";
		Запрос.УстановитьПараметр("ИсточникДанных",ИсточникДанных);
		
	КонецЕсли;

	мОперанды=Запрос.Выполнить().Выгрузить();
	
	// обрезаем коды
	мОперанды.Колонки.Код.Имя = "Имя";
	мОперанды.Колонки.Добавить("Код");
	
	Для Каждого Стр Из мОперанды Цикл
		Стр.Код = СокрЛП(Стр.Имя);
	КонецЦикла;
	
	мОперанды.Колонки.Удалить(мОперанды.Колонки.Имя);	
	мОперанды.Индексы.Добавить("Код");
	
	мОперанды.Колонки.Добавить("АналитикВидаОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	мОперанды.Колонки.Добавить("Ресурс",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	мОперанды.Колонки.Добавить("ПравилаВычисленияПараметровЗапроса");
	
	Возврат мОперанды;
	
КонецФункции


Функция ОбработатьТекстУпрощеннойФормулы(СтруктураДанных,ПроверятьОперанды=Истина,ПроверятьФормулы=Истина) Экспорт
	
	Если ПустаяСтрока(СтруктураДанных.ТекстПроцедуры) Тогда
		
		СтруктураДанных.Вставить("ТекстПроцедуры","");
		СтруктураДанных.Вставить("РабочийТекстРедактирования","");
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НЕ СтрЧислоВхождений(СтруктураДанных.ТекстПроцедуры,"(")=СтрЧислоВхождений(СтруктураДанных.ТекстПроцедуры,")") Тогда
		
		ТекстСообщения = НСтр("ru = '%ТекстПроцедуры%: разное количество открывающих и закрывающих операторных скобок ().'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстПроцедуры%", Строка(СтруктураДанных.ТекстПроцедуры));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ СтрЧислоВхождений(СтруктураДанных.ТекстПроцедуры,"{")=СтрЧислоВхождений(СтруктураДанных.ТекстПроцедуры,"}") Тогда
		
		ТекстСообщения = НСтр("ru = '%ТекстПроцедуры%: разное количество открывающих и закрывающих фигурных скобок {}.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстПроцедуры%", Строка(СтруктураДанных.ТекстПроцедуры));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецЕсли;
	
	Если НЕ СтрЧислоВхождений(СтруктураДанных.ТекстПроцедуры,"[")=СтрЧислоВхождений(СтруктураДанных.ТекстПроцедуры,"]") Тогда
		
		ТекстСообщения = НСтр("ru = '%ТекстПроцедуры%: разное количество открывающих и закрывающих квадратных скобок [].'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстПроцедуры%", Строка(СтруктураДанных.ТекстПроцедуры));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат Ложь;
		
	КонецЕсли;
			
	РезультатРазбора=ОбщегоНазначенияУХ.ПолучитьРезультатРазбораТекстаФормулы(СтруктураДанных.ТекстПроцедуры,
								СтруктураДанных.НазначениеРасчетов,
								СтруктураДанных.ПотребительРасчета,
								СтруктураДанных.СпособИспользования,
								?(ЗначениеЗаполнено(СтруктураДанных.НазначениеРасчетов.ТипБД),СтруктураДанных.НазначениеРасчетов.ТипБД,Справочники.ТипыБазДанных.ТекущаяИБ),
								Неопределено);	
	
	// Проверим корректность разбора формулы
	
	ТаблицаКодов=Новый ТаблицаЗначений;
	ТаблицаКодов.Колонки.Добавить("КодУпрощеннойФормулы");
	ТаблицаКодов.Колонки.Добавить("ТипЗначения");
	ТаблицаКодов.Колонки.Добавить("ДлинаКода",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(9));
	
	Для Каждого КлючИЗначение ИЗ РезультатРазбора Цикл
		
		Если КлючИЗначение.Ключ="ТолькоСуммирование" Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НОваяСтрока=ТаблицаКодов.Добавить();
		НОваяСтрока.КодУпрощеннойФормулы=КлючИЗначение.Ключ;
		Если КлючИЗначение.Значение.Свойство("ТипЗначения") Тогда
			НоваяСтрока.ТипЗначения = КлючИЗначение.Значение.ТипЗначения;
		ИначеЕсли КлючИЗначение.Значение.Свойство("ПоказательОтбор") Тогда
			НоваяСтрока.ТипЗначения = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(КлючИЗначение.Значение.ПоказательОтбор,"ТипЗначения");
		КонецЕсли;
		НоваяСтрока.ДлинаКода=СтрДлина(КлючИЗначение.Ключ);
		
	КонецЦикла;
	
	ТаблицаКодов.Сортировать("ДлинаКода Убыв");
	
	ТекстДляПроверки=ВРЕГ(СтруктураДанных.ТекстПроцедуры);
	
	Для Каждого СтрокаКод ИЗ ТаблицаКодов Цикл
		
		Если СтрокаКод.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
			ЗначениеПоУмолчанию = "ЛОЖЬ";
		ИначеЕсли СтрокаКод.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
			ЗначениеПоУмолчанию = "ДАТА(1, 1, 1)";
		ИначеЕсли СтрокаКод.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
			ЗначениеПоУмолчанию = """""";
		Иначе
			ЗначениеПоУмолчанию = "0";
		КонецЕсли;
		
		ТекстДляПроверки=СтрЗаменить(ТекстДляПроверки,ВРЕГ(СтрокаКод.КодУпрощеннойФормулы),ЗначениеПоУмолчанию);
		
	КонецЦикла;

	Попытка
		
 		ЗначениеПроверки=Вычислить(ТекстДляПроверки);
		
	Исключение
		
		ТекстОшибки = ОписаниеОшибки();
		Если СтрНайти(ТекстОшибки, НСтр("ru = 'Деление на 0'")) > 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не обработана ошибка деления на 0. Добавьте тернарный оператор в формулу расчета.'");
		КонецЕсли;
		
		ТекстСообщения = НСтр("ru = '%ТекстДляПроверки%: ошибка при разборе формулы расчета.
		|		%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстДляПроверки%", Строка(ТекстДляПроверки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ТекстОшибки);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	СтруктураДанных.Вставить("ТолькоСуммирование",РезультатРазбора["ТолькоСуммирование"]);
	
	// Создадим необходимые операнды по настройкам формул
	
	РабочийТекстФормулы=СтруктураДанных.ТекстПроцедуры;
	РабочийТекстРедактирования=СтруктураДанных.ТекстПроцедуры;
	
	ВычисляемыйПоказатель=Истина;
	
	Для Каждого СтрокаКод ИЗ ТаблицаКодов Цикл
		
		ЭлементРазбора=РезультатРазбора.Получить(СтрокаКод.КодУпрощеннойФормулы);
			
		Если ТипЗнч(ЭлементРазбора)=Тип("Структура") Тогда
			
			НастройкиОперанда=ЭлементРазбора;
			
			Если НастройкиОперанда.Свойство("Код") Тогда // Используется существующий источник
				
				РабочийТекстФормулы=СтрЗаменить(РабочийТекстФормулы,СтрокаКод.КодУпрощеннойФормулы,"["+НастройкиОперанда.Код+"]");
				
				Если (НЕ НастройкиОперанда.ПоказательТекущегоОтчета) ИЛИ НастройкиОперанда.ЕстьНестандартныеОтборы Тогда
					
					ВычисляемыйПоказатель=Ложь;
					
				КонецЕсли;
						
			Иначе
				
				ОбъектИсточник=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
				ОбъектИсточник.НазначениеРасчетов=СтруктураДанных.НазначениеРасчетов;
				ОбъектИсточник.ПотребительРасчета=СтруктураДанных.ПотребительРасчета;
				ОбъектИсточник.СпособПолучения=НастройкиОперанда.СпособПолучения;
				ОбъектИсточник.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
				ОбъектИсточник.ЗаполнитьНачальныеНастройки();
				
				Если ОбъектИсточник.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
					
					НастройкаВыполнена=ОбъектИсточник.ЗаполнитьПоУпрощенномуПредставлениюДанныеПоказателяОтчета(НастройкиОперанда,Ложь);
					
				Иначе
					
					НастройкаВыполнена=ОбъектИсточник.ЗаполнитьПоУпрощенномуПредставлениюДанныеРегистраБухгалтерии(НастройкиОперанда,Ложь);
					
				КонецЕсли;
				
				Если Не НастройкаВыполнена Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
				ДанныеИсточника=ОбщегоНазначенияУХ.ПолучитьДанныеИсточникаПоКодуУпрощеннойФормулы(ОбъектИсточник.КодУпрощеннойФормулы,ОбъектИсточник.НазначениеРасчетов,ОбъектИсточник.ПотребительРасчета);
				
				Если ДанныеИсточника.Свойство("Код") Тогда
					
					РабочийТекстФормулы=СтрЗаменить(РабочийТекстФормулы,СтрокаКод.КодУпрощеннойФормулы,"["+ДанныеИсточника.Код+"]");
					РабочийТекстРедактирования=СтрЗаменить(РабочийТекстРедактирования,СтрокаКод.КодУпрощеннойФормулы,ДанныеИсточника.КодУпрощеннойФормулы);
					
				Иначе
					
					Попытка 
						
						ОбъектИсточник.СформироватьКодОперанда(Истина,Ложь);
						ОбъектИсточник.СохранитьНастройкиОперанда();
						ОбъектИсточник.Записать();
						РабочийТекстФормулы=СтрЗаменить(РабочийТекстФормулы,СтрокаКод.КодУпрощеннойФормулы,"["+СокрЛП(ОбъектИсточник.Код)+"]");
						РабочийТекстРедактирования=СтрЗаменить(РабочийТекстРедактирования,СтрокаКод.КодУпрощеннойФормулы,ОбъектИсточник.КодУпрощеннойФормулы);
						
					Исключение
						
						ТекстСообщения = НСтр("ru = 'Не удалось создать источник данных по представлению %КодУпрощеннойФормулы%:
						|						%ОписаниеОшибки%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодУпрощеннойФормулы%", Строка(СтрокаКод.КодУпрощеннойФормулы));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
						
						Возврат Ложь;
						
					КонецПопытки
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТекстПроцедуры",РабочийТекстФормулы);
	СтруктураДанных.Вставить("РабочийТекстРедактирования",РабочийТекстРедактирования);
	
	Если ПроверятьФормулы Тогда
		
		Возврат ПроверитьФормулуПоказателя(СтруктураДанных,ПроверятьОперанды);
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
													
КонецФункции // ОбработатьТекстУпрощеннойФормулы()

Процедура ОбновитьТипыЗначенийОперандов(ПоказательОтчета=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.ТипЗначения КАК ТипЗначенияПоказателя
	|ПОМЕСТИТЬ ДанныеДляОбработки
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета)";
	
	Если ЗначениеЗаполнено(ПоказательОтчета) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.ПоказательОтбор=&ПоказательОтбор";
		Запрос.УстановитьПараметр("ПоказательОтбор",ПоказательОтчета);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|	И НЕ ИсточникиДанныхДляРасчетов.ТипЗначения = ИсточникиДанныхДляРасчетов.ПоказательОтбор.ТипЗначения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляОбработки.Ссылка,
	|	ДанныеДляОбработки.ТипЗначенияПоказателя
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляОбработки.НазначениеРасчетов
	|ИЗ
	|	ДанныеДляОбработки КАК ДанныеДляОбработки";
	
	Результат=Запрос.ВыполнитьПакет();
	
	ЗапросОперанды=Результат[1].Выбрать();
	
	Пока ЗапросОперанды.Следующий() Цикл
		
		ОперандОбъект=ЗапросОперанды.Ссылка.ПолучитьОбъект();
		ОперандОбъект.ТипЗначения=ЗапросОперанды.ТипЗначенияПоказателя;
		ОперандОбъект.ОбменДанными.Загрузка=Истина;
		ОперандОбъект.Записать();
		
	КонецЦикла;
	
	ЗапросПравила=Результат[2].Выбрать();
	
	Пока ЗапросПравила.Следующий() Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(ЗапросПравила.НазначениеРасчетов);
		
	КонецЦикла;
		
КонецПроцедуры

	
//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ДАННЫХ ПО НАСТРОЙКАМ ИСТОЧНИКОВ

Функция ВычислитьПараметрПоФункции(КонтекстОтчета,СтрокаПараметр, ИспользуемаяИБ=Неопределено) Экспорт
	
	Перем ЗначениеПараметра;
	
	ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(ДокументОбъект,КонтекстОтчета);

	Возврат ДокументОбъект.ВычислитьПараметрПоФункции(СтрокаПараметр)	
	
КонецФункции // ВычислитьПараметрПоФункции()


Функция ПолучитьЗначениеИзХранилища(Значение) Экспорт
	
	Если ТипЗнч(Значение)=Тип("ХранилищеЗначения") Тогда
		
		Возврат Значение.Получить();
		
	Иначе
		
		Возврат Значение;
		
	КонецЕсли;
		
КонецФункции // ПолучитьЗначениеИзХранилища()

// Вычисляет значение параметра операнда в зависимости от способа его вычисления
//
Функция ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр) Экспорт
	
	Перем ЗначениеПараметра;
	
	Если (ТипЗнч(КонтекстОтчета) = Тип("Структура")) Или (ТипЗнч(КонтекстОтчета) = Тип("ДанныеФормыСтруктура")) Тогда
		
		Если КонтекстОтчета.Свойство("АнализЧувствительности") Тогда
			АнализЧувствительности = КонтекстОтчета.АнализЧувствительности;
		Иначе
			АнализЧувствительности = Ложь;
		КонецЕсли;
		
	Иначе
		
		АнализЧувствительности = КонтекстОтчета.АнализЧувствительности;
		
	КонецЕсли;
	
	СвойстваПараметра=Новый Структура("ВидСравнения,Значение");
	
	Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.ОсновнаяВалюта;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.Организация;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.Проект;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.ВИерархии;
		СвойстваПараметра.Значение=КонтекстОтчета.Проект;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.ПериодОтчета;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИсходныйДокумент Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.ИсходныйДокумент;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		
		СвойстваПараметра.Значение=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(КонтекстОтчета.ПериодОтчета,ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.Сценарий;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийФакта Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.Сценарий.СценарийДляАктуализации;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(КонтекстОтчета.ПериодОтчета.ДатаОкончания);
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонтекстОтчета.ПериодОтчета.ДатаНачала;
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОбщегоНазначенияУХ.глОтносительныйПериод(КонтекстОтчета.ПериодОтчета,ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(КонтекстОтчета.ПериодОтчета,ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ОтнПериод.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(КонтекстОтчета.ПериодОтчета,ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ОтнПериод.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(КонтекстОтчета.ПериодОтчета,ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод.ДатаНачала;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(КонтекстОтчета.ПериодОтчета,ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод.ДатаНачала;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
				
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоГода(КонтекстОтчета.ПериодОтчета.ДатаНачала);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
				
		СвойстваПараметра.ВидСравнения = ВидСравнения.Равно;
		СвойстваПараметра.Значение = КонецГода(КонтекстОтчета.ПериодОтчета.ДатаОкончания);
		СтрокаПараметр.ИзКонтекста = Истина;
		СтрокаПараметр.ЗначениеИзКонтекста = СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеДляПроверки = СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, -1);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоГода(ОтнПериод.ДатаНачала);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения));
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецГода(ОтнПериод.ДатаНачала);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Булево
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Строка
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Число
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.НеРавно;
		СвойстваПараметра.Значение=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.ВСпискеПоИерархии;
		СвойстваПараметра.Значение=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.НеВСпискеПоИерархии;
		СвойстваПараметра.Значение=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
		
		Если ТипЗнч(КонтекстОтчета)=Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
			
			ЗначениеПараметра=КонтекстОтчета.ВычислитьПараметрПоФункции(СтрокаПараметр);
			
		ИначеЕсли КонтекстОтчета.Свойство("ОтчетОбъект") Тогда // Работаем в пространстве контекста экземпляра отчета
			
			ЗначениеПараметра=КонтекстОтчета.ОтчетОбъект.ВычислитьПараметрПоФункции(СтрокаПараметр);
			
		Иначе
			
			ЗначениеПараметра=ВычислитьПараметрПоФункции(КонтекстОтчета,СтрокаПараметр, КонтекстОтчета.ИспользуемаяИБ);
			
		КонецЕсли;
		
		СвойстваПараметра.ВидСравнения=?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений,ВидСравнения.ВСписке,ВидСравнения.Равно); 
		СвойстваПараметра.Значение=ЗначениеПараметра;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
		
		СтруктураПериодов=Новый Структура;
		СтруктураПериодов.Вставить("Интервал");
		СтруктураПериодов.Вставить("ИмяПоля",СтрокаПараметр.ИмяПараметра);
		ГраницыПериода=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		
		Если (Не ГраницыПериода.Количество())=2 Тогда
			Возврат СвойстваПараметра;
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Определяем начало интервала отбора
		
		ГраницаНач=ГраницыПериода[0].Значение;
		
		Если НЕ ГраницаНач=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			ТекСтрокаПараметр=Новый Структура;
			
			Если ТипЗнч(ГраницаНач)=Тип("Соответствие") Тогда
				
				ДанныеГраницы=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(ГраницаНач,0);
				
				ТекСтрокаПараметр.Вставить("СпособВычисленияПараметра",ДанныеГраницы.Ключ);
				ТекСтрокаПараметр.Вставить("УточнениеСпособаОпределения",Новый ХранилищеЗначения(ДанныеГраницы.Значение));
				ТекСтрокаПараметр.Вставить("ИзКонтекста");
				ТекСтрокаПараметр.Вставить("ЗначениеДляПроверки");
				ТекСтрокаПараметр.Вставить("ЗначениеИзКонтекста");
				
			Иначе
				
				ТекСтрокаПараметр.Вставить("СпособВычисленияПараметра",ГраницаНач);
				ТекСтрокаПараметр.Вставить("УточнениеСпособаОпределения",Новый ХранилищеЗначения(Неопределено));
				ТекСтрокаПараметр.Вставить("ИзКонтекста");
				ТекСтрокаПараметр.Вставить("ЗначениеДляПроверки");
				ТекСтрокаПараметр.Вставить("ЗначениеИзКонтекста");
				
			КонецЕсли;
			
			ПолучитьСвойстваПараметра(КонтекстОтчета,ТекСтрокаПараметр);
			
			Если ЗначениеЗаполнено(ТекСтрокаПараметр.ЗначениеИзКонтекста) Тогда
				
				СтруктураПериодов.Вставить("ДатаНач",ТекСтрокаПараметр.ЗначениеИзКонтекста);
				
			КонецЕсли;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////
		// Определяем окончание интервала отбора
		
		ГраницаКон=ГраницыПериода[1].Значение;
		
		Если НЕ ГраницаКон=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда 
			
			ТекСтрокаПараметр=Новый Структура;
			
			Если ТипЗнч(ГраницаКон)=Тип("Соответствие") Тогда
				
				ДанныеГраницы=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(ГраницаКон,0);
				
				ТекСтрокаПараметр.Вставить("СпособВычисленияПараметра",ДанныеГраницы.Ключ);
				ТекСтрокаПараметр.Вставить("УточнениеСпособаОпределения",Новый ХранилищеЗначения(ДанныеГраницы.Значение));
				ТекСтрокаПараметр.Вставить("ИзКонтекста");
				ТекСтрокаПараметр.Вставить("ЗначениеДляПроверки");
				ТекСтрокаПараметр.Вставить("ЗначениеИзКонтекста");
				
			Иначе
				
				ТекСтрокаПараметр.Вставить("СпособВычисленияПараметра",ГраницаКон);
				ТекСтрокаПараметр.Вставить("УточнениеСпособаОпределения",Новый ХранилищеЗначения(Неопределено));
				ТекСтрокаПараметр.Вставить("ИзКонтекста");
				ТекСтрокаПараметр.Вставить("ЗначениеДляПроверки");
				ТекСтрокаПараметр.Вставить("ЗначениеИзКонтекста");
				
			КонецЕсли;
			
			ПолучитьСвойстваПараметра(КонтекстОтчета,ТекСтрокаПараметр);
			
			Если ЗначениеЗаполнено(ТекСтрокаПараметр.ЗначениеИзКонтекста) Тогда
				
				СтруктураПериодов.Вставить("ДатаКон",ТекСтрокаПараметр.ЗначениеИзКонтекста);
				
			КонецЕсли;
			
		КонецЕсли;

		СтрокаПараметр.ЗначениеИзКонтекста=СтруктураПериодов;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		СвойстваПараметра.ВидСравнения = ?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета,ВидСравнения.ВСписке,ВидСравнения.НеВСписке);
		
		ТипыОрганизаций=Новый СписокЗначений;
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			// Элиминирующие организации также исключаем
			ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
				
		КонецЕсли;
				
		ДанныеОтбораПоПериметру=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		
		Если ТипЗнч(ДанныеОтбораПоПериметру)=Тип("Структура") Тогда
			
			// Отбор из ВИБ по организациям периметра
			
			Если ДанныеОтбораПоПериметру.МассивОтбора.Количество()=0 Тогда
				
				КонсолидирующаяОрганизация=КонтекстОтчета.Организация;
				
			Иначе
				
				КонсолидирующаяОрганизация=ДанныеОтбораПоПериметру.МассивОтбора[0]._ЗначениеКонсолидации;
				
				Если Не ЗначениеЗаполнено(КонсолидирующаяОрганизация) Тогда
					КонсолидирующаяОрганизация=КонтекстОтчета.Организация;
				КонецЕсли;
				
			КонецЕсли;
			
			СписокПериметр=Новый СписокЗначений;
			
			СписокПериметр.ЗагрузитьЗначения(ОбщегоНазначенияУХ.глСоставПериметра(КонтекстОтчета,,, ,,,,ТипыОрганизаций, КонсолидирующаяОрганизация));
			
			Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СписокПериметр.Добавить(КонсолидирующаяОрганизация);
				
			КонецЕсли;
			
			МассивПериметр=Новый Массив;
			
			// Сформируем массив отбора по составу периметра.
			Для Каждого ТекЭлемент ИЗ СписокПериметр Цикл
				
				СтруктураЭлемент=Новый Структура;
				СтруктураЭлемент.Вставить("_ЗначениеКонсолидации",ТекЭлемент);
				
				Если ДанныеОтбораПоПериметру.Свойство("СписокЭлементов") Тогда
					
					Для Каждого РеквизитСоответствия ИЗ ДанныеОтбораПоПериметру.СписокЭлементов Цикл
						
						СтруктураЭлемент.Вставить(РеквизитСоответствия.РеквизитОбъектаВнешнейИБ,ТекЭлемент.Значение[РеквизитСоответствия.РеквизитОбъектаКонсолидации]);
						
					КонецЦикла;
					
				Иначе
					
					Для Каждого РеквизитСоответствия ИЗ ДанныеОтбораПоПериметру.МассивОтбора[0] Цикл     
						
						Если РеквизитСоответствия.Ключ="_ЗначениеКонсолидации" Тогда        
							Продолжить;       
						КонецЕсли;      
						
						СтруктураЭлемент.Вставить(РеквизитСоответствия.Ключ,ТекЭлемент.Значение[РеквизитСоответствия.Ключ]);
						
					КонецЦикла;
					
				КонецЕсли;
				
				МассивПериметр.Добавить(СтруктураЭлемент);
				
			КонецЦикла;
			
			ДанныеОтбораПоПериметру.Вставить("МассивОтбора",МассивПериметр);
			СтрокаПараметр.УточнениеСпособаОпределения=Новый ХранилищеЗначения(ДанныеОтбораПоПериметру);
					
		Иначе
			
			Если ТипЗнч(ДанныеОтбораПоПериметру)=Тип("СписокЗначений") Тогда
				
				КонсолидирующаяОрганизация=ДанныеОтбораПоПериметру[0].Значение;
				ОтборПоМетодуКонсолидации=ДанныеОтбораПоПериметру[1].Значение;
				
				Если ЗначениеЗаполнено(ОтборПоМетодуКонсолидации) Тогда
					
					СписокОтбора=Новый СписокЗначений;
					СписокОтбора.Добавить(ОтборПоМетодуКонсолидации);
					
				КонецЕсли;	
				
			Иначе
				
				КонсолидирующаяОрганизация=Неопределено;
				СписокОтбора=Неопределено;
				
			КонецЕсли;
			
			ТекСоставПериметра = ОбщегоНазначенияУХ.глСоставПериметра(КонтекстОтчета,,,КонсолидирующаяОрганизация,СписокОтбора,,,ТипыОрганизаций);
			                                  	
			СвойстваПараметра.Значение     = Новый СписокЗначений; // Функция СоставПериметра() возвращает массив организаций. Преобразуем к СЗ.
			
			Для Каждого ЭлементМассива Из ТекСоставПериметра Цикл
				СвойстваПараметра.Значение.Добавить(ЭлементМассива);
			КонецЦикла;
			
			Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СвойстваПараметра.Значение.Добавить(?(ЗначениеЗаполнено(КонсолидирующаяОрганизация),КонсолидирующаяОрганизация,КонтекстОтчета.Организация));
				
			КонецЕсли;
					
			СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
			СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
		
		СвойстваПараметра.Значение=ПолучитьЗначениеИзХранилища(СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов["Аналитика"+Инд]
			И ЗначениеЗаполнено(КонтекстОтчета["Аналитика"+Инд]) Тогда
			
			СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
			СвойстваПараметра.Значение=КонтекстОтчета["Аналитика"+Инд];
			
			СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
			СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СвойстваПараметра;
	
КонецФункции // ПолучитьСвойстваПараметра()


// Вычисляет значение параметра операнда в зависимости от способа его вычисления
//
Функция ПолучитьДанныеОтбораДляРасшифровки(КонтекстОтчета,СтрокаПараметр) Экспорт
	
	Перем ЗначениеПараметра;
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("ИмяПараметра",СтрокаПараметр.ПолеБД);
	СтруктураОтбора.Вставить("ПредставлениеПараметра",СтрокаПараметр.НаименованиеБД);
	СтруктураОтбора.Вставить("НастройкаСоответствия",СтрокаПараметр.НастройкаСоответствия);
		
	Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета.ОсновнаяВалюта);
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета.Организация);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета.Проект);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии);
		
		СписокОтбор=Новый СписокЗначений;
		СписокОтбор.Добавить(КонтекстОтчета.Проект);
		
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",СписокОтбор);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета.ПериодОтчета);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(КонтекстОтчета.ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения));
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета.Сценарий);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонецДня(КонтекстОтчета.ПериодОтчета.ДатаОкончания));
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета.ПериодОтчета.ДатаНачала);
 		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ОбщегоНазначенияУХ.глОтносительныйПериод(КонтекстОтчета.ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения));
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(КонтекстОтчета.ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонецДня(ОтнПериод.ДатаОкончания));
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(КонтекстОтчета.ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонецДня(ОтнПериод.ДатаОкончания));
			
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(КонтекстОтчета.ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ОтнПериод.ДатаНачала);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(КонтекстОтчета.ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ОтнПериод.ДатаНачала);
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",НачалоГода(КонтекстОтчета.ПериодОтчета.ДатаНачала));
 		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонецГода(КонтекстОтчета.ПериодОтчета.ДатаОкончания));
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, -1);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ОтнПериод);
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ОтнПериод);
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",НачалоГода(ОтнПериод.ДатаНачала));
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(КонтекстОтчета.ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонецГода(ОтнПериод.ДатаНачала));
			
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Булево
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Строка
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Число
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
	
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",СтрокаПараметр.СпособВычисленияПараметра);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",СтрокаПараметр.УточнениеСпособаОпределения);
					
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
		
		СтрокаПараметр.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СтрокаПараметр.ТекстМодуля);
		
		Если КонтекстОтчета.Свойство("ОтчетОбъект") Тогда // Работаем в пространстве контекста экземпляра отчета
			
			ЗначениеПараметра=КонтекстОтчета.ОтчетОбъект.ВычислитьПараметрПоФункции(СтрокаПараметр);
			
		Иначе
			
			ЗначениеПараметра=ВычислитьПараметрПоФункции(КонтекстОтчета,СтрокаПараметр, КонтекстОтчета.ИспользуемаяИБ);
			
		КонецЕсли;
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений,Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений,Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение));
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ЗначениеПараметра);
				
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета,Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений,Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений));
		
		ТипыОрганизаций=Новый СписокЗначений;
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			// Элиминирующие организации также исключаем
			ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
				
		КонецЕсли;
				
		ВладелецПериметра = СтрокаПараметр.УточнениеСпособаОпределения;
		
		Если ТипЗнч(ВладелецПериметра)=Тип("Структура") Тогда
			
			// Отбор из ВИБ по организациям периметра
			
			Если ВладелецПериметра.МассивОтбора.Количество()=0 Тогда
				
				КонсолидирующаяОрганизация=КонтекстОтчета.Организация;
				
			Иначе
				
				КонсолидирующаяОрганизация=ВладелецПериметра.МассивОтбора[0]._ЗначениеКонсолидации;
				
				Если Не ЗначениеЗаполнено(КонсолидирующаяОрганизация) Тогда
					КонсолидирующаяОрганизация=КонтекстОтчета.Организация;
				КонецЕсли;
				
			КонецЕсли;
			
			СписокПериметр=Новый СписокЗначений;			
			СписокПериметр.ЗагрузитьЗначения(ОбщегоНазначенияУХ.глСоставПериметра(КонтекстОтчета,,, ,,,,ТипыОрганизаций, КонсолидирующаяОрганизация));
			
			Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СписокПериметр.Добавить(КонсолидирующаяОрганизация);
				
			КонецЕсли;
			
			СтруктураОтбора.Вставить("УточнениеСпособаОпределения",СписокПериметр);
			
		Иначе
			КонсолидирующаяОрганизация = ?(ЗначениеЗаполнено(ВладелецПериметра),ВладелецПериметра,Неопределено);
			ТекСоставПериметра = ОбщегоНазначенияУХ.глСоставПериметра(КонтекстОтчета,,,,,,, ТипыОрганизаций, КонсолидирующаяОрганизация);
			
			СтруктураОтбора.Вставить("УточнениеСпособаОпределения",Новый СписокЗначений);
			
			Для Каждого ЭлементМассива Из ТекСоставПериметра Цикл
				СтруктураОтбора.УточнениеСпособаОпределения.Добавить(ЭлементМассива);
			КонецЦикла;
			
			Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СтруктураОтбора.УточнениеСпособаОпределения.Добавить(?(ЗначениеЗаполнено(ВладелецПериметра),ВладелецПериметра,КонтекстОтчета.Организация));
				
			КонецЕсли;
								
		КонецЕсли;
		
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов["Аналитика"+Инд]
			И КонтекстОтчета.Свойство("Аналитика"+Инд) Тогда
			
			СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
			СтруктураОтбора.Вставить("УточнениеСпособаОпределения",КонтекстОтчета["Аналитика"+Инд]);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СтруктураОтбора;
	
КонецФункции // ПолучитьСвойстваПараметра()


Функция ЕстьСинхронизацияПоРеквизитам(ПравилаИспользованияПолей) Экспорт
		
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
		
		Если ЗначениеЗаполнено(СтрПоле.РеквизитАналитики) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ЕстьСинхронизацияПоРеквизитам() 	

Функция ADO_ПолучитьПоляДляКонвертацииВТекст(ПравилоОбработки) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия
	|ПОМЕСТИТЬ ИспользуемыеНастройкиСоответствия
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов = &ПравилоОбработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Имя КАК ИмяТаблицы,
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных,
	|	СоответствиеВнешнимИБ.СоответствиеРеквизитов.(
	|		РеквизитОбъектаКонсолидации,
	|		РеквизитОбъектаВнешнейИБ,
	|		ПримитивныйТип
	|	),
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИспользуемыеНастройкиСоответствия КАК ИспользуемыеНастройкиСоответствия
	|		ПО СоответствиеВнешнимИБ.Ссылка = ИспользуемыеНастройкиСоответствия.НастройкаСоответствия";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	ДанныеДляКонвертации=Новый Соответствие;
	
	Пока Результат.Следующий() Цикл
		
		МассивКолонокТаблицы = ДанныеДляКонвертации[Результат.ИмяТаблицы];
		
		Если МассивКолонокТаблицы = Неопределено Тогда
			
			МассивКолонокТаблицы = Новый Массив();
			ДанныеДляКонвертации.Вставить(Результат.ИмяТаблицы, МассивКолонокТаблицы);
			
		КонецЕсли;
		
		МассивСтроковыхРеквизитов=Новый Массив;
		
		Если Результат.ТипОбъектаКонсолидации="Справочник" Тогда
			
			МетаданныеОбъекта=Метаданные.Справочники[Результат.ИмяОбъектаМетаданных];
			
		ИначеЕсли Результат.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
			МетаданныеОбъекта = ОбщегоНазначенияУХ.ПолучитьСправочникПоВидуСубконто(Результат.ИмяОбъектаМетаданных);
			
		ИначеЕсли Результат.ТипОбъектаКонсолидации="Документ" Тогда 
		
			МетаданныеОбъекта = МетаДанные.Документы[Результат.ИмяОбъектаМетаданных];
			
		ИначеЕсли Результат.ТипОбъектаКонсолидации="ПланВидовХарактеристик" Тогда 
		
			МетаданныеОбъекта = МетаДанные.ПланыВидовХарактеристик[Результат.ИмяОбъектаМетаданных];
			
		ИначеЕсли Результат.ТипОбъектаКонсолидации="Перечисление" Тогда
			
			МассивСтроковыхРеквизитов.Добавить("Наименование");
			МетаданныеОбъекта=Неопределено;
			
		ИначеЕсли Результат.ТипОбъектаКонсолидации="ПланСчетов" Тогда
			
			МассивСтроковыхРеквизитов.Добавить("Код");
			МетаданныеОбъекта=Неопределено;
			
		КонецЕсли;
		
		Если НЕ МетаданныеОбъекта=Неопределено Тогда
			
			Для Каждого Реквизит ИЗ МетаданныеОбъекта.Реквизиты Цикл
				
				Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
					
					МассивСтроковыхРеквизитов.Добавить(Реквизит.Имя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Реквизит ИЗ МетаданныеОбъекта.СтандартныеРеквизиты Цикл
				
				Если Реквизит.Тип.Типы()[0]=Тип("Строка") Тогда
					
					МассивСтроковыхРеквизитов.Добавить(Реквизит.Имя);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДанныеСинхронизации=Результат.СоответствиеРеквизитов.Выбрать();
		
		Пока ДанныеСинхронизации.Следующий() Цикл
			
			Если (НЕ МассивСтроковыхРеквизитов.Найти(ДанныеСинхронизации.РеквизитОбъектаКонсолидации)=Неопределено)
				И МассивКолонокТаблицы.Найти(ДанныеСинхронизации.РеквизитОбъектаВнешнейИБ)=Неопределено Тогда
				
				МассивКолонокТаблицы.Добавить(СтрЗаменить(СтрЗаменить(ДанныеСинхронизации.РеквизитОбъектаВнешнейИБ, "[", ""), "]", ""));
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат ДанныеДляКонвертации;
	
КонецФункции // ADO_ПолучитьПоляДляКонвертацииВТекст() 

 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ТЕКУЩЕЙ ИНФОРМАЦИОННОЙ БАЗЫ

// Формирует построитель запроса к регистру "Значения показателей" для операнда, ссылающегося на показатель другого отчета
//
//
Функция ПолучитьТаблицуПоИсточникуВнутрПоказатель(КонтекстОтчета,СтрЗапрос) Экспорт
	
	Запрос=Новый Запрос;
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ТекстВложенногоЗапроса=СтрЗапрос.ТекстЗапроса;
	
	Если ТипЗнч(КонтекстОтчета)=Тип("Структура") Тогда
		
		Если КонтекстОтчета.Свойство("АнализЧувствительности") И КонтекстОтчета.АнализЧувствительности Тогда		
			ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "ЗначенияПоказателейОтчетов", "ЗначенияПоказателейМоделирование");
		Иначе
			КонтекстОтчета.Вставить("АнализЧувствительности", Ложь);
		КонецЕсли;
		
	Иначе	
		Если ТипЗнч(КонтекстОтчета) = Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
			 Если КонтекстОтчета.АнализЧувствительности Тогда
				  ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "ЗначенияПоказателейОтчетов", "ЗначенияПоказателейМоделирование");
			 КонецЕсли; 	 	 
	    КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст=ТекстВложенногоЗапроса;
			
	СписокАналитик=Новый СписокЗначений;
					
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(Параметр.ИмяПараметра) Тогда
			
			Параметр.ИмяПараметра=Параметр.ПолеБД;
			
		КонецЕсли;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(КонтекстОтчета,Параметр);
					
		Запрос.УстановитьПараметр(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
					
	КонецЦикла;
	
	Для Каждого Параметр ИЗ СтрЗапрос.СтруктураПараметров Цикл
		
		Если  КонтекстОтчета.АнализЧувствительности Тогда
			ИмяПараметра = СтрЗаменить(Параметр.Ключ,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
			Запрос.УстановитьПараметр(ИмяПараметра,Параметр.Значение);
		Иначе	
			Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);	
		КонецЕсли; 
		
	КонецЦикла;
	
	Если ИспользоватьНеактуальныеЗаписи(КонтекстОтчета) Тогда
		
		Запрос.УстановитьПараметр("ПараметрАктивность1",Истина);
		Запрос.УстановитьПараметр("ПараметрАктивность2",Ложь);
		
	Иначе
		
		Запрос.УстановитьПараметр("ПараметрАктивность1",Истина);
		Запрос.УстановитьПараметр("ПараметрАктивность2",Истина);
		
	КонецЕсли;
	
	Если ТипЗнч(КонтекстОтчета)=Тип("Структура") И КонтекстОтчета.Свойство("ИдентификаторСеанса") Тогда
		
		Запрос.УстановитьПараметр("ИдентификаторСеанса",КонтекстОтчета.ИдентификаторСеанса);
		
	ИначеЕсли ТипЗнч(КонтекстОтчета)=Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
		
		Запрос.УстановитьПараметр("ИдентификаторСеанса",?(ЗначениеЗаполнено(КонтекстОтчета.ИдентификаторСеанса),КонтекстОтчета.ИдентификаторСеанса,""));
		
	Иначе
		
		Запрос.УстановитьПараметр("ИдентификаторСеанса","");
			
	КонецЕсли;	
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуПоИсточникуВнутрПоказатель()

// Формирует построитель запроса к регистру "Значения показателей" для операнда, ссылающегося на показатель другого отчета
//
//
Функция ПолучитьТаблицуПоИсточникуВнутрПостроитель(КонтекстОтчета,СтрЗапрос) Экспорт 
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	ПостроительЗапросаВнутр.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ТекстВложенногоЗапроса=СтрЗапрос.ТекстЗапроса;
	
	Если ТипЗнч(КонтекстОтчета)=Тип("Структура") Тогда
		
		Если КонтекстОтчета.Свойство("АнализЧувствительности") И КонтекстОтчета.АнализЧувствительности Тогда		
			ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "ЗначенияПоказателейОтчетов", "ЗначенияПоказателейМоделирование");
		Иначе
			КонтекстОтчета.Вставить("АнализЧувствительности", Ложь);
		КонецЕсли;
		
	Иначе	
		Если ТипЗнч(КонтекстОтчета) = Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
			 Если КонтекстОтчета.АнализЧувствительности Тогда
				  ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "ЗначенияПоказателейОтчетов", "ЗначенияПоказателейМоделирование");
			 КонецЕсли;
	    КонецЕсли;
	КонецЕсли;

	
	ПостроительЗапросаВнутр.Текст=ТекстВложенногоЗапроса;
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();	
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	СписокАналитик=Новый СписокЗначений;

	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	ПараметрыЗапроса=ПостроительЗапросаВнутр.ПолучитьЗапрос().НайтиПараметры();
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(Параметр.ИмяПараметра) Тогда
			
			Параметр.ИмяПараметра=Параметр.ПолеБД;
			
		КонецЕсли;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(КонтекстОтчета,Параметр);
		
		Если ПараметрыЗапроса.Найти(Параметр.ИмяПараметра)=Неопределено Тогда
						
			Попытка
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
				
				ОтборПараметр.Использование=Истина;
				
				ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
				ОтборПараметр.Значение=СвойстваОтбора.Значение;
				
				Если СтрНайти(Параметр.ПолеБД,"Аналитика")>0 
					И (Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
					ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета
					ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению)
					И ПостроительЗапросаВнутр.Отбор.Найти("ИтоговоеЗначение")=Неопределено
					
					Тогда
					
					ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ИтогПоПоказателю");			
					ОтборПараметр.Использование=Истина;
					ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
					ОтборПараметр.Значение=Ложь;
					
				КонецЕсли;
				
			Исключение
				
			КонецПопытки;
						
		Иначе
			
			ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Параметр ИЗ СтрЗапрос.СтруктураПараметров Цикл
		
		Если  КонтекстОтчета.АнализЧувствительности Тогда
			ИмяПараметра = СтрЗаменить(Параметр.Ключ,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
			ПостроительЗапросаВнутр.Параметры.Вставить(ИмяПараметра,Параметр.Значение);
		Иначе	
			ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
		КонецЕсли; 
		
	КонецЦикла;
	
	ПостроительЗапросаВнутр.Параметры.Вставить("ПараметрАктивность1",Истина);
	ПостроительЗапросаВнутр.Параметры.Вставить("ПараметрАктивность2",НЕ КонтекстОтчета.ЧтениеНеактуальныхЗаписей);
	
	Если ТипЗнч(КонтекстОтчета)=Тип("Структура") И КонтекстОтчета.Свойство("ИдентификаторСеанса") Тогда
		
		ПостроительЗапросаВнутр.Параметры.Вставить("ИдентификаторСеанса",КонтекстОтчета.ИдентификаторСеанса);
		
	Иначе
		
		ПостроительЗапросаВнутр.Параметры.Вставить("ИдентификаторСеанса","");
		
	КонецЕсли;
	
	ПостроительЗапросаВнутр.Выполнить();
	Возврат ПостроительЗапросаВнутр.Результат.Выгрузить();
				
КонецФункции // ПолучитьТаблицуПоИсточникуВнутрПостроитель()

// Формирует построитель запроса к регистру "Значения показателей" для операнда, ссылающегося на показатель другого отчета
//
//
Функция ПолучитьТаблицуПоИсточникуВнутрГруппаРаскрытия(КонтекстОтчета,СтрЗапрос) Экспорт
	
	ПравилаИспользованияПолей=СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса;
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	ПостроительЗапросаВнутр.Текст=СтрЗапрос.ТекстЗапроса;
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		СтрЗначения=ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр);
		
	КонецЦикла;
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
		
	КонецЦикла;
	
	ЗапросГруппаРаскрытия=Новый Запрос;
	ЗапросГруппаРаскрытия.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Код
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ГруппаРаскрытия = &ГруппаРаскрытия";
	
	ЗапросГруппаРаскрытия.УстановитьПараметр("ГруппаРаскрытия",СтрЗапрос.ГруппаРаскрытияОтбор);
	
	СписокПоказателей=Новый СписокЗначений;
	
	Результат=ЗапросГруппаРаскрытия.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ ПравилаИспользованияПолей.Найти(СокрЛП(Результат.Код),"Поле")=Неопределено Тогда
			
			ПостроительЗапросаВнутр.Параметры.Вставить(СокрЛП(Результат.Код),Результат.Ссылка);
			СписокПоказателей.Добавить(Результат.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПостроительЗапросаВнутр.Параметры.Вставить("СписокПоказателей",СписокПоказателей);
	
	ДобавитьОтборПоАктивности(ПостроительЗапросаВнутр, КонтекстОтчета);
	
	ПостроительЗапросаВнутр.Выполнить();
	
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	ЗаполнитьАналитикиПринудительно(ТабРезультат,ПравилаИспользованияПолей,КонтекстОтчета);
	
	Возврат ТабРезультат;

КонецФункции // ПолучитьТаблицуПоИсточникуВнутрГруппаРаскрытия()

Функция ПолучитьУникальноеПоле(ИсходныйПуть,МассивДобавленныхПутей) Экспорт
	
	Если МассивДобавленныхПутей.Найти(ИсходныйПуть)=Неопределено Тогда
		
		Возврат ИсходныйПуть;
		
	Иначе
		
		ЭтапыПути=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИсходныйПуть,".");
		
		Пока 1=1 Цикл
			
			ЭтапыПути.Вставить(1,"Ссылка");
			
			ПроектПути=СтрСоединить(ЭтапыПути,".");
			
			Если МассивДобавленныхПутей.Найти(ПроектПути)=Неопределено Тогда
				
				Возврат ПроектПути;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьУникальноеПоле()

Функция ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления(КонтекстОтчета,СтрЗапрос) Экспорт
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	ПостроительЗапросаВнутр.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	//////////// Настраиваем построитель запроса ////////////////////
		
	ПостроительЗапросаВнутр.Текст=СтрЗапрос.ТекстЗапроса;		
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	Запрос=Новый Запрос;
	Запрос.Текст=СтрЗапрос.ТекстЗапроса;
	ПараметрыЗапроса=Запрос.НайтиПараметры();
		
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;

	// Формируем список показателей для отбора и список необходимых аналитик
			
	ПравилаИспользованияПолей=СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса;		
	
	МассивДобавленныхПутей=Новый Массив;
	
	Для Каждого СтрокаПравило ИЗ ПравилаИспользованияПолей Цикл
		
		Если ЗначениеЗаполнено(СтрокаПравило.Поле)
			И ПостроительЗапросаВнутр.ВыбранныеПоля.Найти(СтрокаПравило.КодАналитики) = Неопределено 
			И (НЕ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаПравило)) Тогда
			
			РабочийПуть=ПолучитьУникальноеПоле(СтрокаПравило.Поле,МассивДобавленныхПутей);
					
			Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить(РабочийПуть,?(ЗначениеЗаполнено(СтрокаПравило.КодАналитики),СтрокаПравило.КодАналитики,ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(СтрокаПравило.Синоним,,,Ложь)));
			
			МассивДобавленныхПутей.Добавить(РабочийПуть);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		СтруктураЗапроса=СтрЗапрос.СтруктураЗапроса;
		
		Если СтрНайти(СтрЗапрос.ТекстЗапроса,"ДвиженияССубконто")>0 Тогда
			
			ПостроительЗапросаВнутр.Параметры.Вставить("СчетДт",СтруктураЗапроса.СписокСчетов);
			
			Если СтруктураЗапроса.Свойство("СписокКоррСчетов") Тогда
				
				ПостроительЗапросаВнутр.Параметры.Вставить("СчетКт",СтруктураЗапроса.СписокКоррСчетов);
				
			КонецЕсли;
			
			ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетДт.Код","Счет");
			ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетКт.Код","КоррСчет");
			
			Если СтрНайти(СтрЗапрос.ТекстЗапроса,"Период")>0
				И ПостроительЗапросаВнутр.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
				
				ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Период","Период");
				
			КонецЕсли;
			
			Если СтрНайти(СтрЗапрос.ТекстЗапроса,"Регистратор")>0
				И ПостроительЗапросаВнутр.ВыбранныеПоля.Найти("Регистратор") = Неопределено Тогда
				
				ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Регистратор","Регистратор");
				
			КонецЕсли;
			
		Иначе
			
			ЕстьОбороты = СтрНайти(СтрЗапрос.ТекстЗапроса,"&СчетДт")>0;
			СтруктураЗапроса=СтрЗапрос.СтруктураЗапроса;
			
			Если СтруктураЗапроса.Свойство("СписокСчетов") И СтруктураЗапроса.СписокСчетов.Количество()>0 Тогда
				
				Если ЕстьОбороты Тогда
					
					ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетДт","Счет");
					ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетКт","КоррСчет");
					
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетДт",СтруктураЗапроса.СписокСчетов);
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетКт",СтруктураЗапроса.СписокКоррСчетов);
					
				Иначе
					
					ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Счет","Счет");
					ПостроительЗапросаВнутр.Параметры.Вставить("Счет",СтруктураЗапроса.СписокСчетов);
					
				КонецЕсли;
				
			Иначе
				
				Если ЕстьОбороты Тогда
					
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетДт",СтрЗапрос.ТаблицаОперандов[0].Счет);
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетКт",СтрЗапрос.ТаблицаОперандов[0].КоррСчет);
					
				Иначе
					
					ПостроительЗапросаВнутр.Параметры.Вставить("Счет",СтрЗапрос.ТаблицаОперандов[0].Счет);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
					
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если НЕ ИспользуетсяПриОтборе(Параметр.СпособВычисленияПараметра) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(КонтекстОтчета,Параметр);

		Если ПараметрыЗапроса.Найти(Параметр.ИмяПараметра)=Неопределено Тогда
					
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
		ОтборПараметр.Использование=Истина;		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
		Иначе
			
			ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПостроительЗапросаВнутр.Выполнить();
	
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();

	ЗаполнитьАналитикиПринудительно(ТабРезультат,ПравилаИспользованияПолей,КонтекстОтчета);
	
	Возврат ТабРезультат;
	
КонецФункции // ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления()

Функция ПолучитьТаблицуДанныхОбъектаТек(КонтекстОтчета,СтрЗапрос)
			
	ПостроительЗапросаВнутр = Новый ПостроительЗапроса;
	ПостроительЗапросаВнутр.ДобавлениеПредставлений = ТипДобавленияПредставлений.НеДобавлять;
	
	//////////// Настраиваем построитель запроса ////////////////////
		
	ПостроительЗапросаВнутр.Текст = СтрЗапрос.ТекстЗапроса;		
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрЗапрос.ТекстЗапроса;
	ПараметрыЗапроса = Запрос.НайтиПараметры();
		
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;

	// Формируем список показателей для отбора и список необходимых аналитик
			
	ПравилаИспользованияПолей = СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса;
	СписокПутей=Новый Массив;
	
	Для Каждого СтрокаПравило ИЗ ПравилаИспользованияПолей Цикл
		
		Если ЗначениеЗаполнено(СтрокаПравило.Поле) И (НЕ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаПравило)) Тогда
			
			ПутьВыбранногоПоля = СтрокаПравило.Поле;
			
			Пока СписокПутей.Найти(ПутьВыбранногоПоля) <> Неопределено Цикл
													
				ПутьВыбранногоПоля="Ссылка."+ПутьВыбранногоПоля;
								
			КонецЦикла;
			
			Поле = ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить(ПутьВыбранногоПоля, СтрокаПравило.КодАналитики);
			СписокПутей.Добавить(ПутьВыбранногоПоля);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
		
		СтруктураЗапроса=СтрЗапрос.СтруктураЗапроса;
		
		Если СтрНайти(СтрЗапрос.ТекстЗапроса,"ДвиженияССубконто") > 0 Тогда
			
			ПостроительЗапросаВнутр.Параметры.Вставить("СчетДт",СтруктураЗапроса.СписокСчетов);
			
			Если СтруктураЗапроса.Свойство("СписокКоррСчетов") Тогда
				
				ПостроительЗапросаВнутр.Параметры.Вставить("СчетКт",СтруктураЗапроса.СписокКоррСчетов);
				
			КонецЕсли;
			
			ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетДт.Код","Счет");
			ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетКт.Код","КоррСчет");
			
			Если СтрНайти(СтрЗапрос.ТекстЗапроса,"Период")>0
				И ПостроительЗапросаВнутр.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
				
				ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Период","Период");
				
			КонецЕсли;
			
			Если СтрНайти(СтрЗапрос.ТекстЗапроса,"Регистратор")>0
				И ПостроительЗапросаВнутр.ВыбранныеПоля.Найти("Регистратор") = Неопределено Тогда
				
				ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Регистратор","Регистратор");
				
			КонецЕсли;
			
		Иначе
			
			ЕстьОбороты = СтрНайти(СтрЗапрос.ТекстЗапроса,"&СчетДт")>0;
			СтруктураЗапроса=СтрЗапрос.СтруктураЗапроса;
			
			Если СтруктураЗапроса.Свойство("СписокСчетов") И СтруктураЗапроса.СписокСчетов.Количество()>0 Тогда
				
				Если ЕстьОбороты Тогда
					
					ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетДт","Счет");
					ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("СчетКт","КоррСчет");
					
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетДт",СтруктураЗапроса.СписокСчетов);
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетКт",СтруктураЗапроса.СписокКоррСчетов);
					
				Иначе
					
					ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Счет","Счет");
					ПостроительЗапросаВнутр.Параметры.Вставить("Счет",СтруктураЗапроса.СписокСчетов);
					
				КонецЕсли;
				
			Иначе
				
				Если ЕстьОбороты Тогда
					
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетДт",СтрЗапрос.ТаблицаОперандов[0].Счет);
					ПостроительЗапросаВнутр.Параметры.Вставить("СчетКт",СтрЗапрос.ТаблицаОперандов[0].КоррСчет);
					
				Иначе
					
					ПостроительЗапросаВнутр.Параметры.Вставить("Счет",СтрЗапрос.ТаблицаОперандов[0].Счет);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
					
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если НЕ ИспользуетсяПриОтборе(Параметр.СпособВычисленияПараметра) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(КонтекстОтчета,Параметр);

		Если ПараметрыЗапроса.Найти(Параметр.ИмяПараметра)=Неопределено Тогда
					
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
		ОтборПараметр.Использование=Истина;		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
		Иначе
			
			ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
			
		КонецЕсли;
			
	КонецЦикла;
	
	ПостроительЗапросаВнутр.Выполнить();
	
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();

	ЗаполнитьАналитикиПринудительно(ТабРезультат,ПравилаИспользованияПолей,КонтекстОтчета);
	
	Возврат ТабРезультат;

КонецФункции // ПолучитьТаблицуДанныхОбъектаТек()

Функция ПолучитьТаблицуПоИсточникуВнутрПроизвольный(КонтекстОтчета,СтрЗапрос) Экспорт
	
	Запрос=Новый Запрос;
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		СтрЗначения=ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр);
		
	КонецЦикла;
	
	Запрос.Текст=?(КонтекстОтчета.АнализЧувствительности,СтрЗаменить(СтрЗапрос.ТекстЗапроса,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),СтрЗапрос.ТекстЗапроса);
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Запрос.УстановитьПараметр(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
		
	КонецЦикла;
	
	ПравилаИспользованияПолей=СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса;
	
	
	ТабРезультат=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
		
		Если (НЕ (ТабРезультат.Колонки.Найти(СтрПоле.Поле)=Неопределено ИЛИ ПустаяСтрока(СтрПоле.КодАналитики)))
			И ТабРезультат.Колонки.Найти(СтрПоле.КодАналитики)=Неопределено Тогда 
			
			ТабРезультат.Колонки[СтрПоле.Поле].Имя=СтрПоле.КодАналитики;
			
		КонецЕсли;
		
	КонецЦикла;

	ЗаполнитьАналитикиПринудительно(ТабРезультат,ПравилаИспользованияПолей,КонтекстОтчета);
	
	Возврат ТабРезультат;
		
КонецФункции // ПолучитьТаблицуПоИсточникуВнутрПроизвольный() 

Функция ПроверитьНаличиеОтбора(Построитель,ПутьКДанным) Экспорт
	
	ЕстьОтбор=Ложь;
	
	Для Каждого Элемент ИЗ Построитель.Отбор Цикл
		
		Если Элемент.ПутьКДанным=ПутьКДанным Тогда
			
			ЕстьОтбор=Истина;
			Элемент.Использование=Истина;
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьОтбор;
		
КонецФункции // ПроверитьНаличиеОтбора() 

// Формирует построитель запроса к регистру "Значения показателей" для операнда, ссылающегося на показатель другого отчета
//
//
Функция ПолучитьТаблицуПоИсточникуВнутрПараметрический(КонтекстОтчета,СтрЗапрос,ПостроительЗапросаВнутр=Неопределено,ДополнительныеПоля=Неопределено) Экспорт
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	ПостроительЗапросаВнутр.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	ТекстВложенногоЗапроса=СтрЗапрос.ТекстЗапроса;
	
	Если КонтекстОтчета.АнализЧувствительности Тогда
		
		ТекстВложенногоЗапроса=СтрЗаменить(ТекстВложенногоЗапроса,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;	
			
	ПостроительЗапросаВнутр.Текст=ТекстВложенногоЗапроса;	
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	НастройкиОперанда=СтрЗапрос.ТаблицаОперандов[0].НастройкиОперанда.Получить();
	
	Если ТипЗнч(НастройкиОперанда)=Тип("Структура") И НастройкиОперанда.Свойство("ОтборПостроителя") Тогда
			
		Для Каждого ЭлементОтбора ИЗ НастройкиОперанда.ОтборПостроителя Цикл
			
			НовыйОтбор=ПостроительЗапросаВнутр.Отбор.Добавить(ЭлементОтбора.ПутьКДанным,ЭлементОтбора.Имя,ЭлементОтбора.Представление);
			
			НовыйОтбор.ВидСравнения=ЭлементОтбора.ВидСравнения;
			НовыйОтбор.Значение=ЭлементОтбора.Значение;
			НовыйОтбор.ЗначениеС=ЭлементОтбора.ЗначениеС;
			НовыйОтбор.ЗначениеПо=ЭлементОтбора.ЗначениеПо;
			НовыйОтбор.Использование=ЭлементОтбора.Использование;
			
		КонецЦикла
			
	КонецЕсли;
		
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется 
			ИЛИ ПроверитьНаличиеОтбора(ПостроительЗапросаВнутр,Параметр.ИмяПараметра) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
		
		ОтборПараметр.Использование=Истина;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(КонтекстОтчета,Параметр);
		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
		Если СтрНайти(Параметр.ПолеБД,"Аналитика")>0 
			И (Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению)
			И ПостроительЗапросаВнутр.Отбор.Найти("ИтоговоеЗначение")=Неопределено
			
			Тогда
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ИтоговоеЗначение");			
			ОтборПараметр.Использование=Истина;
			ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
			ОтборПараметр.Значение=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДобавитьОтборПоАктивности(ПостроительЗапросаВнутр, КонтекстОтчета, Истина);
	
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	ПравилаИспользованияПолей=СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса;
	
	Для Каждого Правило ИЗ ПравилаИспользованияПолей Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(Правило) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить(Правило.Поле,Правило.Синоним);
		
	КонецЦикла;
	
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");
	
	ПостроительЗапросаВнутр.Выполнить();
		
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();

	ЗаполнитьАналитикиПринудительно(ТабРезультат,ПравилаИспользованияПолей,КонтекстОтчета);
	
	Возврат ТабРезультат;
	
КонецФункции

Функция ПолучитьТаблицуДанныхПоФункции(КонтекстОтчета,СтрЗапрос) Экспорт
	
	Перем ТаблицаЗначенийОперанда;
	
	Попытка
		
		Если ТипЗнч(КонтекстОтчета)=Тип("ДокументОбъект.НастраиваемыйОтчет") ИЛИ
			ТипЗнч(КонтекстОтчета)=Тип("ДокументОбъект.ТрансформационнаяКорректировка")  Тогда
			
			Возврат ПолучитьЗначениеОперандаФункция(КонтекстОтчета,СтрЗапрос.ТекстЗапроса);
			
		Иначе
			
			Выполнить(СтрЗапрос.ТекстЗапроса);	
			Возврат ТаблицаЗначенийОперанда
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Во время исполнения процедуры вычисления операнда %НаименованиеОперанда%
		|		произошла следующая критическая ошибка: 
		|        %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОперанда%", Строка(СокрЛП(СтрЗапрос.ТаблицаОперандов[0].Наименование)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоФункции.1", , , ТекстСообщения);
				
		Возврат Неопределено;
		
	КонецПопытки;
		
КонецФункции // ПолучитьТаблицуДанныхПоФункции()

/////////////////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ИЗ БАЗ НА ПЛАТФОРМЕ 1С:ПРЕДПРИЯТИЕ 8


Функция ИспользуетсяПриОтборе(СпособВычисленияПараметра) Экспорт
	
	Возврат НЕ (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИ
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаИЛИ
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ГруппаНЕ
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений);
			
КонецФункции // ИспользуетсяПриОтборе() 

/////////////////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ИЗ БАЗ ЧЕРЕЗ ADO.
//


Функция ПолучитьДанныеСвязанныхТаблиц(ТекстСвязи) Экспорт
	
	ДанныеСвязи=Новый Соответствие;
		
	РабочийТекстСвязи=ТекстСвязи;
	
	////////////////////////////////////////////////////////////////
	// Связанная таблица описывается следующей цепочкой символов:
	// "({[ИмяСвязаннойТаблицы]}{УсловиеСвязи1}... {УсловиеСвязиХ})"
	// 
		
	Пока СтрДлина(РабочийТекстСвязи)>0 Цикл
		
		// Определим цепочку символов, описывающих связанную таблицу и условия связи
		
		НачалоОписанияСвязи = СтрНайти(РабочийТекстСвязи,"({[");
		КонецОписанияСвязи = СтрНайти(РабочийТекстСвязи,"]})");
		
		Если НачалоОписанияСвязи=0 ИЛИ КонецОписанияСвязи=0 Тогда 
			Прервать;
		КонецЕсли;
		
		// Получим имя связанной таблицы
		
		ОписаниеСвязаннойТаблицы=Сред(РабочийТекстСвязи,НачалоОписанияСвязи+1,КонецОписанияСвязи+2);
		
		НачалоОписанияТаблицы = СтрНайти(ОписаниеСвязаннойТаблицы,"{[");
		КонецОписанияТаблицы = СтрНайти(ОписаниеСвязаннойТаблицы,"]}");
		
		ИмяСвязаннойТаблицы=Сред(ОписаниеСвязаннойТаблицы,НачалоОписанияТаблицы+1,(КонецОписанияТаблицы-НачалоОписанияТаблицы));
		
		// Получим набор условий связи
		
		ТекстУсловияСвязи=Сред(ОписаниеСвязаннойТаблицы,КонецОписанияТаблицы+2);
		МассивУсловий=Новый Массив;
		
		Пока СтрДлина(ТекстУсловияСвязи)>0 Цикл
			
			НачалоУсловия = СтрНайти(ТекстУсловияСвязи,"{[");
			КонецУсловия = СтрНайти(ТекстУсловияСвязи,"]}");
			
			ТекстУсловия=Сред(ТекстУсловияСвязи,НачалоУсловия+1,(КонецУсловия-НачалоУсловия));
			
			Если Не ПустаяСтрока(ТекстУсловия) Тогда
				МассивУсловий.Добавить(ТекстУсловия);
			КонецЕсли;
			
			ТекстУсловияСвязи=Сред(ТекстУсловияСвязи,КонецУсловия+3);
			
		КонецЦикла;
				
		РабочийТекстСвязи=Сред(РабочийТекстСвязи,КонецОписанияСвязи+3);
		
		ДанныеСвязи.Вставить(ИмяСвязаннойТаблицы,МассивУсловий);
			
	КонецЦикла;
	
	Возврат ДанныеСвязи;
		
КонецФункции // ПолучитьДанныеСвязанныхТаблиц()

Функция ПолучитьИмяСвязаннойТаблицы(ТекстСвязи="",ДанныеСвязи=Неопределено) Экспорт
	
	Если ДанныеСвязи=Неопределено Тогда
		ДанныеСвязи=ПолучитьДанныеСвязанныхТаблиц(ТекстСвязи);
	КонецЕсли;
	
	ИмяТаблицы="";
	
	Для Каждого КлючИЗначение ИЗ ДанныеСвязи Цикл
		ИмяТаблицы=КлючИЗначение.Ключ;
	КонецЦикла;
	
	Возврат Сред(ИмяТаблицы,2,СтрДлина(ИмяТаблицы)-2);
		
КонецФункции // ПолучитьИмяСвязаннойТаблицы()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАСШИФРОВКИ ДАННЫХ ОТЧЕТОВ

Функция ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,ТолькоСсылка,ДополнительныйОтбор=Неопределено)
	
	Если ТипЗнч(СтрОперанд) =  Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов") Тогда
		
		Если ТолькоСсылка Тогда
			Возврат СтрОперанд;
		Иначе
			
			ТабЗапросы=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(,,,,СтрОперанд,ДополнительныйОтбор).мТабПоказателиЗапросы;
			
			Если ТабЗапросы.Количество()=0 Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось определить данные операнда для расчета.'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
				Возврат Неопределено;
			КонецЕсли;
			
			СтрЗапрос=ТабЗапросы[0];
			Возврат СтрЗапрос;
			
		КонецЕсли;
		
	Иначе
		
		Если ТолькоСсылка Тогда
			Возврат СтрОперанд.ТаблицаОперандов[0].Ссылка;
		Иначе
			Возврат СтрЗапрос;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьДанныеОперандаДляРасшифровки()

//////////////////////////////////////////////////////////////////////////////////////////////////////
// Предназначена для расшифровки данных, полученных с помощью источников данных для расчетов
//
// Параметры:
//	СтрОперанд: ссылка на элемент справочника "ИсточникиДанныхДляРасчетов" или строка таблицы мТабПоказателиЗапросы
//  КонтекстОтчета: структура, содержащая данные исходные параметры для расшифровки:
//		Организация,
//		ПериодОтчета,
//		Сценарий,
//		ОсновнаяВалюта,
//		Ссылка (ссылка на экземпляр отчета, если расшифровываются его данные),
//		АнализЧувствительности,
//		ЧтениеНеактуальныхЗаписей,
//		УправляемыйРежим,
//      ИспользуемаяИБ,
//      Аналитики 1-5 на уровне отчета.
//	Дополнительный отбор: структура, ключом которой является поле, значениями - значения отборов
//	ОтчетОбъект: документ вида "НастраиваемыйОтчет", данные которого расшифровываются. 
//
Функция РасшифроватьДанныеОперанда(СтрОперанд, ЗНАЧ КонтекстОтчета=Неопределено,ЗНАЧ ДополнительныйОтбор = Неопределено, ЗНАЧ ОтчетОбъект=Неопределено) Экспорт 
	
	Если КонтекстОтчета=Неопределено И ОтчетОбъект=Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось определить контекст отчета.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат Неопределено;
		
	КонецЕсли;

	Если КонтекстОтчета=Неопределено Тогда
			
		КонтекстОтчета=ОтчетОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
		
	КонецЕсли;
	
	Если КонтекстОтчета.УправляемыйРежим И ЗначениеЗаполнено(КонтекстОтчета.ИспользуемаяИБ) Тогда
		
		Если КонтекстОтчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
			
			СтрЗапрос=ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Ложь,ДополнительныйОтбор);
			
			СтруктураПараметров=Новый Структура;
			СтруктураПараметров.Вставить("ОбъектРасчета",КонтекстОтчета);
			СтруктураПараметров.Вставить("Операнд",СтрЗапрос.ТаблицаОперандов[0].Ссылка);
			СтруктураПараметров.Вставить("СтрЗапрос",СтрЗапрос);
			СтруктураПараметров.Вставить("Расшифровка77",Истина);
							
			Возврат СтруктураПараметров;
			
		Иначе
				
			ОперандСсылка=ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Истина);
			
			Если СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
				
				СтрЗапрос=ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Ложь,ДополнительныйОтбор);
				
				ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
				
				Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
					
					СтрЗначения=ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр);
					
				КонецЦикла;
				
				СтруктураПараметров=Новый Структура;
				СтруктураПараметров.Вставить("ИспользуемаяИБ",КонтекстОтчета.ИспользуемаяИБ);
				СтруктураПараметров.Вставить("ТипБД",КонтекстОтчета.ИспользуемаяИБ.ТипБД);
				СтруктураПараметров.Вставить("ПравилаИспользованияПолейЗапроса",ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса));
				СтруктураПараметров.Вставить("ПравилаВычисленияПараметровЗапроса",ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(ТекПравилаВычисленияПараметров));
				СтруктураПараметров.Вставить("ТекстЗапроса",СтрЗапрос.ТекстЗапроса);
				СтруктураПараметров.Вставить("ФормироватьПриОткрытии",Истина);
				СтруктураПараметров.Вставить("СпособПолучения",Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос);
				
				Возврат СтруктураПараметров;
				
			ИначеЕсли СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				
				Возврат ПолучитьПараметрыОтчетаПроизвольногоЗапросаТек(СтрОперанд,КонтекстОтчета);
					
			Иначе
				
				Возврат ПолучитьПараметрыОтчетаПоРегиструБД(ОперандСсылка, КонтекстОтчета, ДополнительныйОтбор);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии 
			ИЛИ СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
			ИЛИ СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
			ИЛИ СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления Тогда
			
			ОперандСсылка=ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Истина);	
						
			Возврат ПолучитьПараметрыОтчетаПоРегиструБД(ОперандСсылка, КонтекстОтчета, ДополнительныйОтбор);
					
		ИначеЕсли СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
			
			СтрЗапрос=ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Ложь,ДополнительныйОтбор);
			
			Возврат ПолучитьПараметрыОтчетаПроизвольногоЗапросаВИБ(СтрЗапрос, КонтекстОтчета);
			
		ИначеЕсли СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
			
			СтрЗапрос=ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Ложь,ДополнительныйОтбор);
			Возврат ПолучитьПараметрыОтчетаПроизвольногоЗапросаТек(СтрЗапрос,КонтекстОтчета);
 						
		ИначеЕсли СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
			ИЛИ СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
			
			Возврат ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Ложь,ДополнительныйОтбор);
						
		ИначеЕсли СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
			Возврат ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Ложь,ДополнительныйОтбор);
						
		ИначеЕсли СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда
			
			Возврат ПолучитьДанныеОперандаДляРасшифровки(СтрОперанд,Истина);	
						
		КонецЕсли;
				
	КонецЕсли;
		
КонецФункции // РасшифроватьДанныеОперанда()

Функция ПолучитьПараметрыРасчетаПоказателя(ОбъектРасчета,Показатель) Экспорт
	
	Перем Ссылка;
	
	ИмяТаблицыСинтетики=?(ОбъектРасчета.МаксАналитикОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+ОбъектРасчета.МаксАналитикОтчета);
	ОбъектРасчета.Свойство("Ссылка",Ссылка);
	
	/////////////////////////////////////////////////////////////////////////////
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВерсииЗначенийПлказателей
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И ВерсииЗначенийПоказателей.Организация = &Организация
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И НЕ ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ОбъектРасчета.Свойство("Аналитика"+Индекс) И ЗначениеЗаполнено(ОбъектРасчета["Аналитика"+Индекс]) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|	И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;
			Запрос.УстановитьПараметр("Аналитика"+Индекс,ОбъектРасчета["Аналитика"+Индекс]);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетовСинтетика.Версия КАК Версия,
	|	ЗначенияПоказателейОтчетовСинтетика.ДатаИзмененияMs КАК ДатаИзмененияMs,
	|	ЗначенияПоказателейОтчетовСинтетика.СпособФормированияОтчета КАК СпособФормированияОтчета,
	|	ЗначенияПоказателейОтчетовСинтетика.ПравилоОбработки КАК ПравилоОбработки,
	|	ЗначенияПоказателейОтчетовСинтетика.ИспользуемаяИБ КАК ИспользуемаяИБ
	|ПОМЕСТИТЬ ПоказателиСинтетика
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	|ГДЕ
	|	ЗначенияПоказателейОтчетовСинтетика.Показатель = &Показатель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Версия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоказателиСинтетика.СпособФормированияОтчета КАК СпособФормированияОтчета,
	|	ПоказателиСинтетика.ПравилоОбработки КАК ПравилоОбработки,
	|	ПоказателиСинтетика.ИспользуемаяИБ КАК ИспользуемаяИБ
	|ИЗ
	|	ПоказателиСинтетика КАК ПоказателиСинтетика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииЗначенийПлказателей КАК ВерсииЗначенийПлказателей
	|		ПО ПоказателиСинтетика.Версия = ВерсииЗначенийПлказателей.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиСинтетика.ДатаИзмененияMs УБЫВ";
	
	Запрос.УстановитьПараметр("ВидОтчета",ОбъектРасчета.ВидОтчета);
	Запрос.УстановитьПараметр("Валюта", 		ОбъектРасчета.ОсновнаяВалюта);
	Запрос.УстановитьПараметр("Организация", 	ОбъектРасчета.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета", ОбъектРасчета.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий", 	ОбъектРасчета.Сценарий);	
	Запрос.УстановитьПараметр("Проект", 		ОбъектРасчета.Проект);
	Запрос.УстановитьПараметр("Показатель",Показатель);
	
	ПараметрыРасчета=Новый Структура("ПравилоОбработки,ИспользуемаяИБ,СпособФормированияОтчета");
	
	Запрос.УстановитьПараметр("Показатель",Показатель);
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета,Результат);
		
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции // ПолучитьПараметрыРасчетаПоказателя() 

// Процедура отображает расшифровку операнда внешней информационной базы.
// 
Функция ПолучитьПараметрыОтчетаПоРегиструБД(ОперандСсылка, КонтекстОтчета, ДополнительныйОтбор = Неопределено) Экспорт
	
	ОперандОбъект=ОперандСсылка.ПолучитьОбъект();
	ОперандОбъект.ПодготовитьТаблицыСопоставленийИОтборов();
				
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("РегистрБД",				ОперандОбъект.РегистрБД);
	СтруктураПараметров.Вставить("ТипБД",					ОперандОбъект.РегистрБД.Владелец);
	СтруктураПараметров.Вставить("ИспользуемаяИБ",			КонтекстОтчета.ИспользуемаяИБ);
	СтруктураПараметров.Вставить("ФормироватьПриОткрытии",Истина);
	СтруктураПараметров.Вставить("СпособПолучения",			ОперандОбъект.СпособПолучения);
	СтруктураПараметров.Вставить("ОсновнаяТаблицаРегистра",	ОперандОбъект.ОсновнаяТаблицаРегистра);
	СтруктураПараметров.Вставить("ВидДвижения",				ОперандОбъект.ВидИтога);
		
	ОтчетПоРегиструБухгалтерии=(ОперандОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
				ИЛИ ОперандОбъект.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии);
				
	Если ОтчетПоРегиструБухгалтерии Тогда
					
		СтруктураПараметров.Вставить("ПланСчетовБД",			?(ЗначениеЗаполнено(ОперандОбъект.ПланСчетовБД),ОперандОбъект.ПланСчетовБД,ОперандОбъект.РегистрБД.ПланСчетов));
			
	КонецЕсли; 
	
	РасшифровкаТрансляции=ТипЗнч(ДополнительныйОтбор)=Тип("Структура")
		И ДополнительныйОтбор.Свойство("ИдентификаторФинЗаписи");
		
				
	////////////////////////////////////////////////////////////////////////////////////
	// Заполним таблицу детализации
	
	МассивДетализация			= Новый Массив;
	МассивПроизводные			= Новый Массив;
	МассивОтбор      			= Новый Массив;
	МассивДополнительныйОтбор 	= Новый Массив;
	СписокПоказателей			= Новый СписокЗначений;
	
	Для Каждого СтрПоле ИЗ ОперандОбъект.ПравилаИспользованияПолейЗапроса Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
			
			Продолжить;
		
		ИначеЕсли СтрПоле.КодАналитики="Значение" Тогда
			
			Если НЕ РасшифровкаТрансляции Тогда 
				
				Если ОперандОбъект.ОсновнаяТаблицаРегистра Тогда
					
					СписокПоказателей.Добавить(ОперандОбъект.РесурсРегистра);
					
				ИначеЕсли ОтчетПоРегиструБухгалтерии Тогда
					
					ДанныеРесурса=СтрЗаменить(СтрПоле.Поле,СтрЗаменить(ОперандОбъект.ВидИтога,"#",""),"");
					ДанныеРесурса=СтрЗаменить(ДанныеРесурса,ОперандОбъект.ДтКт,"");	
					СписокПоказателей.Добавить(ДанныеРесурса);
					
				Иначе
					
					СписокПоказателей.Добавить(СтрПоле.Поле);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ИмяПоля=СтрПоле.Поле;
	
			ТекПараметрВИБ=ОперандОбъект.НайтиСтрокуДанныхБДПоПолю(ИмяПоля);
			
			СтруктураДетализация=Новый Структура;
			СтруктураДетализация.Вставить("ИмяПоля",ТекПараметрВИБ.ПолеБД);
			СтруктураДетализация.Вставить("ПсевдонимПоля",СтрЗаменить(ТекПараметрВИБ.ПолеБД,".",""));
			СтруктураДетализация.Вставить("ПредставлениеПоля",ТекПараметрВИБ.НаименованиеБД);
			
			Если ЗначениеЗаполнено(СтрПоле.НастройкаСоответствия) Тогда
				
				СтруктураДетализация.Вставить("ТипМетаДанных",СтрПоле.НастройкаСоответствия.ТипОбъектаВИБ);
				СтруктураДетализация.Вставить("ИмяОбъектаМетаданных",СтрПоле.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование);
				
			ИначеЕсли ЗначениеЗаполнено(ТекПараметрВИБ.ТипМетаДанных) Тогда
				
				СтруктураДетализация.Вставить("ТипМетаДанных",ТекПараметрВИБ.ТипМетаДанных);
				СтруктураДетализация.Вставить("ИмяОбъектаМетаданных",ТекПараметрВИБ.СправочникБД);
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;
			
			МассивДетализация.Добавить(СтруктураДетализация);
			
			Если ТипЗнч(ДополнительныйОтбор)=Тип("Структура")
				И ДополнительныйОтбор.Свойство(СтрПоле.КодАналитики) Тогда
				
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("ИмяПараметра",ТекПараметрВИБ.ПолеБД);
				СтруктураОтбора.Вставить("ПредставлениеПараметра",ТекПараметрВИБ.НаименованиеБД);
				СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
				СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ДополнительныйОтбор[СтрПоле.КодАналитики]);
				СтруктураОтбора.Вставить("НастройкаСоответствия",СтрПоле.НастройкаСоответствия);
				
				МассивДополнительныйОтбор.Добавить(СтруктураОтбора);
				
			КонецЕсли;
				
		КонецЕсли;	
		
	КонецЦикла; 
	
	Если РасшифровкаТрансляции Тогда
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("ИмяПараметра","ИдентификаторФинЗаписи");
		СтруктураОтбора.Вставить("ПредставлениеПараметра","ИдентификаторФинЗаписи");
		СтруктураОтбора.Вставить("СпособВычисленияПараметра",Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение);
		СтруктураОтбора.Вставить("УточнениеСпособаОпределения",ДополнительныйОтбор.ИдентификаторФинЗаписи);
		
		МассивДополнительныйОтбор.Добавить(СтруктураОтбора);
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиДанныхДляРасчетовСоответствиеРесурсовДляТрансляции.РесурсИсточник КАК РесурсИсточник
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов.СоответствиеРесурсовДляТрансляции КАК ИсточникиДанныхДляРасчетовСоответствиеРесурсовДляТрансляции
		|ГДЕ
		|	ИсточникиДанныхДляРасчетовСоответствиеРесурсовДляТрансляции.Ссылка = &Ссылка"; 
		
		Запрос.УстановитьПараметр("Ссылка",ОперандОбъект.ИсточникШаблон);
		СписокПоказателей.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("РесурсИсточник"));
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("СписокПоказателей",СписокПоказателей);
	СтруктураПараметров.Вставить("МассивДетализация",МассивДетализация);
	СтруктураПараметров.Вставить("МассивДополнительныйОтбор",МассивДополнительныйОтбор);
	
	Для Каждого Строка ИЗ ОперандОбъект.мТаблицаПроизводныхБД Цикл
		
		СтруктураПроизводных=Новый Структура("ПолеБД,НаименованиеБД,ТипЗначения,ТипМетаДанных,ТипДанныхПоля,ТолькоОбороты,ПризнакиУчетаСубконто,Измерение,Дебетовый,СправочникБД,Балансовый,ПризнакУчета");
		ЗаполнитьЗначенияСвойств(СтруктураПроизводных,Строка);
		
		МассивПроизводные.Добавить(СтруктураПроизводных);
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("МассивПроизводные",МассивПроизводные);
	
	////////////////////////////////////////////////////////////////////////////////////
	// Заполним таблицу отборов
	
	Если ОтчетПоРегиструБухгалтерии Тогда
		
		ОтборПоИзмерениям=Новый Массив;
			
	КонецЕсли;
			
	Для Каждого СтрПараметр ИЗ ОперандОбъект.мТабПравилаВычисленияПараметров Цикл
		
		Если НЕ ИспользуетсяПриОтборе(СтрПараметр.СпособВычисленияПараметра) Тогда
			
			Продолжить;
						
		Иначе
			
			ДанныеОтбора=ПолучитьДанныеОтбораДляРасшифровки(КонтекстОтчета,СтрПараметр);
			
			Если ДанныеОтбора.ИмяПараметра="ДатаНач" Тогда
				СтруктураПараметров.Вставить("ДатаНач",ДанныеОтбора.УточнениеСпособаОпределения);
			ИначеЕсли ДанныеОтбора.ИмяПараметра="ДатаКон" Тогда
				СтруктураПараметров.Вставить("ДатаКон",ДанныеОтбора.УточнениеСпособаОпределения);
			Иначе
				
				Если ОтчетПоРегиструБухгалтерии И СтрНайти(ДанныеОтбора.ИмяПараметра,"Субконто")=0 Тогда
					
					ОтборПоИзмерениям.Добавить(Новый Структура("ИмяПараметра,Значение,НастройкаСоответствия",ДанныеОтбора.ИмяПараметра,ДанныеОтбора.УточнениеСпособаОпределения,ДанныеОтбора.НастройкаСоответствия));
					
				Иначе	
					
					МассивОтбор.Добавить(ДанныеОтбора);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтчетПоРегиструБухгалтерии Тогда
		
		СтруктураПараметров.Вставить("Счет",ОперандОбъект.Счет);
		СтруктураПараметров.Вставить("КоррСчет",ОперандОбъект.КоррСчет);
		СтруктураПараметров.Вставить("ОтборПоИзмерениям",ОтборПоИзмерениям);
		СтруктураПараметров.Вставить("ОтборПоСубконто",МассивОтбор);
		
		Если ЗначениеЗаполнено(ОперандОбъект.КоррСчет) Тогда
			СтруктураПараметров.Вставить("ВидОтчета","ОтчетПоПроводкам");
		Иначе
			СтруктураПараметров.Вставить("ВидОтчета","ОборотноСальдоваяВедомостьПоСчету");
		КонецЕсли;
				
	Иначе
		
		СтруктураПараметров.Вставить("МассивОтбор",МассивОтбор);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
		
КонецФункции // ПолучитьПараметрыОтчетаПоРегиструВИБ()



Функция ПолучитьПараметрыОтчетаПроизвольногоЗапросаВИБ(СтрЗапрос,КонтекстОтчета) Экспорт
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		СтрЗначения=ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр);
		
	КонецЦикла;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ИспользуемаяИБ",КонтекстОтчета.ИспользуемаяИБ);
	СтруктураПараметров.Вставить("ПравилаИспользованияПолейЗапроса",ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса));
	СтруктураПараметров.Вставить("ПравилаВычисленияПараметровЗапроса",ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(ТекПравилаВычисленияПараметров));
	СтруктураПараметров.Вставить("ТекстЗапроса",СтрЗапрос.ТекстЗапроса);
	СтруктураПараметров.Вставить("ФормироватьПриОткрытии",Истина);
	СтруктураПараметров.Вставить("СпособПолучения",Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос);
		
	Возврат СтруктураПараметров; 
		
КонецФункции // ПолучитьПараметрыОтчетаПроизвольногоЗапросаВИБ() 

Функция ПолучитьПараметрыОтчетаПроизвольногоЗапросаТек(СтрЗапрос,КонтекстОтчета) Экспорт
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ТекстЗапроса",СтрЗапрос.ТекстЗапроса);
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();

	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		СтрЗначения=ПолучитьСвойстваПараметра(КонтекстОтчета, СтрокаПараметр);
		
	КонецЦикла;
	
	СтруктураПараметров.Вставить("СпособПолучения",						СтрЗапрос.СпособПолучения);
	СтруктураПараметров.Вставить("ПравилаВычисленияПараметровЗапроса",	ПроцедурыПреобразованияДанныхУХ.ПолучитьМассивСтруктурИЗТаблицы(ТекПравилаВычисленияПараметров));
	СтруктураПараметров.Вставить("ФормироватьПриОткрытии",				Истина);
	СтруктураПараметров.Вставить("ЧтениеНеактуальныхЗаписей",			ИспользоватьНеактуальныеЗаписи(КонтекстОтчета));
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьПараметрыОтчетаПроизвольногоЗапросаТек()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПОЛУЧЕНИЕ ДАННЫХ ИЗ БАЗ НА ПЛАТФОРМЕ 1С:ПРЕДПРИЯТИЕ 7.7


/////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ТАБЛИЦЫ ИСТОЧНИКА ДАННЫХ

Функция ПолучитьТаблицуДанныхПоИсточнику(КонтекстОтчета,ИсточникДанных,ТолькоПроверка=Ложь) Экспорт
	
	ТабЗапросы=ПолучитьДанныеОперандовДляРасчета(Ложь,,,,ИсточникДанных).мТабПоказателиЗапросы;
	
	Если ТабЗапросы.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось определить данные операнда для расчета.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Если КонтекстОтчета=Неопределено Тогда  // Определяем контекст по значениям для проверки
		
		КонтекстОтчета=Новый Структура("ПериодОтчета,Организация,Проект,Сценарий,ОсновнаяВалюта",
		Справочники.Периоды.ПустаяСсылка(),
		Справочники.Организации.ПустаяСсылка(),
		Справочники.Проекты.ПустаяСсылка(),
		Справочники.Сценарии.ПустаяСсылка(),
		Справочники.Валюты.ПустаяСсылка());
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			КонтекстОтчета.Вставить("Аналитика"+Индекс,Справочники.ПроизвольныйКлассификаторУХ.ПустаяСсылка());
			
		КонецЦикла;
		
		Для Каждого СтрОтбор ИЗ ТабЗапросы[0].ПравилаВычисленияПараметров Цикл
			
			Если СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется
				ИЛИ (Не ЗначениеЗаполнено(СтрОтбор.ЗначениеДляПроверки)) Тогда
				Продолжить;
			Конецесли;
			
			Если СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
				
				КонтекстОтчета.Вставить("ПериодОтчета",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда
				
				КонтекстОтчета.Вставить("Организация",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета Тогда
				
				КонтекстОтчета.Вставить("Проект",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета Тогда
				
				КонтекстОтчета.Вставить("Сценарий",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
				
				КонтекстОтчета.Вставить("ОсновнаяВалюта",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Аналитика1 Тогда
				
				КонтекстОтчета.Вставить("Аналитика1",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Аналитика2 Тогда
				
				КонтекстОтчета.Вставить("Аналитика2",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Аналитика3 Тогда
				
				КонтекстОтчета.Вставить("Аналитика3",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Аналитика4 Тогда
				
				КонтекстОтчета.Вставить("Аналитика4",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Аналитика5 Тогда
				
				КонтекстОтчета.Вставить("Аналитика5",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Аналитика6 Тогда
				
				КонтекстОтчета.Вставить("Аналитика6",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли ТипЗнч(СтрОтбор.ЗначениеДляПроверки)=Тип("СправочникСсылка.Периоды") И (НЕ ЗначениеЗаполнено(КонтекстОтчета.ПериодОтчета)) Тогда
				
				КонтекстОтчета.Вставить("ПериодОтчета",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли ТипЗнч(СтрОтбор.ЗначениеДляПроверки)=Тип("СправочникСсылка.Организации") И (НЕ ЗначениеЗаполнено(КонтекстОтчета.Организация)) Тогда
				
				КонтекстОтчета.Вставить("Организация",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли ТипЗнч(СтрОтбор.ЗначениеДляПроверки)=Тип("СправочникСсылка.Сценарии") И (НЕ ЗначениеЗаполнено(КонтекстОтчета.Сценарий)) Тогда
				
				КонтекстОтчета.Вставить("Сценарий",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли ТипЗнч(СтрОтбор.ЗначениеДляПроверки)=Тип("СправочникСсылка.Проекты") И (НЕ ЗначениеЗаполнено(КонтекстОтчета.Проект)) Тогда
				
				КонтекстОтчета.Вставить("Проект",СтрОтбор.ЗначениеДляПроверки);
				
			ИначеЕсли ТипЗнч(СтрОтбор.ЗначениеДляПроверки)=Тип("СправочникСсылка.Валюты") И (НЕ ЗначениеЗаполнено(КонтекстОтчета.ОсновнаяВалюта)) Тогда
				
				КонтекстОтчета.Вставить("ОсновнаяВалюта",СтрОтбор.ЗначениеДляПроверки);
				
			Иначе
		
				Если ЗначениеЗаполнено(СтрОтбор.ИмяПараметра) Тогда
					КонтекстОтчета.Вставить(СтрОтбор.ИмяПараметра, СтрОтбор.ЗначениеДляПроверки);
				Иначе
					// Неизвестный вариант получения и неизвестное поле. Ничего не делаем.
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
				
		КонтекстОтчета.Вставить("ИспользуемаяИБ",				ИсточникДанных.ТипБД.ВИБПоУмолчанию);
		КонтекстОтчета.Вставить("ЧтениеНеактуальныхЗаписей",	Истина);
		КонтекстОтчета.Вставить("АнализЧувствительности",		Ложь);
		
	КонецЕсли;
	
	Если ТолькоПроверка Тогда
		КонтекстОтчета.Вставить("ТолькоПроверка",Истина);
	КонецЕсли;
	
	КонтекстОтчета.Вставить("База");
		
	СтрЗапрос=ТабЗапросы[0];
	
	Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
			
		ТаблицаДанных=ПолучитьТаблицуПоИсточникуВнутрПоказатель(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
			
		ТаблицаДанных=ПолучитьТаблицуПоИсточникуВнутрГруппаРаскрытия(КонтекстОтчета,СтрЗапрос);

	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
		
		ТаблицаДанных=ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда	
		
		ТаблицаДанных=ПолучитьТаблицуПоИсточникуВнутрПараметрический(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
		
		ТаблицаДанных=ПолучитьТаблицуПоИсточникуВнутрПроизвольный(КонтекстОтчета,СтрЗапрос); 
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ФункцияНаВстроенномЯзыке Тогда
		
		ТаблицаДанных=ПолучитьТаблицуДанныхПоФункции(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии Тогда
		
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
		
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ_77(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
		
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхРегистраНакопленияВИБ_77(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений Тогда				  
		
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхРегистраНакопленияВИБ(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда
		
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхПроизвольногоЗапросаВИБ(КонтекстОтчета,СтрЗапрос);
				
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
		
		Если НЕ КонтекстОтчета.Свойство("ПутьКФайлуADO") Тогда	
			
			КонтекстОтчета.Вставить("ПутьКФайлуADO");
			
		КонецЕсли;
		КонтекстОтчета.Вставить("ДополнительныеСвойства",Новый Структура("ДополнительныеСвойстваИмпорта"));
		КонтекстОтчета.Вставить("ИмяФайла",ИсточникДанных.ТаблицаADO.ИмяФайла);
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхADO(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники Тогда
		
		ТаблицаДанных=ПолучитьТаблицуДанныхОбъектаТек(КонтекстОтчета,СтрЗапрос);
		
	ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		ТаблицаДанных=РасширениеИнтеграцииУХ.ПолучитьТаблицуДанныхОбъектаВИБ(КонтекстОтчета,СтрЗапрос);
		
	КонецЕсли;
	
	Возврат ТаблицаДанных;
		
КонецФункции // ПолучитьТаблицуДанныхПоИсточнику() 

Процедура ПреобразоватьТаблицуПоказателя(ТаблицаЗначений, ИсточникДанныхОтчета) Экспорт
	
	Если ТаблицаЗначений = Неопределено Тогда	
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ 
	|	ТЗ.Значение,
	|	ТЗ.ИтогПоПоказателю";
	
	Для Каждого Кол из ТаблицаЗначений.Колонки Цикл
		
		Если Строка(Кол.ТипЗначения) <> "" Тогда			
			Запрос.Текст = Запрос.Текст + ",
			|	ТЗ." + Кол.Имя; 			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст= Запрос.Текст + "	
	|ПОМЕСТИТЬ ТЗВРЕМ
	|	ИЗ &ТЗ КАК ТЗ
	|; 
	|
	|/////////////////////////////////        
	|ВЫБРАТЬ 
	|	ТЗВРЕМ.Значение КАК " + ИсточникДанныхОтчета.ПоказательОтбор.Код;
	
	Для Каждого Кол Из ТаблицаЗначений.Колонки Цикл
		
		Если СтрНайти(Кол.Имя,"Аналитика") > 0 И Строка(Кол.ТипЗначения) <> "" Тогда  
			Запрос.Текст = Запрос.Текст + ",
			|	ТЗВРЕМ." + Кол.Имя;
			
		ИначеЕсли СтрНайти(Кол.Имя,"Версия") > 0 И Строка(Кол.ТипЗначения) <> "" Тогда  
			Запрос.Текст = Запрос.Текст + ",
			|	ТЗВРЕМ." + Кол.Имя + " КАК " + СтрЗаменить(Кол.Имя,"Версия",""); 	 
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + ",
	|	ТЗВРЕМ.Показатель КАК Показатель
	|ИЗ ТЗВРЕМ КАК ТЗВРЕМ"; 
	Если ИсточникДанныхОтчета.ПоказательОтбор.ГруппаРаскрытия <> Справочники.ГруппыРаскрытия.ПустаяСсылка() Тогда		
		Запрос.Текст = Запрос.Текст + "	ГДЕ ТЗВРЕМ.ИтогПоПоказателю = ЛОЖЬ";		
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|;
	|////////////////////////////////
	| УНИЧТОЖИТЬ ТЗВРЕМ";
	
	Запрос.УстановитьПараметр("ТЗ",ТаблицаЗначений);
	ТаблицаЗначений = Запрос.Выполнить().Выгрузить();	
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СИНХРОНИЗАЦИИ ПОЛУЧЕННЫХ ИЗВНЕ ДАННЫХ С АНАЛИТИКОЙ ТЕКУЩЕЙ ИНФОРМАЦИОННОЙ БАЗЫ 


Функция ПолучитьПланСчетовОрганизации(Организация,Сценарий,ПериодОтчета) Экспорт
	
	Если НЕ (ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(Сценарий)
		И ЗначениеЗаполнено(ПериодОтчета)) Тогда
		
		Возврат Константы.ПланСчетовПоУмолчанию.Получить();
		
	КонецЕсли; 
	
	Если НЕ Метаданные.ОбщиеМодули.Найти("КорректировкиЗначенийПоказателей32")=Неопределено Тогда
		
		МодульКорректировки=ОбщегоНазначения.ОбщийМодуль("КорректировкиЗначенийПоказателей32");
		Возврат МодульКорректировки.ПолучитьПланСчетовОрганизации(Организация,Сценарий,ПериодОтчета);
		
	Иначе
		
		ПланСчетов=ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация,"ПланСчетов");
		
		Если Не ЗначениеЗаполнено(ПланСчетов) Тогда
			
			Возврат Константы.ПланСчетовПоУмолчанию.Получить();
			
		Иначе
			
			Возврат ПланСчетов;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецФункции // ПолучитьПланСчетовОрганизации() 

Функция ПолучитьДанныеДляПроведения(Организация) Экспорт
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ПланСчетов",Константы.ПланСчетовПоУмолчанию.Получить());
	
	МассивРегистров=ПолучитьМассивРегистровБухгалтерии(СтруктураПараметров.ПланСчетов);
			
	Если МассивРегистров.Количество()>0 Тогда
		
		СтруктураПараметров.Вставить("РегистрБухгалтерии",МассивРегистров[0]);
				
	Иначе
		
		СтруктураПараметров.Вставить("РегистрБухгалтерии");
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
				
КонецФункции // ПолучитьДанныеДляПроведения()
				 
Процедура ПолучитьПараметрыЗапросаПоОперанду(ДанныеЗапроса)
	
	Перем ВидОтчета;
	Перем ЧислоАналитикГруппыРаскрытия;
	Перем ЧисловойПоказатель;
	
	СтрОперанд=ДанныеЗапроса.СтрОперанд;
	МаксАналитикаОтбора=0;
	АналитикВидаОтчета=0;
	ТолькоЧисловые=Истина;
	
	Если СтрОперанд.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		
		ВидОтчета=СтрОперанд.ВидОтчетаОтбор;
		ЧислоАналитикГруппыРаскрытия=СтрОперанд.ЧислоАналитикГруппыРаскрытия;
		ЧисловойПоказатель=СтрОперанд.ЧисловойПоказатель;
		
		АналитикВидаОтчета=0;
		
		Для Индекс=1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(СтрОперанд["АналитикаОтчета"+Индекс]) Тогда
				АналитикВидаОтчета=Индекс;
			КонецЕсли;
		КонецЦикла;
				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		
		ДанныеЗапроса.Вставить("ВидОтчета",ВидОтчета);
		
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ЧисловойПоказатель) Тогда
		
		ТабНомеровАналитик=Новый ТаблицаЗначений;
		ТабНомеровАналитик.Колонки.Добавить("ЧисловойПоказатель");
		ТабНомеровАналитик.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия");
		
		НоваяСтрока=ТабНомеровАналитик.Добавить();
		НоваяСтрока.ЧисловойПоказатель=ЧисловойПоказатель;
		НоваяСтрока.ЧислоАналитикГруппыРаскрытия=ЧислоАналитикГруппыРаскрытия;
		
		ДанныеЗапроса.Вставить("ТабНомеровАналитик",ТабНомеровАналитик);
		ТолькоЧисловые=ЧисловойПоказатель;
		
	КонецЕсли;
	
	// Определяем максимальный номер аналитики, по которой производится отбор
	
	Для Каждого СтрОтбор ИЗ СтрОперанд.ПравилаВычисленияПараметровЗапроса Цикл
		
		Если СтрНайти(СтрОтбор.ИмяПараметра,"АналитикаВалюта")>0 Тогда
			
			ЕстьОтборПоВалюте=Истина;
			
		ИначеЕсли СтрНайти(СтрОтбор.ПолеБД,"Аналитика")=0 ИЛИ СтрОтбор.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		Иначе
			
			НомерАналитикиОтбора=Число(Лев(СтрЗаменить(СтрОтбор.ПолеБД,"Аналитика",""),1));
			
			Если НомерАналитикиОтбора>МаксАналитикаОтбора Тогда
				
				МаксАналитикаОтбора=НомерАналитикиОтбора;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Определяем максимальный номер аналитики, по которой разворачивается операнд
	
	МаксАналитикаРазворота=0;
	ЕстьРазворотПоВалюте=Ложь;
	
	Для Каждого СтрАналитика ИЗ СтрОперанд.ПравилаИспользованияПолейЗапроса Цикл
		
		Если СтрНайти(СтрАналитика.Поле,"Аналитика")=0 ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрАналитика) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрАналитика.Поле,"АналитикаВалюта")>0 Тогда
			
			ЕстьРазворотПоВалюте=Истина;
			
		Иначе
			
			НомерАналитикиРазворота=Число(Лев(СтрЗаменить(СтрАналитика.Поле,"Аналитика",""),1));
			
			Если НомерАналитикиРазворота>МаксАналитикаРазворота Тогда
				
				МаксАналитикаРазворота=НомерАналитикиРазворота;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",МаксАналитикаОтбора<=АналитикВидаОтчета);
	
	МаксИспользуемаяАналитика=Макс(МаксАналитикаОтбора,МаксАналитикаРазворота);
	
	ДанныеЗапроса.Вставить("ВыводитьАналитику",(МаксИспользуемаяАналитика>АналитикВидаОтчета) ИЛИ ЕстьРазворотПоВалюте ИЛИ ЕстьОтборПоВалюте);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",ТолькоЧисловые);
	ДанныеЗапроса.Вставить("ГруппироватьЗначения",Ложь);
	ДанныеЗапроса.Вставить("ДляТекстаПостроителя",Истина);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Ссылка","Версия");	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
КонецПроцедуры // ПолучитьПараметрыЗапросаПоОперанду() 

// Функция возвращает структуру отбора для операнда. Структура для расшифровки операнда
//
Функция ПодготовитьСтруктуруОтбора(СтрОперанд, СтруктураОтбора) Экспорт
	
	СтруктураРасшифровки = Новый Структура;
	
	Если ЗначениеЗаполнено(СтруктураОтбора) Тогда
		Для Каждого ТекЗапись Из СтруктураОтбора Цикл
			СтруктураРасшифровки.Вставить(ТекЗапись.Ключ, ТекЗапись.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

// Функция возвращает текст запроса и необходимые параметры для эмуляции запроса к регистру "ЗначенияПоказателейОтчетов"
// предыдущих редакций
// Параметры: 
// 		ВидОтчета - вид отчета, данные которого отбираются
//		ПоказателиДляОтбора  - список значений, массив, таблица значений. В последнем случае должна содержать
//				колонки "Показатель","ТипЗначения","ЧислоАналитикГруппыРаскрытия" (упорядочить по возрастанию).
//		СписокВерсий - список версий для отбора данных
//      ВыводитьСинтетику - признак вывода итоговых значений показателей
//      ВыводитьАналитику - признак вывода значений аналитических раскрытий
//		ОтборПоказателей - соответствие, содержащая дополнительные отборы по используемым показателям
//      	Ключом является текст условия "ПоказателиОтчетов.....", значением - структура параметров
//      МаксКоличествоАналитик - принудительно устанавливаемое число полей "Аналитика1"..."Аналитика5"
//          в результирующем запросе.
//      Дополнительные поля - соответствие, ключом которого служит поле таблицы значений показателей (возможно, с разыменованием,
//			а значением - псевдоним этого поля.
//
// Возвращаемое значение:
//		Структура, содержащая:
//			ТекстЗапроса (текст)
//			ПараметрыЗапроса (структура)
//
Функция ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса) Экспорт
	
	Перем ВидОтчета;
	Перем ТабНомеровАналитик;
	Перем СписокВерсий;
	Перем ВыводитьСинтетику;
	Перем ВыводитьВалюты;
	Перем ВыводитьАналитику;
	Перем ОтборПоказателей;
	Перем ДополнительныеПоля;
	Перем МаксКоличествоАналитик;
	Перем ТолькоЧисловые;
	Перем ПринудительнаяТипизация;
	Перем ГруппироватьЗначения;
	Перем ДляТекстаПостроителя;
	Перем АналитикВидаОтчета;
	
	Если ДанныеЗапроса.Свойство("СтрОперанд") Тогда
		
		ПолучитьПараметрыЗапросаПоОперанду(ДанныеЗапроса);
		
	КонецЕсли;
	
	ДанныеЗапроса.Свойство("ВидОтчета"				,ВидОтчета);
	ДанныеЗапроса.Свойство("ТабНомеровАналитик"		,ТабНомеровАналитик);
	ДанныеЗапроса.Свойство("СписокВерсий"			,СписокВерсий);
	ДанныеЗапроса.Свойство("ВыводитьСинтетику"		,ВыводитьСинтетику);
	ДанныеЗапроса.Свойство("ВыводитьАналитику"		,ВыводитьАналитику);
	ДанныеЗапроса.Свойство("ВыводитьВалюты"			,ВыводитьВалюты);
	ДанныеЗапроса.Свойство("ОтборПоказателей"		,ОтборПоказателей);
	ДанныеЗапроса.Свойство("ДополнительныеПоля"		,ДополнительныеПоля);
	ДанныеЗапроса.Свойство("ПринудительнаяТипизация",ПринудительнаяТипизация);
	ДанныеЗапроса.Свойство("АналитикВидаОтчета"		,АналитикВидаОтчета);
	
	МаксКоличествоАналитик =						?(ДанныеЗапроса.Свойство("МаксКоличествоАналитик"),ДанныеЗапроса.МаксКоличествоАналитик,0);
	ТолькоЧисловые         =						?(ДанныеЗапроса.Свойство("ТолькоЧисловые"),ДанныеЗапроса.ТолькоЧисловые,Ложь);
	ПринудительнаяТипизация=						?(ДанныеЗапроса.Свойство("ПринудительнаяТипизация"),ДанныеЗапроса.ПринудительнаяТипизация,Ложь);
	ГруппироватьЗначения   =						?(ДанныеЗапроса.Свойство("ГруппироватьЗначения"),ДанныеЗапроса.ГруппироватьЗначения,Истина);
	ДляТекстаПостроителя   =						?(ДанныеЗапроса.Свойство("ДляТекстаПостроителя"),ДанныеЗапроса.ДляТекстаПостроителя,Ложь);
	
	ТекстЗапроса="";
	СтруктураПараметров=Новый Структура;
	СтруктураЗапроса=Новый Структура;
	
	Если ВидОтчета=Неопределено И СписокВерсий=Неопределено Тогда // Готовим запрос по всем регистрам
		
		Если ВыводитьАналитику Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
			|	ЗначенияПоказателейОтчетов6.Показатель КАК Показатель,
			|	ЗначенияПоказателейОтчетов6.АналитикаВалюта КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов6.ИтоговоеЗначение КАК ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов6.Аналитика1 КАК Аналитика1,
			|	ЗначенияПоказателейОтчетов6.Аналитика2 КАК Аналитика2,
			|	ЗначенияПоказателейОтчетов6.Аналитика3 КАК Аналитика3,
			|	ЗначенияПоказателейОтчетов6.Аналитика4 КАК Аналитика4,
			|	ЗначенияПоказателейОтчетов6.Аналитика5 КАК Аналитика5,
			|	ЗначенияПоказателейОтчетов6.Аналитика6 КАК Аналитика6,
			|	ЗначенияПоказателейОтчетов6.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов6.ЗначениеВалюта КАК ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов6 КАК ЗначенияПоказателейОтчетов6
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетов5.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетов6.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетов6.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетов6.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов6.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов6.ЗначениеВалюта КАК ЗначениеВалюта}
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
			|	ЗначенияПоказателейОтчетов5.Показатель КАК Показатель,
			|	ЗначенияПоказателейОтчетов5.АналитикаВалюта КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов5.ИтоговоеЗначение КАК ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов5.Аналитика1 КАК Аналитика1,
			|	ЗначенияПоказателейОтчетов5.Аналитика2 КАК Аналитика2,
			|	ЗначенияПоказателейОтчетов5.Аналитика3 КАК Аналитика3,
			|	ЗначенияПоказателейОтчетов5.Аналитика4 КАК Аналитика4,
			|	ЗначенияПоказателейОтчетов5.Аналитика5 КАК Аналитика5,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗначенияПоказателейОтчетов5.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов5.ЗначениеВалюта КАК ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов5 КАК ЗначенияПоказателейОтчетов5
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетов5.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетов5.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетов5.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетов5.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов5.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов5.ЗначениеВалюта КАК ЗначениеВалюта}	
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка,
			|	ЗначенияПоказателейОтчетов4.Показатель,
			|	ЗначенияПоказателейОтчетов4.АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов4.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов4.Аналитика1,
			|	ЗначенияПоказателейОтчетов4.Аналитика2,
			|	ЗначенияПоказателейОтчетов4.Аналитика3,
			|	ЗначенияПоказателейОтчетов4.Аналитика4,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗначенияПоказателейОтчетов4.Значение,
			|	ЗначенияПоказателейОтчетов4.ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов4 КАК ЗначенияПоказателейОтчетов4
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетов4.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетов4.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетов4.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетов4.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов4.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов4.ЗначениеВалюта КАК ЗначениеВалюта}	
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка,
			|	ЗначенияПоказателейОтчетов3.Показатель,
			|	ЗначенияПоказателейОтчетов3.АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов3.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов3.Аналитика1,
			|	ЗначенияПоказателейОтчетов3.Аналитика2,
			|	ЗначенияПоказателейОтчетов3.Аналитика3,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗначенияПоказателейОтчетов3.Значение,
			|	ЗначенияПоказателейОтчетов3.ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов3 КАК ЗначенияПоказателейОтчетов3
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетов3.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетов3.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетов3.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетов3.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов3.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов3.ЗначениеВалюта КАК ЗначениеВалюта}
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка,
			|	ЗначенияПоказателейОтчетов2.Показатель,
			|	ЗначенияПоказателейОтчетов2.АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов2.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов2.Аналитика1,
			|	ЗначенияПоказателейОтчетов2.Аналитика2,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗначенияПоказателейОтчетов2.Значение,
			|	ЗначенияПоказателейОтчетов2.ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов2 КАК ЗначенияПоказателейОтчетов2
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетов2.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетов2.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетов2.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетов2.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов2.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов2.ЗначениеВалюта КАК ЗначениеВалюта}
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка,
			|	ЗначенияПоказателейОтчетов1.Показатель,
			|	ЗначенияПоказателейОтчетов1.АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов1.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов1.Аналитика1,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	НЕОПРЕДЕЛЕНО,
			|	ЗначенияПоказателейОтчетов1.Значение,
			|	ЗначенияПоказателейОтчетов1.ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов1 КАК ЗначенияПоказателейОтчетов1
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетов1.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетов1.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетов1.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетов1.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов1.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетов1.ЗначениеВалюта КАК ЗначениеВалюта}
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
			|	ЗначенияПоказателейОтчетовВалютные.Показатель КАК Показатель,
			|	ЗначенияПоказателейОтчетовВалютные.АналитикаВалюта КАК АналитикаВалюта,
			|	Ложь КАК ИтоговоеЗначение,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика1,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика2,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика3,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика4,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика5,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика6,
			|	ЗначенияПоказателейОтчетовВалютные.Значение,
			|	ЗначенияПоказателейОтчетовВалютные.ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК ЗначенияПоказателейОтчетовВалютные
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетовВалютные.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетовВалютные.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетовВалютные.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетовВалютные.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетовВалютные.Значение КАК Значение,
			|	ЗначенияПоказателейОтчетовВалютные.ЗначениеВалюта КАК ЗначениеВалюта}";
			
		КонецЕсли;
			
		Если ВыводитьСинтетику Тогда
			
			ТекстЗапроса=ТекстЗапроса+"	
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
			|	ЗначенияПоказателейОтчетовСинтетика.Показатель КАК Показатель,
			|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка),
			|	ИСТИНА КАК ИтоговоеЗначение,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика1,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика2,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика3,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика4,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика5,
			|	НЕОПРЕДЕЛЕНО КАК Аналитика6,
			|	ЗначенияПоказателейОтчетовСинтетика.Значение,
			|	0 Как ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетовСинтетика.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетовСинтетика.Показатель.ПометкаУдаления)
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетовСинтетика.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетовСинтетика.Значение КАК Значение}";
			
		КонецЕсли;
		
		Если НЕ ТолькоЧисловые Тогда
			
			ТекстЗапроса=ТекстЗапроса+"		
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
			|	ЗначенияПоказателейОтчетовНечисловые.Показатель,
			|	ЗначенияПоказателейОтчетовНечисловые.АналитикаВалюта,
			|	ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетовНечисловые.Аналитика1,
			|	ЗначенияПоказателейОтчетовНечисловые.Аналитика2,
			|	ЗначенияПоказателейОтчетовНечисловые.Аналитика3,
			|	ЗначенияПоказателейОтчетовНечисловые.Аналитика4,
			|	ЗначенияПоказателейОтчетовНечисловые.Аналитика5,
			|	ЗначенияПоказателейОтчетовНечисловые.Аналитика6,
			|	ЗначенияПоказателейОтчетовНечисловые.Значение,
			|	0 Как ЗначениеВалюта
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|		ПО ЗначенияПоказателейОтчетовНечисловые.Версия = ВерсииЗначенийПоказателей.Ссылка
			|		И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|ГДЕ
			|	(НЕ ЗначенияПоказателейОтчетовНечисловые.Показатель.ПометкаУдаления)";
			
			Если НЕ (ВыводитьСинтетику И ВыводитьАналитику) Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|И ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение="+?(ВыводитьСинтетику,"ИСТИНА","ЛОЖЬ");
			КонецЕсли;	
			
			ТекстЗапроса=ТекстЗапроса+"
			|{ГДЕ
			|	ВерсииЗначенийПоказателей.Регистратор.* КАК НастраиваемыйОтчет,
			|	ВерсииЗначенийПоказателей.Активность КАК Активность,
			|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
			|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
			|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
			|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
			|	ВерсииЗначенийПоказателей.ВидОтчета.* КАК ВидОтчета,
			|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
			|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
			|	ЗначенияПоказателейОтчетовНечисловые.Показатель.* КАК Показатель,
			|	ЗначенияПоказателейОтчетовНечисловые.Значение КАК Значение}";
			
		КонецЕсли;
		
		Если ДляТекстаПостроителя Тогда
			
			ТекстЗапросаПостроителя="ВЫБРАТЬ
			|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
			|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
			|{ВЫБРАТЬ
			|	ЗначенияПоказателейОтчетов.Версия.Организация.* КАК Организация,
			|	ЗначенияПоказателейОтчетов.Версия.Проект.* КАК Проект,
			|	ЗначенияПоказателейОтчетов.Версия.Регистратор.* КАК Регистратор,
			|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета.* КАК ПериодОтчета,
			|	ЗначенияПоказателейОтчетов.Показатель.*,
			|	ЗначенияПоказателейОтчетов.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов.Версия.Сценарий.* КАК Сценарий,
			|	ЗначенияПоказателейОтчетов.Аналитика1.*,
			|	ЗначенияПоказателейОтчетов.Аналитика2.*,
			|	ЗначенияПоказателейОтчетов.Аналитика3.*,
			|	ЗначенияПоказателейОтчетов.Аналитика4.*,
			|	ЗначенияПоказателейОтчетов.Аналитика5.*,
			|	ЗначенияПоказателейОтчетов.Аналитика6.*,
			|	ЗначенияПоказателейОтчетов.Версия.Валюта.* КАК Валюта}
			|ИЗ
			|	("+СРЕД(ТекстЗапроса,16)+") КАК ЗначенияПоказателейОтчетов
			|{ГДЕ
			|	ЗначенияПоказателейОтчетов.Аналитика1.*,
			|	ЗначенияПоказателейОтчетов.Аналитика2.*,
			|	ЗначенияПоказателейОтчетов.Аналитика3.*,
			|	ЗначенияПоказателейОтчетов.Аналитика4.*,
			|	ЗначенияПоказателейОтчетов.Аналитика5.*,
			|	ЗначенияПоказателейОтчетов.Аналитика6.*,
			|	ЗначенияПоказателейОтчетов.АналитикаВалюта.*,
			|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение}";
			
			СтруктураЗапроса.Вставить("ТекстЗапроса",ТекстЗапросаПостроителя);
			
		Иначе
			
			СтруктураЗапроса.Вставить("ТекстЗапроса",СРЕД(ТекстЗапроса,16));
			
		КонецЕсли;	
		
	Иначе
		
		Если АналитикВидаОтчета=Неопределено Тогда
			
			АналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
			
		КонецЕсли; 
		
		Если ТабНомеровАналитик=Неопределено Тогда
			
			ТабНомеровАналитик=ПолучитьТаблицуАналитик(ВидОтчета,ОтборПоказателей,ТолькоЧисловые);
			
		КонецЕсли;
		
		Если ТабНомеровАналитик.Количество()=0 Тогда
			Возврат СтруктураЗапроса;
		КонецЕсли;
		
		Для Каждого СтрАналитика ИЗ ТабНомеровАналитик Цикл
			СтрАналитика.ЧислоАналитикГруппыРаскрытия=СтрАналитика.ЧислоАналитикГруппыРаскрытия+АналитикВидаОтчета;
		КонецЦикла;
		
		ТабНомеровАналитик.Сортировать("ЧисловойПоказатель Убыв, ЧислоАналитикГруппыРаскрытия Убыв");
		
		Если МаксКоличествоАналитик=0 И ВыводитьАналитику Тогда
			МаксКоличествоАналитик=ТабНомеровАналитик[0].ЧислоАналитикГруппыРаскрытия;
		КонецЕсли;
		
		ВыводитьВалюты=(НЕ ТабНомеровАналитик.Найти(Истина,"Валютный")=Неопределено);
		
		Если МаксКоличествоАналитик=0 Тогда
			
			Если НЕ (ВыводитьСинтетику ИЛИ ВыводитьВалюты) Тогда
				
				Возврат СтруктураЗапроса;
				
			КонецЕсли;
			
		ИначеЕсли МаксКоличествоАналитик<=АналитикВидаОтчета Тогда
			
			ВыводитьАналитику=Ложь;
			
		КонецЕсли;
		
		// Проверим наличие выборки реквизитов версий. В этом случае будем использовать
		// внутреннее соединение с соответствующим справочником.
		
		ЕстьРеквизитыВерсий=Ложь;
		
		Если Не ДополнительныеПоля=Неопределено Тогда
			
			Для Каждого КлючИЗначение ИЗ ДополнительныеПоля Цикл
				
				Если СтрНайти(КлючИЗначение.Ключ,"ВерсииЗначенийПоказателей")>0 Тогда
					
					ЕстьРеквизитыВерсий=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВыводитьАналитику Тогда		
			
			НачальныйИндекс=?(ВыводитьСинтетику,1,АналитикВидаОтчета+1);
			
			Если ПринудительнаяТипизация Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|ЗначенияПоказателейМакет.Показатель,
				|ЗначенияПоказателейМакет.АналитикаВалюта,";
				
				Если Не ДополнительныеПоля=Неопределено Тогда
					
					Для Каждого Поле Из ДополнительныеПоля Цикл
						
						Если СтрНайти(Поле.Ключ,"ВерсииЗначенийПоказателей")>0 Тогда
							
							ТекстЗапроса=ТекстЗапроса+"
							|ЗначенияПоказателейМакет."+СтрЗаменить(Поле.Ключ,"ВерсииЗначенийПоказателей","Версия")+" КАК "+Поле.Значение+",";
							
							
						Иначе
							
							ТекстЗапроса=ТекстЗапроса+"
							|ЗначенияПоказателейМакет."+Поле.Ключ+" КАК "+Поле.Значение+",";
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ЛОЖЬ КАК ИтоговоеЗначение,
				|"+МаксКоличествоАналитик+" КАК ЧислоАналитикГруппыРаскрытия,";
				
				Для Индекс=НачальныйИндекс ПО МаксКоличествоАналитик Цикл
					
					ТекстЗапроса=ТекстЗапроса+"
					|ЗначенияПоказателейМакет.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
					
				КонецЦикла;
				
				ТекстЗапроса=ТекстЗапроса+"
				|0 КАК Значение,
				|0 КАК ЗначениеВалюта
				|ИЗ РегистрСведений.ЗначенияПоказателейМакет КАК ЗначенияПоказателейМакет";
				
			КонецЕсли;
			
			Для Каждого СтрТаблица ИЗ ТабНомеровАналитик Цикл
				
				Если (НЕ СтрТаблица.ЧисловойПоказатель) 
					ИЛИ (СтрТаблица.ЧислоАналитикГруппыРаскрытия=АналитикВидаОтчета И (НЕ СтрТаблица.Валютный=Истина)) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ЧислоАналитикТаблицы=СтрТаблица.ЧислоАналитикГруппыРаскрытия;
				
				Если ЧислоАналитикТаблицы=АналитикВидаОтчета И СтрТаблица.Валютный=Истина Тогда
					ИмяТаблицы="ЗначенияПоказателейОтчетовВалютные_Аналитика";
				Иначе	
					ИмяТаблицы="ЗначенияПоказателейОтчетов"+ЧислоАналитикТаблицы+"_Аналитика";
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|"+ИмяТаблицы+".Показатель,
				|"+ИмяТаблицы+".АналитикаВалюта,";
				
				ТекстГруппировки=ИмяТаблицы+".Показатель,"+ИмяТаблицы+".АналитикаВалюта";
				
				Если Не ДополнительныеПоля=Неопределено Тогда
					
					Для Каждого Поле Из ДополнительныеПоля Цикл
						
						Если СтрНайти(Поле.Ключ,"ВерсииЗначенийПоказателей")>0 Тогда
							
							ТекстЗапроса=ТекстЗапроса+"
							|"+Поле.Ключ+" КАК "+Поле.Значение+",";
							
							ТекстГруппировки=ТекстГруппировки+",
							|"+Поле.Ключ;
							
						Иначе
							
							ТекстЗапроса=ТекстЗапроса+"
							|"+ИмяТаблицы+"."+Поле.Ключ+" КАК "+Поле.Значение+",";
							
							ТекстГруппировки=ТекстГруппировки+",
							|"+ИмяТаблицы+"."+Поле.Ключ;
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ЛОЖЬ КАК ИтоговоеЗначение,
				|"+ЧислоАналитикТаблицы+" КАК ЧислоАналитикГруппыРаскрытия,";
				
				НачальныйИндекс=?(ВыводитьСинтетику,1,АналитикВидаОтчета+1);
				
				Для Индекс=НачальныйИндекс ПО МаксКоличествоАналитик Цикл
					
					ТекстЗапроса=ТекстЗапроса+"
					|"+?(ЧислоАналитикТаблицы>=Индекс,ИмяТаблицы+".Аналитика"+Индекс,"НЕОПРЕДЕЛЕНО")+" КАК Аналитика"+Индекс+",";
					
					Если ЧислоАналитикТаблицы>=Индекс Тогда
						ТекстГруппировки=ТекстГруппировки+",
						|"+ИмяТаблицы+".Аналитика"+Индекс;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ГруппироватьЗначения Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|СУММА("+ИмяТаблицы+".Значение) КАК Значение,
					|СУММА("+ИмяТаблицы+".ЗначениеВалюта) КАК ЗначениеВалюта";
				Иначе
					ТекстЗапроса=ТекстЗапроса+"
					|"+ИмяТаблицы+".Значение КАК Значение,
					|"+ИмяТаблицы+".ЗначениеВалюта КАК ЗначениеВалюта";
				КонецЕсли;
				
				Если ЧислоАналитикТаблицы=АналитикВидаОтчета И СтрТаблица.Валютный=Истина Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|ИЗ РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК "+ИмяТаблицы;
					
				Иначе
					
					ТекстЗапроса=ТекстЗапроса+"
					|ИЗ РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикТаблицы+" КАК "+ИмяТаблицы;
					
				КонецЕсли;
				
				Если ЕстьРеквизитыВерсий ИЛИ ДляТекстаПостроителя Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
					|ПО "+ИмяТаблицы+".Версия = ВерсииЗначенийПоказателей.Ссылка";
					
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ГДЕ 
				|(НЕ "+ИмяТаблицы+".Показатель.ПометкаУдаления)";
								
				Если НЕ СписокВерсий=Неопределено  Тогда
					
					Если ЕстьРеквизитыВерсий Тогда
						
						ТекстЗапроса=ТекстЗапроса+"
						|И ВерсииЗначенийПоказателей.Ссылка В(&СписокВерсий)";
						
					Иначе
						
						ТекстЗапроса=ТекстЗапроса+"
						|И "+ИмяТаблицы+".Версия В(&СписокВерсий)";
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ОтборПоказателей=Неопределено Тогда
					
					Для Каждого УсловиеОтбора ИЗ ОтборПоказателей Цикл
						
						ТекстЗапроса=ТекстЗапроса+"
						|И "+СтрЗаменить(УсловиеОтбора.Ключ,"####",ИмяТаблицы+".Показатель");
						
						Для Каждого СтрПараметр ИЗ УсловиеОтбора.Значение Цикл
							
							СтруктураПараметров.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДляТекстаПостроителя Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|{ГДЕ
					|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
					|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
					|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
					|	ВерсииЗначенийПоказателей.Регистратор.* КАК Регистратор,
					|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
					|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
					|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
					|	ВерсииЗначенийПоказателей.Активность КАК Активность,
					|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,";
					
					Для Индекс=АналитикВидаОтчета+1 ПО ЧислоАналитикТаблицы Цикл
						
						ТекстЗапроса=ТекстЗапроса+"	
						|	"+ИмяТаблицы+".Аналитика"+Индекс+".*,"
						
					КонецЦикла;
						
					ТекстЗапроса=ТекстЗапроса+"
					|	"+ИмяТаблицы+".Показатель.* КАК Показатель,
					|	"+ИмяТаблицы+".АналитикаВалюта.* КАК АналитикаВалюта}";
					
				КонецЕсли;
				
				Если ГруппироватьЗначения Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|СГРУППИРОВАТЬ ПО
					|"+ТекстГруппировки;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если (Не ТабНомеровАналитик.Найти(Истина,"ЧисловойПоказатель")=Неопределено) И ВыводитьСинтетику Тогда
			
			ТаблицаРегистра=?(АналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+АналитикВидаОтчета);
			ИмяТаблицы=ТаблицаРегистра+"_Итог";
			
			ТекстЗапроса=ТекстЗапроса+"
			|ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ
			|"+ИмяТаблицы+".Показатель,";
			
			Если АналитикВидаОтчета>0 Тогда
				
				ТекстЗапроса=ТекстЗапроса+ИмяТаблицы+".АналитикаВалюта КАК АналитикаВалюта,";
				ТекстГруппировки=ИмяТаблицы+".Показатель,"+ИмяТаблицы+".АналитикаВалюта";
				
			Иначе
				
				ТекстЗапроса=ТекстЗапроса+"ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
				ТекстГруппировки=ИмяТаблицы+".Показатель";
				
			КонецЕсли;
			
			Если Не ДополнительныеПоля=Неопределено Тогда
				
				Для Каждого Поле Из ДополнительныеПоля Цикл
					
					Если СтрНайти(Поле.Ключ,"ВерсииЗначенийПоказателей")>0 Тогда
						
						ТекстЗапроса=ТекстЗапроса+"
						|"+Поле.Ключ+" КАК "+Поле.Значение+",";
						
						ТекстГруппировки=ТекстГруппировки+",
						|"+Поле.Ключ;
						
					Иначе
						
						ТекстЗапроса=ТекстЗапроса+"
						|"+ИмяТаблицы+"."+Поле.Ключ+" КАК "+Поле.Значение+",";
						
						ТекстГруппировки=ТекстГруппировки+",
						|"+ИмяТаблицы+"."+Поле.Ключ;
						
					КонецЕсли;
					
				КонецЦикла;	
				
			КонецЕсли;
			
			ТекстЗапроса=ТекстЗапроса+"
			|ИСТИНА КАК ИтоговоеЗначение,
			|0 КАК ЧислоАналитикГруппыРаскрытия,";
			
			КонечныйИндекс=?(МаксКоличествоАналитик>0,МаксКоличествоАналитик,АналитикВидаОтчета);
			
			Для Индекс=1 ПО КонечныйИндекс Цикл
				
				ТекстЗапроса=ТекстЗапроса+"
				|"+?(АналитикВидаОтчета>=Индекс,ИмяТаблицы+".Аналитика"+Индекс,"НЕОПРЕДЕЛЕНО")+" КАК Аналитика"+Индекс+",";
				
				Если АналитикВидаОтчета>=Индекс Тогда
					ТекстГруппировки=ТекстГруппировки+",
					|"+ИмяТаблицы+".Аналитика"+Индекс;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ГруппироватьЗначения Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|СУММА("+ИмяТаблицы+".Значение) КАК Значение";				
				
				Если АналитикВидаОтчета>0 Тогда
					
					ТекстЗапроса=ТекстЗапроса+",
					|СУММА("+ИмяТаблицы+".ЗначениеВалюта) КАК ЗначениеВалюта";
					
				Иначе
					
					ТекстЗапроса=ТекстЗапроса+",
					|0 КАК ЗначениеВалюта";
					
				КонецЕсли;
				
				
			Иначе
					
				ТекстЗапроса=ТекстЗапроса+"
				|"+ИмяТаблицы+".Значение КАК Значение";
				
				Если АналитикВидаОтчета>0 Тогда
					
					ТекстЗапроса=ТекстЗапроса+",
					|"+ИмяТаблицы+".ЗначениеВалюта КАК ЗначениеВалюта";
					
				Иначе
					
					ТекстЗапроса=ТекстЗапроса+",
					|0 КАК ЗначениеВалюта";
					
				КонецЕсли;
	
			КонецЕсли;
			
			ТекстЗапроса=ТекстЗапроса+"
			|ИЗ РегистрСведений."+ТаблицаРегистра+" КАК "+ИмяТаблицы;
			
			Если ЕстьРеквизитыВерсий ИЛИ ДляТекстаПостроителя Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
				|ПО "+ИмяТаблицы+".Версия = ВерсииЗначенийПоказателей.Ссылка";
				
			КонецЕсли;
			
			ТекстЗапроса=ТекстЗапроса+"
			|ГДЕ 
			|(НЕ "+ИмяТаблицы+".Показатель.ПометкаУдаления)";
			
			Если НЕ СписокВерсий=Неопределено  Тогда
				
				Если ЕстьРеквизитыВерсий Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|И ВерсииЗначенийПоказателей.Ссылка В(&СписокВерсий)";
					
				Иначе
					
					ТекстЗапроса=ТекстЗапроса+"
					|И "+ИмяТаблицы+".Версия В(&СписокВерсий)";
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если Не ОтборПоказателей=Неопределено Тогда
				
				Для Каждого УсловиеОтбора ИЗ ОтборПоказателей Цикл
					
					ТекстЗапроса=ТекстЗапроса+"
					|И "+СтрЗаменить(УсловиеОтбора.Ключ,"####",ИмяТаблицы+".Показатель");
					
					Для Каждого СтрПараметр ИЗ УсловиеОтбора.Значение Цикл
						
						СтруктураПараметров.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
						
					КонецЦикла;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ДляТекстаПостроителя Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|{ГДЕ
				|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
				|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
				|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
				|	ВерсииЗначенийПоказателей.Регистратор.* КАК Регистратор,
				|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
				|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
				|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
				|	ВерсииЗначенийПоказателей.Активность КАК Активность,
				|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
				|	"+ИмяТаблицы+".Показатель.*}";
				
			КонецЕсли;
			
			Если ГруппироватьЗначения Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|СГРУППИРОВАТЬ ПО
				|"+ТекстГруппировки;
				
			КонецЕсли;
			
		КонецЕсли;	
		
		Если Не (ТолькоЧисловые ИЛИ ТабНомеровАналитик.Найти(Ложь,"ЧисловойПоказатель")=Неопределено)Тогда
			
			Если ВыводитьАналитику Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|ЗначенияПоказателейОтчетовНечисловые.Показатель,
				|ЗначенияПоказателейОтчетовНечисловые.АналитикаВалюта,";
				
				Если Не ДополнительныеПоля=Неопределено Тогда
					
					Для Каждого Поле Из ДополнительныеПоля Цикл
						
						Если СтрНайти(Поле.Ключ,"ВерсииЗначенийПоказателей")>0 Тогда
							
							ТекстЗапроса=ТекстЗапроса+"
							|"+Поле.Ключ+" КАК "+Поле.Значение+",";
							
						Иначе
							
							ТекстЗапроса=ТекстЗапроса+"
							|ЗначенияПоказателейОтчетовНечисловые."+Поле.Ключ+" КАК "+Поле.Значение+",";
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|"+?(ВыводитьСинтетику,"ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение","ЛОЖЬ")+" КАК ИтоговоеЗначение,
				|-1 КАК ЧислоАналитикГруппыРаскрытия,";
				
				НачальныйИндекс=?(ВыводитьСинтетику,1,АналитикВидаОтчета+1);
				
				Для Индекс=НачальныйИндекс ПО МаксКоличествоАналитик Цикл
					
					ТекстЗапроса=ТекстЗапроса+"
					|ЗначенияПоказателейОтчетовНечисловые.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
					
				КонецЦикла;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ЗначенияПоказателейОтчетовНечисловые.Значение КАК Значение,
				|0 КАК ЗначениеВалюта
				|ИЗ РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые";
				
				Если ЕстьРеквизитыВерсий ИЛИ ДляТекстаПостроителя Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
					|ПО ЗначенияПоказателейОтчетовНечисловые.Версия = ВерсииЗначенийПоказателей.Ссылка";
					
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ГДЕ 
				|(НЕ ЗначенияПоказателейОтчетовНечисловые.Показатель.ПометкаУдаления)";
				
				Если НЕ СписокВерсий=Неопределено  Тогда
					
					Если ЕстьРеквизитыВерсий Тогда
						
						ТекстЗапроса=ТекстЗапроса+"
						|И ВерсииЗначенийПоказателей.Ссылка В (&ПоследниеВерсии)";
						
					Иначе
						
						ТекстЗапроса=ТекстЗапроса+"
						|И ЗначенияПоказателейОтчетовНечисловые.Версия В (&ПоследниеВерсии)";
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если Не ОтборПоказателей=Неопределено Тогда
					
					Для Каждого УсловиеОтбора ИЗ ОтборПоказателей Цикл
						
						ТекстЗапроса=ТекстЗапроса+"
						|И "+СтрЗаменить(УсловиеОтбора.Ключ,"####","ЗначенияПоказателейОтчетовНечисловые.Показатель");
						
						Для Каждого СтрПараметр ИЗ УсловиеОтбора.Значение Цикл
							
							СтруктураПараметров.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если НЕ ВыводитьСинтетику Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|И (НЕ ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение)";
					
				КонецЕсли;
				
				Если ДляТекстаПостроителя Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|{ГДЕ
					|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
					|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
					|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
					|	ВерсииЗначенийПоказателей.Регистратор.* КАК Регистратор,
					|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
					|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
					|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
					|	ВерсииЗначенийПоказателей.Активность КАК Активность,
					|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,";
					
					Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
						
						ТекстЗапроса=ТекстЗапроса+"	
						|	ЗначенияПоказателейОтчетовНечисловые.Аналитика"+Индекс+".*,"
						
					КонецЦикла;
						
					ТекстЗапроса=ТекстЗапроса+"
					|	ЗначенияПоказателейОтчетовНечисловые.Показатель.*,
					|	ЗначенияПоказателейОтчетовНечисловые.АналитикаВалюта.*}";
					
				КонецЕсли;
				
			Иначе
				
				ТекстЗапроса=ТекстЗапроса+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|ЗначенияПоказателейОтчетовНечисловые.Показатель,
				|ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
				
				Если Не ДополнительныеПоля=Неопределено Тогда
					
					Для Каждого Поле Из ДополнительныеПоля Цикл
						
						Если СтрНайти(Поле.Ключ,"ВерсииЗначенийПоказателей")>0 Тогда
							
							ТекстЗапроса=ТекстЗапроса+"
							|"+СтрЗаменить(Поле.Ключ,"ВерсииЗначенийПоказателей.","ЗначенияПоказателейОтчетовНечисловые.Версия.")+" КАК "+Поле.Значение+",";
							
						Иначе
							
							ТекстЗапроса=ТекстЗапроса+"
							|ЗначенияПоказателейОтчетовНечисловые."+Поле.Ключ+" КАК "+Поле.Значение+",";
							
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ИСТИНА КАК ИтоговоеЗначение,
				|-1 КАК ЧислоАналитикГруппыРаскрытия,";
				
				КонечныйИндекс=?(МаксКоличествоАналитик>0,МаксКоличествоАналитик,АналитикВидаОтчета);
				
				Для Индекс=1 ПО КонечныйИндекс Цикл
					
					ТекстЗапроса=ТекстЗапроса+"
					|"+?(АналитикВидаОтчета>=Индекс,"ЗначенияПоказателейОтчетовНечисловые.Аналитика"+Индекс,"НЕОПРЕДЕЛЕНО")+" КАК Аналитика"+Индекс+",";
					
				КонецЦикла;
				
				ТекстЗапроса=ТекстЗапроса+"
				|ЗначенияПоказателейОтчетовНечисловые.Значение КАК Значение,
				|0 КАК ЗначениеВалюта
				|ИЗ РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
				|ГДЕ 
				|(НЕ ЗначенияПоказателейОтчетовНечисловые.Показатель.ЧисловойПоказатель)
				|И ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение";
				
				Если НЕ СписокВерсий=Неопределено Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|И ЗначенияПоказателейОтчетовНечисловые.Версия В (&ПоследниеВерсии)";
					
				КонецЕсли;
				
				Если Не ОтборПоказателей=Неопределено Тогда
					
					Для Каждого УсловиеОтбора ИЗ ОтборПоказателей Цикл
						
						ТекстЗапроса=ТекстЗапроса+"
						|И "+СтрЗаменить(УсловиеОтбора.Ключ,"####","ЗначенияПоказателейОтчетовНечисловые.Показатель");
						
						Для Каждого СтрПараметр ИЗ УсловиеОтбора.Значение Цикл
							
							СтруктураПараметров.Вставить(СтрПараметр.Ключ,СтрПараметр.Значение);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если ДляТекстаПостроителя Тогда
					
					ТекстЗапроса=ТекстЗапроса+"
					|{ГДЕ
					|	ВерсииЗначенийПоказателей.Организация.* КАК Организация,
					|	ВерсииЗначенийПоказателей.Проект.* КАК Проект,
					|	ВерсииЗначенийПоказателей.ВидОперации.* КАК ВидОперации,
					|	ВерсииЗначенийПоказателей.Регистратор.* КАК Регистратор,
					|	ВерсииЗначенийПоказателей.ПериодОтчета.* КАК ПериодОтчета,
					|	ВерсииЗначенийПоказателей.Валюта.* КАК Валюта,
					|	ВерсииЗначенийПоказателей.Ссылка.* КАК Версия,
					|	ВерсииЗначенийПоказателей.Активность КАК Активность,
					|	ВерсииЗначенийПоказателей.Сценарий.* КАК Сценарий,
					|	ЗначенияПоказателейОтчетовНечисловые.Показатель.*}";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстЗапроса) Тогда
			Возврат СтруктураЗапроса;
		КонецЕсли;
		
		Если ДляТекстаПостроителя Тогда
			
			ТекстЗапросаПостроителя="ВЫБРАТЬ
			|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
			|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
			|{ВЫБРАТЬ
			|	ЗначенияПоказателейОтчетов.Версия.Организация.* КАК Организация,
			|	ЗначенияПоказателейОтчетов.Версия.Проект.* КАК Проект,
			|	ЗначенияПоказателейОтчетов.Версия.Регистратор.* КАК Регистратор,
			|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета.* КАК ПериодОтчета,
			|	ЗначенияПоказателейОтчетов.Показатель.*,
			|	ЗначенияПоказателейОтчетов.АналитикаВалюта.* КАК АналитикаВалюта,
			|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение,
			|	ЗначенияПоказателейОтчетов.Версия.Сценарий.* КАК Сценарий,";
			
			НачальныйИндекс=?(ВыводитьСинтетику,1,АналитикВидаОтчета+1);
			КонечныйИндекс=?(МаксКоличествоАналитик>0,МаксКоличествоАналитик,АналитикВидаОтчета);
			
			Для Индекс=НачальныйИндекс По КонечныйИндекс Цикл
				
				ТекстЗапросаПостроителя=ТекстЗапросаПостроителя+"
				|ЗначенияПоказателейОтчетов.Аналитика"+Индекс+".*,";
				
			КонецЦикла;
			
			ТекстЗапросаПостроителя=ТекстЗапросаПостроителя+"
			|	ЗначенияПоказателейОтчетов.Версия.Валюта.* КАК Валюта}
			|ИЗ
			|	("+СРЕД(ТекстЗапроса,16)+") КАК ЗначенияПоказателейОтчетов
			|{ГДЕ";
			
			Для Индекс=НачальныйИндекс По КонечныйИндекс Цикл
				
				ТекстЗапросаПостроителя=ТекстЗапросаПостроителя+"
				|ЗначенияПоказателейОтчетов.Аналитика"+Индекс+".*,";
				
			КонецЦикла;
			
			ТекстЗапросаПостроителя=ТекстЗапросаПостроителя+"
			|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение}";
			
			СтруктураЗапроса.Вставить("ТекстЗапроса",ТекстЗапросаПостроителя);
			
		Иначе
		
		СтруктураЗапроса.Вставить("ТекстЗапроса",СРЕД(ТекстЗапроса,16));
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СписокВерсий=Неопределено Тогда
		
		СтруктураПараметров.Вставить("СписокВерсий", СписокВерсий);
		
		Если ДанныеЗапроса.Свойство("ПоследниеВерсии") Тогда
			СтруктураПараметров.Вставить("ПоследниеВерсии", ДанныеЗапроса.ПоследниеВерсии);
		ИначеЕсли СписокВерсий.Количество()>0 Тогда			
			СтруктураПараметров.Вставить("ПоследниеВерсии", СписокВерсий[0].Значение);			
		Иначе			
			СтруктураПараметров.Вставить("ПоследниеВерсии", Справочники.ВерсииЗначенийПоказателей.ПустаяСсылка());			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	Возврат СтруктураЗапроса;
	
КонецФункции // ПодготовитьТекстЗапросаКРегистрам()

Функция ПолучитьТаблицуАналитик(ВидОтчета,ОтборПоказателей,ТолькоЧисловые) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик, 0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ПоказателиОтчетов.ЧисловойПоказатель,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная, ЛОЖЬ) КАК Валютный
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета";
	
	Если ТолькоЧисловые Тогда
		Запрос.Текст=Запрос.Текст+"
		|И ПоказателиОтчетов.ЧисловойПоказатель";
		
	КонецЕсли;
	
	Если Не ОтборПоказателей=Неопределено Тогда
		
		Для Каждого УсловиеОтбора ИЗ ОтборПоказателей Цикл
			
			Если СтрНайти(УсловиеОтбора.Ключ,"####.")>0 Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|И "+СтрЗаменить(УсловиеОтбора.Ключ,"####","ПоказателиОтчетов");
				
			Иначе
				
				Запрос.Текст=Запрос.Текст+"
				|И "+СтрЗаменить(УсловиеОтбора.Ключ,"####","ПоказателиОтчетов.Ссылка");
				
			КонецЕсли;
			
			Для Каждого СтрПараметр ИЗ УсловиеОтбора.Значение Цикл
				
				Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Возврат ВернутьТабНомеровАналитик(Запрос.Выполнить().Выгрузить());	
	
КонецФункции // ПолучитьТаблицуПоказателей(ПараметрДляОтбора)

Функция ВернутьТабНомеровАналитик(мПоказатели) Экспорт
	
	ТабНомеровАналитик=мПоказатели.Скопировать(,"ЧисловойПоказатель,ЧислоАналитикГруппыРаскрытия");
	ТабНомеровАналитик.Свернуть("ЧисловойПоказатель,ЧислоАналитикГруппыРаскрытия");
	
	ТабНомеровАналитик.Колонки.Добавить("Валютный",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Каждого Строка ИЗ ТабНомеровАналитик Цикл
		
		Если мПоказатели.НайтиСтроки(Новый Структура("ЧисловойПоказатель,ЧислоАналитикГруппыРаскрытия,Валютный",Строка.ЧисловойПоказатель,Строка.ЧислоАналитикГруппыРаскрытия,Истина)).Количество()>0 Тогда
			
			Строка.Валютный=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабНомеровАналитик;
	
КонецФункции // ВернутьТабНомеровАналитик()

Функция ВернутьИмяТаблицыСинтетики(ПараметрТаблицы,ЧисловойПоказатель=Истина) Экспорт
	
	Если ТипЗнч(ПараметрТаблицы)=Тип("Число") Тогда
		
		АналитикНаУровнеОтчета=ПараметрТаблицы;
			
	Иначе
		
		Если ТипЗнч(ПараметрТаблицы)=Тип("СправочникСсылка.ВидыОтчетов") Тогда
			
			ВидОтчета=ПараметрТаблицы;
			
		Иначе
			
			ВидОтчета=ПараметрТаблицы.Владелец;
			
		КонецЕсли;
				
		АналитикНаУровнеОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
		
	КонецЕсли;
				
	Если ЧисловойПоказатель Тогда
		
		Возврат ?(АналитикНаУровнеОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+АналитикНаУровнеОтчета);
		
	Иначе
		
		Возврат "ЗначенияПоказателейОтчетовНечисловые";
		
	КонецЕсли;
	
КонецФункции // ВернутьИмяТаблицыСинтетики 
	
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЗАПИСЯМИ РЕГИСТРОВ ЗНАЧЕНИЙ ПОКАЗАТЕЛЕЙ ОТЧЕТОВ
//
// Переносятся только числовые показатели, т.к. нечисловые хранятся в одном регистре независимо от количества
// аналитик раскрытия.


Процедура ПеренестиЗаписиПриИзмененииАналитикГруппыРаскрытия(Ссылка,Объект,Отказ) Экспорт
	
	ГруппаРаскрытия=Ссылка;
	СтароеКоличествоАналитик=Ссылка.ЧислоАналитик;
	НовоеКоличествоАналитик=Объект.ЧислоАналитик;
	СтараяВалютная=Ссылка.Валютная;
	НоваяВалютная=Объект.Валютная;
	
	ВидОтчета=ГруппаРаскрытия.Владелец;
	АналитикВидаОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
		
	СтароеКоличествоАналитикИтог=АналитикВидаОтчета+СтароеКоличествоАналитик;
	НовоеКоличествоАналитикИтог=АналитикВидаОтчета+НовоеКоличествоАналитик;
	
	Если СтароеКоличествоАналитикИтог=0 Тогда
		
		Если СтараяВалютная Тогда
			
			ИмяИсходногоРегистра="ЗначенияПоказателейОтчетовВалютные";
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ИмяИсходногоРегистра="ЗначенияПоказателейОтчетов"+СтароеКоличествоАналитикИтог;
		
	КонецЕсли;
	
	Если НовоеКоличествоАналитикИтог=0 Тогда
		
		Если НоваяВалютная Тогда
			
			ИмяНовогоРегистра="ЗначенияПоказателейОтчетовВалютные";
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		ИмяНовогоРегистра="ЗначенияПоказателейОтчетов"+НовоеКоличествоАналитикИтог;
		
	КонецЕсли;
			
	Запрос=Новый Запрос;
	
	Если СтароеКоличествоАналитикИтог<НовоеКоличествоАналитикИтог Тогда
		
		Запрос.Текст="ВЫБРАТЬ
		|	ЗначенияПоказателейОтчетов.Версия,";
		
		Для Индекс=1 По НовоеКоличествоАналитикИтог Цикл
			
			Если Индекс<=СтароеКоличествоАналитикИтог Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|ЗначенияПоказателейОтчетов.Аналитика"+Индекс+",";
				
			Иначе
				
				Запрос.Текст=Запрос.Текст+"
				|&Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
				
				Запрос.УстановитьПараметр("Аналитика"+Индекс,КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоВидуАналитики(Объект["ВидАналитики"+Индекс]));
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Запрос.Текст=Запрос.Текст+"
		|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
		|	ЗначенияПоказателейОтчетов.Показатель,
		|	ЗначенияПоказателейОтчетов.Значение,
		|	ЗначенияПоказателейОтчетов.ЗначениеВалюта
		|ИЗ
		|	РегистрСведений."+ИмяИсходногоРегистра+" КАК ЗначенияПоказателейОтчетов
		|ГДЕ
		|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета = &ВидОтчета
		|   И ЗначенияПоказателейОтчетов.Показатель.ГруппаРаскрытия = &ГруппаРаскрытия
		|   И (НЕ ЗначенияПоказателейОтчетов.ИтоговоеЗначение)"; 
				
	Иначе
		
		ТекстГруппировки="";
		
		Запрос.Текст="ВЫБРАТЬ
		|	ЗначенияПоказателейОтчетов.Версия,";
		
		Для Индекс=1 По НовоеКоличествоАналитикИтог Цикл
			
			Запрос.Текст=Запрос.Текст+"
			|ЗначенияПоказателейОтчетов.Аналитика"+Индекс+",";
			
			ТекстГруппировки=ТекстГруппировки+",
			|ЗначенияПоказателейОтчетов.Аналитика"+Индекс;
			
		КонецЦикла;	
		
		ТекстГруппировки=ТекстГруппировки+",ЗначенияПоказателейОтчетов.АналитикаВалюта";
		
		Запрос.Текст=Запрос.Текст+"
		|	ЗначенияПоказателейОтчетов.Показатель,
		|	ЗначенияПоказателейОтчетов.АналитикаВалюта,
		|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
		|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеВалюта) КАК ЗначениеВалюта
		|ИЗ
		|	РегистрСведений."+ИмяИсходногоРегистра+" КАК ЗначенияПоказателейОтчетов
		|ГДЕ
		|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета = &ВидОтчета
		|   И ЗначенияПоказателейОтчетов.Показатель.ГруппаРаскрытия = &ГруппаРаскрытия
		|   И (НЕ ЗначенияПоказателейОтчетов.ИтоговоеЗначение)
		|СГРУППИРОВАТЬ ПО
		|ЗначенияПоказателейОтчетов.Показатель,
		|ЗначенияПоказателейОтчетов.Версия"+ТекстГруппировки;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	Запрос.УстановитьПараметр("ГруппаРаскрытия",ГруппаРаскрытия);
	
	ЧислоЗаписей=0;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	НаборЗаписей=РегистрыСведений[ИмяНовогоРегистра].СоздатьНаборЗаписей();
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.Значение=0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		НоваяСтрока.ИтоговоеЗначение=Ложь;
		
		ЧислоЗаписей=ЧислоЗаписей+1;
		
		Если ЧислоЗаписей>20000 Тогда
			
			Попытка
				
				НаборЗаписей.Записать(Ложь);
				ЧислоЗаписей=0;
				НаборЗаписей=РегистрыСведений[ИмяНовогоРегистра].СоздатьНаборЗаписей();
				
			Исключение
				
				ТекстСообщения = НСтр("ru = 'При переносе записей аналитических значений показателей
				|				из регистра %ИмяИсходногоРегистра% в регистр %ИмяНовогоРегистра% произошла ошибка:
				|				%ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяИсходногоРегистра%", Строка(ИмяИсходногоРегистра));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяНовогоРегистра%", Строка(ИмяНовогоРегистра));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, , СтатусСообщения.Важное);
				ОтменитьТранзакцию();	
				Возврат
				
			КонецПопытки;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		НаборЗаписей.Записать(Ложь);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'При переносе записей аналитических значений показателей
		|				из регистра %ИмяИсходногоРегистра% в регистр %ИмяНовогоРегистра% произошла ошибка:
		|				%ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяИсходногоРегистра%", Строка(ИмяИсходногоРегистра));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяНовогоРегистра%", Строка(ИмяНовогоРегистра));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Важное);
		ОтменитьТранзакцию();	
		Возврат
		
	КонецПопытки;
	
	// Очистим записи исходного регистра
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателейОтчетов.Версия,
	|   ЗначенияПоказателейОтчетов.Показатель
	|ИЗ
	|	РегистрСведений."+ИмяИсходногоРегистра+" КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета = &ВидОтчета
	|   И ЗначенияПоказателейОтчетов.Показатель.ГруппаРаскрытия = &ГруппаРаскрытия
	|   И (НЕ ЗначенияПоказателейОтчетов.ИтоговоеЗначение)";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НаборЗаписей=РегистрыСведений[ИмяИсходногоРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Результат.Версия);
		НаборЗаписей.Отбор.Показатель.Установить(Результат.Показатель);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстСообщения = НСтр("ru = 'При переносе записей аналитических значений показателей
			|				из регистра %ИмяИсходногоРегистра% в регистр %ИмяНовогоРегистра% произошла ошибка:
			|				%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяИсходногоРегистра%", Строка(ИмяИсходногоРегистра));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяНовогоРегистра%", Строка(ИмяНовогоРегистра));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,Отказ,,СтатусСообщения.Важное);
			ОтменитьТранзакцию();	
			Возврат
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
 	
КонецПроцедуры // ПеренестиЗаписиПриИзмененииАналитикГруппыРаскрытия()

Процедура ОчиститьЗначенияПоказателейОтчетов(ДокументСсылка,Отказ=Ложь) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Регистратор = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Пока Результат.Следующий() Цикл
		
		Если НЕ Справочники.ВерсииЗначенийПоказателей.УдалитьЗаписиВерсии(Результат.Ссылка) Тогда
			
			Отказ=Истина;
			Возврат;
			
		КонецЕсли;
				
	КонецЦикла;
			
КонецПроцедуры // ОчиститьЗначенияПоказателейОтчетов() 


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - МЕХАНИЗМЫ РЕДАКТИРОВАНИЯ ТАБЛИЦ РАСКРЫТИЙ.
//

Процедура ПеренестиДанныеИзТаблицыРаскрытияВИсходнуюТаблицу(ИсходнаяТаблицаРаскрытия, ТаблицаРаскрытия, МассивIDУдаленныхСтрок) Экспорт
	
	МассивУникальныхИдентификаторов = ИсходнаяТаблицаРаскрытия.ВыгрузитьКолонку("ID");
	
	Для Каждого Строка Из ТаблицаРаскрытия Цикл
		
		ЗаписьМассива = МассивУникальныхИдентификаторов.Найти(Строка.ID);
		
		Если ЗаписьМассива = Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ИсходнаяТаблицаРаскрытия.Добавить(), Строка);
		Иначе
			ЗаполнитьЗначенияСвойств(ИсходнаяТаблицаРаскрытия.Найти(Строка.ID, "ID"), Строка);
			МассивУникальныхИдентификаторов.Удалить(ЗаписьМассива);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивIDУдаленныхСтрок) Тогда
		
		Для Каждого ЗаписьМассива Из МассивIDУдаленныхСтрок Цикл
			УдаляемаяСтрока = ИсходнаяТаблицаРаскрытия.Найти(ЗаписьМассива, "ID");
			Если УдаляемаяСтрока <> Неопределено Тогда
				ИсходнаяТаблицаРаскрытия.Удалить(УдаляемаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		МассивIDУдаленныхСтрок.Очистить();
		
	КонецЕсли;
	//Для Каждого ЗаписьМассива Из МассивУникальныхИдентификаторов Цикл
	//	
	//	УдаляемаяСтрока = ИсходнаяТаблицаРаскрытия.Найти(ЗаписьМассива, "ID");
	//	ИсходнаяТаблицаРаскрытия.Удалить(УдаляемаяСтрока);
	//	
	//КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьТаблицуРаскрытия(ИсходнаяТаблицаРаскрытия, ТаблицаРаскрытия, СтруктураРаскрытия, МассивIDУдаленныхСтрок, Индекс) Экспорт
	
	Если ИсходнаяТаблицаРаскрытия.Колонки.Найти("ID") = Неопределено Тогда
		
		ИсходнаяТаблицаРаскрытия.Колонки.Добавить("ID", Новый ОписаниеТипов("Число"));
		Для Каждого Строка Из ИсходнаяТаблицаРаскрытия Цикл
			Строка.ID = ВернутьИндекс(Индекс);
		КонецЦикла;
		
	Иначе
		
		Если ИсходнаяТаблицаРаскрытия.Количество() > 0 Тогда
			ТаблицаМаксимальногоИндекса = ИсходнаяТаблицаРаскрытия.Скопировать(, "ID");
			ТаблицаМаксимальногоИндекса.Сортировать("ID Убыв");
			Индекс = ТаблицаМаксимальногоИндекса[0].ID;
		Иначе
			Индекс = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураРаскрытия) Тогда
		
		ПостроительЗапроса = Новый ПостроительЗапроса;
		ПостроительЗапроса.ИсточникДанных = Новый ОписаниеИсточникаДанных(ИсходнаяТаблицаРаскрытия);
		
		Для Каждого Строка Из СтруктураРаскрытия Цикл
			
			Если ПостроительЗапроса.ДоступныеПоля.Найти(Строка.Ключ) <> Неопределено Тогда
				Отбор               = ПостроительЗапроса.Отбор.Добавить(Строка.Ключ);
				Отбор.ВидСравнения  = Строка.Значение.ВидСравнения;
				Отбор.Значение      = Строка.Значение.Значение;
				Отбор.Использование = Истина;
			КонецЕсли;
			
		КонецЦикла;
			
		ПостроительЗапроса.Выполнить();
		
		ТаблицаРаскрытия=ИсходнаяТаблицаРаскрытия.СкопироватьКолонки();
		Выборка=ПостроительЗапроса.Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			НоваяСтрока=ТаблицаРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		КонецЦикла;
				
	Иначе
		
		ТаблицаРаскрытия = ИсходнаяТаблицаРаскрытия.Скопировать();
		
	КонецЕсли;
	
	МассивIDУдаленныхСтрок = Новый Массив;
	
КонецПроцедуры

Функция ВернутьИндекс(Индекс) Экспорт
	
	Если Индекс = Неопределено Тогда
		Индекс = 1;
	Иначе
		Индекс = Индекс + 1;
	КонецЕсли;
	
	Возврат Индекс;
	
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫГРУЗКИ ДОКУМЕНТОВ НА ДИСК

// Возвращает СправочникСсылка.ГруппыРаскрытия по коду группы.
//
Функция ГруппаРаскрытияПоКоду(Секция, ГруппыРаскрытия) Экспорт
	
	Для Каждого Группа Из ГруппыРаскрытия Цикл
		Если СокрЛП(Группа.ГруппаРаскрытия.Код) = Секция Тогда
			Возврат Группа.ГруппаРаскрытия;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

// Добавляет в начало макета признак начала новой страницы.
//
Функция ДобавитьПризнакНачалаСтраницы(Макет, ПризнакДобавленияНачалаСтраницы) Экспорт
	
	Если ПризнакДобавленияНачалаСтраницы И Макет <> Неопределено И Макет.ВысотаТаблицы <> 0 Тогда
		Макет.Область(1, 0, 1, 0).НачалоСтраницы = Истина;
	КонецЕсли;
	Возврат Макет;
	
КонецФункции

// Формирует общую таблицу раскрытий отчета по таблицам раскрытий для каждой группы раскрытия
// в отдельности.
//
Функция Сформировать_мПоказателиРаскрытия(СоответствиеТаблицГрупп,Отчет) Экспорт
	
	ТаблицаРаскрытий = Новый ТаблицаЗначений;
	Для Каждого Кол Из Отчет.мПоказателиРаскрытия.Колонки Цикл
		ТаблицаРаскрытий.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения, Кол.Заголовок, Кол.Ширина);
	КонецЦикла;
	
	Для Каждого Раскрытие Из СоответствиеТаблицГрупп Цикл
		ТаблицаРаскрытия = Раскрытие.Значение;
		Для Каждого Стр Из ТаблицаРаскрытия Цикл
			Для Каждого Колонка Из ТаблицаРаскрытия.Колонки Цикл
				ЭтоКолонкаАналитики = Ложь;
				Для Инд = 1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
					Если Колонка.Имя = "Аналитика" + Инд Тогда
						ЭтоКолонкаАналитики = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если ЭтоКолонкаАналитики Тогда
					Продолжить;
				КонецЕсли;
				
				ТекПоказатель = Отчет.мСоответствиеДляПоискаПоКоду[Колонка.Имя];
				
				Если ТекПоказатель <> Неопределено Тогда
					НовСтр = ТаблицаРаскрытий.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтр, Стр);
					НовСтр.Значение = Стр[Колонка.Имя];
					НовСтр.Показатель = ТекПоказатель.Ссылка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	Возврат ТаблицаРаскрытий;
	
КонецФункции

// Скрывает в макете строки, содержащие области со значеними,
// если такие области не содержат значений в пределах строки.
//
Процедура УправлениеВидимостьюПустыхСтрок(Макет = Неопределено) Экспорт
	
	СписокНеЗаполненных = Новый СписокЗначений;
	СписокЗаполненных = Новый СписокЗначений;
	Для Каждого Область Из Макет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда // если пустая область
				Для НомСтр = Область.Верх По Область.Низ Цикл
					Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокНеЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				КонецЦикла;
			Иначе // если область не пустая
				Для НомСтр = Область.Верх По Область.Низ Цикл
					Если СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
		Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
			Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Скрывает в макете колонки, содержащие области со значеними,
// если такие области не содержат значений в пределах колонки.
//
Процедура УправлениеВидимостьюПустыхКолонок(Макет = Неопределено) Экспорт
	
	СписокНеЗаполненных = Новый СписокЗначений;
	СписокЗаполненных = Новый СписокЗначений;
	Для Каждого Область Из Макет.Области Цикл
		Если Область.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Область.СодержитЗначение = Истина Тогда
			Если НЕ ЗначениеЗаполнено(Область.Значение) Тогда // если пустая область
				Для НомСтр = Область.Лево По Область.Право Цикл
					Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокНеЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				КонецЦикла;
			Иначе // если область не пустая
				Для НомСтр = Область.Лево По Область.Право Цикл
					Если СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
						СписокЗаполненных.Добавить(НомСтр);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для НомСтр = 1 По Макет.ШиринаТаблицы Цикл
		Если СписокНеЗаполненных.НайтиПоЗначению(НомСтр) <> Неопределено И СписокЗаполненных.НайтиПоЗначению(НомСтр) = Неопределено Тогда
			Макет.Область(0, НомСтр, 0, НомСтр).Видимость = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Последовательно вызывает сначала процедуру управления видимостью
// строк, содержащих только области с незаполненными значениями,
// а затем процедуру управления видимостью колонок.
//
Процедура УправлениеВидимостьюПустыхИзмерений(Макет = Неопределено) Экспорт
	
	УправлениеВидимостьюПустыхСтрок(Макет);
	УправлениеВидимостьюПустыхКолонок(Макет);
	
КонецПроцедуры

// Функция возвращает табличное представление документа настраиваемый отчет.
//
Функция ПолучитьЭкземплярОтчета(СсылкаНаОтчет, ВыводитьРаскрытие = Истина, ВыводитьОсновнуюЧасть = Истина, ТихийРежим = Ложь) Экспорт
	
	ВставлятьРазрывыСтраниц=Ложь;
	
	СоответствиеМакетовГрупп = Новый Соответствие;
	СоответствиеТаблицГрупп = Новый Соответствие;
	
	Отчет=СсылкаНаОтчет.ПолучитьОбъект();
	Отчет.ИнициализироватьКонтекст();
	
	МакетОснование = Отчет.ШаблонОтчета.Макет.Получить();
	Отчет.ОбработатьМакетыРаскрытий(МакетОснование);	
	
	//#Если Клиент Тогда
	
	Если ВыводитьРаскрытие Тогда
		
		ВидОтчета = Отчет.ВидОтчета;
		Запрос = Новый Запрос;
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ
		| ИСТИНА КАК Пометка,
		|	ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия";
		Для Инд = 1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
			Запрос.Текст = Запрос.Текст + ",
			|	ГруппыРаскрытия.ВидАналитики" + Инд;
		КонецЦикла;						  
		Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
		|ГДЕ
		|	ГруппыРаскрытия.Владелец = &Владелец
		|УПОРЯДОЧИТЬ ПО
		|	ГруппыРаскрытия.Наименование";
		Запрос.УстановитьПараметр("Владелец", ВидОтчета);
		
		ГруппыРаскрытия=Запрос.Выполнить().Выгрузить();
		КэшПараметровГруппРаскрытия = Отчет.КэшПараметровГруппРаскрытия;
		
		// генерируем макеты раскрытий		
		СтруктураОтбора = Новый Структура;
		Для Инд = 1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураОтбора.Вставить("Аналитика" + Инд);
		КонецЦикла;
		Для Каждого Группа Из ГруппыРаскрытия Цикл
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, Группа);
			ТаблицаРаскрытия = Отчет.НаложитьОтборНаТаблицуРаскрытия(Отчет.ПолучитьТаблицуРаскрытия(КэшПараметровГруппРаскрытия.Найти(Группа.ГруппаРаскрытия, "ГруппаРаскрытия")), СтруктураОтбора);
			СоответствиеТаблицГрупп.Вставить(Группа.ГруппаРаскрытия, ТаблицаРаскрытия);
			СоответствиеМакетовГрупп.Вставить(Группа.ГруппаРаскрытия, Отчет.СгенерироватьМакетРаскрытия(Отчет.ШаблонОтчета, Группа.ГруппаРаскрытия, ТаблицаРаскрытия));
		КонецЦикла;
		
		Для Каждого МакетГруппы Из СоответствиеМакетовГрупп Цикл
			ВМакетеЕстьЗаполненноеЗначение = Ложь;
			Для Каждого Обл Из МакетГруппы.Значение.Области Цикл
				Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И Обл.СодержитЗначение = Истина Тогда
					Если ЗначениеЗаполнено(Обл.Значение) Тогда
						ВМакетеЕстьЗаполненноеЗначение = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ ВМакетеЕстьЗаполненноеЗначение Тогда
				СоответствиеМакетовГрупп.Вставить(МакетГруппы.Ключ, Неопределено);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ГруппыРаскрытия=Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	ОбщийМакет = Новый ТабличныйДокумент;
	
	Если ВыводитьОсновнуюЧасть Тогда
		
		// обрабатываем основной макет
		
		МакетОснование = Отчет.ШаблонОтчета.Макет.Получить();
		Отчет.ОбработатьМакетыРаскрытий(МакетОснование);
		ОсновнойМакет=Новый ТабличныйДокумент;
		ОсновнойМакет.Вывести(МакетОснование);
		ОсновнойМакет.ОриентацияСтраницы = МакетОснование.ОриентацияСтраницы;
		
		//Отчет.ЗаполнитьМакет(ОсновнойМакет);
		//УправлениеВидимостьюПустыхИзмерений(ОсновнойМакет);
		//Отчет.ПрименитьПараметрыОтображения(ОсновнойМакет);
		
		Если ГруппыРаскрытия.Количество() > 0 Тогда
			ИсходныйМакет = Отчет.ШаблонОтчета.Макет.Получить();
			
			// формируем массив соответствия строк областям раскрытия
			МассивСтрок = Новый Массив(ИсходныйМакет.ВысотаТаблицы);
			Для Каждого Группа Из ГруппыРаскрытия Цикл
				ОбластьШапка	= ИсходныйМакет.Области.Найти(СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Шапка");
				ОбластьСтрока	= ИсходныйМакет.Области.Найти(СокрЛП(Группа.ГруппаРаскрытия.Код));
				ОбластьПодвал	= ИсходныйМакет.Области.Найти(СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Подвал");
				Если ОбластьШапка <> Неопределено И ОбластьШапка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Для Инд = ОбластьШапка.Верх - 1 По ОбластьШапка.Низ - 1 Цикл
						МассивСтрок[Инд] = СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Шапка";
					КонецЦикла;
				КонецЕсли;
				Если ОбластьСтрока <> Неопределено И ОбластьСтрока.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Для Инд = ОбластьСтрока.Верх - 1 По ОбластьСтрока.Низ - 1 Цикл
						МассивСтрок[Инд] = СокрЛП(Группа.ГруппаРаскрытия.Код);
					КонецЦикла;
				КонецЕсли;
				Если ОбластьПодвал <> Неопределено И ОбластьПодвал.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
					Для Инд = ОбластьПодвал.Верх - 1 По ОбластьПодвал.Низ - 1 Цикл
						МассивСтрок[Инд] = СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Подвал";
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			// генерация общего макета
			ВыведенныеСекции = Новый СписокЗначений;
			КоличествоСтрокОсновнойЧасти = 0;
			ПослНиз = 0;
			
			//НачалоРаскрытий = Неопределено;
			
			Для ИндСтр = 0 По МассивСтрок.Количество() - 1 Цикл
				Секция = МассивСтрок[ИндСтр];
				Если Секция = Неопределено Тогда
					КоличествоСтрокОсновнойЧасти = КоличествоСтрокОсновнойЧасти + 1;
					Продолжить;
				КонецЕсли;
				ГруппаРаскрытия = ГруппаРаскрытияПоКоду(Секция, ГруппыРаскрытия);
				Если ГруппаРаскрытия <> Неопределено И ВыведенныеСекции.НайтиПоЗначению(ГруппаРаскрытия) = Неопределено Тогда
					ВыведенныеСекции.Добавить(ГруппаРаскрытия);
					Если КоличествоСтрокОсновнойЧасти <> 0 Тогда
						ТекНиз = ПослНиз + КоличествоСтрокОсновнойЧасти;
						ОбщийМакет.Вывести(ДобавитьПризнакНачалаСтраницы(ОсновнойМакет.ПолучитьОбласть(ПослНиз + 1, 0, ТекНиз, 0), ВставлятьРазрывыСтраниц));
						ПослНиз = ТекНиз;
						КоличествоСтрокОсновнойЧасти = 0;
					КонецЕсли;
					ТаблДокРаскрытия = ДобавитьПризнакНачалаСтраницы(СоответствиеМакетовГрупп.Получить(ГруппаРаскрытия), ВставлятьРазрывыСтраниц);
					Если ТаблДокРаскрытия <> Неопределено Тогда
						ОбщийМакет.Вывести(ТаблДокРаскрытия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ОбщийМакет.Вывести(ДобавитьПризнакНачалаСтраницы(ОсновнойМакет, ВставлятьРазрывыСтраниц));
		КонецЕсли;
		
	Иначе
		
		// обрабатываем основной макет
		ИсходныйМакет = Отчет.ШаблонОтчета.Макет.Получить();
		
		// формируем массив соответствия строк областям раскрытия
		МассивСтрок = Новый Массив(ИсходныйМакет.ВысотаТаблицы);
		Для Каждого Группа Из ГруппыРаскрытия Цикл
			ОбластьШапка	= ИсходныйМакет.Области.Найти(СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Шапка");
			ОбластьСтрока	= ИсходныйМакет.Области.Найти(СокрЛП(Группа.ГруппаРаскрытия.Код));
			ОбластьПодвал	= ИсходныйМакет.Области.Найти(СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Подвал");
			Если ОбластьШапка <> Неопределено И ОбластьШапка.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Для Инд = ОбластьШапка.Верх - 1 По ОбластьШапка.Низ - 1 Цикл
					МассивСтрок[Инд] = СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Шапка";
				КонецЦикла;
			КонецЕсли;
			Если ОбластьСтрока <> Неопределено И ОбластьСтрока.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Для Инд = ОбластьСтрока.Верх - 1 По ОбластьСтрока.Низ - 1 Цикл
					МассивСтрок[Инд] = СокрЛП(Группа.ГруппаРаскрытия.Код);
				КонецЦикла;
			КонецЕсли;
			Если ОбластьПодвал <> Неопределено И ОбластьПодвал.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Строки Тогда
				Для Инд = ОбластьПодвал.Верх - 1 По ОбластьПодвал.Низ - 1 Цикл
					МассивСтрок[Инд] = СокрЛП(Группа.ГруппаРаскрытия.Код) + "_Подвал";
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// генерация общего макета
		ВыведенныеСекции = Новый СписокЗначений;
		Для ИндСтр = 0 По МассивСтрок.Количество() - 1 Цикл
			Секция = МассивСтрок[ИндСтр];
			Если Секция = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ГруппаРаскрытия = ГруппаРаскрытияПоКоду(Секция, ГруппыРаскрытия);
			Если ГруппаРаскрытия <> Неопределено И ВыведенныеСекции.НайтиПоЗначению(ГруппаРаскрытия) = Неопределено Тогда
				ВыведенныеСекции.Добавить(ГруппаРаскрытия);
				ТаблДокРаскрытия = ДобавитьПризнакНачалаСтраницы(СоответствиеМакетовГрупп.Получить(ГруппаРаскрытия), ВставлятьРазрывыСтраниц);
				Если ТаблДокРаскрытия <> Неопределено Тогда
					ОбщийМакет.Вывести(ТаблДокРаскрытия);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	#Если Клиент Тогда
		Если Не ТихийРежим Тогда
			Состояние(Нстр("ru = 'Вычисление показателей...'"));
		КонецЕсли;
	#КонецЕсли
	
	ПоказателиПосле = Отчет.мПоказатели.Скопировать();
	Отчет.СформироватьСтруктуруПараметров();
	Отчет.СформироватьСтруктуруПоказателей();
	Старая_мПоказателиРаскрытия = Отчет.ПолучитьКопиюРаскрытия();
	Отчет.мПоказателиРаскрытия = Сформировать_мПоказателиРаскрытия(СоответствиеТаблицГрупп,Отчет);
	ПризнакОшибки = НЕ Отчет.ЗапуститьМодульВычисления();
	Отчет.мПоказателиРаскрытия = Старая_мПоказателиРаскрытия;
	Если ПризнакОшибки Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отчет.ПеренестиЗначенияИзПоказателиВмПоказатели(ПоказателиПосле);
	Отчет.ЗаполнитьМакет(ОбщийМакет, ПоказателиПосле);
//	Отчет.ПрименитьПараметрыОтображения(ОбщийМакет);
	УправлениеВидимостьюПустыхИзмерений(ОбщийМакет);
	
	Если ОбщийМакет.Область(1, 0, 1, 0).НачалоСтраницы Тогда
		ОбщийМакет.Область(1, 0, 1, 0).НачалоСтраницы = Ложь;
	КонецЕсли;
	ОбщийМакет.Область(1, 0, ОбщийМакет.ВысотаТаблицы, 0).Видимость = Истина;
	Возврат ОбщийМакет;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ДЛЯ РАБОТЫ С ВНЕШНЕЙ ИНФОРМАЦИОННОЙ БАЗОЙ 1С ПРЕДПРИЯТИЕ 7.7
//



////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьТаблицуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации,
	|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаВнешнейИБ,
	|	СоответствиеВнешнимИБСоответствиеРеквизитов.НеИспользоватьДляСинхронизации
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			СоответствиеВнешнимИБ.Ссылка КАК Ссылка
	|		ИЗ
	|			Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ГДЕ
	|			СоответствиеВнешнимИБ.Владелец = &ТипБД
	|			И СоответствиеВнешнимИБ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных
	|			И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование = &ИмяОбъектаВнешнейИБ
	|			И (НЕ СоответствиеВнешнимИБ.ПометкаУдаления)) КАК СоответствиеСсылка
	|		ПО СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка = СоответствиеСсылка.Ссылка
	|ГДЕ
	|	(НЕ(СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации = """"
	|				ИЛИ СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаВнешнейИБ = """"))";
	
	Запрос.УстановитьПараметр("ИмяОбъектаМетаДанных", СправочникКонсолидации);
	Запрос.УстановитьПараметр("ИмяОбъектаВнешнейИБ" , СправочникБД);
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьНастройкуСоответствия()

Функция ПолучитьНастройкуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД,ТипМетаДанных,ПервыйЭлемент=Истина,СоздаватьОбъект=Ложь,ТипОбъектаКонсолидации="") Экспорт
	
	Возврат РасширениеИнтеграцииУХ.ПолучитьНастройкуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД,ТипМетаДанных,ПервыйЭлемент,СоздаватьОбъект,ТипОбъектаКонсолидации);
		
КонецФункции // ПолучитьНастройкуСоответствия()
	
Функция ПолучитьТаблицуРеквизитовКонсолидации(МетаданныеОбъект) Экспорт
	
	
	
КонецФункции // ПолучитьТаблицуРеквизитовКонсолидации() 

Функция ПолучитьОписаниеТиповДляПримитивныхТиповCOM(База) Экспорт
	
	Возврат База.NewObject("ОписаниеТипов", "Строка, Число, Дата, Булево");
	
КонецФункции

// Возвращает таблицу кодов счетов, иерархически подчиненных переданным в списке основным счетам
//
Функция ПолучитьСчетаВИерархии(ПланСчетов,Счет,СписокСчетов,ВнутренниеДанные=Ложь) Экспорт
	
	Запрос=Новый Запрос;
	ЛокСписокСчетов=Новый СписокЗначений;
	
	Если ВнутренниеДанные Тогда
		
		Если НЕ Счет.ГруппирующийСчет Тогда
			
			СчетССылка=Счет.СчетССылка;
			
			ЛокСписокСчетов.Добавить(СчетССылка);
			СписокСчетов.Добавить(СчетССылка);
			
		Иначе
			
			Запрос.Текст="ВЫБРАТЬ
			|	СчетаБД.СчетССылка КАК СчетССылка 
			|ИЗ
			|	Справочник.СчетаБД КАК СчетаБД
			|ГДЕ
			|	СчетаБД.Владелец = &ПланСчетов
			|	И СчетаБД.Ссылка В ИЕРАРХИИ(&ОсновнойСчет)
			|	И НЕ СчетаБД.ГруппирующийСчет";
			
			Запрос.УстановитьПараметр("ПланСчетов",ПланСчетов);
			Запрос.УстановитьПараметр("ОсновнойСчет",Счет);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				ЛокСписокСчетов.Добавить(Результат.СчетССылка);
				СписокСчетов.Добавить(Результат.СчетССылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ Счет.ГруппирующийСчет Тогда
			
			СчетКод=Счет.Код;
			
			ЛокСписокСчетов.Добавить(СчетКод);
			СписокСчетов.Добавить(СчетКод);
			
		Иначе
			
			Запрос.Текст="ВЫБРАТЬ
			|	СчетаБД.Код
			|ИЗ
			|	Справочник.СчетаБД КАК СчетаБД
			|ГДЕ
			|	СчетаБД.Владелец = &ПланСчетов
			|	И СчетаБД.Ссылка В ИЕРАРХИИ(&ОсновнойСчет)
			|	И НЕ СчетаБД.ГруппирующийСчет";
			
			Запрос.УстановитьПараметр("ПланСчетов",ПланСчетов);
			Запрос.УстановитьПараметр("ОсновнойСчет",Счет);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				ЛокСписокСчетов.Добавить(Результат.Код);
				СписокСчетов.Добавить(Результат.Код);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЛокСписокСчетов;
			
КонецФункции //(ПолучитьТаблицуСчетов) 
			
Функция ПолучитьПериодПоДате(Дата, Периодичность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала <= &Дата
	|	И Периоды.ДатаОкончания >= &Дата
	|	И Периоды.Периодичность = &Периодичность";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределитьБлижайшийПериодПоДате(Дата, Периодичность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Периоды.Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала >= &Дата
	|	И Периоды.Периодичность = &Периодичность
	|
	|УПОРЯДОЧИТЬ ПО
	|	Периоды.ДатаНачала";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуСоСмещениемДляДекады(Знач РасчетнаяДата, Знач Смещение) Экспорт
	
	// анализируем
	ГодДатыНачала						= Год(РасчетнаяДата);
	МесяцДатыНачала						= Месяц(РасчетнаяДата);
	ДеньДатыНачала						= День(РасчетнаяДата);
	ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
	ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
	НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
	
	// изменяем
	НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
	
	// синтезируем
	ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
	ДекадаВГоду							= НомерДекадыНЭ % 36;
	МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
	ДекадаВМесяце						= ДекадаВГоду % 3;
	ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
	
	Возврат Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
	
КонецФункции

Функция ПолучитьДатуСоСмещениемДляНедели(Знач РасчетнаяДата, Знач Смещение) Экспорт
	
	_Дата = НачалоДня(РасчетнаяДата);

	НачалоНедели = _Дата - 60*60*24 * (ДеньНедели(_Дата)-1);
	Если Месяц(НачалоНедели) <> Месяц(_Дата) Тогда
		НачалоНедели = НачалоМесяца(_Дата);
	КонецЕсли;

	КонецНедели = НачалоДня(КонецНедели(НачалоНедели));
	Если Месяц(КонецНедели) <> Месяц(_Дата) Тогда
		КонецНедели = НачалоДня(КонецМесяца(_Дата));
	КонецЕсли;

	Если Смещение > 0 Тогда
		
		Для Поз = 1 По Смещение Цикл
			
			НачалоНедели = КонецНедели + 60*60*24;
			
			КонецНедели = НачалоДня(КонецНедели(НачалоНедели));
			Если Месяц(КонецНедели) <> Месяц(НачалоНедели) Тогда
				КонецНедели = НачалоДня(КонецМесяца(НачалоНедели));
			КонецЕсли;
			
		КонецЦикла;
	
	ИначеЕсли Смещение < 0 Тогда

		Для Поз = 1 По Смещение*-1 Цикл
			
			КонецНедели = НачалоНедели - 60*60*24;
			
			НачалоНедели = НачалоНедели(КонецНедели);
			Если Месяц(КонецНедели) <> Месяц(НачалоНедели) Тогда
				НачалоНедели = НачалоМесяца(КонецНедели);
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат НачалоНедели;
	
КонецФункции

Функция ПолучитьДатуИзПараметра(ЗначениеПараметра, ТипРасчета, Сдвиг) Экспорт
	
	Если ТипРасчета = "ПериодыНачало" ИЛИ ТипРасчета = "ПериодыНачалоСдвиг" Тогда
		РасчетнаяДата = ЗначениеПараметра.ДатаНачала;
	КонецЕсли;
	
	Если ТипРасчета = "ПериодыКонец" ИЛИ ТипРасчета = "ПериодыКонецСдвиг" Тогда
		РасчетнаяДата = КонецДня(ЗначениеПараметра.ДатаОкончания);
	КонецЕсли;
	
	Если ТипЗнч(Сдвиг) = Тип("Число") Тогда
		Период = ЗначениеПараметра.Периодичность;
		
		Если Период = Перечисления.Периодичность.Год Тогда
			РасчетнаяДата = ДобавитьМесяц(РасчетнаяДата, 12 * Сдвиг);
		КонецЕсли;
		
		Если Период = Перечисления.Периодичность.Полугодие Тогда
			РасчетнаяДата = ДобавитьМесяц(РасчетнаяДата, 6 * Сдвиг);
		КонецЕсли;
		
		Если Период = Перечисления.Периодичность.Квартал Тогда
			РасчетнаяДата = ДобавитьМесяц(РасчетнаяДата, 3 * Сдвиг);
		КонецЕсли;
		
		Если Период = Перечисления.Периодичность.Месяц Тогда
			РасчетнаяДата = ДобавитьМесяц(РасчетнаяДата, 1 * Сдвиг);
		КонецЕсли;
		
		Если Период = Перечисления.Периодичность.Декада Тогда
			РасчетнаяДата = ПолучитьДатуСоСмещениемДляДекады(РасчетнаяДата, Сдвиг);
		КонецЕсли;
		
		Если Период = Перечисления.Периодичность.Неделя Тогда
			РасчетнаяДата = ПолучитьДатуСоСмещениемДляНедели(РасчетнаяДата, Сдвиг);
		КонецЕсли;
		
		Если Период = Перечисления.Периодичность.День Тогда
			РасчетнаяДата = РасчетнаяДата + Сдвиг * 3600 * 24;
		КонецЕсли;
		
	КонецЕсли;
	Возврат РасчетнаяДата;
	
КонецФункции

Функция ПолучитьЗначениеРеквизитаИзОбъектаСправочника(ЗначениеПараметра, Реквизит) Экспорт
	Возврат ЗначениеПараметра[Реквизит];
КонецФункции

Функция ПолучитьОписаниеПримитивногоТипаИзБД(База, ОписаниеТиповБД) Экспорт
	
	Если ТипЗнч(ОписаниеТиповБД)=Тип("ОписаниеТипов") Тогда // Используются данные текущей ИБ
		
		Возврат ОписаниеТиповБД;
		
	КонецЕсли;
	
	ТипКОМБулево = База.XMLTypeOf(истина);
	ТипКОМЧисло  = База.XMLTypeOf(20);
	ТипКОМСтрока = База.XMLTypeOf(" ");
	ТипКОМДата   = База.XMLTypeOf(ТекущаяДата());
	
	МассивТипов  = Новый Массив;
	
	Для Каждого Тип Из ОписаниеТиповБД.Типы() Цикл
		
		Если База.XMLType(Тип) = ТипКОМБулево Тогда
			МассивТипов.Добавить(Тип("Булево"));
		ИначеЕсли База.XMLType(Тип) = ТипКОМЧисло Тогда
			МассивТипов.Добавить(Тип("Число"));
		ИначеЕсли База.XMLType(Тип) = ТипКОМСтрока Тогда
			МассивТипов.Добавить(Тип("Строка"));
		ИначеЕсли База.XMLType(Тип) = ТипКОМДата Тогда
			МассивТипов.Добавить(Тип("Дата"));
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивТипов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТК_Числа = Новый КвалификаторыЧисла(ОписаниеТиповБД.NumberQualifiers.Digits
	, ОписаниеТиповБД.NumberQualifiers.FractionDigits
	, ?(ОписаниеТиповБД.NumberQualifiers.AllowedSign = База.AllowedSign.Any, ДопустимыйЗнак.Любой, ДопустимыйЗнак.Неотрицательный));
	
	ТК_Строки = Новый КвалификаторыСтроки(ОписаниеТиповБД.StringQualifiers.Length
	, ?(ОписаниеТиповБД.StringQualifiers.AllowedLength = База.AllowedLength.Variable
	, ДопустимаяДлина.Переменная
	, ДопустимаяДлина.Фиксированная));
	
	COM_DateFractions = ОписаниеТиповБД.DateQualifiers.DateFractions;
	
	Если COM_DateFractions = База.DateFractions.Date Тогда
		ДатаЧасть = ЧастиДаты.Дата;
	ИначеЕсли COM_DateFractions = База.DateFractions.Time Тогда
		ДатаЧасть = ЧастиДаты.Время;
	Иначе
		ДатаЧасть = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	ТК_Даты   = Новый КвалификаторыДаты(ДатаЧасть);
	
	Возврат Новый ОписаниеТипов(МассивТипов, ТК_Числа, ТК_Строки, ТК_Даты);
	
КонецФункции

Функция ЧислоАналитикВидаОтчета(ВидОтчета) Экспорт
	
	Если ТипЗнч(ВидОтчета)=Тип("СправочникСсылка.ШаблоныТрансформационныхКорректировок") Тогда
		Возврат 0;
	КонецЕсли;
		
	АналитикВидаОтчета=0;
	
	Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+Инд]) Тогда
			
			АналитикВидаОтчета=АналитикВидаОтчета+1;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат АналитикВидаОтчета; 
	
КонецФункции // ЧислоАналитикВидаОтчета() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НУЖД WEB-ИНТЕРФЕЙСА

Функция СформироватьСтруктуруПараметровШаблона(Шаблон) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Номер");
	Параметры.Вставить("Дата");
	
	Для Каждого Реквизит Из Метаданные.Документы.НастраиваемыйОтчет.Реквизиты Цикл
		Параметры.Вставить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Парам Из Шаблон.Владелец.ПараметрыОтчета Цикл
		Параметры.Вставить(Парам.Код);
	КонецЦикла;
	
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьXMLСтруктуруМакетаШаблона(Шаблон) Экспорт
	
	Макет = Шаблон.Макет.Получить();
	Если Макет = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	ПолучитьМакетОсновнойЧасти(Макет, Шаблон.Владелец);
	ШиринаСтолбцов = Новый Массив();
	Для ИндексСтолбца = 1 По Макет.ШиринаТаблицы Цикл
		ОбластьСтолбца = Макет.Область(, ИндексСтолбца, , ИндексСтолбца);
		ШиринаСтолбцов.Добавить(ОбластьСтолбца.ШиринаКолонки);			
	КонецЦикла;
	мПоказателиСоответствия = Новый Соответствие();
	ПоказателиОтчета = ПолучитьКодыПоказателей(Шаблон.Владелец);
	Для Каждого Стр Из ПоказателиОтчета Цикл
		мПоказателиСоответствия.Вставить(СокрЛП(Стр.Код), Истина);
	КонецЦикла;
	Параметры = СформироватьСтруктуруПараметровШаблона(Шаблон);
	Строки = Новый Массив();
	ПоглощаемыеЯчейки = Новый Массив();
	Для ИндексСтроки = 1 По Макет.ВысотаТаблицы Цикл
		Строка = Новый Структура();
		Ячейки = Новый Массив();		
		ИндексОбъединяющейЯчейки = -1;
		ИндексСтолбца = 1;
		Пока ИндексСтолбца <= Макет.ШиринаТаблицы Цикл			
			ОбластьЯчейки = Макет.Область(ИндексСтроки, ИндексСтолбца);
			Ячейка = Новый Структура();
			Верх = ОбластьЯчейки.Верх;			 
			Лево = ОбластьЯчейки.Лево;
			Право = ОбластьЯчейки.Право;
			Если Верх = ИндексСтроки Тогда				
				Низ = ОбластьЯчейки.Низ;				
				Если Низ > Верх Тогда
					Ячейка.Вставить("КоличествоСтрок", Низ - Верх + 1);	
				КонецЕсли;
				Если Право > Лево Тогда
					Ячейка.Вставить("КоличествоСтолбцов", Право - Лево + 1);	
					Ячейка.Вставить("КоличествоСтолбцовЗаданоПользователем", Истина);	
				КонецЕсли;				
				Если Не ПустаяСтрока(ОбластьЯчейки.Текст) Тогда
					Ячейка.Вставить("Текст", ОбластьЯчейки.Текст);
				КонецЕсли;
				
				ЦветФона = ОбластьЯчейки.ЦветФона;
				Если ЦветФона.Вид <> ВидЦвета.АвтоЦвет Тогда
					Ячейка.Вставить("ЦветФона", ЦветФона);
				КонецЕсли;
				Граница = ОбластьЯчейки.ГраницаСлева;
				Если Граница.ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.НетЛинии Тогда
					Ячейка.Вставить("ГраницаСлева", Граница);
				КонецЕсли;
				Граница = ОбластьЯчейки.ГраницаСверху;
				Если Граница.ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.НетЛинии Тогда
					Ячейка.Вставить("ГраницаСверху", Граница);
				КонецЕсли;
				Граница = ОбластьЯчейки.ГраницаСправа;
				Если Граница.ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.НетЛинии Тогда
					Ячейка.Вставить("ГраницаСправа", Граница);
				КонецЕсли;
				Граница = ОбластьЯчейки.ГраницаСнизу;
				Если Граница.ТипЛинии <> ТипЛинииЯчейкиТабличногоДокумента.НетЛинии Тогда
					Ячейка.Вставить("ГраницаСнизу", Граница);
				КонецЕсли;				
				ШиринаЯчейки = ШиринаСтолбцов[ИндексСтолбца - 1];
				Если Ячейка.Свойство("КоличествоСтолбцов") Тогда
					Для СмещениеИндексаСтолбца = 1 По Ячейка.КоличествоСтолбцов - 1 Цикл
						ШиринаЯчейки = ШиринаЯчейки + ШиринаСтолбцов[ИндексСтолбца + СмещениеИндексаСтолбца - 1];
					КонецЦикла;
				КонецЕсли;
				Ячейка.Вставить("Ширина", ШиринаЯчейки);
				
				Если ОбластьЯчейки.СодержитЗначение Тогда
					Ячейка.Вставить("Доступность", ?(ОбластьЯчейки.ЭлементУправления.Доступность, "True", "False"));
				КонецЕсли;
				
				Если мПоказателиСоответствия.Получить(ОбластьЯчейки.Имя) <> Неопределено Тогда
					Ячейка.Вставить("Показатель", ОбластьЯчейки.Имя); 
				ИначеЕсли СтрНайти(ОбластьЯчейки.Имя, ":") = 0 И Параметры.Свойство(ОбластьЯчейки.Имя) Тогда
					Ячейка.Вставить("Параметр", ОбластьЯчейки.Имя); 
				КонецЕсли;
				
				УчаствуетВОбъединении = ОбластьЯчейки.ПоВыделеннымКолонкам;
				Если УчаствуетВОбъединении = Неопределено Тогда
					УчаствуетВОбъединении = Ложь;
				КонецЕсли;
				Если ИндексОбъединяющейЯчейки >= 0 И УчаствуетВОбъединении И МожноОбъединитьЯчейки(Ячейки[ИндексОбъединяющейЯчейки], Ячейка, "ГраницаСправа", "ГраницаСлева") Тогда
					ОбъединяющаяЯчейка = Ячейки[ИндексОбъединяющейЯчейки];
					Если ОбъединяющаяЯчейка.Свойство("КоличествоСтолбцов") Тогда
						ОбъединяющаяЯчейка.КоличествоСтолбцов = ОбъединяющаяЯчейка.КоличествоСтолбцов + 1;
					Иначе
						ОбъединяющаяЯчейка.Вставить("КоличествоСтолбцов", 2);
						ОбъединяющаяЯчейка.Вставить("КоличествоСтолбцовЗаданоПользователем", Истина);	
					КонецЕсли;	
					ОбъединяющаяЯчейка.Ширина = ОбъединяющаяЯчейка.Ширина + ШиринаСтолбцов[ИндексСтолбца - 1];
					Если Не ОбъединяющаяЯчейка.Свойство("ГраницаСправа") И Ячейка.Свойство("ГраницаСправа") Тогда
						ОбъединяющаяЯчейка.Вставить("ГраницаСправа", Ячейка.ГраницаСправа);
					КонецЕсли;
					Ячейки[ИндексОбъединяющейЯчейки] = ОбъединяющаяЯчейка;
				Иначе
					Если ОбластьЯчейки.ГоризонтальноеПоложение <> ГоризонтальноеПоложение.Авто Тогда
						Ячейка.Вставить("ГоризонтальноеПоложение", ОбластьЯчейки.ГоризонтальноеПоложение);
					КонецЕсли;					
					Если ОбластьЯчейки.Шрифт <> Неопределено Тогда
						Ячейка.Вставить("Шрифт", ОбластьЯчейки.Шрифт);
					КонецЕсли;
					Ячейки.Добавить(Ячейка);
					ИндексОбъединяющейЯчейки = ?(УчаствуетВОбъединении, Ячейки.Количество() - 1, -1); 
				КонецЕсли;   				
			Иначе
				//	"Разделитель" - вставляется, чтобы в последующем объединении 
				//	не участвовали ячейки, находящиеся "до" и "после"
				//	ячейки с объединением по строкам
				Ячейка.Вставить("Разделитель", Истина);
				Ячейки.Добавить(Ячейка);
				ИндексОбъединяющейЯчейки = -1; 
			КонецЕсли;		
			ИндексСтолбца = ИндексСтолбца + Право - Лево + 1;
		КонецЦикла;
		ИндексЯчейки = 0;
		Пока ИндексЯчейки < Ячейки.Количество() Цикл
			Ячейка = Ячейки[ИндексЯчейки];
			Если Не Ячейка.Свойство("Разделитель") Тогда
				Если Не Ячейка.Свойство("КоличествоСтрок") И (Не Ячейка.Свойство("КоличествоСтолбцов") Или Не Ячейка.Свойство("КоличествоСтолбцовЗаданоПользователем")) Тогда
					ГоризонтальноеПоложениеЯчейки = Неопределено;
					Если Не Ячейка.Свойство("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЯчейки) Или ГоризонтальноеПоложениеЯчейки = ГоризонтальноеПоложение.Лево Или ГоризонтальноеПоложениеЯчейки = ГоризонтальноеПоложение.Центр Или ГоризонтальноеПоложениеЯчейки = ГоризонтальноеПоложение.Авто Тогда 
						ПоглощаемыеЯчейки.Очистить();
						Пока ИндексЯчейки + 1 < Ячейки.Количество() Цикл
							СледующаяЯчейка = Ячейки[ИндексЯчейки + 1];
							Если МожноОбъединитьЯчейки(Ячейка, СледующаяЯчейка, "ГраницаСправа", "ГраницаСлева") Тогда
								Если СледующаяЯчейка.Свойство("ГраницаСправа") Тогда
									Ячейка.Вставить("ГраницаСправа", СледующаяЯчейка.ГраницаСправа);
								КонецЕсли;
								ПоглощаемыеЯчейки.Добавить(СледующаяЯчейка);
								Ячейки.Удалить(ИндексЯчейки + 1);
							Иначе								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ПоглощаемыеЯчейки.Количество() > 0 Тогда
							ОбъединитьЯчейкиВлевоИВправо(Ячейка, ?(ИндексЯчейки < Ячейки.Количество() - 1, Ячейки[ИндексЯчейки + 1], Неопределено), ПоглощаемыеЯчейки);
						КонецЕсли;
					КонецЕсли;
					Если ГоризонтальноеПоложениеЯчейки = ГоризонтальноеПоложение.Право Тогда
						ПоглощаемыеЯчейки.Очистить();
						Пока ИндексЯчейки - 1 > 0 Цикл
							ПредыдущаяЯчейка = Ячейки[ИндексЯчейки - 1];
							Если МожноОбъединитьЯчейки(Ячейка, ПредыдущаяЯчейка, "ГраницаСлева", "ГраницаСправа") Тогда
								Если ПредыдущаяЯчейка.Свойство("ГраницаСлева") Тогда
									Ячейка.Вставить("ГраницаСлева", ПредыдущаяЯчейка.ГраницаСлева);
								КонецЕсли;
								ПоглощаемыеЯчейки.Добавить(ПредыдущаяЯчейка);
								Ячейки.Удалить(ИндексЯчейки - 1);
								ИндексЯчейки = ИндексЯчейки - 1;
							Иначе								
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если ПоглощаемыеЯчейки.Количество() > 0 Тогда
							ОбъединитьЯчейки(Ячейка, ПоглощаемыеЯчейки, 0, ПоглощаемыеЯчейки.Количество() - 1);
						КонецЕсли;
					КонецЕсли;					
					Ячейки[ИндексЯчейки] = Ячейка;
				КонецЕсли;                        			
				ИндексЯчейки = ИндексЯчейки + 1;
			Иначе
				Ячейки.Удалить(ИндексЯчейки);
			КонецЕсли;			
		КонецЦикла;
		Строка.Вставить("Ячейки", Ячейки);		
		Строки.Добавить(Строка);
	КонецЦикла;
	ХМЛ = Новый ЗаписьXML();
	ХМЛ.УстановитьСтроку();
	ХМЛ.ЗаписатьНачалоЭлемента("Таблица");
	Для ИндексСтроки = 0 По Строки.Количество() - 1 Цикл
		ХМЛ.ЗаписатьНачалоЭлемента("Строка");
		Для ИндексЯчейки = 0 По Строки[ИндексСтроки].Ячейки.Количество() - 1 Цикл
			Ячейка = Строки[ИндексСтроки].Ячейки[ИндексЯчейки];
			ХМЛ.ЗаписатьНачалоЭлемента("Ячейка");
			Если Ячейка.Свойство("Показатель") Тогда
				ХМЛ.ЗаписатьАтрибут("Показатель", Ячейка.Показатель);
			КонецЕсли;  
			Если Ячейка.Свойство("Параметр") Тогда
				ХМЛ.ЗаписатьАтрибут("Параметр", Ячейка.Параметр);
			КонецЕсли;  
			
			Если Ячейка.Свойство("КоличествоСтрок") Тогда
				ХМЛ.ЗаписатьАтрибут("КоличествоСтрок", Строка(Ячейка.КоличествоСтрок));
			КонецЕсли;
			Если Ячейка.Свойство("КоличествоСтолбцов") Тогда                   
				ХМЛ.ЗаписатьАтрибут("КоличествоСтолбцов", Строка(Ячейка.КоличествоСтолбцов));
			КонецЕсли;
			ХМЛ.ЗаписатьАтрибут("Ширина", Строка(Ячейка.Ширина));
			
			Если Ячейка.Свойство("Доступность") Тогда
				ХМЛ.ЗаписатьАтрибут("Доступность", Строка(Ячейка.Доступность));
			КонецЕсли;
			
			Если Ячейка.Свойство("ЦветФона") И Ячейка.ЦветФона.Вид = ВидЦвета.Абсолютный Тогда
				ХМЛ.ЗаписатьАтрибут("ЦветФона", Строка(Ячейка.ЦветФона));
			КонецЕсли;			
			Если Ячейка.Свойство("ГоризонтальноеПоложение") Тогда
				ХМЛ.ЗаписатьАтрибут("ГоризонтальноеПоложение", ПолучитьПредставлениеГоризонтальногоПоложения(Ячейка.ГоризонтальноеПоложение));
			КонецЕсли;
			Если Ячейка.Свойство("Шрифт") Тогда
				ЗаписатьXMLШрифт(ХМЛ, "Шрифт", Ячейка.Шрифт);
			КонецЕсли;		 
			Если Ячейка.Свойство("ГраницаСлева") Тогда
				ЗаписатьXMLГраницы(ХМЛ, "ГраницаСлева", Ячейка.ГраницаСлева);
			КонецЕсли;		 		
			Если Ячейка.Свойство("ГраницаСверху") Тогда
				ЗаписатьXMLГраницы(ХМЛ, "ГраницаСверху", Ячейка.ГраницаСверху);
			КонецЕсли;		 
			Если Ячейка.Свойство("ГраницаСправа") Тогда
				ЗаписатьXMLГраницы(ХМЛ, "ГраницаСправа", Ячейка.ГраницаСправа);
			КонецЕсли;		 
			Если Ячейка.Свойство("ГраницаСнизу") Тогда
				ЗаписатьXMLГраницы(ХМЛ, "ГраницаСнизу", Ячейка.ГраницаСнизу);
				
			КонецЕсли;		 		
			Если Ячейка.Свойство("Текст") Тогда
				ХМЛ.ЗаписатьТекст(Ячейка.Текст);
			КонецЕсли;
			ХМЛ.ЗаписатьКонецЭлемента();			
		КонецЦикла;	
		ХМЛ.ЗаписатьКонецЭлемента();
	КонецЦикла;
	//	Добавляем пустую строку для "форматирования" таблицы
	//	т.е. для того, чтобы задать ширину столбцов
	ХМЛ.ЗаписатьНачалоЭлемента("Строка");
	Для ИндексСтолбца = 1 По Макет.ШиринаТаблицы Цикл
		ХМЛ.ЗаписатьНачалоЭлемента("Ячейка");
		ХМЛ.ЗаписатьАтрибут("Ширина", Строка(ШиринаСтолбцов[ИндексСтолбца - 1]));
		ХМЛ.ЗаписатьКонецЭлемента();			
	КонецЦикла;	
	ХМЛ.ЗаписатьКонецЭлемента();
	ХМЛ.ЗаписатьКонецЭлемента();
	Возврат ХМЛ.Закрыть();
	
КонецФункции

Процедура ОбъединитьЯчейки(Ячейка, ПоглощаемыеЯчейки, ИндексНачало, ИндексКонец)
	
	КоличествоСтолбцов = ?(Ячейка.Свойство("КоличествоСтолбцов"), Ячейка.КоличествоСтолбцов, 1); 
	Ширина = Ячейка.Ширина;
	Для ИндексЯчейки = ИндексНачало По ИндексКонец Цикл
		ПоглощаемаяЯчейка = ПоглощаемыеЯчейки[ИндексЯчейки];
		КоличествоСтолбцов = КоличествоСтолбцов + ?(ПоглощаемаяЯчейка.Свойство("КоличествоСтолбцов"), ПоглощаемаяЯчейка.КоличествоСтолбцов, 1);
		Ширина = Ширина + ПоглощаемаяЯчейка.Ширина;
	КонецЦикла;
	Если Ячейка.Свойство("КоличествоСтолбцов") Тогда
		Ячейка.КоличествоСтолбцов = КоличествоСтолбцов;
	Иначе
		Ячейка.Вставить("КоличествоСтолбцов", КоличествоСтолбцов);
	КонецЕсли;
	Ячейка.Ширина = Ширина;
	
КонецПроцедуры

Процедура ОбъединитьЯчейкиВлевоИВправо(ЛеваяЯчейка, ПраваяЯчейка, ПоглощаемыеЯчейки)
	Перем ИндексПоследейЯчейкиОбъединяемойВлево;
	
	Если ПраваяЯчейка <> Неопределено И ПраваяЯчейка.Свойство("Текст") 
		И ПраваяЯчейка.Свойство("ГоризонтальноеПоложение") И ПраваяЯчейка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право
		И МожноОбъединитьЯчейки(ПраваяЯчейка, ПоглощаемыеЯчейки[ПоглощаемыеЯчейки.Количество() - 1], "ГраницаСлева", "ГраницаСправа") Тогда
		Если ЛеваяЯчейка <> Неопределено И ЛеваяЯчейка.Свойство("Текст") Тогда  
			ПоглощаемаяШирина = 0;
			Для Каждого Ячейка Из ПоглощаемыеЯчейки Цикл
				ПоглощаемаяШирина = ПоглощаемаяШирина + Ячейка.Ширина;
			КонецЦикла;
			ДоляЛевойЯчейки = СтрДлина(ЛеваяЯчейка.Текст) / (СтрДлина(ЛеваяЯчейка.Текст) + СтрДлина(ПраваяЯчейка.Текст));
			ШиринаПоглощаемаяВправо = 0;
			Для ИндексЯчейки = 0 По ПоглощаемыеЯчейки.Количество() - 1 Цикл
				ШиринаПоглощаемаяВправо = ШиринаПоглощаемаяВправо + ПоглощаемыеЯчейки[ИндексЯчейки].Ширина; 
				Если ШиринаПоглощаемаяВправо / ПоглощаемаяШирина >= ДоляЛевойЯчейки Тогда
					ИндексПоследейЯчейкиОбъединяемойВлево = ИндексЯчейки;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ИндексПоследейЯчейкиОбъединяемойВлево = -1;
		КонецЕсли;
	Иначе
		ИндексПоследейЯчейкиОбъединяемойВлево = ПоглощаемыеЯчейки.Количество() - 1;
	КонецЕсли;
	Если ИндексПоследейЯчейкиОбъединяемойВлево >= 0 Тогда
		ОбъединитьЯчейки(ЛеваяЯчейка, ПоглощаемыеЯчейки, 0, ИндексПоследейЯчейкиОбъединяемойВлево);	
	КонецЕсли;
	Если ИндексПоследейЯчейкиОбъединяемойВлево < ПоглощаемыеЯчейки.Количество() - 1 Тогда
		ОбъединитьЯчейки(ПраваяЯчейка, ПоглощаемыеЯчейки, ИндексПоследейЯчейкиОбъединяемойВлево + 1, ПоглощаемыеЯчейки.Количество() - 1);	
	КонецЕсли;
	
КонецПроцедуры

Функция МожноОбъединитьЯчейки(Ячейка, ПоглощаемаяЯчейка, СвойствоГраницыЯчейки, СвойствоГраницыПоглощаемойЯчейки)
	
	Возврат Не ПоглощаемаяЯчейка.Свойство("Разделитель") И Не ПоглощаемаяЯчейка.Свойство("Текст") 
	И Не ПоглощаемаяЯчейка.Свойство("Показатель") И Не ПоглощаемаяЯчейка.Свойство("Параметр") 
	И Не Ячейка.Свойство(СвойствоГраницыЯчейки) И Не ПоглощаемаяЯчейка.Свойство(СвойствоГраницыПоглощаемойЯчейки) 
	И СравнитьСвойства(Ячейка, ПоглощаемаяЯчейка, "ГраницаСверху") И СравнитьСвойства(Ячейка, ПоглощаемаяЯчейка, "ГраницаСнизу") 
	И СравнитьСвойства(Ячейка, ПоглощаемаяЯчейка, "ЦветФона") И СравнитьСвойства(Ячейка, ПоглощаемаяЯчейка, "КоличествоСтрок");
	
КонецФункции

Функция ПолучитьПредставлениеГоризонтальногоПоложения(ЗначениеГоризонтальногоПоложения)
	
	Если ЗначениеГоризонтальногоПоложения = ГоризонтальноеПоложение.Лево Тогда
		Возврат "Лево";
	ИначеЕсли ЗначениеГоризонтальногоПоложения = ГоризонтальноеПоложение.Право Тогда
		Возврат "Право";
	ИначеЕсли ЗначениеГоризонтальногоПоложения = ГоризонтальноеПоложение.Центр Тогда
		Возврат "Центр";
	ИначеЕсли ЗначениеГоризонтальногоПоложения = ГоризонтальноеПоложение.ПоШирине Тогда
		Возврат "ПоШирине";
	Иначе
		Возврат "Авто";
	КонецЕсли;
	
КонецФункции

Функция ЗаписатьXMLШрифт(ХМЛ, Имя, Шрифт)
	
	ХМЛ.ЗаписатьНачалоЭлемента(Имя);	
	Если Не ПустаяСтрока(Шрифт.Имя) Тогда
		ХМЛ.ЗаписатьАтрибут("Имя", Шрифт.Имя);
	КонецЕсли;
	Если Шрифт.Размер > 0 Тогда
		ХМЛ.ЗаписатьАтрибут("Размер", Строка(Шрифт.Размер));
	КонецЕсли;
	Если Шрифт.Жирный = Истина Тогда
		ХМЛ.ЗаписатьАтрибут("Жирный", "");
	КонецЕсли;
	Если Шрифт.Наклонный = Истина Тогда
		ХМЛ.ЗаписатьАтрибут("Наклонный", "");
	КонецЕсли;
	Если Шрифт.Зачеркивание = Истина Тогда
		ХМЛ.ЗаписатьАтрибут("Зачеркивание", "");
	КонецЕсли;
	Если Шрифт.Подчеркивание = Истина Тогда
		ХМЛ.ЗаписатьАтрибут("Подчеркивание", "");
	КонецЕсли;
	ХМЛ.ЗаписатьКонецЭлемента();
	
КонецФункции

Функция ЗаписатьXMLГраницы(ХМЛ, Имя, Граница)
	
	ХМЛ.ЗаписатьНачалоЭлемента(Имя);	
	ХМЛ.ЗаписатьАтрибут("ТипЛинии", Строка(Граница.ТипЛинии));
	ХМЛ.ЗаписатьАтрибут("Толщина", Строка(Граница.Толщина));
	ХМЛ.ЗаписатьКонецЭлемента();
	
КонецФункции

Функция СравнитьСвойства(Структура1, Структура2, Свойство)
	Перем ЗначениеСвойства1, ЗначениеСвойства2;
	
	Возврат Структура1.Свойство(Свойство, ЗначениеСвойства1) = Структура2.Свойство(Свойство, ЗначениеСвойства2) И ЗначениеСвойства1 = ЗначениеСвойства2;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ МЕХАНИЗМЫ ПОСТРОЕНИЯ ОТЧЕТОВ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ НУЖД WEB-ИНТЕРФЕЙСА


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С РЕГИСТРОМ СВЕДЕНИЙ "НАСТРОЙКА ОБРАБОТКИ ОТЧЕТОВ".
//

// Функция определяет основную и дополнительные (если есть) валюты для экземпляра отчета.
Функция ОпределитьВалютыОтчета(ВерсияОрганизационнойСтруктуры, ВидОтчета, Организация) Экспорт	
	Возврат РегистрыСведений.ВалютыОтчетности.ОпределитьВалютыОтчета(ВерсияОрганизационнойСтруктуры, ВидОтчета, Организация);	
КонецФункции

// Функция определяет значение элемента настройки отчета по переданным ей параметрам
// Параметры:
//  ЭлементНастройкиОтчета - Перечисление, элемент настройки отчета, который необходимо получить.
//  ВидОтчета      - СправочникСсылка.ВидыОтчета - вид отчета, для которого нужно получить значение элемента.
//  Сценарий       - СправочникСсылка.Сценарий   - сценарий, для которого нужно получить значение элемента.
//  Организация    - СправочникСсылка.Организация - организационная единица, для которого нужно получить значение элемента.
//  ПериодОтчета   - СправочникСсылка.Периоды - период отчета, для которого нужно получить значение элемента.
//
// Функция определяет значение элемента настройки отчета по переданным ей параметрам
// Параметры:
//  ЭлементНастройкиОтчета - Перечисление, элемент настройки отчета, который необходимо получить.
//  ВидОтчета      - СправочникСсылка.ВидыОтчета - вид отчета, для которого нужно получить значение элемента.
//  Сценарий       - СправочникСсылка.Сценарий   - сценарий, для которого нужно получить значение элемента.
//  Организация    - СправочникСсылка.Организация - организационная единица, для которого нужно получить значение элемента.
//  ПериодОтчета   - СправочникСсылка.Периоды - период отчета, для которого нужно получить значение элемента.
//
Функция НайтиПараметрОтчета(ЭлементНастройкиОтчета, ВидОтчета = Неопределено, Сценарий = Неопределено, Организация = Неопределено, ПериодОтчета = Неопределено, ВерсияОрганизационнойСтруктуры = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(ПериодОтчета) И ЗначениеЗаполнено(Сценарий) И НЕ ЗначениеЗаполнено(ВерсияОрганизационнойСтруктуры) Тогда
		ВерсияОрганизационнойСтруктуры = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодОтчета, Сценарий);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ДокументБД = ОбщегоНазначенияПовтИспУХ.ПолучитьДокументБдТекущейБазы("НастраиваемыйОтчет");
	Иначе
		ДокументБД = Справочники.ДокументыБД.ПустаяСсылка();
	КонецЕсли;
	
	Если ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза Тогда
		
		Если ЗначениеЗаполнено(ДокументБД) Тогда
			ПараметрДокументБД = Новый Массив;
			ПараметрДокументБД.Добавить(ДокументБД);
			ПараметрДокументБД.Добавить(Справочники.ДокументыБД.ПустаяСсылка());
		Иначе
			ПараметрДокументБД = ДокументБД;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ПараметрОрганизация = Организация;
		Иначе
			ПараметрОрганизация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	Иначе
		
		ПараметрДокументБД = ДокументБД;
		
		Если ЗначениеЗаполнено(Организация) Тогда
			ПараметрОрганизация = Новый Массив;
			ПараметрОрганизация.Добавить(Организация);
			ПараметрОрганизация.Добавить(Справочники.Организации.ПустаяСсылка());
		Иначе
			ПараметрОрганизация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	//Запрос.УстановитьПараметр("ДокументБД", ПараметрДокументБД);
	Запрос.УстановитьПараметр("ШаблонДокументаБД", ВидОтчета);
	Запрос.УстановитьПараметр("Организация", ПараметрОрганизация);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", ВерсияОрганизационнойСтруктуры);
	Запрос.УстановитьПараметр("ЭлементНастройкиОтчета", ЭлементНастройкиОтчета);
	
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		
		Запрос.УстановитьПараметр("Период", ПериодОтчета);
		Запрос.УстановитьПараметр("Периодичность", ПериодОтчета.Периодичность);
		Запрос.УстановитьПараметр("ДатаОкончания", ПериодОтчета.ДатаОкончания);
		
	Иначе
		
		Запрос.УстановитьПараметр("Период", Справочники.Периоды.ПустаяСсылка());
		Запрос.УстановитьПараметр("Периодичность", Перечисления.Периодичность.ПустаяСсылка());
		Запрос.УстановитьПараметр("ДатаОкончания", '00010101');
		
	КонецЕсли;	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	НастройкаОбработкиОтчетов.Организация КАК Организация,
	|	НастройкаОбработкиОтчетов.ДокументБД КАК ДокументБД,
	|	НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры КАК ВерсияОрганизационнойСтруктуры,
	|	НастройкаОбработкиОтчетов.Сценарий КАК Сценарий,
	|	НастройкаОбработкиОтчетов.ПериодОтчета.ДатаОкончания КАК ПериодОтчетаДатаОкончания,
	|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета КАК Ссылка
	|ИЗ
	|	РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
	|ГДЕ
	|	НастройкаОбработкиОтчетов.Организация В(&Организация)
	|	И НастройкаОбработкиОтчетов.Сценарий В (&Сценарий, ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка))
	//|	И НастройкаОбработкиОтчетов.ДокументБД В(&ДокументБД)
	|	И НастройкаОбработкиОтчетов.ШаблонДокументаБД В(&ШаблонДокументаБД)
	|	И НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = &ЭлементНастройкиОтчета
	|	И НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры В (&ВерсияОрганизационнойСтруктуры, ЗНАЧЕНИЕ(Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка))
	|	И (НастройкаОбработкиОтчетов.ПериодОтчета = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)
	|			ИЛИ НастройкаОбработкиОтчетов.ПериодОтчета.Периодичность = &Периодичность
	|				И НастройкаОбработкиОтчетов.ПериодОтчета.ДатаОкончания <= &ДатаОкончания)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация УБЫВ,
	|	ДокументБД УБЫВ,
	|	ВерсияОрганизационнойСтруктуры УБЫВ,
	|	Сценарий УБЫВ,
	|	ПериодОтчетаДатаОкончания УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция заполняет структуру параметров отчета для указанных измерений.
//
Функция ПолучитьСоответствияПараметровОтчета(ВидОтчета, Сценарий = Неопределено, Организация = Неопределено, ПериодОтчета = Неопределено, ВерсияОрганизационнойСтруктуры = Неопределено) Экспорт
	СтруктураПараметров = Новый Структура;
	
	Если ЗначениеЗаполнено(ПериодОтчета) И ЗначениеЗаполнено(Сценарий) И НЕ ЗначениеЗаполнено(ВерсияОрганизационнойСтруктуры) Тогда
		ВерсияОрганизационнойСтруктуры = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодОтчета, Сценарий);
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураПараметров.Вставить("БланкОтчета", Значение);
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);	
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураПараметров.Вставить("БланкИмпорта", Значение);
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	
	Если ЗначениеЗаполнено(Значение) Тогда
		ПроверитьНаличиеИБ = Значение.ТипБД <> Справочники.ТипыБазДанных.ПустаяСсылка();
		СтруктураПараметров.Вставить("ПравилоОбработки", Значение);
	Иначе
		ПроверитьНаличиеИБ = Ложь;
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураПараметров.Вставить("ПравилоПроверки", Значение);
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.Периодичность
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		
		СтруктураПараметров.Вставить("Периодичность", Значение);
		
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		
		СтруктураПараметров.Вставить("СпособФормированияОтчета", Значение);
		
	КонецЕсли;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза
	, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураПараметров.Вставить("ВИБ", Значение);
	КонецЕсли;;
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураПараметров.Вставить("БланкСводнойТаблицы", Значение);
	Иначе
		СтруктураПараметров.Вставить("БланкСводнойТаблицы", Справочники.БланкиОтчетов.ПустаяСсылка());
	КонецЕсли;

    Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	Если ЗначениеЗаполнено(Значение) Тогда
		СтруктураПараметров.Вставить("БланкДляОтображенияМногопериодный", Значение);
	Иначе
		СтруктураПараметров.Вставить("БланкДляОтображенияМногопериодный", Справочники.БланкиОтчетов.ПустаяСсылка());
	КонецЕсли;

	
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Функция устанавливает элемент по умолчанию для вида отчета.
Функция УстановитьЭлементПоУмолчаниюДляВидаОтчета(ЗначениеЭлементаНастройкиОтчета, ВидОтчета, ЭлементНастройкиОтчета) Экспорт
	
	СтруктураЗаписи=Новый Структура;
	СтруктураЗаписи.Вставить("Организация",Справочники.Организации.ПустаяСсылка());
	СтруктураЗаписи.Вставить("ДокументБД",Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ));
	СтруктураЗаписи.Вставить("ВерсияОрганизационнойСтруктуры",Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	СтруктураЗаписи.Вставить("ПериодОтчета",Справочники.Периоды.ПустаяСсылка());
	СтруктураЗаписи.Вставить("Сценарий",Справочники.Сценарии.ПустаяСсылка());
	СтруктураЗаписи.Вставить("ШаблонДокументаБД",ВидОтчета);

	
	СтруктураЗаписи.Вставить("ЭлементНастройкиОтчета",ЭлементНастройкиОтчета);
	
	
	НаборЗаписей=РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьНаборЗаписей();
	
	Для Каждого КлючИЗначение ИЗ СтруктураЗаписи Цикл
		
		НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
		
	КонецЦикла;
	
	НоваяСтрока=НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
	НоваяСтрока.ЗначениеЭлементаНастройкиОтчета = ЗначениеЭлементаНастройкиОтчета;
	
	НаборЗаписей.Записать(Истина);   	
	
	Попытка
		НаборЗаписей.Записать();
		Возврат Истина;
	Исключение
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = СтрШаблон(Нстр("ru = 'При установке элемента по умолчанию возникла ошибка
		|%1'"), 
		                              	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;

	
КонецФункции 

Функция ПолучитьПравилоОбработкиПоУмолчанию(ВидОтчета, Сценарий, Организация, ПериодОтчета) Экспорт
	
	ВерсияОрганизационнойСтруктуры = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодОтчета, Сценарий);
	
	Значение = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки
		, ВидОтчета, Сценарий, Организация, ПериодОтчета, ВерсияОрганизационнойСтруктуры);
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Возврат Значение;
	Иначе
		Возврат Справочники.ПравилаОбработки.ПустаяСсылка();
	КонецЕсли;

КонецФункции



Функция ВернутьСписокБланковОтчетов(БланкОтчета, ВидОтчета, Организация = Неопределено, ПериодОтчета = Неопределено, Сценарий = Неопределено, РежимСводнойТаблицы = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	БланкиОтчетов.Ссылка,
	|	БланкиОтчетов.Наименование КАК Наименование
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.Владелец = &Владелец
	|	И ВЫБОР
	|			КОГДА &РежимСводнойТаблицы = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ БланкиОтчетов.РежимБланка = 1
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Запрос.УстановитьПараметр("РежимСводнойТаблицы", РежимСводнойТаблицы);
	Выборка = Запрос.Выполнить().Выбрать();
	БланкОтображенияПоУмолчанию = НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, ВидОтчета, сценарий, Организация, ПериодОтчета);
	
	СписокБланков = Новый СписокЗначений;
	СписокБланков.Добавить(Справочники.БланкиОтчетов.ПустаяСсылка(), НСтр("ru = 'виде дерева'"));
	
	Пока Выборка.Следующий() Цикл
		
		СписокБланков.Добавить(Выборка.Ссылка, НСтр("ru = 'бланке ""'") + Выборка.Наименование + """");
		
	КонецЦикла;
	БланкОтчета = БланкОтображенияПоУмолчанию;
	
	Возврат СписокБланков;
	
КонецФункции

Функция ВернутьСписокПравилОбработкиОтчетов(БланкОтчета, ВидОтчета, Организация = Неопределено, ПериодОтчета = Неопределено, Сценарий = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Правила.Ссылка,
	|	Правила.Наименование
	|ИЗ
	|	Справочник.ПравилаОбработки КАК Правила
	|ГДЕ
	|	Правила.Владелец = &Владелец";
	
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	Выборка = Запрос.Выполнить().Выбрать();
	СписокБланков = Новый СписокЗначений;

	
	Пока Выборка.Следующий() Цикл
		
		СписокБланков.Добавить(Выборка.Ссылка, Выборка.Наименование);
		
	КонецЦикла;
	
	Возврат СписокБланков;
	
КонецФункции

Функция ПолучитьСписокПериодовСценариев(ОтборСценарий=Неопределено,ОтборПериодСценария=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Сценарии КАК Сценарий,
	|	СтатусыПериодовСценариев.Периоды КАК ПериодСценария
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	НЕ СтатусыПериодовСценариев.ВерсияРегламента.ПометкаУдаления";
	
	СписокЗначений=Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ОтборСценарий) Тогда
		
		Если ТипЗнч(ОтборСценарий)=Тип("СписокЗначений") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И СтатусыПериодовСценариев.Сценарии=В(&ОтборСценарий)";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И СтатусыПериодовСценариев.Сценарии=&ОтборСценарий";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборСценарий",ОтборСценарий);	
		СписокЗначений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодСценария"));
		
	Иначе
		
		Если ТипЗнч(ОтборПериодСценария)=Тип("СписокЗначений") Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И СтатусыПериодовСценариев.Периоды=В(&ОтборПериодСценария)";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И СтатусыПериодовСценариев.Периоды=&ОтборПериодСценария";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ОтборПериодСценария",ОтборПериодСценария);	
		СписокЗначений.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Сценарий"));
		
	КонецЕсли;
	
	Возврат СписокЗначений;	
	
КонецФункции // ВернутьСписокПериодовСценариев() 


////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С КОЛОНТИТУЛАМИ

// Чтение настроек колонтитулов из константы. Если константа не заполнена, то формируются пустые настройки.
//
// Параметры
//  Нет
//
// Возвращаемое значение:
//   Структура   – Настройки колонтитулов
//
Функция ПолучитьНастройкиКолонтитулов()
	
	Настройка = Константы.НастройкиКолонтитуловПоУмолчанию.Получить().Получить();
	
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		// Если константа не заполнена, то заполним структуру настройками пустых колонтитулов
		
		Настройка = Новый Структура;
		
		Верхний = Новый Структура;
		Нижний = Новый Структура;
		
		Верхний.Вставить("Выводить", Ложь);
		Верхний.Вставить("НачальнаяСтраница", 1);
		Верхний.Вставить("ТекстСлева",   "");
		Верхний.Вставить("ТекстВЦентре", "");
		Верхний.Вставить("ТекстСправа",  "");
		
		Нижний.Вставить("Выводить", Ложь);
		Нижний.Вставить("НачальнаяСтраница", 1);
		Нижний.Вставить("ТекстСлева",   "");
		Нижний.Вставить("ТекстВЦентре", "");
		Нижний.Вставить("ТекстСправа",  "");
		
		Настройка.Вставить("ВерхнийКолонтитул", Верхний);
		Настройка.Вставить("НижнийКолонтитул",  Нижний);
		
	Иначе
		// Если константа заполнена, но нет нужных нам полей, то заполним структуру настройками пустых колонтитулов
		
		Если Не Настройка.Свойство("ВерхнийКолонтитул") Тогда
			
			Верхний = Новый Структура;
			
			Верхний.Вставить("Выводить", Ложь);
			Верхний.Вставить("НачальнаяСтраница", 1);
			Верхний.Вставить("ТекстСлева",   "");
			Верхний.Вставить("ТекстВЦентре", "");
			Верхний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("ВерхнийКолонтитул", Верхний);
			
		КонецЕсли;
		
		Если Не Настройка.Свойство("НижнийКолонтитул") Тогда
			
			Нижний = Новый Структура;
			
			Нижний.Вставить("Выводить", Ложь);
			Нижний.Вставить("НачальнаяСтраница", 1);
			Нижний.Вставить("ТекстСлева",   "");
			Нижний.Вставить("ТекстВЦентре", "");
			Нижний.Вставить("ТекстСправа",  "");
			
			Настройка.Вставить("НижнийКолонтитул",  Нижний);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Настройка;
	
КонецФункции // ПолучитьНастройкиКолонтитулов()

// Запись настроек колонтитулов в константу
//
// Параметры
//  Настройка  – Структура – Настройка колонтитулов
//
Процедура ЗаписатьНастройкиКолонтитулов(Настройка)
	
	Константы.НастройкиКолонтитуловПоУмолчанию.Установить(Новый ХранилищеЗначения(Настройка));
	
КонецПроцедуры // ЗаписатьНастройкиКолонтитулов()

// Проставление в тексте вместо шаблонов, значений
//
// Параметры
//  Текст           – Строка – Исходный текст шаблона
//  НазваниеОтчета  – Строка – Название отчета
//  Пользователь    – Строка – Имя пользователя
//
// Возвращаемое значение:
//   Строка   – результурующий текст для колонтитула
//
Функция ЗаполнитьТекстКолонтитула(Текст, НазваниеОтчета, Пользователь)
	
	Результат = Текст;
	
	Результат = СтрЗаменить(Результат, "[&НазваниеОтчета]", НазваниеОтчета);
	Результат = СтрЗаменить(Результат, "[&Пользователь]", Пользователь);
	
	Возврат Результат;
	
КонецФункции // ЗаполнитьТекстКолонтитула()

// Установка колонтитулов для отчета
//
// Параметры
//  ТабличныйДокумент  – ТабличныйДокумент – Отчет, у которого необходимо установить колонтитулы
//  НазваниеОтчета     – Строка            – Название отчета для вывода в колонтитул
//  Пользователь       – Строка            – Имя пользователя для вывода в колонтитул
//
Процедура УстановитьКолонтитулыПоУмолчанию(ТабличныйДокумент, НазваниеОтчета, Пользователь) Экспорт
	
	Настройка = ПолучитьНастройкиКолонтитулов();
	
	ТабличныйДокумент.ВерхнийКолонтитул.Выводить          = Настройка.ВерхнийКолонтитул.Выводить;
	ТабличныйДокумент.ВерхнийКолонтитул.НачальнаяСтраница = Настройка.ВерхнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.ВерхнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Низ;
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.ВерхнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.ВерхнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
	ТабличныйДокумент.НижнийКолонтитул.Выводить          = Настройка.НижнийКолонтитул.Выводить;
	ТабличныйДокумент.НижнийКолонтитул.НачальнаяСтраница = Настройка.НижнийКолонтитул.НачальнаяСтраница;
	ТабличныйДокумент.НижнийКолонтитул.ВертикальноеПоложение = ВертикальноеПоложение.Верх;
	ТабличныйДокумент.НижнийКолонтитул.ТекстСлева   = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСлева, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстВЦентре = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстВЦентре, НазваниеОтчета, Пользователь);
	ТабличныйДокумент.НижнийКолонтитул.ТекстСправа  = ЗаполнитьТекстКолонтитула(Настройка.НижнийКолонтитул.ТекстСправа, НазваниеОтчета, Пользователь);
	
КонецПроцедуры // УстановитьКолонтитулы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МАРШРУТОМ СОГЛАСОВАНИЯ.
//

#Область УДАЛИТЬ_Согласование

Функция ПолучитьОтветственногоЗаТипОбъекта(ЭлементСсылка,Знач Организация=Неопределено,Знач ШаблонДокументаБД=Неопределено,ТипОтветственного=Неопределено, ВернутьМассив = Ложь) Экспорт
	РезультатФункции = Неопределено;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
		Если Модуль <> Неопределено Тогда
			Модуль.ПолучитьОтветственногоЗаТипОбъекта(ЭлементСсылка, Организация, ШаблонДокументаБД, ТипОтветственного, РезультатФункции, ВернутьМассив);
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьТекущегоИсполнителяИПроверяющегоПоРеквизитамОтчета(ВидОтчета, Организация, ПериодОтчета, Сценарий) Экспорт
	
	ВерсияРегламентаПодготовкиОтчетности = УправлениеРабочимиПроцессамиУХ.ПолучитьВерсиюРегламентаПодготовкиОтчетности(Сценарий, ПериодОтчета);
	
	Если НЕ ЗначениеЗаполнено(ВерсияРегламентаПодготовкиОтчетности) Тогда
		Возврат Новый Структура("Исполнитель, Проверяющий", Справочники.Пользователи.ПустаяСсылка(), Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА МатрицаПолномочий.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА Исполнители.Пользователь
	|		ИНАЧЕ МатрицаПолномочий.Исполняющий
	|	КОНЕЦ КАК Исполнитель,
	|	ВЫБОР
	|		КОГДА МатрицаПолномочий.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА Согласующие.Пользователь
	|		ИНАЧЕ МатрицаПолномочий.Согласование
	|	КОНЕЦ КАК Проверяющий
	|ИЗ
	|	РегистрСведений.РегистрМатрицыПолномочий КАК МатрицаПолномочий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК Исполнители
	|		ПО (Исполнители.Роль = МатрицаПолномочий.Исполняющий)
	|			И (Исполнители.Организация = ВЫБОР
	|				КОГДА МатрицаПолномочий.Исполняющий_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА &Организация
	|				ИНАЧЕ МатрицаПолномочий.Исполняющий_Организация
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК Согласующие
	|		ПО (Согласующие.Роль = МатрицаПолномочий.Согласование)
	|			И (Согласующие.Организация = ВЫБОР
	|				КОГДА МатрицаПолномочий.Согласование_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА &Организация
	|				ИНАЧЕ МатрицаПолномочий.Согласование_Организация
	|			КОНЕЦ)
	|ГДЕ
	|	МатрицаПолномочий.ДокументБД = &ДокументБД
	|	И МатрицаПолномочий.Организация = &Организация
	|	И МатрицаПолномочий.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности";
	
	Запрос.УстановитьПараметр("ДокументБД", Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламентаПодготовкиОтчетности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("Исполнитель, Проверяющий", Выборка.Исполнитель, Выборка.Проверяющий);
	Иначе
		Возврат Новый Структура("Исполнитель, Проверяющий", Справочники.Пользователи.ПустаяСсылка(), Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТекущегоИсполнителяИПроверяющего(ЭкземплярОтчета) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ЭкземплярОтчета", ЭкземплярОтчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидДокументаБД,
	|	НастраиваемыйОтчет.Организация КАК Организация,
	|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияОрганизационнойСтруктуры,
	|	НастраиваемыйОтчет.Ссылка
	|ПОМЕСТИТЬ НастраиваемыйОтчет
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ПО НастраиваемыйОтчет.ПериодОтчета = УправлениеПериодомСценария.ПериодСценария
	|			И НастраиваемыйОтчет.Сценарий = УправлениеПериодомСценария.Сценарий";
	
	Если ТипЗнч(ЭкземплярОтчета) = Тип("Массив") Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ НастраиваемыйОтчет.Ссылка В (&ЭкземплярОтчета)";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ НастраиваемыйОтчет.Ссылка = &ЭкземплярОтчета";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидДокументаБД,
	|	Организация,
	|	ВерсияОрганизационнойСтруктуры
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.Ссылка КАК ЭкземплярОтчета,
	|	РегистрМатрицыПолномочий.Исполняющий,
	|	РегистрМатрицыПолномочий.Исполняющий_Организация,
	|	РегистрМатрицыПолномочий.Согласование,
	|	РегистрМатрицыПолномочий.Согласование_Организация
	|ПОМЕСТИТЬ ТаблицаИспСогл
	|ИЗ
	|	НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|		ПО НастраиваемыйОтчет.ВидДокументаБД = РегистрМатрицыПолномочий.ШаблонДокументаБД
	|			И НастраиваемыйОтчет.Организация = РегистрМатрицыПолномочий.Организация
	|			И НастраиваемыйОтчет.ВерсияОрганизационнойСтруктуры = РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Исполнитель.Пользователь КАК Исполняющий,
	|	Согласование.Пользователь КАК Согласование,
	|	Исполнитель.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ПРЕДСТАВЛЕНИЕ(Исполнитель.Пользователь) КАК ИсполнительПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Согласование.Пользователь) КАК СогласованиеПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИспСогл.Исполняющий КАК Пользователь,
	|		ТаблицаИспСогл.ЭкземплярОтчета КАК ЭкземплярОтчета
	|	ИЗ
	|		ТаблицаИспСогл КАК ТаблицаИспСогл
	|	ГДЕ
	|		ТаблицаИспСогл.Исполняющий ССЫЛКА Справочник.Пользователи
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ОтветственныеОрганизаций.Пользователь,
	|		ТаблицаИспСогл.ЭкземплярОтчета
	|	ИЗ
	|		ТаблицаИспСогл КАК ТаблицаИспСогл
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|			ПО (ОтветственныеОрганизаций.Организация = ВЫБОР
	|					КОГДА ТаблицаИспСогл.Исполняющий_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА ТаблицаИспСогл.ЭкземплярОтчета.Организация
	|					ИНАЧЕ ТаблицаИспСогл.Исполняющий_Организация
	|				КОНЕЦ)
	|				И (ОтветственныеОрганизаций.Роль = ТаблицаИспСогл.Исполняющий)
	|	ГДЕ
	|		ТаблицаИспСогл.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц) КАК Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаИспСогл.Согласование КАК Пользователь,
	|			ТаблицаИспСогл.ЭкземплярОтчета КАК ЭкземплярОтчета
	|		ИЗ
	|			ТаблицаИспСогл КАК ТаблицаИспСогл
	|		ГДЕ
	|			НЕ ТаблицаИспСогл.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ОтветственныеОрганизаций.Пользователь,
	|			ТаблицаИспСогл.ЭкземплярОтчета
	|		ИЗ
	|			ТаблицаИспСогл КАК ТаблицаИспСогл
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|				ПО (ОтветственныеОрганизаций.Организация = ВЫБОР
	|						КОГДА ТаблицаИспСогл.Согласование_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ТаблицаИспСогл.ЭкземплярОтчета.Организация
	|						ИНАЧЕ ТаблицаИспСогл.Согласование_Организация
	|					КОНЕЦ)
	|					И (ОтветственныеОрганизаций.Роль = ТаблицаИспСогл.Согласование)
	|		ГДЕ
	|			ТаблицаИспСогл.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц) КАК Согласование
	|		ПО Исполнитель.ЭкземплярОтчета = Согласование.ЭкземплярОтчета";
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВернутьТаблицуИсполнителейДляОтчетов(ДокументСписокОтбор) Экспорт
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Вн_Запрос.Ссылка,
	|	Вн_Запрос.Исполняющий,
	|	Вн_Запрос.Согласование,
	|	ПРЕДСТАВЛЕНИЕ(Вн_Запрос.Исполняющий) КАК Исполняющий_Представление,
	|	ПРЕДСТАВЛЕНИЕ(Вн_Запрос.Согласование) КАК Согласование_Представление
	|ИЗ
	|	(ВЫБРАТЬ
	|		НастраиваемыйОтчет.Ссылка КАК Ссылка,
	|		ВЫБОР
	|			КОГДА РегистрМатрицыПолномочий.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
	|				ТОГДА ОтветственныеОрганизаций_Исполнитель.Пользователь
	|			ИНАЧЕ ЕСТЬNULL(РегистрМатрицыПолномочий.Исполняющий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		КОНЕЦ КАК Исполняющий,
	|		ВЫБОР
	|			КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|				ТОГДА ОтветственныеОрганизаций_Согласование.Пользователь
	|			ИНАЧЕ ЕСТЬNULL(РегистрМатрицыПолномочий.Согласование, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		КОНЕЦ КАК Согласование,
	|		ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) КАК Состояние
	|	ИЗ
	|		Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|			ПО НастраиваемыйОтчет.ПериодОтчета = УправлениеПериодомСценария.ПериодСценария
	|				И НастраиваемыйОтчет.Сценарий = УправлениеПериодомСценария.Сценарий
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|			ПО (РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры)
	|				И (РегистрМатрицыПолномочий.ДокументБД = НастраиваемыйОтчет.ВидДокументаБД)
	|				И (РегистрМатрицыПолномочий.Организация = НастраиваемыйОтчет.Организация)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации_Исполнитель
	|			ПО (Организации_Исполнитель.Ссылка = РегистрМатрицыПолномочий.Исполняющий_Организация)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Исполнитель
	|			ПО (ОтветственныеОрганизаций_Исполнитель.Организация = ЕСТЬNULL(Организации_Исполнитель.Ссылка, НастраиваемыйОтчет.Организация))
	|				И (ОтветственныеОрганизаций_Исполнитель.Роль = РегистрМатрицыПолномочий.Исполняющий)
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации_Согласование
	|			ПО (Организации_Согласование.Ссылка = РегистрМатрицыПолномочий.Согласование_Организация)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Согласование
	|			ПО (ОтветственныеОрганизаций_Согласование.Организация = ЕСТЬNULL(Организации_Согласование.Ссылка, НастраиваемыйОтчет.Организация))
	|				И (ОтветственныеОрганизаций_Согласование.Роль = РегистрМатрицыПолномочий.Согласование)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|					,
	|					Объект В
	|						(ВЫБРАТЬ
	|							НастраиваемыйОтчет.Ссылка
	|						ИЗ
	|							Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|						ГДЕ
	|							&ТекстОтбора)) КАК РегистрСостоянийОбъектов
	|			ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
	|	ГДЕ
	|		&ТекстОтбора) КАК Вн_Запрос";
	
	МассивОтборов = Новый Массив;
	ТекстОтбора = "";
	
	Для Каждого ЭлементОтбора ИЗ ДокументСписокОтбор Цикл
		Если ЭлементОтбора.Использование Тогда
			ТекстОтбора = ТекстОтбора + ", НастраиваемыйОтчет." + ЭлементОтбора.Имя;
			МассивОтборов.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	
	ПостроительЗапроса.Текст = СтрЗаменить(ТекстЗапроса, ТекстОтбора, ?(ПустаяСтрока(ТекстОтбора), "ИСТИНА", "{ГДЕ " + Сред(ТекстОтбора, 2) + "} "));
	
	Для Каждого Элемент Из МассивОтборов Цикл
		Отбор = ПостроительЗапроса.Отбор.Добавить(Элемент.ПутьКДанным);
		Отбор.ВидСравнения  = Элемент.ВидСравнения;
		Отбор.Значение      = Элемент.Значение;
		Отбор.Использование = Элемент.Использование;
	КонецЦикла;
	
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ТАБЛИЦЕЙ СОГЛАСОВАНИЯ
		
#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ВЕРСИЯМИ ЗНАЧЕНИЙ ПОКАЗАТЕЛЕЙ.
//

Функция ВернутьТекущееОписаниеВерсииДляЭкземпляраОтчета(ЭкземплярОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОписаниеВерсий.Ссылка
	|ИЗ
	|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
	|ГДЕ
	|	ОписаниеВерсий.ЭкземплярОтчета = &ЭкземплярОтчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОписаниеВерсий.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭкземплярОтчета", ЭкземплярОтчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.ОписаниеВерсий.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С УНИВЕРСАЛЬНОЙ ФОРМОЙ ВЫБОРА БЛАНКА ОТЧЕТА.
//

Функция ВернутьТекстНаименования(ДанныеОбъекта,СтруктураЯзыков)
	
	Если СтруктураЯзыков.ОсновнойЯзык=0 Тогда
		
		ОсновнойТекст=ДанныеОбъекта.Наименование;
		
	Иначе
		
		ОсновнойТекст=ДанныеОбъекта["Наименование"+СтруктураЯзыков.ОсновнойЯзык];
		
	КонецЕсли;
	
	Если СтруктураЯзыков.ВыводитьДополнительныйЯзык1 Тогда
		
		ОсновнойТекст=ОсновнойТекст+" / "+ДанныеОбъекта.Наименование1;
		
	КонецЕсли;
	
	Если СтруктураЯзыков.ВыводитьДополнительныйЯзык2 Тогда
		
		ОсновнойТекст=ОсновнойТекст+" / "+ДанныеОбъекта.Наименование2;
		
	КонецЕсли;
	
	Возврат ОсновнойТекст;
		
	
КонецФункции // ВернутьТекстНаименования() 

Процедура ОбновитьТекстСтрокКолонок(ВидОтчета,ТаблДок,СтруктураЯзыков) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Код,
	|	СтрокиОтчетов.Наименование1,
	|	СтрокиОтчетов.Наименование2,
	|	СтрокиОтчетов.Наименование
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбластьЗаголовок=ТаблДок.Области.Найти("Строка_"+СокрЛП(Результат.Код));
		
		Если Не ОбластьЗаголовок=Неопределено Тогда
			
			ОбластьЗаголовок.СодержитЗначение=Ложь;
			ОбластьЗаголовок.Текст=ВернутьТекстНаименования(Результат,СтруктураЯзыков);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Код,
	|	КолонкиОтчетов.Наименование1,
	|	КолонкиОтчетов.Наименование2,
	|	КолонкиОтчетов.Наименование
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета";
		
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбластьЗаголовок=ТаблДок.Области.Найти("Колонка_"+СокрЛП(Результат.Код));
		
		Если Не ОбластьЗаголовок=Неопределено Тогда
			
			ОбластьЗаголовок.СодержитЗначение=Ложь;
			ОбластьЗаголовок.Текст=ВернутьТекстНаименования(Результат,СтруктураЯзыков);
			
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьТекстСтрокКолонок() 


Функция ВернутьТаблицуБланковОтчетов(ТекущийВидОтчета)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Код");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ПоУмолчанию");
	ТЗ.Колонки.Добавить("Бланк");
	
	БланкПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения
	, ТекущийВидОтчета
	, Неопределено
	, Неопределено
	, Неопределено);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	БланкиОтчетов.Код,
	|	БланкиОтчетов.Наименование,
	|	БланкиОтчетов.Ссылка,
	|	ВЫБОР
	|		КОГДА БланкиОтчетов.Ссылка = &БланкПоУмолчанию
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоУмолчанию,
	|	БланкиОтчетов.Макет
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.Владелец = &ВидОтчета");
	
	Запрос.УстановитьПараметр("ВидОтчета", ТекущийВидОтчета);
	Запрос.УстановитьПараметр("БланкПоУмолчанию", БланкПоУмолчанию);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТЗ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.Бланк = Выборка.Макет.Получить();
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

// Процедура добавляет показатель в выбранные поля. Вызывается перед выполнением запроса.
// 
// Параметры:
//	ИмяПоляПостроителя - строка, идентификатор поля построителя
//	ПостроительОтчета  - Построитель отчета
//
Процедура ОбработкаПоказателейДобавитьВВыбранныеПоля(ИмяПоляПостроителя, ПостроительОтчета) Экспорт
	
	ПостроительОтчета.ДоступныеПоля.Найти(ИмяПоляПостроителя).Поле = Истина;
	
	ВыбранноеПолеПоказателя = ПостроительОтчета.ВыбранныеПоля.Найти(ИмяПоляПостроителя);
	
	Если ВыбранноеПолеПоказателя = Неопределено Тогда
		ВыбранноеПолеПоказателя = ПостроительОтчета.ВыбранныеПоля.Добавить(ИмяПоляПостроителя, ИмяПоляПостроителя);
	КонецЕсли;
	
	ВыбранноеПолеПоказателя.Представление = ПостроительОтчета.ДоступныеПоля.Найти(ИмяПоляПостроителя).Представление;
	
КонецПроцедуры // ОбработкаПоказателейДобавитьВВыбранныеПоля()


////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТЧЕТОВ НА ПОСТРОИТЕЛЕ ОТЧЕТОВ

// Процедура заполняет представления элементов всех коллекций построителя отчета на
//  основании соответствия имен и представдлений переданных в параметре
//
// Параметры
//  СтруктураСоответствияИмен - Структура, ключ - имя поля, значение - представление поля
//  ПостроительОтчета         - ПостроительОтчета
//
//  Возвращаемое значение
//   НЕТ
//
Процедура ЗаполнитьПредставленияПолей(СтруктураСоответствияИмен, ПостроительОтчета) Экспорт
	
	СтруктураКоллекцийПостроителяОтчета = Новый Структура("ДоступныеПоля, ВыбранныеПоля, ИзмеренияКолонки, ИзмеренияСтроки, Отбор, Порядок");
	
	Для каждого ЭлементСтруктуры Из СтруктураКоллекцийПостроителяОтчета Цикл
		Для а = 0 По ПостроительОтчета[ЭлементСтруктуры.Ключ].Количество() - 1 Цикл
			Если ПустаяСтрока(ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя) Тогда
				Продолжить;
			КонецЕсли;
			Если СтруктураСоответствияИмен.Свойство(ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя) Тогда
				ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Представление = СтруктураСоответствияИмен[ПостроительОтчета[ЭлементСтруктуры.Ключ][а].Имя];
			КонецЕсли; 
		КонецЦикла; 
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьПредставленияПолей()

// Удаляет автоматически добавляемые Построителем при инициализации дополнительные поля с измерениями
//
// Параметры:
//	нет
//
Процедура ОчиститьДополнительныеПоляПостроителя(ПостроительОтчета) Экспорт
	
	Сч=0;
	Пока Сч<ПостроительОтчета.ВыбранныеПоля.Количество() Цикл
		
		Если ПостроительОтчета.ИзмеренияСтроки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда
			
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
			
		ИначеЕсли ПостроительОтчета.ИзмеренияКолонки.Найти(ПостроительОтчета.ВыбранныеПоля[Сч].Имя)<>Неопределено Тогда
			
			ПостроительОтчета.ВыбранныеПоля.Удалить(ПостроительОтчета.ВыбранныеПоля[Сч]);
			
		Иначе
			
			Сч=Сч+1;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьДополнительныеПоляПостроителя()

// Заполняет отборы ПостроителяОтчета
//
// Параметры:
//	МассивОтбора - Массив, содержащий идентификаторы отборов
Процедура ЗаполнитьОтбор(МассивОтбора, ПостроительОтчета) Экспорт
	Для Каждого Элемент Из МассивОтбора Цикл
		
		ПолеОтбора = ПостроительОтчета.Отбор.Добавить(Элемент);
		
	КонецЦикла; 
КонецПроцедуры // ЗаполнитьОтбор()

// Добавляет в параметры построителя отчета использованные в отборах категории
//
// Параметры:
//	ПостроительОтчета              - Построитель, отбор которого обрабатывается, и в Параметры 
//                                    которого добавляются категории
//	СтруктураДляОтбораПоКатегориям - структура, связывающая пути к данным Отборов Построителя и 
//                                    идентицфикаторы параметров
//
// Возвращаемое значение:
//	Истина, если добавление параметров произошло успешно
//	Ложь, если есть повторный отбор по одной и той же категории.
//
// Вообще-то, повторный отбор по одной и той же категории невозможен не всегда - 
//  можно отобрать два раза с видом сравнения "не равно". Контроль возвращаемого
//  этой функцией значения отключить можно, но нужно после этого понимать,
//  что два отбора по одной категории с видом сравнения "Равно" приведут к тому,
//  что отчет окажется пустым.
//
Функция ЗадатьПараметрыОтбораПоКатегориям(ПостроительОтчета, СтруктураДляОтбораПоКатегориям) Экспорт
	
	Если ТипЗнч(СтруктураДляОтбораПоКатегориям) = ТипЗнч(Новый Структура) Тогда
		
		Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			//Прочищаем все, независимо от использования элемента отбора
			НазваниеПараметра = "";
			Если СтрНайти(ЭлементОтбора.ПутьКДанным, ".") = 0 Тогда
				Если СтруктураДляОтбораПоКатегориям.Свойство(ЭлементОтбора.ПутьКДанным, НазваниеПараметра) Тогда
					Если ПостроительОтчета.Параметры.Свойство(НазваниеПараметра) Тогда
						ПостроительОтчета.Параметры.Удалить(НазваниеПараметра);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ЭлементОтбора Из ПостроительОтчета.Отбор Цикл
			
			Если СтрНайти(ЭлементОтбора.ПутьКДанным, ".") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОтбора.Использование Тогда
				
				ИдентификаторПараметра = "";
				
				Если СтруктураДляОтбораПоКатегориям.Свойство(ЭлементОтбора.ПутьКДанным, ИдентификаторПараметра) Тогда
					
					МассивЗначенийКатегорий = НеОпределено;
					
					Если НЕ ПостроительОтчета.Параметры.Свойство(ИдентификаторПараметра, МассивЗначенийКатегорий) Тогда
						МассивЗначенийКатегорий = Новый Массив;
					Иначе
						#Если Клиент Тогда
							ПоказатьПредупреждение(, Нстр("ru = 'Нельзя использовать несколько отборов по одной и той же категории!'"));
						#КонецЕсли
						Возврат Ложь;
					КонецЕсли;
					
					Если ТипЗнч(ЭлементОтбора.Значение) = ТипЗнч(Новый СписокЗначений) Тогда
						Для Каждого ЗначениеКатегории Из ЭлементОтбора.Значение Цикл
							МассивЗначенийКатегорий.Добавить(ЗначениеКатегории.Значение);
						КонецЦикла;
					Иначе
						МассивЗначенийКатегорий.Добавить(ЭлементОтбора.Значение);
					КонецЕсли;
					
					ПостроительОтчета.Параметры.Вставить(ИдентификаторПараметра, МассивЗначенийКатегорий);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ЗадатьПараметрыОтбораПоКатегориям()

// Формирует текст-заголовок формы отчета
Функция СформироватьЗаголовокОсновнойФормы(ДатаНач, ДатаКон, НазваниеОтчета, РежимВводаПериода) Экспорт
	
	// Вывод заголовка, описателя периода и фильтров и заголовка
	Если РежимВводаПериода =  0 Тогда  // произвольный период
		Если ДатаНач = '00010101000000' И ДатаКон = '00010101000000' Тогда
			ОписаниеПериода     = Нстр("ru = 'Период не установлен'");
			
		Иначе
			Если ДатаНач = '00010101000000' ИЛИ ДатаКон = '00010101000000' Тогда
				ОписаниеПериода = "" + Формат(ДатаНач, "ДФ = ""дд.ММ.гггг""; ДП = ""...""") 
				+ " - "      + Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""...""");
				
			Иначе
				Если ДатаНач <= ДатаКон Тогда
					ОписаниеПериода = "" + ПредставлениеПериода(НачалоДня(ДатаНач), КонецДня(ДатаКон), "ФП = Истина");
				Иначе
					ОписаниеПериода = Нстр("ru = 'Неправильно задан период!'")
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода =  1 Тогда   // на дату
		Если ДатаКон = '00010101000000' Тогда
			ОписаниеПериода = СтрШаблон(Нстр("ru = 'на текущее время %1'"), Формат(ТекущаяДата(), "ДФ = ""дд.ММ.гггг""; ДП = ""..."""));
			
		Иначе
			ОписаниеПериода = СтрШаблон(Нстр("ru = 'на конец дня %1'"), Формат(ДатаКон, "ДФ = ""дд.ММ.гггг""; ДП = ""..."""));
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 2 Тогда   // месяц
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = Нстр("ru = 'Период не установлен'");
			
		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоМесяца(ДатаНач), КонецМесяца(ДатаНач),"ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 3 Тогда   // квартал
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = Нстр("ru = 'Период не установлен'");
			
		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоКвартала(ДатаНач), КонецКвартала(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	ИначеЕсли РежимВводаПериода = 4 Тогда   // год
		Если ДатаНач = '00010101000000' Тогда
			ОписаниеПериода     = Нстр("ru = 'Период не установлен'");
			
		Иначе
			ОписаниеПериода = "" + ПредставлениеПериода(НачалоГода(ДатаНач), КонецГода(ДатаНач), "ФП = Истина");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОписаниеПериода) Тогда
		Возврат НазваниеОтчета;
	Иначе
		Возврат НазваниеОтчета+" (" + ОписаниеПериода + ") ";
	КонецЕсли;
	
КонецФункции // СформироватьЗаголовокОсновнойФормы()

// Процедура делает показатель недоступным для выбора как поле, удаляет из выбранных полей
// Вызывается после формирования отчета.
// 
// Параметры:
//	ИмяПоляПостроителя - строка, идентификатор поля построителя
//	ПостроительОтчета  - Построитель отчета
//
Процедура ОбработкаПоказателейУдалитьИзДоступныхПолей(ИмяПоляПостроителя, ПостроительОтчета) Экспорт
	
	Представление = "";
	
	ВыбранноеПоле = ПостроительОтчета.ВыбранныеПоля.Найти(ИмяПоляПостроителя);
	Если ВыбранноеПоле<>Неопределено Тогда
		ПостроительОтчета.ВыбранныеПоля.Удалить(ВыбранноеПоле);
	КонецЕсли;
	
	ДоступноеПоле = ПостроительОтчета.ДоступныеПоля.Найти(ИмяПоляПостроителя);
	Если ДоступноеПоле<>Неопределено Тогда
		Представление = ДоступноеПоле.Представление;
		ТипЗначения = ДоступноеПоле.ТипЗначения;
		ПостроительОтчета.ДоступныеПоля.Удалить(ДоступноеПоле);
	Иначе
		возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		
		Представление = ИмяПоляПостроителя;
		
	КонецЕсли;
	
	Поле = ПостроительОтчета.ДоступныеПоля.Добавить(ИмяПоляПостроителя, Представление, ТипЗначения);
	Поле.Порядок = Истина;
	
КонецПроцедуры // ОбработкаПоказателейУдалитьИзДоступныхПолей()

// Процедура обрабатывает Порядок Построителя отчета и удаляет из него те элементы порядка,
// которые не связаны с выбранными полями или измерениями.
// Это делается для несоздания ложного впечатления о том, что что-то как-то отсортировали
// в одних случаях, и для избежания ошибки времени выполнения при выполнении запроса
// в других случаях
//
// Параметры:
//	ПостроительОтчета - ПостроительОтчета, Порядок которого надо обработать
//
Процедура ПроверитьПорядокПостроителяОтчета(ПостроительОтчета) Экспорт
	
	КоличествоЭлементовПорядка = ПостроительОтчета.Порядок.Количество();
	
	Конструктор = Новый КонструкторЗапроса;
	
	ПопыткаПровалилась = Ложь;
	
	Если КоличествоЭлементовПорядка > 0 Тогда
		Попытка
			Конструктор.Текст = ПостроительОтчета.ПолучитьЗапрос().Текст;
		Исключение
			ПопыткаПровалилась = Истина;
		КонецПопытки;
	КонецЕсли;
	
	КопияПостроителя = Новый ПостроительОтчета;
	
	// Запрос оказался синтаксически неправильным...
	Попытка
		КопияПостроителя.Текст = ПостроительОтчета.Текст;// <- Здесь может произойти ошибка при исходно неправильном тексте запроса Построителя
	Исключение
		Возврат; // Ничего не делать.
	КонецПопытки;
	
	КопияПостроителя.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки(Истина, Ложь, Истина, Истина), Истина, Ложь, Истина, Истина);
	
	Если ПопыткаПровалилась Тогда
		
		// Побочным эффектом этой процедуры может послужить прочистка всего Порядка у
		// построителя отчета запросом, который прошел первую проверку, но имеет поля упорядочивания,
		// которые отсутствуют в выбранных полях
		
		Для Инд = 0 по КоличествоЭлементовПорядка - 1 Цикл
			// Это мы делаем для того, чтобы можно было бездумно удалять и переходить к следующему - 
			// обход с конца.
			ЭлементПорядка = ПостроительОтчета.Порядок[КоличествоЭлементовПорядка - 1 - Инд];
			КопияПостроителя.Порядок.Очистить();
			КопияПостроителя.Порядок.Добавить(ЭлементПорядка.ПутьКДанным);
			Попытка
				Конструктор.Текст = КопияПостроителя.ПолучитьЗапрос().Текст;
			Исключение
				ПостроительОтчета.Порядок.Удалить(КоличествоЭлементовПорядка - 1 - Инд);
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли; 
	
	// Теперь проверим порядки на то, что если в выбранных полях есть регистратор,
	// то для корректной работы необходимо установить порядок по периоду и самому регитстратору
	
	Если ПостроительОтчета.ВыбранныеПоля.Найти("Регистратор") <> Неопределено Тогда
		
		ЕстьРегистратор = Ложь;
		ЕстьПериод = Ложь;
		
		КоличествоЭлементовПорядка = ПостроительОтчета.Порядок.Количество();
		
		Для Инд = 0 по КоличествоЭлементовПорядка - 1 Цикл
			ЭлементПорядка = ПостроительОтчета.Порядок[КоличествоЭлементовПорядка - 1 - Инд];
			Если ЭлементПорядка.ПутьКДанным = "Регистратор" Тогда
				ЕстьРегистратор = Истина;
			КонецЕсли; 
			Если ЭлементПорядка.ПутьКДанным = "Период" Тогда
				ЕстьПериод = Истина;
			КонецЕсли; 
		КонецЦикла;
		
		Если КопияПостроителя.ДоступныеПоля.Найти("Период") <> Неопределено Тогда
			Если НЕ ЕстьПериод Тогда
				КопияПостроителя.Порядок.Очистить();
				Попытка
					КопияПостроителя.Порядок.Добавить("Период");
					Если КопияПостроителя.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
						КопияПостроителя.ВыбранныеПоля.Добавить("Период");
					КонецЕсли; 
					КопияПостроителя.ВыбранныеПоля.Добавить("Период");
					Попытка
						Конструктор.Текст = КопияПостроителя.ПолучитьЗапрос().Текст;
						ПостроительОтчета.Порядок.Добавить("Период");
						Если ПостроительОтчета.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
							ПостроительОтчета.ВыбранныеПоля.Вставить("Период",, 0);
						КонецЕсли; 
					Исключение
						// Ничего добавлять не будем
					КонецПопытки;
				Исключение
				КонецПопытки;
			Иначе
				Если ПостроительОтчета.ВыбранныеПоля.Найти("Период") = Неопределено Тогда
					Попытка
						ПостроительОтчета.ВыбранныеПоля.Вставить("Период",, 0);
					Исключение
					КонецПопытки;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли; 
		
		Если КопияПостроителя.ДоступныеПоля.Найти("Регистратор") <> Неопределено Тогда
			Если НЕ ЕстьРегистратор Тогда
				КопияПостроителя.Порядок.Очистить();
				Попытка
					КопияПостроителя.Порядок.Добавить("Регистратор");
					Если КопияПостроителя.ВыбранныеПоля.Найти("Регистратор") = Неопределено Тогда
						КопияПостроителя.ВыбранныеПоля.Добавить("Регистратор");
					КонецЕсли; 
					Попытка
						Конструктор.Текст = КопияПостроителя.ПолучитьЗапрос().Текст;
						ПостроительОтчета.Порядок.Добавить("Регистратор");
					Исключение
						// Ничего добавлять не будем
					КонецПопытки;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли; 
		
	КонецЕсли; 
	
КонецПроцедуры // ПроверитьПорядокПостроителяОтчета()

// Формирует список регистров остатков
//
// Параметры: 
//	Нет.
//
// Возвращаемое значение: 
//	список значений, содержащийимена всех регистров остатков
//
Функция ПолучитьСписокРегистровНакопления() Экспорт
	
	СписокРегистровОстатков = Новый СписокЗначений;
	
	Для Каждого МетаданныеРегистр Из Метаданные.РегистрыНакопления Цикл
		
		Если НЕ ПравоДоступа("Чтение", МетаданныеРегистр) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокРегистровОстатков.Добавить(МетаданныеРегистр.Имя, МетаданныеРегистр.Представление());
		
	КонецЦикла;
	
	Возврат СписокРегистровОстатков;
	
КонецФункции // ПолучитьСписокРегистровНакопления()

Функция ПолучитьТаблицуВалютДляВерсииОрганизационнойСтруктуры(ВерсияОрганизационнойСтруктуры) Экспорт	
	Возврат РегистрыСведений.ВалютыОтчетности.ПолучитьТаблицуВалютДляВерсииОрганизационнойСтруктуры(ВерсияОрганизационнойСтруктуры);	
КонецФункции

Функция ИнициализироватьЗапрос(ВерсияРегламентовПодготовкиОтчетности, УникальныйИдентификатор = Неопределено, Адрес = Неопределено,СтрокаДопОтбора=Неопределено,ОтборОбъект=Неопределено) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ШаблонПроцесса = КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики("Справочник.ШаблоныУниверсальныхПроцессов");
	Иначе
		ШаблонПроцесса = Неопределено;
	КонецЕсли;

	РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(ВерсияРегламентовПодготовкиОтчетности,ШаблонПроцесса);

	Если НЕ ЗначениеЗаполнено(ШаблонПроцесса) Тогда
		
		ЗапросОбъекты=Новый Запрос;

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка) КАК ЭтапПроцесса,
		|   ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ПрофильОрганизаций,
		|	Организации.ОрганизационнаяЕдиница КАК Организация
		|ПОМЕСТИТЬ ТаблицаОрганизаций
		|ИЗ
		|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК Организации
		|ГДЕ
		|   Организации.Ссылка = &ВерсияРегламента";
		
		Запрос.УстановитьПараметр("ВерсияРегламента", ВерсияРегламентовПодготовкиОтчетности);
		
		Если ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.Организации") Тогда
			
			ТекстЗапроса = ТекстЗапроса+" 
			|И Организации.Ссылка =&ОтборОбъект	
			|;
		    |////////////////////////////////////////////////////////////////////////////////";

			Запрос.УстановитьПараметр("ОтборОбъект", ОтборОбъект);
			
		Иначе				
			ТекстЗапроса = ТекстЗапроса+"
			|;
			|////////////////////////////////////////////////////////////////////////////////";	
		КонецЕсли;
		
		ТекстЗапросаОбъекты="";
		
		Если ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.ДокументыБД") Тогда   //Отдельный документ согласование или настройки
			ТекстЗапросаОбъекты=
			"ВЫБРАТЬ
			|	ДокументыБД.Ссылка КАК ОбъектБД,
			|   ""ДокументыБД"" КАК ТипОбъекта,
			|	ДокументыБД.РеквизитШаблонаДокумета,
			|	ДокументыБД.ИспользоватьШаблоны
			|ИЗ
			|	Справочник.ДокументыБД КАК ДокументыБД";
			
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+?(СтрокаДопОтбора=Неопределено," ГДЕ (ДокументыБД.Согласуется=ИСТИНА ИЛИ ДокументыБД.ИспользуетсяВНастройкахРеглмента=ИСТИНА)",
			" ГДЕ ДокументыБД."+СтрЗАменить(СтрокаДопОтбора,"СогласуетсяНСИ","Согласуется")+"=ИСТИНА");
		 	
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+" И (ДокументыБД.Ссылка=&ОтборОбъект)";
            ЗапросОбъекты.УстановитьПараметр("ОтборОбъект", ОтборОбъект);

			
		ИначеЕсли ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.СправочникиБД") И СтрокаДопОтбора="Согласуется" Тогда //Отдельный справочник согласование	
			
			
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+"
			|ВЫБРАТЬ
			|	СправочникиБД.Ссылка КАК ОбъектБД,
			|   ""СправочникиБД"" КАК ТипОбъекта,
			|	СправочникиБД.РеквизитШаблонаДокумета,
			|	СправочникиБД.ИспользоватьШаблоны
			|ИЗ
			|	Справочник.СправочникиБД КАК СправочникиБД";
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+?(СтрокаДопОтбора=Неопределено," ГДЕ СправочникиБД.Согласуется=ИСТИНА ИЛИ СправочникиБД.ИспользуетсяВНастройкахРеглмента=ИСТИНА"," ГДЕ СправочникиБД."+СтрокаДопОтбора+"=ИСТИНА");
				
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+" И (СправочникиБД.Ссылка=&ОтборОбъект)";
            ЗапросОбъекты.УстановитьПараметр("ОтборОбъект", ОтборОбъект);
			
			
		ИначеЕсли ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.СправочникиБД") И СтрокаДопОтбора="СогласуетсяНСИ" Тогда //Отдельный справочник согласование через заявкуНСИ	
			
			ТекстЗапросаОбъекты=
			"ВЫБРАТЬ
			|	ДокументыБД.Ссылка КАК ОбъектБД,
			|   ""ДокументыБД"" КАК ТипОбъекта,
			|	ДокументыБД.РеквизитШаблонаДокумета,
			|	ДокументыБД.ИспользоватьШаблоны
			|ИЗ
			|	Справочник.ДокументыБД КАК ДокументыБД";
			
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+?(СтрокаДопОтбора=Неопределено," ГДЕ (ДокументыБД.Согласуется=ИСТИНА ИЛИ ДокументыБД.ИспользуетсяВНастройкахРеглмента=ИСТИНА)",
			" ГДЕ ДокументыБД."+СтрЗАменить(СтрокаДопОтбора,"СогласуетсяНСИ","Согласуется")+"=ИСТИНА");
			
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+" И (ДокументыБД.Наименование=""ЗаявкаНаИзменениеНСИ"")";
			
		ИначеЕсли	ОтборОбъект=Неопределено или ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.Организации") Тогда//Нет отборов по объектам - выводим все
			
			
			ТекстЗапросаОбъекты=
			"ВЫБРАТЬ
			|	ДокументыБД.Ссылка КАК ОбъектБД,
			|   ""ДокументыБД"" КАК ТипОбъекта,
			|	ДокументыБД.РеквизитШаблонаДокумета,
			|	ДокументыБД.ИспользоватьШаблоны
			|ИЗ
			|	Справочник.ДокументыБД КАК ДокументыБД";
			
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+?(СтрокаДопОтбора=Неопределено," ГДЕ (ДокументыБД.Согласуется=ИСТИНА ИЛИ ДокументыБД.ИспользуетсяВНастройкахРеглмента=ИСТИНА)",
			" ГДЕ ДокументыБД."+СтрЗАменить(СтрокаДопОтбора,"СогласуетсяНСИ","Согласуется")+"=ИСТИНА");

			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+"
			|ОБЪЕДИНИТЬ
			|ВЫБРАТЬ
			|	СправочникиБД.Ссылка КАК ОбъектБД,
			|   ""СправочникиБД"" КАК ТипОбъекта,
			|	СправочникиБД.РеквизитШаблонаДокумета,
			|	СправочникиБД.ИспользоватьШаблоны
			|ИЗ
			|	Справочник.СправочникиБД КАК СправочникиБД";
			ТекстЗапросаОбъекты=ТекстЗапросаОбъекты+" ГДЕ СправочникиБД.Согласуется=ИСТИНА ";
			
	
		КонецЕсли;
					
		
		ЗапросОбъекты.Текст=ТекстЗапросаОбъекты;
		
		ЗапросОбъекты.УстановитьПараметр("ТекИБ",Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ);
		
		
		Результат = ЗапросОбъекты.Выполнить();
		
		Выборка = Результат.Выбрать();
		
		ТестЗапросаВидыОбъектов = "";
		
		ЭтоПервыйБлок = Истина;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ИспользоватьШаблоны Тогда
				ТекНаименованиеОбъектаМетаданных = Выборка.ОбъектБД.Наименование;
				Если Метаданные.Документы.Найти(ТекНаименованиеОбъектаМетаданных) <> Неопределено Тогда
					ЗначениеРеквизитаШаблона = Метаданные.Документы[ТекНаименованиеОбъектаМетаданных].Реквизиты[Выборка.РеквизитШаблонаДокумета];
					ТипМетаданных = ЗначениеРеквизитаШаблона.Тип.Типы()[0];
					ТипРеквизитаШаблона = Метаданные.НайтиПоТипу(ТипМетаданных);
					
					Если Строка(Выборка.ОбъектБД) = "ЗаявкаНаИзменениеНСИ" Тогда
						
						ТестЗапросаВидыОбъектов = ТестЗапросаВидыОбъектов + "
						| ОБЪЕДИНИТЬ ВСЕ
						| ВЫБРАТЬ 
						|	ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка) КАК ЭтапПроцесса,
						|	Шаблон.Ссылка КАК ВидОтчета,
						|	&" + Выборка.ОбъектБД.Наименование + " КАК ДокументБД
						|" + ?(ЭтоПервыйБлок," ПОМЕСТИТЬ ТаблицаВидовОтчетов","") + "
						|ИЗ
						|	" + ТипРеквизитаШаблона.ПолноеИмя() + " КАК Шаблон 
						| ГДЕ Шаблон.Контролируемый = Истина";
						
						
						Если ТипЗнч(ОтборОбъект) = Тип("СправочникСсылка.СправочникиБД") Тогда
							
							ТестЗапросаВидыОбъектов = ТестЗапросаВидыОбъектов+" И Шаблон.Ссылка =&ОтборОбъект";	
							Запрос.УстановитьПараметр("ОтборОбъект", ОтборОбъект);
							
						КонецЕсли;
						
						Запрос.УстановитьПараметр(Выборка.ОбъектБД.Наименование, Выборка.ОбъектБД);			
						
						ЭтоПервыйБлок = Ложь;
						Продолжить;
						
					КонецЕсли;
					
					ТекстОтборов = "";
					Если Метаданные.Справочники.Содержит(ТипРеквизитаШаблона) Тогда
						
						ТекстОтборов = Символы.ПС + "ГДЕ" + Символы.ПС + " Шаблон.ПометкаУдаления = Ложь ";
						
						Если ТипРеквизитаШаблона.Иерархический 
							И (ТипРеквизитаШаблона.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов) Тогда
							
							ТекстОтборов = ТекстОтборов + " И  Шаблон.ЭтоГруппа = Ложь";
							
						КонецЕсли;					
						
					КонецЕсли;						 
					
					ТестЗапросаВидыОбъектов = ТестЗапросаВидыОбъектов + "
					| ОБЪЕДИНИТЬ ВСЕ
					| ВЫБРАТЬ 
					|	ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка) КАК ЭтапПроцесса,
					|	Шаблон.Ссылка КАК ВидОтчета,
					|	&" + Выборка.ОбъектБД.Наименование + " КАК ДокументБД
					|" + ?(ЭтоПервыйБлок," ПОМЕСТИТЬ ТаблицаВидовОтчетов","") + "
					|ИЗ
					|	" + ТипРеквизитаШаблона.ПолноеИмя() + " КАК Шаблон 
					|" + ТекстОтборов;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				
				ТестЗапросаВидыОбъектов = ТестЗапросаВидыОбъектов + "
				| ОБЪЕДИНИТЬ ВСЕ
				| ВЫБРАТЬ 
				|	ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка) КАК ЭтапПроцесса,
				|	Шаблон.Ссылка КАК ВидОтчета,
				|	Шаблон.Ссылка КАК ДокументБД
				|" + ?(ЭтоПервыйБлок," ПОМЕСТИТЬ ТаблицаВидовОтчетов","") + "
				|ИЗ
				|	Справочник." + Выборка.ТипОбъекта + " КАК Шаблон 
				|	ГДЕ  Шаблон.Ссылка=&" + Выборка.ОбъектБД.Наименование;
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр(Выборка.ОбъектБД.Наименование, Выборка.ОбъектБД);			
			ЭтоПервыйБлок = Ложь;
			
		КонецЦикла;
		
		ТестЗапросаВидыОбъектов = Прав(ТестЗапросаВидыОбъектов, СтрДлина(ТестЗапросаВидыОбъектов)-16);		
		ТекстЗапроса = ТекстЗапроса + ТестЗапросаВидыОбъектов;
		
	Иначе
		
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ПрофильОрганизаций,
			|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
			|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
			|ПОМЕСТИТЬ ТаблицаОрганизаций
			|ИЗ
			|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
			|ГДЕ
			|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентовПодготовкиОтчетности
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЭтапыПроцессовФормируемыеДокументы.Ссылка КАК ЭтапПроцесса,
			|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК ВидОтчета,
			|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД
			|ПОМЕСТИТЬ ТаблицаВидовОтчетов
			|ИЗ
			|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
			|ГДЕ
			|	ЭтапыПроцессовФормируемыеДокументы.Ссылка.Владелец = &ТекущийШаблон
			|	";
			ТекстЗапроса = ТекстЗапроса + ?(СтрокаДопОтбора=Неопределено,""," И ЭтапыПроцессовФормируемыеДокументы.ДокументБД."+СтрокаДопОтбора+"=ИСТИНА");
			
			Если ТипЗнч(ОтборОбъект)=Тип("СправочникСсылка.ДокументыБД") Тогда
				
				ТекстЗапроса=ТекстЗапроса+" И ЭтапыПроцессовФормируемыеДокументы.ДокументБД=&ДокументБД";
				Запрос.УстановитьПараметр("ДокументБД",ОтборОбъект);
				
			ИначеЕсли ОбщегоНазначенияУХ.ПолучитьИмяОбъектаМетаданных(ОтборОбъект)="ЭтапыУниверсальныхПроцессов" Тогда
				ТекстЗапроса=ТекстЗапроса+" И ЭтапыПроцессовФормируемыеДокументы.Ссылка=&Этап";
				Запрос.УстановитьПараметр("Этап",ОтборОбъект);
	
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТекущийШаблон", ШаблонПроцесса);
				
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОрганизаций.Организация,
	|	ТаблицаОрганизаций.ЭтапПроцесса,
	|	ТаблицаОрганизаций.ПрофильОрганизаций
	|ИЗ
	|	ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидовОтчетов.ЭтапПроцесса,
	|	ТаблицаВидовОтчетов.ВидОтчета,
	|	ТаблицаВидовОтчетов.ДокументБД

	|ИЗ
	|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов";
	

    Запрос.Текст=ТекстЗапроса;	
	Запрос.УстановитьПараметр("ВерсияРегламентовПодготовкиОтчетности", ВерсияРегламентовПодготовкиОтчетности);
	Запрос.УстановитьПараметр("ДокументБДВидОтчета", Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет"));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если ЗначениеЗаполнено(УникальныйИдентификатор) Тогда
		Адрес = ПоместитьВоВременноеХранилище(Новый Структура("ТаблицаОрганизаций, ТаблицаВидовОтчетов", РезультатЗапроса[РезультатЗапроса.Количество()-2].Выгрузить(), РезультатЗапроса[РезультатЗапроса.Количество()-1].Выгрузить()), УникальныйИдентификатор);
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции

Процедура ВосстановитьВременныеТаблицыЗапроса(Запрос, Адрес) Экспорт
	
	Запрос = Новый Запрос;
	СтруктураОтвета = ПолучитьИзВременногоХранилища(Адрес);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ ВН_ТО.* ПОМЕСТИТЬ ТаблицаОрганизаций ИЗ &ТаблицаОрганизаций КАК ВН_ТО;
	|ВЫБРАТЬ ВН_ТВО.* ПОМЕСТИТЬ ТаблицаВидовОтчетов Из &ТаблицаВидовОтчетов КАК ВН_ТВО";
	
	Запрос.УстановитьПараметр("ТаблицаОрганизаций", СтруктураОтвета.ТаблицаОрганизаций);
	Запрос.УстановитьПараметр("ТаблицаВидовОтчетов", СтруктураОтвета.ТаблицаВидовОтчетов);
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура УдалитьВременныеТаблицыИзЗапроса(Запрос) Экспорт
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ ТаблицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаВидовОтчетов";
	
	Запрос.Выполнить();
	Запрос.МенеджерВременныхТаблиц = Неопределено;
	
КонецПроцедуры

Функция ПолучитьДеревоОрганизаций(мЗапрос, ЭтапПроцесса = Неопределено) Экспорт
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Профиль");
	ДеревоЗначений.Колонки.Добавить("Значение");
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПрофильОрганизаций, Организация ИЗ ТаблицаОрганизаций";
	Если ТипЗнч(ЭтапПроцесса) = Тип("Массив") Тогда
		мЗапрос.Текст = мЗапрос.Текст + "
		|ГДЕ ЭтапПроцесса В (&ЭтапПроцесса)";
		мЗапрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	ИначеЕсли ЭтапПроцесса <> Неопределено Тогда
		мЗапрос.Текст = мЗапрос.Текст + "
		|ГДЕ ЭтапПроцесса = &ЭтапПроцесса";
		мЗапрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	КонецЕсли;
	
	мЗапрос.Текст = мЗапрос.Текст + "
	|ИТОГИ ПО ПрофильОрганизаций";
	
	Корень = ДеревоЗначений.Строки.Добавить();
	Корень.Значение = NULL;
	Корень.Профиль  = NULL;
	Выборка = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Корень.Строки.Добавить();
		НоваяСтрока.Значение = Выборка.ПрофильОрганизаций;
		НоваяСтрока.Профиль  = Истина;
		ВыборкаОрганизаций = Выборка.Выбрать();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			Если ВыборкаОрганизаций.Организация <> Выборка.ПрофильОрганизаций Тогда
				НоваяСтрокаОрганизации = НоваяСтрока.Строки.Добавить();
				НоваяСтрокаОрганизации.Профиль = ЛОЖЬ;
				НоваяСтрокаОрганизации.Значение = ВыборкаОрганизаций.Организация;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоЗначений;
	
КонецФункции

Процедура ДополнитьДеревоРезультатамиВыборки(СтрокаДереваПриемника, СтрокаДереваИсточника)
	
	Для Каждого Строка Из СтрокаДереваИсточника.Строки Цикл
		
		НоваяСтрокаПриемник = СтрокаДереваПриемника.Строки.ДОбавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаПриемник, Строка);
		ДополнитьДеревоРезультатамиВыборки(НоваяСтрокаПриемник, Строка);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДеревоВидовОтчетов(мЗапрос, ЭтапПроцесса = Неопределено) Экспорт
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Этап");
	ДеревоЗначений.Колонки.Добавить("Значение");
	
	Корень = ДеревоЗначений.Строки.Добавить();
	Корень.Этап     = NULL;
	Корень.Значение = NULL;
	      
	ШаблонПроцесса=?(мЗапрос.Параметры.Свойство("ВерсияОрганизационнойСтруктуры"),мЗапрос.Параметры.ВерсияОрганизационнойСтруктуры.ШаблонПроцесса,мЗапрос.Параметры.ВерсияРегламентовПодготовкиОтчетности.ШаблонПроцесса);
	
	
	Если ШаблонПроцесса.Пустая() Тогда
		
		//Запрос = Новый Запрос;
		//Запрос.Текст = 
		//"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		//|	ВидОтчета.Ссылка КАК Значение,
		//|	ВидОтчета.ЭтоГруппа КАК Этап
		//|ИЗ
		//|	Справочник.ВидыОтчетов КАК ВидОтчета
		//|
		//|УПОРЯДОЧИТЬ ПО
		//|	ВидОтчета.Ссылка ИЕРАРХИЯ";
		мЗапрос.Текст = "
		| ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ВидОтчета КАК Значение,ДокументБД как Этап_ ИЗ ТаблицаВидовОтчетов
		| ГДЕ ВидОтчета.ЭтоГруппа=Ложь
		| ИТОГИ ПО ДокументБД,ВидОтчета";
		
		ДеревоИсточник = мЗапрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДеревоИсточник.Колонки.Добавить("Этап");
		Для каждого Стр из ДеревоИсточник.Строки Цикл
			Стр.Значение=Стр.Этап_;
			Стр.Этап=Истина;
			Для каждого СтрП из Стр.Строки Цикл
				СтрП.Строки.Очистить();
			КонецЦикла;	
		КонецЦикла;
		ДеревоИсточник.Колонки.Удалить("Этап_");

		ДополнитьДеревоРезультатамиВыборки(Корень, ДеревоИсточник);
		
	Иначе
	
		Если ТипЗнч(ЭтапПроцесса) = Тип("Массив") Тогда
			мЗапрос.Текст = "
			| ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ЭтапПроцесса, ВидОтчета ИЗ ТаблицаВидовОтчетов
			| ГДЕ ЭтапПроцесса В (&ЭтапПроцесса)
			| ИТОГИ По ЭтапПроцесса";
			мЗапрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
			Выборка = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Корень.Строки.Добавить();
				НоваяСтрока.Значение = Выборка.ЭтапПроцесса;
				НоваяСтрока.Этап     = Истина;
				ВыборкаВидовОтчета = Выборка.Выбрать();
				Пока ВыборкаВидовОтчета.Следующий() Цикл
					НоваяСтрокаОтчета = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаОтчета.Значение = ВыборкаВидовОтчета.ВидОтчета;
					НоваяСтрокаОтчета.Этап     = Ложь;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли ЭтапПроцесса <> Неопределено Тогда
			мЗапрос.Текст = "
			| ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ВидОтчета ИЗ ТаблицаВидовОтчетов
			| ГДЕ ЭтапПроцесса = &ЭтапПроцесса";
			мЗапрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
			Выборка = мЗапрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Корень.Строки.Добавить();
				НоваяСтрока.Значение = Выборка.ВидОтчета;
				НоваяСтрока.Этап     = Ложь;
			КонецЦикла;
		Иначе
			мЗапрос.Текст = "
			| ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ЭтапПроцесса, ВидОтчета Из ТаблицаВидовОтчетов
			| ИТОГИ ПО ЭтапПроцесса";
			Выборка = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = Корень.Строки.Добавить();
				НоваяСтрока.Значение = Выборка.ЭтапПроцесса;
				НоваяСтрока.Этап     = Истина;
				ВыборкаВидовОтчета = Выборка.Выбрать();
				Пока ВыборкаВидовОтчета.Следующий() Цикл
					НоваяСтрокаОтчета = НоваяСтрока.Строки.Добавить();
					НоваяСтрокаОтчета.Значение = ВыборкаВидовОтчета.ВидОтчета;
					НоваяСтрокаОтчета.Этап     = Ложь;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат ДеревоЗначений;
	
КонецФункции


Функция ПолучитьТаблицуПолномочий(ПериодОтчета, Сценарий, ВерсияОрганизационнойСтруктуры, Запрос, ЭтапПроцесса = Неопределено, Организация = Неопределено, ПрофильОрганизаций = Неопределено, ВидОтчета = Неопределено, ВидОтчетаЭтапПроцесса = Неопределено, ЕстьОшибки = Неопределено, МассивОрганизаций = Неопределено, МассивВидовОтчетов = Неопределено, Отбор =  Неопределено,Режим = "Настройка") Экспорт
	
	МассивОрганизаций  = Новый Массив;
	МассивВидовОтчетов = Новый Массив;
	
	Если ТипЗнч(Запрос) <> Тип("Запрос") Тогда
		Запрос = УправлениеОтчетамиУХ.ИнициализироватьЗапрос(ВерсияОрганизационнойСтруктуры);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", ВерсияОрганизационнойСтруктуры);
	
	Если ТипЗнч(ВидОтчета) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
		ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ Вн_Запрос.* ИЗ 
	|(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОрганизаций.Организация,
	|	ТаблицаВидовОтчетов.ВидОтчета,
	|	ТаблицаВидовОтчетов.ДокументБД КАК ДокументБД,
	|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета,
	|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета,
	|	НастройкаОбработкиОтчетов.ШаблонДокументаБД КАК ВидОтчета_Настройка,
	|	НастройкаОбработкиОтчетов.ДокументБД КАК ДокументБД_Настройка,
	|	НастройкаОбработкиОтчетов.Организация КАК Организация_Настройка,
	|	НастройкаОбработкиОтчетов.Сценарий КАК Сценарий_Настройка,
	|	НастройкаОбработкиОтчетов.ПериодОтчета КАК ПериодОтчета_Настройка,
	|	НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры КАК ВерсияОрганизационнойСтруктуры,
	|	ВЫБОР
	|		КОГДА НастройкаОбработкиОтчетов.ДокументБД = ЗНАЧЕНИЕ(Справочник.ДокументыБД.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = ЗНАЧЕНИЕ(Перечисление.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза)
	|			ТОГДА 8
	|		ИНАЧЕ 16
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НастройкаОбработкиОтчетов.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА 0
	|		КОГДА НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = ЗНАЧЕНИЕ(Перечисление.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза)
	|			ТОГДА 16
	|		ИНАЧЕ 8
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры = ЗНАЧЕНИЕ(Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 4
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НастройкаОбработкиОтчетов.Сценарий = ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 2
	|	КОНЕЦ + ВЫБОР
	|		КОГДА НастройкаОбработкиОтчетов.ПериодОтчета = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА ИСТИНА В (ВЫБРАТЬ
	|							ИСТИНА 
	|						ИЗ 
	|							Константа.ПроверятьУтверждениеНастроекОтчетов КАК т
	|						ГДЕ 
	|							НЕ т.Значение) ТОГДА ИСТИНА
	|		КОГДА НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета ССЫЛКА Справочник.БланкиОтчетов
	|			ТОГДА НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета.Утвержден
	|		КОГДА НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета ССЫЛКА Справочник.ПравилаОбработки
	|			ТОГДА НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета.Утверждено
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Утвержден,
	|	ВЫРАЗИТЬ(НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета КАК Справочник.БланкиОтчетов).БланкДляОтображения КАК БланкДляОтображения,
	|	ВЫРАЗИТЬ(НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета КАК Справочник.ПравилаОбработки).ТипБД КАК ТипБД,
	|	ВЫРАЗИТЬ(НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета КАК Справочник.ВнешниеИнформационныеБазы).ТипБД КАК ТипБД_ВнешняяИБ
	|ИЗ
	|	ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ПО ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
	|		ПО (НастройкаОбработкиОтчетов.Организация В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), ТаблицаОрганизаций.Организация))
	|			И (НастройкаОбработкиОтчетов.ШаблонДокументаБД = ТаблицаВидовОтчетов.ВидОтчета
	|				ИЛИ НастройкаОбработкиОтчетов.ШаблонДокументаБД = НЕОПРЕДЕЛЕНО)
	|           И  ВЫБОР КОГДА НастройкаОбработкиОтчетов.Сценарий = (&Сценарий) Тогда ИСТИНА ИНАЧЕ НастройкаОбработкиОтчетов.Сценарий = ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка) КОНЕЦ
	|           И  ВЫБОР КОГДА НастройкаОбработкиОтчетов.ПериодОтчета = (&ПериодОтчета) Тогда ИСТИНА ИНАЧЕ НастройкаОбработкиОтчетов.ПериодОтчета = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка) КОНЕЦ
	|			И (НастройкаОбработкиОтчетов.ВерсияОрганизационнойСтруктуры В (ЗНАЧЕНИЕ(Справочник.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка), &ВерсияОрганизационнойСтруктуры)
	|			И (НастройкаОбработкиОтчетов.ДокументБД = ТаблицаВидовОтчетов.ДокументБД ИЛИ НастройкаОбработкиОтчетов.ДокументБД = НЕОПРЕДЕЛЕНО))";
	
		
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	ГдеСтрока = "";

	Если ЗначениеЗаполнено(ЭтапПроцесса) Тогда
		Если ТипЗнч(ЭтапПроцесса) = Тип("Массив") Тогда
			ГдеСтрока = ГдеСтрока + "
			|  ТаблицаОрганизаций.ЭтапПроцесса В (&ЭтапПроцесса) И";
		Иначе
			ГдеСтрока = ГдеСтрока + "
			|  ТаблицаОрганизаций.ЭтапПроцесса = &ЭтапПроцесса И";
		КонецЕсли;
		Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ГдеСтрока = ГдеСтрока + "
		| ТаблицаОрганизаций.Организация = &Организация И";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Отбор) И ТипЗнч(Отбор) = Тип("Структура") Тогда
		Для каждого ЭлементОтбора Из Отбор Цикл
			ИмяПараметраОтбора_ = СтрЗаменить(ЭлементОтбора.Ключ, ".", "_");
			ТипЗначенияОтбора = ТипЗнч(ЭлементОтбора.Значение);
			Если ТипЗначенияОтбора = Тип("СписокЗначений") ИЛИ ТипЗначенияОтбора = Тип("Массив") Тогда
				ГдеСтрока = ГдеСтрока + "
				| ТаблицаОрганизаций.Организация." + ЭлементОтбора.Ключ + " В(&" + ИмяПараметраОтбора_ + ") И";
			Иначе
				ГдеСтрока = ГдеСтрока + "
				| ТаблицаОрганизаций.Организация." + ЭлементОтбора.Ключ + " = &" + ИмяПараметраОтбора_+" И";
			КонецЕсли;
			Запрос.УстановитьПараметр(ИмяПараметраОтбора_, ЭлементОтбора.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		ГдеСтрока = ГдеСтрока + "
		| ТаблицаВидовОтчетов.ВидОтчета = &ВидОтчета И";
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчетаЭтапПроцесса) Тогда
		
		Если ТипЗнч(ВидОтчетаЭтапПроцесса) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
			ГдеСтрока = ГдеСтрока + "
			| ТаблицаВидовОтчетов.ВидОтчета В ИЕРАРХИИ(&ВидОтчетаЭтапПроцесса) И";
			Запрос.УстановитьПараметр("ВидОтчетаЭтапПроцесса", ВидОтчетаЭтапПроцесса);
		Иначе
			ГдеСтрока = ГдеСтрока + "
			| ТаблицаВидовОтчетов.ЭтапПроцесса = &ВидОтчетаЭтапПроцесса И";
			Запрос.УстановитьПараметр("ВидОтчетаЭтапПроцесса", ВидОтчетаЭтапПроцесса);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + ?(ЗначениеЗаполнено(ГдеСтрока)," ГДЕ "+Лев(ГдеСтрока,СтрДлина(ГдеСтрока)-2),"");
	
	Запрос.Текст = Запрос.Текст + ") КАК Вн_Запрос
	|//ГДЕ Вн_Запрос.Вес >=16 // Ошибка: Если регистр НастройкаОбработкиОтчетов заполнен только записями с нулевым весом (первоначальное заполнение базы), то ничего не отображается.
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вн_Запрос.Вес УБЫВ
	|ИТОГИ ПО Вн_Запрос.Организация, Вн_Запрос.ВидОтчета,Вн_Запрос.ЭлементНастройкиОтчета";

	
	ИтоговаяТаблица = Новый ТаблицаЗначений;
	ИтоговаяТаблица.Колонки.Добавить("Организация");
	ИтоговаяТаблица.Колонки.Добавить("ВидОтчета");
	ИтоговаяТаблица.Колонки.Добавить("ДокументБД");
	ИтоговаяТаблица.Колонки.Добавить("ВерсияОрганизационнойСтруктуры");
	ИтоговаяТаблица.Колонки.Добавить("БланкДляИмпорта");
	ИтоговаяТаблица.Колонки.Добавить("ШаблонТрансляции");
	ИтоговаяТаблица.Колонки.Добавить("БланкДляОтображения");
	ИтоговаяТаблица.Колонки.Добавить("ПравилоПроверки");
	ИтоговаяТаблица.Колонки.Добавить("ПравилоОбработки");
	ИтоговаяТаблица.Колонки.Добавить("ПравилоИмпортаОбъекта");
	ИтоговаяТаблица.Колонки.Добавить("Периодичность");
	ИтоговаяТаблица.Колонки.Добавить("ПредставлениеСпособаФормированияОтчета");
	ИтоговаяТаблица.Колонки.Добавить("СпособФормированияОтчета");
	ИтоговаяТаблица.Колонки.Добавить("ВнешняяИнформационнаяБаза");
	ИтоговаяТаблица.Колонки.Добавить("БланкДляИмпорта_РезультатПроверки");
	ИтоговаяТаблица.Колонки.Добавить("БланкДляОтображения_РезультатПроверки");
	ИтоговаяТаблица.Колонки.Добавить("ПравилоОбработки_РезультатПроверки");
	ИтоговаяТаблица.Колонки.Добавить("ВнешняяИнформационнаяБаза_РезультатПроверки");
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		Если МассивОрганизаций.Найти(ВыборкаОрганизаций.Организация) = Неопределено Тогда
			МассивОрганизаций.Добавить(ВыборкаОрганизаций.Организация);
		КонецЕсли;
		
		ВыборкаВидовОтчетов = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаВидовОтчетов.Следующий() Цикл
			
			Если МассивВидовОтчетов.Найти(ВыборкаВидовОтчетов.ВидОтчета) = Неопределено Тогда
				МассивВидовОтчетов.Добавить(ВыборкаВидовОтчетов.ВидОтчета);
			КонецЕсли;

			НоваяСтрока = ИтоговаяТаблица.Добавить();
			НоваяСтрока.Организация = ВыборкаОрганизаций.Организация;
			НоваяСтрока.ВидОтчета   = ВыборкаВидовОтчетов.ВидОтчета;
			
			ВыборкаНастроек = ВыборкаВидовОтчетов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			ТипБД     = Неопределено;
			ВИБ        = Неопределено;
			ТипБД_ВИБ = Неопределено;

			Пока ВыборкаНастроек.Следующий() Цикл
				Выборка = ВыборкаНастроек.Выбрать();
				
				Если Выборка.Следующий() Тогда
					
					НоваяСтрока.ВерсияОрганизационнойСтруктуры = Выборка.ВерсияОрганизационнойСтруктуры;
					НоваяСтрока.ДокументБД   = Выборка.ДокументБД;
					
					Если ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта Тогда
						
						НоваяСтрока["БланкДляИмпорта"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
							
						Если НЕ ЗначениеЗаполнено(Выборка.ЗначениеЭлементаНастройкиОтчета) Тогда
							НоваяСтрока.БланкДляИмпорта_РезультатПроверки = 2;
						ИначеЕсли НЕ Выборка.Утвержден Тогда
							НоваяСтрока.БланкДляИмпорта_РезультатПроверки = 2;
						ИначеЕсли Выборка.БланкДляОтображения Тогда
							НоваяСтрока.БланкДляИмпорта_РезультатПроверки = 1;
						Иначе
							НоваяСтрока.БланкДляИмпорта_РезультатПроверки = 0;
						КонецЕсли;
						
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения Тогда
						
						НоваяСтрока["БланкДляОтображения"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
						
						Если НЕ ЗначениеЗаполнено(Выборка.ЗначениеЭлементаНастройкиОтчета) Тогда
							НоваяСтрока.БланкДляОтображения_РезультатПроверки = 0;
						ИначеЕсли Выборка.Утвержден Тогда
							НоваяСтрока.БланкДляОтображения_РезультатПроверки = 0;
						Иначе
							НоваяСтрока.БланкДляОтображения_РезультатПроверки = 2;
							ЕстьОшибки = Истина;
						КонецЕсли;
						
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки Тогда
						
						НоваяСтрока["ПравилоОбработки"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
						
						Если НЕ ЗначениеЗаполнено(Выборка.ЗначениеЭлементаНастройкиОтчета) Тогда
							НоваяСтрока.ПравилоОбработки_РезультатПроверки = 2;
							ЕстьОшибки = Истина;
						ИначеЕсли Выборка.Утвержден Тогда
							НоваяСтрока.ПравилоОбработки_РезультатПроверки = 0;
						Иначе
							НоваяСтрока.ПравилоОбработки_РезультатПроверки = 2;
							ЕстьОшибки = Истина;
						КонецЕсли;
						
						ТипБД = Выборка.ТипБД;
						
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ПравилоИмпортаОбъекта Тогда
						
						НоваяСтрока["ПравилоИмпортаОбъекта"] = Выборка.ЗначениеЭлементаНастройкиОтчета;						
						ТипБД = Выборка.ТипБД;						
						
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ШаблонТрансляции Тогда
						
						НоваяСтрока["ШаблонТрансляции"] = Выборка.ЗначениеЭлементаНастройкиОтчета;						
								
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки Тогда
						НоваяСтрока["ПравилоПроверки"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
						
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза Тогда
						НоваяСтрока["ВнешняяИнформационнаяБаза"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
						
						ТипБД_ВИБ = Выборка.ТипБД_ВнешняяИБ;
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета Тогда
						НоваяСтрока["СпособФормированияОтчета"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
					ИначеЕсли ВыборкаНастроек.ЭлементНастройкиОтчета = Перечисления.ЭлементыНастройкиОтчета.Периодичность Тогда
						НоваяСтрока["Периодичность"] = Выборка.ЗначениеЭлементаНастройкиОтчета;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НоваяСтрока.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.Импорт
				И ЗначениеЗаполнено(ТипБД_ВИБ)
				И ТипБД_ВИБ.Предопределенный Тогда
				
				ЕстьОшибки = НоваяСтрока.БланкДляИмпорта_РезультатПроверки <> 0;
				
			Иначе
				
				НоваяСтрока.БланкДляИмпорта_РезультатПроверки = 0;
				
			КонецЕсли;
			
			Если НоваяСтрока.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.Импорт Тогда
			
				Если Не ЗначениеЗаполнено(НоваяСтрока.ВнешняяИнформационнаяБаза) Тогда
					НоваяСтрока.ВнешняяИнформационнаяБаза_РезультатПроверки = 2;
					ЕстьОшибки = Истина;
				ИначеЕсли НЕ ТипБД_ВИБ.Предопределенный И ТипБД <> ТипБД_ВИБ Тогда
					НоваяСтрока.ВнешняяИнформационнаяБаза_РезультатПроверки = 1;
					ЕстьОшибки = Истина;
				Иначе
					НоваяСтрока.ВнешняяИнформационнаяБаза_РезультатПроверки = 0;
				КонецЕсли;
									
			КонецЕсли;
			
			НоваяСтрока["ПредставлениеСпособаФормированияОтчета"] = Обработки.НастройкаПараметровОтчетовПоУмолчанию.ВернутьПредставлениеСпособаФормированияОтчета(НоваяСтрока);

		КонецЦикла;
		
	КонецЦикла;
		
	Возврат ИтоговаяТаблица;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ КОНТЕКСТА И ЗАПИСИ ЗНАЧЕНИЙ ПОКАЗАТЕЛЕЙ ОТЧЕТОВ

Процедура ПересчитатьВалютныеПоказатели(Сценарий,ТаблицаИзмененныхКурсов) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаИзмененныхКурсов.Валюта КАК Валюта,
	|	ТаблицаИзмененныхКурсов.ПериодКурса КАК ПериодКурса,
	|	ТаблицаИзмененныхКурсов.ВидКурса КАК ВидКурса,
	|	ТаблицаИзмененныхКурсов.Отношение КАК Отношение
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	&ТаблицаИзмененныхКурсов КАК ТаблицаИзмененныхКурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсии,
	|	ТаблицаИзменений.Валюта КАК Валюта,
	|	ТаблицаИзменений.ВидКурса КАК ВидКурса,
	|	ТаблицаИзменений.Отношение КАК Отношение,
	|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
	|	ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте КАК ЗаписьВДополнительнойВалюте,
	|	ВерсииЗначенийПоказателей.Валюта КАК ОсновнаяВалюта,
	|	ВерсииЗначенийПоказателей.Организация КАК Организация,
	|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
	|	ВерсииЗначенийПоказателей.Проект КАК Проект,
	|	ВерсииЗначенийПоказателей.Аналитика1 КАК Аналитика1,
	|	ВерсииЗначенийПоказателей.Аналитика2 КАК Аналитика2,
	|	ВерсииЗначенийПоказателей.Аналитика3 КАК Аналитика3,
	|	ВерсииЗначенийПоказателей.Аналитика4 КАК Аналитика4,
	|	ВерсииЗначенийПоказателей.Аналитика5 КАК Аналитика5,
	|	ВерсииЗначенийПоказателей.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ВерсииЗначенийПоказателей
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений
	|		ПО ВерсииЗначенийПоказателей.ПериодОтчета = ТаблицаИзменений.ПериодКурса
	|			И (ВерсииЗначенийПоказателей.Сценарий = &Сценарий)
	|			И (ВерсииЗначенийПоказателей.ЧерноваяВерсия = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик КАК ЧислоАналитик,
	|	ПоказателиОтчетов.ГруппаРаскрытия.Валютная КАК Валютная,
	|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоАналитикВидаОтчета,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога
	|ПОМЕСТИТЬ ПоказателиОтчетов
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Валютный
	|	И ПоказателиОтчетов.ПересчитыватьВалютнуюСумму
	|	И НЕ ПоказателиОтчетов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Версия КАК Версия,
	|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
	|	ВерсииЗначенийПоказателей.ВидКурса КАК ВидКурса,
	|	ВерсииЗначенийПоказателей.Отношение КАК Отношение,
	|	ВерсииЗначенийПоказателей.ОписаниеВерсии КАК ОписаниеВерсии,
	|	ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте КАК ЗаписьВДополнительнойВалюте,
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	|	ПоказателиОтчетов.ЧислоАналитик КАК ЧислоАналитик,
	|	ПоказателиОтчетов.Валютная КАК Валютная,
	|	ПоказателиОтчетов.ЧислоАналитикВидаОтчета КАК ЧислоАналитикВидаОтчета,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
	|	ВерсииЗначенийПоказателей.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	ВерсииЗначенийПоказателей.Организация КАК Организация,
	|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
	|	ВерсииЗначенийПоказателей.Проект КАК Проект,
	|	ВерсииЗначенийПоказателей.Аналитика1 КАК Аналитика1,
	|	ВерсииЗначенийПоказателей.Аналитика2 КАК Аналитика2,
	|	ВерсииЗначенийПоказателей.Аналитика3 КАК Аналитика3,
	|	ВерсииЗначенийПоказателей.Аналитика4 КАК Аналитика4,
	|	ВерсииЗначенийПоказателей.Аналитика5 КАК Аналитика5,
	|	ВерсииЗначенийПоказателей.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ДанныеДляПересчета
	|ИЗ
	|	ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ВерсииЗначенийПоказателей.ВидКурса = ПоказателиОтчетов.ВидКурса
	|			И ВерсииЗначенийПоказателей.ВидОтчета = ПоказателиОтчетов.ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляПересчета.Версия КАК Версия,
	|	ДанныеДляПересчета.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеДляПересчета.ЧислоАналитик КАК ЧислоАналитик,
	|	ДанныеДляПересчета.ЧислоАналитикВидаОтчета КАК ЧислоАналитикВидаОтчета,
	|	ДанныеДляПересчета.ВидИтога КАК ВидИтога
	|ИЗ
	|	ДанныеДляПересчета КАК ДанныеДляПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДляПересчета.Версия КАК Версия,
	|	ДанныеДляПересчета.ОписаниеВерсии КАК ОписаниеВерсии,
	|	ДанныеДляПересчета.Валюта КАК Валюта,
	|	ДанныеДляПересчета.ВидКурса КАК ВидКурса,
	|	ДанныеДляПересчета.Отношение КАК Отношение,
	|	ДанныеДляПересчета.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеДляПересчета.ЧислоАналитик КАК ЧислоАналитик,
	|	ДанныеДляПересчета.Валютная КАК Валютная,
	|	ДанныеДляПересчета.ЧислоАналитикВидаОтчета КАК ЧислоАналитикВидаОтчета,
	|	ДанныеДляПересчета.ВидИтога КАК ВидИтога
	|ИЗ
	|	ДанныеДляПересчета КАК ДанныеДляПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеДляПересчета.ВидОтчета КАК ВидОтчета,
	|	ДанныеДляПересчета.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	ДанныеДляПересчета.Организация КАК Организация,
	|	ДанныеДляПересчета.ПериодОтчета КАК ПериодОтчета,
	|	ДанныеДляПересчета.Сценарий КАК Сценарий,
	|	ДанныеДляПересчета.Проект КАК Проект,
	|	ДанныеДляПересчета.Аналитика1 КАК Аналитика1,
	|	ДанныеДляПересчета.Аналитика2 КАК Аналитика2,
	|	ДанныеДляПересчета.Аналитика3 КАК Аналитика3,
	|	ДанныеДляПересчета.Аналитика4 КАК Аналитика4,
	|	ДанныеДляПересчета.Аналитика5 КАК Аналитика5,
	|	ДанныеДляПересчета.Аналитика6 КАК Аналитика6
	|ИЗ
	|	ДанныеДляПересчета КАК ДанныеДляПересчета
	|ГДЕ
	|	НЕ ДанныеДляПересчета.ЗаписьВДополнительнойВалюте";
	
	Запрос.УстановитьПараметр("ТаблицаИзмененныхКурсов",ТаблицаИзмененныхКурсов);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	РезультатВыполнения = Запрос.ВыполнитьПакет();
	
	Результат=РезультатВыполнения[5].Выбрать();
	
	СоответствиеВерсий=Новый Соответствие;
	СоответствиеОписаний=Новый Соответствие;
	
	ДатаИзмененияMs=ТекущаяУниверсальнаяДатаВМиллисекундах();	
	
	ДанныеЗаписи=Новый Структура;
	ДанныеЗаписи.Вставить("ПоследнийРедактировавший",ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	ДанныеЗаписи.Вставить("ДатаИзмененияMs",ДатаИзмененияMs);
	ДанныеЗаписи.Вставить("ДатаИзменения",ТекущаяДата());
	
	ДанныеВерсии=Новый Структура;
	ДанныеВерсии.Вставить("Автор",ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	ДанныеЗаписи.Вставить("ДатаИзмененияMs",ДатаИзмененияMs);
	ДанныеЗаписи.Вставить("Дата",ТекущаяДата());

	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		ЧислоАналитикГруппыРаскрытия=Результат.ЧислоАналитикВидаОтчета+Результат.ЧислоАналитик;
		
		Если ЧислоАналитикГруппыРаскрытия=0 Тогда
			
			ИмяТаблицыАналитики="ЗначенияПоказателейОтчетовВалютные";
			
		Иначе
			
			ИмяТаблицыАналитики="ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппыРаскрытия;
			
		КонецЕсли;
		
		Если НЕ Справочники.ВерсииЗначенийПоказателей.ПроверитьВозможностьИзмененияДанныхВерсии(Результат.Версия) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
				
		НаборЗаписей=РегистрыСведений[ИмяТаблицыАналитики].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Результат.Версия);
		НаборЗаписей.Отбор.Показатель.Установить(Результат.ПоказательОтчета);
		НаборЗаписей.Отбор.АналитикаВалюта.Установить(Результат.Валюта);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого Строка ИЗ НаборЗаписей Цикл
			
			Строка.Значение=Окр(Строка.Значение*Результат.Отношение,2);

		КонецЦикла;		
		
		НаборЗаписей.Записать();
				
	КонецЦикла;
	
	СводныйПересчет=РезультатВыполнения[4].Выбрать();
	МассивПересчитанных=Новый Массив;
	
	Пока СводныйПересчет.Следующий() Цикл
		
		Если НЕ Справочники.ВерсииЗначенийПоказателей.ПроверитьВозможностьИзмененияДанныхВерсии(СводныйПересчет.Версия) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
		ЧислоАналитикГруппыРаскрытия=СводныйПересчет.ЧислоАналитикВидаОтчета+СводныйПересчет.ЧислоАналитик;
		
		Если ЧислоАналитикГруппыРаскрытия=0 Тогда
			
			ИмяТаблицыАналитики="ЗначенияПоказателейОтчетовВалютные";
			
		Иначе
			
			ИмяТаблицыАналитики="ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппыРаскрытия;
			
		КонецЕсли;
		
		СтруктураИтога=ОбщегоНазначенияУХ.ВернутьСтруктуруИтога(СводныйПересчет.ВидИтога,Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		
		Если СтруктураИтога=Неопределено Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЗапросРаскрытие=Новый Запрос;
		ЗапросРаскрытие.Текст="ВЫБРАТЬ
		|"+СтруктураИтога.ТекстИтога+"(ТаблицаАналитики.Значение) КАК Значение
		|ИЗ РегистрСведений."+ИмяТаблицыАналитики+" КАК ТаблицаАналитики
		|ГДЕ ТаблицаАналитики.Версия=&Версия
		|И ТаблицаАналитики.Показатель=&Показатель";
		
		ЗапросРаскрытие.УстановитьПараметр("Версия",СводныйПересчет.Версия);
		ЗапросРаскрытие.УстановитьПараметр("Показатель",СводныйПересчет.ПоказательОтчета);
		
		ДанныеИтога=ЗапросРаскрытие.Выполнить().Выбрать();
		
		Если ДанныеИтога.Следующий() Тогда
			
			ИмяТаблицыСинтетики=?(СводныйПересчет.ЧислоАналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+СводныйПересчет.ЧислоАналитикВидаОтчета);
			
			НаборЗаписей=РегистрыСведений[ИмяТаблицыСинтетики].СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Версия.Установить(СводныйПересчет.Версия);
			НаборЗаписей.Отбор.Показатель.Установить(СводныйПересчет.ПоказательОтчета);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество()=1 Тогда
				
				НаборЗаписей[0].Значение = ДанныеИтога.Значение;
				
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		МассивПересчитанных.Добавить(СводныйПересчет.ПоказательОтчета);
			
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ВерсииДляПересчета=РезультатВыполнения[6].Выгрузить();
		
		СтруктураОбъекта=Новый Структура("ВидОтчета,Организация,ПериодОтчета,Сценарий,Проект,ОсновнаяВалюта");
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураОбъекта.Вставить("Аналитика"+Индекс);
			
		КонецЦикла;
					
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|ДанныеДляПересчета.ПоказательОтчета
		|ИЗ ДанныеДляПересчета КАК ДанныеДляПересчета
		|	ГДЕ ДанныеДляПересчета.ВидОтчета=&ВидОтчета
		|	И ДанныеДляПересчета.ОсновнаяВалюта=&ОсновнаяВалюта
		|	И ДанныеДляПересчета.Организация=&Организация
		|	И ДанныеДляПересчета.ПериодОтчета=&ПериодОтчета
		|	И ДанныеДляПересчета.Сценарий=&Сценарий
		|	И ДанныеДляПересчета.Проект=&Проект";
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Запрос.Текст=Запрос.Текст+"
			
			|И ДанныеДляПересчета.Аналитика"+Индекс+"=&Аналитика"+Индекс;
			
		КонецЦикла;
			
		Для Каждого СтрокаВерсия ИЗ ВерсииДляПересчета Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОбъекта,СтрокаВерсия);
			
			Для Каждого КлючИЗначение ИЗ СтруктураОбъекта Цикл
				
				Запрос.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЦикла;
			
			МассивПоказателей=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПоказательОтчета");	
			РасширениеИнтеграцииУХ.РассчитатьЗависимыеПоказателиОтчетов(Новый Структура("МассивИзмененныхПоказателей,ЧтениеНеактуальныхЗаписей,ДатаИзмененияMs",МассивПоказателей,Истина,ТекущаяУниверсальнаяДатаВМиллисекундах()),СтруктураОбъекта);
						
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
	
	ПересчитатьПоказателиВДополнительныхВалютах(Сценарий,ТаблицаИзмененныхКурсов,МассивПересчитанных);
	
	// Пересчитать ресурс СуммаУпр регистра накопления ОперативныйПланПоБюджетам
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ПараметрыМетода = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Сценарий);
		ПараметрыМетода.Добавить(ТаблицаИзмененныхКурсов);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации(
			"РегистрыНакопления.ОперативныйПланПоБюджетам.ПриПересчетеВалютныхПоказателей",
			ПараметрыМетода);
	КонецЕсли;
				
КонецПроцедуры // ПересчитатьВалютныеПоказатели() 

Функция ПолучитьНовуюВерсию(Результат,СоответствиеОписаний,СоответствиеВерсий,ДанныеВерсии)
	
	ОписаниеВерсии=СоответствиеОписаний.Получить(Результат.ОписаниеВерсии);
	
	Если ОписаниеВерсии=Неопределено Тогда
		
		ОписаниеОбъект=Результат.ОписаниеВерсии.Скопировать();
		ОписаниеОбъект.ПересчетПриИзмененииКурсов=Истина;
		
		ЗаполнитьЗначенияСвойств(ОписаниеОбъект,ДанныеВерсии);
		
		ОписаниеОбъект.Записать();
		
		ОписаниеВерсии=ОписаниеОбъект.Ссылка;
		
		СоответствиеОписаний.Вставить(Результат.ОписаниеВерсии,ОписаниеВерсии);
		
		новаяВерсия=Результат.Версия.Скопировать();
		НоваяВерсия.Владелец=ОписаниеВерсии;
		НоваяВерсия.Комментарий=СформироватьКомментарийПриПересчетеКурса(Результат);
		
		ЗаполнитьЗначенияСвойств(НоваяВерсия,ДанныеВерсии);
		
		НоваяВерсия.Записать();
		
		СоответствиеВерсий.Вставить(Результат.Версия,НоваяВерсия.Ссылка);
		Возврат НоваяВерсия.Ссылка;
		
	Иначе
		
		НоваяВерсия=СоответствиеВерсий.Получить(Результат.Версия);
		
		Если НоваяВерсия=Неопределено Тогда
			
			НоваяВерсия=Результат.Версия.Скопировать();
			НоваяВерсия.Владелец=ОписаниеВерсии;
			НоваяВерсия.Комментарий=СформироватьКомментарийПриПересчетеКурса(Результат);
			
			ЗаполнитьЗначенияСвойств(НоваяВерсия,ДанныеВерсии);
			
			НоваяВерсия.Записать();
			
			СоответствиеВерсий.Вставить(Результат.Версия,НоваяВерсия.Ссылка);
			Возврат НоваяВерсия.Ссылка;
			
		Иначе
			
			Возврат НоваяВерсия;
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецФункции // ПолучитьНовуюВерсию 

Функция СформироватьКомментарийПриПересчетеКурса(Результат)
	
	Возврат СтрШаблон(Нстр("ru = 'Пересчет при изменении курса %1 валюты %2 на '"),Результат.ВидКурса,Результат.Валюта)+Формат(Результат.Отношение*100,"ЧДЦ=2")+"%";
	
КонецФункции // СформироватьКомментарийПриПересчетеКурса()
	

Процедура ПересчитатьПоказателиВДополнительныхВалютах(Сценарий,ТаблицаИзмененныхКурсов,МассивПересчитанных) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаИзмененныхКурсов.Валюта КАК Валюта,
	|	ТаблицаИзмененныхКурсов.ПериодКурса КАК ПериодКурса,
	|	ТаблицаИзмененныхКурсов.ВидКурса КАК ВидКурса,
	|	ТаблицаИзмененныхКурсов.Отношение КАК Отношение
	|ПОМЕСТИТЬ ТаблицаИзменений
	|ИЗ
	|	&ТаблицаИзмененныхКурсов КАК ТаблицаИзмененныхКурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	|	ТаблицаИзменений.Валюта КАК Валюта,
	|	ТаблицаИзменений.ВидКурса КАК ВидКурса,
	|	ТаблицаИзменений.Отношение КАК Отношение,
	|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
	|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсии
	|ПОМЕСТИТЬ ВерсииЗначенийПоказателей
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаИзменений КАК ТаблицаИзменений
	|		ПО ВерсииЗначенийПоказателей.ПериодОтчета = ТаблицаИзменений.ПериодКурса
	|			И ВерсииЗначенийПоказателей.Валюта = ТаблицаИзменений.Валюта
	|			И (ВерсииЗначенийПоказателей.Сценарий = &Сценарий)
	|			И (ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте)
	|			И (ВерсииЗначенийПоказателей.ЧерноваяВерсия = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
	|	ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоАналитикВидаОтчета,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета
	|ПОМЕСТИТЬ ПоказателиОтчетов
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	НЕ(ПоказателиОтчетов.ПометкаУдаления
	|				ИЛИ ПоказателиОтчетов.Ссылка В (&МассивПересчитанных))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Версия КАК Версия,
	|	ВерсииЗначенийПоказателей.Отношение КАК Отношение,
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	|	ПоказателиОтчетов.ЧислоАналитикВидаОтчета КАК ЧислоАналитикВидаОтчета,
	|	ВерсииЗначенийПоказателей.ВидКурса КАК ВидКурса,
	|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
	|	ВерсииЗначенийПоказателей.ОписаниеВерсии КАК ОписаниеВерсии
	|ИЗ
	|	ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ВерсииЗначенийПоказателей.ВидКурса = ПоказателиОтчетов.ВидКурса
	|			И ВерсииЗначенийПоказателей.ВидОтчета = ПоказателиОтчетов.ВидОтчета";
	
	Запрос.УстановитьПараметр("ТаблицаИзмененныхКурсов",ТаблицаИзмененныхКурсов);
	Запрос.УстановитьПараметр("Сценарий",				Сценарий);
	Запрос.УстановитьПараметр("МассивПересчитанных",	МассивПересчитанных);

	Результат=Запрос.Выполнить().Выбрать();
	
	СоответствиеВерсий=Новый Соответствие;
	СоответствиеОписаний=Новый Соответствие;
	ДатаИзмененияMs=ТекущаяУниверсальнаяДатаВМиллисекундах();
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ Справочники.ВерсииЗначенийПоказателей.ПроверитьВозможностьИзмененияДанныхВерсии(Результат.Версия) Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
				
		ТаблицаСинтетики=?(Результат.ЧислоАналитикВидаОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+Результат.ЧислоАналитикВидаОтчета);
		ИзменитьЗаписиРегистраВДополнительнойВалюте(ТаблицаСинтетики,Результат);
		
		ИзменитьЗаписиРегистраВДополнительнойВалюте("ЗначенияПоказателейОтчетовВалютные",Результат);
		
		Для Индекс=Результат.ЧислоАналитикВидаОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ИзменитьЗаписиРегистраВДополнительнойВалюте("ЗначенияПоказателейОтчетов"+Индекс,Результат);
			
		КонецЦикла;
		
	КонецЦикла;
			
	ЗафиксироватьТранзакцию();
					
КонецПроцедуры // ПересчитатьПоказателиВДополнительныхВалютах() 

Процедура ИзменитьЗаписиРегистраВДополнительнойВалюте(ИмяРегистра,Результат)
	
	НаборЗаписей=РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Версия.Установить(Результат.Версия);
	НаборЗаписей.Отбор.Показатель.Установить(Результат.ПоказательОтчета);
	
	НаборЗаписей.Прочитать();
	
	Для Каждого Строка ИЗ НаборЗаписей Цикл
		
		Строка.Значение=Окр(Строка.Значение/Результат.Отношение,2);
		
	КонецЦикла;		
	
	НаборЗаписей.Записать();

КонецПроцедуры // ИзменитьЗаписиРегистраВДополнительнойВалюте  

Функция ВернутьАналитикуВГО(ОбъектРасчета,КэшГруппРаскрытия, ГруппаРаскрытия)
	
	Если КэшГруппРаскрытия[ГруппаРаскрытия] = Неопределено Тогда
				
		АналитикаВГО=ГруппаРаскрытия.АналитикаВГО;
		
		КэшГруппРаскрытия.Вставить(ГруппаРаскрытия, АналитикаВГО);
		Возврат АналитикаВГО;
		
	Иначе
		
		Возврат КэшГруппРаскрытия[ГруппаРаскрытия];
		
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,ИмяРабочейТаблицы,СтрокаЗаписи,СтрокаПоказатель=Неопределено) Экспорт
	
	Если СтрокаПоказатель=Неопределено Тогда
		
		ОбъектРасчета.Свойство("СтрокаПоказатель",СтрокаПоказатель);
		
	КонецЕсли;
	
	Если СтрокаПоказатель=Неопределено Тогда
		
		КлючНабораЗаписей=ИмяРабочейТаблицы;
		
	Иначе
		
		КлючНабораЗаписей=ИмяРабочейТаблицы+"_"+СтрокаПоказатель.Код;
		
	КонецЕсли;
		
	ВерсииНабора=мСоответствиеНаборовЗаписей[КлючНабораЗаписей];
	
	Если ВерсииНабора=Неопределено Тогда
		
		ВерсииНабора=Новый Соответствие;
		
		НаборЗаписей=РегистрыСведений[ИмяРабочейТаблицы].СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(СтрокаЗаписи.Версия);
		
		Если НЕ СтрокаПоказатель=Неопределено Тогда
			
			НаборЗаписей.Отбор.Показатель.Установить(СтрокаПоказатель.Ссылка);
			
		КонецЕсли;
		
		НаборЗаписей.ОбменДанными.Загрузка=Истина;
		
		КлючВерсииНабора=?(СтрокаПоказатель=Неопределено,СтрокаЗаписи.Версия,СтрокаПоказатель.Код+"_"+КэшируемыеПроцедурыУХ.ПолучитьНомерВерсии(СтрокаЗаписи.Версия));
		
		ВерсииНабора.Вставить(КлючВерсииНабора,НаборЗаписей);
		
		мСоответствиеНаборовЗаписей.Вставить(КлючНабораЗаписей,ВерсииНабора);
		
	Иначе
		
		КлючВерсииНабора=?(СтрокаПоказатель=Неопределено,СтрокаЗаписи.Версия,СтрокаПоказатель.Код+"_"+КэшируемыеПроцедурыУХ.ПолучитьНомерВерсии(СтрокаЗаписи.Версия));
		
		НаборЗаписей=ВерсииНабора[КлючВерсииНабора];
		
		Если НаборЗаписей=Неопределено Тогда
			
			НаборЗаписей=РегистрыСведений[ИмяРабочейТаблицы].СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.Версия.Установить(СтрокаЗаписи.Версия);
			
			Если НЕ СтрокаПоказатель=Неопределено Тогда
				
				НаборЗаписей.Отбор.Показатель.Установить(СтрокаПоказатель.Ссылка);
				
			КонецЕсли;
			
			НаборЗаписей.ОбменДанными.Загрузка=Истина;
			
			ВерсииНабора.Вставить(КлючВерсииНабора,НаборЗаписей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ((СтрокаЗаписи.Значение=0 И ОбъектРасчета.мНеЧисловыеПоказатели.Найти(СтрокаЗаписи.Показатель) = Неопределено)
		ИЛИ СтрокаЗаписи.Значение=Неопределено)
			И (НЕ СтрокаЗаписи.ИтоговоеЗначение) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Движение = НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение, СтрокаЗаписи);
	
	Движение.ПравилоОбработки			= ОбъектРасчета.ПравилоОбработки;
	Движение.ИспользуемаяИБ				= ОбъектРасчета.ИспользуемаяИБ;
	Движение.ДатаИзменения				= ОбъектРасчета.ДатаИзменения;
	Движение.ПоследнийРедактировавший 	= ОбъектРасчета.ПоследнийРедактировавший;
	Движение.СпособФормированияОтчета 	= ОбъектРасчета.СпособФормированияОтчета;
	Движение.ДатаИзмененияMs            = ОбъектРасчета.ДатаИзмененияMs;
	
	// Для независимого регистра все равно должны быть заполнены поля Активность и Регистратор.
	Движение.Активность=Истина;
	Движение.Регистратор=СтрокаЗаписи.Версия;
	
КонецПроцедуры

Процедура ЗаписатьНечисловыеПоказатели(ОбъектРасчета,мСоответствиеНаборовЗаписей,Версия, МассивНовыхВалют, Пок, СоответствиеВерсийИВалют) Экспорт
    
    СтрокаЗаписи = Новый Структура;
    
    Для Каждого НечисловойПоказатель Из ОбъектРасчета.мНеЧисловыеПоказатели Цикл
        
        Пок = ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[НечисловойПоказатель];
        
        СтрокаЗаписи.Очистить();
        СтрокаЗаписи.Вставить("Показатель", 		НеЧисловойПоказатель);
        СтрокаЗаписи.Вставить("Версия", 			Версия);
        СтрокаЗаписи.Вставить("ИтоговоеЗначение",	Истина);
        СтрокаЗаписи.Вставить("Значение", 			Пок.Значение);
		
		ОбъектРасчета.МассивИзмененныхПоказателей.Добавить(НеЧисловойПоказатель);
		
        ЗаполнитьСтруктуруАналитик(ОбъектРасчета,СтрокаЗаписи, Пок, Истина);
        ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,?(ОбъектРасчета.АнализЧувствительности,"ЗначенияПоказателейМоделированиеНечисловые","ЗначенияПоказателейОтчетовНечисловые"),СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
        
        Раскрытия = ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Показатель", НечисловойПоказатель));
        СтрокаЗаписи.Вставить("ИтоговоеЗначение", Ложь);
        
        Для Каждого Раскрытие Из Раскрытия Цикл
            СтрокаЗаписи.Вставить("Значение", Раскрытие.Значение);
            ЗаполнитьСтруктуруАналитик(ОбъектРасчета,СтрокаЗаписи, Раскрытие, Ложь);
            ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,?(ОбъектРасчета.АнализЧувствительности,"ЗначенияПоказателейМоделированиеНечисловые","ЗначенияПоказателейОтчетовНечисловые"),СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
        КонецЦикла;
          
        Для Каждого Строка Из СоответствиеВерсийИВалют Цикл
            
            Если МассивНовыхВалют.Найти(Строка.Ключ) = Неопределено Тогда
				
				СтрокаЗаписи.Очистить();
				
				СтрокаЗаписи.Вставить("Показатель", 		НеЧисловойПоказатель);
                СтрокаЗаписи.Вставить("Версия", 			Строка.Значение);
                СтрокаЗаписи.Вставить("ИтоговоеЗначение",	Истина);
                СтрокаЗаписи.Вставить("Значение", 			Пок.Значение);
								
				ЗаполнитьСтруктуруАналитик(ОбъектРасчета,СтрокаЗаписи, Пок, Истина);
				ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,?(ОбъектРасчета.АнализЧувствительности, "ЗначенияПоказателейМоделированиеНечисловые", "ЗначенияПоказателейОтчетовНечисловые"), СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
                
                Для Каждого Раскрытие Из Раскрытия Цикл
					
					ЗаполнитьСтруктуруАналитик(ОбъектРасчета,СтрокаЗаписи, Раскрытие, Ложь);
                    СтрокаЗаписи.Вставить("Значение", Раскрытие.Значение);
										
                    СтрокаЗаписи.Вставить("ИтоговоеЗначение", Ложь);
                    ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,?(ОбъектРасчета.АнализЧувствительности,"ЗначенияПоказателейМоделированиеНечисловые","ЗначенияПоказателейОтчетовНечисловые"), СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
					
				КонецЦикла;
            КонецЕсли;
            
        КонецЦикла;
        
    КонецЦикла;

КонецПроцедуры

Функция ПолучитьОписаниеВерсии(ОбъектРасчета) Экспорт
	
	Перем ИдентификаторСеанса;
	Перем ЧерноваяВерсия;
	Перем Регистратор;
	Перем ЭкземплярОтчета; 
		
	ОбъектРасчета.Свойство("ИдентификаторСеанса",			ИдентификаторСеанса);
	ОбъектРасчета.Свойство("ЧерноваяВерсия",				ЧерноваяВерсия);
	ОбъектРасчета.Свойство("Регистратор",					Регистратор);
	ОбъектРасчета.Свойство("ЭкземплярОтчета",				ЭкземплярОтчета);
	
	ДанныеПериода=Документы.НастраиваемыйОтчет.ПолучитьДанныеПериода(ОбъектРасчета.Сценарий,ОбъектРасчета.ПериодОтчета,ОбъектРасчета.Организация);
	
	УправлениеПериодом=ДанныеПериода.УправлениеПериодом;
	
	Если НЕ ЗначениеЗаполнено(УправлениеПериодом) Тогда
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Невозможно определить документ управления периодами сценария для организации %1, периода %2 и сценария %3'"),
				ОбъектРасчета.Организация,
				ОбъектРасчета.ПериодОтчета,
				ОбъектРасчета.Сценарий);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат Неопределено;
		
	КонецЕсли;
			
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ОписаниеВерсий.Ссылка
	|ИЗ
	|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
	|ГДЕ
	|	НЕ ОписаниеВерсий.ПометкаУдаления
	|	И ОписаниеВерсий.Организация = &Организация
	|	И ОписаниеВерсий.ВидОтчета = &ВидОтчета
	|	И ОписаниеВерсий.УправлениеПериодом = &УправлениеПериодом";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|И ОписаниеВерсий.Аналитика"+Индекс+" = &Аналитика"+Индекс;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Организация",	ОбъектРасчета.Организация);
	Запрос.УстановитьПараметр("ВидОтчета",		ОбъектРасчета.ВидОтчета);
	Запрос.УстановитьПараметр("УправлениеПериодом",	УправлениеПериодом);
	
	Если ОбъектРасчета.РазделениеПоПроектам Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОписаниеВерсий.Проект = &Проект";
		Запрос.УстановитьПараметр("Проект",ОбъектРасчета.Проект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторСеанса) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОписаниеВерсий.ИдентификаторСеанса = &ИдентификаторСеанса";
		Запрос.УстановитьПараметр("ИдентификаторСеанса",ИдентификаторСеанса);
		
	КонецЕсли;
	
	Если ЧерноваяВерсия=Истина Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОписаниеВерсий.ЧерноваяВерсия";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|И НЕ ОписаниеВерсий.ЧерноваяВерсия";
		
	КонецЕсли;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ОбъектРасчета.Свойство("Аналитика"+Индекс) Тогда
			
			Запрос.УстановитьПараметр("Аналитика"+Индекс,ОбъектРасчета["Аналитика"+Индекс]);
			
		Иначе
			
			Запрос.УстановитьПараметр("Аналитика"+Индекс,Неопределено);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Регистратор) 
		И ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом()
		И ЭтоДокументКорректировки(Регистратор) Тогда
		
	    Запрос.Текст=Запрос.Текст+"
		|И ОписаниеВерсий.Регистратор=&Регистратор";
		
		Запрос.УстановитьПараметр("Регистратор",Регистратор);
	
	ИначеЕсли ОбъектРасчета.СохранятьИсториюИзменений И (НЕ ЗначениеЗаполнено(ИдентификаторСеанса)) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ОписаниеВерсий.ДатаИзмененияMs=&ДатаИзмененияMs";
		
		Запрос.УстановитьПараметр("ДатаИзмененияMs",ОбъектРасчета.ДатаИзмененияMs);
		
	КонецЕсли;

	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	КонецЕсли;
				
	ОписаниеВерсии = Справочники.ОписаниеВерсий.СоздатьЭлемент();
	
	Попытка
		
		ОписаниеВерсии.ЭкземплярОтчета 			=   ЭкземплярОтчета;
		ОписаниеВерсии.Регистратор 				=   Регистратор;
		ОписаниеВерсии.ИдентификаторСеанса 		= 	ИдентификаторСеанса;
		ОписаниеВерсии.ЧерноваяВерсия 			=   ЧерноваяВерсия;
		ОписаниеВерсии.Организация     			= 	ОбъектРасчета.Организация;
		ОписаниеВерсии.ВидОтчета       			=	ОбъектРасчета.ВидОтчета;
		ОписаниеВерсии.УправлениеПериодом    	= 	УправлениеПериодом;
				
		Если ОбъектРасчета.РазделениеПоПроектам Тогда
			ОписаниеВерсии.Проект        		= 	ОбъектРасчета.Проект;
		Конецесли;
		
		ОписаниеВерсии.Автор 					= 	ОбъектРасчета.ПоследнийРедактировавший;
		ОписаниеВерсии.ДатаИзмененияMs			= 	ОбъектРасчета.ДатаИзмененияMs;
		ОписаниеВерсии.РучнаяОперация  			= 	?(ОбъектРасчета.СпособФормированияОтчета = Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение, 0, 1);
		ОписаниеВерсии.РежимКорректировки 		= ОбъектРасчета.РежимКорректировки;
		ОписаниеВерсии.ВерсияХранимогоФайла		= ОбъектРасчета.ВерсияХранимогоФайла;
		
		Если ОбъектРасчета.Вариант <> Неопределено Тогда
			ОписаниеВерсии.Вариант         = ОбъектРасчета.Вариант;
		КонецЕсли;
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ОбъектРасчета.Свойство("Аналитика"+Индекс,ОписаниеВерсии["Аналитика"+Индекс]);
			
		КонецЦикла; 
		
		ОписаниеВерсии.Дата        = ТекущаяДата();
		ОписаниеВерсии.Записать();

	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка при создании описания версий показателей: %ОписаниеВерсии%
		|%ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеВерсии%", Строка(ОписаниеВерсии));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат ОписаниеВерсии.Ссылка;
			
КонецФункции // ПолучитьОписаниеВерсии()

Функция ЭтоДокументКорректировки(Регистратор) Экспорт	
	
	ТипРегистратора=ТипЗнч(Регистратор);
	
	МассивСтрокТипов=Новый Массив;
	МассивСтрокТипов.Добавить("ДокументСсылка.КорректировкаЗначенийПоказателей");
	МассивСтрокТипов.Добавить("ДокументСсылка.Трансляция");
	МассивСтрокТипов.Добавить("ДокументСсылка.ТрансформационнаяКорректировка");
	
	Для Каждого СтрТип ИЗ МассивСтрокТипов Цикл 
		
		Если ТипРегистратора=Тип(СтрТип) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции // ЭтоДокументКорректировки()

Функция ПолучитьРабочуюВерсию(ОбъектРасчета) Экспорт
			
	ОписаниеВерсии=ПолучитьОписаниеВерсии(ОбъектРасчета);
	
	Если ОписаниеВерсии=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ОбъектРасчета.Вставить("ОписаниеВерсии",ОписаниеВерсии);
		Возврат ПолучитьВерсию(ОбъектРасчета,Ложь,ОбъектРасчета.ОсновнаяВалюта, ОбъектРасчета.ОписаниеВерсии, ОбъектРасчета.АктивностьДвижений,Не ОбъектРасчета.СохранятьИсториюИзменений);
		
	КонецЕсли;	
				
КонецФункции // 

Функция ПолучитьТаблицуИзмененныхРаскрытий(ОбъектРасчета,МассивИзмененныхПоказателей) Экспорт
	
	Если ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Количество()=0 Тогда 
		
		Возврат ПолучитьПустуюТаблицуРаскрытия(ОбъектРасчета); 
		
	КонецЕсли;
	
	ЗапросРаскрытие=Новый Запрос;
	
	ЗапросРаскрытие.Текст="Выбрать мПоказатели.Ссылка, мПоказатели.ЧислоАналитикГруппыРаскрытия Поместить ИзмененныеПоказатели Из &мПоказатели КАК мПоказатели ГДЕ мПоказатели.ЗначениеИзменено И (НЕ мПоказатели.ГруппаРаскрытия=ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка))
	|;
	|ВЫБРАТЬ * Поместить ПоказателиРаскрытия ИЗ &мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ГДЕ мПоказателиРаскрытия.Показатель В (&МассивИзмененныхПоказателей)
	|;
	|ВЫБРАТЬ ИзмененныеПоказатели.Ссылка КАК Показатель,
	|(ИзмененныеПоказатели.ЧислоАналитикГруппыРаскрытия+&МаксАналитикОтчета) КАК ЧислоАналитикГруппыРаскрытия,";
	
	Для Каждого Колонка ИЗ ОбъектРасчета.мПоказателиРаскрытия.Колонки Цикл
		
		Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
			
			ЗапросРаскрытие.Текст=ЗапросРаскрытие.Текст+"
			|ПоказателиРаскрытия."+Колонка.Имя+",";
			
		КонецЕсли;
		
	КонецЦикла;
					
	ЗапросРаскрытие.Текст=ЗапросРаскрытие.Текст+"
	|ЕСТЬNULL(ПоказателиРаскрытия.Значение,Неопределено) КАК Значение,
	|ЕСТЬNULL(ПоказателиРаскрытия.ЗначениеВалюта,0) КАК ЗначениеВалюта
	|ИЗ ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиРаскрытия КАК ПоказателиРаскрытия
	|ПО ИзмененныеПоказатели.Ссылка=ПоказателиРаскрытия.Показатель";
	
	ЗапросРаскрытие.УстановитьПараметр("мПоказателиРаскрытия",ОбъектРасчета.мПоказателиРаскрытия);
	ЗапросРаскрытие.УстановитьПараметр("мПоказатели",ОбъектРасчета.мПоказатели);
	ЗапросРаскрытие.УстановитьПараметр("МаксАналитикОтчета",ОбъектРасчета.МаксАналитикОтчета);
	ЗапросРаскрытие.УстановитьПараметр("МассивИзмененныхПоказателей",МассивИзмененныхПоказателей);
	
	Возврат ЗапросРаскрытие.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуИзмененныхРаскрытий() 

Процедура ПроверитьВозможностьЗаписи(ОбъектРасчета,ТаблицаИзмененныхПоказателей,Отказ) Экспорт
	
	Перем ЧерноваяВерсия;
	
	ОбъектРасчета.Свойство("ЧерноваяВерсия",ЧерноваяВерсия);
	
	Если ЧерноваяВерсия=Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ШапкаОшибки=СтрШаблон(Нстр("ru = 'Организация: %1, сценарий: %2, период: %3
	|Запись данных не произведена по следующим причинам:'"), 
	            	ОбъектРасчета.Организация, ОбъектРасчета.Сценарий, ОбъектРасчета.ПериодОтчета);
	
	ПолныеПраваУХ.ПроверитьВозможностьЗаписиДокументовПоПериодуСценария(ОбъектРасчета.Сценарий,ОбъектРасчета.ПериодОтчета,ОбъектРасчета.Организация,Отказ,ШапкаОшибки);
	
	Если Отказ Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтборПоАналитикам = "";
	ЗначенияСтатусовПоказателейСинтетикаАналитика = "";
	ТаблицаИзмененныхПоказателейАналитика = "";
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ОбъектРасчета.ВидОтчета);	
	ТипХарактеристика = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
	
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		
		ИндАналитики = Строка(ИндексАналитики);
		ОтборПоАналитикам = ОтборПоАналитикам + "
	|			И ТаблицаИзмененныхПоказателей.Аналитика" + ИндАналитики + " = БлокировкаПоСостоянию.Аналитика" + ИндАналитики;
		
		ЗначенияСтатусовПоказателейСинтетикаАналитика = ЗначенияСтатусовПоказателейСинтетикаАналитика + ",
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		
		ТаблицаИзмененныхПоказателейАналитика = ТаблицаИзмененныхПоказателейАналитика + ",
	|	ТаблицаИзмененныхПоказателей.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
			
		Если ТаблицаИзмененныхПоказателей.Колонки.Найти("Аналитика" + ИндАналитики) = неопределено тогда
			ТаблицаИзмененныхПоказателей.Колонки.Добавить("Аналитика" + ИндАналитики, ТипХарактеристика);
		КонецЕсли;
	
	КонецЦикла;
	
	Если МаксАналитикОтчета > 0 тогда
		
		Для Каждого СтрокаИзмененныхПоказателей Из ТаблицаИзмененныхПоказателей Цикл
			
			Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
				ИндАналитики = Строка(ИндексАналитики);
				ОбъектРасчета.Свойство("Аналитика" + ИндАналитики, СтрокаИзмененныхПоказателей["Аналитика" + ИндАналитики]);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Запрос=Новый Запрос;	
	Запрос.Текст="ВЫБРАТЬ
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано,	
	|	ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния" + ЗначенияСтатусовПоказателейСинтетикаАналитика + "
	|ПОМЕСТИТЬ БлокировкаПоСостоянию
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|ГДЕ
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий = &Сценарий
	|	И (ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = &Организация ИЛИ ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница=ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И (ЗначенияСтатусовПоказателейСинтетика.Проект = &Проект ИЛИ ЗначенияСтатусовПоказателейСинтетика.Проект=ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка))
	|	И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета = &ПериодОтчета
	|	И (ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано >= 2
	|			ИЛИ ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ	
	|	ТаблицаИзмененныхПоказателей."+?(ТаблицаИзмененныхПоказателей.Колонки.Найти("Показатель")=Неопределено,"Ссылка","Показатель")+" КАК ПоказательОтчета" + ТаблицаИзмененныхПоказателейАналитика + "
	|ПОМЕСТИТЬ ТаблицаИзмененныхПоказателей
	|ИЗ
	|	&ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзмененныхПоказателей.ПоказательОтчета,
	|	БлокировкаПоСостоянию.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,
	|	БлокировкаПоСостоянию.ИндексСостояния КАК ИндексСостояния
	|ИЗ
	|	ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ БлокировкаПоСостоянию КАК БлокировкаПоСостоянию	
	|		ПО ТаблицаИзмененныхПоказателей.ПоказательОтчета = БлокировкаПоСостоянию.Показатель" + ОтборПоАналитикам;
				 
	Запрос.УстановитьПараметр("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
	Запрос.УстановитьПараметр("Организация",	ОбъектРасчета.Организация);
	Запрос.УстановитьПараметр("Сценарий",		ОбъектРасчета.Сценарий);
	Запрос.УстановитьПараметр("ПериодОтчета",	ОбъектРасчета.ПериодОтчета);
	Запрос.УстановитьПараметр("Проект",			?(ОбъектРасчета.Свойство("Проект"),ОбъектРасчета.Проект,Справочники.Проекты.ПустаяСсылка()));
	
	РезультатЗапроса=Запрос.Выполнить().Выбрать();
	
	ТекстОшибки="";
	
	Пока РезультатЗапроса.Следующий() Цикл
		
		ТекстОшибки=СтрШаблон(Нстр("ru = '%1,
		|показатель %2: '"), ТекстОшибки, РезультатЗапроса.ПоказательОтчета);
		
		Если РезультатЗапроса.ЗначениеЗаблокировано>0 Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1 значения заблокированы.'"), ТекстОшибки);
			
		КонецЕсли;
		
		Если РезультатЗапроса.ИндексСостояния = 3 Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1 данные утверждены.'"), ТекстОшибки);
			
		КонецЕсли;
		
	КонецЦикла;
			
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ТекстСообщения = НСтр("ru = 'Вид отчета %ВидОтчета%, %ШапкаОшибки% '");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ОбъектРасчета.ВидОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШапкаОшибки%", Строка(ШапкаОшибки));
		ТекстОшибки = ТекстСообщения + Сред(ТекстОшибки,2);	
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,Отказ,,СтатусСообщения.Важное);
				
	КонецЕсли;
	
КонецПроцедуры // ПроверитьВозможностьЗаписи() 

Процедура ЗаписатьПоказателиОтчетов(ОбъектРасчета,Отказ,ПроверятьВозможностьЗаписи=Истина) Экспорт
	
	Перем КэшТаблицыКурсов;
	Перем ТаблицаПоказателей;
	Перем ДеревоОтчетов;
	Перем ТекСоставПериметра;
	Перем КэшГруппРаскрытия;
			
	Если ОбъектРасчета.ПроверкаПриЗаписи Тогда
		
		ШапкаОшибки = СтрШаблон(Нстр("ru = '%1"" не может быть записан:'"), ОбъектРасчета.ПредставлениеОбъекта);
				
	КонецЕсли;
					
		мСоответствиеНаборовЗаписей=Новый Соответствие;
		
		Если НЕ ОбъектРасчета.Свойство("СохранятьИсториюИзменений") Тогда
			ОбъектРасчета.Вставить("СохранятьИсториюИзменений",	ОбъектРасчета.ВидОтчета.СохранятьИсториюИзменений);
		КонецЕсли;
		
		Если НЕ ОбъектРасчета.Свойство("ЧистоваяЗаписьДанных") Тогда
			ОбъектРасчета.Вставить("ЧистоваяЗаписьДанных",	Ложь);
		КонецЕсли;
		
		Если ОбъектРасчета.ЧистоваяЗаписьДанных Тогда	
			
			Если НЕ ЗначениеЗаполнено(ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации) Тогда
				ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации = Ложь;
			КонецЕсли;
			
		Иначе
			
			ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации = Истина;
			
		КонецЕсли;
		
		
		Если НЕ ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации Тогда
			
			Если НЕ ОбъектРасчета.Сценарий.АвтоматическоеРаспределениеВГО Тогда
				
				ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации = Истина;
				ТаблицаПоказателей = Неопределено;
				ДеревоОтчетов      = НЕопределено;
				ТекСоставПериметра = Неопределено;
				КэшГруппРаскрытия  = Неопределено;
				
			Иначе
				
				ИнициализироватьВнутригрупповыеОперации(ОбъектРасчета,ТаблицаПоказателей, ДеревоОтчетов, ТекСоставПериметра, КэшГруппРаскрытия);
				
			КонецЕсли;
			
		КонецЕсли;
		
				
		ОбъектРасчета.Вставить("РазделениеПоПроектам",		ОбъектРасчета.ВидОтчета.РазделениеПоПроектам);
		МассивИзмененныхПоказателей=Новый Массив;
		
		ТекстСвертки = "Показатель";
		
		Для Инд = (ОбъектРасчета.МаксАналитикОтчета+1) По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя) Цикл
			ТекстСвертки = ТекстСвертки + ", Аналитика" + Инд;
		КонецЦикла;
		
		ТекстСвертки=ТекстСвертки+",АналитикаВалюта,ЧислоАналитикГруппыРаскрытия";

		Если ОбъектРасчета.СохранятьИсториюИзменений Тогда
			
			// Очистим лог до последней актуальной операции
			ОчиститьЛогДоТекущейОперации(ОбъектРасчета.ЛогИзмененийПоказателей, ОбъектРасчета.НомерТекущейОперации + 1);
			ОчиститьЛогДоТекущейОперации(ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей, ОбъектРасчета.НомерТекущейОперации + 1);
			
			// Определяем, какие данные были изменены в таблице мПоказатели и мПоказателиРаскрытия.
			ТаблицаИзмененныхПоказателей = ОбъектРасчета.ЛогИзмененийПоказателей.Скопировать();
			ТаблицаИзмененныхПоказателей.Свернуть("Ссылка", "Значение");
						
						
			СнятьИндексыСЛогаРаскрытий(ОбъектРасчета);
			ТаблицаИзмененийРаскрытий = ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Скопировать();
			УстановитьИндексыНаЛогРаскрытий(ОбъектРасчета);
			
			ТекстСвертки=ТекстСвертки+",ИтоговоеЗначение";
			ТаблицаИзмененийРаскрытий.Свернуть(ТекстСвертки, "Значение,ЗначениеВалюта");
			
			// Удалим нулевые строки раскрытия
			МассивКУдалению=ТаблицаИзмененийРаскрытий.НайтиСтроки(Новый Структура("Значение",0));
			
			Для Каждого СтрокаКУдалению ИЗ МассивКУдалению Цикл
				
				ТаблицаИзмененийРаскрытий.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
			
			// Удалим технологические строки раскрытия
			МассивКУдалению=ТаблицаИзмененийРаскрытий.НайтиСтроки(Новый Структура("Значение",0.00001));
			
			Для Каждого СтрокаКУдалению ИЗ МассивКУдалению Цикл
				
				ТаблицаИзмененийРаскрытий.Удалить(СтрокаКУдалению);
				
			КонецЦикла;
						
			МассивИзмененныхПоказателей=ТаблицаИзмененныхПоказателей.ВыгрузитьКолонку("Ссылка");
			
		Иначе
			
			Если ОбъектРасчета.мКопирование=Истина Тогда
				
				ТаблицаИзмененныхПоказателей	= ОбъектРасчета.мПоказатели;
				ТаблицаИзмененийРаскрытий		= ОбъектРасчета.мПоказателиРаскрытия;
				МассивИзмененныхПоказателей		= ТаблицаИзмененныхПоказателей.ВыгрузитьКолонку("Ссылка");
				
			Иначе
				
				ТаблицаИзмененныхПоказателей	= ОбъектРасчета.мПоказатели.Скопировать(Новый Структура("ЗначениеИзменено",Истина));
				МассивИзмененныхПоказателей		= ТаблицаИзмененныхПоказателей.ВыгрузитьКолонку("Ссылка");	
				ТаблицаИзмененийРаскрытий		= ПолучитьТаблицуИзмененныхРаскрытий(ОбъектРасчета,МассивИзмененныхПоказателей);
				
			КонецЕсли;
			
			ТаблицаИзмененийРаскрытий.Свернуть(ТекстСвертки, "Значение,ЗначениеВалюта");
				
		КонецЕсли;
			
		Если ОбъектРасчета.ПодставлятьЗначенияПоУмолчаниюВместоПустых=Истина И ТаблицаИзмененийРаскрытий.Количество()>0  Тогда
			
			ЗаполнитьАналитикиПоУмолчанию(ОбъектРасчета,ТаблицаИзмененийРаскрытий);
			
		КонецЕсли;
		
		ОбъектРасчета.Вставить("МассивИзмененныхПоказателей",МассивИзмененныхПоказателей);
				
		Если ТаблицаИзмененныхПоказателей.Количество()=0 И ТаблицаИзмененийРаскрытий.Количество()=0
			И (Не ОбъектРасчета.ИзмененНечисловойПоказатель)
			И (Не ОбъектРасчета.ПересчетВалюты) Тогда
									
			Возврат;
			
		КонецЕсли;
		
		Если ПроверятьВозможностьЗаписи Тогда
			
			ПроверитьВозможностьЗаписи(ОбъектРасчета,ТаблицаИзмененныхПоказателей,Отказ);
			
			Если Отказ Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектРасчета.Вставить("ПериодОкончания");
		ОбъектРасчета.Вставить("МассивПериодов");
		
		Если НЕ (ОбъектРасчета.СохранятьИсториюИзменений ИЛИ ОбъектРасчета.ИзмененКлючевойРеквизит=Истина ИЛИ ОбъектРасчета.ЧистоваяЗаписьДанных) 
			И ТипЗнч(ОбъектРасчета.СписокИспользуемыхВерсий)=Тип("СписокЗначений")
			И ОбъектРасчета.СписокИспользуемыхВерсий.Количество()=1 Тогда
			
			Версия=ОбъектРасчета.СписокИспользуемыхВерсий[0].Значение;
			ОбъектРасчета.Вставить("ОписаниеВерсии",Версия.Владелец);
			
		Иначе
			
			Версия=ПолучитьРабочуюВерсию(ОбъектРасчета);
			
		КонецЕсли;
		
		Если Версия = Неопределено Тогда
			Возврат;
		КонецЕсли;
				
		СоответствиеВерсийИВалют	= Новый Соответствие;
		МассивНовыхВалют			= Новый Массив;
		КурсовыеРазницы				= Неопределено;
		КурсовыеРазницыТР			= Неопределено;
		
		// Подготовка к записи мультивалютного документа.
		ИнициализацияПараметровДопВалют(ОбъектРасчета,
				СоответствиеВерсийИВалют,
				МассивНовыхВалют,
				ОбъектРасчета.ОписаниеВерсии,
				ОбъектРасчета.АктивностьДвижений,
				КурсовыеРазницы,
				КурсовыеРазницыТР,
				Отказ
			);
			
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если ОбъектРасчета.АнализЧувствительности Тогда
			
			ИмяТаблицыСинтетики=?(ОбъектРасчета.МаксАналитикОтчета=0,"ЗначенияПоказателейМоделированиеСинтетика","ЗначенияПоказателейМоделирование"+ОбъектРасчета.МаксАналитикОтчета);
			
		Иначе
			
			ИмяТаблицыСинтетики=?(ОбъектРасчета.МаксАналитикОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+ОбъектРасчета.МаксАналитикОтчета);
			
		КонецЕсли;
		
		КурсовыеРазницы = Новый Соответствие;
		
		Если ТрансляционныйРезервУХ.ТребуетсяРасчетКурсовыхРазницТР(ОбъектРасчета.НастройкаПересчетаВалют, ОбъектРасчета.ВидОтчета,ОбъектРасчета.ДополнительныеВалюты,ОбъектРасчета.ЛогИзмененийПоказателей) Тогда
			КурсовыеРазницыТР = Новый Соответствие;			
		Иначе
			КурсовыеРазницыТР = Неопределено;
		КонецЕсли;
		
		// Запись числовых показателей в регистр.
		Для Каждого Изменение Из ТаблицаИзмененныхПоказателей Цикл
			
			Если ОбъектРасчета.мНеЧисловыеПоказатели.Найти(Изменение.Ссылка) <> Неопределено Тогда
				Продолжить;
			КонецЕсли; // Из лога записываются только изменения числовых показателей.
			
			Пок = ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Изменение.Ссылка];
			
			СтрокаЗаписи = Новый Структура("Показатель, Версия, Активность, Регистратор, ИтоговоеЗначение"
			, Пок.Ссылка
			, Версия
			, ОбъектРасчета.АктивностьДвижений
			, Версия
			, Истина);
			
			Для Индекс=1 По ОбъектРасчета.МаксАналитикОтчета Цикл
				
				СтрокаЗаписи.Вставить("Аналитика"+Индекс,ОбъектРасчета["Аналитика"+Индекс]);
				
			КонецЦикла;
			
			Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, 0);
			СтрокаЗаписи.Вставить("Значение", Значение);
									
			ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,ИмяТаблицыСинтетики, СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
			
			Если КурсовыеРазницыТР <> Неопределено Тогда
				
				Если ОбъектРасчета.НастройкаПересчетаВалют.ПоказателиТР.СКК = Пок.Ссылка 
					Или ОбъектРасчета.НастройкаПересчетаВалют.ПоказателиТР.СКД = Пок.Ссылка Тогда
				
					Продолжить;
				
				КонецЕсли;				
				
				КоэффициентТР = ОбъектРасчета.НастройкаПересчетаВалют.ПоказателиИтога.Получить(Пок.Ссылка);
			Иначе
				КоэффициентТР = Неопределено;
			КонецЕсли;
			
			// Обработка дополнительных валют.
			ДобавитьЗаписиПоказателейДопВалют(ОбъектРасчета,мСоответствиеНаборовЗаписей,
							СоответствиеВерсийИВалют,
							МассивНовыхВалют,
							ИмяТаблицыСинтетики,
							Пок,
							СтрокаЗаписи,
							Значение,
							КоэффициентТР,
							КурсовыеРазницы,
							КурсовыеРазницыТР
						);

							
		КонецЦикла;
				
		СтруктураПоиска = Новый Структура(ТекстСвертки);
		
		Для Каждого Изменение Из ТаблицаИзмененийРаскрытий Цикл
			
			Если ОбъектРасчета.мНеЧисловыеПоказатели.Найти(Изменение.Показатель) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЗаписи = Новый Структура("Показатель, Версия, Активность, Регистратор, ИтоговоеЗначение"
			, Изменение.Показатель
			, Версия
			, ОбъектРасчета.АктивностьДвижений
			, Версия
			, Ложь);
			
			ЗаполнитьСтруктуруАналитик(ОбъектРасчета,СтрокаЗаписи, Изменение, Ложь);
				
			ЧисловойПоказатель = ОбъектРасчета.мНеЧисловыеПоказатели.Найти(Изменение.Показатель) = Неопределено;
			Пок=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Изменение.Показатель];
			
			Если ЧисловойПоказатель Тогда
				
				Значение=?(ЗначениеЗаполнено(Изменение.Значение), Число(Изменение.Значение), 0);
				СтрокаЗаписи.Вставить("Значение", 				Значение);
				СтрокаЗаписи.Вставить("ЗначениеВалюта", 		Изменение.ЗначениеВалюта);
								
				Если ЗначениеЗаполнено(Значение) И МассивИзмененныхПоказателей.Найти(Изменение.Показатель)=Неопределено Тогда
					
					МассивИзмененныхПоказателей.Добавить(Пок.Ссылка);
					
				КонецЕсли; 
				
			Иначе
				
				ЗаполнитьЗначенияСвойств(СтруктураПоиска, Изменение);
				НайденныеСтроки = ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() > 0 Тогда
					
					СтрокаЗаписи.Вставить("Значение", 				НайденныеСтроки[0].Значение);
					
					Если ЗначениеЗаполнено(СтрокаЗаписи.Значение) И МассивИзмененныхПоказателей.Найти(СтрокаЗаписи.Показатель)=Неопределено Тогда
						
						МассивИзмененныхПоказателей.Добавить(Пок.Ссылка);
						
					КонецЕсли;
					
				Иначе
					
					СтрокаЗаписи.Вставить("Значение", 				Неопределено);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации Тогда
				
				ЗаполнитьСтрокуДереваОтчетов(ОбъектРасчета,ДеревоОтчетов, ТаблицаПоказателей, ТекСоставПериметра, КэшГруппРаскрытия, СтрокаЗаписи,Изменение.ЧислоАналитикГруппыРаскрытия);
				
			КонецЕсли;
			
			Если Изменение.ЧислоАналитикГруппыРаскрытия=0 Тогда
				
				ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,?(ОбъектРасчета.АнализЧувствительности,"ЗначенияПоказателейМоделированиеВалютные","ЗначенияПоказателейОтчетовВалютные"), СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
				
			Иначе
				
				ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,?(ОбъектРасчета.АнализЧувствительности,"ЗначенияПоказателейМоделирование","ЗначенияПоказателейОтчетов")+Изменение.ЧислоАналитикГруппыРаскрытия, СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
				
			КонецЕсли;
			
			// Расчет раскрытий в дополнительных валютах.
			
			Если ЧисловойПоказатель Тогда
			
				ДобавитьЗаписиРаскрытийДопВалют(ОбъектРасчета,мСоответствиеНаборовЗаписей,
								СоответствиеВерсийИВалют,
								МассивНовыхВалют,
								СтрокаЗаписи,
								Значение,
								Изменение,
								ЧисловойПоказатель
							);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектРасчета.Вставить("МассивИзмененныхПоказателей",МассивИзмененныхПоказателей);
		
		// Регистрируем изменение экземпляра отчета для расчета расхождений ВГО
		Если МассивИзмененныхПоказателей.Количество() > 0 Тогда
		    РасширениеБизнесЛогикиУХ.СверкаВГО_ОбработкаПроведенияНастраиваемыйОтчет(ОбъектРасчета);
		КонецЕсли;
		
		// Сохранение нечисловых показателей. В версию записываются значения каждого нечислового показателя,
		// вне зависимости от того, был ли измненен показатель в текущей версии.		
		ЗаписатьНечисловыеПоказатели(ОбъектРасчета,мСоответствиеНаборовЗаписей,Версия, МассивНовыхВалют, Пок, СоответствиеВерсийИВалют);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		ДобавитьЗаписиКурсовыеРазницыДопВалют(ОбъектРасчета,мСоответствиеНаборовЗаписей,СоответствиеВерсийИВалют, ИмяТаблицыСинтетики, ОбъектРасчета.АктивностьДвижений, КурсовыеРазницы, КурсовыеРазницыТР);
				
		Для Каждого ВерсияНабора ИЗ мСоответствиеНаборовЗаписей Цикл
			
			Для Каждого НаборЗаписей ИЗ ВерсияНабора.Значение Цикл
				
				НаборЗаписей.Значение.Записать(Истина);
				
			КонецЦикла;
			
		КонецЦикла;
				
		ОбъектРасчета.ЛогИзмененийПоказателей.Очистить();
		
		Если НЕ ОбъектРасчета.Свойство("ЧерноваяВерсия") Тогда
			ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Очистить();
		КонецЕсли;
		
		Если Не ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации Тогда
			
			РасширениеИнтеграцииУХ.ИзменитьЗначенияДляОтчетовПоВнутригрупповымОперациям(ОбъектРасчета,ДеревоОтчетов);
			
		КонецЕсли;
								
КонецПроцедуры

Процедура ИнициализацияПараметровДопВалют(ОбъектРасчета,
						СоответствиеВерсийИВалют,
						МассивНовыхВалют,
						ОписаниеВерсии,
						АктивностьДвижений,
						КурсовыеРазницы,
						КурсовыеРазницыТР,
						Отказ
					)
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество() > 0 Тогда
		
		МассивОшибочных=Новый Массив;
		
		Для Каждого ДопВалюта Из ОбъектРасчета.ДополнительныеВалюты Цикл
			
			Если НЕ (ЗначениеЗаполнено(ДопВалюта.Валюта) И СоответствиеВерсийИВалют[ДопВалюта.Валюта]=Неопределено) Тогда
				
				МассивОшибочных.Добавить(ДопВалюта);
				Продолжить;
				
			КонецЕсли;
			
			СоответствиеВерсийИВалют.Вставить(ДопВалюта.Валюта, ПолучитьВерсию(ОбъектРасчета,Отказ, ДопВалюта.Валюта, ОписаниеВерсии, АктивностьДвижений,НЕ ОбъектРасчета.СохранятьИсториюИзменений,Истина));
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			ТекИндекс = ОбъектРасчета.мВалютыЗаписей.Найти(ДопВалюта.Валюта);
			
			Если ТекИндекс = Неопределено Тогда
				МассивНовыхВалют.Добавить(ДопВалюта.Валюта); // Дополнительная валюта добавлена в текущем сеансе редактирования.
			Иначе
				ОбъектРасчета.мВалютыЗаписей.Удалить(ТекИндекс);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Строка ИЗ МассивОшибочных Цикл
			
			ОбъектРасчета.ДополнительныеВалюты.Удалить(Строка);
			
		КонецЦикла;	
		
		ОбработкаПериодовРасчета = ОбъектРасчета.мПоказатели.Колонки.Найти("ПериодРасчета") <> Неопределено;
		
		Если ОбъектРасчета.ДополнительныеВалюты.Количество() > 0 Тогда
			
			ОбъектРасчета.Вставить("НастройкаПересчетаВалют",ТрансляционныйРезервУХ.ПолучитьНастройкуТР(ОбъектРасчета.ВидОтчета, ОбъектРасчета.ДополнительныеВалюты, ОбъектРасчета.ЛогИзмененийПоказателей));
			
		Иначе
			
			ОбъектРасчета.Вставить("НастройкаПересчетаВалют",Неопределено);
			
		КонецЕсли;
		
	Иначе
		
		ОбъектРасчета.Вставить("НастройкаПересчетаВалют",Неопределено);
		
	КонецЕсли;
	
	КурсовыеРазницы = Новый Соответствие;
	
	Если ТрансляционныйРезервУХ.ТребуетсяРасчетКурсовыхРазницТР(ОбъектРасчета.НастройкаПересчетаВалют, ОбъектРасчета.ВидОтчета, ОбъектРасчета.ДополнительныеВалюты, ОбъектРасчета.ЛогИзмененийПоказателей) Тогда
		КурсовыеРазницыТР = Новый Соответствие;
		ОбъектРасчета.ДополнительныеСвойства.Вставить("КурсовыеРазницыТР", КурсовыеРазницыТР);
	Иначе
		КурсовыеРазницыТР = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЗаписиРаскрытийДопВалют(ОбъектРасчета,мСоответствиеНаборовЗаписей,СоответствиеВерсийИВалют, МассивНовыхВалют, СтрокаЗаписи, Значение, Изменение, ЧисловойПоказатель)
		
	Пок = ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Изменение.Показатель]; // для пересчетов по курсам
	
	Для Каждого Строка Из СоответствиеВерсийИВалют Цикл
				
		СтрокаЗаписи.Вставить("Версия", 		Строка.Значение);
		СтрокаЗаписи.Вставить("Регистратор",	Строка.Значение);
		
		Если ЧисловойПоказатель Тогда
			СтрокаЗаписи.Вставить("Значение", ПересчитатьЗначениеПоказателяПоКурсу(ОбъектРасчета,Значение, Пок, ОбъектРасчета.ОсновнаяВалюта, Строка.Ключ));
		Иначе
			СтрокаЗаписи.Вставить("Значение", Значение);
		КонецЕсли;		
		
		Если Изменение.ЧислоАналитикГруппыРаскрытия = 0 Тогда
			
			ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,
					?(ОбъектРасчета.АнализЧувствительности, "ЗначенияПоказателейМоделированиеВалютные", "ЗначенияПоказателейОтчетовВалютные"), 
					СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок)
				);
				
		Иначе
			
			ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,
					?(ОбъектРасчета.АнализЧувствительности, "ЗначенияПоказателейМоделирование", "ЗначенияПоказателейОтчетов") + Изменение.ЧислоАналитикГруппыРаскрытия,
					СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок)
				);
				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьЗаписиКурсовыеРазницыДопВалют(ОбъектРасчета, мСоответствиеНаборовЗаписей, СоответствиеВерсийИВалют, ИмяТаблицыСинтетики, АктивностьДвижений, КурсовыеРазницы, КурсовыеРазницыТР)
	
	Если (КурсовыеРазницыТР <> Неопределено) 
		И (КурсовыеРазницыТР.Количество() > 0) 
		И (ОбъектРасчета.НастройкаПересчетаВалют <> Неопределено) Тогда //КурсовыеРазницыТР
		
		ЗаписиКурсовыхРазниц = ТрансляционныйРезервУХ
									.ПолучитьКурсовыеРазницыТР(
										ОбъектРасчета,
										СоответствиеВерсийИВалют,
										КурсовыеРазницыТР,
										АктивностьДвижений
									);
																
		Для каждого ЗаписьКР Из ЗаписиКурсовыхРазниц Цикл
			
			Пок=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[ЗаписьКР.Показатель];
						
			ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,ИмяТаблицыСинтетики, ЗаписьКР,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если КурсовыеРазницы.Количество()>0 Тогда
		
		МассивПоказателей = ОбъектРасчета.мПоказатели.НайтиСтроки(Новый Структура("ДляОтраженияКурсовыхРазниц",Истина));
		
		Для Каждого Строка ИЗ МассивПоказателей Цикл
			
			Для Каждого СтрРазница ИЗ КурсовыеРазницы Цикл
				
				ВерсияВалюта = СоответствиеВерсийИВалют[СтрРазница.Ключ];
				
				СтрокаЗаписи = Новый Структура("Показатель, Версия, Активность, Регистратор, ИтоговоеЗначение"
												, Строка.Ссылка
												, ВерсияВалюта
												, АктивностьДвижений
												, ВерсияВалюта
												, Истина);
				
				Для Индекс=1 По ОбъектРасчета.МаксАналитикОтчета Цикл
					
					СтрокаЗаписи.Вставить("Аналитика"+Индекс, ОбъектРасчета["Аналитика"+Индекс]);
					
				КонецЦикла;
				
				СтрокаЗаписи.Вставить("Значение", 				СтрРазница.Значение);
				
				ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,ИмяТаблицыСинтетики, СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Строка));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьЗаписиПоказателейДопВалют(ОбъектРасчета,мСоответствиеНаборовЗаписей,
								СоответствиеВерсийИВалют,
								МассивНовыхВалют,
								ИмяТаблицыСинтетики,
								Пок,
								СтрокаЗаписи,
								Значение,
								КоэффициентТР,
								КурсовыеРазницы, 
								КурсовыеРазницыТР)

	Если Пок.ДляОтраженияКурсовыхРазниц Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СоответствиеВерсийИВалют Цикл
				
		ЗначениеВВалюте = ПересчитатьЗначениеПоказателяПоКурсу(ОбъектРасчета,Значение, Пок, ОбъектРасчета.ОсновнаяВалюта, Строка.Ключ);
				
		СтрокаЗаписи.Вставить("Версия",			Строка.Значение);
		СтрокаЗаписи.Вставить("Регистратор",	Строка.Значение);
		СтрокаЗаписи.Вставить("Значение",		ЗначениеВВалюте);
		
		ДобавитьЗаписьВРегистр(ОбъектРасчета,мСоответствиеНаборовЗаписей,ИмяТаблицыСинтетики, СтрокаЗаписи,?(ОбъектРасчета.СохранятьИсториюИзменений,Неопределено,Пок));
		
		Если КурсовыеРазницыТР <> Неопределено Тогда
			ТрансляционныйРезервУХ.ОбновитьДанныеКурсовыхРазниц(Пок, ЗначениеВВалюте, Строка.Ключ, КурсовыеРазницы);
			ТрансляционныйРезервУХ.ОбновитьКурсовыеРазницыТР(КурсовыеРазницыТР, КоэффициентТР, ЗначениеВВалюте, Строка.Ключ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьАналитикиПоУмолчанию(ОбъектРасчета,ТаблицаАналитики) Экспорт
	
	Запрос=Новый Запрос;
	
	МассивПостфиксов=Новый Массив;
	
	Для Индекс=ОбъектРасчета.МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если НЕ ТаблицаАналитики.Колонки.Найти("Аналитика"+Индекс)=Неопределено Тогда
			
			МассивПостфиксов.Добавить(Индекс);
			
		КонецЕсли;
			
	КонецЦикла; 
	
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаАналитики.Показатель,
	|	ТаблицаАналитики.АналитикаВалюта,";
	
	Для Каждого Постфикс ИЗ МассивПостфиксов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ТаблицаАналитики.Аналитика"+Постфикс+",";
		
	КонецЦикла; 
	
	Запрос.Текст=Запрос.Текст+"
	|	ТаблицаАналитики.Значение,
	|	ТаблицаАналитики.ЗначениеВалюта,
	|	ТаблицаАналитики.ЧислоАналитикГруппыРаскрытия
	|ПОМЕСТИТЬ ТаблицаАналитики
	|ИЗ
	|	&ТаблицаАналитики КАК ТаблицаАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналитики.Показатель,
	|	ГруппыАналитик.ГруппаРаскрытия,";
	
	Для Каждого Постфикс ИЗ МассивПостфиксов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ЕстьNULL(ТаблицаАналитики.Аналитика"+Постфикс+".Ссылка,Неопределено) КАК Аналитика"+Постфикс+",
		|	ТаблицаАналитики.Аналитика"+Постфикс+" КАК Аналитика"+Постфикс+"До,";
		
	КонецЦикла; 
	
	Запрос.Текст=Запрос.Текст+"
	|	ТаблицаАналитики.АналитикаВалюта,
	|	ТаблицаАналитики.Значение,
	|	ТаблицаАналитики.ЗначениеВалюта,
	|	ТаблицаАналитики.ЧислоАналитикГруппыРаскрытия
	|ПОМЕСТИТЬ ТаблицаАналитикиГруппыРаскрытия
	|ИЗ
	|	ТаблицаАналитики КАК ТаблицаАналитики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ПоказателиОтчетов.Ссылка КАК Ссылка,
	|			ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия
	|		ИЗ
	|			Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ГДЕ
	|			ПоказателиОтчетов.Владелец = &ВидОтчета
	|			И НЕ ПоказателиОтчетов.ПометкаУдаления
	|			И НЕ ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)) КАК ГруппыАналитик
	|		ПО ТаблицаАналитики.Показатель = ГруппыАналитик.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ";
	
	Для Каждого Постфикс ИЗ МассивПостфиксов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ГруппыРаскрытия.ВидАналитики"+Постфикс+",";
		
	КонецЦикла; 
	
	Запрос.Текст=Запрос.Текст+"
	|	ГруппыРаскрытия.Ссылка КАК ГруппаРаскрытия,
	|	ГруппыРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиВалюта
	|ПОМЕСТИТЬ ГруппыРаскрытияВидыАналитик
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	ГруппыРаскрытия.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ТаблицаАналитикиГруппыРаскрытия.ГруппаРаскрытия
	|			ИЗ
	|				ТаблицаАналитикиГруппыРаскрытия)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыРаскрытияВидыАналитик.ГруппаРаскрытия,";
	
	Для Каждого Постфикс ИЗ МассивПостфиксов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ЕСТЬNULL(ЗначенияАналитикПоУмолчанию"+Постфикс+".ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК АналитикаПоУмолчанию"+Постфикс+",";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	
	|ЕСТЬNULL(ЗначенияАналитикПоУмолчаниюВалюта.ЗначениеПоУмолчанию, НЕОПРЕДЕЛЕНО) КАК АналитикаПоУмолчаниюВалюта
	|ПОМЕСТИТЬ ЗначенияПоУмолчанию
	|ИЗ
	|	ГруппыРаскрытияВидыАналитик КАК ГруппыРаскрытияВидыАналитик";
	
	Для Каждого Постфикс ИЗ МассивПостфиксов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияАналитикПоУмолчанию КАК ЗначенияАналитикПоУмолчанию"+Постфикс+"
		|		ПО ГруппыРаскрытияВидыАналитик.ВидАналитики"+Постфикс+" = ЗначенияАналитикПоУмолчанию"+Постфикс+".ВидАналитики";
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияАналитикПоУмолчанию КАК ЗначенияАналитикПоУмолчаниюВалюта
	|		ПО ГруппыРаскрытияВидыАналитик.ВидАналитикиВалюта = ЗначенияАналитикПоУмолчаниюВалюта.ВидАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАналитикиГруппыРаскрытия.Показатель,";
	
	Для Каждого Постфикс ИЗ МассивПостфиксов Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ВЫБОР
		|		КОГДА ТаблицаАналитикиГруппыРаскрытия.Аналитика"+Постфикс+" = НЕОПРЕДЕЛЕНО
		|				И НЕ ЗначенияПоУмолчанию.АналитикаПоУмолчанию"+Постфикс+" = НЕОПРЕДЕЛЕНО
		|			ТОГДА ЗначенияПоУмолчанию.АналитикаПоУмолчанию"+Постфикс+"
		|		ИНАЧЕ ТаблицаАналитикиГруппыРаскрытия.Аналитика"+Постфикс+"До
		|	КОНЕЦ КАК Аналитика"+Постфикс+",";
			
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	
	|	ВЫБОР
	|		КОГДА ТаблицаАналитикиГруппыРаскрытия.АналитикаВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				И НЕ ЗначенияПоУмолчанию.АналитикаПоУмолчаниюВалюта = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗначенияПоУмолчанию.АналитикаПоУмолчаниюВалюта
	|		ИНАЧЕ ТаблицаАналитикиГруппыРаскрытия.АналитикаВалюта
	|	КОНЕЦ КАК АналитикаВалюта,
	|	ТаблицаАналитикиГруппыРаскрытия.Значение,
	|	ТаблицаАналитикиГруппыРаскрытия.ЗначениеВалюта,
	|	ТаблицаАналитикиГруппыРаскрытия.ЧислоАналитикГруппыРаскрытия
	|ИЗ
	|	ТаблицаАналитикиГруппыРаскрытия КАК ТаблицаАналитикиГруппыРаскрытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЗначенияПоУмолчанию КАК ЗначенияПоУмолчанию
	|		ПО ТаблицаАналитикиГруппыРаскрытия.ГруппаРаскрытия = ЗначенияПоУмолчанию.ГруппаРаскрытия";
	
	Запрос.УстановитьПараметр("ВидОтчета",ОбъектРасчета.ВидОтчета);
	Запрос.УстановитьПараметр("ТаблицаАналитики",ТаблицаАналитики);
	
	ТаблицаАналитики=Запрос.Выполнить().Выгрузить();
		
КонецПроцедуры // ЗаполнитьАналитикиПоУмолчанию


Процедура ЗаполнитьСтрокуДереваОтчетов(ОбъектРасчета,ДеревоОтчетов, ТаблицаПоказателей, СоставПериметра, КэшГруппРаскрытия, СтрокаПоказателя,ЧислоАналитикГруппыРаскрытия)
	
	ТекСтрока = ТаблицаПоказателей.Найти(СтрокаПоказателя.Показатель, "ПоказательТекущегоОтчета");
	
	Если ТекСтрока <> неопределено Тогда
		
		СтруктураПоиска = Новый Структура("Показатель", СтрокаПоказателя.Показатель);
		
		Для Инд = ОбъектРасчета.МаксАналитикОтчета+1 По ЧислоАналитикГруппыРаскрытия Цикл
			ИмяАналитики = "Аналитика" + Инд;
			СтруктураПоиска.Вставить(ИмяАналитики, СтрокаПоказателя[ИмяАналитики]);
		КонецЦикла;
		
		НАйденныеСтроки = ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
		
		ТекАналитика = ВернутьАналитикуВГО(ОбъектРасчета,КэшГруппРаскрытия, СтрокаПоказателя.Показатель.ГруппаРаскрытия);
		
		КонтрагентВГО=СтрокаПоказателя["Аналитика" + ТекАналитика];
				
		ВнешняяОрганизация = ?(ТипЗнч(КонтрагентВГО)=Тип("СправочникСсылка.Организации"),КонтрагентВГО,КонтрагентВГО.ОрганизационнаяЕдиница);
		
		Если СоставПериметра.Найти(ВнешняяОрганизация, "ИндивидуальнаяОрганизация") = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтрокиДерева = ДеревоОтчетов.Строки.НайтиСтроки(Новый Структура("ВидВнешнегоОтчета, ОрганизацияВнешнегоОтчета", ТекСтрока.ВидВнешнегоОтчета, ВнешняяОрганизация));
		Если СтрокиДерева.Количество() = 0 Тогда
			СтрокаДерева = ДеревоОтчетов.Строки.Добавить();
			СтрокаДерева.ВидВнешнегоОтчета         = ТекСтрока.ВидВнешнегоОтчета;
			СтрокаДерева.ОрганизацияВнешнегоОтчета = ВнешняяОрганизация;
		Иначе
			СтрокаДерева = СтрокиДерева[0];
		КонецЕсли;
		
		ТекСтрокаПоказателя = СтрокаДерева.Строки.Добавить();
		
		ТекСтрокаПоказателя.Показатель = ТекСтрока.ПоказательВнешнегоОтчета;
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекСтрокаПоказателя.Значение = 0;
		Иначе
			ТекСтрокаПоказателя.Значение = НайденныеСтроки[0].Значение;
		КонецЕсли;
		
		
		ТекГруппаРаскрытия = ТекСтрока.ПоказательВнешнегоОтчета.ГруппаРаскрытия;
		НомерАналитикиВГО = Строка(ВернутьАналитикуВГО(ОбъектРасчета,КэшГруппРаскрытия, ТекГруппаРаскрытия));
		ВидАналитикиВГО=ТекГруппаРаскрытия["ВидАналитики"+НомерАналитикиВГО];
		
		ТаблицаСоответствия = ТекСтрока.СоответствиеАналитик.Получить();
		ТекСтрокаПоказателя["Аналитика" + НомерАналитикиВГО] = ПолучитьКонтрагентаВГО(ВидАналитикиВГО,ОбъектРасчета.Организация);
		
		Для Каждого СтрокаСоответствия Из ТаблицаСоответствия Цикл
			Если ТекСтрока.Базис Тогда
				Если Прав(СтрокаСоответствия.КодАналитикиСравнение, 1) <> НомерАналитикиВГО Тогда
					ТекСтрокаПоказателя[СтрокаСоответствия.КодАналитикиСравнение] = СтрокаПоказателя[СтрокаСоответствия.КодАналитикиБазис];
				КонецЕсли;
			Иначе
				Если Прав(СтрокаСоответствия.КодАналитикиБазис, 1) <> НомерАналитикиВГО Тогда
					ТекСтрокаПоказателя[СтрокаСоответствия.КодАналитикиБазис] = СтрокаПоказателя[СтрокаСоответствия.КодАналитикиСравнение];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьКонтрагентаВГО(ВидАналитикиВГО, Организация)
	
	ТипАналитикиВГО = ВидАналитикиВГО.ТипЗначения;
	
	Если ТипАналитикиВГО.СодержитТип(Тип("СправочникСсылка.Организации")) Тогда
		
		Возврат Организация;
		
	Иначе
		
		Возврат ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(Организация);
		
	КонецЕсли;
			
КонецФункции // ПолучитьКонтрагентаВГО()

Процедура ЗаполнитьСтруктуруАналитик(ОбъектРасчета,Структура, СтрокаЗаписи, ИтоговоеЗначение) Экспорт
	
	Если ИтоговоеЗначение Тогда
		
		Для Инд=1 По ОбъектРасчета.МаксАналитикОтчета  Цикл
			
			ИмяАналитики = "Аналитика" + Инд;
			Структура.Вставить(ИмяАналитики,ОбъектРасчета[ИмяАналитики]);
			
		КонецЦикла;
		
	Иначе
		
		Для Инд=1 По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя)  Цикл
			
			ИмяАналитики = "Аналитика" + Инд;
			Структура.Вставить(ИмяАналитики,?(Инд<=ОбъектРасчета.МаксАналитикОтчета,ОбъектРасчета[ИмяАналитики],СтрокаЗаписи[ИмяАналитики]));
			
		КонецЦикла;
		
	КонецЕсли; 
			
	Структура.Вставить("АналитикаВалюта", ?(ИтоговоеЗначение,Справочники.Валюты.ПустаяСсылка(), СтрокаЗаписи["АналитикаВалюта"]));
	Структура.Вставить("ИтоговоеЗначение", ИтоговоеЗначение);
	
КонецПроцедуры

Функция МультипериодныйОбъектРасчета(ОбъектРасчета) Экспорт
	
	Возврат (ОбъектРасчета.Свойство("ПериодОкончания") И ЗначениеЗаполнено(ОбъектРасчета.ПериодОкончания)) И (НЕ ОбъектРасчета.ПериодОкончания=ОбъектРасчета.ПериодОтчета);
	
КонецФункции // МультипериодныйОбъектРасчета() 


Функция ЗаполнитьТаблицуПоказателей(ОбъектРасчета, СписокВерсий = Неопределено, ВалютаЗаполнения = Неопределено,ПоказательОтчета=Неопределено) Экспорт
	
	Если ВалютаЗаполнения = Неопределено Тогда
		ВалютаЗаполнения = ОбъектРасчета.ОсновнаяВалюта;
	КонецЕсли;
	
	Если СписокВерсий = Неопределено Тогда
		СписокВерсий = ПолучитьСписокВерсий(ОбъектРасчета);
	КонецЕсли;
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Ложь);
	ДанныеЗапроса.Вставить("АналитикВидаОтчета",ОбъектРасчета.МаксАналитикОтчета);
	
	Если МультипериодныйОбъектРасчета(ОбъектРасчета) Тогда
		
		ДополнительныеПоля=Новый Соответствие;
		ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ПериодОтчета","ПериодОтчета");
		
		ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВнПоказатели.*,";
	
	Если ДанныеЗапроса.Свойство("ДополнительныеПоля") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ВложенныйЗапрос.ПериодОтчета КАК ПериодОтчета,";
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|	ВложенныйЗапрос.Значение
	|ИЗ
	|	(ВЫБРАТЬ ПоказателиОтчетов.Код КАК Код,
	|	ПоказателиОтчетов.Наименование" + ?(ОбъектРасчета.глОсновнойЯзык = 0 , "", Формат(ОбъектРасчета.глОсновнойЯзык, "ЧЦ=1")) + " КАК Наименование,
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.ЧисловойПоказатель КАК ЧисловойПоказатель,
	|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
	|	ПоказателиОтчетов.Проверочный КАК Проверочный,
	|	ПоказателиОтчетов.СчетБД.Вид КАК ВидСчетаБД,
	|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
	|	ЕстьNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная,Ложь) КАК Валютный,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	ПоказателиОтчетов.ВидИтогаПоСчету КАК ВидИтогаПоСчету,
	|	ПоказателиОтчетов.ДляОтраженияКурсовыхРазниц КАК ДляОтраженияКурсовыхРазниц,
	|	ПоказателиОтчетов.СвязанныйПоказатель КАК СвязанныйПоказатель,
	|	ВЫБОР КОГДА ПоказателиОтчетов.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ПустаяСсылка) Тогда ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериод) ИНАЧЕ ПоказателиОтчетов.ВидКурса КОНЕЦ КАК ВидКурса, 
	|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
	|	ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ПоказателиОтчетов.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	|	ПоказателиОтчетов.СтатьяДвиженияРесурсов КАК СтатьяДвиженияРесурсов,
	|	ПоказателиОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
	|	ПоказателиОтчетов.Предназначение КАК Предназначение,
	//|	ПоказателиОтчетов.КонтролироватьЛимиты КАК КонтролироватьЛимиты,
	|	ПоказателиОтчетов.ПриходРасход КАК ПриходРасход,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия, ";
	Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики" + Инд + " КАК ВидАналитики" + Инд + ", ";
	КонецЦикла;
	Запрос.Текст = Запрос.Текст + "
	|	ПоказателиОтчетов.Строка.ПорядковыйНомер КАК ПорядковыйНомерСтроки,
	|	ПоказателиОтчетов.Колонка.ПорядковыйНомер КАК ПорядковыйНомерКолонки,
	|	ПоказателиОтчетов.Строка.Код КАК КодСтрока,
	|	ПоказателиОтчетов.Строка.ГруппаРаскрытия КАК ГруппаРаскрытияСтрока,
	|	ПоказателиОтчетов.Строка.ГруппаРаскрытия.Код КАК КодГруппыРаскрытияСтрока,
	|	ПоказателиОтчетов.Колонка.Код КАК КодКолонка,
	|	ПоказателиОтчетов.ГруппаРаскрытия.Код КАК КодГруппыРаскрытия,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикГруппыРаскрытия,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.АналитикаКонтрагент,0) КАК АналитикаКонтрагент,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.АналитикаДоговорКонтрагента,0) КАК АналитикаДоговорКонтрагента,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.АналитикаЭтапПроекта,0) КАК АналитикаЭтапПроекта,
	|	ПоказателиОтчетов.Колонка КАК Колонка,
	|	ПоказателиОтчетов.Строка КАК Строка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов";
	
	Если ЗначениеЗаполнено(ПоказательОтчета) Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|	ГДЕ ПоказателиОтчетов.Ссылка = &ПоказательОтчета";
		Запрос.УстановитьПараметр("ПоказательОтчета",ПоказательОтчета);
		
		ОтборПоказателей=Новый Соответствие;
		ОтборПоказателей.Вставить("####.Ссылка =&ПоказательОтчета",Новый Структура("ПоказательОтчета",ПоказательОтчета));
		ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			
	Иначе
		
		Запрос.Текст = Запрос.Текст + "
		|	ГДЕ ПоказателиОтчетов.Владелец = &ВидОтчета";
	
	КонецЕсли; 
	
	Запрос.Текст = Запрос.Текст + "
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)) КАК ВнПоказатели
	|	ЛЕВОЕ СОЕДИНЕНИЕ";
		
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		ТекстВложенногоЗапроса="ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка) КАК Показатель,";
		
		Если ДанныеЗапроса.Свойство("ДополнительныеПоля") Тогда
			
			ТекстВложенногоЗапроса=ТекстВложенногоЗапроса+"
			|ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка) КАК ПериодОтчета,";
			
		КонецЕсли;
		
		ТекстВложенногоЗапроса=ТекстВложенногоЗапроса+"
		|	0 КАК Значение";
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|("+ТекстВложенногоЗапроса+") КАК ВложенныйЗапрос
	|	ПО ВложенныйЗапрос.Показатель = ВнПоказатели.Ссылка
	|	";
	
	Если СтруктураЗапроса.Свойство("СтруктураПараметров") Тогда
		
		Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
			
			Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
			
		КонецЦикла;
		
	КонецЕсли; 
		
	Если ОбъектРасчета.АнализЧувствительности Тогда
		
		Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипЗначения"    , 	Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	Запрос.УстановитьПараметр("Валюта"         , 	ВалютаЗаполнения);
	Запрос.УстановитьПараметр("ВидОтчета"     , 	ОбъектРасчета.ВидОтчета);
	
	ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();
	ТаблицаПоказателей.Колонки.Добавить("ЗначениеИзменено",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Возврат ТаблицаПоказателей;
	
КонецФункции


Функция ЗаполнитьТаблицуРаскрытий(ОбъектРасчета,ГруппаРаскрытия = Неопределено, СписокВерсий = Неопределено,ВалютаЗаполнения = Неопределено,ПараметрыОтбораПоказателей=Неопределено) Экспорт
	
	Если (ОбъектРасчета.ВсегдаЗаполнятьАналитики = Истина) ИЛИ (НЕ ГруппаРаскрытия=Неопределено) Тогда // Непроинициализированное значение переменной считаем как ложь.
		
		Если ВалютаЗаполнения = Неопределено Тогда
			ВалютаЗаполнения = ОбъектРасчета.ОсновнаяВалюта;
		КонецЕсли;
		
		Если СписокВерсий = Неопределено Тогда
			СписокВерсий = ПолучитьСписокВерсий(ОбъектРасчета);
		КонецЕсли;
		
		Запрос=Новый Запрос;
		
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
		ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
		ДанныеЗапроса.Вставить("ВыводитьСинтетику",Ложь);
		ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
		ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
		ДанныеЗапроса.Вставить("ПринудительнаяТипизация",Истина);
		ДанныеЗапроса.Вставить("АналитикВидаОтчета",ОбъектРасчета.МаксАналитикОтчета);
		
		Если МультипериодныйОбъектРасчета(ОбъектРасчета) Тогда
			
			ДополнительныеПоля=Новый Соответствие;
			ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ПериодОтчета","ПериодОтчета");
			
			ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
			
		КонецЕсли;
						
		Если НЕ ГруппаРаскрытия = Неопределено Тогда
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.ГруппаРаскрытия =&ГруппаРаскрытия",Новый Структура("ГруппаРаскрытия",ГруппаРаскрытия));
			
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			
		ИначеЕсли ОбъектРасчета.МассивЗагруженныхГруппРаскрытия.Количество()>0 Тогда
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("(НЕ ####.ГруппаРаскрытия В(&МассивЗагруженныхГруппРаскрытия))",Новый Структура("МассивЗагруженныхГруппРаскрытия",ОбъектРасчета.МассивЗагруженныхГруппРаскрытия));
			
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			
		КонецЕсли;
			
		Если НЕ ПараметрыОтбораПоказателей=Неопределено Тогда
			
			Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда 
				
				ОтборПоказателей=Новый Соответствие;
				ОтборПоказателей.Вставить("####.Ссылка В (&МассивПоказателей)",Новый Структура("МассивПоказателей",ПараметрыОтбораПоказателей));
				ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
				
			Иначе
				
				ОтборПоказателей=Новый Соответствие;
				ОтборПоказателей.Вставить("####.Ссылка = &ПоказательОтчета",Новый Структура("ПоказательОтчета",ПараметрыОтбораПоказателей));
				ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
				
			КонецЕсли;
						
		КонецЕсли;
		
		Если ОбъектРасчета.Свойство("ТабНомеровАналитик") Тогда
			
			Если ТипЗнч(ОбъектРасчета.ТабНомеровАналитик) = Тип("ТаблицаЗначений") Тогда
				ДанныеЗапроса.Вставить("ТабНомеровАналитик", ОбъектРасчета.ТабНомеровАналитик.Скопировать());
			Иначе
				ДанныеЗапроса.Вставить("ТабНомеровАналитик", Новый ТаблицаЗначений);
			КонецЕсли;
			
		КонецЕсли; 
		
		СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
		
		Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
			
			ВнТаблицаРаскрытия = Новый ТаблицаЗначений;
			ВнТаблицаРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
			ВнТаблицаРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ВнТаблицаРаскрытия.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
			ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
			ВнТаблицаРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
			ВнТаблицаРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
			ВнТаблицаРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			ВнТаблицаРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			Если ДанныеЗапроса.Свойство("ДополнительныеПоля") Тогда
				
				ВнТаблицаРаскрытия.Колонки.Добавить("ПериодОтчета",Новый ОписаниеТипов("СправочникСсылка.Периоды"));
				
			КонецЕсли;

			Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
				ВнТаблицаРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
			КонецЦикла;
			
			Возврат ВнТаблицаРаскрытия;
			
		КонецЕсли;
		
		Запрос.Текст=СтруктураЗапроса.ТекстЗапроса;
		
		Если ОбъектРасчета.АнализЧувствительности Тогда
			
			Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
			
		КонецЕсли;
		
		Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
			
			Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
			
		КонецЦикла;
		
		ТекТаблицаРаскрытия=Запрос.Выполнить().Выгрузить();
		ТекТаблицаРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ТекТаблицаРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
				
		Возврат ТекТаблицаРаскрытия;					
				
	Иначе
				
		Возврат ПолучитьПустуюТаблицуРаскрытия(ОбъектРасчета);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПустуюТаблицуРаскрытия(ОбъектРасчета) Экспорт
	
	ВнТаблицаРаскрытия = Новый ТаблицаЗначений;
	ВнТаблицаРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	ВнТаблицаРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ВнТаблицаРаскрытия.Колонки.Добавить("Значение");
	ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ВнТаблицаРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
	ВнТаблицаРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ВнТаблицаРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ВнТаблицаРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Если МультипериодныйОбъектРасчета(ОбъектРасчета) Тогда
		
		ВнТаблицаРаскрытия.Колонки.Добавить("ПериодОтчета",Новый ОписаниеТипов("СправочникСсылка.Периоды"));
		
	КонецЕсли;
	
	Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
		ВнТаблицаРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	КонецЦикла;
	
	Возврат ВнТаблицаРаскрытия;
	
КонецФункции // ПолучитьПустуюТаблицуРаскрытия()

Процедура ИнициализироватьВнутригрупповыеОперации(ОбъектРасчета,ТаблицаСоответствий, ДеревоОтчетов, ТекСоставПериметра, КэшГруппРаскрытия)
	
	Если ОбъектРасчета.Организация.ТипОрганизации <> Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
		ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации = ИСТИНА;
		Возврат;
	КонецЕсли;
	
	ТекСоставПериметра=УправлениеРабочимиПроцессамиУХ.ПолучитьВсеОрганизацииПериметров(ОбъектРасчета.Организация, ОбъектРасчета.Сценарий, ОбъектРасчета.ПериодОтчета);
	
	Если ТекСоставПериметра=Неопределено Тогда
		
		ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации = ИСТИНА;
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательБазис КАК ПоказательТекущегоОтчета,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение КАК ПоказательВнешнегоОтчета,
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаСравнение КАК ВидВнешнегоОтчета,
	|	СоответствиеВнутригрупповыхПоказателей.СоответствиеАналитик,
	|	ИСТИНА КАК Базис
	|ИЗ
	|	РегистрСведений.СоответствиеВнутригрупповыхПоказателей КАК СоответствиеВнутригрупповыхПоказателей
	|ГДЕ
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаБазис = &ВидОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательСравнение,
	|	СоответствиеВнутригрупповыхПоказателей.ПоказательБазис,
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаБазис,
	|	СоответствиеВнутригрупповыхПоказателей.СоответствиеАналитик,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрСведений.СоответствиеВнутригрупповыхПоказателей КАК СоответствиеВнутригрупповыхПоказателей
	|ГДЕ
	|	СоответствиеВнутригрупповыхПоказателей.ВидОтчетаСравнение = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета", ОбъектРасчета.ВидОтчета);
	
	ТаблицаСоответствий = Запрос.Выполнить().Выгрузить();
	ТаблицаСоответствий.Индексы.Добавить("ВидВнешнегоОтчета, ПоказательТекущегоОтчета");
	
	Если ТаблицаСоответствий.Количество() = 0 Тогда
		ОбъектРасчета.мНеИнициироватьВнутриГрупповыеОперации = ИСТИНА;
		Возврат;
	КонецЕсли;
	
	ДеревоОтчетов = Новый ДеревоЗначений;
	ДеревоОтчетов.Колонки.Добавить("ВидВнешнегоОтчета");
	ДеревоОтчетов.Колонки.Добавить("ОрганизацияВнешнегоОтчета");
	ДеревоОтчетов.Колонки.Добавить("Показатель");
	ДеревоОтчетов.Колонки.Добавить("Значение");
	
	Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
		ДеревоОтчетов.Колонки.Добавить("Аналитика" + Инд);
	КонецЦикла;
	
	КэшГруппРаскрытия = Новый Соответствие;
	
КонецПроцедуры

Процедура ИнициализироватьЛоги(ОбъектРасчета) Экспорт
	
	ОбъектРасчета.НомерТекущейОперации = 0;
	
	ЛогИзмененийПоказателей = Новый ТаблицаЗначений;
	ЛогИзмененийПоказателей.Колонки.Добавить("Ссылка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ЛогИзмененийПоказателей.Колонки.Добавить("НомерОперации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ЛогИзмененийПоказателей.Колонки.Добавить("Значение",ОбъектРасчета.мПоказатели.Колонки.Значение.ТипЗначения);
	ЛогИзмененийПоказателей.Колонки.Добавить("ПервоеИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийПоказателей.Колонки.Добавить("ЧисловойПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийПоказателей.Индексы.Добавить("Ссылка");
	ЛогИзмененийПоказателей.Индексы.Добавить("НомерОперации");
	
	ЛогИзмененийРаскрытийПоказателей = Новый ТаблицаЗначений;
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Показатель",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
	
	ТипАналитики=Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Аналитика" + Инд,ТипАналитики);
		
	КонецЦикла;
		
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НомерОперации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НачальноеЗначение");
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("НачальноеЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Значение",ОбъектРасчета.мПоказателиРаскрытия.Колонки.Значение.ТипЗначения);
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ПервоеИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЧисловойПоказатель", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ДобавлениеАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("СторнированиеАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ЛогИзмененийРаскрытийПоказателей.Колонки.Добавить("ИндексАналитики", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	ОбъектРасчета.Вставить("ЛогИзмененийПоказателей",			ЛогИзмененийПоказателей);
	ОбъектРасчета.Вставить("ЛогИзмененийРаскрытийПоказателей",	ЛогИзмененийРаскрытийПоказателей);
	
	УстановитьИндексыНаЛогРаскрытий(ОбъектРасчета);
	
КонецПроцедуры

Процедура ИнициализироватьСоответствияДляПоиска(ОбъектРасчета) Экспорт
	
	мСоответствиеДляПоискаПоКоду			= Новый Соответствие;
	мСоответствиеДляПоискаПоСсылке			= Новый Соответствие;
	мРедактируемыеПоказатели				= Новый Соответствие;

	Для Каждого Строка ИЗ ОбъектРасчета.мПоказатели Цикл
		
		мСоответствиеДляПоискаПоКоду.Вставить(Строка.Код,Строка);
		мСоответствиеДляПоискаПоСсылке.Вставить(Строка.Ссылка,Строка);
				
	КонецЦикла;	
	
	ОбъектРасчета.Вставить("мСоответствиеДляПоискаПоКоду",мСоответствиеДляПоискаПоКоду);
	ОбъектРасчета.Вставить("мСоответствиеДляПоискаПоСсылке",мСоответствиеДляПоискаПоСсылке);
	ОбъектРасчета.Вставить("мРедактируемыеПоказатели",Новый Соответствие);
		
КонецПроцедуры // ИнициализироватьСоответствияДляПоиска()

Процедура ИнициализироватьТаблицуЗначенийОперандов(ОбъектРасчета)
		
	Если ОбъектРасчета.мЗначенияОперандов=Неопределено Тогда 
	
		ОбъектРасчета.мЗначенияОперандов=КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуОперандов(ОбъектРасчета.ЧислоДопАналитик);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура НачатьНовуюОперацию(НомерТекущейОперации,ЛогИзмененийПоказателей,ЛогИзмененийРаскрытийПоказателей) Экспорт
	
	НомерТекущейОперации = ?(НомерТекущейОперации = Неопределено, 0 , НомерТекущейОперации + 1);
	#Если НЕ ВнешнееСоединение Тогда
		ОчиститьЛогДоТекущейОперации(ЛогИзмененийПоказателей, НомерТекущейОперации);
		ОчиститьЛогДоТекущейОперации(ЛогИзмененийРаскрытийПоказателей, НомерТекущейОперации);
	#КонецЕсли
	
КонецПроцедуры


Процедура ОпределитьПериодРасчета(ОбъектРасчета,МассивПоказателей=Неопределено) Экспорт
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка.ПотребительРасчета КАК Показатель,
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка КАК ИсточникДанных,
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ПолеБД,
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.СпособВычисленияПараметра КАК СпособВычисленияПараметра
	|ПОМЕСТИТЬ ПоказателиПериоды
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД КАК ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.СпособВычисленияПараметра В(&СпособВычисленияПараметра)
	|	И ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка.НазначениеРасчетов = &НазначениеРасчетов
	|	И НЕ ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка.ПометкаУдаления
	|	И НЕ ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка.НеИспользуется";
	
	Если ТипЗнч(МассивПоказателей)=Тип("Массив") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка.ПотребительРасчета В (&МассивПоказателей)";
		
		Запрос.УстановитьПараметр("МассивПоказателей",МассивПоказателей);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.ПолеБД,
	|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Значение,
	|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Ссылка.ПотребительРасчета КАК Показатель
	|ПОМЕСТИТЬ УточненияСпособовОпределения
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.УточненияСпособовОпределения КАК ИсточникиДанныхДляРасчетовУточненияСпособовОпределения
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовУточненияСпособовОпределения.Ссылка В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПоказателиПериоды.ИсточникДанных
	|			ИЗ
	|				ПоказателиПериоды)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиПериоды.Показатель КАК Показатель,
	|	ПоказателиПериоды.СпособВычисленияПараметра,
	|	УточненияСпособовОпределения.Значение КАК СмещениеПериода
	|ИЗ
	|	ПоказателиПериоды КАК ПоказателиПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УточненияСпособовОпределения КАК УточненияСпособовОпределения
	|		ПО ПоказателиПериоды.ПолеБД = УточненияСпособовОпределения.ПолеБД
	|			И ПоказателиПериоды.Показатель = УточненияСпособовОпределения.Показатель
	|ИТОГИ ПО
	|	Показатель";
	
	Массив = Новый Массив;
	Массив.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом);
	Массив.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода);
	Массив.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом);
	
	Запрос.УстановитьПараметр("СпособВычисленияПараметра", Массив);
	Запрос.УстановитьПараметр("НазначениеРасчетов", ОбъектРасчета.ПравилоОбработки);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ВыборкаОперандов = Выборка.Выбрать();
		Если ВыборкаОперандов.Количество() = 1 Тогда
			
			ВыборкаОперандов.Следующий();
			СтрокаПоказателя = ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Выборка.Показатель];
			
			Если СтрокаПоказателя <> Неопределено Тогда
				
				Если ВыборкаОперандов.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
					СтрокаПоказателя.ПериодРасчета = ОбщегоНазначенияУХ.глОтносительныйПериод(ОбъектРасчета.ПериодОтчета,ВыборкаОперандов.СмещениеПериода);
				ИначеЕсли ВыборкаОперандов.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода Тогда
					СтрокаПоказателя.ПериодРасчета = ОбщегоНазначенияУХ.глАналогичныйПериод(ОбъектРасчета.ПериодОтчета, -1);
				ИначеЕсли ВыборкаОперандов.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом Тогда
					СтрокаПоказателя.ПериодРасчета = ОбщегоНазначенияУХ.глАналогичныйПериод(ОбъектРасчета.ПериодОтчета, ВыборкаОперандов.СмещениеПериода);
				Иначе
					СтрокаПоказателя.ПериодРасчета = ОбъектРасчета.ПериодОтчета;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьЛогДоТекущейОперации(Лог, НомерОперации) Экспорт
	
	Если Лог.Количество() > 0 Тогда
		Лог.Сортировать("НомерОперации ВОЗР");
		ИндексПоследнейМодификации = Лог[Лог.Количество() - 1].НомерОперации;
		Для Инд = НомерОперации По ИндексПоследнейМодификации Цикл
			НайденныеСтроки = Лог.НайтиСтроки(Новый Структура("НомерОперации", Инд));
			Для Каждого Строка Из НайденныеСтроки Цикл
				Лог.Удалить(Строка);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМассивПериодов(ОбъектРасчета) Экспорт
	
	Если НЕ МультипериодныйОбъектРасчета(ОбъектРасчета) Тогда
		
		МассивПериодов = Новый Массив;
		МассивПериодов.Добавить(ОбъектРасчета.ПериодОтчета);
		
	Иначе
		
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ОбъектРасчета.ПериодОтчета,ОбъектРасчета.ПериодОкончания,ОбъектРасчета.ПериодОтчета.Периодичность);
		
	КонецЕсли;
	
	Возврат МассивПериодов;
		
КонецФункции // ПолучитьМассивПериодов()


Процедура ДобавитьОтборПериоды(Запрос,Источник,ПолеИсточника,ПериодОтчета,ПериодОкончания,МассивПериодов,НеВключатьЧерновые=Истина) Экспорт
	
	Если МассивПериодов=Неопределено Тогда
		
		МассивПериодов=ПолучитьМассивПериодов(Новый Структура("ПериодОтчета,ПериодОкончания",ПериодОтчета,ПериодОкончания));
		
	КонецЕсли;
	
	Если МассивПериодов.Количество()=1 Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И "+Источник+"."+ПолеИсточника+" = &ПериодОтчета";
		
		Запрос.УстановитьПараметр("ПериодОтчета",МассивПериодов[0]);
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|	И "+Источник+"."+ПолеИсточника+" В(&МассивПериодов)";
		
		Запрос.УстановитьПараметр("МассивПериодов",МассивПериодов);
		
	КонецЕсли;
	
	Если НеВключатьЧерновые Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И (НЕ "+Источник+".ЧерноваяВерсия)";
		
	КонецЕсли;	
		
КонецПроцедуры // ДобавитьОтборПериоды()

Функция ПолучитьСписокВерсий(ОбъектРасчета,ВключатьПомеченныеНаУдаление=Ложь,ТолькоОсновнаяВалюта=Истина) Экспорт
	
	Перем Ссылка;
	Перем мКопируемыйДокумент;
	Перем МассивПериодов;
	
	СписокЗначений = Новый СписокЗначений;
	КопированиеОбъекта=ЗначениеЗаполнено(мКопируемыйДокумент);
	
	ОбъектРасчета.Свойство("мКопируемыйДокумент",мКопируемыйДокумент);
	ОбъектРасчета.Свойство("Ссылка",Ссылка);
	ОбъектРасчета.Свойство("МассивПериодов",МассивПериодов);
	
	Если КопированиеОбъекта Тогда
		
		ПериодОтчета=мКопируемыйДокумент.ПериодОтчета;
		ПериодОкончания=мКопируемыйДокумент.ПериодОкончания;
		МассивПериодов=Неопределено;
		
	Иначе
		
		ПериодОтчета=ОбъектРасчета.ПериодОтчета;
		ПериодОкончания=ОбъектРасчета.ПериодОкончания;
		
	КонецЕсли;		
		
	ЗапросВерсия=Новый Запрос;
	ЗапросВерсия.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ОсновнаяВерсия КАК ОсновнаяВерсия,
	|	ВерсииЗначенийПоказателей.Регистратор
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ ВключатьПомеченныеНаУдаление Тогда
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"	
		|	И НЕ ВерсииЗначенийПоказателей.ПометкаУдаления";
		
	КонецЕсли;
	
	Если  ОбъектРасчета.Свойство("ИдентификаторСеанса") Тогда
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"	
		|И ((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)";
		
		ЗапросВерсия.УстановитьПараметр("ИдентификаторСеанса",ОбъектРасчета.ИдентификаторСеанса);	
		
	Иначе
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"	
		|И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)";
		
	КонецЕсли;
	
	Если ТолькоОсновнаяВалюта Тогда
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
		|	И ВерсииЗначенийПоказателей.Валюта = &Валюта";
		
	КонецЕсли;
	
	ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
	|	И ВерсииЗначенийПоказателей.Организация = &Организация";
	
	УправлениеОтчетамиУХ.ДобавитьОтборПериоды(ЗапросВерсия,"ВерсииЗначенийПоказателей","ПериодОтчета",ПериодОтчета,ПериодОкончания,МассивПериодов,Ложь);
	
	ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Проект = &Проект";
	
	Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТекАналитикаВидаОтчета=?(КопированиеОбъекта,мКопируемыйДокумент["Аналитика"+Индекс],ОбъектРасчета["Аналитика"+Индекс]);			
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"	
		|	И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;	
		ЗапросВерсия.УстановитьПараметр("Аналитика"+Индекс,ТекАналитикаВидаОтчета);
		
	КонецЦикла;

	ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииЗначенийПоказателей.Код УБЫВ";
	
	ЗапросВерсия.УстановитьПараметр("ВидОтчета",ОбъектРасчета.ВидОтчета);
	
	Если КопированиеОбъекта Тогда
		
		ЗапросВерсия.УстановитьПараметр("Валюта", 		мКопируемыйДокумент.ОсновнаяВалюта);
		ЗапросВерсия.УстановитьПараметр("Организация", 	мКопируемыйДокумент.Организация);
		ЗапросВерсия.УстановитьПараметр("Сценарий", 	мКопируемыйДокумент.Сценарий);
		ЗапросВерсия.УстановитьПараметр("Проект", 		мКопируемыйДокумент.Проект);
				
	Иначе
		
		ЗапросВерсия.УстановитьПараметр("Валюта", 		ОбъектРасчета.ОсновнаяВалюта);
		ЗапросВерсия.УстановитьПараметр("Организация", 	ОбъектРасчета.Организация);
		ЗапросВерсия.УстановитьПараметр("Сценарий", 	ОбъектРасчета.Сценарий);	
		ЗапросВерсия.УстановитьПараметр("Проект", 		ОбъектРасчета.Проект);
				
	КонецЕсли;
	
	Результат=ЗапросВерсия.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокЗначений.Добавить(Результат.Ссылка,,Результат.ОсновнаяВерсия);
		
		Если Результат.Регистратор=Неопределено И мКопируемыйДокумент=Неопределено Тогда // Версия записана из контекста сводной таблицы
			
			Если ЗначениеЗаполнено(Ссылка) Тогда // Есть экземпляр отчета, подставим регистратор
				
				ОбъектВерсия=Результат.Ссылка.ПолучитьОбъект();
				ОбъектВерсия.ЭкземплярОтчета=Ссылка;
				ОбъектВерсия.Регистратор=Ссылка;
				ОбъектВерсия.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

Процедура ЗаполнитьРегистраторВерсии(ВерсияСсылка) Экспорт
	
	 ВерсияОбъект=ВерсияСсылка.ПолучитьОбъект();
	 
	 ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(ВерсияОбъект.Организация,ВерсияОбъект.ПериодОтчета,ВерсияОбъект.Сценарий,ВерсияОбъект.ВидОтчета,,Истина,Истина,,ВерсияОбъект.Проект);
	 
	 Если ЗначениеЗаполнено(ЭкземплярОтчета) Тогда
		 
		 ВерсияОбъект.ЭкземплярОтчета=ЭкземплярОтчета;
		 ВерсияОбъект.Регистратор=ЭкземплярОтчета;
		 
		 ВерсияОбъект.Записать();
		 
	КонецЕсли;
		 	
КонецПроцедуры // ЗаполнитьРегистраторВерсии()

Функция ПроверитьНаличиеВидовКурсов(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &Владелец
	|	И (НЕ ПоказателиОтчетов.ПометкаУдаления)
	|	И ПоказателиОтчетов.НеФинансовый = ЛОЖЬ
	|	И ПоказателиОтчетов.ВидКурса В (NULL, НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ПустаяСсылка))
	|	И ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)";
	Запрос.УстановитьПараметр("Владелец", ВидОтчета);
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

Процедура СнятьИндексыСЛогаРаскрытий(ОбъектРасчета) Экспорт
	
	ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Индексы.Очистить();
	
КонецПроцедуры


Функция ПолучитьВерсию(ОбъектРасчета,Отказ, Валюта, ОписаниеВерсии, АктивностьДвижений,ОсновнаяВерсия=Ложь,ЗаписьВДополнительнойВалюте=Ложь) Экспорт
	
	Перем ИдентификаторСеанса;
	Перем ЧерноваяВерсия;
	Перем Регистратор;
	
	ОбъектРасчета.Свойство("ИдентификаторСеанса",	ИдентификаторСеанса);
	ОбъектРасчета.Свойство("ЧерноваяВерсия",		ЧерноваяВерсия);
	ОбъектРасчета.Свойство("Регистратор",			Регистратор);
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ОбъектРасчета.Свойство("Аналитика"+Индекс) И НЕ ЗначениеЗаполнено(ОбъектРасчета["Аналитика"+Индекс]) Тогда
			
			ОбъектРасчета["Аналитика"+Индекс]=Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ВерсияКорректировки=ЗначениеЗаполнено(Регистратор) 
						И ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом()
						И ЭтоДокументКорректировки(Регистратор);
	
	Если (НЕ ОбъектРасчета.СохранятьИсториюИзменений) ИЛИ ВерсияКорректировки Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка,
		|	ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте КАК ЗаписьВДополнительнойВалюте
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.Владелец = &Владелец
		|	И НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.Организация = &Организация
		|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
		|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|	И ВерсииЗначенийПоказателей.ОсновнаяВерсия = &ОсновнаяВерсия
		|	И ВерсииЗначенийПоказателей.Валюта = &Валюта";
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Аналитика"+Индекс+" = &Аналитика"+Индекс;
			
		КонецЦикла;
				
		Запрос.УстановитьПараметр("Владелец",		ОписаниеВерсии);
		Запрос.УстановитьПараметр("Валюта",			Валюта);
		Запрос.УстановитьПараметр("ОсновнаяВерсия",	ОсновнаяВерсия);
		Запрос.УстановитьПараметр("Организация",	ОбъектРасчета.Организация);
		Запрос.УстановитьПараметр("ВидОтчета",		ОбъектРасчета.ВидОтчета);
		Запрос.УстановитьПараметр("ПериодОтчета",	ОбъектРасчета.ПериодОтчета);
		Запрос.УстановитьПараметр("Сценарий",		ОбъектРасчета.Сценарий);
		
		Если ОбъектРасчета.РазделениеПоПроектам Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Проект = &Проект";
			Запрос.УстановитьПараметр("Проект",ОбъектРасчета.Проект);
			
		КонецЕсли;
		
		Если ЧерноваяВерсия=Истина Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.ЧерноваяВерсия";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия";
				
		КонецЕсли;
		
		Если ВерсияКорректировки Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ВерсииЗначенийПоказателей.Регистратор=&Регистратор";
			Запрос.УстановитьПараметр("Регистратор",ОбъектРасчета.Регистратор);
			
		КонецЕсли;		
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если ОбъектРасчета.Свойство("Аналитика"+Индекс) Тогда
				
				Запрос.УстановитьПараметр("Аналитика"+Индекс,ОбъектРасчета["Аналитика"+Индекс]);
				
			Иначе
				
				Запрос.УстановитьПараметр("Аналитика"+Индекс,Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;		
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Если НЕ Результат.ЗаписьВДополнительнойВалюте=ЗаписьВДополнительнойВалюте Тогда
				
				СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ЗаписьВДополнительнойВалюте=ЗаписьВДополнительнойВалюте;
				СправочникОбъект.ОбменДанными.Загрузка=Истина;
				СправочникОбъект.Записать();
				
				Возврат СправочникОбъект.Ссылка;
				
				СправочникОбъект=0;
				
			Иначе
				
				Возврат Результат.Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Версия = Справочники.ВерсииЗначенийПоказателей.СоздатьЭлемент();
	
	Попытка
		
		ОбъектРасчета.Свойство("ЭкземплярОтчета",		Версия.ЭкземплярОтчета);
		ОбъектРасчета.Свойство("Регистратор",			Версия.Регистратор);
		ОбъектРасчета.Свойство("ЧерноваяВерсия",		Версия.ЧерноваяВерсия);
		ОбъектРасчета.Свойство("ИдентификаторСеанса",	Версия.ИдентификаторСеанса);
		Версия.Организация     	= ОбъектРасчета.Организация;
		Версия.ВидОтчета       	= ОбъектРасчета.ВидОтчета;
		Версия.Валюта          	= Валюта;
		Версия.Владелец        	= ОписаниеВерсии;
		Версия.ПериодОтчета    	= ОбъектРасчета.ПериодОтчета;
		Версия.Сценарий        	= ОбъектРасчета.Сценарий;
		
		Если ОбъектРасчета.РазделениеПоПроектам Тогда
			Версия.Проект        	= ОбъектРасчета.Проект;
		КонецЕсли;
		
		Версия.Активность      	= ОбъектРасчета.АктивностьДвижений;
		Версия.ВидОперации		= Справочники.ВидыОпераций.УчетныеОперации;
		Версия.ОсновнаяВерсия	= ОсновнаяВерсия;
		Версия.ЗаписьВДополнительнойВалюте = ЗаписьВДополнительнойВалюте;
		
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			ОбъектРасчета.Свойство("Аналитика"+Индекс,Версия["Аналитика"+Индекс]);
			
		КонецЦикла; 
		
		Версия.Записать();
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка при создании версии показателей: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ,,СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Версия.Ссылка;
	
КонецФункции

Функция ПроверитьВозможностьЗаписиПоКлючевымРеквизитам(ОбъектРасчета, Знач ТекстОшибки="") Экспорт
	
	Если ТекстОшибки="" Тогда
		
		ТекстОшибки = НСтр("ru = 'Вид отчета: %ВидОтчета%
		|		Организация: 			%Организация%
		|		Сценарий: 				%Сценарий%
		|		Период отчета: 			%ПериодОтчета%
		|		Основная валюта:		%ОсновнаяВалюта%
		|		
		|		Значения показателей отчетов не могут быть записаны:'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидОтчета%",		 Строка(ОбъектРасчета.ВидОтчета));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%",		 Строка(ОбъектРасчета.Организация));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Сценарий%",		 Строка(ОбъектРасчета.Сценарий));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ПериодОтчета%",	 Строка(ОбъектРасчета.ПериодОтчета));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОсновнаяВалюта%",	 Строка(ОбъектРасчета.ОсновнаяВалюта));
		
	КонецЕсли;
	
	ПроверкаПройдена=Истина;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ВидОтчета) Тогда
		
		ТекстСообщения = НСтр("ru = '
                              |		- не заполнен реквизит ""Вид отчета""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.Организация) Тогда
		
		ТекстСообщения = НСтр("ru = '
                              |		- не заполнен реквизит ""Организационная единица""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена=Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.Сценарий) Тогда
		
		ТекстСообщения = НСтр("ru = '
		|		- не заполнен реквизит ""Сценарий""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена=Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ПериодОтчета) Тогда
		
		ТекстСообщения = НСтр("ru = '
		|		- не заполнен реквизит ""Период отчета""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена=Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ПериодОкончания) Тогда
		
		ТекстСообщения = НСтр("ru = '
		|		- не заполнен реквизит ""Период окончания отчета""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена=Ложь;
		
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.УправлениеПериодом) Тогда
		
		ТекстСообщения = НСтр("ru = '
		|		- не заполнен реквизит ""Управление периодом отчета""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена=Ложь;
		
	КонецЕсли;
	

	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.ОсновнаяВалюта) Тогда
		
		ТекстСообщения = НСтр("ru = '
		|		- не заполнен реквизит ""Основная валюта""!'");
		ТекстОшибки = ТекстОшибки + ТекстСообщения; 
		
		ПроверкаПройдена=Ложь;
		
	КонецЕсли;
	
	Если НЕ ПроверкаПройдена Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, Истина, , СтатусСообщения.Важное);
		
	КонецЕсли;
	
	Возврат ПроверкаПройдена;
		
КонецФункции // ПроверитьВозможностьЗаписиПоКлючевымРеквизитам()

Процедура УстановитьИндексыНаЛогРаскрытий(ОбъектРасчета) Экспорт
	
	СтрокаИндекс="Показатель,АналитикаВалюта";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		СтрокаИндекс=СтрокаИндекс+",Аналитика"+Индекс;
		
	КонецЦикла;
	
	ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Индексы.Добавить(СтрокаИндекс);
	ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Индексы.Добавить("НомерОперации");
	
КонецПроцедуры

// Определяет дату курса для переданного показателя.
//
Функция ПолучитьДатуИзКэша(ОбъектРасчета,Показатель) Экспорт
	
	Если ОбъектРасчета.КэшДатРасчетаПоказателей = Неопределено Тогда
		
		Если ТипЗнч(ОбъектРасчета)=Тип("Структура") Тогда
			ОбъектРасчета.Вставить("КэшДатРасчетаПоказателей",Новый Соответствие);
		Иначе
			ОбъектРасчета.КэшДатРасчетаПоказателей=Новый Соответствие
		КонецЕсли;
		
	КонецЕсли;
	
	ДатаПоказателя = ОбъектРасчета.КэшДатРасчетаПоказателей[Показатель];
	
	Если ДатаПоказателя = Неопределено Тогда
		
		Если ЗначениеЗаполнено(Показатель.СвязанныйПоказатель) Тогда
			СтрокаПоказателя = ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[Показатель.СвязанныйПоказатель];
			ДатаПоказателя = ?(СтрокаПоказателя = Неопределено, ОбъектРасчета.Дата, СтрокаПоказателя.Значение);
		Иначе
			ДатаПоказателя = ОбъектРасчета.Дата;
		КонецЕсли;
		
		ОбъектРасчета.КэшДатРасчетаПоказателей.Вставить(Показатель, ДатаПоказателя);
		
	КонецЕсли;
	
	Возврат ДатаПоказателя;
	
КонецФункции

Функция ПолучитьИндексСостояния(СостояниеПоказателя) Экспорт
	
	Если СостояниеПоказателя=Перечисления.СостоянияОтчетов.Выполняется Тогда
		
		Возврат 1;
		
	ИначеЕсли СостояниеПоказателя=Перечисления.СостоянияОтчетов.Подготовлен Тогда
		
		Возврат 2;
		
	ИначеЕсли СостояниеПоказателя=Перечисления.СостоянияОтчетов.Утвержден Тогда
		
		Возврат 3;
		
	ИначеЕсли СостояниеПоказателя=Перечисления.СостоянияОтчетов.ЗаписанСОшибкой Тогда
		
		Возврат -1;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли; 
			
КонецФункции

Функция ПолучитьСостояниеПоказателяПоИндексу(ИндексСостояния) Экспорт
	
	Если ИндексСостояния=0 Тогда
		
		Возврат Перечисления.СостоянияОтчетов.Запланирован;
		
	ИначеЕсли ИндексСостояния=1 Тогда
		
		Возврат Перечисления.СостоянияОтчетов.Выполняется;
		
	ИначеЕсли ИндексСостояния=2 Тогда
		
		Возврат Перечисления.СостоянияОтчетов.Подготовлен;
		
	ИначеЕсли ИндексСостояния=3 Тогда
		
		Возврат Перечисления.СостоянияОтчетов.Утвержден;
		
	Иначе		
		
		Возврат Перечисления.СостоянияОтчетов.ЗаписанСОшибкой
		
	КонецЕсли; 
			
КонецФункции

Процедура ПолучитьИтогиПоПоказателямСостояние(ОбъектРасчета,МассивПоказателей) Экспорт
	
	Если МассивПоказателей.Количество()=0 Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ЗапросРаскрытие=Новый Запрос;
	ЗапросРаскрытие.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	ЗапросРаскрытие.Текст="ВЫБРАТЬ * Поместить ПоказателиРаскрытияИтог ИЗ &мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|;
	|ВЫБРАТЬ * Поместить ПоказателиРаскрытия
	|ИЗ ПоказателиРаскрытияИтог КАК ПоказателиРаскрытияИтог 
	|ГДЕ ПоказателиРаскрытияИтог.Показатель В(&МассивПоказателей)";
	
	ЗапросРаскрытие.УстановитьПараметр("мПоказателиРаскрытия",	ОбъектРасчета.мПоказателиРаскрытия);
	ЗапросРаскрытие.УстановитьПараметр("МассивПоказателей",		МассивПоказателей);
	ЗапросРаскрытие.Выполнить();
	
	Для каждого ПоказательИтога  Из МассивПоказателей Цикл
		
		Показатель=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[ПоказательИтога];
		
		СтруктураИтога=ОбщегоНазначенияУХ.ВернутьСтруктуруИтога(Показатель.ВидИтога,Показатель.ТипЗначения);
				
		ЗапросРаскрытие.Текст="ВЫБРАТЬ";
		
		Если НЕ СтруктураИтога=Неопределено Тогда
			
			ЗапросРаскрытие.Текст=ЗапросРаскрытие.Текст+"
			|"+СтруктураИтога.ТекстИтога+"(ВЫРАЗИТЬ(ПоказателиРаскрытия.Значение КАК "+СтруктураИтога.ТипЗначения+")) КАК Значение,";
			
		КонецЕсли;
		
		ЗапросРаскрытие.Текст=ЗапросРаскрытие.Текст+"
		|0 КАК ПустоеЗначение
		|ИЗ ПоказателиРаскрытия КАК ПоказателиРаскрытия
		|ГДЕ ПоказателиРаскрытия.Показатель=&ПоказательОтчета";
		
		ЗапросРаскрытие.УстановитьПараметр("ПоказательОтчета",ПоказательИтога);
		
		Результат=ЗапросРаскрытие.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Если СтруктураИтога=Неопределено Тогда
				
				СтруктураЗначение=Новый Структура("Значение",Показатель.Значение);
			
			ИначеЕсли Результат.Значение=Null Тогда
				
				СтруктураЗначение=Новый Структура("Значение",0);
				
			Иначе
				
				СтруктураЗначение=Новый Структура("Значение",Результат.Значение);
				
			КонецЕсли;
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,Показатель,СтруктураЗначение,ОбъектРасчета.РежимКорректировки);
			
		КонецЕсли;
				
	КонецЦикла;
	
	ЗапросРаскрытие.Текст="Уничтожить ПоказателиРаскрытия";
	ЗапросРаскрытие.Выполнить();
	
КонецПроцедуры // ПолучитьИтогиПоПоказателямСостояние()
 

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СОХРАНЕННЫМИ НАСТРОЙКАМИ.
//

Функция ЭтоПроизвольныйОтчет(ОтчетОбъект = Неопределено)
	
	Если ОтчетОбъект <> Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОтчетОбъект));
		Если ТипЗнч(ОтчетОбъект) = Тип("Структура") 
		 ИЛИ МетаданныеОбъекта <> Неопределено 
		   И Метаданные.Справочники.Найти(Метаданные.НайтиПоТипу(ТипЗнч(ОтчетОбъект)).Имя) <> Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат (СтрНайти(Метаданные.Имя, "Консолидация") > 0);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОтчетОбъект)) Тогда
			Возврат ОтчетОбъект;
		Иначе
			СсылкаНаОбъект = ?(ОтчетОбъект.ЭтоНовый(), ОтчетОбъект.ПолучитьСсылкуНового(), ОтчетОбъект.Ссылка); 
			Возврат СсылкаНаОбъект;
		КонецЕсли;
	#Если Клиент Тогда
	ИначеЕсли ТипЗнч(ОтчетОбъект) = Тип("Форма") Тогда
		Возврат Строка(ОтчетОбъект.ДокументСписок);
	#КонецЕсли
	Иначе
		
		Если Метаданные.Отчеты.Содержит(ОтчетОбъект.Метаданные()) ИЛИ ОтчетОбъект.Метаданные().Имя="ПроизвольныеОтчеты" Тогда 	
			Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
		ИначеЕсли  Метаданные.Обработки.Содержит(ОтчетОбъект.Метаданные()) Тогда
			Возврат "ОбработкаОбъект." + ОтчетОбъект.Метаданные().Имя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ, ОБЩИЕ ДЛЯ ВИДОВ ОТЧЕТОВ И ТРАНСФОРМАЦИОННЫХ КОРРЕКТИРОВОК

Процедура СкопироватьПодчиненныеОбъекты(Ссылка,ЗначениеКопирования,ПараметрыКопирования,Отказ) Экспорт
	
	КопированиеПравилОбработки = Ложь;
	
	НовыеСтроки		= Новый Массив;
	НовыеПоказатели = Новый Массив;
	
	Для Каждого ПараметрКопирования Из ПараметрыКопирования Цикл
				
		Если ПараметрКопирования = "ПравилаОбработки" Тогда
			КопированиеПравилОбработки = Истина;
			Продолжить;
		КонецЕсли;
		
		КопированиеБланковОтчетов = ПараметрКопирования = "БланкиОтчетов";
		Если Метаданные.Справочники.Найти(ПараметрКопирования) = Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось найти справочник %ПараметрКопирования%. Пропущено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПараметрКопирования%", Строка(ПараметрКопирования));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Продолжить;
		Иначе
			// Объект метаданных найден. Выполняем операцию далее.
		КонецЕсли;
		МетаданныеСправочника = Метаданные.Справочники[ПараметрКопирования];
		ГруппыВозможны = МетаданныеСправочника.Иерархический И МетаданныеСправочника.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов;
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ТаблицаКопирования.*
		|ИЗ
		|	Справочник." + ПараметрКопирования + " КАК ТаблицаКопирования
		|ГДЕ
		|	ТаблицаКопирования.Владелец = &КопируемыйОбъект
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка " + ?(Метаданные.Справочники[ПараметрКопирования].Иерархический, "ИЕРАРХИЯ", "ВОЗР"));
		
		Запрос.УстановитьПараметр("КопируемыйОбъект", ЗначениеКопирования);
		Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.Прямой);
		
		Если КопированиеБланковОтчетов Тогда
			
			БланкДляОтображенияПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, ЗначениеКопирования);
			БланкДляИмпортаПоУмолчанию     = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта    , ЗначениеКопирования);
			БланкСводнойТаблицыПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы, ЗначениеКопирования);
			БланкДляОтображенияМногопериодныйПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный, ЗначениеКопирования);
			БланкПравилаПроверкиПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки, ЗначениеКопирования);
			
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			НовЭл=Выборка.Ссылка.Скопировать();			
			НовЭл.Владелец = Ссылка;
			
			Если КопированиеБланковОтчетов Тогда
				
				Если НЕ НовЭл.ЭтоГруппа Тогда
					
					НовЭл.Утвержден = Ложь;
					
					Справочники.БланкиОтчетов.СохранитьМакетВХранилище(НовЭл, Выборка.Макет.Получить());
					
				КонецЕсли;				
				
			КонецЕсли;
			
			Если МетаданныеСправочника.Иерархический И ЗначениеЗаполнено(Выборка.Родитель) Тогда
				НовЭл.Родитель = Справочники[ПараметрКопирования].НайтиПоКоду(Выборка.Родитель.Код, , , Ссылка);
			КонецЕсли;
			
			Если ПараметрКопирования="СтрокиОтчетов" И ЗначениеЗаполнено(НовЭл.ГруппаРаскрытия) Тогда
				
				НовЭл.ГруппаРаскрытия = Справочники.ГруппыРаскрытия.НайтиПоКоду(НовЭл.ГруппаРаскрытия.Код, , , Ссылка);
				
			ИначеЕсли ПараметрКопирования="ПоказателиОтчетов" Тогда
				
				Если ЗначениеЗаполнено(НовЭл.СвязанныйПоказатель) Тогда
					НовЭл.СвязанныйПоказатель = Справочники.ПоказателиОтчетов.НайтиПоКоду(НовЭл.СвязанныйПоказатель.Код, , , Ссылка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовЭл.Колонка) Тогда
					НовЭл.Колонка = Справочники.КолонкиОтчетов.НайтиПоКоду(НовЭл.Колонка.Код, , , Ссылка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовЭл.Строка) Тогда
					НовЭл.Строка = Справочники.СтрокиОтчетов.НайтиПоКоду(НовЭл.Строка.Код, , , Ссылка);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(НовЭл.ГруппаРаскрытия) Тогда
					НовЭл.ГруппаРаскрытия = Справочники.ГруппыРаскрытия.НайтиПоКоду(НовЭл.ГруппаРаскрытия.Код, , , Ссылка);
				КонецЕсли;				
				
			КонецЕсли;	
			
			Попытка
				НовЭл.Записать();
				
				Если КопированиеБланковОтчетов тогда
					
					Если Выборка.РежимБланка = 1 Тогда
						
						СписокПараметровКопирования = новый СписокЗначений();
						
						СписокПараметровКопирования.Добавить("СтрокиБланка", "Состав строк", Истина);
						СписокПараметровКопирования.Добавить("КолонкиБланка", "Состав показателей", Истина);
						СписокПараметровКопирования.Добавить("СтруктураОсейБланка", "Расположение осей бланка", Истина);
						СписокПараметровКопирования.Добавить("НастройкаШкалыПериодов", "Настройка периодов", Истина);
						СписокПараметровКопирования.Добавить("НастройкиАналитик", "Настройки аналитик", Истина);
												
						РасширениеБизнесЛогикиУХ.СкопироватьНастройкиБланкаСТ(Выборка.Ссылка, НовЭл.Ссылка, СписокПараметровКопирования);
						
					ИначеЕсли Выборка.РежимБланка = 2 Тогда
						
						РасширениеБизнесЛогикиУХ.СкопироватьНастройкиБланкаМП(Выборка.Ссылка, НовЭл.Ссылка);
	
					КонецЕсли;
					
				КонецЕсли;
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось записать элемент справочника %Синоним% с кодом %Код% по причине: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Синоним%", Строка(МетаданныеСправочника.Синоним));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Код%", Строка(Выборка.Код));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОписаниеОшибки()));
				Сообщить(ТекстСообщения, СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецПопытки;
			
			Если КопированиеБланковОтчетов Тогда
				
				Если Выборка.Ссылка = БланкДляОтображенияПоУмолчанию Тогда
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(НовЭл.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
				КонецЕсли;
				
				Если Выборка.Ссылка = БланкДляИмпортаПоУмолчанию Тогда
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(НовЭл.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта);
				КонецЕсли;
				
				Если Выборка.Ссылка = БланкСводнойТаблицыПоУмолчанию Тогда
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(НовЭл.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
				КонецЕсли;
				
				Если Выборка.Ссылка = БланкДляОтображенияМногопериодныйПоУмолчанию Тогда
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(НовЭл.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный);
				КонецЕсли;
								
			ИначеЕсли ПараметрКопирования = "ПравилаПроверки" Тогда
				
				Если Выборка.Ссылка = БланкПравилаПроверкиПоУмолчанию Тогда
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(НовЭл.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки);
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
	КонецЦикла;
				
	Если КопированиеПравилОбработки Тогда
		
		ПравилоОбработкиПоУмолчанию = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки,ЗначениеКопирования);
		
		Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.ПравилаОбработки ГДЕ Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", ЗначениеКопирования);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ОбъектОснование=Выборка.Ссылка.ПолучитьОбъект();
			
			НовыйОбъект 			= ОбъектОснование.Скопировать();
			НовыйОбъект.Утверждено 	= Ложь;
			НовыйОбъект.Владелец 	= Ссылка;
			НовыйОбъект.мОснование	= ОбъектОснование;
			НовыйОбъект.Записать();
			
			Если Выборка.Ссылка = ПравилоОбработкиПоУмолчанию Тогда
				УстановитьЭлементПоУмолчаниюДляВидаОтчета(НовыйОбъект.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры // СкопироватьПодчиненныеОбъекты()

Процедура ПроверитьНаличиеЭлементовНастройки(Ссылка,СтруктураЭлементов,Отказ=Ложь) Экспорт
	
	Попытка
		
		ЗапросПоиск=Новый Запрос;
		ЗапросПоиск.УстановитьПараметр("Владелец",Ссылка);
		
		Если СтруктураЭлементов.Свойство("БланкОтчета") Тогда
			
			ЗапросПоиск.Текст=
			"ВЫБРАТЬ
			|	БланкиОтчетов.Ссылка
			|ИЗ
			|	Справочник.БланкиОтчетов КАК БланкиОтчетов
			|ГДЕ
			|	БланкиОтчетов.Владелец = &Владелец";
			
			Если ЗапросПоиск.Выполнить().Пустой() Тогда
				
				ПодчиненныйЭлемент = Нстр("ru = 'Бланк отчета'");
				
				БланкОтчета = Справочники.БланкиОтчетов.СоздатьЭлемент();
				БланкОтчета.Наименование = СокрЛП(Ссылка.Наименование);
				БланкОтчета.Владелец = Ссылка;
				БланкОтчета.Утвержден = Ложь;
				БланкОтчета.Записать();
				УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчета.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
				УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчета.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта);
									
				//Сводная таблица
				Если  ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
					ПериодичностьБюджетирования = ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("ПериодичностьБюджетирования");
					БланкОтчета = Справочники.БланкиОтчетов.СоздатьЭлемент();
					БланкОтчета.РежимБланка = 1;
					БланкОтчета.Наименование =СтрШаблон(Нстр("ru = '%1(cводная таблица)'"), СокрЛП(Ссылка.Наименование));
					БланкОтчета.Владелец = Ссылка;
					БланкОтчета.Утвержден = Ложь;						
					БланкОтчета.Периодичность = ПериодичностьБюджетирования;
					БланкОтчета.ЕдиницаИзмеренияПоУмолчанию = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1");
					БланкОтчета.ИерархияГруппировокСтрок = Истина;
					БланкОтчета.ИерархияГруппировокКолонок = Ложь;
					БланкОтчета.Записать();
					СоздатьНастройкиНовогоБланка(БланкОтчета.Ссылка);		
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчета.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
					
				КонецЕсли;			
			
				//Многопериодный бланк
				Если  ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
					БланкОтчета = Справочники.БланкиОтчетов.СоздатьЭлемент();
					БланкОтчета.Наименование = СтрШаблон(Нстр("ru = '%1(многопериодный)'"), СокрЛП(Ссылка.Наименование));
					БланкОтчета.Владелец = Ссылка;
					БланкОтчета.Утвержден = Ложь;
					БланкОтчета.РежимБланка = 2;
					БланкОтчета.БланкДляОтображения = Истина;
					БланкОтчета.Записать();
					УстановитьЭлементПоУмолчаниюДляВидаОтчета(БланкОтчета.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображенияМногопериодный);
					
				КонецЕсли;		
			
			КонецЕсли;		
		КонецЕсли;
		
		Если СтруктураЭлементов.Свойство("ПравилоПроверки") Тогда
			
			ЗапросПоиск.Текст =
			"ВЫБРАТЬ
			|	ПравилаПроверки.Ссылка
			|ИЗ
			|	Справочник.ПравилаПроверки КАК ПравилаПроверки
			|ГДЕ
			|	ПравилаПроверки.Владелец = &Владелец";
			
			Результат = ЗапросПоиск.Выполнить();
			Если Результат.Пустой() Тогда
				
				ПодчиненныйЭлемент = Нстр("ru = 'Правило проверки'");
				
				ПравилоПроверкиОбъект = Справочники.ПравилаПроверки.СоздатьЭлемент();
				ПравилоПроверкиОбъект.Наименование = СокрЛП(Ссылка.Наименование);
				ПравилоПроверкиОбъект.Владелец = Ссылка;
				ПравилоПроверкиОбъект.Записать();
				
				ПравилоПроверки = ПравилоПроверкиОбъект.Ссылка;
				УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоПроверки, Ссылка, Перечисления.ЭлементыНастройкиОтчета.ПравилоПроверки);
				
			Иначе
				
				ПравилоПроверки = Результат.Выгрузить()[0].Ссылка;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтруктураЭлементов.Свойство("ПравилоОбработки") Тогда
			
			ЗапросПоиск.Текст =
			"ВЫБРАТЬ
			|	ПравилаОбработки.Ссылка
			|ИЗ
			|	Справочник.ПравилаОбработки КАК ПравилаОбработки
			|ГДЕ
			|	ПравилаОбработки.Владелец = &Владелец";
			
			Если ЗапросПоиск.Выполнить().Пустой() Тогда
				
				ПодчиненныйЭлемент = Нстр("ru = 'Правило обработки'");
				
				ПравилоОбработки = Справочники.ПравилаОбработки.СоздатьЭлемент();
				ПравилоОбработки.Наименование = СокрЛП(Ссылка.Наименование);
				ПравилоОбработки.ПравилоПроверки = ПравилоПроверки;
				
				Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ПланСчетов",Ссылка) И ЗначениеЗаполнено(Ссылка.ПланСчетов) Тогда
					
					Если ЗначениеЗаполнено(Ссылка.РегистрБухгалтерии) Тогда
						
						ПравилоОбработки.ТипБД							= Ссылка.РегистрБухгалтерии.Владелец;
						ПравилоОбработки.ПланСчетовПоУмолчанию			= Ссылка.ПланСчетов;
						ПравилоОбработки.РегистрБухгалтерииПоУмолчанию	= Ссылка.РегистрБухгалтерии;
						
						Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("РесурсРегистраИсточник",Ссылка) Тогда
							ПравилоОбработки.РесурсРегистраПоУмолчанию      = Ссылка.РесурсРегистраИсточник;
						КонецЕсли;
						
						Если ПравилоОбработки.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ Тогда
							
							ПравилоОбработки.СпособПолучения				= Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии;
							
						ИначеЕсли ПравилоОбработки.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
							
							ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов;
							
						Иначе
							
							ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии;
							
						КонецЕсли;
						
					Иначе
						
						ВидОтчетаОСВ=Справочники.ВидыОтчетов.ПолучитьВидОтчетаОСВ(Ссылка.ПланСчетов);
						
						Если ЗначениеЗаполнено(ВидОтчетаОСВ) И (НЕ ВидОтчетаОСВ=Ссылка) Тогда
							
							ПравилоОбработки.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета;
							ПравилоОбработки.ВидОтчетаОСВ=ВидОтчетаОСВ;
							ПравилоОбработки.ПланСчетовПоУмолчанию=Ссылка.ПланСчетов;
							
						Иначе
							
							ТекстСообщения = НСтр("ru = 'Не удалось определить источник информации для заполнения данных по остаткам и оборотам (вид отчета, являющийся основным для плана счетов %ПланСчетов%).'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПланСчетов%", Строка(Ссылка.ПланСчетов));
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Информация);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
										
				ПравилоОбработки.Утверждено = Ложь;
				ПравилоОбработки.Владелец = Ссылка;
				ПравилоОбработки.Записать();
				
				УстановитьЭлементПоУмолчаниюДляВидаОтчета(ПравилоОбработки.Ссылка, Ссылка, Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Исключение
		
		Инфо = ИнформацияОбОшибке();
		
		ТекстСообщения = НСтр("ru = 'Ошибка при создании подчиненного %ПодчиненныйЭлемент% 
		|				%Описание% %Причина%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПодчиненныйЭлемент%", Строка(ПодчиненныйЭлемент));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Описание%", Строка(Инфо.Описание));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", Строка(Инфо.Причина));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, , СтатусСообщения.Важное);		
		
	КонецПопытки;
	
КонецПроцедуры // ПроверитьНаличиеЭлементовНастройки()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьЗапросыДляВычисленияПоПоказателям(ОбъектРасчета);
	
	мОперанды=ПолучитьТаблицуОперандов(ОбъектРасчета.ПравилоОбработки);
												
	
	ДанныеДляРасчета=ПодготовитьОперандыДляПолученияДанных(мОперанды,
										,
										,
										,
										,
										,Истина);
										
	Возврат ДанныеДляРасчета.мТабПоказателиЗапросы;									
										
КонецФункции // ПолучитьЗапросыДляВычисленияПоПоказателям()

// Формирует пустую таблицу значений для ТаблицаВыявленныхОшибок.
Функция ИнициализироватьТаблицуВыявленныхОшибок()
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("ОписаниеОшибки");
	РезультатФункции.Колонки.Добавить("Показатель");
	РезультатФункции.Колонки.Добавить("Операнд");
	РезультатФункции.Колонки.Добавить("ДанныеРасчета");
	РезультатФункции.Колонки.Добавить("Процедура");
	Возврат РезультатФункции;
КонецФункции

// Формирует пустую таблицу значений РабочаяТаблица по колонкам КоллекцияКолонокВход.
Функция ИнициализироватьРабочуюТаблицу(КоллекцияКолонокВход)
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	Для Каждого Кол Из КоллекцияКолонокВход Цикл
		
		Если НЕ (Кол.Имя = "Показатель" ИЛИ Кол.Имя = "Значение") Тогда // Показатель один.
			
			РабочаяТаблица.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РабочаяТаблица.Колонки.Добавить("ИтогПоПоказателю", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Возврат РабочаяТаблица;
КонецФункции

Процедура ПроверитьСбросииАктуальностьПараметрики(ОбъектРасчета) Экспорт
	
	Если ОбъектРасчета.ДанныеПараметрикиАктуальны Тогда
		
		Если НЕ ПолучитьДанныеПараметрическойНастройки(ОбъектРасчета.ПравилоОбработки,Истина) Тогда
			
			ОбъектРасчета.ДанныеПараметрикиАктуальны=Ложь;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ПроверитьАктуальностьПараметрики() 

// Процедура отрабатывает при вызове методов заполнения или вычисления показателей отчета
//
Процедура ОбработатьПоПараметрическойНастройке(ОбъектРасчета,РежимОбработки,МассивКодовПоказателей=Неопределено) Экспорт
		
	ОбъектРасчета.ТаблицаВыявленныхОшибок = ИнициализироватьТаблицуВыявленныхОшибок();
	
	ПроверитьСбросииАктуальностьПараметрики(ОбъектРасчета);
		
	Если НЕ ОбъектРасчета.ДанныеПараметрикиАктуальны Тогда
		ПодготовитьДанныеПараметрическойНастройки(ОбъектРасчета,,РежимОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
	КонецЕсли;
	
	Если РежимОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение Тогда
		
		ФлагОшибкиИмпорта = Ложь;
		ОбъектРасчета.ОбработанныеОперанды.Очистить();
		
		Если ОбъектРасчета.мТабПоказателиЗапросы = Неопределено Тогда
			
			ПодготовитьДанныеПараметрическойНастройки(ОбъектРасчета);
			
		КонецЕсли;
		
		Если ОбъектРасчета.мТабПоказателиЗапросы = Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
		Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") И (ОбъектРасчета.мТабПоказателиЗапросыАнализ = Неопределено) Тогда
			
			ОбъектРасчета.мТабПоказателиЗапросыАнализ = ПолучитьЗапросыДляВычисленияПоПоказателям(ОбъектРасчета);
			
		КонецЕсли;
			
		// Готовим таблицы данных по параметрически настроенным операндам	
		Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") Тогда
			ТаблицаПоказателиЗапросы = ОбъектРасчета.мТабПоказателиЗапросыАнализ;
		Иначе
			ТаблицаПоказателиЗапросы = ОбъектРасчета.мТабПоказателиЗапросы;
		КонецЕсли;
		ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета, ТаблицаПоказателиЗапросы);
		
		Если ОбъектРасчета.ФлагОшибкиИмпорта = Истина Тогда
			
			ТекстСообщения = НСтр("ru = 'Возникли ошибки при подготовке данных отчета.
                                  |Заполнение прервано.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
			
			Если ОбъектРасчета.мРасширеннаяДиагностикаВключена Тогда
				ПроверитьЗаполнениеТаблицыОперандов(ОбъектРасчета);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Подготовим макет таблицы для расчета
	
	ЕстьПроизвольныйКод = Ложь;
	РабочаяТаблица = ИнициализироватьРабочуюТаблицу(ОбъектРасчета.мПоказателиРаскрытия.Колонки);
	
	// Рассчитаем показатели
	
	Если ОбъектРасчета.мПоказателиДляОбработки = Неопределено Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось определить порядок обработки показателей. Проверьте формулы расчета'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если (Не ОбъектРасчета.ПоказателиДляЗаполнения = Неопределено) И (РежимОбработки = Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение) Тогда
		
		Для Каждого ПоказательОбработки ИЗ ОбъектРасчета.мПоказателиДляОбработки Цикл
			
			Если Не ОбъектРасчета.ПоказателиДляЗаполнения.Найти(ПоказательОбработки.Показатель) = Неопределено Тогда
				
				Если ПоказательОбработки.ПроизвольныйКод Тогда
					ЕстьПроизвольныйКод = Истина;
				КонецЕсли;
				
				РассчитатьЗначениеПоказателя(ОбъектРасчета, РежимОбработки, ПоказательОбработки, РабочаяТаблица);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли МассивКодовПоказателей = Неопределено Тогда
		
		Для Каждого ПоказательОбработки ИЗ ОбъектРасчета.мПоказателиДляОбработки Цикл
			
			Если ОбъектРасчета.ТрансформационнаяКорректировка 
				И ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[ПоказательОбработки.Показатель]=Неопределено  Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПоказательОбработки.ПроизвольныйКод Тогда
				ЕстьПроизвольныйКод = Истина;
			КонецЕсли;
			
			РассчитатьЗначениеПоказателя(ОбъектРасчета, РежимОбработки, ПоказательОбработки, РабочаяТаблица);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Код ИЗ МассивКодовПоказателей Цикл
			
			ПоказательОбработки = ОбъектРасчета.мПоказателиДляОбработки.Найти(Код, "Код");
			
			Если Не ПоказательОбработки = Неопределено Тогда
				
				Если ПоказательОбработки.ПроизвольныйКод Тогда
					ЕстьПроизвольныйКод = Истина;
				КонецЕсли;
				
				РассчитатьЗначениеПоказателя(ОбъектРасчета, РежимОбработки, ПоказательОбработки, РабочаяТаблица);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЕстьПроизвольныйКод Тогда
		
		ОбновитьСтруктуруПоказателей(ОбъектРасчета);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоПараметрическойНастройке()


Процедура РассчитатьЗначениеПоказателя(ОбъектРасчета,РежимОбработки,ПоказательОбработки,РабочаяТаблица) Экспорт
	                                                                                                                                           
	Если  (РежимОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение И НЕ (ПоказательОбработки.СпособОбработки=РежимОбработки  ИЛИ ПоказательОбработки.ПоказателиТекущегоОтчета))
		ИЛИ (РежимОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление И НЕ(ПоказательОбработки.СпособОбработки=РежимОбработки ИЛИ ПоказательОбработки.ПоказателиТекущегоОтчета))
		ИЛИ ПустаяСтрока(ПоказательОбработки.Процедура) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбъектРасчета.мРасширеннаяДиагностикаВключена Тогда
		
		ОбъектРасчета.ТаблицаВыявленныхОшибок = ИнициализироватьТаблицуВыявленныхОшибок();
		
	КонецЕсли;
	
	Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") Тогда
		
		НачалоПолучения=ТекущаяУниверсальнаяДатаВМиллисекундах();
		
	КонецЕсли;
	
	СтрПоказательИтог=ОбъектРасчета.мСоответствиеДляПоискаПоССылке[ПоказательОбработки.Показатель];
	
	Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ВычислениеВДополнительнойВалюте") Тогда
		
		Если СтрПоказательИтог.НеФинансовый ИЛИ (НЕ СтрПоказательИтог.ЧисловойПоказатель) Тогда
			
			Возврат;
			
		КонецЕсли;
			
	КонецЕсли;
		
	Если (НЕ РабочаяТаблица.Колонки.Найти("Значение")=Неопределено) Тогда
		РабочаяТаблица.Колонки.Удалить("Значение");
	КонецЕсли;
	
	РабочаяТаблица.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
	
	Если ПоказательОбработки.ПроизвольныйКод Тогда
		
		РасчетВыполнен=ВычислитьМодульПоказателя(ОбъектРасчета,ПоказательОбработки);
		
	Иначе
		
		Если Не ОбъектРасчета.РежимКорректировки Тогда
			ОчиститьРаскрытие(ОбъектРасчета,ПоказательОбработки.Показатель);
		КонецЕсли;
		
		Если ПоказательОбработки.ПоказателиТекущегоОтчета И (НЕ ПоказательОбработки.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление) Тогда
			ПолучитьТекущиеЗначенияОперандов(ОбъектРасчета,ПоказательОбработки.Показатель);
		КонецЕсли;
		
		РассчитатьПараметрическиНастроенныйПоказатель(ОбъектРасчета,ПоказательОбработки,РабочаяТаблица.СкопироватьКолонки(),СтрПоказательИтог,РежимОбработки);
		
	КонецЕсли;
	
	Если НЕ СтрПоказательИтог.ТипЗначения=ОбъектРасчета.ТипЗначенияЧисло Тогда
		ИзмененНечисловойПоказатель=Истина;
	КонецЕсли;
	
	Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") Тогда
		
		КонецПолучения=ТекущаяУниверсальнаяДатаВМиллисекундах();
		
		НоваяСтрока=ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Добавить();
		НоваяСтрока.РасчетПоказателя=КонецПолучения-НачалоПолучения;
		НоваяСтрока.Показатель=ПоказательОбработки.Показатель;
		
	КонецЕсли;	
	
КонецПроцедуры // 

Процедура ОчиститьРаскрытие(ОбъектРасчета,Показатель) Экспорт
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Показатель",Показатель);
	
	МассивРаскрытия=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрРаскрытия ИЗ МассивРаскрытия Цикл
		
		ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,Неопределено,СтрРаскрытия);
		
	КонецЦикла;
	
	Если ОбъектРасчета.ТрансформационнаяКорректировка Тогда
		
		МассивПроводок=ОбъектРасчета.ПроводкиДокумента.НайтиСтроки(Новый Структура("ШаблонПроводки",Показатель));
		
		Для Каждого Строка ИЗ МассивПроводок Цикл
			
			ОбъектРасчета.ПроводкиДокумента.Удалить(Строка);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОчиститьРаскрытие()

Процедура ПодготовитьДанныеПараметрическойНастройки(ОбъектРасчета,Показатель = Неопределено,ТолькоПравилаПересчета=Ложь) Экспорт
	
	КонтекстОтчета=(ОбъектРасчета.ТабКорректировок=Неопределено); // работаем с экземпляром отчета их его контекста
	
	Если Показатель = Неопределено Тогда
		
		СохраненныеДанные=ПолучитьДанныеПараметрическойНастройки(ОбъектРасчета.ПравилоОбработки,,ТолькоПравилаПересчета);
		
		Если СохраненныеДанные=Неопределено Тогда
			
			СохраненныеДанные=Новый Структура;
			
			СохраненныеДанные.Вставить("мПоказателиДляОбработки",Новый ТаблицаЗначений);
			СохраненныеДанные.Вставить("мОперанды",Новый ТаблицаЗначений);
			СохраненныеДанные.Вставить("мТабПоказателиЗапросы",Новый ТаблицаЗначений);
			СохраненныеДанные.Вставить("мСоответствиеОперандовИПоказателейОтбора");
			СохраненныеДанные.Вставить("ЕстьОбращениеКВИБ");
			СохраненныеДанные.Вставить("мТаблицаПересчета");
			СохраненныеДанные.Вставить("мПоказателиОбязательныеКПересчету");
			
			СформироватьДанныеРегистраПараметрическихНастроек(ОбъектРасчета.ПравилоОбработки,Истина,СохраненныеДанные,ТолькоПравилаПересчета);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если КонтекстОтчета Тогда
		
		Если СохраненныеДанные=Неопределено Тогда
			
			СохраненныеДанные=ПолучитьДанныеПараметрическойНастройки(ОбъектРасчета.ПравилоОбработки,,ТолькоПравилаПересчета);
			
			Если СохраненныеДанные=Неопределено Тогда
				
				СохраненныеДанные=Новый Структура;
				
				СохраненныеДанные.Вставить("мПоказателиДляОбработки",Новый ТаблицаЗначений);
				СохраненныеДанные.Вставить("мОперанды",Новый ТаблицаЗначений);
				СохраненныеДанные.Вставить("мТабПоказателиЗапросы",Новый ТаблицаЗначений);
				СохраненныеДанные.Вставить("мСоответствиеОперандовИПоказателейОтбора");
				СохраненныеДанные.Вставить("ЕстьОбращениеКВИБ");
				СохраненныеДанные.Вставить("мТаблицаПересчета");
				СохраненныеДанные.Вставить("мПоказателиОбязательныеКПересчету");
				
				СформироватьДанныеРегистраПараметрическихНастроек(ОбъектРасчета.ПравилоОбработки,Истина,СохраненныеДанные,ТолькоПравилаПересчета);
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Получаем данные, сохраненные на этапе настройки правила обработки.
		ОбъектРасчета.мПоказателиДляОбработки=СохраненныеДанные.мПоказателиДляОбработки;
		ОбъектРасчета.мТаблицаПересчета=СохраненныеДанные.мТаблицаПересчета;
		ОбъектРасчета.мПоказателиОбязательныеКПересчету=СохраненныеДанные.мПоказателиОбязательныеКПересчету;
		
	Иначе
		
		ОбъектРасчета.мПоказателиДляОбработки=ПолучитьПорядокКорректировкиПоказателей(ОбъектРасчета.ТабКорректировок,ОбъектРасчета.ВидОтчета,ОбъектРасчета.ПравилоОбработки);
		
	КонецЕсли;
	
	Если ОбъектРасчета.мПоказателиДляОбработки=Неопределено ИЛИ ОбъектРасчета.мПоказателиДляОбработки.Колонки.Количество()=0 Тогда
		
		ТекстСообщения = НСтр("ru = '%ШапкаОшибки%
		|не сформированы данные параметрической настройки по правилу расчета.
		|		Возможно, формулы расчета показателей содержат ошибки. Проверьте формулы расчета и перезапишите правило.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШапкаОшибки%", Строка(ОбщегоНазначенияУХ.ПолучитьШапкуОшибки(ОбъектРасчета)));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат;
		
	КонецЕсли;	
	
	ОбъектРасчета.мПоказателиДляОбработки.Индексы.Добавить("Код");
	
	//Подготовим таблицу для значений операндов
	ИнициализироватьТаблицуЗначенийОперандов(ОбъектРасчета);
	
	// Получим таблицу операндов, используемых при заполнении показателей
	
	Если КонтекстОтчета И Показатель=Неопределено Тогда
		
		Если НЕ ТолькоПравилаПересчета Тогда
			
			ОбъектРасчета.мОперанды									= СохраненныеДанные.мОперанды;
			ОбъектРасчета.мТабПоказателиЗапросы						= СохраненныеДанные.мТабПоказателиЗапросы;
			ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора	= СохраненныеДанные.мСоответствиеОперандовИПоказателейОтбора;
			ОбъектРасчета.ЕстьОбращениеКВИБ							= СохраненныеДанные.ЕстьОбращениеКВИБ;
			
		КонецЕсли;
		
	Иначе
		
		ДанныеОперандов=ПолучитьДанныеОперандовДляРасчета(Истина,
		?(КонтекстОтчета,ОбъектРасчета.ПравилоОбработки,ОбъектРасчета.ШаблонКорректировки),
		?(КонтекстОтчета,Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,Перечисления.СпособыИспользованияОперандов.ДляРучныхКорректировок),
		Показатель);
		
		ОбъектРасчета.мОперанды									= ДанныеОперандов.мОперанды;
		ОбъектРасчета.мТабПоказателиЗапросы						= ДанныеОперандов.мТабПоказателиЗапросы;
		ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора	= ДанныеОперандов.мСоответствиеОперандовИПоказателейОтбора;
		ОбъектРасчета.ЕстьОбращениеКВИБ							= ДанныеОперандов.ЕстьОбращениеКВИБ;								
		
	КонецЕсли;
	
	Если Показатель = Неопределено И ТипЗнч(ОбъектРасчета.мТаблицаПересчета)=Тип("ТаблицаЗначений") Тогда
		ОбъектРасчета.ДанныеПараметрикиАктуальны=Истина;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьДанныеПараметрическойНастройки()

 

// Заполняет таблицу значений операндов формул заполнения показателей
//
Процедура ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,мТабПоказателиЗапросы,ОчищатьТаблицу=Истина) Экспорт
	
	ИнициализироватьТаблицуЗначенийОперандов(ОбъектРасчета);
	
	ТаблицаЗначенийОперанда=ОбъектРасчета.мЗначенияОперандов.СкопироватьКолонки();  // В данную переменную будет помещена таблица значений операнда, вычисленное по произвольному коду
			
	Если ОчищатьТаблицу Тогда
		
		ОбъектРасчета.мЗначенияОперандов.Очистить();
		
	КонецЕсли; 
	
	Если ОбъектРасчета.ЕстьОбращениеКВИБ 
		И Не ОбъектРасчета.ИспользуемаяИБ.ИспользоватьWS Тогда
		
		РасширениеИнтеграцииУХ.ПолучитьСоединениеВИБ(ОбъектРасчета);
		
		Если ОбъектРасчета.База=Неопределено Тогда
			
			ОбъектРасчета.ФлагОшибкиИмпорта=Истина;
			Возврат;
			
		КонецЕсли;
				
	КонецЕсли;
			
	Для Каждого СтрЗапрос ИЗ мТабПоказателиЗапросы Цикл
		
		Если ТипЗнч(СтрЗапрос.ТаблицаОперандов)=Тип("ТаблицаЗначений") Тогда // Формируем построитель запроса для списка показателей
			
			Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") Тогда
				
				НачалоПолучения=ТекущаяУниверсальнаяДатаВМиллисекундах();
				
			КонецЕсли;
			
			Если НЕ (ОбъектРасчета.ПоказателиДляЗаполнения=Неопределено ИЛИ НеобходимостьЗапросаПоОперандам(ОбъектРасчета,СтрЗапрос.ТаблицаОперандов)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
				
				Попытка
					
					ПолучитьДанныеВнутр(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.1", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы Тогда
				
				Попытка
					
					ПолучитьДанныеРегистраВнутр(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.2", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
				
				Попытка
					
					ПолучитьДанныеРегистраБухгалтерииТек(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.2", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда	
				
				Попытка
					
					ПолучитьДанныеВнутрПараметрический(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.3", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				
				Попытка
					
					ПолучитьДанныеПроизвольногоЗапросаВнутр(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.4", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ФункцияНаВстроенномЯзыке Тогда
				
				ТаблицаИсточника=ПолучитьЗначениеОперандаФункция(ОбъектРасчета,СтрЗапрос.ТекстЗапроса);
				
				Если ТипЗнч(ТаблицаИсточника)=Тип("ТаблицаЗначений") Тогда
					
					ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаИсточника,ОбъектРасчета.мЗначенияОперандов);
					
				КонецЕсли;
				
				Если ФлагОшибкиИмпорта Тогда
					Возврат;
				КонецЕсли;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии Тогда
				
				Попытка
					
					РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраБухгалтерииВИБ(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.5", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
								
			ИначеЕсли СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
				
				Попытка
					
					РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраБухгалтерииВИБ77(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.7", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
				
				Попытка
					
					РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраНакопленияВИБ77(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.8", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники Тогда				  
				
				Попытка
					
					РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраНакопленияВИБ(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.9", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
			ИначеЕсли  СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
				
				Попытка
					
					Если ЗначениеЗаполнено(ОбъектРасчета.СтрокаСоединения) Тогда
						
						СтрЗапрос.СтруктураЗапроса.Вставить("СтрокаСоединения",ОбъектРасчета.СтрокаСоединения);	
						РасширениеИнтеграцииУХ.ПолучитьДанныеЗапросаПоADO(ОбъектРасчета,СтрЗапрос);
												
					КонецЕсли;
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов.10", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
					ФлагОшибкиИмпорта = Истина;
					Возврат;
					
				КонецПопытки;
				
				ОбновитьПовторноИспользуемыеЗначения();
				
			КонецЕсли;
			
			Для Каждого СтрОперанд ИЗ СтрЗапрос.ТаблицаОперандов Цикл
				
				ОбъектРасчета.ОбработанныеОперанды.Вставить(СтрОперанд.Ссылка,Истина);
				
			КонецЦикла;
			
			Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") 
				И СтрЗапрос.ТаблицаОперандов.Количество()>0 Тогда
				
				КонецПолучения=ТекущаяУниверсальнаяДатаВМиллисекундах();
				
				СтрОперанд=СтрЗапрос.ТаблицаОперандов[0];
				
				НоваяСтрока=ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Добавить();
				НоваяСтрока.КодОперанда=СтрОперанд.Код;
				НоваяСтрока.РасчетОперандов=КонецПолучения-НачалоПолучения;
				НоваяСтрока.Показатель=СтрОперанд.Показатель;
				
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ОбъектРасчета.ИспользуемаяИБ) И ОбъектРасчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO И Не ОбъектРасчета.База=Неопределено Тогда
		
		Попытка  
			
			ОбъектРасчета.База.Close();
			ОбъектРасчета.База=Неопределено;
			
		Исключение
						
		КонецПопытки;
		
	КонецЕсли;
								
КонецПроцедуры // ПодготовитьТаблицуЗначенийОперандов()

// Возвращает таблицу операндов для заполнения таблицы их значений пооперандно
//
Функция ВернутьТаблицуОперандовДляПроверки(ОбъектРасчета)
	
	ДанныеОперандов=ПолучитьДанныеОперандовДляРасчета(Ложь,
	ОбъектРасчета.ПравилоОбработки,
	Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,
	,
	,
	,
	Ложь);
	
	Возврат ДанныеОперандов.мТабПоказателиЗапросы;
	
КонецФункции // ВернутьТаблицуОперандовДляПроверки()


// Процедура запускается при возникновении исключения в момент заполнения отчета по операндам
// и имитирует операцию заполнения таблицы значений операндов для каждого операнда отдельно
//
Процедура ПроверитьЗаполнениеТаблицыОперандов(ОбъектРасчета) Экспорт
	
	Перем ТаблицаЗначенийОперанда;
	// Сбросим флаг ошибки импорта, чтобы отслеживать его установку при заполнении
	
	ФлагОшибкиИмпорта = Ложь;
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса; // Построитель запроса к регистру "ЗначенияПоказателей";
	ПостроительЗапросаВнутр.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	Если ОбъектРасчета.ЕстьОбращениеКВИБ И Не ОбъектРасчета.ИспользуемаяИБ.ИспользоватьWS Тогда
		
		Попытка
			
			База = РасширениеИнтеграцииУХ.ПолучитьСоединение(ОбъектРасчета.ИспользуемаяИБ, 1);
			
			Если ОбъектРасчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы <> Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
				ЗапросВИБ             = База.NewObject("Запрос");
				ПостроительЗапросаВИБ = База.NewObject("ПостроительЗапроса");
			Иначе
				ПостроительЗапросаВИБ = Неопределено;
			КонецЕсли;
			
		Исключение
			
			ОбновитьПовторноИспользуемыеЗначения();
			СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
			СтрОшибка.ОписаниеОшибки=ОписаниеОшибки();
			ФлагОшибкиИмпорта = Истина;
				
		КонецПопытки;
		
	КонецЕсли;
	
	ТабОперандыПроверка=ВернутьТаблицуОперандовДляПроверки(ОбъектРасчета);
	
	Для Каждого СтрЗапрос ИЗ ТабОперандыПроверка Цикл
		
		Если ТипЗнч(СтрЗапрос.ТаблицаОперандов)=Тип("ТаблицаЗначений") Тогда // Формируем построитель запроса для списка показателей
			
			Если НЕ (ОбъектРасчета.ПоказателиДляЗаполнения=Неопределено ИЛИ НеобходимостьЗапросаПоОперандам(ОбъектРасчета,СтрЗапрос.ТаблицаОперандов)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
				
				Попытка
					
					ПолучитьДанныеВнутр(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстОшибки=ОписаниеОшибки();
					
				КонецПопытки;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=ТекстОшибки;
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				ИначеЕсли ФлагОшибкиИмпорта Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				КонецЕсли;
				
				ФлагОшибкиИмпорта = Ложь;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
				ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений Тогда
				
				Попытка
					
					ПолучитьДанныеРегистраВнутр(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстОшибки=ОписаниеОшибки();
					
				КонецПопытки;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=ТекстОшибки;
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
										
				КонецЕсли;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии Тогда
				
				Попытка
					
					ПолучитьДанныеРегистраБухгалтерииТек(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстОшибки=ОписаниеОшибки();
					
				КонецПопытки;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=ТекстОшибки;
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
										
				КонецЕсли;
								
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда	
				
				Попытка
					
					ПолучитьДанныеВнутрПараметрический(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстОшибки=ОписаниеОшибки();
					
				КонецПопытки;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=ТекстОшибки;
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				ИначеЕсли ФлагОшибкиИмпорта Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				КонецЕсли;
				
				ФлагОшибкиИмпорта = Ложь;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
				
				Попытка
					
					ПолучитьДанныеПроизвольногоЗапросаВнутр(ОбъектРасчета,СтрЗапрос);
					
				Исключение
					
					ТекстОшибки=ОписаниеОшибки();
					
				КонецПопытки;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=ТекстОшибки;
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				ИначеЕсли ФлагОшибкиИмпорта Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				КонецЕсли;
				
				ФлагОшибкиИмпорта = Ложь;
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ФункцияНаВстроенномЯзыке Тогда
				
				Попытка
					
					ТекстЗапросаОперанда=?(ОбъектРасчета.АнализЧувствительности,СтрЗаменить(СтрЗапрос.ТекстЗапроса,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),СтрЗапрос.ТекстЗапроса);
					
					Выполнить(ТекстЗапросаОперанда);
					ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаЗначенийОперанда,ОбъектРасчета.мЗначенияОперандов);
					
				Исключение
					ТекстОшибки=СтрШаблон(Нстр("ru = 'Во время исполнения процедуры вычисления операнда 
					|произошла следующая критическая ошибка:%1%2'"), 
					            	Символы.ПС, ОписаниеОшибки());
					
				КонецПопытки;
				
				Если Не ПустаяСтрока(ТекстОшибки) Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=ТекстОшибки;
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				ИначеЕсли ФлагОшибкиИмпорта Тогда
					
					СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
					СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
					СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
					СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
					ТекстОшибки="";
					
				КонецЕсли;
				
				ФлагОшибкиИмпорта = Ложь;
					
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии Тогда
					
					Попытка
						
						РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраБухгалтерииВИБ(ОбъектРасчета,СтрЗапрос);
						
					Исключение
						
						ТекстОшибки=ОписаниеОшибки();
						
					КонецПопытки;
					
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=ТекстОшибки;
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					ИначеЕсли ФлагОшибкиИмпорта Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					КонецЕсли;
					
					ФлагОшибкиИмпорта = Ложь;
										
				ИначеЕсли СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов Тогда
					
					Попытка
						
						РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраБухгалтерииВИБ77(ОбъектРасчета,СтрЗапрос);
						
					Исключение
						
						ТекстОшибки=ОписаниеОшибки();
						
					КонецПопытки;
					
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=ТекстОшибки;
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					ИначеЕсли ФлагОшибкиИмпорта Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					КонецЕсли;
					
					ФлагОшибкиИмпорта = Ложь;
					
				ИначеЕсли СтрЗапрос.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр Тогда
					
					Попытка
						
						РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраНакопленияВИБ77(ОбъектРасчета,СтрЗапрос);
						
					Исключение
						
						ТекстОшибки=ОписаниеОшибки();
						
					КонецПопытки;
					
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=ТекстОшибки;
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					ИначеЕсли ФлагОшибкиИмпорта Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					КонецЕсли;
					
					ФлагОшибкиИмпорта = Ложь;
					
				ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
					ИЛИ СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос Тогда				  
					
					Попытка
						
						РасширениеИнтеграцииУХ.ПолучитьДанныеРегистраНакопленияВИБ(ОбъектРасчета,СтрЗапрос);
						
					Исключение
						
						ТекстОшибки=ОписаниеОшибки();
						
					КонецПопытки;
					
					Если Не ПустаяСтрока(ТекстОшибки) Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=ТекстОшибки;
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					ИначеЕсли ФлагОшибкиИмпорта Тогда
						
						СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
						СтрОшибка.ОписаниеОшибки=Нстр("ru = 'Ошибка работы с аналитическими раскрытиями'");
						СтрОшибка.Показатель=СтрЗапрос.ТаблицаОперандов[0].Показатель;
						СтрОшибка.Операнд=СтрЗапрос.ТаблицаОперандов[0].Ссылка;
						ТекстОшибки="";
						
					КонецЕсли;
					
					ФлагОшибкиИмпорта = Ложь;
						
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФлагОшибкиИмпорта = Истина;
	
КонецПроцедуры // ПодготовитьТаблицуЗначенийОперандов()

Процедура ОбновитьСтруктуруПоказателей(ОбъектРасчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ
	|	мПоказатели.Ссылка,
	|	мПоказатели.Код,
	|	мПоказатели.Значение
	|ПОМЕСТИТЬ мПоказатели
	|ИЗ
	|	&мПоказатели КАК мПоказатели
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	мПоказатели.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛогИзмененийПоказателей.Ссылка
	|ПОМЕСТИТЬ ИзмененныеПоказатели
	|ИЗ
	|	&ЛогИзмененийПоказателей КАК ЛогИзмененийПоказателей
	|ГДЕ
	|	ЛогИзмененийПоказателей.НомерОперации = &НомерОперации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЛогИзмененийПоказателей.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказатели.Код,
	|	мПоказатели.Значение
	|ИЗ
	|	мПоказатели КАК мПоказатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеПоказатели КАК ИзмененныеПоказатели
	|		ПО мПоказатели.Ссылка = ИзмененныеПоказатели.Ссылка";
	
	Запрос.УстановитьПараметр("мПоказатели",			ОбъектРасчета.мПоказатели);
	Запрос.УстановитьПараметр("НомерОперации",			ОбъектРасчета.НомерТекущейОперации);
	Запрос.УстановитьПараметр("ЛогИзмененийПоказателей",ОбъектРасчета.ЛогИзмененийПоказателей);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбъектРасчета.Показатели[Результат.Код]=Результат.Значение;
		
	КонецЦикла;
		
КонецПроцедуры // ОбновитьСтруктуруПоказателей()

Функция ПолучитьКопиюРаскрытия(ОбъектРасчета,ВосстанавливатьИндекс=Истина) Экспорт
	
	ОбъектРасчета.мПоказателиРаскрытия.Индексы.Очистить();
	КопияРаскрытия=ОбъектРасчета.мПоказателиРаскрытия.Скопировать();
	
	КопияРаскрытия.ЗаполнитьЗначения(ЛОЖЬ,"ИтоговоеЗначение");
	
	Если ВосстанавливатьИндекс Тогда
		УстановитьИндексыПоказателиРаскрытия(ОбъектРасчета);
	КонецЕсли;
	
	Возврат КопияРаскрытия;
	
КонецФункции

Процедура УстановитьИндексыПоказателиРаскрытия(ОбъектРасчета) Экспорт
	
	ИндекснаяСтрока = "";
	Для Инд = 1 По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя) Цикл
		
		Если ОбъектРасчета.мПоказателиРаскрытия.Колонки.Найти("Аналитика" + Инд)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ИндекснаяСтрока = ИндекснаяСтрока + ", Аналитика" + Инд;
		
	КонецЦикла;
		
	ИндекснаяСтрока = "Показатель" + ИндекснаяСтрока;
	
	Если НЕ ОбъектРасчета.мПоказателиРаскрытия.Колонки.Найти("ИндексАналитики")=Неопределено Тогда
		
		ИндекснаяСтрока=ИндекснаяСтрока+",ИндексАналитики";
		
	КонецЕсли;
	
	Если НЕ ОбъектРасчета.мПоказателиРаскрытия.Колонки.Найти("АналитикаВалюта")=Неопределено Тогда
		
		ИндекснаяСтрока=ИндекснаяСтрока+",АналитикаВалюта";
		
	КонецЕсли;
		
	ОбъектРасчета.мПоказателиРаскрытия.Индексы.Добавить(ИндекснаяСтрока);
	
КонецПроцедуры // УстановитьИндексыПоказателиРаскрытия()

// Запускает модуль расчета показателя на исполнение.
// Возвращает Истина, если модуль исполнился без ошибок и Ложь в противном случае.
//
Функция ВычислитьМодульПоказателя(ОбъектРасчета,ТекПоказатель) Экспорт
	
	Попытка
		
		ТекПроцедураПоказателя=?(ОбъектРасчета.АнализЧувствительности,СтрЗаменить(ТекПоказатель.Процедура,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),ТекПоказатель.Процедура);
		
		ОбъектРасчета.ПроизвольнаяПроцедура(ТекПроцедураПоказателя);
		
		ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,ОбъектРасчета.мСоответствиеДляПоискаПоКоду[ТекПоказатель.Код], ОбъектРасчета.Показатели[СокрЛП(ТекПоказатель.Код)]);
		
		Возврат Истина;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Во время исполнения процедуры вычисления показателя %КодПоказателя%
		|		произошла следующая критическая ошибка:
		|        %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(СокрЛП(ТекПоказатель.Код)));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ВычислитьМодульПоказателя", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		Если ОбъектРасчета.мРасширеннаяДиагностикаВключена Тогда
			
			СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
			СтрОшибка.Показатель=ТекПоказатель.Показатель;
			СтрОшибка.ОписаниеОшибки=ОписаниеОшибки();
			ТекстОшибки="";
			
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Процедура ПолучитьТекущиеЗначенияОперандов(ОбъектРасчета,Показатель) Экспорт
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Показатель",Показатель);
	СтруктураПоиска.Вставить("ПоказательТекущегоОтчета",Истина);
	
	Если ОбъектРасчета.мОперанды=Неопределено Тогда
		
		ПодготовитьДанныеПараметрическойНастройки(ОбъектРасчета);
		
	КонецЕсли;
	
	МассивОперандов=ОбъектРасчета.мОперанды.НайтиСтроки(СтруктураПоиска);
	ПостроительЗапроса=Новый ПостроительЗапроса;
	
	// Получим текущие значения показателей отчета
	
	ТекПоказателиРаскрытия=ПолучитьКопиюРаскрытия(ОбъектРасчета);
	
	Для Каждого СтрПоказатель ИЗ ОбъектРасчета.мПоказатели Цикл
		
		НоваяСтрока=ТекПоказателиРаскрытия.Добавить();
		НоваяСтрока.Показатель=СтрПоказатель.Ссылка;
		НоваяСтрока.Значение=СтрПоказатель.Значение;
		НоваяСтрока.ИтоговоеЗначение=Истина;
		
	КонецЦикла;
	
	Для Каждого СтрОперанд ИЗ МассивОперандов Цикл
		
		Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") Тогда
			
			НачалоПолучения=ТекущаяУниверсальнаяДатаВМиллисекундах();
			
		КонецЕсли;
		
		СтруктураОперанды=Новый Структура("КодОперанда",СтрОперанд.Код);
		
		МассивТекущие=ОбъектРасчета.мЗначенияОперандов.НайтиСтроки(СтруктураОперанды);
		
		Для Каждого СтрЗначение ИЗ МассивТекущие Цикл
			
			ОбъектРасчета.мЗначенияОперандов.Удалить(СтрЗначение);
			
		КонецЦикла;
		
		ТабРезультат=ПолучитьТаблицуВнутрТекущий(ОбъектРасчета,СтрОперанд,ТекПоказателиРаскрытия);
		ПолучитьДанныеВнутрТекущий(ОбъектРасчета,ТабРезультат,СтрОперанд);
		
		ОбъектРасчета.ОбработанныеОперанды.Вставить(СтрОперанд.Ссылка,Истина);
		
		Если ОбъектРасчета.ДополнительныеСвойства.Свойство("ТаблицаПроизводительности") Тогда
			
			КонецПолучения=ТекущаяУниверсальнаяДатаВМиллисекундах();
			
			НоваяСтрока=ОбъектРасчета.ДополнительныеСвойства.ТаблицаПроизводительности.Добавить();
			НоваяСтрока.КодОперанда=СтрОперанд.Код;
			НоваяСтрока.РасчетОперандов=КонецПолучения-НачалоПолучения;
			НоваяСтрока.Показатель=СтрОперанд.Показатель;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТекущиеЗначенияОперандов()

Процедура ДобавитьКолонкуДляОперанда(РабочаяТаблица,ИмяКолонки,ТипЗначения)
	
	Если РабочаяТаблица.Колонки.Найти(ИмяКолонки)=Неопределено Тогда
		
		РабочаяТаблица.Колонки.Добавить(ИмяКолонки,ТипЗначения);
		
	КонецЕсли;
			
КонецПроцедуры // ДобавитьКолонкуДляОперанда()


Функция ПолучитьДанныеДляРасчетаСквознаяАналитика(ОбъектРасчета,ПоказательОбработки,РабочаяТаблица,СтрПоказательИтог,СпособОбработки)
	
	ТекстСверткиОперанды="";
	ТекстСверткиИзмерения="";
	
	// Добавим колонки, в которых будут содержаться значения каждого операнда
	
	СтруктураРасчета=Новый Структура;
	
	СтруктураАналитик=Новый Структура; // Структура, в которую будет записываться код аналитики 
	// и количество операндов формулы, которые имеют по ней раскрытие.
	// Рабочая таблица будет развернута только по тем аналитикам,
	// которые имеют раскрытие по всем операндам формулы.
	
	ОперандыБезАналитики=Новый Структура; 	// Структура, в которой хранятся значения операндов, не раскрывающихся
	// по аналитикам. Эти значения будут использоваться для всех комбинаций
	// аналитических раскрытий.
	
	ЕстьНечисловыеОперанды=Ложь;
		
	Для Каждого Операнд ИЗ ПоказательОбработки.СписокИспользуемых Цикл
		
		РабочийКод=?(ПоказательОбработки.ПоказателиТекущегоОтчета И (НЕ ПоказательОбработки.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление),Операнд.Представление,Операнд.Значение);
		
		ТекстСверткиОперанды=ТекстСверткиОперанды+",_"+РабочийКод;
		
		Если ПоказательОбработки.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление Тогда
			
			СтрПоказательОперанд=ОбъектРасчета.мСоответствиеДляПоискаПоКоду[РабочийКод];
			
			Если Не СтрПоказательОперанд=Неопределено Тогда
				
				ДобавитьКолонкуДляОперанда(РабочаяТаблица,"_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказательОперанд.ТипЗначения));
				СтруктураРасчета.Вставить("_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(СтрПоказательОперанд.ТипЗначения));
				
				Если (НЕ СтрПоказательОперанд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число) Тогда
					ЕстьНечисловыеОперанды=Истина;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(СтрПоказательОперанд.ГруппаРаскрытия) Тогда
					
					ОперандыБезАналитики.Вставить("_"+РабочийКод,СтрПоказательОперанд.Значение);
					
				КонецЕсли;
				
				ПолучитьЗначенияОперандаИзОтчета(ОбъектРасчета,РабочийКод,
				СтрПоказательОперанд.Ссылка,
				СтрПоказательОперанд,
				СтрПоказательИтог,
				РабочаяТаблица,
				СтруктураАналитик);
				
			Иначе
				
				ДобавитьКолонкуДляОперанда(РабочаяТаблица,"_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
				СтруктураРасчета.Вставить("_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
				
			КонецЕсли;
			
		Иначе
			
			СтрОперанд=ОбъектРасчета.мОперанды.Найти(РабочийКод,"Код");
			
			Если СтрОперанд=Неопределено Тогда
				
				ТекДанныеРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ОбъектРасчета.ПравилоОбработки,,ПоказательОбработки.Показатель);
				
				Для Каждого СтрОперанд ИЗ ТекДанныеРасчета.мОперанды Цикл
					
					Если ОбъектРасчета.мОперанды.Найти(СтрОперанд.Ссылка)=Неопределено Тогда
						
						НоваяСтрока=ОбъектРасчета.мОперанды.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОперанд);
						
					КонецЕсли;
							
				КонецЦикла;
				
				УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ТекДанныеРасчета.мТабПоказателиЗапросы,Ложь);
				
				СтрОперанд=ОбъектРасчета.мОперанды.Найти(РабочийКод,"Код");
				
			ИначеЕсли ОбъектРасчета.ОбработанныеОперанды.Получить(СтрОперанд.Ссылка)=Неопределено Тогда
				
				ТекДанныеРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ОбъектРасчета.ПравилоОбработки,,,СтрОперанд.Ссылка);
				УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ТекДанныеРасчета.мТабПоказателиЗапросы,Ложь);
				
			КонецЕсли;

			Если Не СтрОперанд=Неопределено Тогда
				
				Если ЗначениеЗаполнено(СтрОперанд.ТипЗначения) Тогда
					
					ДобавитьКолонкуДляОперанда(РабочаяТаблица,"_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрОперанд.ТипЗначения));
					СтруктураРасчета.Вставить("_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(СтрОперанд.ТипЗначения));
					
					Если (НЕ СтрОперанд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число) Тогда
						ЕстьНечисловыеОперанды=Истина;
					КонецЕсли;
					
				Иначе
					
					ДобавитьКолонкуДляОперанда(РабочаяТаблица,"_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
					СтруктураРасчета.Вставить("_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
					
				КонецЕсли;
				
				ПолучитьЗначенияОперандаИзСправочника(ОбъектРасчета,РабочийКод,
				СтрОперанд,
				РабочаяТаблица,
				СтруктураАналитик,
				ОперандыБезАналитики);
				
			Иначе
				
				ДобавитьКолонкуДляОперанда(РабочаяТаблица,"_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
				СтруктураРасчета.Вставить("_"+РабочийКод,ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));								
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	// Отметим использование в аналитиках для тех операндов, которые используются для всех аналитик
	
	Для Каждого КлючИЗначение ИЗ ОперандыБезАналитики Цикл
		
		Для Каждого СтрАналитика ИЗ СтруктураАналитик Цикл
			
			СтруктураАналитик[СтрАналитика.Ключ]=СтруктураАналитик[СтрАналитика.Ключ]+1;
			
		КонецЦикла;
		
	КонецЦикла;
	
	МассивАналитик=Новый Массив;
	ЕстьРаскрытие=Ложь;
	
	Для Индекс=ОбъектРасчета.МаксАналитикОтчета+1 По (ОбъектРасчета.МаксАналитикОтчета+СтрПоказательИтог.ЧислоАналитикГруппыРаскрытия) Цикл
		
		Если СтруктураАналитик.Свойство("Аналитика"+Индекс)
			И СтруктураАналитик["Аналитика"+Индекс]=ПоказательОбработки.СписокИспользуемых.Количество() Тогда
			
			ТекстСверткиИзмерения=ТекстСверткиИзмерения+",Аналитика"+Индекс;
			МассивАналитик.Добавить("Аналитика"+Индекс);
			ЕстьРаскрытие=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СтрПоказательИтог.Валютный
		И СтруктураАналитик.Свойство("АналитикаВалюта")
		И СтруктураАналитик["АналитикаВалюта"]=ПоказательОбработки.СписокИспользуемых.Количество() Тогда
		
		ТекстСверткиИзмерения=ТекстСверткиИзмерения+",АналитикаВалюта";
		МассивАналитик.Добавить("АналитикаВалюта");
		ЕстьРаскрытие=Истина;
		
	КонецЕсли;
	
	Для Каждого Колонка ИЗ РабочаяТаблица.Колонки Цикл
		
		Если СтрНайти(Колонка.Имя,"Аналитика_")>0
			И СтруктураАналитик.Свойство(Колонка.Имя)
			И СтруктураАналитик[Колонка.Имя]=ПоказательОбработки.СписокИспользуемых.Количество() Тогда
			
			ТекстСверткиИзмерения=ТекстСверткиИзмерения+","+Колонка.Имя;
			МассивАналитик.Добавить(Колонка.Имя);
			ЕстьРаскрытие=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстСверткиИзмерения=Сред(ТекстСверткиИзмерения,2)+",ИтогПоПоказателю";
	ТекстСверткиОперанды=Сред(ТекстСверткиОперанды,2)+",Значение";
	
	Если НЕ ЕстьНечисловыеОперанды Тогда
		РабочаяТаблица.Свернуть(ТекстСверткиИзмерения,ТекстСверткиОперанды);
	Иначе
		РабочаяТаблица=ПодготовитьТаблицуРасчетаНечисловыхЗначений(ОбъектРасчета,РабочаяТаблица,ТекстСверткиИзмерения,ТекстСверткиОперанды);
	КонецЕсли;
	
	РабочаяТаблица.Колонки.Добавить("РасчетВыполнен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	РабочаяТаблица.Колонки.Добавить("Показатель");
	РабочаяТаблица.Колонки.Добавить("ДанныеРасчета");
	
	Если РабочаяТаблица.Количество()=0 И ОперандыБезАналитики.Количество()>0 Тогда
		
		НоваяСтрока=РабочаяТаблица.Добавить();
		НоваяСтрока.ИтогПоПоказателю=Истина;
		
	КонецЕсли;
	
	Для Каждого ОбщееЗначение ИЗ ОперандыБезАналитики Цикл
		
		РабочаяТаблица.ЗаполнитьЗначения(ОбщееЗначение.Значение,ОбщееЗначение.Ключ);
		
	КонецЦикла;
	
	ДанныеДляРасчета=Новый Структура;
	ДанныеДляРасчета.Вставить("СтруктураРасчета",		СтруктураРасчета);
	ДанныеДляРасчета.Вставить("ЕстьРаскрытие",			ЕстьРаскрытие);
	ДанныеДляРасчета.Вставить("ТекстСверткиИзмерения",	ТекстСверткиИзмерения);
	
	Возврат ДанныеДляРасчета;
		
КонецФункции // ПолучитьДанныеДляРасчетаСквознаяАналитика()

Функция ПолучитьРабочийСписокИспользуемых(ПоказательОбработки,мОперанды)
	
	СтрТаблицаОперандов=мОперанды.НайтиСтроки(Новый Структура("Показатель",ПоказательОбработки.Показатель));
	
	Если СтрТаблицаОперандов.Количество()=ПоказательОбработки.СписокИспользуемых.Количество() Тогда
		
		Возврат ПоказательОбработки.СписокИспользуемых;
		
	Иначе
		
		СписокИспользуемых=Новый СписокЗначений;
		
		Для Каждого СтрОперанд ИЗ СтрТаблицаОперандов Цикл
			
			Если ПоказательОбработки.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление
				И СтрОперанд.ПоказательТекущегоОтчета Тогда
				
				СписокИспользуемых.Добавить(СокрЛП(СтрОперанд.ПоказательОтбор.Код),СтрОперанд.Код);
				
			Иначе
				
				СписокИспользуемых.Добавить(СтрОперанд.Код);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СписокИспользуемых;
		
	КонецЕсли;
					
КонецФункции // ПолучитьРабочийСписокИспользуемых() 

Функция ПолучитьДанныеДляРасчетаДополнениеАналитик(ОбъектРасчета,ПоказательОбработки,РабочаяТаблица,СтрПоказательИтог,СпособОбработки)
	
	ЕстьНечисловыеОперанды=Ложь;
	
	ДанныеИсточников=Новый ТаблицаЗначений;
	ДанныеИсточников.Колонки.Добавить("КодОперанда");
	ДанныеИсточников.Колонки.Добавить("ЗаполненныеПоляАналитик");
	ДанныеИсточников.Колонки.Добавить("КоличествоЗаполненныхПолейАналитики");
	
	СтруктураРасчета=Новый Структура;
	
	ЗапросДанные=Новый Запрос;
	ЗапросДанные.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если ОбъектРасчета.мОперанды=Неопределено Тогда
		
		ТекДанныеРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ОбъектРасчета.ПравилоОбработки,,ПоказательОбработки.Показатель);
		ОбъектРасчета.мОперанды=ТекДанныеРасчета.мОперанды;
		
	КонецЕсли;
	
	ТекСписокИспользуемых=ПолучитьРабочийСписокИспользуемых(ПоказательОбработки,ОбъектРасчета.мОперанды);
		
	Для Каждого Операнд ИЗ ТекСписокИспользуемых Цикл
		
		РабочийКод=?(ПоказательОбработки.ПоказателиТекущегоОтчета И (НЕ ПоказательОбработки.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление),Операнд.Представление,Операнд.Значение);
		
		КодОперанда=?(ПустаяСтрока(Операнд.Представление),Операнд.Значение,Операнд.Представление);
		
		СтрОперанд=ОбъектРасчета.мОперанды.Найти(КодОперанда,"Код");
		
		Если СтрОперанд=Неопределено Тогда
			
			ТекДанныеРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ОбъектРасчета.ПравилоОбработки,,ПоказательОбработки.Показатель);
			
			Для Каждого СтрОперанд ИЗ ТекДанныеРасчета.мОперанды Цикл
				
				Если ОбъектРасчета.мОперанды.Найти(СтрОперанд.Ссылка,"Ссылка")=Неопределено Тогда
					
					НоваяСтрока=ОбъектРасчета.мОперанды.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрОперанд);
					
				КонецЕсли;
				
			КонецЦикла;
			
			СтрОперанд=ОбъектРасчета.мОперанды.Найти(КодОперанда,"Код");
			
			Если СтрОперанд=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТипЗначенияИсточника=?(ЗначениеЗаполнено(СтрОперанд.ТипЗначения),ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрОперанд.ТипЗначения),ОбщегоНазначенияУХ.ПолучитьОписаниеТипаПоТипуПоказателя(СтрПоказательИтог.ТипЗначения));
		
		СтруктураРасчета.Вставить("_"+РабочийКод,ТипЗначенияИсточника.ПривестиЗначение());
		ДобавитьКолонкуДляОперанда(РабочаяТаблица,"_"+РабочийКод,ТипЗначенияИсточника);
				
		ТаблицаОперанда=Новый ТаблицаЗначений;
		ЗаполненныеПоляАналитик=Новый Массив;
		
		Для Каждого СтрАналитика ИЗ СтрОперанд.ТаблицаАналитик Цикл
			
			Если Найти(СтрАналитика.КодАналитики,"Аналитика")>0 И (НЕ СтрАналитика.ЗаполнениеПоДругимИсточникам) Тогда
				
				ТаблицаОперанда.Колонки.Добавить(СтрАналитика.КодАналитики,ОбъектРасчета.мПоказателиРаскрытия.Колонки[СтрАналитика.КодАналитики].ТипЗначения);
				ЗаполненныеПоляАналитик.Добавить(СтрАналитика.КодАналитики);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОперанда.Колонки.Добавить("Значение",ТипЗначенияИсточника);
		
		Если ПоказательОбработки.СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление Тогда
			
			СтрПоказательОперанд=ОбъектРасчета.мСоответствиеДляПоискаПоКоду[РабочийКод];
			
			Если Не СтрПоказательОперанд=Неопределено Тогда
				
				Если ЗаполненныеПоляАналитик.Количество()>0 Тогда
					
					СтруктураПоиска=Новый Структура("Показатель",СтрПоказательОперанд.Ссылка);
					
					МассивДанных=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого Строка ИЗ МассивДанных Цикл
						
						НоваяСтрока=ТаблицаОперанда.Добавить();
						
						Для Каждого СтрПравило ИЗ СтрОперанд.ПравилаИспользованияПолейЗапроса Цикл
							
							Если ЗначениеЗаполнено(СтрПравило.Поле) И СтрНайти(СтрПравило.КодАналитики,"Аналитика")>0 Тогда
								
								НоваяСтрока[СтрПравило.КодАналитики]=Строка[СтрПравило.Поле];
								
							КонецЕсли;
							
						КонецЦикла;
	
						НоваяСтрока.Значение=Строка.Значение;
						
					КонецЦикла;
					
				Иначе
					
					НоваяСтрока=ТаблицаОперанда.Добавить();
					НоваяСтрока.Значение=СтрПоказательОперанд.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
				
		Иначе
			
			Если ОбъектРасчета.ОбработанныеОперанды.Получить(СтрОперанд.Ссылка)=Неопределено Тогда
				
				ТекДанныеРасчета=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,ОбъектРасчета.ПравилоОбработки,,,СтрОперанд.Ссылка);
				УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ТекДанныеРасчета.мТабПоказателиЗапросы,Ложь);
				
			КонецЕсли;
			
			СтруктураПоиска=Новый Структура("КодОперанда,ИтогПоПоказателю",РабочийКод,ЗаполненныеПоляАналитик.Количество()=0);
			
			МассивДанных=ОбъектРасчета.мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Строка ИЗ МассивДанных Цикл
				
				НоваяСтрока=ТаблицаОперанда.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗапросДанные.Текст="ВЫБРАТЬ * Поместить "+РабочийКод+" ИЗ &ТаблицаДанных КАК ТаблицаДанных";
		ЗапросДанные.УстановитьПараметр("ТаблицаДанных",ТаблицаОперанда);
		ЗапросДанные.Выполнить();
		
		НоваяСтрока=ДанныеИсточников.Добавить();
		НоваяСтрока.КодОперанда=РабочийКод;
		НоваяСтрока.ЗаполненныеПоляАналитик=ЗаполненныеПоляАналитик;
		НоваяСтрока.КоличествоЗаполненныхПолейАналитики=ЗаполненныеПоляАналитик.Количество();
		
	КонецЦикла;
	
	ДанныеИсточников.Сортировать("КоличествоЗаполненныхПолейАналитики Убыв");
	
	ТекстСверткиИзмерения="";
	ТекстАналитики="";
	ТекстЗначения="";
	ТекстСоединения="";
	ЕстьРаскрытие=Ложь;
	
	Если ДанныеИсточников.Количество()>0 Тогда
		
		ОсновнаяТаблица=ДанныеИсточников[0];
		ЕстьРаскрытие=ОсновнаяТаблица.КоличествоЗаполненныхПолейАналитики>0;
		
		Для Каждого ПолеАналитики ИЗ ОсновнаяТаблица.ЗаполненныеПоляАналитик Цикл
			
			ТекстАналитики=ТекстАналитики+","+ОсновнаяТаблица.КодОперанда+"."+ПолеАналитики;
			ТекстСверткиИзмерения=ТекстСверткиИзмерения+","+ПолеАналитики;
			
		КонецЦикла;
				
		ТекстЗначения=ТекстЗначения+","+ОсновнаяТаблица.КодОперанда+".Значение КАК _"+ОсновнаяТаблица.КодОперанда;
		
		Для Индекс=1 По ДанныеИсточников.Количество()-1 Цикл
			
			СтрокаИсточник=ДанныеИсточников[Индекс];
			
			ТекстЗначения=ТекстЗначения+",ЕСТЬNULL("+СтрокаИсточник.КодОперанда+".Значение,0) КАК _"+СтрокаИсточник.КодОперанда;
			
			ТекстСоединенияТек="";
			
			Для Каждого ОсновноеПоле ИЗ ОсновнаяТаблица.ЗаполненныеПоляАналитик Цикл
				
				Если НЕ СтрокаИсточник.ЗаполненныеПоляАналитик.Найти(ОсновноеПоле)=Неопределено Тогда
					
					ТекстСоединенияТек=ТекстСоединенияТек+" И "+ОсновнаяТаблица.КодОперанда+"."+ОсновноеПоле+"="+СтрокаИсточник.КодОперанда+"."+ОсновноеПоле;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстСоединения=ТекстСоединения+"
			|ЛЕВОЕ СОЕДИНЕНИЕ "+СтрокаИсточник.КодОперанда+" КАК "+СтрокаИсточник.КодОперанда+"
			|ПО "+?(ПустаяСтрока(ТекстСоединенияТек),"ИСТИНА",Сред(ТекстСоединенияТек,3));
			
		КонецЦикла;
		
		ЗапросДанные.Текст="ВЫБРАТЬ "+?(ПустаяСтрока(ТекстАналитики),"",Сред(ТекстАналитики,2)+",")+Сред(ТекстЗначения,2)+"
		|ИЗ "+ОсновнаяТаблица.КодОперанда+" КАК "+ОсновнаяТаблица.КодОперанда+?(ПустаяСтрока(ТекстСоединения),"",ТекстСоединения);
		
		Результат=ЗапросДанные.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=РабочаяТаблица.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			
		КонецЦикла;
		
	КонецЕсли;
	
	РабочаяТаблица.Колонки.Добавить("РасчетВыполнен",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	РабочаяТаблица.Колонки.Добавить("Показатель");
	РабочаяТаблица.Колонки.Добавить("ДанныеРасчета");
			
	ДанныеДляРасчета=Новый Структура;
	ДанныеДляРасчета.Вставить("СтруктураРасчета",		СтруктураРасчета);
	ДанныеДляРасчета.Вставить("ЕстьРаскрытие",			ЕстьРаскрытие);
	ДанныеДляРасчета.Вставить("ТекстСверткиИзмерения",	ТекстСверткиИзмерения);
	
	Возврат ДанныеДляРасчета;		
	
КонецФункции // ПолучитьДанныеДляРасчетаДополнениеАналитик()

Процедура РассчитатьПараметрическиНастроенныйПоказатель(ОбъектРасчета,ПоказательОбработки,РабочаяТаблица,СтрПоказательИтог,СпособОбработки)
	
	Перем СтрИтог; // Строка, в которую будет помещено итоговое значение показателя
		
	Если ПоказательОбработки.ЕстьДополненияАналитик Тогда
		
		ДанныеДляРасчета=ПолучитьДанныеДляРасчетаДополнениеАналитик(ОбъектРасчета,ПоказательОбработки,РабочаяТаблица,СтрПоказательИтог,СпособОбработки);

	Иначе
		
		ДанныеДляРасчета=ПолучитьДанныеДляРасчетаСквознаяАналитика(ОбъектРасчета,ПоказательОбработки,РабочаяТаблица,СтрПоказательИтог,СпособОбработки);
		
	КонецЕсли;
	
	СтруктураРасчета		= ДанныеДляРасчета.СтруктураРасчета;
	ЕстьРаскрытие			= ДанныеДляРасчета.ЕстьРаскрытие;
	ТекстСверткиИзмерения 	= ДанныеДляРасчета.ТекстСверткиИзмерения;
			
	// Преобразуем процедуру для расчета
	
	РабочееВыражение=СтрЗаменить(ПоказательОбработки.Процедура,"[","СтрокаРасчет._");
	РабочееВыражение=СтрЗаменить(РабочееВыражение,"]","");
	
	Для Каждого СтрокаРасчет ИЗ РабочаяТаблица Цикл
		
		СтрокаРасчет.РасчетВыполнен=Истина;
		СтрокаРасчет.Показатель=ПоказательОбработки.Показатель;
		
		ТекСтруктураДанных=ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтруктураРасчета);
		ЗаполнитьЗначенияСвойств(ТекСтруктураДанных,СтрокаРасчет);
		
		СтрокаРасчет.ДанныеРасчета=ТекСтруктураДанных;
		
		Попытка
			
			СтрокаРасчет.Значение=Вычислить(РабочееВыражение);
			
		Исключение
			
			ТекстОшибки=ОписаниеОшибки();
			ТекстАналитики="";
			
			Для Каждого Колонка ИЗ РабочаяТаблица.Колонки Цикл
				
				Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
					
					ТекстАналитики=ТекстАналитики+"
					|"+Колонка.Имя+": "+СтрокаРасчет[Колонка.Имя];
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстСообщения = НСтр("ru = 'При вычислении значения показателя %КодПоказателя% %ТекстАналитики%
			|			произошла ошибка %ТекстОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПоказателя%", Строка(ПоказательОбработки.Код));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстАналитики%", Строка(ТекстАналитики));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ТекстОшибки));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибкаТаблица(ОбъектРасчета,"УправлениеОтчетамиУХ.РассчитатьПараметрическиНастроенныйПоказатель", , ПоказательОбработки.Показатель, ТекстСообщения);
						
			Если ОбъектРасчета.мРасширеннаяДиагностикаВключена Тогда
				СтрОшибка=ОбъектРасчета.ТаблицаВыявленныхОшибок.Добавить();
				СтрОшибка.Показатель=ПоказательОбработки.Показатель;
				СтрОшибка.ОписаниеОшибки=ТекстОшибки+ТекстАналитики;
				СтрОшибка.ДанныеРасчета=ТекСтруктураДанных;
				СтрОшибка.Процедура=ПоказательОбработки.Процедура;
			КонецЕсли;
			
			СтрокаРасчет.Значение=0;
			СтрокаРасчет.РасчетВыполнен=Ложь;
			
		КонецПопытки
		
	КонецЦикла;	
	
	Если ОбъектРасчета.мРасширеннаяДиагностикаВключена Тогда
		
		ОбъектРасчета.Вставить("РабочаяТаблица",РабочаяТаблица);
		
	КонецЕсли;
	
	СуммаСинтетика=0;
	ЕстьСтрокиРаскрытия=Ложь;
	
	Для Каждого СтрокаРасчет ИЗ РабочаяТаблица Цикл
		
		Если СтрокаРасчет.ИтогПоПоказателю Тогда
			
			СтрИтог=СтрокаРасчет;
			
		ИначеЕсли ЕстьРаскрытие Тогда
			
			ЗаписатьДанныеСтрокиРаскрытия(ОбъектРасчета,СтрПоказательИтог,СуммаСинтетика,СтрокаРасчет,СпособОбработки);
			ЕстьСтрокиРаскрытия=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрПоказательИтог.ПересчитыватьВалютнуюСумму Тогда
		
		ОбъектРасчета.Показатели[ПоказательОбработки.Код]=СуммаСинтетика;
		ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,СтрПоказательИтог, СуммаСинтетика,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);

	ИначеЕсли НЕ СтрИтог=Неопределено Тогда
		
		ЗначениеИтог=СтрИтог.Значение;
		ДанныеРасчета=СтрИтог.ДанныеРасчета;
		
		Если  СтрПоказательИтог.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается
			ИЛИ (НЕ ЕстьСтрокиРаскрытия) Тогда
			
			ОбъектРасчета.Показатели[ПоказательОбработки.Код]=СтрИтог.Значение;
			
			СтрПоказательИтог.ДанныеРасчета=СтрИтог.ДанныеРасчета;
			ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,СтрПоказательИтог, СтрИтог.Значение,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
		Иначе
			
			// Считаем итоги по раскрытию
			
			РабочаяТаблица.Удалить(СтрИтог);
			ИтогРаскрытия=ОбщегоНазначенияУХ.ТЗИтог(РабочаяТаблица, ТекстСверткиИзмерения, "Значение", СтрПоказательИтог.ВидИтога,СтрПоказательИтог.ТипЗначения);
			
			ОбъектРасчета.Показатели[ПоказательОбработки.Код]=ИтогРаскрытия;
			
			СтрПоказательИтог.ДанныеРасчета=ДанныеРасчета;
			ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,СтрПоказательИтог, ИтогРаскрытия,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
		КонецЕсли;
		
	Иначе
		
		СтрПоказательИтог.ДанныеРасчета=Неопределено;
		
		Если Не СтрПоказательИтог.ВидИтога=Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			
			ОбъектРасчета.Показатели[ПоказательОбработки.Код]=ОбщегоНазначенияУХ.ТЗИтог(РабочаяТаблица, ТекстСверткиИзмерения, "Значение", СтрПоказательИтог.ВидИтога,СтрПоказательИтог.ТипЗначения);	
			ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,СтрПоказательИтог, ОбъектРасчета.Показатели[ПоказательОбработки.Код],СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрПоказательИтог.ГруппаРаскрытия)
		И (НЕ (СтрПоказательИтог.Значение=0 ИЛИ ЕстьРаскрытие ИЛИ ОбъектРасчета.РежимКорректировки)) Тогда
		
		ЗаписатьСтрокуРаскрытияПоУмолчанию(ОбъектРасчета,СтрПоказательИтог,СпособОбработки);
		
	КонецЕсли;
	
	СтрПоказательИтог.СохраненныеДанныеАктуальны=Ложь;
	
КонецПроцедуры // РассчитатьПараметрическиНастроенныйПоказатель()

Процедура ЗаписатьСтрокуРаскрытияПоУмолчанию(ОбъектРасчета,СтрПоказательИтог,СпособОбработки)
	
	СтруктураСтрока=Новый Структура;
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ЗначенияАналитикПоУмолчанию.ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.ЗначенияАналитикПоУмолчанию КАК ЗначенияАналитикПоУмолчанию
	|ГДЕ
	|	ЗначенияАналитикПоУмолчанию.ВидАналитики = &ВидАналитики";
	
	Для Инд=ОбъектРасчета.МаксАналитикОтчета+1 По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя) Цикл
		
		Если ЗначениеЗаполнено(СтрПоказательИтог["ВидАналитики"+Инд]) Тогда
			
			Запрос.УстановитьПараметр("ВидАналитики",СтрПоказательИтог["ВидАналитики"+Инд]);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() И ЗначениеЗаполнено(Результат.ЗначениеПоУмолчанию) Тогда
				
				ЗначениеПоУмолчанию=Результат.ЗначениеПоУмолчанию;
				
			Иначе
				
				ЗначениеПоУмолчанию=СтрПоказательИтог["ВидАналитики"+Инд].ТипЗначения.ПривестиЗначение();
				
			КонецЕсли;
			
			СтруктураСтрока.Вставить("Аналитика"+Инд,ЗначениеПоУмолчанию);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрПоказательИтог.Валютный Тогда
		
		СтруктураСтрока.Вставить("АналитикаВалюта",ОбъектРасчета.ОсновнаяВалюта);
		
	КонецЕсли;
			
	СтруктураСтрока.Вставить("Значение",СтрПоказательИтог.Значение);
	СтруктураСтрока.Вставить("Показатель",СтрПоказательИтог.Ссылка);
	
	ЗаписатьДанныеСтрокиРаскрытия(ОбъектРасчета,СтрПоказательИтог,0,СтруктураСтрока,СпособОбработки);
	
	СтруктураСтрока.Удалить("Значение");
	
	МассивРаскрытий=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураСтрока);
	
	Если МассивРаскрытий.Количество()>0 Тогда
		
		МассивРаскрытий[0].Техническая=Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаписатьСтрокуРаскрытияПоУмолчанию() 

Процедура ЗаписатьДанныеСтрокиРаскрытия(ОбъектРасчета,СтрПоказательИтог,СуммаСинтетика,СтрокаРасчет,СпособОбработки,ВыполнятьПоиск=Ложь)
	
	Если ОбъектРасчета.РежимКорректировки Тогда
		
		СтруктураСтрока=Новый Структура("Показатель");
		
		Для Индекс=1 ПО ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураСтрока.Вставить("Аналитика"+Индекс);
			
		КонецЦикла;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтрока,СтрокаРасчет);
		
		ДанныеПоказателя=Новый Структура;
		
		Если СтрПоказательИтог.ПересчитыватьВалютнуюСумму Тогда
			
			ДанныеПоказателя.Вставить("ЗначениеВалюта",			ПересчитатьЗначениеПоказателяПоКурсу(ОбъектРасчета,СтрокаРасчет.Значение, СтрПоказательИтог, ОбъектРасчета.ОсновнаяВалюта,СтруктураСтрока.АналитикаВалюта));
			ДанныеПоказателя.Вставить("Значение",				СтрокаРасчет.Значение);
						
			ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеПоказателя, СтруктураСтрока,,ВыполнятьПоиск ИЛИ ОбъектРасчета.РежимКорректировки,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
			СуммаСинтетика=СуммаСинтетика+ДанныеПоказателя.Значение;
			
		Иначе
			
			ДанныеПоказателя.Вставить("Значение",				СтрокаРасчет.Значение);
			ДанныеПоказателя.Вставить("ЗначениеВалюта",			0);
						
			ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеПоказателя, СтруктураСтрока,,ВыполнятьПоиск ИЛИ ОбъектРасчета.РежимКорректировки,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
		КонецЕсли;
		
	Иначе
		
		СтрРаскрытие=ОбъектРасчета.мПоказателиРаскрытия.Добавить();
		ЗаполнитьЗначенияСвойств(СтрРаскрытие,СтрокаРасчет,,"Значение");
		
		ДанныеПоказателя=Новый Структура;
		
		Если СтрПоказательИтог.ПересчитыватьВалютнуюСумму Тогда
			
			ДанныеПоказателя.Вставить("Значение",				СтрокаРасчет.Значение);
			ДанныеПоказателя.Вставить("ЗначениеВалюта",			ПересчитатьЗначениеПоказателяПоКурсу(ОбъектРасчета,СтрокаРасчет.Значение, СтрПоказательИтог,ОбъектРасчета.ОсновнаяВалюта, СтрРаскрытие.АналитикаВалюта));
						
			ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеПоказателя, СтрРаскрытие,,ВыполнятьПоиск ИЛИ ОбъектРасчета.РежимКорректировки,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
			СуммаСинтетика=СуммаСинтетика+ДанныеПоказателя.Значение;
			
		Иначе
			
			ДанныеПоказателя.Вставить("Значение",				СтрокаРасчет.Значение);
			ДанныеПоказателя.Вставить("ЗначениеВалюта",			0);
						
			ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеПоказателя, СтрРаскрытие,,ВыполнятьПоиск ИЛИ ОбъектРасчета.РежимКорректировки,СпособОбработки=Перечисления.СпособыОбработкиПоказателейОтчетов.Вычисление);
			
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры // ЗаписатьДанныеСтрокиРаскрытия() 


// Возвращает значение показателя, пересчитанное по курсу.
Функция ПересчитатьЗначениеПоказателяПоКурсу(ОбъектРасчета,ЗначениеПоказателя, Показатель, ТекущаяВалюта, ВалютаПересчета,ПризнакОшибки=Ложь) Экспорт
	
	Если (НЕ Показатель.НеФинансовый) 
		И ЗначениеЗаполнено(ТекущаяВалюта) 
		И ЗначениеЗаполнено(ВалютаПересчета)
		И Показатель.ЧисловойПоказатель 
		И ТекущаяВалюта <> ВалютаПересчета Тогда
		
		ОбработкаПериодовРасчета = (НЕ ОбъектРасчета.мПоказатели.Колонки.Найти("ПериодРасчета")=Неопределено);
		
		Если Показатель.ВидКурса=Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе Тогда
			
			СтрКурсы=ОбъектРасчета.мПоказателиДляКурсовВалют.НайтиСтроки(Новый Структура("Показатель,Валюта",Показатель.Ссылка,ВалютаПересчета));
			
			Если СтрКурсы.Количество()=0 Тогда
				
				Возврат 0;
				
			КонецЕсли;
			
			ТекКратность=?(СтрКурсы[0].Кратность=0,1,СтрКурсы[0].Кратность);
			
			ПоказательКурса=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СтрКурсы[0].ПоказательКурса];
			
			Если ПоказательКурса=Неопределено ИЛИ ПоказательКурса.Значение=0 Тогда
				
				Возврат 0;
				
			Иначе
				
				Возврат ЗначениеПоказателя*ТекКратность/ПоказательКурса.Значение;
				
			КонецЕсли;	
			
		Иначе
			
			ШапкаОшибки   = СтрШаблон(Нстр("ru = 'Не удалось пересчитать показатель %1 из валюты %2"" в валюту ""%3"":'"), 
			                	Показатель.Наименование, ТекущаяВалюта, ВалютаПересчета);
			
			ТекЗначениеПоказателя = УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(ЗначениеПоказателя
			, ТекущаяВалюта
			, ВалютаПересчета
			, ?(ЗначениеЗаполнено(Показатель.ВидКурса),Показатель.ВидКурса,Перечисления.ВидыКурсов.СреднийКурсЗаПериод)
			, ОбъектРасчета.Сценарий
			, ?(ОбработкаПериодовРасчета,?(ЗначениеЗаполнено(Показатель.ПериодРасчета), Показатель.ПериодРасчета, ОбъектРасчета.ПериодОтчета),ОбъектРасчета.ПериодОтчета)
			, ПолучитьДатуИзКэша(ОбъектРасчета,Показатель)
			, ПризнакОшибки
			, ШапкаОшибки
			, ОбъектРасчета.КэшТаблицыКурсов);
			Возврат ?(ПризнакОшибки, 0, ТекЗначениеПоказателя);
			
		КонецЕсли;
		
	Иначе
		Возврат ЗначениеПоказателя;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьЗначениеВмПоказатели(ОбъектРасчета, СсылкаНаЗаписываемуюСтроку, Знач Значение, РежимВычисления = Ложь, Знач ЗаписатьИзменениеВЛог = Истина) Экспорт
	
	Если ЗаписатьИзменениеВЛог Тогда
		ЗаписатьИзменениеВЛог = Не ОбъектРасчета.ДополнительныеСвойства.Свойство("ВычислениеВДополнительнойВалюте");
	КонецЕсли;					
		
	Если ТипЗнч(СсылкаНаЗаписываемуюСтроку) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда
		ТекСтрока = ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СсылкаНаЗаписываемуюСтроку];
	Иначе
		ТекСтрока = СсылкаНаЗаписываемуюСтроку;
	КонецЕсли;
	
	Если ТипЗнч(Значение)=Тип("Структура") Тогда
		
		РабочееЗначение				=Значение.Значение;
			
	Иначе
		
		РабочееЗначение				=Значение;
			
	КонецЕсли; 
	
	Если ОбъектРасчета.РежимКорректировки Тогда
		
		СтрокаКорректировки=ОбъектРасчета.мСоответствиеДляПоискаПоСсылкеКорр[ТекСтрока.Ссылка];
		
		Если НЕ РежимВычисления Тогда
			
			Если СтрокаКорректировки.Значение=РабочееЗначение Тогда
				
				Возврат;
				
			Иначе
				
				ЗначениеКорректировкиСтар=СтрокаКорректировки.Значение;
				
				СтрокаКорректировки.Значение=РабочееЗначение;
				
				РабочееЗначение=ТекСтрока.Значение+(РабочееЗначение-ЗначениеКорректировкиСтар);
				
			КонецЕсли;
			
		Иначе // Записывается значение результирующего показателя
			
			СтрокаКорректировки.Значение=СтрокаКорректировки.Значение+РабочееЗначение-ТекСтрока.Значение;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектРасчета.мСоответствиеДляПоискаПоСсылкеКорр)=Тип("Соответствие") Тогда
		
		СтрокаКорректировки=ОбъектРасчета.мСоответствиеДляПоискаПоСсылкеКорр[ТекСтрока.Ссылка];
        СтрокаКорректировки.Значение=СтрокаКорректировки.Значение+РабочееЗначение-ТекСтрока.Значение;
		
	КонецЕсли;		
		
	Если ЗначениеЗаполнено(ТекСтрока.Значение) ИЛИ ЗначениеЗаполнено(РабочееЗначение) Тогда
		Если ТекСтрока.Значение = РабочееЗначение  Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	НачЗначение        				= ТекСтрока.Значение;
		
	ТекСтрока.Значение 				= РабочееЗначение;
	ТекСтрока.ЗначениеИзменено		= Истина;
	
	ОбъектРасчета.Показатели.Вставить(ТекСтрока.Код,ТекСтрока.Значение);
				
	Если ОбъектРасчета.ТрансформационнаяКорректировка Тогда
		
		СтруктураПоиска=Новый Структура("ШаблонПроводки",ТекСтрока.Ссылка);
		МассивПроводок=ОбъектРасчета.СводныеПроводкиДокумента.НайтиСтроки(СтруктураПоиска);
		
		Если МассивПроводок.Количество()>0 Тогда
			МассивПроводок[0].Значение=РабочееЗначение;
		КонецЕсли;
			
	Иначе
		
		Если ЗаписатьИзменениеВЛог Тогда
			
			Если ТекСтрока.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				
				ЗаписьВЛоге = ОбъектРасчета.ЛогИзмененийПоказателей.Добавить();
				ЗаписьВЛоге.Ссылка        	= ТекСтрока.Ссылка;
				ЗаписьВЛоге.НомерОперации 	= ОбъектРасчета.НомерТекущейОперации;
				ЗаписьВЛоге.Значение 		= ?(ЗначениеЗаполнено(РабочееЗначение),РабочееЗначение,0) - ?(ЗначениеЗаполнено(НачЗначение),НачЗначение,0);
												
				ЗаписьВЛоге.ЧисловойПоказатель = Истина;
				
			Иначе // Для нечисловых показателей храним последнее изменение в текущей операции.
				
				ЗаписиВЛоге = ОбъектРасчета.ЛогИзмененийПоказателей.НайтиСтроки(Новый Структура("Ссылка, НомерОперации", ТекСтрока.Ссылка, ОбъектРасчета.НомерТекущейОперации));
				
				Если ЗаписиВЛоге.Количество() > 0 Тогда
					ЗаписьВЛоге = ЗаписиВЛоге[0];
				Иначе
					ЗаписьВЛоге = ОбъектРасчета.ЛогИзмененийПоказателей.Добавить();
					ЗаписьВЛоге.Ссылка        = ТекСтрока.Ссылка;
					ЗаписьВЛоге.НомерОперации = ОбъектРасчета.НомерТекущейОперации;
				КонецЕсли;
				
				ЗаписьВЛоге.Значение = РабочееЗначение;
					
				ЗаписьВЛоге.ЧисловойПоказатель 		= Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

// Процедура вносит изменения в таблицу мПоказателиРаскрытия и записывает данные в лог изменений.
// Параметры:
//  СсылкаНаЗаписываемоеЗначение: Структура, ЭлементМассива, СправочникСсылка.ПоказателиОтчетов - задает ссылку на изменяемое значение в таблице мПоказателиРаскрытия.
//   В том случае, если указан ссылка на справочник Показатели отчетов, нужно заполнение остальных параметров для задания критериев отбора.
//  Аналитика1..5   : Аналитики раскрытия.
// Возвращаемое значение: измененная запись таблицы значений мПоказателиРаскрытия.
//
Функция ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета, Знач ДанныеКорректировки, СсылкаНаЗаписываемуюСтроку, 
						РазрешитьЗаписьНулевыхЗначений = Ложь,
						ЗаполнениеПустойТаблицы = Ложь,
						РежимВычисления=Ложь,
						Знач ЗаписатьИзменениеВЛог = Истина,
						АналитикаВалюта=Неопределено) Экспорт
						
	Если ЗаписатьИзменениеВЛог Тогда
		ЗаписатьИзменениеВЛог = Не ОбъектРасчета.ДополнительныеСвойства.Свойство("ВычислениеВДополнительнойВалюте");	
	КонецЕсли;					
						
	СтруктураПоиска=Новый Структура("Показатель,АналитикаВалюта",Неопределено,Справочники.Валюты.ПустаяСсылка());
	
	Если ТипЗнч(ДанныеКорректировки)=Тип("Структура") Тогда 
		
		РабочееЗначениеВалюта			= ДанныеКорректировки.ЗначениеВалюта;
		РабочееЗначение		 			= ДанныеКорректировки.Значение;
		
	Иначе
		
		РабочееЗначениеВалюта			= 0;
		РабочееЗначение					= ДанныеКорректировки;
			
	КонецЕсли;
		
	// Определение строки в таблице мПоказателиРаскрытия на основании переданных параметров.
	Если ТипЗнч(СсылкаНаЗаписываемуюСтроку) = Тип("Структура") Тогда
		
		СтруктураПоиска.Показатель			= СсылкаНаЗаписываемуюСтроку.Показатель;
		
		Если СсылкаНаЗаписываемуюСтроку.Свойство("АналитикаВалюта") Тогда
			СтруктураПоиска.АналитикаВалюта=СсылкаНаЗаписываемуюСтроку.АналитикаВалюта;
		КонецЕсли;
							
		Для Инд = ОбъектРасчета.МаксАналитикОтчета+1 По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя) Цикл
			
			Если СсылкаНаЗаписываемуюСтроку.Свойство("Аналитика" + Инд)
				И (НЕ СсылкаНаЗаписываемуюСтроку["Аналитика"+Инд]=Неопределено) Тогда 
				
				СтруктураПоиска.Вставить("Аналитика" + Инд,СсылкаНаЗаписываемуюСтроку["Аналитика" + Инд]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗаполнениеПустойТаблицы Тогда
			ТекСтрока = Неопределено;
			ТекСтрокаКорректировки=Неопределено;
		Иначе
			
			МассивСтрок = ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
			
			Если МассивСтрок.Количество() > 0 Тогда
				ТекСтрока = МассивСтрок[0];
			Иначе
				ТекСтрока = Неопределено;
			КонецЕсли;
				
		КонецЕсли;
				
	Иначе
		
		Для Инд = ОбъектРасчета.МаксАналитикОтчета+1 По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя) Цикл
			СтруктураПоиска.Вставить("Аналитика" + Инд);
		КонецЦикла;
		
		Если ОбъектРасчета.ТрансформационнаяКорректировка Тогда
			
			Для Каждого КолонкаИзмерение ИЗ ОбъектРасчета.МассивКолонокИзмерений Цикл
				
				СтруктураПоиска.Вставить(КолонкаИзмерение);
				
			КонецЦикла;
			
		КонецЕсли;				
						
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СсылкаНаЗаписываемуюСтроку);
		
		ТекСтрока = СсылкаНаЗаписываемуюСтроку;
				
		Если ТекСтрока.АналитикаВалюта=Неопределено Тогда
			
			ТекСтрока.АналитикаВалюта=Справочники.Валюты.ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекСтрокамПоказатели=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СтруктураПоиска.Показатель];	
	ДобавленаСтрокаКорректировки=Ложь;
		
	Если ОбъектРасчета.РежимКорректировки Тогда
		
		МассивСтрокКорректировки = ОбъектРасчета.мКорректировкиПоказателейРаскрытия.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокКорректировки.Количество() > 0 Тогда
			
			ТекСтрокаКорректировки = МассивСтрокКорректировки[0];
			
			Если РабочееЗначение=Неопределено Тогда // Удаляем строку корректировки
				
				ИзменениеКорректировки			=-ТекСтрокаКорректировки.Значение;
				ИзменениеКорректировкиВалюта	=-ТекСтрокаКорректировки.ЗначениеВалюта;
				
				РабочееЗначение			= ИзменениеКорректировки;
				РабочееЗначениеВалюта	= ИзменениеКорректировкиВалюта;
				
				ОбъектРасчета.мКорректировкиПоказателейРаскрытия.Удалить(ТекСтрокаКорректировки);
				
			Иначе
				
				Если НЕ РежимВычисления Тогда
					
					ЗначениеКорректировкиСтар		= ТекСтрокаКорректировки.Значение;
					ЗначениеКорректировкиСтарВалюта	= ТекСтрокаКорректировки.ЗначениеВалюта;
					
					ТекСтрокаКорректировки.Значение			= РабочееЗначение;
					ТекСтрокаКорректировки.ЗначениеВалюта	= РабочееЗначениеВалюта;
					
					ИзменениеКорректировки			= РабочееЗначение		- ЗначениеКорректировкиСтар;
					ИзменениеКорректировкиВалюта	= РабочееЗначениеВалюта	- ЗначениеКорректировкиСтарВалюта;
					
				Иначе
					
					Если НЕ ТекСтрока=Неопределено Тогда
						
						ТекСтрокаКорректировки.Значение			= ТекСтрокаКорректировки.Значение		+РабочееЗначение		-ТекСтрока.Значение;
						ТекСтрокаКорректировки.ЗначениеВалюта	= ТекСтрокаКорректировки.ЗначениеВалюта	+РабочееЗначениеВалюта	-ТекСтрока.ЗначениеВалюта;
						
					Иначе
						
						ТекСтрокаКорректировки.Значение			=ТекСтрокаКорректировки.Значение		+РабочееЗначение;
						ТекСтрокаКорректировки.ЗначениеВалюта	=ТекСтрокаКорректировки.ЗначениеВалюта	+РабочееЗначениеВалюта;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли НЕ РабочееЗначение=Неопределено Тогда
			
			ТекСтрокаКорректировки = ОбъектРасчета.мКорректировкиПоказателейРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрокаКорректировки,СтруктураПоиска);
			ТекСтрокаКорректировки.ИтоговоеЗначение=Ложь;
						
			ТекСтрокаКорректировки.Значение 		= РабочееЗначение;
			ТекСтрокаКорректировки.ЗначениеВалюта 	= РабочееЗначениеВалюта;
			
			ИзменениеКорректировки			= РабочееЗначение;
			ИзменениеКорректировкиВалюта	= РабочееЗначениеВалюта;
			
			ДобавленаСтрокаКорректировки=Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОбъектРасчета.мСоответствиеДляПоискаПоСсылкеКорр)=Тип("Соответствие") Тогда
		
		МассивСтрокКорректировки = ОбъектРасчета.мКорректировкиПоказателейРаскрытия.НайтиСтроки(СтруктураПоиска);
		
		Если МассивСтрокКорректировки.Количество() > 0 Тогда
			
			ТекСтрокаКорректировки = МассивСтрокКорректировки[0];
			
			Если РабочееЗначение=Неопределено Тогда // Удаляем строку корректировки
				
				ОбъектРасчета.мКорректировкиПоказателейРаскрытия.Удалить(ТекСтрокаКорректировки);
				
			Иначе
				
				Если НЕ ТекСтрока=Неопределено Тогда
					
					ТекСтрокаКорректировки.Значение			= ТекСтрокаКорректировки.Значение		+РабочееЗначение		-ТекСтрока.Значение;
					ТекСтрокаКорректировки.ЗначениеВалюта	= ТекСтрокаКорректировки.ЗначениеВалюта	+РабочееЗначениеВалюта	-ТекСтрока.ЗначениеВалюта;
					
				Иначе
					
					ТекСтрокаКорректировки.Значение			= ТекСтрокаКорректировки.Значение		+РабочееЗначение;
					ТекСтрокаКорректировки.ЗначениеВалюта	= ТекСтрокаКорректировки.ЗначениеВалюта	+РабочееЗначениеВалюта;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		ИначеЕсли НЕ РабочееЗначение=Неопределено Тогда
			
			ТекСтрокаКорректировки = ОбъектРасчета.мКорректировкиПоказателейРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(ТекСтрокаКорректировки,СтруктураПоиска);
			ТекСтрокаКорректировки.ИтоговоеЗначение=Ложь;
						
			Если НЕ ТекСтрока=Неопределено Тогда
				
				ТекСтрокаКорректировки.Значение			=РабочееЗначение		-ТекСтрока.Значение;
				ТекСтрокаКорректировки.ЗначениеВалюта	=РабочееЗначениеВалюта	-ТекСтрока.ЗначениеВалюта;
				
			Иначе
				
				ТекСтрокаКорректировки.Значение			= РабочееЗначение;
				ТекСтрокаКорректировки.ЗначениеВалюта	= РабочееЗначениеВалюта;
				
			КонецЕсли;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекСтрока <> Неопределено Тогда
		
		НачЗначение        			= ТекСтрока.Значение;
		НачЗначениеВалюта  			= ТекСтрока.ЗначениеВалюта;
				
		Если ОбъектРасчета.РежимКорректировки Тогда
			
			РабочееЗначение			= ТекСтрока.Значение+ИзменениеКорректировки;
			РабочееЗначениеВалюта	= ТекСтрока.ЗначениеВалюта+ИзменениеКорректировкиВалюта;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РабочееЗначение) 
			И НЕ (РабочееЗначение = 0 И РазрешитьЗаписьНулевыхЗначений) Тогда
			ТекЗначение = Неопределено;
			
		Иначе
			
			ТекЗначение 		= РабочееЗначение;
			ТекЗначениеВалюта 	= РабочееЗначениеВалюта;  
			
			ТекСтрока.Значение 			= РабочееЗначение;
			ТекСтрока.ЗначениеВалюта 	= РабочееЗначениеВалюта;
			
		КонецЕсли;	
		
		ТекСтрока.ЗначениеИзменено=Истина;
		
	Иначе
		
		НачЗначение 				= Неопределено;     // Добавление новой записи в регистр раскрытия.
		НачЗначениеВалюта 			= 0;
				
		ТекСтрока = ОбъектРасчета.мПоказателиРаскрытия.Добавить();
		ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураПоиска);
				
		ТекСтрока.Значение   			= РабочееЗначение;
		ТекСтрока.ЗначениеВалюта   		= РабочееЗначениеВалюта;
		ТекСтрока.ЗначениеИзменено		= Истина;
		
		ТекЗначение=РабочееЗначение;
		
	КонецЕсли;
	
	ТипизироватьАналитикиПринудительно(ОбъектРасчета,ТекСтрока,ТекСтрокамПоказатели);
	
	Если ОбъектРасчета.ТрансформационнаяКорректировка Тогда
		
		Если ЗначениеЗаполнено(РабочееЗначение) Тогда
			
			ТаблицаПроводок=ОбъектРасчета.ПроводкиДокумента;
			
			ДанныеПоказателя=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СтруктураПоиска.Показатель];
			
			СтруктураПроводки=Новый Структура;
			СтруктураПроводки.Вставить("ШаблонПроводки",СтруктураПоиска.Показатель);
			
			Для Индекс=1 ПО 3 Цикл
				
				Если Индекс<=ДанныеПоказателя.ЧислоАналитикДт И СтруктураПоиска.Свойство("Аналитика"+Индекс) Тогда
					
					СтруктураПроводки.Вставить("СубконтоДт"+Индекс,СтруктураПоиска["Аналитика"+Индекс]);
					
				КонецЕсли;
				
				Если Индекс<=ДанныеПоказателя.ЧислоАналитикКт И СтруктураПоиска.Свойство("Аналитика"+(Индекс+ДанныеПоказателя.ЧислоАналитикДт)) Тогда
					
					СтруктураПроводки.Вставить("СубконтоКт"+Индекс,СтруктураПоиска["Аналитика"+(Индекс+ДанныеПоказателя.ЧислоАналитикДт)]);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтруктураПоиска.Свойство("АналитикаВалюта") Тогда
				
				Если ДанныеПоказателя.ВалютныйДт Тогда					
					СтруктураПроводки.Вставить("ВалютаДт",СтруктураПоиска.АналитикаВалюта);	
				КонецЕсли;
				
				Если ДанныеПоказателя.ВалютныйКт Тогда
					СтруктураПроводки.Вставить("ВалютаКт",СтруктураПоиска.АналитикаВалюта);	
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого КолонкаИзмерение ИЗ ОбъектРасчета.МассивКолонокИзмерений Цикл
				
				СтруктураПроводки.Вставить(СтрЗаменить(КолонкаИзмерение,"Аналитика_",""),СтруктураПоиска[КолонкаИзмерение])				
				
			КонецЦикла;
				
			МассивСтрок=ТаблицаПроводок.НайтиСтроки(СтруктураПроводки);
			
			Если МассивСтрок.Количество()>0 Тогда
				
				МассивСтрок[0].Значение			= РабочееЗначение;
				МассивСтрок[0].ЗначениеВалюта	= РабочееЗначениеВалюта;
				
			Иначе
				
				СтрокаПроводки=ТаблицаПроводок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПроводки,СтруктураПроводки);
				СтрокаПроводки.СчетДт=ДанныеПоказателя.СчетДт;
				СтрокаПроводки.СчетКт=ДанныеПоказателя.СчетКт;
				СтрокаПроводки.РесурсРегистра=ДанныеПоказателя.РесурсРегистра;
				
				СтрокаПроводки.Значение			= РабочееЗначение;
				
				Если ДанныеПоказателя.ВалютныйДт=Истина Тогда
					
					СтрокаПроводки.ЗначениеВалютаДт=РабочееЗначениеВалюта;
					
				КонецЕсли;
				
				Если ДанныеПоказателя.ВалютныйКт=Истина Тогда
					
					СтрокаПроводки.ЗначениеВалютаКт=РабочееЗначениеВалюта;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли  РабочееЗначение <> НачЗначение  Тогда
		
		ТекСтрокамПоказатели.ЗначениеИзменено	= Истина;
		ТекСтрока.ЧислоАналитикГруппыРаскрытия	= ОбъектРасчета.МаксАналитикОтчета+ТекСтрокамПоказатели.ЧислоАналитикГруппыРаскрытия;
		
		Если ЗаписатьИзменениеВЛог Тогда
			
			Если ТекСтрокамПоказатели.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				
				ЗаписьВЛоге = ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Добавить();
						
				ЗаполнитьЗначенияСвойств(ЗаписьВЛоге, ТекСтрока, , "Значение,ЗначениеВалюта");				
				ЗаписьВЛоге.НачальноеЗначение 				= НачЗначение;
				ЗаписьВЛоге.НачальноеЗначениеВалюта 		= НачЗначениеВалюта;
				
				ЗаписьВЛоге.НомерОперации     = ОбъектРасчета.НомерТекущейОперации;
				ЗаписьВЛоге.ЧислоАналитикГруппыРаскрытия=ОбъектРасчета.МаксАналитикОтчета+ТекСтрокамПоказатели.ЧислоАналитикГруппыРаскрытия;
				
				ЗаписьВЛоге.Значение 				= ?(ЗначениеЗаполнено(РабочееЗначение), 		РабочееЗначение, 0) 			- ?(ЗначениеЗаполнено(НачЗначение), 				НачЗначение, 0);
				ЗаписьВЛоге.ЗначениеВалюта 			= ?(ЗначениеЗаполнено(РабочееЗначениеВалюта), 	РабочееЗначениеВалюта, 0) 		- ?(ЗначениеЗаполнено(НачЗначениеВалюта), 			НачЗначениеВалюта, 0);
											
				ЗаписьВЛоге.ЧисловойПоказатель = Истина;
				ЗаписьВЛоге.ДобавлениеАналитики=(ЗаписьВЛоге.НачальноеЗначение=Неопределено ИЛИ ДобавленаСтрокаКорректировки);
				ЗаписьВЛоге.СторнированиеАналитики=((НЕ ЗаписьВЛоге.НачальноеЗначение=Неопределено) И (ЗаписьВЛоге.НачальноеЗначение+ЗаписьВЛоге.Значение)=0);
				
			Иначе
				
				СтруктураПоискаВЛоге = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтруктураПоиска);				
				СтруктураПоискаВЛоге.Вставить("НомерОперации", ОбъектРасчета.НомерТекущейОперации);
				
				ЗаписиВЛоге = ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.НайтиСтроки(СтруктураПоискаВЛоге);
				Если ЗаписиВЛоге.Количество() = 0 Тогда
					ЗаписьВЛоге = ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей.Добавить();
					ЗаполнитьЗначенияСвойств(ЗаписьВЛоге, СтруктураПоиска);
					ЗаписьВЛоге.НачальноеЗначение = НачЗначение;
					ЗаписьВЛоге.НомерОперации     = ОбъектРасчета.НомерТекущейОперации;
					ЗаписьВЛоге.ЧислоАналитикГруппыРаскрытия=ОбъектРасчета.МаксАналитикОтчета+ТекСтрокамПоказатели.ЧислоАналитикГруппыРаскрытия;
					ЗаписьВЛоге.ДобавлениеАналитики=(НЕ РабочееЗначение = Неопределено);
				Иначе
					ЗаписьВЛоге = ЗаписиВЛоге[0];
				КонецЕсли;
				
				ЗаписьВЛоге.Значение 				= РабочееЗначение;
				
				ЗаписьВЛоге.ЧисловойПоказатель 		= Ложь;	
				ЗаписьВЛоге.СторнированиеАналитики	= (Не ЗначениеЗаполнено(РабочееЗначение));
				
				ТипизироватьАналитикиПринудительно(ОбъектРасчета,ЗаписьВЛоге,ТекСтрокамПоказатели);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТекЗначение = Неопределено Тогда          // Если текущее значение не заполнено, то это означает, что нужно удалить раскрытие.
		ОбъектРасчета.мПоказателиРаскрытия.Удалить(ТекСтрока);
	КонецЕсли;
		
	Возврат ТекСтрока;
	
КонецФункции

Процедура ТипизироватьАналитикиПринудительно(ОбъектРасчета,СтрокаАналитики,ТекСтрокамПоказатели) Экспорт
	
	Для Индекс=(ОбъектРасчета.МаксАналитикОтчета+1) ПО ОбъектРасчета.МаксАналитикОтчета+ТекСтрокамПоказатели.ЧислоАналитикГруппыРаскрытия Цикл
		
		Если СтрокаАналитики["Аналитика"+Индекс]=Неопределено Тогда
			
			СтрокаАналитики["Аналитика"+Индекс]=КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоВидуАналитики(ТекСтрокамПоказатели["ВидАналитики"+Индекс]);
			
		КонецЕсли;
		
	КонецЦикла;
				
КонецПроцедуры // ТипизироватьАналитикиПринудительно()

Функция НеобходимостьЗапросаПоОперандам(ОбъектРасчета,ТаблицаОперандов)
	
	Для Каждого Показатель ИЗ ОбъектРасчета.ПоказателиДляЗаполнения Цикл
		
		Если НЕ ТаблицаОперандов.Найти(Показатель,"Показатель")=Неопределено Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // НеобходимостьЗапросаПоОперандам()

Процедура ПолучитьДанныеВнутр(ОбъектРасчета, СтрЗапрос)
	
	/////////// Получаем и обрабатываем результаты //////////////////////
	
	ТабРезультат=ПолучитьТаблицуПоИсточникуВнутрПоказатель(ОбъектРасчета,СтрЗапрос);
	
	ТабРезультат.Индексы.Добавить("Показатель");
	
	Для Каждого Операнд ИЗ СтрЗапрос.ТаблицаОперандов Цикл
		
		// Выделим из общей таблицы данные, относящиеся к операнду
		ПромТаблицаОперанда=ОбъектРасчета.мЗначенияОперандов.СкопироватьКолонки();
		
		ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;
		СтрСвертки="КодОперанда,ИтогПоПоказателю";
		СтруктураПолей=Новый Структура;
		
		//Определим правила использования колонок и коды используемых аналитик
		
		Для Каждого СтрокаПравило ИЗ ПравилаИспользованияПолей Цикл
			
			Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаПравило)
				ИЛИ СтрокаПравило.КодАналитики="Значение"
				ИЛИ СтрНайти(СтрокаПравило.КодАналитики,"Аналитика_")>0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПолей.Вставить(СтрокаПравило.КодАналитики,?(ЗначениеЗаполнено(СтрокаПравило.Поле),СтрокаПравило.Поле,СтрокаПравило.КодАналитики));
			СтрСвертки=СтрСвертки+","+СтрокаПравило.КодАналитики;
			
		КонецЦикла;
		
		ПоказательОтбор=ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора.Получить(Операнд.Код);
		СтруктураОтбора=Новый Структура("Показатель",ПоказательОтбор);
		
		СтрокиОперанда=ТабРезультат.НайтиСтроки(СтруктураОтбора);
		
		ЕстьИтог  = Ложь;
		ИтогСумма = 0;
		
		Для Каждого Строка ИЗ СтрокиОперанда Цикл
			
			Если ЕстьИтог И Строка.ИтогПоПоказателю Тогда
				СтрИтог=ПромТаблицаОперанда.Найти(Истина,"ИтогПоПоказателю");
				
				Если Операнд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
					
					СтрИтог.Значение=СтрИтог.Значение+Строка.Значение;
					
				Иначе
					
					СтрИтог.Значение=Строка.Значение;
					
				КонецЕсли;
				
			Иначе
				
				СтрДанные=ПромТаблицаОперанда.Добавить();
				СтрДанные.Значение=Строка.Значение;
				СтрДанные.КодОперанда=Операнд.Код;
				
				Для Каждого Поле ИЗ СтруктураПолей Цикл
					
					Если Строка.ИтогПоПоказателю Тогда
						
						СтрДанные[Поле.Ключ]=Неопределено;
						
					Иначе
						
						СтрДанные[Поле.Ключ]=Строка[СтрЗаменить(Поле.Значение,".","")];
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтрДанные.ИтогПоПоказателю=Строка.ИтогПоПоказателю;
				
				Если НЕ ЕстьИтог Тогда
					ЕстьИтог = СтрДанные.ИтогПоПоказателю;
				КонецЕсли;
				
			КонецЕсли;
			
			Если Операнд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				
				ИтогСумма = ИтогСумма + СтрДанные.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьИтог И СтрокиОперанда.Количество() > 0 Тогда	
			СтрДанные             = ПромТаблицаОперанда.Добавить();
			СтрДанные.Значение    = ?(Операнд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число,ИтогСумма,Неопределено);
			СтрДанные.КодОперанда = Операнд.Код;	
			СтрДанные.ИтогПоПоказателю = Истина;
		КонецЕсли;
		
		Если Операнд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			ПромТаблицаОперанда.Свернуть(СтрСвертки,"Значение");
			
		КонецЕсли;
		
		ЗаполнитьАналитикиПринудительно(ПромТаблицаОперанда,ПравилаИспользованияПолей,ОбъектРасчета);
		
		Если ПромТаблицаОперанда.Количество()=0 Тогда
			
			НоваяСтрока=ПромТаблицаОперанда.Добавить();
			НоваяСтрока.КодОперанда=Операнд.Код;
			НоваяСтрока.ИтогПоПоказателю=Истина;
			НоваяСтрока.Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(Операнд.ТипЗначения);
			
		КонецЕсли;
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ПромТаблицаОперанда,ОбъектРасчета.мЗначенияОперандов);
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеВнутр()

Процедура ЗаполнитьАналитикиПринудительно(ТаблицаДанных,ПравилаИспользованияПолей,КонтекстОтчета=Неопределено) Экспорт
	
	Если (НЕ ТипЗнч(ПравилаИспользованияПолей)=Тип("ТаблицаЗначений")) ИЛИ ПравилаИспользованияПолей.Колонки.Найти("СпособЗаполнения")=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьИтогПоПоказателю=(НЕ ТаблицаДанных.Колонки.Найти("ИтогПоПоказателю")=Неопределено);  
	
	СтрФиксированныеЗначения=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение));
	
	Для Каждого СтрПоле ИЗ СтрФиксированныеЗначения Цикл
				
		Если ТаблицаДанных.Колонки.Найти(СтрПоле.КодАналитики)=Неопределено Тогда
			
			ТаблицаДанных.Колонки.Добавить(СтрПоле.КодАналитики, Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
			
		КонецЕсли;
		
		Если (ЕстьИтогПоПоказателю И ТаблицаДанных.Количество()=1) И ТаблицаДанных[0].ИтогПоПоказателю=Истина Тогда
			
			ТаблицаДанных[0].ИтогПоПоказателю=Ложь;
			
		КонецЕсли;
		
		Для Каждого Строка ИЗ ТаблицаДанных Цикл
			
			Если ЕстьИтогПоПоказателю И Строка.ИтогПоПоказателю Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка[СтрПоле.КодАналитики]=СтрПоле.ФиксированноеЗначение;
			
		КонецЦикла;
			
	КонецЦикла;
	
	Если КонтекстОтчета=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрКонтекст=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки));
	
	Для Каждого СтрПоле ИЗ СтрКонтекст Цикл
		
		МассивПуть=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.Поле,".");
		
		ТекстВычисления="КонтекстОтчета";
		
		Для Каждого Элемент ИЗ МассивПуть Цикл
			
			ТекстВычисления=ТекстВычисления+"["""+Элемент+"""]";
			
		КонецЦикла;
		
		Попытка
			
			ЗначениеЗаполнения=Вычислить(ТекстВычисления);
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось вычислить значение для заполнения аналитики %Поле%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Поле%", Строка(СтрПоле.Поле));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно", , , ТекстСообщения);
			Продолжить;
			
		КонецПопытки;

		Если ТаблицаДанных.Колонки.Найти(СтрПоле.КодАналитики)=Неопределено Тогда
			
			ТаблицаДанных.Колонки.Добавить(СтрПоле.КодАналитики, Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
			
		КонецЕсли;
		
		Если (ЕстьИтогПоПоказателю И ТаблицаДанных.Количество()=1) И ТаблицаДанных[0].ИтогПоПоказателю=Истина Тогда
			
			ТаблицаДанных[0].ИтогПоПоказателю=Ложь;
			
		КонецЕсли;
		
		Для Каждого Строка ИЗ ТаблицаДанных Цикл
			
			Если ЕстьИтогПоПоказателю И Строка.ИтогПоПоказателю Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка[СтрПоле.КодАналитики]=ЗначениеЗаполнения;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьАналитикиПринудительно()

Функция ПолучитьДанныеРегистраВнутр(ОбъектРасчета,СтрЗапрос)
	
	ТабРезультат=ПолучитьТаблицуПоИсточникуВнутрРегистрНакопления(ОбъектРасчета,СтрЗапрос);
	
	Если СтрЗапрос.ТаблицаОперандов.Количество()=1 Тогда
		
		ЕстьАналитики=Ложь;
		СтруктураПолей=Новый Структура;
		
		Для Каждого Правило ИЗ СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса Цикл
			
			Если СтрНайти(Правило.КодАналитики,"Аналитика")>0 Тогда
				ЕстьАналитики=Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		КодОперанда=СтрЗапрос.ТаблицаОперандов[0].Код;
		
		Если ТабРезультат.Колонки.Значение.ТипЗначения.СодержитТип(Тип("Число")) Тогда
			
			ИтоговоеЗначение=ТабРезультат.Итог("Значение");
			НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
			НоваяСтрока.ИтогПоПоказателю=Истина;
			НоваяСтрока.КодОперанда=КодОперанда;
			НоваяСтрока.Значение=ИтоговоеЗначение;
			
		ИначеЕсли ТабРезультат.Количество()=1 Тогда
			
			ИтоговоеЗначение=ТабРезультат[0].Значение;
			НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
			НоваяСтрока.ИтогПоПоказателю=Истина;
			НоваяСтрока.КодОперанда=КодОперанда;
			НоваяСтрока.Значение=ИтоговоеЗначение;
			
		КонецЕсли;	
		
		Если ЕстьАналитики Тогда
			
			Для Каждого СтрРезультат ИЗ ТабРезультат Цикл
				
				НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрРезультат);
				
				НоваяСтрока.ИтогПоПоказателю=Ложь;
				НоваяСтрока.КодОперанда=КодОперанда;
				
			КонецЦикла;
			
		КонецЕсли;
				
	Иначе
				
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ТаблицаДанных",ТабРезультат);
		ДанныеЗапроса.Вставить("ТабСчетаОперандов",СтрЗапрос.СтруктураЗапроса.ТабСчетаОперандов);
		ДанныеЗапроса.Вставить("СоответствиеРесурсов",СтрЗапрос.СтруктураЗапроса.СоответствиеРесурсов);
		
		Возврат ДанныеЗапроса;
		
	КонецЕсли;
		
КонецФункции // ПолучитьДанныеРегистраВнутр()

Процедура ПолучитьДанныеРегистраБухгалтерииТек(ОбъектРасчета,СтрЗапрос)
	
	ДанныеЗапроса=ПолучитьДанныеРегистраВнутр(ОбъектРасчета,СтрЗапрос);
	
	Если ДанныеЗапроса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазобратьСводныеДанныеРегистраБухгалтерииТек(ОбъектРасчета,ДанныеЗапроса.ТаблицаДанных,СтрЗапрос.ТаблицаОперандов,ДанныеЗапроса.ТабСчетаОперандов,СтрЗапрос.ТабПравилаИспользованияПолей);
		
КонецПроцедуры // ПолучитьДанныеРегистраБухгалтерииТек()

Процедура ПоместитьЗначенияВТаблицуОперандовТек(ОбъектРасчета,ТабОперандов,ТабСчетаОперандов,ЕстьРазворотПоАналитикам,СписокКодовОперандов=Неопределено)
	
	ЕстьКоррСчета=(НЕ ТабОперандов.Колонки.Найти("КоррСчет")=Неопределено);
	
	ТекстКолонкиАналитика="";
	ТекстКолонкиРесурсы="";
	ТекстКолонкиРесурсыСумма="";
	
	Если ЕстьРазворотПоАналитикам Тогда
		
		Для Каждого Колонка ИЗ ТабОперандов.Колонки Цикл
			Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
				ТекстКолонкиАналитика=ТекстКолонкиАналитика+",
				|ТаблицаДанных."+Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстКолонкиРесурсыСумма=ТекстКолонкиРесурсыСумма+",
	|СУММА(ISNULL(ТаблицаДанных.Значение,0)) КАК Значение";
	
	ТекстКолонкиРесурсы=ТекстКолонкиРесурсы+",
	|ВЫРАЗИТЬ(ТаблицаДанных.Значение КАК Число(18,5)) КАК Значение";
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="Выбрать
	|ТаблицаДанных.Счет,";
	
	Если ЕстьКоррСчета Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ТаблицаДанных.КоррСчет,";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+?(ПустаяСтрока(ТекстКолонкиАналитика),"",Сред(ТекстКолонкиАналитика,2)+",")+Сред(ТекстКолонкиРесурсы,2)+"	
	|Поместить ТаблицаДанных
	|ИЗ &ТаблицаДанных КАК ТаблицаДанных
	|;
	|ВЫБРАТЬ *
	|Поместить ТабСчетаОперандов
	|ИЗ &ТабСчетаОперандов КАК ТабСчетаОперандов";
	
	Если НЕ СписокКодовОперандов=Неопределено Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ ТабСчетаОперандов.КодОперанда В(&СписокКодовОперанда)";
		
		Запрос.УстановитьПараметр("СписокКодовОперанда",СписокКодовОперандов);
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|;
	|ВЫБРАТЬ
	|ТабСчетаОперандов.КодОперанда,"+?(ПустаяСтрока(ТекстКолонкиАналитика),"",Сред(ТекстКолонкиАналитика,2)+",")+Сред(ТекстКолонкиРесурсыСумма,2)+"	
	|ИЗ ТабСчетаОперандов КАК ТабСчетаОперандов
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|ТаблицаДанных КАК ТаблицаДанных
	|ПО ТабСчетаОперандов.СчетДанные=ТаблицаДанных.Счет";
	
	Если ЕстьКоррСчета Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|И ТабСчетаОперандов.КоррСчетДанные=ТаблицаДанных.КоррСчет";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|Сгруппировать ПО
	|ТабСчетаОперандов.КодОперанда"+?(ПустаяСтрока(ТекстКолонкиАналитика),"",","+Сред(ТекстКолонкиАналитика,2));	
	
	Запрос.УстановитьПараметр("ТаблицаДанных",ТабОперандов);
	Запрос.УстановитьПараметр("ТабСчетаОперандов",ТабСчетаОперандов);
	Запрос.Текст=ТекстЗапроса;
	
	ТекТаблицаАналитик=Запрос.Выполнить().Выгрузить();
	
	Если ЕстьРазворотПоАналитикам Тогда
		ТекТаблицаИтога=ОбъектРасчета.мЗначенияОперандов.СкопироватьКолонки();
	КонецЕсли;
	
	Для Каждого СтрАналитика ИЗ ТекТаблицаАналитик Цикл
		
		НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
		НоваяСтрока.ИтогПоПоказателю=НЕ ЕстьРазворотПоАналитикам;
		
		Если ЕстьРазворотПоАналитикам Тогда
			НоваяСтрока=ТекТаблицаИтога.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
			НоваяСтрока.ИтогПоПоказателю=ИСТИНА;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРазворотПоАналитикам Тогда
		ТекТаблицаИтога.Свернуть("КодОперанда,ИтогПоПоказателю","Значение");
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТекТаблицаИтога,ОбъектРасчета.мЗначенияОперандов);
	КонецЕсли;
	
КонецПроцедуры // ПоместитьЗначенияВТаблицуОперандовТек()

Процедура РазобратьСводныеДанныеРегистраБухгалтерииТек(ОбъектРасчета,ТаблицаДанных,ТаблицаОперандов,ТабСчетаОперандов,ТабПравилаИспользованияПолей);
	
	Если ТаблицаДанных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
		
	Если ТабПравилаИспользованияПолей.Количество()=1 Тогда
		
		ПравилаИспользованияПолей=ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей;			
		ПоместитьЗначенияВТаблицуОперандовТек(ОбъектРасчета,ТаблицаДанных,ТабСчетаОперандов,НЕ (ПравилаИспользованияПолей.Количество()=1 И СтрНайти(ПравилаИспользованияПолей[0].КодАналитики,"Аналитика")=0));
					
	Иначе
		
		ЕстьКоррСчета=(НЕ ТаблицаДанных.Колонки.Найти("КоррСчет")=Неопределено);
		
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.Текст="ВЫБРАТЬ * Поместить ТаблицаДанных ИЗ &ТаблицаДанных КАК ТаблицаДанных
		|;
		|ВЫБРАТЬ * ПОМЕСТИТЬ ТабСчетаОперандов ИЗ &ТабСчетаОперандов КАК ТабСчетаОперандов";
		Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
		Запрос.УстановитьПараметр("ТабСчетаОперандов",ТабСчетаОперандов);
		Запрос.Выполнить();
		
		ТекстОтбор="	
		|ГДЕ ТаблицаДанных.Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТабСчетаОперандов.СчетДанные ИЗ ТабСчетаОперандов КАК ТабСчетаОперандов ГДЕ ТабСчетаОперандов.КодОперанда В(&СписокКодовОперандов))"; 
		
		Если ЕстьКоррСчета Тогда
			ТекстОтбор=ТекстОтбор+"
			|И ТаблицаДанных.КоррСчет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТабСчетаОперандов.КоррСчетДанные ИЗ ТабСчетаОперандов КАК ТабСчетаОперандов ГДЕ ТабСчетаОперандов.КодОперанда В(&СписокКодовОперандов))"; 
		КонецЕсли;
		
		Для Каждого СтрПравило ИЗ ТабПравилаИспользованияПолей Цикл
			
			ТекПравило=СтрПравило.ПравилаИспользованияПолей;
			ТекстПоля=",ТаблицаДанных.Счет";
			ТекстГруппировка=",ТаблицаДанных.Счет";
			
			Если ЕстьКоррСчета Тогда
				
				ТекстПоля=ТекстПоля+",ТаблицаДанных.КоррСчет";
				ТекстГруппировка=ТекстГруппировка+",ТаблицаДанных.КоррСчет";
				
			КонецЕсли;
			
			ТекстПоля=ТекстПоля+",
			|СУММА(ТаблицаДанных.Значение) КАК Значение";
			
			МассивПолей=Новый Массив;
			
			Для Каждого СтрПоле ИЗ ТекПравило Цикл
				
				Если (НЕ СтрПоле.КодАналитики="Значение")
					И МассивПолей.Найти(СтрПоле.КодАналитики)=Неопределено Тогда
					
					ТекстПоля=ТекстПоля+",
					|ТаблицаДанных."+СтрПоле.КодАналитики+" КАК "+СтрПоле.КодАналитики;
					
					ТекстГруппировка=ТекстГруппировка+",
					|ТаблицаДанных."+СтрПоле.КодАналитики;
					
					МассивПолей.Добавить(СтрПоле.КодАналитики);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстПоля,2)+"
			|ИЗ ТаблицаДанных КАК ТаблицаДанных"+ТекстОтбор+"
			|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2);
			
			Запрос.УстановитьПараметр("СписокКодовОперандов",СтрПравило.СписокКодовОперандов);
			
			ТекТаблицаДанных=Запрос.Выполнить().Выгрузить();
			
			ПравилаИспользованияПолей=СтрПравило.ПравилаИспользованияПолей;		
			ПоместитьЗначенияВТаблицуОперандовТек(ОбъектРасчета,ТекТаблицаДанных,ТабСчетаОперандов,НЕ (ПравилаИспользованияПолей.Количество()=1 И СтрНайти(ПравилаИспользованияПолей[0].КодАналитики,"Аналитика")=0),СтрПравило.СписокКодовОперандов);
							
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РазобратьСводныеДанныеРегистраБухгалтерииТек()

Процедура ПолучитьДанныеВнутрПараметрический(ОбъектРасчета,СтрЗапрос) Экспорт
	
	Перем ПостроительЗапросаВнутр;
	
	ТабРезультат=ПолучитьТаблицуПоИсточникуВнутрПараметрический(ОбъектРасчета,СтрЗапрос,ПостроительЗапросаВнутр);
	
	КодОперанда   = СтрЗапрос.ТаблицаОперандов[0].Код;
	ОперандСсылка = СтрЗапрос.ТаблицаОперандов[0].Ссылка;
	
	СтруктураПолей=Новый Структура;
	
	Для Каждого Правило ИЗ СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса Цикл
		
		СтруктураПолей.Вставить(Правило.КодАналитики,?(ЗначениеЗаполнено(Правило.Синоним),Правило.Синоним,Правило.КодАналитики));		
		
	КонецЦикла;
	
	ЕстьИтог  = Ложь;
	ИтогСумма = 0;
	
	Для Каждого Строка ИЗ ТабРезультат Цикл
		
		Если ЕстьИтог И Строка.ИтогПоПоказателю Тогда
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ИтогПоПоказателю",Истина);
			СтруктураПоиска.Вставить("КодОперанда",КодОперанда);
			
			МассивИтог=ОбъектРасчета.мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
			МассивИтог[0].Значение=МассивИтог[0].Значение+Строка.Значение;
			
		Иначе
			
			СтрДанные=ОбъектРасчета.мЗначенияОперандов.Добавить();
			СтрДанные.Значение      = Строка.Значение;
			СтрДанные.КодОперанда   = КодОперанда;
			
			Для Каждого Поле ИЗ СтруктураПолей Цикл
				
				СтрДанные[Поле.Ключ]=Строка[Поле.Значение];
				
			КонецЦикла;
			
			СтрДанные.ИтогПоПоказателю=Строка.ИтогПоПоказателю;
			
			ИтогСумма = ИтогСумма + СтрДанные.Значение;
			
			Если НЕ ЕстьИтог Тогда
				ЕстьИтог = СтрДанные.ИтогПоПоказателю;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьИтог И ТабРезультат.Количество() > 0 Тогда
		
		СтрДанные             = ОбъектРасчета.мЗначенияОперандов.Добавить();
		СтрДанные.Значение    = ИтогСумма;
		СтрДанные.КодОперанда = КодОперанда;	
		СтрДанные.ИтогПоПоказателю = Истина;
		
	КонецЕсли;	
		
КонецПроцедуры // ПолучитьДанныеВнутрПараметрический ()

Процедура ПолучитьДанныеПроизвольногоЗапросаВнутр(ОбъектРасчета,СтрЗапрос)
	
	ТаблицаДанных=ПолучитьТаблицуПоИсточникуВнутрПроизвольный(ОбъектРасчета,СтрЗапрос); 	
	
	Для Каждого Операнд ИЗ СтрЗапрос.ТаблицаОперандов Цикл
		
		ТекТаблицаДанных=ТаблицаДанных.Скопировать();
		СтрЗначение=Операнд.ПравилаИспользованияПолейЗапроса.Найти("Значение","КодАналитики");
		
		Если СтрЗначение=Неопределено Тогда
			
			ТекстСообщения = НСтр("ru = 'Для операнда %КодОперанда% не определено поле для числового значения.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодОперанда%", Строка(Операнд.Код));
			Сообщить(ТекстСообщения, СтатусСообщения.Важное);
			ФлагОшибкиИмпорта=Истина;
			
		Иначе
			
			Если ТекТаблицаДанных.Колонки.Найти("Значение")=Неопределено Тогда
				
				ТекТаблицаДанных.Колонки[СтрЗначение.Синоним].Имя="Значение";	
				
				Для Каждого СтрПоле ИЗ Операнд.ПравилаИспользованияПолейЗапроса Цикл
					
					Если СтрПоле.КодАналитики="Значение" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					Если ТекТаблицаДанных.Колонки.Найти(СтрПоле.КодАналитики)=Неопределено Тогда
						
						ТекТаблицаДанных.Колонки[СтрПоле.Синоним].Имя=СтрПоле.КодАналитики;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			ТекТаблицаДанных.Колонки.Добавить("КодОперанда");
			ТекТаблицаДанных.ЗаполнитьЗначения(Операнд.Код,"КодОперанда");
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТекТаблицаДанных,ОбъектРасчета.мЗначенияОперандов);
			
			// Добавим свернутое значение
			
			Если Операнд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				
				НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
				НоваяСтрока.КодОперанда=Операнд.Код;
				НоваяСтрока.Значение=ТекТаблицаДанных.Итог("Значение");
				НоваяСтрока.ИтогПоПоказателю=Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;		
	
КонецПроцедуры // ПолучитьДанныеПроизвольногоЗапросаВнутр()

Функция ПолучитьЗначениеОперандаФункция(ОбъектРасчета,ТекстФункции) Экспорт
	
	Перем ТаблицаЗначенийОперанда;
	
	Попытка
		
		ТекстЗапросаОперанда=?(ОбъектРасчета.АнализЧувствительности,СтрЗаменить(ТекстФункции,"РегистрСведений.ЗначенияПоказателейОтчетов","РегистрСведений.ЗначенияПоказателейМоделирование"),ТекстФункции);
	
		ОбъектРасчета.ПроизвольнаяФункция(ТекстЗапросаОперанда,ТаблицаЗначенийОперанда);
		
		Возврат ТаблицаЗначенийОперанда;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Во время исполнения процедуры вычисления операнда 
		|		произошла следующая критическая ошибка:
		|        %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		
		ОбъектРасчета.ФлагОшибкиИмпорта = Истина;
		Возврат Неопределено;
		
	КонецПопытки;
	
КонецФункции // ПолучитьЗначениеОперандаФункция(ТекстЗапроса)

Функция ПолучитьТаблицуВнутрТекущий(ОбъектРасчета,СтрЗапрос,ТекПоказателиРаскрытия)
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;

	ТекстЗапроса="ВЫБРАТЬ
	|	ТекПоказателиРаскрытия.Показатель КАК Показатель,
	|	ТекПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,";
	
	Для Инд = (ОбъектРасчета.МаксАналитикОтчета + 1) По (ОбъектРасчета.МаксАналитикОтчета + ОбъектРасчета.МаксАналитикПоказателя) Цикл
		
		ТекстЗапроса=ТекстЗапроса+"	
	|	ТекПоказателиРаскрытия.Аналитика"+Инд+" КАК Аналитика"+Инд+",";
		
	КонецЦикла;	
	
	ТекстЗапроса=ТекстЗапроса+"
	|	ТекПоказателиРаскрытия.Значение КАК Значение,
	|	ТекПоказателиРаскрытия.ЗначениеВалюта КАК ЗначениеВалюта,
	|	ТекПоказателиРаскрытия.ИтоговоеЗначение КАК ИтоговоеЗначение
	|{ВЫБРАТЬ
	|	АналитикаВалюта.*,";
	
	Для Инд = (ОбъектРасчета.МаксАналитикОтчета + 1) По (ОбъектРасчета.МаксАналитикОтчета + ОбъектРасчета.МаксАналитикПоказателя) Цикл
		
		ТекстЗапроса=ТекстЗапроса+"	
	|	Аналитика"+Инд+",";
		
	КонецЦикла;	
	
	ТекстЗапроса=ТекстЗапроса+"
	|	ИтоговоеЗначение,
	|	Показатель.*}
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейМакет КАК ТекПоказателиРаскрытия";
	
	ПостроительЗапросаВнутр.Текст=ТекстЗапроса;
	
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	// Добавляем отборы
	ОтборПоказатель=ПостроительЗапросаВнутр.Отбор.Добавить("Показатель");
	ОтборПоказатель.ВидСравнения=ВидСравнения.Равно;
	ОтборПоказатель.Значение=СтрЗапрос.ПоказательОтбор;
	ОтборПоказатель.Использование=Истина;
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметровЗапроса.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета
			ИЛИ (НЕ ОбъектРасчета.мТаблицаВидовАналитикВидаОтчета.Найти(Параметр.ПолеБД,"КодАналитики")=Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ПолеБД);
		
		ОтборПараметр.Использование=Истина;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(ОбъектРасчета,Параметр);
		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
		Если СтрНайти(Параметр.ПолеБД,"Аналитика")>0 
			И (Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета
			ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению)
			И ПостроительЗапросаВнутр.Отбор.Найти("ИтоговоеЗначение")=Неопределено
			
			Тогда
			
			ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ИтоговоеЗначение");			
			ОтборПараметр.Использование=Истина;
			ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
			ОтборПараметр.Значение=Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекЗапрос=ПостроительЗапросаВнутр.ПолучитьЗапрос();
	
	Запрос=Новый Запрос;
	Запрос.Текст="Выбрать * Поместить ТекПоказателиРаскрытия ИЗ &ТекПоказателиРаскрытия КАК ТекПоказателиРаскрытия
	|;
	|"+СтрЗаменить(ТекЗапрос.Текст,"РегистрСведений.ЗначенияПоказателейМакет","ТекПоказателиРаскрытия");
	
	Запрос.УстановитьПараметр("ТекПоказателиРаскрытия",ТекПоказателиРаскрытия);
	
	Для Каждого Параметр ИЗ ТекЗапрос.Параметры Цикл
		
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
		
	КонецЦикла;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуВнутрТекущий()

Процедура ПолучитьДанныеВнутрТекущий(ОбъектРасчета,ТабРезультат,СтрЗапрос)
	
	/////////// Получаем и обрабатываем результаты //////////////////////
		
	ТабРезультат.Индексы.Добавить("Показатель");
	
	ПромТаблицаОперанда=ОбъектРасчета.мЗначенияОперандов.СкопироватьКолонки();
	
	ПравилаИспользованияПолей=СтрЗапрос.ПравилаИспользованияПолейЗапроса;
	СтрСвертки="КодОперанда,ИтогПоПоказателю";
	СтруктураПолей=Новый Структура;
	
	//Определим правила использования колонок и коды используемых аналитик
	
	Для Каждого СтрокаПравило ИЗ ПравилаИспользованияПолей Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрокаПравило) Тогда
			
			Продолжить;
			
		КонецЕсли;

		СтруктураПолей.Вставить(СтрокаПравило.КодАналитики,?(ЗначениеЗаполнено(СтрокаПравило.Поле),СтрокаПравило.Поле,СтрокаПравило.КодАналитики));
		СтрСвертки=СтрСвертки+","+СтрокаПравило.КодАналитики;
		
	КонецЦикла;
	
	ЕстьИтог  = Ложь;
	
	ТекТипЗначения=?(ЗначениеЗаполнено(СтрЗапрос.ТипЗначения),СтрЗапрос.ТипЗначения,Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	
	ИтогСумма = ОбщегоНазначенияУХ.ПолучитьПустоеЗначение(ТекТипЗначения);
	
	Для Каждого Строка ИЗ ТабРезультат Цикл
		
		СтрДанные=ПромТаблицаОперанда.Добавить();
		СтрДанные.Значение=Строка.Значение;
		СтрДанные.КодОперанда=СтрЗапрос.Код;
		
		Для Каждого Поле ИЗ СтруктураПолей Цикл
			
			СтрДанные[Поле.Ключ]=Строка[Поле.Значение];
			
		КонецЦикла;
		
		СтрДанные.ИтогПоПоказателю=Строка.ИтоговоеЗначение;
		
		Если НЕ ЕстьИтог Тогда
			ЕстьИтог = СтрДанные.ИтогПоПоказателю;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьИтог И ТабРезультат.Количество() > 0 Тогда
		
		ИтоговоеЗначение=ОбщегоНазначенияУХ.ТЗИтог(ПромТаблицаОперанда,,"Значение", СтрЗапрос.Показатель.ВидИтога,ТекТипЗначения);
		
		СтрДанные             = ПромТаблицаОперанда.Добавить();
		СтрДанные.Значение    = ИтоговоеЗначение;
		СтрДанные.КодОперанда = СтрЗапрос.Код;
		СтрДанные.ИтогПоПоказателю = Истина;
		
	КонецЕсли;
	
	Если ТекТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		ПромТаблицаОперанда.Свернуть(СтрСвертки,"Значение");
	Иначе
		ПромТаблицаОперанда=ПодготовитьТаблицуРасчетаНечисловыхЗначений(ОбъектРасчета,ПромТаблицаОперанда,СтрСвертки,"Значение",ТекТипЗначения);
	КонецЕсли;
	
	ЗаполнитьАналитикиПринудительно(ПромТаблицаОперанда,ПравилаИспользованияПолей,ОбъектРасчета);
	
	МассивСтрок=ОбъектРасчета.мЗначенияОперандов.НайтиСтроки(Новый Структура("КодОперанда",СтрЗапрос.Код));
	
	Для Каждого Строка ИЗ МассивСтрок Цикл
		
		ОбъектРасчета.мЗначенияОперандов.Удалить(Строка);
		
	КонецЦикла;	
	
	ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ПромТаблицаОперанда,ОбъектРасчета.мЗначенияОперандов);
	
КонецПроцедуры // ПолучитьДанныеВнутрТекущий()

// Получает значения операнда, ссылающегося на показатель текущего отчета
//
Процедура ПолучитьЗначенияОперандаИзОтчета(ОбъектРасчета,КодПоказательОперанд,ПоказательОперанд,СтрПоказательОперанд,СтрПоказательИтог,РабочаяТаблица,СтруктураАналитик)
		
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("Показатель",ПоказательОперанд);
	
	СтрОперандИтог=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[ПоказательОперанд];
	
	Если ЗначениеЗаполнено(СтрПоказательОперанд.ГруппаРаскрытия) И ЗначениеЗаполнено(СтрПоказательИтог.ГруппаРаскрытия) Тогда
		
		МассивДанных=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска);
		
		// Определим структуру для разворота аналитики показателя - операнда по аналитике 
		// вычисляемого показателя.
		
		ТекСтруктураАналитик=Новый Структура;
		
		Для НомерАналитики=(ОбъектРасчета.МаксАналитикОтчета+1) ПО (ОбъектРасчета.МаксАналитикОтчета+СтрПоказательИтог.ЧислоАналитикГруппыРаскрытия) Цикл
			
			Если СтруктураАналитик.Свойство("Аналитика"+НомерАналитики) Тогда
				СтруктураАналитик["Аналитика"+НомерАналитики]=СтруктураАналитик["Аналитика"+НомерАналитики]+1;	
			Иначе
				СтруктураАналитик.Вставить("Аналитика"+НомерАналитики,1);
			КонецЕсли;
			
			ТекСтруктураАналитик.Вставить("Аналитика"+НомерАналитики,СтрПоказательИтог["ВидАналитики"+НомерАналитики].ТипЗначения);
			
		КонецЦикла;
	
		СтруктураСвязи=Новый Структура;
		
		Для ИндексОп=(ОбъектРасчета.МаксАналитикОтчета+1) По ОбъектРасчета.ЧислоДопАналитик Цикл
			
			ВидАналитикиОперанд=СтрПоказательОперанд["ВидАналитики"+ИндексОп];
			
			Если НЕ ВидАналитикиОперанд=ОбъектРасчета.мПустойВидАналитики Тогда
				
				Для ИндексИт=(ОбъектРасчета.МаксАналитикОтчета+1) По ОбъектРасчета.ЧислоДопАналитик Цикл
					
					ВидАналитикиИтог=СтрПоказательИтог["ВидАналитики"+ИндексИт];
					
					Если ВидАналитикиОперанд=ВидАналитикиИтог Тогда
						
						СтруктураСвязи.Вставить("Аналитика"+ИндексОп,"Аналитика"+ИндексИт);
						ТекСтруктураАналитик.Вставить("Аналитика"+ИндексИт,Истина);
												
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтрПоказательИтог.Валютный Тогда
			// Отметим заполнение аналитики показателя по данным операнда
			Если СтруктураАналитик.Свойство("АналитикаВалюта") Тогда
				СтруктураАналитик["АналитикаВалюта"]=СтруктураАналитик["АналитикаВалюта"]+1;	
			Иначе
				СтруктураАналитик.Вставить("АналитикаВалюта",1);
			КонецЕсли;
			
			ТекСтруктураАналитик.Вставить("АналитикаВалюта");

			Если СтрПоказательОперанд.Валютный Тогда
				
				СтруктураСвязи.Вставить("АналитикаВалюта","АналитикаВалюта");
				ТекСтруктураАналитик.Вставить("АналитикаВалюта",Истина);
				
			Иначе
				
				ТекСтруктураАналитик.Вставить("АналитикаВалюта",Справочники.Валюты.ПустаяСсылка());
						
			КонецЕсли;
							
		КонецЕсли;
							
		Для Каждого СтрокаДанные ИЗ МассивДанных Цикл
			
			НоваяСтрока=РабочаяТаблица.Добавить();
			
			Для Каждого Связь ИЗ СтруктураСвязи Цикл
				
				НоваяСтрока[Связь.Значение]=СтрокаДанные[Связь.Ключ];	
						
			КонецЦикла;
			
			Для Каждого КлючИЗначение ИЗ ТекСтруктураАналитик Цикл
				
				Если КлючИЗначение.Значение=Истина Тогда
					
					Продолжить;
					
				ИначеЕсли КлючИЗначение.Ключ="АналитикаВалюта" Тогда
					
					НоваяСтрока.АналитикаВалюта=Справочники.Валюты.ПустаяСсылка();
						
				Иначе
					
					НоваяСтрока[КлючИЗначение.Ключ]=ОбщегоНазначенияУХ.ПустоеЗначениеОписанияТипа(КлючИЗначение.Значение);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока["_"+КодПоказательОперанд]=СтрокаДанные.Значение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СтрПоказательИтог.ПересчитыватьВалютнуюСумму Тогда
		
		// Добавим итоговое значение
		
		НоваяСтрока=РабочаяТаблица.Добавить();
		НоваяСтрока["_"+КодПоказательОперанд]=СтрОперандИтог.Значение;
		НоваяСтрока.ИтогПоПоказателю=Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗначенияОперандаИзОтчета()

Процедура ПолучитьЗначенияОперандаИзСправочника(ОбъектРасчета,КодОперанда,Операнд,РабочаяТаблица,СтруктураАналитик,ОперандыБезАналитики)
	
	ЕстьАналитики=Ложь;
	
	Для Каждого Аналитика ИЗ Операнд.ТаблицаАналитик Цикл
		
		Если ПустаяСтрока(Аналитика.КодАналитики) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ЕстьАналитики=Истина;
		
		Если СтруктураАналитик.Свойство(Аналитика.КодАналитики) Тогда
			СтруктураАналитик[Аналитика.КодАналитики]=СтруктураАналитик[Аналитика.КодАналитики]+1;
		Иначе
			СтруктураАналитик.Вставить(Аналитика.КодАналитики,1);
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураПоиска=Новый Структура;
	СтруктураПоиска.Вставить("КодОперанда",КодОперанда);
	
	Если НЕ ЕстьАналитики Тогда
		
		СтруктураПоиска.Вставить("ИтогПоПоказателю",Истина);
		
	КонецЕсли;
	
	МассивДанных=ОбъектРасчета.мЗначенияОперандов.НайтиСтроки(СтруктураПоиска);
		
	Если МассивДанных.Количество()>0 Тогда
		
		Если НЕ ЕстьАналитики Тогда
			
			ОперандыБезАналитики.Вставить("_"+КодОперанда,МассивДанных[0].Значение);

		Иначе;
			
			Для Каждого СтрокаДанные ИЗ МассивДанных Цикл
				
				НоваяСтрока=РабочаяТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаДанные,,"Значение");
				НоваяСтрока["_"+КодОперанда]=СтрокаДанные.Значение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЕстьАналитики Тогда
			
			ОперандыБезАналитики.Вставить("_"+КодОперанда,ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(Операнд.ТипЗначения));
			
		КонецЕсли;
		
	КонецЕсли;
 	
КонецПроцедуры // ПолучитьЗначенияОперандаИзОтчета() 
 
Функция ПодготовитьТаблицуРасчетаНечисловыхЗначений(ОбъектРасчета,РабочаяТаблица,ТекстСверткиИзмерения,ТекстСверткиОперанды,ТипЗначения=Неопределено)
	
	МассивКолонокИзмерений=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТекстСверткиИзмерения);
	МассивКолонокОперандов=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТекстСверткиОперанды);
	
	РезультирующаяТаблица=Новый ТаблицаЗначений;
	
	Для Каждого Колонка ИЗ МассивКолонокИзмерений Цикл
		
		Если РабочаяТаблица.Колонки.Найти(Колонка)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультирующаяТаблица.Колонки.Добавить(Колонка,РабочаяТаблица.Колонки[Колонка].ТипЗначения);
		
	КонецЦикла;
	
	Для Каждого Колонка ИЗ МассивКолонокОперандов Цикл
		
		Если РабочаяТаблица.Колонки.Найти(Колонка)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		РезультирующаяТаблица.Колонки.Добавить(Колонка,РабочаяТаблица.Колонки[Колонка].ТипЗначения);
		
	КонецЦикла;
	
	ТаблицаИзмерений=РабочаяТаблица.Скопировать();
	ТаблицаИзмерений.Свернуть(ТекстСверткиИзмерения);
	ТаблицаТек=РезультирующаяТаблица.СкопироватьКолонки();
	
	Для Каждого Строка ИЗ ТаблицаИзмерений Цикл
		
		СтруктураПоиска=Новый Структура;
		
		Для Каждого Колонка ИЗ МассивКолонокИзмерений Цикл 
			
			Если ПустаяСтрока(Колонка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтруктураПоиска.Вставить(Колонка,Строка[Колонка]);
			
		КонецЦикла;
		
		ДанныеРасчета=РабочаяТаблица.НайтиСтроки(СтруктураПоиска);
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ДанныеРасчета,ТаблицаТек);
		
		НоваяСтрока=РезультирующаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		
		Для Каждого КолонкаОперанд ИЗ МассивКолонокОперандов Цикл
			
			Если ПустаяСтрока(Колонка) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ТипЗначения=Неопределено Тогда
				
				ТекТипЗначения=ОбщегоНазначенияУХ.ПолучитьТипЗначенияПоказателяПоТипу(РабочаяТаблица.Колонки[КолонкаОперанд].ТипЗначения.Типы()[0]);
				
			Иначе
				
				ТекТипЗначения=ТипЗначения;
				
			КонецЕсли;	
			
			НоваяСтрока[КолонкаОперанд]=ОбщегоНазначенияУХ.ТЗИтог(ТаблицаТек,,КолонкаОперанд,Перечисления.ВидыИтоговПоказателя.Сумма,ТекТипЗначения);
			
		КонецЦикла;
		
		ТаблицаТек.Очистить();
		
	КонецЦикла;
	
	Возврат РезультирующаяТаблица;
	
КонецФункции // ПодготовитьТаблицуРасчетаНечисловыхЗначений()

// Проверяет заполнение аналитик в переданной строке таблицы раскрытия
//
Функция ПроверитьЗаполнениеАналитик(ОбъектРасчета,СтрокаРаскрытия,ТабРаскрытия,Запись=Ложь,НачальнаяПозиция=0) Экспорт
	
	Если ТипЗнч(ОбъектРасчета.мТаблицаВидовАналитикВидаОтчета) <> Тип("ТаблицаЗначений") Тогда
		ОбъектРасчета.мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ОбъектРасчета.ВидОтчета);
	КонецЕсли;
	
	ЕстьАналитики=Ложь;
	
	НачальныйИндекс=?(НачальнаяПозиция=0,1,НачальнаяПозиция+1);
	
	Для Индекс=НачальныйИндекс ПО ОбъектРасчета.ЧислоДопАналитик Цикл
		
		Если НЕ (ТабРаскрытия.Колонки.Найти("Аналитика"+Индекс)=Неопределено)
			И ((НЕ Запись) ИЛИ ОбъектРасчета.мТаблицаВидовАналитикВидаОтчета.Найти("Аналитика"+Индекс,"КодАналитики")=Неопределено)
			И НЕ СтрокаРаскрытия["Аналитика"+Индекс]=Неопределено Тогда
			
			ЕстьАналитики=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если (НЕ ТабРаскрытия.Колонки.Найти("АналитикаВалюта")=Неопределено) И ЗначениеЗаполнено(СтрокаРаскрытия.АналитикаВалюта) Тогда
		
		ЕстьАналитики=Истина;
		
	КонецЕсли;
	
	Возврат ЕстьАналитики;
	
КонецФункции // ПроверитьЗаполнениеАналитик


Функция ПолучитьТаблицуОтчетовРасшифровки(КонтекстОтчета,СтрЗапрос,СтруктураОтбора=Неопределено) Экспорт
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса;
	ПостроительЗапросаВнутр.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	ТекстВложенногоЗапроса=СтрЗапрос.ТекстЗапроса;
	
	Если ТипЗнч(КонтекстОтчета)=Тип("Структура") Тогда
		
		Если КонтекстОтчета.Свойство("АнализЧувствительности") И КонтекстОтчета.АнализЧувствительности Тогда		
			ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "ЗначенияПоказателейОтчетов", "ЗначенияПоказателейМоделирование");
		Иначе
			КонтекстОтчета.Вставить("АнализЧувствительности", Ложь);
		КонецЕсли;
		
	Иначе	
		Если ТипЗнч(КонтекстОтчета) = Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
			 Если КонтекстОтчета.АнализЧувствительности Тогда
				  ТекстВложенногоЗапроса = СтрЗаменить(ТекстВложенногоЗапроса, "ЗначенияПоказателейОтчетов", "ЗначенияПоказателейМоделирование");
			 КонецЕсли; 	 	 
	    КонецЕсли;
	КонецЕсли;

	ПостроительЗапросаВнутр.Текст=ТекстВложенногоЗапроса;
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();	
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	СписокАналитик=Новый СписокЗначений;
					
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	ПараметрыЗапроса=ПостроительЗапросаВнутр.ПолучитьЗапрос().НайтиПараметры();
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если ПустаяСтрока(Параметр.ИмяПараметра) Тогда
			
			Параметр.ИмяПараметра=Параметр.ПолеБД;
			
		КонецЕсли;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(КонтекстОтчета,Параметр);
		
		Если ПараметрыЗапроса.Найти(Параметр.ИмяПараметра)=Неопределено Тогда
						
			Попытка
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ПолеБД);
				
				ОтборПараметр.Использование=Истина;
				
				ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
				ОтборПараметр.Значение=СвойстваОтбора.Значение;
				
				Если СтрНайти(Параметр.ПолеБД,"Аналитика")>0 
					И (Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
					ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета
					ИЛИ Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению)
					И ПостроительЗапросаВнутр.Отбор.Найти("ИтоговоеЗначение")=Неопределено
					
					Тогда
					
					ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить("ИтогПоПоказателю");			
					ОтборПараметр.Использование=Истина;
					ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
					ОтборПараметр.Значение=Ложь;
					
				КонецЕсли;
				
			Исключение
				
			КонецПопытки;
						
		Иначе
			
			ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.ИмяПараметра,Параметр.ЗначениеИзКонтекста);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Параметр ИЗ СтрЗапрос.СтруктураПараметров Цикл
		
		Если  КонтекстОтчета.АнализЧувствительности Тогда
			ИмяПараметра = СтрЗаменить(Параметр.Ключ,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
			ПостроительЗапросаВнутр.Параметры.Вставить(ИмяПараметра,Параметр.Значение);
		Иначе	
			ПостроительЗапросаВнутр.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);	
		КонецЕсли; 
		
	КонецЦикла;
	
	Если Не СтруктураОтбора=Неопределено Тогда // Возможна перекладка из ключевых полей в аналитики
		
		Для Каждого СтрПоле ИЗ СтрЗапрос.ТаблицаОперандов[0].ПравилаИспользованияПолейЗапроса Цикл
			
			Если СтрНайти(СтрПоле.Поле,"Версия.")>0 И СтруктураОтбора.Свойство(СтрПоле.КодАналитики) Тогда
				
				ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(СтрПоле.Поле);
				
				ОтборПараметр.Использование=Истина;
				
				ОтборПараметр.ВидСравнения=ВидСравнения.Равно;
				ОтборПараметр.Значение=СтруктураОтбора[СтрПоле.КодАналитики];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавитьОтборПоАктивности(ПостроительЗапросаВнутр, КонтекстОтчета);
	
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Регистратор", 	"Регистратор");
	ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Организация", 	"Организация");
	ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ПериодОтчета", 	"ПериодОтчета");
	ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Сценарий", 		"Сценарий");
	ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Проект", 		"Проект");
	ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ВидОтчета", 	"ВидОтчета");
		
	ПостроительЗапросаВнутр.Выполнить();
	ТабСписокОтчетов = ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	Для Каждого Строка ИЗ ТабСписокОтчетов Цикл
		
		Если ТипЗнч(Строка.Регистратор)=Тип("ДокументСсылка.Трансляция")
			ИЛИ ТипЗнч(Строка.Регистратор)=Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
			
			ЭкземплярОтчета=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(Строка.Организация,
			Строка.ПериодОтчета,
			Строка.Сценарий,
			Строка.ВидОтчета,
			,,,,Строка.Проект);
			
			Если ЗначениеЗаполнено(ЭкземплярОтчета) Тогда
				
				Строка.Регистратор=ЭкземплярОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаСвертки="Регистратор";
	ДобавитьПолеВСтрокуСвертки(СтрокаСвертки,"Организация",	ТабСписокОтчетов.Колонки);
	ДобавитьПолеВСтрокуСвертки(СтрокаСвертки,"ПериодОтчета",ТабСписокОтчетов.Колонки);
	ДобавитьПолеВСтрокуСвертки(СтрокаСвертки,"Сценарий",	ТабСписокОтчетов.Колонки);
	ДобавитьПолеВСтрокуСвертки(СтрокаСвертки,"Проект",		ТабСписокОтчетов.Колонки);
	ДобавитьПолеВСтрокуСвертки(СтрокаСвертки,"ВидОтчета",	ТабСписокОтчетов.Колонки);
	
	ТабСписокОтчетов.Свернуть(СтрокаСвертки);
	
	СтруктураДанные=Новый Структура;
	СтруктураДанные.Вставить("ТабСписокОтчетов",ТабСписокОтчетов);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьТаблицуОтчетовРасшифровки()

Процедура ДобавитьПолеВСтрокуСвертки(СтрокаСвертки,Поле,Колонки)
	
	Если НЕ Колонки.Найти(Поле)=Неопределено Тогда
		
		СтрокаСвертки=СтрокаСвертки+","+Поле;
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьПолеВСтрокуСвертки()

Функция ПолучитьСчетБД(ДанныеСчета) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СчетаБД.Ссылка
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	СчетаБД.Код = &КодСчета
	|	И СчетаБД.Владелец.Наименование = &ПланСчетов";
	
	Запрос.УстановитьПараметр("КодСчета",	ДанныеСчета.КодСчета);
	Запрос.УстановитьПараметр("ПланСчетов",	ДанныеСчета.ПланСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Справочники.СчетаБД.ПустаяСсылка();
		
	КонецЕсли;
		
КонецФункции // ПолучитьСчетБД() 

Функция ПолучитьДанныеЭкземпляраОтчета(Организация,Период,Сценарий,ВидОтчета,ОтборАналитикВидаОтчета=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка,
	|	НастраиваемыйОтчет.ОсновнаяВалюта
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета";
	
	Если НЕ ОтборАналитикВидаОтчета=Неопределено Тогда
		
		Для Каждого Параметр ИЗ ОтборАналитикВидаОтчета Цикл
			
			Запрос.Текст=Запрос.Текст+"
			|И НастраиваемыйОтчет."+Параметр.Ключ+" = &"+Параметр.Ключ;
			
			Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	Период);
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета",		ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьДанныеЭкземпляраОтчета() 

// 	Счет может быть передан как ссылкой на элемент справочника "СчетаБД", так и в виде структуры из двух элементов
// 		- ключ: "ПланСчетов",значение - наименование плана счетов
//		- ключ: "КодСчета",	значение - код счета
//  Период может быть передан как ссылкой на элемент справочника "Периоды", так и в виде структуры из двух элементов:
//		- ключ: "Дата", значение - дата из периода
//		- ключ: "Периодичность", значение - элемент перечисления "Периодичность".
//
Функция ПолучитьТаблицуЗначенийПоказателя(Сценарий,Организация,Знач Период,Знач Валюта=Неопределено,Знач ВидОтчета=Неопределено,Знач СчетБД=Неопределено,Знач ВидИтогаПоСчету=Неопределено,Знач Показатель=Неопределено, ОтборАналитикВидаОтчета=Неопределено) Экспорт
	
	ТаблицаПоказателя=Новый ТаблицаЗначений;
	ТаблицаПоказателя.Колонки.Добавить("АналитикаВалюта",ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.ТипЗначения);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТаблицаПоказателя.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
		
	КонецЦикла;
		
	ТаблицаПоказателя.Колонки.Добавить("СНД",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаПоказателя.Колонки.Добавить("СНДВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("СНК",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаПоказателя.Колонки.Добавить("СНКВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("ДО",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаПоказателя.Колонки.Добавить("ДОВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("КО",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаПоказателя.Колонки.Добавить("КОВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("СКД",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаПоказателя.Колонки.Добавить("СКДВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("СКК",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ТаблицаПоказателя.Колонки.Добавить("СККВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПоказателя.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ТаблицаПоказателя.Колонки.Добавить("ИтоговоеЗначение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());	
	
	Если ТипЗнч(СчетБД)=Тип("Структура") Тогда
		
		СчетБД=ПолучитьСчетБД(СчетБД);
		
	КонецЕсли;
	
	Если ТипЗнч(Период)=Тип("Структура") Тогда
		
		Период=ПолучитьПериодПоДате(Период.Дата,Период.Периодичность);
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидОтчета) Тогда
		
		Если ЗначениеЗаполнено(СчетБД)Тогда
			
			ВидОтчета=Справочники.ВидыОтчетов.ПолучитьВидОтчетаОСВ(,СчетБД);
			
		ИначеЕсли ЗначениеЗаполнено(Показатель) Тогда
			
			ВидОтчета=Показатель.Владелец;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидОтчета) Тогда
		
		Возврат ТаблицаПоказателя;
		
	КонецЕсли;
	
	ЭкземплярОтчета=ПолучитьДанныеЭкземпляраОтчета(Организация,Период,Сценарий,ВидОтчета,ОтборАналитикВидаОтчета);
	
	Если ЭкземплярОтчета=Неопределено Тогда
		
		Возврат ТаблицаПоказателя;
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		
		Валюта=ЭкземплярОтчета.ОсновнаяВалюта;
		
	КонецЕсли;
	
	ОтборПоказателей=Новый Соответствие;
		
	Если НЕ ЗначениеЗаполнено(Показатель) Тогда
		
		Если ЗначениеЗаполнено(СчетБД) Тогда
			
			ОтборПоказателей.Вставить("####.Владелец=&ВидОтчета",	Новый Структура("ВидОтчета",ВидОтчета));
			ОтборПоказателей.Вставить("####.СчетБД=&СчетБД",		Новый Структура("СчетБД",СчетБД));
			
			ВыводитьАналитику=(СчетБД.ВидыСубконто.Количество()>0);
							
			Если ЗначениеЗаполнено(ВидИтогаПоСчету) Тогда
				
				ОтборПоказателей.Вставить("####.ВидИтогаПоСчету=&ВидИтогаПоСчету",Новый Структура("ВидИтогаПоСчету",ВидИтогаПоСчету));
				
			КонецЕсли;
			
		Иначе
			
			Возврат ТаблицаПоказателя;
			
		КонецЕсли;
		
	Иначе
		
		ОтборПоказателей.Вставить("####.Ссылка=&Ссылка",Новый Структура("Ссылка",Показатель));
		
	КонецЕсли;
	
	// Получим список версий значений показателя
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета = &ЭкземплярОтчета
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта";
	
	Запрос.УстановитьПараметр("ЭкземплярОтчета", 	ЭкземплярОтчета.Ссылка);
	Запрос.УстановитьПараметр("Валюта", 			Валюта);
		
	СписокВерсий=Новый СписокЗначений;
	СписокВерсий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",				ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",			СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",		Ложь);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",		Истина);
	ДанныеЗапроса.Вставить("МаксКоличествоАналитик",ПараметрыСеанса.ЧислоДопАналитик);
	ДанныеЗапроса.Вставить("ПринудительнаяТипизация",Истина);
	ДанныеЗапроса.Вставить("ОтборПоказателей",		ОтборПоказателей);
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("Показатель.ВидИтогаПоСчету","ВидИтогаПоСчету");	
	
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	
	СтруктураЗапросаАналитика=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);

	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Ложь);
		
	СтруктураЗапросаСинтетика=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	ТекстЗапросаСинтетика=?(СтруктураЗапросаСинтетика.Свойство("ТекстЗапроса"),СтруктураЗапросаСинтетика.ТекстЗапроса,"");
	ТекстЗапросаАналитика=?(СтруктураЗапросаАналитика.Свойство("ТекстЗапроса"),СтруктураЗапросаАналитика.ТекстЗапроса,"");
	
	Если ТекстЗапросаСинтетика="" И ТекстЗапросаАналитика="" Тогда
		
		Возврат ТаблицаПоказателя;
		
	КонецЕсли;
	
	Если СтрНайти(ТекстЗапросаАналитика,"ЗначенияПоказателейОтчетовНечисловые")>0 
		ИЛИ СтрНайти(ТекстЗапросаСинтетика,"ЗначенияПоказателейОтчетовНечисловые")>0 Тогда // Получена таблица нечислового показателя
		
		ТекстЗапроса="";
		
		Если СтруктураЗапросаСинтетика.Свойство("ТекстЗапроса") Тогда
			
			ТекстВыборки="";
			
			Для Каждого Колонка ИЗ ТаблицаПоказателя.Колонки Цикл
				
				Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
					
					ТекстВыборки=ТекстВыборки+",
					|НЕОПРЕДЕЛЕНО КАК "+Колонка.Имя;
					
				ИначеЕсли СтрНайти(Колонка.Имя,"Значение")>0 Тогда 
					
					ТекстВыборки=ТекстВыборки+",
					|ТаблицаЗапроса."+Колонка.Имя+" КАК "+Колонка.Имя;
					
				Иначе
					
					ТекстВыборки=ТекстВыборки+",
					|0 КАК "+Колонка.Имя;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстЗапроса="ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ "+Сред(ТекстВыборки,2)+"
			|ИЗ ("+ТекстЗапросаСинтетика+") КАК ТаблицаЗапроса";
			
			Для Каждого СтрПараметр ИЗ СтруктураЗапросаСинтетика.СтруктураПараметров Цикл
				
				Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураЗапросаАналитика.Свойство("ТекстЗапроса") Тогда
			
			ТекстВыборки="";
			
			Для Каждого Колонка ИЗ ТаблицаПоказателя.Колонки Цикл
				
				Если СтрНайти(Колонка.Имя,"Значение")>0 ИЛИ СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда
					
					ТекстВыборки=ТекстВыборки+",
					|ТаблицаЗапроса."+Колонка.Имя+" КАК "+Колонка.Имя;
					
				Иначе
					
					ТекстВыборки=ТекстВыборки+",
					|0 КАК "+Колонка.Имя;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ТекстЗапроса=ТекстЗапроса+" ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ "+Сред(ТекстВыборки,2)+"
			|ИЗ ("+ТекстЗапросаАналитика+") КАК ТаблицаЗапроса";
			
			Для Каждого СтрПараметр ИЗ СтруктураЗапросаАналитика.СтруктураПараметров Цикл
				
				Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст=Сред(ТекстЗапроса,16);
			
	Иначе
		
		ТекстВыборкиАналитика="";
		ТекстГруппировкиАналитика="";
		
		ТекстВыборкиСинтетика="";
		ТекстГруппировкиСинтетика="";
		
		ТекстВыборкиЗначения="";
		ТекстВыборкиЗначенияИтог="";
		
		Для Каждого Колонка ИЗ ТаблицаПоказателя.Колонки Цикл
			
			Если СтрНайти(Колонка.Имя,"Аналитика")>0 Тогда 
				
				ТекстВыборкиАналитика=ТекстВыборкиАналитика+",
				|ТаблицаЗапроса."+Колонка.Имя+" КАК "+Колонка.Имя;
				
				ТекстВыборкиСинтетика=ТекстВыборкиСинтетика+",
				|НЕОПРЕДЕЛЕНО КАК "+Колонка.Имя;

				ТекстГруппировкиАналитика=ТекстГруппировкиАналитика+",
				|ТекстВыборкиИтог."+Колонка.Имя;
				
			ИначеЕсли Колонка.Имя="ИтоговоеЗначение" Тогда
				
				ТекстВыборкиАналитика=ТекстВыборкиАналитика+",
				|ТаблицаЗапроса."+Колонка.Имя+" КАК "+Колонка.Имя;
				
				ТекстВыборкиСинтетика=ТекстВыборкиСинтетика+",
				|ТаблицаЗапроса."+Колонка.Имя+" КАК "+Колонка.Имя;

				ТекстГруппировкиАналитика=ТекстГруппировкиАналитика+",
				|ТекстВыборкиИтог."+Колонка.Имя;
				
			ИначеЕсли СтрНайти(Колонка.Имя,"Значение")>0 Тогда 
				
				Если ЗначениеЗаполнено(Показатель)
					ИЛИ ЗначениеЗаполнено(ВидИтогаПоСчету) Тогда
					
					ТекстВыборкиЗначения=ТекстВыборкиЗначения+",
					|ТаблицаЗапроса."+Колонка.Имя+" КАК "+Колонка.Имя;
					
					ТекстВыборкиЗначенияИтог=ТекстВыборкиЗначенияИтог+",
					|СУММА("+Колонка.Имя+") КАК "+Колонка.Имя;
										
				Иначе
					
					ТекстВыборкиЗначения=ТекстВыборкиЗначения+",
					|0 КАК "+Колонка.Имя;
					
					ТекстВыборкиЗначенияИтог=ТекстВыборкиЗначенияИтог+",
					|0 КАК "+Колонка.Имя;
					
				КонецЕсли;
				
			Иначе
				
				ТекстИтога=СтрЗаменить(Колонка.Имя,"Валюта","");
				ЗначениеПеречисления=Перечисления.ВидыБухгалтерскихИтогов[ТекстИтога];
				
				Если СтрНайти(Колонка.Имя,"Валюта")>0 Тогда
					
					ТекстВыборкиЗначения=ТекстВыборкиЗначения+",
					|ВЫБОР КОГДА ТаблицаЗапроса.ВидИтогаПоСчету=&"+ТекстИтога+" ТОГДА ТаблицаЗапроса.ЗначениеВалюта ИНАЧЕ 0 КОНЕЦ КАК "+ТекстИтога+"Валюта";
					
					ТекстВыборкиЗначенияИтог=ТекстВыборкиЗначенияИтог+",
					|СУММА("+Колонка.Имя+") КАК "+Колонка.Имя;
					
				Иначе
					
					ТекстВыборкиЗначения=ТекстВыборкиЗначения+",
					|ВЫБОР КОГДА ТаблицаЗапроса.ВидИтогаПоСчету=&"+ТекстИтога+" ТОГДА ТаблицаЗапроса.Значение ИНАЧЕ 0 КОНЕЦ КАК "+ТекстИтога;
					
					ТекстВыборкиЗначенияИтог=ТекстВыборкиЗначенияИтог+",
					|СУММА("+Колонка.Имя+") КАК "+Колонка.Имя;
					
				КонецЕсли;			
				
				Запрос.УстановитьПараметр(ТекстИтога,ЗначениеПеречисления);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса="";
		
		Если СтруктураЗапросаСинтетика.Свойство("ТекстЗапроса") Тогда
			
			ТекстЗапроса="ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ "+Сред(ТекстВыборкиСинтетика,2)+","+Сред(ТекстВыборкиЗначения,2)+"
			|ИЗ ("+СтруктураЗапросаСинтетика.ТекстЗапроса+") КАК ТаблицаЗапроса";
			
			Для Каждого СтрПараметр ИЗ СтруктураЗапросаСинтетика.СтруктураПараметров Цикл
				
				Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураЗапросаАналитика.Свойство("ТекстЗапроса") Тогда
			
			ТекстЗапроса=ТекстЗапроса+" ОБЪЕДИНИТЬ ВСЕ
			|ВЫБРАТЬ "+Сред(ТекстВыборкиАналитика,2)+","+Сред(ТекстВыборкиЗначения,2)+"
			|ИЗ ("+СтруктураЗапросаАналитика.ТекстЗапроса+") КАК ТаблицаЗапроса";
			
			Для Каждого СтрПараметр ИЗ СтруктураЗапросаАналитика.СтруктураПараметров Цикл
				
				Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
			
		Запрос.Текст="ВЫБРАТЬ "+Сред(СтрЗаменить(ТекстВыборкиАналитика,"ТаблицаЗапроса.","ТекстВыборкиИтог."),2)+","+Сред(ТекстВыборкиЗначенияИтог,2)+"
		|ИЗ ("+Сред(ТекстЗапроса,16)+") КАК ТекстВыборкиИтог
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировкиАналитика,2);
 			
	КонецЕсли;
		
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьТаблицуЗначенийПоказателя() 

//////////////////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции трансляции значений показателей

Процедура ЗаписатьНастройкиПравилТрансляции(ШаблонТрансляции=Неопределено,СоответствиеСчетов=Неопределено,СтруктураРесурсов=Неопределено,ЗапросПоказатели=Неопределено) Экспорт
	
	НаборЗаписей=РегистрыСведений.НастройкиПравилТрансляции.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(ШаблонТрансляции) Тогда
		
		НаборЗаписей.Отбор.ШаблонТрансляции.Установить(ШаблонТрансляции);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СоответствиеСчетов) Тогда
		
		НаборЗаписей.Отбор.СоответствиеСчетов.Установить(СоответствиеСчетов);
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	
	Если НЕ СтруктураРесурсов=Неопределено Тогда
		
		НоваяСтрока=НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураРесурсов);
		
		НоваяСтрока.ШаблонТрансляции	= ШаблонТрансляции;
		НоваяСтрока.СоответствиеСчетов	= СоответствиеСчетов;
						
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Если ЗначениеЗаполнено(СоответствиеСчетов) И ЗначениеЗаполнено(СтруктураРесурсов) Тогда
		
		ИзменитьПравилаТрансляции(ШаблонТрансляции,СоответствиеСчетов,СтруктураРесурсов,ЗапросПоказатели);
		
	КонецЕсли;
		
КонецПроцедуры // ОчиститьНастройкиПравилТрансляции()

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Трансляция показателей ОСВ в показатели ОСВ
/////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура НастроитьТрансляциюПоказателиВПоказатели(ПравилоОбработки,СоответствиеСчетов,СтруктураРесурсов,ЗапросПоказатели)
	
	Если НЕ СтруктураРесурсов.СокращеннаяОСВ Тогда
		
		ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СНД,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
		ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СНК,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
		
	КонецЕсли;
	
	ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СКД,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
	ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СКК,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
	
	ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.ДО,СтруктураРесурсов.ТранслироватьОбороты,ЗапросПоказатели);
	ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.КО,СтруктураРесурсов.ТранслироватьОбороты,ЗапросПоказатели);	
	
КонецПроцедуры // НастроитьТрансляциюПоказателиВПоказатели()

Функция ИтогЯвляетсяОборотом(ВидИтога) Экспорт
	
	 Возврат ВидИтога=Перечисления.ВидыБухгалтерскихИтогов.ДО
	 	ИЛИ ВидИтога=Перечисления.ВидыБухгалтерскихИтогов.КО;
	
КонецФункции // ОборотныйПоказатель()

Функция ИтогЯвляетсяСальдо(ВидИтога) Экспорт
	
	 Возврат ВидИтога=Перечисления.ВидыБухгалтерскихИтогов.СКД
	 	ИЛИ ВидИтога=Перечисления.ВидыБухгалтерскихИтогов.СКК
		ИЛИ ВидИтога=Перечисления.ВидыБухгалтерскихИтогов.СНД
	 	ИЛИ ВидИтога=Перечисления.ВидыБухгалтерскихИтогов.СНК;
	
КонецФункции // ОборотныйПоказатель()

Функция ПолучитьПоказательОСВ(СчетБД,ВидИтогаПоСчету,ЗапросПоказатели,ИмяТаблицы) Экспорт
		
	ЗапросПоказатели.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	"+ИмяТаблицы+".Ссылка
	|ИЗ
	|	"+ИмяТаблицы+" КАК "+ИмяТаблицы+"
	|ГДЕ
	|	"+ИмяТаблицы+".СчетБД = &СчетБД
	|И "+ИмяТаблицы+".ВидИтогаПоСчету = &ВидИтогаПоСчету";
	
	ЗапросПоказатели.УстановитьПараметр("СчетБД",СчетБД);
	ЗапросПоказатели.УстановитьПараметр("ВидИтогаПоСчету",ВидИтогаПоСчету);
	
	Результат=ЗапросПоказатели.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Не найден показатель оборотно-сальдовой ведомости для счета %СчетБД% и вида итога %ВидИтогаПоСчету%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетБД%", Строка(СчетБД));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидИтогаПоСчету%", Строка(ВидИтогаПоСчету));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьПоказательОСВ()

Функция ПолучитьТекстИтогаПоСчету(СчетБД,ВидИтогаОСВ) Экспорт
	
	Если ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СНД Тогда
		
		Возврат "СНД"+СокрЛП(СчетБД.Код);
		
	ИначеЕсли ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СНК Тогда
		
		Возврат "СНК"+СокрЛП(СчетБД.Код);
		
	ИначеЕсли ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.ДО Тогда
		
		Возврат "ДО"+СокрЛП(СчетБД.Код);
		
	ИначеЕсли ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.КО Тогда
		
		Возврат "КО"+СокрЛП(СчетБД.Код);
		
	ИначеЕсли ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СКД Тогда
		
		Возврат "СКД"+СокрЛП(СчетБД.Код);
		
	ИначеЕсли ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СКК Тогда
		
		Возврат "СКК"+СокрЛП(СчетБД.Код);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции // ПолучитьТекстИтогаПоСчету() 

Процедура ПодготовитьОперандыПоказательДругогоОтчета(ПравилоОбработки,СоответствиеСчетов,ВидИтогаОСВ,ИспользованиеИтога,ЗапросПоказатели)
	
	ПоказательИсточник=ПолучитьПоказательОСВ(СоответствиеСчетов.СчетИсточник,ВидИтогаОСВ,ЗапросПоказатели,"ПоказателиИсточник");
	ПоказательПриемник=ПолучитьПоказательОСВ(СоответствиеСчетов.СчетПриемник,ВидИтогаОСВ,ЗапросПоказатели,"ПоказателиПриемник");
	
	Если НЕ (ЗначениеЗаполнено(ПоказательИсточник) И ЗначениеЗаполнено(ПоказательПриемник)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим наличие источника данных для трансляции
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.НеИспользуется
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И ИсточникиДанныхДляРасчетов.ПоказательОтбор = &ПоказательИсточник
	|	И ИсточникиДанныхДляРасчетов.СоответствиеСчетов = &СоответствиеСчетов";
		
	Запрос.УстановитьПараметр("ПоказательИсточник",	ПоказательИсточник);	
	Запрос.УстановитьПараметр("НазначениеРасчетов",	ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",	ПоказательПриемник);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	Запрос.УстановитьПараметр("СоответствиеСчетов",	СоответствиеСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если Результат.НеИспользуется=ИспользованиеИтога Тогда
			
			ИсточникОбъект=Результат.Ссылка.ПолучитьОбъект();
			ИсточникОбъект.ОбменДанными.Загрузка=Истина;
			ИсточникОбъект.НеИспользуется=НЕ ИспользованиеИтога;
			ИсточникОбъект.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ИспользованиеИтога Тогда
		
		ОбъектИсточник=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
		ОбъектИсточник.НазначениеРасчетов=ПравилоОбработки;
		ОбъектИсточник.ПотребительРасчета=ПоказательПриемник;
		ОбъектИсточник.СоответствиеСчетов=СоответствиеСчетов;
		ОбъектИсточник.ЗаполнитьНачальныеНастройки();
		
		НастройкиОперанда=Новый Структура;
		НастройкиОперанда.Вставить("СпособИспользования",	Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
		НастройкиОперанда.Вставить("ВидОтчетаОтбор",		ПоказательИсточник.Владелец);
		НастройкиОперанда.Вставить("ПоказательОтбор",		ПоказательИсточник);
		НастройкиОперанда.Вставить("СдвигПериодов",			0);
		НастройкиОперанда.Вставить("ТекстАналитик",			"");
		
		ОбъектИсточник.ЗаполнитьПоУпрощенномуПредставлениюДанныеПоказателяОтчета(НастройкиОперанда);
		
		Попытка 
			
			ОбъектИсточник.СохранитьНастройкиОперанда();
			ОбъектИсточник.Записать();
			
		Исключение
			
			ТекстСообщения = НСтр("ru = 'Не удалось создать источник данных по соответствию %СоответствиеСчетов%:
			|			%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СоответствиеСчетов%", Строка(СоответствиеСчетов));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
			
		КонецПопытки
		
	КонецЕсли;
			
КонецПроцедуры // НастроитьПроцедурыРасчетаПоказательДругогоОтчета()

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Трансляция регистра бухгалтерии в показатели ОСВ
/////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,ВидИтогаОСВ,ИспользованиеИтога,ЗапросПоказатели)
	
	ПоказательПриемник=ПолучитьПоказательОСВ(СоответствиеСчетов.СчетПриемник,ВидИтогаОСВ,ЗапросПоказатели,"ПоказателиПриемник");
	
	Если НЕ ЗначениеЗаполнено(ПоказательПриемник) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// Проверим наличие источника данных для трансляции
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.НеИспользуется
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.СпособИспользования = &СпособИспользования
	|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
	|	И ИсточникиДанныхДляРасчетов.Счет = &СчетИсточник
	|	И ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = &ВидИтогаОСВ
	|	И ИсточникиДанныхДляРасчетов.СоответствиеСчетов = &СоответствиеСчетов";
			
	Запрос.УстановитьПараметр("НазначениеРасчетов",	ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",	ПоказательПриемник);
	Запрос.УстановитьПараметр("СпособИспользования",Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета);
	Запрос.УстановитьПараметр("СоответствиеСчетов",	СоответствиеСчетов);
	Запрос.УстановитьПараметр("СчетИсточник",		СоответствиеСчетов.СчетИсточник);
	Запрос.УстановитьПараметр("ВидИтогаОСВ",		ВидИтогаОСВ);
			
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если Результат.НеИспользуется=ИспользованиеИтога Тогда
			
			ИсточникОбъект=Результат.Ссылка.ПолучитьОбъект();
			ИсточникОбъект.ОбменДанными.Загрузка=Истина;
			ИсточникОбъект.НеИспользуется=НЕ ИспользованиеИтога;
			ИсточникОбъект.Записать();
			
		КонецЕсли;
		
	ИначеЕсли ИспользованиеИтога Тогда
		
		ТекстИтога=?(ЗначениеЗаполнено(СоответствиеСчетов.КоррСчетИсточник),
				"ОБ"+СокрЛП(СоответствиеСчетов.СчетИсточник.Код)+","+СокрЛП(СоответствиеСчетов.КоррСчетИсточник.Код),
				ПолучитьТекстИтогаПоСчету(СоответствиеСчетов.СчетИсточник,ВидИтогаОСВ));
			
			
		
		РезультатРазбора=ОбщегоНазначенияУХ.ПолучитьРезультатРазбораТекстаФормулы(ТекстИтога,
								ПравилоОбработки,
								СоответствиеСчетов,
								Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,
								ПравилоОбработки.ТипБД,
								Неопределено);
			
			Для Каждого КлючИЗначение ИЗ РезультатРазбора Цикл
				
				Если КлючИЗначение.Ключ="ТолькоСуммирование" Тогда
					
					Продолжить;
					
				КонецЕсли;
						
				Если ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
				
				НастройкиОперанда=КлючИЗначение.Значение;
				
				Если НастройкиОперанда.Свойство("Код") Тогда // Используется существующий источник
					
					Продолжить;
					
				Иначе
					
					ОбъектИсточник=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
					ОбъектИсточник.НазначениеРасчетов=ПравилоОбработки;
					ОбъектИсточник.ПотребительРасчета=ПоказательПриемник;
					ОбъектИсточник.СоответствиеСчетов=СоответствиеСчетов;
					ОбъектИсточник.СпособПолучения=НастройкиОперанда.СпособПолучения;
					ОбъектИсточник.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
					ОбъектИсточник.ЗаполнитьНачальныеНастройки();
					
					НастройкаВыполнена=ОбъектИсточник.ЗаполнитьПоУпрощенномуПредставлениюДанныеРегистраБухгалтерии(НастройкиОперанда);
					
					Попытка 
						
						ОбъектИсточник.СохранитьНастройкиОперанда();
						ОбъектИсточник.Записать();
						
					Исключение
						
						ТекстСообщения = НСтр("ru = 'Не удалось создать источник данных по представлению %Ключ%:
						|						%ОписаниеОшибки%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Строка(КлючИЗначение.Ключ));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
						
					КонецПопытки
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла
	
	КонецЕсли;	
	
КонецПроцедуры // НастроитьПроцедурыРасчетаРегистрБухгалтерии()
 
Процедура НастроитьТрансляциюРегистраВПоказатели(ПравилоОбработки,СоответствиеСчетов,СтруктураРесурсов,ЗапросПоказатели)
	
	Если НЕ СтруктураРесурсов.СокращеннаяОСВ Тогда 
		
		НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СНД,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
		НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СНК,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
		
	КонецЕсли;
	
	НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СКД,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
	НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.СКК,СтруктураРесурсов.ТранслироватьСальдо,ЗапросПоказатели);
	
	НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.ДО,СтруктураРесурсов.ТранслироватьОбороты,ЗапросПоказатели);
	НастроитьПроцедурыРасчетаРегистрБухгалтерии(ПравилоОбработки,СоответствиеСчетов,Перечисления.ВидыБухгалтерскихИтогов.КО,СтруктураРесурсов.ТранслироватьОбороты,ЗапросПоказатели);
	
КонецПроцедуры // НастроитьТрансляциюРегистраВПоказатели 

/////////////////////////////////////////////////////////////////////////////////////////////////////
// Трансляция регистра бухгалтерии в регистр бухгалтерии
/////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура НастроитьТрансляциюРегистраВРегистр(ПравилоОбработки,СоответствиеСчетов,СтруктураРесурсов);
	
	ОбновитьНастройкиТрансляции(ПравилоОбработки,"Дебет",СоответствиеСчетов,СтруктураРесурсов);
	ОбновитьНастройкиТрансляции(ПравилоОбработки,"Кредит",СоответствиеСчетов,СтруктураРесурсов);
	
КонецПроцедуры // НастроитьТрансляциюРегистраВРегистр()

Процедура ОбновитьНастройкиТрансляции(ПравилоОбработки,СторонаПроводки,СоответствиеСчетов,СтруктураРесурсов)
	
	Использовать=?(СторонаПроводки="Дебет",СтруктураРесурсов.ИспользованиеДт,СтруктураРесурсов.ИспользованиеКт);
	
	// Проверим возможное изменение корр. счета
				
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.КоррСчет,
	|	ИсточникиДанныхДляРасчетов.НеИспользуется
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.Трансляция"+СторонаПроводки;
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",СоответствиеСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если Результат.НеИспользуется=Использовать Тогда
			
			ИсточникОбъект=Результат.Ссылка.ПолучитьОбъект();
			ИсточникОбъект.ОбменДанными.Загрузка=Истина;
			ИсточникОбъект.НеИспользуется=НЕ Использовать;
			ИсточникОбъект.Записать();
			
		КонецЕсли;
		
	Иначе
		
		ТекстИтога=?(ЗначениеЗаполнено(СоответствиеСчетов.КоррСчетИсточник),
				"ОБ"+СокрЛП(СоответствиеСчетов.СчетИсточник.Код)+","+СокрЛП(СоответствиеСчетов.КоррСчетИсточник.Код),
				?(СторонаПроводки="Дебет","ДО","КО")+СокрЛП(СоответствиеСчетов.СчетИсточник.Код));
			
			
		
		РезультатРазбора=ОбщегоНазначенияУХ.ПолучитьРезультатРазбораТекстаФормулы(ТекстИтога,
								ПравилоОбработки,
								СоответствиеСчетов,
								Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,
								ПравилоОбработки.ТипБД,
								Неопределено);
			
			Для Каждого КлючИЗначение ИЗ РезультатРазбора Цикл
				
				Если КлючИЗначение.Ключ="ТолькоСуммирование" Тогда
					
					Продолжить;
					
				КонецЕсли;
						
				Если ТипЗнч(КлючИЗначение.Значение)=Тип("Структура") Тогда
				
				НастройкиОперанда=КлючИЗначение.Значение;
				
				Если НастройкиОперанда.Свойство("Код") Тогда // Используется существующий источник
					
					Продолжить;
					
				Иначе
					
					ОбъектИсточник=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
					ОбъектИсточник.НазначениеРасчетов=ПравилоОбработки;
					ОбъектИсточник.ПотребительРасчета=СоответствиеСчетов;
					ОбъектИсточник.СпособПолучения=НастройкиОперанда.СпособПолучения;
					ОбъектИсточник.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
					ОбъектИсточник.ЗаполнитьНачальныеНастройки();
					ОбъектИсточник["Трансляция"+СторонаПроводки]=Истина;
					
					НастройкаВыполнена=ОбъектИсточник.ЗаполнитьПоУпрощенномуПредставлениюДанныеРегистраБухгалтерии(НастройкиОперанда);
					
					Попытка 
						
						ОбъектИсточник.СохранитьНастройкиОперанда();
						ОбъектИсточник.Записать();
						
					Исключение
						
						ТекстСообщения = НСтр("ru = 'Не удалось создать источник данных по представлению %Ключ%:
						|						%ОписаниеОшибки%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ключ%", Строка(КлючИЗначение.Ключ));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
						
					КонецПопытки
					
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЕсли;							
			
КонецПроцедуры // ОбновитьНастройкиТрансляцииДебет()  


/////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ИзменитьПравилаТрансляции(ШаблонТрансляции,СоответствиеСчетов,СтруктураРесурсов,ЗапросПоказатели=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Владелец = &ШаблонТрансляции
	|	И ПравилаОбработки.НаправлениеТрансляции=&НаправлениеТрансляции";
				 
	Запрос.УстановитьПараметр("ШаблонТрансляции",ШаблонТрансляции);
	Запрос.УстановитьПараметр("НаправлениеТрансляции",СтруктураРесурсов.НаправлениеТрансляции);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если СтруктураРесурсов.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели Тогда
			
			Если НЕ СтруктураРесурсов=Неопределено Тогда
				НастроитьТрансляциюПоказателиВПоказатели(Результат.Ссылка,СоответствиеСчетов,СтруктураРесурсов,ЗапросПоказатели);
			КонецЕсли;
			
			ОбновитьФормулыРасчетаПоказателиВПоказатели(ШаблонТрансляции,Результат.Ссылка,СоответствиеСчетов.СчетПриемник);
				
		ИначеЕсли СтруктураРесурсов.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели Тогда
			
			Если НЕ СтруктураРесурсов=Неопределено Тогда
				НастроитьТрансляциюРегистраВПоказатели(Результат.Ссылка,СоответствиеСчетов,СтруктураРесурсов,ЗапросПоказатели);
			КонецЕсли;
			
			ОбновитьФормулыРасчетаРегистрВПоказатели(ШаблонТрансляции,Результат.Ссылка,СоответствиеСчетов.СчетПриемник);
			
		ИначеЕсли СтруктураРесурсов.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии Тогда
			
			Если НЕ СтруктураРесурсов=Неопределено Тогда
				НастроитьТрансляциюРегистраВРегистр(Результат.Ссылка,СоответствиеСчетов,СтруктураРесурсов);
			КонецЕсли;
			
		ИначеЕсли СтруктураРесурсов.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ФинансовыеРегистрыВРегистрБухгалтерии Тогда
			
			ИсточникТрансляции=ПроверитьСоздатьИсточникТрансляцииРегистр(Результат.Ссылка,СоответствиеСчетов);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // СоздатьОперандыДляТрансляции()


Функция ПроверитьСоздатьИсточникТрансляцииРегистр(ПравилоОбработки,СоответствиеСчетов) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
	Запрос.УстановитьПараметр("ПотребительРасчета",СоответствиеСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		СправочникОбъект=Справочники.ИсточникиДанныхДляРасчетов.СоздатьЭлемент();
		СправочникОбъект.НазначениеРасчетов=ПравилоОбработки;
		СправочникОбъект.ПотребительРасчета=СоответствиеСчетов; 
		СправочникОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета;
		СправочникОбъект.ЗаполнитьНачальныеНастройки();
		
		Если НЕ ЗначениеЗаполнено(СоответствиеСчетов.КоррОбъектУчетаИсточник) Тогда
			
			СправочникОбъект.ИсточникШаблон				= СоответствиеСчетов.ОбъектУчетаИсточник;
			СправочникОбъект.ЗаполнитьПоШаблонуИсточнику();
			СправочникОбъект.СохранитьНастройкиОперанда();
			СправочникОбъект.Записать(); 
			
		Иначе
			
			СправочникОбъект.ЗаполнитьПоСоответствиюСчетов();
			СправочникОбъект.СохранитьНастройкиОперанда();
			СправочникОбъект.Записать();
			
		КонецЕсли;
		
		Возврат СправочникОбъект.Ссылка;
		
	КонецЕсли;
			
КонецФункции // ПроверитьСоздатьИсточникТрансляцииРегистр(

Процедура ОбновитьФормулыРасчетаПоказателиВПоказатели(ШаблонТрансляции,ПравилоОбработки,СчетПриемник=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СчетПриемник) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ Различные
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД = &СчетБД";
		
		Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
		Запрос.УстановитьПараметр("СчетБД",СчетПриемник);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(ПравилоОбработки,Результат.ПотребительРасчета);
			
		КонецЦикла;
		
	Иначе
		
		УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(ПравилоОбработки);
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравилТрансляции.ИспользованиеДт,
	|	НастройкиПравилТрансляции.ИспользованиеКт,
	|	НастройкиПравилТрансляции.ТранслироватьСальдо,
	|	НастройкиПравилТрансляции.ТранслироватьОбороты,
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.СчетБД.Вид КАК ВидСчетаИсточник,
	|	ИсточникиДанныхДляРасчетов.ПоказательОтбор.ВидИтогаПоСчету КАК ВидИтогаИсточник,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	НастройкиПравилТрансляции.СоответствиеСчетов
	|ИЗ
	|	РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ПО (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	|			И НастройкиПравилТрансляции.СоответствиеСчетов = ИсточникиДанныхДляРасчетов.СоответствиеСчетов
	|			И (ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки)
	|			И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)";
	
	Если ЗначениеЗаполнено(СчетПриемник) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД=&СчетПриемник";
		
		Запрос.УстановитьПараметр("СчетПриемник",СчетПриемник);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИТОГИ ПО
	|	Показатель";
		
	Запрос.УстановитьПараметр("ШаблонТрансляции",ШаблонТрансляции);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	Запрос.УстановитьПараметр("ВидОтчетаОСВ",Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость);
	
	ПоказательПриемник=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ПоказательПриемник.Следующий() Цикл
		
		ТекстПроцедуры="";
		
		ИсточникиДанных=ПоказательПриемник.Выбрать();
		МассивИсточников=Новый Массив;
		
		Пока ИсточникиДанных.Следующий() Цикл			
			
			Если НЕ МассивИсточников.Найти(ИсточникиДанных.Ссылка)=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ИсточникиДанных.ИспользованиеДт Тогда 
				
				Если (ИсточникиДанных.ТранслироватьСальдо И 
					(ИсточникиДанных.ВидИтогаИсточник=Перечисления.ВидыБухгалтерскихИтогов.СНД 
					ИЛИ ИсточникиДанных.ВидИтогаИсточник=Перечисления.ВидыБухгалтерскихИтогов.СКД))
					ИЛИ (ИсточникиДанных.ТранслироватьОбороты И ИсточникиДанных.ВидИтогаИсточник=Перечисления.ВидыБухгалтерскихИтогов.ДО)Тогда
					
					ТекстПроцедуры=ТекстПроцедуры+"+["+СокрЛП(ИсточникиДанных.Код)+"]";
					МассивИсточников.Добавить(ИсточникиДанных.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИсточникиДанных.ИспользованиеКт Тогда 
				
				Если (ИсточникиДанных.ТранслироватьСальдо И 
					(ИсточникиДанных.ВидИтогаИсточник=Перечисления.ВидыБухгалтерскихИтогов.СНК 
					ИЛИ ИсточникиДанных.ВидИтогаИсточник=Перечисления.ВидыБухгалтерскихИтогов.СКК))
					ИЛИ (ИсточникиДанных.ТранслироватьОбороты И ИсточникиДанных.ВидИтогаИсточник=Перечисления.ВидыБухгалтерскихИтогов.КО)Тогда
					
					ТекстПроцедуры=ТекстПроцедуры+"+["+СокрЛП(ИсточникиДанных.Код)+"]";
					МассивИсточников.Добавить(ИсточникиДанных.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НазначениеРасчетов", 	ПравилоОбработки);
		СтруктураПараметров.Вставить("ПотребительРасчета", 	ПоказательПриемник.Показатель);
		СтруктураПараметров.Вставить("ТекстПроцедуры",	 	Сред(ТекстПроцедуры,2));
		СтруктураПараметров.Вставить("ПроизвольныйКод", 	Ложь);
		
		РезультатПроверки = УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураПараметров);
		
		УправлениеОтчетамиУХ.ОтметитьИспользованиеОперандов(ПравилоОбработки, ПоказательПриемник.Показатель,, Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,СтруктураПараметров.ТекстПроцедуры);	
		УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураПараметров);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьФормулыРасчетаПоказателейСервер()

Процедура ОбновитьФормулыРасчетаРегистрВПоказатели(ШаблонТрансляции,ПравилоОбработки,СчетПриемник=Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(СчетПриемник) Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ Различные
		|	ИсточникиДанныхДляРасчетов.ПотребительРасчета
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
		|ГДЕ
		|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД = &СчетБД";
		
		Запрос.УстановитьПараметр("НазначениеРасчетов",ПравилоОбработки);
		Запрос.УстановитьПараметр("СчетБД",СчетПриемник);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(ПравилоОбработки,Результат.ПотребительРасчета);
			
		КонецЦикла;
		
	Иначе
		
		УправлениеОтчетамиУХ.ОчиститьФормулыРасчета(ПравилоОбработки);
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравилТрансляции.ИспользованиеДт,
	|	НастройкиПравилТрансляции.ИспользованиеКт,
	|	НастройкиПравилТрансляции.ТранслироватьСальдо,
	|	НастройкиПравилТрансляции.ТранслироватьОбороты,
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.ВидИтогаОСВ,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК Показатель,
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	НастройкиПравилТрансляции.СоответствиеСчетов
	|ИЗ
	|	РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ПО (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	|			И НастройкиПравилТрансляции.СоответствиеСчетов = ИсточникиДанныхДляРасчетов.СоответствиеСчетов
	|			И (ИсточникиДанныхДляРасчетов.НазначениеРасчетов = &ПравилоОбработки)
	|			И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)";
	
	Если ЗначениеЗаполнено(СчетПриемник) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД=&СчетПриемник";
		
		Запрос.УстановитьПараметр("СчетПриемник",СчетПриемник);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ИТОГИ ПО
	|	Показатель";
		
	Запрос.УстановитьПараметр("ШаблонТрансляции",ШаблонТрансляции);
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	Запрос.УстановитьПараметр("ВидОтчетаОСВ",Перечисления.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость);
	
	ПоказательПриемник=Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ПоказательПриемник.Следующий() Цикл
		
		ТекстПроцедуры="";
		
		ИсточникиДанных=ПоказательПриемник.Выбрать();
		МассивИсточников=Новый Массив;
		
		Пока ИсточникиДанных.Следующий() Цикл			
			
			Если НЕ МассивИсточников.Найти(ИсточникиДанных.Ссылка)=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ИсточникиДанных.ИспользованиеДт Тогда 
				
				Если (ИсточникиДанных.ТранслироватьСальдо И 
					(ИсточникиДанных.ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СНД 
					ИЛИ ИсточникиДанных.ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СКД))
					ИЛИ (ИсточникиДанных.ТранслироватьОбороты И ИсточникиДанных.ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.ДО)Тогда
					
					ТекстПроцедуры=ТекстПроцедуры+"+["+СокрЛП(ИсточникиДанных.Код)+"]";
					МассивИсточников.Добавить(ИсточникиДанных.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИсточникиДанных.ИспользованиеКт Тогда 
				
				Если (ИсточникиДанных.ТранслироватьСальдо И 
					(ИсточникиДанных.ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СНК 
					ИЛИ ИсточникиДанных.ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.СКК))
					ИЛИ (ИсточникиДанных.ТранслироватьОбороты И ИсточникиДанных.ВидИтогаОСВ=Перечисления.ВидыБухгалтерскихИтогов.КО)Тогда
					
					ТекстПроцедуры=ТекстПроцедуры+"+["+СокрЛП(ИсточникиДанных.Код)+"]";
					МассивИсточников.Добавить(ИсточникиДанных.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЦикла;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("НазначениеРасчетов", 	ПравилоОбработки);
		СтруктураПараметров.Вставить("ПотребительРасчета", 	ПоказательПриемник.Показатель);
		СтруктураПараметров.Вставить("ТекстПроцедуры",	 	Сред(ТекстПроцедуры,2));
		СтруктураПараметров.Вставить("ПроизвольныйКод", 	Ложь);
		
		РезультатПроверки = УправлениеОтчетамиУХ.ПроверитьФормулуПоказателя(СтруктураПараметров);
		
		УправлениеОтчетамиУХ.ОтметитьИспользованиеОперандов(ПравилоОбработки, ПоказательПриемник.Показатель,, Перечисления.СпособыИспользованияОперандов.ДляФормулРасчета,СтруктураПараметров.ТекстПроцедуры);	
		УправлениеОтчетамиУХ.ЗаписатьПроцедуруРасчета(СтруктураПараметров);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьФормулыРасчетаПоказателейСервер()

Процедура ПеренестиНастройкиСоответствияСчетов(ИсходныйШаблон,НовыйШаблон) Экспорт
	
	// Создаем новые соответствия счетов и переносим правила трансляции
	
	СокращеннаяОСВ=((НовыйШаблон.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели 
						ИЛИ НовыйШаблон.НаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВПоказатели)
						И НовыйШаблон.ВидОтчетаОСВПриемник.СокращеннаяОСВ);
	
	НачатьТранзакцию();
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравилТрансляции.СоответствиеСчетов КАК СоответствиеСчетовСтар,
	|	НастройкиПравилТрансляции.ИспользованиеДт,
	|	НастройкиПравилТрансляции.ИспользованиеКт,
	|	НастройкиПравилТрансляции.ПрименениеПоКорреспонденции,
	|	НастройкиПравилТрансляции.КоррСчетИсточник,
	|	НастройкиПравилТрансляции.ТранслироватьСальдо,
	|	НастройкиПравилТрансляции.ТранслироватьОбороты,
	|	НастройкиПравилТрансляции.СоответствиеСчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	ВЫБОР
	|		КОГДА НастройкиПравилТрансляции.СоответствиеСчетов.СчетПриемник.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.Баланс)
	|		КОГДА НастройкиПравилТрансляции.СоответствиеСчетов.СчетПриемник.РазделПланаСчетов В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.РазделыПланаСчетов.ОПУ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БалансОПУПриемник
	|ИЗ
	|	РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|ГДЕ
	|	НастройкиПравилТрансляции.ШаблонТрансляции = &ИсходныйШаблон";
	
	Запрос.УстановитьПараметр("ИсходныйШаблон",ИсходныйШаблон);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	СоответствиеСчетовСтарНов=Новый Соответствие;
	
	Пока Результат.Следующий() Цикл
		
		СоответствиеНов=Результат.СоответствиеСчетовСтар.Скопировать();
		СоответствиеНов.Владелец=НовыйШаблон;
		
		Если ЗначениеЗаполнено(Результат.ГруппаРаскрытия) Тогда
			
			ГруппаРаскрытияНов=Результат.ГруппаРаскрытия.Скопировать();
			ГруппаРаскрытияНов.Владелец=НовыйШаблон;
			
			ГруппаРаскрытияНов.ОбменДанными.Загрузка=Истина;
			
			Попытка
				ГруппаРаскрытияНов.Записать();
				СоответствиеНов.ГруппаРаскрытия=ГруппаРаскрытияНов.Ссылка;
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Не удалось создать группу раскрытия для соответствия счетов %СоответствиеНов%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СоответствиеНов%", Строка(СоответствиеНов));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
				ОтменитьТранзакцию();
				Возврат;
			КонецПопытки;
			
		КонецЕсли;
		
		СоответствиеНов.ОбменДанными.Загрузка=Истина;
		
		Попытка
			СоответствиеНов.Записать();
			СоответствиеСчетовСтарНов.Вставить(Результат.СоответствиеСчетовСтар,СоответствиеНов.Ссылка);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось создать соответствие счетов %СоответствиеНов%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СоответствиеНов%", Строка(СоответствиеНов));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		НаборЗаписей=РегистрыСведений.НастройкиПравилТрансляции.СоздатьНаборЗаписей();				
		
		НаборЗаписей.Отбор.ШаблонТрансляции.Установить(НовыйШаблон);
		НаборЗаписей.Отбор.СоответствиеСчетов.Установить(СоответствиеНов.Ссылка);
		
		НоваяСтрока=НаборЗаписей.Добавить();
	
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
		
		Если СокращеннаяОСВ Тогда
			
			НоваяСтрока.ТранслироватьСальдо=(Результат.БалансОПУПриемник=Справочники.РазделыПланаСчетов.Баланс);
			НоваяСтрока.ТранслироватьОбороты=(Результат.БалансОПУПриемник=Справочники.РазделыПланаСчетов.ОПУ);
			
		КонецЕсли;
				
		НоваяСтрока.ШаблонТрансляции	= НовыйШаблон;
		НоваяСтрока.СоответствиеСчетов	= СоответствиеНов.Ссылка;

		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	// Перенесем источники данных и формулы расчета результирующих показателей
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработкиНов.Ссылка КАК ПравилоНов,
	|	ПравилаОбработкиСтар.Ссылка КАК ПравилоСтар,
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК ИсточникДанных,
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК СоответствиеСчетовСтар,
	|	ИсточникиДанныхДляРасчетов.СоответствиеСчетов
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработкиСтар
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаОбработки КАК ПравилаОбработкиНов
	|		ПО ПравилаОбработкиСтар.НаправлениеТрансляции = ПравилаОбработкиНов.НаправлениеТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|		ПО ПравилаОбработкиСтар.Ссылка = ИсточникиДанныхДляРасчетов.НазначениеРасчетов
	|ГДЕ
	|	ПравилаОбработкиНов.Владелец = &НовыйШаблон
	|	И ПравилаОбработкиСтар.Владелец = &ИсходныйШаблон";
	
	Запрос.УстановитьПараметр("ИсходныйШаблон",ИсходныйШаблон);
	Запрос.УстановитьПараметр("НовыйШаблон",НовыйШаблон);

	Результат=Запрос.Выполнить().Выбрать();
	СоответствиеПравил=Новый Соответствие;
	НовоеНаправлениеТрансляции=НовыйШаблон.НаправлениеТрансляции;
	
	Пока Результат.Следующий() Цикл
		
		НовыйИсточник=Результат.ИсточникДанных.Скопировать();
		НовыйИсточник.НазначениеРасчетов=Результат.ПравилоНов;
		
		Если НовоеНаправлениеТрансляции=Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии Тогда
			
			НовыйИсточник.ПотребительРасчета=СоответствиеСчетовСтарНов[Результат.СоответствиеСчетовСтар];
			
		КонецЕсли;
		
		НовыйИсточник.СоответствиеСчетов=СоответствиеСчетовСтарНов[Результат.СоответствиеСчетов];
		
		НовыйИсточник.ОбменДанными.Загрузка=Истина;
		
		Попытка
			
			НовыйИсточник.Записать();
			
			НаборЗаписей=РегистрыСведений.РеквизитыИсточниковДанныхДляФормул.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИсточникДанных.Установить(НовыйИсточник.Ссылка);
			
			НоваяСтрока=НаборЗаписей.Добавить();
			НоваяСтрока.НазначениеРасчетов		= НовыйИсточник.НазначениеРасчетов;
			НоваяСтрока.ПотребительРасчета		= НовыйИсточник.ПотребительРасчета;
			НоваяСтрока.СпособПолучения			= НовыйИсточник.СпособПолучения;
			НоваяСтрока.СпособИспользования		= НовыйИсточник.СпособИспользования;
			НоваяСтрока.ИсточникДанных			= НовыйИсточник.Ссылка;
			НоваяСтрока.КодИсточника			= СокрЛП(НовыйИсточник.Код);
			НоваяСтрока.КодУпрощеннойФормулы	= СокрЛП(НовыйИсточник.КодУпрощеннойФормулы);
			НоваяСтрока.КодПоказательОтбор		= СокрЛП(НовыйИсточник.ПоказательОтбор.Код);
			НоваяСтрока.ЕстьНестандартныеОтборы	= НовыйИсточник.ЕстьНестандартныеОтборы;
			НоваяСтрока.ПоказательТекущегоОтчета= НовыйИсточник.ПоказательТекущегоОтчета;
			
			НаборЗаписей.Записать();
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось создать источник данных %Источник% для правила трансляции %Правило%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Источник%", Строка(НовыйИсточник));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Правило%", Строка(Результат.ПравилоНов));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		Если СоответствиеПравил[Результат.ПравилоНов]=Неопределено Тогда
			СоответствиеПравил.Вставить(Результат.ПравилоНов,Результат.ПравилоСтар);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПроцедурыРасчетов.ПотребительРасчета,
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроцедураВычисления,
	|	ПроцедурыРасчетов.СпособОбработки,
	|	ПроцедурыРасчетов.ПроизвольныйКод
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоСтар";
	
	Для Каждого СтрСоответствие ИЗ СоответствиеПравил Цикл
		
		Запрос.УстановитьПараметр("ПравилоСтар",СтрСоответствие.Значение);
		
		НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НазначениеРасчетов.Установить(СтрСоответствие.Ключ);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			НоваяСтрока.НазначениеРасчетов=СтрСоответствие.Ключ;
			
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		СформироватьДанныеРегистраПараметрическихНастроек(СтрСоответствие.Ключ);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
			
КонецПроцедуры // ПеренестиНастройкиСоответствияСчетов()

// Возвращает незанятое наименование по умолчанию для бланка отчета, принадлежащего
// виду отчета ВидОтчетаВход.
Функция СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчетаВход) Экспорт
	РезультатФункции = Справочники.ВидыОтчетов.СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчетаВход);
	Возврат РезультатФункции;
КонецФункции

// Обертка для процедуры СоздатьНастройкиНовогоБланка для бланка БланкВход.
Процедура СоздатьНастройкиНовогоБланка(БланкВход) Экспорт
	
	
	РасширениеБизнесЛогикиУХ.СоздатьНастройкиНовогоБланка(БланкВход);	
	
	
КонецПроцедуры

#Область СостоянияОтчетов

// Возвращает правило заполнения отчётов, сопоставленное ракурсу данных РакурсВход.
Функция ПолучитьПравилоЗаполненияРакурса(РакурсВход)
	РезультатФункции = Справочники.ПравилаОбработки.ПустаяСсылка();
	Если ЗначениеЗаполнено(РакурсВход) Тогда
		// Получение реквизитов ракурса.
		Область		 = РакурсВход.Область;
		Организация	 = РакурсВход.Организация;
		Период		 = РакурсВход.ПериодОтчета;
		Сценарий	 = РакурсВход.Сценарий;
		// Получение документа УОП по реквизитам ракурса.
		ВидОтчета = Область.Владелец;
		ДокументУправлениеОтчетнымПериодом = УправлениеОтчетамиУХ.НайтиДокументУправлениеОтчетнымПериодом(Сценарий, Период);
		Если ЗначениеЗаполнено(ДокументУправлениеОтчетнымПериодом) Тогда
			// Получение таблицы настроек заполнения для документа УОП.
			ВерсияРегламента = ДокументУправлениеОтчетнымПериодом.ВерсияОрганизационнойСтруктуры;
			ТаблицаПолномочий = УправлениеОтчетамиУХ.ПолучитьТаблицуПолномочий(Период, Сценарий, ВерсияРегламента, Неопределено, , Организация, , ВидОтчета);
			// Обработка таблицы настроек и вывод результата.
			МассивПравил = ТаблицаПолномочий.ВыгрузитьКолонку("ПравилоОбработки");
			МассивПравил = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПравил);
			МассивПравил = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивПравил);
			Если МассивПравил.Количество() = 1 Тогда
				// Правило плолучено из регламента.
				РезультатФункции = МассивПравил[0];
			ИначеЕсли МассивПравил.Количество() = 0 Тогда
				// В регламенте найти правило не удалось. Получим правило по умолчанию из вида отчёта.
				БланкОтображенияПоУмолчанию					 = Неопределено;
				БланкДляИмпортаПоУмолчанию					 = Неопределено; 
				ПравилоОбработкиПоУмолчанию					 = Неопределено; 
				ПравилоПроверкиПоУмолчанию					 = Неопределено; 
				БланкСводнойТаблицыПоУмолчанию				 = Неопределено; 
				БланкОтображенияПоУмолчаниюМногопериодный	 = Неопределено;
				Справочники.ВидыОтчетов.ПолучитьНастройкиПоУмолчанию(ВидОтчета, БланкОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию, БланкОтображенияПоУмолчаниюМногопериодный);
				Если ЗначениеЗаполнено(ПравилоОбработкиПоУмолчанию) Тогда
					РезультатФункции = ПравилоОбработкиПоУмолчанию;
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось однозначно правило обработки для ракурса %Ракурс%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ракурс%", Строка(РакурсВход));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					РезультатФункции = Справочники.ПравилаОбработки.ПустаяСсылка();
				КонецЕсли;
			Иначе
				// Несколько правил расчёта в регламенте. Сообщим об ошибке пользователю.
				ТекстСообщения = НСтр("ru = 'Не удалось однозначно определить правило обработки для ракурса %Ракурс%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ракурс%", Строка(РакурсВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Справочники.ПравилаОбработки.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось определить документ Управление отчётным периодом для ракурса %Ракурс%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ракурс%", Строка(РакурсВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Справочники.ПравилаОбработки.ПустаяСсылка();
		КонецЕсли;
	Иначе
		РезультатФункции = Справочники.ПравилаОбработки.ПустаяСсылка();		// Передан пустой ракурс.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПравилоЗаполненияРакурса()

Функция ВозможноУстановитьСостояние(ДокументОбъект, НовоеСостояние, ШапкаОшибки = Неопределено) Экспорт

	Если (НовоеСостояние <> Перечисления.СостоянияОтчетов.Утвержден)
		И (НовоеСостояние <> Перечисления.СостоянияОтчетов.Подготовлен) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если Константы.ПроверятьУтверждениеДанных.Получить()
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ЧтениеНеактуальныхЗаписей") Тогда
		
		Если ДокументОбъект.ЧтениеНеактуальныхЗаписей Тогда
			
			Если ШапкаОшибки <> Неопределено Тогда
				
				Сообщение = НСтр("ru = 'При  установленной константе ""Проверять утверждение данных"" невозможно установить состояние %НовоеСостояние%, если для документа разрешено использование неутвержденных данных'");
				Сообщение = СтрЗаменить(Сообщение, "%НовоеСостояние%", Строка(Строка(НовоеСостояние)));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Сообщение, Ложь, ШапкаОшибки);
				
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	// Проверка утверждения правил и шаблонов.
	РезультатФункции = Истина;
	ПроверятьУтверждениеНастроек = Константы.ПроверятьУтверждениеНастроекОтчетов.Получить();
	Если НЕ ЗначениеЗаполнено(ПроверятьУтверждениеНастроек) Тогда
		ПроверятьУтверждениеНастроек = Ложь;
	Иначе
		// Значение установлено.
	КонецЕсли;	
	Если ПроверятьУтверждениеНастроек Тогда
		Если Метаданные.Документы.Найти("РакурсДанных") <> Неопределено 
				И ТипЗнч(ДокументОбъект) = Тип("ДокументСсылка." + "РакурсДанных") Тогда
			ПустойШаблон = Справочники.БланкиОтчетов.ПустаяСсылка();
			Правило = ПолучитьПравилоЗаполненияРакурса(ДокументОбъект);
			РезультатФункции = ПроверитьНаличиеУтвержденныхПравилИШаблонов(Правило, ПустойШаблон, ШапкаОшибки, НовоеСостояние, Ложь, Истина);
		Иначе
			РезультатФункции = ПроверитьНаличиеУтвержденныхПравилИШаблонов(ДокументОбъект.ПравилоОбработки, ДокументОбъект.ШаблонОтчета, ШапкаОшибки, НовоеСостояние, Истина, Истина);
		КонецЕсли;
	Иначе
		// Проверка не требуется.
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

#КонецОбласти

#Область ОбратноеРаспределение

Функция ПолучитьСтруктуруПараметровДляРаспределения(ДокументОбъект, ТабКорректировка, мПоказателиРаскрытия = Неопределено) Экспорт
		
	Если ТабКорректировка.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ПоляВыбора = Новый Структура("Доля,КонсолидирующаяОрганизация,ВидОтношенияКГруппе", 
									"ЭффективнаяДоляРасчет", "КонсолидирующаяОрганизация", "ВидОтношенияКГруппе");
	ТаблицаПериметр = УправлениеРабочимиПроцессамиУХ.ПолучитьДанныеРегламентаОтчета(ДокументОбъект, ПоляВыбора);	
	ТаблицаПериметр.Колонки.ИндивидуальнаяОрганизация.Имя="Организация";
	
	Если ТаблицаПериметр.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Организация не является консолидирующей по указанным периоду и сценарию'");
		Сообщить(ТекстСообщения, СтатусСообщения.Внимание);	
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДокументОбъект.ПолучитьРасшифровкуКонсолидированныхПоказателей(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекСоставПериметра.ВидОтношенияКГруппе,
	|	ТекСоставПериметра.Организация,
	|	ТекСоставПериметра.Доля
	|ПОМЕСТИТЬ СоставПериметра
	|ИЗ
	|	&ТекСоставПериметра КАК ТекСоставПериметра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТекСоставПериметра.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказателиРаскрытия.Показатель,
	|	мПоказателиРаскрытия.Значение";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+",
		|мПоказателиРаскрытия.Аналитика"+Индекс+" КАК Аналитика"+Индекс;
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ
	|	&мПоказателиРаскрытия КАК мПоказателиРаскрытия
	|ГДЕ
	|	мПоказателиРаскрытия.Показатель В(&МассивПоказателей)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабКорректировка.Показатель
	|ПОМЕСТИТЬ ТабПоказатели
	|ИЗ
	|	&ТабКорректировка КАК ТабКорректировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоставПериметра.ВидОтношенияКГруппе,
	|	СоставПериметра.Организация,
	|	СоставПериметра.Доля,
	|	ТабПоказатели.Показатель
	|ПОМЕСТИТЬ ПоказателиПериметр
	|ИЗ
	|	СоставПериметра КАК СоставПериметра,
	|	ТабПоказатели КАК ТабПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мТабРасшифровкиПоказателей.Организация,
	|	мТабРасшифровкиПоказателей.Показатель,
	|	мТабРасшифровкиПоказателей.Значение КАК ЗначениеЧисло,
	|	мТабРасшифровкиПоказателей.ИтоговоеЗначение КАК ЗначениеДочернейКомпании,
	|	мТабРасшифровкиПоказателей.Доля,
	|	мТабРасшифровкиПоказателей.Регистратор,
	|	мТабРасшифровкиПоказателей.ИндексПрисутствияВПериоде
	|ПОМЕСТИТЬ ТаблицаРасшифровки
	|ИЗ
	|	&мТабРасшифровкиПоказателей КАК мТабРасшифровкиПоказателей
	|ГДЕ
	|	мТабРасшифровкиПоказателей.Показатель В(&МассивПоказателей)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	мТабРасшифровкиПоказателей.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаРасшифровки.ИндексПрисутствияВПериоде, 1) КАК ИндексКонтроляВПериоде,
	|	&ПериодОтчета КАК ПериодСценария,
	|	&Сценарий КАК Сценарий,
	|	ПоказателиПериметр.Организация,
	|	ПоказателиПериметр.ВидОтношенияКГруппе,
	|	ТаблицаРасшифровки.Регистратор,
	|	ЕСТЬNULL(ТаблицаРасшифровки.Доля, ПоказателиПериметр.Доля) КАК Доля,
	|	ЕСТЬNULL(ТаблицаРасшифровки.ЗначениеЧисло, 0) КАК ЗначениеЧисло,
	|	ЕСТЬNULL(ТаблицаРасшифровки.ЗначениеДочернейКомпании, 0) КАК ЗначениеДочернейКомпании,
	|	ЕСТЬNULL(ТаблицаРасшифровки.ЗначениеЧисло, 0) КАК ИтоговоеЗначение,
	|	ЕСТЬNULL(ТаблицаРасшифровки.ЗначениеДочернейКомпании, 0) КАК ИтоговоеЗначениеДоч,
	|	ПоказателиПериметр.Показатель
	|ИЗ
	|	ПоказателиПериметр КАК ПоказателиПериметр
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаРасшифровки КАК ТаблицаРасшифровки
	|		ПО ПоказателиПериметр.Организация = ТаблицаРасшифровки.Организация
	|			И ПоказателиПериметр.Показатель = ТаблицаРасшифровки.Показатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказателиРаскрытия.Показатель,
	|	мПоказателиРаскрытия.Значение,
	|	мПоказателиРаскрытия.Аналитика1,
	|	мПоказателиРаскрытия.Аналитика2,
	|	мПоказателиРаскрытия.Аналитика3,
	|	мПоказателиРаскрытия.Аналитика4,
	|	мПоказателиРаскрытия.Аналитика5,
	|	мПоказателиРаскрытия.Аналитика6
	|ИЗ
	|	мПоказателиРаскрытия КАК мПоказателиРаскрытия";	
	
	Запрос.УстановитьПараметр("ТекСоставПериметра", 		ТаблицаПериметр);
	Запрос.УстановитьПараметр("ПериодОтчета", 				ДокументОбъект.ПериодОтчета);
	Запрос.УстановитьПараметр("ВидОтчета", 					ДокументОбъект.ВидОтчета);
	Запрос.УстановитьПараметр("Сценарий", 					ДокументОбъект.Сценарий);	
	Запрос.УстановитьПараметр("Организация", 				ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("ТабКорректировка", 			ТабКорректировка);
	Запрос.УстановитьПараметр("мТабРасшифровкиПоказателей", ДокументОбъект.мТабРасшифровкиПоказателей);
	Запрос.УстановитьПараметр("МассивПоказателей", 			ТабКорректировка.ВыгрузитьКолонку("Показатель"));
	Запрос.УстановитьПараметр("мПоказателиРаскрытия", 		?(мПоказателиРаскрытия=Неопределено,ДокументОбъект.мПоказателиРаскрытия,мПоказателиРаскрытия));

	Результат=Запрос.ВыполнитьПакет();
	
	ТаблицаРаспределенияКорректировки 	= Результат[5].Выгрузить();
	ТаблицаЗначенийАналитик 			= Результат[6].Выгрузить();
					
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СпособРаспределения",				Перечисления.СпособыОбратногоРаспределения.ПоОрганизациямПериметра);
	СтруктураПараметров.Вставить("РаспределениеИтоговыхЗначений",	Истина);
    СтруктураПараметров.Вставить("ТаблицаЗначенийПоказателей",		ПоместитьВоВременноеХранилище(ТабКорректировка));
	СтруктураПараметров.Вставить("ТаблицаЗначенийАналитик",			ПоместитьВоВременноеХранилище(ТаблицаЗначенийАналитик));
	СтруктураПараметров.Вставить("ТаблицаРаспределенияКорректировки",	ПоместитьВоВременноеХранилище(ТаблицаРаспределенияКорректировки));
	
	СтруктураПараметров.Вставить("ЭкземплярОтчета",		ДокументОбъект.Ссылка);
	СтруктураПараметров.Вставить("Сценарий",			ДокументОбъект.Сценарий);
    СтруктураПараметров.Вставить("ПериодОтчета",		ДокументОбъект.ПериодОтчета);
	СтруктураПараметров.Вставить("Организация",			ДокументОбъект.Организация);
	СтруктураПараметров.Вставить("Проект",				ДокументОбъект.Проект);
	СтруктураПараметров.Вставить("ВидОтчета",			ДокументОбъект.ВидОтчета);
	СтруктураПараметров.Вставить("ПравилоОбработки",	ДокументОбъект.ПравилоОбработки);
    СтруктураПараметров.Вставить("ОсновнаяВалюта",		ДокументОбъект.ОсновнаяВалюта);

	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти

#Область ОпцииОтчетов

Функция ИспользоватьНеактуальныеЗаписи(НастраиваемыйОтчет) Экспорт
		
	Возврат НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей Или Не Константы.ПроверятьУтверждениеДанных.Получить();
		
КонецФункции

Процедура ДобавитьОтборПоАктивности(ПостроительЗапроса, КонтекстОтчета, ПроверитьСуществованиеОтбора = Ложь, ПроверятьИспользование = Истина) Экспорт

	Если ТипЗнч(КонтекстОтчета)=Тип("Структура") И КонтекстОтчета.Свойство("ИдентификаторСеанса") Тогда
		
		ПостроительЗапроса.Параметры.Вставить("ИдентификаторСеанса",КонтекстОтчета.ИдентификаторСеанса);
		
	Иначе
		
		ПостроительЗапроса.Параметры.Вставить("ИдентификаторСеанса","");
		
	КонецЕсли;
	
	Если ПроверятьИспользование И ИспользоватьНеактуальныеЗаписи(КонтекстОтчета) Тогда
		ПостроительЗапроса.Параметры.Вставить("ПараметрАктивность1",Истина);
		ПостроительЗапроса.Параметры.Вставить("ПараметрАктивность2",Ложь);
		Возврат;
	КонецЕсли;
		
	Если ПроверитьСуществованиеОтбора И ПроверитьНаличиеОтбора(ПостроительЗапроса, "Активность") Тогда
		Возврат; //отбор уже установлен
	КонецЕсли;
	
	ПостроительЗапроса.Отбор.Добавить("Активность").Установить(Истина);
	ПостроительЗапроса.Параметры.Вставить("ПараметрАктивность1",Истина);
	ПостроительЗапроса.Параметры.Вставить("ПараметрАктивность2",Истина);

КонецПроцедуры

// Функция проверяет наличие отчетов, использующих данный элемент настройки и имеющих статус "Утверждено".
//
Функция ПроверитьНаличиеДокументовПоЭлементуНастройки(Ссылка,ИмяЭлемента) Экспорт
	
	Отбор = Новый Структура(ИмяЭлемента+",Состояние", Ссылка, Перечисления.СостоянияОтчетов.Утвержден);
	Возврат Документы.НастраиваемыйОтчет.СуществуетЭкземплярОтчета(Отбор);
	
КонецФункции

Процедура ДобавитьОтборПоАктивностиПредварительныеДанные(ПостроительЗапроса, КонтекстОтчета, ИспользованиеПредварительныхДанных) Экспорт
	
	Если ИспользованиеПредварительныхДанных = Перечисления.ВидыИспользованияПредварительныхДанных.НеИспользовать
		ИЛИ (ИспользованиеПредварительныхДанных = Перечисления.ВидыИспользованияПредварительныхДанных.ПоЭкземпляруОтчета
		И (НЕ УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(КонтекстОтчета))) Тогда
		
		УправлениеОтчетамиУХ.ДобавитьОтборПоАктивности(ПостроительЗапроса, КонтекстОтчета, Ложь, Ложь);
		
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьАктивностьВСтруктуру(СтруктураОтбора, Контекст, Активность = Неопределено) Экспорт

	Если Активность <> Неопределено Тогда
		СтруктураОтбора.Вставить("Активность", Активность);
	ИначеЕсли НЕ Контекст.ИспользуемоеЧтениеНеактуальныхЗаписей() Тогда
		СтруктураОтбора.Вставить("Активность", Истина);
	КонецЕсли;

КонецПроцедуры

Функция ИспользоватьТолькоПодтвержденныеДанные(ИспользоватьТолькоПодтвержденныеДанные = Ложь) Экспорт

	Возврат ИспользоватьТолькоПодтвержденныеДанные И Константы.ПроверятьУтверждениеДанных.Получить();

КонецФункции

// Функция проверяет, утверждены ли шаблон отчета и правило обработки
//
Функция ПроверитьНаличиеУтвержденныхПравилИШаблонов(ПравилоОбработки, ШаблонОтчета, ШапкаОшибки = Неопределено, СостояниеОтчетаДляСообщения = Неопределено, ПроверятьШаблонВход = Истина, ПроверятьПравилоВход = Истина) Экспорт
	РезультатФункции = Истина;
	Если Константы.ПроверятьУтверждениеНастроекОтчетов.Получить() Тогда
		// Проверка шаблона отчета.
		ТекстШаблон = "";
		Если ПроверятьШаблонВход Тогда
			Если НЕ ШаблонОтчета.Утвержден Тогда
				ТекстШаблон = Строка(НСтр("ru = '<Шаблон отчета>'"));
				РезультатФункции = Ложь;
			Иначе
				// Проверка пройдена.
			КонецЕсли;
		Иначе
			// Проверка не требуется.
		КонецЕсли;
		// Проверка правила заполнения.
		ТекстПравило = "";
		Если ПроверятьПравилоВход Тогда
			Если НЕ ПравилоОбработки.Утверждено Тогда
				ТекстПравило = Строка(НСтр("ru = '<Правило обработки>'"));
				РезультатФункции = Ложь;
			Иначе
				// Проверка пройдена.
			КонецЕсли;
		Иначе
			// Проверка не требуется.
		КонецЕсли;
		// Вывод сообщения.
		Если НЕ РезультатФункции Тогда
			ТекстОшибки = НСтр("ru = 'Отчет нельзя перевести в состояние <%Состояние%>, т.к. не утверждены: %Правило% %Шаблон%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Состояние%", Строка(СостояниеОтчетаДляСообщения));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Правило%", Строка(ТекстПравило));
			Если (СокрЛП(ТекстПравило) <> "") И (СокрЛП(ТекстШаблон) <> "") Тогда
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Шаблон%", ", " + Строка(ТекстШаблон));
			Иначе
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Шаблон%", Строка(ТекстШаблон));
			КонецЕсли;
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, Ложь, ШапкаОшибки, СтатусСообщения.Важное);
		Иначе
			// Все проверки пройдены.
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;		// Проверка не требуется
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьДанныеЗакрытогоПериода(Организация)  Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	МАКСИМУМ(ДатыЗапретаФормированияПроводокМеждународныйУчет.ДатаЗапрета) КАК ДатаЗакрытияПериода
	|ИЗ
	|	РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет КАК ДатыЗапретаФормированияПроводокМеждународныйУчет
	|ГДЕ
	|	(ДатыЗапретаФормированияПроводокМеждународныйУчет.Организация = &Организация
	|			ИЛИ ДатыЗапретаФормированияПроводокМеждународныйУчет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() И (НЕ Результат.ДатаЗакрытияПериода=Null) Тогда
		
		ДанныеПериода=Новый Структура;
		ДанныеПериода.Вставить("ДатаЗакрытияПериода",	КонецДня(Результат.ДатаЗакрытияПериода));
		ДанныеПериода.Вставить("Период",				ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Результат.ДатаЗакрытияПериода,КэшируемыеПроцедурыУХ.ПолучитьПериодичностьТрансляцииПроводок(),0));
		
		Возврат ДанныеПериода;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьДатуЗакрытияПериода() 

Процедура ОбработатьДанныеОбъекта(ДанныеОбъекта,СпособТрансляции,ДанныеЗакрытияПериода) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеОбъекта.Сценарий) Тогда
		
		ДанныеОбъекта.Сценарий=ДанныеОбъекта.УдалитьСценарий;
		
	КонецЕсли;
	
	Если ДанныеЗакрытияПериода=Неопределено Тогда
		
		ДанныеОбъекта.ПериодОтражения=ДанныеОбъекта.ПериодОтбора;
		ДанныеОбъекта.ДатаЗакрытияПериодаОтражения="";
		ДанныеОбъекта.ДатаЗаписиДоЗакрытияПериода=ТекущаяДатаСеанса();
		ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода="";
			
	ИначеЕсли ДанныеЗакрытияПериода.ДатаЗакрытияПериода<ДанныеОбъекта.ИсходныйДокумент.Дата Тогда 
		
		ДанныеОбъекта.ПериодОтражения=ДанныеОбъекта.ПериодОтбора;
		ДанныеОбъекта.ДатаЗакрытияПериодаОтражения=ДанныеЗакрытияПериода.ДатаЗакрытияПериода;
		ДанныеОбъекта.ДатаЗаписиДоЗакрытияПериода=ТекущаяДатаСеанса();
		ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода="";
		
	Иначе
		
		ДанныеОбъекта.ПериодОтражения=ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДанныеЗакрытияПериода.ДатаЗакрытияПериода,КэшируемыеПроцедурыУХ.ПолучитьПериодичностьТрансляцииПроводок(),1);
		ДанныеОбъекта.ДатаЗакрытияПериодаОтражения=ДанныеЗакрытияПериода.ДатаЗакрытияПериода;
		ДанныеОбъекта.ДатаЗаписиПослеЗакрытияПериода=ТекущаяДатаСеанса();
		
	КонецЕсли;
	
	ДанныеОбъекта.ПроведениеОтменено=Ложь;
	ДанныеОбъекта.ОбработкаВыполнена=Перечисления.ДаНет.нет;
	ДанныеОбъекта.ОтражениеФоновымЗаданием=(СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамФоновоеЗадание);
	
	Если СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамПриПроведении Тогда
		
		РегистрыСведений.ОтражениеДокументовПоШаблонам.ВыполнитьОтражениеОбъекта(ДанныеОбъекта);
		
	КонецЕсли;
		
КонецПроцедуры // ОбработатьДанныеОбъекта() 

Процедура УстановитьПризнакДляСводнойТрансляции(Источник) Экспорт
	
	Перем Организация;
	Перем Период;
	
	Если НЕ Константы.КонтролироватьСостояниеДокументаТрансляции.Получить() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ИмяРегистра=Источник.Метаданные().Имя;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	Трансляция.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.Трансляция КАК Трансляция
	|ГДЕ
	|	Трансляция.Проведен
	|	И Трансляция.ИмяРегистраИсточник = &ИмяРегистра";
	
	Запрос.УстановитьПараметр("ИмяРегистра",ИмяРегистра);
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если Источник.Количество()>0 Тогда
		
		ИмяРегистра=Источник.Метаданные().Имя;
		
		ДанныеПроведения= Источник[0];
		Организация		= ДанныеПроведения.Организация;
		Период			= ДанныеПроведения.Период;
		
	Иначе
		
		Для Каждого ЭлементОтбора ИЗ Источник.Отбор Цикл
			
			Если ЭлементОтбора.Имя="Регистратор" Тогда
				
				Регистратор=ЭлементОтбора.Значение;
				Прервать
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаРеквизитов="Дата";
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Организация",Регистратор) Тогда
			
			СтрокаРеквизитов=СтрокаРеквизитов+",Организация";
			
		КонецЕсли;
		
		ДанныеДокумента=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Регистратор,СтрокаРеквизитов);
		
		Период=ДанныеДокумента.Дата;
		ДанныеДокумента.Свойство("Организация",Организация);
		
	КонецЕсли;
	
	Обработки.КорректировкиЗначенийПоказателей.УстановитьПризнакИзмененияИсходныхДанных(ИмяРегистра,Период,Организация);
			
КонецПроцедуры // УстановитьПризнакДляСводнойТрансляции()
	
Процедура ПриИзмененииРегистраБухгалтерииТрансляцияПриЗаписи(Источник, Отказ, РежимЗаписи) Экспорт
	
	Если Источник.ОбменДанными.Загрузка  = Истина Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Если НЕ Константы.ПодокументнаяТрансляция.Получить() Тогда
			
			УстановитьПризнакДляСводнойТрансляции(Источник);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		СпособТрансляции=Константы.СпособТрансляции.Получить();
		
		Если НЕ (СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамОбработка
			ИЛИ СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамФоновоеЗадание
			ИЛИ СпособТрансляции=Перечисления.СпособыТрансляции.ПоДокументамПриПроведении) Тогда
			
			УстановитьПризнакДляСводнойТрансляции(Источник);
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли; 
	
	Если НЕ Метаданные.ОбщиеМодули.Найти("КорректировкиЗначенийПоказателей32")=Неопределено Тогда
		
		МодульКорректировки=ОбщегоНазначения.ОбщийМодуль("КорректировкиЗначенийПоказателей32");
		МодульКорректировки.ПриИзмененииРегистраБухгалтерииТрансляция(Источник, Отказ, РежимЗаписи);
		
	Иначе
		
		Обработки.КорректировкиЗначенийПоказателей.ПриИзмененииРегистраБухгалтерииТрансляция(Источник, Отказ, РежимЗаписи);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВозможностьЗапуска(КлючЗадания) Экспорт
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", КлючЗадания);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		
		Для Каждого АктивноеЗадание из АктивныеЗадания Цикл
			АктивноеЗадание.Отменить();
		КонецЦикла;
		
	КонецЕсли;
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;	
	
КонецФункции // ПроверитьВозможностьЗапуска()

Процедура ОбновитьБланкОтчета(ВидОтчета,БланкОтчета) Экспорт
	
	БланкОбъект=БланкОтчета.ПолучитьОбъект();
	
	ОбработкаОбъект=Обработки.МастерГенерацииМакетаОтчета.Создать();
	ОбработкаОбъект.ВидОтчета=ВидОтчета;
	
	ОбработкаОбъект.ЦветФонаОбластиЗаполняемогоПоказателя	= Новый Цвет(255, 255, 192);
	ОбработкаОбъект.ЦветФонаОбластиВычисляемогоПоказателя	= Новый Цвет(192, 220, 192);
	ОбработкаОбъект.ЦветФонаОбластиПараметра				= Новый Цвет(213, 238, 255);
	ОбработкаОбъект.ЦветФонаНаименования					= Новый Цвет(255, 255, 255);
		
	ОбработкаОбъект.ВыводитьНаименованияКолонок				= Истина;
	ОбработкаОбъект.ВыводитьНаименованияСтрок				= Истина;
	ОбработкаОбъект.ГруппироватьПоСтрокам					= Истина;
	
	ОбработкаОбъект.ФормироватьЗаголовок					= Истина;
	ОбработкаОбъект.ФормироватьШапку						= Истина;
	ОбработкаОбъект.ФормироватьСодержательнуюЧасть			= Истина;
	ОбработкаОбъект.ФормироватьПараметры					= Истина;
	ОбработкаОбъект.СформироватьНовыйМакет					= Истина;
	
	ТаблДокМакет   = БланкОбъект.Макет.Получить();
	
	РабочийМакет =?(ТипЗнч(ТаблДокМакет)=Тип("ТабличныйДокумент"),ТаблДокМакет,Новый ТабличныйДокумент);
	
	ТаблицаПараметров=Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("Код");
	ТаблицаПараметров.Колонки.Добавить("Наименование");
	ТаблицаПараметров.Колонки.Добавить("Предустановленный",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Справочники.БланкиОтчетов.ЗаполнитьПредустановленныеПараметры(ВидОтчета, ТаблицаПараметров);
	
	НовыйМакет=ОбработкаОбъект.СформироватьМакет(РабочийМакет,,,ТаблицаПараметров);
	
	Справочники.БланкиОтчетов.СохранитьМакетВХранилище(БланкОбъект, НовыйМакет);
	
	Попытка 
		
		БланкОбъект.Записать();
		
	Исключение
		
		ТекстСообщения = НСтр("ru = '""Не удалось обновить бланк для вида отчета %ВидОтчета%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОписаниеОшибки()));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		
	КонецПопытки;
		
	
КонецПроцедуры // ОбновитьБланкОтчета() 

Процедура ОбновитьСтруктуруОСВПриИзмененииСчета(ПланСчетов,Счет,ОбновитьТР) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.ПланСчетов = &ПланСчетов";
	
	Если НЕ Счет=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВидыОтчетов.ИспользоватьПоУмолчанию";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПланСчетов",ПланСчетов);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ВидОтчетаОСВ=Результат.Ссылка;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	КлючЗадания=XMLСтрока(ВидОтчетаОСВ)+"vzv"+XMLСтрока(Счет);
	
	Если НЕ УправлениеОтчетамиУХ.ПроверитьВозможностьЗапуска(КлючЗадания) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.ДанныеДляОбновленияСтруктурыОСВ.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ВидОтчета.Установить(ВидОтчетаОСВ);
	НаборЗаписей.Отбор.СчетБД.Установить(Счет);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		
		НоваяСтрока=НаборЗаписей.Добавить();
		
		НоваяСтрока.ВидОтчета	= ВидОтчетаОСВ;
		НоваяСтрока.СчетБД		= Счет;
		НоваяСтрока.ПланСчетов	= ПланСчетов;
		НоваяСтрока.ОбновитьТР	= ОбновитьТР;
		
		НаборЗаписей.Записать(Истина);
		
	КонецЕсли;
	
	ПараметрыЗадания = Новый Массив();

	ПараметрыЗадания.Добавить(ПланСчетов);
	ПараметрыЗадания.Добавить(Счет);
	ПараметрыЗадания.Добавить(ВидОтчетаОСВ);
	ПараметрыЗадания.Добавить(ОбновитьТР);
	
	ОписаниеЗадания=СтрШаблон(Нстр("ru = 'Обновление ОСВ %1 при изменении счета %2.'"), ВидОтчетаОСВ, 
	                	Счет);
	
	ФоновыеЗадания.Выполнить("ОбщегоНазначенияУХ.СоздатьНедостающиеПоказателиОСВ",ПараметрыЗадания,КлючЗадания,ОписаниеЗадания);
	
КонецПроцедуры // ОбновитьСтруктуруОСВПриИзмененииСчета() 

#КонецОбласти

// По таблице периодов и сценариев возвращает таблицу документов
// Управление отчетным периодом.
Функция ПолучитьТаблицуДокументовПоТаблицеПериодов(ТаблицаПериодовВход) Экспорт
	РезультатФункции = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЗ_ТаблицаПериодов.ПериодОтчета КАК ПериодОтчета,
		|	ТЗ_ТаблицаПериодов.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ТЗ_ТаблицаПериодов
		|ИЗ
		|	&ТЗ_ТаблицаПериодов КАК ТЗ_ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ТЗ_ТаблицаПериодов.ПериодОтчета КАК Справочник.Периоды) КАК ПериодОтчета,
		|	ВЫРАЗИТЬ(ТЗ_ТаблицаПериодов.Сценарий КАК Справочник.Сценарии) КАК Сценарий
		|ПОМЕСТИТЬ ВТ_ДанныеПериодов
		|ИЗ
		|	ТЗ_ТаблицаПериодов КАК ТЗ_ТаблицаПериодов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УправлениеПериодомСценария.Ссылка КАК Ссылка,
		|	УправлениеПериодомСценария.Сценарий КАК Сценарий,
		|	ВТ_ДанныеПериодов.ПериодОтчета КАК ПериодСценария
		|ИЗ
		|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДанныеПериодов КАК ВТ_ДанныеПериодов
		|		ПО УправлениеПериодомСценария.Сценарий = ВТ_ДанныеПериодов.Сценарий
		|			И УправлениеПериодомСценария.ПериодСценария.ДатаНачала <= ВТ_ДанныеПериодов.ПериодОтчета.ДатаНачала
		|			И УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания >= ВТ_ДанныеПериодов.ПериодОтчета.ДатаОкончания
		|			И УправлениеПериодомСценария.ПериодСценария.Периодичность = ВТ_ДанныеПериодов.ПериодОтчета.Периодичность
		|ГДЕ
		|	НЕ УправлениеПериодомСценария.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТЗ_ТаблицаПериодов", ТаблицаПериодовВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает ссылку на документ Управление отчетным периодом
// по сценарию СценарийВход и периоду ПериодВход, когда он
// единственный.
Функция НайтиДокументУправлениеОтчетнымПериодом(СценарийВход, ПериодВход) Экспорт
	// Инициализация.
	РезультатФункции = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	МассивТиповПериоды = Новый Массив;
	МассивТиповПериоды.Добавить(Тип("СправочникСсылка.Периоды"));
	МассивТиповСценарии = Новый Массив;
	МассивТиповСценарии.Добавить(Тип("СправочникСсылка.Сценарии"));
	// Формирование таблицы периодов.
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ПериодОтчета", Новый ОписаниеТипов(МассивТиповПериоды));
	ТаблицаПериодов.Колонки.Добавить("Сценарий", Новый ОписаниеТипов(МассивТиповСценарии));
	НоваяСтрока = ТаблицаПериодов.Добавить();
	НоваяСтрока.ПериодОтчета	 = ПериодВход;
	НоваяСтрока.Сценарий		 = СценарийВход;
	// Получение таблицы документов по таблице периодов и возврат итогового значения по полученной таблице..
	ТаблицаДокументов = ПолучитьТаблицуДокументовПоТаблицеПериодов(ТаблицаПериодов);
	Если ТаблицаДокументов.Количество() = 1 Тогда
		РезультатФункции = ТаблицаДокументов[0].Ссылка;
	Иначе
		РезультатФункции = Документы.УправлениеПериодомСценария.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает ссылку на версию регламента подготовки отчетности
// по сценарию СценарийВход и периоду отчета ПериодВход.
Функция ПолучитьВерсиюРегламентаПоПериодуИСценарию(СценарийВход, ПериодВход) Экспорт
	ПустаяВерсияРегламента = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	РезультатФункции = ПустаяВерсияРегламента;
	УправлениеОтчетнымПериодомСсылка = НайтиДокументУправлениеОтчетнымПериодом(СценарийВход, ПериодВход);
	Если ЗначениеЗаполнено(УправлениеОтчетнымПериодомСсылка) Тогда
		РезультатФункции = УправлениеОтчетнымПериодомСсылка.ВерсияОрганизационнойСтруктуры;
	Иначе
		РезультатФункции = ПустаяВерсияРегламента;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает строку фильтра для загрузки по ADO из внешней
// базы ИспользуемаяИБ.
Функция ОпределитьРасширениеФайлаADO(ИспользуемаяИБ) Экспорт
	РезультатФункции = "";
	Если ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
		Если ИспользуемаяИБ.ТипХранилищаДанныхADO = Перечисления.ТипыХранилищДанныхADO.MSAccess Тогда
			РезультатФункции = Нстр("ru = 'База данных MS Access (*.mdb)|*.mdb|База данных MS Access 2007 (*.accdb)|*.accdb'");
		ИначеЕсли ИспользуемаяИБ.ТипХранилищаДанныхADO = Перечисления.ТипыХранилищДанныхADO.XLS Тогда
			РезультатФункции = Нстр("ru = 'Таблица Excel (*.xls,*.xlsx)|*.xl*'");
		Иначе 
			РезультатФункции = "";
		КонецЕсли;
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции // ОпределитьРасширениеФайлаADO()

#Область РаботаСДаннымиУправленияОтчетнымПериодом

Функция ПолучитьАналитикиТекущегоГоризонта(УправлениеПериодом,ПериодСценария,ПериодСценарияОкончание,Сценарий,ВерсияРегламента,ПериодЗакрыт=Ложь) Экспорт
	
	Запрос = Новый Запрос;
	
	
	Запрос.Текст =  "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка = &ВерсияРегламента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Ссылка КАК ПериодСсылка
	|ПОМЕСТИТЬ Периоды
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала >= &ДатаНачала
	|	И Периоды.ДатаОкончания <= &ДатаОкончания
	|	И Периоды.Произвольный = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Сценарий КАК Сценарии,
	|	&ВерсияРегламента КАК ВерсияРегламента,
	|	Организации.ОрганизационнаяЕдиница КАК Организации,
	|	Периоды.ПериодСсылка КАК Периоды
	|ПОМЕСТИТЬ ПолныйСрез
	|ИЗ
	|	Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Периоды КАК Периоды
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Сценарий КАК Сценарии,
	|	&ВерсияРегламента КАК ВерсияРегламента,
	|	&УправлениеПериодомСценария КАК УправлениеПериодомСценария,
	
	|	ВЫБОР
	|		КОГДА СтатусыПериодовСценариев.СтатусБлокировки ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ СтатусыПериодовСценариев.СтатусБлокировки
	|	КОНЕЦ КАК СтатусБлокировки,
	|	ПолныйСрез.Организации КАК Организации,
	|	ПолныйСрез.Периоды КАК Периоды
	|ИЗ
	|	ПолныйСрез КАК ПолныйСрез
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ПО ПолныйСрез.Сценарии = СтатусыПериодовСценариев.Сценарии
	|			И ПолныйСрез.Организации = СтатусыПериодовСценариев.Организации
	|			И ПолныйСрез.Периоды = СтатусыПериодовСценариев.Периоды";
	
	
	Запрос.УстановитьПараметр("ВерсияРегламента",ВерсияРегламента);
	Запрос.УстановитьПараметр("УправлениеПериодомСценария",УправлениеПериодом);
	Запрос.УстановитьПараметр("Периодичность",ПериодСценария.Периодичность);	
	Запрос.УстановитьПараметр("ДатаНачала",ПериодСценария.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",ПериодСценарияОкончание.ДатаОкончания);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);	
	Запрос.УстановитьПараметр("Проект",Справочники.Проекты.ПустаяСсылка());	
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	
КонецФункции

#КонецОбласти

Функция ОпределитьТипБД(ПравилоОбработки) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Возврат ?(ЗначениеЗаполнено(ПравилоОбработки.ТипБД),ПравилоОбработки.ТипБД,Справочники.ТипыБазДанных.ТекущаяИБ);
		
	Иначе
		
		Возврат Справочники.ТипыБазДанных.ТекущаяИБ;
		
	КонецЕсли;
	
КонецФункции // ОпределитьТипБД  

Функция ПолучитьМассивРегистровБухгалтерии(ПланСчетовБД) Экспорт

	ДанныеПланаСчетов=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПланСчетовБД,"Владелец,ПланСчетовМетаданные");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД КАК РегистрыБухгалтерииБД
	|ГДЕ
	|	РегистрыБухгалтерииБД.Владелец = &Владелец
	|	И РегистрыБухгалтерииБД.ПланСчетов.ПланСчетовМетаданные = &ПланСчетовМетаданные";
	
	Запрос.УстановитьПараметр("Владелец",ДанныеПланаСчетов.Владелец);
	Запрос.УстановитьПараметр("ПланСчетовМетаданные",ДанныеПланаСчетов.ПланСчетовМетаданные); 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ОпределитьРегистрБухгалтерии() 

Функция ПолучитьМассивПлановСчетов(РегистрБухгалтерии) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБД.Владелец КАК ТипБД,
	|	РегистрыБухгалтерииБД.ПланСчетов.ПланСчетовМетаданные КАК ПланСчетовМетаданные
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД КАК РегистрыБухгалтерииБД
	|ГДЕ
	|	РегистрыБухгалтерииБД.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",РегистрБухгалтерии);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий(); 
	
	ТипБД=Результат.ТипБД;
	ПланСчетовМетаданные=Результат.ПланСчетовМетаданные;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПланыСчетовБД.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ПланыСчетовБД.Наименование = ПланыСчетовБД.ПланСчетовМетаданные
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПоУмолчанию
	|ИЗ
	|	Справочник.ПланыСчетовБД КАК ПланыСчетовБД
	|ГДЕ
	|	ПланыСчетовБД.Владелец = &ТипБД
	|	И ПланыСчетовБД.ПланСчетовМетаданные = &ПланСчетовМетаданные
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоУмолчанию УБЫВ";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	Запрос.УстановитьПараметр("ПланСчетовМетаданные",ПланСчетовМетаданные);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции // ПолучитьМассивПлановСчетов() 
	
	
	
