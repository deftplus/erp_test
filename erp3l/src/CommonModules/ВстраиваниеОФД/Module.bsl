#Область СлужебныйПрограммныйИнтерфейс

Процедура ДополнитьТекстамиЗапросовДляДанныхДокумента(Запрос, ТекстыЗапроса) Экспорт
	
	ТекстЗапросаБрокерскиеСчета(Запрос, ТекстыЗапроса);
	ТекстЗапросаРасчетыСКонтрагентамиФакт(Запрос, ТекстыЗапроса);	
	ТекстЗапросаОткрытаяЗадолженность(Запрос, ТекстыЗапроса);	
	ТекстЗапросаВзаиморасчетыСКонтрагентамиПоДокументам(Запрос, ТекстыЗапроса);
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоРегистрам(ДокОбъект, Отказ, РежимПроведения) Экспорт
	
	// Движения по регистрам
	ОтразитьБрокерскиеСчета(ДокОбъект.ДополнительныеСвойства, ДокОбъект.Движения, Отказ);
	ОтразитьРасчетыПоФинансовымИнструментамФакт(ДокОбъект.ДополнительныеСвойства, ДокОбъект.Движения, Отказ);
	ОтразитьРасчетыСКонтрагентамиПоДокументам(ДокОбъект.ДополнительныеСвойства, ДокОбъект.Движения, Отказ);
	
КонецПроцедуры

Процедура ВыполнитьДополнительныеДействия(ДокОбъект, Отказ, РежимПроведения) Экспорт
	
	Если Отказ Тогда
		Возврат
	КонецЕсли;
	
	// Дополнительные обработчики после записи движений, если контроль пройден.
	СформироватьДвиженияПланФактНачисленияОпераций(ДокОбъект, Отказ, РежимПроведения);
	ОпределитьСрокЗакрытияЗадолженности(ДокОбъект);
	ВстраиваниеОПКПереопределяемый.ОбновитьПоказателиПроектовПриПроведенииДокумента(ДокОбъект);
	Если НЕ ЗначениеЗаполнено(ДокОбъект.ПравилоЗаполнения) Тогда
		ЗаполнитьОбработанныеОбъектыБД(ДокОбъект);
	КонецЕсли;
	// Напоминания.
	СоздатьНапоминаниеОНеобходимостиСозданияСВО(ДокОбъект);
	СоздатьНапоминаниеОНеобходимостиСозданияСПД(ДокОбъект);
	
КонецПроцедуры

Процедура ПередЗаписью(ДокОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) Тогда
		ТипДоговора = ТипЗнч(ДокОбъект.ДоговорКонтрагента);
		Если ТипДоговора <> Тип("СправочникСсылка.ДоговорыКонтрагентов")
			ИЛИ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.ДоговорКонтрагента, "ПорядокРасчетов") <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			// Объект расчетов заполняется договором, кроме договоров с контрагентами с расчетом по заказам/накладным
			ДокОбъект.ОбъектРасчетов = ДокОбъект.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(ДокОбъект, Отказ) Экспорт
	
	// Установим статусы заявок, упомянутых в табличной части БДДС.
	// Если режим записи = запись, ничего не делаем.
	РежимЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокОбъект.ДополнительныеСвойства, "РежимЗаписи", РежимЗаписиДокумента.Запись);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Если ДокОбъект.Отмена Тогда
			ПеревестиПозицииРасшифровкиВСостояниеОжидаетИсполнения(ДокОбъект);
		Иначе
			ПеревестиПозицииРасшифровкиВСостояниеИсполнено(ДокОбъект);
		КонецЕсли;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Если ДокОбъект.Отмена Тогда
			ПеревестиПозицииРасшифровкиВСостояниеИсполнено(ДокОбъект);
		Иначе
			ОтменитьСостояниеИсполнено(ДокОбъект);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - Дополняет массив недопустимых документов планирования. Используется в при формировании движения по рн.ЛимитыБюджетов
//
// Параметры:
//  НедопустимыеДокументыПланирования	 - Массив	 - Массив, с недопустимыми документами планирования
//
Процедура ДополнитьМассивНедопустимыхДокументовПланирования(НедопустимыеДокументыПланирования) Экспорт
	
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияАккредитив.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияБанковскаяГарантия.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияВалютноПроцентныйСвоп.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияВалютныйСвоп.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияВалютныйФорвард.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияДепозит.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияКоммерческийДоговор.ПустаяСсылка());
	НедопустимыеДокументыПланирования.Добавить(Документы.ВерсияСоглашенияКредит.ПустаяСсылка());
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Генерирует напоминание пользователю о необходимости создания
// документа Справка о Валютных Операциях
// Генерирует напоминание пользователю о необходимости создания
// документа Справка о Подтверждающих Документах
Процедура ОпределитьСрокЗакрытияЗадолженности(ДокОбъект)
		
	Если Не ЗначениеЗаполнено(ДокОбъект.ОбъектРасчетов) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПоставщику"));
	Если МассивТипов.Найти(ТипЗнч(ДокОбъект.ОбъектРасчетов)) = Неопределено Тогда
		Возврат; // Неизвестное значение. Не обслуживаем.
	КонецЕсли;
	
	СрокиЗакрытия = РегистрыСведений.СрокиЗакрытияЗадолженностиПоДокументам.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ВидДоговора = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.ДоговорКонтрагента, "ВидДоговораУХ");
	Если ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоДоговорСПокупателем(ВидДоговора) Тогда
		НаправлениеИсполнения = Перечисления.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности;
		КоэффициентЗнака = -1;
	ИначеЕсли ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоДоговорСПоставщиком(ВидДоговора) Тогда
		НаправлениеИсполнения = Перечисления.НаправлениеДвиженияВзаиморасчетов.УменьшениеЗадолженности;
		КоэффициентЗнака = 1;
	Иначе
		Возврат;
	КонецЕсли;
	
	ЭтоДокументИсполнения = (ДокОбъект.НаправлениеВзаиморасчетов = НаправлениеИсполнения);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСКонтрагентамиПоДокументамОстатки.СуммаОстаток,0) + ВЫБОР
	|		КОГДА ОтражениеФактическихДанныхБюджетирования.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА ОтражениеФактическихДанныхБюджетирования.СуммаДокумента
	|		ИНАЧЕ -ОтражениеФактическихДанныхБюджетирования.СуммаДокумента
	|	КОНЕЦ КАК СуммаЗадолженности
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования КАК ОтражениеФактическихДанныхБюджетирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиПоДокументам.Остатки(, ДокументРасчетов <> &Ссылка) КАК РасчетыСКонтрагентамиПоДокументамОстатки
	|		ПО РасчетыСКонтрагентамиПоДокументамОстатки.Организация = ОтражениеФактическихДанныхБюджетирования.Организация
	|			И РасчетыСКонтрагентамиПоДокументамОстатки.ДоговорКонтрагента = ОтражениеФактическихДанныхБюджетирования.ДоговорКонтрагента
	|			И РасчетыСКонтрагентамиПоДокументамОстатки.ОбъектРасчетов = ОтражениеФактическихДанныхБюджетирования.ОбъектРасчетов
	|ГДЕ ОтражениеФактическихДанныхБюджетирования.Ссылка = &Ссылка
	|";
	
	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		СуммаЗадолженности = Выборка.СуммаЗадолженности;
		Если СуммаЗадолженности = 0 Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	ДатаОтсчета = ?(ЗначениеЗаполнено(ДокОбъект.ДатаИсходногоДокумента), ДокОбъект.ДатаИсходногоДокумента, ДокОбъект.Дата);
	
	Если (СуммаЗадолженности * КоэффициентЗнака > 0) И НЕ ЭтоДокументИсполнения Тогда
		// Это аванс
		СтрокаСроки = СрокиЗакрытия.Добавить();
		СтрокаСроки.Дата = ДатаОтсчета;
		СтрокаСроки.Сумма = ДокОбъект.СуммаДокумента;
		
	ИначеЕсли ЭтоДокументИсполнения Тогда
		
		РаботаСДоговорамиКонтрагентовУХ.АктуализироватьГрафикРасчетовПоНакладной(
			ДатаОтсчета, ДокОбъект.СуммаДокумента, ДокОбъект.ИсходныйДокумент, ДокОбъект.ОбъектРасчетов);
			
		ОпорныйГрафик = РаботаСДоговорамиКонтрагентовУХВстраивание.ОпорныйГрафикПоНакладной(
			ДокОбъект.ОбъектРасчетов, ДокОбъект.СуммаДокумента, ДатаОтсчета); 
		Если ЗначениеЗаполнено(ОпорныйГрафик) Тогда
			Для каждого СтрокаГрафика Из ОпорныйГрафик Цикл				
				СтрокаСроки = СрокиЗакрытия.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСроки, СтрокаГрафика, "Дата, Сумма");
			КонецЦикла;
		КонецЕсли;	
				
	Иначе
		// Это постоплата.
		Возврат;
	КонецЕсли; 
	
	СрокиЗакрытия.ЗаполнитьЗначения(ДокОбъект.Ссылка, "Документ");
	
	НаборЗаписей = РегистрыСведений.СрокиЗакрытияЗадолженностиПоДокументам.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ДокОбъект.Ссылка);
	НаборЗаписей.Загрузить(СрокиЗакрытия);
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПолучитьСрокИСуммуИсполнения(ДокОбъект, УсловиеОплаты, ПроизводственныйКалендарь)
	
	Результат = Новый Структура("Дата,Сумма");
	
	ЭтапАванса = УсловиеОплаты.ЭтапыОплаты.Найти(Перечисления.ВариантыОплаты.Аванс, "ВариантОплаты");
	Если ЭтапАванса = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДатаОтсчета =?(ЗначениеЗаполнено(ДокОбъект.ДатаИсходногоДокумента), ДокОбъект.ДатаИсходногоДокумента , ДокОбъект.Дата);
	
	Результат.Дата = ДатаОтБазовойДатыСоСдвигом(ДатаОтсчета, ЭтапАванса.Срок, ЭтапАванса.ТипСрока, ПроизводственныйКалендарь);
	Если ТипЗнч(ДокОбъект.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Результат.Сумма = ДокОбъект.ОбъектРасчетов["Сумма"];
	ИначеЕсли ТипЗнч(ДокОбъект.ОбъектРасчетов) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Результат.Сумма = ДокОбъект.ОбъектРасчетов["СуммаДокумента"];
	Иначе
		Результат.Сумма = 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Генерирует напоминание пользователю о необходимости создания
// документа Справка о Валютных Операциях
Процедура СоздатьНапоминаниеОНеобходимостиСозданияСВО(ДокОбъект)
	
	// Проверка необходимости напоминания. Обрабатываем только поступления денежных средств
	Если Не ДокОбъект.ЭтоБДДС ИЛИ Не (ДокОбъект.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокОбъект.Контрагент) И ТипЗнч(ДокОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		СтранаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.Контрагент, "СтранаРегистрации");
		ЭтоРезидент = (СтранаРегистрации = Справочники.СтраныМира.Россия);
	Иначе
		ЭтоРезидент = Истина;
	КонецЕсли;
	
	Если ЭтоРезидент Тогда
		Возврат;
	КонецЕсли;
	
	ВидСобытияСозданиеСВО = ВидыСобытийОповещений_Напоминание_СоздатьСВО();
	СтруктураНастроек = ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияСозданиеСВО);
	Если СтруктураНастроек.Количество() = 0 Тогда
		// По данному документу не требуется оповещение о создании СВО.
		Возврат;
	КонецЕсли;
	
	// Дата документа + интервал создания СВО, заданный в константе.
	ДатаФормированияСВО = ДокОбъект.Дата + КонстантаСрокФормированияСВОПоПоступлениям()*24*60*60;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
	
	ПустыеДоговора = Новый Массив;
	ПустыеДоговора.Добавить(неопределено);
	Для каждого Тип Из Метаданные.ОпределяемыеТипы.Договор.Тип.Типы() Цикл
		ПустыеДоговора.Добавить(Новый (Тип));
	КонецЦикла;
	Запрос.УстановитьПараметр("ПустыеДоговора", ПустыеДоговора);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОФДДДС.ДоговорКонтрагента.Ответственный КАК Ответственный
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОФДДДС
	|ГДЕ
	|	ОФДДДС.Ссылка = &Ссылка
	|	И НЕ ОФДДДС.ДоговорКонтрагента В (&ПустыеДоговора)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтруктураНапоминание = СоздатьСтруктуруНапоминанияПоУмолчанию(
			СтруктураНастроек, Выборка.Ответственный, ДатаФормированияСВО, ДокОбъект.Ссылка);
		ДобавитьНапоминаниеПользователяСЗадачей(СтруктураНапоминание);
	КонецЦикла;
	
КонецПроцедуры

// Генерирует напоминание пользователю о необходимости создания
// документа Справка о Подтверждающих Документах
Процедура СоздатьНапоминаниеОНеобходимостиСозданияСПД(ДокОбъект)
	
	Если НЕ ЗначениеЗаполнено(ДокОбъект.ДоговорКонтрагента) Тогда
		Возврат;	// По данному документу не требуется оповещение о создании СВО.
	КонецЕсли;
	
	Если ДокОбъект.ЭтоБДДС Тогда
		Возврат;	// По данному документу не требуется оповещение о создании СВО.
	КонецЕсли;
	
	//
	ВидСобытияСозданиеСПД = ВидыСобытийОповещений_Напоминание_СоздатьСПД();
	СтруктураНастроек = ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияСозданиеСПД);
	Если СтруктураНастроек.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//
	ДоговораДляОповещения = ПолучитьСписокДоговоровДляОповещенияОбСПД(ДокОбъект.Ссылка);
	Если НЕ ЗначениеЗаполнено(ДоговораДляОповещения) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаФормированияСПД = КалендарныеГрафики.ДатаПоКалендарю(
		КалендарныеГрафики.ОсновнойПроизводственныйКалендарь(), 
		КонецМесяца(ДокОбъект.Дата), 
		КонстантаСрокФормированияСПД());
	
	Для Каждого Строка Из ДоговораДляОповещения Цикл
		
		СтруктураНапоминание = СоздатьСтруктуруНапоминанияПоУмолчанию(
			СтруктураНастроек, Строка.Ответственный, ДатаФормированияСПД, Строка.Договор);
		ДобавитьНапоминаниеПользователяСЗадачей(СтруктураНапоминание);
	КонецЦикла;
	
КонецПроцедуры

#Область ПеремещенныеИзВстраиваниеОПКПереопределяемый
	
// Процедура вызывается из обработки проведения ОФД. Пишет регистр, который отсутствуетв в ОПК
Процедура СформироватьДвиженияПланФактНачисленияОпераций(КонтекстДокумента, Отказ, РежимПроведения) Экспорт

	// УХ31, ERP.УХ
	ДокументыПланирования = Новый Массив;
	
	Для каждого СтрокаБюджета Из КонтекстДокумента.БюджетДвиженияДенежныхСредств Цикл	
		Если ЗначениеЗаполнено(СтрокаБюджета.ДокументПланирования) 
			И (ДокументыПланирования.Найти(СтрокаБюджета.ДокументПланирования) = Неопределено) Тогда
			ДокументыПланирования.Добавить(СтрокаБюджета.ДокументПланирования);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СтрокаБюджета Из КонтекстДокумента.БюджетДоходовИРасходов Цикл	
		Если ЗначениеЗаполнено(СтрокаБюджета.ДокументПланирования) 
			И (ДокументыПланирования.Найти(СтрокаБюджета.ДокументПланирования) = Неопределено) Тогда
			ДокументыПланирования.Добавить(СтрокаБюджета.ДокументПланирования);
		КонецЕсли;
	КонецЦикла;
	
	Если ДокументыПланирования.Количество() = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачислениеОперацийМСФО.Ссылка КАК ДокументПлан,
	|	МАКСИМУМ(НачислениеОперацийМСФО.Сумма) КАК СуммаПлан,
	|	ЕСТЬNULL(СУММА(Сопоставление.СуммаФакт), 0) КАК СуммаФакт,
	|	НачислениеОперацийМСФО.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.НачислениеОперацийМСФО КАК НачислениеОперацийМСФО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СопоставлениеПланФактОперацийНачисленияМСФО КАК Сопоставление
	|		ПО НачислениеОперацийМСФО.Ссылка = Сопоставление.ДокументПлан
	|			И (Сопоставление.Организация = &Организация)
	|			И (Сопоставление.ДокументФакт <> &ДокументОФД)
	|ГДЕ
	|	НачислениеОперацийМСФО.ДокументОснование В(&ДокументыПланирования)
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеОперацийМСФО.Ссылка,
	|	НачислениеОперацийМСФО.ДокументОснование
	|
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(НачислениеОперацийМСФО.Сумма) > ЕСТЬNULL(СУММА(Сопоставление.СуммаФакт), 0)");
	
	Запрос.УстановитьПараметр("ДокументыПланирования",	ДокументыПланирования);
	Запрос.УстановитьПараметр("ДокументОФД", 			КонтекстДокумента.Ссылка);
	Запрос.УстановитьПараметр("Организация", 			КонтекстДокумента.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	СуммаРаспределения = КонтекстДокумента.СуммаДокумента;
	
	СценарийМСФО = Константы.СценарийМСФО.Получить();
	ПутиУП = МСФОВызовСервераУХ.ПутиРеквизитовУП("ФункциональнаяВалюта");
	РеквизитыУП = МСФОВызовСервераУХ.ЗначенияПоОрганизацииУП( МСФОВызовСервераУХ.ЗначенияУП(ПутиУП, 
						КонтекстДокумента.Организация, КонтекстДокумента.Дата, СценарийМСФО));
    
	Если РеквизитыУП.ФункциональнаяВалюта <> КонтекстДокумента.ВалютаДокумента Тогда
		СуммаРаспределения = РаботаСКурсамиВалют.ПересчитатьВВалюту(
													СуммаРаспределения, 
													КонтекстДокумента.ВалютаДокумента, 
													РеквизитыУП.ФункциональнаяВалюта, 
													КонтекстДокумента.Дата);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
	
		мз = РегистрыСведений.СопоставлениеПланФактОперацийНачисленияМСФО.СоздатьМенеджерЗаписи();
		
		мз.Организация = КонтекстДокумента.Организация;
		мз.ДокументФакт = КонтекстДокумента.Ссылка;
		мз.ДокументПлан = Выборка.ДокументПлан;
		
		мз.Прочитать();
		
		мз.Организация = КонтекстДокумента.Организация;
		мз.ДокументФакт = КонтекстДокумента.Ссылка;
		мз.ДокументПлан = Выборка.ДокументПлан;		
		мз.СуммаФакт = Мин(Выборка.СуммаПлан - Выборка.СуммаФакт, СуммаРаспределения);		
		
		СуммаРаспределения = СуммаРаспределения - мз.СуммаФакт;
		
		Попытка
			мз.Записать(Истина);		
		Исключение
			ШаблонОшибки = НСтр("ru = 'Не удалось создать сопоставление с документом плана <%1> по заявке <%2>'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонОшибки, Выборка.ДокументПлан, Выборка.ДокументОснование), Отказ);
		КонецПопытки;
				
		Если СуммаРаспределения <= 0 Тогда
			Прервать; // ОФД распределено
		КонецЕсли;		
	
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу договоров для оповещения об СПД
Функция ПолучитьСписокДоговоровДляОповещенияОбСПД(ОФДСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ОФДСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Запрос1.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТ_ДоговораОФД
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств
	|	ГДЕ
	|		ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов.ДоговорКонтрагента
	|	ИЗ
	|		Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДоходовИРасходов КАК ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов
	|	ГДЕ
	|		ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов.ДоговорКонтрагента
	|	ИЗ
	|		Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияРесурсов КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов
	|	ГДЕ
	|		ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОтражениеФактическихДанныхБюджетирования.ДоговорКонтрагента
	|	ИЗ
	|		Документ.ОтражениеФактическихДанныхБюджетирования КАК ОтражениеФактическихДанныхБюджетирования
	|	ГДЕ
	|		ОтражениеФактическихДанныхБюджетирования.Ссылка = &Ссылка) КАК Запрос1
	|ГДЕ
	|	Запрос1.ДоговорКонтрагента <> НЕОПРЕДЕЛЕНО
	|
	|СГРУППИРОВАТЬ ПО
	|	Запрос1.ДоговорКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДоговораОФД.ДоговорКонтрагента КАК Договор,
	|	ВЫБОР
	|		КОГДА ВТ_ДоговораОФД.ДоговорКонтрагента ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ВЫРАЗИТЬ(ВТ_ДоговораОФД.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов).Ответственный
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Ответственный
	|ИЗ
	|	ВТ_ДоговораОФД КАК ВТ_ДоговораОФД
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ВТ_ДоговораОФД.ДоговорКонтрагента ССЫЛКА Справочник.ДоговорыКонтрагентов
	|				ТОГДА ВТ_ДоговораОФД.ДоговорКонтрагента.ТребуетсяПостановкаНаУчетВалютногоКонтроля
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат неопределено;
	КонецЕсли;
	Возврат Результат.Выгрузить();
	
КонецФункции

Функция КонстантаСрокФормированияСПД() Экспорт
	Возврат Константы.СрокФормированияСПД.Получить();
КонецФункции

Функция СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроекВход, ПользовательВход, ВремяСобытияВход, ИсточникСобытияВход) Экспорт
	Возврат МодульУправленияОповещениямиУХ.СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроекВход, ПользовательВход, ВремяСобытияВход, ИсточникСобытияВход);
КонецФункции

Функция ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияВход, ВидОбъектаВход = Неопределено) Экспорт
	Возврат МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияВход);
КонецФункции

Функция ВидыСобытийОповещений_Напоминание_СоздатьСПД() Экспорт
	Возврат Справочники.ВидыСобытийОповещений.Напоминание_СоздатьСПД;
КонецФункции

Функция ВидыСобытийОповещений_Напоминание_СоздатьСВО() Экспорт
	Возврат Справочники.ВидыСобытийОповещений.Напоминание_СоздатьСВО;
КонецФункции

Процедура ДобавитьНапоминаниеПользователяСЗадачей(СтруктураВход) Экспорт
	МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяСЗадачей(СтруктураВход);
КонецПроцедуры

Функция КонстантаСрокФормированияСВОПоПоступлениям() Экспорт
	Возврат Константы.СрокФормированияСВОПоПоступлениям.Получить();
КонецФункции

Функция ПолучитьПроизводственныеКалендари(ДоговорИлиВерсияСоглашения) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ПолучитьПроизводственныеКалендари(ДоговорИлиВерсияСоглашения);
КонецФункции

Функция ОперацииГрафика(ОписаниеГрафика, Объект, Знач ВидДоговораУХ = Неопределено) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ОперацииГрафика(ОписаниеГрафика, Объект, ВидДоговораУХ);
КонецФункции

Функция ОписаниеОперации(Операция, ОперацииГрафика) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ОписаниеОперации(Операция, ОперацииГрафика);
КонецФункции

Функция ДобавитьПозициюВГрафик(График, Сумма, Дата, ИдентификаторПозицииГрафика = Неопределено, ОписаниеОперации = Неопределено) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(График, Сумма, Дата, ИдентификаторПозицииГрафика, ОписаниеОперации);
КонецФункции

Функция ДатаОтБазовойДатыСоСдвигом(БазоваяДата, КоличествоДней, Знач ТипСрока, ПроизводственныйКалендарь = Неопределено) Экспорт
	Возврат РасчетГрафиковОперацийУХ.ДатаОтБазовойДатыСоСдвигом(БазоваяДата, КоличествоДней, ТипСрока, ПроизводственныйКалендарь);
КонецФункции

Функция РежимАктуализацииГрафика(ВерсияСоглашения) Экспорт
	Возврат РаботаСДоговорамиКонтрагентовУХ.РежимАктуализацииГрафика(ВерсияСоглашения);
КонецФункции

Функция ПолучитьОпорныйГрафикПоРасчетномуДокументу(Знач ДокументОснование, Знач УсловиеОплаты, Знач ПроизводственныйКалендарь = Неопределено, ТолькоПостоплата = Истина) Экспорт 
	Возврат РасчетГрафиковОперацийУХ.ПолучитьОпорныйГрафикПоРасчетномуДокументу(ДокументОснование, УсловиеОплаты, ПроизводственныйКалендарь, ТолькоПостоплата);
КонецФункции

Функция ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ОбъектРасчетов) Экспорт
	Возврат РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ОбъектРасчетов);
КонецФункции

#КонецОбласти 

#Область ПриЗаписи

Процедура ПеревестиПозицииРасшифровкиВСостояниеОжидаетИсполнения(ДокОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования КАК ДокументПланирования
	|ПОМЕСТИТЬ ВТ_ПозицииКИзменению
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств
	|ГДЕ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка = &Ссылка
	|			И (ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|				ИЛИ ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПозицииКИзменению.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ПозицииКИзменению.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	ВТ_ПозицииКИзменению КАК ВТ_ПозицииКИзменению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО ВТ_ПозицииКИзменению.ДокументПланирования = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И ВТ_ПозицииКИзменению.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПлатежныеПозиции.УстановитьСостояниеИсполненияДокумента(
			Выборка.ДокументПланирования, Выборка.ИдентификаторПозиции, Перечисления.СостоянияИсполненияЗаявки.НеОбработана,,, ДокОбъект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеревестиПозицииРасшифровкиВСостояниеИсполнено(ДокОбъект)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования КАК ДокументПланирования
	|ПОМЕСТИТЬ ВТ_ПозицииКИзменению
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств
	|ГДЕ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка = &Ссылка
	|			И (ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|				ИЛИ ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ПозицииКИзменению.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ПозицииКИзменению.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	ВТ_ПозицииКИзменению КАК ВТ_ПозицииКИзменению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО ВТ_ПозицииКИзменению.ДокументПланирования = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И ВТ_ПозицииКИзменению.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Исполнена)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПлатежныеПозиции.УстановитьСостояниеИсполненияДокумента(
			Выборка.ДокументПланирования, Выборка.ИдентификаторПозиции, Перечисления.СостоянияИсполненияЗаявки.Исполнена,,, ДокОбъект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьСостояниеИсполнено(ДокОбъект)
	
	// Откатим позиции к состоянию "На исполнении"
	Запрос = Новый Запрос;
	Запрос.Текст = ДенежныеСредстваВстраиваниеУХ.ПолучитьТекстЗапроса_ОтменитьСостояниеНаИсполненииОФД();
	
	Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ПлатежноеПоручение) Тогда
			НовоеСостояниеЗаявки = Перечисления.СостоянияИсполненияЗаявки.НаИсполнении;
		ИначеЕсли ЗначениеЗаполнено(Выборка.РеестрПлатежей) Тогда
			НовоеСостояниеЗаявки = Перечисления.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей;
		Иначе
			НовоеСостояниеЗаявки = Перечисления.СостоянияИсполненияЗаявки.НеОбработана
		КонецЕсли;
		
		ПлатежныеПозиции.УстановитьСостояниеИсполненияДокумента(Выборка.ДокументПланирования, 
			Выборка.ИдентификаторПозиции, НовоеСостояниеЗаявки,,, ДокОбъект.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ТекстыЗапросов

Процедура ТекстЗапросаБрокерскиеСчета(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "БрокерскиеСчета";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&ДоговорКонтрагента КАК ДоговорБрокерскогоСчета,
	|	&СуммаДокумента КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения
	|ГДЕ
	|	&ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.РасчетыСБрокером)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаРасчетыСКонтрагентамиФакт(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "РасчетыСКонтрагентамиФакт";
	
	Если НЕ ПроведениеСерверОПК.ЕстьТаблицаЗапроса("ТаблицаВзаиморасчеты", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаВзаиморасчеты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	СУММА(ТаблицаВзаиморасчеты.Сумма) КАК Сумма,
	|	ТаблицаВзаиморасчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаВзаиморасчеты.ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ТаблицаВзаиморасчеты.РамочныйДоговор
	|		ИНАЧЕ ТаблицаВзаиморасчеты.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ТаблицаВзаиморасчеты.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ТаблицаВзаиморасчеты.ВалютаВзаиморасчетов КАК Валюта,
	|	ВЫБОР
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УменьшениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА &НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	ТаблицаВзаиморасчеты.СтатьяБюджета КАК СтатьяБюджета,
	|	&ПриходРасход КАК ПриходРасход,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент
	|ИЗ
	|	ТаблицаВзаиморасчеты КАК ТаблицаВзаиморасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|		ПО ТаблицаВзаиморасчеты.СтатьяБюджета = НастройкиФинансовыхИнструментов.СтатьяБюджета
	|			И (&ВидФинансовогоИнструмента = НастройкиФинансовыхИнструментов.Операция.ВидФинансовогоИнструмента)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВзаиморасчеты.ОбъектРасчетов,
	|	ТаблицаВзаиморасчеты.ЭлементСтруктурыЗадолженности,
	|	ТаблицаВзаиморасчеты.ВалютаВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаВзаиморасчеты.ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ТаблицаВзаиморасчеты.РамочныйДоговор
	|		ИНАЧЕ ТаблицаВзаиморасчеты.ДоговорКонтрагента
	|	КОНЕЦ,
	|	ТаблицаВзаиморасчеты.СтатьяБюджета,
	|	ВЫБОР
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УменьшениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА &НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаВременнаяТаблицаВзаиморасчеты(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ТаблицаВзаиморасчеты";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОФДВзаиморасчеты.СуммаВзаиморасчетов КАК Сумма,
	|	ОФДВзаиморасчеты.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ОФДВзаиморасчеты.НаправлениеВзаиморасчетов КАК НаправлениеВзаиморасчетов,
	|	ОФДВзаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОФДВзаиморасчеты.ДоговорКонтрагента.ВидСоглашения КАК ВидСоглашения,
	|	ОФДВзаиморасчеты.ДоговорКонтрагента.БазовыйДоговор КАК РамочныйДоговор,
	|	ОФДВзаиморасчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ОФДВзаиморасчеты.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ОФДВзаиморасчеты.СтатьяБюджета КАК СтатьяБюджета
	|ПОМЕСТИТЬ ТаблицаВзаиморасчеты
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.Взаиморасчеты КАК ОФДВзаиморасчеты
	|ГДЕ
	|	ОФДВзаиморасчеты.Ссылка = &Ссылка
	|	И &ОтражатьВоВзаиморасчетах";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаОткрытаяЗадолженность(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ОткрытаяЗадолженность";
	
	Если НЕ ПроведениеСерверОПК.ЕстьТаблицаЗапроса("ТаблицаВзаиморасчеты", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаВзаиморасчеты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиПоДокументамОстатки.СуммаОстаток > 0
	|			ТОГДА РасчетыСКонтрагентамиПоДокументамОстатки.СуммаОстаток
	|		ИНАЧЕ -РасчетыСКонтрагентамиПоДокументамОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаОстаток,
	|	РасчетыСКонтрагентамиПоДокументамОстатки.ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиПоДокументамОстатки.ОбъектРасчетов,
	|	РасчетыСКонтрагентамиПоДокументамОстатки.ДокументРасчетов,
	|	РасчетыСКонтрагентамиПоДокументамОстатки.ДокументРасчетов.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиПоДокументам.Остатки(
	|			&Период,
	|			(ДоговорКонтрагента, ОбъектРасчетов) В
	|					(ВЫБРАТЬ
	|						ТаблицаВзаиморасчеты.ДоговорКонтрагента,
	|						ТаблицаВзаиморасчеты.ОбъектРасчетов
	|					ИЗ
	|						ТаблицаВзаиморасчеты)
	|				И ДокументРасчетов <> &Ссылка
	|				И Организация = &Организация) КАК РасчетыСКонтрагентамиПоДокументамОстатки
	|ГДЕ
	|	РасчетыСКонтрагентамиПоДокументамОстатки.СуммаОстаток * &ЗнакРасчетов > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";
	Запрос.УстановитьПараметр("ЗнакРасчетов", ?(Запрос.Параметры.НаправлениеВзаиморасчетов = Перечисления.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности, -1, 1));
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаВзаиморасчетыСКонтрагентамиПоДокументам(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВзаиморасчетыСКонтрагентамиПоДокументам";
	
	Если НЕ ПроведениеСерверОПК.ЕстьТаблицаЗапроса("ТаблицаВзаиморасчеты", ТекстыЗапроса) Тогда
		ТекстЗапросаВременнаяТаблицаВзаиморасчеты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов КАК НаправлениеВзаиморасчетов,
	|	ТаблицаВзаиморасчеты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТаблицаВзаиморасчеты.ОбъектРасчетов КАК ОбъектРасчетов,
	|	&Ссылка КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА 1
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УменьшениеЗадолженности)
	|			ТОГДА -1
	|		КОГДА &НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА 1
	|		КОГДА &НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УменьшениеЗадолженности)
	|			ТОГДА -1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЗнакРасчетов,
	|	СУММА(ТаблицаВзаиморасчеты.Сумма) КАК Сумма
	|ИЗ
	|	ТаблицаВзаиморасчеты КАК ТаблицаВзаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВзаиморасчеты.ДоговорКонтрагента,
	|	ТаблицаВзаиморасчеты.ОбъектРасчетов,
	|	ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов,
	|	ВЫБОР
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА 1
	|		КОГДА ТаблицаВзаиморасчеты.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА -1
	|		КОГДА &НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА 1
	|		КОГДА &НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА -1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

#КонецОбласти 

#Область ОтражениеДвижений

Процедура ОтразитьБрокерскиеСчета(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаБрокерскиеСчета;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.БрокерскиеСчета.Записывать = Истина;
	Движения.БрокерскиеСчета.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьРасчетыПоФинансовымИнструментамФакт(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКонтрагентамиФакт;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.РасчетыСКонтрагентамиФакт.Записывать = Истина;
	Движения.РасчетыСКонтрагентамиФакт.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьРасчетыСКонтрагентамиПоДокументам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВзаимоРасчетыСКонтрагентамиПоДокументам;
	ТаблицаЗадолженность = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОткрытаяЗадолженность;
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗнакРасчетов = ?(ДополнительныеСвойства.ПараметрыПроведения.Реквизиты.НаправлениеВзаиморасчетов = Перечисления.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности, 1, -1);
	
	ТаблицаЗадолженность.Индексы.Добавить("ДоговорКонтрагента,ОбъектРасчетов");
	
	СтруктураПоиска = Новый Структура("ДоговорКонтрагента,ОбъектРасчетов");
	Для Каждого ТекСтрокаВзаиморасчетов Из Таблица Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрокаВзаиморасчетов.ОбъектРасчетов) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекСтрокаВзаиморасчетов);
		ОткрытыеПозиции = ТаблицаЗадолженность.НайтиСтроки(СтруктураПоиска);
		СуммаКЗакрытию = ТекСтрокаВзаиморасчетов.Сумма;
		Для Каждого ТекОткрытаяПозиция Из ОткрытыеПозиции Цикл
			Движение = Движения.РасчетыСКонтрагентамиПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаВзаиморасчетов);
			Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
			Движение.ДокументРасчетов = ТекОткрытаяПозиция.ДокументРасчетов;
			СуммаСписано = Мин(ТекОткрытаяПозиция.СуммаОстаток, СуммаКЗакрытию);
			Движение.Сумма = -ЗнакРасчетов * СуммаСписано;
			
			СуммаКЗакрытию = СуммаКЗакрытию - СуммаСписано;
			
			Если СуммаКЗакрытию = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СуммаКЗакрытию > 0 Тогда
			Движение = Движения.РасчетыСКонтрагентамиПоДокументам.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ТекСтрокаВзаиморасчетов);
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Сумма = ЗнакРасчетов *СуммаКЗакрытию;
		КонецЕсли;
	КонецЦикла;
	
	Движения.РасчетыСКонтрагентамиПоДокументам.Записывать = Истина;
	
КонецПроцедуры

#КонецОбласти 

Процедура ЗаполнитьОбработанныеОбъектыБД(ДокОбъект)
	
	Если Не ЗначениеЗаполнено(ДокОбъект.ИсходныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеОбъекта = Новый Структура;
	ДанныеОбъекта.Вставить("ОбработанныйОбъектСсылка",ДокОбъект.Ссылка);
	ДанныеОбъекта.Вставить("ИсходныйДокумент",	ДокОбъект.ИсходныйДокумент);
	ДанныеОбъекта.Вставить("ДатаИсходногоДокумента",ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокОбъект.ИсходныйДокумент, "Дата"));
	ДанныеОбъекта.Вставить("ИспользуемаяИБ",	ДокОбъект.ИспользуемаяИБ);
	ДанныеОбъекта.Вставить("ДокументБД",		ДокОбъект.ДокументБД);
	ДанныеОбъекта.Вставить("Организация",		ДокОбъект.Организация);
	ДанныеОбъекта.Вставить("ПравилоЗаполнения", ДокОбъект.ПравилоЗаполнения);
	ДанныеОбъекта.Вставить("Сценарий",			ДокОбъект.Сценарий);
	ДанныеОбъекта.Вставить("ОбластьГенерации",	Перечисления.ОбластиГенерацииОбъектов.ТекущаяИБ);
	
	Если ЗначениеЗаполнено(ДокОбъект.ПериодБДДС) Тогда
		ДанныеОбъекта.Вставить("ПериодОтчета", ДокОбъект.ПериодБДДС);
	ИначеЕсли ЗначениеЗаполнено(ДокОбъект.ПериодБДР) Тогда
		ДанныеОбъекта.Вставить("ПериодОтчета", ДокОбъект.ПериодБДР);
	ИначеЕсли ЗначениеЗаполнено(ДокОбъект.ПериодРесурсы) Тогда
		ДанныеОбъекта.Вставить("ПериодОтчета", ДокОбъект.ПериодРесурсы);
	Иначе
		ДанныеОбъекта.Вставить("ПериодОтчета", неопределено);
	КонецЕсли;
	
	ДвиженияБюджетированиеУХ.ЗавершитьОбработкуОбъектаБД(ДанныеОбъекта);
	
КонецПроцедуры

#КонецОбласти

