
// Обновление информационной базы конфигурации "Управление холдингом".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя	 = Метаданные.Имя;
	Описание.Версия	 = Метаданные.Версия;
	//Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = ИнтернетПоддержкаПользователейУХ.ИмяПрограммыДляИдентификацииВСервисахИнтернетПоддержки();
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики=Неопределено) Экспорт
	
	#Область ОбработчикиОбновления_ВсеВерсии
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ВидыОперацийУХ.ЗаполнитьПредопределенныеВидыОперацийУХ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "РегистрыСведений.ХранилищаПараметрическойНастройкиРасширенный.ОчиститьЗаписи";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьКодыПВХСубконтоКорп";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКатегориюОповещений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Обработки.УстановкаСоответствияРегистров.ЗаполнитьИсточникиДляФинансовыхРегистров";
	Обработчик.НачальноеЗаполнение = Истина;

	#КонецОбласти
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ЗадатьНастройкиДокументаПланЗакупок";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.10";
	Обработчик.Процедура = "Справочники.ПараметрыУчетаФИРСБУ.ЗаполнитьПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ЗаполнитьПредопределенныеСтатьиДДС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.0.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ДобавитьПараметрИнициаторПроцессаВШаблоны";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьКонстантыЗаявокНаРасходованиеДенежныхСредств";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьВидыСубконтоКорп";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.27";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьШаблоныТрансформационныхКорректировок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ЗадатьНастройкиДокументаРаспоряжениеНаПеремещениеДенежныхСредств";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.28";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ЗадатьНастройкиДокументаРаспоряжениеНаПеремещениеДенежныхСредств";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьПредопределенныеПрофили";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.СброситьКонстантыКонтроляЛимитов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.12";
	Обработчик.Процедура = "ОбработчикиОбновленияУХОППереопределяемый.ОбновитьКлючиКонтроляБюджетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.14";
	Обработчик.Процедура = "ОбработчикиОбновленияУХОППереопределяемый.ИспользованиеРезервовЗакупокВОФДНаСервере";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.15";
	Обработчик.Процедура = "ОбработчикиОбновленияУХОППереопределяемый.ОбновитьКлючиКонтроляВзаиморасчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.15";
	Обработчик.Процедура = "ОбработчикиОбновленияУХОППереопределяемый.ОбновитьКлючиКонтроляВзаиморасчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьЗапросыИсточниковКорреспонденция";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьПоляСоответствияДляОбмена";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПеренестиДанныеШаблоновОповещений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПеренестиШаблонОповещенийНастройкиОповещений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПеренестиШаблонОповещенийСобытияОповещений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПеренестиШаблонОповещенийШаблоныПроцессов";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.23";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьСуммуКонтрактаСПЗ";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.2.31";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьГрафикИсполненияДоговора";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.34";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.3";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьНовыеРеквизитыРегистраРазмещениеЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.5";
	Обработчик.Процедура = "ВстраиваниеУХ.ОбновитьСтавкуНДС";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьРегламентыОтчетности";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ЗаполнитьРежимыСценариев";
	Обработчик.НачальноеЗаполнение = Истина;

		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьНдсВРегистреПланПоставокПоДоговорам";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.30";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьСтавкиНдсЛота";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьСтавкиНдсПредложенияПоставщика";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьСтавкиНдсПротоколВыбора";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.33";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьСтавкиНдсСтрокиПланаЗакупок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.34";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьСтавкиНдсПредложенияПоставщикаЭТП";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.35";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьСтавкиНдсТоварныхКатегорий";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.36";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьНдсВРегистреПотребностиВНоменклатуре";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.37";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьНдсВРегистреПоставщикиПоЛотам";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.39";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьСпособАдресацииЭтапов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.51";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьРеквизитДоговорКонтрагентаВДокументахПланированияДДС";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить(); //
	Обработчик.Версия = "3.1.1.54";
	Обработчик.Процедура = "РегистрыСведений.РазмещениеЗаявок.ЗаполнитьПараметрыКурсаВРазмещенииЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.55";
	Обработчик.Процедура = "Документы.ВводСведенийОФинансовыхИнструментах.ОбновлениеВНА";
	Обработчик.РежимВыполнения = "Отложенно";
			
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.56";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьВалютуДокументаВОФД";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.57";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ОбновитьВидыОперацийРасчетыСКонтрагентамиГрафики";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.58";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьСчетаРасчетыСКонтрагентамиГрафики";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.59";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.СоздатьТипыОтчетностиОДоговорахЕИСНаСервере";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.59";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ОбновитьРегистрНастроекФинансовыхИнструментов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.61";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПриоритетПлатежаВПлатежныхПозициях";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.75";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ДобавитьРолиПрофиляМенеджераЗакупок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьВидЛотовойЗакупки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьТекстыЗапросовИсточниковДанных";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.4";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьСуммуДокументаУпрЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.7";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьНастройкиСогласования_ДоговорыАренды";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПерезаполнитьРеквизитЦФОСтруктураПредприятия";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ЗаполнитьРеквизитыПрофильВНА";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьДанныеРегистраНастроекОбработкиОтчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.10";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьДоговорКредитаАрендыВПлатежныхПозициях";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.14";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьРасширенныйАлгоритмПересчетаПоказателей";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.16";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьЭлементСтруктурыЗадолженностиВОжидаемомПоступленииДС";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.16";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьЭлементСтруктурыЗадолженностиВДокументах";
	Обработчик.НачальноеЗаполнение = Ложь;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.16";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьЭлементСтруктурыЗадолженностиВДвиженияхБюджетированияПоВерсиямСоглашений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.16";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьЭлементСтруктурыЗадолженностиВДвиженияхБюджетированияПоЗаявкам";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Процедура = "РегистрыСведений.СтатусыАкцептаПереводныхВекселей.ЗаполнитьРеквизитОрганизация";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗадатьНастройкиДокументаЗаявкаНаКорректировкуЛимитов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗадатьНастройкиДокументаКорректировкаЛимитов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьКонстантуРежимАктуализацииГрафикаПриИзмененииПервичныхДокументов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьРежимИспользованияГрафикаВДокументах";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.3";
	Обработчик.Процедура = "РегистрыСведений.СостоянияИсполненияДокументовПланирования.ЗаполнитьИзмерениеДокументПланирования";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "РегистрыСведений.СостоянияИсполненияДокументовПланирования.ОчиститьИзмерениеУдалитьДокументПланирования";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ПерезаполнитьКовенантовВВерсииСоглашенияКредит";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьТабличныеЧастиГрафикРасчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "Документы.ОтражениеФактическихДанныхБюджетирования.ЗаполнитьВзаиморасчеты";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "РегистрыСведений.ВерсииРасчетов.ЗаполнитьВерсиюРасчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ИсправитьИерархиюАдресации";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.6";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПараметрыОперацийВерсийСоглашений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ИсправитьИерархиюАдресации";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.7";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПараметрыОперацийДокументовЦБ";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПроцентОплатыСрокОтсрочкиВМатрицеРекомендуемыхУсловий";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПроцентАвансаСрокОтсрочкиУстановкаКлассовКонтрагентов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.СоздатьСоглашенияДляДоговоров";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.8";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.УстановитьКонстантыИспользоватьДоговоры";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновлениеОрганизатораЗакупкиПротоколаВыбора";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.10";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.УстановитьКонстантуИспользоватьЗаполнениеРаздела7ДекларацииПоНДС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьВалютуУчетаЗакупок";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьАккредитациюПоставщиков";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.10";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПараметрыОперацийДокументовАренды";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.3.15";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнениеКонстантИспользоватьСоглашения";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.ЗаполнитьПредопределенныеШаблоныЗакупокМСП";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "3.1.4.20";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.ЗаполнитьПредопределенныйШаблонЗакупкаУЕдинственногоПоставщика";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить(); 
	Обработчик.Версия = "3.1.4.21";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ИсключитьИсточникДанныхКалендаряРезервыНеутвержденные";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ИсправитьЛокализациюСистемныхЗначений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.24";
	Обработчик.Процедура = "Обработки.АналитическийБланкСводнаяТаблица.СконвертироватьБланки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.24";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПодготовитьНастройкиТрансляцииПериодичность";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.24";
	Обработчик.Процедура = "Справочники.ИсточникиДанныхДляРасчетов.ЗаполнитьПредопределенныеРасчетныеКритерииДляОценкиПредложений";
	Обработчик.НачальноеЗаполнение = Ложь;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.26";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьВариантПриемкиВСоглашениях";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПеренестиШаблоныОповещений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновитьИзмерениеПользователи";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПерезаписатьСправочникиБДДляСогласования";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.10";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьНастройкиСогласованияЗаявкаНаКомандировку";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.10";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьВидДоговораУХРасчетыСКонтрагентамиГрафики";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.10";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьВидДоговораУХРасчетыСКонтрагентамиФакт";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновлениеРегистровПоВалюте";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.УстановитьТипыАналитикВИсточникахДанных";
	Обработчик.НачальноеЗаполнение = Ложь;
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение типов аналитик в отборах источников данных'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.55";
	Обработчик.Процедура = "Обработки.АналитическийБланкСводнаяТаблица.ПерезаписатьСТБланки";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.57";
	Обработчик.Процедура = "Документы.УчетнаяПолитикаМСФО.Обновление_ПерейтиНаУП";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.58";
	Обработчик.Процедура = "РегистрыСведений.ИсключенияУчетнойПолитики.ЗаполнитьПланыСчетовМСФО";
	Обработчик.НачальноеЗаполнение = Ложь; 
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.59";
	Обработчик.Процедура = "ПланыСчетов.МСФО.Обновление_ЗаполнитьПланСчетов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.63";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ПерезаписатьСправочникиБДДляСогласования";
	Обработчик.НачальноеЗаполнение = Истина;
	
КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы(Обработчики=Неопределено) Экспорт
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	//Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда 
	//	
	//	РежимОбновленияДанных = "ОбновлениеВерсии";
	//	СтандартнаяОбработка = Ложь;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеПредприятием";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЕХ.ОбновлениеERPДоЕХ";
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

// Возвращает Истина если запуск информационной базы
// выполняется первый раз, иначе возвращает Ложь
//
Функция ПервыйЗапуск() Экспорт
	
КонецФункции

Процедура ЗадатьНастройкиДокументаПланЗакупок() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("ПланЗакупок", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаПланЗакупок()

Процедура ОбновлениеERPДоЕХ() Экспорт
	
	ОбновлениеИнформационнойБазыУХ.ОбновитьИнформациюПоМетаданным();
	ОбновлениеИнформационнойБазыУХ.ЗаполнитьКатегориюОповещений();
	ПланыВидовХарактеристик.ОперацииФинансовыхИнструментов.ОбновитьПредопределенные();
	Справочники.ВидыДоговоровКонтрагентовУХ.ЗаполнитьПредопределенныеВидыДоговоровКонтрагентовУХ();
	Справочники.ВидыКотировокФинансовыхИнструментов.ЗаполнитьПредопределенныеДанные();
	Справочники.ВидыОперацийУХ.ЗаполнитьПредопределенныеВидыОперацийУХ();
	
	ОбновлениеИнформационнойБазыУХ.ПервыйЗапуск();
	ОбновлениеИнформационнойБазыУХ.УстановитьКоэффициентыЛиквидности();
	ЗаполнитьПредопределенныеСтатьиДДС();
	СформироватьВерсииСоглашений();
	Справочники.КредитныеРейтинги.ЗаполнитьШкалыРейтингов();
	
	ОбновитьРеквизитыОрганизаций();
	
	УстановитьЗначениеКонстантПриПереходеСERP();
	
КонецПроцедуры

Процедура ЗаполнитьПредопределенныеСтатьиДДС() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК Ссылка,
		|	СтатьиДвиженияДенежныхСредств.Предопределенный КАК Предопределенный
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|ГДЕ
		|	СтатьиДвиженияДенежныхСредств.Предопределенный
		|	И НЕ СтатьиДвиженияДенежныхСредств.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекСтатья = ВыборкаДетальныеЗаписи.Ссылка;
		Справочники.СтатьиДвиженияДенежныхСредств.ЗаполнитьПредопределенныеСтатьиДвиженияДенежныхСредств(ТекСтатья);
	КонецЦикла;
КонецПроцедуры		// ЗаполнитьПредопределенныеСтатьиДДС()

Процедура СформироватьВерсииСоглашений() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ТипДоговора КАК ТипДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВерсияСоглашения = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКредитовИДепозитов.Ссылка,
	|	ДоговорыКредитовИДепозитов.ХарактерДоговора
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|ГДЕ
	|	ДоговорыКредитовИДепозитов.ВерсияСоглашения = НЕОПРЕДЕЛЕНО";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ВидДоговораУХ = УправлениеДоговорамиУХКлиентСерверПовтИсп.ВидДоговораУХ(Выборка.ТипДоговора);
		Если НЕ ЗначениеЗаполнено(ВидДоговораУХ) Тогда
			Продолжить;
		КонецЕсли;
		
		ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДоговорОбъект.ВидДоговораУХ = ВидДоговораУХ;
		ДоговорОбъект.ВидФинансовогоИнструмента = 
			УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьВидФинансовогоИнструментаПоВидуДоговора(ВидДоговораУХ);
		РаботаСДоговорамиКонтрагентовУХ.СоздатьВерсиюСоглашенияПоДоговору(ДоговорОбъект);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДоговорОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрИнициаторПроцессаВШаблоны() Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныУниверсальныхПроцессовПараметрыПроцесса.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ШаблоныСПараметром
		|ИЗ
		|	Справочник.ШаблоныУниверсальныхПроцессов.ПараметрыПроцесса КАК ШаблоныУниверсальныхПроцессовПараметрыПроцесса
		|ГДЕ
		|	ШаблоныУниверсальныхПроцессовПараметрыПроцесса.КодПараметра = &КодПараметра
		|
		|СГРУППИРОВАТЬ ПО
		|	ШаблоныУниверсальныхПроцессовПараметрыПроцесса.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныУниверсальныхПроцессов.Ссылка КАК ШаблонИБ,
		|	ВТ_ШаблоныСПараметром.Ссылка КАК ШаблонСПараметром
		|ПОМЕСТИТЬ ВТ_Соединение
		|ИЗ
		|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ШаблоныСПараметром КАК ВТ_ШаблоныСПараметром
		|		ПО (ВТ_ШаблоныСПараметром.Ссылка = ШаблоныУниверсальныхПроцессов.Ссылка)
		|ГДЕ
		|	ШаблоныУниверсальныхПроцессов.НазначениеПроцесса = &НазначениеПроцесса
		|	И ВЫБОР
		|			КОГДА ВТ_ШаблоныСПараметром.Ссылка ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_Соединение.ШаблонИБ КАК ШаблонИБ
		|ИЗ
		|	ВТ_Соединение КАК ВТ_Соединение";
	Запрос.УстановитьПараметр("КодПараметра", "ИнициаторПроцесса");
	Запрос.УстановитьПараметр("НазначениеПроцесса", Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекШаблонПроцесса = ВыборкаДетальныеЗаписи.ШаблонИБ;
		ОбъектШаблон = ТекШаблонПроцесса.ПолучитьОбъект();
		ПараметрыПроцесса = ОбъектШаблон.ПараметрыПроцесса;
		КлючевойПараметр = ПараметрыПроцесса.Найти("ИнициаторПроцесса","КодПараметра");
		ТипСправочникПользователи = Справочники.СправочникиБД.НайтиПоНаименованию("Пользователи", , , Справочники.ТипыБазДанных.ТекущаяИБ);
		Если КлючевойПараметр = Неопределено Тогда
			НП = ПараметрыПроцесса.Добавить();
			НП.ИмяПараметра = "Инициатор процесса";
			НП.КодПараметра = "ИнициаторПроцесса";
			НП.Предопределенный = Истина;
			НП.Ключевой = Ложь;
			НП.ТипЗначенияПараметраСсылка = ТипСправочникПользователи;
			НП.ЭтоПростойТип = Ложь;
		Иначе	 
			НП = КлючевойПараметр;
			НП.ТипЗначенияПараметраСсылка = ТипСправочникПользователи;
			НП.ЭтоПростойТип = Ложь;
		КонецЕсли;
		ОбъектШаблон.Записать();
	КонецЦикла;
КонецПроцедуры		// ДобавитьПараметрИнициаторПроцессаВШаблоны()

Процедура УстановитьКонстантыЗаявокНаРасходованиеДенежныхСредств() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Константы.ИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Установить(Истина);
	Константы.НеИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Установить(Ложь);
КонецПроцедуры

Процедура ПерезаписатьМПБланки() Экспорт
	
	 Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	  |	БланкиОтчетов.Ссылка КАК Ссылка
	  |ИЗ
	  |	Справочник.БланкиОтчетов КАК БланкиОтчетов
	  |ГДЕ
	  |	БланкиОтчетов.РежимБланка = 2
	  |	И БланкиОтчетов.ПометкаУдаления = Ложь";
	  
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Пока Выборка.Следующий() Цикл 
		  
		  Бланк = Выборка.Ссылка;
		  
		  Попытка 
			  
			  ПолеТабличногоДокументаМакет 	= Новый ТабличныйДокумент;
			 
			  ОбъектАБ = Обработки.АналитическийБланк.Создать();
			  Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,Бланк,ОбъектАБ);	
			  ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ);
			  			  
			  Отказ = Ложь;				
			  Уид   = Новый УникальныйИдентификатор;
			  Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(Бланк,ПолеТабличногоДокументаМакет,ОбъектАБ,Уид,Отказ);
			  
		  Исключение	 
			  
			  ТекстСообщения = НСтр("ru = 'При перезаписи бланка %Бланк% произошла ошибка
			  |			%ОписаниеОшибки%'");
			  ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Бланк%", Строка(Бланк));
			  ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			  ЗаписьЖурналаРегистрации(
			  ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			  УровеньЖурналаРегистрации.Ошибка,
			  Метаданные.Справочники.БланкиОтчетов,
			  Бланк, 
			  ТекстСообщения);
			  
			  ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
		  КонецПопытки;	 
		  
	  КонецЦикла;
	  	
КонецПроцедуры	

Процедура ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ)
		
	ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Очистить();
	ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Очистить();
	ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Очистить();
	
	Для Каждого облРаскрытия Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл			
		ОбластьРаскрытия =  ПолеТабличногоДокументаМакет.Области.Найти(облРаскрытия.ИмяОбласти);		
		ФлВключенияОбласти = Истина;	
		Если Не ОбластьРаскрытия = Неопределено Тогда	
			
			облРаскрытия.Лево = ОбластьРаскрытия.Лево;
			облРаскрытия.Верх = ОбластьРаскрытия.Верх;
			
			//Строки
			Если ОбластьРаскрытия.Лево=0 Тогда		
				Для Каждого ОбластьДляПроверки Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл	
					тОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ОбластьДляПроверки.ИмяОбласти);
					Если тОбласть.Верх<ОбластьРаскрытия.Верх И тОбласть.Низ>=ОбластьРаскрытия.Низ Тогда
						ФлВключенияОбласти = Ложь; Прервать; 	
					КонецЕсли;				
				КонецЦикла;				
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Низ =  ОбластьРаскрытия.Низ;
					НобластьКэша.Лево = 9999;		
				КонецЕсли;
			КонецЕсли;		
			//Колонки
			Если ОбластьРаскрытия.Верх=0 Тогда		
				Для Каждого ОбластьДляПроверки Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл
					тОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ОбластьДляПроверки.ИмяОбласти);
					//Если область имеет область - родителя, то игнорируем ее 
					Если тОбласть.Лево<ОбластьРаскрытия.Лево И тОбласть.Право>=ОбластьРаскрытия.Право Тогда
						ФлВключенияОбласти = Ложь; Прервать;						
					КонецЕсли;				
				КонецЦикла;			
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Право =  ОбластьРаскрытия.Право;
					НобластьКэша.Верх = 9999;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;						
	КонецЦикла;	
	
	
	
	
	//Готовим области таблиц
	тСтроки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Лево",0));
	тКолонки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Верх",0));
		
	Для Каждого тСтрока Из тСтроки Цикл	
		сНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тСтрока.НастройкиАналитикРаскрытия);
		тНастройкиАналитикРаскрытия = сНастройкиАналитикРаскрытия.СкопироватьКолонки();
		тОбластьСтрока              = ПолеТабличногоДокументаМакет.Область(тСтрока.ИмяОбласти);
		
		Для Каждого строкаАналитики Из сНастройкиАналитикРаскрытия Цикл
			тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
		КонецЦикла;	
		Для Каждого тКолонка Из тКолонки Цикл	
			
		    тОбластьКолонка              = ПолеТабличногоДокументаМакет.Область(тКолонка.ИмяОбласти);
			
			кНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тКолонка.НастройкиАналитикРаскрытия);
			Для Каждого строкаАналитики Из кНастройкиАналитикРаскрытия Цикл
				тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
			КонецЦикла;			
			нТаблица = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Добавить();
			нТаблица.УидГруппыОтборов =СтрЗаменить(Новый УникальныйИдентификатор,"-","");
			нТаблица.Лево 	= тОбластьКолонка.Лево;
			нТаблица.Право 	= тОбластьКолонка.Право;
			нТаблица.Верх 	= тОбластьСтрока.Верх;
			нТаблица.Низ 	= тОбластьСтрока.Низ;
			нТаблица.ИмяОбластиСтрок 	= тСтрока.ИмяОбласти;
			нТаблица.ИмяОбластиКолонок = тКолонка.ИмяОбласти;
			нТаблица.НастройкиАналитикРаскрытия = ЗначениеВСтрокуВнутр(тНастройкиАналитикРаскрытия);	
			нТаблица.ИмяОбласти           =  ПолеТабличногоДокументаМакет.Область(нТаблица.Верх,нТаблица.Лево,нТаблица.Низ,нТаблица.Право).Имя;
			
			ОтборРаскрываемойОбластиСтроки  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тСтрока.УидГруппыОтборов));
			ОтборРаскрываемойОбластиКолонки = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тКолонка.УидГруппыОтборов));
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиСтроки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиКолонки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;

			
		КонецЦикла;		
	КонецЦикла;	
			
   ОбъектАБ.КэшВыводаОбластейМакета.Очистить();	
   Лево =1;
   Верх =1;
   
   ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Сортировать("Верх,Лево");
   КолонкиРаскрытия 	= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Верх",9999));
   СтрокиРаскрытия		= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Лево",9999));
   
   нКол  		= КолонкиРаскрытия.Добавить();
   Нкол.Лево    = ПолетабличногоДокументаМакет.ШиринаТаблицы+1;
   Нкол.ИмяОбласти = "МаркерОкончания";
   
   Низ 		= ПолетабличногоДокументаМакет.ВысотаТаблицы;   
   нСтрока  = СтрокиРаскрытия.Добавить();
   нСтрока.Верх    = ПолетабличногоДокументаМакет.ВысотаТаблицы+1;
   нСтрока.ИмяОбласти = "МаркерОкончания";
   
   
   //Для Каждого СтрокаМакета Из  СтрокиРаскрытия Цикл	      
   //    //Между областями есть 'свободные' колонки
   //    Если Верх<>СтрокаМакета.Верх  Тогда   
   // 	   ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,Верх,СтрокаМакета.Верх,Лево,"Синтетика");
   //    КонецЕсли;
   //    Если СтрокаМакета.ИмяОбласти = "МаркерОкончания" Тогда
   // 	   Продолжить;
   //    КонецЕсли;		   
   //    ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,СтрокаМакета.Верх,СтрокаМакета.Низ,Лево,"Строки",СтрокаМакета.УидГруппыОтборов);	   
   //    Верх 	        = ?(ПолетабличногоДокументаМакет.ВысотаТаблицы =СтрокаМакета.Низ,ПолетабличногоДокументаМакет.ВысотаТаблицы+1,СтрокаМакета.Низ+1);	   
   //КонецЦикла;	   
    
   
КонецПроцедуры	

Процедура ОбновитьВидыСубконтоКорп() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыСубконтоКорпоративные.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконтоКорпоративные"; 
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		
		Субконто = Выборка.Ссылка;
		
		Попытка 
			
			СубконтоОбъект =  Субконто.ПолучитьОбъект();
			СубконтоОбъект.Записать();
			
		Исключение	 
			
			ТекстСообщения = НСтр("ru = 'При перезаписи ПВХ %Субконто% произошла ошибка
			|			%ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Субконто%", Строка(Субконто));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные,
			Субконто, 
			ТекстСообщения);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
		КонецПопытки;	 
		
	КонецЦикла;
	  	
КонецПроцедуры

Процедура ОбновитьШаблоныТрансформационныхКорректировок() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ШаблоныТрансформационныхКорректировокУдалитьСвязанныеДокументы.Ссылка КАК ШаблонКорректировки,
	             |	ШаблоныТрансформационныхКорректировокУдалитьСвязанныеДокументы.ДокументБД КАК ДокументБД,
	             |	ШаблоныТрансформационныхКорректировокУдалитьСвязанныеДокументы.НаименованиеДокументаБД КАК НаименованиеДокументаБД
	             |ИЗ
	             |	Справочник.ШаблоныТрансформационныхКорректировок.УдалитьСвязанныеДокументы КАК ШаблоныТрансформационныхКорректировокУдалитьСвязанныеДокументы
	             |ГДЕ
	             |	ШаблоныТрансформационныхКорректировокУдалитьСвязанныеДокументы.Ссылка.ДокументБД = ЗНАЧЕНИЕ(Справочник.ДокументыБД.ПустаяСсылка)";
	
	ОбработанныеОбъекты=Новый Соответствие;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
				
		Если ОбработанныеОбъекты.Получить(Результат.ШаблонКорректировки)=Неопределено Тогда
			
			ОбъектШаблон=Результат.ШаблонКорректировки.ПолучитьОбъект();
			ОбъектШаблон.ДокументБД=Результат.ДокументБД;
			ОбъектШаблон.ДляОнлайнПроводок=Истина;
			ОбъектШаблон.ОбменДанными.Загрузка=Истина;
			ОбъектШаблон.Записать();
			
			ОбработанныеОбъекты.Вставить(Результат.ШаблонКорректировки,1);
			
		Иначе
			
			ОбъектШаблон=Результат.ШаблонКорректировки.Скопировать();
			ОбъектШаблон.Наименование=ОбъектШаблон.Наименование+" ("+Результат.НаименованиеДокументаБД+")";
			ОбъектШаблон.ДокументБД=Результат.ДокументБД;
			ОбъектШаблон.ДляОнлайнПроводок=Истина;
	
			ОбъектШаблон.ОбменДанными.Загрузка=Истина;
			ОбъектШаблон.Записать();
			
			ПодчиненныеСущности = Новый Массив;
			ПодчиненныеСущности.Вставить(0,"ГруппыРаскрытия");
			ПодчиненныеСущности.Вставить(1,"ПоказателиОтчетов");
			ПодчиненныеСущности.Вставить(2,"ПравилаОбработки");
			
			УправлениеОтчетамиУХ.СкопироватьПодчиненныеОбъекты(ОбъектШаблон.Ссылка, Результат.ШаблонКорректировки,ПодчиненныеСущности,Ложь);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Запрос.Текст="ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныПроводок КАК ШаблоныПроводок";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбъектШаблон=Результат.Ссылка.ПолучитьОбъект();
		ОбъектШаблон.Отключен=Истина;
		ОбъектШаблон.ОбменДанными.Загрузка=Истина;
		ОбъектШаблон.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры // ОбновитьШаблоныТрансформационныхКорректировок()

Процедура ОбновитьРеквизитыОрганизаций() Экспорт

	ВалютаРУ = Константы.ВалютаРегламентированногоУчета.Получить();
	СтранаРФ = Справочники.СтраныМира.Россия;
	
	Выборка = Справочники.Организации.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Объект.ИспользоватьВРегламентированномУчете = Истина;
		Объект.ИностранныйНалоговыйРезидент = Объект.СтранаРегистрации.Пустая() И (Объект.СтранаРегистрации <> СтранаРФ);
		
		ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(Объект); // при записи найдет/создаст связанных контрагентов(Контрагент.ОрганизационнаяЕдиница)
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗадатьНастройкиДокументаРаспоряжениеНаПеремещениеДенежныхСредств() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("РаспоряжениеНаПеремещениеДенежныхСредств", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	 = Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		 = Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		 = Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		 = Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаРаспоряжениеНаПеремещениеДенежныхСредств()

Процедура ОбновитьПредопределенныеПрофили() Экспорт
	
	СписокОбновляемыхПрофилей = Новый СписокЗначений;
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("0b1ad145-b715-4ae4-9dec-bcbcad509f44"), "ПросмотрЭкземпляровКорректировокУХ");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("c0cb16f1-6b8f-4e41-a1a4-a0de4aa48c86"), "НастройкаМоделиОтчетности");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("ed172caa-7c13-11e6-b800-20cf30e74fce"), "ЦентрализованноеУправлениеЗакупкамиУХ");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("c0cb16f1-6b8f-4e41-a1a4-a0de4aa48c44"), "БюджетированиеКазначействоУХ");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("24733bb7-39cb-41f6-a1f9-e96538af4996"), "СаморегистрацияПоставщикаУХ");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("ae53f696-14ad-428f-90c0-71037b622a2f"), "РабочийСтолПоставщикаУХ");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("88bad7e0-43b5-400c-8162-aa938b7e330e"), "ИсполнительСверкиВГОУХ");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("f31d27ae-35cb-49e4-83c4-c149a5a0f527"), "РуководительСверкиВГО");
	СписокОбновляемыхПрофилей.Добавить(Новый УникальныйИдентификатор("f451faa8-9d90-4e6c-ab3f-9a8a96216737"), "АдминистраторСверкиВГОУХ");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрофилиГруппДоступа.Ссылка КАК Ссылка,
		|	ПрофилиГруппДоступа.ИдентификаторПоставляемыхДанных КАК ИдентификаторПоставляемыхДанных
		|ИЗ
		|	Справочник.ПрофилиГруппДоступа КАК ПрофилиГруппДоступа
		|ГДЕ
		|	ПрофилиГруппДоступа.ПометкаУдаления = ЛОЖЬ
		|	И ПрофилиГруппДоступа.Предопределенный = ЛОЖЬ
		|	И ПрофилиГруппДоступа.ЭтоГруппа = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	УстановитьПривилегированныйРежим(Истина);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Элемент = СписокОбновляемыхПрофилей.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ИдентификаторПоставляемыхДанных);
		Если Элемент <> Неопределено Тогда
			СтарыйОбъект = Справочники.ПрофилиГруппДоступа[Элемент.Представление].ПолучитьОбъект();
			СтарыйОбъект.ОбменДанными.Загрузка = Истина;
			СтарыйОбъект.Удалить();
			Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Объект.ИмяПредопределенныхДанных = Элемент.Представление;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СброситьКонстантыКонтроляЛимитов() Экспорт
	
	Константы.КонтролироватьПревышениеЛимитовРасходаДенежныхСредств.Установить(Ложь);
	Константы.ИспользоватьЛимитыРасходаДенежныхСредств.Установить(Ложь);
	Константы.ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования.Установить(Ложь);
	Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям.Установить(Ложь);
	Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям.Установить(Ложь);
	
КонецПроцедуры

Процедура ОбновитьЗапросыИсточниковКорреспонденция() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	             |	ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК НазначениеРасчетов
	             |ИЗ
	             |	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	             |ГДЕ
	             |	(ИсточникиДанныхДляРасчетов.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии)
	             |			ИЛИ ИсточникиДанныхДляРасчетов.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии))
	             |	И (ИсточникиДанныхДляРасчетов.ТрансляцияДебет
	             |			ИЛИ ИсточникиДанныхДляРасчетов.ТрансляцияКредит
	             |			ИЛИ НЕ ИсточникиДанныхДляРасчетов.КоррСчет = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка))";
	
	Результат=Запрос.Выполнить().Выбрать();
	МассивПравил=Новый Массив;
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		ОбъектИсточник=Результат.Ссылка.ПолучитьОбъект();
		ОбъектИсточник.ПодготовитьТаблицыСопоставленийИОтборов();
		ОбъектИсточник.ПодготовитьТекстОтбора();
		ОбъектИсточник.ОбменДанными.Загрузка=Истина;
				
		Попытка
			
			ОбъектИсточник.Записать();
			
			Если МассивПравил.Найти(Результат.НазначениеРасчетов)=Неопределено Тогда
				
				МассивПравил.Добавить(Результат.НазначениеРасчетов);
				
			КонецЕсли;
						
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось обновить источник данных "+ОбъектИсточник.Код+" для правила расчета "+ОбъектИсточник.НазначениеРасчетов+": "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого Правило ИЗ МассивПравил Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Правило);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры // ОбновитьЗапросыИсточниковКорреспонденция()

Процедура ОбновитьПоляСоответствияДляОбмена() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	НЕ(СоответствиеВнешнимИБ.ПометкаУдаления
	|				ИЛИ СоответствиеВнешнимИБ.СинхронизацияПоGUID)";
	
	Результат=Запрос.Выполнить().Выбрать();	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		РасширениеИнтеграцииУХ.СформироватьРезультирующиеСтрокиПолейДляИмпорта(Результат.Ссылка);
		
	КонецЦикла;
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОбновитьПоляСоответствияДляОбмена() 

Процедура ПеренестиДанныеШаблоновОповещений() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ХранилищеШаблонов.Ссылка КАК Ссылка,
		|	ХранилищеШаблонов.Код КАК Код,
		|	ХранилищеШаблонов.Наименование КАК Наименование,
		|	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
		|	ХранилищеШаблонов.Шаблон КАК Шаблон,
		|	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
		|	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
		|	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
		|	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
		|	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
		|	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
		|	ХранилищеШаблонов.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
		|	ХранилищеШаблонов.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
		|	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
		|	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон
		|ИЗ
		|	Справочник.УдалитьХранилищеШаблонов КАК ХранилищеШаблонов
		|ГДЕ
		|	НЕ ХранилищеШаблонов.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекКод = ВыборкаДетальныеЗаписи.Код;
		НайденныйСправочник = Справочники.ШаблоныОповещений.НайтиПоКоду(ТекКод);
		Если НЕ ЗначениеЗаполнено(НайденныйСправочник) Тогда
			НовыйСправочник = Справочники.ШаблоныОповещений.СоздатьЭлемент();
			НовыйСправочник.Код						 = ВыборкаДетальныеЗаписи.Код;
			НовыйСправочник.Наименование			 = ВыборкаДетальныеЗаписи.Наименование;
			НовыйСправочник.ТипШаблона				 = ВыборкаДетальныеЗаписи.ТипШаблона;
			НовыйСправочник.ДатаСоздания			 = ВыборкаДетальныеЗаписи.ДатаСоздания;
			НовыйСправочник.ДатаИзменения			 = ВыборкаДетальныеЗаписи.ДатаИзменения;
			НовыйСправочник.ПользовательСоздал		 = ВыборкаДетальныеЗаписи.ПользовательСоздал;
			НовыйСправочник.ПользовательИзменил		 = ВыборкаДетальныеЗаписи.ПользовательИзменил;
			НовыйСправочник.ЭтапПроцесса			 = ВыборкаДетальныеЗаписи.ЭтапПроцесса;
			НовыйСправочник.ШаблонПроцесса			 = ВыборкаДетальныеЗаписи.ШаблонПроцесса;
			НовыйСправочник.НазначениеОповещения	 = ВыборкаДетальныеЗаписи.НазначениеОповещения;
			НовыйСправочник.ВидОбъектаОповещения	 = ВыборкаДетальныеЗаписи.ВидОбъектаОповещения;
			НовыйСправочник.ТипОбъектаОповещения	 = ВыборкаДетальныеЗаписи.ТипОбъектаОповещения;
			НовыйСправочник.КатегорияОповещения		 = ВыборкаДетальныеЗаписи.КатегорияОповещения;
			НовыйСправочник.НестандартныйШаблон		 = ВыборкаДетальныеЗаписи.НестандартныйШаблон;
			Если ВыборкаДетальныеЗаписи.Шаблон <> Неопределено Тогда
				ЗначениеХранилища = ВыборкаДетальныеЗаписи.Шаблон.Получить();
				НовыйСправочник.Шаблон				 = Новый ХранилищеЗначения(ЗначениеХранилища);
			Иначе
				// Не заполняем шаблон.
			КонецЕсли;
			Для Каждого ТекСписокОтветственных Из ВыборкаДетальныеЗаписи.Ссылка.СписокОтветственных Цикл
				НоваяСтрока = НовыйСправочник.СписокОтветственных.Добавить();
				НоваяСтрока.Пользователь = ТекСписокОтветственных.Пользователь;
			КонецЦикла;	
			НовыйСправочник.Записать();
		Иначе
			// Значение уже установлено. 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ПеренестиДанныеШаблоновОповещений()

Процедура ПеренестиШаблонОповещенийНастройкиОповещений() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиОповещений.КатегорияОповещения КАК КатегорияОповещения,
		|	НастройкиОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
		|	НастройкиОповещений.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
		|	НастройкиОповещений.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
		|	НастройкиОповещений.ШаблонОповещения КАК ШаблонОповещения,
		|	НастройкиОповещений.СписокРассылкиПредставление КАК СписокРассылкиПредставление,
		|	НастройкиОповещений.СписокРассылки КАК СписокРассылки,
		|	НастройкиОповещений.ОповещениеВключено КАК ОповещениеВключено,
		|	НастройкиОповещений.ПериодНапоминания КАК ПериодНапоминания,
		|	НастройкиОповещений.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания
		|ИЗ
		|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтарыйШаблон = ВыборкаДетальныеЗаписи.ШаблонОповещения;
		Если ТипЗнч(СтарыйШаблон) = Тип("СправочникСсылка.УдалитьХранилищеШаблонов") Тогда
			НаборЗаписей = РегистрыСведений.НастройкиОповещений.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.КатегорияОповещения.Установить(ВыборкаДетальныеЗаписи.КатегорияОповещения); 
			НаборЗаписей.Отбор.ВидСобытияОповещения.Установить(ВыборкаДетальныеЗаписи.ВидСобытияОповещения); 
			НаборЗаписей.Отбор.ТипОбъектаОповещения.Установить(ВыборкаДетальныеЗаписи.ТипОбъектаОповещения); 
			НаборЗаписей.Отбор.ВидОбъектаОповещения.Установить(ВыборкаДетальныеЗаписи.ВидОбъектаОповещения); 
			НаборЗаписей.Прочитать();
			Изменено = Ложь;
			Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл 
				КодШаблона = СтарыйШаблон.Код;
				НайденныйШаблон = Справочники.ШаблоныОповещений.НайтиПоКоду(КодШаблона);
				Если НайденныйШаблон <> Неопределено Тогда
					ТекНаборЗаписей.ШаблонОповещения = НайденныйШаблон; 
					Изменено = Истина;
				Иначе
					// Значение не найдено. Пропускаем.
				КонецЕсли;
			КонецЦикла; 
			Если Изменено Тогда
				НаборЗаписей.Записать(); 
			Иначе
				// Значения не были изменены.
			КонецЕсли;
		Иначе
			// Не требуется переопределять существующий шаблон.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ПеренестиШаблонОповещенийНастройкиОповещений()

Процедура ПеренестиШаблонОповещенийСобытияОповещений() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СобытияОповещений.СпособОповещения КАК СпособОповещения,
		|	СобытияОповещений.Получатель КАК Получатель,
		|	СобытияОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
		|	СобытияОповещений.Источник КАК Источник,
		|	СобытияОповещений.ДатаДобавления КАК ДатаДобавления,
		|	СобытияОповещений.ИдентификаторОповещения КАК ИдентификаторОповещения,
		|	СобытияОповещений.ДатаОтправки КАК ДатаОтправки,
		|	СобытияОповещений.ТекстСообщения КАК ТекстСообщения,
		|	СобытияОповещений.ПараметрыСобытия КАК ПараметрыСобытия,
		|	СобытияОповещений.Вложения КАК Вложения,
		|	СобытияОповещений.Тема КАК Тема,
		|	СобытияОповещений.Задача КАК Задача,
		|	СобытияОповещений.ХранилищеШаблона КАК ХранилищеШаблона,
		|	СобытияОповещений.Этап КАК Этап,
		|	СобытияОповещений.Замещаемый КАК Замещаемый
		|ИЗ
		|	РегистрСведений.СобытияОповещений КАК СобытияОповещений
		|ГДЕ
		|	СобытияОповещений.ДатаОтправки = &ПустаяДата";
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтарыйШаблон = ВыборкаДетальныеЗаписи.ХранилищеШаблона;
		НаборЗаписей = РегистрыСведений.СобытияОповещений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.СпособОповещения.Установить(ВыборкаДетальныеЗаписи.СпособОповещения); 
		НаборЗаписей.Отбор.Получатель.Установить(ВыборкаДетальныеЗаписи.Получатель); 
		НаборЗаписей.Отбор.ВидСобытияОповещения.Установить(ВыборкаДетальныеЗаписи.ВидСобытияОповещения); 
		НаборЗаписей.Отбор.Источник.Установить(ВыборкаДетальныеЗаписи.Источник); 
		НаборЗаписей.Отбор.ДатаДобавления.Установить(ВыборкаДетальныеЗаписи.ДатаДобавления); 
		НаборЗаписей.Отбор.ИдентификаторОповещения.Установить(ВыборкаДетальныеЗаписи.ИдентификаторОповещения); 
		НаборЗаписей.Прочитать();
		Изменено = Истина;
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл 
			КодШаблона = СтарыйШаблон.Код;
			НайденныйШаблон = Справочники.ШаблоныОповещений.НайтиПоКоду(КодШаблона);
			Если НайденныйШаблон <> Неопределено Тогда
				ТекНаборЗаписей.ХранилищеШаблона = НайденныйШаблон; 
				Изменено = Истина;
			Иначе
				// Значение не найдено. Пропускаем.
			КонецЕсли;
		КонецЦикла; 
		Если Изменено Тогда
			НаборЗаписей.Записать(); 
		Иначе
			// Значения не были изменены.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ПеренестиШаблонОповещенийСобытияОповещений()

Процедура ПеренестиШаблонОповещенийШаблоныПроцессов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ШаблоныУниверсальныхПроцессовОповещенияПроцесса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов.ОповещенияПроцесса КАК ШаблоныУниверсальныхПроцессовОповещенияПроцесса
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессовОповещенияПроцесса.ШаблонОповещения ССЫЛКА Справочник.УдалитьХранилищеШаблонов";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникОбъект = ТекСсылка.ПолучитьОбъект();
		Изменено = Ложь;
		Для Каждого ТекОповещенияПроцесса Из СправочникОбъект.ОповещенияПроцесса Цикл
			СтарыйШаблон = ТекОповещенияПроцесса.ШаблонОповещения;
			Если ЗначениеЗаполнено(СтарыйШаблон) Тогда
				Если ТипЗнч(СтарыйШаблон) = Тип("СправочникСсылка.УдалитьХранилищеШаблонов") Тогда
					КодШаблона = СтарыйШаблон.Код;
					НайденныйШаблон = Справочники.ШаблоныОповещений.НайтиПоКоду(КодШаблона);
					Если НайденныйШаблон <> Неопределено Тогда
						ТекОповещенияПроцесса.ШаблонОповещения = НайденныйШаблон; 
						Изменено = Истина;
					Иначе
						// Значение не найдено. Пропускаем.
					КонецЕсли;
				Иначе
					// Неподходящий тип.
				КонецЕсли;
			Иначе
				// Шаблон не заполнен.
			КонецЕсли;
		КонецЦикла;
		Если Изменено Тогда
			СправочникОбъект.Записать();
		Иначе
			// Данные не были изменены. Не записываем.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ПеренестиШаблонОповещенийСобытияОповещений()

Процедура УстановитьСуммуКонтрактаСПЗ() Экспорт
	// Получим список документов, подлежащих обновлению.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтрокаПланаЗакупок.Ссылка КАК Ссылка,
	|	СтрокаПланаЗакупок.СуммаКонтракта КАК СуммаКонтракта
	|ИЗ
	|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
	|ГДЕ
	|	СтрокаПланаЗакупок.СуммаКонтракта = 0
	|	И НЕ СтрокаПланаЗакупок.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекСтрокаПлана = ВыборкаДетальныеЗаписи.Ссылка;
		// Свернём таблицу по измерениям.
		ТаблицаНоменклатура = ТекСтрокаПлана.Номенклатура.Выгрузить();
		СверткаИзмерения = ТаблицаНоменклатура.Скопировать();
		СверткаИзмерения.Свернуть("Приоритет,Номенклатура,Организация,МестоПоставки,Проект,ДоговорСПокупателем,Менеджер");
		НоваяСуммаКонтакта = 0;
		ДокументОбъект = ТекСтрокаПлана.ПолучитьОбъект();
		Для Каждого ТекСверткаИзмерения Из СверткаИзмерения Цикл
			// Отделим уникальные строки по измерениям.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Приоритет", ТекСверткаИзмерения.Приоритет);
			СтруктураПоиска.Вставить("Номенклатура", ТекСверткаИзмерения.Номенклатура);
			СтруктураПоиска.Вставить("Организация", ТекСверткаИзмерения.Организация);
			СтруктураПоиска.Вставить("МестоПоставки", ТекСверткаИзмерения.МестоПоставки);
			СтруктураПоиска.Вставить("Проект", ТекСверткаИзмерения.Проект);
			СтруктураПоиска.Вставить("ДоговорСПокупателем", ТекСверткаИзмерения.ДоговорСПокупателем);
			СтруктураПоиска.Вставить("Менеджер", ТекСверткаИзмерения.Менеджер);
			НайденныеСтроки = ДокументОбъект.Номенклатура.НайтиСтроки(СтруктураПоиска);
			// Получим сумму за все периоды.
			НовоеИтогоПоВсемПериодам = 0;
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				НовоеИтогоПоВсемПериодам = НовоеИтогоПоВсемПериодам + ТекНайденныеСтроки.Сумма;
			КонецЦикла;
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекНайденныеСтроки.ИтогоЗаВесьПериод = НовоеИтогоПоВсемПериодам;
			КонецЦикла;	
			// Увеличим сумму контракта на полученное значение.
			НоваяСуммаКонтакта = НоваяСуммаКонтакта + НовоеИтогоПоВсемПериодам;
		КонецЦикла;
		ДокументОбъект.СуммаКонтракта = НоваяСуммаКонтакта;
		ДокументОбъект.Записать();
	КонецЦикла;
КонецПроцедуры		// УстановитьСуммуКонтрактаСПЗ()

Процедура ОбновитьРегламентыОтчетности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииРегламентовПодготовкиОтчетности.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	               |ГДЕ
	               |	ВерсииРегламентовПодготовкиОтчетности.ЭтоГруппа = Ложь";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 РегламентОбъект = Выборка.Ссылка.ПолучитьОбъект();
		 РегламентОбъект.ИспользоватьРасширенныеНастройкиПериметра = Истина;
		 
		 СвязанныйШаблонПроцесса = Неопределено;	
		 РасширениеБизнесЛогикиУХ.УправлениеПериодом_ОпределитьСвязанныйШаблон(Выборка.Ссылка, СвязанныйШаблонПроцесса);

		 РегламентОбъект.ИспользоватьПроцесс   =	ЗначениеЗаполнено(СвязанныйШаблонПроцесса);
				 
		 Попытка
			 
			 ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(РегламентОбъект,,Ложь);
			 
		 Исключение
			 
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось обновить регламент данных %1: %2'"), 
			                                     	Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
			 ОтменитьТранзакцию();
			 Возврат;
			 
		 КонецПопытки;
	 
	 КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРежимыСценариев() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Сценарии.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Сценарии КАК Сценарии";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 СценарийОбъект = Выборка.Ссылка.ПолучитьОбъект();
		 СценарийОбъект.РежимПланирования = Перечисления.РежимыПланирования.ПланированиеНаИнтервал;
		  
		 Попытка
			 
			 ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(СценарийОбъект,,Ложь);
			 
		 Исключение
			 
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось обновить сценарий %1: %2'"), 
			                                     	Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
			 ОтменитьТранзакцию();
			 Возврат;
			 
		 КонецПопытки;
	 
	 КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКодыПВХСубконтоКорп(Параметры = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыСубконтоКорпоративные.Ссылка КАК Ссылка
	               |ИЗ
	               |	ПланВидовХарактеристик.ВидыСубконтоКорпоративные КАК ВидыСубконтоКорпоративные";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		 ПВХОбъект = Выборка.Ссылка.ПолучитьОбъект();
		  
		 Попытка
			 
			 ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ПВХОбъект,,Истина);
			 
		 Исключение
			 
			 ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось обновить элемент ПВХ %1: %2'"), 
			                                     	Выборка.Ссылка, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
			 
			 Возврат;
			 
		 КонецПопытки;
	 
	 КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтавкиНдсЛота() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЛотыНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лоты.Номенклатура КАК ЛотыНоменклатура
		|ГДЕ
		|	ЛотыНоменклатура.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
		|	И НЕ ЛотыНоменклатура.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Для Каждого ТекНоменклатура Из СправочникОбъект.Номенклатура Цикл
			Если (ЗначениеЗаполнено(ТекНоменклатура.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекНоменклатура.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекНоменклатура.УдалитьСтавкаНДС);
				ТекНоменклатура.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтавкиНдсЛота()

Процедура ОбновитьСтавкиНдсПредложенияПоставщика() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПредложениеПоставщика.УсловияПоНоменклатуре КАК ПредложениеПоставщикаУсловияПоНоменклатуре
		|ГДЕ
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
		|	И НЕ ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для Каждого ТекУсловияПоНоменклатуре Из ДокументОбъект.УсловияПоНоменклатуре Цикл
			Если (ЗначениеЗаполнено(ТекУсловияПоНоменклатуре.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекУсловияПоНоменклатуре.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекУсловияПоНоменклатуре.УдалитьСтавкаНДС);
				ТекУсловияПоНоменклатуре.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтавкиНдсПредложенияПоставщика()

Процедура ОбновитьСтавкиНдсПротоколВыбора() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПротоколВыбораПобедителейРаспределениеПоПотребностям.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПротоколВыбораПобедителей.РаспределениеПоПотребностям КАК ПротоколВыбораПобедителейРаспределениеПоПотребностям
		|ГДЕ
		|	ПротоколВыбораПобедителейРаспределениеПоПотребностям.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
		|	И НЕ ПротоколВыбораПобедителейРаспределениеПоПотребностям.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для Каждого ТекРаспределениеПоПотребностям Из ДокументОбъект.РаспределениеПоПотребностям Цикл
			Если (ЗначениеЗаполнено(ТекРаспределениеПоПотребностям.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекРаспределениеПоПотребностям.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекРаспределениеПоПотребностям.УдалитьСтавкаНДС);
				ТекРаспределениеПоПотребностям.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтавкиНдсПротоколВыбора()

Процедура ОбновитьСтавкиНдсСтрокиПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтрокаПланаЗакупокНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СтрокаПланаЗакупок.Номенклатура КАК СтрокаПланаЗакупокНоменклатура
		|ГДЕ
		|	СтрокаПланаЗакупокНоменклатура.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
		|	И НЕ СтрокаПланаЗакупокНоменклатура.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для Каждого ТекНоменклатура Из ДокументОбъект.Номенклатура Цикл
			Если (ЗначениеЗаполнено(ТекНоменклатура.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекНоменклатура.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекНоменклатура.УдалитьСтавкаНДС);
				ТекНоменклатура.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтавкиНдсСтрокиПланаЗакупок()

Процедура ОбновитьСтавкиНдсПредложенияПоставщикаЭТП() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПредложениеПоставщикаУсловияПоНоменклатуреЭТП.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПредложениеПоставщика.УсловияПоНоменклатуреЭТП КАК ПредложениеПоставщикаУсловияПоНоменклатуреЭТП
		|ГДЕ
		|	ПредложениеПоставщикаУсловияПоНоменклатуреЭТП.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
		|	И НЕ ПредложениеПоставщикаУсловияПоНоменклатуреЭТП.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Для Каждого ТекУсловияПоНоменклатуреЭТП Из ДокументОбъект.УсловияПоНоменклатуреЭТП Цикл
			Если (ЗначениеЗаполнено(ТекУсловияПоНоменклатуреЭТП.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекУсловияПоНоменклатуреЭТП.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекУсловияПоНоменклатуреЭТП.УдалитьСтавкаНДС);
				ТекУсловияПоНоменклатуреЭТП.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтавкиНдсПредложенияПоставщикаЭТП()

Процедура ОбновитьСтавкиНдсТоварныхКатегорий() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТоварныеКатегории.Ссылка КАК Ссылка,
		|	ТоварныеКатегории.УдалитьСтавкаНДС КАК УдалитьСтавкаНДС,
		|	ТоварныеКатегории.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Справочник.ТоварныеКатегории КАК ТоварныеКатегории
		|ГДЕ
		|	ТоварныеКатегории.УдалитьСтавкаНДС <> &ПустаяСтавкаНДС
		|	И НЕ ТоварныеКатегории.ПометкаУдаления";
	Запрос.УстановитьПараметр("ПустаяСтавкаНДС", Перечисления.СтавкиНДС.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		Если (ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтавкаНДС))Тогда
			НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ВыборкаДетальныеЗаписи.УдалитьСтавкаНДС);
			СправочникОбъект.СтавкаНДС = НоваяСтавка;
		Иначе
			// Пропускаем.
		КонецЕсли;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникОбъект);
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтавкиНдсТоварныхКатегорий()

Процедура ОбновитьНдсВРегистреПотребностиВНоменклатуре() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПотребностиВНоменклатуре.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ПотребностиВНоменклатуре.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
			Если (ЗначениеЗаполнено(ТекНаборЗаписей.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекНаборЗаписей.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекНаборЗаписей.УдалитьСтавкаНДС);
				ТекНаборЗаписей.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры		// ОбновитьНдсВРегистреПотредностиВНоменклатуре()

Процедура ОбновитьНдсВРегистреПоставщикиПоЛотам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПоставщикиПоЛотам.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.ПоставщикиПоЛотам КАК ПоставщикиПоЛотам";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ПоставщикиПоЛотам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
			Если (ЗначениеЗаполнено(ТекНаборЗаписей.УдалитьСтавкаНДС)) И (НЕ ЗначениеЗаполнено(ТекНаборЗаписей.СтавкаНДС))Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекНаборЗаписей.УдалитьСтавкаНДС);
				ТекНаборЗаписей.СтавкаНДС = НоваяСтавка;
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры		// ОбновитьНдсВРегистреПоставщикиПоЛотам()

Процедура ОбновитьНдсВРегистреПланПоставокПоДоговорам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Т.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам КАК Т";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ПланПоставокПоДоговорам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
		НаборЗаписей.Прочитать();
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
			Если ЗначениеЗаполнено(ТекНаборЗаписей.УдалитьСтавкаНДС) И НЕ ЗначениеЗаполнено(ТекНаборЗаписей.СтавкаНДС) Тогда
				НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(ТекНаборЗаписей.УдалитьСтавкаНДС);
				ТекНаборЗаписей.СтавкаНДС = НоваяСтавка;
			КонецЕсли;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей); 
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьСпособАдресацииЭтапов() Экспорт
	СпособАдресацииПользователь			 = Перечисления.СпособыАдресацииСогласования.Пользователь;
	СпособАдресацииРоль					 = Перечисления.СпособыАдресацииСогласования.Роль;
	СпособАдресацииРасширеннаяАдресация	 = Перечисления.СпособыАдресацииСогласования.РасширеннаяАдресация;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессовУтверждающие.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.Утверждающие КАК ЭтапыУниверсальныхПроцессовУтверждающие
		|ГДЕ
		|	НЕ ЭтапыУниверсальныхПроцессовУтверждающие.Ссылка.ПометкаУдаления
		|	И ЭтапыУниверсальныхПроцессовУтверждающие.СпособАдресации = ЗНАЧЕНИЕ(Перечисление.СпособыАдресацииСогласования.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭтапСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ЭтапОбъект = ЭтапСсылка.ПолучитьОбъект();
		Для Каждого ТекУтверждающие Из ЭтапОбъект.Утверждающие Цикл
			Если НЕ ЗначениеЗаполнено(ТекУтверждающие.СпособАдресации) Тогда
				ТипПользователя = ТипЗнч(ТекУтверждающие.Пользователь);
				Если ТипПользователя = Тип("СправочникСсылка.Пользователи") Тогда
					ТекУтверждающие.СпособАдресации = СпособАдресацииПользователь;
				ИначеЕсли ТипПользователя = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
					ТекУтверждающие.СпособАдресации = СпособАдресацииРоль;
				ИначеЕсли ТипПользователя = Тип("СправочникСсылка.РасширеннаяАдресацияСогласования") Тогда
					ТекУтверждающие.СпособАдресации = СпособАдресацииРасширеннаяАдресация;
				Иначе
					// Неизвестный вариант. Пропускаем.
				КонецЕсли;
			Иначе
				// Значение установлено. Обновления не требуется.
			КонецЕсли;
		КонецЦикла;	
		ЭтапОбъект.Записать();
	КонецЦикла;
КонецПроцедуры		// УстановитьСпособАдресацииЭтапов()

Процедура УстановитьВидЛотовойЗакупки(Параметры = Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Лоты.Ссылка КАК Ссылка,
	             |	Лоты.РазрешенаЧастичнаяПоставка КАК РазрешенаЧастичнаяПоставка
	             |ИЗ
	             |	Справочник.Лоты КАК Лоты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Лот = Выборка.Ссылка.ПолучитьОбъект();
		Лот.ВидЗакупки = ?(Выборка.РазрешенаЧастичнаяПоставка = Истина,Перечисления.ВидЛотовойЗакупки.ПопозиционнаяЗакупка,Перечисления.ВидЛотовойЗакупки.ЛотоваяЗакупка);
		ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(Лот, Ложь, Ложь);
	КонецЦикла;
КонецПроцедуры

Процедура ДобавитьРолиПрофиляМенеджераЗакупок() Экспорт
	Профиль =  Справочники.ПрофилиГруппДоступа.МенеджерПоЗакупкам.ПолучитьОбъект();
	
	НоваяРоль = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя","ОператорЦЗ");
	Если ЗначениеЗаполнено(НоваяРоль) Тогда
		Роль = Профиль.Роли.Добавить();
		Роль.Роль = НоваяРоль;
	КонецЕсли;

	НоваяРоль = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя","ДобавлениеИзменениеДанныхЦентрализованныхЗакупок");
	Если ЗначениеЗаполнено(НоваяРоль) Тогда
		Роль = Профиль.Роли.Добавить();
		Роль.Роль = НоваяРоль;
	КонецЕсли;
	
	НоваяРоль = Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя","ДобавлениеИзменениеДанныхДоговораЗакупки");
	Если ЗначениеЗаполнено(НоваяРоль) Тогда
		Роль = Профиль.Роли.Добавить();
		Роль.Роль = НоваяРоль;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Профиль);
КонецПроцедуры	

Процедура ОбновитьТекстыЗапросовИсточниковДанных() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов КАК НазначениеРасчетов
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	НЕ(ИсточникиДанныхДляРасчетов.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ПустаяСсылка)
	|				ИЛИ ИсточникиДанныхДляРасчетов.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|				ИЛИ ИсточникиДанныхДляРасчетов.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ОбменТаблДок))";
	
	Результат=Запрос.Выполнить().Выбрать();
	МассивПравил=Новый Массив;
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		ОбъектИсточник=Результат.Ссылка.ПолучитьОбъект();
		ОбъектИсточник.ПодготовитьТаблицыСопоставленийИОтборов();
		ОбъектИсточник.ПодготовитьТекстОтбора();
		ОбъектИсточник.СформироватьТекстЗапросаКБД();
		ОбъектИсточник.ОбменДанными.Загрузка=Истина;
				
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектИсточник);
			
			Если МассивПравил.Найти(Результат.НазначениеРасчетов)=Неопределено Тогда
				
				МассивПравил.Добавить(Результат.НазначениеРасчетов);
				
			КонецЕсли;
						
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось обновить источник данных %1 для правила расчета %2: %3'"), 
			                                    	ОбъектИсточник.Код, ОбъектИсточник.НазначениеРасчетов, 
			                                    	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Для Каждого Правило ИЗ МассивПравил Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Правило);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

КонецПроцедуры // ОбновитьТекстыЗапросовИсточников()

Процедура ПерезаполнитьРеквизитЦФОСтруктураПредприятия() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтруктураПредприятия.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СтруктураПредприятия КАК СтруктураПредприятия
	|ГДЕ
	|	НЕ СтруктураПредприятия.УдалитьЦФО = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ЦФО=СправочникОбъект.УдалитьЦФО;
		
		ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(СправочникОбъект, Ложь, Ложь);
	
	КонецЦикла;

КонецПроцедуры // ПерезаполнитьСинонимыПлановСчетовБД()

Процедура ЗаполнитьРеквизитыПрофильВНА(Параметры = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизацииМСФО КАК т
	|ГДЕ
	|	т.Подразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|	ИЛИ т.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НовыеЗначения = Новый Структура;
		Если Не ЗначениеЗаполнено(Выборка.Ссылка.Подразделение) 
			И ЗначениеЗаполнено(Выборка.Ссылка.УдалитьПодразделение) Тогда
		
			НовыеЗначения.Вставить("Подразделение", Выборка.Ссылка.УдалитьПодразделение);
		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Выборка.Ссылка.НаправлениеДеятельности) 
			И ЗначениеЗаполнено(Выборка.Ссылка.УдалитьНаправлениеДеятельности) Тогда
		
			НовыеЗначения.Вставить("НаправлениеДеятельности", Выборка.Ссылка.УдалитьНаправлениеДеятельности);
		
		КонецЕсли;
		
		Если НовыеЗначения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(Объект, НовыеЗначения);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла; 

КонецПроцедуры

Процедура ОбновитьДанныеРегистраНастроекОбработкиОтчетов() Экспорт
	
	НаборЗаписей=РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Строка ИЗ НаборЗаписей Цикл
		
		Если Строка.ЗначениеЭлементаНастройкиОтчета=Неопределено Тогда
			
			Строка.ЗначениеЭлементаНастройкиОтчета=Строка.УдалитьЗначениеЭлементаНастройкиОтчета;
			Строка.УдалитьЗначениеЭлементаНастройкиОтчета=Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры // Процедура ОбновитьДанныеРегистраНастроекОбработкиОтчетов()

Процедура УстановитьРасширенныйАлгоритмПересчетаПоказателей() Экспорт
	
	Константы.ИспользоватьРасширенныйАлгоритмПересчетаПоказателей.Установить(Истина);
	
КонецПроцедуры

Процедура ОбновлениеОрганизатораЗакупкиПротоколаВыбора() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ПротоколВыбораПобедителей.Ссылка КАК Ссылка,
	|	ЗакупочныеПроцедуры.ОрганизаторЗакупки КАК ОрганизаторЗакупки
	|ИЗ
	|	Документ.ПротоколВыбораПобедителей КАК ПротоколВыбораПобедителей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЗакупочныеПроцедуры КАК ЗакупочныеПроцедуры
	|		ПО ПротоколВыбораПобедителей.ЗакупочнаяПроцедура = ЗакупочныеПроцедуры.Ссылка");
	
	ПротоколыВыбора = Запрос.Выполнить().Выбрать();
	
	Пока ПротоколыВыбора.Следующий() Цикл
		
		Протокол = ПротоколыВыбора.Ссылка.ПолучитьОбъект();
		Протокол.ОрганизаторЗакупки = ПротоколыВыбора.ОрганизаторЗакупки;
		
		Попытка
			ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(Протокол, Ложь, Ложь);
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось записать документ ""%1""'"),
			Протокол,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьВалютуУчетаЗакупок() Экспорт
	Если Не ЗначениеЗаполнено(Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить()) Тогда
		Константы.ВалютаУчетаЦентрализованныхЗакупок.Установить(Константы.ВалютаРегламентированногоУчета.Получить());
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьАккредитациюПоставщиков() Экспорт
	Если Не ЗначениеЗаполнено(Константы.СрокАккредитацииПоУмолчаниюМесяцы.Получить()) Тогда
		Константы.СрокАккредитацииПоУмолчаниюМесяцы.Установить(12);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Константы.ДлительностьРассмотренияЗаявкиНаАккредитациюДни.Получить()) Тогда
		Константы.ДлительностьРассмотренияЗаявкиНаАккредитациюДни.Установить(10);
	КонецЕсли;
КонецПроцедуры

Процедура ИсправитьЛокализациюСистемныхЗначений() Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	НастройкиСоставаАналитикиБланков.БланкОтчета КАК БланкОтчета,
	                      |	НастройкиСоставаАналитикиБланков.Показатель КАК Показатель,
	                      |	НастройкиСоставаАналитикиБланков.Назначение КАК Назначение,
	                      |	НастройкиСоставаАналитикиБланков.НомерНастройки КАК НомерНастройки
	                      |ИЗ
	                      |	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	                      |ГДЕ
	                      |	НастройкиСоставаАналитикиБланков.ПредставлениеНастройки = &ПредставлениеНастройки");
	
	Запрос.УстановитьПараметр("ПредставлениеНастройки", "All items");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерЗаписи = РегистрыСведений.НастройкиСоставаАналитикиБланков.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() тогда
			МенеджерЗаписи.ПредставлениеНастройки = "Все элементы";
						
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не удалось записать регистр сведений ""%1""
				|%2'"),
				"НастройкиСоставаАналитикиБланков",
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьНастройкиТрансляцииПериодичность() Экспорт
	
	Константы.ПериодичностьТрансляцииПроводок.Установить(Перечисления.Периодичность.Месяц);
		
КонецПроцедуры // ПодготовитьНастройкиТрансляцииПериодичность()

Процедура ПеренестиШаблоныОповещений() Экспорт
	
	СоответствиеШаблонов = Новый Соответствие();
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 1. Справочник.ШаблоныУниверсальныхПроцессов.ТабличнаяЧасть.ОповещенияПроцесса.Реквизит.ШаблонОповещения
	
	ЗапросПоШаблонам = Новый Запрос();	
	ЗапросПоШаблонам.Текст = "ВЫБРАТЬ
	                         |	ШаблоныУниверсальныхПроцессовОповещенияПроцесса.Ссылка КАК Ссылка,
	                         |	ВЫРАЗИТЬ(ШаблоныУниверсальныхПроцессовОповещенияПроцесса.ШаблонОповещения КАК Справочник.УдалитьХранилищеШаблонов) КАК ХранилищеШаблоновСсылка
	                         |ПОМЕСТИТЬ ВТШаблоныУниверсальныхПроцессовОповещенияПроцесса
	                         |ИЗ
	                         |	Справочник.ШаблоныУниверсальныхПроцессов.ОповещенияПроцесса КАК ШаблоныУниверсальныхПроцессовОповещенияПроцесса
	                         |ГДЕ
	                         |	ШаблоныУниверсальныхПроцессовОповещенияПроцесса.ШаблонОповещения ССЫЛКА Справочник.УдалитьХранилищеШаблонов
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	ХранилищеШаблоновСсылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	ШаблоныУниверсальныхПроцессовОповещенияПроцесса.Ссылка КАК ШаблонУниверсальногоПроцесса,
	                         |	ШаблоныУниверсальныхПроцессовОповещенияПроцесса.ХранилищеШаблоновСсылка КАК ХранилищеШаблоновСсылка,
	                         |	ХранилищеШаблонов.Наименование КАК Наименование,
	                         |	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
	                         |	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
	                         |	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
	                         |	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ВидыОперацийУХ
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ВидыОперацийУХ)
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ХранилищеШаблонов.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА ХранилищеШаблонов.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон
	                         |ПОМЕСТИТЬ ВТХранилищеШаблонов
	                         |ИЗ
	                         |	ВТШаблоныУниверсальныхПроцессовОповещенияПроцесса КАК ШаблоныУниверсальныхПроцессовОповещенияПроцесса
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеШаблонов КАК ХранилищеШаблонов
	                         |		ПО ШаблоныУниверсальныхПроцессовОповещенияПроцесса.ХранилищеШаблоновСсылка = ХранилищеШаблонов.Ссылка
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	Наименование,
	                         |	ТипШаблона,
	                         |	ДатаСоздания,
	                         |	ДатаИзменения,
	                         |	ПользовательСоздал,
	                         |	ПользовательИзменил,
	                         |	ЭтапПроцесса,
	                         |	ШаблонПроцесса,
	                         |	НазначениеОповещения,
	                         |	ВидОбъектаОповещения,
	                         |	ТипОбъектаОповещения,
	                         |	КатегорияОповещения,
	                         |	НестандартныйШаблон
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТШаблоныУниверсальныхПроцессовОповещенияПроцесса
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ШаблоныОповещений.Ссылка КАК ШаблонОповещения,
	                         |	ШаблоныОповещений.Наименование КАК Наименование,
	                         |	ШаблоныОповещений.ТипШаблона КАК ТипШаблона,
	                         |	ШаблоныОповещений.ДатаСоздания КАК ДатаСоздания,
	                         |	ШаблоныОповещений.ДатаИзменения КАК ДатаИзменения,
	                         |	ШаблоныОповещений.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ШаблоныОповещений.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ШаблоныОповещений.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ШаблоныОповещений.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ШаблоныОповещений.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.УдалитьВидыОперацийБюджетирование
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.УдалитьВидыОперацийБюджетирование)
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ШаблоныОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА ШаблоныОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ШаблоныОповещений.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ШаблоныОповещений.НестандартныйШаблон КАК НестандартныйШаблон
	                         |ПОМЕСТИТЬ ВТШаблоныОповещений
	                         |ИЗ
	                         |	Справочник.ШаблоныОповещений КАК ШаблоныОповещений
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	Наименование,
	                         |	ТипШаблона,
	                         |	ДатаСоздания,
	                         |	ДатаИзменения,
	                         |	ПользовательСоздал,
	                         |	ПользовательИзменил,
	                         |	ЭтапПроцесса,
	                         |	ШаблонПроцесса,
	                         |	НазначениеОповещения,
	                         |	ВидОбъектаОповещения,
	                         |	ТипОбъектаОповещения,
	                         |	КатегорияОповещения,
	                         |	НестандартныйШаблон
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	ШаблоныОповещений.ШаблонОповещения КАК ШаблоныОповещенийСсылка,
	                         |	ХранилищеШаблонов.ХранилищеШаблоновСсылка КАК ХранилищеШаблоновСсылка,
	                         |	ХранилищеШаблонов.ШаблонУниверсальногоПроцесса КАК ШаблонУниверсальногоПроцесса,
	                         |	ХранилищеШаблонов.Наименование КАК Наименование,
	                         |	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
	                         |	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
	                         |	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
	                         |	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ХранилищеШаблонов.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	                         |	ХранилищеШаблонов.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	                         |	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон,
	                         |	ЕСТЬNULL(ХранилищеШаблоновСписокОтветственных.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь
	                         |ИЗ
	                         |	ВТХранилищеШаблонов КАК ХранилищеШаблонов
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТШаблоныОповещений КАК ШаблоныОповещений
	                         |		ПО ХранилищеШаблонов.Наименование = ШаблоныОповещений.Наименование
	                         |			И ХранилищеШаблонов.ТипШаблона = ШаблоныОповещений.ТипШаблона
	                         |			И ХранилищеШаблонов.ДатаСоздания = ШаблоныОповещений.ДатаСоздания
	                         |			И ХранилищеШаблонов.ДатаИзменения = ШаблоныОповещений.ДатаИзменения
	                         |			И ХранилищеШаблонов.ПользовательСоздал = ШаблоныОповещений.ПользовательСоздал
	                         |			И ХранилищеШаблонов.ПользовательИзменил = ШаблоныОповещений.ПользовательИзменил
	                         |			И ХранилищеШаблонов.ЭтапПроцесса = ШаблоныОповещений.ЭтапПроцесса
	                         |			И ХранилищеШаблонов.ШаблонПроцесса = ШаблоныОповещений.ШаблонПроцесса
	                         |			И ХранилищеШаблонов.НазначениеОповещения = ШаблоныОповещений.НазначениеОповещения
	                         |			И ХранилищеШаблонов.ВидОбъектаОповещения = ШаблоныОповещений.ВидОбъектаОповещения
	                         |			И ХранилищеШаблонов.ТипОбъектаОповещения = ШаблоныОповещений.ТипОбъектаОповещения
	                         |			И ХранилищеШаблонов.КатегорияОповещения = ШаблоныОповещений.КатегорияОповещения
	                         |			И ХранилищеШаблонов.НестандартныйШаблон = ШаблоныОповещений.НестандартныйШаблон
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеШаблонов.СписокОтветственных КАК ХранилищеШаблоновСписокОтветственных
	                         |		ПО ХранилищеШаблонов.ХранилищеШаблоновСсылка = ХранилищеШаблоновСписокОтветственных.Ссылка
	                         |ИТОГИ
	                         |	МАКСИМУМ(ШаблоныОповещенийСсылка),
	                         |	МАКСИМУМ(Наименование),
	                         |	МАКСИМУМ(ТипШаблона),
	                         |	МАКСИМУМ(ДатаСоздания),
	                         |	МАКСИМУМ(ДатаИзменения),
	                         |	МАКСИМУМ(ПользовательСоздал),
	                         |	МАКСИМУМ(ПользовательИзменил),
	                         |	МАКСИМУМ(ЭтапПроцесса),
	                         |	МАКСИМУМ(ШаблонПроцесса),
	                         |	МАКСИМУМ(НазначениеОповещения),
	                         |	МАКСИМУМ(ВидОбъектаОповещения),
	                         |	МАКСИМУМ(ТипОбъектаОповещения),
	                         |	МАКСИМУМ(КатегорияОповещения),
	                         |	МАКСИМУМ(НестандартныйШаблон)
	                         |ПО
	                         |	ШаблонУниверсальногоПроцесса,
	                         |	ХранилищеШаблоновСсылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТХранилищеШаблонов
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТШаблоныОповещений";
	
	ВыборкаПоШаблонамУниверсальныхПроцессов = ЗапросПоШаблонам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
	Пока ВыборкаПоШаблонамУниверсальныхПроцессов.Следующий() Цикл
		
		Попытка
			ШаблонУниверсальногоПроцессаОбъект = ВыборкаПоШаблонамУниверсальныхПроцессов.ШаблонУниверсальногоПроцесса.ПолучитьОбъект();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось произвести замену значений в справочнике ""%1""
			|%2'"),
			"ШаблоныУниверсальныхПроцессов",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
			
			Продолжить;
		КонецПопытки;
				
		ВыборкаПоХранилищамШаблонов = ВыборкаПоШаблонамУниверсальныхПроцессов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоХранилищамШаблонов.Следующий() Цикл
						
			НовыйШаблонОповещений = СоответствиеШаблонов.Получить(ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка);
			
			Если НовыйШаблонОповещений = Неопределено Тогда 
				НовыйШаблонОповещений = СоздатьШаблонОповещений(ВыборкаПоХранилищамШаблонов);
				
				Если НовыйШаблонОповещений = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				СоответствиеШаблонов.Вставить(ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка, НовыйШаблонОповещений);
			КонецЕсли;
			
			МассивСтрокДляЗамены = ШаблонУниверсальногоПроцессаОбъект.ОповещенияПроцесса.НайтиСтроки(Новый Структура("ШаблонОповещения", ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка));
			Для Каждого СтрокаДляЗамены Из МассивСтрокДляЗамены Цикл
				СтрокаДляЗамены.ШаблонОповещения = НовыйШаблонОповещений;
			КонецЦикла;
				
			Попытка
				ШаблонУниверсальногоПроцессаОбъект.Записать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не удалось записать справочник ""%1""
				|%2'"),
				"ШаблоныУниверсальныхПроцессов",
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				ТекстСообщения);
				
				Продолжить;
			КонецПопытки;
			
		КонецЦикла;
			
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 2. РегистрСведений.НастройкиОповещений.Ресурс.ШаблонОповещения
		
	ЗапросПоШаблонам.Текст = "ВЫБРАТЬ
	                         |	НастройкиОповещений.КатегорияОповещения КАК КатегорияОповещения,
	                         |	НастройкиОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
	                         |	ВЫБОР
	                         |		КОГДА НастройкиОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА НастройкиОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА НастройкиОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ВидыОперацийУХ
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ВидОбъектаОповещения КАК Справочник.ВидыОперацийУХ)
	                         |		КОГДА НастройкиОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА НастройкиОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		КОГДА НастройкиОповещений.ВидОбъектаОповещения ССЫЛКА Перечисление.ВидыМероприятий
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ВидОбъектаОповещения КАК Перечисление.ВидыМероприятий)
	                         |		КОГДА НастройкиОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ВидыОтчетов
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.ВидОбъектаОповещения КАК Справочник.ВидыОтчетов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА НастройкиОповещений.УдалитьВидОбъектаОповещения ССЫЛКА Справочник.УдалитьВидыОперацийБюджетирование
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.УдалитьВидОбъектаОповещения КАК Справочник.УдалитьВидыОперацийБюджетирование)
	                         |		КОГДА НастройкиОповещений.УдалитьВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.УдалитьВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА НастройкиОповещений.УдалитьВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.УдалитьВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		КОГДА НастройкиОповещений.УдалитьВидОбъектаОповещения ССЫЛКА Перечисление.ВидыМероприятий
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.УдалитьВидОбъектаОповещения КАК Перечисление.ВидыМероприятий)
	                         |		КОГДА НастройкиОповещений.УдалитьВидОбъектаОповещения ССЫЛКА Справочник.ВидыОтчетов
	                         |			ТОГДА ВЫРАЗИТЬ(НастройкиОповещений.УдалитьВидОбъектаОповещения КАК Справочник.ВидыОтчетов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК УдалитьВидОбъектаОповещения,
	                         |	ВЫРАЗИТЬ(НастройкиОповещений.ШаблонОповещения КАК Справочник.УдалитьХранилищеШаблонов) КАК ХранилищеШаблоновСсылка
	                         |ПОМЕСТИТЬ ВТНастройкиОповещений
	                         |ИЗ
	                         |	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	                         |ГДЕ
	                         |	НастройкиОповещений.ШаблонОповещения ССЫЛКА Справочник.УдалитьХранилищеШаблонов
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	ХранилищеШаблоновСсылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	НастройкиОповещений.КатегорияОповещения КАК КатегорияОповещенияРегистр,
	                         |	НастройкиОповещений.ВидСобытияОповещения КАК ВидСобытияОповещенияРегистр,
	                         |	НастройкиОповещений.ТипОбъектаОповещения КАК ТипОбъектаОповещенияРегистр,
	                         |	НастройкиОповещений.ВидОбъектаОповещения КАК ВидОбъектаОповещенияРегистр,
	                         |	НастройкиОповещений.УдалитьВидОбъектаОповещения КАК УдалитьВидОбъектаОповещенияРегистр,
	                         |	НастройкиОповещений.ХранилищеШаблоновСсылка КАК ХранилищеШаблоновСсылка,
	                         |	ХранилищеШаблонов.Наименование КАК Наименование,
	                         |	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
	                         |	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
	                         |	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
	                         |	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ВидыОперацийУХ
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ВидыОперацийУХ)
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ХранилищеШаблонов.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА ХранилищеШаблонов.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон
	                         |ПОМЕСТИТЬ ВТХранилищеШаблонов
	                         |ИЗ
	                         |	ВТНастройкиОповещений КАК НастройкиОповещений
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеШаблонов КАК ХранилищеШаблонов
	                         |		ПО НастройкиОповещений.ХранилищеШаблоновСсылка = ХранилищеШаблонов.Ссылка
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	Наименование,
	                         |	ТипШаблона,
	                         |	ДатаСоздания,
	                         |	ДатаИзменения,
	                         |	ПользовательСоздал,
	                         |	ПользовательИзменил,
	                         |	ЭтапПроцесса,
	                         |	ШаблонПроцесса,
	                         |	НазначениеОповещения,
	                         |	ВидОбъектаОповещения,
	                         |	ТипОбъектаОповещения,
	                         |	КатегорияОповещения,
	                         |	НестандартныйШаблон
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТНастройкиОповещений
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	ШаблоныОповещений.Ссылка КАК ШаблонОповещения,
	                         |	ШаблоныОповещений.Наименование КАК Наименование,
	                         |	ШаблоныОповещений.ТипШаблона КАК ТипШаблона,
	                         |	ШаблоныОповещений.ДатаСоздания КАК ДатаСоздания,
	                         |	ШаблоныОповещений.ДатаИзменения КАК ДатаИзменения,
	                         |	ШаблоныОповещений.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ШаблоныОповещений.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ШаблоныОповещений.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ШаблоныОповещений.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ШаблоныОповещений.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.УдалитьВидыОперацийБюджетирование
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.УдалитьВидыОперацийБюджетирование)
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ШаблоныОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА ШаблоныОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ШаблоныОповещений.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ШаблоныОповещений.НестандартныйШаблон КАК НестандартныйШаблон
	                         |ПОМЕСТИТЬ ВТШаблоныОповещений
	                         |ИЗ
	                         |	Справочник.ШаблоныОповещений КАК ШаблоныОповещений
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	Наименование,
	                         |	ТипШаблона,
	                         |	ДатаСоздания,
	                         |	ДатаИзменения,
	                         |	ПользовательСоздал,
	                         |	ПользовательИзменил,
	                         |	ЭтапПроцесса,
	                         |	ШаблонПроцесса,
	                         |	НазначениеОповещения,
	                         |	ВидОбъектаОповещения,
	                         |	ТипОбъектаОповещения,
	                         |	КатегорияОповещения,
	                         |	НестандартныйШаблон
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ШаблоныОповещений.ШаблонОповещения КАК ШаблоныОповещенийСсылка,
	                         |	ХранилищеШаблонов.КатегорияОповещенияРегистр КАК КатегорияОповещенияРегистр,
	                         |	ХранилищеШаблонов.ВидСобытияОповещенияРегистр КАК ВидСобытияОповещенияРегистр,
	                         |	ХранилищеШаблонов.ТипОбъектаОповещенияРегистр КАК ТипОбъектаОповещенияРегистр,
	                         |	ХранилищеШаблонов.ВидОбъектаОповещенияРегистр КАК ВидОбъектаОповещенияРегистр,
	                         |	ХранилищеШаблонов.УдалитьВидОбъектаОповещенияРегистр КАК УдалитьВидОбъектаОповещенияРегистр,
	                         |	ХранилищеШаблонов.ХранилищеШаблоновСсылка КАК ХранилищеШаблоновСсылка,
	                         |	ХранилищеШаблонов.Наименование КАК Наименование,
	                         |	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
	                         |	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
	                         |	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
	                         |	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ХранилищеШаблонов.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	                         |	ХранилищеШаблонов.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	                         |	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон,
	                         |	ЕСТЬNULL(ХранилищеШаблоновСписокОтветственных.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь
	                         |ИЗ
	                         |	ВТХранилищеШаблонов КАК ХранилищеШаблонов
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТШаблоныОповещений КАК ШаблоныОповещений
	                         |		ПО ХранилищеШаблонов.Наименование = ШаблоныОповещений.Наименование
	                         |			И ХранилищеШаблонов.ТипШаблона = ШаблоныОповещений.ТипШаблона
	                         |			И ХранилищеШаблонов.ДатаСоздания = ШаблоныОповещений.ДатаСоздания
	                         |			И ХранилищеШаблонов.ДатаИзменения = ШаблоныОповещений.ДатаИзменения
	                         |			И ХранилищеШаблонов.ПользовательСоздал = ШаблоныОповещений.ПользовательСоздал
	                         |			И ХранилищеШаблонов.ПользовательИзменил = ШаблоныОповещений.ПользовательИзменил
	                         |			И ХранилищеШаблонов.ЭтапПроцесса = ШаблоныОповещений.ЭтапПроцесса
	                         |			И ХранилищеШаблонов.ШаблонПроцесса = ШаблоныОповещений.ШаблонПроцесса
	                         |			И ХранилищеШаблонов.НазначениеОповещения = ШаблоныОповещений.НазначениеОповещения
	                         |			И ХранилищеШаблонов.ВидОбъектаОповещения = ШаблоныОповещений.ВидОбъектаОповещения
	                         |			И ХранилищеШаблонов.ТипОбъектаОповещения = ШаблоныОповещений.ТипОбъектаОповещения
	                         |			И ХранилищеШаблонов.КатегорияОповещения = ШаблоныОповещений.КатегорияОповещения
	                         |			И ХранилищеШаблонов.НестандартныйШаблон = ШаблоныОповещений.НестандартныйШаблон
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеШаблонов.СписокОтветственных КАК ХранилищеШаблоновСписокОтветственных
	                         |		ПО ХранилищеШаблонов.ХранилищеШаблоновСсылка = ХранилищеШаблоновСписокОтветственных.Ссылка
	                         |ИТОГИ
	                         |	МАКСИМУМ(ШаблоныОповещенийСсылка),
	                         |	МАКСИМУМ(Наименование),
	                         |	МАКСИМУМ(ТипШаблона),
	                         |	МАКСИМУМ(ДатаСоздания),
	                         |	МАКСИМУМ(ДатаИзменения),
	                         |	МАКСИМУМ(ПользовательСоздал),
	                         |	МАКСИМУМ(ПользовательИзменил),
	                         |	МАКСИМУМ(ЭтапПроцесса),
	                         |	МАКСИМУМ(ШаблонПроцесса),
	                         |	МАКСИМУМ(НазначениеОповещения),
	                         |	МАКСИМУМ(ВидОбъектаОповещения),
	                         |	МАКСИМУМ(ТипОбъектаОповещения),
	                         |	МАКСИМУМ(КатегорияОповещения),
	                         |	МАКСИМУМ(НестандартныйШаблон)
	                         |ПО
	                         |	КатегорияОповещенияРегистр,
	                         |	ВидСобытияОповещенияРегистр,
	                         |	ТипОбъектаОповещенияРегистр,
	                         |	ВидОбъектаОповещенияРегистр,
	                         |	УдалитьВидОбъектаОповещенияРегистр,
	                         |	ХранилищеШаблоновСсылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТХранилищеШаблонов
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТШаблоныОповещений";
	
	ВыборкаПоКатегориямОповещений = ЗапросПоШаблонам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписьРегистра = РегистрыСведений.НастройкиОповещений.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаПоКатегориямОповещений.Следующий() Цикл
		
		ЗаписьРегистра.КатегорияОповещения = ВыборкаПоКатегориямОповещений.КатегорияОповещенияРегистр;
		ВыборкаПоВидамСобытийОповещений = ВыборкаПоКатегориямОповещений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоВидамСобытийОповещений.Следующий() Цикл			
			
			ЗаписьРегистра.ВидСобытияОповещения = ВыборкаПоВидамСобытийОповещений.ВидСобытияОповещенияРегистр;
			ВыборкаПоТипамОбъектовОповещений = ВыборкаПоВидамСобытийОповещений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоТипамОбъектовОповещений.Следующий() Цикл
							
				ЗаписьРегистра.ТипОбъектаОповещения = ВыборкаПоТипамОбъектовОповещений.ТипОбъектаОповещенияРегистр;
				ВыборкаПоВидамОбъектовОповещений = ВыборкаПоТипамОбъектовОповещений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоВидамОбъектовОповещений.Следующий() Цикл
	
					ЗаписьРегистра.ВидОбъектаОповещения = ВыборкаПоВидамОбъектовОповещений.ВидОбъектаОповещенияРегистр;
					ВыборкаПоНеиспользуемымВидамОбъектовОповещений = ВыборкаПоВидамОбъектовОповещений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоНеиспользуемымВидамОбъектовОповещений.Следующий() Цикл
						
						ЗаписьРегистра.УдалитьВидОбъектаОповещения = ВыборкаПоНеиспользуемымВидамОбъектовОповещений.УдалитьВидОбъектаОповещенияРегистр;
						
						ЗаписьРегистра.Прочитать();
						
						Если ЗаписьРегистра.Выбран() тогда
								
							ВыборкаПоХранилищамШаблонов = ВыборкаПоНеиспользуемымВидамОбъектовОповещений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							
							Пока ВыборкаПоХранилищамШаблонов.Следующий() Цикл
								
								НовыйШаблонОповещений = СоответствиеШаблонов.Получить(ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка);
								
								Если НовыйШаблонОповещений = Неопределено Тогда
									НовыйШаблонОповещений = СоздатьШаблонОповещений(ВыборкаПоХранилищамШаблонов);
									
									Если НовыйШаблонОповещений = Неопределено Тогда
										Продолжить;
									КонецЕсли;
									
									СоответствиеШаблонов.Вставить(ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка, НовыйШаблонОповещений);
								КонецЕсли;
								
								ЗаписьРегистра.ШаблонОповещения = НовыйШаблонОповещений;
								
								Попытка
									ЗаписьРегистра.Записать();
								Исключение
									ТекстСообщения = СтрШаблон(НСтр(
									"ru = 'Не удалось записать регистр сведений ""%1""
									|%2'"),
									"НастройкиОповещений",
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
									ЗаписьЖурналаРегистрации(
									ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
									УровеньЖурналаРегистрации.Ошибка,
									,
									, 
									ТекстСообщения);
									
									Продолжить;
								КонецПопытки;
								
							КонецЦикла;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// 3. РегистрСведений.СобытияОповещений.Ресурс.ШаблонОповещения
		
	ЗапросПоШаблонам.Текст = "ВЫБРАТЬ
	                         |	СобытияОповещений.СпособОповещения КАК СпособОповещения,
	                         |	ВЫБОР
	                         |		КОГДА СобытияОповещений.Получатель ССЫЛКА Справочник.Контрагенты
	                         |			ТОГДА ВЫРАЗИТЬ(СобытияОповещений.Получатель КАК Справочник.Контрагенты)
	                         |		КОГДА СобытияОповещений.Получатель ССЫЛКА Справочник.Пользователи
	                         |			ТОГДА ВЫРАЗИТЬ(СобытияОповещений.Получатель КАК Справочник.Пользователи)
	                         |		КОГДА СобытияОповещений.Получатель ССЫЛКА Справочник.ФизическиеЛица
	                         |			ТОГДА ВЫРАЗИТЬ(СобытияОповещений.Получатель КАК Справочник.ФизическиеЛица)
	                         |		ИНАЧЕ ВЫРАЗИТЬ(СобытияОповещений.Получатель КАК СТРОКА(10))
	                         |	КОНЕЦ КАК Получатель,
	                         |	СобытияОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
	                         |	СобытияОповещений.Источник КАК Источник,
	                         |	СобытияОповещений.ДатаДобавления КАК ДатаДобавления,
	                         |	СобытияОповещений.ИдентификаторОповещения КАК ИдентификаторОповещения,
	                         |	ВЫРАЗИТЬ(СобытияОповещений.ХранилищеШаблона КАК Справочник.УдалитьХранилищеШаблонов) КАК ХранилищеШаблоновСсылка
	                         |ПОМЕСТИТЬ ВТСобытияОповещений
	                         |ИЗ
	                         |	РегистрСведений.СобытияОповещений КАК СобытияОповещений
	                         |ГДЕ
	                         |	СобытияОповещений.ХранилищеШаблона ССЫЛКА Справочник.УдалитьХранилищеШаблонов
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	ХранилищеШаблоновСсылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	СобытияОповещений.СпособОповещения КАК СпособОповещенияРегистр,
	                         |	СобытияОповещений.Получатель КАК ПолучательРегистр,
	                         |	СобытияОповещений.ВидСобытияОповещения КАК ВидСобытияОповещенияРегистр,
	                         |	СобытияОповещений.Источник КАК ИсточникРегистр,
	                         |	СобытияОповещений.ДатаДобавления КАК ДатаДобавленияРегистр,
	                         |	СобытияОповещений.ИдентификаторОповещения КАК ИдентификаторОповещенияРегистр,
	                         |	СобытияОповещений.ХранилищеШаблоновСсылка КАК ХранилищеШаблоновСсылка,
	                         |	ХранилищеШаблонов.Наименование КАК Наименование,
	                         |	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
	                         |	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
	                         |	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
	                         |	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ВидыОперацийУХ
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ВидыОперацийУХ)
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА ХранилищеШаблонов.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ХранилищеШаблонов.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА ХранилищеШаблонов.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(ХранилищеШаблонов.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон
	                         |ПОМЕСТИТЬ ВТХранилищеШаблонов
	                         |ИЗ
	                         |	ВТСобытияОповещений КАК СобытияОповещений
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеШаблонов КАК ХранилищеШаблонов
	                         |		ПО СобытияОповещений.ХранилищеШаблоновСсылка = ХранилищеШаблонов.Ссылка
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	Наименование,
	                         |	ТипШаблона,
	                         |	ДатаСоздания,
	                         |	ДатаИзменения,
	                         |	ПользовательСоздал,
	                         |	ПользовательИзменил,
	                         |	ЭтапПроцесса,
	                         |	ШаблонПроцесса,
	                         |	НазначениеОповещения,
	                         |	ВидОбъектаОповещения,
	                         |	ТипОбъектаОповещения,
	                         |	КатегорияОповещения,
	                         |	НестандартныйШаблон
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ РАЗЛИЧНЫЕ
	                         |	ШаблоныОповещений.Ссылка КАК ШаблонОповещения,
	                         |	ШаблоныОповещений.Наименование КАК Наименование,
	                         |	ШаблоныОповещений.ТипШаблона КАК ТипШаблона,
	                         |	ШаблоныОповещений.ДатаСоздания КАК ДатаСоздания,
	                         |	ШаблоныОповещений.ДатаИзменения КАК ДатаИзменения,
	                         |	ШаблоныОповещений.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ШаблоныОповещений.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ШаблоныОповещений.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ШаблоныОповещений.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ШаблоныОповещений.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.УдалитьВидыОперацийБюджетирование
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.УдалитьВидыОперацийБюджетирование)
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.ШаблоныУниверсальныхПроцессов)
	                         |		КОГДА ШаблоныОповещений.ВидОбъектаОповещения ССЫЛКА Справочник.ЭтапыУниверсальныхПроцессов
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ВидОбъектаОповещения КАК Справочник.ЭтапыУниверсальныхПроцессов)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ВидОбъектаОповещения,
	                         |	ВЫБОР
	                         |		КОГДА ШаблоныОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.СправочникиБД
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ТипОбъектаОповещения КАК Справочник.СправочникиБД)
	                         |		КОГДА ШаблоныОповещений.ТипОбъектаОповещения ССЫЛКА Справочник.ДокументыБД
	                         |			ТОГДА ВЫРАЗИТЬ(ШаблоныОповещений.ТипОбъектаОповещения КАК Справочник.ДокументыБД)
	                         |		ИНАЧЕ НЕОПРЕДЕЛЕНО
	                         |	КОНЕЦ КАК ТипОбъектаОповещения,
	                         |	ШаблоныОповещений.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ШаблоныОповещений.НестандартныйШаблон КАК НестандартныйШаблон
	                         |ПОМЕСТИТЬ ВТШаблоныОповещений
	                         |ИЗ
	                         |	Справочник.ШаблоныОповещений КАК ШаблоныОповещений
	                         |
	                         |ИНДЕКСИРОВАТЬ ПО
	                         |	Наименование,
	                         |	ТипШаблона,
	                         |	ДатаСоздания,
	                         |	ДатаИзменения,
	                         |	ПользовательСоздал,
	                         |	ПользовательИзменил,
	                         |	ЭтапПроцесса,
	                         |	ШаблонПроцесса,
	                         |	НазначениеОповещения,
	                         |	ВидОбъектаОповещения,
	                         |	ТипОбъектаОповещения,
	                         |	КатегорияОповещения,
	                         |	НестандартныйШаблон
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ
	                         |	ШаблоныОповещений.ШаблонОповещения КАК ШаблоныОповещенийСсылка,
	                         |	ХранилищеШаблонов.СпособОповещенияРегистр КАК СпособОповещенияРегистр,
	                         |	ХранилищеШаблонов.ПолучательРегистр КАК ПолучательРегистр,
	                         |	ХранилищеШаблонов.ВидСобытияОповещенияРегистр КАК ВидСобытияОповещенияРегистр,
	                         |	ХранилищеШаблонов.ИсточникРегистр КАК ИсточникРегистр,
	                         |	ХранилищеШаблонов.ДатаДобавленияРегистр КАК ДатаДобавленияРегистр,
	                         |	ХранилищеШаблонов.ИдентификаторОповещенияРегистр КАК ИдентификаторОповещенияРегистр,
	                         |	ХранилищеШаблонов.ХранилищеШаблоновСсылка КАК ХранилищеШаблоновСсылка,
	                         |	ХранилищеШаблонов.Наименование КАК Наименование,
	                         |	ХранилищеШаблонов.ТипШаблона КАК ТипШаблона,
	                         |	ХранилищеШаблонов.ДатаСоздания КАК ДатаСоздания,
	                         |	ХранилищеШаблонов.ДатаИзменения КАК ДатаИзменения,
	                         |	ХранилищеШаблонов.ПользовательСоздал КАК ПользовательСоздал,
	                         |	ХранилищеШаблонов.ПользовательИзменил КАК ПользовательИзменил,
	                         |	ХранилищеШаблонов.ЭтапПроцесса КАК ЭтапПроцесса,
	                         |	ХранилищеШаблонов.ШаблонПроцесса КАК ШаблонПроцесса,
	                         |	ХранилищеШаблонов.НазначениеОповещения КАК НазначениеОповещения,
	                         |	ХранилищеШаблонов.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	                         |	ХранилищеШаблонов.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	                         |	ХранилищеШаблонов.КатегорияОповещения КАК КатегорияОповещения,
	                         |	ХранилищеШаблонов.НестандартныйШаблон КАК НестандартныйШаблон,
	                         |	ЕСТЬNULL(ХранилищеШаблоновСписокОтветственных.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Пользователь
	                         |ИЗ
	                         |	ВТХранилищеШаблонов КАК ХранилищеШаблонов
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ ВТШаблоныОповещений КАК ШаблоныОповещений
	                         |		ПО ХранилищеШаблонов.ТипШаблона = ШаблоныОповещений.ТипШаблона
	                         |			И ХранилищеШаблонов.Наименование = ШаблоныОповещений.Наименование
	                         |			И ХранилищеШаблонов.ДатаСоздания = ШаблоныОповещений.ДатаСоздания
	                         |			И ХранилищеШаблонов.ДатаИзменения = ШаблоныОповещений.ДатаИзменения
	                         |			И ХранилищеШаблонов.ПользовательСоздал = ШаблоныОповещений.ПользовательСоздал
	                         |			И ХранилищеШаблонов.ПользовательИзменил = ШаблоныОповещений.ПользовательИзменил
	                         |			И ХранилищеШаблонов.ЭтапПроцесса = ШаблоныОповещений.ЭтапПроцесса
	                         |			И ХранилищеШаблонов.ШаблонПроцесса = ШаблоныОповещений.ШаблонПроцесса
	                         |			И ХранилищеШаблонов.НазначениеОповещения = ШаблоныОповещений.НазначениеОповещения
	                         |			И ХранилищеШаблонов.ВидОбъектаОповещения = ШаблоныОповещений.ВидОбъектаОповещения
	                         |			И ХранилищеШаблонов.ТипОбъектаОповещения = ШаблоныОповещений.ТипОбъектаОповещения
	                         |			И ХранилищеШаблонов.КатегорияОповещения = ШаблоныОповещений.КатегорияОповещения
	                         |			И ХранилищеШаблонов.НестандартныйШаблон = ШаблоныОповещений.НестандартныйШаблон
	                         |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьХранилищеШаблонов.СписокОтветственных КАК ХранилищеШаблоновСписокОтветственных
	                         |		ПО ХранилищеШаблонов.ХранилищеШаблоновСсылка = ХранилищеШаблоновСписокОтветственных.Ссылка
	                         |ИТОГИ
	                         |	МАКСИМУМ(ШаблоныОповещенийСсылка),
	                         |	МАКСИМУМ(Наименование),
	                         |	МАКСИМУМ(ТипШаблона),
	                         |	МАКСИМУМ(ДатаСоздания),
	                         |	МАКСИМУМ(ДатаИзменения),
	                         |	МАКСИМУМ(ПользовательСоздал),
	                         |	МАКСИМУМ(ПользовательИзменил),
	                         |	МАКСИМУМ(ЭтапПроцесса),
	                         |	МАКСИМУМ(ШаблонПроцесса),
	                         |	МАКСИМУМ(НазначениеОповещения),
	                         |	МАКСИМУМ(ВидОбъектаОповещения),
	                         |	МАКСИМУМ(ТипОбъектаОповещения),
	                         |	МАКСИМУМ(КатегорияОповещения),
	                         |	МАКСИМУМ(НестандартныйШаблон)
	                         |ПО
	                         |	СпособОповещенияРегистр,
	                         |	ПолучательРегистр,
	                         |	ВидСобытияОповещенияРегистр,
	                         |	ИсточникРегистр,
	                         |	ДатаДобавленияРегистр,
	                         |	ИдентификаторОповещенияРегистр,
	                         |	ХранилищеШаблоновСсылка
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТХранилищеШаблонов
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |УНИЧТОЖИТЬ ВТШаблоныОповещений";
	
	ВыборкаПоСпособамОповещения = ЗапросПоШаблонам.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаписьРегистра = РегистрыСведений.СобытияОповещений.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаПоСпособамОповещения.Следующий() Цикл
		
		ЗаписьРегистра.СпособОповещения = ВыборкаПоСпособамОповещения.СпособОповещенияРегистр;
		ВыборкаПоПолучателям = ВыборкаПоСпособамОповещения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПолучателям.Следующий() Цикл
			
			ЗаписьРегистра.Получатель = ВыборкаПоПолучателям.ПолучательРегистр;
			ВыборкаПоВидамСобытийОповещений = ВыборкаПоПолучателям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПоВидамСобытийОповещений.Следующий() Цикл			
				
				ЗаписьРегистра.ВидСобытияОповещения = ВыборкаПоВидамСобытийОповещений.ВидСобытияОповещенияРегистр;
				ВыборкаПоИсточникам = ВыборкаПоВидамСобытийОповещений.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				Пока ВыборкаПоИсточникам.Следующий() Цикл
								
					ЗаписьРегистра.Источник = ВыборкаПоИсточникам.ИсточникРегистр;
					ВыборкаПоДатамДобавления = ВыборкаПоИсточникам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Пока ВыборкаПоДатамДобавления.Следующий() Цикл
		
						ЗаписьРегистра.ДатаДобавления = ВыборкаПоДатамДобавления.ДатаДобавленияРегистр;
						ВыборкаПоИдентификаторамОповещения = ВыборкаПоДатамДобавления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						
						Пока ВыборкаПоИдентификаторамОповещения.Следующий() Цикл
							
							ЗаписьРегистра.ИдентификаторОповещения = ВыборкаПоИдентификаторамОповещения.ИдентификаторОповещенияРегистр;
							
							ЗаписьРегистра.Прочитать();
							
							Если ЗаписьРегистра.Выбран() тогда
								
								ВыборкаПоХранилищамШаблонов = ВыборкаПоИдентификаторамОповещения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
								
								Пока ВыборкаПоХранилищамШаблонов.Следующий() Цикл
									
									НовыйШаблонОповещений = СоответствиеШаблонов.Получить(ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка);
									
									Если НовыйШаблонОповещений = Неопределено Тогда
										НовыйШаблонОповещений = СоздатьШаблонОповещений(ВыборкаПоХранилищамШаблонов);
										
										Если НовыйШаблонОповещений = Неопределено Тогда
											Продолжить;
										КонецЕсли;
										
										СоответствиеШаблонов.Вставить(ВыборкаПоХранилищамШаблонов.ХранилищеШаблоновСсылка, НовыйШаблонОповещений);
									КонецЕсли;
									
									ЗаписьРегистра.ХранилищеШаблона = НовыйШаблонОповещений;
									
									Попытка
										ЗаписьРегистра.Записать();
									Исключение
										ТекстСообщения = СтрШаблон(НСтр(
										"ru = 'Не удалось записать регистр сведений ""%1""
										|%2'"),
										"СобытияОповещений",
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
										
										ЗаписьЖурналаРегистрации(
										ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
										УровеньЖурналаРегистрации.Ошибка,
										,
										, 
										ТекстСообщения);
										
										Продолжить;
									КонецПопытки;
									
								КонецЦикла;
							КонецЕсли;
						КонецЦикла;	
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры   

Процедура ОбновитьИзмерениеПользователи() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиПравДоступаПользователейВидыОтчетов.УдалитьПользователь КАК УдалитьПользователь
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователейВидыОтчетов КАК НастройкиПравДоступаПользователейВидыОтчетов";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПользовательСтар=Результат.УдалитьПользователь;
		ПользовательНов=ПолучитьНовогоПользователя(ПользовательСтар);
		
		// Удаляем результирующие записи по старому варианту пользователей
		
		НаборЗаписейСтар=РегистрыСведений.НастройкиПравДоступаПользователейВидыОтчетовРазвернутые.СоздатьНаборЗаписей();
		НаборЗаписейСтар.Отбор.УдалитьПользовательИсточник.Установить(ПользовательСтар);
		НаборЗаписейСтар.Записать(Истина);
		
		// Обновляем пользователей и результирующие записи
		
		НаборЗаписейТек=РегистрыСведений.НастройкиПравДоступаПользователейВидыОтчетов.СоздатьНаборЗаписей();
		НаборЗаписейТек.Отбор.УдалитьПользователь.Установить(ПользовательСтар);
		НаборЗаписейТек.Прочитать();
		
		Для Каждого Строка ИЗ НаборЗаписейТек Цикл
			
			Строка.Пользователь=ПользовательНов;
			
		КонецЦикла;
		
		НаборЗаписейТек.ОбменДанными.Загрузка=Истина;
		НаборЗаписейТек.Записать();
		
		НаборЗаписейНов=РегистрыСведений.НастройкиПравДоступаПользователейВидыОтчетов.СоздатьНаборЗаписей();
		НаборЗаписейНов.Отбор.Пользователь.Установить(ПользовательНов);
		НаборЗаписейНов.Прочитать();
		НаборЗаписейНов.Записать();
		
	КонецЦикла;
				
КонецПроцедуры // ОбновитьИзмерениеПользователи()

Процедура ПерезаписатьСправочникиБДДляСогласования() Экспорт
	
	РеквизитСостояния = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", Истина,, Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если НЕ ЗначениеЗаполнено(РеквизитСостояния) тогда
		Возврат;
	КонецЕсли;
	
	СправочникСсылка = Справочники.СправочникиБД.НайтиПоНаименованию("СтатьиДвиженияДенежныхСредств", Истина,, Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если ЗначениеЗаполнено(СправочникСсылка) тогда
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(СправочникОбъект.РеквизитСостояния) тогда
			
			СправочникОбъект.РеквизитСостояния = РеквизитСостояния;
			СправочникОбъект.РеквизитСостоянияСтрока = "СостоянияСогласования";
			СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик 		= Перечисления.СостоянияСогласования.Черновик;
			СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
			СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияСогласования.Отклонена;
			СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
			
		КонецЕсли;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось подключить согласование в справочнике ""%1""
			|%2'"),
			"СтатьиДвиженияДенежныхСредств",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	СправочникСсылка = Справочники.СправочникиБД.НайтиПоНаименованию("СтатьиДвиженияРесурсов", Истина,, Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если ЗначениеЗаполнено(СправочникСсылка) тогда
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(СправочникОбъект.РеквизитСостояния) тогда
			
			СправочникОбъект.РеквизитСостояния = РеквизитСостояния;
			СправочникОбъект.РеквизитСостоянияСтрока = "СостоянияСогласования";
			СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик 		= Перечисления.СостоянияСогласования.Черновик;
			СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
			СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияСогласования.Отклонена;
			СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
			
		КонецЕсли;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось подключить согласование в справочнике ""%1""
			|%2'"),
			"СтатьиДвиженияРесурсов",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
	
	СправочникСсылка = Справочники.СправочникиБД.НайтиПоНаименованию("СтатьиДоходовИРасходов", Истина,, Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Если ЗначениеЗаполнено(СправочникСсылка) тогда
		
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(СправочникОбъект.РеквизитСостояния) тогда
			
			СправочникОбъект.РеквизитСостояния = РеквизитСостояния;
			СправочникОбъект.РеквизитСостоянияСтрока = "СостоянияСогласования";
			СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик 		= Перечисления.СостоянияСогласования.Черновик;
			СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
			СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияСогласования.Отклонена;
			СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
			
		КонецЕсли;
		
		Попытка
			СправочникОбъект.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось подключить согласование в справочнике ""%1""
			|%2'"),
			"СтатьиДоходовИРасходов",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьНовогоПользователя(ПользовательСтар)
	
	Если ТипЗнч(ПользовательСтар)=Тип("СправочникСсылка.Пользователи") Тогда
		
		Возврат ПользовательСтар;
		
	Иначе
		
		НовыйПользователь=Справочники.ГруппыДоступаПользователиВидыОтчетов.НайтиПоНаименованию(ПользовательСтар.Наименование);
		
		Если ЗначениеЗаполнено(НовыйПользователь) Тогда
			
			Возврат НовыйПользователь;
			
		КонецЕсли;
		
		СправочникНов=Справочники.ГруппыДоступаПользователиВидыОтчетов.СоздатьЭлемент();
		СправочникНов.Наименование=ПользовательСтар.Наименование;
		СправочникНов.Пользователи.Загрузить(ПользовательСтар.Состав.Выгрузить());
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СправочникНов);
				
		Возврат СправочникНов.Ссылка;
		
	КонецЕсли;
		
КонецФункции // ПолучитьНовогоПользователя()

Процедура ОбновлениеРегистровПоВалюте() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ПотребностиВНоменклатуре.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПотребностиВНоменклатуре КАК ПотребностиВНоменклатуре
	|ГДЕ
	|	ПотребностиВНоменклатуре.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПотребностиВНоменклатуре.Регистратор";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	//Обойдем регистраторов
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ПотребностиВНоменклатуре.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
				Запись.Валюта = ВалютаРегламентированногоУчета;
			КонецЕсли;	
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось произвести установку в валюте регламентированного учета в регистр""%1""
			|%2'"),
			"ПотребностиВНоменклатуре",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	УсловияПредложенийПоставщиков.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.УсловияПредложенийПоставщиков КАК УсловияПредложенийПоставщиков
	|ГДЕ
	|	УсловияПредложенийПоставщиков.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УсловияПредложенийПоставщиков.Регистратор";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	//Обойдем регистраторов
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.УсловияПредложенийПоставщиков.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
				Запись.Валюта = ВалютаРегламентированногоУчета;
			КонецЕсли;	
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось произвести установку в валюте регламентированного учета в регистр""%1""
			|%2'"),
			"УсловияПредложенийПоставщиков",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	|	ЗаказыПоставщикамУХ.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикамУХ КАК ЗаказыПоставщикамУХ
	|ГДЕ
	|	ЗаказыПоставщикамУХ.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПоставщикамУХ.Регистратор";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	//Обойдем регистраторов
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ЗаказыПоставщикамУХ.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
				Запись.Валюта = ВалютаРегламентированногоУчета;
			КонецЕсли;	
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось произвести установку в валюте регламентированного учета в регистр""%1""
			|%2'"),
			"ЗаказыПоставщикамУХ",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
		
		
	КонецЦикла; 
	
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	ПланПоставокПоДоговорам.Регистратор КАК Регистратор
	                |ИЗ
	                |	РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорам
	                |ГДЕ
	                |	ПланПоставокПоДоговорам.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	                |
	                |СГРУППИРОВАТЬ ПО
	                |	ПланПоставокПоДоговорам.Регистратор";
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	//Обойдем регистраторов
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.ПланПоставокПоДоговорам.СоздатьНаборЗаписей(); 
		НаборЗаписей.Отбор.Регистратор.Значение = Выборка.Регистратор;
		НаборЗаписей.Прочитать();
		Для каждого Запись Из НаборЗаписей Цикл
			Если Запись.Валюта = ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка") Тогда
				Запись.Валюта = ВалютаРегламентированногоУчета;
			КонецЕсли;	
		КонецЦикла;
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ТекстСообщения = СтрШаблон(НСтр(
			"ru = 'Не удалось произвести установку в валюте регламентированного учета в регистр""%1""
			|%2'"),
			"ПланПоставокПоДоговорам",
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			,
			, 
			ТекстСообщения);
		КонецПопытки;
		
		
	КонецЦикла; 
	
КонецПроцедуры // ОбновлениеРегистровПоВалюте()

Процедура УстановитьТипыАналитикВИсточникахДанных(Параметры = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД КАК ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД
		|ГДЕ
		|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ПолеБД ПОДОБНО ""Аналитика%""";
	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		СпрИсточникОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();	
		СпрИсточникОбъект.ЗаполнитьНачальныеНастройки();
		Попытка
			СпрИсточникОбъект.Записать();
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке(); 
			ШаблонСообщения = НСтр("ru = 'Не удалось записать элемент справочника ""Источник данных для расчетов"", по причине:
	        	|%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ИсточникиДанныхДляРасчетов,
				ВыборкаДетальныеЗаписи.Ссылка, 
				ТекстСообщения);
		КонецПопытки
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьЗначениеКонстантПриПереходеСERP()
	
	ПереченьКонстант = Новый Структура;
	
	ПереченьКонстант.Вставить(Метаданные.Константы.КонтролироватьПревышениеЛимитовРасходаДенежныхСредств.Имя, Ложь);
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредств.Имя, Ложь);
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствБюджетирования.Имя, Ложь);
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоПодразделениям.Имя, Ложь);
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьЛимитыРасходаДенежныхСредствПоОрганизациям.Имя, Ложь);
	
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьБюджетныйПроцесс.Имя, Ложь);
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьБюджетирование.Имя, Ложь);
	ПереченьКонстант.Вставить(Метаданные.Константы.НеУправлениеХолдингом.Имя, Ложь);
	
	ПереченьКонстант.Вставить(Метаданные.Константы.ИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Имя, Истина);
	ПереченьКонстант.Вставить(Метаданные.Константы.НеИспользоватьЗаявкиНаРасходованиеДенежныхСредств.Имя, Ложь);
	
	Для Каждого КлючИЗначение Из ПереченьКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

Функция СоздатьШаблонОповещений(ВыборкаДанных)
	
	Если ЗначениеЗаполнено(ВыборкаДанных.ШаблоныОповещенийСсылка) тогда
		Возврат ВыборкаДанных.ШаблоныОповещенийСсылка;
	КонецЕсли;
	
	ШаблонОповещенияОбъект = Справочники.ШаблоныОповещений.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(ШаблонОповещенияОбъект, ВыборкаДанных);
	
	ТекстШаблона = ВыборкаДанных.ХранилищеШаблоновСсылка.Шаблон.Получить();
	ШаблонОповещенияОбъект.Шаблон = Новый ХранилищеЗначения(ТекстШаблона);
	
	Если НЕ ЗначениеЗаполнено(ШаблонОповещенияОбъект.ТипШаблона) И СтрНайти(ТекстШаблона, "html") > 0 тогда
		ШаблонОповещенияОбъект.ТипШаблона = Перечисления.ТипыШаблонов.HTML;
	ИначеЕсли НЕ ЗначениеЗаполнено(ШаблонОповещенияОбъект.ТипШаблона) И ТипЗнч(ТекстШаблона) = Тип("Строка") тогда
		ШаблонОповещенияОбъект.ТипШаблона = Перечисления.ТипыШаблонов.Текстовый;
	КонецЕсли;
	
	ВыборкаПользователей = ВыборкаДанных.Выбрать();
	
	Пока ВыборкаПользователей.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаПользователей.Пользователь) тогда
			НовыйПользовательСтрока = ШаблонОповещенияОбъект.СписокОтветственных.Добавить();
			НовыйПользовательСтрока.Пользователь = ВыборкаПользователей.Пользователь;
		КонецЕсли;
	КонецЦикла;
	
	Попытка
		ШаблонОповещенияОбъект.Записать();
		Возврат ШаблонОповещенияОбъект.Ссылка;
	Исключение
		ТекстСообщения = СтрШаблон(НСтр(
		"ru = 'Не удалось записать справочник ""%1""
		|%2'"),
		"ШаблоныОповещений",
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,
		,
		, 
		ТекстСообщения);
		
		Возврат Неопределено
	КонецПопытки;
	
КонецФункции

#КонецОбласти