#Область СверкаВГО


// Обработка события выбора строки ТЧ "Записи" справочника
// ПротоколируемыеСобытия.
//
Процедура ПротоколируемыеСобытия_ЗаписиВыбор(Форма, ПротоколируемоеСобытие, СтрокаЗаписи) Экспорт
	Если ПротоколируемоеСобытие.Реструктуризация Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ИсточникДанныхДляРасчетов", 	СтрокаЗаписи.ОбъектДанных);
		СтруктураПараметров.Вставить("ПотребительРасчета", 			СтрокаЗаписи.ПоказательОтчета);
		СтруктураПараметров.Вставить("СпособИспользования", 		ПредопределенноеЗначение("Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета"));
		
		ОткрытьФорму("ОбщаяФорма.ФормаНастройкиФормулРасчета", СтруктураПараметров, Форма);
		
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ВызовыКомандВерсийРегламентов

Процедура СтруктураВладения(ПараметрыОткрытия) Экспорт
	ОткрытьФорму("Обработка.СтруктураВладения.Форма", ПараметрыОткрытия);
КонецПроцедуры

Процедура СетеваяДиаграммаШаблонаУниверсальногоПроцесса(ПараметрыОткрытия) Экспорт
	ОткрытьФорму("Отчет.СетеваяДиаграммаШаблонаУниверсальногоПроцесса.ФормаОбъекта", ПараметрыОткрытия);
КонецПроцедуры

Процедура ФормаУправленияМатрицейПолномочий(ПараметрыОткрытия) Экспорт
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий", ПараметрыОткрытия);
КонецПроцедуры

#КонецОбласти

#Область ВызовыКомандВидовОтчетов

Процедура Открыть_СводнуюТаблицу(СтруктураПараметров,ЭтаФорма) Экспорт
	
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти


#Область ВызовыКомандУправлениеОтчетнымПериодом

Процедура Открыть_УправлениеПроцессом_Диаграмма(СтруктураПараметров) Экспорт
	
	ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаУправляемая", СтруктураПараметров);
	
КонецПроцедуры

Процедура Открыть_УправлениеПроцессом_Таблица(СтруктураПараметров) Экспорт
	
	ОткрытьФорму("Обработка.УправлениеПроцессомПодготовкиОтчетности.Форма.Форма", СтруктураПараметров, , Истина);
	
КонецПроцедуры

Процедура Открыть_УправлениеПериодами(СтруктураПараметров) Экспорт
	                                                                                                                           
	ОткрытьФорму("Обработка.УправлениеПериодомСценарияВГрафическомВиде.Форма.Форма", СтруктураПараметров);
	
КонецПроцедуры

Процедура Открыть_УправлениеПроцессом_Матрица(СтруктураПараметров) Экспорт
	                                                                                                                           
	ОткрытьФорму("Обработка.МатрицаУправленияУниверсальнымПроцессом.Форма.ФормаУправляемая", СтруктураПараметров);
	
КонецПроцедуры



#КонецОбласти




#Область ВызовыФормБизнесЛогикиУХ

Процедура ОткрытьФормаВыбораСтатьиБюджета(СтруктураПараметров,ВладелецФормы) Экспорт
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораСтатьиБюджета",СтруктураПараметров,ВладелецФормы,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ОткрытьФормаВыбораСтатьиБюджета()

Процедура ОткрытьФормаСохраненияМакета(СтруктураПараметров,ВладелецФормы) Экспорт
	ОткрытьФорму("ОбщаяФорма.ФормаСохраненияМакета", СтруктураПараметров,ВладелецФормы)
КонецПроцедуры // ОткрытьФормаСохраненияМакета() 

Процедура ОткрытьФормаМакетаСводнаяТаблица(СтруктураПараметров) Экспорт
	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаМакетаСводнаяТаблица",СтруктураПараметров)
КонецПроцедуры // ОткрытьФормаМакетаСводнаяТаблица()

Процедура ОткрытьФормаМакетаСводнаяТаблицаБланк(СтруктураПараметров) Экспорт
	ОткрытьФорму("Справочник.БланкиОтчетов.Форма.ФормаМакетаСводнаяТаблица", СтруктураПараметров);
КонецПроцедуры // ОткрытьФормаМакетаСводнаяТаблицаБланк()

Процедура ОткрытьФормаУправленияМатрицейПолномочий(СтруктураПараметров) Экспорт
 	ОткрытьФорму("Обработка.СводнаяТаблица.Форма.ФормаУправленияМатрицейПолномочий",СтруктураПараметров);
КонецПроцедуры // ОткрытьФормаУправленияМатрицейПолномочий()

Процедура ОткрытьОтображениеЭлементаWS_Управляемая(СтруктураПараметров) Экспорт
 	ОткрытьФорму("ОбщаяФорма.ОтображениеЭлементаWS_Управляемая", СтруктураПараметров);
КонецПроцедуры // ОткрытьОтображениеЭлементаWS_Управляемая()

Процедура ОткрытьФормаОбменНСИ(СтруктураПараметров) Экспорт
 	ОткрытьФорму("Обработка.ОбменНСИ.Форма.Форма", СтруктураПараметров);
КонецПроцедуры // ОткрытьФормаОбменНСИ()

Процедура ОткрытьОтчетПоПроизвольномуЗапросуВИБ(ДанныеРасшифровки) Экспорт
	ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуВИБ.Форма.ФормаОтчета",ДанныеРасшифровки,,Новый УникальныйИдентификатор);
КонецПроцедуры // ОткрытьОтчетПоПроизвольномуЗапросуВИБ() 

Процедура ОткрытьФормаВыбораЛистаИПароля(СтруктураПараметровФормы, ЭтаФорма,ОписаниеОЗакрытии) Экспорт
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораЛистаИПароля", СтруктураПараметровФормы, ЭтаФорма, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры // ОткрытьФормаВыбораЛистаИПароля()


Процедура ОткрытьЗаписьПоказателяСРасчетомЗависимых(СтруктураПараметров) Экспорт
	ОткрытьФорму("Обработка.ЗаписьПоказателяСРасчетомЗависимых.Форма.ФормаАнализРасчетов",СтруктураПараметров,,Новый УникальныйИдентификатор);
КонецПроцедуры // ОткрытьЗаписьПоказателяСРасчетомЗависимых()

Процедура ОткрытьРучныеКорректировки(СтруктураПараметров,Владелец) Экспорт
	
	Если НЕ СтруктураПараметров.Свойство("СпособВводаКорректировки") Тогда 
		
		СтруктураПараметров.Вставить("СпособВводаКорректировки",ПредопределенноеЗначение("Перечисление.СпособыВводаКорректировок.РучнойВвод"));
		
	КонецЕсли;
	
	ОткрытьФорму("Документ.КорректировкаЗначенийПоказателей.ФормаОбъекта",СтруктураПараметров,Владелец);

КонецПроцедуры //ОткрытьРучныеКорректировки()

Процедура ОткрытьОтчетОКорректировках(СтруктураПараметров,Владелец) Экспорт
	ОткрытьФорму("Отчет.ОтчетОКорректировках.Форма.ФормаОтчетаУправляемая", СтруктураПараметров,Владелец);
КонецПроцедуры // ОткрытьОтчетОКорректировках() 

Процедура ОткрытьКонс_СчетаУчетаЧА() Экспорт
	ОткрытьФорму("РегистрСведений.СчетаУчетаЧАдляАПСП.ФормаСписка");
КонецПроцедуры

Процедура ОткрытьФормуГрупповогоРедактированияЭкземпляров(СтруктураПараметровВход) Экспорт
	ОткрытьФорму("Обработка.ГрупповоеРедактированиеЭкземпляровОтчета.Форма.ФормаУправляемая", СтруктураПараметровВход, , Истина);
КонецПроцедуры

Процедура Открыть_Претензии() Экспорт
	ОткрытьФорму("Справочник.Претензии.ФормаСписка");
КонецПроцедуры

Функция ПолучитьФормуСценарныйАнализ(СтруктураПараметров) Экспорт
	Возврат ПолучитьФорму("Отчет.СценарныйАнализ.Форма.ФормаОтчетаУправляемая", СтруктураПараметров);
КонецФункции

#КонецОбласти

#Область БизнесАнализ

Процедура ОткрытьФормыБизнесАнализСохраненныеНастройки(НастраиваемыйОбъектВход, СсылкаВход, Отказ) Экспорт
	Если ТипЗнч(НастраиваемыйОбъектВход) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
		Отказ = Истина;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", НастраиваемыйОбъектВход);
		СтруктураПараметров.Вставить("СохраненнаяНастройка", СсылкаВход);
		ОткрытьФорму("Справочник.ПроизвольныеОтчеты.Форма.ФормаОтображенияОтчетаУправляемая", СтруктураПараметров);
	ИначеЕсли ТипЗнч(НастраиваемыйОбъектВход) = Тип("СправочникСсылка.ПанелиОтчетов") Тогда
		Отказ = Истина;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ключ", НастраиваемыйОбъектВход);
		СтруктураПараметров.Вставить("СохраненнаяНастройка", СсылкаВход);
		ОткрытьФорму("Справочник.ПанелиОтчетов.Форма.ФормаЭлемента_Управляемая", СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти