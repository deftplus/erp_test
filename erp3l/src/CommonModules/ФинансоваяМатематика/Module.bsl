////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции, необходимые для расчета сумм процентов
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция ПолучитьТаблицуПроцентов(ПараметрыРасчета, ТекстОшибки = "") Экспорт
	
	Результат = НовыйТаблицаПроцентов();
	
	Если ПараметрыРасчета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЕстьСтавкаДосрочногоПогашения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "ЕстьСтавкаДосрочногоПогашения", Ложь);
	
	ТаблицаБазовыхСумм = ТаблицаБазовыхСумм(ПараметрыРасчета.ОперацииИзмененияБазы, 
											ЕстьСтавкаДосрочногоПогашения,
											ПараметрыРасчета.МетодСписанияЗадолженности,
											ПараметрыРасчета.НачислениеПроцентовНаКрайниеДаты,
											ТекстОшибки);
	
	Если ТаблицаБазовыхСумм = Неопределено
		ИЛИ НЕ ТаблицаБазовыхСумм.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТаблицаПроцентныхПериодов = ПолучитьТаблицуПроцентныхПериодов(ПараметрыРасчета, ЕстьСтавкаДосрочногоПогашения);
	
	Если Не ТаблицаПроцентныхПериодов.Количество() Тогда
		Возврат Результат;
	КонецЕсли;
	
	КапитализацияПроцентов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "КапитализацияПроцентов", Ложь);
	
	
	// Определим, когда заплатить накопленную на дату начала пересчета задолженность.
	Если ПараметрыРасчета.СуммаНакопленнойЗадолженности <> 0 Тогда
		Для Каждого ТекПроцентныйПериод Из ТаблицаПроцентныхПериодов Цикл
			Если ТекПроцентныйПериод.ДатаУплаты > ПараметрыРасчета.ГраницаФактическихДанных Тогда
				СтрокаПроценты = Результат.Добавить();
				СтрокаПроценты.ДатаПлатежа = ТекПроцентныйПериод.ДатаУплаты;
				СтрокаПроценты.Сумма = ПараметрыРасчета.СуммаНакопленнойЗадолженности;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	НакопленнаяСуммаПроцентов = 0;
	
	ТаблицаКапитализацииПроцентов = Новый ТаблицаЗначений;
	ТаблицаКапитализацииПроцентов.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаКапитализацииПроцентов.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	
	ДатаЗакрытияИнструмента = ДатаЗакрытияИнструмента(ТаблицаБазовыхСумм);
	
	Для Каждого ТекНеизменнаяСумма Из ТаблицаБазовыхСумм Цикл
		
		Для Каждого ТекПроцентныйПериод Из ТаблицаПроцентныхПериодов Цикл
			
			ДатаНачисления = ?(ТекНеизменнаяСумма.ЗавершаетсяПлатежом И ПараметрыРасчета.ВыплачиватьПроцентыВДатыПогашенияТела, Мин(ТекНеизменнаяСумма.ДатаОкончания, ТекПроцентныйПериод.ДатаНачисления), ТекПроцентныйПериод.ДатаНачисления);
		
			Если ДатаНачисления < ПараметрыРасчета.ДатаПоследнегоНачисления Тогда
				// это прошедший период, он уже зафиксирован.
				// не по границе факта - т.к. могли возникнуть новые даты.
				Продолжить;
			КонецЕсли;

			
			ДатаНачалаПериода = Макс(ТекНеизменнаяСумма.ДатаНачала, ТекПроцентныйПериод.ДатаНачала);
			ДатаОкончанияПериода = Мин(ТекНеизменнаяСумма.ДатаОкончания, ТекПроцентныйПериод.ДатаОкончания);
			
			Если ДатаНачалаПериода > ДатаОкончанияПериода Тогда
				// исключительная ситуация - пересеклись границы.
				Продолжить;
			КонецЕсли;
			
			Если ДатаНачалаПериода <= ПараметрыРасчета.ДатаПоследнегоНачисления Тогда
				// Начнем расчеты от последнего начисления.
				ДатаНачалаПериода = ПараметрыРасчета.ДатаПоследнегоНачисления + 86400;
			КонецЕсли;
			
			Если КапитализацияПроцентов Тогда
				НакопленнаяКапитализацияПроцентов = СуммаСтрокТаблицыПоДату(ТаблицаКапитализацииПроцентов, ДатаОкончанияПериода);
			КонецЕсли;
			
			СтрокаПроценты = Результат.Добавить();
			СтрокаПроценты.ДатаНачала = ДатаНачалаПериода;
			СтрокаПроценты.ДатаОкончания = ДатаОкончанияПериода;
			Если КапитализацияПроцентов Тогда
				СтрокаПроценты.ДатаПлатежа = ПараметрыРасчета.ДатаОкончания
			ИначеЕсли ТекНеизменнаяСумма.ЗавершаетсяПлатежом И ПараметрыРасчета.ВыплачиватьПроцентыВДатыПогашенияТела Тогда
				
				Если ПараметрыРасчета.НачислениеПроцентовНаКрайниеДаты = Перечисления.СпособыНачисленияПроцентовНаГраницыПериодов.НачислятьПроцентыНаПервыйДень Тогда
					// Мы ранее исключили день возврата средств для целей расчета процентов. Вернем его.
					СтрокаПроценты.ДатаПлатежа = Мин(ТекНеизменнаяСумма.ДатаОкончания + 86400, ТекПроцентныйПериод.ДатаУплаты);
				Иначе
					СтрокаПроценты.ДатаПлатежа = Мин(ТекНеизменнаяСумма.ДатаОкончания, ТекПроцентныйПериод.ДатаУплаты);
				КонецЕсли;
			Иначе
				СтрокаПроценты.ДатаПлатежа = Мин(ТекПроцентныйПериод.ДатаУплаты, ПараметрыРасчета.ДатаОкончания);
			КонецЕсли;
			
			СтрокаПроценты.ДатаНачисления = ДатаНачисления;
			
			Если ЗначениеЗаполнено(ДатаЗакрытияИнструмента) тогда
				Если СтрокаПроценты.ДатаПлатежа > ДатаЗакрытияИнструмента Тогда
					СтрокаПроценты.ДатаПлатежа = ДатаЗакрытияИнструмента;
				КонецЕсли;
				Если  СтрокаПроценты.ДатаНачисления > ДатаЗакрытияИнструмента Тогда
					СтрокаПроценты.ДатаНачисления = ДатаЗакрытияИнструмента;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПроценты.База = ТекНеизменнаяСумма.База + ?(КапитализацияПроцентов, НакопленнаяКапитализацияПроцентов, 0);
			Если ЕстьСтавкаДосрочногоПогашения 
				И ТекНеизменнаяСумма.ЗавершаетсяПлатежом И ТекНеизменнаяСумма.ДатаОкончания < ПараметрыРасчета.ДатаОкончания Тогда
				
				СтрокаПроценты.ПроцентнаяСтавка = ТекПроцентныйПериод.ПроцентнаяСтавкаДосрочногоПогашения;
				
			Иначе
				
				СтрокаПроценты.ПроцентнаяСтавка = ТекПроцентныйПериод.ПроцентнаяСтавка;
				
			КонецЕсли;
			СтрокаПроценты.Сумма = ФинансоваяМатематикаКлиентСервер.СуммаПроцентовЗаПериод(
				СтрокаПроценты.ДатаНачала, СтрокаПроценты.ДатаОкончания, СтрокаПроценты.База, СтрокаПроценты.ПроцентнаяСтавка, 
				ПараметрыРасчета.БазаДляРасчетаПроцентов);
				
			Если КапитализацияПроцентов Тогда
				
				НакопленнаяСуммаПроцентов = НакопленнаяСуммаПроцентов + СтрокаПроценты.Сумма;
				
				Если ЗначениеЗаполнено(ТекПроцентныйПериод.ДатаУплаты) Тогда // начисленные проценты поступят на счет
					 СтрокаКапитализации = ТаблицаКапитализацииПроцентов.Добавить();
					 СтрокаКапитализации.Дата = ТекПроцентныйПериод.ДатаУплаты;
					 СтрокаКапитализации.Сумма = НакопленнаяСуммаПроцентов;
					 НакопленнаяСуммаПроцентов = 0;
				 КонецЕсли;
			КонецЕсли;
				
		КонецЦикла;
		
	КонецЦикла;
	
	РаспределитьСуммыКопекВТаблице(Результат);
	ОкруглитьПолеВТаблице(Результат, "База");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНКД(ТекущийКупон, ДатаРасчетаКупона, ДатаВыплатыКупона, ДатаНачалаКупонногоПериода, БазаДляРасчета = Неопределено) Экспорт
	
	ЧислоДнейКупона = ОбщегоНазначенияКлиентСерверУХ.РазностьДатВДнях(НачалоДня(ДатаВыплатыКупона), НачалоДня(ДатаНачалаКупонногоПериода));
	
	Если ЧислоДнейКупона = 0 Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат ТекущийКупон * (ДатаРасчетаКупона - ДатаНачалаКупонногоПериода) / (ДатаВыплатыКупона - ДатаНачалаКупонногоПериода);	
		
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаБазовыхСумм(ОперацииИзмененияБазы, РассчитыватьПараллельныеСуммы = Ложь, МетодСписанияЗадолженности = Неопределено, НачислениеПроцентовНаКрайниеДаты = Неопределено, ТекстОшибки = "") Экспорт
	
	
	ТаблицаНеизменныхСумм = Новый ТаблицаЗначений;
	ТаблицаНеизменныхСумм.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНеизменныхСумм.Колонки.Добавить("ДатаОкончания",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНеизменныхСумм.Колонки.Добавить("База",ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаНеизменныхСумм.Колонки.Добавить("ЗавершаетсяПлатежом",Новый ОписаниеТипов("Булево"));
	
	Если НЕ ОперацииИзмененияБазы.Количество() Тогда
		
		Возврат ТаблицаНеизменныхСумм;
		
	КонецЕсли;
	
	Если ОперацииИзмененияБазы.Итог("Приход") <> ОперацииИзмененияБазы.Итог("Расход") Тогда
		
		ТекстОшибки = НСтр("ru = 'Не совпадают суммы увеличения и уменьшения основного долга. Вычисление прервано.'");
		Возврат ТаблицаНеизменныхСумм;
		
	КонецЕсли;
	
	Если ОперацииИзмененияБазы.НайтиСтроки(Новый Структура("Дата", Дата(1,1,1))).Количество() Тогда
		ТекстОшибки = НСтр("ru = 'В таблице основного долга обнаружены незаполненные даты операций. Вычисление прервано.'");
		Возврат ТаблицаНеизменныхСумм;
	КонецЕсли;
	
	ОперацииИзмененияБазы.Сортировать("Дата");
	
	// Учтем начисление процентов на первый/последний день
	Для Каждого ТекСтрока Из ОперацииИзмененияБазы Цикл
		
		Если ТекСтрока.Приход > 0 И НачислениеПроцентовНаКрайниеДаты = Перечисления.СпособыНачисленияПроцентовНаГраницыПериодов.НачислятьПроцентыНаПоследнийДень Тогда
			ТекСтрока.Дата = ТекСтрока.Дата + 86400;
		ИначеЕсли ТекСтрока.Расход > 0 И НачислениеПроцентовНаКрайниеДаты <> Перечисления.СпособыНачисленияПроцентовНаГраницыПериодов.НачислятьПроцентыНаПервыйДень Тогда
			ТекСтрока.Дата = ТекСтрока.Дата + 86400;
		КонецЕсли;
	КонецЦикла;
	
	Если Не РассчитыватьПараллельныеСуммы Тогда
		// В один момент времени действует одна база. Проще для понимания.
		НакопленныйОстаток = 0;
		
		Для Сч = 0 По (ОперацииИзмененияБазы.Количество() - 2) Цикл
			
			НакопленныйОстаток = НакопленныйОстаток + ОперацииИзмененияБазы[Сч].Приход - ОперацииИзмененияБазы[Сч].Расход;
			
			Если НакопленныйОстаток < 0 Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Обнаружена отрицательная базовая сумма. Вычисление прервано.'"));
				ТаблицаНеизменныхСумм.Очистить();
				Возврат ТаблицаНеизменныхСумм;
				
			ИначеЕсли НакопленныйОстаток > 0 Тогда
				// Нулевые суммы не будем обрабатывать.
				
				ПериодЗавершаетсяПлатежом = (ОперацииИзмененияБазы[Сч+1].Расход > 0);
				
				ПериодНеизменностиСуммы = ТаблицаНеизменныхСумм.Добавить();
				ПериодНеизменностиСуммы.ДатаНачала			= ОперацииИзмененияБазы[Сч].Дата;
				ПериодНеизменностиСуммы.ДатаОкончания		= ОперацииИзмененияБазы[Сч + 1].Дата - 86400;
				ПериодНеизменностиСуммы.База				= НакопленныйОстаток;
				ПериодНеизменностиСуммы.ЗавершаетсяПлатежом	= ПериодЗавершаетсяПлатежом;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТаблицаНеизменныхСумм.Количество() Тогда
			ПоследняяСтрокаТаблицы = ТаблицаНеизменныхСумм[ТаблицаНеизменныхСумм.Количество() - 1];
			ПоследняяСтрокаТаблицы.ЗавершаетсяПлатежом = Истина;
		КонецЕсли;
	Иначе
		// Строим таблицу баз, действующих параллельно.
		ТаблицаПриход = ОперацииИзмененияБазы.Скопировать(,"Дата,Приход");
		НулевыеСтроки = ТаблицаПриход.НайтиСтроки(Новый Структура("Приход", 0));
		Для Каждого ТекСтрока Из НулевыеСтроки Цикл
			ТаблицаПриход.Удалить(ТекСтрока);
		КонецЦикла;
		
		// Если списывать по LIFO - сортируем ТаблицаПриход в обратном порядке
		Если МетодСписанияЗадолженности = Перечисления.МетодыСписанияЗадолженности.LIFO Тогда
			ТаблицаПриход.Сортировать("Дата Убыв");
		КонецЕсли;
		
		ТаблицаРасход = ОперацииИзмененияБазы.Скопировать(,"Дата,Расход");
		НулевыеСтроки = ТаблицаРасход.НайтиСтроки(Новый Структура("Расход", 0));
		Для Каждого ТекСтрока Из НулевыеСтроки Цикл
			ТаблицаРасход.Удалить(ТекСтрока);
		КонецЦикла;
		
		Для Каждого ТекСтрокаРасход Из ТаблицаРасход Цикл
			Пока ТекСтрокаРасход.Расход > 0 Цикл
				// Распределяем расход по приходам.
				СтрокаПриход = ТаблицаПриход[0];
				СуммаКСписанию = Мин(ТекСтрокаРасход.Расход, СтрокаПриход.Приход);
				
				ПериодНеизменностиСуммы = ТаблицаНеизменныхСумм.Добавить();
				ПериодНеизменностиСуммы.ДатаНачала			= СтрокаПриход.Дата;
				ПериодНеизменностиСуммы.ДатаОкончания		= ТекСтрокаРасход.Дата - 86400;								
				ПериодНеизменностиСуммы.База				= СуммаКСписанию;
				ПериодНеизменностиСуммы.ЗавершаетсяПлатежом	= Истина;
				
				ТекСтрокаРасход.Расход = ТекСтрокаРасход.Расход - СуммаКСписанию;
				СтрокаПриход.Приход = СтрокаПриход.Приход - СуммаКСписанию;
				Если СтрокаПриход.Приход = 0 Тогда
					ТаблицаПриход.Удалить(СтрокаПриход);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;

	Возврат ТаблицаНеизменныхСумм;
	
КонецФункции

Функция ТаблицаНеизменнойПроцентнойСтавки(ПроцентныеСтавки)
	
	ТаблицаНеизменныхСтавок = Новый ТаблицаЗначений;
	ТаблицаНеизменныхСтавок.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНеизменныхСтавок.Колонки.Добавить("ДатаОкончания",ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаНеизменныхСтавок.Колонки.Добавить("ПроцентнаяСтавка",ОбщегоНазначения.ОписаниеТипаЧисло(10,4));
	
	Для Сч = 0 По (ПроцентныеСтавки.Количество() - 1) Цикл
		
		ПериодНеизменностиСтавки = ТаблицаНеизменныхСтавок.Добавить();
		ПериодНеизменностиСтавки.ДатаНачала = ПроцентныеСтавки[сч].Дата;
		ПериодНеизменностиСтавки.ПроцентнаяСтавка = ПроцентныеСтавки[сч].ПроцентнаяСтавка;
		
		Если Сч < (ПроцентныеСтавки.Количество() - 1) Тогда
			ПериодНеизменностиСтавки.ДатаОкончания = ПроцентныеСтавки[сч+1].Дата - 86400;
		Иначе
			ПериодНеизменностиСтавки.ДатаОкончания = Дата(3999,1,1);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаНеизменныхСтавок;
	
КонецФункции

// Создаёт пустую таблицу процентных периодов для дальнейших расчетов.
Функция СоздатьТаблицуПроцентныхПериодов() Экспорт
	ТаблицаПроцентныхПериодов = Новый ТаблицаЗначений;
	ТаблицаПроцентныхПериодов.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПроцентныхПериодов.Колонки.Добавить("ДатаОкончания", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПроцентныхПериодов.Колонки.Добавить("ДатаНачисления", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПроцентныхПериодов.Колонки.Добавить("ДатаУплаты", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПроцентныхПериодов.Колонки.Добавить("ДатаФиксацииСтавки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПроцентныхПериодов.Колонки.Добавить("ПроцентнаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(10,4));
	Возврат ТаблицаПроцентныхПериодов;
КонецФункции

// Функция формирует таблицу процентных периодов в заданном временном интервале при заданной периодичности.
//
// Параметры:
//  ПараметрыРасчета - Структура - структура параметров определения периодов со следующими свойствами:
//		ДатаНачала - Дата - Дата начала интервала, в котором нас интересуют процентные периоды.
//		ДатаОкончания - Дата - Дата окончания интервала, в котором нас интересуют процентные периоды.
//		ПравилоПереноса - - Правило переноса дат уплаты, попавших на выходной день.
//		ИзменятьПроцентныйПериод - - если граница процентного периода попала на выходной день, она сдвигается до ближайшего рабочего.
//		ПроизводственныйКалендарь - - производственный календарь, по которому определяются выходные дни.
//		ПериодичностьУплаты - - Длительность процентного периода.
//		ДатаОтсчетаПроцентныхПериодов -  - Вид даты, от которой отсчитываются границы процентных периодов.
//		ДатаПервойВыборки - Дата - Дата первой выборки по данному инструменту.
//		ДатаНачалаДействия - Дата - дата начала действия инструмента.
//		ДатаПервогоПогашения - Дата - дата окончания первого процентного периода.
//		ТочкаОтсчетаСдвигаДатыУплаты -  - 
//		СдвигДатыУплаты -  - 
// Возвращаемое значение:
//  ТаблицаЗначений - 
//
Функция ПолучитьТаблицуПроцентныхПериодов(ПараметрыРасчета, ЕстьСтавкаДосрочногоПогашения) Экспорт
	
	ТаблицаПроцентныхПериодов = СоздатьТаблицуПроцентныхПериодов();	
	
	Если ПараметрыРасчета.ВыплачиватьПроцентыПериодически Тогда
	
		// Определим временные границы первого процентного периода.
		ПервыйПериод = ТаблицаПроцентныхПериодов.Добавить();
		ПервыйПериод.ДатаНачала = ПараметрыРасчета.ДатаПервойВыборки;
		
		Если ПараметрыРасчета.ДатаОтсчетаПроцентныхПериодов = Перечисления.ВидыДатОтсчетаПериодичности.ДатаПервогоПогашения Тогда
			// Известна дата 1-го погашения, укажем ее явно.
			Если ЗначениеЗаполнено(ПараметрыРасчета.ДатаПервогоПогашения) Тогда
				ПервыйПериод.ДатаОкончания = ПараметрыРасчета.ДатаПервогоПогашения;
			Иначе
				ПервыйПериод.ДатаОкончания = ПараметрыРасчета.ДатаНачала;
			КонецЕсли;
		Иначе
			
			Если ПараметрыРасчета.ДатаОтсчетаПроцентныхПериодов = Перечисления.ВидыДатОтсчетаПериодичности.ДатаОткрытияКредита Тогда
				ДатаОтсчета = ПараметрыРасчета.ДатаНачалаДействия;
			Иначе
				//ПараметрыРасчета.ДатаОтсчетаПроцентныхПериодов = Перечисления.ВидыДатОтсчетаПериодичности.ДатаПервойВыборки
				ДатаОтсчета = ПараметрыРасчета.ДатаПервойВыборки + 86400;
			КонецЕсли;
			
			КонецМесяцаВПервомПериоде = ДатаОтсчета = НачалоДня(КонецМесяца(ДатаОтсчета ));
			
			ПервыйПериод.ДатаОкончания = ДатаОкончанияПроцентногоПериода(ДатаОтсчета, ПараметрыРасчета,,КонецМесяцаВПервомПериоде);
			
		КонецЕсли;
		
		НоваяДатаУплаты = ДатаУплатыПроцентногоПериода(ПервыйПериод.ДатаНачала, ПервыйПериод.ДатаОкончания, ПараметрыРасчета);
		ПервыйПериод.ДатаНачисления			 = ПервыйПериод.ДатаОкончания;
		ПервыйПериод.ДатаУплаты				 = НоваяДатаУплаты;
		
		НеобходимоПродолжать = (ПервыйПериод.ДатаОкончания < ПараметрыРасчета.ДатаОкончания);
		ДатаНачалаПредыдущегоПериодаДоСдвига	 = ПервыйПериод.ДатаОкончания;
		ДатаОкончанияПредыдущегоПериода			 = ПервыйПериод.ДатаОкончания;
		
		ПериодичностьУплаты = ПараметрыРасчета.ПериодичностьУплаты;
		
		Смещение = 0;

		Пока НеобходимоПродолжать Цикл
			
			Смещение = Смещение + 1;
			
			НовыйПериод = ТаблицаПроцентныхПериодов.Добавить();
			НоваяДатаНачалаДоСдвига = ОбщегоНазначенияУХ.ДобавитьИнтервал( ПервыйПериод.ДатаОкончания + 86400, ПериодичностьУплаты, Смещение);
			
			НовыйПериод.ДатаНачала				 = ДатаОкончанияПредыдущегоПериода + 86400;
			НовыйПериод.ДатаОкончания			 = ДатаОкончанияПроцентногоПериода(ПервыйПериод.ДатаОкончания, ПараметрыРасчета,Смещение);
			НовыйПериод.ДатаНачисления			 = НовыйПериод.ДатаОкончания;
			НовыйПериод.ДатаУплаты				 = ДатаУплатыПроцентногоПериода(НовыйПериод.ДатаНачала, НовыйПериод.ДатаОкончания, ПараметрыРасчета);
			
			Если НовыйПериод.ДатаОкончания > ПараметрыРасчета.ДатаОкончания Тогда
				НовыйПериод.ДатаОкончания			 = ПараметрыРасчета.ДатаОкончания;
				НовыйПериод.ДатаНачисления			 = ПараметрыРасчета.ДатаОкончания;
				НовыйПериод.ДатаУплаты				 = ПараметрыРасчета.ДатаОкончания;
			КонецЕсли;
			
			НоваяДатаНачалаДоСдвига = НоваяДатаНачалаДоСдвига - 86400;
			
			НеобходимоПродолжать = (НовыйПериод.ДатаОкончания < ПараметрыРасчета.ДатаОкончания);
			ДатаОкончанияПредыдущегоПериода			 = НовыйПериод.ДатаОкончания;
			ДатаНачалаПредыдущегоПериодаДоСдвига	 = НоваяДатаНачалаДоСдвига;
			
		КонецЦикла;
		
		// Отсечем по времени все то, что потребуется.
		МассивСтрокКУдалению = Новый Массив;
		Для Каждого ТекСтрока Из ТаблицаПроцентныхПериодов Цикл
			Если ТекСтрока.ДатаОкончания < ПараметрыРасчета.ДатаНачала Тогда
				МассивСтрокКУдалению.Добавить(ТекСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекСтрока Из МассивСтрокКУдалению Цикл
			ТаблицаПроцентныхПериодов.Удалить(ТекСтрока);
		КонецЦикла;
		
		ДатаНачалаОтсчета = ПервыйПериод.ДатаНачала;
		
	Иначе
		ЕдинственныйПериод = ТаблицаПроцентныхПериодов.Добавить();
		ЕдинственныйПериод.ДатаНачала		 = ПараметрыРасчета.ДатаПервойВыборки;
		ЕдинственныйПериод.ДатаОкончания	 = ПараметрыРасчета.ДатаОкончания;
		ЕдинственныйПериод.ДатаУплаты		 = ПараметрыРасчета.ДатаОкончания;
		ЕдинственныйПериод.ДатаНачисления	 = ПараметрыРасчета.ДатаОкончания;
		
		ДатаНачалаОтсчета = ЕдинственныйПериод.ДатаНачала;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыРасчета.ПериодичностьНачисленияПроцентов) Тогда
		МассивДатНачислений = ДатыНачисленийПроцентов(ДатаНачалаОтсчета, ПараметрыРасчета);
		ДобавитьДатыНачисленийВТаблицуПроцентныхПериодов(ТаблицаПроцентныхПериодов, МассивДатНачислений);
	КонецЕсли;
	
	// Определим процентные ставки. При необходимости - разделим периоды.
	Если ПараметрыРасчета.ТипПроцентнойСтавки = Перечисления.ТипыСтавокДляРасчетаПериодическихОпераций.Фиксированная Тогда
		Если ПараметрыРасчета.РучноеУправлениеИзменениямиСтавки = Истина Тогда
			// Есть таблица изменения ставок вида "Дата - Ставка".
			// Определим декартово произведение таблицы процентных периодов и таблицы ставок.
			ТаблицаПроцентныхПериодовКопия = ТаблицаПроцентныхПериодов.Скопировать();
			ТаблицаПроцентныхПериодов.Очистить();
			ТаблицаНеизменныхСтавок = ТаблицаНеизменнойПроцентнойСтавки(ПараметрыРасчета.ПроцентныеСтавки);
			Для Каждого ТекПроцентныйПериод Из ТаблицаПроцентныхПериодовКопия Цикл
				
				Для Каждого ТекПериодНеизменностиСтавки Из ТаблицаНеизменныхСтавок Цикл
					
					ДатаНачалаПериода = Макс(ТекПроцентныйПериод.ДатаНачала, ТекПериодНеизменностиСтавки.ДатаНачала);
					ДатаОкончанияПериода = Мин(ТекПроцентныйПериод.ДатаОкончания, ТекПериодНеизменностиСтавки.ДатаОкончания);
					Если ДатаНачалаПериода > ДатаОкончанияПериода Тогда
						Продолжить;
					КонецЕсли;
					НовыйПериод						= ТаблицаПроцентныхПериодов.Добавить();
					НовыйПериод.ДатаНачала			= ДатаНачалаПериода;
					НовыйПериод.ДатаОкончания		= ДатаОкончанияПериода;
					НовыйПериод.ДатаУплаты			= ТекПроцентныйПериод.ДатаУплаты;
					НовыйПериод.ДатаНачисления		= ТекПроцентныйПериод.ДатаНачисления;
					НовыйПериод.ПроцентнаяСтавка	= ТекПериодНеизменностиСтавки.ПроцентнаяСтавка;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			// Ставка не менялась, самый простой случай.
			ТаблицаПроцентныхПериодов.ЗаполнитьЗначения(ПараметрыРасчета.ПроцентнаяСтавка, "ПроцентнаяСтавка");
		КонецЕсли;
	Иначе
		// Плавающая ставка. На каждый период определим действующую ставку.
		Для Каждого ТекПроцентныйПериод Из ТаблицаПроцентныхПериодов Цикл
			Если ПараметрыРасчета.ТочкаОтсчетаДатыФиксацииСтавки = Перечисления.СпособыОпределенияДатыОперацииПоПериоду.НачалоПериода Тогда
				БазоваяДата = ТекПроцентныйПериод.ДатаНачала;
			Иначе
				БазоваяДата = ТекПроцентныйПериод.ДатаОкончания;
			КонецЕсли;
			ТекПроцентныйПериод.ДатаФиксацииСтавки = БазоваяДата - 86400 * ПараметрыРасчета.СдвигДатыФиксацииСтавки;
		КонецЦикла;
		
		
		Если ПараметрыРасчета.РучноеУправлениеИзменениямиСтавки Тогда
			// Источник данных - таблица, регистр игнорируется.
			ОпределитьЗначенияПроцентныхСтавокИзТаблицы(ТаблицаПроцентныхПериодов, ПараметрыРасчета);
		Иначе
			// Источник данных - регистр.
			ОпределитьЗначенияПроцентныхСтавокИзРегистра(ТаблицаПроцентныхПериодов, ПараметрыРасчета)
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьСтавкаДосрочногоПогашения Тогда

		ТаблицаПроцентныхПериодов.Колонки.Добавить("ПроцентнаяСтавкаДосрочногоПогашения", ОбщегоНазначения.ОписаниеТипаЧисло(10,4));
		СтавкаДосрочногоПогашения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "ПроцентнаяСтавкаДосрочногоПогашения", 0);
		ТаблицаПроцентныхПериодов.ЗаполнитьЗначения(СтавкаДосрочногоПогашения,"ПроцентнаяСтавкаДосрочногоПогашения");
	КонецЕсли;
	
	ТаблицаПроцентныхПериодов.Сортировать("ДатаНачала");
	Возврат ТаблицаПроцентныхПериодов;
	
КонецФункции

Функция ДатаОкончанияПроцентногоПериода(ДатаНачала, ПараметрыРасчета, Смещение = 1, КонецМесяцаВПервомПериоде = Ложь)
	
	ДатаОкончания = ОбщегоНазначенияУХ.ДобавитьИнтервал(ДатаНачала,ПараметрыРасчета.ПериодичностьУплаты,Смещение);

	Если ПараметрыРасчета.ИзменятьПроцентныйПериод Тогда
		ДатаОкончания = КалендарныеГрафикиУХ.БлижайшийРабочийДень(ПараметрыРасчета.ПроизводственныйКалендарь, ДатаОкончания, ПараметрыРасчета.ПравилоПереноса);
	КонецЕсли;
	
	ПривестиДатуОкончаниюККонцуМесяца(ДатаОкончания, ПараметрыРасчета, КонецМесяцаВПервомПериоде);
	
	Если ДатаОкончания > ПараметрыРасчета.ДатаОкончания Тогда
		// Все расчеты должны завершиться к завершению действия договора.
		ДатаОкончания = ПараметрыРасчета.ДатаОкончания;
	КонецЕсли;
	
	Возврат ДатаОкончания;
	
КонецФункции

Процедура ПривестиДатуОкончаниюККонцуМесяца(ДатаОкончания, ПараметрыРасчета, КонецМесяцаВПервомПериоде)

	Если КонецМесяцаВПервомПериоде 
		И ПараметрыРасчета.ПериодичностьУплаты = Перечисления.Периодичность.Месяц  Тогда

			ДатаОкончания = КонецМесяца(ДатаОкончания);	
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДатаУплатыПроцентногоПериода(ДатаНачалаПериода, ДатаОкончанияПериода, Знач ПараметрыРасчета)
	
	Если ПараметрыРасчета.ТочкаОтсчетаСдвигаДатыУплаты = Перечисления.СпособыОпределенияДатыОперацииПоПериоду.НачалоПериода Тогда
		ДатаОтсчета = ДатаНачалаПериода;
	Иначе
		//ПараметрыРасчета.ТочкаОтсчетаСдвигаДатыУплаты = Перечисления.СпособыОпределенияДатыОперацииПоПериоду.ОкончаниеПериода
		ДатаОтсчета = ДатаОкончанияПериода;
	КонецЕсли;
	
	Если ПараметрыРасчета.СдвигДатыУплаты = 0 Тогда
		ДатаУплаты = КалендарныеГрафикиУХ.БлижайшийРабочийДень(ПараметрыРасчета.ПроизводственныйКалендарь, ДатаОтсчета, ПараметрыРасчета.ПравилоПереноса);
	ИначеЕсли ПараметрыРасчета.ВидДнейСдвигаУплаты = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням Тогда
		ДатаУплаты = КалендарныеГрафикиУХ.БлижайшийРабочийДень(ПараметрыРасчета.ПроизводственныйКалендарь, ДатаОтсчета + 86400 * ПараметрыРасчета.СдвигДатыУплаты, ПараметрыРасчета.ПравилоПереноса);
	Иначе
		// по рабочим дням
		ДатаУплаты = КалендарныеГрафикиУХ.ПолучитьДатуПоКалендарю(
			ПараметрыРасчета.ПроизводственныйКалендарь, 
			ДатаОтсчета,
			ПараметрыРасчета.СдвигДатыУплаты);
	КонецЕсли;
	
	Возврат ДатаУплаты;
	
КонецФункции

Процедура ОпределитьЗначенияПроцентныхСтавокИзРегистра(ТаблицаПроцентныхПериодов, ПараметрыРасчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаПроцентныхПериодов.ДатаНачала,
	|	ТаблицаПроцентныхПериодов.ДатаОкончания,
	|	ТаблицаПроцентныхПериодов.ДатаНачисления,
	|	ТаблицаПроцентныхПериодов.ДатаУплаты,
	|	ТаблицаПроцентныхПериодов.ДатаФиксацииСтавки
	|ПОМЕСТИТЬ ВТ_ТаблицаПроцентныхПериодов
	|ИЗ
	|	&ТаблицаПроцентныхПериодов КАК ТаблицаПроцентныхПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияКотировокФИ.Период КАК ДатаИндикатора,
	|	ЗначенияКотировокФИ.Значение КАК ЗначениеИндикатора
	|ПОМЕСТИТЬ ВТ_ЗначенияИндикатора
	|ИЗ
	|	РегистрСведений.ЗначенияКотировокФИ КАК ЗначенияКотировокФИ
	|ГДЕ
	|	ЗначенияКотировокФИ.ВидКотировки = &ИндикативнаяСтавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаНачала,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаОкончания,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаУплаты,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаНачисления,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаФиксацииСтавки,
	|	МАКСИМУМ(ВТ_ЗначенияИндикатора.ДатаИндикатора) КАК ДатаИндикатора
	|ПОМЕСТИТЬ ВТ_ТаблицаПроцентныхПериодовДополненная
	|ИЗ
	|	ВТ_ТаблицаПроцентныхПериодов КАК ВТ_ТаблицаПроцентныхПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияИндикатора КАК ВТ_ЗначенияИндикатора
	|		ПО ВТ_ТаблицаПроцентныхПериодов.ДатаФиксацииСтавки >= ВТ_ЗначенияИндикатора.ДатаИндикатора
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаФиксацииСтавки,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаОкончания,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаНачисления,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаНачала,
	|	ВТ_ТаблицаПроцентныхПериодов.ДатаУплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаПроцентныхПериодовДополненная.ДатаНачала КАК ДатаНачала,
	|	ВТ_ТаблицаПроцентныхПериодовДополненная.ДатаОкончания,
	|	ВТ_ТаблицаПроцентныхПериодовДополненная.ДатаУплаты,
	|	ВТ_ТаблицаПроцентныхПериодовДополненная.ДатаНачисления,
	|	ВТ_ТаблицаПроцентныхПериодовДополненная.ДатаФиксацииСтавки,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_ЗначенияИндикатора.ЗначениеИндикатора, 0) + &Маржа > &СтавкаМаксимум
	|				И &СтавкаМаксимум > 0
	|			ТОГДА &СтавкаМаксимум
	|		КОГДА ЕСТЬNULL(ВТ_ЗначенияИндикатора.ЗначениеИндикатора, 0) + &Маржа < &СтавкаМинимум
	|			ТОГДА &СтавкаМинимум
	|		ИНАЧЕ ЕСТЬNULL(ВТ_ЗначенияИндикатора.ЗначениеИндикатора, 0) + &Маржа
	|	КОНЕЦ КАК ПроцентнаяСтавка
	|ИЗ
	|	ВТ_ТаблицаПроцентныхПериодовДополненная КАК ВТ_ТаблицаПроцентныхПериодовДополненная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗначенияИндикатора КАК ВТ_ЗначенияИндикатора
	|		ПО ВТ_ТаблицаПроцентныхПериодовДополненная.ДатаИндикатора = ВТ_ЗначенияИндикатора.ДатаИндикатора
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";

	Запрос.УстановитьПараметр("Маржа", ПараметрыРасчета.ПроцентнаяСтавка);
	Запрос.УстановитьПараметр("СтавкаМинимум", ПараметрыРасчета.ПлавающаяСтавкаМинимум);
	Запрос.УстановитьПараметр("СтавкаМаксимум", ПараметрыРасчета.ПлавающаяСтавкаМаксимум);
	Запрос.УстановитьПараметр("ТаблицаПроцентныхПериодов", ТаблицаПроцентныхПериодов);
	Запрос.УстановитьПараметр("ИндикативнаяСтавка", ПараметрыРасчета.ИндикативнаяСтавка);	
	
	РезультирующаяТаблица = Запрос.Выполнить().Выгрузить();
	ТаблицаПроцентныхПериодов.Очистить();
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(РезультирующаяТаблица, ТаблицаПроцентныхПериодов);
	
КонецПроцедуры

Процедура ОпределитьЗначенияПроцентныхСтавокИзТаблицы(ТаблицаПроцентныхПериодов, ПараметрыРасчета)
	
	Для Каждого ТекПроцентныйПериод Из ТаблицаПроцентныхПериодов Цикл
		
		НайденнаяСтавка = 0;
		ТекПроцентныйПериод.ПроцентнаяСтавка = 0;
		
		Для Каждого ТекСтавка Из ПараметрыРасчета.ПроцентныеСтавки Цикл
			
			Если ТекСтавка.Дата > ТекПроцентныйПериод.ДатаФиксацииСтавки Тогда
				ТекПроцентныйПериод.ПроцентнаяСтавка = НайденнаяСтавка;
				Прервать;
			КонецЕсли;
			
			НайденнаяСтавка = ТекСтавка.ПроцентнаяСтавка;
			
		КонецЦикла;
		
		Если ТекПроцентныйПериод.ПроцентнаяСтавка = 0 Тогда
			ТекПроцентныйПериод.ПроцентнаяСтавка = НайденнаяСтавка;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДатыНачисленийПроцентов(ДатаНачалаОтсчета, ПараметрыРасчета)
	
	МассивДатНачислений = Новый Массив;
	ДатаНачисления = ДатаНачалаОтсчета - 24*60*60;
	Пока ДатаНачисления < ПараметрыРасчета.ДатаОкончания Цикл	
		ДатаНачалаПериодаНачисления = ДатаНачисления + 24*60*60;
		ДатаНачисления = ДатаОкончанияНачисленияПроцентов(ДатаНачалаПериодаНачисления, ПараметрыРасчета);
		МассивДатНачислений.Добавить(ДатаНачисления);
	КонецЦикла;

	Возврат МассивДатНачислений;
	
КонецФункции

Функция ДатаОкончанияНачисленияПроцентов(ДатаНачала, ПараметрыРасчета)
	
	ДатаОкончания = НачалоДня(ОбщегоНазначенияУХ.ДатаКонцаПериода(ДатаНачала, ПараметрыРасчета.ПериодичностьНачисленияПроцентов));
			
	Если ДатаОкончания > ПараметрыРасчета.ДатаОкончания Тогда
		// Все расчеты должны завершиться к завершению действия договора.
		ДатаОкончания = ПараметрыРасчета.ДатаОкончания;
	КонецЕсли;
	
	Возврат ДатаОкончания;

КонецФункции

Процедура ДобавитьДатыНачисленийВТаблицуПроцентныхПериодов(ТаблицаПроцентныхПериодов, МассивДатНачисления)
	
	Для каждого ДатаНачисления Из МассивДатНачисления Цикл
		
		ПерваяСтрока = Неопределено;
		Для каждого СтрокаПериода Из ТаблицаПроцентныхПериодов Цикл
			Если СтрокаПериода.ДатаНачала <= ДатаНачисления И СтрокаПериода.ДатаОкончания > ДатаНачисления Тогда
				ПерваяСтрока = СтрокаПериода; // нужно разделить период по дате начисления
				Прервать;		
			КонецЕсли;
		КонецЦикла;
		
		Если ПерваяСтрока <> Неопределено Тогда
			ВтораяСтрока = ТаблицаПроцентныхПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(ВтораяСтрока, ПерваяСтрока);
			ПерваяСтрока.ДатаОкончания = ДатаНачисления;
			ПерваяСтрока.ДатаНачисления = ДатаНачисления;
			ПерваяСтрока.ДатаУплаты = Дата(1, 1, 1);
			ВтораяСтрока.ДатаНачала = ДатаНачисления + 24*60*60;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция СуммаСтрокТаблицыПоДату(Таблица, ДатаОкончания)
	
	Сумма = 0;
	Для каждого Строка Из Таблица Цикл
		Если Строка.Дата <= ДатаОкончания Тогда
			Сумма = Сумма + Строка.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

Процедура ОкруглитьПолеВТаблице(Таблица, ИмяПоля, КоличествоРазрядов = 2, РежимОкр = Неопределено)
	
	РежимОкр = ?(РежимОкр <> Неопределено, РежимОкр, РежимОкругления.Окр15как10); 
	
	Для каждого Строка Из Таблица Цикл
		Строка[ИмяПоля] = Окр(Строка[ИмяПоля], КоличествоРазрядов, РежимОкр);
	КонецЦикла;
	
КонецПроцедуры	

// Процедура - Распределяет копейки после 3-го разряда равновномерно по всем строкам, чтобы уменьшить погрешность при округлении
//
// Параметры:
//  Таблица		 - ТаблицаЗначений - таблица в которой округляются копейки
//  ПолеСумма	 - Строка - имя поле суммы
//
Процедура РаспределитьСуммыКопекВТаблице(Таблица, ПолеСумма = "Сумма")
	
	Разница = 0;
	Для каждого Строка Из Таблица Цикл
		
		СуммаДо = Строка[ПолеСумма] + Разница;
		Строка[ПолеСумма] = Окр(СуммаДо, 2, РежимОкругления.Окр15как10);
		Разница = СуммаДо - Строка[ПолеСумма] ;	
		
	КонецЦикла;
	
КонецПроцедуры	

Функция НовыйТаблицаПроцентов()
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ДатаНачала",          ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ДатаОкончания",       ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ДатаПлатежа",         ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("ДатаНачисления",      ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("База",                Новый ОписаниеТипов("Число"));	
	Результат.Колонки.Добавить("ПроцентнаяСтавка",    ОбщегоНазначения.ОписаниеТипаЧисло(10,4));
	Результат.Колонки.Добавить("Сумма",               Новый ОписаниеТипов("Число"));
	
	Возврат Результат;
	
КонецФункции

Функция ДатаЗакрытияИнструмента(ТаблицаБазовыхСумм)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаБазовыхСумм.ЗавершаетсяПлатежом КАК ЗавершаетсяПлатежом,
	|	ТаблицаБазовыхСумм.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ТаблицаБазовыхСумм
	|ИЗ
	|	&ТаблицаБазовыхСумм КАК ТаблицаБазовыхСумм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Максимум(ТаблицаБазовыхСумм.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	ТаблицаБазовыхСумм КАК ТаблицаБазовыхСумм
	|ГДЕ
	|	ТаблицаБазовыхСумм.ЗавершаетсяПлатежом";
	
	Запрос.УстановитьПараметр("ТаблицаБазовыхСумм",ТаблицаБазовыхСумм);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Выборка.Следующий();
	
	Возврат Выборка.ДатаОкончания;

КонецФункции

#КонецОбласти
