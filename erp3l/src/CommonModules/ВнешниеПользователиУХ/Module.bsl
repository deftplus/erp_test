#Область ПрограммныйИнтерфейс


// Создать или получить внешнего пользователя связанного
// с объектом авторизации.
//
// Параметры:
//	ОбъектАвторизации - ОпределяемыйТип.ВнешнийПользователь - объект для
//		которой необходимо создать внешнего пользователя.
//	ИдПрофиляГруппыДоступа - Строка - UID профиля группы доступа,
//		для назначения создаваемому внешнему пользователю.
//	ИмяПользователяИБ - Строка - имя внешнего пользователя.
//	ВременныйПароль - Строка - временный пароль пользователя.
//	ПотребоватьСменуПароляПриВходе - Булево - требовать смену пароля
//		при первом входе пользователя.	
//
// Возвращает:
//	Структура - результат работы программы:
//		Успех - Булево - Истина - найден или создан внешний пользователь.
//				Реквизит "Ссылка" заполнен.
//				Ложь - ошибка работы, в реквизите "ТекстОшибки" описание.
//		Ссылка - ОпределяемыйТип.ВнешнийПользователь - внешний пользователь.
//		ТекстОшибки - Строка - описание ошибки. 
//
Функция ПолучитьВнешнегоПользователя(
								ОбъектАвторизации,
								ИдПрофиляГруппыДоступа,
								Знач ИмяПользователяИБ,
								Знач ВременныйПароль,
								ПотребоватьСменуПароляПриВходе=Истина) Экспорт
	Результат = Новый Структура(
					"Успех, Ссылка, ТекстОшибки",
					Ложь, Неопределено, "");
					
	Если НЕ ЗначениеЗаполнено(ОбъектАвторизации) Тогда
		Результат.ТекстОшибки = "Не указан объект авторизации!";
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПользователяИБ) Тогда
		Результат.ТекстОшибки = "Не указано имя пользователя ИБ!";
		Возврат Результат;
	КонецЕсли;
	
	Попытка
		// Свойства пользователя ИБ на которго должен ссылаться ВнешнийПользователь
		ОписаниеПользователяИБ = Пользователи.СвойстваПользователяИБ(ИмяПользователяИБ);
		ПользовательИБСуществует = ОписаниеПользователяИБ <> Неопределено;
		
		ВнешнийПользователь	= Неопределено;
		Если ПользователиСлужебный.ОбъектАвторизацииИспользуется(
						ОбъектАвторизации,
						,
						ВнешнийПользователь) Тогда
			Результат.Ссылка = ВнешнийПользователь;
			
			Если ПользовательИБСуществует Тогда
				 Если ВнешнийПользователь.ИдентификаторПользователяИБ =
						ОписаниеПользователяИБ.УникальныйИдентификатор Тогда
					Результат.Успех = Истина;
				Иначе
					Результат.ТекстОшибки =
						"Внешний пользователь существует, и ему назначен другой пользователь ИБ!";
				КонецЕсли;
				
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		Если ПользовательИБСуществует Тогда
			// Из соображений безопасности, не используем уже существующего
			// пользователя ИБ для создаваемого внешнего пользователя.
			Результат.ТекстОшибки =
					"Уже существует пользователь ИБ с таким именем!";
			Возврат Результат;
		КонецЕсли;
		
		// Создание пользователя ИБ и, при необходимости, ВнешнегоПользователя.
		ПрофильДоступа =
			Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(
				ИдПрофиляГруппыДоступа);
		Если НЕ ЗначениеЗаполнено(ПрофильДоступа) Тогда
			Результат.ТекстОшибки = "Отсутствует профиль группы доступа!";
			Возврат Результат;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВнешнийПользователь) Тогда
			// Создаем внешнего пользователя
			ВнешПользовательОбъект = Справочники.ВнешниеПользователи.СоздатьЭлемент();
			ВнешПользовательОбъект.Наименование = ОбъектАвторизации.Наименование;
			ВнешПользовательОбъект.ОбъектАвторизации = ОбъектАвторизации;
		Иначе
			ВнешПользовательОбъект = ВнешнийПользователь.ПолучитьОбъект();
		КонецЕсли;
		
		// Создаваемый пользователь будет недоступен, пока не будет выслано письмо.
		// Тогда будет включен доступ и создан пароль.
		ОписаниеПользователяИБ = Пользователи.НовоеОписаниеПользователяИБ();
		ОписаниеПользователяИБ.Вставить("Действие", "Записать");
		ОписаниеПользователяИБ.Имя = ИмяПользователяИБ;
		ОписаниеПользователяИБ.ПолноеИмя = ОбъектАвторизации.Наименование;
		ОписаниеПользователяИБ.Пароль = ВременныйПароль;
		ОписаниеПользователяИБ.АутентификацияСтандартная = Истина;
		ОписаниеПользователяИБ.ПоказыватьВСпискеВыбора = Ложь;
		ОписаниеПользователяИБ.Роли = ПолучитьРолиПрофиляГруппыДоступа(ПрофильДоступа);
		
		ВнешПользовательОбъект.ДополнительныеСвойства.Вставить(
				"ОписаниеПользователяИБ", ОписаниеПользователяИБ);
		ВнешПользовательОбъект.Записать();
		
		ВнешнийПользователь = ВнешПользовательОбъект.Ссылка;
		Результат.Ссылка = ВнешнийПользователь;
		
		СоздатьГруппуДоступаДляПользователяИПрофиля(ПрофильДоступа, ВнешнийПользователь);
		
		// Запишем настройки внешнего пользователя
		ПараметрыВнешнегоПользователя = Новый Структура;
		ПараметрыВнешнегоПользователя.Вставить(
			"ПотребоватьСменуПароляПриВходе", ПотребоватьСменуПароляПриВходе);
		ПараметрыВнешнегоПользователя.Вставить("СрокДействияНеОграничен", Истина);
		ПараметрыВнешнегоПользователя.Вставить("СрокДействия", '00010101');
		ПараметрыВнешнегоПользователя.Вставить("ПросрочкаРаботыВПрограммеДоЗапрещенияВхода", 0);
		ПользователиСлужебный.ЗаписатьСведенияОПользователе(
			ПараметрыВнешнегоПользователя, ВнешПользовательОбъект);
		
		// Установим права доступа к папке с файлами
		УстановитьПраваВнешнегоПользователяНаДоступКПапкам(ВнешнийПользователь);
		
		Результат.Успех = Истина;
		
	Исключение
		Результат.ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Возврат Результат;
КонецФункции


#КонецОбласти


#Область ВспомогательныеФункции


Процедура ДобавитьСтрокуУстановкиПрав(ГруппыПрав, Пользователь, ВладелецНастройки, НастройкаРодителя, НаследованиеРазрешено,
		ДобавлениеФайлов, ИзменениеПапок, ИзменениеФайлов, ПометкаУдаленияФайлов, УправлениеПравами, Чтение)
		
	СтрокиОтбора = ГруппыПрав.НайтиСтроки(Новый Структура("Пользователь,ВладелецНастройки", Пользователь, ВладелецНастройки));
	Если СтрокиОтбора.Количество() = 0 Тогда
		ТекущаяСтрока = ГруппыПрав.Добавить();
		ТекущаяСтрока.Пользователь = Пользователь;
		ТекущаяСтрока.ВладелецНастройки = ВладелецНастройки;
	Иначе
		ТекущаяСтрока = СтрокиОтбора[0];
	КонецЕсли;
	
	ТекущаяСтрока.НастройкаРодителя = НастройкаРодителя;
	ТекущаяСтрока.НаследованиеРазрешено = НаследованиеРазрешено;
	ТекущаяСтрока.ДобавлениеФайлов = ДобавлениеФайлов;
	ТекущаяСтрока.ИзменениеПапок = ИзменениеПапок;
	ТекущаяСтрока.ИзменениеФайлов = ИзменениеФайлов;
	ТекущаяСтрока.ПометкаУдаленияФайлов = ПометкаУдаленияФайлов;
	ТекущаяСтрока.УправлениеПравами = УправлениеПравами;
	ТекущаяСтрока.Чтение = Чтение;
КонецПроцедуры

Процедура УстановитьПраваВнешнегоПользователяНаДоступКПапкам(Пользователь)
	ПапкаСвязанныхФайлов = Константы.ПапкаСвязанныхФайлов.Получить();
	НаследоватьПраваРодителей = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НастройкиПрав = РегистрыСведений.НастройкиПравОбъектов.Прочитать(ПапкаСвязанныхФайлов);
	
	ГруппыПрав = НастройкиПрав.Настройки;
	ДобавитьСтрокуУстановкиПрав(ГруппыПрав, Пользователь, ПапкаСвязанныхФайлов, Ложь, Истина, Истина, Ложь, Истина, Ложь, Ложь, Истина);
	
	НачатьТранзакцию();
	Попытка
		РегистрыСведений.НастройкиПравОбъектов.Записать(ПапкаСвязанныхФайлов, ГруппыПрав, НаследоватьПраваРодителей);
		
		УстановитьПривилегированныйРежим(Ложь);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

// Создание персональной группы доступа для пользователя и профиля доступа.
Функция СоздатьГруппуДоступаДляПользователяИПрофиля(ПрофильДоступа, ВнешнийПользователь)
	ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
	ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
	ГруппаДоступаОбъект.Наименование = ПрофильДоступа.Наименование;
	ГруппаДоступаОбъект.Пользователь = ВнешнийПользователь;
	ГруппаДоступаОбъект.Профиль      = ПрофильДоступа;

	ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = ВнешнийПользователь;

	// одна строка. пустая
	НоваяСтрока = ГруппаДоступаОбъект.ВидыДоступа.Добавить();
	НоваяСтрока.ВсеРазрешены = Ложь;
	
	//// можно не заполнять
	//НоваяСтрока = ГруппаДоступаОбъект.ЗначенияДоступа.Добавить();
		
	ГруппаДоступаОбъект.Записать();
	
	Возврат ГруппаДоступаОбъект.Ссылка;
КонецФункции

Функция ПолучитьРолиПрофиляГруппыДоступа(ПрофильДоступа)
	
	мРоли = Новый Массив;
	Для Каждого Роль Из ПрофильДоступа.Роли Цикл
		мРоли.Добавить(Роль.Роль.Имя);
	КонецЦИкла;
	
	Возврат мРоли;
КонецФункции


#КонецОбласти
