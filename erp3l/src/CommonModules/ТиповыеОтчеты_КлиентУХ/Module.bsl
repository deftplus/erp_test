////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА РАСШИФРОВКИ ЭКЗЕМПЛЯРОВ ОТЧЕТОВ.
//

Функция РасшифроватьПоказательМонитораЭффективности(Знач Объект, Знач ВнешнийКонтекст, ДанныеРасшифровки = Неопределено) Экспорт
	
	АдресТаблиц = ТиповыеОтчетыУХ.ВернутьТаблицыПоказателяМонитораКлючевыхПоказателей(Объект, ВнешнийКонтекст);
	
	Возврат ТиповыеОтчетыУХ.ВывестиОтчетПоМонитору(Объект, АдресТаблиц);
	
КонецФункции

Процедура ОбработкаРасшифровкиАналитическогоОтчета() Экспорт
	
	
	
КонецПроцедуры

// Расшифровывает операнд ОперандВход показателя монитора ключевых показателей ПоказательВход 
// по основному способу.
&НаКлиенте
Процедура ОсновнаяРасшифровка(КонтекстВход, ОперандВход, ПоказательВход, ИспользуемаяИБВход, ОтборПоВалютеВход, ФормаВладелецВход) Экспорт
	КонтекстВход.Вставить("ИспользуемаяИБ", ИспользуемаяИБВход);
	
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		
		КонтекстВход.Вставить("УправляемыйРежим", Ложь);
		УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(ОперандВход, КонтекстВход);
		
	#Иначе
		
		КонтекстВход.Вставить("УправляемыйРежим", Истина);
		СпособПолучения = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ОперандВход, "СпособПолучения");
		Если СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета") Тогда
			
		Иначе
			РезультатРасшифровки = УправлениеОтчетамиУХ.РасшифроватьДанныеОперанда(ОперандВход, КонтекстВход);
		КонецЕсли;
		
		Если ТипЗнч(РезультатРасшифровки)=Тип("ТабличныйДокумент") Тогда
			
			ПараметрыФормы = Новый Структура("ИспользуемаяИБ, Результат", КонтекстВход.ИспользуемаяИБ, РезультатРасшифровки);
			ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.ФормаРасшифровкиВИБ_Управляемая", ПараметрыФормы);
			
		ИначеЕсли ТипЗнч(РезультатРасшифровки)=Тип("Структура") Тогда
			
			Если РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии")
				ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии")  Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления")
				ИЛИ РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоРегиструНакопленияБД.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос") Тогда
				
				РасширениеБизнесЛогикиУХКлиент.ОткрытьОтчетПоПроизвольномуЗапросуВИБ(РезультатРасшифровки);
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос") Тогда
				
				ОткрытьФорму("Отчет.ОтчетПоПроизвольномуЗапросуТек.Форма.ФормаОтчета",РезультатРасшифровки,,Новый УникальныйИдентификатор);
				
				
			ИначеЕсли РезультатРасшифровки.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета") Тогда			
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("МассивКодовПоказателей", Новый Массив);
				СтруктураПараметров.Вставить("РабочийОбъектАдрес", "");
				СтруктураПараметров.Вставить("мТекущаяВалюта", ОтборПоВалютеВход);
				ОткрытьФорму("Документ.НастраиваемыйОтчет.Форма.РасшифровкаПоказателейУправляемая",СтруктураПараметров, ФормаВладелецВход);
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант (%СпособПолученияДанных%) показателя %Показатель% для расшифровки. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособПолученияДанных%", Строка(РезультатРасшифровки.СпособПолучения));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ПоказательВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;
		
	#КонецЕсли
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ОТБОРАМИ.
//

Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Поле;
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции


// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
Функция УдалитьОтбор(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если Поле = Неопределено Тогда
		Отбор.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ПолеУдалено = Ложь;
	Элементы = ПолучитьЭлементыОтбора(Отбор);
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ЛевоеЗначение = Поле Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУдаляемыхЭлементов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив элементов отбора или групп элементов отбора
Функция ПолучитьЭлементыОтбора(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	
	ДобавитьЭлементыОтбораВМассив(ЭлементСтруктуры.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

