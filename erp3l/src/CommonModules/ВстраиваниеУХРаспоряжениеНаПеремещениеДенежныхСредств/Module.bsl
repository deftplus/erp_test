#Область СобытияМодуляФормы

#Область ФормаДокумента

#Область СтандартныеОбработчики
	
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПлатежнаяПозиция", Форма.ПлатежнаяПозиция.Выгрузить());
	
	Если ПараметрыЗаписи.Свойство("НеОтправлятьНаСогласованиеПриПроведении") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеОтправлятьНаСогласованиеПриПроведении", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	ЭтоПроведение = (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение);
	ЭтоОтменаПроведения = (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения);
	ЕстьИзменениеПроведения = (ЭтоПроведение ИЛИ ЭтоОтменаПроведения);
	Если ЕстьИзменениеПроведения Тогда 
		ОпределитьСостояниеОбъекта(Форма);
	Иначе	
		// Не обновляем состояние на форме.
	КонецЕсли;

	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
	// Сформируем параметры оповещения "ИзмененДокументТранзакции"
	ИменаРеквизитов = "Организация, Проект";
	ПараметрыОповещения = Новый Структура(ИменаРеквизитов);
	ЗаполнитьЗначенияСвойств(ПараметрыОповещения, ТекущийОбъект, ИменаРеквизитов);
	ПараметрыОповещения.Проект = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийОбъект.Проект, "ПроектЭтапа");
	
	ПараметрыЗаписи.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
КонецПроцедуры

#КонецОбласти 

#Область НеСтандартныеОбработчики

// нетиповое событие документа. Вызывается перед исполнением основного кода
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	
	// Создаем необходимые реквизиты
	СоздатьРеквизитыФормыДокумента(Форма);
	СоздатьЭлементыФормыДокумента(Форма);
	ПодготовитьФормуНаСервере(Форма);
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма);
	
КонецПроцедуры

Процедура УправлениеЭлементамиФормы(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Элементы.Статус.Видимость = Ложь;
	Элементы.КтоРешил.Видимость = Ложь;
	Элементы.ГруппаРассмотрение.Видимость = Ложь;
	
	// Всегда видны закладки
	Элементы.ГруппаСтраницы.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементовПоСтатусу(Форма, ТолькоПросмотрЭлементов) Экспорт
	
	Элементы = Форма.Элементы;
	
	Элементы.ЦФО.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Проект.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.СтатьяДвиженияДенежныхСредств.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.СтатьяДвиженияДенежныхСредствЗачисление.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Аналитика1.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Аналитика2.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.Аналитика3.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.АналитикаЗачисление1.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.АналитикаЗачисление2.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.АналитикаЗачисление3.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ВидОперацииУХ.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ППОтправитель.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ПППолучатель.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ППДатаИсполнения1.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	Элементы.ППДатаИсполнения2.ТолькоПросмотр = ТолькоПросмотрЭлементов;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьРеквизитыФормыДокумента(Форма)

	//
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Реквизиты = Новый Массив;
	//
	ПлатежныеПозиции.ДобавитьРеквизитыФормыПлатежнаяПозиция(Реквизиты, Форма);
	//
	Реквизиты.Добавить(Новый РеквизитФормы("ЕстьСуперПользователь",			Новый ОписаниеТипов("Булево")));
	Реквизиты.Добавить(Новый РеквизитФормы("РеквизитыДокумента",			Новый ОписаниеТипов("Неопределено")));
	
	Реквизиты.Добавить(Новый РеквизитФормы("Информация",					ОбщегоНазначения.ОписаниеТипаСтрока(20)));
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
	//
	Форма.РеквизитыДокумента = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Метаданные.Документы.РаспоряжениеНаПеремещениеДенежныхСредств.ПолноеИмя());
	
КонецПроцедуры

Функция ПолучитьПараметрыЭлементов()
	
	ПараметрыЭлементов = ФормыУХ.ПолучитьПараметрыЭлементовПоУмолчанию();
	ПараметрыЭлементов.ГруппаВ.ОтображатьЗаголовок  = Ложь;
	
	Возврат ПараметрыЭлементов;
	
КонецФункции

Процедура СоздатьЭлементыФормыДокумента(Форма) 
	
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
	//
	ПараметрыЭлементов = ПолучитьПараметрыЭлементов();
	
	#Область СтраницаАналитикиПланирования
	//
	СтраницаАналитик = ФормыУХ.СоздатьГруппуФормы(Элементы, "АналитикиПланирования", НСтр("ru = 'Аналитики учета и планирования'"), 
							ВидГруппыФормы.Страница, Элементы.ГруппаСтраницы, Элементы.СтраницаПодтверждающиеДокументы);
	ГруппаАналитики = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитики", , ,  СтраницаАналитик);
	
	ГруппаАналитикиБюджетаЛевая  = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиЛево",  ,, ГруппаАналитики,, ПараметрыЭлементов.ГруппаВ);
	ГруппаАналитикиБюджетаПравая = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиПраво", ,, ГруппаАналитики,, ПараметрыЭлементов.ГруппаВ);
	
	//
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФО",, "Объект.ЦФО",,		
			ГруппаАналитикиБюджетаЛевая, , ПараметрыЭлементов.ПолеВвода28,
			Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииЦФО"));
			
	ФормыУХ.СоздатьПолеФормы(Элементы, "Проект",, "Объект.Проект",,	
			ГруппаАналитикиБюджетаЛевая, , ПараметрыЭлементов.ПолеВвода28,
			Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииПроекта"));
			
	// Поле информация - замена декорации, но с такой-же высотой, как и у поля ввода
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ПолеДекорация1", , "Информация",,
		ГруппаАналитикиБюджетаПравая,,ПараметрыЭлементов.ПолеВводаНевидимое);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ПолеДекорация2", , "Информация",,
		ГруппаАналитикиБюджетаПравая,, ПараметрыЭлементов.ПолеВводаНевидимое);
	
	ФормыУХ.СоздатьПолеФормы(Элементы, "СтатьяДвиженияДенежныхСредств", НСтр("ru = 'Статья ДДС (списание)'"), "Объект.СтатьяДвиженияДенежныхСредств",,
			ГруппаАналитикиБюджетаЛевая, , ПараметрыЭлементов.ПолеВвода28);
	
	ФормыУХ.СоздатьПолеФормы(Элементы, "СтатьяДвиженияДенежныхСредствЗачисление", НСтр("ru = 'Статья ДДС (зачисление)'"), "Объект.СтатьяДвиженияДенежныхСредствЗачисление",,		
			ГруппаАналитикиБюджетаПравая, , ПараметрыЭлементов.ПолеВвода28);
	
	#КонецОбласти 
	
	#Область АналитикиСтатьиБюджета
		
	// Статьи бюджетов
	АСБ = АналитикиСтатейБюджетовУХ;
	МассивОписанийСтатей = Новый Массив;
	
	// Статья в шапке документа Статья и Аналитика в Объекте (ВидАналитики нельзя создать в реквизите формы Объект. Должны быть созданы реквизиты формы)
	ДанныеАналитикиШапки = АСБ.Новый_АналитикиСтатьиБюджета("Аналитика%1", "Объект", "");
	ПараметрыСтатьиШапки = АСБ.Новый_СтатьяБюджетов("СтатьяДвиженияДенежныхСредств", "Объект", ДанныеАналитикиШапки);
	
	ИмяЭлемента = Элементы.СтатьяДвиженияДенежныхСредств.Имя;
	ИмяРодителя = Элементы.СтатьяДвиженияДенежныхСредств.Родитель.Имя;
	АСБ.СтатьяБюджета_НовыйЭлементФормы(ПараметрыСтатьиШапки, ИмяЭлемента, "Объект", ИмяРодителя);
	АСБ.СтатьяБюджетов_ЭлементыАналитикиИзШаблона(ПараметрыСтатьиШапки, ИмяЭлемента, "Аналитика%1", "Объект", "");
	
	//
	МассивОписанийСтатей.Добавить(ПараметрыСтатьиШапки);
	
	// Статья зачисления в шапке документа
	ДанныеАналитикиШапкиЗачисление = АСБ.Новый_АналитикиСтатьиБюджета("АналитикаЗачисление%1", "Объект", "");
	ПараметрыСтатьиШапкиЗачисление = АСБ.Новый_СтатьяБюджетов("СтатьяДвиженияДенежныхСредствЗачисление", "Объект", ДанныеАналитикиШапкиЗачисление);
	
	ИмяЭлемента = "СтатьяДвиженияДенежныхСредствЗачисление";
	ИмяРодителя = ГруппаАналитикиБюджетаПравая.Имя;
	АСБ.СтатьяБюджета_НовыйЭлементФормы(ПараметрыСтатьиШапкиЗачисление, ИмяЭлемента, "Объект", ИмяРодителя);
	АСБ.СтатьяБюджетов_ЭлементыАналитикиИзШаблона(ПараметрыСтатьиШапкиЗачисление, ИмяЭлемента, "АналитикаЗачисление%1", "Объект", "");
	
	//
	МассивОписанийСтатей.Добавить(ПараметрыСтатьиШапкиЗачисление);
	
	// Создать элементы формы для статей бюджетов и их аналитик
	АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(Форма, МассивОписанийСтатей, ПараметрыЭлементов.ПолеВвода28);
	#КонецОбласти 
	
	Элементы.СтатьяДвиженияДенежныхСредств.АвтоОтметкаНезаполненного = Истина;
	Элементы.СтатьяДвиженияДенежныхСредств.АвтоВыборНезаполненного = Истина;
	
	СоздатьЭлементыПлатежнойПозиции(Форма, ПараметрыЭлементов);
	
	//
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ВидОперацииУХ", НСтр("ru = 'Вид операции'"),
		"Объект.ВидОперацииУХ",, Элементы.ГруппаДополнительныеРеквизиты, Элементы.ХозяйственнаяОперация,
		ПараметрыЭлементов.ПолеВводаВидаОперацииУХ);
	Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииВидаОперацииБюджетирования");
	
	// Хозоперация ERP заменена на операцию УХ.
	Элементы.ХозяйственнаяОперация.ТолькоПросмотр = Истина;
	Элементы.ХозяйственнаяОперация.Видимость = Ложь;
	
	Элементы.ДатаПлатежа.Видимость = Ложь;
	
КонецПроцедуры

Процедура УточнитьСписокОперацийУХ(Форма)
	
	СписокХозОпераций = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.ВыгрузитьЗначения();
	
	// Исключаем операции номер 1
	Поз = СписокХозОпераций.Найти(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	Если Поз <> неопределено Тогда
		СписокХозОпераций.Удалить(Поз);
	КонецЕсли;
	
	// Исключаем операции номер 5
	Поз = СписокХозОпераций.Найти(Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка);
	Если Поз <> неопределено Тогда
		СписокХозОпераций.Удалить(Поз);
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокХозяйственныхОпераций", СписокХозОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОперацийУХ.Ссылка КАК ВидОперацииУХ
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ВидОперацииДДСБезналичныйРасчет В(&СписокХозяйственныхОпераций)
	|	И ВидыОперацийУХ.ДопустимБезналичныйРасчет = ИСТИНА
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыОперацийУХ.Ссылка
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ДопустимНаличныйРасчет = ИСТИНА
	|	И ВидыОперацийУХ.ВидОперацииДДСНаличныйРасчет В(&СписокХозяйственныхОпераций)";
	
	Результат = Запрос.Выполнить();
	
	Массив = Результат.Выгрузить().ВыгрузитьКолонку("ВидОперацииУХ");
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(Массив)));
	Форма.Элементы.ВидОперацииУХ.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);	
	Форма.Элементы.ВидОперацииУХ.СписокВыбора.ЗагрузитьЗначения(Массив);
	
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма)
	
	Объект = Форма.Объект;
	
	//
	УточнитьСписокОперацийУХ(Форма);
	ПлатежныеПозиции.ИнициализироватьПлатежнуюПозициюЗаявки(Форма);
	ОперативноеПланированиеФормыУХ.ОпределитьНаличиеПредопределенныхРолей(Форма);
	
КонецПроцедуры

Процедура СоздатьЭлементыПлатежнойПозиции(Форма, ПараметрыЭлементов)
	
	Элементы = Форма.Элементы;
	
	Параметры = ФормыУХ.ДополнитьСтруктуру(ПараметрыЭлементов.ПолеВвода28, 
		Новый Структура("ВыбиратьТип, АвтоОтметкаНезаполненного, АвтоВыборНезаполненного", Ложь, Истина, Истина));
	
	// Отправитель
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ППОтправитель", НСтр("ru = 'Отправитель'"), "ПлатежнаяПозиция[0].БанковскийСчетКасса",,
		Элементы.ГруппаОсновныеРеквизиты, Элементы.БанковскийСчет, Параметры);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизитаПлатежнойПозиции");
	
	// Получатель
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ПППолучатель", НСтр("ru = 'Получатель'"), "ПлатежнаяПозиция[1].БанковскийСчетКасса",,	
		Элементы.ГруппаДополнительныеРеквизиты, Элементы.БанковскийСчетПолучатель, Параметры);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизитаПлатежнойПозиции");
	
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элемент,	"Отбор.ВалютаДенежныхСредств",	"Объект.Валюта"); 
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элемент,	"Отбор.Владелец",				"Объект.Организация");
	
	// Дата исполнения 1-й части
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ППДатаИсполнения1", НСтр("ru = 'Дата списания'"), "ПлатежнаяПозиция[0].ДатаИсполнения",,
		Элементы.ГруппаОсновныеРеквизиты, Элементы.БанковскийСчет, Параметры);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизитаПлатежнойПозиции");
	
	// Дата исполения 2-й части
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ППДатаИсполнения2", НСтр("ru = 'Дата зачисления'"), "ПлатежнаяПозиция[1].ДатаИсполнения",,
		Элементы.ГруппаДополнительныеРеквизиты, Элементы.БанковскийСчетПолучатель, Параметры);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизитаПлатежнойПозиции");
	
	// Сумма
	Элементы.СуммаДокумента.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииРеквизитаПлатежнойПозиции");
	
КонецПроцедуры

Процедура ОпределитьСостояниеОбъекта(Форма, ОбновитьОтветственныхВход = Ложь) Экспорт
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(Форма, ОбновитьОтветственныхВход);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ФормаСпискаДокументов

Процедура ФормаСпискаДокументов_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	#Область ИзменениеЗапроса
		
	// Модификация запроса
	ТекстЗапроса = Форма.Список.ТекстЗапроса;
	
	// Доп.Таблицы
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.РаспоряжениеНаПеремещениеДенежныхСредств) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = ДанныеДокумента.Ссылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|	ПО (РазмещениеЗаявок.ЗаявкаНаОперацию = ДанныеДокумента.Ссылка И РазмещениеЗаявок.ПриходРасход = Значение(Перечисление.ВидыДвиженийПриходРасход.Расход))
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК ВстречнаяПозиция
	|	ПО (ВстречнаяПозиция.ЗаявкаНаОперацию = ДанныеДокумента.Ссылка И ВстречнаяПозиция.ПриходРасход = Значение(Перечисление.ВидыДвиженийПриходРасход.Приход))
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|	ПО (СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования = РазмещениеЗаявок.ЗаявкаНаОперацию)
	|		И (СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции = РазмещениеЗаявок.ИдентификаторПозиции)";
	
	// Поле Статус
	ТекстДляЗамены = "ДанныеДокумента.Статус,";
	ТекстЗамены = "ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК Статус,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения) > 1
	|			ТОГДА ""<Различные состояния>""
	|		ИНАЧЕ МИНИМУМ(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения)
	|	КОНЕЦ КАК СостояниеИсполнения,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
	
	// Поле БанкКасса
	ТекстДляЗамены = "	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СдачаДенежныхСредствВБанк),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк)
	|			)
	|			ТОГДА ДанныеДокумента.Касса
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчет
	|	КОНЕЦ";
	ТекстЗамены = "РазмещениеЗаявок.БанковскийСчетКасса";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
	
	// Поле БанкКассаПолучатель
	ТекстДляЗамены = "	ВЫБОР
	|		КОГДА ДанныеДокумента.ХозяйственнаяОперация В (
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка),
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств)
	|			)
	|			ТОГДА ДанныеДокумента.КассаПолучатель
	|		ИНАЧЕ ДанныеДокумента.БанковскийСчетПолучатель
	|	КОНЕЦ";
	ТекстЗамены = "ВстречнаяПозиция.БанковскийСчетКасса";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
	
	// Группировка
	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО 
	|	ДанныеДокумента.Ссылка,
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта,
	|	ДенежныеСредства.СуммаОстаток,
	|	РазмещениеЗаявок.БанковскийСчетКасса,
	|	ВстречнаяПозиция.БанковскийСчетКасса";
	
	//
	Форма.Список.ТекстЗапроса = ТекстЗапроса;
	
	#КонецОбласти
	
	Если НЕ ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		СоздатьЭлементыФормыСпискаДокументов(Форма);
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементыФормыСпискаДокументов(Форма) 
	
	Элементы = Форма.Элементы;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
	// Состояние исполнения
	ФормыУХ.СоздатьПолеФормы(Элементы, "СостояниеИсполнения", НСтр("ru = 'Состояние исполнения'"), "Список.СостояниеИсполнения", , Элементы.Список, Элементы.СписокРаспоряжениеОплачено);
	
	//
	Элементы.СписокСтатус.Заголовок = "";
	Элементы.ГруппаУстановитьСтатус.Видимость = Ложь;
	Элементы.СписокРаспоряжениеОплачено.Видимость = Ложь;
	Элементы.СписокУстановитьСтатусКОплате.Видимость = Ложь;
	
	// Команды установки статуса ERP для заявки отключены
	Элементы.ГруппаФункцииКонтекстноеМеню.Видимость = Ложь;
	
	// Исключаем операцию номер 5
	
	Элементы.СписокСоздать.Видимость = Ложь;
	Элементы.СписокСоздать1.Видимость = Ложь;
	Элементы.СписокСоздатьПоступлениеДенежныхСредствИзБанка.Видимость = Ложь;
	Элементы.СписокСоздатьПоступлениеДенежныхСредствИзБанка1.Видимость = Ложь;
	
	//
	Форма.УстановитьДействие("ОбработкаОповещения", "ОбработкаОповещения");
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#Область МодульОбъекта

Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Если нет таблицы платежной позиции - актуализируем ее.
	Если Объект.ЭтоНовый() И НЕ Объект.ДополнительныеСвойства.Свойство("ПлатежнаяПозиция") Тогда
		
		Объект.ДополнительныеСвойства.Вставить("ПлатежнаяПозиция", 
			ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	//
	ЭтоНовыйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "ЭтоНовый", Ложь);
	ДвиженияБюджетированиеУХ.УстановитьСтатусЧерновикПриНеобходимости(Объект, ЭтоНовыйДокумент);
	
	ПлатежныеПозиции.ЗаписатьПлатежнуюПозициюПриЗаписи(Объект);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	ПроверяемыеРеквизиты.Добавить("СтатьяДвиженияДенежныхСредств");
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	// Подмена операции по умолчанию
	Если ДанныеЗаполнения = неопределено Тогда
		ДанныеЗаполнения = Новый Структура;
		ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		Если ОбщегоНазначенияУХ.СвойствоЗаполнено(ДанныеЗаполнения, "ВидОперацииУХ") 
			И НЕ ОбщегоНазначенияУХ.СвойствоЗаполнено(ДанныеЗаполнения, "ХозяйственнаяОперация") Тогда
				НоваяХозОперация = ПолучитьХозОперациюПоВидуОперацииУХ(ДанныеЗаполнения.ВидОперацииУХ);
			Если ЗначениеЗаполнено(НоваяХозОперация) Тогда
				ДанныеЗаполнения.Вставить("ХозяйственнаяОперация", НоваяХозОперация);
			КонецЕсли;
		КонецЕсли;
		
		Если ОбщегоНазначенияУХ.СвойствоЗаполнено(ДанныеЗаполнения, "ХозяйственнаяОперация")
			И НЕ ОбщегоНазначенияУХ.СвойствоЗаполнено(ДанныеЗаполнения, "ВидОперацииУХ") Тогда
			НовыйВидОперацииУХ = ПолучитьВидОперацииУХПоХозОперации(ДанныеЗаполнения.ХозяйственнаяОперация);
			Если ЗначениеЗаполнено(НовыйВидОперацииУХ) Тогда
				ДанныеЗаполнения.Вставить("ВидОперацииУХ", НовыйВидОперацииУХ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьВидОперацииУХПоХозОперации(ХозяйственнаяОперация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ХозяйственнаяОперация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыОперацийУХ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ДопустимБезналичныйРасчет = ИСТИНА
	|	И ВидыОперацийУХ.ВидОперацииДДСБезналичныйРасчет = &ХозяйственнаяОперация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыОперацийУХ.Ссылка
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ДопустимНаличныйРасчет = ИСТИНА
	|	И ВидыОперацийУХ.ВидОперацииДДСНаличныйРасчет = &ХозяйственнаяОперация";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ВидыОперацийУХ.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПолучитьХозОперациюПоВидуОперацииУХ(ВидОперацииУХ)
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
		ВидОперацииУХ, 
		"ДопустимБезналичныйРасчет, ВидОперацииДДСБезналичныйРасчет, ДопустимНаличныйРасчет, ВидОперацииДДСНаличныйРасчет");
		
	Если Реквизиты.ДопустимБезналичныйРасчет Тогда
		Возврат Реквизиты.ВидОперацииДДСБезналичныйРасчет;
	ИначеЕсли Реквизиты.ДопустимНаличныйРасчет Тогда
		Возврат Реквизиты.ВидОперацииДДСНаличныйРасчет;
	КонецЕсли;
	
	Возврат Перечисления.ХозяйственныеОперации.ПустаяСсылка();
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область МодульМенеджера

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Функция ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	УдаляемыеРеквизиты = Новый Структура("Касса, КассаПолучатель, БанковскийСчет, БанковскийСчетПолучатель");
	Для каждого КлючЗначение Из УдаляемыеРеквизиты Цикл
		// Поля БанковскийСчет не видно никогда
		Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, КлючЗначение.Ключ, "Видимость");
		Если Элементы.Количество() > 0 Тогда
			Элемент = Элементы[0];
			Элемент.Условие.Элементы.Очистить();
			ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Функция возвращает отправителя денежных средств
Функция БанковскийСчетКассаОтправитель(ОбъектЗаявка) экспорт
	
	Если ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк
		ИЛИ ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк 
		ИЛИ ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу Тогда
		ИмяРеквизита = "Касса";
	Иначе
		ИмяРеквизита = "БанковскийСчет";
	КонецЕсли;
	
	Возврат ОбъектЗаявка[ИмяРеквизита];
	
КонецФункции

// Функция возвращает получателя денежных средств
Функция БанковскийСчетКассаПолучатель(ОбъектЗаявка) экспорт
	
	Если ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу
		ИЛИ ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзБанка 
		ИЛИ ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств Тогда
		ИмяРеквизита = "КассаПолучатель";
	Иначе
		ИмяРеквизита = "БанковскийСчетПолучатель";
	КонецЕсли;
	
	Возврат ОбъектЗаявка[ИмяРеквизита];
	
КонецФункции

Процедура УстановитьБКОтправитель(ПлатежнаяПозиция, БанковскийСчетКасса, Валюта) экспорт
	
	ПП1 = ПлатежнаяПозиция[0];
	ПП2 = ПлатежнаяПозиция[1];
	
	ПП1.БанковскийСчетКасса = БанковскийСчетКасса;
	ПП1.ВалютаОплаты = Валюта;
	ПП1.ВалютаВзаиморасчетов = Валюта;
	
	ПП2.ВалютаОплаты = Валюта;
	ПП2.ВалютаВзаиморасчетов = Валюта;
	
КонецПроцедуры

Процедура УстановитьБКПолучатель(ПлатежнаяПозиция, БанковскийСчетКасса) экспорт
	
	ПП2 = ПлатежнаяПозиция[1];
	ПП2.БанковскийСчетКасса = БанковскийСчетКасса;
	
КонецПроцедуры

Процедура ПлатежнаяПозицияОчиститьПолучателя(ПлатежнаяПозиция) экспорт
	
	Позиция2 = ПлатежнаяПозиция[1];
	Если ТипЗнч(Позиция2.БанковскийСчетКасса) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		Позиция2.БанковскийСчетКасса = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	ИначеЕсли ТипЗнч(Позиция2.БанковскийСчетКасса) = Тип("СправочникСсылка.Кассы") Тогда
		Позиция2.БанковскийСчетКасса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

