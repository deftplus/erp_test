////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции, используемые при отражения документов
//  в международном учете.
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - см. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  см. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет")
			Или Документ.ДополнительныеСвойства.Свойство("НеРегистрироватьКОтражениюВМеждународномУчете")
				И Документ.ДополнительныеСвойства.НеРегистрироватьКОтражениюВМеждународномУчете Тогда
			Возврат Параметры;
		КонецЕсли;
		
		ТипыДокументовСНепосредственнымФормированиемПроводок = МеждународныйУчетПоДаннымДокументов.ТипыДокументовКОтражению();
		Если ТипыДокументовСНепосредственнымФормированиемПроводок[ТипЗнч(Документ.Ссылка)] <> Неопределено Тогда
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыБухгалтерии.Международный);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете);
		КонецЕсли;
		
		Параметры.ЕстьПроизводныеДвижения = Истина;
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции


// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСторно.Ссылка  КАК Регистратор,
		|	ДокументыСторно.Дата КАК Период,
		|	ОтражениеДокументовВМеждународномУчете.ПланСчетов КАК ПланСчетов,
		|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
		|	НАЧАЛОПЕРИОДА(ДокументыСторно.Дата, ДЕНЬ) КАК ДатаОтражения,
		|	НЕОПРЕДЕЛЕНО КАК ХозяйственнаяОперация
		|ИЗ
		|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|		&ИмяДокумента КАК ДокументыСторно
		|	ПО
		|		ОтражениеДокументовВМеждународномУчете.Регистратор = ДокументыСторно.СторнируемыйДокумент
		|		И ДокументыСторно.Ссылка В (&Ссылка)
		|";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяДокумента", МетаданныеДокумента.ПолноеИмя());
		
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(), ТекстЗапроса);
	КонецЕсли;
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам международного учета.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Или Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицыМеждународный = "Таблица" + "Международный";
	
	Если ТаблицыДляДвижений.Свойство(ИмяТаблицыМеждународный) Тогда // без отложенных движений
		
		Если ЗначениеЗаполнено(ТаблицыДляДвижений[ИмяТаблицыМеждународный]) Тогда
			
			Движения.Международный.Записывать = Истина;
			Движения.Международный.Загрузить(ТаблицыДляДвижений[ИмяТаблицыМеждународный]);
			
		КонецЕсли;
		
	Иначе // пробросим таблицы данных для последующего отражения после записи движений документа
		
		Если ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
			
			ИмяТаблицы = "Таблица" + "ОтражениеДокументовВРеглУчете";
			
			Если ТаблицыДляДвижений.Свойство(ИмяТаблицы) Тогда
				Движения.ОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства.Вставить(
					ИмяТаблицы,
					ТаблицыДляДвижений[ИмяТаблицы]);
			КонецЕсли;
			
			Если ТаблицыДляДвижений.Свойство("ТаблицаВыборочнойРегистрацииКОтражению") Тогда
				Движения.ОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства.Вставить(
					"ТаблицаВыборочнойРегистрацииКОтражению",
					ТаблицыДляДвижений.ТаблицаВыборочнойРегистрацииКОтражению);
			КонецЕсли;
		КонецЕсли;
		
		ИмяТаблицы = "Таблица" + "ОтражениеДокументовВМеждународномУчете";
		
		Если ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям")
			И ТаблицыДляДвижений.Свойство(ИмяТаблицы) Тогда
				Движения.ОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства.Вставить(
					ИмяТаблицы,
					ТаблицыДляДвижений[ИмяТаблицы]);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Возникает перед выполнением записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//                                                      который используется для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПередЗаписьюДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	Возврат; // пустой обработчик
	
КонецПроцедуры

// Возникает после выполнения записи регистров документа.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц,
//                                                      который используется для хранения таблиц контроля изменений регистров.
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура ПослеЗаписиДвиженийДокумента(Документ, МенеджерВременныхТаблиц, Отказ) Экспорт
	
	ЗарегистрироватьКОтражению(Документ, Документ.ДополнительныеСвойства, Документ.Движения, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДокументовКОтражениюВМеждународномУчете

// Возвращает документы к отражению в международном учете для заданных периодов отражения
//
// Параметры:
// 	ДокументыКОтражению -   ТаблицаЗначений, 
// 							МенеджерВременныхТаблиц - Таблица документов, которые надо вернуть к отражению, 
// 													  или менеджер временных таблиц имеющий таблицу ДокументыКОтражению
// 													  Таблица должна иметь колонки Документ, Организация, ДатаОтражения. 
//
Процедура ВернутьДокументыКОтражению(ДокументыКОтражению) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	КлючеваяОперация = "МеждународныйУчет.ВозвратДокументовКОтражению";
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(КлючеваяОперация);
	КоличествоДокументов = 0;
	
	МенеджерВременныхТаблиц = ИнициализироватьМенеджерДляВозвратаКОтражению(ДокументыКОтражению);
	
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Отбор = Новый Структура("Период, Регистратор",'00010101',Неопределено);
		Пока Истина Цикл
			
			ДанныеКОтражению = ДанныеДляВозвратаКОтражениюВУчете(МенеджерВременныхТаблиц, Отбор);
			
			ВыборкаПоДокументам = ДанныеКОтражению.Регистраторы;
			Если ВыборкаПоДокументам.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			
			ДанныеРегистра = ДанныеКОтражению.ДанныеРегистра;
			Отбор = Новый Структура("Период, Регистратор",'00010101',Неопределено);
			Пока ВыборкаПоДокументам.Следующий() Цикл
				НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей(); // РегистрСведенийНаборЗаписей - 
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Регистратор);
				ЗаполнитьЗначенияСвойств(Отбор, ВыборкаПоДокументам);
				НайденныеСтроки = ДанныеРегистра.Скопировать(Отбор);
				Если НайденныеСтроки <> Неопределено Тогда
					Для Каждого НовыеДанные Из НайденныеСтроки Цикл
						НоваяЗапись = НаборЗаписей.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяЗапись, НовыеДанные);
					КонецЦикла;
				КонецЕсли;
				НаборЗаписей.Записать();
			КонецЦикла;
			КоличествоДокументов = КоличествоДокументов + ВыборкаПоДокументам.Количество();
		КонецЦикла;
	КонецЕсли;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДокументов);
	
КонецПроцедуры

// Формирует движения по регистру ОтражениеДокументовВМеждународномУчете, выполняет очистку неактуальных записей в Международный.
// Для документов отражаемых в международном учете по данным оборотных регистров и регл. учета.
//
// Параметры:
//  Объект - ДокументОбъект, Структура - документ регистрируемый к отражению.
//  ДополнительныеСвойства - Структура - дополнительные свойства документа инициализированные при проведении документа.
//  Движения - КоллекцияДвижений - наборы записей регистров записываемые документом.
//                                 На момент вызова метода все наборы должны быть записаны.
//  Отказ - Булево - признак отказа в проведении.
//
Процедура ЗарегистрироватьКОтражению(Объект, ДополнительныеСвойства, Движения, Отказ = Ложь) Экспорт
	
	Если Отказ ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("НеРегистрироватьКОтражениюВМеждународномУчете") 
		 И ДополнительныеСвойства.НеРегистрироватьКОтражениюВМеждународномУчете Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		
		Если НЕ Объект.Свойство("Дата") Тогда
			ДатаДокумента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Дата");
			Объект.Вставить("Дата", ДатаДокумента);
		КонецЕсли;
		
		Если НЕ Движения.Свойство("Международный") Тогда
			Международный = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
			Международный.Отбор.Регистратор.Установить(Объект.Ссылка);
			Движения.Вставить("Международный", Международный);
		КонецЕсли;
		
		Если НЕ Движения.Свойство("ОтражениеДокументовВМеждународномУчете") Тогда
			ОтражениеДокументовВМеждународномУчете = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			ОтражениеДокументовВМеждународномУчете.Отбор.Регистратор.Установить(Объект.Ссылка);
			Движения.Вставить("ОтражениеДокументовВМеждународномУчете", ОтражениеДокументовВМеждународномУчете);
		КонецЕсли;
		
	КонецЕсли;
	
	ДвиженияМеждународный = Движения.Международный;
	ДвиженияМеждународный.ДополнительныеСвойства.Вставить("НеВыполнятьДопОбработкуПроводок", Истина);
	
	ДвиженияОтражениеДокументовВМеждународномУчете = Движения.ОтражениеДокументовВМеждународномУчете;
	
	ТаблицаРегистрации = Новый ТаблицаЗначений;
	ТаблицаРегистрации.Колонки.Добавить("Период",        Новый ОписаниеТипов("Дата"));
	ТаблицаРегистрации.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРегистрации.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаРегистрации.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	
	ВыборочнаяРегистрация = Ложь;
	ТаблицаВыборочнойРегистрации = Новый ТаблицаЗначений;
	ТаблицаВыборочнойРегистрации.Колонки.Добавить("Организация",   Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаВыборочнойРегистрации.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	
	МеждународныйУчетПоДаннымОперативногоУчета.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации);
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации);
	МеждународныйУчетПоДаннымРеглУчета.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДополнительныеСвойства, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации, ВыборочнаяРегистрация, ТаблицаВыборочнойРегистрации);
	МеждународныйУчетПоДаннымДокументов.ДополнитьТаблицыРегистрацииКОтражению(
		Объект, ДвиженияОтражениеДокументовВМеждународномУчете.ДополнительныеСвойства, ТаблицаРегистрации);
	
	ТаблицаРегистрации.ЗаполнитьЗначения(Объект.Дата, "Период");
	ТаблицаРегистрации.Свернуть("Период, Организация, ДатаОтражения, ХозяйственнаяОперация");
	
	ДобавитьНастройкуФормированияПроводокИСтатус(ТаблицаРегистрации, Объект.Ссылка);
	
	Если НЕ ВыборочнаяРегистрация Тогда
		Если ТаблицаРегистрации.Количество() > 0 Тогда
			ТаблицаРегистрации.Сортировать("Период, ДатаОтражения");
			ДвиженияОтражениеДокументовВМеждународномУчете.Загрузить(ТаблицаРегистрации);
			ДвиженияОтражениеДокументовВМеждународномУчете.Записывать = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	#Область ТекстЗапросаНовыхСтатусовРегистрации
	ТекстЗапросаНовыхСтатусов =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДанных.Период          КАК Период,
	|	ТаблицаДанных.ПланСчетов      КАК ПланСчетов,
	|	ТаблицаДанных.Организация     КАК Организация,
	|	ТаблицаДанных.ДатаОтражения   КАК ДатаОтражения,
	|	ТаблицаДанных.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НоваяРегистрация
	|ИЗ
	|	&ТаблицаДанные КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыборочнойРегистрации.Организация   КАК Организация,
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ВыборочнаяРегистрация
	|ИЗ
	|	&ТаблицаВыборочнойРегистрации КАК ТаблицаВыборочнойРегистрации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Период          КАК Период,
	|	ОтражениеДокументов.ПланСчетов      КАК ПланСчетов,
	|	ОтражениеДокументов.Организация     КАК Организация,
	|	ВЫБОР КОГДА ОтражениеДокументов.ДатаОтражения = ДАТАВРЕМЯ(1,1,1)
	|		ТОГДА НАЧАЛОПЕРИОДА(ОтражениеДокументов.Период, ДЕНЬ)
	|		ИНАЧЕ ОтражениеДокументов.ДатаОтражения
	|	КОНЕЦ КАК ДатаОтражения,
	|	ОтражениеДокументов.Статус          КАК Статус,
	|	ОтражениеДокументов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОтражениеДокументов.Комментарий     КАК Комментарий
	|ПОМЕСТИТЬ ТекущаяРегистрация
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Регистратор = &Ссылка
	|	И ОтражениеДокументов.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НоваяРегистрация.Период КАК Период,
	|	НоваяРегистрация.ПланСчетов КАК ПланСчетов,
	|	НоваяРегистрация.Организация КАК Организация,
	|	НоваяРегистрация.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ВыборочнаяРегистрация.ДатаОтражения ЕСТЬ NULL И НЕ ТекущаяРегистрация.Статус ЕСТЬ NULL
	|			ТОГДА ТекущаяРегистрация.Статус
	|		КОГДА ЕСТЬNULL(ТекущаяРегистрация.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА &КОтражениюВУчетеВручную
	|		ИНАЧЕ
	|			&КОтражениюВУчете
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ВыборочнаяРегистрация.ДатаОтражения ЕСТЬ NULL
	|			ТОГДА ТекущаяРегистрация.Комментарий
	|		КОГДА ЕСТЬNULL(ТекущаяРегистрация.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА ТекущаяРегистрация.Комментарий
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий,
	|	НоваяРегистрация.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НовыеСтатусы
	|ИЗ
	|	НоваяРегистрация КАК НоваяРегистрация
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ТекущаяРегистрация КАК ТекущаяРегистрация
	|	ПО 
	|		НоваяРегистрация.ПланСчетов = ТекущаяРегистрация.ПланСчетов
	|		И НоваяРегистрация.Организация = ТекущаяРегистрация.Организация
	|		И НоваяРегистрация.ДатаОтражения = ТекущаяРегистрация.ДатаОтражения
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		ВыборочнаяРегистрация КАК ВыборочнаяРегистрация
	|	ПО 
	|		НоваяРегистрация.Организация = ВыборочнаяРегистрация.Организация	
	|		И НоваяРегистрация.ДатаОтражения = ВыборочнаяРегистрация.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.ПланСчетов КАК ПланСчетов,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ИзмененияСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения КАК ДатаОтражения,
	|		Таблица.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА 1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА 2
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		НовыеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)
	|		
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения,
	|		Таблица.Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА -1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА -2
	|		КОНЕЦ
	|	ИЗ
	|		ТекущаяРегистрация КАК Таблица
	|
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)) КАК Таблица
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.ПланСчетов,
	|	Таблица.ДатаОтражения,
	|	Таблица.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Статус) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеСтатусы.Период          КАК Период,
	|	НовыеСтатусы.ПланСчетов      КАК ПланСчетов,
	|	НовыеСтатусы.Организация     КАК Организация,
	|	НовыеСтатусы.ДатаОтражения   КАК ДатаОтражения,
	|	НовыеСтатусы.Статус          КАК Статус,
	|	НовыеСтатусы.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НовыеСтатусы.Комментарий     КАК Комментарий
	|ИЗ
	|	НовыеСтатусы КАК НовыеСтатусы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Международный.Период                                       КАК Период,
	|	Международный.ПланСчетов                                   КАК ПланСчетов,
	|	Международный.Организация                                  КАК Организация,
	|	
	|	Международный.ПодразделениеДт                              КАК ПодразделениеДт,
	|	Международный.СчетДт                                       КАК СчетДт,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт1, &ПустойВидСубконто) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(Международный.СубконтоДт1, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт2, &ПустойВидСубконто) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(Международный.СубконтоДт2, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт3, &ПустойВидСубконто) КАК ВидСубконтоДт3,
	|	ЕСТЬNULL(Международный.СубконтоДт3, НЕОПРЕДЕЛЕНО)          КАК СубконтоДт3,
	|	Международный.ВалютаДт                                     КАК ВалютаДт,
	|	Международный.ВалютнаяСуммаДт                              КАК ВалютнаяСуммаДт,
	|	Международный.КоличествоДт                                 КАК КоличествоДт,
	|	
	|	Международный.ПодразделениеКт                              КАК ПодразделениеКт,
	|	Международный.СчетКт                                       КАК СчетКт,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт1, &ПустойВидСубконто) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(Международный.СубконтоКт1, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт2, &ПустойВидСубконто) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(Международный.СубконтоКт2, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт3, &ПустойВидСубконто) КАК ВидСубконтоКт3,
	|	ЕСТЬNULL(Международный.СубконтоКт3, НЕОПРЕДЕЛЕНО)          КАК СубконтоКт3,
	|	Международный.ВалютаКт                                     КАК ВалютаКт,
	|	Международный.ВалютнаяСуммаКт                              КАК ВалютнаяСуммаКт,
	|	Международный.КоличествоКт                                 КАК КоличествоКт,
	|	
	|	Международный.Сумма                                        КАК Сумма,
	|	Международный.СуммаПредставления                           КАК СуммаПредставления,
	|	
	|	Международный.Содержание                                   КАК Содержание,
	|	Международный.ШаблонПроводки                               КАК ШаблонПроводки,
	|	Международный.ТипПроводки                                  КАК ТипПроводки
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(,,Регистратор = &Ссылка,,) КАК Международный
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ИзмененияСтатусов КАК ИзмененияСтатусов
	|	ПО
	|		Международный.ПланСчетов = ИзмененияСтатусов.ПланСчетов
	|		И Международный.Организация = ИзмененияСтатусов.Организация
	|		И НАЧАЛОПЕРИОДА(Международный.Период, ДЕНЬ) = ИзмененияСтатусов.ДатаОтражения
	|ГДЕ
	|	ИзмененияСтатусов.Организация ЕСТЬ NULL";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапросаНовыхСтатусов);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаДанные",     ТаблицаРегистрации);
	Запрос.УстановитьПараметр("Ссылка",            Объект.Ссылка);
	Запрос.УстановитьПараметр("ПустойВидСубконто", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("ОтраженоВУчете",      Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	Запрос.УстановитьПараметр("КОтражениюВУчете",    Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете);
	Запрос.УстановитьПараметр("ОтраженоВУчетеВручную",   Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную);
	Запрос.УстановитьПараметр("КОтражениюВУчетеВручную", Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
	
	Запрос.УстановитьПараметр("ТаблицаВыборочнойРегистрации", ТаблицаВыборочнойРегистрации);
	
	Результат = Запрос.ВыполнитьПакет();
	Количество = Результат.Количество();
	
	Международный = Результат[Количество - 1].Выгрузить();
	ДвиженияМеждународный.Загрузить(Международный);
	ДвиженияМеждународный.Записывать = Истина;
	
	ТаблицаРегистрация = Результат[Количество - 2].Выгрузить();
	ДвиженияОтражениеДокументовВМеждународномУчете.Загрузить(ТаблицаРегистрация);
	ДвиженияОтражениеДокументовВМеждународномУчете.Записывать = Истина;
	
	ОчиститьДвижения = ТаблицаРегистрация.Количество() = 0;// документ распровели
	Если ТипЗнч(Движения) = Тип("Структура") Тогда
		Если ДвиженияМеждународный.Количество() > 0 ИЛИ ОчиститьДвижения Тогда
			ДвиженияМеждународный.Записать();
		КонецЕсли;
		Если ДвиженияОтражениеДокументовВМеждународномУчете.Количество() > 0 ИЛИ ОчиститьДвижения Тогда
			ДвиженияОтражениеДокументовВМеждународномУчете.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Регистрирует документы расчетов с партнерами к отражению в международном учете.
//
// Параметры:
//	ТаблицаРасчетов - ТаблицаЗначений - Таблица изменений по расчетам с партнерами:
//	                      * Регистратор - ДокументСсылка - Документ-регистратор движений
//	                      * Период - Дата - Период движений
//	                      * АналитикаУчетаПоПартнерам - СправочникСсылка.КлючиАналитикиУчетаПоПартнерам - Аналитика учета.
//
Процедура ЗарегистрироватьДокументыРасчетовСПартнерамиКОтражениюВМеждународномУчете(ТаблицаРасчетов) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос;
	МассивТекстовЗапроса = Новый Массив;
	Если ТипЗнч(ТаблицаРасчетов) = Тип("ТаблицаЗначений") Тогда
		Если ТаблицаРасчетов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.Регистратор КАК Регистратор,
		|	ДокументыКОтражению.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
		|	ДокументыКОтражению.Период КАК Период
		|ПОМЕСТИТЬ РасчетыКОтражениюВУчете
		|ИЗ
		|	&ДокументыКОтражению КАК ДокументыКОтражению
		|ГДЕ
		|	ДокументыКОтражению.Регистратор <> НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	АналитикаУчетаПоПартнерам";
		Запрос.УстановитьПараметр("ДокументыКОтражению", ТаблицаРасчетов);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	Иначе
		Запрос.МенеджерВременныхТаблиц = ТаблицаРасчетов;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДокументов.Регистратор КАК Документ,
	|	ТаблицаДокументов.Организация КАК Организация
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаДокументов.Период КАК Период,
	|		ТаблицаДокументов.Период КАК ДатаОтражения,
	|		ТаблицаДокументов.Регистратор КАК Регистратор,
	|		Аналитика.Организация КАК Организация
	|	ИЗ
	|		РасчетыКОтражениюВУчете КАК ТаблицаДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ТаблицаДокументов.Регистратор) <> ТИП(Документ.РегистраторРасчетов)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		РегистраторРасчетов.Дата КАК Период,
	|		ТаблицаДокументов.Период КАК ДатаОтражения,
	|		ТаблицаДокументов.Регистратор КАК Регистратор,
	|		Аналитика.Организация КАК Организация
	|	ИЗ
	|		РасчетыКОтражениюВУчете КАК ТаблицаДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РегистраторРасчетов КАК РегистраторРасчетов
	|			ПО ТаблицаДокументов.Регистратор = РегистраторРасчетов.Ссылка
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаДокументов.Период,
	|		ТаблицаДокументов.Период,
	|		ТаблицаДокументов.Регистратор,
	|		Аналитика.Контрагент
	|	ИЗ
	|		РасчетыКОтражениюВУчете КАК ТаблицаДокументов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|			ПО ТаблицаДокументов.АналитикаУчетаПоПартнерам = Аналитика.КлючАналитики
	|	ГДЕ
	|		Аналитика.Партнер = ЗНАЧЕНИЕ(Справочник.Партнеры.НашеПредприятие)
	|		И ТИПЗНАЧЕНИЯ(ТаблицаДокументов.Регистратор) В (
	|			ТИП(Документ.ВозвратТоваровМеждуОрганизациями),
	|			ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациями),
	|			ТИП(Документ.ОтчетПоКомиссииМеждуОрганизациямиОСписании),
	|			ТИП(Документ.ПередачаТоваровМеждуОрганизациями))
	|
	|	) КАК ТаблицаДокументов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Период,
	|	ТаблицаДокументов.ДатаОтражения,
	|	ТаблицаДокументов.Регистратор,
	|	ТаблицаДокументов.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Документ,
	|	Организация,
	|	ДатаОтражения";
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос.ВыполнитьПакет();
	
	ВернутьДокументыКОтражению(Запрос.МенеджерВременныхТаблиц);
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, "ДокументыКОтражению");
	
КонецПроцедуры

// Записывает движения по регистру ОтражениеДокументаВМеждународномУчете, выполняет очистку неактуальных записей в Международный.
// Вызывается из оффлайновых общих модулей НДС.
//
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц, имеющий таблицы
// 		ТаблицаТекущейРегистрации и ТаблицаВыборочнойРегистрации.
// 		Таблицы должны иметь колонки Документ, Организация, ДатаОтражения.
// 	КоличествоОбработанных - Число - Параметр, в котором необходимо вернуть количество возвращенных к отражению документов.
//
Процедура ВернутьДокументыКОтражениюВыборочноПакетно(МенеджерВременныхТаблиц, КоличествоОбработанных = Неопределено) Экспорт

	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
	 	Возврат;
	КонецЕсли;

	ПолучитьНастройкуФормированияПроводокИСтатус(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	#Область ТекстЗапроса
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТекущейРегистрации.Документ КАК Документ
	|ПОМЕСТИТЬ ТолькоДокументыКОтражению
	|ИЗ
	|	ТаблицаТекущейРегистрации КАК ТаблицаТекущейРегистрации
	|;
	| 
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаТекущейРегистрации.Период КАК Период,
	|	ТаблицаТекущейРегистрации.Документ КАК Документ,
	|	ТаблицаТекущейРегистрации.ПланСчетов КАК ПланСчетов,
	|	ТаблицаТекущейРегистрации.Организация КАК Организация,
	|	ТаблицаТекущейРегистрации.ДатаОтражения КАК ДатаОтражения,
	|	ДопСвойства.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДопСвойства.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаТекущейРегистрацииСвернуто
	|ИЗ
	|	ТаблицаТекущейРегистрации КАК ТаблицаТекущейРегистрации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаФормированияПроводокИСтатус КАК ДопСвойства
	|	ПО 
	|		ТаблицаТекущейРегистрации.ПланСчетов = ДопСвойства.ПланСчетов
	|		И ТаблицаТекущейРегистрации.Организация = ДопСвойства.Организация
	|		И ТаблицаТекущейРегистрации.ДатаОтражения = ДопСвойства.ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВыборочнойРегистрации.Документ КАК Документ,
	|	ТаблицаВыборочнойРегистрации.Организация КАК Организация,
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения КАК ДатаОтражения,
	|	ДопСвойства.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДопСвойства.Статус КАК Статус
	|ПОМЕСТИТЬ ТаблицаВыборочнойРегистрацииСвернуто
	|ИЗ
	|	ТаблицаВыборочнойРегистрации КАК ТаблицаВыборочнойРегистрации
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкаФормированияПроводокИСтатус КАК ДопСвойства
	|	ПО ТаблицаВыборочнойРегистрации.Организация = ДопСвойства.Организация
	|		И ТаблицаВыборочнойРегистрации.ДатаОтражения = ДопСвойства.ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументов.Период КАК Период,
	|	ОтражениеДокументов.Регистратор КАК Документ,
	|	ОтражениеДокументов.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументов.Организация КАК Организация,
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Статус КАК Статус,
	|	ОтражениеДокументов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОтражениеДокументов.Комментарий КАК Комментарий
	|ПОМЕСТИТЬ ТекущиеСтатусы
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТолькоДокументыКОтражению КАК ТолькоДокументыКОтражению
	|		ПО ОтражениеДокументов.Регистратор = ТолькоДокументыКОтражению.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВыборочнойРегистрации.Документ КАК Документ,
	|	МИНИМУМ(ТаблицаВыборочнойРегистрации.ДатаОтражения) КАК ДатаОтражения
	|ПОМЕСТИТЬ НачалоИзмененийВыборочнойРегистрации
	|ИЗ
	|	ТаблицаВыборочнойРегистрацииСвернуто КАК ТаблицаВыборочнойРегистрации
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВыборочнойРегистрации.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТекущиеСтатусы.Период, ТаблицаТекущейРегистрации.Период) КАК Период,
	|	ТаблицаТекущейРегистрации.Документ КАК Документ,
	|	ТаблицаТекущейРегистрации.ПланСчетов КАК ПланСчетов,
	|	ТаблицаТекущейРегистрации.Организация КАК Организация,
	|	ТаблицаТекущейРегистрации.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ТаблицаВыборочнойРегистрации.ДатаОтражения ЕСТЬ NULL
	|				И НЕ ТекущиеСтатусы.Статус ЕСТЬ NULL
	|			ТОГДА ТекущиеСтатусы.Статус
	|		КОГДА ЕСТЬNULL(ТекущиеСтатусы.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА &КОтражениюВУчетеВручную
	|		ИНАЧЕ &КОтражениюВУчете
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаВыборочнойРегистрации.ДатаОтражения ЕСТЬ NULL
	|			ТОГДА ТекущиеСтатусы.Комментарий
	|		КОГДА ЕСТЬNULL(ТекущиеСтатусы.Статус, НЕОПРЕДЕЛЕНО) В (&ОтраженоВУчетеВручную, &КОтражениюВУчетеВручную)
	|			ТОГДА ТекущиеСтатусы.Комментарий
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Комментарий,
	|	ТаблицаТекущейРегистрации.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НовыеСтатусы
	|ИЗ
	|	ТаблицаТекущейРегистрацииСвернуто КАК ТаблицаТекущейРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеСтатусы КАК ТекущиеСтатусы
	|		ПО ТаблицаТекущейРегистрации.Документ = ТекущиеСтатусы.Документ
	|			И ТаблицаТекущейРегистрации.ПланСчетов = ТекущиеСтатусы.ПланСчетов
	|			И ТаблицаТекущейРегистрации.Организация = ТекущиеСтатусы.Организация
	|			И ТаблицаТекущейРегистрации.ДатаОтражения = ТекущиеСтатусы.ДатаОтражения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаВыборочнойРегистрацииСвернуто КАК ТаблицаВыборочнойРегистрации
	|		ПО ТаблицаТекущейРегистрации.Документ = ТаблицаВыборочнойРегистрации.Документ
	|			И ТаблицаТекущейРегистрации.Организация = ТаблицаВыборочнойРегистрации.Организация
	|			И ТаблицаТекущейРегистрации.ДатаОтражения = ТаблицаВыборочнойРегистрации.ДатаОтражения
	|ГДЕ
	|	ТаблицаВыборочнойРегистрации.ДатаОтражения ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.Документ КАК Документ,
	|	Таблица.ПланСчетов КАК ПланСчетов,
	|	Таблица.Организация КАК Организация,
	|	Таблица.ДатаОтражения КАК ДатаОтражения
	|ПОМЕСТИТЬ ИзмененияСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Таблица.Документ КАК Документ,
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения КАК ДатаОтражения,
	|		Таблица.Организация КАК Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА 1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА 2
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		НовыеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Таблица.Документ,
	|		Таблица.ПланСчетов КАК ПланСчетов,
	|		Таблица.ДатаОтражения,
	|		Таблица.Организация,
	|		ВЫБОР
	|			КОГДА Таблица.Статус = &КОтражениюВУчете
	|				ТОГДА -1
	|			КОГДА Таблица.Статус = &ОтраженоВУчете
	|				ТОГДА -2
	|		КОНЕЦ
	|	ИЗ
	|		ТекущиеСтатусы КАК Таблица
	|	ГДЕ
	|		Таблица.Статус В (&КОтражениюВУчете, &ОтраженоВУчете)) КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачалоИзмененийВыборочнойРегистрации КАК НачалоИзменений
	|		ПО Таблица.Документ = НачалоИзменений.Документ
	|ГДЕ
	|	Таблица.ДатаОтражения >= ЕСТЬNULL(НАЧАЛОПЕРИОДА(НачалоИзменений.ДатаОтражения, МЕСЯЦ), ДАТАВРЕМЯ(1, 1, 1))
	|
	|СГРУППИРОВАТЬ ПО
	|	Таблица.Документ,
	|	Таблица.ПланСчетов,
	|	Таблица.ДатаОтражения,
	|	Таблица.Организация
	|
	|ИМЕЮЩИЕ
	|	СУММА(Таблица.Статус) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Таблица.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеСтатусы.Период КАК Период,
	|	НовыеСтатусы.Документ КАК Документ,
	|	НовыеСтатусы.ПланСчетов КАК ПланСчетов,
	|	НовыеСтатусы.Организация КАК Организация,
	|	НовыеСтатусы.ДатаОтражения КАК ДатаОтражения,
	|	НовыеСтатусы.Статус КАК Статус,
	|	НовыеСтатусы.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	НовыеСтатусы.Комментарий КАК Комментарий
	|ИЗ
	|	НовыеСтатусы КАК НовыеСтатусы
    |
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Документ,
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|
	|ИТОГИ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Международный.Период КАК Период,
	|	Международный.Регистратор КАК Регистратор,
	|	Международный.ПланСчетов КАК ПланСчетов,
	|	Международный.Организация КАК Организация,
	|	Международный.ПодразделениеДт КАК ПодразделениеДт,
	|	Международный.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	Международный.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт1, &ПустойВидСубконто) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(Международный.СубконтоДт1, НЕОПРЕДЕЛЕНО) КАК СубконтоДт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт2, &ПустойВидСубконто) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(Международный.СубконтоДт2, НЕОПРЕДЕЛЕНО) КАК СубконтоДт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт3, &ПустойВидСубконто) КАК ВидСубконтоДт3,
	|	ЕСТЬNULL(Международный.СубконтоДт3, НЕОПРЕДЕЛЕНО) КАК СубконтоДт3,
	|	Международный.ВалютаДт КАК ВалютаДт,
	|	Международный.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Международный.ПодразделениеКт КАК ПодразделениеКт,
	|	Международный.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	Международный.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт1, &ПустойВидСубконто) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(Международный.СубконтоКт1, НЕОПРЕДЕЛЕНО) КАК СубконтоКт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт2, &ПустойВидСубконто) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(Международный.СубконтоКт2, НЕОПРЕДЕЛЕНО) КАК СубконтоКт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт3, &ПустойВидСубконто) КАК ВидСубконтоКт3,
	|	ЕСТЬNULL(Международный.СубконтоКт3, НЕОПРЕДЕЛЕНО) КАК СубконтоКт3,
	|	Международный.ВалютаКт КАК ВалютаКт,
	|	Международный.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	Международный.Сумма КАК Сумма,
	|	Международный.СуммаПредставления КАК СуммаПредставления,
	|	Международный.Содержание КАК Содержание
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор В (ВЫБРАТЬ Т.Документ ИЗ ТолькоДокументыКОтражению КАК Т),
	|			,
	|		) КАК Международный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ИзмененияСтатусов КАК ИзмененияСтатусов
	|		ПО Международный.Регистратор = ИзмененияСтатусов.Документ
	|			И Международный.ПланСчетов = ИзмененияСтатусов.ПланСчетов
	|			И Международный.Организация = ИзмененияСтатусов.Организация
	|			И (НАЧАЛОПЕРИОДА(Международный.Период, ДЕНЬ) = ИзмененияСтатусов.ДатаОтражения)
	|ГДЕ
	|	ИзмененияСтатусов.Организация ЕСТЬ NULL";
	#КонецОбласти

	Запрос.УстановитьПараметр("ПустойВидСубконто",  ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка());

	Запрос.УстановитьПараметр("ОтраженоВУчете",      Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	Запрос.УстановитьПараметр("КОтражениюВУчете",    Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете);
	Запрос.УстановитьПараметр("ОтраженоВУчетеВручную",   Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную);
	Запрос.УстановитьПараметр("КОтражениюВУчетеВручную", Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);

	Результат = Запрос.ВыполнитьПакет();
	Количество = Результат.Количество();

	ИзмененияСтатусов = Запрос.МенеджерВременныхТаблиц.Таблицы.Получить("ИзмененияСтатусов").ПолучитьДанные().Выгрузить();
	
	РезультатМеждународный = Результат[Количество - 1]; // РезультатЗапроса - 
	Международный = РезультатМеждународный.Выгрузить();
	Международный.Индексы.Добавить("Регистратор");
	
	РезультатПоДокументам = Результат[Количество - 2]; // РезультатЗапроса -
	ВыборкаПоДокументам = РезультатПоДокументам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТипыДокументовКОтражению = Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СтандартныеРеквизиты.Регистратор.Тип;
	Пока ВыборкаПоДокументам.Следующий() Цикл
		ДвиженияМеждународный = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
		ДвиженияМеждународный.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Документ);
		ДвиженияМеждународный.Записывать = Истина;

		МеждународныйПоДокументу = Международный.СкопироватьКолонки();
		НайденныеСтроки = Международный.НайтиСтроки(Новый Структура("Регистратор", ВыборкаПоДокументам.Документ));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НоваяСтрока = МеждународныйПоДокументу.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденнаяСтрока);
		КонецЦикла;

		ДвиженияМеждународный.Загрузить(МеждународныйПоДокументу);
		ДвиженияМеждународный.Записать();

		ЕстьИзменения = Не ИзмененияСтатусов.Найти(ВыборкаПоДокументам.Документ, "Документ") = Неопределено;
		Если ТипыДокументовКОтражению.СодержитТип(ТипЗнч(ВыборкаПоДокументам.Документ)) И ЕстьИзменения Тогда
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверкаДатыЗапретаИзменения", Ложь);
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Документ);

			Выборка = ВыборкаПоДокументам.Выбрать();
			Пока Выборка.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Выборка);
			КонецЦикла;

			НаборЗаписей.Записать();
			Если ТипЗнч(КоличествоОбработанных) = Тип("Число") Тогда
				КоличествоОбработанных = КоличествоОбработанных + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	СписокТаблицДляУничтожения = 
		"ТаблицаТекущейРегистрацииСвернуто,
		|ТаблицаВыборочнойРегистрацииСвернуто,
		|ТолькоДокументыКОтражению,
		|НачалоИзмененийВыборочнойРегистрации,
		|НастройкаФормированияПроводокИСтатус,
		|ТекущиеСтатусы,
		|НовыеСтатусы,
		|ИзмененияСтатусов";
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(Запрос.МенеджерВременныхТаблиц, СписокТаблицДляУничтожения);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ОтражениеДокументовВМеждународномУчете

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ОтражениеДокументовВМеждународномУчете(ТаблицаЭтапов,ТекущийРодитель) Экспорт

	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ОтражениеДокументовВМеждународномУчете,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Отразить';
										|en = 'Record'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетПроведениеСервер.Использование_ОтражениеДокументовВМеждународномУчете");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетПроведениеСервер.Выполнить_ОтражениеДокументовВМеждународномУчете");
	НоваяСтрока.ДействиеПодробнее  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете.Формы.Форма.ПолноеИмя());
	
КонецПроцедуры

Процедура Использование_ОтражениеДокументовВМеждународномУчете(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ПроводкиМеждународногоУчетаПоДаннымОперативного")
	 И НЕ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного") Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Формирование проводок по данным оперативного и регламентированного учета не используется.';
				|en = 'Posting generation for real-time and local accounting data is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(
	|			&КонецПериода,
	|			Организация В (&МассивОрганизаций)) КАК ПланыСчетовМеждународногоУчетаОрганизаций";
	
	Запрос.Выполнить();
	
	Если ЗакрытиеМесяцаСервер.РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций с необходимостью отражения международного учета.';
				|en = 'There are no companies that require recording in financial accounting.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументов.Регистратор КАК Регистратор,
	|	ОтражениеДокументов.Статус КАК Статус
	|ПОМЕСТИТЬ ОтражениеДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОрганизации КАК Организации
	|		ПО ОтражениеДокументов.Организация = Организации.Ссылка
	|ГДЕ
	|	ОтражениеДокументов.ДатаОтражения <= &КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВРучную))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ОтражениеДокументов.ДатаОтражения) КАК ДатаНачала,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ОтражениеДокументов.Регистратор) КАК Количество
	|ИЗ
	|	ОтражениеДокументов КАК ОтражениеДокументов
	|ГДЕ
	|	ОтражениеДокументов.Статус В
	|		(ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете),
	|		 ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров))
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтражениеДокументов.Регистратор) > 0";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ЕстьОжидающиеОтражения = НЕ МассивРезультатов[1].Пустой();
	ЕстьНеОтраженныеВУчете = НЕ МассивРезультатов[2].Пустой();
	
	Если ЕстьОжидающиеОтражения Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ожидает отражения в учете документов: %1';
					|en = 'Documents awaiting posting in accounting: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
				СокрЛП(МассивРезультатов[1].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
	Если ЕстьНеОтраженныеВУчете Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеВыполненСОшибками(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				?(ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета"),
					НСтр("ru = 'Не отражено в учете документов: %1';
						|en = 'Not recorded in document accounting: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
					НСтр("ru = 'Не отражено в учете документов из-за отсутствия правил отражения: %1';
						|en = 'Not recorded in document accounting since there are no recording rules: %1'", ОбщегоНазначения.КодОсновногоЯзыка())),
				СокрЛП(МассивРезультатов[2].Выгрузить()[0].Количество)));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ОтражениеДокументовВМеждународномУчете(ПараметрыОбработчика) Экспорт
	
	ПараметрыОтражения = ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.МассивОрганизаций = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;
	ПараметрыОтражения.ДатаОкончания = КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	
	ОтразитьВМеждународномУчете(ПараметрыОтражения);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазницВФункциональнойВалюте

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
//
Процедура ДобавитьЭтап_РасчетКурсовыхРазницВФункциональнойВалюте(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВФункциональнойВалюте,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетПроведениеСервер.Использование_РасчетКурсовыхРазницВФункциональнойВалюте");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетПроведениеСервер.Выполнить_РасчетКурсовыхРазницВФункциональнойВалюте");
	НоваяСтрока.ДействиеПодробнее = МеждународныйУчетПроведениеСервер.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницФункциональнаяВалюта);
КонецПроцедуры

Процедура Использование_РасчетКурсовыхРазницВФункциональнойВалюте(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации";
	ВыборкаПоПланамСчетов = Запрос.Выполнить().Выбрать();
	
	ВсегоНеЗакрыто = 0;
	Пока ВыборкаПоПланамСчетов.Следующий() Цикл
		НеЗакрытоПоПлануСчетов = Документы.РегламентнаяОперацияМеждународныйУчет.НезакрытыеКурсовыеРазницы(
			ВыборкаПоПланамСчетов.ПланСчетов,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
			Истина);
		
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, НеЗакрытоПоПлануСчетов);
		ВсегоНеЗакрыто = ВсегоНеЗакрыто + НеЗакрытоПоПлануСчетов;
	КонецЦикла;
	
	Если ВсегоНеЗакрыто <> 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые курсовые разницы для расчета.';
				|en = 'There are unclosed exchange differences for calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетКурсовыхРазницВФункциональнойВалюте(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ЗакрытиеСчетовУчетаДоходовИРасходовМУ

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ЗакрытиеСчетовУчетаДоходовИРасходовМУ,
		Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Выполнить';
										|en = 'Execute'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетПроведениеСервер.Использование_ЗакрытиеСчетовУчетаДоходовИРасходовМУ");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетПроведениеСервер.Выполнить_ЗакрытиеСчетовУчетаДоходовИРасходовМУ");
	НоваяСтрока.ДействиеПодробнее = МеждународныйУчетПроведениеСервер.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.ЗакрытиеСчетовДоходовРасходов);
КонецПроцедуры

Процедура Использование_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации";
	ВыборкаПоПланамСчетов = Запрос.Выполнить().Выбрать();
	
	ВсегоНеЗакрыто = 0;
	Пока ВыборкаПоПланамСчетов.Следующий() Цикл
		НеЗакрытоПоПлануСчетов = Документы.РегламентнаяОперацияМеждународныйУчет.ЕстьНезакрытыеСчетаУчетаДоходовРасходов(
			ВыборкаПоПланамСчетов.ПланСчетов,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации));
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, НеЗакрытоПоПлануСчетов);
		ВсегоНеЗакрыто = ВсегоНеЗакрыто + НеЗакрытоПоПлануСчетов;
	КонецЦикла;
	
	Если ВсегоНеЗакрыто <> 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые счета учета.';
				|en = 'There are unclosed ledger accounts.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика,,, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_ЗакрытиеСчетовУчетаДоходовИРасходовМУ(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетКурсовыхРазницВВалютеПредставления

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РасчетКурсовыхРазницВВалютеПредставления(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетКурсовыхРазницВВалютеПредставления,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетПроведениеСервер.Использование_РасчетКурсовыхРазницВВалютеПредставления");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"МеждународныйУчетПроведениеСервер.Выполнить_РасчетКурсовыхРазницВВалютеПредставления");
	НоваяСтрока.ДействиеПодробнее = МеждународныйУчетПроведениеСервер.ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ();
	НоваяСтрока.ТипыРегламентныхОпераций.Добавить(Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления);
КонецПроцедуры

Процедура Использование_РасчетКурсовыхРазницВВалютеПредставления(ПараметрыОбработчика) Экспорт
	
	Если Не ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации
	|ГДЕ
	|	ВТОрганизации.ВалютаФункциональная <> ВТОрганизации.ПланСчетов.ВалютаПредставления
	|;
	|
	|////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТОрганизации.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	ВТОрганизации КАК ВТОрганизации
	|";
	РезультатыЗапроса = Запрос.ВыполнитьПакет();

	Если РезультатыЗапроса[0].Пустой() Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Функциональная валюта совпадает с валютой представления.';
				|en = 'Functional currency matches the reporting currency.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ВыборкаПоПланамСчетов = РезультатыЗапроса[1].Выбрать();
	
	ВсегоНеПересчитано = 0;
	Пока ВыборкаПоПланамСчетов.Следующий() Цикл
		
		НеПересчитаноПоПлануСчетов = Документы.РегламентнаяОперацияМеждународныйУчет.НеПересчитаноВВалютуПредставления(
			ВыборкаПоПланамСчетов.ПланСчетов,
			ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
			КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
			Истина);
		
		ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, ВсегоНеПересчитано);
		ВсегоНеПересчитано = ВсегоНеПересчитано + НеПересчитаноПоПлануСчетов;
	КонецЦикла;
	
	Если ВсегоНеПересчитано <> 0 Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			НСтр("ru = 'Есть незакрытые курсовые разницы для расчета.';
				|en = 'There are unclosed exchange differences for calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	Иначе
		ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика);
	КонецЕсли;
	
КонецПроцедуры

Процедура Выполнить_РасчетКурсовыхРазницВВалютеПредставления(ПараметрыОбработчика) Экспорт
	
	СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаДатыЗапретаФормированияПроводокМУ

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
//
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьТаблицуОписанияЭтапов
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_УстановкаДатыЗапретаФормированияПроводокМУ(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.УстановкаДатыЗапретаФормированияПроводокМУ,
		Ложь, Ложь, Истина);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Установить';
										|en = 'Set'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетПроведениеСервер.Использование_УстановкаДатыЗапретаФормированияПроводокМУ");
	НоваяСтрока.ДействиеОформление = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"МеждународныйУчетПроведениеСервер.Оформление_УстановкаДатыЗапретаФормированияПроводокМУ");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.РегистрыСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет.Формы.ДатыЗапретаФормирования.ПолноеИмя());
КонецПроцедуры

Процедура Использование_УстановкаДатыЗапретаФормированияПроводокМУ(ПараметрыОбработчика) Экспорт
	
	ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Параметры:
// 	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа
//
Процедура Оформление_УстановкаДатыЗапретаФормированияПроводокМУ(ПараметрыОбработчика) Экспорт
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок(ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ПараметрыОбработчика.ДанныеЭтапа.Наименование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Дата запрета формирования проводок %1';
			|en = 'Posting generation closing date %1'"),
		Формат(ДатаЗапрета, "ДЛФ=DD"));
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Описание действия "Открыть форму списка документов ""Регламентная операция (международный учет)""".
// Отбор по типам операций берется из свойства ТипыРегламентныхОпераций описания этапа закрытия месяца.
//
// Возвращаемое значение:
//	Структура - см. СтруктураОписанияДействия().
//
Функция ОписаниеДействия_ОткрытьСписокДокументовРегламентнаяОперацияМУ() Экспорт
	
	Описание = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.РегламентнаяОперацияМеждународныйУчет.Формы.ФормаСписка.ПолноеИмя(),
		Истина);
	
	Возврат Описание;
	
КонецФункции

#КонецОбласти

#КонецОбласти

// Обработчик вызываемый регламентным заданием ОтражениеДокументовВМеждународномУчете.
//
Процедура ОтразитьВМеждународномУчетеРегламентнымЗаданием() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтражениеДокументовВМеждународномУчете);
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтражения = ПараметрыОтраженияВМеждународномУчете();
	ОтразитьВМеждународномУчете(ПараметрыОтражения);

КонецПроцедуры

// Возвращает параметры отражения в международном учете
// 
// Возвращаемое значение:
// 	Структура - Параметры отражения:
// 		* МассивОрганизаций - СправочникСсылка.Организации, Массив Из СправочникСсылка.Организации - Отбор по организациям. Если Неопределено, то все.
// 		* ДатаОкончания - Дата - Отбор документов к отражению по дате. Если Неопределено, то все.
// 		* Документы - ДокументСсылка, Массив Из ДокументСсылка - Отбор по конкретным документам, Если Неопределено, то все.
// 		* АвтоматическоеОтражение - Булево - Записывать проводки, получившиеся в результате отражения.
// 		* ВыполнитьПересчеты - Булево - Выполнять офлайновые операции перед формированием проводок.
Функция ПараметрыОтраженияВМеждународномУчете() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("МассивОрганизаций", Неопределено);
	Параметры.Вставить("ДатаОкончания", Неопределено);
	Параметры.Вставить("Документы", Неопределено);
	Параметры.Вставить("АвтоматическоеОтражение", Истина);
	Параметры.Вставить("ВыполнитьПересчеты", Истина);
	
	Возврат Параметры;
	
КонецФункции

// Выполняет отражение документов в международном учете.
//
// Параметры:
//	ПараметрыОтраженияВМеждународномУчете - См. ПараметрыОтраженияВМеждународномУчете
//
// Возвращаемое значение:
//	ТаблицаЗначений - Таблица сформированных проводок, соответствует структуре регистра бухгалтерии Международный.
//
Функция ОтразитьВМеждународномУчете(ПараметрыОтраженияВМеждународномУчете) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыОтраженияВМеждународномУчете.ВыполнитьПересчеты Тогда
		ВыполнитьОффлайновыеРасчеты(
			ПараметрыОтраженияВМеждународномУчете.МассивОрганизаций,
			ПараметрыОтраженияВМеждународномУчете.ДатаОкончания,
			ПараметрыОтраженияВМеждународномУчете.Документы);
	КонецЕсли;
	
	ОписаниеЗамераОтражениеВМеждународномУчете = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("МеждународныйУчет.ОтражениеВМеждународномУчете");
	
	ПараметрыФормированияПроводок = ПараметрыФормированияПроводок(ПараметрыОтраженияВМеждународномУчете);
	
	ТаблицаПроводок = ТаблицаПроводок();
	
	КоличествоДокументов = 0;
	МоментВремени = Новый МоментВремени('00010101');
	Пока МоментВремени <> Неопределено Цикл
		
		ДокументыКОтражениюВУчете = 
			ДокументыКОтражениюВУчете(
				ПараметрыФормированияПроводок.МенеджерВременныхТаблиц,
				ПараметрыОтраженияВМеждународномУчете, 
				МоментВремени);
			
		Если МоментВремени = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		КоличествоДокументов = КоличествоДокументов + ДокументыКОтражениюВУчете.Количество();
		
		НачатьТранзакцию();
		Попытка
		
			БлокировкаДанных = Новый БлокировкаДанных;
			ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ОтражениеДокументовВМеждународномУчете.НаборЗаписей");
			УстановитьДанныеБлокировки(ЭлементБлокировки, ПараметрыФормированияПроводок.МенеджерВременныхТаблиц);
			БлокировкаДанных.Заблокировать();
			
			МеждународныйУчетПоДаннымОперативногоУчета.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
			МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
			МеждународныйУчетПоДаннымРеглУчета.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
			МеждународныйУчетПоДаннымДокументов.Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок);
			
			ПересчитатьТаблицуПроводокПоКурсу(ПараметрыФормированияПроводок, ТаблицаПроводок);
			СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаПроводок);
			
			УдалитьПроводкиБезСуммИКоличеств(ТаблицаПроводок);
			
			УдалитьНезначащиеПроводки(ПараметрыФормированияПроводок, ТаблицаПроводок);
			
			ДобавитьПроводкиСторно(ПараметрыФормированияПроводок, ТаблицаПроводок);
			ДобавитьПроводкиПоДругимОрагнизациямПериодам(ПараметрыФормированияПроводок, ТаблицаПроводок);
			
			Если ПараметрыОтраженияВМеждународномУчете.АвтоматическоеОтражение Тогда
				ЗаписатьПроводки(ТаблицаПроводок, ДокументыКОтражениюВУчете);
				ВерунтьКОтражениюДокументыСторно(ПараметрыФормированияПроводок);
				ТаблицаПроводок.Очистить();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось сформировать проводки международного учета по причине';
									|en = 'Cannot generate financial accounting entries. Reason:'") + ":"
							+ Символы.ПС + Символы.Таб + "%Причина%";
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка, , ТекстСообщения);
			ВызватьИсключение ТекстСообщения;
		КонецПопытки;
		
		УничтожитьВременныеТаблицы(ПараметрыФормированияПроводок.МенеджерВременныхТаблиц);
		
	КонецЦикла;
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамераОтражениеВМеждународномУчете, КоличествоДокументов);
	
	Возврат ТаблицаПроводок;
	
КонецФункции

// По передаваемой в качестве параметра таблице проводок, возвращает таблицу проводок, удовлетворяющих условиям записи.
//
// Параметры:
//	ПроводкиДокумента - ТаблицаЗначений - таблица проводок.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица записываемых проводок.
//
Функция ЗаписываемыеПроводки(ПроводкиДокумента) Экспорт

	ЗаписываемыеПроводки = ПроводкиДокумента.Скопировать();
	
	ИсключаемыеПроводки = Новый Массив;
	Для каждого Проводка Из ЗаписываемыеПроводки Цикл

		Если Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
			И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную
			И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
			ИсключаемыеПроводки.Добавить(Проводка);
		ИначеЕсли Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
			И Не ЗначениеЗаполнено(Проводка.СчетДт) 
			И Не ЗначениеЗаполнено(Проводка.СчетКт) Тогда
			// Запись добавлена для отметки отработки документа, если по документу не было данных к отражению.
			ИсключаемыеПроводки.Добавить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Проводка Из ИсключаемыеПроводки Цикл
		ЗаписываемыеПроводки.Удалить(Проводка);
	КонецЦикла;
	
	Возврат ЗаписываемыеПроводки;

КонецФункции

// Обновляет статус отражения документа в международном учете на основе статусов сформированных проводок.
//
// Параметры:
//	Документ - ДокументСсылка - ссылка на документ.
//	Измерения - ТаблицаЗначений - Таблица измерений, по которым нужно обновить статус отражения. Колонки таблицы:
//			* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов для обновления статуса
//			* Организация - СправочникСсылка.Организации - Организация для обновления статуса
//			* ДатаОтражения - Дата - Дата отражения, накоторую нужно обновить статус
//	ПроводкиДокумента - ТаблицаЗначений - Таблица проводок документа, на основании которой обновляется статус. Колонки таблицы:
//			* Период - Дата - Период проводки
//			* ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов для отметки статуса
//			* Организация - СправочникСсылка.Организации - Организация для отметки статуса
//			* Статус - ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете - Статус отражения
//			* Комментарий - Строка - Комментарий к статусу отражения
//	ВозвращатьКОтражениюДокументСторно - Булево - Возвращать к отражению сторнирующий документ.
//
Процедура ОбновитьСтатусОтраженияДокумента(Документ, Измерения, ПроводкиДокумента, ВозвращатьКОтражениюДокументСторно = Истина) Экспорт

	ЗаписиОтраженияДокумента = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
	ЗаписиОтраженияДокумента.Отбор.Регистратор.Установить(Документ);
	ЗаписиОтраженияДокумента.Прочитать();
	ПроводкиДокумента.Колонки.Добавить("Отмечено", Новый ОписаниеТипов("Булево"));
	
	Для каждого Запись Из ЗаписиОтраженияДокумента Цикл
		
		Отбор = Новый Структура("ПланСчетов, Организация, ДатаОтражения", Запись.ПланСчетов, Запись.Организация, Запись.ДатаОтражения);
		РезультатПоиска = Измерения.НайтиСтроки(Отбор);
		Если РезультатПоиска.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ПланСчетов, Организация", Запись.ПланСчетов, Запись.Организация);
		ПроводкиОрганизации = ПроводкиДокумента.НайтиСтроки(Отбор);
		Если ПроводкиДокумента.Количество() > 0 Тогда
			Статус = Неопределено;
			Комментарий = "";
			УникальныеЗначения = Новый Соответствие;
			Для Каждого Проводка Из ПроводкиОрганизации Цикл
				Если НЕ ЗначениеЗаполнено(Проводка.Период) ИЛИ НачалоДня(Проводка.Период) = Запись.ДатаОтражения Тогда
					Статус = МеждународныйУчетСерверПовтИсп.ОпределитьСтатус(Статус, Проводка.Статус);
					ЗаполнитьКомментарий(Комментарий, Проводка, УникальныеЗначения);
					Проводка.Отмечено  = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Статус) Тогда
				Запись.Статус = Статус;
				Запись.Комментарий = Комментарий;
			Иначе
				Запись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
				Запись.Комментарий = "";
			КонецЕсли;
		Иначе
			Запись.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
			Запись.Комментарий = "";
		КонецЕсли;
	
	КонецЦикла;
	
	ЗаписиОтраженияДокумента.Записать();
	
	Если ВозвращатьКОтражениюДокументСторно Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОтражениеДокументовВМеждународномУчете.Регистратор   КАК Регистратор,
		|	ОтражениеДокументовВМеждународномУчете.Период        КАК Период,
		|	ОтражениеДокументовВМеждународномУчете.ПланСчетов    КАК ПланСчетов,
		|	ОтражениеДокументовВМеждународномУчете.Организация   КАК Организация,
		|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
		|	ВЫБОР
		|		КОГДА ОтражениеДокументовВМеждународномУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
		|	КОНЕЦ КАК Статус,
		|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
		|ИЗ
		|	РегистрСведений.РеестрДокументов КАК РеестрДокументов 
		|	ЛЕВОЕ СОЕДИНЕНИЕ
		|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
		|	ПО
		|		РеестрДокументов.Ссылка = ОтражениеДокументовВМеждународномУчете.Регистратор
		|ГДЕ
		|	РеестрДокументов.СторнируемыйДокумент = &Документ
		|	И РеестрДокументов.СторноИсправление
		|	И РеестрДокументов.Проведен
		|	И НЕ РеестрДокументов.ДополнительнаяЗапись
		|	И НЕ ОтражениеДокументовВМеждународномУчете.Регистратор ЕСТЬ NULL
		|
		|ИТОГИ ПО
		|	Регистратор";
		Запрос.УстановитьПараметр("Документ", Документ);
		ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаРегистратор.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
			Выборка = ВыборкаРегистратор.Выбрать();
			Пока Выборка.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
			КонецЦикла;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ЗаполнитьСтатусПроводки(Проводка, Статус) Экспорт

	Проводка.Статус = МеждународныйУчетСерверПовтИсп.ОпределитьСтатус(Проводка.Статус, Статус);

КонецПроцедуры

// Параметры:
// 	Проводка - Структура - Описание проводки:
//   * МассивОшибок - Массив из Строка - текст ошибки
// 	ТекстОшибки - Строка - 
Процедура ДобавитьОшибкуПроводки(Проводка, ТекстОшибки) Экспорт

	Проводка.МассивОшибок.Добавить(ТекстОшибки);

КонецПроцедуры

// Параметры:
// 	ТаблицаПроводок - ТаблицаЗначений - 
// 	Проводка - Структура - 
Процедура ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка) Экспорт

	СтрокаТаблицы = ТаблицаПроводок.Добавить();
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Проводка);
	
	ЗаполнитьСтатусВТаблицеПроводок(СтрокаТаблицы, Проводка);
	
	ЗаполнитьКомментарийВТаблицеПроводок(СтрокаТаблицы, Проводка);

КонецПроцедуры

// Параметры:
// 	СхемаКомпоновкиДанных - СхемаКомпоновкиДанных - 
// 	Настройка - Структура - 
// Возвращаемое значение:
// 	Строка - 
Функция ВыражениеЗаполненияСубконтоПоНастройке(СхемаКомпоновкиДанных, Настройка) Экспорт
	
	ВыражениеВычисляемогоПоля = "Неопределено";
	Если Настройка.ЗаполнятьИзИсточника Тогда
		ВыражениеНастройки = Настройка.Выражение;
		Если Найти(ВыражениеНастройки, "СчетДт.") > 0 Тогда
			ВыражениеНастройки = СтрЗаменить(ВыражениеНастройки, "СчетДт.", "");
		ИначеЕсли Найти(ВыражениеНастройки, "СчетКт.") > 0 Тогда
			ВыражениеНастройки = СтрЗаменить(ВыражениеНастройки, "СчетКт.", "");
		ИначеЕсли ПустаяСтрока(ВыражениеНастройки) Тогда
			ВыражениеНастройки = "Неопределено";
		КонецЕсли;
		ВыражениеВычисляемогоПоля = ВыражениеНастройки;
	Иначе
		ИмяПараметра = "УказанноеЗначение_" + СтрЗаменить(Строка(Новый УникальныйИдентификатор), "-", "");
		Параметр = СхемаКомпоновкиДанных.Параметры.Добавить();
		Параметр.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		Параметр.Имя = ИмяПараметра;
		Параметр.Значение = Настройка.УказанноеЗначение;
		ВыражениеВычисляемогоПоля = "&" + ИмяПараметра;
	КонецЕсли;
	
	Возврат ВыражениеВычисляемогоПоля;
	
КонецФункции

Функция ТипыНепереотражаемыхДокументов() Экспорт
	
	ТипыДокументов = Новый Массив();
	ТипыДокументов.Добавить(Тип("ДокументСсылка.КорректировкаРегистров"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОперацияМеждународный"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет"));
	
	Если ПолучитьФункциональнуюОпцию("ПроводкиМеждународногоУчетаПоДаннымОперативного")
		И ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		ИменаНеиспользуемыхДокументов = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ИменаНеиспользуемыхДокументов();
		
		Для Каждого ИмяДокумента Из ИменаНеиспользуемыхДокументов Цикл
			ТипыДокументов.Добавить(Тип(СтрШаблон("ДокументСсылка.%1", ИмяДокумента)));
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТипыДокументов;
	
КонецФункции


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФормированиеПроводок

// Возвращает общие параметры формирования проводок
//
// Параметры:
// 	ПараметрыОтраженияВМеждународномУчете - см. ПараметрыОтраженияВМеждународномУчете
// 	
// Возвращаемое значение:
// 	Структура - Содержит параметры:
// 		* СтруктураПроводки - См. СтруктураПроводки
// 		* МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
Функция ПараметрыФормированияПроводок(ПараметрыОтраженияВМеждународномУчете) Экспорт
	
	ПараметрыФормированияПроводок = Новый Структура;
	ПараметрыФормированияПроводок.Вставить("СтруктураПроводки", СтруктураПроводки());
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ИнициализироватьТаблицуПланыСчетовМеждународногоУчетаОрганизаций(
		МенеджерВременныхТаблиц, 
		ПараметрыОтраженияВМеждународномУчете.МассивОрганизаций,
		ПараметрыОтраженияВМеждународномУчете.ДатаОкончания,
		ПараметрыОтраженияВМеждународномУчете.Документы);
		
	ПараметрыФормированияПроводок.Вставить("МенеджерВременныхТаблиц", МенеджерВременныхТаблиц);
	
	ОписаниеПолейРегистра = РегистрыБухгалтерии.Международный.ОписаниеПолейРегистра();
	
	ПараметрыФормированияПроводок.Вставить("КоличествоСубконто",    ОписаниеПолейРегистра.КоличествоСубконто);
	ПараметрыФормированияПроводок.Вставить("БалансовыеИзмерения",   ОписаниеПолейРегистра.БалансовыеИзмерения);
	ПараметрыФормированияПроводок.Вставить("НебалансовыеИзмерения", ОписаниеПолейРегистра.НебалансовыеИзмерения);
	ПараметрыФормированияПроводок.Вставить("БалансовыеРесурсы",     ОписаниеПолейРегистра.БалансовыеРесурсы);
	ПараметрыФормированияПроводок.Вставить("НебалансовыеРесурсы",   ОписаниеПолейРегистра.НебалансовыеРесурсы);
	ПараметрыФормированияПроводок.Вставить("Реквизиты",             ОписаниеПолейРегистра.Реквизиты);
	
	ПараметрыФормированияПроводок.Вставить("ИнвертируемыеПоля",    РегистрыБухгалтерии.Международный.ИнвертируемыеПоля(ОписаниеПолейРегистра));
	ПараметрыФормированияПроводок.Вставить("ИнвертируемыеРесурсы", РегистрыБухгалтерии.Международный.ИнвертируемыеРесурсы(ОписаниеПолейРегистра));
	
	ПараметрыФормированияПроводок.Вставить("СвернутьТаблицуПроводок", Ложь);
	ПараметрыФормированияПроводок.Вставить("УдалитьНезначащиеПроводки", Ложь);
	
	МеждународныйУчетПоДаннымОперативногоУчета.ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок);
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок);
	МеждународныйУчетПоДаннымРеглУчета.ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок);
	
	Возврат ПараметрыФормированияПроводок;
	
КонецФункции

Процедура ИнициализироватьТаблицуПланыСчетовМеждународногоУчетаОрганизаций(МенеджерВременныхТаблиц, МассивОрганизаций, ДатаОкончания, Документы)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Период КАК Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ПланыСчетовМеждународногоУчетаОрганизаций
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Период
	|";
	
	Запрос.Выполнить();
	
КонецПроцедуры

// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - 
// 	ПараметрыОтраженияВМеждународномУчете - см. ПараметрыОтраженияВМеждународномУчете
// 	МоментВремени - МоментВремени - 
// Возвращаемое значение:
// 	ВыборкаИзРезультатаЗапроса, Неопределено - Описание
Функция ДокументыКОтражениюВУчете(МенеджерВременныхТаблиц, ПараметрыОтраженияВМеждународномУчете, МоментВремени)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДокументов.Регистратор КАК Регистратор,
	|	ТаблицаДокументов.ПланСчетов КАК ПланСчетов,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ТаблицаДокументов.МоментВремени КАК МоментВремени,
	|	ТаблицаДокументов.ИдентификаторСтатуса КАК ИдентификаторСтатуса,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК ПериодНастройкиФормированияПроводок
	|ПОМЕСТИТЬ ТаблицаДокументов
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО 
	|			ТаблицаДокументов.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|			И ТаблицаДокументов.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|			И ТаблицаДокументов.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	(&НеПроверятьСтатусОтражения
	|			ИЛИ ТаблицаДокументов.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете)))
	|	И (ТаблицаДокументов.Организация В (&МассивОрганизаций) ИЛИ &ПоВсемОрганизациям)
	|	И (ТаблицаДокументов.Регистратор В (&Документы) ИЛИ &ПоВсемДокументам)
	|	И ТаблицаДокументов.ДатаОтражения <= &ДатаОкончания
	|	И ТаблицаДокументов.МоментВремени > &МоментВремени
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Период,
	|	ТаблицаДокументов.ДатаОтражения,
	|	ТаблицаДокументов.Регистратор,
	|	ТаблицаДокументов.Организация,
	|	ТаблицаДокументов.ПланСчетов,
	|	ТаблицаДокументов.ИдентификаторСтатуса,
	|	ТаблицаДокументов.МоментВремени
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокументов.МоментВремени
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	ПериодНастройкиФормированияПроводок,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументов.Период КАК Период,
	|	ТаблицаДокументов.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДокументов.Регистратор КАК Регистратор,
	|	ТаблицаДокументов.ПланСчетов КАК ПланСчетов,
	|	ТаблицаДокументов.Организация КАК Организация,
	|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок, НЕОПРЕДЕЛЕНО) КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ДокументыКОтражению
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО ТаблицаДокументов.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|			И ТаблицаДокументов.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|			И ТаблицаДокументов.ПериодНастройкиФормированияПроводок = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументов.Период,
	|	ТаблицаДокументов.ДатаОтражения,
	|	ТаблицаДокументов.Регистратор,
	|	ТаблицаДокументов.ПланСчетов,
	|	ТаблицаДокументов.Организация,
	|	ТаблицаДокументов.ИдентификаторСтатуса,
	|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок, НЕОПРЕДЕЛЕНО)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаОтражения,
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ТаблицаДокументов.МоментВремени КАК МоментВремени
	|ИЗ
	|	ТаблицаДокументов КАК ТаблицаДокументов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаДокументов.МоментВремени УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|
	|ИТОГИ
	|ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДокументов;
	|";
	
	Запрос.УстановитьПараметр("МассивОрганизаций",  ПараметрыОтраженияВМеждународномУчете.МассивОрганизаций);
	Запрос.УстановитьПараметр("ПоВсемОрганизациям", Не ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.МассивОрганизаций));
	Запрос.УстановитьПараметр("ДатаОкончания", 
		?(НЕ ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.ДатаОкончания), '39991231', ПараметрыОтраженияВМеждународномУчете.ДатаОкончания));
	Запрос.УстановитьПараметр("Документы", ПараметрыОтраженияВМеждународномУчете.Документы);
	Запрос.УстановитьПараметр("ПоВсемДокументам", НЕ ЗначениеЗаполнено(ПараметрыОтраженияВМеждународномУчете.Документы));
	Запрос.УстановитьПараметр("МоментВремени", МоментВремени);
	Запрос.УстановитьПараметр("НеПроверятьСтатусОтражения", НЕ ПараметрыОтраженияВМеждународномУчете.АвтоматическоеОтражение);
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаМоментВремени = Результат[2].Выбрать();
	Если ВыборкаМоментВремени.Следующий() Тогда
		МоментВремени = ВыборкаМоментВремени.МоментВремени;
	Иначе
		МоментВремени = Неопределено;
	КонецЕсли;
	ДокументыКОтражениюВУчете = Результат[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат ДокументыКОтражениюВУчете;
	
КонецФункции

Процедура УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"УНИЧТОЖИТЬ ДокументыКОтражению
	|";
	
	Запрос.Выполнить();

КонецПроцедуры

Процедура УстановитьДанныеБлокировки(ЭлементБлокировки, МенеджерВременныхТаблиц)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокументыКОтражению.Регистратор КАК Регистратор
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрДокументов.Ссылка КАК Регистратор
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражени
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ПО
	|		ДокументыКОтражени.Регистратор = РеестрДокументов.СторнируемыйДокумент
	|		И РеестрДокументов.СторноИсправление
	|		И РеестрДокументов.Проведен
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|";
	Результат = Запрос.Выполнить();
	
	ЭлементБлокировки.ИсточникДанных  = Результат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");

КонецПроцедуры

Процедура ЗаписатьПроводки(ТаблицаПроводок, ДокументыКОтражениюВУчете)
	
	ТаблицаПроводок.Индексы.Добавить("Регистратор");
	Пока ДокументыКОтражениюВУчете.Следующий() Цикл
		
		ИзмеренияРегистра = Новый ТаблицаЗначений();
		ИзмеренияРегистра.Колонки.Добавить("ПланСчетов");
		ИзмеренияРегистра.Колонки.Добавить("Организация");
		ИзмеренияРегистра.Колонки.Добавить("ДатаОтражения");
		ВыборкаПоИзмерениям = ДокументыКОтражениюВУчете.Выбрать();
		Пока ВыборкаПоИзмерениям.Следующий() Цикл
			НоваяСтрока = ИзмеренияРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаПоИзмерениям);
		КонецЦикла;
		
		ПроводкиДокумента = ТаблицаПроводок.Скопировать(Новый Структура("Регистратор", ДокументыКОтражениюВУчете.Регистратор));
		ОбновитьСтатусОтраженияДокумента(ДокументыКОтражениюВУчете.Регистратор, ИзмеренияРегистра, ПроводкиДокумента, Ложь);
		
		ЗаписываемыеПроводки = ЗаписываемыеПроводки(ПроводкиДокумента);
		ЗаписываемыеПроводки.Сортировать("ПланСчетов, Сторно Убыв, Период, Организация");
		
		НаборЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей();
		НаборЗаписей.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
		НаборЗаписей.Отбор.Регистратор.Установить(ДокументыКОтражениюВУчете.Регистратор);
		Для Каждого Проводка Из ЗаписываемыеПроводки Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Проводка);
			НаборЗаписей.УстановитьСубконто(НоваяЗапись, Проводка, "Дт");
			НаборЗаписей.УстановитьСубконто(НоваяЗапись, Проводка, "Кт");
		КонецЦикла;
		НаборЗаписей.Записать();
		
	КонецЦикла;

КонецПроцедуры

Процедура ПересчитатьТаблицуПроводокПоКурсу(ПараметрыОтражения, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПроводок.Период КАК Период,
	|	НАЧАЛОПЕРИОДА(ТаблицаПроводок.Период, ДЕНЬ) КАК ДатаПроводки,
	|	ТаблицаПроводок.Организация КАК Организация,
	|	ТаблицаПроводок.ПланСчетов КАК ПланСчетов,
	|	&ТекстВыборкиОстальныхКолонок,
	|	ВЫБОР КОГДА ТаблицаПроводок.Сумма = НЕОПРЕДЕЛЕНО
	|		ТОГДА 0
	|		ИНАЧЕ ТаблицаПроводок.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ТаблицаПроводок.СуммаПредставления = НЕОПРЕДЕЛЕНО
	|		ТОГДА 0
	|		ИНАЧЕ ТаблицаПроводок.СуммаПредставления
	|	КОНЕЦ КАК СуммаПредставления,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной КАК ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления КАК ВалютаХраненияСуммыПредставления,
	|	ТаблицаПроводок.ВалютаФункциональная КАК ВалютаФункциональная,
	|	ТаблицаПроводок.ВалютаПредставления КАК ВалютаПредставления
	|ПОМЕСТИТЬ ТаблицаПроводок
	|ИЗ
	|	&ТаблицаПроводок КАК ТаблицаПроводок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ВалютаХраненияСуммыФункциональной,
	|	ВалютаХраненияСуммыПредставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ТаблицаПроводок.ДатаПроводки КАК ДатаПроводки,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной КАК ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления КАК ВалютаХраненияСуммыПредставления,
	|	ТаблицаПроводок.ВалютаФункциональная КАК ВалютаФункциональная,
	|	ТаблицаПроводок.ВалютаПредставления КАК ВалютаПредставления
	|ПОМЕСТИТЬ Валюты
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|ГДЕ
	|	(ТаблицаПроводок.ВалютаХраненияСуммыФункциональной <> ТаблицаПроводок.ВалютаФункциональная
	|			ИЛИ ТаблицаПроводок.ВалютаХраненияСуммыПредставления <> ТаблицаПроводок.ВалютаПредставления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроводки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалют.ВалютаРегламентированногоУчета КАК БазоваяВалюта,
	|	КурсыВалют.ДатаПроводки КАК ДатаПроводки,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.ПериодКурса) КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодыКурсовВалют
	|ИЗ
	|	(ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки КАК ДатаПроводки,
	|		Валюты.ВалютаХраненияСуммыФункциональной КАК Валюта,
	|		КурсыВалют.Период КАК ПериодКурса
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаХраненияСуммыФункциональной
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки,
	|		Валюты.ВалютаХраненияСуммыПредставления,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаХраненияСуммыПредставления
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки,
	|		Валюты.ВалютаФункциональная,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаФункциональная
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Валюты.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|		Валюты.ДатаПроводки,
	|		Валюты.ВалютаПредставления,
	|		КурсыВалют.Период
	|	ИЗ
	|		Валюты КАК Валюты
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|			ПО Валюты.ДатаПроводки >= КурсыВалют.Период
	|				И КурсыВалют.Валюта = Валюты.ВалютаПредставления
	|				И КурсыВалют.БазоваяВалюта = Валюты.ВалютаРегламентированногоУчета) КАК КурсыВалют
	|
	|СГРУППИРОВАТЬ ПО
	|	КурсыВалют.ДатаПроводки,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.ВалютаРегламентированногоУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроводки,
	|	Валюта,
	|	БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыКурсовВалют.БазоваяВалюта КАК БазоваяВалюта,
	|	ПериодыКурсовВалют.ДатаПроводки КАК ДатаПроводки,
	|	ПериодыКурсовВалют.Валюта КАК Валюта,
	|	КурсыВалют.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	ПериодыКурсовВалют КАК ПериодыКурсовВалют
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтносительныеКурсыВалют КАК КурсыВалют
	|		ПО ПериодыКурсовВалют.ПериодКурса = КурсыВалют.Период
	|			И ПериодыКурсовВалют.Валюта = КурсыВалют.Валюта
	|			И ПериодыКурсовВалют.БазоваяВалюта = КурсыВалют.БазоваяВалюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаПроводки,
	|	Валюта,
	|	БазоваяВалюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПроводок.Период КАК Период,
	|	ТаблицаПроводок.Организация,
	|	ТаблицаПроводок.ПланСчетов,
	|	&ТекстВыборкиОстальныхКолонок,
	|	ТаблицаПроводок.Сумма 
	|		* (ЕСТЬNULL(КурсыВалютХраненияСуммыФункциональной.КурсЧислитель, 1) * ЕСТЬNULL(КурсыФункциональнойВалюты.КурсЗнаменатель, 1))
	|		/ (ЕСТЬNULL(КурсыВалютХраненияСуммыФункциональной.КурсЗнаменатель, 1) *  ЕСТЬNULL(КурсыФункциональнойВалюты.КурсЧислитель, 1)) КАК Сумма,
	|	ТаблицаПроводок.СуммаПредставления 
	|		* (ЕСТЬNULL(КурсыВалютХраненияСуммыПредставления.КурсЧислитель, 1) * ЕСТЬNULL(КурсыВалютыПредставления.КурсЗнаменатель, 1))
	|		/ (ЕСТЬNULL(КурсыВалютХраненияСуммыПредставления.КурсЗнаменатель, 1) *  ЕСТЬNULL(КурсыВалютыПредставления.КурсЧислитель, 1)) КАК СуммаПредставления,
	|	ТаблицаПроводок.ВалютаХраненияСуммыФункциональной,
	|	ТаблицаПроводок.ВалютаХраненияСуммыПредставления,
	|	ТаблицаПроводок.ВалютаФункциональная,
	|	ТаблицаПроводок.ВалютаПредставления
	|ИЗ
	|	ТаблицаПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютХраненияСуммыФункциональной
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыВалютХраненияСуммыФункциональной.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаХраненияСуммыФункциональной = КурсыВалютХраненияСуммыФункциональной.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыВалютХраненияСуммыФункциональной.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютХраненияСуммыПредставления
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыВалютХраненияСуммыПредставления.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаХраненияСуммыПредставления = КурсыВалютХраненияСуммыПредставления.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыВалютХраненияСуммыПредставления.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыФункциональнойВалюты
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыФункциональнойВалюты.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаФункциональная = КурсыФункциональнойВалюты.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыФункциональнойВалюты.БазоваяВалюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалют КАК КурсыВалютыПредставления
	|		ПО ТаблицаПроводок.ДатаПроводки = КурсыВалютыПредставления.ДатаПроводки
	|			И ТаблицаПроводок.ВалютаПредставления  = КурсыВалютыПредставления.Валюта
	|			И ТаблицаПроводок.Организация.ВалютаРегламентированногоУчета = КурсыВалютыПредставления.БазоваяВалюта
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПроводок.ПланСчетов,
	|	ТаблицаПроводок.Организация,
	|	ТаблицаПроводок.Период";
	
	Запрос.УстановитьПараметр("ТаблицаПроводок", ТаблицаПроводок);
	
	СтруктураКолонокИсключений = Новый Структура("МоментВремени, Период, Сумма, СуммаПредставления, Организация, ПланСчетов,
	                                             |ВалютаХраненияСуммыФункциональной, ВалютаХраненияСуммыПредставления,
	                                             |ВалютаФункциональная, ВалютаПредставления");
	МассивПолейВыборки = Новый Массив;
	Для каждого Колонка Из ТаблицаПроводок.Колонки Цикл
		Если СтруктураКолонокИсключений.Свойство(Колонка.Имя) Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейВыборки.Добавить(СтрШаблон("ТаблицаПроводок.%1", Колонка.Имя));
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТекстВыборкиОстальныхКолонок", СтрСоединить(МассивПолейВыборки, "," + Символы.ПС));
	
	ТаблицаПроводок = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры


Процедура ДобавитьПроводкиПоДругимОрагнизациямПериодам(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(Проводки.Период, ДЕНЬ) КАК ДатаОтражения,
	|	Проводки.Период КАК Период,
	|	Проводки.Регистратор КАК Регистратор,
	|	Проводки.НомерСтроки КАК НомерСтроки,
	|	Проводки.СчетДт КАК СчетДт,
	|	Проводки.СчетКт КАК СчетКт,
	|	Проводки.ПланСчетов КАК ПланСчетов,
	|	Проводки.Организация КАК Организация,
	|	Проводки.ПодразделениеДт КАК ПодразделениеДт,
	|	Проводки.ПодразделениеКт КАК ПодразделениеКт,
	|	Проводки.ВалютаДт КАК ВалютаДт,
	|	Проводки.ВалютаКт КАК ВалютаКт,
	|	Проводки.Сумма КАК Сумма,
	|	Проводки.СуммаПредставления КАК СуммаПредставления,
	|	Проводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Проводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	Проводки.КоличествоДт КАК КоличествоДт,
	|	Проводки.КоличествоКт КАК КоличествоКт,
	|	Проводки.Содержание КАК Содержание,
	|	Проводки.ШаблонПроводки КАК ШаблонПроводки,
	|	Проводки.ТипПроводки КАК ТипПроводки,
	|	Проводки.СубконтоДт1 КАК СубконтоДт1,
	|	ЕСТЬNULL(Проводки.ВидСубконтоДт1, 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт1,
	|	Проводки.СубконтоДт2 КАК СубконтоДт2,
	|	ЕСТЬNULL(Проводки.ВидСубконтоДт2, 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	Проводки.СубконтоДт3 КАК СубконтоДт3,
	|	ЕСТЬNULL(Проводки.ВидСубконтоДт3, 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	Проводки.СубконтоКт1 КАК СубконтоКт1,
	|	ЕСТЬNULL(Проводки.ВидСубконтоКт1, 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	Проводки.СубконтоКт2 КАК СубконтоКт2,
	|	ЕСТЬNULL(Проводки.ВидСубконтоКт2, 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	Проводки.СубконтоКт3 КАК СубконтоКт3,
	|	ЕСТЬNULL(Проводки.ВидСубконтоКт3, 
	|		ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	Проводки.Сторно КАК Сторно
	|ПОМЕСТИТЬ ТекущиеПроводки
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор В (
	|				ВЫБРАТЬ
	|					ДокументыКОтражению.Регистратор
	|				ИЗ 
	|					ДокументыКОтражению КАК ДокументыКОтражению
	|			),
	|			,
	|		) КАК Проводки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ПланСчетов,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
	|	ДанныеРегистра.СчетДт КАК СчетДт,
	|	ДанныеРегистра.СчетКт КАК СчетКт,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ПодразделениеДт КАК ПодразделениеДт,
	|	ДанныеРегистра.ПодразделениеКт КАК ПодразделениеКт,
	|	ДанныеРегистра.ВалютаДт КАК ВалютаДт,
	|	ДанныеРегистра.ВалютаКт КАК ВалютаКт,
	|	ДанныеРегистра.Сумма КАК Сумма,
	|	ДанныеРегистра.СуммаПредставления КАК СуммаПредставления,
	|	ДанныеРегистра.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	ДанныеРегистра.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ДанныеРегистра.КоличествоДт КАК КоличествоДт,
	|	ДанныеРегистра.КоличествоКт КАК КоличествоКт,
	|	ДанныеРегистра.Содержание КАК Содержание,
	|	ДанныеРегистра.ШаблонПроводки КАК ШаблонПроводки,
	|	ДанныеРегистра.ТипПроводки КАК ТипПроводки,
	|	ДанныеРегистра.СубконтоДт1 КАК СубконтоДт1,
	|	ДанныеРегистра.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	ДанныеРегистра.СубконтоДт2 КАК СубконтоДт2,
	|	ДанныеРегистра.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	ДанныеРегистра.СубконтоДт3 КАК СубконтоДт3,
	|	ДанныеРегистра.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	ДанныеРегистра.СубконтоКт1 КАК СубконтоКт1,
	|	ДанныеРегистра.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	ДанныеРегистра.СубконтоКт2 КАК СубконтоКт2,
	|	ДанныеРегистра.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	ДанныеРегистра.СубконтоКт3 КАК СубконтоКт3,
	|	ДанныеРегистра.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	ДанныеРегистра.Сторно КАК Сторно
	|ИЗ
	|	ТекущиеПроводки КАК ДанныеРегистра
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|	ПО
	|		ДанныеРегистра.Регистратор = ОтражениеДокументовВМеждународномУчете.Регистратор
	|		И ДанныеРегистра.ПланСчетов = ОтражениеДокументовВМеждународномУчете.ПланСчетов
	|		И ДанныеРегистра.Организация = ОтражениеДокументовВМеждународномУчете.Организация
	|		И ДанныеРегистра.ДатаОтражения = ОтражениеДокументовВМеждународномУчете.ДатаОтражения
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражению
	|	ПО
	|		ДанныеРегистра.Регистратор = ДокументыКОтражению.Регистратор
	|		И ДанныеРегистра.ПланСчетов = ДокументыКОтражению.ПланСчетов
	|		И ДанныеРегистра.Организация = ДокументыКОтражению.Организация
	|		И ДанныеРегистра.ДатаОтражения = ДокументыКОтражению.ДатаОтражения
	|ГДЕ
	|	ДокументыКОтражению.Регистратор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТекущиеПроводки;
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Проводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(Проводка, Выборка);
		ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПроводкиСторно(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	РеестрДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ДокументыКОтражениюСторнируемыйДокумент.Регистратор ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СторнируемыйДокументКОтражению,
	|	ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|			= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаменитьСторноРеверсом
	|ПОМЕСТИТЬ ДокументыСторно
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ПО 
	|		ДокументыКОтражению.Регистратор = РеестрДокументов.Ссылка
	|		И РеестрДокументов.СторноИсправление
	|		И РеестрДокументов.Проведен
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ДокументыКОтражению КАК ДокументыКОтражениюСторнируемыйДокумент
	|	ПО 
	|		РеестрДокументов.СторнируемыйДокумент = ДокументыКОтражениюСторнируемыйДокумент.Регистратор
	|		И ДокументыКОтражению.Организация = ДокументыКОтражениюСторнируемыйДокумент.Организация
	|		И ДокументыКОтражению.ПланСчетов = ДокументыКОтражениюСторнируемыйДокумент.ПланСчетов
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО
	|		ДокументыКОтражению.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		И ДокументыКОтражению.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.Период, ДЕНЬ) = ДокументыКОтражению.ДатаОтражения
	|	И ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПланыСчетовМеждународногоУчетаОрганизаций.Период В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ПланыСчетовОрганизаций.Период)
	|			ИЗ
	|				РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
	|			ГДЕ
	|				ПланыСчетовОрганизаций.ПланСчетов = ДокументыКОтражению.ПланСчетов
	|				И ПланыСчетовОрганизаций.Организация = ДокументыКОтражению.Организация
	|				И ПланыСчетовОрганизаций.Период <= ДокументыКОтражению.ДатаОтражения
	|			)
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СторнируемыйДокумент,
	|	ПланСчетов,
	|	Организация
	|;
	|
	|//////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Международный.Регистратор КАК Регистратор,
	|	Международный.Период КАК Период,
	|	Международный.ПланСчетов КАК ПланСчетов,
	|	Международный.Организация КАК Организация,
	|	Международный.ПодразделениеДт КАК ПодразделениеДт,
	|	Международный.ВалютаДт КАК ВалютаДт,
	|	Международный.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	Международный.СчетДт КАК СчетДт,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт1, 
	|	Международный.СубконтоДт1 КАК СубконтоДт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	Международный.СубконтоДт2 КАК СубконтоДт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоДт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	Международный.СубконтоДт3 КАК СубконтоДт3,
	|	Международный.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Международный.КоличествоДт КАК КоличествоДт,
	|	Международный.ПодразделениеКт КАК ПодразделениеКт,
	|	Международный.ВалютаКт КАК ВалютаКт,
	|	Международный.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	Международный.СчетКт КАК СчетКт,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	Международный.СубконтоКт1 КАК СубконтоКт1,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	Международный.СубконтоКт2 КАК СубконтоКт2,
	|	ЕСТЬNULL(Международный.ВидСубконтоКт3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	Международный.СубконтоКт3 КАК СубконтоКт3,
	|	Международный.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	Международный.КоличествоКт КАК КоличествоКт,
	|	Международный.Сумма КАК Сумма,
	|	Международный.СуммаПредставления КАК СуммаПредставления,
	|	Международный.Содержание КАК Содержание,
	|	Международный.ШаблонПроводки КАК ШаблонПроводки,
	|	Международный.СоответствиеСчетаДт КАК СоответствиеСчетаДт,
	|	Международный.СоответствиеСчетаКт КАК СоответствиеСчетаКт,
	|	Международный.СоответствиеОборотов КАК СоответствиеОборотов,
	|	Международный.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Международный.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ПОМЕСТИТЬ Международный
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(,, (Регистратор, ПланСчетов, Организация) В
	|		(ВЫБРАТЬ
	|			Таблица.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|			Таблица.ПланСчетов КАК ПланСчетов,
	|			Таблица.Организация КАК Организация
	|		ИЗ
	|			ДокументыСторно КАК Таблица
	|		ГДЕ
	|			НЕ Таблица.СторнируемыйДокументКОтражению)) КАК Международный
	|ГДЕ
	|	НЕ Международный.Сторно
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ПланСчетов,
	|	Организация
	|;
	|
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСторно.Регистратор КАК Регистратор,
	|	ДокументыСторно.Период КАК Период,
	|	ДокументыСторно.ЗаменитьСторноРеверсом КАК ЗаменитьСторноРеверсом,
	|	Международный.ПланСчетов КАК ПланСчетов,
	|	Международный.Организация КАК Организация,
	|	Международный.ПодразделениеДт КАК ПодразделениеДт,
	|	Международный.ВалютаДт КАК ВалютаДт,
	|	Международный.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	Международный.СчетДт КАК СчетДт,
	|	Международный.ВидСубконтоДт1 КАК ВидСубконтоДт1, 
	|	Международный.СубконтоДт1 КАК СубконтоДт1,
	|	Международный.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	Международный.СубконтоДт2 КАК СубконтоДт2,
	|	Международный.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	Международный.СубконтоДт3 КАК СубконтоДт3,
	|	-Международный.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	-Международный.КоличествоДт КАК КоличествоДт,
	|	Международный.ПодразделениеКт КАК ПодразделениеКт,
	|	Международный.ВалютаКт КАК ВалютаКт,
	|	Международный.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	Международный.СчетКт КАК СчетКт,
	|	Международный.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	Международный.СубконтоКт1 КАК СубконтоКт1,
	|	Международный.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	Международный.СубконтоКт2 КАК СубконтоКт2,
	|	Международный.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	Международный.СубконтоКт3 КАК СубконтоКт3,
	|	-Международный.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	-Международный.КоличествоКт КАК КоличествоКт,
	|	-Международный.Сумма КАК Сумма,
	|	-Международный.СуммаПредставления КАК СуммаПредставления,
	|	Международный.Содержание КАК Содержание,
	|	Международный.ШаблонПроводки КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПроводокМеждународныйУчет.Сторно) КАК ТипПроводки,
	|	Международный.СоответствиеСчетаДт КАК СоответствиеСчетаДт,
	|	Международный.СоответствиеСчетаКт КАК СоответствиеСчетаКт,
	|	Международный.СоответствиеОборотов КАК СоответствиеОборотов,
	|	ИСТИНА КАК Сторно,
	|	Международный.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	Международный.НастройкаХозяйственнойОперации КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	Международный КАК Международный 
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ДокументыСторно КАК ДокументыСторно
	|	ПО
	|		Международный.Регистратор = ДокументыСторно.СторнируемыйДокумент
	|		И Международный.ПланСчетов = ДокументыСторно.ПланСчетов
	|		И Международный.Организация = ДокументыСторно.Организация
	|;
	|
	|///////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументыСторно.Регистратор КАК Регистратор,
	|	ДокументыСторно.Период КАК Период,
	|	ДокументыСторно.ЗаменитьСторноРеверсом КАК ЗаменитьСторноРеверсом,
	|	ДокументыСторно.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ДокументыСторно.ПланСчетов КАК ПланСчетов,
	|	ДокументыСторно.Организация КАК Организация
	|ИЗ
	|	ДокументыСторно КАК ДокументыСторно
	|ГДЕ
	|	ДокументыСторно.СторнируемыйДокументКОтражению
	|;
	|
	|///////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Международный
	|;
	|
	|УНИЧТОЖИТЬ ДокументыСторно
	|";
	РезультатЗапросов = Запрос.ВыполнитьПакет();
	
	ТаблицаРеверсивныхПроводок = ТаблицаПроводок.СкопироватьКолонки();
	
	Выборка = РезультатЗапросов[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(НоваяПроводка, Выборка);
		
		УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(НоваяПроводка.ПланСчетов, НоваяПроводка.Организация);
		НоваяПроводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
		НоваяПроводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
			
		Если Выборка.ЗаменитьСторноРеверсом Тогда
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаРеверсивныхПроводок, НоваяПроводка);
		Иначе
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("Регистратор,ПланСчетов,Организация,Сторно");
	СтруктураПоиска.Сторно = Ложь;
	
	Если Не РезультатЗапросов[3].Пустой() Тогда
		ТаблицаПроводок.Индексы.Добавить("Регистратор,ПланСчетов,Организация,Сторно");
		
		Выборка = РезультатЗапросов[3].Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураПоиска.Регистратор = Выборка.СторнируемыйДокумент;
			СтруктураПоиска.ПланСчетов = Выборка.ПланСчетов;
			СтруктураПоиска.Организация = Выборка.Организация;
			
			СторнируемыеПроводки = ТаблицаПроводок.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Проводка Из СторнируемыеПроводки Цикл
				Если Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				   И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
				ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
				НоваяПроводка.Регистратор = Выборка.Регистратор;
				НоваяПроводка.Период = Выборка.Период;
				НоваяПроводка.Сторно = Истина;                                                          
				НоваяПроводка.ТипПроводки = Перечисления.ТипыПроводокМеждународныйУчет.Сторно;
				Если НоваяПроводка.КоличествоДт <> Неопределено Тогда
					НоваяПроводка.КоличествоДт = -НоваяПроводка.КоличествоДт;
				КонецЕсли;
				Если НоваяПроводка.КоличествоКт <> Неопределено Тогда
					НоваяПроводка.КоличествоКт = -НоваяПроводка.КоличествоКт;
				КонецЕсли;
				Если НоваяПроводка.ВалютнаяСуммаДт <> Неопределено Тогда
					НоваяПроводка.ВалютнаяСуммаДт = -НоваяПроводка.ВалютнаяСуммаДт;
				КонецЕсли;
				Если НоваяПроводка.ВалютнаяСуммаКт <> Неопределено Тогда
					НоваяПроводка.ВалютнаяСуммаКт = -НоваяПроводка.ВалютнаяСуммаКт;
				КонецЕсли;
				Если НоваяПроводка.Сумма <> Неопределено Тогда
					НоваяПроводка.Сумма = -НоваяПроводка.Сумма;
				КонецЕсли;
				Если НоваяПроводка.СуммаПредставления <> Неопределено Тогда
					НоваяПроводка.СуммаПредставления = -НоваяПроводка.СуммаПредставления;
				КонецЕсли;
				
				Если Выборка.ЗаменитьСторноРеверсом Тогда
					ДобавитьПроводкуВТаблицуПроводок(ТаблицаРеверсивныхПроводок, НоваяПроводка);
				Иначе
					ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Если ТаблицаРеверсивныхПроводок.Количество() > 0 Тогда
		ТаблицаПоиска = ТаблицаРеверсивныхПроводок.Скопировать(, "Регистратор,ПланСчетов,Организация");
		ТаблицаПоиска.Свернуть("Регистратор,ПланСчетов,Организация");
		
		Если ТаблицаПроводок.Индексы.Количество() = 0 Тогда
			ТаблицаПроводок.Индексы.Добавить("Регистратор,ПланСчетов,Организация,Сторно");
		КонецЕсли;
		
		УдаляемыеПроводки = Новый Массив();
		
		Для Каждого СтрокаПоиска Из ТаблицаПоиска Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоиска);
			ИсправительныеПроводки = ТаблицаПроводок.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Проводка Из ИсправительныеПроводки Цикл
				Если Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				   И Проводка.Статус <> Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
					Продолжить;
				КонецЕсли;
				
				УдаляемыеПроводки.Добавить(Проводка);
				
				НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
				ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
				ДобавитьПроводкуВТаблицуПроводок(ТаблицаРеверсивныхПроводок, НоваяПроводка);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого Проводка Из УдаляемыеПроводки Цикл
			ТаблицаПроводок.Удалить(Проводка);
		КонецЦикла;
		
		ТаблицаПоиска = Неопределено;
		ВсеИзмерения = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеИзмерения);
		
		Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.НебалансовыеИзмерения Цикл
			ВсеИзмерения.Добавить(ИмяИзмерения + "Дт");
			ВсеИзмерения.Добавить(ИмяИзмерения + "Кт");
		КонецЦикла;
		
		Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
			ВсеИзмерения.Добавить("СубконтоДт" + НомерСубконто);
			ВсеИзмерения.Добавить("СубконтоКт" + НомерСубконто);
		КонецЦикла;
		
		Для Каждого Проводка Из ТаблицаРеверсивныхПроводок Цикл
			Для Каждого ИмяИзмерения Из ВсеИзмерения Цикл
				Если НЕ ЗначениеЗаполнено(Проводка[ИмяИзмерения]) Тогда
					Проводка[ИмяИзмерения] = Неопределено;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ТаблицаСвертки = ТаблицаРеверсивныхПроводок.Скопировать();
			
		Для Каждого Проводка Из ТаблицаСвертки Цикл
			Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
				Проводка[ИмяРеквизита] = Неопределено;
			КонецЦикла;
			
			Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
			Проводка.ВалютаХраненияСуммыПредставления = Проводка.ВалютаПредставления;
			Проводка.ВалютаХраненияСуммыФункциональной = Проводка.ВалютаФункциональная;
		КонецЦикла;
		
		ЗначениеПараметраСвернутьТаблицуПроводок = ПараметрыФормированияПроводок.СвернутьТаблицуПроводок;
		ПараметрыФормированияПроводок.СвернутьТаблицуПроводок = Истина;
		
		СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаСвертки);
		
		ПараметрыФормированияПроводок.СвернутьТаблицуПроводок = ЗначениеПараметраСвернутьТаблицуПроводок;

		ВсеИзмерения.Добавить("Период");
		ВсеИзмерения.Добавить("Регистратор");
		ВсеИзмерения.Добавить("Сторно");
		ВсеИзмерения.Добавить("СчетДт");
		ВсеИзмерения.Добавить("СчетКт");
		
		СтруктураПоиска = Новый Структура(СтрСоединить(ВсеИзмерения, ","));
		ТаблицаРеверсивныхПроводок.Индексы.Добавить(СтрСоединить(ВсеИзмерения, ","));
		
		Для Каждого Проводка Из ТаблицаСвертки Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Проводка);
			СтруктураПоиска.Сторно = Ложь;
			ИсходныеПроводки = ТаблицаРеверсивныхПроводок.НайтиСтроки(СтруктураПоиска);
			
			Если ИсходныеПроводки.Количество() = 0 Тогда
				СтруктураПоиска.Сторно = Истина;
				ИсходныеПроводки = ТаблицаРеверсивныхПроводок.НайтиСтроки(СтруктураПоиска);
			КонецЕсли;
			
			Если ИсходныеПроводки.Количество() > 0 Тогда
				ИсходнаяПроводка = ИсходныеПроводки[0];
				Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
					Проводка[ИмяРеквизита] = ИсходнаяПроводка[ИмяРеквизита];
				КонецЦикла;
			КонецЕсли;
			
			Если (ЗначениеЗаполнено(Проводка.Сумма) И Проводка.Сумма < 0)
			 ИЛИ (ЗначениеЗаполнено(Проводка.СуммаПредставления) И Проводка.СуммаПредставления < 0) Тогда
				РегистрыБухгалтерии.Международный.ИнвертироватьПроводку(
					Проводка,
					ПараметрыФормированияПроводок.ИнвертируемыеПоля,
					ПараметрыФормированияПроводок.ИнвертируемыеРесурсы,
					ПараметрыФормированияПроводок.КоличествоСубконто);
				Проводка.ТипПроводки = Перечисления.ТипыПроводокМеждународныйУчет.Реверс;
			КонецЕсли;
			
			НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
			ЗаполнитьЗначенияСвойств(НоваяПроводка, Проводка);
			ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаПроводок.Индексы.Очистить();
	
КонецПроцедуры

Процедура ВерунтьКОтражениюДокументыСторно(ПараметрыФормированияПроводок)
		
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = ПараметрыФормированияПроводок.МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ Регистраторы
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Регистратор   КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.Период        КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов    КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация   КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ВЫБОР
	|		КОГДА ОтражениеДокументовВМеждународномУчете.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	Регистраторы КАК Регистраторы
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ПО
	|		РеестрДокументов.СторнируемыйДокумент = Регистраторы.Регистратор
	|		И РеестрДокументов.СторноИсправление
	|		И РеестрДокументов.Проведен
	|		И НЕ РеестрДокументов.ДополнительнаяЗапись
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументовВМеждународномУчете
	|	ПО
	|		РеестрДокументов.Ссылка = ОтражениеДокументовВМеждународномУчете.Регистратор
	|ГДЕ
	|	НЕ (РеестрДокументов.Ссылка) В 
	|		(ВЫБРАТЬ
	|			ДокументыКОтражению.Регистратор
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению)
	|
	|ИТОГИ ПО
	|	Регистратор
	|;
	|
	|//////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Регистраторы";
	
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаРегистратор.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистратор.Регистратор);
		Выборка = ВыборкаРегистратор.Выбрать();
		Пока Выборка.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, Выборка);
		КонецЦикла;
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьКомментарий(Комментарий, Проводка, УникальныеЗначения)

	Если УникальныеЗначения[Проводка.Комментарий] = Неопределено Тогда
		Комментарий = ?(Не ПустаяСтрока(Комментарий), Комментарий + Символы.ПС, Комментарий);
		Комментарий = Комментарий + Проводка.Комментарий;
		УникальныеЗначения.Вставить(Проводка.Комментарий, Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСтатусВТаблицеПроводок(СтрокаТаблицы, Проводка)

	Если ЗначениеЗаполнено(СтрокаТаблицы.Статус) Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоОшибок = Проводка.МассивОшибок.Количество();
	Если КоличествоОшибок > 0 Тогда
		СтрокаТаблицы.Статус = Проводка.Статус;
	Иначе
		СтрокаТаблицы.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКомментарийВТаблицеПроводок(СтрокаТаблицы, Проводка)

	МассивОшибок = Проводка.МассивОшибок;
	КоличествоОшибок = МассивОшибок.Количество();
	Если КоличествоОшибок > 0 Тогда
		
		Если ЗначениеЗаполнено(Проводка.ШаблонПроводки) Тогда
			ТекстШаблонПроводки = НСтр("ru = 'Шаблон проводки ""%ШаблонПроводки%""';
										|en = 'Posting template ""%ШаблонПроводки%""'") + Символы.ПС;
			ТекстШаблонПроводки = СтрЗаменить(ТекстШаблонПроводки, "%ШаблонПроводки%", Проводка.ШаблонПроводки);
			ТекстКоличествоОшибок = НСтр("ru = 'Обнаружены ошибки (%КоличествоОшибок%):';
										|en = 'Errors are detected (%КоличествоОшибок%):'");
			ТекстКоличествоОшибок = СтрЗаменить(ТекстКоличествоОшибок, "%КоличествоОшибок%", КоличествоОшибок);
			ОписаниеОшибок = ТекстШаблонПроводки + ТекстКоличествоОшибок;
			Для К = 1 По КоличествоОшибок Цикл
				ОписаниеОшибки = НСтр("ru = '%НомерОшибки%. %ТекстОшибки%';
										|en = '%НомерОшибки%. %ТекстОшибки%'");
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%НомерОшибки%", К);
				ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ТекстОшибки%", МассивОшибок[К - 1]);
				ОписаниеОшибок = ОписаниеОшибок + Символы.ПС + ОписаниеОшибки;
			КонецЦикла;
		Иначе
			ОписаниеОшибок = СтрСоединить(Проводка.МассивОшибок, Символы.ПС);
		КонецЕсли;
		
		СтрокаТаблицы.Комментарий = ОписаниеОшибок;
		
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьОффлайновыеРасчеты(Знач МассивОрганизаций = Неопределено, Знач ДатаОкончания = Неопределено, Знач ДокументыКОтражению = Неопределено)
	
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	КонецЕсли;
	
	НачалоМесяца = НачалоМесяца(ДатаОкончания);
	КонецМесяца = КонецМесяца(ДатаОкончания);
	ОкончаниеРасчета = КонецМесяца(ДатаОкончания)+1;

	Если ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов") Тогда
		
		Если ДокументыКОтражению = Неопределено Тогда
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	ОтражениеДокументов.Регистратор КАК Регистратор
			|ИЗ
			|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
			|ГДЕ
			|	ОтражениеДокументов.Статус В (
			|		ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете))
			|	И (ОтражениеДокументов.Организация В (&Организации)
			|			ИЛИ &ПоВсемОрганизациям)
			|	И (ОтражениеДокументов.Период <= &ДатаОкончания)");
			
			Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания),ДатаОкончания,'29990101'));
			Запрос.УстановитьПараметр("Организации", МассивОрганизаций);
			Запрос.УстановитьПараметр("ПоВсемОрганизациям", НЕ ЗначениеЗаполнено(МассивОрганизаций));
			
			МассивДокументыКОтражению = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
			
		ИначеЕсли ТипЗнч(ДокументыКОтражению) = Тип("Массив") Тогда
			МассивДокументыКОтражению = ДокументыКОтражению;
		Иначе
			МассивДокументыКОтражению = Новый Массив;
			МассивДокументыКОтражению.Добавить(ДокументыКОтражению);
		КонецЕсли;
		
		РегистрыСведений.СуммыДокументовВВалютахУчета.РассчитатьСуммыДокументовВВалютахУчета(МассивДокументыКОтражению);
		УправленческийУчетПроведениеСервер.ОбновитьДвиженияПоОборотнымРегистрам(МассивДокументыКОтражению);
	Иначе
		Если ДокументыКОтражению = Неопределено Тогда
			
			Если ЗначениеЗаполнено(ДатаОкончания) Тогда
				КонецРасчета = КонецМесяца(ДатаОкончания)+1;
			Иначе
				КонецРасчета = КонецМесяца(ТекущаяДатаСеанса())+1;
			КонецЕсли;
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			Если ЗначениеЗаполнено(МассивОрганизаций) Тогда
				АналитикиРасчета.Организации = ОбщегоНазначенияУТКлиентСервер.Массив(МассивОрганизаций);
			КонецЕсли;
			РаспределениеВзаиморасчетовВызовСервера.РассчитатьВсе(КонецРасчета, АналитикиРасчета);
			
			Возврат;
			
		КонецЕсли;
		
		Если ТипЗнч(ДокументыКОтражению) = Тип("Массив") Тогда
			МассивДокументыКОтражению = ДокументыКОтражению;
		Иначе
			МассивДокументыКОтражению = Новый Массив;
			МассивДокументыКОтражению.Добавить(ДокументыКОтражению);
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСПоставщиками КАК Расчеты
		|ГДЕ
		|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Расчеты.Регистратор В (&ДокументыКОтражению)
		|	И Расчеты.Активность
		|");
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца);
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца);
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
		МассивАналитикПоставщиков = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		Если МассивАналитикПоставщиков.Количество() > 0 Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикПоставщиков;
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСПоставщиками(ОкончаниеРасчета, АналитикиРасчета);
		КонецЕсли;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Расчеты.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам
		|ИЗ
		|	РегистрНакопления.РасчетыСКлиентами КАК Расчеты
		|ГДЕ
		|	Расчеты.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И Расчеты.Регистратор В (&ДокументыКОтражению)
		|	И Расчеты.Активность
		|");
		Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца);
		Запрос.УстановитьПараметр("ОкончаниеПериода", КонецМесяца);
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
		МассивАналитикКлиентов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("АналитикаУчетаПоПартнерам");
		Если МассивАналитикКлиентов.Количество() > 0 Тогда
			АналитикиРасчета = РаспределениеВзаиморасчетовВызовСервера.АналитикиРасчета();
			АналитикиРасчета.АналитикиУчетаПоПартнерам = МассивАналитикКлиентов;
			РаспределениеВзаиморасчетовВызовСервера.РаспределитьВсеРасчетыСКлиентами(ОкончаниеРасчета, АналитикиРасчета);
		КонецЕсли;
	КонецЕсли;
	
	ВнеоборотныеАктивы.ОтложенноеФормированиеДвиженийПриФормированииПроводок(МассивДокументыКОтражению);
	ВнеоборотныеАктивы.РассчитатьСтоимостьВнеоборотныхАктивовПриФормированииПроводок(МассивДокументыКОтражению);
	ЗакрытиеРасходовОтВыбытияОС.ВыполнитьОперациюДляДокументов(МассивДокументыКОтражению);
	УчетНДСУП.ОтразитьДокументыВУчетеНДС(КонецМесяца, МассивДокументыКОтражению);
	
КонецПроцедуры

Функция СтруктураПроводки()

	Проводка = Новый Структура;
	СтруктураНабораЗаписей = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	Для каждого Колонка Из СтруктураНабораЗаписей.Колонки Цикл
		Если Колонка.Имя <> "Активность" Тогда
			Проводка.Вставить(Колонка.Имя); 
		КонецЕсли;
	КонецЦикла;
	Проводка.Вставить("Статус");
	Проводка.Вставить("ШаблонПроводки");
	Проводка.Вставить("МассивОшибок", Новый Массив);
	Проводка.Вставить("ВалютаХраненияСуммыПредставления");
	Проводка.Вставить("ВалютаХраненияСуммыФункциональной");
	
	Проводка.Вставить("ВалютаФункциональная");
	Проводка.Вставить("ВалютаПредставления");

	Возврат Проводка;

КонецФункции

Функция ТаблицаПроводок()

	ТаблицаПроводок = РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ТаблицаПроводок.Колонки.Удалить("Активность");
	
	ТаблицаПроводок.Колонки.Добавить("Статус", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыОтраженияВМеждународномУчете"));
	ТаблицаПроводок.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка"));
	
	ТаблицаПроводок.Колонки.Добавить("ВалютаФункциональная", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПроводок.Колонки.Добавить("ВалютаПредставления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	// Валюты-источники исходных данных для суммы представления и суммы функциональной.
	ТаблицаПроводок.Колонки.Добавить("ВалютаХраненияСуммыПредставления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПроводок.Колонки.Добавить("ВалютаХраненияСуммыФункциональной", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Процедура СвернутьТаблицуПроводок(ПараметрыФормированияПроводок, ТаблицаПроводок)
	
	Если НЕ ПараметрыФормированияПроводок.СвернутьТаблицуПроводок Тогда
		Возврат;
	КонецЕсли;
	
	ОтборСтрок = Новый Структура();
	ОтборСтрок.Вставить("Статус", Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете);
	
	СтрокиОтраженыВУчете = ТаблицаПроводок.НайтиСтроки(ОтборСтрок);
	
	Если СтрокиОтраженыВУчете.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПоляГруппировки = Новый Массив();
	ПоляГруппировки.Добавить("Период");
	ПоляГруппировки.Добавить("Регистратор");
	ПоляГруппировки.Добавить("СчетДт");
	ПоляГруппировки.Добавить("СчетКт");
	ПоляГруппировки.Добавить("Статус");
	ПоляГруппировки.Добавить("ВалютаФункциональная");
	ПоляГруппировки.Добавить("ВалютаПредставления");
	ПоляГруппировки.Добавить("ВалютаХраненияСуммыПредставления");
	ПоляГруппировки.Добавить("ВалютаХраненияСуммыФункциональной");
	
	Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
		ПоляГруппировки.Добавить("ВидСубконтоДт" + НомерСубконто);
		ПоляГруппировки.Добавить("ВидСубконтоКт" + НомерСубконто);
		ПоляГруппировки.Добавить("СубконтоДт" + НомерСубконто);
		ПоляГруппировки.Добавить("СубконтоКт" + НомерСубконто);
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.БалансовыеИзмерения Цикл
		ПоляГруппировки.Добавить(ИмяИзмерения);
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.НебалансовыеИзмерения Цикл
		ПоляГруппировки.Добавить(ИмяИзмерения + "Дт");
		ПоляГруппировки.Добавить(ИмяИзмерения + "Кт");
	КонецЦикла;
	
	Для Каждого ИмяРеквизита Из ПараметрыФормированияПроводок.Реквизиты Цикл
		ПоляГруппировки.Добавить(ИмяРеквизита);
	КонецЦикла;
	
	ПоляСуммирования = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.БалансовыеРесурсы);
	
	Для Каждого ИмяРесурса Из ПараметрыФормированияПроводок.НебалансовыеРесурсы Цикл
		ПоляСуммирования.Добавить(ИмяРесурса + "Дт");
		ПоляСуммирования.Добавить(ИмяРесурса + "Кт");
	КонецЦикла;
	
	СтрокаГруппировки = СтрСоединить(ПоляГруппировки, ",");
	СтрокаСуммирования = СтрСоединить(ПоляСуммирования, ",");
	
	ТаблицаОтраженыВУчете = ТаблицаПроводок.Скопировать(ОтборСтрок);
	ТаблицаОтраженыВУчете.Свернуть(СтрокаГруппировки, СтрокаСуммирования);
	
	Если ТаблицаОтраженыВУчете.Количество() <> СтрокиОтраженыВУчете.Количество() Тогда
		Для Каждого СтрокаТаблицыПроводок Из СтрокиОтраженыВУчете Цикл
			ТаблицаПроводок.Удалить(СтрокаТаблицыПроводок);
		КонецЦикла;
		
		Для Каждого СвернутаяСтрока Из ТаблицаОтраженыВУчете Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаПроводок.Добавить(), СвернутаяСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПроводкиБезСуммИКоличеств(ПроводкиДокумента)
	
	ПроводкиКУдалению = Новый Массив;
	Для каждого Проводка Из ПроводкиДокумента Цикл
		Если (Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете
				ИЛИ Проводка.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
			И Проводка.Сумма = 0
			И Проводка.СуммаПредставления = 0
			И Проводка.КоличествоДт = 0 
			И Проводка.КоличествоКт = 0 Тогда
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого Проводка Из ПроводкиКУдалению Цикл
		ПроводкиДокумента.Удалить(Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьНезначащиеПроводки(ПараметрыФормированияПроводок, ТаблицаПроводок)

	Если НЕ ПараметрыФормированияПроводок.УдалитьНезначащиеПроводки Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПроводкиДт = Новый Массив();
	ПоляПроводкиКт = Новый Массив();
	
	ПоляПроводкиДт.Добавить("СчетДт");
	ПоляПроводкиКт.Добавить("СчетКт");
	
	Для НомерСубконто = 1 По ПараметрыФормированияПроводок.КоличествоСубконто Цикл
		ПоляПроводкиДт.Добавить("СубконтоДт" + НомерСубконто);
		ПоляПроводкиКт.Добавить("СубконтоКт" + НомерСубконто);
	КонецЦикла;
	
	Для Каждого ИмяИзмерения Из ПараметрыФормированияПроводок.НебалансовыеИзмерения Цикл
		ПоляПроводкиДт.Добавить(ИмяИзмерения + "Дт");
		ПоляПроводкиКт.Добавить(ИмяИзмерения + "Кт");
	КонецЦикла;
	
	Для Каждого ИмяРесурса Из ПараметрыФормированияПроводок.НебалансовыеРесурсы Цикл
		ПоляПроводкиДт.Добавить(ИмяРесурса + "Дт");
		ПоляПроводкиКт.Добавить(ИмяРесурса + "Кт");
	КонецЦикла;
	
	НаибольшийИндексПолей = ПоляПроводкиДт.ВГраница();
	УдаляемыеПроводки = Новый Массив();
	
	Для Каждого СтрокаТаблицыПроводок Из ТаблицаПроводок Цикл
		Если СтрокаТаблицыПроводок.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
			ПоляДтРавныПолямКт = Истина;
			Для Индекс = 0 По НаибольшийИндексПолей Цикл
				Если СтрокаТаблицыПроводок[ПоляПроводкиДт[Индекс]] <> СтрокаТаблицыПроводок[ПоляПроводкиКт[Индекс]] Тогда
					ПоляДтРавныПолямКт = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ПоляДтРавныПолямКт Тогда
				УдаляемыеПроводки.Добавить(СтрокаТаблицыПроводок);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицыПроводок Из УдаляемыеПроводки Цикл
		ТаблицаПроводок.Удалить(СтрокаТаблицыПроводок);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрацияДокументовКОтражениюВМеждународномУчете

Процедура ДобавитьНастройкуФормированияПроводокИСтатус(ТаблицаОтражения, Регистратор)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаОтражения.Период          КАК Период,
	|	ТаблицаОтражения.Организация     КАК Организация,
	|	ТаблицаОтражения.ДатаОтражения   КАК ДатаОтражения,
	|	ТаблицаОтражения.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТаблицаДанные
	|ИЗ
	|	&ТаблицаОтражения КАК ТаблицаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Период КАК Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ТаблицаДанные.Организация КАК Организация,
	|	ТаблицаДанные.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДанные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК Месяц
	|ПОМЕСТИТЬ ПериодыНастроекФормированияПроводок
	|ИЗ
	|	ТаблицаДанные КАК ТаблицаДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ТаблицаДанные.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ТаблицаДанные.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанные.Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов,
	|	ТаблицаДанные.Организация,
	|	ТаблицаДанные.ДатаОтражения,
	|	ТаблицаДанные.ХозяйственнаяОперация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыНастроекФормированияПроводок.Период КАК Период,
	|	ПериодыНастроекФормированияПроводок.ПланСчетов КАК ПланСчетов,
	|	ПериодыНастроекФормированияПроводок.Организация КАК Организация,
	|	ПериодыНастроекФормированияПроводок.ДатаОтражения КАК ДатаОтражения,
	|	ПериодыНастроекФормированияПроводок.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	ПериодыНастроекФормированияПроводок КАК ПериодыНастроекФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО	
	|		ПериодыНастроекФормированияПроводок.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		И ПериодыНастроекФормированияПроводок.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ПериодыНастроекФормированияПроводок.Месяц = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКОтражению.Период КАК Период,
	|	ТаблицаКОтражению.ПланСчетов КАК ПланСчетов,
	|	ТаблицаКОтражению.Организация КАК Организация,
	|	ТаблицаКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ТаблицаКОтражению.Статус = 1 ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.Период КАК Период,
	|		ИсходнаяТаблица.ПланСчетов КАК ПланСчетов,
	|		ИсходнаяТаблица.Организация КАК Организация,
	|		ИсходнаяТаблица.ДатаОтражения КАК ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|		МИНИМУМ (ВЫБОР
	|			КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) КАК Статус
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ПО
	|			ИсходнаяТаблица.ПланСчетов = ОтражениеДокументов.ПланСчетов
	|			И ИсходнаяТаблица.Организация = ОтражениеДокументов.Организация
	|			И ОтражениеДокументов.Регистратор = &Регистратор
	|
	|	СГРУППИРОВАТЬ ПО
	|		ИсходнаяТаблица.Период,
	|		ИсходнаяТаблица.ПланСчетов,
	|		ИсходнаяТаблица.Организация,
	|		ИсходнаяТаблица.ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок
	|	) КАК ТаблицаКОтражению
	|");
	
	Запрос.УстановитьПараметр("ТаблицаОтражения", ТаблицаОтражения);
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	ТаблицаОтражения = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПолучитьНастройкуФормированияПроводокИСтатус(МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Документ        КАК Документ,
	|	ВложенныйЗапрос.Организация     КАК Организация,
	|	ВложенныйЗапрос.ДатаОтражения   КАК ДатаОтражения,
	|	ВложенныйЗапрос.ХозяйственнаяОперация КАК ХозяйственнаяОперация
	|ПОМЕСТИТЬ ТаблицаДанные
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаОтражения.Документ        КАК Документ,
	|		ТаблицаОтражения.Организация     КАК Организация,
	|		ТаблицаОтражения.ДатаОтражения   КАК ДатаОтражения,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|	ИЗ
	|		ТаблицаТекущейРегистрации КАК ТаблицаОтражения
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ТаблицаОтражения.Документ        КАК Документ,
	|		ТаблицаОтражения.Организация     КАК Организация,
	|		ТаблицаОтражения.ДатаОтражения   КАК ДатаОтражения,
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация
	|	ИЗ
	|		ТаблицаВыборочнойРегистрации КАК ТаблицаОтражения
	|) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Организация КАК Организация,
	|	ТаблицаДанные.ДатаОтражения КАК ДатаОтражения,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК Месяц
	|ПОМЕСТИТЬ ПериодыНастройкиФормированияПроводок
	|ИЗ
	|	ТаблицаДанные КАК ТаблицаДанные
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ТаблицаДанные.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ТаблицаДанные.ДатаОтражения >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДанные.Организация,
	|	ТаблицаДанные.ДатаОтражения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ДатаОтражения,
	|	Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанные.Документ КАК Документ,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ТаблицаДанные.Организация КАК Организация,
	|	ТаблицаДанные.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаДанные.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ ИсходнаяТаблица
	|ИЗ
	|	ТаблицаДанные КАК ТаблицаДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПериодыНастройкиФормированияПроводок КАК ПериодыНастройкиФормированияПроводок
	|	ПО ТаблицаДанные.Организация = ПериодыНастройкиФормированияПроводок.Организация
	|		И ТаблицаДанные.ДатаОтражения = ПериодыНастройкиФормированияПроводок.ДатаОтражения
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ПериодыНастройкиФормированияПроводок.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И ПериодыНастройкиФормированияПроводок.Месяц = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ПравилаОтражения.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	МАКСИМУМ(ШаблоныПроводок.РучноеУточнениеПроводки) КАК РучноеУточнениеПроводки
	|ПОМЕСТИТЬ ПравилаОтражения
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозяйственныхОпераций
	|	ПО
	|		ШаблоныПроводок.Операция = НастройкиХозяйственныхОпераций.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ПравилаОтраженияВМеждународномУчете КАК ПравилаОтражения
	|	ПО
	|		ШаблоныПроводок.Ссылка = ПравилаОтражения.ШаблонПроводки
	|СГРУППИРОВАТЬ ПО
	|	НастройкиХозяйственныхОпераций.ХозяйственнаяОперация,
	|	ПравилаОтражения.НастройкаФормированияПроводок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКОтражению.Документ КАК Документ,
	|	ТаблицаКОтражению.ПланСчетов КАК ПланСчетов,
	|	ТаблицаКОтражению.Организация КАК Организация,
	|	ТаблицаКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ТаблицаКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ТаблицаКОтражению.Статус = 1 ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|		ИНАЧЕ
	|			ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ НастройкаФормированияПроводокИСтатус
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИсходнаяТаблица.Документ КАК Документ,
	|		ИсходнаяТаблица.ПланСчетов КАК ПланСчетов,
	|		ИсходнаяТаблица.Организация КАК Организация,
	|		ИсходнаяТаблица.ДатаОтражения КАК ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|		МИНИМУМ (ВЫБОР
	|			КОГДА ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|				ИЛИ ОтражениеДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ИЛИ ПравилаОтражения.РучноеУточнениеПроводки
	|				ТОГДА 1
	|			ИНАЧЕ 2
	|		КОНЕЦ) КАК Статус
	|	ИЗ
	|		ИсходнаяТаблица КАК ИсходнаяТаблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			ПравилаОтражения КАК ПравилаОтражения
	|		ПО
	|			ИсходнаяТаблица.НастройкаФормированияПроводок = ПравилаОтражения.НастройкаФормированияПроводок
	|			И ИсходнаяТаблица.ХозяйственнаяОперация = ПравилаОтражения.ХозяйственнаяОперация
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ОтражениеДокументов
	|		ПО
	|			ИсходнаяТаблица.Организация = ОтражениеДокументов.Организация
	|			И ИсходнаяТаблица.Документ = ОтражениеДокументов.Регистратор
	|
	|	СГРУППИРОВАТЬ ПО
	|		ИсходнаяТаблица.Документ,
	|		ИсходнаяТаблица.ПланСчетов,
	|		ИсходнаяТаблица.Организация,
	|		ИсходнаяТаблица.ДатаОтражения,
	|		ИсходнаяТаблица.НастройкаФормированияПроводок
	|	) КАК ТаблицаКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаДанные;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыНастройкиФормированияПроводок;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИсходнаяТаблица;
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПравилаОтражения;
	|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ИнициализироватьМенеджерДляВозвратаКОтражению(ДокументыКОтражению)
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Если ТипЗнч(ДокументыКОтражению) = Тип("ТаблицаЗначений") Тогда
		Если ДокументыКОтражению.Количество() = 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыКОтражению.Период КАК Период,
		|	ДокументыКОтражению.Документ КАК Документ,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	&ДокументыКОтражению КАК ДокументыКОтражению
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Документ,
		|	Организация,
		|	ДатаОтражения
		|;
		|/////////////////////////////////////////////////
		|");
		Запрос.УстановитьПараметр("ДокументыКОтражению", ДокументыКОтражению);
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.Выполнить();
	Иначе
		МенеджерВременныхТаблиц = ДокументыКОтражению;
	КонецЕсли;
	
	Возврат МенеджерВременныхТаблиц;
	
КонецФункции

Функция ДанныеДляВозвратаКОтражениюВУчете(ДокументыКОтражению, Отбор)

	#Область ТекстЗапросаТаблицаОтраженияДокументовВМеждународномУчете
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1000
	|	МИНИМУМ(ДокументыКОтражению.Период) КАК Период,
	|	ДокументыКОтражению.Документ КАК Регистратор,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) КАК ДатаОтражения
	|ПОМЕСТИТЬ ЗаписиКОтражению
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДокументыКОтражению.Документ) <> ТИП(Документ.КорректировкаРегистров)
	|	И ДокументыКОтражению.Период >= &Период
	|	И (ДокументыКОтражению.Документ > &Регистратор ИЛИ &Регистратор = Неопределено)
	|СГРУППИРОВАТЬ ПО
	|	ДокументыКОтражению.Документ,
	|	ДокументыКОтражению.Организация,
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиКОтражению.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ТолькоДокументыКОтражению
	|ИЗ
	|	ЗаписиКОтражению КАК ЗаписиКОтражению
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ДатаОтражения КАК ДатаОтражения,
	|	ДанныеРегистра.Статус,
	|	ДанныеРегистра.НастройкаФормированияПроводок,
	|	ДанныеРегистра.Комментарий
	|ПОМЕСТИТЬ ВсеЗаписиРегистратора
	|ИЗ
	|	ТолькоДокументыКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ПО ДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ПериодыРегистратора
	|ИЗ
	|	ВсеЗаписиРегистратора КАК ДанныеРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	ДанныеРегистра.Организация КАК Организация,
	|	ДанныеРегистра.ДатаОтражения КАК ДатаОтражения,
	|	ДанныеРегистра.Статус КАК Статус,
	|	ДанныеРегистра.НастройкаФормированияПроводок,
	|	ДанныеРегистра.Комментарий
	|ПОМЕСТИТЬ ВременнаяТаблицаРегистра
	|ИЗ
	|	ЗаписиКОтражению КАК ДокументыКОтражению
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ПО ДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|		И ДокументыКОтражению.Организация = ДанныеРегистра.Организация
	|		И НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаОтражения, ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Если регистрации не было, то надо зарегистрировать.
	|ВЫБРАТЬ
	|	ДокументыКОтражению.Период КАК Период,
	|	ДокументыКОтражению.Регистратор КАК Регистратор,
	|	НЕОПРЕДЕЛЕНО КАК ПланСчетов,
	|	ДокументыКОтражению.Организация КАК Организация,
	|	ДокументыКОтражению.ДатаОтражения КАК ДатаОтражения,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете) КАК Статус,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаФормированияПроводок,
	|	"""" КАК Комментарий
	|ИЗ
	|	ЗаписиКОтражению КАК ДокументыКОтражению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК ДанныеРегистра
	|		ПО ДокументыКОтражению.Регистратор = ДанныеРегистра.Регистратор
	|		И ДокументыКОтражению.Организация = ДанныеРегистра.Организация
	|		И НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	ДанныеРегистра.Регистратор ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыКОтражению.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ МесяцОтражения
	|ИЗ
	|	ЗаписиКОтражению КАК ДокументыКОтражению
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.ДатаОтражения, МЕСЯЦ) КАК Период
	|ИЗ
	|	ВременнаяТаблицаРегистра КАК ДанныеРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
	|	МАКСИМУМ(ПланыСчетовМеждународногоУчетаОрганизаций.Период) КАК Период,
	|	МесяцОтражения.Период КАК ПериодРегистрации
	|ПОМЕСТИТЬ ПериодыНастройкиФормированияПроводок
	|ИЗ
	|	МесяцОтражения КАК МесяцОтражения
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО МесяцОтражения.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И МесяцОтражения.Период >= ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация,
	|	МесяцОтражения.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
	|	ПериодыНастройкиФормированияПроводок.ПериодРегистрации КАК Период,
	|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК Настройка
	|ПОМЕСТИТЬ ПланыСчетовМеждународногоУчетаОрганизаций
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПериодыНастройкиФормированияПроводок
	|	ПО ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов = ПериодыНастройкиФормированияПроводок.ПланСчетов
	|		И ПланыСчетовМеждународногоУчетаОрганизаций.Организация = ПериодыНастройкиФормированияПроводок.Организация
	|		И ПланыСчетовМеждународногоУчетаОрганизаций.Период = ПериодыНастройкиФормированияПроводок.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ПериодыРегистратора.Период, ОтражениеДокументовВМеждународномУчете.Период) КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов, ОтражениеДокументовВМеждународномУчете.ПланСчетов) КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВМеждународномУчете.Статус,
	|	ЕСТЬNULL(ПланыСчетовМеждународногоУчетаОрганизаций.Настройка, ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок) КАК НастройкаФормированияПроводок,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий
	|ПОМЕСТИТЬ ТаблицаРегистра
	|ИЗ
	|	ВременнаяТаблицаРегистра КАК ОтражениеДокументовВМеждународномУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО
	|		(ВЫБОР
	|			КОГДА ОтражениеДокументовВМеждународномУчете.ПланСчетов <> НЕОПРЕДЕЛЕНО
	|				ТОГДА ОтражениеДокументовВМеждународномУчете.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ)
	|		И ОтражениеДокументовВМеждународномУчете.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.ДатаОтражения, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПланыСчетовМеждународногоУчетаОрганизаций.Период, МЕСЯЦ)
	|		
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПериодыРегистратора КАК ПериодыРегистратора
	|	ПО 
	|		ОтражениеДокументовВМеждународномУчете.Регистратор = ПериодыРегистратора.Регистратор
	|ГДЕ
	|	НЕ (ПланыСчетовМеждународногоУчетаОрганизаций.Настройка ЕСТЬ NULL
	|		ИЛИ ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок = ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ДатаОтражения
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МесяцОтражения;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыНастройкиФормированияПроводок;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВременнаяТаблицаРегистра;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПериодыРегистратора;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВМеждународномУчете.Статус КАК Статус,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий КАК Комментарий,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ втОстальныеЗаписиРегистратора
	|ИЗ
	|	ВсеЗаписиРегистратора КАК ОтражениеДокументовВМеждународномУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ ЗаписиКОтражению КАК ДокументыКОтражению
	|	ПО ДокументыКОтражению.Регистратор = ОтражениеДокументовВМеждународномУчете.Регистратор
	|		И ДокументыКОтражению.Организация = ОтражениеДокументовВМеждународномУчете.Организация
	|		И НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ) = ОтражениеДокументовВМеждународномУчете.ДатаОтражения
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|	ПО ОтражениеДокументовВМеждународномУчете.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		И ОтражениеДокументовВМеждународномУчете.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|		И НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.ДатаОтражения, МЕСЯЦ) = ПланыСчетовМеждународногоУчетаОрганизаций.Период
	|ГДЕ
	|	ДокументыКОтражению.Регистратор ЕСТЬ NULL
	|	И НЕ (ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок ЕСТЬ NULL
	|		ИЛИ ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок = ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период         КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор    КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов     КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация    КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения  КАК ДатаОтражения,
	|	ВЫБОР 
	|		КОГДА НЕ ДокументыКОтражению.Организация ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА ОтражениеДокументовВМеждународномУчете.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную))
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете)
	|			КОНЕЦ
	|		ИНАЧЕ
	|			ОтражениеДокументовВМеждународномУчете.Статус
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА НЕ ДокументыКОтражению.Организация ЕСТЬ NULL ТОГДА
	|			ВЫБОР КОГДА ОтражениеДокументовВМеждународномУчете.Статус В (
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную),
	|					ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную))
	|				ТОГДА ОтражениеДокументовВМеждународномУчете.Комментарий
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|		ИНАЧЕ ОтражениеДокументовВМеждународномУчете.Комментарий
	|	КОНЕЦ КАК Комментарий,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ПОМЕСТИТЬ НовыеДанныеРегистра
	|ИЗ
	|	ТаблицаРегистра КАК ОтражениеДокументовВМеждународномУчете
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ЗаписиКОтражению КАК ДокументыКОтражению
	|	ПО
	|		НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДокументыКОтражению.Период, ДЕНЬ)
	|		И НАЧАЛОПЕРИОДА(ОтражениеДокументовВМеждународномУчете.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДокументыКОтражению.ДатаОтражения, ДЕНЬ)
	|		И ОтражениеДокументовВМеждународномУчете.Организация = ДокументыКОтражению.Организация
	|		И ОтражениеДокументовВМеждународномУчете.Регистратор = ДокументыКОтражению.Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтражениеДокументовВМеждународномУчете.Период КАК Период,
	|	ОтражениеДокументовВМеждународномУчете.Регистратор КАК Регистратор,
	|	ОтражениеДокументовВМеждународномУчете.ПланСчетов КАК ПланСчетов,
	|	ОтражениеДокументовВМеждународномУчете.Организация КАК Организация,
	|	ОтражениеДокументовВМеждународномУчете.ДатаОтражения КАК ДатаОтражения,
	|	ОтражениеДокументовВМеждународномУчете.Статус КАК Статус,
	|	ОтражениеДокументовВМеждународномУчете.Комментарий КАК Комментарий,
	|	ОтражениеДокументовВМеждународномУчете.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	втОстальныеЗаписиРегистратора КАК ОтражениеДокументовВМеждународномУчете
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НовыеДанныеРегистра.Период КАК Период,
	|	НовыеДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	НовыеДанныеРегистра КАК НовыеДанныеРегистра
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НовыеДанныеРегистра.Период КАК Период,
	|	НовыеДанныеРегистра.Регистратор КАК Регистратор,
	|	НовыеДанныеРегистра.ПланСчетов КАК ПланСчетов,
	|	НовыеДанныеРегистра.Организация КАК Организация,
	|	НовыеДанныеРегистра.ДатаОтражения КАК ДатаОтражения,
	|	НовыеДанныеРегистра.Статус КАК Статус,
	|	НовыеДанныеРегистра.Комментарий КАК Комментарий,
	|	НовыеДанныеРегистра.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
	|ИЗ
	|	НовыеДанныеРегистра КАК НовыеДанныеРегистра
	|
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ЗаписиКОтражению;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТолькоДокументыКОтражению;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПланыСчетовМеждународногоУчетаОрганизаций;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ НовыеДанныеРегистра;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРегистра;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстальныеЗаписиРегистратора;
	|//////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВсеЗаписиРегистратора;
	|";
	#КонецОбласти
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДокументыКОтражению;
	Запрос.УстановитьПараметр("Период", Отбор.Период);
	Запрос.УстановитьПараметр("Регистратор", Отбор.Регистратор);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();  
	
	ДанныеРегистра = РезультатЗапроса[16].Выгрузить(); // ТаблицаЗначений - 
	ДанныеРегистра.Индексы.Добавить("Период,Регистратор");
	
	Результат = Новый Структура("Регистраторы, ДанныеРегистра");
	Результат.Регистраторы = РезультатЗапроса[15].Выбрать();
	Результат.ДанныеРегистра = ДанныеРегистра;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область УниверсальныеПроверкиЭтаповЗакрытияМесяца

// Проверяет использование международного учета.
//
// Параметры:
//	ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//	
// Возвращаемое значение:
//	Булево - признак использования международного учета.
//
Функция ПроверитьИспользованиеМеждународногоУчета(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьМеждународныйФинансовыйУчет") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Международный финансовый учет не ведется.';
				|en = 'Financial accounting is not kept.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет необходимость формирования проводок международного учета хотя бы у одной рассчитываемой организации в рассчитываемом периоде.
//
// Параметры:
//	ПараметрыОбработчика 			  - Структура - параметры обработчика события этапа
//	ТолькоФормироватьВременнуюТаблицу - Булево - если Истина, то не нужно изменя ть состояние этапа.
//	
// Возвращаемое значение:
//	Булево - признак наличие настроек.
//
Функция ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика, ТолькоФормироватьВременнуюТаблицу = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Организация КАК Ссылка,
	|	Т.ПланСчетов КАК ПланСчетов,
	|	ВЫБОР
	|		КОГДА Т.ПланСчетов.УчетВФункциональнойВалюте = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл)
	|			ТОГДА Т.Организация.ВалютаРегламентированногоУчета
	|		ИНАЧЕ &ВалютаУправленческогоУчета
	|	КОНЕЦ КАК ВалютаФункциональная
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&КонецПериода, Организация В (&МассивОрганизаций)) КАК Т";
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	Запрос.Выполнить();
	
	Если ЗакрытиеМесяцаСервер.РазмерВременнойТаблицы(Запрос, "ВТОрганизации", ПараметрыОбработчика) = 0 Тогда
		
		Если НЕ ТолькоФормироватьВременнуюТаблицу Тогда
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
				ПараметрыОбработчика,
				НСтр("ru = 'Не требуется отражение в международном учете.';
					|en = 'Financial accounting posting is not required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Проверяет наличие документов "Регламентная операция (международный учет)".
//
// Параметры:
//	ПараметрыОбработчика 		- Структура - параметры обработчика события этапа
//	ТипОперации 		 		- ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//									если не указан, то анализируется типы операций из свойства ТипыРегламентныхОпераций данного этапа
//	ИмяТаблицыОтбораОрганизаций - Строка - имя временной таблицы для отбора документов по организациям
//									организации в указанной таблице должны находиться в поле с именем "Ссылка"
//	НаличиеДокументаОбязательно - Булево - признак обязательного наличия документа.
//	
Процедура ПроверитьНаличиеДокументаРегламентнаяОперацияМеждународныйУчет(ПараметрыОбработчика, Знач ТипОперации = Неопределено,
			ИмяТаблицыОтбораОрганизаций = "ВТОрганизации", НаличиеДокументаОбязательно = Ложь)
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Если НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		
		// Проверка по всем рассчитываемым организациям.
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ ВТОрганизации
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка В(&МассивОрганизаций)";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Операции.Ссылка    КАК ТипОперации,
	|	Организации.Ссылка КАК Организация,
	|	ПланыСчетовМеждународногоУчета.ПланСчетов КАК ПланСчетов
	|ПОМЕСТИТЬ ВТОперации
	|ИЗ
	|	Перечисление.ТипыРегламентныхОперацийМеждународныйУчет КАК Операции
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВТОрганизации КАК Организации
	|	ПО
	|		ИСТИНА
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций.СрезПоследних(&КонецПериода) КАК ПланыСчетовМеждународногоУчета
	|	ПО
	|		Организации.Ссылка = ПланыСчетовМеждународногоУчета.Организация
	|ГДЕ
	|	Операции.Ссылка В (&ТипыОпераций)
	|	И ПланыСчетовМеждународногоУчета.НастройкаФормированияПроводок <> ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Операции.ТипОперации КАК ТипОперации,
	|	Операции.Организация КАК Организация,
	|	Операции.ПланСчетов КАК ПланСчетов,
	|	КОЛИЧЕСТВО(РегламентнаяОперация.Ссылка) КАК КоличествоДокументов
	|ИЗ
	|	ВТОперации КАК Операции
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.Организация = Операции.Организация)
	|			И (РегламентнаяОперация.ПланСчетов = Операции.ПланСчетов)
	|			И (РегламентнаяОперация.ТипОперации = Операции.ТипОперации)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ПланСчетов,
	|	Операции.ТипОперации,
	|	Операции.Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	Операции.ТипОперации,
	|	Операции.Организация";
	
	Если ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций) Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВТОрганизации", ИмяТаблицыОтбораОрганизаций);
	КонецЕсли;
	
	ЕстьОшибки    = Ложь;
	ЕстьДокументы = Ложь;
	Период 		  = РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
	ТипыОпераций  = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	Запрос.УстановитьПараметр("ТипыОпераций", ТипыОпераций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, Выборка.Количество());
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.КоличествоДокументов > 1 Тогда
			
			ЕстьОшибки = Истина;
			ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
				ПараметрыОбработчика,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'По организации ""%1"" по плану счетов ""%2"" за период %3 сформировано несколько документов регламентных операций ""%4"" .';
						|en = 'Several period-end transaction documents ""%4"" have been generated for company ""%1"" as per chart of accounts ""%2"" in period %3.'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Организация,
					Выборка.ПланСчетов,
					Период,
					СокрЛП(Выборка.ТипОперации)));
					
			Продолжить;
			
		ИначеЕсли Выборка.КоличествоДокументов = 0 Тогда
			
			Если НЕ НаличиеДокументаОбязательно Тогда
				// Нет данных к расчету и нет регламентного документа - расчет не требуется.
			Иначе
				// Есть данные для расчета, но нет регламентного документа - расчет не выполнен.
				ЕстьОшибки = Истина;
				ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
					ПараметрыОбработчика,
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'По организации ""%1"" по плану счетов ""%3"" за период %3 не сформирована регламентная операция ""%4"".';
							|en = 'The period-end transaction ""%4"" has not been generated for company ""%1"" as per chart of accounts ""%3"" in period %3.'", ОбщегоНазначения.КодОсновногоЯзыка()),
						Выборка.Организация,
						Выборка.ПланСчетов,
						Период,
						СокрЛП(Выборка.ТипОперации)));
			КонецЕсли;
			
		Иначе // есть один документ
			ЕстьДокументы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ НаличиеДокументаОбязательно И НЕ ЕстьОшибки И НЕ ЕстьДокументы Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'За период %1 нет данных для расчета и отсутствует документ ""Регламентная операция (международный учет)"".';
					|en = 'No data for calculation and no ""Period-end transaction — Financial accounting"" document for period %1.'", ОбщегоНазначения.КодОсновногоЯзыка()),
				Период));
		
	КонецЕсли;
	
	РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос,
		"ВТОперации" + ?(НЕ ЗначениеЗаполнено(ИмяТаблицыОтбораОрганизаций), ", ВТОрганизации", ""));
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеРегламентныхОпераций

// Формирует документы "Регламентная операция (международный учет)".
//
// Параметры:
//	ПараметрыОбработчика 	- Структура - параметры обработчика события этапа
//	ТипОперации 			- ПеречислениеСсылка.ТипыРегламентныхОперацийМеждународныйУчет - тип операции документа
//								если не указан, то создаются документы со всеми типами операций из свойства ТипыРегламентныхОпераций данного этапа
//	УничтожатьВТОрганизации - Булево - признак необходимости удаления временной таблицы ВТОрганизации.
//	
Процедура СформироватьДокументРегламентнаяОперацияМУ(ПараметрыОбработчика, Знач ТипОперации = Неопределено, УничтожатьВТОрганизации = Истина) Экспорт
	
	Если НЕ ПроверитьНеобходимостьОтраженияВМеждународномУчете(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ЗакрытиеМесяцаСервер.ИнициализироватьЗапрос(Запрос, ПараметрыОбработчика);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Т.Ссылка КАК Организация,
	|	Т.ПланСчетов КАК ПланСчетов,
	|	ВЫБОР
	|		КОГДА РегламентнаяОперация.Ссылка ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ РегламентнаяОперация.Ссылка
	|	КОНЕЦ КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТДокументы
	|ИЗ
	|	ВТОрганизации КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегламентнаяОперацияМеждународныйУчет КАК РегламентнаяОперация
	|		ПО (РегламентнаяОперация.ПланСчетов = Т.ПланСчетов)
	|			И (РегламентнаяОперация.Организация = Т.Ссылка)
	|			И (РегламентнаяОперация.Дата МЕЖДУ &НачалоПериода И &КонецПериода)
	|			И (РегламентнаяОперация.ТипОперации = &ТипОперации)
	|			И (РегламентнаяОперация.Проведен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	РегламентныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ПланСчетов КАК ПланСчетов,
	|	Т.Организация КАК Организация,
	|	МАКСИМУМ(Т.РегламентныйДокумент) КАК РегламентныйДокумент
	|ПОМЕСТИТЬ ВТАктуальныеДокументы
	|ИЗ
	|	ВТДокументы КАК Т
	|
	|СГРУППИРОВАТЬ ПО
	|	Т.ПланСчетов,
	|	Т.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Организация,
	|	РегламентныйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Т.ПланСчетов КАК ПланСчетов,
	|	Т.Организация КАК Организация,
	|	Т.РегламентныйДокумент,
	|	ВЫБОР
	|		КОГДА Т.РегламентныйДокумент <> Т2.РегламентныйДокумент
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Удалить
	|ИЗ
	|	ВТДокументы КАК Т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТАктуальныеДокументы КАК Т2
	|		ПО 
	|			Т.ПланСчетов = Т2.ПланСчетов
	|			И Т.Организация = Т2.Организация
	|			И Т.РегламентныйДокумент = Т2.РегламентныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация";
	
	ТипыОпераций = ?(ЗначениеЗаполнено(ТипОперации),
		ОбщегоНазначенияУТКлиентСервер.Массив(ТипОперации),
		ПараметрыОбработчика.ДанныеЭтапа.ТипыРегламентныхОпераций);
	
	Для Каждого ТипОперации Из ТипыОпераций Цикл
		
		Запрос.УстановитьПараметр("ТипОперации", ТипОперации);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если НЕ ЗначениеЗаполнено(Выборка.РегламентныйДокумент) Тогда
				РегламентныйДокумент = Документы.РегламентнаяОперацияМеждународныйУчет.СоздатьДокумент();
			Иначе
				РегламентныйДокумент = Выборка.РегламентныйДокумент.ПолучитьОбъект();
			КонецЕсли;
			
			Попытка
			
				Если Выборка.Удалить Тогда
					РегламентныйДокумент.УстановитьПометкуУдаления(Истина);
					Продолжить;
				ИначеЕсли РегламентныйДокумент.Проведен Тогда
					РегламентныйДокумент.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
				
				РегламентныйДокумент.Дата 	     	= КонецМесяца(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации);
				РегламентныйДокумент.ПланСчетов 	= Выборка.ПланСчетов;
				РегламентныйДокумент.Организация 	= Выборка.Организация;
				РегламентныйДокумент.ТипОперации   	= ТипОперации;
				РегламентныйДокумент.Ответственный 	= Пользователи.ТекущийПользователь();
				
				РегламентныйДокумент.Записать(РежимЗаписиДокумента.Проведение);
				
			Исключение
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Формирование документа ""Регламентная операция (международный учет)"" по организации ""%1"" и плану счетов ""%2"" за период %3 завершилось с ошибкой:
						|%4';
						|en = 'Generation of the ""Period-end transaction — Financial accounting"" document by the ""%1"" company and ""%2"" chart of accounts for period %3 was completed with an error:
						|%4'", ОбщегоНазначения.КодОсновногоЯзыка()),
					Выборка.Организация,
					Выборка.ПланСчетов,
					РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				НастройкаФормированияПроводокСОшибкой = Неопределено;
				РегламентныйДокумент.ДополнительныеСвойства.Свойство("НастройкаФормированияПроводокСОшибкой", НастройкаФормированияПроводокСОшибкой);
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ТекстОшибки,
					Выборка.Организация,
					,
					,
					НастройкаФормированияПроводокСОшибкой);
				
			КонецПопытки;
			
		КонецЦикла;
		
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТДокументы, ВТАктуальныеДокументы");
		
	КонецЦикла;
	
	Если УничтожатьВТОрганизации Тогда
		РасчетСебестоимостиПрикладныеАлгоритмы.УничтожитьВременныеТаблицы(Запрос, "ВТОрганизации");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
