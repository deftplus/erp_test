Процедура ПроверитьВхождениеЯчейкиВОбластьРаскрытия(ПолеТабличногоДокументаМакет,ОбъектАБ,ОбластиВхождения) Экспорт
	
	ТекущаяЯчейка = ПолеТабличногоДокументаМакет.ТекущаяОбласть;
	
	Если Лев(ТекущаяЯчейка.имя,10) = "ВидОтчета_" Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрОбласть Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл
		
		ОблРаскрытия = ПолеТабличногоДокументаМакет.Области.Найти(СтрОбласть.ИмяОбласти);	
		Если ОблРаскрытия = Неопределено Тогда
			Продолжить;
		КонецЕсли;			
		Если ОблРаскрытия.Верх = 0 Тогда //Колонки	
			Если ОблРаскрытия.Лево <= ТекущаяЯчейка.Лево И ОблРаскрытия.Право>= ТекущаяЯчейка.Право Тогда
				ОбластиВхождения.Добавить(СтрОбласть.ИмяОбласти);		
			КонецЕсли;	
		КонецЕсли;		
		Если ОблРаскрытия.Лево = 0 Тогда //Строки	
			Если ОблРаскрытия.Верх <= ТекущаяЯчейка.Верх И ОблРаскрытия.Низ>= ТекущаяЯчейка.Низ Тогда
				ОбластиВхождения.Добавить(СтрОбласть.ИмяОбласти,);		
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСтруктуруПоказателяПоИмениЯчейкиБланк(ИмяЯчейки) Экспорт
	
	СтруктураПоказателя = Новый Структура;
	
	МаркерВО 			= СтрНайти(ИмяЯчейки,"ВидОтчета_");	
	МаркерПоказателя 	= СтрНайти(ИмяЯчейки,"_Показатель_");
	МаркерИндексаИмени  = СтрНайти(ИмяЯчейки,"_ИндексЯчейки");
	
	Если МаркерВО = 0 Тогда
		 Возврат Неопределено;
	КонецЕсли;	
	
	ВидОтчетаКод  = Сред(ИмяЯчейки,11,МаркерПоказателя-11);
	ПоказательКод = Сред(ИмяЯчейки,МаркерПоказателя+12,МаркерИндексаИмени-(МаркерПоказателя+12));
	ИндексЯчейки  = Сред(ИмяЯчейки,МаркерИндексаИмени+13,СтрДлина(ИмяЯчейки)-(МаркерИндексаИмени+12));

	СтруктураПоказателя.Вставить("ВидОтчетаКод",ВидОтчетаКод);
	СтруктураПоказателя.Вставить("ПоказательКод",ПоказательКод);
	СтруктураПоказателя.Вставить("ИндексЯчейки",ИндексЯчейки);
	
	Возврат СтруктураПоказателя;
	
	
КонецФункции	

Функция ВернутьОбластьРаскрытияТаблицы(ПолеТабличногоДокументаМакет,ОбъектАналитческогоБланка,ОбластьИмя)  Экспорт
	
	ТекущаяЯчейка                     		 = ПолеТабличногоДокументаМакет.Область(ОбластьИмя);
	
	ОбластиВхождения = Новый Массив;
	
	Для Каждого стрОблРаскрытия Из ОбъектАналитческогоБланка.КэшВыводимыхОбластей Цикл	
		ОблРаскрытия = ПолеТабличногоДокументаМакет.Область(стрОблРаскрытия.ИмяОбласти);
		
		Если ОблРаскрытия.Верх = 0 Тогда //Колонки	
			Если ОблРаскрытия.Лево <= ТекущаяЯчейка.Лево И ОблРаскрытия.Право>= ТекущаяЯчейка.Право Тогда
				ОбластиВхождения.Добавить(ОблРаскрытия);
			КонецЕсли;	
		КонецЕсли;
		
		Если ОблРаскрытия.Лево = 0 Тогда //Строки	
			Если ОблРаскрытия.Верх <= ТекущаяЯчейка.Верх И ОблРаскрытия.Низ>= ТекущаяЯчейка.Низ Тогда
				ОбластиВхождения.Добавить(ОблРаскрытия);		
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
	Возврат ОбластиВхождения;
		
КонецФункции

Процедура ЗаполнитьСписокТиповОтбора(СписокВыбораЗначение,СписокВыбораПредставление,ТекущиеДанные,ПериодЗаблокирован,Иерархический,ФиксированныйОтбор = Ложь) Экспорт
	
	СписокВыбораЗначение.Очистить();             
	СписокВыбораПредставление.Очистить();
	
	Если ТекущиеДанные.ПолеКод = "ПериодС" Тогда
		Если ПериодЗаблокирован Тогда
			СписокВыбораЗначение.Добавить("Период начала со сдвигом");
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Период начала со сдвигом'"));
			Возврат;
		Иначе	
			СписокВыбораЗначение.Добавить("Период начала отчета");
			СписокВыбораЗначение.Добавить("Период начала со сдвигом");
			СписокВыбораЗначение.Добавить("Период окончания отчета");
			СписокВыбораЗначение.Добавить("Период окончания со сдвигом");
			СписокВыбораЗначение.Добавить("Равно");	
			
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Период начала отчета'"));
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Период начала со сдвигом'"));
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Период окончания отчета'"));
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Период окончания со сдвигом'"));
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Равно'"));				
		КонецЕсли;		
		
	ИначеЕсли ТекущиеДанные.ПолеКод = "ПериодПо"	Тогда
		
		СписокВыбораЗначение.Добавить("Период начала отчета");
		СписокВыбораЗначение.Добавить("Период начала со сдвигом");
		СписокВыбораЗначение.Добавить("Период окончания отчета");
		СписокВыбораЗначение.Добавить("Период окончания со сдвигом");
		СписокВыбораЗначение.Добавить("Равно");
		
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Период начала отчета'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Период начала со сдвигом'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Период окончания отчета'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Период окончания со сдвигом'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Равно'"));
		
	ИначеЕсли ТекущиеДанные.ПолеКод = "Сценарий"	Тогда
		
		СписокВыбораЗначение.Добавить("Сценарий отчета");
		СписокВыбораЗначение.Добавить("Равно");
		СписокВыбораЗначение.Добавить("Не равно");
		
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Сценарий отчета'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Равно'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не равно'"));

		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе");  
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе'"));
		КонецЕсли;
		
		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе из списка"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе из списка'"))
		КонецЕсли;
		
		СписокВыбораЗначение.Добавить("В списке");
		СписокВыбораЗначение.Добавить("Не в списке");
		СписокВыбораПредставление.Добавить(Нстр("ru = 'В списке'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не в списке'"));
	
		Если  НЕ ФиксированныйОтбор Тогда 
			СписокВыбораЗначение.Добавить("Отбор не производится"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Отбор не производится'"));
		КонецЕсли;	
			
	ИначеЕсли ТекущиеДанные.ПолеКод = "Организация" Тогда	
		
		СписокВыбораЗначение.Добавить("Организация отчета");
		СписокВыбораЗначение.Добавить("Равно");
		СписокВыбораЗначение.Добавить("Не равно");
		
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Организация отчета'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Равно'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не равно'"));

		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе");  
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе'"));
		КонецЕсли;
		
		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе из списка"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе из списка'"))
		КонецЕсли;

		СписокВыбораЗначение.Добавить("В списке");
		СписокВыбораЗначение.Добавить("Не в списке");
		СписокВыбораПредставление.Добавить(Нстр("ru = 'В списке'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не в списке'"));
	
		Если  НЕ ФиксированныйОтбор Тогда 
			СписокВыбораЗначение.Добавить("Отбор не производится"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Отбор не производится'"));
		КонецЕсли;	

		
	ИначеЕсли ТекущиеДанные.ПолеКод = "Проект"	Тогда
		
		СписокВыбораЗначение.Добавить("Проект отчета");	
		СписокВыбораЗначение.Добавить("Равно");
		СписокВыбораЗначение.Добавить("Не равно");
		
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Проект отчета'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Равно'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не равно'"));

		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе");  
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе'"));
		КонецЕсли;
		
		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе из списка"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе из списка'"));
		КонецЕсли;

		СписокВыбораЗначение.Добавить("В списке");
		СписокВыбораЗначение.Добавить("Не в списке");
		СписокВыбораПредставление.Добавить(Нстр("ru = 'В списке'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не в списке'"));
	
		Если  НЕ ФиксированныйОтбор Тогда 
			СписокВыбораЗначение.Добавить("Отбор не производится"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Отбор не производится'"));
		КонецЕсли;	

	Иначе	//Отбор по дополнительным аналитикам показателей
		
		СписокВыбораЗначение.Добавить("Равно");
		СписокВыбораЗначение.Добавить("Не равно");
		
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Равно'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не равно'"));

		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе");  
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе'"));
		КонецЕсли;

		Если  Иерархический Тогда 
			СписокВыбораЗначение.Добавить("В группе из списка"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'В группе из списка'"));
		КонецЕсли;

		СписокВыбораЗначение.Добавить("В списке");
		СписокВыбораЗначение.Добавить("Не в списке");
		СписокВыбораПредставление.Добавить(Нстр("ru = 'В списке'"));
		СписокВыбораПредставление.Добавить(Нстр("ru = 'Не в списке'"));
		
		Если  НЕ ФиксированныйОтбор Тогда 
			СписокВыбораЗначение.Добавить("Отбор не производится"); 
			СписокВыбораПредставление.Добавить(Нстр("ru = 'Отбор не производится'"));
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыОтбораОтборПриИзменении(Элемент,Элементы) Экспорт
	
	Элементы.ПараметрыОтбораЗначениеОтбора.ТолькоПросмотр = Ложь;
	
	ПредставлениеОтбора = Элемент.ТекстРедактирования;                                   
	
	ЗначениеОтбора = Элементы.ПараметрыОтбораОтбор.СписокВыбора.Получить(Элемент.СписокВыбора.Индекс(Элемент.СписокВыбора.НайтиПоЗначению(Элемент.ТекстРедактирования)));
	
	Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = ЗначениеОтбора;
	
	ТекущийОтбор  = Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора;
	
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Равно" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Не равно" Тогда	
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	

		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов(ТипЗначенияМассив);
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа 	= Новый ОписаниеТипов(ТипЗначенияМассив);	
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Элементы;
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		КонецЕсли;
		
		Если ТипЗнч(ТекущийОтбор) = Тип("СписокЗначений") И ТекущийОтбор.Количество()>0 Тогда 
			ПервыйЭлементСписка = ТекущийОтбор[0].Значение;
			Если ТекущееЗначениеСодержитТип(ПервыйЭлементСписка,Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока)  Тогда
				Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора =  ПервыйЭлементСписка;
			КонецЕсли;	
		ИначеЕсли ЗначениеЗаполнено(ТекущийОтбор) И ТекущееЗначениеСодержитТип(ТекущийОтбор,Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока) Тогда
			Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора =  ТекущийОтбор;
		Иначе	
			Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора = Неопределено;
		КонецЕсли;	 	
	КонецЕсли;
	
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Параметр отчета" Тогда	
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов("Строка");
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа 	= Новый ОписаниеТипов(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока);	
	КонецЕсли;
		
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "В списке" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Не в списке" Тогда	
		
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов("СписокЗначений");
		Элементы.ПараметрыОтбора.ТекущиеДанные["ЗначениеОтбора"] 		= Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа.ПривестиЗначение();	
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Элементы;
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	
				
		Элементы.ПараметрыОтбора.ТекущиеДанные["ЗначениеОтбора"].ТипЗначения	=	Новый ОписаниеТипов(ТипЗначенияМассив);	
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		 КонецЕсли;		
		 
		 Если ТипЗнч(ТекущийОтбор) = Тип("СписокЗначений") Тогда
			 Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора.ЗагрузитьЗначения(ТекущийОтбор.ВыгрузитьЗначения());
		 ИначеЕсли ЗначениеЗаполнено(ТекущийОтбор) И ТекущееЗначениеСодержитТип(ТекущийОтбор,Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока)  Тогда
			 Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора.Очистить();	 
			 Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора.Добавить(ТекущийОтбор);
		 Иначе	
			 Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора.Очистить(); 
		 КонецЕсли;	 
			 
	 КонецЕсли;
		
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "В группе из списка" Тогда	
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов("СписокЗначений");
		Элементы.ПараметрыОтбора.ТекущиеДанные["ЗначениеОтбора"] 		= Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа.ПривестиЗначение();	
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Группы;
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	
		
		Элементы.ПараметрыОтбора.ТекущиеДанные["ЗначениеОтбора"].ТипЗначения	=	Новый ОписаниеТипов(ТипЗначенияМассив);	
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		 КонецЕсли;
	КонецЕсли;

	
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Равно" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Не равно" Тогда	
		Элементы.ПараметрыОтбораЗначениеОтбора.ТолькоПросмотр = Ложь;
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
			Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		КонецЕсли;	
	КонецЕсли;
	
	Если  Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Отбор не производится" Тогда	
		Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора = Неопределено; 
		Элементы.ПараметрыОтбораЗначениеОтбора.ТолькоПросмотр = Истина; 
	КонецЕсли;
	
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "В группе"  Тогда	
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	
		
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов(ТипЗначенияМассив);
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа 	= Новый ОписаниеТипов(ТипЗначенияМассив);	
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Группы;
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		 КонецЕсли;				 	 
	КонецЕсли;
	
	Если  Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период начала отчета" 
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период окончания отчета" 
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Сценарий отчета"
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Организация отчета"
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Проект отчета" Тогда	
		Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора = Неопределено; 
		Элементы.ПараметрыОтбораЗначениеОтбора.ТолькоПросмотр = Истина; 
	КонецЕсли;
	
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период начала со сдвигом" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период окончания со сдвигом"  Тогда	
		Элементы.ПараметрыОтбораЗначениеОтбора.ТолькоПросмотр 		= Ложь;
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 		= Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0));
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0));;
		
		Если ЗначениеЗаполнено(ТекущийОтбор) И ТипЗнч(ТекущийОтбор) = Тип("Число") Тогда
			Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора = ТекущийОтбор;
		Иначе	
			Элементы.ПараметрыОтбора.ТекущиеДанные.ЗначениеОтбора = Неопределено;
        КонецЕсли;	
	КонецЕсли;

	
КонецПроцедуры

Процедура ПараметрыОтбораВыбор(Элементы,Элемент,СтандартнаяОбработка) Экспорт
	
	Если НЕ Элемент.ТекущийЭлемент.Имя  = "ПараметрыОтбораЗначениеОтбора" Тогда
		 Возврат;
	КонецЕсли;	
	
	Если Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "В списке" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Не в списке" Тогда		
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов("СписокЗначений");
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	
	
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Элементы;
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		 КонецЕсли;
	ИначеЕсли Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "В группе из списка" Тогда  	
		
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов("СписокЗначений");
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Группы;
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	
	
		Элементы.ПараметрыОтбора.ТекущиеДанные["ЗначениеОтбора"].ТипЗначения=Новый ОписаниеТипов(ТипЗначенияМассив);
		
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		КонецЕсли;

	ИначеЕсли Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период начала отчета" 
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период окончания отчета" 
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор ="Сценарий отчета"
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор ="Организация отчета"
		ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор ="Проект отчета" Тогда	
				
		СтандартнаяОбработка = ЛОЖЬ;
		Возврат;	
				
	ИначеЕсли  Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период начала со сдвигом" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Период окончания со сдвигом"  Тогда	
	
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 		= Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0));
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(3,0));;
			
	ИначеЕсли Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Равно" ИЛИ Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Не равно" Тогда	
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	
		
		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов(ТипЗначенияМассив);
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа 	= Новый ОписаниеТипов(ТипЗначенияМассив);		
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Элементы;
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		КонецЕсли;
		
	ИначеЕсли Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "В группе"  Тогда	
		
		ТипЗначенийСтрока = СтрРазделить(Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока,"|");
		ТипЗначенияМассив = Новый Массив;
		Для Каждого эл Из ТипЗначенийСтрока Цикл
			ТипЗначенияМассив.Добавить(Тип(эл));
		КонецЦикла;	

		Элементы.ПараметрыОтбораЗначениеОтбора.ОграничениеТипа 			= Новый ОписаниеТипов(ТипЗначенияМассив);
		Элементы.ПараметрыОтбораЗначениеДляПроверки.ОграничениеТипа 	= Новый ОписаниеТипов(ТипЗначенияМассив);	
		Элементы.ПараметрыОтбораЗначениеОтбора.ВыборГруппИЭлементов     = ГруппыИЭлементы.Группы;	
		Если Элементы.ПараметрыОтбора.ТекущиеДанные.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" Тогда			 
			    НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", Элементы.ПараметрыОтбора.ТекущиеДанные.ПолеСсылка);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НовыйПараметр);				
				НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
				Элементы.ПараметрыОтбораЗначениеОтбора.ПараметрыВыбора=НовыеПараметры;		 
		 КонецЕсли;

	ИначеЕсли Элементы.ПараметрыОтбора.ТекущиеДанные.Отбор = "Отбор не производится" Тогда 
		
		СтандартнаяОбработка = ЛОЖЬ;
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьЗаблокированныеЯчейки(ВидОтчета,тОбъектАБ,СтруктураРасшифровки) Экспорт
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить("ТекстОповещения", Нстр("ru = 'Показатель заблокирован'"));
	СтруктураОтвета.Вставить("Пояснение","");
    СтруктураОтвета.Вставить("Заблокирован",Ложь);
	
	Если тОбъектАБ.ЗаблокированныеПоказатели.НайтиСтроки(Новый Структура("ПоказательОтчета",СтруктураРасшифровки.ПоказательСсылка)).Количество()>0 Тогда		
		ПричинаБлокировки = Нстр("ru =' используется в формуле расчета и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
        СтруктураОтвета.Вставить("Заблокирован",Истина);	
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
		Если тОбъектАБ.ЗаблокированныеПериоды.НайтиСтроки(Новый Структура("ПериодОтчета",СтруктураРасшифровки.ПериодОтчета)).Количество()>0 Тогда		
			ПричинаБлокировки = Нстр("ru =' заблокирован и недоступен для редактирования'");
			СтруктураОтвета.Вставить("Пояснение","Период "+СтруктураРасшифровки.ПериодОтчета+ПричинаБлокировки);
			СтруктураОтвета.Вставить("Заблокирован",Истина);	
		КонецЕсли;		
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("Сценарий") И  СтруктураРасшифровки.Сценарий <> тОбъектАБ.Сценарий Тогда
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("Организация") И  СтруктураРасшифровки.Организация <> тОбъектАБ.Организация Тогда 
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;	
	
	Если СтруктураРасшифровки.Свойство("Проект") И  СтруктураРасшифровки.Проект <> тОбъектАБ.Проект Тогда 
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;		
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета") И  ТипЗнч(тОбъектАБ.ВложенныеПериоды) <> Тип("Массив") И тОбъектАБ.ВложенныеПериоды.НайтиСтроки(Новый Структура("ПериодОтчета",СтруктураРасшифровки.ПериодОтчета)).Количество()=0 Тогда 
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ПериодОтчета")  И  ТипЗнч(тОбъектАБ.ВложенныеПериоды) = Тип("Массив") И тОбъектАБ.ВложенныеПериоды.Найти(СтруктураРасшифровки.ПериодОтчета)=НЕОПРЕДЕЛЕНО Тогда 
		ПричинаБлокировки = Нстр("ru =' принадлежит другому ключевому срезу и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
		СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ВидОтчетаКод") И СтруктураРасшифровки.ВидОтчетаКод <> ВидОтчета  Тогда		
		ПричинаБлокировки = Нстр("ru =' принадлежит другому виду отчета и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
        СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;
	
	Если СтруктураРасшифровки.Свойство("ВидОтчета") И СтруктураРасшифровки.ВидОтчета <> ВидОтчета  Тогда		
		ПричинаБлокировки = Нстр("ru =' принадлежит другому виду отчета и недоступен для редактирования'");
		СтруктураОтвета.Вставить("Пояснение","Показатель "+СтруктураРасшифровки.ПоказательСсылка+ПричинаБлокировки);
        СтруктураОтвета.Вставить("Заблокирован",Истина);
	КонецЕсли;
		
	Возврат СтруктураОтвета;
	
	
КонецФункции	

Функция ТекущееЗначениеСодержитТип(ТекущийОтбор,ТипЗначенияСтрока) 
	
	ТипЗначенийСтрока_ = СтрРазделить(ТипЗначенияСтрока,"|");
	Для Каждого эл Из ТипЗначенийСтрока_ Цикл	
		Если ТипЗнч(ТекущийОтбор) = Тип(эл) Тогда
			 Возврат Истина;
		КонецЕсли;	 	
	КонецЦикла;	
	
	Возврат Ложь;
	
КонецФункции	

Функция ПолучитьЗначениеОбластиТабличногоДокумента(ОбластьТабличногоДокумента) Экспорт
	
	Если Найти(ОбластьТабличногоДокумента.Имя, "R") <> 0 И Найти(ОбластьТабличногоДокумента.Имя, "C") <> 0 тогда
		Если ОбластьТабличногоДокумента.СодержитЗначение тогда
			Возврат ОбластьТабличногоДокумента.Значение;
		Иначе
			Возврат ОбластьТабличногоДокумента.Текст;
		КонецЕсли;
	Иначе
		Возврат ОбластьТабличногоДокумента.Текст;
	КонецЕсли;
	
КонецФункции

Процедура ВставитьЗначениеВОбласть(СтруктураРасшифровки,ТекущееЗначениеПоказателяЧисло,ЗначениеОбласти,ЛогИзмененныхПоказателей,ОписаниеИзменений) Экспорт
	
	Если ЛогИзмененныхПоказателей.Количество() = 0 Тогда
		НомерТранзакции = 1;
	Иначе	
		НомерТранзакции = ЛогИзмененныхПоказателей[ЛогИзмененныхПоказателей.Количество()-1].НомерТранзакции+1;
	КонецЕсли;	
		
	нСтрЛога 								=  ЛогИзмененныхПоказателей.Добавить();
	нСтрЛога.НомерТранзакции    			=  НомерТранзакции;
	нСтрЛога.ПредставлениеТранзакции        =  "Редактирование показателя "+СтруктураРасшифровки.ПоказательСсылка;
	нСтрЛога.Значение                       =  ЗначениеОбласти-ТекущееЗначениеПоказателяЧисло;
	ЗаполнитьЗначенияСвойств(нСтрЛога,СтруктураРасшифровки);
	
КонецПроцедуры	


#Область РаботаСКомандамиПанелиМакетов

// Скрывает в макете строки, содержащие области со значеними,
// если такие области не содержат значений в пределах строки.
//
Процедура УправлениеВидимостьюПустыхСтрок(ЭтаФорма) Экспорт
			
	Элементы = ЭтаФорма.Элементы;
	Макет    = ЭтаФорма[ЭтаФорма.ТекущийМакет];
	
	ИндексПервойСтроки = 0;
	ИндексПервойКолонки = 0;
	ПолучитьПервуюЯчейкуСПоказателем(Макет,ИндексПервойСтроки,ИндексПервойКолонки);

	//Нет показателей - нечего сворачивать
	Если ИндексПервойСтроки =0 Тогда
		Возврат;
	КонецЕсли;	
	
	Если Элементы.ФормаНепустыеСтроки.Пометка Тогда
		
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;
				
		Для НомСтр = ИндексПервойСтроки по Макет.ВысотаТаблицы Цикл
			
			ФлСодержитНеПустоеЗначение = Ложь;

			Для НомКол = ИндексПервойКолонки по Макет.ШиринаТаблицы Цикл
				
				ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
				
				//Если есть значение - колонка не скрывается
				Если ТекОбласть.СодержитЗначение И
					ЗначениеЗаполнено(ТекОбласть.Значение) Тогда
					ФлСодержитНеПустоеЗначение = Истина;
					Прервать;
				КонецЕсли;	
				
			КонецЦикла;
			
			Если НЕ ФлСодержитНеПустоеЗначение Тогда
				Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Ложь;
			КонецЕсли;	
			
		КонецЦикла;
		
	Иначе
		Для НомСтр = 1 По Макет.ВысотаТаблицы Цикл
			Макет.Область(НомСтр, 0, НомСтр, 0).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает в макете колонки, содержащие области со значеними,
// если такие области не содержат значений в пределах колонки.
//
Процедура УправлениеВидимостьюПустыхКолонок(ЭтаФорма) Экспорт
			
	Элементы = ЭтаФорма.Элементы;
	Макет    = ЭтаФорма[ЭтаФорма.ТекущийМакет];
		
	ИндексПервойСтроки = 0;
	ИндексПервойКолонки = 0;
	ПолучитьПервуюЯчейкуСПоказателем(Макет,ИндексПервойСтроки,ИндексПервойКолонки);

	//Нет показателей - нечего сворачивать
	Если ИндексПервойСтроки =0 Тогда
		Возврат;
	КонецЕсли;	
		
	Если Элементы.ФормаНепустыеКолонки.Пометка Тогда
		
		СписокНеЗаполненных = Новый СписокЗначений;
		СписокЗаполненных = Новый СписокЗначений;		
		Для НомКол = ИндексПервойКолонки по Макет.ШиринаТаблицы Цикл
			
			ФлСодержитНеПустоеЗначение = Ложь;
			
			Для НомСтр = ИндексПервойСтроки по Макет.ВысотаТаблицы Цикл
						
				ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
	
				//Если есть значение - колонка не скрывается
				Если ТекОбласть.СодержитЗначение И
					ЗначениеЗаполнено(ТекОбласть.Значение) Тогда
					ФлСодержитНеПустоеЗначение = Истина;
					Прервать;
				КонецЕсли;	
								
			КонецЦикла;
			
			Если НЕ ФлСодержитНеПустоеЗначение Тогда
				Макет.Область(0, НомКол, 0, НомКол).Видимость = Ложь;
			КонецЕсли;		
		КонецЦикла;
				
	Иначе
		Для НомКол = 1 По Макет.ШиринаТаблицы Цикл
			Макет.Область(0, НомКол, 0, НомКол).Видимость = Истина;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

Процедура ПолучитьПервуюЯчейкуСПоказателем(Макет,ИндексПервойСтроки,ИндексПервойКолонки)
		
	Для НомСтр = 1 по Макет.ВысотаТаблицы Цикл
		Для НомКол = 1 по Макет.ШиринаТаблицы Цикл
			ТекОбласть = Макет.Область(НомСтр, НомКол, НомСтр, НомКол);
			Если ТипЗнч(ТекОбласть.Расшифровка) = Тип("Структура") тогда
				Если ТекОбласть.Расшифровка.Свойство("Ссылка") тогда
					ИндексПервойСтроки  = НомСтр;
					ИндексПервойКолонки = НомКол;
					Возврат;
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры	

Процедура ВосстановитьСверткуСтрокКолонок(ЭтаФорма) Экспорт
	
	Элементы = ЭтаФорма.Элементы;
	
	Если Элементы.ФормаНепустыеСтроки.Пометка тогда
		УправлениеВидимостьюПустыхСтрок(ЭтаФорма);
	КонецЕсли;
	
	Если Элементы.ФормаНепустыеКолонки.Пометка тогда
		УправлениеВидимостьюПустыхКолонок(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область РаботаСПанельюДополнительныхОтборов

Процедура НастройкиОтборовПриИзменении(ЭтаФорма,ВидСравненияКэш,Элемент) Экспорт
	
	Если Не  Элемент.ТекущийЭлемент.Имя = "НастройкиОтборовИспользовать" Тогда
		Элемент.ТекущиеДанные.Использовать = Истина;
	КонецЕсли;
	
	
	МассивВидовСравненийБольшеМеньше = Новый Массив();
	МассивВидовСравненийБольшеМеньше.Добавить(ВидСравненияКомпоновкиДанных.Больше);
	МассивВидовСравненийБольшеМеньше.Добавить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	МассивВидовСравненийБольшеМеньше.Добавить(ВидСравненияКомпоновкиДанных.Меньше);
	МассивВидовСравненийБольшеМеньше.Добавить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
	
	МассивВидовСравненийСодержит = Новый Массив();
	МассивВидовСравненийСодержит.Добавить(ВидСравненияКомпоновкиДанных.Содержит);
	МассивВидовСравненийСодержит.Добавить(ВидСравненияКомпоновкиДанных.НеСодержит);
	МассивВидовСравненийСодержит.Добавить(ВидСравненияКомпоновкиДанных.НачинаетсяС);
	МассивВидовСравненийСодержит.Добавить(ВидСравненияКомпоновкиДанных.НеНачинаетсяС);
	МассивВидовСравненийСодержит.Добавить(ВидСравненияКомпоновкиДанных.Подобно);
	МассивВидовСравненийСодержит.Добавить(ВидСравненияКомпоновкиДанных.НеПодобно);
	
	Если Элемент.ТекущийЭлемент.Имя = "НастройкиОтборовВидСравнения" Тогда
		
		Если НЕ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКэш Тогда
			
			Если Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.Равно 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.НеРавно Тогда
				//Ничего не делаем			
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.НеРавно 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.Равно Тогда
				//Ничего не делаем
            ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.ВСписке 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				//Ничего не делаем
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.НеВСписке 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.ВСписке Тогда	
				//Ничего не делаем
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				//Ничего не делаем
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда	
				//Ничего не делаем
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.ВИерархии 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
				//Ничего не делаем
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.НеВИерархии 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.ВИерархии Тогда
				//Ничего не делаем	
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.Заполнено 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				//Ничего не делаем
			ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения =  ВидСравненияКомпоновкиДанных.НеЗаполнено 
				И ВидСравненияКэш =  ВидСравненияКомпоновкиДанных.Заполнено Тогда
				//Ничего не делаем	
			ИначеЕсли МассивВидовСравненийБольшеМеньше.Найти(Элемент.ТекущиеДанные.ВидСравнения) <> Неопределено
				И МассивВидовСравненийБольшеМеньше.Найти(ВидСравненияКэш) <> Неопределено Тогда
				//Ничего не делаем	
			ИначеЕсли МассивВидовСравненийСодержит.Найти(Элемент.ТекущиеДанные.ВидСравнения) <> Неопределено
				И МассивВидовСравненийСодержит.Найти(ВидСравненияКэш) <> Неопределено Тогда
				//Ничего не делаем	
			Иначе		
				ОбновитьТипВыбранногоЗначения(ЭтаФорма,Элемент, Истина);					
			КонецЕсли;	
					
		КонецЕсли;
		
		ВидСравненияКэш = Элемент.ТекущиеДанные.ВидСравнения;
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьТипВыбранногоЗначения(ЭтаФорма,Элемент, ОчищатьЗначениеОтбора = Ложь) Экспорт
	
	Поле = ЭтаФорма.Элементы["НастройкиОтборовЗначениеОтбора"];
	Поле.ТолькоПросмотр = Ложь;
		
	Если Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		
		Поле.ДоступныеТипы 											=  Элемент.ТекущиеДанные.ТипЗначения;
		Поле.ОграничениеТипа   										=  Элемент.ТекущиеДанные.ТипЗначения;
		Поле.ВыборГруппИЭлементов     								=  ГруппыИЭлементы.Элементы;
		
		Если Элемент.ТекущиеДанные.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда			 
			
			ОписаниеПоля = ЭтаФорма.НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",Элемент.ТекущиеДанные.ПолеКод))[0].Поле; 
			
			НовыйПараметр 					= Новый ПараметрВыбора("Отбор.Владелец", ОписаниеПоля);
			НовыйМассив 					= Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры 					= Новый ФиксированныйМассив(НовыйМассив);
			Поле.ПараметрыВыбора			= НовыеПараметры;		 
		Иначе	
			Поле.ПараметрыВыбора			= Новый ФиксированныйМассив(Новый Массив());		 
		КонецЕсли;
		
		Если ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора) = Тип("СписокЗначений") И Элемент.ТекущиеДанные.ЗначениеОтбора.Количество()>0 Тогда 
			ПервыйЭлементСписка = Элемент.ТекущиеДанные.ЗначениеОтбора[0].Значение;
			Элемент.ТекущиеДанные.ЗначениеОтбора =  ПервыйЭлементСписка;
		ИначеЕсли ОчищатьЗначениеОтбора И НЕ Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора)) тогда
			Элемент.ТекущиеДанные.ЗначениеОтбора = Поле.ОграничениеТипа.ПривестиЗначение();	
		КонецЕсли;	 
		
	ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
				
		Поле.ОграничениеТипа 										= Новый ОписаниеТипов("СписокЗначений");
			
		//Если ОчищатьЗначениеОтбора И НЕ Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора)) тогда
			Элемент.ТекущиеДанные["ЗначениеОтбора"] 				= Поле.ОграничениеТипа.ПривестиЗначение();
		//КонецЕсли;
				
		Элемент.ТекущиеДанные["ЗначениеОтбора"].ТипЗначения			= Новый ОписаниеТипов(Элемент.ТекущиеДанные.ТипЗначения);	
		Поле.ВыборГруппИЭлементов     								= ГруппыИЭлементы.Элементы;
		
		Если Элемент.ТекущиеДанные.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда			 
			
			ОписаниеПоля = ЭтаФорма.НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",Элемент.ТекущиеДанные.ПолеКод))[0].Поле; 
			
			НовыйПараметр 					= Новый ПараметрВыбора("Отбор.Владелец", ОписаниеПоля);
			НовыйМассив 					= Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры 					= Новый ФиксированныйМассив(НовыйМассив);
			Поле.ПараметрыВыбора			=	НовыеПараметры;		 
		Иначе	
			Поле.ПараметрыВыбора			= Новый ФиксированныйМассив(Новый Массив());		 
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
		ИЛИ  Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии  Тогда
		
		Поле.ОграничениеТипа 										= Новый ОписаниеТипов("СписокЗначений");
				
		Если ОчищатьЗначениеОтбора И НЕ Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора)) тогда
			Элемент.ТекущиеДанные["ЗначениеОтбора"] 				= Поле.ОграничениеТипа.ПривестиЗначение();
		КонецЕсли;
				
		Поле.ВыборГруппИЭлементов     								= ГруппыИЭлементы.ГруппыИЭлементы;
		
		Элемент.ТекущиеДанные["ЗначениеОтбора"] 					= Поле.ОграничениеТипа.ПривестиЗначение();

		Элемент.ТекущиеДанные["ЗначениеОтбора"].ТипЗначения	=	Новый ОписаниеТипов(Элемент.ТекущиеДанные.ТипЗначения);	
		
		Если Элемент.ТекущиеДанные.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда			 
			
			ОписаниеПоля = ЭтаФорма.НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",Элемент.ТекущиеДанные.ПолеКод))[0].Поле; 
			
			НовыйПараметр 					= Новый ПараметрВыбора("Отбор.Владелец", ОписаниеПоля);
			НовыйМассив 					= Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры 					= Новый ФиксированныйМассив(НовыйМассив);
			Поле.ПараметрыВыбора			= НовыеПараметры;		 
		Иначе	
			Поле.ПараметрыВыбора			= Новый ФиксированныйМассив(Новый Массив());		 
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда	
		
		Поле.ДоступныеТипы 											= Элемент.ТекущиеДанные.ТипЗначения;
		Поле.ОграничениеТипа   										= Элемент.ТекущиеДанные.ТипЗначения;
		Поле.ВыборГруппИЭлементов     								= ГруппыИЭлементы.Группы;
		
		Если ОчищатьЗначениеОтбора И НЕ Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора)) тогда
			Элемент.ТекущиеДанные.ЗначениеОтбора = Поле.ОграничениеТипа.ПривестиЗначение();  
		КонецЕсли;
				
		Если Элемент.ТекущиеДанные.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда			 
			
			ОписаниеПоля = ЭтаФорма.НастройкиПолейСводнойТаблицы.НайтиСтроки(Новый Структура("КодПоля",Элемент.ТекущиеДанные.ПолеКод))[0].Поле; 
			
			НовыйПараметр 					= Новый ПараметрВыбора("Отбор.Владелец", ОписаниеПоля);
			НовыйМассив 					= Новый Массив();
			НовыйМассив.Добавить(НовыйПараметр);				
			НовыеПараметры 					= Новый ФиксированныйМассив(НовыйМассив);
			Поле.ПараметрыВыбора			= НовыеПараметры;		 
		Иначе	
			Поле.ПараметрыВыбора			= Новый ФиксированныйМассив(Новый Массив());		 
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
		
		ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
		
		Поле.ДоступныеТипы = ОписаниеТиповБулево;
		Поле.ОграничениеТипа = ОписаниеТиповБулево;
		Поле.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
		Поле.ТолькоПросмотр = Истина;
		
		Элемент.ТекущиеДанные.ЗначениеОтбора = Неопределено;
			
	ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		
		Поле.ДоступныеТипы 			= Элемент.ТекущиеДанные.ТипЗначения;
		Поле.ОграничениеТипа   		= Элемент.ТекущиеДанные.ТипЗначения;
		Поле.ВыборГруппИЭлементов   = ГруппыИЭлементы.Элементы;	
		Поле.ПараметрыВыбора		= Новый ФиксированныйМассив(Новый Массив());		 
				
		Если ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора) = Тип("СписокЗначений") И Элемент.ТекущиеДанные.ЗначениеОтбора.Количество()>0 Тогда 
			ПервыйЭлементСписка = Элемент.ТекущиеДанные.ЗначениеОтбора[0].Значение;
			Элемент.ТекущиеДанные.ЗначениеОтбора = ПервыйЭлементСписка;
		ИначеЕсли ОчищатьЗначениеОтбора И НЕ Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора)) тогда
			Элемент.ТекущиеДанные.ЗначениеОтбора = Поле.ОграничениеТипа.ПривестиЗначение();	
		КонецЕсли;
			
	ИначеЕсли Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НачинаетсяС
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеНачинаетсяС
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.Подобно
		ИЛИ Элемент.ТекущиеДанные.ВидСравнения = ВидСравненияКомпоновкиДанных.НеПодобно Тогда
		
		ОписаниеТиповСтрока = Новый ОписаниеТипов("Строка");
		
		Поле.ДоступныеТипы = ОписаниеТиповСтрока;
		Поле.ОграничениеТипа = ОписаниеТиповСтрока;
		Поле.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив());
				
		Если ОчищатьЗначениеОтбора И НЕ Элемент.ТекущиеДанные.ТипЗначения.СодержитТип(ТипЗнч(Элемент.ТекущиеДанные.ЗначениеОтбора)) тогда
			Элемент.ТекущиеДанные.ЗначениеОтбора = "";  
		КонецЕсли;	
					
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область РаботаСРасшифровокойТабличногоДокумента

Процедура ЗаполнитьЗначенияРасшифровкиПоТекущемуКонтексту(ЭтаФорма,Область,СтруктураРасшифровки) Экспорт
	
	тМакет 					= ЭтаФорма[ЭтаФорма.ТекущийМакет];

	//Строки
	ОбластьРасшифровкиСтроки  =  тМакет.Область(Область.Верх,1,Область.Низ,1);
	Если  ТипЗнч(ОбластьРасшифровкиСтроки.Расшифровка) = Тип("Структура") Тогда
		Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
			Если НЕ рСтроки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;		
	//Колонки
	ОбластьРасшифровкиКолонки =  тМакет.Область(1,Область.Лево,1,Область.Право);
	Если  ТипЗнч(ОбластьРасшифровкиКолонки.Расшифровка) = Тип("Структура") Тогда
		Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
			Если НЕ рКолонки.Значение = Неопределено Тогда
				СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;			
	
	
КонецПроцедуры	

Процедура ОбработатьРасшифровкуОперанда(ЭтаФорма,ТекущаяОбластьРасшифровка,СтруктураПараметровДляВызоваРасшифровки) Экспорт
	
	ТекстОбласти 								= ТекущаяОбластьРасшифровка.Текст;
		
	Если СтруктураПараметровДляВызоваРасшифровки = Неопределено  Тогда	
		ПоказатьОповещениеПользователя(Нстр("ru = 'Нет данных для расшифровки'"),, Нстр("ru = 'Нет данных для расшифровки'"), БиблиотекаКартинок.Внимание16);
		Возврат;
	КонецЕсли;
		
	//Операнд по правилу расчета
	Если СтруктураПараметровДляВызоваРасшифровки.Свойство("АдресХранилищаПеременныхДляРасчета") Тогда
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ВсегдаПоказыватьБланкРасшифровки",Истина);
		Если НЕ СтруктураПараметровДляВызоваРасшифровки = Неопределено  Тогда
			ОткрытьФорму("Обработка.РасшифровкаРассчитанныхЗначений.Форма", 
			СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		КонецЕсли;	
		//Показатель другого ключевого среза	
	ИначеЕсли	СтруктураПараметровДляВызоваРасшифровки.Свойство("ПоказательСсылка") Тогда 		
		
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ЭтоФормула",Ложь);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРасшифровкиПоказателя", 
		СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
		//Формула бланка	
	ИначеЕсли	СтруктураПараметровДляВызоваРасшифровки.Свойство("ЭтоФормула") Тогда 	
		
		СтруктураПараметровДляВызоваРасшифровки.Вставить("ЭтоФормула",Истина);
		ОткрытьФорму("Обработка.АналитическийБланк.Форма.ФормаРасшифровкиПоказателя", 
		СтруктураПараметровДляВызоваРасшифровки,ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		
		//нет расшифровки	
	Иначе	
		
		ПоказатьОповещениеПользователя(Нстр("ru = 'Нет данных для расшифровки'"),, Нстр("ru = 'Нет данных для расшифровки'"), БиблиотекаКартинок.Внимание16);
		
	КонецЕсли;	

	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКомандамиТабличногоДокумента

Процедура ПолеТабличногоДокументаМакетОбработкаРасшифровки(ЭтаФорма,Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)Экспорт
	
	СтандартнаяОбработка = Ложь;
	тОбласть = Истина;
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
		И ТипЗнч(Элемент.ТекущаяОбласть.Объект) = Тип("Диаграмма") Тогда	
		Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ИмяОбласти") Тогда
			
			ЭтаФорма.тИмяСвязаннойОбластиДиаграммы = Расшифровка.ИмяОбласти;		
			
			Если Расшифровка.Свойство("Ссылка") Тогда
				
				ЭтаФорма.ОтобразитьРаскрытиеДиаграмма();
	
			ИначеЕсли 	Расшифровка.Свойство("УидФормулы") Тогда 
				
				ЭтаФорма.РасшифроватьПоказательДиаграмма();		
					
			КонецЕсли;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПолеТабличногоДокументаМакетОбработкаДополнительнойРасшифровки(ЭтаФорма,Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Элемент.ТекущаяОбласть) = Тип("РисунокТабличногоДокумента")
		И ТипЗнч(Элемент.ТекущаяОбласть.Объект) = Тип("Диаграмма") Тогда	
		СгенерироватьКонтекстноеМеню(ЭтаФорма,Элемент,"Диаграмма");
		Если ТипЗнч(Расшифровка) = Тип("Структура") И Расшифровка.Свойство("ИмяОбласти") Тогда
			тИмяСвязаннойОбластиДиаграммы = Расшифровка.ИмяОбласти;		
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент.ТекущаяОбласть) = Тип("ОбластьЯчеекТабличногоДокумента")
		И ТипЗнч(Элемент.ТекущаяОбласть.Расшифровка) = Тип("Структура") Тогда	
		СгенерироватьКонтекстноеМеню(ЭтаФорма,Элемент,"ОбластьЯчеекЧтение");
	Иначе	
		СгенерироватьКонтекстноеМеню(ЭтаФорма,Элемент);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура СгенерироватьКонтекстноеМеню(ЭтаФорма,Элемент,Режим = Неопределено) Экспорт
	
	ОповещениеКонтекстноеМеню = Новый ОписаниеОповещения("ВыборДействияИзКонтекстногоМенюБланк", ЭтаФорма);

	СписокКоманд = Новый СписокЗначений;
	
	Если Режим = "Диаграмма"  Тогда
		СписокКоманд.Добавить("ОтобразитьРаскрытиеДиаграмма",Нстр("ru = 'Отобразить раскрытие'"),,БиблиотекаКартинок.НавигацияПоказатьСписок);
		СписокКоманд.Добавить("РасшифроватьПоказательДиаграмма",Нстр("ru = 'Расшифровать по формуле расчета'"),,БиблиотекаКартинок.ФормулаДляКнопки);
	ИначеЕсли Режим = "ОбластьЯчеекЧтение" И НЕ ЭтаФорма.Заблокирован Тогда
		СписокКоманд.Добавить("ОтобразитьРаскрытие",Нстр("ru = 'Отобразить раскрытие'"),,БиблиотекаКартинок.НавигацияПоказатьСписок);
		СписокКоманд.Добавить("РасшифроватьПоказатель",Нстр("ru = 'Расшифровать по формуле расчета'"),,БиблиотекаКартинок.ФормулаДляКнопки);
	ИначеЕсли Режим = "ОбластьЯчеекЧтение" И ЭтаФорма.Заблокирован Тогда
		СписокКоманд.Добавить("ОтобразитьРаскрытие",Нстр("ru = 'Отобразить раскрытие'"),,БиблиотекаКартинок.НавигацияПоказатьСписок);
		СписокКоманд.Добавить("РасшифроватьПоказатель",Нстр("ru = 'Расшифровать по формуле расчета'"),,БиблиотекаКартинок.ФормулаДляКнопки);
        СписокКоманд.Добавить("СкопироватьДанныеПоСтроке",Нстр("ru = 'Копировать по строке'"),,БиблиотекаКартинок.ПереместитьВправо);
		СписокКоманд.Добавить("СкопироватьДанныеПоКолонке",Нстр("ru = 'Копировать по колонке'"),,БиблиотекаКартинок.ПереместитьВниз);
		СписокКоманд.Добавить("ОчиститьДиапазон",Нстр("ru = 'Очистить'"),,БиблиотекаКартинок.ОчиститьСодержимое);
		СписокКоманд.Добавить("КомментироватьПоказатель",Нстр("ru = 'Комментировать показатель'"),,БиблиотекаКартинок.Комментарий);		
	КонецЕсли;
	
	ЭтаФорма.ПоказатьВыборИзМеню(ОповещениеКонтекстноеМеню,СписокКоманд,Элемент);	
		
КонецПроцедуры	

#КонецОбласти


Процедура УстановитьСостояниеНеИспользовать(ЭтаФорма,ТекстСообщения) Экспорт
	
	тСтраница = ЭтаФорма.КэшБланков.НайтиСтроки(Новый Структура("ИмяСтраницы",ЭтаФорма.Элементы.ОсновнаяПанель.ТекущаяСтраница.Имя))[0];
	тМакет    = ЭтаФорма.Элементы[тСтраница.ИмяМакета];
	
	ОтображениеСостояния = тМакет.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ТекстСообщения;
	
	тМакет.Доступность = Ложь;
	
	//Сбросим кэш актуальности бланков
	Для Каждого СтрКэш Из ЭтаФорма.КэшБланков Цикл	
		СтрКэш.Выведен = Ложь;	
	КонецЦикла	
	
КонецПроцедуры	

Процедура РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений) Экспорт
		
	МассивСтрок = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера,Символ(13));	
	Для Каждого Стр Из МассивСтрок Цикл
		
		МассивЗначенийСтрокиТипизированный = Новый Массив();
		
		Если Лев(Стр,1) = Символ(10) Тогда
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Прав(Стр,СтрДлина(Стр)-1),"	");
			
			Для Каждого ЗначениеМассива Из МассивЗначенийСтроки Цикл	
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ЗначениеМассива) тогда
					МассивЗначенийСтрокиТипизированный.Добавить(ЗначениеМассива);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Стр,"	");
			
			Для Каждого ЗначениеМассива Из МассивЗначенийСтроки Цикл	
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ЗначениеМассива) тогда
					МассивЗначенийСтрокиТипизированный.Добавить(ЗначениеМассива);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		МассивЗначений.Добавить(МассивЗначенийСтрокиТипизированный);
				
	КонецЦикла;
		 		
КонецПроцедуры


