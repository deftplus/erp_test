////////////////////////////////////////////////////////////////////////////////
// Модуль Реализует логику работы подсистемы УправлениеРисками в контексте 
// серверного кода.
////////////////////////////////////////////////////////////////////////////////

// Записывает в регистр ДатыСозданийМероприятий шаблон мероприятия ШаблонМероприятияВход,
// дату последнего исполнения ДатаПоследнегоИсполненияВход, дату следующего
// исполнения ДатаСледующегоИсполненияВход.
Процедура УстановитьДатуСозданияМероприятияПоРасписанию(ШаблонМероприятияВход, РискВход, ДатаПоследнегоИсполненияВход, ДатаСледующегоИсполненияВход) Экспорт 
	Попытка
		МенеджерЗаписи = РегистрыСведений.ДатыСозданийМероприятий.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Риск						 = РискВход;
		МенеджерЗаписи.ШаблонМероприятия		 = ШаблонМероприятияВход;
		МенеджерЗаписи.ДатаПоследнегоИсполнения	 = ДатаПоследнегоИсполненияВход;
		МенеджерЗаписи.ДатаСледующегоИсполнения	 = ДатаСледующегоИсполненияВход;
		МенеджерЗаписи.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить дату создания мероприятия по шаблону %Шаблон%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(ШаблонМероприятияВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры			// УстановитьДатуСозданияМероприятияПоРасписанию()

// Записывает в регистр ДатыСозданийМероприятий даты последнего и 
// следующего выполняения создания мероприятий по расписанию РасписаниеВход
// шаблона мероприятий ШаблонМероприятияВход. В качестве последнего 
// значения будет установлена ДатаВход, когда параметр не задан - 
// текущая дата. Дата следующего выполнения будет вычислена на 
// основе даты последнего и настройки расписания этапа.
Процедура УстановитьТекущуюДатуОбработкиМероприятия(ШаблонМероприятияВход, РискВход, РасписаниеВход, ДатаВход = Неопределено) Экспорт
	Если ДатаВход = Неопределено Тогда
		ДатаРабочая = ТекущаяДата();
	Иначе
		ДатаРабочая = ДатаВход;
	КонецЕсли;
	Если ТипЗнч(РасписаниеВход) = Тип("РасписаниеРегламентногоЗадания") Тогда
		НоваяДата = ОбщегоНазначенияСерверУХ.ПолучитьЗапланированныйМоментЗапускаЗадания(РасписаниеВход, "", ДатаРабочая, ДатаРабочая + 1);
		УстановитьДатуСозданияМероприятияПоРасписанию(ШаблонМероприятияВход, РискВход, ДатаРабочая, НоваяДата);
	Иначе
		// Не удалось получить расписание. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// УстановитьТекущуюДатуОбработкиМероприятия()

// Выполняет создание мероприятий из шаблонов по расписанию.
Процедура СоздатьМероприятияПоРасписанию() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДатыСозданийМероприятий.ШаблонМероприятия КАК ШаблонМероприятия,
		|	ДатыСозданийМероприятий.ДатаПоследнегоИсполнения КАК ДатаПоследнегоИсполнения,
		|	ДатыСозданийМероприятий.ДатаСледующегоИсполнения КАК ДатаСледующегоИсполнения,
		|	ДатыСозданийМероприятий.Риск КАК Риск,
		|	ЕСТЬNULL(НастройкиИспользованияШаблоновМероприятий.РасписаниеПовторения, НЕОПРЕДЕЛЕНО) КАК РасписаниеПовторения,
		|	ДатыСозданийМероприятий.Риск.Организация КАК Организация,
		|	ДатыСозданийМероприятий.Риск.ЦФО КАК ЦФО,
		|	ДатыСозданийМероприятий.Риск.Проект КАК Проект
		|ИЗ
		|	РегистрСведений.ДатыСозданийМероприятий КАК ДатыСозданийМероприятий
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиИспользованияШаблоновМероприятий КАК НастройкиИспользованияШаблоновМероприятий
		|		ПО ДатыСозданийМероприятий.Риск = НастройкиИспользованияШаблоновМероприятий.Контекст
		|			И ДатыСозданийМероприятий.ШаблонМероприятия = НастройкиИспользованияШаблоновМероприятий.ШаблонМероприятия
		|			И (НастройкиИспользованияШаблоновМероприятий.ИспользоватьРасписание)
		|			И (НастройкиИспользованияШаблоновМероприятий.ВидМероприятия = ЗНАЧЕНИЕ(Перечисление.ВидыМероприятий.КонтрольноеМероприятие))
		|ГДЕ
		|	ДатыСозданийМероприятий.ДатаСледующегоИсполнения <= &ТекущаяДата
		|	И ДатыСозданийМероприятий.ДатаСледующегоИсполнения <> &ПустаяДата";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекШаблон		 = ВыборкаДетальныеЗаписи.ШаблонМероприятия;
		ТекРиск			 = ВыборкаДетальныеЗаписи.Риск;
		ТекРасписание	 = ВыборкаДетальныеЗаписи.РасписаниеПовторения;
		Если ЗначениеЗаполнено(ТекШаблон) Тогда
			Попытка
				// Создание документа.
				НовоеНаименование = НСтр("ru = 'Контрольное мероприятие по риску %Риск% (создано автоматически)'");
				НовоеНаименование = СтрЗаменить(НовоеНаименование, "%Риск%", Строка(ТекРиск));
				НовоеМероприятие = Документы.Мероприятие.СоздатьДокумент();
				НовоеМероприятие.Заполнить(ТекШаблон);
				НовоеМероприятие.НаименованиеРеакции	 = НовоеНаименование;
				НовоеМероприятие.Дата					 = ТекущаяДатаСеанса();
				НовоеМероприятие.Контекст				 = ТекРиск;
				НовоеМероприятие.Организация			 = ВыборкаДетальныеЗаписи.Организация;
				НовоеМероприятие.ЦФО					 = ВыборкаДетальныеЗаписи.ЦФО;
				НовоеМероприятие.Проект					 = ВыборкаДетальныеЗаписи.Проект;
				НовоеМероприятие.Записать();
				// Обновление даты следующегно создания.
				РасписаниеРабочее = Новый РасписаниеРегламентногоЗадания;
				Если ТекРасписание <> Неопределено Тогда
					РасписаниеРабочее = ТекРасписание.Получить();
				Иначе
					РасписаниеРабочее = Новый РасписаниеРегламентногоЗадания;
				КонецЕсли;
				УстановитьТекущуюДатуОбработкиМероприятия(ТекШаблон, ТекРиск, РасписаниеРабочее);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось создать мероприятие по шаблону %Шаблон%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(ТекШаблон));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		Иначе
			// Шаблон пустой. Пропускаем.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// СоздатьМероприятияПоРасписанию()



// Возвращает структуру полей расшифровки по отчету Диаграмма рисков.
Функция ПолучитьПоляРасшифровкиДиаграммаРисков(АдресРасшифровки, Расшифровка, СтандартнаяОбработка) Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Вероятность", Справочники.СтепениРиска.ПустаяСсылка());
	РезультатФункции.Вставить("Ущерб", Справочники.КатегорииУщерба.ПустаяСсылка());
	Если ЭтоАдресВременногоХранилища(АдресРасшифровки) Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресРасшифровки);
		ЭлементыРасшифровки = ДанныеРасшифровки.Элементы;
		ТекЭлементы = ЭлементыРасшифровки[Расшифровка];
		РодителиЭлементов = ТекЭлементы.ПолучитьРодителей();
		Для Каждого ТекРодителиЭлементов Из РодителиЭлементов Цикл
			ПоляРодителей = ТекРодителиЭлементов.ПолучитьПоля();
			Для Каждого ТекПоляРодителей Из ПоляРодителей Цикл
				Если СокрЛП(ТекПоляРодителей.Поле) = "Вероятность" Тогда
					РезультатФункции.Вставить("Вероятность", ТекПоляРодителей.Значение);
				ИначеЕсли СокрЛП(ТекПоляРодителей.Поле) = "Ущерб" Тогда
					РезультатФункции.Вставить("Ущерб", ТекПоляРодителей.Значение);
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;	
	Иначе
		// Не адрес компоновки. Оставляем поле пустым.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПоляРасшифровкиДиаграммаРисков()
