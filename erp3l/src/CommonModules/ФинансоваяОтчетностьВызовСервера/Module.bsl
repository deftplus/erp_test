

#Область ПрограммныйИнтерфейс

// Помещает данные переданной строки вида отчета во временное хранилище формы.
//
// Параметры:
//  ПомещаемыйОбъект - СправочникОбъект.ЭлементыФинансовыхОтчетов, Структура - помещаемый объект.
//  АдресХранилища - Строка, УникальныйИдентификатор - адрес временного хранилища
//  ОчиститьСсылки - Булево - Если истина тогда ссылка элемента справочника и ссылка владельца отчета будут очищены.
//  					При записи такого элемента отчета будет сформирована новая ссылка т.о. помещаемый элемент
//  					будет скопирован.
//
// Возвращаемое значение:
//   Строка   - Адрес элемента в хранилище.
//
Функция ПоместитьЭлементВХранилище(ПомещаемыйОбъект, АдресХранилища = Неопределено, ОчиститьСсылки = Ложь) Экспорт
	
	СтруктураЭлемента = ДанныеЭлементаОтчета(ПомещаемыйОбъект);
	Если ОчиститьСсылки Тогда
		СтруктураЭлемента.Ссылка = Неопределено;
		СтруктураЭлемента.Владелец = Неопределено;
		
		Операнды = Новый Массив;
		Для Каждого СтрокаОперанда Из СтруктураЭлемента.ОперандыФормулы Цикл
			Если ТипЗнч(СтрокаОперанда.Операнд) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
				Операнды.Добавить(СтрокаОперанда.Операнд);
			КонецЕсли;
		КонецЦикла;
		Если Операнды.Количество() = 0 Тогда
			ЗначенияРеквизитов = Неопределено;
		Иначе 
			СвойстваЭлементов  = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
			ПолучаемыеЗначения = "";
			Для каждого КлючИЗначение Из СвойстваЭлементов Цикл
				ПолучаемыеЗначения = ПолучаемыеЗначения + ?(ПолучаемыеЗначения = "", "", ", ") + КлючИЗначение.Ключ;
			КонецЦикла; 
			ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Операнды, ПолучаемыеЗначения);
		КонецЕсли;
		
		Для Каждого СтрокаОперанда Из СтруктураЭлемента.ОперандыФормулы Цикл
			Данные = ДанныеЭлементаОтчета(СтрокаОперанда.Операнд, ЗначенияРеквизитов);
			Данные.Ссылка = Неопределено;
			Данные.Владелец = Неопределено;
			СтрокаОперанда.АдресСтруктурыЭлемента = ПоместитьВоВременноеХранилище(Данные, АдресХранилища);
			СтрокаОперанда.Операнд = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураЭлемента, АдресХранилища);
	
КонецФункции

// Помещает данные переданной строки вида отчета во временное хранилище формы без ссылки элемента справочника.
// При записи такого элемента отчета будет сформирована новая ссылка т.о. помещаемый элемент будет скопирован.
//
// Параметры:
//  ПомещаемыйОбъект - Произвольный - помещаемый объект
//  АдресХранилища - Строка - адрес временного хранилища.
//
// Возвращаемое значение:
//   Строка - Адрес элемента в хранилище.
//
Функция ПоместитьКопиюЭлементаВХранилище(ПомещаемыйОбъект, АдресХранилища = Неопределено) Экспорт
	
	Возврат ПоместитьЭлементВХранилище(ПомещаемыйОбъект, АдресХранилища, Истина);
	
КонецФункции

// Возвращает данные элемента отчета
// 
// Параметры:
// 	ЭлементОтчета - СправочникОбъект.ЭлементыФинансовыхОтчетов, Структура - Описание
// 	ЗначенияРеквизитов - Соответствие, Неопределено - Описание:
// * Ключ - СправочникСсылка.ЭлементыФинансовыхОтчетов -
// * Значение - см. ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета
// Возвращаемое значение:
// 	Структура, Неопределено, Произвольный - Описание:
// * ИсточникиЗначений - ТаблицаЗначений - описание:
// 		** Источник - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// 		** ДобавляемыеЗначенияДокумента - Булево -
// * РасшифровкаПолейОтбораЭО - ТаблицаЗначений - описание:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// 		** КлючЭлементаОформления - УникальныйИдентификатор -
// 		** ИмяПоляОтбора - Строка -
// 		** ИмяРесурса - Строка -
// * ОформляемыеКолонки - ТаблицаЗначений - описание:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// 		** КлючЭлементаОформления - УникальныйИдентификатор -
// * ОформляемыеСтроки - ТаблицаЗначений - описание:
// 		** ЭлементОтчета - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// 		** КлючЭлементаОформления - УникальныйИдентификатор -
// * ЭлементыОформления - ТаблицаЗначений - описание:
// 		** Оформление - ХранилищеЗначения -
// 		** Условие - ХранилищеЗначения -
// 		** ТипОформляемойОбласти - ПеречислениеСсылка.ТипыОформляемыхОбластейБюджетныхОтчетов -
// 		** КлючЭлементаОформления - УникальныйИдентификатор - 
// * ДополнительныеПоля - ТаблицаЗначений - описание:
// 		** Реквизит - Строка -
// 		** Наименование - Строка -
// 		** ВыводитьЗаголовок - Булево -
// 		** ВОтдельнойКолонке - Булево -
// * ЭлементыТаблицы - ТаблицаЗначений -:
// 		** Строка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// 		** Колонка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// 		** Элемент - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// * ОперандыФормулы - ТаблицаЗначений - описание:
// 		** Идентификатор - Строка -
// 		** Операнд - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// * РеквизитыВидаЭлемента - ТаблицаЗначений - описание:
// 		** Реквизит - ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов -
// 		** Значение - Характеристика.РеквизитыЭлементовФинансовыхОтчетов -
// * СвязанныйЭлемент - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
// * ЗначениеАналитики -Характеристика.АналитикиСтатейБюджетов -
// * ЕстьНастройки - Булево -
// * ДополнительныйОтбор - ХранилищеЗначения -
// * Комментарий - Строка -
// * ОбратныйЗнак - Булево -
// * НаименованиеДляПечати - Строка -
// * ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета -
// * Код - Число -
// * Наименование - Строка -
// * Владелец - СправочникСсылка.ВидыФинансовыхОтчетов, СправочникСсылка.ВидыБюджетов -
// * Ссылка - СправочникСсылка.ЭлементыФинансовыхОтчетов, Строка - элемент или его адрес во временном хранилище.
Функция ДанныеЭлементаОтчета(ЭлементОтчета, ЗначенияРеквизитов = Неопределено) Экспорт
	
	СтруктураЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
	Если ТипЗнч(ЭлементОтчета) = Тип("СправочникОбъект.ЭлементыФинансовыхОтчетов") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементОтчета);
		КопироватьТаблицыЭлемента(ЭлементОтчета, СтруктураЭлемента);
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Если ЗначениеЗаполнено(ЭлементОтчета) Тогда
			НайденноеЗначениеКеша = Неопределено;
			Если ЗначенияРеквизитов <> Неопределено Тогда
				НайденноеЗначениеКеша = ЗначенияРеквизитов.Получить(ЭлементОтчета);
			КонецЕсли;
		КонецЕсли;
		Если НайденноеЗначениеКеша = Неопределено Тогда
			СтруктураЭлемента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ЭлементОтчета,
				СтруктураЭлемента); // см. ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета
		Иначе
			СтруктураЭлемента = НайденноеЗначениеКеша;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтруктураЭлемента.Ссылка) Тогда
			КопироватьТаблицыЭлемента(СтруктураЭлемента, СтруктураЭлемента);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ЭлементОтчета) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(СтруктураЭлемента, ЭлементОтчета);
		Для Каждого КлючИЗначение Из ЭлементОтчета Цикл
			Если СтрНайти(КлючИЗначение.Ключ, "ДополнительныйРеквизит_") Тогда
				ИмяДополнительногоРеквизита = СтрЗаменить(КлючИЗначение.Ключ, "ДополнительныйРеквизит_", "");
				УстановитьЗначениеДополнительногоРеквизита(СтруктураЭлемента, ИмяДополнительногоРеквизита, КлючИЗначение.Значение)
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВызватьИсключение НСтр("ru = 'Не определен тип помещаемого объекта';
								|en = 'Placed object type is not determined'");
	КонецЕсли;
	
	СтруктураЭлемента.Вставить("ЭтоСвязанный", ЗначениеЗаполнено(СтруктураЭлемента.СвязанныйЭлемент));
	
	Если ТипЗнч(СтруктураЭлемента.ОперандыФормулы) <> Тип("ТаблицаЗначений") Тогда
		ОперандыФормулы = Новый ТаблицаЗначений;
		ОперандыФормулы.Колонки.Добавить("Идентификатор");
		ОперандыФормулы.Колонки.Добавить("Операнд");
		СтруктураЭлемента.ОперандыФормулы = ОперандыФормулы;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.РеквизитыВидаЭлемента) <> Тип("ТаблицаЗначений") Тогда
		РеквизитыВидаЭлемента = Новый ТаблицаЗначений;
		РеквизитыВидаЭлемента.Колонки.Добавить("Реквизит");
		РеквизитыВидаЭлемента.Колонки.Добавить("Значение");
		СтруктураЭлемента.РеквизитыВидаЭлемента = РеквизитыВидаЭлемента;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ЭлементыТаблицы) <> Тип("ТаблицаЗначений") Тогда
		ЭлементыТаблицы = Новый ТаблицаЗначений;
		ЭлементыТаблицы.Колонки.Добавить("Строка");
		ЭлементыТаблицы.Колонки.Добавить("Колонка");
		ЭлементыТаблицы.Колонки.Добавить("Элемент");
		СтруктураЭлемента.ЭлементыТаблицы = ЭлементыТаблицы;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ДополнительныеПоля) <> Тип("ТаблицаЗначений") Тогда
		ДополнительныеПоля = Новый ТаблицаЗначений;
		ДополнительныеПоля.Колонки.Добавить("Реквизит");
		ДополнительныеПоля.Колонки.Добавить("Наименование");
		ДополнительныеПоля.Колонки.Добавить("ВыводитьЗаголовок");
		СтруктураЭлемента.ДополнительныеПоля = ДополнительныеПоля;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ЭлементыОформления) <> Тип("ТаблицаЗначений") Тогда
		ЭлементыОформления = Новый ТаблицаЗначений;
		ЭлементыОформления.Колонки.Добавить("Оформление");
		ЭлементыОформления.Колонки.Добавить("Условие");
		ЭлементыОформления.Колонки.Добавить("ТипОформляемойОбласти");
		ЭлементыОформления.Колонки.Добавить("КлючЭлементаОформления");
		СтруктураЭлемента.ЭлементыОформления = ЭлементыОформления;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ОформляемыеСтроки) <> Тип("ТаблицаЗначений") Тогда
		ОформляемыеСтроки = Новый ТаблицаЗначений;
		ОформляемыеСтроки.Колонки.Добавить("ЭлементОтчета");
		ОформляемыеСтроки.Колонки.Добавить("КлючЭлементаОформления");
		СтруктураЭлемента.ОформляемыеСтроки = ОформляемыеСтроки;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ОформляемыеКолонки) <> Тип("ТаблицаЗначений") Тогда
		ОформляемыеКолонки = Новый ТаблицаЗначений;
		ОформляемыеКолонки.Колонки.Добавить("ЭлементОтчета");
		ОформляемыеКолонки.Колонки.Добавить("КлючЭлементаОформления");
		СтруктураЭлемента.ОформляемыеКолонки = ОформляемыеКолонки;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.РасшифровкаПолейОтбораЭО) <> Тип("ТаблицаЗначений") Тогда
		РасшифровкаПолейОтбораЭО = Новый ТаблицаЗначений;
		РасшифровкаПолейОтбораЭО.Колонки.Добавить("КлючЭлементаОформления");
		РасшифровкаПолейОтбораЭО.Колонки.Добавить("ЭлементОтчета");
		РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяПоляОтбора");
		РасшифровкаПолейОтбораЭО.Колонки.Добавить("ИмяРесурса");
		СтруктураЭлемента.РасшифровкаПолейОтбораЭО = РасшифровкаПолейОтбораЭО;
	КонецЕсли;
	Если ТипЗнч(СтруктураЭлемента.ИсточникиЗначений) <> Тип("ТаблицаЗначений") Тогда
		ИсточникиЗначений = Новый ТаблицаЗначений;
		ИсточникиЗначений.Колонки.Добавить("Источник");
		ИсточникиЗначений.Колонки.Добавить("ДобавляемыеЗначенияДокумента");
		СтруктураЭлемента.ИсточникиЗначений = ИсточникиЗначений;
	КонецЕсли;
	
	ОперандыФормулы = СтруктураЭлемента.ОперандыФормулы; // ТаблицаЗначений
	Если ОперандыФормулы.Колонки.Найти("АдресСтруктурыЭлемента") = Неопределено Тогда
		ОперандыФормулы.Колонки.Добавить("АдресСтруктурыЭлемента");
	КонецЕсли;
	
	Возврат СтруктураЭлемента;
	
КонецФункции

// Процедура устанавливает значение дополнительного реквизита элемента финансового отчета.
//
// Параметры:
//  Источник - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизит - Строка, ПланВидовХарактеристикСсылка.РеквизитыЭлементовФинансовыхОтчетов - имя реквизита
//  Значение - Произвольный - значение реквизита.
//
Процедура УстановитьЗначениеДополнительногоРеквизита(Источник, Знач Реквизит, Значение) Экспорт
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		Объект = ПолучитьИзВременногоХранилища(Источник);
	Иначе
		Объект = Источник;
	КонецЕсли;
	
	Если Объект.РеквизитыВидаЭлемента = Неопределено Тогда
		ТаблицаРеквизитов = Новый ТаблицаЗначений;
		ТаблицаРеквизитов.Колонки.Добавить("Реквизит");
		ТаблицаРеквизитов.Колонки.Добавить("Значение");
		ТаблицаРеквизитов.Индексы.Добавить("Реквизит");
		Объект.РеквизитыВидаЭлемента = ТаблицаРеквизитов;
	КонецЕсли;
	
	Если ТипЗнч(Реквизит) = Тип("Строка") Тогда
		Реквизит = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов[Реквизит];
	КонецЕсли;
	
	НайденнаяСтрока = Объект.РеквизитыВидаЭлемента.Найти(Реквизит);
	Если НайденнаяСтрока = Неопределено Тогда
		НайденнаяСтрока = Объект.РеквизитыВидаЭлемента.Добавить();
		НайденнаяСтрока.Реквизит = Реквизит;
	КонецЕсли;
	
	НайденнаяСтрока.Значение = Значение;
	
	Если НайденнаяСтрока.Значение = Неопределено Тогда
		Объект.РеквизитыВидаЭлемента.Удалить(НайденнаяСтрока);
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("Строка") Тогда
		ПоместитьВоВременноеХранилище(Объект, Источник);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение дополнительного реквизита элемента финансового отчета.
//
// Параметры:
//  Источник - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизиты - Структура - реквизиты для установки.
//
Процедура УстановитьЗначенияДополнительныхРеквизитов(Источник, Реквизиты) Экспорт
	
	Для Каждого КлючИЗначение Из Реквизиты Цикл
		УстановитьЗначениеДополнительногоРеквизита(Источник, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает значение реквизита элемента финансового отчета в хранилище.
//
// Параметры:
//  АдресХранилища - Строка - адрес структуры элемента
//  СтруктураЗначений - Структура - реквизиты для установки.
//
Процедура УстановитьЗначениеРеквизита(АдресХранилища, СтруктураЗначений) Экспорт
	
	Объект = ПолучитьИзВременногоХранилища(АдресХранилища);
	Для Каждого КлючИЗначение Из СтруктураЗначений Цикл
		Объект[КлючИЗначение.Ключ] = Неопределено;
	КонецЦикла;
	ПоместитьВоВременноеХранилище(Объект, АдресХранилища);
	
КонецПроцедуры

// Функция возвращает значения дополнительных реквизитов элемента финансового отчета.
//
// Параметры:
//  СсылкаНаЭлемент - СправочникОбъект.ЭлементыФинансовыхОтчетов, СправочникСсылка.ЭлементыФинансовыхОтчетов, Структура, Строка -
//                    объект или адрес структуры элемента в хранилище.
//  Реквизиты - Структура - реквизиты для получения.
//
// Возвращаемое значение:
//   Структура - значение дополнительного реквизита.
//
Функция ЗначенияДополнительныхРеквизитов(СсылкаНаЭлемент, Реквизиты) Экспорт
	
	Если ТипЗнч(СсылкаНаЭлемент) = Тип("Строка") Тогда
		Объект = ПолучитьИзВременногоХранилища(СсылкаНаЭлемент); // см. ДанныеЭлементаОтчета
		Кэш    = Объект.РеквизитыВидаЭлемента;
	ИначеЕсли ТипЗнч(СсылкаНаЭлемент) = Тип("СправочникСсылка.ЭлементыФинансовыхОтчетов") Тогда
		Объект = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаЭлемент, "РеквизитыВидаЭлемента");
		Кэш    = Объект.РеквизитыВидаЭлемента.Выгрузить();
	Иначе
		Кэш = СсылкаНаЭлемент.РеквизитыВидаЭлемента;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(Реквизиты);
	
	Результат = Новый Структура;
	
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ, 
									ФинансоваяОтчетностьСервер.ЗначениеДополнительногоРеквизита(
										Неопределено, 
										ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов[КлючИЗначение.Ключ],
										Кэш));
	КонецЦикла;
		
	Возврат Результат;
	
КонецФункции

// Функция возвращает значение дополнительного реквизита элемента финансового отчета.
//
// Параметры:
//  СсылкаНаЭлемент - Произвольный - объект или адрес структуры элемента в хранилище
//  Реквизит - строка - реквизит для получения.
//
// Возвращаемое значение:
//   Произвольный   - значение дополнительного реквизита.
//
Функция ЗначениеДополнительногоРеквизита(СсылкаНаЭлемент, Реквизит) Экспорт
	
	Возврат ЗначенияДополнительныхРеквизитов(СсылкаНаЭлемент, Реквизит)[Реквизит];
	
КонецФункции

// Функция определяет имя формы элемента справочника для редактирования элемента финансового отчета.
//
// Параметры:
//  ВидЭлемента - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - вид элемента для которого необходимо определить форму
//  Элемент - Строка - адрес во временном хранилище по которому расположены все данные элемента
//  ДополнительныйРежим - ПеречислениеСсылка.ДополнительныеРежимыЭлементовОтчетов - признак дополнительного режима формы.
//  ОткрытиеФормыЭлементаБюджетногоОтчета - Булево - флаг открытия формы бюджетного отчета, заполняется только при отрытии формы.
//
// Возвращаемое значение:
//   Структура - Структура с параметрами:
//    *ИмяФормы - Строка - Имя формы справочника.
//    *Реквизиты - Структура - Структура реквизитов.
//
Функция ПараметрыИспользованияФормы(ВидЭлемента, Элемент, ДополнительныйРежим = Неопределено, ОткрытиеФормыЭлементаБюджетногоОтчета = Ложь) Экспорт
	
	ДопРежимы = Перечисления.ДополнительныеРежимыЭлементовОтчетов;
	ТипыИзмерений = Перечисления.ТипыИзмеренийФинансовогоОтчета;
	
	СтруктураДополнительныхРеквизитов = Новый Структура;
	ДополнительныеРеквизиты = ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов;
	ИмяФормыЭлемента = Неопределено;
	Если ДополнительныйРежим = ДопРежимы["СвязанныйЭлемент"] Тогда
		ИмяФормыЭлемента = "Форма.ФормаСвязанногоЭлемента";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЗаголовокОтчета
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НередактируемыйТекст
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемыйТекст Тогда
		ИмяФормыЭлемента = "Форма.ТекстовыйБлок";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Текст.ИмяПредопределенныхДанных);
		Если ЭтоАдресВременногоХранилища(Элемент) Тогда
			ПараметрыЭлемента = ПолучитьИзВременногоХранилища(Элемент);
			ВладелецЭлемента = ?(ПараметрыЭлемента.Свойство("Владелец"), ПараметрыЭлемента.Владелец, Неопределено);
		Иначе
			ВладелецЭлемента = Элемент.Владелец;
		КонецЕсли;
		Если ТипЗнч(ВладелецЭлемента) = Тип("СправочникСсылка.ВидыБюджетов") Тогда
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТолькоДляПечати.ИмяПредопределенныхДанных);
		КонецЕсли;
		Если ОткрытиеФормыЭлементаБюджетногоОтчета Тогда
			ИмяФормыЭлемента = "Форма.ТекстовыйБлокБюджетов";
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НефинансовыйПоказатель Тогда
		ИмяФормыЭлемента = "Форма.НефинансовыйПоказатель";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодичностьСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НефинансовыйПоказатель.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоОрганизации.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоПодразделению.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоСценарию.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПривилегированныйРежим.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеСтатьиБюджетов Тогда
		Если ДополнительныйРежим = ДопРежимы["СтатьяБюджетовВРежимеВвода"] Тогда
			ИмяФормыЭлемента = "Форма.СтатьяБюджетовДляВвода";
		ИначеЕсли ДополнительныйРежим = ДопРежимы["ВсеСтатьиВСложнойТаблице"]
			ИЛИ ДополнительныйРежим = ДопРежимы["СтатьяВПоказателеБюджетов"] Тогда
			ИмяФормыЭлемента = "Форма.СтатьяБюджетовБезНастроек";
		Иначе
			ИмяФормыЭлемента = "Форма.СтатьяБюджетов";
		КонецЕсли;
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СтатьяБюджетов.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводимыеПоказатели.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПривилегированныйРежим.ИмяПредопределенныхДанных);
		Если ИмяФормыЭлемента = "Форма.СтатьяБюджетов" Тогда
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИсключитьДанныеВводимогоДокументаПриРасчете.ИмяПредопределенныхДанных);
		КонецЕсли;
		//фильтры
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоОрганизации.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоПодразделению.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоСценарию.ИмяПредопределенныхДанных);
		//заполнение
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СпособЗаполнения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Формула.ИмяПредопределенныхДанных);
		// периоды данных
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодичностьСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НижняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВерхняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НачалоПериодаГруппировки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КонецПериодаГруппировки.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ВсеПоказателиБюджетов Тогда
		Если ДополнительныйРежим = ДопРежимы["ВсеПоказателиВСложнойТаблице"] Тогда
			ИмяФормыЭлемента = "Форма.ВсеПоказателиСложнаяТаблица";
		Иначе
			ИмяФормыЭлемента = "Форма.ПоказательБюджетов";
		КонецЕсли;
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПоказательБюджетов.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводимыеПоказатели.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипЗначенияПоказателя.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПривилегированныйРежим.ИмяПредопределенныхДанных);
		Если ИмяФормыЭлемента = "Форма.ПоказательБюджетов" Тогда
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИсключитьДанныеВводимогоДокументаПриРасчете.ИмяПредопределенныхДанных);
		КонецЕсли;
		//фильтры
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоОрганизации.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоПодразделению.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИспользоватьФильтрПоСценарию.ИмяПредопределенныхДанных);
		// периоды данных
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПериодичностьСмещения.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НижняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВерхняяГраницаДанных.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НачалоПериодаГруппировки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КонецПериодаГруппировки.ИмяПредопределенныхДанных);
		
	ИначеЕсли (ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе) Тогда
		Если ДополнительныйРежим = ДопРежимы["ПоказатьКодСтрокиПримечание"] Тогда
			ИмяФормыЭлемента = "Форма.Группа";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокЭлемента.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		Иначе
			ИмяФормыЭлемента = "Форма.Группа";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокЭлемента.ИмяПредопределенныхДанных);
		КонецЕсли;
		Если  ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ИтогПоГруппе Тогда
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Точность.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаСложная
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВКолонках
		ИЛИ ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ТаблицаПоказателиВСтроках Тогда
		ИмяФормыЭлемента = "Форма.Таблица";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокЭлемента.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьЗаголовокГруппировки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ЗаголовокГруппировки.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
		ИмяФормыЭлемента = "Форма.ФормулаПоГруппе";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ФормулаПоГруппе.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЭлементТаблицы Тогда
		ИмяФормыЭлемента = "Форма.ЭлементТаблицы";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.МонетарныйПоказатель Тогда
		ИмяФормыЭлемента = "Форма.МонетарныйПоказатель";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СчетПланаСчетов.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипИтога.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НачальноеСальдо.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Точность.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НемонетарныйПоказатель Тогда
		ИмяФормыЭлемента = "Форма.НемонетарныйПоказатель";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.НемонетарныйПоказатель.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Точность.ИмяПредопределенныхДанных);
		
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель Тогда
		Если ДополнительныйРежим = ДопРежимы["ВидОтчета"] Тогда
			ИмяФормыЭлемента = "Форма.ПроизводныйПоказательОтчета";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Формула.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КодСтрокиОтчета.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Примечание.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыделитьЭлемент.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Точность.ИмяПредопределенныхДанных);
		Иначе
			ИмяФормыЭлемента = "Форма.ПроизводныйПоказательБюджета";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Формула.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПривилегированныйРежим.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.НастройкаЯчеек Тогда
		Если ДополнительныйРежим = ДопРежимы["ВидОтчета"] Тогда
			ИмяФормыЭлемента = "Форма.НастройкаЯчеекВидаОтчета";
		Иначе
			ИмяФормыЭлемента = "Форма.НастройкаЯчеек";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ОтображатьНумерациюКолонок.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ОтображатьНумерациюСтрок.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
		ИмяФормыЭлемента = "Форма.ВыборЯчейкиСложнойТаблицы";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.СтрокаЯчейки.ИмяПредопределенныхДанных);
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КолонкаЯчейки.ИмяПредопределенныхДанных);
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Измерение Тогда
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипИзмерения.ИмяПредопределенныхДанных);
		ТипИзмерения = ЗначениеДополнительногоРеквизита(Элемент, "ТипИзмерения");
		Если ТипИзмерения = ТипыИзмерений["Период"] Тогда
			Если ДополнительныйРежим = ДопРежимы["ВидОтчета"] Тогда
				ИмяФормыЭлемента = "Форма.ПериодВидаОтчета";
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Периодичность.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Сортировка.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ПредставлениеПериода.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьПоказателиАналогичныхПериодовПрошлыхЛет.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыводитьПоказателиПредыдущихПериодов.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КоличествоПредыдущихЛет.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.КоличествоПредыдущихПериодов.ИмяПредопределенныхДанных);
			Иначе
				ИмяФормыЭлемента = "Форма.Период";
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Периодичность.ИмяПредопределенныхДанных);
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ЗначениеПериода.ИмяПредопределенныхДанных);
			КонецЕсли;
		ИначеЕсли ТипИзмерения = ТипыИзмерений["ИзмерениеРегистра"]
			ИЛИ ТипИзмерения = ТипыИзмерений["ИзмерениеРегистраБухгалтерии"] Тогда
			ИмяФормыЭлемента = "Форма.ИзмерениеРегистра";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИмяИзмерения.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Точность.ИмяПредопределенныхДанных);
			Если Не ТипИзмерения = ТипыИзмерений["ИзмерениеРегистраБухгалтерии"] Тогда
				СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыбранныеИсточникиЗначений.ИмяПредопределенныхДанных);
			КонецЕсли;
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Субконто"] Тогда
			ИмяФормыЭлемента = "Форма.ИзмерениеРегистра";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВидСубконто.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Точность.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Аналитика"] Тогда
			ИмяФормыЭлемента = "Форма.ВидАналитики";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВидАналитики.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыбранныеИсточникиЗначений.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИсточникВсеЭлементы.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Сценарий"] Тогда
			ИмяФормыЭлемента = "Форма.Сценарий";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Сценарий.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Организация"] Тогда
			ИмяФормыЭлемента = "Форма.Организация";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Организация.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Подразделение"] Тогда
			ИмяФормыЭлемента = "Форма.Подразделение";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Подразделение.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["Валюта"] Тогда
			ИмяФормыЭлемента = "Форма.Валюта";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.Валюта.ИмяПредопределенныхДанных);
		ИначеЕсли ТипИзмерения = ТипыИзмерений["ФиксированнаяАналитика"] Тогда
			ИмяФормыЭлемента = "Форма.ФиксированнаяАналитика";
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ЭтоАналитикаПрочее.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.РазрешитьРедактирование.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВидАналитики.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ВыбранныеИсточникиЗначений.ИмяПредопределенныхДанных);
			СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ИсточникВсеЭлементы.ИмяПредопределенныхДанных);
		КонецЕсли;
	ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.РедактируемоеЗначение Тогда
		ИмяФормыЭлемента = "Форма.РедактируемоеЗначение";
		СтруктураДополнительныхРеквизитов.Вставить(ДополнительныеРеквизиты.ТипРедактируемогоЗначения.ИмяПредопределенныхДанных);
	КонецЕсли;
	
	Если ИмяФормыЭлемента = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Неизвестный вид элемента отчета';
								|en = 'Unknown report item kind'");
	КонецЕсли;
	
	Возврат Новый Структура(
				"ИмяФормы, Реквизиты",
				"Справочник.ЭлементыФинансовыхОтчетов." + ИмяФормыЭлемента,
				СтруктураДополнительныхРеквизитов);
	
КонецФункции

// Возвращает имя значения перечисления Периодичность
//
// Параметры:
// 	Периодичность - ПеречислениеСсылка.Периодичность - значение периодичности.
// 	              - Неопределено - если значение периодичности не задано.
//
// Возвращаемое значение:
// 	Строка - Имя перечисления перечисления периодичности,
// 	         пустая строка, если значение периодичности не задано.
//
Функция ПериодичностьСтрокой(Периодичность) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Результат = "";
	Иначе
		Результат = ОбщегоНазначения.ИмяЗначенияПеречисления(Периодичность);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает индекс картинки по виду элемента и уточняющей информации
//
// Параметры:
//  ВидЭлемента  - ПеречислениеСсылка.ВидыЭлементовФинансовогоОтчета - Вид элемента, для которого получаем параметр
//  ИмяВспомогательныхДанных  - Строка - уточняющее значение.
//
// Возвращаемое значение:
//   Число   - индекс картинки из коллекции КоллекцияВидыЭлементовФинансовойОтчетности.
//
Функция НестандартнаяКартинка(ВидЭлемента, ИмяВспомогательныхДанных = Неопределено) Экспорт
	
	Возврат ФинансоваяОтчетностьПовтИсп.НестандартнаяКартинка(ВидЭлемента, ИмяВспомогательныхДанных);
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы или хранилища по ссылке на объект.
// 
// Параметры:
//  Ссылка       - СправочникСсылка, Строка -
//                 ссылка на объект, строка - элемент справочника, документ или адрес элемента в хранилище
//  ИмяРеквизита - Строка - например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
		СтруктураЭлемента = ПолучитьИзВременногоХранилища(Ссылка);
		Возврат СтруктураЭлемента[ИмяРеквизита];
	Иначе
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	КонецЕсли;
	
КонецФункции

// Функция возвращает дерево операторов конструктора формул
//
// Параметры:
//  УсловиеДляЗапроса - Булево - признак, что оператор "условие" следует вернуть в формате для запроса.
//
// Возвращаемое значение:
//   ДеревоЗначений   - дерево операторов.
//
Функция ПостроитьДеревоОператоров(УсловиеДляЗапроса = Истина) Экспорт
	
	Дерево = РаботаСФормулами.ПолучитьПустоеДеревоОператоров();
	
	ПредставлениеГруппыОператора = НСтр("ru = 'Операторы';
										|en = 'Operators'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Операторы", ПредставлениеГруппыОператора);
	
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "+", " + ", "+");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "-", " - ", "-");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "*", " * ", "*");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "/", " / ", "/");
	
	ПредставлениеГруппыОператора = НСтр("ru = 'Логические операторы и константы';
										|en = 'Logical operators and constants'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "ЛогическиеОператорыИКонстанты", ПредставлениеГруппыОператора);
	
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<", " < ", "<");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ">", " > ", ">");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<=", " <= ", "<=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, ">=", " >= ", ">=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "=", " = ", "=");
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров, "<>", " <> ", "<>");
	
	ИдентификаторОператора = "И";
	ПредставлениеОператора = НСтр("ru = 'И';
									|en = 'AND'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "ИЛИ";
	ПредставлениеОператора = НСтр("ru = 'ИЛИ';
									|en = 'OR'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "НЕ";
	ПредставлениеОператора = НСтр("ru = 'НЕ';
									|en = 'NOT'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "ИСТИНА";
	ПредставлениеОператора = НСтр("ru = 'ИСТИНА';
									|en = 'TRUE'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	ИдентификаторОператора = "ЛОЖЬ";
	ПредставлениеОператора = НСтр("ru = 'ЛОЖЬ';
									|en = 'FALSE'");
	ОператорНаЯзыкеКодаДляВставки = " " + ИдентификаторОператора + " ";
	РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
		ИдентификаторОператора,
		ОператорНаЯзыкеКодаДляВставки,
		ПредставлениеОператора);
	
	
	ПредставлениеГруппыОператора = НСтр("ru = 'Функции';
										|en = 'Functions'");
	ГруппаОператоров = РаботаСФормулами.ДобавитьГруппуОператоров(Дерево, "Функции", ПредставлениеГруппыОператора);
	
	Если УсловиеДляЗапроса Тогда
		ИдентификаторОператора = "ВЫБОР КОГДА ТОГДА ИНАЧЕ КОНЕЦ";
		ПредставлениеОператора = НСтр("ru = 'Условие';
										|en = 'Condition'");
		ОператорНаЯзыкеКодаДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ВЫБОР КОГДА %1 ТОГДА %2 ИНАЧЕ %3 КОНЕЦ",
			НСтр("ru = '<Условие>';
				|en = '<Condition>'"),
			СтрШаблон(НСтр("ru = '<%1>';
							|en = '<%1>'"), "РезультатИстина"),
			СтрШаблон(НСтр("ru = '<%1>';
							|en = '<%1>'"), "РезультатЛожь'"));
		РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
			ИдентификаторОператора,
			ОператорНаЯзыкеКодаДляВставки,
			ПредставлениеОператора,,
			3);
	Иначе
		ИдентификаторОператора = "?";
		ПредставлениеОператора = НСтр("ru = 'Условие';
										|en = 'Condition'");
		ТекстУсловие = НСтр("ru = '<Условие>';
							|en = '<Condition>'");
		ТекстЗначениеИстина = НСтр("ru = '<Значение если истина>';
									|en = '<Value if true>'");
		ТекстЗначениеЛожь = НСтр("ru = '<Значение если ложь>';
								|en = '<Value if false>'");
		ОператорНаЯзыкеКодаДляВставки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"?(%1, %2, %3)",
			ТекстУсловие,
			ТекстЗначениеИстина,
			ТекстЗначениеЛожь);
		ПояснениеОператора            = НСтр("ru = 'Вычисляет значение в зависимости от значения условия';
											|en = 'Calculates a value based on a condition value'");
		РаботаСФормулами.ДобавитьОператор(ГруппаОператоров,
			ИдентификаторОператора,
			ОператорНаЯзыкеКодаДляВставки,
			ПредставлениеОператора,
			ПояснениеОператора,
			3);
	КонецЕсли;
	
	Возврат Дерево;
	
КонецФункции

// Функция копирует элемент, находящийся в хранилище
//
// Параметры:
//  АдресЭлемента - Строка - адрес элемента в хранилище
//  ИдентификаторХранилища - УникальныйИдентификатор - УИД формы, в рамках которой ведется работа
//  ВидЭлемента - Неопределено - в параметр функция вернет вид элемента.
//
// Возвращаемое значение:
//   Строка   - Адрес нового элемента.
//
Функция СкопироватьЭлементПоАдресу(АдресЭлемента, ИдентификаторХранилища, ВидЭлемента = Неопределено) Экспорт
	
	КопияЭлемента = ФинансоваяОтчетностьКлиентСервер.СтруктураЭлементаОтчета();
	ДанныеЭлемента = ПолучитьИзВременногоХранилища(АдресЭлемента);
	ЗаполнитьЗначенияСвойств(КопияЭлемента, ДанныеЭлемента);
	КопияЭлемента.Ссылка = Неопределено;
	
	КопияЭлемента.РеквизитыВидаЭлемента = ДанныеЭлемента.РеквизитыВидаЭлемента.Скопировать();
	КопияЭлемента.ОперандыФормулы = ДанныеЭлемента.ОперандыФормулы.Скопировать();
	КопияЭлемента.ДополнительныеПоля = ДанныеЭлемента.ДополнительныеПоля.Скопировать();
	
	Для Каждого СтрокаОперанда Из КопияЭлемента.ОперандыФормулы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаОперанда.АдресСтруктурыЭлемента) Тогда
			СтрокаОперанда.АдресСтруктурыЭлемента = ПоместитьЭлементВХранилище(СтрокаОперанда.Операнд, ИдентификаторХранилища);
		КонецЕсли;
		АдресОперанда = СкопироватьЭлементПоАдресу(СтрокаОперанда.АдресСтруктурыЭлемента, ИдентификаторХранилища);
		СтрокаОперанда.АдресСтруктурыЭлемента = АдресОперанда;
		СтрокаОперанда.Операнд = Неопределено; // операнд должен быть создан новый
	КонецЦикла;
	
	ВидЭлемента = КопияЭлемента.ВидЭлемента;
	
	Возврат ПоместитьВоВременноеХранилище(КопияЭлемента, ИдентификаторХранилища);
	
КонецФункции

Процедура КопироватьТаблицыЭлемента(Источник, Приемник)
	
	Приемник.Вставить("ОперандыФормулы",			Источник.ОперандыФормулы.Выгрузить());
	Приемник.Вставить("РеквизитыВидаЭлемента",		Источник.РеквизитыВидаЭлемента.Выгрузить());
	Приемник.Вставить("ЭлементыТаблицы",			Источник.ЭлементыТаблицы.Выгрузить());
	Приемник.Вставить("ДополнительныеПоля",			Источник.ДополнительныеПоля.Выгрузить());
	Приемник.Вставить("ЭлементыОформления",			Источник.ЭлементыОформления.Выгрузить());
	Приемник.Вставить("ОформляемыеСтроки",			Источник.ОформляемыеСтроки.Выгрузить());
	Приемник.Вставить("ОформляемыеКолонки",			Источник.ОформляемыеКолонки.Выгрузить());
	Приемник.Вставить("РасшифровкаПолейОтбораЭО",	Источник.РасшифровкаПолейОтбораЭО.Выгрузить());
	Приемник.Вставить("ИсточникиЗначений",			Источник.ИсточникиЗначений.Выгрузить());
	ПереопределитьТипКолонокТаблицКэша(Приемник);
	
КонецПроцедуры

Процедура ПереопределитьТипКолонокТаблицКэша(СтруктураЭлемента)
	
	СтруктураТаблиц = Новый Структура("ОперандыФормулы, РеквизитыВидаЭлемента, ЭлементыТаблицы, 
										|ОформляемыеСтроки, ОформляемыеКолонки, РасшифровкаПолейОтбораЭО, ИсточникиЗначений");
	
	Для Каждого КлючИЗначение Из СтруктураТаблиц Цикл
		
		Таблица = СтруктураЭлемента[КлючИЗначение.Ключ]; // ТаблицаЗначений
		НоваяТаблица = Новый ТаблицаЗначений;
		Для Каждого Колонка Из Таблица.Колонки Цикл
			НоваяТаблица.Колонки.Добавить(Колонка.Имя);
		КонецЦикла;
		
		СтруктураЭлемента[КлючИЗначение.Ключ] = НоваяТаблица; 
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица, СтруктураЭлемента[КлючИЗначение.Ключ]);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
