
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработкаИзмененийАналитикОперПлана

Процедура ОбщийОбработчикИзмененияАналитик(ОписаниеКТ, Форма, ИмяЭлемента) экспорт
	
	Если СтрНайти(ИмяЭлемента, "СтатьяБюджета")<>0 Тогда
		ИзменениеАналитики_СтатьяБюджета(ОписаниеКТ, Форма, ИмяЭлемента);
	ИначеЕсли СтрНайти(ИмяЭлемента, "Номенклатура")<>0 Тогда
		ИзменениеАналитики_Номенклатура(ОписаниеКТ, Форма);
	ИначеЕсли СтрНайти(ИмяЭлемента, "Цена")<>0 Тогда
		ИзменениеАналитики_Цена(ОписаниеКТ, Форма);
	ИначеЕсли СтрНайти(ИмяЭлемента, "ЕдиницаИзмерения")<>0 Тогда
		ИзменениеАналитики_ЕИ(ОписаниеКТ, Форма);
	ИначеЕсли СтрНайти(ИмяЭлемента, "Аналитика1")<>0 Тогда
		ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, "Аналитика1");
	ИначеЕсли СтрНайти(ИмяЭлемента, "Аналитика2")<>0 Тогда
		ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, "Аналитика2");
	ИначеЕсли СтрНайти(ИмяЭлемента, "Аналитика3")<>0 Тогда
		ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, "Аналитика3");
	ИначеЕсли СтрНайти(ИмяЭлемента, "Аналитика4")<>0 Тогда
		ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, "Аналитика4");
	ИначеЕсли СтрНайти(ИмяЭлемента, "Аналитика5")<>0 Тогда
		ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, "Аналитика5");
	ИначеЕсли СтрНайти(ИмяЭлемента, "Аналитика6")<>0 Тогда
		ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, "Аналитика6");
	КонецЕсли;
	
КонецПроцедуры

#Область Аналитика123456
	
Процедура ИзменениеАналитики_АналитикаСтатьиБюджета(ОписаниеКТ, Форма, ИмяАналитики) экспорт
	Элементы = Форма.Элементы;
	Аналитики = ОписаниеКТ.Схема.Аналитики;
	Если Аналитики.мШапка.Найти(ИмяАналитики) <> неопределено Тогда
		ОбработатьИзменениеАналитикиСтатьиВШапке(ОписаниеКТ, Форма, ИмяАналитики);
	ИначеЕсли Аналитики.мСтрока.Найти(ИмяАналитики) <> неопределено Тогда
		// В строке
		ЭлементКТ = Элементы.Найти(ОписаниеКТ.Элементы.КроссТаблица);
		Если ЭлементКТ <> неопределено Тогда
			ОбработатьИзменениеАналитикиСтатьиВКроссТаблице(ОписаниеКТ, Форма, ЭлементКТ.ТекущаяСтрока, ИмяАналитики);
		КонецЕсли;
	ИначеЕсли Аналитики.мРасшифровка.Найти(ИмяАналитики) <> неопределено Тогда
		// В расшифровке
		ЭлементРасшифровка = Элементы.Найти(ОписаниеКТ.Элементы.Расшифровка);
		Если ЭлементРасшифровка <> неопределено Тогда
			ОбработатьИзменениеАналитикиСтатьиВРасшифровкеКТ(ОписаниеКТ, Форма, ЭлементРасшифровка.ТекущаяСтрока, ИмяАналитики);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СтатьяБюджета

Процедура ОбработатьИзменениеСтатьиВКроссТаблице(ОписаниеКТ, Форма, ИдентификаторСтроки, ИмяЭлемента) экспорт
	
	Если ИдентификаторСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	//
	Строка = Форма[ОписаниеКТ.Реквизиты.КроссТаблица].НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзменениеСтатьиВСтрокеКроссТаблицы(ОписаниеКТ, Форма, Строка, ИмяЭлемента);
	
КонецПроцедуры

Процедура ОбработатьИзменениеСтатьиВСтрокеКроссТаблицы(ОписаниеКТ, Форма, Строка, ИмяЭлемента = неопределено) экспорт
	
	Если Строка = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяЭлемента = неопределено Тогда
		ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета");
	КонецЕсли;
	
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи Тогда
		ПараметрыЛимитирования = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьПараметрыЛимитированияСтатьиБюджета(Форма, ИмяЭлемента);
	КонецЕсли;
	
	КУдалению_УстановитьАналитикиСтатьи(
		Строка,
		КроссТаблицыУХ.ПолучитьАналитикуШапки(ОписаниеКТ, Форма, "Предназначение"),
		"Аналитика%1", "СтатьяБюджета", ОписаниеКТ.ТолькоЛимитируемыеСтатьи, ПараметрыЛимитирования);
	
	// Если статья пустая, то признак - контролируется, т.к. при установленном отборе 
	// по УровнюКонтроля не должны пропадать строки с пустой статьей.
	Если ЗначениеЗаполнено(Строка.СтатьяБюджета) Тогда
		
		Если ЗначениеЗаполнено(ПараметрыЛимитирования) И ТипЗнч(ПараметрыЛимитирования) = Тип("Структура")
			И ПараметрыЛимитирования.Заполнены И ЗначениеЗаполнено(ПараметрыЛимитирования.ПараметрыЛимитирования_Период) Тогда
			ПараметрыПериода = ВстраиваниеОПКПовтИсп.ПараметрыПериода(ПараметрыЛимитирования.ПараметрыЛимитирования_Период);
			НаДату = ПараметрыПериода.ДатаНачала;
		Иначе
			НаДату = неопределено;
		КонецЕсли;
		
		Параметры = КонтрольЛимитовУХПовтИсп.ПолучитьПараметрыКонтроляСтатьиБюджета(Строка.СтатьяБюджета, НаДату);
		Строка.УровеньКонтроляСтатьиБюджета = Параметры.УровеньКонтроляЛимитов;
	Иначе
		Строка.УровеньКонтроляСтатьиБюджета = Перечисления.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам;
	КонецЕсли;
	
	// Если приход/расход и Статья бюджета на одном уровне, то заполняем ПриходРасход по статье
	ИнфоСтатьяБюджета = ОписаниеКТ.Схема.СтруктураАналитик.СтатьяБюджета;
	ТребуетсяЗаполнение = Ложь;
	Если ИнфоСтатьяБюджета.Свойство("ЗаполнятьПриходРасходПоСтатье", ТребуетсяЗаполнение) Тогда
		Если ТребуетсяЗаполнение Тогда
			Строка.ПриходРасход = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтатьяБюджета, "ПриходРасход");
		КонецЕсли;
	КонецЕсли;
	
	// Если выбрана статья с аналитикой Номенклатура, а номенклатура в строке уже заполнена, то надо АналитикуСтатьи заполнить
	
	//
	ЗаполненныеАналитики = ПолучитьЗаполненныеЗначенияАналитик(ОписаниеКТ, Форма, 2, Строка);
	Для Поз = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка["ВидАналитики"+Поз]) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ИмяРеквизита = "Аналитика" + Поз;
		ТипАналитикиСтатьи = Строка["ВидАналитики" + Поз + "ТипЗначения"];
		
		//
		Для Каждого КлючЗначение Из ЗаполненныеАналитики Цикл
			ТипЗаполненнойАналитики = ТипЗнч(КлючЗначение.Значение);
			Если ТипЗаполненнойАналитики = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
				Продолжить;
			ИначеЕсли ТипАналитикиСтатьи.СодержитТип(ТипЗаполненнойАналитики) Тогда
				Строка[ИмяРеквизита] = КлючЗначение.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Номенклатура

Процедура ИзменениеАналитики_Номенклатура(ОписаниеКТ, Форма) экспорт
	Элементы = Форма.Элементы;
	Аналитики = ОписаниеКТ.Схема.Аналитики;
	ИмяАналитики = "Номенклатура";
	Если Аналитики.мШапка.Найти(ИмяАналитики) <> неопределено Тогда
		ОбработатьИзменениеНоменклатуры(ОписаниеКТ, Форма, "Шапка", Форма.Объект, Форма);
	ИначеЕсли Аналитики.мСтрока.Найти(ИмяАналитики) <> неопределено Тогда
		Если Элементы.Найти(ОписаниеКТ.Элементы.КроссТаблица) <> неопределено Тогда
			КроссТаблица = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
			ЭлементКроссТаблицы = Элементы[ОписаниеКТ.Элементы.КроссТаблица];
 			СтрокаДанных = КроссТаблица.НайтиПоИдентификатору(ЭлементКроссТаблицы.ТекущаяСтрока);
			ОбработатьИзменениеНоменклатуры(ОписаниеКТ, Форма, "Строка", СтрокаДанных, СтрокаДанных);
		КонецЕсли;
	ИначеЕсли Аналитики.мРасшифровка.Найти(ИмяАналитики) <> неопределено Тогда
		Если Элементы.Найти(ОписаниеКТ.Элементы.Расшифровка) <> неопределено Тогда
			КроссТаблица = Форма[ОписаниеКТ.Реквизиты.Расшифровка];
			ЭлементКроссТаблицы = Элементы[ОписаниеКТ.Элементы.Расшифровка];
 			СтрокаДанных = КроссТаблица.НайтиПоИдентификатору(ЭлементКроссТаблицы.ТекущаяСтрока);
			ОбработатьИзменениеНоменклатуры(ОписаниеКТ, Форма, "Расшифровка", СтрокаДанных, СтрокаДанных);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Цена

Процедура ИзменениеАналитики_Цена(ОписаниеКТ, Форма) экспорт
	
	Если НЕ ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Номенклатура") <> неопределено Тогда
		
		КроссТаблица = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
		Для Каждого ДанныеСтрокиКТ Из КроссТаблица Цикл
			КТ_ПриИзмененииКоличестваСуммыСтроки(ОписаниеКТ, Форма, ДанныеСтрокиКТ, Форма.Объект);
		КонецЦикла;
		
	ИначеЕсли ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено Тогда
		
		ИдентификаторСтроки = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущаяСтрока;
		Если ИдентификаторСтроки = неопределено Тогда
			Возврат;
		КонецЕсли;
		Строка = Форма[ОписаниеКТ.Реквизиты.КроссТаблица].НайтиПоИдентификатору(ИдентификаторСтроки);
		КТ_ПриИзмененииКоличестваСуммыСтроки(ОписаниеКТ, Форма, Строка, Строка);
		
	ИначеЕсли ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти("Номенклатура") <> неопределено Тогда
		
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти 

#Область ЕдиницаИзмерения

Процедура ИзменениеАналитики_ЕИ(ОписаниеКТ, Форма) экспорт
	
	Если НЕ ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
		Возврат;
	КонецЕсли;
	
	Аналитики = ОписаниеКТ.Схема.Аналитики;
	ИмяАналитики = "Номенклатура";
	Если Аналитики.мШапка.Найти(ИмяАналитики) <> неопределено Тогда
		ДанныеСтроки = Форма.Объект;
	ИначеЕсли Аналитики.мСтрока.Найти(ИмяАналитики) <> неопределено Тогда
		ИдентификаторСтроки = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущаяСтрока;
		Если ИдентификаторСтроки = неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеСтроки = Форма[ОписаниеКТ.Реквизиты.КроссТаблица].НайтиПоИдентификатору(ИдентификаторСтроки);
	ИначеЕсли Аналитики.мРасшифровка.Найти(ИмяАналитики) <> неопределено Тогда
		ИдентификаторСтроки = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица].ТекущаяСтрока;
		Если ИдентификаторСтроки = неопределено Тогда
			Возврат;
		КонецЕсли;
		ДанныеСтроки = Форма[ОписаниеКТ.Реквизиты.КроссТаблица].НайтиПоИдентификатору(ИдентификаторСтроки);
	КонецЕсли;
	
	//
	//ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	
	СтруктураДействий = Новый Структура("УстановитьКоэффициентЕдиницыИзмерения,ПересчитатьПоКоэффициенту");
	ОбработатьСтрокуТЧ(Форма, ОписаниеКТ, Форма, ДанныеСтроки, АктивныеПериоды, СтруктураДействий);
	Если Аналитики.мСтрока.Найти(ИмяАналитики) <> неопределено Тогда
		КТ_ПриИзмененииКоличестваСуммыСтроки(ОписаниеКТ, Форма, ДанныеСтроки, ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

Процедура УстановитьУсловноеОформлениеКТ(ОписаниеКТ, Форма) экспорт
	
	// статья+аналитики
	КроссТаблицыУХ.УстановитьУсловноеОформлениеДополнительныхАналитикКТ(ОписаниеКТ, Форма);
	Если ОписаниеКТ.ЕстьРасшифровка Тогда
		КроссТаблицыУХ.УстановитьУсловноеОформлениеДополнительныхАналитикРасшифровки(ОписаниеКТ, Форма);
	КонецЕсли;
	
	// Планирование закупок
	Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
		НоменклатураВСтроке = КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Номенклатура");
		НоменклатураВРасшифровке = КроссТаблицыУХКлиентСервер.ЕстьАналитикаРасшифровки(ОписаниеКТ, "Номенклатура");
		Если НоменклатураВСтроке Тогда
		
			// заполняем массив оформляемых элементов
			ЭлементыНедоступныеДляТоварнойКатегории = Новый Массив;
			ЭлементыНедоступныеДляНоменклатуры = Новый Массив;
			
			// добавляем доп.реквизиты
			ДопРеквизиты = Новый Структура("Цена, Коэффициент, ЕдиницаИзмерения");
			Для каждого КлючЗначение Из ДопРеквизиты Цикл
				ИмяЭлемента = ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Реквизит+КлючЗначение.Ключ;
				Если Форма.Элементы.Найти(ИмяЭлемента)<> неопределено Тогда
					ЭлементыНедоступныеДляТоварнойКатегории.Добавить(ИмяЭлемента);
				КонецЕсли; 
			КонецЦикла; 
			
			// Ресурсы
			ИмяЭлемента = ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Ресурс+"Количество";
			Если Форма.Элементы.Найти(ИмяЭлемента)<> неопределено Тогда
				ЭлементыНедоступныеДляТоварнойКатегории.Добавить(ИмяЭлемента);
			КонецЕсли; 
			
			//
			АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
			
			Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
			
				// Формируем массив реквизитов Количество* и заполняем ими массив оформляемых элементов
				МассивРесурсов = Новый Массив();
				МассивРесурсов.Добавить(ОписаниеКТ.Схема.Ресурсы.Количество);
				
				МассивПоказателей = Новый Массив();
				МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Исходное);
				МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Изменение);
				МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Результат);
				
				МассивРеквизитов = КроссТаблицыУХКлиентСервер.ПолучитьРеквизиты(МассивРесурсов, МассивПоказателей, АктивныеПериоды);
				Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
					ЭлементыНедоступныеДляТоварнойКатегории.Добавить(ОписаниеКТ.Элементы.КроссТаблица+ИмяРеквизита);
				КонецЦикла; 
			
			КонецЕсли; 
			
			Если ОписаниеКТ.Схема.Ресурсы.Свойство("Сумма") Тогда
			
				// Формируем массив реквизитов Количество* и заполняем ими массив оформляемых элементов
				МассивРесурсов = Новый Массив();
				МассивРесурсов.Добавить(ОписаниеКТ.Схема.Ресурсы.Сумма);
				
				МассивПоказателей = Новый Массив();
				МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Исходное);
				МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Изменение);
				МассивПоказателей.Добавить(ОписаниеКТ.Схема.Показатели.Результат);
				
				МассивРеквизитов = КроссТаблицыУХКлиентСервер.ПолучитьРеквизиты(МассивРесурсов, МассивПоказателей, АктивныеПериоды);
				Для каждого ИмяРеквизита Из МассивРеквизитов Цикл
					ЭлементыНедоступныеДляНоменклатуры.Добавить(ОписаниеКТ.Элементы.КроссТаблица+ИмяРеквизита);
				КонецЦикла; 
			
			КонецЕсли; 
			
			// Если нечего оформлять, то завершаемся
			Если ЭлементыНедоступныеДляТоварнойКатегории.Количество() > 0 Тогда
				
				// Устанавливаем условное оформление по найденным полям
				Элемент = Форма.УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяОформляемогоЭлемента Из ЭлементыНедоступныеДляТоварнойКатегории Цикл
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, ИмяОформляемогоЭлемента);
				КонецЦикла; 
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеКТ.Реквизиты.КроссТаблица+".ЭтоКатегорияНоменклатуры");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;
				                                                             
				Элемент.Оформление.УстановитьЗначениеПараметра("Текст",					НСтр("ru = '<Нет>'"));
				Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",		Истина);
				Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",	Ложь);
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 			ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
				
			КонецЕсли; 
			
			// Сумма недоступна для номенклатуры. Доступны кол-во и Цена.
			Если ЭлементыНедоступныеДляНоменклатуры.Количество() > 0 Тогда
				
				// Устанавливаем условное оформление по найденным полям
				Элемент = Форма.УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяОформляемогоЭлемента Из ЭлементыНедоступныеДляНоменклатуры Цикл
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, ИмяОформляемогоЭлемента);
				КонецЦикла; 
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеКТ.Реквизиты.КроссТаблица+".ЭтоКатегорияНоменклатуры");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Ложь;
				                                                             
				Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",		Истина);
				
			КонецЕсли; 
				
		ИначеЕсли НоменклатураВРасшифровке Тогда
			
			// заполняем массив оформляемых элементов
			ЭлементыНедоступныеДляТоварнойКатегории = Новый Массив;
			ЭлементыНедоступныеДляНоменклатуры = Новый Массив;
			
			// добавляем доп.реквизиты
			ДопРеквизиты = Новый Структура("Цена, Коэффициент, ЕдиницаИзмерения");
			Для каждого КлючЗначение Из ДопРеквизиты Цикл
				ИмяЭлемента = ОписаниеКТ.Элементы.Расшифровка+"_"+КлючЗначение.Ключ;
				Если Форма.Элементы.Найти(ИмяЭлемента)<> неопределено Тогда
					ЭлементыНедоступныеДляТоварнойКатегории.Добавить(ИмяЭлемента);
				КонецЕсли; 
			КонецЦикла; 
			
			// ресурсы
			//ИмяЭлемента = ОписаниеКТ.Элементы.Расшифровка+"_"+"Количество";
			//Если Форма.Элементы.Найти(ИмяЭлемента)<> неопределено Тогда
			//	ЭлементыНедоступныеДляТоварнойКатегории.Добавить(ИмяЭлемента);
			//КонецЕсли; 
			
			//
			Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
				ЭлементыНедоступныеДляТоварнойКатегории.Добавить(ОписаниеКТ.Элементы.Расшифровка+"_"+"Количество");
			КонецЕсли; 
			
			Если ОписаниеКТ.Схема.Ресурсы.Свойство("Сумма") Тогда
				ЭлементыНедоступныеДляНоменклатуры.Добавить(ОписаниеКТ.Элементы.Расшифровка+"_"+"Сумма");
			КонецЕсли; 
			
			// если нечего оформлять, то завершаемся
			Если ЭлементыНедоступныеДляТоварнойКатегории.Количество() > 0 Тогда
				
				// Устанавливаем условное оформление по найденным полям
				Элемент = Форма.УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяОформляемогоЭлемента Из ЭлементыНедоступныеДляТоварнойКатегории Цикл
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, ИмяОформляемогоЭлемента);
				КонецЦикла; 
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеКТ.Реквизиты.Расшифровка+".ЭтоКатегорияНоменклатуры");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Истина;
				                                                             
				Элемент.Оформление.УстановитьЗначениеПараметра("Текст",					НСтр("ru = '<Нет>'"));
				Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",		Истина);
				Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",	Ложь);
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 			ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
				
			КонецЕсли; 
			
			// если нечего оформлять, то завершаемся
			Если ЭлементыНедоступныеДляНоменклатуры.Количество() > 0 Тогда
				
				// Устанавливаем условное оформление по найденным полям
				Элемент = Форма.УсловноеОформление.Элементы.Добавить();
				Для каждого ИмяОформляемогоЭлемента Из ЭлементыНедоступныеДляНоменклатуры Цикл
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, ИмяОформляемогоЭлемента);
				КонецЦикла; 
				
				ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеКТ.Реквизиты.Расшифровка+".ЭтоКатегорияНоменклатуры");
				ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
				ОтборЭлемента.ПравоеЗначение = Ложь;
				                                                             
				Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",		Истина);
				
			КонецЕсли; 
			
		КонецЕсли;
		
	КонецЕсли;
	// Условное оформление характеристик.
	Если ОписаниеКТ.Схема.СтруктураАналитик.Свойство("Характеристика") Тогда
		// Добавление группы И.
		ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
		ЭлементОтбораУО = ЭлементУО.Отбор.Элементы;
		ТипГруппыИ = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементОтбораУО, "Группа И", ТипГруппыИ);
		// Установка оформляемых полей.
		ИмяЭлемента = ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Измерение+"Характеристика";
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяЭлемента);
		// Добавление отбора незаполненной характеристики.
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеКТ.Реквизиты.КроссТаблица+".Характеристика");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		// Добавление отбора использования характеристик.
		ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОписаниеКТ.Реквизиты.КроссТаблица+".ХарактеристикиИспользуются");
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = Истина;
		// Установка способа оформления.
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	Иначе
		// Нет поля Характеристика. Не добавляем условное оформление.
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьНачальныеОстаткиПланов(ОписаниеКТ, Форма, ДанныеШапки) экспорт
	
	ЭлементКТ = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица];
	ТаблицаКТ = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
	
	ИдентификаторСтроки = ЭлементКТ.ТекущаяСтрока;
	
	Если ИдентификаторСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКТ = ТаблицаКТ.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаКТ = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	РесурсЗаполнения = "Сумма";
	
	//
	РеквизитыШапки = ОписаниеКТ.Схема.Аналитики.Шапка;
	РеквизитыСтроки = ОписаниеКТ.Схема.Аналитики.Строка;
	
	//
	ЕстьВалютаВШапке = КроссТаблицыУХКлиентСервер.ЕстьАналитикаШапки(ОписаниеКТ, "Валюта");
	Если ЕстьВалютаВШапке Тогда
		РеквизитыШапки = СтрЗаменить(РеквизитыШапки, "Валюта,", "");
		РеквизитыШапки = СтрЗаменить(РеквизитыШапки, ",Валюта,", "");
		РеквизитыШапки = СтрЗаменить(РеквизитыШапки, ",Валюта", "");
		РеквизитыШапки = СтрЗаменить(РеквизитыШапки, "Валюта", "");
	КонецЕсли;
	
	//
	РеквизитыПоиска = "";
	Если ЗначениеЗаполнено(РеквизитыШапки) Тогда
		РеквизитыПоиска = РеквизитыШапки;
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСтроки) Тогда
		РеквизитыПоиска = РеквизитыПоиска + ?(ЗначениеЗаполнено(РеквизитыПоиска),",","") + РеквизитыСтроки;
	КонецЕсли;
	
	//
	СтруктураПоиска = Новый Структура(РеквизитыПоиска);
	Если ЗначениеЗаполнено(РеквизитыШапки) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеШапки, РеквизитыШапки);
	КонецЕсли;
	Если ЕстьВалютаВШапке Тогда
		СтруктураПоиска.Вставить("Валюта", ДанныеШапки.ВалютаДокумента);
	КонецЕсли;
	Если ЗначениеЗаполнено(РеквизитыСтроки) Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаКТ, РеквизитыСтроки);
	КонецЕсли;
	
	//
	ВсяТаблица = Форма.ТаблицаПлановКЗаполнению.Выгрузить(СтруктураПоиска);
	ТаблицаСтроки = ВсяТаблица.Скопировать();
	
	//
	РеквизитыШСК = ОписаниеКТ.Схема.Аналитики.Колонка; // ШСК = Шапки Строки Колонки
	Если ЗначениеЗаполнено(ОписаниеКТ.Схема.Аналитики.Шапка) Тогда
		РеквизитыШСК = РеквизитыШСК + ?(ЗначениеЗаполнено(РеквизитыШСК), ",", "")
			+ ОписаниеКТ.Схема.Аналитики.Шапка;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОписаниеКТ.Схема.Аналитики.Строка) Тогда
		РеквизитыШСК = РеквизитыШСК + ?(ЗначениеЗаполнено(РеквизитыШСК), ",", "")
			+ ОписаниеКТ.Схема.Аналитики.Строка;
	КонецЕсли;
	
	РеквизитыШСК = СтрЗаменить(РеквизитыШСК, "Период", "ПериодОтчета");
	
	ТаблицаСтроки.Свернуть(РеквизитыШСК, РесурсЗаполнения);
	
	// Обновляем строки
	КТ = КроссТаблицыУХКлиентСервер;
	
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	ПоискПоПериоду = Новый Структура("ПериодОтчета");
	Для Каждого ПериодКТ Из АктивныеПериоды Цикл
		
		//
		ПоискПоПериоду.ПериодОтчета = ПериодКТ.Период;
		СтрокиПериода = ТаблицаСтроки.НайтиСтроки(ПоискПоПериоду);
		
		Если СтрокиПериода.Количество() = 0 Тогда
			Исходное = 0;
			Разница = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_");
		Иначе
			Исходное = СтрокиПериода[0][РесурсЗаполнения];
			Разница = КТ.Ресурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_") - Исходное;
		КонецЕсли;
		
		// Изменяем колонку Изменено
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_", Исходное);
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_", Разница);
		
	КонецЦикла;
		
	// Обновляем расшифровку
	Если ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0 Тогда
		
		Расшифровка = Форма[ОписаниеКТ.Реквизиты.Расшифровка];
		СтруктураПоиска = Новый Структура("ИДСтроки", СтрокаКТ.ИДСтроки);
		СтрокиРасшифровки = Расшифровка.НайтиСтроки(СтруктураПоиска);
		
		//
		ПериодыКТ = Форма[ОписаниеКТ.Реквизиты.Периоды];
		
		РеквизитыПоиска = ОписаниеКТ.Схема.Аналитики.Расшифровка;
		СтруктураПоиска = Новый Структура(РеквизитыПоиска);
		СтруктураПоиска.Вставить("ПериодОтчета");
		
		Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
			
			//
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаРасшифровки, РеквизитыПоиска);
			
			//
			СтрокаПериод = ПолучитьПериодПоИдентификаторуКолонки(ПериодыКТ, СтрокаРасшифровки.ИДПериода);
			СтруктураПоиска.ПериодОтчета = СтрокаПериод;
			
			//
			ДанныеЗаполнения = ВсяТаблица.Скопировать(СтруктураПоиска);
			ДанныеЗаполнения.Свернуть(РеквизитыПоиска+",ПериодОтчета", РесурсЗаполнения);
			
			//
			Если ДанныеЗаполнения.Количество() = 0 Тогда
				
				Исходное = 0;
				Разница = СтрокаРасшифровки.Сумма;
			Иначе
				Исходное = ДанныеЗаполнения[0][РесурсЗаполнения];
				Разница = СтрокаРасшифровки.Сумма - Исходное;
			КонецЕсли;
			
			// Изменяем колонку Изменено
			СтрокаРасшифровки.СуммаИсходное = Исходное;
			СтрокаРасшифровки.СуммаИзменение = Разница;
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРасшифровкуПоСтроке(ОписаниеКТ, Форма, ДанныеШапки) экспорт
	
	ЭлементКТ = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица];
	ТаблицаКТ = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
	
	ИдентификаторСтроки = ЭлементКТ.ТекущаяСтрока;
	
	Если ИдентификаторСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаКТ = ТаблицаКТ.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаКТ = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	КТ = КроссТаблицыУХКлиентСервер;
	
	//
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	ПоискПоПериоду = Новый Структура("ПериодОтчета");
	Для Каждого ПериодКТ Из АктивныеПериоды Цикл
		
		// Изменяем колонку Изменено
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИсходное_", 	0);
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаИзменение_",	0);
		КТ.УстановитьРесурс(СтрокаКТ, ПериодКТ, "СуммаРезультат_",	0);
		
	КонецЦикла;
		
	// Обновляем расшифровку
	Если ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0 Тогда
		
		Расшифровка = Форма[ОписаниеКТ.Реквизиты.Расшифровка];
		СтруктураПоиска = Новый Структура("ИДСтроки", СтрокаКТ.ИДСтроки);
		СтрокиРасшифровки = Расшифровка.НайтиСтроки(СтруктураПоиска);
		
		Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
			Расшифровка.Удалить(СтрокаРасшифровки);
		КонецЦикла; 
		
	КонецЕсли;
	
	// Расчет итогов по текущей строке КТ
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, АктивныеПериоды);
	
	// Расчет иных итогов
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры

// Процедура устанавливает отбор статей бюджетов по функциональным направлениям ЦФО
Процедура ОбновитьОтборПоФункциональнымНаправлениям(ОписаниеКТ, Форма, ЦФО) экспорт
	
	МассивЭлементов = Новый Массив;
	
	Если КроссТаблицыУХКлиентСервер.ЕстьАналитикаШапки(ОписаниеКТ, "СтатьяБюджета") Тогда
		Если Форма.Элементы.Найти("СтатьяБюджета") <> неопределено Тогда
			МассивЭлементов.Добавить(Форма.Элементы.СтатьяБюджета);
		КонецЕсли;
	ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "СтатьяБюджета") Тогда
		
		ЭлементСтатьяБюджета = Форма.Элементы[КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета")];
		МассивЭлементов.Добавить(ЭлементСтатьяБюджета);
		
	ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаРасшифровки(ОписаниеКТ, "СтатьяБюджета") Тогда
		
		ЭлементСтатьяБюджета = Форма.Элементы[КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "СтатьяБюджета")];
		МассивЭлементов.Добавить(ЭлементСтатьяБюджета);
		
	КонецЕсли; 
	
	ОбщегоНазначенияОПККлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(ЦФО, МассивЭлементов);
	
КонецПроцедуры

Процедура ЗаполнитьДопустимыйСписокВыбораСтатейПоНаправлению(ОписаниеКТ, Форма, ПриходРасход) экспорт
	
	Если ОписаниеКТ.Схема.Аналитики.мШапка.Найти("ПриходРасход") <> неопределено Тогда
		
		Список = Форма[ОписаниеКТ.ПрефиксДляСпискаСвязейПараметровВыбора+"ПриходРасход"];
		Список.Очистить();
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.ПустаяСсылка"));
		
		Если ЗначениеЗаполнено(ПриходРасход) Тогда
			Список.Добавить(ПриходРасход);
		Иначе
			Список.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход"));
			Список.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВидыАналитикСтатьиБюджета(ОписаниеКТ, Форма) экспорт
	
	Если ОписаниеКТ.Схема.Аналитики.мШапка.Найти("СтатьяБюджета") <> неопределено Тогда
		ОбработатьИзменениеСтатьиВШапке(ОписаниеКТ, Форма, "СтатьяБюджета");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
// К удалению. Приводит значения аналитик к новым типам или очищает их
Процедура КУдалению_УстановитьАналитикиСтатьи(ДанныеСтроки, ВидБюджета, ШаблонИмениРеквизита, Знач КолонкаСтатья = Неопределено, ТолькоЛимитируемыеАналитики = Ложь, ПараметрыЛимитирования = неопределено)
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если КолонкаСтатья = Неопределено Тогда
		ПараметрыБюджета = ВстраиваниеОПККлиентСерверПереопределяемый.ПараметрыБюджета(ВидБюджета);
		КолонкаСтатья = ПараметрыБюджета.КолонкаСтатья;
	КонецЕсли;
	
	ОписаниеСтатьи = Новый Структура("ТолькоЛимитируемыеАналитики", ТолькоЛимитируемыеАналитики);
	ОписаниеСтатьи.Вставить("КолвоАналитик", АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи());
	ОписаниеСтатьи.Вставить("Аналитики", Новый Структура);
	ОписаниеСтатьи.Аналитики.Вставить("ВидАналитикиИмяРеквизита", "ВидАналитики%1");
	
	АналитикиСтатейБюджетовУХКлиентСервер.ЗаполнитьСведенияОВидахАналитик(ДанныеСтроки[КолонкаСтатья], ДанныеСтроки, ОписаниеСтатьи, ПараметрыЛимитирования);
	
	Для Индекс = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		ПолеАналитики = СтрШаблон(ШаблонИмениРеквизита, Индекс);
		Если ДанныеСтроки.Свойство("ВидАналитики" + Индекс + "ТипЗначения") Тогда
			Если ЗначениеЗаполнено(ДанныеСтроки["ВидАналитики" + Индекс + "ТипЗначения"]) Тогда
				ДанныеТекущегоПоля = ДанныеСтроки["ВидАналитики" + Индекс + "ТипЗначения"].ПривестиЗначение(ДанныеСтроки[ПолеАналитики]);
				ДанныеСтроки[ПолеАналитики] = ДанныеТекущегоПоля;
			Иначе
				ДанныеСтроки[ПолеАналитики] = Неопределено
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Аналитика123456
	
Процедура ОбработатьИзменениеАналитикиСтатьиВШапке(ОписаниеКТ, Форма, ИмяАналитикиСтатьи)
	
	// Заполняем ВидАналитики*
	ИменаРеквизитовОбъекта = "СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6";
	ИменаРеквизитовФормы = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона(
		"ВидАналитики%1, ВидАналитики%1ТипЗначения, ВидАналитики%1Наименование, ВидАналитики%1ПараметрыВыбора, ВидАналитики%1СвязиАналитик");
	Данные = Новый Структура(ИменаРеквизитовОбъекта+","+ИменаРеквизитовФормы);
	ЗаполнитьЗначенияСвойств(Данные, Форма.Объект,	ИменаРеквизитовОбъекта);
	ЗаполнитьЗначенияСвойств(Данные, Форма, 		ИменаРеквизитовФормы);
	
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи Тогда
		ПараметрыЛимитирования = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьПараметрыЛимитированияСтатьиБюджета(Форма, "СтатьяБюджета");
	КонецЕсли;
	
	// Устанавливается ВидАналитики1 и ВидАналитики1ТипЗначения
	КУдалению_УстановитьАналитикиСтатьи(
		Данные, 
		КроссТаблицыУХ.ПолучитьАналитикуШапки(ОписаниеКТ, Форма, "Предназначение"),
		"Аналитика%1", "СтатьяБюджета", ОписаниеКТ.ТолькоЛимитируемыеСтатьи, ПараметрыЛимитирования);
	
	ЗаполнитьЗначенияСвойств(Форма, Данные, ИменаРеквизитовФормы);
	
	//
	УстановитьСвойстваЭлементовАналитикСтатьиБюджетовВШапке(Форма, ОписаниеКТ.ДанныеШапкиРасположеныВОбъекте);
	
	УстановитьАналитикуПоАналитикеСтроки(ОписаниеКТ, Форма, Форма.Объект, ИмяАналитикиСтатьи, ОписаниеКТ.Схема.Аналитики.мШапка, Истина);
	
КонецПроцедуры

Процедура ОбработатьИзменениеАналитикиСтатьиВКроссТаблице(ОписаниеКТ, Форма, ИдентификаторСтроки, ИмяАналитикиСтатьи)
	
	Если ИдентификаторСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Строка = Форма[ОписаниеКТ.Реквизиты.КроссТаблица].НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьАналитикуПоАналитикеСтроки(ОписаниеКТ, Форма, Строка, ИмяАналитикиСтатьи, ОписаниеКТ.Схема.Аналитики.мСтрока);
	
КонецПроцедуры

Процедура ОбработатьИзменениеАналитикиСтатьиВРасшифровкеКТ(ОписаниеКТ, Форма, ИдентификаторСтроки, ИмяАналитикиСтатьи)
	
	Если ИдентификаторСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Строка = Форма[ОписаниеКТ.Реквизиты.Расшифровка].НайтиПоИдентификатору(ИдентификаторСтроки);
	Если Строка = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьАналитикуПоАналитикеСтроки(ОписаниеКТ, Форма, Строка, ИмяАналитикиСтатьи, ОписаниеКТ.Схема.Аналитики.мРасшифровка);
	
КонецПроцедуры

Процедура УстановитьАналитикуПоАналитикеСтроки(ОписаниеКТ, Форма, Данные, ИмяАналитикиСтатьи, МассивАналитик, ЭтоШапка = Ложь)
	//
	ТипВведенногоЗначения = ТипЗнч(Данные[ИмяАналитикиСтатьи]);
	Если ТипВведенногоЗначения = Тип("неопределено") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка реквизитов документа по значениям аналитик статьи бюджета
	Для Каждого ИмяАналитики Из МассивАналитик Цикл
		
		Если стрНачинаетсяС(ИмяАналитики, "Аналитика") ИЛИ ИмяАналитики = "СтатьяБюджета" Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеАналитики = ОписаниеКТ.Схема.СтруктураАналитик[ИмяАналитики];
		
		ОписаниеРеквизита = ОписаниеКТ.Схема.РеквизитПоАналитике[ОписаниеАналитики.Аналитика];
		
		Если ОписаниеРеквизита.Тип.СодержитТип(ТипВведенногоЗначения) Тогда
			Если ЭтоШапка = Истина Тогда
				Данные[ОписаниеРеквизита.ИмяРеквизитаШапки] = Данные[ИмяАналитикиСтатьи];
			Иначе
				Данные[ИмяАналитики] = Данные[ИмяАналитикиСтатьи];
			КонецЕсли;
			ОбщийОбработчикИзмененияАналитик(ОписаниеКТ, Форма, ИмяАналитики);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

Процедура ИзменениеАналитики_СтатьяБюджета(ОписаниеКТ, Форма, ИмяЭлемента)
	Элементы = Форма.Элементы;
	Аналитики = ОписаниеКТ.Схема.Аналитики;
	Если Аналитики.мШапка.Найти("СтатьяБюджета") <> неопределено Тогда
		ОбработатьИзменениеСтатьиВШапке(ОписаниеКТ, Форма, ИмяЭлемента);
	ИначеЕсли Аналитики.мСтрока.Найти("СтатьяБюджета") <> неопределено Тогда
		// В строке
		ЭлементКроссТаблицы = Элементы.Найти(ОписаниеКТ.Элементы.КроссТаблица);
		Если ЭлементКроссТаблицы <> неопределено Тогда
			ОбработатьИзменениеСтатьиВКроссТаблице(ОписаниеКТ, Форма, ЭлементКроссТаблицы.ТекущаяСтрока, ИмяЭлемента);
		КонецЕсли;
	ИначеЕсли Аналитики.мРасшифровка.Найти("СтатьяБюджета") <> неопределено Тогда
		// В расшифровке
		ЭлементРасшифровка = Элементы.Найти(ОписаниеКТ.Элементы.Расшифровка);
		Если ЭлементРасшифровка <> неопределено Тогда
			ОбработатьИзменениеСтатьиВРасшифровкеКТ(ОписаниеКТ, Форма, ЭлементРасшифровка.ТекущаяСтрока, ИмяЭлемента);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеСтатьиВШапке(ОписаниеКТ, Форма, ИмяЭлемента)
	
	// Заполняем ВидАналитики*
	ИменаРеквизитовОбъекта = "СтатьяБюджета,"+ АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	ИменаРеквизитовФормы = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона(
		"ВидАналитики%1, ВидАналитики%1ТипЗначения, ВидАналитики%1Наименование, ВидАналитики%1ПараметрыВыбора, ВидАналитики%1СвязиАналитик");
	
	Данные = Новый Структура(ИменаРеквизитовОбъекта+","+ИменаРеквизитовФормы);
	ЗаполнитьЗначенияСвойств(Данные, Форма.Объект,	ИменаРеквизитовОбъекта);
	ЗаполнитьЗначенияСвойств(Данные, Форма, 		ИменаРеквизитовФормы);
	
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи Тогда
		ПараметрыЛимитирования = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьПараметрыЛимитированияСтатьиБюджета(Форма, ИмяЭлемента);
	КонецЕсли;
	
	// Устанавливается ВидАналитики1 и ВидАналитики1ТипЗначения
	КУдалению_УстановитьАналитикиСтатьи(
		Данные, 
		КроссТаблицыУХ.ПолучитьАналитикуШапки(ОписаниеКТ, Форма, "Предназначение"),
		"Аналитика%1", "СтатьяБюджета", ОписаниеКТ.ТолькоЛимитируемыеСтатьи, ПараметрыЛимитирования);
	
	ЗаполнитьЗначенияСвойств(Форма, Данные, ИменаРеквизитовФормы);
	
	//
	УстановитьСвойстваЭлементовАналитикСтатьиБюджетовВШапке(Форма, ОписаниеКТ.ДанныеШапкиРасположеныВОбъекте);
	УстановитьСвойстваЭлементовНоменклатураВШапке(Форма);
	
	// Если выбрана статья с аналитикой Номенклатура, а номенклатура в строке уже заполнена, то надо АналитикуСтатьи заполнить
	
	//
	ЗаполненныеАналитики = ПолучитьЗаполненныеЗначенияАналитик(ОписаниеКТ, Форма, 1);
	
	Для Поз = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если НЕ ЗначениеЗаполнено(Форма["ВидАналитики"+Поз]) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ИмяРеквизита = "Аналитика" + Поз;
		ТипАналитикиСтатьи = Форма["ВидАналитики" + Поз + "ТипЗначения"];
		
		//
		Для Каждого КлючЗначение Из ЗаполненныеАналитики Цикл
			ТипЗаполненнойАналитики = ТипЗнч(КлючЗначение.Значение);
			Если ТипЗаполненнойАналитики = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
				Продолжить;
			ИначеЕсли ТипАналитикиСтатьи.СодержитТип(ТипЗаполненнойАналитики) Тогда
				Форма.Объект[ИмяРеквизита] = КлючЗначение.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьСвойстваЭлементовАналитикСтатьиБюджетовВШапке(Форма, ДанныеШапкиРасположеныВОбъекте)

	Элементы = Форма.Элементы;
	// устанавливаем свойства элементов исходя из ВидАналитики*
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		ВидАналитики = Форма.ЭтотОбъект["ВидАналитики" + Сч];
		ВидАналитикиТипЗначения = Форма.ЭтотОбъект["ВидАналитики" + Сч+"ТипЗначения"];
		Элемент = Элементы["Аналитика" + Сч];
		
		АналитикаТребуется = ЗначениеЗаполнено(ВидАналитики);
		
		//
		ФормыУХКлиентСервер.УстановитьАвтоОтметкуЗаполненияЭлемента(Элемент, АналитикаТребуется);
		
		Элемент.АвтоВыборНезаполненного = АналитикаТребуется;
		Элемент.Видимость = АналитикаТребуется;
		Элемент.ТолькоПросмотр = НЕ АналитикаТребуется;
		Элемент.ПропускатьПриВводе = НЕ АналитикаТребуется;
		
		Если АналитикаТребуется Тогда
			
			Элемент.ОграничениеТипа = ВидАналитики.ТипЗначения;
			Элемент.ПодсказкаВвода = Строка(ВидАналитикиТипЗначения);
			
			// Установка владельца аналитики
			СвязиПараметровВыбора = Новый Массив;
			ТипАналитики = ВидАналитики.ТипЗначения.Типы()[0];
			Если ТипАналитики = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
				СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "ВидАналитики" + Сч));
			ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипАналитики) Тогда
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипАналитики);
				Если ОбъектМетаданных.Владельцы.Количество() Тогда
					ТипыВладельцев = ОбъектМетаданных.СтандартныеРеквизиты.Владелец.Тип;
					Для ВлСч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл // Ищем поле субконто с тем же типом, что и владелец
						
						//
						ТекВидАналитики = Форма.ЭтотОбъект["ВидАналитики" + ВлСч];
						ТекВидАналитикиТипЗначения = Форма.ЭтотОбъект["ВидАналитики" + ВлСч+"ТипЗначения"];
						
						Если Не ЗначениеЗаполнено(ТекВидАналитики) Тогда
							Продолжить;
						ИначеЕсли ТипыВладельцев.СодержитТип(ТекВидАналитикиТипЗначения.Типы()[0]) Тогда
							СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Аналитика" + ВлСч));
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;				
			КонецЕсли;
			Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
			
		Иначе
			Если ДанныеШапкиРасположеныВОбъекте Тогда
				Форма.Объект["Аналитика" + Сч] = Неопределено;
			Иначе
				Форма["Аналитика" + Сч] = Неопределено;
			КонецЕсли;
			Элемент.ПодсказкаВвода = НСтр("ru = '<не используется>'");
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьСвойстваЭлементовНоменклатураВШапке(Форма)
	
	Объект = Форма.Объект;
	Элемент = Форма.Элементы.Характеристика;
	
	ИспользуютсяАналитики = НЕ Форма.Объект.ЭтоКатегорияНоменклатуры
		И Форма.Объект.ХарактеристикиИспользуются;
		
	Элемент.ТолькоПросмотр = НЕ ИспользуютсяАналитики;
	Элемент.ПропускатьПриВводе = НЕ ИспользуютсяАналитики;
	Элемент.ПодсказкаВвода = ?(НЕ ИспользуютсяАналитики, НСтр("ru = '<не используется>'"), "");
	
	Если Элемент.ТолькоПросмотр Тогда
		Если Элемент.АвтоОтметкаНезаполненного <> Ложь Тогда
			Элемент.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
		Если Элемент.ОтметкаНезаполненного Тогда
			Элемент.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	Иначе
		Элемент.АвтоОтметкаНезаполненного = неопределено;
		Если ЗначениеЗаполнено(Объект.Характеристика) И НЕ Элемент.ОтметкаНезаполненного Тогда
			Элемент.ОтметкаНезаполненного = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.Характеристика) И Элемент.ОтметкаНезаполненного Тогда
			Элемент.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьИзменениеСтатьиВРасшифровкеКТ(ОписаниеКТ, Форма, ИдентификаторСтроки, ИмяЭлемента)
	
	Если ИдентификаторСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Строка = Форма[ОписаниеКТ.Реквизиты.Расшифровка].НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи Тогда
		ПараметрыЛимитирования = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьПараметрыЛимитированияСтатьиБюджета(Форма, ИмяЭлемента);
	КонецЕсли;
	
	//
	КУдалению_УстановитьАналитикиСтатьи(
		Строка,
		КроссТаблицыУХ.ПолучитьАналитикуШапки(ОписаниеКТ, Форма, "Предназначение"),
		"Аналитика%1", "СтатьяБюджета", ОписаниеКТ.ТолькоЛимитируемыеСтатьи, ПараметрыЛимитирования);
		
	// Если приход/расход и Статья бюджета на одном уровне, то заполняем ПриходРасход по статье
	ИнфоСтатьяБюджета = ОписаниеКТ.Схема.СтруктураАналитик.СтатьяБюджета;
	ТребуетсяЗаполнение = Ложь;
	Если ИнфоСтатьяБюджета.Свойство("ЗаполнятьПриходРасходПоСтатье", ТребуетсяЗаполнение) Тогда
		Если ТребуетсяЗаполнение Тогда
			Строка.ПриходРасход = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Строка.СтатьяБюджета, "ПриходРасход");
		КонецЕсли;
	КонецЕсли;
	
	// Если выбрана статья с аналитикой Номенклатура, а номенклатура в строке уже заполнена, то надо АналитикуСтатьи заполнить
	ЗаполненныеАналитики = ПолучитьЗаполненныеЗначенияАналитик(ОписаниеКТ, Форма, 3, Строка);
	Для Поз = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка["ВидАналитики"+Поз]) Тогда
			Продолжить;
		КонецЕсли;
		
		//
		ИмяРеквизита = "Аналитика" + Поз;
		ТипАналитикиСтатьи = Строка["ВидАналитики" + Поз + "ТипЗначения"];
		
		//
		Для Каждого КлючЗначение Из ЗаполненныеАналитики Цикл
			ТипЗаполненнойАналитики = ТипЗнч(КлючЗначение.Значение);
			Если ТипЗаполненнойАналитики = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
				Продолжить;
			ИначеЕсли ТипАналитикиСтатьи.СодержитТип(ТипЗаполненнойАналитики) Тогда
				Строка[ИмяРеквизита] = КлючЗначение.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла; 
	
КонецПроцедуры

// Функция возвращает соответствие с заполненными в документе аналитиками, находящихся на уровне Расположение или выше
//
// Параметры:
//  ОписаниеКТ  - <Структура>					- Описание кросс-таблицы
//  Форма  		- <УправляемаяФорма>			- Форма
//	Расположение- <Число> 						- 1 - в шапке; 2 - в строке; 3 - в расшифровке
//	СтрокаДанных- <ДанныеФормыЭлементКоллекции> - Строка данных. Обязательна для 2 и 3
//
// Возвращаемое значение:
//   <Соответствие>   - ВидАналитикиОперПланирования, ЗначениеАналитики
//
Функция ПолучитьЗаполненныеЗначенияАналитик(ОписаниеКТ, Форма, Расположение, СтрокаДанных = неопределено)
	
	Аналитики = ОписаниеКТ.Схема.Аналитики;
	
	ЗаполненныеАналитики = Новый Соответствие;
	
	// 1 - В шапке
	Если ОписаниеКТ.ДанныеШапкиРасположеныВОбъекте Тогда
		Данные = Форма.Объект;
	Иначе
		Данные = Форма;
	КонецЕсли;
	
	ДополнитьЗаполненнымиЗначениямиАналитик(ОписаниеКТ, Аналитики.мШапка, Данные, ЗаполненныеАналитики, Истина);
	
	// 2 - в строке
	Если Расположение > 1 Тогда
		
		Если Расположение = 3 Тогда
			// Это расшифровка. Данных строки нет. Необходимо получить
			МассивСтрок = Форма[ОписаниеКТ.Реквизиты.КроссТаблица].НайтиСтроки(Новый Структура("ИДСтроки", СтрокаДанных.ИДСтроки));
			Если МассивСтрок.Количество() = 0 Тогда
				Данные = Неопределено;
			Иначе
				Данные = МассивСтрок[0];
			КонецЕсли;
		Иначе
			Данные = СтрокаДанных;
		КонецЕсли;
		
		//
		Если Данные <> неопределено Тогда
			
			ДополнитьЗаполненнымиЗначениямиАналитик(ОписаниеКТ, Аналитики.мСтрока, Данные, ЗаполненныеАналитики);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// 3 - в расшифровке
	Если Расположение > 2 Тогда
		
		ДополнитьЗаполненнымиЗначениямиАналитик(ОписаниеКТ, Аналитики.мРасшифровка, СтрокаДанных, ЗаполненныеАналитики);
		
	КонецЕсли;
	
	Возврат ЗаполненныеАналитики;
		
КонецФункции

Процедура ДополнитьЗаполненнымиЗначениямиАналитик(ОписаниеКТ, МассивАналитик, Данные, ЗаполненныеАналитики, ЭтоШапка = Ложь)
	
	Для Каждого ИмяАналитики Из МассивАналитик Цикл
		
		Аналитика = ОписаниеКТ.Схема.СтруктураАналитик[ИмяАналитики];
		ОписаниеРеквизита = ОписаниеКТ.Схема.РеквизитПоАналитике[Аналитика.Аналитика];
		Если ЭтоШапка Тогда
			Значение = Данные[ОписаниеРеквизита.ИмяРеквизитаШапки];
		Иначе
			Значение = Данные[ОписаниеРеквизита.Имя];
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Значение) Тогда
			ЗаполненныеАналитики.Вставить(Аналитика.Аналитика, Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьИзменениеНоменклатуры(ОписаниеКТ, Форма, Расположение, ДанныеСтроки, ДанныеВспомогательные)
	
	//
	Если НЕ ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
		Возврат ;
	КонецЕсли;
	
	//
	ДанныеСтроки.ЭтоКатегорияНоменклатуры = (ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории"));
	
	//
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("УстановитьЕдиницуИзменения");
	СтруктураДействий.Вставить("ПересчитатьКоличествоПоКоэффициенту");
	СтруктураДействий.Вставить("УстановитьХарактеристику");
	СтруктураДействий.Вставить(?(ДанныеСтроки.ЭтоКатегорияНоменклатуры, "УстановитьЦенуТК", "УстановитьЦену"));
	
	ОбработатьСтрокуТЧ(Форма, ОписаниеКТ,
		?(ОписаниеКТ.ДанныеШапкиРасположеныВОбъекте, Форма.Объект, Форма),	ДанныеСтроки, 
		КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма),	СтруктураДействий);
	
	Если Расположение = "Шапка" Тогда
		УстановитьСвойстваЭлементовНоменклатураВШапке(Форма);
	ИначеЕсли Расположение = "Строка" Тогда
		КТ_ПриИзмененииКоличестваСуммыСтроки(ОписаниеКТ, Форма, ДанныеСтроки, ДанныеСтроки);
	ИначеЕсли Расположение = "Расшифровка" Тогда
		Если НЕ ДанныеСтроки.ЭтоКатегорияНоменклатуры Тогда
			ДанныеСтроки.Сумма = ДанныеСтроки.Количество * ДанныеСтроки.Цена;
			ДанныеСтроки.СуммаИзменение = ДанныеСтроки.Сумма - ДанныеСтроки.СуммаИсходное;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Перенесена из модуля ЦентрализованныеЗакупкиКлиентСерверУХ
Процедура ОбработатьСтрокуТЧ(Форма, ОписаниеКТ, Объект, ДанныеСтроки, ТаблицаПериодов, СтруктураДействий)
	
	ДанныеДляПолучения = ВстраиваниеОПКПереопределяемый.ЧтоПолучитьНаСервере(Объект, ДанныеСтроки, СтруктураДействий);
	
	Если ДанныеДляПолучения.Количество() > 0 Тогда
		ЗначенияДанных = ВстраиваниеОПКПереопределяемый.ПолучитьДанныеНаСервере(ДанныеДляПолучения);
	Иначе
		ЗначенияДанных = Новый Структура;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеСтроки, "Характеристика")
		И СтруктураДействий.Свойство("УстановитьХарактеристику") Тогда
		ДанныеСтроки.Характеристика = ЗначенияДанных.Характеристика;
		ДанныеСтроки.ХарактеристикиИспользуются = ЗначенияДанных.ХарактеристикиИспользуются;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьКоэффициентЕдиницыИзмерения") Тогда
		ДанныеСтроки.Коэффициент = ЗначенияДанных.Коэффициент;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьЕдиницуИзменения") Тогда
		ДанныеСтроки.ЕдиницаИзмерения = ЗначенияДанных.ЕдиницаИзмерения;
		ДанныеСтроки.Коэффициент = ЗначенияДанных.Коэффициент;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ПересчитатьПоКоэффициенту") Тогда
		
		Если ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Номенклатура") <> неопределено Тогда
			//Пересчитать все строки по данным шапки
			СтарыйКоэффициент = ?(Форма.СтарыйКоэффициент=0,1, Форма.СтарыйКоэффициент);
			ДанныеСтроки.Коэффициент = ?(ДанныеСтроки.Коэффициент=0,1, ДанныеСтроки.Коэффициент);
			
			КоэффПересчета = СтарыйКоэффициент / ДанныеСтроки.Коэффициент;
			ДанныеСтроки.Цена = Окр(ДанныеСтроки.Цена / КоэффПересчета, 2);
			
			КроссТаблица = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
			Для Каждого ДанныеСтрокиКТ Из КроссТаблица Цикл
				ПересчитатьСтрокуПоКоэффициенту(ДанныеСтрокиКТ, ТаблицаПериодов, КоэффПересчета);
			КонецЦикла;
			Форма.СтарыйКоэффициент = ДанныеСтроки.Коэффициент;
			
		ИначеЕсли ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено Тогда
			// Пересчитать только выбранную строку
			СтарыйКоэффициент = ?(ДанныеСтроки.СтарыйКоэффициент=0, 1, ДанныеСтроки.СтарыйКоэффициент);
			Коэффициент = ?(ДанныеСтроки.Коэффициент=0,1, ДанныеСтроки.Коэффициент);
			
			КоэффПересчета = СтарыйКоэффициент / Коэффициент;
			ДанныеСтроки.Цена = Окр(ДанныеСтроки.Цена / КоэффПересчета, 2);
			
			ПересчитатьСтрокуПоКоэффициенту(ДанныеСтроки, ТаблицаПериодов, КоэффПересчета);
			ДанныеСтроки.СтарыйКоэффициент = ДанныеСтроки.Коэффициент;
			
		ИначеЕсли ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти("Номенклатура") <> неопределено Тогда
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьЦену") ИЛИ СтруктураДействий.Свойство("УстановитьЦенуТК") Тогда
		Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
			ДанныеСтроки.Цена = ЗначенияДанных.Цена * ДанныеСтроки.Коэффициент;
		Иначе
			ДанныеСтроки.Цена = 0;
		КонецЕсли;

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("УстановитьЦену") ИЛИ СтруктураДействий.Свойство("УстановитьЦенуТК")
			ИЛИ СтруктураДействий.Свойство("ЗаполнитьЦеныПериодов") Тогда
			
		ЕстьЦенаПоПериодам = Неопределено;
		ЕстьЦенаПоПериодам = Ложь; 
		
		Если ЕстьЦенаПоПериодам = Истина Тогда
			
			Цена_ = ДанныеСтроки.Цена;
			Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
				
				Если НЕ СтрокаПериода.Активная Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					
					ДанныеСтроки["Цена_" + СтрокаПериода.ИмяКолонки] = Цена_;
					
					Если ТипЗнч(ДанныеСтроки) = Тип("ДанныеФормыЭлементДерева") Тогда
						Если ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
							Для Каждого Строка_ Из ДанныеСтроки.ПолучитьЭлементы() Цикл
								Строка_.Цена = Цена_;
								Строка_["Цена_" + СтрокаПериода.ИмяКолонки] = Цена_;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСтрокуПоКоэффициенту(ДанныеСтроки, ТаблицаПериодов, КоэффПересчета)
	
	ЕстьЦенаПоПериодам = Ложь;
	
	Для каждого СтрокаПериода Из ТаблицаПериодов Цикл
		
		// Результат
		Показатель = "Результат";
		ИмяКолонкиРезультат = "Количество"+Показатель+"_" + СтрокаПериода.ИмяКолонки;
		
		ДанныеСтроки[ИмяКолонкиРезультат] = Окр(ДанныеСтроки[ИмяКолонкиРезультат] * КоэффПересчета, 3);
		
		// Исходное
		Показатель = "Исходное";
		ИмяКолонкиИсходное = "Количество"+Показатель+"_" + СтрокаПериода.ИмяКолонки;
		
		ДанныеСтроки[ИмяКолонкиИсходное] = Окр(ДанныеСтроки[ИмяКолонкиИсходное] * КоэффПересчета, 3);
			
		// Изменение
		Показатель = "Изменение";
		ИмяКолонкиИзменение = "Количество"+Показатель+"_" + СтрокаПериода.ИмяКолонки;
		
		ДанныеСтроки[ИмяКолонкиИзменение] = ДанныеСтроки[ИмяКолонкиРезультат] - ДанныеСтроки[ИмяКолонкиИсходное];
			
		Если ЕстьЦенаПоПериодам = Неопределено Тогда
			Попытка
				Цена_ = ДанныеСтроки["Цена_" + СтрокаПериода.ИмяКолонки];
				ЕстьЦенаПоПериодам = Истина;
			Исключение
				ЕстьЦенаПоПериодам = Ложь;
			КонецПопытки;
		КонецЕсли;
		
		Если ЕстьЦенаПоПериодам Тогда
			ДанныеСтроки["Цена_" + СтрокаПериода.ИмяКолонки] =
				Окр(ДанныеСтроки["Цена_" + СтрокаПериода.ИмяКолонки] / КоэффПересчета, 2);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КТ_ПриИзмененииКоличестваСуммыСтроки(ОписаниеКТ, Форма, ДанныеСтроки, ДанныеНоменклатуры)

	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	
	// Пересчет строк
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	Для каждого Период Из АктивныеПериоды Цикл
		ПриИзмененииКТ_КоличествоРезультат(ОписаниеКТ, Форма, Период, ДанныеСтроки, ДанныеНоменклатуры);
	КонецЦикла; 
	
КонецПроцедуры 

Процедура ПриИзмененииКТ_КоличествоРезультат(ОписаниеКТ, Форма, ПериодКТ, ДанныеСтроки, ДанныеНоменклатуры)

	Если ДанныеСтроки = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КТ = КроссТаблицыУХКлиентСервер;
	
	// Изменяем колонку Изменено
	КоличествоИзменение = КТ.Ресурс(ДанныеСтроки, ПериодКТ, "КоличествоРезультат_") - КТ.Ресурс(ДанныеСтроки, ПериодКТ, "КоличествоИсходное_");
	КТ.УстановитьРесурс(ДанныеСтроки, ПериодКТ, "КоличествоИзменение_", КоличествоИзменение);
	
	Если НЕ ДанныеНоменклатуры.ЭтоКатегорияНоменклатуры Тогда
		// СуммаРезультат
		СуммаРезультат = КТ.Ресурс(ДанныеСтроки, ПериодКТ, "КоличествоРезультат_") * ДанныеНоменклатуры.Цена;
		КТ.УстановитьРесурс(ДанныеСтроки, ПериодКТ, "СуммаРезультат_", СуммаРезультат);
	КонецЕсли; 
	
	// СуммаИзменение
	СуммаИзменение = КТ.Ресурс(ДанныеСтроки, ПериодКТ, "СуммаРезультат_") - КТ.Ресурс(ДанныеСтроки, ПериодКТ, "СуммаИсходное_") ;
	КТ.УстановитьРесурс(ДанныеСтроки, ПериодКТ, "СуммаИзменение_", СуммаИзменение);
	
	// Расчет итогов по текущей строке КТ
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, ДанныеСтроки, АктивныеПериоды);
	
	// Расчет иных итогов
	КТ.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры 

Функция ПолучитьПериодПоИдентификаторуКолонки(ПериодыКТ, ИдКолонки)
	
	Результат = неопределено;
	ИмяКолонки = СтрЗаменить(Строка(ИдКолонки), "-", "_");
	
	Строки = периодыКТ.найтиСтроки(Новый Структура("ИмяКолонки", ИмяКолонки));
	Если Строки.Количество() = 0 Тогда
		Возврат неопределено;
	Иначе
		Возврат Строки[0].Период;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
