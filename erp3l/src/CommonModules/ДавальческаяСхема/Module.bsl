////////////////////////////////////////////////////////////////
// Модуль "ДавальческаяСхема" содержит процедуры и функции для 
// работы с механизмом производством из давальческого сырья.
//
////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению);
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		ТипДокумента = ТипЗнч(Документ);
		
		Если Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ПроизводствоБезЗаказа")
				//++ Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ВыпускПродукции")
				//-- Устарело_Производство21
				Или ТипДокумента = Тип("ДокументОбъект.ЭтапПроизводства2_2"))
			Или ТипДокумента = Тип("ДокументОбъект.ОтчетДавальцу")
			Или ИсправлениеДокументов.ЭтоИсправительныйДокумент(Документ) Тогда
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "УслугиДавальцуКОформлению");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	#Область УслугиДавальцуКОформлению
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияУслугиДавальцуКОформлениюИзменение") Тогда
		
		ТекстыЗапроса.Добавить(
			// Анализируется ресурс "КОформлению", так как приход по этому ресурсу разделен во времени.
			"	ВЫБРАТЬ
			|		ТаблицаОстатков.Договор                        КАК Договор,
			|		ТаблицаОстатков.ЗаказДавальца                  КАК ЗаказДавальца,
			|		ТаблицаОстатков.Номенклатура                   КАК Номенклатура,
			|		ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
			|		ТаблицаОстатков.Характеристика                 КАК Характеристика,
			|		ТаблицаОстатков.КОформлениюОстаток             КАК КОформлению
			|ПОМЕСТИТЬ ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль
			|	ИЗ
			|		РегистрНакопления.УслугиДавальцуКОформлению.Остатки(,
			|				(Договор, ЗаказДавальца, Номенклатура, Характеристика) В
			|					(ВЫБРАТЬ
			|						Таблица.Договор,
			|						Таблица.ЗаказДавальца,
			|						Таблица.Номенклатура,
			|						Таблица.Характеристика
			|					ИЗ
			|						ДвиженияУслугиДавальцуКОформлениюИзменение КАК Таблица
			|					ГДЕ
			|						Таблица.КОформлениюИзменение > 0)
			|			) КАК ТаблицаОстатков
			|	ГДЕ
			|		ТаблицаОстатков.КОформлениюОстаток < 0
			|");
		
		ТекстыЗапроса.Добавить(
			"ВЫБРАТЬ
			|	Таблица.Договор,
			|	Таблица.ЗаказДавальца,
			|	Таблица.Номенклатура,
			|	Таблица.Характеристика
			|ПОМЕСТИТЬ ВТ_УслугиДавальцуКОформлениюКонтрольНаДату
			|ИЗ
			|	ДвиженияУслугиДавальцуКОформлениюИзменение КАК Таблица
			|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль
			|	ПО Таблица.Договор = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.Договор
			|		И Таблица.ЗаказДавальца = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.ЗаказДавальца
			|		И Таблица.Номенклатура = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.Номенклатура
			|		И Таблица.Характеристика = ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.Характеристика
			|
			|ГДЕ
			|	ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль.ЗаказДавальца ЕСТЬ NULL");
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ЛОЖЬ								КАК КонтрольНаДату,
			|	ТаблицаОстатков.Договор				КАК Договор,
			|	ТаблицаОстатков.ЗаказДавальца		КАК ЗаказДавальца,
			|	ТаблицаОстатков.Номенклатура		КАК Номенклатура,
			|	ТаблицаОстатков.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика		КАК Характеристика,
			|	ТаблицаОстатков.КОформлению			КАК КОформлению
			|ИЗ
			|	ВТ_УслугиДавальцуКОформлениюОперативныйКонтроль КАК ТаблицаОстатков
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ИСТИНА											КАК КонтрольНаДату,
			|	ТаблицаОстатков.Договор							КАК Договор,
			|	ТаблицаОстатков.ЗаказДавальца					КАК ЗаказДавальца,
			|	ТаблицаОстатков.Номенклатура					КАК Номенклатура,
			|	ТаблицаОстатков.Номенклатура.ЕдиницаИзмерения	КАК ЕдиницаИзмерения,
			|	ТаблицаОстатков.Характеристика					КАК Характеристика,
			|	ТаблицаОстатков.КОформлениюОстаток				КАК КОформлению
			|ИЗ
			|	РегистрНакопления.УслугиДавальцуКОформлению.Остатки(&ДатаКонтроля,
			|			(Договор, ЗаказДавальца, Номенклатура, Характеристика) В
			|				(ВЫБРАТЬ
			|					Таблица.Договор,
			|					Таблица.ЗаказДавальца,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика
			|				ИЗ
			|					ВТ_УслугиДавальцуКОформлениюКонтрольНаДату КАК Таблица)
			|	) КАК ТаблицаОстатков
			|ГДЕ
			|	&ВыполнятьКонтрольДаты
			|	И ТаблицаОстатков.КОформлениюОстаток < 0
			|";
		
		ЗапросДаты = Новый Запрос("ВЫБРАТЬ МИНИМУМ(Т.ДатаКонтроля) КАК Дата ИЗ ДвиженияУслугиДавальцуКОформлениюИзменение КАК Т");
		ЗапросДаты.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ВыборкаДаты = ЗапросДаты.Выполнить().Выбрать();
		
		ВыполнятьКонтрольДаты = ВыборкаДаты.Следующий() И ЗначениеЗаполнено(ВыборкаДаты.Дата);
		ДатаОстатка = ?(ВыполнятьКонтрольДаты, ВыборкаДаты.Дата, '00010101');
		
		Запрос.УстановитьПараметр("ДатаКонтроля", ДатаОстатка);
		Запрос.УстановитьПараметр("ВыполнятьКонтрольДаты", ВыполнятьКонтрольДаты);
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиУслугиДавальцуКОформлению");
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	#Область УслугиДавальцуКОформлению
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияУслугиДавальцуКОформлениюИзменение") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиУслугиДавальцуКОформлению Цикл
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура, СтрокаОшибки.Характеристика);
			
			Если ТипЗнч(Документ) = Тип("ДокументОбъект.ОтчетДавальцу") Тогда
				// Это проведение отчета
				Если СтрокаОшибки.КонтрольНаДату
					И ЗначениеЗаполнено(СтрокаОшибки.КОформлению) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Продукция %1 в количестве %2 %3 еще не произведена. Отчет оформляется после производства продукции.';
							|en = 'Product %1 in the amount of %2 %3 is not manufactured yet. The report is generated after the product is manufactured.'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				ИначеЕсли Не СтрокаОшибки.КонтрольНаДату
					И ЗначениеЗаполнено(СтрокаОшибки.КОформлению) Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'Продукция %1 в количестве %2 %3 еще не произведена.';
							|en = 'Product %1 in the amount of %2 %3 is not manufactured yet.'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				КонецЕсли;
			Иначе
				// Это проведение производственного документа
				Если СтрокаОшибки.КонтрольНаДату Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'На продукцию %1 уже оформлен отчет давальцу (по отчетам давальцу должно быть выпущено еще %2 %3). Производство должно быть отражено не позже месяца оформления отчета.';
							|en = 'Report to material provider is already registered for products %1 (%2 %3 must be released according to reports to material provider). Production must be recorded not later than the month of report registration.'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				Иначе
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'На продукцию %1 уже оформлен отчет давальцу (по отчетам давальцу должно быть выпущено еще %2 %3).';
							|en = 'Report to material provider is already registered for products %1 (%2 %3 must be released according to reports to material provider).'"),
						ПредставлениеНоменклатуры, -СтрокаОшибки.КОформлению, СтрокаОшибки.ЕдиницаИзмерения);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Возвращает текст запроса временной таблицы "ВтТаблицаЗаказовДавальцаПоНазначениям", в которой
// определяются "Назначение работ", "Заказ давальца", "Договор" и "Подразделение" по "Назначениям" из строки табличной части.
//
// Параметры:
//  ИмяДокумента - Строка - имя документа, возможные значения "ЭтапПроизводства2_2" и "ПроизводствоБезЗаказа",
//  ИмяТЧВыходныеИзделия - Строка - имя табличной части выходных изделий, по умолчанию "ВыходныеИзделия",
//  ИмяТЧПобочныеИзделия - Строка - имя табличной части побочных изделий, по умолчанию "ПобочныеИзделия",
//  ПутьКНазначению - Строка - путь к реквизиту "Назначение" через реквизит табличной части, по умолчанию "Назначение",
//  						   пример: "АналитикаУчетаНоменклатуры.Назначение", где "АналитикаУчетаНоменклатуры"
//  						   		   является реквизитом табличной части.
//
// Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ТекстЗапросаВтТаблицаЗаказовДавальцаПоНазначениям(
			ИмяДокумента,
			ИмяТЧВыходныеИзделия = "ВыходныеИзделия",
			ИмяТЧПобочныеИзделия = "ПобочныеИзделия",
			ПутьКНазначению = "Назначение") Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаДавальческихНазначений.Назначение КАК Назначение,
	|	ТаблицаДавальческихНазначений.НазначениеРабот КАК НазначениеРабот
	|ПОМЕСТИТЬ ВтТаблицаДавальческихНазначений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения) КАК Назначение,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ = НЕОПРЕДЕЛЕНО
	|			  ИЛИ ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ) = ТИП(Документ.ЗаказДавальца)
	|				ТОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения)
	|			ИНАЧЕ ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Договор.Назначение
	|		КОНЕЦ КАК НазначениеРабот
	|	ИЗ
	|		&ТабличнаяЧастьВыходныеИзделия КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.ОформитьОтчетДавальцу
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения) КАК Назначение,
	|		ВЫБОР
	|			КОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ = НЕОПРЕДЕЛЕНО
	|			  ИЛИ ТИПЗНАЧЕНИЯ(ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Заказ) = ТИП(Документ.ЗаказДавальца)
	|				ТОГДА ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения)
	|			ИНАЧЕ ВЫРАЗИТЬ(&Назначение КАК Справочник.Назначения).Договор.Назначение
	|		КОНЕЦ КАК НазначениеРабот
	|	ИЗ
	|		&ТабличнаяЧастьПобочныеИзделия КАК ТабличнаяЧасть
	|	ГДЕ
	|		ТабличнаяЧасть.Ссылка = &Ссылка
	|		И ТабличнаяЧасть.ОформитьОтчетДавальцу) КАК ТаблицаДавальческихНазначений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВтТаблицаДавальческихНазначений.Назначение КАК Назначение,
	|	ВтТаблицаДавальческихНазначений.НазначениеРабот КАК НазначениеРабот,
	|	ВтТаблицаДавальческихНазначений.НазначениеРабот.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ) = ТИП(Документ.ЗаказДавальца)
	|			ТОГДА ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ЗаказДавальца.ПустаяСсылка)
	|	КОНЕЦ КАК ЗаказДавальца,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ) = ТИП(Документ.ЗаказДавальца)
	|			ТОГДА ВЫРАЗИТЬ(ВтТаблицаДавальческихНазначений.НазначениеРабот.Заказ КАК Документ.ЗаказДавальца).Подразделение
	|		ИНАЧЕ ВтТаблицаДавальческихНазначений.НазначениеРабот.Договор.Подразделение
	|	КОНЕЦ КАК Подразделение
	|ПОМЕСТИТЬ ВтТаблицаЗаказовДавальцаПоНазначениям
	|ИЗ
	|	ВтТаблицаДавальческихНазначений КАК ВтТаблицаДавальческихНазначений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Назначение", СтрШаблон("ТабличнаяЧасть.%1", ПутьКНазначению));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьВыходныеИзделия", СтрШаблон("Документ.%1.%2", ИмяДокумента, ИмяТЧВыходныеИзделия));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьПобочныеИзделия", СтрШаблон("Документ.%1.%2", ИмяДокумента, ИмяТЧПобочныеИзделия));
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Настройки

// Определяет использование давальческой схемы
// 
// Параметры:
//  ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации, Неопределено - хозяйственная операция документа 
//
// Возвращаемое значение:
//   Булево - Истина, если давальческая схема используется
//
Функция ИспользуетсяДавальческаяСхема(ХозяйственнаяОперация = Неопределено) Экспорт

	ИспользуетсяДавальческаяСхема =	ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья")
	    							И (ХозяйственнаяОперация = Неопределено
	    							   Или ХозяйственнаяОперация = 
	    							   		Перечисления.ХозяйственныеОперации.ПроизводствоИзДавальческогоСырья);

	Возврат ИспользуетсяДавальческаяСхема; 

КонецФункции

#КонецОбласти

#Область Заполнение

// Заполняет реквизит "ОформитьОтчетДавальцу" в строках таблицы
//
// Параметры:
//  Таблица - ТабличнаяЧасть               - табличная часть, в котором заполняется реквизит "ОформитьОтчетДавальцу"
//  Объект  - ДокументОбъект, Неопределено - объект владелец табличной части
//		
Процедура ЗаполнитьФлагОформитьОтчетДавальцу(Таблица, Объект = Неопределено) Экспорт
	
	ХозяйственныеОперации = ?(Объект = Неопределено, Неопределено, Объект.ХозяйственнаяОперация);
	Если Не ИспользуетсяДавальческаяСхема(ХозяйственныеОперации) Тогда
		Возврат;
	КонецЕсли;	
	
	КоллекцияСтрок = Новый Массив;
	Назначения = Новый Массив;
	
	Для каждого Строка Из Таблица Цикл
		
		Если ЗначениеЗаполнено(Строка.Назначение) Тогда
			
			Назначения.Добавить(Строка.Назначение);
			
			КоллекцияСтрок.Добавить(Строка);
			
		КонецЕсли;
		
		Строка.ОформитьОтчетДавальцу = Ложь;
		
	КонецЦикла;
	
	СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(Назначения);
	
	Для Каждого Строка Из КоллекцияСтрок Цикл
		
		СвойстваНазначения = СвойстваНазначений.Получить(Строка.Назначение);
		Строка.ОформитьОтчетДавальцу = СвойстваНазначения <> Неопределено 
									   И СвойстваНазначения.ЭтоНазначениеДавальца
									   И СвойстваНазначения.ЭтоДавальческаяПродукция;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет признак ДоступноОформлениеОтчетаДавальцу в строках таблицы
// 
//	Параметры:
//		Форма   - ФормаКлиентскогоПриложения     - форма владелец обрабатываемой таблицы
//		Таблица - ДанныеФормыКоллекция - обрабатываемая таблица
//		Строки  - Массив, Неопределено - массив обрабатываемых строк
//  
Процедура ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцуВТаблице(Форма, Таблица, Строки = Неопределено) Экспорт
	
	Если Не Форма.ИспользуетсяДавальческаяСхема Тогда
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Назначение КАК Назначение
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Назначения.ТипНазначения В (
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.Давальческое21),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалы22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеМатериалыПодЭтап22),
	|						ЗНАЧЕНИЕ(Перечисление.ТипыНазначений.ДавальческоеПродукция22))
	|	И (Назначения.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	ИЛИ ТИПЗНАЧЕНИЯ(Назначения.Заказ) = ТИП(Документ.ЗаказДавальца)) КАК ДоступноОформлениеОтчетаДавальцу
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Таблица.Назначение = Назначения.Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Таблица", Таблица.Выгрузить(Строки, "НомерСтроки, Назначение"));
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Таблица[Выборка.НомерСтроки - 1], Выборка,, "НомерСтроки");
	КонецЦикла;
	
КонецПроцедуры	

// Заполняет служебный реквизит "ДоступноОформлениеОтчетаДавальцу" в строке по данным указанного назначение
//
// Параметры:
//  ТекущаяСтрока		 - Структура - данные обрабатываемой строки.
//  СтруктураДействий	 - Структура - описывает действия, где Ключ - наименование действия,
//  														   Значение - Структура - параметры действия.
//  КэшированныеЗначения - Структура - сохраненные значения параметров, используемых при обработке.
//
Процедура ЗаполнитьПризнакДоступноОформлениеОтчетаДавальцу(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Назначение) Тогда
		
		СвойстваНазначение = КэшированныеЗначения.СвойстваНазначений.Получить(ТекущаяСтрока.Назначение);
		
		Если СвойстваНазначение = Неопределено Тогда 
		
			СвойстваНазначений = Справочники.Назначения.СвойстваНазначений(ТекущаяСтрока.Назначение);
			СвойстваНазначение = СвойстваНазначений.Получить(ТекущаяСтрока.Назначение);
				
			КэшированныеЗначения.СвойстваНазначений.Вставить(ТекущаяСтрока.Назначение, СвойстваНазначение);
					
		КонецЕсли;
		
		ДоступноОформлениеОтчетаДавальцу = СвойстваНазначение.ЭтоНазначениеДавальца
										   И (ЗначениеЗаполнено(СвойстваНазначение.Договор) Или СвойстваНазначение.ЭтоДавальческаяПродукция);
		
	Иначе
		ДоступноОформлениеОтчетаДавальцу = Ложь;
	КонецЕсли;
	
	ТекущаяСтрока.ДоступноОформлениеОтчетаДавальцу = ДоступноОформлениеОтчетаДавальцу;
	
	Если Не ТекущаяСтрока.ДоступноОформлениеОтчетаДавальцу И ТекущаяСтрока.ОформитьОтчетДавальцу Тогда
		ТекущаяСтрока.ОформитьОтчетДавальцу = Ложь;
	Иначе
		ТекущаяСтрока.ОформитьОтчетДавальцу = ЗначениеЗаполнено(ТекущаяСтрока.Назначение)
											  И СвойстваНазначение.ЭтоДавальческаяПродукция;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Проверки

// Проверяет в договоре назначения заполнение подразделение
//
// Параметры:
//  Объект	- ДокументОбъект - проверяемый документ.
//  ИмяТЧ	- Строка - имя табличной части документа.
//  Отказ	- Булево - результат проверки.
//
Процедура ПроверитьПодразделениеДоговораНазначения(Объект, ИмяТЧ, Отказ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Таблица.Назначение КАК Назначение,
	|	Таблица.ОформитьОтчетДавальцу КАК ОформитьОтчетДавальцу
	|ПОМЕСТИТЬ Таблица
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.ОформитьОтчетДавальцу
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Назначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Таблица.НомерСтроки КАК НомерСтроки,
	|	Назначения.Представление КАК НазначениеПредставление
	|ИЗ
	|	Таблица КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Назначения КАК Назначения
	|		ПО Таблица.Назначение = Назначения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
	|		ПО Назначения.Договор = Договоры.Ссылка
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(Назначения.Заказ) <> ТИП(Документ.ЗаказДавальца)
	|	И ЕСТЬNULL(Договоры.Подразделение, ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|		= ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка)
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	Запрос.УстановитьПараметр("Таблица", Объект[ИмяТЧ].Выгрузить(, "НомерСтроки, Назначение, ОформитьОтчетДавальцу"));
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
	
		ПредставлениеТЧ = Объект.Метаданные().ТабличныеЧасти[ИмяТЧ].Синоним;
		КлючДанных = ОбщегоНазначенияУТ.КлючДанныхДляСообщенияПользователю(Объект);
		
		Шаблон = НСтр("ru = 'В строке %1 списка ""%2"" в договоре назначения ""%3"" не указано подразделение.';
						|en = 'Business unit is not selected in the string %1 of the list ""%2"" in the contract of assignment ""%3"".'");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
	
			ТекстСообщения = СтрШаблон(Шаблон, Выборка.НомерСтроки, ПредставлениеТЧ, Выборка.НазначениеПредставление);
								
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, Выборка.НомерСтроки, "Назначение");
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючДанных , Поле, "Объект", Отказ);
			
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление поля "Оформить отчет давальцу"
//	
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление
//	ИмяОбъекта     - Строка           - имя объекта
//  ИмяТЧ          - Строка           - имя таблицы формы
//  ПутьКЭлементам - Строка           - путь к элементам формы
// 
Процедура УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцу(Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "") Экспорт
	
	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ОформитьОтчетДавальцу"]["Имя"]);
	
	ГруппаОтбораИЛИ = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".СписатьНаРасходы");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".НаправлениеВыпуска");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;

	ОтборЭлемента = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".ДоступноОформлениеОтчетаДавальцу");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление для "Оформить отчет давальцу" для отменных строк
//	
// Параметры:
//  Форма          - ФормаКлиентскогоПриложения - форма, для которой настраивается условное оформление
//	ИмяОбъекта     - Строка           - имя объекта
//  ИмяТЧ          - Строка           - имя таблицы формы
//  ПутьКЭлементам - Строка           - путь к элементам формы
// 
Процедура УстановитьУсловноеОформлениеПоляОформитьОтчетДавальцуОтмененныхСтрок(
			Форма, ИмяОбъекта, ИмяТЧ, ПутьКЭлементам = "") Экспорт

	ПутьКЭлементамФормы = ?(ПутьКЭлементам <> "", ПутьКЭлементам, ИмяТЧ);
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ЭлементыФормы[ПутьКЭлементамФормы + "ОформитьОтчетДавальцу"]["Имя"]);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяОбъекта + "." + ИмяТЧ + ".Отменено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти