
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает объект-проверку
Функция Создать() Экспорт
	
	Проверка = КонтрольУХ.Новый_Проверка();
	Проверка.Объект = КонтрольУХВзаиморасчетыПоКонтрагенту;
	Проверка.Источник = ИмяИсточника();
	Проверка.ВидКонтроля = ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольОбщейЗадолженностиКонтрагента;
	Проверка.ИмяРеквизита = "ЕстьПревышениеЛимитыВзаиморасчеты";
	
	Возврат Проверка;
	
КонецФункции

// Функция возвращает Истина, если для этого документа проверка выполняется
Функция ТребуетсяДляДокумента(ИмяДокумента) Экспорт
	
	//Возврат ИмяДокумента = "ЗаявкаНаРасходованиеДенежныхСредств"
	//	ИЛИ ИмяДокумента = "ОжидаемоеПоступлениеДенежныхСредств"
	//	ИЛИ ИмяДокумента = "ВерсияСоглашенияКоммерческийДоговор"
	//	ИЛИ ИмяДокумента = "ЗаказКлиента"
	//	ИЛИ ИмяДокумента = "РеализацияТоваровУслуг";
	Возврат Истина;
	
КонецФункции

// Функция возвращает Истина, если требуется выполнение проверки
Функция ТребуетсяПроверка(ПараметрыКонтроля, Источник) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("Структура") ИЛИ НЕ Источник.Свойство("Контрагент") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Источник.Контрагент);
	
КонецФункции

// Функция выполняет обработку данных источника
Функция ОбработатьДанныеИсточника(ИнформацияДляКонтроля, Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Для Каждого КлючЗначение Из Источник Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	//
	ТекстыЗапросов = Новый Массив;                
	
	ТекстыЗапросов.Добавить(ТекстЗапроса_КоэффициентыПересчетаИзВалютыВВалюту());
	ТекстыЗапросов.Добавить(ТекстЗапроса_ЗаявленоИзменение());
	ТекстыЗапросов.Добавить(ТекстЗапроса_ЛимитЗадолженности());
	ТекстыЗапросов.Добавить(КонтрольУХВстраивание.ТекстЗапроса_ВзаиморасчетыПоКонтрагенту_Факт());
	ТекстыЗапросов.Добавить(КонтрольУХВстраивание.ТекстЗапроса_ВзаиморасчетыПоКонтрагенту_Заявлено());
	ТекстыЗапросов.Добавить(ТекстЗапроса_ИтоговыйЗапрос());
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияОПК.ТекстРазделителяЗапросовПакета());
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Возврат Данные;
	
КонецФункции

// Процедура выполняет контроль обработанных данных
Функция ВыполнитьКонтроль(ИнформацияДляКонтроля, ДанныеДляКонтроля) Экспорт
	
	КонтрольНарушен = Ложь;
	
	Для Каждого Строка Из ДанныеДляКонтроля Цикл
		КонтрольНарушен = КонтрольНарушен ИЛИ Строка.КонтрольНарушен;
	КонецЦикла;
	
	Возврат КонтрольНарушен;
	
КонецФункции

// Функция возвращает Истина, если нарушение контроля должно приводить к блокированию проведения
Функция БлокироватьПроведение(КлючКонтроля) Экспорт
	
	РежимКонтроля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольОбщейЗадолженностиКонтрагента, "РежимКонтроля");
	Возврат РежимКонтроля = Перечисления.РежимыКонтроляДокументов.Блокировать
	
КонецФункции

// Возвращает имя источника для проверки
//
Функция ИмяИсточника() Экспорт
	
	Возврат "ЗадолженностьПоКонтрагенту";
	
КонецФункции

// Процедура возвращает табличный документ с расшифровкой контроля документа
//
Функция СформироватьРасшифровкуКонтроля(Проверка, СтрокаКонтроль) Экспорт
	
	//Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаКонтроль.Документ, "ЦФО, Проект");
	РезультатКонтроля = ПолучитьИзВременногоХранилища(СтрокаКонтроль.АдресРезультата);
	ДанныеКонтроля = РезультатКонтроля.Скопировать();
	
	Возврат СформироватьОтчетКонтрольВзаиморасчетовПоКонтрагенту(СтрокаКонтроль, ДанныеКонтроля);
	
КонецФункции

// Процедура сохраняет данные для контроля в табличной части документа
//
// Параметры:
//  ДанныеДляКонтроля	- Таблица значений	- Результат контроля
//  РезультатыКонтроля	- ТабличнаяЧасть	- табличная часть РезультатыКонтроля проверяемого документа
//
Процедура СохранитьДанныеДляКонтроляВДокументе(ДанныеДляКонтроля, РезультатыКонтроля) Экспорт
	
	// АналитикаКонтроляЗадолженностиПоКонтрагенту
	ИменаПолей = РегистрыСведений.АналитикаКонтроляЗадолженностиПоКонтрагенту.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.АналитикаКонтроляЗадолженностиПоКонтрагенту = "КлючКонтроля";
	РегистрыСведений.АналитикаКонтроляЗадолженностиПоКонтрагенту.ЗаполнитьВКоллекции(ДанныеДляКонтроля, ИменаПолей);
	
	Для Каждого Строка Из ДанныеДляКонтроля Цикл
		ЗаполнитьЗначенияСвойств(РезультатыКонтроля.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры // СохранитьДанныеДляКонтроляВДокументе()
	
// Функция возвращает соответствие с описанием колонок таблицы данных контроля, которые получаются из ключа контроля
//
// Возвращаемое значение:
//   Соответствие   - {ИмяКолонки, Структура("ИмяКолонки, ОписаниеТипа, ПутьКДанным")}
//
Функция КолонкиДанныхКонтроля() Экспорт
	
	Колонки = Новый Соответствие;
	КонтрольУХ.ДобавитьКолонкуКонтроля(Колонки, 
		"Контрагент",
		Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонтрольУХ.ДобавитьКолонкуКонтроля(Колонки, 
		"РольКонтрагента",
		Новый ОписаниеТипов("ПеречислениеСсылка.РолиКонтрагентов"));
	
	Результат = Новый Структура;
	Результат.Вставить("Источник", "Справочник.КлючиКонтроляЗадолженностиПоКонтрагенту");
	Результат.Вставить("Колонки", Колонки);
	
	Возврат Результат;
	
КонецФункции

Функция СформироватьОтчетКонтрольВзаиморасчетовПоКонтрагенту(СтрокаКонтроль, ДанныеКонтроля) экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	//
	Макет = ПланыВидовХарактеристик.ВидыКонтроляДокументов.ПолучитьМакет("КонтрольЛимитовВзаиморасчетовПоКонтрагенту");
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.Документ = СтрокаКонтроль.Документ;
	ОбластьЗаголовок.Параметры.ДатаВремяКонтроля = СтрокаКонтроль.ВремяПроверки;
	ОбластьЗаголовок.Параметры.ТекущееВремя = ТекущаяДатаСеанса();
	ОбластьЗаголовок.Параметры.ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);

	//
	ТабДок.НачатьАвтогруппировкуСтрок();
	Для каждого Данные Из ДанныеКонтроля Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(Данные);
		ОбластьДетальныхЗаписей.Параметры.ДоступноПослеОперации = 
			Данные.Лимит + Данные.ЛимитИзменение
			- Данные.Исполнено - Данные.ИсполненоИзменение
			- Данные.Зарезервировано - Данные.ЗарезервированоИзменение 
			- Данные.Заявлено - Данные.ЗаявленоИзменение;
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла;
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	//
	ДанныеКонтроля.Свернуть("", "Лимит, Исполнено, Зарезервировано, Заявлено, ЛимитИзменение, ИсполненоИзменение, ЗарезервированоИзменение, ЗаявленоИзменение");
	Если ДанныеКонтроля.Количество()>0 Тогда
		Данные = ДанныеКонтроля[0];
		ОбластьПодвалТаблицы.Параметры.Заполнить(Данные);
		ОбластьПодвалТаблицы.Параметры.ДоступноПослеОперации = 
			Данные.Лимит + Данные.ЛимитИзменение
			- Данные.Исполнено - Данные.ИсполненоИзменение
			- Данные.Зарезервировано - Данные.ЗарезервированоИзменение 
			- Данные.Заявлено - Данные.ЗаявленоИзменение;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапроса_КоэффициентыПересчетаВалют()
	
	Возврат 
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалютыУпрУчета.Валюта КАК ВалютаУпрУчета,
	|	КурсВалютыВзаиморасчетов.Валюта КАК ВалютаВзаиморасчетов,
	|	КурсВалютыВзаиморасчетов.Курс / КурсВалютыВзаиморасчетов.Кратность / КурсВалютыУпрУчета.Курс * КурсВалютыУпрУчета.Кратность КАК Коэффициент
	|ПОМЕСТИТЬ ВТ_КоэффициентыПересчета
	|ИЗ
	|	Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК КурсВалютыУпрУчета
	|		ПО ВалютаУправленческогоУчета.Значение = КурсВалютыУпрУчета.Валюта,
	|	ВТ_КурсыВалют КАК КурсВалютыВзаиморасчетов";
	
КонецФункции

Функция ТекстЗапроса_ЗаявленоИзменение()
	Возврат
	"ВЫБРАТЬ
	|	&Контрагент КАК Контрагент,
	|	&РольКонтрагента КАК РольКонтрагента,
	|	&Валюта КАК Валюта,
	|	&СуммаПлатежа КАК ЗаявленоИзменение
	|ПОМЕСТИТЬ ВТ_ЗаявленоИзменение";
	
КонецФункции

Функция ТекстЗапроса_ЛимитЗадолженности()
	Возврат
	"ВЫБРАТЬ
	|	КлассыКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
	|	&РольКонтрагента КАК РольКонтрагента,
	|	ВалютаУправленческогоУчета.Значение КАК Валюта,
	|	КлассыКонтрагентовСрезПоследних.Задолженность КАК Лимит
	|ПОМЕСТИТЬ ВТ_Лимит
	|ИЗ
	|	РегистрСведений.КлассыКонтрагентов.СрезПоследних(
	|			,
	|			Контрагент = &Контрагент
	|				И РольКонтрагента = &РольКонтрагента) КАК КлассыКонтрагентовСрезПоследних,
	|	Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	|ГДЕ
	|	КлассыКонтрагентовСрезПоследних.КонтролироватьЗадолженность = ИСТИНА";
	
КонецФункции

Функция ТекстЗапроса_КоэффициентыПересчетаИзВалютыВВалюту()
	Возврат
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалютыУпрУчета.Валюта КАК ВалютаУпрУчета,
	|	КурсВалютыВзаиморасчетов.Валюта КАК ВалютаВзаиморасчетов,
	|	КурсВалютыВзаиморасчетов.Курс / КурсВалютыВзаиморасчетов.Кратность / КурсВалютыУпрУчета.Курс * КурсВалютыУпрУчета.Кратность КАК Коэффициент
	|ПОМЕСТИТЬ ВТ_КоэффициентыПересчета
	|ИЗ
	|	Константа.ВалютаУправленческогоУчета КАК ВалютаУправленческогоУчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КурсыВалют КАК КурсВалютыУпрУчета
	|		ПО ВалютаУправленческогоУчета.Значение = КурсВалютыУпрУчета.Валюта,
	|	ВТ_КурсыВалют КАК КурсВалютыВзаиморасчетов";
	
КонецФункции

Функция ТекстЗапроса_ИтоговыйЗапрос()
	
	Возврат
	"ВЫБРАТЬ
	|	ВТ_КоэффициентыПересчета.ВалютаУпрУчета КАК Валюта,
	|	0 КАК Лимит,
	|	ВЫРАЗИТЬ(ВТ_Заявлено.Заявлено * ВТ_КоэффициентыПересчета.Коэффициент КАК ЧИСЛО(18, 2)) КАК Заявлено,
	|	0 КАК Исполнено,
	|	0 КАК ЗаявленоИзменение
	|ПОМЕСТИТЬ ВТ_Исполнение
	|ИЗ
	|	ВТ_Заявлено КАК ВТ_Заявлено
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоэффициентыПересчета КАК ВТ_КоэффициентыПересчета
	|		ПО ВТ_Заявлено.Валюта = ВТ_КоэффициентыПересчета.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_КоэффициентыПересчета.ВалютаУпрУчета,
	|	0,
	|	0,
	|	ВЫРАЗИТЬ(ВТ_Факт.Исполнено * ВТ_КоэффициентыПересчета.Коэффициент КАК ЧИСЛО(18, 2)),
	|	0
	|ИЗ
	|	ВТ_Факт КАК ВТ_Факт
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоэффициентыПересчета КАК ВТ_КоэффициентыПересчета
	|		ПО ВТ_Факт.Валюта = ВТ_КоэффициентыПересчета.ВалютаВзаиморасчетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_КоэффициентыПересчета.ВалютаУпрУчета,
	|	0,
	|	0,
	|	0,
	|	ВЫРАЗИТЬ(ВТ_ЗаявленоИзменение.ЗаявленоИзменение * ВТ_КоэффициентыПересчета.Коэффициент КАК ЧИСЛО(18, 2))
	|ИЗ
	|	ВТ_ЗаявленоИзменение КАК ВТ_ЗаявленоИзменение
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоэффициентыПересчета КАК ВТ_КоэффициентыПересчета
	|		ПО ВТ_ЗаявленоИзменение.Валюта = ВТ_КоэффициентыПересчета.ВалютаВзаиморасчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыКонтроляДокументов.КонтрольОбщейЗадолженностиКонтрагента) КАК ВидКонтроля,
	|	ЗНАЧЕНИЕ(Справочник.КлючиКонтроляЗадолженностиПоКонтрагенту.ПустаяСсылка) КАК КлючКонтроля,
	|	&Контрагент КАК Контрагент,
	|	&РольКонтрагента КАК РольКонтрагента,
	|	ВТ_Лимит.Валюта КАК Валюта,
	|	СУММА(ВТ_Лимит.Лимит) КАК Лимит,
	|	0 КАК Зарезервировано,
	|	СУММА(ВТ_Исполнение.Заявлено) КАК Заявлено,
	|	СУММА(ВТ_Исполнение.Исполнено) КАК Исполнено,
	|	0 КАК ЛимитИзменение,
	|	0 КАК ЗарезервированоИзменение,
	|	СУММА(ВТ_Исполнение.ЗаявленоИзменение) КАК ЗаявленоИзменение,
	|	0 КАК ИсполненоИзменение,
	|	СУММА(ВТ_Лимит.Лимит) - СУММА(ВТ_Исполнение.Заявлено) - СУММА(ВТ_Исполнение.Исполнено) - СУММА(ВТ_Исполнение.ЗаявленоИзменение) КАК ДоступноПослеОперации,
	|	СУММА(ВТ_Лимит.Лимит) - СУММА(ВТ_Исполнение.Заявлено) - СУММА(ВТ_Исполнение.Исполнено) - СУММА(ВТ_Исполнение.ЗаявленоИзменение) < 0 КАК КонтрольНарушен
	|ИЗ
	|	ВТ_Лимит КАК ВТ_Лимит
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Исполнение КАК ВТ_Исполнение
	|		ПО ВТ_Лимит.Валюта = ВТ_Исполнение.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Лимит.Валюта";
	
КонецФункции

#КонецОбласти

