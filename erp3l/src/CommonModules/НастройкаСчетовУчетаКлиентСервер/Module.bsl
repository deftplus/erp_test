#Область ПрограммныйИнтерфейс

#Область НастройкаСчетовУчетаПрочихОпераций

// Очищает статью и аналитику в строке таблицы, если они не доступны в строке ТЧ.
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
// 	СтрокаТаблицы - ДанныеФормыЭлементКоллекции - Строка таблицы.
// 	ПутьКДаннымТаблицы - Строка - Путь к данным таблицы формы, например "Объект.Товары".
//
Процедура ПриИзмененииРеквизитаДоступностиСчетаУчетаВСтроке(Форма, СтрокаТаблицы, ПутьКДаннымТаблицы) Экспорт
	
	//++ НЕ УТ
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма,
		"НастройкаСчетовУчета");

	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Для Каждого Параметры Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если Параметры.ПутьКДанным = ПутьКДаннымТаблицы Тогда
			ДоступностьВСтроке = Истина;
			Для Каждого КлючИЗначение Из Параметры.УсловияДоступностиСчетаУчетаВСтроках Цикл
				Если СтрокаТаблицы[КлючИЗначение.Ключ] <> КлючИЗначение.Значение Тогда
					ДоступностьВСтроке = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ДоступностьВСтроке Тогда
				Если ЗначениеЗаполнено(СтрокаТаблицы[Параметры.НастройкаСчетовУчета]) Тогда
					СтрокаТаблицы[Параметры.НастройкаСчетовУчета] = Неопределено;
					Если ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
						СтрокаТаблицы[Параметры.Представление] = ПредставлениеНастройкиОтражения(СтрокаТаблицы,
							Параметры, ДанныеНастройкиСчетовУчета);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	//-- НЕ УТ
КонецПроцедуры

// Устанавливает видимость настройки счетов учета при изменении типа статьи, заполняет настройки счетов учета статьи по умолчанию.
// Вызывается из механизма выбора статей и аналитик (См. ДоходыИРасходыСервер).
//
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта.
// 	ПутьКДанным - Строка - Значение поля "ПутьКДанным" параметров выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
// 	ТипСтатьи - Строка - Значение поля "ТипСтатьи" параметров выбора статей и аналитик (См. ДоходыИРасходыСервер.ПараметрыВыбораСтатьиИАналитики).
// 	ИдентификаторыСтрок - Число, Массив, Неопределено - Идентификаторы строк таблицы, в которых изменился тип статьи.
//
Процедура ПриИзмененииСтатьи(Форма, ПутьКДанным, ТипСтатьи, ИдентификаторыСтрок = Неопределено) Экспорт
	
	//++ НЕ УТ
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма,
		"НастройкаСчетовУчета");

	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	ИначеЕсли Не ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;

	Если ИдентификаторыСтрок <> Неопределено И ТипЗнч(ИдентификаторыСтрок) <> Тип("Массив") Тогда
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;

	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если ПутьКДанным = ПараметрыНастройки.ПутьКДанным Тогда
			Если ЗначениеЗаполнено(ТипСтатьи) И ТипСтатьи = ПараметрыНастройки.ТипСтатьи Тогда
				УстановитьВидимостьЭлементовПоПараметрам(Форма, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
			КонецЕсли;
			ЗаполнитьНастройкиСчетовУчетаПоУмолчанию(Форма, ПараметрыНастройки, ИдентификаторыСтрок);
			ЗаполнитьПредставлениеНастройкиПоПараметрам(Форма, ПараметрыНастройки, ИдентификаторыСтрок);
		КонецЕсли;
	КонецЦикла;
	//-- НЕ УТ

КонецПроцедуры

// Дополняет структуру действий механизма ОбработкаТабличнойЧасти действием заполнения настройки счетов учета по умолчанию
// по данным статьи активов и пассивов.
// 
// Параметры:
//  СтруктураДействий - Структура - Структура действий
//  ФормаИлиПараметры - ФормаКлиентскогоПриложения, Структура, Массив - При вызове из формы передается форма объекта. Из формы получаются закэшированные данные настройки счетов учета. 
//                                                             При вызове из объекта - параметры настройки счетов (см. НастройкаСчетовУчетаСервер.ПараметрыНастройки).
//  ПутьКДанным - Строка - Путь к данным настройки счетов учета. Значение по умолчанию "Объект.Товары".
//
Процедура ВставитьДействиеЗаполнитьНастройкуСчетовУчетаПоУмолчанию(СтруктураДействий, ФормаИлиПараметры, ПутьКДанным = "Объект.Товары") Экспорт
	
	//++ НЕ УТ
	Если ТипЗнч(ФормаИлиПараметры) = Тип("ФормаКлиентскогоПриложения") Тогда
		ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(ФормаИлиПараметры, "НастройкаСчетовУчета");
		ДействиеВФорме = Истина;
	Иначе
		ДанныеНастройкиСчетовУчета = НовыеДанныеНастройкиСчетовУчета();
		ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета = НастройкаСчетовУчетаСлужебныйВызовСервера.ДоступнаНастройкаСчетовУчета();
		Если ТипЗнч(ФормаИлиПараметры) = Тип("Массив") Тогда
			ДанныеНастройкиСчетовУчета.МассивПараметровНастройки = ФормаИлиПараметры;
		Иначе
			ДанныеНастройкиСчетовУчета.МассивПараметровНастройки = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ФормаИлиПараметры);
		КонецЕсли;
		ДействиеВФорме = Ложь;
	КонецЕсли;

	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТабличнойЧасти     = Новый Массив();
	МассивПараметровНастройки = Новый Массив();
	
	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		Если ПутьКДанным <> ПараметрыНастройки.ПутьКДанным Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПараметровНастройки.Добавить(ПараметрыНастройки);
		
		КолонкиТабличнойЧасти.Добавить(ПараметрыНастройки.НастройкаСчетовУчета);
		КолонкиТабличнойЧасти.Добавить(ПараметрыНастройки.СтатьяАктивовПассивов);
		Если ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи) Тогда
			КолонкиТабличнойЧасти.Добавить(ПараметрыНастройки.ТипСтатьи);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДействия = Новый Структура();
	ПараметрыДействия.Вставить("ДействиеВФорме", ДействиеВФорме);
	ПараметрыДействия.Вставить("КолонкиТабличнойЧасти", КолонкиТабличнойЧасти);
	ПараметрыДействия.Вставить("ДанныеНастройкиСчетовУчета", НовыеДанныеНастройкиСчетовУчета());
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.МассивПараметровНастройки = МассивПараметровНастройки;
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета = Истина;
	
	Если ДействиеВФорме Тогда
		ПараметрыДействия.ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета;
		ПараметрыДействия.ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций = ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций;
		ПараметрыДействия.ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам = ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам;
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьНастройкуСчетовУчетаПоУмолчанию", ПараметрыДействия);
	
	Если ДействиеВФорме Тогда
		ВставитьДействиеЗаполнитьПредставлениеНастройкиСчетовУчета(СтруктураДействий, ФормаИлиПараметры, ПутьКДанным);
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

// Дополняет структуру действий механизма ОбработкаТабличнойЧасти действием заполнения представления настройки счетов учета.
// Действие возможно использовать только в форме.
// 
// Параметры:
// 	СтруктураДействий - Структура - Структура действий
// 	Форма - ФормаКлиентскогоПриложения - Из формы получаются закэшированные параметры настройки счетов учета. 
// 	ПутьКДанным - Строка - Путь к данным настройки счетов учета. Значение по умолчанию "Объект.Товары".
//
Процедура ВставитьДействиеЗаполнитьПредставлениеНастройкиСчетовУчета(СтруктураДействий, Форма, ПутьКДанным = "Объект.Товары") Экспорт
	
	//++ НЕ УТ
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиТабличнойЧасти     = Новый Массив;
	МассивПараметровНастройки = Новый Массив;
	
	Для каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		
		Если ПутьКДанным <> ПараметрыНастройки.ПутьКДанным Тогда
			Продолжить;
		КонецЕсли;
		
		МассивПараметровНастройки.Добавить(ПараметрыНастройки);
		
		КолонкиТабличнойЧасти.Добавить(ПараметрыНастройки.НастройкаСчетовУчета);
		КолонкиТабличнойЧасти.Добавить(ПараметрыНастройки.Представление);
		Если ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи) Тогда
			КолонкиТабличнойЧасти.Добавить(ПараметрыНастройки.ТипСтатьи);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыДействия = Новый Структура;
	
	ПараметрыДействия.Вставить("КолонкиТабличнойЧасти", КолонкиТабличнойЧасти);
	ПараметрыДействия.Вставить("ДанныеНастройкиСчетовУчета", НовыеДанныеНастройкиСчетовУчета());
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.МассивПараметровНастройки = МассивПараметровНастройки;
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета;
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций = ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций;
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам = ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам;
	ПараметрыДействия.ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета = Истина;
	
	СтруктураДействий.Вставить("ЗаполнитьПредставлениеНастройкиСчетовУчета", ПараметрыДействия);
	//-- НЕ УТ
	
КонецПроцедуры

// Возвращает структуру полей настройки счетов учета операции.
// 
// Возвращаемое значение:
//  Структура - Описание:
//++ Локализация
//  * СчетУчета - ПланСчетовСсылка.Хозрасчетный - счет регламентированного учета.
//  * Субконто1 - Произвольный - субконто 1 счета регламентированного учета
//  * Субконто2 - Произвольный - субконто 2 счета регламентированного учета
//  * Субконто3 - Произвольный - субконто 3 счета регламентированного учета
//-- Локализация
//  * НастройкиМеждународногоУчета - Массив - настройки счетов международного учета, см. СоставНастройкиСчетовМеждународногоУчета
//
Функция СоставНастройкиСчетовУчета() Экспорт

	СоставНастройкиСчетов = Новый Структура();
	//++ НЕ УТ
	//++ Локализация
	СоставНастройкиСчетов.Вставить("СчетУчета", ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка"));
	СоставНастройкиСчетов.Вставить("Субконто1", Неопределено);
	СоставНастройкиСчетов.Вставить("Субконто2", Неопределено);
	СоставНастройкиСчетов.Вставить("Субконто3", Неопределено);
	//-- Локализация
	//++ НЕ УТКА
	СоставНастройкиСчетов.Вставить("НастройкиМеждународногоУчета", Новый Массив);
	//-- НЕ УТКА
	//-- НЕ УТ

	Возврат СоставНастройкиСчетов;

КонецФункции

// Возвращает структуру полей настройки учета операции на счете международного учета.
// Используется для заполнения свойства НастройкиМеждународногоУчета состава настройки счетов учета операции.
// 
// Возвращаемое значение:
//  Структура - Описание:
//  * ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - план счетов международного учета.
//  * СчетУчета - ПланСчетовСсылка.Международный - счет международного учета.
//  * Субконто1 - Произвольный - субконто 1 счета международного учета
//  * Субконто2 - Произвольный - субконто 2 счета международного учета
//  * Субконто3 - Произвольный - субконто 3 счета международного учета
//
Функция СоставНастройкиСчетовМеждународногоУчета() Экспорт

	СоставНастройкиСчетов = Новый Структура();
	//++ НЕ УТКА
	СоставНастройкиСчетов.Вставить("ПланСчетов", ПредопределенноеЗначение("Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка"));
	СоставНастройкиСчетов.Вставить("СчетУчета",  ПредопределенноеЗначение("ПланСчетов.Международный.ПустаяСсылка"));
	СоставНастройкиСчетов.Вставить("Субконто1",  Неопределено);
	СоставНастройкиСчетов.Вставить("Субконто2",  Неопределено);
	СоставНастройкиСчетов.Вставить("Субконто3",  Неопределено);
	//-- НЕ УТКА

	Возврат СоставНастройкиСчетов;

КонецФункции

#КонецОбласти

// Выполняет обработку изменения реквизитов аналитики учета, влияющих на настройку счетов учета.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
// 	ИмяЭлемента - Строка - Имя элемента реквизита
//
Процедура ПриИзмененииРеквизита(Форма, ИмяЭлемента = Неопределено) Экспорт
	//++ Локализация
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма,
		"НастройкаСчетовУчета");
	Если ДанныеНастройкиСчетовУчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//++ НЕ УТ
	НастройкаСчетовУчетаКлиентСервер.ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымОбъектаАналитики(Форма, Форма.Объект);
	НастройкаСчетовУчетаКлиентСервер.УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма, Истина);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

//++ Локализация

// Возвращает виды счетов регл. учета, для которых будет добавлена возможность настройки долгосрочного счета учета.
//
// Возвращаемое значение:
//	Массив - массив из Строка:
//		Имя вида счета регл. учета строкой, для которого надо будет дать возможность настройки долгосрочного счета учета.
//
Функция ВидыСчетовСНастройкамиДолгосрочнойЗадолженности() Экспорт
	
	МассивВозврата = Новый Массив;
	
	МассивВозврата.Добавить("РасчетыСКлиентами");
	МассивВозврата.Добавить("АвансыПолученные");
	МассивВозврата.Добавить("РасчетыСПоставщиками");
	МассивВозврата.Добавить("АвансыВыданные");
	МассивВозврата.Добавить("ПроцентыПоДисконтированию");
	
	МассивВозврата.Добавить("РасчетыСКредиторамиОсновнойДолг");
	
	МассивВозврата.Добавить("РасчетыСДебиторамиОсновнойДолг");
	
	МассивВозврата.Добавить("АрендныеОбязательства");
	
	Возврат МассивВозврата;
	
КонецФункции

//-- Локализация

#Область НастройкаВыбораСубконто

// Изменяет параметры выбора полей субконто.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма, на которой расположены поля субконто.
//	Объект - ДанныеФормыСтруктура - Объект, форма которого отображается.
//	ШаблонИмяПоляОбъекта - Строка - Шаблон имени поля объекта, содержащего субконто.
//	ШаблонИмяЭлементаФормы - Строка - Шаблон имени поля формы, в который выводится субконто.
//	СписокПараметров - Структура - Содержит ключи со значениями отборов.
//
Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта, ШаблонИмяЭлементаФормы,
	СписокПараметров) Экспорт

	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"), "БанковскийСчетОрганизации");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.БанковскиеСчетаКонтрагентов"), "БанковскийСчетКонтрагента");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.СтруктураПредприятия"), "Подразделение");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыАренды"), "Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКредитовИДепозитов"), "Договор");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Партнеры"), "Партнер");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Субконто"), "Субконто");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.НомераГТД"), "НомераГТД");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.Номенклатура"), "Номенклатура");
	
	//++ Локализация
	ВидыПараметров.Вставить(Тип("СправочникСсылка.РегистрацииВНалоговомОргане"), "РегистрацияВИФНС");
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ПартииТМЦВЭксплуатации"), "ПартииТМЦВЭксплуатации");
	//-- Локализация

	ОписаниеТипаВсеДокументы = НастройкаСчетовУчетаСлужебныйВызовСервера.ОписаниеТипаВсеДокументы();

	ОчищатьСвязанныеСубконто = Ложь;
	ТипыСвязанныхСубконто    = Неопределено;
	Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ТекущийЭлемент = Форма.ТекущийЭлемент.ТекущийЭлемент;
	Иначе
		ТекущийЭлемент = Форма.ТекущийЭлемент;
	КонецЕсли;
	ИмяТекущегоЭлемента = ?(ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы"), ТекущийЭлемент.Имя, "");

	Для Индекс = 1 По 3 Цикл
		ИмяЭлементаФормы = СтрЗаменить(ШаблонИмяЭлементаФормы, "%Индекс%", Индекс);
		ИмяПоляОбъекта   = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ТипПоляОбъекта   = ТипЗнч(Объект[ИмяПоляОбъекта]);

		МассивПараметров = Новый Массив;

		ВидПараметра = ВидыПараметров[ТипПоляОбъекта];

		Если ВидПараметра <> Неопределено Тогда

			Если ВидПараметра = "Договор" Тогда

				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
				КонецЕсли;
				Если СписокПараметров.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", СписокПараметров.Контрагент));
				КонецЕсли;
				Если СписокПараметров.Свойство("Партнер") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", СписокПараметров.Партнер));
				КонецЕсли;

			ИначеЕсли ВидПараметра = "БанковскийСчетОрганизации" Тогда

				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Организация));

			ИначеЕсли ВидПараметра = "БанковскийСчетКонтрагента" Тогда

				Если СписокПараметров.Свойство("Контрагент") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.Контрагент));
				ИначеЕсли СписокПараметров.Свойство("ФизическоеЛицо") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СписокПараметров.ФизическоеЛицо));
				КонецЕсли;

			ИначеЕсли ВидПараметра = "НомераГТД" Тогда

				Если СписокПараметров.Свойство("СтранаПроисхождения") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СтранаПроисхождения",
						СписокПараметров.СтранаПроисхождения));
				КонецЕсли;

			ИначеЕсли ВидПараметра = "Номенклатура" Тогда

				Если СписокПараметров.Свойство("ГруппаАналитическогоУчетаНоменклатуры") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ГруппаАналитическогоУчета",
						СписокПараметров.ГруппаАналитическогоУчетаНоменклатуры));
				КонецЕсли;
				Если СписокПараметров.Свойство("ГруппаФинУчетаНоменклатуры") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ГруппаФинансовогоУчета",
						СписокПараметров.ГруппаФинУчетаНоменклатуры));
				КонецЕсли;
				Если СписокПараметров.Свойство("ТипНоменклатуры") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ТипНоменклатуры",
						СписокПараметров.ТипНоменклатуры));
				КонецЕсли;

			ИначеЕсли ВидПараметра = "Субконто" И СписокПараметров.Свойство("СчетУчета") Тогда

				СвойстваСчета = НастройкаСчетовУчетаСлужебныйВызовСервера.ПолучитьСвойстваСчета(
					СписокПараметров.СчетУчета);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", СвойстваСчета["ВидСубконто" + Индекс]));
			
			//++ Локализация
			ИначеЕсли ВидПараметра = "РегистрацияВИФНС" Тогда

				ГоловнаяОрганизация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(
					СписокПараметров.Организация);
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ГоловнаяОрганизация));

			ИначеЕсли ВидПараметра = "ПартииТМЦВЭксплуатации" Тогда

				ОграничениеВыбора = Ложь;
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Организация", СписокПараметров.Организация));
					ОграничениеВыбора = Истина;
				КонецЕсли;
				Если СписокПараметров.Свойство("Номенклатура") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Номенклатура", СписокПараметров.Номенклатура));
					ОграничениеВыбора = Истина;
				КонецЕсли;
				Если СписокПараметров.Свойство("ФизическоеЛицо") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("ФизическоеЛицо", СписокПараметров.ФизическоеЛицо));
					ОграничениеВыбора = Истина;
				КонецЕсли;
				Если ОграничениеВыбора Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("ОграничениеВыбора", Истина));
				КонецЕсли;  
			//-- Локализация
			КонецЕсли;

		КонецЕсли;

		Если МассивПараметров.Количество() = 0 И ОписаниеТипаВсеДокументы.СодержитТип(ТипПоляОбъекта) Тогда

			МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
			Если СписокПараметров.Свойство("Контрагент") Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", СписокПараметров.Контрагент));
			КонецЕсли;
			Если СписокПараметров.Свойство("Партнер") Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Партнер", СписокПараметров.Партнер));
			КонецЕсли;
			Если СписокПараметров.Свойство("ФизическоеЛицо") Тогда
				МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ПодотчетноеЛицо",
					СписокПараметров.ФизическоеЛицо));
			КонецЕсли;

		КонецЕсли;

		Если МассивПараметров.Количество() > 0 Тогда
			ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
			Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора = ПараметрыВыбора;
		ИначеЕсли Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора.Количество() > 0 Тогда
			Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		КонецЕсли;

		Если ОчищатьСвязанныеСубконто И ЗначениеЗаполнено(Объект[ИмяПоляОбъекта]) Тогда

			Если ТипыСвязанныхСубконто = Неопределено Тогда
				ВсеТипыСвязанныхСубконто = НастройкаСчетовУчетаСлужебныйВызовСервера.ВсеТипыСвязанныхСубконто();
				ТипыСвязанныхСубконто    = Новый ОписаниеТипов(Новый Массив);
				Для Каждого Параметр Из СписокПараметров Цикл
					Если ВсеТипыСвязанныхСубконто[Параметр.Ключ] <> Неопределено Тогда
						ТипыСвязанныхСубконто = Новый ОписаниеТипов(ТипыСвязанныхСубконто,
							ВсеТипыСвязанныхСубконто[Параметр.Ключ].Типы());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

			Если ТипыСвязанныхСубконто.СодержитТип(ТипПоляОбъекта) Тогда
				Объект[ИмяПоляОбъекта] = Новый (ТипПоляОбъекта);
			КонецЕсли;

		КонецЕсли;

		Если ИмяТекущегоЭлемента = ИмяЭлементаФормы Тогда
			ОчищатьСвязанныеСубконто = Истина; // Очищаются только субконто с номером больше текущего
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Функция формирует структуру ключей со значениями отбора для субконто.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - Организация, для который выполняется настройка субконто.
//	ТекущиеДанные - РегистрБухгалтерииЗаписьИмяРегистраБухгалтерии - Запись, для которой настраиваются параметры выбора.
//	ШаблонИмяПоляОбъекта - Строка - Шаблон имени поля объекта, содержащего субконто.
//	ИмяПоляСчетУчета - Строка - Шаблон имени поля формы, в который выводится счет.
//
//Возвращаемое значение:
//   Структура - Содержит ключи со значениями отборов.
//
Функция ПараметрыВыбораСубконто(Организация, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета) Экспорт

	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("ОстаткиОбороты", "Кт");
	СписокПараметров.Вставить("Организация", Организация);
	СписокПараметров.Вставить("СчетУчета", ТекущиеДанные[ИмяПоляСчетУчета]);

	Для Индекс = 1 По 3 Цикл
		ИмяПоля = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);

		Если ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Партнеры") Тогда
			СписокПараметров.Вставить("Партнер", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Организации") Тогда
			МассивОрганизаций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(СписокПараметров.Организация);
			МассивОрганизаций.Добавить(ТекущиеДанные[ИмяПоля]);
			СписокПараметров.Вставить("Организация", Новый ФиксированныйМассив(МассивОрганизаций));
		ИначеЕсли НастройкаСчетовУчетаСлужебныйВызовСервера.ОписаниеТиповДоговоров(Истина).СодержитТип(ТипЗнч(
			ТекущиеДанные[ИмяПоля])) Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			СписокПараметров.Вставить("ФизическоеЛицо", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.СтраныМира") Тогда
			СписокПараметров.Вставить("СтранаПроисхождения", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры") Тогда
			СписокПараметров.Вставить("ГруппаАналитическогоУчетаНоменклатуры", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры") Тогда
			СписокПараметров.Вставить("ГруппаФинУчетаНоменклатуры", ТекущиеДанные[ИмяПоля]);
		ИначеЕсли ТипЗнч(ТекущиеДанные[ИмяПоля]) = Тип("ПеречислениеСсылка.ТипыНоменклатуры") Тогда
			СписокПараметров.Вставить("ТипНоменклатуры", ТекущиеДанные[ИмяПоля]);
		КонецЕсли;

	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область НастройкаСчетовУчетаПрочихОпераций

Функция РеквизитыНастройкиСчетаУчета() Экспорт

	Возврат "СчетУчета,Субконто1,Субконто2,Субконто3";

КонецФункции

Функция НовыеДанныеНастройкиСчетовУчета() Экспорт
	
	ДанныеНастройкиСчетовУчета = Новый Структура();
	ДанныеНастройкиСчетовУчета.Вставить("МассивПараметровНастройки", Новый Массив());
	ДанныеНастройкиСчетовУчета.Вставить("СоответствиеПараметровНастройкиЭлементамФормы", Новый Структура());
	ДанныеНастройкиСчетовУчета.Вставить("ДоступнаНастройкаСчетовУчета", Ложь);
	ДанныеНастройкиСчетовУчета.Вставить("НастройкиСчетовУчета", Новый Соответствие());
	ДанныеНастройкиСчетовУчета.Вставить("ЗначенияФункциональныхОпций", Новый Структура());
	ДанныеНастройкиСчетовУчета.Вставить("СтатьиСНастройкамиПоОбъектам", Новый Массив());
	
	ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.Вставить("ИспользоватьРеглУчет", Ложь);
	ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.Вставить("ИспользоватьМФУ", Ложь);
	
	Возврат ДанныеНастройкиСчетовУчета;
	
КонецФункции

Функция ТекстГиперссылкиНастройкаСчетовНеТребуется() Экспорт
	
	Возврат НСтр("ru = 'Не требуется';
				|en = 'Not required'");
	
КонецФункции

// Описание
// 
// Параметры:
// 	ФормаОбъект - ФормаКлиентскогоПриложения, ДанныеФормыСтруктура -
// 	ПутьКДанным - Строка -
// 	ИдентификаторСтроки - Неопределено, Число -
// Возвращаемое значение:
// 	ДанныеФормыКоллекция, Произвольный, Неопределено - Описание
Функция ДанныеПоПути(ФормаОбъект, Знач ПутьКДанным, Знач ИдентификаторСтроки = Неопределено) Экспорт

	ЧастиПутиКДанным = СтрРазделить(ПутьКДанным, ".", Ложь);
	Если ТипЗнч(ФормаОбъект) <> Тип("ФормаКлиентскогоПриложения") И ЧастиПутиКДанным[0] = "Объект" Тогда
		ЧастиПутиКДанным.Удалить(0);
	КонецЕсли;

	Если ЧастиПутиКДанным.Количество() > 1 Тогда
		Данные = ФормаОбъект[ЧастиПутиКДанным[0]][ЧастиПутиКДанным[1]];
		Если ИдентификаторСтроки <> Неопределено И ТипЗнч(Данные) = Тип("ДанныеФормыКоллекция") Тогда
			Данные = Данные.НайтиПоИдентификатору(ИдентификаторСтроки);
			Если ЧастиПутиКДанным.Количество() = 3 Тогда
				Данные = Данные[ЧастиПутиКДанным[2]];
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЧастиПутиКДанным.Количество() = 1 Тогда
		Данные = ФормаОбъект[ЧастиПутиКДанным[0]];
	Иначе
		Данные = ФормаОбъект;
	КонецЕсли;

	Возврат Данные;

КонецФункции

Функция КонтекстНастройки(Форма, ПараметрыНастройки, ВыбраннаяСтрока = Неопределено) Экспорт

	Результат = Новый Структура;

	Организация = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыНастройки.Организация) Тогда
		Организация = ДанныеПоПути(Форма, ПараметрыНастройки.Организация, ВыбраннаяСтрока);
	КонецЕсли;
	Результат.Вставить("Организация", Организация);

	СтатьяАктивовПассивов = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов) Тогда
		СтатьяАктивовПассивов = ДанныеПоПути(Форма,
			ПараметрыНастройки.ПутьКДанным + "." + ПараметрыНастройки.СтатьяАктивовПассивов, ВыбраннаяСтрока);
	КонецЕсли;
	Результат.Вставить("СтатьяАктивовПассивов", СтатьяАктивовПассивов);

	АналитикаАктивовПассивов = Неопределено;
	Если ЗначениеЗаполнено(ПараметрыНастройки.АналитикаАктивовПассивов) Тогда
		АналитикаАктивовПассивов = ДанныеПоПути(Форма,
			ПараметрыНастройки.ПутьКДанным + "." + ПараметрыНастройки.АналитикаАктивовПассивов, ВыбраннаяСтрока);
	КонецЕсли;
	Результат.Вставить("АналитикаАктивовПассивов", АналитикаАктивовПассивов);

	Возврат Результат;

КонецФункции

Функция ПредставлениеНастройкиОтражения(КонтекстНастройки, ПараметрыНастройки, ДанныеНастройкиСчетовУчета) Экспорт

	Результат = НСтр("ru = 'Настроить';
					|en = 'Customize'");
	
	Если ПараметрыНастройки <> Неопределено Тогда
		Если НЕ ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьРеглУчет
			И (НЕ ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов)
			ИЛИ ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам.Найти(КонтекстНастройки[ПараметрыНастройки.СтатьяАктивовПассивов]) <> Неопределено) Тогда
			Результат = ТекстГиперссылкиНастройкаСчетовНеТребуется();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]) Тогда
			Возврат Результат;
		КонецЕсли;
		
		ДанныеНастройки = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета[КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]];
		Если ДанныеНастройки = Неопределено Тогда
			Возврат Результат;
		КонецЕсли;
	Иначе
		ДанныеНастройки = КонтекстНастройки;
		ДанныеНастройкиСчетовУчета = НовыеДанныеНастройкиСчетовУчета();
		ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета = Истина;
		//++ Локализация
		ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьРеглУчет = Истина;
		//-- Локализация
		//++ НЕ УТКА
		ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьМФУ = Истина;
		//-- НЕ УТКА
	КонецЕсли;
	
	КоличествоНастроек = 0;
	
	//++ Локализация
	Если ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьРеглУчет
		И ЗначениеЗаполнено(ДанныеНастройки.СчетУчета) Тогда
		КоличествоНастроек = КоличествоНастроек + 1;
	КонецЕсли;
	//-- Локализация
	
	//++ НЕ УТКА
	Если ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьМФУ Тогда
		Для Каждого ДанныеМеждународнойНастройки Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
			Если ЗначениеЗаполнено(ДанныеМеждународнойНастройки.СчетУчета) Тогда
				КоличествоНастроек = КоличествоНастроек + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА
	
	Если КоличествоНастроек = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	
	//++ Локализация
	Если ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьРеглУчет
		И ЗначениеЗаполнено(ДанныеНастройки.СчетУчета) Тогда
		МассивПолей.Добавить(Строка(ДанныеНастройки.СчетУчета));
		Если КоличествоНастроек = 1 Тогда
			ДобавитьСубконтоВПредставлениеНастройки(МассивПолей, ДанныеНастройки, ПараметрыНастройки);
		КонецЕсли;
	КонецЕсли;
	//-- Локализация
	
	//++ НЕ УТКА
	Если ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьМФУ Тогда
		Для Каждого ДанныеМеждународнойНастройки Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
			Если ЗначениеЗаполнено(ДанныеМеждународнойНастройки.СчетУчета) Тогда
				МассивПолей.Добавить(Строка(ДанныеМеждународнойНастройки.СчетУчета));
				Если КоличествоНастроек = 1 Тогда
					ДобавитьСубконтоВПредставлениеНастройки(МассивПолей, ДанныеМеждународнойНастройки, ПараметрыНастройки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	//-- НЕ УТКА

	Если МассивПолей.Количество() > 0 Тогда
		Результат = СтрСоединить(МассивПолей, ", ");
	КонецЕсли;

	Возврат Результат;

КонецФункции

Процедура ЗаполнитьПредставлениеНастройки(Форма, МассивПараметровНастройки, ПутьКДанным = Неопределено,
	ИдентификаторыСтрок = Неопределено) Экспорт

	Если ИдентификаторыСтрок <> Неопределено И ТипЗнч(ИдентификаторыСтрок) <> Тип("Массив") Тогда
		ИдентификаторыСтрок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторыСтрок);
	КонецЕсли;

	Для Каждого ПараметрыНастройки Из МассивПараметровНастройки Цикл
		Если ПутьКДанным <> Неопределено И ПараметрыНастройки.ПутьКДанным <> ПутьКДанным Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьПредставлениеНастройкиПоПараметрам(Форма, ПараметрыНастройки, ИдентификаторыСтрок);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПредставлениеНастройкиПоПараметрам(Форма, ПараметрыНастройки, ИдентификаторыСтрок = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПараметрыНастройки.Представление) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");

	КонтекстНастройки = ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
	Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
		Если ИдентификаторыСтрок <> Неопределено Тогда
			// Обновим только по переданным строкам
			Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
				СтрокаТаблицы = КонтекстНастройки.НайтиПоИдентификатору(ИдентификаторСтроки);
				Представление = ПредставлениеНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
				СтрокаТаблицы[ПараметрыНастройки.Представление] = Представление;
			КонецЦикла;
		Иначе
			// Обновим все строки таблицы
			Для Каждого СтрокаТаблицы Из КонтекстНастройки Цикл
				Представление = ПредставлениеНастройкиОтражения(СтрокаТаблицы, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
				СтрокаТаблицы[ПараметрыНастройки.Представление] = Представление;
			КонецЦикла;
		КонецЕсли;
	Иначе
		Представление = ПредставлениеНастройкиОтражения(КонтекстНастройки, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
		Форма[ПараметрыНастройки.Представление] = Представление;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьЭлементовФормы(Форма, ДанныеНастройкиСчетовУчета) Экспорт

	Для Каждого ПараметрыНастройки Из ДанныеНастройкиСчетовУчета.МассивПараметровНастройки Цикл
		УстановитьВидимостьЭлементовПоПараметрам(Форма, ПараметрыНастройки, ДанныеНастройкиСчетовУчета);
	КонецЦикла;

КонецПроцедуры

Функция ТребуетсяЗаполнениеНастройкиСчетовУчетаПоУмолчанию(Форма, КонтекстНастройки, ПараметрыНастройки) Экспорт
	
	ТребуетсяЗаполнениеПоУмолчанию = ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов)
		И ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.СтатьяАктивовПассивов])
		И НЕ ЗначениеЗаполнено(КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]);
	
	Если НЕ ТребуетсяЗаполнениеПоУмолчанию Тогда
	ИначеЕсли НЕ ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи) Тогда
	ИначеЕсли ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		ТребуетсяЗаполнениеПоУмолчанию = КонтекстНастройки[ПараметрыНастройки.ТипСтатьи] = 3;
	Иначе
		ТребуетсяЗаполнениеПоУмолчанию = Форма[ПараметрыНастройки.ТипСтатьи] = 3;
	КонецЕсли;
	
	Возврат ТребуетсяЗаполнениеПоУмолчанию;
	
КонецФункции

Процедура ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(КонтекстНастройки, ПараметрыНастройки, НастройкиПоУмолчанию, ДанныеНастройкиСчетовУчета) Экспорт
	
	Если ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов) Тогда
		НастройкаПоУмолчанию = НастройкиПоУмолчанию[КонтекстНастройки[ПараметрыНастройки.СтатьяАктивовПассивов]];
		Если НастройкаПоУмолчанию <> Неопределено Тогда
			КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета] = НастройкаПоУмолчанию.НастройкаСчетовУчета;
			ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета.Вставить(НастройкаПоУмолчанию.НастройкаСчетовУчета, НастройкаПоУмолчанию.ДанныеНастройки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//++ Локализация

Функция ИспользуетсяДолгосрочныйСчет(ВидСчета) Экспорт
	
	Возврат ВидыСчетовСНастройкамиДолгосрочнойЗадолженности().Найти(ВидСчета) <> Неопределено;
	
КонецФункции

Функция ИспользуютсяМалоценныеТМЦ(ВидСчета) Экспорт
	
	Возврат ВидСчета = "НаСкладе";
	
КонецФункции

// Устанавливает свойства измерений на форме
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	РазделУчета - Неопределено, Произвольный -
Процедура УстановитьСвойстваИзмеренийНаФорме(Форма, РазделУчета = Неопределено) Экспорт

	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Если РазделУчета = Неопределено Тогда
		// Сбрасываем все предыдущие настройки элементов формы для последующего их определения на основании разделов:
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлементаНаФорме(Настройка, , "АналитикаУчета",
			"Реквизит")]);
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлементаНаФорме(Настройка, , "МестоУчета", "Реквизит")]);
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлементаНаФорме(Настройка, , "Организация", "Реквизит")]);
	Иначе
		ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, РазделУчета, "АналитикаУчета", "Реквизит");
		СвойстваИзмерения = Настройка.НастройкиРазделов.Получить(РазделУчета).СвойстваАналитики;
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлемента], СвойстваИзмерения);
		ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, РазделУчета, "МестоУчета", "Реквизит");
		СвойстваИзмерения = Настройка.НастройкиРазделов.Получить(РазделУчета).СвойстваМестаУчета;
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлемента], СвойстваИзмерения);
		ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, РазделУчета, "Организация", "Реквизит");
		СвойстваИзмерения = Настройка.НастройкиРазделов.Получить(РазделУчета).СвойстваОрганизации;
		ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Настройка.СписокРазделовУчета);
		УстановитьСвойствоЭлементаИзмерения(Форма.Элементы[ИмяЭлемента], СвойстваИзмерения);
		Если ОтмеченныеРазделы.Количество() = 1 И (ОтмеченныеРазделы.Получить(0) = "ДенежныеСредства" ИЛИ ОтмеченныеРазделы.Получить(0) = "Эквайринг") Тогда
			Форма.Элементы[ИмяЭлемента].ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСвойстваСчетовНаФорме(Форма, ИмяЭлементаНастройки, ПараметрыСоздания = Неопределено) Экспорт
	
	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Раздел = ?(ПараметрыСоздания = Неопределено, РазделУчетаПоНастройкам(Настройка), ПараметрыСоздания.РазделУчета);
	
	Если (ИмяЭлементаНастройки = "ВыручкаОтПродаж" Или ИмяЭлементаНастройки = "СебестоимостьПродаж") И Настройка.РедактированиеВСписке Тогда
		
		Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел = "НоменклатураСобственная" Тогда
			Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Заголовок = НСтр("ru = 'ОСНО';
																										|en = 'GTS'");
		КонецЕсли;
		
	КонецЕсли;

	Если (ИмяЭлементаНастройки = "ВыручкаОтПродажЕНВД" Или ИмяЭлементаНастройки = "СебестоимостьПродажЕНВД")
		И Настройка.РедактированиеВСписке Тогда

		Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел
			= "НоменклатураСобственная" Тогда
			Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки)].Заголовок = НСтр("ru = 'ЕНВД';
																										|en = 'UTII'");
		КонецЕсли;

	КонецЕсли;

	Если (ИмяЭлементаНастройки = "ОтноситсяКМалоценнымТМЦ") Тогда
		
		ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "ДопПоле");
		
		Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел
			= "НоменклатураСобственная" И Настройка.РедактированиеВСписке Тогда
			Форма.Элементы[ИмяЭлементаНаФорме].Заголовок = НСтр("ru = 'Малоценные';
																|en = 'Low-cost'");
		КонецЕсли;
		
		Если Не Настройка.РедактированиеВСписке Тогда
			Форма.Элементы[ИмяЭлементаНаФорме].ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
			Форма.Элементы[ИмяЭлементаНаФорме].Подсказка = НСтр("ru = 'Обособленное списание ТМЦ выполняется, если в учетной политике бухучета включена настройка ""Списывать стоимость малоценных ТМЦ на расходы в месяце приобретения""';
																|en = 'Inventory is written off separately if the ""Write off cost of low-cost inventory as expenses in the purchase month"" setting is enabled in the accounting policy'");
		КонецЕсли;
		
		Форма.Элементы[ИмяЭлементаНаФорме].Видимость = Настройка.ОбщиеРеквизиты.ИспользуютсяМалоценные;
		
	КонецЕсли;

	Если ИмяЭлементаНастройки = "СтатьяДоходовОСНО" Тогда

		ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");

		Если Не Настройка.РедактированиеВСписке Тогда
			ИмяРеквизитаВыручки = ИмяРеквизитаНаФорме(Настройка, Раздел, "ВыручкаОтПродаж");
			СчетУчета_ВыручкаОтПродаж = ?(Настройка.Свойство("НастройкаПоОдному"),
				Настройка.РеквизитыАналитики.СчетУчета_ВыручкаОтПродаж, Форма[ИмяРеквизитаВыручки]);
			ЭтоСчетПрочиеДоходы = БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеДоходы(СчетУчета_ВыручкаОтПродаж);
			Форма.Элементы[ИмяЭлементаНаФорме].Доступность = ЭтоСчетПрочиеДоходы;
			ИмяРеквизита = ИмяРеквизитаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
			ЗначениеРеквизита = ?(Настройка.Свойство("НастройкаПоОдному"), Форма.Запись[ИмяРеквизита],
				Форма[ИмяРеквизита]);
			Форма.Элементы[ИмяЭлементаНаФорме].ОтметкаНезаполненного = ЭтоСчетПрочиеДоходы И Не ЗначениеЗаполнено(
				ЗначениеРеквизита);
			Если Не ЭтоСчетПрочиеДоходы Тогда
				ЗначениеРеквизита = Неопределено;
			КонецЕсли;
			Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
				Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел
			= "НоменклатураСобственная" И Настройка.РедактированиеВСписке Тогда
			Форма.Элементы[ИмяЭлементаНаФорме].Заголовок = НСтр("ru = 'ОСНО';
																|en = 'GTS'");
		КонецЕсли;

	КонецЕсли;

	Если ИмяЭлементаНастройки = "СтатьяДоходовЕНВД" Тогда

		ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");

		Если Не Настройка.РедактированиеВСписке Тогда
			ИмяРеквизитаВыручки = ИмяРеквизитаНаФорме(Настройка, Раздел, "ВыручкаОтПродажЕНВД");
			СчетУчета_ВыручкаОтПродажЕНВД = ?(Настройка.Свойство("НастройкаПоОдному"),
				Настройка.РеквизитыАналитики.СчетУчета_ВыручкаОтПродажЕНВД, Форма[ИмяРеквизитаВыручки]);
			ЭтоСчетПрочиеДоходы = БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетПрочиеДоходы(
				СчетУчета_ВыручкаОтПродажЕНВД);
			Форма.Элементы[ИмяЭлементаНаФорме].Доступность = ЭтоСчетПрочиеДоходы;
			ИмяРеквизита = ИмяРеквизитаНаФорме(Настройка, Раздел, ИмяЭлементаНастройки, "Субконто");
			ЗначениеРеквизита = ?(Настройка.Свойство("НастройкаПоОдному"), Форма.Запись[ИмяРеквизита],
				Форма[ИмяРеквизита]);
			Форма.Элементы[ИмяЭлементаНаФорме].ОтметкаНезаполненного = ЭтоСчетПрочиеДоходы И Не ЗначениеЗаполнено(
				ЗначениеРеквизита);
			Если Не ЭтоСчетПрочиеДоходы Тогда
				ЗначениеРеквизита = Неопределено;
			КонецЕсли;
			Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
				Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
			КонецЕсли;
		КонецЕсли;

		Если ПараметрыСоздания <> Неопределено И ПараметрыСоздания.ГруппаДляДобавления <> Неопределено И Раздел
			= "НоменклатураСобственная" И Настройка.РедактированиеВСписке Тогда
			Форма.Элементы[ИмяЭлементаНаФорме].Заголовок = НСтр("ru = 'ЕНВД';
																|en = 'UTII'");
		КонецЕсли;

	КонецЕсли;

	Если ИмяЭлементаНастройки = "Резервы" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел,
			ИмяЭлементаНастройки)].Видимость = Настройка.ОбщиеРеквизиты.ФормироватьРезервыПредстоящихРасходов
			И Настройка.РеквизитыАналитики.ВидРезервов <> ПредопределенноеЗначение(
			"Справочник.Резервы.РезервЕжегодныхОтпусков");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;

	Если ИмяЭлементаНастройки = "ВыбытиеВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел,
			ИмяЭлементаНастройки)].Видимость = Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение(
			"Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство") Или Настройка.РеквизитыАналитики.ВидАктива
			= ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;

	Если ИмяЭлементаНастройки = "АмортизацияВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел,
			ИмяЭлементаНастройки)].Видимость = Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение(
			"Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство") Или Настройка.РеквизитыАналитики.ВидАктива
			= ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество")
			Или Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение(
			"Перечисление.ВидыВнеоборотныхАктивов.НМА");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;

	Если ИмяЭлементаНастройки = "ЗабалансовыйУчетВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел,
			ИмяЭлементаНастройки)].Видимость = Настройка.РеквизитыАналитики.ВидАктива = ПредопределенноеЗначение(
			"Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство") Или Настройка.РеквизитыАналитики.ВидАктива
			= ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;

	Если ИмяЭлементаНастройки = "АмортизацияВНА_ЦФ" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел,
			ИмяЭлементаНастройки)].Видимость = Настройка.РеквизитыАналитики.ВидАктива <> ПредопределенноеЗначение(
			"Перечисление.ВидыВнеоборотныхАктивов.НИОКР");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;

	Если ИмяЭлементаНастройки = "РезервДооценкиВНА" И Не Настройка.РедактированиеВСписке Тогда
		Форма.Элементы[ИмяЭлементаНаФорме(Настройка, Раздел,
			ИмяЭлементаНастройки)].Видимость = Настройка.РеквизитыАналитики.ВидАктива <> ПредопределенноеЗначение(
			"Перечисление.ВидыВнеоборотныхАктивов.НИОКР");
		Если Настройка.СчетаСДинамическимиСвойствами.Найти(ИмяЭлементаНастройки) = Неопределено Тогда
			Настройка.СчетаСДинамическимиСвойствами.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьРаздела(Форма, РазделыСчетовУчета) Экспорт

	Настройка = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;

	Если Не Настройка.РазбитьПоРазделамЭлементы Тогда
		Возврат;
	КонецЕсли;

	КоличествоОтмеченных = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(РазделыСчетовУчета).Количество();
	Для Каждого Раздел Из РазделыСчетовУчета Цикл
		Если ОбщийРазделУчетаПоИмениТекущегоРаздела(Раздел.Значение) = "Номенклатура"
			И Не Настройка.РедактированиеВСписке Тогда
			СтруктураВидимости = Новый Структура;
			Для Каждого НастройкаРазделаУчета Из Настройка.НастройкиРазделов Цикл
				Если НастройкаРазделаУчета.Ключ = Раздел.Значение Тогда
					Для Каждого СчетУчета Из ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(
						НастройкаРазделаУчета.Значение.СчетаУчета) Цикл
						ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, Раздел.Значение, СчетУчета);
						Если СтруктураВидимости.Свойство(ИмяЭлемента) Тогда
							СтруктураВидимости.Вставить(ИмяЭлемента, СтруктураВидимости[ИмяЭлемента] Или Раздел.Пометка);
						Иначе
							СтруктураВидимости.Вставить(ИмяЭлемента, Раздел.Пометка);
						КонецЕсли;
					КонецЦикла;
					Для Каждого Субконто Из ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(
						НастройкаРазделаУчета.Значение.Субконто) Цикл
						ИмяЭлемента = ИмяЭлементаНаФорме(Настройка, Раздел.Значение, Субконто, "Субконто");
						Если СтруктураВидимости.Свойство(ИмяЭлемента) Тогда
							СтруктураВидимости.Вставить(ИмяЭлемента, СтруктураВидимости[ИмяЭлемента] Или Раздел.Пометка);
						Иначе
							СтруктураВидимости.Вставить(ИмяЭлемента, Раздел.Пометка);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			Для Каждого ВидимостьЭлемента Из СтруктураВидимости Цикл
				Форма.Элементы[ВидимостьЭлемента.Ключ].Видимость = ВидимостьЭлемента.Значение;
			КонецЦикла;
		Иначе
			ИмяЭлементаНаФорме = ИмяЭлементаНаФорме(Настройка, Раздел.Значение, "", "Группа");
			Форма.Элементы[ИмяЭлементаНаФорме].Видимость = Раздел.Пометка;
			Если Настройка.РедактированиеВСписке Тогда
				Форма.Элементы[ИмяЭлементаНаФорме].ОтображатьВШапке = КоличествоОтмеченных > 1;
			Иначе
				Форма.Элементы[ИмяЭлементаНаФорме].ОтображатьЗаголовок = КоличествоОтмеченных > 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПараметрыВыбораСчетаУчета(ИмяВидаСчета, Настройки, ПризнакДолгосрочности, Реквизиты = Неопределено) Экспорт

	Если Реквизиты = Неопределено Тогда
		Реквизиты = Настройки.РеквизитыАналитики;
	КонецЕсли;

	РазделУчета = НастройкаСчетовУчетаКлиентСервер.РазделУчетаПоИмениСчета(ИмяВидаСчета);

	СоответствиеИменДоступныхСчетовИменамВидаСчета = Новый Соответствие;
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("Доходы", "СчетаПрочихДоходов");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НаСкладе", "СчетаУчетаНаСкладе");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НоменклатураПереданная", "СчетаУчетаПередачиНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РеализацияБезПереходаПраваСобственности",
		"СчетаУчетаПередачиНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ПередачаВПереработку", "СчетаУчетаПередачиВПереработку");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ЗатратыНаПриобретениеТМЦ",
		"СчетаУчетаЗатратыНаПриобретение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ВыручкаОтПродаж", "СчетаУчетаВыручкиОтПродаж");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ВыручкаОтПродажЕНВД", "СчетаУчетаВыручкиОтПродаж");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("СебестоимостьПродаж", "СчетаУчетаСебестоимостиПродаж");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("СебестоимостьПродажЕНВД", "СчетаУчетаСебестоимостиПродаж");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НДСПриПродаже", "СчетаУчетаНДСПриПродаже");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НДСПриОтгрузкеБезПереходаПраваСобственности",
		"СчетаУчетаНДСВПути");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦНаСкладах",
		"СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦВПроизводстве",
		"СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦУХранителей",
		"СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦКСписанию",
		"СчетаУчетаТоваровПринятыхНаОтветственноеХранение");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("МатериалыПринятыеВПереработку",
		"СчетаУчетаМатериаловПринятыхВПереработку");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("МатериалыПринятыеВПереработкуВПроизводстве",
		"СчетаУчетаМатериаловПринятыхВПереработку");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТоварыНаСкладе", "СчетаУчетаТоваровПринятыхНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТоварыПереданныеНаКомиссию",
		"СчетаУчетаТоваровПринятыхНаКомиссию");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("Производство", "СчетаУчетаНЗП");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("Резервы", "СчетаРезервов");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦВЭксплуатации", "СчетаУчетаТМЦВЭксплуатации");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ТМЦВЭксплуатацииЗаБалансом", "СчетаЗабалансовогоУчета");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыПоПодарочнымСертификатам",
		"СчетаРасчетовПоАвансаПолученным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("АвансыПолученные", "СчетаРасчетовПоАвансаПолученным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("АвансыВыданные", "СчетаРасчетовПоАвансаВыданным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыПоПретензиям", "СчетаРасчетовПоАвансаВыданным");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКлиентами", "СчетаРасчетовСКлиентами");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКлиентамиТара", "СчетаРасчетовСКлиентами");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСПоставщиками", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСПоставщикамиТара", "СчетаРасчетовСПоставщиками");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НеотфактурованныеПоставки", "СчетаРасчетовСПоставщиками");

	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("АрендныеОбязательства", "СчетаРасчетовПоАренде");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("УслугаПоАренде", "СчетаРасчетовПоАренде");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ОбеспечительныйПлатеж", "СчетаРасчетовПоАренде");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("ВыкупнаяСтоимость", "СчетаРасчетовПоАренде");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НачислениеПроцентовПоАренде", "СчетаРасчетовПоАренде");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("НДСПриАренде", "СчетаРасчетовПоАренде");
	
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКредиторамиОсновнойДолг",
		"СчетаРасчетовСКредиторамиОсновнойДолг");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКредиторамиПроценты",
		"СчетаРасчетовСКредиторамиПроценты");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСКредиторамиКомиссия",
		"СчетаРасчетовСКредиторамиКомиссия");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСДебиторамиОсновнойДолг",
		"СчетаРасчетовСДебиторамиОсновнойДолг");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСДебиторамиПроценты",
		"СчетаРасчетовСДебиторамиОсновнойДолг");
	СоответствиеИменДоступныхСчетовИменамВидаСчета.Вставить("РасчетыСДебиторамиКомиссия",
		"СчетаРасчетовСДебиторамиОсновнойДолг");

	МассивПараметровВыбора = Новый Массив;
	МассивДоступныхСчетов = Неопределено;
	
	Если РазделУчета = "Расходы" Тогда
		МассивДоступныхСчетов = МассивДоступныхСчетовРасходов(ИмяВидаСчета, Реквизиты, Настройки.ДоступныеСчетаУчета);
	ИначеЕсли РазделУчета = "ДенежныеСредства" Тогда
 		МассивДоступныхСчетов = МассивДоступныхСчетовДенежныхСредств(Реквизиты, Настройки.ДоступныеСчетаУчета);
		Если Настройки.СчетаСДинамическимиПараметрамиВыбора.Найти(ИмяВидаСчета) = Неопределено Тогда
			Настройки.СчетаСДинамическимиПараметрамиВыбора.Добавить(ИмяВидаСчета);
		КонецЕсли;
	ИначеЕсли РазделУчета = "ВнеоборотныеАктивы" Тогда
		МассивДоступныхСчетов = МассивДоступныхСчетовВнеоборотныхАктивов(ИмяВидаСчета, Реквизиты,
			Настройки.ДоступныеСчетаУчета);
	Иначе
		ИмяДоступныхСчетов = СоответствиеИменДоступныхСчетовИменамВидаСчета.Получить(ИмяВидаСчета);
		Если ИмяДоступныхСчетов = Неопределено Тогда
			Настройки.ДоступныеСчетаУчета.Свойство(ИмяВидаСчета, МассивДоступныхСчетов);
		Иначе
			Настройки.ДоступныеСчетаУчета.Свойство(ИмяДоступныхСчетов, МассивДоступныхСчетов);
		КонецЕсли;
	КонецЕсли;
	
	Если РазделСДинамическимиПараметрамиВыбораСчета(РазделУчета) Тогда
		Если Настройки.СчетаСДинамическимиПараметрамиВыбора.Найти(ИмяВидаСчета) = Неопределено Тогда
			Настройки.СчетаСДинамическимиПараметрамиВыбора.Добавить(ИмяВидаСчета);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивДоступныхСчетов = Неопределено Тогда
		МассивДоступныхСчетов = Новый Массив;
	КонецЕсли;
	
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", МассивДоступныхСчетов));
	Если СчетаБезОтбораПоВалюте().Найти(ИмяВидаСчета) = Неопределено Тогда
		УстановитьОтборВалютныхСчетов(МассивПараметровВыбора, Реквизиты, Настройки.ОбщиеРеквизиты);
	КонецЕсли;
	МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Долгосрочный", ПризнакДолгосрочности));
	
	Возврат Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецФункции

Процедура ОбработкаЗаполнения(Форма) Экспорт

	РазделУчета = РазделУчетаПоНастройкам(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета);

	Если РазделУчета = "ДенежныеСредства" Тогда
		ЗаполнитьСчетаУчетаПоУмолчаниюДенежныеСредства(Форма);
	КонецЕсли;
	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ЗаполнитьСчетаУчетаПоУмолчаниюВнеоборотныеАктивы(Форма);
	КонецЕсли;
	Если РазделУчета = "Эквайринг" Тогда
		ЗаполнитьСчетаУчетаПоУмолчаниюЭквайринг(Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяСубконтоСчета(ИмяСчета) Экспорт

	МассивИменСубконто = Новый Массив;
	МассивИменСубконто.Добавить("СтатьяДоходовОСНО");
	МассивИменСубконто.Добавить("СтатьяДоходовЕНВД");

	Для Каждого ИмяСубконто Из МассивИменСубконто Цикл
		Если СчетаИспользующиеСубконто(ИмяСубконто).Найти(ИмяСчета) <> Неопределено Тогда
			Возврат ИмяСубконто;
		КонецЕсли;
	КонецЦикла;

	Возврат Неопределено;

КонецФункции

Функция ТипСубконтоПоИмени(ИмяСубконто) Экспорт

	МассивИменСубконто = Новый Массив;
	МассивИменСубконто.Добавить("СтатьяДоходовОСНО");
	МассивИменСубконто.Добавить("СтатьяДоходовЕНВД");

	Если МассивИменСубконто.Найти(ИмяСубконто) <> Неопределено Тогда
		Возврат Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.СтатьиДоходов");
	КонецЕсли;

	Возврат Неопределено;

КонецФункции

Функция СчетаИспользующиеСубконто(ИмяСубконто) Экспорт

	СчетаИмеющиеСубконто = Новый Массив;

	Если ИмяСубконто = "СтатьяДоходовОСНО" Тогда
		СчетаИмеющиеСубконто.Добавить("ВыручкаОтПродаж");
		СчетаИмеющиеСубконто.Добавить("СебестоимостьПродаж");
		СчетаИмеющиеСубконто.Добавить("НДСПриПродаже");
		СчетаИмеющиеСубконто.Добавить("НДСПриОтгрузкеБезПереходаПраваСобственности");
		СчетаИмеющиеСубконто.Добавить("ЗатратыНаПриобретениеТМЦ");
	КонецЕсли;

	Если ИмяСубконто = "СтатьяДоходовЕНВД" Тогда
		СчетаИмеющиеСубконто.Добавить("ВыручкаОтПродажЕНВД");
		СчетаИмеющиеСубконто.Добавить("СебестоимостьПродажЕНВД");
	КонецЕсли;

	Возврат СчетаИмеющиеСубконто;

КонецФункции

Функция ИмяЭлементаНаФорме(Настройка, РазделУчета = Неопределено, ИмяЭлементаНастройки = "",
	Знач ТипЭлементаНастройки = "СчетУчета") Экспорт

	МассивСтрокИмениЭлемента = Новый Массив;
	Если ЗначениеЗаполнено(Настройка.ПрефиксЭлементовФормы) Тогда
		МассивСтрокИмениЭлемента.Добавить(Настройка.ПрефиксЭлементовФормы);
	КонецЕсли;

	Если ТипЭлементаНастройки = "Группа" Тогда
		МассивСтрокИмениЭлемента.Добавить(ТипЭлементаНастройки);
	КонецЕсли;
	Если ТипЭлементаНастройки = "ГруппаДолгосрочные" Тогда
		Если ИмяЭлементаНастройки = "Долгосрочные" Тогда
			МассивСтрокИмениЭлемента.Добавить("Группа");
		Иначе
			МассивСтрокИмениЭлемента.Добавить(ТипЭлементаНастройки);
		КонецЕсли;
	КонецЕсли;
	Если Настройка.РазбитьПоРазделам ИЛИ Настройка.РазбитьПоРазделамЭлементы И ТипЭлементаНастройки <> "Реквизит" И ТипЭлементаНастройки <> "Команда" Тогда
		Если РазделУчета = Неопределено Тогда
			РазделУчета = РазделУчетаПоНастройкам(Настройка);
		КонецЕсли;
		Если Настройка.РазбитьПоРазделам И РазделУчета <> ИмяЭлементаНастройки
			И (ТипЭлементаНастройки = "Реквизит" Или ТипЭлементаНастройки = "Группа" Или ТипЭлементаНастройки = "Команда") Тогда
			ПрефиксРаздела = ОбщийРазделУчетаПоИмениТекущегоРаздела(РазделУчета);
		Иначе
			ПрефиксРаздела = РазделУчета;
		КонецЕсли;
		МассивСтрокИмениЭлемента.Добавить(ПрефиксРаздела);
	КонецЕсли;
	Если Настройка.РедактированиеВСписке Тогда
		ТипЭлементаНастройки = СтрЗаменить(ТипЭлементаНастройки, "Долгосрочный", "");
	КонецЕсли;
	Если СтрНачинаетсяС(ТипЭлементаНастройки, "СчетУчета") Или ТипЭлементаНастройки = "Субконто" Или ТипЭлементаНастройки = "ДопПоле" Тогда
		МассивСтрокИмениЭлемента.Добавить(ТипЭлементаНастройки);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИмяЭлементаНастройки) И (РазделУчета <> ИмяЭлементаНастройки Или ТипЭлементаНастройки
		<> "Группа") И (Не Настройка.Свойство("НастройкаПоОдному") Или ТипЭлементаНастройки = "Реквизит" Или ТипЭлементаНастройки = "Команда") Тогда
		МассивСтрокИмениЭлемента.Добавить(ИмяЭлементаНастройки);
	КонецЕсли;
	ИмяЭлемента = СтрСоединить(МассивСтрокИмениЭлемента, "_");

	Возврат ИмяЭлемента;

КонецФункции

Функция ИмяЭлементаНастройкиПоИмениЭлементаФормы(ИмяЭлементаФормы, ОставлятьПрефиксТипа = Ложь) Экспорт

	МассивСтрокИмениЭлементаФормы = СтрРазделить(ИмяЭлементаФормы, "_");
	МассивСтрокВозврата = Новый Массив;
	ЧислоЧастейИмениЭлемента = ?(ОставлятьПрефиксТипа, 1, 0) + ?(СтрЗаканчиваетсяНа(ИмяЭлементаФормы, "_ЦФ"), 2, 1);
	Для Итератор = 1 По ЧислоЧастейИмениЭлемента Цикл
		МассивСтрокВозврата.Вставить(0, МассивСтрокИмениЭлементаФормы.Получить(
			МассивСтрокИмениЭлементаФормы.Количество() - Итератор));
	КонецЦикла;
	Возврат СтрСоединить(МассивСтрокВозврата, "_");

КонецФункции

Функция ИмяРеквизитаНаФорме(Настройка, РазделУчета = Неопределено, ИмяЭлементаНастройки = "",
	Знач ТипЭлементаНастройки = "СчетУчета") Экспорт

	МассивСтрокИменРеквизита = Новый Массив;

	Если ТипЭлементаНастройки = "Реквизит" Тогда
		МассивСтрокИменРеквизита.Добавить(Настройка.ПрефиксПутиКДаннымРеквизитов);
	ИначеЕсли ТипЭлементаНастройки <> "Команда" ИЛИ Не Настройка.РедактированиеВСписке Тогда
		МассивСтрокИменРеквизита.Добавить(Настройка.ПрефиксПутиКДанным);
	КонецЕсли;

	Если Настройка.РазбитьПоРазделам Тогда
		Если РазделУчета = Неопределено Тогда
			РазделУчета = РазделУчетаПоНастройкам(Настройка);
		КонецЕсли;
		МассивСтрокИменРеквизита.Добавить(ОбщийРазделУчетаПоИмениТекущегоРаздела(РазделУчета) + ".");
	КонецЕсли;

	Если Настройка.РедактированиеВСписке Тогда
		ТипЭлементаНастройки = СтрЗаменить(ТипЭлементаНастройки, "Долгосрочный", "");
	КонецЕсли;

	Если ТипЭлементаНастройки <> "Реквизит" И ТипЭлементаНастройки <> "Команда" Тогда
		МассивСтрокИменРеквизита.Добавить(ТипЭлементаНастройки);
		Если Не Настройка.Свойство("НастройкаПоОдному") Тогда
			МассивСтрокИменРеквизита.Добавить("_");
			МассивСтрокИменРеквизита.Добавить(ИмяЭлементаНастройки);
		КонецЕсли;
	Иначе
		МассивСтрокИменРеквизита.Добавить(ИмяЭлементаНастройки);
	КонецЕсли;

	Возврат СтрСоединить(МассивСтрокИменРеквизита);

КонецФункции

Функция РазделыУчетаНеЗависящиеОтОрганизации() Экспорт

	МассивВозврата = Новый Массив;

	МассивВозврата.Добавить("ВнеоборотныеАктивы");

	Возврат МассивВозврата;

КонецФункции

Функция ВидыРасчетовСПартнерами() Экспорт

	ВидыРасчетов = Новый Массив;
	ВидыРасчетов.Добавить("РасчетыСКлиентами");
	ВидыРасчетов.Добавить("РасчетыСПоставщиками");
	ВидыРасчетов.Добавить("РасчетыСКомиссионерами");
	ВидыРасчетов.Добавить("РасчетыСКомитентами");
	ВидыРасчетов.Добавить("РасчетыСКомитентамиПоЗакупке");
	ВидыРасчетов.Добавить("РасчетыСКредиторами");
	ВидыРасчетов.Добавить("РасчетыСДебиторами");
	ВидыРасчетов.Добавить("РасчетыСАрендодателями");

	Возврат ВидыРасчетов;

КонецФункции

Функция СписокРазделовСчетовУчета(ПолучатьОбщиеРазделы = Ложь) Экспорт

	СписокВозврата = Новый СписокЗначений;

	Если ПолучатьОбщиеРазделы Тогда
		СписокВозврата.Добавить("Номенклатура", НСтр("ru = 'номенклатуры';
													|en = 'products'"));
	Иначе
		СписокВозврата.Добавить("НоменклатураСобственная", НСтр("ru = 'номенклатуры';
																|en = 'products'"));
		СписокВозврата.Добавить("НоменклатураПереданная", НСтр("ru = 'номенклатуры переданной';
																|en = 'products transferred'"));
		СписокВозврата.Добавить("НоменклатураПринятая", НСтр("ru = 'номенклатуры принятой';
															|en = 'of products accepted'"));
	КонецЕсли;
	СписокВозврата.Добавить("ТМЦВЭксплуатации", НСтр("ru = 'ТМЦ в эксплуатации';
													|en = 'Inventory in operation'"));
	СписокВозврата.Добавить("ДенежныеСредства", НСтр("ru = 'денежных средств';
													|en = 'cash'"));
	СписокВозврата.Добавить("ПодарочныеСертификаты", НСтр("ru = 'подарочных сертификатов';
															|en = 'gift certificates'"));
	Если ПолучатьОбщиеРазделы Тогда
		СписокВозврата.Добавить("РасчетыСПартнерами", НСтр("ru = 'расчетов с партнерами';
															|en = 'settlements with partners'"));
	Иначе
		СписокВозврата.Добавить("РасчетыСКлиентами", НСтр("ru = 'расчетов с клиентами';
															|en = 'settlements with customers'"));
		СписокВозврата.Добавить("РасчетыСПоставщиками", НСтр("ru = 'расчетов с поставщиками';
															|en = 'settlements with suppliers'"));
		СписокВозврата.Добавить("РасчетыСКомиссионерами", НСтр("ru = 'расчетов с комиссионерами';
																|en = 'settlements with consignees'"));
		СписокВозврата.Добавить("РасчетыСКомитентами", НСтр("ru = 'расчетов с комитентами по продаже';
															|en = 'settlements with consignors on sales'"));
		СписокВозврата.Добавить("РасчетыСКомитентамиПоЗакупке", НСтр("ru = 'расчетов с комитентами по закупке';
																	|en = 'settlements with consignors on purchase'"));
		СписокВозврата.Добавить("РасчетыСКредиторами", НСтр("ru = 'расчетов с кредиторами';
															|en = 'settlements with creditors'"));
		СписокВозврата.Добавить("РасчетыСДебиторами", НСтр("ru = 'расчетов с дебиторами';
															|en = 'settlements with debtors'"));
		СписокВозврата.Добавить("РасчетыСАрендодателями", НСтр("ru = 'расчетов с арендодателями';
																|en = 'settlements with lessors'"));
	КонецЕсли;
	СписокВозврата.Добавить("Производство", НСтр("ru = 'Производства';
												|en = 'Production'"));
	СписокВозврата.Добавить("ВнеоборотныеАктивы", НСтр("ru = 'внеоборотных активов';
														|en = 'capital assets'"));
	СписокВозврата.Добавить("Расходы", НСтр("ru = 'прочих расходов';
											|en = 'other expenses'"));
	СписокВозврата.Добавить("Доходы", НСтр("ru = 'прочих доходов';
											|en = 'other expenses'"));
	СписокВозврата.Добавить("Резервы", НСтр("ru = 'резервов (оценочных обязательств)';
											|en = 'reserves (estimated liabilities)'"));
	СписокВозврата.Добавить("Эквайринг", НСтр("ru = 'эквайринга';
												|en = 'acquiring'"));
	
	Возврат СписокВозврата;

КонецФункции

Функция РазделыУчетаДляКоторыхНастраиваютсяИсключения() Экспорт

	МассивВозврата = Новый Массив;

	МассивВозврата.Добавить("Доходы");
	МассивВозврата.Добавить("НоменклатураСобственная");
	МассивВозврата.Добавить("НоменклатураПереданная");
	МассивВозврата.Добавить("НоменклатураПринятая");
	МассивВозврата.Добавить("ПодарочныеСертификаты");
	МассивВозврата.Добавить("Производство");
	МассивВозврата.Добавить("Расходы");
	МассивВозврата.Добавить("РасчетыСКлиентами");
	МассивВозврата.Добавить("РасчетыСПоставщиками");
	МассивВозврата.Добавить("РасчетыСКомиссионерами");
	МассивВозврата.Добавить("РасчетыСКомитентами");
	МассивВозврата.Добавить("РасчетыСКомитентамиПоЗакупке");
	МассивВозврата.Добавить("РасчетыСКредиторами");
	МассивВозврата.Добавить("РасчетыСДебиторами");
	МассивВозврата.Добавить("РасчетыСАрендодателями");
	МассивВозврата.Добавить("Резервы");
	МассивВозврата.Добавить("ТМЦВЭксплуатации");

	Возврат МассивВозврата;
КонецФункции

Функция ЗаголовокПоРазделамУчета(РазделыУчета) Экспорт

	Если ТипЗнч(РазделыУчета) = Тип("Массив") Тогда
		СписокРазделов = СписокРазделовСчетовУчета();
	КонецЕсли;
	МассивЗаголовка = Новый Массив;

	Для Каждого Раздел Из РазделыУчета Цикл
		Пометка = ?(ТипЗнч(РазделыУчета) = Тип("Массив"), СписокРазделов.НайтиПоЗначению(Раздел) <> Неопределено,
			Раздел.Пометка);
		Если Пометка Тогда
			Представление = ?(ТипЗнч(РазделыУчета) = Тип("Массив"), СписокРазделов.НайтиПоЗначению(
				Раздел).Представление, Раздел.Представление);
			МассивЗаголовка.Добавить(Представление);
		КонецЕсли;
	КонецЦикла;

	Если МассивЗаголовка.Количество() Тогда
		Возврат СтрСоединить(МассивЗаголовка, ", ");
	Иначе
		Возврат НСтр("ru = '< не указаны >';
					|en = '< not specified >'");
	КонецЕсли;

КонецФункции

// Проверяет корректность выбранных счетов учета, а также настраивает элементы управления по переданным параметрам.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма объекта настройки
//
Процедура УстановитьСвойстваЭлементовНастройкиСчетовУчета(Форма, ЗаполнитьПоУмолчанию = Ложь) Экспорт

	Настройки = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	ТекущийРазделУчета = РазделУчетаПоНастройкам(Настройки);
	ТекушиеНастройкиРаздела = Настройки.НастройкиРазделов.Получить(ТекущийРазделУчета);
	Для каждого ИмяСчета Из Настройки.СчетаСДинамическимиПараметрамиВыбора Цикл
		Если ТекушиеНастройкиРаздела.СчетаУчета.НайтиПоЗначению(ИмяСчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЭлементФормы = Форма.Элементы[ИмяЭлементаНаФорме(Настройки, Неопределено, ИмяСчета)];
		ЭлементФормы.ПараметрыВыбора = ПараметрыВыбораСчетаУчета(ИмяСчета, Настройки, Ложь);
		Если ТекушиеНастройкиРаздела.ДолгосрочныеСчета.Найти(ИмяСчета) <> Неопределено И Не Настройки.РедактированиеВСписке Тогда
			ЭлементФормы = Форма.Элементы[ИмяЭлементаНаФорме(Настройки, Неопределено, ИмяСчета, "СчетУчетаДолгосрочный")];
			ЭлементФормы.ПараметрыВыбора = ПараметрыВыбораСчетаУчета(ИмяСчета, Настройки, Истина);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ИмяСчета Из Настройки.СчетаСДинамическимиСвойствами Цикл
		Если ТекушиеНастройкиРаздела.СчетаУчета.НайтиПоЗначению(ИмяСчета) = Неопределено
			И ТекушиеНастройкиРаздела.Субконто.НайтиПоЗначению(ИмяСчета) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		УстановитьСвойстваСчетовНаФорме(Форма, ИмяСчета);
	КонецЦикла;
	Если Настройки.ОбщиеРеквизиты.Свойство("СписокРазделовУчета") Тогда
		УстановитьВидимостьРаздела(Форма, Настройки.СписокРазделовУчета);
	КонецЕсли;
	Если Настройки.ИспользуютсяДолгосрочныеСчетаУчета Тогда
		Если ТекушиеНастройкиРаздела.ДолгосрочныеСчета.Количество() Тогда
			ГруппаКраткосрочные = ИмяЭлементаНаФорме(Настройки, ТекущийРазделУчета, "Краткосрочные", "Группа");
			ГруппаДолгосрочные = ИмяЭлементаНаФорме(Настройки, ТекущийРазделУчета, "Долгосрочные", "ГруппаДолгосрочные");
			Форма.Элементы[ГруппаКраткосрочные].ОтображатьЗаголовок = Настройки.ОбщиеРеквизиты.ПоказыватьДолгосрочныеСчета;
			Форма.Элементы[ГруппаДолгосрочные].Видимость = Настройки.ОбщиеРеквизиты.ПоказыватьДолгосрочныеСчета;
		КонецЕсли;
		КомандаПоказыватьДолгосрочные = ИмяЭлементаНаФорме(Настройки,, "ПоказыватьДолгосрочныеСчета", "Команда");
		Форма.Элементы[КомандаПоказыватьДолгосрочные].Пометка = Настройки.ОбщиеРеквизиты.ПоказыватьДолгосрочныеСчета;
	КонецЕсли;
	
	Если ЗаполнитьПоУмолчанию Тогда
		ОбработкаЗаполнения(Форма);
	КонецЕсли;

КонецПроцедуры

// Заполняет реквизиты параметров настройки счетов учета, которые влияют на настройку
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	АналитикаУчета - ОпределяемыйТип.НастройкаСчетовУчетаАналитикаУчета - аналитика учета порядка отражения
//
Процедура ЗаполнитьРеквизитыНастройкиСчетовУчетаПоДаннымОбъектаАналитики(Форма, АналитикаУчета) Экспорт

	ПутиКРеквизитамАналитики = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.ПутиКРеквизитамАналитики;
	Реквизиты = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.РеквизитыАналитики;

	Для Каждого ЭлементСоответствияИменРеквизитовИПути Из ПутиКРеквизитамАналитики Цикл
		Если Реквизиты.Свойство(ЭлементСоответствияИменРеквизитовИПути.Ключ) И ЗначениеЗаполнено(
			ЭлементСоответствияИменРеквизитовИПути.Значение) Тогда
			Реквизиты[ЭлементСоответствияИменРеквизитовИПути.Ключ] = АналитикаУчета[ЭлементСоответствияИменРеквизитовИПути.Значение];
		КонецЕсли;
	КонецЦикла;
	Если АналитикаУчета <> Неопределено И ТипЗнч(АналитикаУчета.Ссылка) = Тип(
		"СправочникСсылка.ГруппыФинансовогоУчетаРасчетов") Тогда
		МассивВидовРасчетов = Новый Массив;
		Для Каждого РеквизитВидаРасчетов Из ПутиКРеквизитамАналитики Цикл
			Если ВидыРасчетовСПартнерами().Найти(РеквизитВидаРасчетов.Значение) <> Неопределено И АналитикаУчета[РеквизитВидаРасчетов.Значение] Тогда
				МассивВидовРасчетов.Добавить(РеквизитВидаРасчетов.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если МассивВидовРасчетов.Количество() <> 1 Тогда
			МассивВидовРасчетов = СтрРазделить(
				"РасчетыСКлиентами,РасчетыСПоставщиками,РасчетыСДебиторами,РасчетыСКредиторами,РасчетыСАрендодателями",
				",");
		КонецЕсли;
		Для Каждого ЭлементСписка Из Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета Цикл
			ЭлементСписка.Пометка = МассивВидовРасчетов.Найти(ЭлементСписка.Значение) <> Неопределено;
		КонецЦикла;
	КонецЕсли;
	Если АналитикаУчета <> Неопределено И ТипЗнч(АналитикаУчета.Ссылка) = Тип("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов") Тогда
		МассивВидовДоходовРасходов = Новый Массив;
		Для каждого РеквизитВидаРасчетов Из ПутиКРеквизитамАналитики Цикл
			Если АналитикаУчета[РеквизитВидаРасчетов.Значение] Тогда
				МассивВидовДоходовРасходов.Добавить(РеквизитВидаРасчетов.Ключ);
			КонецЕсли;
		КонецЦикла;
		Если МассивВидовДоходовРасходов.Количество() <> 1 Тогда
			МассивВидовДоходовРасходов = СтрРазделить("Доходы,Расходы", ",");
		КонецЕсли;
		Для каждого ЭлементСписка Из Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета.СписокРазделовУчета Цикл
			ЭлементСписка.Пометка = МассивВидовДоходовРасходов.Найти(ЭлементСписка.Значение) <> Неопределено;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Функция РазделыУчетаСОбязательнойАналитикой() Экспорт

	МассивВозврата = Новый Массив;

	МассивВозврата.Добавить("ПодарочныеСертификаты");
	МассивВозврата.Добавить("ДенежныеСредства");
	
	Возврат МассивВозврата;

КонецФункции

Функция ГруппаСчетаУчета(ИмяСчета, РазделУчета, ЭтоСписок) Экспорт

	СоответствиеСчетовУчетаГруппам = Новый Соответствие;

	Если РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураСобственная" Или РазделУчета
		= "НоменклатураПереданная" Тогда

		Если Не ЭтоСписок Тогда

			ГруппаСтоимость = Новый Структура("ИмяГруппы, Заголовок", "Стоимость", НСтр(
				"ru = 'Счета учета стоимости номенклатуры';
				|en = 'GL accounts of product cost'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСтоимость.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСтоимость);
			КонецЦикла;

		КонецЕсли;

		Если ЭтоСписок И (РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураСобственная") Тогда
			ГруппаВыручка = Новый Структура("ИмяГруппы, Заголовок", "Выручка", НСтр("ru = 'Выручка от продаж';
																					|en = 'Sales revenue'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаВыручка.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаВыручка);
			КонецЦикла;

			ГруппаСебестоимость = Новый Структура("ИмяГруппы, Заголовок", "Себестоимость", НСтр(
				"ru = 'Себестоимость продаж';
				|en = 'Sales cost'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСебестоимость.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСебестоимость);
			КонецЦикла;

			ГруппаСтатьяДоходов = Новый Структура("ИмяГруппы, Заголовок", "СтатьяДоходов", НСтр(
				"ru = 'Статьи доходов';
				|en = 'Income items'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаСтатьяДоходов.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаСтатьяДоходов);
			КонецЦикла;
		ИначеЕсли Не ЭтоСписок Тогда
			ГруппаПродажи = Новый Структура("ИмяГруппы, Заголовок", "Продажи", НСтр("ru = 'Счета учета продаж';
																					|en = 'Sales GL account'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаПродажи.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаПродажи);
			КонецЦикла;
		КонецЕсли;

		Если Не ЭтоСписок Тогда

			ГруппаНДС = Новый Структура("ИмяГруппы, Заголовок", "НДС", НСтр("ru = 'НДС';
																			|en = 'VAT'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаНДС.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаНДС);
			КонецЦикла;

			ГруппаРезервы = Новый Структура("ИмяГруппы, Заголовок", "Резервы", НСтр("ru = 'Резервы';
																					|en = 'Reserves'"));
			Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаРезервы.ИмяГруппы, РазделУчета) Цикл
				СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаРезервы);
			КонецЦикла;

		КонецЕсли;
	КонецЕсли;

	Если РазделУчета = "Номенклатура" Или РазделУчета = "НоменклатураПринятая" Тогда

		ГруппаТМЦПринятыеНаОтветственноеХранение = Новый Структура("ИмяГруппы, Заголовок",
			"ТМЦПринятыеНаОтветственноеХранение", НСтр("ru = 'ТМЦ, принятые на ответственное хранение';
														|en = 'Inventory received for safekeeping'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТМЦПринятыеНаОтветственноеХранение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТМЦПринятыеНаОтветственноеХранение);
		КонецЦикла;

		ГруппаМатериалыПринятыеВПереработку = Новый Структура("ИмяГруппы, Заголовок", "МатериалыПринятыеВПереработку",
			НСтр("ru = 'Материалы, принятые в переработку';
				|en = 'Materials received for processing'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаМатериалыПринятыеВПереработку.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаМатериалыПринятыеВПереработку);
		КонецЦикла;

		ГруппаТоварыПринятыеНаКомиссию = Новый Структура("ИмяГруппы, Заголовок", "ТоварыПринятыеНаКомиссию", НСтр(
			"ru = 'Товары, принятые на комиссию';
			|en = 'Consigned goods received'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыПринятыеНаКомиссию.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыПринятыеНаКомиссию);
		КонецЦикла;

	КонецЕсли;

	Если РазделУчета = "РасчетыСКомиссионерами" Тогда
		ГруппаТовары = Новый Структура("ИмяГруппы, Заголовок", "Товары", ?(ЭтоСписок, НСтр("ru = 'Товары';
																							|en = 'Goods'"), НСтр("ru = 'Расчеты за товары (услуги)';
																													|en = 'Settlements for goods (services)'")));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТовары.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТовары);
		КонецЦикла;

		ГруппаВознаграждение = Новый Структура("ИмяГруппы, Заголовок", "Вознаграждение", ?(ЭтоСписок, НСтр("ru = 'Вознаграждение';
																											|en = 'Remuneration'"), НСтр("ru = 'Расчеты по вознаграждению';
																																			|en = 'Remuneration settlements'")));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаВознаграждение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаВознаграждение);
		КонецЦикла;
	КонецЕсли;

	Если РазделУчета = "РасчетыСКомитентами" Тогда
		ГруппаТовары = Новый Структура("ИмяГруппы, Заголовок", "Товары", ?(ЭтоСписок, НСтр("ru = 'Товары';
																							|en = 'Goods'"), НСтр("ru = 'Расчеты за товары (услуги)';
																													|en = 'Settlements for goods (services)'")));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТовары.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТовары);
		КонецЦикла;

		ГруппаВознаграждение = Новый Структура("ИмяГруппы, Заголовок", "Вознаграждение", ?(ЭтоСписок, НСтр("ru = 'Вознаграждение';
																											|en = 'Remuneration'"), НСтр("ru = 'Расчеты по вознаграждению';
																																			|en = 'Remuneration settlements'")));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаВознаграждение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаВознаграждение);
		КонецЦикла;

		ГруппаТоварыКОформлению = Новый Структура("ИмяГруппы, Заголовок", "ТоварыКОформлению", НСтр(
			"ru = 'Товары к оформлению';
			|en = 'Goods for registration'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыКОформлению.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыКОформлению);
		КонецЦикла;
	КонецЕсли;

	Если РазделУчета = "РасчетыСКомитентамиПоЗакупке" Тогда
		ГруппаТоварыВознаграждение = Новый Структура("ИмяГруппы, Заголовок", "ТоварыВознаграждение", НСтр(
			"ru = 'Расчеты за товары (услуги), вознаграждение';
			|en = 'Settlements for goods (services), remuneration'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыВознаграждение.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыВознаграждение);
		КонецЦикла;

		ГруппаТоварыКОформлению = Новый Структура("ИмяГруппы, Заголовок", "ТоварыКОформлению", НСтр(
			"ru = 'Товары к оформлению';
			|en = 'Goods for registration'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаТоварыКОформлению.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаТоварыКОформлению);
		КонецЦикла;
	КонецЕсли;

	Если РазделУчета = "ВнеоборотныеАктивы" Тогда
		ГруппаЦелевоеФинансирование = Новый Структура("ИмяГруппы, Заголовок", "ЦелевоеФинансирование", НСтр(
			"ru = 'Целевое финансирование';
			|en = 'Special-purpose funding'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаЦелевоеФинансирование.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаЦелевоеФинансирование);
		КонецЦикла;

		ГруппаЗабалансовыйУчет = Новый Структура("ИмяГруппы, Заголовок", "ЗабалансовыйУчет", НСтр(
			"ru = 'Забалансовый учет';
			|en = 'Off-balance accounting'"));
		Для Каждого СчетУчета Из СчетаУчетаГруппы(ГруппаЗабалансовыйУчет.ИмяГруппы, РазделУчета) Цикл
			СоответствиеСчетовУчетаГруппам.Вставить(СчетУчета, ГруппаЗабалансовыйУчет);
		КонецЦикла;
	КонецЕсли;

	Возврат СоответствиеСчетовУчетаГруппам.Получить(ИмяСчета);

КонецФункции

Функция СчетаУчетаГруппы(ИмяГруппы, РазделУчета = Неопределено) Экспорт

	МассивСчетов = Новый Массив;

	Если ИмяГруппы = "Стоимость" Тогда

		МассивСчетов.Добавить("НаСкладе");
		МассивСчетов.Добавить("ОтноситсяКМалоценнымТМЦ");
		МассивСчетов.Добавить("РеализацияБезПереходаПраваСобственности");
		МассивСчетов.Добавить("ЗатратыНаПриобретениеТМЦ");
		МассивСчетов.Добавить("НоменклатураПереданная");
		МассивСчетов.Добавить("ПередачаВПереработку");

	КонецЕсли;

	Если ИмяГруппы = "Выручка" Или ИмяГруппы = "Продажи" Тогда

		МассивСчетов.Добавить("ВыручкаОтПродаж");
		МассивСчетов.Добавить("ВыручкаОтПродажЕНВД");

	КонецЕсли;

	Если ИмяГруппы = "Себестоимость" Или ИмяГруппы = "Продажи" Тогда

		МассивСчетов.Добавить("СебестоимостьПродаж");
		МассивСчетов.Добавить("СебестоимостьПродажЕНВД");

	КонецЕсли;

	Если ИмяГруппы = "СтатьяДоходов" Или ИмяГруппы = "Продажи" Тогда

		МассивСчетов.Добавить("СтатьяДоходовОСНО");
		МассивСчетов.Добавить("СтатьяДоходовЕНВД");

	КонецЕсли;

	Если ИмяГруппы = "НДС" Тогда

		МассивСчетов.Добавить("НДСПриПродаже");
		МассивСчетов.Добавить("НДСПриОтгрузкеБезПереходаПраваСобственности");

	КонецЕсли;

	Если ИмяГруппы = "Резервы" Тогда

		МассивСчетов.Добавить("РезервыПодОбесценениеТМЦ");
		МассивСчетов.Добавить("РезервыПодОбесценениеПереданные");

	КонецЕсли;

	Если ИмяГруппы = "ТМЦПринятыеНаОтветственноеХранение" Тогда

		МассивСчетов.Добавить("ТМЦНаСкладах");
		МассивСчетов.Добавить("ТМЦВПроизводстве");
		МассивСчетов.Добавить("ТМЦУХранителей");
		МассивСчетов.Добавить("ТМЦКСписанию");

	КонецЕсли;

	Если ИмяГруппы = "МатериалыПринятыеВПереработку" Тогда

		МассивСчетов.Добавить("МатериалыПринятыеВПереработку");
		МассивСчетов.Добавить("МатериалыПринятыеВПереработкуВПроизводстве");

	КонецЕсли;

	Если ИмяГруппы = "ТоварыПринятыеНаКомиссию" Тогда

		МассивСчетов.Добавить("ТоварыНаСкладе");
		МассивСчетов.Добавить("ТоварыПереданныеНаКомиссию");

	КонецЕсли;

	Если ИмяГруппы = "ТоварыПринятыеНаКомиссию" Тогда

		МассивСчетов.Добавить("ТоварыНаСкладе");
		МассивСчетов.Добавить("ТоварыПереданныеНаКомиссию");

	КонецЕсли;

	Если ИмяГруппы = "ТоварыПринятыеНаКомиссию" Тогда

		МассивСчетов.Добавить("ТоварыНаСкладе");
		МассивСчетов.Добавить("ТоварыПереданныеНаКомиссию");

	КонецЕсли;

	Если РазделУчета = "РасчетыСКомиссионерами" И ИмяГруппы = "Товары" Или РазделУчета = "РасчетыСКомитентами"
		И ИмяГруппы = "Вознаграждение" Или РазделУчета = "РасчетыСКомитентамиПоЗакупке" И ИмяГруппы
		= "ТоварыВознаграждение" Тогда
		МассивСчетов.Добавить("РасчетыСКлиентами");
		МассивСчетов.Добавить("АвансыПолученные");
	КонецЕсли;

	Если РазделУчета = "РасчетыСКомиссионерами" И ИмяГруппы = "Вознаграждение" Или РазделУчета = "РасчетыСКомитентами"
		И ИмяГруппы = "Товары" Тогда
		МассивСчетов.Добавить("РасчетыСПоставщиками");
		МассивСчетов.Добавить("АвансыВыданные");
	КонецЕсли;

	Если РазделУчета = "РасчетыСКомитентами" И ИмяГруппы = "ТоварыКОформлению" Тогда
		МассивСчетов.Добавить("ТоварыКомитентовКОформлениюПоПродаже");
	КонецЕсли;

	Если РазделУчета = "РасчетыСКомитентамиПоЗакупке" И ИмяГруппы = "ТоварыКОформлению" Тогда
		МассивСчетов.Добавить("ТоварыКомитентовКОформлениюПоЗакупке");
	КонецЕсли;

	Если ИмяГруппы = "ЦелевоеФинансирование" Тогда

		МассивСчетов.Добавить("СтоимостьВНА_ЦФ");
		МассивСчетов.Добавить("АмортизацияВНА_ЦФ");

	КонецЕсли;

	Если ИмяГруппы = "ЗабалансовыйУчет" Тогда

		МассивСчетов.Добавить("ЗабалансовыйУчетВНА");

	КонецЕсли;

	Возврат МассивСчетов;

КонецФункции

Функция ДопПредставлениеГруппы(Форма, ИмяГруппы) Экспорт

	СчетаУчетаГруппы = СчетаУчетаГруппы(ИмяГруппы);
	ЗначенияСчетов = Новый Массив;
	Для Каждого СчетУчета Из СчетаУчетаГруппы Цикл
		Если СтрНачинаетсяС(СчетУчета, "СтатьяДоходов")
			Или СчетУчета = "ОтноситсяКМалоценнымТМЦ" Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеСчета = Форма[ИмяРеквизитаНаФорме(Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета, , СчетУчета)];
		Если ЗначениеЗаполнено(ЗначениеСчета) Тогда
			ЗначенияСчетов.Добавить(ЗначениеСчета);
		КонецЕсли;
	КонецЦикла;

	Возврат " (" + ?(ЗначенияСчетов.Количество(), СтрСоединить(ЗначенияСчетов, ", "), НСтр("ru = 'не указаны';
																							|en = 'not specified'")) + ")";

КонецФункции

Функция РазделУчетаПоИмениСчета(ИмяВидаСчета) Экспорт

	СоответствиеИменВидовСчетовРазделамУчета = Новый Соответствие;

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Расходы", "Расходы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СписаниеРасходовОСНО", "Расходы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СписаниеРасходовЕНВД", "Расходы");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Доходы", "Доходы");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ДенежныеСредства", "ДенежныеСредства");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НаСкладе", "НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыручкаОтПродаж", "Номенклатура");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыручкаОтПродажЕНВД", "НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СебестоимостьПродажЕНВД", "НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СебестоимостьПродаж", "Номенклатура");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НДСПриПродаже", "Номенклатура");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РеализацияБезПереходаПраваСобственности",
		"НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НДСПриОтгрузкеБезПереходаПраваСобственности",
		"НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РезервыПодОбесценениеТМЦ", "НоменклатураСобственная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ЗатратыНаПриобретениеТМЦ", "НоменклатураПереданная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ПередачаВПереработку", "НоменклатураПереданная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НоменклатураПереданная", "НоменклатураПереданная");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РезервыПодОбесценениеПереданные", "НоменклатураПереданная");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦНаСкладах", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦВПроизводстве", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦУХранителей", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦКСписанию", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("МатериалыПринятыеВПереработку", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("МатериалыПринятыеВПереработкуВПроизводстве",
		"НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыНаСкладе", "НоменклатураПринятая");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыПереданныеНаКомиссию", "НоменклатураПринятая");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКлиентами", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АвансыПолученные", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСПоставщиками", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АвансыВыданные", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыПоПретензиям", "РасчетыСПоставщиками");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКлиентамиТара", "РасчетыСКлиентами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСПоставщикамиТара", "РасчетыСПоставщиками");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НеотфактурованныеПоставки", "РасчетыСПоставщиками");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ПроцентыПоДисконтированию", "РасчетыСПоставщиками");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ПереносДолгосрочнойЗадолженности", "РасчетыСПартнерами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыКомитентовКОформлениюПоПродаже", "РасчетыСКомитентами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТоварыКомитентовКОформлениюПоЗакупке",
		"РасчетыСКомитентамиПоЗакупке");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКредиторамиОсновнойДолг", "РасчетыСКредиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКредиторамиПроценты", "РасчетыСКредиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСКредиторамиКомиссия", "РасчетыСКредиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСДебиторамиОсновнойДолг", "РасчетыСДебиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСДебиторамиПроценты", "РасчетыСДебиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыСДебиторамиКомиссия", "РасчетыСДебиторами");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ОбеспечительныйПлатеж", "РасчетыСАрендодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АрендныеОбязательства", "РасчетыСАрендодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("УслугаПоАренде", "РасчетыСАрендодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыкупнаяСтоимость", "РасчетыСАрендодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НДСПриАренде", "РасчетыСАрендодателями");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("НачислениеПроцентовПоАренде", "РасчетыСАрендодателями");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Производство", "Производство");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РезервыПодОбесценениеПроизводства", "Производство");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("Резервы", "Резервы");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦВЭксплуатации", "ТМЦВЭксплуатации");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ТМЦВЭксплуатацииЗаБалансом", "ТМЦВЭксплуатации");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РасчетыПоПодарочнымСертификатам", "ПодарочныеСертификаты");

	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ПродажиПоЭквайрингу", "Эквайринг");
	
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СтоимостьВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АмортизацияВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РезервДооценкиВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("РезервДоОценкиВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ВыбытиеВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("СтоимостьВНА_ЦФ", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("АмортизацияВНА_ЦФ", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ЗабалансовыйУчетВНА", "ВнеоборотныеАктивы");
	СоответствиеИменВидовСчетовРазделамУчета.Вставить("ОбесценениеВНА", "ВнеоборотныеАктивы");

	Возврат СоответствиеИменВидовСчетовРазделамУчета.Получить(ИмяВидаСчета);

КонецФункции

Процедура ЗаполнитьСчетаУчетаНастройкамиРаздела(Раздел, СтруктураЗаполнения, НастройкиСчетовУчета, Источник) Экспорт

	НастройкаРаздела = НастройкиСчетовУчета.НастройкиРазделов.Получить(Раздел);

	СчетаРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.СчетаУчета);
	Для Каждого СчетРаздела Из СчетаРаздела Цикл
		ИмяРеквизитаНаФорме = ИмяРеквизитаНаФорме(НастройкиСчетовУчета, Раздел, СчетРаздела);
		ИмяИсточника = ?(НастройкиСчетовУчета.РедактированиеВСписке, СтрЗаменить(ИмяРеквизитаНаФорме,
			НастройкиСчетовУчета.ПрефиксПутиКДанным, ""), ИмяРеквизитаНаФорме);
		СтруктураЗаполнения.Вставить("СчетУчета_" + СчетРаздела, Источник[ИмяИсточника]);
		
		ИмяРеквизитаНаФорме = ИмяРеквизитаНаФорме(НастройкиСчетовУчета, Раздел, "ОтноситсяКМалоценнымТМЦ", "ДопПоле");
		ИмяИсточника = ?(НастройкиСчетовУчета.РедактированиеВСписке, СтрЗаменить(ИмяРеквизитаНаФорме,
			НастройкиСчетовУчета.ПрефиксПутиКДанным, ""), ИмяРеквизитаНаФорме);
		Если ИспользуютсяМалоценныеТМЦ(СчетРаздела)
				И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяИсточника) Тогда
			СтруктураЗаполнения.Вставить("ДопПоле_ОтноситсяКМалоценнымТМЦ", Источник[ИмяИсточника]);
		КонецЕсли;
	КонецЦикла;

	СубконтоРаздела = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(НастройкаРаздела.Субконто);
	Для Каждого Субконто Из СубконтоРаздела Цикл
		ИмяРеквизитаНаФорме = ИмяРеквизитаНаФорме(НастройкиСчетовУчета, Раздел, Субконто, "Субконто");
		ИмяИсточника = ?(НастройкиСчетовУчета.РедактированиеВСписке, СтрЗаменить(ИмяРеквизитаНаФорме,
			НастройкиСчетовУчета.ПрефиксПутиКДанным, ""), ИмяРеквизитаНаФорме);
		СтруктураЗаполнения.Вставить("Субконто_" + Субконто, Источник[ИмяИсточника]);
	КонецЦикла;

	Для Каждого СчетРаздела Из НастройкаРаздела.ДолгосрочныеСчета Цикл
		ИмяРеквизитаНаФорме = ИмяРеквизитаНаФорме(НастройкиСчетовУчета, Раздел, СчетРаздела, "СчетУчетаДолгосрочный");
		ИмяИсточника = ?(НастройкиСчетовУчета.РедактированиеВСписке, СтрЗаменить(ИмяРеквизитаНаФорме,
			НастройкиСчетовУчета.ПрефиксПутиКДанным, ""), ИмяРеквизитаНаФорме);
		СтруктураЗаполнения.Вставить("СчетУчетаДолгосрочный_" + СчетРаздела, Источник[ИмяИсточника]);
	КонецЦикла;

КонецПроцедуры

Функция ИнициализироватьСтруктуруИзмеренийРегистра() Экспорт

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Организация", ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	СтруктураВозврата.Вставить("АналитикаУчета", Неопределено);
	СтруктураВозврата.Вставить("МестоУчета", Неопределено);
	Возврат СтруктураВозврата;

КонецФункции

Функция ПодразделыОбщегоРаздела(ИмяРаздела) Экспорт

	МассивВозврата = Новый Массив;

	Если ИмяРаздела = "РасчетыСПартнерами" Тогда
		МассивВозврата.Добавить("РасчетыСКлиентами");
		МассивВозврата.Добавить("РасчетыСПоставщиками");
		МассивВозврата.Добавить("РасчетыСКомиссионерами");
		МассивВозврата.Добавить("РасчетыСКомитентами");
		МассивВозврата.Добавить("РасчетыСКомитентамиПоЗакупке");
		МассивВозврата.Добавить("РасчетыСКредиторами");
		МассивВозврата.Добавить("РасчетыСДебиторами");
		МассивВозврата.Добавить("РасчетыСАрендодателями");
	КонецЕсли;

	Если ИмяРаздела = "Номенклатура" Тогда
		МассивВозврата.Добавить("НоменклатураСобственная");
		МассивВозврата.Добавить("НоменклатураПереданная");
		МассивВозврата.Добавить("НоменклатураПринятая");
	КонецЕсли;

	Если ИмяРаздела = "ДоходыРасходы" Тогда
		МассивВозврата.Добавить("Доходы");
		МассивВозврата.Добавить("Расходы");
	КонецЕсли;
	
	Если МассивВозврата.Количество() = 0 Тогда
		МассивВозврата.Добавить(ИмяРаздела);
	КонецЕсли;

	Возврат МассивВозврата;

КонецФункции

Функция ОбщийРазделУчетаПоИмениТекущегоРаздела(ИмяРаздела) Экспорт

	СоответствиеРазделовУчетаИменамТаблиц = Новый Соответствие;
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКлиентами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСПоставщиками", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКомиссионерами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКомитентами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКомитентамиПоЗакупке", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСКредиторами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСДебиторами", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("РасчетыСАрендодателями", "РасчетыСПартнерами");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("НоменклатураСобственная", "Номенклатура");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("НоменклатураПереданная", "Номенклатура");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("НоменклатураПринятая", "Номенклатура");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("Доходы", "ДоходыРасходы");
	СоответствиеРазделовУчетаИменамТаблиц.Вставить("Расходы", "ДоходыРасходы");

	СтрокаВозврата = СоответствиеРазделовУчетаИменамТаблиц.Получить(ИмяРаздела);
	Если СтрокаВозврата = Неопределено Тогда
		СтрокаВозврата = ИмяРаздела;
	КонецЕсли;

	Возврат СтрокаВозврата;

КонецФункции

Функция ЭтоПодраздел(ИмяРаздела) Экспорт

	Возврат ИмяРаздела <> ОбщийРазделУчетаПоИмениТекущегоРаздела(ИмяРаздела);

КонецФункции

Функция РазделУчетаПоНастройкам(Настройки) Экспорт

	ОтмеченныеРазделы = ОбщегоНазначенияКлиентСервер.ОтмеченныеЭлементы(Настройки.СписокРазделовУчета);
	Если ОтмеченныеРазделы.Количество() Тогда
		Возврат ОтмеченныеРазделы.Получить(0);
	Иначе
		Возврат "";
	КонецЕсли;

КонецФункции

Функция РазделУчетаПоАналитикеУчета(АналитикаУчета) Экспорт

	СоответствиеТиповАналитикУчетаРазделамУчета = Новый Соответствие;

	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов"), "ДоходыРасходы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"),
		"ДенежныеСредства");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.Кассы"), "ДенежныеСредства");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры"), "Номенклатура");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаРасчетов"), "РасчетыСПартнерами");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.Резервы"), "Резервы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.КатегорииЭксплуатации"), "ТМЦВЭксплуатации");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыФинансовогоУчетаВнеоборотныхАктивов"), "ВнеоборотныеАктивы");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ВидыПодарочныхСертификатов"), "ПодарочныеСертификаты");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ГруппыАналитическогоУчетаНоменклатуры"), "Производство");
	СоответствиеТиповАналитикУчетаРазделамУчета.Вставить(Тип("СправочникСсылка.ДоговорыЭквайринга"), "Эквайринг");
	
	РазделУчета = СоответствиеТиповАналитикУчетаРазделамУчета.Получить(ТипЗнч(АналитикаУчета));

	Возврат РазделУчета;

КонецФункции

Функция ЭтоНеРеквизитАналитики(ИмяРеквизита) Экспорт
	Возврат СтрНачинаетсяС(ИмяРеквизита, "СчетУчета_") Или СтрНачинаетсяС(ИмяРеквизита, "Субконто_") Или ИмяРеквизита
		= "Организация";
КонецФункции

//-- Локализация

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура УстановитьВидимостьЭлементовПоПараметрам(Форма, ПараметрыНастройки, ДанныеНастройкиСчетовУчета)

	КонтекстНастройки = ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);

	Для Каждого ИмяЭлемента Из ПараметрыНастройки.ЭлементыФормы Цикл

		ДоступностьПоТипуСтатьи = Истина;
		ДоступностьПоЗначениюСтатьи = Истина;
		
		ЭлементФормы = Форма.Элементы[ИмяЭлемента];
		ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(ЭлементФормы);
		
		Если ТаблицаФормы = Неопределено
			И ПараметрыНастройки.ДоступностьПоОперации
			И ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета Тогда
			СлужебныйКонтекст = Неопределено;
			
			Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
				Если КонтекстНастройки.Количество() > 0 Тогда
				// Редактируем таблицу в режиме "Без разбиения"
					КонтекстНастройки = КонтекстНастройки[0];
					СлужебныйКонтекст = КонтекстНастройки;
				Иначе
					КонтекстНастройки = Неопределено;
				КонецЕсли;
			ИначеЕсли ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыСтруктура")
				ИЛИ ТипЗнч(КонтекстНастройки) = Тип("ФормаКлиентскогоПриложения") Тогда
				СлужебныйКонтекст = Форма;
			КонецЕсли;
			
			Если СлужебныйКонтекст <> Неопределено
				И ЗначениеЗаполнено(ПараметрыНастройки.ТипСтатьи) Тогда
				ДоступностьПоТипуСтатьи = (СлужебныйКонтекст[ПараметрыНастройки.ТипСтатьи] = 3);
			КонецЕсли;
			
			Если КонтекстНастройки <> Неопределено
				И НЕ ДанныеНастройкиСчетовУчета.ЗначенияФункциональныхОпций.ИспользоватьРеглУчет
				И (НЕ ЗначениеЗаполнено(ПараметрыНастройки.СтатьяАктивовПассивов)
				ИЛИ ДанныеНастройкиСчетовУчета.СтатьиСНастройкамиПоОбъектам.Найти(КонтекстНастройки[ПараметрыНастройки.СтатьяАктивовПассивов]) <> Неопределено) Тогда
				ДоступностьПоЗначениюСтатьи = Ложь;
				//++ НЕ УТКА
				ДанныеНастройки = ДанныеНастройкиСчетовУчета.НастройкиСчетовУчета[КонтекстНастройки[ПараметрыНастройки.НастройкаСчетовУчета]];
				Если ДанныеНастройки <> Неопределено Тогда
					Для Каждого ДанныеМеждународнойНастройки Из ДанныеНастройки.НастройкиМеждународногоУчета Цикл
						Если ЗначениеЗаполнено(ДанныеМеждународнойНастройки.СчетУчета) Тогда
							ДоступностьПоЗначениюСтатьи = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				//-- НЕ УТКА
			КонецЕсли;
		КонецЕсли;

		ЭлементФормы.Видимость = ДанныеНастройкиСчетовУчета.ДоступнаНастройкаСчетовУчета
			И ПараметрыНастройки.ДоступностьПоОперации
			И ДоступностьПоЗначениюСтатьи
			И ДоступностьПоТипуСтатьи;

	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьСубконтоВПредставлениеНастройки(МассивПолей, ДанныеНастройки, ПараметрыНастройки)
	
	СвойстваСчета = НастройкаСчетовУчетаСлужебныйВызовСервера.ПолучитьСвойстваСчета(ДанныеНастройки.СчетУчета);
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		ЗначениеСубконто = ДанныеНастройки["Субконто" + НомерСубконто];

		Если ЗначениеЗаполнено(ЗначениеСубконто) Тогда
			МассивПолей.Добавить(Строка(ЗначениеСубконто));
		ИначеЕсли ПараметрыНастройки <> Неопределено Тогда
			ОписаниеТиповСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
			ПредставлениеЗаполнено = Ложь;
			Для Каждого Источник Из ПараметрыНастройки.ИсточникиПодбораСубконто Цикл
				Если ОписаниеТиповСубконто.СодержитТип(Источник.Значение) Тогда
					ПредставлениеЗаполнено = Истина;
					МассивПолей.Добавить(НСтр("ru = '<авто>';
												|en = '<auto>'"));
					Прервать;
				КонецЕсли;
			КонецЦикла;

			Если Не ПредставлениеЗаполнено Тогда
				МассивПолей.Добавить("<...>");
			КонецЕсли;
		Иначе
			МассивПолей.Добавить("<...>");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьНастройкиСчетовУчетаПоУмолчанию(Форма, ПараметрыНастройки, ИдентификаторыСтрок)

	Если НЕ ПараметрыНастройки.ДоступностьПоОперации Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНастройкиСчетовУчета = ОбщегоНазначенияУТКлиентСервер.ПолучитьДанныеМеханизмаИзКэшаФормы(Форма, "НастройкаСчетовУчета");
	
	КонтекстНастройки = ДанныеПоПути(Форма, ПараметрыНастройки.ПутьКДанным);
	Если ТипЗнч(КонтекстНастройки) = Тип("ДанныеФормыКоллекция") Тогда
		СписокСтатей = Новый Массив();
		Если ИдентификаторыСтрок <> Неопределено Тогда
			Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
				СтрокаТаблицы = КонтекстНастройки.НайтиПоИдентификатору(ИдентификаторСтроки);
				Если ТребуетсяЗаполнениеНастройкиСчетовУчетаПоУмолчанию(Форма, СтрокаТаблицы, ПараметрыНастройки) Тогда
					СписокСтатей.Добавить(СтрокаТаблицы[ПараметрыНастройки.СтатьяАктивовПассивов]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из КонтекстНастройки Цикл
				Если ТребуетсяЗаполнениеНастройкиСчетовУчетаПоУмолчанию(Форма, СтрокаТаблицы, ПараметрыНастройки) Тогда
					СписокСтатей.Добавить(СтрокаТаблицы[ПараметрыНастройки.СтатьяАктивовПассивов]);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		НастройкиПоУмолчанию = НастройкаСчетовУчетаСлужебныйВызовСервера.ДанныеНастроекСчетовУчетаПоУмолчанию(СписокСтатей);
		
		Если ИдентификаторыСтрок <> Неопределено Тогда
			Для Каждого ИдентификаторСтроки Из ИдентификаторыСтрок Цикл
				СтрокаТаблицы = КонтекстНастройки.НайтиПоИдентификатору(ИдентификаторСтроки);
				ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(СтрокаТаблицы, ПараметрыНастройки, НастройкиПоУмолчанию, ДанныеНастройкиСчетовУчета);
			КонецЦикла;
		Иначе
			Для Каждого СтрокаТаблицы Из КонтекстНастройки Цикл
				ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(СтрокаТаблицы, ПараметрыНастройки, НастройкиПоУмолчанию, ДанныеНастройкиСчетовУчета);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТребуетсяЗаполнениеНастройкиСчетовУчетаПоУмолчанию(Форма, КонтекстНастройки, ПараметрыНастройки) Тогда
		НастройкаПоУмолчанию = НастройкаСчетовУчетаСлужебныйВызовСервера.ДанныеНастроекСчетовУчетаПоУмолчанию(КонтекстНастройки[ПараметрыНастройки.СтатьяАктивовПассивов]);
		ЗаполнитьНастройкуСчетовУчетаПоУмолчанию(КонтекстНастройки, ПараметрыНастройки, НастройкаПоУмолчанию, ДанныеНастройкиСчетовУчета);
	КонецЕсли;

КонецПроцедуры

//++ Локализация

// Устанавливает свойство элемента измерения
// 
// Параметры:
// 	ЭлементНаФорме - ПолеФормы, ГруппаФормы, ТаблицаФормы, КомандаФормы -
// 	СвойстваИзмерения - Структура, Неопределено -
Процедура УстановитьСвойствоЭлементаИзмерения(ЭлементНаФорме, СвойстваИзмерения = Неопределено)

	Если СвойстваИзмерения = Неопределено Тогда
		ЭлементНаФорме.Видимость = Ложь;
		ЭлементНаФорме.АвтоОтметкаНезаполненного = Ложь;
		ЭлементНаФорме.Заголовок = "";
		ЭлементНаФорме.Подсказка = "";
		ЭлементНаФорме.ПодсказкаВвода = "";
		ЭлементНаФорме.ОграничениеТипа = Новый ОписаниеТипов;
	Иначе
		ЭлементНаФорме.Видимость = ЭлементНаФорме.Видимость Или СвойстваИзмерения.Используется;
		Если СвойстваИзмерения.Используется Тогда
			Если СвойстваИзмерения.Свойство("Заголовок") Тогда
				Если Не ЗначениеЗаполнено(ЭлементНаФорме.Заголовок) И Не ЗначениеЗаполнено(ЭлементНаФорме.Подсказка) Тогда
					ЭлементНаФорме.Заголовок = СвойстваИзмерения.Заголовок;
				ИначеЕсли ЗначениеЗаполнено(ЭлементНаФорме.Заголовок) И ЭлементНаФорме.Заголовок
					<> СвойстваИзмерения.Заголовок И Не ЗначениеЗаполнено(ЭлементНаФорме.Подсказка) Тогда
					ЭлементНаФорме.Подсказка = ЭлементНаФорме.Заголовок + " / " + СвойстваИзмерения.Заголовок;
					ЭлементНаФорме.Заголовок = "";
				ИначеЕсли Не ЗначениеЗаполнено(ЭлементНаФорме.Заголовок) И ЗначениеЗаполнено(ЭлементНаФорме.Подсказка)
					И СтрНайти(ЭлементНаФорме.Подсказка, СвойстваИзмерения.Заголовок) = 0 Тогда
					ЭлементНаФорме.Подсказка = ЭлементНаФорме.Подсказка + " / " + СвойстваИзмерения.Заголовок;
				КонецЕсли;
			КонецЕсли;
			Если СвойстваИзмерения.Свойство("ПредставлениеПустого") Тогда
				ИзмерениеОбязательно = Не ЗначениеЗаполнено(СвойстваИзмерения.ПредставлениеПустого);
				ЭлементНаФорме.АвтоОтметкаНезаполненного = ЭлементНаФорме.АвтоОтметкаНезаполненного
					Или ИзмерениеОбязательно;
				Если Не ИзмерениеОбязательно Тогда
					Если Не ЗначениеЗаполнено(ЭлементНаФорме.ПодсказкаВвода) Тогда
						ЭлементНаФорме.ПодсказкаВвода = СвойстваИзмерения.ПредставлениеПустого;
					ИначеЕсли ЗначениеЗаполнено(ЭлементНаФорме.ПодсказкаВвода) И ЭлементНаФорме.ПодсказкаВвода
						<> СвойстваИзмерения.ПредставлениеПустого Тогда
						Если СвойстваИзмерения.ПредставлениеПустого = НСтр("ru = 'не указан';
																			|en = 'not specified'") Тогда
							// Это аналитика, ничего не делаем
						Иначе
							ЭлементНаФорме.ПодсказкаВвода = НСтр("ru = 'Для всех мест учета';
																|en = 'For all accounting places'");
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если СвойстваИзмерения.Свойство("ТипЗначения") Тогда
				ЭлементНаФорме.ОграничениеТипа = Новый ОписаниеТипов(ЭлементНаФорме.ОграничениеТипа,
					СвойстваИзмерения.ТипЗначения.Типы());
			КонецЕсли;
			Если ЭлементНаФорме.ОграничениеТипа.Типы().Количество() > 1 Тогда
				ЭлементНаФорме.ПодсказкаВвода = "";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Устанавлевает отбор по валютным счетам
// 
// Параметры:
// 	МассивПараметровВыбора - Массив - 
// 	Реквизиты - Структура - 
// 	ОбщиеРеквизиты - Структура
Процедура УстановитьОтборВалютныхСчетов(МассивПараметровВыбора, Реквизиты, ОбщиеРеквизиты)
		
		Если Реквизиты = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Реквизиты.Свойство("РасчетыВВалюте")
			И ТипЗнч(Реквизиты.РасчетыВВалюте) = Тип("Булево") Тогда
			МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Валютный", Реквизиты.РасчетыВВалюте));
		ИначеЕсли Реквизиты.Свойство("ВалютаДенежныхСредств") 
			И ТипЗнч(Реквизиты.ВалютаДенежныхСредств) = Тип("СправочникСсылка.Валюты") 
			И ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств)Тогда
				МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("Отбор.Валютный",
					Реквизиты.ВалютаДенежныхСредств <> ОбщиеРеквизиты.ВалютаРеглУчета));
		КонецЕсли;
		
КонецПроцедуры

Функция РазделСДинамическимиПараметрамиВыбораСчета(РазделУчета)

	Если РазделУчета = "ВнеоборотныеАктивы" Или РазделУчета = "ДенежныеСредства" 
			Или РазделУчета = "Расходы" Или РазделУчета = "РасчетыСПоставщиками"
			Или РазделУчета = "РасчетыСКлиентами" Или РазделУчета = "РасчетыСКомиссионерами"
			Или РазделУчета = "РасчетыСКомитентами" Или РазделУчета = "РасчетыСКредиторами"
			Или РазделУчета = "РасчетыСДебиторами" Или РазделУчета = "РасчетыСАрендодателями"
			Или РазделУчета = "РасчетыСПартнерами" Тогда

		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СчетаБезОтбораПоВалюте()
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить("ТоварыКомитентовКОформлениюПоПродаже");
	МассивВозврата.Добавить("ТоварыКомитентовКОформлениюПоЗакупке");
	Возврат МассивВозврата;
	
КонецФункции

#Область НастройкаСчетовУчетаРасходов

Функция МассивДоступныхСчетовРасходов(ИмяСчета, Реквизиты, ДоступныеСчетаУчета)
	
	МассивВозврата = Новый Массив;
	
	Если ИмяСчета = "Расходы" Тогда
		СчетаРасходов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(ДоступныеСчетаУчета.СчетаРасходов, ДоступныеСчетаУчета.СчетаСписания);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, СчетаРасходов);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаПрочихРасходов);
	Иначе
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСписания);
	КонецЕсли;
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#Область НастройкаСчетовУчетаДенежныхСредств

Функция МассивДоступныхСчетовДенежныхСредств(Реквизиты, ДоступныеСчетаУчета)

	МассивВозврата = Новый Массив;

	Если Реквизиты = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНаличныхДенежныхСредств);
	ИначеЕсли ТипЗнч(Реквизиты.АналитикаДенежныхСредств) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций") Тогда
		Если Реквизиты.ТипБанковскогоСчета = ПредопределенноеЗначение("Перечисление.ТипыБанковскихСчетов.Депозитный") Тогда
			Если Не ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств) Тогда
				МассивВозврата.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал"));
				МассивВозврата.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДепозитныеСчета"));
			КонецЕсли;
		ИначеЕсли Реквизиты.ТипБанковскогоСчета = ПредопределенноеЗначение("Перечисление.ТипыБанковскихСчетов.Расчетный") Тогда
			Если Не ЗначениеЗаполнено(Реквизиты.ВалютаДенежныхСредств) Тогда
				МассивВозврата.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВалютныеСчета"));
				МассивВозврата.Добавить(ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетныеСчета"));
			КонецЕсли;
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаБезналичныхДенежныхСредств);
		КонецЕсли;
	ИначеЕсли ТипЗнч(Реквизиты.АналитикаДенежныхСредств) = Тип("СправочникСсылка.Кассы") Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНаличныхДенежныхСредств);
	КонецЕсли;

	Если МассивВозврата.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаБезналичныхДенежныхСредств);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаНаличныхДенежныхСредств);
	КонецЕсли;

	Возврат МассивВозврата;

КонецФункции

Процедура ЗаполнитьСчетаУчетаПоУмолчаниюДенежныеСредства(Форма)

	Настройки = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	Аналитика = Настройки.РеквизитыАналитики.АналитикаДенежныхСредств;
	ТипБанковскогоСчета = ?(ТипЗнч(Аналитика) = Тип("СправочникСсылка.БанковскиеСчетаОрганизаций"),
		Настройки.РеквизитыАналитики.ТипБанковскогоСчета, Неопределено); 

	ИмяРеквизита = ИмяРеквизитаНаФорме(Настройки, "ДенежныеСредства", "ДенежныеСредства");
	Если ТипБанковскогоСчета = ПредопределенноеЗначение("Перечисление.ТипыБанковскихСчетов.Депозитный") Тогда
		Если Настройки.РеквизитыАналитики.ВалютаДенежныхСредств <> Настройки.ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			Форма[ИмяРеквизита] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДепозитныеСчетаВал");
		КонецЕсли;
		Если Настройки.РеквизитыАналитики.ВалютаДенежныхСредств = Настройки.ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			Форма[ИмяРеквизита] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ДепозитныеСчета");
		КонецЕсли;
	ИначеЕсли ТипБанковскогоСчета = ПредопределенноеЗначение("Перечисление.ТипыБанковскихСчетов.Расчетный") Тогда
		Если Настройки.РеквизитыАналитики.ВалютаДенежныхСредств <> Настройки.ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			Форма[ИмяРеквизита] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ВалютныеСчета");
		КонецЕсли;
		Если Настройки.РеквизитыАналитики.ВалютаДенежныхСредств = Настройки.ОбщиеРеквизиты.ВалютаРеглУчета Тогда
			Форма[ИмяРеквизита] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.РасчетныеСчета");
		КонецЕсли;
	Иначе
		Форма[ИмяРеквизита] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПустаяСсылка");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область НастройкаСчетовУчетаЭквайринга

Процедура ЗаполнитьСчетаУчетаПоУмолчаниюЭквайринг(Форма)
	
	Настройки = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	ИмяРеквизита = ИмяРеквизитаНаФорме(Настройки, "Эквайринг", "ПродажиПоЭквайрингу");
	Форма[ИмяРеквизита] = ПредопределенноеЗначение("ПланСчетов.Хозрасчетный.ПродажиПоПлатежнымКартам");
	
КонецПроцедуры

#КонецОбласти

#Область НастройкаСчетовУчетаВнеоборотныхАктивов

Функция МассивДоступныхСчетовВнеоборотныхАктивов(ИмяСчета, Реквизиты, ДоступныеСчетаУчета)

	МассивВозврата = Новый Массив;

	ВидАктиваНМА = 
		Реквизиты = Неопределено 
		Или Реквизиты.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА") 
		Или Реквизиты.ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НИОКР");
		
	ВидАктиваОС = 
		Реквизиты = Неопределено 
		Или Реквизиты.ВидАктива <> ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА") 
			И Реквизиты.ВидАктива <> ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НИОКР");

	Если ИмяСчета = "СтоимостьВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_НМА);
	КонецЕсли;
	Если ИмяСчета = "СтоимостьВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_ОС);
	КонецЕсли;

	Если ИмяСчета = "СтоимостьВНА_ЦФ" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_НМА_ЦФ);
	КонецЕсли;
	Если ИмяСчета = "СтоимостьВНА_ЦФ" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаСтоимость_ОС_ЦФ);
	КонецЕсли;

	Если ИмяСчета = "АмортизацияВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_НМА);
	КонецЕсли;
	Если ИмяСчета = "АмортизацияВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_ОС);
	КонецЕсли;

	Если ИмяСчета = "АмортизацияВНА_ЦФ" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_НМА_ЦФ);
	КонецЕсли;
	Если ИмяСчета = "АмортизацияВНА_ЦФ" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаАмортизация_ОС_ЦФ);
	КонецЕсли;

	Если ИмяСчета = "ВыбытиеВНА" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаВыбытие_ОС);
	КонецЕсли;

	Если ИмяСчета = "РезервДооценкиВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаРезервДооценки_НМА);
	КонецЕсли;
	Если ИмяСчета = "РезервДооценкиВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаРезервДооценки_ОС);
	КонецЕсли;

	Если ИмяСчета = "ЗабалансовыйУчетВНА" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаЗабалансовогоУчета_ОС);
	КонецЕсли;

	Если ИмяСчета = "ОбесценениеВНА" И ВидАктиваНМА Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаОбесценения_НМА);
	КонецЕсли;
	Если ИмяСчета = "ОбесценениеВНА" И ВидАктиваОС Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВозврата, ДоступныеСчетаУчета.СчетаОбесценения_ОС);
	КонецЕсли;

	Возврат МассивВозврата;

КонецФункции

Процедура ЗаполнитьСчетаУчетаПоУмолчаниюВнеоборотныеАктивы(Форма)

	Настройки = Форма.КэшДанныхМеханизмов.НастройкаСчетовУчета;
	
	Для каждого ЭлементСоответствия Из ИменаСчетовРеглУчетаВНАПоВидуАктива(Настройки.РеквизитыАналитики.ВидАктива) Цикл
		
		ИмяРеквизита = ИмяРеквизитаНаФорме(Настройки, "ВнеоборотныеАктивы", ЭлементСоответствия.Ключ);
		ПутьКСчетуУчета = СтрШаблон("ПланСчетов.Хозрасчетный.%1", ЭлементСоответствия.Значение);
		Форма[ИмяРеквизита] = ПредопределенноеЗначение(ПутьКСчетуУчета);
		
	КонецЦикла;

КонецПроцедуры

Функция ИменаСчетовРеглУчетаВНАПоВидуАктива(ВидАктива)
	
	СоответствиеВидовСчетовИменамСчетовРеглУчета = Новый Соответствие;
	
	Если ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство")
		Или ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.ИнвестиционноеИмущество") Тогда
		
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("СтоимостьВНА", "ОСвОрганизации");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("СтоимостьВНА_ЦФ", "ОСвОрганизации_ЦФ");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("АмортизацияВНА", "АмортизацияОС_01");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("АмортизацияВНА_ЦФ", "АмортизацияОС_01_ЦФ");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("ВыбытиеВНА", "ВыбытиеОС");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("РезервДооценкиВНА", "ПриростСтоимостиИмуществаПоПереоценке");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("ЗабалансовыйУчетВНА", "АрендованныеОсновныеСредства");
		
	ИначеЕсли ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НМА") Тогда
		
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("СтоимостьВНА", "НематериальныеАктивыОрганизации");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("СтоимостьВНА_ЦФ", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("АмортизацияВНА", "АмортизацияНематериальныхАктивов");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("АмортизацияВНА_ЦФ", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("ВыбытиеВНА", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("РезервДооценкиВНА", "ПриростСтоимостиНМАПоПереоценке");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("ЗабалансовыйУчетВНА", "ПустаяСсылка");
		
	ИначеЕсли ВидАктива = ПредопределенноеЗначение("Перечисление.ВидыВнеоборотныхАктивов.НИОКР") Тогда
		
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("СтоимостьВНА", "РасходыНаНИОКР");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("СтоимостьВНА_ЦФ", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("АмортизацияВНА", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("АмортизацияВНА_ЦФ", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("ВыбытиеВНА", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("РезервДооценкиВНА", "ПустаяСсылка");
		СоответствиеВидовСчетовИменамСчетовРеглУчета.Вставить("ЗабалансовыйУчетВНА", "ПустаяСсылка");
		
	КонецЕсли;
	
	Возврат СоответствиеВидовСчетовИменамСчетовРеглУчета;
	
КонецФункции

#КонецОбласти

//-- Локализация

#КонецОбласти
