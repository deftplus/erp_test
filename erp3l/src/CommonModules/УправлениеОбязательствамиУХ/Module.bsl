////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции по управлению обязательствами
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

//Возвращает структуру, содержащую рекомендуемое условие оплаты, класс платежной дисциплины, значимость и 
//допустимый уровень задолженности по контрагенту КонтрагентВход
Функция ПолучитьРекомендованноеУсловиеОплатыКонрагента(КонтрагентВход, РольКонтрагента) Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СтепеньРиска",		 Справочники.СтепениРиска.ПустаяСсылка());
	РезультатФункции.Вставить("СтепеньДоходности",						 Справочники.СтепениДоходности.ПустаяСсылка());
	РезультатФункции.Вставить("ПроцентАванса",					 0);
	РезультатФункции.Вставить("СрокОтсрочки",					 0);
	РезультатФункции.Вставить("ДопустимыйУровеньЗадолженности",	 0);
	РезультатФункции.Вставить("Регистратор",	 Неопределено);
	РезультатФункции.Вставить("УсловиеОплатыТекст", "");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1 РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОценкиКонтрагентовСрезПоследних.Контрагент КАК Контрагент,
		|	ОценкиКонтрагентовСрезПоследних.СтепеньРиска КАК СтепеньРиска,
		|	ОценкиКонтрагентовСрезПоследних.СтепеньДоходности КАК СтепеньДоходности,
		|	ОценкиКонтрагентовСрезПоследних.Задолженность КАК ДопустимыйУровеньЗадолженности,
		|	ОценкиКонтрагентовСрезПоследних.ПроцентАванса КАК ПроцентАванса,
		|	ОценкиКонтрагентовСрезПоследних.СрокОтсрочки КАК СрокОтсрочки,
		|	ОценкиКонтрагентовСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.КлассыКонтрагентов.СрезПоследних(
		|			,
		|			Контрагент = &КонтрагентВход
		|				И РольКонтрагента = &РольКонтрагента) КАК ОценкиКонтрагентовСрезПоследних";
	Запрос.УстановитьПараметр("КонтрагентВход", КонтрагентВход);
	Запрос.УстановитьПараметр("РольКонтрагента", РольКонтрагента);
	РезультатЗапроса = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(РезультатФункции, ВыборкаДетальныеЗаписи);
		ТекстОтсрочки = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня'"),
			РезультатФункции.СрокОтсрочки);
		РезультатФункции.УсловиеОплатыТекст = СтрШаблон(НСтр("ru = 'Аванс не менее %1 %%; Отсрочка не более %2'"),
														РезультатФункции.ПроцентАванса,
														ТекстОтсрочки);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

//Возвращает суммарный процент аванса по условию оплаты УсловиеОплатыВход
Функция ПолучитьСуммарныйАвансУсловияОплаты(УсловиеОплатыВход) Экспорт
	РезультатФункции = 0;
	Если ТипЗнч(УсловиеОплатыВход) = Тип("СправочникСсылка.УсловияОплаты") Тогда
		ВариантАванс = Перечисления.ВариантыОплаты.Аванс;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВариантОплаты", ВариантАванс);
		НайденныеСтроки = УсловиеОплатыВход.ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			РезультатФункции = РезультатФункции + ТекНайденныеСтроки.ПроцентОплаты;
		КонецЦикла;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный тип условия оплаты: (%УсловиеОплаты%)'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УсловиеОплаты%", Строка(УсловиеОплатыВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = 0;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

//Выполняет преобразование срока с длиной ДлинаСрокаВход и с типом
//ТипСрокаВход к рабочим дням
Функция ПривестиСрокКРабочимДням(ТипСрокаВход, ДлинаСрокаВход)
	РезультатФункции = ДлинаСрокаВход;
	ТипСрокаКалендарные	 = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням;
	ТипСрокаРабочие		 = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоРабочимДням;
	Если ТипСрокаВход = ТипСрокаКалендарные Тогда
		РезультатФункции = ДлинаСрокаВход * 5 / 7;			//"Приводим" к рабочим дням
	ИначеЕсли ТипСрокаВход = ТипСрокаРабочие Тогда
		РезультатФункции = ДлинаСрокаВход * 1;				//Уже рабочие дни. Оставляем их
	ИначеЕсли Не ЗначениеЗаполнено(ТипСрокаВход) Тогда
		РезультатФункции = ДлинаСрокаВход;					//Пустой вариант. Не изменяем значение
	Иначе 	
		РезультатФункции = ДлинаСрокаВход;					//Неизвестный вариант. Не изменяем значение
	КонецЕсли;	
	Возврат РезультатФункции;	
КонецФункции

//Возвращает суммарный срок отсрочки по условию оплаты УсловиеОплатыВход
Функция ПолучитьСуммарныйСрокОтсрочкиУсловияОплаты(УсловиеОплатыВход) Экспорт
	РезультатФункции = 0;
	Если ТипЗнч(УсловиеОплатыВход) = Тип("СправочникСсылка.УсловияОплаты") Тогда
		ВариантПостоплата = Перечисления.ВариантыОплаты.Постоплата;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВариантОплаты", ВариантПостоплата);
		НайденныеСтроки = УсловиеОплатыВход.ЭтапыОплаты.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ТекСрок = ТекНайденныеСтроки.Срок;
			НовыйСрок = ПривестиСрокКРабочимДням(ТекНайденныеСтроки.ТипСрока, ТекСрок);
			РезультатФункции = РезультатФункции + НовыйСрок;
		КонецЦикла;	
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный тип условия оплаты: (%УсловиеОплаты%)'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%УсловиеОплаты%", Строка(УсловиеОплатыВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = 0;
	КонецЕсли;	
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.Округлить(РезультатФункции, 1 , Истина); 		//Округлим строго в большую сторону. Считаем, что день, использованный хотя бы частично - использован полностью
	Возврат РезультатФункции;
КонецФункции

//Функция сравнивает условия оплаты НовоеУсловиеОплатыВход с рекомендуемым РекомендуемоеУсловиеОплатыВход и возвращает
//текстовую строку результата сравнения
Функция СравнитьУсловияОплаты(НовоеУсловиеОплатыВход, РеквизитыРекомендуемогоУсловияОплаты, РольКонтрагента) Экспорт
	ПротоколСравнения = Новый Массив;
	
	ПроцентАванса = РасчетГрафиковОперацийЕХ.ПолучитьПроцентАвансаПоСоглашению(НовоеУсловиеОплатыВход);
	СрокОтсрочки = РасчетГрафиковОперацийЕХ.ПолучитьМаксимальныйСрокОплатыПоСоглашению(НовоеУсловиеОплатыВход);
	
	
	Если РольКонтрагента = Перечисления.РолиКонтрагентов.Поставщики Тогда
		// Процент аванса не должен превышать рекомендуемый. Срок аванса не должен превышать рекомендуемого.
		Если ПроцентАванса > РеквизитыРекомендуемогоУсловияОплаты.ПроцентАванса Тогда
			ПротоколСравнения.Добавить(НСтр("ru = 'Процент аванса превышает рекомендуемый.'"));
		КонецЕсли;
		
	ИначеЕсли РольКонтрагента = Перечисления.РолиКонтрагентов.Покупатели Тогда
		
		// Процент аванса не должен быть ниже рекомендуемого. Срок отсрочки платежа не должен превышать рекомендуемого.
		Если ПроцентАванса < РеквизитыРекомендуемогоУсловияОплаты.ПроцентАванса Тогда
			ПротоколСравнения.Добавить(НСтр("ru = 'Процент аванса ниже рекомендуемого.'"));
		КонецЕсли;
		
		Если СрокОтсрочки > РеквизитыРекомендуемогоУсловияОплаты.СрокОтсрочки Тогда
			ПротоколСравнения.Добавить(НСтр("ru = 'Срок отсрочки платежа превышает рекомендуемый.'"));
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат СтрСоединить(ПротоколСравнения, " ");
	
КонецФункции

//Возвращает структуру, содержащую Класс платежной дисциплины и Значимость контрагента КонтрагентВход
Функция ПолучитьСтруктуруКлассаКонтрагента(КонтрагентВход) Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СтепеньРиска", Справочники.СтепениРиска.ПустаяСсылка());
	РезультатФункции.Вставить("СтепеньДоходности", Справочники.СтепениДоходности.ПустаяСсылка());
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КлассыКонтрагентовСрезПоследних.СтепеньРиска,
		|	КлассыКонтрагентовСрезПоследних.СтепеньДоходности,
		|	КлассыКонтрагентовСрезПоследних.Контрагент
		|ИЗ
		|	РегистрСведений.КлассыКонтрагентов.СрезПоследних КАК КлассыКонтрагентовСрезПоследних
		|ГДЕ
		|	КлассыКонтрагентовСрезПоследних.Контрагент = &Контрагент";
	Запрос.УстановитьПараметр("Контрагент", КонтрагентВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Вставить("СтепеньРиска", ВыборкаДетальныеЗаписи.СтепеньРиска);
		РезультатФункции.Вставить("СтепеньДоходности", ВыборкаДетальныеЗаписи.СтепеньДоходности);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает по справочнику сохраненных запросов СохраненныйЗапросВход и параметрам
//ДатаНачалаВход, ДатаОкончанияВход таблицу, содержащую контрагентов и классы (согласно
//алгоритму, описанному в СохраненныйЗапросВход)
Функция ПолучитьТаблицуКонтрагентовПоСохраненномуЗапросу(СохраненныйЗапросВход, ДатаНачалаВход, ДатаОкончанияВход) Экспорт
	
	ТекстВСохраненномЗапросе = СохраненныйЗапросВход.ТекстЗапроса;
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстВСохраненномЗапросе;
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаВход);
	Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончанияВход);
	Попытка
		Возврат Запрос.Выполнить().Выгрузить();
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время исполнения запроса для получения контрагентов возникли ошибки:'") + " ";
		ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	Возврат Новый ТаблицаЗначений;
	КонецПопытки;
	
КонецФункции

// Возвращает соответствие контрагентов из массива МассивКонтрагентовВход классам значимости и платежной 
//дисциплины на дату ДатаАктуальности. Когда ДатаАктуальности не задана - возвращает на текущую дату
Функция ПолучитьСоответствиеКлассовКонтрагентам(МассивКонтрагентовВход, ДатаАктуальности = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Новый Соответствие;
	Если ДатаАктуальности = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	Иначе
		Период = ДатаАктуальности;
	КонецЕсли;
	// Получение данных и возврат результата.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КлассыКонтрагентовСрезПоследних.Контрагент,
		|	КлассыКонтрагентовСрезПоследних.СтепеньРиска КАК СтепеньРиска,
		|	КлассыКонтрагентовСрезПоследних.СтепеньДоходности КАК СтепеньДоходности,
		|	КлассыКонтрагентовСрезПоследних.Комментарий
		|ИЗ
		|	РегистрСведений.КлассыКонтрагентов.СрезПоследних(&Период, ) КАК КлассыКонтрагентовСрезПоследних
		|ГДЕ
		|	КлассыКонтрагентовСрезПоследних.Контрагент В(&КонтрагентВход)
		|	И КлассыКонтрагентовСрезПоследних.Контрагент.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("КонтрагентВход", МассивКонтрагентовВход);
	Запрос.УстановитьПараметр("Период", Период);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураРезультата = Новый Структура;
		СтруктураРезультата.Вставить("СтепеньРиска",	 ВыборкаДетальныеЗаписи.СтепеньРиска);
		СтруктураРезультата.Вставить("СтепеньДоходности",				 ВыборкаДетальныеЗаписи.СтепеньДоходности);
		СтруктураРезультата.Вставить("Комментарий",					 ВыборкаДетальныеЗаписи.Комментарий);
		РезультатФункции.Вставить(ВыборкаДетальныеЗаписи.Контрагент, СтруктураРезультата);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Функция возвращает рекомендуемые условия (сумма задолженности и условие оплаты) 
// для заданных степеней риска и доходности
//
// Параметры:
//  РольКонтрагента 	 - 	ПеречислениеСсылка.РолиКонтрагентов - роль контрагента.
//  СтепеньРиска		 - 	СправочникСсылка.СтепениРиска - Степень риска.
//  СтепеньДоходности	 - 	СправочникСсылка.СтепениДоходности - Степень доходности.
// 
// Возвращаемое значение:
//  Структура - Структура со следующими полями:
//	УсловиеОплаты - СправочникСсылка.УсловияОплаты - рекомендуемое условие оплаты.
//	ДопустимыйУровеньЗадолженности - Число - допустимый уровень задолженности.
//
Функция ПолучитьРекомендуемыеУсловия(СтепеньРиска, СтепеньДоходности, РольКонтрагента) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ДопустимыйУровеньЗадолженности", 0);
	Результат.Вставить("ПроцентАванса", 0);
	Результат.Вставить("СрокОтсрочки", 0);
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МатрицаРекомендуемыхУсловий.ПроцентАванса,
	|	МатрицаРекомендуемыхУсловий.СрокОтсрочки,
	|	МатрицаРекомендуемыхУсловий.ДопустимыйУровеньЗадолженности
	|ИЗ
	|	РегистрСведений.МатрицаРекомендуемыхУсловий КАК МатрицаРекомендуемыхУсловий
	|ГДЕ
	|	МатрицаРекомендуемыхУсловий.РольКонтрагента = &РольКонтрагента
	|	И МатрицаРекомендуемыхУсловий.СтепеньРиска = &СтепеньРиска
	|	И МатрицаРекомендуемыхУсловий.СтепеньДоходности = &СтепеньДоходности";

	Запрос.УстановитьПараметр("РольКонтрагента", РольКонтрагента);
	Запрос.УстановитьПараметр("СтепеньРиска", СтепеньРиска);
	Запрос.УстановитьПараметр("СтепеньДоходности", СтепеньДоходности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВидыФИ() Экспорт
	
	ВидыФИ = Новый СписокЗначений;
	
	ВидыФИ.Добавить(Перечисления.ВидыФинансовыхИнструментов.РасчетыСКонтрагентами, НСтр("ru = 'Денежные средства на расчетных счетах'"));
	ВидыФИ.Добавить(Перечисления.ВидыФинансовыхИнструментов.Депозит, НСтр("ru = 'Депозиты'"));
	Если Константы.УчитыватьАккредитивыИГарантииВЛимитахРазмещенияСредств.Получить() Тогда
		ВидыФИ.Добавить(Перечисления.ВидыФинансовыхИнструментов.ГарантияПолученная, НСтр("ru = 'Банковские гарантии'"));
		ВидыФИ.Добавить(Перечисления.ВидыФинансовыхИнструментов.АккредитивПолученный, НСтр("ru = 'Аккредитивы'"));
	КонецЕсли;
	
	Возврат ВидыФИ;

КонецФункции

Функция ПолучитьРольКонтрагентаПоВидуДоговора(ВидДоговора) Экспорт
	
	Если УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПоставщиком(ВидДоговора) Тогда
		Возврат Перечисления.РолиКонтрагентов.Поставщики;
	ИначеЕсли УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПокупателем(ВидДоговора) Тогда
		Возврат Перечисления.РолиКонтрагентов.Покупатели;
	Иначе
		Возврат Перечисления.РолиКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти


