// Возвращает наименование объекта по его коду.
// Пример: "ОсновныеСредства" => "Основные средства".
//
Функция НаименованиеПоКоду(Знач Код) Экспорт
	
	ЗАГЛАВНЫЕБУКВЫ = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	Код = СокрЛП(Код);
	Наименование = "";
	Для Инд = 1 По СтрДлина(Код) Цикл
		ТекСимв = Сред(Код, Инд, 1);
		Если СтрНайти(ЗаглавныеБуквы, ТекСимв) <> 0 Тогда // текущий сивмол - заглавный
			Если Инд <> 1 Тогда // текущий символ - не первый
				ПредыдущийСимвол = Сред(Код, Инд - 1, 1);
				Если СтрНайти(ЗаглавныеБуквы, ПредыдущийСимвол) = 0 И ПредыдущийСимвол <> " " И ПредыдущийСимвол <> "_" Тогда // предыдущий символ - не заглавный, не пробел и не подчеркивание
					Если Инд <> СтрДлина(Код) Тогда // текущий символ - не последний
						СледСимв = Сред(Код, Инд + 1, 1);
						Если СтрНайти(ЗаглавныеБуквы, СледСимв) <> 0 Тогда // следующий символ - заглавный
							Наименование = Наименование + ТекСимв;
						Иначе // следующий символ - прописной
							Наименование = Наименование + " " + НРег(ТекСимв);
						КонецЕсли;
					Иначе // текущий символ - последний
						Наименование = Наименование + " " + ТекСимв;
					КонецЕсли;
				Иначе // предыдущий символ - не заглавная буква, не пробел и не подчеркивание
					Наименование = Наименование + " " + НРег(ТекСимв);
				КонецЕсли;
			Иначе // текущий символ - первый
				Наименование = Наименование + ТекСимв;
			КонецЕсли;
		Иначе // текущий символ - прописной
			Наименование = Наименование + ?(ТекСимв = "_", " ", ТекСимв);
		КонецЕсли;
	КонецЦикла;
	Возврат Наименование;
	
КонецФункции

// Возвращает признак того, что переданная в качестве параметра строка
// может быть использована в качестве кода объекта.
//
Функция СтрокаМожетИспользоватьсяВКачествеКода(Знач Стр) Экспорт
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Стр = ВРЕГ(СокрЛП(Стр));
	
	РусАнглАлфавит = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	РусАнглАлфавитИВспомогательныеСимволы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789";
	
	Если СтрНайти(РусАнглАлфавит, Сред(Стр, 1, 1)) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд = 2 По СтрДлина(Стр) Цикл
		Если СтрНайти(РусАнглАлфавитИВспомогательныеСимволы, Сред(Стр, Инд, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьДанныеСвязанныхТаблиц(ТекстСвязи) Экспорт
	
	ДанныеСвязи=Новый Соответствие;
		
	РабочийТекстСвязи=ТекстСвязи;
	
	////////////////////////////////////////////////////////////////
	// Связанная таблица описывается следующей цепочкой символов:
	// "({[ИмяСвязаннойТаблицы]}{УсловиеСвязи1}... {УсловиеСвязиХ})"
	// 
		
	Пока СтрДлина(РабочийТекстСвязи)>0 Цикл
		
		// Определим цепочку символов, описывающих связанную таблицу и условия связи
		
		НачалоОписанияСвязи = СтрНайти(РабочийТекстСвязи,"({[");
		КонецОписанияСвязи = СтрНайти(РабочийТекстСвязи,"]})");
		
		Если НачалоОписанияСвязи=0 ИЛИ КонецОписанияСвязи=0 Тогда 
			Прервать;
		КонецЕсли;
		
		// Получим имя связанной таблицы
		
		ОписаниеСвязаннойТаблицы=Сред(РабочийТекстСвязи,НачалоОписанияСвязи+1,КонецОписанияСвязи+2);
		
		НачалоОписанияТаблицы = СтрНайти(ОписаниеСвязаннойТаблицы,"{[");
		КонецОписанияТаблицы = СтрНайти(ОписаниеСвязаннойТаблицы,"]}");
		
		ИмяСвязаннойТаблицы=Сред(ОписаниеСвязаннойТаблицы,НачалоОписанияТаблицы+1,(КонецОписанияТаблицы-НачалоОписанияТаблицы));
		
		// Получим набор условий связи
		
		ТекстУсловияСвязи=Сред(ОписаниеСвязаннойТаблицы,КонецОписанияТаблицы+2);
		МассивУсловий=Новый Массив;
		
		Пока СтрДлина(ТекстУсловияСвязи)>0 Цикл
			
			НачалоУсловия = СтрНайти(ТекстУсловияСвязи,"{[");
			КонецУсловия = СтрНайти(ТекстУсловияСвязи,"]}");
			
			ТекстУсловия=Сред(ТекстУсловияСвязи,НачалоУсловия+1,(КонецУсловия-НачалоУсловия));
			
			Если Не ПустаяСтрока(ТекстУсловия) Тогда
				МассивУсловий.Добавить(ТекстУсловия);
			КонецЕсли;
			
			ТекстУсловияСвязи=Сред(ТекстУсловияСвязи,КонецУсловия+3);
			
		КонецЦикла;
				
		РабочийТекстСвязи=Сред(РабочийТекстСвязи,КонецОписанияСвязи+3);
		
		ДанныеСвязи.Вставить(ИмяСвязаннойТаблицы,МассивУсловий);
			
	КонецЦикла;
	
	Возврат ДанныеСвязи;
		
КонецФункции // ПолучитьДанныеСвязанныхТаблиц()

Функция ПолучитьИмяСвязаннойТаблицы(ТекстСвязи="",ДанныеСвязи=Неопределено) Экспорт
	
	Если ДанныеСвязи=Неопределено Тогда
		ДанныеСвязи=ПолучитьДанныеСвязанныхТаблиц(ТекстСвязи);
	КонецЕсли;
	
	ИмяТаблицы="";
	
	Для Каждого КлючИЗначение ИЗ ДанныеСвязи Цикл
		ИмяТаблицы=КлючИЗначение.Ключ;
	КонецЦикла;
	
	Возврат Сред(ИмяТаблицы,2,СтрДлина(ИмяТаблицы)-2);
		
КонецФункции // ПолучитьИмяСвязаннойТаблицы() 

// Создает новый бланк для сводной таблицы вида отчета ВидОтчетаВход,
// после чего открывает форму с ним. Возвращает ссылку на созданный бланк.
Функция СоздатьБланкСводнойТаблицыИОткрытьФорму(ВидОтчетаВход, ВладелецФормы) Экспорт
	РезультатФункции = ПредопределенноеЗначение("Справочник.БланкиОтчетов.ПустаяСсылка");
	СтруктураПараметров = Новый Структура;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", ВидОтчетаВход);
	ПараметрыЗаполнения.Вставить("РежимБланка",1);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	НаименованиеБланка = УправлениеОтчетамиУХ.СгенерироватьНаименованиеНовогоБланкаДляВидаОтчета(ВидОтчетаВход);
	ПериодичностьБюджетирования = ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("ПериодичностьБюджетирования");
	Если ЗначениеЗаполнено(НаименованиеБланка) И ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ФормаМакетаСводнойТаблицы = "Справочник.БланкиОтчетов.Форма.ФормаМакетаСводнаяТаблица";
		ФормаСводнойТаблицы = ПолучитьФорму(ФормаМакетаСводнойТаблицы, СтруктураПараметров, ВладелецФормы);
		ФормаСводнойТаблицы.Объект.Наименование = НаименованиеБланка;
		ФормаСводнойТаблицы.Объект.Периодичность = ПериодичностьБюджетирования;
		ФормаСводнойТаблицы.Объект.ЕдиницаИзмеренияПоУмолчанию = ПредопределенноеЗначение("Перечисление.ПорядкиОкругленияОтчетности.Окр1");
		ФормаСводнойТаблицы.Объект.ИерархияГруппировокСтрок = Истина;
		ФормаСводнойТаблицы.Объект.ИерархияГруппировокКолонок = Ложь;
		ФормаСводнойТаблицы.ПрочитатьСтруктуруТаблицы(Истина);
		ФормаСводнойТаблицы.Записать();
		СозданныйБланк = ФормаСводнойТаблицы.Объект.Ссылка;
		УправлениеОтчетамиУХ.СоздатьНастройкиНовогоБланка(СозданныйБланк);
		ФормаСводнойТаблицы.ПрочитатьСтруктуруТаблицы();
		РезультатФункции = СозданныйБланк;
		ФормаСводнойТаблицы.Открыть();   
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось сформироать наименование для нового бланка'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = ПредопределенноеЗначение("Справочник.БланкиОтчетов.ПустаяСсылка");
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

// Возвращает текстовую константу для указания способа заполнения
// экземпляра отчета как импорт из файла.
Функция СпособИмпортаОтчетаИзФайла() Экспорт
	Возврат "ИзФайла";
КонецФункции

// Возвращает текстовую константу для указания способа заполнения
// экземпляра отчета как импорт из справочника.
Функция СпособИмпортаОтчетаИзСправочника() Экспорт
	Возврат "ИзСправочника";
КонецФункции

// Возвращает пустую структуру для передачи в функцию ВернутьГруппуАналитикПоВидамАналитик.
// Параметры ВидАналитики1Вход-ВидАналитики5Вход определяют начальные значения видов аналитик.
// Когда параметр не задан - в поле будет записано значение Неопределено.
Функция СформироватьСтруктуруВидовАналитик(ВидАналитики1Вход = Неопределено, ВидАналитики2Вход = Неопределено, ВидАналитики3Вход = Неопределено, ВидАналитики4Вход = Неопределено, ВидАналитики5Вход = Неопределено, ВидАналитики6Вход = Неопределено) Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ВидАналитики1", ВидАналитики1Вход);
	РезультатФункции.Вставить("ВидАналитики2", ВидАналитики2Вход);
	РезультатФункции.Вставить("ВидАналитики3", ВидАналитики3Вход);
	РезультатФункции.Вставить("ВидАналитики4", ВидАналитики4Вход);
	РезультатФункции.Вставить("ВидАналитики5", ВидАналитики5Вход);
	РезультатФункции.Вставить("ВидАналитики6", ВидАналитики6Вход);
	Возврат РезультатФункции;
КонецФункции		// СформироватьСтруктуруВидовАналитик()
