//////////////////////////////////////////////////////////////////////////////////////////////
// Проверка документов: методы, работающие на  стороне сервера.
//  
//////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытияФорм
// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры;
//  Отказ					- Булево - признак отказа от создания формы;
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события;
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ПриСозданииФормыНаСервере(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры = Неопределено) Экспорт
	
	//++ Локализация
	Если НаФормуДокументаДобавляетсяКомандаПроверки(Форма) Тогда
		
		ДобавитьРеквизитыПроверкиНаФорму(Форма);
		
		ДобавитьКомандуПроверкиНаФорму(Форма);
		
		ОбновитьДанныеПроверкиДокументаНаФорме(Форма);
		
	КонецЕсли;
	
	Если ИзменятьКартинкуПроверкиНаФормеСписка(Форма, ДополнительныеПараметры) Тогда
		// По умолчанию на форме списка отображается замок, в случае проверки документа, но если список смотрит с правами
		// изменения статуса проверки, то для него целесообразнее установить зеленую галочку (как сделано в форме документа).
		
		УстановитьСвойстваКартинкиПроверкиНаФормеСписка(Форма, ДополнительныеПараметры);
		
	КонецЕсли;
	//-- Локализация
	
КонецПроцедуры

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//	Форма					- ФормаКлиентскогоПриложения - форма, из обработчика события которой происходит вызов процедуры;
//	ТекущийОбъект			- ДокументОбъект - обрабатываемый объект, который будет прочитан.
//
Процедура ПриЧтенииФормыНаСервере(Форма, ТекущийОбъект) Экспорт
	//++ Локализация
	Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "ПроверкаДокументов_ДокументПроверен") Тогда
		// Форма является проверяемой, значит на ней присутствуют все необходимые реквизиты и команды.
		
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(ТекущийОбъект.Ссылка);
		ОбновитьДанныеПроверкиДокументаНаФорме(Форма, ДанныеПроверки);
		
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// В случае использования проверки документов по регл. учету, добавляет в запрос динамического списка журнала документов,
//	условное соединение с регистром сведений "СтатусыПроверкиДокументов" и параметры-шаблоны заменяет на выражения.
//
//	Параметры:
//		ТекстЗапроса - Строка - обрабатываемый текст запроса динамического списка;
//		ИмяОсновнойТаблицы - Строка - служит для определения подстановки условного соединения и для определения условия соединения.
//
Процедура ДоработатьЗапросДинамическогоСпискаЖурналаДокументов(ТекстЗапроса, ИмяОсновнойТаблицы) Экспорт
	//++ Локализация
	Если ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		
		ТекстПодстановкиСвязи = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПроверкиДокументов КАК СтатусыПроверки" + Символы.ПС + Символы.Таб + "ПО ";
		ТекстУсловийСвязи = Новый Массив;
		ТекстУсловийСвязи.Добавить(ИмяОсновнойТаблицы + ".Организация = СтатусыПроверки.Организация");
		ТекстУсловийСвязи.Добавить(ИмяОсновнойТаблицы + ".Ссылка = СтатусыПроверки.Документ");
		Для каждого ИсключаемыйТип Из ИсключаемыеТипыДляПроверки() Цикл
			ТекстУсловийСвязи.Добавить("ТИПЗНАЧЕНИЯ(СтатусыПроверки.Документ) <> ТИП(Документ." + Метаданные.НайтиПоТипу(ИсключаемыйТип).Имя + ")");
		КонецЦикла;
		ТекстПодстановкиСвязи = ТекстПодстановкиСвязи + СтрСоединить(ТекстУсловийСвязи, Символы.ПС + Символы.Таб + Символы.Таб + "И ");
			
		Если СтрНайти(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ") = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК " + ИмяОсновнойТаблицы,
				"КАК " + ИмяОсновнойТаблицы + Символы.ПС + Символы.Таб + "{" + ТекстПодстановкиСвязи + "}" + Символы.ПС);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "{ЛЕВОЕ СОЕДИНЕНИЕ", "{" + ТекстПодстановкиСвязи + Символы.ПС + Символы.Таб + "ЛЕВОЕ СОЕДИНЕНИЕ");
		КонецЕсли;			
		
		ТекстОпределенияСтатусаПроверки = "ЕСТЬNULL(СтатусыПроверки.СтатусПроверки, ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.ПустаяСсылка))";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусПроверки", ТекстОпределенияСтатусаПроверки);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИндикаторПроверки",
			ТекстОпределенияСтатусаПроверки + " = ЗНАЧЕНИЕ(Перечисление.ЭтапыПроверкиДокументаВРеглУчете.Проверен)");
		
	КонецЕсли; 
	//-- Локализация
КонецПроцедуры

#КонецОбласти

//++ Локализация

#Область ОбработчикиПодписокНаСобытия

// Процедура, вызываемая при срабатывании подписки на событие "ПередЗаписью" (см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента").
// Проверяет, можно ли записывать документ (отказывает в записи, в случае если документ был проверен и стоит жесткая
// блокировка объекта при проверке).
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовПередЗаписьюДокумента";
//		Отказ - Булево - параметр, определяющий будет ли записываться объект;
//		РежимЗаписи - Булево - режим записи документа;
//		РежимПроведения - Булево - режим проведения документа.
//
Процедура ПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередИзменениемДокумента(Источник, Отказ);
	
КонецПроцедуры

// Определяет необходимость в отказе изменения объекта (отказ будет срабатывать если документ был проверен и стоит
// запрет на редактирование проверенных).
//	
//	Параметры:
//		Источник - ДокументОбъект - документ, который изменяется;
//		Отказ - Булево - параметр, определяющий будет ли записываться объект;
//		Удаление - Булево - признак того, что документ удаляется.
//
Процедура ПередИзменениемДокумента(Источник, Отказ, Удаление = Ложь) Экспорт
	
	Если Отказ ИЛИ Источник.ОбменДанными.Загрузка
		ИЛИ (Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") И Не Удаление)
		ИЛИ Не ЭтотТипДокументаДолженПроверяться(ТипЗнч(Источник.Ссылка))
		ИЛИ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	НеПроверятьДокумент = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_Отключить", НеПроверятьДокумент);
	Если НеПроверятьДокумент = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Источник.Ссылка);
	ИзменениеПроверенных = ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету");
	
	Источник.ДополнительныеСвойства.Вставить("ПроверкаДокументов_ДанныеПроверки", ДанныеПроверки);
	
	Если ДанныеПроверки.Проверен И Не ИзменениеПроверенных Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Документ %Документ% проверен. Нельзя изменять проверенные документы.';
								|en = 'Document %Документ% is checked. Cannot change checked documents.'");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", Источник.Ссылка);
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена.';
										|en = 'Operation failed.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, СообщениеОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Источник.Ссылка);
	ИначеЕсли ДанныеПроверки.Проверен И Источник.ПометкаУдаления Тогда
		Отказ = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Документ %Документ% проверен. Перед пометкой на удаление, необходимо отменить проверку документа.';
								|en = 'Document %Документ% is checked. Cancel the document check before marking it for deletion.  '");
		СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "%Документ%", Источник.Ссылка);
		ЗаписьЖурналаРегистрации(НСТр("ru = 'Операция не выполнена.';
										|en = 'Operation failed.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, Источник.Метаданные(), Источник.Ссылка, СообщениеОбОшибке);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке, Источник.Ссылка);
	ИначеЕсли Удаление И Не ДанныеПроверки.СтатусПроверки.Пустая() Тогда
		// Очищаем ссылки для непроведенных документов, помечаемых на удаление:
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(Источник.Ссылка, Новый Массив, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

// Процедура, вызываемая при срабатывании подписки на событие "ОбработкаПроведения" (см. подписку на событие "ПроверкаДокументовОбработкаПроведенияДокумента").
// Устанавливает статус проверки документа на "НеПроверен".
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовОбработкаПроведенияДокумента";
//		Отказ - Булево - параметр, определяющий будет ли проводиться объект;
//		РежимПроведения - Булево - режим проведения документа.
//
Процедура ПриПроведенииДокумента(Источник, Отказ, РежимПроведения) Экспорт
	
	ПриИзмененииДокумента(Источник, Отказ);
	
КонецПроцедуры

// Процедура, вызываемая при срабатывании подписки на событие "ОбработкаУдаленияПроведения" (см. подписку на событие "ПроверкаДокументовОбработкаУдаленияПроведенияДокумента").
// Устанавливает статус проверки документа на "НеПроверен".
//	
//	Параметры:
//		Источник - ДокументОбъект - см. подписку на событие "ПроверкаДокументовОбработкаУдаленияПроведенияДокумента";
//		Отказ - Булево - параметр, определяющий будет ли распроводиться объект;
//
Процедура ПриОтменеПроведенияДокумента(Источник, Отказ) Экспорт
	
	ПриИзмененииДокумента(Источник, Отказ);
	
КонецПроцедуры

// Изменяет статус проверки документа на "НеПроверен", при условии что данный тип документа проверяется и ФО проверки
// документов включена.
//	
//	Параметры:
//		Источник - ДокументОбъект - документ, который изменяется;
//		Отказ - Булево - параметр, определяющий будет ли проводиться (распроводиться) объект.
//
Процедура ПриИзмененииДокумента(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка ИЛИ Отказ
		ИЛИ Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету")
		ИЛИ Не ЭтотТипДокументаДолженПроверяться(ТипЗнч(Источник.Ссылка))
		ИЛИ ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
		Возврат;
	КонецЕсли;
	
	НеПроверятьДокумент = Неопределено;
	Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_Отключить", НеПроверятьДокумент);
	Если НеПроверятьДокумент = Истина Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);

	Если ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПрочееОприходованиеТоваров") Тогда
		ДополнительныеПараметрыПроверки = Новый Структура;
		ДополнительныеПараметрыПроверки.Вставить("ХозяйственнаяОперация", Источник.ХозяйственнаяОперация);
	Иначе
		ДополнительныеПараметрыПроверки = Неопределено;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПроверкаДокументов_ДанныеПроверки") Тогда
		ДанныеПроверки = Источник.ДополнительныеСвойства.ПроверкаДокументов_ДанныеПроверки;
	Иначе
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Источник.Ссылка);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету") И ДанныеПроверки.Проверен ИЛИ Не ДанныеПроверки.Проверен Тогда
		
		МассивОрганизаций = МассивОрганизацийДокумента(Источник);
		РегистрыСведений.СтатусыПроверкиДокументов.УстановитьСтатусПроверкиДокументаПриЗаписи(
			Источник.Ссылка, МассивОрганизаций, ДанныеПроверки, ДополнительныеПараметрыПроверки);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Другое

//	Обновляет форму в зависимости от данных проверки документа.
//
//	Параметры:
//		Форма - ФормаКлиентскогоПриложения - форма, которая должна обновляться;
//		ДанныеПроверки - Структура - структура с данными по проверке документа (см. РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента).
//
Процедура ОбновитьДанныеПроверкиДокументаНаФорме(Форма, ДанныеПроверки = Неопределено) Экспорт
	
	Если ДанныеПроверки = Неопределено Тогда
		ДанныеПроверки = РегистрыСведений.СтатусыПроверкиДокументов.ПолучитьДанныеПроверкиДокумента(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Форма.ПроверкаДокументов_ДокументПроверен = ДанныеПроверки.Проверен;

	ОпределитьСвойстваКнопкиПроверкиПоДанным(Форма, ДанныеПроверки);
	
	Если ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету") Тогда
		Форма.ПроверкаДокументов_ПодтверждениеЗаписи = Истина;
	Иначе
		БлокировкаФормы(Форма, ДанныеПроверки.Проверен);
	КонецЕсли;
	
КонецПроцедуры

//	Определяет, проверяется ли документ данного типа,
//	определяется на основании наличия данного документа в измерении регистра "СтатусыПроверкиДокументов").
//
//	Параметры:
//		ТипДокумента - Тип - проверяемый тип.
//
//	ВозвращаемоеЗначение:
//		Булево - Истина, если документ должен проверяться.
//
Функция ЭтотТипДокументаДолженПроверяться(ТипДокумента) Экспорт
	
	Возврат ПроверяемыеТипыДокументов().Найти(ТипДокумента) <> Неопределено;
	
КонецФункции

// Возвращает массив типов документов, которые участвуют в проверке.
//
//	ВозвращаемоеЗначение:
//		Массив - Массив типов значений - типы значения, которые должны проверяться.
//
Функция ПроверяемыеТипыДокументов() Экспорт
	
	СписокПроверяемыхТипов = Метаданные.РегистрыСведений["СтатусыПроверкиДокументов"].Измерения.Документ.Тип.Типы();
	СписокПроверяемыхТипов = ОбщегоНазначенияКлиентСервер.РазностьМассивов(СписокПроверяемыхТипов, ИсключаемыеТипыДляПроверки());
	Возврат СписокПроверяемыхТипов;
	
КонецФункции

// Получает документы, которые не должны учитываться как проверяемые. По ним данные могут храниться в инф. базе, но
// более они не учитываются.
//
// ВозвращаемоеЗначение:
//		Массив - Массив типов значений - типы значения, которые не должны проверяться.
//
Функция ИсключаемыеТипыДляПроверки() Экспорт
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить(Тип("ДокументСсылка.АмортизацияНМА"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.АмортизацияНМА2_4"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.АмортизацияОС"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.АмортизацияОС2_4"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатков"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковДенежныхСредств"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковНДСПредъявленного"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковПоФинансовымИнструментам"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковПрочиеРасходы"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковПрочихАктивовПассивов"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковРасходовПриУСН"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковРасчетовПоЭквайрингу"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковСПодотчетниками"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковТМЦВЭксплуатации"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ВводОстатковТоваров"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РаспределениеНДС"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РаспределениеПрочихЗатрат"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РаспределениеДоходовПоНаправлениямДеятельности"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ПеремаркировкаТоваровГИСМ"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.МаркировкаТоваровГИСМ"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.КорректировкаНалогообложенияНДСПартийТоваров"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ПогашениеСтоимостиТМЦВЭксплуатации"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РегламентнаяОперация"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РасчетКурсовыхРазниц"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РасчетПроцентныхРасходовДисконтирования"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РегистраторРасчетов"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РасчетСебестоимостиТоваров"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.РасчетРезервовПодОбесценениеЗапасов"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.ИсправлениеРазвернутогоСальдоТоваровОрганизаций"));
	МассивВозврата.Добавить(Тип("ДокументСсылка.НачислениеСписаниеРезервовПоСомнительнымДолгам"));
	
	Возврат МассивВозврата;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРеквизитыПроверкиНаФорму(Форма)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_ДокументПроверен", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_БлокировкаФормы", Новый ОписаниеТипов("Булево")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ПроверкаДокументов_ПодтверждениеЗаписи", Новый ОписаниеТипов("Булево")));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Функция НаФормуДокументаДобавляетсяКомандаПроверки(Форма)
	
	// Управляем проверкой только тогда, когда включена соответствующая функциональная опция.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	// Управляем проверкой только тогда, когда есть реквизит "Объект".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда форма является формой документа и для этого документа возможно установить
	// статусы проверки.
	Если Не ФормаЯвляетсяФормойДокументаКоторыйПроверяется(Форма.ИмяФормы) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ФормаЯвляетсяФормойДокументаКоторыйПроверяется(Знач ИмяФормы)
	
	РезультатПроверки = Ложь;
	
	МассивИмениФормы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".");
	
	Если МассивИмениФормы.Получить(0) = "Документ" Тогда
		ТипДокументаФормы = Тип("ДокументСсылка."+МассивИмениФормы.Получить(1));
		
		ФормаЯвляетсяОсновнойФормойДокумента = Ложь;
		ИмяФормы = МассивИмениФормы.Получить(3);
		Если ИмяФормы = "ФормаДокумента" Тогда
			// Попытаемся сравнить по стандартному имени:
			ФормаЯвляетсяОсновнойФормойДокумента = Истина;
		Иначе
			// Получаем метаданные и сравниваем с именем основной формы метаданных:)
			ИмяОсновнойФормы = Метаданные.НайтиПоТипу(ТипДокументаФормы).ОсновнаяФормаОбъекта.Имя;
			ФормаЯвляетсяОсновнойФормойДокумента = (ИмяФормы = ИмяОсновнойФормы);
		КонецЕсли;
		
		Если ЭтотТипДокументаДолженПроверяться(ТипДокументаФормы) И ФормаЯвляетсяОсновнойФормойДокумента Тогда
			РезультатПроверки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат РезультатПроверки;	
	
КонецФункции

Процедура ДобавитьКомандуПроверкиНаФорму(Форма)
	
	РазмещениеКоманды = ОпределитьРазмещениеКомандыПроверки(Форма);
	
	Если РазмещениеКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКоманды = "ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента";
	
	КомандаФормы = Форма.Команды.Добавить(ИмяКоманды);
	КомандаФормы.Действие = "Подключаемый_ВыполнитьПереопределяемуюКоманду"; // универсальный обработчик
	КомандаФормы.Заголовок = НСтр("ru = 'Проверено';
									|en = 'Checked'");
	КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
	
	ЭлементКомандыФормы = Форма.Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), РазмещениеКоманды);
	ЭлементКомандыФормы.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	ЭлементКомандыФормы.ИмяКоманды = ИмяКоманды;
	
КонецПроцедуры

Функция ОпределитьРазмещениеКомандыПроверки(Форма)
	
	РазмещениеКомандыПроверки = Неопределено;
	
	Для каждого ЭлементФормы Из Форма.Элементы Цикл
		
		Если ЭлементФормы.Имя = "ФормаОбработкаОтражениеДокументовВРеглУчетеПроводкиРеглУчета" Тогда
			РазмещениеКомандыПроверки = ЭлементФормы.Родитель;
			Прервать;
		Иначе
			Если ТипЗнч(ЭлементФормы) = Тип("КнопкаФормы")
				И СтрНайти(НРег(ЭлементФормы.Имя), "справка") <> 0
				И ЭлементФормы.Родитель <> Неопределено Тогда
					РазмещениеКомандыПроверки = ЭлементФормы.Родитель;
			КонецЕсли
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазмещениеКомандыПроверки;
	
КонецФункции

Процедура ОпределитьСвойстваКнопкиПроверкиПоДанным(Форма, ДанныеОПроверке)
	
	КомандаПроверки = Форма.Команды.Найти("ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента");
	КартинкаКнопки = БиблиотекаКартинок.ОтгрузкаРазрешена;
	
	ЕстьПравоИзмененияСтатусаПроверки = ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов);
	
	Если ДанныеОПроверке.СтатусПроверки.Пустая() И Форма.Объект.Ссылка.Пустая() Тогда
		ПодсказкаКнопки = НСтр("ru = 'Проверка документа возможна только после записи документа';
								|en = 'Document check is available only after document writing'");
	Иначе
		Если ЕстьПравоИзмененияСтатусаПроверки Тогда
			ПодсказкаКнопки = НСтр("ru = 'Изменение статуса проверки документа.';
									|en = 'Change document check status.'");
		Иначе
			Если ДанныеОПроверке.Проверен Тогда
				Если ПолучитьФункциональнуюОпцию("РазрешатьИзменятьПроверенныеДокументыПоРеглУчету") Тогда
					Комментарий = НСтр("ru = 'изменения не рекомендуются.';
										|en = 'changes are not recommended.'");
				Иначе
					Комментарий = НСтр("ru = 'изменение невозможно.';
										|en = 'cannot change.'");
				КонецЕсли;
				ПодсказкаКнопки = НСтр("ru = 'Документ проверен';
										|en = 'Document checked'") + ", " + Комментарий;
				КартинкаКнопки = БиблиотекаКартинок.ИсключитьИзНастройкиФормированияПроводок;
			Иначе
				ПодсказкаКнопки = НСтр("ru = 'Документ не проверен.';
										|en = 'The document is not checked.'");
				КартинкаКнопки = БиблиотекаКартинок.ВключитьВНастройкуФормированияПроводок;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	Если ДанныеОПроверке.Проверен Тогда
		ПояснениеПроверки = Символы.ПС + НСтр("ru = 'Проверил: %Проверил%, Дата: %ДатаПроверки%';
												|en = 'Checked by: %Проверил%, Date: %ДатаПроверки%'");
		ПояснениеПроверки = СтрЗаменить(ПояснениеПроверки, "%Проверил%", ДанныеОПроверке.Проверил);
		ПояснениеПроверки = СтрЗаменить(ПояснениеПроверки, "%ДатаПроверки%", ДанныеОПроверке.ДатаПроверки);
		ПодсказкаКнопки = ПодсказкаКнопки + ПояснениеПроверки;
	КонецЕсли;
	
	КомандаПроверки.Подсказка = ПодсказкаКнопки;
	КомандаПроверки.Картинка = КартинкаКнопки;
	
	ЭлементКомандыФормы = Форма.Элементы.Найти("ПроверкаДокументов_КомандаИзмененияСтатусаПроверкиДокумента");
	Если Не ЭлементКомандыФормы = Неопределено Тогда
		ЭлементКомандыФормы.Пометка = Форма.ПроверкаДокументов_ДокументПроверен;
	КонецЕсли;
	
КонецПроцедуры

Процедура БлокировкаФормы(Форма, ДокументПроверен)
	
	Если ДокументПроверен Тогда
		// Форма должна быть заблокирована, так как документ проверен и запрещено изменение проверенных документов.
		
		Если Форма.ТолькоПросмотр Тогда
			// Форма уже заблокирована, но не в результате проверки документа, сделаем соответствующую пометку.
			Форма.ПроверкаДокументов_БлокировкаФормы = Ложь;
		Иначе
			// Форма не заблокирована, заблокируем ее и сделаем соответствующую пометку.
			Форма.ТолькоПросмотр = Истина;
			Форма.ПроверкаДокументов_БлокировкаФормы = Истина;
		КонецЕсли;
		
	Иначе
		// Форма не нуждается в блокировке, так как документ не проверен или разрешено изменение проверенных документов.
		
		Если Форма.ПроверкаДокументов_БлокировкаФормы Тогда
			// Форма ранее была заблокирована в результате предыдущей проверке документов - разблокируем форму и снимем пометку о блокировке.
			Форма.ТолькоПросмотр = Ложь;
			Форма.ПроверкаДокументов_БлокировкаФормы = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИзменятьКартинкуПроверкиНаФормеСписка(Форма, ДополнительныеПараметры)
	
	// Управляем проверкой только тогда, когда включена соответствующая функциональная опция.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроверкуДокументовПоРегламентированномуУчету") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыПроверкиДокументов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Управляем проверкой только тогда, когда в дополнительных параметрах установлено свойство "МестоРазмещенияДанныхПроверкиРегл":
	//	это означает, что в соответствующий список уже были добавлены необходимые поля, а на форму добавлен элемент "ИндикаторПроверки".
	Если ДополнительныеПараметры = Неопределено Или Не ДополнительныеПараметры.Свойство("МестоРазмещенияДанныхПроверкиРегл") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура УстановитьСвойстваКартинкиПроверкиНаФормеСписка(Форма, ДополнительныеПараметры)
	
	ЭлементГруппаПроверки = ДополнительныеПараметры.МестоРазмещенияДанныхПроверкиРегл;
	Для каждого ЭлементПроверки Из ЭлементГруппаПроверки.ПодчиненныеЭлементы Цикл
		Если Не СтрНайти(ЭлементПроверки.Имя, "ИндикаторПроверки", НаправлениеПоиска.СКонца) = 0 Тогда
			ЭлементПроверки.КартинкаЗначений = БиблиотекаКартинок.ОтгрузкаРазрешена;
		КонецЕсли
	КонецЦикла;
	
КонецПроцедуры

// Получает из переданного объекта (ссылки) массив реквизитов с типом "Организация".
//
//	Параметры:
//		ДокументИсточник - ДокументСсылка, ДокументОбъект - объект, реквизиты которого надо проанализировать на соответствие типу "Организация".
// 															Если передан объект - значение реквизиты считывается непосредственно из него, если передана ссылка -
//															- происходит обращение к данным базы запросом (см. ОбщегоНазначения.ЗначенияРеквизитовОбъекта)
//		УчитыватьУправленческуюОрганизацию - Булево - признак, определяющий, должна ли среди возвращаемого массива быть управленческая организация.
// 														Значение по умолчанию - истина;
//
//	ВозвращаемоеЗначение:
//		Массив - массив найденных Организаций в документе. Если в документе не найдено ни одного реквизита с типом значения "Организация" - будет возвращен массив с ссылкой на пустую организацию.
//
Функция МассивОрганизацийДокумента(ДокументИсточник, УчитыватьУправленческуюОрганизацию = Ложь) Экспорт
	
	МассивОрганизаций = Новый Массив;
	ЭтоОбъект = НЕ ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ДокументИсточник));
	
	Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
	
		РеквизитыОрганизации = ОбщегоНазначения.ИменаРеквизитовПоТипу(ДокументИсточник.Ссылка, Тип("СправочникСсылка.Организации"));
		
		Если ЭтоОбъект Тогда
			
			МассивРеквизитовОрганизации = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РеквизитыОрганизации, ",", Истина, Истина);
			
			Если МассивРеквизитовОрганизации.Количество() Тогда
				Для каждого РеквизитОрганизации Из МассивРеквизитовОрганизации Цикл
					ТекущаяОрганизация = ДокументИсточник[РеквизитОрганизации];
					Если ЗначениеЗаполнено(ТекущаяОрганизация) И ТипЗнч(ТекущаяОрганизация) = Тип("СправочникСсылка.Организации")
						И МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
						
						Если РеквизитОрганизации = "Организация" Тогда
							МассивОрганизаций.Вставить(0, ТекущаяОрганизация);
						Иначе
							МассивОрганизаций.Добавить(ТекущаяОрганизация);
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
			
		Иначе
			
			СтруктураРеквизитовОрганизаций = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументИсточник, РеквизитыОрганизации);
			Для каждого РеквизитОрганизации Из СтруктураРеквизитовОрганизаций Цикл
				ТекущаяОрганизация = СтруктураРеквизитовОрганизаций[РеквизитОрганизации.Ключ];
				Если ЗначениеЗаполнено(ТекущаяОрганизация) И МассивОрганизаций.Найти(ТекущаяОрганизация) = Неопределено Тогда
					Если РеквизитОрганизации.Ключ = "Организация" Тогда
						МассивОрганизаций.Вставить(0, ТекущаяОрганизация);
					Иначе
						МассивОрганизаций.Добавить(ТекущаяОрганизация);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
				
		Если (ТипЗнч(ДокументИсточник) = Тип("ДокументОбъект.СчетФактураВыданный")
				ИЛИ ТипЗнч(ДокументИсточник) = Тип("ДокументСсылка.СчетФактураВыданный"))
			И ЗначениеЗаполнено(ДокументИсточник.ДокументОснование) Тогда
			
			Для каждого Организация Из МассивОрганизацийДокумента(ДокументИсточник.ДокументОснование) Цикл
				Если МассивОрганизаций.Найти(Организация) = Неопределено Тогда
					МассивОрганизаций.Добавить(Организация);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		Если ЭтоОбъект Тогда
			Если ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(ДокументИсточник, "Организация") Тогда
				МассивОрганизаций.Добавить(ДокументИсточник["Организация"]);
			Иначе
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
		Иначе
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", ДокументИсточник.Метаданные()) Тогда
				МассивОрганизаций.Добавить(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "Организация"));
			Иначе
				МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не УчитыватьУправленческуюОрганизацию Тогда
		ИндексУправленческойОрганизацииВМассиве = МассивОрганизаций.Найти(Справочники.Организации.УправленческаяОрганизация);
		Если НЕ ИндексУправленческойОрганизацииВМассиве = Неопределено Тогда
			МассивОрганизаций.Удалить(ИндексУправленческойОрганизацииВМассиве);
		КонецЕсли;
	КонецЕсли;
	
	Возврат МассивОрганизаций;
	
КонецФункции

//-- Локализация
#КонецОбласти