////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК ФОРМЫ.
//

Процедура ВставитьЗначениеЭлементаФормы(ЭлементыФормы, Структура, Имя)
	
	Ключ = СтрЗаменить(Имя, "АналитическиеОтборы", "");
	Ключ = СтрЗаменить(Ключ, "НастройкиПрогноза", "");
	Попытка
		Структура.Вставить(Ключ, ЭлементыФормы[Имя]);
	Исключение
		Структура.Вставить(Ключ, Неопределено);
	КонецПопытки;
	
КонецПроцедуры

Процедура ВставитьЗначениеВЭлементФормы(Форма, Структура)
	
	Перем АналитическиеОтборы;
	Перем НастройкиМонитораЭффективности;
	
	Если Структура.Свойство("АналитическиеОтборы", АналитическиеОтборы) Тогда
		АналитическиеОтборы.Свойство("КоличествоТоп"                , Форма.АналитическиеОтборыКоличествоТоп);
		АналитическиеОтборы.Свойство("ПроцентТоп"                   , Форма.АналитическиеОтборыПроцентТоп);
		АналитическиеОтборы.Свойство("ПолеТоп"                      , Форма.АналитическиеОтборыПолеТоп);
		АналитическиеОтборы.Свойство("ПроцентПорог"                 , Форма.АналитическиеОтборыПроцентПорог);
		АналитическиеОтборы.Свойство("РесурсПорог"                  , Форма.АналитическиеОтборыРесурсПорог);
		АналитическиеОтборы.Свойство("ПолеПорог"                    , Форма.АналитическиеОтборыПолеПорог);
		АналитическиеОтборы.Свойство("ПолеОтборABCКлассификация"    , Форма.АналитическиеОтборыПолеОтборABCКлассификация);
		АналитическиеОтборы.Свойство("ЗначениеОтборABCКлассификация", Форма.АналитическиеОтборыЗначениеОтборABCКлассификация);
		АналитическиеОтборы.Свойство("СкрытьНулевые"                , Форма.АналитическиеОтборыСкрытьНулевые);
	КонецЕсли;
	
	Если Структура.Свойство("НастройкиМонитораЭффективности", НастройкиМонитораЭффективности) Тогда
		
		НастройкиМонитораЭффективности.Свойство("СценарийПлан"              , Форма.СценарийПлан);
		НастройкиМонитораЭффективности.Свойство("СценарийФакт"              , Форма.СценарийФакт);
		НастройкиМонитораЭффективности.Свойство("СмещениеПредыдущегоПериода", Форма.СмещениеПредыдущегоПериода);
		НастройкиМонитораЭффективности.Свойство("ОтборОрганизация"          , Форма.ОтборОрганизация);
		НастройкиМонитораЭффективности.Свойство("ОтборВалюта"               , Форма.ОтборВалюта);
		
		НастройкиМонитораЭффективности.Свойство("ОтборСостояниеТревожное"         , Форма.ОтборСостояниеТревожное);
		НастройкиМонитораЭффективности.Свойство("ОтборСостояниеУдовлетворительное", Форма.ОтборСостояниеУдовлетворительное);
		НастройкиМонитораЭффективности.Свойство("ОтборСостояниеХорошее"           , Форма.ОтборСостояниеХорошее);
		
		НастройкиМонитораЭффективности.Свойство("ОтборТрендНулевой"      , Форма.ОтборТрендНулевой);
		НастройкиМонитораЭффективности.Свойство("ОтборТрендОтрицательный", Форма.ОтборТрендОтрицательный);
		НастройкиМонитораЭффективности.Свойство("ОтборТрендПоложительный", Форма.ОтборТрендПоложительный);
		
	КонецЕсли;
	
	Если Структура.Свойство("НастройкаПериода") Тогда
		
		Структура.НастройкаПериода.Свойство("ПериодОтчета"       , Форма.ПериодОтчета);
		Структура.НастройкаПериода.Свойство("ПериодОтносительный", Форма.ПериодОтносительный);
		Структура.НастройкаПериода.Свойство("ПроизвольныйПериод" , Форма.ПроизвольныйПериод);
		
	КонецЕсли;
	
КонецПроцедуры

// Функция возвращает настройки панели отчета по умолчанию. Используется при сохранении настроек для нового отчета,
// когда форма отчета еще не открывалась.
&НаСервере
Функция ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(НастройкиКомпоновщика) Экспорт
	
	ЗначенияНастроек = Новый Структура;
	
	//АналитическиеОтборы
	ЗначенияАналитическихОтборов = Новый Структура;
	ЗначенияАналитическихОтборов.Вставить("КоличествоТоп", 0);
	ЗначенияАналитическихОтборов.Вставить("ПроцентТоп", Ложь);
	ЗначенияАналитическихОтборов.Вставить("ПолеТоп", "");
	ЗначенияАналитическихОтборов.Вставить("ПроцентПорог", 0);
	ЗначенияАналитическихОтборов.Вставить("РесурсПорог", Неопределено);
	ЗначенияАналитическихОтборов.Вставить("ПолеПорог", "");
	ЗначенияАналитическихОтборов.Вставить("ПолеОтборABCКлассификация", "");
	ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборABCКлассификация", "");
	ЗначенияАналитическихОтборов.Вставить("СкрытьНулевые", 0);

	ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
		
	//НастройкиПрогноза
	ЗначенияНастроек.Вставить("НастройкиПрогноза", Новый Структура("Прогноз", Ложь));
	
	НП = Новый Структура;
	НП.Вставить("ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	НП.Вставить("ПериодОтносительный", Неопределено);
	НП.Вставить("ПроизвольныйПериод" , Ложь);
	НП.Вставить("ТекущаяДата", ТекущаяДата());
	ЗначенияНастроек.Вставить("НастройкаПериода", НП);
	
	// Настройки для монитора эффективности
	МЭ = Новый Структура;
	МЭ.Вставить("СценарийПлан"              , Справочники.Сценарии.ПустаяСсылка());
	МЭ.Вставить("СценарийФакт"              , Справочники.Сценарии.ПустаяСсылка());
	МЭ.Вставить("СмещениеПредыдущегоПериода", 0);
	МЭ.Вставить("ОтборОрганизация"          , Справочники.Организации.ПустаяСсылка());
	МЭ.Вставить("ОтборВалюта"               , Справочники.Валюты.ПустаяСсылка());
	
	МЭ.Вставить("ОтборСостояниеТревожное"         , Ложь);
	МЭ.Вставить("ОтборСостояниеУдовлетворительное", Ложь);
	МЭ.Вставить("ОтборСостояниеХорошее"           , Ложь);
	
	МЭ.Вставить("ОтборТрендНулевой"      , Ложь);
	МЭ.Вставить("ОтборТрендОтрицательный", Ложь);
	МЭ.Вставить("ОтборТрендПоложительный", Ложь);
	
	ЗначенияНастроек.Вставить("НастройкиМонитораЭффективности", МЭ);
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", Новый Соответствие);
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);
	
	Возврат ЗначенияНастроек;

	
КонецФункции

&НаСервере
Функция ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ЭлементыФормы = ФормаОтчета.Элементы;
	ЗначенияНастроек = Новый Структура;
	
	//АналитическиеОтборы
	ЗначенияАналитическихОтборов = Новый Структура;
	
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыКоличествоТоп");
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентТоп");
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеТоп");
	
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыПроцентПорог");
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыРесурсПорог");
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеПорог");

	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыПолеОтборABCКлассификация");
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыЗначениеОтборABCКлассификация");
	ВставитьЗначениеЭлементаФормы(ФормаОтчета, ЗначенияАналитическихОтборов, "АналитическиеОтборыСкрытьНулевые");
	ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
		
	//НастройкиПрогноза
	ЗначенияНастроек.Вставить("НастройкиПрогноза", Новый Структура("Прогноз", Ложь));
	
	НП = Новый Структура;
	НП.Вставить("ПериодОтчета", ФормаОтчета.ПериодОтчета);
	НП.Вставить("ПериодОтносительный", ФормаОтчета.ПериодОтносительный);
	НП.Вставить("ПроизвольныйПериод" , ФормаОтчета.ПроизвольныйПериод);
	НП.Вставить("ТекущаяДата", ТекущаяДата());
	ЗначенияНастроек.Вставить("НастройкаПериода", НП);
	
	// Настройки для монитора эффективности
	МЭ = Новый Структура;
	МЭ.Вставить("СценарийПлан"              , ФормаОтчета.СценарийПлан);
	МЭ.Вставить("СценарийФакт"              , ФормаОтчета.СценарийФакт);
	МЭ.Вставить("СмещениеПредыдущегоПериода", ФормаОтчета.СмещениеПредыдущегоПериода);
	МЭ.Вставить("ОтборОрганизация"          , ФормаОтчета.ОтборОрганизация);
	МЭ.Вставить("ОтборВалюта"               , ФормаОтчета.ОтборВалюта);
	
	МЭ.Вставить("ОтборСостояниеТревожное"         , ФормаОтчета.ОтборСостояниеТревожное);
	МЭ.Вставить("ОтборСостояниеУдовлетворительное", ФормаОтчета.ОтборСостояниеУдовлетворительное);
	МЭ.Вставить("ОтборСостояниеХорошее"           , ФормаОтчета.ОтборСостояниеХорошее);
	
	МЭ.Вставить("ОтборТрендНулевой"      , ФормаОтчета.ОтборТрендНулевой);
	МЭ.Вставить("ОтборТрендОтрицательный", ФормаОтчета.ОтборТрендОтрицательный);
	МЭ.Вставить("ОтборТрендПоложительный", ФормаОтчета.ОтборТрендПоложительный);
	
	ЗначенияНастроек.Вставить("НастройкиМонитораЭффективности", МЭ);
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", Новый Соответствие);
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", ФормаОтчета.КомпоновщикНастроек.ПолучитьНастройки());
	
	Возврат ЗначенияНастроек;
	
КонецФункции

&НаСервере
Функция ВосстановитьЗначенияНастроекПанелиПользователя(ЗначенияНастроек, ФормаОтчета) Экспорт
	
	ВставитьЗначениеВЭлементФормы(ФормаОтчета, ЗначенияНастроек);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруДинамическихОтборов(Параметры, ЭлементыФормы)
	
	Соответствие = Новый Соответствие;
	Если Параметры = Неопределено Тогда
		Возврат Соответствие;
	КонецЕсли;
	
	Для каждого СтрокаОтбора Из Параметры.Отборы Цикл
		Индекс = Параметры.Отборы.Индекс(СтрокаОтбора);
		
		ЕстьСписок = СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок";
		ЕстьЗначение = СтрокаОтбора.ВидОтбора = "ФлажокЗначение" ИЛИ СтрокаОтбора.ВидОтбора = "Значение";
		ЕстьФлажок = СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение";
		
		Использование = Истина;
		Значение = Неопределено;
		ВыбранныйВидСравнения = Неопределено;
		
		Если ЕстьСписок Тогда
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"].Значение.ВыгрузитьКолонку("Значение"));
			Значение = Список;
			ВыбранныйВидСравнения = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравения"].Значение;
		ИначеЕсли ЕстьЗначение Тогда
			Значение = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ПолеВвода"].Значение;
		Иначе
			Значение = СтрокаОтбора.Значение;
		КонецЕсли;
		Если ЕстьФлажок Тогда
			Использование = ЭлементыФормы["ДинамическийОтбор" + Индекс + "Флажок"].Значение;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Использование", Использование);
		СтруктураОтбора.Вставить("Поле", СтрокаОтбора.Поле);
		СтруктураОтбора.Вставить("ВидСравнения", ВыбранныйВидСравнения);
		СтруктураОтбора.Вставить("Значение", Значение);
		Соответствие[СтрокаОтбора.Поле] = СтруктураОтбора;
	КонецЦикла;
	Возврат Соответствие;
	
КонецФункции

// Процедуры только определяют в какой элемент справочника СохраненныеНастройки будут сохранены настройки.
// Само сохранение производится в процедуре объекта.

&НаКлиенте
Процедура СохранитьТекущуюНастройку_УР(Объект, УИДФормы, СохраненнаяНастройка, ТипНастройки) Экспорт
	
	Если ТиповыеОтчетыУХ.ПроверитьВозможностьЗаписиНастройки(Объект, СохраненнаяНастройка) Тогда
		Оповестить("ВыбранаСохраненнаяНастройка", Новый ФиксированнаяСтруктура("УИДФормы, СохраненнаяНастройка, РежимСохраненияНастройки", УИДФормы, СохраненнаяНастройка, Истина));
	Иначе
		СохранитьТекущуюНастройкуКак_УР(Объект, УИДФормы, СохраненнаяНастройка, ТипНастройки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьТекущуюНастройкуКак_УР(Объект, УИДФормы, СохраненнаяНастройка, ТипНастройки) Экспорт
	
	ВыбратьНастройкуФормы(СохраненнаяНастройка, УИДФормы, Объект, Истина, ТипНастройки);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкуФормы_Завершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	Если ВыбранноеЗначение <> Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УИДФормы",					 ДополнительныеПараметры.УИДФормы);
		СтруктураПараметров.Вставить("СохраненнаяНастройка",		 ВыбранноеЗначение);
		СтруктураПараметров.Вставить("РежимСохраненияНастройки",	 ДополнительныеПараметры.РежимСохраненияНастройки);
		ФиксСтруктураПараметров = Новый ФиксированнаяСтруктура(СтруктураПараметров);
		Оповестить("ВыбранаСохраненнаяНастройка", ФиксСтруктураПараметров);
	Иначе
		// Пользователь отказался от ввода.
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкуФормы(СохраненнаяНастройка, УИДФормы, НастраиваемыйОбъект, РежимСохраненияНастройки, ТипНастройки) Экспорт
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СинонимОбъекта", НастраиваемыйОбъект);
	СтруктураНастроек.Вставить("РежимСохраненияНастройки", РежимСохраненияНастройки);
	СтруктураНастроек.Вставить("ЗакрыватьПриВыборе", Истина);
	СтруктураНастроек.Вставить("РежимВыбора", Истина);
	СтруктураНастроек.Вставить("Отбор", Новый Структура("Ссылка, НастраиваемыйОбъект, ТипНастройки"
														, ПолучитьИзВременногоХранилища(ТиповыеОтчетыУХ.ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект))
														, НастраиваемыйОбъект
														, ПредопределенноеЗначение(ТипНастройки)));
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("РежимСохраненияНастройки", РежимСохраненияНастройки);
	ДополнительныеПараметры.Вставить("УИДФормы", УИДФормы);
    ОписаниеОЗакрытии = Новый ОписаниеОповещения("ВыбратьНастройкуФормы_Завершение", ЭтотОбъект, ДополнительныеПараметры);	
	ОткрытьФорму("Справочник.СохраненныеНастройки.Форма.ФормаВыбора_Управляемая", СтруктураНастроек, , , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроекОтчетаПоУмолчанию(Отчет, ВозвращатьАдрес) Экспорт
	
	СтруктураНастроек = Новый Структура;
	
	Для Каждого Реквизит Из Отчет.Метаданные().Реквизиты Цикл
		
		Если Реквизит.Имя = "СхемаКомпоновкиДанных" 
		 ИЛИ Реквизит.Имя = "ДатаВерсииИсточникаДанных"
		 ИЛИ Реквизит.Имя = "ИсточникДанныхОтчета"
		 ИЛИ Реквизит.Имя = "Описание"
		 ИЛИ Реквизит.Имя = "ПодлежитПередачеВПодчиненныеУзлыПриОбменеПоОрганизации"
		 ИЛИ Реквизит.Имя = "ОформлениеПоказателей"
		 ИЛИ Реквизит.Имя = "Расшифровки"
		 ИЛИ Реквизит.Имя = "ЗначенияНастроекПанелиПользователя"
		 ИЛИ Реквизит.Имя = "ПараметрыПанелиПользователя"
		 ИЛИ Реквизит.Имя = "ЦветаДиаграммы" 
		 ИЛИ Реквизит.Тип.СодержитТип(Тип("ХранилищеЗначения")) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураНастроек.Вставить(Реквизит.Имя, Отчет[Реквизит.Имя]);
		
	КонецЦикла;
	
	СтруктураНастроек.Вставить("ОформлениеПоказателей", Отчет.ОформлениеПоказателей);
	СтруктураНастроек.Вставить("Расшифровки"          , Отчет.Расшифровки);
	СтруктураНастроек.Вставить("ЦветаДиаграммы"       , Отчет.ЦветаДиаграммы);
	СтруктураНастроек.Вставить("НастройкиКомпоновки"  , Отчет.НастройкиСхемыКомпоновкиДанныхПоУмолчанию);
	СтруктураНастроек.Вставить("ЗначенияНастроекПанелиОтчета", Отчет.ЗначенияНастроекПанелиПользователя);
	СтруктураНастроек.Вставить("ПараметрыПанелиПользователя",  Отчет.ПараметрыПанелиПользователя);
	
	Если ВозвращатьАдрес Тогда
		Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек);
	Иначе
		Возврат СтруктураНастроек;
	КонецЕсли;	
	
КонецФункции

Функция ВернутьЭлементОтбора(Отбор, ПолеОтбора) Экспорт
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		
		Если ТипЗнч(Элемент) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Элемент.ЛевоеЗначение = ПолеОтбора Тогда
				Возврат Элемент;
			КонецЕсли;
		Иначе
			
			ТекОтбор = ВернутьЭлементОтбора(Элемент, ПолеОтбора);
			
			Если ТекОтбор <> Неопределено Тогда
				Возврат ТекОтбор;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВернутьМассивЭлементовОтбора(Отбор, ПолеОтбора) Экспорт
	Перем мЭлементов;
	мЭлементов = Новый Массив;
	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) <> Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если Элемент.ЛевоеЗначение = ПолеОтбора Тогда
				мЭлементов.Добавить(Элемент);
			КонецЕсли;
		Иначе
			мПодчиненныхЭлементов = ВернутьЭлементОтбора(Элемент, ПолеОтбора);
			Для Каждого ЭлементМассива Из мПодчиненныхЭлементов Цикл
				мЭлементов.Добавить(ЭлементМассива);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат мЭлементов;
КонецФункции

Функция УстановитьОтбор(Отбор, ПолеОтбора, ВидСравнения, Значение) Экспорт
	
	ЭлементОтбора = ВернутьЭлементОтбора(Отбор, ПолеОтбора);
	Если ЭлементОтбора = Неопределено Тогда
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
		
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ.
//

// Дорабатывает отчет перед выводом
Процедура ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект, КомпоновщикНастроек = Неопределено, ЗначенияНастроек = Неопределено) Экспорт
	
	Если КомпоновщикНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отработка "Отрицательное красным"
	Если ОтчетОбъект.ОтрицательноеКрасным И Не ОтчетОбъект.РасширеннаяНастройка Тогда
	
		Для каждого Ресурс Из ТиповыеОтчетыУХ.ПолучитьВыбранныеПоля(КомпоновщикНастроек) Цикл
			Если Не КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Ресурс.Поле).Ресурс Тогда
				Продолжить;
			КонецЕсли;
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Ресурс.Поле;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = 0;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = Истина;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Ресурс.Поле;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ЗначенияНастроек = Неопределено Тогда
		ЗначенияНастроек = ТиповыеОтчетыУХ.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	КонецЕсли;
	
	Если ЗначенияНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установим у всех параметров использование
	Для каждого ЗначениеПараметра Из ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьПоказательМонитораЭффективности(ИсточникДанных, АдресСтруктурыПараметров, АдресМассиваДостпуныхРасшифровок = Неопределено) Экспорт
	
	СтруктураПараметровФормы = Новый Структура;
	СтруктураПараметровФормы.Вставить("ИсточникДанных", ИсточникДанных);
	СтруктураПараметровФормы.Вставить("АдресСтруктурыПараметров", АдресСтруктурыПараметров);
	РасширениеПроцессыИСогласованиеКлиентУХ.ОткрытьФормуУХ("Справочник.Запросы.Форма.ФормаРасшифровкиУправляемая", СтруктураПараметровФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЕРВИСНЫЕ ФУНКЦИИ ДЛЯ РАБОТЫ С НАСТРОЙКАМИ ПАНЕЛИ ОТЧЕТОВ.
//

// Функция сохраняет настройки отборов в таблицу значений
&НаСервере
Функция ПреобразоватьНастройкиОтбораВТаблицуОтборов(Отбор) Экспорт
	
	ТаблицаОтвета = Новый ТаблицаЗначений;
	ТаблицаОтвета.Колонки.Добавить("ЛевоеЗначение");
	ТаблицаОтвета.Колонки.Добавить("ВидСравнения");
	ТаблицаОтвета.Колонки.Добавить("ПравоеЗначение");
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		
		Если Элемент.Использование Тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаОтвета.Добавить(), Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОтвета;
	
КонецФункции

&НаСервере
Функция ПреобразоватьПараметрыДанныхВТаблицуПараметров(ПараметрыДанных) Экспорт
	
	ТаблицаОтвета = Новый ТаблицаЗначений;
	ТаблицаОтвета.Колонки.Добавить("Использование");
	ТаблицаОтвета.Колонки.Добавить("Параметр");
	ТаблицаОтвета.Колонки.Добавить("Значение");
	
	Для Каждого Элемент Из ПараметрыДанных.Элементы Цикл
		
		Если Элемент.Использование Тогда
			
			ЗаполнитьЗначенияСвойств(ТаблицаОтвета.Добавить(), Элемент);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОтвета;
	
КонецФункции


&НаСервере
Процедура ВосстановитьНастройкиОтбораИзТаблицыОтбора(Отбор, ТаблицаОтбора) Экспорт
	
	Для Каждого Элемент Из ТаблицаОтбора Цикл
		
		НайденныйЭлементОтбора = ВернутьЭлементОтбора(Отбор, Элемент.ЛевоеЗначение);
		Если НайденныйЭлементОтбора <> Неопределено Тогда
			
			НайденныйЭлементОтбора.ВидСравнения   = Элемент.ВидСравнения;
			НайденныйЭлементОтбора.ПравоеЗначение = Элемент.ПравоеЗначение;
			НайденныйЭлементОтбора.Использование  = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиПараметровДанныхИзТаблицыПараметров(ПараметрыДанных, ТаблицаПараметров) Экспорт
	
	Для Каждого Элемент Из ПараметрыДанных.Элементы Цикл
		
		НайденнаяСтрока = ТаблицаПараметров.Найти(Элемент.Параметр, "Параметр");
		Если НайденнаяСтрока = Неопределено Тогда
			Элемент.Использование = Ложь;
		Иначе
			Элемент.Использование = Истина;
			Элемент.Значение = НайденнаяСтрока.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ РАСШИФРОВКИ.
//
