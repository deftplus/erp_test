////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Выполняет проведение документов с помощью фонового задания.
//
// Параметры:
//  Список	 - ДинамическийСписок	 - Список документов.
//  ИмяФормы - Строка				 - Форма в которой реализовано фоновое проведение документов.
//
Процедура ПровестиДокументыВФономЗадании(Список, ИмяФормы) Экспорт

	ОчиститьСообщения();
	ВыделенныеСтроки = ОбщегоНазначенияУТКлиент.ПроверитьПолучитьВыделенныеВСпискеСсылки(Список);
	
	Если ВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МассивСсылок = ОбщегоНазначенияУТВызовСервера.СсылкиДокументовДинамическогоСписка(ВыделенныеСтроки);
	
	ЕстьПомеченныеНаУдаление = Ложь;
	МожноПровести = ВнеоборотныеАктивыВызовСервера.ПроверитьВозможностьПроведения(МассивСсылок, ЕстьПомеченныеНаУдаление);
	Если ЕстьПомеченныеНаУдаление И МассивСсылок.Количество() = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Помеченный на удаление документ не может быть проведен';
								|en = 'Document marked for deletion cannot be posted'");
		ПоказатьПредупреждение(,ТекстСообщения);
	ИначеЕсли МожноПровести Тогда
		ПараметрыФормы = Новый Структура("СписокДокументов", МассивСсылок);
		ОткрытьФорму(ИмяФормы, ПараметрыФормы);
	КонецЕсли; 
	
КонецПроцедуры

// Открывает форму ввода адреса с заполненными из параметра значениями полей адреса.
//
// Параметры:
//  Форма				 - ФормаКлиентскогоПриложения - форма, в которой расположен ввода адреса;
//  Элемент				 - ПолеФормы - элемент формы для ввода адреса;
//  Объект				 - ДанныеФормыКоллекция - объект, для которого выполняется событие;
//  ИмяРеквизитаАдреса	 - Строка - имя реквизита;
//  СтандартнаяОбработка - Булево - признак выполнения стандартной обработки события начало выбора.
//
Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультат(Форма, Элемент, Объект, ИмяРеквизитаАдреса = "АдресМестонахождения", СтандартнаяОбработка = Ложь) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПриИзмененииПредставленияАдреса(Элемент, Объект[ИмяРеквизитаАдреса], Объект[ИмяРеквизитаАдреса + "Значение"]);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ИмяРеквизитаАдреса", ИмяРеквизитаАдреса);
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение", 
		ЭтотОбъект, ДополнительныеПараметры);
		
	ВидКонтактнойИнформации = Новый Структура;
	ВидКонтактнойИнформации.Вставить("Тип", ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Адрес"));
	ВидКонтактнойИнформации.Вставить("ТолькоНациональныйАдрес", Ложь);
	ВидКонтактнойИнформации.Вставить("ВключатьСтрануВПредставление", Ложь);
	ВидКонтактнойИнформации.Вставить("СкрыватьНеактуальныеАдреса", Ложь);
		
	ПараметрыФормыКонтактнойИнформации = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
			ВидКонтактнойИнформации,
			Объект[ИмяРеквизитаАдреса + "Значение"],
			Объект[ИмяРеквизитаАдреса]);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормыКонтактнойИнформации,, Оповещение);
		
КонецПроцедуры

// Актуализирует КИ из текста редактирования поля ввода.
//
// Параметры:
//  Элемент - ПолеФормы - элемент формы для ввода адреса;
//  АдресПредставление - Строка - представление адреса;
//  АдресЗначение - Строка - служебная информация, значения полей адреса.
//
Процедура ПриИзмененииПредставленияАдреса(Элемент, АдресПредставление, АдресЗначение) Экспорт
	
	АдресПредставление = Элемент.ТекстРедактирования;
	ОбщегоНазначенияУТВызовСервера.ЗаполнитьЗначенияПолейКИПоПредставлению(АдресПредставление, АдресЗначение);
	
КонецПроцедуры

// Оповещает об изменении регистра ДокументыПоОС.
// 
Процедура ОповеститьОЗаписиДокументаВЖурналОС() Экспорт
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДокументыПоОС"));
	
КонецПроцедуры

// Оповещает об изменении регистра ДокументыПоНМА.
// 
Процедура ОповеститьОЗаписиДокументаВЖурналНМА() Экспорт
	
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ДокументыПоНМА"));
	
КонецПроцедуры

#Область Штрихкоды

// Получает данные для печати и открывает форму Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды.
//
// Возвращаемое значение:
//	Неопределено
//
Функция ПечатьЭтикетокОбъектовЭксплуатации(ОписаниеКоманды) Экспорт
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации",
		Новый Структура("ОбъектыЭксплуатации", ОписаниеКоманды.ОбъектыПечати),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
	
	Возврат Неопределено;
	
КонецФункции

// Получает данные для печати и открывает форму Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации.
//
// Параметры:
//	ОписаниеКоманды - Структура - структура с описанием команды:
//	                    * Идентификатор - Строка - Может принимать значения "Ценники" или "Этикетки";
//	                    * ОбъектыПечати - Массив - Объекты печати.
//
// Возвращаемое значение:
//	Неопределено - Ничего не возвращает.
//
Функция ПечатьЭтикетокОбъектовЭксплуатацииИзДокумента(ОписаниеКоманды) Экспорт
	
	ДополнительныеПараметры = Новый Структура("МенеджерПечати", ОписаниеКоманды.МенеджерПечати);
	
	ДанныеДляПечати =
		УправлениеПечатьюУТВызовСервера.ДанныеДляПечатиЦенниковИЭтикеток(
			ОписаниеКоманды.Идентификатор,
			ОписаниеКоманды.ОбъектыПечати,
			ДополнительныеПараметры);
	
	ОткрытьФорму(
		"Обработка.ПечатьЭтикетокОбъектовЭксплуатации.Форма.ФормаОбъектыЭксплуатации",
		Новый Структура("ОбъектыЭксплуатации", ДанныеДляПечати),
		ОписаниеКоманды.Форма,
		Новый УникальныйИдентификатор);
	
	Возврат Неопределено;
	
КонецФункции

// Выполняет поиск объектов эксплуатации по штрихкоду.
// Открывает форму, где пользователь вводит штрихкод.
// После ввода выполняется поиск.
// Если найдено несколько ОЭ, то открывается форма для выбора.
// После успешного поиска возвращает массив ссылок.
// 
// Параметры:
// 	ПроцедураОбработки - ОписаниеОповещения - Процедура, которую нужно вызвать при успешном поиске.
//  ПараметрыПодбора - см. ВнеоборотныеАктивыКлиентСервер.ПараметрыПодбора
Процедура ПоискОбъектовЭксплуатацииПоШтрихкоду(ПроцедураОбработки, ПараметрыПодбора = Неопределено) Экспорт
	
	ДополнительныеПараметры = Новый Структура("ПроцедураОбработки, ПараметрыПодбора", ПроцедураОбработки, ПараметрыПодбора);
	Оповещение = Новый ОписаниеОповещения("ПоискОбъектовЭксплуатацииПоШтрихкодуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ШтрихкодированиеНоменклатурыКлиент.ПоказатьВводШтрихкода(Оповещение);
	
КонецПроцедуры

// Обработка ввода штрихкода.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
// 	ПроцедураОбработки - ОписаниеОповещения - Процедура, которую нужно вызвать при успешном поиске.
//  ПараметрыПодбора - см. ВнеоборотныеАктивыКлиентСервер.ПараметрыПодбора
Процедура ОбработатьВводШтрихкодовОбъектовЭксплуатации(ДанныеШтрихкодов, ПроцедураОбработки, ПараметрыПодбора = Неопределено) Экспорт
	
	РезультатПоиска = ВнеоборотныеАктивыВызовСервера.НайтиОбъектыЭксплуатацииПоШтрихкодам(
						ДанныеШтрихкодов, ПараметрыПодбора);
	
	Если РезультатПоиска.МассивОбъектов.Количество() = 0 Тогда
		
		СообщитьОРезультатахПоискаОбъектовЭксплуатацииПоШтрихкоду(РезультатПоиска);
	
	ИначеЕсли РезультатПоиска.МассивОбъектов.Количество() = 1 Тогда
		
		ВыполнитьОбработкуОповещения(ПроцедураОбработки, РезультатПоиска.МассивОбъектов);
	
	Иначе
		
		ДополнительныеПараметры = Новый Структура("ПроцедураОбработки", ПроцедураОбработки);
		Оповещение = Новый ОписаниеОповещения("ВыборОбъектовЭксплуатацииПоШтриходуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Параметры = Новый Структура;
		Параметры.Вставить("ДанныеШтрихкодов", ДанныеШтрихкодов);
		Параметры.Вставить("ПараметрыПодбора", ПараметрыПодбора);
		Параметры.Вставить("МассивОбъектов", РезультатПоиска.МассивОбъектов);
		Параметры.Вставить("ПоискОбъектовЭксплуатации", Истина);
		Параметры.Вставить("ПоискУзлов", Ложь);
		ОткрытьФорму("Справочник.ОбъектыЭксплуатации.Форма.ПоискПоШтрихкоду", Параметры,,,,, Оповещение);
	
	КонецЕсли;
	
КонецПроцедуры

// Сообщает о результатах поиска по штрихкоду.
// 
// Параметры:
// 	РезультатПоиска - см. ВнеоборотныеАктивы.НайтиОбъектыПоШтрихкодам
Процедура СообщитьОРезультатахПоискаОбъектовЭксплуатацииПоШтрихкоду(РезультатПоиска) Экспорт
	
	ОчиститьСообщения();
	
	ШаблонСообщения = НСтр("ru = 'Не удалось найти объекты эксплуатации по штрихкоду %1';
							|en = 'Cannot find assets by barcode %1'");
	Для каждого Штрихкод Из РезультатПоиска.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации ""%1"" не может быть добавлен в документ, т.к. он не удовлетворяет условиям выбора';
							|en = 'The asset ""%1"" cannot be added to the document, as it does not meet selection conditions'");
	Для каждого СсылкаНаОбъект Из РезультатПоиска.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
КонецПроцедуры

#КонецОбласти

#Область Аренда

// Открывает форму для ввод срока аренды, после ввода устанавливает срок в объекте.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - Форма.
// 	Объект - ДанныеФормыСтруктура - Объект.
// 	ОбработчикЗавершения - Неопределено - Обработчик формы, который нужно вызвать после ввода срока.
Процедура ВвестиСрокАренды(Форма, Объект, ОбработчикЗавершения = Неопределено) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаНачалаАренды", Объект.ДатаНачалаАренды);
	ПараметрыФормы.Вставить("СрокЛет", Объект.СрокЛет);
	ПараметрыФормы.Вставить("СрокМес", Объект.СрокМес);
	ПараметрыФормы.Вставить("СрокДней", Объект.СрокДней);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", Форма);
	ДополнительныеПараметры.Вставить("Объект", Объект);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	ОткрытьФорму("Справочник.ДоговорыАренды.Форма.ВводСрокаАренды",
			ПараметрыФормы,,,,, 
			Новый ОписаниеОповещения("ВвестиСрокАрендыЗавершение", ЭтотОбъект, ДополнительныеПараметры), 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ПриИзмененииСрокаИспользования(Объект, ИмяРеквизита, ОбновитьСрокИспользования) Экспорт
	
	СписокРеквизитов = ИмяРеквизита;
	
	Если ИмяРеквизита <> "СрокИспользованияУУ"
		И Объект.ОтражатьВУпрУчете
		И (Объект.СрокИспользованияУУ = 0
			ИЛИ ОбновитьСрокИспользования) Тогда
		
		Объект.СрокИспользованияУУ = Объект[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияУУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияБУ"
		И Объект.ОтражатьВУпрУчете
		И (Объект.СрокИспользованияБУ = 0
			ИЛИ ОбновитьСрокИспользования) Тогда
		
		Объект.СрокИспользованияБУ = Объект[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияБУ";
		
	КонецЕсли;
	
	Если ИмяРеквизита <> "СрокИспользованияНУ"
		И Объект.ОтражатьВРеглУчете
		И (Объект.СрокИспользованияНУ = 0
			ИЛИ ОбновитьСрокИспользования) Тогда
		
		Объект.СрокИспользованияНУ = Объект[ИмяРеквизита];
		СписокРеквизитов = СписокРеквизитов + ",СрокИспользованияНУ";
		
	КонецЕсли;
	
	Возврат СписокРеквизитов;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииОС(Параметры) Экспорт

	ОбработкаВыполнена = ВнеоборотныеАктивыКлиентЛокализация.ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииОС(Параметры);

	Если НЕ ОбработкаВыполнена Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Период", Параметры.Период);
		ПараметрыФормы.Вставить("МассивОрганизаций", Параметры.МассивОрганизаций);
		ОткрытьФорму("Документ.АмортизацияОС2_4.ФормаСписка", ПараметрыФормы);
	КонецЕсли; 
			
КонецПроцедуры

Процедура ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииНМА(Параметры) Экспорт

	ОбработкаВыполнена = ВнеоборотныеАктивыКлиентЛокализация.ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииНМА(Параметры);

	Если НЕ ОбработкаВыполнена Тогда 
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Период", Параметры.Период);
		ПараметрыФормы.Вставить("МассивОрганизаций", Параметры.МассивОрганизаций);
		ОткрытьФорму("Документ.АмортизацияНМА2_4.ФормаСписка", ПараметрыФормы);
	КонецЕсли; 
			
КонецПроцедуры

Процедура ОповеститьОРасчетеАмортизации(РезультатРасчета, Период = Неопределено) Экспорт
	
	Если РезультатРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатРасчета.ЕстьОшибки Тогда
		
		Если ЗначениеЗаполнено(РезультатРасчета.ТекстОшибки) Тогда
			ВызватьИсключение РезультатРасчета.ТекстОшибки
		Иначе
			ТекстПояснения = НСтр("ru = 'При расчете возникли ошибки';
									|en = 'Errors occurred while calculating'");
			КартинкаОповещения = БиблиотекаКартинок.АмортизацияСОшибкой;
			ПоказатьОповещениеПользователя(,, ТекстПояснения, КартинкаОповещения);
		КонецЕсли;
		
	Иначе
		ТекстПояснения = НСтр("ru = 'Амортизация рассчитана';
								|en = 'Depreciation is calculated'");
		КартинкаОповещения = БиблиотекаКартинок.АмортизацияРассчитана;
		ПоказатьОповещениеПользователя(,, ТекстПояснения, КартинкаОповещения);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОткрытьФормуВыбораАдресаИОбработатьРезультатЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = ДополнительныеПараметры.Объект;
	ИмяРеквизитаАдреса= ДополнительныеПараметры.ИмяРеквизитаАдреса;
		
	// Перенесем данные в форму
	Объект[ИмяРеквизитаАдреса + "Значение"] = Результат.Значение;
	Объект[ИмяРеквизитаАдреса] = Результат.Представление;
	
	Форма.Модифицированность = Истина;
	Форма.ОбновитьОтображениеДанных();

КонецПроцедуры

Процедура ПоискОбъектовЭксплуатацииПоШтрихкодуЗавершение(ДанныеШтрихкодов, ДополнительныеПараметры) Экспорт
	
	ОбработатьВводШтрихкодовОбъектовЭксплуатации(
		ДанныеШтрихкодов, 
		ДополнительныеПараметры.ПроцедураОбработки, 
		ДополнительныеПараметры.ПараметрыПодбора);
	
КонецПроцедуры

Процедура ВыборОбъектовЭксплуатацииПоШтриходуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() <> 0 Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ПроцедураОбработки, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьГрафикОплатИНачислений(Объект, Форма, АдресГрафиков, ОписаниеОповещения, ИмяГрафика) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяГрафика", ИмяГрафика);
	ПараметрыФормы.Вставить("Договор", Объект.Договор);
	ПараметрыФормы.Вставить("ТолькоПросмотр", Форма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("СлужебныеПараметрыФормы", Форма.СлужебныеПараметрыФормы);
	ПараметрыФормы.Вставить("ПроцентнаяСтавка", Объект.ПроцентнаяСтавка);
	ПараметрыФормы.Вставить("СтавкаНДС", Объект.СтавкаНДС);
	ПараметрыФормы.Вставить("ДатаНачалаАренды", Объект.ДатаНачалаАренды);
	ПараметрыФормы.Вставить("СуммаВыкупаПредметовАренды", Объект.СуммаВыкупаПредметовАренды);
	ПараметрыФормы.Вставить("СуммаНДСВыкупаПредметовАренды", Объект.СуммаНДСВыкупаПредметовАренды);
	ПараметрыФормы.Вставить("ПриведеннаяСтоимость", Объект.ПриведеннаяСтоимость);
	ПараметрыФормы.Вставить("ВалютаДокументаПредставление", Форма.ВалютаДокументаПредставление);
	ПараметрыФормы.Вставить("ГрафикНачисленияПроцентовВведенВручную", Объект.ГрафикНачисленияПроцентовВведенВручную);
	ПараметрыФормы.Вставить("ГрафикиДоговора", АдресГрафиков);
	
	ОткрытьФорму("Справочник.ДоговорыАренды.Форма.ГрафикОплатИНачислений", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

//++ НЕ УТКА

Процедура ОткрытьПроводкиМеждународногоУчета(Знач Ссылка) Экспорт

	ПараметрыОтбора = Новый Структура("Регистратор", Ссылка);
	ПараметрыФормы = Новый Структура("Отбор", ПараметрыОтбора);
	ОткрытьФорму("РегистрБухгалтерии.Международный.Форма.ПроводкиМеждународногоУчета", ПараметрыФормы,, Ссылка);
	
КонецПроцедуры

//-- НЕ УТКА

#Область Аренда

Процедура ВвестиСрокАрендыЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено 
		ИЛИ ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = ДополнительныеПараметры.Объект;
	
	Объект.ДатаНачалаАренды = РезультатЗакрытия.ДатаНачалаАренды;
	Объект.СрокЛет = РезультатЗакрытия.СрокЛет;
	Объект.СрокМес = РезультатЗакрытия.СрокМес;
	Объект.СрокДней = РезультатЗакрытия.СрокДней;
	
	ДополнительныеПараметры.Форма.Модифицированность = Истина;
	
	Если ДополнительныеПараметры.ОбработчикЗавершения <> Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОбработчикЗавершения, РезультатЗакрытия);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность заполнения графика оплат и начислений по данным раздела "Расчеты"
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура -
//  
// Возвращаемое значение:
// 	Булево - Истина, если можно заполнить
Функция ПроверитьВозможностьЗаполненияГрафикаПоРасчетам(Объект, РеквизитыДоговора) Экспорт
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней, Истина);
	
	Если НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Договор"" не заполнено';
								|en = '""Contract"" is not filled in.'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "Договор", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	//
	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
		И НЕ ЗначениеЗаполнено(Объект.СуммаОбеспечительногоПлатежа) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Сумма обеспечительного платежа"" не заполнено';
								|en = 'The ""Security payment amount"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СуммаОбеспечительногоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
		И НЕ ЗначениеЗаполнено(Объект.ДатаПервогоОбеспечительногоПлатежа) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Дата первого обеспечительного платежа"" не заполнено';
								|en = 'The ""First security payment date"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоОбеспечительногоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если НЕ ЗначениеЗаполнено(Объект.ДатаПервогоПлатежа)
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Дата первого платежа за услуги по аренде"" не заполнено';
								|en = 'The ""Date of the first payment for lease services"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если РеквизитыДоговора.ЕстьВыкупПредметовАренды
		И НЕ ЗначениеЗаполнено(Объект.СуммаВыкупаПредметовАренды) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Сумма выкупа предметов аренды"" не заполнено';
								|en = 'The ""Amount of lease objects redemption"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СуммаВыкупаПредметовАренды", "Объект", ЕстьОшибки);
	КонецЕсли;
	
	//
	Если Объект.ДатаНачалаАренды = '000101010000'
		ИЛИ Объект.СрокЛет = 0 И Объект.СрокМес = 0 И Объект.СрокДней = 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Срок аренды"" не заполнено';
								|en = 'The ""Lease period"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "СрокАренды", , ЕстьОшибки);
	КонецЕсли;

	//
	Если Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
		И НЕ ЗначениеЗаполнено(Объект.ОплатаУслугиПоАренде) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Платеж за услуги по аренде"" не заполнено';
								|en = 'The ""Payment for lease services"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ОплатаУслугиПоАренде", "Объект", ЕстьОшибки);
	КонецЕсли;

	Если Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
		И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
		И НЕ ЗначениеЗаполнено(Объект.НачислениеУслугиПоАренде) Тогда
			
		ТекстСообщения = НСтр("ru = 'Поле ""Начисление услуги по аренде"" не заполнено';
								|en = 'The ""Accrual of lease services"" field is not filled in'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "НачислениеУслугиПоАренде", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
		И Объект.ДатаПервогоОбеспечительногоПлатежа > ДатаОкончания
		И Объект.ДатаПервогоОбеспечительногоПлатежа <> '000101010000'
		И ДатаОкончания <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Обеспечительный платеж должен быть не позже окончания срока аренды';
								|en = 'The security payment must be no later than the end of the lease term'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоОбеспечительногоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	//
	Если Объект.ДатаПервогоПлатежа < Объект.ДатаНачалаАренды
		И Объект.ДатаПервогоПлатежа <> '000101010000'
		И Объект.ДатаНачалаАренды <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Первый платеж должен быть не раньше даты начала аренды';
								|en = 'The first payment must not be earlier than the lease start date'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения,, "ДатаПервогоПлатежа", "Объект", ЕстьОшибки);
	КонецЕсли;

	Возврат НЕ ЕстьОшибки;
	
КонецФункции

// Проверяет возможность расчета ставки или стоимости.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды, ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде -
// 	РеквизитыДоговора - Структура -
// 	ИмяТабличнойЧастиОС - Строка -
// 	СообщатьОбОшибках - Булево -
// 	
// Возвращаемое значение:
// 	Булево - 
Функция МожноРассчитатьСтавкуИлиСтоимость(Объект, РеквизитыДоговора, ИмяТабличнойЧастиОС, СообщатьОбОшибках = Истина) Экспорт
	
	ОчиститьСообщения();
	
	ЕстьОшибки = Ложь;
	
	ПоФактическойСтоимости = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости"));
	
	СписокОшибок = Новый Массив;
	
	Если ПоФактическойСтоимости Тогда
		
		Если ИмяТабличнойЧастиОС <> "" Тогда
			
			Если Объект.ОС.Количество() = 0 Тогда
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить список предметов аренды и их стоимость';
										|en = 'Fill in the list of lease objects and their cost'");
				ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ОС", "Объект", ЕстьОшибки);
			КонецЕсли;
			
			Для Каждого ДанныеСтроки Из Объект.ОС Цикл
				
				Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
					И ДанныеСтроки.СправедливаяСтоимость = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 необходимо заполнить справедливую стоимость';
													|en = 'Fill in the fair value in line %1'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ=;"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "СправедливаяСтоимость");
					ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, Поле, "Объект", ЕстьОшибки);
					
				ИначеЕсли РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг")
					И ДанныеСтроки.Стоимость = 0 Тогда
					
					ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 необходимо заполнить стоимость';
													|en = 'Fill in the cost in line %1'"), Формат(ДанныеСтроки.НомерСтроки, "ЧГ=;"));
					Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "Стоимость");
					ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, Поле, "Объект", ЕстьОшибки);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе 
			
			Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
				И Объект.СправедливаяСтоимость = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить справедливую стоимость';
										|en = 'Fill in the fair value'");
				ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "СправедливаяСтоимость", "Объект", ЕстьОшибки);
				
			ИначеЕсли РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг")
				И Объект.Стоимость = 0 Тогда
				
				ТекстСообщения = НСтр("ru = 'Необходимо заполнить стоимость';
										|en = 'Fill in the cost'");
				ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "Стоимость", "Объект", ЕстьОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтоимостьПредметовАренды = ВнеоборотныеАктивыКлиентСервер.СтоимостьПредметовАренды(Объект, РеквизитыДоговора, ИмяТабличнойЧастиОС);
		
		ПриведеннаяСтоимость = ВнеоборотныеАктивыКлиентСервер.ПриведеннаяСтоимость(
			СтоимостьПредметовАренды,
			Объект.ГрафикОплатУслуг, 
			Объект.ДатаНачалаАренды);
		
		ВсегоПлатежейБезНДС = ВнеоборотныеАктивыКлиентСервер.ВсегоПлатежейБезНДС(Объект.ГрафикОплатУслуг, Объект.ДатаНачалаАренды, Объект.СтавкаНДС);
		
		Если ПриведеннаяСтоимость >= ВсегоПлатежейБезНДС И ВсегоПлатежейБезНДС > 0 Тогда
			Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг") Тогда
				ТекстСообщения = НСтр("ru = 'Сумма вложений лизингодателя должна быть меньше суммы платежей без НДС';
										|en = 'The amount of the lessor''s investments must be less than the amount of payments excluding VAT'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Стоимость предметов аренды должна быть меньше суммы платежей без НДС';
										|en = 'The cost of lease objects must be less than the amount of payments excluding VAT'");
			КонецЕсли;
			ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ПроцентнаяСтавка",, ЕстьОшибки);
		КонецЕсли;
		
	ИначеЕсли Объект.ПроцентнаяСтавка = 0 Тогда
			
		ТекстСообщения = НСтр("ru = 'Необходимо заполнить ставку';
								|en = 'Specify rate'");
		ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ПроцентнаяСтавка", "Объект", ЕстьОшибки);
		
	КонецЕсли;
	
	Если Объект.ДатаПервогоПлатежа < Объект.ДатаНачалаАренды
		И Объект.ДатаПервогоПлатежа <> '000101010000'
		И Объект.ДатаНачалаАренды <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Первый платеж должен быть не раньше даты начала аренды';
								|en = 'The first payment must not be earlier than the lease start date'");
		ВнеоборотныеАктивыКлиентСервер.ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, "ДатаПервогоПлатежа", "Объект", ЕстьОшибки);
		
	КонецЕсли;
	
	ДатаУслугаПоАренде = '000101010000';
	ДатаВыкупнаяСтоимость = '000101010000';
	ДатаОбеспечительныйПлатеж = '000101010000';
	Для Каждого ИсходнаяСтрокаГрафика Из Объект.ГрафикОплатУслуг Цикл		
		
		Если ИсходнаяСтрокаГрафика.УслугаПоАренде <> 0 
			И ИсходнаяСтрокаГрафика.Дата <> '000101010000' Тогда
			ДатаУслугаПоАренде = ?(
				ДатаУслугаПоАренде <> '000101010000', 
				Мин(ДатаУслугаПоАренде, ИсходнаяСтрокаГрафика.Дата), 
				ИсходнаяСтрокаГрафика.Дата);
		КонецЕсли;
		
		Если ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость <> 0 
			И ИсходнаяСтрокаГрафика.Дата <> '000101010000' Тогда
			ДатаВыкупнаяСтоимость = ?(
				ДатаВыкупнаяСтоимость <> '000101010000', 
				Мин(ДатаВыкупнаяСтоимость, ИсходнаяСтрокаГрафика.Дата), 
				ИсходнаяСтрокаГрафика.Дата);
		КонецЕсли;
		
		Если ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж <> 0 
			И ИсходнаяСтрокаГрафика.Дата <> '000101010000' Тогда
			ДатаОбеспечительныйПлатеж = ?(
				ДатаОбеспечительныйПлатеж <> '000101010000', 
				Мин(ДатаОбеспечительныйПлатеж, ИсходнаяСтрокаГрафика.Дата), 
				ИсходнаяСтрокаГрафика.Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	Если СообщатьОбОшибках Тогда
		Для Каждого ОписаниеОшибки Из СписокОшибок Цикл
			ОбщегоНазначенияКлиент.СообщитьПользователю(
				ОписаниеОшибки.ТекстСообщения,, ОписаниеОшибки.Поле, ОписаниеОшибки.ПутьКДанным);
		КонецЦикла;
	КонецЕсли;
	
	Возврат НЕ ЕстьОшибки;
	
КонецФункции

#КонецОбласти

#КонецОбласти
