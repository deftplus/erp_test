#Область РаботаСКроссТаблицейПотребностей


// Процедура создает реквизит формы "Таблица значений" с колонками, необходимыми для обработки периодов
//
// Параметры:
//  Форма  				- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//  ИмяТаблицыПериодов  - Строка - Имя, с которым будет создан реквизит формы таблица
//
Процедура СоздатьТаблицуПериодов(Форма, Знач ИмяТаблицыПериодов) Экспорт 
	
	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	ОписаниеТиповТЗ = Новый ОписаниеТипов("ТаблицаЗначений");
	ОписаниеТиповЧ = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 0); 
	ОписаниеТиповБулево = Новый ОписаниеТипов("Булево");
	ОписаниеТиповСтрока50 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50));
	ОписаниеТиповСтрока36 = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36));
	ОписаниеТиповДата = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	
	// Создание реквизитов  таблицы
	РеквизитСуществует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
		Форма, ИмяТаблицыПериодов);
	
	ДобавляемыеРеквизиты = Новый Массив();
	Если НЕ РеквизитСуществует Тогда
		Реквизит = Новый РеквизитФормы(ИмяТаблицыПериодов, ОписаниеТиповТЗ);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("НомерКолонки", ОписаниеТиповЧ, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ИмяКолонки", ОписаниеТиповСтрока36, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Активная", ОписаниеТиповБулево, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Период", Новый ОписаниеТипов("СправочникСсылка.Периоды"), ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("Заголовок", ОписаниеТиповСтрока50, ИмяТаблицыПериодов);
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		
	КонецЕсли;;
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет таблицу периодов, последовательно меньшими
// периодами заданной периодичности, для получения полей и их заголовков
//
// Параметры:
//  ТаблицаПериоды - ТаблицаЗначений - Таблица, которую заполняем
//		периодами заданной периодичности
//	ДатаНачала - Дата - начало отбираемых периодов должно быть больше
//		или равно указанной дате.
//	ДатаОкончания - Дата - окончание отбираемых периодов должно быть
//		меньше или равно указанной дате.
//  Периодичность  - ПеречислениеСсылка.Периодичность - Периодичность
//		с которой нужно заполнить таблицу
//
Процедура ЗаполнитьТаблицуПериодов(ТаблицаПериоды,
								Знач ОсновнойПериод,
								Знач Периодичность) Экспорт
	Если ЗначениеЗаполнено(ОсновнойПериод) Тогда
 		ЗаполнитьТаблицуПериодовИзДиапазона(ТаблицаПериоды, 
											ОсновнойПериод.ДатаНачала, 
											ОсновнойПериод.ДатаОкончания, 
											Периодичность);
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьТаблицуПериодовФормы(Форма, 
									   ИмяТаблицыПериодов, 
									   ДатаНачала, 
									   ДатаОкончания,
									   Периодичность) Экспорт
	ЭлементТаблицыПериодов = Форма[ИмяТаблицыПериодов];
	ТаблицаПериоды = ДанныеФормыВЗначение(
		ЭлементТаблицыПериодов, 
		Тип("ТаблицаЗначений"));
	ЗаполнитьТаблицуПериодовИзДиапазона(
		ТаблицаПериоды, 
		ДатаНачала,
		ДатаОкончания,
		Периодичность);
	ЗначениеВДанныеФормы(ТаблицаПериоды, ЭлементТаблицыПериодов);
КонецПроцедуры
	
Процедура ЗаполнитьТаблицуПериодовИзДиапазона(ТаблицаПериоды, 
									ДатаНачала, 
									ДатаОкончания, 
									Знач Периодичность) Экспорт 
	Если ТипЗнч(ТаблицаПериоды) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонеЦЕсли;
	Если ЗначениеЗаполнено(Периодичность)
			И ЗначениеЗаполнено(ДатаНачала) 
			И ЗначениеЗаполнено(ДатаОкончания) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаПериоды.ИмяКолонки КАК ИмяКолонки,
			|	ТаблицаПериоды.НомерКолонки КАК НомерКолонки,
			|	ТаблицаПериоды.Период КАК Период,
			|	ТаблицаПериоды.Заголовок КАК Заголовок
			|ПОМЕСТИТЬ ВТ_ТаблицаПериоды
			|ИЗ
			|	&ТаблицаПериоды КАК ТаблицаПериоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	Периоды.Ссылка КАК Ссылка,
			|	Периоды.ДатаНачала КАК ДатаНачала
			|ПОМЕСТИТЬ ТаблицаПериодов
			|ИЗ
			|	Справочник.Периоды КАК Периоды
			|ГДЕ
			|	НЕ Периоды.ПометкаУдаления
			|	И Периоды.Периодичность = &Периодичность
			|	И Периоды.ДатаНачала >= &ДатаНачала
			|	И Периоды.ДатаОкончания <= &ДатаОкончания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ВТ_ТаблицаПериоды.ИмяКолонки ЕСТЬ NULL
			|			ТОГДА """"
			|		ИНАЧЕ ВТ_ТаблицаПериоды.ИмяКолонки
			|	КОНЕЦ КАК ИмяКолонки,
			|	-1 КАК НомерКолонки,
			|	ТаблицаПериодов.Ссылка КАК Период,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаПериодов.Ссылка) КАК Заголовок,
			|	ИСТИНА КАК Активная,
			|	ТаблицаПериодов.ДатаНачала КАК ДатаНачала
			|ИЗ
			|	ТаблицаПериодов КАК ТаблицаПериодов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПериоды КАК ВТ_ТаблицаПериоды
			|		ПО ТаблицаПериодов.Ссылка = ВТ_ТаблицаПериоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВТ_ТаблицаПериоды.ИмяКолонки,
			|	-1,
			|	ВТ_ТаблицаПериоды.Период,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_ТаблицаПериоды.Период),
			|	ЛОЖЬ,
			|	ДАТАВРЕМЯ(3000, 1, 1, 0, 0, 0)
			|ИЗ
			|	ВТ_ТаблицаПериоды КАК ВТ_ТаблицаПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
			|		ПО (ТаблицаПериодов.Ссылка = ВТ_ТаблицаПериоды.Период)
			|ГДЕ
			|	ТаблицаПериодов.Ссылка ЕСТЬ NULL
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаНачала";
		Запрос.УстановитьПараметр("Периодичность", Периодичность);
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		Запрос.УстановитьПараметр("ТаблицаПериоды", ТаблицаПериоды);
		РезультатЗапроса = Запрос.Выполнить();
		флНоваяТаблица = НЕ РезультатЗапроса.Пустой();
	Иначе
		флНоваяТаблица = Ложь;
	КонецЕсли;
	Если флНоваяТаблица = Ложь Тогда
		Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
			СтрокаПериода.Активная = Ложь;
			СтрокаПериода.НомерКолонки = -1;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	ТаблицаПериоды = РезультатЗапроса.Выгрузить();
	ТаблицаПериоды.Колонки.Удалить("ДатаНачала");
	ТекущийПериод = 1;
	Для Каждого Строка_ Из ТаблицаПериоды Цикл
		Если Строка_.Активная Тогда
			Если Строка_.ИмяКолонки = "" Тогда
				Строка_.ИмяКолонки = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
			КонецЕсли;
			Строка_.НомерКолонки = ТекущийПериод;
			ТекущийПериод = ТекущийПериод + 1;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Количество"
// 
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, групприровать ли с полем картинки комментария
//  ЕстьЗаголовок				 - Булево		 - Флаг определяет, есть ли заголовок у поля
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыКоличество(
									ПараметрыВывода,
									СоздаватьЭлемент = Истина, 
									ЕстьПрефиксГруппыКомментария = Ложь,
									ЕстьЗаголовок = Истина,
									СтруктураДействий = Неопределено,
									ПрефиксИмени="Количество_") Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксИмени);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Число");
	Если ЕстьЗаголовок Тогда
		СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	КонецЕсли;
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Цена"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, групприровать ли с полем картинки комментария
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыЦена(
							ПараметрыВывода,
							СоздаватьЭлемент = Истина, 
							ЕстьПрефиксГруппыКомментария = Ложь, 
							СтруктураДействий = Неопределено,
							ПрефиксИмени="Цена_") Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксИмени);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Цена'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Видимость", Ложь);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Сумма"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыСумма(
						ПараметрыВывода,
						СоздаватьЭлемент = Истина,
						СтруктураДействий = Неопределено,
						ПрефиксИмени="Сумма_") Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксИмени);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Комментарий"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыКомментарий(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Комментарий_");
	СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Комментарий'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("КнопкаВыбора", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("МногострочныйРежим", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Высота", 1);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы 
//
// Параметры:
//	ПараметрыПоля				 - Структура	 - Параметры создания поля
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицы(ПараметрыПоля, ПараметрыВывода, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	Если СтруктураДействий <> Неопределено Тогда
		ПараметрыПоля.Вставить("СтруктураДействий", СтруктураДействий);
	Иначе
		ПараметрыПоля.Вставить("СтруктураДействий", Новый Структура);
	КонецЕсли;
	
	ПараметрыВывода.Поля.Добавить(ПараметрыПоля);

КонецПроцедуры

// Процедура обновляет структуру данных кросс-таблицы плана
//
// Параметры:
//  Форма  				- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//  Параметры  			- Структура - параметры формирования кросс-таблицы
//
Процедура ОбновитьСтруктуруВыводаКроссТаблицы(Форма, Параметры) Экспорт
	ИмяРеквизитаКроссТаблицы = Параметры.ИмяРеквизитаКроссТаблицы;
	ЭлементФормыКроссТаблицы = Параметры.ЭлементФормыКроссТаблицы;
	ТаблицаДанныхКолонок = Форма[Параметры.ИмяТаблицыДанныхКолонок];
	Поля = Параметры.Поля;
	
	Если Параметры.Свойство("ВыводитьПредыдущийПериод") Тогда
		ВыводитьПредыдущийПериод = Параметры.ВыводитьПредыдущийПериод;
	Иначе
		ВыводитьПредыдущийПериод = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("СоздаватьОбщуюГруппу") Тогда
		СоздаватьОбщуюГруппу = Параметры.СоздаватьОбщуюГруппу;
	Иначе
		СоздаватьОбщуюГруппу = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("ОтображатьОбщуюГруппуВШапке") Тогда
		ОтображатьОбщуюГруппуВШапке = Параметры.ОтображатьОбщуюГруппуВШапке;
	Иначе
		ОтображатьОбщуюГруппуВШапке = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("СоздаватьГруппуПериода") Тогда
		СоздаватьГруппуПериода = Параметры.СоздаватьГруппуПериода;
		Если Параметры.Свойство("СвойстваГруппыПериода") И ТипЗнч(Параметры.СвойстваГруппыПериода) = Тип("Структура") Тогда
			СвойстваГруппыПериода = Параметры.СвойстваГруппыПериода;
		КонецЕсли;
	Иначе
		СоздаватьГруппуПериода = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("ЗаголовокПоляГруппировки") Тогда
		ЗаголовокПоляГруппировки = Параметры.ЗаголовокПоляГруппировки;
	Иначе
		ЗаголовокПоляГруппировки = "";
	КонецЕсли;
	Если Параметры.Свойство("ГруппировкаКолонокПериода") Тогда
		ГруппировкаКолонокПериода = ГруппировкаКолонок[Параметры.ГруппировкаКолонокПериода];
	Иначе
		ГруппировкаКолонокПериода = ГруппировкаКолонок.Горизонтальная;
	КонецЕсли;
	ИмяПоляТерминатора = "КолонкаТерминатор";
	Если Параметры.Свойство("ДобавитьКолонкуТерминатор") Тогда
		ДобавитьКолонкуТерминатор = Параметры.ДобавитьКолонкуТерминатор;
	Иначе
		ДобавитьКолонкуТерминатор = Ложь;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	РеквизитыТаблицыПлана = Форма.ПолучитьРеквизиты(ИмяРеквизитаКроссТаблицы);
	РеквизитыВерхнегоУровня = Форма.ПолучитьРеквизиты();
	
	Для каждого СтруктураПоля Из Поля Цикл
		
		Если СтруктураПоля.Свойство("СоздаватьРеквизит") Тогда
			СоздаватьРеквизит = СтруктураПоля.СоздаватьРеквизит;
		Иначе
			СоздаватьРеквизит = Истина;
		КонецЕсли;
		Если НЕ СоздаватьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
		Если СтруктураПоля.Свойство("УдалятьРеквизитыТаблицы") Тогда
			УдалятьРеквизитыТаблицы = СтруктураПоля.УдалятьРеквизитыТаблицы;
		Иначе
			УдалятьРеквизитыТаблицы = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("ТипЭлемента") Тогда
			ТипЭлемента = СтруктураПоля.ТипЭлемента;
		Иначе
			ТипЭлемента = "Число";
		КонецЕсли;
		Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
			СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
		Иначе
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("РасширенныйФорматЧислаДаты") Тогда
			РасширенныйФорматЧислаДаты = СтруктураПоля.РасширенныйФорматЧислаДаты;
		Иначе
			РасширенныйФорматЧислаДаты = Ложь;
		КонецЕсли;
				
		Если СоздаватьИтоговыеРеквизиты И ТипЭлемента <> "Число" И ТипЗнч(ТипЭлемента) <> Тип("ОписаниеТипов") Тогда
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТипЭлемента) = Тип("ОписаниеТипов") Тогда
			ОписаниеТипов = ТипЭлемента;
		ИначеЕсли ТипЭлемента = "Булево" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ИначеЕсли ТипЭлемента = "Дата" Тогда
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
			Иначе
				ОписаниеТипов = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
			КонецЕсли;
		Иначе
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 5);
			Иначе
				ОписаниеТипов = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 3); 
			КонецЕсли; 
			
		КонецЕсли;
		
		// Удаление реквизитов
		Если УдалятьРеквизитыТаблицы Тогда
			Для Каждого Реквизит Из РеквизитыТаблицыПлана Цикл
				Если СтрНайти(Реквизит.Имя, ПрефиксРеквизитаКолонки) Тогда
					УдаляемыеРеквизиты.Добавить(ИмяРеквизитаКроссТаблицы+"." + Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Создание реквизитов  таблицы
		Для каждого СтрокаПериода Из ТаблицаДанныхКолонок Цикл
			
			Если НЕ СтрокаПериода.Активная Тогда
				Продолжить;
			КонецЕсли; 
			
			РеквизитСуществует = Ложь;
			Для Каждого Реквизит Из РеквизитыТаблицыПлана Цикл
				Если Реквизит.Имя = ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки Тогда
					РеквизитСуществует = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если РеквизитСуществует Тогда
				Продолжить;
			КонецЕсли; 
			
			Реквизит = Новый РеквизитФормы(ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ОписаниеТипов, ИмяРеквизитаКроссТаблицы, 
				СтрокаПериода.Заголовок);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЦикла;
		
		// Создаем итоговые реквизиты 
		Если СоздаватьИтоговыеРеквизиты Тогда
			Для каждого СтрокаПериода Из ТаблицаДанныхКолонок Цикл
				Если НЕ СтрокаПериода.Активная Тогда
					Продолжить;
				КонецЕсли; 
				
				РеквизитСуществует = Ложь;
				Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
					Если Реквизит.Имя = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки,".","_") Тогда
						РеквизитСуществует = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если РеквизитСуществует Тогда
					Продолжить;
				КонецЕсли; 
				
				ПрефиксРеквизита = НСтр("ru='Итого'");
				
				Реквизит = Новый РеквизитФормы(СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки,".","_"), ОписаниеТипов, 
					, ПрефиксРеквизита + " " + СтрокаПериода.Заголовок);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДобавитьКолонкуТерминатор Тогда
		Если УдалятьРеквизитыТаблицы Тогда
			Для Каждого Реквизит Из РеквизитыВерхнегоУровня Цикл
				Если СтрНайти(Реквизит.Имя, ИмяПоляТерминатора) Тогда
					УдаляемыеРеквизиты.Добавить(ИмяРеквизитаКроссТаблицы+"."+Реквизит.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		Реквизит = Новый РеквизитФормы(ИмяПоляТерминатора, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1), ИмяРеквизитаКроссТаблицы, "");
		ДобавляемыеРеквизиты.Добавить(Реквизит);
	КонецЕсли;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Удаление элементов формы
	УдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекЭлемент Из Форма.Элементы[ЭлементФормыКроссТаблицы].ПодчиненныеЭлементы Цикл
		
		Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "ГруппаРеквизитов") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		Если ДобавитьКолонкуТерминатор И СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + ИмяПоляТерминатора) Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		
		ЭлементНайден = Ложь;
		Для каждого СтрокаПериода Из ТаблицаДанныхКолонок Цикл
			Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки) Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭлементНайден Тогда
			Продолжить;
		КонецЕсли; 
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтрНайти(ТекЭлемент.Имя, ПрефиксРеквизитаКолонки) > 0  Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Если СоздаватьОбщуюГруппу Тогда
		НайденныеСтроки = ТаблицаДанныхКолонок.НайтиСтроки(Новый Структура("Активная", Истина));
		Если НайденныеСтроки.Количество() > 1 Тогда
			ЭлементФормы = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + "ГруппаРеквизитов", Тип("ГруппаФормы"), 
				Форма.Элементы[ЭлементФормыКроссТаблицы]);
			ЭлементФормы.Группировка      = ГруппировкаКолонок.Горизонтальная;
			ЭлементФормы.ОтображатьВШапке = ОтображатьОбщуюГруппуВШапке;
			ЭлементФормы.Заголовок        = ЗаголовокПоляГруппировки;
			
			ОсновнойКонтейнер = ЭлементФормы;
		Иначе
			ОсновнойКонтейнер = Форма.Элементы[ЭлементФормыКроссТаблицы];
		КонецЕсли;
	Иначе
		ОсновнойКонтейнер = Форма.Элементы[ЭлементФормыКроссТаблицы];
	КонецЕсли; 
	
	Для каждого СтрокаПериода Из ТаблицаДанныхКолонок Цикл
		Если НЕ СтрокаПериода.Активная Тогда
			Продолжить;
		КонецЕсли; 
		
		ЭлементДляПодвала = Неопределено;
		
		Если СоздаватьГруппуПериода Тогда
			НайденныеСтроки = ТаблицаДанныхКолонок.НайтиСтроки(Новый Структура("Активная", Истина));
			Если НайденныеСтроки.Количество() >= 1 Тогда
				ЭлементФормы = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки, Тип("ГруппаФормы"), 
					ОсновнойКонтейнер);
					
				ЭлементФормы.Группировка      = ГруппировкаКолонокПериода;
				ЭлементФормы.ОтображатьВШапке = Истина;
				ЭлементФормы.Заголовок        = СтрокаПериода.Заголовок;
				
				Если ЗначениеЗаполнено(СвойстваГруппыПериода) Тогда
					ЗаполнитьЗначенияСвойств(ЭлементФормы, СвойстваГруппыПериода);
				КонеЦЕсли;
				
				ВладелецПоля = ЭлементФормы;
			Иначе
				ВладелецПоля = Форма.Элементы[ЭлементФормыКроссТаблицы];
			КонецЕсли;
		КонецЕсли;
		
		Для каждого СтруктураПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
			Если СтруктураПоля.Свойство("СоздаватьЭлемент") Тогда
				СоздаватьЭлемент = СтруктураПоля.СоздаватьЭлемент;
			Иначе
				СоздаватьЭлемент = Истина;
			КонецЕсли;
			Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
				СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
			Иначе
				СоздаватьИтоговыеРеквизиты = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе") Тогда
				ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = СтруктураПоля.ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе;
			Иначе
				ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПоказыватьИтоговыеРеквизитыВГруппе") Тогда
				ПоказыватьИтоговыеРеквизитыВГруппе = СтруктураПоля.ПоказыватьИтоговыеРеквизитыВГруппе;
			Иначе
				ПоказыватьИтоговыеРеквизитыВГруппе = Ложь;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ШиринаЭлемента") Тогда
				ШиринаЭлемента = СтруктураПоля.ШиринаЭлемента;
			Иначе
				ШиринаЭлемента = 6;
			КонецЕсли;
			Если СтруктураПоля.Свойство("СтруктураДействий") Тогда
				СтруктураДействий = СтруктураПоля.СтруктураДействий;
			Иначе
				СтруктураДействий = Новый Структура();
			КонецЕсли;
			Если СтруктураПоля.Свойство("ТипЭлементаФормы") Тогда
				ТипЭлементаФормы = СтруктураПоля.ТипЭлементаФормы;
			Иначе
				ТипЭлементаФормы = Тип("ПолеФормы");
			КонецЕсли;
			Если СтруктураПоля.Свойство("ВидПоля") Тогда
				ВидПоля = СтруктураПоля.ВидПоля;
			Иначе
				ВидПоля = ВидПоляФормы.ПолеВвода;
			КонецЕсли;
			Если СтруктураПоля.Свойство("ПрефиксГруппы") Тогда
				РодительЭлемента = Форма.Элементы[ЭлементФормыКроссТаблицы + СтруктураПоля.ПрефиксГруппы + СтрокаПериода.ИмяКолонки];
			Иначе
				РодительЭлемента = ВладелецПоля;
			КонецЕсли;
			
			Если СоздаватьЭлемент Тогда
				// Перепривязываем данные
				// Создание элементов формы
				Элемент = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, 
					ТипЭлементаФормы, РодительЭлемента);
				Элемент.Вид = ВидПоля;
				Если ТипЭлементаФормы = Тип("ПолеФормы") ИЛИ ТипЭлементаФормы = Тип("ТаблицаФормы") Тогда
					Элемент.ПутьКДанным = ИмяРеквизитаКроссТаблицы+"."+ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
				КонецЕсли;
				Если Элемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
					Элемент.Ширина = ШиринаЭлемента;
				КонецЕсли; 
				Если СтруктураПоля.Свойство("Заголовок") Тогда
					Элемент.Заголовок = СтруктураПоля.Заголовок;
				КонецЕсли; 
				Если СтруктураПоля.Свойство("СвойстваЭлемента") И ТипЗнч(СтруктураПоля.СвойстваЭлемента) = Тип("Структура") Тогда
					ЗаполнитьЗначенияСвойств(Элемент, СтруктураПоля.СвойстваЭлемента);
				КонецЕсли; 
				Для каждого Действие Из СтруктураДействий Цикл
					Элемент.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла;
				ЭлементДляПодвала = Элемент;
			КонецЕсли;
			
			Если СоздаватьИтоговыеРеквизиты 
				И (СоздаватьЭлемент 
					ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе 
					ИЛИ ПоказыватьИтоговыеРеквизитыВГруппе) Тогда
				Если (СоздаватьЭлемент ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе) И ЭлементДляПодвала <> Неопределено Тогда
					ЭлементДляПодвала.ПутьКДаннымПодвала = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
				КонецЕсли;
				
				Если ПоказыватьИтоговыеРеквизитыВГруппе 
					И СоздаватьГруппуПериода 
					И ВладелецПоля <> Неопределено 
					И ТипЗнч(ВладелецПоля) = Тип("ГруппаФормы") 
					И ВладелецПоля.ОтображатьВШапке Тогда
					Если НЕ ПустаяСтрока(ВладелецПоля.Заголовок) Тогда
						ВладелецПоля.Заголовок = ВладелецПоля.Заголовок + ": ";
					КонецЕсли; 
					ВладелецПоля.ПутьКДаннымШапки = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
					ВладелецПоля.ФорматШапки = "ЧДЦ=2; ЧН=0,00";
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДобавитьКолонкуТерминатор Тогда
		Элемент = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + ИмяПоляТерминатора, Тип("ПолеФормы"), Форма.Элементы[ЭлементФормыКроссТаблицы]);
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным = ИмяРеквизитаКроссТаблицы+"."+ИмяПоляТерминатора;
		Элемент.Ширина = 1;
		Элемент.Заголовок = "";
		Элемент.ОтображатьВШапке = Ложь;
		Элемент.ОтображатьВПодвале = Ложь;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПропускатьПриВводе = Истина;
		Элемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	КонецЕсли;
	
КонецПроцедуры

// Установить свойства элементов кросс таблицы.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - коллекция элементов формы.
//  Периоды - ТаблицаЗначений - таблица периодов. См. функцию
//				ЦентрализованныеЗакупкиУХ.ЗаполнитьТаблицуПериодов().
//  ИменаСвойствТаблицы - Строка - Имена реквизитов кросс-таблицы
//				расшифрованных по периодам. Разделитель запятая.
//  ЗначенияСвойствЭлемента - Структура - имена реквизитов элемента
//				формы и значения для установки.
//
Процедура УстановитьСвойстваЭлементовКроссТаблицы(ЭлементыФормы, Периоды,
						ИменаСвойствТаблицы, ЗначенияСвойствЭлемента) Экспорт
	мИменСвойств = СтрРазделить(ИменаСвойствТаблицы, ",");
	АктивныеПериоды = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	Для Каждого ИмяСвойства Из мИменСвойств Цикл
		ИмяСвойства = СокрЛП(ИмяСвойства);
		Для каждого Период Из АктивныеПериоды Цикл
			Элемент = ЭлементыФормы["ПотребностиВНоменклатуре" + ИмяСвойства + "_" + Период.ИмяКолонки];
			ЗаполнитьЗначенияСвойств(Элемент, ЗначенияСвойствЭлемента);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ДозаполнитьТаблицуПотребностейИзРезультатаЗапроса(
										КроссТаблица,
										РезультатЗапроса,
										ИменаКлючевыхПолей,
										Процент = Ложь) Экспорт
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НомерСтроки = КроссТаблица.Количество();
		// продолжаем заполнение полей периода пока не изменится
		// хотя бы одно значение поля группировки.
		ЗначенияПолейГруппировки =
			Новый Структура(
				ИменаКлючевыхПолей);
		ВыборкаДетальныеЗаписи =
			РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ИмяКолонки = ВыборкаДетальныеЗаписи.ИмяКолонки;
			Если НЕ ЗначениеЗаполнено(ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			// Проверяем, что это новая строка кросс-таблицы,
			// или это новое значение периода созданной
			// на предыдущих шагах строки
			флНоваяСтрока = Ложь;
			Если ВыборкаДетальныеЗаписи.НомерСтроки > 0 Тогда
				// Получаем существующую строку кросс-таблицы
				// и обновляем итоги по величине измененения.
				НоваяСтрока = КроссТаблица[
								ВыборкаДетальныеЗаписи.НомерСтроки-1];
				НоваяСтрока.Сумма = НоваяСтрока.Сумма
					- НоваяСтрока["Сумма_" + ИмяКолонки];
				НоваяСтрока.Количество = НоваяСтрока.Количество
					- НоваяСтрока["Количество_" + ИмяКолонки];
			Иначе
				Для Каждого Пара_ Из ЗначенияПолейГруппировки Цикл
					Если Пара_.Значение <> ВыборкаДетальныеЗаписи[Пара_.Ключ] Тогда
						флНоваяСтрока = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если флНоваяСтрока Тогда
				НомерСтроки = НомерСтроки + 1;
				НоваяСтрока = КроссТаблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
				ЗаполнитьЗначенияСвойств(ЗначенияПолейГруппировки, ВыборкаДетальныеЗаписи);
				НоваяСтрока.НомерСтроки = НомерСтроки;
			Иначе
				// итоговое значение суммы и кол-ва по периодам
				НоваяСтрока.Сумма = НоваяСтрока.Сумма
					+ ВыборкаДетальныеЗаписи.Сумма;
				НоваяСтрока.Количество = НоваяСтрока.Количество
					+ ВыборкаДетальныеЗаписи.Количество;
			КонецЕсли;
			// заполняем значение колонок периода
			НоваяСтрока["Цена_" + ИмяКолонки] = ВыборкаДетальныеЗаписи.Цена;
			Если Процент Тогда	
				НоваяСтрока["Процент_" + ИмяКолонки] = ВыборкаДетальныеЗаписи.Процент;
			КонецЕсли;				
			НоваяСтрока["Количество_" + ИмяКолонки] =
				ВыборкаДетальныеЗаписи.Количество;
			НоваяСтрока["Сумма_" + ИмяКолонки] = ВыборкаДетальныеЗаписи.Сумма;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Запрещено вызывать из контекста формы.
// Используйте функцию ИнициализироватьКроссТаблицуПотребностей
// данного модуля.
//
Процедура СоздатьКонтекстКроссТаблицыДляФормы(
										Форма, 
										ИмяРеквизитаКонтекста, 
										Контекст) 
	РеквизитСуществует = 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, 
			ИмяРеквизитаКонтекста);
	Если НЕ РеквизитСуществует Тогда
		ДобавляемыеРеквизиты = Новый Массив();
		Реквизит = Новый РеквизитФормы(ИмяРеквизитаКонтекста, 
			Новый ОписаниеТипов());
		ДобавляемыеРеквизиты.Добавить(Реквизит);
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	Форма[ИмяРеквизитаКонтекста] = Контекст;
КонецПроцедуры

// Можно создать несколько кросс-таблиц на форме для этого
// нужно задавать различные имена реквизита контекста формы.
//
Процедура ИнициализироватьКроссТаблицуПотребностей(
							Форма, 
							ИмяРеквизитаКонтекста,
							Контекст) Экспорт
	СоздатьКонтекстКроссТаблицыДляФормы(
		Форма, 
		ИмяРеквизитаКонтекста, 
		Контекст);
	СоздатьТаблицуПериодов(Форма, Контекст.ИмяТаблицыПериодов);
	ОбновитьКроссТаблицуПотребностей(
		Форма,
		Контекст);
	УстановитьТиповоеУсловноеОформлениеКроссТаблицы(
		Форма.УсловноеОформление,
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы,
		Форма[Контекст.ИмяТаблицыПериодов]);
	Форма.УстановитьУсловноеОформлениеКроссТаблицы(Контекст);
КонецПроцедуры

Процедура ОбновитьКроссТаблицуПотребностей(Форма, Контекст) Экспорт
	ОбновитьИзменяемыйКонтекстКроссТаблицыПотребностей(Форма, Контекст);
	ОбновитьСтруктуруТаблицыПотребностей(
		Форма,
		Контекст);
	УстановитьТиповоеУсловноеОформлениеКроссТаблицы(
		Форма.УсловноеОформление,
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы,
		Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы,
		Форма[Контекст.ИмяТаблицыПериодов]);
	Форма.СкопироватьВКроссТаблицу(Контекст);
КонецПроцедуры

Процедура ОбновитьСтруктуруТаблицыПотребностей(Форма, Контекст) Экспорт
	ЦентрализованныеЗакупкиУХ.ОбновитьТаблицуПериодовФормы(
		Форма, 
		Контекст.ИмяТаблицыПериодов, 
		Контекст.Изменяемый.Объект.ДатаНачала, 
		Контекст.Изменяемый.Объект.ДатаОкончания,
		Контекст.Изменяемый.Объект.Периодичность);
	ЦентрализованныеЗакупкиУХ.ОбновитьСтруктуруВыводаКроссТаблицы(
		Форма, 
		Контекст.ПараметрыВывода);
КонецПроцедуры

Процедура ТиповоеЗаполнениеОбъектаДляКроссТаблицыПотребностей(
									ОбъектИсточник,
									ОбъектДляЗаполнения) Экспорт
	ОбъектДляЗаполнения.Периодичность =
		ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок();								
	ЗаполнитьЗначенияСвойств(ОбъектДляЗаполнения, ОбъектИсточник);
	ОбъектДляЗаполнения.ДатаНачала = ОбъектИсточник.ПериодЗакупок.ДатаНачала;
	ОбъектДляЗаполнения.ДатаОкончания = ОбъектИсточник.ПериодЗакупок.ДатаОкончания;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = ОбъектИсточник.Дата;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектДляЗаполнения.ДатаКурса) Тогда
		ОбъектДляЗаполнения.ДатаКурса = ТекущаяДатаСеанса();
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьИзменяемыйКонтекстКроссТаблицыПотребностей(
														Форма, 
														Контекст)
	Контекст.Изменяемый.Объект = 
		ПолучитьТиповойОбъектКроссТаблицыПотребностей();
	Форма.ЗаполнитьОбъектДляКроссТаблицыПотребностей(
		Контекст,
		Контекст.Изменяемый.Объект);
КонецПроцедуры
	
Процедура УстановитьТиповоеУсловноеОформлениеКроссТаблицы(
									УсловноеОформление,
									ИмяЭлементаКроссТаблицы,
									ИмяКроссТаблицы,
									ТаблицаПериодов)
	УстановитьТиповоеУсловноеОформлениеХарактеристики(
		УсловноеОформление,
		ИмяЭлементаКроссТаблицы + "Характеристика",
		ИмяКроссТаблицы + ".ХарактеристикиИспользуются");
	УстановитьТиповоеУсловноеОформлениеКоличественныхПоказателей(
		УсловноеОформление,
		ИмяЭлементаКроссТаблицы,
		ИмяКроссТаблицы,
		ТаблицаПериодов);
	УстановитьТиповоеУсловноеОформлениеСуммыПоПериодам(
		УсловноеОформление,
		ИмяЭлементаКроссТаблицы,
		ИмяКроссТаблицы,
		ТаблицаПериодов);
КонецПроцедуры

Процедура УстановитьТиповоеУсловноеОформлениеХарактеристики(
									УсловноеОформление,
									ИмяПоляХарактеристики,
									ИмяПоляХарактеристикиИспользуются) Экспорт
	МокЭлементыФормы = Новый Структура;
	МокЭлементыФормы.Вставить(
		ИмяПоляХарактеристики,
		Новый Структура("Имя", ИмяПоляХарактеристики));
	МокФорма = Новый Структура;
	МокФорма.Вставить("УсловноеОформление", УсловноеОформление);
	МокФорма.Вставить("Элементы", МокЭлементыФормы);
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		МокФорма,
		ИмяПоляХарактеристики,
		ИмяПоляХарактеристикиИспользуются);	
КонецПроцедуры

Процедура УстановитьТиповоеУсловноеОформлениеКоличественныхПоказателей(
									УсловноеОформление,
									ИмяЭлементаКроссТаблицы,
									ИмяКроссТаблицы,
									ТаблицаПериодов)
	Элемент = УсловноеОформление.Элементы.Добавить();
		ДобавитьПолеУО(
			Элемент, 
			ИмяЭлементаКроссТаблицы + "ЕдиницаИзмерения");
		ДобавитьПолеУО(
			Элемент, 
			ИмяЭлементаКроссТаблицы + "Цена");
		ДобавитьКолонкиДляОформленияПоПериодам(
			ТаблицаПериодов,
			Элемент,
			ИмяЭлементаКроссТаблицы + "Количество_");
		ДобавитьКолонкиДляОформленияПоПериодам(
			ТаблицаПериодов,
			Элемент,
			ИмяЭлементаКроссТаблицы + "Цена_");
		ДобавитьОтборЭлементаУО(
			Элемент,
			ИмяКроссТаблицы + ".ЭтоКатегорияНоменклатуры",
			Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры
	
Процедура УстановитьТиповоеУсловноеОформлениеСуммыПоПериодам(
									УсловноеОформление,
									ИмяЭлементаКроссТаблицы,
									ИмяКроссТаблицы,
									ТаблицаПериодов) Экспорт
	Элемент = УсловноеОформление.Элементы.Добавить();
		ДобавитьКолонкиДляОформленияПоПериодам(
			ТаблицаПериодов,
			Элемент,
			ИмяЭлементаКроссТаблицы + "Сумма_");
		ДобавитьОтборЭлементаУО(
			Элемент,
			ИмяКроссТаблицы + ".ЭтоКатегорияНоменклатуры",
			Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
КонецПроцедуры
	
Функция ДобавитьКолонкиДляОформленияПоПериодам(
									ТаблицаПериодов, 
									ЭлементОУ, 
									ПрефиксИмениЭлемента) Экспорт
	АктивныеПериоды = ТаблицаПериодов.НайтиСтроки(
		Новый Структура("Активная", Истина));
	Для каждого Период Из АктивныеПериоды Цикл
		ДобавитьПолеУО(
			ЭлементОУ, 
			ПрефиксИмениЭлемента + Период.ИмяКолонки);
	КонецЦикла;
КонецФункции

Функция ДобавитьПолеУО(ЭлементУО, ИмяПоля) Экспорт
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(
		ЭлементУО.Поля,
		ИмяПоля);
КонецФункции

Функция ДобавитьОтборЭлементаУО(ЭлементУО, 
								ЛевоеЗначение, 
								ПравоеЗначение, 
								Сравнение=Неопределено) Экспорт
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(
			Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	Если Сравнение = Неопределено Тогда
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Иначе
		ОтборЭлемента.ВидСравнения = Сравнение;
	КонецЕсли;
	ОтборЭлемента.ПравоеЗначение = ПравоеЗначение;
	Возврат ОтборЭлемента;
КонецФункции

// Структура представляющая реквизиты объекта влияющие
// на кросс таблицу потребностей.
//
Функция ПолучитьТиповойОбъектКроссТаблицыПотребностей()
	Объект = НовыЙ Структура;
	Объект.Вставить(
		"Периодичность", 
		Перечисления.Периодичность.ПустаяСсылка());
	Объект.Вставить(
		"ВалютаДокумента",
		Справочники.Валюты.ПустаяСсылка());
	Объект.Вставить("ЦенаВключаетНДС", Истина);
	Объект.Вставить("ДатаКурса", '00010101000000');
	Объект.Вставить("ДатаНачала", '00010101000000');
	Объект.Вставить("ДатаОкончания", '00010101000000');
	Возврат Объект;
КонецФункции

// Возвращает фиксированную структуру с типовым контекстом
//  кросс таблицы потребностей.
//
// Параметры:
//  ИмяТаблицыПериодов - Строка - имя реквизита формы с периодами.
//  ИмяРеквизитаКроссТаблицы - Строка - имя реквизита формы
//								с кросс-таблицей потребностей.
//  ИмяЭлементаФормыКроссТаблицы - Строка - имя элемента формы кросс-таблицы.
//  ИменаКлючевыхПолейКроссТаблицы - Строка - имена ключевых полей
//										кросс-таблицы через запятую.
// 
// Возвращаемое значение:
//   - ФиксированнаяСтруктура:
//		- ПараметрыВывода - Структура - описывает структуру кросс-таблицы.
//		- ИмяТаблицыПериодов - Строка - хранит значение соответствующего аргумента функции.
//		- ИменаКлючевыхПолейКроссТаблицы - Строка - хранит значение 
//										соответствующего аргумента функции.
//		- Изменяемый - Структура - изменяемые поля объекта и формы для обработки
//				в функциях кросс-таблицы потребностей. Обновляется в момент вызова функции
//				ОбновитьКроссТаблицуПотребностей(). Требует для обновления экспортной
//				функции формы ЗаполнитьОбъектДляКроссТаблицыПотребностей().
//
Функция ПолучитьТиповойКонтекстКроссТаблицыПотребностей(
									 ИмяТаблицыПериодов, 
 									 ИмяРеквизитаКроссТаблицы,
									 ИмяЭлементаФормыКроссТаблицы,
									 ИменаКлючевыхПолейКроссТаблицы) Экспорт
	Контекст = НовыЙ Структура;
	Контекст.Вставить(
		"ПараметрыВывода",
		Новый ФиксированнаяСтруктура(
			ПолучитьТиповыеПараметрыКрссТаблицыПотребностей(
				ИмяТаблицыПериодов, 
		 		ИмяРеквизитаКроссТаблицы,
				ИмяЭлементаФормыКроссТаблицы)));
	Контекст.Вставить("ИмяТаблицыПериодов", ИмяТаблицыПериодов);
	Контекст.Вставить(
		"ИменаКлючевыхПолейКроссТаблицы", 
		ИменаКлючевыхПолейКроссТаблицы);
	Контекст.Вставить("Изменяемый", Новый Структура);
	Контекст.Изменяемый.Вставить(
		"Объект",
		ПолучитьТиповойОбъектКроссТаблицыПотребностей());
	Возврат Новый ФиксированнаяСтруктура(Контекст);
КонецФункции

Функция ПолучитьТиповыеПараметрыКрссТаблицыПотребностей(
									ИмяТаблицыДанныхКолонок, 
 									ИмяРеквизитаКроссТаблицы,
									ЭлементФормыКроссТаблицы) Экспорт
	ПараметрыВывода = Новый Структура;
	ПараметрыВывода.Вставить("ИмяРеквизитаКроссТаблицы", ИмяРеквизитаКроссТаблицы);
	ПараметрыВывода.Вставить("ЭлементФормыКроссТаблицы", ЭлементФормыКроссТаблицы);
	ПараметрыВывода.Вставить("ИмяТаблицыДанныхКолонок", ИмяТаблицыДанныхКолонок);
	ПараметрыВывода.Вставить("СоздаватьОбщуюГруппу", Истина);
	ПараметрыВывода.Вставить("СоздаватьГруппуПериода", Истина);
	ПараметрыВывода.Вставить("ОтображатьОбщуюГруппуВШапке", Ложь);
	ПараметрыВывода.Вставить("ГруппировкаКолонокПериода", "Вертикальная");
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииКоличества");
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицыКоличество(
		ПараметрыВывода, Истина, Ложь, Истина, СтруктураДействий);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииЦены");
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицыЦена(
		ПараметрыВывода, Истина, Ложь, СтруктураДействий);
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПриИзменении", "Подключаемый_ПриИзмененииСуммы");
	ЦентрализованныеЗакупкиУХ.ДобавитьПолеКроссТаблицыСумма(
		ПараметрыВывода, Истина, СтруктураДействий);
	Возврат ПараметрыВывода;
КонецФункции

Процедура ПересчитатьКроссТаблицуИзВалютыВВалюту(ТаблицаНоменклатуры, 
												ПериодыЗакупок, 
												СтараяЦенаВключаетНДС,
												НоваяЦенаВключаетНДС,
												СтараяВалюта, 
												НоваяВалюта,
												СтараяДатаКурса,
												НоваяДатаКурса) Экспорт
	ТекущийКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(СтараяВалюта, СтараяДатаКурса);
	НовыйКурс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(НоваяВалюта, НоваяДатаКурса);
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		СтрокаТаблицы.Цена = 
			РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
				СтрокаТаблицы.Цена,
				ТекущийКурс,
				НовыйКурс);
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
			НоваяЦенаВключаетНДС,
			ПериодыЗакупок,
			СтрокаТаблицы);
	КонецЦикла;
КонецПроцедуры

Процедура ПересчитатьНДСКроссТаблицы(ТаблицаНоменклатуры, 
									 ПериодыЗакупок, 
									 СтарыйЦенаВключаетНДС,
									 НовыйЦенаВключаетНДС) Экспорт
	Для Каждого СтрокаТаблицы Из ТаблицаНоменклатуры Цикл
		СуммаДляРасчетаЦены = СтрокаТаблицы.Сумма
			- ?(НовыйЦенаВключаетНДС, 0, СтрокаТаблицы.СуммаНДС);
		СтрокаТаблицы.Цена = СуммаДляРасчетаЦены 
			/ ?(СтрокаТаблицы.Количество = 0, 1, СтрокаТаблицы.Количество);
		ЦентрализованныеЗакупкиКлиентСерверУХ.УстановитьЦенуПоПериодамСтроки(
			ПериодыЗакупок,
			СтрокаТаблицы,
			СтрокаТаблицы.Цена);
	КонецЦикла;
КонецПроцедуры

Функция ТиповойОбработчикПриИзмененииВалютыДокумента(Форма, Контекст) Экспорт
	СтарыйОбъект = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		Контекст.Изменяемый.Объект);
	ОбновитьИзменяемыйКонтекстКроссТаблицыПотребностей(
			Форма, 
			Контекст);
	НовыйОбъект = Контекст.Изменяемый.Объект;
	флКонтекстИзменен = НЕ ОбщегоНазначенияКлиентСерверУХ.СтруктурыРавны(
		СтарыйОбъект, 
		НовыйОбъект);
	Если флКонтекстИзменен Тогда
		ПересчитатьКроссТаблицуИзВалютыВВалюту(
			Форма[Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
			Форма[Контекст.ИмяТаблицыПериодов],
			СтарыйОбъект.ЦенаВключаетНДС,
			НовыйОбъект.ЦенаВключаетНДС,
			СтарыйОбъект.ВалютаДокумента,
			НовыйОбъект.ВалютаДокумента,
			СтарыйОбъект.ДатаКурса,
			НовыйОбъект.ДатаКурса);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция ТиповойОбработчикПриИзмененииЦенаВключаетНДС(Форма, Контекст) Экспорт
	СтарыйОбъект = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		Контекст.Изменяемый.Объект);
	ОбновитьИзменяемыйКонтекстКроссТаблицыПотребностей(
			Форма, 
			Контекст);
	НовыйОбъект = Контекст.Изменяемый.Объект;
	флКонтекстИзменен = НЕ ОбщегоНазначенияКлиентСерверУХ.СтруктурыРавны(
		СтарыйОбъект, 
		НовыйОбъект);
	Если флКонтекстИзменен Тогда
		ПересчитатьНДСКроссТаблицы(
			Форма[Контекст.ПараметрыВывода.ИмяРеквизитаКроссТаблицы],
			Форма[Контекст.ИмяТаблицыПериодов],
			СтарыйОбъект.ЦенаВключаетНДС,
			НовыйОбъект.ЦенаВключаетНДС);
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции


#КонецОбласти


#Область РаботаСНоменклатурой


Функция МассивНоменклатурыПоТоварнойКатегории(ТоварнаяКатегория) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ТоварнаяКатегория = &ТоварнаяКатегория";
	
	Запрос.УстановитьПараметр("ТоварнаяКатегория", ТоварнаяКатегория);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");

КонецФункции

Функция ПолучитьМассивЕдиницИзмеренияНоменклатуры(
										Номенклатура, 
										Характеристика=Неопределено) Экспорт
	ЗначениеХарактеристики = ?(ЗначениеЗаполнено(Характеристика),
		 Характеристика, 
		 Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Возврат 
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьМассивЕдиницИзмеренияНоменклатуры(
			Номенклатура,
			ЗначениеХарактеристики);
КонецФункции

Функция ПолучитьКоэффициентЕдиницыИзмерения(Номенклатура, 
											ЕдиницаИзмерения, 
											Характеристика=Неопределено) Экспорт
	ЗначениеХарактеристики = ?(ЗначениеЗаполнено(Характеристика),
		 Характеристика, 
		 Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Возврат 
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьКоэффициентЕдиницыИзмерения(
			Номенклатура,
			ЗначениеХарактеристики,
			ЕдиницаИзмерения);
КонецФункции

// Получить множество позиций номенклатуры
Функция ПолучитьМассивНоменклатурыЛота(Лот, ПериодПотребности=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЛотыНоменклатура.Номенклатура КАК Номенклатура
		|ИЗ
		|	Справочник.Лоты.Номенклатура КАК ЛотыНоменклатура
		|ГДЕ
		|	ЛотыНоменклатура.Ссылка = &Лот
		|	И ЛотыНоменклатура.ПериодПотребности = &ПериодПотребности";
	Запрос.УстановитьПараметр("Лот", Лот);
	Если ПериодПотребности = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"И ЛотыНоменклатура.ПериодПотребности = &ПериодПотребности",
			"");
	Иначе
		Запрос.УстановитьПараметр("ПериодПотребности", ПериодПотребности);
	КонеЦЕсли;
	Возврат Запрос
			.Выполнить()
			.Выгрузить(ОбходРезультатаЗапроса.Прямой)
			.ВыгрузитьКолонку(0);
КонецФункции

// Получить множество позиций номенклатуры и всех групп, включающих ее
Функция ПолучитьМассивНоменклатурыИГруппЛота(Лот, ПериодПотребности=Неопределено) Экспорт
	мНоменклатуры = ПолучитьМассивНоменклатурыЛота(
		Лот, 
		ПериодПотребности);
	Возврат ПолучитьМассивНоменклатурыИРодителей(мНоменклатуры);
КонецФункции

// Получить множество позиций номенклатуры всех лотов закупочной процедуры
Функция ПолучитьМассивНоменклатурыЗакупки(
									ЗакупочнаяПроцедура,
									ПериодПотребности=Неопределено) Экспорт
	мНоменклатуры = Новый Массив;
	мЛоты = Справочники.ЗакупочныеПроцедуры.ПолучитьЛотыЗакупочнойПроцедуры(
		ЗакупочнаяПроцедура);
	Для Каждого Лот Из мЛоты Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		    мНоменклатуры,
			ПолучитьМассивНоменклатурыЛота(Лот, ПериодПотребности),
			Истина);
	КонецЦикла;
	Возврат мНоменклатуры;
КонецФункции

// Получить множество позиций номенклатуры и всех групп, включающих ее
Функция ПолучитьМассивНоменклатурыИГруппЗакупки(
									ЗакупочнаяПроцедура, 
									ПериодПотребности=Неопределено) Экспорт
	мНоменклатуры = ПолучитьМассивНоменклатурыЗакупки(
		ЗакупочнаяПроцедура,
		ПериодПотребности);
	Возврат ПолучитьМассивНоменклатурыИРодителей(мНоменклатуры);
КонецФункции

// Для переданного массива элементов справочника Номенклатура ищем всх родителей,
// и возвращаем объединение исходного массива и массива родителей.
Функция ПолучитьМассивНоменклатурыИРодителей(мНоменклатуры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&мНоменклатуры)
		|ИТОГИ ПО
		|	Ссылка ТОЛЬКО ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("мНоменклатуры", мНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку(0);
КонецФункции

// Для переданного массива элементов справочника Номенклатура ищем всх родителей,
// и возвращаем объединение исходного массива и массива родителей.
Функция ПолучитьМассивПодчиненныхГрупп(мНоменклатуры) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В ИЕРАРХИИ(&мНоменклатуры)
		|	И Номенклатура.ЭтоГруппа";
	
	Запрос.УстановитьПараметр("мНоменклатуры", мНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку(0);
КонецФункции

// Обертка над Ценообразование.ПолучитьЦенуНоменклатуры.
// Предварительно получает курс и кратность валюты.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, Характеристика, ТипЦен, Дата, Валюта) Экспорт
	Возврат УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьЦенуНоменклатуры(
		Номенклатура,
		Характеристика,
		ТипЦен,
		Дата,
		Валюта);
КонецФункции
			
			
#КонецОбласти


#Область РаботаСЛотами


Функция ПолучитьМассивПоставщиковЛота(Лот) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПланПоставокПоДоговорам.ДоговорСПокупателем.Владелец КАК Поставщик
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорам
		|ГДЕ
		|	ПланПоставокПоДоговорам.Лот = &Лот";
	Запрос.УстановитьПараметр("Лот", Лот);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Поставщик");
КонецФункции

Функция ПолучитьМаксимальныйНомерГПЗ(ПериодЗакупок,
										Организация, 
										Инновационный) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация) 
			И НЕ ЗначениеЗаполнено(ПериодЗакупок) Тогда
		Возврат 0;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(МАКСИМУМ(НомераЛотовВГПЗ.Номер), 0) КАК Номер
		|ИЗ
		|	РегистрСведений.НомераЛотовВГПЗ КАК НомераЛотовВГПЗ
		|ГДЕ
		|	НомераЛотовВГПЗ.ПериодЗакупок = &ПериодЗакупок
		|	И НомераЛотовВГПЗ.Организация = &Организация
		|	И НомераЛотовВГПЗ.ИнновационныйПланЗакупок = &Инновационный";
	Запрос.УстановитьПараметр("ПериодЗакупок", ПериодЗакупок);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Инновационный", Инновационный);
	Возврат Запрос.Выполнить().Выгрузить()[0].Номер;
КонецФункции

Функция ПолучитьНовыйНомерГПЗ(ПериодЗакупок, 
								Организация,
								Инновационный) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация)
			И НЕ ЗначениеЗаполнено(ПериодЗакупок) Тогда
		Возврат Неопределено;
	КонецЕсли;
	НачатьТранзакцию();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераЛотовВГПЗ");
	ЭлементБлокировки.УстановитьЗначение("ПериодЗакупок", ПериодЗакупок);
	ЭлементБлокировки.УстановитьЗначение("Организация", Организация);
	ЭлементБлокировки.УстановитьЗначение("ИнновационныйПланЗакупок", Инновационный);
	Блокировка.Заблокировать();
	Номер = 1 + ЦентрализованныеЗакупкиУХ.ПолучитьМаксимальныйНомерГПЗ(
		ПериодЗакупок, 
		Организация, 
		Инновационный);
	МенеджерЗаписи = РегистрыСведений.НомераЛотовВГПЗ.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ПериодЗакупок = ПериодЗакупок;
	МенеджерЗаписи.Организация = Организация;
	МенеджерЗаписи.ИнновационныйПланЗакупок = Инновационный;
	МенеджерЗаписи.Номер      = Номер;
	МенеджерЗаписи.Записать();
	ЗафиксироватьТранзакцию();
	Возврат Номер;
КонецФункции

// Возвращает пользователей, состоящих в закупочной комиссии данной
// закупочной процедуры.
//
Функция ПолучитьМассивПользователейЗакупочнойКомиссии(ЗакупочнаяПроцедура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Пользователи.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЗакупочныеПроцедуры КАК ЗакупочныеПроцедуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриказОНазначенииЗакупочнойКомиссии.ЗакупочнаяКомиссия КАК ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия
		|		ПО ЗакупочныеПроцедуры.ПриказОНазначенииЗакупочнойКомиссии = ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия.Ссылка
		|			И (ЗакупочныеПроцедуры.Ссылка = &ЗакупочнаяПроцедура)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
		|		ПО (ПриказОНазначенииЗакупочнойКомиссииЗакупочнаяКомиссия.Сотрудник = Пользователи.ФизическоеЛицо)
		|			И (Пользователи.ПометкаУдаления = ЛОЖЬ)";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Проверяет, что указанная строка плана закупок не связана с лотом.
//
// Параметры:
//  СтрокаПланаЗакупок - ДокументСсылка.СтрокаПланаЗакупок
//		- строка для которой проверяем существование лота.
// Возвращает:
//	Булево - Истина - строка свободна, можно создать лот.
//		Ложь - уже есть лот, связанный со строкой лота.
//
Функция СтрокаПланаЗакупокСвободна(СтрокаПланаЗакупок) Экспорт
	ЛотСтроки = 
		Справочники.Лоты.ПолучитьПоСтрокеПланаЗакупок(
			СтрокаПланаЗакупок);
	Возврат НЕ ЗначениеЗаполнено(ЛотСтроки);
КонецФункции


#КонецОбласти


#Область РаботаСДоговорами

// Получить лот в рамках которого введен договор. Если не находит, возвращает пустую ссылку.
Функция ПолучитьЛотДоговора(ДоговорКонтрагента) Экспорт
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ПланПоставокПоДоговорам.Лот КАК Ссылка
			|ИЗ
			|	РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорам
			|ГДЕ
			|	ПланПоставокПоДоговорам.Договор = &ДоговорКонтрагента
			|			И ПланПоставокПоДоговорам.Лот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)";
		
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Возврат ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.Лоты.ПустаяСсылка();
КонецФункции

Функция ПолучитьДоговорПоРеквизитам(Номер, Контрагент, Организация, ЗначенияРеквизитов=Неопределено) Экспорт
	Отбор = Новый Структура;
	Отбор.Вставить("Номер", Номер);
	Отбор.Вставить("Владелец", Контрагент);
	Отбор.Вставить("Организация", Организация);
	Отбор.Вставить("ПометкаУдаления", Ложь);
	Для Каждого ЗначениеРеквизита Из ЗначенияРеквизитов Цикл
		ИмяРеквизита = ЗначениеРеквизита.Ключ;
		Если Отбор.Свойство(ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		Отбор.Вставить(ИмяРеквизита, ЗначениеРеквизита.Значение);
	КонецЦикла;
	мДоговоры = ПолучитьСправочникПоОтбору("ДоговорыКонтрагентов", Отбор);
	Если мДоговоры.Количество() > 0 Тогда
		Возврат мДоговоры[0];
	КонецЕсли;
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
КонецФункции

Функция ПолучитьМассивДоговоровЛота(Лот, Поставщик) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		ЗаменитьВладельцаДоговораВТекстеЗапроса(
			"Договор",
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПланПоставокПоДоговорамОстатки.Договор КАК Договор
			|ИЗ
			|	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(
			|			,
			|			Лот = &Лот
			|				И Договор.Владелец = &Поставщик) КАК ПланПоставокПоДоговорамОстатки");
	Запрос.УстановитьПараметр("Лот", Лот);
	Запрос.УстановитьПараметр("Поставщик", Поставщик);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса
			.Выгрузить()
			.ВыгрузитьКолонку("Договор");
КонецФункции


Функция ПолучитьТаблицуДоговоровСПоставщикамиЛота(Лот) Экспорт
	Возврат 
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьТаблицуДоговоровСПоставщикамиЛота(
			Лот);
КонецФункции

Функция ПолучитьДоговорыСодержащиеЛот(Лот) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|ГДЕ
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Лот = &Лот
		|	И НЕ ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Лот", Лот);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьДоговорыСодержащиеЛотЗакупочнойПроцедуры(
										ЗакупочнаяПроцедура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|ГДЕ
		|	ВерсияСоглашенияКоммерческийДоговорНоменклатура.Лот.Владелец = &ЗакупочнаяПроцедура
		|	И НЕ ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

Функция ПолучитьДатуНачалаДействияДоговора(Договор) Экспорт
	Если Договор <> Неопределено Тогда
		Если ЗначениеЗаполнено(Договор.ДатаНачалаДействия) Тогда
			Возврат Договор.ДатаНачалаДействия;
		КонецЕсли;
		Возврат Договор.Дата;
	КонецЕсли;
	Возврат '00010101';
КонецФункции

Функция ПолучитьДатуПодписанияДоговора(Договор) Экспорт
	Если Договор <> Неопределено Тогда
		Если ЗначениеЗаполнено(Договор.ДатаПодписания) Тогда
			Возврат Договор.ДатаПодписания;
		КонецЕсли;
		Если ЗначениеЗаполнено(Договор.ДоговорКонтрагента) Тогда
			Возврат Договор.ДоговорКонтрагента.Дата;
		Иначе
			Возврат Дата(1, 1, 1);
		КонецЕсли;
	КонецЕсли;
	Возврат '00010101';
КонецФункции


#КонецОбласти


#Область ВерсионированиеОбъектовДляЕИС


// Добавляет новую запись в регистр сведений ВерсииОбъектовДляЕИС. Номер версии увеличивает на единицу.
// Если версий небыло, то номер устанавливаем в единицу.
// Параметры:
//	Ссылка - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ.
//	ОбоснованиеИзменений - Строка(2000). Непустая строка с причиной изменений.
// Возвращает:
//	Число - номер добавленой версии.
//
Функция ДобавитьВерсиюОбъектаДляЕИС(Ссылка, ОбоснованиеИзменений) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) ИЛИ НЕ ЗначениеЗаполнено(ОбоснованиеИзменений) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекДата = ТекущаяУниверсальнаяДата();
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ВерсииОбъектовДляЕИС");
	ЭлементБлокировки.УстановитьЗначение("Объект", Ссылка);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(МАКСИМУМ(ВерсииОбъектовДляЕИС.НомерВерсии), 0) + 1 КАК НомерВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииОбъектовДляЕИС
		|ГДЕ
		|	ВерсииОбъектовДляЕИС.Объект = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	НомерВерсии = Запрос.Выполнить().Выгрузить()[0].НомерВерсии;
	
	МенеджерЗаписи                 		= РегистрыСведений.ВерсииОбъектовДляЕИС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Объект				= Ссылка;
	МенеджерЗаписи.НомерВерсии  		= НомерВерсии;
	МенеджерЗаписи.Дата      			= ТекДата;
	МенеджерЗаписи.ОбоснованиеИзменений	= ОбоснованиеИзменений;
	МенеджерЗаписи.ГУИДВерсии			= Строка(Новый УникальныйИдентификатор);
	МенеджерЗаписи.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Возврат НомерВерсии;
КонецФункции

Функция ПрефиксИменОбъектовВерсионированияЕИС() Экспорт
	Возврат "УХ_ЦУЗ_";
КонецФункции

// Создает реквизиты, команды и элементы формы.
// Параметры:
//	Ссылка - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ - ссылка для 
//	ГруппаКонтейнер - ГруппаФормы - группа в которую будут добавлены элементы формы.
//
Процедура ИнициализироватьВерсионированиеДляЕИС(Ссылка, Форма, ГруппаКонтейнер) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	НастроитьФормуДляВерсионированияЕИС(Форма, ГруппаКонтейнер);
	
	ЦентрализованныеЗакупкиКлиентСерверУХ.ОбновитьВерсиюДляЕИС(Ссылка, Форма);
КонецПроцедуры

// Создать реквизиты формы
// Создать команды формы
// Создать элементы формы
Процедура НастроитьФормуДляВерсионированияЕИС(Форма, ГруппаКонтейнер) Экспорт
	Префикс_ = ПрефиксИменОбъектовВерсионированияЕИС();
	
	// Создать реквизиты формы (УХ_ЦУЗ_НомерВерсии, УХ_ЦУЗ_ОбоснованиеИзменений) 
	ОписаниеТиповСтрока20 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20);
	ОписаниеТиповСтрока2000 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(2000); 
	
	ДобавляемыеРеквизиты = Новый Массив();
	
	Реквизит = Новый РеквизитФормы(Префикс_+"НомерВерсии", ОписаниеТиповСтрока20,, НСтр("ru = 'Версия №'"), Ложь);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Реквизит = Новый РеквизитФормы(Префикс_+"ОбоснованиеИзменений", ОписаниеТиповСтрока2000,, НСтр("ru = 'Обоснование изменений'"), Ложь);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// Блокируем форму от изменений
	Форма.ТолькоПросмотр = Истина;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Создать команды формы (УХ_ЦУЗ_ДобавитьВерсиюЕИС)
	Команда = Форма.Команды.Добавить(Префикс_+"ДобавитьВерсиюЕИС");
    Команда.Действие = "ДобавитьВерсиюОбъектаДляЕИС";
	Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Создать элементы формы
	
	// Группа элементов
	ЭлементГруппа = Форма.Элементы.Добавить(Префикс_+"ГруппаНомерВерсии", Тип("ГруппаФормы"), ГруппаКонтейнер);
	ЭлементГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ЭлементГруппа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ЭлементГруппа.РастягиватьПоГоризонтали = Истина;
	
		// Картинка с замком
		Элемент = Форма.Элементы.Добавить(Префикс_+"ДобавитьВерсиюОбъектаДляЕИС", Тип("КнопкаФормы"), ЭлементГруппа);
		Элемент.Вид = ВидКнопкиФормы.ОбычнаяКнопка;
	    Элемент.ИмяКоманды = Команда.Имя;
		Элемент.Картинка = БиблиотекаКартинок.ЗанятьФайл;
		Элемент.Заголовок = НСтр("ru = 'Разблокировать'");
		
		// Текст с номером изменений
		Элемент = Форма.Элементы.Добавить(Префикс_+"НомерВерсии", Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид = ВидПоляФормы.ПолеНадписи;
		Элемент.ПутьКДанным = Префикс_+"НомерВерсии";
	    //Элемент.Ширина = 4;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
		// Текст обоснования изменений
		Элемент = Форма.Элементы.Добавить(Префикс_+"ОбоснованиеИзменений", Тип("ПолеФормы"), ЭлементГруппа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = Префикс_+"ОбоснованиеИзменений";
		Элемент.ТолькоПросмотр = Истина;
		Элемент.КнопкаОткрытия = Истина;
		Элемент.РастягиватьПоГоризонтали = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
		Элемент.МногострочныйРежим = Истина;
		Элемент.Высота = 1;
		
КонецПроцедуры



#КонецОбласти


#Область РаботаСДокументами


// Не все реквизиты оперативного плана называются эквивалентно
// реквизитам потребностей.
Функция ПреобразоватьРеквизитРезервированияБюджетаВИзмерениеРегистраПотребностей(
															ИмяРеквизита) Экспорт
	Если ИмяРеквизита = "ДоговорСКонтрагентом" Тогда
			Возврат "ДоговорСПокупателем";
	КонецЕсли;
	Возврат ИмяРеквизита;
КонецФункции

// Важно: проверка заканчивается исключением, если
// создавать договор нельзя.
//
Процедура ПроверитьВозможностьВводаДоговораНаОснованииПредложения(ПредложениеПобедителя) Экспорт
	Если НЕ ПредложениеПобедителя.Проведен Тогда
		ВызватьИсключение
			НСтр("ru = 'Нельзя создавать договор на основании непроведенного предложения победителя'");
	КонецЕсли;
	Если НЕ Документы.ПротоколВыбораПобедителей.ЭтоПредложениеПобедителя(
												ПредложениеПобедителя) Тогда
		ВызватьИсключение
			НСтр("ru = 'Нельзя создавать договор на основании предложения проигравшего поставщика'");
	КонецЕсли;
	Если НЕ Документы.ПротоколВыбораПобедителей.ЭтоПредложениеПобедителяРаспределено(
												ПредложениеПобедителя) Тогда
		ВызватьИсключение
			НСтр("ru = 'Данному поставщику не назначена номенклатура к поставке'");
	КонецЕсли;
КонецПроцедуры

// Определяет, превышает ли сумма СМП общую сумму в табличной части финансирования.
// Возвращает истину, если превышения не зафиксировано в строке плана закупок СтрокаПланаВход.
Функция ПроверитьПревышениеСуммыСмпФинансирования(СтрокаПланаВход)
	РезультатФункции = Истина;
	Если Год(СтрокаПланаВход.ДатаОфициальногоОбъявленияЗакупки) < Год(СтрокаПланаВход.ДатаИсполненияДоговора) Тогда
		Для Каждого ТекФинансирование Из СтрокаПланаВход.Финансирование Цикл
			ТекСумма = ТекФинансирование.Сумма;
			ТекСуммаСМП = ТекФинансирование.СуммаСМП;
			ТекПериод = ТекФинансирование.ПериодФинансирования;
			Если ТекСумма < ТекСуммаСМП Тогда
				РезультатФункции = Ложь;
				ТекстСообщения = НСтр("ru = 'В периоде финансирования %Период% сумма СМП (%СуммаСМП%) превышает общую сумму (%Сумма%). Запись отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(ТекПериод));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", Строка(ТекСумма));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаСМП%", Строка(ТекСуммаСМП));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Проверка пройдена успешено. Продолжаем выполнение.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = Истина;		// Не многопериодная закупка. Проверка превышения не требуется.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПроверитьПревышениеСуммыСмпФинансирования()

// Проверяет, можно ли установить строке плана закупок СтрокаПланаВход
// состояние СостояниеВход.
Функция ВозможноУстановитьСостояниеСтрокиПланаЗакупок(СтрокаПланаВход, СостояниеВход) Экспорт
	РезультатФункции = Истина;
	Если СостояниеВход = Перечисления.СостоянияСогласования.Утверждена Тогда
		// Инициализация.
		ДатаОбъявленияЗакупки	 = СтрокаПланаВход.ДатаОфициальногоОбъявленияЗакупки;
		ДатаИсполнения			 = СтрокаПланаВход.ДатаИсполненияДоговора;
		ЭтоФЗ223 = Документы.СтрокаПланаЗакупок.ЭтоФЗ223(СтрокаПланаВход);
		ЗакупкаБольшеГода = ЦентрализованныеЗакупкиКлиентСерверУХ.ЗакупкаБольшеГода(ДатаОбъявленияЗакупки, ДатаИсполнения);
		Если ЭтоФЗ223 Тогда
			// Проверка непревышения суммы СМП в финансировании.
			Если НЕ ПроверитьПревышениеСуммыСмпФинансирования(СтрокаПланаВход) Тогда
				РезультатФункции = Ложь;
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
			// Проверка финансирования долгосрочных закупок.
			Если ЗакупкаБольшеГода Тогда
				НоменклатураВыгрузка = СтрокаПланаВход.Номенклатура.Выгрузить();
				ФинансированиеКРаспределению = НоменклатураВыгрузка.Итог("Сумма");
				ИтогФинансирование = СтрокаПланаВход.Финансирование.Итог("Сумма");
				ФинансированиеОстаток = ФинансированиеКРаспределению - ИтогФинансирование;
				Если ФинансированиеОстаток > 0 Тогда
					ТекстСообщения = НСтр("ru = 'Осталось распределить %Сумма% на финансирование долгосрочных договоров. Запись отменена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", Строка(ФинансированиеОстаток));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					РезультатФункции = Ложь;
				Иначе
					// Проверка пройдена успешно.
				КонецЕсли;
			Иначе
				// Не требуется проверка.
			КонецЕсли;
		Иначе
			// Закупка не осуществляется по ФЗ-223. Проверка табличной части Финансирование не требуется.
		КонецЕсли;
		// Проверка суммы контракта.
		Если (ЗакупкаБольшеГода) И (СтрокаПланаВход.СуммаКонтракта < СтрокаПланаВход.СуммаДокумента) Тогда
			ТекстСообщения = НСтр("ru = 'Сумма контракта (%СуммаКонтракта%) меньше суммы документа (%СуммаДокумента%). Запись отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаКонтракта%", Строка(СтрокаПланаВход.СуммаКонтракта));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СуммаДокумента%", Строка(СтрокаПланаВход.СуммаДокумента));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
	Иначе
		РезультатФункции = Истина; // Разрешаем в остальных случаях.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		 // ВозможноУстановитьСостояниеСтрокиПланаЗакупок()
	
#КонецОбласти


#Область РаботаСРеквизитамиФормы


// Устанавливает для указанного элемента формы "ПериодЗакупок"
// параметр отбора "Периодичность" в соотвествии с регламентированной
// периодичностью закупок.
//
Процедура УстановитьПараметрВыбораПериодичностьЗакупок(Элемент) Экспорт
	УстановитьПараметрВыбора(
		Элемент,
		"Отбор.Периодичность",
		ПолучитьПериодичностьРегламентированногоПланированияЗакупок());
КонецПроцедуры

// Устанавливает для указанного элемента формы параметр выбора 
// в соотвествии с указанным значением.
Процедура УстановитьПараметрВыбора(Элемент, 
								   ИмяПараметраВыбора,
								   ЗначениеПериодичности) Экспорт
	НовыйПараметр = Новый ПараметрВыбора(
		ИмяПараметраВыбора, 
		ЗначениеПериодичности);
	МассивПараметров = Новый Массив(Элемент.ПараметрыВыбора);
	УдалитьПараметрВыбора(МассивПараметров, ИмяПараметраВыбора);
	МассивПараметров.Добавить(НовыйПараметр);
	Элемент.ПараметрыВыбора = 
		Новый ФиксированныйМассив(МассивПараметров);
КонецПроцедуры

// Ищет в массиве параметров выбора параметр с требуемым именем.
// Возвращает его индекс.
// Если не находит, то возвращает -1.
//
Функция НайтиИндексПараметраВыбора(МассивПараметров, ИмяПараметра) Экспорт
	ПоследнийИндекс = МассивПараметров.Количество()-1;
	Для Ном = 0 По ПоследнийИндекс Цикл
		Если МассивПараметров[Ном].Имя = ИмяПараметра Тогда
			Возврат Ном
		КонецЕсли;
	КонецЦикла;
	Возврат -1;
КонецФункции

// Удаляет в массиве параметров выбора параметр с требуемым именем.
//
Процедура УдалитьПараметрВыбора(МассивПараметров, ИмяПараметра) Экспорт
	Индекс = НайтиИндексПараметраВыбора(МассивПараметров, ИмяПараметра);
	Если Индекс >= 0 Тогда
		МассивПараметров.Удалить(Индекс);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ПолучениеГлобальныхНастроек


// Получить массив заполненный значениями перечисления СпособыВыбораПоставщика, которые относятся к выбору поставщика из нескльких вариантов
Функция ПолучитьСпособыВыбораПоставщикаЧерезЗакупки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СпособыВыбораПоставщика.Ссылка КАК Ссылка
		|ИЗ
		|	Перечисление.СпособыВыбораПоставщика КАК СпособыВыбораПоставщика
		|ГДЕ
		|	СпособыВыбораПоставщика.Ссылка <> ЗНАЧЕНИЕ(Перечисление.СпособыВыбораПоставщика.ЗакупкаУЕдинственногоПоставщика)";
	
	ТЗСпособов = Запрос.Выполнить().Выгрузить();
	мСпособыВыбораПоставщика = ТЗСпособов.ВыгрузитьКолонку("Ссылка");
	Возврат мСпособыВыбораПоставщика;
КонецФункции

// Период с которым регистрируются потребности (например, месяц).
//
Функция ПолучитьПериодичностьЗакупок() Экспорт
	Периодичность = Константы.ПериодичностьЦентрализованныхЗакупок.Получить();
	Если ЗначениеЗаполнено(Периодичность) Тогда
		Возврат Периодичность;
	КонецЕсли;
	
	Возврат Перечисления.Периодичность.Месяц;
КонецФункции

// Период в рамках которого осуществляется планирование для ЕИС (год).
//
Функция ПолучитьПериодичностьРегламентированногоПланированияЗакупок() Экспорт
	Возврат Перечисления.Периодичность.Год;
КонецФункции

// Получить массив с типами, которые входят в определяемый тип "ОбъектыЦУЗОбменаСЭТП_УХ"
Функция ПолучитьТипыОбъектаОбмена() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ОбъектыЦУЗОбменаСЭТП_УХ.Тип.Типы();
КонецФункции


#КонецОбласти


#Область МероприятияЗакупочныхПроцедур


Процедура ЗаписатьКлючевыеДатыЗакупочнойПроцедуры(ДокументМероприятие) Экспорт
	ЗакупочнаяПроцедура = ДокументМероприятие.Контекст;
	КлючевыеДаты = ПолучитьКлючевыеДатыМероприятияЗакупки(ДокументМероприятие);
	Если КлючевыеДаты <> Неопределено Тогда
		НаборЗаписей = РегистрыСведений.КлючевыеДатыЗакупок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗакупочнаяПроцедура.Установить(ЗакупочнаяПроцедура);
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, КлючевыеДаты);
		НоваяЗапись.ЗакупочнаяПроцедура = ЗакупочнаяПроцедура;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

// Прочитать значения ключевых дат мероприятия закупочной процедуры.
//
// Параметры:
//  ДокументМероприятие - ДокументСсылка.Мероприятие - документ мероприятия.
// 
// Возвращаемое значение:
//	- Неопределено - значения ключевых дат не найдены.
//	- ВыборкаИзРезультатаЗапроса - спозиционирована на записи со значениями
//				   ключевых дат, состав полей соотвествует регистру 
//				   сведений "КлючевыеДатыЗакупок".
//
Функция ПолучитьКлючевыеДатыМероприятияЗакупки(ДокументМероприятие) Экспорт
	РезультатЗапроса = ПолучитьРезультатЗапросаКлючевыхДатМероприятий(
		ДокументМероприятие);
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает массив предопределенных элементов справочники СтадииМероприятий,
// относящиеся к квалификационному отбору. Для чтения из регистра сведений
// ПрогрессСтадийМероприятий;
//
// Возвращает:
//	Массив (СправочникСсылка.СтадииМероприятий)
//
Функция ПолучитьМассивСтадийКвалификационныйОтбор() Экспорт
	Стадии = Новый Массив;
	Стадии.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_НачалоКвалификационногоОтбора);
	Стадии.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_НачалоКвалификационногоОтбора);
	Стадии.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоКвалификационногоОтбора);
	Стадии.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоКвалификационногоОтбора);
	Стадии.Добавить(Справочники.СтадииМероприятий.Конкурс_НачалоКвалификационногоОтбора);
	Стадии.Добавить(Справочники.СтадииМероприятий.Аукцион_НачалоКвалификационногоОтбора);
	Возврат Стадии;
КонецФункции

// Возвращает массив предопределенных элементов справочники СтадииМероприятий,
// относящиеся к предоставлению разьяснений. Для чтения из регистра сведений
// ПрогрессСтадийМероприятий;
//
// Возвращает:
//	Массив (СправочникСсылка.СтадииМероприятий)
//
Функция ПолучитьМассивСтадийПредоставленияРазьяснений() Экспорт
	Стадии = Новый Массив;
	Стадии.Добавить(Справочники.СтадииМероприятий.ЗапросПредложений_НачалоПредоставленияРазъяснений);
	Стадии.Добавить(Справочники.СтадииМероприятий.ЗапросКотировок_НачалоПредоставленияРазъяснений);
	Стадии.Добавить(Справочники.СтадииМероприятий.КвалификационныйОтбор_НачалоПредоставленияРазъяснений);
	Стадии.Добавить(Справочники.СтадииМероприятий.КонкурентныеПереговоры_НачалоПредоставленияРазъяснений);
	Стадии.Добавить(Справочники.СтадииМероприятий.Конкурс_НачалоПредоставленияРазъяснений);
	Стадии.Добавить(Справочники.СтадииМероприятий.Аукцион_НачалоПредоставленияРазъяснений);
	Возврат Стадии;
КонецФункции

Функция ПолучитьРезультатЗапросаКлючевыхДатМероприятий(ДокументМероприятие)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РегистрПрогрессСтадийМероприятий.ДатаНачала КАК ДатаНачалаКвалификационногоОтбора,
		|	РегистрПрогрессСтадийМероприятий.ДатаОкончания КАК ДатаОкончанияКвалификационногоОтбора,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаНачалаПредоставленияРазьясненийИзвещенияДокументации,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ДатаОкончанияПредоставленияРазьясненийИзвещенияДокументации
		|ПОМЕСТИТЬ ВТ_ДатыРазвернуто
		|ИЗ
		|	Документ.Мероприятие КАК ДокументМероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрогрессСтадийМероприятий КАК РегистрПрогрессСтадийМероприятий
		|		ПО ДокументМероприятие.Ссылка = РегистрПрогрессСтадийМероприятий.Регистратор
		|			И ((ВЫРАЗИТЬ(ДокументМероприятие.Контекст КАК Справочник.ЗакупочныеПроцедуры)) = &Закупка)
		|			И (РегистрПрогрессСтадийМероприятий.Стадия В (&СтадииКвалификации))
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
		|	РегистрПрогрессСтадийМероприятий.ДатаНачала,
		|	РегистрПрогрессСтадийМероприятий.ДатаОкончания
		|ИЗ
		|	Документ.Мероприятие КАК ДокументМероприятие
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПрогрессСтадийМероприятий КАК РегистрПрогрессСтадийМероприятий
		|		ПО ДокументМероприятие.Ссылка = РегистрПрогрессСтадийМероприятий.Регистратор
		|			И ((ВЫРАЗИТЬ(ДокументМероприятие.Контекст КАК Справочник.ЗакупочныеПроцедуры)) = &Закупка)
		|			И (РегистрПрогрессСтадийМероприятий.Стадия В (&СтадииРазьяснений))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МАКСИМУМ(ВТ_ДатыРазвернуто.ДатаНачалаКвалификационногоОтбора) КАК ДатаНачалаКвалификационногоОтбора,
		|	МАКСИМУМ(ВТ_ДатыРазвернуто.ДатаОкончанияКвалификационногоОтбора) КАК ДатаОкончанияКвалификационногоОтбора,
		|	МАКСИМУМ(ВТ_ДатыРазвернуто.ДатаНачалаПредоставленияРазьясненийИзвещенияДокументации) КАК ДатаНачалаПредоставленияРазьясненийИзвещенияДокументации,
		|	МАКСИМУМ(ВТ_ДатыРазвернуто.ДатаОкончанияПредоставленияРазьясненийИзвещенияДокументации) КАК ДатаОкончанияПредоставленияРазьясненийИзвещенияДокументации
		|ИЗ
		|	ВТ_ДатыРазвернуто КАК ВТ_ДатыРазвернуто";
	Запрос.УстановитьПараметр("Закупка", ДокументМероприятие.Контекст);
	Запрос.УстановитьПараметр("СтадииКвалификации",
		ПолучитьМассивСтадийКвалификационныйОтбор());
	Запрос.УстановитьПараметр("СтадииРазьяснений", 
		ПолучитьМассивСтадийПредоставленияРазьяснений());
	Возврат Запрос.Выполнить();
КонецФункции


#КонецОбласти


#Область ПодсистемаСогласования


// Проверяет, что объект утвержден.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - объект для которого проверяем утвержденность.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ОбъектУтвержден(Ссылка) Экспорт
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Ложь;
	КонецЕсли;
	СтатусОбъекта =
		УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(
			Ссылка);
	Возврат 
		ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоСостояниеУтвержденногоОбъекта(
			СтатусОбъекта);
КонецФункции


#КонецОбласти


#Область ПрочиеЭкспортныеФункцииПроцедуры


Функция ПолучитьСвойство(Структура, Имя, ЗначениеПоУмолчанию=Неопределено) Экспорт
	Перем Значение_;
	
	Попытка
		Значение_ = ЗначениеПоУмолчанию;
		Если Структура.Свойство(Имя, Значение_) Тогда
			Возврат Значение_;
		КонецЕсли;
	Исключение
	КонецПопытки;
	
	Возврат ЗначениеПоУмолчанию;
КонецФункции

// Возвращает соответствие как множество строк текстового документа.
// Ключи в котором - это строки, а значения - это всегда Истина.
//
// Параметры:
//  Макет - ТекстовыйДокумент - документ из которого читаем строки.
// 
// Возвращаемое значение:
//   - Соответствие {Строка текста: Истина}
//
Функция ПолучитьТекстовыйМакетКакСоответствие(ТекстДок) Экспорт
	мРеквизитов = Новый Соответствие;
	ПоследняяСтрока = ТекстДок.КоличествоСтрок();
	Для НомерСтроки = 1 По ПоследняяСтрока Цикл
		мРеквизитов.Вставить(ТекстДок.ПолучитьСтроку(НомерСтроки),
							Истина);
	КонецЦикла;
	Возврат мРеквизитов;
КонецФункции

// Возвращает структуру как множество строк текстового документа.
// Ключи в  котором - это строки, а значения - это всегда Истина.
//
// Параметры:
//  Макет - ТекстовыйДокумент - документ из которого читаем строки.
// 
// Возвращаемое значение:
//   - Структура {Строка текста: Неопределено}
//
Функция ПолучитьТекстовыйМакетКакСтруктуру(ТекстДок) Экспорт
	мРеквизитов = Новый Структура;
	ПоследняяСтрока = ТекстДок.КоличествоСтрок();
	Для НомерСтроки = 1 По ПоследняяСтрока Цикл
		мРеквизитов.Вставить(ТекстДок.ПолучитьСтроку(НомерСтроки),
		Неопределено);
	КонецЦикла;
	Возврат мРеквизитов;
КонецФункции

// Для документа получает самый первый в цепочке ввода на основании.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - документ прородителя,
//		которого мы ищем.
//	ИмяРеквизитаОснование - Строка - имя реквизита в котором
//		записан документ основания. Необязательный, по умолчанию
//		- "ДокументОснование".
// 
// Возвращаемое значение:
//   - ссылка на документ того же типа, что и ДокументСсылка.
//		Если ДокументСсылка не введен на основании,
//		то возвращает ссылку на него. Иначе возвращает
//		самый первый документ в цепочке, у которого нет основания.
//
Функция ПолучитьПервыйДокументОснования(
				ДокументСсылка,
				ИмяРеквизитаОснование="ДокументОснование") Экспорт
	ТекущийДокумент = ДокументСсылка;
	Пока ЗначениеЗаполнено(ТекущийДокумент.ДокументОснование) Цикл
		ТекущийДокумент = ТекущийДокумент.ДокументОснование;
	КонецЦикла;
	Возврат ТекущийДокумент;
КонецФункции

// Получить массив документов указанного вида с отбором.
//
// Параметры:
//  ВидДокумента - Строка - вид документа в конфигураторе.
//  Отбор - Соответствие - ключи - это имена реквизитов документа (можно с точкой),
//			а значения - это значения отбора. Отбор всегда по равенству.
//  ИсключитьСсылку	 - ДокументСсылка.[ВидДокумента] - ссылка для исключения.
// 
// Возвращаемое значение:
//   - Массив(ДокументСсылка.[ВидДокумента]) - найденные документы.
//		если документы не найдены, то возвращает пустой массив.
//
Функция ПолучитьДокументыПоОтбору(ВидДокумента,
								Отбор=Неопределено,
								ИсключитьСсылку=Неопределено) Экспорт
	Возврат ПолучитьСсылкиОбъектаПоОтбору(
		"Документ",
		ВидДокумента,
		Отбор,
		ИсключитьСсылку);
КонецФункции

// Получить массив ссылок на справочник указанного вида с отбором.
//
// Параметры:
//  ВидСправочника - Строка - имя справочника в конфигураторе.
//  Отбор - Соответствие - ключи - это имена реквизитов справочника (можно с точкой),
//			а значения - это значения отбора. Отбор всегда по равенству.
//  ИсключитьСсылку	 - СправочникСсылка.{ВидДокумента} - ссылка для исключения.
// 
// Возвращаемое значение:
//   - Массив(СправочникСсылка.{ВидСправочника}) - найденные документы.
//		если ссылки не найдены, то возвращает пустой массив.
//
Функция ПолучитьСправочникПоОтбору(ВидСправочника,
								Отбор=Неопределено,
								ИсключитьСсылку=Неопределено) Экспорт
	Возврат ПолучитьСсылкиОбъектаПоОтбору(
		"Справочник",
		ВидСправочника,
		Отбор,
		ИсключитьСсылку);
КонецФункции

// Получить массив ссылок указанного вида с отбором.
//
// Параметры:
//	ИмяОбъектаМетаданных - Строка - имя объекта метаданных.
//  ВидДокумента - Строка - вид объекта в конфигураторе.
//  Отбор - Соответствие - ключи - это имена реквизитов объекта (можно с точкой),
//			а значения - это значения отбора. Отбор всегда по равенству.
//  ИсключитьСсылку	 - {ИмяОбъектаМетаданных}Ссылка.{ВидДокумента} -
//			ссылка для исключения.
// 
// Возвращаемое значение:
//   - Массив(Ссылка на объект) - найденные ссылки.
//		если они не найдены, то возвращает пустой массив.
//
Функция ПолучитьСсылкиОбъектаПоОтбору(ИмяОбъектаМетаданных,
								ВидОбъекта,
								Отбор=Неопределено,
								ИсключитьСсылку=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИскомыйОбъект.Ссылка КАК Ссылка
		|ИЗ
		|	" + ИмяОбъектаМетаданных + "." + ВидОбъекта + " КАК ИскомыйОбъект";
	Если Отбор <> Неопределено ИЛИ ЗначениеЗаполнено(ИсключитьСсылку) Тогда
		Запрос.Текст = Запрос.Текст  + Символы.ПС + "ГДЕ" + Символы.ПС;
	КонецЕсли;
	естьУсловие = Ложь;
	Если Отбор <> Неопределено Тогда
		Для Каждого КлючЗначение Из Отбор Цикл 
			ИмяРеквизита = КлючЗначение.Ключ;
			ИмяПараметра = СтрЗаменить(ИмяРеквизита, ".", "_");
			Запрос.Текст = Запрос.Текст  + Символы.ПС
				+ ?(естьУсловие, " И ", "")
				+ "	ИскомыйОбъект." + ИмяРеквизита + " = &" + ИмяПараметра;
			Запрос.УстановитьПараметр(ИмяПараметра, КлючЗначение.Значение);
			естьУсловие = Истина;
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ИсключитьСсылку) Тогда
		Запрос.Текст = Запрос.Текст  + Символы.ПС
			+ ?(естьУсловие, " И ", "")
			+ "	ИскомыйОбъект.Ссылка <> &__ИсключитьСсылку__";
		Запрос.УстановитьПараметр("__ИсключитьСсылку__", ИсключитьСсылку);
	КонецЕсли;
	Возврат Запрос.Выполнить()
				.Выгрузить(ОбходРезультатаЗапроса.Прямой)
				.ВыгрузитьКолонку("Ссылка");
КонецФункции
			
// Получить документ для закупочной процедуры.
// У документа должен быть реквизит "ЗакупочнаяПроцедура".
// Если документов несколько, то будет возвращен случайный документ
// (рассматриваем сценарий одного действующего документа закупки).
//
// Параметры:
//  ИмяДокумента - Строка - имя объекта метаданных документа.
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочнаяПроцедура - закупка
//		по которой нужно отобрать документа.
//  Проведен - Булево - учитывать при поиске флаг проведения документа.
//		Если Неопределено, то отбор не по проведению не делаем.
//		Иначе отбираем по указанному значению.
// 
// Возвращаемое значение:
//  ДокументСсылка[ИмяДокумента]. Если не находит, то возвращает пустую ссылку.
//
Функция ПолучитьДокументЗакупочнойПроцедуры(ИмяДокумента,
											ЗакупочнаяПроцедура,
											Проведен=Истина) Экспорт
	Отбор = Новый Структура("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	Отбор.Вставить("ПометкаУдаления", Ложь);
	Если ИмяДокумента = "ПротоколВыбораПобедителей" Тогда
		ТекНомерПереторжки = РегистрыСведений.ПереторжкаЗакупок.ПолучитьАктуальныйНомерПереторжки(ЗакупочнаяПроцедура);
		Отбор.Вставить("НомерПереторжки", ТекНомерПереторжки);
	Иначе
		// Для других документов не добавляем отбор по номеру переторжки.
	КонецЕсли;
	Если Проведен <> Неопределено Тогда
		Отбор.Вставить("Проведен", Проведен);
	КонецЕсли;
	мДокументов = ЦентрализованныеЗакупкиУХ.ПолучитьДокументыПоОтбору(ИмяДокумента,	Отбор);
	Если мДокументов.Количество() > 0 Тогда
		Возврат мДокументов[0];
	КонецЕсли;
	Возврат Документы[ИмяДокумента].ПустаяСсылка();
КонецФункции

// Получить пару Коэффициент и Кратность, для пересчета
//  использовать формулу: СуммаВВалютеВ = СуммаВВалютеИз * Коэффициент / Кратность.
//
// Параметры:
//  ВалютаИз - СправочникСсылка.Валюты - валюта из которой будет делаться пересчет.
//  ВалютаВ	 - СправочникСсылка.Валюты - валюта в котороую будет делаться пересчет.
//	ДатаПересчета - Дата - дата на которую нужно получить курсы валют.
// 
// Возвращаемое значение:
//   - Структура:
//		- Коэффициент - Число - коэффициент пересчета.
//		- Кратность - Число - кратность, на которую нужно скорректировать коэффициент.
//
Функция ПолучитьКоэффициентПересчетаВалют(ВалютаИз, ВалютаВ, ДатаПересчета) Экспорт
	Кратность = Pow(10, 20);
	Если ВалютаИз = ВалютаВ ИЛИ НЕ ЗначениеЗаполнено(ВалютаИз)
				ИЛИ НЕ ЗначениеЗаполнено(ВалютаВ) Тогда
		Кратность = 1;
		Коэффициент = 1;
	Иначе
		Коэффициент =
			РаботаСКурсамиВалют.ПересчитатьВВалюту(
				Кратность, 
				ВалютаИз, 
				ВалютаВ, 
				ДатаПересчета);
		Если Коэффициент = 0 Тогда
			Кратность = 1;
			Коэффициент = 1;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("Коэффициент, Кратность", Коэффициент, Кратность);
КонецФункции

// Возвращает массив типов из определяемого типа.
//
Функция ПолучитьТипыОпределяемогоТипа(ИмяОпределяемогоТипа) Экспорт
	ОпределяемыйТип = Метаданные.ОпределяемыеТипы.Найти(ИмяОпределяемогоТипа);
	Если ОпределяемыйТип = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	Возврат ОпределяемыйТип.Тип.Типы();
КонецФункции

// Скрыть элементы формы недоступные для внешнего поставщика.
//
Процедура УстановитьВидимостьЭлементовФормыРаботыСФайлами(ЭлементыФормы) Экспорт
	ЭтоВнешнийПользователь = 
		ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	УстановитьСвойствоЭлементаФормы(
		ЭлементыФормы, "Отправить", "Видимость", НЕ ЭтоВнешнийПользователь);
КонецПроцедуры

// Возвращает, если необходимо, новый текст запроса, в котором обращение к реквизиту
// Владелец договора заменено на обращение к реквизиту Контрагент.
//
Функция ЗаменитьВладельцаДоговораВТекстеЗапроса(ПсевдонимТаблицыДоговор,
												  ТекстЗапроса) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		Возврат СтрЗаменить(ТекстЗапроса, 
			ПсевдонимТаблицыДоговор + ".Владелец", 
			ПсевдонимТаблицыДоговор + "."
				+ ПолучитьИмяВладельцаДоговора());
	КонецЕсли;
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьИмяВладельцаДоговора() Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		Возврат "Контрагент";
	КонецЕсли;
	Возврат "Владелец";
КонецФункции

// Переопределяет справочники хранения файлов внешних поставщиков.
// 
// Параметры:
//  ТипВладелецФайла  - Тип - тип ссылки объекта, к которому добавляется файл.
//
//  ИменаСправочников - Соответствие - содержит в ключах имена справочников.
//                      При вызове содержит стандартное имя одного справочника,
//                      помеченного, как основной (если существует).
//                      Основной справочник используется для интерактивного
//                      взаимодействия с пользователем. Чтобы указать основной
//                      справочник, нужно установить Истина в значение соответствия.
//                      Если установить Истина более одного раза, тогда будет ошибка.
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	ТипыВладельцев = 
		Метаданные.ОпределяемыеТипы.ВладелецПрисоединенныхФайловВнешнегоПоставщика.Тип.Типы();
	Если ТипыВладельцев.Найти(ТипВладелецФайла) <> Неопределено Тогда
		ИменаСправочников.Вставить("ВнешнихПоставщиковПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты учета СМСП в приемнике из источника.
// Если источник не указан, то устанавливает значения по умолчанию.
//
Процедура ЗаполнитьРеквизитыСМСПИзОбъекта(Приемник, Источник) Экспорт
	Если Источник <> Неопределено Тогда
		Приемник.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков =
			Источник.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков;
		Приемник.ПриоритетУчастияМалогоИСреднегоПредпринимательства =
			Источник.ПриоритетУчастияМалогоИСреднегоПредпринимательства;
		Приемник.НеУчитыватьПриРасчетеДолиЗакупокУСМП =
			Источник.НеУчитыватьПриРасчетеДолиЗакупокУСМП;
		Приемник.КатегорияЗакупкиДляИсключенияИзГОЗ =
			Источник.КатегорияЗакупкиДляИсключенияИзГОЗ;
		Приемник.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223 =
			Источник.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223;
	Иначе
		Приемник.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков = Ложь;
		Приемник.ПриоритетУчастияМалогоИСреднегоПредпринимательства = Ложь;
		Приемник.НеУчитыватьПриРасчетеДолиЗакупокУСМП = Ложь;
		Приемник.КатегорияЗакупкиДляИсключенияИзГОЗ = Неопределено;
		Приемник.НеВключенВПланЗакупкиЧасть15Ст4ФЗ223 = Ложь;
	КонецЕсли;
КонецПроцедуры

// Заменяет в регистре РегистрСостоянийОбъектов состояния закупочной процедуры с
// СостоянияСогласования на аналог из СтатусыВыгружаемыхОбъектовЕИС.
Процедура ОбновитьСтатусыВыгруженныхОбъектовСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СтрокаПланаЗакупок.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов КАК РегистрСостоянийОбъектов
		|		ПО СтрокаПланаЗакупок.Ссылка = РегистрСостоянийОбъектов.Объект";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекЗакупочнаяПроцедура = ВыборкаДетальныеЗаписи.Ссылка;
		НаборЗаписей = РегистрыСведений.РегистрСостоянийОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ТекЗакупочнаяПроцедура); 
		НаборЗаписей.Прочитать();
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл 
		   СтароеСостояние = ТекНаборЗаписей.СостояниеОбъекта;
		   Если ТипЗнч(СтароеСостояние) = Тип("ПеречислениеСсылка.СостоянияСогласования") Тогда
			   НовоеСостояние = ЦентрализованныеЗакупкиКлиентСерверУХ.СостоянияСогласованияВСтатусыВыгружаемыхОбъектов(СтароеСостояние);
			   ТекНаборЗаписей.СостояниеОбъекта = НовоеСостояние; 
		   Иначе
			   // Не заменяем прочие варианты.
		   КонецЕсли;
		КонецЦикла; 
		НаборЗаписей.Записать(); 
	КонецЦикла;
КонецПроцедуры		// ОбновитьСтатусыВыгруженныхОбъектовСтрокПланаЗакупок()

// Проверяет, разрешена ли отгрузка по документу ДокументОтгрузкиВход.
// Возвращает результат проверки.
Функция ПроверитьЗапретОтгрузки(ДокументОтгрузкиВход) Экспорт
	РезультатФункции = Истина;
	ТипДокумента = ТипЗнч(ДокументОтгрузкиВход);
	ЭтоРеализация = ((ТипДокумента = Тип("ДокументОбъект.РеализацияТоваровУслуг")) ИЛИ (ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")));
	Если ЭтоРеализация Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	&Организация КАК Организация,
		|	&Контрагент КАК Контрагент,
		|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	&БанковскийСчетОрганизации КАК СчетОрганизации
		|ПОМЕСТИТЬ ВТ_ДанныеОтгрузки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ПравилаЗапретаОпераций.ЗапретОтгрузки
		|					ТОГДА 1
		|				ИНАЧЕ 0
		|			КОНЕЦ), 0) КАК ЕстьЗапрет,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|				КОГДА ПравилаЗапретаОпераций.ЗапретОтгрузки
		|					ТОГДА 0
		|				ИНАЧЕ 1
		|			КОНЕЦ), 0) КАК ЕстьРазрешение
		|ИЗ
		|	ВТ_ДанныеОтгрузки КАК ВТ_ДанныеОтгрузки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаЗапретаОпераций КАК ПравилаЗапретаОпераций
		|		ПО (ВТ_ДанныеОтгрузки.Организация = ПравилаЗапретаОпераций.Организация
		|				ИЛИ ПравилаЗапретаОпераций.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
		|			И (ВТ_ДанныеОтгрузки.Контрагент = ПравилаЗапретаОпераций.Контрагент
		|				ИЛИ ПравилаЗапретаОпераций.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			И (ВТ_ДанныеОтгрузки.ДоговорКонтрагента = ПравилаЗапретаОпераций.ДоговорКонтрагента
		|				ИЛИ ПравилаЗапретаОпераций.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
		|			И (ВТ_ДанныеОтгрузки.СчетОрганизации = ПравилаЗапретаОпераций.СчетОрганизации
		|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = НЕОПРЕДЕЛЕНО)";
		Запрос.УстановитьПараметр("Организация", ДокументОтгрузкиВход.Организация);
		Запрос.УстановитьПараметр("Контрагент", ДокументОтгрузкиВход.Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДокументОтгрузкиВход.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("БанковскийСчетОрганизации", ДокументОтгрузкиВход.БанковскийСчетОрганизации);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			РезультатФункции = (Выборка.ЕстьЗапрет = 0);
		Иначе
			РезультатФункции = Истина;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант документа отгрузки %Документ%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ДокументОтгрузкиВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПроверитьЗапретОтгрузки()

// Проверяет правильность заполнения товарной категории ТоварнаяКатегорияВходв поле 
// КолонкаНоменклатураВход таблицы ТаблицаВход. Когда исходная товарная категория пустая -
// проверка не выполняется.
Функция ПроверитьТоварныеКатегорииВТаблице(ТоварнаяКатегорияВход, ТаблицаВход, КолонкаНоменклатураВход) Экспорт
	РезультатФункции = Истина;
	Если ЗначениеЗаполнено(ТоварнаяКатегорияВход) Тогда
		Для Каждого ТекНоменклатура Из ТаблицаВход Цикл
			НоменклатураСтроки = ТекНоменклатура[КолонкаНоменклатураВход];
			Если ЗначениеЗаполнено(НоменклатураСтроки) Тогда
				Если ТипЗнч(НоменклатураСтроки) = Тип("СправочникСсылка.Номенклатура") Тогда
					ТекТоварнаяКатегория = НоменклатураСтроки.ТоварнаяКатегория;
					Если НоменклатураСтроки.ТоварнаяКатегория <> ТоварнаяКатегорияВход Тогда
						ТекстСообщения = НСтр("ru = 'Товарная категория ""%ТоварнаяКатегорияСтроки%"" для номенклатуры ""%Номенклатура%"" не совпадает с товарной категорией документа ""%ТоварнаяКатегорияДокумента%""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварнаяКатегорияСтроки%", Строка(ТекТоварнаяКатегория));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Номенклатура%", Строка(НоменклатураСтроки));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварнаяКатегорияДокумента%", Строка(ТоварнаяКатегорияВход));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						РезультатФункции = Ложь;
					Иначе
						// Проверка пройдена успешно.
					КонецЕсли;
				ИначеЕсли ТипЗнч(НоменклатураСтроки) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
					Если НоменклатураСтроки <> ТоварнаяКатегорияВход Тогда
						ТекстСообщения = НСтр("ru = 'Товарная категория ""%ТоварнаяКатегорияСтроки%"" в таличной части не совпадает с товарной категорией документа ""%ТоварнаяКатегорияДокумента%""'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварнаяКатегорияСтроки%", Строка(НоменклатураСтроки));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТоварнаяКатегорияДокумента%", Строка(ТоварнаяКатегорияВход));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						РезультатФункции = Ложь;
					Иначе
						// Проверка пройдена успешно.
					КонецЕсли;				
				Иначе
					// Не выполняем проверку.
				КонецЕсли;
			Иначе
				// Пустое значение. Пропускаем.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = Истина;		 // Товарная категория не заполнена. Не выполняем проверку.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПроверитьТоварныеКатегорииВТаблице() 

// Возвращает идентификатор отбора с именем ИмяПоляВход в схеме компоновки СхемаВход.
Функция ПолучитьИдентификаторОтбораПользовательскойНастройки(СхемаВход, ИмяПоляВход) Экспорт
	РезультатФункции = "";
	// Получение настроек.
	ХранилищеСхемы = ПоместитьВоВременноеХранилище(СхемаВход);
	ИсточникДоступныхНастроекКД = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ХранилищеСхемы);
	КомпановщикНастрокКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпановщикНастрокКД.Инициализировать(ИсточникДоступныхНастроекКД);
	КомпановщикНастрокКД.ЗагрузитьНастройки(СхемаВход.НастройкиПоУмолчанию);
	Настройки = КомпановщикНастрокКД.ПолучитьНастройки();
	// Найдём GUID отбора по товарной категории среди настроек.
	ЭлементыОтбора = Настройки.Отбор.Элементы;
	ПолеТоварнаяКатегория = Новый ПолеКомпоновкиДанных(ИмяПоляВход);
	Для Каждого ТекЭлементыОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ТекЭлементыОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ТекЭлементыОтбора.ЛевоеЗначение = ПолеТоварнаяКатегория Тогда
				РезультатФункции = ТекЭлементыОтбора.ИдентификаторПользовательскойНастройки;
			Иначе
				// Продолжаем поиск.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьИдентификаторОтбораПользовательскойНастройки()

// Устанавливает использование отбора по полю с именем ИмяПоляВход в настройках НастрокиКдИзм схемы компоновки 
// ИмяСхемыВход отчёта ИмяОтчетаВход в новое значение ИспользованиеВход.
Процедура ВключитьИспользованиеОтбораВОтчете(ИмяОтчетаВход, ИмяСхемыВход, ИмяПоляВход, ИспользованиеВход, НастрокиКдИзм) Экспорт 
	// Получим настройки из схемы.
	Схема = Отчеты[ИмяОтчетаВход].ПолучитьМакет(ИмяСхемыВход);
	ГуидПользовательскойНастройки = ПолучитьИдентификаторОтбораПользовательскойНастройки(Схема, ИмяПоляВход);
	// Изменим использование отбора по найденному идентификатору.
	Если ЗначениеЗаполнено(ГуидПользовательскойНастройки) Тогда
		ЭлементыНастроек = НастрокиКдИзм.Элементы;
		Для Каждого ТекЭлементыНастроек Из ЭлементыНастроек Цикл
			Если ТипЗнч(ТекЭлементыНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ТекЭлементыНастроек.ИдентификаторПользовательскойНастройки = ГуидПользовательскойНастройки Тогда
					ТекЭлементыНастроек.Использование = ИспользованиеВход;
				Иначе
					// Другая настройка. Пропускаем.
				КонецЕсли;
			Иначе
				// Не элемент отбора. Пропускаем.
			КонецЕсли;
		КонецЦикла;	  
	Иначе
		// Идентификатор не получен. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ВключитьИспользованиеОтбораВОтчете()

// Устанавливает видимость элементов отбора ИмяПоляВход схемы ИмяСхемыВход в отчёте
// ИмяОтчетаВход на форме ФормаИзм в состояние ВидимостьВход.
Процедура ВидимостьОтбораВОтчете(ИмяОтчетаВход, ИмяСхемыВход, ИмяПоляВход, ВидимостьВход, ФормаИзм) Экспорт
	Попытка
		Схема = Отчеты[ИмяОтчетаВход].ПолучитьМакет(ИмяСхемыВход);
		ГуидНастройки = ЦентрализованныеЗакупкиУХ.ПолучитьИдентификаторОтбораПользовательскойНастройки(Схема, ИмяПоляВход);
		Счетчик = 0;
		НайденноеЗначение = -1;
		ЭлементыПользовательскихНастроек = ФормаИзм.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
		Для Каждого ТекЭлементыПользовательскихНастроек Из ЭлементыПользовательскихНастроек Цикл
			Если ТекЭлементыПользовательскихНастроек.ИдентификаторПользовательскойНастройки = ГуидНастройки Тогда
				НайденноеЗначение = Счетчик;
				Прервать;		// Значение найдено.
			Иначе
				// Продолжаем поиск.
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;	
		Если НайденноеЗначение <> -1 Тогда
			ИмяЭлементаЗначение = "КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + Строка(НайденноеЗначение) + "Значение";
			ФормаИзм.Элементы[ИмяЭлементаЗначение].Видимость = ВидимостьВход;
			ИмяЭлементаИспользование = "КомпоновщикНастроекПользовательскиеНастройкиЭлемент" + Строка(НайденноеЗначение) + "Использование";
			ФормаИзм.Элементы[ИмяЭлементаИспользование].Видимость = ВидимостьВход;
		Иначе
			// Настройка не найдена.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При установке видимости отборов %ИмяПоля% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПоля%", Строка(ИмяПоляВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// ВидимостьОтбораВОтчете()

// На основании справочника договоры ДоговорВход получает массив структур для заполнения
// номенклатуры в табличную часть.
Функция ПолучитьДанныеЗаполненияПоДоговору(ДоговорВход, ПоступлениеОбъект) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПланПоставокПоДоговорамОстатки.Номенклатура КАК Номенклатура,
		|	ПланПоставокПоДоговорамОстатки.Характеристика КАК Характеристика,
		|	ПланПоставокПоДоговорамОстатки.СтавкаНДС КАК СтавкаНДС,
		|	СУММА(ПланПоставокПоДоговорамОстатки.КоличествоОстаток) КАК КоличествоОстаток,
		|	СУММА(ПланПоставокПоДоговорамОстатки.СуммаОстаток) КАК СуммаОстаток,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	ПланПоставокПоДоговорамОстатки.МестоПоставки КАК МестоПоставки
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(&Период, Договор = &Договор) КАК ПланПоставокПоДоговорамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланПоставокПоДоговорамОстатки.МестоПоставки,
		|	ПланПоставокПоДоговорамОстатки.СтавкаНДС,
		|	ПланПоставокПоДоговорамОстатки.Характеристика,
		|	ПланПоставокПоДоговорамОстатки.Номенклатура,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Номенклатура.ЕдиницаИзмерения
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КлассификаторЕдиницИзмерения.ПустаяСсылка)
		|	КОНЕЦ";
	Если ЗначениеЗаполнено(ПоступлениеОбъект) Тогда
		Граница = Новый Граница(ПоступлениеОбъект.МоментВремени(), ВидГраницы.Исключая);
		Запрос.УстановитьПараметр("Период", Граница);
	Иначе
		Запрос.УстановитьПараметр("Период", ТекущаяДатаСеанса());
	КонецЕсли;
	Запрос.УстановитьПараметр("Период", Граница);
	Запрос.УстановитьПараметр("Договор", ДоговорВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ЕдиницаИзмерения",	 ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
		СтруктураЗаполнения.Вставить("МестоПоставки",		 ВыборкаДетальныеЗаписи.МестоПоставки);
		СтруктураЗаполнения.Вставить("Номенклатура",		 ВыборкаДетальныеЗаписи.Номенклатура);
		СтруктураЗаполнения.Вставить("Количество",			 ВыборкаДетальныеЗаписи.КоличествоОстаток);
		СтруктураЗаполнения.Вставить("СтавкаНДС",			 ВыборкаДетальныеЗаписи.СтавкаНДС);
		СтруктураЗаполнения.Вставить("Сумма",				 ВыборкаДетальныеЗаписи.СуммаОстаток);
		СтруктураЗаполнения.Вставить("Характеристика",		 ВыборкаДетальныеЗаписи.Характеристика);
		РезультатФункции.Добавить(СтруктураЗаполнения);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьДанныеЗаполненияПоДоговору()
	
#КонецОбласти


#Область НеЭкспортныеФункции


Функция УстановитьСвойствоЭлементаФормы(ЭлементыФормы, ИмяЭлемента, ИмяРеквизита, Значение)
	Элемент = ЭлементыФормы.Найти(ИмяЭлемента);
	Если Элемент = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	Элемент[ИмяРеквизита] = Значение;
КонецФункции


#КонецОбласти
