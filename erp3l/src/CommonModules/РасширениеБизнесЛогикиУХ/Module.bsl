	
#Область СверкаВГО

// Проверяем существование подсистемы СверкаВГО.
// Если есть, запускаем обработку проведения настраиваемого отчета
// для целей ВГО. См. описание процедуры
// СверкаВГОУХ.ОбработкаПроведенияНастраиваемыйОтчет().
//
Процедура СверкаВГО_ОбработкаПроведенияНастраиваемыйОтчет(ОбъектРасчета) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СверкаВГО") Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектРасчета);
	ИмяМетода = "СверкаВГОУХ.ОбработкаПроведенияНастраиваемыйОтчет";
	ОбщегоНазначения.ВыполнитьМетодКонфигурации(ИмяМетода, Параметры);
	
КонецПроцедуры

#КонецОбласти

#Область Договоры

Процедура ПередЗаписьюДоговорыКонтрагентов(Объект, Отказ) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(Объект);
		Параметры.Добавить(Отказ);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("ИнтеграцияВИБПереопределяемыйУХ.ПередЗаписьюДоговорыКонтрагентов", Параметры);
		Отказ = Параметры[1];
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполненияДоговорыКонтрагентовУХ(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(Объект);
		Параметры.Добавить(ДанныеЗаполнения);
		Параметры.Добавить(СтандартнаяОбработка);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("ИнтеграцияВИБПереопределяемыйУХ.ОбработкаЗаполненияДоговорыКонтрагентовУХ", Параметры);
		СтандартнаяОбработка = Параметры[2];
	КонецЕсли;
	//ИнтеграцияВИБПереопределяемыйУХ.ОбработкаЗаполненияДоговорыКонтрагентовУХ(Объект, ДанныеЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияДоговорыКонтрагентовУХ(Объект, Отказ, МассивНепроверяемыхРеквизитов) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(Объект);
		Параметры.Добавить(Отказ);
		Параметры.Добавить(МассивНепроверяемыхРеквизитов);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("ИнтеграцияВИБПереопределяемыйУХ.ОбработкаПроверкиЗаполненияДоговорыКонтрагентовУХ", Параметры);
		Отказ = Параметры[1];
	КонецЕсли;
	//ИнтеграцияВИБПереопределяемыйУХ.ОбработкаПроверкиЗаполненияДоговорыКонтрагентовУХ(Объект, Отказ, МассивНепроверяемыхРеквизитов);
КонецПроцедуры

#КонецОбласти

#Область УправлениеОтчетнымПериодом

Процедура УправлениеПериодом_ПроцессЗапущен(ОбъектРасчета,тПроцессЗапущен) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ОбъектРасчета.ВерсияОрганизационнойСтруктуры);
		Параметры.Добавить(ОбъектРасчета.Ссылка);
        Параметры.Добавить(тПроцессЗапущен);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ПроцессЗапущен", Параметры);
		тПроцессЗапущен = Параметры[2];
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодом_ВыполнитьРегламентЗакрытияПериода(ОбъектРасчета) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ОбъектРасчета.Ссылка);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ВыполнитьРегламентЗакрытияПериода", Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодом_ПроверитьШаблонЗаполнен(ВерсияОрганизационнойСтруктуры,тШаблонЗаполнен) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ВерсияОрганизационнойСтруктуры);
		Параметры.Добавить(тШаблонЗаполнен);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ШаблонЗаполнен", Параметры);
		тШаблонЗаполнен = Параметры[1];
	Иначе	
		тШаблонЗаполнен = Ложь;
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодом_ОпределитьСвязанныйШаблон(ВерсияОрганизационнойСтруктуры,ШаблонПроцесса) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ВерсияОрганизационнойСтруктуры);
		Параметры.Добавить(ШаблонПроцесса);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ОпределитьСвязанныйШаблон", Параметры);
		ШаблонПроцесса = Параметры[1];
	Иначе	
		ШаблонПроцесса = Неопределено;
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодом_ОстановитьПроцесс(тСсылка,тПроцессОстановлен, ОстанавливатьОбъектВход = Истина) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(тСсылка);
		Параметры.Добавить(тПроцессОстановлен);
		Параметры.Добавить(ОстанавливатьОбъектВход);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ОстановитьПроцессРасширенный", Параметры);
		тПроцессОстановлен = Параметры[1];
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодом_НайтиЭкземплярПроцесса(тОбъект) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(тОбъект);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.НайтиЭкземплярПроцессаРасширенный", Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодом_ИнициализироватьПроцесс(ШаблонПроцесса,тСсылка,тЭкземплярПроцесса) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ШаблонПроцесса);
		Параметры.Добавить(тСсылка);
		Параметры.Добавить(тЭкземплярПроцесса);

		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ИнициализироватьПроцессРасширенный", Параметры);
		тЭкземплярПроцесса = Параметры[2];
	КонецЕсли;
КонецПроцедуры

Процедура УправлениеПериодомУХ_ВыполнитьПроведениеЗакрытияПериода(ЭтотОбъект) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ЭтотОбъект);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ВыполнитьПроведениеЗакрытияПериода", Параметры);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийВидовОтчетов

Процедура СоздатьРакурсПоУмолчанию(тСсылка) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(тСсылка);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("СводнаяТаблицаУХ.СоздатьРакурсПоУмолчанию", Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьНастройкиНовогоБланка(БланкВход) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(БланкВход);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("СводнаяТаблицаУХ.СоздатьНастройкиНовогоБланка", Параметры);
	КонецЕсли;
	
КонецПроцедуры	
	
#КонецОбласти

#Область ВерсииРегламентовПодготовкиОтчетности

Процедура ОбновитьОрганизацииЭтаповПоРегламенту(тСсылка) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(тСсылка);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.ОбновитьОрганизацииЭтаповПоРегламенту", Параметры);
	КонецЕсли;
КонецПроцедуры

Процедура ВерсииРегламентов_СоздатьШаблонПроцесса(ВерсияВход, НаименованиеВход,РезультатФункции) Экспорт
	
	Если  ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Параметры = Новый Массив();
		Параметры.Добавить(ВерсияВход);
		Параметры.Добавить(НаименованиеВход);
		Параметры.Добавить(РезультатФункции);
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияПроцессамиУХ.СоздатьШаблонПроцесса", Параметры);
		
		РезультатФункции 			= Параметры[2];
     		
	КонецЕсли;	
	
КонецПроцедуры
	
Процедура ВерсииРегламентов_ПолучитьСтруктуруГруппыВерсии(КонтекстВерсияРегламента, ДатаСреза, Сценарий, МеткаВремени, СтруктураГруппы, ИсточникВерсии = Неопределено) Экспорт
	
	Если  ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Параметры = Новый Массив();
		Параметры.Добавить(КонтекстВерсияРегламента);
		Параметры.Добавить(ДатаСреза);
		Параметры.Добавить(Сценарий);
		Параметры.Добавить(МеткаВремени);
		Параметры.Добавить(СтруктураГруппы);
		Параметры.Добавить(ИсточникВерсии);
		
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("РегламентыВызовСервера.ЗаполнитьРеквизитыСтруктурыГруппы", Параметры);
		
		СтруктураГруппы 			= Параметры[4];
	Иначе 		
		
		СхемаСКД = Отчеты.СтруктураРегламентаОтчетностиБПМСФО.ПолучитьМакет("СтруктураГруппы");
		НастройкиСКД = СхемаСКД.НастройкиПоУмолчанию;
				
		НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", ?(ИсточникВерсии = Неопределено, КонтекстВерсияРегламента.Ссылка, ИсточникВерсии));		
		ДеревоСтруктурыГруппы = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(СхемаСКД, НастройкиСКД, , , Истина, , , Новый ДеревоЗначений);	
		
		КэшДопВалют = РегламентыВызовСервера.ПолучитьДополнительныеВалюты(КонтекстВерсияРегламента);	
		Для каждого ВалютыОрганизации Из КэшДопВалют Цикл
			
			ОтборПоОрганизации = Новый Структура("ОрганизационнаяЕдиница", ВалютыОрганизации.Ключ);		
			Для Каждого УзелДерева Из ДеревоСтруктурыГруппы.Строки.НайтиСтроки(ОтборПоОрганизации, Истина) Цикл
				УзелДерева.ДополнительныеВалюты = ВалютыОрганизации.Значение;
			КонецЦикла;
			
		КонецЦикла;
		
		СтруктураДействий = Новый Структура("", );
		КэшируемыеЗначения = Новый Структура;
		РегламентыВызовСервера.ЗаполнитьТолькоПросмотрКонсолидирующих(ДеревоСтруктурыГруппы, СтруктураДействий, КэшируемыеЗначения);
		
		СтруктураГруппы =  ДеревоСтруктурыГруппы;
		
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область Организации

Процедура ПередЗаписьюОрганизацииБМПередЗаписью(Источник, Отказ) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Возврат;// в УХ редактируются на форме
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	//**Если Источник.МодельУчетаМСФО.Пустая() Тогда
	//	Источник.МодельУчетаМСФО = ПредопределенноеЗначение("Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки");
	//КонецЕсли;
	//
	//Если Источник.ПланСчетов.Пустая() Тогда
	//	Источник.ПланСчетов = Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("Хозрасчетный");
	//КонецЕсли;
	//
	Если Источник.ФункциональнаяВалюта.Пустая() Тогда
		Источник.ФункциональнаяВалюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	//
	//Если Источник.ВалютаПредоставленияОтчетности.Пустая() Тогда		
	//	Если Источник.Родитель.ВалютаПредоставленияОтчетности.Пустая() Тогда
	//		Источник.ВалютаПредоставленияОтчетности = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//	Иначе 
	//		Источник.ВалютаПредоставленияОтчетности = Источник.Родитель.ВалютаПредоставленияОтчетности;
	//	КонецЕсли;		
	//КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияОрганизации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Источник.ФункциональнаяВалюта) Тогда
		Источник.ФункциональнаяВалюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	//**Если НЕ ЗначениеЗаполнено(Источник.ВалютаПредоставленияОтчетности) Тогда
	//	Источник.ВалютаПредоставленияОтчетности = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(Источник.МодельУчетаМСФО) Тогда
	//	Источник.МодельУчетаМСФО = ПредопределенноеЗначение("Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки");
	//КонецЕсли;
	//
	//Если НЕ ЗначениеЗаполнено(Источник.ПланСчетов) Тогда
	//	Источник.ПланСчетов = Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("Хозрасчетный");
	//КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область НастраиваемыйОтчет

Процедура ЭО_ПодготовитьДвиженияПоРегистрамБюджетирования(тОбъект) Экспорт
	
	//Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
	//	Параметры = Новый Массив();
	//	Параметры.Добавить(тОбъект);
	//	ОбщегоНазначения.ВыполнитьМетодКонфигурации("ДвиженияБюджетированиеУХ.ПодготовитьДвиженияПоРегистрамБюджетирования", Параметры);
	//КонецЕсли;
	
КонецПроцедуры	

Процедура ЭО_ОчиститьДвиженияПоРегистрамБюджетирования(тОбъект) Экспорт
	
	//Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
	//	Параметры = Новый Массив();
	//	Параметры.Добавить(тОбъект);
	//	ОбщегоНазначения.ВыполнитьМетодКонфигурации("ДвиженияБюджетированиеУХ.ОчиститьДвиженияПоРегистрамБюджетирования", Параметры);
	//КонецЕсли;
	
КонецПроцедуры	

Функция ПолучитьТекстЗапросаСпискаНастраиваемогоОтчета() Экспорт
	РезультатФункции = "";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда		
		РезультатФункции = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
		|	НастраиваемыйОтчет.ВерсияДанных КАК ВерсияДанных,
		|	НастраиваемыйОтчет.ПометкаУдаления КАК ПометкаУдаления,
		|	НастраиваемыйОтчет.Номер КАК Номер,
		|	НастраиваемыйОтчет.Дата КАК Дата,
		|	НастраиваемыйОтчет.Проведен КАК Проведен,
		|	НастраиваемыйОтчет.Организация КАК Организация,
		|	НастраиваемыйОтчет.Проект КАК Проект,
		|	НастраиваемыйОтчет.ПериодОтчета КАК ПериодОтчета,
		|	НастраиваемыйОтчет.ПериодОкончания КАК ПериодОкончания,
		|	НастраиваемыйОтчет.Сценарий КАК Сценарий,
		|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
		|	НастраиваемыйОтчет.ШаблонОтчета КАК ШаблонОтчета,
		|	НастраиваемыйОтчет.Аналитика1 КАК Аналитика1,
		|	НастраиваемыйОтчет.Аналитика2 КАК Аналитика2,
		|	НастраиваемыйОтчет.Аналитика3 КАК Аналитика3,
		|	НастраиваемыйОтчет.Аналитика4 КАК Аналитика4,
		|	НастраиваемыйОтчет.Аналитика5 КАК Аналитика5,
		|	НастраиваемыйОтчет.Аналитика6 КАК Аналитика6,
		|	НастраиваемыйОтчет.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НастраиваемыйОтчет.УровеньТочности КАК УровеньТочности,
		|	ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) КАК Состояние,
		|	ПОДСТРОКА(НастраиваемыйОтчет.Комментарий, 1, 1024) КАК Комментарий,
		|	НастраиваемыйОтчет.ОсновнаяВалюта КАК ОсновнаяВалюта,
		|	НастраиваемыйОтчет.ФайлИмпорта КАК ФайлИмпорта,
		|	НастраиваемыйОтчет.ДатаИзменения КАК ДатаИзменения,
		|	НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей КАК ЧтениеНеактуальныхЗаписей,
		|	НастраиваемыйОтчет.ПравилоОбработки КАК ПравилоОбработки,
		|	НастраиваемыйОтчет.ИспользуемаяИБ КАК ИспользуемаяИБ,
		|	НастраиваемыйОтчет.СпособФормированияОтчета КАК СпособФормированияОтчета,
		|	НастраиваемыйОтчет.БланкИмпорта КАК БланкИмпорта,
		|	НастраиваемыйОтчет.ПравилоПроверки КАК ПравилоПроверки,
		|	НастраиваемыйОтчет.ПериодичностьСвертывания КАК ПериодичностьСвертывания,
		|	НастраиваемыйОтчет.НеВноситьИзменения КАК НеВноситьИзменения,
		|	НастраиваемыйОтчет.ПоследнийРедактировавший КАК ПоследнийРедактировавший,
		|	НастраиваемыйОтчет.СпособВывода КАК СпособВывода,
		|	РегистрМатрицыПолномочий.Исполняющий КАК Исполнитель,
		|	РегистрМатрицыПолномочий.Согласование КАК Согласование,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|			ТОГДА 3
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|			ТОГДА 0
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ЗаписанСОшибкой)
		|			ТОГДА 5
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Возвращен)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастраиваемыйОтчет.ПометкаУдаления
		|			ТОГДА 6
		|		ИНАЧЕ 0
		|	КОНЕЦ + ВЫБОР
		|		КОГДА НастраиваемыйОтчет.НеВноситьИзменения
		|			ТОГДА 12
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СостояниеГрафика,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)
		|			ТОГДА ЛОЖЬ
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|			ТОГДА ЛОЖЬ
		|		КОГДА РегистрМатрицыПолномочий.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
		|				И ОтветственныеОрганизаций_Исполнитель.Пользователь = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		КОГДА РегистрМатрицыПолномочий.Исполняющий = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИсполняетсяТекущимПользователем,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)
		|			ТОГДА ЛОЖЬ
		|		КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
		|				И ОтветственныеОрганизаций_Согласование.Пользователь = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		КОГДА РегистрМатрицыПолномочий.Согласование = &ТекущийПользователь
		|			ТОГДА ИСТИНА
		|		КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.ШаблоныУниверсальныхПроцессов
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК СогласуетсяТекущимПользователем
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|		ПО НастраиваемыйОтчет.ПериодОтчета = УправлениеПериодомСценария.ПериодСценария
		|			И НастраиваемыйОтчет.Сценарий = УправлениеПериодомСценария.Сценарий
		|			И (НЕ УправлениеПериодомСценария.ПометкаУдаления)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
		|		ПО НастраиваемыйОтчет.ВидОтчета = РегистрМатрицыПолномочий.ШаблонДокументаБД
		|			И НастраиваемыйОтчет.Организация = РегистрМатрицыПолномочий.Организация
		|			И (УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры = РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Исполнитель
		|		ПО (ОтветственныеОрганизаций_Исполнитель.Роль = РегистрМатрицыПолномочий.Исполняющий)
		|			И (ОтветственныеОрганизаций_Исполнитель.Организация = ВЫБОР
		|				КОГДА РегистрМатрицыПолномочий.Исполняющий_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА НастраиваемыйОтчет.Организация
		|				ИНАЧЕ РегистрМатрицыПолномочий.Исполняющий_Организация
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Согласование
		|		ПО (ОтветственныеОрганизаций_Согласование.Роль = РегистрМатрицыПолномочий.Согласование)
		|			И (ОтветственныеОрганизаций_Согласование.Организация = ВЫБОР
		|				КОГДА РегистрМатрицыПолномочий.Согласование_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ТОГДА НастраиваемыйОтчет.Организация
		|				ИНАЧЕ РегистрМатрицыПолномочий.Согласование_Организация
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектов
		|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект";
	Иначе
		РезультатФункции =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
		|	НастраиваемыйОтчет.ВерсияДанных КАК ВерсияДанных,
		|	НастраиваемыйОтчет.ПометкаУдаления КАК ПометкаУдаления,
		|	НастраиваемыйОтчет.Номер КАК Номер,
		|	НастраиваемыйОтчет.Дата КАК Дата,
		|	НастраиваемыйОтчет.Проведен КАК Проведен,
		|	НастраиваемыйОтчет.Организация КАК Организация,
		|	НастраиваемыйОтчет.Проект КАК Проект,
		|	НастраиваемыйОтчет.ПериодОтчета КАК ПериодОтчета,
		|	НастраиваемыйОтчет.Сценарий КАК Сценарий,
		|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
		|	НастраиваемыйОтчет.ШаблонОтчета КАК ШаблонОтчета,
		|	НастраиваемыйОтчет.Аналитика1 КАК Аналитика1,
		|	НастраиваемыйОтчет.Аналитика2 КАК Аналитика2,
		|	НастраиваемыйОтчет.Аналитика3 КАК Аналитика3,
		|	НастраиваемыйОтчет.Аналитика4 КАК Аналитика4,
		|	НастраиваемыйОтчет.Аналитика5 КАК Аналитика5,
		|	НастраиваемыйОтчет.Аналитика6 КАК Аналитика6,
		|	НастраиваемыйОтчет.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НастраиваемыйОтчет.УровеньТочности КАК УровеньТочности,
		|	НастраиваемыйОтчет.Комментарий КАК Комментарий,
		|	НастраиваемыйОтчет.ОсновнаяВалюта КАК ОсновнаяВалюта,
		|	НастраиваемыйОтчет.ФайлИмпорта КАК ФайлИмпорта,
		|	НастраиваемыйОтчет.ДатаИзменения КАК ДатаИзменения,
		|	НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей КАК ЧтениеНеактуальныхЗаписей,
		|	НастраиваемыйОтчет.ПравилоОбработки КАК ПравилоОбработки,
		|	НастраиваемыйОтчет.ИспользуемаяИБ КАК ИспользуемаяИБ,
		|	НастраиваемыйОтчет.СпособФормированияОтчета КАК СпособФормированияОтчета,
		|	НастраиваемыйОтчет.БланкИмпорта КАК БланкИмпорта,
		|	НастраиваемыйОтчет.ПравилоПроверки КАК ПравилоПроверки,
		|	НастраиваемыйОтчет.ПериодичностьСвертывания КАК ПериодичностьСвертывания,
		|	НастраиваемыйОтчет.НеВноситьИзменения КАК НеВноситьИзменения,
		|	НастраиваемыйОтчет.ПоследнийРедактировавший КАК ПоследнийРедактировавший,
		|	НастраиваемыйОтчет.СпособВывода КАК СпособВывода
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|		ПО НастраиваемыйОтчет.ПериодОтчета = УправлениеПериодомСценария.ПериодСценария
		|			И НастраиваемыйОтчет.Сценарий = УправлениеПериодомСценария.Сценарий
		|			И (НЕ УправлениеПериодомСценария.ПометкаУдаления)";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Процедура РассчитатьДДСПоУсловиямОплаты(тОбъект) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(тОбъект);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("СводнаяТаблицаУХ.РассчитатьДДСПоУсловиямОплаты", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаписьПоказателяСРасчетомЗависимых_ЗаполнитьДанныеПоПериодам(ОбработкаОбъект, ОбъектРасчета, ТаблицаСобытийЗагрузки, ЗаполнениеВыполнено) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Если ОбработкаОбъект.ЗаполнитьДанныеПоПериодам(ОбъектРасчета) Тогда
			ТаблицаСобытийЗагрузки = ОбработкаОбъект.ТаблицаСобытийЗагрузкиПериоды;
			ЗаполнениеВыполнено = Истина;
		КонецЕсли;
	Иначе
		ВызватьИсключение НСтр("ru = ' Функциональность не поддерживается '");
	КонецЕсли;
КонецПроцедуры

Функция ВернутьИмяФормыАналитическогоБланка()  Экспорт
	
	Параметры = Новый Массив();
	тИмяФормы = "";
	Параметры.Добавить(тИмяФормы);
	ОбщегоНазначения.ВыполнитьМетодКонфигурации("АналитическийБланкУХСервер.ВернутьИмяФормыАналитическогоБланка", Параметры);
	Возврат Параметры[0];
	
КонецФункции	

Процедура СкопироватьНастройкиБланкаСТ(Выборка_Ссылка, НовЭл_Ссылка, СписокПараметровКопирования) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		ОбработкаОбъект = Неопределено;
		Параметры.Добавить(Выборка_Ссылка);
		Параметры.Добавить(НовЭл_Ссылка);
		Параметры.Добавить(СписокПараметровКопирования);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("СводнаяТаблицаУХ.СкопироватьНастройкиБланка", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура СкопироватьНастройкиБланкаМП(Выборка_Ссылка, НовЭл_Ссылка) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		ОбработкаОбъект = Неопределено;
		Параметры.Добавить(Выборка_Ссылка);
		Параметры.Добавить(НовЭл_Ссылка);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("АналитическийБланкУХСервер.СкопироватьНастройкиБланка", Параметры);				
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьШаблонМакетаДляВыгрузки(ИсходныйМакет,БланкОтчета,Периодичность=Неопределено,КоличествоПериодов=Неопределено,ВыгрузкаМакетаДляEXCEL = Ложь,ОбъектРасчета = Неопределено) Экспорт

	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		ОбработкаОбъект = Неопределено;
		Параметры.Добавить(ИсходныйМакет);
		Параметры.Добавить(БланкОтчета);
		Параметры.Добавить(Периодичность);
		Параметры.Добавить(КоличествоПериодов);
        Параметры.Добавить(ВыгрузкаМакетаДляEXCEL);

		Возврат ОбщегоНазначения.ВызватьФункциюКонфигурации("АналитическийБланкУХСервер.ПолучитьШаблонМакетаДляВыгрузки", Параметры);				
	КонецЕсли;

	
КонецФункции	
	
#КонецОбласти

#Область РасчетПоказателей

Функция ИспользоватьРасширенныйРасчет() Экспорт
		
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		ПризнакРасширенногоРасчета = Неопределено;
		Параметры.Добавить(ПризнакРасширенногоРасчета);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("УправлениеРасчетомПоказателей.ИспользоватьРасширенныйРасчет", Параметры);		
		Возврат Параметры[0];
	Иначе	
		Возврат Ложь;
	КонецЕсли;
				
КонецФункции

Функция ПолучитьОбработкуЗаполненияДанных(ОбъектРасчета=Неопределено) Экспорт
		
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		ОбработкаОбъект = Неопределено;
		Параметры.Добавить(ОбработкаОбъект);
		Параметры.Добавить(ОбъектРасчета);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("УправлениеРасчетомПоказателей.ПолучитьОбработкуРасчета", Параметры);		
		ОбработкаОбъект = Параметры[0];
		Возврат ОбработкаОбъект;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
					
КонецФункции

#КонецОбласти

#Область ОграниченияДоступа

Процедура НастройкиДоступаПередЗаписью(ОбъектВход, Отказ) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ОбъектВход);
		Параметры.Добавить(Отказ);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("НастройкаПравДоступаУХ.НастройкиПередЗаписью", Параметры);
	Иначе
		// Не устанавливаем ограничения доступа.
	КонецЕсли;
КонецПроцедуры	

Процедура НастройкиДоступаПриЗаписи(ОбъектВход, РазделВход) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ОбъектВход);
		Параметры.Добавить(РазделВход);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("НастройкаПравДоступаУХ.НастройкиПриЗаписи", Параметры);
	Иначе
		// Не устанавливаем ограничения доступа.
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область ОбработкаВызововБСП

Процедура ПриДобавленииОбработчиковУстановкиПараметровСеанса(Обработчики) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(Обработчики);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("УправлениеХолдингомУХ.ПриДобавленииОбработчиковУстановкиПараметровСеанса", Параметры);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПодсистемыУХ

Функция ПрикладныеПодсистемыУХМСФО() Экспорт
	ПрикладныеПодсистемыУХ = Новый Массив;
	ЗаполнитьДочерниеПодсистемы(ПрикладныеПодсистемыУХ, Метаданные.Подсистемы.УчетМСФО);
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ПодсистемаУД = "УправлениеДоговорамиИПроектами";
		ЗаполнитьДочерниеПодсистемы(ПрикладныеПодсистемыУХ, Метаданные.Подсистемы[ПодсистемаУД]);
	КонецЕсли;
	Возврат ПрикладныеПодсистемыУХ;
КонецФункции

Процедура ЗаполнитьДочерниеПодсистемы(РезультатПодсистемы, ПодсистемаИсточник)

	РезультатПодсистемы.Добавить(ПодсистемаИсточник);
	
	Для каждого ПодсистемаДочерняя Из ПодсистемаИсточник.Подсистемы Цикл		
		ЗаполнитьДочерниеПодсистемы(РезультатПодсистемы, ПодсистемаДочерняя);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область БланкиОтчетов

Процедура ВыполнитьРеструктуризациюБланков(Ссылка,АдресПараметровРеструктуризации) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(Ссылка);
		Параметры.Добавить(АдресПараметровРеструктуризации);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("БланкиОтчетовУХ.ВыполнитьРеструктуризациюБланков", Параметры);
	КонецЕсли;
		
КонецПроцедуры	  

Процедура ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет,Заголовок) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ПолеТабличногоДокументаМакет);
		Параметры.Добавить(Заголовок);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("БланкиОтчетовУХ.ВернутьРисунокПустойТаблицы", Параметры);
	КонецЕсли;
	
		
КонецПроцедуры	

Процедура ОбновитьКэшОтборовОперандов(ПолетабличногоДокументаМакет,АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,ОбъектАБ,РасшифровкаОперанда) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив();
		Параметры.Добавить(ПолеТабличногоДокументаМакет);
		Параметры.Добавить(АдресРезультатаРедактирования);
		Параметры.Добавить(МассивОбрабатываемыхИмен);
        Параметры.Добавить(ОбъектАБ);
		Параметры.Добавить(РасшифровкаОперанда);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("БланкиОтчетовУХ.ОбновитьКэшОтборовОперандов", Параметры);
	КонецЕсли;
  
КонецПроцедуры	

Функция ПолучитьНаборЗаписейРегистраНастройкиАналитическихБланков() Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ИмяРегистра = "НастройкиАналитическихБланков";
		Возврат РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	Иначе
		ВызватьИсключение "Функциональность не поддерживается";
	КонецЕсли;
КонецФункции

Процедура СохранитьМакетМногопериодногоБланка(Бланк,ПолеТабличногоДокументаМакет,ОбъектАБ,УникальныйИдентификатор,Отказ,МакетДляВыводаПоказателей = Неопределено) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Параметры = Новый Массив();
		Параметры.Добавить(Бланк);
		Параметры.Добавить(ПолеТабличногоДокументаМакет);
		Параметры.Добавить(ОбъектАБ);
		Параметры.Добавить(УникальныйИдентификатор);
        Параметры.Добавить(Отказ);
		Параметры.Добавить(МакетДляВыводаПоказателей);
	
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("АналитическийБланкГенерацияМакетаУХСервер.СохранитьМакетМногопериодногоБланка", Параметры);

		
	КонецЕсли;	
		
КонецПроцедуры

Функция ЗаполнитьКэшПоказателей(КэшФункцийПоказателей, Показатель = Неопределено, ПравилоОбработки, Владелец) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ПроцедурыРасчетов.Процедура КАК Процедура,
		|	ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод,
		|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии КАК ПересчитыватьПриОткрытии,
		|	ПроцедурыРасчетов.РедактированиеВозможно КАК РедактированиеВозможно
		|ПОМЕСТИТЬ ПроцедурыРасчетов
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПотребительРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоказателиОтчетов.Код КАК Код,
		|	ПоказателиОтчетов.Ссылка КАК Ссылка,
		|	ПоказателиОтчетов.Наименование КАК Наименование,
		|	ЕСТЬNULL(ПроцедурыРасчетов.Процедура, """") КАК Процедура,
		|	ЕСТЬNULL(ПроцедурыРасчетов.ПересчитыватьПриОткрытии, ЛОЖЬ) КАК ПересчитыватьПриОткрытии,
		|	ЕСТЬNULL(ПроцедурыРасчетов.РедактированиеВозможно, ЛОЖЬ) КАК РедактированиеВозможно,
		|	ЕСТЬNULL(ПроцедурыРасчетов.ПроизвольныйКод, ЛОЖЬ) КАК ПроизвольныйКод,
		|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
		|	ПоказателиОтчетов.ТипПоказателя КАК ТипПоказателя,
		|	ПоказателиОтчетов.Предназначение КАК Предназначение,
		|	ПоказателиОтчетов.СчетБД КАК СчетБД,
		|	ПоказателиОтчетов.ВидИтогаПоСчету КАК ВидИтогаПоСчету,
		|	ПоказателиОтчетов.КоррСчетБД КАК КоррСчетБД,
		|	ПоказателиОтчетов.ДействияПриАктуализации КАК ДействияПриАктуализации,
		|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
		|	ПоказателиОтчетов.Защищенный КАК Защищенный,
		|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
		|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
		|	ПоказателиОтчетов.ДляОтраженияКурсовыхРазниц КАК ДляОтраженияКурсовыхРазниц,
		|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
		|	ПоказателиОтчетов.Проверочный КАК Проверочный,
		|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
		|	ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду КАК СпособРасчетаИтогаПоПериоду,
		|	ПоказателиОтчетов.ОценкаПоложительногоОтклонения КАК ОценкаПоложительногоОтклонения,
		|	ПоказателиОтчетов.ВидПоказателя КАК ВидПоказателя,
		|	ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ПоказателиОтчетов.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
		|	ПоказателиОтчетов.СтатьяДвиженияРесурсов КАК СтатьяДвиженияРесурсов,
		//|	ПоказателиОтчетов.КонтролироватьЛимиты КАК КонтролироватьЛимиты,
		|	ПоказателиОтчетов.ПриходРасход КАК ПриходРасход,
		|	ПоказателиОтчетов.НеСуммируется КАК НеСуммируется,
		|	ВЫРАЗИТЬ(ПоказателиОтчетов.Описание КАК СТРОКА(250)) КАК Описание
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &Владелец
		|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НазначениеРасчетов", ПравилоОбработки);
		Запрос.УстановитьПараметр("Владелец"        , Владелец);
		
		Если ТипЗнч(КэшФункцийПоказателей) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Показатель) Тогда
			
			Запрос.Текст = Запрос.Текст + " И ПоказателиОтчетов.Ссылка = &Показатель";
			Запрос.УстановитьПараметр("Показатель", Показатель);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ТекСтрока = КэшФункцийПоказателей.Найти(Показатель, "Ссылка");
				Если ТекСтрока = Неопределено Тогда
					ТекСтрока = КэшФункцийПоказателей.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, , "Код");
				ТекСтрока.Код = СокрЛП(Выборка.Код);
			КонецЕсли;
		Иначе
			
			КэшФункцийПоказателей = Новый ТаблицаЗначений;
			
			КэшФункцийПоказателей.Колонки.Добавить("Код"      , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("Процедура", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("ПроцедураРедактирования", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("АдресС1К1", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
			КэшФункцийПоказателей.Колонки.Добавить("Наименование");
			КэшФункцийПоказателей.Колонки.Добавить("СпособОбработки");
			КэшФункцийПоказателей.Колонки.Добавить("ПроизвольныйКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ПересчитыватьПриОткрытии", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("РедактированиеВозможно", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов"));
			КэшФункцийПоказателей.Колонки.Добавить("ТипПоказателя", Новый ОписаниеТипов("СправочникСсылка.ТипыПоказателей"));
			КэшФункцийПоказателей.Колонки.Добавить("Предназначение", Новый ОписаниеТипов("ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета"));
			
			КэшФункцийПоказателей.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
			КэшФункцийПоказателей.Колонки.Добавить("СтатьяДоходовИРасходов", ПолучитьОписаниеТипаСтатьиДоходовИРасходов());
			КэшФункцийПоказателей.Колонки.Добавить("СтатьяДвиженияРесурсов", ПолучитьОписаниеТипаСтатьиДвиженияРесурсов());
			//КэшФункцийПоказателей.Колонки.Добавить("КонтролироватьЛимиты", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ПриходРасход", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход"));
			
			КэшФункцийПоказателей.Колонки.Добавить("СчетБД", Новый ОписаниеТипов("СправочникСсылка.СчетаБД"));
			КэшФункцийПоказателей.Колонки.Добавить("ВидИтогаПоСчету", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБухгалтерскихИтогов"));
			КэшФункцийПоказателей.Колонки.Добавить("КоррСчетБД", Новый ОписаниеТипов("СправочникСсылка.СчетаБД"));
			
			КэшФункцийПоказателей.Колонки.Добавить("ДействияПриАктуализации", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияПриАктуализацииБюджетов"));
			КэшФункцийПоказателей.Колонки.Добавить("НеФинансовый", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("НеСуммируется", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("Защищенный", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			КэшФункцийПоказателей.Колонки.Добавить("ВидКурса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКурсов"));
			КэшФункцийПоказателей.Колонки.Добавить("ПересчитыватьВалютнуюСумму", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ДляОтраженияКурсовыхРазниц", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			КэшФункцийПоказателей.Колонки.Добавить("НеМасштабируется", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("Проверочный", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			КэшФункцийПоказателей.Колонки.Добавить("ВидИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИтоговПоказателя"));
			КэшФункцийПоказателей.Колонки.Добавить("СпособРасчетаИтогаПоПериоду", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИтоговПоказателяПоПериоду"));
			
			КэшФункцийПоказателей.Колонки.Добавить("ОценкаПоложительногоОтклонения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОценокОтклонений"));
			КэшФункцийПоказателей.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПоказателей"));
			
			КэшФункцийПоказателей.Колонки.Добавить("Описание");
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = КэшФункцийПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, ,"Код");
				НоваяСтрока.Код = СокрЛП(Выборка.Код);
			КонецЦикла;
			
			КэшФункцийПоказателей.Индексы.Добавить("Код, Ссылка");
			
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроцедурыРасчетов.ПотребительРасчета КАК ПотребительРасчета,
		|	ПроцедурыРасчетов.Процедура КАК Процедура,
		|	ПроцедурыРасчетов.ПроизвольныйКод КАК ПроизвольныйКод,
		|	ПроцедурыРасчетов.ПересчитыватьПриОткрытии КАК ПересчитыватьПриОткрытии,
		|	ПроцедурыРасчетов.РедактированиеВозможно КАК РедактированиеВозможно
		|ПОМЕСТИТЬ ПроцедурыРасчетов
		|ИЗ
		|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|ГДЕ
		|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПотребительРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоказателиОтчетов.Код КАК Код,
		|	ПоказателиОтчетов.Ссылка КАК Ссылка,
		|	ПоказателиОтчетов.Наименование КАК Наименование,
		|	ЕСТЬNULL(ПроцедурыРасчетов.Процедура, """") КАК Процедура,
		|	ЕСТЬNULL(ПроцедурыРасчетов.ПересчитыватьПриОткрытии, ЛОЖЬ) КАК ПересчитыватьПриОткрытии,
		|	ЕСТЬNULL(ПроцедурыРасчетов.РедактированиеВозможно, ЛОЖЬ) КАК РедактированиеВозможно,
		|	ЕСТЬNULL(ПроцедурыРасчетов.ПроизвольныйКод, ЛОЖЬ) КАК ПроизвольныйКод,
		|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
		|	ПоказателиОтчетов.ТипПоказателя КАК ТипПоказателя,
		|	ПоказателиОтчетов.Предназначение КАК Предназначение,
		|	ПоказателиОтчетов.СчетБД КАК СчетБД,
		|	ПоказателиОтчетов.ВидИтогаПоСчету КАК ВидИтогаПоСчету,
		|	ПоказателиОтчетов.КоррСчетБД КАК КоррСчетБД,
		|	ПоказателиОтчетов.ДействияПриАктуализации КАК ДействияПриАктуализации,
		|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
		|	ПоказателиОтчетов.Защищенный КАК Защищенный,
		|	ПоказателиОтчетов.ВидКурса КАК ВидКурса,
		|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
		|	ПоказателиОтчетов.ДляОтраженияКурсовыхРазниц КАК ДляОтраженияКурсовыхРазниц,
		|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
		|	ПоказателиОтчетов.Проверочный КАК Проверочный,
		|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
		|	ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду КАК СпособРасчетаИтогаПоПериоду,
		|	ПоказателиОтчетов.ОценкаПоложительногоОтклонения КАК ОценкаПоложительногоОтклонения,
		|	ПоказателиОтчетов.ВидПоказателя КАК ВидПоказателя,
		|	ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		//|	ПоказателиОтчетов.КонтролироватьЛимиты КАК КонтролироватьЛимиты,
		|	ПоказателиОтчетов.ПриходРасход КАК ПриходРасход,
		|	ПоказателиОтчетов.НеСуммируется КАК НеСуммируется,
		|	ВЫРАЗИТЬ(ПоказателиОтчетов.Описание КАК СТРОКА(250)) КАК Описание
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПроцедурыРасчетов КАК ПроцедурыРасчетов
		|		ПО ПоказателиОтчетов.Ссылка = ПроцедурыРасчетов.ПотребительРасчета
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &Владелец
		|	И НЕ ПоказателиОтчетов.ПометкаУдаления";
		
		Запрос.УстановитьПараметр("НазначениеРасчетов", ПравилоОбработки);
		Запрос.УстановитьПараметр("Владелец"        , Владелец);
		
		Если ТипЗнч(КэшФункцийПоказателей) = Тип("ТаблицаЗначений") И ЗначениеЗаполнено(Показатель) Тогда
			
			Запрос.Текст = Запрос.Текст + " И ПоказателиОтчетов.Ссылка = &Показатель";
			Запрос.УстановитьПараметр("Показатель", Показатель);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				ТекСтрока = КэшФункцийПоказателей.Найти(Показатель, "Ссылка");
				Если ТекСтрока = Неопределено Тогда
					ТекСтрока = КэшФункцийПоказателей.Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекСтрока, Выборка, , "Код");
				ТекСтрока.Код = СокрЛП(Выборка.Код);
			КонецЕсли;
		Иначе
			
			КэшФункцийПоказателей = Новый ТаблицаЗначений;
			
			КэшФункцийПоказателей.Колонки.Добавить("Код"      , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("Процедура", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("ПроцедураРедактирования", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("АдресС1К1", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
			КэшФункцийПоказателей.Колонки.Добавить("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
			КэшФункцийПоказателей.Колонки.Добавить("Наименование");
			КэшФункцийПоказателей.Колонки.Добавить("СпособОбработки");
			КэшФункцийПоказателей.Колонки.Добавить("ПроизвольныйКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ПересчитыватьПриОткрытии", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("РедактированиеВозможно", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ТипЗначения", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов"));
			КэшФункцийПоказателей.Колонки.Добавить("ТипПоказателя", Новый ОписаниеТипов("СправочникСсылка.ТипыПоказателей"));
			КэшФункцийПоказателей.Колонки.Добавить("Предназначение", Новый ОписаниеТипов("ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета"));
			
			КэшФункцийПоказателей.Колонки.Добавить("СтатьяДвиженияДенежныхСредств", Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
			КэшФункцийПоказателей.Колонки.Добавить("СтатьяДоходовИРасходов", ПолучитьОписаниеТипаСтатьиДоходовИРасходов());
			КэшФункцийПоказателей.Колонки.Добавить("СтатьяДвиженияРесурсов", ПолучитьОписаниеТипаСтатьиДвиженияРесурсов());
			//КэшФункцийПоказателей.Колонки.Добавить("КонтролироватьЛимиты", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ПриходРасход", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход"));
			
			КэшФункцийПоказателей.Колонки.Добавить("СчетБД", Новый ОписаниеТипов("СправочникСсылка.СчетаБД"));
			КэшФункцийПоказателей.Колонки.Добавить("ВидИтогаПоСчету", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыБухгалтерскихИтогов"));
			КэшФункцийПоказателей.Колонки.Добавить("КоррСчетБД", Новый ОписаниеТипов("СправочникСсылка.СчетаБД"));
			
			КэшФункцийПоказателей.Колонки.Добавить("ДействияПриАктуализации", Новый ОписаниеТипов("ПеречислениеСсылка.ДействияПриАктуализацииБюджетов"));
			КэшФункцийПоказателей.Колонки.Добавить("НеФинансовый", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("НеСуммируется", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("Защищенный", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			КэшФункцийПоказателей.Колонки.Добавить("ВидКурса", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыКурсов"));
			КэшФункцийПоказателей.Колонки.Добавить("ПересчитыватьВалютнуюСумму", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("ДляОтраженияКурсовыхРазниц", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			КэшФункцийПоказателей.Колонки.Добавить("НеМасштабируется", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			КэшФункцийПоказателей.Колонки.Добавить("Проверочный", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
			КэшФункцийПоказателей.Колонки.Добавить("ВидИтога", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИтоговПоказателя"));
			КэшФункцийПоказателей.Колонки.Добавить("СпособРасчетаИтогаПоПериоду", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИтоговПоказателяПоПериоду"));
			
			КэшФункцийПоказателей.Колонки.Добавить("ОценкаПоложительногоОтклонения", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыОценокОтклонений"));
			КэшФункцийПоказателей.Колонки.Добавить("ВидПоказателя", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыПоказателей"));
			
			КэшФункцийПоказателей.Колонки.Добавить("Описание", Новый ОписаниеТипов("Строка"));
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				НоваяСтрока = КэшФункцийПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, ,"Код");
				НоваяСтрока.Код = СокрЛП(Выборка.Код);
			КонецЦикла;
			
			КэшФункцийПоказателей.Индексы.Добавить("Код, Ссылка");
			
		КонецЕсли;
	КонецЕсли;
КонецФункции

Функция ПодготовитьМакетШаблоновВывода(тКолонки) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Параметры = Новый Массив();
		Параметры.Добавить(тКолонки);
		
		Возврат ОбщегоНазначения.ВызватьФункциюКонфигурации("АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьМакетШаблоновВывода", Параметры);			
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	
		
КонецФункции	

#КонецОбласти

#Область Прочее

Функция ПолучитьСтрокуПредставлениеТипаСтатьяБДР() Экспорт
	РезультатФункции = "Строка";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		РезультатФункции = "СправочникСсылка.СтатьиДоходовИРасходов";
	Иначе
		РезультатФункции = "Строка";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтрокуПредставлениеТипаСтатьяБДР()

Функция ПолучитьСтрокуПредставлениеТипаСтатьяРесурсов() Экспорт
	РезультатФункции = "Строка";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		РезультатФункции = "СправочникСсылка.СтатьиДвиженияРесурсов";
	Иначе
		РезультатФункции = "Строка";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтрокуПредставлениеТипаСтатьяРесурсов()

Функция ПолучитьПустоеЗначениеТипа(ИмяТипаВход) Экспорт
	РезультатФункции = Неопределено;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		НовыйТип = Тип(ИмяТипаВход);
		РезультатФункции = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(НовыйТип);	
	Иначе
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьОписаниеТипаПоСтроке(СтрокаВход) Экспорт
	РезультатФункции = Неопределено;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		РезультатФункции = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходовИРасходов");	
	Иначе
		РезультатФункции = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТипаПоСтроке()

Функция ПолучитьОписаниеТипаСтатьиДоходовИРасходов() Экспорт
	РезультатФункции = Неопределено;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		РезультатФункции = Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходовИРасходов");	
	Иначе
		РезультатФункции = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТипаСтатьиДоходовИРасходов()

Функция ПолучитьОписаниеТипаСтатьиДвиженияРесурсов() Экспорт
	РезультатФункции = Неопределено;
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		РезультатФункции = Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияРесурсов");	
	Иначе
		РезультатФункции = Новый ОписаниеТипов("Строка");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТипаСтатьиДвиженияРесурсов()

Процедура ДобавитьОбъектыПечатиУХ(СписокОбъектовИзм) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(Новый СписокЗначений);
		ОбщегоНазначения.ВыполнитьМетодКонфигурации("УправлениеПечатьюУХ.СписокОбъектыПечатиУХ", Параметры);
		СписокУХ = Параметры[0];
		Для Каждого ТекСписокУХ Из СписокУХ Цикл
			СписокОбъектовИзм.Добавить(ТекСписокУХ.Значение);
		КонецЦикла;	
	Иначе
		// Не изменяем список объектов.
	КонецЕсли;
КонецПроцедуры	

Процедура ОповеститьПользователей(ВидСобытия, ШаблонОповещения = Неопределено, ИсточникСсылка = Неопределено, СписокРассылки = Неопределено, ДопПараметры = Неопределено, ЗадачаВход = Неопределено, ЭтапПроцессаВход = Неопределено) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(ВидСобытия);
		Параметры.Добавить(Неопределено);
		Параметры.Добавить(ИсточникСсылка);
        Параметры.Добавить(СписокРассылки);
        Параметры.Добавить(ДопПараметры);
        ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияОповещениямиУХ.ОповеститьПользователей", Параметры);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОповеститьПользователейОбИзмененииСостояния(ТекЗапись,ОбъектОповещенияСсылка) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Параметры = Новый Массив;
		Параметры.Добавить(ТекЗапись);
		Параметры.Добавить(ОбъектОповещенияСсылка);
        ОбщегоНазначения.ВыполнитьМетодКонфигурации("МодульУправленияОповещениямиУХ.ОповеститьПользователейОбИзмененииСостояния", Параметры);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти
