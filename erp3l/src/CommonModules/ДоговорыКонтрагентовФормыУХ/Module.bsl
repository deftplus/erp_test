////////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы УХ, расширяющие логику форм справочника "Договоры контрагентов" БП
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Процедура ЗаменитьПараметрВыбораКонтрагентНаВладелец(Отбор) Экспорт
	
	Если Отбор.Свойство("Контрагент") И ЗначениеЗаполнено(Отбор.Контрагент)
			И Не Отбор.Свойство("Владелец") Тогда
		Отбор.Вставить("Владелец", Отбор.Контрагент);
		Отбор.Удалить("Контрагент");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПредставлениеОтбораФормыВыбора(Форма, ОбъектМетаданных = Неопределено) Экспорт
	// Вместо ВидДоговора используется ВидДоговораУХ.
	
	// Отбор по организации и владельцу - наиболее частотный.
	ПриоритетныеПоля = Новый Массив;
	ПриоритетныеПоля.Добавить("Организация");
	ПриоритетныеПоля.Добавить("Владелец");
	
	// Отборы, которые чаще всего передаются с видом отбора "в списке", унесем в конец строки - они слишком длинные.
	НеприоритетныеПоля = Новый Массив;
	НеприоритетныеПоля.Добавить("ВидДоговора");
	НеприоритетныеПоля.Добавить("ВидДоговораУХ");
	
	УправлениеФормойУХ.УстановитьПредставлениеОтбора(Форма, ,ОбъектМетаданных, ПриоритетныеПоля, НеприоритетныеПоля);
	
КонецПроцедуры

Процедура УстановитьЗаголовокФормы(Форма) Экспорт
	
	Объект = Форма.Объект;
	СтроковоеПредставлениеВидаДоговора = ДоговорыКонтрагентовФормыУХКлиентСервер.ПредставлениеВидаДоговора(Объект.ВидДоговораУХ, Объект.ВидСоглашения);
	
	Если Объект.ДоговорКонтрагента.Пустая() Тогда
		Форма.Заголовок = СтроковоеПредставлениеВидаДоговора + НСтр("ru = ' (создание)'");
	Иначе
			
		ПодстрокиЗаголовка = Новый Массив;
		ПодстрокиЗаголовка.Добавить(Объект.ДоговорКонтрагента);
		ПодстрокиЗаголовка.Добавить(СтрШаблон("(%1)", СтроковоеПредставлениеВидаДоговора));
		
		Если ЗначениеЗаполнено(Объект.НомерДополнительногоСоглашения) Тогда
			ПодстрокиЗаголовка.Добавить(НСтр("ru = 'вер.'"));
			ПодстрокиЗаголовка.Добавить(Строка(Объект.НомерДополнительногоСоглашения));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			ПодстрокиЗаголовка.Добавить(НСтр("ru = 'от'"));
			ПодстрокиЗаголовка.Добавить(Строка(Объект.Дата));
		КонецЕсли;
		
		Если Объект.Ссылка.Пустая() Тогда
			ПодстрокиЗаголовка.Добавить(НСтр("ru = '(создание)'"));
		КонецЕсли;
		
		Форма.Заголовок = СтрСоединить(ПодстрокиЗаголовка, " ");

	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборВидовДоговоровКонтрагентов(ДинамическийСписок, ИмяПоляВидДоговораУХ = "Ссылка") Экспорт
	
	Исключения = Справочники.ВидыДоговоровКонтрагентовУХ.НедоступныеВидыДоговоров();
	
	Если Исключения.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			ДинамическийСписок, ИмяПоляВидДоговораУХ, Исключения, ВидСравненияКомпоновкиДанных.НеВСписке);
	КонецЕсли;
	
	
КонецПроцедуры

Процедура УстановитьРекомендуемоеУсловиеОплаты(Форма) экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		РольКонтрагента = УправлениеОбязательствамиУХ.ПолучитьРольКонтрагентаПоВидуДоговора(Объект.ВидДоговораУХ);
		Если ЗначениеЗаполнено(РольКонтрагента)  Тогда
			СтруктураРекомендованноеУсловиеОплаты = УправлениеОбязательствамиУХ.ПолучитьРекомендованноеУсловиеОплатыКонрагента(Объект.Контрагент, РольКонтрагента);
			Форма.РекомендуемоеУсловиеОплаты = СтруктураРекомендованноеУсловиеОплаты.УсловиеОплатыТекст;
			Форма.РекомендуемыйПроцентАванса = СтруктураРекомендованноеУсловиеОплаты.ПроцентАванса;
			Форма.РекомендуемыйСрокОтсрочки = СтруктураРекомендованноеУсловиеОплаты.СрокОтсрочки;
			Форма.ДокументУстановкиРекомендуемогоУсловия = СтруктураРекомендованноеУсловиеОплаты.Регистратор;
		КонецЕсли;
	Иначе
		Форма.РекомендуемоеУсловиеОплаты = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьЭлементыАналитикСтатейНаФорме(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	НуженГрафик = ТребуетсяГрафикРасчетов(Форма);
	ЕстьСтатьяДДС = (Элементы.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено);
	ЕстьСтатьяИсполнения = (Элементы.Найти("ОсновнаяСтатьяИсполнение") <> Неопределено);
	ЕстьСтатьяКомиссионногоВознаграждения = (Элементы.Найти("СтатьяКомиссионногоВознаграждения") <> Неопределено);
	
	МассивОписанийСтатей = Новый Массив;
	
	Если НуженГрафик Тогда
		ДобавитьАналитикиСтатейВДетализацииГрафика(Форма, МассивОписанийСтатей);
	КонецЕсли;	
	
	Если ЕстьСтатьяДДС Тогда
		ДобавитьОписаниеАналитикиСтатьиДДС(Форма, МассивОписанийСтатей);
	КонецЕсли;
	
	Если ЕстьСтатьяИсполнения Тогда
		ДобавитьОписаниеАналитикиСтатьиИсполнения(Форма, МассивОписанийСтатей);
	КонецЕсли;
	
	Если ЕстьСтатьяКомиссионногоВознаграждения Тогда
		ДобавитьОписаниеАналитикиСтатьиКомиссионногоВознаграждения(Форма, МассивОписанийСтатей);
	КонецЕсли;
		
	Если МассивОписанийСтатей.Количество() > 0 Тогда	
		ПараметрыПоляВвода = Новый Структура;	
		АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(Форма, МассивОписанийСтатей, ПараметрыПоляВвода);
	КонецЕсли;	
	
	Если НуженГрафик Тогда
		УстановитьЗаголовокАналитик(Форма, "ГрафикРасчетовЛинейныйАналитика%1", Нстр("ru = 'Аналитика %1'"));
	КонецЕсли;
	
	Если ЕстьСтатьяДДС Тогда
		УстановитьЗаголовокАналитик(Форма, "АналитикаБДДС%1", Нстр("ru = 'Аналитика %1'"));
		УстановитьДействиеАналитик(Форма, "АналитикаБДДС%1", "ПриИзменении", "Подключаемый_ПриИзмененииАналитики");
	КонецЕсли;
	
	Если ЕстьСтатьяИсполнения Тогда
		УстановитьЗаголовокАналитик(Форма, "АналитикаИсполнение%1", Нстр("ru = 'Аналитика %1'"));
		УстановитьДействиеАналитик(Форма, "АналитикаИсполнение%1", "ПриИзменении", "Подключаемый_ПриИзмененииАналитики");
	КонецЕсли;
	
	Если ЕстьСтатьяКомиссионногоВознаграждения Тогда
		УстановитьЗаголовокАналитик(Форма, "АналитикаКомиссионногоВознаграждения%1", Нстр("ru = 'Аналитика %1'"));
		УстановитьДействиеАналитик(Форма, "АналитикаКомиссионногоВознаграждения%1", "ПриИзменении", "Подключаемый_ПриИзмененииАналитики");
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокАналитик(Форма, ШаблонИмениЭлементаАналитики, ШаблонЗаголовкаЭлемента)
	
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		ЗаголовокАналитики = СтрШаблон(ШаблонЗаголовкаЭлемента, Формат(Сч, "ЧГ="));
				
		ИмяЭлемента = СтрШаблон(ШаблонИмениЭлементаАналитики, Формат(Сч, "ЧГ="));
		ЭлементАналитика = Форма.Элементы[ИмяЭлемента];
		ЭлементАналитика.Заголовок = ЗаголовокАналитики;
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьДействиеАналитик(Форма, ШаблонИмениЭлементаАналитики, ИмяСобытия, ИмяОбработчика)
	
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
				
		ИмяЭлемента = СтрШаблон(ШаблонИмениЭлементаАналитики, Формат(Сч, "ЧГ="));
		ЭлементАналитика = Форма.Элементы[ИмяЭлемента];
		ЭлементАналитика.УстановитьДействие(ИмяСобытия, ИмяОбработчика);
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьЗаголовкиКолонокТаблицы(КолонкиТаблицы, ПредставленияКолонок) Экспорт
	
	Для каждого Колонка Из КолонкиТаблицы Цикл
		Если ПредставленияКолонок.Свойство(Колонка.Имя, Колонка.Заголовок) 
			И Не ЗначениеЗаполнено(Колонка.Заголовок) Тогда
			Колонка.Заголовок = Колонка.Имя;
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Функция ТаблицаГрафикаДляЗагрузкиИзФайла(ГрафикРасчетов, ОписаниеГрафика, ПредставленияКолонок) Экспорт
	
	МассивИменКолонок = Новый Массив;
	МассивИменКолонок.Добавить("Дата");
	Для каждого СекцияОписанияГрафика Из ОписаниеГрафика Цикл
		МассивИменКолонок.Добавить(СекцияОписанияГрафика.Значение.КолонкаПриход);
		МассивИменКолонок.Добавить(СекцияОписанияГрафика.Значение.КолонкаРасход);
	КонецЦикла;	
	ИменаКолонок = СтрСоединить(МассивИменКолонок, ",");
	
	ТаблицаГрафик = ГрафикРасчетов.Выгрузить(,ИменаКолонок);	
	ДоговорыКонтрагентовФормыУХ.ЗаполнитьЗаголовкиКолонокТаблицы(ТаблицаГрафик.Колонки, ПредставленияКолонок);
	
	Возврат ТаблицаГрафик;
	
КонецФункции

#Область ОбработчикиСобытийФормы

Процедура ПриСозданииНаСервереВерсииСоглашения(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	Объект = Форма.Объект; // Версия соглашения.
	Элементы = Форма.Элементы;
	
	Если Параметры.Ключ.Пустая() Тогда	
		
		ПриСозданииЧтенииНаСервере(Форма);
		ЗаполнитьДоговорОбъект(Форма);
		Форма.СостояниеДоговора = Перечисления.СостоянияДоговоров.Черновик;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НадписьТолькоПросмотр", 
		"Заголовок",
		ДоговорыКонтрагентовФормыУХКлиентСервер.ТекстНадписиТолькоПросмотр());
		
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"НадписьНеактуальныеПараметры", 
		"Заголовок",
		ДоговорыКонтрагентовФормыУХКлиентСервер.ТекстНадписиНедействительнаяВерсия());
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ОбъектМетаданныхДоговор = Объект.ДоговорКонтрагента.Метаданные();
	ПараметрыРазмещения.Источники = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектМетаданныхДоговор);
	ПодключаемыеКоманды.ПриСозданииНаСервере(Форма, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(Форма);

	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Обработчик подсистемы "Свойства"
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Объект", Форма.ДоговорОбъект);
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(Форма, ДополнительныеПараметры);
				
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
	// На форме размещены 4 реквизита, чьи представления склоняются по падежам.
	// Основным режимом работы со склонениями Руководитель и ДолжностьРуководителя является их изменение в форме элемента
	// соответствующего справочника. Но возможен переход к их склонениям и из текущей формы.
	// Работа с реквизитами РуководительКонтрагента и ДолжностьРуководителяКонтрагента ведётся с данной форме
	// с использованием подсистемы БСП "СклонениеПредставленийОбъектов". Данные склонений реквизитов хранятся в реквизитах
	// СклоненияРуководительКонтрагента и СклоненияДолжностьРуководителяКонтрагента. Имя реквизита формы, с которым сейчас
	// ведётся работа с использованием подсистемы БСП, хранится в переменной ТекущийРеквизитСклонения. Данные из текущего
	// реквизита синхронизируются с реквизитом формы Склонения, относящимся к подсистеме БСП.
	
	СклонениеПредставленийОбъектов.ПриСозданииНаСервере(Форма, Объект.РуководительКонтрагента);
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	Если ЗначениеЗаполнено(Объект.ДолжностьРуководителяКонтрагента) Тогда
		
		Форма.СклоненияДолжностьРуководителяКонтрагента = ДоговорыКонтрагентовФормыУХВызовСервера.ПросклонятьПредставлениеПоВсемПадежам(
			Объект.ДолжностьРуководителяКонтрагента, ПараметрыСклонения);

	Иначе
		Форма.СклоненияДолжностьРуководителяКонтрагента = СклонениеПредставленийОбъектовКлиентСервер.СтруктураСклонения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.РуководительКонтрагента) Тогда

		Если Форма.Склонения = Неопределено Тогда // не было заполнено при создании реквизитов формы
			
			ПараметрыСклонения.ЭтоФИО = Истина;
			ПараметрыСклонения.Пол = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ПорядковыйНомерПола(
				Объект.ПолРуководителяКонтрагента); 
			Форма.СклоненияРуководительКонтрагента = ДоговорыКонтрагентовФормыУХВызовСервера.ПросклонятьПредставлениеПоВсемПадежам(
				Объект.РуководительКонтрагента, ПараметрыСклонения);

		Иначе // было заполнено стандартным образом

			Форма.СклоненияРуководительКонтрагента = Форма.Склонения;
			
		КонецЕсли;

	Иначе
		Форма.СклоненияРуководительКонтрагента = СклонениеПредставленийОбъектовКлиентСервер.СтруктураСклонения();
	КонецЕсли;
	
	Форма.ТекущийРеквизитСклонения = "СклоненияРуководительКонтрагента";	
	Форма.Склонения = Форма[Форма.ТекущийРеквизитСклонения];
	
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов

	Параметры.Свойство("СозданИзФормыДокумента", Форма.СозданИзФормыДокумента);
	
	Если Параметры.Свойство("ОткрытИзПлатежки") Тогда
		Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком;
	КонецЕсли;
	
	Если Параметры.ПараметрыВыбора.Свойство("Организация") И ЗначениеЗаполнено(Параметры.ПараметрыВыбора.Организация) Тогда
		Параметры.ПараметрыВыбора.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(
			Параметры.ПараметрыВыбора.Организация);
	КонецЕсли;

	ОграничитьВыборРеквизитов(Форма, Параметры.ЗначенияЗаполнения);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "НаименованиеПоУмолчанию") Тогда
		Форма.НаименованиеПоУмолчанию  = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов();
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РеквизитыДоговораСтрокой") Тогда
		Форма.РеквизитыДоговораСтрокой = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.РеквизитыДоговораСтрокой(
			Форма.ДоговорОбъект.Номер, Форма.ДоговорОбъект.Дата);
	КонецЕсли;
	
	#Область УниверсальныеПроцессыСогласование
	НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма);
	#КонецОбласти
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ДоговорСНерезидентом") Тогда
		РеквизитыКонтрагента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент, "СтранаРегистрации,ОрганизационнаяЕдиница");
		Форма.ДоговорСНерезидентом = (РеквизитыКонтрагента.СтранаРегистрации <> Справочники.СтраныМира.Россия);
		Форма.ОрганизационнаяЕдиницаКонтрагентаУХ = РеквизитыКонтрагента.ОрганизационнаяЕдиница;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ФиксированныйСчетОрганизации") Тогда
		ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьСвязиПараметровВыбораБанковскихСчетов(Форма);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ЯзыкДоговора") Тогда
		ОбщегоНазначенияУХ.ПодготовитьПолеВыбораЯзыка(Элементы.ЯзыкДоговора, Объект.ЯзыкДоговора);
		ОбщегоНазначенияСерверУХ.ПоддержкаМультиязычностиУправлениеФормой(Элементы);
	КонецЕсли;
	
	Если Элементы.Найти("ГруппаХранение") <> Неопределено Тогда
	
		Если Не ПолучитьФункциональнуюОпцию("ИспользуетсяУправлениеАктивами") Тогда
			Элементы.ГруппаХранение.Видимость = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	УстановитьОтборыПодчиненныхСписковФормы(Форма);
	
	// Внутригрупповые обороты
	Если РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЕстьЗеркалированиеДоговора(Объект.ВидДоговораУХ) Тогда
	
		Форма.КонтрагентОрганизацииУХ = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
		Если Параметры.Свойство("ЗначенияЗаполнения") 
			И (ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура")) 
			И Параметры.ЗначенияЗаполнения.Свойство("ВстречныйДоговор") Тогда
			
			Форма.ВстречныйДоговор = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначенияЗаполнения.ВстречныйДоговор, 
				"ДоговорКонтрагента");
			Форма.ЗаписатьВстречныеДоговоры = Истина;
			Форма.НеОбновлятьЗеркально = Истина; // нам не нужно, чтобы изменения данного договора меняли данные исходного договора.
			
		ИначеЕсли НЕ Форма.ОрганизационнаяЕдиницаКонтрагентаУХ.Пустая() Тогда
			
			Форма.ВстречныйДоговор = ДоговорыКонтрагентовФормыУХВызовСервера.ПолучитьВстречныйДоговор(Объект.ДоговорКонтрагента);
			
		КонецЕсли;
	КонецЕсли;	
		
	ДоговорыКонтрагентовФормыУХКлиентСервер.ЗаполнитьПредставлениеПараметровУчетаФИ(Форма);
	
	ДоговорыКонтрагентовВстраиваниеУХ.ПриСозданииНаСервереВерсииСоглашения(Форма, Отказ, СтандартнаяОбработка);
	
	Справочники.ВидыДоговоровКонтрагентовУХ.ЗаполнитьСписокВыбораВидовДоговоров(
		Объект.Ссылка,
		Элементы.ВидДоговораУХ.СписокВыбора);	
		
КонецПроцедуры

Процедура ПриЧтенииНаСервереВерсииСоглашения(Форма, ТекущийОбъект) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПриСозданииЧтенииНаСервере(Форма);
	ДоговорОбъект = ЗаполнитьДоговорОбъект(Форма);
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(Форма, ДоговорОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
	
		Форма.СостояниеДоговора = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Объект.ДоговорКонтрагента);
		Если Не ЗначениеЗаполнено(Форма.СостояниеДоговора) Тогда
			Форма.СостояниеДоговора = Перечисления.СостоянияДоговоров.Черновик;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияНаСервереВерсияСоглашения(Форма, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(Форма, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервереВерсияСоглашения(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВстречныйДоговор") Тогда
		ВстречныйДоговор = Форма.ВстречныйДоговор;
		
		Если ЗначениеЗаполнено(ВстречныйДоговор) Тогда
			// Для обновления реквизитов
			Если Не Форма.НеОбновлятьЗеркально Тогда
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ВстречныйДоговор",           ВстречныйДоговор);
				ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписатьВстречныеДоговоры",  Форма.ЗаписатьВстречныеДоговоры);
			КонецЕсли;		
			// Для оповещения формы
			ПараметрыЗаписи.Вставить("ВстречныйДоговор",           ВстречныйДоговор);
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ДоговорОбъект", Форма.РеквизитФормыВЗначение("ДоговорОбъект"));
	
	Если ТекущийОбъект.Метаданные().ТабличныеЧасти.Найти("СчетаУчета") <> Неопределено Тогда
		Если Форма.КэшируемыеЗначения <> Неопределено И ТекущийОбъект.СчетаУчета.Количество() = 0 Тогда
			ФинансовыеИнструментыФормыКлиентСервер.ЗаполнитьСчетаУчетаВерсии(Форма, ТекущийОбъект);
		КонецЕсли;
	КонецЕсли;
		
	// Обработчик подсистемы "Свойства"
	УправлениеСвойствами.ПередЗаписьюНаСервере(Форма, ТекущийОбъект.ДополнительныеСвойства.ДоговорОбъект);
	
КонецПроцедуры

Процедура ПриЗаписиНаСервереВерсияСоглашения(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	ПриЗаписиНаСервереСклоненийРеквизитов(Форма, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
			
	
	Если ПараметрыЗаписи.Свойство("ВстречныйДоговор") И ЗначениеЗаполнено(ПараметрыЗаписи.ВстречныйДоговор) Тогда
		
		Если Форма.ЗаписатьВстречныеДоговоры Тогда
			РегистрыСведений.СвязанныеДоговоры.ЗаписатьВстречныеДоговоры(ТекущийОбъект.ДоговорКонтрагента, ПараметрыЗаписи.ВстречныйДоговор, Отказ);
			Форма.ЗаписатьВстречныеДоговоры = Ложь;
		КонецЕсли;
		
	Иначе 
		
		ПараметрыЗаписи.Удалить("ВстречныйДоговор");		
		РегистрыСведений.СвязанныеДоговоры.УдалитьВстречныеДоговоры(ТекущийОбъект.ДоговорКонтрагента, Отказ);
		Форма.ЗаписатьВстречныеДоговоры = Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.ВыборПараметровУчетаФИУХ) Тогда
		РегистрыСведений.ВыборПараметровУчетаФИ.СохранитьВыбор(ТекущийОбъект.ДоговорКонтрагента, Форма.ВыборПараметровУчетаФИУХ, Отказ);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервереВерсияСоглашения(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	УстановитьОтборыПодчиненныхСписковФормы(Форма);
	
	Если ЗначениеЗаполнено(ТекущийОбъект.ДоговорКонтрагента) Тогда
		Форма.АктуальнаяВерсия = РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ТекущийОбъект.ДоговорКонтрагента);
		Форма.ЗначениеВРеквизитФормы(ТекущийОбъект.ДоговорКонтрагента.ПолучитьОбъект(), "ДоговорОбъект");
	КонецЕсли;
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
	
	УстановитьЗаголовокФормы(Форма);	
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытийШапки

Процедура ЭтоГосударственныйКонтрактПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ Форма.ЭтоГосударственныйКонтракт Тогда
		Объект.ГосударственныйКонтракт = Неопределено;
		Объект.ИдентификаторПлатежа = "";
		Объект.УполномоченныйБанк = Неопределено;
	КонецЕсли;
	
	Форма.Элементы.ГосударственныйКонтракт.Доступность = Форма.ЭтоГосударственныйКонтракт;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьСвязиПараметровВыбораБанковскихСчетов(Форма);
	Элементы.ИдентификаторПлатежа.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ГосударственныйКонтракт);
	Элементы.УполномоченныйБанк.Видимость = (Объект.ТребуетсяПостановкаНаУчетВалютногоКонтроля Или Форма.ЭтоГосударственныйКонтракт);

КонецПроцедуры

Процедура ПриИзмененииГосударственногоКонтактаСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ГосударственныйКонтракт) Тогда
		Объект.ФиксированныйСчетКонтрагента = Истина;
		Объект.ФиксированныйСчетОрганизации = Истина;
		РеквизитыГосконтракта = Новый Структура("ИдентификаторПлатежа,УполномоченныйБанк","Код","УполномоченныйБанк");
		ЗаполнитьЗначенияСвойств(Объект, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ГосударственныйКонтракт,РеквизитыГосконтракта));
	Иначе
		Объект.ИдентификаторПлатежа = "";
		Объект.УполномоченныйБанк = Неопределено;
	КонецЕсли;

	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьСвязиПараметровВыбораБанковскихСчетов(Форма);
		
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизацииСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ЭтоВалютныйИнструмент = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоВалютныйДоговорМСФО(Объект);
	Объект.ПараметрыУчетаФИ = ДоговорыКонтрагентовФормыУХВызовСервера.ПолучитьПараметрыУчетаФИ(Объект.ВидДоговораУХ, Объект.Организация, ЭтоВалютныйИнструмент);
	
	Форма.КонтрагентОрганизацииУХ = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
	
	ДоговорыКонтрагентовВстраиваниеУХ.ПриИзмененииОрганизацииВерсияСоглашения(Форма);
	#Если ВебКлиент Тогда
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(Форма, Истина);
	#КонецЕсли
КонецПроцедуры

Процедура ПриИзмененииКонтрагентаСервер(Форма) Экспорт
	
	Объект = Форма.Объект;

	РеквизитыВладельца = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Контрагент,"ОрганизационнаяЕдиница,СтранаРегистрации");
	
	Форма.ДоговорСНерезидентом = (РеквизитыВладельца.СтранаРегистрации <> Справочники.СтраныМира.Россия);
	
	//Заполнение условия оплаты
	Если (ЗначениеЗаполнено(Объект.Контрагент)) Тогда
		
		РольКонтрагента = УправлениеОбязательствамиУХ.ПолучитьРольКонтрагентаПоВидуДоговора(Объект.ВидДоговораУХ);
		Если ЗначениеЗаполнено(РольКонтрагента) Тогда
			СтруктураРекомендованноеУсловиеОплаты = УправлениеОбязательствамиУХ.ПолучитьРекомендованноеУсловиеОплатыКонрагента(Объект.Контрагент, РольКонтрагента);
			Форма.РекомендуемоеУсловиеОплаты = СтруктураРекомендованноеУсловиеОплаты.УсловиеОплатыТекст;
			Форма.РекомендуемыйПроцентАванса = СтруктураРекомендованноеУсловиеОплаты.ПроцентАванса;
			Форма.РекомендуемыйСрокОтсрочки = СтруктураРекомендованноеУсловиеОплаты.СрокОтсрочки;
			Форма.ДокументУстановкиРекомендуемогоУсловия = СтруктураРекомендованноеУсловиеОплаты.Регистратор;
		КонецЕсли;
	КонецЕсли;
	
	Форма.ОрганизационнаяЕдиницаКонтрагентаУХ = РеквизитыВладельца.ОрганизационнаяЕдиница;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВстречныйДоговор") И Не Форма.ВстречныйДоговор.Пустая() 
		И (Форма.ОрганизационнаяЕдиницаКонтрагентаУХ <> Форма.ВстречныйДоговор.Организация) Тогда
	
		Форма.ВстречныйДоговор = Неопределено;
	
	КонецЕсли;
	
	ДоговорыКонтрагентовВстраиваниеУХ.ПриИзмененииКонтрагентаВерсияСоглашения(Форма);
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСтатьиДвиженияДенежныхСредствСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	ИнициализироватьПереченьОперацийГрафика(Форма);
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьАналитикиГрафикаЗначениямиПоУмолчанию(Объект.ГрафикРасчетов, Форма.ОперацииГрафика);
	
КонецПроцедуры

Процедура ПриИзмененииСтатьиИсполненияСервер(Форма) Экспорт
	
	Объект = Форма.Объект;
	ИнициализироватьПереченьОперацийГрафика(Форма);
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьАналитикиГрафикаЗначениямиПоУмолчанию(Объект.ГрафикРасчетов, Форма.ОперацииГрафика);
	
КонецПроцедуры

Процедура ПриИзмененииБазовогоДоговораСервер(Форма) Экспорт

	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьВерсиюСоглашенияПоБазовомуДоговору(Форма.Объект);

КонецПроцедуры

Процедура ПриИзмененииЗначенияПоУмолчаниюАналитикиГрафика(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ИнициализироватьПереченьОперацийГрафика(Форма);
	РаботаСДоговорамиКонтрагентовУХ.ЗаполнитьАналитикиГрафикаЗначениямиПоУмолчанию(Объект.ГрафикРасчетов, Форма.ОперацииГрафика);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСГрафиками_31

Процедура ДобавитьАналитикиСтатейВДетализацииГрафика(Форма, МассивОписанийСтатей) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей,
		"ГрафикРасчетов", "ГрафикРасчетовЛинейный", "СтатьяБюджета", "ГрафикРасчетовЛинейныйСтатьяБюджета", "Аналитика%1", "ГрафикРасчетовЛинейныйАналитика%1", 
		ФормыУХ.РазместитьВГруппеСтрокой(Элементы.ГрафикРасчетовЛинейныйГруппаАналитикиСтатьи));
		
КонецПроцедуры

Процедура ИнициализироватьПереченьОперацийГрафика(Форма, Знач ВидДоговораУХ = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;

	Если ВидДоговораУХ = Неопределено Тогда
		ВидДоговораУХ = РаботаСДоговорамиКонтрагентовУХ.ВидДоговораУХОбъекта(Объект);
	КонецЕсли;
	
	НуженГрафик = РаботаСДоговорамиКонтрагентовУХПовтИсп.ВедетсяГрафикРасчетов(ВидДоговораУХ);
	Если НЕ НуженГрафик Тогда
		Возврат;
	КонецЕсли;

	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	ПереченьОпераций = РаботаСДоговорамиКонтрагентовУХ.ОперацииГрафика(ОписаниеГрафика, Объект, ВидДоговораУХ);
	
	Форма.ОперацииГрафика = Новый ФиксированноеСоответствие(ПереченьОпераций);
	
	СписокВыбора = Элементы.ГрафикРасчетовЛинейныйОперацияГрафика.СписокВыбора;
	СписокВыбора.Очистить();
	Для Каждого ТекОписаниеОперации Из ПереченьОпераций Цикл
		СписокВыбора.Добавить(ТекОписаниеОперации.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТаблицуГрафикРасчетов(Форма, СтруктураДействий = Неопределено, ОписаниеГрафика = Неопределено) Экспорт
	
	Объект = Форма.Объект;
	ТаблицаФакт = Форма.ТаблицаФакт;
	ГрафикРасчетов = Форма.ГрафикРасчетов;
	ЭлементГрафикРасчетов = Форма.Элементы.ГрафикРасчетов;
	
	Если ОписаниеГрафика = Неопределено Тогда
		ОписаниеГрафика = Форма.ОписаниеГрафика;
	КонецЕсли;
	
	ОперацииГрафика = Форма.ОперацииГрафика;
	Если ОперацииГрафика = Неопределено Тогда
		ОперацииГрафика = РаботаСДоговорамиКонтрагентовУХ.ОперацииГрафика(ОписаниеГрафика, Объект);
	КонецЕсли;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗагружатьФакт") Тогда
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(Объект.Ссылка.Метаданные().ПолноеИмя());
		ОбъектРасчетов = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ГрафикРасчетовСПокупателемПоставщиком"),
			  Объект.ОбъектРасчетов, Объект.ДоговорКонтрагента);		
		ТаблицаФакт.Загрузить(
				МенеджерОбъекта.ПолучитьФактическиеДанные(ОбъектРасчетов, ОписаниеГрафика, ОперацииГрафика));			
	КонецЕсли;
	
	ТекущаяСтрокаТаблицы = ЭлементГрафикРасчетов.ТекущаяСтрока;
	Если ТекущаяСтрокаТаблицы <> Неопределено Тогда
		ДанныеКоллекции = ГрафикРасчетов.НайтиПоИдентификатору(ТекущаяСтрокаТаблицы);
		ТекущаяДата = ДанныеКоллекции.Дата;
	КонецЕсли;	
	
	ТабГрафик = ГрафикРасчетов.Выгрузить();
	ТабГрафик.Очистить();
	
	Для Каждого ТекСтрокаФакта из ТаблицаФакт Цикл
		НоваяСтрокаГрафика = ТабГрафик.Добавить();
		НоваяСтрокаГрафика.Дата = ТекСтрокаФакта.Дата;
		
		Для Каждого ОписаниеСекцииГрафика Из ОписаниеГрафика Цикл
			
			СекцияГрафика = ОписаниеСекцииГрафика.Значение;
			
			НоваяСтрокаГрафика[СекцияГрафика.КолонкаПриход + "Факт"] = ТекСтрокаФакта[СекцияГрафика.КолонкаПриход];
			НоваяСтрокаГрафика[СекцияГрафика.КолонкаРасход + "Факт"] = ТекСтрокаФакта[СекцияГрафика.КолонкаРасход];
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ТекСтрокаГрафик Из Объект.ГрафикРасчетов Цикл
		
		НоваяСтрокаГрафика = ТабГрафик.Добавить();
		НоваяСтрокаГрафика.Дата = ТекСтрокаГрафик.Дата;
		КолонкаГрафика = РаботаСДоговорамиКонтрагентовУХ.ИмяКолонкиГрафика(ТекСтрокаГрафик.ОперацияГрафика, ОписаниеГрафика);
		Если ПустаяСтрока(КолонкаГрафика) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаГрафика[КолонкаГрафика] = ТекСтрокаГрафик.Сумма;

	КонецЦикла;
	
	Если ТабГрафик.Количество() Тогда
		// Добавим сегодняшнюю дату, чтобы вывести промежуточные значения на сегодня.
		СтрокаСегодня = ТабГрафик.Добавить();
		СтрокаСегодня.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ЧисловыеКолонки = Новый Массив;
	Для Каждого ОписаниеСекцииГрафика Из ОписаниеГрафика Цикл
		
		СекцияГрафика = ОписаниеСекцииГрафика.Значение;
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаПриход);
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаПриход + "Факт");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаПриход + "ПланФакт");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаРасход);
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаРасход + "Факт");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаРасход + "ПланФакт");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаОстаток);
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаОстаток + "Факт");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаОстаток + "ПланФакт");
		
	КонецЦикла;
	
	ТабГрафик.Свернуть("Дата", СтрСоединить(ЧисловыеКолонки,","));
	ТабГрафик.Сортировать("Дата");
	
	НакопленнаяЗадолженность = Новый Структура;
	Для Каждого ТекОписаниеСекции Из ОписаниеГрафика Цикл
		НакопленнаяЗадолженность.Вставить(ТекОписаниеСекции.Значение.КолонкаОстаток, 0);
		НакопленнаяЗадолженность.Вставить(ТекОписаниеСекции.Значение.КолонкаОстаток + "Факт", 0);
	КонецЦикла;
	
	Для Каждого ТекСтрокаГрафика Из ТабГрафик Цикл
		
		Для Каждого ТекОписаниеСекции Из ОписаниеГрафика Цикл
			ИмяКолонкиЗадолженность = ТекОписаниеСекции.Значение.КолонкаОстаток;
			ИмяКолонкиПриход = ТекОписаниеСекции.Значение.КолонкаПриход;
			ИмяКолонкиРасход = ТекОписаниеСекции.Значение.КолонкаРасход;
			
			ТекСтрокаГрафика[ИмяКолонкиЗадолженность] = НакопленнаяЗадолженность[ИмяКолонкиЗадолженность] +
				ТекСтрокаГрафика[ИмяКолонкиПриход] - ТекСтрокаГрафика[ИмяКолонкиРасход];
				
			ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Факт"] = НакопленнаяЗадолженность[ИмяКолонкиЗадолженность + "Факт"] + 
				ТекСтрокаГрафика[ИмяКолонкиПриход + "Факт"] - ТекСтрокаГрафика[ИмяКолонкиРасход + "Факт"];
					
			ТекСтрокаГрафика[ИмяКолонкиПриход + "ПланФакт"] = ТекСтрокаГрафика[ИмяКолонкиПриход] - ТекСтрокаГрафика[ИмяКолонкиПриход + "Факт"];
			ТекСтрокаГрафика[ИмяКолонкиРасход + "ПланФакт"] = ТекСтрокаГрафика[ИмяКолонкиРасход] - ТекСтрокаГрафика[ИмяКолонкиРасход + "Факт"];
			ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "ПланФакт"] = ТекСтрокаГрафика[ИмяКолонкиЗадолженность] - ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Факт"];
			
			НакопленнаяЗадолженность[ИмяКолонкиЗадолженность] = ТекСтрокаГрафика[ИмяКолонкиЗадолженность];
			НакопленнаяЗадолженность[ИмяКолонкиЗадолженность + "Факт"] = ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Факт"];
			
		КонецЦикла;
		
	КонецЦикла;
	
	ГрафикРасчетов.Загрузить(ТабГрафик);
	
	// Восстановим строку
	СтрокиСТекущейДатой = ГрафикРасчетов.НайтиСтроки(Новый Структура("Дата", ТекущаяДата));
	Если СтрокиСТекущейДатой.Количество() Тогда
		ЭлементГрафикРасчетов.ТекущаяСтрока = СтрокиСТекущейДатой[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьЭлементыУсловногоОформленияГрафикРасчетов(Форма) Экспорт
	
	НуженГрафик = ТребуетсяГрафикРасчетов(Форма);
	Если НЕ НуженГрафик Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	// Оформим "Сегодня"
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ГрафикРасчетовДата.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	"ГрафикРасчетов.Дата", ВидСравненияКомпоновкиДанных.Равно, ТекущаяДата, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Формат(ТекущаяДата, "ДЛФ=D") + " " + НСтр("ru = '(сегодня)'") );
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	ГрафикРасчетовКопия = Форма.ГрафикРасчетов.Выгрузить(Новый Массив);
	Для Каждого ТекКолонка Из ГрафикРасчетовКопия.Колонки Цикл
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГрафикРасчетов" + ТекКолонка.Имя);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	"ГрафикРасчетов.Дата", ВидСравненияКомпоновкиДанных.Равно, ТекущаяДата, , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаТекущейДатыВГрафикеУХ);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , ,, Истина));
	// ТолькоПросмотр на строки, где есть расчетные данные
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ГрафикРасчетовЛинейныйОперацияГрафика.Имя);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,	"Объект.ГрафикРасчетов.СуммаРасчет", ВидСравненияКомпоновкиДанных.Заполнено, , , Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

Функция ДанныеДляЗагрузкиГрафика(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ПредставленияКолонок = МенеджерОбъекта.ПредставленияКолонокГрафика();
	
	ТаблицаГрафик = ДоговорыКонтрагентовФормыУХ.ТаблицаГрафикаДляЗагрузкиИзФайла(Форма.ГрафикРасчетов, 
		Форма.ОписаниеГрафика, ПредставленияКолонок);		
		
	АдресТаблицыГрафика = ПоместитьВоВременноеХранилище(ТаблицаГрафик);

	Данные = Новый Структура;
	Данные.Вставить("Ссылка", Объект.Ссылка);
	Данные.Вставить("Дата", Объект.Дата);
	Данные.Вставить("АдресТаблицыГрафика", АдресТаблицыГрафика);
	
	Возврат Данные;
	
КонецФункции

Процедура ЗагрузитьГрафик(Форма, АдресГрафика) Экспорт
	
	Объект = Форма.Объект;
	
	ДанныеГрафика = ПолучитьИзВременногоХранилища(АдресГрафика);
	ТаблицаЗагрузкиГрафика = ДанныеГрафика.График;
	
	Объект.ГрафикРасчетов.Очистить();
	
	ФинансовыеИнструментыУХ.ЗаполнитьЛинейныйГрафикИзТаблицы(Объект.ГрафикРасчетов, ТаблицаЗагрузкиГрафика, 
		Форма.ОписаниеГрафика, Форма.ОперацииГрафика);
		
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);			
	ДоговорыКонтрагентовФормыУХ.ОбновитьТаблицуГрафикРасчетов(Форма);

КонецПроцедуры

Процедура ПеренестиФактВГрафик(Форма, ДатаПереноса) Экспорт
	
	Объект = Форма.Объект;
	
	ОбъектРасчетов = ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ГрафикРасчетовСПокупателемПоставщиком"), 
		Объект.ОбъектРасчетов, Объект.ДоговорКонтрагента);
	
	ТабГрафикРасчетов = Объект.ГрафикРасчетов.Выгрузить();	
	НовыйГрафикРасчетов = РаботаСДоговорамиКонтрагентовУХ.ПеренестиФактВГрафик(ТабГрафикРасчетов, ДатаПереноса, 
		Объект.ДоговорКонтрагента, ОбъектРасчетов, Форма.ОписаниеГрафика, Форма.ОперацииГрафика);
	
	Объект.ГрафикРасчетов.Загрузить(НовыйГрафикРасчетов);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	ОбновитьТаблицуГрафикРасчетов(Форма, Новый Структура("ЗагружатьФакт"));
	
КонецПроцедуры
#КонецОбласти

#Область ОсновноеОбязательство 
Функция ОсновноеОбязательствоПоДоговору(ДоговорКонтрагента, ВидДоговораУХ = Неопределено) Экспорт
	
	ОсновноеОбязательство = Неопределено;
	
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат ОсновноеОбязательство;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидДоговораУХ) И НЕ ДоговорыКонтрагентовФормыУХКлиентСервер.ДоступноОсновноеОбязательство(ВидДоговораУХ) Тогда
		Возврат ОсновноеОбязательство;
	КонецЕсли; 
	
	ВидСвязи = ВидСвязиОсновноеОбязательство(ВидДоговораУХ);
	ВидыСвязей = ВидыСвязейОсновноеОбязательство();
	
	ТабБазовыеДоговоры = РегистрыСведений.СвязанныеДоговоры.ПолучитьБазовыеДоговоры(ДоговорКонтрагента);
	Для каждого Строка Из ТабБазовыеДоговоры Цикл
		Если ЗначениеЗаполнено(ВидДоговораУХ) Тогда
			Если Строка.ВидСвязи = ВидСвязи Тогда
				ОсновноеОбязательство = Строка.БазовыйДоговор;
				Прервать;
			КонецЕсли;	
		Иначе
			Если ВидыСвязей.Найти(Строка.ВидСвязи) <> Неопределено Тогда
				ОсновноеОбязательство = Строка.БазовыйДоговор;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Возврат ОсновноеОбязательство;
	 
КонецФункции	

Функция СохранитьОсновноеОбязательствоПоДоговору(ДоговорКонтрагента, ВидДоговораУХ, ОсновноеОбязательство) Экспорт
	
	ТекущееОбязательство = ОсновноеОбязательствоПоДоговору(ДоговорКонтрагента);
	Если ЗначениеЗаполнено(ТекущееОбязательство) Тогда
		РегистрыСведений.СвязанныеДоговоры.УдалитьСвязанныеДоговоры(ТекущееОбязательство, ДоговорКонтрагента);
	КонецЕсли;
	
	Если ДоговорыКонтрагентовФормыУХКлиентСервер.ДоступноОсновноеОбязательство(ВидДоговораУХ) И ЗначениеЗаполнено(ОсновноеОбязательство) Тогда
	
		РегистрыСведений.СвязанныеДоговоры.ЗаписатьСвязанныеДоговоры(
			ОсновноеОбязательство, 
			ДоговорКонтрагента, 
			ВидСвязиОсновноеОбязательство(ВидДоговораУХ));
		
	КонецЕсли;
		
КонецФункции
#КонецОбласти

#Область РассчетыСКовенантами
// Функция - Возвращает текст надписи предупреждение о нарушении ковенантов
//
// Параметры:
//  Объект - ДокументОбъект.ВерсияСоглашенияКредит
// 
// Возвращаемое значение:
//   - Строка
//
Функция ТекстНадписиПредупреждениеОНарушенииКовенантов(Объект) Экспорт
	
	ТекстНадписи = "";
	Если НЕ ЗначениеЗаполнено(Объект.Ковенанты) Тогда
		Возврат ТекстНадписи;
	КонецЕсли;
	
	МассивКовенантов = Объект.Ковенанты.Выгрузить(, "Ковенант").ВыгрузитьКолонку("Ковенант");
	ТабНарушенныхКовенантов = РаботаСДоговорамиКонтрагентовУХ.НарушенныеКовенанты(МассивКовенантов);
	МассивНарушенныхКовенантов = ТабНарушенныхКовенантов.ВыгрузитьКолонку("КовенантПредставление");
	
	Если ЗначениеЗаполнено(МассивНарушенныхКовенантов) Тогда
		ТекстНадписи = СтрШаблон(Нстр("ru = 'Нарушены условия ковенантов: %1'"),
			СтрСоединить(МассивНарушенныхКовенантов, ","));
	КонецЕсли;
						 
	Возврат ТекстНадписи;
	
КонецФункции

// Функция - возвращает отбор отчета по ковенантам по кредиту
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.ВерсияСоглашенияКредит 
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОтборОтчетаПоКовенантамПоКредиту(ДокументСсылка) Экспорт
	
	ПараметрыОтбора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
	 						ДокументСсылка, 
	 						"Контрагент, Организация, ДоговорКонтрагента, Ответственный");
				
	// Отбор ковенантов						
	ТаблицаКовенантов = Документы.ВерсияСоглашенияКредит.КовенантыДокумента(ДокументСсылка);	
	МассивКовенантов = ТаблицаКовенантов.ВыгрузитьКолонку("Ковенант");
	ПараметрыОтбора.Вставить("Ковенант", МассивКовенантов);
	
	Возврат ПараметрыОтбора;
	
КонецФункции	

#КонецОбласти

#Область СравнениеВерсийГрафиков
Процедура СоздатьТаблицуСравненияГрафиковНаФорме(Форма) Экспорт
	
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	// Реквизиты
	ПутьКТаблице = "ГрафикРасчетов";
	МассивДобавляемыхРеквизитов = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)), 
		ПутьКТаблице, "Дата");
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	НовыйРеквизит = Новый РеквизитФормы("ЕстьОтклонения", Новый ОписаниеТипов("Булево"), ПутьКТаблице, "Есть отклонения");
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		
	МассивКолонокОписаний = СтрРазделить("КолонкаПриход КолонкаРасход КолонкаОстаток", " ");
	
	МассивКолонокСравнения = Новый Массив;
	СтрокаКолонки = "Постфикс, Заголовок, Расчетная";
	МассивКолонокСравнения.Добавить(Новый Структура(СтрокаКолонки, "", 				"Текущий",     Ложь));
	МассивКолонокСравнения.Добавить(Новый Структура(СтрокаКолонки, "Версия", 		"Версия",     Ложь));
	МассивКолонокСравнения.Добавить(Новый Структура(СтрокаКолонки, "Отклонение", 	"Отклонение", Истина));
	
	ОписаниеТипаКолонки = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип;
	
	Для каждого ЭлементОписания Из ОписаниеГрафика Цикл
		ОписаниеСекции = ЭлементОписания.Значение;
		Для каждого ИмяКолонкиОписания Из МассивКолонокОписаний Цикл
			Для каждого Разрез Из МассивКолонокСравнения Цикл
				ИмяРеквизита = ОписаниеСекции[ИмяКолонкиОписания] + Разрез.Постфикс;
				Заголовок = Разрез.Заголовок;
				НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаКолонки, ПутьКТаблице, Заголовок);
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НовыйРеквизит = Новый РеквизитФормы("Отступ", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1)), 
		ПутьКТаблице, "Отступ");
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Элементы формы 
	Элементы = Форма.Элементы;
	ТаблицаФормыГрафик = Форма.Элементы.ГрафикРасчетов;
	
	КолонкаДаты = Элементы.Добавить("ГрафикРасчетовДата", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	КолонкаДаты.Вид = ВидПоляФормы.ПолеВвода;
	КолонкаДаты.ПутьКДанным = "ГрафикРасчетов.Дата";
	КолонкаДаты.ШрифтЗаголовка = Новый Шрифт(КолонкаДаты.ШрифтЗаголовка,,,Истина); // полужирный
	
	Для каждого ЭлементОписания Из ОписаниеГрафика Цикл
		ОписаниеСекции = ЭлементОписания.Значение;		
		
		ИмяГруппыСекция = "ГрафикРасчетовГруппа" + ОписаниеСекции.Имя; // ГрафикРасчетовГруппаОсновнойДолг
		ГруппаСекция = Элементы.Добавить(ИмяГруппыСекция, Тип("ГруппаФормы"), ТаблицаФормыГрафик);
		ГруппаСекция.Вид = ВидГруппыФормы.ГруппаКолонок; 
		ГруппаСекция.Заголовок = ОписаниеСекции.Представление; // Основной долг
		ГруппаСекция.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаСекция.ОтображатьВШапке = Истина;
		ГруппаСекция.ШрифтЗаголовка = Новый Шрифт(ГруппаСекция.ШрифтЗаголовка,,,Истина); // полужирный
			
		Для каждого ИмяКолонкиОписания Из МассивКолонокОписаний Цикл
			
			ИмяГруппыКолонки = "ГрафикРасчетовГруппа" + ОписаниеСекции[ИмяКолонкиОписания]; // ГрафикРасчетовГруппаОсновнойДолгПриход
			ГруппаКолонка = Элементы.Добавить(ИмяГруппыКолонки, Тип("ГруппаФормы"), ГруппаСекция);
			ГруппаКолонка.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонка.Заголовок = ОписаниеСекции[ИмяКолонкиОписания + "Представление"]; // Начисление
			ГруппаКолонка.Группировка = ГруппировкаКолонок.Вертикальная;
			ГруппаКолонка.ОтображатьВШапке = Истина;
			ГруппаКолонка.ШрифтЗаголовка = Новый Шрифт(ГруппаКолонка.ШрифтЗаголовка,,,Истина); // полужирный
			
			Для каждого ОписаниеКолонки Из МассивКолонокСравнения Цикл
				ИмяКолонки = "ГрафикРасчетов" + ОписаниеСекции[ИмяКолонкиОписания] + ОписаниеКолонки.Постфикс; // ГрафикРасчетовГруппаОсновнойДолгПриходФакт
				Колонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонка);
				Колонка.Вид = ВидПоляФормы.ПолеВвода; 
				Колонка.ОтображатьВШапке = Истина;
				Колонка.Видимость = Истина;
				Колонка.ПутьКДанным = "ГрафикРасчетов." + ОписаниеСекции[ИмяКолонкиОписания] + ОписаниеКолонки.Постфикс;
				Если ОписаниеКолонки.Расчетная Тогда
					Колонка.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла; 
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// на случай если мало элементов, чтобы последний не был очень большим
	Элемент = Элементы.Добавить("ГрафикРасчетовОтступ", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "ГрафикРасчетов.Отступ";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ТолькоПросмотр = Истина;
	
КонецПроцедуры	

Процедура ОбновитьТаблицуСравненияГрафиковРасчетов(Форма, ТаблицаГрафикаВерсииСоглашения) Экспорт
	
	Объект = Форма.Объект;
	ГрафикРасчетов = Форма.ГрафикРасчетов;
	ЭлементГрафикРасчетов = Форма.Элементы.ГрафикРасчетов;
	
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	ОперацииГрафика = Форма.ОперацииГрафика;
		
	ТекущаяСтрокаТаблицы = ЭлементГрафикРасчетов.ТекущаяСтрока;
	Если ТекущаяСтрокаТаблицы <> Неопределено Тогда
		ДанныеКоллекции = ГрафикРасчетов.НайтиПоИдентификатору(ТекущаяСтрокаТаблицы);
		ТекущаяДата = ДанныеКоллекции.Дата;
	КонецЕсли;	
	
	ТабГрафик = ГрафикРасчетов.Выгрузить();
	ТабГрафик.Очистить();
	
	МассивТаблицГрафиков = Новый Массив;
	МассивТаблицГрафиков.Добавить(Новый Структура("Таблица, Постфикс", 
		ТаблицаГрафикаВерсииСоглашения, "Версия"));
	МассивТаблицГрафиков.Добавить(Новый Структура("Таблица, Постфикс", 
		Объект.ГрафикРасчетов , ""));
		
	Для каждого  СтруктураТаблицы Из МассивТаблицГрафиков Цикл
		Для Каждого СтрокаТаблицы Из СтруктураТаблицы.Таблица Цикл
			
			НоваяСтрокаГрафика = ТабГрафик.Добавить();
			НоваяСтрокаГрафика.Дата = СтрокаТаблицы.Дата;
			КолонкаГрафика = РаботаСДоговорамиКонтрагентовУХ.ИмяКолонкиГрафика(СтрокаТаблицы.ОперацияГрафика, ОписаниеГрафика);
			Если ПустаяСтрока(КолонкаГрафика) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрокаГрафика[КолонкаГрафика + СтруктураТаблицы.Постфикс] = СтрокаТаблицы.Сумма;		
		КонецЦикла;
	КонецЦикла;
	
	ЧисловыеКолонки = Новый Массив;
	Для Каждого ОписаниеСекцииГрафика Из ОписаниеГрафика Цикл
		
		СекцияГрафика = ОписаниеСекцииГрафика.Значение;
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаПриход);
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаПриход + "Версия");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаПриход + "Отклонение");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаРасход);
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаРасход + "Версия");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаРасход + "Отклонение");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаОстаток);
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаОстаток + "Версия");
		ЧисловыеКолонки.Добавить(СекцияГрафика.КолонкаОстаток + "Отклонение");
		
	КонецЦикла;
	
	ТабГрафик.Свернуть("Дата, ЕстьОтклонения", СтрСоединить(ЧисловыеКолонки,","));
	ТабГрафик.Сортировать("Дата");
	
	НакопленнаяЗадолженность = Новый Структура;
	Для Каждого ТекОписаниеСекции Из ОписаниеГрафика Цикл
		НакопленнаяЗадолженность.Вставить(ТекОписаниеСекции.Значение.КолонкаОстаток, 0);
		НакопленнаяЗадолженность.Вставить(ТекОписаниеСекции.Значение.КолонкаОстаток + "Версия", 0);
	КонецЦикла;
	
	Для Каждого ТекСтрокаГрафика Из ТабГрафик Цикл
		
		Для Каждого ТекОписаниеСекции Из ОписаниеГрафика Цикл
			ИмяКолонкиЗадолженность = ТекОписаниеСекции.Значение.КолонкаОстаток;
			ИмяКолонкиПриход = ТекОписаниеСекции.Значение.КолонкаПриход;
			ИмяКолонкиРасход = ТекОписаниеСекции.Значение.КолонкаРасход;
			
			ТекСтрокаГрафика[ИмяКолонкиЗадолженность] = НакопленнаяЗадолженность[ИмяКолонкиЗадолженность] +
				ТекСтрокаГрафика[ИмяКолонкиПриход] - ТекСтрокаГрафика[ИмяКолонкиРасход];
				
			ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Версия"] = НакопленнаяЗадолженность[ИмяКолонкиЗадолженность + "Версия"] + 
				ТекСтрокаГрафика[ИмяКолонкиПриход + "Версия"] - ТекСтрокаГрафика[ИмяКолонкиРасход + "Версия"];
					
			ТекСтрокаГрафика[ИмяКолонкиПриход + "Отклонение"] = 
				ТекСтрокаГрафика[ИмяКолонкиПриход] - ТекСтрокаГрафика[ИмяКолонкиПриход + "Версия"];
			ТекСтрокаГрафика[ИмяКолонкиРасход + "Отклонение"] = 
				ТекСтрокаГрафика[ИмяКолонкиРасход] - ТекСтрокаГрафика[ИмяКолонкиРасход + "Версия"];
			ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Отклонение"] =
				ТекСтрокаГрафика[ИмяКолонкиЗадолженность] - ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Версия"];
			
			НакопленнаяЗадолженность[ИмяКолонкиЗадолженность] = ТекСтрокаГрафика[ИмяКолонкиЗадолженность];
			НакопленнаяЗадолженность[ИмяКолонкиЗадолженность + "Версия"] = ТекСтрокаГрафика[ИмяКолонкиЗадолженность + "Версия"];
			
			Если ТекСтрокаГрафика[ИмяКолонкиПриход] <> ТекСтрокаГрафика[ИмяКолонкиПриход + "Версия"] 
				ИЛИ ТекСтрокаГрафика[ИмяКолонкиРасход] <> ТекСтрокаГрафика[ИмяКолонкиРасход + "Версия"] Тогда
				
				ТекСтрокаГрафика.ЕстьОтклонения = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ГрафикРасчетов.Загрузить(ТабГрафик);
	
	// Восстановим строку
	СтрокиСТекущейДатой = ГрафикРасчетов.НайтиСтроки(Новый Структура("Дата", ТекущаяДата));
	Если СтрокиСТекущейДатой.Количество() Тогда
		ЭлементГрафикРасчетов.ТекущаяСтрока = СтрокиСТекущейДатой[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

Функция ПараметрыКомандыСравнитьВерсииГрафиков(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("РеквизитыОбъекта", 
		ОбщегоНазначенияУХ.СтруктураСвойствОбъекта(Объект, Объект.Ссылка.Метаданные(), Ложь)); // Без таб частей
		
	ПредметГрафика = РаботаСДоговорамиКонтрагентовУХ.ПредметГрафикаРасчетов(Объект);
	ВерсияСоглашения = РаботаСДоговорамиКонтрагентовУХ.ПоследняяВерсияДокументаСоглашения(Объект, Объект.Ссылка);
	Если НЕ ЗначениеЗаполнено(ВерсияСоглашения) Тогда
		ВерсияСоглашения = Объект.Ссылка;	
	КонецЕсли;
	ПараметрыКоманды.Вставить("ВерсияСоглашенияДляСравнения", ВерсияСоглашения);
	
	ПараметрыКоманды.Вставить("АдресГрафикаРасчетов", 
		ПоместитьВоВременноеХранилище(Объект.ГрафикРасчетов.Выгрузить(), Форма.УникальныйИдентификатор));

	Возврат ПараметрыКоманды;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПриЗаписиНаСервереСклоненийРеквизитов(Форма, ТекущийОбъект)
	
	ТекущийРеквизитСклонения = Форма.ТекущийРеквизитСклонения;
	
	Форма[ТекущийРеквизитСклонения] = Форма.Склонения;
	Форма["ИзмененоПредставление" + Сред(ТекущийРеквизитСклонения, 10)] = Форма.ИзмененоПредставление;
	ОбъектСоСклоняемымиРеквизитами = Справочники.ДоговорыКонтрагентов.ПустаяСсылка(); // любой договор
	
	Если Форма.ИзмененоПредставлениеДолжностьРуководителяКонтрагента 
			   И ТипЗнч(Форма.СклоненияДолжностьРуководителяКонтрагента) = Тип("ФиксированнаяСтруктура") Тогда
		
		ДоговорыКонтрагентовФормыУХВызовСервера.ЗаписатьВРегистрСклонения(
			ОбъектСоСклоняемымиРеквизитами,
			ТекущийОбъект.ДолжностьРуководителяКонтрагента,
			Форма.СклоненияДолжностьРуководителяКонтрагента);
		Форма.ИзмененоПредставлениеДолжностьРуководителяКонтрагента = Ложь;

	КонецЕсли;
	
	Если Форма.ИзмененоПредставлениеРуководительКонтрагента
	   И ТипЗнч(Форма.СклоненияРуководительКонтрагента) = Тип("ФиксированнаяСтруктура") Тогда

		ДоговорыКонтрагентовФормыУХВызовСервера.ЗаписатьВРегистрСклонения(
			ОбъектСоСклоняемымиРеквизитами,
			ТекущийОбъект.РуководительКонтрагента,
			Форма.СклоненияРуководительКонтрагента);
		Форма.ИзмененоПредставлениеРуководительКонтрагента = Ложь;

	КонецЕсли;
	
	Форма.Склонения = Форма[ТекущийРеквизитСклонения];
	Форма.ИзмененоПредставление = Ложь;	
	
КонецПроцедуры

Процедура ОбновитьЭлементыДополнительныхРеквизитов(Форма)

	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(Форма, Форма.РеквизитФормыВЗначение("Объект"));

КонецПроцедуры

Процедура УстановитьОтборыПодчиненныхСписковФормы(Форма)
	
	Объект = Форма.Объект;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПериодическиеОперации") Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Форма.ПериодическиеОперации,"ДоговорКонтрагента", Объект.ДоговорКонтрагента,ВидСравненияКомпоновкиДанных.Равно,,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОграничитьВыборРеквизитов(Форма, ЗначенияЗаполнения) Экспорт
	
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Если ЗначенияЗаполнения.Свойство("Организация") Тогда
		Если ТипЗнч(ЗначенияЗаполнения.Организация) = Тип("СправочникСсылка.Организации") Тогда
			Элементы.Организация.ТолькоПросмотр = ЗначениеЗаполнено(ЗначенияЗаполнения.Организация);
		КонецЕсли;
	КонецЕсли;

	Если (ЗначенияЗаполнения.Свойство("Владелец") И ТипЗнч(ЗначенияЗаполнения.Владелец) = Тип("СправочникСсылка.Контрагенты"))
		ИЛИ (ЗначенияЗаполнения.Свойство("Контрагент") И ТипЗнч(ЗначенияЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты")) Тогда

			Элементы.Контрагент.ТолькоПросмотр = Истина;

	КонецЕсли;
	
	Если ЗначенияЗаполнения.Свойство("ВалютаВзаиморасчетов") Тогда
		Если ТипЗнч(ЗначенияЗаполнения.ВалютаВзаиморасчетов) = Тип("СправочникСсылка.Валюты") Тогда
			Элементы.ВалютаВзаиморасчетов.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	//Проверим, передавались ли ограничения по валюте
	Если Параметры.ЗначенияЗаполнения.Свойство("Валютный") Тогда
		ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		
		МассивРазрешенныхВалют = ДоговорыКонтрагентовВстраиваниеУХ.ПодготовитьСписокРазрешенныхВалют(
				ВалютаРегламентированногоУчета, Параметры.ЗначенияЗаполнения.Валютный);
		
		Элементы.ВалютаВзаиморасчетов.ПараметрыВыбора = Новый ФиксированныйМассив(МассивРазрешенныхВалют);
		
	КонецЕсли;
	
	Если Параметры.ЗначенияЗаполнения.Свойство("ОплатаВВалюте") Тогда
		Форма.УсловиеОплатаВВалютеПередано = Истина;
	КонецЕсли;
	
	ДоговорыКонтрагентовВстраиваниеУХ.ОграничитьВыборРеквизитов(Форма, ЗначенияЗаполнения);
	
КонецПроцедуры

Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(Элементы, Форма);
	Форма.Команды["ПринятьКСогласованию"].Действие	 = "Подключаемый_ВыполнитьКомандуСогласования";
	Форма.Команды["ИсторияСогласования"].Действие	 = "Подключаемый_ВыполнитьКомандуСогласования";
	Форма.Команды["СогласоватьДокумент"].Действие	 = "Подключаемый_ВыполнитьКомандуСогласования";
	Форма.Команды["ОтменитьСогласование"].Действие	 = "Подключаемый_ВыполнитьКомандуСогласования";
	Форма.Команды["МаршрутСогласования"].Действие	 = "Подключаемый_ВыполнитьКомандуСогласования";
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(Форма);
	ЭлементСтатусОбъекта = Элементы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "Подключаемый_СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
	#Если НЕ ВебКлиент Тогда
	ДействияСогласованиеУХСервер.УстановитьДействиеПриИзмененииСогласованияОрганизации(Форма);
	#КонецЕсли
КонецПроцедуры
	
Функция ЗаполнитьДоговорОбъект(Форма)
	
	Объект = Форма.Объект;
	Параметры = Форма.Параметры;
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ДоговорОбъект = Объект.ДоговорКонтрагента.ПолучитьОбъект();

	ИначеЕсли ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		ДоговорКопирования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "ДоговорКонтрагента");
		ДоговорОбъект = ДоговорКопирования.Скопировать();
	Иначе
		
		ИмяСправочникаДоговоры = Объект.ДоговорКонтрагента.Метаданные().Имя;
		
		ДоговорОбъект = Справочники[ИмяСправочникаДоговоры].СоздатьЭлемент();
		
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
			ДоговорОбъект.Заполнить(Параметры.ЗначенияЗаполнения);
		КонецЕсли;
	КонецЕсли;
	
	Форма.ЗначениеВРеквизитФормы(ДоговорОбъект, "ДоговорОбъект");
	
	Возврат ДоговорОбъект;
	
КонецФункции

Функция ТребуетсяГрафикРасчетов(Форма)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ГрафикРасчетов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Объект = Форма.Объект;
	ВидДоговораУХ = РаботаСДоговорамиКонтрагентовУХ.ВидДоговораУХОбъекта(Объект);
	Возврат РаботаСДоговорамиКонтрагентовУХ.ВедетсяГрафикРасчетов(ВидДоговораУХ);
		
КонецФункции

Процедура ПриСозданииЧтенииНаСервере(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	НуженГрафик = ТребуетсяГрафикРасчетов(Форма);
	Если НуженГрафик Тогда
		МенеджерВерсииСоглашения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
		Форма.ОписаниеГрафика = МенеджерВерсииСоглашения.ОписаниеГрафика(Объект.ВидДоговораУХ);
	КонецЕсли;	
	
	УстановитьЗаголовокФормы(Форма);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьТекстНадписиПроизводственныеКалендари(Форма);
	
	Если НуженГрафик Тогда
		СоздатьТаблицыГрафикаНаФорме(Форма);
		СтруктураДействий = Новый Структура("ЗагружатьФакт");
		ОбновитьТаблицуГрафикРасчетов(Форма, СтруктураДействий);
	КонецЕсли;
	
	СоздатьЭлементыАналитикСтатейНаФорме(Форма);
	
	// Кнопка КонтрольДокументов располагается в группе ГруппаГлобальныеКоманды
	Если Форма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ГруппаГлобальныеКоманды") = неопределено Тогда
		// Добавить группу
		ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаГлобальныеКоманды", , ВидГруппыФормы.ГруппаКнопок, Форма.КоманднаяПанель);
	КонецЕсли;
	
	// Контроль документа
	Если ТребуетсяКонтрольЛимитов(Объект) Тогда
		КонтрольУХ.ПодготовитьФормунаСервере(Форма, Элементы.Страницы);
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьТаблицыГрафикаНаФорме(Форма) Экспорт
	СоздатьКолонкиИРеквизитыГрафикаРасчетовНаФорме(Форма);
	СоздатьКолонкиГрафикаРасчетовЛинейныйНаФорме(Форма);
	СоздатьРеквизитТаблицаФактНаФорме(Форма);
КонецПроцедуры

Процедура СоздатьКолонкиИРеквизитыГрафикаРасчетовНаФорме(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ГрафикРасчетов") = Неопределено Тогда // не требуется график
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ГрафикРасчетовДата") <> Неопределено Тогда // уже создали
		Возврат;
	КонецЕсли;
	
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	// Реквизиты
	ПутьКТаблице = "ГрафикРасчетов";
	МассивДобавляемыхРеквизитов = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)), 
		ПутьКТаблице, "Дата");
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);	
		
	МассивКолонокОписаний = СтрРазделить("КолонкаПриход КолонкаРасход КолонкаОстаток", " ");
	МассивПланФакт = Новый Массив;
	МассивПланФакт.Добавить(Новый Структура("Постфикс, Заголовок", "", 			"График"));
	МассивПланФакт.Добавить(Новый Структура("Постфикс, Заголовок", "Факт", 		"Факт"));
	МассивПланФакт.Добавить(Новый Структура("Постфикс, Заголовок", "ПланФакт", 	"Отклонение"));
	
	ОписаниеТипаКолонки = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип;
	
	Для каждого ЭлементОписания Из ОписаниеГрафика Цикл
		ОписаниеСекции = ЭлементОписания.Значение;
		Для каждого ИмяКолонкиОписания Из МассивКолонокОписаний Цикл
			Для каждого Разрез Из МассивПланФакт Цикл
				ИмяРеквизита = ОписаниеСекции[ИмяКолонкиОписания] + Разрез.Постфикс;
				Заголовок = Разрез.Заголовок;
				НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаКолонки, ПутьКТаблице, Заголовок);
				МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НовыйРеквизит = Новый РеквизитФормы("Отступ", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(1)), 
		ПутьКТаблице, "Отступ");
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Элементы формы 
	Элементы = Форма.Элементы;
	ТаблицаФормыГрафик = Форма.Элементы.ГрафикРасчетов;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовДата", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "ГрафикРасчетов.Дата";
	
	Для каждого ЭлементОписания Из ОписаниеГрафика Цикл
		ОписаниеСекции = ЭлементОписания.Значение;		
		
		ИмяГруппыСекция = "ГрафикРасчетовГруппа" + ОписаниеСекции.Имя; // ГрафикРасчетовГруппаОсновнойДолг
		ГруппаСекция = Элементы.Добавить(ИмяГруппыСекция, Тип("ГруппаФормы"), ТаблицаФормыГрафик);
		ГруппаСекция.Вид = ВидГруппыФормы.ГруппаКолонок; 
		ГруппаСекция.Заголовок = ОписаниеСекции.Представление; // Основной долг
		ГруппаСекция.Группировка = ГруппировкаКолонок.Горизонтальная;
		ГруппаСекция.ОтображатьВШапке = Истина;
			
		Для каждого ИмяКолонкиОписания Из МассивКолонокОписаний Цикл
			
			ИмяГруппыКолонки = "ГрафикРасчетовГруппа" + ОписаниеСекции[ИмяКолонкиОписания]; // ГрафикРасчетовГруппаОсновнойДолгПриход
			ГруппаКолонка = Элементы.Добавить(ИмяГруппыКолонки, Тип("ГруппаФормы"), ГруппаСекция);
			ГруппаКолонка.Вид = ВидГруппыФормы.ГруппаКолонок;
			ГруппаКолонка.Заголовок = ОписаниеСекции[ИмяКолонкиОписания + "Представление"]; // Начисление
			ГруппаКолонка.Группировка = ГруппировкаКолонок.Горизонтальная;
			ГруппаКолонка.ОтображатьВШапке = Истина;
			
			Для каждого Разрез Из МассивПланФакт Цикл
				ИмяКолонки = "ГрафикРасчетов" + ОписаниеСекции[ИмяКолонкиОписания] + Разрез.Постфикс; // ГрафикРасчетовГруппаОсновнойДолгПриходФакт
				Колонка = Элементы.Добавить(ИмяКолонки, Тип("ПолеФормы"), ГруппаКолонка);
				Колонка.Вид = ВидПоляФормы.ПолеВвода; 
				Колонка.ОтображатьВШапке = ЗначениеЗаполнено(Разрез.Постфикс); // по умолчанию нижний уровень колонок с фактом не отображается, только плановые значения
				Колонка.Видимость = НЕ ЗначениеЗаполнено(Разрез.Постфикс);
				Колонка.ПутьКДанным = "ГрафикРасчетов." + ОписаниеСекции[ИмяКолонкиОписания] + Разрез.Постфикс;			
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// на случай если мало элементов, чтобы последний не был очень большим
	Элемент = Элементы.Добавить("ГрафикРасчетовОтступ", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "ГрафикРасчетов.Отступ";
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ТолькоПросмотр = Истина;
	
	ДобавитьПодключаемыеКомандыГрафикаРасчетов(Форма);
	
КонецПроцедуры

Процедура ДобавитьПодключаемыеКомандыГрафикаРасчетов(Форма)
	
	Элементы = Форма.Элементы;
	КомандыФормы = Форма.Команды;
	ТаблицаФормыГрафик = Форма.Элементы.ГрафикРасчетов;
	
	// Сравнить текущий и предыдущие версии графика
	Команда = КомандыФормы.Добавить("СравнитьВерсииГрафиков");
	Команда.Заголовок = Нстр("ru = 'Сравнить версии'");
	Команда.Подсказка = Нстр("ru = 'Сравнить текущий и предыдущие версии графика'");
	Команда.Действие = "Подключаемый_СравнитьВерсииГрафиков";
	
	Элемент = Элементы.Добавить("ГрафикРасчетовСравнитьВерсииГрафиков", Тип("КнопкаФормы"), ТаблицаФормыГрафик.КоманднаяПанель);
	Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	Элемент.ИмяКоманды = "СравнитьВерсииГрафиков";
	
КонецПроцедуры

Процедура СоздатьКолонкиГрафикаРасчетовЛинейныйНаФорме(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ГрафикРасчетовЛинейный") = Неопределено Тогда // не требуется график
		Возврат;
	КонецЕсли;
	
	Если Форма.Элементы.Найти("ГрафикРасчетовЛинейныйДата") <> Неопределено Тогда // уже создали
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	ТаблицаФормыГрафик = Форма.Элементы.ГрафикРасчетовЛинейный;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйНомерСтроки", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеНадписи;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.НомерСтроки";
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйДата", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.Дата";
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГрафикРасчетовЛинейныйДатаПриИзменении");
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйСумма", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.Сумма";
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГрафикРасчетовЛинейныйСуммаПриИзменении");
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйСуммаРасчет", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.СуммаРасчет";
	Элемент.Заголовок = "Расчет";
	Элемент.Видимость = Ложь;
	Элемент.ТолькоПросмотр = Истина;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйСуммаКорректировка", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.СуммаКорректировка";
	Элемент.Заголовок = "Поправка";
	Элемент.Видимость = Ложь;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГрафикРасчетовЛинейныйСуммаКорректировкаПриИзменении");
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйВалюта", Тип("ПолеФормы"), ТаблицаФормыГрафик);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.Валюта";
	
	ГруппаОперация = Элементы.Добавить("ГрафикРасчетовЛинейныйГруппаОперация", Тип("ГруппаФормы"), ТаблицаФормыГрафик);
	ГруппаОперация.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаОперация.Заголовок = Нстр("ru = 'Операция'");
	ГруппаОперация.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаОперация.ОтображатьВШапке = Ложь;

	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйОперацияГрафика", Тип("ПолеФормы"), ГруппаОперация);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.ОперацияГрафика";
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ГрафикРасчетовЛинейныйОперацияГрафикаПриИзменении");
	
	ГруппаСвойстваОперации = Элементы.Добавить("ГрафикРасчетовЛинейныйГруппаСвойстваОперации", Тип("ГруппаФормы"), ГруппаОперация);
	ГруппаСвойстваОперации.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСвойстваОперации.Заголовок = Нстр("ru = 'Свойства операции'");
	ГруппаСвойстваОперации.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаСвойстваОперации.ТолькоПросмотр = Истина;
	ГруппаСвойстваОперации.ОтображатьВШапке = Ложь;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйВидБюджета", Тип("ПолеФормы"), ГруппаСвойстваОперации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.ВидБюджета";
	Элемент.ОтображатьВШапке = Ложь;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйЭлементСтруктурыЗадолженности", Тип("ПолеФормы"), ГруппаСвойстваОперации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.ЭлементСтруктурыЗадолженности";
	Элемент.ОтображатьВШапке = Ложь;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйНаправлениеДвижения", Тип("ПолеФормы"), ГруппаСвойстваОперации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.НаправлениеДвижения";
	Элемент.ОтображатьВШапке = Ложь;
	
	ГруппаСтатьяАналитики = Элементы.Добавить("ГрафикРасчетовЛинейныйГруппаСтатьяАналитики", Тип("ГруппаФормы"), ТаблицаФормыГрафик);
	ГруппаСтатьяАналитики.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаСтатьяАналитики.Заголовок = Нстр("ru = 'Статья / аналитики'");
	ГруппаСтатьяАналитики.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаСтатьяАналитики.ОтображатьВШапке = Ложь;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйСтатьяБюджета", Тип("ПолеФормы"), ГруппаСтатьяАналитики);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.СтатьяБюджета";
	Элемент.СвязьПоТипу = Новый СвязьПоТипу("Объект.Графикрасчетов.ВидБюджета");
	
	ГруппаАналитикиСтатьи = Элементы.Добавить("ГрафикРасчетовЛинейныйГруппаАналитикиСтатьи", Тип("ГруппаФормы"), ГруппаСтатьяАналитики);
	ГруппаАналитикиСтатьи.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаАналитикиСтатьи.Группировка = ГруппировкаКолонок.Горизонтальная;
	ГруппаАналитикиСтатьи.ОтображатьВШапке = Ложь;

	ГруппаЦФОПроект = Элементы.Добавить("ГрафикРасчетовЛинейныйГруппаЦФОПроект", Тип("ГруппаФормы"), ТаблицаФормыГрафик);
	ГруппаЦФОПроект.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаЦФОПроект.Заголовок = Нстр("ru = 'ЦФО / Проект'");
	ГруппаЦФОПроект.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаЦФОПроект.ОтображатьВШапке = Ложь;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйЦФО", Тип("ПолеФормы"), ГруппаЦФОПроект);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.ЦФО";
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйПроект", Тип("ПолеФормы"), ГруппаЦФОПроект);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.Проект";
	
	ГруппаБанковскиеСчета = Элементы.Добавить("ГрафикРасчетовЛинейныйГруппаБанковскиеСчета", Тип("ГруппаФормы"), ТаблицаФормыГрафик);
	ГруппаБанковскиеСчета.Вид = ВидГруппыФормы.ГруппаКолонок;
	ГруппаБанковскиеСчета.Заголовок = Нстр("ru = 'Банковские счета'");
	ГруппаБанковскиеСчета.Группировка = ГруппировкаКолонок.Вертикальная;
	ГруппаБанковскиеСчета.ОтображатьВШапке = Ложь;
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйСчетОрганизации", Тип("ПолеФормы"), ГруппаБанковскиеСчета);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.СчетОрганизации";
	
	Элемент = Элементы.Добавить("ГрафикРасчетовЛинейныйСчетКонтрагента", Тип("ПолеФормы"), ГруппаБанковскиеСчета);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.ПутьКДанным = "Объект.ГрафикРасчетов.СчетКонтрагента";
	
	УстановитьУсловноеОформлениеАналитикПланирования(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеАналитикПланирования(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭлементУО = Форма.УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ГрафикРасчетовЛинейныйСтатьяБюджета.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ГрафикРасчетовЛинейныйГруппаАналитикиСтатьи.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ГрафикРасчетовЛинейныйЦФО.Имя);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, Элементы.ГрафикРасчетовЛинейныйПроект.Имя);
	
	ГруппаИЛИ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	ГруппаБДДС = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ГруппаБДР = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ГруппаБЗ = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ.Элементы, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБДДС,	"Объект.ГрафикРасчетов.ВидБюджета", ВидСравненияКомпоновкиДанных.Равно, ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБДДС,	"БюджетДвиженияДенежныхСредствИспользуется", ВидСравненияКомпоновкиДанных.Равно, ЛОЖЬ,,Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБДР,	"Объект.ГрафикРасчетов.ВидБюджета", ВидСравненияКомпоновкиДанных.Равно, ПланыВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБДР,	"БюджетДоходовРасходовИспользуется", ВидСравненияКомпоновкиДанных.Равно, ЛОЖЬ,,Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБЗ,	"Объект.ГрафикРасчетов.ВидБюджета", ВидСравненияКомпоновкиДанных.Равно, ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов,,Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаБЗ,	"БюджетЗакупокИспользуется", ВидСравненияКомпоновкиДанных.Равно, ЛОЖЬ,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
КонецПроцедуры

Процедура СоздатьРеквизитТаблицаФактНаФорме(Форма) Экспорт
	
	Если Форма.Элементы.Найти("ГрафикРасчетов") = Неопределено Тогда // не требуется график
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаФакт") Тогда
		Возврат; // уже создали
	КонецЕсли;

	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	// Реквизиты
	МассивДобавляемыхРеквизитов = Новый Массив;
	НовыйРеквизит = Новый РеквизитФормы("ТаблицаФакт", Новый ОписаниеТипов("ТаблицаЗначений"));
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);	
	
	ПутьКТаблице = "ТаблицаФакт";
	
	НовыйРеквизит = Новый РеквизитФормы("Дата", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата)), 
		ПутьКТаблице, "Дата");
	МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
	
	МассивКолонокОписаний = СтрРазделить("КолонкаПриход КолонкаРасход", " ");
	ОписаниеТипаКолонки = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаНеотрицательная.Тип;
	
	Для каждого ЭлементОписания Из ОписаниеГрафика Цикл
		ОписаниеСекции = ЭлементОписания.Значение;
		Для каждого ИмяКолонкиОписания Из МассивКолонокОписаний Цикл
			ИмяРеквизита = ОписаниеСекции[ИмяКолонкиОписания];
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипаКолонки, ПутьКТаблице);
			МассивДобавляемыхРеквизитов.Добавить(НовыйРеквизит);
		КонецЦикла;
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);

Конецпроцедуры

Функция ТребуетсяКонтрольЛимитов(Объект)
	Возврат Истина;
	////Если Объект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком Тогда
	//Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор") Тогда
	//	Возврат Истина;
	//Иначе
	//	Возврат Ложь;
	//КонецЕсли;
КонецФункции

Процедура ДобавитьОписаниеАналитикиСтатьиДДС(Форма, МассивОписанийСтатей)
	
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей, "СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств", 
		"АналитикаБДДС%1", "АналитикаБДДС%1", ФормыУХ.РазместитьВГруппеСтрокой(Форма.Элементы.ГруппаАналитикиСтатьиБДДС));
	
КонецПроцедуры	

Процедура ДобавитьОписаниеАналитикиСтатьиИсполнения(Форма, МассивОписанийСтатей)
		
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей, "ОсновнаяСтатьяИсполнение", "ОсновнаяСтатьяИсполнение", 
		"АналитикаИсполнение%1", "АналитикаИсполнение%1", ФормыУХ.РазместитьВГруппеСтрокой(Форма.Элементы.ГруппаАналитикиИсполнение));
	
КонецПроцедуры	

Процедура ДобавитьОписаниеАналитикиСтатьиКомиссионногоВознаграждения(Форма, МассивОписанийСтатей)
		
	АналитикиСтатейБюджетовУХ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей, 
		"СтатьяКомиссионногоВознаграждения", "СтатьяКомиссионногоВознаграждения", 
		"АналитикаКомиссионногоВознаграждения%1", "АналитикаКомиссионногоВознаграждения%1", 
		ФормыУХ.РазместитьВГруппеСтрокой(Форма.Элементы.ГруппаАналитикиКомиссионногоВознаграждения));
	
КонецПроцедуры

Функция ВидыСвязейОсновноеОбязательство()
	
	ВидыСвязей = Новый Массив;
	ВидыСвязей.Добавить(Справочники.ВидыСвязейОбъектов.ОбеспечениеПолученное);
	ВидыСвязей.Добавить(Справочники.ВидыСвязейОбъектов.ОбеспечениеВыданное);
	
	Возврат ВидыСвязей;
	
КонецФункции

Функция ВидСвязиОсновноеОбязательство(ВидДоговораУХ)
	
	Если ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваВходящие Тогда
		Возврат Справочники.ВидыСвязейОбъектов.ОбеспечениеПолученное;
		
	ИначеЕсли ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваИсходящие Тогда
		Возврат Справочники.ВидыСвязейОбъектов.ОбеспечениеВыданное;
		
	Иначе
		Возврат Справочники.ВидыСвязейОбъектов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ДоговорыКонтрагентов
// Дополнительная обработка события ПриСозданииНаСервере справочника ДоговорыКонтрагентов
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма справочника ДоговорыКонтрагентов
//
Процедура ДоговорКонтрагентаПриСозданииНаСервере(Форма) Экспорт
	ОбработатьОтсутствиеВерсииСоглашения(Форма);
КонецПроцедуры

Процедура ДоговорКредитаИДепозитаПриСозданииНаСервере(Форма) Экспорт
	ОбработатьОтсутствиеВерсииСоглашения(Форма);
КонецПроцедуры

Процедура ОбработатьОтсутствиеВерсииСоглашения(Форма)
	
	Объект = Форма.Объект;
	
	ДобавитьЭлементТекстПредупрежденияОбОтсутствииВерсииСоглашения(Форма);
	ОбновитьТекстПредупрежденияОбОтсутствииВерсииСоглашения(Форма);		
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияСоглашения) Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьТекстПредупрежденияОбОтсутствииВерсииСоглашения(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
		
	ИмяПредупреждения = ИмяЭлементаТекстПредупрежденияОбОтсутствииВерсииСоглашения(); 
	ЭлементПредупреждение = Элементы.Найти(ИмяПредупреждения);
	
	Если НЕ ЗначениеЗаполнено(Объект.ВерсияСоглашения) Тогда
		Форма[ИмяПредупреждения] = Нстр("ru = 'Отсутствует версия соглашения у договора (нажмите для создания версии)'");
		ЭлементПредупреждение.Видимость = Истина;
	Иначе
		Форма[ИмяПредупреждения] = "";
		ЭлементПредупреждение.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры	

// Устанавливает текст надписи - предупреждение об отсутствии версии соглашения
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма справочника ДоговорыКонтрагентов
//
Процедура ДобавитьЭлементТекстПредупрежденияОбОтсутствииВерсииСоглашения(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
		
	ИмяПредупреждения = ИмяЭлементаТекстПредупрежденияОбОтсутствииВерсииСоглашения(); 
	ЭлементПредупреждение = Элементы.Найти(ИмяПредупреждения);
	Если ЭлементПредупреждение = Неопределено Тогда
		
		МассивДобавляемыхРеквизитов = Новый Массив;
		Реквизит = Новый РеквизитФормы(ИмяПредупреждения, 
						Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)), 
						"",   // Путь
						"",   // Заголовок
						Ложь  // Сохраняемые данные
						);
		МассивДобавляемыхРеквизитов.Добавить(Реквизит);
		Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов); 
		
		ЭлементПредупреждение = Элементы.Вставить(ИмяПредупреждения, Тип("ПолеФормы"),,Элементы.ГруппаСтраницы);
			
		ЭлементПредупреждение.Вид  = ВидПоляФормы.ПолеНадписи;
		ЭлементПредупреждение.Гиперссылка = Истина;
		ЭлементПредупреждение.Ширина = 80;
		ЭлементПредупреждение.ПутьКДанным = ИмяПредупреждения;
		ЭлементПредупреждение.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ЭлементПредупреждение.ЦветТекста = ЦветаСтиля.ЦветШрифтаОшибкиУХ;
		ЭлементПредупреждение.Шрифт = Новый Шрифт(ЭлементПредупреждение.Шрифт,,,Истина); // полужирный
		ЭлементПредупреждение.УстановитьДействие("Нажатие", "Подключаемый_ТекстПредупрежденияОбОтсутствииВерсииСоглашенияНажатие");
		ЭлементПредупреждение.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Функция ИмяЭлементаТекстПредупрежденияОбОтсутствииВерсииСоглашения() Экспорт
	Возврат "ТекстПредупрежденияОбОтсутствииВерсииСоглашения"; 
КонецФункции
#КонецОбласти

#Область ПараметрыОперацийГрафика
Функция ДанныеОткрытияПараметровОперацийГрафика(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	НастройкиОпераций = Объект.ПараметрыОпераций.Выгрузить();
	АдресНастроек = ПоместитьВоВременноеХранилище(НастройкиОпераций, Форма.УникальныйИдентификатор);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("АдресНастроек", АдресНастроек);
	
	ГруппаОперацийГрафика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ВидДоговораУХ, "ГруппаОперацийГрафика");
	ПараметрыОткрытия.Вставить("ГруппаОперацийГрафика", ГруппаОперацийГрафика);
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", НЕ Форма.РежимРедактирования);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции

Функция ЗагрузитьПараметрыОперацийГрафика(Форма, АдресНастроек) Экспорт
	
	Объект = Форма.Объект;
	
	ТаблицаНастроек = ПолучитьИзВременногоХранилища(АдресНастроек);	
	ЗаполнитьПараметрыОперацийГрафикаИзТаблицы(Форма, ТаблицаНастроек);
		
КонецФункции

Процедура ЗаполнитьПараметрыОперацийГрафикаИзТаблицы(Форма, ТаблицаНастроек)
	
	Объект = Форма.Объект;
	
	Объект.ПараметрыОпераций.Загрузить(ТаблицаНастроек);
	Форма.Модифицированность = Истина;
	
	// переинициализируем операции с учетом новых настроек
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОперацииГрафика") Тогда
		ИнициализироватьПереченьОперацийГрафика(Форма);
	КонецЕсли;
	
	ОбновитьОперацииГрафикаПоПараметрамОперацийВерсии(Объект.ГрафикРасчетов, Объект.ПараметрыОпераций);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);

КонецПроцедуры

Процедура ОбновитьОперацииГрафикаПоПараметрамОперацийВерсии(ГрафикРасчетов, ПараметрыОпераций)
	
	Для каждого СтрокаГрафика ИЗ ГрафикРасчетов Цикл
		
		СтрокиПараметров = ПараметрыОпераций.НайтиСтроки(
			Новый Структура("ОперацияГрафика", СтрокаГрафика.ОперацияГрафика));
			
		Если ЗначениеЗаполнено(СтрокиПараметров) Тогда
			 ЗаполнитьЗначенияСвойств(СтрокаГрафика, СтрокиПараметров[0]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти