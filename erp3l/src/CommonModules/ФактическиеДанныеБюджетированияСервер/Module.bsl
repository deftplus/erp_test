
#Область ПодпискиНаСобытия

Процедура ОтметитьДокументКОтражениюВБюджетированииПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;

	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение
	 ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Для Каждого Движения Из Источник.Движения Цикл
			Движения.ДополнительныеСвойства.Вставить("НеОтражатьВБюджетировании", Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриЗаписиНабораЗаписей(Источник, Отказ, РежимЗаписи) Экспорт
	Перем НомерЗадания;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеОтражатьВБюджетировании") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Попытка
		ЕстьИзменения = Ложь;
		
		Регистратор = Источник.Отбор.Регистратор.Значение;
		НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
		НаборЗаписей.Прочитать();
		
		Периоды = Источник.Выгрузить(, "Период");
		Для Каждого СтрокаПериода Из Периоды Цикл
			СтрокаПериода.Период = НачалоДня(СтрокаПериода.Период);
		КонецЦикла;
		Периоды.Свернуть("Период");
		
		Для Каждого СтрокаПериода Из Периоды Цикл
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, СтрокаПериода.Период, ЕстьИзменения);
		КонецЦикла;
		
		Если Не Периоды.Количество() Тогда
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ОтметитьДокументКОтражениюВБюджетированииПриПроведении(Источник, Отказ, РежимЗаписи) Экспорт
	Перем НомерЗадания, ЕстьИзменения;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		ЕстьИзменения = Ложь;
		
		Регистратор = Источник.Ссылка;
		НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
		
		ВсеПериоды = Новый ТаблицаЗначений;
		ВсеПериоды.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
		
		Для Каждого Движения Из Источник.Движения Цикл
			МетаданныеРегистра = Метаданные.НайтиПоТипу(ТипЗнч(Движения));
			Если ОбщегоНазначения.ЭтоРегистрБухгалтерии(МетаданныеРегистра)
				ИЛИ ОбщегоНазначения.ЭтоРегистрНакопления(МетаданныеРегистра) Тогда
				Периоды = Движения.Выгрузить(, "Период"); // ТаблицаЗначений - 
				Периоды.Свернуть("Период");
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Периоды, ВсеПериоды);
			КонецЕсли;
		КонецЦикла;
		
		ВсеПериоды.Свернуть("Период");
		
		Для Каждого СтрокаПериода Из ВсеПериоды Цикл
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, СтрокаПериода.Период, ЕстьИзменения);
		КонецЦикла;
		
		Если Не ВсеПериоды.Количество() Тогда
			ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не Отказ И ЕстьИзменения И Константы.АктуализироватьФактБюджетированияПриПроведенииДокументов.Получить() Тогда
		ОтразитьДокументыФоновымЗаданием(,,Ложь);
	КонецЕсли;
	
КонецПроцедуры


// Отмечает документ к отражению в бюджетировании.
// 
// Параметры:
// 	Источник - ДокументОбъект - 
// 	Отказ - Булево - 
Процедура ОтметитьДокументКОтражениюВБюджетированииПриУдаленииПроведения(Источник, Отказ) Экспорт
	Перем НомерЗадания;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не НужноСтавитьДокументВОчередьЗаданий(Источник) Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		ЕстьИзменения = Ложь;
		
		Регистратор = Источник.Ссылка;
		НаборЗаписей = НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор);
		ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, Дата(1, 1, 1), ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			НаборЗаписей.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Если Не Отказ И ЕстьИзменения И	Константы.АктуализироватьФактБюджетированияПриПроведенииДокументов.Получить() Тогда
		ОтразитьДокументыФоновымЗаданием(,,Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НаборЗаписейОтраженияВБюджетировании(НомерЗадания, Регистратор)
	
	НомерЗадания = 0;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить();
	ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", НомерЗадания);
	ЭлементБлокировки.УстановитьЗначение("Документ",     Регистратор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Блокировка.Заблокировать();
	
	НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.НомерЗадания.Установить(НомерЗадания);
	НаборЗаписей.Отбор.Документ.Установить(Регистратор);
	
	Возврат НаборЗаписей;
	
КонецФункции

Процедура ДобавитьЗаписьОтраженияВБюджетировании(НаборЗаписей, НомерЗадания, Регистратор, ПериодЗаписи, ЕстьИзменения)
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.ПериодЗаписи = ПериодЗаписи Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	Запись = НаборЗаписей.Добавить();
	Запись.НомерЗадания = НомерЗадания;
	Запись.Документ = Регистратор;
	Запись.ПериодЗаписи = ПериодЗаписи;
	Запись.ИмяВидаДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Регистратор)).Имя;
	
	ЕстьИзменения = Истина;
	
КонецПроцедуры


// Возвращает флаг необходимости установки документа (регистратора) в очередь отражения бюджетирования.
// 
// Параметры:
// 	Источник - ДокументОбъект, РегистрНакопленияНаборЗаписей -
// Возвращаемое значение:
// 	Булево - 
Функция НужноСтавитьДокументВОчередьЗаданий(Источник)
	Перем КэшФОИспользоватьБюджетирование;
	
	Если Источник.ДополнительныеСвойства.Свойство("ИспользоватьБюджетирование", КэшФОИспользоватьБюджетирование) Тогда
		Если КэшФОИспользоватьБюджетирование = Ложь Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьБюджетирование") Тогда
		Источник.ДополнительныеСвойства.Вставить("ИспользоватьБюджетирование", Ложь);
		Возврат Ложь;
	КонецЕсли;
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Если Не ЗначениеЗаполнено(Источник.ОбменДанными.Отправитель) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ФактическиеДанныеБюджетирования") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("РегистрНакопленияНаборЗаписей.ОборотыБюджетов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЭкземплярБюджета") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МетаданныеОбъекта = Источник.Метаданные(); // ОбъектМетаданныхРегистрНакопления, ОбъектМетаданныхДокумент -
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеОбъекта) Тогда
		Регистратор = Источник.Отбор.Регистратор.Значение;
		РегистраторыФактическихДанных = Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования.СтандартныеРеквизиты.Регистратор.Тип;
		
		Если Не РегистраторыФактическихДанных.СодержитТип(ТипЗнч(Регистратор)) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Если Не Источник.Количество() Тогда
			ПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "ПометкаУдаления");
			Если ПометкаУдаления = Неопределено ИЛИ ПометкаУдаления = Истина Тогда
				Возврат Ложь;
			КонецЕсли;
			Запрос = Новый Запрос();
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
				|	1
				|ИЗ
				|	&Таблица КАК Таблица
				|ГДЕ
				|	Таблица.Регистратор = &Регистратор";
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", "РегистрНакопления." + МетаданныеОбъекта.Имя);
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			Если Запрос.Выполнить().Пустой() Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		РегистраторыФактическихДанных = Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования.СтандартныеРеквизиты.Регистратор.Тип;
		Если Не РегистраторыФактическихДанных.СодержитТип(ТипЗнч(Источник.Ссылка)) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила, КэшИменДокументов = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеПравила) = Тип("СправочникОбъект.ПравилаПолученияФактаПоСтатьямБюджетов") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
			|	КэшИменДокументовДляОбработкиПоПравилу.Правило,
			|	КэшИменДокументовДляОбработкиПоПравилу.ИмяВидаДокумента
			|ИЗ
			|	РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу КАК КэшИменДокументовДляОбработкиПоПравилу
			|ГДЕ
			|	КэшИменДокументовДляОбработкиПоПравилу.Правило = &Правило";
		
		Запрос.УстановитьПараметр("Правило", ОписаниеПравила.Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ИменаВидовДокументов = РезультатЗапроса.Выгрузить();
		Правило = ОписаниеПравила.Ссылка;
	Иначе
		ИменаВидовДокументов = КэшИменДокументов.НайтиСтроки(Новый Структура("Правило", ОписаниеПравила.Правило));
		Правило = ОписаниеПравила.Правило;
	КонецЕсли;
	
	Если ИменаВидовДокументов.Количество() Тогда
		Возврат ИменаВидовДокументов;
	КонецЕсли;
		
	СКД = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ОписаниеПравила);
	Если СКД = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИменаВидовДокументов = Новый ТаблицаЗначений;
	ИменаВидовДокументов.Колонки.Добавить("Правило");
	ИменаВидовДокументов.Колонки.Добавить("ИмяВидаДокумента");
	
	Для Каждого Набор Из СКД.НаборыДанных Цикл
		Если ТипЗнч(Набор) <> Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			НоваяСтрока = ИменаВидовДокументов.Добавить();
			НоваяСтрока.Правило = ОписаниеПравила.Правило;
			Прервать;
		Иначе
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(Набор.Запрос);
			Для Каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
				Если ТипЗнч(ПакетЗапроса) = Тип("ЗапросУничтоженияТаблицыСхемыЗапроса") Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Колонка Из ПакетЗапроса.Колонки Цикл
					Если НРег(Колонка.Псевдоним) <> НРег("Регистратор") Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Тип Из Колонка.ТипЗначения.Типы() Цикл
						МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
						Если ОбщегоНазначения.ЭтоДокумент(МетаданныеТипа) Тогда
							НоваяСтрока = ИменаВидовДокументов.Добавить();
							НоваяСтрока.Правило = Правило;
							НоваяСтрока.ИмяВидаДокумента = МетаданныеТипа.Имя;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ИменаВидовДокументов.Количество() Тогда
		НоваяСтрока = ИменаВидовДокументов.Добавить();
		НоваяСтрока.Правило = Правило;
	КонецЕсли;
	
	ИменаВидовДокументов.Свернуть("Правило, ИмяВидаДокумента", "");
	
	НаборЗаписей = РегистрыСведений.КэшИменДокументовДляОбработкиПоПравилу.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Правило.Установить(Правило);
	НаборЗаписей.Загрузить(ИменаВидовДокументов);
	НаборЗаписей.Записать();
	
	Возврат ИменаВидовДокументов;
	
КонецФункции

// Рассчитывает значения в колонках выражений показателей в привилегированном режиме.
// 
// Параметры:
// 	СтрокаПравил - СтрокаТаблицыЗначений - строка таблицы правил макета (ПравилаПолученияФакта):
// 	 *ВыражениеПоказателяСуммаВалюта - Строка -
// 	 *ВыражениеПоказателяСуммаВалютаУпр - Строка -
// 	 *ВыражениеПоказателяСуммаВалютаРегл - Строка -
// 	 *ВыражениеПоказателяСуммаКорВалюта - Строка -
// 	 *ВыражениеПоказателяКоличество - Строка -
// 	 *ВыраженияПоказателейСуммы - Неопределено, Структура - 
// 	 *Правило - СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов -
// 	 *ИдентификаторИсточникаДанных - Строка -
// 	 *РазделИсточникаДанных - ПеречислениеСсылка.РазделыИсточниковДанныхБюджетирования - 
// 	 *ТипИтога - ПеречислениеСсылка.ТипыИтогов -
// 	 *ИсточникСуммыОперации - ПеречислениеСсылка.ПоказателиАналитическихРегистров
// 	 *ИсточникВалютный - Булево - 
//
Процедура РассчитатьКолонкиВыраженийПоказателей(СтрокаПравил)
	
	СтрокаПравил.ВыражениеПоказателяСуммаВалюта = ИсточникиДанныхПовтИсп.ВыражениеПоказателяСуммы(
		"ПравилаПолученияФактаПоСтатьямБюджетов",
		СтрокаПравил.ИдентификаторИсточникаДанных,
		"Валюта",
		СтрокаПравил.РазделИсточникаДанных,
		СтрокаПравил.ТипИтога,
		СтрокаПравил.ИсточникСуммыОперации,
		СтрокаПравил.ИсточникВалютный);
	
	СтрокаПравил.ВыражениеПоказателяСуммаВалютаУпр = ИсточникиДанныхПовтИсп.ВыражениеПоказателяСуммы(
		"ПравилаПолученияФактаПоСтатьямБюджетов",
		СтрокаПравил.ИдентификаторИсточникаДанных,
		"ВалютаУпр",
		СтрокаПравил.РазделИсточникаДанных,
		СтрокаПравил.ТипИтога,
		СтрокаПравил.ИсточникСуммыОперации,
		СтрокаПравил.ИсточникВалютный);
	
	СтрокаПравил.ВыражениеПоказателяСуммаВалютаРегл = ИсточникиДанныхПовтИсп.ВыражениеПоказателяСуммы(
		"ПравилаПолученияФактаПоСтатьямБюджетов",
		СтрокаПравил.ИдентификаторИсточникаДанных,
		"ВалютаРегл",
		СтрокаПравил.РазделИсточникаДанных,
		СтрокаПравил.ТипИтога,
		СтрокаПравил.ИсточникСуммыОперации,
		СтрокаПравил.ИсточникВалютный);
	
	СтрокаПравил.ВыражениеПоказателяСуммаКорВалюта = ИсточникиДанныхПовтИсп.ВыражениеПоказателяСуммы(
		"ПравилаПолученияФактаПоСтатьямБюджетов",
		СтрокаПравил.ИдентификаторИсточникаДанных,
		"КорВалюта",
		СтрокаПравил.РазделИсточникаДанных,
		СтрокаПравил.ТипИтога,
		СтрокаПравил.ИсточникСуммыОперации,
		СтрокаПравил.ИсточникВалютный);
	
	СтрокаПравил.ВыражениеПоказателяКоличество = ИсточникиДанныхПовтИсп.ВыражениеПоказателяКоличества(
		"ПравилаПолученияФактаПоСтатьямБюджетов",
		СтрокаПравил.ИдентификаторИсточникаДанных,
		СтрокаПравил.РазделИсточникаДанных,
		СтрокаПравил.ТипИтога);
	
	СтрокаПравил.ВыраженияПоказателейСуммы = ИсточникиДанныхПовтИсп.ВыраженияПоказателейСуммы(
		"ПравилаПолученияФактаПоСтатьямБюджетов",
		СтрокаПравил.ИдентификаторИсточникаДанных,
		СтрокаПравил.РазделИсточникаДанных,
		СтрокаПравил.ТипИтога,
		СтрокаПравил.ИсточникСуммыОперации,
		СтрокаПравил.ИсточникВалютный);
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструФактаБюджетирования(ДокументыКОбработке)
	
	СКДПравил = ИсточникиДанныхПовтИсп.ПолучитьМакетСправочника("ПравилаПолученияФактаПоСтатьямБюджетов", "ПравилаПолученияФакта");
	СКДПравил = КомпоновкаДанныхСервер.СкопироватьСхемуКомпоновкиДанных(СКДПравил); // СхемаКомпоновкиДанных -
	ПересчитываемыеПоля = Новый Соответствие;
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаВалюта", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаВалютаУпр", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаВалютаРегл", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяСуммаКорВалюта", """""");
	ПересчитываемыеПоля.Вставить("ВыражениеПоказателяКоличество", """""");
	ПересчитываемыеПоля.Вставить("ВыраженияПоказателейСуммы", "Неопределено");
	
	Для каждого ВычисляемоеПоле Из СКДПравил.ВычисляемыеПоля Цикл
		ПереопределениеВыражения = ПересчитываемыеПоля.Получить(ВычисляемоеПоле.ПутьКДанным);
		Если НЕ ПереопределениеВыражения = Неопределено Тогда
			ВычисляемоеПоле.Выражение = ПереопределениеВыражения;
		КонецЕсли;
	КонецЦикла;
	
	Настройки = СКДПравил.НастройкиПоУмолчанию;
	
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПромежуточноеКэшированиеРезультатовРаботыПравил", Истина);
	ФинансоваяОтчетностьСервер.УстановитьОтбор(Настройки.Отбор, "ПоказательБюджетов", , ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ТаблицаПравил = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СКДПравил, Настройки);
	
	Для каждого СтрокаПравил Из ТаблицаПравил Цикл
		РассчитатьКолонкиВыраженийПоказателей(СтрокаПравил);
	КонецЦикла;
	
	ТаблицаПравил.Колонки.Добавить("ТипОбъектаИсточникаДанных");
	ТаблицаПравил.ЗаполнитьЗначения(Тип("СправочникСсылка.ПравилаПолученияФактаПоСтатьямБюджетов"), "ТипОбъектаИсточникаДанных");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
		|	КэшИменДокументовДляОбработкиПоПравилу.Правило,
		|	КэшИменДокументовДляОбработкиПоПравилу.ИмяВидаДокумента
		|ИЗ
		|	РегистрСведений.КэшИменДокументовДляОбработкиПоПравилу КАК КэшИменДокументовДляОбработкиПоПравилу";
	
	РезультатЗапроса = Запрос.Выполнить();
	КэшИменДокументов = РезультатЗапроса.Выгрузить();
	
	СписокВсехДокументов = Новый СписокЗначений;
	СписокВсехДокументов.ЗагрузитьЗначения(ДокументыКОбработке.ВыгрузитьКолонку("Документ"));
	
	ДокументыКОбработке.Индексы.Добавить("ИмяВидаДокумента");
	
	ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета();
	ТаблицаНаборовКЗаписи = БюджетированиеСервер.ШаблонТаблицыФактаПоСтатьямБюджетов(ПараметрыПолученияФакта);
	ТаблицаНаборовКЗаписи.Колонки.Добавить("Правило");
	
	Для Каждого ОписаниеПравила Из ТаблицаПравил Цикл
		
		ИменаВидовДокументов = ОпределитьИменаВидовДокументовПоСКД(ОписаниеПравила, КэшИменДокументов);
		
		Если ИменаВидовДокументов = Неопределено Тогда
			КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
			СобытиеЖР = НСтр("ru = 'Не выполнено правило бюджетирования';
							|en = 'Budgeting rule is not executed'", КодОсновногоЯзыка);
			ТекстСообщения = НСтр("ru = 'Не выполнено правило бюджетирования, т.к. не определена СКД получения данных';
									|en = 'Budgeting rule is not executed as data receipt DCS is not determined'", КодОсновногоЯзыка);
			ЗаписьЖурналаРегистрации(
				СобытиеЖР,,,
				ОписаниеПравила.Правило,
				ТекстСообщения);
			Продолжить;
		КонецЕсли;
		
		Если ИменаВидовДокументов.Количество() = 1 И ИменаВидовДокументов[0].ИмяВидаДокумента = "" Тогда
			СписокДокументов = СписокВсехДокументов;
		Иначе
			СписокДокументов = Новый СписокЗначений;
			Для Каждого СтрокаИмениВидаДокумента Из ИменаВидовДокументов Цикл
				СтруктураПоиска = Новый Структура("ИмяВидаДокумента", СтрокаИмениВидаДокумента.ИмяВидаДокумента);
				НайденныеСтроки = ДокументыКОбработке.НайтиСтроки(СтруктураПоиска);
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					СписокДокументов.Добавить(НайденнаяСтрока.Документ);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Если Не СписокДокументов.Количество() Тогда
			// Нет документов к обработке по правилу
			Продолжить;
		КонецЕсли;
		
		СКДПравила = ИсточникиДанныхСервер.СхемаКомпоновкиДанныхПравила(ОписаниеПравила);
		НастройкиКомпоновкиДанных = СКДПравила.НастройкиПоУмолчанию;
		ФинансоваяОтчетностьСервер.УстановитьОтбор(НастройкиКомпоновкиДанных.Отбор, "Регистратор", СписокДокументов, ВидСравненияКомпоновкиДанных.ВСписке);
		
		ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета(ОписаниеПравила);
		ПараметрыПолученияФакта.ДополнительныйОтбор = НастройкиКомпоновкиДанных;
		
		// Подготовим таблицу факта
		ФактПоСтатьямБюджетов = БюджетированиеСервер.ШаблонТаблицыФактаПоСтатьямБюджетов(ПараметрыПолученияФакта);
	
		// Получим факт в соответствии с правилами
		БюджетированиеСервер.ФактСтатьиБюджетовПоПравилу(ОписаниеПравила, ПараметрыПолученияФакта, ФактПоСтатьямБюджетов);
		
		ИсточникиСуммы = БюджетированиеСервер.ИсточникиСуммыПравила(СКДПравила, ОписаниеПравила);
		
		Если Не ИсточникиСуммы.Свойство("Упр") Тогда
			
			ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаУпр;
			ПоляРесурсов = БюджетированиеСервер.ШаблонПолейРесурсовДляПересчетаДанныхВВалюту();
			ПоляРесурсов.ПоляСуммы.Добавить("СуммаУпр");
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, ПараметрыПолученияФакта, Истина, ПоляРесурсов);
			
		КонецЕсли;
		
		Если Не ИсточникиСуммы.Свойство("Регл") Тогда
			
			ПараметрыПолученияФакта.ВалютаОтчета = ПараметрыПолученияФакта.ВалютаРегл;
			ПоляРесурсов = БюджетированиеСервер.ШаблонПолейРесурсовДляПересчетаДанныхВВалюту();
			ПоляРесурсов.ПоляСуммы.Добавить("СуммаРегл");
			БюджетированиеСервер.ПересчитатьТаблицуДанныхВВалюту(ФактПоСтатьямБюджетов, ПараметрыПолученияФакта, Истина, ПоляРесурсов);
			
		КонецЕсли;
		
		ФактПоСтатьямБюджетов.Колонки.Добавить("Правило");
		ФактПоСтатьямБюджетов.ЗаполнитьЗначения(ОписаниеПравила.Правило, "Правило");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ФактПоСтатьямБюджетов, ТаблицаНаборовКЗаписи);
		
	КонецЦикла;
	
	ТаблицаНаборовКЗаписи.Колонки.Добавить("Активность");
	ТаблицаНаборовКЗаписи.ЗаполнитьЗначения(Истина, "Активность");
	ТаблицаНаборовКЗаписи.Колонки.ВалютаХранения.Имя = "Валюта";
	ТаблицаНаборовКЗаписи.Колонки.Сумма.Имя = "СуммаВВалюте";
	ТаблицаНаборовКЗаписи.Индексы.Добавить("Регистратор");
	
	Для Каждого СтрокаДокумента Из ДокументыКОбработке Цикл
		
		Если Не СтрокаДокумента.Документ.Метаданные().Движения.Содержит(
				Метаданные.РегистрыНакопления.ФактическиеДанныеБюджетирования) Тогда
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыНакопления.ФактическиеДанныеБюджетирования.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаДокумента.Документ);
		ДвиженияРегистратора = ТаблицаНаборовКЗаписи.НайтиСтроки(Новый Структура("Регистратор", СтрокаДокумента.Документ));
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДвиженияРегистратора, НаборЗаписей);
		НаборЗаписей.Записать(Истина);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыПолученияФактаПоНастройкамОтчета(ОписаниеПравила = Неопределено)
	
	Параметры = БюджетированиеСервер.ШаблонПараметровПолученияФакта();
	Если ОписаниеПравила <> Неопределено Тогда
		РеквизитыПравила = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОписаниеПравила.Правило, "ДействуетС, ДействуетПо");
		НачалоПериода    = РеквизитыПравила.ДействуетС;
		ОкончаниеПериода = РеквизитыПравила.ДействуетПо;
		Если НЕ ЗначениеЗаполнено(ОкончаниеПериода) Тогда
			// Установка параметра окончание периода для запросов, у которых в качестве источника данных - физическая таблица регистра.
			ОкончаниеПериода = Дата(3999, 12, 31, 23, 59, 59);
		КонецЕсли;
		Параметры.Период = Новый СтандартныйПериод(НачалоПериода, ОкончаниеПериода);
	КонецЕсли;
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	Параметры.ПоРегистратору = Истина;
	Параметры.ВозвращатьСуммуВВалюте = Ложь;
	Параметры.ВозвращатьУпрИРеглСуммы = Истина;
	
	Параметры.Периодичность = Перечисления.Периодичность.День;
	
	Возврат Параметры; 
	
КонецФункции

Процедура ОтразитьДокументыВБюджетировании(НачалоПериода = Неопределено, КонецПериода = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтражениеДокументовВБюджетировании);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	
	НачатьТранзакцию();
	
	Попытка
		Блокировка.Заблокировать();
		ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюВБюджетировании.НомерЗадания,
		|	ЗаданияКОтражениюВБюджетировании.Документ КАК Документ,
		|	ЗаданияКОтражениюВБюджетировании.ПериодЗаписи,
		|	ЗаданияКОтражениюВБюджетировании.ИмяВидаДокумента
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
		|ГДЕ
		|	ЗаданияКОтражениюВБюджетировании.НомерЗадания = 0
		|ИТОГИ ПО
		|	Документ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить();
			ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
			ЭлементБлокировки.УстановитьЗначение("НомерЗадания", 0);
			ЭлементБлокировки.УстановитьЗначение("Документ",     Выборка.Документ);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(0);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			НаборЗаписей.Записать();
			
			НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.НомерЗадания.Установить(ТекущийНомерЗадания);
			НаборЗаписей.Отбор.Документ.Установить(Выборка.Документ);
			
			ВыборкаДетальныеЗаписи = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);

			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Запись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(Запись,ВыборкаДетальныеЗаписи);
				Запись.НомерЗадания = ТекущийНомерЗадания;
			КонецЦикла;
			
			Если НаборЗаписей.Количество() > 0 Тогда
				НаборЗаписей.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			СобытиеЖР = НСтр("ru = 'Бюджетирование';
							|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
				+ "." + НСтр("ru = 'Отражение факта';
							|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СобытиеЖР,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Продолжить;
		КонецПопытки;

	КонецЦикла;
	
	ЧастичноеОтражениеДокументов = НачалоПериода <> Неопределено ИЛИ КонецПериода <> Неопределено;
	
	НачатьТранзакцию();
	
	Попытка
	
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Константа.НомерЗаданияКОтражениюВБюджетировании");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		ТекущийНомерЗадания = Константы.НомерЗаданияКОтражениюВБюджетировании.Получить();
		
		Запрос = Новый Запрос;
		Если ЧастичноеОтражениеДокументов Тогда
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
			|	МИНИМУМ(ЗаданияКОтражениюВБюджетировании.НомерЗадания) КАК НомерЗадания
			|ПОМЕСТИТЬ ЗаданиеКОбработке
			|ИЗ
			|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
			|ГДЕ
			|	ЗаданияКОтражениюВБюджетировании.НомерЗадания <= &НомерЗадания И ЗаданияКОтражениюВБюджетировании.НомерЗадания <> 0
			|	И &ФильтрНаДокументы
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерЗадания
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10001
			|	ЗаданияКОтражениюВБюджетировании.Документ,
			|	ЗаданияКОтражениюВБюджетировании.НомерЗадания,
			|	ЗаданияКОтражениюВБюджетировании.ИмяВидаДокумента
			|ИЗ
			|	ЗаданиеКОбработке КАК ЗаданиеКОбработке
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
			|		ПО ЗаданиеКОбработке.НомерЗадания = ЗаданияКОтражениюВБюджетировании.НомерЗадания
			|ГДЕ
			|	НЕ ЗаданияКОтражениюВБюджетировании.НомерЗадания ЕСТЬ NULL
			|	И &ФильтрНаДокументы";
			
		Если ЧастичноеОтражениеДокументов Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаДокументы", "Документ В (ВЫБРАТЬ Документ ИЗ ДокументыКОтражению)");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрНаДокументы", "ИСТИНА");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("НомерЗадания", ТекущийНомерЗадания);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой()
		 ИЛИ ТекущийНомерЗадания = 0 Тогда
			ТекущийНомерЗадания = ТекущийНомерЗадания + 1;
			Константы.НомерЗаданияКОтражениюВБюджетировании.Установить(ТекущийНомерЗадания);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		СобытиеЖР = НСтр("ru = 'Бюджетирование';
						|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
			+ "." + НСтр("ru = 'Отражение факта';
						|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
		ЗаписьЖурналаРегистрации(СобытиеЖР,
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	
		Возврат;
	КонецПопытки;
	
	Если РезультатЗапроса.Пустой() И ТекущийНомерЗадания <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьЧтоОбрабатывать = Истина;
	
	Пока ЕстьЧтоОбрабатывать Цикл
		
		ДокументыКОбработке = РезультатЗапроса.Выгрузить();
		ОбрабатываетсяПорция = ДокументыКОбработке.Количество() = 10001;
		
		СформироватьДвиженияПоРегиструФактаБюджетирования(ДокументыКОбработке);
		
		НаборЗаписей = РегистрыСведений.ЗаданияКОтражениюВБюджетировании.СоздатьНаборЗаписей();
		Если ОбрабатываетсяПорция ИЛИ ЧастичноеОтражениеДокументов Тогда
			
			НачатьТранзакцию();

			Попытка
				
				Для Каждого СтрокаДокумента Из ДокументыКОбработке Цикл
								
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить();
					ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
					ЭлементБлокировки.УстановитьЗначение("НомерЗадания",	СтрокаДокумента.НомерЗадания);
					ЭлементБлокировки.УстановитьЗначение("Документ",		СтрокаДокумента.Документ);
					ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
					Блокировка.Заблокировать();
				
					НаборЗаписей.Отбор.НомерЗадания.Установить(СтрокаДокумента.НомерЗадания);
					НаборЗаписей.Отбор.Документ.Установить(СтрокаДокумента.Документ);
					НаборЗаписей.Записать();				
							
				КонецЦикла;
				
				ЗафиксироватьТранзакцию();
				
			Исключение
				ОтменитьТранзакцию();
				СобытиеЖР = НСтр("ru = 'Бюджетирование';
								|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Отражение факта';
								|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖР,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;
		
		Иначе
			
			НачатьТранзакцию();
			
			Попытка
				Блокировка = Новый БлокировкаДанных;
				ЭлементБлокировки = Блокировка.Добавить();
				ЭлементБлокировки.Область = "РегистрСведений.ЗаданияКОтражениюВБюджетировании";
				ЭлементБлокировки.УстановитьЗначение("НомерЗадания", ДокументыКОбработке[0].НомерЗадания);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
				Блокировка.Заблокировать();
				
				НаборЗаписей.Отбор.НомерЗадания.Установить(ДокументыКОбработке[0].НомерЗадания);
				НаборЗаписей.Записать();
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				СобытиеЖР = НСтр("ru = 'Бюджетирование';
								|en = 'Budgeting'", ОбщегоНазначения.КодОсновногоЯзыка())
					+ "." + НСтр("ru = 'Отражение факта';
								|en = 'Actual value record'", ОбщегоНазначения.КодОсновногоЯзыка());
				ЗаписьЖурналаРегистрации(СобытиеЖР,
					УровеньЖурналаРегистрации.Ошибка,,,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат;
			КонецПопытки;

		КонецЕсли;
		
		Если ЧастичноеОтражениеДокументов Тогда
			МенеджерВременныхТаблиц.Закрыть();
			МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(НачалоПериода, КонецПериода, МенеджерВременныхТаблиц);
			Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		ЕстьЧтоОбрабатывать = Не РезультатЗапроса.Пустой();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьХранимыеПравилаСтатейДляВидаБюджета(ВидБюджета)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.СтатьиБюджетов
	|			ТОГДА ""СтатьиБюджетов""
	|		КОГДА ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.ПоказателиБюджетов
	|			ТОГДА ""ПоказателиБюджетов""
	|	КОНЕЦ КАК ВидОбъекта,
	|	ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель КАК СтатьяПоказатель
	|ПОМЕСТИТЬ СтатьиИПоказателиБюджета
	|ИЗ
	|	Справочник.ВидыБюджетов.КэшСтатейИПоказателей КАК ВидыБюджетовКэшСтатейИПоказателей
	|ГДЕ
	|	ВидыБюджетовКэшСтатейИПоказателей.Ссылка = &ВидБюджета
	|	И (ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.СтатьиБюджетов
	|			ИЛИ ВидыБюджетовКэшСтатейИПоказателей.СтатьяПоказатель ССЫЛКА Справочник.ПоказателиБюджетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОбъекта,
	|	СтатьяПоказатель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	СтатьиИПоказателиБюджета КАК СтатьиИПоказателиБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО (СтатьиИПоказателиБюджета.ВидОбъекта = ""СтатьиБюджетов"")
	|			И СтатьиИПоказателиБюджета.СтатьяПоказатель = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	СтатьиИПоказателиБюджета КАК СтатьиИПоказателиБюджета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|		ПО (СтатьиИПоказателиБюджета.ВидОбъекта = ""ПоказателиБюджетов"")
	|			И СтатьиИПоказателиБюджета.СтатьяПоказатель = СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО СвязиПоказателейБюджетов.СтатьяБюджетов = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил";
	
	Результат = Запрос.Выполнить();
	ЕстьХранимыеПравила = НЕ Результат.Пустой();
	
	Возврат ЕстьХранимыеПравила;
КонецФункции

Функция ЕстьХранимыеПравилаСтатейИПоказателей(СтатьяБюджетов, ПоказательБюджетов)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБюджетов", СтатьяБюджетов);
	Запрос.УстановитьПараметр("ПоказательБюджетов", ПоказательБюджетов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил КАК ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|ГДЕ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов = &СтатьяБюджетов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|ИЗ
	|	РегистрСведений.СвязиПоказателейБюджетов КАК СвязиПоказателейБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПолученияФактаПоСтатьямБюджетов КАК ПравилаПолученияФактаПоСтатьямБюджетов
	|		ПО СвязиПоказателейБюджетов.СтатьяБюджетов = ПравилаПолученияФактаПоСтатьямБюджетов.СтатьяБюджетов
	|ГДЕ
	|	СвязиПоказателейБюджетов.СвязанныйПоказательБюджетов = &ПоказательБюджетов
	|	И ПравилаПолученияФактаПоСтатьямБюджетов.ПромежуточноеКэшированиеРезультатовРаботыПравил
	|	И (СвязиПоказателейБюджетов.СтатьяБюджетов = &СтатьяБюджетов
	|			ИЛИ &СтатьяБюджетов = НЕОПРЕДЕЛЕНО)";
	
	Результат = Запрос.Выполнить();
	ЕстьХранимыеПравила = НЕ Результат.Пустой();
	
	Возврат ЕстьХранимыеПравила;
КонецФункции

Процедура ВывестиАктуальностьОтраженияФактическихДанных(ДокументРезультат, ДопСвойства, ПроверятьАктивныеЗадания = Истина) Экспорт
	
	НужнаНадпись = ДопСвойства.Свойство("КоличествоДокументовКОтражениюВБюджетировании");
	
	Если ПроверятьАктивныеЗадания Тогда
		Ключ = "ОтражениеДокументовВБюджетировании";
		
		Отбор = Новый Структура();
		Отбор.Вставить("Ключ", Ключ);
		Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
		
		АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
		
		Если АктивныеЗадания.Количество() = 0 Тогда
			НужнаНадпись = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаНадпись Тогда
		ВидБюджета = Неопределено;
		СтатьяБюджетов = Неопределено;
		ПоказательБюджетов = Неопределено;
		Если ДопСвойства.Свойство("ПроверкаХранимыхПравилВидБюджета", ВидБюджета) Тогда
			НужнаНадпись = ЕстьХранимыеПравилаСтатейДляВидаБюджета(ВидБюджета);
		Иначе
			ДопСвойства.Свойство("ПроверкаХранимыхПравилСтатьяБюджетов", СтатьяБюджетов);
			ДопСвойства.Свойство("ПроверкаХранимыхПравилПоказательБюджетов", ПоказательБюджетов);
			Если СтатьяБюджетов <> Неопределено ИЛИ ПоказательБюджетов <> Неопределено Тогда
				НужнаНадпись = ЕстьХранимыеПравилаСтатейИПоказателей(СтатьяБюджетов, ПоказательБюджетов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НужнаНадпись Тогда
		ТаблицаПредупреждение = Новый ТабличныйДокумент;
		ОбластьПредупреждение = ТаблицаПредупреждение.Область(1,1,1,1);
		ЧастиТекста = Новый Массив;
		ЧастиТекста.Добавить(НСтр("ru = 'Отражения в бюджетировании ожидает %1 документов.';
									|en = '%1 documents await recording in budgeting.'"));
		ЧастиТекста.Добавить(НСтр("ru = 'Запущено задание по распределению расчетов с %2 по %3.';
									|en = 'Job for allocating settlements from %2 to %3 is started.'"));
		ЧастиТекста.Добавить(НСтр("ru = 'После отражения Вам будет предложено переформировать отчет.';
									|en = 'You will be offered to rebuild the report after recording.'"));
		ТекстПредупреждения = СтрСоединить(ЧастиТекста, Символы.ПС);
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			ДопСвойства.КоличествоДокументовКОтражениюВБюджетировании,
			Формат(ДопСвойства.НачалоПериода, "ДЛФ=D"),
			Формат(ДопСвойства.КонецПериода, "ДЛФ=D"));
		ОбластьПредупреждение.Текст = ТекстПредупреждения;
		ОбластьПредупреждение.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		ДокументРезультат.ВставитьОбласть(ТаблицаПредупреждение.Область(1,,1,), ДокументРезультат.Область(1,,1,), ТипСмещенияТабличногоДокумента.ПоВертикали);
	Иначе
		ДопСвойства.Удалить("КоличествоДокументовКОтражениюВБюджетировании");
		ДопСвойства.Удалить("НачалоПериода");
		ДопСвойства.Удалить("КонецПериода");
	КонецЕсли;
	
КонецПроцедуры

Функция ПоместитьДокументыДляОтраженияВоВременнуюТаблицу(Знач НачалоПериода, Знач КонецПериода, МенеджерВременныхТаблиц) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Задания.Документ КАК Документ
		|ПОМЕСТИТЬ ДокументыПериода
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК Задания
		|ГДЕ
		|	Задания.ПериодЗаписи МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаданияКОтражениюВБюджетировании.Документ
		|ПОМЕСТИТЬ ДокументыСПустымПериодом
		|ИЗ
		|	РегистрСведений.ЗаданияКОтражениюВБюджетировании КАК ЗаданияКОтражениюВБюджетировании
		|ГДЕ
		|	ЗаданияКОтражениюВБюджетировании.ПериодЗаписи = ДАТАВРЕМЯ(1, 1, 1)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЗаданияКОтражениюВБюджетировании.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыСПустымПериодом.Документ КАК Документ
		|ПОМЕСТИТЬ ДокументыКОтражению
		|ИЗ
		|	ДокументыСПустымПериодом КАК ДокументыСПустымПериодом
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическиеДанныеБюджетирования КАК ФактическиеДанныеБюджетирования
		|		ПО ДокументыСПустымПериодом.Документ = ФактическиеДанныеБюджетирования.Регистратор
		|ГДЕ
		|	ФактическиеДанныеБюджетирования.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументыПериода.Документ
		|ИЗ
		|	ДокументыПериода КАК ДокументыПериода");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если Не ЗначениеЗаполнено(НачалоПериода) Тогда
		НачалоПериода = Дата(1,1,1);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(КонецПериода) Тогда
		КонецПериода = Дата(3999, 12, 31, 23, 59, 59);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	
	Запрос.Выполнить();
	
КонецФункции

Процедура ОтразитьДокументыФоновымЗаданием(НачалоПериода = Неопределено, КонецПериода = Неопределено, ОжидатьВыполнения = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Ключ = "ОтражениеДокументовВБюджетировании";
	
	Отбор = Новый Структура();
	Отбор.Вставить("Ключ", Ключ);
	Отбор.Вставить("Состояние", СостояниеФоновогоЗадания.Активно);
	
	АктивныеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	
	Если АктивныеЗадания.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Выполняется отражение документов в бюджетировании';
								|en = 'Recording documents in budgeting'");
	
	ПараметрыЭкспортнойПроцедуры = Новый Массив();
	ПараметрыЭкспортнойПроцедуры.Добавить(НачалоПериода);
	ПараметрыЭкспортнойПроцедуры.Добавить(КонецПериода);
	
	ПараметрыЗадания = Новый Массив();
	ПараметрыЗадания.Добавить("ФактическиеДанныеБюджетированияСервер.ОтразитьДокументыВБюджетировании");
	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Попытка
			// В файловой базе есть ограничение на получение списка фоновых заданий.
			ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
		Исключение
			Возврат;
		КонецПопытки;
	Иначе
		ФоновоеЗадание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьМетодКонфигурации", ПараметрыЗадания, Ключ, НаименованиеЗадания);
	КонецЕсли;
	
	Если ОжидатьВыполнения Тогда
		Попытка
			ФоновоеЗадание.ОжидатьЗавершения(1);
		Исключение
			СобытиеЖР = НСтр("ru = 'Выполнение отражения документов в бюджетировании';
							|en = 'Post the documents in budgeting'", ОбщегоНазначения.КодОсновногоЯзыка());
			ЗаписьЖурналаРегистрации(СобытиеЖР,
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

