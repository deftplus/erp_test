
#Область ПрограммныйИнтерфейс

// Функция возвращает ТаблицуЗначений со структурой платежной позиции
// Замена процедуры УправлениеДенежнымиСредствамиУХ.СтруктураТаблицыПлатежнойПозиции
// Замена процедуры Обработки.РаботаСЗаявкамиНаОперации.СтруктураТаблицыПлатежнойПозиции()
Функция СоздатьПлатежнуюПозицию() Экспорт
	
	Результат = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	ЗаголовокКолонки = НСтр("ru = 'Состояние исполнения'");
    Результат.Колонки.Добавить("СостояниеИсполнения", Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияИсполненияЗаявки"), ЗаголовокКолонки);
	
	Поз = 0;
	Пока Поз < Результат.Количество() Цикл
		Колонка = Результат.Колонки[Поз];
		Если СтрНачинаетсяС(Колонка.Имя, "Удалить") Тогда
			Результат.Колонки.Удалить(Колонка);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
	КонецЦикла;
	
    Возврат Результат;
	
КонецФункции

//Добавляет в массив новые реквизиты формы, необходимые для работы с платежной позицией.
//Вызывается из форм всех документов-заявок(ПриСозданииНаСервере). 
//Замена процедуры Обработки.РаботаСЗаявкамиНаОперации.ДобавитьРеквизиты_ПлатежнаяПозиция(Реквизиты);
Процедура ДобавитьРеквизитыФормыПлатежнаяПозиция(Реквизиты, Форма) Экспорт 
	
	//ПлатежнаяПозиция
	ИмяРеквизита = "ПлатежнаяПозиция";
	СуществующиеРеквизитыПлатежнойПозиции = Новый Соответствие;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита) Тогда
		Для Каждого Реквизит Из Форма.ПолучитьРеквизиты(ИмяРеквизита) Цикл
			СуществующиеРеквизитыПлатежнойПозиции.Вставить(Реквизит.Имя, Реквизит);
		КонецЦикла;
	Иначе
		Реквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"),""));
	КонецЕсли;
		
	ДобавитьКолонкиВРеквизитФормы(Реквизиты, ИмяРеквизита, СуществующиеРеквизитыПлатежнойПозиции);
	
	// Реквизит формы, с представлением платежной позиции
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СтрокаПлатежнаяПозиция") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("СтрокаПлатежнаяПозиция",
			Новый ОписаниеТипов("ФорматированнаяСтрока"),,НСтр("ru = 'Строка платежная позиция'")));
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьКолонкиПлатежнойПозиции(ТаблицаДеревоЗначений) Экспорт
	
	ТаблицаПозиций = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей().Выгрузить();
	Для Каждого СтрокаПозиции Из ТаблицаПозиций.Колонки Цикл
		Если НЕ СтрНачинаетсяС(СтрокаПозиции.Имя, "Удалить") Тогда
			ТаблицаДеревоЗначений.Колонки.Добавить(СтрокаПозиции.Имя, СтрокаПозиции.ТипЗначения);
		КонецЕсли;
	КонецЦикла;
	
	ТипСостояния = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияИсполненияЗаявки");
	ТипЛогический = Новый ОписаниеТипов("Булево");
	
	ТаблицаДеревоЗначений.Колонки.Добавить("СостояниеИсполнения", ТипСостояния);
	ТаблицаДеревоЗначений.Колонки.Добавить("СтатусИзменен", ТипЛогический);
	
КонецПроцедуры

Процедура ДобавитьКолонкиВРеквизитФормы(Реквизиты, ИмяРеквизитаКоллекции, СуществующиеРеквизитыПлатежнойПозиции = неопределено) Экспорт
	
	Если ТипЗнч(СуществующиеРеквизитыПлатежнойПозиции) = Тип("Соответствие") Тогда
		ПроверятьСуществующиеРеквизиты = Истина;
	КонецЕсли;
	
	ТаблицаПозиций = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей().Выгрузить();
	Для Каждого СтрокаПозиции Из ТаблицаПозиций.Колонки Цикл
		Если СтрНачинаетсяС(СтрокаПозиции.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверятьСуществующиеРеквизиты = Истина
			И СуществующиеРеквизитыПлатежнойПозиции[СтрокаПозиции.Имя] <> неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизиты.Добавить(Новый РеквизитФормы(СтрокаПозиции.Имя, СтрокаПозиции.ТипЗначения, ИмяРеквизитаКоллекции));
	КонецЦикла;
	
	ТипСостояния = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияИсполненияЗаявки");
	ТипЛогический = Новый ОписаниеТипов("Булево");
	Реквизиты.Добавить(Новый РеквизитФормы("СостояниеИсполнения", ТипСостояния,	ИмяРеквизитаКоллекции));
	Реквизиты.Добавить(Новый РеквизитФормы("СтатусИзменен", 	  ТипЛогический,ИмяРеквизитаКоллекции));
	
КонецПроцедуры

// Процедура создает элемент формы ПредставлениеПлатежнойПозиции
Процедура СоздатьЭлементПредставлениеПлатежнойПозиции(Форма, Размещение) экспорт
	
	Элементы = Форма.Элементы;
	Если Элементы.Найти("СтрокаПлатежнаяПозиция")  <> неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// СтрокаПлатежнаяПозиция
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "СтрокаПлатежнаяПозиция",, "СтрокаПлатежнаяПозиция",
		ВидПоляФормы.ПолеНадписи, Размещение.Родитель, Размещение.ПередЭлементом);
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.ГиперСсылка = Истина;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = 0;
	Элемент.УстановитьДействие("Нажатие", "Подключаемый_СтрокаПлатежнаяПозицияНажатие");
	
КонецПроцедуры

// Процедура считывает платежную позицию документа-заявка для дальнейшей загрузке в реквизит формы
// Замена функции: УправлениеЗаявкамиНаОперацииУХ.ПлатежнаяПозицияЗаявки(Объект.Ссылка)
// Возвращает: ТаблицаЗначений с данными платежной позиции документа-заявки
Функция ПлатежнаяПозицияЗаявки(ЗаявкаСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазмещениеЗаявок.*,
	|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) КАК СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию = &ЗаявкаСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаИсполнения";
	Запрос.УстановитьПараметр("ЗаявкаСсылка", ЗаявкаСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура загружает платежную позицию в реквизит формы и при необходимости ее записывает и изменяет статусы
Процедура ЗагрузитьПлатежнуюПозициюПослеРедактирования(Форма, Адрес) Экспорт
	
	Объект = Форма.Объект;
	
	ПлатежнаяПозиция = ПолучитьИзВременногоХранилища(Адрес);
	Форма.ПлатежнаяПозиция.Загрузить(ПлатежнаяПозиция);
	
	// Записываем, только в режиме редактирования позиции
	Если НЕ Объект.Ссылка.Пустая() И НЕ Форма.Модифицированность Тогда
		//УправлениеЗаявкамиНаОперацииУХ.ЗаписатьПлатежнуюПозициюЗаявки(Объект.Ссылка, Форма.ПлатежнаяПозиция.Выгрузить());
		ЗаписатьПлатежнуюПозициюЗаявки(Объект.Ссылка, Форма.ПлатежнаяПозиция.Выгрузить());
		СтрокиСтатусИзменен = Форма.ПлатежнаяПозиция.НайтиСтроки(Новый Структура("СтатусИзменен", Истина));
		Для Каждого ТекСтрока Из СтрокиСтатусИзменен Цикл
			УстановитьСостояниеИсполненияДокумента(
				Объект.Ссылка, ТекСтрока.ИдентификаторПозиции, ТекСтрока.СостояниеИсполнения,,
				Пользователи.ТекущийПользователь(), Объект.Ссылка);
			ТекСтрока.СтатусИзменен = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
	
КонецПроцедуры

// Процедура инициализирует платежную позицию в форме документа-заявки
Процедура ИнициализироватьПлатежнуюПозициюЗаявки(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПлатежнаяПозиция = ПлатежнаяПозицияЗаявки(Объект.Ссылка);
		
	ИначеЕсли ЗначениеЗаполнено(Форма.Параметры.ЗначениеКопирования) Тогда
		
		ПлатежнаяПозиция = СкопироватьПлатежнуюПозициюДокумента(Форма.Параметры.ЗначениеКопирования);
		Если НЕ ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда
			 ПлатежнаяПозиция = НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
		КонецЕсли;
	
	ИначеЕсли Форма.Параметры.ЗначенияЗаполнения.Свойство("ПлатежнаяПозиция") Тогда
		ПлатежнаяПозиция = Форма.Параметры.ЗначенияЗаполнения.ПлатежнаяПозиция;
	Иначе
		ПлатежнаяПозиция = НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
	КонецЕсли;
	
	Форма.ПлатежнаяПозиция.Загрузить(ПлатежнаяПозиция);
	
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
	
КонецПроцедуры

Функция СкопироватьПлатежнуюПозициюДокумента(ДокументСсылка)
	
	ПлатежнаяПозиция = ПлатежнаяПозицияЗаявки(ДокументСсылка);
	Если НЕ ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда
		Возврат ПлатежнаяПозиция;
	КонецЕсли;
	
	ПлатежнаяПозиция.ЗаполнитьЗначения(Неопределено, "ЗаявкаНаОперацию");
	ПлатежнаяПозиция.ЗаполнитьЗначения(Перечисления.СостоянияИсполненияЗаявки.НеОбработана, "СостояниеИсполнения");
	
	// Идентификаторы должны быть уникальные
	Для каждого Строка Из ПлатежнаяПозиция Цикл
		
		СтарыйУИД = Строка.ИдентификаторПозиции;
		НовыйУИД = Новый УникальныйИдентификатор;
		
		Строка.ИдентификаторПозиции = НовыйУИД;	
		Для каждого СтрокаВстречная ИЗ ПлатежнаяПозиция Цикл
			Если СтрокаВстречная.ИдентификаторВстречнойПозиции = СтарыйУИД Тогда
				СтрокаВстречная.ИдентификаторВстречнойПозиции = НовыйУИД;
			КонецЕсли;
		КонецЦикла;
			
	КонецЦикла;
	
	Возврат ПлатежнаяПозиция;
	
КонецФункции

// Процедура записывает платежную позицию при записи документа-заявки
Процедура ЗаписатьПлатежнуюПозициюПриЗаписи(Объект) Экспорт
	
	//
	ПлатежнаяПозиция = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "ПлатежнаяПозиция");
	Если НЕ ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда
		ПлатежнаяПозиция = ПлатежныеПозиции.ПлатежнаяПозицияЗаявки(Объект.Ссылка);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда
		ПлатежнаяПозиция = НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
	КонецЕсли;
	
	//
	Если ЗначениеЗаполнено(ПлатежнаяПозиция) Тогда
		ДопПараметры = Новый Структура("ПлатежнаяПозицияЗаполнена", Истина);
		ЗаписатьПлатежнуюПозициюЗаявки(Объект.Ссылка, ПлатежнаяПозиция, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает платежную позицию в регистры сведений: РазмещениеЗаявок и БюджетированиеПоПозициям
// Замена процедуры УправлениеЗаявкамиНаОперацииУХ.ЗаписатьПлатежнуюПозициюЗаявки
Функция ЗаписатьПлатежнуюПозициюЗаявки(ЗаявкаСсылка, ТабПлатежнаяПозиция, Знач ДопРеквизитыПлатежнойПозиции = неопределено) Экспорт
	
	//
	ПлатежнаяПозицияКопия = ТабПлатежнаяПозиция.Скопировать();
	ПлатежнаяПозицияКопия.ЗаполнитьЗначения(ЗаявкаСсылка, "ЗаявкаНаОперацию");
	Если ПлатежнаяПозицияКопия.Колонки.Найти("Проведен") <> неопределено Тогда
		ПлатежнаяПозицияКопия.ЗаполнитьЗначения(ЗаявкаСсылка.Проведен, "Проведен");
	КонецЕсли;
	
	// Распределим сумму заявки по позициям и запишем ее. 
	// Впоследствии воспользуемся данным разделением при генерации платежного поручения.
	
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ЗаявкаСсылка);
	ТабРасшифровка = Менеджер.ПолучитьДвиженияОперацииДокументаДляПлатежнойПозиции(ЗаявкаСсылка);
	
	//
	ТабРасшифровка.Колонки.Добавить("Распределено", Новый ОписаниеТипов("Число"));
	ТабРасшифровка.Колонки.Добавить("РаспределеноНДС", Новый ОписаниеТипов("Число"));

	//
	ТаблицаНаправлений = ТабПлатежнаяПозиция.Скопировать(,"ПриходРасход");
	ТаблицаНаправлений.Свернуть("ПриходРасход", "");
	МассивНаправлений = ТаблицаНаправлений.ВыгрузитьКолонку("ПриходРасход");
	
	РазделенныеДвижения = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	#Область УХ_Встраивание
	ЭтоЗаявкаНаКомандировку = ТипЗнч(ЗаявкаСсылка) = Тип("ДокументСсылка.ЗаявкаНаКомандировку");
	#КонецОбласти

	Если ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ЭтоЗаявкаНаВыплатуЗарплатыПоЛицевымСчетамПоВедомостям(ЗаявкаСсылка) Тогда	
		
		Для каждого СтрокаПозиции Из ПлатежнаяПозицияКопия Цикл
			СтруктураПоиска = Новый Структура("Контрагент, СчетКонтрагента", 
				СтрокаПозиции.Контрагент, СтрокаПозиции.СчетКонтрагента);
			ППДляРаспределения = ПлатежнаяПозицияКопия.Скопировать(СтруктураПоиска);
			РасшифровкаДляРаспределения = ТабРасшифровка.Скопировать(СтруктураПоиска);
			РаспределитьРасшифровкуНаПозиции(РасшифровкаДляРаспределения, ППДляРаспределения, РазделенныеДвижения);
		КонецЦикла;

	Иначе
		
		// Распределяем аналитики бюджетирования по направлениям
		СтруктураПоискаОбщая = Новый Структура("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.ПустаяСсылка());
		Для Каждого Направление Из МассивНаправлений Цикл
			
			СтруктураПоиска = Новый Структура("ПриходРасход", Направление);
			ППДляРаспределения = ПлатежнаяПозицияКопия.Скопировать(СтруктураПоиска);
			РасшифровкаДляРаспределения = ТабРасшифровка.Скопировать(СтруктураПоиска);
			Если РасшифровкаДляРаспределения.Количество() = 0 Тогда
				РасшифровкаДляРаспределения = ТабРасшифровка.Скопировать(СтруктураПоискаОбщая);
			КонецЕсли;
			
			#Область УХ_Встраивание
			Если ЭтоЗаявкаНаКомандировку Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(РасшифровкаДляРаспределения, РазделенныеДвижения);	
				//РазделенныеДвижения.ЗаполнитьЗначения(ЗаявкаСсылка, "ЗаявкаНаОперацию");
			Иначе 
				РаспределитьРасшифровкуНаПозиции(РасшифровкаДляРаспределения, ППДляРаспределения, РазделенныеДвижения);	
			КонецЕсли; 
			#КонецОбласти
		
		КонецЦикла;
		
	КонецЕсли;
			
	НачатьТранзакцию();
	Попытка
		
		// Регистр ДвиженияБюджетированияПоПозициям
		НаборЗаписей = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(ЗаявкаСсылка);
		НаборЗаписей.Загрузить(РазделенныеДвижения);
		НаборЗаписей.Записать();	
		
		НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(ЗаявкаСсылка);
		НаборЗаписей.Прочитать();
		
		// Проанализируем наличие изменений в позициях (изменение количества позиций, их состава...).
		// Не будем оповещать инициатора об изменении банковского счета.
		
		ЕстьЗначимыеИзменения = Ложь;
		
		КоличествоИмеющихсяПозиций = НаборЗаписей.Количество();
		
		Если КоличествоИмеющихсяПозиций <> 0 И КоличествоИмеющихсяПозиций <> ПлатежнаяПозицияКопия.Количество() Тогда
			// Разделили заявку на несколько платежей или наоборот - соединили.
			ЕстьЗначимыеИзменения = Истина;
		Иначе
			
			Для Каждого СуществующаяПозиция Из НаборЗаписей Цикл
				
				СтрокаНовойТаблицы = ПлатежнаяПозицияКопия.Найти(СуществующаяПозиция.ИдентификаторПозиции, "ИдентификаторПозиции");
				
				Если СтрокаНовойТаблицы = Неопределено Тогда
					// Такой позиции больше нет.
					ЕстьЗначимыеИзменения = Истина;
					Прервать;
					
				ИначеЕсли СтрокаНовойТаблицы.СуммаВзаиморасчетов <> СуществующаяПозиция.СуммаВзаиморасчетов
						ИЛИ СтрокаНовойТаблицы.ДатаИсполнения <> СуществующаяПозиция.ДатаИсполнения Тогда
					// Такая позиция есть, но скорректирована.
					ЕстьЗначимыеИзменения = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Подготовим списки удаленных и добавленных позиций
		НовыеИдентификаторы		= Новый Массив;
		УдаленныеИдентификаторы	= Новый Массив;
		
		ИдентификаторыПозиций = Новый ТаблицаЗначений;
		ИдентификаторыПозиций.Колонки.Добавить("ИдентификаторПозиции", Новый ОписаниеТипов("УникальныйИдентификатор"));
		ИдентификаторыПозиций.Колонки.Добавить("Вес", ОбщегоНазначения.ОписаниеТипаЧисло(1));
		
		Для Каждого СуществующаяПозиция Из НаборЗаписей Цикл
			НоваяСтрока = ИдентификаторыПозиций.Добавить();
			НоваяСтрока.ИдентификаторПозиции = СуществующаяПозиция.ИдентификаторПозиции;
			НоваяСтрока.Вес = -1;
		КонецЦикла;
		
		Для Каждого НоваяПозиция Из ПлатежнаяПозицияКопия Цикл
			НоваяСтрока = ИдентификаторыПозиций.Добавить();
			НоваяСтрока.ИдентификаторПозиции = НоваяПозиция.ИдентификаторПозиции;
			НоваяСтрока.Вес = 1;
		КонецЦикла;
		
		ИдентификаторыПозиций.Свернуть("ИдентификаторПозиции", "Вес");
		
		Для Каждого ТекСтрока Из ИдентификаторыПозиций Цикл
			Если ТекСтрока.Вес = -1 Тогда
				// Позиция удалена.
				УдаленныеИдентификаторы.Добавить(ТекСтрока.ИдентификаторПозиции);
			ИначеЕсли ТекСтрока.Вес = 1 Тогда
				// ПозицияДобавлена.
				НовыеИдентификаторы.Добавить(ТекСтрока.ИдентификаторПозиции);
			КонецЕсли;
		КонецЦикла;
		
		// Старые значения больше не нужны. Перезапишем их.
		НаборЗаписей.Загрузить(ПлатежнаяПозицияКопия);
		НаборЗаписей.Записать();
		
		// Удалим записи о статусах удаленных позиций.
		Для Каждого УдаленныйИдентификатор Из УдаленныеИдентификаторы Цикл
			НеактуальныеЗаписи = РегистрыСведений.СостоянияИсполненияДокументовПланирования.СоздатьНаборЗаписей();
			НеактуальныеЗаписи.Отбор.ИдентификаторПозиции.Установить(УдаленныйИдентификатор);
			НеактуальныеЗаписи.Записать();
		КонецЦикла;
		
		// Переведем новые позиции в статус "Ожидает исполнения", а запрещенные в статус "Отложено"
		ПроверитьПравилаЗапретаОперацийПлатежныеПозиции(ЗаявкаСсылка, ПлатежнаяПозицияКопия, НовыеИдентификаторы);
		
		// При необходимости разошлем уведомления.
		Если ЕстьЗначимыеИзменения Тогда
			
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("КоличествоПозиций", ПлатежнаяПозицияКопия.Количество());
			ТекстСписокПозиций = "";
			ТекстСписокПозиций = ТекстСписокПозиций + "<ul>";
			Для Каждого ТекСтрока Из ПлатежнаяПозицияКопия Цикл
				
				Шаблон = НСтр("ru = '<li>%1 %2 в дату %3'");
				ТекстСписокПозиций = ТекстСписокПозиций + 
					СтрШаблон(Шаблон, ТекСтрока.Сумма, ТекСтрока.ВалютаОплаты, Формат(ТекСтрока.ДатаИсполнения, "ДЛФ=D"));
				
			КонецЦикла;
			ТекстСписокПозиций = ТекстСписокПозиций + "</ul>";
			ДопПараметры.Вставить("СписокПозиций", ТекстСписокПозиций);
			
			ВстраиваниеОПКПереопределяемый.ОповеститьПользователейОКорректировкеРазмещения(ЗаявкаСсылка, ДопПараметры);
			
		КонецЕсли;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

// Процедура определяет Состояния исполнения для Документа планирования: 
//		"Ожидает исполнения" - для нового документа;
//		"Отложено" - если документ попадает под директиву запрета
//
// Параметры:
//	"ЗаявкаСсылка" - Ссылка на документ планирования;
//	"ПлатежныеПозицииТаблица" - Таблица платежных позиций документа;
//	"НовыеИдентификаторы" - Массив новых уникальных идентификаторов платежной позиции.
//
Процедура ПроверитьПравилаЗапретаОперацийПлатежныеПозиции(ЗаявкаСсылка, ПлатежныеПозицииТаблица, НовыеИдентификаторы) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПустаяОрганизация", КэшируемыеПроцедурыОПК.ПустаяОрганизация());
	Запрос.УстановитьПараметр("ПустойКонтрагент", КэшируемыеПроцедурыОПК.ПустойКонтрагент());
	Запрос.УстановитьПараметр("ПустойБанковскийСчетОрганизации", КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации());
	Запрос.УстановитьПараметр("ПустаяКассаОрганизации", КэшируемыеПроцедурыОПК.ПустаяКассаОрганизации());
	Запрос.УстановитьПараметр("ПустойДоговор", КэшируемыеПроцедурыОПК.ПустойДоговор());
	Запрос.УстановитьПараметр("ПустаяСтатьяДДС", КэшируемыеПроцедурыОПК.ПустаяСтатьяДвиженияДенежныхСредств());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПлатежныеПозиции.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	ПлатежныеПозиции.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТПлатежныеПозиции
	|ИЗ
	|	&ПлатежныеПозиции КАК ПлатежныеПозиции
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПланирования,
	|	ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ ВТПлатежныеПозицииРазмещение
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПлатежныеПозиции КАК ПлатежныеПозиции
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = ПлатежныеПозиции.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = ПлатежныеПозиции.ИдентификаторПозиции
	|ГДЕ
	|	РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПланирования,
	|	ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлатежныеПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СостоянияИсполненияСрезПоследних.ДокументПланирования КАК ДокументПланирования,
	|	СостоянияИсполненияСрезПоследних.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТСостоянияИсполненияОтложено
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних(
	|			,
	|			(ДокументПланирования, ИдентификаторПозиции) В
	|				(ВЫБРАТЬ
	|					ВТПлатежныеПозицииРазмещение.ДокументПланирования,
	|					ВТПлатежныеПозицииРазмещение.ИдентификаторПозиции
	|				ИЗ
	|					ВТПлатежныеПозицииРазмещение)) КАК СостоянияИсполненияСрезПоследних
	|ГДЕ
	|	СостоянияИсполненияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Отложена)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументПланирования,
	|	ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.СчетОрганизации КАК СчетОрганизации,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств, &ПустаяСтатьяДДС) КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ВТРазмещениеЗаявок
	|ИЗ
	|	ВТПлатежныеПозицииРазмещение КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСостоянияИсполненияОтложено КАК СостоянияИсполненияОтложено
	|		ПО РазмещениеЗаявок.ДокументПланирования = СостоянияИсполненияОтложено.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияОтложено.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|		ПО РазмещениеЗаявок.ДокументПланирования = ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию
	|			И РазмещениеЗаявок.ИдентификаторПозиции = ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции
	|			И РазмещениеЗаявок.ДоговорКонтрагента = ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента
	|ГДЕ
	|	СостоянияИсполненияОтложено.ДокументПланирования ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетОрганизации,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	СтатьяДвиженияДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТСостоянияИсполненияОтложено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТПлатежныеПозицииРазмещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ИЗ
	|	ВТРазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаЗапретаОпераций КАК ПравилаЗапретаОпераций
	|		ПО (РазмещениеЗаявок.Организация = ПравилаЗапретаОпераций.Организация
	|				ИЛИ ПравилаЗапретаОпераций.Организация = &ПустаяОрганизация)
	|			И (РазмещениеЗаявок.СчетОрганизации = ПравилаЗапретаОпераций.СчетОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = &ПустойБанковскийСчетОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = &ПустаяКассаОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = НЕОПРЕДЕЛЕНО)
	|			И (РазмещениеЗаявок.Контрагент = ПравилаЗапретаОпераций.Контрагент
	|				ИЛИ ПравилаЗапретаОпераций.Контрагент = &ПустойКонтрагент)
	|			И (РазмещениеЗаявок.ДоговорКонтрагента = ПравилаЗапретаОпераций.ДоговорКонтрагента
	|				ИЛИ ПравилаЗапретаОпераций.ДоговорКонтрагента = &ПустойДоговор
	|				ИЛИ ПравилаЗапретаОпераций.ДоговорКонтрагента = НЕОПРЕДЕЛЕНО)
	|			И (РазмещениеЗаявок.СтатьяДвиженияДенежныхСредств = ПравилаЗапретаОпераций.СтатьяДвиженияДенежныхСредств
	|				ИЛИ ПравилаЗапретаОпераций.СтатьяДвиженияДенежныхСредств = &ПустаяСтатьяДДС)
	|			И (ПравилаЗапретаОпераций.ЗапретПлатежей = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазмещениеЗаявок";
	
	Запрос.УстановитьПараметр("ПлатежныеПозиции", ПлатежныеПозицииТаблица);
	
	ВыборкаПоЗапретамПлатежей = Запрос.Выполнить().Выбрать();
	
	// Переведем запрещенные позиции в статус "Отложено"
	ЗаявкиОтложенные = Новый ТаблицаЗначений;
	ЗаявкиОтложенные.Колонки.Добавить("ДокументПланирования");
	ЗаявкиОтложенные.Колонки.Добавить("ИдентификаторПозиции");
	
	Пока ВыборкаПоЗапретамПлатежей.Следующий() Цикл
		
		НоваяСтрокаЗаявкаОтложенная = ЗаявкиОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаявкаОтложенная, ВыборкаПоЗапретамПлатежей);
		
	КонецЦикла;
	
	ЗаявкиОтложенные.Свернуть("ДокументПланирования, ИдентификаторПозиции");
	
	УстановитьСостояниеИсполненияДокументаСписок(ЗаявкиОтложенные, 
		Перечисления.СостоянияИсполненияЗаявки.Отложена,,, ЗаявкаСсылка);
		
	// Переведем новые позиции в статус "Ожидает исполнения"
	ЗаявкиНовые = Новый ТаблицаЗначений;
	ЗаявкиНовые.Колонки.Добавить("ДокументПланирования");
	ЗаявкиНовые.Колонки.Добавить("ИдентификаторПозиции");
	
	Для Каждого НовыйИдентификатор Из НовыеИдентификаторы Цикл
		Если ЗаявкиОтложенные.Найти(НовыйИдентификатор, "ИдентификаторПозиции") = неопределено тогда
			
			НоваяСтрокаЗаявка = ЗаявкиНовые.Добавить();
			НоваяСтрокаЗаявка.ДокументПланирования = ЗаявкаСсылка;
			НоваяСтрокаЗаявка.ИдентификаторПозиции = НовыйИдентификатор;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаявкиНовые.Свернуть("ДокументПланирования, ИдентификаторПозиции");
			
	УстановитьСостояниеИсполненияДокументаСписок(ЗаявкиНовые, 
		Перечисления.СостоянияИсполненияЗаявки.НеОбработана,,, ЗаявкаСсылка);
		
КонецПроцедуры
	
// Функция возвращает платежную позицию с данными документа
Функция НоваяПлатежнаяПозицияПоДаннымДокумента(Объект) Экспорт
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") 
		И Объект.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПеречислениеЗаработнойПлатыПоВедомостям
		И Объект.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		Возврат НоваяПлатежнаяПозицияПеречислениеЗаработнойПлатыПоВедомостям(Объект);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		И Объект.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПеречислениеПодотчетномуЛицу
		И Объект.СписокФизЛиц Тогда
		
		Возврат НоваяПлатежнаяПозицияПеречислениеПодотчетнымЛицам(Объект);	
	КонецЕсли;
	
	РеквизитыДокумента = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Объект.Ссылка.Метаданные().ПолноеИмя());
	
	ПлатежнаяПозиция = СоздатьПлатежнуюПозицию();
	
	П1 = ПлатежнаяПозиция.Добавить();
	П1.ИдентификаторПозиции 	= Новый УникальныйИдентификатор;
	П1.ЗаявкаНаОперацию 		= Объект.Ссылка;
	П1.ВидОперацииУХ 			= Объект.ВидОперацииУХ;
	П1.Организация 				= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Организация);
	
	Если РеквизитыДокумента.ФормаОплаты.ЕстьРеквизит ИЛИ РеквизитыДокумента.ФормаОплаты.ЕстьЗначение Тогда
		П1.ФормаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ФормаОплаты);
	Иначе
		П1.ФормаОплаты = ВстраиваниеОПКПереопределяемый.ОсновнаяФормаОплаты(Объект.ВидОперацииУХ);
	КонецЕсли;
	
	Если П1.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		Если РеквизитыДокумента.Касса.ЕстьРеквизит Тогда
			П1.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Касса);
		КонецЕсли;
	ИначеЕсли П1.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		Если РеквизитыДокумента.БанковскийСчет.ЕстьРеквизит Тогда
			П1.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.БанковскийСчет);
		КонецЕсли;
		
		БанковскийСчетКонтрагента = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.БанковскийСчетКонтрагента);
		П1.СчетКонтрагента = БанковскийСчетКонтрагента;
		
	КонецЕсли;
	
	П1.Контрагент 			= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Контрагент);
	П1.ДоговорКонтрагента 	= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ДоговорКонтрагента);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "СчетКонтрагента") Тогда
		П1.СчетКонтрагента		= Объект.СчетКонтрагента;
	КонецЕсли;
	П1.ВалютаОплаты 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ВалютаОплаты);
	П1.ВалютаВзаиморасчетов = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ВалютаДокумента);
	П1.ДатаИсполнения 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ПланируемаяДатаОперации);
	П1.Приоритет = Объект.Приоритет;
	П1.ПриходРасход 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ПриходРасход);
	П1.СуммаВзаиморасчетов 	= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.СуммаДокумента);
	П1.СостояниеИсполнения 	= Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	
	ВстречнаяОперация 		= ПараметрыВстречнойОперации(Объект);
	Если ВстречнаяОперация.Есть Тогда
		ДобавитьВстречнуюОперацию(ПлатежнаяПозиция, ВстречнаяОперация, Объект);
	КонецЕсли;
	
	// Переоценить
	ПараметрыКурса = ПлатежныеПозицииКлиентСервер.СтруктураПараметровРасчетаКурса();
	ЗаполнитьЗначенияСвойств(ПараметрыКурса, Объект);
	ПереоценитьПлатежнуюПозицию(ПлатежнаяПозиция, ПараметрыКурса);
	
	// Заполнить реквизиты курса в платежных позициях
	ПараметрыКурса.Удалить("ДатаПлатежа");
	ПараметрыКурса.Удалить("ВалютаДокумента");
	ПараметрыКурса.Удалить("ВалютаОплаты");
	Для Каждого СтрокаПлатежнойПозиции Из ПлатежнаяПозиция Цикл
		ЗаполнитьЗначенияСвойств(СтрокаПлатежнойПозиции, ПараметрыКурса);
	КонецЦикла;
	
	Возврат ПлатежнаяПозиция;
	
КонецФункции

#Область УХ_Встраивание
Функция НоваяПлатежнаяПозицияПоДаннымДокументаЗаявкаНаКомандировку(Объект) Экспорт

	РеквизитыДокумента 	= ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Объект.Ссылка.Метаданные().ПолноеИмя());
	
	ПлатежнаяПозиция 	= СоздатьПлатежнуюПозицию();
	
	СписокФизЛиц 		= Объект.СписокФизЛиц;
	
	Для Каждого СтрокаТабличнойЧасти  Из Объект.ВыдачаПодОтчет Цикл
		
		П1 = ПлатежнаяПозиция.Добавить();
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ИдентификаторПозиции) Тогда
			П1.ИдентификаторПозиции 					= Новый УникальныйИдентификатор(СтрокаТабличнойЧасти.ИдентификаторПозиции);
		Иначе
			П1.ИдентификаторПозиции 					= Новый УникальныйИдентификатор;
			СтрокаТабличнойЧасти.ИдентификаторПозиции 	= П1.ИдентификаторПозиции;
		КонецЕсли; 
		
		П1.ЗаявкаНаОперацию 		= Объект.Ссылка;
		
		П1.ВидОперацииУХ 			= Объект.ВидОперацииУХ;
		П1.Организация 				= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Организация);
		
		Если РеквизитыДокумента.ФормаОплаты.ЕстьРеквизит ИЛИ РеквизитыДокумента.ФормаОплаты.ЕстьЗначение Тогда
			П1.ФормаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ФормаОплаты);
		Иначе
			П1.ФормаОплаты = ВстраиваниеОПКПереопределяемый.ОсновнаяФормаОплаты(Объект.ВидОперацииУХ);
		КонецЕсли;
		
		
		Если П1.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Если РеквизитыДокумента.Касса.ЕстьРеквизит Тогда
				П1.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Касса);
			КонецЕсли;
		ИначеЕсли П1.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Если РеквизитыДокумента.БанковскийСчет.ЕстьРеквизит Тогда
				П1.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.БанковскийСчет);
			КонецЕсли;
			
			П1.СчетКонтрагента = СтрокаТабличнойЧасти.ЛицевойСчет;
			
		КонецЕсли;
		Если СписокФизЛиц Тогда
			П1.Контрагент 			= СтрокаТабличнойЧасти.Сотрудник;
		Иначе	
		    П1.Контрагент 			= Объект.Сотрудник;
		КонецЕсли;
		
		П1.ВалютаОплаты 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ВалютаОплаты);
		П1.ВалютаВзаиморасчетов = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ВалютаДокумента);
		П1.ДатаИсполнения 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ПланируемаяДатаОперации);
		П1.Приоритет 			= Объект.Приоритет;
				
		П1.ПриходРасход 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ПриходРасход);
		П1.СуммаВзаиморасчетов 	= СтрокаТабличнойЧасти.Сумма;
		П1.СостояниеИсполнения 	= Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
		
		// Переоценить
		ПараметрыКурса = ПлатежныеПозицииКлиентСервер.СтруктураПараметровРасчетаКурса();
		ЗаполнитьЗначенияСвойств(ПараметрыКурса, Объект);
		ПереоценитьПлатежнуюПозицию(ПлатежнаяПозиция, ПараметрыКурса);
		
		// Заполнить реквизиты курса в платежных позициях
		ПараметрыКурса.Удалить("ДатаПлатежа");
		ПараметрыКурса.Удалить("ВалютаДокумента");
		ПараметрыКурса.Удалить("ВалютаОплаты");
		Для Каждого СтрокаПлатежнойПозиции Из ПлатежнаяПозиция Цикл
			ЗаполнитьЗначенияСвойств(СтрокаПлатежнойПозиции, ПараметрыКурса);
		КонецЦикла;
		
		
	КонецЦикла; 
		
	Возврат ПлатежнаяПозиция;
	
КонецФункции
#КонецОбласти

Функция НоваяПлатежнаяПозицияПеречислениеЗаработнойПлатыПоВедомостям(Объект)
	
	ИспользоватьНачислениеЗарплатыУТ = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	Если ИспользоватьНачислениеЗарплатыУТ Тогда
		Если ТипЗнч(Объект.РасшифровкаПлатежа) = Тип("ДанныеФормыКоллекция") Тогда
			МассивВедомостей = Объект.РасшифровкаПлатежа.Выгрузить().ВыгрузитьКолонку("Ведомость");
		Иначе
			МассивВедомостей = Объект.РасшифровкаПлатежа.ВыгрузитьКолонку("Ведомость");
		КонецЕсли;
		
		ТабЛицевыеСчета = ТаблицаЛицевыхСчетовВедомостей(МассивВедомостей);
	Иначе
		ТабЛицевыеСчета = Объект.ЛицевыеСчетаСотрудников.Выгрузить();
	КонецЕсли;
	
	Возврат НоваяПлатежнаяПозицияПоТаблицеЛицевыхСчетов(Объект, ТабЛицевыеСчета);
	
КонецФункции

Функция НоваяПлатежнаяПозицияПеречислениеПодотчетнымЛицам(Объект)
	ТабЛицевыеСчета = Объект.ЛицевыеСчетаСотрудников.Выгрузить();
	Возврат НоваяПлатежнаяПозицияПоТаблицеЛицевыхСчетов(Объект, ТабЛицевыеСчета);
КонецФункции

Функция НоваяПлатежнаяПозицияПоТаблицеЛицевыхСчетов(Объект, ТабЛицевыеСчета)
	
	// одна платежная позиция на строчку в лицевых счетах сотрудников
	
	РеквизитыДокумента = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Объект.Ссылка.Метаданные().ПолноеИмя());
	
	ПлатежнаяПозиция = СоздатьПлатежнуюПозицию();
	
	Для каждого СтрокаЛицевогоСчета ИЗ ТабЛицевыеСчета Цикл
		
		П1 = ПлатежнаяПозиция.Добавить();
		П1.ИдентификаторПозиции = Новый УникальныйИдентификатор;
		П1.ЗаявкаНаОперацию = Объект.Ссылка;
		П1.ВидОперацииУХ = Объект.ВидОперацииУХ;
		П1.Организация = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Организация);
		
		Если РеквизитыДокумента.ФормаОплаты.ЕстьРеквизит ИЛИ РеквизитыДокумента.ФормаОплаты.ЕстьЗначение Тогда
			П1.ФормаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ФормаОплаты);
		Иначе
			П1.ФормаОплаты = ВстраиваниеОПКПереопределяемый.ОсновнаяФормаОплаты(Объект.ВидОперацииУХ);
		КонецЕсли;
		
		Если П1.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Если РеквизитыДокумента.Касса.ЕстьРеквизит Тогда
				П1.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Касса);
			КонецЕсли;
		ИначеЕсли П1.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Если РеквизитыДокумента.БанковскийСчет.ЕстьРеквизит Тогда
				П1.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.БанковскийСчет);
			КонецЕсли;
			
			П1.СчетКонтрагента = СтрокаЛицевогоСчета.ЛицевойСчет;
			
		КонецЕсли;
		
		П1.Контрагент = СтрокаЛицевогоСчета.ФизическоеЛицо;
		П1.ВалютаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ВалютаОплаты);
		П1.ВалютаВзаиморасчетов = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ВалютаДокумента);
		П1.ДатаИсполнения = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ПланируемаяДатаОперации);
		П1.Приоритет = Объект.Приоритет;
		П1.ПриходРасход = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ПриходРасход);
		П1.СуммаВзаиморасчетов = СтрокаЛицевогоСчета.Сумма;
		П1.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	
	КонецЦикла;
	
	// Переоценить
	ПараметрыКурса = ПлатежныеПозицииКлиентСервер.СтруктураПараметровРасчетаКурса();
	ЗаполнитьЗначенияСвойств(ПараметрыКурса, Объект);
	ПереоценитьПлатежнуюПозицию(ПлатежнаяПозиция, ПараметрыКурса);
	
	// Заполнить реквизиты курса в платежных позициях
	ПараметрыКурса.Удалить("ДатаПлатежа");
	ПараметрыКурса.Удалить("ВалютаДокумента");
	ПараметрыКурса.Удалить("ВалютаОплаты");
	Для Каждого СтрокаПлатежнойПозиции Из ПлатежнаяПозиция Цикл
		ЗаполнитьЗначенияСвойств(СтрокаПлатежнойПозиции, ПараметрыКурса);
	КонецЦикла;
	
	Возврат ПлатежнаяПозиция;
	
КонецФункции

Функция ТаблицаЛицевыхСчетовВедомостей(МассивВедомостей) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.БанковскийСчет КАК ЛицевойСчет,
	|	СУММА(ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.КВыплате) КАК Сумма
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыПеречислением.Зарплата КАК ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.Ссылка В(&МассивВедомостей)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.ФизическоеЛицо,
	|	ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.БанковскийСчет
	|
	|ИМЕЮЩИЕ
	|	СУММА(ВедомостьНаВыплатуЗарплатыПеречислениемЗарплата.КВыплате) > 0"
	);
	Запрос.УстановитьПараметр("МассивВедомостей", МассивВедомостей);
	
	Таблица = Запрос.Выполнить().Выгрузить();
	Возврат Таблица;
	
КонецФункции

Процедура ЗаполнитьСуммуИКурсОсновнойПозиции(ОсновнаяПозиция, ПараметрыВстречнойОперации) Экспорт
		
	Если ПараметрыВстречнойОперации.ЭтоВГО Тогда
			
	ИначеЕсли ПараметрыВстречнойОперации.ЭтоКонвертацияВалюты Тогда
		
		ОсновнаяПозиция.КурсПлатежа = 1;
		ОсновнаяПозиция.КратностьПлатежа = 1;
		
	ИначеЕсли ПараметрыВстречнойОперации.ЭтоПереводСобственныхСредств Тогда
		
		ОсновнаяПозиция.КурсПлатежа = 1;
		ОсновнаяПозиция.КратностьПлатежа = 1;
		ОсновнаяПозиция.Сумма = ОсновнаяПозиция.СуммаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьВстречнуюПозициюПоОсновной(ВстречнаяПозиция, ОсновнаяПозиция, ПараметрыВстречнойОперации, Объект, РеквизитыДокумента) Экспорт
	
	ЗаполнитьЗначенияСвойств(ВстречнаяПозиция, ОсновнаяПозиция,, 
		"ИдентификаторПозиции, ВидОперацииУХ, ПриходРасход, Организация, БанковскийСчетКасса, Контрагент, ФормаОплаты, СчетКонтрагента");
	
	ВстречнаяПозиция.ИдентификаторПозиции = Новый УникальныйИдентификатор;
	ВстречнаяПозиция.ВидОперацииУХ = ПараметрыВстречнойОперации.ВидОперацииУХ;
	ВстречнаяПозиция.ПриходРасход = ПараметрыВстречнойОперации.ПриходРасход;
	
	Если ПараметрыВстречнойОперации.ЭтоВГО Тогда
		
		БанковскийСчетОрганизации = ОсновнаяПозиция.БанковскийСчетКасса;
		БанковскийСчетКонтрагента = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.БанковскийСчетКонтрагента);
		
		БанковскийСчетКонтрагентаВстречный = ВстраиваниеОПКПереопределяемый.БанковскийСчетКонтрагентаВстречный(БанковскийСчетОрганизации);
		БанковскийСчетОрганизацииВстречный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "СчетОрганизации");
		
		ВстречнаяПозиция.Организация = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ОрганизацияВстречная);
		ВстречнаяПозиция.Контрагент = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.КонтрагентОрганизации);
		ВстречнаяПозиция.ДоговорКонтрагента = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ДоговорВстречный);
		ВстречнаяПозиция.ФормаОплаты = ОсновнаяПозиция.ФормаОплаты;
		Если ВстречнаяПозиция.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
				ВстречнаяПозиция.БанковскийСчетКасса = БанковскийСчетОрганизацииВстречный;
			КонецЕсли;
			
			ВстречнаяПозиция.СчетКонтрагента = БанковскийСчетКонтрагентаВстречный;
		КонецЕсли;
		
	ИначеЕсли ПараметрыВстречнойОперации.ЭтоКонвертацияВалюты Тогда
		
		ВстречнаяПозиция.БанковскийСчетКасса = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.БанковскийСчетПолучатель);
		ВстречнаяПозиция.Организация = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Организация);
		ВстречнаяПозиция.Контрагент = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Контрагент);
		ВстречнаяПозиция.ДоговорКонтрагента = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ДоговорКонтрагента);
		ВстречнаяПозиция.ВалютаВзаиморасчетов = Объект.ВалютаКонвертации;
		ВстречнаяПозиция.ВалютаОплаты = Объект.ВалютаКонвертации;
		ВстречнаяПозиция.ФормаОплаты = ОсновнаяПозиция.ФормаОплаты;
		ВстречнаяПозиция.Сумма = Объект.СуммаКонвертации;
		ВстречнаяПозиция.СуммаВзаиморасчетов = Объект.СуммаКонвертации;
		ВстречнаяПозиция.КурсПлатежа = 1;
		ВстречнаяПозиция.КратностьПлатежа = 1;
		ВстречнаяПозиция.Контрагент = ОсновнаяПозиция.Контрагент;
		
	ИначеЕсли ПараметрыВстречнойОперации.ЭтоПереводСобственныхСредств Тогда
		
		ВстречнаяПозиция.Контрагент = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.Контрагент);
		ВстречнаяПозиция.ДоговорКонтрагента = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ДоговорКонтрагента);
		
		ВстречнаяПозиция.ФормаОплаты = ПараметрыВстречнойОперации.ФормаОплаты;
		Если ВстречнаяПозиция.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Если РеквизитыДокумента.КассаПолучатель.ЕстьРеквизит Тогда
				ВстречнаяПозиция.БанковскийСчетКасса = Объект.КассаПолучатель;
			КонецЕсли;
		Иначе
			Если РеквизитыДокумента.БанковскийСчетПолучатель.ЕстьРеквизит Тогда
				ВстречнаяПозиция.БанковскийСчетКасса = Объект.БанковскийСчетПолучатель;
			КонецЕсли;
		КонецЕсли;
		Если РеквизитыДокумента.ОрганизацияВстречная.ЕстьРеквизит Тогда
			ВстречнаяПозиция.Организация = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыДокумента.ОрганизацияВстречная);
		Иначе
			ВстречнаяПозиция.Организация = ОсновнаяПозиция.Организация;
		КонецЕсли;
		ВстречнаяПозиция.КурсПлатежа = 1;
		ВстречнаяПозиция.КратностьПлатежа = 1;
		ВстречнаяПозиция.Сумма = ВстречнаяПозиция.СуммаВзаиморасчетов;
	КонецЕсли;
	
	ВстречнаяПозиция.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	ВстречнаяПозиция.ИдентификаторВстречнойПозиции = ОсновнаяПозиция.ИдентификаторПозиции;

КонецПроцедуры

// Функция возвращает структуру с параметрами встречной операции
//
// Параметры:
//  Объект	 - см. ПлатежныеПозиции.ПараметрыПолученияВстречнойОперации 
// 
// Возвращаемое значение:
//   - Структура
//      * Есть - Булево - должна быть встречная операция
//      * ВидОперацииУХ - СправочникСсылка.ВидыОперацийУХ
//      * ПриходРасход - ПеречислениеСсылка.ВидыДвиженийПриходРасход
//		* ФормаОплаты - ПеречислениеСсылка.ФормыОплаты
//		* ЭтоВГО - Булево - это внутригрупповая операция
//		* ЭтоПереводСобственныхСредств - это операция перевода собственных средств
//		* ЭтоКонвертацияВалюты - это операция ковертации валюты
Функция ПараметрыВстречнойОперации(Объект) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Есть", Ложь);            
	Результат.Вставить("ВидОперацииУХ");
	Результат.Вставить("ПриходРасход");
	Результат.Вставить("ФормаОплаты");
	Результат.Вставить("ЭтоВГО", Ложь);
	Результат.Вставить("ЭтоПереводСобственныхСредств", Ложь);
	Результат.Вставить("ЭтоКонвертацияВалюты", Ложь);
	
	Если ТипЗнч(Объект.Ссылка) = КэшируемыеПроцедурыОПК.ТипПланируемоеПоступление() Тогда
		Возврат Результат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперацииУХ", Объект.ВидОперацииУХ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОперацийУХ.ВстречныйВидОперацииВГО КАК ВидОперацииУХ,
	|	ВидыОперацийУХ.Ссылка КАК ВстречныйВидОперацииВГО,
	|	ВидыОперацийУХ.ПриходРасход КАК ПриходРасход,
	|	ВидыОперацийУХ.ДопустимБезналичныйРасчет КАК ДопустимБезналичныйРасчет,
	|	ВидыОперацийУХ.ДопустимНаличныйРасчет КАК ДопустимНаличныйРасчет,
	|	ИСТИНА КАК ЭтоВГО,
	|	ЛОЖЬ КАК ЭтоПереводСобственныхСредств,
	|	ВидыОперацийУХ.ЭтоКонвертацияВалюты КАК ЭтоКонвертацияВалюты
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ВстречныйВидОперацииВГО = &ВидОперацииУХ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыОперацийУХ.ВстречныйВидОперацииПереводСобственныхСредств,
	|	ВидыОперацийУХ.Ссылка,
	|	ВидыОперацийУХ.ПриходРасход,
	|	ВидыОперацийУХ.ДопустимБезналичныйРасчет,
	|	ВидыОперацийУХ.ДопустимНаличныйРасчет,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ВидыОперацийУХ.ЭтоКонвертацияВалюты
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ВстречныйВидОперацииПереводСобственныхСредств = &ВидОперацииУХ
	|	И ВидыОперацийУХ.ЭтоПеремещениеСобственныхСредств = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВидыОперацийУХ.ВстречныйВидОперацииПереводСобственныхСредств,
	|	ВидыОперацийУХ.Ссылка,
	|	ВидыОперацийУХ.ПриходРасход,
	|	ВидыОперацийУХ.ДопустимБезналичныйРасчет,
	|	ВидыОперацийУХ.ДопустимНаличныйРасчет,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ВидыОперацийУХ.ЭтоКонвертацияВалюты
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ВстречныйВидОперацииПереводСобственныхСредств = &ВидОперацииУХ
	|	И ВидыОперацийУХ.ЭтоКонвертацияВалюты = ИСТИНА";
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Если Реквизиты.Следующий() Тогда
	
		Если Реквизиты.ЭтоВГО = Истина Тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ЭтоВнутригрупповоеПеремещение")
				И Объект.ЭтоВнутригрупповоеПеремещение = Истина Тогда
				ЗаполнитьЗначенияСвойств(Результат, Реквизиты);
				Результат.ВидОперацииУХ = Реквизиты.ВстречныйВидОперацииВГО;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(Результат, Реквизиты);
			Результат.ВидОперацииУХ = Реквизиты.ВстречныйВидОперацииВГО;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Есть = ЗначениеЗаполнено(Результат.ВидОперацииУХ);
	Если Результат.Есть Тогда
		Если Реквизиты.ДопустимБезналичныйРасчет Тогда
			Результат.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
		ИначеЕсли Реквизиты.ДопустимНаличныйРасчет Тогда
			Результат.ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		Иначе
			Результат.ФормаОплаты = Перечисления.ФормыОплаты.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПолученияВстречнойОперации() Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("Ссылка");
	Параметры.вставить("ВидОперацииУХ", Справочники.ВидыОперацийУХ.ПустаяСсылка());
	Параметры.вставить("ЭтоВнутригрупповоеПеремещение", Ложь);
	
	Возврат Параметры;
	
КонецФункции	

#Область ОбработчикиСобтытийИзмененияЭлементовПП

Процедура УстановитьОграничениеТипаБанковскийСчетКасса(Элемент, ФормаОплаты) Экспорт
	
	Если ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Безналичная") Тогда
		ОписаниеТипов = Метаданные.ОпределяемыеТипы.БанковскиеСчетаОрганизаций.Тип;
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Наличная") Тогда
		ОписаниеТипов = Метаданные.ОпределяемыеТипы.Кассы.Тип;
	Иначе	
		ОписаниеТипов = Новый ОписаниеТипов;
	КонецЕсли;
	
	Элемент.ОграничениеТипа = ОписаниеТипов;
	
КонецПроцедуры

// Процедура выполняет действия при изменении формы оплаты в документах ЗаявкаНарасходованиеДС и ОжидаемоеПоступлениеДС
Процедура УстановитьФормуОплаты(Форма) Экспорт
	
	Объект = Форма.Объект;
	РеквизитыЗаявки = Форма.РеквизитыДокумента;
	
	//
	ФормаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты);
	
	//
	РеквизитыКУстановке1 = ПолучитьБанковскийСчетКассу(Объект, РеквизитыЗаявки);
	РеквизитыКУстановке1.Вставить("ФормаОплаты", ФормаОплаты);
	
	//
	РеквизитыКУстановке2 = Новый Структура;
	РеквизитыКУстановке2.Вставить("ФормаОплаты", ФормаОплаты);
	РеквизитыКУстановке2.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Ложь);
	РеквизитыКУстановке2.Вставить("БанковскийСчетКасса", неопределено);
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		РеквизитыКУстановке2.БанковскийСчетКасса = КэшируемыеПроцедурыОПК.ПустаяКассаОрганизации();
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		РеквизитыКУстановке2.БанковскийСчетКасса = КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации();
	КонецЕсли;
	
	//
	Операции = ОперацииПлатежнойПозиции(Форма);
	Для Каждого П1 Из Операции.Основная Цикл
		ЗаполнитьЗначенияСвойств(П1, РеквизитыКУстановке1);
	КонецЦикла;
	Для Каждого П2 Из Операции.Встречная Цикл
		ЗаполнитьЗначенияСвойств(П2, РеквизитыКУстановке2);
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет действия при изменении организации документа-заявки.
//   1 - Замена организации в 1-й позиции
//   2 - Очистка реквизита БанковскийСчетКасса
Процедура УстановитьОрганизацию(Форма) Экспорт
	
	Объект = Форма.Объект;
	РеквизитыЗаявки = Форма.РеквизитыДокумента;
	
	// В 1-й операции платежной позиции меняем организацию
	РеквизитыКУстановке1 = ПолучитьБанковскийСчетКассу(Объект, РеквизитыЗаявки);
	РеквизитыКУстановке1.Вставить("Организация", ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.Организация));
	
	Операции = ОперацииПлатежнойПозиции(Форма);
	// Устанавливаем реквизиты встречной операции
	Для Каждого П1 Из Операции.Основная Цикл
		ЗаполнитьЗначенияСвойств(П1, РеквизитыКУстановке1);
	КонецЦикла;
	
	//
	ВстречнаяОперация = ПараметрыВстречнойОперации(Объект);
	Если ВстречнаяОперация.Есть Тогда 
		Если ВстречнаяОперация.ЭтоКонвертацияВалюты ИЛИ ВстречнаяОперация.ЭтоПереводСобственныхСредств Тогда
			// Для конвертации валюты заполнить организацию во 2-й позиции
			Для Каждого П2 Из Операции.Встречная Цикл
				П2.Организация =  РеквизитыКУстановке1.Организация;
			КонецЦикла;
		ИначеЕсли ВстречнаяОперация.ЭтоВГО Тогда 
			Если РеквизитыЗаявки.КонтрагентОрганизации.ЕстьРеквизит Тогда
				КонтрагентОрганизации = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.КонтрагентОрганизации);
				Для Каждого П2 Из Операции.Встречная Цикл
					П2.Контрагент =  КонтрагентОрганизации;
					П1 = ОбщегоНазначенияОПК.НайтиЭлементКоллекцииПоЗначениюРеквизита(Операции.Основная, "ИдентификаторВстречнойПозиции", П2.ИдентификаторПозиции);
					П2.СчетКонтрагента = ВстраиваниеОПКПереопределяемый.БанковскийСчетКонтрагентаВстречный(П1.БанковскийСчетКасса);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия при изменении организации документа-заявки.
//   1 - Замена организации в 1-й позиции
//   2 - Очистка реквизита БанковскийСчетКасса
Процедура УстановитьВалюты(Форма) Экспорт
	
	Объект = Форма.Объект;
	РеквизитыЗаявки = Форма.РеквизитыДокумента;
	
	Операции = ОперацииПлатежнойПозиции(Форма);
	
	// 
	РеквизитыКУстановке1 = Новый Структура;
	РеквизитыКУстановке1.Вставить("ВалютаВзаиморасчетов", 	ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента));
	РеквизитыКУстановке1.Вставить("ВалютаОплаты", 			ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты));
	
	Если Операции.Основная.Количество() > 0 Тогда
		БанковскийСчетКасса = Операции.Основная[0].БанковскийСчетКасса;
	КонецЕсли;
	
	ТребуетсяСменаСчета = Истина;
	Если БанковскийСчетКасса <> Неопределено Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКасса, "ВалютаДенежныхСредств") = Объект.ВалютаОплаты Тогда
			ТребуетсяСменаСчета = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ТребуетсяСменаСчета Тогда
		Для Каждого КлючЗначение Из ПолучитьБанковскийСчетКассу(Объект, РеквизитыЗаявки) Цикл
			РеквизитыКУстановке1.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	//
	РеквизитыКУстановке2 = Новый Структура;
	РеквизитыКУстановке2.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента));
	РеквизитыКУстановке2.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты));
	
	//
	ЗаполнитьСвойстваПозиций(Операции.Основная, РеквизитыКУстановке1);
	ЗаполнитьСвойстваПозиций(Операции.Встречная, РеквизитыКУстановке2);
	
	// В процессе смены валюты, мог быть изменен и банковский счет.
	УстановитьБанковскийСчетКонтрагента(Форма);
	
	УстановитьСуммуДокумента(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении банковского счета/кассы в нулевой строке платежной позиции
Процедура УстановитьБанковскийСчетКассу(Форма, БанковскийСчетКасса = неопределено, Фиксированный = неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	Если БанковскийСчетКасса = неопределено Тогда
		П0 = Форма.ПлатежнаяПозиция[0];
		БанковскийСчетКасса = П0.БанковскийСчетКасса;
		ФормаОплаты = П0.ФормаОплаты;
		ЗапретИзмененияБанковскогоСчетаКассы = П0.ЗапретИзмененияБанковскогоСчетаКассы;
		
		Если ВстраиваниеОПКПереопределяемый.ЭтоЕХ() Тогда
			// Сохранить банковский счет/кассу в объекте
			Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
				Объект.БанковскийСчет = БанковскийСчетКасса;
			ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
				Объект.Касса = БанковскийСчетКасса;
			КонецЕсли;
		КонецЕсли;
		СтартСПозиции = 1;
	Иначе
		Если Метаданные.ОпределяемыеТипы.Кассы.Тип.СодержитТип(ТипЗнч(БанковскийСчетКасса)) Тогда
			ФормаОплаты = Перечисления.ФормыОплаты.Наличная;
		Иначе
			ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
		КонецЕсли;
		ЗапретИзмененияБанковскогоСчетаКассы = Фиксированный = Истина;
		СтартСПозиции = 0;
	КонецЕсли;
	
	// установка значения в позиции
	СтруктураПоиска = Новый Структура("ПриходРасход", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.ПриходРасход));
	П1 = Форма.ПлатежнаяПозиция.НайтиСтроки(СтруктураПоиска);
	Если П1.Количество() > СтартСПозиции Тогда
		Для Каждого Строка Из П1 Цикл
			Строка.ФормаОплаты = ФормаОплаты;
			Строка.БанковскийСчетКасса = БанковскийСчетКасса;
			Строка.ЗапретИзмененияБанковскогоСчетаКассы = ЗапретИзмененияБанковскогоСчетаКассы;
		КонецЦикла;
	КонецЕсли;
	
	// 
	УстановитьДатуЗачисления(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении банковского счета контрагента
// Используется только в ERP.УХ
Процедура УстановитьБанковскийСчетКонтрагента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	БанковскийСчетКонтрагента = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.БанковскийСчетКонтрагента);
	Если БанковскийСчетКонтрагента <> неопределено Тогда
		БанковскийСчетОрганизацииВстречный = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(БанковскийСчетКонтрагента, "СчетОрганизации");
	КонецЕсли;
	
	РезультатПлатежныеПозиции = ОперацииПлатежнойПозиции(Форма);

	Для каждого Позиция Из РезультатПлатежныеПозиции.Основная Цикл
		Позиция.СчетКонтрагента = БанковскийСчетКонтрагента;
	КонецЦикла;
		
	ВстречнаяОперация = ПараметрыВстречнойОперации(Объект);
	Если НЕ ВстречнаяОперация.Есть Тогда
		Возврат;
	КонецЕсли;
	
	Если ВстречнаяОперация.ЭтоВГО Тогда
		
		Для Каждого П2 Из РезультатПлатежныеПозиции.Встречная Цикл
			П2.БанковскийСчетКасса = БанковскийСчетОрганизацииВстречный;
		КонецЦикла;
		
		УстановитьДатуЗачисления(Форма);
	ИначеЕсли ВстречнаяОперация.ЭтоПереводСобственныхСредств Тогда
		УстановитьБанковскийСчетКассуПолучатель(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией при изменении организации получателя
Процедура УстановитьОрганизациюПолучатель(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	// В 2-й операции платежной позиции меняем организацию
	Организация = Объект.ОрганизацияПолучатель;
	КонтрагентОрганизации = ВстраиваниеОПКПереопределяемый.КонтрагентОрганизации(Организация);
	Если ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.ФормаОплаты) = Перечисления.ФормыОплаты.Наличная Тогда
		БанковскийСчетКасса = Объект.КассаПолучатель;
	Иначе
		БанковскийСчетКасса = Объект.БанковскийСчетПолучатель;
	КонецЕсли;
	
	Операции = ОперацииПлатежнойПозиции(Форма);
	// Устанавливаем реквизиты встречной операции
	Для Каждого П2 Из Операции.Встречная Цикл
		П2.Организация = Организация;
		П2.БанковскийСчетКасса = БанковскийСчетКасса;
	КонецЦикла;
	
	// Устанавливае реквизиты встречной операции
	Для Каждого П1 Из Операции.Основная Цикл
		П1.Контрагент = КонтрагентОрганизации;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией при изменении банковского счета/кассы получателя
Процедура УстановитьБанковскийСчетКассуПолучатель(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Реквизиты = Форма.РеквизитыДокумента;
	Если Реквизиты.Параметры.Свойство("СчетКассаВФорме")
		И Реквизиты.Параметры.СчетКассаВФорме = ИСТИНА Тогда
		
		// Получаем получателя и устанавливаем в платежной позиции
		ФормаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты);
		Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			Получатель = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.БанковскийСчетПолучатель);
		ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			Получатель = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.КассаПолучатель);
		Иначе
			Получатель = Неопределено;
		КонецЕсли;
		
		//
		Для Каждого П2 Из ОперацииПлатежнойПозиции(Форма).Встречная Цикл
			П2.БанковскийСчетКасса = Получатель;
		КонецЦикла;
	Иначе
		// Реквизиты отправитель банк/касса устанавливаются в форме документа
	КонецЕсли;
	
	// 
	УстановитьДатуЗачисления(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении даты платежа основной операции
Процедура УстановитьДатуПлатежа(Форма, ПолучитьИзРеквизита = Ложь) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Если ПолучитьИзРеквизита = Ложь Тогда
		ДатаИсполнения = Форма.ПлатежнаяПозиция[0].ДатаИсполнения;
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, Реквизиты.ПланируемаяДатаОперации, ДатаИсполнения);
	Иначе
		ДатаИсполнения = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ПланируемаяДатаОперации);
	КонецЕсли;
	
	Для Каждого Позиция Из Форма.ПлатежнаяПозиция  Цикл
		Позиция.ДатаИсполнения = ДатаИсполнения;
	КонецЦикла;
	
	ПереоценитьПлатежнуюПозициюНаФорме(Форма);
	
	УстановитьДатуЗачисления(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении контрагента
// Для работы необходимы коррекнто заполненные реквизиты документа заявки на оплату: ЭтоВнутригрупповоеПеремещение и ОрганизацияПолучатель
Процедура УстановитьКонтрагента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	//
	Контрагент = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.Контрагент);
	ОперацииПлатежнойПозиции = ОперацииПлатежнойПозиции(Форма);
	Для Каждого П1 Из ОперацииПлатежнойПозиции.Основная Цикл
		П1.Контрагент = Контрагент;
	КонецЦикла;
	
	// Установить счет зачисления ВГО-контрагента
	ВстречнаяОперация = ПараметрыВстречнойОперации(Объект);
	Если НЕ ВстречнаяОперация.Есть Тогда
		
		// При смене контрагента возможно изменение кол-ва операций платежной позиции
		// Был внутригрупповой контрагент, а заменили на обыкновенного
		Для Каждого П2 Из ОперацииПлатежнойПозиции.Встречная Цикл
			Форма.ПлатежнаяПозиция.Удалить(П2);
		КонецЦикла;
		// Очищаем встречную позицию
		Для Каждого П1 Из ОперацииПлатежнойПозиции.Основная Цикл
			П1.ИдентификаторВстречнойПозиции = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
		КонецЦикла;
		
		Возврат;		
	КонецЕсли;
	
	// После смены контрагента возможно добавление встречной операции
	// Был обычный контрагент, а заменили на внутригруппового
	Если ОперацииПлатежнойПозиции.Встречная.Количество() = 0 Тогда
		ДобавитьВстречнуюОперацию(Форма.ПлатежнаяПозиция, ВстречнаяОперация, Объект);
	КонецЕсли;
	
	//
	РеквизитыКУстановке = Новый Структура;
	Если ВстречнаяОперация.ЭтоВГО И Форма.РеквизитыДокумента.ОрганизацияВстречная.ЕстьРеквизит Тогда
		РеквизитыКУстановке.Вставить("Организация", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.ОрганизацияВстречная));
		РеквизитыКУстановке.Вставить("Контрагент", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.КонтрагентОрганизации));
	ИначеЕсли ВстречнаяОперация.ЭтоКонвертацияВалюты Тогда
		РеквизитыКУстановке.Вставить("Контрагент", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.Контрагент));
	КонецЕсли;
	
	Если РеквизитыКУстановке.Количество() > 0 Тогда
		Операции = ОперацииПлатежнойПозиции(Форма);
		ЗаполнитьСвойстваПозиций(Операции.Встречная, РеквизитыКУстановке);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении договора
Процедура УстановитьДоговор(Форма) Экспорт
	
	//НУЖНО УСТАНОВИТЬ В ПЛАТЕЖНОЙ ПОЗИЦИИ ДоговорКонтрагента, ВалютаВзаиморасчетов, ВалютаОплаты, БанковскийСчет
	Объект = Форма.Объект;
	
	Инфо = Форма.РеквизитыДокумента;
	
	//
	РеквизитыКурса = "СпособОпределенияКурсаПлатежа, ДатаФиксацииКурсаПлатежа, СдвигДатыФиксацииКурсаПлатежа,
	|КурсПлатежаНеМенее, КурсПлатежаНеБолее, КурсПлатежаНеМенееВВалютеОплаты, КурсПлатежаНеБолееВВалютеОплаты";
	Если Объект.СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс Тогда 
		РеквизитыКурса = РеквизитыКурса + ",КурсПлатежа,КратностьПлатежа";
	КонецЕсли;
	
	РеквизитыКУстановке1 = Новый Структура(РеквизитыКурса);
	ЗаполнитьЗначенияСвойств(РеквизитыКУстановке1, Объект, РеквизитыКурса);
	РеквизитыКУстановке1.Вставить("ДоговорКонтрагента", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорКонтрагента));
	РеквизитыКУстановке1.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
	РеквизитыКУстановке1.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
	
	// Основная позиция
	Если ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ФормаОплаты) = Перечисления.ФормыОплаты.Безналичная Тогда
		Если Инфо.БанковскийСчет.ЕстьРеквизит Тогда
			РеквизитыКУстановке1.Вставить("БанковскийСчетКасса", Объект.БанковскийСчет);
		КонецЕсли;
	Иначе
		Если Инфо.Касса.ЕстьРеквизит Тогда
			РеквизитыКУстановке1.Вставить("БанковскийСчетКасса", Объект.Касса);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("ФиксированныйСчетОрганизации") Тогда
		РеквизитыКУстановке1.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Объект.ФиксированныйСчетОрганизации);
	Иначе
		РеквизитыКУстановке1.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Ложь);
	КонецЕсли;
	
	Операции = ОперацииПлатежнойПозиции(Форма);
	ЗаполнитьСвойстваПозиций(Операции.Основная, РеквизитыКУстановке1);
	
	// Встречная позиция
	ВстречнаяОперация = ПараметрыВстречнойОперации(Объект);
	Если ВстречнаяОперация.Есть Тогда
		
		РеквизитыКУстановке2 = Новый Структура(РеквизитыКурса);
		ЗаполнитьЗначенияСвойств(РеквизитыКУстановке2, Объект, РеквизитыКурса);
		Если ВстречнаяОперация.ЭтоВГО Тогда
			РеквизитыКУстановке2.Вставить("ДоговорКонтрагента", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорВстречный));
			РеквизитыКУстановке2.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
			РеквизитыКУстановке2.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
		ИначеЕсли ВстречнаяОперация.ЭтоКонвертацияВалюты Тогда
			РеквизитыКУстановке2.Вставить("ДоговорКонтрагента", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорКонтрагента));
			РеквизитыКУстановке2.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаКонвертации));
			РеквизитыКУстановке2.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаКонвертации));
		ИначеЕсли ВстречнаяОперация.ЭтоПереводСобственныхСредств Тогда
			РеквизитыКУстановке2.Вставить("ДоговорКонтрагента", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорКонтрагента));
			РеквизитыКУстановке2.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
			РеквизитыКУстановке2.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
		КонецЕсли;
		
		ЗаполнитьСвойстваПозиций(Операции.Встречная, РеквизитыКУстановке2);
		
	КонецЕсли;
	
	ПереоценитьПлатежнуюПозициюНаФорме(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении договора кредита и депозита
Процедура УстановитьДоговорКредитаДепозита(Форма) Экспорт
	
	//НУЖНО УСТАНОВИТЬ В ПЛАТЕЖНОЙ ПОЗИЦИИ ДоговорКонтрагента, ВалютаВзаиморасчетов, ВалютаОплаты, БанковскийСчет
	Объект = Форма.Объект;
	
	Инфо = Форма.РеквизитыДокумента;
	
	РеквизитыКУстановке1 = Новый Структура;
	РеквизитыКУстановке1.Вставить("ДоговорКонтрагента", Объект.ДоговорКредитаДепозита);
	РеквизитыКУстановке1.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
	РеквизитыКУстановке1.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
	
	// Основная позиция
	Если ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ФормаОплаты) = Перечисления.ФормыОплаты.Безналичная Тогда
		Если Инфо.БанковскийСчет.ЕстьРеквизит Тогда
			РеквизитыКУстановке1.Вставить("БанковскийСчетКасса", Объект.БанковскийСчет);
		КонецЕсли;
	Иначе
		Если Инфо.Касса.ЕстьРеквизит Тогда
			РеквизитыКУстановке1.Вставить("БанковскийСчетКасса", Объект.Касса);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("ФиксированныйСчетОрганизации") Тогда
		РеквизитыКУстановке1.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Объект.ФиксированныйСчетОрганизации);
	Иначе
		РеквизитыКУстановке1.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Ложь);
	КонецЕсли;
	
	Операции = ОперацииПлатежнойПозиции(Форма);
	ЗаполнитьСвойстваПозиций(Операции.Основная, РеквизитыКУстановке1);
	
	// Встречная позиция
	ВстречнаяОперация = ПараметрыВстречнойОперации(Объект);
	Если ВстречнаяОперация.Есть Тогда
		
		РеквизитыКУстановке2 = Новый Структура;
		
		Если ВстречнаяОперация.ЭтоВГО Тогда
			РеквизитыКУстановке2.Вставить("ДоговорКонтрагента", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорВстречный));
			РеквизитыКУстановке2.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
			РеквизитыКУстановке2.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
		КонецЕсли;
		
		ЗаполнитьСвойстваПозиций(Операции.Встречная, РеквизитыКУстановке2);
		
	КонецЕсли;
	
	ПереоценитьПлатежнуюПозициюНаФорме(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении договора аренды
Процедура УстановитьДоговорАренды(Форма) Экспорт
	
	//НУЖНО УСТАНОВИТЬ В ПЛАТЕЖНОЙ ПОЗИЦИИ ДоговорКонтрагента, ВалютаВзаиморасчетов, ВалютаОплаты, БанковскийСчет
	Объект = Форма.Объект;
	
	Инфо = Форма.РеквизитыДокумента;
	
	РеквизитыКУстановке1 = Новый Структура;
	РеквизитыКУстановке1.Вставить("ДоговорКонтрагента", Объект.ДоговорАренды);
	РеквизитыКУстановке1.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
	РеквизитыКУстановке1.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
	
	// Основная позиция
	Если ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ФормаОплаты) = Перечисления.ФормыОплаты.Безналичная Тогда
		Если Инфо.БанковскийСчет.ЕстьРеквизит Тогда
			РеквизитыКУстановке1.Вставить("БанковскийСчетКасса", Объект.БанковскийСчет);
		КонецЕсли;
	Иначе
		Если Инфо.Касса.ЕстьРеквизит Тогда
			РеквизитыКУстановке1.Вставить("БанковскийСчетКасса", Объект.Касса);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Свойство("ФиксированныйСчетОрганизации") Тогда
		РеквизитыКУстановке1.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Объект.ФиксированныйСчетОрганизации);
	Иначе
		РеквизитыКУстановке1.Вставить("ЗапретИзмененияБанковскогоСчетаКассы", Ложь);
	КонецЕсли;
	
	Операции = ОперацииПлатежнойПозиции(Форма);
	ЗаполнитьСвойстваПозиций(Операции.Основная, РеквизитыКУстановке1);
	
	// Встречная позиция
	ВстречнаяОперация = ПараметрыВстречнойОперации(Объект);
	Если ВстречнаяОперация.Есть Тогда
		
		РеквизитыКУстановке2 = Новый Структура;
		
		Если ВстречнаяОперация.ЭтоВГО Тогда
			РеквизитыКУстановке2.Вставить("ДоговорКонтрагента", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ДоговорВстречный));
			РеквизитыКУстановке2.Вставить("ВалютаВзаиморасчетов", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаДокумента));
			РеквизитыКУстановке2.Вставить("ВалютаОплаты", ЗаявкиНаОперации.РеквизитЗаявки(Объект, Инфо.ВалютаОплаты));
		КонецЕсли;
		
		ЗаполнитьСвойстваПозиций(Операции.Встречная, РеквизитыКУстановке2);
		
	КонецЕсли;
	
	ПереоценитьПлатежнуюПозициюНаФорме(Форма);
	
КонецПроцедуры

// Процедура выполняет действия с платежной позицией, при изменении суммы взаиморасчетов документа-заявки
Процедура УстановитьСуммуДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	Если ВидыОперацийУХВызовСервераПовтИсп.ЭтоКонвертацияВалюты(Объект.ВидОперацииУХ) Тогда
		ПриПересчетеПараметровКонвертации(Форма);
	Иначе
		//
		ОперацииПлатежнойПозиции = ОперацииПлатежнойПозиции(Форма);
		Коэффициенты = Новый Массив;
		Для Каждого П1 Из ОперацииПлатежнойПозиции.Основная Цикл
			Коэффициенты.Добавить(П1.СуммаВзаиморасчетов);
		КонецЦикла;
		
		Если Коэффициенты.Количество() = 1 И Коэффициенты[0] = 0 Тогда
			Коэффициенты[0] = 1;
		КонецЕсли;
		
		НовыеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(Объект.СуммаДокумента, Коэффициенты);
		
		Если НовыеСуммы <> неопределено Тогда
			
			Для Поз = 0 По НовыеСуммы.Количество()-1 Цикл
				
				П1 = ОперацииПлатежнойПозиции.Основная[Поз];
				П1.СуммаВзаиморасчетов = НовыеСуммы[Поз];
				
				Если ЗначениеЗаполнено(П1.ИдентификаторВстречнойПозиции) Тогда
					П2 = ОперацииПлатежнойПозиции.КлючиПоискаВстречной[П1.ИдентификаторВстречнойПозиции];
					П2.СуммаВзаиморасчетов = П1.СуммаВзаиморасчетов;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПереоценитьПлатежнуюПозициюНаФорме(Форма);
	
КонецПроцедуры

Процедура УстановитьПриоритетПлатежа(Форма) Экспорт
	
	Объект = Форма.Объект;
	Приоритет = Объект.Приоритет;
	ОперацииПлатежнойПозиции = ОперацииПлатежнойПозиции(Форма);
	
	Для Каждого П1 Из ОперацииПлатежнойПозиции.Основная Цикл
		П1.Приоритет = Приоритет;
	КонецЦикла;
	
	Для Каждого П2 Из ОперацииПлатежнойПозиции.Встречная Цикл
		П2.Приоритет = Приоритет;
	КонецЦикла;

КонецПроцедуры

Процедура ПриПересчетеПараметровКонвертации(Форма) Экспорт
	
	//
	Объект = форма.Объект;
	
	//
	Позиция = Форма.ПлатежнаяПозиция[0];
	Позиция.СуммаВзаиморасчетов = Объект.СуммаДокумента;
	Позиция.Сумма = Позиция.СуммаВзаиморасчетов;
	Позиция.ВалютаВзаиморасчетов = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.ВалютаДокумента);
	Позиция.ВалютаОплаты = Позиция.ВалютаВзаиморасчетов;
	
	Если Форма.ПлатежнаяПозиция.Количество() > 1 Тогда
		ПозицияОбратная = Форма.ПлатежнаяПозиция[1];
		ПозицияОбратная.СуммаВзаиморасчетов = Объект.СуммаКонвертации;
		ПозицияОбратная.Сумма = ПозицияОбратная.СуммаВзаиморасчетов;
		ПозицияОбратная.ВалютаВзаиморасчетов = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.ВалютаКонвертации);
		ПозицияОбратная.ВалютаОплаты = ПозицияОбратная.ВалютаВзаиморасчетов;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПереоценитьПлатежнуюПозициюНаФорме(Форма) Экспорт
	
	Объект = Форма.Объект;
	ПараметрыКурса = ПлатежныеПозицииКлиентСервер.СтруктураПараметровРасчетаКурса();
	ЗаполнитьЗначенияСвойств(ПараметрыКурса, Объект);
	ПереоценитьПлатежнуюПозицию(Форма.ПлатежнаяПозиция, ПараметрыКурса);
	
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
	
КонецПроцедуры

// Функция переоценивает платежную позицию
// Замена процедуры Обработки.РаботаСЗаявкамиНаОперации.ПереоценитьПлатежнуюПозицию
Процедура ПереоценитьПлатежнуюПозицию(ПлатежнаяПозиция, ПараметрыПлатежнойПозиции) Экспорт 
	
	Для Каждого СтрокаПП Из ПлатежнаяПозиция Цикл
		ПараметрыПлатежнойПозиции.ДатаПлатежа = СтрокаПП.ДатаИсполнения;
		ПараметрыПлатежнойПозиции.ВалютаДокумента = СтрокаПП.ВалютаВзаиморасчетов;
		ПараметрыПлатежнойПозиции.ВалютаОплаты = СтрокаПП.ВалютаОплаты;
		
		СтрокаПП.КурсПлатежа = ВстраиваниеОПКПереопределяемый.ПолучитьАктуальныйКурсПоПараметрам(ПараметрыПлатежнойПозиции);
		СтрокаПП.КратностьПлатежа = 1;
		СтрокаПП.Сумма = СтрокаПП.СуммаВзаиморасчетов * СтрокаПП.КурсПлатежа / СтрокаПП.КратностьПлатежа;
	КонецЦикла;

КонецПроцедуры // ПереоценитьПлатежнуюПозицию()

#КонецОбласти 

Процедура ОбновитьПредставлениеПлатежнойПозиции(Форма) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументПланирования", Форма.Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования КАК ДокументПланирования,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|ГДЕ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования = &ДокументПланирования";
	
	СтруктураПоиска = Новый Структура("ИдентификаторПозиции");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		Строки = Форма.ПлатежнаяПозиция.НайтиСтроки(СтруктураПоиска);
		Для Каждого Строка Из Строки Цикл
			Строка.СостояниеИсполнения = Выборка.СостояниеИсполнения;
		КонецЦикла;
	КонецЦикла;
	
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
	
КонецПроцедуры

// Обработка регламентного задания ПереоценкаЗаявок
Процедура ВыполнитьПереоценкуЗаявок(Знач ДатаПереоценки = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаПереоценки) Тогда
		ДатаПереоценки = НачалоДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаПереоценки",ДатаПереоценки);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РазмещениеЗаявок.КурсПлатежа КАК КурсПлатежа,
	|	РазмещениеЗаявок.КратностьПлатежа КАК КратностьПлатежа,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.СпособОпределенияКурсаПлатежа = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияКурсаПлатежа.КурсНаДатуПлатежа)
	|			ТОГДА ДОБАВИТЬКДАТЕ(РазмещениеЗаявок.ДатаИсполнения, ДЕНЬ, -РазмещениеЗаявок.СдвигДатыФиксацииКурсаПлатежа)
	|		КОГДА РазмещениеЗаявок.СпособОпределенияКурсаПлатежа = ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияКурсаПлатежа.КурсНаФиксированнуюДату)
	|			ТОГДА РазмещениеЗаявок.ДатаФиксацииКурсаПлатежа
	|	КОНЕЦ КАК ДатаКурса,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаОплаты,
	|	РазмещениеЗаявок.КурсПлатежаНеБолее КАК КурсПлатежаНеБолее,
	|	РазмещениеЗаявок.КурсПлатежаНеМенее КАК КурсПлатежаНеМенее,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.КурсПлатежаНеМенееВВалютеОплаты = 0
	|			ТОГДА 1
	|		ИНАЧЕ РазмещениеЗаявок.КурсПлатежаНеМенееВВалютеОплаты
	|	КОНЕЦ КАК КурсПлатежаНеМенееВВалютеОплаты,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.КурсПлатежаНеБолееВВалютеОплаты = 0
	|			ТОГДА 1
	|		ИНАЧЕ РазмещениеЗаявок.КурсПлатежаНеБолееВВалютеОплаты
	|	КОНЕЦ КАК КурсПлатежаНеБолееВВалютеОплаты
	|ПОМЕСТИТЬ ВТ_ОперацииКПереоценке
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|ГДЕ
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов <> РазмещениеЗаявок.ВалютаОплаты
	|	И РазмещениеЗаявок.ДатаИсполнения >= &ДатаПереоценки
	|	И РазмещениеЗаявок.СпособОпределенияКурсаПлатежа <> ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс)
	|
	|ДЛЯ ИЗМЕНЕНИЯ
	|	РегистрСведений.РазмещениеЗаявок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВалютаВзаиморасчетов,
	|	ДатаКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурсаВзаиморасчеты,
	|	ВТ_ОперацииКПереоценке.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	ВТ_ОперацииКПереоценке.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОперацииКПереоценке.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ВТ_ОперацииКПереоценке.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке.КурсПлатежа КАК КурсПлатежа,
	|	ВТ_ОперацииКПереоценке.КратностьПлатежа КАК КратностьПлатежа,
	|	ВТ_ОперацииКПереоценке.ДатаКурса КАК ДатаКурса,
	|	ВТ_ОперацииКПереоценке.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке.ВалютаОплаты КАК ВалютаОплаты,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеБолее КАК КурсПлатежаНеБолее,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеМенее КАК КурсПлатежаНеМенее,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеМенееВВалютеОплаты КАК КурсПлатежаНеМенееВВалютеОплаты,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеБолееВВалютеОплаты КАК КурсПлатежаНеБолееВВалютеОплаты
	|ПОМЕСТИТЬ ВТ_ОперацииКПереоценке1
	|ИЗ
	|	ВТ_ОперацииКПереоценке КАК ВТ_ОперацииКПереоценке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_ОперацииКПереоценке.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|			И ВТ_ОперацииКПереоценке.ДатаКурса >= КурсыВалют.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОперацииКПереоценке.ЗаявкаНаОперацию,
	|	ВТ_ОперацииКПереоценке.ПриходРасход,
	|	ВТ_ОперацииКПереоценке.ИдентификаторПозиции,
	|	ВТ_ОперацииКПереоценке.СуммаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке.КурсПлатежа,
	|	ВТ_ОперацииКПереоценке.КратностьПлатежа,
	|	ВТ_ОперацииКПереоценке.ДатаКурса,
	|	ВТ_ОперацииКПереоценке.ВалютаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке.ВалютаОплаты,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеБолее,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеМенее,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеМенееВВалютеОплаты,
	|	ВТ_ОперацииКПереоценке.КурсПлатежаНеБолееВВалютеОплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВалютаОплаты,
	|	ДатаКурса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурсаОплата,
	|	ВТ_ОперацииКПереоценке1.ДатаКурсаВзаиморасчеты КАК ДатаКурсаВзаиморасчеты,
	|	ВТ_ОперацииКПереоценке1.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	ВТ_ОперацииКПереоценке1.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОперацииКПереоценке1.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ВТ_ОперацииКПереоценке1.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежа КАК КурсПлатежа,
	|	ВТ_ОперацииКПереоценке1.КратностьПлатежа КАК КратностьПлатежа,
	|	ВТ_ОперацииКПереоценке1.ДатаКурса КАК ДатаКурса,
	|	ВТ_ОперацииКПереоценке1.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке1.ВалютаОплаты КАК ВалютаОплаты,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеБолее КАК КурсПлатежаНеБолее,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеМенее КАК КурсПлатежаНеМенее,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеМенееВВалютеОплаты КАК КурсПлатежаНеМенееВВалютеОплаты,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеБолееВВалютеОплаты КАК КурсПлатежаНеБолееВВалютеОплаты
	|ПОМЕСТИТЬ ВТ_ОперацииСДатамиКурсов
	|ИЗ
	|	ВТ_ОперацииКПереоценке1 КАК ВТ_ОперацииКПереоценке1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО ВТ_ОперацииКПереоценке1.ВалютаОплаты = КурсыВалют.Валюта
	|			И ВТ_ОперацииКПереоценке1.ДатаКурса >= КурсыВалют.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОперацииКПереоценке1.ДатаКурсаВзаиморасчеты,
	|	ВТ_ОперацииКПереоценке1.ЗаявкаНаОперацию,
	|	ВТ_ОперацииКПереоценке1.ПриходРасход,
	|	ВТ_ОперацииКПереоценке1.ИдентификаторПозиции,
	|	ВТ_ОперацииКПереоценке1.СуммаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежа,
	|	ВТ_ОперацииКПереоценке1.КратностьПлатежа,
	|	ВТ_ОперацииКПереоценке1.ДатаКурса,
	|	ВТ_ОперацииКПереоценке1.ВалютаВзаиморасчетов,
	|	ВТ_ОперацииКПереоценке1.ВалютаОплаты,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеБолее,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеМенее,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеМенееВВалютеОплаты,
	|	ВТ_ОперацииКПереоценке1.КурсПлатежаНеБолееВВалютеОплаты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДатаКурсаВзаиморасчеты,
	|	ДатаКурсаОплата,
	|	ВалютаВзаиморасчетов,
	|	ВалютаОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ЕСТЬNULL(КурсВалютыВзаиморасчетов.Курс * КурсВалютыОплаты.Кратность, 0) / ЕСТЬNULL(КурсВалютыВзаиморасчетов.Кратность * КурсВалютыОплаты.Курс, 1) КАК ЧИСЛО(10, 4)) КАК КурсПлатежа,
	|	1 КАК КратностьПлатежа,
	|	ВТ_ОперацииСДатамиКурсов.ДатаКурсаОплата КАК ДатаКурсаОплата,
	|	ВТ_ОперацииСДатамиКурсов.ДатаКурсаВзаиморасчеты КАК ДатаКурсаВзаиморасчеты,
	|	ВТ_ОперацииСДатамиКурсов.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	ВТ_ОперацииСДатамиКурсов.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОперацииСДатамиКурсов.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ВТ_ОперацииСДатамиКурсов.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	ВТ_ОперацииСДатамиКурсов.ДатаКурса КАК ДатаКурса,
	|	ВТ_ОперацииСДатамиКурсов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ВТ_ОперацииСДатамиКурсов.ВалютаОплаты КАК ВалютаОплаты,
	|	ВТ_ОперацииСДатамиКурсов.КурсПлатежаНеБолее КАК КурсПлатежаНеБолее,
	|	ВТ_ОперацииСДатамиКурсов.КурсПлатежаНеМенее КАК КурсПлатежаНеМенее,
	|	ВТ_ОперацииСДатамиКурсов.КурсПлатежаНеМенееВВалютеОплаты КАК КурсПлатежаНеМенееВВалютеОплаты,
	|	ВТ_ОперацииСДатамиКурсов.КурсПлатежаНеБолееВВалютеОплаты КАК КурсПлатежаНеБолееВВалютеОплаты
	|ПОМЕСТИТЬ ВТ_Курсы
	|ИЗ
	|	ВТ_ОперацииСДатамиКурсов КАК ВТ_ОперацииСДатамиКурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсВалютыВзаиморасчетов
	|		ПО ВТ_ОперацииСДатамиКурсов.ДатаКурсаВзаиморасчеты = КурсВалютыВзаиморасчетов.Период
	|			И ВТ_ОперацииСДатамиКурсов.ВалютаВзаиморасчетов = КурсВалютыВзаиморасчетов.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсВалютыОплаты
	|		ПО ВТ_ОперацииСДатамиКурсов.ДатаКурсаОплата = КурсВалютыОплаты.Период
	|			И ВТ_ОперацииСДатамиКурсов.ВалютаОплаты = КурсВалютыОплаты.Валюта
	|ГДЕ
	|	(ВЫРАЗИТЬ(ЕСТЬNULL(КурсВалютыВзаиморасчетов.Курс * КурсВалютыОплаты.Кратность, 0) / ЕСТЬNULL(КурсВалютыВзаиморасчетов.Кратность * КурсВалютыОплаты.Курс, 1) КАК ЧИСЛО(10, 4))) <> ВТ_ОперацииСДатамиКурсов.КурсПлатежа / ВТ_ОперацииСДатамиКурсов.КратностьПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Курсы.СуммаВзаиморасчетов * ВЫБОР
	|		КОГДА ВТ_Курсы.КурсПлатежаНеБолее <> 0
	|				И ВТ_Курсы.КурсПлатежа > ВТ_Курсы.КурсПлатежаНеБолее / ВТ_Курсы.КурсПлатежаНеБолееВВалютеОплаты
	|			ТОГДА ВТ_Курсы.КурсПлатежаНеБолее / ВТ_Курсы.КурсПлатежаНеБолееВВалютеОплаты
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Курсы.КурсПлатежа < ВТ_Курсы.КурсПлатежаНеМенее / ВТ_Курсы.КурсПлатежаНеМенееВВалютеОплаты
	|					ТОГДА ВТ_Курсы.КурсПлатежаНеМенее / ВТ_Курсы.КурсПлатежаНеМенееВВалютеОплаты
	|				ИНАЧЕ ВТ_Курсы.КурсПлатежа
	|			КОНЕЦ
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ВТ_Курсы.КурсПлатежаНеБолее <> 0
	|				И ВТ_Курсы.КурсПлатежа > ВТ_Курсы.КурсПлатежаНеБолее
	|			ТОГДА ВТ_Курсы.КурсПлатежаНеБолее
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_Курсы.КурсПлатежа < ВТ_Курсы.КурсПлатежаНеМенее
	|					ТОГДА ВТ_Курсы.КурсПлатежаНеМенее
	|				ИНАЧЕ ВТ_Курсы.КурсПлатежа
	|			КОНЕЦ
	|	КОНЕЦ КАК КурсПлатежа,
	|	ВТ_Курсы.КратностьПлатежа КАК КратностьПлатежа,
	|	ВТ_Курсы.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	ВТ_Курсы.ПриходРасход КАК ПриходРасход,
	|	ВТ_Курсы.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ИЗ
	|	ВТ_Курсы КАК ВТ_Курсы";
	
	Запрос.Текст = ТекстЗапроса;
	
	ИменаИзмерений = "ЗаявкаНаОперацию, ПриходРасход, ИдентификаторПозиции";
	ИменаРесурсов = "Сумма, КурсПлатежа, КратностьПлатежа";
	
	НачатьТранзакцию();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			МЗ = РегистрыСведений.РазмещениеЗаявок.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка, ИменаИзмерений);
			МЗ.Прочитать();
			ЗаполнитьЗначенияСвойств(МЗ, Выборка, ИменаРесурсов);
			МЗ.Записать();
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ШаблонСообщения = Нстр("ru = 'Ошибка записи платежной позиции при переоценке. Заявка на операцию: %1; Приход/расход: %2; Идентификатор позиции: %3'");
		Если ЗначениеЗаполнено(ШаблонСообщения) тогда
			СообщениеОбОшибке = СтрШаблон(ШаблонСообщения, МЗ.ЗаявкаНаОперацию, МЗ.ПриходРасход, МЗ.ИдентификаторПозиции);
			ВызватьИсключение СообщениеОбОшибке;
		Иначе
			ВызватьИсключение Нстр("ru = 'Ошибка записи платежной позиции при переоценке'");
		КонецЕсли;
				
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Заполняет таблицу остатками денежных средств к выплате по заявкам
//
// Параметры:
//    ДанныеОтбора - Структура - содержит значения отбора заявок
//    ТабличнаяЧасть - ДанныеФормыКоллекция - заполняемая таблица.
//
Процедура ЗаполнитьПоОстаткамПлатежныхПозиций(ДанныеОтбора, ТабличнаяЧасть) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	РазмещениеЗаявок.ДатаИсполнения КАК ДатаИсполнения,
	|	РазмещениеЗаявок.Сумма КАК Сумма,
	|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаДенежныхСредств,
	|	РазмещениеЗаявок.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.ФормаОплаты КАК ФормаОплаты,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ИСТИНА КАК Первоначальные,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ПОМЕСТИТЬ ПлатежныеПозицииДокумента
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	РазмещениеЗаявок.Проведен = ИСТИНА
	|	И РазмещениеЗаявок.ПриходРасход = &ПриходРасход
	|	И РазмещениеЗаявок.ИдентификаторПозиции В(&ПервоначальныеИдентификаторыПозиций)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ДатаИсполнения,
	|	РазмещениеЗаявок.Сумма,
	|	РазмещениеЗаявок.ВалютаОплаты,
	|	РазмещениеЗаявок.СуммаВзаиморасчетов,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов,
	|	РазмещениеЗаявок.Организация,
	|	РазмещениеЗаявок.Контрагент,
	|	РазмещениеЗаявок.ФормаОплаты,
	|	РазмещениеЗаявок.ПриходРасход,
	|	РазмещениеЗаявок.ИдентификаторПозиции,
	|	ЛОЖЬ,
	|	РазмещениеЗаявок.БанковскийСчетКасса,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|			И (СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана))
	|ГДЕ
	|	РазмещениеЗаявок.Проведен = ИСТИНА
	|	И РазмещениеЗаявок.ПриходРасход = &ПриходРасход
	|	И РазмещениеЗаявок.ФормаОплаты = &ФормаОплаты
	|	И РазмещениеЗаявок.ВалютаОплаты = &Валюта
	|	И РазмещениеЗаявок.Организация = &Организация
	|	И РазмещениеЗаявок.Контрагент = &Получатель
	|	И НЕ РазмещениеЗаявок.ИдентификаторПозиции В (&ПервоначальныеИдентификаторыПозиций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежныеПозицииДокумента.ДокументПланирования.Номер КАК НомерЗаявки,
	|	ПлатежныеПозицииДокумента.ДокументПланирования.Дата КАК ДатаЗаявки,
	|	ПлатежныеПозицииДокумента.ДокументПланирования КАК ДокументПланирования,
	|	ПлатежныеПозицииДокумента.ДатаИсполнения КАК ДатаИсполнения,
	|	ПлатежныеПозицииДокумента.Сумма КАК СуммаВВалюте,
	|	ПлатежныеПозицииДокумента.ВалютаДенежныхСредств КАК ВалютаЗаявки,
	|	ПлатежныеПозицииДокумента.СуммаВзаиморасчетов КАК Сумма,
	|	ПлатежныеПозицииДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|	ПлатежныеПозицииДокумента.Организация КАК Организация,
	|	ПлатежныеПозицииДокумента.Контрагент КАК Контрагент,
	|	ПлатежныеПозицииДокумента.ФормаОплаты КАК ФормаОплаты,
	|	ПлатежныеПозицииДокумента.ПриходРасход КАК ПриходРасход,
	|	ПлатежныеПозицииДокумента.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ПлатежныеПозицииДокумента.Первоначальные КАК Первоначальные,
	|	ПлатежныеПозицииДокумента.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	ПлатежныеПозицииДокумента.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	ПлатежныеПозицииДокумента КАК ПлатежныеПозицииДокумента";
	
	Запрос.УстановитьПараметр("ТекущаяДатаСеанса", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("Валюта", ДанныеОтбора.Валюта);
	Запрос.УстановитьПараметр("Организация", ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("Контрагент", ДанныеОтбора.Организация);
	Запрос.УстановитьПараметр("ПриходРасход", ДанныеОтбора.ПриходРасход);
	Запрос.УстановитьПараметр("ФормаОплаты", ДанныеОтбора.ФормаОплаты);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", ДанныеОтбора.ХозяйственнаяОперация);
	Запрос.УстановитьПараметр("ПервоначальныеИдентификаторыПозиций", ДанныеОтбора.ПервоначальныеИдентификаторыПозиций);
	
	БанковскиеСчетаКассы = Новый Массив;
	БанковскиеСчетаКассы.Добавить(ДанныеОтбора.БанковскийСчетКасса);
	БанковскиеСчетаКассы.Добавить(Неопределено);
	Запрос.УстановитьПараметр("БанковскиеСчетаКассы", БанковскиеСчетаКассы);
	
	Получатель = ПлатежныеПозицииПереопределяемый.ОпределитьПолучателяПоДаннымОтбора(ДанныеОтбора);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	
	ТабличнаяЧасть.Очистить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		НоваяСтрока.ПредставлениеЗаявки = СтрШаблон(" %1 " + НСтр("ru='от %2'"), Выборка.НомерЗаявки, Формат(Выборка.ДатаЗаявки, "ДЛФ=D"));
	КонецЦикла;
	
КонецПроцедуры

Функция ПереместитьПозицию(Знач ИдентификаторПозиции, Знач ЦелеваяДата = Неопределено, Знач ЦелевойСчет = Неопределено) Экспорт
	
	Если ЦелеваяДата = Неопределено И ЦелевойСчет = Неопределено Тогда
		// Ничего менять не надо, все прекрасно.
		Возврат Истина;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПозиции.Установить(ИдентификаторПозиции);
	НаборЗаписей.Прочитать();
	
	Если НЕ НаборЗаписей.Количество() = 1 Тогда
		// Такой записи нет, или есть дубли.
		Возврат Ложь;
	КонецЕсли;
	
	ТекущаяЗапись = НаборЗаписей[0];
	
	ДатаИсполненияИсходная = ТекущаяЗапись.ДатаИсполнения;
	
	Если ТипЗнч(ЦелеваяДата) = Тип("Число") Тогда
		ТекущаяЗапись.ДатаИсполнения = ТекущаяЗапись.ДатаИсполнения + ЦелеваяДата * 86400;
	ИначеЕсли ТипЗнч(ЦелеваяДата) = Тип("Дата") Тогда
		ТекущаяЗапись.ДатаИсполнения = ЦелеваяДата
	КонецЕсли;
	
	Если ЦелевойСчет <> Неопределено Тогда
		ТекущаяЗапись.БанковскийСчетКасса = ЦелевойСчет;
	КонецЕсли;
		
	НаборЗаписей.Записать();
	
	Если ДатаИсполненияИсходная <> ТекущаяЗапись.ДатаИсполнения Тогда
		
		// Оповестим инициатора об изменении даты заявки.
		СобытиеОповещения = Справочники.ВидыСобытийОповещений.КорректировкаРазмещения;
		
		//
		РеквизитыЗаявки = ПолучитьНомерДатуВалютуОплатыЗаявки(ТекущаяЗапись.ЗаявкаНаОперацию);
		ДопПараметры = Новый Структура;
		ТекстСписокПозиций = "";
		Если ЗначениеЗаполнено(ТекущаяЗапись.ЗаявкаНаОперацию) Тогда
			ДопПараметры.Вставить("КоличествоПозиций", 1);
			ТекстСписокПозиций = ТекстСписокПозиций + "<ul>";
			ТекстСписокПозиций = ТекстСписокПозиций + Строка("<li>");
			ТекстСписокПозиций = ТекстСписокПозиций + Строка(ТекущаяЗапись.Сумма);
			ТекстСписокПозиций = ТекстСписокПозиций + Строка(" ");
			ТекстСписокПозиций = ТекстСписокПозиций + Строка(РеквизитыЗаявки.ВалютаОплаты);
			ТекстСписокПозиций = ТекстСписокПозиций + Строка(НСтр("ru = ' в дату '"));
			ТекстСписокПозиций = ТекстСписокПозиций + Строка(Формат(ТекущаяЗапись.ДатаИсполнения, "ДЛФ=D"));
			ТекстСписокПозиций = ТекстСписокПозиций + "</ul>";
		Иначе
			ДопПараметры.Вставить("КоличествоПозиций", 0);
		КонецЕсли;
		ДопПараметры.Вставить("СписокПозиций", ТекстСписокПозиций);
		
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения, , ТекущаяЗапись.ЗаявкаНаОперацию, , ДопПараметры);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Сохраняет платежную позицию в доп.свойства записываемого объекта. Вызывается из события ПередЗаписьюНаСервере формы документа заявки
Процедура ПлатежнуюПозициюВДопСвойства(ТекущийОбъект, ПлатежнаяПозиция) Экспорт
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПлатежнаяПозиция", ПлатежнаяПозиция);
КонецПроцедуры

//перенесена из ОМ.УправлениеЗаявкамиНаОперацииУХ
Функция ВернутьПозициюНаИсполнение(Знач ИдентификаторПозиции, Знач ЦелеваяДата = Неопределено, Знач ЦелевойСчет = Неопределено, Знач ЭтоВозвратИзРеестра = Ложь) Экспорт
	
	НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИдентификаторПозиции.Установить(ИдентификаторПозиции);
	НаборЗаписей.Прочитать();
	
	Если НЕ НаборЗаписей.Количество() = 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЦелеваяДата<> Неопределено И ЦелевойСчет <> Неопределено Тогда
		
		Если ТипЗнч(ЦелеваяДата) = Тип("Число") Тогда
			НаборЗаписей[0].ДатаИсполнения = НаборЗаписей[0].ДатаИсполнения + ЦелеваяДата * 86400;
		ИначеЕсли ТипЗнч(ЦелеваяДата) = Тип("Дата") Тогда
			НаборЗаписей[0].ДатаИсполнения = ЦелеваяДата
		КонецЕсли;
		
		Если ЦелевойСчет <> Неопределено Тогда
			НаборЗаписей[0].БанковскийСчетКасса = ЦелевойСчет;
		КонецЕсли;
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
	УстановитьСостояниеИсполненияДокумента(НаборЗаписей[0].ЗаявкаНаОперацию, ИдентификаторПозиции, Перечисления.СостоянияИсполненияЗаявки.НеОбработана);
	
	// Оповестим заинтересованные лица
	Если ЭтоВозвратИзРеестра Тогда
		ТекстДействия = НСтр("ru = 'исключена из реестра платежей'");
	Иначе
		ТекстДействия = НСтр("ru = 'возвращена из списка отложенных'");
	КонецЕсли;
	
	РеквизитыЗаявки = ПолучитьНомерДатуВалютуОплатыЗаявки(НаборЗаписей[0].ЗаявкаНаОперацию);
	
	ТекстОповещения = СтрШаблон(НСтр("ru = '<P>Позиция заявки %1 от %2 %3</P>
								|<P><br></P>
								|<P> Документ: %4</P>
								|<P><br></P>
								|<P> Сумма к оплате: %5 %6</P>
								|<P><br></P>
								|<P> Дата оплаты: %7</P>'"),
								РеквизитыЗаявки.Номер,
								Формат(РеквизитыЗаявки.Дата, "ДЛФ=D"), 
								ТекстДействия,
								НаборЗаписей[0].ЗаявкаНаОперацию,
								НаборЗаписей[0].Сумма,
								РеквизитыЗаявки.ВалютаОплаты,
								Формат(НаборЗаписей[0].ДатаИсполнения, "ДЛФ=D"));
	
	Если ЭтоВозвратИзРеестра Тогда
		ВстраиваниеОПКПереопределяемый.ОповеститьПользователейОбИсключенииИзРеестра(ТекстОповещения, НаборЗаписей[0].ЗаявкаНаОперацию);
	Иначе
		ВстраиваниеОПКПереопределяемый.ОповеститьПользователейОбИсключенииИзСтопЛиста(ТекстОповещения, НаборЗаписей[0].ЗаявкаНаОперацию);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ПоДокументуЕстьИсполненныеИлиНаходящиесяНаИсполненииПозиции(ДокументСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения В (ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей), ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении), ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Исполнена))
	|	И РазмещениеЗаявок.ЗаявкаНаОперацию = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// В параметре Параметры могут быть переданы поля отбора ФормаОплаты и ПриходРасход
Процедура ПереопределитьПолучаемуюФормуДокументаДДС(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы <> "ФормаОбъекта" ИЛИ НЕ Параметры.Свойство("Основание") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Метаданные.ОпределяемыеТипы.ДокументыПлатежнойПозиции.Тип.СодержитТип(ТипЗнч(параметры.Основание)) Тогда
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	ПриходРасход = неопределено;
	ФормаОплаты = неопределено;
	
	Параметры.Свойство("ФормаОплаты", ФормаОплаты);
	Параметры.Свойство("ПриходРасход", ПриходРасход);
	БезОтбораПоФормеОплатыИНаправлению  = НЕ Значениезаполнено(ФормаОплаты) И НЕ Значениезаполнено(ПриходРасход);
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ИдентификаторПозиции
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)
	|	И РазмещениеЗаявок.ЗаявкаНаОперацию = &ЗаявкаНаОперацию
	|	И РазмещениеЗаявок.ПриходРасход = &ПриходРасход
	|	И РазмещениеЗаявок.ФормаОплаты = &ФормаОплаты";
	
	Запрос.УстановитьПараметр("ЗаявкаНаОперацию", Параметры.Основание);
	Если БезОтбораПоФормеОплатыИНаправлению = Истина Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РазмещениеЗаявок.ПриходРасход = &ПриходРасход", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РазмещениеЗаявок.ФормаОплаты = &ФормаОплаты", "");
	Иначе
		Запрос.УстановитьПараметр("ПриходРасход",     ПриходРасход);
		Запрос.УстановитьПараметр("ФормаОплаты",      ФормаОплаты);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	КоличествоПозиций = Выборка.Количество();
	Если КоличествоПозиций = 0 Тогда
		
		// На основании данной заявки невозможно создать выбранный документ.
		ШаблонТекстаИсключения = НСтр("ru = 'Невозможно сформировать документ %1 на основании заявки %2.
                                      |Возможны следующие причины:
                                      |а) Реквизиты заявки не соответствуют виду формируемого документа.
                                      |б) Заявка не имеет позиций, ожидающих исполнения.'");
		ВызватьИсключение СтрШаблон(ШаблонТекстаИсключения, Источник, Параметры.Основание);
		
	ИначеЕсли КоличествоПозиций = 1 Тогда
		Выборка.Следующий();
		Параметры.Основание = Выборка.ИдентификаторПозиции;
		ВыбраннаяФорма = "ФормаДокумента";
	Иначе
		// Запросим пользователя, какая именно позиция заявки нужна.
		Параметры.Вставить("ВводНаОсновании", Истина);
		СтруктураОтбор = Новый Структура("ЗаявкаНаОперацию,ПриходРасход", Параметры.Основание, Перечисления.ВидыДвиженийПриходРасход.Расход);
		Параметры.Вставить("Отбор", СтруктураОтбор);
		ИмяОбъектаМетаданных = Источник.ПустаяСсылка().Метаданные().ПолноеИмя();
		Параметры.Вставить("ИмяОбъектаМетаданныхСоздаваемогоДокумента", ИмяОбъектаМетаданных);
		ВыбраннаяФорма = Метаданные.Обработки.ПлатежныеПозиции.Формы.ВыборПлатежнойПозицииДокумента;
	КонецЕсли;
	
КонецПроцедуры

#Область УправленияСостояниемИсполнения

Функция СостояниеИсполненияДокумента(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних(, ДокументПланирования = &Ссылка) КАК СостоянияИсполненияДокументовПланированияСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СостояниеИсполнения;
	Иначе
		Возврат Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	КонецЕсли;
	
КонецФункции

Функция УстановитьСостояниеИсполненияДокумента(Знач ДокументПланирования, Знач ИдентификаторПозиции, Знач Состояние, Знач Период = Неопределено, Знач Автор = Неопределено, Документ = неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДокументПланирования) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Автор = Неопределено Тогда 
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияИсполненияДокументовПланирования");
		ЭлементБлокировки.УстановитьЗначение("ДокументПланирования", ДокументПланирования);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПозиции", ИдентификаторПозиции);
		Блокировка.Заблокировать();
		
		//		
		МЗ						= РегистрыСведений.СостоянияИсполненияДокументовПланирования.СоздатьМенеджерЗаписи();
		МЗ.СостояниеИсполнения	= Состояние;
		МЗ.Период				= Период;
		МЗ.Автор				= Автор;
		МЗ.ДокументПланирования	= ДокументПланирования;
		МЗ.ИдентификаторПозиции = ИдентификаторПозиции;
		МЗ.ДокументИзменившийСостояние = Документ;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при установке состояния исполнения документа планирования ""%1"" по причине: %2'"),
				ДокументПланирования,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка состояния исполнения документа планирования'"),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	СобытиеОповещения = ВидСобытияОповещенияПоСостоянию(Состояние);
	Если СобытиеОповещения <> Неопределено Тогда
		// Получим данные позиции
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РазмещениеЗаявок.ЗаявкаНаОперацию,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Номер КАК Номер,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Дата КАК Дата,
		|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаОплаты,
		|	РазмещениеЗаявок.ДатаИсполнения,
		|	РазмещениеЗаявок.Сумма
		|ИЗ
		|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
		|ГДЕ
		|	РазмещениеЗаявок.ИдентификаторПозиции = &ИдентификаторПозиции";
		Запрос.УстановитьПараметр("ИдентификаторПозиции", ИдентификаторПозиции);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ТекстОповещения = ТекстОповещенияОбИзмененииСостояния(Выборка, Состояние);
			
			//ТекстОповещения = СтрШаблон(НСтр("ru = '<P>Позиция заявки %1 от %2 переведена в состояние <b>%3</b></P>
			//							|<P> Документ: <a href=%4>%5</a></P>
			//							|<P> Сумма к оплате: %6 %7</P>
			//							|<P> Дата оплаты: %8</P>'"),
			//							Выборка.Номер,
			//							Формат(Выборка.Дата, "ДФ=dd.MM.yy"),
			//							Состояние,
			//							СтрШаблон("'%1'", ПолучитьНавигационнуюСсылку(Выборка.ЗаявкаНаОперацию)),
			//							Выборка.ЗаявкаНаОперацию,
			//							Выборка.Сумма,
			//							Выборка.ВалютаОплаты,
			//							Формат(Выборка.ДатаИсполнения, "ДФ=dd.MM.yy"));

			ВстраиваниеОПКПереопределяемый.ОповеститьПользователей(СобытиеОповещения, ТекстОповещения, ДокументПланирования);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСостояниеИсполненияДокументаСписок(Знач ТаблицаДокументовПланирования, Знач Состояние, Знач Период = Неопределено, Знач Автор = Неопределено, Документ = неопределено) Экспорт
	
	Если ТаблицаДокументовПланирования.Количество() = 0 тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Автор = Неопределено Тогда 
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументПланирования = неопределено;
		
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияИсполненияДокументовПланирования");
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовПланирования;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументПланирования", "ДокументПланирования");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторПозиции", "ИдентификаторПозиции");
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаДокументаПланирования Из ТаблицаДокументовПланирования Цикл
			
			ДокументПланирования = СтрокаДокументаПланирования.ДокументПланирования;
						
			МЗ						= РегистрыСведений.СостоянияИсполненияДокументовПланирования.СоздатьМенеджерЗаписи();
			МЗ.СостояниеИсполнения	= Состояние;
			МЗ.Период				= Период;
			МЗ.Автор				= Автор;
			МЗ.ДокументПланирования	= ДокументПланирования;
			МЗ.ИдентификаторПозиции = СтрокаДокументаПланирования.ИдентификаторПозиции;
			МЗ.ДокументИзменившийСостояние = Документ;
			МЗ.Записать();
	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при установке состояния исполнения документа планирования ""%1"" по причине: %2'"),
				ДокументПланирования,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка состояния исполнения документа планирования'"),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	СобытиеОповещения = ВидСобытияОповещенияПоСостоянию(Состояние);
	Если СобытиеОповещения <> Неопределено Тогда
		// Получим данные позиции
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Номер КАК Номер,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Дата КАК Дата,
		|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаОплаты,
		|	РазмещениеЗаявок.ДатаИсполнения КАК ДатаИсполнения,
		|	РазмещениеЗаявок.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
		|ГДЕ
		|	РазмещениеЗаявок.ИдентификаторПозиции В(&ИдентификаторыПозиций)";
		Запрос.УстановитьПараметр("ИдентификаторыПозиций", ТаблицаДокументовПланирования.ВыгрузитьКолонку("ИдентификаторПозиции"));
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ТекстОповещения = ТекстОповещенияОбИзмененииСостояния(Выборка, Состояние);
			
			//ТекстОповещения = СтрШаблон(НСтр("ru = '<P>Позиция заявки %1 от %2 переведена в состояние <b>%3</b></P>
			//							|<P> Документ: <a href=%4>%5</a></P>
			//							|<P> Сумма к оплате: %6 %7</P>
			//							|<P> Дата оплаты: %8</P>'"),
			//							Выборка.Номер,
			//							Формат(Выборка.Дата, "ДФ=dd.MM.yy"),
			//							Состояние,
			//							СтрШаблон("'%1'", ПолучитьНавигационнуюСсылку(Выборка.ЗаявкаНаОперацию)),
			//							Выборка.ЗаявкаНаОперацию,
			//							Выборка.Сумма,
			//							Выборка.ВалютаОплаты,
			//							Формат(Выборка.ДатаИсполнения, "ДФ=dd.MM.yy"));

			ВстраиваниеОПКПереопределяемый.ОповеститьПользователей(СобытиеОповещения, ТекстОповещения, ДокументПланирования);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция УстановитьПредыдущееСостояниеИсполнения(Знач ДокументПланирования, Знач ИдентификаторПозиции, Знач ТекущееСостояние, Знач Период = Неопределено, Знач Автор = Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияИсполненияДокументовПланирования.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования КАК СостоянияИсполненияДокументовПланирования
	|ГДЕ
	|	СостоянияИсполненияДокументовПланирования.ДокументПланирования = &ДокументПланирования
	|	И СостоянияИсполненияДокументовПланирования.ИдентификаторПозиции = &ИдентификаторПозиции
	|	И СостоянияИсполненияДокументовПланирования.СостояниеИсполнения <> &ТекущееСостояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияИсполненияДокументовПланирования.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументПланирования);
	Запрос.УстановитьПараметр("ИдентификаторПозиции",ИдентификаторПозиции);
	Запрос.УстановитьПараметр("ТекущееСостояние",ТекущееСостояние);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ПредыдущееСостояние=Результат.СостояниеИсполнения;
	Иначе
		ПредыдущееСостояние=Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	КонецЕсли;
	
	Возврат УстановитьСостояниеИсполненияДокумента(ДокументПланирования, ИдентификаторПозиции, ПредыдущееСостояние, Период, Автор);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОбратныйПриходРасход(ПриходРасход) экспорт
	
	Если ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		Возврат Перечисления.ВидыДвиженийПриходРасход.Расход;
	Иначе
		Возврат Перечисления.ВидыДвиженийПриходРасход.Приход;
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСвойстваПозиций(Позиции, СтруктураСвойств)
	
	Для Каждого П Из Позиции Цикл
		ЗаполнитьЗначенияСвойств(П, СтруктураСвойств);
	КонецЦикла;
	
КонецПроцедуры

// Функция получает банковский счет/кассу для документа
// неполный аналог ЗаявкиНаОперацииФормы.УстановитьБанковскийСчетКассу
Функция ПолучитьБанковскийСчетКассу(Объект, РеквизитыЗаявки)
	
	Результат = Новый Структура("БанковскийСчетКасса, ЗапретИзмененияБанковскогоСчетаКассы", неопределено, Ложь);
	
	// Получаем нужные реквизиты заявки
	ФормаОплаты  = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты);
	Организация  = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.Организация);
	ВалютаОплаты = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты);
	Договор      = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента);
	
	//
	ЭтоБезналичныйРасчет = (ФормаОплаты = Перечисления.ФормыОплаты.Безналичная);
	
	Результат.БанковскийСчетКасса = ?(ЭтоБезналичныйРасчет,
		КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации(), 
		КэшируемыеПроцедурыОПК.ПустаяКассаОрганизации());
		
	Если ЭтоБезналичныйРасчет Тогда
		Если РеквизитыЗаявки.ОснованиеОбязательства.ЕстьРеквизит Тогда
			ОснованиеОбязательства = ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ОснованиеОбязательства);
			Если ЗначениеЗаполнено(ОснованиеОбязательства) Тогда
				БСКОснования = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетКассаОснованияОбязательства(ОснованиеОбязательства);
				Если ЗначениеЗаполнено(БСКОснования) Тогда
					Результат.БанковскийСчетКасса = БСКОснования;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Результат.БанковскийСчетКасса) И ЗначениеЗаполнено(Договор) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "БанковскийСчет, ФиксированныйСчетОрганизации");
			Результат.БанковскийСчетКасса = РеквизитыДоговора.БанковскийСчет;
			Результат.ЗапретИзмененияБанковскогоСчетаКассы = РеквизитыДоговора.ФиксированныйСчетОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат.БанковскийСчетКасса) Тогда
		Результат.БанковскийСчетКасса = УправлениеДенежнымиСредствамиУХ.ПолучитьБанковскийСчетПоУмолчанию(Организация, ВалютаОплаты, ФормаОплаты);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьНомерДатуВалютуОплатыЗаявки(ЗаявкаСсылка)
	
	ОписаниеРеквизитовЗаявки = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(ЗаявкаСсылка));
	ТребуемыеРеквизиты = Новый Структура("Номер, Дата");
	ТребуемыеРеквизиты.Вставить("ВалютаОплаты", ОписаниеРеквизитовЗаявки.ВалютаОплаты.ИмяРеквизита);
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗаявкаСсылка, ТребуемыеРеквизиты);
	
КонецФункции

// 
Процедура РаспределитьРасшифровкуНаПозиции(ТабРасшифровка, ППДляРаспределения, РазделенныеДвижения)
	
	КоличествоСтрокРасшифровки = ТабРасшифровка.Количество();
	БазаРаспределения = ТабРасшифровка.Итог("Сумма");
	ТабРасшифровка.ЗаполнитьЗначения(0, "Распределено, РаспределеноНДС");
	
	КоличествоПозицийЗаявки = ППДляРаспределения.Количество();
	
	Для НомерСтрокиРасшифровки = 0 По КоличествоСтрокРасшифровки -1 Цикл
		
		ТекСтрокаРасшифровки = ТабРасшифровка[НомерСтрокиРасшифровки];
		
		Для НомерПозиции = 0 По КоличествоПозицийЗаявки - 1 Цикл
			
			ТекПозиция = ППДляРаспределения[НомерПозиции];
			КоэффициентРазделения = ?(БазаРаспределения = 0, 0, ТекПозиция.СуммаВзаиморасчетов / БазаРаспределения);
		
			НоваяСтрока = РазделенныеДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаРасшифровки);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПозиция, "ИдентификаторПозиции, ЗаявкаНаОперацию");
			
			Если НомерПозиции = КоличествоПозицийЗаявки - 1 Тогда
				// На последнюю позицию сносим остаток.
				НоваяСтрока.Сумма		= ТекСтрокаРасшифровки.Сумма - ТекСтрокаРасшифровки.Распределено;
				НоваяСтрока.СуммаНДС	= ТекСтрокаРасшифровки.СуммаНДС - ТекСтрокаРасшифровки.РаспределеноНДС;
			Иначе
				НоваяСтрока.Сумма		= ТекСтрокаРасшифровки.Сумма * КоэффициентРазделения;
				НоваяСтрока.СуммаНДС	= ТекСтрокаРасшифровки.СуммаНДС * КоэффициентРазделения;
			КонецЕсли;
			
			ТекСтрокаРасшифровки.Распределено		= ТекСтрокаРасшифровки.Распределено + НоваяСтрока.Сумма;
			ТекСтрокаРасшифровки.РаспределеноНДС	= ТекСтрокаРасшифровки.РаспределеноНДС + НоваяСтрока.СуммаНДС;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры

// Процедура добавляет встречные операции для всех основных операций
//
// Параметры:
//  ПлатежнаяПозиция	 - см. РегистрыСведений.РазмещениеЗаявок 
//  ВстречнаяОперация	 - см. ПлатежныеПозиции.ВстречнаяОперация 
//  Объект				 - см. ПлатежныеПозиции.РеквизитыЗаявкиДляДобавленияВстречнойОперации 
//
Процедура ДобавитьВстречнуюОперацию(ПлатежнаяПозиция, ПараметрыВстречнойОперации, Объект)
	
	РеквизитыДокумента = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Объект.Ссылка.Метаданные().ПолноеИмя());
	
	СтруктураПоиска = Новый Структура("ПриходРасход", ПлатежнаяПозиция[0].ПриходРасход);
	ОсновныеПозиции = ПлатежнаяПозиция.НайтиСтроки(СтруктураПоиска);
	
	// Заполняем с учетом того, что встречная позиция есть только у ЗаявкиНаРасходованиеДенежныхСредств
	Для Каждого ОсновнаяПозиция Из ОсновныеПозиции Цикл
		
		ЗаполнитьСуммуИКурсОсновнойПозиции(ОсновнаяПозиция, ПараметрыВстречнойОперации);
		
		ВстречнаяПозиция = ПлатежнаяПозиция.Добавить();
		ЗаполнитьВстречнуюПозициюПоОсновной(ВстречнаяПозиция, ОсновнаяПозиция, ПараметрыВстречнойОперации, Объект, РеквизитыДокумента);
		ОсновнаяПозиция.ИдентификаторВстречнойПозиции = ВстречнаяПозиция.ИдентификаторПозиции;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает дату зачисления ДС по обратной стороне ПП
Процедура УстановитьДатуЗачисления(Форма)
	
	Если Форма.ПлатежнаяПозиция.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	//
	ТипБС = КэшируемыеПроцедурыОПК.ТипБанковскиеСчетаОрганизаций();
	ПроизводственныйКаледнарьПоУмолчанию = ВстраиваниеОПКПереопределяемый.ПолучитьПроизводственныйКалендарьПоУмолчанию();
	
	//
	Операции = ОперацииПлатежнойПозиции(Форма);
	ВсегоОпераций = Мин(Операции.Основная.Количество(), Операции.Встречная.Количество());
	
	Поз = 0;
	Для Поз = 0 По ВсегоОпераций-1 Цикл
		
		//
		П1 = Операции.Основная[Поз];
		П2 = Операции.Встречная[Поз];
		
		//
		БСК = П2.БанковскийСчетКасса;
		Если ТипЗнч(БСК) = ТипБС И ЗначениеЗаполнено(БСК) Тогда
			
			ПараметрыСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(БСК, "СрокИсполненияПлатежа,ПроизводственныйКалендарь");
			Если НЕ ЗначениеЗаполнено(ПараметрыСчета.ПроизводственныйКалендарь) Тогда
				ПараметрыСчета.ПроизводственныйКалендарь = ПроизводственныйКаледнарьПоУмолчанию;
			КонецЕсли;
			
			П2.ДатаИсполнения = ВстраиваниеОПКПереопределяемый.ПолучитьДатуПоКалендарю(
				ПараметрыСчета.ПроизводственныйКалендарь, 
				П1.ДатаИсполнения,
				ПараметрыСчета.СрокИсполненияПлатежа);
		Иначе
			П2.ДатаИсполнения = П1.ДатаИсполнения;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает структуру с полями Основная и Встречная
Функция ОперацииПлатежнойПозиции(Форма)
	
	Объект = Форма.Объект;
	
	Результат = Новый Структура("Основная,Встречная,КлючиПоискаВстречной");
	
	ОсновноеНаправление = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Форма.РеквизитыДокумента.ПриходРасход);
	ОбратноеНаправление = ОбратныйПриходРасход(ОсновноеНаправление);

	Результат.Основная = Форма.ПлатежнаяПозиция.НайтиСтроки(Новый Структура("ПриходРасход", ОсновноеНаправление));
	Результат.Встречная = Форма.ПлатежнаяПозиция.НайтиСтроки(Новый Структура("ПриходРасход", ОбратноеНаправление));
	
	Результат.КлючиПоискаВстречной = Новый Соответствие;
	Для Каждого П2 Из Результат.Встречная Цикл
		Результат.КлючиПоискаВстречной.Вставить(П2.ИдентификаторПозиции, П2);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область УправленияСостояниемИсполнения

Функция ВидСобытияОповещенияПоСостоянию(Знач Состояние)
	
	СоответствиеСостояний = Новый Соответствие;
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.Отложена,                   Справочники.ВидыСобытийОповещений["ПомещениеВСтопЛист"]);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей,    Справочники.ВидыСобытийОповещений["ВключениеВРеестр"]);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.Исполнена,                  Справочники.ВидыСобытийОповещений["Оплата"]);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.НаИсполнении,               Справочники.ВидыСобытийОповещений["ПередачаВОплату"]);
	
	Возврат СоответствиеСостояний[Состояние];
	
КонецФункции

Функция ТекстОповещенияОбИзмененииСостояния(Позиция, Состояние)
	
	ШаблонСообщения = НСтр("ru = '<P>Позиция заявки %1 от %2 переведена в состояние <b>%3</b></P>
								|<P> Документ: <a href=%4>%5</a></P>
								|<P> Сумма к оплате: %6 %7</P>
								|<P> Дата оплаты: %8</P>'", ОбщегоНазначения.КодОсновногоЯзыка());
	ФорматДаты = "ДФ=dd.MM.yy";
	
	ТекстОповещения = СтрШаблон(ШаблонСообщения, Позиция.Номер,	Формат(Позиция.Дата, ФорматДаты),
		Состояние, СтрШаблон("'%1'", ПолучитьНавигационнуюСсылку(Позиция.ЗаявкаНаОперацию)),
		Позиция.ЗаявкаНаОперацию, Позиция.Сумма, Позиция.ВалютаОплаты,
		Формат(Позиция.ДатаИсполнения, ФорматДаты));
								
	Возврат ТекстОповещения;
								
КонецФункции

#КонецОбласти

#КонецОбласти
 
