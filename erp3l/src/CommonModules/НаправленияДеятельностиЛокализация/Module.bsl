#Область ПрограммныйИнтерфейс


#Область ОбработчикиСобытийОбъекта

// Вызывается из соответствующего обработчика модуля объекта
//
// Параметры:
//  Объект - СправочникОбъект.НаправленияДеятельности - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика модуля объекта
//
// Параметры:
//  Объект - СправочникОбъект.НаправленияДеятельности - Обрабатываемый объект
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика модуля объекта
//
// Параметры:
//  Объект - СправочникОбъект.НаправленияДеятельности - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПередЗаписью(Объект, Отказ) Экспорт
	
	//++ Локализация
	//-- Локализация
	
КонецПроцедуры

// Вызывается из соответствующего обработчика модуля объекта
//
// Параметры:
//  Объект - СправочникОбъект.НаправленияДеятельности - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область МетодыМодуляМенеджера

// Дополняет массив блокируемых реквизитов объекта (см. Справочник.НаправленияДеятельности.ПолучитьБлокируемыеРеквизитыОбъекта).
//
// Параметры:
// 	БлокируемыеРеквизиты - Массив - Блокируемые реквизиты объекта
//
Процедура ДополнитьБлокируемыеРеквизитыОбъекта(БлокируемыеРеквизиты) Экспорт
	//++ Локализация
	БлокируемыеРеквизиты.Добавить("ТипНаправленияДеятельности");
	//-- Локализация
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация
	//++ НЕ УТ
	УстановитьДоступностьЭлементов(Форма);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяЭлемента - Строка - Имя элемента управления
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ПриИзмененииРеквизита(ИмяЭлемента, Форма) Экспорт
	//++ Локализация
	//++ НЕ УТ
	Если ИмяЭлемента = "ТипНаправленияДеятельностиКонтрактГОЗ"
	     Или ИмяЭлемента = "ТипНаправленияДеятельностиИная" Тогда
		ПриИзмененииТипаНаправленияДеятельности(Форма);
	КонецЕсли;
	УстановитьДоступностьЭлементов(Форма);
	//-- НЕ УТ
	//-- Локализация
КонецПроцедуры

// Вызывается из соответствующего обработчика формы объекта
//
// Параметры:
// 	ИмяКоманды - Строка - Имя команды
// 	Форма - ФормаКлиентскогоПриложения - Форма плана видов характеристик
//
Процедура ВыполнитьКоманду(ИмяКоманды, Форма) Экспорт
	//++ Локализация
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//++ Локализация
//++ НЕ УТ
#Область СлужебныеПроцедурыИФункции

Процедура УстановитьДоступностьЭлементов(Форма) Экспорт

	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МожноВестиУчетЗатрат = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям") 
							И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	УчетСредствПоКонтрактуГОЗ = (Объект.ТипНаправленияДеятельности = Перечисления.ТипыНаправленийДеятельности.КонтрактГОЗ);
	Элементы.ГруппаКомментарийТипДеятельности.Видимость = 
		НЕ Объект.УчетЗатрат 
		И НЕ УчетСредствПоКонтрактуГОЗ 
		И НЕ МожноВестиУчетЗатрат
		И ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	Элементы.ГруппаКомментарийУчетЗатрат.Видимость = НЕ МожноВестиУчетЗатрат;
	Элементы.ЦелевыеПараметрыКонтракта.Доступность = УчетСредствПоКонтрактуГОЗ;
	Элементы.УчетДоходов.Доступность = НЕ УчетСредствПоКонтрактуГОЗ;
	Элементы.УчетЗатрат.Доступность = МожноВестиУчетЗатрат И НЕ УчетСредствПоКонтрактуГОЗ;
	Элементы.ДенежныеСредства.Доступность = НЕ УчетСредствПоКонтрактуГОЗ;
	
	Элементы.ЦелевыеПараметрыКонтракта.Доступность = УчетСредствПоКонтрактуГОЗ;
	
КонецПроцедуры

Процедура ПриИзмененииТипаНаправленияДеятельности(Форма)
	
	Объект = Форма.Объект;
	МожноВестиУчетЗатрат = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям") 
							И ПолучитьФункциональнуюОпцию("ИспользоватьОбособленноеОбеспечениеЗаказов");
	УчетСредствПоКонтрактуГОЗ = (Объект.ТипНаправленияДеятельности = Перечисления.ТипыНаправленийДеятельности.КонтрактГОЗ);
	Если МожноВестиУчетЗатрат И УчетСредствПоКонтрактуГОЗ Тогда
		Если НЕ Объект.УчетДоходов Тогда
			Объект.УчетДоходов = Истина;
		КонецЕсли;
		Если НЕ Объект.УчетЗатрат Тогда
			Объект.УчетЗатрат = Истина;
		КонецЕсли;
		Если НЕ Форма.УчетДенежныхСредств Тогда
			Форма.УчетДенежныхСредств = Истина;
			Объект.УчетДенежныхСредствРаздельно = Истина;
			Форма.СпособУчетаДС = "РаздельныйУчет";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

//-- НЕ УТ
//-- Локализация