
#Область КомандыФормы

Процедура ОткрытьСписокДокументовОснований(ФормаДокумента, ИмяТЧ = Неопределено, СтандартнаяОбработка = Ложь) Экспорт
	
	Объект = ФормаДокумента.Объект;
	
	СтандартнаяОбработка = Ложь;	
	Отказ = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(
			НСтр("ru='Поле ""Организация"" не заполнено'"),
			,
			"Организация",
			"Объект",
			Отказ);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(
			НСтр("ru='Поле ""Сценарий"" не заполнено'"),
			,
			"Сценарий",
			"Объект",
			Отказ);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		ДокументыОснования = Новый СписокЗначений;
		Для каждого СтрокаОснование Из Объект.ДокументыОснования Цикл
			ДокументыОснования.Добавить(СтрокаОснование.ДокументОснование);		
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ИсточникСсылка", 		Объект.Ссылка);
		ПараметрыФормы.Вставить("РежимЗаполнения",		Объект.РежимЗаполнения);
		ПараметрыФормы.Вставить("Организация", 			Объект.Организация);
		ПараметрыФормы.Вставить("Сценарий", 			Объект.Сценарий);
		ПараметрыФормы.Вставить("ДокументыОснования", 	ДокументыОснования);
		
		Модифицированность = Истина;
		
		ОткрытьФорму("ОбщаяФорма.ДокументыОснованияПараллельногоУчета",
			ПараметрыФормы,
			ФормаДокумента);
		
		МСФОКлиентСерверУХ.УправлениеФормой(ФормаДокумента, ИмяТЧ, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказатьВопросОПерезаполнении(Форма, ИмяПроцедуры, ДополнительныеПараметры) Экспорт

	ТекстВопроса = НСтр("ru = 'При заполнении существующие данные будут перезаполнены!
						|Продолжить?'");
	
	ПоказатьВопрос(Новый ОписаниеОповещения(ИмяПроцедуры, Форма, ДополнительныеПараметры), 
					ТекстВопроса, 
					РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

Процедура ЗаполнитьДокумент(Форма, ДанныеЗаполнения, ИмяТЧ = Неопределено) Экспорт
		
	ОчиститьСообщения();
	
	Если Форма.ПроверитьЗаполнение() <> Истина Тогда
		Возврат;	
	КонецЕсли;

	Если (ИмяТЧ <> Неопределено) И Форма.Объект[ИмяТЧ].Количество() > 0 Тогда
			
		ПоказатьВопросОПерезаполнении(Форма, "Подключаемый_ЗаполнитьДокумент", ДанныеЗаполнения);
        Возврат;
	
	КонецЕсли;	
	
	Форма.Подключаемый_ЗаполнитьДокумент(Неопределено, ДанныеЗаполнения);

КонецПроцедуры

Процедура СоздатьДокументМСФО(Форма) Экспорт
	
	Если Форма.Модифицированность И НЕ Форма.Объект.Ссылка.Пустая() Тогда		
		ПоказатьПредупреждение(, НСтр("ru = 'Документ необходимо провести перед вводом документа МСФО'"), 10);
		Возврат;	
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Основание", Форма.Объект.Ссылка);
	
	ОткрытьФорму(Форма.ИмяФормы, ПараметрыФормы, Форма, Истина);	

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

Процедура ТабличнаяЧастьПриОкончанииРедактирования(ФормаДокумента, Элемент, НоваяСтрока, ОтменаРедактирования) Экспорт

	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МСФОКлиентСерверУХ.ОбновитьРасхожденияСтрокиВНА(Элемент.ТекущиеДанные, ФормаДокумента.КэшируемыеЗначения.СоответствиеКолонок);
	Элемент.ТекущиеДанные.ЕстьИзменение = Истина;
	
КонецПроцедуры

// Открывает форму редактирования произвольного многострочного текста модально
//
// Параметры:
// МногострочныйТекст      - Строка - произвольный текст, который необходимо отредактировать
// РезультатРедактирования - Строка - переменная, в которую будет помещен результат редактирования
// Модифицированность       - Строка - флаг модифицированности формы
// Заголовок               - Строка - текст, который необходимо отобразить в заголовке формы
//
Процедура ОткрытьФормуРедактированияМногострочногоТекста(ФормаДокумента, Знач МногострочныйТекст, РезультатРедактирования, Модифицированность = Ложь, 
		Знач Заголовок = Неопределено) Экспорт
		
	ОбщегоНазначенияКлиентУХ.ОткрытьФормуРедактированияКомментария(ФормаДокумента, МногострочныйТекст, 
														РезультатРедактирования, Модифицированность);
		
КонецПроцедуры

Процедура УстановитьЗначениеВКолонкеПоВыделеннымСтрокам(Форма, ИмяТЧ) Экспорт

	Перем ЗначениеЗаполнения;
	
	Элементы = Форма.Элементы;
	
	Если Элементы[ИмяТЧ].ТекущийЭлемент = Неопределено Тогда
		Возврат;
	ИначеЕсли Элементы[ИмяТЧ].ТекущийЭлемент.Видимость = Ложь Тогда 
		Возврат;
	ИначеЕсли Элементы[ИмяТЧ].ТекущийЭлемент.ТолькоПросмотр = Истина Тогда 
		Возврат;
	КонецЕсли;
	
	ИмяТекущегоЭлемента = Элементы[ИмяТЧ].ТекущийЭлемент.Имя;
	ИмяРеквизита = Сред(ИмяТекущегоЭлемента, СтрДлина(ИмяТЧ)+1);
	
	ТипРеквизитаТЧ = МСФОВызовСервераУХ.ПолучитьТипРеквизитаТЧ(Форма.Объект.Ссылка, ИмяТЧ, ИмяРеквизита);
	Если ТипРеквизитаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПодсказкаВвода = НСтр("ru = 'Введите значение для заполнения выделенных строк'");
	ДополнительныеПараметры = Новый Структура("Форма,ИмяТЧ,ИмяРеквизита", Форма, ИмяТЧ, ИмяРеквизита);
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_УстановитьЗначениеВКолонкеПоВыделеннымСтрокам", 
													МСФОКлиентУХ, 
													ДополнительныеПараметры);
													
	ПоказатьВводЗначения(ОписаниеОповещения, ЗначениеЗаполнения, ПодсказкаВвода, ТипРеквизитаТЧ);

КонецПроцедуры

Процедура Подключаемый_УстановитьЗначениеВКолонкеПоВыделеннымСтрокам(ЗначениеЗаполнения, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ИмяТЧ = ДополнительныеПараметры.ИмяТЧ;
	ИмяРеквизита = ДополнительныеПараметры.ИмяРеквизита;
	
	Для каждого ИндексСтроки Из Форма.Элементы[ИмяТЧ].ВыделенныеСтроки Цикл
		
		СтрокаТЧ = Форма.Объект[ИмяТЧ].НайтиПоИдентификатору(ИндексСтроки);
		СтрокаТЧ[ИмяРеквизита] = ЗначениеЗаполнения;
		Если СтрокаТЧ.Свойство("ЕстьИзменение") Тогда
			СтрокаТЧ.ЕстьИзменение = Истина;		
		КонецЕсли;		
		
		МСФОКлиентСерверУХ.ОбновитьЗависимыеРеквизиты(СтрокаТЧ, Форма, ИмяРеквизита); 
		
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьОтборПоПризнаку(ОтборСтрок, КолонкаПризнака, ТекущееЗначениеПризнака) Экспорт 
	
	ТекущееЗначениеПризнака = НЕ ТекущееЗначениеПризнака;
	
	Если ОтборСтрок = Неопределено Тогда
		
		Если ТекущееЗначениеПризнака Тогда		
			ОтборСтрок = Новый ФиксированнаяСтруктура(КолонкаПризнака, Истина);
		КонецЕсли;
		
	Иначе
		
		Отбор = Новый Структура(ОтборСтрок);
		Если ТекущееЗначениеПризнака Тогда
			Отбор.Вставить(КолонкаПризнака, Истина);	
		Иначе	
			Отбор.Удалить(КолонкаПризнака);
		КонецЕсли;
		
		ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Отчеты

#Область ОбработчикиСобытийРасшифровки

// Обработчик расшифровки табличного документа формы отчета.
// См. "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Если СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "ОСВМСФО") Тогда
		ОбработкаРасшифровки_ОСВ(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "СверкаВГО") Тогда
		ОбработкаРасшифровки_СверкаВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "УстановкаУчетныхПолитик") Тогда
		ОбработкаРасшифровки_УчетныеПолитикиМСФО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "ХодСверкиВГО") Тогда
		омСверкаВГО = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаВГОКлиентУХ");
		омСверкаВГО.ОбработкаРасшифровки_ОтчетПорталаВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);	
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "ШахматкаВГО") Тогда
		омСверкаВГО = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаВГОКлиентУХ");
		омСверкаВГО.ОбработкаРасшифровки_ОтчетПорталаВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);	
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "РасшифровкаРасхожденийВГО") Тогда
		омСверкаВГО = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаВГОКлиентУХ");
		омСверкаВГО.ОбработкаРасшифровки_ОтчетПорталаВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);	
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "РасхожденияВГОДляПисьма") Тогда
		омСверкаВГО = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаВГОКлиентУХ");
		омСверкаВГО.ОбработкаРасшифровки_АктВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);	
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "ОтветственныеОбъектов") Тогда
		омСверкаВГО = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаВГОКлиентУХ");
		омСверкаВГО.ОбработкаРасшифровки_ОтветственныеОбъектов(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка);	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик расшифровки табличного документа формы отчета.
// См. "Расширение поля формы для поля табличного документа.ОбработкаРасшифровки" в синтакс-помощнике.
//
// Параметры:
//   ФормаОтчета - УправляемаяФорма - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаДополнительнойРасшифровки(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Если СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "ОСВМСФО") Тогда
		Расшифровка = Неопределено;
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "УстановкаУчетныхПолитик") Тогда
		ОбработкаРасшифровки_УчетныеПолитикиМСФО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка, Истина);
	ИначеЕсли СтрЗаканчиваетсяНа(ФормаОтчета.НастройкиОтчета.ПолноеИмя, "ОтветственныеОбъектов") Тогда
		Расшифровка = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Процедура ОбработкаРасшифровки_УчетныеПолитикиМСФО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка, РасшифровкиТекущаяОбласть = Ложь)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыРасшифровки = Новый Структура("АдресСКД,ДанныеРасшифровки", ФормаОтчета.НастройкиОтчета.АдресСхемы, ФормаОтчета.ОтчетДанныеРасшифровки);
	
	Если РасшифровкиТекущаяОбласть Тогда
		
		ТабДок = ФормаОтчета.ОтчетТабличныйДокумент;
		Расшифровки = РасшифровкиОбласти(ТабДок, ТабДок.ТекущаяОбласть);
		Отбор = ПолучитьОтборПоРасшифровкам(Расшифровки, ФормаОтчета.ОтчетДанныеРасшифровки);
		
	Иначе	
		Отбор = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(Расшифровка, ФормаОтчета.ОтчетДанныеРасшифровки, Истина);
	КонецЕсли;
	
	ОтборРасшифровки = Новый Структура("Организация, Сценарий, Дата");
	ОтборРасшифровки.Вставить("Организация",	Отбор.Получить("Организация"));
	ОтборРасшифровки.Вставить("Сценарий", 		Отбор.Получить("Сценарий"));
	ОтборРасшифровки.Вставить("Дата", 			Отбор.Получить("Период"));
	
	Если ТипЗнч(ОтборРасшифровки.Дата) = Тип("СтандартнаяДатаНачала") Тогда
		ОтборРасшифровки.Вставить("Дата", ОтборРасшифровки.Дата.Дата);
	КонецЕсли;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
								ФормаОтчета.ОтчетДанныеРасшифровки, 
								Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыРасшифровки.АдресСКД)
							);
							
	ДопПараметры = Новый Структура("Расшифровка, ФормаОтчета, Отбор, ОтборРасшифровки, РасшифровкаВТеле, ПараметрыРасшифровки", 
									Расшифровка, ФормаОтчета, Отбор, ОтборРасшифровки, Ложь, ПараметрыРасшифровки);

	Если ТипЗнч(ОтборРасшифровки.Сценарий) = Тип("СправочникСсылка.Сценарии") Тогда
		Сценарии = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборРасшифровки.Сценарий);
	Иначе 
		Сценарии = ОтборРасшифровки.Сценарий.ВыгрузитьЗначения();	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОтборРасшифровки.Организация) Тогда
		УстановитьУП = НСтр("ru = 'Установить учетную политику на <%1> (%2)'");
		ИсторияУП = НСтр("ru = 'История изменений учетной политики'");
	Иначе		
		УстановитьУП = НСтр("ru = 'Установить учетную политику на <%1> по всем организациям (%2)'");
		ИсторияУП = НСтр("ru = 'История изменений общей учетной политики'");
	КонецЕсли;
	
	ДатаСтрокой = Формат(ОтборРасшифровки.Дата, "ДЛФ=D");

	ДопПункты = Новый СписокЗначений;
	Для каждого Сценарий Из Сценарии Цикл
		
		Пункт = Новый Структура("Имя, Сценарий", "УстановитьУП", Сценарий);
		ДопПункты.Добавить(Пункт, СтрШаблон(УстановитьУП, ДатаСтрокой, Сценарий));
		
	КонецЦикла;
	
	Пункт = Новый Структура("Имя, Организация, Сценарий", "ИсторияУП", ОтборРасшифровки.Организация, Сценарий);
	ДопПункты.Добавить(Пункт, ИсторияУП);
	
	ОписаниеОповещения 
			= Новый ОписаниеОповещения(
				"Подключаемый_ОбработкаРасшифровкиУП", 
				МСФОКлиентУХ, 
				ДопПараметры
			);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, , ДопПункты);
		
КонецПроцедуры

Процедура ОбработкаРасшифровки_ОСВ(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)

	ПараметрыРасшифровки = ПолучитьПараметрыРасшифровки(ФормаОтчета);
	
	ОтборРасшифровки = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(
		Расшифровка, ПараметрыРасшифровки.ДанныеРасшифровки, Истина);
	
	Если ОтборРасшифровки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ОтборРасшифровки.Получить("НомерСтроки") <> Неопределено Тогда
		Расшифровать_ОтчетПоПроводкамРСБУ(ФормаОтчета, ОтборРасшифровки, СтандартнаяОбработка);
		Возврат;
	КонецЕсли;
	
	Если ОтборРасшифровки.Получить("СоставАналитики") <> Неопределено Тогда // это детали
		
		Расшифровать_ОткрытьЗначение(ОтборРасшифровки, Расшифровка, СтандартнаяОбработка);		
		Возврат;
		
	КонецЕсли;
	
	Регистратор = ОтборРасшифровки.Получить("Регистратор");
	Если (Регистратор <> Неопределено) И (ТипЗнч(Регистратор) <> Тип("Массив")) И (ТипЗнч(Регистратор) <> Тип("СписокЗначений")) Тогда
		СтандартнаяОбработка = Ложь;		
		ПоказатьЗначение(, ОтборРасшифровки.Получить("Регистратор"));
		Возврат;
	КонецЕсли;
		
	СтандартнаяОбработка = Ложь;
	
	ОтборСчет = ОтборРасшифровки.Получить("Счет");
	
	Если ТипЗнч(ОтборРасшифровки.Получить("ВыводимыеРесурсы")) = Тип("Строка") Тогда
		ВыводимыеРесурсы = Новый СписокЗначений;
		ВыводимыеРесурсы.ЗагрузитьЗначения(СтрРазделить(ОтборРасшифровки.Получить("ВыводимыеРесурсы"), ";"));
		ОтборРасшифровки.Вставить("ВыводимыеРесурсы", ВыводимыеРесурсы);
	КонецЕсли;
	
    ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
								ПараметрыРасшифровки.ДанныеРасшифровки, 
								Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыРасшифровки.АдресСКД)
							);
	
	ДопПункты = ПолучитьДополнительныеПунктыМенюРасшифровкиОСВ(ФормаОтчета, ОтборРасшифровки);

	Отступ = ФормаОтчета.ОтчетТабличныйДокумент.Область(ФормаОтчета.ОтчетТабличныйДокумент.ТекущаяОбласть.Верх, 1).Отступ;
	
	ДопПараметры = Новый Структура("Расшифровка, ФормаОтчета, Счет, ОтборРасшифровки, РасшифровкаВТеле, ПараметрыРасшифровки, Отступ", 
									Расшифровка, ФормаОтчета, ОтборСчет, ОтборРасшифровки, Истина, ПараметрыРасшифровки, Отступ);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗавершение", МСФОКлиентУХ, ДопПараметры);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДопПункты);
	
КонецПроцедуры

Процедура ОбработкаРасшифровкиЗавершение(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ВыполненноеДействие) = Тип("ДействиеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		Расшифровать_Стандартно(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ВыполненноеДействие, "Обработка.УрегулированиеДокументов.Форма") Тогда
		Расшифровать_УрегулированиеДокументов(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);
		Возврат;
	ИначеЕсли СтрНачинаетсяС(ВыполненноеДействие, "ДействиеПорталаВГО") Тогда
		
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			омСверкаВГО = ОбщегоНазначенияКлиент.ОбщийМодуль("СверкаВГОКлиентУХ");
			омСверкаВГО.Расшифровать_ДействиеПорталаВГО(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры);	
		КонецЕсли;
		
		Возврат;
	ИначеЕсли ТипЗнч(ВыполненноеДействие) <> Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеРасшифровки = ПолучитьОписаниеРасшифровки(ВыполненноеДействие);

	Форма 					= ДополнительныеПараметры.ФормаОтчета;	
	ДанныеРасшифровки		= ДополнительныеПараметры.ПараметрыРасшифровки.ДанныеРасшифровки;	
	
	НастройкиРасшифровки = МСФОВызовСервераУХ.ПолучитьНастройкиРасшифровки(ДанныеРасшифровки, Форма.Отчет.КомпоновщикНастроек);
	
	СтандартныйПериод = ПолучитьПериодИзРасшифровки(ДополнительныеПараметры.ОтборРасшифровки);
	Если СтандартныйПериод <> Неопределено Тогда
		ДополнительныеПараметры.ОтборРасшифровки.Вставить("Период", СтандартныйПериод);
		НастройкиРасшифровки.ПараметрыДанных.УстановитьЗначениеПараметра("Период", СтандартныйПериод);
	КонецЕсли;
			
	Если ЗначениеЗаполнено(ОписаниеРасшифровки.Отчет) Или ЗначениеЗаполнено(ОписаниеРасшифровки.Вариант) Тогда		
		Расшифровать_ОтчетРасшифровка(Форма, НастройкиРасшифровки, ОписаниеРасшифровки, ДополнительныеПараметры);
	Иначе 
		Расшифровать_Раскрытие(Форма, НастройкиРасшифровки, ОписаниеРасшифровки, ДополнительныеПараметры, ВыполненноеДействие);
	КонецЕсли;
	
	//ТабДокРасшифровка.Показать();
	
КонецПроцедуры

Процедура ОбработкаРасшифровки_СверкаВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ПараметрыРасшифровки = Новый Структура("АдресСКД,ДанныеРасшифровки", ФормаОтчета.НастройкиОтчета.АдресСхемы, ФормаОтчета.ОтчетДанныеРасшифровки);
	
	Отбор = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(Расшифровка, ФормаОтчета.ОтчетДанныеРасшифровки, Истина);
	ОтборПланСчетов = Отбор.Получить("ПланСчетов");
	РеквизитыПланаСчетов = ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(ОтборПланСчетов, "Наименование");
	
	ОтборРасшифровки = МСФОВызовСервераУХ.ПолучитьОтборРасшифровкиСверкаВГО(Отбор);
	ОтборСчет = ОтборРасшифровки.Счет;
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
								ФормаОтчета.ОтчетДанныеРасшифровки, 
								Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыРасшифровки.АдресСКД)
							);
							
	ДопПараметры = Новый Структура("Расшифровка, ФормаОтчета, Счет, ОтборРасшифровки, РасшифровкаВТеле, ПараметрыРасшифровки", 
									Расшифровка, ФормаОтчета, ОтборСчет, ОтборРасшифровки, Истина, ПараметрыРасшифровки);
							
	ДопПункты = Новый СписокЗначений;
	Если РеквизитыПланаСчетов.Наименование = "Хозрасчетный" Тогда
		Если Отбор.Получить("ОстаткиОбороты") = Истина Тогда
			ДопПункты.Добавить("Отчет.КарточкаСчета.Форма", НСтр("ru = 'Карточка счета:'") + ОтборСчет);
			ДопПараметры.Вставить("ПараметрыФормы", МСФОВызовСервераУХ.ПараметрыКарточкаСчетаРСБУ(ОтборРасшифровки));
		ИначеЕсли Отбор.Получить("ОстаткиОбороты") = Ложь Тогда
			ДопПункты.Добавить("Отчет.КарточкаСубконто.Форма", НСтр("ru = 'Карточка субконто по коррсчету:'") + ОтборСчет);
			ДопПараметры.Вставить("ПараметрыФормы", МСФОВызовСервераУХ.ПараметрыКарточкаСчетаРСБУ(ОтборРасшифровки));
		КонецЕсли;
	ИначеЕсли РеквизитыПланаСчетов.Наименование = "МСФО" Тогда
		ДопПункты.Добавить("Отчет.ОСВМСФО.Форма/КарточкаСчета", НСтр("ru = 'Карточка счета:'") + ОтборСчет);
	КонецЕсли;
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ОстаткиОбороты = Отбор.Получить("ОстаткиОбороты");
		Если ОстаткиОбороты <> Истина Тогда
			
			Текст = НСтр("ru = 'Урегулирование поступлений <%1>'");
			Если ОтборРасшифровки.Свойство("Организация") Тогда
				ДопПункты.Добавить("Обработка.УрегулированиеДокументов.Форма/Организация", СтрШаблон(Текст, ОтборРасшифровки.Организация));
			КонецЕсли;
			Если ОтборРасшифровки.Свойство("Субконто1") Тогда
				ДопПункты.Добавить("Обработка.УрегулированиеДокументов.Форма/Контрагент", СтрШаблон(Текст, ОтборРасшифровки.Субконто1));
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗавершение", ЭтотОбъект, ДопПараметры);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДопПункты);
	
КонецПроцедуры

Процедура Расшифровать_УрегулированиеДокументов(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры)

	ПараметрыФормы = Новый Структура("Организация,Период,Продавец"); 
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДополнительныеПараметры.ОтборРасшифровки);
	
	Организация2 = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ДополнительныеПараметры.ОтборРасшифровки.Субконто1, "ОрганизационнаяЕдиница");
	Если СтрЗаканчиваетсяНа(ВыполненноеДействие, "Организация") Тогда
		ПараметрыФормы.Вставить("Продавец", Организация2);
	Иначе	
		ПараметрыФормы.Вставить("Организация", Организация2);
		ПараметрыФормы.Вставить("Продавец", ДополнительныеПараметры.ОтборРасшифровки.Организация);
	КонецЕсли;
	
	ИмяФормы = "Обработка.УрегулированиеДокументов.Форма.Форма";
	ОткрытьФорму(ИмяФормы, ПараметрыФормы, ДополнительныеПараметры.ФормаОтчета, Истина);

КонецПроцедуры

Функция РасшифровкиОбласти(ТабДок, ВыделеннаяОбласть)

	Результат = Новый Массив;
	
	Для кол = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл
		Для стр = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл
			ТекОбласть = ТабДок.Область(стр, кол);
			Если ТекОбласть.Расшифровка <> Неопределено Тогда
				Результат.Добавить(ТекОбласть.Расшифровка);			
			КонецЕсли;			
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОтборПоРасшифровкам(Расшифровки, ДанныеРасшифровки)
	
	Результат = Новый Соответствие;
	Для каждого Расшифровка Из Расшифровки Цикл
	
		Отбор = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(Расшифровка, ДанныеРасшифровки, Истина);	
		
		Для каждого ЭлементОтбора Из Отбор Цикл
			
			СтароеЗначение = Результат.Получить(ЭлементОтбора.Ключ);
			Если СтароеЗначение = Неопределено Тогда
				Результат.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			ИначеЕсли СтароеЗначение = ЭлементОтбора.Значение Тогда
				Продолжить;
			ИначеЕсли ТипЗнч(СтароеЗначение) <> Тип("СписокЗначений") Тогда
				
				сз = Новый СписокЗначений;
				сз.Добавить(СтароеЗначение);
				сз.Добавить(ЭлементОтбора.Значение);
				
				Результат.Вставить(ЭлементОтбора.Ключ, сз);	
				
			ИначеЕсли СтароеЗначение.НайтиПоЗначению(ЭлементОтбора.Значение) = Неопределено Тогда
				Результат[ЭлементОтбора.Ключ].Добавить(ЭлементОтбора.Значение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ПунктыМенюРасшифровкиОСВ

Функция ПолучитьДополнительныеПунктыМенюРасшифровкиОСВ(ФормаОтчета, ОтборРасшифровки)
	
	Счет = ОтборРасшифровки.Получить("Счет");
		
	Компоновщик = ФормаОтчета.Отчет.КомпоновщикНастроек;
	КлючВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Компоновщик.Настройки.ДополнительныеСвойства, "КлючВариантаПредопределенный", "ОСВ");
	
	ПунктыМеню = Новый СписокЗначений;
	
	ЗаполнитьРасшифровкиОСВ(ПунктыМеню, Счет, ФормаОтчета, КлючВарианта);
	Если РаскрытияВозможны(Компоновщик.Настройки) Тогда
		ЗаполнитьРаскрытияОСВ(ПунктыМеню, Счет, ОтборРасшифровки);	
	КонецЕсли;
	
	Возврат ПунктыМеню;

КонецФункции

Функция ЗаполнитьРасшифровкиОСВ(ПунктыМеню, Счет, ФормаОтчета, КлючВарианта)
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
	
	Дополнительно = Новый СписокЗначений;
	ЭтоОСВ = (КлючВарианта = "ОСВ") Или (КлючВарианта = "КОСВ");
	
	Если ЭтоОСВ Тогда
				
		Группировка = "/Счет" + ?(СвойстваСчета.КоличествоСубконто, ",Субконто1", "");
		ПунктыМеню.Добавить(ФормаОтчета.ИмяФормы + "/ОСВпоСчету" + Группировка, НСтр("ru = 'ОСВ по счету '") + Счет);
		
	КонецЕсли;
	
	Если ЭтоОСВ Или (КлючВарианта = "ОСВпоСчету") Или (КлючВарианта = "АнализСубконто") Тогда		
		ПунктыМеню.Добавить(ФормаОтчета.ИмяФормы + "/КарточкаСчета", НСтр("ru = 'Карточка счета '") + Счет);
	КонецЕсли;
	
	Если (КлючВарианта = "АнализСчета") Или (КлючВарианта = "ОборотыСчета") Или (КлючВарианта = "ОборотыСубконто") Тогда
		ПунктыМеню.Добавить(ФормаОтчета.ИмяФормы + "/ОтчетПоПроводкам", НСтр("ru = 'Отчет по проводкам '") + Счет);
	КонецЕсли;	
	
	Если ЭтоОСВ Тогда		
		Дополнительно.Добавить(ФормаОтчета.ИмяФормы + "/АнализСчета", НСтр("ru = 'Анализ счета '") + Счет);		
	КонецЕсли;
	
	КлючВариантаРасшифровки = КлючВарианта;
	Если ЭтоОСВ Тогда
		КлючВариантаРасшифровки = "ОСВпоСчету";
	КонецЕсли;
	
	Дополнительно.Добавить(ФормаОтчета.ИмяФормы + СтрШаблон("/%1/Периоды.ПериодМесяц",	КлючВариантаРасшифровки),	НСтр("ru = 'Обороты по месяцам счета '") + Счет);
	Дополнительно.Добавить(ФормаОтчета.ИмяФормы + СтрШаблон("/%1/Периоды.ПериодНеделя", КлючВариантаРасшифровки),	НСтр("ru = 'Обороты по неделям счета '") + Счет);
	Дополнительно.Добавить(ФормаОтчета.ИмяФормы + СтрШаблон("/%1/Периоды.ПериодДень",   КлючВариантаРасшифровки), 	НСтр("ru = 'Обороты по дням счета '") + Счет);
		
	ПунктыМеню.Добавить(Дополнительно, НСтр("ru = 'Прочие отчеты-расшифровки'"));

КонецФункции

Функция ЗаполнитьРаскрытияОСВ(ПунктыМеню, Счет, ОтборРасшифровки)
	
	ЕстьОсновноеРаскрытие = Ложь;	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
		
	Дополнительно = Новый СписокЗначений;
	
	ИмяСубконто = "";
	НомерСубконто = 0;
	Если ЗначениеЗаполнено(Счет) И (СвойстваСчета.КоличествоСубконто > 0) Тогда		
		Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл			
			ИмяСубконто = "Субконто" + НомерСубконто;
			Если ОтборРасшифровки.Получить(ИмяСубконто) = Неопределено Тогда				
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НомерСубконто > СвойстваСчета.КоличествоСубконто Тогда
			ИмяСубконто = "";
		КонецЕсли;		
	КонецЕсли;
		
	Если ИмяСубконто <> "" Тогда
		ЗаголовокСубконто = СвойстваСчета[СтрШаблон("Вид%1Наименование", ИмяСубконто)];
		ПунктыМеню.Добавить(ИмяСубконто, НСтр("ru = 'Раскрыть по '") + НРег(ЗаголовокСубконто));
		ЕстьОсновноеРаскрытие = Истина;
	КонецЕсли;
	
	Если ОтборРасшифровки.Получить("Организация") = Неопределено Тогда
		Дополнительно.Добавить("Организация", НСтр("ru = 'Раскрыть по организациям'"));
	КонецЕсли;
	
	Если СвойстваСчета.УчетПоПодразделениям Тогда		
		Дополнительно.Добавить("Подразделение", НСтр("ru = 'Раскрыть по подразделениям'"));		
	КонецЕсли;
	
	Если СвойстваСчета.УчетПоНаправлениямДеятельности Тогда		
		Дополнительно.Добавить("НаправлениеДеятельности", НСтр("ru = 'Раскрыть по направлениям деятельности'"));
	КонецЕсли;
	
	Для каждого ТекущееИзмерение Из УчетМСФОПовтИспУХ.ДополнительныеИзмеренияРБ(ОтборРасшифровки.Получить("РегистрБухгалтерии")) Цикл	
		Если ОтборРасшифровки.Получить(ТекущееИзмерение.Значение) = Неопределено Тогда
			Дополнительно.Добавить(ТекущееИзмерение.Значение, НСтр("ru = 'Раскрыть по '") + НРег(ТекущееИзмерение.Представление));		
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяСубконто <> "" Тогда
		
		ИменаСубконто = Новый Массив;
		ПредставлениеСубконто = Новый Массив;			
		Для НомерСубконтоРаскрытия = НомерСубконто По СвойстваСчета.КоличествоСубконто Цикл
			ИменаСубконто.Добавить("Субконто" + НомерСубконтоРаскрытия);
			ПредставлениеСубконто.Добавить(СвойстваСчета[СтрШаблон("ВидСубконто%1Наименование", НомерСубконтоРаскрытия)]);
		КонецЦикла;
		
		Представление = НСтр("ru = 'Раскрыть по '") + НРег(СтрСоединить(ПредставлениеСубконто, ","));
		Дополнительно.Добавить(СтрСоединить(ИменаСубконто, ","), Представление);
		
	КонецЕсли;
	
	Если ОтборРасшифровки.Получить("КорСчет") = Неопределено Тогда
		Дополнительно.Добавить("КорСчет", НСтр("ru = 'Раскрыть по кор.счету'"));		
	КонецЕсли;
	
	Дополнительно.Добавить("Периоды.ПериодМесяц",	НСтр("ru = 'Раскрыть по месяцам'"));
	Дополнительно.Добавить("Периоды.ПериодНеделя",	НСтр("ru = 'Раскрыть по неделям'"));
	Дополнительно.Добавить("Периоды.ПериодДень",	НСтр("ru = 'Раскрыть по дням'"));
	Если ЕстьОсновноеРаскрытие Тогда
		Дополнительно.Добавить("Регистратор",		НСтр("ru = 'Раскрыть по регистратору'"));
	Иначе 
		ПунктыМеню.Добавить("Регистратор",			НСтр("ru = 'Раскрыть по регистратору'"));
		ЕстьОсновноеРаскрытие = Истина;
	КонецЕсли;
	
	Дополнительно.Добавить("НомерСтроки", 			НСтр("ru = 'Раскрыть по проводкам'"));
	
	ПунктыМеню.Добавить(Дополнительно, НСтр("ru = 'Прочие раскрытия'"));

КонецФункции

#КонецОбласти

#Область ВидыРасшифровокОСВМСФО

Процедура Расшифровать_ОтчетПоПроводкамРСБУ(ФормаОтчета, ОтборРасшифровки, СтандартнаяОбработка)
	
	КлючПроводки = Новый Структура("Регистратор,НомерСтроки");
	КлючПроводки.Вставить("Регистратор", ОтборРасшифровки.Получить("Регистратор"));
	КлючПроводки.Вставить("НомерСтроки", ОтборРасшифровки.Получить("НомерСтроки"));
		
	Если Не ЗначениеЗаполнено(КлючПроводки.Регистратор) Или Не ЗначениеЗаполнено(КлючПроводки.НомерСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = МСФОВызовСервераУХ.ПолучитьПараметрыОтчетаПоПроводкам(КлючПроводки.Регистратор, КлючПроводки.НомерСтроки);
	
	Если ПараметрыОтчета <> Неопределено Тогда		
		
		СтандартнаяОбработка = Ложь;		
		ОткрытьФорму("Отчет.ОтчетПоРегиструБухгалтерииБД.ФормаОбъекта", ПараметрыОтчета, ФормаОтчета, Истина,,,, РежимОткрытияОкнаФормы.Независимый);
		Возврат;		
		
	КонецЕсли;

	ОтборРСБУ = МСФОВызовСервераУХ.ПолучитьОтборРСБУ(КлючПроводки);
	
	Если ОтборРСБУ.Количество()=0 Тогда
	    Возврат;// не найдены счета трансляции	
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = БухгалтерскиеОтчетыКлиентСервер.НовыйПараметрыФормыСтандартногоОтчета();
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ФиксированныеПоля = Новый Структура("Организация,НачалоПериода,КонецПериода");
	Для каждого ЭлементОтбора Из ОтборРСБУ Цикл
		
		Если ФиксированныеПоля.Свойство(ЭлементОтбора.Ключ) Тогда
			ПользовательскиеНастройки.ДополнительныеСвойства.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
		Иначе 
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			Отбор,
			ЭлементОтбора.Ключ,
			ВидСравненияКомпоновкиДанных.ВИерархии,
			ЭлементОтбора.Значение,
			,
			Истина,
			,
			ЭлементОтбора.Ключ
			);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",  	Истина);
	ПараметрыФормы.Вставить("РежимРасшифровки",  			Истина);	
	ПараметрыФормы.Вставить("ВидРасшифровки",  				2);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",  	ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.ОтчетПоПроводкам.Форма", ПараметрыФормы, ФормаОтчета, Истина);

КонецПроцедуры

Процедура Расшифровать_ОткрытьЗначение(ОтборРасшифровки, Расшифровка, СтандартнаяОбработка)
	
	ПоляРасшифровок = Новый Структура("Регистратор, АналитикаДт, АналитикаКт, СчетДт, СчетКт");
	Для каждого Поле Из ПоляРасшифровок Цикл		
		Если ОтборРасшифровки.Получить(Поле.Ключ) <> Неопределено Тогда
			ПоказатьЗначение(, ОтборРасшифровки.Получить(Поле.Ключ));
			Прервать;
		КонецЕсли;		
	КонецЦикла;
	
	Расшифровка = Неопределено;//нет расшифровки
	
	СтандартнаяОбработка = Ложь;

КонецПроцедуры

Процедура Расшифровать_Раскрытие(Форма, НастройкиРасшифровки, ОписаниеРасшифровки, ДополнительныеПараметры, ВыполненноеДействие)
	
	ДанныеРасшифровки 		= ДополнительныеПараметры.ПараметрыРасшифровки.ДанныеРасшифровки;	
	АдресСхемы				= ДополнительныеПараметры.ПараметрыРасшифровки.АдресСКД;
	Отчет 					= Форма.Отчет;
	
	ДоработатьНастройкиПоРасшифровке(НастройкиРасшифровки, ДополнительныеПараметры, ДанныеРасшифровки, ОписаниеРасшифровки);
	Если ДополнительныеПараметры.Свойство("Счет") Тогда
		НастройкиРасшифровки.ДополнительныеСвойства.Вставить("Счет", ДополнительныеПараметры.Счет);
	КонецЕсли;
	НастройкиРасшифровки.ДополнительныеСвойства.Вставить("Отступ", 				ДополнительныеПараметры.Отступ);
	НастройкиРасшифровки.ДополнительныеСвойства.Вставить("ОтборРасшифровки",	ДополнительныеПараметры.ОтборРасшифровки);
	НастройкиРасшифровки.ДополнительныеСвойства.Вставить("ИдентификаторФормы",	Форма.УникальныйИдентификатор);
	НастройкиРасшифровки.ДополнительныеСвойства.Вставить("ОписаниеРасшифровки",	ОписаниеРасшифровки);
	
	ЗаголовокГруппировки = СтрШаблон("%1 , %2", ДополнительныеПараметры.Счет, ВыполненноеДействие);
	
	НомерСтрокиДобавления = Форма.ОтчетТабличныйДокумент.ТекущаяОбласть.Низ;	
	
	ДополнительныеСвойства = Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства;

	МСФОВызовСервераУХ.ВставитьРасшифровку(
							Форма.ОтчетТабличныйДокумент,  
							НастройкиРасшифровки, 
							ДополнительныеСвойства, 
							АдресСхемы, 
							ЗаголовокГруппировки, 
							НомерСтрокиДобавления
						);
						
	Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РасшифровкиРаскрытий", ДополнительныеСвойства.РасшифровкиРаскрытий);
						

КонецПроцедуры

Процедура Расшифровать_ОтчетРасшифровка(Форма, НастройкиРасшифровки, ОписаниеРасшифровки, ДополнительныеПараметры)
	
	Отбор = Новый Структура;
	
	Если ДополнительныеПараметры.Свойство("Счет") Тогда
		Отбор.Вставить("Счет", ДополнительныеПараметры.Счет);
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из НастройкиРасшифровки.Отбор.Элементы Цикл
		Если ЭлементИсточник.Использование 
			И (ТипЗнч(ЭлементИсточник) = Тип("ЭлементОтбораКомпоновкиДанных"))
			И (ЭлементИсточник.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) Тогда
			
			ПолеТекстом = Строка(ЭлементИсточник.ЛевоеЗначение);
			Если СтрНайти(ПолеТекстом, ".") = 0 Тогда
				Отбор.Вставить(ПолеТекстом, ЭлементИсточник.ПравоеЗначение);
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
		
	Для каждого ЭлементИсточник Из НастройкиРасшифровки.ПараметрыДанных.Элементы Цикл
		Если ЭлементИсточник.Использование 
			И (ЭлементИсточник.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный) Тогда
			
			ПолеТекстом = Строка(ЭлементИсточник.Параметр);
			Если СтрНайти(ПолеТекстом, ".") = 0 Тогда
				Отбор.Вставить(ПолеТекстом, ЭлементИсточник.Значение);
			КонецЕсли;
						
		КонецЕсли;		
	КонецЦикла;
	
	Для каждого ОтборИсточник Из ДополнительныеПараметры.ОтборРасшифровки Цикл
		
		Если (ОтборИсточник.Значение = NULL) Или (СтрНайти(ОтборИсточник.Ключ, ".") > 0) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = НастройкиРасшифровки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ОтборИсточник.Ключ));
		Если (ЗначениеПараметра <> Неопределено) Тогда
			Если ЗначениеПараметра.Использование И (ЗначениеПараметра.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ) Тогда
				Отбор.Вставить(ОтборИсточник.Ключ, ОтборИсточник.Значение);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПолеКД = Новый ПолеКомпоновкиДанных(ОтборИсточник.Ключ);
		ЗначениеПараметра = Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.НайтиПоле(ПолеКД);
		Если (ЗначениеПараметра <> Неопределено) Тогда
			Отбор.Вставить(ОтборИсточник.Ключ, ОтборИсточник.Значение);
			Продолжить;			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОписаниеРасшифровки.Свойство("Группировка") Тогда
		Отбор.Вставить("Группировка", ОписаниеРасшифровки.Группировка);
	КонецЕсли;
		
	Если (ТипЗнч(ДополнительныеПараметры.ОтборРасшифровки) = Тип("Соответствие")) //расшифровка в РСБУ: ОтборРасшифровки == Структура 
		И (ДополнительныеПараметры.ОтборРасшифровки.Получить("Отборы") <> Неопределено) Тогда
		Отбор.Вставить("Отборы", ДополнительныеПараметры.ОтборРасшифровки.Получить("Отборы"));
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта",					ОписаниеРасшифровки.Вариант);		
	ПараметрыФормы.Вставить("КлючПользовательскихНастроек",	"");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии",		Истина);
	
	Если ДополнительныеПараметры.Свойство("ИспользоватьПользовательскиеНастройки") Тогда
		ИмяОтчета = СтрРазделить(ОписаниеРасшифровки.Отчет, ".").Получить(1);
	    ПользовательскиеНастройки = ТиповыеОтчетыУХ.ПолучитьПользовательскиеНастройкиОтчета(ИмяОтчета, Отбор);
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	Иначе	
		ПараметрыФормы.Вставить("Отбор", Отбор);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПараметрыФормы") Тогда//Расшифровка СверкаВГО в КарточкаСчета РСБУ
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыФормы, ДополнительныеПараметры.ПараметрыФормы, Истина);
	КонецЕсли;
	
	ОткрытьФорму(ОписаниеРасшифровки.Отчет, ПараметрыФормы, Форма, Истина);

КонецПроцедуры

Процедура Расшифровать_Стандартно(ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	Если ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Нет Тогда		
		Возврат;	
	ИначеЕсли ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда		
		ПоказатьЗначение(, ПараметрВыполненногоДействия);
		Возврат;
	КонецЕсли;
		
	Форма 					= ДополнительныеПараметры.ФормаОтчета;	
	Отчет 					= Форма.Отчет;	
	ДанныеРасшифровки		= Форма.ОтчетДанныеРасшифровки;
	АдресСхемы				= Отчет.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.АдресСхемы;
		
	ДанныеРасшифровкиСКД = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	НастройкиСКД = ОбработкаРасшифровки.ПрименитьНастройки(ДополнительныеПараметры.Расшифровка, ДанныеРасшифровкиСКД.Настройки);
	
	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиСКД);
	Форма.СкомпоноватьРезультат();

КонецПроцедуры

#КонецОбласти

#Область ОбработкаРасшифровки

Функция РаскрытияВозможны(НастройкиСКД)

	Если НастройкиСКД.ДополнительныеСвойства.Свойство("ОтключитьРаскрытия") Тогда
		НастройкиСКД.ДополнительныеСвойства.Удалить("ОтключитьРаскрытия");
		Возврат Ложь;
	ИначеЕсли НастройкиСКД.Структура.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли ТипЗнч(НастройкиСКД.Структура[0]) <> Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат Истина;
	ИначеЕсли НастройкиСКД.Структура[0].Колонки.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьПараметрыРасшифровки(ФормаОтчета)

	Компоновщик = ФормаОтчета.Отчет.КомпоновщикНастроек;
	
	Если Не Компоновщик.Настройки.ДополнительныеСвойства.Свойство("РасшифровкиРаскрытий") Тогда
		Возврат Новый Структура("ДанныеРасшифровки,АдресСКД", ФормаОтчета.ОтчетДанныеРасшифровки, АдресСхемы(Компоновщик));
	КонецЕсли;
	
	ТабДок = ФормаОтчета.ОтчетТабличныйДокумент;
	ОблРасшифровка = ТабДок.ТекущаяОбласть;
	Если ОблРасшифровка = Неопределено Тогда
		Возврат Новый Структура("ДанныеРасшифровки,АдресСКД", ФормаОтчета.ОтчетДанныеРасшифровки, АдресСхемы(ФормаОтчета.Отчет.КомпоновщикНастроек));
	КонецЕсли;
		
	Результат = Неопределено;
	
	Если Компоновщик.Настройки.ДополнительныеСвойства.Свойство("РасшифровкиРаскрытий") Тогда
		
		МинимальнаяВысотаРаскрытия = ТабДок.ВысотаТаблицы;
		Для каждого ОписаниеРасшифровки Из Компоновщик.Настройки.ДополнительныеСвойства.РасшифровкиРаскрытий Цикл		
			
			ОблПроверки = ТабДок.Области.Найти(ОписаниеРасшифровки.Ключ);
			Если ОблПроверки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ВысотаОбл = ОблПроверки.Низ - ОблПроверки.Верх;//В случае двойного раскрытия берем меньшее по высоте
			
			Если ОблПроверки = Неопределено Тогда 
				Продолжить;
			ИначеЕсли ОблПроверки.Верх = ОблРасшифровка.Низ + 1 Тогда//строка уже раскрыта
				Компоновщик.Настройки.ДополнительныеСвойства.Вставить("ОтключитьРаскрытия");
			ИначеЕсли 
				(МинимальнаяВысотаРаскрытия >= ВысотаОбл)
				И ?(ОблПроверки.Низ = 0, Истина, ОблПроверки.Низ >= ОблРасшифровка.Низ)
				И ?(ОблПроверки.Верх = 0, Истина, ОблПроверки.Верх <= ОблРасшифровка.Верх)
				И ?(ОблПроверки.Лево = 0, Истина, ОблПроверки.Лево <= ОблРасшифровка.Лево)
				И ?(ОблПроверки.Право = 0, Истина, ОблПроверки.Право >= ОблРасшифровка.Право)
				Тогда
				
				Результат = ОписаниеРасшифровки.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Возврат Новый Структура("ДанныеРасшифровки,АдресСКД", ФормаОтчета.ОтчетДанныеРасшифровки, АдресСхемы(Компоновщик));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция АдресСхемы(Компоновщик)

	 Возврат ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Компоновщик.Настройки.ДополнительныеСвойства, "АдресСхемы");

КонецФункции

Функция ПолучитьОписаниеРасшифровки(ВыполненноеДействие)
	
	ОписаниеОтчетаПриемника = Новый Структура("Отчет,Вариант,Группировка");
	
	ПутьКОтчету = СтрРазделить(ВыполненноеДействие, "/");
	
	Если СтрНайти(ВыполненноеДействие, "Отчет.") > 0 Тогда //Пример: "Отчеты.ОСВ/Вариант1/Счет,Субконто1"
		
		ОписаниеОтчетаПриемника.Вставить("Отчет", ПутьКОтчету[0]);
		ОписаниеОтчетаПриемника.Вставить("Вариант", ?(ПутьКОтчету.Количество() > 1, ПутьКОтчету[1], Неопределено));
		
		ДобавитьГруппировкиВОписание(ОписаниеОтчетаПриемника, ?(ПутьКОтчету.Количество() > 2, ПутьКОтчету[2], ""));
		
	ИначеЕсли ПутьКОтчету.Количество() > 1 Тогда //Пример: "Вариант1/Счет,Субконто1"
		
		ОписаниеОтчетаПриемника.Вставить("Вариант", ?(ПутьКОтчету.Количество() > 0, ПутьКОтчету[0], Неопределено));
		ДобавитьГруппировкиВОписание(ОписаниеОтчетаПриемника, ?(ПутьКОтчету.Количество() > 1, ПутьКОтчету[1], ""));
		
	Иначе //Пример: "Счет,Субконто1"
		
		ДобавитьГруппировкиВОписание(ОписаниеОтчетаПриемника, ВыполненноеДействие);
		
	КонецЕсли;
	
	Возврат ОписаниеОтчетаПриемника;

КонецФункции

Процедура ДобавитьГруппировкиВОписание(ОписаниеОтчетаПриемника, ИменаГруппировок = "")

	Если ИменаГруппировок = "" Тогда
		Возврат
	КонецЕсли;
	
	ОписаниеОтчетаПриемника.Вставить("Группировка", СтрРазделить(ИменаГруппировок, ","));
	
КонецПроцедуры

Функция ПолучитьПериодИзРасшифровки(ОтборРасшифровки)
	
	Для каждого Элемент Из ОтборРасшифровки Цикл
		Если СтрНачинаетсяС(Элемент.Ключ, "Периоды.") Тогда
			
			ПериодичностьСтрока = СтрЗаменить(Элемент.Ключ, "Периоды.Период", "");
			ПериодичностьСтрока = СтрЗаменить(ПериодичностьСтрока, "Периоды.", "");
			Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + ПериодичностьСтрока);
			
			СтандартныйПериод = Новый СтандартныйПериод;
			СтандартныйПериод.ДатаНачала = ОбщегоНазначенияУХ.ДатаНачалаПериода(Элемент.Значение, Периодичность);
			СтандартныйПериод.ДатаОкончания = ОбщегоНазначенияУХ.ДатаКонцаПериода(Элемент.Значение, Периодичность);
			
			Возврат СтандартныйПериод;
			
		КонецЕсли;			
	КонецЦикла;
	
КонецФункции

Процедура Подключаемый_ОбработкаРасшифровкиУП(
		ВыбранноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыбранноеДействие) 
			= Тип("ДействиеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		
		МСФОКлиентУХ.Расшифровать_Стандартно(
				ВыбранноеДействие, 
				ПараметрВыполненногоДействия, 
				ДополнительныеПараметры
			);
			
		Возврат;
		
	ИначеЕсли ТипЗнч(ВыбранноеДействие) = Тип("Структура") 
		И ВыбранноеДействие.Свойство("Имя")
		И СтрНачинаетсяС(ВыбранноеДействие.Имя, "УстановитьУП") Тогда
		
		ДополнительныеПараметры.Отбор.Вставить("Сценарий", ВыбранноеДействие.Сценарий);
								
		ПараметрыФормы = Неопределено;
		
		Оповещение = Новый ОписаниеОповещения(
							"Подключаемый_ВыборУП", 
							МСФОКлиентУХ, 
							ДополнительныеПараметры
						);
		
		ОткрытьФорму("Документ.УчетнаяПолитикаМСФО.ФормаВыбора", 
						ПараметрыФормы, 
						ДополнительныеПараметры.ФормаОтчета, 
						Истина,
						,
						,
						Оповещение
					);
		
		Возврат;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура Подключаемый_ВыборУП(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;//отмена
	КонецЕсли;
	
	Отбор = ДополнительныеПараметры.ОтборРасшифровки;
	
	МСФОВызовСервераУХ.ЗаписатьУПМСФО(Результат, 
		Отбор.Организация, Отбор.Сценарий, Отбор.Дата);

	ОтчетыКлиент.СформироватьОтчет(ДополнительныеПараметры.ФормаОтчета);
	
КонецПроцедуры

#КонецОбласти

#Область РаскрытиеВТеле

Процедура ДоработатьНастройкиПоРасшифровке(НастройкиРасшифровки, ДополнительныеПараметры, ДанныеРасшифровки, ОписаниеРасшифровки)
	
	ДобавитьОтборыПоРасшифровке(НастройкиРасшифровки, ДанныеРасшифровки, ДополнительныеПараметры.Расшифровка);
	
	Группировка = НастройкиРасшифровки.Структура[0];
	Если ТипЗнч(Группировка) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Группировка = Группировка.Строки[0];
	КонецЕсли;
	Группировка.ПоляГруппировки.Элементы.Очистить();
	Группировка.Структура.Очистить();
	
	ГруппаПолей = НастройкиРасшифровки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПолей.Заголовок = НСтр("ru = 'Группировка'");
	ГруппаПолей.Расположение = РасположениеПоляКомпоновкиДанных.Вместе;
	
	Для Каждого ИмяПоля Из ОписаниеРасшифровки.Группировка Цикл
		
		ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Использование = Истина;
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
		ВыбранноеПоле = ГруппаПолей.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
		
	КонецЦикла;
	
	НастройкиРасшифровки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьПараметрыДанных", 				ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиРасшифровки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьОтбор", 							ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	НастройкиРасшифровки.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", 	РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиРасшифровки.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", 	РасположениеИтоговКомпоновкиДанных.Нет);
	
	//НастройкиРасшифровки.УсловноеОформление.Элементы.Добавить().Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.БледноЗеленый);
	
КонецПроцедуры

Процедура ДобавитьОтборыПоРасшифровке(НастройкиРасшифровки, ДанныеРасшифровки, Расшифровка)
	
	РасшифровкаП = Расшифровка;
	ЗначениеДанныеРасшифровки = ДанныеРасшифровки;
	ПоляРасшифровки = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(РасшифровкаП, ЗначениеДанныеРасшифровки, Ложь);
	Для каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
		
		Если ПолеРасшифровки.Ключ = "КорСчет" Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					НастройкиРасшифровки.Отбор, 
					ПолеРасшифровки.Ключ,
					ВидСравненияКомпоновкиДанных.Равно, 
					ПолеРасшифровки.Значение,
					,
					Истина
				);
				
			Продолжить;	
		
		КонецЕсли;
		
		ПараметрКД = Новый ПараметрКомпоновкиДанных(ПолеРасшифровки.Ключ);
		Если НастройкиРасшифровки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ИзменитьЭлементыОтбора(
					НастройкиРасшифровки.Отбор, 
					Новый ПолеКомпоновкиДанных(ПолеРасшифровки.Ключ),
					, 
					ПолеРасшифровки.Значение,
					ВидСравненияКомпоновкиДанных.Равно,
					Истина
				);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ЗагрузкаТаблицей_БСП

// См. МСФОУХ.ПриОпределенииВидовПодключаемыхКоманд
Процедура ЗагрузкаДанных_Подключаемый(ПараметрКоманды, ПараметрыВыполненияКоманды) Экспорт
	
	Форма = ПараметрыВыполненияКоманды.Форма;
	Попытка
		Объект = Форма.Объект;
	Исключение
		Сообщить(НСтр("ru = 'Объект не предназначен для загрузки'"));
		Возврат;
	КонецПопытки;
	
	Если Не ОбъектЗаполненДляЗагрузки(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = Объект.Ссылка;
	ДопПараметры = ПараметрыВыполненияКоманды.ОписаниеКоманды.ДополнительныеПараметры;
	
	ТипПриемника = ТипЗнч(Объект.Ссылка);
	ОписаниеТаблицы = МСФОВызовСервераУХ.ПолучитьОписаниеТаблицыЗагрузки(ТипПриемника, ДопПараметры);
	
	ПараметрыТипов = ВстраиваниеУХКлиентСервер.ЗначенияПараметровОтбораТипов(Объект, Форма);
	Если ПараметрыТипов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТаблицы.Вставить("ОтборыТипов", Новый Структура("Параметры", ПараметрыТипов));
	ОписаниеТаблицы.Вставить("ИдентификаторНазначения", Форма.УникальныйИдентификатор);
	
	ПараметрыОповещения = Новый Структура("Форма, ОписаниеТаблицы", Форма, ОписаниеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗаголовокФормы",			СтрШаблон(НСтр("ru = 'Загрузка <%1>'"), ТипЗнч(Ссылка)));
	ПараметрыФормы.Вставить("ЗаголовокКнопкиЗагрузить", НСтр("ru = 'Загрузить'"));
	ПараметрыФормы.Вставить("АдресТаблицы", 			ПолучитьАдресТаблицыЗагрузки(Форма, ОписаниеТаблицы));
	ПараметрыФормы.Вставить("КэшируемыеЗначения",		ОписаниеТаблицы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("Подключаемый_ПриЗакрытии", 
									ЭтотОбъект, ПараметрыОповещения);
								
	ОткрытьФорму("Обработка.ЗагрузкаДанныхТаблицей.Форма.Форма", 
					ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
					
КонецПроцедуры

Функция ОбъектЗаполненДляЗагрузки(Объект)

	Контекст = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(Контекст, Объект);
	
	Если Контекст.Организация = Неопределено Тогда
		Возврат Истина;//нет организации
	ИначеЕсли ЗначениеЗаполнено(Контекст.Организация) Тогда	
		Возврат Истина;
	КонецЕсли;
	
	Сообщить(НСтр("ru = 'Не заполнена организация. Загрузка невозможна.'"));
	
	Возврат Ложь;

КонецФункции

Функция ПолучитьАдресТаблицыЗагрузки(Форма, ОписаниеТаблицы)

	СтрокаИсточника = Новый Структура;
	Для каждого КолонкаИсточник Из ОписаниеТаблицы.Колонки Цикл
		СтрокаИсточника.Вставить(КолонкаИсточник.Представление);
	КонецЦикла;
	
	ТаблицаИсточник = Новый Массив;
	
	ТаблицаТЧ = ПолучитьТаблицуОбъекта(Форма.Объект, ОписаниеТаблицы);

	Для каждого СтрокаТЧ Из ТаблицаТЧ Цикл
		стр = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтрокаИсточника);
		ЗаполнитьЗначенияСвойств(стр, СтрокаТЧ);
		ТаблицаИсточник.Добавить(стр);
	КонецЦикла;
	
	Возврат МСФОВызовСервераУХ.ПолучитьАдресТаблицыЗагрузки(
		ТаблицаИсточник, ОписаниеТаблицы, Форма.УникальныйИдентификатор);

КонецФункции

Функция ПолучитьТаблицуОбъекта(Объект, ОписаниеТаблицы)
	
	Если СтрНачинаетсяС(ОписаниеТаблицы.ИмяТЧ, "Движения.") Тогда
		Возврат Объект.Движения[СтрЗаменить(ОписаниеТаблицы.ИмяТЧ, "Движения.", "")];
	Иначе	
		Возврат Объект[ОписаниеТаблицы.ИмяТЧ];
	КонецЕсли;
	
КонецФункции

Процедура Подключаемый_ПриЗакрытии(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Не ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	ОписаниеТаблицы = ДополнительныеПараметры.ОписаниеТаблицы;
	
	ОписаниеТаблицы.Вставить("АдресТаблицы", РезультатЗакрытия);
	
	Попытка
		Форма.Подключаемый_ЗаполнитьДокумент(Неопределено, ОписаниеТаблицы);
		Возврат;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		//ЗаписьЖурналаРегистрации("ЗагрузкаДанных." + ОписаниеТаблицы.ИмяТЧ, , , ,ТекстОшибки); 
		//Форма не интегрирована, попытаемся просто заполнить колонки
	КонецПопытки;
	
	ТабИсточник = МСФОВызовСервераУХ.ПолучитьМассивДляЗагрузки(ОписаниеТаблицы);
	
	
	тчПриемник = ПолучитьТаблицуОбъекта(Форма.Объект, ОписаниеТаблицы);
	тчПриемник.Очистить();
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТабИсточник, тчПриемник);
	
	ДоработатьПослеЗагрузки(Форма, ОписаниеТаблицы);
	
	Форма.Модифицированность = Истина;
	
	УдалитьИзВременногоХранилища(РезультатЗакрытия);
	
КонецПроцедуры

Процедура ДоработатьПослеЗагрузки(Форма, ОписаниеТаблицы)

	тчПриемник = Форма.Объект[ОписаниеТаблицы.ИмяТЧ];	
	Если ОписаниеТаблицы.ТипПриемника = Тип("ДокументСсылка.РезервыПоДЗИАвансамВыданным") Тогда
		Заполнить_РезервДЗ(Форма);	
	ИначеЕсли ОписаниеТаблицы.ТипПриемника = Тип("ДокументСсылка.РезервыПоЗапасам") Тогда	
		Заполнить_РезервМПЗ(Форма);
	КонецЕсли;

КонецПроцедуры

Процедура Заполнить_РезервДЗ(Форма)

	Объект = Форма.Объект;
	КонтекстДокумента = Объект;
	
	КонецПериода = КонецДня(Объект.ПериодОтчета.ДатаОкончания);
	РеквизитыУП = МСФОВызовСервераУХ.РеквизитыДляФормыУП(Объект.Организация, КонецПериода, Объект.Сценарий);
		
	//дозаполнение
	
	КэшируемыеЗначения = Неопределено;

	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("ЗаполнитьДатуОкончанияОтсрочки");
	
	Если РеквизитыУП.ФормироватьПроводкиМСФО Тогда
	    СтруктураДействий.Вставить("ЗаполнитьСчетаЗадолженностиПоСчетуМСФО",Новый Структура("Контекст", КонтекстДокумента));
	Иначе	
		СтруктураДействий.Вставить("ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ",Новый Структура("Контекст", КонтекстДокумента));
	КонецЕсли;
	
	СтруктураДействий.Вставить("ЗаполнитьКоличествоДнейПросрочки", Новый Структура("КонецПериода", КонецПериода));
	СтруктураДействий.Вставить("ЗаполнитьДолюПросрочки");
	СтруктураДействий.Вставить("ЗаполнитьКоличествоДнейОтсрочки");
	СтруктураДействий.Вставить("ЗаполнитьКоэффициентыРезерва", Новый Структура("КонецПериода,Контекст", КонецПериода, КонтекстДокумента));
	СтруктураДействий.Вставить("РассчитатьКоэффициентРезерва"); 
	СтруктураДействий.Вставить("РассчитатьРезервМСФО");
	СтруктураДействий.Вставить("РассчитатьОстатокЗадолженностиМСФО", Новый Структура("Контекст", КонтекстДокумента));
	СтруктураДействий.Вставить("РассчитатьНачислениеРезерваМСФО", Новый Структура("Контекст", КонтекстДокумента));
	
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьТЧ_РезервыДЗ(Объект.Резервы, СтруктураДействий, КэшируемыеЗначения);
	
	Объект.ПараметрыРасчета.Очистить();
	Для каждого СтрокаЗначения Из КэшируемыеЗначения.РасчетныеЗначенияПараметров Цикл		
		ЗаполнитьЗначенияСвойств(Объект.ПараметрыРасчета.Добавить(), СтрокаЗначения);			
	КонецЦикла;	
	Объект.ПараметрыРасчета.Сортировать("КлючСвязи,ПараметрРасчета");
	
КонецПроцедуры

Процедура Заполнить_РезервМПЗ(Форма)

	Объект = Форма.Объект;
	КонтекстДокумента = Объект;
	
	ДанныеЗаполнения = Форма.КэшируемыеЗначения;
	
	//дозаполнение
	КонецПериода = КонецДня(Объект.Дата);
	РеквизитыУП = МСФОВызовСервераУХ.РеквизитыДляФормыУП(КонтекстДокумента.Организация, КонецПериода, КонтекстДокумента.Сценарий);
	
	СтруктураДействий = Новый Структура;	
	СтруктураДействий.Вставить("РассчитатьВычисляемыеПоля", Объект.ПериодОтчета);
	Если Не РеквизитыУП.ФормироватьПроводкиМСФО Тогда
		
		ПараметрыЦен = Новый Структура("Дата,Организация", КонецДня(Объект.Дата), Объект.Организация);
		СтруктураДействий.Вставить("ЗаполнитьСчетУчетаМСФО", ДанныеЗаполнения.ШаблонТрансляции);
		СтруктураДействий.Вставить("ЗаполнитьСчетРезерваМСФО",);
		СтруктураДействий.Вставить("ЗаполнитьЧистуюЦенуПродажи", ПараметрыЦен);
				
		Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ШаблонТрансляции) Тогда
			Сообщить(НСтр("ru = 'Не удалось определить основной шаблон трансляции.'"));
		КонецЕсли;

	КонецЕсли;
	
	КэшируемыеЗначения = Неопределено;
	
	ОбработкаТабличныхЧастейКлиентСерверУХ.ОбработатьТЧ_РезервыМПЗ(Объект.Резервы, СтруктураДействий, КэшируемыеЗначения);

КонецПроцедуры

#КонецОбласти
