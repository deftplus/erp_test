
#Область РасчетРасхождений
// Процедуры и функции расчета расхождений

Функция ВернутьТекстЗапросаРасхождений(РазделВГО, Отбор=Неопределено) Экспорт
	ГруппаАналитик						= РазделВГО.ГруппаРаскрытия;
	мАналитик							= ГруппаАналитик.Аналитики.НайтиСтроки(Новый Структура("ИспользоватьДляСверки", Истина));
	мРесурсов							= ГруппаАналитик.Ресурсы.НайтиСтроки(Новый Структура("ТипДляЭлиминации", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки));
	ТЧИД								= РазделВГО.ИсточникиДанных;
	флРегистрироватьНулевыеРасхождения	= РазделВГО.Владелец.РегистрироватьНулевыеРасхождения;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
		|	КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность / &КурсГр КАК Курс
		|ПОМЕСТИТЬ КурсыВалютВВалютеГруппы
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК КурсыВалютСрезПоследних
		|;
		|";
	ТекстЗапросаОбъединениеД =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для объединения данных дебиторов
		|"; // объединяем отдельные запросы в таблицу: ДебиторыРазвернуто
	ТекстЗапросаОбъединениеК =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для объединения данных кредиторов
		|"; // объединяем отдельные запросы в таблицу: КредиторыРазвернуто
	ТекстЗапросаГруппировка =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для группировки значений Дебиторов
		|"; // группируем данные в таблицу Дебиторы и Кредиторы
	ТекстЗапросаОсновнойРазвернуто =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для вычисления расхождений
		|"; // соединяем таблицу дебиторов с таблицей кредиторов и вычисляем расхождения
	ТекстЗапросаОсновной =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для группировки расхождений
		|"; // группируем таблицу расхождений
	ТекстЗапросаУничтоженияВТ =
		"////////////////////////////////////////////////////////////////////////////////
		|// Уничтожаем временные таблицы
		|";
	
	КолАналитик = мАналитик.Количество();
	КолРесурсов = мРесурсов.Количество();
	
	Если КолАналитик < 3 Тогда // Организация, Контрагент, ВалютаВзаиморасчетов
		ТекстСообщения = НСтр("ru = 'Некорректная настройка сверки (%1). Необходимы аналитики: <Организация>, <Контрагент>, <ВалютаВзаиморасчетов>.'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, РазделВГО);
		Возврат "";
	КонецЕсли;
	Если КолРесурсов = 0 Тогда // ПоказательСверки
		ТекстСообщения = НСтр("ru = 'Некорректная настройка сверки (%1). Необходим хотябы один ресурс.'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, РазделВГО);
		Возврат "";
	КонецЕсли;
	
	ТекстАналитик = ""; // перечень аналитик с именами приведенными к стандартным
	ТекстАналитикТЗ = ""; // перечень аналитик с именами из группы раскрытия с приведением к стандартным именам
	ТекстУсловияСоединенияПоДопРеквизитам = ""; // перечень условий для соединения таблиц данных. условия по доп. реквизитам сверки.
	ИмяАналитикиОрганизации = "";
	ИмяАналитикиКонтрагнета = "";
	ИмяАналитикиВалютыВзаиморасчетов = "";
	НомерАналитики = 1;
	Для Каждого Аналитика_ Из мАналитик Цикл
		ИмяАналитики = ИмяАналитикиДляСверки(Аналитика_); // Стандартное имя аналитики
		ТекстАналитик = ТекстАналитик + "	ИД#." + ИмяАналитики + ?(НомерАналитики=КолАналитик, "", "," + Символы.ПС);
		
		Если Аналитика_.ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Организация Тогда
			ТекстАналитикТЗ = ТекстАналитикТЗ + "	ИД#." + Аналитика_.Имя + " КАК Организация" + ?(НомерАналитики=КолАналитик, "", "," + Символы.ПС);
			ИмяАналитикиОрганизации = ИмяАналитики;
		ИначеЕсли Аналитика_.ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Контрагент Тогда
			ТекстАналитикТЗ = ТекстАналитикТЗ + "	ИД#." + Аналитика_.Имя + " КАК Контрагент" + ?(НомерАналитики=КолАналитик, "", "," + Символы.ПС);
			ИмяАналитикиКонтрагнета = ИмяАналитики;
		ИначеЕсли Аналитика_.ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ВалютаВзаиморасчетов Тогда
			ТекстАналитикТЗ = ТекстАналитикТЗ + "	ИД#." + Аналитика_.Имя + " КАК ВалютаВзаиморасчетов" + ?(НомерАналитики=КолАналитик, "", "," + Символы.ПС);
			ИмяАналитикиВалютыВзаиморасчетов = ИмяАналитики;
		Иначе
			ТекстАналитикТЗ = ТекстАналитикТЗ + "	ИД#." + Аналитика_.Имя + " КАК " + ИмяАналитики + ?(НомерАналитики=КолАналитик, "", "," + Символы.ПС);
			ТекстУсловияСоединенияПоДопРеквизитам = ТекстУсловияСоединенияПоДопРеквизитам +
				"			И Дебиторы." + ИмяАналитики + " = Кредиторы." + ИмяАналитики + Символы.ПС;
		КонецЕсли;
		
		НомерАналитики = НомерАналитики + 1;
	КонецЦикла;
	
	Если ИмяАналитикиОрганизации = "" ИЛИ ИмяАналитикиКонтрагнета = "" ИЛИ ИмяАналитикиВалютыВзаиморасчетов = "" Тогда
		ТекстНедостающихАналитик = ?(ИмяАналитикиОрганизации = "",НСтр("ru = '""Организация""'"),"");
		ТекстНедостающихАналитик = ТекстНедостающихАналитик + ?(ТекстНедостающихАналитик="","",", ")
			+ ?(ИмяАналитикиКонтрагнета = "",НСтр("ru = '""Контрагент""'"),"");
		ТекстНедостающихАналитик = ТекстНедостающихАналитик + ?(ТекстНедостающихАналитик="","",", ")
			+ ?(ИмяАналитикиВалютыВзаиморасчетов = "",НСтр("ru = '""Валюта взаиморасчетов""'"),"") + ".";
			
		ТекстСообщения = НСтр("ru = 'Некорректная настройка сверки. Необходимы аналитики:'") + ТекстНедостающихАналитик;
		ВызватьИсключение ТекстСообщения;
			
		Возврат "";
		
	КонецЕсли;

	// ресурс сверки всегда один "ПоказательСверки"
	ТекстРесурсов = "	ИД#.ПоказательСверки КАК ПоказательСверки" + Символы.ПС;
	
	// Запрос вычисления расхождений по двум таблицам
	ТекстАналитикКредитора = СтрЗаменить(ТекстАналитик,"#.Организация","#.К_");
	ТекстАналитикКредитора = СтрЗаменить(ТекстАналитикКредитора,"#.Контрагент","#.Организация");
	ТекстАналитикКредитора = СтрЗаменить(ТекстАналитикКредитора,"#.К_","#.Контрагент");
	ТекстАналитикКредитора = СтрЗаменить(ТекстАналитикКредитора,"ИД#","Кредиторы");
	
	// Запрос для группировки данных дебиторов и кредиторов
	ТекстЗапросаГруппировка = ТекстЗапросаГруппировка +
		"ВЫБРАТЬ
		|" + СтрЗаменить(ТекстАналитик,"ИД#","Дебиторы") + ",
		|	СУММА(Дебиторы.ПоказательСверки) КАК ПоказательСверки
		|ПОМЕСТИТЬ ДебиторыГр
		|ИЗ
		|	Дебиторы КАК Дебиторы
		|ГДЕ
		|	Дебиторы.Организация = &Дебитор
		|	И Дебиторы.Контрагент = &Кредитор
		|
		|СГРУППИРОВАТЬ ПО
		|" + СтрЗаменить(ТекстАналитик,"ИД#","Дебиторы") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|// Запрос для группировки значений Кредиторов
		|ВЫБРАТЬ
		|" + СтрЗаменить(ТекстАналитик,"ИД#","Кредиторы") + ",
		|	СУММА(Кредиторы.ПоказательСверки) КАК ПоказательСверки
		|ПОМЕСТИТЬ КредиторыГр
		|ИЗ
		|	Кредиторы КАК Кредиторы
		|ГДЕ
		|	Кредиторы.Организация = &Кредитор
		|	И Кредиторы.Контрагент = &Дебитор
		|
		|СГРУППИРОВАТЬ ПО
		|" + СтрЗаменить(ТекстАналитик,"ИД#","Кредиторы") + "
		|;
		|";
		
	ТекстЗапросаОсновнойРазвернуто = ТекстЗапросаОсновнойРазвернуто +
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Дебиторы.ПоказательСверки - ЕСТЬNULL(Кредиторы.ПоказательСверки, 0) < 0
		|			ТОГДА -1 * (Дебиторы.ПоказательСверки - ЕСТЬNULL(Кредиторы.ПоказательСверки, 0))
		|		ИНАЧЕ Дебиторы.Показательсверки - ЕСТЬNULL(Кредиторы.ПоказательСверки, 0)
		|	КОНЕЦ КАК СуммаРасхождения,
		|	ЕСТЬNULL(Дебиторы.Показательсверки, 0) КАК СуммаДебитора,
		|	ЕСТЬNULL(Кредиторы.ПоказательСверки, 0) КАК СуммаКредитора,
		|" + СтрЗаменить(ТекстАналитик,"ИД#","Дебиторы") + "
		|ПОМЕСТИТЬ РасхожденияРазвернуто
		|ИЗ
		|	ДебиторыГр КАК Дебиторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ КредиторыГр КАК Кредиторы
		|		ПО Дебиторы.Организация = Кредиторы.Контрагент
		|		И Дебиторы.Контрагент = Кредиторы.Организация
		|" + ТекстУсловияСоединенияПоДопРеквизитам + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(Дебиторы.ПоказательСверки, 0) - Кредиторы.ПоказательСверки < 0
		|			ТОГДА -1 * (ЕСТЬNULL(Дебиторы.Показательсверки, 0) - Кредиторы.ПоказательСверки)
		|		ИНАЧЕ ЕСТЬNULL(Дебиторы.ПоказательСверки, 0) - Кредиторы.ПоказательСверки
		|	КОНЕЦ,
		|	ЕСТЬNULL(Дебиторы.ПоказательСверки, 0) КАК СуммаДебитора,
		|	ЕСТЬNULL(Кредиторы.ПоказательСверки, 0) КАК СуммаКредитора,
		|" + ТекстАналитикКредитора + "
		|ИЗ
		|	КредиторыГр КАК Кредиторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДебиторыГр КАК Дебиторы
		|		ПО Дебиторы.Организация = Кредиторы.Контрагент
		|		И Дебиторы.Контрагент = Кредиторы.Организация
		|" + ТекстУсловияСоединенияПоДопРеквизитам + "
		|ГДЕ
		|	Дебиторы.Организация ЕСТЬ NULL 
		|;
		|";
		
	ТекстЗапросаОсновной = ТекстЗапросаОсновной +
		"ВЫБРАТЬ
		|	СУММА(РасхожденияРазвернуто.СуммаРасхождения) КАК СуммаРасхождения,
		|	СУММА(РасхожденияРазвернуто.СуммаДебитора) КАК СуммаДебитора,
		|	СУММА(РасхожденияРазвернуто.СуммаКредитора) КАК СуммаКредитора,
		|	СУММА(РасхожденияРазвернуто.СуммаРасхождения * ЕстьNULL(КурсыВалютВВалютеГруппы.Курс,1)) КАК СуммаРасхожденияГр,
		|	СУММА(РасхожденияРазвернуто.СуммаДебитора * ЕстьNULL(КурсыВалютВВалютеГруппы.Курс,1)) КАК СуммаДебитораГр,
		|	СУММА(РасхожденияРазвернуто.СуммаКредитора * ЕстьNULL(КурсыВалютВВалютеГруппы.Курс,1)) КАК СуммаКредитораГр,
		|" + СтрЗаменить(ТекстАналитик,"ИД#","РасхожденияРазвернуто") + "
		|ИЗ
		|	РасхожденияРазвернуто КАК РасхожденияРазвернуто
		|	ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
		|		ПО РасхожденияРазвернуто.Валютавзаиморасчетов = КурсыВалютВВалютеГруппы.Валюта
		|
		|СГРУППИРОВАТЬ ПО
		|" + СтрЗаменить(ТекстАналитик,"ИД#","РасхожденияРазвернуто");

	флПервыйЗапросД = Истина;
	флПервыйЗапросК = Истина;
	ФлЕстьД = Ложь;
	флЕстьК = Ложь;
	флОтборПоЗнаку = Истина;
	
	Для Каждого ИД_ Из ТЧИД Цикл
		НомерИД = ИД_.НомерСтроки;
		СпособОпределенияНаправленияУчета = ИД_.СпособОпределенияНаправленияУчета;
		Если СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
			флЭтоЗапросДебитора = Истина;
			флЭтоЗапросКредитора = Истина;
			флОтборПоЗнаку = Истина;
			флЕстьД = Истина;
			флЕстьК = Истина;
		ИначеЕсли СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет Тогда
			флЭтоЗапросДебитора = Истина;
			флЭтоЗапросКредитора = Ложь;
			флОтборПоЗнаку = Ложь;
			флЕстьД = Истина;
			
		ИначеЕсли СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит Тогда
			флЭтоЗапросДебитора = Ложь;
			флЭтоЗапросКредитора = Истина;
			флОтборПоЗнаку = Ложь;
			флЕстьК = Истина;
		КонецЕсли;
		
		Если флЭтоЗапросДебитора Тогда
			ТекстАналитикДт = СтрЗаменить(ТекстАналитик, "ИД#", "ИД_Дт" + НомерИД); // стандартные аналитики для дальнейших запросов
			Если флОтборПоЗнаку Тогда
				ТекстРеквизитаДт = "	ВЫБОР КОГДА (ВЫРАЗИТЬ(ИД_Дт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО) <0) ТОГДА -1*(ВЫРАЗИТЬ(ИД_Дт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО)) ИНАЧЕ ВЫРАЗИТЬ(ИД_Дт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО) КОНЕЦ КАК ПоказательСверки";
			Иначе
				ТекстРеквизитаДт = "	ВЫРАЗИТЬ(ИД_Дт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО) КАК ПоказательСверки";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ" + Символы.ПС;
			
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстАналитикТЗ, "ИД#", "ИД_Дт" + НомерИД) + "," + Символы.ПС;
			
			ИмяРесурсаСверки = "";
			НомерРесурса = 1;
			Для Каждого Ресурс_ Из мРесурсов Цикл
				Если Ресурс_.ТипДляЭлиминации = Перечисления.ТипПоказателяЭлиминации.ПоказательСверки Тогда
					ИмяРесурсаСверки = Ресурс_.Имя;
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "	ИД_Дт" + НомерИД + "." + Ресурс_.Имя + ?(НомерРесурса=КолРесурсов,"", " + ");
				НомерРесурса = НомерРесурса + 1;
			КонецЦикла;
			Если ИмяРесурсаСверки = "" Тогда
				ИмяРесурсаСверки = "ПоказательСверки";
			КонецЕсли;
		
			ТекстЗапроса = ТекстЗапроса + " КАК ПоказательСверки" + Символы.ПС;
			
			ТекстЗапроса = ТекстЗапроса +
				"ПОМЕСТИТЬ ИД_Дт" + НомерИД + "
				|ИЗ
				|	&ИД_Дт" + НомерИД + " КАК ИД_Дт" + НомерИД + Символы.ПС;
			
			Если флОтборПоЗнаку Тогда
				ТекстЗапроса = ТекстЗапроса + 
					"ГДЕ
		        	|	ИД_Дт" + НомерИД + "." + ИмяРесурсаСверки + " > 0";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +
				";
				|
				|";
			
			ТекстЗапросаУничтоженияВТ = ТекстЗапросаУничтоженияВТ + "УНИЧТОЖИТЬ " + "ИД_Дт" + НомерИД + ";" + Символы.ПС + Символы.ПС;
			
			Если НЕ флПервыйЗапросД Тогда
				ТекстЗапросаОбъединениеД = ТекстЗапросаОбъединениеД + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|";
			КонецЕсли;
			ТекстЗапросаОбъединениеД = ТекстЗапросаОбъединениеД +
				"ВЫБРАТЬ
				|"+ ТекстАналитикДт + ",
				|" + ТекстРеквизитаДт + "
				|";
			Если флПервыйЗапросД Тогда
				ТекстЗапросаОбъединениеД = ТекстЗапросаОбъединениеД +
					"ПОМЕСТИТЬ Дебиторы" + Символы.ПС;
				флПервыйЗапросД = Ложь;
			КонецЕсли;
			ТекстЗапросаОбъединениеД = ТекстЗапросаОбъединениеД +
			"ИЗ
			|	ИД_Дт" + НомерИД + " КАК ИД_Дт" + НомерИД;
		КонецЕсли;
		
		Если флЭтоЗапросКредитора Тогда
			ТекстАналитикКт = СтрЗаменить(ТекстАналитик, "ИД#", "ИД_Кт" + НомерИД);  // стандартные аналитики для дальнейших запросов
			
			Если флОтборПоЗнаку Тогда
				ТекстРеквизитаКт = "	ВЫБОР КОГДА (ВЫРАЗИТЬ(ИД_Кт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО) <0) ТОГДА -1*(ВЫРАЗИТЬ(ИД_Кт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО)) ИНАЧЕ ВЫРАЗИТЬ(ИД_Кт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО) КОНЕЦ КАК ПоказательСверки";
			Иначе
				ТекстРеквизитаКт = "	ВЫРАЗИТЬ(ИД_Кт" + НомерИД + ".ПоказательСверки КАК ЧИСЛО) КАК ПоказательСверки";
			КонецЕсли;
		
			ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ" + Символы.ПС;
			ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстАналитикТЗ, "ИД#", "ИД_Кт" + НомерИД) + "," + Символы.ПС;
			
			ИмяРесурсаСверки = "";
			НомерРесурса = 1;
			Для Каждого Ресурс_ Из мРесурсов Цикл
				Если Ресурс_.ТипДляЭлиминации = Перечисления.ТипПоказателяЭлиминации.ПоказательСверки Тогда
					ИмяРесурсаСверки = Ресурс_.Имя;
				КонецЕсли;
				ТекстЗапроса = ТекстЗапроса + "	ИД_Кт" + НомерИД + "." + Ресурс_.Имя + ?(НомерРесурса=КолРесурсов,"", " + ");
				НомерРесурса = НомерРесурса + 1;
			КонецЦикла;
			Если ИмяРесурсаСверки = "" Тогда
				ИмяРесурсаСверки = "ПоказательСверки";
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + " КАК ПоказательСверки" + Символы.ПС;
			
			ТекстЗапроса = ТекстЗапроса +
				"ПОМЕСТИТЬ ИД_Кт" + НомерИД + "
				|ИЗ
				|	&ИД_Кт" + НомерИД + " КАК ИД_Кт" + НомерИД + Символы.ПС;
			Если флОтборПоЗнаку Тогда
				ТекстЗапроса = ТекстЗапроса +
					"ГДЕ
		        	|	ИД_Кт" + НомерИД + "." + ИмяРесурсаСверки + " < 0";
			КонецЕсли;
			ТекстЗапроса = ТекстЗапроса +
				";
				|
				|";
			
			ТекстЗапросаУничтоженияВТ = ТекстЗапросаУничтоженияВТ + "УНИЧТОЖИТЬ " + "ИД_Кт" + НомерИД + ";" + Символы.ПС + Символы.ПС;
			
			Если НЕ флПервыйЗапросК Тогда
				ТекстЗапросаОбъединениеК = ТекстЗапросаОбъединениеК + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|";
			КонецЕсли;
			ТекстЗапросаОбъединениеК = ТекстЗапросаОбъединениеК +
				"ВЫБРАТЬ
				|" + ТекстАналитикКт + ",
				|" + ТекстРеквизитаКт + "
				|";
			Если флПервыйЗапросК Тогда
				ТекстЗапросаОбъединениеК = ТекстЗапросаОбъединениеК +
					"ПОМЕСТИТЬ Кредиторы" + Символы.ПС;
				флПервыйЗапросК = Ложь;
			КонецЕсли;
			ТекстЗапросаОбъединениеК = ТекстЗапросаОбъединениеК +
			"ИЗ
			|	ИД_Кт" + НомерИД + " КАК ИД_Кт" + НомерИД;
		КонецЕсли;
		
		#Область ПримерТекстаЗапроса
			ТекстПрмерТекстаЗапроса = 
				"ВЫБРАТЬ
	           |	ИД1.Организация КАК Организация,
	           |	ИД1.Контрагент КАК Контрагент,
	           |	ИД1.ВалютаВзаиморасчетов КАК Валютавзаиморасчетов,
	           |	ИД1.Показательсверки КАК Показательсверки
	           |ПОМЕСТИТЬ ИД1
	           |ИЗ
	           |	&ИД1 КАК ИД1
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	ИД2.Организация КАК Организация,
	           |	ИД2.Контрагент КАК Контрагент,
	           |	ИД2.ВалютаВзаиморасчетов КАК Валютавзаиморасчетов,
	           |	ИД2.Показательсверки КАК Показательсверки
	           |ПОМЕСТИТЬ ИД2
	           |ИЗ
	           |	&ИД2 КАК ИД2
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	ИД3.Организация КАК Организация,
	           |	ИД3.Контрагент КАК Контрагент,
	           |	ИД3.ВалютаВзаиморасчетов КАК Валютавзаиморасчетов,
	           |	ИД3.Показательсверки КАК Показательсверки
	           |ПОМЕСТИТЬ ИД3
	           |ИЗ
	           |	&ИД3 КАК ИД3
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	ИД1.Организация,
	           |	ИД1.Валютавзаиморасчетов,
	           |	ИД1.Показательсверки,
	           |	ИД1.Контрагент
	           |ПОМЕСТИТЬ ДебиторыРазвернуто
	           |ИЗ
	           |	ИД1 КАК ИД1
	           |
	           |ОБЪЕДИНИТЬ ВСЕ
	           |
	           |ВЫБРАТЬ
	           |	ИД2.Организация,
	           |	ИД2.Валютавзаиморасчетов,
	           |	ИД2.Показательсверки,
	           |	ИД2.Контрагент
	           |ИЗ
	           |	ИД2 КАК ИД2
	           |ГДЕ
	           |	ИД2.Показательсверки > 0
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	ИД3.Организация,
	           |	ИД3.Контрагент,
	           |	ИД3.Валютавзаиморасчетов,
	           |	-ИД3.Показательсверки КАК ПоказательСверки
	           |ПОМЕСТИТЬ КредиторыРазвернуто
	           |ИЗ
	           |	ИД3 КАК ИД3
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |УНИЧТОЖИТЬ ИД1
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	ДебиторыРазвернуто.Организация,
	           |	ДебиторыРазвернуто.Контрагент,
	           |	ДебиторыРазвернуто.Валютавзаиморасчетов,
	           |	СУММА(ДебиторыРазвернуто.Показательсверки) КАК Показательсверки
	           |ПОМЕСТИТЬ Дебиторы
	           |ИЗ
	           |	ДебиторыРазвернуто КАК ДебиторыРазвернуто
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	ДебиторыРазвернуто.Организация,
	           |	ДебиторыРазвернуто.Валютавзаиморасчетов,
	           |	ДебиторыРазвернуто.Контрагент
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	КредиторыРазвернуто.Организация,
	           |	КредиторыРазвернуто.Контрагент,
	           |	КредиторыРазвернуто.Валютавзаиморасчетов,
	           |	СУММА(КредиторыРазвернуто.ПоказательСверки) КАК ПоказательСверки
	           |ПОМЕСТИТЬ Кредиторы
	           |ИЗ
	           |	КредиторыРазвернуто КАК КредиторыРазвернуто
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	КредиторыРазвернуто.Организация,
	           |	КредиторыРазвернуто.Валютавзаиморасчетов,
	           |	КредиторыРазвернуто.Контрагент
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	Дебиторы.Организация,
	           |	Дебиторы.Контрагент,
	           |	Дебиторы.Валютавзаиморасчетов,
	           |	СУММА(Дебиторы.Показательсверки) КАК Показательсверки
	           |ПОМЕСТИТЬ ДебиторыГр
	           |ИЗ
	           |	Дебиторы КАК Дебиторы
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	Дебиторы.Организация,
	           |	Дебиторы.Валютавзаиморасчетов,
	           |	Дебиторы.Контрагент
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	Кредиторы.Организация,
	           |	Кредиторы.Контрагент,
	           |	Кредиторы.Валютавзаиморасчетов,
	           |	СУММА(Кредиторы.ПоказательСверки) КАК ПоказательСверки
	           |ПОМЕСТИТЬ КредиторыГр
	           |ИЗ
	           |	Кредиторы КАК Кредиторы
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	Кредиторы.Организация,
	           |	Кредиторы.Контрагент,
	           |	Кредиторы.Валютавзаиморасчетов
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	ВЫБОР
	           |		КОГДА Дебиторы.Показательсверки - ЕСТЬNULL(Кредиторы.ПоказательСверки, 0) < 0
	           |			ТОГДА -1 * (Дебиторы.Показательсверки - ЕСТЬNULL(Кредиторы.ПоказательСверки, 0))
	           |		ИНАЧЕ Дебиторы.Показательсверки - ЕСТЬNULL(Кредиторы.ПоказательСверки, 0)
	           |	КОНЕЦ КАК СуммаРасхождения,
	           |	Дебиторы.Организация,
	           |	Дебиторы.Контрагент,
	           |	Дебиторы.Валютавзаиморасчетов
	           |ПОМЕСТИТЬ РасхожденияРазвернуто
	           |ИЗ
	           |	ДебиторыГр КАК Дебиторы
	           |		ЛЕВОЕ СОЕДИНЕНИЕ КредиторыГр КАК Кредиторы
	           |		ПО Дебиторы.Валютавзаиморасчетов = Кредиторы.Валютавзаиморасчетов
	           |			И Дебиторы.Организация = Кредиторы.Контрагент
	           |			И Дебиторы.Контрагент = Кредиторы.Организация
	           |
	           |ОБЪЕДИНИТЬ ВСЕ
	           |
	           |ВЫБРАТЬ
	           |	ВЫБОР
	           |		КОГДА ЕСТЬNULL(Дебиторы.Показательсверки, 0) - Кредиторы.ПоказательСверки < 0
	           |			ТОГДА -1 * (ЕСТЬNULL(Дебиторы.Показательсверки, 0) - Кредиторы.ПоказательСверки)
	           |		ИНАЧЕ ЕСТЬNULL(Дебиторы.Показательсверки, 0) - Кредиторы.ПоказательСверки
	           |	КОНЕЦ,
	           |	Кредиторы.Организация,
	           |	NULL,
	           |	Кредиторы.Валютавзаиморасчетов
	           |ИЗ
	           |	Кредиторы КАК Кредиторы
	           |		ЛЕВОЕ СОЕДИНЕНИЕ Дебиторы КАК Дебиторы
	           |		ПО (Дебиторы.Валютавзаиморасчетов = Кредиторы.Валютавзаиморасчетов)
	           |			И (Дебиторы.Организация = Кредиторы.Контрагент)
	           |			И (Дебиторы.Контрагент = Кредиторы.Организация)
	           |ГДЕ
	           |	Кредиторы.Организация ЕСТЬ NULL 
	           |;
	           |
	           |////////////////////////////////////////////////////////////////////////////////
	           |ВЫБРАТЬ
	           |	СУММА(РасхожденияРазвернуто.СуммаРасхождения) КАК СуммаРасхождения,
	           |	РасхожденияРазвернуто.Организация,
	           |	РасхожденияРазвернуто.Контрагент,
	           |	РасхожденияРазвернуто.Валютавзаиморасчетов
	           |ИЗ
	           |	РасхожденияРазвернуто КАК РасхожденияРазвернуто
	           |
	           |СГРУППИРОВАТЬ ПО
	           |	РасхожденияРазвернуто.Валютавзаиморасчетов,
	           |	РасхожденияРазвернуто.Контрагент,
	           |	РасхожденияРазвернуто.Организация";
		#КонецОбласти
				   
	КонецЦикла;
	
	Если НЕ ФлЕстьД Тогда
		ТекстСообщения = НСтр("ru = 'Некорректная настройка сверки <%1>. Необходимо указать источник данных для дебитора.'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, РазделВГО);
		Возврат "";
	КонецЕсли;
	Если НЕ ФлЕстьК Тогда
		ТекстСообщения = НСтр("ru = 'Некорректная настройка сверки <%1>. Необходимо указать источник данных для кредитора.'");
		ВызватьИсключение СтрШаблон(ТекстСообщения, РазделВГО);		
		Возврат "";
	КонецЕсли;
	
	ТекстЗапросаОбъединениеД = ТекстЗапросаОбъединениеД + "
		|;
		|";
	ТекстЗапросаОбъединениеК = ТекстЗапросаОбъединениеК + "
		|;
		|";
		
	ТекстЗапроса = ТекстЗапроса +
		ТекстЗапросаОбъединениеД + ТекстЗапросаОбъединениеК +
		ТекстЗапросаУничтоженияВТ +
		ТекстЗапросаГруппировка +
		"
		|////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ Дебиторы;
		|УНИЧТОЖИТЬ Кредиторы;
		|" +
		ТекстЗапросаОсновнойРазвернуто +
		"
		|////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ДебиторыГр;
		|УНИЧТОЖИТЬ КредиторыГр;
		|" +
		ТекстЗапросаОсновной;
	

	Возврат ТекстЗапроса;
КонецФункции

// Раcсчитываем расхождения и записываем их
// Параметры:
//	Отбор - струкутра с параметрами отбора. Возможные значения: Сценарий, ПериодСверки, Этап, Организации, Дебитор, Кредитор, ИсточникДанных, ВидОтчета, РазделВГО, ВалютаВзаиморасчетов).
//		Если переданы Организации, то поиск осуществляется, как в отправителях, так и в получателях
//	ТекстОшибки - в переменную будет записан текст ошибки, если она возникнет.
//	флОтладка - Булево. Если Истина, то записывает запрос расчета расхождений по паре организаций в регистр сведений ЗапросыВычислявшиеРасхождения.
// Возвращает - истина - расхождения рассчитаны успешно, иначе ложь, в переменной функции "ТекстОшибки"
//		записывается описание ошибки.
//
Функция РассчитатьРасхождения(Знач Отбор, ТекстОшибки, флОтладка = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Если НЕ ОбщегоНазначенияПовтИспУХ.РассчитыватьРасхожденияПорталаВГО() Тогда
		ОповеститьОРасхождениях(Отбор, ТекстОшибки, флОтладка);
		Возврат Истина;
	КонецЕсли;
	
	флОповеститьПоПочте = Константы.ОповеститьПриВозникновенииРасхожденияВГО.Получить();
		
	ГУИДрасчета = Новый УникальныйИдентификатор();
	ШаблонТекста = 
	НСтр("ru = 'ИД расчета: %1
	|Отбор: %2
	|Описание ошибки:
	|'");
	
	ТекстПередОшибкой = СтрШаблон(ШаблонТекста, Строка(ГУИДрасчета), СверкаВГОУХ.ЗначениеВСтроку(Отбор));
		
	ЗаписьЖурналаРегистрации("РасхожденияВГО.Запуск", УровеньЖурналаРегистрации.Информация,,ГУИДрасчета,
		НСтр("ru = 'Запущен расчет расхождений. Отбор:'") + Символы.ПС + СверкаВГОУХ.ЗначениеВСтроку(Отбор));
		
	// Подготовка данных для расчета
	Попытка
		ТекДата = ТекущаяДата();
		
		// Таблица данных для рассылки почтовых оповещений
		ТабРасхождений = Новый ТаблицаЗначений;
		ТабРасхождений.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТабРасхождений.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Организации"));
		ТабРасхождений.Колонки.Добавить("СторонаСверки", Новый ОписаниеТипов("ПеречислениеСсылка.СтороныСверкиВГО"));
		ТабРасхождений.Колонки.Добавить("РазделВГО", Новый ОписаниеТипов("СправочникСсылка.РазделыСверкиВГО"));
		ТабРасхождений.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТабРасхождений.Колонки.Добавить("ВалютаОтчета", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ТабРасхождений.Колонки.Добавить("СуммаОрганизации", Новый ОписаниеТипов("Число"));
		ТабРасхождений.Колонки.Добавить("СуммаКонтрагента", Новый ОписаниеТипов("Число"));
		ТабРасхождений.Колонки.Добавить("СуммаРасхождения", Новый ОписаниеТипов("Число"));
		
		// Параметры для формирования отчета о расхождениях
		ПараметрыОтчета = Новый Структура("ВерсияРегламента,ПериодСверки,Сценарий,Этап,Организация,Контрагент,ВалютаОтчета");
		
		СписокОрганизацийОтбора = Неопределено;
		ОтправительОтбор = Неопределено;
		ПолучательОтбор = Неопределено;
		ВалютаОтбор = Неопределено;
		ИзвлечьПеременныеОтбора(Отбор, СписокОрганизацийОтбора, ОтправительОтбор, ПолучательОтбор, ВалютаОтбор);
		
        ЗапросДляОчистки = ПолучитьЗапросДляОчисткиРасхождений(СписокОрганизацийОтбора, ОтправительОтбор, ПолучательОтбор, ВалютаОтбор);

		Этап = Неопределено;
		
		Пользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		
		НаборЗаписейИнформацияСверкиВГОПостоянная = РегистрыСведений.ИнформацияСверкиВГОПостоянная.СоздатьНаборЗаписей();
		НаборЗаписейСверкаЗакрыта = РегистрыСведений.СверкаВГОЗакрыта.СоздатьНаборЗаписей();
		
		// Структура для отбора строк по измерениям регистра ИнформацияСверкиВГО
		ОтборРегистра = Новый Структура("ПериодСценария, Сценарий, Этап, Отправитель, Получатель, РазделВГО, ВалютаВзаиморасчетов, ДопАналитикаРасхождения");
		
		ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		// Получим "зоны" сверки, чтобы каждую зону обработать в транзакции
		// Зона сверки - кортеж (Сценарий,ПериодСверки,Этап,Периметр,НастройкаСверкиВГО)
		ВыборкаПериодов = ПолучитьЗоныРасчетаРасхождений(Отбор, флОтладка);

		Если ВыборкаПериодов = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ВыборкаПериодов.Количество() = 0 Тогда
			Возврат Истина;
		КонецЕсли;
		
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,,ГУИДрасчета, ТекстПередОшибкой + ОписаниеОшибки());
		
		ПараметрыОшибки = Новый Соответствие;
		ПараметрыОшибки.Вставить("ШагРасчета", НСтр("ru = '1. Подготовка к расчету.'"));
		Если Отбор.Количество() = 0 Тогда
			ПараметрыОшибки.Вставить("Отбор", НСтр("ru = 'Не задан.'"));
		Иначе
			СкопироватьСвойства(ПараметрыОшибки, Отбор, "Отбор.");
		КонецЕсли;
		СверкаВГОУХ.ЗаписатьПисьмоССообщениемОбОшибке(ТекстОшибки, Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка(), ПараметрыОшибки);
		
		Возврат Ложь;
	КонецПопытки;
	
	// Обработаем зоны
	Попытка
		мВыборкаИтогов = Новый Массив(3);
		мВыборкаИтогов[0] = ВыборкаПериодов;
		МаксимальныйЭлементВыборки = 1; // 0 - Периоды; 1 - Сценарии
		ТекущийЭлементВыборки = 0;
		флРезультатыПрочитаны = Ложь;
		Пока Истина Цикл // остановка по значению флага флРезультатыПрочитаны
			
			// Проходим по первым итогам запроса
			Пока Истина Цикл
				Если мВыборкаИтогов[ТекущийЭлементВыборки].Следующий() Тогда
					Если ТекущийЭлементВыборки < МаксимальныйЭлементВыборки Тогда
						мВыборкаИтогов[ТекущийЭлементВыборки+1] = мВыборкаИтогов[ТекущийЭлементВыборки].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						ТекущийЭлементВыборки = ТекущийЭлементВыборки + 1;
					Иначе
						Прервать; // прошли в самый низ текущей ветки иерархии, можно обрабатывать данные
					КонецЕсли;
				Иначе
					// поднимаемся по иерархии вверх, и заходим в другую ветку на вышестоящем уровне
					Если ТекущийЭлементВыборки = 0 Тогда
						флРезультатыПрочитаны = Истина; // больше данных в результате запроса нет
						Прервать;
					КонецЕсли;
					ТекущийЭлементВыборки = ТекущийЭлементВыборки - 1;
				КонецЕсли;
			КонецЦикла;
			
			Если флРезультатыПрочитаны Тогда
				Прервать;
			КонецЕсли;
			
			ВыборкаИтогов = мВыборкаИтогов[МаксимальныйЭлементВыборки];
			
			ВерсияРегламента = ВыборкаИтогов.ВерсияРегламента;
			Сценарий = ВыборкаИтогов.Сценарий;
			ПериодСценария = ВыборкаИтогов.ПериодСценария;
			ВалютаГруппы = ВыборкаИтогов.ВалютаИтогов;
			
			КурсГруппы = УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(1, ВалютаГруппы, ВалютаРегламентированногоУчета, Перечисления.ВидыКурсов.КурсНаМоментНачисления, Сценарий, ПериодСценария, ТекДата);
			
			ПараметрыОтчета.ВерсияРегламента = ВерсияРегламента;
			ПараметрыОтчета.ПериодСверки = ПериодСценария;
			ПараметрыОтчета.Сценарий = Сценарий;
			
			ОтборРегистра.Сценарий = Сценарий;
			ОтборРегистра.ПериодСценария = ПериодСценария;
			
			// Определяем Перечень и состав периметров консолидации
            ТЗПериметрСверки = ПолучитьСтруктуруПериметра(ПериодСценария, Сценарий);
	
			ВыборкаЭтапов = ВыборкаИтогов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЭтапов.Следующий() Цикл
				
				Этап = ВыборкаЭтапов.Этап;
				флЭтоЭтап = (ТипЗнч(Этап) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов"));
				Если флЭтоЭтап Тогда
					ПараметрыОтчета.Этап = Этап;
				Иначе
					ПараметрыОтчета.Этап = Неопределено;
				КонецЕсли;
				
				ОтборРегистра.Этап = Этап;
				
				// данные для отправки писем собираем в разрезе этапов
				ТабРасхождений.Очистить();
				
				ВыборкаНастройкиСверки = ВыборкаЭтапов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаНастройкиСверки.Следующий() Цикл
					
					РазделВГО = ВыборкаНастройкиСверки.РазделВГО;
					
					Если РазделВГО.ИсточникиДанных.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					ОтборРегистра.РазделВГО = РазделВГО;
					
					ОписаниеДопАналитик = Справочники.РазделыСверкиВГО.ПолучитьДопАналитики(РазделВГО);
					флЕстьДопАналитики = РазделВГО.ЕстьДопАналитики;
					флРегистрироватьНулевыеРасхождения = РазделВГО.Владелец.РегистрироватьНулевыеРасхождения;
					
					Если флЕстьДопАналитики Тогда
						// Для записи доп. аналитики. Нужно переделать, чтобы создавать под переданный набор аналитик
						ТабДопАналитик = СверкаВГОУХ.СоздатьТаблицуДопАналитик();
					Иначе
						ТабДопАналитик = Неопределено;
					КонецЕсли;
					
					// очистим данные расхождений от строк, которые изменялись.
					// это, либо строки ~ отбору, либо строки с видами отчетов ~ настройке вида вго (и отправителя, и получателя).
					Если НЕ ОчиститьДанныеРасхожденийДляЗоныРасчета(Сценарий, ПериодСценария, Этап, РазделВГО, ВалютаОтбор, ЗапросДляОчистки, ГУИДрасчета, ТекстПередОшибкой, ПараметрыОтчета, Отбор) Тогда
						Продолжить;
					КонецЕсли;
						
					// Теперь допишем данные нового расчета расхождений.
					Запрос = Новый Запрос;
					ТекстЗапросаИсходный = ВернутьТекстЗапросаРасхождений(РазделВГО, Отбор);
					Запрос.Текст = ТекстЗапросаИсходный;
					Запрос.УстановитьПараметр("КурсГр", КурсГруппы);
					Запрос.УстановитьПараметр("ВалютаГр", ВалютаГруппы);
					Запрос.УстановитьПараметр("Дата", ТекДата);
					
					НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.ПериодСценария.Установить(ПериодСценария);
					НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Сценарий.Установить(Сценарий);
					НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Этап.Установить(Этап);
					
					НаборЗаписейСверкаЗакрыта.Отбор.ПериодСценария.Установить(ПериодСценария);
					НаборЗаписейСверкаЗакрыта.Отбор.Сценарий.Установить(Сценарий);
					НаборЗаписейСверкаЗакрыта.Отбор.Этап.Установить(Этап);
					НаборЗаписейСверкаЗакрыта.Отбор.РазделСверкиВГО.Установить(РазделВГО);
					
					ВыборкаИсточниковДанных = ВыборкаНастройкиСверки.Выбрать();
					
					// Расчитываем для организаций исходные данные
					Для Каждого ПериметрСверки ИЗ ТЗПериметрСверки Цикл
						
						ТЗОрганизаций = ПолучитьТаблицуИсходныхДанныхДляРасчетаРасхождений(
								ПериодСценария, Сценарий, ВыборкаИсточниковДанных, ПериметрСверки);
								
						КоличествоОрганизаций = ТЗОрганизаций.Количество();

						// Обходим все пары организаций
						Для НомерОрганизацииДт = 0 По КоличествоОрганизаций-1 Цикл
							Дебитор = ТЗОрганизаций[НомерОрганизацииДт].Организация;
							Если НЕ ЗначениеВходитВМножество(ПолучательОтбор, Дебитор) Тогда
								Продолжить;
							КонецЕсли;
							
							флДебиторВОтборе = ЗначениеВходитВМножество(СписокОрганизацийОтбора, Дебитор);
							
							ДанныеОрганизацииДт = ТЗОрганизаций[НомерОрганизацииДт].Данные;
							
							ОтборПоДебитору = Новый Структура("Контрагент", Дебитор);
							
							Для НомерОрганизацииКт = 0 По КоличествоОрганизаций-1 Цикл
								Если НомерОрганизацииДт = НомерОрганизацииКт Тогда
									Продолжить;
								КонецЕсли;
								
								Кредитор = ТЗОрганизаций[НомерОрганизацииКт].Организация;
								Если НЕ ЗначениеВходитВМножество(ОтправительОтбор, Кредитор) Тогда
									Продолжить;
								КонецЕсли;
								
								флКредиторВОтборе = ЗначениеВходитВМножество(СписокОрганизацийОтбора, Кредитор);
								
								Если НЕ (флДебиторВОтборе ИЛИ флКредиторВОтборе) Тогда
									// Дебитор или кредитор обязательно должны быть в отборе
									// Если отбор = Неопределено, то флаги всегда == Истина.
									Продолжить;
								КонецЕсли;
								
								ДанныеОрганизацииКт = ТЗОрганизаций[НомерОрганизацииКт].Данные;
								
								ОтборПоКредитору = Новый Структура("Контрагент", Кредитор);
								
								флЕстьДанныеДляСверки = Ложь;
								// Подготовим данные дебитора
								Для Каждого ДанныеИД ИЗ ДанныеОрганизацииДт Цикл
									СпособДК = ДанныеИД.СпособОпределенияНаправленияУчета;
									Если СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит Тогда
										Запрос.Параметры.Удалить("ИД_Дт" + ДанныеИД.НомерСтрокиРесурса);
										Продолжить;
									Иначе
										
										ТЗДанных_ = ДанныеИД.ТЗДанных.Скопировать(ОтборПоКредитору);
										
										флЕстьДанныеДляСверки = флЕстьДанныеДляСверки ИЛИ ТЗДанных_.Количество() > 0;
										Запрос.Параметры.Вставить("ИД_Дт" + ДанныеИД.НомерСтрокиРесурса, ТЗДанных_);
									КонецЕсли;
								КонецЦикла;
								
								Для Каждого ДанныеИД ИЗ ДанныеОрганизацииКт Цикл
									СпособДК = ДанныеИД.СпособОпределенияНаправленияУчета;
									Если СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет Тогда
										Запрос.Параметры.Удалить("ИД_Кт" + ДанныеИД.НомерСтрокиРесурса);
										Продолжить;
									КонецЕсли;
									
									ТЗДанных_ = ДанныеИД.ТЗДанных.Скопировать(ОтборПоДебитору);
									
									флЕстьДанныеДляСверки = флЕстьДанныеДляСверки ИЛИ ТЗДанных_.Количество() > 0;
										
									Запрос.Параметры.Вставить("ИД_Кт" + ДанныеИД.НомерСтрокиРесурса, ТЗДанных_);
								КонецЦикла;
								
								Если НЕ флЕстьДанныеДляСверки Тогда
									Продолжить;
								КонецЕсли;
								
								Запрос.Параметры.Вставить("Дебитор", Дебитор);
								Запрос.Параметры.Вставить("Кредитор", Кредитор);
								
								Если флОтладка Тогда
									ВремСтруктураПараметровЗапроса = Новый Структура("ПараметрыОтчета,ОтборРегистра,ТЗОрганизаций", ПараметрыОтчета, ОтборРегистра, ТЗОрганизаций);
									СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки(НСтр("ru = 'Расчет расхождений'"), Запрос, ВремСтруктураПараметровЗапроса);
								КонецЕсли;
								
								Попытка
									
									Результат = Запрос.Выполнить();
									
									НачатьТранзакцию();
									
									БлокировкаДанных = Новый БлокировкаДанных;
									
									ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ИнформацияСверкиВГОПостоянная");
									ЭлементБлокировки.УстановитьЗначение("Сценарий", Сценарий);
									ЭлементБлокировки.УстановитьЗначение("ПериодСценария", ПериодСценария);
									ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
									ЭлементБлокировки.УстановитьЗначение("Отправитель", Кредитор);
									ЭлементБлокировки.УстановитьЗначение("Получатель", Дебитор);
									ЭлементБлокировки.УстановитьЗначение("РазделВГО", РазделВГО);
									ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
									
									ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.СверкаВГОЗакрыта");
									ЭлементБлокировки.УстановитьЗначение("Сценарий", Сценарий);
									ЭлементБлокировки.УстановитьЗначение("ПериодСценария", ПериодСценария);
									ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
									ЭлементБлокировки.УстановитьЗначение("Отправитель", Кредитор);
									ЭлементБлокировки.УстановитьЗначение("Получатель", Дебитор);
									ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
									
									БлокировкаДанных.Заблокировать();
									
									ОтборРегистра.Отправитель = Кредитор;
									ОтборРегистра.Получатель = Дебитор;
									
									НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Отправитель.Установить(Кредитор);
									НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Получатель.Установить(Дебитор);
									
									НаборЗаписейСверкаЗакрыта.Отбор.Отправитель.Установить(Кредитор);
									НаборЗаписейСверкаЗакрыта.Отбор.Получатель.Установить(Дебитор);
									
									флЕстьРасхождения = Ложь;
									ВыборкаДетальныеЗаписи = Результат.Выбрать();
									Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
										
										// Структура для заполнения переменной информации о сверке
										ДанныеСверкиПеременные = Новый Структура;
										
										Если ВыборкаДетальныеЗаписи.СуммаРасхождения = 0 Тогда
											Если НЕ флРегистрироватьНулевыеРасхождения Тогда
												Продолжить;
											КонецЕсли;
											ДанныеСверкиПеременные.Вставить("Состояние", Перечисления.СостояниеСверкиВГО.Согласован);
											ДанныеСверкиПеременные.Вставить("АвторУрегулирования", Пользователь);
										Иначе
											ДанныеСверкиПеременные.Вставить("Состояние", Перечисления.СостояниеСверкиВГО.Несогласован);
										КонецЕсли;
										флЕстьРасхождения = Истина;
											
										// получим ссылку на доп. аналитику
										Если флЕстьДопАналитики Тогда
											ТабДопАналитик.Очистить();
											Для Каждого СтрокаОписанияАналитики Из ОписаниеДопАналитик Цикл
												ОписаниеАналитики = СтрокаОписанияАналитики.Значение;
												СверкаВГОУХ.ДобавитьЗначениеВТаблицуДопАналитик(ТабДопАналитик, ОписаниеАналитики.Имя, ОписаниеАналитики.ВидАналитики, ВыборкаДетальныеЗаписи[ОписаниеАналитики.Имя]);
											КонецЦикла;
											
											ТекстОшибки_ = "";
											ДопАналитикаРасхождения = СверкаВГОУХ.ПолучитьСсылкуНаДопАналитику(
												ПериодСценария, Сценарий, Этап, РазделВГО, ТабДопАналитик, ТекстОшибки_);
											Если ТекстОшибки_ <> "" Тогда
												ВызватьИсключение НСтр("ru = 'Получение ссылки на доп. аналитику: '") + ТекстОшибки_;
											КонецЕсли;
										Иначе
											ДопАналитикаРасхождения = Справочники.ДопАналитикаРасхожденийВГО.ПустаяСсылка();
										КонецЕсли;
										
										// Переменная информация о строке сверки
										ОтборРегистра.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов;
										ОтборРегистра.ДопАналитикаРасхождения = ДопАналитикаРасхождения;
										
										ТекстОшибки_ = "";
										СверкаВГОУХ.ДобавитьСостояниеСверки(ОтборРегистра, ДанныеСверкиПеременные, ТекДата, ТекстОшибки_);
										Если ТекстОшибки_ <> "" Тогда
											ВызватьИсключение НСтр("ru = 'Запись переменных данных о расхождении: '") + ТекстОшибки_;
										КонецЕсли;
										
										// Постоянная информация о строке сверки
										НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.ВалютаВзаиморасчетов.Установить(ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов);
										НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.РазделВГО.Установить(РазделВГО);
										НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.ДопАналитикаРасхождения.Установить(ДопАналитикаРасхождения);
										
										НоваяЗапись = НаборЗаписейИнформацияСверкиВГОПостоянная.Добавить();
										НоваяЗапись.ПериодСценария = ПериодСценария;
										НоваяЗапись.Сценарий = Сценарий;
										НоваяЗапись.Этап = Этап;
										НоваяЗапись.Отправитель = Кредитор;
										НоваяЗапись.Получатель = Дебитор;
										НоваяЗапись.РазделВГО = РазделВГО;
										НоваяЗапись.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов;
										НоваяЗапись.ДопАналитикаРасхождения = ДопАналитикаРасхождения;
										НоваяЗапись.СуммаОтправителя = ВыборкаДетальныеЗаписи.СуммаКредитора;
										НоваяЗапись.СуммаПолучателя = ВыборкаДетальныеЗаписи.СуммаДебитора;
										НоваяЗапись.СуммаРасхождения = ВыборкаДетальныеЗаписи.СуммаРасхождения;
										НоваяЗапись.СуммаОтправителяГр = ВыборкаДетальныеЗаписи.СуммаКредитораГр;
										НоваяЗапись.СуммаПолучателяГр = ВыборкаДетальныеЗаписи.СуммаДебитораГр;
										НоваяЗапись.СуммаРасхожденияГр = ВыборкаДетальныеЗаписи.СуммаРасхожденияГр;
										
										НаборЗаписейИнформацияСверкиВГОПостоянная.Записать();
										НаборЗаписейИнформацияСверкиВГОПостоянная.Очистить();
										
										Если флОповеститьПоПочте Тогда
											// Ищем по главной организации периметра
											мОрганизаций = ПериметрСверки.мОрганизацииДляРассылки;
											
											// Запишем расхождение в таблицу для последующей отправки по эл.почте
											НоваяСтрокаТаб = ТабРасхождений.Добавить();
											НоваяСтрокаТаб.СторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор;
											НоваяСтрокаТаб.Организация = Кредитор;
											НоваяСтрокаТаб.Контрагент = Дебитор;
											НоваяСтрокаТаб.РазделВГО = РазделВГО;
											НоваяСтрокаТаб.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов;
											НоваяСтрокаТаб.ВалютаОтчета = Кредитор.ФункциональнаяВалюта;
											НоваяСтрокаТаб.СуммаОрганизации = ВыборкаДетальныеЗаписи.СуммаКредитора;
											НоваяСтрокаТаб.СуммаКонтрагента = ВыборкаДетальныеЗаписи.СуммаДебитора;
											НоваяСтрокаТаб.СуммаРасхождения = ВыборкаДетальныеЗаписи.СуммаРасхождения;
											Если мОрганизаций.Найти(Кредитор) = Неопределено Тогда
												мОрганизаций.Добавить(Кредитор);
											КонецЕсли;
											
											НоваяСтрокаТаб = ТабРасхождений.Добавить();
											НоваяСтрокаТаб.СторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор;
											НоваяСтрокаТаб.Организация = Дебитор;
											НоваяСтрокаТаб.Контрагент = Кредитор;
											НоваяСтрокаТаб.РазделВГО = РазделВГО;
											НоваяСтрокаТаб.ВалютаВзаиморасчетов = ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов;
											НоваяСтрокаТаб.ВалютаОтчета = Дебитор.ФункциональнаяВалюта;
											НоваяСтрокаТаб.СуммаОрганизации = ВыборкаДетальныеЗаписи.СуммаДебитора;
											НоваяСтрокаТаб.СуммаКонтрагента = ВыборкаДетальныеЗаписи.СуммаКредитора;
											НоваяСтрокаТаб.СуммаРасхождения = ВыборкаДетальныеЗаписи.СуммаРасхождения;
											Если мОрганизаций.Найти(Дебитор) = Неопределено Тогда
												мОрганизаций.Добавить(Дебитор);
											КонецЕсли;
										КонецЕсли;
									КонецЦикла;
									
									// Информация о закрытии сверки
									Если не флЕстьРасхождения Тогда
										НоваяЗапись = НаборЗаписейСверкаЗакрыта.Добавить();
										НоваяЗапись.ПериодСценария = ПериодСценария;
										НоваяЗапись.Сценарий = Сценарий;
										НоваяЗапись.Этап = Этап;
										НоваяЗапись.Отправитель = Кредитор;
										НоваяЗапись.Получатель = Дебитор;
										НоваяЗапись.РазделСверкиВГО = РазделВГО;
										
										НаборЗаписейСверкаЗакрыта.Записать();
										НаборЗаписейСверкаЗакрыта.Очистить();
									КонецЕсли;
									ЗафиксироватьТранзакцию();
							
								Исключение
									ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
									Если ТранзакцияАктивна() Тогда
										ОтменитьТранзакцию();
									КонецЕсли;
									
									ТекстПередОшибкойИсключения = 
									ТекстПередОшибкой 
									+ НСтр("ru = 'Контекст: '") + СверкаВГОУХ.ЗначениеВСтроку(ОтборРегистра) + Символы.ПС 
									+ НСтр("ru = 'Текст ошибки:'") + Символы.ПС;
		
									ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,,ГУИДрасчета, ТекстПередОшибкойИсключения + ТекстОшибки); 
									
									Если Этап = Неопределено Тогда
										Этап = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
									КонецЕсли;
									ПараметрыОшибки = Новый Соответствие;
									ПараметрыОшибки.Вставить("ШагРасчета", НСтр("ru = '3. Запись информации о расхождениях.'"));
									ПараметрыОшибки.Вставить("Этап", Этап);
									Если Отбор.Количество() = 0 Тогда
										ПараметрыОшибки.Вставить("Отбор", НСтр("ru = 'Не задан.'"));
									Иначе
										СкопироватьСвойства(ПараметрыОшибки, Отбор, "Отбор.");
									КонецЕсли;
									СкопироватьСвойства(ПараметрыОшибки, ПараметрыОтчета, "ПараметрыОтчета.");
									СверкаВГОУХ.ЗаписатьПисьмоССообщениемОбОшибке(ТекстОшибки, Этап, ПараметрыОшибки);
									
								КонецПопытки;
								
							КонецЦикла; // ЦИкл по кредиторам
						КонецЦикла; // Цикл по дебиторам
					КонецЦикла; // Цикл по периметрам сверки
				КонецЦикла; // ВыборкаНастройкиСверки
				
				Если флОповеститьПоПочте Тогда
					// В пределах управлений периодом заданы отвественные за сверку в матрице полномочий
					// Формируем им письма для отправки
					ТабРасхождений.Свернуть("Организация,Контрагент,СторонаСверки,РазделВГО,
						|ВалютаВзаиморасчетов,ВалютаОтчета",
						"СуммаОрганизации,СуммаКонтрагента,СуммаРасхождения");
					
					ОтборОрг = Новый Структура("Организация");
					
					ПочтовыеАдресаОрганизации = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(Сценарий, ПериодСценария, , Истина);
					ПочтовыеАдресаОрганизации.Свернуть("Организация,Email");
						
					Для Каждого ПериметрСверки Из ТЗПериметрСверки Цикл
						ГлавнаяОрганизация = ПериметрСверки.Организация;
					
						Для Каждого Организация_ Из ПериметрСверки.мОрганизацииДляРассылки Цикл
							ОтборОрг.Организация = Организация_;
							мСтрокРасхождений = ТабРасхождений.НайтиСтроки(ОтборОрг);
							Если мСтрокРасхождений.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							мПочтовыеАдреса = ПочтовыеАдресаОрганизации.НайтиСтроки(ОтборОрг);
							Если мПочтовыеАдреса.Количество() = 0 Тогда
								Продолжить;
							КонецЕсли;
							
							ТабДокумент = Новый ТабличныйДокумент;
							ЗаполнитьЗначенияСвойств(ПараметрыОтчета, мСтрокРасхождений[0]);
							ПараметрыОтчета.ВалютаОтчета = НСтр("ru = 'Валюта взаиморасчетов'"); // не указываем конкретную валюту
							ТабДокумент = СформироватьПечатнуюФормуРасхождений(ПараметрыОтчета, ТабРасхождений);
							ПолноеИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
							ТабДокумент.Записать(ПолноеИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS);
					
							Письмо = Новый ИнтернетПочтовоеСообщение;
							Для Каждого СтрокаПочты Из ПочтовыеАдресаОрганизации Цикл
								Письмо.Получатели.Добавить(СтрокаПочты.Email);
							КонецЦикла;
							Письмо.Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
							
							ШаблонСообщения = 
							НСтр("ru = 'Период: %1 <BR>
							|Сценарий: %2 <BR>
							|%3 %4 <BR> 
							|Организация: %5 находится под вашей ответственностью.<BR>
							|Перечень контрагентов и расхождений см. в приложении к письму.'");
							
							Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(
										НСтр("ru = 'Обнаружены расхождения взаиморасчетов с внутригрупповыми контрагентами!'"), 
										СтрШаблон(ШаблонСообщения, 
													ПериодСценария, 
													Сценарий, 
													?(флЭтоЭтап, НСтр("ru = 'Этап процесса: '"), НСтр("ru = 'Версия регламента: '")),
													Этап,
													Организация_)
								),
								ТипТекстаПочтовогоСообщения.HTML);
							Письмо.Тема = НСтр("ru = 'Обнаружены расхождения взаиморасчетов для организации '")
								+ Организация_ + ?(флЭтоЭтап, НСтр("ru = ' этап '"), НСтр("ru = ' версия регалмента '")) + Этап;
							Письмо.Вложения.Добавить(ПолноеИмяВременногоФайла, НСтр("ru = 'Расхождения '") + Организация_ + ".xls");	
							УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Этап);
							
							ТабДокумент = Неопределено;
							Письмо = Неопределено;
							УдалитьФайлы(ПолноеИмяВременногоФайла);
							
						КонецЦикла; // Организации периметра
					КонецЦикла; // Периметры
				КонецЕсли;
				
			КонецЦикла; // ВыборкаЭтапы
			
			Этап = Неопределено;
			РазделВГО = Неопределено;
			
		КонецЦикла; // ВыборкаПериодов
		
		ЗапросДляОчистки = Неопределено;
		ЗапросДокРегистрации = Неопределено;
		Запрос = Неопределено;
	
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
		
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,,ГУИДрасчета, ТекстПередОшибкой + ОписаниеОшибки()); 
		
		Если Этап = Неопределено Тогда
			Этап = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		КонецЕсли;
		ПараметрыОшибки = Новый Соответствие;
		ПараметрыОшибки.Вставить("ШагРасчета", НСтр("ru = '6. Операции расчета не в транзакции.'"));
		ПараметрыОшибки.Вставить("Этап", Этап);
		Если Отбор.Количество() = 0 Тогда
			ПараметрыОшибки.Вставить("Отбор", НСтр("ru = 'Не задан.'"));
		Иначе
			СкопироватьСвойства(ПараметрыОшибки, Отбор, "Отбор.");
		КонецЕсли;
		СкопироватьСвойства(ПараметрыОшибки, ПараметрыОтчета, "ПараметрыОтчета.");
		СверкаВГОУХ.ЗаписатьПисьмоССообщениемОбОшибке(ТекстОшибки, Этап, ПараметрыОшибки);
		
	КонецПопытки;
	
	ЗаписьЖурналаРегистрации("РасхожденияВГО.Завершено", УровеньЖурналаРегистрации.Информация,,ГУИДрасчета,
					НСтр("ru = 'Закончен расчет расхождений. '") 
					+ ?(ТекстОшибки = "", НСтр("ru = 'Без ошибок.'"), НСтр("ru = 'С ошибками. '")) 
					+ НСтр("ru = ' Отбор:'") 
					+ Символы.ПС + СверкаВГОУХ.ЗначениеВСтроку(Отбор)
			);
		
	Если ТекстОшибки <> "" Тогда
		ТекстОшибки = Лев(ТекстОшибки, СтрДлина(ТекстОшибки)-1);
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Функция ПолучитьСтруктуруПериметра(ПериодСценария, Сценарий)
	
	ТЗКонсолидирующихОрганизаций = УправлениеРабочимиПроцессамиУХ.ПолучитьКонсолидирующиеОрганизацииРегламента(ПериодСценария, Сценарий);
	ТЗКонсолидирующихОрганизаций.Колонки.Добавить("мОрганизацииПериметра");
	ТЗКонсолидирующихОрганизаций.Колонки.Добавить("мОрганизацииДляРассылки");
	ТЗКонсолидирующихОрганизаций.Колонки.Добавить("РеквизитыОрганизаций");
	
	ВсеОрганизации = Новый Массив;
	
	Для Каждого СтрокаКонсолидирующейОрганизации Из ТЗКонсолидирующихОрганизаций Цикл
		
		ГлавнаяОрганизация = СтрокаКонсолидирующейОрганизации.Организация;
		
		// Получим перечень организаций периметра
		мОрганизацииПериметра = УправлениеРабочимиПроцессамиУХ.ПолучитьВсеУровниОрганизацийПериметраПоКонсолидируемой(
									Сценарий, ПериодСценария, ГлавнаяОрганизация);
		
		СтрокаКонсолидирующейОрганизации.мОрганизацииПериметра = мОрганизацииПериметра;
		СтрокаКонсолидирующейОрганизации.мОрганизацииДляРассылки = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеОрганизации, мОрганизацииПериметра, Истина);
		
	КонецЦикла;
	
	ИменаУП = "ФункциональнаяВалюта, ВалютаПредоставленияОтчетности, ПланСчетовМСФО";
	ПутиУП = МСФОВызовСервераУХ.ПутиРеквизитовУП(ИменаУП);
	Таб = МСФОВызовСервераУХ.ЗначенияУП(ПутиУП, ВсеОрганизации, 
									ПериодСценария.ДатаОкончания, Сценарий);
	
	РеквизитыОрганизаций = Новый Соответствие;
	Для каждого стр Из Таб Цикл
		РеквизитыОрганизаций.Вставить(стр.Организация, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(стр));
	КонецЦикла;                                                    
	
	ТЗКонсолидирующихОрганизаций.ЗаполнитьЗначения(РеквизитыОрганизаций, "РеквизитыОрганизаций");
	
	Возврат ТЗКонсолидирующихОрганизаций;
	
КонецФункции

Функция ПолучитьТаблицуИсходныхДанныхДляРасчетаРасхождений(ПериодСценария, Сценарий, ВыборкаИсточниковДанных, ПериметрСверки)
	
	ВалютаПолученияДанных = ПериметрСверки.Валюта;
	мОрганизацииПериметра = ПериметрСверки.мОрганизацииПериметра;	
	
	// Таблица с данными расчета
	ТЗДанныеОрганизаций = Новый ТаблицаЗначений;
	ТЗДанныеОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТЗДанныеОрганизаций.Колонки.Добавить("Данные");
	ТЗДанныеОрганизаций.Колонки.Добавить("ЕстьДанныеДт", Новый ОписаниеТипов("Булево"));
	ТЗДанныеОрганизаций.Колонки.Добавить("ЕстьДанныеКт", Новый ОписаниеТипов("Булево"));
	
	Если мОрганизацииПериметра = Неопределено Тогда
		Возврат ТЗДанныеОрганизаций;
	КонецЕсли;
	
	// данные для выбора данных из источников
	КонтекстОтчета_=Новый Структура("ПериодОтчета,Сценарий,ОсновнаяВалюта,АнализЧувствительности,ЧтениеНеактуальныхЗаписей,Организация",
		ПериодСценария,
		Сценарий,
		ВалютаПолученияДанных,
		Ложь,
		Истина,
		Справочники.Организации.ПустаяСсылка());
		
	Для Каждого Организация_ Из мОрганизацииПериметра Цикл
		
		РеквизитыОрганизации = ПериметрСверки.РеквизитыОрганизаций.Получить(Организация_);
		Если РеквизитыОрганизации = Неопределено Тогда
			РеквизитыОрганизации = Новый Структура("ФункциональнаяВалюта", ВалютаПолученияДанных);
		КонецЕсли;
		КонтекстОтчета_.Организация = Организация_;
		КонтекстОтчета_.ОсновнаяВалюта = РеквизитыОрганизации.ФункциональнаяВалюта;
				
		ДанныеОрганизации = Новый Массив;
		флЕстьДанныеДт = Ложь;
		флЕстьДанныеКт = Ложь;
		
		ВыборкаИсточниковДанных.Сбросить();
		Пока ВыборкаИсточниковДанных.Следующий() Цикл
			
			СпособДК = ВыборкаИсточниковДанных.СпособОпределенияНаправленияУчета;
			ТЗДанныхДляСопоставления = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(
										КонтекстОтчета_, ВыборкаИсточниковДанных.ИсточникДанных);
			
			ДанныеИД = Новый Структура("НомерСтрокиРесурса,СпособОпределенияНаправленияУчета,ТЗДанных",
										ВыборкаИсточниковДанных.НомерСтрокиРесурса,
										СпособДК,
										ТЗДанныхДляСопоставления);
										ДанныеОрганизации.Добавить(ДанныеИД); // оставляем. могут быть данные со стороны контрагента.
			
			флЕстьДанные_ = ТЗДанныхДляСопоставления.Количество() > 0;
			Если СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет ИЛИ
				СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
				флЕстьДанныеДт = флЕстьДанныеДт ИЛИ флЕстьДанные_;
			КонецЕсли;
			Если СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит ИЛИ
				СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
				флЕстьДанныеКт = флЕстьДанныеКт ИЛИ флЕстьДанные_;
			КонецЕсли;
			
		КонецЦикла;
		
		НоваяСтрокаОрганизации = ТЗДанныеОрганизаций.Добавить();
		НоваяСтрокаОрганизации.Организация = Организация_;
		НоваяСтрокаОрганизации.Данные = ДанныеОрганизации;
		НоваяСтрокаОрганизации.ЕстьДанныеДт = флЕстьДанныеДт;
		НоваяСтрокаОрганизации.ЕстьДанныеКт = флЕстьДанныеКт;
		
	КонецЦикла;

	Возврат ТЗДанныеОрганизаций;
	
КонецФункции

Функция ОчиститьДанныеРасхожденийДляЗоныРасчета(Сценарий, ПериодСценария, Этап, РазделВГО, ВалютаОтбор, ЗапросДляОчистки, ГУИДрасчета, ТекстПередОшибкой, ПараметрыОтчета, Отбор)
	
	Перем НаборЗаписейИнформацияСверкиВГОПостоянная, БлокировкаДанных, ВыборкаДетальныеЗаписиДляОчистки, РезультатДляОчистки, ЭлементБлокировки;
	
	Попытка
		ЗапросДляОчистки.УстановитьПараметр("Сценарий", Сценарий);
		ЗапросДляОчистки.УстановитьПараметр("ПериодСценария", ПериодСценария);
		ЗапросДляОчистки.УстановитьПараметр("Этап", Этап);
		ЗапросДляОчистки.УстановитьПараметр("РазделВГО", РазделВГО);
		
		НаборЗаписейИнформацияСверкиВГОПостоянная = РегистрыСведений.ИнформацияСверкиВГОПостоянная.СоздатьНаборЗаписей();
		НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.ПериодСценария.Установить(ПериодСценария);
		НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Этап.Установить(Этап);
		
		Если ЗначениеЗаполнено(ВалютаОтбор) Тогда
			НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.ВалютаВзаиморасчетов.Установить(ВалютаОтбор);
		КонецЕсли;
		
		РезультатДляОчистки = ЗапросДляОчистки.Выполнить();
		ВыборкаДетальныеЗаписиДляОчистки = РезультатДляОчистки.Выбрать();
		
		// очищаем записи регистра
		НачатьТранзакцию(РежимУправленияБлокировкойДанных.Управляемый);
		
		БлокировкаДанных = Новый БлокировкаДанных;
		ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.ИнформацияСверкиВГОПостоянная");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Сценарий", Сценарий);
		ЭлементБлокировки.УстановитьЗначение("ПериодСценария", ПериодСценария);
		ЭлементБлокировки.УстановитьЗначение("Этап", Этап);
		Если ЗначениеЗаполнено(ВалютаОтбор) Тогда
			ЭлементБлокировки.УстановитьЗначение("ВалютаВзаиморасчетов", ВалютаОтбор);
		КонецЕсли;
		ЭлементБлокировки.ИсточникДанных = РезультатДляОчистки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("РазделВГО", "РазделВГО");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Отправитель", "Отправитель");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Получатель", "Получатель");
		БлокировкаДанных.Заблокировать();
		
		Пока ВыборкаДетальныеЗаписиДляОчистки.Следующий() Цикл
			// Переменную информацию не чистим.
			НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Отправитель.Установить(ВыборкаДетальныеЗаписиДляОчистки.Отправитель);
			НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.Получатель.Установить(ВыборкаДетальныеЗаписиДляОчистки.Получатель);
			НаборЗаписейИнформацияСверкиВГОПостоянная.Отбор.РазделВГО.Установить(ВыборкаДетальныеЗаписиДляОчистки.РазделВГО);
			НаборЗаписейИнформацияСверкиВГОПостоянная.Записать();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();

						
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки() + Символы.ПС;
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,,ГУИДрасчета, ТекстПередОшибкой + ОписаниеОшибки()); 
		
		Если Этап = Неопределено Тогда
			Этап = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		КонецЕсли;
		ПараметрыОшибки = Новый Соответствие;
		ПараметрыОшибки.Вставить("ШагРасчета", НСтр("ru = '2. Очистка данных расчета расхождений.'"));
		ПараметрыОшибки.Вставить("Этап", Этап);
		ПараметрыОшибки.Вставить("РазделВГО", РазделВГО);
		Если Отбор.Количество() = 0 Тогда
			ПараметрыОшибки.Вставить("Отбор", НСтр("ru = 'Не задан.'"));
		Иначе
			СкопироватьСвойства(ПараметрыОшибки, Отбор, "Отбор.");
		КонецЕсли;
		СкопироватьСвойства(ПараметрыОшибки, ПараметрыОтчета, "ПараметрыОтчета.");
		СверкаВГОУХ.ЗаписатьПисьмоССообщениемОбОшибке(ТекстОшибки, Этап, ПараметрыОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Процедура ИзвлечьПеременныеОтбора(Знач Отбор, СписокОрганизацийОтбора, ОтправительОтбор, ПолучательОтбор, ВалютаОтбор)
	
	СписокОрганизацийОтбора = Неопределено;
	Отбор.Свойство("Организации", СписокОрганизацийОтбора);
	
	ОтправительОтбор = Неопределено;
	Отбор.Свойство("Отправитель", ОтправительОтбор);
	
	ПолучательОтбор = Неопределено;
	Отбор.Свойство("Получатель", ПолучательОтбор);
	
	ВалютаОтбор = Неопределено;
	Отбор.Свойство("ВалютаВзаиморасчетов", ВалютаОтбор);
	
КонецПроцедуры

Функция ПолучитьЗапросДляОчисткиРасхождений(СписокОрганизацийОтбора, ОтправительОтбор, ПолучательОтбор, ВалютаОтбор)
	
	Перем ЗапросДляОчисткиТекст;
	
	// Запрос для очистки существующих расхождений
	ЗапросДляОчистки = Новый Запрос;
	ЗапросДляОчисткиТекст =
	"ВЫБРАТЬ
	|	ИнформацияСверкиВГОПостоянная.ПериодСценария,
	|	ИнформацияСверкиВГОПостоянная.Сценарий,
	|	ИнформацияСверкиВГОПостоянная.Этап,
	|	ИнформацияСверкиВГОПостоянная.Отправитель,
	|	ИнформацияСверкиВГОПостоянная.Получатель,
	|	ИнформацияСверкиВГОПостоянная.РазделВГО
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
	
	|ГДЕ
	|	ИнформацияСверкиВГОПостоянная.ПериодСценария = &ПериодСценария
	|	И ИнформацияСверкиВГОПостоянная.Сценарий = &Сценарий
	|	И ИнформацияСверкиВГОПостоянная.Этап = &Этап
	|	И ИнформацияСверкиВГОПостоянная.Отправитель В(&Отправитель)
	|	И ИнформацияСверкиВГОПостоянная.Отправитель В(&Организации)
	|	И ИнформацияСверкиВГОПостоянная.Получатель В(&Получатель)
	|	И ИнформацияСверкиВГОПостоянная.РазделВГО В(&РазделВГО)
	|	И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов В(&Валюта)
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияСверкиВГОПостоянная.РазделВГО,
	|	ИнформацияСверкиВГОПостоянная.Получатель,
	|	ИнформацияСверкиВГОПостоянная.Этап,
	|	ИнформацияСверкиВГОПостоянная.Отправитель,
	|	ИнформацияСверкиВГОПостоянная.ПериодСценария,
	|	ИнформацияСверкиВГОПостоянная.Сценарий";
	
	Если СписокОрганизацийОтбора <> Неопределено Тогда
		ЗапросДляОчистки.УстановитьПараметр("Организации", СписокОрганизацийОтбора);
		
		ЗапросДляОчисткиТекст = ЗапросДляОчисткиТекст +
		"			
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ИнформацияСверкиВГОПостоянная.ПериодСценария,
		|	ИнформацияСверкиВГОПостоянная.Сценарий,
		|	ИнформацияСверкиВГОПостоянная.Этап,
		|	ИнформацияСверкиВГОПостоянная.Отправитель,
		|	ИнформацияСверкиВГОПостоянная.Получатель,
		|	ИнформацияСверкиВГОПостоянная.РазделВГО
		|ИЗ
		|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
		|ГДЕ
		|	ИнформацияСверкиВГОПостоянная.ПериодСценария = &ПериодСценария
		|	И ИнформацияСверкиВГОПостоянная.Сценарий = &Сценарий
		|	И ИнформацияСверкиВГОПостоянная.Этап = &Этап
		|	И ИнформацияСверкиВГОПостоянная.Отправитель В(&Отправитель)
		|	И ИнформацияСверкиВГОПостоянная.Получатель В(&Организации)
		|	И ИнформацияСверкиВГОПостоянная.Получатель В(&Получатель)
		|	И ИнформацияСверкиВГОПостоянная.РазделВГО В(&РазделВГО)
		|	И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов В(&Валюта)
		|
		|СГРУППИРОВАТЬ ПО
		|	ИнформацияСверкиВГОПостоянная.РазделВГО,
		|	ИнформацияСверкиВГОПостоянная.Получатель,
		|	ИнформацияСверкиВГОПостоянная.Этап,
		|	ИнформацияСверкиВГОПостоянная.Отправитель,
		|	ИнформацияСверкиВГОПостоянная.ПериодСценария,
		|	ИнформацияСверкиВГОПостоянная.Сценарий";
		
	Иначе
		ЗапросДляОчисткиТекст = СтрЗаменить(ЗапросДляОчисткиТекст, 
		"И ИнформацияСверкиВГОПостоянная.Отправитель В(&Организации)", "");
	КонецЕсли;
	
	Если ОтправительОтбор <> Неопределено Тогда
		ЗапросДляОчистки.УстановитьПараметр("Отправитель", ОтправительОтбор);
	Иначе
		ЗапросДляОчисткиТекст = СтрЗаменить(ЗапросДляОчисткиТекст, "И ИнформацияСверкиВГОПостоянная.Отправитель В(&Отправитель)", "");
	КонецЕсли;
	
	Если ПолучательОтбор <> Неопределено Тогда
		ЗапросДляОчистки.УстановитьПараметр("Получатель", ПолучательОтбор);
	Иначе
		ЗапросДляОчисткиТекст = СтрЗаменить(ЗапросДляОчисткиТекст, "И ИнформацияСверкиВГОПостоянная.Получатель В(&Получатель)", "");
	КонецЕсли;
	
	Если ВалютаОтбор <> Неопределено Тогда
		ЗапросДляОчистки.УстановитьПараметр("Валюта", ВалютаОтбор);
	Иначе
		ЗапросДляОчисткиТекст = СтрЗаменить(ЗапросДляОчисткиТекст, "И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов В(&Валюта)", "");
	КонецЕсли;
	
	ЗапросДляОчистки.Текст = ЗапросДляОчисткиТекст;

	Возврат ЗапросДляОчистки;
	
КонецФункции

// Возвращает результат запроса
Функция ПолучитьЗоныРасчетаРасхождений(Знач Отбор, Знач флОтладка)
	
	Перем ВидОтчета, ИскЗначение, ИсточникДанныхОтбор, РазделВГООтбор, Результат, ТекстЗапроса, ТекстУсловия;
	
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СтатусыПериодовСценариев.ВерсияРегламента КАК Этап,
		|	ВерсииРегламентовПодготовкиОтчетности.ШаблонСверкиВГО КАК ШаблонСверкиВГО,
		|	СтатусыПериодовСценариев.Сценарии КАК Сценарий,
		|	СтатусыПериодовСценариев.Периоды КАК Период,
		|	СтатусыПериодовСценариев.ВерсияРегламента КАК ВерсияРегламента
		|ПОМЕСТИТЬ ШаблоныСверкиВГО
		|ИЗ
		|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
		|		ПО СтатусыПериодовСценариев.ВерсияРегламента = ВерсииРегламентовПодготовкиОтчетности.Ссылка
		|			И (ВерсииРегламентовПодготовкиОтчетности.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(справочник.ШаблоныСверкиВГО.ПустаяСсылка))
		|ГДЕ
		|	&УсловияПоВерсиямРегламента
		|
		|СГРУППИРОВАТЬ ПО
		|	СтатусыПериодовСценариев.Периоды,
		|	СтатусыПериодовСценариев.Сценарии,
		|	ВерсииРегламентовПодготовкиОтчетности.ШаблонСверкиВГО,
		|	СтатусыПериодовСценариев.ВерсияРегламента,
		|	СтатусыПериодовСценариев.ВерсияРегламента
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭтапыПроцессов.Ссылка,
		|	ЭтапыПроцессов.ШаблонСверкиВГО,
		|	СтатусыПериодовСценариев.Сценарии,
		|	СтатусыПериодовСценариев.Периоды,
		|	СтатусыПериодовСценариев.ВерсияРегламента
		|ИЗ
		|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьЭтапыПроцессов КАК ЭтапыПроцессов
		|			ПО ВерсииРегламентовПодготовкиОтчетности.ШаблонПроцесса = ЭтапыПроцессов.Владелец
		|				И (ЭтапыПроцессов.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(Справочник.ШаблоныСверкиВГО.ПустаяСсылка))
		|				И (НЕ ЭтапыПроцессов.ПометкаУдаления)
		|		ПО СтатусыПериодовСценариев.ВерсияРегламента = ВерсииРегламентовПодготовкиОтчетности.Ссылка
		|ГДЕ
		|	&УсловияПоЭтапам
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыПроцессов.Ссылка,
		|	ЭтапыПроцессов.ШаблонСверкиВГО,
		|	СтатусыПериодовСценариев.Сценарии,
		|	СтатусыПериодовСценариев.Периоды,
		|	СтатусыПериодовСценариев.ВерсияРегламента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазделыСверкиВГО.Ссылка КАК РазделСверкиВГО,
		|	ШаблоныСверкиВГО.Этап,
		|	ШаблоныСверкиВГО.ШаблонСверкиВГО,
		|	ШаблоныСверкиВГО.ШаблонСверкиВГО.ВалютаИтогов КАК ВалютаИтогов,
		|	ШаблоныСверкиВГО.ВерсияРегламента КАК ВерсияРегламента,
		|	ШаблоныСверкиВГО.Период КАК Период,
		|	ШаблоныСверкиВГО.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ РазделыСверкиВГО
		|ИЗ
		|	ШаблоныСверкиВГО КАК ШаблоныСверкиВГО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РазделыСверкиВГО КАК РазделыСверкиВГО
		|		ПО ШаблоныСверкиВГО.ШаблонСверкиВГО = РазделыСверкиВГО.Владелец
		|			И (НЕ РазделыСверкиВГО.ПометкаУдаления)
		|			И (НЕ ШаблоныСверкиВГО.ШаблонСверкиВГО.ПометкаУдаления)
		|			И (НЕ РазделыСверкиВГО.НеСверять)
		|ГДЕ
		|	ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РазделыСверкиВГО.Этап КАК Этап,
		|	РазделыСверкиВГО.РазделСверкиВГО КАК РазделВГО,
		|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных КАК ИсточникДанных,
		|	РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета КАК СпособОпределенияНаправленияУчета,
		|	РазделыСверкиВГОИсточникиДанных.НомерСтроки КАК НомерСтрокиРесурса,
		|	РазделыСверкиВГО.ВалютаИтогов КАК ВалютаИтогов,
		|	РазделыСверкиВГО.Период КАК ПериодСценария,
		|	РазделыСверкиВГО.Сценарий КАК Сценарий,
		|	РазделыСверкиВГО.ВерсияРегламента КАК ВерсияРегламента
		|ИЗ
		|	РазделыСверкиВГО КАК РазделыСверкиВГО
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
		|		ПО РазделыСверкиВГО.РазделСверкиВГО = РазделыСверкиВГОИсточникиДанных.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных,
		|	РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета,
		|	РазделыСверкиВГОИсточникиДанных.НомерСтроки,
		|	РазделыСверкиВГО.РазделСверкиВГО,
		|	РазделыСверкиВГО.Этап,
		|	РазделыСверкиВГО.ВалютаИтогов,
		|	РазделыСверкиВГО.Период,
		|	РазделыСверкиВГО.Сценарий,
		|	РазделыСверкиВГО.ВерсияРегламента
		|ИТОГИ
		|	МАКСИМУМ(ВалютаИтогов),
		|	МАКСИМУМ(ВерсияРегламента)
		|ПО
		|	ПериодСценария,
		|	Сценарий,
		|	Этап,
		|	РазделВГО";
	
	ТекстУсловияПоВерсиям = "";
	ТекстУсловияПоЭтапам = "";
	ТекстУсловия = "";
	
	ИскЗначение = Неопределено;
	Если Отбор.Свойство("Этап", ИскЗначение) Тогда
		Запрос.УстановитьПараметр("Этап", ИскЗначение);
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям + "	И СтатусыПериодовСценариев.ВерсияРегламента = &Этап" + Символы.ПС;
		ТекстУсловияПоЭтапам = ТекстУсловияПоЭтапам + "	И ЭтапыПроцессов.Ссылка = &Этап" + Символы.ПС;
	КонецЕсли;
	
	ИскЗначение = Неопределено;
	Если Отбор.Свойство("Сценарий", ИскЗначение) Тогда
		Запрос.УстановитьПараметр("Сценарий", ИскЗначение);
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям + "	И СтатусыПериодовСценариев.Сценарии = &Сценарий" + Символы.ПС;
		ТекстУсловияПоЭтапам = ТекстУсловияПоЭтапам + "	И СтатусыПериодовСценариев.Сценарии = &Сценарий" + Символы.ПС;
	КонецЕсли;
	
	ИскЗначение = Неопределено;
	Если Отбор.Свойство("ПериодСверки", ИскЗначение) ИЛИ Отбор.Свойство("ПериодСценария", ИскЗначение) Тогда
		Запрос.УстановитьПараметр("ПериодСценария", ИскЗначение);
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям + "	И СтатусыПериодовСценариев.Периоды = &ПериодСценария" + Символы.ПС;
		ТекстУсловияПоЭтапам = ТекстУсловияПоЭтапам + "	И СтатусыПериодовСценариев.Периоды = &ПериодСценария" + Символы.ПС;
	КонецЕсли;
	
	ВидОтчета = Неопределено;
	Если Отбор.Свойство("ВидОтчета", ВидОтчета) Тогда
		Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
		Если ТипЗнч(ВидОтчета) = Тип("Массив") ИЛИ ТипЗнч(ВидОтчета) = Тип("СписокЗначений") Тогда
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.ИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец В(&ВидОтчета)" + Символы.ПС;
		Иначе
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.ИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец = &ВидОтчета" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	ИсточникДанныхОтбор = Неопределено;
	Если Отбор.Свойство("ИсточникДанных", ИсточникДанныхОтбор) Тогда
		Запрос.УстановитьПараметр("ИсточникДанных", ИсточникДанныхОтбор);
		Если ТипЗнч(ИсточникДанныхОтбор) = Тип("Массив") ИЛИ ТипЗнч(ИсточникДанныхОтбор) = Тип("СписокЗначений") Тогда
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.ИсточникиДанных.ИсточникДанных В(&ИсточникДанных)" + Символы.ПС;
		Иначе
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.ИсточникиДанных.ИсточникДанных = &ИсточникДанных" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	РазделВГООтбор = Неопределено;
	Если Отбор.Свойство("РазделВГО", РазделВГООтбор) Тогда
		Запрос.УстановитьПараметр("РазделВГО", РазделВГООтбор);
		Если ТипЗнч(РазделВГООтбор) = Тип("Массив") ИЛИ ТипЗнч(РазделВГООтбор) = Тип("СписокЗначений") Тогда
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.ИсточникиДанных.Ссылка В(&РазделВГО)" + Символы.ПС;
		Иначе
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.ИсточникиДанных.Ссылка = &РазделВГО" + Символы.ПС;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстУсловияПоВерсиям <> "" Тогда
		ТекстУсловияПоВерсиям = "ГДЕ" + Символы.ПС + Символы.Таб + Прав(ТекстУсловияПоВерсиям, СтрДлина(ТекстУсловияПоВерсиям)-2);
	КонецЕсли;
	Если ТекстУсловияПоЭтапам <> "" Тогда
		ТекстУсловияПоЭтапам = "ГДЕ" + Символы.ПС + Символы.Таб + Прав(ТекстУсловияПоЭтапам, СтрДлина(ТекстУсловияПоЭтапам)-2);
	КонецЕсли;
	Если ТекстУсловия <> "" Тогда
		ТекстУсловия = "ГДЕ" + Символы.ПС + Символы.Таб + Прав(ТекстУсловия, СтрДлина(ТекстУсловия)-2);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ" + Символы.ПС + "	&УсловияПоВерсиямРегламента", ТекстУсловияПоВерсиям);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ" + Символы.ПС + "	&УсловияПоЭтапам", ТекстУсловияПоЭтапам);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ" + Символы.ПС + "	ИСТИНА", ТекстУсловия);
	
	Запрос.Текст = ТекстЗапроса;
	
	Если флОтладка Тогда
		СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки(НСтр("ru = 'Зоны сверки'"), Запрос, Отбор);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	
	ВыборкаПериодов = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Возврат ВыборкаПериодов;
	
КонецФункции

#КонецОбласти

#Область ОбработкаСобытийДляРасчетаРасхождений

// Подготовка для работы с расхождениями:
//	 1. Проверяем, что запущено фоновое задание по расчету расхождений
//	 2. Если запущено, то ждем завершения.
//	 3. Запускаем повторный расчет (могут появиться новые данные, после запуска фонового задания п. 2) и ждем завершения.
// Параметры:
//	Отбор - струкутра с параметрами отбора (Сценарий, ПериодСверки, Этап, Организации, Отправитель, Получатель).
//	мДокументы - массив, в который будут добавлены полученные документы расчета расхождений.
//	ТекстОшибки - если возникает ошибка, то к значению переменной дописывается описание ошибки.
//
Функция УбедитьсяЧтоРасхожденияРасчитаны(Знач ОтборДанных=Неопределено, ТекстОшибки=Неопределено, ОжидатьЗавершения=Истина, флОтладка=Ложь) Экспорт
	Перем ФЗ, Параметры, УИДКлюча;
	
	Если НЕ ОбщегоНазначенияПовтИспУХ.РассчитыватьРасхожденияПорталаВГО() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Попытка
		УИДКлюча = Новый УникальныйИдентификатор;
		Параметры = Новый Массив;
		Параметры.Добавить(УИДКлюча);
		Параметры.Добавить(ТекущаяУниверсальнаяДатаВМиллисекундах());
		Параметры.Добавить(ОтборДанных);
		Параметры.Добавить(5);
		Параметры.Добавить(флОтладка);
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ОбщегоНазначенияУХ.ИнформационнаяБазаФайловая() И ОбщегоНазначенияУХ.ЭтоВнешнееСоединение() Тогда
			
			// Запуск фонового задания в файловой версии из внешнего соединения не работает.
			СверкаВГОУХ.РасчитатьРасхожденияФоновоеЗадание(Параметры[0], Параметры[1], Параметры[2], Параметры[3], Параметры[4]);
			
		Иначе
			ФЗ = ФоновыеЗадания.Выполнить("СверкаВГОУХ.РасчитатьРасхожденияФоновоеЗадание", Параметры, УИДКлюча, НСтр("ru = 'Расчет расхождений '") + Формат(Параметры[1], "ЧГ=0"));
			
			Если ОжидатьЗавершения И НЕ ОбщегоНазначенияУХ.ИнформационнаяБазаФайловая() Тогда
				мФЗ = Новый Массив;
				мФЗ.Добавить(ФЗ);
				
				Попытка
					ФоновыеЗадания.ОжидатьЗавершения(мФЗ);
				Исключение
				КонецПопытки;
				
				ТекстСообщений = СверкаВГОУХ.ПолучитьТекстСообщенийФоновогоЗаданияРасчетаРасхождений(ФЗ);
				Если ТекстОшибки <> Неопределено Тогда
					ТекстОшибки = ТекстОшибки + ТекстСообщений;
					Если ТекстОшибки <> "" Тогда
						ТекстОшибки = ТекстОшибки + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
				Если ТекстСообщений <> "" Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Ложь);
		
	Исключение
		
		ИнформацияОшибки = ИнформацияОбОшибке();
		
		ТекстОшибки = ?(ТекстОшибки=Неопределено, "", ТекстОшибки + ?(ТекстОшибки="","",Символы.ПС)) +
			НСтр("ru = 'Ошибка запуска расчета расхождений:'") + Символы.ПС +
			ИнформацияОшибки.Описание + Символы.ПС + СИмволы.ПС +
			НСтр("ru = 'ОтборДанных: '") + СверкаВГОУХ.ЗначениеВСтроку(ОтборДанных) + Символы.ПС +
			НСтр("ru = 'Номер строки: '") + ИнформацияОшибки.НомерСтроки + Символы.ПС +
			НСтр("ru = 'Исходная строка: '") + ИнформацияОшибки.ИсходнаяСтрока + Символы.ПС +
			НСтр("ru = 'Причина: '") + ИнформацияОшибки.Причина;
			
		ЗаписьЖурналаРегистрации("РасхожденияВГО.ОшибкаЗапускаФЗ", УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Расчитывает расхождения по регистру сведений ОрганизацииДляРасчетаРасхождений.
// После расчета, регистр очищается.
// Параметры:
//	КлючФЗ - гуид, который был использован в качестве ключа, при запуске этого фонового задания. Позволяет отличить его от других, с аналогичным методом.
//	ВремяВызоваМлсек - значение возвращаемое функцией ТекущаяУниверсальнаяДатаВМиллисекундах(), необходима для ожидания завершения фоновых заданий, 
//	ОтборДанных - структура для задания обрасти расчета расхождений, состав полей см. процедуру РасчитатьРасхождения. Если Неопределено, то расчет делается
//			на основании данных регистра сведений ОрганизацииДляРасчетаРасхождений.
//	Таймаут - время (мин) ожидания завершения других фоновых заданий.
//
Процедура РасчитатьРасхожденияФоновоеЗадание(КлючФЗ, ВремяВызоваМлсек, ОтборДанных=Неопределено, Таймаут=5, флОтладка=Ложь) Экспорт
	
	Попытка
		
		ТекДата = ТекущаяУниверсальнаяДата();
		ОжидатьЗавершенияЗаданийВОчереди(КлючФЗ, Таймаут, Число(ВремяВызоваМлсек));
	
		Если ТипЗнч(ОтборДанных) <> Тип("Структура") Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
				|	ОрганизацииДляРасчетаРасхожденийВГО.ПериодСценария КАК ПериодСценария,
				|	ОрганизацииДляРасчетаРасхожденийВГО.Сценарий КАК Сценарий,
				|	ОрганизацииДляРасчетаРасхожденийВГО.Организация КАК Организация,
				|	ОрганизацииДляРасчетаРасхожденийВГО.РазделВГО КАК РазделВГО,
				|	ОрганизацииДляРасчетаРасхожденийВГО.Дата
				|ИЗ
				|	РегистрСведений.ОрганизацииДляРасчетаРасхожденийВГО КАК ОрганизацииДляРасчетаРасхожденийВГО
				|ГДЕ
				|	ОрганизацииДляРасчетаРасхожденийВГО.Дата <= &ТекДата
				|ИТОГИ ПО
				|	ПериодСценария,
				|	Сценарий,
				|	Организация,
				|	РазделВГО";
			
			Запрос.УстановитьПараметр("ТекДата", ТекДата);
			
			НаборЗаписей = РегистрыСведений.ОрганизацииДляРасчетаРасхожденийВГО.СоздатьНаборЗаписей();
			
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаПериодСценария = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПериодСценария.Следующий() Цикл
				ВыборкаСценарий = ВыборкаПериодСценария.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаСценарий.Следующий() Цикл
					ВыборкаОрганизация = ВыборкаСценарий.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаОрганизация.Следующий() Цикл
						ВыборкаРазделВГО = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаРазделВГО.Следующий() Цикл
							
							
							ТекстОшибки = "";
							Отбор = Новый Структура;
							Отбор.Вставить("Организации", ВыборкаРазделВГО.Организация);
							Отбор.Вставить("ПериодСверки", ВыборкаРазделВГО.ПериодСценария);
							Отбор.Вставить("Сценарий", ВыборкаРазделВГО.Сценарий);
							Отбор.Вставить("РазделВГО", ВыборкаРазделВГО.РазделВГО);
							
							Если СверкаВГОУХ.РассчитатьРасхождения(Отбор, ТекстОшибки, флОтладка) Тогда
								ВыборкаДетальныеЗаписи = ВыборкаРазделВГО.Выбрать();
								Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
									НаборЗаписей.Очистить();
									НаборЗаписей.Отбор.ПериодСценария.Установить(ВыборкаДетальныеЗаписи.ПериодСценария);
									НаборЗаписей.Отбор.Сценарий.Установить(ВыборкаДетальныеЗаписи.Сценарий);
									НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
									НаборЗаписей.Отбор.РазделВГО.Установить(ВыборкаДетальныеЗаписи.РазделВГО);
									НаборЗаписей.Отбор.Дата.Установить(ВыборкаДетальныеЗаписи.Дата);
									НаборЗаписей.Записать();
								КонецЦикла;
								
							Иначе
								Сообщение = Новый СообщениеПользователю;
								Сообщение.Текст = "Период "+ ВыборкаРазделВГО.ПериодСценария + ".Сценарий " + ВыборкаРазделВГО.Сценарий +
									". Организация " + ВыборкаРазделВГО.Организация + ". РазделВГО " + ВыборкаРазделВГО.РазделВГО + "."
									+ Символы.ПС + ТекстОшибки;
								Сообщение.Сообщить();
							КонецЕсли;
							
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
			
		Иначе
			ТекстОшибки = "";
			СверкаВГОУХ.РассчитатьРасхождения(ОтборДанных, ТекстОшибки, флОтладка);
			Если ТекстОшибки <> "" Тогда
				// запишем ошибку для передачи в вызвавшую функцию
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СверкаВГОУХ.ЗначениеВСтроку(ОтборДанных) + Символы.ПС + ТекстОшибки;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка", УровеньЖурналаРегистрации.Ошибка,,КлючФЗ, НСтр("ru = 'Ошибка выполнения фонового задания: '") + ПредставлениеОшибки);
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ПредставлениеОшибки;
		Сообщение.Сообщить();
	КонецПопытки;
		
КонецПроцедуры

Процедура ОжидатьЗавершенияЗаданийВОчереди(Знач КлючФЗ, Знач Таймаут, Знач ВремяВызоваМлсек)
	
	Перем мФоновыеЗадания, Ном, Отбор, ТаймаутСек, ФЗ_, флНеПроверятьТаймаут, флПрервать;
	
	Если НЕ ОбщегоНазначенияУХ.ИнформационнаяБазаФайловая() Тогда
		Отбор = Новый Структура("ИмяМетода,Состояние", "СверкаВГОУХ.РасчитатьРасхожденияФоновоеЗадание", СостояниеФоновогоЗадания.Активно);
		Ном = 0;
		флНеПроверятьТаймаут = (Таймаут = 0);
		ТаймаутСек = Таймаут;
		Пока Ном < ТаймаутСек Цикл
			мФоновыеЗадания = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			// отберем только те задания, которые были запущены раньше нашего
			флПрервать = Истина;
			Для Каждого ФЗ_ Из мФоновыеЗадания Цикл
				Если Строка(КлючФЗ) = ФЗ_.Ключ Тогда
					Продолжить;
				КонецЕсли;
				Если ВремяВызоваМлсек <= Число(Сред(ФЗ_.Наименование, 20)) Тогда
					Продолжить;
				КонецЕсли;
				флПрервать = Ложь;
				Прервать;
			КонецЦикла;
			Если флПрервать Тогда
				Прервать;
			КонецЕсли;
			
			Если флНеПроверятьТаймаут ИЛИ Ном >= ТаймаутСек Тогда
				ВызватьИсключение НСтр("ru = 'Истек срок ожидания в очереди фоновых заданий.'");
			КонецЕсли;
			
			ОчередьФоновыхЗаданийУХ.ОжидатьСек(1);
			
			Ном = Ном + 1;
			
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьТекстСообщенийФоновогоЗаданияРасчетаРасхождений(ФЗ) Экспорт
	Перем ТекстСообщения;
	
	Если ТипЗнч(ФЗ) <> Тип("ФоновоеЗадание") Тогда
		Возврат "";
	КонецЕсли;
	
	мСообщений = ФЗ.ПолучитьСообщенияПользователю();
	
	ТекстСообщения = "";
	Для Каждого Сообщение_ Из мСообщений Цикл
		Текст_ = СокрЛП(Сообщение_.Текст);
		Если Текст_ = "" Тогда
			Продолжить;
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + Текст_ + Символы.ПС;
	КонецЦикла;
	
	Если ТекстСообщения <> "" Тогда
		ТекстСообщения = Лев(ТекстСообщения, СтрДлина(ТекстСообщения)-1);
	КонецЕсли;
	
	Возврат ТекстСообщения;
КонецФункции

// При проведении или отмене проведения пересчитываем расхождения
Процедура ОбработкаПроведенияНастраиваемыйОтчет(Источник) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИспУХ.РассчитыватьРасхожденияПорталаВГО() Тогда
		Возврат;
	КонецЕсли;
	
	ТекДата = ТекущаяУниверсальнаяДата();
	
	// Перечень видов отчетов связанных с настройкой видов вго, содержащей Источник.ВидОтчета с другой стороны сверки.
	// Организация участвует в найденных видах отчетах как контрагент.
	Запрос = Новый Запрос;
	ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СтатусыПериодовСценариев.ВерсияРегламента,
		|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонПроцесса,
		|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО,
		|	СтатусыПериодовСценариев.УправлениеПериодомСценария
		|ПОМЕСТИТЬ ТекущаяВерсияРегламента
		|ИЗ
		|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
		|ГДЕ
		|	СтатусыПериодовСценариев.Сценарии = &Сценарий
		|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
		|	И НЕ СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО.ПометкаУдаления
		|	И СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(справочник.ШаблоныСверкиВГО.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РазделыСверкиВГОИсточникиДанных.Ссылка КАК РазделВГО
		|ИЗ
		|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущаяВерсияРегламента КАК ТекущаяВерсияРегламента
		|		ПО ТекущаяВерсияРегламента.ВерсияРегламента.ШаблонСверкиВГО = РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец
		|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
		|			И (НЕ РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ПометкаУдаления)
		|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец = &ВидОтчета)
		|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.НеСверять)";

	Запрос.УстановитьПараметр("Сценарий", Источник.Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", Источник.ПериодОтчета);
	Запрос.УстановитьПараметр("ВидОтчета", Источник.ВидОтчета);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.ОрганизацииДляРасчетаРасхожденийВГО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодСценария.Установить(Источник.ПериодОтчета);
		НаборЗаписей.Отбор.Сценарий.Установить(Источник.Сценарий);
		НаборЗаписей.Отбор.Организация.Установить(Источник.Организация);
		
		НаборЗаписей.Отбор.Дата.Установить(ТекДата);
			
		ВыборкаИД = Результат.Выбрать();
		Пока ВыборкаИД.Следующий() Цикл
			НаборЗаписей.Отбор.РазделВГО.Установить(ВыборкаИД.РазделВГО);
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ПериодСценария = Источник.ПериодОтчета;
			НоваяЗапись.Сценарий = Источник.Сценарий;
			НоваяЗапись.Организация = Источник.Организация;
			НоваяЗапись.РазделВГО = ВыборкаИД.РазделВГО;
			НоваяЗапись.Дата = ТекДата;
			НаборЗаписей.Записать();
			НаборЗаписей.Очистить();
		КонецЦикла;
		
		СверкаВГОУХ.УбедитьсяЧтоРасхожденияРасчитаны(,,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияРеализацииТоваровУслуг(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	ВзаиморасчетыВстраиваниеУХ.ОбработкаЗаполненияРеализацииТоваровУслуг(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область РаботаСДополнительнымиАналитиками
// Процедуры и функции работы с доп. аналитиками


// Создать таблицу для хранения дополнительных аналитик
//
Функция СоздатьТаблицуДопАналитик() Экспорт
	Перем Таб, Массив;
	
	Массив = Новый Массив;
	
	Таб = Новый ТаблицаЗначений;
	
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	Таб.Колонки.Добавить("Реквизит", Новый ОписаниеТипов(Массив));
	
	Таб.Колонки.Добавить("Значение");
	
	Массив.Очистить();
	Массив.Добавить(Тип("Строка"));
	Таб.Колонки.Добавить("Имя", Новый ОписаниеТипов(Массив, Новый КвалификаторыСтроки(30)));
	
	Возврат Таб;
КонецФункции

// Добавляем значение реквизита в таблицу аналитик
// Параметры:
//		Реквизит - ссылка на План видов характеристик Субконто корпоративные.
//			Определяет тип значения.
//		Значение - значение соответствующее типу параметра Реквизит.
//
Процедура ДобавитьЗначениеВТаблицуДопАналитик(ТаблицаДопАналитик, Имя, Реквизит, Значение) Экспорт
	Если НЕ ЗначениеЗаполнено(Имя) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаДопАналитик.Найти(Имя, "Имя");
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТаблицаДопАналитик.Добавить();
		НоваяСтрока.Имя = Имя;
	КонецЕсли;
	НоваяСтрока.Реквизит = Реквизит;
	НоваяСтрока.Значение = Значение;
КонецПроцедуры

// Возвращает ссылку на справочник ДопАналитикаРасхожденийВГО для переаднных реквизитов.
// Поиск осуществляется по регистру сведений ЗначенияДопАналитикРасхожденийВГО.
// Если адрес не найден, то он созадется в справочнике и значения его реквизитов
// записываются в регистр сведений.
// Параметры:
//		ПериодСценария - период сценария для которого осуществляется проверка.
//		Сценарий - сценарий для которого осуществляется проверка.
//		Этап - ссылка на справочник, либо "ВерсииРегалментаПодготовкиОтчетности", либо "ЭтапыПроцессов".
//		ТаблицаДопАналитик - таблица значений описывающая предмет комментирования. Колонки:
//			НомерРеквизита - номер реквизита адреса по порядку использования,
//			Реквизит - значение ПланВидовХарактеристикСсылка 
//				СубконтоКорпоративные, описывает тип реквизита,
//			Значение - значение реквизита.
//		ТекстОшибки - если возникла ошибка, то в переменную возвращается ее описание.
// Возвращает:
// 		Неопределено - возникли ошибки, в ТекстОшибки записывает ее описание.
//  	Ссылка на справочник ДопАналитикаРасхожденийВГО.
//
Функция ПолучитьСсылкуНаДопАналитику(ПериодСценария, Сценарий, Этап, РазделВГО, ТаблицаДопАналитик, ТекстОшибки) Экспорт
	Перем Ссылка, ТекстЗапроса, ЧислоРеквизитов;
	
	ЧислоРеквизитов = ТаблицаДопАналитик.Количество();
	Если ЧислоРеквизитов = 0 Тогда
		ТекстОшибки = НСтр("ru = 'Нет реквизитов для сравнения!'");
		возврат Неопределено;
	КонецЕсли;
	
	// Вначале ищем в регистре сведений
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	Ном = 0;
	Для Каждого Стр Из ТаблицаДопАналитик Цикл
		Ном = Ном + 1;
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ЗначенияРеквизитов.ДопАналитикаРасхождения КАК ДопАналитикаРасхождения
			|" + ?(Ном = 1, "ПОМЕСТИТЬ ПодходящиеАналитикиРасхождения " + Символы.ПС, "") + "
			|ИЗ
			|	РегистрСведений.ЗначенияДопАналитикРасхожденийВГО КАК ЗначенияРеквизитов
			|ГДЕ
			|	ЗначенияРеквизитов.Имя = &Имя" + Ном + "
			|	И ЗначенияРеквизитов.Реквизит = &Реквизит" + Ном + "
			|	И ЗначенияРеквизитов.Значение = &ЗначениеРеквизита" + Ном + "
			|	И ЗначенияРеквизитов.Сценарий = &Сценарий
			|	И ЗначенияРеквизитов.ПериодСценария = &ПериодСценария
			|	И ЗначенияРеквизитов.Этап = &Этап
			|	И ЗначенияРеквизитов.РазделВГО = &РазделВГО
			|	И НЕ ЗначенияРеквизитов.ДопАналитикаРасхождения.ПометкаУдаления
			|
			|" + ?(Ном < ЧислоРеквизитов, "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС, "") + "
			|";

		Запрос.УстановитьПараметр("ЗначениеРеквизита" + Ном, Стр.Значение);
		Запрос.УстановитьПараметр("Имя" + Ном, Стр.Имя);
		Запрос.УстановитьПараметр("Реквизит" + Ном, Стр.Реквизит);
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + 
		"ИНДЕКСИРОВАТЬ ПО ДопАналитикаРасхождения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПодходящиеАналитикиРасхождения.ДопАналитикаРасхождения КАК Ссылка,
		|	СУММА(1) КАК КолСовпадений
		|ИЗ
		|	ПодходящиеАналитикиРасхождения КАК ПодходящиеАналитикиРасхождения
		|
		|ГДЕ
		|	ПодходящиеАналитикиРасхождения.ДопАналитикаРасхождения.ЧислоРеквизитов = &ЧислоРеквизитов
		|
		|СГРУППИРОВАТЬ ПО
		|	ПодходящиеАналитикиРасхождения.ДопАналитикаРасхождения
		|
		|ИМЕЮЩИЕ
		|	СУММА(1) = &ЧислоРеквизитов";
				   
	Запрос.УстановитьПараметр("ЧислоРеквизитов", ЧислоРеквизитов);	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("РазделВГО", РазделВГО);
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Ссылка = Неопределено;
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	
	// Если не нашли, то создаем
	Если Ссылка = Неопределено Тогда
		НачатьТранзакцию();
		Попытка
			ОбъектДопАналитикаРасхожденийВГО = Справочники.ДопАналитикаРасхожденийВГО.СоздатьЭлемент();
			ОбъектДопАналитикаРасхожденийВГО.Владелец = ПериодСценария;
			ОбъектДопАналитикаРасхожденийВГО.Сценарий = Сценарий;
			ОбъектДопАналитикаРасхожденийВГО.Этап = Этап;
			ОбъектДопАналитикаРасхожденийВГО.ЧислоРеквизитов = ЧислоРеквизитов;
			ОбъектДопАналитикаРасхожденийВГО.Наименование = ПредставлениеДопАналитик(ПериодСценария, Сценарий, Этап, ТаблицаДопАналитик);
			ОбъектДопАналитикаРасхожденийВГО.ПредставлениеАналитики = ПредставлениеДопАналитик(ПериодСценария, Сценарий, Этап, ТаблицаДопАналитик, Истина);
			ОбъектДопАналитикаРасхожденийВГО.Записать();
			
		    НаборЗаписей = РегистрыСведений.ЗначенияДопАналитикРасхожденийВГО.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПериодСценария.Установить(ПериодСценария);
			НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
			НаборЗаписей.Отбор.Этап.Установить(Этап);
			НаборЗаписей.Отбор.ДопАналитикаРасхождения.Установить(ОбъектДопАналитикаРасхожденийВГО.Ссылка);
			НаборЗаписей.Отбор.РазделВГО.Установить(РазделВГО);
			НаборЗаписей.Прочитать();
			
			Для Каждого Стр Из ТаблицаДопАналитик Цикл
				ЗначениеРеквизита = НаборЗаписей.Добавить();
				ЗначениеРеквизита.ПериодСценария = ПериодСценария;
				ЗначениеРеквизита.Сценарий = Сценарий;
				ЗначениеРеквизита.Этап = Этап;
				ЗначениеРеквизита.РазделВГО = РазделВГО;
				ЗначениеРеквизита.ДопАналитикаРасхождения = ОбъектДопАналитикаРасхожденийВГО.Ссылка;
				ЗначениеРеквизита.Реквизит = Стр.Реквизит;
				ЗначениеРеквизита.Имя = Стр.Имя;
				ЗначениеРеквизита.Значение = Стр.Значение;
			КонецЦикла;
			НаборЗаписей.Записать();
			
		ЗафиксироватьТранзакцию();
		Ссылка = ОбъектДопАналитикаРасхожденийВГО.Ссылка;
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ОтменитьТранзакцию();
		КонецПопытки;
	КонецЕсли;

	Возврат Ссылка;
КонецФункции
	
// Формируем текстовую строку представления для набора аналитик.
//		ПериодСценария - период сценария для которого осуществляется проверка.
//		Сценарий - сценарий для которого осуществляется проверка.
//		Этап - ссылка на справочник, либо "ВерсииРегалментаПодготовкиОтчетности", либо "ЭтапыПроцессов".
//		ТаблицаДопАналитик - таблица значений описывающая предмет комментирования. Колонки:
//			НомерРеквизита - номер реквизита адреса по порядку использования,
//			Реквизит - значение ПланВидовХарактеристикСсылка 
//				СубконтоКорпоративные, описывает тип реквизита,
//			Значение - значение реквизита.
Функция ПредставлениеДопАналитик(ПериодСценария, Сценарий, Этап, ТаблицаДопАналитик, Полное=Ложь)
	Перем Представление;
	ТаблицаДопАналитик.Сортировать("Имя");
	Представление = "";
	Для Каждого Стр Из ТаблицаДопАналитик Цикл
		Представление = Представление + ?(Полное,СокрЛП(Стр.Имя) + "=", "") + СокрЛП(Стр.Значение) + ",";
	КонецЦикла;
	Представление = Лев(Представление, СтрДлина(Представление)-1);
	Возврат Представление;
КонецФункции

// Помечаем на удаление допаналитику.
// Параметры:
//		ПериодСценария - период сценария для которого осуществляется проверка.
//		Сценарий - сценарий для которого осуществляется проверка.
//		Этап - ссылка на справочник, либо "ВерсииРегалментаПодготовкиОтчетности", либо "ЭтапыПроцессов".
//		ТаблицаДопАналитик - таблица значений описывающая предмет комментирования. Колонки:
//			НомерРеквизита - номер реквизита адреса по порядку использования,
//			Реквизит - значение ПланВидовХарактеристикСсылка 
//				СубконтоКорпоративные, описывает тип реквизита,
//			Значение - значение реквизита.
//		ТекстОшибки - если возникла ошибка, то в переменную возвращается ее описание.// Возвращаемое значение:
//   Возвращает:
//		Истина - пометку установили.
//		Ложь - удалить не получилось, в переменной ТекстОшибки описание ошибки.
//
Функция ПометитьНаУдалениеДопАналитику(ПериодСценария, Сценарий, Этап, РазделВГО, ТаблицаДопАналитик, ТекстОшибки) Экспорт
	Перем ПредметКомментирования, Объект_;
	
	СсылкаДопАналитика = ПолучитьСсылкуНаДопАналитику(ПериодСценария, Сценарий, Этап, РазделВГО, ТаблицаДопАналитик, ТекстОшибки);
	Если СсылкаДопАналитика = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли; 

	Объект_ = СсылкаДопАналитика.ПолучитьОбъект();
	Если Объект_ = Неопределено Тогда
		ТекстОшибки = ТекстОшибки + НСтр("ru = 'Невозможно получить объект справочника дополнительных аналитик ВГО, чтобы его пометить на удаление.'");
		Возврат Ложь;
	КонецЕсли;
	
	Объект_.УстановитьПометкуУдаления(Истина);
	Возврат Истина;
КонецФункции // УдалитьПредметКомментирования()

// Получить таблицу с описанием реквизитов доп. аналитики
// Параметры:
//	ДопАналитикаСсылка - СправочникСсылка.ДопАналитикаРасхожденийВГО.
// Возвращает:
//	ТаблицаЗначений - всегда, даже если возникла ошибка получения данных.
//	Структура таблицы:
//		Имя - Строка, имя реквизита.
//		Реквизит - ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные.
//		Значение - Характеристика.ВидыСубконтоКорпоративные.
//
Функция ПолучитьОписаниеРеквизитовДопАналитики(ДопАналитикаСсылка) Экспорт
	Перем ТЗ;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияДопАналитикРасхожденийВГО.Имя,
		|	ЗначенияДопАналитикРасхожденийВГО.Значение,
		|	ЗначенияДопАналитикРасхожденийВГО.Реквизит
		|ИЗ
		|	РегистрСведений.ЗначенияДопАналитикРасхожденийВГО КАК ЗначенияДопАналитикРасхожденийВГО
		|ГДЕ
		|	ЗначенияДопАналитикРасхожденийВГО.ДопАналитикаРасхождения = &ДопАналитикаРасхождения";

	Запрос.УстановитьПараметр("ДопАналитикаРасхождения", ДопАналитикаСсылка);

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ТЗ = Новый ТаблицаЗначений;
		ТЗ.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
		ТЗ.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
		ТЗ.Колонки.Добавить("Значение", Новый ОписаниеТипов("Характеристика.ВидыСубконтоКорпоративные"));
	Иначе
		ТЗ = РезультатЗапроса.Выгрузить();
	КонецЕсли;;

	Возврат ТЗ;
КонецФункции


#КонецОбласти

#Область УрегулированиеИЗавершениеСверки
// Процедуры и функции для урегулирования и закрытия сверки


// Сортирует организации в массиве по убыванию их рейтинга для автоматического урегулирования (регистр сведений "РейтингОрганизацийДляУрегулированияРасхожденийВГО")
// Параметры:
//	РазделВГО - СправочникСсылка.РазделыСверкиВГО. По разделу сверки определяется ШаблонСверкиВГО, по которому отбираем данные в регистре рейтинга.
//	мОрганизаций - Массив с элементами СправочникСсылка.Организации.
// Возвращает:
//	Массив с организациям, отсортированными по убыванию их рейтинга для автоматического урегулирования.
//	Если части организаций нет в регистре, то они выносятся в конец массива с сохранением их исходного относительного порядка.
//	В крайнем случае, когда регистр не заполнен, массив останется без измененения.
//
Функция ОрганизацияСБольшимРейтингомУрегулирования(РазделВГО, мОрганизаций) Экспорт
	ТЗОрганизаций = Новый ТаблицаЗначений;
	ТЗОрганизаций.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТЗОрганизаций.Колонки.Добавить("Рейтинг", Новый ОписаниеТипов("Число"));
	
	Ном = 0;
	Количество = мОрганизаций.Количество();
	Пока Ном < Количество Цикл
		НоваяСтрока = ТЗОрганизаций.Добавить();
		НоваяСтрока.Организация = мОрганизаций[Ном];
		НоваяСтрока.Рейтинг = Ном;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЗОрганизаций.Организация,
		|	ТЗОрганизаций.Рейтинг
		|ПОМЕСТИТЬ мОрганизации
		|ИЗ
		|	ТЗОрганизаций КАК ТЗОрганизаций
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗОрганизации.Организация КАК Организация,
		|	ЕСТЬNULL(РейтингОрганизацийДляУрегулированияРасхожденийВГО.Рейтинг, 0) КАК РейтингИзРегистра,
		|	ТЗОрганизации.Рейтинг КАК РейтингИзМассива
		|ИЗ
		|	ТЗОрганизации КАК ТЗОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РейтингОрганизацийДляУрегулированияРасхожденийВГО КАК РейтингОрганизацийДляУрегулированияРасхожденийВГО
		|		ПО ТЗОрганизации.Организация = РейтингОрганизацийДляУрегулированияРасхожденийВГО.Организация
		|			И (РейтингОрганизацийДляУрегулированияРасхожденийВГО.ШаблонСверкиВГО = &ШаблонСверкиВГО)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РейтингИзРегистра УБЫВ,
		|	ТЗОрганизации.Рейтинг";

	Запрос.УстановитьПараметр("ШаблонСверкиВГО", РазделВГО.Владелец);
	Запрос.УстановитьПараметр("ТЗОрганизаций", ТЗОрганизаций);
	
	РезультатЗапроса = Запрос.Выполнить();

	ТЗОРганизацийОтсортированные = РезультатЗапроса.Выгрузить();

	Возврат ТЗОРганизацийОтсортированные.ВыгрузитьКолонку("Организация");
КонецФункции

// Функция выбирает расхождения по переданным фильтрам и производит автоматическое
// урегулирование в зависимости от способа урегулирования.
// Урегулирование делается документами "УрегулированиеРасхожденияВГО".
//
// Параметры:
//		СпособУрегулирования - Перечисление.СпособыАвтоматическогоУрегулирования
//		Параметры - Структура, содержит следующие значения:
//			ПериодСценария - обязательный, период для которого определяются расхождения.
//			Сценарий - обязательный, сценарий для которого определяются расхождения.
//			Этап - обязательный, ссылка на справочник "ВерсииРегламентовПодготовкиОтчетности",
//				либо "ЭтапыПроцессов".
//			СпособУрегулирования = ПеречислениеСсылка.СпособыУрегулирования. Обязательный.
//			Кредитор - необязательный, ссылка на справочник "Организации".
//				Организация-отправитель для которой формируется перечень расхождений.
//			Дебитор - необязательный, ссылка на справочник "Организации".
//				Организация-получатель для которой формируется перечень расхождений.
//			Проводить - булево, если истина, то документы урегулирования
//				проводятся. Если ложь или не указано, то не проводятся
//		ТекстОшибки - строка. В данную переменную записывается сообщение об ошибке.
// Возвращает:
//		Массив - массив документов "УрегулированиеРасхожденияВГО".
//			Если возникла ошибка, то массив пуст, а в переменной ТекстОшибки
//			записано описание ошибки.
//
Функция АвтоматическоеУрегулированиеРасхождений(Параметры, ТекстОшибки) Экспорт
	Перем ПериодСценария, Сценарий, Этап, СпособУрегулирования, Кредитор, Дебитор, мДокументовУрегулирования, СтруктураРасхождения, Отбор_;
	
	мДокументовУрегулирования = Новый Массив;
	
	Попытка
		НачатьТранзакцию();
		
		ТекстИсключения = "";
		Если НЕ Параметры.Свойство("ПериодСценария", ПериодСценария) Тогда
			ТекстИсключения = ТекстИсключения + НСтр("ru = 'Не указан период автоурегулирования.'") + Символы.ПС;
		КонецЕсли;
		
		Если НЕ Параметры.Свойство("Сценарий", Сценарий) Тогда
			ТекстИсключения = ТекстИсключения + НСтр("ru = 'Не указан сценарий автоурегулирования.'") + Символы.ПС;
		КонецЕсли;
		
		//Если НЕ Параметры.Свойство("Этап", Этап) Тогда
		//	ТекстИсключения = ТекстИсключения + НСтр("ru = 'Не указан этап автоурегулирования.'") + Символы.ПС;
		//КонецЕсли;
		
		Если НЕ Параметры.Свойство("СпособУрегулирования", СпособУрегулирования) Тогда
			ТекстИсключения = ТекстИсключения + НСтр("ru = 'Не указан способ автоурегулирования.'") + Символы.ПС;
		КонецЕсли;
		
		Если ТекстИсключения <> "" Тогда
			ВызватьИсключение ТекстИсключения;
		КонецЕсли;
		
		Если НЕ Параметры.Свойство("Кредитор", Кредитор) Тогда
			Кредитор = Неопределено;
		КонецЕсли;
		
		Если НЕ Параметры.Свойство("Дебитор", Дебитор) Тогда
			Дебитор = Неопределено;
		КонецЕсли;
		
		Отбор_ = Неопределено;
		РазделВГО = Неопределено;
		ВалютаВзаиморасчетов = Неопределено;
		ДопАналитика = Неопределено;
			
		Если Параметры.Свойство("Отбор", Отбор_) Тогда
			
			Если Кредитор = Неопределено Тогда
				Отбор_.Свойство("Кредитор", Кредитор);
			КонецЕсли;
			Если Дебитор = Неопределено Тогда
				Отбор_.Свойство("Дебитор", Дебитор);
			КонецЕсли;
			
			Отбор_.Свойство("РазделВГО", РазделВГО);
			Отбор_.Свойство("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
			Отбор_.Свойство("ДопАналитика", ДопАналитика);
			
		КонецЕсли;
		
		// готовим запрос с расхождениями
		ДатаОбработки = ТекущаяДата();
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	&АлгоритмОпределенияСтороныУрегулирования КАК Организация,
			|	ИнформацияСверкиВГОПостоянная.РазделВГО КАК РазделВГО,
			|	ИнформацияСверкиВГОПостоянная.Отправитель КАК Отправитель,
			|	ИнформацияСверкиВГОПостоянная.Получатель КАК Получатель,
			|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения КАК ДопАналитика,
			|	ИнформацияСверкиВГОПостоянная.СуммаРасхождения КАК РасхожденийОсталосьУрегулировать,
			|	ИнформацияСверкиВГОПостоянная.СуммаОтправителя КАК СуммаОтправителя,
			|	ИнформацияСверкиВГОПостоянная.СуммаПолучателя КАК СуммаПолучателя,
			|	ИнформацияСверкиВГОПостоянная.СуммаРасхожденияГр КАК РасхожденийОсталосьУрегулироватьГр,
			|	ВЫБОР
			|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|			ТОГДА (ИнформацияСверкиВГОПостоянная.СуммаОтправителя - ИнформацияСверкиВГОПостоянная.СуммаПолучателя) * 100 / ВЫБОР
			|					КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя = 0
			|						ТОГДА 1
			|					ИНАЧЕ ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|				КОНЕЦ
			|		ИНАЧЕ (ИнформацияСверкиВГОПостоянная.СуммаПолучателя - ИнформацияСверкиВГОПостоянная.СуммаОтправителя) * 100 / ВЫБОР
			|				КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя = 0
			|					ТОГДА 1
			|				ИНАЧЕ ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|			КОНЕЦ
			|	КОНЕЦ КАК ПроцентРасхождения
			|ПОМЕСТИТЬ ОтобранныеРасхождения
			|ИЗ
			|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
			|ГДЕ
			|	ИнформацияСверкиВГОПостоянная.СуммаРасхождения <> 0
			|	И ИнформацияСверкиВГОПостоянная.ПериодСценария = &ПериодСценария
			|	И ИнформацияСверкиВГОПостоянная.Сценарий = &Сценарий
			|	И ВЫБОР
			|			КОГДА ВЫБОР
			|					КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|						ТОГДА (ИнформацияСверкиВГОПостоянная.СуммаОтправителя - ИнформацияСверкиВГОПостоянная.СуммаПолучателя) * 100 / ВЫБОР
			|								КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя = 0
			|									ТОГДА 1
			|								ИНАЧЕ ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|							КОНЕЦ
			|					ИНАЧЕ (ИнформацияСверкиВГОПостоянная.СуммаПолучателя - ИнформацияСверкиВГОПостоянная.СуммаОтправителя) * 100 / ВЫБОР
			|							КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя = 0
			|								ТОГДА 1
			|							ИНАЧЕ ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|						КОНЕЦ
			|				КОНЕЦ <= ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	И &УсловиеГДЕ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ОтобранныеРасхождения.*
			|ИЗ
			|	ОтобранныеРасхождения КАК ОтобранныеРасхождения
			|ИТОГИ ПО
			|	РазделВГО";
			
		ТекстАлгоритмаОпределенияСтороныУрегулирования = "	ИнформацияСверкиВГОПостоянная.Отправитель";
		Если СпособУрегулирования = Перечисления.СпособыАвтоматическогоУрегулирования.ПоКредитору Тогда
			ТекстАлгоритмаОпределенияСтороныУрегулирования =
				"	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор) КАК СторонаУрегулирования,
				|	ИнформацияСверкиВГОПостоянная.Отправитель КАК Контрагент,
				|	ИнформацияСверкиВГОПостоянная.Получатель";
				
		ИначеЕсли СпособУрегулирования = Перечисления.СпособыАвтоматическогоУрегулирования.ПоМаксимальномуЗначению Тогда
			ТекстАлгоритмаОпределенияСтороныУрегулирования =
				"	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > ИнформацияСверкиВГОПостоянная.СуммаПолучателя
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор)
				|	КОНЕЦ КАК СторонаУрегулирования,
				|	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > ИнформацияСверкиВГОПостоянная.СуммаПолучателя
				|			ТОГДА ИнформацияСверкиВГОПостоянная.Отправитель
				|		ИНАЧЕ ИнформацияСверкиВГОПостоянная.Получатель
				|	КОНЕЦ КАК Контрагент,
				|	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > ИнформацияСверкиВГОПостоянная.СуммаПолучателя
				|			ТОГДА ИнформацияСверкиВГОПостоянная.Получатель
				|		ИНАЧЕ ИнформацияСверкиВГОПостоянная.Отправитель
				|	КОНЕЦ";
				
		ИначеЕсли СпособУрегулирования = Перечисления.СпособыАвтоматическогоУрегулирования.ПоМинимальномуЗначению Тогда
			ТекстАлгоритмаОпределенияСтороныУрегулирования =
				"	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя < ИнформацияСверкиВГОПостоянная.СуммаПолучателя
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор)
				|	КОНЕЦ КАК СторонаУрегулирования,
				|	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя < ИнформацияСверкиВГОПостоянная.СуммаПолучателя
				|			ТОГДА ИнформацияСверкиВГОПостоянная.Отправитель
				|		ИНАЧЕ ИнформацияСверкиВГОПостоянная.Получатель
				|	КОНЕЦ КАК Контрагент,
				|	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя < ИнформацияСверкиВГОПостоянная.СуммаПолучателя
				|			ТОГДА ИнформацияСверкиВГОПостоянная.Получатель
				|		ИНАЧЕ ИнформацияСверкиВГОПостоянная.Отправитель
				|	КОНЕЦ";
				
		ИначеЕсли СпособУрегулирования = Перечисления.СпособыАвтоматическогоУрегулирования.ПоРейтингуКомпаний Тогда
			ТекстАлгоритмаОпределенияСтороныУрегулирования =
				"	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.Отправитель = &КорректнаяОрганизация
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор)
				|	КОНЕЦ КАК СторонаУрегулирования,
				|	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.Отправитель = &КорректнаяОрганизация
				|			ТОГДА ИнформацияСверкиВГОПостоянная.Отправитель
				|		ИНАЧЕ ИнформацияСверкиВГОПостоянная.Получатель
				|	КОНЕЦ КАК Контрагент,
				|	ВЫБОР
				|		КОГДА ИнформацияСверкиВГОПостоянная.Отправитель = &КорректнаяОрганизация
				|			ТОГДА ИнформацияСверкиВГОПостоянная.Получатель
				|		ИНАЧЕ ИнформацияСверкиВГОПостоянная.Отправитель
				|	КОНЕЦ";
				
			ТекстЗапроса = ТекстЗапроса + "	И (Отправитель = &КорректнаяОрганизация ИЛИ Получатель = &КорректнаяОрганизация)" + Символы.ПС;
			Запрос.УстановитьПараметр("КорректнаяОрганизация", Параметры.КорректнаяОрганизация);
			
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&АлгоритмОпределенияСтороныУрегулирования", ТекстАлгоритмаОпределенияСтороныУрегулирования);
		
		ТекстУсловияЗапроса = "";
		Если Кредитор <> Неопределено Тогда
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + "	И ИнформацияСверкиВГОПостоянная.Отправитель = &Отправитель" + Символы.ПС;
			Запрос.УстановитьПараметр("Отправитель", Кредитор);
		КонецЕсли;
		
		Если Дебитор <> Неопределено Тогда
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + "	И ИнформацияСверкиВГОПостоянная.Получатель = &Получатель" + Символы.ПС;
			Запрос.УстановитьПараметр("Получатель", Дебитор);
		КонецЕсли;
		
		Если РазделВГО <> Неопределено Тогда
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + "	И ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения = &ДопАналитика" + Символы.ПС;
			Запрос.УстановитьПараметр("ДопАналитика", ДопАналитика);
		КонецЕсли;
		
		Если ДопАналитика <> Неопределено Тогда
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + "	И ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения = &ДопАналитика" + Символы.ПС;
			Запрос.УстановитьПараметр("ДопАналитика", ДопАналитика);
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов <> Неопределено Тогда
			ТекстУсловияЗапроса = ТекстУсловияЗапроса + "	И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов" + Символы.ПС;
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
		КонецЕсли;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "	И &УсловиеГДЕ", ТекстУсловияЗапроса);
		
		мДопустимыхСостояний = Новый Массив;
		мДопустимыхСостояний.Добавить(Перечисления.СостояниеСверкиВГО.Несогласован);
		мДопустимыхСостояний.Добавить(Перечисления.СостояниеСверкиВГО.Спор);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		Запрос.УстановитьПараметр("ДопустимыеСостоянияСверки", мДопустимыхСостояний);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаРазделВГО = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		// Для каждого раздела выполняем отдельные запросы выборки первичных данных
		Пока ВыборкаРазделВГО.Следующий() Цикл
			РазделВГО = ВыборкаРазделВГО.РазделВГО;
			
			ВыборкаДанныеРасхождений = ВыборкаРазделВГО.Выбрать();
			// Для каждого раздела выполняем отдельные запросы выборки первичных данных
			Пока ВыборкаДанныеРасхождений.Следующий() Цикл
				
				ЗнакУрегулирования = Абс(ВыборкаДанныеРасхождений.СуммаОтправителя) > Абс(ВыборкаДанныеРасхождений.СуммаПолучателя);
				СторонаСверки = ВыборкаДанныеРасхождений.СторонаУрегулирования;
				ЭтоОтправитель = СторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор;
				
				Если ЭтоОтправитель Тогда
					СуммаОрганизации = ВыборкаДанныеРасхождений.СуммаОтправителя;
					СуммаКонтрагента = ВыборкаДанныеРасхождений.СуммаПолучателя;
				Иначе
					СуммаОрганизации = ВыборкаДанныеРасхождений.СуммаПолучателя;
					СуммаКонтрагента = ВыборкаДанныеРасхождений.СуммаОтправителя;
				КонецЕсли;
				
				// формируем документы.
				ПараметрыДокумента = Новый Структура;

				ПараметрыДокумента.Вставить("Сценарий", Сценарий); 
				ПараметрыДокумента.Вставить("ПериодСценария", ПериодСценария); 
				ПараметрыДокумента.Вставить("Этап", Этап);
				ПараметрыДокумента.Вставить("Отправитель", ВыборкаДанныеРасхождений.Отправитель);
				ПараметрыДокумента.Вставить("Получатель", ВыборкаДанныеРасхождений.Получатель);
				ПараметрыДокумента.Вставить("РазделВГО", РазделВГО);
				ПараметрыДокумента.Вставить("ВалютаВзаиморасчетов", ВыборкаДанныеРасхождений.ВалютаВзаиморасчетов);
				ПараметрыДокумента.Вставить("ДопАналитикаРасхождения", ВыборкаДанныеРасхождений.ДопАналитика);
				ПараметрыДокумента.Вставить("СторонаУрегулирования", СторонаСверки);
				ПараметрыДокумента.Вставить("Принудительно", Истина); // принудительно урегулируем
				ПараметрыДокумента.Вставить("Ответственный", ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
				ПараметрыДокумента.Вставить("Комментарий", НСтр("ru = 'Введен автоматически'"));
				ПараметрыДокумента.Вставить("ЗнакУрегулирования", ЗнакУрегулирования);
				ПараметрыДокумента.Вставить("ИсточникДанных", Справочники.РазделыСверкиВГО.ПолучитьИДДляСтороныСверки(РазделВГО, СторонаСверки));
				ПараметрыДокумента.Вставить("Организация", ВыборкаДанныеРасхождений.Организация);
				ПараметрыДокумента.Вставить("Контрагент", ВыборкаДанныеРасхождений.Контрагент);
				ПараметрыДокумента.Вставить("ПланСчетов", ВыборкаДанныеРасхождений.Организация.ПланСчетов);
				ПараметрыДокумента.Вставить("ОсновнаяВалюта", ВыборкаДанныеРасхождений.ВалютаВзаиморасчетов);
				ПараметрыДокумента.Вставить("СуммаОрганизации", СуммаОрганизации);
				ПараметрыДокумента.Вставить("СуммаКонтрагента", СуммаКонтрагента);
				ПараметрыДокумента.Вставить("МаксимальнаяСумма", ВыборкаДанныеРасхождений.РасхожденийОсталосьУрегулировать);
				ПараметрыДокумента.Вставить("МаксимальнаяСуммаГр", ВыборкаДанныеРасхождений.РасхожденийОсталосьУрегулироватьГр);
				ПараметрыДокумента.Вставить("СуммаУрегулирования", ?(ЗнакУрегулирования, 1, -1) * ВыборкаДанныеРасхождений.РасхожденийОсталосьУрегулировать); 
				ПараметрыДокумента.Вставить("СуммаУрегулированияГр", ВыборкаДанныеРасхождений.РасхожденийОсталосьУрегулироватьГр);
				ПараметрыДокумента.Вставить("ПричинаРасхождения", РазделВГО.ПричинаРасхожденияДляАвтоурегулирования);
				ПараметрыДокумента.Вставить("Заполнен", Ложь);
				// вспомогательные параметры
				
				ТекстОшибки_ = "";
				ДокументУрегулирования = СоздатьДокументУрегулированияРасхождений(ПараметрыДокумента, ТекстОшибки_);
				Если ДокументУрегулирования = Неопределено Тогда
					ВызватьИсключение ТекстОшибки_;
				КонецЕсли;
				
				мДокументовУрегулирования.Добавить(Новый Структура(
					"ДокументУрегулирования,Выбран,Кредитор,Дебитор", ДокументУрегулирования));
				
			КонецЦикла; // данные расхождений
		КонецЦикла; // Разделы ВГО
		
		ЗафиксироватьТранзакцию();
	Исключение
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		мДокументовУрегулирования.Очистить();
		ОтменитьТранзакцию();
	КонецПопытки;
		
	Возврат мДокументовУрегулирования;		
КонецФункции // АвтоматическоеУрегулированиеРасхождений()

// Функция создает документ "УрегулированиеРасходженияВГО" и "ТрансформационнаяКорректировка".
// Параметры:
//		ПараметрыДокумента - структура с параметрами документа:
//			ПериодСценария - обязательный, период для которого определяются расхождения.
//			Сценарий - обязательный, сценарий для которого определяются расхождения.
//			Этап - обязательный, ссылка на справочник "ВерсииРегламентовПодготовкиОтчетности",
//				либо "ЭтапыПроцессов".
//			СтрРасхождения - структура с описанием расхождения
//				РазделВГО - раздел сверки ВГО;
//				ВалютаВзаиморасчетов - валюта взаиморасчетов;
//				Отправитель - организация отправитель;
//				Получатель - организация получатель;
//				СторонаСверки - перечисление СтороныСверкиВГО.
//			СуммаУрегулирования - сумма урегулирования в валюте 
//			СуммаУрегулированияГр - сумма урегулирования в валюте 
//			Корреспонденция - ссылка на справочник "КорреспонденцииВГО".
//			Пользователь - ссылка на справочник "Пользователи".
//			ЭтоОтправитель - булево, если организация от имени которой производится
//				урегулирование - отправитель.
//			ЭтоОтветственный - если пользователь, который делает урегулирование - это
//				лицо ответственное за сверку. Урегулирование считается принудительным.
//			ЗначенияСубконто - таблица значений следующей структуры:
//				СчетБУ - ссылка на справочник "СчетаБД";
//				НомерСубконто - номер субконто у счета БУ;
//				ЗначениеСубконто - значение субконто.
//			Проводить - необязательный, если параметр указан
//			
//			Создание структуры:
//				ПараметрыДокумента = Новый Структура("Сценарий,ПериодСценария,Этап,СтрРасхождения,СуммаУрегулирования,СуммаУрегулированияГр,
//				|СуммаУрегулированияФункцОтпр,СуммаУрегулированияФункцПолуч,СуммаУрегулированияНДС,СуммаУрегулированияНДСГр,СуммаУрегулированияНДСФункц,
//				|Корреспонденция,Пользователь,РодительРасхождения,ЭтоОтправитель,ЭтоОтветственный,ЗначенияСубконто, Проводить");
//
//		СообщениеОшибки - строка, описание ошибки, если она возникнет.
// Возвращает:
//		Неопределено - возникла ошибка, описание в переменной СообщениеОшибки.
//		Ссылка на документ "УрегулированиерасхожденийВГО" - документ создан корректно.
//
Функция СоздатьДокументУрегулированияРасхождений(Знач ПараметрыДокумента, СообщениеОшибки) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		флПроводить = Ложь;
		Если ПараметрыДокумента.Свойство("Проводить", флПроводить) Тогда
			РежимЗаписиДокумента_ = ?(флПроводить=Истина, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
		Иначе
			РежимЗаписиДокумента_ = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ДокУрегулирования = Документы.УрегулированиеРасхожденияВГО.СоздатьДокумент();
		ДокУрегулирования.Дата = ТекущаяДата();
		ЗаполнитьЗначенияСвойств(ДокУрегулирования, ПараметрыДокумента);
		ДокУрегулирования.ЗаполнитьПроводки(Ложь, Перечисления.ТипыТехническихСчетовДляСверкиЭлиминации.СчетАвтоматическогоУрегулирования);
		ДокУрегулирования.Записать(РежимЗаписиДокумента_, РежимПроведенияДокумента.Неоперативный);	
		
	ЗафиксироватьТранзакцию();
	Исключение
		СообщениеОшибки = ОписаниеОшибки();
		ОтменитьТранзакцию();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ДокУрегулирования.Ссылка;
КонецФункции

// Рассылка оповещений о завершении сверки ответственным лицам.
// Параметры:
//		Отправитель - ссылка на справочник "Организации".
//		Получатель - ссылка на справочник "Организации".
//
Процедура ПроверкаЗавершенияСверки(ПериодСценария, Сценарий, Этап, Отправитель, Получатель) Экспорт
	Если НЕ Константы.ОповеститьОбУрегулированииРасхожденияВГО.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИнформацияСверкиВГОПостоянная.РазделВГО,
		|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов,
		|	ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения
		|ИЗ
		|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
		|ГДЕ
		|	ИнформацияСверкиВГОПостоянная.ПериодСценария = &ПериодСценария
		|	И ИнформацияСверкиВГОПостоянная.Сценарий = &Сценарий
		|	И ИнформацияСверкиВГОПостоянная.Этап = &Этап
		|	И ИнформацияСверкиВГОПостоянная.Отправитель = &Отправитель
		|	И ИнформацияСверкиВГОПостоянная.Получатель = &Получатель
		|	И ИнформацияСверкиВГОПостоянная.СуммаРасхождения = 0";

	Запрос.УстановитьПараметр("Отправитель", Отправитель);
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Этап", Этап);

	Результат = Запрос.Выполнить();

	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Отправим сообщение об урегулировании отвественным лицам
	мОрганизаций = Новый Массив;
	мОрганизаций.Добавить(Отправитель);
	мОрганизаций.Добавить(Получатель);
	ТаблицаАдресов = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(Сценарий, ПериодСценария, мОрганизаций, Истина, Истина);
	ТаблицаАдресов.Свернуть("Email");
	
	Если ТаблицаАдресов.Количество() > 0 Тогда
		Для Каждого Строка Из ТаблицаАдресов Цикл
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Получатели.Добавить(Строка.Email);
			Письмо.Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
			
			ТекстПисьма = НСтр("ru = 'Сценарий: %1. <BR>
			|ПериодСценария: %2. <BR>
			|Этап: %3. <BR>
			|Отправитель: %4. <BR>
			|Получатель: %5. <BR>
			|'");
			ТекстПисьма = СтрШаблон(ТекстПисьма, Сценарий, ПериодСценария, Этап, Отправитель, Получатель);
				
			ТекстЗаголовка = НСтр("ru = 'Урегулирование по организациям завершено для организаций %1 и %2.'");	
			ТекстЗаголовка = СтрШаблон(ТекстЗаголовка, Отправитель, Получатель);
			Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ТекстЗаголовка, ТекстПисьма),
				ТипТекстаПочтовогоСообщения.HTML);
		
			Письмо.Тема = ТекстЗаголовка;
		
			УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Этап);
			
			Письмо = Неопределено;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Записать в регистр сведений ИнформацияСверки (переменная) данные о причине расхождения и стороне ее установившей.
//
// Параметры:
//  СтруктураРасхождения - Структура - Поля описания расхождения:
//		ПричинаРасхождения - СправочникСсылка.ПричиныРасхождений.
//		СторонаСверки - 
//  СообщениеОВыполнении - Строка - Строка текста с описанием ошибок.
// 
Процедура УстановитьПричинуРасхождения(СтруктураРасхождения, СообщениеОшибки) Экспорт
	
	Отбор = Новый Структура("ПериодСценария,Сценарий,Этап,Отправитель,Получатель,РазделВГО,ВалютаВзаиморасчетов,ДопАналитикаРасхождения");
	ЗаполнитьЗначенияСвойств(Отбор, СтруктураРасхождения);
	
	Данные = Новый Структура;
	Данные.Вставить("Состояние", Перечисления.СостояниеСверкиВГО.Согласован);
	Данные.Вставить("ПричинаРасхождения", СтруктураРасхождения.ПричинаРасхождения);
	Данные.Вставить("СторонаПричиныРасхождения", СтруктураРасхождения.СторонаСверки);
	
	СверкаВГОУХ.ИзменитьСостояниеСверки(СтруктураРасхождения, Данные, ТекущаяДата(), СообщениеОшибки);
	
КонецПроцедуры

// Проверяем есть ли экземпляры отчетов не в состоянии "На утверждении".
// Параметры:
//  СтруктураРасхождения - Структура - Значения измерений регистра ИнформацияСверкиВГО для поиска экземпляров отчетов.
//  ТекДата - Дата+Время - дата получения данных из регистров.
//  СообщениеОшибки - Строка - Строка текста с описанием предупреждений и/или ошибок.
//
// Возвращает:
//	Массив СправочникСсылка.НастраиваемыйОтчет - экземпляры отчетов с ошибками.
//		Массив будет пуст, если все экземпляры отчетов в состоянии "На утверждении".
//	Неопределено - возникла ошибка, в этом случае СообщениеОшибки содержит текст ошибки.
//
Функция ЭкземплярыОтчетовСОшибками(СтруктураРасхождения, ТекДата, СообщениеОшибки) Экспорт
	мЭкземпляров = Новый Массив;
	
	Попытка
		Если СтруктураРасхождения.СторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор Тогда
			Отправитель = СтруктураРасхождения.Организация;
			Получатель = СтруктураРасхождения.Контрагент;
		Иначе
			Отправитель = СтруктураРасхождения.Контрагент;
			Получатель = СтруктураРасхождения.Организация;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО КАК Ссылка
			|ПОМЕСТИТЬ ШаблоныСверки
			|ИЗ
			|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
			|ГДЕ
			|	СтатусыПериодовСценариев.Сценарии = &Сценарий
			|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РазделыСверкиВГОИсточникиДанных.Ссылка КАК НастройкаВидаВГО,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец КАК ВидОтчета,
			|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор) КАК СторонаСверки
			|ПОМЕСТИТЬ НастройкиНеСгруппированные
			|ИЗ
			|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныСверки КАК ШаблоныСверки
			|		ПО РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец = ШаблоныСверки.Ссылка
			|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
			|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
			|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета <> ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоДебет))
			|			И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)
			|
			|СГРУППИРОВАТЬ ПО
			|	РазделыСверкиВГОИсточникиДанных.Ссылка,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РазделыСверкиВГОИсточникиДанных.Ссылка,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец,
			|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
			|ИЗ
			|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныСверки КАК ШаблоныСверки
			|		ПО РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец = ШаблоныСверки.Ссылка
			|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
			|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
			|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета <> ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоКредит))
			|			И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)
			|
			|СГРУППИРОВАТЬ ПО
			|	РазделыСверкиВГОИсточникиДанных.Ссылка,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	НастраиваемыйОтчет.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
			|		ПО НастраиваемыйОтчет.ВидОтчета = НастройкиНеСгруппированные.ВидОтчета
			|			И (НастраиваемыйОтчет.Организация = &Отправитель)
			|			И (НастройкиНеСгруппированные.СторонаСверки = ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор))
			|			И (НастраиваемыйОтчет.Сценарий = &Сценарий)
			|			И (НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
			|				&ДатаКонца,
			|				Объект ССЫЛКА Документ.НастраиваемыйОтчет
			|					И СостояниеОбъекта <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
			|					И СостояниеОбъекта <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)) КАК РегистрСостоянийОбъектовСрезПоследних
			|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
			|ГДЕ
			|	НЕ НастраиваемыйОтчет.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	НастраиваемыйОтчет.Ссылка
			|ИЗ
			|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
			|		ПО НастраиваемыйОтчет.ВидОтчета = НастройкиНеСгруппированные.ВидОтчета
			|			И (НастраиваемыйОтчет.Организация = &Получатель)
			|			И (НастройкиНеСгруппированные.СторонаСверки = ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор))
			|			И (НастраиваемыйОтчет.Сценарий = &Сценарий)
			|			И (НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
			|				&ДатаКонца,
			|				Объект ССЫЛКА Документ.НастраиваемыйОтчет
			|					И СостояниеОбъекта <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
			|					И СостояниеОбъекта <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)) КАК РегистрСостоянийОбъектовСрезПоследних
			|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
			|ГДЕ
			|	НЕ НастраиваемыйОтчет.ПометкаУдаления";
			
		Запрос.УстановитьПараметр("ПериодСценария", СтруктураРасхождения.ПериодСценария);
		Запрос.УстановитьПараметр("Сценарий", СтруктураРасхождения.Сценарий);
		Запрос.УстановитьПараметр("Этап", СтруктураРасхождения.Этап);
		Запрос.УстановитьПараметр("ДатаКонца", ТекДата);
		Запрос.УстановитьПараметр("Отправитель", Отправитель);
		Запрос.УстановитьПараметр("Получатель", Получатель);
		
		Если НЕ СтруктураРасхождения.Свойство("РазделВГО") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.РазделВГО) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (НастройкиВидовВГОНастройкиВидовОтчетовОтправителя.Ссылка = &РазделВГО)", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (НастройкиВидовВГОНастройкиВидовОтчетовПолучателя.Ссылка = &РазделВГО)", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РазделВГО = &РазделВГО", "");
		Иначе
			Запрос.УстановитьПараметр("РазделВГО", СтруктураРасхождения.РазделВГО);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить();
		ВыборкаЗаписей = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку("Ссылка");
		
	Исключение
		СообщениеОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Возврат мЭкземпляров;
КонецФункции

// Проверяем есть ли расхождения для данных аналитик расхождения.
// Параметры:
//  СтруктураРасхождения - Структура - Значения измерений регистра ИнформацияСверкиВГО для отбора расходжений.
//  ТекДата - Дата+Время - дата получения данных из регистров.
//  СообщениеОВыполнении - Строка - Строка текста с описанием предупреждений и/или ошибок.
//
// Возвращает:
//	Булево - Истина - есть неурегулированные расхождения или возникла ошибка.
//		Ложь - нет неурегулированных расхождений.
//
Функция ЕстьНеУрегулированныеРасхождения(СтруктураРасхождения, ТекДата, СообщениеОВыполнении) Экспорт
	Попытка
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО КАК Ссылка
			|ПОМЕСТИТЬ ШаблоныСверки
			|ИЗ
			|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
			|ГДЕ
			|	СтатусыПериодовСценариев.Сценарии = &Сценарий
			|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	РазделыСверкиВГОИсточникиДанных.Ссылка КАК НастройкаВидаВГО,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец КАК ВидОтчета,
			|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор) КАК СторонаСверки
			|ПОМЕСТИТЬ НастройкиНеСгруппированные
			|ИЗ
			|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныСверки КАК ШаблоныСверки
			|		ПО РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец = ШаблоныСверки.Ссылка
			|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
			|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
			|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета <> ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоДебет))
			|			И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)
			|
			|СГРУППИРОВАТЬ ПО
			|	РазделыСверкиВГОИсточникиДанных.Ссылка,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	РазделыСверкиВГОИсточникиДанных.Ссылка,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец,
			|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
			|ИЗ
			|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныСверки КАК ШаблоныСверки
			|		ПО РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец = ШаблоныСверки.Ссылка
			|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
			|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
			|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета <> ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоКредит))
			|			И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)
			|
			|СГРУППИРОВАТЬ ПО
			|	РазделыСверкиВГОИсточникиДанных.Ссылка,
			|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИнформацияСверкиВГОСрезПоследних.Период
			|ИЗ
			|	РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
			|			&ДатаКонца,
			|			Сценарий = &Сценарий
			|				И ПериодСценария = &ПериодСценария
			|				И Этап = &Этап
			|				И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|				И РазделВГО = &РазделВГО
			|				И ДопАналитикаРасхождения = &ДопАналитика
			|				И Отправитель = &Отправитель
			|				И Получатель = &Получатель
			|				И Состояние <> ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Согласован)) КАК ИнформацияСверкиВГОСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
			|		ПО ИнформацияСверкиВГОСрезПоследних.РазделВГО = НастройкиНеСгруппированные.НастройкаВидаВГО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
			|		ПО ИнформацияСверкиВГОСрезПоследних.ПериодСценария = ИнформацияСверкиВГОПостоянная.ПериодСценария
			|			И ИнформацияСверкиВГОСрезПоследних.Сценарий = ИнформацияСверкиВГОПостоянная.Сценарий
			|			И ИнформацияСверкиВГОСрезПоследних.Этап = ИнформацияСверкиВГОПостоянная.Этап
			|			И ИнформацияСверкиВГОСрезПоследних.Отправитель = ИнформацияСверкиВГОПостоянная.Отправитель
			|			И ИнформацияСверкиВГОСрезПоследних.Получатель = ИнформацияСверкиВГОПостоянная.Получатель
			|			И ИнформацияСверкиВГОСрезПоследних.РазделВГО = ИнформацияСверкиВГОПостоянная.РазделВГО
			|			И ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов = ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов
			|			И ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения = ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения
			|			И (ИнформацияСверкиВГОПостоянная.СуммаРасхождения <> 0)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИнформацияСверкиВГОСрезПоследних.Период
			|ИЗ
			|	РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
			|			&ДатаКонца,
			|			Сценарий = &Сценарий
			|				И ПериодСценария = &ПериодСценария
			|				И Этап = &Этап
			|				И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|				И РазделВГО = &РазделВГО
			|				И ДопАналитикаРасхождения = &ДопАналитика
			|				И Отправитель = &Отправитель
			|				И Получатель = &Получатель
			|				И Состояние <> ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Согласован)) КАК ИнформацияСверкиВГОСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
			|		ПО ИнформацияСверкиВГОСрезПоследних.РазделВГО = НастройкиНеСгруппированные.НастройкаВидаВГО
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
			|		ПО ИнформацияСверкиВГОСрезПоследних.ПериодСценария = ИнформацияСверкиВГОПостоянная.ПериодСценария
			|			И ИнформацияСверкиВГОСрезПоследних.Сценарий = ИнформацияСверкиВГОПостоянная.Сценарий
			|			И ИнформацияСверкиВГОСрезПоследних.Этап = ИнформацияСверкиВГОПостоянная.Этап
			|			И ИнформацияСверкиВГОСрезПоследних.Отправитель = ИнформацияСверкиВГОПостоянная.Отправитель
			|			И ИнформацияСверкиВГОСрезПоследних.Получатель = ИнформацияСверкиВГОПостоянная.Получатель
			|			И ИнформацияСверкиВГОСрезПоследних.РазделВГО = ИнформацияСверкиВГОПостоянная.РазделВГО
			|			И ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов = ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов
			|			И ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения = ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения
			|			И (ВЫБОР
			|				КОГДА ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности = 0
			|					ТОГДА ИнформацияСверкиВГОПостоянная.СуммаРасхождения <> 0
			|				ИНАЧЕ ВЫБОР
			|						КОГДА ВЫБОР
			|								КОГДА ВЫБОР
			|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
			|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|									КОНЕЦ > ВЫБОР
			|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
			|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|									КОНЕЦ
			|									ТОГДА ВЫБОР
			|											КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
			|												ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|											ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|										КОНЕЦ
			|								ИНАЧЕ ВЫБОР
			|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
			|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|									КОНЕЦ
			|							КОНЕЦ = 0
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ 100 * ИнформацияСверкиВГОПостоянная.СуммаРасхождения / ВЫБОР
			|								КОГДА ВЫБОР
			|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
			|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|									КОНЕЦ > ВЫБОР
			|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
			|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|									КОНЕЦ
			|									ТОГДА ВЫБОР
			|											КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
			|												ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|											ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
			|										КОНЕЦ
			|								ИНАЧЕ ВЫБОР
			|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
			|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
			|									КОНЕЦ
			|							КОНЕЦ > ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности
			|					КОНЕЦ
			|			КОНЕЦ)";
			
		Запрос.УстановитьПараметр("ПериодСценария", СтруктураРасхождения.ПериодСценария);
		Запрос.УстановитьПараметр("Сценарий", СтруктураРасхождения.Сценарий);
		Запрос.УстановитьПараметр("Этап", СтруктураРасхождения.Этап);
		Запрос.УстановитьПараметр("ДатаКонца", ТекДата);
		Запрос.УстановитьПараметр("Отправитель", СтруктураРасхождения.Отправитель);
		Запрос.УстановитьПараметр("Получатель", СтруктураРасхождения.Получатель);
		
		Если НЕ СтруктураРасхождения.Свойство("РазделВГО") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.РазделВГО) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (НастройкиВидовВГОНастройкиВидовОтчетовОтправителя.Ссылка = &РазделВГО)", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (НастройкиВидовВГОНастройкиВидовОтчетовПолучателя.Ссылка = &РазделВГО)", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)", "");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РазделВГО = &РазделВГО", "");
		Иначе
			Запрос.УстановитьПараметр("РазделВГО", СтруктураРасхождения.РазделВГО);
		КонецЕсли;
		
		Если НЕ СтруктураРасхождения.Свойство("ВалютаВзаиморасчетов") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.ВалютаВзаиморасчетов) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов", "");
		Иначе
			Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", СтруктураРасхождения.ВалютаВзаиморасчетов);
		КонецЕсли;
		
		Если НЕ СтруктураРасхождения.Свойство("ДопАналитика") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.ДопАналитика) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ДопАналитикаРасхождения = &ДопАналитика", "");
		Иначе
			Запрос.УстановитьПараметр("ДопАналитика", СтруктураРасхождения.ДопАналитика);
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		мРезультатов = Запрос.ВыполнитьПакет();
		
		Если НЕ мРезультатов[3].Пустой() Тогда
			СообщениеОВыполнении = НСтр("ru = 'Есть неурегулированные значительные расхождения! Закрытие сверки невозможно.'");
			Возврат Истина;
		КонецЕсли;
		
		Если мРезультатов[2].Пустой() Тогда
			Возврат Ложь; // Расхождений нет.
		КонецЕсли;
	
	Исключение
		СообщениеОВыполнении = ОписаниеОшибки();
	КонецПопытки;
	
	// Есть неурегулированные незначительные расхождения, либо возникла ошибка.
	Возврат Истина;
	
КонецФункции

// Проверяем можно ли зафиксировать сверку (нет значимых расхождений).
//  Вводим если необходимо автоматически документы урегулирования незначительных расхождений.
//  Помечаем расхождения как "Сверенные", делаем запись о фиксированности сверки.
//
// Параметры:
//  СтруктураРасхождения - Структура - Поля описания расхождения.
//	ТекДата - Дата, дата фиксации.
//  СообщениеОВыполнении - Строка - Строка текста с описанием предупреждений и/или ошибок.
//
Функция ЗафиксироватьСверкуНаСервере(СтруктураРасхождения, ТекДата, СообщениеОВыполнении, Отладка) Экспорт
	Запрос = Новый Запрос;
	ТекстЗапроса = ТекстЗапроса_ДляЗакрытияСверки();
		
	Запрос.УстановитьПараметр("ПериодСценария", СтруктураРасхождения.ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий", СтруктураРасхождения.Сценарий);
	Запрос.УстановитьПараметр("Этап", СтруктураРасхождения.Этап);
	Запрос.УстановитьПараметр("ДатаКонца", ТекДата);
	Запрос.УстановитьПараметр("Отправитель", СтруктураРасхождения.Отправитель);
	Запрос.УстановитьПараметр("Получатель", СтруктураРасхождения.Получатель);
	
	Если СтруктураРасхождения.Свойство("СверкаЗакрыта") И НЕ СтруктураРасхождения.СверкаЗакрыта Тогда
		// отменяем закрытие сверки
		флОтменаЗакрытияСверки = Истина;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)", "СостояниеОбъекта #= ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Состояние <> ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Согласован)", "И Состояние #= ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Согласован)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#", "");
	Иначе
		флОтменаЗакрытияСверки = Ложь;
	КонецЕсли;
	
	Если НЕ СтруктураРасхождения.Свойство("РазделВГО") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.РазделВГО) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (НастройкиВидовВГОНастройкиВидовОтчетовОтправителя.Ссылка = &РазделВГО)", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (НастройкиВидовВГОНастройкиВидовОтчетовПолучателя.Ссылка = &РазделВГО)", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И РазделВГО = &РазделВГО", "");
	Иначе
		Запрос.УстановитьПараметр("РазделВГО", СтруктураРасхождения.РазделВГО);
	КонецЕсли;
	
	Если НЕ СтруктураРасхождения.Свойство("ВалютаВзаиморасчетов") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.ВалютаВзаиморасчетов) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов", "");
	Иначе
		Запрос.УстановитьПараметр("ВалютаВзаиморасчетов", СтруктураРасхождения.ВалютаВзаиморасчетов);
	КонецЕсли;
	
	Если НЕ СтруктураРасхождения.Свойство("ДопАналитика") ИЛИ НЕ ЗначениеЗаполнено(СтруктураРасхождения.ДопАналитика) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И ДопАналитикаРасхождения = &ДопАналитика", "");
	Иначе
		Запрос.УстановитьПараметр("ДопАналитика", СтруктураРасхождения.ДопАналитика);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Если Отладка Тогда
		СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки("ЗафиксироватьРасхождение", Запрос, СтруктураРасхождения);
	КонецЕсли;
	
	мРезультаты = Запрос.ВыполнитьПакет();
	НомерПервогоЗапроса = 3;
	
	Попытка
		НачатьТранзакцию();
		
		// Изменяем состояние экземпляров отчетов
		НовоеСостояниеДокумента = ?(флОтменаЗакрытияСверки, Перечисления.СостоянияОтчетов.Подготовлен, Перечисления.СостоянияОтчетов.Утвержден);
		Результат = мРезультаты[НомерПервогоЗапроса+1];
		Если НЕ Результат.Пустой() Тогда
			ВыборкаЗаписей = Результат.Выбрать();
			Пока ВыборкаЗаписей.Следующий() Цикл
				ДокументОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
				ДокументОбъект.ПроверкаПриЗаписи = Истина;
				ДокументОбъект.ФормированиеДвиженийПриЗаписи = Ложь;
				ДокументОбъект.Состояние = НовоеСостояниеДокумента;
				ДокументОбъект.Записать(?(ДокументОбъект.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			КонецЦикла;
		КонецЕсли;
		
		// Установим новые состояния Расхождений.
		НовоеСостояниеСверки = ?(флОтменаЗакрытияСверки, Перечисления.СостояниеСверкиВГО.Несогласован, Перечисления.СостояниеСверкиВГО.Согласован);
		Результат = мРезультаты[НомерПервогоЗапроса+2];
		Если НЕ флОтменаЗакрытияСверки И НЕ Результат.Пустой() Тогда
			ОтборИнформацииСверки = Новый Структура("ПериодСценария,Сценарий,Этап,Отправитель,Получатель,РазделВГО,ВалютаВзаиморасчетов,ДопАналитикаРасхождения");
			НоваяЗаписьИнформацииСверки = Новый Структура("Состояние");
			
			ВыборкаЗаписей = Результат.Выбрать();
			Пока ВыборкаЗаписей.Следующий() Цикл
				// Запишем новое состояние в регистр Информация сверки переменная
				ЗаполнитьЗначенияСвойств(ОтборИнформацииСверки, ВыборкаЗаписей);
				НоваяЗаписьИнформацииСверки.Состояние = НовоеСостояниеСверки;
				СверкаВГОУХ.ИзменитьСостояниеСверки(ОтборИнформацииСверки, НоваяЗаписьИнформацииСверки, ТекДата, СообщениеОВыполнении);
			КонецЦикла;
		КонецЕсли;
		
		// Записываем в регистр сведений СверкаВГОЗакрыта
		Результат = мРезультаты[НомерПервогоЗапроса];
		Если НЕ Результат.Пустой() Тогда
			
			НаборЗаписей = РегистрыСведений.СверкаВГОЗакрыта.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПериодСценария.Установить(СтруктураРасхождения.ПериодСценария);
			НаборЗаписей.Отбор.Сценарий.Установить(СтруктураРасхождения.Сценарий);
			НаборЗаписей.Отбор.Этап.Установить(СтруктураРасхождения.Этап);
			НаборЗаписей.Отбор.Отправитель.Установить(СтруктураРасхождения.Отправитель);
			НаборЗаписей.Отбор.Получатель.Установить(СтруктураРасхождения.Получатель);
				
			ВыборкаЗаписей = Результат.Выбрать();
			Пока ВыборкаЗаписей.Следующий() Цикл
				НаборЗаписей.Отбор.РазделСверкиВГО.Установить(ВыборкаЗаписей.РазделСверкиВГО);
				
				Если флОтменаЗакрытияСверки Тогда
					НаборЗаписей.Записать();
					
				Иначе
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураРасхождения);
					НоваяЗапись.РазделСверкиВГО = ВыборкаЗаписей.РазделСверкиВГО;
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		СообщениеОВыполнении = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ТекстЗапроса_ДляЗакрытияСверки()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО КАК Ссылка
	|ПОМЕСТИТЬ ШаблоныСверки
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделыСверкиВГОИсточникиДанных.Ссылка КАК РазделСверкиВГО,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец КАК ВидОтчета,
	|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор) КАК СторонаСверки
	|ПОМЕСТИТЬ НастройкиНеСгруппированные
	|ИЗ
	|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныСверки КАК ШаблоныСверки
	|		ПО РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец = ШаблоныСверки.Ссылка
	|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
	|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
	|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета <> ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоДебет))
	|			И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазделыСверкиВГОИсточникиДанных.Ссылка,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РазделыСверкиВГОИсточникиДанных.Ссылка,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец,
	|	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
	|ИЗ
	|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ШаблоныСверки КАК ШаблоныСверки
	|		ПО РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец = ШаблоныСверки.Ссылка
	|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
	|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
	|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета <> ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоКредит))
	|			И (РазделыСверкиВГОИсточникиДанных.Ссылка = &РазделВГО)
	|
	|СГРУППИРОВАТЬ ПО
	|	РазделыСверкиВГОИсточникиДанных.Ссылка,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ГруппаРаскрытияОтбор.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиНеСгруппированные.РазделСверкиВГО КАК РазделСверкиВГО
	|ПОМЕСТИТЬ НастройкиСгруппированные
	|ИЗ
	|	НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиНеСгруппированные.РазделСверкиВГО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастройкиСгруппированные.РазделСверкиВГО КАК РазделСверкиВГО
	|ИЗ
	|	НастройкиСгруппированные КАК НастройкиСгруппированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
	|		ПО НастраиваемыйОтчет.ВидОтчета = НастройкиНеСгруппированные.ВидОтчета
	|			И (НастраиваемыйОтчет.Организация = &Отправитель)
	|			И (НастройкиНеСгруппированные.СторонаСверки = ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор))
	|			И (НастраиваемыйОтчет.Сценарий = &Сценарий)
	|			И (НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				&ДатаКонца,
	|				Объект ССЫЛКА Документ.НастраиваемыйОтчет
	|					И СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|ГДЕ
	|	НЕ НастраиваемыйОтчет.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиНеСгруппированные КАК НастройкиНеСгруппированные
	|		ПО НастраиваемыйОтчет.ВидОтчета = НастройкиНеСгруппированные.ВидОтчета
	|			И (НастраиваемыйОтчет.Организация = &Получатель)
	|			И (НастройкиНеСгруппированные.СторонаСверки = ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор))
	|			И (НастраиваемыйОтчет.Сценарий = &Сценарий)
	|			И (НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				&ДатаКонца,
	|				Объект ССЫЛКА Документ.НастраиваемыйОтчет
	|					И СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен)) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|ГДЕ
	|	НЕ НастраиваемыйОтчет.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИнформацияСверкиВГОСрезПоследних.Период,
	|	ИнформацияСверкиВГОСрезПоследних.ПериодСценария,
	|	ИнформацияСверкиВГОСрезПоследних.Сценарий,
	|	ИнформацияСверкиВГОСрезПоследних.Этап,
	|	ИнформацияСверкиВГОСрезПоследних.Отправитель,
	|	ИнформацияСверкиВГОСрезПоследних.Получатель,
	|	ИнформацияСверкиВГОСрезПоследних.РазделВГО,
	|	ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов,
	|	ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения,
	|	ИнформацияСверкиВГОСрезПоследних.Состояние,
	|	ИнформацияСверкиВГОСрезПоследних.АвторСпора,
	|	ИнформацияСверкиВГОСрезПоследних.Принудительно,
	|	ИнформацияСверкиВГОСрезПоследних.ПредметКомментирования,
	|	ИнформацияСверкиВГОСрезПоследних.АвторУрегулирования,
	|	ИнформацияСверкиВГОСрезПоследних.Документ,
	|	ИнформацияСверкиВГОСрезПоследних.ДатаНачалаСпора,
	|	ИнформацияСверкиВГОСрезПоследних.ДатаЗавершенияСпора,
	|	ИнформацияСверкиВГОПостоянная.СуммаОтправителя,
	|	ИнформацияСверкиВГОПостоянная.СуммаПолучателя,
	|	ИнформацияСверкиВГОПостоянная.СуммаРасхождения
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
	|			&ДатаКонца,
	|			Сценарий = &Сценарий
	|				И ПериодСценария = &ПериодСценария
	|				И Этап = &Этап
	|				И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
	|				И РазделВГО = &РазделВГО
	|				И ДопАналитикаРасхождения = &ДопАналитика
	|				И Отправитель = &Отправитель
	|				И Получатель = &Получатель
	|				И Состояние <> ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Согласован)) КАК ИнформацияСверкиВГОСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НастройкиСгруппированные КАК НастройкиСгруппированные
	|		ПО ИнформацияСверкиВГОСрезПоследних.РазделВГО = НастройкиСгруппированные.РазделСверкиВГО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
	|		ПО ИнформацияСверкиВГОСрезПоследних.ПериодСценария = ИнформацияСверкиВГОПостоянная.ПериодСценария
	|			И ИнформацияСверкиВГОСрезПоследних.Сценарий = ИнформацияСверкиВГОПостоянная.Сценарий
	|			И ИнформацияСверкиВГОСрезПоследних.Этап = ИнформацияСверкиВГОПостоянная.Этап
	|			И ИнформацияСверкиВГОСрезПоследних.Отправитель = ИнформацияСверкиВГОПостоянная.Отправитель
	|			И ИнформацияСверкиВГОСрезПоследних.Получатель = ИнформацияСверкиВГОПостоянная.Получатель
	|			И ИнформацияСверкиВГОСрезПоследних.РазделВГО = ИнформацияСверкиВГОПостоянная.РазделВГО
	|			И ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов = ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов
	|			И ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения = ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения";

КонецФункции

// Обновляем записи в регистре ИнформацияСверкиВГО (переменная). Ищем строки сверки по отбору. Для каждой такой строки
// обновляем ресурсы по данным из структуры Данные.
// Параметры:
//	Отбор - Структура. Значения измерений регистра ИнформацияСверкиВГО для отбора строк. Реквизиты:
//		ПериодСценария
//		Сценарий,
//		Этап,
//		Отправитель,
//		Получатель,
//		РазделВГО,
//		ВалютаВзаиморасчетов,
//		ДопАналитикаРасхождения.
//	Данные - Структура. Значения ресурсов, которые нужно изменить.
//	ТекДата - Дата+Время. Дата на которую анализируются и записываются строки регистра.
//	СообщениеОшибки - строка. Если возникнет ошибка, то сюда будет записано ее описание. Если все хорошо, то строка останется пустой.
//
Процедура ИзменитьСостояниеСверки(Отбор, Данные, ТекДата, СообщениеОшибки) Экспорт
	
	Попытка
		Если Отбор.Количество() < 8 ИЛИ Данные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИнформацияСверкиВГОСрезПоследних.ПериодСценария,
			|	ИнформацияСверкиВГОСрезПоследних.Сценарий,
			|	ИнформацияСверкиВГОСрезПоследних.Этап,
			|	ИнформацияСверкиВГОСрезПоследних.Отправитель,
			|	ИнформацияСверкиВГОСрезПоследних.Получатель,
			|	ИнформацияСверкиВГОСрезПоследних.РазделВГО,
			|	ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов,
			|	ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения,
			|	ИнформацияСверкиВГОСрезПоследних.Состояние,
			|	ИнформацияСверкиВГОСрезПоследних.АвторСпора,
			|	ИнформацияСверкиВГОСрезПоследних.Принудительно,
			|	ИнформацияСверкиВГОСрезПоследних.ПредметКомментирования,
			|	ИнформацияСверкиВГОСрезПоследних.АвторУрегулирования,
			|	ИнформацияСверкиВГОСрезПоследних.ДатаНачалаСпора,
			|	ИнформацияСверкиВГОСрезПоследних.ДатаЗавершенияСпора,
			|	ИнформацияСверкиВГОСрезПоследних.Документ,
			|	ИнформацияСверкиВГОСрезПоследних.Период
			|ИЗ
			|	РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
			|			&ДатаКонца,
			|			ПериодСценария = &ПериодСценария
			|				И Сценарий = &Сценарий
			|				И Этап = &Этап
			|				И Отправитель = &Отправитель
			|				И Получатель = &Получатель
			|				И РазделВГО = &РазделВГО
			|				И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|				И ДопАналитикаРасхождения = &ДопАналитикаРасхождения) КАК ИнформацияСверкиВГОСрезПоследних";

		Для Каждого Отбор_ Из Отбор Цикл
			Запрос.УстановитьПараметр(Отбор_.Ключ, Отбор_.Значение);
		КонецЦикла;
		Запрос.УстановитьПараметр("ДатаКонца", ТекДата);
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		
		НаборЗаписей = РегистрыСведений.ИнформацияСверкиВГО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодСценария.Установить(Отбор.ПериодСценария);
		НаборЗаписей.Отбор.Сценарий.Установить(Отбор.Сценарий);
		НаборЗаписей.Отбор.Этап.Установить(Отбор.Этап);
		НаборЗаписей.Отбор.Отправитель.Установить(Отбор.Отправитель);
		НаборЗаписей.Отбор.Получатель.Установить(Отбор.Получатель);
		НаборЗаписей.Отбор.РазделВГО.Установить(Отбор.РазделВГО);
		НаборЗаписей.Отбор.ВалютаВзаиморасчетов.Установить(Отбор.ВалютаВзаиморасчетов);
		НаборЗаписей.Отбор.ДопАналитикаРасхождения.Установить(Отбор.ДопАналитикаРасхождения);
		
		НачатьТранзакцию();
		Попытка
		
			Если НЕ Результат.Пустой() Тогда
				ВыборкаЗаписей = Результат.Выбрать();
				Пока ВыборкаЗаписей.Следующий() Цикл
					НаборЗаписей.Отбор.Период.Установить(ВыборкаЗаписей.Период);
					НаборЗаписей.Прочитать();
					Для Каждого Запись_ Из НаборЗаписей Цикл
						ЗаполнитьЗначенияСвойств(Запись_, Данные);
					КонецЦикла;
					НаборЗаписей.Записать();
					НаборЗаписей.Очистить();
				КонецЦикла;
				
			Иначе
				// добавляем строку в регистр, если их еще нет
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Отбор);
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Данные);
				НоваяЗапись.Период = ТекДата;
				НаборЗаписей.Записать();
			КонецЕсли;
			
		ЗафиксироватьТранзакцию();
		Исключение
			ТекстОшибки_ = ОписаниеОшибки();
			ОтменитьТранзакцию();
			ВызватьИсключение ТекстОшибки_;
		КонецПопытки;
		
	Исключение
		СообщениеОшибки = СообщениеОшибки + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

// Создаем запись в регистре ИнформацияСверкиВГО (переменная) для одной строки расхождения, реквизиты которого в Отбор.
// Выбираем срез последних данных на текущую дату. Для строки расхождения копируем последние известные данные на текущую
// дату и обновляем ресурсы из структуры Данные.
// Параметры:
//	Отбор - Структура. Значения ВСЕХ измерений регистра ИнформацияСверкиВГО для отбора строк.
//	Данные - Структура. Значения ресурсов, которые нужно изменить.
//	ТекДата - Дата+Время. Дата на которую анализируются и записываются строки регистра.
//	СообщениеОшибки - строка. Если возникнет ошибка, то сюда будет записано ее описание. Если все хорошо, то строка останется пустой.
//
Процедура ДобавитьСостояниеСверки(Отбор, Данные, ТекДата, СообщениеОшибки) Экспорт
	
	Попытка
		Если Отбор.Количество() < 8 ИЛИ Данные.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ИнформацияСверкиВГОСрезПоследних.Состояние,
			|	ИнформацияСверкиВГОСрезПоследних.АвторСпора,
			|	ИнформацияСверкиВГОСрезПоследних.Принудительно,
			|	ИнформацияСверкиВГОСрезПоследних.ПредметКомментирования,
			|	ИнформацияСверкиВГОСрезПоследних.АвторУрегулирования,
			|	ИнформацияСверкиВГОСрезПоследних.ДатаНачалаСпора,
			|	ИнформацияСверкиВГОСрезПоследних.ДатаЗавершенияСпора,
			|	ИнформацияСверкиВГОСрезПоследних.Документ
			|ИЗ
			|	РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
			|			&ДатаКонца,
			|			ПериодСценария = &ПериодСценария
			|				И Сценарий = &Сценарий
			|				И Этап = &Этап
			|				И Отправитель = &Отправитель
			|				И Получатель = &Получатель
			|				И РазделВГО = &РазделВГО
			|				И ВалютаВзаиморасчетов = &ВалютаВзаиморасчетов
			|				И ДопАналитикаРасхождения = &ДопАналитикаРасхождения) КАК ИнформацияСверкиВГОСрезПоследних";

		Для Каждого Отбор_ Из Отбор Цикл
			Запрос.УстановитьПараметр(Отбор_.Ключ, Отбор_.Значение);
		КонецЦикла;
		Запрос.УстановитьПараметр("ДатаКонца", ТекДата);
		Запрос.Текст = ТекстЗапроса;
		
		Результат = Запрос.Выполнить();
		
		НаборЗаписей = РегистрыСведений.ИнформацияСверкиВГО.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодСценария.Установить(Отбор.ПериодСценария);
		НаборЗаписей.Отбор.Сценарий.Установить(Отбор.Сценарий);
		НаборЗаписей.Отбор.Этап.Установить(Отбор.Этап);
		НаборЗаписей.Отбор.Отправитель.Установить(Отбор.Отправитель);
		НаборЗаписей.Отбор.Получатель.Установить(Отбор.Получатель);
		НаборЗаписей.Отбор.РазделВГО.Установить(Отбор.РазделВГО);
		НаборЗаписей.Отбор.ВалютаВзаиморасчетов.Установить(Отбор.ВалютаВзаиморасчетов);
		НаборЗаписей.Отбор.ДопАналитикаРасхождения.Установить(Отбор.ДопАналитикаРасхождения);
		НаборЗаписей.Отбор.Период.Установить(ТекДата);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Отбор);
		
		Если НЕ Результат.Пустой() Тогда
			флНеРавенСтаройЗаписи = Ложь;
			
			// прочитаем последние известные данные
			ВыборкаЗаписей = Результат.Выбрать();
			Если ВыборкаЗаписей.Следующий() Тогда
				Для Каждого ЭлементДанных Из Данные Цикл
					Если ЭлементДанных.Значение <> ВыборкаЗаписей[ЭлементДанных.Ключ] Тогда
						флНЕРавенСтаройЗаписи = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если флНеРавенСтаройЗаписи Тогда
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			флНеРавенСтаройЗаписи = Истина
		КонецЕсли;
		
		Если флНеРавенСтаройЗаписи Тогда //не добавляем, если все данные одинаковы
			//Если стоит признак Спор, то при перерасчете ВГО он должен оставаться. Снять признак можно только вручную
			Если НоваяЗапись.Состояние = Перечисления.СостояниеСверкиВГО.Спор И
					// признак что вызывается из портала сверки
				 	Не ( Данные.Свойство("АвторСпора") ИЛИ Данные.Свойство("ДатаНачалаСпора") ИЛИ  Данные.Свойство("ДатаЗавершенияСпора") )
				 	Тогда
			     ЗаполнитьЗначенияСвойств(НоваяЗапись, Данные,,"Состояние");
			Иначе	
			    ЗаполнитьЗначенияСвойств(НоваяЗапись, Данные);
			КонецЕсли;
			
			НоваяЗапись.Период = ТекДата;
		
			НаборЗаписей.Записать();
		КонецЕсли;

	Исключение
		СообщениеОшибки = СообщениеОшибки + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ФункцииДляОтчетов

// Формирует табличный документ с описанием расхождений и возвращает его.
Функция СформироватьПечатнуюФормуРасхождений(Параметры_, ТабРасхождений) Экспорт
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабРасхождений", ТабРасхождений);
	СхемаКомпоновкиДанных = Отчеты.РасхожденияВГОДляПисьма.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	
	НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ПолеОтбора = Новый ПолеКомпоновкиДанных("Организация");
    НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
    НовыйЭлементОтбора.Использование = Истина;
    НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
    НовыйЭлементОтбора.ПравоеЗначение = Параметры_.Организация;
	
	Для Каждого Параметр_ Из Параметры_ Цикл
		ПараметрСКД = Настройки.ПараметрыДанных.Элементы.Добавить();
		ПараметрСКД.Параметр = Новый ПараметрКомпоновкиДанных(Параметр_.Ключ);
		ПараметрСКД.Использование = Истина;
		ПараметрСКД.Значение  = Параметр_.Значение;
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	
	ДокументРезультат = Новый ТабличныйДокумент;
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Возврат ДокументРезультат;
	
КонецФункции

// Возвращает соотвествие с описанием аналитик расхождения ВГО для указанной расшифровки СКД.
Функция ПолучитьПоляРасшифровки(Знач ПользовательскиеНастройки, Знач ДанныеРасшифровки, Знач Расшифровка) Экспорт
	ЭлементыНастройки = ПользовательскиеНастройки.Элементы;
	Данные = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	ОписаниеПолей = Новый Соответствие;
	
	// добавим показатели
	ДЛя Каждого ЭлементНастройки Из ЭлементыНастройки Цикл
		Если ТипЗнч(ЭлементНастройки) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ЗначениеЗаполнено(ЭлементНастройки.Значение) Тогда
				ИмяПараметра = Строка(ЭлементНастройки.Параметр); // add проверку: ЭлементНастройки.Использование = Истина
				ОписаниеПолей.Вставить(ИмяПараметра, ЭлементНастройки.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	флОтчетДляКонтрагента = Ложь;
	СверкаВГОУХ.ОбработатьДеревоЭлементов(Данные.Элементы.Получить(Расшифровка), ОписаниеПолей, 2, флОтчетДляКонтрагента);
	
	ВыбОрганизация = ОписаниеПолей.Получить("Организация");
	ВыбКонтрагент = ОписаниеПолей.Получить("Контрагент");
	ВыбОтправитель = ОписаниеПолей.Получить("Кредитор");
	ВыбПолучатель = ОписаниеПолей.Получить("Дебитор");
	ВыбСторонаСверки = ОписаниеПолей.Получить("СторонаСверки");
	
	Если НЕ ЗначениеЗаполнено(ВыбСторонаСверки) Тогда
		// заполним сторону сверки, если есть информация
		Если ЗначениеЗаполнено(ВыбОтправитель) Тогда
			Если ВыбОтправитель = ВыбОрганизация Тогда
				ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор;
			ИначеЕсли ВыбОтправитель = ВыбКонтрагент Тогда
				ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ВыбПолучатель) Тогда
			Если ВыбПолучатель = ВыбОрганизация Тогда
				ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор;
			ИначеЕсли ВыбПолучатель = ВыбКонтрагент Тогда
				ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбСторонаСверки) Тогда
			ОписаниеПолей.Вставить("СторонаСверки", ВыбСторонаСверки);
		КонецЕсли;
	КонецЕсли;
	
	Если флОтчетДляКонтрагента Тогда
		Если ЗначениеЗаполнено(ВыбОрганизация) Тогда
			ОписаниеПолей.Вставить("Контрагент", ВыбОрганизация);
		КонецЕсли;
		Если ЗначениеЗаполнено(ВыбКонтрагент) Тогда
			ОписаниеПолей.Вставить("Организация", ВыбКонтрагент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВыбСторонаСверки) Тогда
			Если ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор Тогда
				ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор;
			Иначе
				ВыбСторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор;
			КонецЕсли;
			ОписаниеПолей.Вставить("СторонаСверки", ВыбСторонаСверки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеПолей;
КонецФункции

// Формируем список значений параметров, путем обхода коллекции элементов расшифровки СКД
// Параметры:
//	Элементы - ссылка на коллекцию элементов расшифровки СКД
//	ОписаниеПолей - массив; значения дописываются в него.
//	Уровень - текущий уровень записи, с каждым уровнем вложенности уровень увеличивается на 1.
//
Функция ОбработатьДеревоЭлементов(Элементы, ОписаниеПолей, Уровень, флОтчетДляКонтрагента) Экспорт
	Если ТипЗнч(Элементы) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Поля = Элементы.ПолучитьПоля();
		Для Каждого Поле Из Поля Цикл
			ИмяПоля = Поле.Поле;
			Если СтрНайти(ИмяПоля, ".") > 0 Тогда
				Продолжить;
			КонецЕсли;
			Если  Поле.Поле = "СуммаКонтрагента"  Тогда
				флОтчетДляКонтрагента = Истина;
			ИначеЕсли ЗначениеЗаполнено(Поле.Значение) Тогда
				ОписаниеПолей.Вставить(ИмяПоля, Поле.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Родители = Элементы.ПолучитьРодителей();
	Для каждого Родитель Из Родители Цикл
		ОбработатьДеревоЭлементов(Родитель, ОписаниеПолей, Уровень+1, флОтчетДляКонтрагента);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Формирует текст запроса для отчета показывающего исходные данные для расчета расхождения
Функция ВернутьТекстЗапросаДляРасшифровки(Параметры, ДопПараметры, ДопПоляОтчета) Экспорт
	
	ДопПараметры = Новый Структура;
	ДопПоляОтчета = Новый Структура;
	
	// Получаем перечень настроек запросов к экземплярам отчетов
	Запрос = Новый Запрос;
	ТекстЗапроса = ТекстЗапроса_ИсточникиДанных();
	
	ТекстУсловия = "";
		
	ИскЗначение = Неопределено;
	Если Параметры.Свойство("Этап", ИскЗначение) Тогда
		Запрос.УстановитьПараметр("Этап", ИскЗначение);
		ТекстУсловия = ТекстУсловия + "	И ШаблоныСверкиВГО.Этап = &Этап" + Символы.ПС;
	КонецЕсли;
	
	ИскЗначение = Неопределено;
	Если Параметры.Свойство("Сценарий", ИскЗначение) Тогда
		Запрос.УстановитьПараметр("Сценарий", ИскЗначение);
		ТекстУсловия = ТекстУсловия + "	И ШаблоныСверкиВГО.УправлениеПериодом.Сценарий = &Сценарий" + Символы.ПС;
		флЕстьСценарий = Истина;
	Иначе
		флЕстьСценарий = Ложь;
	КонецЕсли;
		
	ИскЗначение = Неопределено;
	Если Параметры.Свойство("ПериодСценария", ИскЗначение) И ЗначениеЗаполнено(Параметры.ПериодСценария) Тогда
		Запрос.УстановитьПараметр("ПериодСценария", ИскЗначение);
		ТекстУсловия = ТекстУсловия + "	И ШаблоныСверкиВГО.УправлениеПериодом.ПериодСценария В ИЕРАРХИИ (&ПериодСценария)" + Символы.ПС;
		флЕстьПериод = Истина;
	Иначе
		флЕстьПериод = Ложь;
	КонецЕсли;
	
	ИскЗначение = Неопределено;
	Если Параметры.Свойство("РазделВГО", ИскЗначение) И ЗначениеЗаполнено(ИскЗначение) Тогда
		Запрос.УстановитьПараметр("РазделВГО", ИскЗначение);
		Если ТипЗнч(ИскЗначение) = Тип("Массив") ИЛИ ТипЗнч(ИскЗначение) = Тип("СписокЗначений") Тогда
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.Ссылка В(&РазделВГО)" + Символы.ПС;
		Иначе
			ТекстУсловия = ТекстУсловия + "	И РазделыСверкиВГО.Ссылка = &РазделВГО" + Символы.ПС;
		КонецЕсли;
		ФлЕстьРазделВГО = Истина;
	Иначе
		ФлЕстьРазделВГО = Ложь;
	КонецЕсли;
	
	флТолькоДт = Ложь;
	флТолькоКт = Ложь;
	СторонаСверки = Неопределено;
	Если Параметры.Свойство("СторонаСверки", СторонаСверки) И ЗначениеЗаполнено(СторонаСверки) Тогда
		мСпособыОпределенияНаправленияУчета = Новый Массив;
		мСпособыОпределенияНаправленияУчета.Добавить(Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации);
		Если Параметры.СторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор Тогда
			мСпособыОпределенияНаправленияУчета.Добавить(Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет);
			флТолькоДт = Истина;
		Иначе
			мСпособыОпределенияНаправленияУчета.Добавить(Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит);
			флТолькоКт = Истина;
		КонецЕсли;
		Запрос.УстановитьПараметр("мСпособыОпределенияНаправленияУчета", мСпособыОпределенияНаправленияУчета);
		флЕстьСторонаСверки = Истина;
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета В (&мСпособыОпределенияНаправленияУчета))", "");
		флЕстьСторонаСверки = Ложь;
	КонецЕсли;
		
	Если ТекстУсловия <> "" Тогда
		ТекстУсловия = "ГДЕ" + Символы.ПС + Символы.Таб + Прав(ТекстУсловия, СтрДлина(ТекстУсловия)-2);
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ГДЕ" + Символы.ПС + "	ИСТИНА", ТекстУсловия);
		
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	ТекстЗапросаИтоговый = "";
	НомерЗапроса = 1;
	флЕстьДанные = ложь;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекстЗапроса = "";
		ТекстУсловия = "";
		
		СпособОпределенияНаправленияУчета = ВыборкаДетальныеЗаписи.СпособОпределенияНаправленияУчета;
		
		РазделВГО = ВыборкаДетальныеЗаписи.РазделВГО;
		ИсточникДанных = ВыборкаДетальныеЗаписи.ИсточникДанных;
		ОписаниеИД = Справочники.РазделыСверкиВГО.ПолучитьОписаниеИД(РазделВГО, ИсточникДанных, Истина);
		ГруппаРаскрытия = ИсточникДанных.ГруппаРаскрытияОтбор;
		ВидОтчета = ГруппаРаскрытия.Владелец;
		ЧислоАналитик = ОписаниеИД.ЧислоАналитик;
		Показатели = ОписаниеИД.Показатели;
		ПоказательСверки = Показатели.Получить(Перечисления.ТипПоказателяЭлиминации.ПоказательСверки);
		Если ПоказательСверки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТЗСвязи = ОписаниеИД.ТЗСвязи;
		флЕстьДопАналитики = РазделВГО.ЕстьДопАналитики;
		
		ДопПараметры.Вставить("ВидОтчета"+НомерЗапроса, ВидОтчета);
		ДопПараметры.Вставить("ПоказательВзаим"+НомерЗапроса, ПоказательСверки);
		ДопПараметры.Вставить("РазделВГО"+НомерЗапроса, РазделВГО);
		ДопПараметры.Вставить("Сценарий"+НомерЗапроса, ВыборкаДетальныеЗаписи.Сценарий);
		ДопПараметры.Вставить("ПериодСценария"+НомерЗапроса, ВыборкаДетальныеЗаписи.ПериодСценария);
		ДопПараметры.Вставить("Этап"+НомерЗапроса, ВыборкаДетальныеЗаписи.Этап);
		
		Если флЕстьДанные Тогда
			// Объединяем данные дебитора и кредитора из разных источников
			ТекстЗапроса = ТекстЗапроса +
				"
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета КАК ВидОтчета,
			|	ЗначенияПоказателейОтчетов.Версия.ЭкземплярОтчета КАК ЭкземплярОтчета,
			|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
			|	&РазделВГО" + НомерЗапроса + " КАК РазделВГО,
			|";
		
		Для Ном = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если Ном <= ЧислоАналитик Тогда
				ТекстЗапроса = ТекстЗапроса + "	ЗначенияПоказателейОтчетов.Аналитика" + Ном + " КАК Аналитика" + Ном + "," + Символы.ПС;
			Иначе
				ТекстЗапроса = ТекстЗапроса + "	Неопределено КАК Аналитика" + Ном + "," + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ флЕстьСторонаСверки И СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
			// Сторона сверки в зависимости от знака операции
			ТекстЗапроса = ТекстЗапроса +
				"	ВЫБОР
				|		КОГДА ЗначенияПоказателейОтчетов.Значение > 0
				|			ТОГДА Значение(Перечисление.СтороныСверкиВГО.Дебитор)
				|		ИНАЧЕ Значение(Перечисление.СтороныСверкиВГО.Кредитор)
				|	КОНЕЦ КАК СторонаСверки,
				|";
		Иначе
			Если НЕ ЗначениеЗаполнено(СторонаСверки) Тогда
				// Здесь не определена сторона сверки во входящем отборе
				Если СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет Тогда
					СторонаСверки = Перечисления.СтороныСверкиВГО.Дебитор;
				Иначе // случай когда нет отбора по стороне сверки и способ определения был по знаку рассмотрели выше
					СторонаСверки = Перечисления.СтороныСверкиВГО.Кредитор;
				КонецЕсли;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса +
				"	ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО." + СторонаСверки + ") КАК СторонаСверки,
				|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
			"	ЗначенияПоказателейОтчетов.Значение КАК ЗначениеВалВзаиморасчетов,
			|";
			
		мСтрокОсновныхАналитик = ТЗСвязи.НайтиСтроки(Новый Структура("ЭтоДопАналитика",Ложь));
		// Добавляем основные аналитики
		Для Каждого СтрокаСвязи Из мСтрокОсновныхАналитик Цикл
			ИмяАналитики_ = ИмяАналитикиДляСверки(СтрокаСвязи);
			ТекстЗапроса = ТекстЗапроса + "	ЗначенияПоказателейОтчетов." + СтрокаСвязи.Поле + " КАК " + ИмяАналитики_ + "," + Символы.ПС;
			ДопПоляОтчета.Вставить(ИмяАналитики_, "	ЗначенияПоказателейОтчетов." + СтрокаСвязи.Поле);
			
			Если СтрокаСвязи.ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Контрагент Тогда
				ТекстЗапроса = ТекстЗапроса +
					"	ВЫБОР
					|		КОГДА ЕСТЬNULL(ЗначенияПоказателейОтчетов." + СтрокаСвязи.Поле + ", ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ КАК ОрганизацияКонтрагентаЗаполнена,
					|";
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса)-2);
		
		ТекстЗапроса = ТекстЗапроса +
			"
			|ИЗ
			|	РегистрСведений.ЗначенияПоказателейОтчетов" +  ЧислоАналитик+ " КАК ЗначенияПоказателейОтчетов
			|";
			
		// Соединение по доп. аналитикам
		Если флЕстьДопАналитики Тогда
			мСтрокДопАналитик = ТЗСвязи.НайтиСтроки(Новый Структура("ЭтоДопАналитика",Истина));
			НомерДопАналитики = 1;
			Для Каждого СтрокаДопАналитики Из мСтрокДопАналитик Цикл
				ТекстЗапроса = ТекстЗапроса + ?(НомерДопАналитики=1,"",Символы.ПС) +
					"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияДопАналитикРасхожденийВГО КАК ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + "
					|			ПО (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".ПериодСценария В (&ПериодСценария" + НомерЗапроса + ") )
					|			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".Сценарий = &Сценарий" + НомерЗапроса + ")
					|			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".Этап = &Этап" + НомерЗапроса + ")
					|			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".РазделВГО = &РазделВГО" + НомерЗапроса + ")
					|			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".Реквизит = &ВидАналитики" + НомерЗапроса + "_" + НомерДопАналитики + ")
					|			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".Имя = """ + СтрокаДопАналитики.Имя + """)" + Символы.ПС;
					
				Если СтрокаДопАналитики.ЭтоФиксированноеЗначение Тогда
					ТекстЗапроса = ТекстЗапроса + 
					"			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".Значение = &ДопЗначение"  + НомерДопАналитики + ")";
					ДопПараметры.Вставить("ДопЗначение"+НомерДопАналитики, СтрокаДопАналитики.ФиксированноеЗначение);
				Иначе
					ТекстЗапроса = ТекстЗапроса +
					"			И (ЗначенияДопАналитикРасхожденийВГО" + НомерДопАналитики + ".Значение = ЗначенияПоказателейОтчетов." + СтрокаДопАналитики.Поле + ")";
				КонецЕсли;
				
				ДопПараметры.Вставить("ВидАналитики" + НомерЗапроса + "_" + НомерДопАналитики, СтрокаДопАналитики.ВидАналитики);
				НомерДопАналитики = НомерДопАналитики + 1;
			КонецЦикла;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса +
			"
			|ГДЕ
			|	ЗначенияПоказателейОтчетов.Версия.ВидОтчета = &ВидОтчета" + НомерЗапроса + "
			|	И ЗначенияПоказателейОтчетов.Показатель = &ПоказательВзаим" + НомерЗапроса + "
			|	И ЗначенияПоказателейОтчетов.Версия.Сценарий = &Сценарий" + НомерЗапроса + "
			|	И ЗначенияПоказателейОтчетов.Версия.ПериодОтчета В (&ПериодСценария" + НомерЗапроса + ")
			|	И ЗначенияПоказателейОтчетов.Версия.Валюта = ЗначенияПоказателейОтчетов.Версия.ЭкземплярОтчета.ОсновнаяВалюта
			|	И (НЕ ЗначенияПоказателейОтчетов.ИтоговоеЗначение)
			|";
			
		ТекстЗапросаИтоговый = ТекстЗапросаИтоговый + ТекстЗапроса;
		
		флЕстьДанные = Истина;
		
		НомерЗапроса = НомерЗапроса + 1;
	КонецЦикла;

	// Формируем объединенный запрос к экземплярам отчетов
	
	Возврат ТекстЗапросаИтоговый;
	
КонецФункции

Функция ТекстЗапроса_ИсточникиДанных()
	
	Возврат
	ТекстЗапроса_ПериодыСценария()
	+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()
	+	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.ВерсияРегламента КАК ВерсияРегламента,
	|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонПроцесса КАК ШаблонПроцесса,
	|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО КАК ШаблонСверкиВГО,
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария
	|ПОМЕСТИТЬ ТекущаяВерсияРегламента
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды В (ВЫБРАТЬ
	|				т.ПериодСценария
	|			ИЗ
	|				втПериоды КАК т)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущаяВерсияРегламента.УправлениеПериодомСценария КАК УправлениеПериодом,
	|	ТекущаяВерсияРегламента.ВерсияРегламента КАК Этап,
	|	ТекущаяВерсияРегламента.ШаблонСверкиВГО КАК ШаблонСверкиВГО
	|ПОМЕСТИТЬ ШаблоныСверкиВГО
	|ИЗ
	|	ТекущаяВерсияРегламента КАК ТекущаяВерсияРегламента
	|ГДЕ
	|	ТекущаяВерсияРегламента.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(справочник.ШаблоныСверкиВГО.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТекущаяВерсияРегламента.УправлениеПериодомСценария,
	|	ЭтапыПроцессов.Ссылка,
	|	ЭтапыПроцессов.ШаблонСверкиВГО
	|ИЗ
	|	ТекущаяВерсияРегламента КАК ТекущаяВерсияРегламента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УдалитьЭтапыПроцессов КАК ЭтапыПроцессов
	|		ПО ТекущаяВерсияРегламента.ШаблонПроцесса = ЭтапыПроцессов.Владелец
	|			И (ЭтапыПроцессов.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(Справочник.ШаблоныСверкиВГО.ПустаяСсылка))
	|			И (НЕ ЭтапыПроцессов.ПометкаУдаления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыПроцессов.Ссылка,
	|	ЭтапыПроцессов.ШаблонСверкиВГО,
	|	ТекущаяВерсияРегламента.УправлениеПериодомСценария
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РазделыСверкиВГО.Ссылка КАК РазделСверкиВГО,
	|	ШаблоныСверкиВГО.УправлениеПериодом,
	|	ШаблоныСверкиВГО.Этап,
	|	ШаблоныСверкиВГО.ШаблонСверкиВГО
	|ПОМЕСТИТЬ РазделыСверкиВГО
	|ИЗ
	|	ШаблоныСверкиВГО КАК ШаблоныСверкиВГО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РазделыСверкиВГО КАК РазделыСверкиВГО
	|		ПО ШаблоныСверкиВГО.ШаблонСверкиВГО = РазделыСверкиВГО.Владелец
	|			И (НЕ РазделыСверкиВГО.ПометкаУдаления)
	|			И (НЕ РазделыСверкиВГО.НеСверять)
	|ГДЕ
	|	ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазделыСверкиВГО.РазделСверкиВГО КАК РазделВГО,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных КАК ИсточникДанных,
	|	РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета КАК СпособОпределенияНаправленияУчета,
	|	РазделыСверкиВГОИсточникиДанных.НомерСтроки КАК НомерСтрокиРесурса,
	|	РазделыСверкиВГО.Этап КАК Этап,
	|	РазделыСверкиВГО.УправлениеПериодом.Сценарий КАК Сценарий,
	|	РазделыСверкиВГО.УправлениеПериодом.ПериодСценария КАК ПериодСценария
	|ИЗ
	|	РазделыСверкиВГО КАК РазделыСверкиВГО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
	|		ПО РазделыСверкиВГО.РазделСверкиВГО = РазделыСверкиВГОИсточникиДанных.Ссылка
	|			И (РазделыСверкиВГОИсточникиДанных.ИсточникДанных.СпособПолучения = ЗНАЧЕНИЕ(Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия))
	|			И (РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета В (&мСпособыОпределенияНаправленияУчета))
	|			И (НЕ РазделыСверкиВГОИсточникиДанных.ИсточникДанных.ПометкаУдаления)";
	

КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

// Получить ссылку на документ УправлениеПериодомСценария.
Функция ПолучитьПериметрПоСценариюИПериоду(Сценарий, ПериодСценария) Экспорт
	ПериметрСверки = Неопределено;
	
	Если ЗначениеЗаполнено(Сценарий) И ЗначениеЗаполнено(ПериодСценария) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	УправлениеПериодомСценария.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
			|ГДЕ
			|	НЕ УправлениеПериодомСценария.ПометкаУдаления
			|	И УправлениеПериодомСценария.Сценарий = &Сценарий
			|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария";
		
		Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ПериметрСверки = ВыборкаДетальныеЗаписи.Ссылка;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПериметрСверки;
	
КонецФункции

// Получить шаблон сверки по сценарию и периоду.
//
// Параметры:
//  Сценарий		 - СправочникСсылка.Сценарии
//  ПериодСценария	 - СправочникСсылка.Периоды
// 
// Возвращаемое значение:
//   - СправочникСсылка.ШаблоныСверкиВГО
//
Функция ПолучитьШаблонСверкиПоСценариюПериоду(Сценарий, ПериодСценария) Экспорт
	УправлениеПериодом = 
		ПолучитьПериметрПоСценариюИПериоду(Сценарий, ПериодСценария);
	Если ЗначениеЗаполнено(УправлениеПериодом)
			И ЗначениеЗаполнено(
				УправлениеПериодом.ВерсияОрганизационнойСтруктуры) Тогда
		Возврат
			УправлениеПериодом.ВерсияОрганизационнойСтруктуры.ШаблонСверкиВГО;
	КонецЕсли;
	Возврат Справочники.ШаблоныСверкиВГО.ПустаяСсылка();
КонецФункции

// Получить список организаций участвующих в сверке для отчетного периода.
// Параметры:
//	ПериодСценария - СправочникСсылка.Периоды - период для отбора отчетного периода и его регламента.
//	Сценарий - СправочникСсылка.Сценарий - сценарий для отбора отчетного периода и его регламента.
//	Пользователь - СправочникСсылка.Пользователи - необязательный. Если указан, то отбираем данные для указанного пользователя,
//			иначе отбираем данные для текущего пользователя системы.
// Возвращает:
//	Структура:
//		- ВсеОрганизации - Массив(СправочникСсылка.Организация) - все организации периметра в указанном отчетном периоде.
//		- ОрганизацииПроверяем - Массив(СправочникСсылка.Организация) - организации периметра для которых пользователь выполняет сверку.
//		- ОрганизацииСогласуем - Массив(СправочникСсылка.Организация) - организации периметра для которых пользователь выступает куратором.
//
Функция ОрганизацииУчаствующиеВСверке(ПериодСценария, Сценарий, Знач Пользователь=Неопределено) Экспорт
	
	Результат = Новый Структура("ВсеОрганизации,ОрганизацииПроверяем,ОрганизацииСогласуем", Новый Массив, Новый Массив, Новый Массив);
	
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	КонецЕсли;
	
	ЕстьПолныеПрава = Пользователи.ЭтоПолноправныйПользователь(Пользователь);
	
	Если НЕ ЗначениеЗаполнено(ПериодСценария)
		ИЛИ НЕ ЗначениеЗаполнено(Сценарий)
		ИЛИ НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Результат;
	КонецЕсли; 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	т.ОрганизационнаяЕдиница КАК Организация
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК т
	|ГДЕ
	|	т.Ссылка В
	|			(ВЫБРАТЬ
	|				рс.ВерсияРегламента
	|			ИЗ
	|				РегистрСведений.СтатусыПериодовСценариев КАК рс
	|			ГДЕ
	|				рс.Сценарии = &Сценарий
	|				И рс.Периоды = &ПериодСценария)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	т.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК т
	|ГДЕ
	|	т.Пользователь = &Пользователь
	|	И т.Роль В
	|			(ВЫБРАТЬ
	|				к.Значение
	|			ИЗ
	|				Константа.РольИсполнительВГО КАК к)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	т.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК т
	|ГДЕ
	|	т.Пользователь = &Пользователь
	|	И т.Роль В
	|			(ВЫБРАТЬ
	|				к.Значение
	|			ИЗ
	|				Константа.РольКураторВГО КАК к)");

	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	Запрос.УстановитьПараметр("Пользователь", 	Пользователь);
	
	мРезультатов = Запрос.ВыполнитьПакет();
	Результат.ВсеОрганизации = мРезультатов[0].Выгрузить().ВыгрузитьКолонку(0);
	
	Если ЕстьПолныеПрава Тогда
		Результат.ОрганизацииСогласуем = мРезультатов[0].Выгрузить().ВыгрузитьКолонку(0);
		Результат.ОрганизацииПроверяем = мРезультатов[0].Выгрузить().ВыгрузитьКолонку(0)
	Иначе
		Результат.ОрганизацииСогласуем = мРезультатов[1].Выгрузить().ВыгрузитьКолонку(0);
		Результат.ОрганизацииПроверяем = мРезультатов[2].Выгрузить().ВыгрузитьКолонку(0);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ОрганизацииУчаствующиеВСверке()

// Обработчик регламентного задания по проверке сроков выполнения сверки
//
Процедура ПроверитьСрокиВыполненияСверкиВГО() Экспорт
	
	Перем ПроцентПериода;
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	
	ПроцентПериода = Константы.ОповеститьПоИстеченииЧастиПериодаСверкиВГО.Получить();
	Если ПроцентПериода = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Отправим сообщение о истечении строков
	Попытка
		ТекДата = ТекущаяДата();
		
		мСостоянияСверки = Новый Массив;
		мСостоянияСверки.Вставить(Перечисления.СостояниеСверкиВГО.НеЗагружен);
		мСостоянияСверки.Вставить(Перечисления.СостояниеСверкиВГО.НеРассчитан);
		мСостоянияСверки.Вставить(Перечисления.СостояниеСверкиВГО.Несогласован);
		мСостоянияСверки.Вставить(Перечисления.СостояниеСверкиВГО.Спор);
		
		Запрос = Новый Запрос(ТекстЗапроса_ПисьмаРасхождений());

		Запрос.УстановитьПараметр("НезакрытыеСостояния",	мСостоянияСверки);
		Запрос.УстановитьПараметр("Дата", 					ТекДата);
		Запрос.УстановитьПараметр("ПроцентПериода", 		ПроцентПериода);
		
		Результат = Запрос.Выполнить();
		ВыборкаИсполнителей = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИсполнителей.Следующий() Цикл
			
			ВыборкаКураторов = ВыборкаИсполнителей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКураторов.Следующий() Цикл
				
				ЗаголовокПисьма = НСтр("ru = 'Истекает срок сверки ВГО.'");
				ТекстПисьма =
					НСтр("ru = 'Есть расхождения по которым завершается срок сверки:
					|<table>
					|	<tr>
					|		<th>Осталось,<br>дни</th>
					|		<th>Сценарий</th>
					|		<th>Период</th>
					|		<th>Организация</th>
					|		<th>Контрагент</th>
					|		<th>Раздел сверки</th>
					|		<th>Сумма</th>
					|		<th>Валюта</th>
					|	</tr>
					|'");
				
				// Подготовим текст письма
				ВыборкаДанныхСверки = ВыборкаКураторов.Выбрать(ОбходРезультатаЗапроса.Прямой);
				Пока ВыборкаДанныхСверки.Следующий() Цикл
					ТекстПисьма = ТекстПисьма + 
						"	<tr>
						|		<td>" + ВыборкаДанныхСверки.ОсталосьДней + "</td>
						|		<td>" + ВыборкаДанныхСверки.Сценарий + "</td>
						|		<td>" + ВыборкаДанныхСверки.ПериодСценария + "</td>
						|		<td>" + ВыборкаДанныхСверки.Организация + "</td>
						|		<td>" + ВыборкаДанныхСверки.Контрагент + "</td>
						|		<td>" + ВыборкаДанныхСверки.РазделВГО + "</td>
						|		<td>" + ВыборкаДанныхСверки.СуммаРасхождения + "</td>
						|		<td>" + ВыборкаДанныхСверки.ВалютаВзаиморасчетов + "</td>
						|	</tr>
						|";
				КонецЦикла; // Данные сверки
				
				ТекстПисьма = ТекстПисьма + Символы.ПС + "</table>";
				
				// Отправляем письмо
				Письмо = Новый ИнтернетПочтовоеСообщение;
				Письмо.Получатели.Добавить(ВыборкаКураторов.ПочтаИсполнителя);
				Если ВыборкаКураторов.ПочтаКуратора Тогда
					Письмо.Получатели.Добавить(ВыборкаКураторов.ПочтаКуратора);
				КонецЕсли;
				Письмо.Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
				Письмо.Тексты.Добавить(
					УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ЗаголовокПисьма, ТекстПисьма),
					ТипТекстаПочтовогоСообщения.HTML);
				Письмо.Тема = ЗаголовокПисьма;
				
				УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, ВыборкаДанныхСверки.Этап);
				Письмо = Неопределено;
				
			КонецЦикла; // Кураторы
		КонецЦикла; // Исполнители

	Исключение
		
		ЗаписьЖурналаРегистрации("РасхожденияВГО.Ошибка",
					УровеньЖурналаРегистрации.Ошибка, , ,
					СтроковыеФункцииКлиентСерверУХ.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Во время проверки сроков сверки произошла ошибка: 
							|%1'"), 
						ПодробноеПредставлениеОшибки(ОписаниеОшибки())));
			
	КонецПопытки;
		
КонецПроцедуры

Функция ТекстЗапроса_ПисьмаРасхождений()

	Возврат
	"ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Сценарии КАК Сценарии,
	|	СтатусыПериодовСценариев.Периоды КАК Периоды,
	|	СтатусыПериодовСценариев.ВерсияРегламента КАК ВерсияРегламента,
	|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО КАК ВерсияРегламентаШаблонСверкиВГО,
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария,
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО КАК ДатаНачалаСверки,
	|	ДОБАВИТЬКДАТЕ(СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО, ДЕНЬ, СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО.РегламентЗавершенияСверкиОрганизации) КАК ДатаЗавершенияСверки,
	|	РАЗНОСТЬДАТ(СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО, &Дата, ДЕНЬ) КАК ПрошлоДнейСверки,
	|	РАЗНОСТЬДАТ(СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО, &Дата, ДЕНЬ) / СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО.РегламентЗавершенияСверкиОрганизации * 100 КАК ПроцентПрошлоДнейСверки
	|ПОМЕСТИТЬ ПросроченныеСрокиСверки
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(Справочник.ШаблоныСверкиВГО.ПустаяСсылка)
	|	И СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО.РегламентЗавершенияСверкиОрганизации > 0
	|	И РАЗНОСТЬДАТ(СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО, &Дата, ДЕНЬ) / СтатусыПериодовСценариев.ВерсияРегламента.ШаблонСверкиВГО.РегламентЗавершенияСверкиОрганизации * 100 > &ПроцентПериода
	|	И СтатусыПериодовСценариев.УправлениеПериодомСценария.ДатаНачалаСверкиВГО < &Дата
	|	И НЕ СтатусыПериодовСценариев.УправлениеПериодомСценария.ПериодЗакрыт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Ответственные.Организация КАК Организация,
	|	Ответственные.Пользователь КАК Пользователь,
	|	Ответственные.ЭтоКуратор КАК ЭтоКуратор,
	|	КИ.АдресЭП КАК АдресЭП
	|ПОМЕСТИТЬ втКИ
	|ИЗ
	|	(ВЫБРАТЬ
	|		т.Организация КАК Организация,
	|		т.Пользователь КАК Пользователь,
	|		ЛОЖЬ КАК ЭтоКуратор
	|	ИЗ
	|		РегистрСведений.ОтветственныеОрганизаций КАК т
	|	ГДЕ
	|		т.Роль В
	|				(ВЫБРАТЬ
	|					т.Значение
	|				ИЗ
	|					Константа.РольИсполнительВГО КАК т)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		т.Организация,
	|		т.Пользователь,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.ОтветственныеОрганизаций КАК т
	|	ГДЕ
	|		т.Роль В
	|				(ВЫБРАТЬ
	|					т.Значение
	|				ИЗ
	|					Константа.РольКураторВГО КАК т)) КАК Ответственные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КИ
	|		ПО Ответственные.Пользователь = КИ.Ссылка
	|			И (КИ.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			И (КИ.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))
	|ГДЕ
	|	КИ.АдресЭП = &АдресЭП
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ЭтоКуратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИнформацияСверкиВГОСрезПоследних.ПериодСценария КАК ПериодСценария,
	|	ИнформацияСверкиВГОСрезПоследних.Сценарий КАК Сценарий,
	|	ПросроченныеСрокиСверки.ВерсияРегламента КАК Этап,
	|	ИнформацияСверкиВГОСрезПоследних.Отправитель КАК Организация,
	|	ИнформацияСверкиВГОПостоянная.Получатель КАК Контрагент,
	|	ИнформацияСверкиВГОПостоянная.РазделВГО КАК РазделВГО,
	|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	СУММА(ИнформацияСверкиВГОПостоянная.СуммаРасхождения) КАК СуммаРасхождения,
	|	ПросроченныеСрокиСверки.ДатаНачалаСверки КАК ДатаНачалаСверки,
	|	ПросроченныеСрокиСверки.ДатаЗавершенияСверки КАК ДатаЗавершенияСверки,
	|	ПросроченныеСрокиСверки.ПрошлоДнейСверки КАК ПрошлоДнейСверки,
	|	ПросроченныеСрокиСверки.ПроцентПрошлоДнейСверки КАК ПроцентПрошлоДнейСверки,
	|	РАЗНОСТЬДАТ(&Дата, ПросроченныеСрокиСверки.ДатаЗавершенияСверки, ДЕНЬ) КАК ОсталосьДней,
	|	ИсполнительКонтактнаяИнформация.АдресЭП КАК ПочтаИсполнителя,
	|	ЕСТЬNULL(КураторКонтактнаяИнформация.АдресЭП, """") КАК ПочтаКуратора
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(&Дата, Состояние В (&НезакрытыеСостояния)) КАК ИнформацияСверкиВГОСрезПоследних
	|		ПО ИнформацияСверкиВГОПостоянная.ПериодСценария = ИнформацияСверкиВГОСрезПоследних.ПериодСценария
	|			И ИнформацияСверкиВГОПостоянная.Сценарий = ИнформацияСверкиВГОСрезПоследних.Сценарий
	|			И ИнформацияСверкиВГОПостоянная.Этап = ИнформацияСверкиВГОСрезПоследних.Этап
	|			И ИнформацияСверкиВГОПостоянная.Отправитель = ИнформацияСверкиВГОСрезПоследних.Отправитель
	|			И ИнформацияСверкиВГОПостоянная.Получатель = ИнформацияСверкиВГОСрезПоследних.Получатель
	|			И ИнформацияСверкиВГОПостоянная.РазделВГО = ИнформацияСверкиВГОСрезПоследних.РазделВГО
	|			И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов = ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов
	|			И ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения = ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения
	|			И (ИнформацияСверкиВГОПостоянная.СуммаРасхождения > 0)
	|			И (ВЫБОР
	|				КОГДА ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности = 0
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВЫБОР
	|								КОГДА ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|									КОНЕЦ > ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|									ТОГДА ВЫБОР
	|											КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|												ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|											ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|							КОНЕЦ = 0
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ 100 * ИнформацияСверкиВГОПостоянная.СуммаРасхождения / ВЫБОР
	|								КОГДА ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|									КОНЕЦ > ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|									ТОГДА ВЫБОР
	|											КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|												ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|											ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|							КОНЕЦ > ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности
	|					КОНЕЦ
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКИ КАК ИсполнительКонтактнаяИнформация
	|		ПО ИнформацияСверкиВГОПостоянная.Отправитель = ИсполнительКонтактнаяИнформация.Организация
	|			И (НЕ ИсполнительКонтактнаяИнформация.ЭтоКуратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИ КАК КураторКонтактнаяИнформация
	|		ПО ИнформацияСверкиВГОПостоянная.Отправитель = КураторКонтактнаяИнформация.Организация
	|			И (КураторКонтактнаяИнформация.ЭтоКуратор),
	|	ПросроченныеСрокиСверки КАК ПросроченныеСрокиСверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияСверкиВГОСрезПоследних.ПериодСценария,
	|	ИнформацияСверкиВГОСрезПоследних.Отправитель,
	|	ИнформацияСверкиВГОСрезПоследних.Сценарий,
	|	ИсполнительКонтактнаяИнформация.АдресЭП,
	|	ПросроченныеСрокиСверки.ДатаЗавершенияСверки,
	|	ПросроченныеСрокиСверки.ДатаНачалаСверки,
	|	ЕСТЬNULL(КураторКонтактнаяИнформация.АдресЭП, """"),
	|	ИнформацияСверкиВГОПостоянная.Получатель,
	|	ИнформацияСверкиВГОПостоянная.РазделВГО,
	|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов,
	|	ПросроченныеСрокиСверки.ПрошлоДнейСверки,
	|	ПросроченныеСрокиСверки.ПроцентПрошлоДнейСверки,
	|	РАЗНОСТЬДАТ(&Дата, ПросроченныеСрокиСверки.ДатаЗавершенияСверки, ДЕНЬ),
	|	ПросроченныеСрокиСверки.ВерсияРегламента
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИнформацияСверкиВГОСрезПоследних.ПериодСценария,
	|	ИнформацияСверкиВГОСрезПоследних.Сценарий,
	|	ПросроченныеСрокиСверки.ВерсияРегламента,
	|	ИнформацияСверкиВГОСрезПоследних.Получатель,
	|	ИнформацияСверкиВГОПостоянная.Отправитель,
	|	ИнформацияСверкиВГОПостоянная.РазделВГО,
	|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов,
	|	СУММА(ИнформацияСверкиВГОПостоянная.СуммаРасхождения),
	|	ПросроченныеСрокиСверки.ДатаНачалаСверки,
	|	ПросроченныеСрокиСверки.ДатаЗавершенияСверки,
	|	ПросроченныеСрокиСверки.ПрошлоДнейСверки,
	|	ПросроченныеСрокиСверки.ПроцентПрошлоДнейСверки,
	|	РАЗНОСТЬДАТ(&Дата, ПросроченныеСрокиСверки.ДатаЗавершенияСверки, ДЕНЬ),
	|	ИсполнительКонтактнаяИнформация.АдресЭП,
	|	ЕСТЬNULL(КураторКонтактнаяИнформация.АдресЭП, """")
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(&Дата, Состояние В (&НезакрытыеСостояния)) КАК ИнформацияСверкиВГОСрезПоследних
	|		ПО ИнформацияСверкиВГОПостоянная.ПериодСценария = ИнформацияСверкиВГОСрезПоследних.ПериодСценария
	|			И ИнформацияСверкиВГОПостоянная.Сценарий = ИнформацияСверкиВГОСрезПоследних.Сценарий
	|			И ИнформацияСверкиВГОПостоянная.Этап = ИнформацияСверкиВГОСрезПоследних.Этап
	|			И ИнформацияСверкиВГОПостоянная.Отправитель = ИнформацияСверкиВГОСрезПоследних.Отправитель
	|			И ИнформацияСверкиВГОПостоянная.Получатель = ИнформацияСверкиВГОСрезПоследних.Получатель
	|			И ИнформацияСверкиВГОПостоянная.РазделВГО = ИнформацияСверкиВГОСрезПоследних.РазделВГО
	|			И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов = ИнформацияСверкиВГОСрезПоследних.ВалютаВзаиморасчетов
	|			И ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения = ИнформацияСверкиВГОСрезПоследних.ДопАналитикаРасхождения
	|			И (ИнформацияСверкиВГОПостоянная.СуммаРасхождения > 0)
	|			И (ВЫБОР
	|				КОГДА ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности = 0
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ВЫБОР
	|								КОГДА ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|									КОНЕЦ > ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|									ТОГДА ВЫБОР
	|											КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|												ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|											ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|							КОНЕЦ = 0
	|							ТОГДА ЛОЖЬ
	|						ИНАЧЕ 100 * ИнформацияСверкиВГОПостоянная.СуммаРасхождения / ВЫБОР
	|								КОГДА ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|									КОНЕЦ > ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|									ТОГДА ВЫБОР
	|											КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя > 0
	|												ТОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|											ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаОтправителя
	|										КОНЕЦ
	|								ИНАЧЕ ВЫБОР
	|										КОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя > 0
	|											ТОГДА ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|										ИНАЧЕ -ИнформацияСверкиВГОПостоянная.СуммаПолучателя
	|									КОНЕЦ
	|							КОНЕЦ > ИнформацияСверкиВГОПостоянная.РазделВГО.ПорогСущественности
	|					КОНЕЦ
	|			КОНЕЦ)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКИ КАК ИсполнительКонтактнаяИнформация
	|		ПО ИнформацияСверкиВГОПостоянная.Получатель = ИсполнительКонтактнаяИнформация.Организация
	|			И (НЕ ИсполнительКонтактнаяИнформация.ЭтоКуратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКИ КАК КураторКонтактнаяИнформация
	|		ПО ИнформацияСверкиВГОПостоянная.Получатель = КураторКонтактнаяИнформация.Организация
	|			И (КураторКонтактнаяИнформация.ЭтоКуратор),
	|	ПросроченныеСрокиСверки КАК ПросроченныеСрокиСверки
	|
	|СГРУППИРОВАТЬ ПО
	|	ИнформацияСверкиВГОСрезПоследних.ПериодСценария,
	|	ИнформацияСверкиВГОСрезПоследних.Сценарий,
	|	ИнформацияСверкиВГОСрезПоследних.Получатель,
	|	ИнформацияСверкиВГОПостоянная.Отправитель,
	|	ИнформацияСверкиВГОПостоянная.РазделВГО,
	|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов,
	|	ПросроченныеСрокиСверки.ДатаНачалаСверки,
	|	ПросроченныеСрокиСверки.ДатаЗавершенияСверки,
	|	ПросроченныеСрокиСверки.ПрошлоДнейСверки,
	|	ПросроченныеСрокиСверки.ПроцентПрошлоДнейСверки,
	|	РАЗНОСТЬДАТ(&Дата, ПросроченныеСрокиСверки.ДатаЗавершенияСверки, ДЕНЬ),
	|	ИсполнительКонтактнаяИнформация.АдресЭП,
	|	ЕСТЬNULL(КураторКонтактнаяИнформация.АдресЭП, """"),
	|	ПросроченныеСрокиСверки.ВерсияРегламента
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцентПрошлоДнейСверки УБЫВ,
	|	ПериодСценария,
	|	Сценарий,
	|	Организация,
	|	Контрагент,
	|	РазделВГО,
	|	ВалютаВзаиморасчетов
	|ИТОГИ
	|	КОЛИЧЕСТВО(СуммаРасхождения)
	|ПО
	|	ПочтаИсполнителя,
	|	ПочтаКуратора"

КонецФункции

//устарела. следует использовать ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(Организация)
Функция КонтрагентДляОрганизацииВГО(Организация) Экспорт

	Возврат ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(Организация);
	
КонецФункции

// Читает константу УчетнаяЗаписьДляРассылкиУведомлений и возвращает строку с почтовым адресом.
// Если почта не указана, то возвращает пустую строку.
//
Функция УчетнаяЗаписьДляРассылкиУведомлений() Экспорт
	ЭлПочта_ = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Если ЗначениеЗаполнено(ЭлПочта_) Тогда
		Возврат ЭлПочта_.АдресЭлектроннойПочты;
	КонеЦЕсли;
	
	Возврат "";
КонецФункции

// Сформировать и отправить письмо с ошибкой
Процедура ЗаписатьПисьмоССообщениемОбОшибке(ТекстОшибки, Этап, ПараметрыОшибки=Неопределено) Экспорт
	
	Если НЕ Константы.ОповеститьОбОшибкахРасчетаРасхожденийВГО.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	АдресЭлектроннойПочты = Константы.УчетнаяЗаписьАдминистратораВГО.Получить();
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Получатели.Добавить(АдресЭлектроннойПочты);
	Письмо.Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
	
	Письмо.Тема = НСтр("ru = 'В процессе расчета расхождений возникла ошибка.'");
	
	ТекстПисьма =
		НСтр("ru = 'Текст ошибки: <BR>
		|'") + ТекстОшибки + "
		|<BR>";
		
	Если ТипЗнч(ПараметрыОшибки) = Тип("Соответствие") Тогда
		ТекстПисьма = ТекстПисьма +
			"
			|" + НСтр("ru = 'Параметры: '") + "<BR>
			|<UL>
			|";
		Для каждого ПараметрОшибки Из ПараметрыОшибки Цикл
			ТекстПисьма = ТекстПисьма +
				"<LI><B>" + ПараметрОшибки.Ключ + ": </B>" + ПараметрОшибки.Значение + "</LI>";
			КонецЦикла;
		ТекстПисьма = ТекстПисьма +
			"
			|</UL>";
	КонецЕсли;
		
	Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(НСтр("ru = 'В процессе расчета расхождений возникли ошибки.'"), ТекстПисьма),
		ТипТекстаПочтовогоСообщения.HTML);
	
	УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Этап);
	
	Письмо = Неопределено;
	
КонецПроцедуры

// Представляет любое значение в строку для отображения пользователю, либо записи в лог в наглядном для человека представлении.
Функция ЗначениеВСтроку(Знач Значение, Знач Отступ = "") Экспорт
	
	Перем Стр;
	
	Стр = "";
	ТипЗначения = ТипЗнч(Значение);
	
	Если ТипЗначения = Тип("СписокЗначений") Тогда
		Стр = Стр + Отступ + НСтр("ru = 'Список значений('") + Значение.Количество() + "): " + Символы.ПС;
		Для каждого Значение1 Из Значение Цикл
			Стр = Стр + Отступ + "	" + Значение1.Представление + " = " + ЗначениеВСтроку(Значение1.Значение, Отступ + "	") + Символы.ПС;
		КонецЦикла;
		Стр = Сред(Стр, 1, СтрДлина(Стр)-1);
	ИначеЕсли ТипЗначения = Тип("Массив") Тогда
		Стр = Стр + Отступ + НСтр("ru = 'Массив('") + Значение.Количество() + "): " + Символы.ПС;
		Ном = 0;
		Для Ном = 0 По Значение.ВГраница() Цикл
			Стр = Стр + Отступ + "	[" + Ном + "] = " + ЗначениеВСтроку(Значение[Ном], Отступ + "	") + Символы.ПС;
		КонецЦикла;
		Стр = Сред(Стр, 1, СтрДлина(Стр)-1);
	ИначеЕсли ТипЗначения = Тип("Структура") ИЛИ ТипЗначения = Тип("Соответствие") Тогда
		Стр = Стр + Отступ + ?(ТипЗначения = Тип("Структура"), НСтр("ru = 'Структура: '"), НСтр("ru = 'Соответствие: '")) + Символы.ПС;
		Для каждого Значение1 Из Значение Цикл
			Стр = Стр + Отступ + "	" + Значение1.Ключ + " = " + ЗначениеВСтроку(Значение1.Значение, Отступ + "	") + Символы.ПС;
		КонецЦикла;
		Стр = Сред(Стр, 1, СтрДлина(Стр)-1);
	ИначеЕсли ТипЗначения = Тип("ТаблицаЗначений") Тогда
		ШаблонТекста = НСтр("ru = 'Таблица значений (строк %1, колонок %2): '");
		Стр = Стр + Отступ + СтрШаблон(ШаблонТекста, Значение.Количество(), Значение.Колонки.Количество()) + Символы.ПС;
		Ном = 1;
		Для каждого Значение1 Из Значение Цикл
			Стр = Стр + Отступ + "	" + НСтр("ru = 'Строка №'") + Ном + " = " + Символы.ПС;
			Ном = Ном + 1;
			Для каждого Колонка Из Значение.Колонки Цикл
				Стр = Стр + Отступ + "		" + Колонка.Имя + " = " + ЗначениеВСтроку(Значение1[Колонка.Имя], Отступ + "			") +Символы.ПС;
			КонецЦикла;
		КонецЦикла;
		Стр = Сред(Стр, 1, СтрДлина(Стр)-1);
	Иначе
		Стр = Стр + Отступ + Строка(Значение) + НСтр("ru = '(тип: '") + Строка(ТипЗначения) + ")";
	КонецЕсли;
	
	Возврат Стр;
	
КонецФункции

// Возвращает код счета (например, "10.01") и его префикс ("Д"- дебет или "К" - кредит).
// Переменная Текст обрезается по обработанному счету. Например, было "Д10К20Д01К08",
// станет "Д01К08".
//
Функция ВернутьТекстСчета(Текст, Знач ПрефиксДт, Знач ПрефиксКт, Префикс) Экспорт
	Перем ТекстСчета, Ном, ДлиннаТекста;
	
	Числа = "0123456789ABCDEFGHIGKLMNOPQRSTUVWXYZabcdefghigklmnopqrstuvwxyz";
	СимволыПрефикса = НРег(ПрефиксДт + ПрефиксКт) + ВРег(ПрефиксДт + ПрефиксКт);
	РазделителиСубсчетов = "._";
	СимволыПлюса = "+";
	ДлиннаПрефикса = Макс(СтрДлина(ПрефиксДт), СтрДлина(ПрефиксКт));
	
	КорректныеСимволы = Числа + РазделителиСубсчетов + ПрефиксДт + ПрефиксКт;
	
	// удалим первые бессмысленные символы
	ДлиннаТекста = СтрДлина(Текст);
	Ном = 1;
	Пока Ном < ДлиннаТекста Цикл
		Если СтрНайти(КорректныеСимволы, Сред(Текст, Ном, 1)) > 0 Тогда
			Прервать;
		КонецЕсли;
		Ном = Ном + 1;
	КонецЦикла;
	Текст = Сред(Текст, Ном);
	
	Префикс = "";
	МожетПрефикс = ""; // если в коде счета встречаются символы подходящие под префикс, проверяем, что это не они
	ТекстСчета = "";
	ТекСимвол = "";
	Ном = 0;
	Состояние_ = 1; // 1 - ищем текст {дт,кт, };
					// 2 - ищем {числа и разделители}, например, в ситуации "Дт60."; 
					// 3 - ищем только числа, после разделителя субсчета;
					// Путь: 1-2-(3-2)
	ДлиннаТекста = СтрДлина(Текст);
	Пока Ном < ДлиннаТекста Цикл
		Ном = Ном + 1;
		ТекСимвол = Лев(Текст, 1);
		Текст = Сред(Текст,2);
		Если Состояние_ = 1 Тогда
			// обрабатываем префикс
			Если СтрНайти(СимволыПрефикса, ТекСимвол) > 0 Тогда
				// префикс
				Префикс = Префикс + ТекСимвол;
				Если НРег(Префикс) = НРег(ПрефиксДт) Тогда
					Префикс = ПрефиксДт;
					Состояние_ = 2;
				ИначеЕсли НРег(Префикс) = НРег(ПрефиксКт) Тогда
					Префикс = ПрефиксКт;
					Состояние_ = 2;
				ИначеЕсли СтрДлина(Префикс) = ДлиннаПрефикса Тогда
					// похож, но не префикс
					Состояние_ = 2;
					ТекстСчета = ТекстСчета + Префикс;
					Префикс = "";
				КонецЕсли;
			ИначеЕсли СтрНайти(Числа, ТекСимвол) > 0 Тогда
				// пошел счет
				Состояние_ = 2;
				ТекстСчета = ТекстСчета + ТекСимвол;
			Иначе
				// недопустимый символ. Пропускаем его.
			КонецЕсли;
		ИначеЕсли Состояние_ = 2 Тогда
			// ищем числа и разделитель субсчетов (точку или подчеркивание)
			Если СтрНайти(СимволыПрефикса, ТекСимвол) > 0 Тогда
				// префикс. 
				МожетПрефикс = МожетПрефикс + ТекСимвол;
				Если НРег(МожетПрефикс) = НРег(ПрефиксДт) ИЛИ НРег(МожетПрефикс) = НРег(ПрефиксКт) Тогда
					// Это действительно префикс
					Текст = МожетПрефикс+Текст; // вернем во входной поток символы префикса
					ТекстСчета = Лев(ТекстСчета, СтрДлина(ТекстСчета)-СтрДлина(МожетПрефикс)+1); // исключим префикс из текста счета
					Прервать;
				ИначеЕсли СтрДлина(МожетПрефикс) = ДлиннаПрефикса Тогда
					МожетПрефикс = ТекСимвол;
				КонецЕсли;
			Иначе
				МожетПрефикс = "";
			КонецЕсли;
			Если СтрНайти(Числа, ТекСимвол) > 0 Тогда
				ТекстСчета = ТекстСчета + ТекСимвол;
			ИначеЕсли СтрНайти(СимволыПлюса, ТекСимвол) > 0 Тогда
				ТекстСчета = ТекстСчета + "+";
				Состояние_ = 3; // после плюса только число, инчае считаем, что закончили
			ИначеЕсли СтрНайти(РазделителиСубсчетов, ТекСимвол) > 0 Тогда
				ТекстСчета = ТекстСчета + ".";
				Состояние_ = 3; // после разделителя только число, инчае считаем, что закончили
			Иначе
				Прервать;
			КонецЕсли;
		ИначеЕсли Состояние_ = 3 Тогда
			// нет нужды искать префикс, т.к. после точки не может сразу идти префикс другого счета
			МожетПрефикс = "";
			Если СтрНайти(Числа, ТекСимвол) > 0 Тогда
				ТекстСчета = ТекстСчета + ТекСимвол;
				Состояние_ = 2;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТекстСчета;
КонецФункции

// Возвращает структуру заполненную счетами
Функция НайтиСчетаНаСервере(Знач Текст, Знач ПланСчетов) Экспорт
	Перем мКодыСчетов;
	
	мКодыСчетов = Новый Структура("СчетДт,СчетКт,ИмяДт,ИмяКт");
	
	ПрефиксДт = ?(ЗначениеЗаполнено(ПланСчетов.ПрефиксДт), ПланСчетов.ПрефиксДт, "Дт");
	ПрефиксКт = ?(ЗначениеЗаполнено(ПланСчетов.ПрефиксКт), ПланСчетов.ПрефиксКт, "Кт");
	мКодыСчетов.ИмяДт = ПрефиксДт;
	мКодыСчетов.ИмяКт = ПрефиксКт;
	
	Текст = ВРег(СокрЛП(Текст));
	Состояние_ = 1; // 1 - осндт, 2 - оснкт, 3 - конец
	флЕстьПрефикс = Истина;
	Пока Состояние_ < 3 Цикл
		Префикс = "";
		ТекСчет = СверкаВГОУХ.ВернутьТекстСчета(Текст, ПрефиксДт, ПрефиксКт, Префикс);
		
		Если ТекСчет = "" Тогда
			Прервать;
		КонецЕсли;
		
		ТекСчет = Справочники.СчетаБД.НайтиПоКоду(ТекСчет,,, ПланСчетов);
		Если ТекСчет = Неопределено Тогда
			ТекСчет = Справочники.СчетаБД.ПустаяСсылка();
		КонецЕсли;
		
		Если Состояние_ = 1 Тогда
			Если Префикс = ПрефиксКт Тогда // ОснКт
				мКодыСчетов.СчетКт = ТекСчет;
			Иначе // ОснДт
				мКодыСчетов.СчетДт = ТекСчет;
			КонецЕсли;
			Состояние_ = 2;
			
		ИначеЕсли Состояние_ = 2 Тогда
			Если Префикс = ПрефиксДт Тогда // ОснДт
				мКодыСчетов.ДопДт = ТекСчет;
			Иначе // ОснДт,ОснКт
				мКодыСчетов.ОснКт = ТекСчет;
			КонецЕсли;
			Состояние_ = 3;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат мКодыСчетов;
КонецФункции

Функция ПолучитьИмяЗначенияПеречисления(Ссылка) Экспорт
	ИмяПеречисления = Ссылка.Метаданные().Имя;
	Индекс = Перечисления[ИмяПеречисления].Индекс(Ссылка);
	Возврат Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления[Индекс].Имя;
КонецФункции // ПолучитьИмяЗначенияПеречисления()

Функция ИмяАналитикиДляСверки(Аналитика) Экспорт
	ТипДляЭлиминации = Аналитика.ТипДляЭлиминации;
	Если ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ТолькоСверка Тогда
		Возврат Аналитика.Имя;
	КонецЕсли;
	Возврат ПолучитьИмяЗначенияПеречисления(ТипДляЭлиминации);
КонецФункции

Функция ПолучитьПараметрСтруктуры(СтруктураПараметров, ИмяПараметра, ЗначениеПоУмолчанию) Экспорт
	Значение_ = Неопределено;
	Возврат ?(СтруктураПараметров.Свойство(ИмяПараметра, Значение_), Значение_, ЗначениеПоУмолчанию);
КонецФункции

Функция ЗаписатьЗапросВрегистрДляОтладки(ИмяЗапроса, Запрос, Отбор = Неопределено) Экспорт
	ПараметрыЗапроса = Запрос.Параметры;
	РегистрЗапросовВычислявшихРасхождения = РегистрыСведений.ЗапросыВычислявшиеРасхождения.СоздатьМенеджерЗаписи();
	РегистрЗапросовВычислявшихРасхождения.ГУИД = Новый УникальныйИдентификатор();
	РегистрЗапросовВычислявшихРасхождения.ИмяЗапроса = ИмяЗапроса;
	РегистрЗапросовВычислявшихРасхождения.ТекстЗапроса = Запрос.Текст;
	РегистрЗапросовВычислявшихРасхождения.Дата = ТекущаяДата();
	РегистрЗапросовВычислявшихРасхождения.ПериодСценария = ПолучитьПараметрСтруктуры(ПараметрыЗапроса, "ПериодСценария",Справочники.Периоды.ПустаяСсылка());
	РегистрЗапросовВычислявшихРасхождения.Сценарий = ПолучитьПараметрСтруктуры(ПараметрыЗапроса, "Сценарий",Справочники.Сценарии.ПустаяСсылка());
	РегистрЗапросовВычислявшихРасхождения.Этап = ПолучитьПараметрСтруктуры(ПараметрыЗапроса, "Этап",Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	РегистрЗапросовВычислявшихРасхождения.РазделВГО = ПолучитьПараметрСтруктуры(ПараметрыЗапроса, "РазделВГО",Справочники.РазделыСверкиВГО.ПустаяСсылка());
	РегистрЗапросовВычислявшихРасхождения.ОписаниеПараметровЗапроса = СверкаВГОУХ.ЗначениеВСтроку(Запрос.Параметры);
	Если ЗначениеЗаполнено(Отбор) Тогда
		РегистрЗапросовВычислявшихРасхождения.ОписаниеВходныхДанныхРасчета = СверкаВГОУХ.ЗначениеВСтроку(Отбор);
	КонецЕсли;
	
	ДеревоИзПрокси    = Новый ДеревоЗначений();
	ОписаниеТипСтрока = Новый ОписаниеТипов("Строка");
	ОписаниеТипЧисло  = Новый ОписаниеТипов("Число");
	ДеревоИзПрокси.Колонки.Добавить("Запрос", ОписаниеТипСтрока);
	ДеревоИзПрокси.Колонки.Добавить("ТекстЗапроса", ОписаниеТипСтрока);
	ДеревоИзПрокси.Колонки.Добавить("ПараметрыЗапроса", Новый ОписаниеТипов("ТаблицаЗначений"));
	ДеревоИзПрокси.Колонки.Добавить("СпособВыгрузки", ОписаниеТипЧисло);
	ДеревоИзПрокси.Колонки.Добавить("ШиринаКолонок", ОписаниеТипЧисло);
	НоваяСтрока = ДеревоИзПрокси.Строки.Добавить();
	НоваяСтрока.Запрос = ИмяЗапроса;
	НоваяСтрока.ТекстЗапроса = Запрос.Текст;
	НоваяСтрока.СпособВыгрузки = 2; // дерево
	НоваяСтрока.ШиринаКолонок = 20;
	ТаблицаПараметров = Новый ТаблицаЗначений;
	ТаблицаПараметров.Колонки.Добавить("ИмяПараметра", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("Примечание", Новый ОписаниеТипов("Строка"));
	ТаблицаПараметров.Колонки.Добавить("ЗначениеПараметра");
	ТаблицаПараметров.Колонки.Добавить("ЭтоВыражение", Новый ОписаниеТипов("Булево"));
	ТаблицаПараметров.Колонки.Добавить("ОсобыйТип", Новый ОписаниеТипов("Булево"));
	Для каждого Параметр Из Запрос.Параметры Цикл
		НоваяСтрокаПараметров = ТаблицаПараметров.Добавить();
		НоваяСтрокаПараметров.ИмяПараметра = Параметр.Ключ;
		НоваяСтрокаПараметров.Примечание = "";
		Значение_ = Параметр.Значение;
		Если ТипЗнч(Значение_) = Тип("Массив") Тогда
			Значение_ = Новый СписокЗначений;
			Значение_.ЗагрузитьЗначения(Параметр.Значение);
		КонецЕсли;
		НоваяСтрокаПараметров.ЗначениеПараметра = Значение_;
		НоваяСтрокаПараметров.ЭтоВыражение = Ложь;
		НоваяСтрокаПараметров.ОсобыйТип = Ложь;
	КонецЦикла;
	НоваяСтрока.ПараметрыЗапроса = ТаблицаПараметров;
	РегистрЗапросовВычислявшихРасхождения.ПараметрыЗапросаДляФайла = ЗначениеВСтрокуВнутр(ДеревоИзПрокси);
	РегистрЗапросовВычислявшихРасхождения.Записать();
	
	Возврат Истина;
	
КонецФункции 

// Проверяет вхождение значения в множество. Аналогично операнду "В()" языка запросов.
// Параметры
// МножествоЗначений - одно значение, массив, список значений, фиксированныйсписок
// Значение - значение, которое проверяем на вхождение в множество
//
Функция ЗначениеВходитВМножество(МножествоЗначений, Значение) Экспорт
	Если МножествоЗначений = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли МножествоЗначений = NULL Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Значение = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли Значение = NULL Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТипМножества = ТипЗнч(МножествоЗначений);
	Если ТипМножества = Тип("Массив") ИЛИ ТипМножества = Тип("ФиксированныйМассив") Тогда
		Возврат МножествоЗначений.Найти(Значение) <> Неопределено;
	ИначеЕсли ТипМножества = Тип("СписокЗначений") Тогда
		Возврат МножествоЗначений.НайтиПоЗначению(Значение) <> Неопределено;
	ИначеЕсли ТипМножества = Тип("Соответствие") Тогда
		Возврат МножествоЗначений.Получить(Значение) <> Неопределено;
	ИначеЕсли ТипМножества = Тип("ТаблицаЗначений") Тогда
		Возврат МножествоЗначений.Строки.Найти(Значение) <> Неопределено;
	ИначеЕсли ТипМножества = Тип("ДеревоЗначений") Тогда
		Возврат МножествоЗначений.Строки.Найти(Значение,,Истина) <> Неопределено;
	КонецЕсли;
	
	Возврат (МножествоЗначений = Значение);
КонецФункции

// Знаение без знака
Функция Абс(Значение)
	Возврат Макс(Значение, -Значение);
КонецФункции

// Скопировать из структуры Источник занченения параметров в Соответствике Приемник
Процедура СкопироватьСвойства(Приемник, Источник, Приставка="")
	ТипИсточника = ТипЗнч(Источник);
	Если ТипИсточника = Тип("Структура") ИЛИ ТипИсточника = Тип("Соответствие") Тогда
		Для каждого КлючЗначение Из Источник Цикл
			Приемник.Вставить(Приставка + Строка(КлючЗначение.Ключ), КлючЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Изменяет флаг пометки на удаление подчиненного объекта, если он отличается от значения пометки на удаление объекта хозяина
// Параметры:
//		СсылкаПодчиненный - Ссылка на подчиненный объект, пометку удаления, которого будем проверять и изменять;
//		ПометкаУдаления - Булево, значения пометки удаления объекта хозяина.
//
Процедура ОбработатьПометкуНаУдалениеПодчиненногоОбъекта(СсылкаПодчиненный, ПометкаУдаления) Экспорт
	Если ЗначениеЗаполнено(СсылкаПодчиненный) И СсылкаПодчиненный.ПометкаУдаления <> ПометкаУдаления Тогда
		ОбъектПодчиненный = СсылкаПодчиненный.ПолучитьОбъект();
		ОбъектПодчиненный.УстановитьПометкуУдаления(ПометкаУдаления, Истина);
	КонецЕсли;
КонецПроцедуры

Функция ГоловнаяОрганизацияИВалюта(ПериодСценария, Сценарий) Экспорт
	ТЗКонсолидирующиеОрганизации = УправлениеРабочимиПроцессамиУХ.ПолучитьКонсолидирующиеОрганизацииРегламента(ПериодСценария, Сценарий);

	Если ТЗКонсолидирующиеОрганизации.Количество() > 0 Тогда
		СтруктураГлавнойОрганизации = Новый Структура;
		СтруктураГлавнойОрганизации.Вставить("ГлавнаяОрганизация", ТЗКонсолидирующиеОрганизации[0].Организация);
		СтруктураГлавнойОрганизации.Вставить("Валюта", ТЗКонсолидирующиеОрганизации[0].Валюта);
		
		Возврат СтруктураГлавнойОрганизации;
	КонецЕсли;
		
	Возврат Неопределено;
	
КонецФункции

// Сформировать таблицу с пользователями отвественными за сверку и почтовые адреса.
// Параметры:
//	Сценарий - СправочникСсылка.Сценарии - сценарий для получения кураторов сверки.
//	ПериодСценария - СправочникСсылка.Периоды - период для получения кураторов сверки.
//	Организации - Массив(СправочникСсылка.Организация) - организации для которых нужно получить почту ответственных лиц.
//			Если не указан, то получаем адреса для всех организаций периметра.
//	УчитыватьКураторов - Булево. Если Истина - то добавляет в таблицу пользователей-кураторов сверки.
//	ИсключитьПользователя - СправочникСсылка.Пользователи - если указан, то данный пользователь будет исключен из таблицы.
//			Это необходимо для исключения текущего пользователя из оповещения.
//
// Возвращает:
//	ТаблицаЗначений со следующей структурой:
//		- Организация - СправочникСсылка.Организации - организация по которой отправляем оповещение.
//		- Пользователь - СправочникСсылка.Пользователи - пользователь, которому соответствует организация;
//		- Email - Строка - адрес e-mail.
//		- Куратор - Булево - это куратор сверки по организации.
//
Функция ПочтаЛицОтветственныхЗаСверку(Сценарий, ПериодСценария, 
			Организации = Неопределено, УчитыватьКураторов = Ложь, ИсключитьПользователя = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК Организация,
	|	ЕСТЬNULL(ОрганизацииКонтактнаяИнформация.АдресЭП, """") КАК EmailПоумолчанию
	|ПОМЕСТИТЬ ОрганизацииПериметра
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|				ПО ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница = ОрганизацииКонтактнаяИнформация.Ссылка
	|					И (ОрганизацииКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|					И (ОрганизацииКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|			ПО ВерсииРегламентовПодготовкиОтчетности.Ссылка = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка
	|				И (ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница В (&Организации))
	|		ПО УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры = ВерсииРегламентовПодготовкиОтчетности.Ссылка
	|			И (УправлениеПериодомСценария.Сценарий = &Сценарий)
	|			И (УправлениеПериодомСценария.ПериодСценария = &ПериодСценария)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница,
	|	ЕСТЬNULL(ОрганизацииКонтактнаяИнформация.АдресЭП, """")
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Ответственные.Организация КАК Организация,
	|	Ответственные.Пользователь КАК Пользователь,
	|	ЛОЖЬ КАК Куратор,
	|	ПользователиКонтактнаяИнформация.АдресЭП КАК Email
	|ПОМЕСТИТЬ ОтветственныеПоОрганизациям
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК Ответственные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО Ответственные.Пользователь = ПользователиКонтактнаяИнформация.Ссылка
	|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	Ответственные.Роль В
	|			(ВЫБРАТЬ
	|				т.Значение
	|			ИЗ
	|				Константа.РольИсполнительВГО КАК т)
	|	И Ответственные.Пользователь <> &ИсключитьПользователя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ответственные.Организация,
	|	Ответственные.Пользователь,
	|	ИСТИНА,
	|	ПользователиКонтактнаяИнформация.АдресЭП
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК Ответственные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ПользователиКонтактнаяИнформация
	|		ПО Ответственные.Пользователь = ПользователиКонтактнаяИнформация.Ссылка
	|			И (ПользователиКонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailОрганизации))
	|			И (ПользователиКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	Ответственные.Роль В
	|			(ВЫБРАТЬ
	|				т.Значение
	|			ИЗ
	|				Константа.РольКураторВГО КАК т)
	|	И Ответственные.Пользователь <> &ИсключитьПользователя
	|	И &УчитыватьКураторов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииПериметра.Организация КАК Организация,
	|	ЕСТЬNULL(ОтветственныеПоОрганизациям.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.Пустаяссылка)) КАК Пользователь,
	|	ЕСТЬNULL(ОтветственныеПоОрганизациям.Куратор, ЛОЖЬ) КАК Куратор,
	|	ЕСТЬNULL(ОтветственныеПоОрганизациям.Email, ОрганизацииПериметра.EmailПоумолчанию) КАК Email
	|ИЗ
	|	ОрганизацииПериметра КАК ОрганизацииПериметра
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОтветственныеПоОрганизациям КАК ОтветственныеПоОрганизациям
	|		ПО ОрганизацииПериметра.Организация = ОтветственныеПоОрганизациям.Организация
	|ГДЕ
	|	ЕСТЬNULL(ОтветственныеПоОрганизациям.Email, ОрганизацииПериметра.EmailПоумолчанию) <> """"";
	
	Запрос.УстановитьПараметр("ПериодСценария", 		ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий", 				Сценарий);
	Запрос.УстановитьПараметр("ИсключитьПользователя", 	ИсключитьПользователя);
	Запрос.УстановитьПараметр("УчитыватьКураторов", 	УчитыватьКураторов);
	
	Если Организации = Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И (ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница В (&Организации))", "");
	Иначе
		Запрос.УстановитьПараметр("Организации", Организации);
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получить вид операции реализации по виду операции поступления.
//
// Параметры:
//  ВидОперацииПоступления - ПеречислениеСсылка.ВидыОперацийПоступлениеТоваровУслуг - вид операции поступления.
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.ВидыОперацийРеализацияТоваров
//
Функция ПолучитьВидОперацииРеализацииПоВидуОперацииПоступления(ВидОперацииПоступления) Экспорт
	ВидРеализацииПоПоступления = Новый Соответствие;
	ВидРеализацииПоПоступления.Вставить(ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийПоступлениеТоваровУслугОборудование(),
										ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийРеализацияТоваровОборудование());
	ВидРеализацииПоПоступления.Вставить(ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийПоступлениеТоваровУслугПокупкаКомиссия(),
										ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийРеализацияТоваровПродажаКомиссия());
	ВидРеализацииПоПоступления.Вставить(ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийПоступлениеТоваровУслугТовары(),
										ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийРеализацияТоваровТовары());
	ВидРеализацииПоПоступления.Вставить(ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийПоступлениеТоваровУслугУслуги(),
										ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийРеализацияТоваровУслуги());
	
										
	ВидОперацииРеализации = ВидРеализацииПоПоступления[ВидОперацииПоступления];
	Если ВидОперацииРеализации <> Неопределено Тогда
		Возврат ВидОперацииРеализации;
	КонецЕсли;
	
	Возврат ВзаиморасчетыВстраиваниеУХКлиентСервер.ВидыОперацийРеализацияТоваровПустаяСсылка();
КонецФункции

#КонецОбласти

#Область ОповещенияОнлайн

Процедура ОтправитьРасхожденияВГО(Настройки = Неопределено) Экспорт
	
	ТекущаяДата = ТекущаяДата();
	
	Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
	
	Отбор = Новый Структура("Период,ПланСчетов");
	Отбор.Вставить("Период", 			Новый СтандартныйПериод(НачалоМесяца(ТекущаяДата), КонецМесяца(ТекущаяДата)));
	Отбор.Вставить("ПланСчетов", 		Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("Хозрасчетный"));
	Отбор.Вставить("ПериодСценария",	Отбор.Период);//для шаблона письма
	
	ПочтовыеАдресаВГО = Константы.РольИсполнительВГО.АдресаОтветственныхОрганизаций();

	Если ПочтовыеАдресаВГО.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацииДляОтправки = Новый СписокЗначений;
	ОрганизацииДляОтправки.ЗагрузитьЗначения(ПочтовыеАдресаВГО.ВыгрузитьКолонку("Организация"));
	
	СКД = Отчеты.СверкаВГО.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	СКД.НаборыДанных.СверкаВГО.Запрос = Отчеты.СверкаВГО.ТекстЗапроса_Отчет(Ложь, Ложь);
	
	КомпоновщикСКД = ПолучитьКомпоновщикРасхождений(СКД);
	
	НастройкиСКД = ПолучитьНастройкиОрганизацииСРасхождениямиТУ(КомпоновщикСКД, Отбор, ОрганизацииДляОтправки);
	Организации = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(СКД, НастройкиСКД,,,,,, Новый ТаблицаЗначений);

	НастройкиСКД = ПолучитьНастройкиРасхожденияПоОрганизацииТУ(КомпоновщикСКД, Отбор, ОрганизацииДляОтправки);
	
	Для каждого Организация Из Организации Цикл
	
		 ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиСКД.Отбор, "Организация", Организация.Организация);
		 
		 Отбор.Вставить("Организация", Организация.Организация);
		 
		 ТабДок = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(СКД, НастройкиСКД,,,,,, Новый ТабличныйДокумент);
		 Адреса = ПочтовыеАдресаВГО.Скопировать(Новый Структура("Организация", Организация.Организация));
		 
		 СформироватьПисьмоОРасхождении(Адреса, Отбор, Отправитель, ТабДок);
		 
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКомпоновщикРасхождений(СКД)

	ИДН = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД); 
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;// компоновщик нужен для повторного получения настроек
	КомпоновщикНастроек.Инициализировать(ИДН);
	КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
	
	КонтекстФормы = Новый Структура("Элементы", Новый Массив);
	ОтчетыПереопределяемый.ПередЗагрузкойВариантаНаСервере(КонтекстФормы, КомпоновщикНастроек.Настройки);
	
	Возврат КомпоновщикНастроек;

КонецФункции

Функция ПолучитьНастройкиОрганизацииСРасхождениямиТУ(КомпоновщикСКД, Отбор, Организации = Неопределено)
	
	НастройкиСКД = КомпоновщикСКД.ПолучитьНастройки();
	
	НеРавно = ВидСравненияКомпоновкиДанных.НеРавно;
	
	ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиСКД, "Период", 						Отбор.Период);
	ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиСКД, "ПланСчетов", 					Отбор.ПланСчетов);
	ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиСКД, "ВыводитьНаименованиеСчета",	Ложь);
	
	ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиСКД.Отбор, "ОстаткиОбороты",	Истина, , Ложь);
	ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиСКД.Отбор, "Расхождение", 	0, НеРавно, Ложь);
	
	Если ЗначениеЗаполнено(Организации) Тогда
		ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиСКД.Отбор, "Организация", Организации);
	КонецЕсли;
	
	НастройкиСКД.Структура.Очистить();
	ТиповыеОтчетыУХ.ДобавитьГруппировкуСтруктуры(НастройкиСКД, "Организация");
	
	Расположение = РасположениеИтоговКомпоновкиДанных.Нет;
	НастройкиСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", Расположение);
	НастройкиСКД.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", Расположение);
	
	Возврат НастройкиСКД;

КонецФункции

Функция ПолучитьНастройкиРасхожденияПоОрганизацииТУ(КомпоновщикСКД, Отбор, Организации = Неопределено)

	НастройкиСКД = КомпоновщикСКД.ПолучитьНастройки();
	
	НеРавно = ВидСравненияКомпоновкиДанных.НеРавно;
	
	ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиСКД, "Период", 						Отбор.Период);
	ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиСКД, "ПланСчетов", 					Отбор.ПланСчетов);
	ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиСКД, "ВыводитьНаименованиеСчета",	Ложь);
	
	НастройкиСКД.Отбор.Элементы.Очистить();
	
	ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиСКД.Отбор, "Расхождение", 	0, НеРавно);
		
	Возврат НастройкиСКД;

КонецФункции

Процедура ОповеститьОРасхождениях(Отбор, ТекстОшибки = "", флОтладка = Ложь)

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПорталВГО") Тогда
		Возврат;// портал не используется
	КонецЕсли;
	
	Если Не Константы.ОповеститьПриВозникновенииРасхожденияВГО.Получить() Тогда
		Возврат; // не оповещать
	КонецЕсли;
	
	Если Отбор.Свойство("Сценарий") И Отбор.Свойство("ПериодСценария") Тогда
		ОповеститьОРасхожденияхУОП(Отбор, ТекстОшибки, флОтладка);
		Возврат;
	КонецЕсли;
	
	Построитель = Новый ПостроительЗапроса(ТекстЗапроса_УопВГО());
	Запрос = Построитель.ПолучитьЗапрос();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОтборУОП = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Отбор);
		ЗаполнитьЗначенияСвойств(ОтборУОП, Выборка);
		Если Выборка.Количество() = 1 Тогда // фоновое не требуется
			
			ОповеститьОРасхожденияхУОП(ОтборУОП, ТекстОшибки, флОтладка);
			
			Продолжить;
		КонецЕсли;	
			
		Параметры = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОтборУОП);
		Параметры.Добавить(ТекстОшибки);
		Параметры.Добавить(флОтладка);
		
		НаименованиеЗадания = НСтр("ru = 'Оповещения о расхождениях ВГО <%1> <%2>'", 
									ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
		КлючЗадания = НаименованиеЗадания;
		
		ФоновыеЗадания.Выполнить("СверкаВГОУХ.ОповеститьОРасхожденияхУОП", Параметры, КлючЗадания, НаименованиеЗадания);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОповеститьОРасхожденияхУОП(Отбор, ТекстОшибки = "", флОтладка = Ложь) Экспорт
	
	ПочтовыеАдресаВГО = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(Отбор.Сценарий, Отбор.ПериодСценария, , Истина);
	ПочтовыеАдресаВГО.Свернуть("Организация,Email");

	ИмяПериодСценария = "ПериодСценария";
	
	ТекстЗапроса = ТекстЗапроса_РасхожденияВГО(Отбор, "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отправитель", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Получатель", "ИСТИНА");
	
	Если ЗначениеЗаполнено(ИмяПериодСценария) Тогда
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПериодСценария", "&" + ИмяПериодСценария);
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, Отбор);
	Запрос.УстановитьПараметр("Организация", ПочтовыеАдресаВГО.ВыгрузитьКолонку("Организация"));
	
	ТабРасхождения = Запрос.Выполнить().Выгрузить();
	ТабРасхождения.Индексы.Добавить("Организация");
	
	ТабОрганизации = ТабРасхождения.Скопировать(, "Организация");
	ТабОрганизации.Свернуть("Организация");
	
	Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
	
	Для каждого СтрокаТаб Из ТабОрганизации Цикл
		
		ПочтовыеАдресаОрганизации = ПочтовыеАдресаВГО.НайтиСтроки(СтрокаТаб.Организация);
		Если ПочтовыеАдресаОрганизации.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТабОрганизациии	= ТабРасхождения.Скопировать(Новый Структура("Организация", СтрокаТаб.Организация));
		
		ПараметрыОтчета = Отбор;
		ТабДокумент = СформироватьПечатнуюФормуРасхождений(ПараметрыОтчета, ТабОрганизациии);
	
		СформироватьПисьмоОРасхождении(ПочтовыеАдресаОрганизации, Отбор, Отправитель, ДвоичныеДанныеИзТабДок(ТабДокумент));
	
	КонецЦикла;
		
КонецПроцедуры	

Функция ДвоичныеДанныеИзТабДок(ТабДок)

	ПотокФайла = Новый ПотокВПамяти();
	ТабДок.Записать(ПотокФайла);
	
	Возврат ПотокФайла.ЗакрытьИПолучитьДвоичныеДанные();

КонецФункции

Процедура ОповеститьПоПочте(Сценарий, ПериодСценария, ТЗПериметрСверки, ПараметрыОтчета, Этап, флЭтоЭтап, ТабРасхождений)
	
	// В пределах управлений периодом заданы отвественные за сверку в матрице полномочий
	// Формируем им письма для отправки
	ТабРасхождений.Свернуть("Организация,Контрагент,СторонаСверки,РазделВГО,
	|ВалютаВзаиморасчетов,ВалютаОтчета",
	"СуммаОрганизации,СуммаКонтрагента,СуммаРасхождения");
	
	ОтборОрг = Новый Структура("Организация");
	
	ПочтовыеАдресаОрганизации = СверкаВГОУХ.ПочтаЛицОтветственныхЗаСверку(Сценарий, ПериодСценария, , Истина);
	ПочтовыеАдресаОрганизации.Свернуть("Организация,Email");
	
	Для Каждого ПериметрСверки Из ТЗПериметрСверки Цикл
		ГлавнаяОрганизация = ПериметрСверки.Организация;
		
		Для Каждого Организация_ Из ПериметрСверки.мОрганизацииДляРассылки Цикл
			ОтборОрг.Организация = Организация_;
			мСтрокРасхождений = ТабРасхождений.НайтиСтроки(ОтборОрг);
			Если мСтрокРасхождений.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			мПочтовыеАдреса = ПочтовыеАдресаОрганизации.НайтиСтроки(ОтборОрг);
			Если мПочтовыеАдреса.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТабДокумент = Новый ТабличныйДокумент;
			ЗаполнитьЗначенияСвойств(ПараметрыОтчета, мСтрокРасхождений[0]);
			ПараметрыОтчета.ВалютаОтчета = НСтр("ru = 'Валюта взаиморасчетов'"); // не указываем конкретную валюту
			ТабДокумент = СформироватьПечатнуюФормуРасхождений(ПараметрыОтчета, ТабРасхождений);
			ПолноеИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
			ТабДокумент.Записать(ПолноеИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS);
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Для Каждого СтрокаПочты Из ПочтовыеАдресаОрганизации Цикл
				Письмо.Получатели.Добавить(СтрокаПочты.Email);
			КонецЦикла;
			Письмо.Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();
			
			ШаблонСообщения = 
			НСтр("ru = 'Период: %1 <BR>
			|Сценарий: %2 <BR>
			|%3 %4 <BR> 
			|Организация: %5 находится под вашей ответственностью.<BR>
			|Перечень контрагентов и расхождений см. в приложении к письму.'");
			
			Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(
			НСтр("ru = 'Обнаружены расхождения взаиморасчетов с внутригрупповыми контрагентами!'"), 
			СтрШаблон(ШаблонСообщения, 
			ПериодСценария, 
			Сценарий, 
			?(флЭтоЭтап, НСтр("ru = 'Этап процесса: '"), НСтр("ru = 'Версия регламента: '")),
			Этап,
			Организация_)
			),
			ТипТекстаПочтовогоСообщения.HTML);
			Письмо.Тема = НСтр("ru = 'Обнаружены расхождения взаиморасчетов для организации '")
			+ Организация_ + ?(флЭтоЭтап, НСтр("ru = ' этап '"), НСтр("ru = ' версия регалмента '")) + Этап;
			Письмо.Вложения.Добавить(ПолноеИмяВременногоФайла, НСтр("ru = 'Расхождения '") + Организация_ + ".xls");	
			УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Этап);
			
			ТабДокумент = Неопределено;
			Письмо = Неопределено;
			УдалитьФайлы(ПолноеИмяВременногоФайла);
			
		КонецЦикла; // Организации периметра
	КонецЦикла; // Периметры
	
КонецПроцедуры

Функция СформироватьПисьмоОРасхождении(ПочтовыеАдресаОрганизации, Отбор, Отправитель, Вложение)

	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Для Каждого СтрокаПочты Из ПочтовыеАдресаОрганизации Цикл
		Письмо.Получатели.Добавить(СтрокаПочты.АдресЭП);
	КонецЦикла;
	
	Письмо.Отправитель = Отправитель;
		
	ШаблонСообщения = 
	НСтр("ru = 'Период: %1 <BR>
	|Организация <%2> находится под вашей ответственностью.<BR>
	|Перечень контрагентов и расхождений см. в приложении к письму.'");
	
	Если Отбор.Свойство("Сценарий") Тогда
		
		ШаблонСообщения = 
		СтрШаблон(НСтр("ru = 'Сценарий: %1 <BR>'"), Отбор.Сценарий)
		+ Символы.ПС
		+ ШаблонСообщения;
	
	КонецЕсли;
	
	ЗаголовокПисьма = НСтр("ru = 'Обнаружены расхождения взаиморасчетов с внутригрупповыми контрагентами.'");
	СодержаниеПисьма = СтрШаблон(ШаблонСообщения, Отбор.ПериодСценария, Отбор.Организация);
	ТекстПисьма = УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ЗаголовокПисьма, СодержаниеПисьма);
	
	Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
	
	Письмо.Тема = НСтр("ru = 'Обнаружены расхождения взаиморасчетов для организации '") + Отбор.Организация;
	
	ВложениеПисьма = Вложение;
	Если ТипЗнч(Вложение) = Тип("ТабличныйДокумент") Тогда
		
		Поток = Новый ПотокВПамяти;
		Вложение.Записать(Поток, ТипФайлаТабличногоДокумента.XLSX);
		ВложениеПисьма = Поток.ЗакрытьИПолучитьДвоичныеДанные();
		
	КонецЕсли;
	
	Письмо.Вложения.Добавить(ВложениеПисьма, НСтр("ru = 'Расхождения '") + Отбор.Организация + ".xls");	
	
	УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Письмо.Тема);	

КонецФункции

Функция ТекстЗапроса_УопВГО()

	Возврат
	"ВЫБРАТЬ
	|	т.Ссылка КАК УОП,
	|	т.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ втУОП
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК т
	|ГДЕ
	|	т.Проведен
	|	И НЕ т.ПериодЗакрыт
	|	И т.ВерсияОрганизационнойСтруктуры.ШаблонСверкиВГО = &ШаблонСверкиВГО
	|{ГДЕ
	|	т.Сценарий.*,
	|	т.ПериодСценария.* КАК ПериодРодитель}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Сценарии КАК Сценарий,
	|	т.Периоды КАК ПериодСценария
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУОП КАК втУОП
	|		ПО т.Сценарии = втУОП.Сценарий
	|			И т.УправлениеПериодомСценария = втУОП.УОП
	|{ГДЕ
	|	т.Периоды.* КАК ПериодСценария}
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.Сценарии,
	|	т.Периоды.ДатаОкончания УБЫВ";	

КонецФункции

#КонецОбласти

#Область ЗапросТекущиеРасхожденияВГО

Функция ТекстЗапроса_РасхожденияВГО(Параметры = Неопределено, ПараметрОрганизация = Неопределено, ПараметрКонтрагент = Неопределено) Экспорт
	
	Если Параметры = Неопределено Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	Параметры.Вставить("АналитикиВГО", ИспользуемыеАналитики(Параметры));
	
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(ТекстЗапроса_ПериодыСценария());
	ТекстЗапроса.Добавить(ТекстЗапроса_Регламенты());
	
	ТекстЗапроса.Добавить(ТекстЗапроса_Контрагенты());
	ТекстЗапроса.Добавить(ТекстЗапроса_Организации());
	
	ТекстЗапроса.Добавить(ТекстЗапроса_ШаблонСверки());	
	ТекстЗапроса.Добавить(ТекстЗапроса_РазделыСверки());		
	ТекстЗапроса.Добавить(ТекстЗапроса_ПоказателиОтчетов());
	ТекстЗапроса.Добавить(ТекстЗапроса_ВидыОтчетов());
	
	ТекстЗапроса.Добавить(ТекстЗапроса_ИспользуемыеВерсии());
	ТекстЗапроса.Добавить(ТекстЗапроса_КурсыВалют());
	ТекстЗапроса.Добавить(ТекстЗапроса_ИспользуемыеЗПО(Параметры));

	ТекстЗапроса.Добавить(ТекстЗапроса_Урегулирования());
	ТекстЗапроса.Добавить(ТекстЗапроса_Комментарии());
	
	ТекстЗапроса.Добавить(ТекстЗапроса_СверкаВГО());
	
	Разделитель = ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	ЗаменыВГО = ПолучитьЗаменыЗапросаВГО(Параметры, ПараметрОрганизация, ПараметрКонтрагент);
	
	Возврат ЗаменитьПараметрыЗапроса(СтрСоединить(ТекстЗапроса, Разделитель), ЗаменыВГО);
	
КонецФункции

Функция ТекстЗапроса_ОтчетВГО(Параметры = Неопределено, ИмяПериодСценария = "", ПараметрОрганизации = "", ПараметрКонтрагент = "") Экспорт
	
	ТекстЗапроса = ТекстЗапроса_РасхожденияВГО(Параметры, ПараметрОрганизации, ПараметрКонтрагент);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отправитель", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Получатель", "ИСТИНА");
	
	Если ЗначениеЗаполнено(ИмяПериодСценария) Тогда
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПериодСценария", "&" + ИмяПериодСценария);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
 
КонецФункции

Функция ТекстЗапроса_РасшифровкаВГО(Параметры = Неопределено, ИмяПериодСценария = "") Экспорт
	
	ТекстЗапроса = ТекстЗапроса_РасхожденияВГО(Параметры, "");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Отправитель", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Получатель", "ИСТИНА");
	
	Если ЗначениеЗаполнено(ИмяПериодСценария) Тогда
	    ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПериодСценария", "&" + ИмяПериодСценария);
	КонецЕсли;
	
	Возврат ТекстЗапроса;
 
КонецФункции

Функция ТекстЗапроса_ОтборВГО(НастройкиСКД, ИмяПоля = "Организация") Экспорт 

	Если ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(НастройкиСКД.Отбор, ИмяПоля).Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК т
	|{ГДЕ
	|	т.Ссылка.* КАК Организация}";

	Возврат СтрЗаменить(ТекстЗапроса, "Организация", ИмяПоля);
	
КонецФункции

Функция ТекстЗапроса_ВозможныеДопАналитики() Экспорт

	Возврат
	"ВЫБРАТЬ
	|	т.ВидАналитики КАК ВидАналитики,
	|	т.Имя КАК Имя,
	|	МАКСИМУМ(т.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.ГруппыАналитикСверкиВГО.Аналитики КАК т
	|ГДЕ
	|	НЕ т.Имя В (""Организация"", ""Контрагент"", ""Валюта"")
	|
	|СГРУППИРОВАТЬ ПО
	|	т.Имя,
	|	т.ВидАналитики";

КонецФункции

#Область ЗаменыВГО

Функция ПолучитьЗаменыЗапросаВГО(Параметры, ПараметрОрганизация, ПараметрКонтрагент)

	ЗаменыВГО = Новый Соответствие;
		
	ТекущийОтбор = Новый Структура;
	Если Параметры <> Неопределено Тогда
		ТекущийОтбор = ПолучитьТекущийОтбор(Параметры);
	КонецЕсли;
	
	ТекстОтбора = ?(ТекущийОтбор.Свойство("РазделВГО"), "РазделыСверкиВГО.Ссылка В (&РазделВГОПарам)", "ИСТИНА");
	ЗаменыВГО.Вставить("&УсловиеРаздел", ТекстОтбора);

	ПоВерсии = ?(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметры, "ПоВерсии", Ложь), "ИСТИНА", "ЛОЖЬ");
	ЗаменыВГО.Вставить("&ПоВерсии", ПоВерсии);
	
	ЗаменыОрганизацийВГО(ЗаменыВГО, ПараметрОрганизация, ПараметрКонтрагент);
	ЗаменыПорталаВГО(ЗаменыВГО, ТекущийОтбор);
	
	ЗаменыДопАналитикаВГО(ЗаменыВГО, ТекущийОтбор, Параметры);
	
	Возврат ЗаменыВГО;
	
КонецФункции

Функция ЗаменыДопАналитикаВГО(ЗаменыВГО, ТекущийОтбор, Параметры)

	Замены = ПолучитьЗамены(Параметры);

	ЗаменаДоп_СводСгруппировать = "ВЫРАЗИТЬ(т.ДопАналитикаРасхожденияСвод КАК Справочник.ДопАналитикаРасхожденийВГО)";
	ЗаменаДоп_Сгруппировать = "ВЫРАЗИТЬ(т.ДопАналитикаРасхождения КАК Справочник.ДопАналитикаРасхожденийВГО)";
	
	//ТекстЗапроса_СводЗПО
	//пример: "т.Аналитика1 КАК Аналитика1, т.Аналитика2 КАК Аналитика2, NULL"
	ЗаменыВГО.Вставить("&ЗаменаДоп_Выбор", Замены.ЗаменаДоп_Выбор);
	
	//пример: "т.Аналитика1, т.Аналитика2"
	ЗаменыВГО.Вставить(ЗаменаДоп_СводСгруппировать, Замены.ЗаменаДоп_СводСгруппировать);
	
	//ТекстЗапроса_СверкаВГО
	//пример: "т.Аналитика1 КАК Проект, т.Аналитика2.Номер КАК НомерДоговора"
	ЗаменыВГО.Вставить("&ЗаменаДоп_Покупатель", Замены.ЗаменаДоп_Покупатель);//получение из вт
	//пример: "ВЫБОР КОГДА ИСТИНА ТОГДА т.Аналитика1 КОНЕЦ КАК Проект, 
	//ВЫБОР КОГДА втРазделыСверки.КодИД = ""КодОперанда"" ТОГДА т.Аналитика1.Номер КОНЕЦ КАК НомерДоговора"
	ЗаменыВГО.Вставить("&ЗаменаДоп_Продавец", Замены.ЗаменаДоп_Продавец);//получение из вт
	
	//ТекстЗапроса_СверкаВГО
	//пример: "т.Проект КАК Проект, т.НомерДоговора КАК НомерДоговора"
	ЗаменыВГО.Вставить("&ЗаменаДоп_ДопАналитики", Замены.ЗаменаДоп_ДопАналитики);//сгруппировать
	//пример: "т.Проект, т.НомерДоговора"
	ЗаменыВГО.Вставить(ЗаменаДоп_Сгруппировать, Замены.ЗаменаДоп_Сгруппировать);//сгруппировать
	
КонецФункции

Функция ИспользуемыеАналитики(Параметры = Неопределено)
	
	Результат = Новый СписокЗначений;
	Если Параметры = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Поля = ?(Параметры.Свойство("ИменаГруппировок"), Параметры.ИменаГруппировок, "");
	Если Параметры.Свойство("ИменаОтборов") Тогда
		Поля = Поля + ", " + Параметры.ИменаОтборов;
	КонецЕсли;
	
	Если (Поля = "") Или СтрНайти(Поля, "АналитикиВГО") = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ИменаАналитикШаблонаВГО = Новый СписокЗначений;
	
	Для каждого Поле Из СтрРазделить(Поля, ",", Ложь) Цикл
		
		Если Не СтрНачинаетсяС(Поле, "АналитикиВГО.") Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмя = Сред(Поле, СтрДлина("АналитикиВГО.")+1);
		БазоваяАналитика = ИмяБазовойАналитики(ПолноеИмя);
		
		Если СтрНайти(БазоваяАналитика, "_") = 0 Тогда
			Результат.Добавить(БазоваяАналитика, ПолноеИмя);//аналитика ЗПО
			Продолжить;	
		КонецЕсли;
		
		ИменаАналитикШаблонаВГО.Добавить(Лев(БазоваяАналитика, СтрНайти(БазоваяАналитика, "_")-1), ПолноеИмя);
		
	КонецЦикла;
	
	Если ИменаАналитикШаблонаВГО.Количество() Тогда
		
		Запрос = Новый Запрос(ТекстЗапроса_ДопАналитики());//"Аналитика5", "Аналитика5.Номер", "ИД001"
		Запрос.УстановитьПараметр("ИменаАналитикШаблонаВГО", ИменаАналитикШаблонаВГО.ВыгрузитьЗначения());
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			БазоваяАналитика = ИмяБазовойАналитики(Выборка.ПутьПоля);
			СтрокаВГО = ИменаАналитикШаблонаВГО.НайтиПоЗначению(Выборка.ИмяАналитикиВГО);
			
			//полный путь: Аналитика5.Номер/НомерДоговора_1/ИД001
			ПолныйПуть = СтрШаблон("%1/%2/%3", Выборка.ПутьПоля, СтрокаВГО.Представление, Выборка.КодИД);
			
			Результат.Добавить(БазоваяАналитика, ПолныйПуть);
			
		КонецЦикла; 
			
	КонецЕсли;
	
	Возврат Результат;
		
КонецФункции

// для "Аналитика5.Номер" вернет "Аналитика5"
Функция ИмяБазовойАналитики(ПутьПоля)
	
	ПозицияТочки = СтрНайти(ПутьПоля, ".");
	Возврат ?(ПозицияТочки = 0, ПутьПоля, Лев(ПутьПоля, ПозицияТочки - 1));

КонецФункции

Функция ПолучитьЗамены(Параметры)
	
	Замены = Новый Структура(
	"ЗаменаДоп_Выбор, 
	|ЗаменаДоп_СводСгруппировать, 
	|ЗаменаДоп_Покупатель, 
	|ЗаменаДоп_Продавец, 
	|ЗаменаДоп_ДопАналитики,
	|ЗаменаДоп_Сгруппировать",
	"NULL", "NULL", "NULL", "NULL", "NULL", "NULL", "NULL");
	
	Если Параметры.АналитикиВГО.Количество() = 0 Тогда
		Возврат Замены;
	КонецЕсли;
	
	АналитикиИсточники = Параметры.АналитикиВГО.ВыгрузитьЗначения();
	АналитикиИсточники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(АналитикиИсточники);
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(АналитикиИсточники, "Показатель");//Показатель - предопределенное поле
	ЗаполнитьЗамены(Замены.ЗаменаДоп_Выбор, Замены.ЗаменаДоп_СводСгруппировать, АналитикиИсточники);
	
	//пример: ВЫБОР втРазделыСверки.КодИД КОГДА ""ДКЗ01"" ТОГДА т.Аналитика2.Код КОНЕЦ КАК НомерДоговора
	ШаблонВЫБОР = "ВЫБОР %1 КОНЕЦ КАК %2";
	ШаблонКОГДАТОГДА = "КОГДА втРазделыСверки.КодИД = ""%1"" ТОГДА т.%2";
	
	Доп = Новый Соответствие;
	АналитикиИсточники = Новый Массив;
	Для каждого стр Из Параметры.АналитикиВГО Цикл
		
		ПолеИсточник = стр.Значение;
		Кол = Неопределено;
		Если СтрНайти(стр.Представление, "/") > 0 Тогда
			Кол = СтрРазделить(стр.Представление, "/");
			ПолеИсточник = Кол[1];			
		КонецЕсли;
		
		АналитикиИсточники.Добавить(ПолеИсточник);
		
		Если Доп.Получить(ПолеИсточник) = Неопределено Тогда			
			Доп.Вставить(ПолеИсточник, Новый Массив);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(кол) Тогда
			Доп[ПолеИсточник].Добавить(СтрШаблон(ШаблонКОГДАТОГДА, СокрЛП(кол[2]), кол[0]));
		Иначе			
			Доп[ПолеИсточник].Добавить("КОГДА ИСТИНА ТОГДА т." + стр.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	АналитикиИсточники = ОбщегоНазначенияКлиентСервер.СвернутьМассив(АналитикиИсточники);
	ЗаполнитьЗамены(Замены.ЗаменаДоп_ДопАналитики, Замены.ЗаменаДоп_Сгруппировать, АналитикиИсточники);
	
	ЗапросПоля = Новый Массив;
	Для каждого ДопПоле Из Доп Цикл
		ЗапросПоля.Добавить(СтрШаблон(ШаблонВЫБОР, СтрСоединить(ДопПоле.Значение, " "), ДопПоле.Ключ));
	КонецЦикла;
	ЗапросПоля.Добавить("NULL");
	
	Замены.ЗаменаДоп_Покупатель = СтрСоединить(ЗапросПоля, ", ");
	Замены.ЗаменаДоп_Продавец = Замены.ЗаменаДоп_Покупатель;
	
	Возврат Замены;

КонецФункции

Функция ЗаполнитьЗамены(ЗаменаПоле = "т.А1 КАК А1, т.А2 КАК А2", ЗаменаГруппировка = "т.А1, т.А2", МассивИмен)
	
	ШаблонПоле = "т.%1 КАК %1";
	ШаблонГр = "т.%1";
	
	ПоляАА = Новый Массив;
	ПоляА = Новый Массив;
	Для каждого ИмяПоля Из МассивИмен Цикл
		ПоляАА.Добавить(СтрШаблон("т.%1 КАК %1", ИмяПоля));
		ПоляА.Добавить(СтрШаблон("т.%1", ИмяПоля));		
	КонецЦикла;
	ПоляАА.Добавить("NULL");
	ПоляАА.Добавить("NULL");
	
	ЗаменаПоле = СтрСоединить(ПоляАА, ", ");
	ЗаменаГруппировка = СтрСоединить(ПоляА, ", ");
	Если ЗаменаГруппировка = "" Тогда
		ЗаменаГруппировка = "NULL";
	КонецЕсли;
	
КонецФункции

Функция ЗаменыПорталаВГО(ЗаменыВГО, ТекущийОтбор)

	ТекстОО = "ИСТИНА";
	ТекстКО = "ИСТИНА";
	ТекстКК = "ИСТИНА";
	ТекстОК = "ИСТИНА";
	
	Если ТекущийОтбор.Свойство("Организация") Тогда
		ТекстОО = "т.ОрганизацияВГО = &ОрганизацияПарамФ";
		ТекстКО = "т.КонтрагентВГО = &ОрганизацияПарамФ";
	ИначеЕсли ТекущийОтбор.Свойство("ОрганизацияПарам") Тогда
		ТекстОО = "т.ОрганизацияВГО = &ОрганизацияПарам";
		ТекстКО = "т.КонтрагентВГО = &ОрганизацияПарам";
	КонецЕсли;
	
	Если ТекущийОтбор.Свойство("Контрагент") Тогда
		ТекстКК = "т.КонтрагентВГО = &КонтрагентПарамФ";
		ТекстОК = "т.ОрганизацияВГО = &КонтрагентПарамФ";
	ИначеЕсли ТекущийОтбор.Свойство("КонтрагентПарам") Тогда
		ТекстКК = "т.КонтрагентВГО = &КонтрагентПарам";
		ТекстОК = "т.ОрганизацияВГО = &КонтрагентПарам";
	КонецЕсли;
	
	ЗаменыВГО.Вставить("&ОтборОрганизация_Организация",	ТекстОО);
	ЗаменыВГО.Вставить("&ОтборКонтрагент_Контрагент",	ТекстКК);
	ЗаменыВГО.Вставить("&ОтборОрганизация_Контрагент", 	ТекстОК);
	ЗаменыВГО.Вставить("&ОтборКонтрагент_Организация", 	ТекстКО);

	Если ТекущийОтбор.Свойство("СторонаСверки") Тогда
		ЗаменыВГО.Вставить("&ОтборСторонаСверки", "(т.СторонаСверки = ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)) = &СторонаСверкиПарам");
	Иначе 
		ЗаменыВГО.Вставить("&ОтборСторонаСверки", "ИСТИНА");	
	КонецЕсли;
	
КонецФункции

Функция ЗаменыОрганизацийВГО(ЗаменыВГО, ПараметрОрганизация, ПараметрКонтрагент)
	
	ТекстОтбораОрганизации = "&ОрганизацииОтбораПарамФ";
	Если ПараметрОрганизация <> Неопределено Тогда
		ТекстОтбораОрганизации = ПараметрОрганизация;
	КонецЕсли;
	
	ТекстОтбораКонтрагент = "";
	Если ПараметрКонтрагент <> Неопределено Тогда
		ТекстОтбораКонтрагент = ПараметрКонтрагент;
	КонецЕсли;
	
	Если ТекстОтбораОрганизации = "" Тогда //все организации со всеми контрагентами
		
		//СтрЗаменить(ТекстЗапроса, "&ОрганизацииОтбораПарамФ", "&ОрганизацияПарам, &КонтрагентПарам")
		ЗаменыВГО.Вставить("&ТекстОтбораОрганизации", "ИСТИНА");
		ЗаменыВГО.Вставить("&ЭтоОрганизацияВГО", 		"ИСТИНА");
				
	Иначе 
		
		Если СтрНачинаетсяС(ТекстОтбораОрганизации, "&") Тогда//вызов из портала, есть общий отбор
			
			ТекстОтбор = СтрШаблон("т.ОрганизационнаяЕдиница В (%1)", ТекстОтбораОрганизации);
		 	ЗаменыВГО.Вставить("&ТекстОтбораОрганизации", ТекстОтбор); 
			
			ТекстОтбор = СтрШаблон("т.ОрганизационнаяЕдиница В (%1)", ТекстОтбораОрганизации);
			ЗаменыВГО.Вставить("&ЭтоОрганизацияВГО", ТекстОтбор);
			
		Иначе // вызов из отчетов, отборы СКД	
			
			ТекстОтбор = СтрШаблон("т.ОрганизационнаяЕдиница В (%1)", ТекстОтбораОрганизации);
			ЗаменыВГО.Вставить("&ЭтоОрганизацияВГО", ТекстОтбор);
			ЗаменыВГО.Вставить("&ТекстОтбораОрганизации", "ИСТИНА");
		
		КонецЕсли;
				
	КонецЕсли;
		
	Если ТекстОтбораКонтрагент = "" Тогда
		ЗаменыВГО.Вставить("&ЭтоКонтрагентВГО", "ИСТИНА");
	Иначе	
		ТекстОтбор = СтрШаблон("т.ОрганизационнаяЕдиница В (%1)", ТекстОтбораКонтрагент);
		ЗаменыВГО.Вставить("&ЭтоКонтрагентВГО", ТекстОтбор);
	КонецЕсли;
	
КонецФункции

Функция ЗаменитьПараметрыЗапроса(ТекстЗапроса, ЗаменыПараметров)

	Для каждого ЗаменаПараметров Из ЗаменыПараметров Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ЗаменаПараметров.Ключ, ЗаменаПараметров.Значение);
	КонецЦикла;

	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьТекущийОтбор(Параметры)

	Отбор = Новый Структура("Сценарий, ПериодСценария, ОтборПоРегламенту");
	
	ЗаполнитьЗначенияСвойств(Отбор, Параметры);
	
	Отбор.Вставить("ОтборПоРегламенту", Ложь);
	Отбор.Вставить("ПериодОтчета", 		Отбор.ПериодСценария);
	
	Если Параметры.Свойство("АдресТекСтроки") Тогда		
		Для Каждого РеквА Из Параметры.АдресТекСтроки Цикл
			Если РеквА.Имя = "Организация" Или РеквА.Имя = "Контрагент" Тогда
				Отбор.Вставить(РеквА.Имя + "Парам", РеквА.Значение);
			Иначе 
				Отбор.Вставить(РеквА.Имя, РеквА.Значение);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ОрганизацияОтбор") Тогда
		Отбор.Вставить("Организация", Параметры.ОрганизацияОтбор);
	КонецЕсли;
	
	Если Параметры.Свойство("КонтрагентОтбор") Тогда
		Отбор.Вставить("Контрагент", Параметры.КонтрагентОтбор);
	КонецЕсли;
	
	Возврат Отбор;
	
КонецФункции

Функция ТекстЗапроса_ДопАналитики()

	Возврат
	"ВЫБРАТЬ
	|	ИсточникиВГО.Ссылка КАК РазделВГО,
	|	ИД.Ссылка КАК ИсточникДанных,
	|	ИД.Ссылка.Код КАК КодИД,
	|	ИД.КодАналитики КАК ИмяАналитикиВГО,
	|	ИД.Поле КАК ПутьПоля,
	|	ИсточникиВГО.СпособОпределенияНаправленияУчета КАК СпособОпределенияНаправленияУчета
	|ИЗ
	|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК ИсточникиВГО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИД
	|		ПО ИсточникиВГО.ИсточникДанных = ИД.Ссылка
	|ГДЕ
	|	ИД.Ссылка.ПотребительРасчета ССЫЛКА Справочник.РазделыСверкиВГО
	|	И ИД.Поле ПОДОБНО ""Аналитика%""
	|	И ИД.КодАналитики В(&ИменаАналитикШаблонаВГО)";

КонецФункции

#КонецОбласти

#Область Организации

Функция ТекстЗапроса_Контрагенты()

	Возврат
	"ВЫБРАТЬ
	|	т.Ссылка КАК КонтрагентВГО,
	|	т.ОрганизационнаяЕдиница КАК ОрганизацияВГО,
	|	&ЭтоОрганизацияВГО КАК ЭтоОрганизацияВГО,
	|	&ЭтоКонтрагентВГО КАК ЭтоКонтрагентВГО
	|ПОМЕСТИТЬ втКонтрагенты
	|ИЗ
	|	Справочник.Контрагенты КАК т
	|ГДЕ
	|	т.ОрганизационнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И &ТекстОтбораОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонтрагентВГО,
	|	ЭтоОрганизацияВГО";

КонецФункции

Функция ТекстЗапроса_Организации()

	Возврат
	"ВЫБРАТЬ
	|	МАКСИМУМ(т.КонтрагентВГО) КАК КонтрагентВГО,
	|	т.ОрганизацияВГО КАК ОрганизацияВГО,
	|	МАКСИМУМ(т.ЭтоОрганизацияВГО) КАК ЭтоОрганизацияВГО,
	|	МАКСИМУМ(т.ЭтоКонтрагентВГО) КАК ЭтоКонтрагентВГО
	|ПОМЕСТИТЬ втОрганизации
	|ИЗ
	|	втКонтрагенты КАК т
	|
	|СГРУППИРОВАТЬ ПО
	|	т.ОрганизацияВГО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОрганизацияВГО";

КонецФункции

Функция ТекстЗапроса_ПериодыСценария()

	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Ссылка КАК ПериодСценария
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	Справочник.Периоды КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК п
	|		ПО т.ДатаНачала >= п.ДатаНачала
	|			И т.ДатаОкончания <= п.ДатаОкончания
	|			И (п.Ссылка В (&ПериодСценария))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодСценария";

КонецФункции

Функция ТекстЗапроса_Регламенты() Экспорт

	Возврат
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.УправлениеПериодомСценария КАК УОП,
	|	т.Периоды КАК ПериодСценария,
	|	т.Сценарии КАК Сценарий,
	|	т.ВерсияРегламента КАК Регламент,
	|	т.ВерсияРегламента.ШаблонСверкиВГО КАК ШаблонСверкиВГО,
	|	т.ВерсияРегламента.ШаблонСверкиВГО.ВалютаИтогов КАК ВалютаВГО
	|ПОМЕСТИТЬ втРегламенты
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК т
	|ГДЕ
	|	т.Периоды В
	|			(ВЫБРАТЬ
	|				т.ПериодСценария
	|			ИЗ
	|				втПериоды КАК т)
	|	И т.Сценарии = &Сценарий";

КонецФункции

#КонецОбласти

#Область НастройкиВГО

Функция ТекстЗапроса_ШаблонСверки()

	Возврат
	"ВЫБРАТЬ
	|	РазделыСверкиВГО.Ссылка КАК РазделСверкиВГО,
	|	РазделыСверкиВГО.Ссылка.ПорогСущественности КАК ПорогСущественности,
	|	РазделыСверкиВГО.СпособОпределенияНаправленияУчета = ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоКредит)
	|		ИЛИ НЕ ПоЗнакуОперации.Дебитор КАК ЭтоПродавец,
	|	РазделыСверкиВГО.СпособОпределенияНаправленияУчета = ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ТолькоДебет)
	|		ИЛИ ПоЗнакуОперации.Дебитор КАК ЭтоПокупатель,
	|	РазделыСверкиВГО.ИсточникДанных.Код КАК КодИД,
	|	РазделыСверкиВГО.ИсточникДанных КАК ИсточникДанных
	|ПОМЕСТИТЬ втШаблонСверки
	|ИЗ
	|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГО
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИСТИНА КАК Дебитор
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ЛОЖЬ) КАК ПоЗнакуОперации
	|		ПО (РазделыСверкиВГО.СпособОпределенияНаправленияУчета = ЗНАЧЕНИЕ(Перечисление.СпособОпределенияНаправленияУчета.ПоЗнакуОперации))
	|ГДЕ
	|	НЕ РазделыСверкиВГО.Ссылка.ПометкаУдаления
	|	И РазделыСверкиВГО.Ссылка.Владелец В
	|			(ВЫБРАТЬ
	|				т.ШаблонСверкиВГО
	|			ИЗ
	|				втРегламенты КАК т)
	|	И &УсловиеРаздел";
	
КонецФункции

Функция ТекстЗапроса_РазделыСверки()

	Возврат
	"ВЫБРАТЬ
	|	РазделыСверкиВГО.РазделСверкиВГО КАК РазделСверкиВГО,
	|	РазделыСверкиВГО.КодИД КАК КодИД,	
	|	РазделыСверкиВГО.ПорогСущественности КАК ПорогСущественности,
	|	РазделыСверкиВГО.ЭтоПродавец КАК ЭтоПродавец,
	|	РазделыСверкиВГО.ЭтоПокупатель КАК ЭтоПокупатель,
	|	РазделыСверкиВГО.ИсточникДанных.ГруппаРаскрытияОтбор КАК ГруппаРаскрытияОтбор,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ПоказателиОтчетов.Ссылка КАК Показатель
	|ПОМЕСТИТЬ втРазделыСверки
	|ИЗ
	|	втШаблонСверки КАК РазделыСверкиВГО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО РазделыСверкиВГО.ИсточникДанных.ГруппаРаскрытияОтбор = ПоказателиОтчетов.ГруппаРаскрытия
	|ГДЕ
	|	РазделыСверкиВГО.ИсточникДанных.ГруппаРаскрытияОтбор <> ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	|	И НЕ РазделыСверкиВГО.ИсточникДанных.ПометкаУдаления
	|	И ПоказателиОтчетов.Код В
	|			(ВЫБРАТЬ
	|				т.Поле КАК КодПоказателя
	|			ИЗ
	|				Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК т
	|			ГДЕ
	|				т.Ссылка = РазделыСверкиВГО.ИсточникДанных
	|				И т.АналитикаОперанда = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель";

КонецФункции

Функция ТекстЗапроса_ПоказателиОтчетов()

	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Показатель КАК Показатель,
	|	ВЫБОР ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики1
	|			ТОГДА 0
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики2
	|			ТОГДА 1
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики3
	|			ТОГДА 2
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики4
	|			ТОГДА 3
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики5
	|			ТОГДА 4
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики6
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК НомерЗПО,
	|	ВЫБОР ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникКонтрагенты)
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики1
	|			ТОГДА 1
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики2
	|			ТОГДА 2
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики3
	|			ТОГДА 3
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики4
	|			ТОГДА 4
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики5
	|			ТОГДА 5
	|		КОГДА т.ГруппаРаскрытияОтбор.ВидАналитики6
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерАналитикиКонтрагент
	|ПОМЕСТИТЬ втПоказатели
	|ИЗ
	|	втРазделыСверки КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Показатель,
	|	НомерЗПО";

КонецФункции

Функция ТекстЗапроса_ВидыОтчетов()

	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.ВидОтчета КАК ВидОтчета
	|ПОМЕСТИТЬ втВидыОтчетов
	|ИЗ
	|	втРазделыСверки КАК т";

КонецФункции

#КонецОбласти

#Область ЗПО

Функция ТекстЗапроса_ИспользуемыеВерсии()

	Возврат
	"ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	|	ВерсииЗначенийПоказателей.Организация КАК ОрганизацияВГО,
	|	ВерсииЗначенийПоказателей.Валюта КАК ВалютаОтчета,
	|	ВерсииЗначенийПоказателей.Регистратор КАК Регистратор,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	втОрганизации.ЭтоОрганизацияВГО КАК ЭтоОрганизацияВГО
	|ПОМЕСТИТЬ втВерсии
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизации КАК втОрганизации
	|		ПО ВерсииЗначенийПоказателей.Организация = втОрганизации.ОрганизацияВГО
	|ГДЕ
	|	ВерсииЗначенийПоказателей.ПериодОтчета В
	|			(ВЫБРАТЬ
	|				т.ПериодСценария
	|			ИЗ
	|				втПериоды КАК т)
	|	И ВерсииЗначенийПоказателей.Сценарий В(&Сценарий)
	|	И ВерсииЗначенийПоказателей.Валюта = ВерсииЗначенийПоказателей.ЭкземплярОтчета.ОсновнаяВалюта
	|	И Не ВерсииЗначенийПоказателей.ЧерноваяВерсия
	|	И ВерсииЗначенийПоказателей.ВидОтчета В
	|			(ВЫБРАТЬ
	|				т.ВидОтчета
	|			ИЗ
	|				втВидыОтчетов КАК т)
	|{ГДЕ
	|	ВерсииЗначенийПоказателей.Организация.* КАК ОрганизацияВГО}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Версия,
	|	ЭтоОрганизацияВГО";

КонецФункции

Функция ТекстЗапроса_КурсыВалют()

	Возврат
	"ВЫБРАТЬ
	|	т.Валюта КАК Валюта,
	|	т.Валюта В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			т.ВалютаВГО
	|		ИЗ
	|			втРегламенты КАК т) КАК ЭтоВалютаВГО,
	|	т.Курс КАК Курс,
	|	т.Кратность КАК Кратность
	|ПОМЕСТИТЬ втКурсыВсехВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, ) КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЭтоВалютаВГО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсВалюты.Валюта КАК Валюта,
	|	КурсВалюты.Курс КАК Курс,
	|	КурсВалюты.Кратность КАК Кратность,
	|	КурсВалютыВГО.Курс КАК КурсВГО,
	|	КурсВалютыВГО.Кратность КАК КратностьВГО
	|ПОМЕСТИТЬ втКурсыВалют
	|ИЗ
	|	втКурсыВсехВалют КАК КурсВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКурсыВсехВалют КАК КурсВалютыВГО
	|		ПО (НЕ КурсВалюты.ЭтоВалютаВГО)
	|			И (КурсВалюты.Кратность <> 0)
	|			И (КурсВалютыВГО.ЭтоВалютаВГО)
	|			И (КурсВалютыВГО.Курс <> 0)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта";

КонецФункции

Функция ТекстЗапроса_ИспользуемыеЗПО(Параметры = Неопределено)
	
	ТекстЗапроса = Новый Массив;
	
	ЧислоАналитик = ПараметрыСеанса.ЧислоДопАналитик;
	Если ЗначениеЗаполнено(Параметры) И Параметры.Свойство("ПериодСценария") Тогда
		
		ТекстШаблона = ТекстЗапроса_КэшЗПО();
		
		Кэш = УчетМСФОПовтИспУХ.ПолучитьНомераЗпоВгоПоПериодуСценарию(Параметры.ПериодСценария, Параметры.Сценарий);
		ПроверитьОтсутствиеКэша(Кэш.НомераЗпоВго, Параметры);
		
		Для каждого СтрокаТаб Из Кэш.НомераЗпоВго Цикл
			
			СтрокаНомерЗПО = Строка(СтрокаТаб.НомерЗПО);
			Если СтрокаНомерЗПО = "0" Тогда
				Если Кэш.НомераЗпоВго.Количество() > 1 Тогда
					Продолжить;//ошибка настройки раздела сверки
				Иначе 
					СтрокаНомерЗПО = "5";
				КонецЕсли;
			КонецЕсли;
			
			ТекстТек = СтрЗаменить(ТекстШаблона, "ЗначенияПоказателейОтчетов5", "ЗначенияПоказателейОтчетов" + СтрокаНомерЗПО);
			ТекстТек = СтрЗаменить(ТекстТек, "&НомерЗПО", СтрокаНомерЗПО);
			ТекстТек = СтрЗаменить(ТекстТек, "Аналитика5", "Аналитика" + ?(СтрокаТаб.НомерАналитикиКонтрагент = 0, 1, СтрокаТаб.НомерАналитикиКонтрагент));
			Если ЗначениеЗаполнено(СтрокаТаб.НомерАналитикиВалюта) Тогда
				ТекстТек = СтрЗаменить(ТекстТек, "АналитикаВалюта", "Аналитика" + СтрокаТаб.НомерАналитикиВалюта);
			КонецЕсли;
			ТекстТек = СтрЗаменить(ТекстТек, "&ЗаменаДоп_ЗПО", ПолучитьЗаменаДопЗПО(Параметры.АналитикиВГО, СтрокаТаб.НомерЗПО));
			
			ТекстЗапроса.Добавить(ТекстТек);
			
		КонецЦикла;
		
	Иначе 
		
		ТекстШаблона = ТекстЗапроса_ЗПО();
		
		Для НомерЗПО = 1 По ЧислоАналитик Цикл
			СтрокаНомерЗПО = Строка(НомерЗПО);
			
			ТекстТек = СтрЗаменить(ТекстШаблона, "ЗначенияПоказателейОтчетов6", "ЗначенияПоказателейОтчетов" + СтрокаНомерЗПО);
			Для ПустаяА = НомерЗПО+1 По ЧислоАналитик Цикл
				ТекстТек = СтрЗаменить(ТекстТек, "тЗПО.Аналитика" + ПустаяА, "NULL");
			КонецЦикла;
			ТекстТек = СтрЗаменить(ТекстТек, "&НомерЗПО", СтрокаНомерЗПО);
			
			ТекстЗапроса.Добавить(ТекстТек);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ТекстОбъединить = 
	"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Возврат СтрЗаменить(ТекстЗапроса_СводЗПО(), "втИсточник", СтрШаблон("(%1)", СтрСоединить(ТекстЗапроса, ТекстОбъединить))); 
	
КонецФункции

Функция ПолучитьЗаменаДопЗПО(АналитикиВГО, СтрокаНомерЗПО)

	ПоляЗПО = Новый Массив;
	Если АналитикиВГО.Количество() Тогда
		
		Поля = АналитикиВГО.ВыгрузитьЗначения();
		Поля = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Поля);
		
		ЧислоДопАналитик = ОбщегоНазначенияПовтИспУХ.ЧислоДопАналитик();			
		Для каждого ПолеИсточник Из Поля Цикл
			
			Если ПолеИсточник = "Показатель" Тогда
				Продолжить;
			КонецЕсли;
			
			НомерАналитики = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(СтрЗаменить(ПолеИсточник, "Аналитика", ""));
			Если (НомерАналитики = Неопределено) Или (НомерАналитики <= СтрокаНомерЗПО) Тогда
				ПоляЗПО.Добавить(СтрШаблон("тЗПО.%1 КАК %1", ПолеИсточник));//пример: "тЗПО.Аналитика5 КАК Аналитика5"
			Иначе 
				ПоляЗПО.Добавить("NULL КАК " +ПолеИсточник);//фиктивное для объединения(пример "NULL КАК Аналитика5" для ЗПО4)
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПоляЗПО.Добавить("NULL");//значение заменяемого поля ДопАналитикаРасхождения

	Возврат СтрСоединить(ПоляЗПО, ", ");
	
КонецФункции

Процедура ПроверитьОтсутствиеКэша(НомераЗпоВго, Параметры)
	
	Если НомераЗпоВго.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаб = НомераЗпоВго.Добавить();
	СтрокаТаб.НомерЗПО = 1;
	СтрокаТаб.НомерАналитикиКонтрагент = 0;
	
	ШаблонОшибки = НСтр("ru = 'Не удалось определить настроенные разделы сверки по периоду <%1> и сценарию <%2>'");
	СообщениеОбОшибке = СтрШаблон(ШаблонОшибки, Параметры.ПериодСценария, Параметры.Сценарий);
	ОбщегоНазначения.СообщитьПользователю(СообщениеОбОшибке);
		
КонецПроцедуры

Функция ТекстЗапроса_ЗПО()

	Возврат
	"ВЫБРАТЬ
	|	тЗПО.Версия КАК Версия,
	|	тЗПО.Показатель КАК Показатель,
	|	втВерсии.ОрганизацияВГО КАК ОрганизацияВГО,
	|	втКонтрагенты.ОрганизацияВГО КАК КонтрагентВГО,
	|	втВерсии.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА тЗПО.АналитикаВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА втВерсии.ВалютаОтчета
	|		ИНАЧЕ тЗПО.АналитикаВалюта
	|	КОНЕЦ КАК Валюта,
	|	тЗПО.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов6 КАК тЗПО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|		ПО тЗПО.Версия = втВерсии.Версия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	|		ПО тЗПО.Показатель = втПоказатели.Показатель
	|			И (втПоказатели.НомерЗПО = &НомерЗПО)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагенты КАК втКонтрагенты
	|		ПО (ВЫБОР втПоказатели.НомерАналитикиКонтрагент
	|				КОГДА 1
	|					ТОГДА тЗПО.Аналитика1
	|				КОГДА 2
	|					ТОГДА тЗПО.Аналитика2
	|				КОГДА 3
	|					ТОГДА тЗПО.Аналитика3
	|				КОГДА 4
	|					ТОГДА тЗПО.Аналитика4
	|				КОГДА 5
	|					ТОГДА тЗПО.Аналитика5
	|				КОГДА 5
	|					ТОГДА тЗПО.Аналитика6
	|				ИНАЧЕ NULL
	|			КОНЕЦ = втКонтрагенты.КонтрагентВГО)";

КонецФункции

Функция ТекстЗапроса_КэшЗПО()

	//ЭтоОрганизацияВГО - данные организации могут быть с обоих сторон (Например: отбор на А(А == Б) = данные А)
	//НЕ ЭтоОрганизацияВГО - данные организации могут только со сверяемой стороны (Например: отбор на А(А == Б) = данные Б)
	
	Возврат
	"ВЫБРАТЬ
	|	тЗПО.Версия КАК Версия,
	|	тЗПО.Показатель КАК Показатель,
	|	втВерсии.ОрганизацияВГО КАК ОрганизацияВГО,
	|	втКонтрагенты.ОрганизацияВГО КАК КонтрагентВГО,
	|	втВерсии.Регистратор КАК Регистратор,
	|	&ЗаменаДоп_ЗПО КАК ДопАналитикаРасхождения,
	|	ВЫБОР
	|		КОГДА тЗПО.АналитикаВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА втВерсии.ВалютаОтчета
	|		ИНАЧЕ тЗПО.АналитикаВалюта
	|	КОНЕЦ КАК Валюта,
	|	тЗПО.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов5 КАК тЗПО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|		ПО тЗПО.Версия = втВерсии.Версия
	|			И (втВерсии.ЭтоОрганизацияВГО)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	|		ПО тЗПО.Показатель = втПоказатели.Показатель
	|			И (втПоказатели.НомерЗПО = &НомерЗПО)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагенты КАК втКонтрагенты
	|		ПО тЗПО.Аналитика5 = втКонтрагенты.КонтрагентВГО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	тЗПО.Версия,
	|	тЗПО.Показатель,
	|	втВерсии.ОрганизацияВГО,
	|	втКонтрагенты.ОрганизацияВГО,
	|	втВерсии.Регистратор,
	|	&ЗаменаДоп_ЗПО,
	|	ВЫБОР
	|		КОГДА тЗПО.АналитикаВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА втВерсии.ВалютаОтчета
	|		ИНАЧЕ тЗПО.АналитикаВалюта
	|	КОНЕЦ,
	|	тЗПО.Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов5 КАК тЗПО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсии КАК втВерсии
	|		ПО тЗПО.Версия = втВерсии.Версия
	|			И (НЕ втВерсии.ЭтоОрганизацияВГО)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	|		ПО тЗПО.Показатель = втПоказатели.Показатель
	|			И (втПоказатели.НомерЗПО = &НомерЗПО)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтрагенты КАК втКонтрагенты
	|		ПО тЗПО.Аналитика5 = втКонтрагенты.КонтрагентВГО
	|			И (втКонтрагенты.ЭтоОрганизацияВГО)";

КонецФункции

Функция ТекстЗапроса_СводЗПО()

	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПоВерсии
	|			ТОГДА т.Версия
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Регистратор,
	|	&ЗаменаДоп_Выбор КАК ДопАналитикаРасхождения,
	|	т.Показатель КАК Показатель,
	|	т.ОрганизацияВГО КАК ОрганизацияВГО,
	|	т.КонтрагентВГО КАК КонтрагентВГО,
	|	т.Валюта КАК Валюта,
	|	СУММА(т.Значение) КАК СуммаВД,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(втКурсыВалют.Валюта) ЕСТЬ NULL
	|			ТОГДА СУММА(т.Значение)
	|		ИНАЧЕ СУММА(т.Значение) * (МАКСИМУМ(втКурсыВалют.Курс) * МАКСИМУМ(втКурсыВалют.КратностьВГО)) / (МАКСИМУМ(втКурсыВалют.КурсВГО) * МАКСИМУМ(втКурсыВалют.Кратность))
	|	КОНЕЦ КАК СуммаВО
	|ПОМЕСТИТЬ втЗПО
	|ИЗ
	|	втИсточник КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК втКурсыВалют
	|		ПО т.Валюта = втКурсыВалют.Валюта
	|
	|СГРУППИРОВАТЬ ПО
	|	т.Валюта,
	|	ВЫБОР
	|		КОГДА &ПоВерсии
	|			ТОГДА т.Версия
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫРАЗИТЬ(т.ДопАналитикаРасхожденияСвод КАК Справочник.ДопАналитикаРасхожденийВГО),
	|	т.Показатель,
	|	т.ОрганизацияВГО,
	|	т.КонтрагентВГО";

КонецФункции

#КонецОбласти

#Область ПорталВГО

Функция ТекстЗапроса_Урегулирования()

	Возврат
	"ВЫБРАТЬ
	|	т.ПериодСценария КАК ПериодСценария,
	|	т.Отправитель КАК Отправитель,
	|	т.Получатель КАК Получатель,
	|	т.РазделВГО КАК РазделСверкиВГО,
	|	т.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	т.ДопАналитикаРасхождения КАК ДопАналитикаРасхождения,
	|	МАКСИМУМ(т.Состояние) КАК Состояние,
	|	МАКСИМУМ(т.ПредметКомментирования) КАК ПредметКомментирования,
	|	МАКСИМУМ(т.Принудительно) КАК Принудительно,
	|	МАКСИМУМ(т.АвторУрегулирования) КАК АвторУрегулирования,
	|	МАКСИМУМ(т.ДатаНачалаСпора) КАК ДатаНачалаСпора,
	|	МАКСИМУМ(т.ПричинаРасхождения) КАК ПричинаРасхождения,
	|	МАКСИМУМ(т.СторонаПричиныРасхождения) КАК СторонаПричиныРасхождения
	|ПОМЕСТИТЬ втУрегулирования
	|ИЗ
	|	РегистрСведений.ИнформацияСверкиВГО.СрезПоследних(
	|			&Дата,
	|			ПериодСценария В
	|					(ВЫБРАТЬ
	|						т.ПериодСценария
	|					ИЗ
	|						втПериоды КАК т)
	|				И Сценарий В (&Сценарий)
	|				И ВЫБОР
	|					КОГДА ИСТИНА
	|							И &Отправитель
	|						ТОГДА ИСТИНА
	|					КОГДА ИСТИНА
	|							И &Получатель
	|						ТОГДА ИСТИНА
	|				КОНЕЦ) КАК т
	|
	|СГРУППИРОВАТЬ ПО
	|	т.РазделВГО,
	|	т.ПериодСценария,
	|	т.ДопАналитикаРасхождения,
	|	т.Получатель,
	|	т.ВалютаВзаиморасчетов,
	|	т.Отправитель
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отправитель,
	|	Получатель,
	|	РазделСверкиВГО,
	|	ВалютаВзаиморасчетов";

КонецФункции

Функция ТекстЗапроса_Комментарии()

	Возврат 
	"ВЫБРАТЬ
	|	т.ПредметКомментирования КАК ПредметКомментирования,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|				КОГДА р.ТипРеквизита = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРеквизитовКомментариев.Отправитель)
	|					ТОГДА р.ЗначениеРеквизита
	|			КОНЕЦ) КАК Справочник.Организации) КАК ОрганизацияВГО,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|				КОГДА р.ТипРеквизита = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРеквизитовКомментариев.Получатель)
	|					ТОГДА р.ЗначениеРеквизита
	|			КОНЕЦ) КАК Справочник.Организации) КАК КонтрагентВГО,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|				КОГДА р.ТипРеквизита = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРеквизитовКомментариев.РазделВГО)
	|					ТОГДА р.ЗначениеРеквизита
	|			КОНЕЦ) КАК Справочник.РазделыСверкиВГО) КАК РазделСверкиВГО,
	|	ВЫРАЗИТЬ(МАКСИМУМ(ВЫБОР
	|				КОГДА р.ТипРеквизита = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРеквизитовКомментариев.Валюты)
	|					ТОГДА р.ЗначениеРеквизита
	|			КОНЕЦ) КАК Справочник.Валюты) КАК ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ втПредметыКомментирования
	|ИЗ
	|	РегистрСведений.ЗначенияРеквизитовПредметаКомментирования КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияРеквизитовПредметаКомментирования КАК р
	|		ПО т.ПредметКомментирования = р.ПредметКомментирования
	|			И т.РазделКомментариев = р.РазделКомментариев
	|ГДЕ
	|	т.РазделКомментариев = ЗНАЧЕНИЕ(Перечисление.РазделыКомментариев.РасхожденияВГО)
	|	И т.ТипРеквизита = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ТипыРеквизитовКомментариев.ПериодСценария)
	|	И т.ЗначениеРеквизита В (ВЫБРАТЬ т.ПериодСценария ИЗ втПериоды КАК т)
	|
	|СГРУППИРОВАТЬ ПО
	|	т.ПредметКомментирования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметКомментирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ПредметКомментирования КАК ПредметКомментирования,
	|	т.Период КАК Период,
	|	ПОДСТРОКА(т.Комментарий, 1, 40) КАК Комментарий,
	|	ВЫБОР
	|		КОГДА Стороны.Сторона = ИСТИНА
	|			ТОГДА втПредметыКомментирования.ОрганизацияВГО
	|		ИНАЧЕ втПредметыКомментирования.КонтрагентВГО
	|	КОНЕЦ КАК ОрганизацияВГО,
	|	ВЫБОР
	|		КОГДА Стороны.Сторона = ИСТИНА
	|			ТОГДА втПредметыКомментирования.КонтрагентВГО
	|		ИНАЧЕ втПредметыКомментирования.ОрганизацияВГО
	|	КОНЕЦ КАК КонтрагентВГО,
	|	втПредметыКомментирования.РазделСверкиВГО КАК РазделСверкиВГО,
	|	втПредметыКомментирования.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ Комментарии
	|ИЗ
	|	РегистрСведений.УниверсальныеКомментарии.СрезПоследних(
	|			&Дата,
	|			ПредметКомментирования В
	|				(ВЫБРАТЬ
	|					т.ПредметКомментирования
	|				ИЗ
	|					втПредметыКомментирования КАК т)) КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПредметыКомментирования КАК втПредметыКомментирования
	|		ПО т.ПредметКомментирования = втПредметыКомментирования.ПредметКомментирования,
	|	(ВЫБРАТЬ
	|		ИСТИНА КАК Сторона
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЛОЖЬ) КАК Стороны
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОрганизацияВГО,
	|	КонтрагентВГО,
	|	РазделСверкиВГО,
	|	ВалютаВзаиморасчетов";

КонецФункции

#КонецОбласти

Функция ТекстЗапроса_СверкаВГО()

	//Пример: Поступления(ФСД.П)-Списания(ФСД.С)
	//А списал Б 100, поступило 50(А.ФСД.С=100, Б.ФСД.П=50)
	//Б списал А 120, поступило 60(А.ФСД.П=60, Б.ФСД.С=120)
	//ВГО:
	//А-Б-С=100=50
	//А-Б-П=60=120
	//Б-А-С=120=60
	//Б-А-П=50=100
	//
	//При отборе по контрагенту Б
	//А-Б-С=100=50
	//А-Б-П=60=120
	
	Возврат 
	"ВЫБРАТЬ
	|	т.Организация КАК Организация,
	|	т.СторонаСверки КАК СторонаСверки,
	|	т.Контрагент КАК Контрагент,
	|	т.РазделСверкиВГО КАК РазделВГО,
	|	т.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	&ЗаменаДоп_ДопАналитики КАК ДопАналитикаРасхождения,
	|	т.Регистратор КАК Регистратор,
	|	МАКСИМУМ(втРегламенты.ВалютаВГО) КАК РасхожденияВалютаГруппы,
	|	СУММА(0) КАК Регистрация,
	|	СУММА(0) КАК Урегулирование,
	|	СУММА(т.СуммаОрганизации - т.СуммаКонтрагента) КАК РасхожденийОсталосьУрегулировать,
	|	СУММА(т.СуммаОрганизации) КАК СуммаОрганизации,
	|	СУММА(т.СуммаКонтрагента) КАК СуммаКонтрагента,
	|	СУММА(0) КАК ПроцентУрегулировано,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СУММА(т.СуммаОрганизацииГр) >= 0
	|					ТОГДА СУММА(т.СуммаОрганизацииГр)
	|				ИНАЧЕ -СУММА(т.СуммаОрганизацииГр)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СУММА(т.СуммаКонтрагентаГр) >= 0
	|					ТОГДА СУММА(т.СуммаКонтрагентаГр)
	|				ИНАЧЕ -СУММА(т.СуммаКонтрагентаГр)
	|			КОНЕЦ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(ВЫБОР
	|					КОГДА СУММА(т.СуммаОрганизацииГр) - СУММА(т.СуммаКонтрагентаГр) < 0
	|						ТОГДА -(СУММА(т.СуммаОрганизацииГр) - СУММА(т.СуммаКонтрагентаГр))
	|					ИНАЧЕ СУММА(т.СуммаОрганизацииГр) - СУММА(т.СуммаКонтрагентаГр)
	|				КОНЕЦ * 200 / (ВЫБОР
	|					КОГДА СУММА(т.СуммаОрганизацииГр) >= 0
	|						ТОГДА СУММА(т.СуммаОрганизацииГр)
	|					ИНАЧЕ -СУММА(т.СуммаОрганизацииГр)
	|				КОНЕЦ + ВЫБОР
	|					КОГДА СУММА(т.СуммаКонтрагентаГр) >= 0
	|						ТОГДА СУММА(т.СуммаКонтрагентаГр)
	|					ИНАЧЕ -СУММА(т.СуммаКонтрагентаГр)
	|				КОНЕЦ), 0)
	|	КОНЕЦ КАК ПроцентОсталосьУрегулировать,
	|	ВЫБОР
	|		КОГДА ВЫБОР
	|				КОГДА СУММА(т.СуммаОрганизацииГр) >= 0
	|					ТОГДА СУММА(т.СуммаОрганизацииГр)
	|				ИНАЧЕ -СУММА(т.СуммаОрганизацииГр)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СУММА(т.СуммаКонтрагентаГр) >= 0
	|					ТОГДА СУММА(т.СуммаКонтрагентаГр)
	|				ИНАЧЕ -СУММА(т.СуммаКонтрагентаГр)
	|			КОНЕЦ = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СУММА(т.СуммаОрганизацииГр) - СУММА(т.СуммаКонтрагентаГр) < 0
	|					ТОГДА -(СУММА(т.СуммаОрганизацииГр) - СУММА(т.СуммаКонтрагентаГр))
	|				ИНАЧЕ СУММА(т.СуммаОрганизацииГр) - СУММА(т.СуммаКонтрагентаГр)
	|			КОНЕЦ * 200 / (ВЫБОР
	|				КОГДА СУММА(т.СуммаОрганизацииГр) >= 0
	|					ТОГДА СУММА(т.СуммаОрганизацииГр)
	|				ИНАЧЕ -СУММА(т.СуммаОрганизацииГр)
	|			КОНЕЦ + ВЫБОР
	|				КОГДА СУММА(т.СуммаКонтрагентаГр) >= 0
	|					ТОГДА СУММА(т.СуммаКонтрагентаГр)
	|				ИНАЧЕ -СУММА(т.СуммаКонтрагентаГр)
	|			КОНЕЦ)
	|	КОНЕЦ - МАКСИМУМ(т.ПорогСущественности) КАК ПроцентОсталосьУрегулироватьБезПорога,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(т.СостояниеКонтрагент) = ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Спор)
	|			ТОГДА МАКСИМУМ(т.СостояниеКонтрагент)
	|		ИНАЧЕ ЕСТЬNULL(МАКСИМУМ(т.СостояниеОрганизация), ЗНАЧЕНИЕ(Перечисление.СостояниеСверкиВГО.Несогласован))
	|	КОНЕЦ КАК Состояние,
	|	МИНИМУМ(т.СостояниеОрганизация) КАК СостояниеОрганизация,
	|	МИНИМУМ(т.СостояниеКонтрагент) КАК СостояниеКонтрагент,
	|	МАКСИМУМ(т.ПредметКомментирования) КАК ПредметКомментирования,
	|	МАКСИМУМ(т.Комментарий) КАК Комментарий,
	|	МАКСИМУМ(т.ПорогСущественности) КАК ПорогСущественности,
	|	МАКСИМУМ(т.Принудительно) КАК Принудительно,
	|	СУММА(0) КАК РегистрацияГр,
	|	СУММА(0) КАК УрегулированиеГр,
	|	СУММА(т.СуммаОрганизацииГр - т.СуммаКонтрагентаГр) КАК РасхожденийОсталосьУрегулироватьГр,
	|	СУММА(т.СуммаОрганизацииГр) КАК СуммаОрганизацииГр,
	|	СУММА(т.СуммаКонтрагентаГр) КАК СуммаКонтрагентаГр,
	|	МАКСИМУМ(т.АвторУрегулирования) КАК АвторУрегулирования,
	|	МАКСИМУМ(т.ДатаНачалаСпора) КАК ДатаНачалаСпора,
	|	МАКСИМУМ(т.СверкаЗакрыта) КАК СверкаЗакрыта,
	|	т.ПричинаРасхождения КАК ПричинаРасхождения,
	|	МАКСИМУМ(т.СторонаПричиныРасхождения) КАК СторонаПричиныРасхождения
	|{ВЫБРАТЬ
	|	Состояние.* КАК Состояние}
	|ИЗ
	|	(ВЫБРАТЬ
	|		т.СуммаВД КАК СуммаОрганизации,
	|		0 КАК СуммаКонтрагента,
	|		т.СуммаВО КАК СуммаОрганизацииГр,
	|		0 КАК СуммаКонтрагентаГр,
	|		ЕСТЬNULL(т.ОрганизацияВГО, втУрегулирования.Отправитель) КАК Организация,
	|		ЕСТЬNULL(т.КонтрагентВГО, втУрегулирования.Получатель) КАК Контрагент,
	|		ЕСТЬNULL(т.Валюта, втУрегулирования.ВалютаВзаиморасчетов) КАК ВалютаВзаиморасчетов,
	|		ВЫБОР
	|			КОГДА втРазделыСверки.ЭтоПокупатель
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор)
	|		КОНЕЦ КАК СторонаСверки,
	|		ЕСТЬNULL(втРазделыСверки.РазделСверкиВГО, втУрегулирования.РазделСверкиВГО) КАК РазделСверкиВГО,
	|		&ЗаменаДоп_Покупатель КАК ДопАналитикаРасхождения,
	|		т.Регистратор КАК Регистратор,
	|		втРазделыСверки.ПорогСущественности КАК ПорогСущественности,
	|		втУрегулирования.Состояние КАК СостояниеОрганизация,
	|		NULL КАК СостояниеКонтрагент,
	|		втУрегулирования.ПредметКомментирования КАК ПредметКомментирования,
	|		втУрегулирования.Принудительно КАК Принудительно,
	|		втУрегулирования.АвторУрегулирования КАК АвторУрегулирования,
	|		втУрегулирования.ДатаНачалаСпора КАК ДатаНачалаСпора,
	|		втУрегулирования.ПричинаРасхождения КАК ПричинаРасхождения,
	|		втУрегулирования.СторонаПричиныРасхождения КАК СторонаПричиныРасхождения,
	|		ЛОЖЬ КАК СверкаЗакрыта,
	|		Комментарии.Комментарий КАК Комментарий
	|	{ВЫБРАТЬ
	|		СверкаЗакрыта,
	|		СторонаПричиныРасхождения,
	|		ПричинаРасхождения,
	|		ДатаНачалаСпора,
	|		АвторУрегулирования,
	|		Принудительно,
	|		ПредметКомментирования,
	|		ДопАналитикаРасхождения,
	|		Регистратор,
	|		ПорогСущественности,
	|		Комментарий,
	|		ВалютаВзаиморасчетов}
	|	ИЗ
	|		втЗПО КАК т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазделыСверки КАК втРазделыСверки
	|			ПО т.Показатель = втРазделыСверки.Показатель
	|			{ПОЛНОЕ СОЕДИНЕНИЕ втУрегулирования КАК втУрегулирования
	|			ПО т.ОрганизацияВГО = втУрегулирования.Отправитель
	|				И т.КонтрагентВГО = втУрегулирования.Получатель
	|				И т.Валюта = втУрегулирования.ВалютаВзаиморасчетов
	|				И (втРазделыСверки.РазделСверкиВГО = втУрегулирования.РазделСверкиВГО)}
	|			{ЛЕВОЕ СОЕДИНЕНИЕ Комментарии КАК Комментарии
	|			ПО т.ОрганизацияВГО = Комментарии.ОрганизацияВГО
	|				И т.КонтрагентВГО = Комментарии.КонтрагентВГО
	|				И (втРазделыСверки.РазделСверкиВГО = Комментарии.РазделСверкиВГО)
	|				И т.Валюта = Комментарии.ВалютаВзаиморасчетов}
	|	ГДЕ
	|		ИСТИНА
	|		И &ОтборОрганизация_Организация
	|		И &ОтборКонтрагент_Контрагент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		0,
	|		т.СуммаВД,
	|		0,
	|		т.СуммаВО,
	|		ЕСТЬNULL(т.КонтрагентВГО, втУрегулирования.Отправитель),
	|		ЕСТЬNULL(т.ОрганизацияВГО, втУрегулирования.Получатель),
	|		ЕСТЬNULL(т.Валюта, втУрегулирования.ВалютаВзаиморасчетов),
	|		ВЫБОР
	|			КОГДА втРазделыСверки.ЭтоПокупатель
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Кредитор)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтороныСверкиВГО.Дебитор)
	|		КОНЕЦ,
	|		ЕСТЬNULL(втРазделыСверки.РазделСверкиВГО, втУрегулирования.РазделСверкиВГО),
	|		&ЗаменаДоп_Продавец,
	|		т.Регистратор,
	|		втРазделыСверки.ПорогСущественности,
	|		NULL,
	|		втУрегулирования.Состояние,
	|		втУрегулирования.ПредметКомментирования,
	|		втУрегулирования.Принудительно,
	|		втУрегулирования.АвторУрегулирования,
	|		втУрегулирования.ДатаНачалаСпора,
	|		втУрегулирования.ПричинаРасхождения,
	|		втУрегулирования.СторонаПричиныРасхождения,
	|		ЛОЖЬ,
	|		Комментарии.Комментарий
	|	ИЗ
	|		втЗПО КАК т
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРазделыСверки КАК втРазделыСверки
	|			ПО т.Показатель = втРазделыСверки.Показатель
	|			{ПОЛНОЕ СОЕДИНЕНИЕ втУрегулирования КАК втУрегулирования
	|			ПО т.КонтрагентВГО = втУрегулирования.Отправитель
	|				И т.ОрганизацияВГО = втУрегулирования.Получатель
	|				И т.Валюта = втУрегулирования.ВалютаВзаиморасчетов
	|				И (втРазделыСверки.РазделСверкиВГО = втУрегулирования.РазделСверкиВГО)}
	|			{ЛЕВОЕ СОЕДИНЕНИЕ Комментарии КАК Комментарии
	|			ПО т.ОрганизацияВГО = Комментарии.ОрганизацияВГО
	|				И т.КонтрагентВГО = Комментарии.КонтрагентВГО
	|				И (втРазделыСверки.РазделСверкиВГО = Комментарии.РазделСверкиВГО)
	|				И т.Валюта = Комментарии.ВалютаВзаиморасчетов}
	|	ГДЕ
	|		ИСТИНА
	|		И &ОтборОрганизация_Контрагент
	|		И &ОтборКонтрагент_Организация) КАК т
	|		{ЛЕВОЕ СОЕДИНЕНИЕ втРегламенты КАК втРегламенты
	|		ПО (ИСТИНА)}
	|ГДЕ
	|	&ОтборСторонаСверки
	|{ГДЕ
	|	т.Организация,
	|	т.Контрагент}
	|
	|СГРУППИРОВАТЬ ПО
	|	т.Организация,
	|	т.СторонаСверки,
	|	т.Контрагент,
	|	т.РазделСверкиВГО,
	|	т.ВалютаВзаиморасчетов,
	|	ВЫРАЗИТЬ(т.ДопАналитикаРасхождения КАК Справочник.ДопАналитикаРасхожденийВГО),
	|	т.ПричинаРасхождения,
	|	т.Регистратор";
	
КонецФункции

#КонецОбласти
