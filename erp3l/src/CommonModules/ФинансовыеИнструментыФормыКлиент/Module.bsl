////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие клиентские методы, применимые к формам финансовых инструментов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура РассчитатьВеличинуКорректировки(СтрокаДанных, Знач ИмяПоля) Экспорт
	
	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных[ИмяПоля + "Корректировка"]= СтрокаДанных[ИмяПоля] - СтрокаДанных[ИмяПоля + "Расчет"];
	
КонецПроцедуры

Процедура ПослеЗаписиВерсииСоглашения(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма,"ВстречныйФинансовыйИнструмент") Тогда
		ПараметрОповещения.Вставить("ВстречныйДоговор", Форма.ВстречныйФинансовыйИнструмент);
	КонецЕсли;
	Оповестить("Запись_ВерсияФИ", ПараметрОповещения, Объект.Ссылка);
	
КонецПроцедуры

Процедура ПоказатьИсториюИзмененияЗначения(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	ПредставленияКолонок = ДоговорыКонтрагентовФормыУХВызовСервера.ПредставлениеКолонокГрафикаВерсииСоглашения(Объект.Ссылка);
	
	ТекДанные = Элементы.ГрафикРасчетов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКолонкиГрафика = ИмяКолонкиГрафика(Элементы.ГрафикРасчетов.ТекущийЭлемент.Имя);
	ОперацияГрафика = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОперацияГрафикаПоИмениКолонки(ИмяКолонкиГрафика, Форма.ОписаниеГрафика);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДатаОперации", ТекДанные.Дата);
	ПараметрыФормы.Вставить("ФинансовыйИнструмент", Объект.ДоговорКонтрагента);

	ПараметрыФормы.Вставить("ЗаголовокКолонкиГрафика", 
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредставленияКолонок, ИмяКолонкиГрафика, ИмяКолонкиГрафика));
	ПараметрыФормы.Вставить("ТекущееЗначение", ТекДанные[ИмяКолонкиГрафика]);
	ПараметрыФормы.Вставить("Документ", Объект.Ссылка);	
	ПараметрыФормы.Вставить("ОперацияГрафика", ОперацияГрафика);
	
	ОткрытьФорму("Обработка.РедактированиеГрафика.Форма.ФормаИсторияИзмененияЗначения", ПараметрыФормы, Форма);
	
КонецПроцедуры

Процедура ОтображатьДетальныеЗаписи(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.ГрафикОтображатьДетальныеЗаписи);
	Если Элементы.Найти("ИзмененияОтображатьДетальныеЗаписи") <> Неопределено Тогда
		МассивЭлементов.Добавить(Элементы.ИзмененияОтображатьДетальныеЗаписи);
	КонецЕсли;
	
	ПометкаКУстановке = Не Элементы.ГрафикОтображатьДетальныеЗаписи.Пометка;
	
	Для Каждого ТекЭлемент Из МассивЭлементов Цикл
		ТекЭлемент.Пометка = ПометкаКУстановке;
	КонецЦикла;
	
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьОтборСтрокГрафика(Форма);
	
КонецПроцедуры

Процедура ПередУдалениемСтрокиГрафика(Форма, Элемент, Отказ) Экспорт
	
	Объект = Форма.Объект;
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	ТекДанные = Элемент.ТекущиеДанные;
	// Нельзя удалить факт.
	Если ТекДанные.Дата < Объект.ГраницаФактическихДанных Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Не потеряем расчетные значения.
	ЕстьРасчетныеЗначения = Ложь;
	Для Каждого ТекРасчетныйПоказатель Из Форма.КолонкиРасчет Цикл
		Если ТекДанные[ТекРасчетныйПоказатель + "Расчет"] <> 0 Тогда
			ЕстьРасчетныеЗначения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьРасчетныеЗначения Тогда
		
		Отказ = Истина;
		
		Для Каждого СекцияГрафика Из ОписаниеГрафика Цикл
			
			ОписаниеСекции = СекцияГрафика.Значение;
			
			ТекДанные[ОписаниеСекции.КолонкаПриход] = 0;
			ТекДанные[ОписаниеСекции.КолонкаРасход] = 0;
			
			Если ОписаниеСекции.ЭтоРасчетнаяСекция Тогда
				ТекДанные[ОписаниеСекции.КолонкаПриход + "Корректировка"] = - ТекДанные[ОписаниеСекции.КолонкаПриход + "Расчет"];
				ТекДанные[ОписаниеСекции.КолонкаРасход + "Корректировка"] = - ТекДанные[ОписаниеСекции.КолонкаРасход + "Расчет"];
			КонецЕсли;
			
		КонецЦикла;
		
		ТекДанные.ПустаяСтрока = Истина;
		ФинансовыеИнструментыФормыКлиентСервер.УстановитьОтборСтрокГрафика(Форма);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриАктивизацииЯчейкиГрафика(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	Элементы.ГрафикКонтекстноеМенюОткрытьИсториюИзмененияЗначения.Доступность = (Элемент.ТекущийЭлемент <> Элементы.ГрафикРасчетовДата);
	
КонецПроцедуры

#Область ОбработчикиКомандФормы

Процедура РасшифроватьСуммуГрафика(Форма, Команда) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ТекДанные = Элементы.ГрафикРасчетов.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПредставленияКолонок = ДоговорыКонтрагентовФормыУХВызовСервера.ПредставлениеКолонокГрафикаВерсииСоглашения(Объект.Ссылка);
	
	ИмяТекущегоПоля = ИмяКолонкиГрафика(Элементы.ГрафикРасчетов.ТекущийЭлемент.Имя);
	СекцияГрафика = ФинансоваяМатематикаКлиентСервер.НайтиСекциюГрафикаПоИмениКолонки(Форма.ОписаниеГрафика, ИмяТекущегоПоля);
	ПредставлениеКолонки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПредставленияКолонок, ИмяТекущегоПоля, ИмяТекущегоПоля);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДатаРасшифровки", ТекДанные.Дата);
	СтруктураПараметров.Вставить("ТекущееПоле", ИмяТекущегоПоля);
	СтруктураПараметров.Вставить("ИмяСекцииГрафика", СекцияГрафика.Имя);
	СтруктураПараметров.Вставить("ЗаголовокКолонкиГрафика", ПредставлениеКолонки);
	СтруктураПараметров.Вставить("СтрокаГрафика", Элементы.ГрафикРасчетов.ТекущаяСтрока);
	СтруктураПараметров.Вставить("ОписаниеГрафика", Форма.ОписаниеГрафика);
	СтруктураПараметров.Вставить("Объект", Объект);
	
	ОткрытьФорму("Обработка.РедактированиеГрафика.Форма.ФормаРасшифровкиРассчитанныхСумм", СтруктураПараметров, Форма);
	
КонецПроцедуры
	
#КонецОбласти

Процедура ОткрытьФормуВыбораСчетов(Форма) Экспорт

	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПриИзмененииСчетов", ФинансовыеИнструментыФормыКлиент, Новый Структура("Форма", Форма));
	ОткрытьФорму("Справочник.ПараметрыУчетаФИРСБУ.Форма.СчетаУчетаДокумента", Форма.КэшируемыеЗначения, Форма, , , , Оповещение);

КонецПроцедуры

Процедура Подключаемый_ПриИзмененииСчетов(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.Форма.КэшируемыеЗначения.Вставить("СчетаУчета", РезультатЗакрытия);
	
	ФинансовыеИнструментыФормыКлиентСервер.ЗаполнитьСчетаУчетаВерсии(ДополнительныеПараметры.Форма);
	
КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы

Процедура Подключаемый_ОткрытьФорму(СсылкаНаОбъект, ПараметрыВыполнения) Экспорт
	
	Если Не ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Возврат;		
	КонецЕсли;
	
	Если ПараметрыВыполнения.ОписаниеКоманды.Идентификатор = "КарточкаФинансовогоИнструмента" Тогда	
		
		ПараметрыФормы = ФинансовыеИнструментыФормыВызовСервера.ПолучитьПараметрыКарточкаСубконто(СсылкаНаОбъект);
		ОткрытьФорму("Отчет.КарточкаСубконто.Форма", 
						ПараметрыФормы, 
						ПараметрыВыполнения.Форма, 
						Истина						
					);
					
	ИначеЕсли ПараметрыВыполнения.ОписаниеКоманды.Идентификатор = "ВзаиморасчетыПоДоговору" Тогда 
		
		ИмяДоговор = "ДоговорКонтрагента";
		Если ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.АкцептПротестПереводногоВекселя") Тогда
			ИмяДоговор = "ДоговорАкцепта";
		КонецЕсли;
		
		ПараметрыФормы = ФинансовыеИнструментыФормыВызовСервера.ПолучитьПараметрыКарточкаСубконто(СсылкаНаОбъект, ИмяДоговор);
		ОткрытьФорму("Отчет.КарточкаСубконто.Форма", 
						ПараметрыФормы, 
						ПараметрыВыполнения.Форма,
						Истина
					);
		
	ИначеЕсли ПараметрыВыполнения.ОписаниеКоманды.Идентификатор = "ДокументыПоЦеннойБумаге" Тогда 
					
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ФинансовыйИнструмент", СсылкаНаОбъект));
		ОткрытьФорму("ЖурналДокументов.ОперацииСЦеннымиБумагами.ФормаСписка", 
				ПараметрыФормы, 
				ПараметрыВыполнения.Форма,
				Истина
			);

	КонецЕсли;
	
КонецПроцедуры

#Область СозданиеНаОсновании

Процедура Подключаемый_ОткрытьФормуСозданияНаОсновании(Ссылка, ПараметрыВыполнения) Экспорт

	Контекст = ФинансовыеИнструментыФормыВызовСервера.ПолучитьПараметрыОткрытияФИ(Ссылка, ПараметрыВыполнения.ОписаниеКоманды.Идентификатор);
	
	ОткрытьФорму(Контекст.ИмяФормы, Контекст, Ссылка, Истина); 
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ИмяКолонкиГрафика(ИмяЭлемента)
	
	Возврат Сред(ИмяЭлемента, 15)	
	
КонецФункции

#КонецОбласти
