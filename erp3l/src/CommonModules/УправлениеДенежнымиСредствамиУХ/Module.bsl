
Функция ПолучитьБанковскийСчетПоУмолчанию(Владелец, Валюта, ПлатежныйИнструмент) Экспорт
	
	Возврат ДенежныеСредстваВстраиваниеУХ.ПолучитьБанковскийСчетКассуПоУмолчанию(Владелец, Валюта, ПлатежныйИнструмент);
	
КонецФункции
	
//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ КОНТРОЛЯ ОСТАТКОВ ДЕНЕЖНЫХ СРЕДСТВ

// Функция устарела, применяется для обратной совместимости с маршрутами из 1С: Консолидации
Функция ПолучитьИсполнениеЛимитовПоЗаявке(Ссылка) Экспорт
	
	СтруктураЛимиты = ПолучитьСохраненныеЛимиты(Ссылка);
	
	// Переименуем свойство ЛимитыБюджет в ЛимитыПланДДС
	
	СтруктураЛимиты.Вставить("ЛимитыПланДДС", СтруктураЛимиты.ЛимитыБюджет);
	СтруктураЛимиты.Удалить("ЛимитыБюджет");
	
	// Свойство ЛимитыОстатковДС - рудимент, в текущей логике не имеет смысла. Считаем его всегда не установленным.
	
	Возврат СтруктураЛимиты;	
	
КонецФункции // ПолучитьИсполнениеЛимитовПоЗаявке()

Функция ПроверитьРезервированиеПередОплатой(ДокументПланирования) Экспорт
	
	ТекстОшибки="";
	
	Если ТипЗнч(ДокументПланирования) = Тип("СправочникСсылка.Периоды") Тогда
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Запрос=Новый Запрос;		
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДокПланирования.Ссылка,
	|	ДокПланирования.ВидБюджета,
	|	ДокПланирования.ПриходРасход,
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеСогласования,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	Документ.ОперативныйПлан КАК ДокПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних(, ДокументПланирования = &ДокументПланирования) КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО (СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования = ДокПланирования.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект = &ДокументПланирования) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = ДокПланирования.Ссылка)
	|ГДЕ
	|	ДокПланирования.Ссылка = &ДокументПланирования";
		
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланирования);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Если НЕ ДвиженияБюджетированиеКлиентСерверУХ.ЭтоБДДС(Выборка.ВидБюджета) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Создание платежных поручений возможно только на основании документов БДДС.'");
		КонецЕсли;
		
		Если Выборка.ПриходРасход <> Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Создание платежных поручений возможно только на основании расходных документов.'");
		КонецЕсли;
		
		Если Выборка.СостояниеСогласования <> Перечисления.СостоянияСогласования.Утверждена Тогда
			ТекстОшибки=ТекстОшибки+ Символы.ПС + СтрШаблон(НСтр("ru = 'Документ %1 не утвержден'"), ДокументПланирования);
		КонецЕсли;
		
		Если Выборка.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.НаИсполнении
			ИЛИ Выборка.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.Исполнена Тогда
			
			ТекстОшибки=ТекстОшибки+ Символы.ПС + СтрШаблон(НСтр("ru = '%1 находится в состоянии ""%2""'"), ДокументПланирования, Выборка.СостояниеИсполнения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	Возврат Сред(ТекстОшибки,2); 
				
КонецФункции // ПроверитьРезервированиеПередОплатой() 

// Функция возвращает банковский счет контрагента по счету организации
//
// Параметры:
//  СчетОрганизации	 - 	СправочникСсылка.БанковскиеСчета - банковский счет организации
// 
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчета - банковский счет контрагента, соответствующий указанному счету организации.
//		Если счет не найден, возвращается пустая ссылка.
//
Функция БанковскийСчетКонтрагента(СчетОрганизации) Экспорт
	
	Возврат ДенежныеСредстваВстраиваниеУХ.БанковскийСчетКонтрагента(СчетОрганизации);
	
КонецФункции

// Функция возвращает контрагента, соответствующего искомой организации.
//
// Параметры:
//  Организация	 - 	СправочникСсылка.Организации - организация, для которой ищется соответствующий контрагент.
// 
// Возвращаемое значение:
//  СправочникСсылка.Контрагенты - найденный контрагент. Если контрагент не обнаружен, возвращается пустая ссылка.
//
Функция КонтрагентОрганизации(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница";
	
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", Организация);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	Иначе
		
		Возврат Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;

КонецФункции

// Создаёт банковский счёт-копию для счёта СчетИсточникВход и устанавливает
// новому счёту владельцем элемент НовыйВладелецВход. Возвращает ссылку на созданный
// счёт.
Функция СоздатьКопиюСчетаДляВладельца(СчетИсточникВход, НовыйВладелецВход) Экспорт
	Возврат ДенежныеСредстваВстраиваниеУХ.СоздатьКопиюСчетаДляВладельца(СчетИсточникВход, НовыйВладелецВход);
КонецФункции

#Область ПроцедурыИФункцииКонтроляЛимитов

Функция СтруктураТаблицыКонтроляЛимитовВзаиморасчетов() Экспорт
	
	ТаблицаКонтроляВзаиморасчеты = Новый ТаблицаЗначений;
	ТаблицаКонтроляВзаиморасчеты.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаКонтроляВзаиморасчеты.Колонки.Добавить("ЛимитЗадолженности");
	ТаблицаКонтроляВзаиморасчеты.Колонки.Добавить("ТекущаяЗадолженность");
	ТаблицаКонтроляВзаиморасчеты.Колонки.Добавить("Заявлено");	
	ТаблицаКонтроляВзаиморасчеты.Колонки.Добавить("СуммаПлатежа");
	ТаблицаКонтроляВзаиморасчеты.Колонки.Добавить("ПланируемаяЗадолженность");
	
	Возврат ТаблицаКонтроляВзаиморасчеты;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииУправленияСостояниемИсполнения

Функция СостояниеИсполненияДокумента(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних(, ДокументПланирования = &Ссылка) КАК СостоянияИсполненияДокументовПланированияСрезПоследних";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СостояниеИсполнения;
	Иначе
		Возврат Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	КонецЕсли;
	
КонецФункции

Функция УстановитьСостояниеИсполненияДокумента(Знач ДокументПланирования, Знач ИдентификаторПозиции, Знач Состояние, Знач Период = Неопределено, Знач Автор = Неопределено, Документ = неопределено) Экспорт
	
	Если Автор = Неопределено Тогда 
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияИсполненияДокументовПланирования");
		ЭлементБлокировки.УстановитьЗначение("ДокументПланирования", ДокументПланирования);
		ЭлементБлокировки.УстановитьЗначение("ИдентификаторПозиции", ИдентификаторПозиции);
		Блокировка.Заблокировать();
		
		//		
		МЗ						= РегистрыСведений.СостоянияИсполненияДокументовПланирования.СоздатьМенеджерЗаписи();
		МЗ.СостояниеИсполнения	= Состояние;
		МЗ.Период				= Период;
		МЗ.Автор				= Автор;
		МЗ.ДокументПланирования	= ДокументПланирования;
		МЗ.ИдентификаторПозиции = ИдентификаторПозиции;
		МЗ.ДокументИзменившийСостояние = Документ;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при установке состояния исполнения документа планирования ""%1"" по причине: %2'"),
				ДокументПланирования,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка состояния исполнения документа планирования'"),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	СобытиеОповещения = ВидСобытияОповещенияПоСостоянию(Состояние);
	Если СобытиеОповещения <> Неопределено Тогда
		// Получим данные позиции
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РазмещениеЗаявок.ЗаявкаНаОперацию,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Номер КАК Номер,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Дата КАК Дата,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.ВалютаОплаты КАК ВалютаОплаты,
		|	РазмещениеЗаявок.ДатаИсполнения,
		|	РазмещениеЗаявок.Сумма
		|ИЗ
		|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
		|ГДЕ
		|	РазмещениеЗаявок.ИдентификаторПозиции = &ИдентификаторПозиции";
		Запрос.УстановитьПараметр("ИдентификаторПозиции", ИдентификаторПозиции);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			ТекстОповещения = СтрШаблон(НСтр("ru = '<P>Позиция заявки %1 от %2 переведена в состояние <b>%3</b></P>
										|<P> Документ: <a href=%4>%5</a></P>
										|<P> Сумма к оплате: %6 %7</P>
										|<P> Дата оплаты: %8</P>'"),
										Выборка.Номер,
										Формат(Выборка.Дата, "ДФ=dd.MM.yy"),
										Состояние,
										СтрШаблон("'%1'",ПолучитьНавигационнуюСсылку(Выборка.ЗаявкаНаОперацию)),
										Выборка.ЗаявкаНаОперацию,
										Выборка.Сумма,
										Выборка.ВалютаОплаты,
										Формат(Выборка.ДатаИсполнения, "ДФ=dd.MM.yy"));

			МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения,ТекстОповещения,ДокументПланирования);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция УстановитьСостояниеИсполненияДокументаСписок(Знач ТаблицаДокументовПланирования, Знач Состояние, Знач Период = Неопределено, Знач Автор = Неопределено, Документ = неопределено) Экспорт
	
	Если ТаблицаДокументовПланирования.Количество() = 0 тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Автор = Неопределено Тогда 
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ДокументПланирования = неопределено;
		
	НачатьТранзакцию();
	
	Попытка
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.СостоянияИсполненияДокументовПланирования");
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокументовПланирования;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДокументПланирования", "ДокументПланирования");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ИдентификаторПозиции", "ИдентификаторПозиции");
		Блокировка.Заблокировать();
		
		Для Каждого СтрокаДокументаПланирования Из ТаблицаДокументовПланирования Цикл
			
			ДокументПланирования = СтрокаДокументаПланирования.ДокументПланирования;
						
			МЗ						= РегистрыСведений.СостоянияИсполненияДокументовПланирования.СоздатьМенеджерЗаписи();
			МЗ.СостояниеИсполнения	= Состояние;
			МЗ.Период				= Период;
			МЗ.Автор				= Автор;
			МЗ.ДокументПланирования	= ДокументПланирования;
			МЗ.ИдентификаторПозиции = СтрокаДокументаПланирования.ИдентификаторПозиции;
			МЗ.ДокументИзменившийСостояние = Документ;
			МЗ.Записать();
	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
			
	Исключение
		
		ОтменитьТранзакцию();
		
		ТекстСообщения = СтрШаблон(
				НСтр("ru = 'Ошибка при установке состояния исполнения документа планирования ""%1"" по причине: %2'"),
				ДокументПланирования,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Установка состояния исполнения документа планирования'"),
			УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщения);
			
		Возврат Ложь;
		
	КонецПопытки;
	
	СобытиеОповещения = ВидСобытияОповещенияПоСостоянию(Состояние);
	
	Если СобытиеОповещения <> Неопределено Тогда
		
		//Получим данные позиции
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Номер КАК Номер,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.Дата КАК Дата,
		|	РазмещениеЗаявок.ЗаявкаНаОперацию.ВалютаОплаты КАК ВалютаОплаты,
		|	РазмещениеЗаявок.ДатаИсполнения КАК ДатаИсполнения,
		|	РазмещениеЗаявок.Сумма КАК Сумма
		|ИЗ
		|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
		|ГДЕ
		|	РазмещениеЗаявок.ИдентификаторПозиции В(&ИдентификаторыПозиций)";
		
		Запрос.УстановитьПараметр("ИдентификаторыПозиций", ТаблицаДокументовПланирования.ВыгрузитьКолонку("ИдентификаторПозиции"));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			ТекстОповещения = СтрШаблон(НСтр("ru = '<P>Позиция заявки %1 от %2 переведена в состояние <b>%3</b></P>
										|<P> Документ: <a href=%4>%5</a></P>
										|<P> Сумма к оплате: %6 %7</P>
										|<P> Дата оплаты: %8</P>'"),
										Выборка.Номер,
										Формат(Выборка.Дата, "ДФ=dd.MM.yy"),
										Состояние,
										СтрШаблон("'%1'", ПолучитьНавигационнуюСсылку(Выборка.ЗаявкаНаОперацию)),
										Выборка.ЗаявкаНаОперацию,
										Выборка.Сумма,
										Выборка.ВалютаОплаты,
										Формат(Выборка.ДатаИсполнения, "ДФ=dd.MM.yy"));

			МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения, ТекстОповещения, ДокументПланирования);
			
		КонецЦикла;
	
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции

Функция УстановитьПредыдущееСостояниеИсполнения(Знач ДокументПланирования, Знач ИдентификаторПозиции, Знач ТекущееСостояние, Знач Период = Неопределено, Знач Автор = Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СостоянияИсполненияДокументовПланирования.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования КАК СостоянияИсполненияДокументовПланирования
	|ГДЕ
	|	СостоянияИсполненияДокументовПланирования.ДокументПланирования = &ДокументПланирования
	|	И СостоянияИсполненияДокументовПланирования.ИдентификаторПозиции = &ИдентификаторПозиции
	|	И СостоянияИсполненияДокументовПланирования.СостояниеИсполнения <> &ТекущееСостояние
	|
	|УПОРЯДОЧИТЬ ПО
	|	СостоянияИсполненияДокументовПланирования.Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументПланирования",ДокументПланирования);
	Запрос.УстановитьПараметр("ИдентификаторПозиции",ИдентификаторПозиции);
	Запрос.УстановитьПараметр("ТекущееСостояние",ТекущееСостояние);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		ПредыдущееСостояние=Результат.СостояниеИсполнения;
	Иначе
		ПредыдущееСостояние=Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
	КонецЕсли;
	
	Возврат УстановитьСостояниеИсполненияДокумента(ДокументПланирования, ИдентификаторПозиции, ПредыдущееСостояние, Период, Автор);
	
КонецФункции

Функция ВидСобытияОповещенияПоСостоянию(Знач Состояние)
	
	СоответствиеСостояний = Новый Соответствие;
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.Отложена,                   Справочники.ВидыСобытийОповещений.ПомещениеВСтопЛист);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей,    Справочники.ВидыСобытийОповещений.ВключениеВРеестр);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.Исполнена,                  Справочники.ВидыСобытийОповещений.Оплата);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияИсполненияЗаявки.НаИсполнении,               Справочники.ВидыСобытийОповещений.ПередачаВОплату);
	
	Возврат СоответствиеСостояний[Состояние];
	
КонецФункции

#КонецОбласти

#Область ИдентификаторыПлатежа

// Заполняет уникальный идентификатор платежа
Функция ПолучитьУникальныйИдентификаторПлатежа(Объект) Экспорт
	
	Префикс = ПолучитьПрефиксДляУИП(Объект.Ссылка);
	Дата = Формат(Объект.Дата, "ДФ=yyMM");
	Номер = СтрЗаменить(Объект.Номер, "-", "");
	Код = Строка(Префикс) + Строка(Дата) + Строка(Номер);
	УИН = ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код);
	
	Возврат УИН;
	
КонецФункции

Функция ПолучитьПрефиксДляУИП(Ссылка) Экспорт

	Соответствие = Новый Соответствие();
	Соответствие.Вставить("ДоговорыКонтрагентов",				"ДОГ");
	Соответствие.Вставить("РеализацияТоваровУслуг",				"НК");
	Соответствие.Вставить("СчетНаОплатуПокупателю",				"СЧ");
	
	Возврат Соответствие[Ссылка.Метаданные().Имя];
	
КонецФункции

Функция ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код,Сдвиг = Неопределено)
	
	Если Сдвиг = Неопределено Тогда
		Сдвиг = 0;
	КонецЕсли;
	
	СтруктураСоответствий = Новый Структура("А ,Б ,В ,Г ,Д ,Е ,Ж ,З ,И ,К ,Л ,М ,Н ,О ,П ,Р ,С ,Т ,У ,Ф ,Х ,Ц ,Ч ,Ш ,Щ ,Э ,Ю ,Я ,Ъ ,Ы ,Ь,
											|A ,B ,C ,D ,E ,F ,G ,H ,I ,J ,K ,L ,M ,N ,O ,P ,Q ,R ,S ,T ,U ,V ,W ,X ,Y ,Z",
											 1 ,2 ,3 ,4 ,5 ,6 ,7 ,8 ,9 ,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,33,36,42,
											 1 ,3 ,17,29,6 ,30,31,13,32,33,10,34,12,35,14,16,36,37,38,18,39,40,41,21,19,42);
	СтрокаЦифр = "0123456789";	
	ВесРазряда = 1+Сдвиг;
	Результат = 0;
	//Замена служебных символов в коде
	СтрокаБукв = "АБВГДЕЖЗИКЛМНОПРСТУФХЦЧШЩЭЮЯЪЫЬABCDEFGHIJKLMNOPQRSTUVWXYZ";
	НовКод = "";
	Для Инд = 1 По СтрДлина(Код) Цикл
		СимволКода = Сред(Код,Инд,1);
		Попытка
			СимволКода = ВРЕГ(СимволКода);
		Исключение
		КонецПопытки;
		Если СтрНайти(СтрокаЦифр,СимволКода)=0 И СтрНайти(СтрокаБукв,СимволКода)=0 Тогда
			НовКод = НовКод + "0";
		Иначе
			НовКод = НовКод + СимволКода;
		КонецЕсли;
	КонецЦикла;
	Код = НовКод;
	//Конец замены
	Если СтрДлина(Код)<19 Тогда
		СтрокаКода = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(Код,19,"0","Справа");
	Иначе
		СтрокаКода = Лев(Код,19);
	КонецЕсли;
	
	Для Инд = 1 По 19 Цикл 
		СимволКода = Сред(СтрокаКода,Инд,1);
		Если СтрНайти(СтрокаЦифр,СимволКода)>0 Тогда
			Значение = Число(СимволКода);
		ИначеЕсли СтруктураСоответствий.Свойство(ВРег(СимволКода)) Тогда
			Значение = СтруктураСоответствий[СимволКода]%10;			
		КонецЕсли;		
		Результат = Результат + ВесРазряда*Значение;
		
		ВесРазряда = ВесРазряда + 1;
		Если ВесРазряда = 11 Тогда
			ВесРазряда = 1;
		КонецЕсли;
	КонецЦикла;
	
	КонтрольныйРазряд = Результат % 11;
	
	Если КонтрольныйРазряд = 10 Тогда
		Если Сдвиг = 0 Тогда
			Возврат ПолучитьУникальныйИдентификаторПлатежаСКонтрольнымРазрядом(Код,2);
		Иначе
			КонтрольныйРазряд = 0;
		КонецЕсли;
	КонецЕсли;
	
	ПолныйКод = СтрокаКода+Строка(КонтрольныйРазряд);
	
	Возврат ПолныйКод;
	
КонецФункции

#КонецОбласти

// Функция сохранена для поддержания совместимости с предыдущими версиями. Перенесена из ОМ.КонтрольЛимитовУХ
Функция ПолучитьСохраненныеЛимиты(Ссылка, Знач ВидБюджета = Неопределено)
	// 
	Подзапросы = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	Подзапросы.Добавить(0, "ЛимитыБюджет");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОперативныйПлан") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОперативныйПланРезультатыКонтроля.СтатьяБюджета КАК СтатьяБюджета,
		|	ОперативныйПланРезультатыКонтроля.Аналитика1 КАК Аналитика1,
		|	ОперативныйПланРезультатыКонтроля.Аналитика2 КАК Аналитика2,
		|	ОперативныйПланРезультатыКонтроля.Аналитика3 КАК Аналитика3,
		|	ОперативныйПланРезультатыКонтроля.Аналитика4 КАК Аналитика4,
		|	ОперативныйПланРезультатыКонтроля.Аналитика5 КАК Аналитика5,
		|	ОперативныйПланРезультатыКонтроля.Аналитика6 КАК Аналитика6,
		|	ОперативныйПланРезультатыКонтроля.Валюта КАК Валюта,
		|	ОперативныйПланРезультатыКонтроля.Лимит КАК СуммаКонтроль,
		|	ОперативныйПланРезультатыКонтроля.Зарезервировано + ОперативныйПланРезультатыКонтроля.Заявлено + ОперативныйПланРезультатыКонтроля.Исполнено КАК СуммаИсполнение,
		|	ОперативныйПланРезультатыКонтроля.Лимит - (ОперативныйПланРезультатыКонтроля.Зарезервировано + ОперативныйПланРезультатыКонтроля.Заявлено + ОперативныйПланРезультатыКонтроля.Исполнено) КАК СуммаКИспользованию,
		|	-(ОперативныйПланРезультатыКонтроля.ЛимитИзменение - ОперативныйПланРезультатыКонтроля.ЗарезервированоИзменение - ОперативныйПланРезультатыКонтроля.ЗаявленоИзменение - ОперативныйПланРезультатыКонтроля.ИсполненоИзменение) КАК Сумма,
		|	ОперативныйПланРезультатыКонтроля.Лимит - (ОперативныйПланРезультатыКонтроля.Зарезервировано + ОперативныйПланРезультатыКонтроля.Заявлено + ОперативныйПланРезультатыКонтроля.Исполнено) - (-ОперативныйПланРезультатыКонтроля.ЛимитИзменение + ОперативныйПланРезультатыКонтроля.ЗарезервированоИзменение + ОперативныйПланРезультатыКонтроля.ЗаявленоИзменение + ОперативныйПланРезультатыКонтроля.ИсполненоИзменение) КАК СуммаПланируемыйОстаток
		|ИЗ
		|	Документ.ОперативныйПлан.РезультатыКонтроля КАК ОперативныйПланРезультатыКонтроля
		|ГДЕ
		|	ОперативныйПланРезультатыКонтроля.Ссылка = &Регистратор
		|	И ОперативныйПланРезультатыКонтроля.УдалитьИдКонтроля = ЗНАЧЕНИЕ(Справочник.УдалитьВидыКонтроля.КонтрольБюджета)";
	ИначеЕсли ЗаявкиНаОперации.ЭтоЗаявкаНаОперацию(Ссылка) Тогда
		Подзапросы.Добавить(1, "ЛимитыВзаиморасчеты");
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РезультатыКонтроля.СтатьяБюджета КАК СтатьяБюджета,
		|	РезультатыКонтроля.Аналитика1 КАК Аналитика1,
		|	РезультатыКонтроля.Аналитика2 КАК Аналитика2,
		|	РезультатыКонтроля.Аналитика3 КАК Аналитика3,
		|	РезультатыКонтроля.Аналитика4 КАК Аналитика4,
		|	РезультатыКонтроля.Аналитика5 КАК Аналитика5,
		|	РезультатыКонтроля.Аналитика6 КАК Аналитика6,
		|	РезультатыКонтроля.Валюта КАК Валюта,
		|	РезультатыКонтроля.Лимит КАК Лимит,
		|	РезультатыКонтроля.Зарезервировано + РезультатыКонтроля.Заявлено + РезультатыКонтроля.Исполнено КАК Поле1,
		|	РезультатыКонтроля.Лимит - (РезультатыКонтроля.Зарезервировано + РезультатыКонтроля.Заявлено + РезультатыКонтроля.Исполнено) КАК Поле2,
		|	-(РезультатыКонтроля.ЛимитИзменение - РезультатыКонтроля.ЗарезервированоИзменение - РезультатыКонтроля.ЗаявленоИзменение - РезультатыКонтроля.ИсполненоИзменение) КАК Поле3,
		|	РезультатыКонтроля.Лимит - (РезультатыКонтроля.Зарезервировано + РезультатыКонтроля.Заявлено + РезультатыКонтроля.Исполнено) - (-РезультатыКонтроля.ЛимитИзменение + РезультатыКонтроля.ЗарезервированоИзменение + РезультатыКонтроля.ЗаявленоИзменение + РезультатыКонтроля.ИсполненоИзменение) КАК Поле4
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РезультатыКонтроля КАК РезультатыКонтроля
		|ГДЕ
		|	РезультатыКонтроля.Ссылка = &Регистратор
		|	И РезультатыКонтроля.ИдКонтроля = ЗНАЧЕНИЕ(Справочник.УдалитьВидыКонтроля.КонтрольБюджета)";
		
	КонецЕсли;
		
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СохраненныеЛимитыБюджет.СтатьяДвиженияДенежныхСредств КАК СтатьяБюджета,
	|	СохраненныеЛимитыБюджет.Аналитика1,
	|	СохраненныеЛимитыБюджет.Аналитика2,
	|	СохраненныеЛимитыБюджет.Аналитика3,
	|	СохраненныеЛимитыБюджет.Аналитика4,
	|	СохраненныеЛимитыБюджет.Аналитика5,
	|	СохраненныеЛимитыБюджет.Аналитика6,
	|	СохраненныеЛимитыБюджет.СуммаКонтроль,
	|	СохраненныеЛимитыБюджет.СуммаИсполнение,
	|	СохраненныеЛимитыБюджет.СуммаКИспользованию,
	|	СохраненныеЛимитыБюджет.Сумма,
	|	СохраненныеЛимитыБюджет.СуммаПланируемыйОстаток
	|ИЗ
	|	РегистрСведений.СохраненныеЛимитыБДДС КАК СохраненныеЛимитыБюджет
	|ГДЕ
	|	СохраненныеЛимитыБюджет.Регистратор = &Регистратор";
	
	Если ЗаявкиНаОперации.ЭтоЗаявкаНаОперацию(Ссылка) Тогда
		
		Подзапросы.Добавить(1, "ЛимитыВзаиморасчеты");
		Запрос.Текст = Запрос.Текст + Символы.ПС + 
		"ВЫБРАТЬ
		|	ЗаявкаНаОперациюРезультатыКонтроля.СтатьяБюджета КАК СтатьяБюджета,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Аналитика1 КАК Аналитика1,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Аналитика2 КАК Аналитика2,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Аналитика3 КАК Аналитика3,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Аналитика4 КАК Аналитика4,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Аналитика5 КАК Аналитика5,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Аналитика6 КАК Аналитика6,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Валюта КАК Валюта,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Лимит КАК СуммаКонтроль,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Зарезервировано + ЗаявкаНаОперациюРезультатыКонтроля.Заявлено + ЗаявкаНаОперациюРезультатыКонтроля.Исполнено КАК СуммаИсполнение,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Лимит - (ЗаявкаНаОперациюРезультатыКонтроля.Зарезервировано + ЗаявкаНаОперациюРезультатыКонтроля.Заявлено + ЗаявкаНаОперациюРезультатыКонтроля.Исполнено) КАК СуммаКИспользованию,
		|	-(ЗаявкаНаОперациюРезультатыКонтроля.ЛимитИзменение - ЗаявкаНаОперациюРезультатыКонтроля.ЗарезервированоИзменение - ЗаявкаНаОперациюРезультатыКонтроля.ЗаявленоИзменение - ЗаявкаНаОперациюРезультатыКонтроля.ИсполненоИзменение) КАК Сумма,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Лимит - (ЗаявкаНаОперациюРезультатыКонтроля.Зарезервировано + ЗаявкаНаОперациюРезультатыКонтроля.Заявлено + ЗаявкаНаОперациюРезультатыКонтроля.Исполнено) - (-ЗаявкаНаОперациюРезультатыКонтроля.ЛимитИзменение + ЗаявкаНаОперациюРезультатыКонтроля.ЗарезервированоИзменение + ЗаявкаНаОперациюРезультатыКонтроля.ЗаявленоИзменение + ЗаявкаНаОперациюРезультатыКонтроля.ИсполненоИзменение) КАК СуммаПланируемыйОстаток
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РезультатыКонтроля КАК ЗаявкаНаОперациюРезультатыКонтроля
		|ГДЕ
		|	ЗаявкаНаОперациюРезультатыКонтроля.Ссылка = &Регистратор
		|	И ЗаявкаНаОперациюРезультатыКонтроля.ИдКонтроля = ЗНАЧЕНИЕ(Справочник.УдалитьВидыКонтроля.КонтрольБюджета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗаявкаНаОперациюРезультатыКонтроля.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЗаявкаНаОперациюРезультатыКонтроля.ЛимитЗадолженности КАК ЛимитЗадолженности,
		|	ЗаявкаНаОперациюРезультатыКонтроля.ТекущаяЗадолженность КАК ТекущаяЗадолженность,
		|	ЗаявкаНаОперациюРезультатыКонтроля.Заявлено КАК Заявлено,
		|	ЗаявкаНаОперациюРезультатыКонтроля.СуммаПлатежа КАК СуммаПлатежа,
		|	ЗаявкаНаОперациюРезультатыКонтроля.ПланируемаяЗадолженность КАК ПланируемаяЗадолженность
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РезультатыКонтроля КАК ЗаявкаНаОперациюРезультатыКонтроля
		|ГДЕ
		|	ЗаявкаНаОперациюРезультатыКонтроля.Ссылка = &Регистратор
		|	И ЗаявкаНаОперациюРезультатыКонтроля.ИдКонтроля = ЗНАЧЕНИЕ(Справочник.УдалитьВидыКонтроля.КонтрольЗадолженностиПоДоговору)";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявкаНаРасходованиеДенежныхСредств", Ссылка.Метаданные().Имя);
	
	Результат = Запрос.ВыполнитьПакет();
	
	СохраненныеЛимиты = Новый Структура;
	
	Для Каждого Подзапрос Из Подзапросы Цикл
		СохраненныеЛимиты.Вставить(Подзапрос.Представление, Результат[Подзапрос.Значение].Выгрузить());
	КонецЦикла;
	
	Возврат СохраненныеЛимиты;
	
КонецФункции

