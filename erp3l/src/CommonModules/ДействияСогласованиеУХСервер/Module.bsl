////////////////////////////////////////////////////////////////////////////////
// Модуль хранит универсальные команды работы с согласованием в контексте 
// серверного кода.
////////////////////////////////////////////////////////////////////////////////

Функция ВернутьЦФОПоОбъекту(Ссылка) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЦФО",Ссылка.Метаданные()) Тогда
		
		ОрганизацияОтбор=Ссылка.ЦФО;
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация",Ссылка.Метаданные()) Тогда
		
		ОрганизацияОтбор=Ссылка.Организация;
		
	Иначе
		
		ОрганизацияОтбор=Справочники.Организации.ПустаяСсылка();
		
	КонецЕсли;
	
	Возврат ОрганизацияОтбор;
		
КонецФункции // ВернутьЦФОПоОбъекту()

Функция ВозможноПроведениеОбъекта(Ссылка) Экспорт
	РезультатФункции = Ложь;
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда 
		РезультатФункции = Ложь;
	Иначе	
		РазрешеноПроведениеВМетаданных = Ссылка.Метаданные().Проведение;
		РезультатФункции = (СокрЛП(Строка(РазрешеноПроведениеВМетаданных)) <> "Запретить");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ВозможноПроведениеОбъекта() 

Процедура УстановитьТекущегоОтветственного(Форма) Экспорт
	
	Форма.Согласующий =  УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(Форма.Объект.Ссылка, ВернутьЦФОПоОбъекту(Форма.Объект.Ссылка));
	
КонецПроцедуры

Процедура УстановитьДоступностьЭлементов(Форма, Доступность, ТипСсылки = Неопределено) Экспорт
	
	ЭтоЭкземплярОтчета = (ТипСсылки = Тип("ДокументСсылка.НастраиваемыйОтчет"));
	
	Для Каждого Элемент ИЗ Форма.Элементы Цикл
		
		Если ЭтоЭкземплярОтчета И (Элемент.Имя = "СостояниеЗаявки") Тогда 
			Продолжить;				// у экземпляра отчета изменение согласования доступно всегда.
		ИначеЕсли ТипЗнч(Элемент) = Тип("ПолеФормы") Тогда
			 Элемент.ТолькоПросмотр = НЕ Доступность;
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры

// Определяет доступность элементов согласования формы, в зависимости 
// от статуса согласования.
Процедура ОпределитьСостояниеЗаявки(Форма, ОбновитьОтветственныхВход = Ложь) Экспорт

	// Функция - заглушка для совместимости с предыдущими версиями
	МодульУправленияПроцессамиУХ.ОпределитьСостояние(Форма, ОбновитьОтветственныхВход);
	
КонецПроцедуры

Процедура ОпределитьСостояние(Форма) Экспорт

	Если Форма=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Форма.Объект.Ссылка);
	Форма.Элементы.СостояниеЗаявки.СписокВыбора.Очистить();
	Форма.Элементы.СостояниеЗаявки.СписокВыбора.Добавить(Форма.СостояниеЗаявки);
	
	Форма.Элементы.ОтменитьСогласование.Доступность = Ложь;
		
	Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница = ?(ЗначениеЗаполнено(Форма.СостояниеЗаявки), Форма.Элементы.НетМаршрутаСогласованияВОбработке, Форма.Элементы.НетМаршрутаСогласования);
		
	Если ЗначениеЗаполнено(Форма.СостояниеЗаявки) Тогда
		
		Если Форма.СостояниеЗаявки = Перечисления.СостоянияСогласования.Отклонена Тогда
			
			Форма.Элементы.СостояниеЗаявки.СписокВыбора.Добавить(Перечисления.СостоянияСогласования.НаУтверждении);
			УстановитьДоступностьЭлементов(Форма,Истина);
			
		ИначеЕсли Форма.СостояниеЗаявки = Перечисления.СостоянияСогласования.НаУтверждении Тогда
			
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ВернутьЦФОПоОбъекту(Форма.Объект.Ссылка));
			
			Если НЕ ЕстьСуперПользователь Тогда
				УстановитьДоступностьЭлементов(Форма,Ложь);
			КонецЕсли;
			
			Форма.Элементы.СнятьСОбработки.Доступность = ЕстьСуперПользователь;
			
			Если ПользовательИмеетПравоУтверждатьЗаявку(Форма) Тогда
				Форма.Элементы.СостояниеЗаявки.СписокВыбора.Добавить(Перечисления.СостоянияСогласования.Утверждена);
				Форма.Элементы.СостояниеЗаявки.СписокВыбора.Добавить(Перечисления.СостоянияСогласования.Отклонена);
			КонецЕсли;
				
		ИначеЕсли Форма.СостояниеЗаявки = Перечисления.СостоянияСогласования.Утверждена Тогда
			
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ВернутьЦФОПоОбъекту(Форма.Объект.Ссылка));
			
			Если НЕ ЕстьСуперПользователь Тогда
				УстановитьДоступностьЭлементов(Форма,Ложь);
			КонецЕсли;
			
			Форма.Элементы.СнятьСОбработки.Доступность      = ЕстьСуперПользователь;
			Если ПользовательИмеетПравоУтверждатьЗаявку(Форма) Тогда
				Форма.Элементы.СостояниеЗаявки.СписокВыбора.Добавить(Перечисления.СостоянияСогласования.НаУтверждении);
				Форма.Элементы.СостояниеЗаявки.СписокВыбора.Добавить(Перечисления.СостоянияСогласования.Отклонена);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПользовательИмеетПравоУтверждатьЗаявку(Форма) Экспорт
	
	Возврат НЕ ЗначениеЗаполнено(Форма.Согласующий) ИЛИ (ТипЗнч(Форма.Согласующий) = Тип("СправочникСсылка.Пользователи") И Форма.Согласующий = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	
КонецФункции
	
Функция ПолучитьЗаявкуНСИИзменение(Ссылка) Экспорт 
	
	
	//Проверим - является ли объект контролируемым
	СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию(Ссылка.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	Если НЕ СправочникБД.Контролируемый Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Справочник не является контролируемым!
		|Работа через заявки НСИ возможна только для контролируемых справочников'"));
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;

	Если  Ссылка.НСИ_НеАктивный    Тогда   //Если неактивный тогда открываем или создаем заявку на создание нового... 
		
		Заявка = СуществуетРабочаяЗаявка("РегистрацияНового",Ссылка);
		Если Заявка=Неопределено Тогда
			
			//Создаем новую заявку на регистрацию ЦНСИ
			
			Попытка
				ТекЗаявка = Документы.ЗаявкаНаИзменениеНСИ.СоздатьДокумент();
				ТекЗаявка.Заполнить(Неопределено);
				ТекЗаявка.Дата = ТекущаяДата();
				ТекЗаявка.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта;
				ТекЗаявка.СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию(Ссылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
				ТекЗаявка.ИмяОбъектаМетаданных = ТекЗаявка.СправочникБД.Наименование;
				ТекЗаявка.ИзменяемыйОбъект=Ссылка;
				ТекЗаявка.Ответственный = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
				Если ТекЗаявка.СправочникБД.РазделятьПоОрганизациям Тогда
					ТекЗаявка.Организация = Ссылка.Организация;
				КонецЕсли;
				
				ТекЗаявка.Записать();
				
				Возврат ТекЗаявка.Ссылка;  			
				
			Исключение
				Сообщить(ОписаниеОшибки());
			КонецПопытки;	
			
		Иначе
			Возврат Заявка;
		КонецЕсли;
		
	ИначеЕсли  НЕ Ссылка.НСИ_НеАктивный  Тогда//Если Активный тогда открываем или создаем заявку на изменение
		
		Заявка = СуществуетРабочаяЗаявка("ИзменениеАктивного",Ссылка);
		
		Если Заявка=Неопределено Тогда
			
			//Создаем новую заявку на изменение ЦНСИ
			Попытка
				ТекЗаявка = Документы.ЗаявкаНаИзменениеНСИ.СоздатьДокумент();
				ТекЗаявка.Дата = ТекущаяДата();
				ТекЗаявка.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта;
				ТекЗаявка.СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию(Ссылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
				ТекЗаявка.ИмяОбъектаМетаданных = ТекЗаявка.СправочникБД.Наименование;
				ТекЗаявка.ИзменяемыйОбъект=Ссылка;
				ТекЗаявка.Ответственный = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
				Если ТекЗаявка.СправочникБД.РазделятьПоОрганизациям Тогда
					ТекЗаявка.Организация = Ссылка.Организация;
				КонецЕсли;
				ТекЗаявка.Записать();
				Возврат ТекЗаявка.Ссылка;  			
				
			Исключение
				Сообщить(ОписаниеОшибки());				
			КонецПопытки;	
		Иначе
			Возврат Заявка;
		КонецЕсли;
		
		Возврат Неопределено; 
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЗаявкуНСИУдаление(Ссылка) Экспорт 
	
	
	//Проверим - является ли объект контролируемым
	СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию(Ссылка.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	Если НЕ СправочникБД.Контролируемый Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Справочник не является контролируемым!
		|Работа через заявки НСИ возможна только для контролируемых справочников'"));
		Отказ = Истина;
		Возврат Неопределено;
	КонецЕсли;

	
	Если  Ссылка.НСИ_НеАктивный    Тогда   //Если неактивный тогда нет необходимости удалять через заявку...
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Элемент еще не зарегистрирован!
		|Удаление элемента через заявки возможно только для зарегистрированных элементов'"));
		Возврат Неопределено;

		
	ИначеЕсли  НЕ Ссылка.НСИ_НеАктивный  Тогда//Если Активный тогда открываем или создаем заявку на удаление... 
		
		Заявка = СуществуетРабочаяЗаявка("УдалениеАктивного",Ссылка);
		
		Если Заявка=Неопределено Тогда
			
			//Создаем новую заявку на удаление ЦНСИ
			Попытка
				ТекЗаявка = Документы.ЗаявкаНаИзменениеНСИ.СоздатьДокумент();
				ТекЗаявка.Дата = ТекущаяДата();
				ТекЗаявка.ВидОперации=Перечисления.ВидыОперацийИзмененияНСИ.УдалениеОбъекта;
				ТекЗаявка.СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию(Ссылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
				ТекЗаявка.ИмяОбъектаМетаданных = ТекЗаявка.СправочникБД.Наименование;
				ТекЗаявка.ИзменяемыйОбъект=Ссылка;
				Если ТекЗаявка.СправочникБД.РазделятьПоОрганизациям Тогда
					ТекЗаявка.Организация = Ссылка.Организация;
				КонецЕсли;
				ТекЗаявка.Записать();
				Возврат ТекЗаявка.Ссылка;  			
				
			Исключение
				Сообщить(ОписаниеОшибки());				
			КонецПопытки;	
		Иначе
			Возврат Заявка;
		КонецЕсли;
		
		Возврат Неопределено; 
	КонецЕсли;
	
КонецФункции

Функция  СуществуетРабочаяЗаявка(ВидЗаявки, Ссылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЗаявкаНаИзменениеНСИ.Ссылка,
	|	ЗаявкаНаИзменениеНСИ.ИзменяемыйОбъект,
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта
	|ИЗ
	|	Документ.ЗаявкаНаИзменениеНСИ КАК ЗаявкаНаИзменениеНСИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО ЗаявкаНаИзменениеНСИ.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|ГДЕ
	|	ЗаявкаНаИзменениеНСИ.ИзменяемыйОбъект = &Ссылка
	|	И ЗаявкаНаИзменениеНСИ.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкаНаИзменениеНСИ.ВидОперации = &ВидОперации
	|	И РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта <> &СостояниеУтвержден";
	
	Запрос.УстановитьПараметр("Ссылка",Ссылка);
	Запрос.УстановитьПараметр("СостояниеУтвержден", Перечисления.СостоянияСогласования.Утверждена);
	Если ВидЗаявки = "РегистрацияНового" Тогда
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта);
	ИначеЕсли ВидЗаявки = "ИзменениеАктивного" Тогда
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта);
	Иначе
		Запрос.УстановитьПараметр("ВидОперации",Перечисления.ВидыОперацийИзмененияНСИ.УдалениеОбъекта);
	КонецЕсли;
	
	ВыгрузкаЗаявок = Запрос.Выполнить().Выгрузить();
	Если  ВыгрузкаЗаявок.Количество() = 0 Тогда
		Возврат Неопределено;	
	Иначе			
		 Возврат ВыгрузкаЗаявок[0].Ссылка;	
	КонецЕсли;
	
КонецФункции	

Функция ПолучитьСостояниеСогласования_Черновик(ТипОбъектаСогласования)

	Если ТипОбъектаСогласования = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		Возврат Перечисления.СостоянияОтчетов.Выполняется;
	ИначеЕсли ЗаявкиНаОперацииКлиентСервер.ЭтоЗаявкаНаОперацию(ТипОбъектаСогласования) Тогда
		Возврат Перечисления.СостоянияСогласования.Черновик;
	Иначе
		Возврат Справочники.СостоянияСогласования.Черновик;
	КонецЕсли;

КонецФункции

Функция ПолучитьСостояниеСогласования_НаУтверждении(ТипОбъектаСогласования)

	Если ТипОбъектаСогласования = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		Возврат Перечисления.СостоянияОтчетов.Подготовлен;
	ИначеЕсли ЗаявкиНаОперацииКлиентСервер.ЭтоЗаявкаНаОперацию(ТипОбъектаСогласования) Тогда
		Возврат Перечисления.СостоянияСогласования.НаУтверждении;
	Иначе
		Возврат Справочники.СостоянияСогласования.НаУтверждении;
	КонецЕсли;

КонецФункции

Функция ПолучитьСостояниеСогласования_Отклонен(ТипОбъектаСогласования)

	Если ТипОбъектаСогласования = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		Возврат Перечисления.СостоянияОтчетов.Возвращен;
	ИначеЕсли ЗаявкиНаОперацииКлиентСервер.ЭтоЗаявкаНаОперацию(ТипОбъектаСогласования) Тогда
		Возврат Перечисления.СостоянияСогласования.Отклонена;
	Иначе
		Возврат Справочники.СостоянияСогласования.Отклонено;
	КонецЕсли;

КонецФункции

Функция ПолучитьСостояниеСогласования_Утвержден(ТипОбъектаСогласования) Экспорт

	Если ТипОбъектаСогласования = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		Возврат Перечисления.СостоянияОтчетов.Утвержден;
	ИначеЕсли ЗаявкиНаОперацииКлиентСервер.ЭтоЗаявкаНаОперацию(ТипОбъектаСогласования) Тогда
		Возврат Перечисления.СостоянияСогласования.Утверждена;
	Иначе
		СсылкаНаОбъектБД = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБдПоТипу(ТипОбъектаСогласования);
		Если ЗначениеЗаполнено(СсылкаНаОбъектБД) Тогда
			Возврат СсылкаНаОбъектБД.ЗначениеРеквизитаСостоянияУтвержден;
		Иначе	
			Возврат Справочники.СостоянияСогласования.Утверждено;
		КонецЕсли;
	КонецЕсли;

КонецФункции

Процедура ОпределитьСостояниеОбъекта(Форма) Экспорт

	Если Форма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаСостояние = "СостояниеЗаявки";
	ДоступныеСостояния = Новый Массив;
	
	Реквизиты = Форма.ПолучитьРеквизиты();	
	
	ЕстьРеквизитыСогласования = 0;
	
	Для Каждого Рек Из Реквизиты Цикл 
		
		Если Рек.Имя = "Согласующий" Тогда
			ЕстьРеквизитыСогласования = ЕстьРеквизитыСогласования + 1;
		КонецЕсли;
		Если Рек.Имя = ИмяРеквизитаСостояние Тогда
			ЕстьРеквизитыСогласования = ЕстьРеквизитыСогласования + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРеквизитыСогласования <> 2 Тогда
		Возврат;
	КонецЕсли;
	
	Элементы 		= Форма.Элементы;
	ОбъектСсылка 	= Форма.Объект.Ссылка;
	ТипСсылки 		= ТипЗнч(ОбъектСсылка);
	
	Если ЗначениеЗаполнено(Форма[ИмяРеквизитаСостояние]) Тогда
		СостояниеЗаявки = Форма[ИмяРеквизитаСостояние];
	Иначе
		СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(ОбъектСсылка);
	КонецЕсли;	
	
	ДоступныеСостояния.Добавить(СостояниеЗаявки);
	
	Если Не ЗначениеЗаполнено(Форма.Согласующий) Тогда
		УстановитьТекущегоОтветственного(Форма);		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеЗаявки) И НЕ СостояниеЗаявки = Перечисления.СостоянияПроцесса.Черновик Тогда		
		Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница = Элементы.МаршрутСогласованияЗапущен;
	Иначе	
	    Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница = Элементы.МаршрутСогласованияНеЗапущен;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СостояниеЗаявки) ИЛИ ДоступныеСостояния.Количество() = 0 Тогда
		СостояниеЗаявки = ПолучитьСостояниеСогласования_Черновик(ТипСсылки);
	Иначе
		//Элементы.СостояниеЗаявки.Видимость = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеЗаявки) Тогда
		
		Если СостояниеЗаявки = ПолучитьСостояниеСогласования_Отклонен(ТипСсылки) Тогда
			
			ДоступныеСостояния.Добавить(ПолучитьСостояниеСогласования_НаУтверждении(ТипСсылки));			
			Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница = Элементы.МаршрутСогласованияНеЗапущен;
				
		ИначеЕсли СостояниеЗаявки = ПолучитьСостояниеСогласования_НаУтверждении(ТипСсылки) Тогда
			
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ВернутьЦФОПоОбъекту(Форма.Объект.Ссылка));
	
			Элементы.ОтменитьСогласование.Доступность = ЕстьСуперПользователь;
						
			Если НЕ ЕстьСуперПользователь Тогда
				УстановитьДоступностьЭлементов(Форма, Ложь, ТипСсылки);
			КонецЕсли;
										
		ИначеЕсли СостояниеЗаявки = ПолучитьСостояниеСогласования_Утвержден(ТипСсылки) Тогда
			
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ВернутьЦФОПоОбъекту(Форма.Объект.Ссылка));
			
			Если НЕ ЕстьСуперПользователь Тогда
				УстановитьДоступностьЭлементов(Форма, Ложь, ТипСсылки);
			КонецЕсли;
			
			Элементы.ОтменитьСогласование.Доступность = ЕстьСуперПользователь;
			Элементы.СогласоватьДокумент.Доступность = Ложь;
			
		Иначе
			
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ВернутьЦФОПоОбъекту(Форма.Объект.Ссылка));
			
			Элементы.ОтменитьСогласование.Доступность = ЕстьСуперПользователь;
			Элементы.СогласоватьДокумент.Доступность = Истина;
						
		КонецЕсли;
		
	КонецЕсли;
	
	Форма[ИмяРеквизитаСостояние] = СостояниеЗаявки;
		
КонецПроцедуры

// Возвращает массив ссылок на непроведенных документы из массива выделенных строк СтрокиСогласованияВход.
Функция ВернутьМассивНепроведенныхДокументовВыделенныхСтрок(СтрокиСогласованияВход) Экспорт
	РезультатФункции = Новый Массив;
	Для Каждого ТекСтрокиСогласованияВход Из СтрокиСогласованияВход Цикл
		Если ВозможноПроведениеОбъекта(ТекСтрокиСогласованияВход) Тогда
			Если НЕ ТекСтрокиСогласованияВход.Проведен Тогда
				РезультатФункции.Добавить(ТекСтрокиСогласованияВход);
			Иначе
				// Пропускаем.
			КонецЕсли;
		Иначе
			// Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивНепроведенныхДокументовВыделенныхСтрок()

// Возвращает массив имен реквизитов организации для формы согласуемого объекта ОбъектВход.
Функция ПолучитьМассивИменРеквизитаОрганизацииСогласования(Форма) Экспорт
	РезультатФункции = Новый Массив;
	Попытка
		// Получим реквизит разделения по организации для данного объекта ИБ.
		ОбъектФормы = Форма.Объект;
		СправочникМетаданного = МодульУправленияОповещениямиУХ.ПолучитьТипОбъектаОповещенияПоСсылке(ОбъектФормы.Ссылка);
		Если ЗначениеЗаполнено(СправочникМетаданного) Тогда
			РеквизитОрганизации = СправочникМетаданного.РеквизитРазделенияПоОрганизациям;
			// Проверим существование такого реквизита у объекта.
			Если ЗначениеЗаполнено(РеквизитОрганизации) Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектФормы, РеквизитОрганизации) Тогда
					// Найдём элементы формы типа ПолеФормы, ссылающиеся на данный реквизит объекта.
					Для Каждого ТекЭлементы Из Форма.Элементы Цикл
						Если ТипЗнч(ТекЭлементы) = Тип("ПолеФормы") Тогда
							Если ТекЭлементы.ПутьКДанным = "Объект." + РеквизитОрганизации Тогда
								РезультатФункции.Добавить(ТекЭлементы.Имя); 
							Иначе
								// Выполняем поиск далее.
							КонецЕсли;
						Иначе
							// Выполняем поиск далее.
						КонецЕсли;
					КонецЦикла;	
				Иначе
					РезультатФункции = Новый Массив;        // Нет реквизита на форме.
				КонецЕсли;
			Иначе
				РезультатФункции = Новый Массив;			// Пустой реквизит организации.
			КонецЕсли;
		Иначе
			РезультатФункции = Новый Массив;				// Нет справочника БД.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении реквизита организации для объекта возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Новый Массив;					// Возникла ошибка.
	КонецПопытки;
	Возврат РезультатФункции;		
КонецФункции		// ПолучитьМассивИменРеквизитаОрганизацииСогласования()

// Устанавливает в таблицу обработчиков события организации при изменении на форме Форма
// текущий обработчик элемента ЭлементОрганизацияВход.
Процедура ЗаписатьПредыдущийОбработчикИзмененияОрганизации(Форма, ЭлементОрганизацияВход) Экспорт
	// Получаем предыдущий обработчик.
	ПредыдущийОбработчик = ЭлементОрганизацияВход.ПолучитьДействие("ПриИзменении");
	Если СокрЛП(ПредыдущийОбработчик) <> "" Тогда
		// Поиск обработчика в таблице.
		ИмяЭлемента = ЭлементОрганизацияВход.Имя;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ИмяРеквизита", ИмяЭлемента);
		НайденныеСтроки = Форма.ОбработчикиИзмененияОрганизации.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			// Запись найдена. Запишем обработчик, если она пустая.
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				Если СокрЛП(ТекНайденныеСтроки.ИмяОбработчика) = "" Тогда
					ТекНайденныеСтроки.ИмяОбработчика = ПредыдущийОбработчик;	
				Иначе
					// Оставляем предыдущий вариант.
				КонецЕсли;
			КонецЦикла;	
		Иначе
			// Запись не найдена. Создадим новую.
			НоваяСтрока = Форма.ОбработчикиИзмененияОрганизации.Добавить();
			НоваяСтрока.ИмяРеквизита	 = ИмяЭлемента;
			НоваяСтрока.ИмяОбработчика	 = ПредыдущийОбработчик;
		КонецЕсли;
	Иначе
		// Действие не сопоставлено. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// ЗаписатьПредыдущийОбработчикИзмененияОрганизации()

// Устанавливает новое действие ПриИзменении для реквизитов организации на этой форме.
Функция УстановитьДействиеПриИзмененииСогласованияОрганизации(Форма) Экспорт
	РезультатФункции = ДействияСогласованиеУХСервер.ПолучитьМассивИменРеквизитаОрганизацииСогласования(Форма);
	Форма["ОбработчикиИзмененияОрганизации"].Очистить();
	Для Каждого ТекРезультатФункции Из РезультатФункции Цикл
		ЭлементОрганизация = Форма.Элементы[ТекРезультатФункции];
		ДействияСогласованиеУХСервер.ЗаписатьПредыдущийОбработчикИзмененияОрганизации(Форма, ЭлементОрганизация);
		ЭлементОрганизация.УстановитьДействие("ПриИзменении", "ПриИзмененииЭлементаОрганизации_Подключаемый"); 
	КонецЦикла;	
	Возврат РезультатФункции;	
КонецФункции		// УстановитьДействиеПриИзмененииСогласованияОрганизации()

// Выводит на форму Форма панель согласования и устанавливает обработчики событий
// для элементов панели.
Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма, РодительскаяГруппаВход = неопределено) Экспорт
	ЭлементыФормы = Форма.Элементы;
	ПанельСогласованияРазмещена = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭлементыФормы, "ГруппаСтатусыСогласования");
	Если НЕ ПанельСогласованияРазмещена Тогда
		// Вывод панели согласования.
		Если ТипЗнч(РодительскаяГруппаВход) = Тип("ГруппаФормы") тогда
			МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(ЭлементыФормы, РодительскаяГруппаВход);
		Иначе
			МодульСогласованияДокументовУХ.НарисоватьПанельСогласования(ЭлементыФормы, Форма);
		КонецЕсли;
		// Добавление действие кнопкам согласования.
		Форма.Команды["ПринятьКСогласованию"].Действие	 = "ПринятьКСогласованию_Подключаемый";
		Форма.Команды["ИсторияСогласования"].Действие	 = "ИсторияСогласования_Подключаемый";
		Форма.Команды["СогласоватьДокумент"].Действие	 = "СогласоватьДокумент_Подключаемый";
		Форма.Команды["ОтменитьСогласование"].Действие	 = "ОтменитьСогласование_Подключаемый";
		Форма.Команды["МаршрутСогласования"].Действие	 = "МаршрутСогласования_Подключаемый";
	Иначе
		// Панель уже есть на форме.
	КонецЕсли;
	// Определение состояния и ответственных.
	
	
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(Форма);
	
	
	// Добавление обработчика списка состояний.
	ЭлементСтатусОбъекта = ЭлементыФормы.Найти("СтатусОбъекта");
	Если ЭлементСтатусОбъекта <> Неопределено Тогда
		Если ЭлементСтатусОбъекта.Вид = ВидПоляФормы.ПолеВвода Тогда
			ЭлементСтатусОбъекта.УстановитьДействие("ОбработкаВыбора", "СтатусОбъектаОбработкаВыбора"); 
		Иначе
			// В прочих случаях не устанавливаем обработчик выбора.
		КонецЕсли;
	Иначе
		// Нет элемента Статус объекта.
	КонецЕсли;
	// Добавление обработчиков элементам-организациям.
	#Если НЕ ВебКлиент Тогда
	
	УстановитьДействиеПриИзмененииСогласованияОрганизации(Форма);
	
	#КонецЕсли
КонецПроцедуры		// НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта()

// Выставляет объекту формы и его подчиненным объектам Форма новый статус СтатусВход. 
Функция ИзменитьСостояниеЗаявкиСервер(ОбъектСогласования, СтатусВход) Экспорт
		
	НачатьТранзакцию();
	
	Результат = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСогласования, СтатусВход);
	
	Если Не Результат тогда		
		ОтменитьТранзакцию();
		Возврат ложь;
	КонецЕсли;
	
	Если Результат Тогда
		Результат = УправлениеПроцессамиСогласованияУХ.УстановитьСтатусыПодчиненныхОбъектов(ОбъектСогласования,, СтатусВход);
	КонецЕсли;
		
	Если Результат тогда
		ЗафиксироватьТранзакцию();
		Возврат Истина;
	Иначе		
		ОтменитьТранзакцию();
		Возврат ложь;
	КонецЕсли;
		
КонецФункции		// ИзменитьСостояниеЗаявкиКлиент()