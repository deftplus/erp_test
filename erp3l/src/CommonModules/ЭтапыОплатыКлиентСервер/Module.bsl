
////////////////////////////////////////////////////////////////////////////////
// Модуль "ЭтапыОплатыКлиентСервер" содержит процедуры и функции для 
// формирования представления этапов оплаты,
// работы с таблицей этапов оплаты, не требующие вызова сервера.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ПредставлениеЭтаповОплаты

// Возвращает представление условий оплаты для соглашений,
// включающие в себя форму оплаты, этапы оплаты.
//
// Параметры:
// 		Форма - ФормаКлиентскогоПриложения - форма из которой вызвана функция.
//
// Возвращаемое значение:
// 		Строка - представление условий оплаты.
//
Функция НадписьЭтапыОплатаДляСоглашений(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ФормаОплаты            = Объект.ФормаОплаты;
	ЭтапыГрафикаОплаты     = Объект.ЭтапыГрафикаОплаты;
	КоличествоЭтаповОплаты = ЭтапыГрафикаОплаты.Количество();
	
	Оформление = ПараметрыОформленияНадписиЭтапыОплаты();
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты));
	
	ТекстЭтаповОплаты = "";
	Если КоличествоЭтаповОплаты = 0 Тогда
		
		МассивСтрок.Добавить(", ");
		МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'этапы не указаны';
																|en = 'steps are not set'"), , Оформление.ЦветПредупреждение));
		
	ИначеЕсли КоличествоЭтаповОплаты <= 2 Тогда
		
		МассивСтрок.Добавить(" ");
		Для Сч=1 По КоличествоЭтаповОплаты Цикл
			СтрокаОплаты = ЭтапыГрафикаОплаты[Сч-1];
			ТекстЭтаповОплаты = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '%1 %2% %3 дн';
					|en = '%1 %2% (%3 days)'"),
				ПредставлениеВариантаОплаты(СтрокаОплаты.ВариантОплаты),
				СтрокаОплаты.ПроцентПлатежа, СтрокаОплаты.Сдвиг);
			МассивСтрок.Добавить(ТекстЭтаповОплаты);
			МассивСтрок.Добавить(", ");
		КонецЦикла;
		МассивСтрок.Удалить(МассивСтрок.Количество()-1);
		
	Иначе
		
		ТекстЭтапа = ОбщегоНазначенияУТКлиентСервер.СклонениеСлова(
			КоличествоЭтаповОплаты,
			НСтр("ru = 'этапы';
				|en = 'stages'"), НСтр("ru = 'этапа';
									|en = 'stage'"), НСтр("ru = 'этапов';
														|en = 'steps'"), НСтр("ru = 'м';
																				|en = 'm'"));
			
		МассивСтрок.Добавить(" ");
		МассивСтрок.Добавить(НСтр("ru = 'в';
									|en = 'in'") +" " + Формат(КоличествоЭтаповОплаты, "ЧН=0") +" " + ТекстЭтапа);
		
	КонецЕсли;
	
	ТекстНадписи = Новый ФорматированнаяСтрока(МассивСтрок);
	Возврат ТекстНадписи;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеИРаспределениеЭтаповОплаты

// Распределяет сумму по этапам оплаты
//
// Параметры:
// ЭтапыГрафика
// 		ЭтапыГрафикаОплаты -ТаблицаЗначений - таблица этапов оплаты, в которой необходимо распределить сумму
// 		СуммаКРаспределениюОплаты - Число - сумма платежей, которую необходимо распределить по этапам
// 		СуммаКРаспределениюЗалога - Число - Необязательный, сумма залога за тару, которую необходимо распределить по этапам
// 		СуммаКРаспределениюВзаиморасчетов - Число - Необязательный, сумма взаиморасчетов документа, которую необходимо распределить по этапам.
// 		СуммаКРаспределениюВзаиморасчетовПоТаре - Число - Необязательный, сумма взаиморасчетов по таре документа, которую необходимо распределить по этапам.
//
Процедура РаспределитьСуммуПоЭтапамГрафикаОплаты(ЭтапыГрафикаОплаты, Знач СуммаКРаспределениюОплаты, 
	Знач СуммаКРаспределениюЗалога = 0, Знач СуммаКРаспределениюВзаиморасчетов = 0, Знач СуммаКРаспределениюВзаиморасчетовПоТаре = 0) Экспорт
	
	РаспределеннаяСуммаОплаты               = 0;
	РаспределеннаяСуммаЗалога               = 0;
	РаспределеннаяСуммаВзаиморасчетов       = 0;
	РаспределеннаяСуммаВзаиморасчетовПоТаре = 0;
	ВалютыСовпадают                         = СуммаКРаспределениюОплаты = СуммаКРаспределениюВзаиморасчетов;
	ТекущийЭтап                             = 0;
	ПроцентПлатежа                          = 0;
	ПроцентЗалогаЗаТару                     = 0;
	ЕстьЛишниеЭтапы                         = Ложь;
	КоличествоЭтапов                        = ЭтапыГрафикаОплаты.Количество();
	
	Для Каждого ЭтапГрафикаОплаты Из ЭтапыГрафикаОплаты Цикл
		
		ДанныеЭтапа = Новый Структура();
		ДанныеЭтапа.Вставить("ПроцентПлатежа", 0);
		ДанныеЭтапа.Вставить("СуммаПлатежа", 0);
		ДанныеЭтапа.Вставить("СуммаВзаиморасчетов", 0);
		ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару", 0);
		ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару", 0);
		ДанныеЭтапа.Вставить("СуммаВзаиморасчетовПоТаре", 0);
		
		ЗаполнитьЗначенияСвойств(ДанныеЭтапа, ЭтапГрафикаОплаты);
		
		ТекущийЭтап = ТекущийЭтап + 1;
		
		// Если сумма платежей по всем этапам менее ста процентов или 
		// проценты текущего этапа равны 0 -
		// добавим недостающие проценты.
		
		ПроцентыТекущегоЭтапаНулевые = (ДанныеЭтапа.ПроцентПлатежа = 0 И ДанныеЭтапа.ПроцентЗалогаЗаТару = 0);
		
		Если (ТекущийЭтап = КоличествоЭтапов
			И ЭтапыГрафикаОплаты.Итог("ПроцентПлатежа") < 100)
			Или ПроцентыТекущегоЭтапаНулевые Тогда
			
			ДанныеЭтапа.ПроцентПлатежа = 100 - ПроцентПлатежа;
			
		КонецЕсли;
		Если (ТекущийЭтап = КоличествоЭтапов И ПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару < 100)
			Или ПроцентыТекущегоЭтапаНулевые Тогда
			
			ДанныеЭтапа.ПроцентЗалогаЗаТару = 100 - ПроцентЗалогаЗаТару;
			
		КонецЕсли;
		
		// Если к текущему этапу общий процент платежа более 100% - 
		// уменьшим процент текущего платежа и удалим "лишние" этапы.
		
		ПроцентПлатежаСТекущимЭтапом = ПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
		ПроцентЗалогаЗаТаруСТекущимЭтапом = ПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
		
		Если ПроцентПлатежаСТекущимЭтапом > 100 Тогда
			ДанныеЭтапа.ПроцентПлатежа = 100 - ПроцентПлатежа;
		КонецЕсли;
		Если ПроцентЗалогаЗаТаруСТекущимЭтапом > 100 Тогда
			ДанныеЭтапа.ПроцентЗалогаЗаТару = 100 - ПроцентЗалогаЗаТару;
		КонецЕсли;
		
		СуммаПлатежаПоЭтапу       = Окр(СуммаКРаспределениюОплаты * ДанныеЭтапа.ПроцентПлатежа / 100,
		                                2,
		                                РежимОкругления.Окр15как20);
		
		ДанныеЭтапа.СуммаПлатежа  = ?(ТекущийЭтап = КоличествоЭтапов,
		                              СуммаКРаспределениюОплаты - РаспределеннаяСуммаОплаты,
		                              СуммаПлатежаПоЭтапу);
		
		РаспределеннаяСуммаОплаты = РаспределеннаяСуммаОплаты + ДанныеЭтапа.СуммаПлатежа;
		ПроцентПлатежа            = ПроцентПлатежа + ДанныеЭтапа.ПроцентПлатежа;
		
		СуммаЗалогаПоЭтапу            = Окр(СуммаКРаспределениюЗалога * ДанныеЭтапа.ПроцентЗалогаЗаТару / 100,
		                                    2,
		                                    РежимОкругления.Окр15как20);
		
		ДанныеЭтапа.СуммаЗалогаЗаТару = ?(ТекущийЭтап = КоличествоЭтапов,
		                                  СуммаКРаспределениюЗалога - РаспределеннаяСуммаЗалога,
		                                  СуммаЗалогаПоЭтапу);
		
		РаспределеннаяСуммаЗалога     = РаспределеннаяСуммаЗалога + ДанныеЭтапа.СуммаЗалогаЗаТару;
		ПроцентЗалогаЗаТару           = ПроцентЗалогаЗаТару + ДанныеЭтапа.ПроцентЗалогаЗаТару;
		
		Если СуммаКРаспределениюВзаиморасчетов <> 0 Тогда
			Если ВалютыСовпадают Тогда
				ДанныеЭтапа.СуммаВзаиморасчетов = ДанныеЭтапа.СуммаПлатежа;
			Иначе
				СуммаВзаиморасчетовПоЭтапу = Окр(СуммаКРаспределениюВзаиморасчетов * ДанныеЭтапа.ПроцентПлатежа / 100, 2, РежимОкругления.Окр15как20);
				
				ДанныеЭтапа.СуммаВзаиморасчетов  = ?(ТекущийЭтап = КоличествоЭтапов,
										СуммаКРаспределениюВзаиморасчетов - РаспределеннаяСуммаВзаиморасчетов,
										СуммаВзаиморасчетовПоЭтапу);
				РаспределеннаяСуммаВзаиморасчетов = РаспределеннаяСуммаВзаиморасчетов + ДанныеЭтапа.СуммаВзаиморасчетов;
			КонецЕсли;
		Иначе
			ДанныеЭтапа.СуммаВзаиморасчетов = 0;
		КонецЕсли;
		
		Если СуммаКРаспределениюВзаиморасчетовПоТаре <> 0 Тогда
			Если ВалютыСовпадают Тогда
				ДанныеЭтапа.СуммаВзаиморасчетовПоТаре = ДанныеЭтапа.СуммаЗалогаЗаТару;
			Иначе
				СуммаВзаиморасчетовПоТареПоЭтапу = Окр(СуммаКРаспределениюВзаиморасчетовПоТаре * ДанныеЭтапа.ПроцентЗалогаЗаТару / 100, 2, РежимОкругления.Окр15как20);
				
				ДанныеЭтапа.СуммаВзаиморасчетовПоТаре  = ?(ТекущийЭтап = КоличествоЭтапов,
										СуммаКРаспределениюВзаиморасчетовПоТаре - РаспределеннаяСуммаВзаиморасчетовПоТаре,
										СуммаВзаиморасчетовПоТареПоЭтапу);
				РаспределеннаяСуммаВзаиморасчетовПоТаре = РаспределеннаяСуммаВзаиморасчетовПоТаре + ДанныеЭтапа.СуммаВзаиморасчетовПоТаре;
			КонецЕсли;
		Иначе
			ДанныеЭтапа.СуммаВзаиморасчетовПоТаре = 0;
		КонецЕсли;
		
		// Если на текущем этапе превышен процент платежа и этап не последний - 
		// необходимо удалять лишние этапы.
		
		Если ТекущийЭтап <> КоличествоЭтапов
			И СуммаКРаспределениюОплаты = 0
			И СуммаКРаспределениюЗалога = 0 Тогда
			ЕстьЛишниеЭтапы = Истина;
			Прервать;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭтапГрафикаОплаты, ДанныеЭтапа);
		
	КонецЦикла;
	
	// Удалим лишние этапы графика оплаты.
	Если ЕстьЛишниеЭтапы Тогда
		
		Для Счетчик = ТекущийЭтап По КоличествоЭтапов-1 Цикл
			ЭтапыГрафикаОплаты.Удалить(ТекущийЭтап);
		КонецЦикла;
		
	КонецЕсли;
	
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьЗначенияСвойствКоллекции(ЭтапыГрафикаОплаты, 0, "СуммаОтклоненияМерныхТоваров");
	
КонецПроцедуры

// Возвращает структуру параметров для метода ДобавитьЭтапОплатыПоУмолчанию()
// 
// Возвращаемое значение:
// 	Структура - Описание:
// * СуммаОтклоненияМерныхТоваров - Число - сумма отклонения мерных товаров.
// * СуммаЗалогаПоДокументу - Число - сумма залога по документу.
// * СуммаОплатыПоДокументу - Число - сумма к оплате по документу
// * ДатаСеанса - Дата - Дата текущего сеанса пользователя
// * ЖелаемаяДата - Дата - Желаемая дата по документу
// * ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыКлиентом, ПеречислениеСсылка.ВариантыОплатыПоставщику - Вариант оплаты добавляемого этапа
// * Объект - ДокументОбъект - Документ, для которого заполняются этапы графика оплаты
Функция ПараметрыДляДобавленияЭтапаПоУмолчанию() Экспорт
	
	ПараметрыДляДобавления = Новый Структура;
	ПараметрыДляДобавления.Вставить("Объект");
	ПараметрыДляДобавления.Вставить("ВариантОплаты");
	ПараметрыДляДобавления.Вставить("ЖелаемаяДата");
	ПараметрыДляДобавления.Вставить("ДатаСеанса");
	
	ПараметрыДляДобавления.Вставить("СуммаОплатыПоДокументу", 0);
	ПараметрыДляДобавления.Вставить("СуммаЗалогаПоДокументу", 0);
	ПараметрыДляДобавления.Вставить("СуммаОтклоненияМерныхТоваров", 0);
	
	Возврат ПараметрыДляДобавления;
	
КонецФункции

// Добавляет один этап оплаты по умолчанию
//
// Параметры:
//	 Параметры - Структура - Структура параметров с ключами, описанными в методе ПараметрыДляДобавленияЭтапаПоУмолчанию()
Процедура ДобавитьЭтапОплатыПоУмолчанию(Параметры) Экспорт
	
	ЭтапыОплаты = Параметры.Объект.ЭтапыГрафикаОплаты; // ТаблицаЗначений
	
	Если ЗначениеЗаполнено(Параметры.ЖелаемаяДата) Тогда
		ДатаПлатежа = ?(ЗначениеЗаполнено(Параметры.Объект.Дата), Макс(Параметры.ЖелаемаяДата, Параметры.Объект.Дата), Параметры.ЖелаемаяДата);
	ИначеЕсли ЗначениеЗаполнено(Параметры.Объект.Дата) Тогда
		ДатаПлатежа = Параметры.Объект.Дата;
	Иначе
		ДатаПлатежа = Параметры.ДатаСеанса;
	КонецЕсли;
	
	ДанныеЭтапа = Новый Структура;
	ДанныеЭтапа.Вставить("ДатаПлатежа",                  ДатаПлатежа);
	ДанныеЭтапа.Вставить("ВариантОплаты",                Параметры.ВариантОплаты);
	ДанныеЭтапа.Вставить("ПроцентПлатежа",               ?(Параметры.СуммаОплатыПоДокументу = 0, 0, 100));
	ДанныеЭтапа.Вставить("СуммаПлатежа",                 Параметры.СуммаОплатыПоДокументу - Параметры.СуммаОтклоненияМерныхТоваров);
	ДанныеЭтапа.Вставить("ПроцентЗалогаЗаТару",          ?(Параметры.СуммаЗалогаПоДокументу = 0, 0, 100));
	ДанныеЭтапа.Вставить("СуммаЗалогаЗаТару",            Параметры.СуммаЗалогаПоДокументу);
	ДанныеЭтапа.Вставить("СуммаОтклоненияМерныхТоваров", Параметры.СуммаОтклоненияМерныхТоваров);
	
	НовыйЭтап = ЭтапыОплаты.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйЭтап, ДанныеЭтапа);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Возвращает структуру для получение надписи этапов оплаты для документа "Реализация товаров и услуг".
//
// Возвращаемое значение:
// 		Структура
//
Функция СтруктураПолученияНадписиЭтаповОплатыДляРеализацииТоваровУслуг() Экспорт
	
	СтруктураПолученияНадписи = Новый Структура();
	СтруктураПолученияНадписи.Вставить("ФормаОплаты", Неопределено);
	СтруктураПолученияНадписи.Вставить("ПорядокРасчетов", Неопределено);
	СтруктураПолученияНадписи.Вставить("ХозяйственнаяОперация", Неопределено);
	СтруктураПолученияНадписи.Вставить("Дата", Неопределено);
	СтруктураПолученияНадписи.Вставить("ДатаПлатежа", Неопределено);
	СтруктураПолученияНадписи.Вставить("СуммаВсего", 0);
	СтруктураПолученияНадписи.Вставить("СуммаПредоплаты", 0);
	СтруктураПолученияНадписи.Вставить("РеализацияПоЗаказам", Ложь);
	СтруктураПолученияНадписи.Вставить("ИспользоватьСтатусыРеализацийТоваровУслуг", Ложь);
	
	Возврат СтруктураПолученияНадписи;
	
КонецФункции

// Возвращает информативное представление формы оплаты для соглашений
//
// Параметры:
// 		ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - форма оплаты. для которой нужно получить представление.
//
// Возвращаемое значение:
// 		Строка - представление формы оплаты.
//
Функция ПредставлениеФормыОплатыДляСоглашений(ФормаОплаты)
	
	Представление = "";
	
	Если Не ЗначениеЗаполнено(ФормаОплаты) Тогда
		Представление = НСтр("ru = 'Оплата: Любая';
							|en = 'Payment: Any'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.ПлатежнаяКарта") Тогда
		Представление = НСтр("ru = 'Оплата платежной картой';
							|en = 'Payment by payment card'");
	ИначеЕсли ФормаОплаты = ПредопределенноеЗначение("Перечисление.ФормыОплаты.Взаимозачет") Тогда
		Представление = НСтр("ru = 'Взаимозачет';
							|en = 'Offsetting'");
	Иначе
		Представление = НСтр("ru = '%ФормаОплаты% оплата';
							|en = '%ФормаОплаты% payment'");
		Представление = СтрЗаменить(Представление, "%ФормаОплаты%", ФормаОплаты);
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает сокращенное представление формы оплаты
// 
// Параметры:
// 	ВариантОплаты - ПеречислениеСсылка.ВариантыОплатыКлиентом, ПеречислениеСсылка.ВариантыОплатыПоставщику- вариант оплаты. для которого нужно получить представление.
// Возвращаемое значение:
// 	Строка - представление варианта оплаты.
Функция ПредставлениеВариантаОплаты(ВариантОплаты)
	
	Представление = "";
	
	Если ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.ПредоплатаДоПоступления") Тогда
		Представление = НСтр("ru = 'Предоплата';
							|en = 'Prepayment'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитПослеОтгрузки")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.АвансДоОбеспечения")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.АвансДоПодтверждения") Тогда
		Представление = НСтр("ru = 'Аванс';
							|en = 'Advance'");
	ИначеЕсли ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыКлиентом.КредитСдвиг")
		Или ВариантОплаты = ПредопределенноеЗначение("Перечисление.ВариантыОплатыПоставщику.КредитСдвиг") Тогда
		Представление = НСтр("ru = 'Кредит';
							|en = 'Credit'");
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

Функция ПараметрыОформленияНадписиЭтапыОплаты()
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЦветПредупреждение", WebЦвета.Кирпичный);
	СтруктураПараметров.Вставить("ЦветВыделение", Новый Цвет(22, 39, 121));
	СтруктураПараметров.Вставить("ФорматДаты", "ДЛФ=D");
	СтруктураПараметров.Вставить("ФорматДоли", "ЧЦ=3; ЧДЦ=; ЧН=0");
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти
