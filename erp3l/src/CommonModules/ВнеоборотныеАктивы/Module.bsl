////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РасчетАмортизации

// Формирует параметры необходимые для расчета амортизации
// 
// Возвращаемое значение:
//  Структура - Содержит поля:
//      * Период - Дата - Период в котором требуется рассчитать амортизацию (обязательный).
//      * СписокОрганизаций - Массив из СправочникСсылка.Организации -
//      * ОбъектыУчета	- Строка - "ОС" или "НМА".
//      * ЕстьОшибки - Булево - Признак наличия ошибок.
//      * ТекстОшибки - Строка - Текст исключения вызванного ошибкой.
//      * ВернутьПараметрыРасчета - Булево - Истина, если требуется вернуть, параметры расчета амортизации.
//      * АдресПараметровРасчета - Строка - Адрес временного хранилища.
//      * ЗаписатьДанные - Булево - Записать расчет амортизации.
//      * ЭтапРасчета - ПеречислениеСсылка.ОперацииЗакрытияМесяца -
//      * НомерЗадания - Число - Номер задания закрытия месяца.
//      * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//      * ИспользуемыеТаблицы - Строка - Таблицы, которые сформированы при расчете.
//      * КоличествоОбработанныхДанных - Число - Количество данных, обработанных при расчете, используется для замера.
//      * НомерПакета - Число - Номер пакета.
//      * Ссылка - ДокументСсылка.АмортизацияОС2_4, ДокументСсылка.АмортизацияНМА2_4 - Ссылка на документ.
//      * Ответственный	- СправочникСсылка.Пользователи - Ответственный за документ (может быть не заполнен).
//      * Комментарий - Строка - Комментарий документа.
//      * ПакетыАмортизации - ТаблицаЗначений - Содержит список организаций и номера пакетов (может быть не заполнен):
//             ** Организация - СправочникСсылка.Организации -
//             ** НомерПакета - Число -
//
Функция НовыеПараметрыРасчетаАмортизации() Экспорт

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Период", '000101010000');
	ПараметрыРасчета.Вставить("СписокОрганизаций", Новый Массив);
	ПараметрыРасчета.Вставить("ОбъектыУчета", "ОС");
	ПараметрыРасчета.Вставить("ЕстьОшибки", Ложь);
	ПараметрыРасчета.Вставить("ТекстОшибки", "");
	ПараметрыРасчета.Вставить("ВернутьПараметрыРасчета", Ложь);
	ПараметрыРасчета.Вставить("АдресПараметровРасчета", Неопределено);
	ПараметрыРасчета.Вставить("ЗаписатьДанные", Истина);
	ПараметрыРасчета.Вставить("ЭтапРасчета", Неопределено);
	ПараметрыРасчета.Вставить("НомерЗадания", Неопределено);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Неопределено);
	ПараметрыРасчета.Вставить("ИспользуемыеТаблицы", "НачисленнаяАмортизация,НомераПакетовСФилиалами");
	ПараметрыРасчета.Вставить("КоличествоОбработанныхДанных", 0);
	
	// Значения, используемые при расчете из формы документа.
	ПараметрыРасчета.Вставить("НомерПакета", Неопределено);
	ПараметрыРасчета.Вставить("Ссылка", Неопределено);
	ПараметрыРасчета.Вставить("Ответственный", Неопределено);
	ПараметрыРасчета.Вставить("Комментарий", Неопределено);
	
	// Описывает по каким пакетам нужно выполнить расчет.
	// Если у организации есть филиалы, то для корректного расчета они должны быть включены в список.
	ПакетыАмортизации = Новый ТаблицаЗначений;
	ПакетыАмортизации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПакетыАмортизации.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	ПараметрыРасчета.Вставить("ПакетыАмортизации", ПакетыАмортизации);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Выполняет расчет амортизации в заданном месяце и записывает результат с помощью проведения документов "Амортизация ОС".
// При необходимости расчет может выполняться параллельно несколькими заданиями.
//
// Параметры:
//  ПараметрыРасчета - см. ВнеоборотныеАктивы.НовыеПараметрыРасчетаАмортизации
//  АдресХранилища - Строка - Используется для возможности выполнения в фоновом задании.
//
Процедура РассчитатьАмортизацию(ПараметрыРасчета, АдресХранилища) Экспорт

	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.Период) Тогда
		Возврат;
	КонецЕсли; 
	
	ПакетыАмортизации = ПараметрыРасчета.ПакетыАмортизации;
	СписокОрганизаций = ПакетыАмортизации.ВыгрузитьКолонку("Организация");
	
	Попытка
		
		Если ПараметрыРасчета.ОбъектыУчета = "ОС" Тогда
			ИзмененныеПакеты = РегистрыСведений.ПакетыАмортизацииОС.СоздатьПакетыАмортизации(СписокОрганизаций, ПараметрыРасчета.НомерЗадания);
		Иначе
			ИзмененныеПакеты = РегистрыСведений.ПакетыАмортизацииНМА.СоздатьПакетыАмортизации(СписокОрганизаций, ПараметрыРасчета.НомерЗадания);
		КонецЕсли;
		
		ОчередьЗаданийКРасчету = СоздатьОчередьЗаданий(ПараметрыРасчета, ИзмененныеПакеты);
		РезультатВыполнения = ВыполнитьОчередьЗаданий(ОчередьЗаданийКРасчету);
		ПараметрыРасчета.ЕстьОшибки = РезультатВыполнения.ЕстьОшибки;
		ПараметрыРасчета.ТекстОшибки = РезультатВыполнения.ТекстОшибки;
		
	Исключение
		
		ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
		ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыРасчета.ЭтапРасчета,
			ПараметрыРасчета.Период,
			ПараметрыРасчета.СписокОрганизаций, 
			ТекстОшибки,,,
			ПараметрыРасчета.ЕстьОшибки);
			
	КонецПопытки;
	
	РезультатРасчета = Новый Структура;
	РезультатРасчета.Вставить("ЕстьОшибки", ПараметрыРасчета.ЕстьОшибки);
	РезультатРасчета.Вставить("ТекстОшибки", ПараметрыРасчета.ТекстОшибки);

	ПоместитьВоВременноеХранилище(РезультатРасчета, АдресХранилища);
	
КонецПроцедуры

// Используется для расчета амортизации ОС в фоне.
//  Допускается расчет по нескольким организациям.
//
// Параметры:
//  ПараметрыРасчета		 - Структура				 - см. НовыеПараметрыРасчетаАмортизации()
//  УникальныйИдентификатор	 - УникальныйИдентификатор	 - Уникальный идентификатор формы.
// 
// Возвращаемое значение:
//  Структура              - параметры выполнения задания: 
//   * АдресХранилища  - Строка     - адрес временного хранилища, в которое будет
//                                    помещен результат работы задания;
//   * АдресХранилищаДополнительный - Строка - адрес дополнительного временного хранилища,
//                                    в которое будет помещен результат работы задания (доступно только если 
//                                    установлен параметр ИспользоватьДополнительноеВременноеХранилище);
//   * ИдентификаторЗадания - УникальныйИдентификатор - уникальный идентификатор запущенного фонового задания;
//   * ЗаданиеВыполнено - Булево - Истина если задание было успешно выполнено за время вызова функции.
// 
Функция ЗапуститьРасчетАмортизацииВФоне(ПараметрыРасчета, УникальныйИдентификатор) Экспорт

	РезультатРасчета = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
						УникальныйИдентификатор,
						"ВнеоборотныеАктивы.РассчитатьАмортизацию",
						ПараметрыРасчета,
						НСтр("ru = 'Расчет амортизации';
							|en = 'Depreciation calculation'"));
	
	Возврат РезультатРасчета;

КонецФункции

// Вызывается при выполнении операции закрытия месяца "Расчет амортизации ОС".
//
//  Перед расчетом всегда выполняется создание пакетов.
//  После создания пакетов добавляются задания на новые номера пакетов, а задания с нулевым номером пакета удаляются.
//  
//  При необходимости расчет может выполняется несколькими фоновыми заданиями.
//  Количество заданий определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации().
//  В каждое задание передаются свои номера пакетов.
//  На каждый пакет создается отдельный документ.
//  Максимальное количество ОС в одном пакете определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальныйОбъемПакетаОС().
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
//
Процедура ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииОС(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	НачалоРасчета = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
										
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.УвеличитьНомерЗадания();
	
	ИспользоватьВнеоборотныеАктивы2_4 = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4");
	НачалоРасчетаАмортизацииОС2_4 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(); 
	
	Отказ = Ложь;
	
	Если ИспользоватьВнеоборотныеАктивы2_4 Тогда
		РегистрыНакопления.АмортизацияОС.УстановитьИспользованиеТекущихИтогов(Ложь);
		РегистрыНакопления.СтоимостьОС.УстановитьИспользованиеТекущихИтогов(Ложь);
	КонецЕсли; 
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ЗаданияКРасчетуЗаМесяц(
								НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			Если ИспользоватьВнеоборотныеАктивы2_4 И НачалоРасчета >= НачалоРасчетаАмортизацииОС2_4 Тогда
				
				ПараметрыРасчетаАмортизации = НовыеПараметрыРасчетаАмортизации();
				ПараметрыРасчетаАмортизации.Период = НачалоРасчета;
				ПараметрыРасчетаАмортизации.СписокОрганизаций = ПараметрыРасчета.МассивОрганизаций;
				ПараметрыРасчетаАмортизации.ОбъектыУчета = "ОС";
				ПараметрыРасчетаАмортизации.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
				ПараметрыРасчетаАмортизации.ПакетыАмортизации = ЗаданияКРасчету.ПакетыАмортизации.Скопировать();
				ПараметрыРасчетаАмортизации.НомерЗадания = НомерЗадания;
				
				РассчитатьАмортизацию(ПараметрыРасчетаАмортизации, Неопределено);
				
				Если ПараметрыРасчетаАмортизации.ЕстьОшибки Тогда
					Отказ = Истина;
				КонецЕсли;
				
			Иначе
				
				ВнеоборотныеАктивыЛокализация.СоздатьДокументыАмортизацииОС(НачалоРасчета, ПараметрыРасчета, Отказ);
				
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, 
				НачалоРасчета, 
				НомерЗадания, 
				ЗаданияКРасчету);
					
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				НачалоРасчета,
				ПараметрыРасчета.МассивОрганизаций, 
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
				
		КонецПопытки;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
	КонецЦикла;
	
	Если ИспользоватьВнеоборотныеАктивы2_4 Тогда
		РегистрыНакопления.АмортизацияОС.УстановитьИспользованиеТекущихИтогов(Истина);
		РегистрыНакопления.СтоимостьОС.УстановитьИспользованиеТекущихИтогов(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при выполнении операции закрытия месяца "Расчет амортизации НМА".
//
//  Перед расчетом всегда выполняется создание пакетов.
//  После создания пакетов добавляются задания на новые номера пакетов, а задания с нулевым номером пакета удаляются.
//  
//  При необходимости расчет может выполняется несколькими фоновыми заданиями.
//  Количество заданий определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации().
//  В каждое задание передаются свои номера пакетов.
//  На каждый пакет создается отдельный документ.
//  Максимальное количество ОС в одном пакете определяется в ВнеоборотныеАктивыПереопределяемый.МаксимальныйОбъемПакетаОС().
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
//
Процедура ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииНМА(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	НачалоРасчета = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
										
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.УвеличитьНомерЗадания();
	
	ИспользоватьВнеоборотныеАктивы2_4 = ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4");
	НачалоРасчетаАмортизацииНМА2_4 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4(); 
	
	Отказ = Ложь;
	
	РегистрыНакопления.АмортизацияНМА.УстановитьИспользованиеТекущихИтогов(Ложь);
	РегистрыНакопления.СтоимостьНМА.УстановитьИспользованиеТекущихИтогов(Ложь);
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ЗаданияКРасчетуЗаМесяц(
								НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			Если ИспользоватьВнеоборотныеАктивы2_4 И НачалоРасчета >= НачалоРасчетаАмортизацииНМА2_4 Тогда
				
				ПараметрыРасчетаАмортизации = НовыеПараметрыРасчетаАмортизации();
				ПараметрыРасчетаАмортизации.Период = НачалоРасчета;
				ПараметрыРасчетаАмортизации.СписокОрганизаций = ПараметрыРасчета.МассивОрганизаций;
				ПараметрыРасчетаАмортизации.ОбъектыУчета = "НМА";
				ПараметрыРасчетаАмортизации.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
				ПараметрыРасчетаАмортизации.ПакетыАмортизации = ЗаданияКРасчету.ПакетыАмортизации.Скопировать();
				ПараметрыРасчетаАмортизации.НомерЗадания = НомерЗадания;
				
				РассчитатьАмортизацию(ПараметрыРасчетаАмортизации, Неопределено);
				
				Если ПараметрыРасчетаАмортизации.ЕстьОшибки Тогда
					Отказ = Истина;
				КонецЕсли; 
				
			Иначе
				
				ВнеоборотныеАктивыЛокализация.СоздатьДокументыАмортизацииНМА(НачалоРасчета, ПараметрыРасчета, Отказ);
				
			КонецЕсли;
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, 
				НачалоРасчета, 
				НомерЗадания, 
				ЗаданияКРасчету);
					
			НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				НачалоРасчета,
				ПараметрыРасчета.МассивОрганизаций, 
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
				
		КонецПопытки;
		
	КонецЦикла;
	
	РегистрыНакопления.АмортизацияНМА.УстановитьИспользованиеТекущихИтогов(Истина);
	РегистрыНакопления.СтоимостьНМА.УстановитьИспользованиеТекущихИтогов(Истина);
	
КонецПроцедуры

// Отменяет запущенные фоновые задания в которых выполняется расчет амортизации.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - Идентификатор основного задания.
//  АдресХранилища		 - Строка - Адрес хранилища, в котором содержится список заданий.
// 
// Возвращаемое значение:
//  Булево - Истина, если задания успешно отменены.
//
Функция ОтменитьФоновыйРасчетАмортизации(ИдентификаторЗадания, АдресХранилища) Экспорт

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ОчередьЗаданийКРасчету = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ОчередьЗаданийКРасчету = Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для каждого ОписаниеЗадания Из ОчередьЗаданийКРасчету Цикл
		Если ОписаниеЗадания.Статус = "Выполняется" Тогда
			ДлительныеОперации.ОтменитьВыполнениеЗадания(ОписаниеЗадания.ИдентификаторЗадания);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Определяет порядок начисления амортизации в упр. учете. для нескольких организаций.
// Всегда возвращает "СДатыПринятияКУчету", если такой порядок хотя бы у одной организации.
// 
// Параметры:
//  СписокОрганизаций - Массив из СправочникСсылка.Организации - Список организаций
//  Период - Дата - Период.
// 
// Возвращаемое значение:
//  ПеречислениеСсылка.ПорядокНачисленияАмортизации - Порядок начисления амортизации в упр. учете.
Функция ПорядокНачисленияАмортизацииУпр(СписокОрганизаций, Период) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Организации.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В (&СписокОрганизаций)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 Приоритет,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету) КАК ПорядокНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(
	|		&Период, 
	|		Организация В
	|			(ВЫБРАТЬ
	|				Организации.ГоловнаяОрганизация
	|			ИЗ
	|				Организации КАК Организации)) КАК УчетнаяПолитикаФинансовогоУчета
	|ГДЕ
	|	УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	2 Приоритет,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца) КАК ПорядокНачисленияАмортизации
	|ИЗ
	|	РегистрСведений.УчетнаяПолитикаФинансовогоУчета.СрезПоследних(
	|		&Период, 
	|		Организация В
	|			(ВЫБРАТЬ
	|				Организации.ГоловнаяОрганизация
	|			ИЗ
	|				Организации КАК Организации)) КАК УчетнаяПолитикаФинансовогоУчета
	|ГДЕ
	|	УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("Период", Период);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПорядокНачисленияАмортизации;
	Иначе
		Возврат Перечисления.ПорядокНачисленияАмортизации.СДатыПринятияКУчету;
	КонецЕсли;
	
КонецФункции
 
#КонецОбласти

#Область РасчетСтоимостиВнеоборотныхАктивов

// Вызывается при выполнении операции закрытия месяца "Расчет стоимости ОС и НМА".
//
Процедура ВыполнитьОперациюЗакрытияМесяцаРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(КонецРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРасчета = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
	
	Если Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() Тогда
		НачалоРасчета = Макс(НачалоРасчета, ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.УвеличитьНомерЗадания();
	
	Отказ = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.РасчетСтоимостиВнеоборотныхАктивов");
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗаданияКРасчетуЗаМесяц(
								НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			КоличествоДанных = РассчитатьСтоимостьВнеоборотныхАктивов(
									НачалоРасчета, 
									ЗаданияКРасчету.ВременныеТаблицы, 
									ПараметрыОбработчика, 
									Неопределено,
									Отказ);
			
			АктуализироватьДвиженияПослеРасчетаСтоимости(
				НачалоРасчета, 
				ЗаданияКРасчету.ВременныеТаблицы, 
				ПараметрыОбработчика, 
				Отказ);
				
			ВнеоборотныеАктивыЛокализация.ПриВыполненииОперацииЗакрытияМесяцаРасчетСтоимостиВнеоборотныхАктивов(
				НачалоРасчета, 
				ЗаданияКРасчету.ВременныеТаблицы, 
				ПараметрыОбработчика, 
				Отказ);
				
			ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ЗаданияКРасчету.ВременныеТаблицы,, "КэшГраниц");
				
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, НачалоРасчета, НомерЗадания, ЗаданияКРасчету);
				
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				НачалоРасчета,
				ПараметрыРасчета.МассивОрганизаций,
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
			
		КонецПопытки;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет расчет стоимости ОС и НМА перед формированием проводок.
//  Используется для того чтобы сформировать проводки на основании стоимости ОС и НМА.
//
// Параметры:
//  МассивСсылок - Массив	 - Список документов, по которым будут сформированы проводки.
//
Процедура РассчитатьСтоимостьВнеоборотныхАктивовПриФормированииПроводок(МассивСсылок) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ДанныеДляПредварительногоРасчета = ДанныеДляПредварительногоРасчетаСтоимостиВнеоборотныхАктивов(МассивСсылок, МенеджерВременныхТаблиц);
	
	Выборка = ДанныеДляПредварительногоРасчета.Результат.Выбрать();
	
	Отказ = Ложь;
	Пока Выборка.Следующий() Цикл
	
		РассчитатьСтоимостьВнеоборотныхАктивов(
			Выборка.Период, 
			МенеджерВременныхТаблиц, 
			Неопределено, 
			МассивСсылок, 
			Отказ);
			
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, "КэшГраниц");
		
	КонецЦикла; 	
	
КонецПроцедуры

// Используется для предварительного расчета стоимости.
//
// Параметры:
//  МассивСсылок			 - Массив - Список документов.
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц - Менеджер временных таблиц.
// 
// Возвращаемое значение:
//  Структура - Содержит данные для начала предварительного расчета стоимости:
//      * Результат - РезультатЗапроса -
//      * ОбъектыДляКоторыхСведенияНеАктуальны - Массив из СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.НематериальныеАктивы -
//
Функция ДанныеДляПредварительногоРасчетаСтоимостиВнеоборотныхАктивов(МассивСсылок, МенеджерВременныхТаблиц = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период    КАК Период,
	|	Задания.ОбъектУчета   КАК ОбъектУчета,
	|	Задания.Организация   КАК Организация
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|		ПО (Задания.Организация = СтоимостьОС.Организация)
	|			И (Задания.ОбъектУчета = СтоимостьОС.АналитикаКапитализацииРасходов)
	|			И (Задания.Месяц <= СтоимостьОС.Период)
	|ГДЕ
	|	СтоимостьОС.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьОС.Период                          КАК Период,
	|	СтоимостьОС.АналитикаКапитализацииРасходов  КАК ОбъектУчета,
	|	СтоимостьОС.Организация                     КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|		ПО СтоимостьОС_РасчетСтоимости.Регистратор = СтоимостьОС.Регистратор
	|			И СтоимостьОС_РасчетСтоимости.РасчетСтоимости
	|ГДЕ
	|	СтоимостьОС.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период   КАК Период,
	|	Задания.ОбъектУчета   КАК ОбъектУчета,
	|	Задания.Организация   КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|		ПО (Задания.Организация = СтоимостьНМА.Организация)
	|			И (Задания.ОбъектУчета = СтоимостьНМА.НематериальныйАктив)
	|			И (Задания.Месяц <= СтоимостьНМА.Период)
	|ГДЕ
	|	СтоимостьНМА.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтоимостьНМА.Период               КАК Период,
	|	СтоимостьНМА.НематериальныйАктив  КАК ОбъектУчета,
	|	СтоимостьНМА.Организация          КАК Организация
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|		ПО СтоимостьНМА_РасчетСтоимости.Регистратор = СтоимостьНМА.Регистратор
	|			И СтоимостьНМА_РасчетСтоимости.РасчетСтоимости
	|ГДЕ
	|	СтоимостьНМА.Регистратор В (&МассивСсылок)
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымРассчитываетсяСтоимость", ТипыДокументовПоКоторымРассчитываетсяСтоимость(Истина));
	
	Результат = Запрос.ВыполнитьПакет();

	ОбъектыДляКоторыхСведенияНеАктуальны = Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Возврат Новый Структура(
			"Результат, ОбъектыДляКоторыхСведенияНеАктуальны", 
			Результат[Результат.ВГраница()],
			ОбъектыДляКоторыхСведенияНеАктуальны);
	
КонецФункции

// Рассчитывает суммы расходов по объектам учета, указанных в документе
//
// Параметры:
//  РасходыПоДокументам - ТаблицаЗначений - Таблица, которая содержит расходы, в ней обязательно должны присутствовать колонки:
//  										* АналитикаРасходов - Число -
//  										* СуммаУпр - Число -
//  										* СуммаРегл - Число -
//  										* ПостояннаяРазница - Число -
//  										* ВременнаяРазница - Число -
//  ПараметрыРасчета - см. ПараметрыРасчетаСтоимости
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Содержит суммы расходов. Содержит колонки из таблицы РасходыПоДокументам и колонку ОбъектУчета.
//
Функция РассчитатьРасходыПоДокументу(РасходыПоДокументам, ПараметрыРасчета) Экспорт

	ТипОбъектаУчета = Новый ОписаниеТипов("СправочникСсылка.ОбъектыЭксплуатации,СправочникСсылка.НематериальныеАктивы");
	
	Если ПараметрыРасчета.ФактическаяСтоимость Тогда
		
		РезультатРасчета = РасходыПоДокументам.СкопироватьКолонки();
		РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
		РезультатРасчета.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
		РезультатРасчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
		РезультатРасчета.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
		
		// Нужно фактическую стоимость каждого ОС распределить пропорционально суммам расходов.
		//
		// Например, в документе ОС1: СтоимостьУУ=1000, СтоимостьБУ=1000
		// Расходы: Статья1: СуммаУпр=500,  СуммаРегл=5000;
		//          Статья2: СуммаУпр=1500, СуммаРегл=15000;
		// Расчет: СтоимостьУУ на Статья1=1000*500/2000 =250
		//                     на Статья2=1000*1500/2000=750
		//         СтоимостьБУ на Статья1=1000*5000/2000 =2500
		//                     на Статья2=1000*15000/2000=7500.
		
		СведенияОРасходах = Новый Соответствие;
		Для Каждого СтрокаРасходы Из РасходыПоДокументам Цикл
			
			Если ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства Тогда
				АналитикаРасходов = Справочники.ОбъектыЭксплуатации.ПустаяСсылка();
			Иначе
				АналитикаРасходов = СтрокаРасходы.АналитикаРасходов;
			КонецЕсли;
			
			ДанныеПоАналитке = СведенияОРасходах.Получить(АналитикаРасходов);
			Если ДанныеПоАналитке = Неопределено Тогда
				ДанныеПоАналитке = Новый Структура;
				
				ДанныеПоАналитке.Вставить("РасходыПоОбъектуУчета", РасходыПоДокументам.СкопироватьКолонки());

				ДанныеПоАналитке.Вставить("МассивКоэффициентовСумма", Новый Массив);
				ДанныеПоАналитке.Вставить("МассивКоэффициентовСуммаБезНДС", Новый Массив);
				ДанныеПоАналитке.Вставить("МассивКоэффициентовСуммаУпр", Новый Массив);
				ДанныеПоАналитке.Вставить("МассивКоэффициентовСуммаРегл", Новый Массив);
				
				ДанныеПоАналитке.Вставить("СуммаОстаток", 0);
				ДанныеПоАналитке.Вставить("СуммаБезНДСОстаток", 0);
				ДанныеПоАналитке.Вставить("СуммаУпрОстаток", 0);
				ДанныеПоАналитке.Вставить("СуммаРеглОстаток", 0);
			КонецЕсли;
			
			РасходыПоОбъектуУчета = ДанныеПоАналитке.РасходыПоОбъектуУчета.Добавить();
			ЗаполнитьЗначенияСвойств(РасходыПоОбъектуУчета, СтрокаРасходы);
			
			ДанныеПоАналитке.МассивКоэффициентовСумма.Добавить(СтрокаРасходы.Сумма);
			ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС.Добавить(СтрокаРасходы.СуммаБезНДС);
			ДанныеПоАналитке.МассивКоэффициентовСуммаУпр.Добавить(СтрокаРасходы.СуммаУпр);
			ДанныеПоАналитке.МассивКоэффициентовСуммаРегл.Добавить(СтрокаРасходы.СуммаРегл);
			
			ДанныеПоАналитке.СуммаОстаток = ДанныеПоАналитке.СуммаОстаток + СтрокаРасходы.Сумма;
			ДанныеПоАналитке.СуммаБезНДСОстаток = ДанныеПоАналитке.СуммаБезНДСОстаток + СтрокаРасходы.СуммаБезНДС;
			ДанныеПоАналитке.СуммаУпрОстаток = ДанныеПоАналитке.СуммаУпрОстаток + СтрокаРасходы.СуммаУпр;
			ДанныеПоАналитке.СуммаРеглОстаток = ДанныеПоАналитке.СуммаРеглОстаток + СтрокаРасходы.СуммаРегл;
			
			СведенияОРасходах.Вставить(АналитикаРасходов, ДанныеПоАналитке);
			
		КонецЦикла;
		
		Для каждого СтрокаДокумента Из ПараметрыРасчета.ТаблицаОбъектовУчета Цикл
			
			Если ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства Тогда
				ДанныеПоАналитке = СведенияОРасходах.Получить(Справочники.ОбъектыЭксплуатации.ПустаяСсылка());
			Иначе
				ДанныеПоАналитке = СведенияОРасходах.Получить(СтрокаДокумента.ОбъектУчета);
			КонецЕсли;
			
			Если ДанныеПоАналитке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаДокумента.ОтражатьВУпрУчете Тогда

				РаспределениеСумма = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьУУ,
										ДанныеПоАналитке.СуммаОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСумма);
				
				РаспределениеСуммаБезНДС = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьУУ,
										ДанныеПоАналитке.СуммаБезНДСОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС);
										
				РаспределениеСуммаУпр = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьУУ,
										ДанныеПоАналитке.СуммаУпрОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСуммаУпр);
										
			Иначе
				РаспределениеСумма = Неопределено;
				РаспределениеСуммаБезНДС = Неопределено;
				РаспределениеСуммаУпр = Неопределено;
			КонецЕсли;
			
			Если СтрокаДокумента.ОтражатьВРеглУчете 
				ИЛИ ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
				
				РаспределениеСуммаРегл = ПолучитьРаспределениеСтоимости(
										СтрокаДокумента.СтоимостьБУ,
										ДанныеПоАналитке.СуммаРеглОстаток,
										ДанныеПоАналитке.МассивКоэффициентовСуммаРегл);
				
			Иначе
				РаспределениеСуммаРегл = Неопределено;
			КонецЕсли;
			
			Для Сч = 0 По ДанныеПоАналитке.РасходыПоОбъектуУчета.Количество()-1 Цикл
				
				РасходыПоОбъектуУчета = ДанныеПоАналитке.РасходыПоОбъектуУчета[Сч];
				
				НоваяСтрока = РезультатРасчета.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, РасходыПоОбъектуУчета);
				НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
				НоваяСтрока.Ссылка = СтрокаДокумента.Ссылка;
				НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор();
				
				НоваяСтрока.Сумма = ?(РаспределениеСумма <> Неопределено, РаспределениеСумма[Сч], 0);
				НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСуммаБезНДС[Сч], 0);
				НоваяСтрока.СуммаУпр = ?(РаспределениеСуммаУпр <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
				НоваяСтрока.СуммаРегл = ?(РаспределениеСуммаРегл <> Неопределено, РаспределениеСуммаРегл[Сч], 0);
				
				// ПР и ВР рассчитываются исходя из полученной доли СуммаРегл
				Если РаспределениеСуммаРегл <> Неопределено Тогда
					Если РаспределениеСуммаРегл[Сч] <> РасходыПоОбъектуУчета.СуммаРегл Тогда
						НоваяСтрока.ПостояннаяРазница = РасходыПоОбъектуУчета.ПостояннаяРазница * РаспределениеСуммаРегл[Сч] / РасходыПоОбъектуУчета.СуммаРегл;
						НоваяСтрока.ВременнаяРазница  = РасходыПоОбъектуУчета.ВременнаяРазница  * РаспределениеСуммаРегл[Сч] / РасходыПоОбъектуУчета.СуммаРегл;
					КонецЕсли;
				Иначе
					НоваяСтрока.ПостояннаяРазница = 0;
					НоваяСтрока.ВременнаяРазница  = 0;
				КонецЕсли;

				УчестьОтражениеВУчетеПриРасчетеСтоимости(НоваяСтрока, СтрокаДокумента, ПараметрыРасчета);

				// Уменьшаем расходы
				РасходыПоОбъектуУчета.Сумма = РасходыПоОбъектуУчета.Сумма - НоваяСтрока.Сумма;
				РасходыПоОбъектуУчета.СуммаБезНДС = РасходыПоОбъектуУчета.СуммаБезНДС - НоваяСтрока.СуммаБезНДС;
				РасходыПоОбъектуУчета.СуммаУпр = РасходыПоОбъектуУчета.СуммаУпр - НоваяСтрока.СуммаУпр;
				РасходыПоОбъектуУчета.СуммаРегл = РасходыПоОбъектуУчета.СуммаРегл - НоваяСтрока.СуммаРегл;
				РасходыПоОбъектуУчета.ПостояннаяРазница = РасходыПоОбъектуУчета.ПостояннаяРазница - НоваяСтрока.ПостояннаяРазница;
				РасходыПоОбъектуУчета.ВременнаяРазница = РасходыПоОбъектуУчета.ВременнаяРазница - НоваяСтрока.ВременнаяРазница;

				ДанныеПоАналитке.МассивКоэффициентовСумма[Сч] = ДанныеПоАналитке.МассивКоэффициентовСумма[Сч] - НоваяСтрока.Сумма;
				ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС[Сч] = ДанныеПоАналитке.МассивКоэффициентовСуммаБезНДС[Сч] - НоваяСтрока.СуммаБезНДС;
				ДанныеПоАналитке.МассивКоэффициентовСуммаУпр[Сч] = ДанныеПоАналитке.МассивКоэффициентовСуммаУпр[Сч] - НоваяСтрока.СуммаУпр;
				ДанныеПоАналитке.МассивКоэффициентовСуммаРегл[Сч] = ДанныеПоАналитке.МассивКоэффициентовСуммаРегл[Сч] - НоваяСтрока.СуммаРегл;

				ДанныеПоАналитке.СуммаОстаток = ДанныеПоАналитке.СуммаОстаток - НоваяСтрока.Сумма;
				ДанныеПоАналитке.СуммаБезНДСОстаток = ДанныеПоАналитке.СуммаБезНДСОстаток - НоваяСтрока.СуммаБезНДС;
				ДанныеПоАналитке.СуммаУпрОстаток = ДанныеПоАналитке.СуммаУпрОстаток - НоваяСтрока.СуммаУпр;
				ДанныеПоАналитке.СуммаРеглОстаток = ДанныеПоАналитке.СуммаРеглОстаток - НоваяСтрока.СуммаРегл;
				 
			КонецЦикла; 
			
		КонецЦикла; 
		
	Иначе
		
		Если ПараметрыРасчета.РасчетСКомпонентами Тогда
			
			// Распределение выполняем отдельно по каждому объекту учета. Расходы могут быть накоплены по нескольким статьям
			// расходов. Распределяем их по предварительной стоимости самого объекта и его компонентов, указанных в разных 
			// строках разных документов.
			
			РезультатРасчета = РасходыПоДокументам.СкопироватьКолонки();
			РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
			РезультатРасчета.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
			РезультатРасчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
			РезультатРасчета.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
			
			ТаблицаОбъектовУчета = ПараметрыРасчета.ТаблицаОбъектовУчета.Скопировать();
			ОбъектыУчета = ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(
								ТаблицаОбъектовУчета.ВыгрузитьКолонку("ОбъектУчета"));
			
			Для Каждого ОбъектУчета Из ОбъектыУчета Цикл
			
					СтруктураОтбора = Новый Структура("АналитикаРасходов", ОбъектУчета);
					РасходыПоОбъекту = РасходыПоДокументам.Скопировать(РасходыПоДокументам.НайтиСтроки(СтруктураОтбора));
					СтруктураОтбора = Новый Структура("ОбъектУчета", ОбъектУчета);
					СтрокиДокументов = ТаблицаОбъектовУчета.Скопировать(ТаблицаОбъектовУчета.НайтиСтроки(СтруктураОтбора));
					СтрокиДокументов.Колонки.Добавить("СтоимостьНУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
					Для Каждого СтрокаДокумента Из СтрокиДокументов Цикл
						СтрокаДокумента.СтоимостьНУ = ?(СтрокаДокумента.ОтражатьВНУ, СтрокаДокумента.СтоимостьБУ, 0);
					КонецЦикла;
					
					МассивКоэффициентовСуммаУпр  = СоздатьМассивКоэффициентов(СтрокиДокументов, "СтоимостьУУ");
					МассивКоэффициентовСуммаРегл = СоздатьМассивКоэффициентов(СтрокиДокументов, "СтоимостьБУ");
					МассивКоэффициентовСуммаНУ   = СоздатьМассивКоэффициентов(СтрокиДокументов, "СтоимостьНУ");
					
					Для Каждого ДанныеСтроки Из РасходыПоОбъекту Цикл
						
						РаспределениеСумма       = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
														ДанныеСтроки.Сумма,  МассивКоэффициентовСуммаУпр);
														
						РаспределениеСуммаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
														ДанныеСтроки.СуммаБезНДС,  МассивКоэффициентовСуммаУпр);
														
						РаспределениеСуммаУпр    = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
														ДанныеСтроки.СуммаУпр,  МассивКоэффициентовСуммаУпр);
						
						СуммаРегл = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.СуммаРегл, МассивКоэффициентовСуммаРегл);
						СуммаПР   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.ПостояннаяРазница, МассивКоэффициентовСуммаНУ);
						СуммаНУ   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
										ДанныеСтроки.СуммаРегл - ДанныеСтроки.ПостояннаяРазница - ДанныеСтроки.ВременнаяРазница,
										МассивКоэффициентовСуммаНУ);
						
						Для Сч = 0 По СтрокиДокументов.Количество()-1 Цикл
							
							СтрокаДокумента = СтрокиДокументов[Сч];
							
							НоваяСтрока = РезультатРасчета.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
							НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
							НоваяСтрока.Ссылка = СтрокаДокумента.Ссылка;
							НоваяСтрока.НомерСтроки = СтрокаДокумента.НомерСтроки;
							НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор();
						
							Если СтрокаДокумента.ОтражатьВУпрУчете Тогда
								НоваяСтрока.Сумма       = ?(РаспределениеСумма       <> Неопределено, РаспределениеСумма[Сч],    0);
								НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСумма[Сч],    0);
								НоваяСтрока.СуммаУпр    = ?(РаспределениеСуммаУпр    <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
							Иначе
								НоваяСтрока.Сумма = 0;
								НоваяСтрока.СуммаБезНДС = 0;
								НоваяСтрока.СуммаУпр = 0;
							КонецЕсли;
							
							Если СтрокаДокумента.ОтражатьВРеглУчете ИЛИ ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
								НоваяСтрока.СуммаРегл         = ?(СуммаРегл <> Неопределено, СуммаРегл[Сч], 0);
								НоваяСтрока.ПостояннаяРазница = ?(СуммаПР   <> Неопределено, СуммаПР[Сч],   0);
								НоваяСтрока.ВременнаяРазница  = ?(СуммаРегл <> Неопределено, СуммаРегл[Сч], 0)
																-?(СуммаПР <> Неопределено, СуммаПР[Сч], 0)
																-?(СуммаНУ <> Неопределено, СуммаНУ[Сч], 0);
							Иначе
								НоваяСтрока.СуммаРегл         = 0;
								НоваяСтрока.ПостояннаяРазница = 0;
								НоваяСтрока.ВременнаяРазница  = 0;
							КонецЕсли; 
							
							УчестьОтражениеВУчетеПриРасчетеСтоимости(НоваяСтрока, СтрокаДокумента, ПараметрыРасчета);
							
						КонецЦикла;
						
					КонецЦикла;
					
				КонецЦикла;
			
		ИначеЕсли ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства
			ИЛИ ПараметрыРасчета.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР Тогда
			
			// Здесь расчет не нужен, т.к. таблица уже содержит необходимые суммы
			
			РезультатРасчета = РасходыПоДокументам;
			РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
			РезультатРасчета.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
			РезультатРасчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
			РезультатРасчета.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
			
			Для Каждого ДанныеСтроки Из РезультатРасчета Цикл
				
				ДанныеСтроки.ОбъектУчета = ДанныеСтроки.АналитикаРасходов;
				
				СтрокаДокумента = ПараметрыРасчета.ТаблицаОбъектовУчета.Найти(ДанныеСтроки.ОбъектУчета, "ОбъектУчета");
				ДанныеСтроки.Ссылка = СтрокаДокумента.Ссылка;
				ДанныеСтроки.НомерСтроки = СтрокаДокумента.НомерСтроки;
				ДанныеСтроки.ИдентификаторСтроки = Новый УникальныйИдентификатор();
				
				УчестьОтражениеВУчетеПриРасчетеСтоимости(ДанныеСтроки, СтрокаДокумента, ПараметрыРасчета);
				
			КонецЦикла;
			
		Иначе
			
			// Т.к. в таблице аналитикой является Объект строительства, то
			// необходимо по каждой статье распределить сумму расхода пропорционально предварительным стоимостям ОС.
			//
			// Например, в документе ОС1: СтоимостьУУ=1000, СтоимостьБУ=10000
			//                       ОС2: СтоимостьУУ=4000, СтоимостьБУ=40000
			// Расходы: Статья1: СуммаУпр=500,  СуммаРегл=5000;
			//          Статья2: СуммаУпр=1500, СуммаРегл=15000;
			// Расчет: Статья1 на ОС1 СуммаУпр   =500*1000/5000=100
			//                 на ОС2 СтоимостьБУ=500*4000/5000=400
			//         Статья2 на ОС1 СуммаУпр   =1500*1000/5000=300
			//                 на ОС2 СтоимостьБУ=1500*4000/5000=1200.
			
			РезультатРасчета = РасходыПоДокументам.СкопироватьКолонки();
			РезультатРасчета.Колонки.Добавить("ОбъектУчета", ТипОбъектаУчета);
			РезультатРасчета.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
			РезультатРасчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
			РезультатРасчета.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));
			
			МассивКоэффициентовСуммаУпр  = СоздатьМассивКоэффициентов(ПараметрыРасчета.ТаблицаОбъектовУчета, "СтоимостьУУ");
			МассивКоэффициентовСуммаРегл = СоздатьМассивКоэффициентов(ПараметрыРасчета.ТаблицаОбъектовУчета, "СтоимостьБУ");
			
			Для каждого ДанныеСтроки Из РасходыПоДокументам Цикл
				
				РаспределениеСумма       = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ДанныеСтроки.Сумма,  МассивКоэффициентовСуммаУпр);
												
				РаспределениеСуммаБезНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ДанныеСтроки.СуммаБезНДС,  МассивКоэффициентовСуммаУпр);
												
				РаспределениеСуммаУпр    = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
												ДанныеСтроки.СуммаУпр,  МассивКоэффициентовСуммаУпр);
				
				СуммаРегл = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.СуммаРегл, МассивКоэффициентовСуммаРегл);
				СуммаПР   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.ПостояннаяРазница, МассивКоэффициентовСуммаРегл);
				СуммаВР   = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ДанныеСтроки.ВременнаяРазница, МассивКоэффициентовСуммаРегл);
				
				Для Сч = 0 По ПараметрыРасчета.ТаблицаОбъектовУчета.Количество()-1 Цикл
					
					СтрокаДокумента = ПараметрыРасчета.ТаблицаОбъектовУчета[Сч];
					
					НоваяСтрока = РезультатРасчета.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки);
					НоваяСтрока.ОбъектУчета = СтрокаДокумента.ОбъектУчета;
					НоваяСтрока.Ссылка = СтрокаДокумента.Ссылка;
					НоваяСтрока.НомерСтроки = СтрокаДокумента.НомерСтроки;
					НоваяСтрока.ИдентификаторСтроки = Новый УникальныйИдентификатор();
				
					Если СтрокаДокумента.ОтражатьВУпрУчете Тогда
						НоваяСтрока.Сумма       = ?(РаспределениеСумма       <> Неопределено, РаспределениеСумма[Сч],    0);
						НоваяСтрока.СуммаБезНДС = ?(РаспределениеСуммаБезНДС <> Неопределено, РаспределениеСумма[Сч],    0);
						НоваяСтрока.СуммаУпр    = ?(РаспределениеСуммаУпр    <> Неопределено, РаспределениеСуммаУпр[Сч], 0);
					Иначе
						НоваяСтрока.Сумма = 0;
						НоваяСтрока.СуммаБезНДС = 0;
						НоваяСтрока.СуммаУпр = 0;
					КонецЕсли;
					
					Если СтрокаДокумента.ОтражатьВРеглУчете ИЛИ ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
						НоваяСтрока.СуммаРегл         = ?(СуммаРегл <> Неопределено, СуммаРегл[Сч], 0);
						НоваяСтрока.ПостояннаяРазница = ?(СуммаПР   <> Неопределено, СуммаПР[Сч],   0);
						НоваяСтрока.ВременнаяРазница  = ?(СуммаВР   <> Неопределено, СуммаВР[Сч],   0);
					Иначе
						НоваяСтрока.СуммаРегл         = 0;
						НоваяСтрока.ПостояннаяРазница = 0;
						НоваяСтрока.ВременнаяРазница  = 0;
					КонецЕсли; 
					
					УчестьОтражениеВУчетеПриРасчетеСтоимости(НоваяСтрока, СтрокаДокумента, ПараметрыРасчета);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатРасчета.Колонки.Добавить("СуммаЦФ",   ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РезультатРасчета.Колонки.Добавить("СуммаПРЦФ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РезультатРасчета.Колонки.Добавить("СуммаВРЦФ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	РезультатРасчета.Колонки.Добавить("НеУчитываемаяСтоимостьНУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	
	Возврат РезультатРасчета;

КонецФункции

// Определяет выполнялся ли расчет стоимости внеоборотных активов.
// Используется в закрытии месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры выполнения операции закрытия месяца.
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнялся расчет стоимости внеоборотных активов.
//
Функция ВыполненРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Организация В(&Организация)
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.РасчетСтоимости
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Организация В(&Организация)
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.РасчетСтоимости";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.МассивОрганизаций);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Определяет, что движения записываются при выполнении операции "Расчет стоимости ОС и НМА".
// Используется для управления логикой записи движений.
//
// Параметры:
//  Объект	 - РегистрСведенийНаборЗаписей - Набор записей регистра.
// 
// Возвращаемое значение:
//  Булево - Истина, если движения записываются при выполнении операции "Расчет стоимости ОС и НМА".
//
Функция ДвиженияЗаписываютсяПриРасчетеСтоимостиВНА(Объект) Экспорт

	// Проверим наличие служебного дополнительного свойства у набора записей
	Возврат Объект.ДополнительныеСвойства.Свойство(ИмяСлужебногоДополнительногоСвойстваОбъекта());

КонецФункции

// Определяет для каких объектов сведения не актуальны (требуется закрытие месяца).
//
// Параметры:
//  МассивСсылок - Массив - Список ОС или НМА.
//  ДатаСведений - Дата - Дата получения сведений.
// 
// Возвращаемое значение:
//  Булево - Ложь, если сведения не актуальны.
//
Функция ОбъектыДляКоторыхСведенияНеАктуальны(МассивСсылок, ДатаСведений = Неопределено) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Задания.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	(ВЫБРАТЬ
	|		Задания.ОбъектУчета КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ЗаданияКРасчетуСтоимостиВНА КАК Задания
	|	ГДЕ
	|		Задания.ОбъектУчета В(&МассивСсылок)
	|		И Задания.Месяц <= &ДатаСведений
	|		И &ГлавныйУзел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Задания.ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|	ГДЕ
	|		Задания.ОбъектУчета В(&МассивСсылок)
	|		И Задания.Месяц <= &ДатаСведений
	|		И &ГлавныйУзел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьОС.ОсновноеСредство
	|	ИЗ
	|		РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|			ПО (СтоимостьОС_РасчетСтоимости.Регистратор = СтоимостьОС.Регистратор)
	|				И (СтоимостьОС_РасчетСтоимости.РасчетСтоимости)
	|	ГДЕ
	|		СтоимостьОС.ОсновноеСредство В(&МассивСсылок)
	|		И СтоимостьОС.Период <= &ДатаСведений
	|		И ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|		И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|		И НЕ &ГлавныйУзел
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтоимостьНМА.НематериальныйАктив
	|	ИЗ
	|		РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|			ПО (СтоимостьНМА_РасчетСтоимости.Регистратор = СтоимостьНМА.Регистратор)
	|				И (СтоимостьНМА_РасчетСтоимости.РасчетСтоимости)
	|	ГДЕ
	|		СтоимостьНМА.НематериальныйАктив В(&МассивСсылок)
	|		И СтоимостьНМА.Период <= &ДатаСведений
	|		И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|		И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|		И НЕ &ГлавныйУзел) КАК Задания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ДатаСведений", ?(ДатаСведений = Неопределено, ТекущаяДатаСеанса(), ДатаСведений));
	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымРассчитываетсяСтоимость", ТипыДокументовПоКоторымРассчитываетсяСтоимость());
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Возврат Результат;
	
КонецФункции
 
#КонецОбласти

#Область ОтложенноеФормированиеДвижений

// Вызывается при выполнении операции закрытия месяца "Формирование движений по учету ОС и НМА".
//
Процедура ВыполнитьОперациюЗакрытияМесяцаОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	КонецРасчета = КонецМесяца(ПараметрыРасчета.Период);
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(КонецРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРасчета = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.НачалоРасчета(ПараметрыРасчета.МассивОрганизаций);
	
	Если Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить() Тогда
		НачалоРасчета = Макс(НачалоРасчета, ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоРасчета) ИЛИ НачалоРасчета > КонецРасчета Тогда
		Возврат;
	КонецЕсли;
	
	НомерЗадания = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.УвеличитьНомерЗадания();
	
	Отказ = Ложь;
	
	Пока НачалоРасчета <= КонецРасчета Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца.ОтложенноеФормированиеДвиженийПоВНА");
		
		ЗаданияКРасчету = РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета, ОкончаниеПериода, НомерЗадания, ПараметрыРасчета.МассивОрганизаций);
		
		Попытка
			
			ПараметрыПроцедуры = ПараметрыОтложенногоФормированияДвижений();
			ПараметрыПроцедуры.Организация = ПараметрыРасчета.МассивОрганизаций;
			ПараметрыПроцедуры.Месяц = НачалоРасчета;
			ПараметрыПроцедуры.МенеджерВременныхТаблиц = ЗаданияКРасчету.ВременныеТаблицы;
			ПараметрыПроцедуры.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
			КоличествоДанных = ОтложенноеФормированиеДвижений(ПараметрыПроцедуры, Неопределено, Отказ);
			
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций, НачалоРасчета, НомерЗадания, ЗаданияКРасчету);
				
			НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
			
		Исключение
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ПараметрыРасчета.Период,
				ПараметрыРасчета.МассивОрганизаций,
				ТекстОшибки,,,
				Отказ);
			
			Возврат;
				
		КонецПопытки;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет формирование движений при формировании проводок.
//
// Параметры:
//  МассивСсылок - Массив - Список документов, по которым формируются проводки.
//
// Возвращаемое значение:
//	Массив, Неопределено - 
Функция ОтложенноеФормированиеДвиженийПриФормированииПроводок(МассивСсылок) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоОС.Дата          КАК Период,
	|	Задания.ОбъектУчета         КАК ОбъектУчета,
	|	Задания.Организация         КАК Организация
	|ПОМЕСТИТЬ КэшГраниц
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|		ПО (Задания.Организация = ДокументыПоОС.Организация)
	|			И (Задания.ОбъектУчета = ДокументыПоОС.ОсновноеСредство)
	|			И (Задания.Месяц <= ДокументыПоОС.Дата)
	|ГДЕ
	|	ДокументыПоОС.Ссылка В (&МассивСсылок)
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|	И &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоОС.Дата             КАК Период,
	|	ДокументыПоОС.ОсновноеСредство КАК ОбъектУчета,
	|	ДокументыПоОС.Организация      КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС_РасчетСтоимости
	|		ПО СтоимостьОС_РасчетСтоимости.Регистратор = ДокументыПоОС.Ссылка
	|ГДЕ
	|	ДокументыПоОС.Ссылка В (&МассивСсылок)
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|	И СтоимостьОС_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоНМА.Дата         КАК Период,
	|	Задания.ОбъектУчета         КАК ОбъектУчета,
	|	Задания.Организация         КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаданияКФормированиюДвиженийПоВНА КАК Задания
	|		ПО (Задания.Организация = ДокументыПоНМА.Организация)
	|			И (Задания.ОбъектУчета = ДокументыПоНМА.НематериальныйАктив)
	|			И (Задания.Месяц <= ДокументыПоНМА.Дата)
	|ГДЕ
	|	ДокументыПоНМА.Ссылка В (&МассивСсылок)
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)
	|	И &ГлавныйУзел
	|
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоНМА.Дата                КАК Период,
	|	ДокументыПоНМА.НематериальныйАктив КАК ОбъектУчета,
	|	ДокументыПоНМА.Организация         КАК Организация
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА_РасчетСтоимости
	|		ПО СтоимостьНМА_РасчетСтоимости.Регистратор = ДокументыПоНМА.Ссылка
	|ГДЕ
	|	ДокументыПоНМА.Ссылка В (&МассивСсылок)
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)
	|	И СтоимостьНМА_РасчетСтоимости.Регистратор ЕСТЬ NULL
	|	И НЕ &ГлавныйУзел
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.ОбъектУчета КАК ОбъектУчета
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Организация,
	|	КэшГраниц.Период
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|
	|УПОРЯДОЧИТЬ ПО
	|	КэшГраниц.Период";
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	Запрос.УстановитьПараметр("ГлавныйУзел", ПланыОбмена.ГлавныйУзел() = Неопределено);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбъектыДляКоторыхСведенияНеАктуальны = Результат[Результат.ВГраница()-1].Выгрузить().ВыгрузитьКолонку("ОбъектУчета");
	
	Выборка = Результат[Результат.ВГраница()].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеДляПроверки = ДатыЗапретаИзменения.ШаблонДанныхДляПроверки();
		НоваяСтрока = ДанныеДляПроверки.Добавить();
		НоваяСтрока.Дата   = НачалоДня(Выборка.Период);
		НоваяСтрока.Раздел = "РегламентныеОперации";
		НоваяСтрока.Объект = Выборка.Организация;
		
		Если ДатыЗапретаИзменения.НайденЗапретИзмененияДанных(ДанныеДляПроверки) Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПроцедуры = ПараметрыОтложенногоФормированияДвижений();
		ПараметрыПроцедуры.Организация = Выборка.Организация;
		ПараметрыПроцедуры.Месяц = Выборка.Период;
		ПараметрыПроцедуры.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ПараметрыПроцедуры.ЭтапРасчета = Неопределено;
		ПараметрыПроцедуры.ВернутьДокументыКОтражению = Ложь;
		ПараметрыПроцедуры.СформироватьЗадания = Ложь;
		
		ОтложенноеФормированиеДвижений(ПараметрыПроцедуры, МассивСсылок);
		
	КонецЦикла;
	
	Возврат ОбъектыДляКоторыхСведенияНеАктуальны;
	
КонецФункции

// Определяет выполнялось ли формирование движений по внеоборотным активам.
// Используется в закрытии месяца.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры выполнения операции закрытия месяца.
// 
// Возвращаемое значение:
//  Булево - Истина, если выполнялось формирование движений по внеоборотным активам.
//
Функция ВыполненоОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|ГДЕ
	|	ДокументыПоОС.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДокументыПоОС.Организация В(&Организация)
	|	И ДокументыПоОС.Проведен
	|	И ДокументыПоОС.ТипСсылки В(&ТипыДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|ГДЕ
	|	ДокументыПоНМА.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДокументыПоНМА.Организация В(&Организация)
	|	И ДокументыПоНМА.Проведен
	|	И ДокументыПоНМА.ТипСсылки В(&ТипыДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("Организация", ПараметрыРасчета.МассивОрганизаций);
	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();

КонецФункции

// Определяет записываются ли при отложенном формировании движений.
// 
// Параметры:
//  Документ - ДокументОбъект -
// 
// Возвращаемое значение:
//  Булево
Функция ДвиженияЗаписываютсяПриОтложенномФормированииДвижений(Документ) Экспорт

	Возврат Документ <> Неопределено 
			И Документ.ДополнительныеСвойства.Свойство(ИмяПризнакаВыполненияОтложенногоФормированияДвижений());
	
КонецФункции

#КонецОбласти

#Область РасчетДвиженийПоКомпонентамАмортизации

// Вызывается при выполнении операции закрытия месяца "Актуализация параметров узлов и компонентов амортизации".
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
//
Процедура ВыполнитьОперациюАктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоПериода = ЗакрытиеМесяцаСервер.НачалоРасчета(ПараметрыОбработчика.ДанныеЭтапа.Код, ПараметрыРасчета.КонецПериода,,
		ПараметрыРасчета.МассивОрганизаций);
	НачалоПериода = Макс(НачалоПериода, ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоПериода <= ПараметрыРасчета.КонецПериода Цикл
		
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ЗакрытиеМесяца." 
			+ ОбщегоНазначения.ИмяЗначенияПеречисления(ПараметрыОбработчика.ДанныеЭтапа.Код));
		
		ОкончаниеПериода = КонецМесяца(НачалоПериода);
		НомерЗаданияДоРасчета = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		// Этап 1. Подготовка работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(НачалоПериода, ОкончаниеПериода, НомерЗаданияДоРасчета,
				ПараметрыРасчета.МассивОрганизаций, ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, НачалоПериода);
		КонецПопытки;
		
		// Этап 2. Расчет по организациям и периоду.
		
		НачатьТранзакцию();
		
		Попытка
			
			Запрос = Новый Запрос();
			Запрос.МенеджерВременныхТаблиц = ДанныеКРасчетуЗаМесяц.ВременныеТаблицы;
			Запрос.Текст = 
			"ВЫБРАТЬ 
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КэшГраниц.Документ) КАК Количество
			|ИЗ КэшГраниц КАК КэшГраниц
			|";
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				КоличествоДанных = Выборка.Количество;
			КонецЕсли;
			
			СформироватьДвиженияПоКомпонентамАмортизации(ДанныеКРасчетуЗаМесяц);
				
			ЗафиксироватьТранзакцию();
		Исключение
			
			ОтменитьТранзакцию();
			
			ЕстьОшибки = Истина;
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр(
					"ru = 'Актуализация параметров узлов и компонентов амортизации за период %1 завершилось с ошибкой:
					|%2';
					|en = 'Cannot update financial details of depreciation sub-assets and components for period %1 due to:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ДанныеКРасчетуЗаМесяц.Организация, НачалоПериода);
		КонецПопытки;
		
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		// Этап 3. Завершение работы с заданиями.
		
		НачатьТранзакцию();
		
		Попытка
			ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(Неопределено, НомерЗаданияДоРасчета, ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц);
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(НачалоПериода),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(ПараметрыОбработчика, ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций, НачалоПериода);
		КонецПопытки;
		
		НачалоПериода = ОкончаниеПериода + 1;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных/10);
			
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область УчетОС

// Добавляет значения параметров для отражения списания ОС.
// 
// Параметры:
// 	ЗначенияПараметровПроведения - Структура - 
Процедура ДополнитьЗначенияПараметровПроведенияПриСписанииОС(ЗначенияПараметровПроведения) Экспорт

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеСтоимостиОС", Перечисления.ХозяйственныеОперации.СписаниеСтоимостиОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеСтоимостиОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеСтоимостиОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеАмортизацииОС", Перечисления.ХозяйственныеОперации.СписаниеАмортизацииОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеАмортизацииОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеАмортизацииОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеРезерваПереоценкиСтоимостиОС", Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиСтоимостиОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеРезерваПереоценкиСтоимостиОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеРезерваПереоценкиСтоимостиОС);

	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеРезерваПереоценкиАмортизацииОС", Перечисления.ХозяйственныеОперации.СписаниеРезерваПереоценкиАмортизацииОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеРезерваПереоценкиАмортизацииОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеРезерваПереоценкиАмортизацииОС);
	
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ОС", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства);
	ЗначенияПараметровПроведения.Вставить("СтатьяАП_ПрибыльУбытки", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки);
	
	ЗначенияПараметровПроведения.Вставить("ХО_ЗакрытиеРасходовОтВыбытияОС", Перечисления.ХозяйственныеОперации.ЗакрытиеРасходовОтВыбытияОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗакрытиеРасходовОтВыбытияОС", Справочники.НастройкиХозяйственныхОпераций.ЗакрытиеРасходовОтВыбытияОС);

	ЗначенияПараметровПроведения.Вставить("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеОбесцененияОС", Перечисления.ХозяйственныеОперации.СписаниеОбесцененияОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеОбесцененияОС", Справочники.НастройкиХозяйственныхОпераций.СписаниеОбесцененияОС);
	
КонецПроцедуры

#КонецОбласти

#Область Аренда

// Вызывается при выполнении операции закрытия месяца "Начисление процентов по аренде".
//
// Параметры:
//	ПараметрыОбработчика - см. Обработки.ОперацииЗакрытияМесяца.ИнициализироватьПараметрыОбработчикаЭтапа 
Процедура ВыполнитьОперациюНачислениеПроцентовПоАренде(ПараметрыОбработчика) Экспорт

	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = ЗакрытиеМесяцаСервер.НачалоРасчета(
		ПараметрыОбработчика.ДанныеЭтапа.Код,
		ПараметрыОбработчика.ПараметрыРасчета.КонецПериода,,
		ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ИмяКлючевойОперации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"ЗакрытиеМесяца.%1",
			СокрЛП(ПараметрыОбработчика.ДанныеЭтапа.Код));
			
		ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации(ИмяКлючевойОперации);
		КоличествоДанных = 0;
		
		НомерЗадания = ЗакрытиеМесяцаСервер.УвеличитьНомерЗадания();
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		НомерЗадания = РегистрыСведений.ЗаданияКЗакрытиюМесяца.УвеличитьНомерЗадания();
		
		НачатьТранзакцию();
		
		Попытка
			
			 ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ДанныеКРасчетуЗаМесяц = ЗакрытиеМесяцаСервер.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		ЕстьОшибкиВыполненияРасчета = Ложь;
		
		Попытка
			
			Документы.НачислениеПроцентовПоАренде.СоздатьДокументы(
							НачалоРасчета,
							ДанныеКРасчетуЗаМесяц.Организация,
							КоличествоДанных,
							ЕстьОшибки);
		
			ЕстьОшибкиВыполненияРасчета = ЗакрытиеМесяцаСервер.ЕстьОшибкиВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ПараметрыРасчета.МассивОрганизаций, 
				НачалоРасчета);
											
		Исключение
			
			ЕстьОшибки = Истина;
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ЕстьОшибкиВыполненияРасчета Тогда
			ЕстьОшибки = Истина;
		КонецЕсли;
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		НачатьТранзакцию();
		
		Попытка
			
			 ЗакрытиеМесяцаСервер.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций,
				ПараметрыОбработчика.ДанныеЭтапа.Код);
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьРасчет(
				Неопределено,
				НомерЗадания,
				ПараметрыОбработчика.ДанныеЭтапа.Код,
				ДанныеКРасчетуЗаМесяц);
			
			РегистрыСведений.ЗаданияКЗакрытиюМесяца.СформироватьЗаданияНаСледующийПериод(
				ДанныеКРасчетуЗаМесяц.ВременныеТаблицы,
				ОкончаниеПериода + 1);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			 ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, КоличествоДанных);
		
		НачалоРасчета = ОкончаниеПериода + 1;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет значения параметров для проведения документа в учете аренды.
// 
// Параметры:
// 	ЗначенияПараметровПроведения - Структура - 
Процедура ДополнитьЗначенияПараметровПроведенияДокументаАренды(ЗначенияПараметровПроведения) Экспорт
	
	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеУслугПоАренде", Перечисления.ХозяйственныеОперации.ПоступлениеУслугПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеУслугПоАренде", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеУслугПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_ОбеспечительныйПлатеж", Перечисления.ХозяйственныеОперации.ОбеспечительныйПлатеж);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОбеспечительныйПлатеж", Справочники.НастройкиХозяйственныхОпераций.ОбеспечительныйПлатеж);

	ЗначенияПараметровПроведения.Вставить("ХО_ВыкупАрендованныхОС", Перечисления.ХозяйственныеОперации.ВыкупАрендованныхОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ВыкупАрендованныхОС", Справочники.НастройкиХозяйственныхОпераций.ВыкупАрендованныхОС);

	ЗначенияПараметровПроведения.Вставить("ХО_НачислениеНДСВЧастиУслугиПоАренде", Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиУслугиПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НачислениеНДСВЧастиУслугиПоАренде", Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСВЧастиУслугиПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_НачислениеНДСВЧастиОбеспечительногоПлатежа", Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиОбеспечительногоПлатежа);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НачислениеНДСВЧастиОбеспечительногоПлатежа", Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСВЧастиОбеспечительногоПлатежа);

	ЗначенияПараметровПроведения.Вставить("ХО_НачислениеНДСВЧастиВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.НачислениеНДСВЧастиВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НачислениеНДСВЧастиВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.НачислениеНДСВЧастиВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ОтражениеУслугПоАрендеВРасходах", Перечисления.ХозяйственныеОперации.ОтражениеУслугПоАрендеВРасходах);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОтражениеУслугПоАрендеВРасходах", Справочники.НастройкиХозяйственныхОпераций.ОтражениеУслугПоАрендеВРасходах);

	ЗначенияПараметровПроведения.Вставить("ХО_ОбеспечительныйПлатежПриУчетеЗаБалансом", Перечисления.ХозяйственныеОперации.ОбеспечительныйПлатежПриУчетеЗаБалансом);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОбеспечительныйПлатежПриУчетеЗаБалансом", Справочники.НастройкиХозяйственныхОпераций.ОбеспечительныйПлатежПриУчетеЗаБалансом);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиУслугиПоАренде", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиУслугиПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиУслугиПоАренде", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиУслугиПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиОбеспечительногоПлатежа", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиОбеспечительногоПлатежа);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиОбеспечительногоПлатежа", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиОбеспечительногоПлатежа);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ПоступлениеНДСВЧастиВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ПоступлениеНДСВЧастиВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ПоступлениеНДСВЧастиВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ЗачетОплатыУслугиПоАрендеВСчетВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ЗачетОбеспечительногоПлатежаВСчетВыкупнойСтоимости);

	ЗначенияПараметровПроведения.Вставить("ХО_ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости", Перечисления.ХозяйственныеОперации.ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости", Справочники.НастройкиХозяйственныхОпераций.ЗачетАвансаВыкупнойСтоимостиВСчетВыкупнойСтоимости);
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеПроцентовПоАренде", Перечисления.ХозяйственныеОперации.СписаниеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеПроцентовПоАренде", Справочники.НастройкиХозяйственныхОпераций.СписаниеПроцентовПоАренде);
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеНДСПоАренде", Перечисления.ХозяйственныеОперации.СписаниеНДСПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеНДСПоАренде", Справочники.НастройкиХозяйственныхОпераций.СписаниеНДСПоАренде);
	
	ЗначенияПараметровПроведения.Вставить("ХО_СписаниеНеУчитываемойСтоимостиНУ", Перечисления.ХозяйственныеОперации.СписаниеНеУчитываемойСтоимостиНУ);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_СписаниеНеУчитываемойСтоимостиНУ", Справочники.НастройкиХозяйственныхОпераций.СписаниеНеУчитываемойСтоимостиНУ);
	
	ЗначенияПараметровПроведения.Вставить("ХО_ОтражениеАрендныхОбязательствВРасходах", Перечисления.ХозяйственныеОперации.ОтражениеАрендныхОбязательствВРасходах);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОтражениеАрендныхОбязательствВРасходах", Справочники.НастройкиХозяйственныхОпераций.ОтражениеАрендныхОбязательствВРасходах);

	ЗначенияПараметровПроведения.Вставить("ХО_ОтражениеАрендныхОбязательствВДоходах", Перечисления.ХозяйственныеОперации.ОтражениеАрендныхОбязательствВДоходах);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ОтражениеАрендныхОбязательствВДоходах", Справочники.НастройкиХозяйственныхОпераций.ОтражениеАрендныхОбязательствВДоходах);

	ЗначенияПараметровПроведения.Вставить("ХО_УвеличениеСтоимостиАрендованныхОС", Перечисления.ХозяйственныеОперации.УвеличениеСтоимостиАрендованныхОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УвеличениеСтоимостиАрендованныхОС", Справочники.НастройкиХозяйственныхОпераций.УвеличениеСтоимостиАрендованныхОС);
	
	ЗначенияПараметровПроведения.Вставить("ХО_УменьшениеСтоимостиАрендованныхОС", Перечисления.ХозяйственныеОперации.УменьшениеСтоимостиАрендованныхОС);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УменьшениеСтоимостиАрендованныхОС", Справочники.НастройкиХозяйственныхОпераций.УменьшениеСтоимостиАрендованныхОС);

	ЗначенияПараметровПроведения.Вставить("ХО_УвеличениеНДСПоАренде", Перечисления.ХозяйственныеОперации.УвеличениеНДСПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УвеличениеНДСПоАренде", Справочники.НастройкиХозяйственныхОпераций.УвеличениеНДСПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_УменьшениеНДСПоАренде", Перечисления.ХозяйственныеОперации.УменьшениеНДСПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УменьшениеНДСПоАренде", Справочники.НастройкиХозяйственныхОпераций.УменьшениеНДСПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_УвеличениеПроцентовПоАренде", Перечисления.ХозяйственныеОперации.УвеличениеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УвеличениеПроцентовПоАренде", Справочники.НастройкиХозяйственныхОпераций.УвеличениеПроцентовПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_УменьшениеПроцентовПоАренде", Перечисления.ХозяйственныеОперации.УменьшениеПроцентовПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_УменьшениеПроцентовПоАренде", Справочники.НастройкиХозяйственныхОпераций.УменьшениеПроцентовПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_ИзлишнеНачисленныеПроцентыПоАренде", Перечисления.ХозяйственныеОперации.ИзлишнеНачисленныеПроцентыПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_ИзлишнеНачисленныеПроцентыПоАренде", Справочники.НастройкиХозяйственныхОпераций.ИзлишнеНачисленныеПроцентыПоАренде);

	ЗначенияПараметровПроведения.Вставить("ХО_НедоначисленныеПроцентыПоАренде", Перечисления.ХозяйственныеОперации.НедоначисленныеПроцентыПоАренде);
	ЗначенияПараметровПроведения.Вставить("НастройкаХО_НедоначисленныеПроцентыПоАренде", Справочники.НастройкиХозяйственныхОпераций.НедоначисленныеПроцентыПоАренде);

КонецПроцедуры

// Определяет учитывается хотя бы одно ОС на балансе арендатора
// 
// Параметры:
// 	СписокОС - Массив -
// 	Дата - Дата -
// Возвращаемое значение:
// 	Булево -
Функция ЕстьПредметыАрендыНаБалансеАрендатора(СписокОС, Дата) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(&Дата, ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Договор.Балансодержатель = ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендатор)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

#КонецОбласти

#Область ЗаданияКЗакрытиюМесяца

// Формирует записи в регистрах заданий к закрытию месяца.
// 
// Параметры:
// 	Документ - ДокументОбъект -
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
			И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ВнеоборотныеАктивы.ФормированиеЗаданийКЗакрытиюМесяца");
	
	СформироватьЗаданияКРасчетуАмортизацииОС(Документ, ДанныеТаблиц);
	СформироватьЗаданияКРасчетуАмортизацииНМА(Документ, ДанныеТаблиц);
	СформироватьЗаданияКРасчетуСтоимостиВНА(Документ, ДанныеТаблиц);
	СформироватьЗаданияКНачислениюПроцентовПоАренде(ДанныеТаблиц);
	СформироватьЗаданияКФормированиюДвижений(Документ, ДанныеТаблиц);
	ЗакрытиеРасходовОтВыбытияОС.СформироватьЗадания(Документ, ДанныеТаблиц);
	ОбесценениеВНАСервер.СформироватьЗаданияКЗакрытиюМесяцаПоОСНМА(Документ, ДанныеТаблиц);
	СформироватьЗаданияАктуализацииПараметровУзловКомпонентов(Документ, ДанныеТаблиц);
		
	ВнеоборотныеАктивыЛокализация.СформироватьЗаписиРегистровЗаданий(Документ, ДанныеТаблиц);
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Формирует задания к расчету стоимости ОС и НМА, если изменились исходные данные.
//
// Параметры:
// 	Документ - ДокументОбъект, Неопределено - Документ, который изменяется.
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаданияКРасчетуСтоимостиВНА(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ДвиженияЗаписываютсяПриОтложенномФормированииДвижений(Документ) 
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьОС_ЗаданияКРасчетуСтоимостиВНА");
	СписокТаблиц.Добавить("СтоимостьНМА_ЗаданияКРасчетуСтоимостиВНА");
	СписокТаблиц.Добавить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНА");
	
	ОпределитьИзмененияВРегистреПрочиеРасходыДляРасчетаСтоимостиВНА(ДанныеТаблиц);
	
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, "ОбъектУчета");
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	
	#Область ИзмененныеДанные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация       КАК Организация,
	|	ИзмененныеДанные.ОбъектУчета       КАК ОбъектУчета,
	|	ИзмененныеДанные.Документ          КАК Документ,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, ДЕНЬ))  КАК Период,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ)) КАК НачалоМесяца
	|ПОМЕСТИТЬ ИзмененныеДанные_Предварительная
	|ИЗ
	|	&ТекстОбъединенияДанных КАК ИзмененныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.ОбъектУчета,
	|	ИзмененныеДанные.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета,
	|	НачалоМесяца
	|;
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаОС.Ссылка.Дата, МЕСЯЦ) КАК Месяц,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Ссылка.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ТаблицаОС.Ссылка.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
	|ПОМЕСТИТЬ втОбъектыДокумента
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеДанные_Предварительная КАК ИзмененныеДанные
	|		ПО ТаблицаОС.Ссылка.Организация = ИзмененныеДанные.Организация
	|		И ТаблицаОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета
	|		И НАЧАЛОПЕРИОДА(ТаблицаОС.Ссылка.Дата, МЕСЯЦ) = ИзмененныеДанные.НачалоМесяца
	|ГДЕ
	|	ТаблицаОС.Ссылка.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ТаблицаОС.Ссылка.Дата, МЕСЯЦ),
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Ссылка.ОтражатьВРеглУчете,
	|	ТаблицаОС.Ссылка.ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИзмененныеДанные_Предварительная КАК ИзмененныеДанные
	|		ПО ТаблицаОС.Ссылка.Организация = ИзмененныеДанные.Организация
	|		И ТаблицаОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета
	|		И НАЧАЛОПЕРИОДА(ТаблицаОС.Ссылка.Дата, МЕСЯЦ) = ИзмененныеДанные.НачалоМесяца
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство
	|;
	|
	|ВЫБРАТЬ
	|	ИзмененныеДанные.Организация                 КАК Организация,
	|	ИзмененныеДанные.ОбъектУчета                 КАК ОбъектУчета,
	|	ИзмененныеДанные.Документ                    КАК Документ,
	|	ИзмененныеДанные.Период                      КАК Период,
	|	ИзмененныеДанные.НачалоМесяца                КАК НачалоМесяца
	|ПОМЕСТИТЬ ИзмененныеДанные
	|ИЗ
	|	ИзмененныеДанные_Предварительная КАК ИзмененныеДанные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОС.Ссылка.Организация                        КАК Организация,
	|	ОС.ОсновноеСредство                          КАК ОбъектУчета,
	|	ОС.Ссылка                                    КАК Документ,
	|	НАЧАЛОПЕРИОДА(ОС.Ссылка.Дата, ДЕНЬ)          КАК Период,
	|	НАЧАЛОПЕРИОДА(ОС.Ссылка.Дата, МЕСЯЦ)         КАК НачалоМесяца
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыДокумента КАК втОбъектыДокумента
	|		ПО ОС.ОсновноеСредство = втОбъектыДокумента.ОсновноеСредство
	|			И ОС.Ссылка.Проведен
	|			И (ОС.Ссылка.ОтражатьВРеглУчете = втОбъектыДокумента.ОтражатьВРеглУчете И втОбъектыДокумента.ОтражатьВРеглУчете
	|				ИЛИ ОС.Ссылка.ОтражатьВУпрУчете = втОбъектыДокумента.ОтражатьВУпрУчете И втОбъектыДокумента.ОтражатьВУпрУчете)
	|			И (НАЧАЛОПЕРИОДА(ОС.Ссылка.Дата, МЕСЯЦ) = втОбъектыДокумента.Месяц)
	|ГДЕ
	|	ОС.Ссылка.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|ВЫБРАТЬ
	|	Компоненты.Ссылка.Организация                КАК Организация,
	|	Компоненты.ОсновноеСредство                  КАК ОбъектУчета,
	|	Компоненты.Ссылка                            КАК Документ,
	|	НАЧАЛОПЕРИОДА(Компоненты.Ссылка.Дата, ДЕНЬ)  КАК Период,
	|	НАЧАЛОПЕРИОДА(Компоненты.Ссылка.Дата, МЕСЯЦ) КАК НачалоМесяца
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК Компоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыДокумента КАК втОбъектыДокумента
	|		ПО Компоненты.ОсновноеСредство = втОбъектыДокумента.ОсновноеСредство
	|			И Компоненты.Ссылка.Проведен
	|			И (Компоненты.Ссылка.ОтражатьВРеглУчете = втОбъектыДокумента.ОтражатьВРеглУчете И втОбъектыДокумента.ОтражатьВРеглУчете
	|				ИЛИ Компоненты.Ссылка.ОтражатьВУпрУчете = втОбъектыДокумента.ОтражатьВУпрУчете И втОбъектыДокумента.ОтражатьВУпрУчете)
	|			И (НАЧАЛОПЕРИОДА(Компоненты.Ссылка.Дата, МЕСЯЦ) = втОбъектыДокумента.Месяц)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ОбъектУчета";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбъединенияДанных", "(" + ТекстОбъединенияДанных + ")");
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ФормированиеЗаданий
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаФормированиеЗаданийКРасчетуСтоимостиВНА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СтоимостьОС.Период > &ДатаНачалаУчета
		|				ТОГДА СтоимостьОС.Период
		|			ИНАЧЕ &ДатаНачалаУчета
		|		КОНЕЦ) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
		|		ПО (СтоимостьОС.Организация = ИзмененныеДанные.Организация)
		|			И (СтоимостьОС.АналитикаКапитализацииРасходов = ИзмененныеДанные.ОбъектУчета)
		|			И (СтоимостьОС.Период >= ИзмененныеДанные.Период)
		|			И (СтоимостьОС.Активность)
		|			И (СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход))
		|			И (СтоимостьОС.ХозяйственнаяОперация В (
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС), 
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации), 
		|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)))
		|ГДЕ
		|	СтоимостьОС.Период >= &ДатаНачалаУчетаСебестоимости
		|	И &ИспользоватьУчетСебестоимости
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА СтоимостьНМА.Период > &ДатаНачалаУчета
		|				ТОГДА СтоимостьНМА.Период
		|			ИНАЧЕ &ДатаНачалаУчета
		|		КОНЕЦ) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
		|		ПО (СтоимостьНМА.Организация = ИзмененныеДанные.Организация)
		|			И (СтоимостьНМА.НематериальныйАктив = ИзмененныеДанные.ОбъектУчета)
		|			И (СтоимостьНМА.Период >= ИзмененныеДанные.Период)
		|			И (СтоимостьНМА.Активность)
		|			И (СтоимостьНМА.ХозяйственнаяОперация В (
		|				ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМА)))
		|ГДЕ
		|	СтоимостьНМА.Период >= &ДатаНачалаУчетаСебестоимости
		|	И &ИспользоватьУчетСебестоимости
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ИзмененныеДанные.ОбъектУчета";
	КонецЕсли; 
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса =
	"УНИЧТОЖИТЬ ИзмененныеДанные";
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	Запрос.УстановитьПараметр("ДатаНачалаУчетаСебестоимости", НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()));
	Запрос.УстановитьПараметр("ИспользоватьУчетСебестоимости", ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости"));
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует задания к отложенному формированию движений по ОС, если изменились исходные данные.
//
// Параметры:
// 	Документ - ДокументОбъект, Неопределено - Документ, который изменяется.
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаданияКФормированиюДвижений(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ДвиженияЗаписываютсяПриОтложенномФормированииДвижений(Документ)
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьТаблицуРасчетыПоФинансовымИнструментамВРазрезеОС(ДанныеТаблиц);
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьОС");
	СписокТаблиц.Добавить("АмортизацияОС");
	СписокТаблиц.Добавить("ПорядокУчетаОС");
	СписокТаблиц.Добавить("РасчетыПоФинансовымИнструментамВРазрезеОС");
	
	ДопПоля = Новый Структура("ОбъектУчета", "ОсновноеСредство");
	ТекстОбъединенияДанныхОС = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СтоимостьНМА");
	СписокТаблиц.Добавить("АмортизацияНМА");
	СписокТаблиц.Добавить("ПорядокУчетаНМА");
	
	ДопПоля = Новый Структура("ОбъектУчета", "НематериальныйАктив");
	ТекстОбъединенияДанныхНМА = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	ТекстыДанных = Новый Массив;
	Если ТекстОбъединенияДанныхОС <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхОС);
	КонецЕсли;
	Если ТекстОбъединенияДанныхНМА <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхНМА);
	КонецЕсли; 
	ТекстОбъединенияДанных = СтрСоединить(ТекстыДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТипыДокументов = ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения();
	
	Если Документ <> Неопределено Тогда
		ТипДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Документ.Ссылка));
		ЗарегистрироватьДокумент = (ТипыДокументов.Найти(ТипДокумента) <> Неопределено);
	Иначе
		ЗарегистрироватьДокумент = Ложь;
	КонецЕсли;
	
	Если ТекстОбъединенияДанных = "" И НЕ ЗарегистрироватьДокумент Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	Если ТекстОбъединенияДанных = "" Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Ссылка КАК Документ,
		|	ИзмененныеДанные.ОсновноеСредство КАК ОбъектУчета,
		|	ИзмененныеДанные.Дата КАК Месяц
		|ИЗ
		|	РегистрСведений.ДокументыПоОС КАК ИзмененныеДанные
		|ГДЕ
		|	ИзмененныеДанные.Ссылка = &Ссылка
		|	И ИзмененныеДанные.Дата >= &ДатаНачалаУчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Ссылка КАК Документ,
		|	ИзмененныеДанные.НематериальныйАктив КАК ОбъектУчета,
		|	ИзмененныеДанные.Дата КАК Месяц
		|ИЗ
		|	РегистрСведений.ДокументыПоНМА КАК ИзмененныеДанные
		|ГДЕ
		|	ИзмененныеДанные.Ссылка = &Ссылка
		|	И ИзмененныеДанные.Дата >= &ДатаНачалаУчета";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация       КАК Организация,
		|	ИзмененныеДанные.ОбъектУчета       КАК ОбъектУчета,
		|	ИзмененныеДанные.Документ          КАК Документ,
		|	МИНИМУМ(ИзмененныеДанные.Период)   КАК Период
		|ПОМЕСТИТЬ ИзмененныеДанные
		|ИЗ
		|	&ТекстОбъединенияДанных КАК ИзмененныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.ОбъектУчета,
		|	ИзмененныеДанные.Документ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета,
		|	Организация";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбъединенияДанных", "(" + ТекстОбъединенияДанных + ")");
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		Если ЗарегистрироватьДокумент Тогда
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета,
			|	МИНИМУМ(ИзмененныеДанные.Дата) КАК Месяц
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета,
			|		ДокументыПоОС.Дата
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
			|			ПО (ДокументыПоОС.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоОС.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоОС.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоОС.Проведен)
			|				И (ДокументыПоОС.ТипСсылки В(&ТипыДокументов))
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета,
			|		ДокументыПоНМА.Дата
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
			|			ПО (ДокументыПоНМА.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоНМА.НематериальныйАктив = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоНМА.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоНМА.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоНМА.Проведен)
			|				И (ДокументыПоНМА.ТипСсылки В(&ТипыДокументов))
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ДокументыПоОС.Организация,
			|		ДокументыПоОС.Ссылка,
			|		ДокументыПоОС.ОсновноеСредство,
			|		ДокументыПоОС.Дата
			|	ИЗ
			|		РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
			|	ГДЕ
			|		ДокументыПоОС.Ссылка = &Ссылка
			|
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|	ВЫБРАТЬ
			|		ДокументыПоНМА.Организация,
			|		ДокументыПоНМА.Ссылка,
			|		ДокументыПоНМА.НематериальныйАктив,
			|		ДокументыПоНМА.Дата
			|	ИЗ
			|		РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
			|	ГДЕ
			|		ДокументыПоНМА.Ссылка = &Ссылка
			|
			|	) КАК ИзмененныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИзмененныеДанные";
			
			СписокЗапросов.Добавить(ТекстЗапроса);
			
		Иначе
		
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета,
			|	МИНИМУМ(ИзмененныеДанные.Дата) КАК Месяц
			|ИЗ
			|	(ВЫБРАТЬ
			|		ИзмененныеДанные.Организация КАК Организация,
			|		ИзмененныеДанные.Документ КАК Документ,
			|		ИзмененныеДанные.ОбъектУчета КАК ОбъектУчета,
			|		МИНИМУМ(ДокументыПоОС.Дата) КАК Дата
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
			|			ПО (ДокументыПоОС.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоОС.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоОС.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоОС.Проведен)
			|				И (ДокументыПоОС.ТипСсылки В (&ТипыДокументов))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета,
			|		МИНИМУМ(ДокументыПоНМА.Дата)
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
			|			ПО (ДокументыПоНМА.Организация = ИзмененныеДанные.Организация)
			|				И (ДокументыПоНМА.НематериальныйАктив = ИзмененныеДанные.ОбъектУчета)
			|				И (ДокументыПоНМА.Дата >= ИзмененныеДанные.Период)
			|				И (ДокументыПоНМА.Дата >= &ДатаНачалаУчета)
			|				И (ДокументыПоНМА.Проведен)
			|				И (ДокументыПоНМА.ТипСсылки В (&ТипыДокументов))
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.Документ,
			|		ИзмененныеДанные.ОбъектУчета) КАК ИзмененныеДанные
			|
			|СГРУППИРОВАТЬ ПО
			|	ИзмененныеДанные.Организация,
			|	ИзмененныеДанные.Документ,
			|	ИзмененныеДанные.ОбъектУчета
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ИзмененныеДанные";
			
			СписокЗапросов.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЕсли; 
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует задания к отложенному обновлению движений по регистрам сведений для подчиненных узлов и компонентов.
//
// Параметры:
// 	Документ - ДокументОбъект, Неопределено - Документ, который изменяется.
// 	ДанныеТаблиц - см. ПроведениеДокументов.ДанныеТаблицСтаройСтруктуры
Процедура СформироватьЗаданияАктуализацииПараметровУзловКомпонентов(Документ, ДанныеТаблиц) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
		ИЛИ ДвиженияЗаписываютсяПриОтложенномФормированииДвижений(Документ)
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли; 
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("МестонахождениеОС");
	СписокТаблиц.Добавить("УзлыКомпонентыАмортизации");
	СписокТаблиц.Добавить("ПорядокУчетаОС");
	СписокТаблиц.Добавить("ПорядокУчетаОСБУ");
	СписокТаблиц.Добавить("ПорядокУчетаОСУУ");
	
	ДопПоля = Новый Структура("ОбъектУчета", "ОсновноеСредство");
	ТекстОбъединенияДанныхОС = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("СоставЕГДС");
	
	ДопПоля = Новый Структура("ОбъектУчета", "ВнеоборотныйАктив");
	ТекстОбъединенияДанныхЕГДС = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, ДопПоля);
	
	ТекстыДанных = Новый Массив;
	Если ТекстОбъединенияДанныхОС <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхОС);
	КонецЕсли;
	Если ТекстОбъединенияДанныхЕГДС <> "" Тогда
		ТекстыДанных.Добавить(ТекстОбъединенияДанныхЕГДС);
	КонецЕсли; 
	ТекстОбъединенияДанных = СтрСоединить(ТекстыДанных, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТипыДокументов = ИдентификаторыДокументовПоКоторымАктуализируютсяПараметрыУзловКомпонентов();
	
	Если Документ <> Неопределено Тогда
		ТипДокумента = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗнч(Документ.Ссылка));
		ЗарегистрироватьДокумент = (ТипыДокументов.Найти(ТипДокумента) <> Неопределено);
	Иначе
		ЗарегистрироватьДокумент = Ложь;
	КонецЕсли;
	
	Если ТекстОбъединенияДанных = "" Или НЕ ЗарегистрироватьДокумент Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация       КАК Организация,
	|	ИзмененныеДанные.ОбъектУчета       КАК ОбъектУчета,
	|	ИзмененныеДанные.Документ          КАК Документ,
	|	МИНИМУМ(ИзмененныеДанные.Период)   КАК Период
	|ПОМЕСТИТЬ ИзмененныеДанные
	|ИЗ
	|	&ТекстОбъединенияДанных КАК ИзмененныеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(&Период) КАК Компоненты
	|		ПО Компоненты.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.ОбъектУчета,
	|	ИзмененныеДанные.Документ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбъединенияДанных", "(" + ТекстОбъединенияДанных + ")");
	СписокЗапросов.Добавить(ТекстЗапроса);
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ,
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.АктуализацияПараметровУзловКомпонентовАмортизации) КАК Операция,
	|	НАЧАЛОПЕРИОДА(ИзмененныеДанные.Период, МЕСЯЦ) КАК Месяц
	|ИЗ
	|	(ВЫБРАТЬ
	|		ИзмененныеДанные.Организация КАК Организация,
	|		ИзмененныеДанные.Документ КАК Документ,
	|		ИзмененныеДанные.Период КАК Период
	|	ИЗ
	|		ИзмененныеДанные КАК ИзмененныеДанные
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДокументыПоОС.Организация КАК Организация,
	|		ДокументыПоОС.Ссылка КАК Документ,
	|		ДокументыПоОС.Дата КАК Период
	|	ИЗ
	|		ИзмененныеДанные КАК ИзмененныеДанные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|			ПО (ДокументыПоОС.Организация = ИзмененныеДанные.Организация)
	|			И (ДокументыПоОС.ОсновноеСредство = ИзмененныеДанные.ОбъектУчета)
	|			И (ДокументыПоОС.Дата >= ИзмененныеДанные.Период)
	|			И (ДокументыПоОС.Дата >= &ДатаНачалаУчета)
	|			И (ДокументыПоОС.Проведен)
	|			И (ДокументыПоОС.ТипСсылки В (&ТипыДокументов))) КАК ИзмененныеДанные
	|;
	|
	|/////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ИзмененныеДанные";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", Документ.Ссылка.МоментВремени());
	Запрос.УстановитьПараметр("ТипыДокументов", ТипыДокументов);
	Запрос.УстановитьПараметр("ДатаНачалаУчета", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Формирует задания при записи движений распределения взаиморасчетов.
//
// Параметры:
//  МенеджерВременныхТаблиц	 - МенеджерВременныхТаблиц		 - Менеджер временных таблиц.
//
Процедура СформироватьЗаданияПриЗаписиДвиженийРаспределенияВзаиморасчетов(МенеджерВременныхТаблиц) Экспорт
	
	ВнеоборотныеАктивыЛокализация.СформироватьЗаданияПриЗаписиДвиженийРаспределенияВзаиморасчетов(МенеджерВременныхТаблиц);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Идентификатор предупреждения при печати.
// Используется для вывода текста сообщения пользователю в виде предупреждения в шапке формы "Печать документов".
//
// Возвращаемое значение:
//   Строка - Значение реквизита Поле объекта СообщениеПользователю.
//       В реквизите Текст объекта СообщениеПользователю может быть как обычный тест,
//       так и шаблон форматированной строки (см. СтроковыеФункции.ФорматированнаяСтрока).
Функция ИдентификаторПредупрежденияПриПечати() Экспорт
	Возврат "ПредупреждениеСведенияНеактуальны";
КонецФункции


// Добавляет текст предупреждения, информирующий пользователя о том, что стоимость или амортизация не актуальны,
// т.к. не выполнено закрытие месяца.
// 
// Параметры:
//  СведенияАктуальны - Булево - Ложь, если сведения не актуальны.
//  ТабличныйДокумент - ТабличныйДокумент - Печатная форма
Процедура ДобавитьПредупреждениеЕслиСведенияНеАктуальны(СведенияАктуальны) Экспорт

	Если СведенияАктуальны Тогда
		Возврат;
	КонецЕсли;
	
	// Информацию о том, что сведения неактуальны передаем в форму печати через сообщения пользователю.
	СообщениеОНеактуальности = Новый СообщениеПользователю;
	СообщениеОНеактуальности.Поле = ИдентификаторПредупрежденияПриПечати();
	СообщениеОНеактуальности.Текст = НСтр(
		"ru = 'Стоимость и амортизация не актуальны, необходимо выполнить закрытие месяца.';
		|en = 'Cost and depreciation are not relevant, close the month.'");
	СообщениеОНеактуальности.Сообщить();
	
КонецПроцедуры

// См. УправлениеПечатьюПереопределяемый.ПечатьДокументовПриСозданииНаСервере.
Процедура ПечатьДокументовПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Предупреждения печатных форм выводятся через сообщения пользователю.
	Сообщения = ПолучитьСообщенияПользователю(Истина);
	ИдентификаторПредупреждения = ИдентификаторПредупрежденияПриПечати();
	Для Каждого Сообщение Из Сообщения Цикл
		
		// Предупреждения, которые требуют вывода в шапку, маркируются специальным именем поля.
		Если Сообщение.Поле <> ИдентификаторПредупреждения Тогда
			// При получении сообщений они очищаются. 
			// Если в очереди сообщений были не относящиеся к сообщениям печатной формы для ВНА - они пропадут.
			// Восстановим эти сообщения.
			Сообщение.Сообщить();
			Продолжить;
		КонецЕсли;
		
		// Предупреждений может быть несколько, поэтому перед созданием элементов осуществляется подбор свободного имени.
		НомерСуффикса = 0;
		Суффикс = ИдентификаторПредупреждения;
		Пока Форма.Элементы.Найти(Суффикс + Формат(НомерСуффикса, "ЧГ=")) <> Неопределено Цикл
			НомерСуффикса = НомерСуффикса + 1;
		КонецЦикла;
		Если НомерСуффикса <> 0 Тогда
			Суффикс = Суффикс + Формат(НомерСуффикса, "ЧГ=");
		КонецЕсли;
		
		// Если текст объемный (подробный), то из него выделяется краткая часть.
		Позиция = СтрНайти(Сообщение.Текст, Символы.ПС, , , 2);
		Если Позиция > 0 Тогда
			Кратко = СокрЛП(Лев(Сообщение.Текст, Позиция - 1));
			Подробно = Сообщение.Текст;
		Иначе
			Кратко = Сообщение.Текст;
			Подробно = "";
		КонецЕсли;
		
		// Горизонтальная группа.
		Группа = Форма.Элементы.Вставить("Группа" + Суффикс, Тип("ГруппаФормы"), ,
			Форма.Элементы.ГруппаДополнительнаяИнформация);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.ОтображатьЗаголовок = Ложь;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
		
		// Восклицательный знак средних размеров.
		Картинка = Форма.Элементы.Добавить("Картинка" + Суффикс, Тип("ДекорацияФормы"), Группа);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Картинка = БиблиотекаКартинок.Предупреждение32;
		
		// Краткий текст предупреждения.
		Надпись = Форма.Элементы.Добавить(Суффикс, Тип("ДекорацияФормы"), Группа);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Кратко);
		Надпись.АвтоМаксимальнаяШирина = Ложь;
		Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");

		Если Подробно <> "" Тогда
			// Гиперссылка "Подробнее...".
			ГруппаПодробнее = Форма.Элементы.Добавить("ГруппаПодробнее" + Суффикс, Тип("ГруппаФормы"), Группа);
			ГруппаПодробнее.Вид = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаПодробнее.Отображение = ОтображениеОбычнойГруппы.Нет;
			ГруппаПодробнее.ОтображатьЗаголовок = Истина;
			ГруппаПодробнее.Заголовок = НСтр("ru = 'Подробнее...';
											|en = 'More...'");
			ГруппаПодробнее.ЦветТекстаЗаголовка = ЦветаСтиля.ГиперссылкаЦвет;
			ГруппаПодробнее.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
			ГруппаПодробнее.Поведение = ПоведениеОбычнойГруппы.Всплывающая;

			ГруппаПодробнее.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
			
			// Подробный текст предупреждения.
			Надпись = Форма.Элементы.Добавить("Подробнее" + Суффикс, Тип("ДекорацияФормы"), ГруппаПодробнее);
			Надпись.Вид = ВидДекорацииФормы.Надпись;
			Надпись.Заголовок = СтроковыеФункции.ФорматированнаяСтрока(Подробно);
			Надпись.АвтоМаксимальнаяШирина = Ложь;
			Надпись.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_ОбработкаНавигационнойСсылки");
		КонецЕсли;

		Сообщение.Текст = ""; // Обработанные сообщения принудительно очищаем.

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Отчеты

// Добавляет команду отчета в список команд.
// 
// Параметры:
//	КомандыОтчетов - см. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   
// Возвращаемое значение:
//	СтрокаТаблицыЗначений -
//	Неопределено -  
Функция ДобавитьКомандуОтчетаВедомостьРасчетовПоДоговоруАренды(КомандыОтчетов) Экспорт
	
	Если ПравоДоступа("Просмотр", Метаданные.Отчеты.ВедомостьРасчетовПоАренде)
		И ИспользуетсяУправлениеВНА() Тогда
		
		КомандаОтчет = КомандыОтчетов.Добавить();
		
		КомандаОтчет.Менеджер = Метаданные.Отчеты.ВедомостьРасчетовПоАренде.ПолноеИмя();
		КомандаОтчет.Представление = НСтр("ru = 'Ведомость расчетов по договору';
											|en = 'Contract AR/AP'");
		КомандаОтчет.Важность = "Обычное";
		КомандаОтчет.МножественныйВыбор = Истина;
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", "ПоДоговоруКонтекст");
		КомандаОтчет.КлючВарианта = "ПоДоговоруКонтекст";
		
		Возврат КомандаОтчет;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

#Область Механизмы

// Определяет список объектов конфигурации, в модулях менеджеров которых предусмотрена процедура 
// ДобавитьКомандыСозданияНаОсновании, формирующая команды создания на основании объектов.
// Синтаксис процедуры ДобавитьКомандыСозданияНаОсновании см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами создания на основании.
//
// Пример:
//	Объекты.Добавить(Метаданные.Справочники.Организации);
//   
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Документы.АмортизацияНМА2_4);
	Объекты.Добавить(Метаданные.Документы.АмортизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4);
	Объекты.Добавить(Метаданные.Документы.ВозвратОСИзАренды2_4);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ВыработкаНМА);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровОС2_4);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС);
	Объекты.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ОбъединениеОС);
	Объекты.Добавить(Метаданные.Документы.ПередачаОСВАренду2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ЗаключениеДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеУслугПоАренде);
	Объекты.Добавить(Метаданные.Документы.РазукомплектацияОС);
	Объекты.Добавить(Метаданные.Документы.СписаниеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.СписаниеОС2_4);
	
	Объекты.Добавить(Метаданные.Справочники.ДоговорыАренды);
	Объекты.Добавить(Метаданные.Справочники.НематериальныеАктивы);
	Объекты.Добавить(Метаданные.Справочники.ОбъектыЭксплуатации);
	
	ВнеоборотныеАктивыЛокализация.ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты);
	
КонецПроцедуры

// См. ОбщийМодуль.ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения()
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	Разделы = Новый Соответствие;
	Разделы.Вставить("ПоступлениеУслугПоАренде", "Закупки");
	
	//++ НЕ УТКА
	Разделы.Вставить("НаработкаОбъектовЭксплуатации", "УправлениеРемонтами");
	//-- НЕ УТКА
	
	СписокДокументов = СписокДокументовВНА();
	СписокДокументов.Добавить("НаработкаОбъектовЭксплуатации");
	
	Для Каждого ИмяДокумента Из СписокДокументов Цикл
		
		Раздел = Разделы.Получить(ИмяДокумента);
		Если Раздел = Неопределено Тогда
			Раздел = "ВнеоборотныеАктивы";
		КонецЕсли;
		
		ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ." + ИмяДокумента, "Дата", Раздел, "Организация");
			
	КонецЦикла;
	
	РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКРасчетуСтоимостиВНА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоВНА.ОписаниеРегистровДляКонтроляДатЗапретаИзменения(ИсточникиДанных);
	
	ВнеоборотныеАктивыЛокализация.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных);
	
КонецПроцедуры

// См. РаботаСФайламиПереопределяемый.ПриОпределенииСправочниковХраненияФайлов()
//
Процедура ПриОпределенииСправочниковХраненияФайлов(ТипВладелецФайла, ИменаСправочников) Экспорт
	
	Если ТипВладелецФайла = Тип("ДокументСсылка.АмортизацияНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.АмортизацияОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВозвратОСИзАренды2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыбытиеАрендованныхОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыкупАрендованныхОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ВыработкаНМА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ЗаключениеДоговораАренды")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеПараметровНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеПараметровОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.МодернизацияОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.НаработкаОбъектовЭксплуатации")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ОбесценениеВНА")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ОбъединениеОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПередачаОСВАренду2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПеремещениеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПеремещениеОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПереоценкаНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПереоценкаОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПоступлениеАрендованныхОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПрекращениеДоговораАренды")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПризнаниеРасходовПоИсследованиямИРазработкам")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.РазукомплектацияОС")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.СписаниеНМА2_4")
		ИЛИ ТипВладелецФайла = Тип("ДокументСсылка.СписаниеОС2_4") 
		ИЛИ ВнеоборотныеАктивыЛокализация.ДокументИмеетПрисоединенныеФайлы(ТипВладелецФайла) Тогда
		
		ИменаСправочников.Вставить("ДокументыВНАПрисоединенныеФайлы", Истина);
	КонецЕсли;
	
КонецПроцедуры

// См. ОбщийМодуль.УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа()
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	
	Для Каждого ИмяДокумента Из СписокДокументовВНА() Цикл
		Списки.Вставить(Метаданные.Документы[ИмяДокумента], Истина);
	КонецЦикла;
	
	Списки.Вставить(Метаданные.РегистрыСведений.ДокументыПоНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ДокументыПоОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МестонахождениеОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.МестоУчетаНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииНМАУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПараметрыАмортизацииОСУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПервоначальныеСведенияОС, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ПорядокУчетаОСУУ, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.АмортизацияНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.АмортизацияОС, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.СтоимостьНМА, Истина);
	Списки.Вставить(Метаданные.РегистрыНакопления.СтоимостьОС, Истина);
	
	ВнеоборотныеАктивыЛокализация.ПриЗаполненииСписковСОграничениемДоступа(Списки);
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт

	//++ НЕ УТКА
	СписокОбъектов.Добавить(Документы.ЗаказНаРемонт);
	СписокОбъектов.Добавить(Документы.РегистрацияДефекта);
	СписокОбъектов.Добавить(Документы.УстановкаЗначенийНаработки);
	//-- НЕ УТКА
	
	СписокОбъектов.Добавить(Документы.АмортизацияНМА2_4);
	СписокОбъектов.Добавить(Документы.АмортизацияОС2_4);
	СписокОбъектов.Добавить(Документы.ВводОстатковВзаиморасчетовПоАренде);
	СписокОбъектов.Добавить(Документы.ВводОстатковВнеоборотныхАктивов2_4);
	СписокОбъектов.Добавить(Документы.ВозвратОСИзАренды2_4);
	СписокОбъектов.Добавить(Документы.ВыбытиеАрендованныхОС);
	СписокОбъектов.Добавить(Документы.ВыработкаНМА);
	СписокОбъектов.Добавить(Документы.ЗаключениеДоговораАренды);
	СписокОбъектов.Добавить(Документы.ИзменениеПараметровНМА2_4);
	СписокОбъектов.Добавить(Документы.ИзменениеПараметровОС2_4);
	СписокОбъектов.Добавить(Документы.ИзменениеУсловийДоговораАренды);
	СписокОбъектов.Добавить(Документы.МодернизацияОС2_4);
	СписокОбъектов.Добавить(Документы.НаработкаОбъектовЭксплуатации);
	СписокОбъектов.Добавить(Документы.ОбесценениеВНА);
	СписокОбъектов.Добавить(Документы.ОбъединениеОС);
	СписокОбъектов.Добавить(Документы.ПередачаОСВАренду2_4);
	СписокОбъектов.Добавить(Документы.ПеремещениеНМА2_4);
	СписокОбъектов.Добавить(Документы.ПеремещениеОС2_4);
	СписокОбъектов.Добавить(Документы.ПереоценкаНМА2_4);
	СписокОбъектов.Добавить(Документы.ПереоценкаОС2_4);
	СписокОбъектов.Добавить(Документы.ПодготовкаКПередачеНМА2_4);
	СписокОбъектов.Добавить(Документы.ПодготовкаКПередачеОС2_4);
	СписокОбъектов.Добавить(Документы.ПоступлениеАрендованныхОС);
	СписокОбъектов.Добавить(Документы.ПоступлениеУслугПоАренде);
	СписокОбъектов.Добавить(Документы.ПризнаниеРасходовПоИсследованиямИРазработкам);
	СписокОбъектов.Добавить(Документы.ПринятиеКУчетуНМА2_4);
	СписокОбъектов.Добавить(Документы.ПринятиеКУчетуОС2_4);
	СписокОбъектов.Добавить(Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
	СписокОбъектов.Добавить(Документы.РазукомплектацияОС);
	СписокОбъектов.Добавить(Документы.СписаниеНМА2_4);
	СписокОбъектов.Добавить(Документы.СписаниеОС2_4);
	
	СписокОбъектов.Добавить(Справочники.ДоговорыАренды);
	СписокОбъектов.Добавить(Справочники.НематериальныеАктивы);
	СписокОбъектов.Добавить(Справочники.ОбъектыЭксплуатации);
	
КонецПроцедуры

// Заполняет массив структур, которые будут использованы для начального заполнения и восстановления начального заполнения профилей.
//
// Параметры:
//  ОписанияПрофилей - Массив из см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
//  ПараметрыОбновления - Структура:
//   * ОбновлятьИзмененныеПрофили - Булево - начальное значение Истина.
//   * ЗапретитьИзменениеПрофилей - Булево - начальное значение Истина.
//       Если установить Ложь, тогда поставляемые профили можно не только просматривать, но и редактировать.
//   * ОбновлятьГруппыДоступа     - Булево - начальное значение Истина.
//   * ОбновлятьГруппыДоступаСУстаревшимиНастройками - Булево - начальное значение Ложь.
//       Если установить Истина, то настройки значений, выполненные администратором для
//       вида доступа, который был удален из профиля, будут также удалены из групп доступа.
//
Процедура ЗаполнитьПоставляемыеПрофилиГруппДоступа(ОписанияПрофилей, ПараметрыОбновления) Экспорт
	
	ДобавитьПрофильБухгалтерВнеоборотныхАктивов(ОписанияПрофилей);
	ДобавитьПрофильОтветственныйЗаВедениеОбъектовЭксплуатации(ОписанияПрофилей);
	
КонецПроцедуры

// См. ПланВидовХарактеристик.СтатьиРасходов.ОбработкаПараметровВыбора
Процедура ОбработкаПараметровВыбораСтатьиРасходов(Параметры) Экспорт
	
	МассивВариантовРаспределения = ВнеоборотныеАктивыКлиентСерверЛокализация.ВариантыРаспределенияРасходовПоАмортизацииРегл(Параметры);
		
	Если МассивВариантовРаспределения <> Неопределено Тогда
		Параметры.Отбор.Вставить("ВариантРаспределенияРасходов", Новый ФиксированныйМассив(МассивВариантовРаспределения));
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ШтрихкодыИТорговоеОборудование

// Находит объекты эксплуатации по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 
// Возвращаемое значение:
//  Массив - Список объектов эксплуатации.
//
Функция НайтиОбъектыЭксплуатацииПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт
	
	Результат = НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации с инвентарным номером %1 не найден';
							|en = 'An asset with inventory number %1 is not found'");
	Для каждого Штрихкод Из Результат.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Объект эксплуатации ""%1"" не может быть добавлен, т.к. он не удовлетворяет условиям выбора';
							|en = 'The asset ""%1"" cannot be added, as it does not meet selection conditions'");
	Для каждого СсылкаНаОбъект Из Результат.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
	Возврат Результат.МассивОбъектов;
	
КонецФункции

// Находит основные средства по штрихкодам.
//
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 
// Возвращаемое значение:
//  Массив - Список объектов эксплуатации.
//
Функция НайтиОсновныеСредстваПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора = Неопределено) Экспорт

	Результат = НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора);
	СообщитьОРезультатахПоискаПоШтрихкоду(Результат);
	
	Возврат Результат.МассивОбъектов;

КонецФункции

// Находит объекты эксплуатации по штрихкодам.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура - Данные штрихкодов.
//  ПараметрыПодбора - Структура - Параметры подбора, которым должны удовлетворять объекты эксплуатации.
// 	
// Возвращаемое значение:
// 	Структура - содержит:
//    * МассивОбъектов - Массив из СправочникСсылка.ОбъектыЭксплуатации - найденные объекты.
//    * НеНайдены - Массив из Строка - штрихкоды, по которым не удалось найти объекты.
//    * НеПодходят - Массив из СправочникСсылка.ОбъектыЭксплуатации - Объекты, которые не подходят по параметрам подбора.
Функция НайтиОбъектыПоШтрихкодам(ДанныеШтрихкодов, ПараметрыПодбора) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("МассивОбъектов", Новый Массив);
	Результат.Вставить("НеПодходят", Новый Массив);
	Результат.Вставить("НеНайдены", Новый Массив);

	МассивШтрихкодов = МассивШтрихкодов(ДанныеШтрихкодов);
	
	Если МассивШтрихкодов.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ОбъектыЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|ГДЕ
	|	ОбъектыЭксплуатации.ИнвентарныйНомер В(&МассивШтрихкодов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыЭксплуатации.Наименование,
	|	ОбъектыЭксплуатации.ИнвентарныйНомер";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивШтрихкодов", МассивШтрихкодов);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	МассивОбъектов = РезультатЗапроса.ВыгрузитьКолонку("Ссылка");
	
	НеНайдены = Новый Массив;
	Для каждого Штрихкод Из МассивШтрихкодов Цикл
		Если РезультатЗапроса.Найти(Штрихкод, "ИнвентарныйНомер") = Неопределено Тогда
			НеНайдены.Добавить(Штрихкод);
		КонецЕсли; 
	КонецЦикла; 
	
	НеПодходят = Новый Массив;
	Если ПараметрыПодбора <> Неопределено Тогда
		НеПодходят = УдалитьОбъектыЭксплуатацииНеСоответствующиеОтбору(МассивОбъектов, ПараметрыПодбора);
	КонецЕсли; 
	
	Результат.МассивОбъектов = МассивОбъектов;
	Результат.НеПодходят = НеПодходят;
	Результат.НеНайдены = НеНайдены;
	
	Возврат Результат;

КонецФункции

// Сообщает о результатах поиска по штрихкоду.
// 
// Параметры:
// 	РезультатПоиска - см. НайтиОбъектыПоШтрихкодам
Процедура СообщитьОРезультатахПоискаПоШтрихкоду(РезультатПоиска) Экспорт
	
	ШаблонСообщения = НСтр("ru = 'Основное средство с инвентарным номером %1 не найдено';
							|en = 'Fixed asset with inventory number %1 is not found'");
	Для каждого Штрихкод Из РезультатПоиска.НеНайдены Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Штрихкод);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения); 
	КонецЦикла; 
	
	ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" не может быть добавлено в документ, т.к. оно не удовлетворяет условиям выбора';
							|en = 'The fixed asset ""%1"" cannot be added to the document, as it does not meet selection conditions'");
	Для каждого СсылкаНаОбъект Из РезультатПоиска.НеПодходят Цикл
		ТекстСообщения = СтрШаблон(ШаблонСообщения, СсылкаНаОбъект);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект); 
	КонецЦикла; 
	
КонецПроцедуры

// Получает список штрихкодов из результата ввода.
// 
// Параметры:
//  ДанныеШтрихкодов - Структура, Массив из Строка - Данные штрихкодов.
//  
// Возвращаемое значение:
// 	Массив - 
Функция МассивШтрихкодов(ДанныеШтрихкодов) Экспорт
	
	МассивШтрихкодов = Новый Массив;
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") Тогда
		Для каждого СтрокаШтрихкод Из ДанныеШтрихкодов Цикл
			Если ЗначениеЗаполнено(СтрокаШтрихкод.Штрихкод) Тогда
				МассивШтрихкодов.Добавить(СтрокаШтрихкод.Штрихкод);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ДанныеШтрихкодов.Штрихкод) Тогда
		МассивШтрихкодов.Добавить(ДанныеШтрихкодов.Штрихкод);
	КонецЕсли;
	
	ОбщегоНазначенияУТ.УдалитьПовторяющиесяЭлементыМассива(МассивШтрихкодов);
	
	Возврат МассивШтрихкодов;
	
КонецФункции
 
#КонецОбласти

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости);
	НоваяСтрока.ВыполняетсяВручную = Истина;
	НоваяСтрока.ТекстВыполнить     = НСтр("ru = 'Заполнить';
											|en = 'Fill'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Обработки.ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости.Формы.Форма.ПолноеИмя());
КонецПроцедуры

// Процедура определяет необходимость выполнения этапа.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
//
Процедура Использование_ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости(ПараметрыОбработчика) Экспорт
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4() Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат; 
	КонецЕсли; 
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости") 
		И НЕ ЗначениеЗаполнено(Константы.ДатаНачалаУчетаСебестоимости.Получить()) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'При включенном учете себестоимости заполнение стоимости не требуется.';
				|en = 'When the cost accounting is off, filling of the cost is not required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
			
		Возврат; 
	КонецЕсли;
	
	Если Обработки.ЗаполнениеФактическойСтоимостиВНАПриОтключенномУчетеСебестоимости.ЕстьДокументыКОбработке() Тогда
		
		ТекстСообщения = НСтр("ru = 'Обнаружены документы, в которых стоимость, указанная в документе, отличается от фактической.';
								|en = 'The documents are found where the cost specified in the document is different from the actual cost.'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеВыполнен(
			ПараметрыОбработчика,
			ТекстСообщения,,,
			Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка);
		
	Иначе
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов, в которых требуется заполнить стоимость.';
				|en = 'No documents where filling of the cost is required.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияПараметровУзловКомпонентовАмортизации

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_АктуализацияПараметровУзловКомпонентовАмортизации(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.АктуализацияПараметровУзловКомпонентовАмортизации);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Generate'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_АктуализацияПараметровУзловКомпонентовАмортизации");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_АктуализацияПараметровУзловКомпонентовАмортизации");
	
КонецПроцедуры

// Определяет статус операции "АктуализацияПараметровУзловКомпонентовАмортизации".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_АктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина);
	
КонецПроцедуры

// Выполняет операцию "АктуализацияПараметровУзловКомпонентовАмортизации".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_АктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика) Экспорт
	
	Если НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюАктуализацияПараметровУзловКомпонентовАмортизации(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеАмортизацииОС

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеАмортизацииОС(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.АктуализацияПараметровУзловКомпонентовАмортизации);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_НачислениеАмортизацииОС");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_НачислениеАмортизацииОС");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_КлиентскаяПроцедура(
		"ВнеоборотныеАктивыКлиент.ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииОС");
	ВнеоборотныеАктивыЛокализация.ДополнитьЭтап_НачислениеАмортизацииОС(НоваяСтрока);
	
КонецПроцедуры

// Определяет статус операции "НачислениеАмортизацииОС".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_НачислениеАмортизацииОС(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина,, "ЗаданияКРасчетуАмортизацииОС") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода) Тогда
		ИмяДокумента = Метаданные.Документы.АмортизацияОС2_4.Имя;
	Иначе
		ИмяДокумента = ВнеоборотныеАктивыЛокализация.ИмяДокументаАмортизацияОС();
	КонецЕсли; 
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, ИмяДокумента);
	
КонецПроцедуры

// Выполняет операцию "НачислениеАмортизацииОС".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_НачислениеАмортизацииОС(ПараметрыОбработчика) Экспорт
	
	Если НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииОС(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеАмортизацииНМА

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеАмортизацииНМА(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА,,,,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_НачислениеАмортизацииНМА");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_НачислениеАмортизацииНМА");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_КлиентскаяПроцедура(
		"ВнеоборотныеАктивыКлиент.ОбработкаДействияПодробнееФормыЗакрытияМесяцаЭтапаНачислениеАмортизацииНМА");
	ВнеоборотныеАктивыЛокализация.ДополнитьЭтап_НачислениеАмортизацииНМА(НоваяСтрока);

КонецПроцедуры

// Определяет статус операции "НачислениеАмортизацииНМА".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_НачислениеАмортизацииНМА(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина,, "ЗаданияКРасчетуАмортизацииНМА") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.НачалоПериода) Тогда
		ИмяДокумента = Метаданные.Документы.АмортизацияНМА2_4.Имя;
	Иначе	
		ИмяДокумента = ВнеоборотныеАктивыЛокализация.ИмяДокументаАмортизацияНМА();
	КонецЕсли; 
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, ИмяДокумента);
	
КонецПроцедуры

// Выполняет операцию "НачислениеАмортизацииНМА".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_НачислениеАмортизацииНМА(ПараметрыОбработчика) Экспорт
	
	Если НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюЗакрытияМесяцаРасчетАмортизацииНМА(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеДвиженийПоВнеоборотнымАктивам

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ФормированиеДвиженийПоВнеоборотнымАктивам(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ФормированиеДвиженийПоВнеоборотнымАктивам,,,,
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеАрендныхПлатежей);
		
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Сформировать';
										|en = 'Generate'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_ФормированиеДвиженийПоВнеоборотнымАктивам");
		
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_ФормированиеДвиженийПоВнеоборотнымАктивам");
		
КонецПроцедуры

// Определяет статус операции "ФормированиеДвиженийПоВнеоборотнымАктивам".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_ФормированиеДвиженийПоВнеоборотнымАктивам(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов версии 2.4 не используется.';
				|en = 'Accounting of fixed assets 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина,, "ЗаданияКФормированиюДвиженийПоВНА") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВыполненоОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов по которым требуется сформировать движения.';
				|en = 'No documents that require record generation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли; 
	
КонецПроцедуры

// Выполняет операцию "ФормированиеДвиженийПоВнеоборотнымАктивам".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_ФормированиеДвиженийПоВнеоборотнымАктивам(ПараметрыОбработчика) Экспорт
	
	Если НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюЗакрытияМесяцаОтложенноеФормированиеДвиженийПоВНА(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область РасчетСтоимостиВнеоборотныхАктивов

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_РасчетСтоимостиВнеоборотныхАктивов(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.РасчетСтоимостиВнеоборотныхАктивов);
		
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Рассчитать';
										|en = 'Calculate'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_РасчетСтоимостиВнеоборотныхАктивов");
		
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_РасчетСтоимостиВнеоборотныхАктивов");
		
КонецПроцедуры

// Определяет статус операции "РасчетСтоимостиВнеоборотныхАктивов".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_РасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов версии 2.4 не используется.';
				|en = 'Accounting of fixed assets 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(ПараметрыОбработчика.ПараметрыРасчета.Период) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет себестоимости отключен, расчет стоимости недоступен.';
				|en = 'Cost accounting is off, cost calculation is unavailable.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина,, "ЗаданияКРасчетуСтоимостиВНА") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	Если НЕ ВыполненРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Тогда
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет документов по которым требуется расчет стоимости.';
				|en = 'No documents that require cost calculation.'", ОбщегоНазначения.КодОсновногоЯзыка()));
	КонецЕсли;
	
КонецПроцедуры

// Выполняет операцию "РасчетСтоимостиВнеоборотныхАктивов".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_РасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика) Экспорт
	
	Если НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюЗакрытияМесяцаРасчетСтоимостиВнеоборотныхАктивов(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#Область НачислениеПроцентовПоАренде

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - см. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_НачислениеПроцентовПоАренде(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.НачислениеПроцентовПоАренде);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
	НоваяСтрока.ПредшествующиеЭтапы.Добавить(Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииНМА);
	
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Начислить';
										|en = 'Accrue'");
	
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ВнеоборотныеАктивы.Использование_НачислениеПроцентовПоАренде");
		
	НоваяСтрока.ДействиеВыполнить = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ВнеоборотныеАктивы.Выполнить_НачислениеПроцентовПоАренде");
		
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.НачислениеПроцентовПоАренде.Формы.ФормаСписка.ПолноеИмя());
	
КонецПроцедуры

// Определяет статус операции "НачислениеПроцентовПоАренде".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Использование_НачислениеПроцентовПоАренде(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.УвеличитьКоличествоОбработанныхДанныхДляЗамера(ПараметрыОбработчика, 1);
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2")
		И НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Учет внеоборотных активов отключен.';
				|en = 'Accounting of fixed assets disabled.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	ИначеЕсли НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыРасчета.НачалоПериода) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеОтключено(
			ПараметрыОбработчика,
			НСтр("ru = 'Не используется учет внеоборотных активов версии 2.4.';
				|en = 'Non-current assets accounting version 2.4 is not used.'", ОбщегоНазначения.КодОсновногоЯзыка()));
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018(ПараметрыРасчета.МассивОрганизаций, ПараметрыРасчета.НачалоПериода) Тогда
		
		ЗакрытиеМесяцаСервер.УстановитьСостояниеНеТребуется(
			ПараметрыОбработчика,
			НСтр("ru = 'Нет организаций, для которых в учетной политике включен учет аренды по стандарту ФСБУ 25/2018';
				|en = 'There are no companies, for which the accounting policy includes lease accounting according to the Russian GAAP (FSBU 25/2018 standard)'", ОбщегоНазначения.КодОсновногоЯзыка()));
		Возврат;
		
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(ПараметрыОбработчика, "НачислениеПроцентовПоАренде");
	
КонецПроцедуры

// Выполняет операцию "НачислениеПроцентовПоАренде".
// 
// Параметры:
//  ПараметрыОбработчика - Структура - Параметры обработчика
Процедура Выполнить_НачислениеПроцентовПоАренде(ПараметрыОбработчика) Экспорт
	
	Если НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполнитьОперациюНачислениеПроцентовПоАренде(ПараметрыОбработчика);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Прочее

// Формирует описание технологических параметров.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Описание параметров операции закрытия месяца
Функция ОписаниеПараметровОперацииЗакрытияМесяца() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().ИнициализироватьОписаниеПараметровОперации();
	
	#Область РасчетАмортизации
		
	// МаксимальноеКоличествоЗаданийДляРасчетаАмортизации
	ОписаниеПараметра = ОписаниеПараметров.Добавить();
	ОписаниеПараметра.Имя 				  = "МаксимальноеКоличествоЗаданийДляРасчетаАмортизации";
	ОписаниеПараметра.Наименование 		  = НСтр("ru = 'Количество одновременно выполняемых заданий расчета амортизации';
													|en = 'Number of simultaneous depreciation calculation jobs'");
	ОписаниеПараметра.ТипЗначения   	  = Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	ОписаниеПараметра.ДиапазонС     	  = 1;
	ОписаниеПараметра.ЗначениеПоУмолчанию = 4;
	ОписаниеПараметра.Описание =
		НСтр("ru = 'Расчет амортизации в закрытии месяца может выполняться одновременно сразу по нескольким пакетам амортизации.
              |Увеличение количества заданий может уменьшить время расчета амортизации.
              |Количество заданий рекомендуется настраивать в зависимости от конфигурации сервера СУБД и серверов 1С:Предприятие.';
              |en = 'Depreciation calculation in month-end close can be done simultaneously by several depreciation packages.
              |Increased number of jobs can reduce the depreciation calculation time.
              |Set the jobs number depending on configuration of DBMS server and 1C:Enterprise servers.'");
		
	#КонецОбласти
	
	Возврат ОписаниеПараметров;
	
КонецФункции

// Определяет используется ли управление ВНА версии 2.4.
//
// Параметры:
//  Период	 - Дата - На какую дату нужно проверить (если не указана, то проверяется на текущую дату).
// 
// Возвращаемое значение:
//  Булево - Истина, если используется управление ВНА версии 2.4.
//
Функция ИспользуетсяУправлениеВНА_2_4(Период = '000101010000') Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ВнеоборотныеАктивыЛокализация.ИспользуетсяУправлениеВНА_2_4(Период);

КонецФункции

// Определяет используется ли управление ВНА.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется управление ВНА.
//
Функция ИспользуетсяУправлениеВНА() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4")
			ИЛИ ВнеоборотныеАктивыЛокализация.ИспользуетсяУправлениеВНА();

КонецФункции

// Определяет используется ли учет аренды по стандарту ФСБУ 25/2018.
//
// Параметры:
//  Организация - СправочникСсылка.Организации, Массив, Неопределено - Организация, для которой проверяется порядок учета.
//  Период	 - Дата - На какую дату нужно проверить (если не указана, то проверяется на текущую дату).
//  УчестьНачалоПерехода - Булево - Истина, если нужно учесть начало перехода на новый стандарт.
// 
// Возвращаемое значение:
//  Булево - Истина, если используется учет аренды по ФСБУ 25/2018 
//                    для указанной организации или для любой организации, если организация не указана.
//
Функция ИспользуетсяУчетАрендыПоФСБУ25_2018(Организация = Неопределено, Период = '000101010000', УчестьНачалоПерехода = Истина) Экспорт

	ИспользуетсяУчетАрендыПоФСБУ25_2018 = ВнеоборотныеАктивыЛокализация.ИспользуетсяУчетАрендыПоФСБУ25_2018(Организация, Период);
	ИспользуетсяУчетАрендыПоФСБУ25_2018 = 
		ИспользуетсяУчетАрендыПоФСБУ25_2018 = Неопределено
		ИЛИ ИспользуетсяУчетАрендыПоФСБУ25_2018 = Истина;
		
	Возврат ИспользуетсяУчетАрендыПоФСБУ25_2018;
	
КонецФункции
 
// Определяет дату начала учета аренды по стандарту ФСБУ 25/2018
// 
// Параметры:
// 	Организация - СправочникСсылка.Организации -
// Возвращаемое значение:
// 	Дата - 
Функция НачалоУчетаАрендыПоФСБУ25_2018(Организация) Экспорт

	НачалоУчета = ВнеоборотныеАктивыЛокализация.НачалоУчетаАрендыПоФСБУ25_2018(Организация);

	Возврат ?(НачалоУчета <> Неопределено, НачалоУчета, '000101010000');

КонецФункции
 
// Определяет местонахождение основного средства.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о местонахождении:
//  * Организация - СправочникСсылка.Организации -
//  * МОЛ - СправочникСсылка.ФизическиеЛица -
//  * Местонахождение - СправочникСсылка.СтруктураПредприятия -
//  * АдресМестонахождения - Строка -
//  * Арендатор - СправочникСсылка.Организации, СправочникСсылка.Контрагенты -
//  * ПодразделениеАрендатора - СправочникСсылка.СтруктураПредприятия -
//  * МОЛАрендатора - СправочникСсылка.ФизическиеЛица -
//
Функция МестонахождениеОС(ОсновноеСредство) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОССрезПоследних.Организация КАК Организация,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛ,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК Местонахождение,
	|	МестонахождениеОССрезПоследних.АдресМестонахождения КАК АдресМестонахождения,
	|	МестонахождениеОССрезПоследних.Арендатор КАК Арендатор,
	|	МестонахождениеОССрезПоследних.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	МестонахождениеОССрезПоследних.МОЛАрендатора КАК МОЛАрендатора
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОССрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	
	МестонахождениеОС = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестонахождениеОС.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестонахождениеОС, Выборка);
	КонецЕсли;
	
	Возврат МестонахождениеОС;
	
КонецФункции

// Определяет место учета нематериального актива.
//
// Параметры:
//  НематериальныйАктив	 - СправочникСсылка.НематериальныеАктивы - нематериальный актив.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о месте учета:
//  * Организация - СправочникСсылка.Организации -
//  * Подразделение - СправочникСсылка.СтруктураПредприятия -
//
Функция МестоУчетаНМА(НематериальныйАктив) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестоУчетаНМА.Организация,
	|	МестоУчетаНМА.Подразделение КАК Подразделение
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(, НематериальныйАктив = &НематериальныйАктив) КАК МестоУчетаНМА";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	
	Результат = Запрос.Выполнить();
	
	МестоУчетаНМА = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестоУчетаНМА.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестоУчетаНМА, Выборка);
	КонецЕсли;

	Возврат МестоУчетаНМА;
	
КонецФункции

// Определяет местонахождение и сведения об арендодателе основного средства.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство.
// 
// Возвращаемое значение:
//  Структура - Содержит сведения о местонахождении:
//  	* Организация - 
// 		* Партнер - СправочникСсылка.Партнеры -
//  	* Контрагент - СправочникСсылка.Контрагенты -
//  	* Договор - СправочникСсылка.ДоговорыАренды, СправочникСсылка.ДоговорыКонтрагентов - 
//  	* МОЛ - СправочникСсылка.ФизическиеЛица -
//  	* Местонахождение - СправочникСсылка.СтруктураПредприятия -
//  	* АдресМестонахождения - Строка -
//
Функция МестонахождениеИАрендодательОС(ОсновноеСредство) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.Организация КАК Организация,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	АрендованныеОС.Партнер КАК Партнер,
	|	АрендованныеОС.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(, ОсновноеСредство = &ОсновноеСредство) КАК АрендованныеОС
	|		ПО АрендованныеОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	
	Результат = Запрос.Выполнить();
	
	МестонахождениеОС = Новый Структура;
	Для каждого КолонкаЗапроса Из Результат.Колонки Цикл
		МестонахождениеОС.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(МестонахождениеОС, Выборка);
	КонецЕсли;
	
	Возврат МестонахождениеОС;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации ОС.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - Основное средство для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства: Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
//  								АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
//  								Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
//  								СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ.
//
Функция СтоимостьИАмортизацияОС(ОсновноеСредство) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестонахождениеОС(ОсновноеСредство);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	СтоимостьИАмортизация = Новый Структура("Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
											|АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
											|Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
											|СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ,ЗалоговаяСтоимость,
											|ОбесценениеРегл, ОбесценениеУпр");
	
	Для Каждого Колонка Из СтоимостьИАмортизация Цикл
		СтоимостьИАмортизация[Колонка.Ключ] = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтоимостьИАмортизация;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)       
		|	КОНЕЦ КАК Амортизация,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|	0 КАК АмортизацияНУ,
		|	0 КАК АмортизацияПР,
		|	0 КАК АмортизацияВР,
		|	0 КАК АмортизацияЦФ,
		|	0 КАК АмортизацияНУЦФ,
		|	0 КАК АмортизацияПРЦФ,
		|	0 КАК АмортизацияВРЦФ,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВРЦФ,
		|	0 КАК ЗалоговаяСтоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеУпр,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеРегл
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияОС.Остатки(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК АмортизацияОСОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = АмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОСОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = СтоимостьОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И ОсновноеСредство = &ОсновноеСредство) КАК ПорядокУчетаОСУУ
		|		ПО ОбъектыЭксплуатации.Ссылка = ПорядокУчетаОСУУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбесценениеВНА.Остатки(
		|				,
		|				Организация = &Организация
		|					И ВнеоборотныйАктив = &ОсновноеСредство) КАК ОбесценениеВНАОстатки
		|		ПО ОбъектыЭксплуатации.Ссылка = ОбесценениеВНАОстатки.ВнеоборотныйАктив
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка = &ОсновноеСредство";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтоимостьИАмортизация, Выборка);

	Возврат СтоимостьИАмортизация;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации НМА.
//
// Параметры:
//  НематериальныйАктив - СправочникСсылка.НематериальныеАктивы	 - Нематериальный актив для которого необходимо получить сведения.
// 
// Возвращаемое значение:
//  Структура - Содержит свойства: Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
//  								АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
//  								Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
//  								СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ.
//
Функция СтоимостьИАмортизацияНМА(НематериальныйАктив) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестоУчетаНМА(НематериальныйАктив);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	СтоимостьИАмортизация = Новый Структура("Амортизация,АмортизацияРегл,АмортизацияНУ,АмортизацияПР,АмортизацияВР,
											|АмортизацияЦФ,АмортизацияНУЦФ,АмортизацияПРЦФ,АмортизацияВРЦФ,
											|Стоимость,СтоимостьРегл,СтоимостьНУ,СтоимостьПР,СтоимостьВР,
											|СтоимостьЦФ,СтоимостьНУЦФ,СтоимостьПРЦФ,СтоимостьВРЦФ");
	
	Для Каждого Колонка Из СтоимостьИАмортизация Цикл
		СтоимостьИАмортизация[Колонка.Ключ] = 0;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат СтоимостьИАмортизация;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ, 0)
		|					- ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияНМАОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ КАК Амортизация,
		|
		// АмортизацияРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
		|					- ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьРеглОстаток, 0)
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияНМАОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|
		|	0 КАК АмортизацияЦФ,
		|	0 КАК АмортизацияНУ,
		|	0 КАК АмортизацияНУЦФ,
		|	0 КАК АмортизацияПР,
		|	0 КАК АмортизацияПРЦФ,
		|	0 КАК АмортизацияВР,
		|	0 КАК АмортизацияВРЦФ,
		|
		// Стоимость
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьУУ, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|
		// СтоимостьРегл
		|	ВЫБОР
		|		КОГДА ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.Списан)
		|			ТОГДА 0
		|		КОГДА НематериальныеАктивы.ВидОбъектаУчета = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР)
		|			ТОГДА ЕСТЬNULL(ПервоначальныеСведенияНМА.ПервоначальнаяСтоимостьБУ, 0)
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьНМАОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьВРЦФ
		|
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияНМА.Остатки(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК АмортизацияНМАОстатки
		|		ПО НематериальныеАктивы.Ссылка = АмортизацияНМАОстатки.НематериальныйАктив
		|	
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА.Остатки(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК СтоимостьНМАОстатки
		|		ПО НематериальныеАктивы.Ссылка = СтоимостьНМАОстатки.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК ПервоначальныеСведенияНМА
		|		ПО НематериальныеАктивы.Ссылка = ПервоначальныеСведенияНМА.НематериальныйАктив
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И НематериальныйАктив = &НематериальныйАктив) КАК ПорядокУчетаНМАУУ
		|		ПО НематериальныеАктивы.Ссылка = ПорядокУчетаНМАУУ.НематериальныйАктив
		|ГДЕ
		|	НематериальныеАктивы.Ссылка = &НематериальныйАктив";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НематериальныйАктив", НематериальныйАктив);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтоимостьИАмортизация, Выборка);

	Возврат СтоимостьИАмортизация;
	
КонецФункции

// Возвращает сведения о стоимости и амортизации узлов и компонентов амортизации ОС-владельца.
//
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации	 - ОС-владелец узлов и компонентов для которых необходимо получить сведения.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица с узлами и компонентами и сведениями об их стоимости
//
Функция СтоимостьИАмортизацияУзловКомпонентов(ОсновноеСредство) Экспорт

	Организация = Неопределено;
	МестонахождениеОС = МестонахождениеОС(ОсновноеСредство);
	Если МестонахождениеОС <> Неопределено Тогда
		Организация = МестонахождениеОС.Организация
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСтоимостьИАмортизацияУзловКомпонентов();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
		|ПОМЕСТИТЬ ВтУзлыОсновныхСредств
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
		|ГДЕ
		|	УзлыКомпоненты.ОсновноеСредство = &ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УзелКомпонент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
		|ПОМЕСТИТЬ УзлыКомпоненты
		|ИЗ
		|	РегистрСведений.УзлыКомпонентыАмортизации.СрезПоследних(, УзелКомпонент В
		|		(ВЫБРАТЬ
		|			ВтУзлыОсновныхСредств.УзелКомпонент КАК УзелКомпонент
		|		ИЗ
		|			ВтУзлыОсновныхСредств КАК ВтУзлыОсновныхСредств)) КАК УзлыКомпоненты
		|ГДЕ
		|	УзлыКомпоненты.ОсновноеСредство = &ОсновноеСредство
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	УзелКомпонент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ КАК Амортизация,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ КАК АмортизацияРегл,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ КАК Стоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ КАК СтоимостьРегл,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеУпр,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОбесценениеРегл,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеУпрОстаток, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимость,
		|	ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьРеглОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-АмортизацияОСОстатки.АмортизацияРеглОстаток, 0)
		|	КОНЕЦ - ВЫБОР
		|		КОГДА ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.СнятоСУчета)
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(-ОбесценениеВНАОстатки.ОбесценениеРеглОстаток, 0)
		|	КОНЕЦ КАК ОстаточнаяСтоимостьРегл
		|ИЗ
		|	УзлыКомпоненты КАК УзлыКомпоненты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.АмортизацияОС.Остатки(, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК АмортизацияОСОстатки
		|		ПО УзлыКомпоненты.УзелКомпонент = АмортизацияОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК СтоимостьОСОстатки
		|		ПО УзлыКомпоненты.УзелКомпонент = СтоимостьОСОстатки.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(, Организация = &Организация
		|		И ОсновноеСредство В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК ПорядокУчетаОСУУ
		|		ПО УзлыКомпоненты.УзелКомпонент = ПорядокУчетаОСУУ.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ОбесценениеВНА.Остатки(, Организация = &Организация
		|		И ВнеоборотныйАктив В
		|			(ВЫБРАТЬ
		|				УзлыКомпоненты.УзелКомпонент
		|			ИЗ
		|				УзлыКомпоненты КАК УзлыКомпоненты)) КАК ОбесценениеВНАОстатки
		|		ПО УзлыКомпоненты.УзелКомпонент = ОбесценениеВНАОстатки.ВнеоборотныйАктив";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОсновноеСредство", ОсновноеСредство);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат.Выгрузить();

КонецФункции // СтоимостьИАмортизацияУзловКомпонентов()

// Проверяет, что документ проводится в периоде, который соответствует версии документа.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Проводимый документ.
//  ЭтоДокументВерсии2_4 - Булево			 - Истина, если документ относится к версии 2.4.
//  Отказ				 - Булево			 - Отказ от проведения.
//
Процедура ПроверитьСоответствиеДатыВерсииУчета(Объект, ЭтоДокументВерсии2_4, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") 
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	
	ИспользуетсяУправлениеВНА_2_4 = (Объект.Дата >= ДатаНачалаУчета
				ИЛИ Объект.Дата = '000101010000' 
					И ТекущаяДатаСеанса() >= ДатаНачалаУчета);
	
	ТекстСообщения = Неопределено;

	Если ИспользуетсяУправлениеВНА_2_4 И НЕ ЭтоДокументВерсии2_4 Тогда
		
		ТекстСообщения = НСтр("ru = 'Дата документа должна быть до %1 (начало ведения учета внеоборотных активов версии 2.4).
                               |После этой даты необходимо использовать документы, расположенные в разделе ""Внеоборотные активы"".';
                               |en = 'Document date must be before %1 (start date of fixed assets accounting of version 2.4).
                               |After this date, you must use documents from the ""Fixed assets"" section.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
		
	ИначеЕсли НЕ ИспользуетсяУправлениеВНА_2_4 И ЭтоДокументВерсии2_4  Тогда
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровОС2_4")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4")
			ИЛИ ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
				И Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамАренды Тогда
				
			// Документы, которые можно проводить до даты начала учета версии 2.4
			Если НачалоДня(Объект.Дата) < НачалоДня(ДатаНачалаУчета-1) Тогда
				
				ТекстСообщения = НСтр("ru = 'Если документ оформлен для перехода на учет версии 2.4, то его дата должна быть %1.
	                                   |В остальных случаях дата документа должна быть после %2 (начало ведения учета внеоборотных активов версии 2.4).
	                                   |До этой даты необходимо использовать документы, расположенные в разделе ""Регламентированный учет"".';
	                                   |en = 'If the document is registered to transfer to accounting 2.4, its date must be %1.
	                                   |In other cases the document date must be after %2 (beginning of fixed asset accounting 2.4).
	                                   |Before this date, use documents from the ""Local accounting"" section.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета-1, "ДЛФ=D"), Формат(ДатаНачалаУчета, "ДЛФ=D"));
			КонецЕсли; 
			
		Иначе	
			
			ТекстСообщения = НСтр("ru = 'Дата документа должна быть после %1 (начало ведения учета внеоборотных активов версии 2.4).
	                               |До этой даты необходимо использовать документы, расположенные в разделе ""Регламентированный учет"".';
	                               |en = 'Document date must be after %1 (beginning of fixed assets accounting 2.4).
	                               |Before this date, you must use documents from the ""Local accounting"" section.'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
			
		КонецЕсли; 
		
	КонецЕсли; 
	
	Если ТекстСообщения <> Неопределено Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Дата",, Отказ); 
	КонецЕсли; 
	
КонецПроцедуры

// Определяет организации, по которым закрытие месяца должно выполняться вместе.
//
// Параметры:
//  Период	 - Дата - Период закрытия месяца.
// 
// Возвращаемое значение:
//  Массив из Массив - Список групп организаций.
//
Функция ГруппыОрганизацийОСиНМА(Период) Экспорт
	
	МассивОСиНМА = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьГруппыОрганизацийОСиНМА(Период, МассивОСиНМА);
	
	Возврат МассивОСиНМА;
	
КонецФункции

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	ВнеоборотныеАктивыЛокализация.НастроитьВариантыОтчетов(Настройки);
	
	ВедетсяРегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	#Область ВедомостьПоОС_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоОС_МУ);
		
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации основных средств?';
									|en = 'Take an overview of cost and depreciation of fixed assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоОС");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации основных средств?';
									|en = 'Take an overview of cost and depreciation of fixed assets.'");
	#КонецОбласти
	
	#Область ВедомостьПоНМА_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьПоНМА_МУ);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР?';
									|en = 'Take an overview of cost and amortization of intangible assets and R&D expenses.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ВедомостьПоНМА");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.ВидимостьПоУмолчанию = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие сводные данные о стоимости и амортизации НМА и расходов на НИОКР?';
									|en = 'Take an overview of cost and amortization of intangible assets and R&D expenses.'");
	#КонецОбласти
	
	#Область СправкаРасчетАмортизацииОС_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизацииОС_МУ);
	ОписаниеОтчета.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаРасчетАмортизацииОС");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СправкаРасчетПоДокументуАмортизацииОСКонтекст");
	#КонецОбласти
	
	#Область СправкаРасчетАмортизацииНМА_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СправкаРасчетАмортизацииНМА_МУ);
	ОписаниеОтчета.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СправкаРасчетАмортизацииНМА");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'По какой формуле рассчитана амортизация?';
									|en = 'Analyze accrued depreciation of the assets.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "СправкаРасчетПоДокументуАмортизацииНМАКонтекст");
	#КонецОбласти
	
	#Область РеестрОС_МУ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.РеестрОС_МУ);
	ОписаниеОтчета.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Включен = НЕ ВедетсяРегламентированныйУчетВНА;
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие основные средства числятся в организации?';
									|en = 'View company''s fixed assets.'");
	#КонецОбласти

	#Область АрендованныеОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АрендованныеОС);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были получены в аренду?
									 |От кого были получены?
									 |Какой срок аренды?';
									 |en = 'View leased fixed assets.
									 |Check the lessors.
									 |Track the lease terms.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АрендованныеОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были получены в аренду?
									 |От кого были получены?
									 |Какой срок аренды?';
									 |en = 'View leased fixed assets.
									 |Check the lessors.
									 |Track the lease terms.'");
	#КонецОбласти

	#Область ПереданныеВАрендуОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПереданныеВАрендуОС);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были переданы в аренду?
									 |Кому были переданы?
									 |Какой срок аренды?';
									 |en = 'View the fixed assets provided to leasee.
									 |Check the leasees.
									 |Track the lease terms.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ПереданныеВАрендуОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие ОС были переданы в аренду?
									 |Кому были переданы?
									 |Какой срок аренды?';
									 |en = 'View the fixed assets provided to leasee.
									 |Check the leasees.
									 |Track the lease terms.'");
	#КонецОбласти
	
	#Область ВедомостьРасчетовПоАренде
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьРасчетовПоАренде);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Состояние расчетов по договорам аренды (лизинга).';
									|en = 'State of AR/AP under lease (leasing) contracts.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоДоговоруКонтекст");
	#КонецОбласти
	
	#Область ПланФактныйАнализОплатИНачисленийПоАренде
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ПланФактныйАнализОплатИНачисленийПоАренде);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ отклонений по фактически произведенным оплатам и начислениям в рамках договоров аренды (лизинга).';
									|en = 'Analyze variances in actually made payments and accruals under lease contracts.'");
	
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ПоДоговоруКонтекст");
	#КонецОбласти	

	#Область СтруктураЗатратПоОС
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.СтруктураЗатратПоОС);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьУправлениеРемонтами");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие затраты отнесены на основные средства?';
									|en = 'View expenses allocated to fixed assets.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СтруктураЗатратПоОС");
	ОписаниеВарианта.Описание = НСтр("ru = 'Какие затраты отнесены на основные средства?';
									|en = 'View expenses allocated to fixed assets.'");
	#КонецОбласти
	
	//++ НЕ УТКА
	
	#Область КарточкаОбъектаЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаОбъектаЭксплуатации);
	ОписаниеОтчета.Включен = Ложь;
	#КонецОбласти
	
	#Область КонтрольКорректностиЗаполненияОбъектовЭксплуатации
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КонтрольКорректностиЗаполненияОбъектовЭксплуатации);
	ОписаниеОтчета.Включен = Ложь;
	#КонецОбласти

	//-- НЕ УТКА

	#Область ВнеоборотныеАктивыСОбесценением
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВнеоборотныеАктивыСОбесценением);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьВнеоборотныеАктивы2_4");
	ОписаниеОтчета.ФункциональныеОпции.Добавить("ИспользоватьОбесценениеВНА");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Остаток обесценения по внеоборотным активам с группировкой по единицам генерирующим денежные средства.';
									|en = 'Impairment balance for fixed assets with grouping by cash-generating units.'");
	
	#КонецОбласти

КонецПроцедуры

// Определяет завершение перехода на версию 2.4.
//
// Параметры:
//  ПараметрыОбработчика - Структура - параметры обработчика события этапа.
// 
// Возвращаемое значение:
//  Булево - Истина, если переход не завершен.
//
Функция НеЗавершенПереходНаУчетВнеоборотныхАктивовВерсии24(ПараметрыОбработчика) Экспорт

	Если НЕ ИспользуетсяУправлениеВНА_2_4(ПараметрыОбработчика.ПараметрыРасчета.ПериодРегистрации)
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СостояниеЭтапа = ЗакрытиеМесяцаСервер.ОпределитьСостояниеЭтаповРасчета(
						Перечисления.ОперацииЗакрытияМесяца.ПереходНаУчетВнеоборотныхАктивовВерсии24, 
						ПараметрыОбработчика.ПараметрыРасчета.Период, 
						ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций,
						Ложь,
						Ложь);
						
	Возврат СостояниеЭтапа = Перечисления.СостоянияОперацийЗакрытияМесяца.НеВыполнено;

КонецФункции

// Определяет параметры получения данных в запросе, который содержит обращение к данным двух версий учета.
//
// Параметры:
//  НачалоПериода - Дата - Начало периода.
//  КонецПериода - Дата - Начало периода.
// 
// Возвращаемое значение:
//  Структура - Параметры получения данных в запросе.
//
Функция ПараметрыПолученияДанныхДвухВерсийУчета(НачалоПериода, КонецПериода) Экспорт

	НачалоПериода22 = НачалоПериода;
	НачалоПериода24 = НачалоПериода;
	КонецПериода22 = КонецПериода;
	КонецПериода24 = КонецПериода;
	
	НачалоУчета24 = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
	
	ИспользуетсяВерсия22 =
		ИспользоватьВнеоборотныеАктивы2_2
		И (НЕ ЗначениеЗаполнено(НачалоПериода)
			ИЛИ НачалоПериода < НачалоУчета24
			ИЛИ НЕ ИспользоватьВнеоборотныеАктивы2_4);
			
	ИспользуетсяВерсия24 =
		ИспользоватьВнеоборотныеАктивы2_4
		И (НЕ ЗначениеЗаполнено(КонецПериода)
			ИЛИ КонецПериода > НачалоУчета24);
			
	Если ИспользуетсяВерсия22 И ИспользуетсяВерсия24 Тогда
		КонецПериода22 = НачалоУчета24 - 1;
		НачалоПериода24 = НачалоУчета24;
	КонецЕсли; 

	ПараметрыПолученияДанных = Новый Структура;
	ПараметрыПолученияДанных.Вставить("ИспользуетсяВерсия22", ИспользуетсяВерсия22);
	ПараметрыПолученияДанных.Вставить("ИспользуетсяВерсия24", ИспользуетсяВерсия24);
	ПараметрыПолученияДанных.Вставить("НачалоПериода22", НачалоПериода22);
	ПараметрыПолученияДанных.Вставить("КонецПериода22", КонецПериода22);
	ПараметрыПолученияДанных.Вставить("НачалоПериода24", НачалоПериода24);
	ПараметрыПолученияДанных.Вставить("КонецПериода24", КонецПериода24);
	
	Возврат ПараметрыПолученияДанных;
	
КонецФункции

// Позволяет определить есть ли в табличной части документа строки с одинаковыми объектами учета.
//  При нахождении дублей формирует сообщения пользователю.
//
// Параметры:
//  Объект				 - ДокументОбъект	 - Документ.
//  ИмяТабличнойЧасти	 - Строка			 - Имя табличной части, в которой нужно искать дубли.
//  ИмяРеквизита		 - Строка			 - Имя реквизита ТЧ.
//  Отказ				 - Булево			 - Признак отказа от дальнейшей обработки.
//  ШаблонСообщения		 - Строка			 - Шаблон сообщения, который будет использоваться.
//
Процедура ПроверитьОтсутствиеДублейВТабличнойЧасти(Объект, ИмяТабличнойЧасти, ИмяРеквизита, Отказ, ШаблонСообщения = Неопределено) Экспорт
	
	Если ШаблонСообщения = Неопределено Тогда
		Если ИмяТабличнойЧасти = "ОС" Тогда
			ШаблонСообщения = НСтр("ru = 'Основное средство ""%1"" уже выбрано в строке %2.';
									|en = 'Asset ""%1"" is already selected in line %2.'");
		ИначеЕсли ИмяТабличнойЧасти = "НМА" Тогда
			ШаблонСообщения = НСтр("ru = 'Нематериальный актив ""%1"" уже выбран в строке %2.';
									|en = 'Intangible asset ""%1"" is already selected in line %2.'");
		Иначе
			ШаблонСообщения = НСтр("ru = 'Значение ""%1"" уже выбрано в строке %2.';
									|en = 'Value ""%1"" is already selected in line %2.'");
		КонецЕсли;
	КонецЕсли; 
	
	СписокОбъектов = Новый Соответствие;
	Для каждого ДанныеСтроки Из Объект[ИмяТабличнойЧасти] Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ИмяРеквизита]) Тогда
			Продолжить;
		КонецЕсли;
		
		ИсходнаяСтрока = СписокОбъектов.Получить(ДанныеСтроки[ИмяРеквизита]);
		Если ИсходнаяСтрока = Неопределено Тогда
			СписокОбъектов.Вставить(ДанныеСтроки[ИмяРеквизита], ДанныеСтроки.НомерСтроки);
			Продолжить;
		КонецЕсли; 
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ДанныеСтроки[ИмяРеквизита], Формат(ИсходнаяСтрока, "ЧГ="));
		Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТабличнойЧасти, ДанныеСтроки.НомерСтроки, ИмяРеквизита);
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "", Отказ);
	
	КонецЦикла; 
	
КонецПроцедуры

// Определяет принят ли к учету объект эксплуатации.
//
// Параметры:
//  Ссылка	 - СправочникСсылка.ОбъектыЭксплуатации	 - Объект эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если принят к учету.
//
Функция ОбъектЭксплуатацииПринятКУчету(Ссылка) Экспорт

	ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(Ссылка);
	ПринятКУчету = 
		ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.ПринятоКУчету 
		ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКУчету
		ИЛИ ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету
		ИЛИ ПервоначальныеСведения.СостояниеНУ = Перечисления.СостоянияОС.ПринятоКУчету;
	
	Возврат ПринятКУчету

КонецФункции

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.ДоговорыАренды);
	Объекты.Добавить(Метаданные.Справочники.НематериальныеАктивы);
	
	Объекты.Добавить(Метаданные.Документы.АмортизацияНМА2_4);
	Объекты.Добавить(Метаданные.Документы.АмортизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВзаиморасчетовПоАренде);
	Объекты.Добавить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4);
	Объекты.Добавить(Метаданные.Документы.ВозвратОСИзАренды2_4);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ВыкупАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ВыработкаНМА);
	Объекты.Добавить(Метаданные.Документы.ВыработкаНМА);
	Объекты.Добавить(Метаданные.Документы.ЗаключениеДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеПараметровОС2_4);
	Объекты.Добавить(Метаданные.Документы.ИзменениеУсловийДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииНМА);
	Объекты.Добавить(Метаданные.Документы.КорректировкаСтоимостиИАмортизацииОС);
	Объекты.Добавить(Метаданные.Документы.МодернизацияОС2_4);
	Объекты.Добавить(Метаданные.Документы.ОбесценениеВНА);
	Объекты.Добавить(Метаданные.Документы.ОбъединениеОС);
	Объекты.Добавить(Метаданные.Документы.ПередачаОСВАренду2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПеремещениеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПереоценкаОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПодготовкаКПередачеОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеАрендованныхОС);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеУслугПоАренде);
	Объекты.Добавить(Метаданные.Документы.ПрекращениеДоговораАренды);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуНМА2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуОС2_4);
	Объекты.Добавить(Метаданные.Документы.ПринятиеКУчетуУзловКомпонентовАмортизации);
	Объекты.Добавить(Метаданные.Документы.РазукомплектацияОС);
	Объекты.Добавить(Метаданные.Документы.СписаниеНМА2_4);
	Объекты.Добавить(Метаданные.Документы.СписаниеОС2_4);
	
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовНМА2_4);
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовОС2_4);
	Объекты.Добавить(Метаданные.Обработки.ЖурналДокументовАренды);
	
	ВнеоборотныеАктивыЛокализация.ОпределитьОбъектыСКомандамиОтчетов(Объекты);
	
КонецПроцедуры

// Добавляет в журнал документы подсистемы ВНА.
//
// Параметры:
//  ХозяйственныеОперацииИДокументы	 - ТаблицаЗначений	 - см. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы()
//
Процедура ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьОписаниеОперацийИТиповДокументовДляЖурналаДокументовЗакупки(ХозяйственныеОперацииИДокументы);
	
КонецПроцедуры

// Возвращает ОС, которые приняты к учету.
//
// Параметры:
//  ОсновноеСредствоИлиСписок	 - Массив, СправочникСсылка.ОбъектыЭксплуатации	 - Основные средства, для которых нужно проверить принятие учету.
//  Период						 - Дата											 - Дата, на которую ОС должны быть приняты к учету.
//  СостояниеПринят				 - Массив										 - Список состояний, в которых ОС считается принятым к учету.
// 
// Возвращаемое значение:
//  Массив - ОС, которые приняты к учету.
//
Функция ВернутьПринятыеКУчетуОС(ОсновноеСредствоИлиСписок, Период, СостояниеПринят = Неопределено) Экспорт

	Если НЕ ЗначениеЗаполнено(ОсновноеСредствоИлиСписок) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПринятыеКУчетуОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	РегистрСведений.МестонахождениеОС.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(&Период, ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО МестонахождениеОС.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
		|			И МестонахождениеОС.Организация = ПорядокУчетаОСУУ.Организация
		|ГДЕ
		|	ПорядокУчетаОСУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестонахождениеОС.ОсновноеСредство.Наименование,
		|	МестонахождениеОС.ОсновноеСредство.ИнвентарныйНомер";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	
	Если СостояниеПринят = Неопределено Тогда
		СостояниеПринят = Перечисления.СостоянияОС.ПринятоКУчету;
	КонецЕсли; 
	Запрос.УстановитьПараметр("СостояниеПринят", СостояниеПринят);
	
	СписокОС = ?(ТипЗнч(ОсновноеСредствоИлиСписок) = Тип("Массив"), ОсновноеСредствоИлиСписок, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОсновноеСредствоИлиСписок));
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОсновноеСредство");

КонецФункции

// Возвращает ОС, которые приняты к учету.
//
// Параметры:
//  НМАИлиСписок	 - Массив, СправочникСсылка.НематериальныеАктивы	 - НМА, для которых нужно проверить принятие учету.
//  Период						 - Дата											 - Дата, на которую НМА должны быть приняты к учету.
// 
// Возвращаемое значение:
//  Массив - НМА, которые приняты к учету.
//
Функция ВернутьПринятыеКУчетуНМА(НМАИлиСписок, Период) Экспорт

	Если НЕ ЗначениеЗаполнено(НМАИлиСписок) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПринятыеКУчетуНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	МестоУчетаНМА.НематериальныйАктив КАК НематериальныйАктив
		|ИЗ
		|	РегистрСведений.МестоУчетаНМА.СрезПоследних(&Период, НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(&Период, НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|		ПО МестоУчетаНМА.НематериальныйАктив = ПорядокУчетаНМАУУ.НематериальныйАктив
		|			И МестоУчетаНМА.Организация = ПорядокУчетаНМАУУ.Организация
		|ГДЕ
		|	ПорядокУчетаНМАУУ.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету)
		|
		|УПОРЯДОЧИТЬ ПО
		|	МестоУчетаНМА.НематериальныйАктив.Наименование,
		|	МестоУчетаНМА.НематериальныйАктив.Код";
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Период", Период);
	
	СписокНМА = ?(ТипЗнч(НМАИлиСписок) = Тип("Массив"), НМАИлиСписок, ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НМАИлиСписок));
	Запрос.УстановитьПараметр("СписокНМА", СписокНМА);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("НематериальныйАктив");

КонецФункции

// Удаляет из массива объекты эксплуатации не соответствующие отбору.
//
// Параметры:
//  МассивОбъектов	 - Массив	 - Массив из которого требуется удалить объекты эксплуатации.
//  ПараметрыПодбора - Структура - Параметры подбора.
//
// Возвращаемое значение:
// 	Массив из СправочникСсылка.ОбъектыЭксплуатации - удаленные ссылки. 
Функция УдалитьОбъектыЭксплуатацииНеСоответствующиеОтбору(МассивОбъектов, ПараметрыПодбора) Экспорт

	ОписаниеЗапроса = Справочники.ОбъектыЭксплуатации.ОписаниеЗапросаДляВыбора(ПараметрыПодбора, Истина, МассивОбъектов);
	
	Запрос = Новый Запрос(ОписаниеЗапроса.ТекстЗапроса);
	Для каждого ОписаниеПараметра Из ОписаниеЗапроса.ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(ОписаниеПараметра.Ключ, ОписаниеПараметра.Значение);
	КонецЦикла; 
	
	ДоступныеОбъекты = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УдаленныеСсылки = Новый Массив;
	
	Для Сч = -МассивОбъектов.ВГраница() По 0 Цикл
		Если ДоступныеОбъекты.Найти(МассивОбъектов[-Сч]) = Неопределено Тогда
			УдаленныеСсылки.Добавить(МассивОбъектов[-Сч]);
			МассивОбъектов.Удалить(-Сч);
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат УдаленныеСсылки;
	
КонецФункции

// Формирует движения в регистре сведений при обновлении ИБ.
// 
// Параметры:
// 	ИмяРегистра	- Строка - Имя регистра.
// 	Параметры	- Структура	- Параметры обработчика обновления.
Процедура СформироватьДвиженияПриОбновленииИБ(ИмяРегистра, Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрСведений." + ИмяРегистра;
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	#Область ПроверкаОбновленияЧитаемыхДанных
	
	ЧитаемыеДанные = Новый Массив;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если МетаданныеДокумента = Метаданные.Документы.КорректировкаРегистров Тогда
			Продолжить;			
		КонецЕсли;
		Если МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
			ЧитаемыеДанные.Добавить("Документ." + МетаданныеДокумента.Имя);
		КонецЕсли;		
	КонецЦикла;
	
	Если ЧитаемыеДанные.Количество() <> 0
		И ОбновлениеИнформационнойБазы.ЕстьЗаблокированныеПредыдущимиОчередямиДанные(Параметры.Очередь, ЧитаемыеДанные) Тогда
		// Обновление не начнется пока есть необработанные документы, т.к. нужно обрабатывать записи в хронологическом порядке.
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	#КонецОбласти

	#Область ФормированиеДвижений
	
	ДополнительныеПараметрыВыборкиДанныхДляОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыВыборкиДанныхДляОбработки.ВыбиратьПорциями = Ложь;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыОбработки = ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуРегистраторовРегистраДляОбработки(
							Параметры.Очередь, 
							Неопределено, 
							ПолноеИмяРегистра, 
							МенеджерВременныхТаблиц, 
							ДополнительныеПараметрыВыборкиДанныхДляОбработки);

	ВнеоборотныеАктивы.СоздатьВременнуюТаблицуСДаннымиДокументовДляОбработки(
		МетаданныеРегистра, 
		ПараметрыОбработки.ИмяВременнойТаблицы, 
		МенеджерВременныхТаблиц);

	// Документы нужно выбирать в хронологическом порядке, т.к. при формировании движений используется срез последних.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 100
	|	ВТДляОбработки.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(втДанныеДокументовДляОбработки.Дата, ДАТАВРЕМЯ(1,1,1)) КАК Период
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеДокументовДляОбработки КАК втДанныеДокументовДляОбработки
	|		ПО втДанныеДокументовДляОбработки.Ссылка = ВТДляОбработки.Регистратор
	|
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ВТДляОбработки.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЕСТЬNULL(втДанныеДокументовДляОбработки.Дата, ДАТАВРЕМЯ(1,1,1))";

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДляОбработки", ПараметрыОбработки.ИмяВременнойТаблицы);

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл

		ПолучитьДвиженияИЗаписатьПриОбновленииИБ(
			ИмяРегистра, 
			ПолноеИмяРегистра, 
			Выборка.Регистратор, 
			МетаданныеРегистра, 
			Параметры);

	КонецЦикла;

	#КонецОбласти

	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

// Создает временную таблицу с данными объектов.
// 
// Параметры:
//  МетаданныеРегистра - ОбъектМетаданныхРегистрСведений - Метаданные регистра.
//  ИмяТаблицыВТДляОбработки - Строка - Имя таблицы "ВТДляОбработки".
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц
Процедура СоздатьВременнуюТаблицуСДаннымиДокументовДляОбработки(МетаданныеРегистра, ИмяТаблицыВТДляОбработки, МенеджерВременныхТаблиц) Экспорт

	СписокОбъектов = Новый Массив;
	Для Каждого МетаданныеДокумента Из Метаданные.Документы Цикл
		Если МетаданныеДокумента <> Метаданные.Документы.КорректировкаРегистров
			И МетаданныеДокумента.Движения.Содержит(МетаданныеРегистра) Тогда
			СписокОбъектов.Добавить(МетаданныеДокумента.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;

	ТекстыЗапроса = Новый Массив;
	Для Каждого ПолноеИмяОбъекта Из СписокОбъектов Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	Таблица.Дата КАК Дата,
		|	Таблица.Организация КАК Организация
		| 
		|ПОМЕСТИТЬ втДанныеДокументовДляОбработки
		|ИЗ
		|	&Таблица КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (
		|		ВЫБРАТЬ
		|			СсылкиДляОбработки.Регистратор
		|		ИЗ
		|			ВТДляОбработки КАК СсылкиДляОбработки)";
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", ПолноеИмяОбъекта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТДляОбработки", ИмяТаблицыВТДляОбработки);
		
		Если ТекстыЗапроса.Количество() > 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ втДанныеДокументовДляОбработки", "");
		КонецЕсли;
		
		ТекстыЗапроса.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Выполнить();
	
КонецПроцедуры
	

// Получает таблицу движений документа и записывает в регистр.
// 
// Параметры:
// 	ИмяРегистра - Строка - 
// 	ПолноеИмяРегистра - Строка - 
// 	Регистратор - Произвольный - 
// 	МетаданныеРегистра - ОбъектМетаданныхРегистрСведений - 
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ПолучитьДвиженияИЗаписатьПриОбновленииИБ(ИмяРегистра, ПолноеИмяРегистра, Регистратор, МетаданныеРегистра, Параметры) Экспорт

	НачатьТранзакцию();

	Попытка

		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Регистратор));
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);

		ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);

		Блокировка.Заблокировать();

		// Получим таблицу движений.
		ТаблицаРегистра = Неопределено;

		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Проведен") = Истина Тогда
			МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Регистратор);
			ТаблицыДляДвижений = МенеджерДокумента.ДанныеДокументаДляПроведения(Регистратор, ИмяРегистра);
			ТаблицыДляДвижений.Свойство("Таблица" + ИмяРегистра, ТаблицаРегистра);
		КонецЕсли;

		// Запись таблицы движений.
		Если ТаблицаРегистра <> Неопределено Тогда

			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяРегистра);
			НаборЗаписей = МенеджерРегистра.СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей, РегистрСведенийНаборЗаписей - 
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			НаборЗаписей.Загрузить(ТаблицаРегистра);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);

		Иначе

			ДополнительныеПараметрыОтметкиОбработки = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
			ДополнительныеПараметрыОтметкиОбработки.ЭтоДвижения = Истина;
			ДополнительныеПараметрыОтметкиОбработки.ПолноеИмяРегистра = ПолноеИмяРегистра;
			
			ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(
				Регистратор, 
				ДополнительныеПараметрыОтметкиОбработки, 
				Параметры.Очередь);

		КонецЕсли;

		ЗафиксироватьТранзакцию();

	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось обработать записи регистра ""%1"": %2 по причине: %3';
										|en = 'Cannot process records in register ""%1"": %2. Reason: %3'"),
									?(ЗначениеЗаполнено(МетаданныеРегистра.Синоним), МетаданныеРегистра.Синоним, МетаданныеРегистра.Имя),
									Строка(Регистратор),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Предупреждение, 
			Регистратор.Метаданные(), 
			Регистратор, 
			ТекстСообщения);

	КонецПопытки;
	
КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме ВНА с правами на изменение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля) Экспорт
	
	// Справочники.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеГруппФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНематериальныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъектовСтроительства");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрисоединенныхФайловДокументовВНА");

	// Документы.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаОстатковВзаиморасчетовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВводаОстатковВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВозвратовОСОтАрендатора");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВыкуповАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеЗаключенийДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийПараметровНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийПараметровОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеИзмененийУсловийАрендыОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКорректировокСтоимостиИАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКорректировокСтоимостиИАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеМодернизацийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНаработкиОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеНачисленийПроцентовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъединенийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПередачиОСАрендатору");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремещенийНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПеремещенийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПереоценкиНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПереоценкиОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПодготовкиКПередачеНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПодготовкиКПередачеОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПоступленийУслугПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрекращенийДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПризнаниеРасходовПоИсследованиямИРазработкам");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПринятийКУчетуНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПринятийКУчетуОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРазукомплектацийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписанийНМА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеСписанийОС");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТемЭтаповИсследованийИРазработок");
	
	// Регистры.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНематериальнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоОсновнымСредствам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиОС");
	
	// Обработки.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовАренды");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовНМА");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовОС");
	
	// Отчеты.
	ОписаниеПрофиля.Роли.Добавить("ПросмотрОтчетаПланФактныйАнализОплатИНачисленийПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиБухгалтераПоВнеоборотнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыРазделаВнеоборотныеАктивы");
	
	// Видимые подсистемы КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаВнеоборотныеАктивы");
	ОписаниеПрофиля.Роли.Добавить("РазделВнеоборотныеАктивы");
	
	//Обесценение ВНА
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДанныхОбесцененияВНА");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеДанныхОбесцененияВНА");
	
	ВнеоборотныеАктивыЛокализация.ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля);
	
КонецПроцедуры

// Добавляет в профиль роли, позволяющие работать в подсистеме ВНА с правами на чтение.
// 
// Параметры:
// 	ОписаниеПрофиля - см. УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа
Процедура ДобавитьРолиДляДоступаКПодсистемеВНАНаЧтение(ОписаниеПрофиля) Экспорт
	
	// Справочники.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеГруппФинансовогоУчетаВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНематериальныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовСтроительства");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрисоединенныхФайловДокументовВНА");

	// Документы.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВводаОстатковВзаиморасчетовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВводаОстатковВнеоборотныхАктивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВозвратовОСОтАрендатора");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеВыкуповАрендованныхОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаключенийДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийПараметровНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийПараметровОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИзмененийУсловийАрендыОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКорректировокСтоимостиИАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКорректировокСтоимостиИАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеМодернизацийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНаработкиОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНачисленийПроцентовПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОбъединенийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПередачиОСАрендатору");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПеремещенийНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПеремещенийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПереоценкиНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПереоценкиОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПодготовкиКПередачеНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПодготовкиКПередачеОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоступленийУслугПоАренде");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрекращенийДоговоровАренды");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПризнаниеРасходовПоИсследованиямИРазработкам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПринятийКУчетуНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПринятийКУчетуОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеРазукомплектацийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСписанийНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСписанийОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеТемЭтаповИсследованийИРазработок");
	
	// Регистры.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеАмортизацииОС");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНематериальнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоОсновнымСредствам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиНМА");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСтоимостиОС");
	
	// Обработки.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовАренды");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовНМА");
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовОС");
	
	// Отчеты.
	ОписаниеПрофиля.Роли.Добавить("ОтчетыИОбработкиБухгалтераПоВнеоборотнымАктивам");
	ОписаниеПрофиля.Роли.Добавить("ОтчетыРазделаВнеоборотныеАктивы");
	
	// Видимые подсистемы КИ
	ОписаниеПрофиля.Роли.Добавить("ПодсистемаВнеоборотныеАктивы");
	ОписаниеПрофиля.Роли.Добавить("РазделВнеоборотныеАктивы");
	
	ВнеоборотныеАктивыЛокализация.ДобавитьРолиДляДоступаКПодсистемеВНАНаЧтение(ОписаниеПрофиля);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область Прочее

Процедура ТекстЗапросаРасходыПоДокументам(СписокЗапросов) Экспорт

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	NULL КАК Организация,
	|	NULL КАК НаправлениеДеятельности,
	|	NULL КАК Подразделение,
	|	NULL КАК СтатьяРасходов,
	|	NULL КАК АналитикаРасходов,
	|	0    КАК Сумма,
	|	0    КАК СуммаУпр,
	|	0    КАК СуммаБезНДС,
	|	0    КАК СуммаРегл,
	|	0    КАК ПостояннаяРазница,
	|	0    КАК ВременнаяРазница
	|ПОМЕСТИТЬ НакопленныеРасходы
	|ГДЕ
	|	ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Регистратор КАК Регистратор,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов КАК АналитикаКапитализацииРасходов,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаБУ,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаУУ
	|ПОМЕСТИТЬ НачалоКапитализацииРасходов
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.ХозяйственнаяОперация В (
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС), 
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды),
	|		ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуНМА))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Регистратор,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов,
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА СтоимостьОС.ОтражатьВРеглУчете
	|						И (ЕСТЬNULL(ПринятиеКУчетуОС.ЧастичныйВводВЭксплуатацию, ЛОЖЬ)
	|								ИЛИ ЕСТЬNULL(МодернизацияОС.ЧастичнаяМодернизация, ЛОЖЬ))
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|				КОГДА СтоимостьОС.ОтражатьВРеглУчете
	|					ТОГДА НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1))),
	|	МАКСИМУМ(ЕСТЬNULL(ВЫБОР
	|				КОГДА СтоимостьОС.ОтражатьВУпрУчете
	|						И (ЕСТЬNULL(ПринятиеКУчетуОС.ЧастичныйВводВЭксплуатацию, ЛОЖЬ)
	|								ИЛИ ЕСТЬNULL(МодернизацияОС.ЧастичнаяМодернизация, ЛОЖЬ))
	|					ТОГДА ДАТАВРЕМЯ(1, 1, 1)
	|				КОГДА СтоимостьОС.ОтражатьВУпрУчете
	|					ТОГДА НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ)
	|				ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|			КОНЕЦ, ДАТАВРЕМЯ(1, 1, 1)))
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ПО (СтоимостьОС.АналитикаКапитализацииРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов)
	|			И (СтоимостьОС.Период < ДанныеКРасчету.Период)
	|			И (СтоимостьОС.Регистратор <> ДанныеКРасчету.Регистратор)
	|			И (СтоимостьОС.ХозяйственнаяОперация В (
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС), 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации), 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды), 
	|					ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ПринятиеКУчетуОС
	|		ПО (ПринятиеКУчетуОС.Ссылка = СтоимостьОС.Регистратор)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС2_4 КАК МодернизацияОС
	|		ПО (МодернизацияОС.Ссылка = СтоимостьОС.Регистратор)
	|ГДЕ
	|	ДанныеКРасчету.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС))
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Регистратор,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	АналитикаКапитализацииРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрочиеРасходыОстатки.Организация КАК Организация,
	|	ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаУпрОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаБезНДСОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.СуммаРеглОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ПостояннаяРазницаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОстатки.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОстатки.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОстатки.ВременнаяРазницаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница
	|ПОМЕСТИТЬ ПрочиеРасходыОстатки
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Остатки(
	|			&НачалоМесяца,
	|			(Организация, АналитикаРасходов) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				ИЗ
	|					ДанныеКРасчету)) КАК ПрочиеРасходыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ПрочиеРасходыОбороты.Регистратор) В (&ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца)
	|			ТОГДА НАЧАЛОПЕРИОДА(ПрочиеРасходыОбороты.Период, МЕСЯЦ)
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(ПрочиеРасходыОбороты.Период, ДЕНЬ) 
	|	КОНЕЦ КАК Период,
	|	ПрочиеРасходыОбороты.Организация КАК Организация,
	|	ПрочиеРасходыОбороты.Подразделение КАК Подразделение,
	|	ПрочиеРасходыОбороты.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПрочиеРасходыОбороты.СтатьяРасходов КАК СтатьяРасходов,
	|	ПрочиеРасходыОбороты.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаУпрОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаБезНДСОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.СуммаРеглОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ПостояннаяРазницаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА ПрочиеРасходыОбороты.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ПрочиеРасходыОбороты.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ТОГДА ПрочиеРасходыОбороты.ВременнаяРазницаОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница
	|ПОМЕСТИТЬ ПрочиеРасходыДвижения
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы.Обороты(
	|			&НачалоМесяца,
	|			&КонецМесяца,
	|			Запись,
	|			(Организация, АналитикаРасходов) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				ИЗ
	|					ДанныеКРасчету)) КАК ПрочиеРасходыОбороты
	|
	|ГДЕ
	|	&ТекущийДокумент <> НЕОПРЕДЕЛЕНО
	|			И &ТекущийДокумент <> ПрочиеРасходыОбороты.Регистратор
	|	ИЛИ НЕ ТИПЗНАЧЕНИЯ(ПрочиеРасходыОбороты.Регистратор) В (&ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаРасходов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Регистратор                КАК Регистратор,
	|	ДанныеКРасчету.Период                     КАК Период,
	|	ДанныеКРасчету.Организация                КАК Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	ДанныеКРасчету.Подразделение              КАК Подразделение,
	|	ДанныеКРасчету.СтатьяРасходов             КАК СтатьяРасходов,
	|	ДанныеКРасчету.АналитикаРасходов          КАК АналитикаРасходов,
	
	// Должны присутствовать все ресурсы регистра Прочие расходы
	|	СУММА(ДанныеКРасчету.Сумма)               КАК Сумма,
	|	СУММА(ДанныеКРасчету.СуммаУпр)            КАК СуммаУпр,
	|	СУММА(ДанныеКРасчету.СуммаБезНДС)         КАК СуммаБезНДС,
	|	СУММА(ДанныеКРасчету.СуммаРегл)           КАК СуммаРегл,
	|	СУММА(ДанныеКРасчету.ПостояннаяРазница)   КАК ПостояннаяРазница,
	|	СУММА(ДанныеКРасчету.ВременнаяРазница)    КАК ВременнаяРазница
	|ПОМЕСТИТЬ РасходыПоДокументам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Регистратор КАК Регистратор,
	|		ДанныеКРасчету.Период КАК Период,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ПрочиеРасходыОстатки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ПрочиеРасходыОстатки.Подразделение КАК Подразделение,
	|		ПрочиеРасходыОстатки.СтатьяРасходов КАК СтатьяРасходов,
	|		ПрочиеРасходыОстатки.АналитикаРасходов КАК АналитикаРасходов,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Сумма,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.СуммаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаУпр,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаБезНДС,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) 
	|							И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СуммаРегл,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) 
	|							И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ПостояннаяРазница,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.МодернизацияОС)
	|					ИЛИ (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) 
	|И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца 
	|				ТОГДА ПрочиеРасходыОстатки.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачалоКапитализацииРасходов КАК НачалоКапитализацииРасходов
	|			ПО НачалоКапитализацииРасходов.АналитикаКапитализацииРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				И НачалоКапитализацииРасходов.Регистратор = ДанныеКРасчету.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрочиеРасходыОстатки КАК ПрочиеРасходыОстатки
	|			ПО (ПрочиеРасходыОстатки.Организация = ДанныеКРасчету.Организация)
	|				И (ПрочиеРасходыОстатки.АналитикаРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов)
	|	ГДЕ
	|		(ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < &НачалоМесяца
	|			ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < &НачалоМесяца
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Регистратор,
	|		ДанныеКРасчету.Период,
	|		ДанныеКРасчету.Организация,
	|		ПрочиеРасходыДвижения.НаправлениеДеятельности,
	|		ПрочиеРасходыДвижения.Подразделение,
	|		ПрочиеРасходыДвижения.СтатьяРасходов,
	|		ПрочиеРасходыДвижения.АналитикаРасходов,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаУУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.СуммаУпр
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА ДанныеКРасчету.ОтражатьВУпрУчете И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.СуммаБезНДС
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.СуммаРегл
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.ПостояннаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		ВЫБОР 
	|			КОГДА (ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) И НачалоКапитализацииРасходов.ДатаБУ < ДанныеКРасчету.Период 
	|				ТОГДА ПрочиеРасходыДвижения.ВременнаяРазница
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачалоКапитализацииРасходов КАК НачалоКапитализацииРасходов
	|			ПО НачалоКапитализацииРасходов.АналитикаКапитализацииРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов
	|				И НачалоКапитализацииРасходов.Регистратор = ДанныеКРасчету.Регистратор
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПрочиеРасходыДвижения КАК ПрочиеРасходыДвижения
	|			ПО (ПрочиеРасходыДвижения.Организация = ДанныеКРасчету.Организация)
	|				И (ПрочиеРасходыДвижения.АналитикаРасходов = ДанныеКРасчету.АналитикаКапитализацииРасходов)
	|				И (ПрочиеРасходыДвижения.Период <= ДанныеКРасчету.Период)
	|	ГДЕ
	|		(ДанныеКРасчету.ОтражатьВРеглУчете ИЛИ НЕ &ВедетсяРегламентированныйУчетВНА) 
	|					И НачалоКапитализацииРасходов.ДатаБУ < ПрочиеРасходыДвижения.Период
	|			ИЛИ ДанныеКРасчету.ОтражатьВУпрУчете 
	|					И НачалоКапитализацииРасходов.ДатаУУ < ПрочиеРасходыДвижения.Период
	|
	|	) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Регистратор,
	|	ДанныеКРасчету.Период,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности,
	|	ДанныеКРасчету.Подразделение,
	|	ДанныеКРасчету.СтатьяРасходов,
	|	ДанныеКРасчету.АналитикаРасходов
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеКРасчету.Сумма) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.СуммаУпр) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.СуммаБезНДС) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.СуммаРегл) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.ПостояннаяРазница) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.ВременнаяРазница) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Формирует параметры для расчета стоимости ВНА.
// 
// Возвращаемое значение:
// 	Структура - содержит:
// * ТаблицаОбъектовУчета - ТаблицаЗначений -:
// 		** ОбъектУчета - СправочникСсылка.ОбъектыЭксплуатации, СправочникСсылка.ОбъектыСтроительства, СправочникСсылка.НематериальныеАктивы - Объект учета.
// 		** СтоимостьУУ - Число -
// 		** СтоимостьБУ - Число -
// 		** ОтражатьВРеглУчете - Булево -
// 		** ОтражатьВУпрУчете - Булево -
// 		** ОтражатьВБУ - Булево -
// 		** ОтражатьВНУ - Булево -
// 		** ИдентификаторСтроки - Строка -
// * ВедетсяРегламентированныйУчетВНА - Булево - Признак ведения регл. учета ВНА.
// * ВидАналитикиКапитализацииРасходов - ПеречислениеСсылка.ВидыАналитикиКапитализацииРасходов - Вид аналитики
// * РасчетСКомпонентами - Булево - Истина, если необходимо рассчитывать стоимости ОС совместно с компонентами амортизации
// * ФактическаяСтоимость - Булево - Истина, если применяется фактическая стоимость.
Функция ПараметрыРасчетаСтоимости() Экспорт

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("РасчетСКомпонентами", Ложь);
	ПараметрыРасчета.Вставить("ФактическаяСтоимость", Ложь);
	ПараметрыРасчета.Вставить("ВидАналитикиКапитализацииРасходов", Перечисления.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства);
	ПараметрыРасчета.Вставить("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
	ТипыОбъектовУчета = Новый Массив;
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыЭксплуатации"));
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.ОбъектыСтроительства"));
	ТипыОбъектовУчета.Добавить(Тип("СправочникСсылка.НематериальныеАктивы"));
	
	ТаблицаОбъектовУчета = Новый ТаблицаЗначений;
	ТаблицаОбъектовУчета.Колонки.Добавить("Ссылка", Документы.ТипВсеСсылки());
	ТаблицаОбъектовУчета.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(5));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов(ТипыОбъектовУчета));
	ТаблицаОбъектовУчета.Колонки.Добавить("НаправлениеДеятельности", Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"));
	ТаблицаОбъектовУчета.Колонки.Добавить("СтоимостьУУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаОбъектовУчета.Колонки.Добавить("СтоимостьБУ", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля());
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтражатьВРеглУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтражатьВУпрУчете", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтражатьВБУ", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ОтражатьВНУ", Новый ОписаниеТипов("Булево"));
	ТаблицаОбъектовУчета.Колонки.Добавить("ИдентификаторСтроки", ОбщегоНазначения.ОписаниеТипаСтрока(36));

	ПараметрыРасчета.Вставить("ТаблицаОбъектовУчета", ТаблицаОбъектовУчета);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Функция СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей = Неопределено, СписокПолейТаблиц = Неопределено) Экспорт

	ТекстДопПолей = "";
	Если СписокДопПолей <> Неопределено Тогда
		Если ТипЗнч(СписокДопПолей) = Тип("Строка") Тогда
			// Чтобы соблюдался одинаковый порядок полей.
			Для каждого ИмяПоля Из СтрРазделить(СписокДопПолей, ",") Цикл
				ТекстДопПолей = ТекстДопПолей + "
				|	, ИзмененныеДанные." + ИмяПоля + " КАК " + ИмяПоля;
			КонецЦикла;
		Иначе
			Для каждого КлючИЗначение Из СписокДопПолей Цикл
				ТекстДопПолей = ТекстДопПолей + "
				|	, ИзмененныеДанные." + ?(ЗначениеЗаполнено(КлючИЗначение.Значение), КлючИЗначение.Значение, КлючИЗначение.Ключ) + " КАК " + КлючИЗначение.Ключ;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 
	
	Если СписокПолейТаблиц = Неопределено Тогда
		СписокПолейТаблиц = Новый Структура;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Для каждого ИмяТаблицы Из СписокТаблиц Цикл
		
		ИмяВременнойТаблицы = ИмяТаблицы + "Изменение";
		ЕстьЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеТаблиц, ИмяВременнойТаблицы, Ложь);
		Если НЕ ЕстьЗаписи Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстПолейТаблицы = "";
		Для каждого КлючИЗначение Из СписокПолейТаблиц Цикл
			Если КлючИЗначение.Значение.Найти(ИмяТаблицы) <> Неопределено Тогда
				ТекстПолейТаблицы = ТекстПолейТаблицы + "
				|	, ИзмененныеДанные." + КлючИЗначение.Ключ + " КАК " + КлючИЗначение.Ключ;
			Иначе
				ТекстПолейТаблицы = ТекстПолейТаблицы + "
				|	, НЕОПРЕДЕЛЕНО КАК " + КлючИЗначение.Ключ;
			КонецЕсли; 
		КонецЦикла; 
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Период КАК Период,
		|	ИзмененныеДанные.Организация КАК Организация,
		|	ИзмененныеДанные.Документ КАК Документ,
		|	&ИмяТаблицы КАК ИмяТаблицы
		|	,&ТекстДопПолей
		|	,&ТекстПолейТаблицы
		|ИЗ
		|	&ИмяВременнойТаблицы КАК ИзмененныеДанные";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТаблицы", """" + ИмяТаблицы + """");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстДопПолей", ТекстДопПолей);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ",&ТекстПолейТаблицы", ТекстПолейТаблицы);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяВременнойТаблицы", ИмяВременнойТаблицы);
		МассивСтрок.Добавить(ТекстЗапроса);
		
	КонецЦикла; 
	
	Если МассивСтрок.Количество() <> 0 Тогда
		ТекстОбъединенияДанных = СтрСоединить(МассивСтрок, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		Возврат ТекстОбъединенияДанных;
	КонецЕсли; 
	
	Возврат "";

КонецФункции

Процедура ПровестиДокументыВФоне(СписокДокументов, АдресХранилища) Экспорт

	ЕстьОшибки = Ложь;
	
	Для каждого ДокументСсылка Из СписокДокументов Цикл
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		Если ДокументОбъект = Неопределено ИЛИ ДокументОбъект.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли; 
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЦикла; 

	ПоместитьВоВременноеХранилище(ЕстьОшибки, АдресХранилища);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос) Экспорт

	Запрос.УстановитьПараметр("ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости", ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости());
	Запрос.УстановитьПараметр("ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца", ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца());
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	
КонецПроцедуры

Функция ТипыДокументовПоКоторымРассчитываетсяСтоимость(ПроверитьНаличиеПрав = Ложь) Экспорт

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("МодернизацияОС2_4", ПроверитьНаличиеПрав, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуОС2_4", ПроверитьНаличиеПрав, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуНМА2_4", ПроверитьНаличиеПрав, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуУзловКомпонентовАмортизации", ПроверитьНаличиеПрав, ТипыОбъектов);
	
	Возврат ТипыОбъектов;

КонецФункции

Функция ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость() Экспорт

	Операции = Новый Массив;
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуОС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуУзловКомпонентовАмортизации);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.МодернизацияОС);
	Операции.Добавить(Перечисления.ХозяйственныеОперации.ПринятиеКУчетуНМА);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость(Операции);
	
	Возврат Операции;

КонецФункции

Процедура УстановитьПараметрыФункциональныхОпцийФормыОбъекта(Форма, Организация, Дата, Периодичность = "МЕСЯЦ") Экспорт

	ПараметрыФО = Новый Структура("Организация, Период",
		Организация, ?(ВРег(Периодичность) = "МЕСЯЦ", НачалоМесяца(Дата), НачалоДня(Дата)));

	Форма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФО);

КонецПроцедуры

Функция УсловияПереходаНаУчет2_4() Экспорт

	КомментарийУчет2_4 = "";
	УсловияВключенияУчет2_4 = "";
	КомментарийМинДатаНачалаУчета2_4 = "";
	КомментарийМаксДатаНачалаУчета2_4 = "";
	
	МинимальнаяДатаНачалаУчета2_4 = '000101010000';
	МаксимальнаяДатаНачалаУчета2_4 = '000101010000';
	
	РежимПартионногоУчета = Истина;
	ВестиУправленческийУчетОрганизаций = Истина;
	ИспользоватьУчетПрочихДоходовРасходовРегл = Истина;
	
	Если НЕ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22() Тогда
		РежимПартионногоУчета = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- установить опции ""Партионный учет"" значение ""Версия 2.2""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")';
                    |en = '- set the ""Version 2.2"" value to the ""Lot accounting"" option
                    |(in ""Master data and settings"" - ""Financial result and controlling"")'");
	Иначе
		ДатаОпции = РасчетСебестоимостиПовтИсп.ДатаПереходаНаПартионныйУчетВерсии22();
		Если ЗначениеЗаполнено(ДатаОпции) И ДатаОпции > МинимальнаяДатаНачалаУчета2_4 Тогда
			МинимальнаяДатаНачалаУчета2_4 = ДатаОпции;
			ШаблонСообщения = НСтр("ru = 'Начало учета должно быть не раньше даты начала применения партионного учета версии 2.2: %1';
									|en = 'Accounting should not start earlier than lot accounting 2.2. start date: %1'");
			КомментарийМинДатаНачалаУчета2_4 = СтрШаблон(ШаблонСообщения, Формат(МинимальнаяДатаНачалаУчета2_4, "ДЛФ=D"));
		КонецЕсли; 
	КонецЕсли;

	Если НЕ Константы.ИспользоватьУчетПрочихДоходовРасходовРегл.Получить() Тогда
		ИспользоватьУчетПрочихДоходовРасходовРегл = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- включить опцию ""Прочие доходы и расходы в валюте регл. учета""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"")';
                    |en = '- enable the ""Incomes and expenses in local accounting currency"" option
                    |(in ""Master data and settings"" - ""Financial result and controlling"")'");
	КонецЕсли;

	Если НЕ РасчетСебестоимостиПовтИсп.УправленческийУчетОрганизаций() Тогда
		ВестиУправленческийУчетОрганизаций = Ложь;
		УсловияВключенияУчет2_4 = УсловияВключенияУчет2_4 + Символы.ПС
			+ НСтр("ru = '- включить опцию ""Управленческий учет по правилам международного финансового учета""
                    |(раздел ""НСИ и администрирование"" - ""Финансовый результат и контроллинг"" - ""Доп. настройки учета себестоимости"")';
                    |en = '- enable the ""Management accounting according to financial accounting rules"" option
                    | (in ""Master data and settings"" - ""Financial result and controlling"" - ""Add. settings of cost accounting"")'");
	Иначе
		ДатаОпции = РасчетСебестоимостиПовтИсп.ДатаНачалаВеденияУправленческогоУчетаОрганизаций();
		Если ЗначениеЗаполнено(ДатаОпции) И ДатаОпции > МинимальнаяДатаНачалаУчета2_4 Тогда
			МинимальнаяДатаНачалаУчета2_4 = ДатаОпции;
			ШаблонСообщения = НСтр("ru = 'Начало учета должно быть не раньше даты начала ведения управленческого учета по правилам международного финансового учета: %1';
									|en = 'Accounting start date cannot be earlier than the start date of management accounting according to the financial accounting rules: %1'");
			КомментарийМинДатаНачалаУчета2_4 = СтрШаблон(ШаблонСообщения, Формат(МинимальнаяДатаНачалаУчета2_4, "ДЛФ=D"));
		КонецЕсли; 
	КонецЕсли;
	
	ВнеоборотныеАктивыЛокализация.УсловияПереходаНаУчет2_4(
		МинимальнаяДатаНачалаУчета2_4, 
		КомментарийМинДатаНачалаУчета2_4,
		МаксимальнаяДатаНачалаУчета2_4, 
		КомментарийМаксДатаНачалаУчета2_4);
	
	Если ЗначениеЗаполнено(УсловияВключенияУчет2_4) Тогда
		КомментарийУчет2_4 = НСтр("ru = 'Для включения возможности учета версии 2.4 необходимо:';
									|en = 'To enable accounting 2.4:'") + УсловияВключенияУчет2_4;
	КонецЕсли; 
	
	ДоступностьУчета2_4 = Новый Структура;
	ДоступностьУчета2_4.Вставить("РежимПартионногоУчета", РежимПартионногоУчета);
	ДоступностьУчета2_4.Вставить("ВестиУправленческийУчетОрганизаций", ВестиУправленческийУчетОрганизаций);
	ДоступностьУчета2_4.Вставить("ИспользоватьУчетПрочихДоходовРасходовРегл", ИспользоватьУчетПрочихДоходовРасходовРегл);
	
	ДоступностьУчета2_4.Вставить("КомментарийУчет2_4", КомментарийУчет2_4);
	ДоступностьУчета2_4.Вставить("УсловияВключенияУчет2_4", УсловияВключенияУчет2_4);
	ДоступностьУчета2_4.Вставить("КомментарийМинДатаНачалаУчета2_4", КомментарийМинДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("КомментарийМаксДатаНачалаУчета2_4", КомментарийМаксДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("МинимальнаяДатаНачалаУчета2_4", МинимальнаяДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("МаксимальнаяДатаНачалаУчета2_4", МаксимальнаяДатаНачалаУчета2_4);
	ДоступностьУчета2_4.Вставить("ДоступенУчет", НЕ ЗначениеЗаполнено(КомментарийУчет2_4));
	
	ВнеоборотныеАктивыЛокализация.ДополнитьУсловияПереходаНаУчет2_4(ДоступностьУчета2_4);
	
	Возврат ДоступностьУчета2_4;
	
КонецФункции

Процедура ОбработатьПараметрыФормыПереданныеИзЗакрытияМесяца(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Параметры = Форма.Параметры;
	
	Если Параметры.Свойство("МассивОрганизаций") Тогда
		
		СписокОрганизаций = Новый СписокЗначений();
		СписокОрганизаций.ЗагрузитьЗначения(Параметры.МассивОрганизаций); 
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"Организация", 
			СписокОрганизаций,,,,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный);
	КонецЕсли;
	 
	Если Параметры.Свойство("Период") Тогда
		ПериодСписка = Элементы.Список.Период; // СтандартныйПериод - 
		ПериодСписка.ДатаНачала = НачалоМесяца(Параметры.Период); 
		ПериодСписка.ДатаОкончания= КонецМесяца(Параметры.Период); 
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает список документов подсистемы ВНА.
// 
// Возвращаемое значение:
// 	Массив - Список документов подсистемы ВНА.
//
Функция СписокДокументовВНА() Экспорт
	
	СписокДокументовВНА = Новый Массив;
	СписокДокументовВНА.Добавить("АмортизацияНМА2_4");
	СписокДокументовВНА.Добавить("АмортизацияОС2_4");
	СписокДокументовВНА.Добавить("ВводОстатковВзаиморасчетовПоАренде");
	СписокДокументовВНА.Добавить("ВводОстатковВнеоборотныхАктивов2_4");
	СписокДокументовВНА.Добавить("ВозвратОСИзАренды2_4");
	СписокДокументовВНА.Добавить("ВыбытиеАрендованныхОС");
	СписокДокументовВНА.Добавить("ВыкупАрендованныхОС");
	СписокДокументовВНА.Добавить("ВыработкаНМА");
	СписокДокументовВНА.Добавить("ЗаключениеДоговораАренды");
	СписокДокументовВНА.Добавить("ИзменениеПараметровНМА2_4");
	СписокДокументовВНА.Добавить("ИзменениеПараметровОС2_4");
	СписокДокументовВНА.Добавить("ИзменениеУсловийДоговораАренды");
	СписокДокументовВНА.Добавить("КорректировкаСтоимостиИАмортизацииНМА");
	СписокДокументовВНА.Добавить("КорректировкаСтоимостиИАмортизацииОС");
	СписокДокументовВНА.Добавить("МодернизацияОС2_4");
	СписокДокументовВНА.Добавить("НачислениеПроцентовПоАренде");
	СписокДокументовВНА.Добавить("ОбесценениеВНА");
	СписокДокументовВНА.Добавить("ОбъединениеОС");
	СписокДокументовВНА.Добавить("ПередачаОСВАренду2_4");
	СписокДокументовВНА.Добавить("ПеремещениеНМА2_4");
	СписокДокументовВНА.Добавить("ПеремещениеОС2_4");
	СписокДокументовВНА.Добавить("ПереоценкаНМА2_4");
	СписокДокументовВНА.Добавить("ПереоценкаОС2_4");
	СписокДокументовВНА.Добавить("ПодготовкаКПередачеНМА2_4");
	СписокДокументовВНА.Добавить("ПодготовкаКПередачеОС2_4");
	СписокДокументовВНА.Добавить("ПоступлениеАрендованныхОС");
	СписокДокументовВНА.Добавить("ПоступлениеУслугПоАренде");
	СписокДокументовВНА.Добавить("ПрекращениеДоговораАренды");
	СписокДокументовВНА.Добавить("ПризнаниеРасходовПоИсследованиямИРазработкам");
	СписокДокументовВНА.Добавить("ПринятиеКУчетуНМА2_4");
	СписокДокументовВНА.Добавить("ПринятиеКУчетуОС2_4");
	СписокДокументовВНА.Добавить("ПринятиеКУчетуУзловКомпонентовАмортизации");
	СписокДокументовВНА.Добавить("РазукомплектацияОС");
	СписокДокументовВНА.Добавить("СписаниеНМА2_4");
	СписокДокументовВНА.Добавить("СписаниеОС2_4");
	
	Возврат СписокДокументовВНА;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетАмортизации

Функция ВыполнитьОчередьЗаданий(ОчередьЗаданийКРасчету)

	МаксимумЗаданий = ВнеоборотныеАктивыСлужебный.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации();
	ВыполняетсяЗаданий = 0;
	
	ЕстьЗадания = Истина;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЕстьОшибки", Ложь);
	РезультатВыполнения.Вставить("ТекстОшибки", "");
	
	Пока ЕстьЗадания Цикл
		
		ЕстьЗадания = Ложь;
		
		Для каждого ОписаниеЗадания Из ОчередьЗаданийКРасчету Цикл
			
			Если ОписаниеЗадания.Статус = "" И ВыполняетсяЗаданий < МаксимумЗаданий Тогда
				
				// Запуск задания
				ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
				ПараметрыВыполненияВФоне.НаименованиеФоновогоЗадания = ОписаниеЗадания.НаименованиеФоновогоЗадания;
				ПараметрыВыполненияВФоне.ЗапуститьНеВФоне = ОписаниеЗадания.ПараметрыЗадания.ВернутьПараметрыРасчета;
				
				РезультатВыполненияЗадания = ДлительныеОперации.ВыполнитьВФоне(
												ОписаниеЗадания.ПроцедураРасчета, 
												ОписаниеЗадания.ПараметрыЗадания, 
												ПараметрыВыполненияВФоне);
												
				ОписаниеЗадания.ОжидатьЗавершение = ПараметрыВыполненияВФоне.ОжидатьЗавершение;
				ОписаниеЗадания.Статус = РезультатВыполненияЗадания.Статус;
				ОписаниеЗадания.ИдентификаторЗадания = РезультатВыполненияЗадания.ИдентификаторЗадания;
				ОписаниеЗадания.АдресРезультата = РезультатВыполненияЗадания.АдресРезультата;
				
				Если ОписаниеЗадания.Статус = "Выполняется" Тогда
					ВыполняетсяЗаданий = ВыполняетсяЗаданий + 1;
				ИначеЕсли ОписаниеЗадания.Статус = "Ошибка" Тогда
					РезультатВыполнения.ЕстьОшибки = Истина;
				КонецЕсли;
				
			ИначеЕсли ОписаниеЗадания.Статус = "Выполняется" Тогда
				
				// Проверка выполнения
				
				Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ОписаниеЗадания.ИдентификаторЗадания);
				Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					
					Попытка
						Задание.ОжидатьЗавершения(ОписаниеЗадания.ОжидатьЗавершение);
						ОписаниеЗадания.Статус = "Выполнено";
						ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					Исключение
						// Специальная обработка не требуется, возможно исключение вызвано истечением времени ожидания.
					КонецПопытки;
					
				ИначеЕсли Задание = Неопределено 
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно
					ИЛИ Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
					
					РезультатВыполнения.ЕстьОшибки = Истина;
					ОписаниеЗадания.Статус = "Ошибка";
					ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					
				ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Завершено Тогда
					
					ОписаниеЗадания.Статус = "Выполнено";
					ВыполняетсяЗаданий = ВыполняетсяЗаданий - 1;
					
				КонецЕсли; 
				
			КонецЕсли; 
			
			Если ОписаниеЗадания.Статус = "Выполнено" 
				И ЭтоАдресВременногоХранилища(ОписаниеЗадания.АдресРезультата) Тогда
				
				Если НЕ РезультатВыполнения.ЕстьОшибки Тогда
					 РезультатЗадания = ПолучитьИзВременногоХранилища(ОписаниеЗадания.АдресРезультата);
					 РезультатВыполнения.ЕстьОшибки = РезультатЗадания.ЕстьОшибки;
					 РезультатВыполнения.ТекстОшибки = РезультатЗадания.ТекстОшибки;
				КонецЕсли;
				ОписаниеЗадания.АдресРезультата = Неопределено;
				
			КонецЕсли;
			
			Если ОписаниеЗадания.Статус = "Выполняется" ИЛИ ОписаниеЗадания.Статус = "" Тогда
				ЕстьЗадания = Истина;
			КонецЕсли;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	Возврат РезультатВыполнения;
	
КонецФункции

Функция СоздатьОчередьЗаданий(ПараметрыРасчета, ИзмененныеПакеты)

	ОчередьЗаданийКРасчету = Новый ТаблицаЗначений;
	ОчередьЗаданийКРасчету.Колонки.Добавить("ИдентификаторЗадания", Новый ОписаниеТипов("УникальныйИдентификатор"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("АдресРезультата", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("НаименованиеФоновогоЗадания", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ПроцедураРасчета", Новый ОписаниеТипов("Строка"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ОжидатьЗавершение", Новый ОписаниеТипов("Число"));
	ОчередьЗаданийКРасчету.Колонки.Добавить("ПараметрыЗадания");
	
	Если ИзмененныеПакеты <> Неопределено И ИзмененныеПакеты.Количество() <> 0 Тогда
		ПакетыАмортизации = ПараметрыРасчета.ПакетыАмортизации.Скопировать();
		Если ПараметрыРасчета.НомерПакета <> Неопределено Тогда
			СтруктураПоиска = Новый Структура("НомерПакета", ПараметрыРасчета.НомерПакета);
			СписокСтрок = ИзмененныеПакеты.НайтиСтроки(СтруктураПоиска);
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(СписокСтрок, ПакетыАмортизации);
		Иначе
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ИзмененныеПакеты, ПакетыАмортизации);
		КонецЕсли; 
	Иначе
		ПакетыАмортизации = ПараметрыРасчета.ПакетыАмортизации;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПакетыАмортизации.Организация КАК Организация,
	|	ПакетыАмортизации.НомерПакета КАК НомерПакета
	|ПОМЕСТИТЬ НомераПакетов
	|ИЗ
	|	&ПакетыАмортизации КАК ПакетыАмортизации
	|ГДЕ
	|	ПакетыАмортизации.НомерПакета <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НомераПакетов.Организация КАК Организация,
	|	ТекущаяОрганизация.Представление КАК ОрганизацияПредставление,
	|	НомераПакетов.НомерПакета КАК НомерПакета
	|ИЗ
	|	НомераПакетов КАК НомераПакетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК ТекущаяОрганизация
	|		ПО (ТекущаяОрганизация.Ссылка = НомераПакетов.Организация)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПакетыАмортизации", ПакетыАмортизации);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл

		НовоеЗадание = ОчередьЗаданийКРасчету.Добавить();
		
		НовоеЗадание.НаименованиеФоновогоЗадания = 
			СтрШаблон(НСтр("ru = 'Расчет амортизации по организации ""%1"".';
							|en = 'Depreciation calculation for the ""%1"" company.'"), Выборка.ОрганизацияПредставление);
		
		ПараметрыЗадания = НовыеПараметрыРасчетаАмортизации();
		ПараметрыЗадания.Период = ПараметрыРасчета.Период;
		ПараметрыЗадания.СписокОрганизаций = ПараметрыРасчета.СписокОрганизаций;
		ПараметрыЗадания.НомерЗадания = ПараметрыРасчета.НомерЗадания;
		ПараметрыЗадания.ЭтапРасчета = ПараметрыРасчета.ЭтапРасчета;
		ПараметрыЗадания.Ссылка = ПараметрыРасчета.Ссылка;
		ПараметрыЗадания.НомерПакета = ПараметрыРасчета.НомерПакета;
		ПараметрыЗадания.Ответственный = ПараметрыРасчета.Ответственный;
		ПараметрыЗадания.Комментарий = ПараметрыРасчета.Комментарий;
		ПараметрыЗадания.ВернутьПараметрыРасчета = ПараметрыРасчета.ВернутьПараметрыРасчета;
		ПараметрыЗадания.АдресПараметровРасчета = ПараметрыРасчета.АдресПараметровРасчета;
		
		НовыйПакет = ПараметрыЗадания.ПакетыАмортизации.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПакет, Выборка);

		НовоеЗадание.ПараметрыЗадания = ПараметрыЗадания;
		
		Если ПараметрыРасчета.ОбъектыУчета = "ОС" Тогда
			НовоеЗадание.ПроцедураРасчета = "Документы.АмортизацияОС2_4.РассчитатьАмортизацию";
		Иначе
			НовоеЗадание.ПроцедураРасчета = "Документы.АмортизацияНМА2_4.РассчитатьАмортизацию";
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат ОчередьЗаданийКРасчету;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаДляРасчетаАмортизации(Запрос, ПараметрыРасчета) Экспорт

	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("КонецМесяца",  КонецМесяца(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоГода", НачалоГода(ПараметрыРасчета.Период));
	Запрос.УстановитьПараметр("НачалоПредыдущегоМесяца", НачалоМесяца(НачалоМесяца(ПараметрыРасчета.Период)-1));
	Запрос.УстановитьПараметр("НачалоСледующегоМесяца", НачалоМесяца(КонецМесяца(ПараметрыРасчета.Период)+1));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", КонецМесяца(НачалоМесяца(ПараметрыРасчета.Период)-1));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяцаГраница", Новый Граница(КонецМесяца(НачалоМесяца(ПараметрыРасчета.Период)-1), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоПозапрошлогоМесяца", НачалоМесяца(ДобавитьМесяц(ПараметрыРасчета.Период, -2)));
	Запрос.УстановитьПараметр("КонецПозапрошлогоМесяца", КонецМесяца(ДобавитьМесяц(ПараметрыРасчета.Период, -2)));
	Запрос.УстановитьПараметр("ВедетсяРегламентированныйУчетВНА", ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА());
	Запрос.УстановитьПараметр("МинимальнаяОстаточнаяСтоимость", ВнеоборотныеАктивыСлужебный.МинимальнаяОстаточнаяСтоимость());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", Константы.ВалютаУправленческогоУчета.Получить());
	
	Запрос.УстановитьПараметр(
		"ДоначислятьКорректировкуОбесценения", 
		Перечисления.ВариантыПроводокПоОбесценениюВНА.ДоначислятьКорректировкуОбесценения);
	
	Запрос.УстановитьПараметр(
		"СторнироватьКорректировкуОбесценения", 
		Перечисления.ВариантыПроводокПоОбесценениюВНА.СторнироватьКорректировкуОбесценения);
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуОС2_4"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	МассивТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4"));
	Запрос.УстановитьПараметр("ТипПринятиеКУчету", МассивТипов);

	Если ПараметрыРасчета.Свойство("ПакетыАмортизации") Тогда
		Запрос.УстановитьПараметр("ПакетыАмортизации", ПараметрыРасчета.ПакетыАмортизации);
	КонецЕсли;

	Запрос.УстановитьПараметр("ПустыеСпособыОтраженияРасходов", ПустыеСпособыОтраженияРасходов());
	
	ВнеоборотныеАктивыЛокализация.ДополнитьПараметрыЗапросаДляРасчетаАмортизации(Запрос, ПараметрыРасчета);
	
КонецПроцедуры
 
#КонецОбласти

#Область РасчетСтоимостиВнеоборотныхАктивов 

Функция РассчитатьСтоимостьВнеоборотныхАктивов(Месяц, МенеджерВременныхТаблиц, ПараметрыОбработчика, МассивСсылок, Отказ)

	Если Месяц < ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4()
		ИЛИ НЕ РасчетСебестоимостиПовтИсп.ФормироватьДвиженияПоРегистрамСебестоимости(Месяц) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапросаРасчетСтоимости();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("ТекущийДокумент", Неопределено);
	Запрос.УстановитьПараметр("МассивСсылок", ?(МассивСсылок <> Неопределено, МассивСсылок, Новый Массив));
	Запрос.УстановитьПараметр("ОтборПоДокументам", ?(МассивСсылок <> Неопределено, Истина, Ложь));
	
	Запрос.УстановитьПараметр(
		"ТипыДокументовПоКоторымРассчитываетсяСтоимость", 
		ТипыДокументовПоКоторымРассчитываетсяСтоимость());
	
	Запрос.УстановитьПараметр(
		"ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость", 
		ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость());
	
	УстановитьПараметрыЗапросаСодержащегоРасходыПоДокументам(Запрос);
	
	Результат = Запрос.Выполнить();
	
	НакопленныеРасходы = Неопределено;
	ТаблицыУпрБаланса = Новый Структура;
	
	// Выборка документов по которым нужно рассчитать стоимость
	ВыборкаДокумент = Результат.Выбрать();
	КоличествоДанных = ВыборкаДокумент.Количество();
	Пока ВыборкаДокумент.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ЗаблокироватьДанныеПередРасчетомСтоимости(ВыборкаДокумент.Регистратор, ВыборкаДокумент.ВидОбъектовУчета);
			ТаблицыДляДвижений = СформироватьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, ПараметрыОбработчика, МенеджерВременныхТаблиц, Отказ);
			ЗаписатьДвиженияРасчетаСтоимости(ТаблицыДляДвижений, ВыборкаДокумент, ПараметрыОбработчика);
			
			Для Каждого Таблица Из ТаблицыДляДвижений Цикл
				ТаблицыУпрБаланса.Вставить(Таблица.Ключ);
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			Если ПараметрыОбработчика <> Неопределено Тогда
				
				ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ПараметрыОбработчика.ПараметрыРасчета.Период,
					ВыборкаДокумент.Организация,
					ТекстОшибки,,
					ВыборкаДокумент.Регистратор,
					Отказ);
					
			КонецЕсли; 
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки; 
		
		Если ВыборкаДокумент.ВидАналитикиКапитализацииРасходов = Перечисления.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства
			И ВыборкаДокумент.ФактическаяСтоимость Тогда
			
			Если НакопленныеРасходы <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицыДляДвижений.ТаблицаПрочиеРасходы, НакопленныеРасходы);
			Иначе
				НакопленныеРасходы = ТаблицыДляДвижений.ТаблицаПрочиеРасходы.Скопировать();
			КонецЕсли; 
			
			ОбновитьНакопленныеРасходы(НакопленныеРасходы, МенеджерВременныхТаблиц);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	ВнеоборотныеАктивыЛокализация.ПослеРасчетаСтоимостиВнеоборотныхАктивов(Запрос, МенеджерВременныхТаблиц, ТаблицыУпрБаланса);
	
	Возврат КоличествоДанных;
	
КонецФункции

Процедура ЗаблокироватьДанныеПередРасчетомСтоимости(Регистратор, ВидОбъектовУчета) Экспорт

	Блокировка = Новый БлокировкаДанных;
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуОС2_4") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуОС2_4");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуУзловКомпонентовАмортизации");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.МодернизацияОС2_4");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуНМА2_4") Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("Документ.ПринятиеКУчетуНМА2_4");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
		
	КонецЕсли; 
	
	Если ВидОбъектовУчета = "ОсновныеСредства" Тогда
		
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьОС.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
	Иначе
	
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.СтоимостьНМА.НаборЗаписей");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		
	КонецЕсли; 
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеРасходы.НаборЗаписей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
	
	Блокировка.Заблокировать(); 
	
КонецПроцедуры

Функция СформироватьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, ПараметрыОбработчика, МенеджерВременныхТаблиц, Отказ)

	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаДанныеДокумента(ТекстыЗапроса);
	ТекстЗапросаТаблицаТекущиеРасходы(ТекстыЗапроса);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Период", ВыборкаДокумент.Период);
	Запрос.УстановитьПараметр("Организация", ВыборкаДокумент.Организация);
	Запрос.УстановитьПараметр("Регистратор", ВыборкаДокумент.Регистратор);
	Запрос.УстановитьПараметр("НаправлениеДеятельности", ВыборкаДокумент.НаправлениеДеятельности);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", ВыборкаДокумент.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", ВыборкаДокумент.ОтражатьВУпрУчете);
	
	Результат = ОбщегоНазначенияУТ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, Истина);
	
	ПараметрыРасчетаСтоимости = ПараметрыРасчетаСтоимости();
	ПараметрыРасчетаСтоимости.РасчетСКомпонентами = (Результат.ДокументыКомпонентов.Количество() > 2);
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСтоимости, ВыборкаДокумент);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.ДанныеДокумента, ПараметрыРасчетаСтоимости.ТаблицаОбъектовУчета);
	ТекущиеРасходы = РассчитатьРасходыПоДокументу(Результат.ТекущиеРасходы, ПараметрыРасчетаСтоимости);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекущиеРасходыПриФормированииТаблицДвиженийРасчетаСтоимости(
		ВыборкаДокумент, Результат, ТекущиеРасходы);
	
	СоздатьВтРасчетСтоимости(ВыборкаДокумент, ТекущиеРасходы, МенеджерВременныхТаблиц);
	
	ЗарегистрироватьОшибкиРасчетаСтоимостиВНА(
		ВыборкаДокумент,
		Результат.ДанныеДокумента, 
		ПараметрыОбработчика, 
		МенеджерВременныхТаблиц, 
		Отказ);
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВыборкаДокумент.Регистратор);
	ТаблицыДляДвижений = МенеджерОбъекта.ТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент.Регистратор, МенеджерВременныхТаблиц);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТаблицыДвиженийРасчетаСтоимости(ВыборкаДокумент, ТаблицыДляДвижений);
	
	ИспользуемыеТаблицы = "КэшГраниц,ДанныеКРасчету,НакопленныеРасходы,РасходыПоДокументам";
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеТаблицы);
	
	Возврат ТаблицыДляДвижений;
	
КонецФункции

Процедура ЗаписатьДвиженияРасчетаСтоимости(ТаблицыДляДвижений, ВыборкаДокумент, ПараметрыОбработчика)

	СлужебноеИмя = ВРег("ТАБЛИЦА");
	ДлинаСлужебногоИмени = СтрДлина(СлужебноеИмя);
	
	Для Каждого Таблица Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = Таблица.Ключ;
		Если ВРег(Лев(ИмяРегистра, ДлинаСлужебногоИмени)) = СлужебноеИмя Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра) - ДлинаСлужебногоИмени);
		КонецЕсли;
		
		ИмяРегистра = ВРег(ИмяРегистра);
		
		Если ВнеоборотныеАктивыЛокализация.ЗаписьДвиженийРасчетаСтоимостиВыполняетсяВМодулеЛокализации(ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		Иначе
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		КонецЕсли;
		
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокумент.Регистратор);
		НаборЗаписей.Загрузить(Таблица.Значение);
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	ВнеоборотныеАктивыЛокализация.ЗаписатьДвиженияРасчетаСтоимости(ТаблицыДляДвижений, ВыборкаДокумент, ПараметрыОбработчика);
	
КонецПроцедуры

Процедура СоздатьВтРасчетСтоимости(Выборка, ТекущиеРасходы, МенеджерВременныхТаблиц) Экспорт

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	СписокЗапросов = Новый Массив;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТекущиеРасходы.ОбъектУчета                 КАК ОбъектУчета,
	|	ТекущиеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ТекущиеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТекущиеРасходы.Подразделение               КАК Подразделение,
	|	ТекущиеРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТекущиеРасходы.Сумма                       КАК Сумма,
	|	ТекущиеРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ТекущиеРасходы.СуммаУпр                    КАК СуммаУпр,
	|	ТекущиеРасходы.СуммаРегл                   КАК СуммаРегл,
	|	ТекущиеРасходы.ПостояннаяРазница           КАК ПостояннаяРазница,
	|	ТекущиеРасходы.ВременнаяРазница            КАК ВременнаяРазница,
	|	ТекущиеРасходы.НеУчитываемаяСтоимостьНУ    КАК НеУчитываемаяСтоимостьНУ,
	|	ТекущиеРасходы.СуммаЦФ                     КАК СуммаЦФ,
	|	ТекущиеРасходы.СуммаПРЦФ                   КАК СуммаПРЦФ,
	|	ТекущиеРасходы.СуммаВРЦФ                   КАК СуммаВРЦФ,
	|	ТекущиеРасходы.Ссылка                      КАК Ссылка,
	|	ТекущиеРасходы.НомерСтроки                 КАК НомерСтроки,
	|	ТекущиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ втТекущиеРасходы
	|ИЗ
	|	&ТекущиеРасходы КАК ТекущиеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеРасходы.СтатьяРасходов              КАК СтатьяРасходов,
	|	ТекущиеРасходы.АналитикаРасходов           КАК АналитикаРасходов,
	|	ТекущиеРасходы.Подразделение               КАК Подразделение,
	|	ТекущиеРасходы.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТекущиеРасходы.Сумма                       КАК Сумма,
	|	ТекущиеРасходы.СуммаБезНДС                 КАК СуммаБезНДС,
	|	ТекущиеРасходы.СуммаУпр                    КАК СуммаУпр,
	|	ТекущиеРасходы.СуммаРегл                   КАК СуммаРегл,
	|	ТекущиеРасходы.ПостояннаяРазница           КАК ПостояннаяРазница,
	|	ТекущиеРасходы.ВременнаяРазница            КАК ВременнаяРазница,
	|	ТекущиеРасходы.Ссылка                      КАК Ссылка,
	|	ТекущиеРасходы.НомерСтроки                 КАК НомерСтроки,
	|	ТекущиеРасходы.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ втРасчетРасходов
	|ИЗ
	|	втТекущиеРасходы КАК ТекущиеРасходы";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаСоздатьВтРасчетСтоимости(Выборка, Запрос);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущиеРасходы.ИдентификаторСтроки       КАК ИдентификаторСтроки,
		|	ТекущиеРасходы.Ссылка                    КАК Ссылка,
		|	ТекущиеРасходы.НомерСтроки               КАК НомерСтроки,
		|	ТекущиеРасходы.ОбъектУчета               КАК ОбъектУчета,
		|	ТекущиеРасходы.СтатьяРасходов            КАК КорСтатьяРасходов,
		|	ТекущиеРасходы.АналитикаРасходов         КАК КорАналитикаРасходов,
		|	ТекущиеРасходы.Подразделение             КАК КорПодразделение,
		|	ТекущиеРасходы.НаправлениеДеятельности   КАК КорНаправлениеДеятельности,
		|
		|	ТекущиеРасходы.Сумма                     КАК Сумма,
		|	ТекущиеРасходы.СуммаУпр                  КАК Стоимость,
		|	ТекущиеРасходы.СуммаРегл                 КАК СтоимостьРегл,
		|
		|	0 КАК СтоимостьНУ,
		|	0 КАК СтоимостьПР,
		|	0 КАК СтоимостьВР,
		|	0 КАК СтоимостьЦФ,
		|	0 КАК СтоимостьНУЦФ,
		|	0 КАК СтоимостьПРЦФ,
		|	0 КАК СтоимостьВРЦФ,
		|	0 КАК НеУчитываемаяСтоимостьНУ,
		|	0 КАК КорПостояннаяРазница,
		|	0 КАК КорВременнаяРазница
		|
		|ПОМЕСТИТЬ ВтРасчетСтоимости
		|ИЗ
		|	втТекущиеРасходы КАК ТекущиеРасходы
		|ГДЕ
		|	ТекущиеРасходы.СуммаУпр <> 0
		|		ИЛИ ТекущиеРасходы.СуммаРегл <> 0";
		
	КонецЕсли;

	СписокЗапросов.Добавить(ТекстЗапроса);
	
	Запрос.Текст = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
	Запрос.УстановитьПараметр("ТекущиеРасходы", ТекущиеРасходы);
	Запрос.УстановитьПараметр("ХозяйственнаяОперация", Выборка.ХозяйственнаяОперация);
	
	Запрос.Выполнить();
	
КонецПроцедуры

Процедура ЗарегистрироватьОшибкиРасчетаСтоимостиВНА(ВыборкаДокумент, ДанныеДокумента, ПараметрыОбработчика, МенеджерВременныхТаблиц, Отказ)

	Если ПараметрыОбработчика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеДокумента.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.СтоимостьУУ КАК СтоимостьУУ,
	|	ДанныеДокумента.СтоимостьБУ КАК СтоимостьБУ,
	|	ДанныеДокумента.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	ДанныеДокумента.ОтражатьВБУ КАК ОтражатьВБУ,
	|	ДанныеДокумента.ОтражатьВНУ КАК ОтражатьВНУ
	|ПОМЕСТИТЬ втДанныеДокумента
	|ИЗ
	|	&ДанныеДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетСтоимости.ОбъектУчета КАК ОбъектУчета,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьРегл, 0)) + СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьЦФ, 0)) КАК ФактическаяСтоимостьБУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.СтоимостьНУ, 0)) КАК ФактическаяСтоимостьНУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.Стоимость, 0)) КАК ФактическаяСтоимостьУУ
	|ПОМЕСТИТЬ втВтРасчетСтоимостиСгруппированная
	|ИЗ
	|	ВтРасчетСтоимости КАК РасчетСтоимости
	|ГДЕ
	|	РасчетСтоимости.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетСтоимости.Ссылка,
	|	РасчетСтоимости.ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеДокумента.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.ОтражатьВБУ КАК ОтражатьВБУ,
	|	ДанныеДокумента.ОтражатьВНУ КАК ОтражатьВНУ,
	|	СУММА(ДанныеДокумента.СтоимостьБУ) КАК ПредварительнаяСтоимостьБУ,
	|	СУММА(ДанныеДокумента.СтоимостьУУ) КАК ПредварительнаяСтоимостьУУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьБУ, 0)) КАК ФактическаяСтоимостьБУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьНУ, 0)) КАК ФактическаяСтоимостьНУ,
	|	СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьУУ, 0)) КАК ФактическаяСтоимостьУУ
	|ИЗ
	|	втДанныеДокумента КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВтРасчетСтоимостиСгруппированная КАК РасчетСтоимости
	|		ПО (РасчетСтоимости.ОбъектУчета = ДанныеДокумента.ОбъектУчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДокумента.ОбъектУчета,
	|	ДанныеДокумента.ВалютаРегламентированногоУчета,
	|	ДанныеДокумента.ОтражатьВУпрУчете,
	|	ДанныеДокумента.ОтражатьВБУ,
	|	ДанныеДокумента.ОтражатьВНУ
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьУУ, 0)) < СУММА(ДанныеДокумента.СтоимостьУУ)
	|			И ДанныеДокумента.ОтражатьВУпрУчете
	|		ИЛИ СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьБУ, 0)) < СУММА(ДанныеДокумента.СтоимостьБУ)
	|			И ДанныеДокумента.ОтражатьВБУ
	|		ИЛИ СУММА(ЕСТЬNULL(РасчетСтоимости.ФактическаяСтоимостьНУ, 0)) = 0
	|			И ДанныеДокумента.ОтражатьВНУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВтРасчетСтоимостиСгруппированная";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
	Запрос.УстановитьПараметр("Ссылка", ВыборкаДокумент.Регистратор);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли; 
	
	ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если ТипЗнч(ВыборкаДокумент.Регистратор) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
		
		ШаблонСообщенияОС_БУ = НСтр("ru = 'У основного средства %1 предварительная сумма затрат (регл. учет) %2 (%3) не должна превышать фактическую %4 (%5).
	                              |Необходимо изменить предварительную сумму затрат в документе %6.';
	                              |en = 'Preliminary cost amount (local accounting) %2 (%3) of the %1 fixed asset must not exceed the actual cost %4 (%5).
	                              |Change the preliminary cost amount in the %6 document.'");
		
		ШаблонСообщенияОС_УУ = НСтр("ru = 'У основного средства %1 предварительная сумма затрат (упр. учет) %2 (%3) не должна превышать фактическую %4 (%5).
	                              |Необходимо изменить предварительную сумму затрат в документе %6.';
	                              |en = 'Preliminary cost amount (man. accounting) %2 (%3) of the %1 fixed asset should not exceed actual cost %4 (%5).
	                              |Change the preliminary cost amount in the %6 document.'");
		
		ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'У основного средства %1 отсутствуют фактические затраты на модернизацию (регл. учет).
	                              |Необходимо проверить документы, которыми были отражены затраты.';
	                              |en = 'Actual modernization costs (local accounting) of the %1 fixed asset are missing.
	                              |Check the documents in which the costs were recorded.'");
		
		ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'У основного средства %1 отсутствуют фактические затраты на модернизацию (упр. учет).
	                              |Необходимо проверить заполнение в документах, которыми были отражены затраты.';
	                              |en = 'Actual modernization costs (manag. accounting) of the %1 fixed asset are missing.
	                              |Check the documents in which the costs were recorded.'");
	
	ИначеЕсли ТипЗнч(ВыборкаДокумент.Регистратор) = Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		
		ШаблонСообщенияОС_БУ = НСтр("ru = 'В документе для компонента основного средства %1 указана стоимость (регл. учет) %2 (%3), превышающая фактическую %4 (%5).
	                              |Необходимо изменить стоимость в документе %6.';
	                              |en = 'Document contains the %2 (%3) cost (local accounting) for the %1 fixed asset component which exceeds the actual cost %4 (%5).
	                              |Change the cost in the %6 document.'");
		
		ШаблонСообщенияОС_УУ = НСтр("ru = 'В документе для компонента основного средства %1 указана стоимость (упр. учет) %2 (%3), превышающая фактическую %4 (%5).
	                              |Необходимо изменить стоимость в документе %6.';
	                              |en = 'Document contains the %2 (%3) cost (manag. accounting) for the %1 fixed asset component which exceeds the actual cost %4 (%5).
	                              |Change the cost in the %6 document.'");
		
		ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По компоненту основного средства %1 отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
	                              |Необходимо проверить документы, которыми были отражены затраты.';
	                              |en = 'Fixed asset component %1 has no actual expenses (local accounting) associated with its acquisition.
	                              |Check the documents that recorded the expenses.'");
		
		ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'По компоненту основного средства %1 отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
	                              |Необходимо проверить документы, которыми были отражены затраты.';
	                              |en = 'Fixed asset component %1 has no actual expenses (man. accounting) associated with its acquisition.
	                              |Check the documents that recorded the expenses.'");
	Иначе
		
		ШаблонСообщенияОС_БУ = НСтр("ru = 'В документе для основного средства %1 указана стоимость (регл. учет) %2 (%3), превышающая фактическую %4 (%5).
	                              |Необходимо изменить стоимость в документе %6.';
	                              |en = 'Cost in the amount of %2 (%3) (local accounting) exceeding actual cost %4 (%5) is specified for the %1 fixed asset in the document.
	                              |Change the cost for the %6 document.'");
		
		ШаблонСообщенияОС_УУ = НСтр("ru = 'В документе для основного средства %1 указана стоимость (упр. учет) %2 (%3), превышающая фактическую %4 (%5).
	                              |Необходимо изменить стоимость в документе %6.';
	                              |en = 'Document contains the %2 (%3) cost (man. accounting) for the fixed asset %1 which exceeds the actual cost %4 (%5).
	                              |Change the cost in the %6 document.'");
		
		Если ВыборкаДокумент.ОтражатьВБУ И НЕ ВыборкаДокумент.ОтражатьВНУ Тогда
			
			ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству %1 отсутствуют фактические затраты (бух. учет), связанные с его приобретением.
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'For the %1 fixed asset, actual costs (accounting) related to its acquisition are missing.
		                              |Check the documents in which the costs are recorded.'");
		                              
		ИначеЕсли ВыборкаДокумент.ОтражатьВНУ И НЕ ВыборкаДокумент.ОтражатьВБУ Тогда
			
			ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству %1 отсутствуют фактические затраты (нал. учет), связанные с его приобретением.
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'For the %1 fixed asset, actual costs (tax accounting) related to its acquisition are missing.
		                              |Check the documents in which the costs are recorded.'");
		                              
		Иначе
			
			ШаблонСообщенияОС_БУ_Нулевая = НСтр("ru = 'По основному средству %1 отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
		                              |Необходимо проверить документы, которыми были отражены затраты.';
		                              |en = 'For the %1 fixed asset, actual costs (local accounting) related to its acquisition are missing.
		                              |Check the documents in which the costs are recorded.'");
		                              
		КонецЕсли;
			
		ШаблонСообщенияОС_УУ_Нулевая = НСтр("ru = 'По основному средству %1 отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
	                              |Необходимо проверить документы, которыми были отражены затраты.';
	                              |en = 'For the %1 fixed asset, actual costs (man.accounting) related to its acquisition are missing.
	                              |Check the documents in which the costs are recorded.'");
									
	КонецЕсли;
	
	ШаблонСообщенияНМА_БУ = НСтр("ru = 'У нематериального актива %1 предварительная стоимость (регл. учет) %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную стоимость в документе %6.';
                              |en = 'Preliminary cost (local accounting) %2 (%3) of the %1 intangible asset should not exceed actual cost %4 (%5).
                              |Change the preliminary cost in the %6 document.'");
	
	ШаблонСообщенияНМА_УУ = НСтр("ru = 'У нематериального актива %1 предварительная стоимость (упр. учет) %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную стоимость в документе %6.';
                              |en = 'Preliminary cost (man. accounting) %2 (%3) of the %1 intangible asset should not exceed actual cost %4 (%5).
                              |Change the preliminary cost in the %6 document.'");
	
	ШаблонСообщенияНМА_БУ_Нулевая = НСтр("ru = 'По нематериальному активу %1 отсутствуют фактические затраты (регл. учет), связанные с его приобретением.
                              |Необходимо проверить документы, которыми были отражены затраты.';
                              |en = 'For the %1 intangible asset, actual costs (local accounting) connected with its acquisition are missing.
                              |Check the documents in which the costs were recorded.'");
	
	ШаблонСообщенияНМА_УУ_Нулевая = НСтр("ru = 'По нематериальному активу %1 отсутствуют фактические затраты (упр. учет), связанные с его приобретением.
                              |Необходимо проверить документы, которыми были отражены затраты.';
                              |en = 'For the %1 intangible asset, actual costs (man. accounting) connected with its acquisition are missing.
                              |Check the documents in which the costs were recorded.'");
		
	ШаблонСообщенияНИОКР_БУ = НСтр("ru = 'Сумма расходов на НИОКР (регл. учет) %1 %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную сумму расходов %6.';
                              |en = 'Amount of R&D expenses (local accounting) %1 %2 (%3) should not exceed actual amount %4 (%5).
                              |Change preliminary amount of expenses %6.'");
	
	ШаблонСообщенияНИОКР_УУ = НСтр("ru = 'Сумма расходов на НИОКР (упр. учет) %1 %2 (%3) не должна превышать фактическую %4 (%5).
                              |Необходимо изменить предварительную сумму расходов %6.';
                              |en = 'Amount of R&D expenses (man. accounting) %1 %2 (%3) should not exceed actual amount %4 (%5).
                              |Change preliminary amount of expenses %6.'");
	
	ШаблонСообщенияНИОКР_БУ_Нулевая = НСтр("ru = 'По расходам на НИОКР %1 отсутствуют фактические суммы расходов (регл. учет).
                              |Необходимо проверить документы, которыми были отражены расходы.';
                              |en = 'For the %1 R&D expenses, actual expense amounts (local accounting) are missing.
                              |Check the documents in which the expenses were recorded.'");
	
	ШаблонСообщенияНИОКР_УУ_Нулевая = НСтр("ru = 'По расходам на НИОКР %1 отсутствуют фактические суммы расходов (упр. учет).
                              |Необходимо проверить документы, которыми были отражены расходы.';
                              |en = 'For the %1 R&D expenses, actual expense amounts (man. accounting) are missing.
                              |Check the documents in which the expenses were recorded.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.ОбъектыЭксплуатации") Тогда
			ТекстОшибки_БУ = ШаблонСообщенияОС_БУ;
			ТекстОшибки_УУ = ШаблонСообщенияОС_УУ;
			ТекстОшибки_БУ_Нулевая = ШаблонСообщенияОС_БУ_Нулевая;
			ТекстОшибки_УУ_Нулевая = ШаблонСообщенияОС_УУ_Нулевая;
		ИначеЕсли ТипЗнч(Выборка.ОбъектУчета) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			ВидОбъектаУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.ОбъектУчета, "ВидОбъектаУчета");
			Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
				ТекстОшибки_БУ = ШаблонСообщенияНМА_БУ;
				ТекстОшибки_УУ = ШаблонСообщенияНМА_УУ;
				ТекстОшибки_БУ_Нулевая = ШаблонСообщенияНМА_БУ_Нулевая;
				ТекстОшибки_УУ_Нулевая = ШаблонСообщенияНМА_УУ_Нулевая;
			Иначе
				ТекстОшибки_БУ = ШаблонСообщенияНИОКР_БУ;
				ТекстОшибки_УУ = ШаблонСообщенияНИОКР_УУ;
				ТекстОшибки_БУ_Нулевая = ШаблонСообщенияНИОКР_БУ_Нулевая;
				ТекстОшибки_УУ_Нулевая = ШаблонСообщенияНИОКР_УУ_Нулевая;
			КонецЕсли; 
		КонецЕсли; 
		
		Если Выборка.ПредварительнаяСтоимостьБУ > Выборка.ФактическаяСтоимостьБУ
			И Выборка.ОтражатьВБУ Тогда
			
			Если Выборка.ФактическаяСтоимостьБУ = 0 Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибки_БУ_Нулевая, Выборка.ОбъектУчета);
			Иначе	
				ТекстОшибки = СтрШаблон(ТекстОшибки_БУ, 
				                        Выборка.ОбъектУчета,
										Формат(Выборка.ПредварительнаяСтоимостьБУ, "ЧДЦ=2; ЧН=0"),
										Выборка.ВалютаРегламентированногоУчета,
										Формат(Выборка.ФактическаяСтоимостьБУ, "ЧДЦ=2; ЧН=0"),
										Выборка.ВалютаРегламентированногоУчета,
										ВыборкаДокумент.Регистратор);
			КонецЕсли; 
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код, 
				ПараметрыОбработчика.ПараметрыРасчета.Период,
				ВыборкаДокумент.Организация,
				ТекстОшибки,,
				ВыборкаДокумент.Регистратор,
				Отказ);
				
		КонецЕсли; 
	
		Если Выборка.ФактическаяСтоимостьНУ = 0
			И Выборка.ОтражатьВНУ
			И НЕ Выборка.ОтражатьВБУ Тогда
			
			ТекстОшибки = СтрШаблон(ТекстОшибки_БУ_Нулевая, Выборка.ОбъектУчета);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код, 
				ПараметрыОбработчика.ПараметрыРасчета.Период,
				ВыборкаДокумент.Организация,
				ТекстОшибки,,
				ВыборкаДокумент.Регистратор,
				Отказ);
				
		КонецЕсли; 
	
		Если Выборка.ПредварительнаяСтоимостьУУ > Выборка.ФактическаяСтоимостьУУ Тогда
			
			Если Выборка.ФактическаяСтоимостьУУ = 0 Тогда
				ТекстОшибки = СтрШаблон(ТекстОшибки_УУ_Нулевая, Выборка.ОбъектУчета);
			Иначе	
				ТекстОшибки = СтрШаблон(ТекстОшибки_УУ, 
				                        Выборка.ОбъектУчета,
										Формат(Выборка.ПредварительнаяСтоимостьУУ, "ЧДЦ=2; ЧН=0"),
										ВалютаУправленческогоУчета,
										Формат(Выборка.ФактическаяСтоимостьУУ, "ЧДЦ=2; ЧН=0"),
										ВалютаУправленческогоУчета,
										ВыборкаДокумент.Регистратор);
			КонецЕсли; 
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыОбработчика.ДанныеЭтапа.Код, 
				ПараметрыОбработчика.ПараметрыРасчета.Период,
				ВыборкаДокумент.Организация,
				ТекстОшибки,,
				ВыборкаДокумент.Регистратор,
				Отказ);
				
		КонецЕсли; 
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНакопленныеРасходы(НакопленныеРасходы, МенеджерВременныхТаблиц)

	Если НакопленныеРасходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"УНИЧТОЖИТЬ НакопленныеРасходы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов,
	|	РасходыПоДокументам.Сумма,
	|	РасходыПоДокументам.СуммаУпр,
	|	РасходыПоДокументам.СуммаБезНДС,
	|	РасходыПоДокументам.СуммаРегл,
	|	РасходыПоДокументам.ПостояннаяРазница,
	|	РасходыПоДокументам.ВременнаяРазница
	|ПОМЕСТИТЬ НакопленныеРасходы
	|ИЗ
	|	&НакопленныеРасходы КАК РасходыПоДокументам
	|ГДЕ
	|	РасходыПоДокументам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
	
	НакопленныеРасходы.Свернуть(
		"Организация,НаправлениеДеятельности,Подразделение,СтатьяРасходов,АналитикаРасходов,ВидДвижения", 
		"Сумма,СуммаУпр,СуммаБезНДС,СуммаРегл,ПостояннаяРазница,ВременнаяРазница");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НакопленныеРасходы", НакопленныеРасходы);
	
	Запрос.Выполнить();
	
КонецПроцедуры
 
Функция ТекстЗапросаРасчетСтоимости()

	СписокЗапросов = Новый Массив;
	
	// Содержит документы и объекты учета, по которым требуется рассчитать стоимость.
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""ОсновныеСредства""                                     КАК ВидОбъектовУчета,
	|	НАЧАЛОПЕРИОДА(ДанныеКРасчету.Период, ДЕНЬ)               КАК Период,
	|	ДанныеКРасчету.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
	|	ВЫБОР
	|		КОГДА НЕ ПринятиеКУчетуОС.Ссылка ЕСТЬ NULL
	|			ТОГДА ПринятиеКУчетуОС.ЧастичныйВводВЭксплуатацию 
	|					ИЛИ ПринятиеКУчетуОС.ПорядокУчетаУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена)
	|					ИЛИ ПринятиеКУчетуОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации)
	|					ИЛИ &ФактическаяСтоимостьПриПринятииКУчету
	|		КОГДА НЕ МодернизацияОС2_4.Ссылка ЕСТЬ NULL
	|			ТОГДА МодернизацияОС2_4.ЧастичнаяМодернизация 
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ                                                    КАК ФактическаяСтоимость,
	|	ДанныеКРасчету.ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	ДанныеКРасчету.Регистратор                               КАК Регистратор,
	|	ДанныеКРасчету.Организация                               КАК Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ВсеДанныеКРасчету.АналитикаКапитализацииРасходов         КАК АналитикаКапитализацииРасходов,
	|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	ДанныеКРасчету.ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	ЕСТЬNULL(ПринятиеКУчетуОС.ОтражатьВБУ, ДанныеКРасчету.ОтражатьВРеглУчете) КАК ОтражатьВБУ,
	|	ЕСТЬNULL(ПринятиеКУчетуОС.ОтражатьВНУ, ДанныеКРасчету.ОтражатьВРеглУчете) КАК ОтражатьВНУ
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК ВсеДанныеКРасчету
	|		ПО ВсеДанныеКРасчету.Регистратор = ДанныеКРасчету.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4 КАК ПринятиеКУчетуОС
	|		ПО ПринятиеКУчетуОС.Ссылка = ДанныеКРасчету.Регистратор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.МодернизацияОС2_4 КАК МодернизацияОС2_4
	|		ПО МодернизацияОС2_4.Ссылка = ДанныеКРасчету.Регистратор
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	И ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И ДанныеКРасчету.ХозяйственнаяОперация В (&ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость)
	|
	|	И (ДанныеКРасчету.Регистратор В (&МассивСсылок)
	|		ИЛИ НЕ &ОтборПоДокументам)
	|
	|	И (ДанныеКРасчету.Организация, ДанныеКРасчету.АналитикаКапитализацииРасходов) В
	|			(ВЫБРАТЬ
	|				КэшГраниц.Организация,
	|				КэшГраниц.ОбъектУчета
	|			ИЗ
	|				КэшГраниц)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""НематериальныеАктивы""                                 КАК ВидОбъектовУчета,
	|	НАЧАЛОПЕРИОДА(ДанныеКРасчету.Период, ДЕНЬ)               КАК Период,
	|	ДанныеКРасчету.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР) КАК ВидАналитикиКапитализацииРасходов,
	|	ЛОЖЬ                                                     КАК ФактическаяСтоимость,
	|	ДанныеКРасчету.ВариантПримененияЦелевогоФинансирования   КАК ВариантПримененияЦелевогоФинансирования,
	|	ДанныеКРасчету.Регистратор                               КАК Регистратор,
	|	ДанныеКРасчету.Организация                               КАК Организация,
	|	ДанныеКРасчету.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	ВсеДанныеКРасчету.НематериальныйАктив                    КАК АналитикаКапитализацииРасходов,
	|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
	|	ДанныеКРасчету.ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
	|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВБУ,
	|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВНУ
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК ДанныеКРасчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьНМА КАК ВсеДанныеКРасчету
	|		ПО ВсеДанныеКРасчету.Регистратор = ДанныеКРасчету.Регистратор
	|ГДЕ
	|	ДанныеКРасчету.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеКРасчету.Активность
	|	И ДанныеКРасчету.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|
	|	И ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Регистратор) В (&ТипыДокументовПоКоторымРассчитываетсяСтоимость)
	|	И ДанныеКРасчету.ХозяйственнаяОперация В (&ХозяйственныеОперацииПоКоторымРассчитываетсяСтоимость)
	|
	|	И (ДанныеКРасчету.Регистратор В (&МассивСсылок)
	|		ИЛИ НЕ &ОтборПоДокументам)
	|
	|	И (ДанныеКРасчету.Организация, ДанныеКРасчету.НематериальныйАктив) В
	|			(ВЫБРАТЬ
	|				КэшГраниц.Организация,
	|				КэшГраниц.ОбъектУчета
	|			ИЗ
	|				КэшГраниц)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	АналитикаКапитализацииРасходов";
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаРасчетСтоимости(ТекстЗапроса);
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	// Содержит список расходов накопленных на момент каждого документа.
	ТекстЗапросаРасходыПоДокументам(СписокЗапросов);
	
	// Используется для обхода документов и формирования нужных движений. Должен быть последним.
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаВыборкиДанныхДляРасчетаСтоимости();
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеКРасчету.Организация                               КАК Организация,
		|	ДанныеКРасчету.НаправлениеДеятельности                   КАК НаправлениеДеятельности,
		|	ДанныеКРасчету.ВидОбъектовУчета                          КАК ВидОбъектовУчета,
		|	ДанныеКРасчету.Регистратор                               КАК Регистратор,
		|	ДанныеКРасчету.Период                                    КАК Период,
		|	ДанныеКРасчету.ХозяйственнаяОперация                     КАК ХозяйственнаяОперация,
		|	ДанныеКРасчету.ФактическаяСтоимость                      КАК ФактическаяСтоимость,
		|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов         КАК ВидАналитикиКапитализацииРасходов,
		|	ДанныеКРасчету.ОтражатьВРеглУчете                        КАК ОтражатьВРеглУчете,
		|	ДанныеКРасчету.ОтражатьВУпрУчете                         КАК ОтражатьВУпрУчете,
		|	ДанныеКРасчету.ОтражатьВБУ                               КАК ОтражатьВБУ,
		|	ДанныеКРасчету.ОтражатьВНУ                               КАК ОтражатьВНУ
		|ИЗ
		|	ДанныеКРасчету КАК ДанныеКРасчету
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период,
		|	Регистратор";
		
	КонецЕсли; 
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаТаблицаДанныеДокумента(СписокЗапросов)

	Если ВнеоборотныеАктивыЛокализация.ТекстЗапросаТаблицаДанныеДокумента(СписокЗапросов) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ТаблицаОС.Ссылка.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	ТаблицаОС.Ссылка.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
	|ПОМЕСТИТЬ втОбъектыДокумента
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Регистратор
	|	И ТаблицаОС.Ссылка.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Ссылка.ОтражатьВРеглУчете,
	|	ТаблицаОС.Ссылка.ОтражатьВУпрУчете
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаОС
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Регистратор
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	СписокЗапросов.Добавить(ТекстЗапроса, "втОбъектыДокумента");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.Ссылка КАК Ссылка,
	|	ВложенныйЗапрос.Дата КАК Дата
	|ПОМЕСТИТЬ втРегистраторы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОсновныеСредства.НомерСтроки КАК НомерСтроки,
	|		Операция.Ссылка КАК Ссылка,
	|		Операция.Дата КАК Дата
	|	ИЗ
	|		Документ.ПринятиеКУчетуОС2_4 КАК Операция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуОС2_4.ОС КАК ОсновныеСредства
	|			ПО ОсновныеСредства.Ссылка = Операция.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыДокумента КАК втОбъектыДокумента
	|			ПО ОсновныеСредства.ОсновноеСредство = втОбъектыДокумента.ОсновноеСредство
	|				И (Операция.ОтражатьВРеглУчете = втОбъектыДокумента.ОтражатьВРеглУчете И втОбъектыДокумента.ОтражатьВРеглУчете
	|					ИЛИ Операция.ОтражатьВУпрУчете = втОбъектыДокумента.ОтражатьВУпрУчете И втОбъектыДокумента.ОтражатьВУпрУчете)
	|	ГДЕ
	|		Операция.Проведен
	|		И Операция.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|		И Операция.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		Компоненты.НомерСтроки,
	|		Операция.Ссылка,
	|		Операция.Дата
	|	ИЗ
	|		Документ.ПринятиеКУчетуУзловКомпонентовАмортизации КАК Операция
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК Компоненты
	|			ПО Компоненты.Ссылка = Операция.Ссылка
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъектыДокумента КАК втОбъектыДокумента
	|			ПО Компоненты.ОсновноеСредство = втОбъектыДокумента.ОсновноеСредство
	|				И (Операция.ОтражатьВРеглУчете = втОбъектыДокумента.ОтражатьВРеглУчете И втОбъектыДокумента.ОтражатьВРеглУчете
	|					ИЛИ Операция.ОтражатьВУпрУчете = втОбъектыДокумента.ОтражатьВУпрУчете И втОбъектыДокумента.ОтражатьВУпрУчете)
	|	ГДЕ
	|		Операция.Проведен
	|		И Операция.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&Период, МЕСЯЦ) И КОНЕЦПЕРИОДА(&Период, МЕСЯЦ)
	|
	|	) КАК ВложенныйЗапрос
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Регистратор,
	|	&Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|";
	СписокЗапросов.Добавить(ТекстЗапроса, "втРегистраторы");
	
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	втРегистраторы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втПоследнийДокумент
	|ИЗ
	|	втРегистраторы КАК втРегистраторы
	|УПОРЯДОЧИТЬ ПО
	|	втРегистраторы.Дата УБЫВ";
	СписокЗапросов.Добавить(ТекстЗапроса, "втПоследнийДокумент");

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втРегистраторы.Ссылка КАК Ссылка
	|ИЗ
	|	втРегистраторы КАК втРегистраторы";
	СписокЗапросов.Добавить(ТекстЗапроса, "ДокументыКомпонентов");

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектУчета,
	|	ТаблицаОС.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаОС.СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ,
	|	ТаблицаОС.СтоимостьНУ,
	|	ТаблицаОС.СуммаЦелевыхСредств,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете КАК ОтражатьВБУ,
	|	ЛОЖЬ КАК ОтражатьВНУ,
	|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторСтроки
	|	
	|ИЗ
	|	Документ.ПринятиеКУчетуОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО ТаблицаОС.Ссылка = ПервоначальныеСведенияОС.Регистратор
	|			И ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ втРегистраторы КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство КАК ОбъектУчета,
	|	ТаблицаОС.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаОС.СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ,
	|	0,
	|	0,
	|	0,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете КАК ОтражатьВБУ,
	|	ЛОЖЬ КАК ОтражатьВНУ,
	|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторСтроки
	|	
	|ИЗ
	|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО ТаблицаОС.Ссылка = ПервоначальныеСведенияОС.Регистратор
	|			И ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка В (ВЫБРАТЬ Т.Ссылка ИЗ втРегистраторы КАК Т)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаОС.Ссылка КАК Ссылка,
	|	ТаблицаОС.НомерСтроки,
	|	ТаблицаОС.ОсновноеСредство,
	|	ТаблицаОС.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&НаправлениеДеятельности,
	|	ТаблицаОС.СтоимостьУУ,
	|	ТаблицаОС.СтоимостьБУ,
	|	0,
	|	ТаблицаОС.СуммаЦелевыхСредств,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьНУ,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете КАК ОтражатьВБУ,
	|	ЛОЖЬ КАК ОтражатьВНУ,
	|	ТаблицаОС.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.МодернизацияОС2_4.ОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ПервоначальныеСведенияОС
	|		ПО ТаблицаОС.Ссылка = ПервоначальныеСведенияОС.Регистратор
	|			И ТаблицаОС.ОсновноеСредство = ПервоначальныеСведенияОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Регистратор	
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаНМА.Ссылка КАК Ссылка,
	|	1,
	|	ТаблицаНМА.НематериальныйАктив,
	|	ТаблицаНМА.Ссылка.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета,
	|	&НаправлениеДеятельности,
	|	ТаблицаНМА.ПервоначальнаяСтоимостьУУ,
	|	ТаблицаНМА.ПервоначальнаяСтоимостьБУ,
	|	0,
	|	ТаблицаНМА.СуммаЦелевыхСредств,
	|	0,
	|	&ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
	|	&ОтражатьВРеглУчете КАК ОтражатьВБУ,
	|	ЛОЖЬ КАК ОтражатьВНУ,
	|	ТаблицаНМА.ИдентификаторДокумента КАК ИдентификаторСтроки
	|ИЗ
	|	Документ.ПринятиеКУчетуНМА2_4 КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки ВОЗР";	

	СписокЗапросов.Добавить(ТекстЗапроса, "ДанныеДокумента");
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаТекущиеРасходы(СписокЗапросов)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РасходыПоДокументам.Организация                КАК Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение              КАК Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов             КАК СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов          КАК АналитикаРасходов,
	|	СУММА(РасходыПоДокументам.Сумма             - ЕСТЬNULL(НакопленныеРасходы.Сумма, 0))               КАК Сумма,
	|	СУММА(РасходыПоДокументам.СуммаУпр          - ЕСТЬNULL(НакопленныеРасходы.СуммаУпр, 0))            КАК СуммаУпр,
	|	СУММА(РасходыПоДокументам.СуммаБезНДС       - ЕСТЬNULL(НакопленныеРасходы.СуммаБезНДС, 0))         КАК СуммаБезНДС,
	|	СУММА(РасходыПоДокументам.СуммаРегл         - ЕСТЬNULL(НакопленныеРасходы.СуммаРегл, 0))           КАК СуммаРегл,
	|	СУММА(РасходыПоДокументам.ПостояннаяРазница - ЕСТЬNULL(НакопленныеРасходы.ПостояннаяРазница, 0))   КАК ПостояннаяРазница,
	|	СУММА(РасходыПоДокументам.ВременнаяРазница  - ЕСТЬNULL(НакопленныеРасходы.ВременнаяРазница, 0))    КАК ВременнаяРазница
	|ИЗ
	|	РасходыПоДокументам КАК РасходыПоДокументам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НакопленныеРасходы КАК НакопленныеРасходы
	|		ПО НакопленныеРасходы.Организация = РасходыПоДокументам.Организация
	|			И НакопленныеРасходы.НаправлениеДеятельности = РасходыПоДокументам.НаправлениеДеятельности
	|			И НакопленныеРасходы.Подразделение = РасходыПоДокументам.Подразделение
	|			И НакопленныеРасходы.СтатьяРасходов = РасходыПоДокументам.СтатьяРасходов
	|			И НакопленныеРасходы.АналитикаРасходов = РасходыПоДокументам.АналитикаРасходов
	|ГДЕ
	|	РасходыПоДокументам.Регистратор В (ВЫБРАТЬ Т.Ссылка ИЗ втПоследнийДокумент КАК Т)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПоДокументам.Организация,
	|	РасходыПоДокументам.НаправлениеДеятельности,
	|	РасходыПоДокументам.Подразделение,
	|	РасходыПоДокументам.СтатьяРасходов,
	|	РасходыПоДокументам.АналитикаРасходов";
	
	СписокЗапросов.Добавить(ТекстЗапроса, "ТекущиеРасходы");
	
КонецПроцедуры

Функция СоздатьМассивКоэффициентов(Таблица, ИмяКолонки)

	МассивКоэффициентов = Таблица.ВыгрузитьКолонку(ИмяКолонки);
	
	Если Таблица.Итог(ИмяКолонки) = 0 Тогда
		Для Сч = 0 По МассивКоэффициентов.ВГраница() Цикл
			МассивКоэффициентов[Сч] = 1;
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивКоэффициентов;
	
КонецФункции

Процедура АктуализироватьДвиженияПослеРасчетаСтоимости(Месяц, МенеджерВременныхТаблиц, ПараметрыОбработчика, Отказ)

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.АналитикаКапитализацииРасходов КАК ОбъектУчета
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|ГДЕ
	|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов В (
	|		ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства),
	|		ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.НМАиНИОКР))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Организация,
	|	СтоимостьОС.ОсновноеСредство
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|		ПО (СтоимостьОС.Регистратор = ДанныеКРасчету.Регистратор)
	|ГДЕ
	|	ДанныеКРасчету.ВидАналитикиКапитализацииРасходов = ЗНАЧЕНИЕ(Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства)";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ДанныеКРасчету = Запрос.Выполнить().Выгрузить();
	
	ПараметрыПроцедуры = ПараметрыОтложенногоФормированияДвижений();
	ПараметрыПроцедуры.Месяц = Месяц;
	ПараметрыПроцедуры.ИмяТаблицыЗаданий = "ДанныеКФормированиюДвижений";
	ПараметрыПроцедуры.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ПараметрыПроцедуры.Организация = ПараметрыОбработчика.ПараметрыРасчета.МассивОрганизаций;
	ПараметрыПроцедуры.ЭтапРасчета = ПараметрыОбработчика.ДанныеЭтапа.Код;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета
	|ПОМЕСТИТЬ ДанныеКФормированиюДвижений
	|ИЗ
	|	&ДанныеКРасчету КАК ДанныеКРасчету";

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ДанныеКРасчету", ДанныеКРасчету);
	Запрос.МенеджерВременныхТаблиц = ПараметрыПроцедуры.МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
	ОтложенноеФормированиеДвижений(ПараметрыПроцедуры, Неопределено, Отказ);
	
КонецПроцедуры

Функция ИмяСлужебногоДополнительногоСвойстваОбъекта() Экспорт

	Возврат "РасчетСтоимостиВнеоборотныхАктивов";

КонецФункции

Функция ПолучитьРаспределениеСтоимости(Стоимость, СуммаОстаток, МассивКоэффициентовСумма)
	
	Если Стоимость < СуммаОстаток Тогда
		РаспределениеСумма = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
									Стоимость, 
									МассивКоэффициентовСумма);
	Иначе
		РаспределениеСумма = МассивКоэффициентовСумма;
	КонецЕсли;
	
	Возврат РаспределениеСумма;
	
КонецФункции

Процедура УчестьОтражениеВУчетеПриРасчетеСтоимости(ДанныеСтроки, СтрокаДокумента, ПараметрыРасчета)

	Если НЕ СтрокаДокумента.ОтражатьВУпрУчете Тогда
		ДанныеСтроки.Сумма = 0;
		ДанныеСтроки.СуммаБезНДС = 0;
		ДанныеСтроки.СуммаУпр = 0;
	КонецЕсли;
	
	Если НЕ СтрокаДокумента.ОтражатьВБУ
		И НЕ СтрокаДокумента.ОтражатьВНУ
		И ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
								
		ДанныеСтроки.СуммаРегл = 0;
		ДанныеСтроки.ПостояннаяРазница = 0;
		ДанныеСтроки.ВременнаяРазница  = 0;
		
	ИначеЕсли СтрокаДокумента.ОтражатьВБУ
		И НЕ СтрокаДокумента.ОтражатьВНУ
		И ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
								
		ДанныеСтроки.ВременнаяРазница = ДанныеСтроки.СуммаРегл - ДанныеСтроки.ПостояннаяРазница;
		
	ИначеЕсли НЕ СтрокаДокумента.ОтражатьВБУ
		И СтрокаДокумента.ОтражатьВНУ
		И ПараметрыРасчета.ВедетсяРегламентированныйУчетВНА Тогда
								
		ДанныеСтроки.ВременнаяРазница = -(ДанныеСтроки.СуммаРегл - ДанныеСтроки.ВременнаяРазница - ДанныеСтроки.ПостояннаяРазница);
		ДанныеСтроки.СуммаРегл = 0;
		ДанныеСтроки.ПостояннаяРазница = 0;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенноеФормированиеДвижений

// Выполняет формирование движений по учету ОС и НМА при закрытии месяца.
// 
// Параметры:
// 	ПараметрыВыполнения - см. ПараметрыОтложенногоФормированияДвижений
// 	МассивСсылок - Массив, Неопределено - Документы, для которых надо сформировать движения.
// 	Отказ - Булево - Истина, если были ошибки.
// Возвращаемое значение:
// 	Число - Количество обработанных данных.
Функция ОтложенноеФормированиеДвижений(ПараметрыВыполнения, МассивСсылок, Отказ = Ложь)

	УстановитьПривилегированныйРежим(Истина);
	
	Месяц = ПараметрыВыполнения.Месяц;
	МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	
	ТекстыЗапроса = Новый Массив;
	ТекстыЗапросаОтложенногоФормированияДвижений(ТекстыЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_КэшГраниц", ПараметрыВыполнения.ИмяТаблицыЗаданий);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(Месяц));
	Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", НачалоМесяца(Месяц)-1);
	Запрос.УстановитьПараметр("МассивСсылок", ?(МассивСсылок <> Неопределено, МассивСсылок, Новый Массив));
	Запрос.УстановитьПараметр("ОтборПоДокументам", ?(МассивСсылок <> Неопределено, Истина, Ложь));
	УстановитьПараметрыЗапросаСодержащегоТекстыЗапросаОтложенногоФормированияДвижений(Запрос);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	КоличествоДанных = Выборка.Количество();
	ПредыдущийРегистратор = Неопределено;
	
	ИспользуемыеВТ = "КэшГраниц,ДанныеКРасчету,ВТ_СтоимостьВНА,ВТ_АмортизацияВНА,ВТ_ОбесценениеВНА,ВТ_РасчетыПоФинансовымИнструментам,НачислениеИзноса";
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
		
		ОбновитьТаблицыОтложенногоФормированияДвижений(ПредыдущийРегистратор, МенеджерВременныхТаблиц);
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Выборка.Ссылка);
		
		НачатьТранзакцию();
		Попытка
			
			ТаблицыДляДвижений = МенеджерОбъекта.ТаблицыОтложенногоФормированияДвижений(Выборка.Ссылка, МенеджерВременныхТаблиц);
			
			ДокументОбъект = ПроведениеДокументов.ЭмуляцияДокумента(Выборка.Ссылка, Выборка.Дата);
			
			УстановитьПризнакВыполненияОтложенногоФормированияДвижений(ДокументОбъект);
			 
			ВнеоборотныеАктивыСлужебный.ЗаписатьТаблицыДвижений(ТаблицыДляДвижений, ДокументОбъект, МенеджерВременныхТаблиц);

			ВнеоборотныеАктивыСлужебный.ОбновитьДвиженияАктивовПассивов(Выборка.Ссылка);
			
			Если ПараметрыВыполнения.СформироватьЗадания Тогда
				ПроведениеДокументов.СформироватьЗаданияНаОтложенныеДвижения(ДокументОбъект, МенеджерВременныхТаблиц);
			КонецЕсли;
			
			Если ПараметрыВыполнения.ВернутьДокументыКОтражению Тогда
				ВнеоборотныеАктивыСлужебный.ВернутьДокументыКОтражению(
					Выборка.Ссылка, Выборка.Организация, Выборка.Дата, ТаблицыДляДвижений);
			КонецЕсли;
						
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = НСтр("ru = 'Не удалось сформировать движения по документу %1, по причине:
                                |%2';
                                |en = 'Cannot generate register records for document %1. Reason:
                                |%2'");
			
			ТекстОшибки = СтрШаблон(ТекстОшибки, 
				Строка(Выборка.Ссылка),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ВызватьИсключение ТекстОшибки;
			
		КонецПопытки;
		
		ПредыдущийРегистратор = Выборка.Ссылка;
		
	КонецЦикла;
	
	ПроверитьОтложенноеФормированиеДвижений(ПараметрыВыполнения, Отказ);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(
		МенеджерВременныхТаблиц, "ДанныеКРасчету,ВТ_СтоимостьВНА,ВТ_АмортизацияВНА,ВТ_ОбесценениеВНА,ВТ_РасчетыПоФинансовымИнструментам,НачислениеИзноса");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат КоличествоДанных;
	
КонецФункции

Процедура ПроверитьОтложенноеФормированиеДвижений(ПараметрыВыполнения, Отказ)

	Если НЕ ЗначениеЗаполнено(ПараметрыВыполнения.ЭтапРасчета) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ПараметрыВыполнения.МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = ПараметрыВыполнения.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НачалоМесяца", НачалоМесяца(ПараметрыВыполнения.Месяц));
	Запрос.УстановитьПараметр("КонецМесяца", КонецМесяца(ПараметрыВыполнения.Месяц));
	
	#Область НеУказанаСтатьяРасходовВРеализации
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ТаблицаРасходы.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ЕСТЬNULL(ТаблицаРасходы.НомерСтроки, 0) КАК НомерСтроки
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|		ПО (ТаблицаРасходы.Ссылка = ДанныеКРасчету.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьВНА
	|		ПО (СтоимостьВНА.Ссылка = ТаблицаРасходы.Ссылка)
	|			И (СтоимостьВНА.ОбъектУчета = ТаблицаРасходы.ВнеоборотныйАктив)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|	И ТаблицаРасходы.СтатьяРасходов = ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка)
	|	И НЕ СтоимостьВНА.Ссылка ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОписаниеПроблемы = НСтр("ru = 'В документе Реализация услуг и прочих активов №%1 от %2 для внеоборотного актива %3 необходимо указать статью расходов, на которую будет списана стоимость.';
								|en = 'Specify an expense item to which the cost will be written off in the ""Customer invoice — Services and Assets"" document No. %1 dated %2 for the %3 fixed asset.'");
		ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
									Выборка.НомерДокумента, 
									Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
									Выборка.ВнеоборотныйАктив);
		
		ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыВыполнения.ЭтапРасчета, 
			ПараметрыВыполнения.Месяц,
			Выборка.Организация,
			ОписаниеПроблемы,,
			Выборка.Ссылка, 
			Отказ);
				
	КонецЦикла; 
	
	#КонецОбласти
	
	#Область СтоимостьНовыхОСПревышаетСтоимостьИсходного
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_РазукомплектацияОС
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РазукомплектацияОС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ПараметрыАмортизацииОСУУ.Период) КАК Период
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСУУ_Период
	|ИЗ
	|	ВТ_РазукомплектацияОС КАК ДанныеКРасчету
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = ТаблицаДокумента.ОсновноеСредство
	|			И ПараметрыАмортизацииОСУУ.Организация = ТаблицаДокумента.Организация
	|			И ПараметрыАмортизацииОСУУ.Период < ТаблицаДокумента.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПараметрыАмортизацииОСУУ_Период.Ссылка КАК Ссылка,
	|	ПараметрыАмортизацииОСУУ_Период.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость
	|ПОМЕСТИТЬ ПараметрыАмортизацииОСУУ
	|ИЗ
	|	ПараметрыАмортизацииОСУУ_Период КАК ПараметрыАмортизацииОСУУ_Период
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО ПараметрыАмортизацииОСУУ.ОсновноеСредство = ПараметрыАмортизацииОСУУ_Период.ОсновноеСредство
	|			И ПараметрыАмортизацииОСУУ.Организация = ПараметрыАмортизацииОСУУ_Период.Организация
	|			И ПараметрыАмортизацииОСУУ.Период = ПараметрыАмортизацииОСУУ_Период.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.Ссылка КАК Ссылка,
	|	ТаблицаДокумента.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ТаблицаДокумента.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	СУММА(ТаблицаОС.СтоимостьУУ) КАК ОбщаяСтоимостьУУ,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.Стоимость, 0)) - МАКСИМУМ(ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0)) КАК ИсходнаяСтоимостьУУ,
	|	СУММА(ТаблицаОС.СтоимостьБУ) КАК ОбщаяСтоимостьБУ,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьЦФ, 0)) КАК ИсходнаяСтоимостьБУ,
	|	СУММА(ТаблицаОС.СтоимостьНУ) КАК ОбщаяСтоимостьНУ,
	|	МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУ, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУЦФ, 0)) КАК ИсходнаяСтоимостьНУ
	|ИЗ
	|	ВТ_РазукомплектацияОС КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС.ОС КАК ТаблицаОС
	|		ПО (ТаблицаОС.Ссылка = ТаблицаДокумента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК ВТ_СтоимостьВНА
	|		ПО (ВТ_СтоимостьВНА.ОбъектУчета = ТаблицаДокумента.ОсновноеСредство)
	|			И (ВТ_СтоимостьВНА.Ссылка = ТаблицаДокумента.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПараметрыАмортизацииОСУУ КАК ПараметрыАмортизацииОСУУ
	|		ПО (ПараметрыАмортизацииОСУУ.ОсновноеСредство = ТаблицаДокумента.ОсновноеСредство)
	|			И (ПараметрыАмортизацииОСУУ.Ссылка = ТаблицаДокумента.Ссылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.ХозяйственнаяОперация,
	|	ТаблицаДокумента.Организация,
	|	ТаблицаДокумента.Номер,
	|	ТаблицаДокумента.Дата
	|
	|ИМЕЮЩИЕ
	|	ТаблицаДокумента.ХозяйственнаяОперация В(ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазукомплектацияОСЧастичная), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации))
	|		И (СУММА(ТаблицаОС.СтоимостьУУ) >= (МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.Стоимость, 0)) - МАКСИМУМ(ЕСТЬNULL(ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость, 0)))
	|			ИЛИ СУММА(ТаблицаОС.СтоимостьБУ) >= МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьЦФ, 0))
	|			ИЛИ СУММА(ТаблицаОС.СтоимостьНУ) >= МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУ, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУЦФ, 0)))
	|
	|	ИЛИ ТаблицаДокумента.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РазукомплектацияОСПолная)
	|		И (СУММА(ТаблицаОС.СтоимостьУУ) <> МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.Стоимость, 0))
	|			ИЛИ СУММА(ТаблицаОС.СтоимостьБУ) <> МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьЦФ, 0))
	|			ИЛИ СУММА(ТаблицаОС.СтоимостьНУ) <> МАКСИМУМ(ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУ, 0) + ЕСТЬNULL(ВТ_СтоимостьВНА.СтоимостьНУЦФ, 0)))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РазукомплектацияОС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыАмортизацииОСУУ_Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПараметрыАмортизацииОСУУ
	|";
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ВалютаУпр = Строка(Константы.ВалютаУправленческогоУчета.Получить());
	
	Пока Выборка.Следующий() Цикл
		
		#Область УУ
		Если (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСЧастичная
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации)
			И Выборка.ОбщаяСтоимостьУУ >= Выборка.ИсходнаяСтоимостьУУ
			И Выборка.ОбщаяСтоимостьУУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в управленческом учете (%3 %4) должна быть меньше стоимости исходного ОС (%5 %6).';
									|en = 'In ""Split fixed assets"" document No.%1 dated %2, the total value of recognized fixed assets in management accounting (%3 %4) must be less than the original fixed asset value (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьУУ,
										ВалютаУпр,
										Выборка.ИсходнаяСтоимостьУУ,
										ВалютаУпр);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
				
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСПолная
			И Выборка.ОбщаяСтоимостьУУ <> Выборка.ИсходнаяСтоимостьУУ
			И Выборка.ОбщаяСтоимостьУУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в управленческом учете (%3 %4) должна равняться стоимости исходного ОС (%5 %6).';
									|en = 'In ""Split fixed assets"" document No.%1 dated %2, the total value of recognized fixed assets in management accounting (%3 %4) must be equal to the original fixed asset value (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьУУ,
										ВалютаУпр,
										Выборка.ИсходнаяСтоимостьУУ,
										ВалютаУпр);
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
		#КонецОбласти
				
		#Область БУ
		Если (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСЧастичная
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации)
			И Выборка.ОбщаяСтоимостьБУ >= Выборка.ИсходнаяСтоимостьБУ
			И Выборка.ОбщаяСтоимостьБУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в бухгалтерском учете (%3 %4) должна быть меньше стоимости исходного ОС (%5 %6).';
									|en = 'In ""Split fixed assets"" document No. %1 dated %2, the total cost of recognized fixed assets in accounting (%3 %4) must be less than the original fixed assets cost (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьБУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация),
										Выборка.ИсходнаяСтоимостьБУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация));
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
				
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСПолная
			И Выборка.ОбщаяСтоимостьБУ <> Выборка.ИсходнаяСтоимостьБУ
			И Выборка.ОбщаяСтоимостьБУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в бухгалтерском учете (%3 %4) должна равняться стоимости исходного ОС (%5 %6).';
									|en = 'In ""Split fixed assets"" document No. %1 dated %2, the total cost of recognized fixed assets in accounting (%3 %4) must be equal to the original fixed assets cost (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьБУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация),
										Выборка.ИсходнаяСтоимостьБУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация));
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
		#КонецОбласти
		
		#Область НУ
		Если (Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСЧастичная
			Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации)
			И Выборка.ОбщаяСтоимостьНУ >= Выборка.ИсходнаяСтоимостьНУ
			И Выборка.ОбщаяСтоимостьНУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в налоговом учете (%3 %4) должна быть меньше стоимости исходного ОС (%5 %6).';
									|en = 'In ""Split fixed assets"" document No.%1 dated %2, the total value of recognized fixed assets in tax accounting (%3 %4) must be less than the original fixed asset value (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьНУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация),
										Выборка.ИсходнаяСтоимостьНУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация));
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
				
		Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазукомплектацияОСПолная
			И Выборка.ОбщаяСтоимостьНУ <> Выборка.ИсходнаяСтоимостьНУ
			И Выборка.ОбщаяСтоимостьНУ <> 0 Тогда
			
			ОписаниеПроблемы = НСтр("ru = 'В документе Разукомплектация ОС №%1 от %2 общая стоимость, принимаемых к учету ОС в налоговом учете (%3 %4) должна равняться стоимости исходного ОС (%5 %6).';
									|en = 'In ""Split fixed assets"" document No.%1 dated %2, the total value of recognized fixed assets in tax accounting (%3 %4) must be equal to the original fixed asset value (%5 %6).'");
			
			ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
										Выборка.НомерДокумента, 
										Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
										Выборка.ОбщаяСтоимостьНУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация),
										Выборка.ИсходнаяСтоимостьНУ,
										ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Выборка.Организация));
			
			ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
				ПараметрыВыполнения.ЭтапРасчета, 
				ПараметрыВыполнения.Месяц,
				Выборка.Организация,
				ОписаниеПроблемы,,
				Выборка.Ссылка, 
				Отказ);
			
		КонецЕсли; 
		#КонецОбласти
				
	КонецЦикла; 
	
	#КонецОбласти
	
	#Область РеализацияДоПодготовкиКПередаче
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаРасходы.ВнеоборотныйАктив
	|ПОМЕСТИТЬ ТаблицаВНА
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|ГДЕ
	|	ТаблицаРасходы.Ссылка В (
	|		ВЫБРАТЬ
	|			ДанныеКРасчету.Ссылка
	|		ИЗ
	|			ДанныеКРасчету КАК ДанныеКРасчету
	|		ГДЕ
	|			ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Организация КАК Организация,
	|	ПервоначальныеСведения.ОсновноеСредство КАК ВнеоборотныйАктив,
	|	ЕСТЬNULL(ПодготовкаКПередаче.Дата, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСписания,
	|	ПервоначальныеСведения.ДатаВводаВЭксплуатациюУУ КАК ДатаВводаВЭксплуатацию
	|
	|ПОМЕСТИТЬ ПервоначальныеСведения
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|		&КонецМесяца,
	|		ОсновноеСредство В (
	|			ВЫБРАТЬ
	|				ТаблицаВНА.ВнеоборотныйАктив
	|			ИЗ
	|				ТаблицаВНА КАК ТаблицаВНА)) КАК ПервоначальныеСведения
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодготовкаКПередачеОС2_4 КАК ПодготовкаКПередаче
	|		ПО (ПодготовкаКПередаче.Ссылка = ПервоначальныеСведения.ДокументСнятияСУчетаУУ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведения.Организация КАК Организация,
	|	ПервоначальныеСведения.НематериальныйАктив КАК ВнеоборотныйАктив,
	|	ЕСТЬNULL(ПодготовкаКПередаче.Дата, ДАТАВРЕМЯ(1,1,1)) КАК ДатаСписания,
	|	ПервоначальныеСведения.ДатаПринятияКУчетуУУ КАК ДатаВводаВЭксплуатацию
	|
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|		&КонецМесяца,
	|		НематериальныйАктив В (
	|			ВЫБРАТЬ
	|				ТаблицаВНА.ВнеоборотныйАктив
	|			ИЗ
	|				ТаблицаВНА КАК ТаблицаВНА)) КАК ПервоначальныеСведения
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПодготовкаКПередачеНМА2_4 КАК ПодготовкаКПередаче
	|		ПО (ПодготовкаКПередаче.Ссылка = ПервоначальныеСведения.ДокументСписания)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	ВнеоборотныйАктив
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ТаблицаДокумента.Номер КАК НомерДокумента,
	|	ТаблицаДокумента.Дата КАК ДатаДокумента,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ТаблицаРасходы.ВнеоборотныйАктив КАК ВнеоборотныйАктив,
	|	ЕСТЬNULL(ТаблицаРасходы.НомерСтроки, 0) КАК НомерСтроки
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов КАК ТаблицаДокумента
	|		ПО (ТаблицаДокумента.Ссылка = ДанныеКРасчету.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Расходы КАК ТаблицаРасходы
	|		ПО (ТаблицаРасходы.Ссылка = ДанныеКРасчету.Ссылка)
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПервоначальныеСведения КАК ПервоначальныеСведения
	|		ПО (ПервоначальныеСведения.ВнеоборотныйАктив = ТаблицаРасходы.ВнеоборотныйАктив)
	|			И (ПервоначальныеСведения.Организация = ТаблицаДокумента.Организация)
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|	И ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатацию, ДАТАВРЕМЯ(1,1,1)) <> ДАТАВРЕМЯ(1,1,1)
	|	И (ЕСТЬNULL(ПервоначальныеСведения.ДатаСписания, ДАТАВРЕМЯ(1,1,1)) = ДАТАВРЕМЯ(1,1,1)
	|			ИЛИ ЕСТЬNULL(НАЧАЛОПЕРИОДА(ПервоначальныеСведения.ДатаСписания, ДЕНЬ), ДАТАВРЕМЯ(1,1,1)) > НАЧАЛОПЕРИОДА(ТаблицаДокумента.Дата, ДЕНЬ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	НомерСтроки";
	
	РегламентированныйУчетВНА = ВнеоборотныеАктивыСлужебный.ВедетсяРегламентированныйУчетВНА();
	
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если РегламентированныйУчетВНА Тогда
			ОписаниеПроблемы = НСтр("ru = 'Реализация услуг и прочих активов №%1 от %2 для внеоборотного актива %3 оформлена раньше чем подготовка к передаче в упр. учете.';
									|en = 'Customer invoice — Services and Assets #%1 from %2 for fixed asset %3 is registered earlier than the preparation for transfer to man. accounting.'");
		Иначе
			ОписаниеПроблемы = НСтр("ru = 'Реализация услуг и прочих активов №%1 от %2 для внеоборотного актива %3 оформлена раньше чем подготовка к передаче.';
									|en = 'Customer invoice — Services and Assets #%1 from %2 for fixed asset %3 is registered earlier than preparations for the transfer.'");
		КонецЕсли;
		
		ОписаниеПроблемы = СтрШаблон(ОписаниеПроблемы, 
									Выборка.НомерДокумента, 
									Формат(Выборка.ДатаДокумента, "ДЛФ=D"), 
									Выборка.ВнеоборотныйАктив);
		
		ВнеоборотныеАктивыСлужебный.ЗарегистрироватьПроблемуВыполненияРасчета(
			ПараметрыВыполнения.ЭтапРасчета, 
			ПараметрыВыполнения.Месяц,
			Выборка.Организация,
			ОписаниеПроблемы,,
			Выборка.Ссылка, 
			Отказ);
				
	КонецЦикла; 
	#КонецОбласти
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
		
	ВнеоборотныеАктивыЛокализация.ПроверитьОтложенноеФормированиеДвижений(ПараметрыВыполнения, Отказ);
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ПараметрыВыполнения.МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
КонецПроцедуры

// Формирует параметры отложенного формирования движений.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//        * ВернутьДокументыКОтражению - Булево -
//        * ЭтапРасчета - Неопределено -
//        * Организация - Неопределено -
//        * ИмяТаблицыЗаданий - Строка -
//        * МенеджерВременныхТаблиц - МенеджерВременныхТаблиц -
//        * Месяц - Дата -
Функция ПараметрыОтложенногоФормированияДвижений()

	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Месяц", Неопределено);
	ПараметрыРасчета.Вставить("МенеджерВременныхТаблиц", Неопределено);
	ПараметрыРасчета.Вставить("ИмяТаблицыЗаданий", "КэшГраниц");
	ПараметрыРасчета.Вставить("Организация", Неопределено);
	ПараметрыРасчета.Вставить("ЭтапРасчета", Неопределено);
	ПараметрыРасчета.Вставить("ВернутьДокументыКОтражению", Истина);
	ПараметрыРасчета.Вставить("СформироватьЗадания", Истина);
	
	Возврат ПараметрыРасчета;
	
КонецФункции

Процедура ТекстыЗапросаОтложенногоФормированияДвижений(ТекстыЗапроса)

	#Область ДанныеКРасчету
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент,
	|	КэшГраниц.Организация КАК Организация
	|ПОМЕСТИТЬ УзлыОсновныхСредств
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КэшГраниц КАК КэшГраниц
	|		ПО УзлыКомпоненты.ОсновноеСредство = КэшГраниц.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УзелКомпонент,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ) КАК ДатаДень,
	|	ДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.РеализацияУслугПрочихАктивов)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.СписаниеОС2_4)
	|				ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) = ТИП(Документ.СписаниеНМА2_4)
	|			ТОГДА 999999
	|		ИНАЧЕ ЧАС(ДанныеКРасчету.Дата)*10000 + МИНУТА(ДанныеКРасчету.Дата)*100 + СЕКУНДА(ДанныеКРасчету.Дата)
	|	КОНЕЦ КАК Приоритет
	|
	|ПОМЕСТИТЬ ДанныеКРасчету_Предварительная
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДокументыПоОС.Ссылка КАК Ссылка,
	|		ДокументыПоОС.Дата КАК Дата,
	|		ДокументыПоОС.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|		ДокументыПоОС.Организация КАК Организация,
	|		ДокументыПоОС.ОсновноеСредство КАК ОбъектУчета
	|	ИЗ
	|		РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|	ГДЕ
	|		НЕ ДокументыПоОС.ДополнительнаяЗапись
	|		И ДокументыПоОС.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоОС.Ссылка КАК Ссылка
	|				ИЗ
	|					РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|				ГДЕ
	|					ДокументыПоОС.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ДокументыПоОС.Проведен
	|					И НЕ ДокументыПоОС.ДополнительнаяЗапись
	|					И ДокументыПоОС.ТипСсылки В (&ТипыДокументов)
	|					И (ДокументыПоОС.Ссылка В (&МассивСсылок)
	|						ИЛИ НЕ &ОтборПоДокументам)
	|					И (ДокументыПоОС.Организация, ДокументыПоОС.ОсновноеСредство) В
	|						(ВЫБРАТЬ
	|							КэшГраниц.Организация,
	|							КэшГраниц.ОбъектУчета
	|						ИЗ
	|							ВТ_КэшГраниц КАК КэшГраниц
	|						
	|						ОБЪЕДИНИТЬ ВСЕ
	|						
	|						ВЫБРАТЬ
	|							УзлыОсновныхСредств.Организация,
	|							УзлыОсновныхСредств.УзелКомпонент
	|						ИЗ
	|							УзлыОсновныхСредств КАК УзлыОсновныхСредств))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДокументыПоНМА.Ссылка,
	|		ДокументыПоНМА.Дата,
	|		ДокументыПоНМА.ХозяйственнаяОперация,
	|		ДокументыПоНМА.Организация,
	|		ДокументыПоНМА.НематериальныйАктив
	|	ИЗ
	|		РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|	ГДЕ
	|		НЕ ДокументыПоНМА.ДополнительнаяЗапись
	|		И ДокументыПоНМА.Ссылка В
	|				(ВЫБРАТЬ
	|					ДокументыПоНМА.Ссылка
	|				ИЗ
	|					РегистрСведений.ДокументыПоНМА КАК ДокументыПоНМА
	|				ГДЕ
	|					ДокументыПоНМА.Дата МЕЖДУ &НачалоМесяца И &КонецМесяца
	|					И ДокументыПоНМА.Проведен
	|					И НЕ ДокументыПоНМА.ДополнительнаяЗапись
	|					И ДокументыПоНМА.ТипСсылки В (&ТипыДокументов)
	|					И (ДокументыПоНМА.Ссылка В (&МассивСсылок)
	|						ИЛИ НЕ &ОтборПоДокументам)
	|					И (ДокументыПоНМА.Организация, ДокументыПоНМА.НематериальныйАктив) В
	|						(ВЫБРАТЬ
	|							КэшГраниц.Организация,
	|							КэшГраниц.ОбъектУчета
	|						ИЗ
	|							ВТ_КэшГраниц КАК КэшГраниц))) КАК ДанныеКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	МАКСИМУМ(УзлыКомпонентыАмортизации.Период) КАК Период,
	|	УзлыКомпонентыАмортизации.УзелКомпонент КАК УзелКомпонент
	|ПОМЕСТИТЬ МаксимумыУзловКомпонентов
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УзлыОсновныхСредств КАК УзлыОсновныхСредств
	|		ПО УзлыКомпонентыАмортизации.УзелКомпонент = УзлыОсновныхСредств.УзелКомпонент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеКРасчету_Предварительная КАК ДанныеКРасчету
	|		ПО УзлыКомпонентыАмортизации.Период <= ДанныеКРасчету.Дата
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	УзлыКомпонентыАмортизации.УзелКомпонент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	УзелКомпонент
	|;
	|
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УзлыОсновныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.ДатаДень КАК ДатаДень,
	|	ДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ ДанныеКРасчету
	|ИЗ
	|	ДанныеКРасчету_Предварительная КАК ДанныеКРасчету
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.ДатаДень КАК ДатаДень,
	|	ДанныеКРасчету.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	УзлыКомпонентыАмортизации.УзелКомпонент  КАК ОбъектУчета,
	|	ДанныеКРасчету.Приоритет КАК Приоритет
	|ИЗ
	|	ДанныеКРасчету_Предварительная КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимумыУзловКомпонентов КАК МаксимумыУзловКомпонентов
	|		ПО ДанныеКРасчету.Ссылка = МаксимумыУзловКомпонентов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|		ПО МаксимумыУзловКомпонентов.Период = УзлыКомпонентыАмортизации.Период
	|		И МаксимумыУзловКомпонентов.УзелКомпонент = УзлыКомпонентыАмортизации.УзелКомпонент
	|		И ДанныеКРасчету.ОбъектУчета = УзлыКомпонентыАмортизации.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДанныеКРасчету_Предварительная
	|;
	|
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаксимумыУзловКомпонентов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область НачислениеИзноса
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаНачислениеИзноса();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОбъектУчета
		|ПОМЕСТИТЬ НачислениеИзноса
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОбъектУчета";
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ЗабалансовыйУчет
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОбъектУчета
	|ПОМЕСТИТЬ ЗабалансовыйУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета";
	
	//++ Локализация
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОСБУ.ОсновноеСредство КАК ОбъектУчета
	|ПОМЕСТИТЬ ЗабалансовыйУчет
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|			&НачалоМесяца,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК ПорядокУчетаОСБУ
	|ГДЕ
	|	ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПорядокУчетаОСБУ.ОсновноеСредство
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ КАК ПорядокУчетаОСБУ
	|		ПО (ПорядокУчетаОСБУ.Организация = ДанныеКРасчету.Организация)
	|			И (ПорядокУчетаОСБУ.ОсновноеСредство = ДанныеКРасчету.ОбъектУчета)
	|			И (ПорядокУчетаОСБУ.Период <= ДанныеКРасчету.Дата)
	|			И (ПорядокУчетаОСБУ.Период >= &НачалоМесяца)
	|			И (ПорядокУчетаОСБУ.СостояниеБУ = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету))
	|			И (ПорядокУчетаОСБУ.Активность)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета";
	//-- Локализация
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область УчетнаяПолитика
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаУчетнаяПолитикаДляОтложенногоФормированияДвижений();
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 0
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	НЕОПРЕДЕЛЕНО КАК ПорядокНачисленияАмортизацииБУ
		|ПОМЕСТИТЬ УчетнаяПолитика";
	КонецЕсли;
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ВТ_СтоимостьВНА
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СтоимостьОСОстатки.Организация КАК Организация,
	|	СтоимостьОСОстатки.ОсновноеСредство КАК ОбъектУчета,
	|	СтоимостьОСОстатки.СтоимостьОстаток КАК Стоимость,
	|	СтоимостьОСОстатки.СтоимостьРеглОстаток КАК СтоимостьРегл,
	|	СтоимостьОСОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	СтоимостьОСОстатки.СтоимостьПРОстаток КАК СтоимостьПР,
	|	СтоимостьОСОстатки.СтоимостьВРОстаток КАК СтоимостьВР,
	|	СтоимостьОСОстатки.СтоимостьЦФОстаток КАК СтоимостьЦФ,
	|	СтоимостьОСОстатки.СтоимостьНУЦФОстаток КАК СтоимостьНУЦФ,
	|	СтоимостьОСОстатки.СтоимостьПРЦФОстаток КАК СтоимостьПРЦФ,
	|	СтоимостьОСОстатки.СтоимостьВРЦФОстаток КАК СтоимостьВРЦФ,
	|	СтоимостьОСОстатки.НеУчитываемаяСтоимостьНУОстаток КАК НеУчитываемаяСтоимостьНУ,
	|	СтоимостьОСОстатки.АмортизационнаяПремияОстаток КАК АмортизационнаяПремия,
	|	СтоимостьОСОстатки.ЗалоговаяСтоимостьОстаток КАК ЗалоговаяСтоимость,
	|	СтоимостьОСОстатки.ПредварительнаяСтоимостьОстаток КАК ПредварительнаяСтоимость,
	|	СтоимостьОСОстатки.ПредварительнаяСтоимостьРеглОстаток КАК ПредварительнаяСтоимостьРегл,
	|	СтоимостьОСОстатки.РезервПереоценкиСтоимостиОстаток КАК РезервПереоценкиСтоимости,
	|	СтоимостьОСОстатки.РезервПереоценкиСтоимостиРеглОстаток КАК РезервПереоценкиСтоимостиРегл,
	|	-СтоимостьОСОстатки.ПриростСтоимостиОстаток КАК ПриростСтоимости,
	|	-СтоимостьОСОстатки.ПриростСтоимостиРеглОстаток КАК ПриростСтоимостиРегл
	|ПОМЕСТИТЬ СтоимостьВНА_Остатки
	|ИЗ
	|	РегистрНакопления.СтоимостьОС.Остатки(
	|			&НачалоМесяца,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК СтоимостьОСОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтоимостьНМАОстатки.Организация КАК Организация,
	|	СтоимостьНМАОстатки.НематериальныйАктив КАК ОбъектУчета,
	|	СтоимостьНМАОстатки.СтоимостьОстаток КАК Стоимость,
	|	СтоимостьНМАОстатки.СтоимостьРеглОстаток КАК СтоимостьРегл,
	|	СтоимостьНМАОстатки.СтоимостьНУОстаток КАК СтоимостьНУ,
	|	СтоимостьНМАОстатки.СтоимостьПРОстаток КАК СтоимостьПР,
	|	СтоимостьНМАОстатки.СтоимостьВРОстаток КАК СтоимостьВР,
	|	СтоимостьНМАОстатки.СтоимостьЦФОстаток КАК СтоимостьЦФ,
	|	СтоимостьНМАОстатки.СтоимостьНУЦФОстаток КАК СтоимостьНУЦФ,
	|	СтоимостьНМАОстатки.СтоимостьПРЦФОстаток КАК СтоимостьПРЦФ,
	|	СтоимостьНМАОстатки.СтоимостьВРЦФОстаток КАК СтоимостьВРЦФ,
	|	0 КАК НеУчитываемаяСтоимостьНУ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	СтоимостьНМАОстатки.ПредварительнаяСтоимостьОстаток КАК ПредварительнаяСтоимость,
	|	СтоимостьНМАОстатки.ПредварительнаяСтоимостьРеглОстаток КАК ПредварительнаяСтоимостьРегл,
	|	СтоимостьНМАОстатки.РезервПереоценкиСтоимостиОстаток КАК РезервПереоценкиСтоимости,
	|	СтоимостьНМАОстатки.РезервПереоценкиСтоимостиРеглОстаток КАК РезервПереоценкиСтоимостиРегл,
	|	-СтоимостьНМАОстатки.ПриростСтоимостиОстаток КАК ПриростСтоимости,
	|	-СтоимостьНМАОстатки.ПриростСтоимостиРеглОстаток КАК ПриростСтоимостиРегл
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА.Остатки(
	|			&НачалоМесяца,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК СтоимостьНМАОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтоимостьОС.Период КАК Период,
	|	СтоимостьОС.Регистратор КАК Регистратор,
	|	СтоимостьОС.Организация КАК Организация,
	|	СтоимостьОС.ОсновноеСредство КАК ОбъектУчета,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.Стоимость
	|		ИНАЧЕ -СтоимостьОС.Стоимость
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьРегл
	|		ИНАЧЕ -СтоимостьОС.СтоимостьРегл
	|	КОНЕЦ КАК СтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьНУ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьПР
	|		ИНАЧЕ -СтоимостьОС.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьВР
	|		ИНАЧЕ -СтоимостьОС.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьЦФ
	|	КОНЕЦ КАК СтоимостьЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьНУЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьНУЦФ
	|	КОНЕЦ КАК СтоимостьНУЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьПРЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьПРЦФ
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.СтоимостьВРЦФ
	|		ИНАЧЕ -СтоимостьОС.СтоимостьВРЦФ
	|	КОНЕЦ КАК СтоимостьВРЦФ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.НеУчитываемаяСтоимостьНУ
	|		ИНАЧЕ -СтоимостьОС.НеУчитываемаяСтоимостьНУ
	|	КОНЕЦ КАК НеУчитываемаяСтоимостьНУ,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.АмортизационнаяПремия
	|		ИНАЧЕ -СтоимостьОС.АмортизационнаяПремия
	|	КОНЕЦ КАК АмортизационнаяПремия,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.ЗалоговаяСтоимость
	|		ИНАЧЕ -СтоимостьОС.ЗалоговаяСтоимость
	|	КОНЕЦ КАК ЗалоговаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.ПредварительнаяСтоимость
	|		ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимость
	|	КОНЕЦ КАК ПредварительнаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.ПредварительнаяСтоимостьРегл
	|		ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимостьРегл
	|	КОНЕЦ КАК ПредварительнаяСтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимости
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА -СтоимостьОС.ПриростСтоимости
	|		ИНАЧЕ СтоимостьОС.ПриростСтоимости
	|	КОНЕЦ КАК ПриростСтоимости,
	|	ВЫБОР КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА -СтоимостьОС.ПриростСтоимостиРегл
	|		ИНАЧЕ СтоимостьОС.ПриростСтоимостиРегл
	|	КОНЕЦ КАК ПриростСтоимостиРегл
	|ПОМЕСТИТЬ СтоимостьВНА_Движения
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|ГДЕ
	|	СтоимостьОС.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И СтоимостьОС.Активность
	|	И (СтоимостьОС.Организация, СтоимостьОС.ОсновноеСредство) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|	И (ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовКоторыеМогутИзменитьСтоимость)
	|		ИЛИ ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|				И НЕ СтоимостьОС.Регистратор В 
	|					(ВЫБРАТЬ
	|						ДанныеКРасчету.Ссылка
	|					ИЗ
	|						ДанныеКРасчету КАК ДанныеКРасчету))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СтоимостьНМА.Период КАК Период,
	|	СтоимостьНМА.Регистратор КАК Регистратор,
	|	СтоимостьНМА.Организация КАК Организация,
	|	СтоимостьНМА.НематериальныйАктив КАК ОбъектУчета,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.Стоимость
	|		ИНАЧЕ -СтоимостьНМА.Стоимость
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьРегл
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьРегл
	|	КОНЕЦ КАК СтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьНУ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьНУ
	|	КОНЕЦ КАК СтоимостьНУ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьПР
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьПР
	|	КОНЕЦ КАК СтоимостьПР,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьВР
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьВР
	|	КОНЕЦ КАК СтоимостьВР,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьЦФ
	|	КОНЕЦ КАК СтоимостьЦФ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьНУЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьНУЦФ
	|	КОНЕЦ КАК СтоимостьНУЦФ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьПРЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьПРЦФ
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.СтоимостьВРЦФ
	|		ИНАЧЕ -СтоимостьНМА.СтоимостьВРЦФ
	|	КОНЕЦ КАК СтоимостьВРЦФ,
	|	0 КАК НеУчитываемаяСтоимостьНУ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.ПредварительнаяСтоимость
	|		ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимость
	|	КОНЕЦ КАК ПредварительнаяСтоимость,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|		ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|	КОНЕЦ КАК ПредварительнаяСтоимостьРегл,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.РезервПереоценкиСтоимости
	|		ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимости
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА -СтоимостьНМА.ПриростСтоимости
	|		ИНАЧЕ СтоимостьНМА.ПриростСтоимости
	|	КОНЕЦ КАК ПриростСтоимости,
	|	ВЫБОР КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА -СтоимостьНМА.ПриростСтоимостиРегл
	|		ИНАЧЕ СтоимостьНМА.ПриростСтоимостиРегл
	|	КОНЕЦ КАК ПриростСтоимостиРегл
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И СтоимостьНМА.Активность
	|	И ТИПЗНАЧЕНИЯ(СтоимостьНМА.Регистратор) В (&ТипыДокументовКоторыеМогутИзменитьСтоимость)
	|	И (СтоимостьНМА.Организация, СтоимостьНМА.НематериальныйАктив) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.ЗабалансовыйУчет КАК ЗабалансовыйУчет,
	|	СУММА(ДанныеКРасчету.Стоимость) КАК Стоимость,
	|	СУММА(ДанныеКРасчету.СтоимостьРегл) КАК СтоимостьРегл,
	|	СУММА(ДанныеКРасчету.СтоимостьНУ) КАК СтоимостьНУ,
	|	СУММА(ДанныеКРасчету.СтоимостьПР) КАК СтоимостьПР,
	|	СУММА(ДанныеКРасчету.СтоимостьВР) КАК СтоимостьВР,
	|	СУММА(ДанныеКРасчету.СтоимостьЦФ) КАК СтоимостьЦФ,
	|	СУММА(ДанныеКРасчету.СтоимостьНУЦФ) КАК СтоимостьНУЦФ,
	|	СУММА(ДанныеКРасчету.СтоимостьПРЦФ) КАК СтоимостьПРЦФ,
	|	СУММА(ДанныеКРасчету.СтоимостьВРЦФ) КАК СтоимостьВРЦФ,
	|	СУММА(ДанныеКРасчету.НеУчитываемаяСтоимостьНУ) КАК НеУчитываемаяСтоимостьНУ,
	|	СУММА(ДанныеКРасчету.АмортизационнаяПремия) КАК АмортизационнаяПремия,
	|	СУММА(ДанныеКРасчету.ЗалоговаяСтоимость) КАК ЗалоговаяСтоимость,
	|	СУММА(ДанныеКРасчету.ПредварительнаяСтоимость) КАК ПредварительнаяСтоимость,
	|	СУММА(ДанныеКРасчету.ПредварительнаяСтоимостьРегл) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиСтоимости) КАК РезервПереоценкиСтоимости,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиСтоимостиРегл) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(ДанныеКРасчету.ПриростСтоимости) КАК ПриростСтоимости,
	|	СУММА(ДанныеКРасчету.ПриростСтоимостиРегл) КАК ПриростСтоимостиРегл,
	|
	|	ВЫБОР КОГДА СУММА(ДанныеКРасчету.СтоимостьЦФ) = 0 ИЛИ (СУММА(ДанныеКРасчету.СтоимостьРегл) + СУММА(ДанныеКРасчету.СтоимостьЦФ)) = 0
	|		ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеКРасчету.СтоимостьЦФ) / (СУММА(ДанныеКРасчету.СтоимостьРегл) + СУММА(ДанныеКРасчету.СтоимостьЦФ))
	|	КОНЕЦ КАК ДоляЦФБУ,
	|	ВЫБОР КОГДА СУММА(ДанныеКРасчету.СтоимостьНУЦФ) = 0 ИЛИ (СУММА(ДанныеКРасчету.СтоимостьНУ) + СУММА(ДанныеКРасчету.СтоимостьНУЦФ)) = 0
	|		ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеКРасчету.СтоимостьНУЦФ) / (СУММА(ДанныеКРасчету.СтоимостьНУ) + СУММА(ДанныеКРасчету.СтоимостьНУЦФ))
	|	КОНЕЦ КАК ДоляЦФНУ,
	|	ВЫБОР КОГДА СУММА(ДанныеКРасчету.СтоимостьПРЦФ) = 0 ИЛИ (СУММА(ДанныеКРасчету.СтоимостьПР) + СУММА(ДанныеКРасчету.СтоимостьПРЦФ)) = 0
	|		ТОГДА 0
	|		ИНАЧЕ СУММА(ДанныеКРасчету.СтоимостьПРЦФ) / (СУММА(ДанныеКРасчету.СтоимостьПР) + СУММА(ДанныеКРасчету.СтоимостьПРЦФ))
	|	КОНЕЦ КАК ДоляЦФПР
	|
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		НЕ ЗабалансовыйУчет.ОбъектУчета ЕСТЬ NULL КАК ЗабалансовыйУчет,
	|		ЕСТЬNULL(СтоимостьОС.Стоимость, 0) КАК Стоимость,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) КАК СтоимостьРегл,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) КАК СтоимостьНУ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) КАК СтоимостьПР,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) КАК СтоимостьВР,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) КАК СтоимостьЦФ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) КАК СтоимостьНУЦФ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) КАК СтоимостьПРЦФ,
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0) КАК СтоимостьВРЦФ,
	|		ЕСТЬNULL(СтоимостьОС.НеУчитываемаяСтоимостьНУ, 0) КАК НеУчитываемаяСтоимостьНУ,
	|		ЕСТЬNULL(СтоимостьОС.АмортизационнаяПремия, 0) КАК АмортизационнаяПремия,
	|		ЕСТЬNULL(СтоимостьОС.ЗалоговаяСтоимость, 0) КАК ЗалоговаяСтоимость,
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимость, 0) КАК ПредварительнаяСтоимость,
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимостьРегл, 0) КАК ПредварительнаяСтоимостьРегл,
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимости, 0) КАК РезервПереоценкиСтоимости,
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимостиРегл, 0) КАК РезервПереоценкиСтоимостиРегл,
	|		ЕСТЬNULL(СтоимостьОС.ПриростСтоимости, 0) КАК ПриростСтоимости,
	|		ЕСТЬNULL(СтоимостьОС.ПриростСтоимостиРегл, 0) КАК ПриростСтоимостиРегл
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьВНА_Остатки КАК СтоимостьОС
	|			ПО (СтоимостьОС.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (СтоимостьОС.Организация = ДанныеКРасчету.Организация)
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗабалансовыйУчет КАК ЗабалансовыйУчет
	|			ПО (ЗабалансовыйУчет.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|		НЕ ЗабалансовыйУчет.ОбъектУчета ЕСТЬ NULL,
	|		ЕСТЬNULL(СтоимостьОС.Стоимость, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0),
	|		ЕСТЬNULL(СтоимостьОС.НеУчитываемаяСтоимостьНУ, 0),
	|		ЕСТЬNULL(СтоимостьОС.АмортизационнаяПремия, 0),
	|		ЕСТЬNULL(СтоимостьОС.ЗалоговаяСтоимость, 0),
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимость, 0),
	|		ЕСТЬNULL(СтоимостьОС.ПредварительнаяСтоимостьРегл, 0),
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимости, 0),
	|		ЕСТЬNULL(СтоимостьОС.РезервПереоценкиСтоимостиРегл, 0),
	|		ЕСТЬNULL(СтоимостьОС.ПриростСтоимости, 0),
	|		ЕСТЬNULL(СтоимостьОС.ПриростСтоимостиРегл, 0)
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьВНА_Движения КАК СтоимостьОС
	|			ПО (СтоимостьОС.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (СтоимостьОС.Организация = ДанныеКРасчету.Организация)
	|				И (СтоимостьОС.Период <= ДанныеКРасчету.Дата
	|					ИЛИ ТИПЗНАЧЕНИЯ(СтоимостьОС.Регистратор) В (&ТипыДокументовКоторыеИзменяютСтоимостьВКонцеМесяца))
	|				И (СтоимостьОС.Регистратор <> ДанныеКРасчету.Ссылка)
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗабалансовыйУчет КАК ЗабалансовыйУчет
	|			ПО (ЗабалансовыйУчет.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|
	|	) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.ОбъектУчета,
	|	ДанныеКРасчету.ЗабалансовыйУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти

	#Область ВТ_АмортизацияВНА
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АмортизацияОС.Организация КАК Организация,
	|	АмортизацияОС.ОсновноеСредство КАК ОбъектУчета,
	|	-АмортизацияОС.АмортизацияОстаток КАК Амортизация,
	|	-АмортизацияОС.АмортизацияРеглОстаток КАК АмортизацияРегл,
	|	-АмортизацияОС.АмортизацияНУОстаток КАК АмортизацияНУ,
	|	-АмортизацияОС.АмортизацияПРОстаток КАК АмортизацияПР,
	|	-АмортизацияОС.АмортизацияВРОстаток КАК АмортизацияВР,
	|	-АмортизацияОС.АмортизацияЦФОстаток КАК АмортизацияЦФ,
	|	-АмортизацияОС.АмортизацияНУЦФОстаток КАК АмортизацияНУЦФ,
	|	-АмортизацияОС.АмортизацияПРЦФОстаток КАК АмортизацияПРЦФ,
	|	-АмортизацияОС.АмортизацияВРЦФОстаток КАК АмортизацияВРЦФ,
	|	-АмортизацияОС.РезервПереоценкиАмортизацииОстаток КАК РезервПереоценкиАмортизации,
	|	-АмортизацияОС.РезервПереоценкиАмортизацииРеглОстаток КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ АмортизацияВНА_Остатки
	|ИЗ
	|	РегистрНакопления.АмортизацияОС.Остатки(
	|			&НачалоМесяца,
	|			(Организация, ОсновноеСредство) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК АмортизацияОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АмортизацияНМА.Организация КАК Организация,
	|	АмортизацияНМА.НематериальныйАктив КАК ОбъектУчета,
	|	-АмортизацияНМА.АмортизацияОстаток КАК Амортизация,
	|	-АмортизацияНМА.АмортизацияРеглОстаток КАК АмортизацияРегл,
	|	-АмортизацияНМА.АмортизацияНУОстаток КАК АмортизацияНУ,
	|	-АмортизацияНМА.АмортизацияПРОстаток КАК АмортизацияПР,
	|	-АмортизацияНМА.АмортизацияВРОстаток КАК АмортизацияВР,
	|	-АмортизацияНМА.АмортизацияЦФОстаток КАК АмортизацияЦФ,
	|	-АмортизацияНМА.АмортизацияНУЦФОстаток КАК АмортизацияНУЦФ,
	|	-АмортизацияНМА.АмортизацияПРЦФОстаток КАК АмортизацияПРЦФ,
	|	-АмортизацияНМА.АмортизацияВРЦФОстаток КАК АмортизацияВРЦФ,
	|	-АмортизацияНМА.РезервПереоценкиАмортизацииОстаток КАК РезервПереоценкиАмортизации,
	|	-АмортизацияНМА.РезервПереоценкиАмортизацииРеглОстаток КАК РезервПереоценкиАмортизацииРегл
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА.Остатки(
	|			&НачалоМесяца,
	|			(Организация, НематериальныйАктив) В
	|				(ВЫБРАТЬ
	|					ДанныеКРасчету.Организация,
	|					ДанныеКРасчету.ОбъектУчета
	|				ИЗ
	|					ДанныеКРасчету КАК ДанныеКРасчету)) КАК АмортизацияНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АмортизацияОС.Период КАК Период,
	|	АмортизацияОС.Регистратор КАК Регистратор,
	|	АмортизацияОС.Организация КАК Организация,
	|	АмортизацияОС.ОсновноеСредство КАК ОбъектУчета,
	|	АмортизацияОС.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
	|	АмортизацияОС.ПорядокУчетаБУ КАК ПорядокУчетаБУ,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.Амортизация 
	|		ИНАЧЕ -АмортизацияОС.Амортизация 
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияРегл 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияРегл 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияНУ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияНУ 
	|	КОНЕЦ КАК АмортизацияНУ,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияПР 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияПР 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияВР 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияВР 
	|	КОНЕЦ КАК АмортизацияВР,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияЦФ 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияНУЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияНУЦФ 
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияПРЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияПРЦФ 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.АмортизацияВРЦФ 
	|		ИНАЧЕ -АмортизацияОС.АмортизацияВРЦФ 
	|	КОНЕЦ КАК АмортизацияВРЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.РезервПереоценкиАмортизации 
	|		ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизации 
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|
	|	ВЫБОР КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияОС.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизацииРегл 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|
	|ПОМЕСТИТЬ АмортизацияВНА_Движения
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И АмортизацияОС.Активность
	|	И (АмортизацияОС.Организация, АмортизацияОС.ОсновноеСредство) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|
	|	И (ТИПЗНАЧЕНИЯ(АмортизацияОС.Регистратор) В (&ТипыДокументовКоторыеМогутНачислитьАмортизацию)
	|		ИЛИ ТИПЗНАЧЕНИЯ(АмортизацияОС.Регистратор) = ТИП(Документ.ПринятиеКУчетуОС2_4)
	|		ИЛИ ТИПЗНАЧЕНИЯ(АмортизацияОС.Регистратор) = ТИП(Документ.РазукомплектацияОС)
	|			И НЕ АмортизацияОС.Регистратор В 
	|					(ВЫБРАТЬ
	|						ДанныеКРасчету.Ссылка
	|					ИЗ
	|						ДанныеКРасчету КАК ДанныеКРасчету))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АмортизацияНМА.Период КАК Период,
	|	АмортизацияНМА.Регистратор КАК Регистратор,
	|	АмортизацияНМА.Организация КАК Организация,
	|	АмортизацияНМА.НематериальныйАктив КАК ОбъектУчета,
	|	АмортизацияНМА.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл) КАК ПорядокУчетаБУ,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.Амортизация 
	|		ИНАЧЕ -АмортизацияНМА.Амортизация 
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияРегл 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияРегл 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияНУ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияНУ 
	|	КОНЕЦ КАК АмортизацияНУ,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияПР 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияПР 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияВР 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияВР 
	|	КОНЕЦ КАК АмортизацияВР,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияЦФ 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияНУЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияНУЦФ 
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияПРЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияПРЦФ 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.АмортизацияВРЦФ 
	|		ИНАЧЕ -АмортизацияНМА.АмортизацияВРЦФ 
	|	КОНЕЦ КАК АмортизацияВРЦФ,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.РезервПереоценкиАмортизации 
	|		ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизации 
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|
	|	ВЫБОР КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) 
	|		ТОГДА АмортизацияНМА.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизацииРегл 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И АмортизацияНМА.Активность
	|
	|	И (ТИПЗНАЧЕНИЯ(АмортизацияНМА.Регистратор) В (&ТипыДокументовКоторыеМогутНачислитьАмортизацию)
	|		ИЛИ ТИПЗНАЧЕНИЯ(АмортизацияНМА.Регистратор) = ТИП(Документ.ПринятиеКУчетуНМА2_4))
	|
	|	И (АмортизацияНМА.Организация, АмортизацияНМА.НематериальныйАктив) В
	|			(ВЫБРАТЬ
	|				ДанныеКРасчету.Организация,
	|				ДанныеКРасчету.ОбъектУчета
	|			ИЗ
	|				ДанныеКРасчету КАК ДанныеКРасчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.НачислятьИзнос КАК НачислятьИзнос,
	|	СУММА(ДанныеКРасчету.Амортизация) КАК Амортизация,
	|	СУММА(ДанныеКРасчету.АмортизацияРегл) КАК АмортизацияРегл,
	|	СУММА(ДанныеКРасчету.АмортизацияНУ) КАК АмортизацияНУ,
	|	СУММА(ДанныеКРасчету.АмортизацияПР) КАК АмортизацияПР,
	|	СУММА(ДанныеКРасчету.АмортизацияВР) КАК АмортизацияВР,
	|	СУММА(ДанныеКРасчету.АмортизацияЦФ) КАК АмортизацияЦФ,
	|	СУММА(ДанныеКРасчету.АмортизацияНУЦФ) КАК АмортизацияНУЦФ,
	|	СУММА(ДанныеКРасчету.АмортизацияПРЦФ) КАК АмортизацияПРЦФ,
	|	СУММА(ДанныеКРасчету.АмортизацияВРЦФ) КАК АмортизацияВРЦФ,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиАмортизации) КАК РезервПереоценкиАмортизации,
	|	СУММА(ДанныеКРасчету.РезервПереоценкиАмортизацииРегл) КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ЕСТЬNULL(АмортизацияВНА.Амортизация, 0) КАК Амортизация,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) КАК АмортизацияРегл,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) КАК АмортизацияНУ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0) КАК АмортизацияПР,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияВР, 0) КАК АмортизацияВР,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) КАК АмортизацияЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0) КАК АмортизацияНУЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0) КАК АмортизацияПРЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияВРЦФ, 0) КАК АмортизацияВРЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0) КАК РезервПереоценкиАмортизации,
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0) КАК РезервПереоценкиАмортизацииРегл,
	|		НЕ НачислениеИзноса.ОбъектУчета ЕСТЬ NULL КАК НачислятьИзнос
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияВНА_Остатки КАК АмортизацияВНА
	|			ПО (АмортизацияВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (АмортизацияВНА.Организация = ДанныеКРасчету.Организация)
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеИзноса КАК НачислениеИзноса
	|			ПО НачислениеИзноса.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|
	|		ВЫБОР 
	|			КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.Амортизация, 0)
	| 
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Амортизация,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК АмортизацияРегл,
	|
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) КАК АмортизацияНУ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0) КАК АмортизацияПР,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ - ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) - ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0) КАК АмортизацияВР,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК АмортизацияЦФ,
	|
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0) КАК АмортизацияНУЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0) КАК АмортизацияПРЦФ,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ - ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0) - ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0) КАК АмортизацияВРЦФ,
	|
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0),
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0),
	|		НЕ НачислениеИзноса.ОбъектУчета ЕСТЬ NULL КАК НачислятьИзнос
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияВНА_Движения КАК АмортизацияВНА
	|			ПО (АмортизацияВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (АмортизацияВНА.Организация = ДанныеКРасчету.Организация)
	|				И (АмортизацияВНА.Регистратор <> ДанныеКРасчету.Ссылка)
	|				И (ТИПЗНАЧЕНИЯ(АмортизацияВНА.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|					ИЛИ АмортизацияВНА.Период <= ДанныеКРасчету.Дата)
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеИзноса КАК НачислениеИзноса
	|			ПО НачислениеИзноса.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитика КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Организация = ДанныеКРасчету.Организация
	|	ГДЕ
	|		НЕ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) В (
	|					ТИП(Документ.КорректировкаСтоимостиИАмортизацииОС),
	|					ТИП(Документ.КорректировкаСтоимостиИАмортизацииНМА))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|		ВЫБОР 
	|			КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.Амортизация, 0)
	| 
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Амортизация,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК АмортизацияРегл,
	|
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) КАК АмортизацияНУ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0) КАК АмортизацияПР,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияРегл, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ - ЕСТЬNULL(АмортизацияВНА.АмортизацияНУ, 0) - ЕСТЬNULL(АмортизацияВНА.АмортизацияПР, 0) КАК АмортизацияВР,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК АмортизацияЦФ,
	|
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0) КАК АмортизацияНУЦФ,
	|		ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0) КАК АмортизацияПРЦФ,
	|
	|		ВЫБОР
	|			КОГДА &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл)
	|					ИЛИ ЕСТЬNULL(УчетнаяПолитика.ПорядокНачисленияАмортизацииБУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
	|					ИЛИ ТИПЗНАЧЕНИЯ(ДанныеКРасчету.ОбъектУчета) = ТИП(Справочник.НематериальныеАктивы))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0)
	|
	|			КОГДА НЕ &РегламентированныйУчетВНА
	|				И (ЕСТЬNULL(НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < НАЧАЛОПЕРИОДА(ДанныеКРасчету.Дата, ДЕНЬ)
	|					ИЛИ НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(АмортизацияВНА.Период, МЕСЯЦ)
	|					ИЛИ ЕСТЬNULL(АмортизацияВНА.ПорядокУчетаУУ, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл))
	|
	|				ТОГДА ЕСТЬNULL(АмортизацияВНА.АмортизацияЦФ, 0) 
	|
	|			ИНАЧЕ 0
	|		КОНЕЦ - ЕСТЬNULL(АмортизацияВНА.АмортизацияНУЦФ, 0) - ЕСТЬNULL(АмортизацияВНА.АмортизацияПРЦФ, 0) КАК АмортизацияВРЦФ,
	|
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизации, 0),
	|		ЕСТЬNULL(АмортизацияВНА.РезервПереоценкиАмортизацииРегл, 0),
	|		НЕ НачислениеИзноса.ОбъектУчета ЕСТЬ NULL КАК НачислятьИзнос
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ АмортизацияВНА_Движения КАК АмортизацияВНА
	|			ПО (АмортизацияВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|				И (АмортизацияВНА.Организация = ДанныеКРасчету.Организация)
	|				И (АмортизацияВНА.Регистратор <> ДанныеКРасчету.Ссылка)
	|				И (ТИПЗНАЧЕНИЯ(АмортизацияВНА.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|					ИЛИ АмортизацияВНА.Период <= ДанныеКРасчету.Дата)
	|				И НЕ ТИПЗНАЧЕНИЯ(АмортизацияВНА.Регистратор) В (ТИП(Документ.АмортизацияОС2_4), ТИП(Документ.АмортизацияНМА2_4))
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеИзноса КАК НачислениеИзноса
	|			ПО НачислениеИзноса.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитика КАК УчетнаяПолитика
	|			ПО УчетнаяПолитика.Организация = ДанныеКРасчету.Организация
	|	ГДЕ
	|		ТИПЗНАЧЕНИЯ(ДанныеКРасчету.Ссылка) В (
	|					ТИП(Документ.КорректировкаСтоимостиИАмортизацииОС),
	|					ТИП(Документ.КорректировкаСтоимостиИАмортизацииНМА))
	|
	|) КАК ДанныеКРасчету
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.ОбъектУчета,
	|	ДанныеКРасчету.НачислятьИзнос
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеКРасчету.Амортизация) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияРегл) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияНУ) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияПР) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияВР) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияЦФ) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияНУЦФ) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияПРЦФ) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.АмортизацияВРЦФ) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.РезервПереоценкиАмортизации) <> 0
	|		ИЛИ СУММА(ДанныеКРасчету.РезервПереоценкиАмортизацииРегл) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВТ_ОбесценениеВНА
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбесценениеВНА.Организация КАК Организация,
	|	ОбесценениеВНА.ВнеоборотныйАктив КАК ОбъектУчета,
	|	-ОбесценениеВНА.ОбесценениеУпрОстаток КАК ОбесценениеУпр,
	|	-ОбесценениеВНА.ОбесценениеРеглОстаток КАК ОбесценениеРегл,
	|	ОбесценениеВНА.ЕГДС КАК ЕГДС
	|ПОМЕСТИТЬ ОбесценениеВНА_Остатки
	|ИЗ
	|	РегистрНакопления.ОбесценениеВНА.Остатки(&НачалоМесяца, (Организация, ВнеоборотныйАктив) В
	|		(ВЫБРАТЬ
	|			ДанныеКРасчету.Организация,
	|			ДанныеКРасчету.ОбъектУчета
	|		ИЗ
	|			ДанныеКРасчету КАК ДанныеКРасчету)) КАК ОбесценениеВНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбесценениеВНА.Период КАК Период,
	|	ОбесценениеВНА.Регистратор КАК Регистратор,
	|	ОбесценениеВНА.Организация КАК Организация,
	|	ОбесценениеВНА.ВнеоборотныйАктив КАК ОбъектУчета,
	|	ОбесценениеВНА.ЕГДС КАК ЕГДС,
	|	ВЫБОР
	|		КОГДА ОбесценениеВНА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ОбесценениеВНА.ОбесценениеУпр
	|		ИНАЧЕ -ОбесценениеВНА.ОбесценениеУпр
	|	КОНЕЦ КАК ОбесценениеУпр,
	|	ВЫБОР
	|		КОГДА ОбесценениеВНА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ОбесценениеВНА.ОбесценениеРегл
	|		ИНАЧЕ -ОбесценениеВНА.ОбесценениеРегл
	|	КОНЕЦ КАК ОбесценениеРегл
	|ПОМЕСТИТЬ ОбесценениеВНА_Движения
	|ИЗ
	|	РегистрНакопления.ОбесценениеВНА КАК ОбесценениеВНА
	|ГДЕ
	|	ОбесценениеВНА.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ОбесценениеВНА.Активность
	|	И (ОбесценениеВНА.Организация, ОбесценениеВНА.ВнеоборотныйАктив) В
	|		(ВЫБРАТЬ
	|			ДанныеКРасчету.Организация,
	|			ДанныеКРасчету.ОбъектУчета
	|		ИЗ
	|			ДанныеКРасчету КАК ДанныеКРасчету)
	|	И НЕ ОбесценениеВНА.Регистратор В
	|		(ВЫБРАТЬ
	|			ДанныеКРасчету.Ссылка
	|		ИЗ
	|			ДанныеКРасчету КАК ДанныеКРасчету)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	МАКСИМУМ(ДанныеКРасчету.ЕГДС) КАК ЕГДС,
	|	СУММА(ДанныеКРасчету.ОбесценениеУпр) КАК ОбесценениеУпр,
	|	СУММА(ДанныеКРасчету.ОбесценениеРегл) КАК ОбесценениеРегл
	|ПОМЕСТИТЬ ВТ_ОбесценениеВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ОбесценениеВНА.ЕГДС КАК ЕГДС,
	|		ЕСТЬNULL(ОбесценениеВНА.ОбесценениеУпр, 0) КАК ОбесценениеУпр,
	|		ЕСТЬNULL(ОбесценениеВНА.ОбесценениеРегл, 0) КАК ОбесценениеРегл
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбесценениеВНА_Остатки КАК ОбесценениеВНА
	|			ПО (ОбесценениеВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|			И (ОбесценениеВНА.Организация = ДанныеКРасчету.Организация)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка,
	|		ДанныеКРасчету.Дата,
	|		ДанныеКРасчету.Организация,
	|		ДанныеКРасчету.ОбъектУчета,
	|		ОбесценениеВНА.ЕГДС КАК ЕГДС,
	|		ЕСТЬNULL(ОбесценениеВНА.ОбесценениеУпр, 0) КАК ОбесценениеУпр,
	|		ЕСТЬNULL(ОбесценениеВНА.ОбесценениеРегл, 0) КАК ОбесценениеРегл
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|			ЛЕВОЕ СОЕДИНЕНИЕ ОбесценениеВНА_Движения КАК ОбесценениеВНА
	|			ПО (ОбесценениеВНА.ОбъектУчета = ДанныеКРасчету.ОбъектУчета)
	|			И (ОбесценениеВНА.Организация = ДанныеКРасчету.Организация)
	|			И (ОбесценениеВНА.Регистратор <> ДанныеКРасчету.Ссылка)
	|			И (ТИПЗНАЧЕНИЯ(ОбесценениеВНА.Регистратор) <> ТИП(Документ.КорректировкаРегистров)
	|			ИЛИ ОбесценениеВНА.Период <= ДанныеКРасчету.Дата)) КАК ДанныеКРасчету
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.ОбъектУчета
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеКРасчету.ОбесценениеУпр) <> 0
	|	ИЛИ СУММА(ДанныеКРасчету.ОбесценениеРегл) <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВТ_РасчетыПоФинансовымИнструментам
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Договор КАК Договор,
	|	АрендованныеОС.Договор.Организация КАК Организация,
	|	АрендованныеОС.Договор.Партнер КАК Партнер,
	|	АрендованныеОС.Договор.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ АрендованныеОС
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(
	|		&КонецПредыдущегоМесяца,
	|		ОсновноеСредство В (ВЫБРАТЬ Т.ОбъектУчета ИЗ ДанныеКРасчету КАК Т)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды), 
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Договор КАК Договор,
	|	АрендованныеОС.Договор.Организация КАК Организация,
	|	АрендованныеОС.Договор.Партнер КАК Партнер,
	|	АрендованныеОС.Договор.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	РегистрСведений.АрендованныеОС КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И АрендованныеОС.Активность
	|	И АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды), 
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))
	|
	|	И АрендованныеОС.ОсновноеСредство В (ВЫБРАТЬ Т.ОбъектУчета ИЗ ДанныеКРасчету КАК Т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Партнер,
	|	Контрагент,
	|	НаправлениеДеятельности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	АрендованныеОС.Договор КАК Договор
	|ПОМЕСТИТЬ ДанныеКРасчетуАренда
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АрендованныеОС КАК АрендованныеОС
	|		ПО АрендованныеОС.ОсновноеСредство = ДанныеКРасчету.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	АрендованныеОС.Договор КАК Договор,
	|	РегистрАналитикаУчетаПоПартнерам.КлючАналитики КАК КлючАналитики
	|ПОМЕСТИТЬ ОтборРасчетов
	|ИЗ
	|	АрендованныеОС КАК АрендованныеОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК РегистрАналитикаУчетаПоПартнерам
	|		ПО РегистрАналитикаУчетаПоПартнерам.Организация = АрендованныеОС.Организация
	|			И РегистрАналитикаУчетаПоПартнерам.Партнер = АрендованныеОС.Партнер
	|			И РегистрАналитикаУчетаПоПартнерам.Контрагент = АрендованныеОС.Контрагент 
	|			И РегистрАналитикаУчетаПоПартнерам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			И РегистрАналитикаУчетаПоПартнерам.НаправлениеДеятельности = АрендованныеОС.НаправлениеДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючАналитики,
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ДанныеРегистра.СуммаОстаток КАК Сумма,
	|	ДанныеРегистра.СуммаУпрОстаток КАК СуммаУпр,
	|	ДанныеРегистра.СуммаРеглОстаток КАК СуммаРегл
	|ПОМЕСТИТЬ РасчетыПоФинансовымИнструментам_Остатки
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(
	|			&НачалоМесяца,
	|			(АналитикаУчетаПоПартнерам, Договор) В
	|				(ВЫБРАТЬ
	|					ОтборРасчетов.КлючАналитики,
	|					ОтборРасчетов.Договор
	|				ИЗ
	|					ОтборРасчетов КАК ОтборРасчетов)) КАК ДанныеРегистра
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.Сумма
	|		ИНАЧЕ -ДанныеРегистра.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.СуммаУпр
	|		ИНАЧЕ -ДанныеРегистра.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ТОГДА ДанныеРегистра.СуммаРегл
	|		ИНАЧЕ -ДанныеРегистра.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл
	|
	|ПОМЕСТИТЬ РасчетыПоФинансовымИнструментам_Движения
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ДанныеРегистра.Активность
	|	И (ДанныеРегистра.АналитикаУчетаПоПартнерам, ДанныеРегистра.Договор) В
	|				(ВЫБРАТЬ
	|					ОтборРасчетов.КлючАналитики,
	|					ОтборРасчетов.Договор
	|				ИЗ
	|					ОтборРасчетов КАК ОтборРасчетов)
	|ИНДЕКСИРОВАТЬ ПО
	|	Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчетуАренда.Ссылка КАК Ссылка,
	|	ДанныеКРасчетуАренда.Дата,
	|	ДанныеКРасчетуАренда.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеКРасчетуАренда.Договор КАК Договор,
	|	ДанныеКРасчетуАренда.ТипСуммы КАК ТипСуммы,
	|	ДанныеКРасчетуАренда.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеКРасчетуАренда.Валюта КАК Валюта,
	|	СУММА(ДанныеКРасчетуАренда.Сумма) КАК Сумма,
	|	СУММА(ДанныеКРасчетуАренда.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДанныеКРасчетуАренда.СуммаРегл) КАК СуммаРегл
	|
	|ПОМЕСТИТЬ ВТ_РасчетыПоФинансовымИнструментам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДанныеКРасчетуАренда.Ссылка КАК Ссылка,
	|		ДанныеКРасчетуАренда.Дата КАК Дата,
	|		ДанныеКРасчетуАренда.Договор КАК Договор,
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|		ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ДанныеРегистра.Валюта КАК Валюта,
	|		ЕСТЬNULL(ДанныеРегистра.Сумма, 0) КАК Сумма,
	|		ЕСТЬNULL(ДанныеРегистра.СуммаУпр, 0) КАК СуммаУпр,
	|		ЕСТЬNULL(ДанныеРегистра.СуммаРегл, 0) КАК СуммаРегл
	|	ИЗ
	|		ДанныеКРасчетуАренда КАК ДанныеКРасчетуАренда
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоФинансовымИнструментам_Остатки КАК ДанныеРегистра
	|			ПО (ДанныеРегистра.Договор = ДанныеКРасчетуАренда.Договор)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДанныеКРасчетуАренда.Ссылка,
	|		ДанныеКРасчетуАренда.Дата,
	|		ДанныеКРасчетуАренда.Договор,
	|		ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|		ДанныеРегистра.ТипСуммы,
	|		ДанныеРегистра.РасчетныйДокумент,
	|		ДанныеРегистра.Валюта,
	|		ЕСТЬNULL(ДанныеРегистра.Сумма, 0),
	|		ЕСТЬNULL(ДанныеРегистра.СуммаУпр, 0),
	|		ЕСТЬNULL(ДанныеРегистра.СуммаРегл, 0)
	|	ИЗ
	|		ДанныеКРасчетуАренда КАК ДанныеКРасчетуАренда
	|			ЛЕВОЕ СОЕДИНЕНИЕ РасчетыПоФинансовымИнструментам_Движения КАК ДанныеРегистра
	|			ПО (ДанныеРегистра.Договор = ДанныеКРасчетуАренда.Договор)
	|				И (ДанныеРегистра.Регистратор <> ДанныеКРасчетуАренда.Ссылка)
	|				И (ДанныеРегистра.Период <= ДанныеКРасчетуАренда.Дата
	|					ИЛИ ДанныеРегистра.Регистратор ССЫЛКА Документ.НачислениеПроцентовПоАренде)
	|	) КАК ДанныеКРасчетуАренда
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеКРасчетуАренда.Ссылка,
	|	ДанныеКРасчетуАренда.Дата,
	|	ДанныеКРасчетуАренда.АналитикаУчетаПоПартнерам,
	|	ДанныеКРасчетуАренда.Договор,
	|	ДанныеКРасчетуАренда.ТипСуммы,
	|	ДанныеКРасчетуАренда.РасчетныйДокумент,
	|	ДанныеКРасчетуАренда.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ДанныеКРасчету_Выборка
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеКРасчету.Ссылка,
	|	ДанныеКРасчету.Организация,
	|	ДанныеКРасчету.Дата,
	|	ДанныеКРасчету.ДатаДень,
	|	ДанныеКРасчету.Приоритет
	|ИЗ
	|	ДанныеКРасчету КАК ДанныеКРасчету
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДень,
	|	Приоритет";

	ТекстыЗапроса.Добавить(ТекстЗапроса);
	
	#КонецОбласти

КонецПроцедуры

Процедура ОбновитьТаблицыОтложенногоФормированияДвижений(Регистратор, МенеджерВременныхТаблиц)

	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.МодернизацияОС2_4") Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстыЗапроса = Новый Массив;
	
	#Область ИсходныеТаблицы
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.ЗабалансовыйУчет КАК ЗабалансовыйУчет,
	|	ДанныеКРасчету.Стоимость КАК Стоимость,
	|	ДанныеКРасчету.СтоимостьРегл КАК СтоимостьРегл,
	|	ДанныеКРасчету.СтоимостьНУ КАК СтоимостьНУ,
	|	ДанныеКРасчету.СтоимостьПР КАК СтоимостьПР,
	|	ДанныеКРасчету.СтоимостьВР КАК СтоимостьВР,
	|	ДанныеКРасчету.СтоимостьЦФ КАК СтоимостьЦФ,
	|	ДанныеКРасчету.СтоимостьНУЦФ КАК СтоимостьНУЦФ,
	|	ДанныеКРасчету.СтоимостьПРЦФ КАК СтоимостьПРЦФ,
	|	ДанныеКРасчету.СтоимостьВРЦФ КАК СтоимостьВРЦФ,
	|	ДанныеКРасчету.НеУчитываемаяСтоимостьНУ КАК НеУчитываемаяСтоимостьНУ,
	|	ДанныеКРасчету.АмортизационнаяПремия КАК АмортизационнаяПремия,
	|	ДанныеКРасчету.ЗалоговаяСтоимость КАК ЗалоговаяСтоимость,
	|	ДанныеКРасчету.ПредварительнаяСтоимость КАК ПредварительнаяСтоимость,
	|	ДанныеКРасчету.ПредварительнаяСтоимостьРегл КАК ПредварительнаяСтоимостьРегл,
	|	ДанныеКРасчету.РезервПереоценкиСтоимости КАК РезервПереоценкиСтоимости,
	|	ДанныеКРасчету.РезервПереоценкиСтоимостиРегл КАК РезервПереоценкиСтоимостиРегл,
	|	ДанныеКРасчету.ПриростСтоимости КАК ПриростСтоимости,
	|	ДанныеКРасчету.ПриростСтоимостиРегл КАК ПриростСтоимостиРегл
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА_Исходная
	|ИЗ
	|	ВТ_СтоимостьВНА КАК ДанныеКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.НачислятьИзнос КАК НачислятьИзнос,
	|	ДанныеКРасчету.Амортизация КАК Амортизация,
	|	ДанныеКРасчету.АмортизацияРегл КАК АмортизацияРегл,
	|	ДанныеКРасчету.АмортизацияНУ КАК АмортизацияНУ,
	|	ДанныеКРасчету.АмортизацияПР КАК АмортизацияПР,
	|	ДанныеКРасчету.АмортизацияВР КАК АмортизацияВР,
	|	ДанныеКРасчету.АмортизацияЦФ КАК АмортизацияЦФ,
	|	ДанныеКРасчету.АмортизацияНУЦФ КАК АмортизацияНУЦФ,
	|	ДанныеКРасчету.АмортизацияПРЦФ КАК АмортизацияПРЦФ,
	|	ДанныеКРасчету.АмортизацияВРЦФ КАК АмортизацияВРЦФ,
	|	ДанныеКРасчету.РезервПереоценкиАмортизации КАК РезервПереоценкиАмортизации,
	|	ДанныеКРасчету.РезервПереоценкиАмортизацииРегл КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА_Исходная
	|ИЗ
	|	ВТ_АмортизацияВНА КАК ДанныеКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.Организация КАК Организация,
	|	ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|	ДанныеКРасчету.ЕГДС КАК ЕГДС,
	|	ДанныеКРасчету.ОбесценениеУпр КАК ОбесценениеУпр,
	|	ДанныеКРасчету.ОбесценениеРегл КАК ОбесценениеРегл
	|ПОМЕСТИТЬ ВТ_ОбесценениеВНА_Исходная
	|ИЗ
	|	ВТ_ОбесценениеВНА КАК ДанныеКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеКРасчету.Ссылка КАК Ссылка,
	|	ДанныеКРасчету.Дата КАК Дата,
	|	ДанныеКРасчету.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеКРасчету.Договор КАК Договор,
	|	ДанныеКРасчету.ТипСуммы КАК ТипСуммы,
	|	ДанныеКРасчету.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеКРасчету.Валюта КАК Валюта,
	|	ДанныеКРасчету.Сумма КАК Сумма,
	|	ДанныеКРасчету.СуммаУпр КАК СуммаУпр,
	|	ДанныеКРасчету.СуммаРегл КАК СуммаРегл
	|ПОМЕСТИТЬ ВТ_РасчетыПоФинансовымИнструментам_Исходная
	|ИЗ
	|	ВТ_РасчетыПоФинансовымИнструментам КАК ДанныеКРасчету
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_СтоимостьВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_АмортизацияВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_ОбесценениеВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТ_РасчетыПоФинансовымИнструментам";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область СтоимостьВНА_Движения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ) КАК Дата,
	|	СтоимостьОС.Организация КАК Организация,
	|	СтоимостьОС.ОсновноеСредство КАК ОбъектУчета,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.Стоимость
	|			ИНАЧЕ -СтоимостьОС.Стоимость
	|		КОНЕЦ) КАК Стоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьРегл
	|			ИНАЧЕ -СтоимостьОС.СтоимостьРегл
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьНУ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьНУ
	|		КОНЕЦ) КАК СтоимостьНУ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьПР
	|			ИНАЧЕ -СтоимостьОС.СтоимостьПР
	|		КОНЕЦ) КАК СтоимостьПР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьВР
	|			ИНАЧЕ -СтоимостьОС.СтоимостьВР
	|		КОНЕЦ) КАК СтоимостьВР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьЦФ
	|		КОНЕЦ) КАК СтоимостьЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьНУЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьНУЦФ
	|		КОНЕЦ) КАК СтоимостьНУЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьПРЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьПРЦФ
	|		КОНЕЦ) КАК СтоимостьПРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.СтоимостьВРЦФ
	|			ИНАЧЕ -СтоимостьОС.СтоимостьВРЦФ
	|		КОНЕЦ) КАК СтоимостьВРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.НеУчитываемаяСтоимостьНУ
	|			ИНАЧЕ -СтоимостьОС.НеУчитываемаяСтоимостьНУ
	|		КОНЕЦ) КАК НеУчитываемаяСтоимостьНУ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.АмортизационнаяПремия
	|			ИНАЧЕ -СтоимостьОС.АмортизационнаяПремия
	|		КОНЕЦ) КАК АмортизационнаяПремия,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ЗалоговаяСтоимость
	|			ИНАЧЕ -СтоимостьОС.ЗалоговаяСтоимость
	|		КОНЕЦ) КАК ЗалоговаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ПредварительнаяСтоимость
	|			ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимость
	|		КОНЕЦ) КАК ПредварительнаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ПредварительнаяСтоимостьРегл
	|			ИНАЧЕ -СтоимостьОС.ПредварительнаяСтоимостьРегл
	|		КОНЕЦ) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.РезервПереоценкиСтоимости
	|			ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимости
	|		КОНЕЦ) КАК РезервПереоценкиСтоимости,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|			ИНАЧЕ -СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|		КОНЕЦ) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ПриростСтоимости
	|			ИНАЧЕ -СтоимостьОС.ПриростСтоимости
	|		КОНЕЦ) КАК ПриростСтоимости,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьОС.ПриростСтоимостиРегл
	|			ИНАЧЕ -СтоимостьОС.ПриростСтоимостиРегл
	|		КОНЕЦ) КАК ПриростСтоимостиРегл
	|ПОМЕСТИТЬ СтоимостьВНА_Движения
	|ИЗ
	|	РегистрНакопления.СтоимостьОС КАК СтоимостьОС
	|ГДЕ
	|	СтоимостьОС.Регистратор = &Регистратор
	|	И СтоимостьОС.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтоимостьОС.Период, ДЕНЬ),
	|	СтоимостьОС.Организация,
	|	СтоимостьОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(СтоимостьНМА.Период, ДЕНЬ) КАК Дата,
	|	СтоимостьНМА.Организация КАК Организация,
	|	СтоимостьНМА.НематериальныйАктив КАК ОбъектУчета,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.Стоимость
	|			ИНАЧЕ -СтоимостьНМА.Стоимость
	|		КОНЕЦ) КАК Стоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьРегл
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьРегл
	|		КОНЕЦ) КАК СтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьНУ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьНУ
	|		КОНЕЦ) КАК СтоимостьНУ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьПР
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьПР
	|		КОНЕЦ) КАК СтоимостьПР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьВР
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьВР
	|		КОНЕЦ) КАК СтоимостьВР,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьЦФ
	|		КОНЕЦ) КАК СтоимостьЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьНУЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьНУЦФ
	|		КОНЕЦ) КАК СтоимостьНУЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьПРЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьПРЦФ
	|		КОНЕЦ) КАК СтоимостьПРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.СтоимостьВРЦФ
	|			ИНАЧЕ -СтоимостьНМА.СтоимостьВРЦФ
	|		КОНЕЦ) КАК СтоимостьВРЦФ,
	|	0 КАК НеУчитываемаяСтоимостьНУ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.ПредварительнаяСтоимость
	|			ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимость
	|		КОНЕЦ) КАК ПредварительнаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|			ИНАЧЕ -СтоимостьНМА.ПредварительнаяСтоимостьРегл
	|		КОНЕЦ) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.РезервПереоценкиСтоимости
	|			ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимости
	|		КОНЕЦ) КАК РезервПереоценкиСтоимости,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|			ИНАЧЕ -СтоимостьНМА.РезервПереоценкиСтоимостиРегл
	|		КОНЕЦ) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.ПриростСтоимости
	|			ИНАЧЕ -СтоимостьНМА.ПриростСтоимости
	|		КОНЕЦ) КАК ПриростСтоимости,
	|	СУММА(ВЫБОР
	|			КОГДА СтоимостьНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА СтоимостьНМА.ПриростСтоимостиРегл
	|			ИНАЧЕ -СтоимостьНМА.ПриростСтоимостиРегл
	|		КОНЕЦ) КАК ПриростСтоимостиРегл
	|ИЗ
	|	РегистрНакопления.СтоимостьНМА КАК СтоимостьНМА
	|ГДЕ
	|	СтоимостьНМА.Регистратор = &Регистратор
	|	И СтоимостьНМА.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(СтоимостьНМА.Период, ДЕНЬ),
	|	СтоимостьНМА.Организация,
	|	СтоимостьНМА.НематериальныйАктив";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область АмортизацияВНА_Движения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АмортизацияОС.Период, ДЕНЬ) КАК Дата,
	|	АмортизацияОС.Организация КАК Организация,
	|	АмортизацияОС.ОсновноеСредство КАК ОбъектУчета,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.Амортизация
	|			ИНАЧЕ -АмортизацияОС.Амортизация
	|		КОНЕЦ) КАК Амортизация,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияРегл
	|			ИНАЧЕ -АмортизацияОС.АмортизацияРегл
	|		КОНЕЦ) КАК АмортизацияРегл,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияНУ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияНУ
	|		КОНЕЦ) КАК АмортизацияНУ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияПР
	|			ИНАЧЕ -АмортизацияОС.АмортизацияПР
	|		КОНЕЦ) КАК АмортизацияПР,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияВР
	|			ИНАЧЕ -АмортизацияОС.АмортизацияВР
	|		КОНЕЦ) КАК АмортизацияВР,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияЦФ
	|		КОНЕЦ) КАК АмортизацияЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияНУЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияНУЦФ
	|		КОНЕЦ) КАК АмортизацияНУЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияПРЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияПРЦФ
	|		КОНЕЦ) КАК АмортизацияПРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.АмортизацияВРЦФ
	|			ИНАЧЕ -АмортизацияОС.АмортизацияВРЦФ
	|		КОНЕЦ) КАК АмортизацияВРЦФ,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.РезервПереоценкиАмортизации
	|			ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизации
	|		КОНЕЦ) КАК РезервПереоценкиАмортизации,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияОС.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияОС.РезервПереоценкиАмортизацииРегл
	|			ИНАЧЕ -АмортизацияОС.РезервПереоценкиАмортизацииРегл
	|		КОНЕЦ) КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ АмортизацияВНА_Движения
	|ИЗ
	|	РегистрНакопления.АмортизацияОС КАК АмортизацияОС
	|ГДЕ
	|	АмортизацияОС.Регистратор = &Регистратор
	|	И АмортизацияОС.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(АмортизацияОС.Период, ДЕНЬ),
	|	АмортизацияОС.Организация,
	|	АмортизацияОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(АмортизацияНМА.Период, ДЕНЬ),
	|	АмортизацияНМА.Организация,
	|	АмортизацияНМА.НематериальныйАктив,
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.Амортизация
	|			ИНАЧЕ -АмортизацияНМА.Амортизация
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияРегл
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияРегл
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияНУ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияНУ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияПР
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияПР
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияВР
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияВР
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияНУЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияНУЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияПРЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияПРЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.АмортизацияВРЦФ
	|			ИНАЧЕ -АмортизацияНМА.АмортизацияВРЦФ
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.РезервПереоценкиАмортизации
	|			ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизации
	|		КОНЕЦ),
	|	СУММА(ВЫБОР
	|			КОГДА АмортизацияНМА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА АмортизацияНМА.РезервПереоценкиАмортизацииРегл
	|			ИНАЧЕ -АмортизацияНМА.РезервПереоценкиАмортизацииРегл
	|		КОНЕЦ)
	|ИЗ
	|	РегистрНакопления.АмортизацияНМА КАК АмортизацияНМА
	|ГДЕ
	|	АмортизацияНМА.Регистратор = &Регистратор
	|	И АмортизацияНМА.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(АмортизацияНМА.Период, ДЕНЬ),
	|	АмортизацияНМА.Организация,
	|	АмортизацияНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ОбесценениеВНА_Движения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ОбесценениеВНА.Период, ДЕНЬ) КАК Дата,
	|	ОбесценениеВНА.Организация КАК Организация,
	|	ОбесценениеВНА.ВнеоборотныйАктив КАК ОбъектУчета,
	|	МАКСИМУМ(ОбесценениеВНА.ЕГДС) КАК ЕГДС,
	|	СУММА(ВЫБОР
	|			КОГДА ОбесценениеВНА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ОбесценениеВНА.ОбесценениеУпр
	|			ИНАЧЕ -ОбесценениеВНА.ОбесценениеУпр
	|		КОНЕЦ) КАК ОбесценениеУпр,
	|	СУММА(ВЫБОР
	|			КОГДА ОбесценениеВНА.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА ОбесценениеВНА.ОбесценениеРегл
	|			ИНАЧЕ -ОбесценениеВНА.ОбесценениеРегл
	|		КОНЕЦ) КАК ОбесценениеРегл
	|ПОМЕСТИТЬ ОбесценениеВНА_Движения
	|ИЗ
	|	РегистрНакопления.ОбесценениеВНА КАК ОбесценениеВНА
	|ГДЕ
	|	ОбесценениеВНА.Регистратор = &Регистратор
	|	И ОбесценениеВНА.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ОбесценениеВНА.Период, ДЕНЬ),
	|	ОбесценениеВНА.Организация,
	|	ОбесценениеВНА.ВнеоборотныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	Организация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область РасчетыПоФинансовымИнструментам_Движения
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ДанныеРегистра.Период, ДЕНЬ) КАК Дата,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.Договор КАК Договор,
	|	ДанныеРегистра.ТипСуммы КАК ТипСуммы,
	|	ДанныеРегистра.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ДанныеРегистра.Сумма
	|		ИНАЧЕ -ДанныеРегистра.Сумма
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ДанныеРегистра.СуммаУпр
	|		ИНАЧЕ -ДанныеРегистра.СуммаУпр
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ТОГДА ДанныеРегистра.СуммаРегл
	|		ИНАЧЕ -ДанныеРегистра.СуммаРегл
	|	КОНЕЦ КАК СуммаРегл
	|
	|ПОМЕСТИТЬ РасчетыПоФинансовымИнструментам_Движения
	|ИЗ
	|	РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.Регистратор = &Регистратор
	|	И ДанныеРегистра.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АналитикаУчетаПоПартнерам,
	|	Договор,
	|	ТипСуммы,
	|	РасчетныйДокумент,
	|	Валюта";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область ВТ_СтоимостьВНА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтоимостьВНА.Ссылка КАК Ссылка,
	|	СтоимостьВНА.Дата КАК Дата,
	|	СтоимостьВНА.Организация КАК Организация,
	|	СтоимостьВНА.ОбъектУчета КАК ОбъектУчета,
	|	СтоимостьВНА.ЗабалансовыйУчет КАК ЗабалансовыйУчет,
	|	СУММА(СтоимостьВНА.Стоимость + ЕСТЬNULL(СтоимостьВНА_Движения.Стоимость, 0)) КАК Стоимость,
	|	СУММА(СтоимостьВНА.СтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьРегл, 0)) КАК СтоимостьРегл,
	|	СУММА(СтоимостьВНА.СтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУ, 0)) КАК СтоимостьНУ,
	|	СУММА(СтоимостьВНА.СтоимостьПР + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПР, 0)) КАК СтоимостьПР,
	|	СУММА(СтоимостьВНА.СтоимостьВР + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьВР, 0)) КАК СтоимостьВР,
	|	СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) КАК СтоимостьЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) КАК СтоимостьНУЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьПРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПРЦФ, 0)) КАК СтоимостьПРЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьВРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьВРЦФ, 0)) КАК СтоимостьВРЦФ,
	|	СУММА(СтоимостьВНА.НеУчитываемаяСтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.НеУчитываемаяСтоимостьНУ, 0)) КАК НеУчитываемаяСтоимостьНУ,
	|	СУММА(СтоимостьВНА.АмортизационнаяПремия + ЕСТЬNULL(СтоимостьВНА_Движения.АмортизационнаяПремия, 0)) КАК АмортизационнаяПремия,
	|	СУММА(СтоимостьВНА.ЗалоговаяСтоимость + ЕСТЬNULL(СтоимостьВНА_Движения.ЗалоговаяСтоимость, 0)) КАК ЗалоговаяСтоимость,
	|	СУММА(СтоимостьВНА.ПредварительнаяСтоимость + ЕСТЬNULL(СтоимостьВНА_Движения.ПредварительнаяСтоимость, 0)) КАК ПредварительнаяСтоимость,
	|	СУММА(СтоимостьВНА.ПредварительнаяСтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.ПредварительнаяСтоимостьРегл, 0)) КАК ПредварительнаяСтоимостьРегл,
	|	СУММА(СтоимостьВНА.РезервПереоценкиСтоимости + ЕСТЬNULL(СтоимостьВНА_Движения.РезервПереоценкиСтоимости, 0)) КАК РезервПереоценкиСтоимости,
	|	СУММА(СтоимостьВНА.РезервПереоценкиСтоимостиРегл + ЕСТЬNULL(СтоимостьВНА_Движения.РезервПереоценкиСтоимостиРегл, 0)) КАК РезервПереоценкиСтоимостиРегл,
	|	СУММА(СтоимостьВНА.ПриростСтоимости + ЕСТЬNULL(СтоимостьВНА_Движения.ПриростСтоимости, 0)) КАК ПриростСтоимости,
	|	СУММА(СтоимостьВНА.ПриростСтоимостиРегл + ЕСТЬNULL(СтоимостьВНА_Движения.ПриростСтоимостиРегл, 0)) КАК ПриростСтоимостиРегл,
	|	ВЫБОР
	|		КОГДА СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) = 0
	|				ИЛИ СУММА(СтоимостьВНА.СтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьРегл, 0)) + СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)) / (СУММА(СтоимостьВНА.СтоимостьРегл + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьРегл, 0)) + СУММА(СтоимостьВНА.СтоимостьЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьЦФ, 0)))
	|	КОНЕЦ КАК ДоляЦФБУ,
	|	ВЫБОР
	|		КОГДА СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) = 0
	|				ИЛИ СУММА(СтоимостьВНА.СтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУ, 0)) + СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)) / (СУММА(СтоимостьВНА.СтоимостьНУ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУ, 0)) + СУММА(СтоимостьВНА.СтоимостьНУЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьНУЦФ, 0)))
	|	КОНЕЦ КАК ДоляЦФНУ,
	|	ВЫБОР
	|		КОГДА СУММА(СтоимостьВНА.СтоимостьПРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПРЦФ, 0)) = 0
	|				ИЛИ СУММА(СтоимостьВНА.СтоимостьПР + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПР, 0)) + СУММА(СтоимостьВНА.СтоимостьПРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПРЦФ, 0)) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(СтоимостьВНА.СтоимостьПРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПРЦФ, 0)) / (СУММА(СтоимостьВНА.СтоимостьПР + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПР, 0)) + СУММА(СтоимостьВНА.СтоимостьПРЦФ + ЕСТЬNULL(СтоимостьВНА_Движения.СтоимостьПРЦФ, 0)))
	|	КОНЕЦ КАК ДоляЦФПР
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА
	|ИЗ
	|	ВТ_СтоимостьВНА_Исходная КАК СтоимостьВНА
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтоимостьВНА_Движения КАК СтоимостьВНА_Движения
	|		ПО СтоимостьВНА.ОбъектУчета = СтоимостьВНА_Движения.ОбъектУчета
	|			И СтоимостьВНА.Организация = СтоимостьВНА_Движения.Организация
	|			И СтоимостьВНА.Дата >= СтоимостьВНА_Движения.Дата
	|			И СтоимостьВНА.Ссылка <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	СтоимостьВНА.Ссылка,
	|	СтоимостьВНА.Дата,
	|	СтоимостьВНА.Организация,
	|	СтоимостьВНА.ОбъектУчета,
	|	СтоимостьВНА.ЗабалансовыйУчет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	#Область ВТ_АмортизацияВНА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	АмортизацияВНА.Ссылка КАК Ссылка,
	|	АмортизацияВНА.Дата КАК Дата,
	|	АмортизацияВНА.Организация КАК Организация,
	|	АмортизацияВНА.ОбъектУчета КАК ОбъектУчета,
	|	АмортизацияВНА.НачислятьИзнос КАК НачислятьИзнос,
	|	СУММА(АмортизацияВНА.Амортизация) КАК Амортизация,
	|	СУММА(АмортизацияВНА.АмортизацияРегл) КАК АмортизацияРегл,
	|	СУММА(АмортизацияВНА.АмортизацияНУ) КАК АмортизацияНУ,
	|	СУММА(АмортизацияВНА.АмортизацияПР) КАК АмортизацияПР,
	|	СУММА(АмортизацияВНА.АмортизацияВР) КАК АмортизацияВР,
	|	СУММА(АмортизацияВНА.АмортизацияЦФ) КАК АмортизацияЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияНУЦФ) КАК АмортизацияНУЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияПРЦФ) КАК АмортизацияПРЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияВРЦФ) КАК АмортизацияВРЦФ,
	|	СУММА(АмортизацияВНА.РезервПереоценкиАмортизации) КАК РезервПереоценкиАмортизации,
	|	СУММА(АмортизацияВНА.РезервПереоценкиАмортизацииРегл) КАК РезервПереоценкиАмортизацииРегл
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		АмортизацияВНА.Ссылка КАК Ссылка,
	|		АмортизацияВНА.Дата КАК Дата,
	|		АмортизацияВНА.Организация КАК Организация,
	|		АмортизацияВНА.ОбъектУчета КАК ОбъектУчета,
	|		АмортизацияВНА.НачислятьИзнос КАК НачислятьИзнос,
	|		АмортизацияВНА.Амортизация КАК Амортизация,
	|		АмортизацияВНА.АмортизацияРегл КАК АмортизацияРегл,
	|		АмортизацияВНА.АмортизацияНУ КАК АмортизацияНУ,
	|		АмортизацияВНА.АмортизацияПР КАК АмортизацияПР,
	|		АмортизацияВНА.АмортизацияВР КАК АмортизацияВР,
	|		АмортизацияВНА.АмортизацияЦФ КАК АмортизацияЦФ,
	|		АмортизацияВНА.АмортизацияНУЦФ КАК АмортизацияНУЦФ,
	|		АмортизацияВНА.АмортизацияПРЦФ КАК АмортизацияПРЦФ,
	|		АмортизацияВНА.АмортизацияВРЦФ КАК АмортизацияВРЦФ,
	|		АмортизацияВНА.РезервПереоценкиАмортизации КАК РезервПереоценкиАмортизации,
	|		АмортизацияВНА.РезервПереоценкиАмортизацииРегл КАК РезервПереоценкиАмортизацииРегл
	|	ИЗ
	|		ВТ_АмортизацияВНА_Исходная КАК АмортизацияВНА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		НЕ НачислениеИзноса.ОбъектУчета ЕСТЬ NULL КАК НачислятьИзнос,
	|		АмортизацияВНА_Движения.Амортизация КАК Амортизация,
	|		АмортизацияВНА_Движения.АмортизацияРегл КАК АмортизацияРегл,
	|		АмортизацияВНА_Движения.АмортизацияНУ КАК АмортизацияНУ,
	|		АмортизацияВНА_Движения.АмортизацияПР КАК АмортизацияПР,
	|		АмортизацияВНА_Движения.АмортизацияВР КАК АмортизацияВР,
	|		АмортизацияВНА_Движения.АмортизацияЦФ КАК АмортизацияЦФ,
	|		АмортизацияВНА_Движения.АмортизацияНУЦФ КАК АмортизацияНУЦФ,
	|		АмортизацияВНА_Движения.АмортизацияПРЦФ КАК АмортизацияПРЦФ,
	|		АмортизацияВНА_Движения.АмортизацияВРЦФ КАК АмортизацияВРЦФ,
	|		АмортизацияВНА_Движения.РезервПереоценкиАмортизации КАК РезервПереоценкиАмортизации,
	|		АмортизацияВНА_Движения.РезервПереоценкиАмортизацииРегл КАК РезервПереоценкиАмортизацииРегл
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ АмортизацияВНА_Движения КАК АмортизацияВНА_Движения
	|			ПО АмортизацияВНА_Движения.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|				И АмортизацияВНА_Движения.Организация = ДанныеКРасчету.Организация
	|				И АмортизацияВНА_Движения.Дата <= ДанныеКРасчету.Дата
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ НачислениеИзноса КАК НачислениеИзноса
	|			ПО НачислениеИзноса.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|		ГДЕ
	|			ДанныеКРасчету.Ссылка <> &Регистратор
	|
	|	) КАК АмортизацияВНА
	|	
	|СГРУППИРОВАТЬ ПО
	|	АмортизацияВНА.Ссылка,
	|	АмортизацияВНА.Дата,
	|	АмортизацияВНА.Организация,
	|	АмортизацияВНА.ОбъектУчета,
	|	АмортизацияВНА.НачислятьИзнос
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ВТ_ОбесценениеВНА
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбесценениеВНА.Ссылка КАК Ссылка,
	|	ОбесценениеВНА.Дата КАК Дата,
	|	ОбесценениеВНА.Организация КАК Организация,
	|	ОбесценениеВНА.ОбъектУчета КАК ОбъектУчета,
	|	МАКСИМУМ(ОбесценениеВНА.ЕГДС) КАК ЕГДС,
	|	СУММА(ОбесценениеВНА.ОбесценениеУпр) КАК ОбесценениеУпр,
	|	СУММА(ОбесценениеВНА.ОбесценениеРегл) КАК ОбесценениеРегл
	|ПОМЕСТИТЬ ВТ_ОбесценениеВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОбесценениеВНА.Ссылка КАК Ссылка,
	|		ОбесценениеВНА.Дата КАК Дата,
	|		ОбесценениеВНА.Организация КАК Организация,
	|		ОбесценениеВНА.ОбъектУчета КАК ОбъектУчета,
	|		ОбесценениеВНА.ЕГДС КАК ЕГДС,
	|		ОбесценениеВНА.ОбесценениеУпр КАК ОбесценениеУпр,
	|		ОбесценениеВНА.ОбесценениеРегл КАК ОбесценениеРегл
	|	ИЗ
	|		ВТ_ОбесценениеВНА_Исходная КАК ОбесценениеВНА
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ДанныеКРасчету.Ссылка КАК Ссылка,
	|		ДанныеКРасчету.Дата КАК Дата,
	|		ДанныеКРасчету.Организация КАК Организация,
	|		ДанныеКРасчету.ОбъектУчета КАК ОбъектУчета,
	|		ОбесценениеВНА_Движения.ЕГДС КАК ЕГДС,
	|		ОбесценениеВНА_Движения.ОбесценениеУпр КАК ОбесценениеУпр,
	|		ОбесценениеВНА_Движения.ОбесценениеРегл КАК ОбесценениеРегл
	|	ИЗ
	|		ДанныеКРасчету КАК ДанныеКРасчету
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбесценениеВНА_Движения КАК ОбесценениеВНА_Движения
	|			ПО ОбесценениеВНА_Движения.ОбъектУчета = ДанныеКРасчету.ОбъектУчета
	|				И ОбесценениеВНА_Движения.Организация = ДанныеКРасчету.Организация
	|				И ОбесценениеВНА_Движения.Дата <= ДанныеКРасчету.Дата
	|		ГДЕ
	|			ДанныеКРасчету.Ссылка <> &Регистратор
	|
	|	) КАК ОбесценениеВНА
	|	
	|СГРУППИРОВАТЬ ПО
	|	ОбесценениеВНА.Ссылка,
	|	ОбесценениеВНА.Дата,
	|	ОбесценениеВНА.Организация,
	|	ОбесценениеВНА.ОбъектУчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОбъектУчета,
	|	Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ВТ_РасчетыПоФинансовымИнструментам
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НовыеДанные.Ссылка КАК Ссылка,
	|	НовыеДанные.Дата КАК Дата,
	|	НовыеДанные.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	НовыеДанные.Договор КАК Договор,
	|	НовыеДанные.ТипСуммы КАК ТипСуммы,
	|	НовыеДанные.РасчетныйДокумент КАК РасчетныйДокумент,
	|	НовыеДанные.Валюта КАК Валюта,
	|	СУММА(НовыеДанные.Сумма) КАК Сумма,
	|	СУММА(НовыеДанные.СуммаУпр) КАК СуммаУпр,
	|	СУММА(НовыеДанные.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ ВТ_РасчетыПоФинансовымИнструментам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИсходная.Ссылка КАК Ссылка,
	|		ТаблицаИсходная.Дата КАК Дата,
	|		ТаблицаИсходная.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ТаблицаИсходная.Договор КАК Договор,
	|		ТаблицаИсходная.ТипСуммы КАК ТипСуммы,
	|		ТаблицаИсходная.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ТаблицаИсходная.Валюта КАК Валюта,
	|		ТаблицаИсходная.Сумма КАК Сумма,
	|		ТаблицаИсходная.СуммаУпр КАК СуммаУпр,
	|		ТаблицаИсходная.СуммаРегл КАК СуммаРегл
	|	ИЗ
	|		ВТ_РасчетыПоФинансовымИнструментам_Исходная КАК ТаблицаИсходная
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТаблицаИсходная.Ссылка КАК Ссылка,
	|		ТаблицаИсходная.Дата КАК Дата,
	|		ТаблицаДвижения.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		ТаблицаИсходная.Договор КАК Договор,
	|		ТаблицаДвижения.ТипСуммы КАК ТипСуммы,
	|		ТаблицаДвижения.РасчетныйДокумент КАК РасчетныйДокумент,
	|		ТаблицаДвижения.Валюта КАК Валюта,
	|		ТаблицаДвижения.Сумма КАК Сумма,
	|		ТаблицаДвижения.СуммаУпр КАК СуммаУпр,
	|		ТаблицаДвижения.СуммаРегл КАК СуммаРегл
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ТаблицаИсходная.Ссылка КАК Ссылка,
	|			ТаблицаИсходная.Дата КАК Дата,
	|			ТаблицаИсходная.Договор КАК Договор
	|		ИЗ
	|			ВТ_РасчетыПоФинансовымИнструментам_Исходная КАК ТаблицаИсходная
	|		ГДЕ
	|			ТаблицаИсходная.Ссылка <> &Регистратор) КАК ТаблицаИсходная
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РасчетыПоФинансовымИнструментам_Движения КАК ТаблицаДвижения
	|			ПО ТаблицаДвижения.Договор = ТаблицаИсходная.Договор
	|				И ТаблицаДвижения.Дата <= ТаблицаИсходная.Дата
	|
	|	) КАК НовыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	НовыеДанные.Ссылка,
	|	НовыеДанные.Дата,
	|	НовыеДанные.АналитикаУчетаПоПартнерам,
	|	НовыеДанные.Договор,
	|	НовыеДанные.ТипСуммы,
	|	НовыеДанные.РасчетныйДокумент,
	|	НовыеДанные.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	Договор";
	ТекстыЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	ТекстЗапроса = СтрСоединить(ТекстыЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	ИспользуемыеВТ = ОбщегоНазначенияУТ.СписокВременныхТаблиц(МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);
	
КонецПроцедуры

Процедура УстановитьПараметрыЗапросаСодержащегоТекстыЗапросаОтложенногоФормированияДвижений(Запрос)

	Запрос.УстановитьПараметр("ТипыДокументов", ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения());
	Запрос.УстановитьПараметр("ТипыДокументовКоторыеМогутИзменитьСтоимость", ТипыДокументовКоторыеМогутИзменитьСтоимость());
	Запрос.УстановитьПараметр("ТипыДокументовКоторыеМогутНачислитьАмортизацию", ТипыДокументовКоторыеМогутНачислитьАмортизацию());
	Запрос.УстановитьПараметр("ТипыДокументовКоторыеИзменяютСтоимостьВКонцеМесяца", ТипыДокументовКоторыеИзменяютСтоимостьВКонцеМесяца());
	Запрос.УстановитьПараметр("РегламентированныйУчетВНА", ПолучитьФункциональнуюОпцию("РегламентированныйУчетВНА"));
	
КонецПроцедуры

Процедура УстановитьПризнакВыполненияОтложенногоФормированияДвижений(ДокументОбъект) Экспорт
	
	ДокументОбъект.ДополнительныеСвойства.Вставить(ИмяПризнакаВыполненияОтложенногоФормированияДвижений(), Истина);
	
КонецПроцедуры

Функция ИмяПризнакаВыполненияОтложенногоФормированияДвижений()
	Возврат "ОтложенноеФормированиеДвиженийВНА";
КонецФункции

#КонецОбласти

#Область РасчетДвиженийПоКомпонентамАмортизации

Процедура СформироватьДвиженияПоКомпонентамАмортизации(ДанныеКРасчетуЗаМесяц)
	
	МенеджерВременныхТаблиц = ДанныеКРасчетуЗаМесяц.ВременныеТаблицы;
	
	ЗапросДокументов = Новый Запрос();
	ЗапросДокументов.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросДокументов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыПоОС.ОсновноеСредство КАК ОсновноеСредство,
	|	КэшГраниц.Документ КАК Ссылка,
	|	ДокументыПоОС.Организация,
	|	ДокументыПоОС.Дата
	|ПОМЕСТИТЬ ОбъектыВНА_Предварительная
	|ИЗ
	|	РегистрСведений.ДокументыПоОС КАК ДокументыПоОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КэшГраниц КАК КэшГраниц
	|		ПО ДокументыПоОС.Ссылка = КэшГраниц.Документ
	|		И ДокументыПоОС.Проведен
	|ГДЕ
	|	ДокументыПоОС.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
	|ПОМЕСТИТЬ УзлыОсновныхСредств
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА_Предварительная КАК ОбъектыВНА
	|		ПО УзлыКомпоненты.ОсновноеСредство = ОбъектыВНА.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УзелКомпонент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОбъектыВНА.Ссылка КАК Ссылка,
	|	МАКСИМУМ(УзлыКомпонентыАмортизации.Период) КАК Период,
	|	УзлыКомпонентыАмортизации.УзелКомпонент КАК УзелКомпонент
	|ПОМЕСТИТЬ МаксимумыУзловКомпонентов
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УзлыОсновныхСредств КАК УзлыОсновныхСредств
	|		ПО УзлыКомпонентыАмортизации.УзелКомпонент = УзлыОсновныхСредств.УзелКомпонент
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА_Предварительная КАК ОбъектыВНА
	|		ПО УзлыКомпонентыАмортизации.Период <= ОбъектыВНА.Дата
	|СГРУППИРОВАТЬ ПО
	|	ОбъектыВНА.Ссылка,
	|	УзлыКомпонентыАмортизации.УзелКомпонент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	УзелКомпонент
	|;
	|
	|//////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ УзлыОсновныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УзлыКомпонентыАмортизации.УзелКомпонент КАК УзелКомпонент,
	|	ОбъектыВНА.ОсновноеСредство КАК ОсновноеСредство,
	|	ОбъектыВНА.Ссылка КАК Ссылка,
	|	ОбъектыВНА.Организация КАК Организация,
	|	ОбъектыВНА.Дата КАК Дата
	|ПОМЕСТИТЬ ОбъектыВНА
	|ИЗ
	|	ОбъектыВНА_Предварительная КАК ОбъектыВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ МаксимумыУзловКомпонентов КАК МаксимумыУзловКомпонентов
	|		ПО ОбъектыВНА.Ссылка = МаксимумыУзловКомпонентов.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпонентыАмортизации
	|		ПО МаксимумыУзловКомпонентов.Период = УзлыКомпонентыАмортизации.Период
	|		И МаксимумыУзловКомпонентов.УзелКомпонент = УзлыКомпонентыАмортизации.УзелКомпонент
	|		И ОбъектыВНА.ОсновноеСредство = УзлыКомпонентыАмортизации.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ МаксимумыУзловКомпонентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОбъектыВНА_Предварительная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КэшГраниц.Документ КАК Ссылка,
	|	КэшГраниц.Организация
	|ИЗ
	|	КэшГраниц КАК КэшГраниц
	|";
	
	Выборка = ЗапросДокументов.Выполнить().Выбрать();
	
	ИспользуемыеВТ = "КэшГраниц,ОбъектыВНА";
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Ссылка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ИспользуемыеВТ);

		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Ссылка", Выборка.Ссылка);
		Запрос.УстановитьПараметр("Период", Выборка.Ссылка.Дата);
		Запрос.УстановитьПараметр("Организация", Выборка.Организация);
		Запрос.УстановитьПараметр("ГраницаДокумента", Новый Граница(Выборка.Ссылка.МоментВремени(),ВидГраницы.Включая));
		
		ТекстыЗапроса = Новый СписокЗначений;
		ТекстЗапросаМестонахождениеОС(Запрос, ТекстыЗапроса, Выборка);
		ТекстЗапросаПорядокУчетаОС(Запрос, ТекстыЗапроса, Выборка);
		ТекстЗапросаПорядокУчетаОСУУ(Запрос, ТекстыЗапроса, Выборка);
		ТекстЗапросаСоставЕГДС(Запрос, ТекстыЗапроса, Выборка);
		
		ВнеоборотныеАктивыЛокализация.ДополнитьТаблицыДвиженийПоКомпонентамАмортизации(Запрос, ТекстыЗапроса, Выборка.Ссылка);
		
		ТаблицыДляДвижений = ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(
								Запрос, ТекстыЗапроса, Неопределено);
		
		ДокументОбъект = ПроведениеДокументов.ЭмуляцияДокумента(Выборка.Ссылка, Выборка.Ссылка.Дата);
		ВнеоборотныеАктивы.УстановитьПризнакВыполненияОтложенногоФормированияДвижений(ДокументОбъект);
		
		ВнеоборотныеАктивыСлужебный.ЗаписатьТаблицыДвижений(ТаблицыДляДвижений, ДокументОбъект, МенеджерВременныхТаблиц);

	КонецЦикла;
		
КонецПроцедуры

Процедура ТекстЗапросаМестонахождениеОС(Запрос, ТекстыЗапроса, Выборка)

	ИмяРегистра = "МестонахождениеОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяРегистра, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Выборка.Ссылка.Метаданные();
	Если Не МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.МестонахождениеОС) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.Период,
	|	МестонахождениеОС.Регистратор,
	|	МестонахождениеОС.ОсновноеСредство,
	|	МестонахождениеОС.Организация,
	|	МестонахождениеОС.МОЛ,
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение,
	|	МестонахождениеОС.Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора,
	|	МестонахождениеОС.ОтражатьВРеглУчете,
	|	МестонахождениеОС.ОтражатьВУпрУчете
	|ИЗ
	|	РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
	|ГДЕ
	|	МестонахождениеОС.Регистратор = &Ссылка
	|	И МестонахождениеОС.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МестонахождениеОС.Период,
	|	МестонахождениеОС.Регистратор,
	|	ОбъектыВНА.УзелКомпонент,
	|	МестонахождениеОС.Организация,
	|	МестонахождениеОС.МОЛ,
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение,
	|	МестонахождениеОС.Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора,
	|	МестонахождениеОС.ОтражатьВРеглУчете,
	|	МестонахождениеОС.ОтражатьВУпрУчете
	|ИЗ
	|	РегистрСведений.МестонахождениеОС КАК МестонахождениеОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|		И ОбъектыВНА.Ссылка = МестонахождениеОС.Регистратор
	|ГДЕ
	|	МестонахождениеОС.Регистратор = &Ссылка
	|	И МестонахождениеОС.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ОбъектыВНА.УзелКомпонент,
	|	МестонахождениеОС.Организация,
	|	МестонахождениеОС.МОЛ,
	|	МестонахождениеОС.Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение,
	|	МестонахождениеОС.Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора,
	|	МестонахождениеОС.ОтражатьВРеглУчете,
	|	МестонахождениеОС.ОтражатьВУпрУчете
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.ОсновноеСредство,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК МестонахождениеОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|			И ОбъектыВНА.Ссылка = &Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС КАК ТекущиеДвижения
	|		ПО ОбъектыВНА.ОсновноеСредство = ТекущиеДвижения.ОсновноеСредство
	|			И ТекущиеДвижения.Регистратор = &Ссылка
	|ГДЕ
	|	ТекущиеДвижения.Регистратор ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаПорядокУчетаОС(Запрос, ТекстыЗапроса, Выборка)

	ИмяРегистра = "ПорядокУчетаОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяРегистра, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Выборка.Ссылка.Метаданные();
	Если Не МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.ПорядокУчетаОС) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОС.Период,
	|	ПорядокУчетаОС.Регистратор,
	|	ПорядокУчетаОС.ОсновноеСредство,
	|	ПорядокУчетаОС.ГруппаФинансовогоУчета,
	|	ПорядокУчетаОС.НаправлениеДеятельности,
	|	ПорядокУчетаОС.ПоказательНаработки,
	|	ПорядокУчетаОС.ОбъемНаработки,
	|	ПорядокУчетаОС.СчетУчета,
	|	ПорядокУчетаОС.СчетНачисленияАмортизации,
	|	ПорядокУчетаОС.СчетЗабалансовогоУчета,
	|	ПорядокУчетаОС.Организация,
	|	ПорядокУчетаОС.ОтражатьВРеглУчете,
	|	ПорядокУчетаОС.ОтражатьВУпрУчете
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК ПорядокУчетаОС
	|ГДЕ
	|	ПорядокУчетаОС.Регистратор = &Ссылка
	|	И ПорядокУчетаОС.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПорядокУчетаОС.Период,
	|	ПорядокУчетаОС.Регистратор,
	|	ОбъектыВНА.УзелКомпонент,
	|	ПорядокУчетаУзловКомпонентов.ГруппаФинансовогоУчета,
	|	ПорядокУчетаОС.НаправлениеДеятельности,
	|	ПорядокУчетаУзловКомпонентов.ПоказательНаработки,
	|	ПорядокУчетаУзловКомпонентов.ОбъемНаработки,
	|	ПорядокУчетаОС.СчетУчета,
	|	ПорядокУчетаОС.СчетНачисленияАмортизации,
	|	ПорядокУчетаОС.СчетЗабалансовогоУчета,
	|	ПорядокУчетаУзловКомпонентов.Организация,
	|	ПорядокУчетаУзловКомпонентов.ОтражатьВРеглУчете,
	|	ПорядокУчетаУзловКомпонентов.ОтражатьВУпрУчете
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК ПорядокУчетаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
	|		И ОбъектыВНА.Ссылка = ПорядокУчетаОС.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.УзелКомпонент,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК ПорядокУчетаУзловКомпонентов
	|		ПО ОбъектыВНА.УзелКомпонент = ПорядокУчетаУзловКомпонентов.ОсновноеСредство
	|ГДЕ
	|	ПорядокУчетаОС.Регистратор = &Ссылка
	|	И ПорядокУчетаОС.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ОбъектыВНА.УзелКомпонент,
	|	ПорядокУчетаУзловКомпонентов.ГруппаФинансовогоУчета,
	|	ПорядокУчетаОС.НаправлениеДеятельности,
	|	ПорядокУчетаУзловКомпонентов.ПоказательНаработки,
	|	ПорядокУчетаУзловКомпонентов.ОбъемНаработки,
	|	ПорядокУчетаОС.СчетУчета,
	|	ПорядокУчетаОС.СчетНачисленияАмортизации,
	|	ПорядокУчетаОС.СчетЗабалансовогоУчета,
	|	ПорядокУчетаУзловКомпонентов.Организация,
	|	ПорядокУчетаУзловКомпонентов.ОтражатьВРеглУчете,
	|	ПорядокУчетаУзловКомпонентов.ОтражатьВУпрУчете
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.ОсновноеСредство,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК ПорядокУчетаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
	|			И ОбъектыВНА.Ссылка = &Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.УзелКомпонент,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК ПорядокУчетаУзловКомпонентов
	|		ПО ОбъектыВНА.УзелКомпонент = ПорядокУчетаУзловКомпонентов.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС КАК ТекущиеДвижения
	|		ПО ОбъектыВНА.ОсновноеСредство = ТекущиеДвижения.ОсновноеСредство
	|			И ТекущиеДвижения.Регистратор = &Ссылка
	|ГДЕ
	|	ТекущиеДвижения.Регистратор ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаПорядокУчетаОСУУ(Запрос, ТекстыЗапроса, Выборка)

	ИмяРегистра = "ПорядокУчетаОСУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяРегистра, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Выборка.Ссылка.Метаданные();
	Если Не МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОСУУ.Период,
	|	ПорядокУчетаОСУУ.Регистратор,
	|	ПорядокУчетаОСУУ.ОсновноеСредство,
	|	ПорядокУчетаОСУУ.Организация,
	|	ПорядокУчетаОСУУ.Состояние,
	|	ПорядокУчетаОСУУ.НачислятьАмортизациюУУ,
	|	ПорядокУчетаОСУУ.СпособОтраженияРасходов,
	|	ПорядокУчетаОСУУ.СтатьяРасходов,
	|	ПорядокУчетаОСУУ.АналитикаРасходов,
	|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
	|ГДЕ
	|	ПорядокУчетаОСУУ.Регистратор = &Ссылка
	|	И ПорядокУчетаОСУУ.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПорядокУчетаОСУУ.Период,
	|	ПорядокУчетаОСУУ.Регистратор,
	|	ОбъектыВНА.УзелКомпонент,
	|	ПорядокУчетаОСУУ.Организация,
	|	ПорядокУчетаУзловКомпонентов.Состояние,
	|	ПорядокУчетаУзловКомпонентов.НачислятьАмортизациюУУ,
	|	ПорядокУчетаОСУУ.СпособОтраженияРасходов,
	|	ПорядокУчетаОСУУ.СтатьяРасходов,
	|	ПорядокУчетаОСУУ.АналитикаРасходов,
	|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
	|		И ОбъектыВНА.Ссылка = ПорядокУчетаОСУУ.Регистратор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.УзелКомпонент,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК ПорядокУчетаУзловКомпонентов
	|		ПО ОбъектыВНА.УзелКомпонент = ПорядокУчетаУзловКомпонентов.ОсновноеСредство
	|ГДЕ
	|	ПорядокУчетаОСУУ.Регистратор = &Ссылка
	|	И ПорядокУчетаОСУУ.ОсновноеСредство.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ОбъектыВНА.УзелКомпонент,
	|	ПорядокУчетаОСУУ.Организация,
	|	ПорядокУчетаУзловКомпонентов.Состояние,
	|	ПорядокУчетаУзловКомпонентов.НачислятьАмортизациюУУ,
	|	ПорядокУчетаОСУУ.СпособОтраженияРасходов,
	|	ПорядокУчетаОСУУ.СтатьяРасходов,
	|	ПорядокУчетаОСУУ.АналитикаРасходов,
	|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.ОсновноеСредство,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК ПорядокУчетаОСУУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = ПорядокУчетаОСУУ.ОсновноеСредство
	|			И ОбъектыВНА.Ссылка = &Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&ГраницаДокумента,
	|			(ОсновноеСредство, Организация) В
	|			(ВЫБРАТЬ
	|				Т.УзелКомпонент,
	|				Т.Организация
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК ПорядокУчетаУзловКомпонентов
	|		ПО ОбъектыВНА.УзелКомпонент = ПорядокУчетаУзловКомпонентов.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ТекущиеДвижения
	|		ПО ОбъектыВНА.ОсновноеСредство = ТекущиеДвижения.ОсновноеСредство
	|			И ТекущиеДвижения.Регистратор = &Ссылка
	|ГДЕ
	|	ТекущиеДвижения.Регистратор ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаСоставЕГДС(Запрос, ТекстыЗапроса, Выборка)

	ИмяРегистра = "СоставЕГДС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяРегистра, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеДокумента = Выборка.Ссылка.Метаданные();
	Если Не МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыСведений.СоставЕГДС) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СоставЕГДС.Период,
	|	СоставЕГДС.Регистратор,
	|	СоставЕГДС.ВнеоборотныйАктив,
	|	СоставЕГДС.Организация,
	|	СоставЕГДС.ЕГДС
	|ИЗ
	|	РегистрСведений.СоставЕГДС КАК СоставЕГДС
	|ГДЕ
	|	СоставЕГДС.Регистратор = &Ссылка
	|	И СоставЕГДС.ВнеоборотныйАктив.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СоставЕГДС.Период,
	|	СоставЕГДС.Регистратор,
	|	ОбъектыВНА.УзелКомпонент,
	|	СоставЕГДС.Организация,
	|	СоставЕГДС.ЕГДС
	|ИЗ
	|	РегистрСведений.СоставЕГДС КАК СоставЕГДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = СоставЕГДС.ВнеоборотныйАктив
	|		И ОбъектыВНА.Ссылка = СоставЕГДС.Регистратор
	|ГДЕ
	|	СоставЕГДС.Регистратор = &Ссылка
	|	И СоставЕГДС.ВнеоборотныйАктив.ТипОС В (
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|		 ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	&Ссылка,
	|	ОбъектыВНА.УзелКомпонент,
	|	СоставЕГДС.Организация,
	|	СоставЕГДС.ЕГДС
	|ИЗ
	|	РегистрСведений.СоставЕГДС.СрезПоследних(&ГраницаДокумента, ВнеоборотныйАктив В
	|			(ВЫБРАТЬ
	|				Т.ОсновноеСредство
	|			ИЗ
	|				ОбъектыВНА КАК Т
	|			ГДЕ
	|				Т.Ссылка = &Ссылка)) КАК СоставЕГДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОбъектыВНА КАК ОбъектыВНА
	|		ПО ОбъектыВНА.ОсновноеСредство = СоставЕГДС.ВнеоборотныйАктив
	|			И ОбъектыВНА.Ссылка = &Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставЕГДС КАК ТекущиеДвижения
	|		ПО ОбъектыВНА.ОсновноеСредство = ТекущиеДвижения.ВнеоборотныйАктив
	|			И ТекущиеДвижения.Регистратор = &Ссылка
	|ГДЕ
	|	ТекущиеДвижения.Регистратор ЕСТЬ NULL
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ЗаданияКЗакрытиюМесяца

Процедура ОпределитьИзмененияВРегистреПрочиеРасходыДляРасчетаСтоимостиВНА(ДанныеТаблиц)
	
	Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ТаблицаИзмененийПрочиеРасходы") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период            КАК Период,
	|	Таблица.Организация       КАК Организация,
	|	Таблица.АналитикаРасходов КАК ОбъектУчета,
	|	Таблица.Регистратор       КАК Документ
	|ПОМЕСТИТЬ ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение
	|ИЗ
	|	ТаблицаИзмененийПрочиеРасходы КАК Таблица
	|ГДЕ
	|	(Таблица.АналитикаРасходов ССЫЛКА Справочник.ОбъектыЭксплуатации
	|		ИЛИ Таблица.АналитикаРасходов ССЫЛКА Справочник.ОбъектыСтроительства
	|		ИЛИ Таблица.АналитикаРасходов ССЫЛКА Справочник.НематериальныеАктивы)
	|	И Таблица.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|	И (Таблица.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|			ИЛИ Таблица.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеТаблиц.Вставить("ПрочиеРасходы_ЗаданияКРасчетуСтоимостиВНАИзменение", Выборка.Количество > 0);
	
КонецПроцедуры

Процедура СформироватьТаблицуРасчетыПоФинансовымИнструментамВРазрезеОС(ДанныеТаблиц)

	Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("РасчетыПоФинансовымИнструментамИзменение") = Неопределено Тогда
		Возврат;	
	КонецЕсли;
		
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таблица.Период                  КАК Период,
	|	Таблица.Организация             КАК Организация,
	|	АрендованныеОС.ОсновноеСредство КАК ОбъектУчета,
	|	Таблица.Регистратор             КАК Документ
	|ПОМЕСТИТЬ РасчетыПоФинансовымИнструментамВРазрезеОСИзменение
	|ИЗ
	|	РасчетыПоФинансовымИнструментамИзменение КАК Таблица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС КАК АрендованныеОС
	|		ПО АрендованныеОС.Договор = Таблица.Договор
	|ГДЕ
	|	Таблица.Договор ССЫЛКА Справочник.ДоговорыАренды";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	ДанныеТаблиц.Вставить("РасчетыПоФинансовымИнструментамВРазрезеОСИзменение", Выборка.Количество > 0);
	
КонецПроцедуры

Процедура СформироватьЗаданияКРасчетуАмортизацииОС(Документ, ДанныеТаблиц)
	
	Если ДвиженияЗаписываютсяПриОтложенномФормированииДвижений(Документ) 
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ПервоначальныеСведенияОС");
	СписокТаблиц.Добавить("ПорядокУчетаОС");
	СписокТаблиц.Добавить("ПорядокУчетаОСУУ");
	СписокТаблиц.Добавить("ПараметрыАмортизацииОСУУ");
	СписокТаблиц.Добавить("МестонахождениеОС");
	СписокТаблиц.Добавить("СтоимостьОС");
	СписокТаблиц.Добавить("НаработкиОбъектовЭксплуатации");
	
	ВнеоборотныеАктивыЛокализация.ДополнитьСписокТаблицДляФормированияЗаданийКРасчетуАмортизацииОС(СписокТаблиц);
	
	СписокДопПолей = "ОсновноеСредство,ОтражатьВРеглУчете,ОтражатьВУпрУчете";
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей);
	
	// При корректировке стоимости и амортизации нельзя до формирования движений узнать есть ли отклонения.
	// Поэтому задание формируется всегда.
	ЗарегистрироватьДокумент = 
		Документ <> Неопределено
		И ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииОС");
		
	Если ТекстОбъединенияДанных = "" И НЕ ЗарегистрироватьДокумент Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗарегистрироватьДокумент Тогда
		
		СписокЗапросовОбъединение = Новый Массив;
		
		Если ТекстОбъединенияДанных <> "" Тогда
			СписокЗапросовОбъединение.Добавить(ТекстОбъединенияДанных);
		КонецЕсли; 
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Дата КАК Период,
		|	ИзмененныеДанные.Организация КАК Организация,
		|	ИзмененныеДанные.Ссылка КАК Документ,
		|	"""" КАК ИмяТаблицы,
		|	ИзмененныеДанные.ОсновноеСредство КАК ОсновноеСредство,
		|	ИзмененныеДанные.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ИзмененныеДанные.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
		|ИЗ
		|	РегистрСведений.ДокументыПоОС КАК ИзмененныеДанные
		|ГДЕ
		|	ИзмененныеДанные.Ссылка = &Ссылка";
		
		СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
		
		ТекстОбъединенияДанных = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	КонецЕсли; 
		
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаДляФормированияЗаданийКРасчетуАмортизацииОС(
						ДанныеТаблиц, ТекстОбъединенияДанных);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		СписокЗапросов = Новый Массив;
		
		#Область ИзмененныеДанные
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.ИмяТаблицы                      КАК ИмяТаблицы,
		|	ИзмененныеДанные.Организация                     КАК Организация,
		|	ИзмененныеДанные.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ИзмененныеДанные.ОсновноеСредство                КАК ОсновноеСредство,
		|	ИзмененныеДанные.Документ                        КАК Документ,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВРеглУчете)    КАК ОтражатьВРеглУчете,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВУпрУчете)     КАК ОтражатьВУпрУчете,
		|	МИНИМУМ(ИзмененныеДанные.Период)                 КАК Период
		|
		|ПОМЕСТИТЬ ВсеИзмененныеДанные
		|ИЗ
		|	&ТекстОбъединенияДанных КАК ИзмененныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.ИмяТаблицы,
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.ОсновноеСредство,
		|	ИзмененныеДанные.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетнаяПолитикаФинансовогоУчетаПоследнее.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	УчетнаяПолитикаФинансовогоУчетаПоследнее.Период КАК Период,
		|	УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации КАК ПорядокНачисленияАмортизации
		|ПОМЕСТИТЬ УчетнаяПолитикаФинансовогоУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВсеИзмененныеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|		ВсеИзмененныеДанные.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаФинансовогоУчетаПоследнее.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВсеИзмененныеДанные КАК ВсеИзмененныеДанные
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчетаПоследнее
		|			ПО УчетнаяПолитикаФинансовогоУчетаПоследнее.Организация = ВсеИзмененныеДанные.ГоловнаяОрганизация
		|				И УчетнаяПолитикаФинансовогоУчетаПоследнее.Период <= ВсеИзмененныеДанные.Период
		|
		|	СГРУППИРОВАТЬ ПО
		|		ВсеИзмененныеДанные.ГоловнаяОрганизация,
		|		ВсеИзмененныеДанные.Период
		|	
		|	) КАК УчетнаяПолитикаФинансовогоУчетаПоследнее
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
		|		ПО УчетнаяПолитикаФинансовогоУчета.Организация = УчетнаяПолитикаФинансовогоУчетаПоследнее.ГоловнаяОрганизация
		|			И УчетнаяПолитикаФинансовогоУчета.Период = УчетнаяПолитикаФинансовогоУчетаПоследнее.ПериодРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеИзмененныеДанные.Организация                   КАК Организация,
		|	ВсеИзмененныеДанные.ОсновноеСредство              КАК ОсновноеСредство,
		|	ВсеИзмененныеДанные.Документ                      КАК Документ,
		|	МАКСИМУМ(ВсеИзмененныеДанные.ОтражатьВРеглУчете)  КАК ОтражатьВРеглУчете,
		|	МАКСИМУМ(ВсеИзмененныеДанные.ОтражатьВУпрУчете)   КАК ОтражатьВУпрУчете,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету))) КАК ПорядокНачисленияАмортизацииУУ,
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА ВсеИзмененныеДанные.ИмяТаблицы = ""НаработкиОбъектовЭксплуатации""
		|						ИЛИ ЕСТЬNULL(УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
		|					ТОГДА НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|			КОНЕЦ) КАК ПериодБУ,
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА ТИПЗНАЧЕНИЯ(ВсеИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
		|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|				КОГДА ВсеИзмененныеДанные.ИмяТаблицы = ""НаработкиОбъектовЭксплуатации""
		|						ИЛИ ЕСТЬNULL(УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
		|					ТОГДА НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|			КОНЕЦ) КАК ПериодУУ
		|ПОМЕСТИТЬ ИзмененныеДанные
		|ИЗ
		|	ВсеИзмененныеДанные КАК ВсеИзмененныеДанные
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
		|		ПО УчетнаяПолитикаФинансовогоУчета.ГоловнаяОрганизация = ВсеИзмененныеДанные.ГоловнаяОрганизация
		|			И УчетнаяПолитикаФинансовогоУчета.Период = ВсеИзмененныеДанные.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеИзмененныеДанные.Организация,
		|	ВсеИзмененныеДанные.ОсновноеСредство,
		|	ВсеИзмененныеДанные.Документ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ОсновноеСредство";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбъединенияДанных", "(" + ТекстОбъединенияДанных + ")");
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
		
		#Область ПорядокУчетаОСУУ
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаОСУУ_НачислятьАмортизацию") <> Неопределено Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПорядокУчетаОСУУ.Организация       КАК Организация,
			|	ПорядокУчетаОСУУ.ОсновноеСредство  КАК ОсновноеСредство,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУ.Период, МЕСЯЦ)) КАК Период
			|ПОМЕСТИТЬ ПериодЗаданийУУ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПорядокУчетаОСУУ.Организация       КАК Организация,
			|		ПорядокУчетаОСУУ.ОсновноеСредство  КАК ОсновноеСредство,
			|		ВЫБОР
			|			КОГДА ПорядокУчетаОСУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|					И НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУПоследние.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУ.Период, МЕСЯЦ)
			|				ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаОСУУПоследние.Период, МЕСЯЦ, 1)
			|			ИНАЧЕ ПорядокУчетаОСУУПоследние.Период
			|		КОНЕЦ КАК Период
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИзмененныеДанные.Организация        КАК Организация,
			|			ИзмененныеДанные.ОсновноеСредство   КАК ОсновноеСредство,
			|			МИНИМУМ(ИзмененныеДанные.ПериодУУ)  КАК Период,
			|			МАКСИМУМ(ПорядокУчетаОСУУ.Период)   КАК ПериодСведений
			|		ИЗ
			|			ИзмененныеДанные КАК ИзмененныеДанные
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
			|				ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
			|					И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
			|					И (ПорядокУчетаОСУУ.Период <= ИзмененныеДанные.ПериодУУ)
			|					И (ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.СписаниеОС2_4)
			|							И ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.ПрекращениеДоговораАренды)
			|						ИЛИ ИзмененныеДанные.Документ <> ПорядокУчетаОСУУ.Регистратор)
			|		ГДЕ
			|			ИзмененныеДанные.ОтражатьВУпрУчете
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ИзмененныеДанные.Организация,
			|			ИзмененныеДанные.ОсновноеСредство
			|
			|		) КАК ПорядокУчетаОСУУПоследние
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
			|			ПО (ПорядокУчетаОСУУ.Организация = ПорядокУчетаОСУУПоследние.Организация)
			|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ПорядокУчетаОСУУПоследние.ОсновноеСредство)
			|				И (ПорядокУчетаОСУУ.Период = ПорядокУчетаОСУУПоследние.ПериодСведений)
			|	ГДЕ
			|		ПорядокУчетаОСУУ.НачислятьАмортизациюУУ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.ОсновноеСредство,
			|		МИНИМУМ(ВЫБОР 
			|					КОГДА ИзмененныеДанные.ПорядокНачисленияАмортизацииУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца) 
			|							ИЛИ ПорядокУчетаОСУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|						ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаОСУУ.Период, МЕСЯЦ, 1)
			|					ИНАЧЕ ПорядокУчетаОСУУ.Период
			|				КОНЕЦ)
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
			|			ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
			|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
			|				И (ПорядокУчетаОСУУ.Период > ИзмененныеДанные.ПериодУУ)
			|
			|	ГДЕ
			|		ИзмененныеДанные.ОтражатьВУпрУчете
			|		И ПорядокУчетаОСУУ.НачислятьАмортизациюУУ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.ОсновноеСредство
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ИзмененныеДанные.Организация       КАК Организация,
			|		ИзмененныеДанные.ОсновноеСредство  КАК ОсновноеСредство,
			|		ИзмененныеДанные.ПериодУУ          КАК Период
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокУчетаОСУУ_НачислятьАмортизацию КАК ПорядокУчетаОСУУ
			|			ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
			|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
			|
			|) КАК ПорядокУчетаОСУУ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПорядокУчетаОСУУ.Организация,
			|	ПорядокУчетаОСУУ.ОсновноеСредство
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПорядокУчетаОСУУ.Организация       КАК Организация,
			|	ПорядокУчетаОСУУ.ОсновноеСредство  КАК ОсновноеСредство,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУ.Период, МЕСЯЦ)) КАК Период
			|ПОМЕСТИТЬ ПериодЗаданийУУ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПорядокУчетаОСУУ.Организация       КАК Организация,
			|		ПорядокУчетаОСУУ.ОсновноеСредство  КАК ОсновноеСредство,
			|		ВЫБОР
			|			КОГДА ПорядокУчетаОСУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|					И НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУПоследние.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПорядокУчетаОСУУ.Период, МЕСЯЦ)
			|				ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаОСУУПоследние.Период, МЕСЯЦ, 1)
			|			ИНАЧЕ ПорядокУчетаОСУУПоследние.Период
			|		КОНЕЦ КАК Период
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИзмененныеДанные.Организация        КАК Организация,
			|			ИзмененныеДанные.ОсновноеСредство   КАК ОсновноеСредство,
			|			МИНИМУМ(ИзмененныеДанные.ПериодУУ)  КАК Период,
			|			МАКСИМУМ(ПорядокУчетаОСУУ.Период)   КАК ПериодСведений
			|		ИЗ
			|			ИзмененныеДанные КАК ИзмененныеДанные
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
			|				ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
			|					И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
			|					И (ПорядокУчетаОСУУ.Период <= ИзмененныеДанные.ПериодУУ)
			|					И (ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.СписаниеОС2_4)
			|							И ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.ПрекращениеДоговораАренды)
			|						ИЛИ ИзмененныеДанные.Документ <> ПорядокУчетаОСУУ.Регистратор)
			|		ГДЕ
			|			ИзмененныеДанные.ОтражатьВУпрУчете
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ИзмененныеДанные.Организация,
			|			ИзмененныеДанные.ОсновноеСредство
			|		) КАК ПорядокУчетаОСУУПоследние
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
			|			ПО (ПорядокУчетаОСУУ.Организация = ПорядокУчетаОСУУПоследние.Организация)
			|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ПорядокУчетаОСУУПоследние.ОсновноеСредство)
			|				И (ПорядокУчетаОСУУ.Период = ПорядокУчетаОСУУПоследние.ПериодСведений)
			|	ГДЕ
			|		ПорядокУчетаОСУУ.НачислятьАмортизациюУУ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.ОсновноеСредство,
			|		МИНИМУМ(ВЫБОР 
			|					КОГДА ИзмененныеДанные.ПорядокНачисленияАмортизацииУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца) 
			|							ИЛИ ПорядокУчетаОСУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|						ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаОСУУ.Период, МЕСЯЦ, 1)
			|					ИНАЧЕ ПорядокУчетаОСУУ.Период
			|				КОНЕЦ)
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОСУУ
			|			ПО (ПорядокУчетаОСУУ.Организация = ИзмененныеДанные.Организация)
			|				И (ПорядокУчетаОСУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
			|				И (ПорядокУчетаОСУУ.Период > ИзмененныеДанные.ПериодУУ)
			|	ГДЕ
			|		ИзмененныеДанные.ОтражатьВУпрУчете
			|		И ПорядокУчетаОСУУ.НачислятьАмортизациюУУ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.ОсновноеСредство
			|
			|) КАК ПорядокУчетаОСУУ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПорядокУчетаОСУУ.Организация,
			|	ПорядокУчетаОСУУ.ОсновноеСредство
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация";
			
		КонецЕсли;
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
		
		#Область ФормированиеЗаданий
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииОС.НомерПакета, 0) КАК НомерПакета,
		|	МИНИМУМ(ПериодЗаданийУУ.Период) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодЗаданийУУ КАК ПериодЗаданийУУ
		|		ПО (ПериодЗаданийУУ.Организация = ИзмененныеДанные.Организация)
		|			И (ПериодЗаданийУУ.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииОС КАК ПакетыАмортизацииОС
		|		ПО (ПакетыАмортизацииОС.Организация = ИзмененныеДанные.Организация)
		|			И (ПакетыАмортизацииОС.ОсновноеСредство = ИзмененныеДанные.ОсновноеСредство)
		|ГДЕ
		|	НЕ ПериодЗаданийУУ.Организация ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииОС.НомерПакета, 0)";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаОСУУ_НачислятьАмортизацию") <> Неопределено Тогда
			ТекстЗапроса = "УНИЧТОЖИТЬ ПорядокУчетаОСУУ_НачислятьАмортизацию";
			СписокЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		#КонецОбласти
		
		ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	КонецЕсли; 
	
	ИспользуемыеВременныеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеВременныеТаблицы);
	
	РегистрыСведений.ЗаданияКРасчетуАмортизацииОС.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьЗаданияКРасчетуАмортизацииНМА(Документ, ДанныеТаблиц)
	
	Если ДвиженияЗаписываютсяПриОтложенномФормированииДвижений(Документ) 
		ИЛИ ЗакрытиеРасходовОтВыбытияОС.ДвиженияЗаписываютсяПриВыполненииОперации(Документ) Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ПервоначальныеСведенияНМА");
	СписокТаблиц.Добавить("ПорядокУчетаНМА");
	СписокТаблиц.Добавить("ПорядокУчетаНМАУУ");
	СписокТаблиц.Добавить("ПараметрыАмортизацииНМАУУ");
	СписокТаблиц.Добавить("МестоУчетаНМА");
	СписокТаблиц.Добавить("СтоимостьНМА");
	СписокТаблиц.Добавить("ВыработкаНМА");
	
	ВнеоборотныеАктивыЛокализация.ДополнитьСписокТаблицДляФормированияЗаданийКРасчетуАмортизацииНМА(СписокТаблиц);
	
	СписокДопПолей = "НематериальныйАктив,ОтражатьВРеглУчете,ОтражатьВУпрУчете";
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, СписокДопПолей);
	
	// При корректировке стоимости и амортизации нельзя до формирования движений узнать есть ли отклонения.
	// Поэтому задание формируется всегда.
	ЗарегистрироватьДокумент = 
		Документ <> Неопределено
		И ТипЗнч(Документ.Ссылка) = Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА");
		
	Если ТекстОбъединенияДанных = "" И НЕ ЗарегистрироватьДокумент Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗарегистрироватьДокумент Тогда
		
		СписокЗапросовОбъединение = Новый Массив;
		
		Если ТекстОбъединенияДанных <> "" Тогда
			СписокЗапросовОбъединение.Добавить(ТекстОбъединенияДанных);
		КонецЕсли; 
			
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Дата КАК Период,
		|	ИзмененныеДанные.Организация КАК Организация,
		|	ИзмененныеДанные.Ссылка КАК Документ,
		|	"""" КАК ИмяТаблицы,
		|	ИзмененныеДанные.НематериальныйАктив КАК НематериальныйАктив,
		|	ИзмененныеДанные.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ИзмененныеДанные.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете
		|ИЗ
		|	РегистрСведений.ДокументыПоНМА КАК ИзмененныеДанные
		|ГДЕ
		|	ИзмененныеДанные.Ссылка = &Ссылка";
		
		СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
		
		ТекстОбъединенияДанных = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		
	КонецЕсли; 
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаДляФормированияЗаданийКРасчетуАмортизацииНМА(
						ДанныеТаблиц, ТекстОбъединенияДанных);
	
	Если ТекстЗапроса = Неопределено Тогда
		
		СписокЗапросов = Новый Массив;
		
		#Область ИзмененныеДанные
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.ИмяТаблицы                      КАК ИмяТаблицы,
		|	ИзмененныеДанные.Организация                     КАК Организация,
		|	ИзмененныеДанные.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ИзмененныеДанные.НематериальныйАктив             КАК НематериальныйАктив,
		|	ИзмененныеДанные.Документ                        КАК Документ,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВРеглУчете)    КАК ОтражатьВРеглУчете,
		|	МАКСИМУМ(ИзмененныеДанные.ОтражатьВУпрУчете)     КАК ОтражатьВУпрУчете,
		|	МИНИМУМ(ИзмененныеДанные.Период)                 КАК Период
		|
		|ПОМЕСТИТЬ ВсеИзмененныеДанные
		|ИЗ
		|	&ТекстОбъединенияДанных КАК ИзмененныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.ИмяТаблицы,
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.НематериальныйАктив,
		|	ИзмененныеДанные.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УчетнаяПолитикаФинансовогоУчетаПоследнее.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	УчетнаяПолитикаФинансовогоУчетаПоследнее.Период КАК Период,
		|	УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации КАК ПорядокНачисленияАмортизации
		|ПОМЕСТИТЬ УчетнаяПолитикаФинансовогоУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВсеИзмененныеДанные.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|		ВсеИзмененныеДанные.Период КАК Период,
		|		МАКСИМУМ(УчетнаяПолитикаФинансовогоУчетаПоследнее.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВсеИзмененныеДанные КАК ВсеИзмененныеДанные
		|
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчетаПоследнее
		|			ПО УчетнаяПолитикаФинансовогоУчетаПоследнее.Организация = ВсеИзмененныеДанные.ГоловнаяОрганизация
		|				И УчетнаяПолитикаФинансовогоУчетаПоследнее.Период <= ВсеИзмененныеДанные.Период
		|
		|	СГРУППИРОВАТЬ ПО
		|		ВсеИзмененныеДанные.ГоловнаяОрганизация,
		|		ВсеИзмененныеДанные.Период
		|	
		|	) КАК УчетнаяПолитикаФинансовогоУчетаПоследнее
		|	
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
		|		ПО УчетнаяПолитикаФинансовогоУчета.Организация = УчетнаяПолитикаФинансовогоУчетаПоследнее.ГоловнаяОрганизация
		|			И УчетнаяПолитикаФинансовогоУчета.Период = УчетнаяПолитикаФинансовогоУчетаПоследнее.ПериодРегистра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеИзмененныеДанные.Организация                   КАК Организация,
		|	ВсеИзмененныеДанные.НематериальныйАктив           КАК НематериальныйАктив,
		|	ВсеИзмененныеДанные.Документ                      КАК Документ,
		|	МАКСИМУМ(ВсеИзмененныеДанные.ОтражатьВРеглУчете)  КАК ОтражатьВРеглУчете,
		|	МАКСИМУМ(ВсеИзмененныеДанные.ОтражатьВУпрУчете)   КАК ОтражатьВУпрУчете,
		|	МАКСИМУМ(ЕСТЬNULL(УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету))) КАК ПорядокНачисленияАмортизацииУУ,
		|	МИНИМУМ(ВЫБОР 
		|				КОГДА ТИПЗНАЧЕНИЯ(ВсеИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
		|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|				КОГДА ВсеИзмененныеДанные.ИмяТаблицы = ""ВыработкаНМА""
		|						ИЛИ ЕСТЬNULL(УчетнаяПолитикаФинансовогоУчета.ПорядокНачисленияАмортизации, ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)) = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СДатыПринятияКУчету)
		|					ТОГДА НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ)
		|				ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВсеИзмененныеДанные.Период, МЕСЯЦ), МЕСЯЦ, 1) 
		|			КОНЕЦ) КАК ПериодУУ
		|ПОМЕСТИТЬ ИзмененныеДанные
		|ИЗ
		|	ВсеИзмененныеДанные КАК ВсеИзмененныеДанные
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитикаФинансовогоУчета
		|		ПО УчетнаяПолитикаФинансовогоУчета.ГоловнаяОрганизация = ВсеИзмененныеДанные.ГоловнаяОрганизация
		|			И УчетнаяПолитикаФинансовогоУчета.Период = ВсеИзмененныеДанные.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеИзмененныеДанные.Организация,
		|	ВсеИзмененныеДанные.НематериальныйАктив,
		|	ВсеИзмененныеДанные.Документ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	НематериальныйАктив";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбъединенияДанных", "(" + ТекстОбъединенияДанных + ")");
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
			
		#Область ПорядокУчетаНМАУУ
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаНМАУУ_НачислятьАмортизацию") <> Неопределено Тогда
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПорядокУчетаНМАУУ.Организация          КАК Организация,
			|	ПорядокУчетаНМАУУ.НематериальныйАктив  КАК НематериальныйАктив,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУ.Период, МЕСЯЦ)) КАК Период
			|ПОМЕСТИТЬ ПериодЗаданийУУ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПорядокУчетаНМАУУ.Организация          КАК Организация,
			|		ПорядокУчетаНМАУУ.НематериальныйАктив  КАК НематериальныйАктив,
			|		ВЫБОР
			|			КОГДА ПорядокУчетаНМАУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|					И НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУПоследние.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУ.Период, МЕСЯЦ)
			|				ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаНМАУУПоследние.Период, МЕСЯЦ, 1)
			|			ИНАЧЕ ПорядокУчетаНМАУУПоследние.Период
			|		КОНЕЦ КАК Период
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИзмененныеДанные.Организация           КАК Организация,
			|			ИзмененныеДанные.НематериальныйАктив   КАК НематериальныйАктив,
			|			МИНИМУМ(ИзмененныеДанные.ПериодУУ)     КАК Период,
			|			МАКСИМУМ(ПорядокУчетаНМАУУ.Период)     КАК ПериодСведений
			|		ИЗ
			|			ИзмененныеДанные КАК ИзмененныеДанные
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
			|				ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
			|					И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
			|					И (ПорядокУчетаНМАУУ.Период <= ИзмененныеДанные.ПериодУУ)
			|					И (ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.СписаниеНМА2_4)
			|						ИЛИ ИзмененныеДанные.Документ <> ПорядокУчетаНМАУУ.Регистратор)
			|		ГДЕ
			|			ИзмененныеДанные.ОтражатьВУпрУчете
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ИзмененныеДанные.Организация,
			|			ИзмененныеДанные.НематериальныйАктив
			|		) КАК ПорядокУчетаНМАУУПоследние
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
			|			ПО (ПорядокУчетаНМАУУ.Организация = ПорядокУчетаНМАУУПоследние.Организация)
			|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ПорядокУчетаНМАУУПоследние.НематериальныйАктив)
			|				И (ПорядокУчетаНМАУУ.Период = ПорядокУчетаНМАУУПоследние.ПериодСведений)
			|	ГДЕ
			|		ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.НематериальныйАктив,
			|		МИНИМУМ(ВЫБОР 
			|					КОГДА ИзмененныеДанные.ПорядокНачисленияАмортизацииУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
			|							ИЛИ ПорядокУчетаНМАУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|						ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаНМАУУ.Период, МЕСЯЦ, 1)
			|					ИНАЧЕ ПорядокУчетаНМАУУ.Период
			|				КОНЕЦ)
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
			|			ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
			|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
			|				И (ПорядокУчетаНМАУУ.Период > ИзмененныеДанные.ПериодУУ)
			|
			|	ГДЕ
			|		ИзмененныеДанные.ОтражатьВУпрУчете
			|		И ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.НематериальныйАктив
			|
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ РАЗЛИЧНЫЕ
			|		ИзмененныеДанные.Организация          КАК Организация,
			|		ИзмененныеДанные.НематериальныйАктив  КАК НематериальныйАктив,
			|		ИзмененныеДанные.ПериодУУ             КАК Период
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПорядокУчетаНМАУУ_НачислятьАмортизацию КАК ПорядокУчетаНМАУУ
			|			ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
			|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
			|
			|) КАК ПорядокУчетаНМАУУ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПорядокУчетаНМАУУ.Организация,
			|	ПорядокУчетаНМАУУ.НематериальныйАктив
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация";
			
		Иначе
			
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПорядокУчетаНМАУУ.Организация          КАК Организация,
			|	ПорядокУчетаНМАУУ.НематериальныйАктив  КАК НематериальныйАктив,
			|	МИНИМУМ(НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУ.Период, МЕСЯЦ)) КАК Период
			|ПОМЕСТИТЬ ПериодЗаданийУУ
			|ИЗ
			|	(ВЫБРАТЬ
			|		ПорядокУчетаНМАУУ.Организация          КАК Организация,
			|		ПорядокУчетаНМАУУ.НематериальныйАктив  КАК НематериальныйАктив,
			|		ВЫБОР
			|			КОГДА ПорядокУчетаНМАУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|					И НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУПоследние.Период, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ПорядокУчетаНМАУУ.Период, МЕСЯЦ)
			|				ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаНМАУУПоследние.Период, МЕСЯЦ, 1)
			|			ИНАЧЕ ПорядокУчетаНМАУУПоследние.Период
			|		КОНЕЦ КАК Период
			|	ИЗ
			|		(ВЫБРАТЬ
			|			ИзмененныеДанные.Организация           КАК Организация,
			|			ИзмененныеДанные.НематериальныйАктив   КАК НематериальныйАктив,
			|			МИНИМУМ(ИзмененныеДанные.ПериодУУ)     КАК Период,
			|			МАКСИМУМ(ПорядокУчетаНМАУУ.Период)     КАК ПериодСведений
			|		ИЗ
			|			ИзмененныеДанные КАК ИзмененныеДанные
			|
			|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
			|				ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
			|					И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
			|					И (ПорядокУчетаНМАУУ.Период <= ИзмененныеДанные.ПериодУУ)
			|					И (ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) <> ТИП(Документ.СписаниеНМА2_4)
			|						ИЛИ ИзмененныеДанные.Документ <> ПорядокУчетаНМАУУ.Регистратор)
			|		ГДЕ
			|			ИзмененныеДанные.ОтражатьВУпрУчете
			|		
			|		СГРУППИРОВАТЬ ПО
			|			ИзмененныеДанные.Организация,
			|			ИзмененныеДанные.НематериальныйАктив
			|		) КАК ПорядокУчетаНМАУУПоследние
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
			|			ПО (ПорядокУчетаНМАУУ.Организация = ПорядокУчетаНМАУУПоследние.Организация)
			|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ПорядокУчетаНМАУУПоследние.НематериальныйАктив)
			|				И (ПорядокУчетаНМАУУ.Период = ПорядокУчетаНМАУУПоследние.ПериодСведений)
			|	ГДЕ
			|		ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.НематериальныйАктив,
			|		МИНИМУМ(ВЫБОР 
			|					КОГДА ИзмененныеДанные.ПорядокНачисленияАмортизацииУУ = ЗНАЧЕНИЕ(Перечисление.ПорядокНачисленияАмортизации.СоСледующегоМесяца)
			|							ИЛИ ПорядокУчетаНМАУУ.Регистратор ССЫЛКА Документ.ВводОстатковВнеоборотныхАктивов2_4
			|						ТОГДА ДОБАВИТЬКДАТЕ(ПорядокУчетаНМАУУ.Период, МЕСЯЦ, 1)
			|					ИНАЧЕ ПорядокУчетаНМАУУ.Период
			|				КОНЕЦ)
			|	ИЗ
			|		ИзмененныеДанные КАК ИзмененныеДанные
			|
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчетаНМАУУ
			|			ПО (ПорядокУчетаНМАУУ.Организация = ИзмененныеДанные.Организация)
			|				И (ПорядокУчетаНМАУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
			|				И (ПорядокУчетаНМАУУ.Период > ИзмененныеДанные.ПериодУУ)
			|	ГДЕ
			|		ИзмененныеДанные.ОтражатьВУпрУчете
			|		И ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ
			|	
			|	СГРУППИРОВАТЬ ПО
			|		ИзмененныеДанные.Организация,
			|		ИзмененныеДанные.НематериальныйАктив
			|
			|) КАК ПорядокУчетаНМАУУ
			|
			|СГРУППИРОВАТЬ ПО
			|	ПорядокУчетаНМАУУ.Организация,
			|	ПорядокУчетаНМАУУ.НематериальныйАктив
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	Организация";
			
		КонецЕсли;
		СписокЗапросов.Добавить(ТекстЗапроса);
		#КонецОбласти
		
		#Область ФормированиеЗаданий
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииНМА.НомерПакета, 0) КАК НомерПакета,
		|	МИНИМУМ(ПериодЗаданийУУ.Период) КАК Месяц
		|ИЗ
		|	ИзмененныеДанные КАК ИзмененныеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПериодЗаданийУУ КАК ПериодЗаданийУУ
		|		ПО (ПериодЗаданийУУ.Организация = ИзмененныеДанные.Организация)
		|			И (ПериодЗаданийУУ.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыАмортизацииНМА КАК ПакетыАмортизацииНМА
		|		ПО (ПакетыАмортизацииНМА.Организация = ИзмененныеДанные.Организация)
		|			И (ПакетыАмортизацииНМА.НематериальныйАктив = ИзмененныеДанные.НематериальныйАктив)
		|ГДЕ
		|	НЕ ПериодЗаданийУУ.Организация ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	ИзмененныеДанные.Организация,
		|	ИзмененныеДанные.Документ,
		|	ЕСТЬNULL(ПакетыАмортизацииНМА.НомерПакета, 0)";
		
		СписокЗапросов.Добавить(ТекстЗапроса);
		
		Если ДанныеТаблиц.МенеджерВременныхТаблиц.Таблицы.Найти("ПорядокУчетаНМАУУ_НачислятьАмортизацию") <> Неопределено Тогда
			ТекстЗапроса = "УНИЧТОЖИТЬ ПорядокУчетаНМАУУ_НачислятьАмортизацию";
			СписокЗапросов.Добавить(ТекстЗапроса);
		КонецЕсли;
		#КонецОбласти
		
		ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	
	КонецЕсли; 

	ИспользуемыеВременныеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеВременныеТаблицы);
	
	РегистрыСведений.ЗаданияКРасчетуАмортизацииНМА.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура СформироватьЗаданияКНачислениюПроцентовПоАренде(ДанныеТаблиц)
	
	Если НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018() Тогда
		Возврат;
	КонецЕсли;
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("УсловияДоговоровАренды");
	СписокТаблиц.Добавить("ГрафикНачисленияПроцентовПоАренде");
	
	ТекстОбъединенияДанных = СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц);
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ОперацииЗакрытияМесяца.НачислениеПроцентовПоАренде) КАК Операция,
	|	ИзмененныеДанные.Организация КАК Организация,
	|	ИзмененныеДанные.Документ КАК Документ,
	|	МИНИМУМ(ВЫБОР 
	|				КОГДА ИзмененныеДанные.Период < &ДатаНачалаУчета24
	|					ТОГДА &ДатаНачалаУчета24
	|				КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковВнеоборотныхАктивов2_4)
	|					ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатковВнеоборотныхАктивов24.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|				ИНАЧЕ ИзмененныеДанные.Период
	|			КОНЕЦ) КАК Месяц
	|ИЗ
	|	&ТекстОбъединенияДанных КАК ИзмененныеДанные
	|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковВнеоборотныхАктивов2_4 КАК ВводОстатковВнеоборотныхАктивов24
	|	ПО ВводОстатковВнеоборотныхАктивов24.Ссылка = ИзмененныеДанные.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстОбъединенияДанных", "(" + ТекстОбъединенияДанных + ")");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаУчета24", ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4());
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	РегистрыСведений.ЗаданияКЗакрытиюМесяца.СоздатьЗаписиРегистраПоДаннымВыборки(Выборка);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Аренда

// Рассчитывает ставку, стоимость и график начисления процентов.
// 
// Параметры:
// 	ПараметрыРасчета - см. ПараметрыРасчетаСтавкиСтоимостиПроцентов
Процедура РассчитатьСтавкуСтоимостьПроценты(ПараметрыРасчета) Экспорт
	
	Если НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018(ПараметрыРасчета.Организация, ПараметрыРасчета.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрыРасчета.ГрафикНачисленияПроцентовВведенВручную Тогда
		ПараметрыРасчета.ГрафикНачисленияПроцентов.Очистить();
		ПараметрыРасчета.СуммаПроцентов = 0;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРасчета.Договор)
		ИЛИ ПараметрыРасчета.ГрафикОплатУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыРасчета.РеквизитыДоговора = Неопределено Тогда
		ПараметрыРасчета.РеквизитыДоговора = ВнеоборотныеАктивыСлужебный.РеквизитыДоговораАренды(ПараметрыРасчета.Договор);
	КонецЕсли;
	
	НачалоПериода = ПараметрыРасчета.ДатаНачалаАренды;
	
	ГрафикОплатДляДисконтирования = ГрафикОплатДляДисконтирования(ПараметрыРасчета.ГрафикОплатУслуг, НачалоПериода);
	
	ГрафикПлатежей = Новый ТаблицаЗначений; 
	ГрафикПлатежей.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	ГрафикПлатежей.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой));

	// НДС надо брать из графика начислений, рассчитывать по графику оплат неправильно
	СуммаНДС = ВнеоборотныеАктивыКлиентСервер.СуммаНДСВДокументеАренды(
					ПараметрыРасчета.ГрафикНачисленияУслуг, 
					ПараметрыРасчета.СуммаУслугПоАренде, 
					ПараметрыРасчета.СуммаОбеспечительногоПлатежа, 
					ПараметрыРасчета.СуммаНДСВыкупаПредметовАренды, 
					ПараметрыРасчета.СтавкаНДС);
	
	ВсегоПлатежей = 0;
	АвансыДоНачалаАрендыБезНДС = 0;
	Для Каждого ИсходнаяСтрокаГрафика Из ГрафикОплатДляДисконтирования Цикл		
		
		ВсегоПлатежей = 
			ВсегоПлатежей 
			+ ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж
			+ ИсходнаяСтрокаГрафика.УслугаПоАренде
			+ ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость;
		
		СуммаСтрокиБезНДС =
			ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж - ИсходнаяСтрокаГрафика.ОбеспечительныйПлатежНДС
			+ ИсходнаяСтрокаГрафика.УслугаПоАренде - ИсходнаяСтрокаГрафика.УслугаПоАрендеНДС
			+ ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость - ИсходнаяСтрокаГрафика.ВыкупнаяСтоимостьНДС;
			
		Если ИсходнаяСтрокаГрафика.Дата < НачалоПериода Тогда
			АвансыДоНачалаАрендыБезНДС = АвансыДоНачалаАрендыБезНДС + СуммаСтрокиБезНДС;
			Продолжить;
		КонецЕсли;
		
		СтрокаГрафика = ГрафикПлатежей.Добавить();
		СтрокаГрафика.Дата = ИсходнаяСтрокаГрафика.Дата;
		СтрокаГрафика.Сумма = СуммаСтрокиБезНДС;
		
	КонецЦикла;
	
	Если ГрафикПлатежей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаГрафика = ГрафикПлатежей.Вставить(0);
	СтрокаГрафика.Дата = НачалоПериода;
	
	#Область РасчетСтавкиИлиСтоимости
	Если ПараметрыРасчета.РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
		
		ПараметрыРасчета.ПриведеннаяСтоимость = ВнеоборотныеАктивыКлиентСервер.ПриведеннаяСтоимость(
								ПараметрыРасчета.СтоимостьПредметовАренды,
								ГрафикОплатДляДисконтирования,
								ПараметрыРасчета.ДатаНачалаАренды);
		
		Если ПараметрыРасчета.ПриведеннаяСтоимость <> 0 Тогда
			
			СтрокаГрафика = ГрафикПлатежей[0];
			СтрокаГрафика.Сумма = -ПараметрыРасчета.ПриведеннаяСтоимость;
		
			ПараметрыРасчета.ПроцентнаяСтавка = ПроцентнаяСтавка(ГрафикПлатежей);
			
		Иначе
			ПараметрыРасчета.ПроцентнаяСтавка = 0;
		КонецЕсли;
		
	Иначе
		
		СтрокаГрафика = ГрафикПлатежей[0];
		СтрокаГрафика.Сумма = 0;
			
		ПараметрыРасчета.ПриведеннаяСтоимость = ПриведеннаяСтоимостьПоСтавкеИГрафику(ПараметрыРасчета.ПроцентнаяСтавка, ГрафикПлатежей);
		
		Если ПараметрыРасчета.ТаблицаОС <> Неопределено Тогда
			
			Коэффициенты = Новый Массив;
			Для Каждого ДанныеСтроки Из ПараметрыРасчета.ТаблицаОС Цикл
				Коэффициенты.Добавить(1);
			КонецЦикла;
			
			РезультатРаспределения = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ПараметрыРасчета.ПриведеннаяСтоимость, Коэффициенты);
			Если РезультатРаспределения <> Неопределено Тогда
				Для ИндексСтроки = 0 По РезультатРаспределения.ВГраница() Цикл
					ДанныеСтроки = ПараметрыРасчета.ТаблицаОС.Получить(ИндексСтроки);
					ДанныеСтроки.Стоимость = РезультатРаспределения[ИндексСтроки];
				КонецЦикла;
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	#КонецОбласти
	
	#Область ЗаполнениеГрафикаНачисленияПроцентов
	Если НЕ ПараметрыРасчета.ГрафикНачисленияПроцентовВведенВручную Тогда
		
		ОстатокПроцентов = ВсегоПлатежей - АвансыДоНачалаАрендыБезНДС - ПараметрыРасчета.ПриведеннаяСтоимость - СуммаНДС;
		ОстатокЗайма = ПараметрыРасчета.ПриведеннаяСтоимость;
		ПредыдущаяДата = НачалоПериода;
		Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл		
			
			Если СтрокаГрафика.Сумма < 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаПроцентов = 
				ОстатокЗайма
				* (Pow(1 + ПараметрыРасчета.ПроцентнаяСтавка / 100, (СтрокаГрафика.Дата - ПредыдущаяДата) / 31536000) - 1);
				 
			СуммаПроцентов = Окр(СуммаПроцентов, 2);
			СуммаПроцентов = Мин(СуммаПроцентов, ОстатокПроцентов);
			СуммаПроцентов = Макс(СуммаПроцентов, 0);
			
			Если СуммаПроцентов > 0 Тогда
				
				СтрокаПроценты = ПараметрыРасчета.ГрафикНачисленияПроцентов.Добавить();
				СтрокаПроценты.Дата = СтрокаГрафика.Дата;
				СтрокаПроценты.Проценты = СуммаПроцентов;
				
				ПараметрыРасчета.СуммаПроцентов = ПараметрыРасчета.СуммаПроцентов + СтрокаПроценты.Проценты;
				
			КонецЕсли;
			
			ОстатокПроцентов = ОстатокПроцентов - СуммаПроцентов;
			ОстатокЗайма = Макс(ОстатокЗайма - СтрокаГрафика.Сумма + СуммаПроцентов, 0);
			
			ПредыдущаяДата = СтрокаГрафика.Дата;
			
		КонецЦикла;
		
		Если ПараметрыРасчета.ГрафикНачисленияПроцентов.Количество() <> 0
			И ОстатокПроцентов <> 0 Тогда
			
			СтрокаПроценты = ПараметрыРасчета.ГрафикНачисленияПроцентов[ПараметрыРасчета.ГрафикНачисленияПроцентов.Количество() - 1];
			СтрокаПроценты.Проценты = СтрокаПроценты.Проценты + ОстатокПроцентов;
			ПараметрыРасчета.СуммаПроцентов = ПараметрыРасчета.СуммаПроцентов + ОстатокПроцентов;
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

// Формирует график оплат который можно использовать для дисконтирования.
// 
// Параметры:
//  ГрафикОплат - ТаблицаЗначений - График оплат услуг.
//  НачалоПериода - Дата - Начало периода
// 
// Возвращаемое значение:
//  ТаблицаЗначений -
Функция ГрафикОплатДляДисконтирования(ГрафикОплат, НачалоПериода) Экспорт
	
	ГрафикОплатДляДисконтирования = ГрафикОплат.Выгрузить();
	ГрафикОплатДляДисконтирования.Сортировать("Дата");
	
	// Добавление в график последнего дня месяца, если его нет.
	ТекущийМесяц = НачалоМесяца(НачалоПериода);
	ПоследнийМесяц = ГрафикОплатДляДисконтирования[ГрафикОплатДляДисконтирования.Количество() - 1].Дата;
	Пока ТекущийМесяц <= ПоследнийМесяц Цикл
		ДатаГрафика = НачалоДня(КонецМесяца(ТекущийМесяц));
		Если ГрафикОплатДляДисконтирования.Найти(ДатаГрафика, "Дата") = Неопределено Тогда
			СтрокаГрафика = ГрафикОплатДляДисконтирования.Добавить();
			СтрокаГрафика.Дата = ДатаГрафика;
		КонецЕсли;
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	ГрафикОплатДляДисконтирования.Сортировать("Дата");
	
	Возврат ГрафикОплатДляДисконтирования;
	
КонецФункции

// Параметры используемые для расчета ставки, стоимости, процентов.
// 
// Параметры:
// 	Объект - ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде, ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	РеквизитыДоговора - Структура -
// 
// Возвращаемое значение:
//  Структура - Параметры расчета:
//		* Организация -
//		* Договор -
//		* Дата -
//		* ДатаНачалаАренды -
//		* СуммаОбеспечительногоПлатежа -
//		* СуммаУслугПоАренде -
//		* СуммаВыкупаПредметовАренды -
//		* СуммаНДСВыкупаПредметовАренды -
//		* СтоимостьПредметовАренды -
//		* ГрафикОплатУслуг -
//		* ГрафикНачисленияУслуг -
//		* СтавкаНДС -
//		* ГрафикНачисленияПроцентовВведенВручную -
//		* РеквизитыДоговора -
//		* ГрафикНачисленияПроцентов -
//		* ПроцентнаяСтавка -
//		* СуммаПроцентов -
//		* ПриведеннаяСтоимость -
//
Функция ПараметрыРасчетаСтавкиСтоимостиПроцентов(Объект = Неопределено, РеквизитыДоговора = Неопределено) Экспорт
	
	ПараметрыРасчета = Новый Структура;
	ПараметрыРасчета.Вставить("Организация");
	ПараметрыРасчета.Вставить("Договор");
	ПараметрыРасчета.Вставить("Дата");
	ПараметрыРасчета.Вставить("ДатаНачалаАренды");
	ПараметрыРасчета.Вставить("СуммаОбеспечительногоПлатежа");
	ПараметрыРасчета.Вставить("СуммаУслугПоАренде");
	ПараметрыРасчета.Вставить("СуммаВыкупаПредметовАренды");
	ПараметрыРасчета.Вставить("СуммаНДСВыкупаПредметовАренды");
	ПараметрыРасчета.Вставить("СтоимостьПредметовАренды");
	ПараметрыРасчета.Вставить("ГрафикОплатУслуг");
	ПараметрыРасчета.Вставить("ГрафикНачисленияУслуг");
	ПараметрыРасчета.Вставить("СтавкаНДС");
	ПараметрыРасчета.Вставить("ГрафикНачисленияПроцентовВведенВручную");
	ПараметрыРасчета.Вставить("РеквизитыДоговора", Неопределено);
	ПараметрыРасчета.Вставить("ТаблицаОС", Неопределено);
	
	// Выходные параметры
	ПараметрыРасчета.Вставить("ГрафикНачисленияПроцентов");
	ПараметрыРасчета.Вставить("ПроцентнаяСтавка", 0);
	ПараметрыРасчета.Вставить("СуммаПроцентов", 0);
	ПараметрыРасчета.Вставить("ПриведеннаяСтоимость", 0);

	Если Объект <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПараметрыРасчета, Объект);
		ПараметрыРасчета.ГрафикОплатУслуг = Объект.ГрафикОплатУслуг;
		ПараметрыРасчета.ГрафикНачисленияУслуг = Объект.ГрафикНачисленияУслуг;
		ПараметрыРасчета.ГрафикНачисленияПроцентов = Объект.ГрафикНачисленияПроцентов;
	КонецЕсли;
	
	Если РеквизитыДоговора <> Неопределено Тогда
		ПараметрыРасчета.РеквизитыДоговора = РеквизитыДоговора;
	КонецЕсли;
	
	Возврат ПараметрыРасчета;
	
КонецФункции

// Заполняет график оплат и начисления по данным раздела "Расчеты"
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура - 
Процедура ЗаполнитьГрафикОплатИНачисленийПоРасчетам(Объект, РеквизитыДоговора) Экспорт
	
	Если (Объект.ПериодичностьОплат = Перечисления.ПериодичностьГрафика.Произвольная
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьОплат))
		И (Объект.ПериодичностьНачислений = Перечисления.ПериодичностьГрафика.Произвольная
			ИЛИ НЕ ЗначениеЗаполнено(Объект.ПериодичностьНачислений)) Тогда
				
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней);
	
	#Область ГрафикОплатУслуг
	
	Если Объект.ПериодичностьОплат <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьОплат) Тогда
	
		Объект.ГрафикОплатУслуг.Очистить();

		// Первым оплачивается обеспечительный платеж
		СтрокаГрафикаОП = Неопределено;
		Если Объект.СуммаОбеспечительногоПлатежа <> 0
			И ЗначениеЗаполнено(Объект.ДатаПервогоОбеспечительногоПлатежа) Тогда
			
			СтрокаГрафикаОП = Объект.ГрафикОплатУслуг.Добавить();
			СтрокаГрафикаОП.Дата = Объект.ДатаПервогоОбеспечительногоПлатежа;
			СтрокаГрафикаОП.ОбеспечительныйПлатеж = Объект.СуммаОбеспечительногоПлатежа;
		
		КонецЕсли;
		
		// Формирование дат графика
		ДатыГрафика = Новый Массив;
		ТекущаяДата = Объект.ДатаПервогоПлатежа;
		Пока ТекущаяДата <= ДатаОкончания Цикл
			ДатыГрафика.Добавить(ТекущаяДата);
			ТекущаяДата = ВнеоборотныеАктивыКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, Объект.ПериодичностьОплат);
		КонецЦикла;
		
		КоличествоДат = ДатыГрафика.Количество();
		
		СуммаВыкупаПредметовАренды = Объект.СуммаВыкупаПредметовАренды;
		АвансированиеВыкупнойСтоимости = Окр(СуммаВыкупаПредметовАренды / КоличествоДат, 2);
				
		// Заполнение графика
		Для Сч = 0 По КоличествоДат - 1 Цикл
			
			ТекущаяДата = ДатыГрафика[Сч];
			
			Если ТекущаяДата = Объект.ДатаПервогоОбеспечительногоПлатежа 
				И СтрокаГрафикаОП <> Неопределено Тогда
				СтрокаГрафика = СтрокаГрафикаОП
			Иначе
				СтрокаГрафика = Объект.ГрафикОплатУслуг.Добавить();
			КонецЕсли;
			
			СтрокаГрафика.Дата = ТекущаяДата;
			СтрокаГрафика.УслугаПоАренде = Объект.ОплатаУслугиПоАренде;
			
			Если РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости Тогда
				
				СтрокаГрафика.ВыкупнаяСтоимость = 
					?(Сч < КоличествоДат - 1,
						Мин(АвансированиеВыкупнойСтоимости, СуммаВыкупаПредметовАренды),
						СуммаВыкупаПредметовАренды);
						
				СуммаВыкупаПредметовАренды = СуммаВыкупаПредметовАренды - СтрокаГрафика.ВыкупнаяСтоимость;
				
			КонецЕсли;
		
		КонецЦикла;
		
		Если РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И НЕ РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости
			И Объект.СуммаВыкупаПредметовАренды <> 0 Тогда
			
			СтруктураПоиска = Новый Структура("Дата", Объект.ДатаВыкупа);
			СписокСтрок = Объект.ГрафикОплатУслуг.НайтиСтроки(СтруктураПоиска);
			Если СписокСтрок.Количество() = 0 Тогда
				СтрокаГрафика = Объект.ГрафикОплатУслуг.Добавить();
				СтрокаГрафика.Дата = Объект.ДатаВыкупа;
			Иначе
				СтрокаГрафика = СписокСтрок[0];
			КонецЕсли;
			
			СтрокаГрафика.ВыкупнаяСтоимость = Объект.СуммаВыкупаПредметовАренды;
			
		КонецЕсли;
		
		Объект.ГрафикОплатУслуг.Сортировать("Дата");
		
	КонецЕсли;
	
	#КонецОбласти

	#Область ГрафикНачисленияУслуг
	
	Если Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная
		И ЗначениеЗаполнено(Объект.ПериодичностьНачислений) Тогда
	
		Объект.ГрафикНачисленияУслуг.Очистить();
			
		// Формирование дат графика
		ДатыГрафика = Новый Массив;
		ТекущаяДата = Объект.ДатаПервогоПлатежа;
		Пока ТекущаяДата <= ДатаОкончания Цикл
			ДатыГрафика.Добавить(ТекущаяДата);
			ТекущаяДата = ВнеоборотныеАктивыКлиентСервер.СледующаяДатаГрафика(ТекущаяДата, Объект.ПериодичностьНачислений);
		КонецЦикла;
		
		КоличествоДат = ДатыГрафика.Количество();
		
		СуммаОбеспечительногоПлатежа = Объект.СуммаОбеспечительногоПлатежа;
		ЗачетОбеспечительногоПлатежа = Окр(СуммаОбеспечительногоПлатежа / КоличествоДат, 2);
				
		// Заполнение графика
		Для Сч = 0 По КоличествоДат - 1 Цикл
			
			ТекущаяДата = ДатыГрафика[Сч];
			
			СтрокаГрафика = Объект.ГрафикНачисленияУслуг.Добавить();
			СтрокаГрафика.Дата = ТекущаяДата;
			СтрокаГрафика.УслугаПоАренде = Объект.НачислениеУслугиПоАренде;
			
			СтрокаГрафика.ОбеспечительныйПлатеж = 
				?(Сч < КоличествоДат - 1,
					Мин(ЗачетОбеспечительногоПлатежа, СуммаОбеспечительногоПлатежа),
					СуммаОбеспечительногоПлатежа);
					
			СуммаОбеспечительногоПлатежа = СуммаОбеспечительногоПлатежа - СтрокаГрафика.ОбеспечительныйПлатеж;
			
		КонецЦикла;
		
		Объект.ГрафикОплатУслуг.Сортировать("Дата");

	КонецЕсли;

	#КонецОбласти

	ЗаполнитьСуммыНДСВГрафиках(Объект.ГрафикОплатУслуг, Объект.ГрафикНачисленияУслуг, Объект.СтавкаНДС);
	
	Если Объект.СуммаУслугПоАренде = 0 Тогда
		
		ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, РеквизитыДоговора);
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет раздел "Расчеты" по графику оплат и начислений 
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
//  РеквизитыДоговора - Структура - 
Процедура ЗаполнитьРасчетыПоГрафикуОплатИНачислений(Объект, РеквизитыДоговора) Экспорт
	
	Если Объект.ГрафикОплатУслуг.Количество() = 0
		И Объект.ГрафикНачисленияУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГрафиков = ВнеоборотныеАктивыКлиентСервер.ДанныеГрафиков(Объект, РеквизитыДоговора);
	
	Объект.СуммаУслугПоАренде = 
			?(ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде <> 0, 
				ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде,
				ДанныеГрафиков.ГрафикОплатУслуг.ИтогоУслугаПоАренде);
				
	Объект.СуммаНДС = ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоСуммаНДС;
	
	Объект.ДатаПервогоПлатежа = ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа;

	Если РеквизитыДоговора.ЕстьОбеспечительныйПлатеж Тогда
		
		Объект.СуммаОбеспечительногоПлатежа = 
			?(ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж <> 0, 
				ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж,
				ДанныеГрафиков.ГрафикОплатУслуг.ИтогоОбеспечительныйПлатеж);
		
		Объект.ДатаПервогоОбеспечительногоПлатежа = 
			?(ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа <> Неопределено,
				ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа,
				'000101010000');
				
	КонецЕсли;
	
	Если РеквизитыДоговора.ЕстьВыкупПредметовАренды Тогда
		
		Объект.СуммаВыкупаПредметовАренды = ДанныеГрафиков.ГрафикОплатУслуг.ИтогоВыкупнаяСтоимость;
		Объект.СуммаНДСВыкупаПредметовАренды = ДанныеГрафиков.ГрафикОплатУслуг.ИтогоСуммаНДСВыкупаПредметовАренды;
				
	КонецЕсли;

	//
	Объект.ПериодичностьОплат = 
		?(ДанныеГрафиков.ГрафикОплатУслуг.Периодичность <> Неопределено,
			ДанныеГрафиков.ГрафикОплатУслуг.Периодичность,
			Перечисления.ПериодичностьГрафика.Произвольная);
	
	Объект.ПериодичностьНачислений = 
		?(ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность <> Неопределено,
			ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность,
			Перечисления.ПериодичностьГрафика.Произвольная);

	//
	Объект.ОплатаУслугиПоАренде = 
		?(ЗначениеЗаполнено(Объект.ПериодичностьОплат) И Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная,
			ДанныеГрафиков.ГрафикОплатУслуг.ОплатаУслугиПоАренде,
			0);
			
	Объект.НачислениеУслугиПоАренде = 
		?(ЗначениеЗаполнено(Объект.ПериодичностьНачислений) И Объект.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная,
			ДанныеГрафиков.ГрафикНачисленияУслуг.НачислениеУслугиПоАренде,
			0);
			
	ВнеоборотныеАктивыКлиентСервер.ПересчитатьСуммуДокументаАренды(Объект);
	ВнеоборотныеАктивыКлиентСервер.ПересчитатьСуммуНДСВДокументеАренды(Объект);
			
КонецПроцедуры

// Заполняет суммы НДС в графиках.
// 
// Параметры:
//  ГрафикОплатУслуг - ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикОплатУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикОплатУслуг - График оплат услуг.
//  ГрафикНачисленияУслуг - ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикНачисленияУслуг, ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикНачисленияУслуг - График начисления услуг
//  СтавкаНДС - СправочникСсылка.СтавкиНДС - Ставка НДС.
Процедура ЗаполнитьСуммыНДСВГрафиках(ГрафикОплатУслуг, ГрафикНачисленияУслуг, СтавкаНДС) Экспорт
	
	ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	
	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		СтрокаГрафика.УслугаПоАрендеНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.УслугаПоАренде, ПроцентНДС, Истина);
		СтрокаГрафика.ОбеспечительныйПлатежНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.ОбеспечительныйПлатеж, ПроцентНДС, Истина);
	КонецЦикла;

	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		СтрокаГрафика.УслугаПоАрендеНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.УслугаПоАренде, ПроцентНДС, Истина);
		СтрокаГрафика.ОбеспечительныйПлатежНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.ОбеспечительныйПлатеж, ПроцентНДС, Истина);
		СтрокаГрафика.ВыкупнаяСтоимостьНДС = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СтрокаГрафика.ВыкупнаяСтоимость, ПроцентНДС, Истина);
	КонецЦикла;
	
	РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, "УслугаПоАренде", "УслугаПоАрендеНДС");
	РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, "ОбеспечительныйПлатеж", "ОбеспечительныйПлатежНДС");
	
КонецПроцедуры

// Проверяет корректность заполнения документа. 
// 
// Параметры:
// 	Объект - ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде, ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	ВспомогательныеРеквизиты - Структура - 
// 	МассивНепроверяемыхРеквизитов - Массив из Строка -
//  Отказ - Булево - 
Процедура ПроверитьДокументАренды(Объект, ВспомогательныеРеквизиты, МассивНепроверяемыхРеквизитов, Отказ) Экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить("ГрафикОплатУслуг");
	МассивНепроверяемыхРеквизитов.Добавить("ГрафикНачисленияУслуг");
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	ВерсияДокумента24 = 
		ТипЗнч(Объект) = Тип("ДокументОбъект.ЗаключениеДоговораАренды")
		И Объект.ВерсияДокумента24;
			
	СозданДляПерехода = (КонецДня(Объект.Дата) + 1 = ВспомогательныеРеквизиты.НачалоУчетаАрендыПоФСБУ25_2018);
			
	ДатаОкончания = ВнеоборотныеАктивыКлиентСервер.ДатаОкончанияПоСроку(
						Объект.ДатаНачалаАренды, Объект.СрокЛет, Объект.СрокМес, Объект.СрокДней, Истина);
						
	Если ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
		И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			ИЛИ РеквизитыДоговора.Балансодержатель = Перечисления.БалансодержательПредметовАренды.Арендатор
				И НЕ ВерсияДокумента24) Тогда
		
		РезультатПроверки = ВнеоборотныеАктивыКлиентСервер.ПроверитьСоответствиеГрафиков(
			Объект, 
			РеквизитыДоговора,
			ВспомогательныеРеквизиты.НачалоУчетаАрендыПоФСБУ25_2018,
			Строка(РеквизитыДоговора.ВалютаВзаиморасчетов));
		
		Если РезультатПроверки.СуммаОбеспечительногоПлатежа <> Неопределено 
			И НЕ СозданДляПерехода Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма обеспечительного платежа"":
			|%1';
			|en = 'The ""Security payment amount"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаОбеспечительногоПлатежа);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаОбеспечительногоПлатежа",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Дата первого обеспечительного платежа"":
			|%1';
			|en = 'The ""First security payment date"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоОбеспечительногоПлатежа",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.СуммаУслугПоАренде <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма услуг по аренде"":
			|%1';
			|en = 'The ""Amount of lease services"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаУслугПоАренде);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаУслугПоАренде",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.ДатаПервогоПлатежа <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Дата первого платежа"":
			|%1';
			|en = 'The ""First payment date"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.ДатаПервогоПлатежа);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоПлатежа",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.СуммаВыкупаПредметовАренды <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма выкупа предметов аренды"":
			|%1';
			|en = 'The ""Amount of lease objects redemption"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаВыкупаПредметовАренды);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаВыкупаПредметовАренды",, Отказ);
		КонецЕсли;
		
		Если РезультатПроверки.СуммаНДС <> Неопределено Тогда
			ТекстСообщения = НСтр("ru = 'Неверно заполнено поле ""Сумма НДС"":
			|%1';
			|en = 'The ""VAT amount"" field is filled in incorrectly:
			|%1'");
			ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатПроверки.СуммаНДС);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "СуммаНДС",, Отказ);
		КонецЕсли;
		
		Если Объект.ДатаНачалаАренды = '000101010000'
			И Объект.СрокЛет = 0
			И Объект.СрокЛет = 0
			И Объект.СрокЛет = 0
			И НЕ ВерсияДокумента24 Тогда
			
			ТекстСообщения = НСтр("ru = 'Не указан срок аренды';
									|en = 'Lease period is not specified'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "СрокАренды",, Отказ);
		КонецЕсли;
		
	КонецЕсли;

	Если Объект.ДатаПервогоОбеспечительногоПлатежа > ДатаОкончания
		И Объект.ДатаПервогоОбеспечительногоПлатежа <> '000101010000'
		И ДатаОкончания <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Обеспечительный платеж должен быть не позже окончания срока аренды';
								|en = 'The security payment must be no later than the end of the lease term'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоОбеспечительногоПлатежа",, Отказ);
	КонецЕсли;

	Если Объект.ДатаПервогоПлатежа < Объект.ДатаНачалаАренды
		И Объект.ДатаПервогоПлатежа <> '000101010000'
		И Объект.ДатаНачалаАренды <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Первый платеж должен быть не раньше даты начала аренды';
								|en = 'The first payment must not be earlier than the lease start date'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаПервогоПлатежа",, Отказ);
	КонецЕсли;

	Если Объект.ДатаВыкупа <= Объект.ДатаНачалаАренды
			И Объект.ДатаВыкупа <> '000101010000'
			И Объект.ДатаНачалаАренды <> '000101010000'
		ИЛИ Объект.ДатаВыкупа > ДатаОкончания
			И Объект.ДатаВыкупа <> '000101010000'
			И ДатаОкончания <> '000101010000' Тогда
			
		ТекстСообщения = НСтр("ru = 'Дата выкупа должна быть в пределах срока аренды';
								|en = 'The redemption date must be within the lease period'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ДатаВыкупа",, Отказ);
	КонецЕсли;

	Для Каждого СтрокаГрафика Из Объект.ГрафикОплатУслуг Цикл
		
		Если СтрокаГрафика.УслугаПоАренде = 0
			И СтрокаГрафика.ОбеспечительныйПлатеж = 0
			И СтрокаГрафика.ВыкупнаяСтоимость = 0 Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В графике оплат необходимо указать сумму на дату %1';
											|en = 'Specify the amount as of %1 in the payment schedule'"), Формат(СтрокаГрафика.Дата, "ДЛФ=D;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ГрафикОплатУслуг", СтрокаГрафика.НомерСтроки, "Дата");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Для Каждого СтрокаГрафика Из Объект.ГрафикНачисленияУслуг Цикл
		
		Если СтрокаГрафика.УслугаПоАренде = 0
			И СтрокаГрафика.ОбеспечительныйПлатеж = 0 Тогда
			
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В графике начислений необходимо указать сумму на дату %1';
											|en = 'Specify the amount as of %1 in the accrual schedule'"), Формат(СтрокаГрафика.Дата, "ДЛФ=D;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ГрафикНачисленияУслуг", СтрокаГрафика.НомерСтроки, "Дата");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		
		КонецЕсли;
	
	КонецЦикла;
	
	Если Объект.ГрафикОплатУслуг.Количество() = 0 
		И НЕ ВерсияДокумента24
		И НЕ СозданДляПерехода
		И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен график оплат услуг';
								|en = 'Service payment schedule is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОткрытьГрафикОплат",, Отказ);
	КонецЕсли;
	
	Если Объект.ГрафикНачисленияУслуг.Количество() = 0
		И НЕ ВерсияДокумента24
		И НЕ СозданДляПерехода
		И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнен график начисления услуг';
								|en = 'Service accrual schedule is not filled in'");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ОткрытьГрафикНачислений",, Отказ);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор)
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
		
		Если РеквизитыДоговора.ТипДоговора = Перечисления.ТипыДоговоровАренды.Аренда Тогда
			ТекстСообщения = НСтр("ru = 'Использование типа договора ""Аренда"" допускается только при учете по стандарту ФСБУ 25/2018';
									|en = 'Using the ""Lease"" contract type is only available when accounting is kept according to the Russian GAAP (FSBU 25/2018 standard)'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "Договор",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
		
		СтоимостьПредметовАренды = ВнеоборотныеАктивыКлиентСервер.СтоимостьПредметовАренды(
			Объект, РеквизитыДоговора, ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС);
			
		ПриведеннаяСтоимость = ВнеоборотныеАктивыКлиентСервер.ПриведеннаяСтоимость(
					СтоимостьПредметовАренды,
					Объект.ГрафикОплатУслуг,
					Объект.ДатаНачалаАренды);
		
		ВсегоПлатежейБезНДС = ВнеоборотныеАктивыКлиентСервер.ВсегоПлатежейБезНДС(Объект.ГрафикОплатУслуг, Объект.ДатаНачалаАренды, Объект.СтавкаНДС);
		
		Если ПриведеннаяСтоимость >= ВсегоПлатежейБезНДС И ВсегоПлатежейБезНДС > 0 Тогда
			Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг") Тогда
				ТекстСообщения = НСтр("ru = 'Сумма вложений лизингодателя должна быть меньше суммы платежей без НДС';
										|en = 'The amount of the lessor''s investments must be less than the amount of payments excluding VAT'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Стоимость предметов аренды должна быть меньше суммы платежей без НДС';
										|en = 'The cost of lease objects must be less than the amount of payments excluding VAT'");
			КонецЕсли;
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, "ПроцентнаяСтавка",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает процентную ставку для графика платежей.
// 
// Параметры:
// 	ГрафикПлатежей - ТаблицаЗначений из СтрокаТаблицыЗначений - Содержит колонки:
// 	    * Дата - Дата - 
// 	    * Сумма - Число -
// 	 
// Возвращаемое значение:
// 	Число - ставка доходности.
Функция ПроцентнаяСтавка(ГрафикПлатежей)
	
	Платежи = Новый Массив;
	ДатыПлатежей = Новый Массив;
	
	Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
		Платежи.Добавить(СтрокаГрафика.Сумма);		
		ДатыПлатежей.Добавить(СтрокаГрафика.Дата);		
	КонецЦикла;
	
	Ставка = ФинансовыеИнструменты.ЧИСТВНДОХ(Платежи, ДатыПлатежей);
	
	Если Ставка = Неопределено 
		ИЛИ Ставка > 999999999
		ИЛИ Ставка < 0 Тогда
		Возврат 0;
	КонецЕсли;

	Возврат Ставка * 100;
	
КонецФункции

// Возвращает приведенную стоимость.
// 
// Параметры:
// 	Ставка - Число - ставка дисконтирования.
// 	ГрафикПлатежей - ТаблицаЗначений из СтрокаТаблицыЗначений - Содержит колонки:
// 	    * Дата - Дата - 
// 	    * Сумма - Число -
// 	    
// Возвращаемое значение:
// 	Число - Приведенная стоимость.
Функция ПриведеннаяСтоимостьПоСтавкеИГрафику(Ставка, ГрафикПлатежей) Экспорт
	
	Платежи = Новый Массив;
	ДатыПлатежей = Новый Массив;
	
	Для Каждого СтрокаГрафика Из ГрафикПлатежей Цикл
		Платежи.Добавить(СтрокаГрафика.Сумма);		
		ДатыПлатежей.Добавить(СтрокаГрафика.Дата);		
	КонецЦикла;

	ПриведеннаяСтоимость = ФинансовыеИнструменты.ЧИСТНЗ(Ставка / 100, Платежи, ДатыПлатежей);
	
	Возврат ПриведеннаяСтоимость;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Удаляет выбранное поле из настроек и пользовательских настроек отчета
//
// Параметры
//  НастройкиКомпоновкиДанных - КомпоновщикНастроек, НастройкиКомпоновкиДанных 
//  ИменаЭлементов - Строка, Массив - имя элемента, который будет удален.
//  ИскатьВГруппировках - Булево - Искать поле в выбранных полях группировок отчета первого уровня.
//
Процедура УдалитьВыбранноеПолеИзВсехНастроекОтчета(НастройкиКомпоновкиДанных, ИменаЭлементов, ИскатьВГруппировках = Ложь) Экспорт
	
	Если ТипЗнч(НастройкиКомпоновкиДанных) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных.Настройки;
		ПользовательскиеНастройки = НастройкиКомпоновкиДанных.ПользовательскиеНастройки;
	ИначеЕсли ТипЗнч(НастройкиКомпоновкиДанных) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = НастройкиКомпоновкиДанных;
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Иначе
		Возврат
	КонецЕсли;
	
	Если ТипЗнч(ИменаЭлементов) = Тип("Строка") Тогда
		КоллекцияИменЭлементов = Новый Массив;
	Иначе
		КоллекцияИменЭлементов = ИменаЭлементов;
	КонецЕсли;
	
	ЗначенияПоиска = Новый Массив;
	Для Каждого ИмяЭлемента Из КоллекцияИменЭлементов Цикл
		ЗначенияПоиска.Добавить(Новый ПолеКомпоновкиДанных(ИмяЭлемента));
	КонецЦикла;
	
	МассивЭлементов = Новый Массив; // Массив из ВыбранноеПолеКомпоновкиДанных -
	
	ВыбранныеПоля = Настройки.Выбор;
	ИдентификаторПользовательскойНастройкиВыбранныхПолей = ВыбранныеПоля.ИдентификаторПользовательскойНастройки;
	
	НайтиВыбранноеПолеРекурсивно(ВыбранныеПоля.Элементы, МассивЭлементов, ЗначенияПоиска);
	
	Если ИскатьВГруппировках Тогда
		Для Каждого ЭлементСтруктурыОтчета Из Настройки.Структура Цикл
			Если ТипЗнч(ЭлементСтруктурыОтчета) = Тип("ГруппировкаКомпоновкиДанных") Тогда
				НайтиВыбранноеПолеРекурсивно(ЭлементСтруктурыОтчета.Выбор.Элементы, МассивЭлементов, ЗначенияПоиска);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Элемент Из МассивЭлементов Цикл
		
		ИдентификаторПользовательскойНастройкиЭлемента = Настройки.Выбор.ПолучитьИдентификаторПоОбъекту(Элемент);;
		Если Элемент.Родитель <> Неопределено Тогда
			Элемент.Родитель.Элементы.Удалить(Элемент);
		Иначе
			ВыбранныеПоля.Элементы.Удалить(Элемент);
		КонецЕсли;
		
		ПользовательскиеНастройкиВыбранныхПолей = ПользовательскиеНастройки.Элементы.Найти(ИдентификаторПользовательскойНастройкиВыбранныхПолей);
		Если ПользовательскиеНастройкиВыбранныхПолей <> Неопределено Тогда
			ЭлементПользовательскихНастроек = ПользовательскиеНастройкиВыбранныхПолей.ПолучитьОбъектПоИдентификатору(ИдентификаторПользовательскойНастройкиЭлемента);
			Если ЭлементПользовательскихНастроек <> Неопределено Тогда
				Если ЭлементПользовательскихНастроек.Родитель <> Неопределено Тогда
					ЭлементПользовательскихНастроек.Родитель.Элементы.Удалить(ЭлементПользовательскихНастроек);
				Иначе
					ПользовательскиеНастройкиВыбранныхПолей.Элементы.Удалить(ЭлементПользовательскихНастроек);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура НайтиВыбранноеПолеРекурсивно(КоллекцияЭлементов, МассивЭлементов, ЗначенияПоиска)

	Для каждого Элемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(Элемент) = Тип("ВыбранноеПолеКомпоновкиДанных") Тогда
			
			Для Каждого ЗначениеПоиска Из ЗначенияПоиска Цикл
				Если Элемент.Поле = ЗначениеПоиска Тогда
					МассивЭлементов.Добавить(Элемент);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			
			Продолжить;
				
		Иначе
			
			НайтиВыбранноеПолеРекурсивно(Элемент.Элементы, МассивЭлементов, ЗначенияПоиска);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область УправлениеДоступом

Процедура ДобавитьПрофильБухгалтерВнеоборотныхАктивов(ОписанияПрофилей)
	
	// Профиль "Бухгалтер по внеоборотным активам".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя           = "БухгалтерПоВнеоборотнымАктивам";
	ОписаниеПрофиля.Идентификатор = "ddb10492-ea5e-11e3-b754-c86000df10d3";
	ОписаниеПрофиля.Наименование  = НСтр("ru = 'Бухгалтер по внеоборотным активам';
										|en = 'Fixed asset accountant'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	УправлениеДоступомКА.ДополнитьПрофильОбязательнымиРолями(ОписаниеПрофиля);
	
	ДобавитьРолиДляДоступаКПодсистемеВНАНаИзменение(ОписаниеПрофиля);
	
	// Справочники, добавление.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновЭтикетокИЦенников");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеТемЭтаповИсследованийИРазработок");
	
	// Прочие справочники, чтение.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеДоговоровКонтрагентов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоНоменклатуре");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеИнформацииПоПартнерам");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНазначений");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНастроекСчетовУчетаПрочихОпераций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеНормативноСправочнойИнформации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОрганизацийИБанковскихСчетовОрганизаций");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПоказателейНаработки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСоглашенийСКлиентами");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСоглашенийСПоставщиками");
	//++ НЕ УТКА
	ОписаниеПрофиля.Роли.Добавить("ЧтениеКлассовОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеУзловОбъектовЭксплуатации");
	//-- НЕ УТКА
	
	// Документы, добавление.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеВнутреннихПотребленийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПриобретенийУслугПрочихАктивов");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеПрочихОприходованийТоваров");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеРеализацийУслугПрочихАктивов");
	
	// Прочие документы, чтение.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЗаказовНаВнутреннееПотребление");
	
	// Отчеты и обработки.
	ОписаниеПрофиля.Роли.Добавить("ИспользованиеОбработкиЖурналДокументовВнутреннегоТовародвижения");
	
	// Чтение регистров.
	
	// Чтение прочих регистров.
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковДоступныхТоваров");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковЗаказовНаВнутреннееПотребление");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровКОтгрузке");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеОстатковТоваровНаСкладах");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрочихАктивовПассивов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеПрочихДоходовРасходов");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеСостоянийДоставки");
	ОписаниеПрофиля.Роли.Добавить("ЧтениеЦенНоменклатуры");
	
	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Организации", "ВначалеВсеРазрешены");
	
	УправлениеДоступомЛокализация.ДополнитьПрофильБухгалтерПоВнеоборотнымАктивам(ОписаниеПрофиля);
	
	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = 
		НСтр("ru = 'Дополнительный профиль, назначаемый пользователям для выполнения задач учета внеоборотных активов:
		|1. Сопровождения нормативно-справочной информации
		|2. Ведения документов движений внеоборотных активов
		|3. Получение отчетов по данным бухгалтерского и налогового учета.';
		|en = 'Additional profile assigned to users to execute tasks of fixed assets accounting:
		|1. Support master data
		|2. Keep a record of documents of fixed asset movements
		|3. Receive reports on accounting and tax accounting data.'");
	
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

Процедура ДобавитьПрофильОтветственныйЗаВедениеОбъектовЭксплуатации(ОписанияПрофилей)
	
	// Профиль "Ответственный за ведение объектов эксплуатации (дополнительный)".
	ОписаниеПрофиля = УправлениеДоступом.НовоеОписаниеПрофиляГруппДоступа();
	ОписаниеПрофиля.Имя = "ОтветственныйЗаВедениеОбъектовЭксплуатации";
	ОписаниеПрофиля.Идентификатор = "4871ded3-fdd7-4616-a7fd-c373544d7af5";
	ОписаниеПрофиля.Наименование = НСтр("ru = 'Ответственный за ведение объектов эксплуатации (дополнительный)';
										|en = 'Employee responsible for assets (additional)'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	// Прикладные права.
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеШаблоновЭтикетокИЦенников");
	
	//++ НЕ УТКА
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеУзловОбъектовЭксплуатации");
	ОписаниеПрофиля.Роли.Добавить("ДобавлениеИзменениеКлассовОбъектовЭксплуатации");
	//-- НЕ УТКА

	// Виды доступа.
	ОписаниеПрофиля.ВидыДоступа.Добавить("Подразделения", "ВначалеВсеРазрешены");

	// Описание поставляемого профиля.
	ОписаниеПрофиля.Описание = НСтр("ru = 'Дополнительный профиль, назначается пользователям, ведущим справочник ""Объекты эксплуатации"".';
									|en = 'Additional profile is assigned to users keeping the ""Assets"" catalog.'");
	                                      
	ОписанияПрофилей.Добавить(ОписаниеПрофиля);
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

// Блокирует регистр "Задания к закрытию месяца" по указанным аналитикам.
//
// Параметры:
//	НомерЗаданияДоРасчета - Число - Номер задания из константы "Номер задания к закрытию месяца".
//	Организации - Массив, СправочникСсылка.Организации - Перечень организаций к блокировке.
//	ИмяРегистра - Строка - Имя регистра заданий.
//
Процедура ЗаблокироватьРегистрЗаданий(НомерЗаданияДоРасчета, Организации, ИмяРегистра) Экспорт
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить(ИмяРегистра);
	ЭлементБлокировки.УстановитьЗначение("НомерЗадания", Новый Диапазон(Неопределено, НомерЗаданияДоРасчета));
	
	ИсточникБлокировки = Новый ТаблицаЗначений;
	ИсточникБлокировки.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Если ТипЗнч(Организации) = Тип("Массив") Тогда
		Если Организации.Количество() <> 0 Тогда
			ИсточникБлокировки.ЗагрузитьКолонку(Организации, "Организация");
			ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
		КонецЕсли;
		// если массив пустой, то блокировка ставится по всем организациям.
	ИначеЕсли ТипЗнч(Организации) = Тип("СправочникСсылка.Организации")
		И ЗначениеЗаполнено(Организации) Тогда
		СтрокаБлокировки = ИсточникБлокировки.Добавить();
		СтрокаБлокировки.Организация = Организации;
		ЭлементБлокировки.ИсточникДанных = ИсточникБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	КонецЕсли;
	
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
КонецПроцедуры

Функция ИдентификаторыДокументовПоКоторымАктуализируютсяПараметрыУзловКомпонентов() Экспорт

	СписокОбъектов = Новый Массив;
	
	СписокТипов = Новый Массив;
	
	// ОС
	СписокТипов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПринятиеКУчетуУзловКомпонентовАмортизации"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОбъединениеОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПеремещениеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РазукомплектацияОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеОС2_4"));

	// Аренда
	СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратОСИзАренды2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупАрендованныхОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПередачаОСВАренду2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПрекращениеДоговораАренды"));
	
	Для каждого ТипОбъекта Из СписокТипов Цикл
		СписокОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипОбъекта));
	КонецЦикла; 
	
	Возврат СписокОбъектов;

КонецФункции

Функция ИдентификаторыДокументовПоКоторымФормируютсяОтложенныеДвижения() Экспорт

	СписокОбъектов = Новый Массив;
	
	СписокТипов = Новый Массив;
	
	// ОС
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.МодернизацияОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ОбъединениеОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПеремещениеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПереоценкаОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеОС2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.РазукомплектацияОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеОС2_4"));

	// НМА
	СписокТипов.Добавить(Тип("ДокументСсылка.КорректировкаСтоимостиИАмортизацииНМА"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеПараметровНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПеремещениеНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПереоценкаНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПодготовкаКПередачеНМА2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СписаниеНМА2_4"));
	
	// Аренда
	СписокТипов.Добавить(Тип("ДокументСсылка.ВозвратОСИзАренды2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыбытиеАрендованныхОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ВыкупАрендованныхОС"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ИзменениеУсловийДоговораАренды"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПередачаОСВАренду2_4"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ПрекращениеДоговораАренды"));
	
	// Прочее
	СписокТипов.Добавить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"));
	
	Для каждого ТипОбъекта Из СписокТипов Цикл
		СписокОбъектов.Добавить(ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипОбъекта));
	КонецЦикла; 
	
	Возврат СписокОбъектов;

КонецФункции

Функция ТипыДокументовКоторыеМогутИзменитьСтоимость() Экспорт

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуУзловКомпонентовАмортизации", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("МодернизацияОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияОС2_4", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуНМА2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияНМА2_4", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("КорректировкаРегистров", Ложь, ТипыОбъектов);

	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовКоторыеМогутИзменитьСтоимость(ТипыОбъектов);
	
	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовКоторыеМогутНачислитьАмортизацию()

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияНМА2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("КорректировкаРегистров", Ложь, ТипыОбъектов);
	
	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовКоторыеИзменяютСтоимостьВКонцеМесяца()
	
	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("АмортизацияНМА2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("КорректировкаРегистров", Ложь, ТипыОбъектов);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовКоторыеИзменяютСтоимостьВКонцеМесяца(ТипыОбъектов);

	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовПоКоторымНужноИсключитьРасходыПриРасчетеСтоимости()

	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуОС2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуУзловКомпонентовАмортизации", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("ПринятиеКУчетуНМА2_4", Ложь, ТипыОбъектов);
	ВнеоборотныеАктивыСлужебный.ДобавитьТипОбъектаМетаданных("МодернизацияОС2_4", Ложь, ТипыОбъектов);
	
	Возврат ТипыОбъектов;
	
КонецФункции

Функция ТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца()
	
	ТипыОбъектов = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТипыДокументовДвиженияКоторыхНужноПеренестиНаНачалоМесяца(ТипыОбъектов);
	
	Возврат ТипыОбъектов;
	
КонецФункции
 
Функция ПустыеСпособыОтраженияРасходов() Экспорт

	ПустыеСпособыОтраженияРасходов = Новый Массив;
	ПустыеСпособыОтраженияРасходов.Добавить(Неопределено);
	ПустыеСпособыОтраженияРасходов.Добавить(NULL);
	ПустыеСпособыОтраженияРасходов.Добавить(Документы.ИзменениеПараметровОС2_4.ПустаяСсылка());
	ПустыеСпособыОтраженияРасходов.Добавить(Документы.ИзменениеПараметровНМА2_4.ПустаяСсылка());

	ВнеоборотныеАктивыЛокализация.ДополнитьПустыеСпособыОтраженияРасходов(ПустыеСпособыОтраженияРасходов);
	
	Возврат ПустыеСпособыОтраженияРасходов;
	
КонецФункции

// Распределяет разницу в НДС между начислениями и оплатами.
//
Процедура РаспределитьНДСНачисленийНаОплаты(ГрафикНачисленияУслуг, ГрафикОплатУслуг, ИмяПоляСумма, ИмяПоляСуммаНДС)
	
	Коэффициенты = Новый Массив;
	СтрокиГрафика = Новый Массив;
	НачисленияНДС = 0;
	ОплатыНДС = 0;
	
	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		НачисленияНДС = НачисленияНДС + СтрокаГрафика[ИмяПоляСуммаНДС];
	КонецЦикла;

	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		Если СтрокаГрафика[ИмяПоляСумма] <> 0 Тогда
			СтрокиГрафика.Добавить(СтрокаГрафика);
			Коэффициенты.Добавить(СтрокаГрафика[ИмяПоляСумма]);
			ОплатыНДС = ОплатыНДС + СтрокаГрафика[ИмяПоляСуммаНДС];
		КонецЕсли;
	КонецЦикла;
	
	Если (НачисленияНДС - ОплатыНДС) <> 0 Тогда
		
		РаспределениеНДС = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(
							НачисленияНДС - ОплатыНДС, Коэффициенты);
							
		Для Индекс = 0 По СтрокиГрафика.ВГраница() Цикл
			СтрокаГрафика = СтрокиГрафика[Индекс];
			СтрокаГрафика[ИмяПоляСуммаНДС] = СтрокаГрафика[ИмяПоляСуммаНДС] + РаспределениеНДС[Индекс];
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды, ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде -
Процедура ЗаполнитьПриведеннуюСтоимостьПриОбновлении(ДокументОбъект) Экспорт
	
	Если НЕ ДокументОбъект.Проведен
		ИЛИ ДокументОбъект.ПриведеннаяСтоимость <> 0
		ИЛИ ДокументОбъект.СуммаПроцентов = 0 Тогда
		Возврат
	КонецЕсли;
			
	СпособОпределенияСтоимостиАктивов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Договор, "СпособОпределенияСтоимостиАктивов");
	Если СпособОпределенияСтоимостиАктивов = Перечисления.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости Тогда
		
		ДокументОбъект.ПриведеннаяСтоимость = ВнеоборотныеАктивыКлиентСервер.ПриведеннаяСтоимость(
								ДокументОбъект.СтоимостьПредметовАренды,
								ДокументОбъект.ГрафикОплатУслуг,
								ДокументОбъект.ДатаНачалаАренды);
		
	Иначе
		
		ГрафикОплатДляДисконтирования = ГрафикОплатДляДисконтирования(
			ДокументОбъект.ГрафикОплатУслуг, ДокументОбъект.ДатаНачалаАренды);
		
		ГрафикПлатежей = Новый ТаблицаЗначений; 
		ГрафикПлатежей.Колонки.Добавить("Дата", ОбщегоНазначенияУТ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ГрафикПлатежей.Колонки.Добавить("Сумма", ОбщегоНазначенияУТ.ОписаниеТипаДенежногоПоля(ДопустимыйЗнак.Любой));
			
		Для Каждого ИсходнаяСтрокаГрафика Из ГрафикОплатДляДисконтирования Цикл		
			
			Если ИсходнаяСтрокаГрафика.Дата < ДокументОбъект.ДатаНачалаАренды Тогда
				Продолжить;
			КонецЕсли;
			
			СуммаСтрокиБезНДС =
				ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж - ИсходнаяСтрокаГрафика.ОбеспечительныйПлатежНДС
				+ ИсходнаяСтрокаГрафика.УслугаПоАренде - ИсходнаяСтрокаГрафика.УслугаПоАрендеНДС
				+ ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость - ИсходнаяСтрокаГрафика.ВыкупнаяСтоимостьНДС;
				
			СтрокаГрафика = ГрафикПлатежей.Добавить();
			СтрокаГрафика.Дата = ИсходнаяСтрокаГрафика.Дата;
			СтрокаГрафика.Сумма = СуммаСтрокиБезНДС;
			
		КонецЦикла;
		
		Если ГрафикПлатежей.Количество() <> 0 Тогда
			ДокументОбъект.ПриведеннаяСтоимость = ПриведеннаяСтоимостьПоСтавкеИГрафику(
					ДокументОбъект.ПроцентнаяСтавка, ГрафикПлатежей);
		КонецЕсли;
				
	КонецЕсли;

КонецПроцедуры

// 
// Параметры:
//  ДокументОбъект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды, ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде -
Процедура ЗаполнитьСуммыНДСПриОбновлении(ДокументОбъект) Экспорт

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СтавкаНДС)
		ИЛИ НЕ ДокументОбъект.Проведен Тогда
		Возврат;
	КонецЕсли;
	
	Если ДокументОбъект.СуммаНДСВыкупаПредметовАренды = 0
		И ДокументОбъект.СуммаВыкупаПредметовАренды <> 0 Тогда
		
		ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(ДокументОбъект.СтавкаНДС);
		ДокументОбъект.СуммаНДСВыкупаПредметовАренды = УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(
			ДокументОбъект.СуммаВыкупаПредметовАренды, ПроцентНДС, Истина);
		
	КонецЕсли;
	
	ЗаполнитьСуммыНДС = Истина;
	Для Каждого СтрокаГрафика Из ДокументОбъект.ГрафикОплатУслуг Цикл
		Если СтрокаГрафика.УслугаПоАрендеНДС <> 0
			ИЛИ СтрокаГрафика.ОбеспечительныйПлатежНДС <> 0 
			ИЛИ СтрокаГрафика.ВыкупнаяСтоимостьНДС <> 0 Тогда
			ЗаполнитьСуммыНДС = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаГрафика Из ДокументОбъект.ГрафикНачисленияУслуг Цикл
		Если СтрокаГрафика.УслугаПоАрендеНДС <> 0
			ИЛИ СтрокаГрафика.ОбеспечительныйПлатежНДС <> 0 Тогда
			ЗаполнитьСуммыНДС = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнитьСуммыНДС Тогда
		
		ЗаполнитьСуммыНДСВГрафиках(
			ДокументОбъект.ГрафикОплатУслуг, ДокументОбъект.ГрафикНачисленияУслуг, ДокументОбъект.СтавкаНДС);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
