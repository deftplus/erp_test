////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ

// Функция открывает файл на файл на диске 
//
Функция ОткрытьФайлНаДиске(ПолноеИмяФайла) Экспорт
	
	Попытка
		
		ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
		
		Если НРег(ФайлНаДиске.Расширение) = ".mxl" Тогда
			ТабличныйДокумент = Новый ТабличныйДокумент;
			ТабличныйДокумент.Прочитать(ПолноеИмяФайла);
			ТабличныйДокумент.Показать(ПолноеИмяФайла,ПолноеИмяФайла);
		ИначеЕсли НРег(ФайлНаДиске.Расширение) = ".txt" Тогда
			ТекстовыйДокумент = Новый ТекстовыйДокумент;
			ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
			ТекстовыйДокумент.Показать(ПолноеИмяФайла,ПолноеИмяФайла);
		ИначеЕсли НРег(ФайлНаДиске.Расширение) = ".geo" Тогда
			ГеографическаяСхема = Новый ГеографическаяСхема;
			ГеографическаяСхема.Прочитать(ПолноеИмяФайла);
			ГеографическаяСхема.Показать(ПолноеИмяФайла,ПолноеИмяФайла);
		Иначе
			ОбщегоНазначенияКлиентСервер.ЗапуститьПрограмму(ПолноеИмяФайла);
		КонецЕсли; 
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ПолноеИмяФайла%"" не открыт.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолноеИмяФайла%", Строка(ПолноеИмяФайла));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ОткрытьФайлНаДиске.1", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьВерсиюФайла(ХранимыйФайл,Период=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.Ссылка,
	|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ПолноеИмяФайла
	|ИЗ
	|	Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы КАК ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|ГДЕ ";
	
	Если ТипЗнч(ХранимыйФайл)=Тип("СправочникСсылка.ХранимыеФайлыОрганизацийПрисоединенныеФайлы") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ХранимыеФайлыОрганизацийПрисоединенныеФайлы.Ссылка = &ХранимыйФайл";
				
	Иначе
		
		Запрос.Текст=Запрос.Текст+"
		|ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ВладелецФайла = &ХранимыйФайл";
			
		Если НЕ Период=Неопределено Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ДатаСоздания <= &Период";
			
			Запрос.УстановитьПараметр("Период",Период);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ХранимыйФайл",ХранимыйФайл);
		
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСоздания УБЫВ";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ДанныеФайла= РаботаСФайлами.ДанныеФайла(Результат.Ссылка);
		ДанныеФайла.Вставить("ПолноеИмяФайла",Результат.ПолноеИмяФайла);
		ДанныеФайла.Вставить("Ссылка",Результат.Ссылка);
	
	Иначе
		
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("СсылкаНаДвоичныеДанныеФайла",  );
		ДанныеФайла.Вставить("ОтносительныйПуть",            );
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", );
		ДанныеФайла.Вставить("ИмяФайла",                     );
		ДанныеФайла.Вставить("Наименование",                 );
		ДанныеФайла.Вставить("Расширение",                   );
		ДанныеФайла.Вставить("Размер",                       );
		ДанныеФайла.Вставить("Редактирует",                  );
		ДанныеФайла.Вставить("ПодписанЭП",                   );
		ДанныеФайла.Вставить("Зашифрован",                   );
		ДанныеФайла.Вставить("ФайлРедактируется",            );
		ДанныеФайла.Вставить("ФайлРедактируетТекущийПользователь",);
		ДанныеФайла.Вставить("МассивСертификатовШифрования",);
		ДанныеФайла.Вставить("ПолноеИмяФайла",);
		ДанныеФайла.Вставить("Ссылка",);
				
	КонецЕсли;
	
	Возврат ДанныеФайла;
		
КонецФункции // ПолучитьВерсиюФайла() 

// Функция получает хранимый файл из хранилища значений и открывает его в режиме только для чтения
//
Процедура ОткрытьХранимыйФайлДляЧтения(ХранимыйФайл, Период = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХранимыйФайл) или ХранимыйФайл.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = КаталогВременныхФайлов() + "\" + Строка(Новый УникальныйИдентификатор);
	ПолноеИмяФайла = ИмяКаталога + "\" + СформироватьИмяФайла(ХранимыйФайл.Наименование, Период);
	
	СтруктураВерсии = ПолучитьВерсиюФайла(ХранимыйФайл,Период);
	
	Если НЕ ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не найдена версия хранимого файла %ХранимыйФайл% %Период%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПредставлениеПериодаФайла = ?(ЗначениеЗаполнено(Период), СтрШаблон(Нстр("ru = ' на дату %1'"), Период),"");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(ПредставлениеПериодаФайла));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ОткрытьХранимыйФайлДляЧтения.2", , ХранимыйФайл, ТекстСообщения);
		Возврат;
		
	КонецЕсли;
		
	ДвоичныеДанные  = ПолучитьИзВременногоХранилища(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла);
	
	Попытка
		СоздатьКаталог(ИмяКаталога);
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка создания каталога для временного файла ""%ХранимыйФайл%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ОткрытьХранимыйФайлДляЧтения.1", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
		ТекстСообщения = НСтр("ru = 'Ошибка создания каталога для временного файла ""%ХранимыйФайл%"" 
		|- %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОбщегоНазначенияУХ.СформироватьТекстСообщения(ОписаниеОшибки())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		
		Возврат;
		
	КонецПопытки;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
	
	// Запись на диск последней версии файла из хранилища.
	
	Попытка
		
		ДвоичныеДанные.Записать(ФайлНаДиске.ПолноеИмя);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не получен из информационной базы.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ОткрытьФайлНаДиске.2", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не получен из информационной базы:
		|- %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОбщегоНазначенияУХ.СформироватьТекстСообщения(ОписаниеОшибки())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		
		Возврат;
		
	КонецПопытки;
	
	ФайлНаДиске.УстановитьТолькоЧтение(Истина);
	ФайлНаДиске.УстановитьВремяИзменения(СтруктураВерсии.ДатаМодификацииУниверсальная);
	ОткрытьФайлНаДиске(ПолноеИмяФайла);
	
КонецПроцедуры // () 

// Процедура открывае форму выбора списка хранимых файлов организация, с предустановленными отборами
//
//
Процедура ОткрытьФормуСпискаХранимыхФайловОрганизацииДляВыбора(Элемент, ИсточникОтборов) Экспорт
	
	Форма = Справочники.ХранимыеФайлыОрганизаций.ПолучитьФормуВыбора(,Элемент);
	Форма.Отбор.Владелец       .Установить(ИсточникОтборов.Организация);
	Форма.Отбор.Сценарий       .Установить(ИсточникОтборов.Сценарий);
	Форма.Отбор.ПериодСценария .Установить(ИсточникОтборов.ПериодСценария);
	Форма.Отбор.ВидОтчета      .Установить(ИсточникОтборов.ВидОтчета);
	
	Если ИсточникОтборов.Свойство("РасширениеФайла") Тогда
		Форма.Отбор.РасширениеФайла.Установить(ИсточникОтборов.РасширениеФайла);
	КонецЕсли;
	
	Для к = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Форма.Отбор["Аналитика" + к].Установить(?(НЕ ЗначениеЗаполнено(ИсточникОтборов["Аналитика" + к]), Неопределено, ИсточникОтборов["Аналитика" + к]));
	КонецЦикла; 
	Форма.Открыть();
	
КонецПроцедуры // () 

Функция ПолучитьДвоичныеДанныеФайла(Знач ХранимыйФайл, Знач Период, ДатаИзмененияФайла) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХранимыйФайл) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураВерсии = ПолучитьВерсиюФайла(ХранимыйФайл,Период);
	
	Если НЕ ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ХранимыйФайл=?(ТипЗнч(ХранимыйФайл)=Тип("СправочникСсылка.ХранимыеФайлыОрганизацийПрисоединенныеФайлы"),ХранимыйФайл.ВладелецФайла,ХранимыйФайл);
		
		ТекстСообщения = НСтр("ru = 'Не найдена версия хранимого файла %Период%'");
		ПредставлениеПериода = ?(ЗначениеЗаполнено(Период), СтрШаблон(Нстр("ru = ' на дату %1'"), Период), "");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(ПредставлениеПериода));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьДвоичныеДанныеФайла.2", , ХранимыйФайл, ТекстСообщения);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДатаИзмененияФайла = СтруктураВерсии.ДатаМодификацииУниверсальная;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла);
	
	Возврат ДвоичныеДанные;
		
КонецФункции

// Функция возвращает строку с именем каталога пользователя
//
Функция КаталогПользователя(Пользователь) Экспорт
	
	Каталог = Пользователь.РабочийКаталог;
	
	Если ПустаяСтрока(Каталог) Тогда
		Каталог = КаталогВременныхФайлов() + Метаданные.Имя;
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

// Функция возвращает строку, соответствующую подкаталогу владельца хранимого файла
//
Функция ПодКаталогВладельцаХранимогоФайла(ВладелецФайла) Экспорт
	
	Если      ТипЗнч(ВладелецФайла) = Тип("СправочникСсылка.Организации") Тогда
		Каталог = "\Организации\" + СокрЛП(СформироватьИмяФайла(ВладелецФайла.ПолноеНаименование()));
	Иначе
		Каталог = "";
	КонецЕсли;
	
	Возврат Каталог;
	
КонецФункции

// Функция возвращает имя файла (заменяются все недопустимые символы) и добавляется суффикс соответствующий периоду хранимого файла
//
Функция СформироватьИмяФайла(Знач ИмяФайла, Период = Неопределено) Экспорт
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		ФайлНаДиске = Новый Файл(ИмяФайла);
		ИмяФайла = ФайлНаДиске.Путь + ФайлНаДиске.ИмяБезРасширения + " ("+Формат(Период, "ДФ=""гггг-ММ-дд ЧЧ-мм-сс""")+")" + ФайлНаДиске.Расширение;
		
	КонецЕсли;
		
	Возврат ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(ИмяФайла, Истина, Истина);
	
КонецФункции

Функция ПолучитьФайлИмпорта(ВерсияХранимогоФайла) Экспорт
	
	Возврат ВерсияХранимогоФайла.ВладелецФайла; 
	
КонецФункции // ПолучитьФайлИмпорта() 

// Функция получает хранимый файл из информационной базы на диск
//
//
Функция ПолучитьХранимыйФайл(ХранимыйФайл, ПолноеИмяФайла, ПроверятьДатуФайла = Истина, ПроверятьТолькоЧтениеФайла = Истина, Период = Неопределено) Экспорт
	
	// Проверка наличия версии файла в хранилище.
	
	ДатаХранимогоФайла = ДатаИзмененияХранимогоФайла(ХранимыйФайл, Период);
	
	Если ДатаХранимогоФайла = '00010101' Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не выгружен из информационной базы: файл отутствует в информационной базе.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьХранимыйФайл.1", , , ТекстСообщения);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Проверка допустимой длины полного имени файла.
	
	Если СтрДлина(ПолноеИмяФайла) > 256 Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл %ПолноеИмяФайла% не получен из информационной базы: полное имя файла содержит более 256 символов. 
                      |		Измените рабочий каталог в настройках пользователя или выберите каталог в диалоге ""Получение файлов...""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолноеИмяФайла%", Строка(ПолноеИмяФайла));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьХранимыйФайл.2", , , ТекстСообщения);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,, СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
	
	Если ФайлНаДиске.Существует() И ПроверятьДатуФайла Тогда
		ДатаФайлаНаДиске = ФайлНаДиске.ПолучитьВремяИзменения();
		
		Если ДатаФайлаНаДиске > ДатаХранимогоФайла Тогда
			#Если Клиент Тогда

			ТекстВопроса = СтрШаблон(Нстр("ru = 'Файл ""%1""
						   |на Вашем компьютере имеет дату изменения: %2.
						   |%3 версия этого файла в информационной базе имеет дату изменения: %4.
						   |Вы уверены, что хотите выгрузить из информационной базы более раннюю версию файла?'"), 
						   ФайлНаДиске.ПолноеИмя, ДатаФайлаНаДиске, ?(Период=Неопределено,"Последняя","Выгружаемая"), 
						   ДатаХранимогоФайла);
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Нстр("ru = 'Выгрузка файла'"));
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Неопределено;
			КонецЕсли;
			#Иначе
				Возврат Неопределено;
			#КонецЕсли

		КонецЕсли;
	КонецЕсли;
	
	// Получение последней версии файла из хранилища.
	
	СтруктураВерсии = ПолучитьВерсиюФайла(ХранимыйФайл,Период);
	
	Если НЕ ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не найдена версия хранимого файла ""%ХранимыйФайл%"" %Период%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(?(ЗначениеЗаполнено(Период),СтрШаблон(Нстр("ru = ' на дату %1'"), Период),"")));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьХранимыйФайл.2", , ХранимыйФайл, ТекстСообщения);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ДвоичныеДанные  = ПолучитьИзВременногоХранилища(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла);
	
	Если ТипЗнч(ДвоичныеДанные) <> Тип("ДвоичныеДанные") Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не выгружен из информационной базы: файл отутствует в информационной базе.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьХранимыйФайл.3", , , ТекстСообщения);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Проверка атрибута "Только чтение" файла на диске.
	
	Если ФайлНаДиске.Существует() И ФайлНаДиске.ПолучитьТолькоЧтение() Тогда
		Если ПроверятьТолькоЧтениеФайла Тогда
			#Если Клиент Тогда
			ТекстВопроса = СтрШаблон(Нстр("ru = 'Файл ""%1""
						   |на Вашем компьютере имеет атрибут ""Только чтение"". Заменить этот файл?'"), 
						   ФайлНаДиске.ПолноеИмя);
			
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Нстр("ru = 'Выгрузка файла'"));
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат Неопределено;
			КонецЕсли;
			#Иначе
				Возврат Неопределено;
			#КонецЕсли
			
		КонецЕсли;
		
		ФайлНаДиске.УстановитьТолькоЧтение(Неопределено);
		
	КонецЕсли;
	
	// Проверка наличия каталога на диске.
	
	Попытка
		
		СоздатьКаталог(ФайлНаДиске.Путь);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не выгружен из информационной базы: каталог ""%Путь%"" не создан.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Путь%", Строка(ФайлНаДиске.Путь));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьХранимыйФайл.4", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не выгружен из информационной базы: каталог ""%Путь%"" не создан: 
		|- %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Путь%", Строка(ФайлНаДиске.Путь));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОбщегоНазначенияУХ.СформироватьТекстСообщения(ОписаниеОшибки())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
	// Запись на диск последней версии файла из хранилища.
	
	Попытка
		
		ДвоичныеДанные.Записать(ФайлНаДиске.ПолноеИмя);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не выгружен из информационной базы.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПолучитьХранимыйФайл.5", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не выгружен из информационной базы: 
		|- %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОбщегоНазначенияУХ.СформироватьТекстСообщения(ОписаниеОшибки())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ФайлНаДиске.УстановитьВремяИзменения(ДатаХранимогоФайла);
	Возврат СтруктураВерсии.Ссылка;
	
КонецФункции

// Функция помещает хранимый файл с диска в информационную базу 
//
//
Функция ПоместитьХранимыйФайл(ХранимыйФайл, ПолноеИмяФайла, Комментарий = "", Локально = Ложь, ИмпортЧерезWebИнтерфейс = Ложь) Экспорт
	
	// Проверка захвата хранимого файла.
	
	Если СтрДлина(ПолноеИмяФайла) > 256 И НЕ ИмпортЧерезWebИнтерфейс Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ПолноеИмяФайла%"" не загружен в информационную базу: полное имя файла содержит более 256 символов'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолноеИмяФайла%", Строка(ПолноеИмяФайла));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл.1", , , ТекстСообщения);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ПолноеИмяФайла);
	
	// Чтение файла с диска.
	
	Если НЕ ФайлНаДиске.Существует() Тогда
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ПолноеИмяФайла%"" не загружен в информационную базу: файл отутствует на диске.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолноеИмяФайла%", Строка(ПолноеИмяФайла));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл.2", , , ТекстСообщения);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Попытка
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлНаДиске.ПолноеИмя);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ПолноеИмяФайла%"" не загружен в информационную базу.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолноеИмяФайла%", Строка(ПолноеИмяФайла));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл.3", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не загружен в информационную базу:
                      |- %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОбщегоНазначенияУХ.СформироватьТекстСообщения(ОписаниеОшибки())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
	ДатаИзмененияФайла = ФайлНаДиске.ПолучитьВремяИзменения();
	РазмерФайла = ФайлНаДиске.Размер();
 				
	СуществующаяВерсия=ПроверитьНаличиеВерсии(ХранимыйФайл,ДатаИзмененияФайла,РазмерФайла,ПолноеИмяФайла);
	
	Если НЕ СуществующаяВерсия=Неопределено Тогда
		
		Возврат СуществующаяВерсия;
		
	КонецЕсли;
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ВладелецФайлов", ХранимыйФайл);
	ПараметрыФайла.Вставить("ИмяБезРасширения",ФайлНаДиске.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",СтрЗаменить(ФайлНаДиске.Расширение,".",""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное",ДатаИзмененияФайла);
	
	Попытка
		
		ОбъектВерсия=РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанные)).ПолучитьОбъект();
		ОбъектВерсия.ПолноеИмяФайла=ПолноеИмяФайла;
		
		ОбъектВерсия.Записать();
		Возврат ОбъектВерсия.Ссылка;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать версию файла ""%ХранимыйФайл%"" для организации %Организация%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ХранимыйФайл.Владелец));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл.4", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат НЕопределено;
		
	КонецПопытки;
			
КонецФункции

Функция ПроверитьНаличиеВерсии(ХранимыйФайл,ДатаИзмененияФайла,РазмерФайла,ПолноеИмяФайла) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.Ссылка
	|ИЗ
	|	Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы КАК ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|ГДЕ
	|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ВладелецФайла = &ХранимыйФайл
	|	И ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ДатаМодификацииУниверсальная = &ДатаИзмененияФайла
	|	И ХранимыеФайлыОрганизацийПрисоединенныеФайлы.Размер = &РазмерФайла
	|	И ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ПолноеИмяФайла = &ПолноеИмяФайла";
	
	Запрос.УстановитьПараметр("ХранимыйФайл",		ХранимыйФайл);
	Запрос.УстановитьПараметр("ДатаИзмененияФайла",	ДатаИзмененияФайла);
	Запрос.УстановитьПараметр("РазмерФайла",		РазмерФайла);
	Запрос.УстановитьПараметр("ПолноеИмяФайла",		ПолноеИмяФайла);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
			
КонецФункции // ПроверитьНаличиеВерсии() 

Функция ПолучитьСписокЛистов(ХранимыйФайл=Неопределено,ПолноеИмяФайла="") Экспорт
	
	СписокЛистов=Новый СписокЗначений;
	
	
	
КонецФункции // ПолучитьСписокЛистов() 

// Функция помещает хранимый файл с диска в информационную базу 
//
//
Функция ПоместитьХранимыйФайл_УР(ХранимыйФайл, СтруктураФайла, Комментарий = "") Экспорт
	
	Попытка
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(СтруктураФайла.АдресВременногоХранилища);
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не загружен в информационную базу.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл_УР.1",,, ТекстСообщения , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщения = НСтр("ru = 'Файл %ХранимыйФайл% не загружен в информационную базу:
		|- %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОбщегоНазначенияУХ.СформироватьТекстСообщения(ОписаниеОшибки())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецПопытки;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Файл ""%ХранимыйФайл%"" не удалось передать на сервер для обработки.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл_УР.2", , , ТекстСообщения);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Файл ""%1"" не удалось передать на сервер для обработки'"), 
			ХранимыйФайл),,, СтатусСообщения.Важное);
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если СтрНайти(ВРег(СокрЛП(ХранимыйФайл.РасширениеФайла)),"XLS")>0 Тогда // Файл Excel. Надо определить список листов документа.
		
		ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел(ТекущаяДата() - НачалоДня(ТекущаяДата()));
		ПолноеИмяФайла = КаталогВременныхФайлов() + "TEMP" + Строка(ГенераторСлучайныхЧисел.СлучайноеЧисло(0, 10000)) + ".XLS";
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
		СтруктураФайла.СписокЛистов = ОбработкаФайловMicrosoftExcelКлиентСерверУХ.ВернутьСписокЛистов(ПолноеИмяФайла);
		
	КонецЕсли;
	
	// Запись новой версии файла
	
	СуществующаяВерсия=ПроверитьНаличиеВерсии(ХранимыйФайл,СтруктураФайла.ДатаИзмененияФайла,СтруктураФайла.РазмерФайла,СтруктураФайла.ПолноеИмяНаДиске);
	
	Если НЕ СуществующаяВерсия=Неопределено Тогда
		
		Возврат СуществующаяВерсия;
		
	КонецЕсли;
	
	ФайлНаДиске=Новый Файл(СтруктураФайла.ПолноеИмяНаДиске);
	
	ПараметрыФайла = Новый Структура();
	ПараметрыФайла.Вставить("Автор", ПараметрыСеанса.ТекущийПользователь);
	ПараметрыФайла.Вставить("ВладелецФайлов", ХранимыйФайл);
	ПараметрыФайла.Вставить("ИмяБезРасширения",ФайлНаДиске.ИмяБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки",СтрЗаменить(ФайлНаДиске.Расширение,".",""));
	ПараметрыФайла.Вставить("ВремяИзмененияУниверсальное", 	ТекущаяУниверсальнаяДата());
	
	Попытка
		
		ОбъектВерсия=РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанные)).ПолучитьОбъект();
		ОбъектВерсия.ПолноеИмяФайла=СтруктураФайла.ПолноеИмяНаДиске;
		
		ОбъектВерсия.Записать();
		Возврат ОбъектВерсия.Ссылка;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать версию файла ""%ХранимыйФайл%"" для организации %Организация%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ХранимыйФайл%", Строка(ХранимыйФайл));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ХранимыйФайл.Владелец));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ПоместитьХранимыйФайл.4", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат НЕопределено;
		
	КонецПопытки;
		
КонецФункции

// Реализация функции для сохранения хранимого файла из управляемого режима.
Функция ДобавитьХранимыйФайлИлиВерсию_УР(СтруктураОтбора, СтруктураФайла, КомментарийКВерсии ="", ХранимыйФайл = Неопределено, Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХранимыеФайлыОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ХранимыеФайлыОрганизаций КАК ХранимыеФайлыОрганизаций
	|ГДЕ
	|	ХранимыеФайлыОрганизаций.Наименование = &Наименование
	|	И ХранимыеФайлыОрганизаций.Владелец = &Владелец
	|	И ХранимыеФайлыОрганизаций.Сценарий = &Сценарий
	|	И ХранимыеФайлыОрганизаций.ПериодСценария = &ПериодСценария";
	
		
	Запрос.УстановитьПараметр("Наименование",   СтруктураФайла.НаименованиеФайла);
	Запрос.УстановитьПараметр("Владелец",       СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Сценарий",       СтруктураОтбора.Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", СтруктураОтбора.ПериодСценария);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВерсияФайла=ПоместитьХранимыйФайл_УР(Выборка.Ссылка, СтруктураФайла, КомментарийКВерсии);
		
		Если ВерсияФайла=Неопределено Тогда
			
			Результат=Неопределено;
			
		Иначе
			
			ХранимыйФайл 	= Выборка.Ссылка;
			Результат 		= ВерсияФайла;
			
		КонецЕсли; 
		
	Иначе
		
		Объект 							= Справочники.ХранимыеФайлыОрганизаций.СоздатьЭлемент();
		Объект.ИсходныйФайлПервойВерсии = СтруктураФайла.ПолноеИмяНаДиске;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОтбора,"Сценарий, ПериодСценария");
		Объект.Владелец = СтруктураОтбора.Организация;
		Объект.КомментарийКПервойВерсии = КомментарийКВерсии;
		Объект.Наименование = СтруктураФайла.НаименованиеФайла;
		
		Попытка
			
			Объект.СтруктураФайла = СтруктураФайла;
			Объект.Записать();
			ХранимыйФайл = Объект.Ссылка;
			Результат = ПолучитьВерсиюФайла(Объект.Ссылка).Ссылка;
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
			ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию_УР.1", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Результат = Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат=Неопределено Тогда
		
		Период=Результат.ДатаСоздания;
					
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

// Функция помещает новый хранимый файл или версию существующего с диска в информационную базу 
//
//
Функция ДобавитьХранимыйФайлИлиВерсию(Знач ПолноеИмяНаДиске, СтруктураОтбора, КомментарийКВерсии = "", ХранимыйФайл = Неопределено, Период = Неопределено, ИмпортЧерезWebИнтерфейс = Ложь) Экспорт
	
	ФайлНаДиске = Новый Файл(ПолноеИмяНаДиске);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХранимыеФайлыОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ХранимыеФайлыОрганизаций КАК ХранимыеФайлыОрганизаций
	|ГДЕ
	|	ХранимыеФайлыОрганизаций.Наименование = &Наименование
	|	И ХранимыеФайлыОрганизаций.Владелец = &Владелец
	|	И ХранимыеФайлыОрганизаций.Сценарий = &Сценарий
	|	И ХранимыеФайлыОрганизаций.ПериодСценария = &ПериодСценария";
		
	Запрос.УстановитьПараметр("Наименование",   ФайлНаДиске.Имя);
	Запрос.УстановитьПараметр("Владелец",       СтруктураОтбора.Организация);
	Запрос.УстановитьПараметр("Сценарий",       СтруктураОтбора.Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", СтруктураОтбора.ПериодСценария);
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ВерсияФайла=ПоместитьХранимыйФайл(Выборка.Ссылка, ПолноеИмяНаДиске, КомментарийКВерсии);
		
		Если ВерсияФайла=Неопределено Тогда
			
			Результат=Неопределено;
			
		Иначе
			
			ХранимыйФайл = Выборка.Ссылка;
			Результат = ВерсияФайла;
						
		КонецЕсли; 
		
	Иначе
		
		Объект = Справочники.ХранимыеФайлыОрганизаций.СоздатьЭлемент();
		Объект.ИсходныйФайлПервойВерсии = ПолноеИмяНаДиске;
		ЗаполнитьЗначенияСвойств(Объект, СтруктураОтбора,"Сценарий, ПериодСценария");
		Объект.Владелец = СтруктураОтбора.Организация;
		Объект.КомментарийКПервойВерсии = КомментарийКВерсии;
		Объект.Наименование = ФайлНаДиске.Имя;
		
		Попытка
			
			Объект.Записать();
			ХранимыйФайл = Объект.Ссылка;
			Результат = ПолучитьВерсиюФайла(Объект.Ссылка).Ссылка;
			
		Исключение
			ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию.1", , , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Результат = Неопределено;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Если НЕ Результат=Неопределено Тогда
			
		Период = Результат.ДатаСоздания;
					
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции // ()

// Функция удаляет хранимый файл или каталог, удаляются так-же файлы с атрибутом "Только чтение"
//
// Возвращаемое значение:
//  Истина, если файлы удалены, ложь - иначе
//
Функция УдалитьФайлИлиКаталог(Файл) Экспорт
	
	Если Не Файл.Существует() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ВложенныеФайлыУдалились = Истина;
	Если Файл.ЭтоКаталог() Тогда
		Для каждого ВложенныйФайл Из НайтиФайлы(Файл.ПолноеИмя, "*.*") Цикл
			
			Если Не УдалитьФайлИлиКаталог(ВложенныйФайл) Тогда
				ВложенныеФайлыУдалились = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ВложенныеФайлыУдалились Тогда
		Попытка
			Файл.УстановитьТолькоЧтение(Ложь);
			УдалитьФайлы(Файл.ПолноеИмя);
		Исключение
			Возврат Ложь;
		КонецПопытки;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	
КонецФункции

// Функция возвращает дату изменения версии хранимого файла
//
Функция ДатаИзмененияХранимогоФайла(ХранимыйФайл, Период = Неопределено)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная
	|ИЗ
	|	Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы КАК ХранимыеФайлыОрганизацийПрисоединенныеФайлы";
	
	Если ТипЗнч(ХранимыйФайл)=Тип("СправочникСсылка.ХранимыеФайлыОрганизацийПрисоединенныеФайлы") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ
		|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.Ссылка = &ХранимыйФайл";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|ГДЕ
		|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ВладелецФайла = &ХранимыйФайл";
		
		Если НЕ Период=Неопределено Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ДатаСоздания <= &Период";
			
			Запрос.УстановитьПараметр("Период",Период);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаМодификацииУниверсальная УБЫВ";
	
	Запрос.УстановитьПараметр("ХранимыйФайл", ХранимыйФайл);
	Запрос.УстановитьПараметр("Период", Период);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	Если Выборка.ДатаМодификацииУниверсальная <> Null Тогда
		Возврат Выборка.ДатаМодификацииУниверсальная;
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции

// Формирует строку фильтра для диалога выбора файла с типами файлов.
//
// Параметры
//  Нет.
//
// Возвращаемое значение:
//   Строка – фильтр по типам файлов для диалога выбора файла.
//
Функция ПолучитьФильтрФайлов() Экспорт

	Возврат "Все файлы (*.*)|*.*|"
	      + "Файлы 1С (*.dt;*.cd;*.cf;*.cfu;*.epf)|*.dt;*.cd;*.cf;*.cfu;*.epf|"
	      + "Файлы баз данных 1С (*.dt;*.cd)|*.dt;*.cd|"
	      + "Файлы конфигураций 1С (*.cf;*.cfu)|*.cf;*.cfu|"
	      + "Внешние обработки (*.epf)|*.epf|"
	      + "Картинки (*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf)|*.bmp;*.dib;*.rle;*.jpg;*.jpeg;*.tif;*.gif;*.png;*.ico;*.wmf;*.emf|"
	      + "Документ Microsoft Word (*.doc)|*.doc|"
	      + "Документ Microsoft Excell (*.xls)|*.xls|"
	      + "Документ Microsoft PowerPoint (*.ppt)|*.ppt|"
	      + "Документ Microsoft Visio (*.vsd)|*.vsd|"
	      + "Письмо электронной почты (*.msg)|*.msg|"
	      + "Текстовый документ (*.txt)|*.txt|"
	      + "Табличный документ (*.mxl)|*.mxl|";
		  
КонецФункции // ПолучитьФильтрФайлов()

Функция ПолучитьВерсиюФайлаПоОбъекту(Объект) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОбъектыХранимыхФайлов.ВерсияХранимогоФайла.Ссылка КАК ВерсияХранимогоФайла,
	|	ОбъектыХранимыхФайлов.ВерсияХранимогоФайла.ПолноеИмяФайла КАК ПолноеИмяФайла
	|ИЗ
	|	РегистрСведений.ОбъектыХранимыхФайлов КАК ОбъектыХранимыхФайлов
	|ГДЕ
	|	ОбъектыХранимыхФайлов.ИмпортированныйОбъект = &Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбъектыХранимыхФайлов.Период УБЫВ";
	
	Запрос.УстановитьПараметр("Объект",Объект);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Новый Структура("ВерсияХранимогоФайла,ПолноеИмяФайла",Результат.ВерсияХранимогоФайла,Результат.ПолноеИмяФайла);
		
	Иначе
		
		Если ТипЗнч(Объект)=Тип("Строка") Тогда
			
			ФайлНаДиске=Новый Файл(Объект);
			
			Если ФайлНаДиске.Существует() Тогда
				
				Возврат Новый Структура("ВерсияХранимогоФайла,ПолноеИмяФайла",,Объект);
				
			КонецЕсли;
					
		ИначеЕсли ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ФайлИмпорта",Объект) Тогда
			
			Если ТипЗнч(Объект.ФайлИмпорта)=Тип("СправочникСсылка.ХранимыеФайлыОрганизацийПрисоединенныеФайлы") Тогда
				
				Возврат Новый Структура("ВерсияХранимогоФайла,ПолноеИмяФайла",Объект,Объект.ПолноеИмяФайла);
				
			Иначе
				
				СтруктураВерсии=ПолучитьВерсиюФайла(Объект.ФайлИмпорта);
				
				Если ЗначениеЗаполнено(СтруктураВерсии.СсылкаНаДвоичныеДанныеФайла) Тогда
					
					Возврат СтруктураВерсии;
					
				Иначе	
					
					Возврат Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВерсиюФайлаПоОбъекту()

Функция ПолучитьИмпортированнуюВерсию(ИнформацияОФайле,Объект) Экспорт
	
	Перем ИмяФайла;
	Перем ДатаИзмененияФайла;
	Перем РазмерФайла;
	
	Если ТипЗнч(ИнформацияОФайле)=Тип("Структура") Тогда
		
		ИнформацияОФайле.Свойство("ИмяФайла",			ИмяФайла);
		ИнформацияОФайле.Свойство("ДатаМодификацииУниверсальная",	ДатаИзмененияФайла);
		ИнформацияОФайле.Свойство("РазмерФайла",		РазмерФайла);
		
	Иначе
		
		ИмяФайла			= ИнформацияОФайле.Имя;
		ДатаИзмененияФайла	= ИнформацияОФайле.ПолучитьВремяИзменения();
		РазмерФайла			= ИнформацияОФайле.Размер();
		
	КонецЕсли;
			
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ОбъектыХранимыхФайлов.ВерсияХранимогоФайла
	|ИЗ
	|	РегистрСведений.ОбъектыХранимыхФайлов КАК ОбъектыХранимыхФайлов
	|ГДЕ
	|	ОбъектыХранимыхФайлов.ХранимыйФайл.Наименование = &Наименование
	|	И ОбъектыХранимыхФайлов.ВерсияХранимогоФайла.ДатаМодификацииУниверсальная = &ДатаИзмененияФайла
	|	И ОбъектыХранимыхФайлов.ВерсияХранимогоФайла.Размер = &РазмерФайла
	|	И ОбъектыХранимыхФайлов.ИмпортированныйОбъект = &ИмпортированныйОбъект";
	
	Запрос.УстановитьПараметр("Наименование",			ИмяФайла);
	Запрос.УстановитьПараметр("ДатаИзмененияФайла",		ДатаИзмененияФайла);
	Запрос.УстановитьПараметр("РазмерФайла",			РазмерФайла);
	Запрос.УстановитьПараметр("ИмпортированныйОбъект",	Объект);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.ВерсияХранимогоФайла;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПовторныйИмпортДанных() 

Функция ЧислоВерсийВБазе(ХранимыйФайл=Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ХранимыеФайлыОрганизацийПрисоединенныеФайлы.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы КАК ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|ГДЕ
	|	ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ТипХраненияФайла = &ТипХраненияФайла";
	
	Запрос.УстановитьПараметр("ТипХраненияФайла", Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);
	
	Если ЗначениеЗаполнено(ХранимыйФайл) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ВладелецФайла=&ХранимыйФайл";
		
		Запрос.УстановитьПараметр("ХранимыйФайл",ХранимыйФайл);
		
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	КонецЕсли;	
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Количество;
	
КонецФункции
	  

