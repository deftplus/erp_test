
#Область ПрограммныйИнтерфейс

Функция ПолучитьИмяДокументаЗаявка(ВидБюджета, ПриходРасход) Экспорт
	
	Результат = Неопределено;
	
	Если ДвиженияБюджетированиеКлиентСерверУХ.ЭтоБДДС(ВидБюджета) Тогда
		
		Если ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход") Тогда
			Результат = "ЗаявкаНаРасходованиеДенежныхСредств";
		ИначеЕсли ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход") Тогда
			Результат = "ОжидаемоеПоступлениеДенежныхСредств";			
		КонецЕсли;
		
	ИначеЕсли ДвиженияБюджетированиеКлиентСерверУХ.ЭтоБДР(ВидБюджета) Тогда
		
		Если ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход") Тогда
			Результат = "ЗаявкаНаРасход";
		ИначеЕсли ПриходРасход = ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход") Тогда
			Результат = "ПланируемыйДоход";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЗаявкаНаОперацию(Знач ОбъектИлиТип) Экспорт
	
	Если ОбъектИлиТип = неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОписаниеТиповЗаявки = Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств, 
												|ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств, 
												|ДокументСсылка.ЗаявкаНаРасход, 
												|ДокументСсылка.ПланируемыйДоход");
	
	Если ТипЗнч(ОбъектИлиТип) = Тип("Тип") Тогда
		ТипПроверяемогоЗначения = ОбъектИлиТип;
	Иначе
		ТипПроверяемогоЗначения = ТипЗнч(ОбъектИлиТип);
	КонецЕсли;
	
	Возврат ОписаниеТиповЗаявки.СодержитТип(ТипПроверяемогоЗначения);
	
КонецФункции

Функция ЕстьЗеркалированиеОперации(Объект) Экспорт
	
	РезультатФункции = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ЭтоВнутригрупповоеПеремещение") 
		И Объект.ЭтоВнутригрупповоеПеремещение = Истина Тогда
		
		РезультатФункции = Истина;
		
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидОперацииУХ") Тогда
		
		РезультатФункции = ВидыОперацийУХКлиентСерверПовтИсп.ЭтоПеремещениеВнутриОрганизации(Объект.ВидОперацииУХ);
		
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции

// Функция возвращает унифицировнную структуру реквизитов договора
Функция СтруктураРеквизитовДоговора() экспорт
	
	СписокРеквизитовДоговора = 
		"Контрагент,
		|Организация,
		|ВалютаВзаиморасчетов,
		|ВалютаПлатежа,
		|ЗапретПлатежаВПрочихВалютах,
		|СпособОпределенияКурсаПлатежа,
		|ДатаФиксацииКурсаПлатежа,
		|СдвигДатыФиксацииКурсаПлатежа,
		|КурсПлатежа,
		|КратностьПлатежа,
		|КурсПлатежаНеМенее,
		|КурсПлатежаНеБолее,
		|КурсПлатежаНеМенееВВалютеОплаты,
		|КурсПлатежаНеБолееВВалютеОплаты,
		|БанковскийСчет,
		|БанковскийСчетКонтрагента,
		|ФиксированныйСчетОрганизации,
		|ФиксированныйСчетКонтрагента,
		|ИдентификаторПлатежа,
		|СтатьяДвиженияДенежныхСредств,
		|ЦФО,
		|Проект,
		|Аналитика1,
		|Аналитика2,
		|Аналитика3,
		|Аналитика4,
		|Аналитика5,
		|Аналитика6,
		|СтатьяИсполнение,
		|АналитикаИсполнение1,
		|АналитикаИсполнение2,
		|АналитикаИсполнение3,
		|АналитикаИсполнение4,
		|АналитикаИсполнение5,
		|АналитикаИсполнение6";
	
	Результат = Новый Структура(СписокРеквизитовДоговора);
	Результат.ВалютаПлатежа = "ОсновнаяВалютаПлатежей";
	Результат.Аналитика1 = "АналитикаБДДС1";
	Результат.Аналитика2 = "АналитикаБДДС2";
	Результат.Аналитика3 = "АналитикаБДДС3";
	Результат.Аналитика4 = "АналитикаБДДС4";
	Результат.Аналитика5 = "АналитикаБДДС5";
	Результат.Аналитика6 = "АналитикаБДДС6";
	
	Результат.СтатьяИсполнение = "ОсновнаяСтатьяИсполнение";
	
	Результат.ЦФО = "ОсновнойЦФО";
	Результат.Проект = "ОсновнойПроект";
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаявкиНаОперацииПолучениеПолейПредставления(Источник, Поля, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ИмяДокумента = Источник.ПустаяСсылка().Метаданные().Имя;
	СтруктураПолей = ЗаявкиНаОперацииКлиентСерверПовтИсп.ПоляДанныхПредставления(ИмяДокумента);
	
	Для Каждого КлючЗначение Из СтруктураПолей Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			Поля.Добавить(КлючЗначение.Значение);
		Иначе
			Поля.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	//Поля.Добавить("Номер");
	//Поля.Добавить("Дата");
	//Поля.Добавить("СуммаДокумента");
	//Поля.Добавить("ВалютаДокумента");
	//Поля.Добавить("ДатаНачала");
	//Поля.Добавить("КрайняяДата");
	//Поля.Добавить("Контрагент");
	//Поля.Добавить("ВидОперацииУХ");
	
КонецПроцедуры

Процедура ЗаявкиНаОперацииПолученияПредставления(Источник, Данные, Представление, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеЗаявки = Новый Структура;
	
	ИмяДокумента = Источник.ПустаяСсылка().Метаданные().Имя;
	СтруктураПолей = ЗаявкиНаОперацииВызовСервера.ПоляДанныхПредставления(ИмяДокумента);
	Для Каждого КлючЗначение Из СтруктураПолей Цикл
		
		Если КлючЗначение.Ключ = "Синоним" Тогда
			ДанныеЗаявки.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
			Продолжить;
		ИначеЕсли ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			ИмяСвойства = КлючЗначение.Значение;
		Иначе
			ИмяСвойства = КлючЗначение.Ключ;
		КонецЕсли;
		Если Данные.Свойство(ИмяСвойства) Тогда
			ДанныеЗаявки.Вставить(КлючЗначение.Ключ, Данные[ИмяСвойства]);
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаявки.Свойство("Синоним") Тогда
		СинонимИсточника = ДанныеЗаявки.Синоним;
	Иначе
		СинонимИсточника = Источник.ПустаяСсылка().Метаданные().Синоним;
	КонецЕсли;
	Если ДанныеЗаявки.Свойство("ДатаНеПозднее") И ЗначениеЗаполнено(ДанныеЗаявки.ДатаНеПозднее) Тогда
		//ТекстШаблона = НСтр("ru = 'Планируемое поступление *%1; %2 %3 до %4'");
		ТекстШаблона = НСтр("ru = '%1 *%2; %3 %4 до %5'; en = '%1 *%2; %3 %4 до %5'");
		Дата = ДанныеЗаявки.ДатаНеПозднее;
	Иначе
		//ТекстШаблона = НСтр("ru = 'Планируемое поступление *%1; %2 %3 к %4'");
		ТекстШаблона = НСтр("ru = '%1 *%2; %3 %4 к %5'; en = '%1 *%2; %3 %4 к %5'");
		Дата = ДанныеЗаявки.ДатаПланируемая;
	КонецЕсли;
	
	Представление = СтрШаблон(ТекстШаблона, СинонимИсточника, Прав(ДанныеЗаявки.Номер, 4), ДанныеЗаявки.Сумма, ДанныеЗаявки.Валюта, Формат(Дата, "ДЛФ=D"));
	Если ЗначениеЗаполнено(ДанныеЗаявки.Контрагент) Тогда
		Представление = Представление + "; " + ДанныеЗаявки.Контрагент;
	КонецЕсли;
	Представление = Представление + "; " + ДанныеЗаявки.ВидОперацииУХ;
	
КонецПроцедуры

// Возвращает значение реквизита СостояниеЗаявки на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
Функция РеквизитСостояниеЗаявки(Форма) Экспорт
	Возврат Форма["СостояниеЗаявки"];
КонецФункции

// Возвращает значение реквизита СтатусОбъекта на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
Функция РеквизитСтатусОбъекта(Форма) Экспорт
	Возврат Форма["СтатусОбъекта"];
КонецФункции

// Возвращает значение реквизита Согласующий на форме ФормаВход.
// Т.к. данный реквизит генерируется кодом, обращение к нему напрямую из
// кода недоступно.
Функция РеквизитСогласующий(Форма) Экспорт
	Возврат Форма["Согласующий"];
КонецФункции

Процедура ПересчитатьСуммуНДС(СтрокаРасшифровки) Экспорт
	
	Если СтрокаРасшифровки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗначениеСтавкиНДС = ВстраиваниеОПКВызовСервераПереопределяемый.ПолучитьСтавкуНДС(СтрокаРасшифровки.СтавкаНДС);
	СтрокаРасшифровки.СуммаНДС = СтрокаРасшифровки.Сумма * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

Процедура УстановитьОграничениеТипаКонтрагента(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	МассивПараметрыВыбора = Новый Массив;
	
	ЭтоРасчетыСКонтрагентами = ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыСКонтрагентом(Объект.ВидОперацииУХ);
	ЭтоРасчетыСФизическимЛицом = ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыСФизическимЛицом(Объект.ВидОперацииУХ);
	
	Если ЭтоРасчетыСКонтрагентами И ЭтоРасчетыСФизическимЛицом Тогда // например Перечисление дивидендов
				
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "КонтрагентЮрФизЛицо") Тогда
			
			Если Форма.КонтрагентЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо") Тогда
				НовыйПараметр = Новый ПараметрВыбора("Отбор.ЮридическоеФизическоеЛицо", 
					ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
				МассивПараметрыВыбора.Добавить(НовыйПараметр);
				Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			Иначе
				МассивПараметрыВыбора.Очистить();
				Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
			КонецЕсли;
			
		Иначе
			
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.ФизическиеЛица");
			
		КонецЕсли;
		
	ИначеЕсли ЭтоРасчетыСКонтрагентами Тогда
		
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Контрагент'");
		Элементы.Контрагент.ПодсказкаВвода  = НСтр("ru = 'Введите ИНН или наименование'");
		
	ИначеЕсли ЭтоРасчетыСФизическимЛицом Тогда
		
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Сотрудник'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
		
	Иначе
		
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Контрагент.Заголовок = НСтр("ru = 'Контрагент'");
		Элементы.Контрагент.ПодсказкаВвода  = "";
		
	КонецЕсли;
	
	Объект.Контрагент = Элементы.Контрагент.ОграничениеТипа.ПривестиЗначение(Объект.Контрагент);
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметрыВыбора);
	
КонецПроцедуры

Функция НаправлениеДвиженияДокумента(Ссылка) Экспорт
	
	ТипСсылки = ТипЗнч(Ссылка);
	
	Если ТипСсылки = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств")
		ИЛИ ТипСсылки = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств")
		ИЛИ ТипСсылки = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход");
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств")
		ИЛИ ТипСсылки = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств")
		ИЛИ ТипСсылки = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда	
		
		Возврат ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Приход");
		
	КонецЕсли;
	
	Возврат ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.ПустаяСсылка");
	
КонецФункции

Функция ТипСуммыКредитаДепозитаПоЭлементуСтруктурыЗадолженности(ЭлементСтруктурыЗадолженности) Экспорт
		
	Если ЭлементСтруктурыЗадолженности = ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг");
	ИначеЕсли ЭлементСтруктурыЗадолженности = ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.Комиссии") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия");
	ИначеЕсли ЭлементСтруктурыЗадолженности = ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.Проценты") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Проценты");
	ИначеЕсли ЭлементСтруктурыЗадолженности = ПредопределенноеЗначение("Перечисление.ЭлементыСтруктурыЗадолженности.Штрафы") Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.Комиссия");	
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
 