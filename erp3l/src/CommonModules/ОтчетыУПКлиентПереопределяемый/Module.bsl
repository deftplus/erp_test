////////////////////////////////////////////////////////////////////////////////
// Варианты отчетов - Форма отчета УП (клиент, переопределяемый)
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик расшифровки табличного документа формы отчета.
//
// Параметры:
//  ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//  Элемент     - ПолеФормы        - табличный документ.
//  Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//  СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	Если ПолноеИмяОтчета = "Отчет.РасшифровкаФормулыБюджетногоОтчета" Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыОткрытия = БюджетнаяОтчетностьВызовСервера.ПараметрыФормыРасшифровкиОтчетаРасшифровки(
																		Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ПараметрыОткрытия = Неопределено Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Нет данных для расшифровки';
											|en = 'No data to drill down'"));
		Иначе
			БюджетнаяОтчетностьКлиент.ОткрытьФормуОтчета(ПараметрыОткрытия, ЭтаФорма);
		КонецЕсли;
	
	//++ НЕ УТКА
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ЗагрузкаВидовРабочихЦентров" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ЗагрузкаВидовРабочихЦентровТаблица" 
			ИЛИ КлючТекущегоВарианта = "ЗагрузкаВидовРабочихЦентровТаблицаКонтекст" Тогда
			
			//++ Устарело_Производство21
			// Перейти -> Занятость вида рабочего центра
			#Область ИзменениеЗанятостиВидаРабочегоЦентра
			Если НЕ ОтчетыУПВызовСервераПереопределяемый.ИспользуетсяПроизводство22() Тогда
				ПараметрыДействия = Новый Структура;
				ПараметрыДействия.Вставить("Имя", "ИзменениеЗанятостиВидаРабочегоЦентра");
				ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Занятость вида рабочего центра';
															|en = 'Occupancy of the work center type'"));
				ПараметрыДействия.Вставить("Действие", "ОткрытьФорму");
				ПараметрыДействия.Вставить("ИмяФормы", "Обработка.ДиспетчированиеГрафикаПроизводства.Форма.ИзменениеЗанятостиВидаРабочегоЦентра");
				
				ПоляРасшифровки = Новый Массив;
				ПоляРасшифровки.Добавить("ВидРабочегоЦентра");
				ПоляРасшифровки.Добавить("ПериодГрафика");
				ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
				
				НеобходимыеПараметры = Новый Структура;
				НеобходимыеПараметры.Вставить("ВидРабочегоЦентра");
				НеобходимыеПараметры.Вставить("ПериодГрафика");
				ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
				
				ПараметрыФормы = Новый Структура;
				ПараметрыФормы.Вставить("ВидРабочегоЦентра");
				ПараметрыФормы.Вставить("ПериодГрафика");
				ПараметрыДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
				
				ЗаменаПараметров = Новый Структура;
				ЗаменаПараметров.Вставить("ПериодГрафика", "НачалоПериода");
				ПараметрыДействия.Вставить("ЗаменаПараметров", ЗаменаПараметров);
				
				МенюДействий.Добавить(ПараметрыДействия);
			КонецЕсли;
			#КонецОбласти
			//-- Устарело_Производство21
			
			// Перейти -> Изменить доступность вида рабочих центров
			#Область ИзменитьДоступностьВидаРЦ
			ПараметрыДействия = Новый Структура;
			ПараметрыДействия.Вставить("Имя", "ИзменитьДоступностьВидаРЦ");
			ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Изменить доступность вида рабочих центров';
														|en = 'Change type of work centers capacity'"));
			ПараметрыДействия.Вставить("ИмяОбщегоМодуля", "ОтчетыУПКлиентПереопределяемый");
			
			ПоляРасшифровки = Новый Массив;
			ПоляРасшифровки.Добавить("ВидРабочегоЦентра");
			ПоляРасшифровки.Добавить("ПериодГрафика");
			ПараметрыДействия.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("ВидРабочегоЦентра");
			НеобходимыеПараметры.Вставить("ПериодГрафика");
			ПараметрыДействия.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			МенюДействий.Добавить(ПараметрыДействия);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	//++ Локализация
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ЗагрузкаРабочихЦентров" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ЗагрузкаРабочихЦентров" Тогда
			
			// Расшифровать отчетом -> Анализ суточной загрузки
			#Область АнализСуточнойЗагрузкиКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "АнализСуточнойЗагрузкиКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Анализ суточной загрузки';
														|en = 'Daily load analysis'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализСуточнойЗагрузки");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("РабочийЦентр");
			ПоляРасшифровки.Добавить("ВидРабочегоЦентра");
			ПоляРасшифровки.Добавить("ПериодГрафика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			НеобходимыеПараметры = Новый Структура;
			НеобходимыеПараметры.Вставить("ПериодГрафика");
			ПараметрыОтчета.Вставить("НеобходимыеПараметры", НеобходимыеПараметры);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализВыполненияМаршрутныхЛистов" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ВыполнениеМаршрутныхЛистовСЗадержками" Тогда
			
			// Расшифровать отчетом -> Сведения о выполнении маршрутных листов
			#Область СведенияОВыполненииМаршрутныхЛистовКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СведенияОВыполненииМаршрутныхЛистовКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Сведения о выполнении маршрутных листов';
														|en = 'Route sheet completion information'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("МаршрутнаяКарта");
			ПоляРасшифровки.Добавить("Этап");
			ПоляРасшифровки.Добавить("Спецификация");
			ПоляРасшифровки.Добавить("Буфер");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Причины задержек выполнения маршрутных листов
			#Область ПричиныЗадержекКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "ПричиныЗадержекКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Причины задержек выполнения маршрутных листов';
														|en = 'Reasons for delays in route sheet completion'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализПричинЗадержекВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("МаршрутнаяКарта");
			ПоляРасшифровки.Добавить("Этап");
			ПоляРасшифровки.Добавить("Спецификация");
			ПоляРасшифровки.Добавить("Буфер");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		ИначеЕсли КлючТекущегоВарианта = "ВыполнениеМаршрутныхЛистовБезЗадержек" Тогда
			
			// Расшифровать отчетом -> Сведения о выполнении маршрутных листов
			#Область СведенияОВыполненииМаршрутныхЛистовКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СведенияОВыполненииМаршрутныхЛистовКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Сведения о выполнении маршрутных листов';
														|en = 'Route sheet completion information'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("МаршрутнаяКарта");
			ПоляРасшифровки.Добавить("Этап");
			ПоляРасшифровки.Добавить("Спецификация");
			ПоляРасшифровки.Добавить("Буфер");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.АнализПричинЗадержекВыполненияМаршрутныхЛистов" Тогда
			
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ПричиныЗадержек" Тогда
			
			// Расшифровать отчетом -> Сведения о выполнении маршрутных листов
			#Область СведенияОВыполненииМаршрутныхЛистовКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "СведенияОВыполненииМаршрутныхЛистовКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Сведения о выполнении маршрутных листов';
														|en = 'Route sheet completion information'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПоляРасшифровки.Добавить("Подразделение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Выполнение маршрутных листов с задержками
			#Область ВыполнениеМаршрутныхЛистовСЗадержками
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "ВыполнениеМаршрутныхЛистовСЗадержками");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Выполнение маршрутных листов с задержками';
														|en = 'Route sheet completion with delays'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.АнализВыполненияМаршрутныхЛистов");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("ПричинаЗадержки");
			ПоляРасшифровки.Добавить("Подразделение");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Период");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
	//-- Локализация
	//-- НЕ УТКА
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПроверкаСвязейПоказателейБюджетов" Тогда
		
		ДанныеРасшифровкиОтчета = БюджетированиеВызовСервера.ДанныеРасшифровкиОтчета(Расшифровка, ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ДанныеРасшифровкиОтчета.ОсновноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Расшифровать Тогда
			СтандартнаяОбработка = Ложь;
			
			ДоступныеПоляРасшифровки  = Новый Структура;
			ДоступныеПоляРасшифровки.Вставить("ПоказательБюджетов");
			ДоступныеПоляРасшифровки.Вставить("Аналитика1");
			ДоступныеПоляРасшифровки.Вставить("Аналитика2");
			ДоступныеПоляРасшифровки.Вставить("Аналитика3");
			ДоступныеПоляРасшифровки.Вставить("Аналитика4");
			ДоступныеПоляРасшифровки.Вставить("Аналитика5");
			ДоступныеПоляРасшифровки.Вставить("Аналитика6");
			ДоступныеПоляРасшифровки.Вставить("Валюта");
			
			ПоляРасшифровки = Новый Структура;
			Для каждого Поле Из ДанныеРасшифровкиОтчета.ПоляРасшифровки Цикл
				Если ДоступныеПоляРасшифровки.Свойство(Поле.Ключ) Тогда
					ПоляРасшифровки.Вставить(Поле.Ключ, Поле.Значение);
				КонецЕсли;
			КонецЦикла;
			Для каждого Поле Из ДанныеРасшифровкиОтчета.ПоляРасшифровкиРодители Цикл
				Если ДоступныеПоляРасшифровки.Свойство(Поле.Ключ) Тогда
					ПоляРасшифровки.Вставить(Поле.Ключ, Поле.Значение);
				КонецЕсли;
			КонецЦикла;
			
			Параметры = Новый Структура;
			Параметры.Вставить("ИмяОтчета"			, "СправкаРасчетПоказателяБюджетов");
			Параметры.Вставить("КлючВарианта"		, "СправкаРасчетПоказателяБюджетов");
			Параметры.Вставить("КомпоновщикНастроек", ЭтаФорма.Отчет.КомпоновщикНастроек);
			Параметры.Вставить("ПоляРасшифровки"	, ПоляРасшифровки);
			НастройкаРасчетПоказателяБюджетов = ОтчетыУТВызовСервераПереопределяемый.НастроитьОтчетРасшифровки(Параметры);
			
			ПараметрыДанныхОсновногоОтчета = ЭтаФорма.Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных;
			
			ФиксированныеПараметры = Новый Структура("Период, Показатель", ДанныеРасшифровкиОтчета.ПараметрыДанных.Период);
			Для Каждого КлючИЗначение Из ФиксированныеПараметры Цикл
				
				ЗначениеПараметра = ?(КлючИЗначение.Ключ = "Период", КлючИЗначение.Значение,
					ПараметрыДанныхОсновногоОтчета.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ)).Значение);
				
				Параметр = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки, КлючИЗначение.Ключ);
				Если Параметр = Неопределено Тогда
					Параметр = НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки.ПараметрыДанных.Элементы.Добавить();
					Параметр.Параметр = Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ);
				КонецЕсли;
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки,
																					КлючИЗначение.Ключ, ЗначениеПараметра, Истина);
				
			КонецЦикла;
			
			КлючНастроек = "РасшифровкаПоказателяБюджетов";
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("КлючВарианта",                  "СправкаРасчетПоказателяБюджетов");
			ПараметрыФормы.Вставить("КлючНазначенияИспользования",    КлючНастроек);
			ПараметрыФормы.Вставить("КлючПользовательскихНастроек",   КлючНастроек);
			ПараметрыФормы.Вставить("ПользовательскиеНастройки",      НастройкаРасчетПоказателяБюджетов.ПользовательскиеНастройки);
			ПараметрыФормы.Вставить("ФиксированныеНастройки",         НастройкаРасчетПоказателяБюджетов.ФиксированныеНастройки);
			ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
			ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",Ложь);
			ПараметрыФормы.Вставить("РежимРасшифровки",               Истина);
			ОткрытьФорму("Отчет.СправкаРасчетПоказателяБюджетов.Форма", ПараметрыФормы, ЭтаФорма, Истина);
		КонецЕсли;
		
	//++ НЕ УТКА
	//++ Устарело_Производство21	
	//-- Устарело_Производство21
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПлановаяИФактическаяСебестоимостьПродукции" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий  = Новый Массив;
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ДанныеПоСебестоимости");
		СписокПараметров.Добавить("Период");
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя",              "ФактическаяСебестоимостьПродукции");
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Фактическая себестоимость продукции';
															|en = 'Actual product cost'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.ФактическаяСебестоимостьПродукции");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Продукция");
		ПоляРасшифровки.Добавить("ХарактеристикаПродукции");
		ПоляРасшифровки.Добавить("НазначениеПродукции");
		ПоляРасшифровки.Добавить("ПартияПродукции");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
		ПараметрыОтчета = Новый Структура;
		ПараметрыОтчета.Вставить("Имя",              "ПлановаяСебестоимостьПродукции");
		ПараметрыОтчета.Вставить("Заголовок",        НСтр("ru = 'Плановая себестоимость продукции';
															|en = 'Planned product cost'"));
		ПараметрыОтчета.Вставить("ИмяОтчета",        "Отчет.ПлановаяСебестоимостьПродукции");
		ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
		
		ПоляРасшифровки  = Новый Массив;
		ПоляРасшифровки.Добавить("Продукция");
		ПоляРасшифровки.Добавить("ХарактеристикаПродукции");
		ПоляРасшифровки.Добавить("Калькуляция");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатраты"
		Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыПоПартиямПроизводства"
		Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыПостатейные"
		Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыТМЦ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПоляРасшифровки = Новый Массив;
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ДанныеПоСебестоимости");
		СписокПараметров.Добавить("Период");
		СписокПараметров.Добавить("ПараметрПодразделение");
		
		ПоляГруппировкиСлужебные = Новый Массив;
		ПоляГруппировкиСлужебные.Добавить("ДвижениеМатериаловИПродукции");
		ПоляГруппировкиСлужебные.Добавить("ДвижениеПостатейныхРасходов");
		ПоляГруппировкиСлужебные.Добавить("РаспределениеЗатратНаПартииПроизводства");
		ПоляГруппировкиСлужебные.Добавить("ГруппировкаЗатратПоПартиямПроизводства");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляГруппировкиСлужебные);
		
		ПоляГруппировки = Новый Массив;
		// для расшифровки ТМЦ
		ПоляГруппировки.Добавить("Организация");
		ПоляГруппировки.Добавить("СкладПодразделение");
		ПоляГруппировки.Добавить("АналитикаУчетаНоменклатуры");
		ПоляГруппировки.Добавить("Номенклатура");
		ПоляГруппировки.Добавить("Характеристика");
		ПоляГруппировки.Добавить("Серия");
		ПоляГруппировки.Добавить("Назначение");
		// для расшифровки постатейных
		ПоляГруппировки.Добавить("Подразделение");
		ПоляГруппировки.Добавить("СтатьяРасходов");
		ПоляГруппировки.Добавить("АналитикаРасходов");
		ПоляГруппировки.Добавить("НаправлениеДеятельности");
		// для расшифровки производства
		ПоляГруппировки.Добавить("ПартияПроизводства");
		ПоляГруппировки.Добавить("НаправлениеДеятельности");
		ПоляГруппировки.Добавить("СтатьяКалькуляции");
		ПоляГруппировки.Добавить("Затрата");
		ПоляГруппировки.Добавить("АналитикаЗатраты");
		ПоляГруппировки.Добавить("АналитикаЗатратыДополнительная");
		ПоляГруппировки.Добавить("ВидРабот");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ПоляРасшифровки, ПоляГруппировки);
		
		МассивПолейВарианта = Новый Массив;
		
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "аНачальныйОстатокКоличество,аНачальныйОстатокСтоимость,аНачальныйОстатокПР,аНачальныйОстатокВР,аНачальныйОстатокЗабалансовая", "НачальныйОстаток");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "бПоступилоКоличество,бПоступилоСтоимость,бПоступилоПР,бПоступилоВР,бПоступилоЗабалансовая", "Поступления");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "ПриобретеноКоличество,ПриобретеноСтоимость,ПриобретеноПР,ПриобретеноВР,ПриобретеноЗабалансовая", "Приобретено");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "вПеремещенияКоличество,вПеремещенияСтоимость,вПеремещенияПР,вПеремещенияПР,вПеремещенияЗабалансовая", "Перемещения");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "жПереданоКоличество,жПереданоСтоимость,жПереданоПР,жПереданоВР,жПереданоЗабалансовая", "ПередачиНаСклад");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "гРасходНаПроизводствоКоличество,гРасходНаПроизводствоСтоимость,гРасходНаПроизводствоПР,гРасходНаПроизводствоВР, гРасходНаПроизводствоЗабалансовая", "РасходыНаПроизводство");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "гИзрасходованоНаПроизводствоКоличество,гИзрасходованоНаПроизводствоСтоимость,гИзрасходованоНаПроизводствоПР,гИзрасходованоНаПроизводствоВР, гИзрасходованоНаПроизводствоЗабалансовая", "ИзрасходованоНаПартииПроизводства");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "дСписаноКоличество,дСписаноСтоимость,дСписаноПР,дСписаноВР,дСписаноЗабалансовая", "СписанияНаРасходы");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "еКонечныйОстатокКоличество,еКонечныйОстатокСтоимость,еКонечныйОстатокПР,еКонечныйОстатокВР,еКонечныйОстатокЗабалансовая", "КонечныйОстаток");
		ДобавитьГруппуКолонок(МассивПолейВарианта, ПоляРасшифровки, "зПроизведеноКоличество,зПроизведеноСтоимость,зПроизведеноПР,зПроизведеноВР,зПроизведеноЗабалансовая", "Произведено");
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
												Расшифровка,
												ЭтаФорма.ОтчетДанныеРасшифровки,
												СписокПараметров,
												ПоляРасшифровки);
		
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ВариантОтчета = Неопределено;
		
		Для Каждого Вариант Из МассивПолейВарианта Цикл
			Для Каждого ПолеРасшифровки Из Вариант.Поля Цикл
				Если ДанныеРасшифровкиОтчета.Свойство(ПолеРасшифровки) Тогда
					ВариантОтчета = Вариант.ВариантОтчета;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ВариантОтчета) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТребуетсяПереопределениеПодразделения = Ложь;
		НеПереопределятьПользовательскиеПараметры = Ложь;
		Отбор = Новый Структура;
		ПользовательскиеПараметры = Новый Массив;
		Если ДанныеРасшифровкиОтчета.Свойство("ДвижениеМатериаловИПродукции")
			Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыТМЦ" Тогда
			
			ИмяОтчета = "Отчет.ПроизводственныеЗатратыТМЦ.Форма";
			
			Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
				
				Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") = 0 Тогда
					
					ВариантОтчета = "ДвижениеМатериаловПродукцииРабот";
					Если ДанныеРасшифровкиОтчета.Свойство("Организация") Тогда
						Отбор.Вставить("Организация", ДанныеРасшифровкиОтчета.Организация);
					КонецЕсли;
					
				Иначе
					ВариантОтчета = "ДвижениеМатериаловПродукцииРаботПоПредприятию";
				КонецЕсли;
				
				НеПереопределятьПользовательскиеПараметры = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеРасшифровкиОтчета.Свойство("ДвижениеПостатейныхРасходов")
			Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыПостатейные" Тогда
			
			ИмяОтчета = "Отчет.ПроизводственныеЗатратыПостатейные.Форма";
			
			Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
				
				Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") = 0 Тогда
					
					ВариантОтчета = "ДвижениеПостатейныхРасходов";
					Если ДанныеРасшифровкиОтчета.Свойство("Организация") Тогда
						Отбор.Вставить("Организация", ДанныеРасшифровкиОтчета.Организация);
					КонецЕсли;
					
				Иначе
					ВариантОтчета = "ДвижениеПостатейныхРасходовПоПредприятию";
				КонецЕсли;
				
				НеПереопределятьПользовательскиеПараметры = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеРасшифровкиОтчета.Свойство("РаспределениеЗатратНаПартииПроизводства")
			Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыПоПартиямПроизводства" Тогда
			
			ИмяОтчета = "Отчет.ПроизводственныеЗатратыПоПартиямПроизводства.Форма";
			
			Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
				
				Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") = 0 Тогда
					
					ВариантОтчета = "РаспределениеЗатратНаПартииПроизводства";
					Если ДанныеРасшифровкиОтчета.Свойство("Организация") Тогда
						Отбор.Вставить("Организация", ДанныеРасшифровкиОтчета.Организация);
					КонецЕсли;
					
				Иначе
					ВариантОтчета = "РаспределениеЗатратНаПартииПроизводстваПоПредприятию";
				КонецЕсли;
				
				НеПереопределятьПользовательскиеПараметры = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ДанныеРасшифровкиОтчета.Свойство("ГруппировкаЗатратПоПартиямПроизводства")
			Или ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатратыПоПартиямПроизводства" Тогда
			
			ИмяОтчета = "Отчет.ПроизводственныеЗатратыПоПартиямПроизводства.Форма";
			
			Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
				
				НеПереопределятьПользовательскиеПараметры = Истина;
				Если СтрНайти(КлючТекущегоВарианта, "ПоПредприятию") = 0 Тогда
					
					ВариантОтчета = "ГруппировкаЗатратПоПартиямПроизводства";
					Если ДанныеРасшифровкиОтчета.Свойство("Организация") Тогда
						Отбор.Вставить("Организация", ДанныеРасшифровкиОтчета.Организация);
					КонецЕсли;
					
				Иначе
					ВариантОтчета = "ГруппировкаЗатратПоПартиямПроизводстваПоПредприятию";
				КонецЕсли;
				
			КонецЕсли;
			
			ТребуетсяПереопределениеПодразделения = Истина;
			
		Иначе
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВариантОтчета) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                   ВариантОтчета);
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",        Истина);
		
		Если ДанныеРасшифровкиОтчета.Свойство("ПараметрПодразделение") И ЗначениеЗаполнено(ДанныеРасшифровкиОтчета.ПараметрПодразделение) Тогда
			Если Не ТребуетсяПереопределениеПодразделения Тогда
				Отбор.Вставить("Подразделение",ДанныеРасшифровкиОтчета.ПараметрПодразделение);
			КонецЕсли;
		КонецЕсли;
		
		Если НеПереопределятьПользовательскиеПараметры Тогда
			ПользовательскийПараметр = Новый Структура("Имя, Значение", "ДанныеПоСебестоимости", ДанныеРасшифровкиОтчета.ДанныеПоСебестоимости);
			ПользовательскиеПараметры.Добавить(ПользовательскийПараметр);
			Если ДанныеРасшифровкиОтчета.Свойство("Период") И ЗначениеЗаполнено(ДанныеРасшифровкиОтчета.Период) Тогда
				ПользовательскийПараметр = Новый Структура("Имя, Значение", "Период", ДанныеРасшифровкиОтчета.Период);
				ПользовательскиеПараметры.Добавить(ПользовательскийПараметр);
			КонецЕсли;
		Иначе
			Отбор.Вставить("ДанныеПоСебестоимости", ДанныеРасшифровкиОтчета.ДанныеПоСебестоимости);
			Если ДанныеРасшифровкиОтчета.Свойство("Период") И ЗначениеЗаполнено(ДанныеРасшифровкиОтчета.Период) Тогда
				Отбор.Вставить("Период", ДанныеРасшифровкиОтчета.Период);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого ПолеГруппировки Из ПоляГруппировки Цикл
			Если ДанныеРасшифровкиОтчета.Свойство(ПолеГруппировки) И ЗначениеЗаполнено(ДанныеРасшифровкиОтчета[ПолеГруппировки]) Тогда
				Отбор.Вставить(ПолеГруппировки,ДанныеРасшифровкиОтчета[ПолеГруппировки]);
			КонецЕсли;
		КонецЦикла;
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("ПользовательскиеПараметры", ПользовательскиеПараметры);
		ПараметрыФормы.Вставить("НастройкиИсточник", ДанныеРасшифровкиОтчета);
		ОткрытьФорму(ИмяОтчета, ПараметрыФормы, ЭтаФорма, Истина);
	//++ Устарело_Производство21	
	ИначеЕсли КлючТекущегоВарианта = "АнализОтклоненийПоПодразделениям" Тогда
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ДанныеОтчета");
		
		ПоляРасшифровки = Новый Массив;
		
		ПоляРасшифровки.Добавить("ЗаказНаПроизводствоДубль");
		ПоляРасшифровки.Добавить("КодСтрокиЗаказаНаПроизводство");
		ПоляРасшифровки.Добавить("ЭтапДубль");
		ПоляРасшифровки.Добавить("СуммаЗаказВсеЭтапы");
		ПоляРасшифровки.Добавить("СуммаФактПрогноз");
		ПоляРасшифровки.Добавить("Отклонение_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ПоляРасшифровки.Добавить("Процент_Сумма_ЗаказВсеЭтапы_ФактПрогноз");
		ПоляРасшифровки.Добавить("Значимость");
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
			Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки,
			СписокПараметров,
			ПоляРасшифровки);
			
		Если ДанныеРасшифровкиОтчета = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ДанныеРасшифровкиОтчета.Свойство("ЗаказНаПроизводствоДубль")
			Или Не ДанныеРасшифровкиОтчета.Свойство("КодСтрокиЗаказаНаПроизводство")
			Или Не ДанныеРасшифровкиОтчета.Свойство("ЭтапДубль") 
			Или Не (ДанныеРасшифровкиОтчета.Свойство("СуммаЗаказВсеЭтапы")
			Или ДанныеРасшифровкиОтчета.Свойство("СуммаФактПрогноз")
			Или ДанныеРасшифровкиОтчета.Свойство("Отклонение_Сумма_ЗаказВсеЭтапы_ФактПрогноз")
			Или ДанныеРасшифровкиОтчета.Свойство("Процент_Сумма_ЗаказВсеЭтапы_ФактПрогноз")
			Или ДанныеРасшифровкиОтчета.Свойство("Значимость")) Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КлючВарианта",                     "ОтклонениеФактаОтСпецификацииЗаказаБезПрогноза");
		ПараметрыФормы.Вставить("СформироватьПриОткрытии",          Истина);
		ПараметрыФормы.Вставить("ВидимостьКомандВариантовОтчетов",  Ложь);
		ПараметрыФормы.Вставить("РежимРасшифровки",                 Истина);
		
		Отбор = Новый Структура();
		
		Отбор.Вставить("ЗаказРасшифровка",                          ДанныеРасшифровкиОтчета.ЗаказНаПроизводствоДубль);
		Отбор.Вставить("КодСтрокиРасшифровка",                      ДанныеРасшифровкиОтчета.КодСтрокиЗаказаНаПроизводство);
		Отбор.Вставить("Этап",                                      ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРасшифровкиОтчета.ЭтапДубль));
		Отбор.Вставить("ДанныеОтчета",                              ДанныеРасшифровкиОтчета.ДанныеОтчета);
		
		МассивТиповЗатрат = Новый Массив;
		МассивТиповЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"));
		МассивТиповЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"));
		МассивТиповЗатрат.Добавить(ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ВозвратныеОтходы"));
		
		Отбор.Вставить("ТипЗатрат",                                 МассивТиповЗатрат);
		
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Отчет.ОтклонениеЗаказаФактаОтКалькуляции.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, Истина);
	//-- Устарело_Производство21	
	
	//++ Локализация
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПередачаМатериаловПоЗаказу" Тогда
		
		МенюОтчетов  = Новый Массив;
		МенюДействий = Новый Массив;
		
		Если КлючТекущегоВарианта = "ПередачаМатериаловПоЗаказуКонтекст"
			ИЛИ КлючТекущегоВарианта = "ПередачаМатериаловПоМаршрутномуЛистуКонтекст" Тогда
			
			// Расшифровать отчетом -> Маршрутные листы
			#Область МаршрутныеЛистыКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "МаршрутныеЛистыКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Маршрутные листы';
														|en = 'Route sheets'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.ПередачаМатериаловПоЗаказу");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Распоряжение");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
			// Расшифровать отчетом -> Передачи в производство
			#Область ПередачиВПроизводствоКонтекст
			ПараметрыОтчета = Новый Структура;
			ПараметрыОтчета.Вставить("Имя", "ПередачиВПроизводствоКонтекст");
			ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Передачи в производство';
														|en = 'Transfers to production'"));
			ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.ПередачаМатериаловПоЗаказу");
			
			ПоляРасшифровки  = Новый Массив;
			ПоляРасшифровки.Добавить("Подразделение");
			ПоляРасшифровки.Добавить("Номенклатура");
			ПоляРасшифровки.Добавить("Характеристика");
			ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
			
			СписокПараметров = Новый Массив;
			СписокПараметров.Добавить("Распоряжение");
			ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
			
			МенюОтчетов.Добавить(ПараметрыОтчета);
			#КонецОбласти
			
		КонецЕсли;
		
		ПараметрыРасшифровки = Новый Структура;
		ПараметрыРасшифровки.Вставить("МенюОтчетов",  МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка",  Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
		
	//-- Локализация
	ИначеЕсли ПолноеИмяОтчета = "Отчет.ПартииВПроизводстве" Тогда
		
		МенюОтчетов 			= Новый Массив;
		МенюДействий 			= Новый Массив;
		ПоляРасшифровки 		= Новый Массив;
		ПараметрыОтчета			= Новый Структура;
		ПараметрыДействия 		= Новый Структура;
		ПараметрыРасшифровки 	= Новый Структура;
		
		СтандартнаяОбработка = Ложь;
		ПоляРасшифровки.Добавить("ПартияПроизводства");
		
		ПараметрыОтчета.Вставить("Имя", "КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводстваКонтекст");
		ПараметрыОтчета.Вставить("Заголовок", НСтр("ru = 'Контроль движения продукции и материалов по партии производства';
													|en = 'Control movement of manufactured products and materials by production lot'"));
		ПараметрыОтчета.Вставить("ИмяОтчета", "Отчет.КонтрольДвиженияПродукцииИМатериаловПоЭтапуПроизводства");
		ПараметрыОтчета.Вставить("ПоляРасшифровки", ПоляРасшифровки);
		
		МенюОтчетов.Добавить(ПараметрыОтчета);
		
		ПараметрыДействия.Вставить("Имя", "СостояниеОбеспечения");
		ПараметрыДействия.Вставить("Заголовок", НСтр("ru = 'Состояние обеспечения';
													|en = 'Supply forecast'"));
		ПараметрыДействия.Вставить("Действие", "ОткрытьФорму");
		ПараметрыДействия.Вставить("ИмяФормы", "Обработка.СостояниеОбеспеченияЗаказов.Форма");
		
		ПоляРасшифровки = Новый Массив;
		ПоляРасшифровки.Добавить("ЭтапПроизводства");
		
		СписокПараметров = Новый Массив;
		СписокПараметров.Добавить("ЭтапПроизводства");
		
		ДанныеРасшифровкиОтчета = КомпоновкаДанныхВызовСервера.ПараметрыФормыРасшифровки(
			Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки,
			СписокПараметров,
			ПоляРасшифровки);
		
		ПараметрыФормы = ОбеспечениеВДокументахКлиент.ПараметрыФормыСостояниеОбеспеченияЗаказов("СПИСОКЗАКАЗОВ");
		ПараметрыФормы.Заказы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ДанныеРасшифровкиОтчета.ЭтапПроизводства);
		ПараметрыДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
		
		
		МенюДействий.Добавить(ПараметрыДействия);
		
		ПараметрыРасшифровки.Вставить("МенюОтчетов", МенюОтчетов);
		ПараметрыРасшифровки.Вставить("МенюДействий", МенюДействий);
		ПараметрыРасшифровки.Вставить("Расшифровка", Расшифровка);
		
		КомпоновкаДанныхКлиент.ОбработкаРасшифровкиСДополнительнымМеню(ЭтаФорма, ПараметрыРасшифровки, СтандартнаяОбработка);
	
	ИначеЕсли ПолноеИмяОтчета = "Отчет.КонфликтыВОчередиЗаказовНаПроизводство" Тогда
		
		ПараметрыРасшифровки = ОтчетыУПВызовСервераПереопределяемый.ПараметрыРасшифровкиКонфликтыВОчередиЗаказовНаПроизводство(
			Расшифровка,
			ЭтаФорма.ОтчетДанныеРасшифровки);
		
		Если ПараметрыРасшифровки.ТекущееПоле.Свойство("Действие")
			И ПараметрыРасшифровки.ПоляГруппировки.Свойство("ЗаказНаПоступление") Тогда
			
			ОчиститьСообщения();
			
			СтандартнаяОбработка = Ложь;
			Отказ = Ложь;
			
			УправлениеПроизводствомВызовСервера.УстранитьКонфликтыВОчередиЗаказовНаПроизводство(
				ПараметрыРасшифровки.ПоляГруппировки.ЗаказНаПоступление,
				Отказ);
				
			Если НЕ Отказ Тогда
				ОтчетыКлиент.СформироватьОтчет(ЭтаФорма);
				Оповестить("Запись_ЗаказНаПроизводство",
					ПараметрыРасшифровки.ПоляГруппировки.ЗаказНаПоступление);
			КонецЕсли;
			
		КонецЕсли;
		
	//-- НЕ УТКА
	КонецЕсли;
	
	//++ НЕ УТКА
	МеждународныйУчетКлиент.ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
	//-- НЕ УТКА
	
КонецПроцедуры

// Обработчик дополнительной расшифровки (меню табличного документа формы отчета).
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   Элемент     - ПолеФормы        - табличный документ.
//   Расшифровка - Произвольный     - значение расшифровки точки, серии или значения диаграммы.
//   СтандартнаяОбработка - Булево  - признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	КлючТекущегоВарианта = ЭтаФорма.КлючТекущегоВарианта;
	
	//++ Устарело_Производство21
	Если ПолноеИмяОтчета = "Отчет.ПроизводственныеЗатраты" И КлючТекущегоВарианта = "ДвижениеТМЦиПроизводственныеЗатраты" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ДоступныеДействия = Новый Массив;
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Отфильтровать);
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Оформить);
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Сгруппировать);
		ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Расшифровка", Расшифровка);
		ДополнительныеПараметры.Вставить("ДанныеРасшифровки", ЭтаФорма.ОтчетДанныеРасшифровки);
		ДополнительныеПараметры.Вставить("АдресСхемы", ЭтаФорма.Отчет);
		ДополнительныеПараметры.Вставить("КлючОбъекта", ЭтаФорма.НастройкиОтчета.ПолноеИмя);
		ДополнительныеПараметры.Вставить("ПараметрыОбработчика", Неопределено);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиСДополнительнымМенюЗавершение", КомпоновкаДанныхКлиент, ДополнительныеПараметры);
		
		ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
			ЭтаФорма.ОтчетДанныеРасшифровки, 
			Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЭтаФорма.Отчет));
		
		ОбработкаРасшифровки.ПоказатьВыборДействия(
			ОписаниеОповещения, 
			Расшифровка,
			ДоступныеДействия);
		
	КонецЕсли;
	//-- Устарело_Производство21
	
КонецПроцедуры

// Обработчик команд, добавленных динамически.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   Команда - КомандаФормы - команда, которая была вызвана.
//   Результат - Булево - Истина, если вызов команды обработан.
//
Процедура ОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
	ПолноеИмяОтчета = ЭтаФорма.НастройкиОтчета.ПолноеИмя;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Отчет", ПолноеИмяОтчета);
	СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтаФорма, Команда, ДополнительныеПараметры); 
	
	//++ НЕ УТКА
	МеждународныйУчетКлиент.ОбработчикКоманды(ЭтаФорма, Команда, Результат);
	//-- НЕ УТКА
	
КонецПроцедуры

// Обработчик результата выбора подчиненной формы.
//
// Параметры:
//   ЭтаФорма       - ФормаКлиентскогоПриложения - форма отчета.
//   ВыбранноеЗначение - Произвольный     - результат выбора в подчиненной форме.
//   ИсточникВыбора    - ФормаКлиентскогоПриложения - форма, где осуществлен выбор.
//   Результат         - Булево           - Истина, если результат выбора обработан.
//
Процедура ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
КонецПроцедуры

// Обработчик оповещения формы отчета.
//
// Параметры:
//   ЭтаФорма - ФормаКлиентскогоПриложения - форма отчета.
//   ИмяСобытия  - Строка           - идентификатор события для принимающих форм.
//   Параметр    - Произвольный     - расширенная информация о событии.
//   Источник    - ФормаКлиентскогоПриложения
//               - Произвольный - источник события.
//   ОповещениеОбработано - Булево - признак того, что событие обработано.
//
Процедура ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник) Экспорт
	
КонецПроцедуры
 
// Обработчик специальных действий при расшифровке отчетов.
// Например, открытие специализированных форм с параметризацией.
//
//	Параметры:
//		ПараметрыДействия - Структура
//			Имя - Строка - Имя выполняемого действия
//			Заголовок - Строка - Пользовательское представление выполняемого действия
//		ПараметрыРасшифровки - Структура - Параметры, передаваемые в форму.
//
Процедура ВыполнитьДействиеРасшифровки(ПараметрыДействия, ПараметрыРасшифровки) Экспорт
	
//++ НЕ УТКА
	Если ПараметрыДействия.Имя = "ИзменитьДоступностьВидаРЦ" Тогда
		
		ПланированиеПроизводстваКлиент.ИзменитьДоступностьВидаРЦ(
					ПараметрыРасшифровки.ВидРабочегоЦентра, 
					ПараметрыРасшифровки.ПериодГрафика);
	Иначе
//-- НЕ УТКА
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Не определен обработчик действия %1.';
											|en = '%1 action handler is not determined.'"),
										ПараметрыДействия.Заголовок);
//++ НЕ УТКА
	КонецЕсли;
//-- НЕ УТКА

КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
//	Параметры:
//		ФормаОтчета - ФормаКлиентскогоПриложения - форма отчета.
//
Процедура ПослеФормированияНаКлиенте(ФормаОтчета) Экспорт
	
	ДопСвойства = ФормаОтчета.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ТребуетсяОбработчикОжидания = Ложь;
	Если ТипЗнч(ПараметрыПроверкиФоновыхЗаданий) <> Тип("Структура") Тогда
		ПараметрыПроверкиФоновыхЗаданий = Новый Структура;
		ПараметрыПроверкиФоновыхЗаданий.Вставить("Задания", Новый Структура());
		ПараметрыПроверкиФоновыхЗаданий.Вставить("Интервал", 7);
	КонецЕсли;
	Если ДопСвойства.Свойство("КоличествоДокументовКОтражениюВБюджетировании") Тогда
		ТребуетсяОбработчикОжидания = Истина;
		Если НЕ ПараметрыПроверкиФоновыхЗаданий.Задания.Свойство("ОтражениеДокументовВБюджетировании") Тогда
			ПараметрыТекущегоВызова = Новый Структура("НачалоПериода, КонецПериода", ДопСвойства.НачалоПериода, ДопСвойства.КонецПериода);
			ПараметрыЗадания = Новый Структура("Параметры, Формы", ПараметрыТекущегоВызова, Новый Соответствие());
			ПараметрыПроверкиФоновыхЗаданий.Задания.Вставить("ОтражениеДокументовВБюджетировании", ПараметрыЗадания);
		КонецЕсли;
		ПараметрыЗадания = ПараметрыПроверкиФоновыхЗаданий.Задания.ОтражениеДокументовВБюджетировании.Формы;
		ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", ДопСвойства.НачалоПериода, ДопСвойства.КонецПериода);
		ПараметрыЗадания.Вставить(ФормаОтчета, ПараметрыФормы);
	КонецЕсли;
	Если ТребуетсяОбработчикОжидания Тогда
		ФормаОтчета.ПодключитьОбработчикОжидания("ПроверитьФоновыеЗадания", ПараметрыПроверкиФоновыхЗаданий.Интервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Метод вызывается из формы отчета после его формирования.
//
//	Параметры:
//		Ответ - КодВозвратаДиалога - При варианте "Да" будут выполнено переформирование форм
//		ПараметрыВыполнения - Структура - Содержит в себе перечень форм, которые необходимо переформировать.
//
Процедура ФормаОтчетаПослеПодтвержденияПереформирования(Ответ, ПараметрыВыполнения) Экспорт
	Перем НеобработанныеФормы;
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ФормаОтчета Из ПараметрыВыполнения.Формы Цикл
		ФормаОтчета.ПодключитьОбработчикОжидания("Сформировать", 1, Истина);
	КонецЦикла;
	Если ПараметрыВыполнения.Свойство("НеобработанныеФормы", НеобработанныеФормы) Тогда
		Периоды = Новый Массив;
		Для Каждого КлючИЗначение Из НеобработанныеФормы Цикл
			Периоды.Добавить(КлючИЗначение.Значение.НачалоПериода);
			Периоды.Добавить(КлючИЗначение.Значение.КонецПериода);
		КонецЦикла;
		БюджетнаяОтчетностьВызовСервера.ОтразитьДокументыФоновымЗаданиемПоФормеСМаксимальнымПериодом(Периоды);
		Для Каждого КлючИЗначение Из НеобработанныеФормы Цикл
			ПослеФормированияНаКлиенте(КлючИЗначение.Ключ);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возникает после окончания формирования отчета.
//
// Параметры:
//   ФормаОтчета - ФормаКлиентскогоПриложения - Форма отчета.
//   ОтчетСформирован - Булево - Истина если отчет был успешно сформирован.
//
Процедура ПослеФормирования(ФормаОтчета, ОтчетСформирован) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТКА


Процедура ДобавитьГруппуКолонок(МассивПолейВарианта, ОбщийМассивПолей, СтрокаПолей, ВариантОтчета)
	
	Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаПолей,",", Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОбщийМассивПолей, Поля);
	
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Поля", Поля);
	СтруктураПолей.Вставить("ВариантОтчета", ВариантОтчета);
	
	МассивПолейВарианта.Добавить(СтруктураПолей);
	
КонецПроцедуры

//-- НЕ УТКА
#КонецОбласти 