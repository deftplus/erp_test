
#Область ПрограммныйИнтерфейс

Функция ТекстЗапросаПросроченнаяЗадолженность(ДобавлятьИтоги) Экспорт
	РезультатФункции = ВзаиморасчетыВстраиваниеУХ.ТекстЗапросаПросроченнаяЗадолженность(ДобавлятьИтоги);
	Возврат РезультатФункции; 
КонецФункции

Процедура ПроверкаОплатыПоДоговорам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.АвтоматическоеФормированиеПретензий);
	
	ДатаДляГенерации = ТекущаяДатаСеанса();
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПросроченнаяЗадолженность(Истина);
	Запрос.УстановитьПараметр("ДатаДляГенерации", НачалоДня(ДатаДляГенерации));
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаОрганизация = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		ВыборкаОжидаемаяДата = ВыборкаОрганизация.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаОжидаемаяДата.Следующий() Цикл
			ВыборкаКонтрагент = ВыборкаОжидаемаяДата.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаКонтрагент.Следующий() Цикл
	            НоваяПретензия = Справочники.Претензии.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НоваяПретензия, ВыборкаКонтрагент);
				НовоеДвижениеПретензии = Документы.ИзменениеПретензии.СоздатьДокумент();
				НовоеДвижениеПретензии.ЭтапПретензии = Справочники.ЭтапыПретензионноИсковойРаботы.Начальная;
				НовоеДвижениеПретензии.Дата = ДатаДляГенерации;
				ЗаполнитьЗначенияСвойств(НовоеДвижениеПретензии, ВыборкаКонтрагент);
				Если ВыборкаКонтрагент.Сумма < 0 Тогда
					НоваяПретензия.ТипПретензии = Перечисления.ТипыПретензий.Входящая;
				Иначе
					НоваяПретензия.ТипПретензии = Перечисления.ТипыПретензий.Исходящая;
				КонецЕсли;
				
				ВыборкаДетальныеЗаписи = ВыборкаКонтрагент.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяСтрока = НовоеДвижениеПретензии.РасшифровкаПредметаСпора.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
					НоваяСтрока.Всего = НоваяСтрока.Сумма + НоваяСтрока.Пени;
					НовоеДвижениеПретензии.Ответственный = ВыборкаДетальныеЗаписи.Ответственный;
				КонецЦикла;
				
				НовоеДвижениеПретензии.Сумма = НовоеДвижениеПретензии.РасшифровкаПредметаСпора.Итог("Всего");
				АвтозаголовокПретензии(НоваяПретензия, НовоеДвижениеПретензии.РасшифровкаПредметаСпора);
				НовоеДвижениеПретензии.Комментарий = НСтр("ru = '!Сформирована автоматически!'");
				НовоеДвижениеПретензии.ПроцентОжидаемогоВозвратаДолга = 100;
				
				НачатьТранзакцию();
				НоваяПретензия.Записать();
				НовоеДвижениеПретензии.Претензия = НоваяПретензия.Ссылка;
				Попытка
					НовоеДвижениеПретензии.Записать();
				Исключение
					ОтменитьТранзакцию();
					ИнфоОшибки = ИнформацияОбОшибке();
					ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
					ТекстОшибки1 = НСтр("ru = 'Ошибка генерации претензии по контрагенту'") + " " + ВыборкаКонтрагент.Контрагент + Символы.ПС;
					ЗаписьЖурналаРегистрации("ПретензионноИсковаяРабота", УровеньЖурналаРегистрации.Ошибка, , , ТекстОшибки1 + ТекОшибка);
					Продолжить;
				КонецПопытки;
				ЗафиксироватьТранзакцию();
				//Оповещение
				СоздатьОповещение(НоваяПретензия.Ссылка, Справочники.ВидыСобытийОповещений.СформированаПретензия, НовоеДвижениеПретензии.Ответственный);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОповещениеОПриближенииСрокаОплаты() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОповещениеОПриближенииСрокаОплаты);
	
	РезультатЗапроса = ВзаиморасчетыВстраиваниеУХ.ДанныеДляОповещенияОПриближенииСрокаОплаты();
	Выборка = РезультатЗапроса.Выбрать();
	Оповещение = Справочники.ВидыСобытийОповещений.НапоминаниеПриближаетсяСрокОплаты;
	Пока Выборка.Следующий() Цикл
		ТекДоговор = Выборка.ДоговорКонтрагента;
		ТекОтветственный = Выборка.Ответственный;
		СоздатьОповещение(ТекДоговор, Оповещение, ТекОтветственный);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОповещениеОНеобходимостиИзмененияСтатусаПретензии() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОповещениеОНеобходимостиИзмененияСтатусаПретензии);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХодПретензионноИсковойРаботыСрезПоследних.Претензия КАК Претензия,
		|	ХодПретензионноИсковойРаботыСрезПоследних.Ответственный КАК Ответственный
		|ИЗ
		|	РегистрСведений.ХодПретензионноИсковойРаботы.СрезПоследних КАК ХодПретензионноИсковойРаботыСрезПоследних
		|ГДЕ
		|	НАЧАЛОПЕРИОДА(ХодПретензионноИсковойРаботыСрезПоследних.ОжидаемаяДата, ДЕНЬ) = &ТекущаяДата";
	
	Запрос.УстановитьПараметр("ТекущаяДата", НачалоДня(ТекущаяДатаСеанса()));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВидСобытияИзменениеСтатусПретензии = Справочники.ВидыСобытийОповещений.НапоминаниеОНеобходимостиИзмененияСтатусаПретензии;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекПретензия = ВыборкаДетальныеЗаписи.Претензия;
		ТекОтветственный = ВыборкаДетальныеЗаписи.Ответственный;
		СоздатьОповещение(ТекПретензия, ВидСобытияИзменениеСтатусПретензии, ТекОтветственный);
	КонецЦикла;
		
КонецПроцедуры

Процедура АвтозаголовокПретензии(Претензия, ТабличнаяЧасть, Основание = Неопределено) Экспорт
	ФормированиеЗаголовока = "";
	Для каждого Строка Из ТабличнаяЧасть Цикл
		ФормированиеЗаголовока = ФормированиеЗаголовока + Строка.ДокументОснование + Символы.ПС;
	КонецЦикла;
	Если ФормированиеЗаголовока <> "" Тогда
		Претензия.ПредметСпора = НСтр("ru = 'Взыскание дебиторской задолженности по документам:'") + " " + Символы.ПС + ФормированиеЗаголовока;
		Претензия.Наименование = НСтр("ru = 'Взыскание дебиторской задолженности по документам:'") + " " + СтрЗаменить(ФормированиеЗаголовока, Символы.ПС, ";");
	Иначе
		ПредставлениеОснования = "";
		ПредставлениеОснования = ПредставлениеОснования + ?(ЗначениеЗаполнено(Основание), Основание, Претензия.Основание);
		Претензия.ПредметСпора = ?(ЗначениеЗаполнено(ПредставлениеОснования), НСтр("ru = 'Претензия на основании:'") + " " + ПредставлениеОснования, "");
		Претензия.Наименование = Претензия.ПредметСпора;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьОповещение(ОбъектОповещения, Событие, Ответственный)
	элЗадачи = Справочники.Задачи.СоздатьЭлемент();
	элЗадачи.СвязанныйОбъект = ОбъектОповещения;
	элЗадачи.Записать();
	СсылкаНаЗадачу = элЗадачи.Ссылка;
	МодульРегламентныхЗаданийУХ.СоздатьЗадачу(СсылкаНаЗадачу, Ответственный, Документы.ЭкземплярПроцесса.ПустаяСсылка(), Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка(), Перечисления.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка());
	МассивОповещаемых = Новый Массив;
	МассивОповещаемых.Добавить(Ответственный);
	МодульУправленияОповещениямиУХ.ОповеститьПользователей(Событие, , ОбъектОповещения, МассивОповещаемых, , СсылкаНаЗадачу);
КонецПроцедуры

#КонецОбласти