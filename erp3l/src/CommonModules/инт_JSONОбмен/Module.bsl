
#Область СредстваРаспознаванияЗначенийИзСтрокиJSONвСтруктуру

Функция ПолучитьСтруктуруСообщенияJSON(знач СтрокаJSON,ТекстОшибки) экспорт
	
	JSON=Новый ЧтениеJSON();
	JSON.УстановитьСтроку(СтрокаJSON);
	СтруктураРаспознанныхЗначений=Новый Структура();
	
	Попытка
		пока JSON.Прочитать() цикл             
			
			Если JSON.ТипТекущегоЗначения=ТипЗначенияJson.НачалоОбъекта тогда
				НачалоОбъекта(JSON,СтруктураРаспознанныхЗначений);
				
			иначеЕсли JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива тогда
				НачальныйМассив=Новый Массив();
				СтруктураРаспознанныхЗначений.Вставить("Объекты",НачальныйМассив);
				ЧитатьМассив(JSON,НачальныйМассив);
				
				
			иначеЕсли JSON.ТипТекущегоЗначения=ТипЗначенияJSON.ИмяСвойства тогда
				ЧитатьСвойство(JSON,СтруктураРаспознанныхЗначений);
				
			иначе	
				ТекстОшибки="Не найдено начало объекта или массива в файле JSON";
				
			КонецЕсли;
		КонецЦикла;
		
		
	исключение
		
		ТекстОшибки="Ошибка чтения строки JSON";
		
	КонецПопытки;

	//Устарело. Есть уникальный ключ - код РС
	//СформироватьУникальныйКлючДляДокумента(СтруктураРаспознанныхЗначений);
	
	Возврат(СтруктураРаспознанныхЗначений);
	
КонецФункции

Процедура СформироватьУникальныйКлючДляДокумента(СтруктураРаспознанныхЗначений)
	
	head=неопределено;
	если СтруктураРаспознанныхЗначений.Свойство("head",head) = Ложь тогда
		возврат;
	КонецЕсли;    
	
	object_type=неопределено;
	если head.Свойство("object_type",object_type) = Ложь тогда
		возврат;
	КонецЕсли;
	
	
	caption=неопределено;
	
	если СтруктураРаспознанныхЗначений.Свойство("caption",caption) = Ложь тогда
		возврат;
	КонецЕсли; 
	
	Da_NO=неопределено; 
	
	если caption.Свойство("caption",DA_NO) = Ложь тогда
		возврат;
	КонецЕсли; 
	
	DA_DATE=неопределено; 
	если caption.Свойство("caption",DA_DATE) = Ложь тогда
		возврат;
	КонецЕсли;                             
	
	Если типЗнч(DA_NO)=тип("Число") тогда
		DA_NO_Строкой=строка(DA_NO);
		DA_NO_Строкой=стрЗаменить(DA_NO_Строкой,Символы.НПП,""); 
	иначе
		DA_NO_Строкой=DA_NO;
	КонецЕсли;
	
	Если типЗнч(DA_DATE)=тип("Дата") тогда
		DA_DATE_Строкой=Формат(DA_DATE,"ДФ=""гггг-ММ-дд""");
	иначе
		DA_DATE_Строкой=DA_DATE;
	КонецЕсли;
	
	DOC_ID=DA_DATE_Строкой+"|"+DA_NO_Строкой;	
	
	caption.Вставить("DOC_ID",DOC_ID);
	
КонецПроцедуры






Процедура ЧитатьМассив(JSON,МассивКЗаполнению) экспорт
	пока истина цикл
		JSON.Прочитать();	
		Если JSON.ТипТекущегоЗначения=типЗначенияJSON.НачалоОбъекта тогда
			НоваяСтруктураОбъектов=Новый Структура;
			МассивКЗаполнению.Добавить(НоваяСтруктураОбъектов);
			НачалоОбъекта(JSON,НоваяСтруктураОбъектов);
			продолжить;
		КонецЕсли;
		
		Если JSON.ТипТекущегоЗначения=типЗначенияJSON.Булево 
			или JSON.ТипТекущегоЗначения=типЗначенияJSON.Строка
			или JSON.ТиптекущегоЗначения=типЗначенияJSON.Число тогда
			МассивКЗаполнению.Добавить(json.ТекущееЗначение);
			продолжить;
		КонецЕсли;
		
		Если JSON.ТипТекущегоЗначения=типЗначенияJSON.КонецМассива тогда
			прервать;
		КонецЕсли;
		
	КонецЦикла;	
КонецПроцедуры                         

Процедура НачалоОбъекта(JSON,ВходящаяСтруктураРаспознанныхЗначений) экспорт
	Пока истина цикл        
		JSON.Прочитать();	                                                    
		Если JSON.ТипТекущегоЗначения=типЗначенияJSON.ИмяСвойства тогда			
			ЧитатьСвойство(JSON, ВходящаяСтруктураРаспознанныхЗначений); 
			продолжить;
		КонецЕсли;	
		
		Если JSON.ТипТекущегоЗначения=типЗначенияJSON.НачалоМассива тогда			
			МассивКЗаполнению=Новый Массив();
			ЧитатьМассив(JSON,МассивКЗаполнению);                  
			продолжить;
		КонецЕсли;	                                               
		
		Если JSON.ТипТекущегоЗначения=ТипЗначенияJSON.КонецОбъекта тогда прервать; конецЕсли;	
	КонецЦикла;
КонецПРоцедуры

Процедура ЧитатьСвойство(JSON,ВходящаяСтруктураРаспознанныхЗначений) экспорт
	Заголовок=JSON.ТекущееЗначение;
	Заголовок=стрЗаменить(Заголовок,";","");
	Если json.Прочитать() тогда
		Если jSON.ТипТекущегоЗначения=ТипЗначенияJSON.Булево тогда
			ВходящаяСтруктураРаспознанныхЗначений.Вставить(Заголовок,булево(json.ТекущееЗначение));
		иначеЕсли jSON.ТипТекущегоЗначения=ТипЗначенияJSON.Ничего или jSON.ТипТекущегоЗначения=ТипЗначенияJSON.Null тогда
			возврат;
		иначеЕсли jSON.ТипТекущегоЗначения=ТипЗначенияJSON.Строка тогда 
			Если врег(json.ТекущееЗначение)="NONE" или врег(json.ТекущееЗначение)="NULL" или врег(json.ТекущееЗначение)="NOTHING" тогда
				возврат;
			КонецЕсли;
			ЗначениеБезКавычек=ОчиститьЗначениеОтКрайнихКавычек(json.ТекущееЗначение); 
			Если ЗначениеБезКавычек="" тогда возврат; конецЕсли;
			СтруктураПроверкиНаБулево=ЭтоБулево(ЗначениеБезКавычек);
			Если СтруктураПроверкиНаБулево.ЭтоБулево=истина тогда
				ВходящаяСтруктураРаспознанныхЗначений.Вставить(Заголовок,СтруктураПроверкиНаБулево.БулевоЗначение);	
				возврат;
			КонецЕсли;
			СтруктураПроверкиНаЧисло=ЭтоЧисло(ЗначениеБезКавычек);
			Если СтруктураПроверкиНаЧисло.ЭтоЧисло=истина тогда
				ВходящаяСтруктураРаспознанныхЗначений.Вставить(Заголовок,СтруктураПроверкиНаЧисло.ЧисловоеЗначение);	
				возврат;
			КонецЕсли;
			СтруктураПроверкиНаДату=ЭтоДата(ЗначениеБезКавычек);
			Если СтруктураПроверкиНаДату.ЭтоДата=истина тогда
				ВходящаяСтруктураРаспознанныхЗначений.Вставить(Заголовок,СтруктураПроверкиНаДату.ЗначениеДаты);	
				возврат;
			КонецЕсли;
			ВосстановитьКавычкиИзЭкранированных(ЗначениеБезКавычек);
			ВходящаяСтруктураРаспознанныхЗначений.Вставить(Заголовок,ЗначениеБезКавычек);
		иначеЕсли jSON.ТипТекущегоЗначения=ТипЗначенияJSON.Число тогда 
			ВходящаяСтруктураРаспознанныхЗначений.Вставить(Заголовок,число(json.ТекущееЗначение)); 
		иначеЕсли jSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоМассива тогда
			МассивКЗаполнению=Новый Массив();
			ВходящаяСтруктураРаспознанныхЗначений.Вставить(заголовок,МассивКЗаполнению);
			ЧитатьМассив(json, МассивКЗаполнению) 
		иначеЕсли JSON.ТипТекущегоЗначения=ТипЗначенияJSON.НачалоОбъекта тогда
			НоваяСтруктураРаспознанныхЗначений=Новый Структура;
			ВходящаяСтруктураРаспознанныхЗначений.Вставить(заголовок,НоваяСтруктураРаспознанныхЗначений);
			НачалоОбъекта(JSON,НоваяСтруктураРаспознанныхЗначений);	
		КонецЕсли;   
	КонецЕсли;
КонецПроцедуры

Функция ОчиститьЗначениеОтКрайнихКавычек(знач ВходящаяСтрока) экспорт
	//1 условие. Исследуемая строка начинается на кавычку
	УсловиеВыполнено=ложь;
	Если стрНайти(ВходящаяСтрока,"""",,1)=1 тогда
		УсловиеВыполнено=истина;	   
	иначе
		возврат(ВходящаяСтрока);
	КонецЕсли;    
	
	ДлинаСтроки=стрДлина(ВходящаяСтрока);
	
	//2 условие. Исследуемая строка заканчивается на кавычку
	Если УсловиеВыполнено и стрНайти(ВходящаяСтрока,"""",,ДлинаСтроки-1)=1 тогда
		//3 условие. ИсследуемаяСтрока заканчивается не на \"
		Если стрНайти(ВходящаяСтрока,"\""",ДлинаСтроки-2)=0 тогда
			возврат(сред(ВходящаяСтрока,2,ДлинаСтроки-2));
		иначе		   
			возврат(ВходящаяСтрока); 
		КонецЕсли;
	иначе	   
		возврат(ВходящаяСтрока); 
	КонецЕсли;
КонецФункции

Функция ЭтоБулево(знач ВходящаяСтрока) экспорт
	НашлиБулево=ложь;	
	СтруктураОтвета=Новый Структура;
	Если стрДлина(ВходящаяСтрока)=1 тогда 
		Если стрНайти("01",входящаяСтрока)>0 тогда
			НашлиБулево=истина;
			СтруктураОтвета.Вставить("БулевоЗначение",булево(Число(ВходящаяСтрока)));
		КонецЕсли;		
		
	иначе	
		
		ВходящаяСтрокаВВерхнемРегистре=вРег(ВходящаяСтрока);
		Если ВходящаяСтрокаВВерхнемРегистре="ИСТИНА" или ВходящаяСтрокаВВерхнемРегистре="TRUE" тогда
			НашлиБулево=истина;				
			СтруктураОтвета.Вставить("БулевоЗначение",истина);	
			
		иначеЕсли ВходящаяСтрокаВВерхнемРегистре="FALSE" или ВходящаяСтрокаВВерхнемРегистре="ЛОЖЬ" тогда	
			НашлиБулево=истина;
			СтруктураОтвета.Вставить("БулевоЗначение",ложь);					
		КонецЕсли;	
		
		
	КонецЕсли;	
	СтруктураОтвета.Вставить("ЭтоБулево",НашлиБулево);	
	возврат(СтруктураОтвета);
КонецФункции	

Функция ЭтоЧисло(знач входящаяСтрока) экспорт
	НайденаБукваИлиТочка=ложь;
	МассивПозицийПробелов=Новый Массив();
	МассивПозицийТочек=Новый Массив();
	ДлинаСтроки=стрДлина(входящаяСтрока);
	
	//Критерии. 
	//1. Если есть символы отличные от цифр, точки и пробела - не число
	для Счетчик=1 по ДлинаСтроки цикл
		РаспознаваемыйСимвол=сред(ВходящаяСтрока,Счетчик,1);
		Если стрНайти("1234567890. ",РаспознаваемыйСимвол)=0 тогда
			возврат(Новый Структура("ЭтоЧисло",ложь));
		иначе
			Если РаспознаваемыйСимвол=" " тогда
				МассивПозицийПробелов.Добавить(Счетчик);		
				
			иначеЕсли РаспознаваемыйСимвол="." тогда
				МассивПозицийТочек.Добавить(Счетчик);
			КонецЕсли;	
			
			
		КонецЕсли;	
	КонецЦикла; 
	
	КоличествоПробелов=МассивПозицийПробелов.Количество();    
	КоличествоТочек=МассивПозицийТочек.Количество();
	
	//2. Если пробелов и точек вообще нет, то, если число больше 7 символов, вероятнее всего, это штрихкод какой-нибудь или ИНН, передавать строкой
	Если ДлинаСтроки>7 и КоличествоПробелов+Количествоточек=0 тогда
		возврат(Новый Структура("ЭтоЧисло",ложь));		
	КонецЕсли;
	
	//3. Если точек больше одной - не число                         
	ИсходнаяПозицияРазделителяДробнойЧасти=0;
	Если КоличествоТочек>1 тогда
		возврат(Новый Структура("ЭтоЧисло",ложь));	
	иначеЕсли КоличествоТочек=1 тогда
		//ИсходнаяПозицияРазделителяДробнойЧасти=МассивПозицийТочек[0];
		МассивПозицийПробелов.Добавить(МассивПозицийТочек[0]);	
		КоличествоПробелов=КоличествоПробелов+1;
	КонецЕсли;	
	
	//3. Если пробелы стоят друг за другом и за разделителем десятичной части не кратно 3, то это не число
	//3.1 Если число целое, то пробел, если он есть, должен стоять за 3 символа до конца строки, иначе это не число
	Если КоличествоТочек=0 тогда
		Если КоличествоПробелов<>0 тогда
			Если ДлинаСтроки-3<>МассивПозицийПробелов[КоличествоПробелов-1] тогда
				возврат(Новый Структура("ЭтоЧисло",ложь));	  						  
			КонецЕсли;	  
		КонецЕсли;	
		
	КонецЕсли;	
	
	//3.2. Проверяем шаг между пробелами и/или десятичным разделителем		
	Если КоличествоПробелов>1 тогда
		для Счетчик=0 по КоличествоПробелов-2 цикл	
			Если МассивПозицийПробелов[Счетчик]+3<>МассивПозицийПробелов[Счетчик+1] тогда	
				возврат(Новый Структура("ЭтоЧисло",ложь));	
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;	
	
	входящаяСтрока=стрЗаменить(входящаяСтрока," ","");
	//Раз мы до сюда дошли, то это число.
	СтруктураОтвета=Новый Структура("ЭтоЧисло",истина);
	СтруктураОтвета.Вставить("ЧисловоеЗначение",число(входящаяСтрока));
	возврат(СтруктураОтвета);
КонецФункции	

Функция ЭтоДата(знач входящаяСтрока) экспорт 
	//Проверяем строку на соответствие форматам
	//01.04.2022 0:00:00
	//2022-04-20 0:00:00
	//2022-04-20T0:00:00
	//2022-04-21 
	//2022-04-20T0:00:00.345+03
	РаспознаноГод=0;
	РаспознаноМесяц=0;
	РаспознаноДень=0;
	РаспознаноЧас=0;
	РаспознаноМинута=0;
	РаспознаноСекунда=0;
	
	МассивРазделенныхЗначений=стрРазделить(входящаяСтрока,"- .T+Z:");
	КоличествоЭлементовМассива=МассивРазделенныхЗначений.Количество();
	Если  не КоличествоЭлементовМассива=6 и не КоличествоЭлементовМассива=7 и не КоличествоЭлементовМассива=3 тогда
		возврат(Новый Структура("ЭтоДата",ложь));
	КонецЕсли;                                                            
	
	////Длина первого и третьего элемента должна быть 1, 2 или 4, четвертого,  второго ,пятого и шестого 1 или 2,  а также проверим, чтобы все это были цифры
	ВерхняяГраницаЭлементовМассива=мин(КоличествоЭлементовМассива-1,6);
	для Счетчик=0 по ВерхняяГраницаЭлементовМассива  цикл
		РассматриваемоеЗначение=МассивРазделенныхЗначений[Счетчик];
		ДлинаРассматриваемогоЗначения=стрДлина(РассматриваемоеЗначение);
		Если (Счетчик=0 или Счетчик=2) и (ДлинаРассматриваемогоЗначения=1 или ДлинаРассматриваемогоЗначения=2 или ДлинаРассматриваемогоЗначения=4) тогда
			СтруктураПроверкиНаЧисло=ЭтоЧисло(РассматриваемоеЗначение);
			Если СтруктураПроверкиНаЧисло.ЭтоЧисло тогда
				Если ДлинаРассматриваемогоЗначения<=2 тогда	
					РаспознаноДень=СтруктураПроверкиНаЧисло.ЧисловоеЗначение;						
				иначе	
					РаспознаноГод=СтруктураПроверкиНаЧисло.ЧисловоеЗначение;						
				КонецЕсли;
				продолжить;
			иначе
				возврат(Новый Структура("ЭтоДата",ложь));
				прервать;	
			КонецЕсли;
		КонецЕсли;	
		Если (Счетчик=1 или Счетчик=3 или Счетчик=4 или Счетчик=5) и (ДлинаРассматриваемогоЗначения=1 или ДлинаРассматриваемогоЗначения=2) тогда
			СтруктураПроверкиНаЧисло=ЭтоЧисло(РассматриваемоеЗначение);
			Если СтруктураПроверкиНаЧисло.ЭтоЧисло тогда
				Если Счетчик=1 тогда
					РаспознаноМесяц=СтруктураПроверкиНаЧисло.ЧисловоеЗначение;						
				иначеЕсли Счетчик=3 тогда
					РаспознаноЧас=СтруктураПроверкиНаЧисло.ЧисловоеЗначение;
				иначеЕсли 	Счетчик=4 тогда
					РаспознаноМинута=СтруктураПроверкиНаЧисло.ЧисловоеЗначение;
				иначе     //счетчик=5
					РаспознаноСекунда=СтруктураПроверкиНаЧисло.ЧисловоеЗначение;
					
				КонецЕсли;	
				продолжить;
			иначе
				возврат(Новый Структура("ЭтоДата",ложь));
				прервать;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	Если (ЗначениеЗаполнено(РаспознаноГод) и 
		ЗначениеЗаполнено(РаспознаноМесяц) и
		ЗначениеЗаполнено(РаспознаноДень)) тогда 
		СтруктураОтвета=Новый Структура("ЭтоДата",истина);
		СтруктураОтвета.Вставить("ЗначениеДаты",Дата(РаспознаноГод, РаспознаноМесяц,РаспознаноДень,РаспознаноЧас, РаспознаноМинута, РаспознаноСекунда));
		возврат(СтруктураОтвета);
		
	иначе
		возврат(Новый Структура("ЭтоДата",ложь))	
	КонецЕсли;		
КонецФункции	

Процедура ВосстановитьКавычкиИзЭкранированных(входящаяСтрока) экспорт
	ВходящаяСтрока=стрЗаменить(ВходящаяСтрока,"\""","""");
КонецПроцедуры

#КонецОбласти


#Область СредстваДальнейшейОбработкиПрочитаннойСтруктурыJSON
Функция ПолучитьСтруктуруHeadРаспознаннойСтруктурыФайлаJSON(ВходящаяСтруктура,ТекстОшибки,Успех) экспорт
	перем head;
	Успех=истина;
	Если ВходящаяСтруктура.Свойство("head",head)=ложь тогда
		Успех=ложь;
		ТекстОшибки="В прочитанной структуре отсутствует заголовок ""head"".";
		возврат(Новый Структура());
	КонецЕсли;
	возврат(head);
КонецФункции	

Функция ПолучитьМетаданныеВерхнегоУровня(ВходящиеДанные,ТекстОшибки, Успех) экспорт
	
	
	
	
	Успех=истина;
	Если типЗнч(ВходящиеДанные)=тип("Строка") тогда
		Если стрНайти(ВходящиеДанные,"Справочники.")>0 тогда
			возврат(Метаданные.Справочники);
			
		иначеЕсли стрНайти(ВходящиеДанные,"Документы.")>0 тогда
			возврат(Метаданные.Документы);			
		иначеЕсли стрНайти(ВходящиеДанные,"РегистрыСведений.")>0 тогда
			возврат(Метаданные.РегистрыСведений);
			
		иначе	
			ТекстОшибки="Не удалось определить метаданные верхнего уровня.";			
			возврат(неопределено);	
		КонецЕсли;
	иначеЕсли типЗнч(Входящиеданные)=тип("Структура") тогда
		
		Object_type="";
		
		Если ВходящиеДанные.Свойство("object_type",Object_type)=ложь тогда
			Успех=ложь;
			ТекстОшибки="В прочитанной структуре ""head"" отсутствует заголовок ""object_type"".";
			возврат(неопределено);
		КонецЕсли;
		
		Если Object_type="reference" тогда  
			//Мы прочитали справочник
			возврат(Метаданные.Справочники);
		иначеЕсли Object_type="document" тогда
			возврат(Метаданные.Документы);			
		иначе	
			Успех=ложь;
			ТекстОшибки="Не распознано значение параметра ""object_type"" в считанной структуре.";
			возврат(неопределено);
			
		конецЕсли;
	иначе
		Успех=ложь;
		ТекстОшибки="Неизвестный тип входящих данных при определении метаданных верхнего уровня.";
		возврат(неопределено);
	КонецЕсли;	
	
КонецФункции	

Функция ПолучитьМетаданныеВторогоУровня(МетаданныеПервогоУровня,ВходящиеДанные,ТекстОшибки,Успех) экспорт 
	
	_subtype="";
	Успех=истина;                                    
	
	Если типЗнч(ВходящиеДанные) <>тип("Структура") тогда
		
		Успех=ложь;
		ТекстОшибки="Неизвестный тип входящих данных при определении метаданных второго уровня.";	
		возврат(неопределено);
		
		
	иначе	
		Если ВходящиеДанные.Свойство("subtype",_subtype)=ложь тогда
			
			Успех=ложь;
			ТекстОшибки="Неизвестный тип входящих данных при определении метаданных второго уровня.";	
			возврат(неопределено);
			
			
		КонецЕсли;	
	КонецЕсли; 
	
	_subtype=стрЗаменить(_subtype,"Справочник.","");
	_subtype=стрЗаменить(_subtype,"Документ.",""); 
	_subtype=стрЗаменить(_subtype,"СправочникСсылка.","");
	_subtype=стрЗаменить(_subtype,"ДокументСсылка.",""); 
	_subtype=стрЗаменить(_subtype,"СправочникСсылка","");
	_subtype=стрЗаменить(_subtype,"ДокументСсылка","");  
	_subtype=стрЗаменить(_subtype,"Справочник","");
	_subtype=стрЗаменить(_subtype,"Документ","");        
	_subtype=стрЗаменить(_subtype,"РегистрСведений.","");
	_subtype=стрЗаменить(_subtype,"РегистрСведений","");
	_subtype=СокрЛП(_subtype);	   
	_subtype=стрЗаменить(_subtype,"СчетНаОплатуПоставщика","ЗаказПоставщику");	
	_subtype=стрЗаменить(_subtype,"ЛогистическаяСделка","ллл_ЛогистическаяСделка");//ERP1C-73 Стрепков К.Б. 18.07.2022	
	мет = МетаданныеПервогоУровня.Найти(_subtype);
	Если мет <> Неопределено Тогда
		Возврат(мет);	
	КонецЕсли;	
	
	Успех=ложь;
	ТекстОшибки="Не удалось определить метаданные второго уровня по параметру subtype.";	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьСтрокуПоискаНастроекПоМетаданным(Мет) экспорт
	возврат(Мет.ПолноеИмя());
КонецФункции	

Процедура РаспознатьИмяОбъектаСообщенияОбмена(Сообщение=неопределено) экспорт
	
	МассивСообщений=Новый Массив();
	Если типЗнч(Сообщение)=тип("СправочникСсылка.СП_СообщенияОбмена") тогда
		МассивСообщений.Добавить(Сообщение); 
	иначеЕсли
		типЗнч(Сообщение)=тип("СправочникОбъект.СП_СообщенияОбмена") тогда
		
		ОписаниеОшибки="";
		ИмяОбъекта="";
		СтрокаJSON=Сообщение.ТелоСообщения;
		ТекущееСостояниеСообщения = Перечисления.СП_СостоянияСообщений.Новое;
		
		ИмяОбъекта=НайтиИмяОбъектаПоСТрокеJSON(СтрокаJSON,ОписаниеОшибки,ТекущееСостояниеСообщения);
		Если ЗначениеЗаполнено(ИмяОбъекта) тогда
			Сообщение.ИмяОбъекта=ИмяОбъекта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) тогда
			Сообщение.ТекстОшибки=ОписаниеОшибки;
		КонецЕсли;
		
		Сообщение.СостояниеСообщения=ТекущееСостояниеСообщения;
		
		
		//ЗаписатьИмяОбъектаВОбъектСообщения(ИмяОбъекта,Сообщение,ТекущееСостояниеСообщения,ОписаниеОшибки);
		
		
		
	иначе
		Запрос=Новый Запрос();
		Запрос.Текст="ВЫБРАТЬ
		|	СП_СообщенияОбмена.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СП_СообщенияОбмена КАК СП_СообщенияОбмена
		|ГДЕ
		|	СП_СообщенияОбмена.ПометкаУдаления = ЛОЖЬ
		|	И СП_СообщенияОбмена.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.сп_ТипыСообщений.Входящее)
		|	И СП_СообщенияОбмена.ИмяОбъекта = """"";
		Результат=Запрос.Выполнить();
		Выборка=Результат.Выбрать();
		пока Выборка.Следующий() цикл
			МассивСообщений.Добавить(ВЫборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	для каждого ЭлементМассиваСообщений из МассивСообщений цикл 
		
		ОписаниеОшибки="";
		ИмяОбъекта="";
		СтрокаJSON=ЭлементМассиваСообщений.ТелоСообщения; 
		ТекущееСостояниеСообщения=Перечисления.СП_СостоянияСообщений.ПустаяСсылка();
		
		ИмяОбъекта=НайтиИмяОбъектаПоСТрокеJSON(СтрокаJSON,ОписаниеОшибки,ТекущееСостояниеСообщения);
		
		СообщениеОбъект=ЭлементМассиваСообщений.ПолучитьОбъект();
		ЗаписатьИмяОбъектаВОбъектСообщения(ИмяОбъекта,СообщениеОбъект,ТекущееСостояниеСообщения,ОписаниеОшибки);
		
	КонецЦикла;
	
КонецПроцедуры



Процедура ЗаписатьИмяОбъектаВОбъектСообщения(ИмяОбъекта,СообщениеОбъект,ТекущееСостояниеСообщения,ОписаниеОшибки)
	СообщениеОбъект.ТекстОшибки="";
	Если не значениеЗаполнено(СообщениеОбъект.ИмяОбъекта) тогда
		СообщениеОбъект.ИмяОбъекта=ИмяОбъекта;
	КонецЕсли;
	
	Если значениеЗаполнено(ОписаниеОшибки) тогда
		СообщениеОбъект.ТекстОшибки=ОписаниеОшибки;	
		СообщениеОбъект.СостояниеСообщения=ТекущееСостояниеСообщения;
	КонецЕсли;	                                                     
	
	СообщениеОбъект.Записать();		
	
	
КонецПроцедуры



Функция НайтиИмяОбъектаПоСТрокеJSON(СтрокаJSON, ОписаниеОшибки, ТекущееСостояниеСообщения)
	
	РаспознаннаяСтруктура=ПолучитьСтруктуруСообщенияJSON(СтрокаJSON,ОписаниеОшибки);
	Если не значениеЗаполнено(ОписаниеОшибки) тогда
		ТекущееСостояниеСообщения=Перечисления.СП_СостоянияСообщений.ОшибкаЧтенияJSON;
		Успех=ложь;
		ПодструктураЗаголовка=ПолучитьСтруктуруHeadРаспознаннойСтруктурыФайлаJSON(РаспознаннаяСтруктура,ОписаниеОшибки,Успех);
		Если Успех тогда
			ТекущееСостояниеСообщения=Перечисления.СП_СостоянияСообщений.ОшибкаОпределенияПравилСоответствия;
			Успех=ложь;
			МетаданныеВерхнегоУровня=ПолучитьМетаданныеВерхнегоУровня(ПодструктураЗаголовка,ОписаниеОшибки, Успех);
			Если Успех тогда 
				Успех=ложь;
				МетаданныеВторогоУровня=ПолучитьМетаданныеВторогоУровня(МетаданныеВерхнегоУровня,ПодструктураЗаголовка,ОписаниеОшибки,Успех);
				Если Успех тогда
					ИмяОбъекта=ПолучитьСтрокуПоискаНастроекПоМетаданным(МетаданныеВторогоУровня);
					ТекущееСостояниеСообщения=Перечисления.СП_СостоянияСообщений.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	возврат(ИмяОбъекта);
	
КонецФункции

#КонецОбласти



