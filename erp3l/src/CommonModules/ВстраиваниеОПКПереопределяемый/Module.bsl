
#Область СлужебныйПрограммныйИнтерфейс

#Область ОбменПолный

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередЗаписью(Источник, Отказ) Экспорт
	ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписью(Источник, Отказ);
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписьюДокумента(Источник, Отказ, РежимЗаписи, РежимПроведения);
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - КонстантаМенеджерЗначения - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередЗаписьюКонстанты(Источник, Отказ) Экспорт
	ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписьюКонстанты(Источник, Отказ);
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей.
// 
Процедура ОбменДаннымиПолныйПередЗаписьюРегистра(Источник, Отказ, Замещение) Экспорт
	ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередЗаписьюРегистра(Источник, Отказ, Замещение);
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика.
// 
Процедура ОбменДаннымиПолныйПередУдалением(Источник, Отказ) Экспорт
	ОбменДаннымиСобытияУТУП.ОбменДаннымиПолныйПередУдалением(Источник, Отказ);
КонецПроцедуры

#КонецОбласти 

Функция ПараметрСеанса_ЧислоДопАналитик() Экспорт
	Возврат ПараметрыСеанса.ЧислоДопАналитик;
КонецФункции

#Область ОМ_ОбщегоНазначенияПовтИспУХ
	
Функция КонстантаВалютаУправленческогоУчета() Экспорт
	Возврат ОбщегоНазначенияПовтИспУХ.ПолучитьВалютуУправленческогоУчета();
КонецФункции

Функция ПолучитьИмяРеквизитаСтатьяБюджета(ВидБюджета) Экспорт
	Возврат ОбщегоНазначенияПовтИспУХ.ПолучитьИмяРеквизитаСтатьяБюджета(ВидБюджета);
КонецФункции

#КонецОбласти 

#Область ОМ_ОбщегоНазначенияБПВызовСервераПовтИсп

Функция КонстантаВалютаРегламентированногоУчета() Экспорт
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

#КонецОбласти 

Функция КонстантаАвтоматическиАктуализироватьЗаявкиПоГрафикамДоговоров() Экспорт
	Возврат Константы.АвтоматическиАктуализироватьЗаявкиПоГрафикамДоговоров.Получить();
КонецФункции

Функция КонстантаИспользоватьЦентрализованноеУправлениеЗакупками() Экспорт
	Возврат Константы.ИспользоватьЦентрализованноеУправлениеЗакупками.Получить();
КонецФункции

Функция КонстантаАктуализироватьПоказателиБюджетированияРезервФакт() Экспорт
	Возврат Константы.АктуализироватьПоказателиБюджетированияРезервФакт.Получить();
КонецФункции

Функция КонстантаИспользоватьХарактеристикиНоменклатуры() Экспорт
	Возврат Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
КонецФункции

Функция ФункОпцияИспользоватьХарактеристикиНоменклатуры() Экспорт
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры");
КонецФункции

Функция ПолучитьВстречныйДоговор(Договор) Экспорт
	Возврат РегистрыСведений.СвязанныеДоговоры.ПолучитьВстречныйДоговор(Договор);
КонецФункции

Функция ПлатежиДоговораПоГрафику(Договор) Экспорт
	Если НЕ ЗначениеЗаполнено(Договор) Или ТипЗнч(Договор) <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат Ложь;
	КонецЕсли;
	СпособФормированияПлатежей = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "СпособФормированияПлатежей");
	Возврат СпособФормированияПлатежей = Перечисления.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей;
КонецФункции

Функция ОсновнаяФормаОплаты(ВидОперацииУХ) Экспорт
	Возврат ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяФормаОплаты(ВидОперацииУХ);
КонецФункции

#Область ОМ_КалендарныеГрафикиУХ
	
Функция ПолучитьДатуПоКалендарю(Знач ГрафикРаботы, Знач ДатаОт, Знач КоличествоДней, ВызыватьИсключение = Истина) Экспорт
	Возврат КалендарныеГрафикиУХ.ПолучитьДатуПоКалендарю(ГрафикРаботы, ДатаОт, КоличествоДней, ВызыватьИсключение);
КонецФункции

#КонецОбласти 

#Область ОМ_КалендарныеГрафикиУХВызовСервераПовтИсп

Функция ОсновнойПроизводственныйКалендарь() Экспорт
	Возврат КалендарныеГрафикиУХВызовСервераПовтИсп.ОсновнойПроизводственныйКалендарь()
КонецФункции
	
#КонецОбласти 

Функция ЭтоКонвертацияВалюты(ВидОперацииУХ) Экспорт
	Возврат ВидыОперацийУХВызовСервераПовтИсп.ЭтоКонвертацияВалюты(ВидОперацииУХ)
КонецФункции

Функция ПолучитьПроизводственныйКалендарьПоУмолчанию() Экспорт
	Возврат Константы.ПроизводственныйКалендарьПоУмолчанию.Получить();
КонецФункции

Функция ДокументУтвержден(Форма) Экспорт
	Возврат Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Утверждена;
КонецФункции

Функция ПараметрыЦентрализованныхЗакупок() Экспорт
	Результат = Новый Структура;
	Результат.Вставить("Использовать", Константы.ИспользоватьЦентрализованноеУправлениеЗакупками.Получить());
	Результат.Вставить("Периодичность", Константы.ПериодичностьЦентрализованныхЗакупок.Получить());
	Результат.Вставить("ИспользоватьХарактеристикиНоменклатуры", ПолучитьФункциональнуюОпцию("ИспользоватьХарактеристикиНоменклатуры"));
	Возврат Результат;
КонецФункции

// Функция - Возвращает Истина, если ДокументСсылка является одним из документов ВерсияСоглашения
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка	 - Ссылка на проверяемый докумен
// 
// Возвращаемое значение:
//  Булево - Истина, если ДокументСсылка является одним из документов ВерсияСоглашения. Иначе Ложь.
//
Функция ЭтоВерсияСоглашения(ДокументСсылка) Экспорт
	
	ТипОснования = ТипЗнч(ДокументСсылка);
	
	ОбеспечиваетсяДоговор = 
		ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияАккредитив")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияБанковскаяГарантия")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияВалютноПроцентныйСвоп")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияВалютныйСвоп")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияВалютныйФорвард")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияДепозит")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.ВерсияСоглашенияКредит")
	    ИЛИ ТипОснования = Тип("ДокументСсылка.УдалитьВерсияСоглашенияЛизинг");
	
КонецФункции

#Область ОМ_МодульУправленияОповещениямиУХ

Функция ОповеститьПользователей(ВидСобытия, ШаблонОповещения = Неопределено, ИсточникСсылка = Неопределено, СписокРассылки = Неопределено, ДопПараметры = Неопределено, ЗадачаВход = Неопределено, ЭтапПроцессаВход = Неопределено) Экспорт
	
	МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытия, ШаблонОповещения, ИсточникСсылка, СписокРассылки, ДопПараметры, ЗадачаВход, ЭтапПроцессаВход);
	
КонецФункции

Процедура ОповеститьПользователейОКорректировкеРазмещения(Источник, ДопПараметры) Экспорт
	СобытиеОповещения = Справочники.ВидыСобытийОповещений.КорректировкаРазмещения;
	МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения, , Источник, , ДопПараметры);
КонецПроцедуры

Процедура ОповеститьПользователейОбОтменеОбеспеченногоКорректировкойДокумента(ИсточникСсылка, СписокРассылки, ДопПараметры) Экспорт
	СобытиеОповещения = Справочники.ВидыСобытийОповещений.ОтменаДокументаОбеспеченногоКорректировкойЛимитов;
	МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения, , ИсточникСсылка, СписокРассылки, ДопПараметры);
КонецПроцедуры

Функция ОповеститьПользователейОбИсключенииИзРеестра(ШаблонОповещения = Неопределено, ИсточникСсылка = Неопределено, СписокРассылки = Неопределено, ДопПараметры = Неопределено, ЗадачаВход = Неопределено, ЭтапПроцессаВход = Неопределено) Экспорт
	СобытиеОповещения = Справочники.ВидыСобытийОповещений.ИсключениеИзРеестра;
	Возврат МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения, ШаблонОповещения, ИсточникСсылка, СписокРассылки, ДопПараметры, ЗадачаВход, ЭтапПроцессаВход);
КонецФункции

Функция ОповеститьПользователейОбИсключенииИзСтопЛиста(ШаблонОповещения = Неопределено, ИсточникСсылка = Неопределено, СписокРассылки = Неопределено, ДопПараметры = Неопределено, ЗадачаВход = Неопределено, ЭтапПроцессаВход = Неопределено) Экспорт
	СобытиеОповещения = Справочники.ВидыСобытийОповещений.ИсключениеИзСтопЛиста;
	Возврат МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеОповещения, ШаблонОповещения, ИсточникСсылка, СписокРассылки, ДопПараметры, ЗадачаВход, ЭтапПроцессаВход);
КонецФункции

#КонецОбласти 

#Область ОМ_ДвиженияБюджетированиеУХ

Функция ПолучитьАктуальныйКурсПоПараметрам(ПараметрыПлатежнойПозиции) Экспорт
	Возврат ДвиженияБюджетированиеУХ.ПолучитьАктуальныйКурсПоПараметрам(ПараметрыПлатежнойПозиции);
КонецФункции 

Процедура ОбновитьПоказателиПроектовПриПроведенииДокумента(ДокументОбъект) Экспорт
	ДвиженияБюджетированиеУХ.ОбновитьПоказателиПроектовПриПроведенииДокумента(ДокументОбъект);
КонецПроцедуры

Процедура ПроверитьНеобходимостьУстановкиСтатусаЧерновик(Объект, РежимЗаписи) Экспорт
	ДвиженияБюджетированиеУХ.ПроверитьНеобходимостьУстановкиСтатусаЧерновик(Объект, РежимЗаписи);	
КонецПроцедуры

Функция ПолучитьСтруктуруДанныхДляКорректировкиПланов(Ссылка) Экспорт
	ДвиженияБюджетированиеУХ.ПолучитьСтруктуруДанныхДляКорректировкиПланов(Ссылка);
КонецФункции

Процедура УстановитьСтатусЧерновикПриНеобходимости(Объект, ЭтоНовыйОбъектВход = Ложь) Экспорт
	ДвиженияБюджетированиеУХ.УстановитьСтатусЧерновикПриНеобходимости(Объект, ЭтоНовыйОбъектВход);
КонецПроцедуры

Процедура ОбновитьПоказателиОтчетовПоОперативнымДанным(ВидБюджета,ТаблицаПоказателей) Экспорт
	ДвиженияБюджетированиеУХ.ОбновитьПоказателиОтчетовПоОперативнымДанным(ВидБюджета, ТаблицаПоказателей);
КонецПроцедуры

Функция ВернутьТекущиеОстаткиПоДокументуПланирования(ДокументПланирования, ВидБюджета, ПриходРасход=Неопределено) Экспорт
	Возврат ДвиженияБюджетированиеУХ.ВернутьТекущиеОстаткиПоДокументуПланирования(ДокументПланирования, ВидБюджета, ПриходРасход);
КонецФункции

// Процедура - Обработать настраиваемые правила по документу источнику
//
// Параметры:
//  Источник - ДокументСсылка - Ссылка на документ-источник
//  Отказ	 - Булево - Истина, если требуется прервать выполненеи операции
//
Процедура ОбработатьНастраиваемыеПравила(Источник, Отказ) Экспорт
	ДвиженияБюджетированиеУХ.ОбработатьНастраиваемыеПравила(Источник, Отказ);
КонецПроцедуры

// Процедура - Обработать настраиваемые правила при отмене проведения
//
// Параметры:
//  Источник - ДокументСсылка - Ссылка на документ-источник
//  Отказ	 - Булево - Истина, если требуется прервать выполненеи операции
//
Процедура ОбработатьНастраиваемыеПравилаПриОтменеПроведения(Источник, Отказ) Экспорт
	ДвиженияБюджетированиеУХ.ОбработатьНастраиваемыеПравилаПриОтменеПроведения(Источник, Отказ);
КонецПроцедуры

#КонецОбласти

#Область ОМ_УправлениеОтчетамиУХ
	
Функция ПолучитьСледующийПериод(ИсходныйПериод,Направление) Экспорт
	Возврат УправлениеОтчетамиУХ.ПолучитьСледующийПериод(ИсходныйПериод,Направление);
КонецФункции

#КонецОбласти 

#Область ОМ_ОбщегоНазначенияУХ

Функция глОтносительныйПериодПоДате(ДатаНачала, Периодичность, Смещение, ТихийРежим = Ложь, Реструктурировать = Истина) Экспорт
	Возврат КэшируемыеПроцедурыУХ.глОтносительныйПериодПоДате(ДатаНачала, Периодичность, Смещение, ТихийРежим, Реструктурировать);
КонецФункции

Функция глОтносительныйПериод(локПериодОтчета, Смещение, ТихийРежим = Ложь, Реструктурировать = Истина) Экспорт
	Возврат ОбщегоНазначенияУХ.глОтносительныйПериод(локПериодОтчета, Смещение, ТихийРежим, Реструктурировать);
КонецФункции

Функция ДатаНачалаПериода(ДатаВПериоде,Периодичность) Экспорт
	Возврат КэшируемыеПроцедурыУХ.ДатаНачалаПериода(ДатаВПериоде, Периодичность);
КонецФункции

Функция НачалоДекады(ДатаНачала) Экспорт
	Возврат КэшируемыеПроцедурыУХ.НачалоДекады(ДатаНачала);
КонецФункции

Функция ВернутьОтносительнуюДату(ДатаНачала, Периодичность, Смещение) Экспорт
	Возврат КэшируемыеПроцедурыУХ.ВернутьОтносительнуюДату(ДатаНачала, Периодичность, Смещение);
КонецФункции

Функция НачалоНеделиПоМесяцу(ДатаНачала) Экспорт
	Возврат КэшируемыеПроцедурыУХ.НачалоНеделиПоМесяцу(ДатаНачала);
КонецФункции

Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт
	Возврат ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);
КонецФункции

Процедура ВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения = Неопределено, ПустыеКолонкиСоставногоТипа = Неопределено) Экспорт
	ОбщегоНазначенияУХ.ВыполнитьДвижениеПоРегистру(НаборДвижений, ВидДвижения, ПустыеКолонкиСоставногоТипа);
КонецПроцедуры

#КонецОбласти 

#Область ОМ_ДенежныеСредстваВстраиваниеУХ

Функция БанковскийСчетКонтрагентаВстречный(БанковскийСчетОрганизации) Экспорт
	Возврат ДенежныеСредстваВстраиваниеУХ.БанковскийСчетКонтрагента(БанковскийСчетОрганизации);
КонецФункции

Функция ПолучитьБанковскийСчетКассаОснованияОбязательства(ОснованиеОбязательства) Экспорт
	Возврат ДенежныеСредстваВстраиваниеУХ.ПолучитьБанковскийСчетКассаОснованияОбязательства(ОснованиеОбязательства);
КонецФункции

Функция ЕстьРасшифровкаПлатежаДокументаДДС(Ссылка, ВидОперации) Экспорт
	Возврат ДенежныеСредстваВстраиваниеУХ.ЕстьРасшифровкаПлатежаДокументаДДС(Ссылка, ВидОперации);
КонецФункции

#КонецОбласти 

#Область ОМ_УправлениеДенежнымиСредствамиУХ

Функция УстановитьСостояниеИсполненияДокументаСписок(Знач ТаблицаДокументовПланирования, Знач Состояние, Знач Период = Неопределено, Знач Автор = Неопределено, Документ = неопределено) Экспорт
	Возврат УправлениеДенежнымиСредствамиУХ.УстановитьСостояниеИсполненияДокументаСписок(ТаблицаДокументовПланирования, Состояние, Период, Автор, Документ);
КонецФункции

Функция КонтрагентОрганизации(Организация) Экспорт
	Возврат УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Организация);
КонецФункции

Функция ПолучитьБанковскийСчетПоУмолчанию(Владелец, Валюта, ПлатежныйИнструмент) Экспорт
	Возврат УправлениеДенежнымиСредствамиУХ.ПолучитьБанковскийСчетПоУмолчанию(Владелец, Валюта, ПлатежныйИнструмент);
КонецФункции

#КонецОбласти 

#Область ОМ_ОбщегоНазначенияБП

Функция СостояниеДокумента(Объект) Экспорт
	Возврат ОбщегоНазначенияБП.СостояниеДокумента(Объект);
КонецФункции
	
#КонецОбласти 

#Область ОМ_ДействияСогласованиеУХСервер

Процедура НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма, РодительскаяГруппаВход = неопределено) Экспорт
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма, РодительскаяГруппаВход);
КонецПроцедуры

// Процедура добавляет реквизиты в массив реквизитов, для дальнейшего их создания. Текст должен остаться таким во всех решениях
Процедура ДобавитьРеквизитыСогласования(Реквизиты) Экспорт
	
	МассивТиповСогласующий = Новый Массив;
	МассивТиповСогласующий.Добавить(Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов"));
	МассивТиповСогласующий.Добавить(Тип("СправочникСсылка.РолиКонтактныхЛиц"));
	МассивТиповСогласующий.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТиповСогласующий.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(150);
	ОписаниеТиповСогласующий = Новый ОписаниеТипов(МассивТиповСогласующий, , ПараметрыСтроки);
	
	//ОписаниеТиповСтатусОбъекта
	ОписаниеТиповСтатусОбъекта = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияСогласования");
	
	//ОписаниеСостоянияПроцесса
	ОписаниеСостоянияПроцесса = Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияПроцесса");
	
	//
	Реквизиты.Добавить(Новый РеквизитФормы("Согласующий", 		ОписаниеТиповСогласующий,	"", НСтр("ru = 'Согласующий'")));
	Реквизиты.Добавить(Новый РеквизитФормы("СтатусОбъекта", 	ОписаниеТиповСтатусОбъекта, "", НСтр("ru = 'Статус объекта'")));
	Реквизиты.Добавить(Новый РеквизитФормы("СостояниеЗаявки", 	ОписаниеСостоянияПроцесса,	""));
	
КонецПроцедуры

Процедура ОпределитьСостояниеЗаявки(Форма, ОбновитьОтветственныхВход = Ложь) Экспорт
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(Форма, ОбновитьОтветственныхВход);
КонецПроцедуры

#КонецОбласти 

#Область ОМ_УправлениеПроцессамиСогласованияУХ

Функция ПеревестиЗаявкуВПроизвольноеСостояние(Знач Заявка, Знач СостояниеЗаявки, Знач Период = Неопределено, 
		Знач Автор = Неопределено, Форма = Неопределено, ДокументПроцесса = Неопределено, ОтправлятьУведомлениеВход = Истина, 
		ПротоколОшибок = Неопределено, ИдентификаторФормыДляВыводаПротокола = Неопределено, ИдентификаторСообщенияВход = "", 
		ДополнительныеПараметры = Неопределено) Экспорт 
	
	Возврат УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(
		Заявка, СостояниеЗаявки, Период, Автор, Форма,
		ДокументПроцесса, ОтправлятьУведомлениеВход, ПротоколОшибок, ИдентификаторФормыДляВыводаПротокола, ИдентификаторСообщенияВход,
		ДополнительныеПараметры
	);
КонецФункции

Функция ВернутьСтатусОбъекта(ОбъектВход, ЗначениеПоУмолчаниюВход = Неопределено) Экспорт
	Возврат УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ОбъектВход, ЗначениеПоУмолчаниюВход);
КонецФункции

#КонецОбласти 

#Область ОМ_УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ

Функция ХарактеристикиИспользуются(Номенклатура) Экспорт
	Возврат УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ХарактеристикиИспользуются(Номенклатура);
КонецФункции
	
#КонецОбласти 

#Область ОМ_РаботаСКурсамиВалютКлиентСервер

Функция ПересчитатьПоКурсу(Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса) Экспорт
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма, ПараметрыТекущегоКурса, ПараметрыНовогоКурса)
КонецФункции

#КонецОбласти 

#Область ОМ_РаботаСКурсамиВалют

Функция ПолучитьКурсВалюты(Валюта, ДатаКурса) Экспорт
	Возврат РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаКурса);
КонецФункции

#КонецОбласти 

#Область ОМ_МодульУправленияПроцессамиУХ

Процедура ОтправитьНаСогласованиеПриПроведенииДокумента(ДокументОбъект, Отказ = Ложь) Экспорт
	МодульУправленияПроцессамиУХ.ОтправитьНаСогласованиеПриПроведенииДокумента(ДокументОбъект, Отказ);
КонецПроцедуры

Процедура ОтменитьСогласованиеПриОтменеПроведения(ОбъектСсылкаВход, Отказ = Ложь) Экспорт
	МодульУправленияПроцессамиУХ.ОтменитьСогласованиеПриОтменеПроведения(ОбъектСсылкаВход, Отказ);
КонецПроцедуры

#КонецОбласти 

#Область ОМ_МодульСогласованияДокументовУХ

Функция ЕстьСуперПользователь(Знач Организация) Экспорт
	Возврат МодульСогласованияДокументовУХ.ЕстьСуперПользователь(Организация);
КонецФункции

#КонецОбласти

#Область ОМ_ИдентификацияПродуктаУХКлиентСервер

Функция ЭтоЕХ() Экспорт
	Возврат ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ();
КонецФункции

Функция ЭтоУХ() Экспорт
	Возврат НЕ ОбщегоНазначения.ПодсистемаСуществует("ПереопределяемыеОбъектыУП");
КонецФункции
	
#КонецОбласти 

#Область ОМ_ПериодыУХ

Функция ПолучитьПериодПоСдвигу(ДатаНачала, ЗначениеСдвига, Периодичность) Экспорт
	Возврат ПериодыУХ.ПолучитьПериодПоСдвигу(ДатаНачала, ЗначениеСдвига, Периодичность);
КонецФункции

#КонецОбласти 

#Область ОМ_НоменклатураСервер

Процедура УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики, ПутьКПолюОтбора) Экспорт
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяПоляВводаХарактеристики, ПутьКПолюОтбора);
КонецПроцедуры

#КонецОбласти 

#Область ОМ_ЦентрализованныеЗакупкиВызовСервераУХ

Функция ПолучитьДанныеНаСервере(ДанныеДляПолучения) Экспорт
	Возврат ЦентрализованныеЗакупкиВызовСервераУХ.ПолучитьДанныеНаСервере(ДанныеДляПолучения);
КонецФункции

#КонецОбласти 

#Область ОМ_ЦентрализованныеЗакупкиКлиентСерверУХ

Функция ЧтоПолучитьНаСервере(Объект, ТекущаяСтрока, СтруктураДействий, ЗаменаИменРеквизитов=Неопределено) Экспорт
	Возврат ЦентрализованныеЗакупкиКлиентСерверУХ.ЧтоПолучитьНаСервере(Объект, ТекущаяСтрока, СтруктураДействий, ЗаменаИменРеквизитов);
КонецФункции

#КонецОбласти 

#Область ОМ_СводнаяТаблицаУХ

Функция ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики=Неопределено,ДополнительныеПараметры = Неопределено) Экспорт
	Возврат СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора, РаскрываемыеАналитики, ДополнительныеПараметры);
КонецФункции

#КонецОбласти 

#Область ОМ_РаботаСКурсамиВалютУХ

Функция ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента, ВалютаВзаиморасчетов, Период, КурсДокумента = Неопределено, КратностьДокумента = Неопределено) Экспорт
	Возврат РаботаСКурсамиВалютУХ.ПолучитьКоэффициентыПересчетаВалюты(ВалютаДокумента,ВалютаВзаиморасчетов, Период, КурсДокумента, КратностьДокумента);
КонецФункции

#КонецОбласти 

#Область ОМ_ВзаиморасчетыВстраиваниеУХ

Функция ОписаниеТиповОснованиеОбязательстваЗаявок(Данные) Экспорт
	Возврат ВзаиморасчетыВстраиваниеУХ.ОписаниеТиповОснованиеОбязательстваЗаявок(Данные)
КонецФункции

#КонецОбласти 

#Область ОМ_РаботаСКонтрагентамиУХ

Функция ЭтоВнутригрупповойКонтрагент(Контрагент) Экспорт
	Возврат РаботаСКонтрагентамиУХ.ЭтоВнутригрупповойКонтрагент(Контрагент);
КонецФункции
	
#КонецОбласти 

#Область ОМ_ДоговорыКонтрагентовВстраиваниеУХ

Функция ПолучитьСтавкуНДСПоДоговору(Знач ДоговорКонтрагента, Знач Период = Неопределено) Экспорт
	Возврат ДоговорыКонтрагентовВстраиваниеУХ.ПолучитьСтавкуНДСПоДоговору(ДоговорКонтрагента, Период);
КонецФункции

Процедура УстановитьНедоступныеВидыДоговоров(Исключения) Экспорт
	
	ИспользоватьДоговорыСКлиентами = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСКлиентами");
	
	Если Не ИспользоватьДоговорыСКлиентами Тогда
		
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем);
		
	КонецЕсли;
	
	Если НЕ ИспользоватьДоговорыСКлиентами Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриПродажах") Тогда
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СКомиссионером);
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СКомиссионеромНаЗакупку);
	КонецЕсли;
	
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоИзДавальческогоСырья") Тогда
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СДавальцем);
	КонецЕсли;
	
	ИспользоватьДоговорыСПоставщиками = ПолучитьФункциональнуюОпцию("ИспользоватьДоговорыСПоставщиками");
	
	Если Не ИспользоватьДоговорыСПоставщиками Тогда
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоставщиком);
	КонецЕсли;
	
	Если Не ИспользоватьДоговорыСПоставщиками Или Не ПолучитьФункциональнуюОпцию("ИспользоватьКомиссиюПриЗакупках") Тогда
		
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СКомитентом);
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СКомитентомНаЗакупку);
		
	КонецЕсли;
	
	Если Не ИспользоватьДоговорыСПоставщиками Или Не ПолучитьФункциональнуюОпцию("ИспользоватьИмпортныеЗакупки") Тогда
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.Импорт);
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.ВвозИзЕАЭС);
	КонецЕсли;
		
	Если Не ИспользоватьДоговорыСПоставщиками Или Не  ПолучитьФункциональнуюОпцию("ИспользоватьОтветственноеХранениеВПроцессеЗакупки") Тогда
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПоклажедателем);
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьПроизводствоНаСтороне") Тогда
		Исключения.Добавить(Справочники.ВидыДоговоровКонтрагентовУХ.СПереработчиком);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти 

#Область ОМ_РаботаСДоговорамиКонтрагентовУХ

Функция НовыйОписаниеОперацииГрафика() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭлементСтруктурыЗадолженности");
	Результат.Вставить("ВидБюджета");
	Результат.Вставить("ОперацияГрафика");
	Результат.Вставить("НаправлениеДвижения");
	Результат.Вставить("ВидОперацииУХ");
	Результат.Вставить("СтатьяБюджета");
	Результат.Вставить("КолонкаСекции");
	
	Для Сч = 1 по АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Результат.Вставить("Аналитика" + Сч);
		Результат.Вставить("ВидАналитики" + Сч);
		Результат.Вставить("ВидАналитики" + Сч + "Наименование");
		Результат.Вставить("ВидАналитики" + Сч + "ТипЗначения");
		Результат.Вставить("ВидАналитики" + Сч + "ТипыВладельца");
		
	КонецЦикла;
	
	Результат.Вставить("ЦФО");
	Результат.Вставить("Проект");
	Результат.Вставить("Валюта");
	Результат.Вставить("СчетОрганизации");
	Результат.Вставить("СчетКонтрагента");
	Результат.Вставить("ИспользуетсяПланирование");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОМ_УправлениеДоговорамиУХВызовСервераПовтИсп

Функция ПолучитьОперацииГрафикаПоВидуДоговора(ВидДоговораУХ) Экспорт
	Возврат УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьОперацииГрафикаПоВидуДоговора(ВидДоговораУХ);
КонецФункции
	
#КонецОбласти 

Функция ДоговорСПорядкомРасчетов(Договор) Экспорт
	
	Возврат ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями");
	
КонецФункции

Функция ВестиРасчетыПоЗаказам(Договор) Экспорт
	
	Если НЕ ДоговорСПорядкомРасчетов(Договор) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов");
	Возврат ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным 
		ИЛИ ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказам;
	
КонецФункции

#Область ОМ_ЗаявкиНаОперации

Функция ПолучитьПредупрежденияПоЗаявке(Объект) Экспорт
	Возврат ЗаявкиНаОперации.ПолучитьПредупрежденияПоЗаявке(Объект);
КонецФункции

Функция ЭтоЗаявкаНаОперацию(Знач ОбъектИлиТип) Экспорт
	Возврат ЗаявкиНаОперации.ЭтоЗаявкаНаОперацию(ОбъектИлиТип);
КонецФункции

#КонецОбласти 

#Область ОМ_ДоговорыСКонтрагентами

Функция ПолучитьРеквизитыДоговора(ДоговорСсылка) экспорт
	Возврат ДоговорыСКонтрагентами.ПолучитьРеквизитыДоговора(ДоговорСсылка);
КонецФункции

Функция ПараметрыРасчетовДоговоров(Договоры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокДоговоров", Договоры);
	Запрос.УстановитьПараметр("Рубли", КонстантаВалютаРегламентированногоУчета());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	ДоговорыКонтрагентов.ОсновнаяВалютаПлатежей КАК ВалютаПлатежа,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВалютаВзаиморасчетов <> ДоговорыКонтрагентов.ОсновнаяВалютаПлатежей
	|				И ДоговорыКонтрагентов.ОсновнаяВалютаПлатежей = ВалютаРегламентированногоУчета.Значение
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницах,
	|	ВЫБОР
	|		КОГДА ДоговорыКонтрагентов.ВалютаВзаиморасчетов <> ДоговорыКонтрагентов.ОсновнаяВалютаПлатежей
	|				И ДоговорыКонтрагентов.ОсновнаяВалютаПлатежей <> ВалютаРегламентированногоУчета.Значение
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетыВУсловныхЕдиницахВалюта
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов,
	|	Константа.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&СписокДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКредитовИДепозитов.Ссылка,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов,
	|	ДоговорыКредитовИДепозитов.ВалютаВзаиморасчетов,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|ГДЕ
	|	ДоговорыКредитовИДепозитов.Ссылка В(&СписокДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыМеждуОрганизациями.Ссылка,
	|	ДоговорыМеждуОрганизациями.ВалютаВзаиморасчетов,
	|	ДоговорыМеждуОрганизациями.ВалютаВзаиморасчетов,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями КАК ДоговорыМеждуОрганизациями
	|ГДЕ
	|	ДоговорыМеждуОрганизациями.Ссылка В(&СписокДоговоров)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыАренды.Ссылка,
	|	ДоговорыАренды.ВалютаВзаиморасчетов,
	|	ДоговорыАренды.ВалютаВзаиморасчетов,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|ГДЕ
	|	ДоговорыАренды.Ссылка В(&СписокДоговоров)";
	Результат = Запрос.Выполнить();
	
	СвойстваДоговоров = Новый Соответствие;
	
	Реквизиты = "ВалютаВзаиморасчетов, ВалютаПлатежа, РасчетыВУсловныхЕдиницах, РасчетыВУсловныхЕдиницахВалюта";
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Данные = Новый Структура(Реквизиты);
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		СвойстваДоговоров.Вставить(Выборка.Ссылка, Данные);
	КонецЦикла;
	
	Возврат СвойстваДоговоров;
	
КонецФункции

// Функция возвращает по договору: СтатьяБюджета, Аналитика1..6, ЦФО, Проект, ВалютаВзаиморасчетов, ВалютаОплаты, РасчетыВУЕ, РасчетыВУЕВалюта
Функция ПолучитьПараметрыПланированияПоДоговору(Договор, ЭтоБДДС) Экспорт
	
	ТипДоговора = ТипЗнч(Договор);
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("ВалютаВзаиморасчетов");
	ИменаРеквизитов.Вставить("ВалютаПлатежа");
	Если ТипДоговора = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ИменаРеквизитов.ВалютаПлатежа = "ОсновнаяВалютаПлатежей";
		ИменаРеквизитов.Вставить("ЦФО", "ОсновнойЦФО");
		ИменаРеквизитов.Вставить("Проект", "ОсновнойПроект");
		Если ЭтоБДДС Тогда
			ИменаРеквизитов.Вставить("СтатьяБюджета", "СтатьяДвиженияДенежныхСредств");
			ИменаРеквизитов.Вставить("Аналитика1", "АналитикаБДДС1");
			ИменаРеквизитов.Вставить("Аналитика2", "АналитикаБДДС2");
			ИменаРеквизитов.Вставить("Аналитика3", "АналитикаБДДС3");
			ИменаРеквизитов.Вставить("Аналитика4", "АналитикаБДДС4");
			ИменаРеквизитов.Вставить("Аналитика5", "АналитикаБДДС5");
			ИменаРеквизитов.Вставить("Аналитика6", "АналитикаБДДС6");
		Иначе
			ИменаРеквизитов.Вставить("СтатьяБюджета", "ОсновнаяСтатьяИсполнение");
			ИменаРеквизитов.Вставить("Аналитика1", "АналитикаИсполнение1");
			ИменаРеквизитов.Вставить("Аналитика2", "АналитикаИсполнение2");
			ИменаРеквизитов.Вставить("Аналитика3", "АналитикаИсполнение3");
			ИменаРеквизитов.Вставить("Аналитика4", "АналитикаИсполнение4");
			ИменаРеквизитов.Вставить("Аналитика5", "АналитикаИсполнение5");
			ИменаРеквизитов.Вставить("Аналитика6", "АналитикаИсполнение6");
		КонецЕсли;
	Иначе
		ИменаРеквизитов.ВалютаПлатежа = "ВалютаВзаиморасчетов";
	КонецЕсли;
	
	СвойстваДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаРеквизитов);
	
	Рубли = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	СвойстваДоговора.Вставить("РасчетыВУсловныхЕдиницах", 
		СвойстваДоговора.ВалютаВзаиморасчетов <> Рубли И СвойстваДоговора.ВалютаПлатежа = Рубли);
	СвойстваДоговора.Вставить("РасчетыВУсловныхЕдиницахВалюта", 
		СвойстваДоговора.ВалютаВзаиморасчетов <> Рубли И СвойстваДоговора.ВалютаПлатежа <> Рубли
		И СвойстваДоговора.ВалютаВзаиморасчетов <> СвойстваДоговора.ВалютаПлатежа);
		
	Если ТипДоговора <> Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		СвойстваДоговора.Вставить("ЦФО",			КэшируемыеПроцедурыОПК.ПустойЦФО());
		СвойстваДоговора.Вставить("Проект",			КэшируемыеПроцедурыОПК.ПустойПроект());
		СвойстваДоговора.Вставить("СтатьяБюджета",	неопределено);
		СвойстваДоговора.Вставить("Аналитика1", 	неопределено);
		СвойстваДоговора.Вставить("Аналитика2", 	неопределено);
		СвойстваДоговора.Вставить("Аналитика3", 	неопределено);
		СвойстваДоговора.Вставить("Аналитика4", 	неопределено);
		СвойстваДоговора.Вставить("Аналитика5", 	неопределено);
		СвойстваДоговора.Вставить("Аналитика6", 	неопределено);
	КонецЕсли;
		
	Возврат СвойстваДоговора;
	
КонецФункции

#КонецОбласти 

#Область ОМ_УправлениеФормойУХ

Процедура УстановитьПредставлениеОтбора(Форма, Знач ЭлементДекорация = Неопределено, ОбъектМетаданных = Неопределено, Знач ПриоритетныеПоля = Неопределено, Знач НеприоритетныеПоля = Неопределено, СинонимыПолей = Неопределено) Экспорт
	УправлениеФормойУХ.УстановитьПредставлениеОтбора(Форма, ЭлементДекорация, ОбъектМетаданных, ПриоритетныеПоля, НеприоритетныеПоля, СинонимыПолей);
КонецПроцедуры

#КонецОбласти 

#Область ОМ_ОбщегоНазначенияУХ

Процедура СообщитьОбОшибке(Знач ТекстСообщения, Отказ = Ложь, Заголовок = "", Знач Статус = Неопределено, ИдентификаторФормы = Неопределено, ОбъектДанных = Неопределено) Экспорт
	ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок, Статус, ИдентификаторФормы, ОбъектДанных);
КонецПроцедуры

#КонецОбласти

#Область ОМ_УправлениеСвойствамиОПК

// Получает описание предопределенных наборов свойств.
//
// Параметры:
//  Наборы - ДеревоЗначений - с колонками:
//     * Имя           - Строка - Имя набора свойств. Формируется из полного имени объекта
//                       метаданных заменой символа "." на "_".
//                       Например, "Документ_ЗаказПокупателя".
//     * Идентификатор - УникальныйИдентификатор - Идентификатор ссылки предопределенного элемента.
//     * Используется  - Неопределено, Булево - Признак того, что набор свойств используется.
//                       Например, можно использовать для скрытия набора по функциональным опциям.
//                       Значение по умолчанию - Неопределено, соответствует значению Истина.
//     * ЭтоГруппа     - Булево - Истина, если набор свойств является группой.
//
Процедура ПриПолученииПредопределенныхНаборовСвойств(Наборы) Экспорт

КонецПроцедуры

#КонецОбласти 

#КонецОбласти
