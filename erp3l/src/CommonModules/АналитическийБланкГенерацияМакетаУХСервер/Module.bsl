
#Область СервисныеФункцииГенерацииМакетов

Функция ПолучитьТопологиюОбластейРаскрытия(ПолеТабличногоДокументаМакет) Экспорт
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("Имя");
	ТаблицаКолонок.Колонки.Добавить("Лево");
	ТаблицаКолонок.Колонки.Добавить("Право");
	
	ТаблицаСтрок = Новый ТаблицаЗначений;
	ТаблицаСтрок.Колонки.Добавить("Имя");
	ТаблицаСтрок.Колонки.Добавить("Верх");
	ТаблицаСтрок.Колонки.Добавить("Низ");
	
	Для Каждого СтрОбласть Из ПолеТабличногоДокументаМакет.Области Цикл		
		Если СтрОбласть.Верх = 0 Тогда //Колонки	
			НоваяСтрокаОбласть = ТаблицаКолонок.Добавить();
			НоваяСтрокаОбласть.Имя = СтрОбласть.Имя;
			НоваяСтрокаОбласть.Лево = СтрОбласть.Лево;
			НоваяСтрокаОбласть.Право = СтрОбласть.Право;
		КонецЕсли;
		
		Если СтрОбласть.Лево = 0 Тогда //Строки	
			НоваяСтрокаОбласть = ТаблицаСтрок.Добавить();
			НоваяСтрокаОбласть.Имя = СтрОбласть.Имя;
			НоваяСтрокаОбласть.Верх = СтрОбласть.Верх;
			НоваяСтрокаОбласть.Низ = СтрОбласть.Низ;
		КонецЕсли;		
	КонецЦикла;
	
	МассивКолонок = ТаблицаКолонок.ВыгрузитьКолонку("Имя");
	Если ПолеТабличногоДокументаМакет.ШиринаТаблицы = 0 Тогда
		КолонкиТабличногоПоля = Новый Массив();
	Иначе	
		КолонкиТабличногоПоля = Новый Массив(ПолеТабличногоДокументаМакет.ШиринаТаблицы);	
	КонецЕсли;
	
	//Инициализация
	Для Инд = 0 По ПолеТабличногоДокументаМакет.ШиринаТаблицы - 1 Цикл
		КолонкиТабличногоПоля[Инд] = "";
	КонецЦикла;
	
	//Заполнить индексы областей
	Для Инд = 0 По ТаблицаКолонок.Количество() - 1 Цикл
		ОписаниеОбласти = ТаблицаКолонок[Инд];
		Для Инд2 = ОписаниеОбласти.Лево По ОписаниеОбласти.Право Цикл
			КолонкиТабличногоПоля[Инд2 - 1] = КолонкиТабличногоПоля[Инд2 - 1] + ";" + Строка(Инд);
		КонецЦикла;
	КонецЦикла;
	
	Для Инд = 0 По ПолеТабличногоДокументаМакет.ШиринаТаблицы - 1 Цикл
		КолонкиТабличногоПоля[Инд] = Сред(КолонкиТабличногоПоля[Инд], 2);
	КонецЦикла;
	
	МассивСтрок = ТаблицаСтрок.ВыгрузитьКолонку("Имя");
	Если ПолеТабличногоДокументаМакет.ШиринаТаблицы = 0 Тогда
		СтрокиТабличногоПоля = Новый Массив();
	Иначе	
		СтрокиТабличногоПоля = Новый Массив(ПолеТабличногоДокументаМакет.ВысотаТаблицы);	
	КонецЕсли;
	
	//Инициализация
	Для Инд = 0 По ПолеТабличногоДокументаМакет.ВысотаТаблицы - 1 Цикл
		СтрокиТабличногоПоля[Инд] = "";
	КонецЦикла;
	
	//Заполнить индексы областей
	Для Инд = 0 По ТаблицаСтрок.Количество() - 1 Цикл
		ОписаниеОбласти = ТаблицаСтрок[Инд];
		Для Инд2 = ОписаниеОбласти.Верх По ОписаниеОбласти.Низ Цикл
			СтрокиТабличногоПоля[Инд2 - 1] = СтрокиТабличногоПоля[Инд2 - 1] + ";" + Строка(Инд);
		КонецЦикла;
	КонецЦикла;
	
	Для Инд = 0 По ПолеТабличногоДокументаМакет.ВысотаТаблицы - 1 Цикл
		СтрокиТабличногоПоля[Инд] = Сред(СтрокиТабличногоПоля[Инд], 2);
	КонецЦикла;
	
	Возврат Новый Структура("КолонкиТабличногоПоля, МассивКолонок, СтрокиТабличногоПоля, МассивСтрок", КолонкиТабличногоПоля, МассивКолонок, СтрокиТабличногоПоля, МассивСтрок);
		
КонецФункции

Функция ДобавитьПоказательВГруппировки(ПолеТабличногоДокументаМакет,тСвойстваПоказателя,ТЗРасшифровкаОтборовГруппРаскрытия,ОбластьИмя,ОбъектАБ,ТолькоСинтетика,МаксУид,СтруктураДопПараметров = Неопределено) Экспорт
		
	СтруктураОбластейРаскрытия  = Новый Структура;
	СтрокаГруппировок = "";
	
	Если НЕ СтруктураДопПараметров = Неопределено И СтруктураДопПараметров.Свойство("тСоставОбластейРаскрытия") Тогда
		ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверПоКэшу(СтруктураДопПараметров.тСоставОбластейРаскрытия,ОбластьИмя,СтруктураОбластейРаскрытия);
	ИначеЕсли НЕ СтруктураДопПараметров = Неопределено И СтруктураДопПараметров.Свойство("КолонкиТабличногоПоля") Тогда	
		ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверТопология(ПолеТабличногоДокументаМакет, ОбластьИмя, СтруктураОбластейРаскрытия, СтруктураДопПараметров);
	Иначе	
		ПроверитьВхождениеЯчейкиВОбластьРаскрытияСервер(ПолеТабличногоДокументаМакет,ОбластьИмя,СтруктураОбластейРаскрытия,ОбъектАБ);
	КонецЕсли;
	
	Если СтруктураОбластейРаскрытия.Количество() = 0 Тогда
		ТолькоСинтетика = Истина;
	Иначе	
		ТолькоСинтетика = Ложь;
	КонецЕсли;	
	
	КоличествоОтборовЯчейки = ТЗРасшифровкаОтборовГруппРаскрытия.Количество();
	
	//подменяем аналитики показателя - аналитиками раскрытия
	Для Каждого СтрГруппыРаскрытия Из СтруктураОбластейРаскрытия Цикл		
		
		ОтборыГруппыРаскрытия = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",СтрГруппыРаскрытия.Ключ));
		Для Каждого ОтборГруппыРаскрытия Из ОтборыГруппыРаскрытия Цикл
			
			Если КоличествоОтборовЯчейки = 0 Тогда 		
				тОтбор = ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборГруппыРаскрытия.ПолеКод));
				Если тОтбор.Количество() = 0 Тогда
					НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.Добавить();
				Иначе	 
					НстрОтборов =  тОтбор[0];
				КонецЕсли;	 
				ЗаполнитьЗначенияСвойств(НстрОтборов,ОтборГруппыРаскрытия);	 		
			Иначе
				Если ОтборГруппыРаскрытия.ПолеКод = "ПериодС" Тогда 
					Если ОтборГруппыРаскрытия.Отбор = "Период начала со сдвигом" ИЛИ ОтборГруппыРаскрытия.Отбор = "Период окончания со сдвигом" Тогда
						тОтбор =      ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборГруппыРаскрытия.ПолеКод))[0];
						тОтбор.Отбор = ОтборГруппыРаскрытия.Отбор;
						СдвигЯчейки = Число( ?(тОтбор.ЗначениеОтбора = "",0,тОтбор.ЗначениеОтбора) );
						СдвигМакета = Число(ОтборГруппыРаскрытия.ЗначениеОтбора);
						тОтбор.ЗначениеОтбора = Строка(СдвигМакета + СдвигЯчейки);	
						тОтбор.ЗначениеОтбораСтрока = ЗначениеВстрокуВнутр(Строка(СдвигМакета + СдвигЯчейки));
					КонецЕсли;
					
				ИначеЕсли ОтборГруппыРаскрытия.ПолеКод = "ПериодПо" Тогда
					Если ОтборГруппыРаскрытия.Отбор = "Период начала со сдвигом" ИЛИ ОтборГруппыРаскрытия.Отбор = "Период окончания со сдвигом" Тогда
						тОтбор =      ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборГруппыРаскрытия.ПолеКод))[0];
						тОтбор.Отбор = ОтборГруппыРаскрытия.Отбор;
						СдвигЯчейки = Число( ?(тОтбор.ЗначениеОтбора = "",0,тОтбор.ЗначениеОтбора) );
						СдвигМакета = Число(ОтборГруппыРаскрытия.ЗначениеОтбора);
						тОтбор.ЗначениеОтбора = Строка(СдвигМакета + СдвигЯчейки);	
						тОтбор.ЗначениеОтбораСтрока = ЗначениеВстрокуВнутр(Строка(СдвигМакета + СдвигЯчейки)); 
					КонецЕсли;
					
				Иначе	
					тОтбор = ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборГруппыРаскрытия.ПолеКод));
					Если тОтбор.Количество() = 0 Тогда
						НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.Добавить();
					Иначе	 
						НстрОтборов =  тОтбор[0];
					КонецЕсли;	 
					ЗаполнитьЗначенияСвойств(НстрОтборов,ОтборГруппыРаскрытия);
					
				КонецЕсли;
			КонецЕсли;			
		КонецЦикла;				
	КонецЦикла;	

	Если ТЗРасшифровкаОтборовГруппРаскрытия.Количество() = 0 Тогда
		тХэшГруппыОтборов = "";	
	Иначе
		тХэшГруппыОтборов = Обработки.АналитическийБланк.ПолучитьХэшПоОтборам(ТЗРасшифровкаОтборовГруппРаскрытия);
	КонецЕсли;
		
	ИндексРегистра             =  ПолучитьИндексПоказателя(тСвойстваПоказателя);
	СтруктураПоискаПоУмолчанию = Новый Структура("ИндексРегистра,ХэшГруппыОтборов,ЭтоЧисло",ИндексРегистра,тХэшГруппыОтборов,тСвойстваПоказателя.ТипЗначенияЧисло);
	
	НайденнаяСтрокаКэша = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(СтруктураПоискаПоУмолчанию);
	
	Если НайденнаяСтрокаКэша.Количество() = 0 Тогда
		нСтр = ОбъектАБ.КэшГруппОтборовПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,СтруктураПоискаПоУмолчанию);
		
		МаксУид= МаксУид+1;
		нСтр.УидГруппыОтборов 		= МаксУид;	   
		Нстр.УидГруппыОтборовЧисло  = МаксУид;
		
		Если тХэшГруппыОтборов = "" Тогда
			Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ОбъектАБ.РасшифровкаГруппОтборов,нСтр.УидГруппыОтборов);	   
		Иначе
			Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ОбъектАБ.РасшифровкаГруппОтборов,нСтр.УидГруппыОтборов);
			Для Каждого ОтборГруппыРаскрытия Из ТЗРасшифровкаОтборовГруппРаскрытия Цикл	
				НстрОтборов_                     =  ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("ПолеКод,УидГруппыОтборов",ОтборГруппыРаскрытия.ПолеКод,нСтр.УидГруппыОтборов));
				Если НстрОтборов_.Количество()  =1 Тогда
					НстрОтборов = НстрОтборов_[0];
				Иначе		
					НстрОтборов 					=  ОбъектАБ.РасшифровкаГруппОтборов.Добавить();
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(НстрОтборов,ОтборГруппыРаскрытия);	 
				НстрОтборов.УидГруппыОтборов	 =  нСтр.УидГруппыОтборов;	
			КонецЦикла;		
		КонецЕсли;	
	Иначе	  
		нСтр = НайденнаяСтрокаКэша[0];	   
	КонецЕсли; 
	
	Возврат нСтр.УидГруппыОтборов;
	
КонецФункции	

Функция ПодготовитьТаблицуОтборовПоказателей(ПолеТабличногоДокументаМакет,СтруктураПоказателей,ОбъектАБ,СтруктураДопПараметров=Неопределено) Экспорт
	
	ОтображатьСуммуВДопВалюте = Ложь;
	
	ТзВыбранныхГрупп = ОбъектАБ.КэшГруппОтборовПоказателей.Выгрузить();
	ТзВыбранныхГрупп.Очистить();		
	
	ТЗРасшифровкаОтборов = ОбъектАБ.РасшифровкаГруппОтборов.Выгрузить();
	ТЗРасшифровкаОтборов.Очистить();
	
	ТЗРасшифровкаОтборовГруппРаскрытия = ТЗРасшифровкаОтборов.СкопироватьКолонки();
	
	Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ТЗРасшифровкаОтборов,"");	
	
	СтруктураОбластейРаскрытия     	= Новый Структура;
	СтруктураЗначенийПоказателей 	= Новый Структура;
	СтруктураТопологии 				= ПолучитьТопологиюОбластейРаскрытия(ПолеТабличногоДокументаМакет);

	Для Каждого Показатель Из СтруктураПоказателей Цикл	
			
		ТекПоказательОбласть = ПолеТабличногоДокументаМакет.Область(Показатель.Значение);  //Вычисляем свойства показателей по именам областей бланка
			
		Если НЕ ТекПоказательОбласть.Расшифровка = Неопределено И  ТекПоказательОбласть.Расшифровка.Свойство("Ссылка") И НЕ ЗначениеЗАполнено(СтруктураДопПараметров) Тогда
			
			СтруктураЗначенийПоказателей.Вставить(Показатель.Ключ,ТекПоказательОбласть.Расшифровка.Ссылка);

			Если СтруктураПоказателей.Количество() = 1 Тогда
				  ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборов);
			КонецЕсли;	
			
			Если  ТекПоказательОбласть.Расшифровка.Свойство("РасшифровкаГруппОтборов") Тогда	
				
				РасшифровкаГруппОтборов = ТекПоказательОбласть.Расшифровка.РасшифровкаГруппОтборов; 
				
				Для Каждого СтрОтбор Из РасшифровкаГруппОтборов Цикл		 
					
					НстрОтборов =  ТЗРасшифровкаОтборов.НайтиСтроки(Новый Структура("ПолеКод",СтрОтбор.Ключ));
					
					Если НстрОтборов.Количество() = 1 Тогда
						СтрОтборСвойства = ПрочитатьСтрокуОтборов(СтрОтбор);
						ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;	
			
			Если ТекПоказательОбласть.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
				ОтображатьСуммуВДопВалюте = ТекПоказательОбласть.Расшифровка.ОтображатьСуммуВДопВалюте;
			КонецЕсли;			
			
            ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверТопология(ПолеТабличногоДокументаМакет, Показатель.Значение, СтруктураОбластейРаскрытия, СтруктураТопологии);
			
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураДопПараметров) И СтруктураДопПараметров.Свойство("Показатель") Тогда //Доп. отборы одного операнда		
			
			СтруктураЗначенийПоказателей.Вставить("Операнд",СтруктураДопПараметров.Показатель);
			
			Если СтруктураПоказателей.Количество() = 1 Тогда
				  ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборов);
			КонецЕсли;	
			
			тРасшифровкаГруппОтборов = ПолучитьИзВременногоХранилища(СтруктураДопПараметров.ТекущиеОтборыОперандовАдрес);
			РасшифровкаГруппОтборов = тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("ИмяОперанда",СтруктураДопПараметров.ИмяВФормуле));
			
			Для Каждого СтрОтбор Из РасшифровкаГруппОтборов Цикл		 
				
				НстрОтборов =  ТЗРасшифровкаОтборов.НайтиСтроки(Новый Структура("ПолеКод",СтрОтбор.Ключ));
				
				Если НстрОтборов.Количество() = 1 Тогда
					СтрОтборСвойства = ПрочитатьСтрокуОтборов(СтрОтбор);
					ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
				КонецЕсли;
			КонецЦикла;
				
			ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверТопология(ПолеТабличногоДокументаМакет, Показатель.Значение, СтруктураОбластейРаскрытия, СтруктураТопологии);
				
			
		ИначеЕсли Лев(Показатель.Значение,8) = "Формула_" Тогда //Доп. отборы множества операндов формул		
			
			ТекПоказательОбласть = ПолеТабличногоДокументаМакет.Область(Показатель.Значение); 
			
			ОперандыФормулы = ЗначениеИзСтрокиВнутр(ТекПоказательОбласть.Расшифровка.РасшифровкаФормулы);
			
			ИндексОперанда = 1;
			
			Для Каждого СтрОперанд Из ОперандыФормулы Цикл
				
				СтруктураЗначенийПоказателей.Вставить("Операнд"+ИндексОперанда,СтрОперанд.Показатель);
				
				Если СтруктураПоказателей.Количество() = 1 Тогда
					ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборов);
				КонецЕсли;	
				
				Если ТекПоказательОбласть.Расшифровка.Свойство("РасшифровкаГруппОтборовОперандов") Тогда
					тРасшифровкаГруппОтборов 	= ЗначениеИзСтрокиВнутр(ТекПоказательОбласть.Расшифровка.РасшифровкаГруппОтборовОперандов);
					РасшифровкаГруппОтборов		= тРасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("ИмяОперанда",СтрОперанд.ИмяВФормуле));
					
					Для Каждого СтрОтбор Из РасшифровкаГруппОтборов Цикл		 
						
						НстрОтборов =  ТЗРасшифровкаОтборов.НайтиСтроки(Новый Структура("ПолеКод",СтрОтбор.Ключ));
						
						Если НстрОтборов.Количество() = 1 Тогда
							СтрОтборСвойства = ПрочитатьСтрокуОтборов(СтрОтбор);
							ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ИндексОперанда = ИндексОперанда+1;
				
			КонецЦикла;
			
			ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверТопология(ПолеТабличногоДокументаМакет, Показатель.Значение, СтруктураОбластейРаскрытия, СтруктураТопологии);
		
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого СтрГруппыРаскрытия Из СтруктураОбластейРаскрытия Цикл		
		тОбластьРаскрытия   = ПолеТабличногоДокументаМакет.Область(СтрГруппыРаскрытия.Ключ);
		Если тОбластьРаскрытия.Лево =0 Тогда
			тРасшифровкаОбласти = ПолеТабличногоДокументаМакет.Область(тОбластьРаскрытия.Верх,1,тОбластьРаскрытия.Верх,1).Расшифровка;		
		Иначе	
			тРасшифровкаОбласти = ПолеТабличногоДокументаМакет.Область(1,тОбластьРаскрытия.Лево,1,тОбластьРаскрытия.Лево).Расшифровка;		
		КонецЕсли;	
		
		Если ТипЗнч(тРасшифровкаОбласти) = Тип("Структура") Тогда
			 ОтборыГруппыРаскрытия = ЗначениеИзСтрокиВнутр(тРасшифровкаОбласти.ПараметрыОтбора);
			 	Для Каждого ОтборГруппыРаскрытия Из ОтборыГруппыРаскрытия Цикл
				НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(НстрОтборов,ОтборГруппыРаскрытия);	 
			КонецЦикла;		
		КонецЕсли;	
	КонецЦикла;	
		
	Если СтруктураПоказателей.Количество() > 1 Тогда 
		ТЗРасшифровкаОтборов.Очистить();
		РасшифровкаГруппОтборов  = ТЗРасшифровкаОтборов.СкопироватьКолонки();
		Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ТЗРасшифровкаОтборов,"");			
	КонецЕсли;	
	
	ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборов);

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТЗРасшифровкаОтборов",ПоместитьВоВременноеХранилище(ТЗРасшифровкаОтборов,Новый УникальныйИдентификатор()));
    СтруктураВозврата.Вставить("ТЗРасшифровкаОтборовГруппРаскрытия",ПоместитьВоВременноеХранилище(ТЗРасшифровкаОтборовГруппРаскрытия,Новый УникальныйИдентификатор()));
	СтруктураВозврата.Вставить("ОтображатьСуммуВДопВалюте",ОтображатьСуммуВДопВалюте);
	
	Возврат СтруктураВозврата;
		
КонецФункции	

Процедура ПроверитьВхождениеЯчейкиВОбластьРаскрытияСервер(ПолеТабличногоДокументаМакет,ИмяЯчейки,СтруктураОбластейРаскрытия,ОбъектАБ) Экспорт 
	
	ТекущаяЯчейка = ПолеТабличногоДокументаМакет.Область(ИмяЯчейки);
		
	Для Каждого СтрОбласть Из ПолеТабличногоДокументаМакет.Области Цикл		
		Если СтрОбласть.Верх = 0 Тогда //Колонки	
			Если СтрОбласть.Лево <= ТекущаяЯчейка.Лево И СтрОбласть.Право>= ТекущаяЯчейка.Право Тогда
				СтруктураОбластейРаскрытия.Вставить(СтрОбласть.Имя);		
			КонецЕсли;	
		КонецЕсли;
		
		Если СтрОбласть.Лево = 0 Тогда //Строки	
			Если СтрОбласть.Верх <= ТекущаяЯчейка.Верх И СтрОбласть.Низ>= ТекущаяЯчейка.Низ Тогда
				СтруктураОбластейРаскрытия.Вставить(СтрОбласть.Имя);		
			КонецЕсли;	
		КонецЕсли;		
	КонецЦикла;
		
КонецПроцедуры

Процедура ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверТопология(ПолеТабличногоДокументаМакет, ИмяЯчейки, СтруктураОбластейРаскрытия, СтруктураТопологии) Экспорт 
	
	ТекущаяЯчейка = ПолеТабличногоДокументаМакет.Область(ИмяЯчейки);
	
	ИндексыМассива = СтруктураТопологии.КолонкиТабличногоПоля[ТекущаяЯчейка.Лево - 1];
	МассивИндексов = СтрРазделить(ИндексыМассива, ";", Ложь);
	Для Каждого ИндексОбласти Из МассивИндексов Цикл
		СтруктураОбластейРаскрытия.Вставить(СтруктураТопологии.МассивКолонок[Число(ИндексОбласти)]);
	КонецЦикла;
	
	ИндексыМассива = СтруктураТопологии.СтрокиТабличногоПоля[ТекущаяЯчейка.Верх - 1];
	МассивИндексов = СтрРазделить(ИндексыМассива, ";", Ложь);
	Для Каждого ИндексОбласти Из МассивИндексов Цикл
		СтруктураОбластейРаскрытия.Вставить(СтруктураТопологии.МассивСтрок[Число(ИндексОбласти)]);
	КонецЦикла;
			
КонецПроцедуры

Процедура ПроверитьВхождениеЯчейкиВОбластьРаскрытияСерверПоКэшу(тСоставОбластейРаскрытия,ИмяЯчейки,СтруктураОбластейРаскрытия) Экспорт 
		
	текОбластиРаскрытия = тСоставОбластейРаскрытия.НайтиСтроки(Новый Структура("ИмяОбласти",ИмяЯчейки));
	
	Для Каждого тОбласть Из  текОбластиРаскрытия Цикл
		СтруктураОбластейРаскрытия.Вставить( ?(ЗначениеЗаполнено(тОбласть.ИмяОбластиСтрок),тОбласть.ИмяОбластиСтрок,тОбласть.ИмяОбластиКолонок)  );
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьИндексПоказателя(тСвойстваПоказателя) Экспорт
	
	Если НЕ тСвойстваПоказателя.ТипЗначенияЧисло  Тогда
		ИндексАналитики = ?(тСвойстваПоказателя.ГруппаРаскрытияЧислоАналитик >тСвойстваПоказателя.ВидОтчетаЧислоАналитик,-1,-11);  //-11 - это нечисловая синтетика (Итоговое значение = ИСТИНА), -1  - нечисловая аналитика (Итоговое значение = ЛОЖЬ)
	ИначеЕсли  тСвойстваПоказателя.ГруппаРаскрытияЧислоАналитик = 0 И ЗначениеЗаполнено(тСвойстваПоказателя.АналитикаВалюта) Тогда
		ИндексАналитики = -2;
	Иначе	
		ИндексАналитики = тСвойстваПоказателя.ГруппаРаскрытияЧислоАналитик;
	КонецЕсли;	
	
	Возврат ИндексАналитики;
		
КонецФункции

Функция ПрочитатьСтрокуОтборов(СтрОтбор) Экспорт
		
	МассивЗначений = ОбщегоНазначенияУх.РазложитьСтрокуВМассивПодстрок(СтрОтбор.Значение,"\");
	
	ЗначенияОтборов = Новый Структура;
	ЗначенияОтборов.Вставить("Поле",МассивЗначений[0]); 	
    ЗначенияОтборов.Вставить("Отбор",МассивЗначений[1]);
	ЗначенияОтборов.Вставить("ЗначениеОтбораСтрока",МассивЗначений[2]);
	
	Возврат ЗначенияОтборов;
		  	  
КонецФункции

Функция СформироватьДоступныеАналитикиРаскрытия(ПолеТабличногоДокументаМакет,ТекОбластьМакет,ТЗРасшифровкаОтборов,ТипОбласти,ОбъектАБ) Экспорт
	
	   ТзДоступныхАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
	   
	   НСтр = ТзДоступныхАналитик.Добавить();
	   НСтр.АналитикаПредставление 				= "Период";
	   НСтр.АналитикаКод 						= "ПериодОтчета";
	   НСтр.АналитикаТипСтрока 					= "СправочникСсылка.Периоды";
	   НСтр.АналитикаСортировка 				= "Период.ДатаНачала";
	   НСтр.ЭтоАналитикаВерсии 				    = ИСТИНА;
	   НСтр.ПорядокАналитики 				    = 1;
 
	   НСтр = ТзДоступныхАналитик.Добавить();
	   НСтр.АналитикаПредставление 				= "Сценарий";
	   НСтр.АналитикаКод 						= "Сценарий";
	   НСтр.АналитикаТипСтрока 					= "СправочникСсылка.Сценарии";
	   НСтр.АналитикаСортировка 				= "Сценарий.Наименование";
       НСтр.ЭтоАналитикаВерсии 				    = ИСТИНА;
	   НСтр.ПорядокАналитики 				    = 2;
 
	   НСтр = ТзДоступныхАналитик.Добавить();
	   НСтр.АналитикаПредставление 				= "Организация";
	   НСтр.АналитикаКод 						= "Организация";
	   НСтр.АналитикаТипСтрока 					= "СправочникСсылка.Организации";
	   НСтр.АналитикаСортировка 				= "Организация.Наименование";
       НСтр.ЭтоАналитикаВерсии 				    = ИСТИНА;
	   НСтр.ПорядокАналитики 				    = 3;
   
	   НСтр = ТзДоступныхАналитик.Добавить();
	   НСтр.АналитикаПредставление 				= "Проект";
	   НСтр.АналитикаКод 						= "Проект";
	   НСтр.АналитикаТипСтрока 					= "СправочникСсылка.Проекты";
	   НСтр.АналитикаСортировка 				= "Проект.Наименование";
       НСтр.ЭтоАналитикаВерсии 				    = ИСТИНА;
	   НСтр.ПорядокАналитики 				    = 4;
   
	   ДополнитьОбластьАналитикамиРаскрытия(ПолеТабличногоДокументаМакет,ТекОбластьМакет,ТзДоступныхАналитик,ТЗРасшифровкаОтборов);
 
	   СтруктураНеИспользуемыхАналитик = Новый Структура;
	   
	   ОбновитьКэшРаскрытияОбластейПоМакету(ОбъектАБ,ПолеТабличногоДокументаМакет);
	   
	   Если ТипОбласти = "Колонки" Тогда
		    ОбластиСтроки = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Лево",0));
			Для Каждого СтрОбл Из ОбластиСтроки Цикл
				ТзАналитик = ЗначениеИзСтрокиВнутр(СтрОбл.НастройкиАналитикРаскрытия);
				Для Каждого СтрАналитика Из ТзАналитик Цикл
					СтруктураНеИспользуемыхАналитик.Вставить(СтрАналитика.АналитикаКод);
				КонецЦикла;		
			КонецЦикла;				
	   Иначе	   
		    ОбластиКолонки = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Верх",0));
			Для Каждого СтрОбл Из ОбластиКолонки Цикл
				ТзАналитик = ЗначениеИзСтрокиВнутр(СтрОбл.НастройкиАналитикРаскрытия);
				Для Каждого СтрАналитика Из ТзАналитик Цикл
					СтруктураНеИспользуемыхАналитик.Вставить(СтрАналитика.АналитикаКод);
				КонецЦикла;		
			КонецЦикла;		
	   КонецЕсли;	   
	   
	   Для Каждого Стр Из СтруктураНеИспользуемыхАналитик Цикл
		   НайденнаяАналитика = ТзДоступныхАналитик.НайтиСтроки(Новый Структура("АналитикаКод",Стр.Ключ));
		   Если НайденнаяАналитика.Количество() = 1 Тогда 
			     ТзДоступныхАналитик.Удалить(НайденнаяАналитика[0]);
		   КонецЕсли;	 
	   КонецЦикла;	   
	   
	   Возврат ТзДоступныхАналитик;
	   
КонецФункции

Процедура ДополнитьОтборыАналитикамиРаскрытия(СтруктураПоказателей,ТЗРасшифровкаОтборов,эТзАналитикРаскрытия = Неопределено) Экспорт
	
	МассивПоказателей = Новый Массив;
	
	Для Каждого СтрПоказатель Из СтруктураПоказателей Цикл
		МассивПоказателей.Добавить(СтрПоказатель.Значение);	  
	КонецЦикла;	
	
	СтруктураДопАналитик 	= Новый Структура;
	СтруктураОбщихАналитик = Новый Структура;
	
	Если эТзАналитикРаскрытия = Неопределено Тогда 
		эТзАналитикРаскрытия = ПолучитьАналитикиРаскрытияПоказателей(МассивПоказателей);
	КонецЕсли;
	
	ТзАналитикРаскрытия  = эТзАналитикРаскрытия.Скопировать();
	
	СтрокаСвертки = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтрокаСвертки = СтрокаСвертки+"ВидАналитики"+Инд+",";
		СтрокаСвертки = СтрокаСвертки+"ВидАналитики"+Инд+"Код,";
	КонецЦикла;	
	
	СтрокаСвертки = СтрокаСвертки+"ВидАналитикиВалюта,ВидАналитикиВалютаКод";
	
	ТзАналитикРаскрытия.Свернуть(СтрокаСвертки);
	
	Для Каждого СтрАналитика Из ТзАналитикРаскрытия Цикл
		Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(СтрАналитика["ВидАналитики"+Инд]) Тогда
				СтруктураДопАналитик.Вставить(СтрАналитика["ВидАналитики"+Инд+"Код"],СтрАналитика["ВидАналитики"+Инд]);
			Иначе
				Прервать; 
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрАналитика["ВидАналитикиВалюта"]) Тогда
			СтруктураДопАналитик.Вставить(СтрАналитика["ВидАналитикиВалютаКод"],СтрАналитика["ВидАналитикиВалюта"]);
		КонецЕсли;			 
	КонецЦикла;	 
	
	Для Каждого СтрДопАналитика Из СтруктураДопАналитик Цикл	
		СтруктураОбщихАналитик.Вставить(СтрДопАналитика.Ключ,СтрДопАналитика.Значение);	 	
	КонецЦикла;
	
	Для Каждого СтрДопАналитика Из СтруктураОбщихАналитик Цикл		 
		СвойстваАналитики = ПолучитьТипСортировкуАналитики(СтрДопАналитика.Ключ,СтрДопАналитика.Значение.ТипЗначения);
		
		МассивТиповСтрока  		= СвойстваАналитики.МассивТиповСтрока;
		ТипСтрока		   		= СвойстваАналитики.ТипСтрока;
		АналитикаСортировка 	= СвойстваАналитики.АналитикаСортировка;
						
		Если ТЗРасшифровкаОтборов.НайтиСтроки(Новый Структура("Поле",Строка(СтрДопАналитика.Значение))).Количество() = 0 Тогда	 
			НстрОтборов = ТЗРасшифровкаОтборов.Добавить();
			НстрОтборов.УидГруппыОтборов 	= "";
			НстрОтборов.Поле  				= Строка(СтрДопАналитика.Значение);
			НстрОтборов.ПолеКод  			= СтрДопАналитика.Ключ;
			НстрОтборов.Отбор  			= "Отбор не производится";
			НстрОтборов.ЗначениеОтбора  	= "";
			НстрОтборов.ТипЗначенияСтрока 	= ТипСтрока;	 
			НстрОтборов.ПорядокОтбора 	    = 99;	
		КонецЕсли;	 
		
	КонецЦикла;	 
	
КонецПроцедуры	

Процедура ДополнитьОбластьАналитикамиРаскрытия(ПолеТабличногоДокументаМакет,ТекОбластьМакет,ТзДоступныхАналитик,ТЗРасшифровкаОтборов)
	
	МассивПоказателей = Новый Массив;
	
	Если  ТекОбластьМакет.Верх =0 Тогда	
		Верх  = 1;
		Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		Лево  = ТекОбластьМакет.Лево;
		Право = ТекОбластьМакет.Право;	 
	ИначеЕсли  ТекОбластьМакет.Лево =0 Тогда	 	
		Верх  = ТекОбластьМакет.Верх;
		Низ   = ТекОбластьМакет.Низ;
		Лево  = 1;
		Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	
	Иначе	
		Верх  = ТекОбластьМакет.Верх;
		Низ   = ТекОбластьМакет.Низ;
		Лево  = ТекОбластьМакет.Лево;
		Право = ТекОбластьМакет.Право;	
	КонецЕсли;	
	
	Для ИндС = Верх По Низ Цикл
		Для ИндК = Лево По Право Цикл
			ТекОбл = ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
			Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") И ТекОбл.Расшифровка.Свойство("Ссылка") Тогда
				МассивПоказателей.Добавить(ТекОбл.Расшифровка.Ссылка);
			КонецЕсли;	  
		КонецЦикла;	
	КонецЦикла;	
	
	СтруктураДопАналитик 	= Новый Структура;
	СтруктураОбщихАналитик = Новый Структура;
	
	эТзАналитикРаскрытия = ПолучитьАналитикиРаскрытияПоказателей(МассивПоказателей);
	ТзАналитикРаскрытия  = эТзАналитикРаскрытия.Скопировать();
	
	СтрокаСвертки = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтрокаСвертки = СтрокаСвертки+"ВидАналитики"+Инд+",";
		СтрокаСвертки = СтрокаСвертки+"ВидАналитики"+Инд+"Код,";
	КонецЦикла;	
	
	СтрокаСвертки = СтрокаСвертки+"ВидАналитикиВалюта,ВидАналитикиВалютаКод";
	
	ТзАналитикРаскрытия.Свернуть(СтрокаСвертки);
	
	Для Каждого СтрАналитика Из ТзАналитикРаскрытия Цикл
		Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(СтрАналитика["ВидАналитики"+Инд]) Тогда
				СтруктураДопАналитик.Вставить(СтрАналитика["ВидАналитики"+Инд+"Код"],СтрАналитика["ВидАналитики"+Инд]);
			Иначе
				Прервать; 
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрАналитика["ВидАналитикиВалюта"]) Тогда
			СтруктураДопАналитик.Вставить(СтрАналитика["ВидАналитикиВалютаКод"],СтрАналитика["ВидАналитикиВалюта"]);
		КонецЕсли;		 
	КонецЦикла;	 
	
	Для Каждого СтрДопАналитика Из СтруктураДопАналитик Цикл 
		Для Каждого СтрАналитика Из эТзАналитикРаскрытия Цикл	 
			ЕстьАналитика = Ложь;
			Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если СтрАналитика["ВидАналитики"+Инд] = СтрДопАналитика.Значение Тогда
					ЕстьАналитика = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
			
			Если СтрАналитика.ВидАналитикиВалюта = СтрДопАналитика.Значение Тогда
			    ЕстьАналитика = Истина;
            КонецЕсли;
				
			Если НЕ ЕстьАналитика Тогда
				Прервать;
			КонецЕсли;	 	 
		КонецЦикла;	 
		
		Если ЕстьАналитика Тогда
			СтруктураОбщихАналитик.Вставить(СтрДопАналитика.Ключ,СтрДопАналитика.Значение);
		КонецЕсли;	 	 
	КонецЦикла;
	
	Для Каждого СтрДопАналитика Из СтруктураОбщихАналитик Цикл 
				
		СвойстваАналитики = ПолучитьТипСортировкуАналитики(СтрДопАналитика.Ключ,СтрДопАналитика.Значение.ТипЗначения);
		
		МассивТиповСтрока  		= СвойстваАналитики.МассивТиповСтрока;
		ТипСтрока		   		= СвойстваАналитики.ТипСтрока;
		АналитикаСортировка 	= СвойстваАналитики.АналитикаСортировка;
		
		НСтр = ТзДоступныхАналитик.Добавить();
		НСтр.АналитикаПредставление 				= Строка(СтрДопАналитика.Значение);
		НСтр.АналитикаКод 							= СтрДопАналитика.Ключ;
		НСтр.АналитикаТипСтрока 					= ТипСтрока;
		НСтр.АналитикаСортировка 					= АналитикаСортировка;
		НСтр.ПорядокАналитики 				    	= 99;
		
		Если ТЗРасшифровкаОтборов.НайтиСтроки(Новый Структура("Поле",НСтр.АналитикаПредставление)).Количество() = 0 Тогда	 
			НстрОтборов = ТЗРасшифровкаОтборов.Добавить();
			НстрОтборов.УидГруппыОтборов 	= "";
			НстрОтборов.Поле  				= НСтр.АналитикаПредставление;
			НстрОтборов.ПолеКод  			= НСтр.АналитикаКод;
			НстрОтборов.Отбор  				= "Отбор не производится";
			НстрОтборов.ЗначениеОтбора  	= "";
			НстрОтборов.ТипЗначенияСтрока 	= ТипСтрока;	 
		КонецЕсли;	 	 
		
	КонецЦикла;	 
	
	
КонецПроцедуры	

Процедура ДополнитьМассивАналитикамиРаскрытия(ТзДоступныхАналитик,МассивПоказателей) Экспорт
	
	НСтр = ТзДоступныхАналитик.Добавить();
	НСтр.АналитикаПредставление 					= "Период";
	НСтр.АналитикаКод 								= "ПериодОтчета";
	НСтр.АналитикаТипСтрока 						= "СправочникСсылка.Периоды";
	НСтр.АналитикаСортировка 						= "Период.ДатаНачала";
	НСтр.ЭтоАналитикаВерсии 				    	= ИСТИНА;
	НСтр.ПорядокАналитики 				    		= 1;
	
	НСтр = ТзДоступныхАналитик.Добавить();
	НСтр.АналитикаПредставление 					= "Сценарий";
	НСтр.АналитикаКод 								= "Сценарий";
	НСтр.АналитикаТипСтрока 						= "СправочникСсылка.Сценарии";
	НСтр.АналитикаСортировка 						= "Сценарий.Наименование";
	НСтр.ЭтоАналитикаВерсии 				    	= ИСТИНА;
	НСтр.ПорядокАналитики 				    		= 2;
	
	НСтр = ТзДоступныхАналитик.Добавить();
	НСтр.АналитикаПредставление 					= "Организация";
	НСтр.АналитикаКод 								= "Организация";
	НСтр.АналитикаТипСтрока 						= "СправочникСсылка.Организации";
	НСтр.АналитикаСортировка 						= "Организация.Наименование";
	НСтр.ЭтоАналитикаВерсии 				    	= ИСТИНА;
	НСтр.ПорядокАналитики 				    		= 3;
	
	НСтр = ТзДоступныхАналитик.Добавить();
	НСтр.АналитикаПредставление 					= "Проект";
	НСтр.АналитикаКод 								= "Проект";
	НСтр.АналитикаТипСтрока 						= "СправочникСсылка.Проекты";
	НСтр.АналитикаСортировка 						= "Проект.Наименование";
	НСтр.ЭтоАналитикаВерсии 				    	= ИСТИНА;
	НСтр.ПорядокАналитики 				    		= 4;
	
	СтруктураДопАналитик 	= Новый Структура;
	СтруктураОбщихАналитик = Новый Структура;
	
	эТзАналитикРаскрытия = ПолучитьАналитикиРаскрытияПоказателей(МассивПоказателей);
	ТзАналитикРаскрытия  = эТзАналитикРаскрытия.Скопировать();
	
	
	СтрокаСвертки = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтрокаСвертки = СтрокаСвертки+"ВидАналитики"+Инд+",";
		СтрокаСвертки = СтрокаСвертки+"ВидАналитики"+Инд+"Код,";
	КонецЦикла;	
	
	СтрокаСвертки = СтрокаСвертки+"ВидАналитикиВалюта,ВидАналитикиВалютаКод";
	
	ТзАналитикРаскрытия.Свернуть(СтрокаСвертки);

	
	Для Каждого СтрАналитика Из ТзАналитикРаскрытия Цикл
		Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(СтрАналитика["ВидАналитики"+Инд]) Тогда
				СтруктураДопАналитик.Вставить(СтрАналитика["ВидАналитики"+Инд+"Код"],СтрАналитика["ВидАналитики"+Инд]);
			Иначе
				Прервать; 
			КонецЕсли;
		КонецЦикла;	
		Если ЗначениеЗаполнено(СтрАналитика["ВидАналитикиВалюта"]) Тогда
			СтруктураДопАналитик.Вставить(СтрАналитика["ВидАналитикиВалютаКод"],СтрАналитика["ВидАналитикиВалюта"]);
		КонецЕсли;		 
	КонецЦикла;	 
	
	Для Каждого СтрДопАналитика Из СтруктураДопАналитик Цикл 
		Для Каждого СтрАналитика Из эТзАналитикРаскрытия Цикл	 
			ЕстьАналитика = Ложь;
			Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если СтрАналитика["ВидАналитики"+Инд] = СтрДопАналитика.Значение Тогда
					ЕстьАналитика = Истина;
					Прервать;
				КонецЕсли;	 
			КонецЦикла;
			
			Если СтрАналитика.ВидАналитикиВалюта = СтрДопАналитика.Значение Тогда
			    ЕстьАналитика = Истина;
            КонецЕсли;
				
			Если НЕ ЕстьАналитика Тогда
				Прервать;
			КонецЕсли;	 	 
		КонецЦикла;	 
		
		Если ЕстьАналитика Тогда
			СтруктураОбщихАналитик.Вставить(СтрДопАналитика.Ключ,СтрДопАналитика.Значение);
		КонецЕсли;	 	 
	КонецЦикла;
	
	Для Каждого СтрДопАналитика Из СтруктураОбщихАналитик Цикл 
		
		СвойстваАналитики = ПолучитьТипСортировкуАналитики(СтрДопАналитика.Ключ,СтрДопАналитика.Значение.ТипЗначения);
		
		МассивТиповСтрока  		= СвойстваАналитики.МассивТиповСтрока;
		ТипСтрока		   		= СвойстваАналитики.ТипСтрока;
		АналитикаСортировка 	= СвойстваАналитики.АналитикаСортировка;

		НСтр = ТзДоступныхАналитик.Добавить();
		НСтр.АналитикаПредставление 				= Строка(СтрДопАналитика.Значение);
		НСтр.АналитикаКод 							= СтрДопАналитика.Ключ;
		НСтр.АналитикаТипСтрока 					= ТипСтрока;
		НСтр.АналитикаСортировка 					= АналитикаСортировка;
		НСтр.ПорядокАналитики 				    	= 99;
	
	КонецЦикла;	 
		
КонецПроцедуры	

Функция ПолучитьАналитикиРаскрытияПоказателей(МассивПоказателей) Экспорт
	
	ТекстАналитикФинальный 		= "";
	ТекстКодовАналитикФинальный = "";
    ТекстАналитикГр 			= "";
	ТекстАналитикВо 			= "";
	ТекстАналитикГрКод          = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТекстАналитикФинальный = ТекстАналитикФинальный+"
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+"
		|		ИНАЧЕ ВложенныйЗапрос1.ВидАналитики"+Инд+"
		|	КОНЕЦ КАК ВидАналитики"+Инд+",";
		
		ТекстКодовАналитикФинальный = ТекстКодовАналитикФинальный+"
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+".Код
		|		ИНАЧЕ ВложенныйЗапрос1.ВидАналитики"+Инд+"Код
		|	КОНЕЦ КАК ВидАналитики"+Инд+"Код,";

		ТекстАналитикГр = ТекстАналитикГр+"
		|	ГруппыРаскрытия.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";

		ТекстАналитикГрКод = ТекстАналитикГрКод+"
		|	ГруппыРаскрытия.ВидАналитики"+Инд+".Код КАК ВидАналитики"+Инд+"Код,";

		ТекстАналитикВо = ТекстАналитикВо+"
		|	ВидыОтчетов.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";
		
	КонецЦикла;	 

	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ "+ТекстАналитикФинальный+"
				   |	ВложенныйЗапрос.ПоказательОтчетаСсылка КАК Показатель,
	               |	ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия КАК ГруппаРаскрытия,"+ТекстКодовАналитикФинальный+"
				   |	ВложенныйЗапрос1.ВидАналитикиВалютаДт КАК ВидАналитикиВалюта,
				   |	ВложенныйЗапрос.ПоказательОтчетаСтрокаОтчета КАК СтрокаОтчета,
	               |	ВложенныйЗапрос1.ВидАналитикиВалютаДтКод КАК ВидАналитикиВалютаКод,
	               |	ВложенныйЗапрос1.АналитикаЭтапПроекта КАК АналитикаЭтапПроекта
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПоказателиОтчета.Ссылка КАК ПоказательОтчетаСсылка,
	               |		ПоказателиОтчета.ГруппаРаскрытия КАК ПоказательОтчетаГруппаРаскрытия,
				   |		ПоказателиОтчета.Строка КАК ПоказательОтчетаСтрокаОтчета,
				   |		ПоказателиОтчета.Владелец КАК ПоказательОтчетаВидОтчета
				   |		
	               |	ИЗ
	               |		Справочник.ПоказателиОтчетов КАК ПоказателиОтчета
	               |	ГДЕ
	               |		
	               |		ПоказателиОтчета.Ссылка В (&МассивПоказателей) ) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстАналитикГр+ТекстАналитикГрКод+"
	               |			ГруппыРаскрытия.Ссылка КАК Ссылка,
	               |			ГруппыРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиВалютаДт,
	               |			ГруппыРаскрытия.ВидАналитикиВалютаДт.Код КАК ВидАналитикиВалютаДтКод,
	               |			ГруппыРаскрытия.АналитикаЭтапПроекта КАК АналитикаЭтапПроекта
	               |		ИЗ
	               |			Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия = ВложенныйЗапрос1.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстАналитикВо+"
				   |			ВидыОтчетов.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ВидыОтчетов КАК ВидыОтчетов) КАК ВложенныйЗапрос2
	               |		ПО ВложенныйЗапрос.ПоказательОтчетаВидОтчета = ВложенныйЗапрос2.Ссылка";
	

    Запрос.УстановитьПараметр("МассивПоказателей",МассивПоказателей);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат  Результат;
	
КонецФункции	

Функция ПолучитьСвойстваВыбранныхПоказателей(Показатели) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 0
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 6
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 0
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 1
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 2
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 3
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 4
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 5
	               |				ИНАЧЕ 6
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ГруппаРаскрытияЧислоАналитик,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 0
	               |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 1
	               |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 2
	               |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 3
	               |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 4
	               |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 5
	               |		ИНАЧЕ 6
	               |	КОНЕЦ КАК ВидОтчетаЧислоАналитик,
	               |	ПоказателиОтчетов.Строка КАК СтрокаОтчета,
	               |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
				   |	ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду КАК ВидИтогаПериод,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыЗначенийПоказателейОтчетов.Число)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТипЗначенияЧисло,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт
	               |	КОНЕЦ КАК АналитикаВалюта,
	               |	ПоказателиОтчетов.Код КАК ПоказательКод,
	               |	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	               |	ПоказателиОтчетов.Владелец.Код КАК ВидОтчетаКод,
	               |	ПоказателиОтчетов.Колонка КАК Колонка,
	               |	ПоказателиОтчетов.Строка КАК Строка,
	               |	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
	               |	ПоказателиОтчетов.Защищенный КАК Защищенный,
	               |	ПоказателиОтчетов.Валютный КАК Валютный,
	               |	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 КАК ГруппаРаскрытияВидАналитики1,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 КАК ГруппаРаскрытияВидАналитики2,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 КАК ГруппаРаскрытияВидАналитики3,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 КАК ГруппаРаскрытияВидАналитики4,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 КАК ГруппаРаскрытияВидАналитики5,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 КАК ГруппаРаскрытияВидАналитики6,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1.Код КАК ГруппаРаскрытияВидАналитики1Код,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2.Код КАК ГруппаРаскрытияВидАналитики2Код,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3.Код КАК ГруппаРаскрытияВидАналитики3Код,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4.Код КАК ГруппаРаскрытияВидАналитики4Код,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5.Код КАК ГруппаРаскрытияВидАналитики5Код,
	               |	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6.Код КАК ГруппаРаскрытияВидАналитики6Код,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики1 КАК ВОВидАналитики1,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики2 КАК ВОВидАналитики2,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики3 КАК ВОВидАналитики3,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики4 КАК ВОВидАналитики4,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики5 КАК ВОВидАналитики5,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики6 КАК ВОВидАналитики6,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики1.Код КАК ВОВидАналитики1Код,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики2.Код КАК ВОВидАналитики2Код,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики3.Код КАК ВОВидАналитики3Код,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики4.Код КАК ВОВидАналитики4Код,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики5.Код КАК ВОВидАналитики5Код,
	               |	ПоказателиОтчетов.Владелец.ВидАналитики6.Код КАК ВОВидАналитики6Код,
	               |	ПоказателиОтчетов.Колонка.Код КАК КолонкаКод,
	               |	ПоказателиОтчетов.Владелец.РазделениеПоПроектам КАК РазделениеПоПроектам
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Ссылка В(&Ссылка)";		  
	
	Запрос.УстановитьПараметр("Ссылка",Показатели);
	Результат  = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Ссылка");
		
	Возврат Результат;
	
КонецФункции	

Процедура ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ,тСтруктураМакетовРаскрытия) Экспорт
		
	ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Очистить();
	ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Очистить();
	ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Очистить();
	
	Для Каждого облРаскрытия Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл			
		ОбластьРаскрытия =  ПолеТабличногоДокументаМакет.Области.Найти(облРаскрытия.ИмяОбласти);		
		ФлВключенияОбласти = Истина;	
		Если Не ОбластьРаскрытия = Неопределено Тогда	
			
			облРаскрытия.Лево = ОбластьРаскрытия.Лево;
			облРаскрытия.Верх = ОбластьРаскрытия.Верх;
			
			//Строки
			Если ОбластьРаскрытия.Лево=0 Тогда		
				
				ФлВключенияОбласти = тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяМакетаРаскрытия",ОбластьРаскрытия.Имя)).Количество()=1;
						
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Низ =  ОбластьРаскрытия.Низ;
					НобластьКэша.Лево = 9999;		
				КонецЕсли;
			КонецЕсли;		
			//Колонки
			Если ОбластьРаскрытия.Верх=0 Тогда		
								
				ФлВключенияОбласти = тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяМакетаРаскрытия",ОбластьРаскрытия.Имя)).Количество()=1;
				
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Право =  ОбластьРаскрытия.Право;
					НобластьКэша.Верх = 9999;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;						
	КонецЦикла;	
	
	//Готовим области таблиц
	тСтроки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Лево",0));
	тКолонки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Верх",0));
		
	Для Каждого тСтрока Из тСтроки Цикл	
		сНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тСтрока.НастройкиАналитикРаскрытия);
		тОбластьСтрока              = ПолеТабличногоДокументаМакет.Область(тСтрока.ИмяОбласти);
		
		Для Каждого тКолонка Из тКолонки Цикл	
			
			тОбластьКолонка             = ПолеТабличногоДокументаМакет.Область(тКолонка.ИмяОбласти);
			тНастройкиАналитикРаскрытия = сНастройкиАналитикРаскрытия.СкопироватьКолонки();
			
			Для Каждого строкаАналитики Из сНастройкиАналитикРаскрытия Цикл
				тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
			КонецЦикла;	
			
			кНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тКолонка.НастройкиАналитикРаскрытия);
			Для Каждого строкаАналитики Из кНастройкиАналитикРаскрытия Цикл
				тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
			КонецЦикла;			
			нТаблица = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Добавить();
			нТаблица.УидГруппыОтборов =СтрЗаменить(Новый УникальныйИдентификатор,"-","");
			нТаблица.Лево 	= тОбластьКолонка.Лево;
			нТаблица.Право 	= тОбластьКолонка.Право;
			нТаблица.Верх 	= тОбластьСтрока.Верх;
			нТаблица.Низ 	= тОбластьСтрока.Низ;
			нТаблица.ИмяОбластиСтрок 	= тСтрока.ИмяОбласти;
			нТаблица.ИмяОбластиКолонок = тКолонка.ИмяОбласти;
			нТаблица.НастройкиАналитикРаскрытия = ЗначениеВСтрокуВнутр(тНастройкиАналитикРаскрытия);	
			нТаблица.ИмяОбласти           =  ПолеТабличногоДокументаМакет.Область(нТаблица.Верх,нТаблица.Лево,нТаблица.Низ,нТаблица.Право).Имя;
			
			ОтборРаскрываемойОбластиСтроки  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тСтрока.УидГруппыОтборов));
			ОтборРаскрываемойОбластиКолонки = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тКолонка.УидГруппыОтборов));
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиСтроки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиКолонки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;	
		КонецЦикла;		
	КонецЦикла;	
			
   ОбъектАБ.КэшВыводаОбластейМакета.Очистить();	
   Лево =1;
   Верх =1;
   
   ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Сортировать("Верх,Лево");
   КолонкиРаскрытия 	= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Верх",9999));
   СтрокиРаскрытия		= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Лево",9999));
   
   нКол  		= КолонкиРаскрытия.Добавить();
   Нкол.Лево    = ПолетабличногоДокументаМакет.ШиринаТаблицы+1;
   Нкол.ИмяОбласти = "МаркерОкончания";
   
   Низ 		= ПолетабличногоДокументаМакет.ВысотаТаблицы;   
   нСтрока  = СтрокиРаскрытия.Добавить();
   нСтрока.Верх    = ПолетабличногоДокументаМакет.ВысотаТаблицы+1;
   нСтрока.ИмяОбласти = "МаркерОкончания";
   
   Для Каждого СтрокаМакета Из  СтрокиРаскрытия Цикл	      
	   //Между областями есть 'свободные' колонки
	   Если Верх<>СтрокаМакета.Верх  Тогда   
		   ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,Верх,СтрокаМакета.Верх-1,Лево,"Синтетика");
	   КонецЕсли;
	   Если СтрокаМакета.ИмяОбласти = "МаркерОкончания" Тогда
		   Продолжить;
	   КонецЕсли;		   
	   ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,СтрокаМакета.Верх,СтрокаМакета.Низ,Лево,"Строки",СтрокаМакета.УидГруппыОтборов);	      
	   Верх 	        = ?(ПолетабличногоДокументаМакет.ВысотаТаблицы =СтрокаМакета.Низ,ПолетабличногоДокументаМакет.ВысотаТаблицы+1,СтрокаМакета.Низ+1);	   
   КонецЦикла;	   
   
   Для Каждого СтрИмяформулы Из ОбъектАБ.КэшИменФормул Цикл
	   
	   тОбластьФормулы = ПолеТабличногоДокументаМакет.Область(СтрИмяформулы.ИмяОбласти);
	   Для Каждого СтрОбластиВывода Из ОбъектАБ.КэшВыводаОбластейМакета Цикл
		   
		   Если тОбластьФормулы.Лево>=СтрОбластиВывода.Лево 
			   И тОбластьФормулы.Право<=СтрОбластиВывода.Право 
			   И тОбластьФормулы.Верх>=СтрОбластиВывода.Верх 
			   И тОбластьФормулы.Низ<=СтрОбластиВывода.Низ Тогда
			   
			   СтрИмяформулы.ТипОбластиВывода = СтрОбластиВывода.ТипОбласти;
			   Если СтрОбластиВывода.ТипОбласти = "Колонки" Тогда
				   СтрИмяформулы.ИмяОбластиВывода = СтрОбластиВывода.ИмяОбластиКолонок;
			   КонецЕсли;
			   Если СтрОбластиВывода.ТипОбласти = "Строки" Тогда
				   СтрИмяформулы.ИмяОбластиВывода = СтрОбластиВывода.ИмяОбластиСтрок;
			   КонецЕсли;	   
		   КонецЕсли;	   
		   
	   КонецЦикла;	      
   КонецЦикла;	      
   
КонецПроцедуры	

Процедура ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,Верх,СтрокаМакетаВерх,Лево,ТипОбластиСтроки,ИмяОбластиСтрок	 = Неопределено)
	
	Для Каждого КолонкаМакета Из  КолонкиРаскрытия Цикл	   
		//Между областями есть 'свободные' колонки
		Если Лево<>КолонкаМакета.Лево Тогда   
			ОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(Верх,Лево,СтрокаМакетаВерх,КолонкаМакета.Лево-1);	   
			нОбластьДляВывода = ОбъектАБ.КэшВыводаОбластейМакета.Добавить();
			нОбластьДляВывода.Лево = Лево;
			нОбластьДляВывода.Право = ОбластьДляВывода.Право;
			нОбластьДляВывода.Верх = Верх;
			нОбластьДляВывода.Низ = ОбластьДляВывода.Низ;
			нОбластьДляВывода.ИмяОбласти = ОбластьДляВывода.Имя;
			нОбластьДляВывода.ТипОбласти = ?(ТипОбластиСтроки = "Синтетика","Синтетика","Строки");
			нОбластьДляВывода.ИмяОбластиСтрок 	= ИмяОбластиСтрок;
            нОбластьДляВывода.ИмяОбластиКолонок = "";
		КонецЕсли;	   
		Если КолонкаМакета.ИмяОбласти = "МаркерОкончания" Тогда
			Лево =1;
			Продолжить;
		КонецЕсли;	   
		ОбластьДляВывода = ПолеТабличногоДокументаМакет.Область(Верх,КолонкаМакета.Лево,СтрокаМакетаВерх,КолонкаМакета.Право);
		нОбластьДляВывода = ОбъектАБ.КэшВыводаОбластейМакета.Добавить();
		нОбластьДляВывода.Лево = КолонкаМакета.Лево;
		нОбластьДляВывода.Право = КолонкаМакета.Право;
		нОбластьДляВывода.Верх = Верх;
		нОбластьДляВывода.Низ = ОбластьДляВывода.Низ;
		нОбластьДляВывода.ИмяОбласти = ОбластьДляВывода.Имя;
		нОбластьДляВывода.ТипОбласти = ?(ТипОбластиСтроки = "Синтетика","Колонки","Таблица");		
		Если нОбластьДляВывода.ТипОбласти = "Таблица" Тогда
			УидТаблицы = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбластиСтрок,ИмяОбластиКолонок",ИмяОбластиСтрок,КолонкаМакета.ИмяОбласти))[0];
			нОбластьДляВывода.ИмяОбластиСтрок 	= ИмяОбластиСтрок;
			нОбластьДляВывода.ИмяОбластиКолонок = КолонкаМакета.УидГруппыОтборов;
            нОбластьДляВывода.УидГруппыОтборов  = УидТаблицы.УидГруппыОтборов;
			
		Иначе	
			нОбластьДляВывода.ИмяОбластиСтрок 	= ИмяОбластиСтрок;
			нОбластьДляВывода.ИмяОбластиКолонок = КолонкаМакета.УидГруппыОтборов;
		КонецЕсли;
		Лево 	        = ?(ПолетабличногоДокументаМакет.ШиринаТаблицы = КолонкаМакета.Право,ПолетабличногоДокументаМакет.ШиринаТаблицы+1,КолонкаМакета.Право+1);			
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьКэшОтборов(ПолетабличногоДокументаМакет,АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,ОбъектАБ) Экспорт
	
	Если ТипЗнч(АдресРезультатаРедактирования) = Тип("ТаблицаЗначений") Тогда
		РасшифровкаОтборов   		=	АдресРезультатаРедактирования;
		ОтображатьСуммуВДопВалюте   =   Ложь;
	Иначе
		РасшифровкаОтборов   =  ПолучитьИзВременногоХранилища(АдресРезультатаРедактирования.ОтборыГруппы);
		ОтображатьСуммуВДопВалюте = АдресРезультатаРедактирования.ОтображатьСуммуВДопВалюте;
	КонецЕсли;	
			
	Для Каждого Обл Из МассивОбрабатываемыхИмен Цикл
		
		ОбластьРасшифровка = ПолетабличногоДокументаМакет.Область(Обл).Расшифровка;
		РасшифровкаГруппОтборов = Новый Структура;
		
		//Прочитаем ранее установленные отборы, если были.
		Если ПолетабличногоДокументаМакет.Область(Обл).Расшифровка.Свойство("РасшифровкаГруппОтборов") Тогда	
			Для Каждого СтрОтбор Из ПолетабличногоДокументаМакет.Область(Обл).Расшифровка.РасшифровкаГруппОтборов Цикл
				РасшифровкаГруппОтборов.Вставить(СтрОтбор.Ключ,СтрОтбор.Значение);
			КонецЦикла;				
		КонецЕсли;	
		
		//Формируем таблицу отборов для ячейки - сохраняем тлько отборы отличные от дефолтных...
		Для Каждого тОтбор Из РасшифровкаОтборов Цикл		
			Если НЕ (ПроверитьЭтоСтандартныйОтбор(тОтбор)) И тОтбор.Использовать  Тогда
				СформироватьСтрокуОтбора(РасшифровкаГруппОтборов,тОтбор);	
			КонецЕсли;				
			Если ПроверитьЭтоСтандартныйОтбор(тОтбор) И тОтбор.Использовать  Тогда
				РасшифровкаГруппОтборов.Удалить(тОтбор.ПолеКод);	
			КонецЕсли;	
		КонецЦикла;	
		
		//Подменям УИД показателя на новую группу
		СтруктураРасшифровки = Новый Структура;
		СтруктураРасшифровки.Вставить("Ссылка",				ОбластьРасшифровка.Ссылка);
		
		Если ОтображатьСуммуВДопВалюте  Тогда
			СтруктураРасшифровки.Вставить("ОтображатьСуммуВДопВалюте",ОтображатьСуммуВДопВалюте);
		КонецЕсли;		
		Если РасшифровкаГруппОтборов.Количество()>0 Тогда
			СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборов",РасшифровкаГруппОтборов);
		КонецЕсли;
		
		_Структура = Новый ФиксированнаяСтруктура(СтруктураРасшифровки);   
		ПолетабличногоДокументаМакет.Область(Обл).Расшифровка = Новый Структура(_Структура);  
		
	КонецЦикла;  
	
КонецПроцедуры	

Процедура ОбновитьКэшОтборовОперандов(ПолетабличногоДокументаМакет,АдресРезультатаРедактирования,МассивОбрабатываемыхИмен,ОбъектАБ,РасшифровкаОперанда) Экспорт
	
	Если ТипЗнч(АдресРезультатаРедактирования) = Тип("ТаблицаЗначений") Тогда
		РасшифровкаОтборов   =  АдресРезультатаРедактирования;
	Иначе
		РасшифровкаОтборов   =  ПолучитьИзВременногоХранилища(АдресРезультатаРедактирования.ОтборыГруппы);
	КонецЕсли;	
	
	Для Каждого Обл Из МассивОбрабатываемыхИмен Цикл
		
		ТекущаяСтрокаОперанда 		= ОбъектАБ.РасшифровкаФормулОбластейПоказателей.НайтиСтроки(Новый Структура("ИмяВФормуле",Обл))[0];
		СохраненнаяГруппаОтборов    = ТекущаяСтрокаОперанда.УидГруппыОтборов;
		//Преобразуем структуру в случае группового редактирования
		СохраненнаяСтрокаОтборов = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",СохраненнаяГруппаОтборов))[0];
		ТекущаяСтруктураПоиска = Новый Структура();
		ТекущаяСтруктураПоиска.Вставить("ИндексРегистра",СохраненнаяСтрокаОтборов["ИндексРегистра"]);	
		//Преобразуем отборы в случае группового редактирования
		СохраненныеОтборы = ОбъектАБ.РасшифровкаГруппОтборов.Выгрузить(Новый Структура("УидГруппыОтборов",СохраненнаяГруппаОтборов));
		Для Каждого сОтбор Из СохраненныеОтборы Цикл		
			ТекущийОтбор = РасшифровкаОтборов.НайтиСтроки(Новый Структура("ПолеКод,Использовать",сОтбор.ПолеКод,Истина));
			Если ТекущийОтбор.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(сОтбор,ТекущийОтбор[0]);
			КонецЕсли;	
		КонецЦикла;
		
		тХэшГруппыОтборов = Обработки.АналитическийБланк.ПолучитьХэшПоОтборам(СохраненныеОтборы);
		ТекущаяСтруктураПоиска.Вставить("ХэшГруппыОтборов",тХэшГруппыОтборов);
		
		НайденнаяСтрокаКэша = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(ТекущаяСтруктураПоиска);
		
		Если НайденнаяСтрокаКэша.Количество() = 0 Тогда //Создаем новую группу отборов	
			нСтр = ОбъектАБ.КэшГруппОтборовПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,ТекущаяСтруктураПоиска);
			нСтр.УидГруппыОтборов = СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","");	
			//Добавляем расшифровку групп отборов
			Для Каждого ТекРасшифровкаОтборов Из СохраненныеОтборы Цикл
				оСтр = ОбъектАБ.РасшифровкаГруппОтборов.Добавить();
				ЗаполнитьЗначенияСвойств(оСтр,ТекРасшифровкаОтборов);
				оСтр.УидГруппыОтборов =  нСтр.УидГруппыОтборов;
			КонецЦикла;		
		Иначе	  
			нСтр = НайденнаяСтрокаКэша[0];	
		КонецЕсли; 	
		
		РасшифровкаОперанда.Вставить("ВидОтчета"		,ТекущаяСтрокаОперанда.ВидОтчета);
		РасшифровкаОперанда.Вставить("ВидОтчетаКод"	,ТекущаяСтрокаОперанда.ВидОтчетаКод);
		РасшифровкаОперанда.Вставить("Ссылка"		,ТекущаяСтрокаОперанда.Показатель);
		РасшифровкаОперанда.Вставить("ПоказательКод"	,ТекущаяСтрокаОперанда.ПоказательКод);
		РасшифровкаОперанда.Вставить("УидГруппыОтборов"	,нСтр.УидГруппыОтборов);
		
	КонецЦикла;  
	
КонецПроцедуры	

Функция ПроверитьЭтоСтандартныйОтбор(тОтбор) Экспорт
	
	Если тОтбор.Поле = "ПериодС" И тОтбор.Отбор = "Период начала отчета" Тогда
		 Возврат Истина;
	ИначеЕсли тОтбор.Поле = "ПериодПо" И тОтбор.Отбор = "Период окончания отчета" Тогда	 
		 Возврат Истина;
	ИначеЕсли тОтбор.Поле = "Сценарий" И тОтбор.Отбор = "Сценарий отчета" Тогда	 
		 Возврат Истина;
	ИначеЕсли тОтбор.Поле = "Организация" И тОтбор.Отбор = "Организация отчета" Тогда	 
		 Возврат Истина;
    ИначеЕсли тОтбор.Поле = "Проект" И тОтбор.Отбор = "Проект отчета" Тогда	 
		 Возврат Истина;
    ИначеЕсли  тОтбор.Отбор = "Отбор не производится" Тогда	 
         Возврат Истина;
	Иначе	 
		 Возврат Ложь;
	КонецЕсли;	
		
КонецФункции	

Процедура СформироватьСтрокуОтбора(РасшифровкаГруппОтборов,тОтбор) Экспорт
	
	ПредставлениеОтбора = "";
	ПредставлениеОтбора = тОтбор.Поле+"\"+тОтбор.Отбор+"\"+?(тОтбор.ЗначениеОтбора = "","",ЗначениеВСтрокуВнутр(тОтбор.ЗначениеОтбора));
	
	РасшифровкаГруппОтборов.Вставить(тОтбор.ПолеКод,ПредставлениеОтбора);
	  	  
КонецПроцедуры


#КонецОбласти 


#Область МастерГенерацииОбластейРаскрытий

Процедура СформироватьМакетыРаскрытия(ПолеТабличногоДокументаМакет,Результат,СмещениеВерх,СмещениеЛево,СтруктураОдинаковыхИмен,КартинкаМакета = Неопределено,РежимГенерацииМакета = Ложь) Экспорт
	
	ДеревоСтруктуры 	  = ПолучитьИзВременногоХранилища(Результат.СтруктураАналитикАдрес);
	КоличествоСтрокМакета = Результат.КоличествоСтрокМакета;
	НачалоОбластиЗаголовка= Результат.НачалоОбластиЗаголовка;
	МакетГруппировок 	  = ПолучитьИзВременногоХранилища(Результат.МакетГруппировок);
	ПараметрыОтбора       = ПолучитьИзВременногоХранилища(Результат.ПараметрыОтбораАдрес);
	Сортировки		      = ПолучитьИзВременногоХранилища(Результат.СортировкиАдрес);
	тзСтруктураМакета     = ПолучитьИзВременногоХранилища(Результат.тзСтруктураМакетаАдрес);
    текПоказатели         = ПолучитьИзВременногоХранилища(Результат.текПоказатели);
	
	ДеревоСтруктуры.Колонки.Добавить("УидМакета");
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПараметрыОтбора",ПараметрыОтбора);
	СтруктураПараметров.Вставить("Сортировки",Сортировки);
	СтруктураПараметров.Вставить("НачалоОбластиЗаголовка",НачалоОбластиЗаголовка);
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
    СтруктураПараметров.Вставить("СтруктураОдинаковыхИмен",СтруктураОдинаковыхИмен);
	СтруктураПараметров.Вставить("СтруктураИерархии",Результат.СтруктураИерархии);
	
	Если КартинкаМакета = Неопределено Тогда
		СтруктураПараметров.Вставить("КартинкаМакета",БиблиотекаКартинок.НайтиВСодержании);
	Иначе
		СтруктураПараметров.Вставить("КартинкаМакета",КартинкаМакета);
	КонецЕсли;
	
	СтруктураИспользованныхАналитик = Новый Структура;
	ТзОтборовТекущегоУровня         = Неопределено;
	
	Для Каждого Обл Из тзСтруктураМакета Цикл				
		//Строки
		Если Обл.ЛевоОбласти = 0 Тогда
			МакетТекущейОбласти = МакетГруппировок.Область(Обл.ИмяОбласти);
			МакетРаскрытий = Новый ТабличныйДокумент;
			СтруктураПараметров.Вставить("МакетРаскрытий",МакетРаскрытий);
			СтруктураПараметров.Вставить("МакетТекущейОбласти",МакетТекущейОбласти);
			
			СтрокиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,ДеревоСтруктуры,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня,Ложь);		
			ОчиститьИменаПоказателейПредв(МакетРаскрытий);
			ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(СмещениеВерх+КоличествоСтрокМакета,0,СмещениеВерх+МакетРаскрытий.ВысотаТаблицы+КоличествоСтрокМакета-1,0);			
			Если РежимГенерацииМакета Тогда
				ПолеТабличногоДокументаМакет.Вывести(МакетРаскрытий.ПолучитьОбласть(1,0,МакетРаскрытий.ВысотаТаблицы,0));
			Иначе
				ИсходнаяОбласть = МакетРаскрытий.Область(1,0,МакетРаскрытий.ВысотаТаблицы,0);
				ПолеТабличногоДокументаМакет.ВставитьОбласть(ИсходнаяОбласть,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоВертикали);	
			КонецЕсли;
			ПолучитьНовыеИменаПоказателей(ПолеТабличногоДокументаМакет,ОбластьПриемник,ПараметрыОтбора,текПоказатели);
			СмещениеВерх = СмещениеВерх+КоличествоСтрокМакета+МакетРаскрытий.ВысотаТаблицы;					
		КонецЕсли;
		//Колонки
		Если Обл.ВерхОбласти = 0 Тогда
			МакетТекущейОбласти = МакетГруппировок.Область(Обл.ИмяОбласти);
			МакетРаскрытий = Новый ТабличныйДокумент;
			СтруктураПараметров.Вставить("МакетРаскрытий",МакетРаскрытий);
			СтруктураПараметров.Вставить("МакетТекущейОбласти",МакетТекущейОбласти);
			
			КолонкиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,ДеревоСтруктуры,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня,Ложь);		
			
			ОчиститьИменаПоказателейПредв(МакетРаскрытий);
			ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(0,СмещениеЛево+КоличествоСтрокМакета,0,СмещениеЛево+МакетРаскрытий.ШиринаТаблицы+КоличествоСтрокМакета-1);
			ИсходнаяОбласть = МакетРаскрытий.Область(0,1,0,МакетРаскрытий.ШиринаТаблицы);
			ПолеТабличногоДокументаМакет.ВставитьОбласть(ИсходнаяОбласть,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);	
			ПолучитьНовыеИменаПоказателей(ПолеТабличногоДокументаМакет,ОбластьПриемник,ПараметрыОтбора,текПоказатели);
			СмещениеЛево = СмещениеЛево+КоличествоСтрокМакета+МакетРаскрытий.ШиринаТаблицы;				
		КонецЕсли;	
	КонецЦикла;		
	
	
КонецПроцедуры	
	
Процедура СтрокиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,ДеревоСтруктуры,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня=Неопределено,КартинкаВыведена)
	
	МакетТекущейОбласти = СтруктураПараметров.МакетТекущейОбласти;
	ПараметрыОтбора		= СтруктураПараметров.ПараметрыОтбора;
	Сортировки          = СтруктураПараметров.Сортировки;
	МакетРаскрытий      = СтруктураПараметров.МакетРаскрытий;
    НачалоОбластиЗаголовка      = СтруктураПараметров.НачалоОбластиЗаголовка;
	СтруктураОдинаковыхИмен     = СтруктураПараметров.СтруктураОдинаковыхИмен;
	
	Для Каждого СтрокаДерева Из ДеревоСтруктуры.Строки Цикл
				
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.СтруктураАналитикСтрока) Тогда
			СтрокиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,СтрокаДерева,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня,КартинкаВыведена);	
			Продолжить;
		КонецЕсли;	

		ОбластьПриемник = МакетРаскрытий.Область(МакетРаскрытий.ВысотаТаблицы+1,0,МакетРаскрытий.ВысотаТаблицы+(МакетТекущейОбласти.Низ-МакетТекущейОбласти.Верх)+1,0);
		МакетРаскрытий.ВставитьОбласть(МакетТекущейОбласти,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоВертикали);				
		СтруктураАналитик               = ЗначениеИзСтрокиВнутр(СтрокаДерева.СтруктураАналитикСтрока);

		ИмяОбласти                      = ПолучитьИмяОбластиПоСтруктуреАналитик(СтруктураАналитик,СтруктураПараметров.ПолеТабличногоДокументаМакет,СтруктураОдинаковыхИмен);
		
		СтруктураПараметров.Вставить("СтруктураОдинаковыхИмен",СтруктураОдинаковыхИмен);
		
		Если НачалоОбластиЗаголовка>0 Тогда
			ОбластьЗаголовка = МакетРаскрытий.Область(МакетРаскрытий.ВысотаТаблицы,НачалоОбластиЗаголовка,МакетРаскрытий.ВысотаТаблицы,НачалоОбластиЗаголовка);
			 
			ОбластьЗаголовка.Текст = ПолучитьВыражениеПолейаналитикПоУмолчанию(СтруктураАналитик);
						
			ОбластьЗаголовка.Шрифт = Новый Шрифт(ОбластьЗаголовка.Шрифт,,,Ложь);
			ОбластьЗаголовка.Отступ = ОбластьЗаголовка.Отступ+2+СтрокаДерева.Уровень()*2;
		КонецЕсли;
		
		СтруктураНастроекОбласти 	= Новый Структура;
		СтруктураНастроекОбласти.Вставить("ПараметрыОтбора",ЗначениеВстрокуВнутр(ПараметрыОтбора));
		СтруктураНастроекОбласти.Вставить("ПараметрыИерархииАналитик",ЗначениеВстрокуВнутр(СтруктураПараметров.СтруктураИерархии));

		НастройкиАналитикРаскрытия 		= Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
		
		Для Каждого СтрАналитика Из СтруктураАналитик Цикл	
			Если СтрАналитика.Ключ = "ПериодОтчета" Тогда
				нАналитика = НастройкиАналитикРаскрытия.Добавить();
				нАналитика.АналитикаКод 			= "ПериодОтчета";
				нАналитика.Пометка		 			= Истина;
				нАналитика.АналитикаПредставление 	= "ПериодОтчета";
				нАналитика.АналитикаТипСтрока 		= "СправочникСсылка.Периоды";
				нАналитика.ЭтоАналитикаВерсии 		= Истина;
				ТекАналитикаПоСортировке 			= 	"ПериодОтчета.ДатаНачала";
				нАналитика.АналитикаСортировка 	=ТекАналитикаПоСортировке;		
				нАналитика.ПорядокАналитики     = 1;
				нАналитика.ИерархииАналитики		 = СтрАналитика.Значение[0].ИерархииАналитики;
			Иначе	
				ТекАналитикаПоОтбору = ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод",СтрАналитика.Ключ))[0];
				нАналитика = НастройкиАналитикРаскрытия.Добавить();
				нАналитика.АналитикаКод 			= ТекАналитикаПоОтбору.ПолеКод;
				нАналитика.Пометка		 			= Истина;
				нАналитика.АналитикаПредставление 	= ТекАналитикаПоОтбору.Поле;
				нАналитика.АналитикаТипСтрока 		= ТекАналитикаПоОтбору.ТипЗначенияСтрока;
				Если нАналитика.АналитикаКод = "ПериодОтчета" ИЛИ  нАналитика.АналитикаКод = "Сценарий" ИЛИ нАналитика.АналитикаКод = "Организация" ИЛИ нАналитика.АналитикаКод = "Проект" Тогда
					нАналитика.ЭтоАналитикаВерсии 		= Истина;
				КонецЕсли;
				ТекАналитикаПоСортировке = Сортировки[ТекАналитикаПоОтбору.ПолеКод];
				нАналитика.АналитикаСортировка 	=ТекАналитикаПоСортировке;
				нАналитика.ПорядокАналитики     = ТекАналитикаПоОтбору.ПорядокОтбора;
				нАналитика.ИерархииАналитики	= СтрАналитика.Значение[0].ИерархииАналитики;
			КонецЕсли;
			
			СтруктураИспользованныхАналитик.Вставить(нАналитика.АналитикаКод);
			
		КонецЦикла;	
				
		СтрНастройкиАналитикРаскрытия  = ЗначениеВСтрокуВнутр(НастройкиАналитикРаскрытия);	
		СтруктураНастроекОбласти.Вставить("НастройкиАналитикРаскрытия",СтрНастройкиАналитикРаскрытия);	
		СтрокаДерева.УидМакета 				= ИмяОбласти; 	
		ОбластьПриемник.Имя 				= ИмяОбласти;		
		ЯччеквМакетеОбласти = МакетТекущейОбласти.Низ;
		
		Для Инд = МакетТекущейОбласти.Верх По МакетТекущейОбласти.Низ   Цикл
			ОбластьЗаголовок = МакетРаскрытий.Область((МакетРаскрытий.ВысотаТаблицы-ЯччеквМакетеОбласти)+Инд,1,(МакетРаскрытий.ВысотаТаблицы-ЯччеквМакетеОбласти)+Инд,1);
			ОбластьЗаголовок.Расшифровка 						=  СтруктураНастроекОбласти;	
			Если Не КартинкаВыведена Тогда
				Если ОбластьЗаголовок.АвтоВысотаСтроки  Тогда ОбластьЗаголовок.ВысотаСтроки = 11 КонецЕсли;;
				ОбластьЗаголовок.Картинка 							=  СтруктураПараметров.КартинкаМакета;
				ОбластьЗаголовок.ГоризонтальноеПоложениеКартинки  	=  ГоризонтальноеПоложение.Центр;
				ОбластьЗаголовок.ВертикальноеПоложениеКартинки  	=  ВертикальноеПоложение.Центр;
				ОбластьЗаголовок.РазмерКартинки 				  	=  РазмерКартинки.РеальныйРазмер;
				КартинкаВыведена                                    =  Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТзОтборовТекущегоУровня = Неопределено Тогда
			ТзОтборовТекущегоУровня = ПараметрыОтбора.СкопироватьКолонки();
			ТзОтборовТекущегоУровня.Колонки.Добавить("ИмяОбласти");
		КонецЕсли;
				
		Для Каждого СтрОтбор Из ПараметрыОтбора Цикл
			Если СтруктураИспользованныхАналитик.Свойство(СтрОтбор.ПолеКод) Тогда
				нОтбор = ТзОтборовТекущегоУровня.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрОтбор);
				нОтбор.ИмяОбласти =  ИмяОбласти;
			КонецЕсли;
		КонецЦикла;	

		Если ТипЗнч(ДеревоСтруктуры)  = Тип("ДеревоЗначений") Тогда
			КопияСтруктуры = ДеревоСтруктуры.Скопировать();		
		Иначе
			КопияСтруктуры = ДеревоСтруктуры.Владелец().Скопировать();
		КонецЕсли;
		
		ТекСтрока      = КопияСтруктуры.Строки.НайтиСтроки(Новый Структура("УидМакета",СтрокаДерева.УидМакета),Истина)[0];
		
		ОбновитьОбластиМакетаСтрок(ТекСтрока.Родитель,МакетРаскрытий);
		
		СтрокиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,СтрокаДерева,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня,КартинкаВыведена);					
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьОбластиМакетаСтрок(СтрокаРодитель,МакетРаскрытий)
			
	Если  (НЕ СтрокаРодитель = Неопределено) И  (ЗначениеЗАполнено(СтрокаРодитель.СтруктураАналитикСтрока)) Тогда			 
		 ОбластьРодитель = МакетРаскрытий.Область(СтрокаРодитель.УидМакета);
		 ОбластьРодитель.Имя = "";
		 НоваяОбластьРодитель = МакетРаскрытий.Область(ОбластьРодитель.Верх,0,МакетРаскрытий.ВысотаТаблицы,0);
		 НоваяОбластьРодитель.Имя = СтрокаРодитель.УидМакета;
		 ОбновитьОбластиМакетаСтрок(СтрокаРодитель.Родитель,МакетРаскрытий);
	КонецЕсли;	
	 	 
КонецПроцедуры	

Процедура КолонкиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,ДеревоСтруктуры,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня=Неопределено,КартинкаВыведена)
	
	
	МакетТекущейОбласти 		= СтруктураПараметров.МакетТекущейОбласти;
	ПараметрыОтбора				= СтруктураПараметров.ПараметрыОтбора;
	Сортировки          		= СтруктураПараметров.Сортировки;
	МакетРаскрытий      		= СтруктураПараметров.МакетРаскрытий;
    НачалоОбластиЗаголовка      = СтруктураПараметров.НачалоОбластиЗаголовка;
    СтруктураОдинаковыхИмен     = СтруктураПараметров.СтруктураОдинаковыхИмен;

	
	Для Каждого СтрокаДерева Из ДеревоСтруктуры.Строки Цикл
				
		Если НЕ ЗначениеЗаполнено(СтрокаДерева.СтруктураАналитикСтрока) Тогда
			КолонкиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,СтрокаДерева,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня,КартинкаВыведена);	
			Продолжить;
		КонецЕсли;	
		
		ОбластьПриемник = МакетРаскрытий.Область(0,МакетРаскрытий.ШиринаТаблицы+1,0,МакетРаскрытий.ШиринаТаблицы+(МакетТекущейОбласти.Право-МакетТекущейОбласти.Лево)+1);
		МакетРаскрытий.ВставитьОбласть(МакетТекущейОбласти,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		СтруктураАналитик               = ЗначениеИзСтрокиВнутр(СтрокаДерева.СтруктураАналитикСтрока);
		ИмяОбласти                      = ПолучитьИмяОбластиПоСтруктуреАналитик(СтруктураАналитик,СтруктураПараметров.ПолеТабличногоДокументаМакет,СтруктураОдинаковыхИмен);
		
		Если НачалоОбластиЗаголовка>0 Тогда
			ОбластьЗаголовка = МакетРаскрытий.Область(НачалоОбластиЗаголовка,МакетРаскрытий.ШиринаТаблицы,НачалоОбластиЗаголовка,МакетРаскрытий.ШиринаТаблицы);
			
			ОбластьЗаголовка.Текст = ПолучитьВыражениеПолейаналитикПоУмолчанию(СтруктураАналитик);
						
			ОбластьЗаголовка.Отступ = 2+СтрокаДерева.Уровень()*2;
		КонецЕсли;
		
		СтруктураНастроекОбласти 	= Новый Структура;
		СтруктураНастроекОбласти.Вставить("ПараметрыОтбора",ЗначениеВстрокуВнутр(ПараметрыОтбора));
				
		НастройкиАналитикРаскрытия 		= Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
		
		Для Каждого СтрАналитика Из СтруктураАналитик Цикл
			
			Если СтрАналитика.Ключ = "ПериодОтчета" Тогда
				нАналитика = НастройкиАналитикРаскрытия.Добавить();
				нАналитика.АналитикаКод 			= "ПериодОтчета";
				нАналитика.Пометка		 			= Истина;
				нАналитика.АналитикаПредставление 	= "ПериодОтчета";
				нАналитика.АналитикаТипСтрока 		= "СправочникСсылка.Периоды";
				нАналитика.ЭтоАналитикаВерсии 		= Истина;
				ТекАналитикаПоСортировке 			= 	"ПериодОтчета.ДатаНачала";
				нАналитика.АналитикаСортировка 	=ТекАналитикаПоСортировке;		
				нАналитика.ПорядокАналитики     = 1;
				нАналитика.ИерархииАналитики	= СтрАналитика.Значение[0].ИерархииАналитики;
			Иначе	
				ТекАналитикаПоОтбору = ПараметрыОтбора.НайтиСтроки(Новый Структура("ПолеКод",СтрАналитика.Ключ))[0];
				нАналитика = НастройкиАналитикРаскрытия.Добавить();
				нАналитика.АналитикаКод 			= ТекАналитикаПоОтбору.ПолеКод;
				нАналитика.Пометка		 			= Истина;
				нАналитика.АналитикаПредставление 	= ТекАналитикаПоОтбору.Поле;
				нАналитика.АналитикаТипСтрока 		= ТекАналитикаПоОтбору.ТипЗначенияСтрока;
				Если нАналитика.АналитикаКод = "ПериодОтчета" ИЛИ  нАналитика.АналитикаКод = "Сценарий" ИЛИ нАналитика.АналитикаКод = "Организация" ИЛИ нАналитика.АналитикаКод = "Проект" Тогда
					нАналитика.ЭтоАналитикаВерсии 		= Истина;
				КонецЕсли;
				ТекАналитикаПоСортировке = Сортировки[ТекАналитикаПоОтбору.ПолеКод];
				нАналитика.АналитикаСортировка 	=ТекАналитикаПоСортировке;
				нАналитика.ПорядокАналитики     = ТекАналитикаПоОтбору.ПорядокОтбора;
				нАналитика.ИерархииАналитики	= СтрАналитика.Значение[0].ИерархииАналитики;
			КонецЕсли;
			
			СтруктураИспользованныхАналитик.Вставить(нАналитика.АналитикаКод);
			
		КонецЦикла;	
			
		СтрНастройкиАналитикРаскрытия  = ЗначениеВСтрокуВнутр(НастройкиАналитикРаскрытия);	
		СтруктураНастроекОбласти.Вставить("НастройкиАналитикРаскрытия",СтрНастройкиАналитикРаскрытия);
		СтруктураНастроекОбласти.Вставить("ПараметрыИерархииАналитик",ЗначениеВстрокуВнутр(СтруктураПараметров.СтруктураИерархии));
		
		СтрокаДерева.УидМакета 		= ИмяОбласти; 	
		ОбластьПриемник.Имя 		= ИмяОбласти;		
		ЯччеквМакетеОбласти = МакетТекущейОбласти.Право;
		
		Для Инд = МакетТекущейОбласти.Лево По МакетТекущейОбласти.Право   Цикл		
			ОбластьЗаголовок = МакетРаскрытий.Область(1,(МакетРаскрытий.ШиринаТаблицы-ЯччеквМакетеОбласти)+Инд,1,(МакетРаскрытий.ШиринаТаблицы-ЯччеквМакетеОбласти)+Инд);
			ОбластьЗаголовок.Расшифровка 						=  СтруктураНастроекОбласти;	
			Если Не КартинкаВыведена Тогда
				ОбластьЗаголовок.Картинка 							=  СтруктураПараметров.КартинкаМакета;
				ОбластьЗаголовок.ГоризонтальноеПоложениеКартинки  	=  ГоризонтальноеПоложение.Центр;
				ОбластьЗаголовок.ВертикальноеПоложениеКартинки  	=  ВертикальноеПоложение.Центр;
				ОбластьЗаголовок.РазмерКартинки 				  	=  РазмерКартинки.АвтоРазмер;
				КартинкаВыведена                                    =  Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ТзОтборовТекущегоУровня = Неопределено Тогда
			ТзОтборовТекущегоУровня = ПараметрыОтбора.СкопироватьКолонки();
			ТзОтборовТекущегоУровня.Колонки.Добавить("ИмяОбласти");
		КонецЕсли;
				
		Для Каждого СтрОтбор Из ПараметрыОтбора Цикл
			Если СтруктураИспользованныхАналитик.Свойство(СтрОтбор.ПолеКод) Тогда
				нОтбор = ТзОтборовТекущегоУровня.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрОтбор);
				нОтбор.ИмяОбласти =  ИмяОбласти;
			КонецЕсли;
		КонецЦикла;	


		Если ТипЗнч(ДеревоСтруктуры)  = Тип("ДеревоЗначений") Тогда
			КопияСтруктуры = ДеревоСтруктуры.Скопировать();		
		Иначе
			КопияСтруктуры = ДеревоСтруктуры.Владелец().Скопировать();
		КонецЕсли;
		
		ТекСтрока      = КопияСтруктуры.Строки.НайтиСтроки(Новый Структура("УидМакета",СтрокаДерева.УидМакета),Истина)[0];
		
		ОбновитьОбластиМакетаКолонок(ТекСтрока.Родитель,МакетРаскрытий);
		
		КолонкиОбойтиДеревоСтруктурыРекурсивно(СтруктураПараметров,СтрокаДерева,СтруктураИспользованныхАналитик,ТзОтборовТекущегоУровня,КартинкаВыведена);
					
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОбновитьОбластиМакетаКолонок(СтрокаРодитель,МакетРаскрытий)
			
	Если  (НЕ СтрокаРодитель = Неопределено)  И  (ЗначениеЗАполнено(СтрокаРодитель.СтруктураАналитикСтрока)) Тогда			 
		 ОбластьРодитель = МакетРаскрытий.Область(СтрокаРодитель.УидМакета);
		 ОбластьРодитель.Имя = "";
		 НоваяОбластьРодитель = МакетРаскрытий.Область(0,ОбластьРодитель.Лево,0,МакетРаскрытий.ШиринаТаблицы);
		 НоваяОбластьРодитель.Имя = СтрокаРодитель.УидМакета;
		 ОбновитьОбластиМакетаКолонок(СтрокаРодитель.Родитель,МакетРаскрытий);
	 КонецЕсли;	
	 	 
 КонецПроцедуры	
 
Процедура ПолучитьНовыеИменаПоказателей(ПолеТабличногоДокументаМакет,МакетТекущейОбласти,ПараметрыОтбора,текПоказатели)
	 	
	Если  МакетТекущейОбласти.Верх =0 Тогда	
		 Верх  = 1;
		 Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		 Право = МакетТекущейОбласти.Право;	 
		 Лево  = МакетТекущейОбласти.Лево;
		 ТипМакета = "Колонки";
	 Иначе	 	
		 Верх  = МакетТекущейОбласти.Верх;
		 Низ   = МакетТекущейОбласти.Низ;
		 Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;	 
		 Лево  = 1;
		 ТипМакета = "Строки";
	 КонецЕсли;	
	 
	 Для ИндСтроки = Верх По Низ Цикл		
		 Для ИндКолонки = Лево По Право Цикл	
			 ТекЯчейка =  ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
			 Если  ТипЗнч(ТекЯчейка.Расшифровка) = Тип("Структура") И  ТекЯчейка.Расшифровка.Свойство("Ссылка") Тогда
				 тПоказатель   = текПоказатели.Найти(ТекЯчейка.Расшифровка.Ссылка,"Ссылка"); 
				 ТекЯчейка.Имя = ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаМакет,СокрП(тПоказатель.ВидОтчетаКод),СокрП(тПоказатель.ПоказательКод)); 
			 ИначеЕсли  ТипЗнч(ТекЯчейка.Расшифровка) = Тип("Структура") И ТекЯчейка.Расшифровка.Свойство("ТекстФормулы") Тогда	 
				 ТекЯчейка.Имя = "Формула_"+СтрЗаменить(Новый УникальныйИдентификатор,"-","");					 
			 КонецЕсли;		
		 КонецЦикла;	
	 КонецЦикла;	
	 	 
КонецПроцедуры	 
 
Процедура ОчиститьИменаПоказателейПредв(МакетРаскрытий)
	 	
	МассивУдаляемыхИмен = Новый Массив;
	
	Для Каждого Обл Из МакетРаскрытий.Области Цикл
		 Если Обл.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Прямоугольник И ТипЗнч(Обл.Расшифровка) = Тип("Структура") Тогда	
			  Если Обл.Расшифровка.Свойство("Ссылка") ИЛИ Обл.Расшифровка.Свойство("ТекстФормулы") Тогда
				  МассивУдаляемыхИмен.Добавить(Обл.Имя);
			  КонецЕсли;	
		 КонецЕсли;	 
	 КонецЦикла;	
	 
	 Для Каждого ОблИмя Из МассивУдаляемыхИмен Цикл
		  МакетРаскрытий.Область(ОблИмя).Имя = "";
	 КонецЦикла	 
		  
КонецПроцедуры	 
 
Функция ПолучитьВыражениеПолейАналитикПоУмолчанию(СтруктураАналитик)
	
	ТекстАналитик = "";
	Для Каждого Поле Из СтруктураАналитик Цикл		
		Если ТипЗнч(Поле.Значение) = Тип("Строка") Тогда
			ТекстАналитик = ТекстАналитик+"["+?(Поле.Значение = "Период","ПериодОтчета",Поле.Значение)+"] "		
		Иначе	
			ТекстАналитик = ТекстАналитик+"["+?(Поле.Значение[0].АналитикаПредставление = "Период","ПериодОтчета",Поле.Значение[0].АналитикаПредставление)+"] "		
		КонецЕсли;
	КонецЦикла;	
	
	Возврат ТекстАналитик;
	
КонецФункции	

Функция ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаМакет_,ВидОтчета,ПоказательКод) Экспорт
		
	ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки";
	
	ИндексОбласти = 1;
	
	Пока НЕ ПолеТабличногоДокументаМакет_.Области.Найти(ТекущееИмя) = Неопределено Цикл
		ТекущееИмя = "ВидОтчета_"+ВидОтчета +"_Показатель_"+ПоказательКод+"_ИндексЯчейки"+Формат(ИндексОбласти,"ЧГ=0");
		ИндексОбласти = ИндексОбласти+1;
	КонецЦикла;	
	
	Возврат ТекущееИмя;
		
КонецФункции

Функция ПолучитьИмяОбластиПоСтруктуреАналитик(СтруктураАналитик,ПолеТабличногоДокументаМакет,СтруктураОдинаковыхИмен) Экспорт
	
	СтрИмениОбласти = "";
	Для Каждого СтрАналитика Из СтруктураАналитик Цикл
		СтрАналитика_Значение = СтрАналитика.Значение[0].АналитикаПредставление;
		СтрИмениОбластиЭталон = "Раскрытие_"+ОбщегоНазначенияУх.ВернутьАлфавитноЦифровоеПредставление(СтрАналитика_Значение)+"_";
	КонецЦикла;
		
	СтрИмениОбласти = СтрИмениОбластиЭталон;
	
	Если НЕ СтруктураОдинаковыхИмен.Свойство(СтрИмениОбластиЭталон) Тогда
		ИндексОбласти = 1;
		Пока НЕ ПолеТабличногоДокументаМакет.Области.Найти(СтрИмениОбласти+Формат(ИндексОбласти,"ЧГ=0")) = Неопределено Цикл
			ИндексОбласти = ИндексОбласти+1;
		КонецЦикла;			
		СтруктураОдинаковыхИмен.Вставить(СтрИмениОбластиЭталон,ИндексОбласти);
	Иначе	
		ИндексОбласти = СтруктураОдинаковыхИмен[СтрИмениОбластиЭталон];
		ИндексОбласти = ИндексОбласти+1;
		СтруктураОдинаковыхИмен.Вставить(СтрИмениОбластиЭталон,ИндексОбласти);
	КонецЕсли;	
		
	СтрИмениОбласти = СтрИмениОбластиЭталон+Формат(ИндексОбласти,"ЧГ=0");
	
	Возврат СтрИмениОбласти;
	
КонецФункции	

#КонецОбласти


#Область СохранениеМакетаМП_Бланка

Процедура СохранитьМакетМногопериодногоБланка(Приемник,ПолеТабличногоДокументаМакет,ОбъектАБ,УникальныйИдентификатор,Отказ,МакетДляВыводаПоказателей = Неопределено) Экспорт
			
	ОбластиВхождения = Новый СписокЗначений;
		
	ОбъектАБ.КэшИменОбластейПоказателей.Очистить();
	ОбъектАБ.КэшИменФормул.Очистить();
	ОбъектАБ.РасшифровкаФормулОбластейПоказателей.Очистить();	
	ОбъектАБ.КэшГруппОтборовПоказателей.Очистить();
	ОбъектАБ.РасшифровкаГруппОтборов.Очистить();
	ОбъектАБ.КэшРаскрываемыхОбластей.Очистить();
	ОбъектАБ.НастройкиРаскрываемыхОбластей.Очистить();
	
	ТабПоказателей = Новый ТаблицаЗначений;
	ТабПоказателей.Колонки.Добавить("ПоказательСсылка",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		
	Если  МакетДляВыводаПоказателей = Неопределено Тогда
		МакетДляВыводаПоказателей = Новый ТабличныйДокумент;
	КонецЕсли;
	
	МакетДляВыводаПоказателей.Вывести(ПолеТабличногоДокументаМакет);
	
	ТабОперандов = Новый ТаблицаЗначений;
	ТабОперандов.Колонки.Добавить("ПоказательСсылка",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
    ТабОперандов.Колонки.Добавить("ИмяОбласти");
	ТабОперандов.Колонки.Добавить("ИмяВФормуле");
    ТабОперандов.Колонки.Добавить("ИндексПоказателя");
    ТабОперандов.Колонки.Добавить("УидГруппыОтборов");
	
	КэшРаскрываемыхОбластейСтрок  	= Новый Структура;
	КэшРаскрываемыхОбластейКолонок  = Новый Структура;

	
	тСоставОбластейРаскрытия 		= ОбъектАБ.тСоставОбластейРаскрытия.Выгрузить();
	тСтруктураМакетовРаскрытия      = ОбъектАБ.тСтруктураМакетовРаскрытия.Выгрузить();
	
	
	Для Каждого СтрОбласть Из ПолеТабличногоДокументаМакет.Области Цикл
		
		Если 	СтрОбласть.Лево = 0 И НЕ СтрОбласть.Имя = "ОбластьНастроекРаскрытийКолонок" Тогда
			
			ОбластьНастроек   = ПолеТабличногоДокументаМакет.Область(СтрОбласть.Верх,1,СтрОбласть.Верх,1);
			Если ТипЗнч(ОбластьНастроек.Расшифровка) = Тип("Структура") И ОбластьНастроек.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда
				тРасшифровка = ОбластьНастроек.Расшифровка;
				тСостав      = ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.ПараметрыОтбора);
			Иначе
				Продолжить;
			КонецЕсли;
			
			НстрКэш  								= ОбъектАБ.КэшРаскрываемыхОбластей.Добавить();
			НстрКэш.УидГруппыОтборов 				= СтрОбласть.Имя;
			НстрКэш.ИмяОбласти         				= СтрОбласть.Имя;
			НстрКэш.ЗаголовокОбласти   				= СтрОбласть.Имя;
			НстрКэш.НастройкиАналитикРаскрытия     	= тРасшифровка.НастройкиАналитикРаскрытия;
			НстрКэш.Верх                           	= СтрОбласть.Верх;
			НстрКэш.Низ                          	= СтрОбласть.Низ;
				
			Для Каждого сСостав из тСостав Цикл
				НстрНастройка  					= ОбъектАБ.НастройкиРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(НстрНастройка,сСостав);
				НстрНастройка.УидГруппыОтборов    = СтрОбласть.Имя;
			КонецЦикла;		 
			
			Если ОбластьНастроек.Расшифровка.Свойство("НастройкиПериодов") Тогда
				тНастройкиПериодов  			= ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.НастройкиПериодов);
				тКэшНстроекПериодов 			= ОбъектАБ.КэшНастроекПериодов.Добавить();
				ЗаполнитьЗначенияСвойств(тКэшНстроекПериодов,тНастройкиПериодов[0]); 
				тКэшНстроекПериодов.ИмяОбласти  = СтрОбласть.Имя;
			КонецЕсли;	
			
			Если ОбластьНастроек.Расшифровка.Свойство("НастройкиИерархии") Тогда
				тНастройкиИерархии  			= ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.НастройкиИерархии);
				Для Каждого нИерархии Из тНастройкиИерархии Цикл 
					тКэшНастроекИерархий 			= ОбъектАБ.КэшНастроекИерархий.Добавить();
					ЗаполнитьЗначенияСвойств(тКэшНастроекИерархий,нИерархии.Значение[0]); 
					тКэшНастроекИерархий.ИмяОбласти  = СтрОбласть.Имя;
					тКэшНастроекИерархий.КодАналитики = нИерархии.Ключ;
				КонецЦикла;
			КонецЕсли;	
				
			ЗаполнитьСоставОбластиПоПоказателям("Строки",тСоставОбластейРаскрытия,ПолеТабличногоДокументаМакет,СтрОбласть.Имя);
			ЗаполнитьСтруктуруМакетаОбласти("Строки",тСтруктураМакетовРаскрытия,ПолеТабличногоДокументаМакет,СтрОбласть.Имя);
			
		ИначеЕсли 	СтрОбласть.Верх = 0 И НЕ СтрОбласть.Имя = "ОбластьНастроекРаскрытийСтрок" Тогда	
			
			ОбластьНастроек   = ПолеТабличногоДокументаМакет.Область(1,СтрОбласть.Лево,1,СтрОбласть.Лево);
			Если ТипЗнч(ОбластьНастроек.Расшифровка) = Тип("Структура") И ОбластьНастроек.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда
				тРасшифровка = ОбластьНастроек.Расшифровка;
				тСостав      = ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.ПараметрыОтбора);
			Иначе
				Продолжить;
			КонецЕсли;
			
			НстрКэш  								= ОбъектАБ.КэшРаскрываемыхОбластей.Добавить();
			НстрКэш.УидГруппыОтборов 				= СтрОбласть.Имя;
			НстрКэш.ИмяОбласти         				= СтрОбласть.Имя;
			НстрКэш.ЗаголовокОбласти   				= СтрОбласть.Имя;
			НстрКэш.НастройкиАналитикРаскрытия    	= тРасшифровка.НастройкиАналитикРаскрытия;
			НстрКэш.Лево                           	= СтрОбласть.Лево;
			НстрКэш.Право                          	= СтрОбласть.Право;
			
			Для Каждого сСостав из тСостав Цикл
				НстрНастройка  					= ОбъектАБ.НастройкиРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(НстрНастройка,сСостав);
				НстрНастройка.УидГруппыОтборов    = СтрОбласть.Имя;
			КонецЦикла;
			
			Если ОбластьНастроек.Расшифровка.Свойство("НастройкиПериодов") Тогда
				тНастройкиПериодов  			= ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.НастройкиПериодов);
				тКэшНстроекПериодов 			= ОбъектАБ.КэшНастроекПериодов.Добавить();
				ЗаполнитьЗначенияСвойств(тКэшНстроекПериодов,тНастройкиПериодов[0]); 
				тКэшНстроекПериодов.ИмяОбласти  = СтрОбласть.Имя;
			КонецЕсли;	
			
			Если ОбластьНастроек.Расшифровка.Свойство("НастройкиИерархии") Тогда
				тНастройкиИерархии  			= ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.НастройкиИерархии);
				Для Каждого нИерархии Из тНастройкиИерархии Цикл 
					тКэшНастроекИерархий 			= ОбъектАБ.КэшНастроекИерархий.Добавить();
					ЗаполнитьЗначенияСвойств(тКэшНастроекИерархий,нИерархии.Значение[0]); 
					тКэшНастроекИерархий.ИмяОбласти  = СтрОбласть.Имя;
					тКэшНастроекИерархий.КодАналитики = нИерархии.Ключ;
				КонецЦикла;
			КонецЕсли;	

			ЗаполнитьСоставОбластиПоПоказателям("Колонки",тСоставОбластейРаскрытия,ПолеТабличногоДокументаМакет,СтрОбласть.Имя);
			ЗаполнитьСтруктуруМакетаОбласти("Колонки",тСтруктураМакетовРаскрытия,ПолеТабличногоДокументаМакет,СтрОбласть.Имя);
			
		ИначеЕсли Лев(СтрОбласть.Имя,10) = "ВидОтчета_" Тогда
			
			нСтр = ТабПоказателей.Добавить();
			нстр.ПоказательСсылка = СтрОбласть.Расшифровка.Ссылка;
						
		ИначеЕсли  Лев(СтрОбласть.Имя,8) = "Формула_" Тогда  //Собираем операнды всех формул в кэш
			
			нКэшИмен 				= ОбъектАБ.КэшИменФормул.Добавить();
			нКэшИмен.ИмяОбласти     = СтрОбласть.Имя;

			
			ТекРасшифровкаФормулы = ЗначениеИзСтрокиВнутр(СтрОбласть.Расшифровка.РасшифровкаФормулы);
			Для Каждого СтрОперанд Из ТекРасшифровкаФормулы Цикл
				Нстр 							= ТабПоказателей.Добавить();
				Нстр.ПоказательСсылка   		= СтрОперанд.Показатель;
				
				НстрОперанд         		    = ТабОперандов.Добавить();
				НстрОперанд.ПоказательСсылка  	= СтрОперанд.Показатель;
				НстрОперанд.ИмяОбласти  		= СтрОбласть.Имя;
				НстрОперанд.ИмяВФормуле  		= СтрОперанд.ИмяВФормуле;
				НстрОперанд.ИндексПоказателя  	= СтрОперанд.ИндексПоказателя;				
			КонецЦикла;									
		КонецЕсли;			 
			
	КонецЦикла;
	
	
    тСоставОбластейРаскрытия.Индексы.Добавить("ИмяОбласти,ТипОбласти");
	тСоставОбластейРаскрытия.Индексы.Добавить("ИмяОбласти");
	тСоставОбластейРаскрытия.Индексы.Добавить("ИмяОбластиСтрок");
	тСоставОбластейРаскрытия.Индексы.Добавить("ИмяОбластиКолонок");
	
	тСтруктураМакетовРаскрытия.Индексы.Добавить("ИмяОбластиРаскрытия,ТипОбласти");
	тСтруктураМакетовРаскрытия.Индексы.Добавить("ИмяМакетаРаскрытия");

	ТабПоказателей.Свернуть("ПоказательСсылка");	
	ТзСвойстваПоказателей 					= АналитическийБланкГенерацияМакетаУХСервер.ПолучитьСвойстваВыбранныхПоказателей(ТабПоказателей);
	ТЗРасшифровкаОтборовГруппРаскрытия 		= ОбъектАБ.РасшифровкаГруппОтборов.Выгрузить(Новый Структура("УидГруппыОтборов","-"));
	ТЗРасшифровкаОтборовГруппРаскрытия.Индексы.Добавить("ПолеКод");

	СтруктураИменКэшей                      = Новый Структура;
	КоличествоОдинаковыхИмен                = Новый Структура;
	КэшОперандов                            = Новый Структура;
	
	МаксУид = 0;
	
	СтруктураДопПараметровУИД =  Новый Структура;
	СтруктураДопПараметровУИД.Вставить("КэшРаскрываемыхОбластейСтрок"	,КэшРаскрываемыхОбластейСтрок);
	СтруктураДопПараметровУИД.Вставить("КэшРаскрываемыхОбластейКолонок"	,КэшРаскрываемыхОбластейКолонок);
	СтруктураДопПараметровУИД.Вставить("тСоставОбластейРаскрытия"		,тСоставОбластейРаскрытия);
	
	СтруктураНемасштабируемых =  Новый Структура;
	
	Для Каждого СтрОбласть Из ПолеТабличногоДокументаМакет.Области Цикл
		
		Если Лев(СтрОбласть.Имя,10) = "ВидОтчета_" Тогда
			
			тСвойстваПоказателя = ТзСвойстваПоказателей.Найти(СтрОбласть.Расшифровка.Ссылка,"Ссылка");
			
			нСтрИмя = ОбъектАБ.КэшИменОбластейПоказателей.Добавить();
			нСтрИмя.ИмяОбласти 		= СтрОбласть.Имя;
			нСтрИмя.Показатель 		= СтрОбласть.Расшифровка.Ссылка;
			нСтрИмя.ПоказательКод   = СокрП(тСвойстваПоказателя.ПоказательКод);
			нСтрИмя.ВидОтчета 		= тСвойстваПоказателя.ВидОтчета;
			
			СтруктураЗначенийПоказателей = Новый Структура;
			СтруктураЗначенийПоказателей.Вставить(нСтрИмя.ПоказательКод,нСтрИмя.Показатель);
			
			ТЗРасшифровкаОтборовГруппРаскрытия.Очистить();		
					
			Если СтрОбласть.Расшифровка.Свойство("РасшифровкаГруппОтборов") Тогда
				Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ТЗРасшифровкаОтборовГруппРаскрытия,"");
				АналитическийБланкГенерацияМакетаУХСервер.ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборовГруппРаскрытия);
				
				ОтборыРасшифровка =  СтрОбласть.Расшифровка.РасшифровкаГруппОтборов;	
				Для Каждого ОтборРасшифровка Из ОтборыРасшифровка Цикл				
					НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборРасшифровка.Ключ));	
					Если НстрОтборов.Количество() = 1 Тогда
						СтрОтборСвойства = АналитическийБланкГенерацияМакетаУХСервер.ПрочитатьСтрокуОтборов(ОтборРасшифровка);
						ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
						НстрОтборов[0].ЗначениеОтбора = ?(СтрОтборСвойства.ЗначениеОтбораСтрока = "",СтрОтборСвойства.ЗначениеОтбораСтрока,ЗначениеИзСтрокиВнутр(СтрОтборСвойства.ЗначениеОтбораСтрока));
					КонецЕсли;		
				КонецЦикла;
			КонецЕсли;
			
			ТолькоСинтетика = Ложь;
			
			ТекУИД = АналитическийБланкГенерацияМакетаУХСервер.ДобавитьПоказательВГруппировки(ПолеТабличногоДокументаМакет,тСвойстваПоказателя,ТЗРасшифровкаОтборовГруппРаскрытия,СтрОбласть.Имя,ОбъектАБ,ТолькоСинтетика,МаксУид,СтруктураДопПараметровУИД);
				
			нСтрИмя.УидГруппыОтборов       = ТекУИД;
			нСтрИмя.ТолькоСинтетика        = ТолькоСинтетика;
			нСтрИмя.ВидОтчетаКод           = СокрП(тСвойстваПоказателя.ВидОтчетаКод);
			нСтрИмя.ИмяОбластиДляВывода    = нСтрИмя.ВидОтчетаКод+"_"+нСтрИмя.ПоказательКод+"_";
			
			Если тСвойстваПоказателя.НеМасштабируется Тогда
				СтруктураНемасштабируемых.Вставить(нСтрИмя.ИмяОбластиДляВывода+ТекУИД);
			КонецЕсли;
			
			СтруктураИменКэшей.Вставить(СтрОбласть.Имя,ТекУИД);
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Ссылка"	,нСтрИмя.Показатель);
			СтруктураРасшифровки.Вставить("УИД"		,ТекУИД);
			Если СтрОбласть.Расшифровка.Свойство("РасшифровкаГруппОтборов") ТОгда
				СтруктураРасшифровки.Вставить("РасшифровкаГруппОтборов"		,СтрОбласть.Расшифровка.РасшифровкаГруппОтборов);
			КонецЕсли;	
			Если СтрОбласть.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") ТОгда
				СтруктураРасшифровки.Вставить("ОтображатьСуммуВДопВалюте"		,СтрОбласть.Расшифровка.ОтображатьСуммуВДопВалюте);
			КонецЕсли;	
			
			СтрОбласть.Расшифровка =  СтруктураРасшифровки;

			Если НЕ ТолькоСинтетика Тогда
				 Продолжить;
			КонецЕсли;	
				
			ИмяОбластиДляВыводаСУид        =  нСтрИмя.ИмяОбластиДляВывода+ТекУИД;
			
			Если КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда	
				 ИндексИмени = КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид]+1;
				 КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид] = ИндексИмени;
			Иначе	
				ИндексИмени  = 1;
				КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,1);
			КонецЕсли;
			
			тОбластьМакетаДляВывода = МакетДляВыводаПоказателей.Область(СтрОбласть.Имя);
						
			Если тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
				
				тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				КэшОперандов.Вставить(ИмяОбластиДляВыводаСУид, 0);
				тОбластьМакетаДляВывода.СодержитЗначение = Истина;
				тОбластьМакетаДляВывода.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5);
				тОбластьМакетаДляВывода.Значение = 0;
				Если Не ЗначениеЗАполнено(тОбластьМакетаДляВывода.Формат) Тогда
					тОбластьМакетаДляВывода.Формат = "ЧН=0;ЧГ=3,0;ДФ=dd.MM.yyyy ;БЛ=; БИ=Да";
				КонецЕсли;
			ИначеЕсли тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
				
				тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
				КэшОперандов.Вставить(ИмяОбластиДляВыводаСУид, Неопределено);
				тОбластьМакетаДляВывода.СодержитЗначение = Истина;
				тОбластьМакетаДляВывода.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255);
				Если Не ЗначениеЗАполнено(тОбластьМакетаДляВывода.Формат) Тогда
					тОбластьМакетаДляВывода.Формат = "ЧН=0;ЧГ=3,0;ДФ=dd.MM.yyyy ;БЛ=; БИ=Да";
				КонецЕсли;

				
			ИначеЕсли тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда	
				
				тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				КэшОперандов.Вставить(ИмяОбластиДляВыводаСУид, Неопределено);
				тОбластьМакетаДляВывода.СодержитЗначение = Истина;
				тОбластьМакетаДляВывода.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
				Если Не ЗначениеЗАполнено(тОбластьМакетаДляВывода.Формат) Тогда
					тОбластьМакетаДляВывода.Формат = "ЧН=0;ЧГ=3,0;ДФ=dd.MM.yyyy ;БЛ=; БИ=Да";
				КонецЕсли;

				
			ИначеЕсли тСвойстваПоказателя.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
				
				тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
				КэшОперандов.Вставить(ИмяОбластиДляВыводаСУид, Неопределено);
				тОбластьМакетаДляВывода.СодержитЗначение = Истина;
				тОбластьМакетаДляВывода.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
				Если Не ЗначениеЗАполнено(тОбластьМакетаДляВывода.Формат) Тогда
					тОбластьМакетаДляВывода.Формат = "ЧН=0;ЧГ=3,0;ДФ=dd.MM.yyyy ;БЛ=; БИ=Да";
				КонецЕсли;

				
			КонецЕсли;
				
			тОбластьМакетаДляВывода.Имя = "Ст_"+ИмяОбластиДляВыводаСУид+"_"+ИндексИмени;
			
			СтруктураРасшифровки = Новый Структура;
			СтруктураРасшифровки.Вставить("Ссылка"	,нСтрИмя.Показатель);
			СтруктураРасшифровки.Вставить("УИД"		,ТекУИД);
			
			тОбластьМакетаДляВывода.Расшифровка =  СтруктураРасшифровки;
						
		КонецЕсли;
			
	КонецЦикла;

	ИндексОперанда = 0;
	
	глТзАналитикРаскрытия = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьАналитикиРаскрытияПоказателей(ТабОперандов.ВыгрузитьКолонку("ПоказательСсылка"));
	
	СтруктураТопологии = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьТопологиюОбластейРаскрытия(ПолеТабличногоДокументаМакет);
	
	Для Каждого ТекФормула Из ТабОперандов Цикл 
		
		ОбластьФормула = ПолеТабличногоДокументаМакет.Область(ТекФормула.ИмяОбласти);
		
		тСвойстваПоказателя = ТзСвойстваПоказателей.Найти(ТекФормула.ПоказательСсылка,"Ссылка");
		
		ТЗРасшифровкаОтборовГруппРаскрытия.Очистить();
		
		Если ОбластьФормула.Расшифровка.Свойство("РасшифровкаГруппОтборовОперандов") Тогда 
				
			РасшифровкаОперандовФормулы 		= ЗначениеИзСтрокиВнутр(ОбластьФормула.Расшифровка.РасшифровкаГруппОтборовОперандов);
			текРасшифровкаОперандовФормулы      = РасшифровкаОперандовФормулы.НайтиСтроки(Новый Структура("ИмяОперанда",ТекФормула.ИмяВФормуле));
			
			Обработки.АналитическийБланк.ЗполнитьПервоначальныйКэшОтборов(ТЗРасшифровкаОтборовГруппРаскрытия,"");			
			
			СтруктураЗначенийПоказателей = Новый Структура;
			СтруктураЗначенийПоказателей.Вставить(СокрП(тСвойстваПоказателя.ПоказательКод),ТекФормула.ПоказательСсылка);

			эТзАналитикРаскрытия = глТзАналитикРаскрытия.Скопировать(Новый Структура("Показатель",ТекФормула.ПоказательСсылка));			
			АналитическийБланкГенерацияМакетаУХСервер.ДополнитьОтборыАналитикамиРаскрытия(СтруктураЗначенийПоказателей,ТЗРасшифровкаОтборовГруппРаскрытия,эТзАналитикРаскрытия);

			Для Каждого ОтборРасшифровка Из текРасшифровкаОперандовФормулы Цикл				
				НстрОтборов =  ТЗРасшифровкаОтборовГруппРаскрытия.НайтиСтроки(Новый Структура("ПолеКод",ОтборРасшифровка.Ключ));	
				Если НстрОтборов.Количество() = 1 Тогда
					СтрОтборСвойства = АналитическийБланкГенерацияМакетаУХСервер.ПрочитатьСтрокуОтборов(ОтборРасшифровка);
					ЗаполнитьЗначенияСвойств(НстрОтборов[0],СтрОтборСвойства);	 				
					НстрОтборов[0].ЗначениеОтбора = ?(СтрОтборСвойства.ЗначениеОтбораСтрока = "",СтрОтборСвойства.ЗначениеОтбораСтрока,ЗначениеИзСтрокиВнутр(СтрОтборСвойства.ЗначениеОтбораСтрока));
				КонецЕсли;		
			КонецЦикла;
			
		КонецЕсли;
		
		ТолькоСинтетика = Ложь;
		ТекУИД = АналитическийБланкГенерацияМакетаУХСервер.ДобавитьПоказательВГруппировки(ПолеТабличногоДокументаМакет,тСвойстваПоказателя,ТЗРасшифровкаОтборовГруппРаскрытия,ОбластьФормула.Имя,ОбъектАБ,ТолькоСинтетика,МаксУид,СтруктураТопологии);
		
		ИмяОбластиДляВыводаСУид        =  СокрП(тСвойстваПоказателя.ВидОтчетаКод)+"_"+СокрП(тСвойстваПоказателя.ПоказательКод)+"_"+ТекУИД;
		
		Если НЕ КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда // не было такого показателя 	
			КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,-1);
			КэшОперандов.Вставить(ИмяОбластиДляВыводаСУид,0);
		КонецЕсли;	
		
		
		нСтрИмя = ОбъектАБ.КэшИменОбластейПоказателей.Добавить();
		нСтрИмя.ИмяОбласти 			   = ТекФормула.ИмяОбласти+Формат(ИндексОперанда,"ЧГ=0");
		нСтрИмя.Показатель 			   = ТекФормула.ПоказательСсылка;
		нСтрИмя.ПоказательКод   	   = СокрП(тСвойстваПоказателя.ПоказательКод);
		нСтрИмя.ВидОтчета 			   = тСвойстваПоказателя.ВидОтчета;
		нСтрИмя.УидГруппыОтборов       = ТекУИД;
		нСтрИмя.ТолькоСинтетика        = ТолькоСинтетика;
		нСтрИмя.ВидОтчетаКод           = СокрП(тСвойстваПоказателя.ВидОтчетаКод);
		нСтрИмя.ИмяОбластиДляВывода    = нСтрИмя.ВидОтчетаКод+"_"+нСтрИмя.ПоказательКод+"_";;	
		
		ИндексОперанда = ИндексОперанда+1;
		
		тОбластьМакетаДляВывода 							= МакетДляВыводаПоказателей.Область(ТекФормула.ИмяОбласти); 
		ТекстФормулыЯчейки            						= МакетДляВыводаПоказателей.Область(ТекФормула.ИмяОбласти).Расшифровка.ТекстФормулы;
		ТекстФормулыПриведенный 							= СтрЗаменить(ТекстФормулыЯчейки,"["+ТекФормула.ИмяВФормуле+"]","КэшОперандов."+ИмяОбластиДляВыводаСУид);
		тОбластьМакетаДляВывода.Расшифровка				 	= Новый Структура("ТекстФормулы,УидФормулы",ТекстФормулыПриведенный,тОбластьМакетаДляВывода.Имя);
		
		тОбластьМакетаДляВывода.СодержитЗначение = Истина;
		тОбластьМакетаДляВывода.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5);
		тОбластьМакетаДляВывода.Значение = 0;
		Если Не ЗначениеЗАполнено(тОбластьМакетаДляВывода.Формат) Тогда
			тОбластьМакетаДляВывода.Формат = "ЧН=0;ЧГ=3,0;ДФ=dd.MM.yyyy ;БЛ=; БИ=Да";
		КонецЕсли;

		ТекФормула.УидГруппыОтборов = ТекУИД;
			
	КонецЦикла;

	
	ТабОперандов.Свернуть("ИмяВФормуле,УидГруппыОтборов");
	ТабОперандов.Индексы.Добавить("ИмяВФормуле");
	
	ОбъектАБ.ТзСвойстваПоказателейАдрес  		= ПоместитьВоВременноеХранилище(ТзСвойстваПоказателей		,УникальныйИдентификатор);
	ОбъектАБ.СтруктураИменКэшейАдрес     		= ПоместитьВоВременноеХранилище(СтруктураИменКэшей			,УникальныйИдентификатор);
	ОбъектАБ.КэшОперандовАдрес     				= ПоместитьВоВременноеХранилище(КэшОперандов				,УникальныйИдентификатор);
	ОбъектАБ.КоличествоОдинаковыхИменАдрес     	= ПоместитьВоВременноеХранилище(КоличествоОдинаковыхИмен	,УникальныйИдентификатор);
	ОбъектАБ.ТабОперандовАдрес     				= ПоместитьВоВременноеХранилище(ТабОперандов				,УникальныйИдентификатор);	
	ОбъектАБ.НемасшатбируемыеАдрес     			= ПоместитьВоВременноеХранилище(СтруктураНемасштабируемых	,УникальныйИдентификатор);
	ОбъектАБ.тСоставОбластейРаскрытияАдрес     	= ПоместитьВоВременноеХранилище(тСоставОбластейРаскрытия	,УникальныйИдентификатор);
	ОбъектАБ.тСтруктураМакетовРаскрытияАдрес    = ПоместитьВоВременноеХранилище(тСтруктураМакетовРаскрытия	,УникальныйИдентификатор);
	
	АналитическийБланкГенерацияМакетаУХСервер.ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ,тСтруктураМакетовРаскрытия);		
	
	//Настройки можно либо записывать в регистры, либо возвращать в структуру - приемник 
	Если ТипЗнч(Приемник) = Тип("Структура") Тогда
		Обработки.АналитическийБланк.ВернутьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,МакетДляВыводаПоказателей,Приемник,ОбъектАБ,Отказ);		 
	Иначе	 
		Обработки.АналитическийБланк.ЗаписатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,МакетДляВыводаПоказателей,Приемник,ОбъектАБ,Отказ);
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПолучитьОбластиВхождения(ПолеТабличногоДокументаМакет,тОбласть,ОбластиВхождения) Экспорт
	
	ОбластиВхождения.Очистить();	
	ТекущаяЯчейка = тОбласть;
	
	//Находим пересекающиеся именованные области
	Для Каждого СтрОбласть Из ПолеТабличногоДокументаМакет.Области Цикл	
		Если 	СтрОбласть.Лево = 0 ИЛИ СтрОбласть.Верх = 0 Тогда	
			ОблРаскрытия = СтрОбласть;	
			Если ОблРаскрытия.Верх = 0 И ТекущаяЯчейка.Верх = 0  Тогда //Колонки	
				Если СтрОбласть.Право>=тОбласть.Лево И СтрОбласть.Лево<=тОбласть.Право Тогда
					 ОбластиВхождения.Добавить(СтрОбласть.Имя);
				КонецЕсли;	
			КонецЕсли;
			
			Если ОблРаскрытия.Лево = 0  И ТекущаяЯчейка.Лево = 0 Тогда //Строки	
				Если ОблРаскрытия.Верх <= ТекущаяЯчейка.Верх И ОблРаскрытия.Низ>= ТекущаяЯчейка.Низ Тогда
					ОбластиВхождения.Добавить(СтрОбласть.Имя,);		
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьСоставОбластиПоПоказателям(ТипОбласти,тСоставОбластейРаскрытия,ПолеТабличногоДокументаМакет,ОбластьИмя);
	
	тСоставОбласти = ПолеТабличногоДокументаМакет.Область(ОбластьИмя);		
	Если  ТипОбласти = "Строки" Тогда
		
		Для ИндСтроки  = тСоставОбласти.Верх По  тСоставОбласти.Низ Цикл
			Для ИндКолонки  = 1 По  ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
				СтрОбласть = ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
				нСтрОбласти 			= тСоставОбластейРаскрытия.Добавить();
				нСтрОбласти.ИмяОбласти 	= СтрОбласть.Имя;
				нСтрОбласти.ИмяОбластиСтрок 	= ОбластьИмя;
				нСтрОбласти.ТипОбласти 	= ТипОбласти;
			КонецЦикла;	
		КонецЦикла;	
	Иначе		
		Для ИндСтроки  = 1 По  ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл
			Для ИндКолонки  = тСоставОбласти.Лево По  тСоставОбласти.Право Цикл
				СтрОбласть = ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);
				нСтрОбласти 			= тСоставОбластейРаскрытия.Добавить();
				нСтрОбласти.ИмяОбласти 	= СтрОбласть.Имя;
				нСтрОбласти.ИмяОбластиСтрок 	= ОбластьИмя;
				нСтрОбласти.ТипОбласти 	= ТипОбласти;
			КонецЦикла;	
		КонецЦикла;	
	КонецЕсли;
		
КонецПроцедуры	

Процедура ЗаполнитьСтруктуруМакетаОбласти(ТипОбласти,тСтруктураМакетовРаскрытия,ПолеТабличногоДокументаМакет,ОбластьИмя);
	
	тСоставОбласти = ПолеТабличногоДокументаМакет.ПолучитьОбласть(ОбластьИмя);
	Для Каждого СтрОбласть Из тСоставОбласти.Области Цикл
		Если 	СтрОбласть.Лево = 0 И НЕ СтрОбласть.Имя = "ОбластьНастроекРаскрытийКолонок" Тогда   //Строки
			нСтрОбласти 					= тСтруктураМакетовРаскрытия.Добавить();
			нСтрОбласти.ИмяОбластиРаскрытия = ОбластьИмя;
			нСтрОбласти.ИмяМакетаРаскрытия 	= СтрОбласть.Имя;
			нСтрОбласти.ТипОбласти 			= ТипОбласти;		
			
		КонецЕсли;
		
		Если 	СтрОбласть.Верх = 0 И НЕ СтрОбласть.Имя = "ОбластьНастроекРаскрытийСтрок" Тогда   //Колонки
			нСтрОбласти 					= тСтруктураМакетовРаскрытия.Добавить();
			нСтрОбласти.ИмяОбластиРаскрытия = ОбластьИмя;
			нСтрОбласти.ИмяМакетаРаскрытия 	= СтрОбласть.Имя;
			нСтрОбласти.ТипОбласти 			= ТипОбласти;		
			
		КонецЕсли;
	
	КонецЦикла;	
		
КонецПроцедуры	

Процедура ОбновитьКэшРаскрытияОбластейПоМакету(ОбъектАБ,ПолеТабличногоДокументаМакет) Экспорт
	
	ОбъектАБ.КэшРаскрываемыхОбластей.Очистить();
	
	Для Каждого СтрОбласть Из ПолеТабличногоДокументаМакет.Области Цикл
		
		Если 	СтрОбласть.Лево = 0 И НЕ СтрОбласть.Имя = "ОбластьНастроекРаскрытийКолонок" Тогда
			
			ОбластьНастроек   = ПолеТабличногоДокументаМакет.Область(СтрОбласть.Верх,1,СтрОбласть.Верх,1);
			Если ТипЗнч(ОбластьНастроек.Расшифровка) = Тип("Структура") И ОбластьНастроек.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда
				тРасшифровка = ОбластьНастроек.Расшифровка;
				тСостав      = ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.ПараметрыОтбора);
			Иначе
				Продолжить;
			КонецЕсли;
			
			НстрКэш  								= ОбъектАБ.КэшРаскрываемыхОбластей.Добавить();
			НстрКэш.УидГруппыОтборов 				= СтрОбласть.Имя;
			НстрКэш.ИмяОбласти         				= СтрОбласть.Имя;
			НстрКэш.ЗаголовокОбласти   				= СтрОбласть.Имя;
			НстрКэш.НастройкиАналитикРаскрытия     	= тРасшифровка.НастройкиАналитикРаскрытия;
			НстрКэш.Верх                           	= СтрОбласть.Верх;
			НстрКэш.Низ                          	= СтрОбласть.Низ;
				
			 
		ИначеЕсли 	СтрОбласть.Верх = 0 И НЕ СтрОбласть.Имя = "ОбластьНастроекРаскрытийСтрок" Тогда	
			
			ОбластьНастроек   = ПолеТабличногоДокументаМакет.Область(1,СтрОбласть.Лево,1,СтрОбласть.Лево);
			Если ТипЗнч(ОбластьНастроек.Расшифровка) = Тип("Структура") И ОбластьНастроек.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда
				тРасшифровка = ОбластьНастроек.Расшифровка;
				тСостав      = ЗначениеИзСтрокиВнутр(ОбластьНастроек.Расшифровка.ПараметрыОтбора);
			Иначе
				Продолжить;
			КонецЕсли;
			
			НстрКэш  								= ОбъектАБ.КэшРаскрываемыхОбластей.Добавить();
			НстрКэш.УидГруппыОтборов 				= СтрОбласть.Имя;
			НстрКэш.ИмяОбласти         				= СтрОбласть.Имя;
			НстрКэш.ЗаголовокОбласти   				= СтрОбласть.Имя;
			НстрКэш.НастройкиАналитикРаскрытия    	= тРасшифровка.НастройкиАналитикРаскрытия;
			НстрКэш.Лево                           	= СтрОбласть.Лево;
			НстрКэш.Право                          	= СтрОбласть.Право;
					
		КонецЕсли;			 
			
	КонецЦикла;

	
КонецПроцедуры	

#КонецОбласти

#Область ГенерацияМногопериодногоБланка

// Возвращает таблицу значений, содержащую данные по показателям, строка и колонкам
// вида отчета ВидОтчетаВход.
Функция ПолучитьТаблицуПоказателейВидаОтчета(ВидОтчетаВход) Экспорт 
	
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.Код КАК ПоказательКод,
	               |	ПоказателиОтчетов.Владелец КАК ВидОтчетаСсылка,
	               |	ПоказателиОтчетов.Владелец.Код КАК ВидОтчетаКод,
	               |	ПоказателиОтчетов.Колонка КАК Колонка,
	               |	ПоказателиОтчетов.Строка КАК Строка,
	               |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	               |	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Владелец = &Владелец
	               |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Владелец", ВидОтчетаВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
	
КонецФункции		// ПолучитьТаблицуПоказателейВидаОтчета()


Процедура СгенерироватьШапкуТаблицы(глАналитик, тДеревоВыбранныхКолонок, ГлКлючейАналитик, НаименованиеБланкаВход, ПолеТабличногоДокументаМакетИзм) Экспорт
	
	ОбластьШапкаТаблицы = ПолеТабличногоДокументаМакетИзм.Область("ОбластьШапка");
	
	ЯчейкаШаблон =  ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх,2,ОбластьШапкаТаблицы.Верх,2);
	
	Для Каждого Аналитика Из ГлКлючейАналитик Цикл	
		ТекЯчейка =  ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы+1,ОбластьШапкаТаблицы.Верх+1,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы+1);
		ЗаполнитьЗначенияСвойств(ТекЯчейка,ЯчейкаШаблон);
		КодАналитики = Лев(Аналитика.Ключ,СтрНайти(Аналитика.Ключ,"_")-1);
		ИмяРеквизита = Прав(Аналитика.Ключ,СтрДлина(Аналитика.Ключ)-СтрНайти(Аналитика.Ключ,"_"));
		ЗначениеАналитики = глАналитик[КодАналитики];
		ТекЯчейка.Текст = Строка(ЗначениеАналитики)+"_"+ИмяРеквизита;		
		ТекЯчейка.Объединить();		
	КонецЦикла;	
	
    ИндексНачалаОбластиПоказателей = ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы; 
	
	Для Каждого Колонка Из тДеревоВыбранныхКолонок Цикл	
		ТекЯчейка =  ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы+1,ОбластьШапкаТаблицы.Верх+1,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы+1);
		ЗаполнитьЗначенияСвойств(ТекЯчейка,ЯчейкаШаблон);
				
		ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы,ОбластьШапкаТаблицы.Верх,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).Текст = "[ПериодОтчета]";
		ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх+1,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы,ОбластьШапкаТаблицы.Верх+1,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).Текст = Колонка.Представление;
		ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх+1,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы,ОбластьШапкаТаблицы.Верх+1,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ПолеТабличногоДокументаМакетИзм.Область(0,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы,0,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).ШиринаКолонки = 14;
	КонецЦикла;	

	ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы-(тДеревоВыбранныхКолонок.Количество()-1),ОбластьШапкаТаблицы.Верх,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).Объединить();

	
	ПолеТабличногоДокументаМакетИзм.Область(0,ИндексНачалаОбластиПоказателей+1,0,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).имя = "ОбластьКолонок";
	
	ПолеТабличногоДокументаМакетИзм.Область(0,1,0,ИндексНачалаОбластиПоказателей).имя = "ОбластьМакетаСтрок";

	ПолеТабличногоДокументаМакетИзм.Область(3,2).Текст = Строка(НаименованиеБланкаВход);
	
КонецПроцедуры		//СгенерироватьШапкуТаблицы()

Функция ПолучитьДанныеАналитикМногоПериодногоБланка(БланкДляОтображенияВход, ВидОтчетаВход, кэшРаскрытияПоказателейВход) Экспорт
	РезультатФункции = Новый Структура;
	глАналитик                      = Новый Структура;

	тАналитикиВидаОтчета = Новый Структура;
	Если НЕ БланкДляОтображенияВход Тогда
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			Если ЗначениеЗаполнено(ВидОтчетаВход["ВидАналитики"+Инд]) Тогда
				 тАналитикиВидаОтчета.Вставить(ВидОтчетаВход["ВидАналитики"+Инд].Код);
			КонецЕсли;			
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого Стр Из кэшРаскрытияПоказателейВход Цикл
		Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			Если ЗначениеЗаполнено(Стр["ВидАналитики"+Инд+"Код"]) Тогда
				Если тАналитикиВидаОтчета.Свойство(Стр["ВидАналитики"+Инд+"Код"]) Тогда
					Продолжить;
				КонецЕсли;		
				глАналитик.Вставить(Стр["ВидАналитики"+Инд+"Код"],Стр["ВидАналитики"+Инд]);
			КонецЕсли;		
			
			Если ЗначениеЗаполнено(Стр["ВидАналитикиВалюта"]) Тогда
				 глАналитик.Вставить(Стр["ВидАналитикиВалютаКод"],Стр["ВидАналитикиВалюта"]);
			КонецЕсли;	
			
		КонецЦикла;		
	КонецЦикла;	

	
	ГлКлючейАналитик = Новый Структура;
		
	Для Каждого Аналитика Из глАналитик Цикл	
		
		Если Аналитика.Значение.ТипЗначения.ПривестиЗначение() = Неопределено Тогда  //Составной тип
			
			Если БланкДляОтображенияВход Тогда
				ГлКлючейАналитик.Вставить(Аналитика.Ключ+"_Наименование","["+Аналитика.Ключ+".Наименование]");
			Иначе	
				РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
				
				Если РеквизитыПоиска.Количество() = 0 Тогда		
										
					СтрокаШаблона = НСтр("ru = 'У аналитики %1 отсутствуют ключевые поля. Необходимо открыть соответствующий элемент справочника ""Виды аналитик (Корпоративные)"" и включить флаг ""Ключ"" как минимум у одного поля.'");
					
					Если ЗначениеЗаполнено(СтрокаШаблона) тогда
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Аналитика.Значение));
					КонецЕсли;
					
				КонецЕсли;	
				
				Для Каждого Реквизит Из РеквизитыПоиска Цикл
					КлючПоискаПоАналитике = "["+Аналитика.Ключ+"."+Реквизит.ИмяРеквизита+"]";	
					ГлКлючейАналитик.Вставить(Аналитика.Ключ+"_"+Реквизит.ИмяРеквизита,КлючПоискаПоАналитике);
				КонецЦикла;	
			КонецЕсли;			
		Иначе	
			
			ИмяОбъекта=Аналитика.Значение.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();
			Если  СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
				
				Если БланкДляОтображенияВход Тогда
					ГлКлючейАналитик.Вставить(Аналитика.Ключ+"_Наименование","["+Аналитика.Ключ+".Наименование]");
				Иначе	
					РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
					
					Если РеквизитыПоиска.Количество() = 0 Тогда		
												
						СтрокаШаблона = НСтр("ru = 'У аналитики %1 отсутствуют ключевые поля. Необходимо открыть соответствующий элемент справочника ""Виды аналитик (Корпоративные)"" и включить флаг ""Ключ"" как минимум у одного поля.'");
						
						Если ЗначениеЗаполнено(СтрокаШаблона) тогда
							ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Аналитика.Значение));
						КонецЕсли;
						
					КонецЕсли;	
					
					Для Каждого Реквизит Из РеквизитыПоиска Цикл
						КлючПоискаПоАналитике = "["+Аналитика.Ключ+"."+Реквизит.ИмяРеквизита+"]";	
						ГлКлючейАналитик.Вставить(Аналитика.Ключ+"_"+Реквизит.ИмяРеквизита,КлючПоискаПоАналитике);
					КонецЦикла;	
				КонецЕсли;			
				
			ИначеЕсли СтрНайти(ИмяОбъекта,"Перечисление")>0 Тогда
				
				Если БланкДляОтображенияВход Тогда
					ГлКлючейАналитик.Вставить(Аналитика.Ключ+"_Наименование","["+Аналитика.Ключ+"]");
				Иначе	
					РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
					
					Если РеквизитыПоиска.Количество() = 0 Тогда		
												
						СтрокаШаблона = НСтр("ru = 'У аналитики %1 отсутствуют ключевые поля. Необходимо открыть соответствующий элемент справочника ""Виды аналитик (Корпоративные)"" и включить флаг ""Ключ"" как минимум у одного поля.'");
						
						Если ЗначениеЗаполнено(СтрокаШаблона) тогда
							ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Аналитика.Значение));
						КонецЕсли;
						
					КонецЕсли;	
					
					Для Каждого Реквизит Из РеквизитыПоиска Цикл
						КлючПоискаПоАналитике = "["+Аналитика.Ключ+"]";	
						ГлКлючейАналитик.Вставить(Аналитика.Ключ+"_"+Реквизит.ИмяРеквизита,КлючПоискаПоАналитике);
					КонецЦикла;	
				КонецЕсли;			
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	РезультатФункции.Вставить("глАналитик", глАналитик);
	РезультатФункции.Вставить("ГлКлючейАналитик", ГлКлючейАналитик);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьДанныеАналитикМногоПериодногоБланка()

Процедура ПодготовитьТаблицыПоДеревуРекурсивноИмпорт(тДеревоВыбранныхСтрок,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик,ВыводитьАналитику,ПолеТабличногоДокументаМакет,ОбъектАБ,БланкДляОтображенияВход)
		
	Для Каждого Стр Из тДеревоВыбранныхСтрок.Строки Цикл	
		Если Не Стр.Строка =  Нстр("ru = 'Выбранные строки'") Тогда			
			Если Стр.СтрокаВыбрана Тогда 
				
				СгенерироватьСтрокуМакетаИмпорт(Стр,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,ПолеТабличногоДокументаМакет);
				
				Если Стр.Уровень()>0 Тогда 
					ПолеТабличногоДокументаМакет.НачатьГруппуСтрок() 
				КонецЕсли;
								
				Если ВыводитьАналитику И ЗначениеЗаполнено(Стр.СтрокаГруппаРаскрытия) Тогда
					СгенерироватьСтрокуРаскрытияИмпорт(глАналитик,ГлКлючейАналитик,Стр.Строка,Стр.СтрокаГруппаРаскрытия,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик,ПолеТабличногоДокументаМакет,ОбъектАБ,БланкДляОтображенияВход);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;					
		
		ПодготовитьТаблицыПоДеревуРекурсивноИмпорт(Стр,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик,ВыводитьАналитику,ПолеТабличногоДокументаМакет,ОбъектАБ,БланкДляОтображенияВход);		
		Если Стр.Уровень()>0 Тогда 
			Попытка
				ПолеТабличногоДокументаМакет.ЗакончитьГруппуСтрок() 
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры

Процедура СгенерироватьСтрокуМакетаИмпорт(СтрокаОтчета, тДеревоВыбранныхКолонок, глАналитик, ГлКлючейАналитик, кэшРаскрытияПоказателей, текПоказатели, ПолеТабличногоДокументаМакетИзм)
	
	ОбластьШапкаТаблицы = ПолеТабличногоДокументаМакетИзм.Область("ОбластьШапка");	
	ТекВысота =  ПолеТабличногоДокументаМакетИзм.ВысотаТаблицы+1;
	ЯчейкаШаблон =  ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх+1,2,ОбластьШапкаТаблицы.Верх+1,2);
	//Макет самой строки
	ТекЯчейка =  ПолеТабличногоДокументаМакетИзм.Область(ТекВысота,2,ТекВысота,2);
	ТекЯчейка.Текст = СтрокаОтчета.СтрокаНаименование;
	ТекЯчейка.Имя =   "Строка_"+СокрП(СтрокаОтчета.СтрокаКод);
	ТекЯчейка.Шрифт   = Новый Шрифт(ТекЯчейка.Шрифт,,,Истина);
	ТекЯчейка.Отступ  = (СтрокаОтчета.Уровень()-1)*2;
		
	ИндексПоказателя = ГлКлючейАналитик.Количество()+1;
	Для Каждого Кол Из тДеревоВыбранныхКолонок Цикл
		Если СтрокаОтчета[СокрЛП(Кол.Код)] Тогда
			
			ТекЯчейка =  ПолеТабличногоДокументаМакетИзм.Область(ТекВысота,ИндексПоказателя+2,ТекВысота,ИндексПоказателя+2);
			ТекЯчейка.Текст = Кол.Код;
						
			СтрокаПоказатель = текПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",СтрокаОтчета.Строка,Кол.Ссылка));
			
			Если СтрокаПоказатель.Количество() = 1 Тогда
				СтрПоказатель =  СтрокаПоказатель[0];
				
				ТекЯчейка.Текст = СокрЛП(СтрПоказатель.ВидОтчетаКод) + "." +СокрЛП(СтрПоказатель.ПоказательКод);
								
				ТекЯчейка.РазмещениеТекста 	= ТипРазмещенияТекстаТабличногоДокумента.Обрезать;	
				ТекЯчейка.Имя 			 	= ПолучитьИмяСледующейОбластиСервер(ПолеТабличногоДокументаМакетИзм, СокрЛП(СтрПоказатель.ВидОтчетаКод), СокрЛП(СтрПоказатель.ПоказательКод)); 
				
				СтруктураРасшифровки = Новый Структура();
				СтруктураРасшифровки.Вставить("Ссылка"				,СтрПоказатель.Ссылка);
				
				ТекЯчейка.Расшифровка 	 = СтруктураРасшифровки;
				ТекЯчейка.ЦветФона       = Новый Цвет(244,236,197);
				
			Иначе
				
				ТекЯчейка.Текст = "Х";
				
			КонецЕсли;	
				
			ИндексПоказателя = ИндексПоказателя+1;
		Иначе	
			ИндексПоказателя = ИндексПоказателя+1;	
		КонецЕсли;							
	КонецЦикла;	
		
КонецПроцедуры	

Процедура СгенерироватьСтрокуРаскрытияИмпорт(глАналитик,ГлКлючейАналитик,СтрокаОтчета,СтрокаГруппаРаскрытия,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,ИерархияАналитик,ПолеТабличногоДокументаМакет,ОбъектАналитическогоБланка,БланкДляОтображенияВход)
		
	ПараметрыНовогоМакета = Новый Структура;
	
	ДеревоСтруктуры 	  = Новый ДеревоЗначений;
    ДеревоСтруктуры.Колонки.Добавить("АналитикаПредставление");
	ДеревоСтруктуры.Колонки.Добавить("СтруктураАналитикСтрока");
	ТекАналитики = СтрокаГруппаРаскрытия;
	
	КоличествоСтрокМакета 	= 1;
	НачалоОбластиЗаголовка	= 1;
	
	//Тут видимо получается текущая строка строка 
	МакетГруппировок        = ПолеТабличногоДокументаМакет.ПолучитьОбласть(ПолеТабличногоДокументаМакет.ВысотаТаблицы,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0);
	ИмяОбластиГруппировок   = "ОбластьГруппы_"+СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
	МакетГруппировок.Область(1,0,1,0).Имя = ИмяОбластиГруппировок;
	
	ПараметрыОтбора         = ОбъектАналитическогоБланка.РасшифровкаГруппОтборов.Выгрузить(Новый Структура("УидГруппыОтборов",Неопределено));
	
	//Зачищается шаблон
	Для Инд = 1 По МакетГруппировок.ШиринаТаблицы Цикл	
		ТекОбл = МакетГруппировок.Область(1,Инд,1,Инд);
		Если ТекОбл.Расшифровка = Неопределено Тогда
			 ТекОбл.Имя = "";
			 ТекОбл.Текст = "";			 
		КонецЕсли;		
	КонецЦикла;	
	
	СтруктураСортировки     = Новый Структура;
	СтруктураАналитик       = Новый Структура;
	тзСтруктураМакета       = Новый ТаблицаЗначений;
	тзСтруктураМакета.Колонки.Добавить("ВерхОбласти");
	тзСтруктураМакета.Колонки.Добавить("ЛевоОбласти");
    тзСтруктураМакета.Колонки.Добавить("ИмяОбласти");
	
	нСтрокаСтруктуры = тзСтруктураМакета.Добавить();
	нСтрокаСтруктуры.ВерхОбласти = 1;
	нСтрокаСтруктуры.ЛевоОбласти = 0;
    нСтрокаСтруктуры.ИмяОбласти  = ИмяОбластиГруппировок;
	
	//Берем все выводимые аналитики из глАналитик и собираем для текущей группы раскрытия по совпадающим все данные
	//А аналитик уровня ВО тут не должны появляться - это же макет ЭО!	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		
		Если Не ЗначениеЗаполнено(ТекАналитики["ВидАналитики"+Инд]) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого АСтр Из глАналитик Цикл
			
			Если ТекАналитики["ВидАналитики"+Инд] = АСтр.Значение Тогда	
				нПараметрОтбора = ПараметрыОтбора.Добавить();
				нПараметрОтбора.ЗначениеДляПроверкиСтрока 	= ЗначениеВСтрокуВнутр(Неопределено);
				нПараметрОтбора.ЗначениеОтбораСтрока 		= ЗначениеВСтрокуВнутр(Неопределено);
				нПараметрОтбора.Использовать 				= Истина;
				нПараметрОтбора.Отбор 						= "Отбор не производится";
				нПараметрОтбора.Поле 						= АСтр.Значение.Наименование;
				нПараметрОтбора.ПолеКод 					= АСтр.Ключ;
				нПараметрОтбора.ПорядокОтбора 				= 99;
			
				СвойстваАналитики = ПолучитьТипСортировкуАналитики(АСтр.Ключ,АСтр.Значение.ТипЗначения);
				
				МассивТиповСтрока  		= СвойстваАналитики.МассивТиповСтрока;
				ТипСтрока		   		= СвойстваАналитики.ТипСтрока;
				АналитикаСортировка 	= СвойстваАналитики.АналитикаСортировка;
				
				СтруктураСортировки.Вставить(АСтр.Ключ,Новый ПолеКомпоновкиДанных(СвойстваАналитики.АналитикаСортировка));

				нПараметрОтбора.ТипЗначенияСтрока 			= ТипСтрока;
				СтруктураАналитик.Вставить(АСтр.Ключ,АСтр.Значение.Наименование);
					
			КонецЕсли;	

		КонецЦикла;			
	КонецЦикла;	
	
	//Отдельно обрабатываем аналитику валюты.
	Если ТекАналитики.Валютная Тогда
		
		АСтр = глАналитик[ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код];
		
		нПараметрОтбора = ПараметрыОтбора.Добавить();
		нПараметрОтбора.ЗначениеДляПроверкиСтрока 	= ЗначениеВСтрокуВнутр(Неопределено);
		нПараметрОтбора.ЗначениеОтбораСтрока 		= ЗначениеВСтрокуВнутр(Неопределено);
		нПараметрОтбора.Использовать 				= Истина;
		нПараметрОтбора.Отбор 						= "Отбор не производится";
		нПараметрОтбора.Поле 						= АСтр.Наименование;
		нПараметрОтбора.ПолеКод 					= АСтр.Код;
		нПараметрОтбора.ПорядокОтбора 				= 99;
		ИмяОбъекта=АСтр.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();	
		
		СвойстваАналитики = ПолучитьТипСортировкуАналитики(АСтр.Код,АСтр.ТипЗначения);
		
		МассивТиповСтрока  		= СвойстваАналитики.МассивТиповСтрока;
		ТипСтрока		   		= СвойстваАналитики.ТипСтрока;
		АналитикаСортировка 	= СвойстваАналитики.АналитикаСортировка;
		
		СтруктураСортировки.Вставить(АСтр.Код,Новый ПолеКомпоновкиДанных(СвойстваАналитики.АналитикаСортировка));
		
		нПараметрОтбора.ТипЗначенияСтрока 			= ТипСтрока;
		СтруктураАналитик.Вставить(АСтр.Код,АСтр.Наименование);
	
	КонецЕсли;		
	
	Если  ИерархияАналитик Тогда	
		нСтрокаДерева         						  = ДеревоСтруктуры.Строки.Добавить();
		Для Каждого нСтруктура Из СтруктураАналитик Цикл
			СтруктураАналитик_ 	= Новый Структура;
			ТзОписанияСтруктуры = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
			нСтрСтруктуры       = ТзОписанияСтруктуры.Добавить();
			нСтрСтруктуры.АналитикаПредставление = нСтруктура.Значение;
			нСтрСтруктуры.АналитикаКод 			 = нСтруктура.Ключ;

			СтруктураАналитик_.Вставить(нСтруктура.Ключ,ТзОписанияСтруктуры);
			нСтрокаДерева.СтруктураАналитикСтрока = ЗначениеВСтрокуВнутр(СтруктураАналитик_);
			нСтрокаДерева = нСтрокаДерева.Строки.Добавить();
		КонецЦикла;			
	Иначе	
		нСтрокаДерева         						  = ДеревоСтруктуры.Строки.Добавить();
		СтруктураАналитик_ 	= Новый Структура;
		Для Каждого нСтруктура Из СтруктураАналитик Цикл
			ТзОписанияСтруктуры = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
			нСтрСтруктуры       = ТзОписанияСтруктуры.Добавить();
			нСтрСтруктуры.АналитикаПредставление = нСтруктура.Значение;
			нСтрСтруктуры.АналитикаКод 			 = нСтруктура.Ключ;
			СтруктураАналитик_.Вставить(нСтруктура.Ключ,ТзОписанияСтруктуры);
		КонецЦикла;
		нСтрокаДерева.СтруктураАналитикСтрока         = ЗначениеВСтрокуВнутр(СтруктураАналитик_);	
	КонецЕсли;
	
	ПараметрыНовогоМакета.Вставить("СтруктураАналитикАдрес"		,ПоместитьВоВременноеХранилище(ДеревоСтруктуры,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("КоличествоСтрокМакета"		,1);
	Если ИерархияАналитик Тогда
		ПараметрыНовогоМакета.Вставить("НачалоОбластиЗаголовка"		,2);
	Иначе	
		ПараметрыНовогоМакета.Вставить("НачалоОбластиЗаголовка"		,1);
	КонецЕсли;	
	ПараметрыНовогоМакета.Вставить("МакетГруппировок"			,ПоместитьВоВременноеХранилище(МакетГруппировок,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("ПараметрыОтбораАдрес"		,ПоместитьВоВременноеХранилище(ПараметрыОтбора,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("ПараметрыОтбораАдрес"		,ПоместитьВоВременноеХранилище(ПараметрыОтбора,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("СортировкиАдрес"		    ,ПоместитьВоВременноеХранилище(СтруктураСортировки,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("тзСтруктураМакетаАдрес"		,ПоместитьВоВременноеХранилище(тзСтруктураМакета,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("текПоказатели"				,ПоместитьВоВременноеХранилище(текПоказатели,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("СтруктураИерархии"			,Новый Структура);

	
	ТекВысота =  ПолеТабличногоДокументаМакет.ВысотаТаблицы;
	
	СформироватьМакетыРаскрытияМастер(ПараметрыНовогоМакета,ТекВысота,0,СтруктураОдинаковыхИмен,Ложь,КартинкаМакета,Истина,ПолеТабличногоДокументаМакет);
		
	Если  ИерархияАналитик Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьСтрокиРаскрытия = ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,0,ПолеТабличногоДокументаМакет.ВысотаТаблицы,0);
	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,1).Текст = "";
	
	ИндексПоля = 3;
		
	Для Каждого  Аналитика Из глАналитик Цикл
		ФлАналитики = Ложь;
		
		//Для перечислений и справочников необходимы разные ключи поиска аналитики
		//Для составных типов берем ключи по справочникам.
		Если  Аналитика.Значение.ТипЗначения.ПривестиЗначение() = Неопределено Тогда
			ЭтоПеречисление = Ложь;
		Иначе	
			ИмяОбъекта=Аналитика.Значение.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();	
			Если СтрНайти(ИмяОбъекта,"Перечисление")>0 Тогда
				ЭтоПеречисление = Истина;
			Иначе	 
				ЭтоПеречисление = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
			
			Если Не ЗначениеЗаполнено(ТекАналитики["ВидАналитики"+Инд]) Тогда
				 Продолжить;
			КонецЕсли;	
			
			Если ТекАналитики["ВидАналитики"+Инд] = Аналитика.Значение Тогда		
				Если  БланкДляОтображенияВход Тогда
					КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"]");
					
					ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
										
					ИндексПоля = ИндексПоля+1;
					ФлАналитики = Истина;
				Иначе	
					РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
					Для Каждого Реквизит Из РеквизитыПоиска Цикл	
						КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"."+Реквизит.ИмяРеквизита+"]");	
						
						ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
												
						ИндексПоля = ИндексПоля+1;	
					КонецЦикла;	
					ФлАналитики = Истина;
				КонецЕсли;			
			КонецЕсли;			
		КонецЦикла;	
		
		Если ТекАналитики.Валютная И Аналитика.Значение = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты Тогда 
			Если  БланкДляОтображенияВход Тогда	
				КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"]");
				
				ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
								
				ФлАналитики = Истина;
				ИндексПоля = ИндексПоля+1;	
			Иначе	
				РеквизитыПоиска = Аналитика.Значение.РеквизитыДляСинхронизации.Выгрузить();
				Для Каждого Реквизит Из РеквизитыПоиска Цикл	
					КлючПоискаПоАналитике = ?(ЭтоПеречисление,"["+Аналитика.Значение+"]","["+Аналитика.Значение+"."+Реквизит.ИмяРеквизита+"]");	
					
					ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ИндексПоля).Текст = КлючПоискаПоАналитике;
										
					ИндексПоля = ИндексПоля+1;	
				КонецЦикла;	
				ФлАналитики = Истина;				
			КонецЕсли;	
		КонецЕсли;

		
		Если Не ФлАналитики Тогда
			ИндексПоля = ИндексПоля+1;	
		КонецЕсли;	
	КонецЦикла;	
	
		
КонецПроцедуры	

Процедура СформироватьМакетыРаскрытияМастер(Результат,Верх,Лево,СтруктураОдинаковыхИмен,ПроверятьНаличиеСлужебныхОбластей = Истина,КартинкаМакета = Неопределено,РежимГенерацииМакета = Ложь,ПолеТабличногоДокументаМакетИзм)
		
	Если ПроверятьНаличиеСлужебныхОбластей Тогда
		ПроверитьНаличиеСлужебныхОбластей(ПолеТабличногоДокументаМакетИзм);
	КонецЕсли;
	
	АналитическийБланкГенерацияМакетаУХСервер.СформироватьМакетыРаскрытия(ПолеТабличногоДокументаМакетИзм,Результат,Верх,Лево,СтруктураОдинаковыхИмен,КартинкаМакета,РежимГенерацииМакета);

КонецПроцедуры	

Процедура ПроверитьНаличиеСлужебныхОбластей(ПолеТабличногоДокументаМакетИзм, ТихийРежим = Ложь) Экспорт
	
	МакетСлужебныхОбластей = Справочники.БланкиОтчетов.ПолучитьМакет("ШаблонСлужебныхОбластей");
	
	Если НЕ ПолеТабличногоДокументаМакетИзм.Область(1,0,1,0).Имя =  "ОбластьНастроекРаскрытийКолонок" Тогда
		
		ОбластьИсточник = МакетСлужебныхОбластей.Область("ОбластьНастроекРаскрытийКолонок");
		ОбластьПриемник = ПолеТабличногоДокументаМакетИзм.Область(1,0,1,0);
		ПолеТабличногоДокументаМакетИзм.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru = 'Добавлена служебная область, содержащая настройки раскрытий колонок'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
	КонецЕсли;	
		
	Если НЕ ПолеТабличногоДокументаМакетИзм.Область(0,1,0,1).Имя =  "ОбластьНастроекРаскрытийСтрок" Тогда
		
		ОбластьИсточник = МакетСлужебныхОбластей.Область("ОбластьНастроекРаскрытийСтрок");
		ОбластьПриемник = ПолеТабличногоДокументаМакетИзм.Область(0,1,0,1);
		ПолеТабличногоДокументаМакетИзм.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения = НСтр("ru = 'Добавлена служебная область, содержащая настройки раскрытий строк'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура СгенерироватьПериодыРаскрытияИмпорт(тДеревоВыбранныхКолонок, текПоказатели,СтруктураОдинаковыхИмен,ОбъектАБ, ПолеТабличногоДокументаМакетИзм) Экспорт 
		
	ПараметрыНовогоМакета = Новый Структура;
	
	ДеревоСтруктуры 	  = Новый ДеревоЗначений;;
    ДеревоСтруктуры.Колонки.Добавить("АналитикаПредставление");
	ДеревоСтруктуры.Колонки.Добавить("СтруктураАналитикСтрока");
			
	КоличествоСтрокМакета 	= 1;
	НачалоОбластиЗаголовка	= 1;
	
	МакетГруппировок        = ПолеТабличногоДокументаМакетИзм.ПолучитьОбласть("ОбластьКолонок");
	ИмяОбластиГруппировок   = "ОбластьКолонок";
	МакетГруппировок.Область(0,1,0,МакетГруппировок.ШиринаТаблицы).Имя = ИмяОбластиГруппировок;
		
	ПараметрыОтбора         = ОбъектАБ.РасшифровкаГруппОтборов.Выгрузить(Новый Структура("УидГруппыОтборов",Неопределено));
	
	СтруктураСортировки     = Новый Структура;
	СтруктураАналитик       = Новый Структура;
	тзСтруктураМакета       = Новый ТаблицаЗначений;
	тзСтруктураМакета.Колонки.Добавить("ВерхОбласти");
	тзСтруктураМакета.Колонки.Добавить("ЛевоОбласти");
    тзСтруктураМакета.Колонки.Добавить("ИмяОбласти");
	
	нСтрокаСтруктуры = тзСтруктураМакета.Добавить();
	нСтрокаСтруктуры.ВерхОбласти = 0;
	нСтрокаСтруктуры.ЛевоОбласти = 1;
	нСтрокаСтруктуры.ИмяОбласти  = ИмяОбластиГруппировок;
	
	//ПериодС
	нПараметрОтбора = ПараметрыОтбора.Добавить();
	нПараметрОтбора.ЗначениеДляПроверкиСтрока 	= ЗначениеВСтрокуВнутр(Неопределено);
	нПараметрОтбора.ЗначениеОтбораСтрока 		= ЗначениеВСтрокуВнутр(Неопределено);
	нПараметрОтбора.Использовать 				= Истина;
	нПараметрОтбора.Отбор 						= "Период начала отчета";
	нПараметрОтбора.Поле 						= "Период начала отбора";
	нПараметрОтбора.ПолеКод 					= "ПериодС";
	нПараметрОтбора.ПорядокОтбора 				= 1;
	нПараметрОтбора.ТипЗначенияСтрока 			= "СправочникСсылка.Периоды";
	
	//ПериодПо
	нПараметрОтбора = ПараметрыОтбора.Добавить();
	нПараметрОтбора.ЗначениеДляПроверкиСтрока 	= ЗначениеВСтрокуВнутр(Неопределено);
	нПараметрОтбора.ЗначениеОтбораСтрока 		= ЗначениеВСтрокуВнутр(Неопределено);
	нПараметрОтбора.Использовать 				= Истина;
	нПараметрОтбора.Отбор 						= "Период окончания отчета";
	нПараметрОтбора.Поле 						= "Период окончания отбора";
	нПараметрОтбора.ПолеКод 					= "ПериодПо";
	нПараметрОтбора.ПорядокОтбора 				= 2;
	нПараметрОтбора.ТипЗначенияСтрока 			= "СправочникСсылка.Периоды";
	
	ТзОписанияСтруктуры 					= Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
	нСтрСтруктуры       					= ТзОписанияСтруктуры.Добавить();
	нСтрСтруктуры.АналитикаПредставление 	= "Период";
	нСтрСтруктуры.АналитикаКод 			 	= "ПериодОтчета";
	
	СтруктураАналитик.Вставить("ПериодОтчета",ТзОписанияСтруктуры);
	
	нСтрокаДерева         						  = ДеревоСтруктуры.Строки.Добавить();
	нСтрокаДерева.СтруктураАналитикСтрока         = ЗначениеВСтрокуВнутр(СтруктураАналитик);
	
	ПараметрыНовогоМакета.Вставить("СтруктураАналитикАдрес"		,ПоместитьВоВременноеХранилище(ДеревоСтруктуры,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("КоличествоСтрокМакета"		,1);
	ПараметрыНовогоМакета.Вставить("НачалоОбластиЗаголовка"		,0);
	ПараметрыНовогоМакета.Вставить("МакетГруппировок"			,ПоместитьВоВременноеХранилище(МакетГруппировок,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("ПараметрыОтбораАдрес"		,ПоместитьВоВременноеХранилище(ПараметрыОтбора,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("ПараметрыОтбораАдрес"		,ПоместитьВоВременноеХранилище(ПараметрыОтбора,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("СортировкиАдрес"		    ,ПоместитьВоВременноеХранилище(СтруктураСортировки,Новый УникальныйИдентификатор));
    ПараметрыНовогоМакета.Вставить("тзСтруктураМакетаАдрес"		,ПоместитьВоВременноеХранилище(тзСтруктураМакета,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("текПоказатели"				,ПоместитьВоВременноеХранилище(текПоказатели,Новый УникальныйИдентификатор));
	ПараметрыНовогоМакета.Вставить("СтруктураИерархии"			,Новый Структура);

	
	ТекШирина =  ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы;
	
	СформироватьМакетыРаскрытияМастер(ПараметрыНовогоМакета,0,ТекШирина,СтруктураОдинаковыхИмен,,,,ПолеТабличногоДокументаМакетИзм);
	
	ОбластьШапкаТаблицы = ПолеТабличногоДокументаМакетИзм.Область("ОбластьШапка");
	ВерхЗаголовка = ПолеТабличногоДокументаМакетИзм.Область("ОбластьШапка").Верх;
	ЛевоЗаголовка = ПолеТабличногоДокументаМакетИзм.Область("ОбластьКолонок").Право+1;
	
	ЯчейкаШаблон =  ПолеТабличногоДокументаМакетИзм.Область(ОбластьШапкаТаблицы.Верх,2,ОбластьШапкаТаблицы.Верх,2);
	
	ПолеТабличногоДокументаМакетИзм.Область(2,ЛевоЗаголовка,2,ЛевоЗаголовка).Текст = "";
		
	ПолеТабличногоДокументаМакетИзм.Область(ВерхЗаголовка+2,ЛевоЗаголовка,ПолеТабличногоДокументаМакетИзм.ВысотаТаблицы,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).ЦветФона = Новый Цвет(255,250,217);
	
	Для Каждого Колонка Из тДеревоВыбранныхКолонок Цикл	
		ЗаполнитьЗначенияСвойств(ПолеТабличногоДокументаМакетИзм.Область(ВерхЗаголовка+1,ЛевоЗаголовка,ВерхЗаголовка+1,ЛевоЗаголовка),ЯчейкаШаблон);
		ПолеТабличногоДокументаМакетИзм.Область(ВерхЗаголовка+1,ЛевоЗаголовка,ВерхЗаголовка+1,ЛевоЗаголовка).Текст = Колонка.Представление;
		ПолеТабличногоДокументаМакетИзм.Область(ВерхЗаголовка+1,ЛевоЗаголовка,ВерхЗаголовка+1,ЛевоЗаголовка).РазмещениеТекста=ТипРазмещенияТекстаТабличногоДокумента.Переносить;

		ЛевоЗаголовка = ЛевоЗаголовка+1;	
	КонецЦикла;
	ПолеТабличногоДокументаМакетИзм.Область(0,ПолеТабличногоДокументаМакетИзм.Область("ОбластьКолонок").Право+1,0,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы).ШиринаКолонки = 14;

	
КонецПроцедуры	

Процедура СоздатьМакетБланка(Результат, ВидОтчетаВход, БланкДляОтображенияВход, НаименованиеВход, ОбъектАБ, ПолеТабличногоДокументаМакетИзм) Экспорт
	
	нТабДок = Справочники.БланкиОтчетов.ПолучитьМакет("ШаблонНовогоБланка");
	
	Если НЕ Результат.ДополнитьМакет Тогда
		ПолеТабличногоДокументаМакетИзм.Очистить();
	КонецЕсли;
			
	ПолеТабличногоДокументаМакетИзм.Вывести(нТабДок);
	
	ПроверитьНаличиеСлужебныхОбластей(ПолеТабличногоДокументаМакетИзм, Истина);
	
	тДеревоВыбранныхСтрок 			= ПолучитьИзВременногоХранилища(Результат.ДеревоСтрок);
	тДеревоВыбранныхКолонок 		= ПолучитьИзВременногоХранилища(Результат.Колонки);
	
	текПоказатели = ПолучитьТаблицуПоказателейВидаОтчета(ВидОтчетаВход);
	текПоказатели.Индексы.Добавить("Строка,Колонка");
	текПоказатели.Индексы.Добавить("Ссылка");

	кэшРаскрытияПоказателей = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьАналитикиРаскрытияПоказателей(текПоказатели.ВыгрузитьКолонку("Ссылка"));
	кэшРаскрытияПоказателей_ = кэшРаскрытияПоказателей.Скопировать();
	
	ТекСтрокаСверткиПоАналитике = "";
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекСтрокаСверткиПоАналитике = ТекСтрокаСверткиПоАналитике+"ВидАналитики"+Инд+",";
		ТекСтрокаСверткиПоАналитике = ТекСтрокаСверткиПоАналитике+"ВидАналитики"+Инд+"Код,";
	КонецЦикла;	
	
	ТекСтрокаСверткиПоАналитике = ТекСтрокаСверткиПоАналитике+"ВидАналитикиВалюта,ВидАналитикиВалютаКод";
	
	//Если не выводим аналитику, то все равно эмулируем иерархию для правильного форматирования шапки.
	Если НЕ Результат.ВыводитьАналитику Тогда 
		Результат.ВыводитьАналтикиВИерархии = Истина;
	КонецЕсли;
		
	кэшРаскрытияПоказателей_.Свернуть(ТекСтрокаСверткиПоАналитике);
	
	СтруктураДанныхАналитик 				= ПолучитьДанныеАналитикМногоПериодногоБланка(БланкДляОтображенияВход, ВидОтчетаВход, кэшРаскрытияПоказателей_);
	глАналитик 								= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхАналитик, "глАналитик", Новый Структура);
	ГлКлючейАналитик 						= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхАналитик, "ГлКлючейАналитик", Новый Структура);
	
	СтруктураОдинаковыхИмен 				= Новый Структура;
	КартинкаМакета          				= БиблиотекаКартинок.НайтиВСодержании;
		
	Если БланкДляОтображенияВход Тогда
		СгенерироватьШапкуТаблицы(глАналитик,тДеревоВыбранныхКолонок,ГлКлючейАналитик,НаименованиеВход,ПолеТабличногоДокументаМакетИзм);	
		ПодготовитьТаблицыПоДеревуРекурсивноИмпорт(тДеревоВыбранныхСтрок,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,Результат.ВыводитьАналтикиВИерархии,Результат.ВыводитьАналитику,ПолеТабличногоДокументаМакетИзм,ОбъектАБ,БланкДляОтображенияВход);
	Иначе
		СгенерироватьШапкуТаблицы(глАналитик,тДеревоВыбранныхКолонок,ГлКлючейАналитик,НаименованиеВход,ПолеТабличногоДокументаМакетИзм);	
		ПодготовитьТаблицыПоДеревуРекурсивноИмпорт(тДеревоВыбранныхСтрок,тДеревоВыбранныхКолонок,глАналитик,ГлКлючейАналитик,кэшРаскрытияПоказателей,текПоказатели,СтруктураОдинаковыхИмен,КартинкаМакета,Результат.ВыводитьАналтикиВИерархии,Результат.ВыводитьАналитику,ПолеТабличногоДокументаМакетИзм,ОбъектАБ,БланкДляОтображенияВход);
	КонецЕсли;
		
	СгенерироватьПериодыРаскрытияИмпорт(тДеревоВыбранныхКолонок, текПоказатели,СтруктураОдинаковыхИмен, ОбъектАБ, ПолеТабличногоДокументаМакетИзм);
	
	ОбластьКолонки = ПолеТабличногоДокументаМакетИзм.Область("ОбластьКолонок");
	
	Если Результат.ДобавитьИтогПоПериоду Тогда	
		Если Результат.РасположениеИтогов = "Справа" Тогда		
			ОбластьКолонкиПриемник      = ПолеТабличногоДокументаМакетИзм.Область(0,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы+1,0,ПолеТабличногоДокументаМакетИзм.ШиринаТаблицы+тДеревоВыбранныхКолонок.Количество());
			ПолеТабличногоДокументаМакетИзм.ВставитьОбласть(ОбластьКолонки,ОбластьКолонкиПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			ОбластьКолонкиПриемник.Имя  = "";		
			ОбластьЗаголовка =  ПолеТабличногоДокументаМакетИзм.НайтиТекст("[ПериодОтчета]",,ОбластьКолонкиПриемник,,Истина);
			
			Если ОбластьЗаголовка <> неопределено тогда
				ОбластьЗаголовка.Текст = "ИТОГО";
			КонецЕсли;
			
			ПолеТабличногоДокументаМакетИзм.УдалитьОбласть(ОбластьКолонки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
		Иначе	
			ОбластьЗаголовка =  ПолеТабличногоДокументаМакетИзм.НайтиТекст("[ПериодОтчета]",,ОбластьКолонки,,Истина);
						
			Если ОбластьЗаголовка <> неопределено тогда
				ОбластьЗаголовка.Текст = "ИТОГО";
			КонецЕсли;
						
			ОбластьКолонки.Имя  = "";			
		КонецЕсли;	
		
	Иначе	
		ПолеТабличногоДокументаМакетИзм.УдалитьОбласть(ОбластьКолонки,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЕсли;
	
	Если Результат.ВыводитьАналтикиВИерархии Тогда	
		Если ПолеТабличногоДокументаМакетИзм.Область("ОбластьМакетаСтрок").Право>2 Тогда
			ОбластьКУдалению =  ПолеТабличногоДокументаМакетИзм.Область(0,3,0,ПолеТабличногоДокументаМакетИзм.Область("ОбластьМакетаСтрок").Право);	
			ПолеТабличногоДокументаМакетИзм.УдалитьОбласть(ОбластьКУдалению,типСмещенияТабличногоДокумента.ПоГоризонтали);	
		КонецЕсли;
		ПолеТабличногоДокументаМакетИзм.Область(0,2,0,2).ШиринаКолонки = 55;
	КонецЕсли;
	
	ПолеТабличногоДокументаМакетИзм.Область(6,0,6,0).ВысотаСтроки = 0; 
	
КонецПроцедуры	

#КонецОбласти

Функция ПолучитьТипСортировкуАналитики(КлючАналитики,ТипЗначенияАналиткик) Экспорт
	
	СтруктураОтвета = Новый Структура;
	
	МассивТиповСтрока = Новый Массив;
	
	Для Каждого сТип Из ТипЗначенияАналиткик.Типы() Цикл
		
		МассивТипов  = Новый Массив();
		МассивТипов.Добавить(сТип);
		тОписание 	= 	Новый ОписаниеТипов(МассивТипов);
		ИмяОбъекта	=	тОписание.ПривестиЗначение().Метаданные().ПолноеИмя();
		
		Если СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
			ТипСтрока 				= "СправочникСсылка."+Метаданные.НайтиПоТипу(тОписание.Типы()[0]).Имя;
			АналитикаСортировка     = Строка(КлючАналитики)+".Наименование";
		ИначеЕсли СтрНайти(ИмяОбъекта,"Документ")>0 Тогда	
			ТипСтрока 				= "ДокументСсылка."+Метаданные.НайтиПоТипу(тОписание.Типы()[0]).Имя;
			АналитикаСортировка     = Строка(КлючАналитики)+".Номер";
		ИначеЕсли СтрНайти(ИмяОбъекта,"ПланВидовХарактеристик")>0 Тогда	
			ТипСтрока 				= "ПланВидовХарактеристикСсылка."+Метаданные.НайтиПоТипу(тОписание.Типы()[0]).Имя;
			АналитикаСортировка     = Строка(КлючАналитики)+".Наименование";
	    ИначеЕсли СтрНайти(ИмяОбъекта,"ПланСчетов")>0 Тогда	
			ТипСтрока				= "ПланСчетов.Ссылка"+Метаданные.НайтиПоТипу(тОписание.Типы()[0]).Имя;
			АналитикаСортировка     = Строка(КлючАналитики)+".Наименование";
		ИначеЕсли СтрНайти(ИмяОбъекта,"Перечисление")>0 Тогда	 
			ТипСтрока 				= "ПеречислениеСсылка."+Метаданные.НайтиПоТипу(тОписание.Типы()[0]).Имя;
			АналитикаСортировка     = Строка(КлючАналитики)+".Порядок";
		Иначе	
			ТипСтрока 				= Неопределено; //Не поддерживаем другие типы в аналитиках.
			АналитикаСортировка     = Неопределено;
		КонецЕсли;
		
		МассивТиповСтрока.Добавить(ТипСтрока);
		
	КонецЦикла;	
	
	ТипСтрокаИтог = СтрСоединить(МассивТиповСтрока,"|");
	
	СтруктураОтвета.Вставить("МассивТиповСтрока",МассивТиповСтрока);
	СтруктураОтвета.Вставить("ТипСтрока",ТипСтрокаИтог);
    СтруктураОтвета.Вставить("АналитикаСортировка",АналитикаСортировка);
	
	Возврат СтруктураОтвета;
	 
КонецФункции	

Функция ПолучитьПредставлениеПоля(ПолеКод) Экспорт
	
	Если ПолеКод = "ПериодС" Тогда
		
		Возврат Нстр("ru = 'Период с'; en = 'Period from'");
		
	ИначеЕсли ПолеКод = "ПериодПо"	Тогда
		
		Возврат Нстр("ru = 'Период по'; en = 'Period to'");
	
	ИначеЕсли ПолеКод = "Сценарий"	Тогда
		
		Возврат Нстр("ru = 'Сценарий'; en = 'Scenario'");
					
	ИначеЕсли ПолеКод = "Организация" Тогда			
				
		Возврат Нстр("ru = 'Организация'; en = 'Company'");
		
	ИначеЕсли ПолеКод = "Проект"	Тогда			
		
		Возврат Нстр("ru = 'Проект'; en = 'Project'");
	
	Иначе	
		
		Возврат ПолеКод;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеОтбора(Отбор) Экспорт
	
	Если Отбор = "Период начала отчета" Тогда
		
		Возврат Нстр("ru = 'Период начала отчета'; en = 'Report start period'");
		
	ИначеЕсли Отбор = "Период начала со сдвигом"	Тогда
		
		Возврат Нстр("ru = 'Период начала со сдвигом'; en = 'Start period with a shift'");
	
	ИначеЕсли Отбор = "Период окончания отчета"	Тогда
		
		Возврат Нстр("ru = 'Период окончания отчета'; en = 'Report end period'");
					
	ИначеЕсли Отбор = "Период окончания со сдвигом" Тогда			
				
		Возврат Нстр("ru = 'Период окончания со сдвигом'; en = 'End period with a shift'");
		
	ИначеЕсли Отбор = "Равно"	Тогда			
		
		Возврат Нстр("ru = 'Равно'; en = 'Equal to'");
	
	ИначеЕсли Отбор = "Не равно"	Тогда			
		
		Возврат Нстр("ru = 'Не равно'; en = 'Not equal'");	
		
	ИначеЕсли Отбор = "Сценарий отчета"	Тогда			
		
		Возврат Нстр("ru = 'Сценарий отчета'; en = 'Report scenario'");	
		
	ИначеЕсли Отбор = "Организация отчета"	Тогда			
		
		Возврат Нстр("ru = 'Организация отчета'; en = 'Statement company'");		
		
	ИначеЕсли Отбор = "Проект отчета"	Тогда			
		
		Возврат Нстр("ru = 'Проект отчета'; en = 'Report project'");		
		
	ИначеЕсли Отбор = "В группе"	Тогда			
		
		Возврат Нстр("ru = 'В группе'; en = 'In group'");		
		
	ИначеЕсли Отбор = "В группе из списка"	Тогда			
		
		Возврат Нстр("ru = 'В группе из списка'; en = 'In group from the list'");		
		
	ИначеЕсли Отбор = "В списке" Тогда			
		
		Возврат Нстр("ru = 'В списке'; en = 'In the list'");	
		
	ИначеЕсли Отбор = "Не в списке" Тогда			
		
		Возврат Нстр("ru = 'Не в списке'; en = 'Not in the list'");	
		
	ИначеЕсли Отбор = "Отбор не производится" Тогда			
		
		Возврат Нстр("ru = 'Отбор не производится'; en = 'Not filtered'");	
			
	КонецЕсли;


КонецФункции

Функция ПодготовитьМакетШаблоновВывода(тКолонки) Экспорт
		
	СтруктураОтвета = Новый Структура;
	
	ПолеТабличногоДокументаМакетШаблонЗаголовка = Новый ТабличныйДокумент;
	
	Обработка 				= Обработки.НастройкаСтруктурыОтчета;
	
	МакетШаблонаСтроки 		= Обработка.ПолучитьМакет("МакетШаблонОформленияСтроки"); 
	МакетШаблонаКолонки 	= Обработка.ПолучитьМакет("МакетШаблонОформленияКолонки");
	
	//Выводим шапку строк	
	ОбластьЗаголовокШапки = МакетШаблонаСтроки.ПолучитьОбласть("ОбластьШапкаТаблицы");
	
	//Выводим шапку реквизитов строк
	ОбластьЗаголовокКолонки = МакетШаблонаКолонки.ПолучитьОбласть("ОбластьКолонкаШапки");
		
	ПолеТабличногоДокументаМакетШаблонЗаголовка.Вывести(ОбластьЗаголовокШапки);
	
	ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = "Строка";
		
	Для Каждого СтрКол Из тКолонки Цикл
				
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Присоединить(ОбластьЗаголовокКолонки);
		ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы).Текст = СтрКол.Представление;
						
		Если СтрКол.КолонкаПометкаНаУдаление Тогда
			тЯчейка 			= ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы,1,ПолеТабличногоДокументаМакетШаблонЗаголовка.ШиринаТаблицы);
			тЯчейка.Шрифт 		= Новый Шрифт(тЯчейка.Шрифт,,,,,,Истина);
			тЯчейка.ЦветТекста  = Новый Цвет(255,0,0);
		КонецЕсли;	
		
	КонецЦикла;	
	
	ПолеТабличногоДокументаМакетШаблонЗаголовка.Область(1,0,1,0).Имя = "ШаблонВыводаЗаголовка";
	
	ПолеТабличногоДокументаМакетШаблонСтроки 			= Новый ТабличныйДокумент;
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог 		= Новый ТабличныйДокумент;
	
	ОбластьЗаголовокСтороки 			= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаСтроки");
	ОбластьЗаголовокПоказателя 			= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаПоказателя");
	
	ОбластьЗаголовокСторокиИтог 		= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаСтрокиИтог");
	ОбластьЗаголовокПоказателяИтог 		= МакетШаблонаКолонки.ПолучитьОбласть("ОбластьЗаголовкаПоказателяИтог");
	
	//Выводим шаблон для реквизитов строк
	ПолеТабличногоДокументаМакетШаблонСтроки.Вывести(ОбластьЗаголовокСтороки);
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Вывести(ОбластьЗаголовокСторокиИтог);		
	
	//Выводим шаблон для колонок отчета
	Для Каждого СтрКол Из тКолонки Цикл				
		ПолеТабличногоДокументаМакетШаблонСтроки.Присоединить(ОбластьЗаголовокПоказателя);	
		ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Присоединить(ОбластьЗаголовокПоказателяИтог);	
	КонецЦикла;	
	
	ПолеТабличногоДокументаМакетШаблонСтроки.Область(1,0,1,0).Имя = "ШаблонВыводаСтроки";
	ПолеТабличногоДокументаМакетШаблонСтрокиИтог.Область(1,0,1,0).Имя = "ШаблонВыводаСтроки";
	
	СтруктураОтвета.Вставить("ПолеТабличногоДокументаМакетШаблонЗаголовка",ПолеТабличногоДокументаМакетШаблонЗаголовка);
	СтруктураОтвета.Вставить("ПолеТабличногоДокументаМакетШаблонСтроки",ПолеТабличногоДокументаМакетШаблонСтроки);
	СтруктураОтвета.Вставить("ПолеТабличногоДокументаМакетШаблонСтрокиИтог",ПолеТабличногоДокументаМакетШаблонСтрокиИтог);
	
	Возврат СтруктураОтвета;
	
КонецФункции
