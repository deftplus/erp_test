
Функция ЗаполнитьТаблицуПоказателей(ОбъектРасчета,СписокВерсий, ВалютаЗаполнения,ПараметрыОтбораПоказателей) Экспорт
	
	Если ВалютаЗаполнения = Неопределено Тогда
		ВалютаЗаполнения = ОбъектРасчета.ОсновнаяВалюта;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда
		
		ДанныеПоказателя=Неопределено;
		
	Иначе
		
		ДанныеПоказателя=ОбъектРасчета.КэшДанныхПоказателя[ПараметрыОтбораПоказателей];
		
	КонецЕсли; 
		
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Ложь);
	ДанныеЗапроса.Вставить("АналитикВидаОтчета",ОбъектРасчета.МаксАналитикОтчета);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Если ДанныеПоказателя=Неопределено Тогда // Получаем как данные показателя, так и его значение
		
		Запрос = Новый Запрос;
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ВнПоказатели.*,
		|	ВложенныйЗапрос.Значение
		|ИЗ
		|	(ВЫБРАТЬ 
		|	ПоказателиОтчетов.Ссылка КАК Ссылка,
		|	ПоказателиОтчетов.Код КАК Код,
		|	ПоказателиОтчетов.Наименование КАК Наименование,
		|	ПоказателиОтчетов.ЧисловойПоказатель КАК ЧисловойПоказатель,
		|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
		|	ПоказателиОтчетов.Проверочный КАК Проверочный,
		|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
		|	ЕстьNULL(ПоказателиОтчетов.ГруппаРаскрытия.Валютная,Ложь) КАК Валютный,
		|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму КАК ПересчитыватьВалютнуюСумму,
		|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
		|	ПоказателиОтчетов.ВидИтогаПоСчету КАК ВидИтогаПоСчету,
		|	ПоказателиОтчетов.ДляОтраженияКурсовыхРазниц КАК ДляОтраженияКурсовыхРазниц,
		|	ПоказателиОтчетов.СвязанныйПоказатель КАК СвязанныйПоказатель,
		|	ВЫБОР КОГДА ПоказателиОтчетов.ВидКурса=ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.ПустаяСсылка) Тогда ЗНАЧЕНИЕ(Перечисление.ВидыКурсов.СреднийКурсЗаПериод) ИНАЧЕ ПоказателиОтчетов.ВидКурса КОНЕЦ КАК ВидКурса, 
		|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
		|	ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ПоказателиОтчетов.СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
		|	ПоказателиОтчетов.СтатьяДвиженияРесурсов КАК СтатьяДвиженияРесурсов,
		|	ПоказателиОтчетов.РазделениеПоПроектам КАК РазделениеПоПроектам,
		|	ПоказателиОтчетов.Предназначение КАК Предназначение,
		//|	ПоказателиОтчетов.КонтролироватьЛимиты КАК КонтролироватьЛимиты,
		|	ПоказателиОтчетов.ПриходРасход КАК ПриходРасход,
		|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,";
		
		Для Инд = ОбъектРасчета.МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Запрос.Текст = Запрос.Текст + "
			|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики" + Инд + " КАК ВидАналитики" + Инд + ", ";
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
		|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик,0) КАК ЧислоАналитикГруппыРаскрытия,
		|	ПоказателиОтчетов.Строка КАК Строка ИЗ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов";
		
		Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда // первичная запись массива показателей
			
			Запрос.Текст = Запрос.Текст + "
			|	ГДЕ ПоказателиОтчетов.Ссылка В (&МассивПоказателей)";
			Запрос.УстановитьПараметр("МассивПоказателей",ПараметрыОтбораПоказателей);
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.Ссылка В (&МассивПоказателей)",Новый Структура("МассивПоказателей",ПараметрыОтбораПоказателей));
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			
		Иначе
			
			Запрос.Текст = Запрос.Текст + "
			|	ГДЕ ПоказателиОтчетов.Ссылка=&ПоказательОтчета";
			Запрос.УстановитьПараметр("ПоказательОтчета",ПараметрыОтбораПоказателей);
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.Ссылка = &ПоказательОтчета",Новый Структура("ПоказательОтчета",ПараметрыОтбораПоказателей));
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);

			
		КонецЕсли; 
		
		Запрос.Текст = Запрос.Текст + ") КАК ВнПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ";
		
		Если ОбъектРасчета.Свойство("СохранятьИсториюИзменений") ИЛИ ОбъектРасчета.ВидОтчета.СохранятьИсториюИзменений ИЛИ ОбъектРасчета.РежимКорректировки Тогда
			
			СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
			
			Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
				
				ТекстВложенногоЗапроса="ВЫБРАТЬ
				|	ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка) КАК Показатель,
				|	0 КАК Значение";
				
			Иначе
				
				ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
				
				Если СтруктураЗапроса.Свойство("СтруктураПараметров") Тогда
					
					Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
						
						Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
						
					КонецЦикла;
					
				КонецЕсли; 
				
				Если ОбъектРасчета.АнализЧувствительности Тогда
					
					Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			ТекстВложенногоЗапроса="ВЫБРАТЬ
			|	ЗНАЧЕНИЕ(Справочник.ПоказателиОтчетов.ПустаяСсылка) КАК Показатель,
			|	0 КАК Значение";
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|("+ТекстВложенногоЗапроса+") КАК ВложенныйЗапрос
		|	ПО ВложенныйЗапрос.Показатель = ВнПоказатели.Ссылка
		|	";
		
				
		Запрос.УстановитьПараметр("ТипЗначения"    , Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
		Запрос.УстановитьПараметр("Валюта"         , ВалютаЗаполнения);
		Запрос.УстановитьПараметр("ВидОтчета"     , ОбъектРасчета.ВидОтчета);
		
		ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();
		ТаблицаПоказателей.Колонки.Добавить("ЗначениеИзменено",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
		Если ТипЗнч(ПараметрыОтбораПоказателей)=Тип("Массив") Тогда
			
			Для каждого ПоказательОтбора Из ПараметрыОтбораПоказателей Цикл
				
				ТабТекущегоПоказателя=ТаблицаПоказателей.Скопировать(Новый Структура("Ссылка",ПоказательОтбора));
				
				ТабНомеровАналитикТекущегоПоказателя=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(ТабТекущегоПоказателя);
				СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТабТекущегоПоказателя,ТабНомеровАналитикТекущегоПоказателя);
				
				ОбъектРасчета.КэшДанныхПоказателя.Вставить(ПоказательОтбора,СтруктураДанныхПоказателя);
				
			КонецЦикла;
			
			ТабНомеровАналитик=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(ТаблицаПоказателей);
			
			Возврат Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ТабНомеровАналитик);
			
		Иначе
			
			ТабНомеровАналитик=УправлениеОтчетамиУХ.ВернутьТабНомеровАналитик(ТаблицаПоказателей);
			
			СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ТабНомеровАналитик);
			
			ОбъектРасчета.КэшДанныхПоказателя.Вставить(ПараметрыОтбораПоказателей,СтруктураДанныхПоказателя);
			Возврат СтруктураДанныхПоказателя;
			
		КонецЕсли; 
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
	Иначе // Получаем только текущее значение показателя
		
		ТаблицаПоказателей=ДанныеПоказателя.ТаблицаПоказателей;
		
		Если ОбъектРасчета.Свойство("СохранятьИсториюИзменений") ИЛИ ОбъектРасчета.ВидОтчета.СохранятьИсториюИзменений Тогда
			
			ОтборПоказателей=Новый Соответствие;
			ОтборПоказателей.Вставить("####.Ссылка =&ПоказательОтчета",Новый Структура("ПоказательОтчета",ПараметрыОтбораПоказателей));
			ДанныеЗапроса.Вставить("ОтборПоказателей",ОтборПоказателей);
			ДанныеЗапроса.Вставить("ТабНомеровАналитик",?(ТипЗнч(ДанныеПоказателя.ТабНомеровАналитик)=Тип("ТаблицаЗначений"),ДанныеПоказателя.ТабНомеровАналитик.Скопировать(),Неопределено));
			
			СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
			
			Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
				
				ТаблицаПоказателей[0].Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(ТаблицаПоказателей[0].ТипЗначения);
				СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ДанныеЗапроса.ТабНомеровАналитик);
				Возврат СтруктураДанныхПоказателя;
				
			Иначе
				
				Запрос=Новый Запрос;
				Запрос.Текст=СтруктураЗапроса.ТекстЗапроса;
				
			КонецЕсли;
			
			Если СтруктураЗапроса.Свойство("СтруктураПараметров") Тогда
				
				Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
					
					Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
					
				КонецЦикла;
				
			КонецЕсли; 
			
			Если ОбъектРасчета.АнализЧувствительности Тогда
				
				Запрос.Текст=СтрЗаменить(Запрос.Текст,"ЗначенияПоказателейОтчетов","ЗначенияПоказателейМоделирование");
				
			КонецЕсли;
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда
				
				ТаблицаПоказателей[0].Значение=Результат.Значение;
								
			Иначе
				
				ТаблицаПоказателей[0].Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(ТаблицаПоказателей[0].ТипЗначения);
								
			КонецЕсли;
			
		Иначе
			
			ТаблицаПоказателей[0].Значение=ОбщегоНазначенияУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(ТаблицаПоказателей[0].ТипЗначения);
						
		КонецЕсли;
		
		СтруктураДанныхПоказателя=Новый Структура("ТаблицаПоказателей,ТабНомеровАналитик",ТаблицаПоказателей,ДанныеПоказателя.ТабНомеровАналитик);
		
		Возврат СтруктураДанныхПоказателя;
		
	КонецЕсли;	
		
КонецФункции

Функция ПолучитьСписокВерсий(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета)
	
	ОбъектРасчета.СписокИспользуемыхВерсий=Неопределено;
	
	СтруктураПоиска=Новый Структура("ВидОтчета,ПериодРасчета,Организация,Сценарий,Проект",
				ТекВидОтчета,
				ПериодРасчета,
				СтруктураКлючевыхРеквизитов.Организация,
				СтруктураКлючевыхРеквизитов.Сценарий,
				СтруктураКлючевыхРеквизитов.Проект);
				
		Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			Если Индекс<=ОбъектРасчета.МаксАналитикОтчета И СтруктураКлючевыхРеквизитов.Свойство("Аналитика"+Индекс) Тогда
				
				СтруктураПоиска.Вставить("Аналитика"+Индекс,СтруктураКлючевыхРеквизитов["Аналитика"+Индекс]);
				
			Иначе
				
				СтруктураПоиска.			Вставить("Аналитика"+Индекс,Неопределено);
				ОбъектРасчета.				Вставить("Аналитика"+Индекс,Неопределено);
				СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Индекс,Неопределено);
				
			КонецЕсли;
			
		КонецЦикла;
	
	Если НЕ ТекВидОтчета.СохранятьИсториюИзменений Тогда
		
		МассивВерсий=ОбъектРасчета.КэшВерсийПоказателей.НайтиСтроки(СтруктураПоиска);
		
		Если МассивВерсий.Количество()=1 Тогда
			
			ОбъектРасчета.СписокИспользуемыхВерсий=МассивВерсий[0].СписокВерсий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ОбъектРасчета.СписокИспользуемыхВерсий=Неопределено Тогда
		
		ОбъектРасчета.СписокИспользуемыхВерсий = Новый СписокЗначений;
		
		ЗапросВерсия=Новый Запрос;
		ЗапросВерсия.Текст="ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка,
		|	ВерсииЗначенийПоказателей.ОсновнаяВерсия
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета";
		
		Для каждого КлючИЗначение Из СтруктураПоиска Цикл
			
			Если КлючИЗначение.Ключ="ПериодРасчета" ИЛИ 
				КлючИЗначение.Ключ="ВидОтчета" Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И ВерсииЗначенийПоказателей."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
				
			ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
							
		КонецЦикла; 
		
		Если СтруктураКлючевыхРеквизитов.Свойство("ОсновнаяВалюта") Тогда
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|И ВерсииЗначенийПоказателей.Валюта=&ОсновнаяВалюта";
			
			ЗапросВерсия.УстановитьПараметр("ОсновнаяВалюта",СтруктураКлючевыхРеквизитов.ОсновнаяВалюта);
			
		КонецЕсли;
		
		Если ОбъектРасчета.Свойство("ИдентификаторСеанса") Тогда
			
			ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
			|И ((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)
			|ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)";
			
			ЗапросВерсия.УстановитьПараметр("ИдентификаторСеанса",ОбъектРасчета.ИдентификаторСеанса);
			
		КонецЕсли;
		
		ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииЗначенийПоказателей.Код Убыв";
		
		ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ТекВидОтчета);
		ЗапросВерсия.УстановитьПараметр("ПериодОтчета", ПериодРасчета);
		
		ОбъектРасчета.СписокИспользуемыхВерсий = Новый СписокЗначений;
		
		Результат=ЗапросВерсия.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			ОбъектРасчета.СписокИспользуемыхВерсий.Добавить(Результат.Ссылка,,Результат.ОсновнаяВерсия);
			
		КонецЦикла;
		
		Если ОбъектРасчета.СписокИспользуемыхВерсий.Количество() >0  И НЕ ТекВидОтчета.СохранятьИсториюИзменений Тогда
			
			НоваяСтрока=ОбъектРасчета.КэшВерсийПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);	
			
			НоваяСтрока.СписокВерсий	= ОбъектРасчета.СписокИспользуемыхВерсий;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектРасчета.СписокИспользуемыхВерсий;
	
КонецФункции // ПолучитьСписокВерсий()

Процедура ИнициализироватьКонтекст(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета,ОтборПоказателей) Экспорт
	
	ОбъектРасчета.МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ТекВидОтчета);
	ОбъектРасчета.ВсегдаЗаполнятьАналитики=Истина;
	
	СписокИспользуемыхВерсий=ПолучитьСписокВерсий(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета);
	
	Если СписокИспользуемыхВерсий.Количество() > 0 Тогда
		ТекущийЭлементОписаниеВерсии = СписокИспользуемыхВерсий[0].Значение.Владелец;
	КонецЕсли;
	
	ОбъектРасчета.Вставить("ВидОтчета",ТекВидОтчета);
	ОбъектРасчета.Вставить("ПериодОтчета",ПериодРасчета);
	
	Если ТипЗнч(ОтборПоказателей)=Тип("Массив") Тогда
				
		ДанныеПоказателей = ЗаполнитьТаблицуПоказателей(ОбъектРасчета,СписокИспользуемыхВерсий,ОбъектРасчета.ОсновнаяВалюта,ОтборПоказателей[2].Выгрузить().ВыгрузитьКолонку("ПоказательОтчета"));
		
	Иначе
		
		ДанныеПоказателей = ЗаполнитьТаблицуПоказателей(ОбъектРасчета,СписокИспользуемыхВерсий,ОбъектРасчета.ОсновнаяВалюта,ОтборПоказателей);
		
	КонецЕсли; 
	
	мПоказатели=ДанныеПоказателей.ТаблицаПоказателей;
	
	ОбъектРасчета.Вставить("мПоказатели",мПоказатели);	
	ОбъектРасчета.Вставить("ТабНомеровАналитик",ДанныеПоказателей.ТабНомеровАналитик);
	ЕстьРаскрытие=Ложь;
	
	Если ТипЗнч(ОтборПоказателей)=Тип("Массив") Тогда
		
		ТабПоказателиСРаскрытием=ОтборПоказателей[3].Выгрузить().ВыгрузитьКолонку("ПоказательОтчета");
		
		Если ТабПоказателиСРаскрытием.Количество()>0 Тогда
			
			ОбъектРасчета.мПоказателиРаскрытия = УправлениеОтчетамиУХ.ЗаполнитьТаблицуРаскрытий(ОбъектРасчета,,СписокИспользуемыхВерсий,ОбъектРасчета.ОсновнаяВалюта,ТабПоказателиСРаскрытием);
			ЕстьРаскрытие=Истина;
			
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(мПоказатели[0].ГруппаРаскрытия) Тогда
		
		ОбъектРасчета.мПоказателиРаскрытия = УправлениеОтчетамиУХ.ЗаполнитьТаблицуРаскрытий(ОбъектРасчета,,СписокИспользуемыхВерсий,ОбъектРасчета.ОсновнаяВалюта,ОтборПоказателей);
		ЕстьРаскрытие=Истина;
		
	КонецЕсли; 
	
	Если НЕ ЕстьРаскрытие Тогда
		
		ОбъектРасчета.мПоказателиРаскрытия = Новый ТаблицаЗначений;
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
		Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
			ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
		КонецЦикла;
			
	КонецЕсли;
	
	Если СтруктураКлючевыхРеквизитов.Свойство("ДополнительныеВалюты") Тогда
		 ОбъектРасчета.Вставить("ДополнительныеВалюты",СтруктураКлючевыхРеквизитов.ДополнительныеВалюты);	
	КонецЕсли;	
	
	ПодготовитьДанныеДляРасчетов(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета);
						
КонецПроцедуры

Процедура ПодготовитьДанныеДляРасчетов(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета)
	
	ОбъектРасчета.мПоказатели.Колонки.Значение.Имя="ЗначениеНеТипизированное";
	ОбъектРасчета.мПоказатели.Колонки.Добавить("Значение",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповРесурсаЗначение());
	// обрезаем коды
	ОбъектРасчета.мПоказатели.Колонки.Код.Имя = "Имя";
	ОбъектРасчета.мПоказатели.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
		
	ОбъектРасчета.мНеЧисловыеПоказатели=Новый Массив;
	ОбъектРасчета.мЧисловыеПоказатели=Новый Структура;
	ОбъектРасчета.МаксАналитикПоказателя=0;
	
	ОбъектРасчета.Показатели = Новый Структура;		
	Для Каждого Стр Из ОбъектРасчета.мПоказатели Цикл
		
		Стр.Код = СокрЛП(Стр.Имя);		
		Стр.Значение = Стр.ЗначениеНеТипизированное;
		
		Если Стр.Значение = Неопределено ИЛИ Стр.Значение = Null Тогда
			Стр.Значение = КэшируемыеПроцедурыУХ.ПолучитьПустоеЗначениеПоТипуПоказателя(Стр.ТипЗначения);
		КонецЕсли;
		
		Если Стр.ТипЗначения <> Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			ОбъектРасчета.мНеЧисловыеПоказатели.Добавить(Стр.Ссылка);
			
		Иначе
			
			ОбъектРасчета.мЧисловыеПоказатели.Вставить(Стр.Код, Стр.НеМасштабируется);	
			
		КонецЕсли;
		
		Если Стр.ЧислоАналитикГруппыРаскрытия>ОбъектРасчета.МаксАналитикПоказателя Тогда
			
			ОбъектРасчета.МаксАналитикПоказателя=Стр.ЧислоАналитикГруппыРаскрытия;
			
		КонецЕсли;
		
		ОбъектРасчета.Показатели.Вставить(Стр.Код, Стр.Значение);
		
	КонецЦикла;
	
	ОбъектРасчета.мПоказатели.Колонки.Удалить(ОбъектРасчета.мПоказатели.Колонки.Имя);
	ОбъектРасчета.мПоказатели.Колонки.Удалить(ОбъектРасчета.мПоказатели.Колонки.ЗначениеНеТипизированное);
	
	Если ОбъектРасчета.мПоказатели.Колонки.Найти("ДанныеРасчета")=Неопределено Тогда
		
		ОбъектРасчета.мПоказатели.Колонки.Добавить("ДанныеРасчета",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповСтруктура());
		ОбъектРасчета.мПоказатели.Колонки.Добавить("СохраненныеДанныеАктуальны",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповБулево());
		
	КонецЕсли; 
		
	ОбъектРасчета.мПоказатели.ЗаполнитьЗначения(Истина,"СохраненныеДанныеАктуальны");
		
	ОбъектРасчета.мПоказателиРаскрытия.Колонки.Значение.Имя="ЗначениеНеТипизированное";
	ОбъектРасчета.мПоказателиРаскрытия.Колонки.Добавить("Значение",КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповРесурсаЗначение());
	
	Если ОбъектРасчета.мПоказатели.Колонки.Найти("ПериодРасчета")=Неопределено Тогда
		
		ОбъектРасчета.мПоказатели.Колонки.Добавить("ПериодРасчета", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
		
	КонецЕсли;
			
	Для Каждого СтрАналитика ИЗ ОбъектРасчета.мПоказателиРаскрытия Цикл
		
		СтрАналитика.Значение=СтрАналитика.ЗначениеНеТипизированное;
		
	КонецЦикла;
	
	ОбъектРасчета.мПоказателиРаскрытия.Колонки.Удалить(ОбъектРасчета.мПоказателиРаскрытия.Колонки.ЗначениеНеТипизированное);
	
	// Создаем соответствие кодов и ссылок на показатели
	
	ТекстИндекс="Показатель,АналитикаВалюта";
	
	Для Инд=ОбъектРасчета.МаксАналитикОтчета+1 По (ОбъектРасчета.МаксАналитикОтчета+ОбъектРасчета.МаксАналитикПоказателя) Цикл
		
		Если НЕ ОбъектРасчета.мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд)=Неопределено Тогда
			
			ТекстИндекс=ТекстИндекс+",Аналитика"+Инд;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОбъектРасчета.мПоказателиРаскрытия.Индексы.Добавить(ТекстИндекс);
	ИнициализироватьЛоги(ОбъектРасчета);
	
	//Определим аналитики вида отчета
	ОбъектРасчета.мТаблицаВидовАналитикВидаОтчета=ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ТекВидОтчета);
	
	МассивКУдалению=ОбъектРасчета.мПоказателиРаскрытия.НайтиСтроки(Новый Структура("Значение",0));
	
	Для Каждого СтрРаскрытие ИЗ МассивКУдалению Цикл
		
		ОбъектРасчета.мПоказателиРаскрытия.Удалить(СтрРаскрытие);
		
	КонецЦикла;

	ОбъектРасчета.мТекущаяВалюта = ОбъектРасчета.ОсновнаяВалюта;
	
	ИнициализироватьСоответствияДляПоиска(ОбъектРасчета);
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество()>0 Тогда
		
		// Получим список валют, в которых уже есть записи в регистре
		
		ЗапросВерсия=Новый Запрос;
		ЗапросВерсия.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.Валюта
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета";
		
		Для каждого КлючИЗначение Из СтруктураКлючевыхРеквизитов Цикл
			
			Если КлючИЗначение.Ключ="ПравилоОбработки" 
				ИЛИ КлючИЗначение.Ключ="ДополнительныеВалюты" 
				ИЛИ КлючИЗначение.Ключ="ВключатьВидОтчета" 
				ИЛИ КлючИЗначение.Ключ="РежимКорректировки"
				ИЛИ КлючИЗначение.Ключ="СохранятьИсториюИзменений" Тогда
				
				Продолжить;
			
			ИначеЕсли КлючИЗначение.Ключ="ОсновнаяВалюта" Тогда
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И НЕ ВерсииЗначенийПоказателей.Валюта=&ОсновнаяВалюта";
				
				ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			Иначе
				
				ЗапросВерсия.Текст=ЗапросВерсия.Текст+"
				|И ВерсииЗначенийПоказателей."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
				
				ЗапросВерсия.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
				
			КонецЕсли; 
			
		КонецЦикла; 
		
		ЗапросВерсия.УстановитьПараметр("ВидОтчета", 	ТекВидОтчета);
		ЗапросВерсия.УстановитьПараметр("ПериодОтчета", ПериодРасчета);
			
		ОбъектРасчета.мВалютыЗаписей=ЗапросВерсия.Выполнить().Выгрузить().ВыгрузитьКолонку("Валюта");
		
		УправлениеОтчетамиУХ.ОпределитьПериодРасчета(ОбъектРасчета,ОбъектРасчета.мПоказатели.ВыгрузитьКолонку("Ссылка"));
		
		/////////////////////////////////////////////////////////////////////////////
		// Получим показатели, используемые для установки курсов валют
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Валюта,
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.ПоказательКурса,
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Кратность,
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка КАК Показатель
		|ИЗ
		|	Справочник.ПоказателиОтчетов.ПоказателиДляКурсовВалют КАК ПоказателиОтчетовПоказателиДляКурсовВалют
		|ГДЕ
		|	ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка.Владелец = &ВидОтчета
		|	И ПоказателиОтчетовПоказателиДляКурсовВалют.Ссылка.ВидКурса = &УказанноеВДокументе";
		
		Запрос.УстановитьПараметр("ВидОтчета",ТекВидОтчета);
		Запрос.УстановитьПараметр("УказанноеВДокументе",Перечисления.ВидыКурсов.ЗначениеУказанноеВДокументе);
		
		ОбъектРасчета.мПоказателиДляКурсовВалют=Запрос.Выполнить().Выгрузить();
		ОбъектРасчета.мПоказателиДляКурсовВалют.Индексы.Добавить("Показатель,Валюта");
		
		//////////////////////////////////////////////////////////////////////////////
		
	Иначе
		
		ОбъектРасчета.мВалютыЗаписей=Новый Массив;
		
	КонецЕсли;
		
КонецПроцедуры // ПодготовитьДанныеДляРасчетов() 

Процедура ИнициализироватьЛоги(ОбъектРасчета)
	
	Если ОбъектРасчета.ЛогИзмененийПоказателей=Неопределено Тогда 
		
		СтруктураПеременных=Новый Структура;
		СтруктураПеременных.Вставить("НомерТекущейОперации",ОбъектРасчета.НомерТекущейОперации);
		СтруктураПеременных.Вставить("мПоказатели",ОбъектРасчета.мПоказатели);
		СтруктураПеременных.Вставить("мПоказателиРаскрытия",ОбъектРасчета.мПоказателиРаскрытия);
		УправлениеОтчетамиУХ.ИнициализироватьЛоги(СтруктураПеременных);
		
		ОбъектРасчета.ЛогИзмененийПоказателей=СтруктураПеременных.ЛогИзмененийПоказателей;
		ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей=СтруктураПеременных.ЛогИзмененийРаскрытийПоказателей;
		
	Иначе
		
		ОбъектРасчета.ЛогИзмененийПоказателей.Очистить();
		
		СтруктураПеременных=Новый Структура;
		СтруктураПеременных.Вставить("ЛогИзмененийРаскрытийПоказателей",ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей);
		
		УправлениеОтчетамиУХ.СнятьИндексыСЛогаРаскрытий(СтруктураПеременных);
		СтруктураПеременных.ЛогИзмененийРаскрытийПоказателей.Очистить();
		УправлениеОтчетамиУХ.УстановитьИндексыНаЛогРаскрытий(СтруктураПеременных);
		ОбъектРасчета.ЛогИзмененийРаскрытийПоказателей=СтруктураПеременных.ЛогИзмененийРаскрытийПоказателей;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ЕстьДанныеРасчетовПоказателя(ОбъектРасчета,НазначениеРасчетов,ПотребительРасчета)
	
	СтруктураПоиска=Новый Структура("НазначениеРасчетов,ПотребительРасчета",НазначениеРасчетов,ПотребительРасчета);
	ЗначениеИзКэша=ОбъектРасчета.КэшДанныхРасчета.НайтиСтроки(СтруктураПоиска);
	
	Если ЗначениеИзКэша.Количество()=1 Тогда
		
		ОбъектРасчета.мОперанды 								= ЗначениеИзКэша[0].мОперанды;
		ОбъектРасчета.мТабПоказателиЗапросы						= ЗначениеИзКэша[0].мТабПоказателиЗапросы;
		ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора	= ЗначениеИзКэша[0].мСоответствиеОперандовИПоказателейОтбора;
		ОбъектРасчета.ЕстьОбращениеКВИБ							= ЗначениеИзКэша[0].ЕстьОбращениеКВИБ;
		ОбъектРасчета.ПроизвольныйКод							= ЗначениеИзКэша[0].ПроизвольныйКод;
		ОбъектРасчета.ПроцедураРасчета							= ЗначениеИзКэша[0].ПроцедураРасчета;
		
		Возврат Истина
			
	КонецЕсли; 
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПроцедурыРасчетов.Процедура,
	|	ПроцедурыРасчетов.ПроцедураВычисления,
	|	ПроцедурыРасчетов.ПроизвольныйКод,
	|	ПроцедурыРасчетов.ДанныеРасчетовПоказателя
	|ИЗ
	|	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	|ГДЕ
	|	ПроцедурыРасчетов.НазначениеРасчетов = &НазначениеРасчетов
	|	И ПроцедурыРасчетов.ПотребительРасчета = &ПотребительРасчета";
	
	Запрос.УстановитьПараметр("НазначениеРасчетов",НазначениеРасчетов);
	Запрос.УстановитьПараметр("ПотребительРасчета",ПотребительРасчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если НЕ Результат.Следующий() Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	ОбъектРасчета.ПроизвольныйКод=Результат.ПроизвольныйКод;
	ОбъектРасчета.ПроцедураРасчета=Результат.Процедура;
	ДанныеРасчетовПоказателя=Результат.ДанныеРасчетовПоказателя.Получить();
	
	Если (НЕ ТипЗнч(ДанныеРасчетовПоказателя)=Тип("Структура"))
		ИЛИ ((ДанныеРасчетовПоказателя.мОперанды.Количество()=0 ИЛИ ДанныеРасчетовПоказателя.мТабПоказателиЗапросы.Количество()=0) 
			И НЕ ОбъектРасчета.ПроизвольныйКод) Тогда
		
		ДанныеРасчетовПоказателя=УправлениеОтчетамиУХ.ПолучитьДанныеРасчетовПоказателя(НазначениеРасчетов,ПотребительРасчета);
		
		НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.НазначениеРасчетов.Установить(НазначениеРасчетов);
		НаборЗаписей.Отбор.ПотребительРасчета.Установить(ПотребительРасчета);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=1 Тогда
			
			НаборЗаписей[0].ДанныеРасчетовПоказателя=Новый ХранилищеЗначения(ДанныеРасчетовПоказателя);
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбъектРасчета.мОперанды 								= ДанныеРасчетовПоказателя.мОперанды;
	ОбъектРасчета.мТабПоказателиЗапросы						= ДанныеРасчетовПоказателя.мТабПоказателиЗапросы;
	ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора	= ДанныеРасчетовПоказателя.мСоответствиеОперандовИПоказателейОтбора;
	ОбъектРасчета.ЕстьОбращениеКВИБ							= ДанныеРасчетовПоказателя.ЕстьОбращениеКВИБ;
	
	НоваяСтрока=ОбъектРасчета.КэшДанныхРасчета.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
	НоваяСтрока.мОперанды=ОбъектРасчета.мОперанды;
	НоваяСтрока.мТабПоказателиЗапросы=ОбъектРасчета.мТабПоказателиЗапросы;
	НоваяСтрока.мСоответствиеОперандовИПоказателейОтбора=ОбъектРасчета.мСоответствиеОперандовИПоказателейОтбора;
	НоваяСтрока.ЕстьОбращениеКВИБ=ОбъектРасчета.ЕстьОбращениеКВИБ;
	НоваяСтрока.ПроизвольныйКод=ОбъектРасчета.ПроизвольныйКод;
	НоваяСтрока.ПроцедураРасчета=ОбъектРасчета.ПроцедураРасчета;
	
	Возврат Истина
		
КонецФункции

Процедура РассчитатьЗначениеПоказателя(ОбъектРасчета,
										СтруктураКлючевыхРеквизитов,
										ТекВидОтчета,
										ТекПотребительРасчета,
										ТекНазначениеРасчетов,
										ПериодРасчета,
										ЗаписатьВРегистры=Истина) Экспорт
	
	Если НЕ ЕстьДанныеРасчетовПоказателя(ОбъектРасчета,ТекНазначениеРасчетов,ТекПотребительРасчета) Тогда
		
		Возврат;
		
	КонецЕсли; 
	
	ИнициализироватьКонтекст(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ПериодРасчета,ТекПотребительРасчета);	
				
	ОбъектРасчета.НомерТекущейОперации=1;
		
	ОбъектРасчета.Вставить("ВидОтчета",					ТекВидОтчета);
	ОбъектРасчета.Вставить("ПоказательОтчета",			ТекПотребительРасчета);
	ОбъектРасчета.Вставить("ПравилоОбработки",			ТекНазначениеРасчетов);
	ОбъектРасчета.Вставить("СпособФормированияОтчета",	Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки);
	ОбъектРасчета.Вставить("ПериодОтчета",				ПериодРасчета);
	ОбъектРасчета.Вставить("ОбработанныеОперанды",		Новый Соответствие);
	
	УправлениеОтчетамиУХ.ПодготовитьТаблицуЗначенийОперандов(ОбъектРасчета,ОбъектРасчета.мТабПоказателиЗапросы);
	
	СписокИспользуемых=Новый СписокЗначений;
	СписокИспользуемых.ЗагрузитьЗначения(ОбъектРасчета.мОперанды.ВыгрузитьКолонку("Код"));
	
	СтрПоказатель=Новый Структура;
	СтрПоказатель.Вставить("Код",ОбъектРасчета.мПоказатели[0].Код);
	СтрПоказатель.Вставить("ПоказателиТекущегоОтчета",Ложь);
	СтрПоказатель.Вставить("Показатель",ОбъектРасчета.мПоказатели[0].Ссылка);
	СтрПоказатель.Вставить("ПроизвольныйКод",ОбъектРасчета.ПроизвольныйКод);
	СтрПоказатель.Вставить("Процедура",ОбъектРасчета.ПроцедураРасчета);
	СтрПоказатель.Вставить("СписокИспользуемых",СписокИспользуемых);
	СтрПоказатель.Вставить("СпособОбработки",Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение);
	СтрПоказатель.Вставить("ТолькоСуммирование",Ложь);
	СтрПоказатель.Вставить("ЕстьДополненияАналитик",(НЕ (ОбъектРасчета.мОперанды.Колонки.Найти("ЕстьДополненияАналитик")=Неопределено ИЛИ ОбъектРасчета.мОперанды.Найти(Истина,"ЕстьДополненияАналитик")=Неопределено)));
	
	РабочаяТаблица = Новый ТаблицаЗначений;
	
	Для Каждого Кол Из ОбъектРасчета.мПоказателиРаскрытия.Колонки Цикл
		
		Если НЕ (Кол.Имя="Показатель" ИЛИ Кол.Имя="Значение") Тогда // Показатель один.
			
			РабочаяТаблица.Колонки.Добавить(Кол.Имя, Кол.ТипЗначения);
			
		КонецЕсли;
		
	КонецЦикла;
	
	РабочаяТаблица.Колонки.Добавить("ИтогПоПоказателю",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	УправлениеОтчетамиУХ.РассчитатьЗначениеПоказателя(ОбъектРасчета,Перечисления.СпособыОбработкиПоказателейОтчетов.Заполнение,СтрПоказатель,РабочаяТаблица);
	
	Если ОбъектРасчета.Свойство("ТрассировкаРасчета") Тогда
		
		ОбъектРасчета.Вставить("Расчет",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	КонецЕсли;
	
	Если ЗаписатьВРегистры Тогда
		
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
						
			Если ОбъектРасчета.Свойство("Регистратор") И УправлениеОтчетамиУХ.ЭтоДокументКорректировки(ОбъектРасчета.Регистратор) Тогда
				
				СтрокаПоказатель=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекПотребительРасчета,"Ссылка,НормализованныйКод");
				СтрокаПоказатель.Вставить("Код",СтрокаПоказатель.НормализованныйКод);
				СтрокаПоказатель.Удалить("НормализованныйКод");
				
				ОбъектРасчета.Вставить("СтрокаПоказатель",СтрокаПоказатель);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаписатьИзмененияВРегистр(ОбъектРасчета);
		
	КонецЕсли;
	
	Если ОбъектРасчета.Свойство("ТрассировкаРасчета") Тогда
		
		ОбъектРасчета.Вставить("Запись",ТекущаяУниверсальнаяДатаВМиллисекундах());
		
	КонецЕсли;
	
КонецПроцедуры // РассчитатьЗначениеПоказателя()

Функция ПроверитьИспользованиеПравила(ОбъектРасчета,ВидОтчетаПроверка,НазначениеРасчетовПроверка,ОрганизацияПроверка,СценарийПроверка,ПериодОтчетаПроверка)
	
	Если (НЕ (ОбъектРасчета.ПериодыРегистратора.Найти(ПериодОтчетаПроверка)=Неопределено ИЛИ ОбъектРасчета.ПравилоОбработки=НазначениеРасчетовПроверка))
		И ОбъектРасчета.ВидОтчета=НазначениеРасчетовПроверка.Владелец Тогда // Правило расчета зависимости отличается от правила, указанного в экземпляре отчета
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СтруктураРеквизитов=ПолучитьСтруктуруРеквизитов(ОбъектРасчета,ВидОтчетаПроверка,ОрганизацияПроверка,СценарийПроверка,ПериодОтчетаПроверка,НазначениеРасчетовПроверка);
	
	Если СтруктураРеквизитов.Свойство("ПравилоОбработки") И СтруктураРеквизитов.ПравилоОбработки=НазначениеРасчетовПроверка Тогда
		
		ОбъектРасчета.ИспользуемаяИБ=СтруктураРеквизитов.ВИБ;
		Возврат Истина
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли; 
			
КонецФункции

Функция ПолучитьСтруктуруРеквизитов(ОбъектРасчета,ВидОтчетаПроверка,ОрганизацияПроверка,СценарийПроверка,ПериодОтчетаПроверка,НазначениеРасчетовПроверка=Неопределено) Экспорт
	
	СтруктураПоиска=Новый Структура("ВидОтчета, Сценарий, Организация, ПериодРасчета",ВидОтчетаПроверка, СценарийПроверка, ОрганизацияПроверка, ПериодОтчетаПроверка);
	
	ЗначениеИзКэша=ОбъектРасчета.КэшИспользуемыхПравил.НайтиСтроки(СтруктураПоиска);
	
	Если ЗначениеИзКэша.Количество()>0 Тогда

		СтруктураРеквизитов=ЗначениеИзКэша[0].СтруктураРеквизитов;
		
	Иначе
		
		ТекПравилоОбработки=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ПравилоОбработки, ВидОтчетаПроверка, СценарийПроверка, ОрганизацияПроверка, ПериодОтчетаПроверка);
				
		СтруктураРеквизитов=Новый Структура;
		СтруктураРеквизитов.Вставить("ПравилоОбработки",ТекПравилоОбработки);
			
		ТекИспользуемаяИБ=УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза, ВидОтчетаПроверка,СценарийПроверка, ОрганизацияПроверка, ПериодОтчетаПроверка);
		
		Если ЗначениеЗаполнено(ТекИспользуемаяИБ) Тогда
			
			СтруктураРеквизитов.Вставить("ВИБ",ТекИспользуемаяИБ);
			
		Иначе
			
			СтруктураРеквизитов.Вставить("ВИБ",ПолучитьВИБПоУмолчанию(ТекПравилоОбработки));
			
		КонецЕсли; 
			
		НоваяСтрока=ОбъектРасчета.КэшИспользуемыхПравил.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
		НоваяСтрока.СтруктураРеквизитов=СтруктураРеквизитов;
			
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;	
	
КонецФункции // ПолучитьСтруктуруРеквизитов()

Функция ПолучитьВИБПоУмолчанию(ПравилоОбработки) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.ТипБД.ВИБПоУмолчанию КАК ВИБПоУмолчанию
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	ПравилаОбработки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ПравилоОбработки);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если ЗначениеЗаполнено(Результат.ВИБПоУмолчанию) Тогда
		
		Возврат Результат.ВИБПоУмолчанию;
		
	Иначе
		
		Возврат Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ;
		
	КонецЕсли;
	
КонецФункции // ПолучитьВИБПоУмолчанию()

Процедура РассчитатьЗначенияПоказателей(ОбъектРасчета,ДанныеДляПересчетаПоказателей) Экспорт
			
	Для Каждого КлючевыеРеквизиты ИЗ ДанныеДляПересчетаПоказателей Цикл
				
		Если ОбъектРасчета.СпособФормированияОтчета=Перечисления.СпособыФормированияОтчетов.АвтоматическиКонсолидация 
			И (Не УправлениеРабочимиПроцессамиУХ.ОрганизацияЯвляетсяКонсолидирующей(
				КлючевыеРеквизиты.Организация, КлючевыеРеквизиты.Сценарий, КлючевыеРеквизиты.ПериодОтчета)) Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: консолидация по периметру доступна только для консолидирующих организационных единиц.'"), 
				КлючевыеРеквизиты.Организация),,,СтатусСообщения.Внимание);
			Продолжить;
			
		КонецЕсли;
		
		ТекВидОтчета=КлючевыеРеквизиты.ПравилоОбработки.Владелец;
		
		ДокументСсылка=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(КлючевыеРеквизиты.Организация,
											КлючевыеРеквизиты.ПериодОтчета,
											КлючевыеРеквизиты.Сценарий,
											ТекВидОтчета,
											КлючевыеРеквизиты.ОсновнаяВалюта,
											Истина,Ложь,,КлючевыеРеквизиты.Проект);
											
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда
			
			ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
			
		Иначе
			
			ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();
			ДокументОбъект.ВидОтчета=ТекВидОтчета;
			
			ЗаполнитьЗначенияСвойств(ДокументОбъект,КлючевыеРеквизиты);
			
			СтруктураРеквизитов= УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ТекВидОтчета, КлючевыеРеквизиты.Сценарий, КлючевыеРеквизиты.Организация, КлючевыеРеквизиты.ПериодОтчета);	
			СтруктураРеквизитов.Свойство("ВИБ",ДокументОбъект.ИспользуемаяИБ);
			
			Если ЗначениеЗаполнено(КлючевыеРеквизиты.ПравилоОбработки.ТипБД) И (НЕ ЗначениеЗаполнено(ДокументОбъект.ИспользуемаяИБ)) Тогда
				
				ДокументОбъект.ИспользуемаяИБ=КлючевыеРеквизиты.ПравилоОбработки.ТипБД.ВИБПоУмолчанию;
				
			КонецЕсли;
			
			Если ОбъектРасчета.ДополнительныеВалюты.Количество()>0 Тогда
				
				ТабДополнительныхВалют=ОбъектРасчета.ДополнительныеВалюты.Скопировать(Новый Структура("Организация,Сценарий",КлючевыеРеквизиты.Организация,КлючевыеРеквизиты.Сценарий),"Валюта");
				
				Для Каждого Строка ИЗ ТабДополнительныхВалют Цикл
					
					НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
					НоваяСтрока.Валюта=Строка.Валюта;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
				
		ДокументОбъект.ВсегдаЗаполнятьАналитики=Истина;
		ДокументОбъект.ЧтениеНеактуальныхЗаписей=Истина;
		ДокументОбъект.ЗаполнитьОтчет(?(ЗначениеЗаполнено(ОбъектРасчета.СпособФормированияОтчета),ОбъектРасчета.СпособФормированияОтчета,Перечисления.СпособыФормированияОтчетов.АвтоматическиПоПравилуОбработки));

		ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
		ОбъектРасчета.Удалить("Ссылка");
		ОбъектРасчета.Вставить("ПересчетВалюты",Ложь);
		
		ЗаписатьИзмененияВРегистр(ОбъектРасчета);
		
		ДокументОбъект.РассчитатьПоказателиЭффективности();
				
	КонецЦикла;
	
КонецПроцедуры // РассчитатьЗначенияПоказателей() 
 
Процедура ЗаписатьЗначенияПоказателей(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ЗапросДанные) Экспорт
	
	РезультатЗапроса=ЗапросДанные.ВыполнитьПакет();
	
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета",ОбъектРасчета.ОсновнойВидОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",ОбъектРасчета.ОсновнаяВалюта);
	
	Если Не ЗначениеЗаполнено(ОбъектРасчета.ПравилоОбработки) Тогда
		
		СтруктураРеквизитов=ПолучитьСтруктуруРеквизитов(ОбъектРасчета,СтруктураКлючевыхРеквизитов.ВидОтчета,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета);
		СтруктураКлючевыхРеквизитов.Вставить("ПравилоОбработки",СтруктураРеквизитов.ПравилоОбработки);
		
	Иначе
		
		СтруктураКлючевыхРеквизитов.Вставить("ПравилоОбработки",ОбъектРасчета.ПравилоОбработки);
		
	КонецЕсли;	
	
	Если ОбъектРасчета.ДополнительныеВалюты.Количество()>0 Тогда
		
		СтруктураКлючевыхРеквизитов.Вставить("ДополнительныеВалюты",ОбъектРасчета.ДополнительныеВалюты.Скопировать(Новый Структура("Организация,Сценарий",СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий),"Валюта"));
		
	Иначе
		
		СтруктураКлючевыхРеквизитов.Вставить("ДополнительныеВалюты",ОбъектРасчета.ДополнительныеВалюты.СкопироватьКолонки("Валюта"));	
		
	КонецЕсли;
		
	ИнициализироватьКонтекст(ОбъектРасчета,СтруктураКлючевыхРеквизитов,СтруктураКлючевыхРеквизитов.ВидОтчета,СтруктураКлючевыхРеквизитов.ПериодОтчета,РезультатЗапроса);
	НомерТекущейОперации=1;
	
	ОбъектРасчета.Вставить("ПоказательОтчета",ОбъектРасчета.мПоказатели[0].Ссылка);
		
	/////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивПоказатели=Новый Массив;
	
	ТаблицаДанных=РезультатЗапроса[4].Выгрузить();
	
	Для Каждого СтрокаДанные ИЗ ТаблицаДанных Цикл
		
		Показатель=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СтрокаДанные.ПоказательОтчета];
		
		Если СтрокаДанные.СинтетическоеЗначение Тогда
						
			СтруктураЗначение=Новый Структура("Значение",СтрокаДанные.Значение);
			
			УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,Показатель,СтруктураЗначение);
			МассивПоказатели.Добавить(СтрокаДанные.ПоказательОтчета);
			
			Продолжить;
			
		КонецЕсли; 
		
		СтруктураЗаписи=Новый Структура;
		
		Для Индекс=ОбъектРасчета.МаксАналитикОтчета+1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			
			СтруктураЗаписи.Вставить("Аналитика"+Индекс,СтрокаДанные["Аналитика"+Индекс]); 
			
		КонецЦикла;
				
		СтруктураЗаписи.Вставить("АналитикаВалюта",СтрокаДанные["АналитикаВалюта"]);	
		СтруктураЗаписи.Вставить("Показатель",СтрокаДанные.ПоказательОтчета);
		
		Если ЗначениеЗаполнено(СтрокаДанные.Значение)
			ИЛИ ЗначениеЗаполнено(СтрокаДанные.ЗначениеВалюта) Тогда
			
			Если Показатель.Валютный И Показатель.ПересчитыватьВалютнуюСумму Тогда
				
				РассчитатьСтрокуВалютногоПоказателя(ОбъектРасчета,СтруктураКлючевыхРеквизитов,СтрокаДанные,Показатель);
				
			КонецЕсли;
			
			ДанныеДляЗаписи=Новый Структура("Значение,ЗначениеВалюта",СтрокаДанные.Значение,СтрокаДанные.ЗначениеВалюта);
			
		Иначе
			
			ДанныеДляЗаписи=Неопределено;
			
		КонецЕсли; 
		
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеДляЗаписи,СтруктураЗаписи);
		
	КонецЦикла; 
	
	ПоказателиДляИтогов=РезультатЗапроса[3].Выгрузить().ВыгрузитьКолонку("ПоказательОтчета");
		
	УправлениеОтчетамиУХ.ПолучитьИтогиПоПоказателямСостояние(ОбъектРасчета,ПоказателиДляИтогов); 
	
	ОбъектРасчета.мПоказатели.ЗаполнитьЗначения(Неопределено,"ДанныеРасчета");
	ОбъектРасчета.мПоказатели.ЗаполнитьЗначения(Ложь,"СохраненныеДанныеАктуальны");
	
	ЗаписатьИзмененияВРегистр(ОбъектРасчета);
	
	Если (НЕ ОбъектРасчета.ИзменениеСостояний) И ОбъектРасчета.РассчитыватьЗависимые Тогда
		
		Для Каждого Показатель ИЗ ОбъектРасчета.МассивИзмененныхПоказателей Цикл 
			
			РассчитатьРекурсивноЗависимыеПоказатели(Показатель,ОбъектРасчета,СтруктураКлючевыхРеквизитов);
			
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура РассчитатьСтрокуВалютногоПоказателя(ОбъектРасчета,СтруктураКлючевыхРеквизитов,СтрокаДанные,Показатель)
			
	ТекВидКурса=?(ЗначениеЗаполнено(Показатель.ВидКурса),Показатель.ВидКурса,Перечисления.ВидыКурсов.СреднийКурсЗаПериод);
	
	ДанныеКурсаОсновнаяВалюта=ПолучитьДанныеКурса(ОбъектРасчета,ОбъектРасчета.ОсновнаяВалюта,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета,ТекВидКурса);
	
	Если ДанныеКурсаОсновнаяВалюта.Курс=0 Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не указан вид курса %1 по сценарию %2 на период %3 для валюты %4'"), 
			ТекВидКурса, СтруктураКлючевыхРеквизитов.Сценарий, 
			СтруктураКлючевыхРеквизитов.ПериодОтчета, ОбъектРасчета.ОсновнаяВалюта),,,СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	ДанныеКурсаАналитикаВалюта=ПолучитьДанныеКурса(ОбъектРасчета,СтрокаДанные.АналитикаВалюта,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета,ТекВидКурса);
	
	Если ДанныеКурсаАналитикаВалюта.Курс=0 Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не указан вид курса %1 по сценарию %2 на период %3 для валюты %4'"), 
			ТекВидКурса, СтруктураКлючевыхРеквизитов.Сценарий, 
			СтруктураКлючевыхРеквизитов.ПериодОтчета, СтрокаДанные.АналитикаВалюта),,,СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаДанные.Значение) Тогда
		
		ИсходныйКурс		= ДанныеКурсаОсновнаяВалюта.Курс;
		ИсходнаяКратность	= ДанныеКурсаОсновнаяВалюта.Кратность;
		
		НовыйКурс		= ДанныеКурсаАналитикаВалюта.Курс;
		НоваяКратность	= ДанныеКурсаАналитикаВалюта.Кратность;
		
		СтрокаДанные.ЗначениеВалюта=СтрокаДанные.Значение * (ИсходныйКурс * НоваяКратность) / (НовыйКурс * ИсходнаяКратность);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаДанные.ЗначениеВалюта) Тогда
		
		ИсходныйКурс		= ДанныеКурсаАналитикаВалюта.Курс;
		ИсходнаяКратность	= ДанныеКурсаАналитикаВалюта.Кратность;
		
		НовыйКурс		= ДанныеКурсаОсновнаяВалюта.Курс;
		НоваяКратность	= ДанныеКурсаОсновнаяВалюта.Кратность;
		
		СтрокаДанные.Значение=СтрокаДанные.ЗначениеВалюта * (ИсходныйКурс * НоваяКратность) / (НовыйКурс * ИсходнаяКратность);
		
	КонецЕсли;	
	
КонецПроцедуры // РассчитатьСтрокуВалютногоПоказателя()

Функция ПолучитьДанныеКурса(ОбъектРасчета,Валюта,Сценарий,ПериодКурса,ВидКурса)
	
	ДанныеКурсов=ОбъектРасчета.КэшКурсовВалют.НайтиСтроки(Новый Структура("Валюта,Сценарий,ПериодКурса",Валюта,Сценарий,ПериодКурса));
	
	Если ДанныеКурсов.Количество()=0 Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ПериодическиеКурсы.СреднийКурсЗаПериод,
		|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
		|	ПериодическиеКурсы.КурсНаНачалоПериода,
		|	ПериодическиеКурсы.КурсНаКонецПериода,
		|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
		|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
		|	ПериодическиеКурсы.Кратность,
		|	ПериодическиеКурсы.Валюта
		|ИЗ
		|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
		|ГДЕ
		|	ПериодическиеКурсы.Сценарий = &Сценарий
		|	И ПериодическиеКурсы.ПериодКурса = &ПериодКурса";
		
		Запрос.УстановитьПараметр("Сценарий",	Сценарий);
		Запрос.УстановитьПараметр("ПериодКурса",ПериодКурса);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НоваяСтрока=ОбъектРасчета.КэшКурсовВалют.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Результат);
			НоваяСтрока.Сценарий=Сценарий;
			НоваяСтрока.ПериодКурса=ПериодКурса;
			
		КонецЦикла;
			
		ДанныеКурсов=ОбъектРасчета.КэшКурсовВалют.НайтиСтроки(Новый Структура("Валюта,Сценарий,ПериодКурса",Валюта,Сценарий,ПериодКурса));
		
		Если ДанныеКурсов.Количество()=0 Тогда
			
			Возврат Новый Структура("Курс,Кратность",0,0);
			
		Иначе
			
			Возврат Новый Структура("Курс,Кратность",ДанныеКурсов[0][ОбъектРасчета.ВидыКурсов[ВидКурса]],ДанныеКурсов[0].Кратность);

		КонецЕсли;	
			
	Иначе
		
		Возврат Новый Структура("Курс,Кратность",ДанныеКурсов[0][ОбъектРасчета.ВидыКурсов[ВидКурса]],ДанныеКурсов[0].Кратность);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьСтрокуКурсов() 

Функция ПолучитьМассивОткрытыхПериодовДляПересчета(ПериодРасчета,Организация,Сценарий)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Периоды КАК Периоды
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.СтатусБлокировки = 0
	|	И СтатусыПериодовСценариев.Периоды.Периодичность = &Периодичность
	|	И СтатусыПериодовСценариев.Периоды.ДатаНачала >= &ДатаНачала
	|	И СтатусыПериодовСценариев.Организации = &Организации
	|	И СтатусыПериодовСценариев.Сценарии = &Сценарии";
	
	ДанныеПериода=ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПериодРасчета,"ДатаНачала,Периодичность");
	
	Запрос.УстановитьПараметр("Организации",		Организация);
	Запрос.УстановитьПараметр("Сценарии",			Сценарий);
	Запрос.УстановитьПараметр("ДатаНачала",			ДанныеПериода.ДатаНачала);
	Запрос.УстановитьПараметр("Периодичность",		ДанныеПериода.Периодичность);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Периоды");
		
КонецФункции // ПолучитьМассивОткрытыхПериодовДляПересчета()

Процедура РассчитатьРекурсивноЗависимыеПоказатели(ДанныеПоказателей,ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие=Истина) Экспорт
	
	ПротоколируемыеСобытияУХ.Начать(ОбъектРасчета);
	
	ТрассировкаРасчета=ОбъектРасчета.ТрассировкаРасчета;
	ОбъектРасчета.Вставить("ОткрытыеПериоды",ПолучитьМассивОткрытыхПериодовДляПересчета(СтруктураКлючевыхРеквизитов.ПериодОтчета,
																						СтруктураКлючевыхРеквизитов.Организация,
																						СтруктураКлючевыхРеквизитов.Сценарий));
																						
	Если ЗначениеЗаполнено(ОбъектРасчета.Регистратор) И ТипЗнч(ОбъектРасчета.Регистратор)=Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		
		ОбъектРасчета.Вставить("ПериодыРегистратора",УправлениеОтчетамиУХ.ПолучитьМассивПериодов(Новый Структура("ПериодОтчета,ПериодОкончания",ОбъектРасчета.Регистратор.ПериодОтчета,ОбъектРасчета.Регистратор.ПериодОкончания)));
		
	Иначе
		
		ОбъектРасчета.Вставить("ПериодыРегистратора",Новый Массив);
			
	КонецЕсли;
	
	Если ТрассировкаРасчета Тогда
		
		МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ОбъектРасчета.ВидОтчета);
		
		ТаблицаИсходныхПоказателей=Новый ТаблицаЗначений;
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ИдентификаторПересчета");
		ТаблицаИсходныхПоказателей.Колонки.Добавить("Организация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Организации"));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ПериодОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Периоды"));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("Сценарий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Сценарии"));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ОсновнаяВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Валюты"));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("Проект",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Проекты"));
		
		Для Индекс=1 По МаксАналитикОтчета Цикл
			
			ТаблицаИсходныхПоказателей.Колонки.Добавить("Аналитика" + Индекс,Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
			
		КонецЦикла;
		
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ПоказательОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ВремяРасчетаЗависимых",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("УзловРасчетаЗависимых",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("КоличествоПересчетовЗависимых",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(12));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ВремяЗаписиЗависимых",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
		ТаблицаИсходныхПоказателей.Колонки.Добавить("ОбщееВремя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));

		
		ТаблицаТрассировкиРасчета=ТаблицаИсходныхПоказателей.СкопироватьКолонки();
		ТаблицаТрассировкиРасчета.Колонки.Добавить("ПравилоОбработки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПравилаОбработки"));
		ТаблицаТрассировкиРасчета.Колонки.Добавить("ВидОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ВидыОтчетов"));
		ТаблицаТрассировкиРасчета.Колонки.Добавить("ПорядокРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
		
		мПоказатели=ОбъектРасчета.мПоказатели.Скопировать();
	
	КонецЕсли;	
	
	Если ТипЗнч(ДанныеПоказателей)=Тип("Массив") Тогда
		
		Если ТрассировкаРасчета Тогда
						
			Для Каждого Показатель ИЗ ДанныеПоказателей Цикл
				
				ТаблицаЗависимыхПоказателей=ПолучитьТаблицуЗависимыхПоказателей(ОбъектРасчета,Показатель,СтруктураКлючевыхРеквизитов);
				ТаблицаРасчетаПоказателей=РассчитатьРекурсивноЗависимыеПоказателиПоТаблице(ТаблицаЗависимыхПоказателей,ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие,ТрассировкаРасчета);
				
				ДобавитьДанныеПересчета(Новый УникальныйИдентификатор,СтруктураКлючевыхРеквизитов,Показатель,ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета,ТаблицаРасчетаПоказателей,мПоказатели);
							
			КонецЦикла;
			
		Иначе
			
			ТаблицаЗависимыхПоказателей=ПолучитьТаблицуЗависимыхПоМассиву(ОбъектРасчета,ДанныеПоказателей,СтруктураКлючевыхРеквизитов);
			
			РассчитатьРекурсивноЗависимыеПоказателиПоТаблице(ТаблицаЗависимыхПоказателей,ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие,ТрассировкаРасчета);
			
		КонецЕсли;
		
	Иначе
		
		Если ТрассировкаРасчета Тогда
			
			ТаблицаЗависимыхПоказателей=ПолучитьТаблицуЗависимыхПоказателей(ОбъектРасчета,ДанныеПоказателей,СтруктураКлючевыхРеквизитов);
			ТаблицаРасчетаПоказателей=РассчитатьРекурсивноЗависимыеПоказателиПоТаблице(ТаблицаЗависимыхПоказателей,ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие,ТрассировкаРасчета);
			ДобавитьДанныеПересчета(Новый УникальныйИдентификатор,СтруктураКлючевыхРеквизитов,ДанныеПоказателей,ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета,ТаблицаРасчетаПоказателей,мПоказатели);
	
		Иначе
			
			ТаблицаЗависимыхПоказателей=ПолучитьТаблицуЗависимыхПоказателей(ОбъектРасчета,ДанныеПоказателей,СтруктураКлючевыхРеквизитов);
			РассчитатьРекурсивноЗависимыеПоказателиПоТаблице(ТаблицаЗависимыхПоказателей,ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие,ТрассировкаРасчета)
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПротоколируемыеСобытияУХ.Завершить("РасчетРекурсивноЗависимых",,,,Ложь,,Ложь);
	
	Если ТрассировкаРасчета Тогда

		ОбъектРасчета.Вставить("ДанныеТрассировки",Новый Структура("ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета",ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета));
		
	КонецЕсли;
				
КонецПроцедуры // РассчитатьРекурсивноЗависимыеПоказатели()

Процедура ДобавитьДанныеПересчета(ИдентификаторПересчета,СтруктураКлючевыхРеквизитов,Показатель,ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета,ТаблицаРасчетаПоказателей,мПоказатели)
	
	НоваяСтрока=ТаблицаИсходныхПоказателей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураКлючевыхРеквизитов);
	НоваяСтрока.ПоказательОтчета=Показатель;
	НоваяСтрока.ИдентификаторПересчета=ИдентификаторПересчета;
	
	СтрПоказатель=мПоказатели.Найти(Показатель,"Ссылка");
	
	НоваяСтрока.Значение=СтрПоказатель.Значение;
	
	Для Каждого Строка ИЗ ТаблицаРасчетаПоказателей Цикл
		
		СтрокаТрассировки=ТаблицаТрассировкиРасчета.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТрассировки,СтруктураКлючевыхРеквизитов);
		ЗаполнитьЗначенияСвойств(СтрокаТрассировки,Строка);
		СтрокаТрассировки.ВремяРасчетаЗависимых=Строка.ВремяРасчетаЗависимых;
		СтрокаТрассировки.ВремяЗаписиЗависимых=Строка.ВремяЗаписиЗависимых;
		СтрокаТрассировки.ОбщееВремя=СтрокаТрассировки.ВремяРасчетаЗависимых+СтрокаТрассировки.ВремяЗаписиЗависимых;
		СтрокаТрассировки.КоличествоПересчетовЗависимых=Строка.КоличествоСтрокРаскрытий+1;
		СтрокаТрассировки.ПорядокРасчета=Строка.ПорядокРасчетаФинал;
		СтрокаТрассировки.ИдентификаторПересчета=ИдентификаторПересчета;
		
		НоваяСтрока.ВремяРасчетаЗависимых=НоваяСтрока.ВремяРасчетаЗависимых+СтрокаТрассировки.ВремяРасчетаЗависимых;
		НоваяСтрока.ВремяЗаписиЗависимых=НоваяСтрока.ВремяЗаписиЗависимых+СтрокаТрассировки.ВремяЗаписиЗависимых;
		НоваяСтрока.ОбщееВремя=НоваяСтрока.ОбщееВремя+СтрокаТрассировки.ОбщееВремя;

		НоваяСтрока.КоличествоПересчетовЗависимых=НоваяСтрока.КоличествоПересчетовЗависимых+СтрокаТрассировки.КоличествоПересчетовЗависимых;
		
	КонецЦикла;
	
	НоваяСтрока.УзловРасчетаЗависимых=ТаблицаРасчетаПоказателей.Количество();	
	
КонецПроцедуры // ДобавитьДанныеПересчета() 

Функция ВыполнятьРасчетПриАктуализации(ОбъектРасчета,СтрПоказатель,ПериодРасчета)
	
	Если СтрПоказатель.ДействияПриАктуализации=Неопределено Тогда // Нет действий по актуализации показателей
		
		Возврат Истина;
	
	ИначеЕсли ПериодРасчета=ОбъектРасчета.ПериодАктуализации Тогда // В актуализируемом периоде пересчет зависимых показателей не производится
		
		Возврат Ложь;
	
	ИначеЕсли ПериодРасчета=ОбъектРасчета.НовыйПериод Тогда
		
		Возврат СтрПоказатель.ДействияПриАктуализации = Перечисления.ДействияПриАктуализацииБюджетов.НеПереносить;
		
	Иначе
		
		Возврат Не (СтрПоказатель.ДействияПриАктуализации=Перечисления.ДействияПриАктуализацииБюджетов.ПеренестиВсеРавномерно
					ИЛИ СтрПоказатель.ДействияПриАктуализации=Перечисления.ДействияПриАктуализацииБюджетов.ПеренестиОтрицательныеРавномерно
					ИЛИ СтрПоказатель.ДействияПриАктуализации=Перечисления.ДействияПриАктуализацииБюджетов.ПеренестиПоложительныеРавномерно
					ИЛИ СтрПоказатель.ДействияПриАктуализации=Перечисления.ДействияПриАктуализацииБюджетов.ПеренестиФактРавномерно);
					
	КонецЕсли;	
	
КонецФункции // ПроверитьРасчетПриАктуализации()

Функция РассчитатьРекурсивноЗависимыеПоказателиПоТаблице(ТаблицаЗависимыхПоказателей,ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие,ТрассировкаРасчета)
	
	Если ТаблицаЗависимыхПоказателей.Количество()=0 Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Если НЕ СтруктураКлючевыхРеквизитов.Свойство("ДополнительныеВалюты") Тогда
		
		 СтруктураКлючевыхРеквизитов.Вставить("ДополнительныеВалюты",Новый ТаблицаЗначений);
		 
	КонецЕсли;
	
	ОбъектРасчета.ЧислоСтрокРасчета=0;
	
	ОбъектРасчета.СоответствиеСтрокПересчета=Новый Соответствие;
	
	Для каждого СтрПоказатель Из ТаблицаЗависимыхПоказателей  Цикл  // Для текущих показателей
		
		Если НЕ СтрПоказатель.СдвигПериодов=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если НЕ ВыполнятьРасчетПриАктуализации(ОбъектРасчета,СтрПоказатель,СтруктураКлючевыхРеквизитов.ПериодОтчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ (ПересчитыватьТекущие ИЛИ ОбъектРасчета.мПоказатели.Найти(СтрПоказатель.ПотребительРасчета,"Ссылка")=Неопределено) Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		Если СтрПоказатель.НазначениеРасчетов=ОбъектРасчета.ПравилоОбработки ИЛИ ПроверитьИспользованиеПравила(ОбъектРасчета,СтрПоказатель.ВидОтчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,СтруктураКлючевыхРеквизитов.ПериодОтчета) Тогда
			
			ОбъектРасчета.ЧислоСтрокРасчета=ОбъектРасчета.ЧислоСтрокРасчета+1;
			
			НоваяСтрока						= ОбъектРасчета.ДеревоПересчета.Строки.Добавить();
			НоваяСтрока.ВидОтчета			= СтрПоказатель.ВидОтчета;
			НоваяСтрока.ПериодОтчета		= СтруктураКлючевыхРеквизитов.ПериодОтчета;
			НоваяСтрока.ОсновнаяВалюта		= СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
			НоваяСтрока.ПравилоОбработки	= СтрПоказатель.НазначениеРасчетов;
			НоваяСтрока.СдвигПериодов		= СтрПоказатель.СдвигПериодов;
			НоваяСтрока.ПоказательОтчета	= СтрПоказатель.ПотребительРасчета;
			НоваяСтрока.ПоказательИсточник	= СтрПоказатель.ПоказательОтбор;

			НоваяСтрока.НомерОперации		= ОбъектРасчета.ЧислоСтрокРасчета;
			НоваяСтрока.ЧислоПроходов		= 1;
							
			ДобавитьСтрокиДереваПересчета(ОбъектРасчета,НоваяСтрока,СтруктураКлючевыхРеквизитов,СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.ПериодОтчета);
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Для каждого СтрПоказатель Из ТаблицаЗависимыхПоказателей  Цикл  // Для показателей других периодов		
		
		Если СтрПоказатель.СдвигПериодов=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		ТекПериодРасчета=ПолучитьОтносительныйПериод(ОбъектРасчета,СтруктураКлючевыхРеквизитов.ПериодОтчета,СтрПоказатель.СдвигПериодов*(-1));
				
		Если ПериодЗакрытДляРасчета(ОбъектРасчета,ТекПериодРасчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ВыполнятьРасчетПриАктуализации(ОбъектРасчета,СтрПоказатель,ТекПериодРасчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрПоказатель.НазначениеРасчетов=ОбъектРасчета.ПравилоОбработки ИЛИ ПроверитьИспользованиеПравила(ОбъектРасчета,СтрПоказатель.ВидОтчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,ТекПериодРасчета) Тогда
			
			ОбъектРасчета.ЧислоСтрокРасчета=ОбъектРасчета.ЧислоСтрокРасчета+1;
			
			НоваяСтрока=ОбъектРасчета.ДеревоПересчета.Строки.Добавить();
			НоваяСтрока.ВидОтчета=СтрПоказатель.ВидОтчета;
			НоваяСтрока.ПериодОтчета=ТекПериодРасчета;
			НоваяСтрока.ОсновнаяВалюта	= СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
			НоваяСтрока.ПравилоОбработки=СтрПоказатель.НазначениеРасчетов;
			НоваяСтрока.СдвигПериодов=СтрПоказатель.СдвигПериодов;
			НоваяСтрока.ПоказательОтчета	= СтрПоказатель.ПотребительРасчета;
			НоваяСтрока.ПоказательИсточник	= СтрПоказатель.ПоказательОтбор;
			НоваяСтрока.НомерОперации		= ОбъектРасчета.ЧислоСтрокРасчета;
			
			НоваяСтрока.ЧислоПроходов		= 1;
						
			ДобавитьСтрокиДереваПересчета(ОбъектРасчета,НоваяСтрока,СтруктураКлючевыхРеквизитов,СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,СтрПоказатель.НазначениеРасчетов,ТекПериодРасчета);
						
		КонецЕсли; 
		
	КонецЦикла;
	
	ОбъектРасчета.ДеревоПересчета.Строки.Сортировать("НомерОперации Возр");
	
	НомерОперации=1;
	
	Для Каждого Строка ИЗ ОбъектРасчета.ДеревоПересчета.Строки Цикл
		
		НомерОперации=НомерОперации+1;
		
		НоваяСтрока=ОбъектРасчета.ЗависимыеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		ДобавитьСтрокиПересчетаРекурсивно(ОбъектРасчета,Строка,Строка.ЧислоПроходов);
		
	КонецЦикла;
	
	ОтборПоАналитикам = "";
	ЗначенияСтатусовПоказателейСинтетикаАналитика = "";
	ЗависимыеПоказателиАналитика = "";
	ЗависимыеПоказателиГруппировка = "";
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ОбъектРасчета.ВидОтчета);	
	ТипХарактеристика = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
	
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		
		ИндАналитики = Строка(ИндексАналитики);
		ОтборПоАналитикам = ОтборПоАналитикам + "
	|			И ПоказателиПересчета.Аналитика" + ИндАналитики + " = БлокировкаПоСостоянию.Аналитика" + ИндАналитики;
		
		ЗначенияСтатусовПоказателейСинтетикаАналитика = ЗначенияСтатусовПоказателейСинтетикаАналитика + ",
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		
		ЗависимыеПоказателиАналитика = ЗависимыеПоказателиАналитика + ",
	|	ЗависимыеПоказатели.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		
		ЗависимыеПоказателиГруппировка = ЗависимыеПоказателиГруппировка + ",
	|	ЗависимыеПоказатели.Аналитика" + ИндАналитики;
		
		Если ОбъектРасчета.ЗависимыеПоказатели.Колонки.Найти("Аналитика" + ИндАналитики) = неопределено тогда
			ОбъектРасчета.ЗависимыеПоказатели.Колонки.Добавить("Аналитика" + ИндАналитики, ТипХарактеристика);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаксАналитикОтчета > 0 тогда
		
		Для Каждого СтрокаЗависимыхПоказателей Из ОбъектРасчета.ЗависимыеПоказатели Цикл
			
			Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
				ИндАналитики = Строка(ИндексАналитики);
				ОбъектРасчета.Свойство("Аналитика" + ИндАналитики, СтрокаЗависимыхПоказателей["Аналитика" + ИндАналитики]);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета,
	|	СтатусыПериодовСценариев.СтатусБлокировки КАК СтатусБлокировки
	|ПОМЕСТИТЬ БлокировкаПоПериоду
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Организации = &Организация
	|	И СтатусыПериодовСценариев.Сценарии = &Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПериодОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета КАК ПериодОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель КАК Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,	
	|	ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния КАК ИндексСостояния" + ЗначенияСтатусовПоказателейСинтетикаАналитика + "
	|ПОМЕСТИТЬ БлокировкаПоСостоянию
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|ГДЕ
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий = &Сценарий
	|	И ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = &Организация
	|	И (ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано >= 2
	|			ИЛИ ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеПоказатели.ВидОтчета КАК ВидОтчета,
	|	ЗависимыеПоказатели.ПериодОтчета КАК ПериодОтчета,
	|	ЗависимыеПоказатели.ПоказательОтчета КАК ПоказательОтчета,
	|	ЗависимыеПоказатели.ПравилоОбработки КАК ПравилоОбработки,
	|	ЗависимыеПоказатели.НомерОперации КАК НомерОперации,	
	|	ЗависимыеПоказатели.ЧислоПроходов КАК ЧислоПроходов" + ЗависимыеПоказателиАналитика + "
	|ПОМЕСТИТЬ ЗависимыеПоказатели
	|ИЗ
	|	&ЗависимыеПоказатели КАК ЗависимыеПоказатели
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеПоказатели.ВидОтчета КАК ВидОтчета,
	|	ЗависимыеПоказатели.ПоказательОтчета КАК ПоказательОтчета,
	|	ЗависимыеПоказатели.ПравилоОбработки КАК ПравилоОбработки,
	|	ЗависимыеПоказатели.ПериодОтчета КАК ПериодОтчета,
	|	МАКСИМУМ(ЗависимыеПоказатели.НомерОперации) КАК ПорядокРасчета,	
	|	МАКСИМУМ(ЗависимыеПоказатели.ЧислоПроходов) КАК ЧислоПроходов" + ЗависимыеПоказателиАналитика + "
	|ПОМЕСТИТЬ ПоказателиПересчета
	|ИЗ
	|	ЗависимыеПоказатели КАК ЗависимыеПоказатели
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗависимыеПоказатели.ВидОтчета,
	|	ЗависимыеПоказатели.ПоказательОтчета,
	|	ЗависимыеПоказатели.ПравилоОбработки,	
	|	ЗависимыеПоказатели.ПериодОтчета" + ЗависимыеПоказателиГруппировка + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиПересчета.ВидОтчета КАК ВидОтчета,
	|	ПоказателиПересчета.ПоказательОтчета КАК ПоказательОтчета,
	|	ПоказателиПересчета.ПериодОтчета КАК ПериодОтчета,
	|	ЕСТЬNULL(БлокировкаПоПериоду.СтатусБлокировки, 10) КАК СтатусБлокировки,
	|	ЕСТЬNULL(БлокировкаПоСостоянию.ЗначениеЗаблокировано, 0) КАК ЗначениеЗаблокировано,
	|	ЕСТЬNULL(БлокировкаПоСостоянию.ИндексСостояния, 0) КАК ИндексСостояния
	|ПОМЕСТИТЬ ДанныеБлокировки
	|ИЗ
	|	ПоказателиПересчета КАК ПоказателиПересчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ БлокировкаПоПериоду КАК БлокировкаПоПериоду
	|		ПО ПоказателиПересчета.ПериодОтчета = БлокировкаПоПериоду.ПериодОтчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ БлокировкаПоСостоянию КАК БлокировкаПоСостоянию
	|		ПО ПоказателиПересчета.ПоказательОтчета = БлокировкаПоСостоянию.Показатель	
	|			И ПоказателиПересчета.ПериодОтчета = БлокировкаПоСостоянию.ПериодОтчета" + ОтборПоАналитикам + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеБлокировки.ПериодОтчета КАК ПериодОтчета,
	|	ДанныеБлокировки.СтатусБлокировки КАК СтатусБлокировки
	|ИЗ
	|	ДанныеБлокировки КАК ДанныеБлокировки
	|ГДЕ
	|	ДанныеБлокировки.СтатусБлокировки > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеБлокировки.ПериодОтчета.ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеБлокировки.ВидОтчета КАК ВидОтчета,
	|	ДанныеБлокировки.ПоказательОтчета КАК ПоказательОтчета,
	|	ДанныеБлокировки.ПериодОтчета КАК ПериодОтчета,
	|	ДанныеБлокировки.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,
	|	ДанныеБлокировки.ИндексСостояния КАК ИндексСостояния
	|ИЗ
	|	ДанныеБлокировки КАК ДанныеБлокировки
	|ГДЕ
	|	(ДанныеБлокировки.ЗначениеЗаблокировано > 0
	|			ИЛИ ДанныеБлокировки.ИндексСостояния > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеБлокировки.ПериодОтчета.ДатаНачала,
	|	ДанныеБлокировки.ВидОтчета
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	ПоказателиПересчета.ВидОтчета КАК ВидОтчета,
	|	ПоказателиПересчета.ПериодОтчета КАК ПериодОтчета
	|ИЗ
	|	ПоказателиПересчета КАК ПоказателиПересчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиПересчета.ВидОтчета КАК ВидОтчета,
	|	ПоказателиПересчета.ПоказательОтчета КАК ПоказательОтчета,
	|	ПоказателиПересчета.ПравилоОбработки КАК ПравилоОбработки,
	|	ПоказателиПересчета.ПериодОтчета КАК ПериодОтчета,
	|	ПоказателиПересчета.ПорядокРасчета КАК ПорядокРасчета,
	|	ПоказателиПересчета.ЧислоПроходов КАК ЧислоПроходов
	|ИЗ
	|	ПоказателиПересчета КАК ПоказателиПересчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПоказателиПересчета.ПериодОтчета.ДатаНачала,
	|	ПоказателиПересчета.ЧислоПроходов,
	|	ПоказателиПересчета.ПорядокРасчета
	|;
	|Уничтожить БлокировкаПоПериоду
	|;
	|Уничтожить БлокировкаПоСостоянию
	|;
	|Уничтожить ЗависимыеПоказатели
	|;
	|Уничтожить ПоказателиПересчета
	|;
	|Уничтожить ДанныеБлокировки";
	
	Запрос.УстановитьПараметр("ЗависимыеПоказатели",ОбъектРасчета.ЗависимыеПоказатели);
	Запрос.УстановитьПараметр("Организация",СтруктураКлючевыхРеквизитов.Организация);
	Запрос.УстановитьПараметр("Сценарий",СтруктураКлючевыхРеквизитов.Сценарий);
	
	РезультатЗапроса=Запрос.ВыполнитьПакет();
	
	ТекстОшибки="";
	
	ЗаблокированныеПериоды=РезультатЗапроса[5].Выгрузить();
	
	Если ЗаблокированныеПериоды.Количество()>0 Тогда
		
		ТекСтрока=ЗаблокированныеПериоды[0];
		
		ТекстОшибки=СтрШаблон(Нстр("ru = '%1
		|Период %2%3'"), ТекстОшибки, ТекСтрока.ПериодОтчета, 
		?(ТекСтрока.СтатусБлокировки=10," еще не открыт."," закрыт."));
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстОшибки) Тогда
		
		ЗаблокированныеПоказатели=РезультатЗапроса[6].Выгрузить();
		
		Если ЗаблокированныеПоказатели.Количество()>0 Тогда
			
			ТекСтрока=ЗаблокированныеПоказатели[0];
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1
			|Период: %2, вид отчета: %3, показатель %4: '"), ТекстОшибки, ТекСтрока.ПериодОтчета, ТекСтрока.ВидОтчета, 
			ТекСтрока.ПоказательОтчета);
			
			Если ТекСтрока.ЗначениеЗаблокировано>0 Тогда
				
				ТекстОшибки=СтрШаблон(Нстр("ru = '%1
				|значение заблокировано'"), ТекстОшибки);
				
			КонецЕсли;
			
			Если ТекСтрока.ИндексСостояния>0 Тогда
				
				ТекстОшибки=СтрШаблон(Нстр("ru = '%1
				|данные утверждены'"), ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Организация: %1,
		|Сценарий: %2%3'"), СтруктураКлючевыхРеквизитов.Организация, СтруктураКлючевыхРеквизитов.Сценарий, ТекстОшибки);
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Пересчет рекурсивно зависимых показателей не произведен по следующим причинам.%1'"), 
			ТекстОшибки);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Важное);
		ПротоколируемыеСобытияУХ.Завершить("РасчетРекурсивноЗависимых",,,,Ложь,,Ложь);
		
		Возврат ТекстОшибки;
		
	КонецЕсли;
	
	ДанныеПересчета=РезультатЗапроса[7].Выгрузить();
	
	Для Каждого СтрПересчет ИЗ ДанныеПересчета Цикл
		
		НаборЗаписей=РегистрыСведений.ТекущиеРасчетыЗависимостей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОтчета.Установить(СтрПересчет.ВидОтчета);
		НаборЗаписей.Отбор.ПериодОтчета.Установить(СтрПересчет.ПериодОтчета);
		НаборЗаписей.Отбор.Организация.Установить(СтруктураКлючевыхРеквизитов.Организация);
		НаборЗаписей.Отбор.Сценарий.Установить(СтруктураКлючевыхРеквизитов.Сценарий);
		
		НоваяСтрока=НаборЗаписей.Добавить();
		НоваяСтрока.ВидОтчета=СтрПересчет.ВидОтчета;
		НоваяСтрока.ПериодОтчета=СтрПересчет.ПериодОтчета;
		НоваяСтрока.Организация=СтруктураКлючевыхРеквизитов.Организация;
		НоваяСтрока.Сценарий=СтруктураКлючевыхРеквизитов.Сценарий;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
	МассивПересчитанныхПоказателей=Новый Массив;
	
	Если Не ОбъектРасчета.Свойство("ТаблицаПротоколаСеанс") Тогда
		
		ОбъектРасчета.Вставить("ТаблицаПротоколаСеанс",КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуПротокола());
		
	КонецЕсли;
	
	Если ТрассировкаРасчета Тогда
		
		ТаблицаПересчета=РезультатЗапроса[8].Выгрузить();
		ТаблицаПересчета.Колонки.Добавить("ВремяРасчетаЗависимых",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
		ТаблицаПересчета.Колонки.Добавить("ВремяЗаписиЗависимых",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
		ТаблицаПересчета.Колонки.Добавить("ОбщееВремя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));

		ТаблицаПересчета.Колонки.Добавить("КоличествоСтрокРаскрытий",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
		ТаблицаПересчета.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ТаблицаПересчета.Колонки.Добавить("ПорядокРасчетаФинал",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		ПорядокРасчета=1;
		
		Для Каждого ДанныеДляПересчета ИЗ ТаблицаПересчета Цикл
			
			СтартMS=ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОбъектРасчета.Вставить("Расчет",СтартMS);
			ОбъектРасчета.Вставить("Запись",СтартMS);
			
			РассчитатьЗначениеПоказателя(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ДанныеДляПересчета.ВидОтчета,ДанныеДляПересчета.ПоказательОтчета,ДанныеДляПересчета.ПравилоОбработки,ДанныеДляПересчета.ПериодОтчета);
			
			Если МассивПересчитанныхПоказателей.Найти(ДанныеДляПересчета.ПоказательОтчета)=Неопределено Тогда
				
				МассивПересчитанныхПоказателей.Добавить(ДанныеДляПересчета.ПоказательОтчета);
				
			КонецЕсли;
				
			ДанныеДляПересчета.ВремяРасчетаЗависимых=ОбъектРасчета.Расчет-СтартMS;
			ДанныеДляПересчета.ВремяЗаписиЗависимых=ОбъектРасчета.Запись-ОбъектРасчета.Расчет;
			ДанныеДляПересчета.ОбщееВремя=ОбъектРасчета.Запись-СтартMS;
			
			ДанныеДляПересчета.КоличествоСтрокРаскрытий=ОбъектРасчета.мПоказателиРаскрытия.Количество();
			ДанныеДляПересчета.Значение=ОбъектРасчета.мПоказатели[0].Значение;
			ДанныеДляПересчета.ПорядокРасчетаФинал=ПорядокРасчета;
			
			ПорядокРасчета=ПорядокРасчета+1;
			
			Если СтруктураКлючевыхРеквизитов.Свойство("ВключатьВидОтчета")
				И (НЕ ОбъектРасчета.ПоказателиКПересчету=Неопределено) 
				И СтруктураКлючевыхРеквизитов.ВключатьВидОтчета 
				И ОбъектРасчета.ПоказателиКПересчету.Найти(ДанныеДляПересчета.ПоказательОтчета)=Неопределено Тогда
				
				ОбъектРасчета.ПоказателиКПересчету.Добавить(ДанныеДляПересчета.ПоказательОтчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаПересчета.Сортировать("ОбщееВремя Убыв");
		
		ОбъектРасчета.Вставить("МассивПересчитанныхПоказателей",МассивПересчитанныхПоказателей);
		
		Возврат ТаблицаПересчета;
		
	Иначе
		
		ДанныеДляПересчета=РезультатЗапроса[8].Выбрать();
		
		Пока ДанныеДляПересчета.Следующий() Цикл
			
			РассчитатьЗначениеПоказателя(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ДанныеДляПересчета.ВидОтчета,ДанныеДляПересчета.ПоказательОтчета,ДанныеДляПересчета.ПравилоОбработки,ДанныеДляПересчета.ПериодОтчета);
			
			Если МассивПересчитанныхПоказателей.Найти(ДанныеДляПересчета.ПоказательОтчета)=Неопределено Тогда
				
				МассивПересчитанныхПоказателей.Добавить(ДанныеДляПересчета.ПоказательОтчета);
				
			КонецЕсли;
			
			Если СтруктураКлючевыхРеквизитов.Свойство("ВключатьВидОтчета")
				И (НЕ ОбъектРасчета.ПоказателиКПересчету=Неопределено) 
				И СтруктураКлючевыхРеквизитов.ВключатьВидОтчета 
				И ОбъектРасчета.ПоказателиКПересчету.Найти(ДанныеДляПересчета.ПоказательОтчета)=Неопределено Тогда
				
				ОбъектРасчета.ПоказателиКПересчету.Добавить(ДанныеДляПересчета.ПоказательОтчета);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбъектРасчета.Вставить("МассивПересчитанныхПоказателей",МассивПересчитанныхПоказателей);
		
	КонецЕсли;
	
	Для Каждого СтрПересчет ИЗ ДанныеПересчета Цикл
		
		НаборЗаписей=РегистрыСведений.ТекущиеРасчетыЗависимостей.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидОтчета.Установить(СтрПересчет.ВидОтчета);
		НаборЗаписей.Отбор.ПериодОтчета.Установить(СтрПересчет.ПериодОтчета);
		НаборЗаписей.Отбор.Организация.Установить(СтруктураКлючевыхРеквизитов.Организация);
		НаборЗаписей.Отбор.Сценарий.Установить(СтруктураКлючевыхРеквизитов.Сценарий);
				
		НаборЗаписей.Записать();
		
	КонецЦикла;
			
КонецФункции // РассчитатьРекурсивноЗависимыеПоказателиПоТаблице() 	
	
Функция ПолучитьТаблицуЗависимыхПоМассиву(ОбъектРасчета,МассивПоказатели,СтруктураКлючевыхРеквизитов)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета,
	|	РеквизитыИсточниковДанныхДляФормул.НазначениеРасчетов,
	|	РеквизитыИсточниковДанныхДляФормул.ВидОтчета,
	|	РеквизитыИсточниковДанныхДляФормул.СдвигПериодов,
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор";
	
	Если ЗначениеЗаполнено(ОбъектРасчета.ПериодАктуализации) Тогда
		
		Запрос.Текст=Запрос.Текст+",
		|ВЫБОР КОГДА РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета.ДействияПриАктуализации=Значение(Перечисление.ДействияПриАктуализацииБюджетов.ПустаяСсылка)
		|Тогда Неопределено
		|Иначе РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета.ДействияПриАктуализации КОНЕЦ КАК ДействияПриАктуализации";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+",
		|Неопределено КАК ДействияПриАктуализации";
		
	КонецЕсли;
			
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	РегистрСведений.РеквизитыИсточниковДанныхДляФормул КАК РеквизитыИсточниковДанныхДляФормул
	|ГДЕ
	|	РеквизитыИсточниковДанныхДляФормул.ПоказательОтбор В(&МассивПоказатели)
	|	И (НЕ (РеквизитыИсточниковДанныхДляФормул.СдвигПериодов=0 И РеквизитыИсточниковДанныхДляФормул.ПотребительРасчета В(&МассивПоказатели)))
	|	И НЕ (РеквизитыИсточниковДанныхДляФормул.НеИспользуется ИЛИ РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.НеИспользуется ИЛИ РеквизитыИсточниковДанныхДляФормул.ИсточникДанных.ПометкаУдаления)
	|	И РеквизитыИсточниковДанныхДляФормул.СпособИспользования = ЗНАЧЕНИЕ(Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета)";
	
	Если СтруктураКлючевыхРеквизитов.Свойство("ВключатьВидОтчета") Тогда
		
		Если  СтруктураКлючевыхРеквизитов.ВключатьВидОтчета Тогда
			
			Запрос.Текст=Запрос.Текст+"	
			|	И РеквизитыИсточниковДанныхДляФормул.ВидОтчета=&ВидОтчета";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"	
			|	И РеквизитыИсточниковДанныхДляФормул.ВидОтчета<>&ВидОтчета";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидОтчета",СтруктураКлючевыхРеквизитов.ВидОтчета);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("МассивПоказатели",МассивПоказатели);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции
 
Функция ПолучитьТаблицуЗависимыхПоказателей(ОбъектРасчета,ПотребительРасчета,СтруктураКлючевыхРеквизитов)
	
	ТаблицаПоказателей=ОбъектРасчета.КэшЗависимыхПоказателей.Получить(ПотребительРасчета);
	
	Если НЕ ТаблицаПоказателей=Неопределено Тогда
		
		Возврат ТаблицаПоказателей;
		
	КонецЕсли; 
			
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаЗависимостейПоказателей.НазначениеРасчетов,
	|	ТаблицаЗависимостейПоказателей.ПотребительРасчета,
	|	ТаблицаЗависимостейПоказателей.ВидОтчета,
	|	ТаблицаЗависимостейПоказателей.СдвигПериодов,
	|	ТаблицаЗависимостейПоказателей.ПоказательОтчета КАК ПоказательОтбор";
	
	Если ЗначениеЗаполнено(ОбъектРасчета.ПериодАктуализации) Тогда
		
		Запрос.Текст=Запрос.Текст+",
		|ВЫБОР КОГДА ТаблицаЗависимостейПоказателей.ПотребительРасчета.ДействияПриАктуализации=Значение(Перечисление.ДействияПриАктуализацииБюджетов.ПустаяСсылка)
		|Тогда Неопределено
		|Иначе ТаблицаЗависимостейПоказателей.ПотребительРасчета.ДействияПриАктуализации КОНЕЦ КАК ДействияПриАктуализации";
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+",
		|Неопределено КАК ДействияПриАктуализации";
		
	КонецЕсли;
			
	Запрос.Текст=Запрос.Текст+"
	|ИЗ
	|	РегистрСведений.ТаблицаЗависимостейПоказателей КАК ТаблицаЗависимостейПоказателей
	|ГДЕ
	|	ТаблицаЗависимостейПоказателей.ПоказательОтчета = &ПоказательОтчета
	|И (НЕ (ТаблицаЗависимостейПоказателей.СдвигПериодов=0 И ТаблицаЗависимостейПоказателей.ПотребительРасчета=&ПоказательОтчета))";
	
	Если СтруктураКлючевыхРеквизитов.Свойство("ВключатьВидОтчета") Тогда
		
		Если СтруктураКлючевыхРеквизитов.ВключатьВидОтчета Тогда
			
			Запрос.Текст=Запрос.Текст+"	
			|	И ТаблицаЗависимостейПоказателей.ВидОтчета=&ВидОтчета";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"	
			|	И ТаблицаЗависимостейПоказателей.ВидОтчета<>&ВидОтчета";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ВидОтчета",СтруктураКлючевыхРеквизитов.ВидОтчета);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("ПоказательОтчета",ПотребительРасчета);
		
	ТаблицаПоказателей=Запрос.Выполнить().Выгрузить();	
	ОбъектРасчета.КэшЗависимыхПоказателей.Вставить(ПотребительРасчета,ТаблицаПоказателей);
	
	Возврат ТаблицаПоказателей;
			
КонецФункции
 
Функция ЗаписатьИзмененияВРегистр(ОбъектРасчета)
	
	ОбъектРасчета.Вставить("АктивностьДвижений",Ложь);
		
	ОбъектРасчета.Вставить("ПоследнийРедактировавший",ОбъектРасчета.ПоследнийРедактировавший);
	ОбъектРасчета.Вставить("ДатаИзменения",ТекущаяДата());
	ОбъектРасчета.Вставить("ДатаИзмененияMs",ОбъектРасчета.ДатаИзмененияMs);
	
	Отказ=Ложь;
	
	УправлениеОтчетамиУХ.ЗаписатьПоказателиОтчетов(ОбъектРасчета,Отказ,Ложь);
	
	Возврат Не Отказ;
		
КонецФункции

Процедура ИнициализироватьСоответствияДляПоиска(ОбъектРасчета) Экспорт
	
	ПоказателиОбъекта=Новый Структура("мПоказатели",ОбъектРасчета.мПоказатели);
	УправлениеОтчетамиУХ.ИнициализироватьСоответствияДляПоиска(ПоказателиОбъекта);
	мСоответствиеДляПоискаПоКоду=ПоказателиОбъекта.мСоответствиеДляПоискаПоКоду;
	ОбъектРасчета.мСоответствиеДляПоискаПоСсылке=ПоказателиОбъекта.мСоответствиеДляПоискаПоСсылке;
	мРедактируемыеПоказатели=ПоказателиОбъекта.мРедактируемыеПоказатели;
		
КонецПроцедуры // ИнициализироватьСоответствияДляПоиска()

Функция ПолучитьСтруктуруПараметровДляРасшифровки(ОбъектРасчета) Экспорт
	
	Если ОбъектРасчета.МаксАналитикОтчета=Неопределено Тогда
		
		ОбъектРасчета.МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ОбъектРасчета.ВидОтчета);
		
	КонецЕсли;
	
	СтрокаРасшифровки=ОбъектРасчета.ТаблицаИзмененныхПоказателей[0];
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураКлючевыхРеквизитов.Вставить("Организация",		СтрокаРасшифровки.Организация);
	СтруктураКлючевыхРеквизитов.Вставить("ПериодОтчета",	СтрокаРасшифровки.ПериодОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("Сценарий",		СтрокаРасшифровки.Сценарий);
	СтруктураКлючевыхРеквизитов.Вставить("Проект",			СтрокаРасшифровки.Проект);
	СтруктураКлючевыхРеквизитов.Вставить("ВидОтчета",		ОбъектРасчета.ВидОтчета);
	СтруктураКлючевыхРеквизитов.Вставить("ОсновнаяВалюта",	ОбъектРасчета.ОсновнаяВалюта);
		
	Для Индекс=1 По ОбъектРасчета.МаксАналитикОтчета Цикл
		
		СтруктураКлючевыхРеквизитов.Вставить("Аналитика"+Индекс,СтрокаРасшифровки["Аналитика"+Индекс]);
		
	КонецЦикла;
	
	ДокументСсылка=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтруктураКлючевыхРеквизитов.Организация,
											СтруктураКлючевыхРеквизитов.ПериодОтчета,
											СтруктураКлючевыхРеквизитов.Сценарий,
											СтруктураКлючевыхРеквизитов.ВидОтчета,
											СтруктураКлючевыхРеквизитов.ОсновнаяВалюта,
											Истина,Ложь,,СтруктураКлючевыхРеквизитов.Проект);
	
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		
		ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
		
	Иначе
		
		ДокументОбъект=Документы.НастраиваемыйОтчет.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокументОбъект,СтруктураКлючевыхРеквизитов);
		
		СтруктураРеквизитов=ПолучитьСтруктуруРеквизитов(ОбъектРасчета,ОбъектРасчета.ВидОтчета,СтрокаРасшифровки.Организация,СтрокаРасшифровки.Сценарий,СтрокаРасшифровки.ПериодОтчета);
		
		ДокументОбъект.ПравилоОбработки=СтруктураРеквизитов.ПравилоОбработки;
		ДокументОбъект.ИспользуемаяИБ=СтруктураРеквизитов.ВИБ;
		
		Если ЗначениеЗаполнено(ДокументОбъект.ПравилоОбработки.ТипБД)
			И (НЕ (ЗначениеЗаполнено(ДокументОбъект.ИспользуемаяИБ) 
			ИЛИ ДокументОбъект.ПравилоОбработки.ТипБД=Справочники.ТипыБазДанных.ПустаяСсылка()
			ИЛИ ДокументОбъект.ПравилоОбработки.ТипБД=Справочники.ТипыБазДанных.ТекущаяИБ)) Тогда
			
			ДокументОбъект.ИспользуемаяИБ=ДокументОбъект.ПравилоОбработки.ТипБД.ВИБПоУмолчанию;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДокументОбъект.ЧтениеНеактуальныхЗаписей=Истина;	
	ДокументОбъект.ВсегдаЗаполнятьАналитики=Истина;
	ДокументОбъект.ИнициализироватьКонтекст();
	
	ОбъектРасчета=ДокументОбъект.ПодготовитьСтруктуруПеременныхДляРасчета();
	ОбъектРасчета.Вставить("ПоказательОтчета",СтрокаРасшифровки.ПоказательОтчета);		
		
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ОбъектРасчета",	ОбъектРасчета);
	СтруктураПараметров.Вставить("ПоказательОтчета",СтрокаРасшифровки.ПоказательОтчета);
	СтруктураПараметров.Вставить("мТекущаяВалюта",	ОбъектРасчета.ОсновнаяВалюта);
	
	Если НЕ СтрокаРасшифровки.СинтетическоеЗначение Тогда
		
		СтрПоказатель=ОбъектРасчета.мСоответствиеДляПоискаПоСсылке[СтрокаРасшифровки.ПоказательОтчета];
		
		СтруктураОтбора=Новый Структура;
		
		Для Инд=(ОбъектРасчета.МаксАналитикОтчета+1) ПО СтрПоказатель.ЧислоАналитикГруппыРаскрытия Цикл
			
			СтруктураОтбора.Вставить("Аналитика"+Индекс,СтрокаРасшифровки["Аналитика"+Инд]);
			Индекс=Индекс+1;
			
		КонецЦикла;
		
		СтруктураПараметров.Вставить("СтруктураОтбора",СтруктураОтбора);
		
	Иначе
		
		СтруктураПараметров.Вставить("СтруктураОтбора",Неопределено);
		
	КонецЕсли;
	
	ДокументОбъект=0;
	
	Возврат СтруктураПараметров;	
	
КонецФункции // ПолучитьСтруктуруПараметровДляРасшифровки()

Процедура ДобавитьСтрокиДереваПересчета(ОбъектРасчета,СтрокаРодитель,СтруктураКлючевыхРеквизитов,ТекВидОтчета,ТекПотребительРасчета,ТекНазначениеРасчетов,ПериодРасчета)
	
	ТаблицаЗависимыхПоказателей=ПолучитьТаблицуЗависимыхПоказателей(ОбъектРасчета,ТекПотребительРасчета,СтруктураКлючевыхРеквизитов);
	
	Если ТаблицаЗависимыхПоказателей=Неопределено Тогда

		Возврат;
		
	КонецЕсли;
	
	Для каждого СтрПоказатель Из ТаблицаЗависимыхПоказателей  Цикл  // Для текущих показателей
		
		Если НЕ СтрПоказатель.СдвигПериодов=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
		
		Если НЕ ВыполнятьРасчетПриАктуализации(ОбъектРасчета,СтрПоказатель,ПериодРасчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрПоказатель.НазначениеРасчетов=ТекНазначениеРасчетов ИЛИ ПроверитьИспользованиеПравила(ОбъектРасчета,СтрПоказатель.ВидОтчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,ПериодРасчета) Тогда
					
		ДанныеДляПоиска=ЗначениеВСтрокуВнутр(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ПериодРасчета));
		СтрокаПересчета=ОбъектРасчета.СоответствиеСтрокПересчета[ДанныеДляПоиска];
		
		ОбъектРасчета.ЧислоСтрокРасчета=ОбъектРасчета.ЧислоСтрокРасчета+1;
		
		Если НЕ СтрокаПересчета=Неопределено Тогда
			
			СтрокаПересчета.ЧислоПроходов=СтрокаПересчета.ЧислоПроходов+1;
			СтрокаПересчета.НомерОперации=?(СтрокаПересчета.НомерОперации<ОбъектРасчета.ЧислоСтрокРасчета,ОбъектРасчета.ЧислоСтрокРасчета,СтрокаПересчета.НомерОперации);
			УвеличитьСчетчикПереходовРекурсивно(ОбъектРасчета,СтрокаПересчета);
			
		Иначе
						
			НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.ВидОтчета=СтрПоказатель.ВидОтчета;
			НоваяСтрока.ПериодОтчета=ПериодРасчета;
			НоваяСтрока.ОсновнаяВалюта		= СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
			НоваяСтрока.ПравилоОбработки=СтрПоказатель.НазначениеРасчетов;
			НоваяСтрока.СдвигПериодов=СтрПоказатель.СдвигПериодов;
			НоваяСтрока.ПоказательОтчета=СтрПоказатель.ПотребительРасчета;
			НоваяСтрока.ПоказательИсточник=ТекПотребительРасчета;
			НоваяСтрока.НомерОперации		= ОбъектРасчета.ЧислоСтрокРасчета;
			
			НоваяСтрока.ЧислоПроходов=1;
			
			ОбъектРасчета.СоответствиеСтрокПересчета.Вставить(ДанныеДляПоиска,НоваяСтрока);
							
			ДобавитьСтрокиДереваПересчета(ОбъектРасчета,НоваяСтрока,СтруктураКлючевыхРеквизитов,СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,СтрПоказатель.НазначениеРасчетов,ПериодРасчета);
			
			КонецЕсли;
			
			Если ОбъектРасчета.ЕстьЗаблокированныеПоказатели Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
		
	Для каждого СтрПоказатель Из ТаблицаЗависимыхПоказателей  Цикл  // Для показателей других периодов		
		
		Если СтрПоказатель.СдвигПериодов=0 Тогда
			
			Продолжить;
			
		КонецЕсли; 
				
		ТекПериодРасчета=ПолучитьОтносительныйПериод(ОбъектРасчета,ПериодРасчета,СтрПоказатель.СдвигПериодов*(-1));
		
		Если ПериодЗакрытДляРасчета(ОбъектРасчета,ТекПериодРасчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ВыполнятьРасчетПриАктуализации(ОбъектРасчета,СтрПоказатель,ТекПериодРасчета) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрПоказатель.НазначениеРасчетов=ТекНазначениеРасчетов ИЛИ ПроверитьИспользованиеПравила(ОбъектРасчета,СтрПоказатель.ВидОтчета,СтрПоказатель.НазначениеРасчетов,СтруктураКлючевыхРеквизитов.Организация,СтруктураКлючевыхРеквизитов.Сценарий,ПериодРасчета) Тогда
					
		ДанныеДляПоиска=ЗначениеВСтрокуВнутр(Новый Структура("ВидОтчета,ПоказательОтчета,ПериодОтчета",СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,ТекПериодРасчета));
		СтрокаПересчета=ОбъектРасчета.СоответствиеСтрокПересчета[ДанныеДляПоиска];
		
		ОбъектРасчета.ЧислоСтрокРасчета=ОбъектРасчета.ЧислоСтрокРасчета+1;
		
		Если НЕ СтрокаПересчета=Неопределено Тогда
			
			СтрокаПересчета.ЧислоПроходов=СтрокаПересчета.ЧислоПроходов+1;
			СтрокаПересчета.НомерОперации=?(СтрокаПересчета.НомерОперации<ОбъектРасчета.ЧислоСтрокРасчета,ОбъектРасчета.ЧислоСтрокРасчета,СтрокаПересчета.НомерОперации);
			УвеличитьСчетчикПереходовРекурсивно(ОбъектРасчета,СтрокаПересчета);
			
		Иначе
			
			НоваяСтрока=СтрокаРодитель.Строки.Добавить();
			НоваяСтрока.ВидОтчета=СтрПоказатель.ВидОтчета;
			НоваяСтрока.ПериодОтчета=ТекПериодРасчета;
			НоваяСтрока.ОсновнаяВалюта		= СтруктураКлючевыхРеквизитов.ОсновнаяВалюта;
			НоваяСтрока.ПравилоОбработки=СтрПоказатель.НазначениеРасчетов;
			НоваяСтрока.СдвигПериодов=СтрПоказатель.СдвигПериодов;
			НоваяСтрока.ПоказательОтчета=СтрПоказатель.ПотребительРасчета;
			НоваяСтрока.ПоказательИсточник=ТекПотребительРасчета;
			НоваяСтрока.НомерОперации		= ОбъектРасчета.ЧислоСтрокРасчета;
			
			НоваяСтрока.ЧислоПроходов=1;
			
			ОбъектРасчета.СоответствиеСтрокПересчета.Вставить(ДанныеДляПоиска,НоваяСтрока);
						
			КонецЕсли;
			
			ДобавитьСтрокиДереваПересчета(ОбъектРасчета,НоваяСтрока,СтруктураКлючевыхРеквизитов,СтрПоказатель.ВидОтчета,СтрПоказатель.ПотребительРасчета,СтрПоказатель.НазначениеРасчетов,ТекПериодРасчета);
			
			Если ОбъектРасчета.ЕстьЗаблокированныеПоказатели Тогда
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьСтрокиДереваПересчета()

Процедура ДобавитьСтрокиПересчетаРекурсивно(ОбъектРасчета,СтрокаРодитель,МаксЧислоПроходов)
			
	Для Каждого Строка ИЗ СтрокаРодитель.Строки Цикл
				
		РабочееЧислоПроходов=Макс(МаксЧислоПроходов,СтрокаРодитель.ЧислоПроходов,Строка.ЧислоПроходов);
		
		НоваяСтрока=ОбъектРасчета.ЗависимыеПоказатели.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
		НоваяСтрока.ЧислоПроходов=РабочееЧислоПроходов;
		
		ДобавитьСтрокиПересчетаРекурсивно(ОбъектРасчета,Строка,РабочееЧислоПроходов);
		
	КонецЦикла;
		
КонецПроцедуры // ДобавитьСтрокиПересчетаРекурсивно()

Функция ПериодЗакрытДляРасчета(ОбъектРасчета,ТекущийПериод)
	
	ПроверкаВыполнена=ОбъектРасчета.КэшПериодовГода[ТекущийПериод];
	
	Если ПроверкаВыполнена=Неопределено Тогда
		
		ПериодЗакрытДляРасчета=(ОбъектРасчета.ОткрытыеПериоды.Найти(ТекущийПериод)=Неопределено);
		
		ОбъектРасчета.КэшПериодовГода.Вставить(ТекущийПериод,ПериодЗакрытДляРасчета);
		Возврат ПериодЗакрытДляРасчета;
		
	Иначе
		
		Возврат ПроверкаВыполнена;
		
	КонецЕсли;		
	
КонецФункции // ПериодЗакрытДляРасчета()

Функция ПолучитьОтносительныйПериод(ОбъектРасчета,ПериодОтчета,Смещение)
	
	МассивСтрок=ОбъектРасчета.КэшОтносительныхПериодов.НайтиСтроки(Новый Структура("ПериодОтчета,Смещение",ПериодОтчета,Смещение));
	
	Если МассивСтрок.Количество()>0 Тогда
		
		Возврат МассивСтрок[0].ОтносительныйПериод;
		
	Иначе
		
		ТекПериодРасчета=ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета,Смещение);
		НоваяСтрока=ОбъектРасчета.КэшОтносительныхПериодов.Добавить();
		НоваяСтрока.ПериодОтчета=ПериодОтчета;
		НоваяСтрока.Смещение=Смещение;
		НоваяСтрока.ОтносительныйПериод=ТекПериодРасчета;
		
		Возврат ТекПериодРасчета;
		
	КонецЕсли;
			
КонецФункции // ПолучитьОтносительныйПериод()

Процедура УвеличитьСчетчикПереходовРекурсивно(ОбъектРасчета,СтрокаПересчета)
	
	Для Каждого Строка ИЗ СтрокаПересчета.Строки Цикл
		
		ОбъектРасчета.ЧислоСтрокРасчета=ОбъектРасчета.ЧислоСтрокРасчета+1;
		Строка.ЧислоПроходов=Строка.ЧислоПроходов+1;
		Строка.НомерОперации=?(СтрокаПересчета.НомерОперации<ОбъектРасчета.ЧислоСтрокРасчета,ОбъектРасчета.ЧислоСтрокРасчета,СтрокаПересчета.НомерОперации);
		
		УвеличитьСчетчикПереходовРекурсивно(ОбъектРасчета,Строка);
		
	КонецЦикла;
	
КонецПроцедуры // УвеличитьСчетчикПереходовРекурсивно()

Процедура УдалитьОписанияЧерновыхВерсий(МассивОписаний) Экспорт
	
	Для Каждого ОписаниеВерсий ИЗ МассивОписаний Цикл
		
		Попытка
			
			ОбъектОписаниеВерсий = ОписаниеВерсий.ПолучитьОбъект();
			
			Если НЕ ОбъектОписаниеВерсий=Неопределено Тогда
				
				ОбъектОписаниеВерсий.БезусловноеУдаление = Истина;
				ОбъектОписаниеВерсий.Удалить();
				
			КонецЕсли;
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Важное);
			
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьОписанияВерсий()

#Область Элиминация

Функция ПолучитьОписаниеКонтекста(ОбъектРасчета) Экспорт
	
	Возврат СтрШаблон(Нстр("ru = 'Сценарий: %1
	|Период: %2
	|Организация: %3'"), ОбъектРасчета.Сценарий, ОбъектРасчета.ПериодОтчета, ОбъектРасчета.Организация);	
	
КонецФункции // ПолучитьОписаниеКонтекста()

Функция ВыполнитьПростуюЭлиминацию(ОбъектРасчета,ДляРасшифровки=Ложь) Экспорт
	
	Если НЕ ОбъектРасчета.Организация.ЭлиминирующаяОрганизация Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Организация %1 не является элиминирующей. Заполнение способом ""Элиминация"" невозможно.'"), 
			ОбъектРасчета.Организация),,,СтатусСообщения.Важное);
			
			Возврат Ложь;
			
	КонецЕсли;
			
	ДанныеПериода=Документы.НастраиваемыйОтчет.ПолучитьДанныеПериода(ОбъектРасчета.Сценарий,ОбъектРасчета.ПериодОтчета,ОбъектРасчета.Организация);
	
	ДокументУправленияПериодомСценария = ДанныеПериода.УправлениеПериодом;
	
	Если ДокументУправленияПериодомСценария = Неопределено Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Невозможно определить документ управления периодом сценария для сценария %1 и периода %2'"), 
			ОбъектРасчета.Сценарий, ОбъектРасчета.ПериодОтчета),,,СтатусСообщения.Важное);
			
		Возврат Ложь;	
		
	КонецЕсли;
	
	ТаблицаПериметр = УправлениеРабочимиПроцессамиУХ.ПолучитьДанныеРегламентаОтчета(ОбъектРасчета);
	
	Если ТаблицаПериметр.Количество() = 0 Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(
		СтрШаблон(Нстр("ru = 'В документе ""%1"", к области действия которого относится текущий отчет,
		|не определен состав периметра для организационной единицы ""%2""!'"), 
		ДокументУправленияПериодомСценария, ОбъектРасчета.Организация),,,СтатусСообщения.Важное);
		мТабРасшифровкиПоказателей=Новый ТаблицаЗначений;
		
		Возврат Ложь;
				
	КонецЕсли;
	
	МассивОрганизацийПериметра = ТаблицаПериметр.ВыгрузитьКолонку("ИндивидуальнаяОрганизация");
	ИндексОрганизации=МассивОрганизацийПериметра.Найти(ОбъектРасчета.Организация);
	
	Если НЕ ИндексОрганизации=Неопределено Тогда
		
		МассивОрганизацийПериметра.Удалить(ИндексОрганизации);
		
	КонецЕсли;
			
	ТекСписокВерсий = Новый СписокЗначений;
	ТекСписокВерсий.ЗагрузитьЗначения(ПолучитьВерсииКонсолидируюмыхОтчетов(ОбъектРасчета,МассивОрганизацийПериметра));
	
	ДополнитьВнутригрупповымиКонтрагентами(МассивОрганизацийПериметра);
	
	Если НЕ ДляРасшифровки Тогда
		
		ОбъектРасчета.мПоказателиРаскрытия.Очистить();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиОтчетов.ГруппаРаскрытия.АналитикаВГО КАК ГруппаРаскрытияАналитикаВГО,
	|	ПоказателиОтчетов.ГруппаРаскрытия.ЧислоАналитик КАК ГруппаРаскрытияЧислоАналитик,
	|	ПоказателиОтчетов.Ссылка КАК Показатель
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.ВнутриГрупповой
	|	И ПоказателиОтчетов.Владелец = &ВидОтчета";
	
	Запрос.УстановитьПараметр("ВидОтчета",ОбъектРасчета.ВидОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Пока Результат.Следующий() Цикл
		
		ИмяРегистра="ЗначенияПоказателейОтчетов"+Результат.ГруппаРаскрытияЧислоАналитик;
		
		ТекстЗапроса="ВЫБРАТЬ "+ИмяРегистра+".Показатель,
		|АналитикаВалюта";
				
		Для Индекс=1 ПО Результат.ГруппаРаскрытияЧислоАналитик Цикл
			
			ТекстЗапроса=ТекстЗапроса+",
			|"+ИмяРегистра+".Аналитика"+Индекс;
			
		КонецЦикла;
		
		Если ДляРасшифровки Тогда
			
			ТекстЗапроса=ТекстЗапроса+",
			|"+ИмяРегистра+".Версия.Организация КАК Организация,
			|"+ИмяРегистра+".Версия.ЭкземплярОтчета КАК Регистратор";
			
		КонецЕсли;

		ТекстЗапроса=ТекстЗапроса+",
		|	СУММА("+ИмяРегистра+".Значение) КАК Значение,
		|	СУММА("+ИмяРегистра+".ЗначениеВалюта) КАК ЗначениеВалюта
		|ИЗ	РегистрСведений."+ИмяРегистра+" КАК "+ИмяРегистра+"
		|ГДЕ "+ИмяРегистра+".Показатель=&Показатель
		|И "+ИмяРегистра+".Версия В(&СписокВерсий)
		|И "+ИмяРегистра+".Аналитика"+Результат.ГруппаРаскрытияАналитикаВГО+" В(&МассивПериметра)
		|Сгруппировать ПО
		|"+ИмяРегистра+".Показатель,АналитикаВалюта";
		
		Для Индекс=1 ПО Результат.ГруппаРаскрытияЧислоАналитик Цикл
			
			ТекстЗапроса=ТекстЗапроса+",
			|"+ИмяРегистра+".Аналитика"+Индекс;
			
		КонецЦикла;
		
		Если ДляРасшифровки Тогда
			
			ТекстЗапроса=ТекстЗапроса+",
			|"+ИмяРегистра+".Версия.Организация,
			|"+ИмяРегистра+".Версия.ЭкземплярОтчета";
			
		КонецЕсли;
		
		ЗапросРаскрытие=Новый Запрос;
		ЗапросРаскрытие.Текст=ТекстЗапроса;
		ЗапросРаскрытие.УстановитьПараметр("Показатель",Результат.Показатель);
		ЗапросРаскрытие.УстановитьПараметр("СписокВерсий",ТекСписокВерсий);
		ЗапросРаскрытие.УстановитьПараметр("МассивПериметра",МассивОрганизацийПериметра);
		
		Если ДляРасшифровки Тогда
			
			ДобавитьЗначенияВТаблицуРасшифровки(ОбъектРасчета,ЗапросРаскрытие);
			
		Иначе
			
			ЗаписатьПоказателиОтчетовВОбъект(ОбъектРасчета,ЗапросРаскрытие,Результат.Показатель);
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции // ВыполнитьПростуюЭлиминацию()

Процедура ДобавитьЗначенияВТаблицуРасшифровки(ОбъектРасчета,ЗапросРаскрытие)
	
	Результат=ЗапросРаскрытие.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = ОбъектРасчета.мТабРасшифровкиЭлиминация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		
		НоваяСтрока.Значение		= -Результат.Значение;
		НоваяСтрока.ЗначениеВалюта	= -Результат.ЗначениеВалюта;
					
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьЗначенияВТаблицуРасшифровки() 

Процедура ЗаписатьПоказателиОтчетовВОбъект(ОбъектРасчета,Запрос,Показатель)
	
	СинтетическоеЗначение=0;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока = ОбъектРасчета.мПоказателиРаскрытия.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат,,"Значение,ЗначениеВалюта");
				
		СинтетическоеЗначение=СинтетическоеЗначение-Результат.Значение;
		
		ДанныеДляЗаписи=Новый Структура;
		ДанныеДляЗаписи.Вставить("Значение", -Результат.Значение);
		ДанныеДляЗаписи.Вставить("ЗначениеВалюта",-Результат.ЗначениеВалюта);
				
		УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказателиРаскрытия(ОбъектРасчета,ДанныеДляЗаписи,НоваяСтрока);
					
	КонецЦикла;	
		
	УправлениеОтчетамиУХ.ЗаписатьЗначениеВмПоказатели(ОбъектРасчета,Показатель,СинтетическоеЗначение);
				
КонецПроцедуры // ЗаписатьПоказателиОтчетовВОбъект()

Процедура ДополнитьВнутригрупповымиКонтрагентами(МассивОрганизацийПериметра)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ОрганизационнаяЕдиница В(&МассивПериметра)";
	
	Запрос.УстановитьПараметр("МассивПериметра",МассивОрганизацийПериметра);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МассивОрганизацийПериметра.Добавить(Результат.Ссылка);
		
	КонецЦикла;
				
КонецПроцедуры // ДополнитьВнутригрупповымиКонтрагентами() 

// Функция - Получить версии консолидируюмых отчетов
//
// Параметры:
//  СписокПериметра	 - массив организаций для отбора версий
// Возвращаемое значение:
//   - массив версий значений показателей
Функция ПолучитьВерсииКонсолидируюмыхОтчетов(ОбъектРасчета,СписокПериметра) Экспорт

	ЗапросВерсии = Новый Запрос;
	ЗапросВерсии.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.Регистратор
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Организация В(&СписокПериметра)
	|	И (НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия)	
	|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
	|	И ВерсииЗначенийПоказателей.Проект = &Проект
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета";
	
	Если НЕ УправлениеОтчетамиУХ.ИспользоватьНеактуальныеЗаписи(ОбъектРасчета) Тогда
		ЗапросВерсии.Текст = ЗапросВерсии.Текст + "
		|	И ВерсииЗначенийПоказателей.Активность = ИСТИНА";
	КонецЕсли;
	
	Для Инд = 1 По ОбъектРасчета.МаксАналитикОтчета Цикл
		
		ЗапросВерсии.Текст=ЗапросВерсии.Текст+"
		|И ВерсииЗначенийПоказателей.Аналитика"+Инд+"=&Аналитика"+Инд;
		
		ЗапросВерсии.УстановитьПараметр("Аналитика" + Инд, 
								?(ЗначениеЗаполнено(ОбъектРасчета["Аналитика"+Инд]), ОбъектРасчета["Аналитика"+Инд], 
									Неопределено));;
		
	КонецЦикла;
	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", 		ОбъектРасчета.ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Сценарий", 		ОбъектРасчета.Сценарий);
	ЗапросВерсии.УстановитьПараметр("Проект", 			ОбъектРасчета.Проект);
	ЗапросВерсии.УстановитьПараметр("ПериодОтчета", 	ОбъектРасчета.ПериодОтчета);
	ЗапросВерсии.УстановитьПараметр("Валюта", 			ОбъектРасчета.ОсновнаяВалюта);
	ЗапросВерсии.УстановитьПараметр("СписокПериметра", 	СписокПериметра);
	ЗапросВерсии.УстановитьПараметр("Ссылка", 			ОбъектРасчета.Ссылка);

	МассивВерсийКонсолидации=Новый Массив;
	
	Результат=ЗапросВерсии.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Результат.Регистратор) Тогда
			
			УправлениеОтчетамиУХ.ЗаполнитьРегистраторВерсии(Результат.Ссылка);
			
		КонецЕсли;
		
		МассивВерсийКонсолидации.Добавить(Результат.Ссылка);
		
	КонецЦикла;
	
	Возврат МассивВерсийКонсолидации;

КонецФункции

#КонецОбласти

#Область ТаблицыЗначенийПоказателей

//
Функция ПолучитьТаблицуРаскрытияПоПараметрам(Организация, Сценарий, ВидОтчета, ПериодОтчета,
									ОсновнаяВалюта 	= Неопределено,
									ПериодОкончания	= Неопределено, 
									Проект 			= Неопределено,
									ГруппаРаскрытия	= Неопределено,
									ПараметрыОтбораПоказателей	= Неопределено,
									СтруктураКлючевыхАналитик	= Неопределено) Экспорт
									
	ОбъектРасчета=Новый Структура;
	ОбъектРасчета.Вставить("Организация",		Организация);
	ОбъектРасчета.Вставить("Сценарий",			Сценарий);
	ОбъектРасчета.Вставить("ВидОтчета",			ВидОтчета);
	ОбъектРасчета.Вставить("ПериодОтчета",		ПериодОтчета);
	ОбъектРасчета.Вставить("ПериодОкончания",	ПериодОкончания);
	ОбъектРасчета.Вставить("ОсновнаяВалюта",	ОсновнаяВалюта);
	ОбъектРасчета.Вставить("Проект",			?(ЗначениеЗаполнено(Проект),Проект,Справочники.Проекты.ПустаяСсылка()));
	ОбъектРасчета.Вставить("ЧислоДопАналитик",	ПараметрыСеанса.ЧислоДопАналитик);
	ОбъектРасчета.Вставить("ВсегдаЗаполнятьАналитики",Истина);
	ОбъектРасчета.Вставить("МаксАналитикОтчета",ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета));
	ОбъектРасчета.Вставить("МассивЗагруженныхГруппРаскрытия",Новый Массив);
	ОбъектРасчета.Вставить("АнализЧувствительности",Ложь);
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если СтруктураКлючевыхАналитик=Неопределено
			ИЛИ (НЕ СтруктураКлючевыхАналитик.Свойство("Аналитика"+Индекс)) Тогда
			
			ОбъектРасчета.Вставить("Аналитика"+Индекс,Неопределено);
			
		Иначе
			
			ОбъектРасчета.Вставить("Аналитика"+Индекс,СтруктураКлючевыхАналитик["Аналитика"+Индекс]);
			
		КонецЕсли;
			
	КонецЦикла;
									
	Если Не ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
		
		ДокументУправленияПериодом = УправлениеРабочимиПроцессамиУХ.ОпределитьДокументУправленияПериодомСценария(Сценарий, ПериодОтчета);
		
		Если ДокументУправленияПериодом = Неопределено Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось получить таблицу раскрытий для вида отчета: %1, 
			|Организация: %2,
			|Период: %3,
			|Сценарий: %4, 
			|Не удалось определить период подготовки отчетности.'"), ВидОтчета, Организация, 
			ПериодОтчета, Сценарий),,,СтатусСообщения.Внимание);
			
			Возврат ПолучитьПустуюТаблицуРаскрытий(ОбъектРасчета);
			
		КонецЕсли;
		
		ДанныеПоВалютам=УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ДокументУправленияПериодом.ВерсияОрганизационнойСтруктуры, ВидОтчета, Организация);
		ОбъектРасчета.Вставить("ОсновнаяВалюта",ДанныеПоВалютам.ОсновнаяВалюта);
		
	КонецЕсли;
	
	Возврат УправлениеОтчетамиУХ.ЗаполнитьТаблицуРаскрытий(ОбъектРасчета,ГруппаРаскрытия,,,ПараметрыОтбораПоказателей);


КонецФункции // ПолучитьТаблицуРаскрытияПоПараметрам() 

Функция ПолучитьПустуюТаблицуРаскрытий(ОбъектРасчета) Экспорт
	
	ВнТаблицаРаскрытия = Новый ТаблицаЗначений;
	ВнТаблицаРаскрытия.Колонки.Добавить("Показатель",Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов"));
	ВнТаблицаРаскрытия.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ВнТаблицаРаскрытия.Колонки.Добавить("Значение");
	ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	ВнТаблицаРаскрытия.Колонки.Добавить("ГруппаРаскрытия", Новый ОписаниеТипов("СправочникСсылка.ГруппыРаскрытия"));
	ВнТаблицаРаскрытия.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	ВнТаблицаРаскрытия.Колонки.Добавить("ИтоговоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ВнТаблицаРаскрытия.Колонки.Добавить("Техническая", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ВнТаблицаРаскрытия.Колонки.Добавить("ЗначениеИзменено", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Если УправлениеОтчетамиУХ.МультипериодныйОбъектРасчета(ОбъектРасчета) Тогда
		
		ВнТаблицаРаскрытия.Колонки.Добавить("ПериодОтчета",Новый ОписаниеТипов("СправочникСсылка.Периоды"));
		
	КонецЕсли;
	
	Для Инд = 1 По ОбъектРасчета.ЧислоДопАналитик Цикл
		ВнТаблицаРаскрытия.Колонки.Добавить("Аналитика" + строка(Инд),Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	КонецЦикла;
	
	Возврат ВнТаблицаРаскрытия;
		
КонецФункции // ПолучитьПустуюТаблицуРаскрытий() 

Функция ПолучитьОбъектРасчета(Ссылка) Экспорт
	
	МассивРеквизитов=Новый Массив;
	МассивРеквизитов.Вставить("ВидОтчета");
	МассивРеквизитов.Вставить("Организация");
	МассивРеквизитов.Вставить("Сценарий");
	МассивРеквизитов.Вставить("Проект");
	МассивРеквизитов.Вставить("ОсновнаяВалюта");
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		МассивРеквизитов.Вставить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка,МассивРеквизитов);
	

КонецФункции // ПолучитьОбъектРасчета()

Процедура ДополнитьТекстДополнительныеОтборы(Запрос,ДополнительныеОтборы)
	
	Для Каждого КлючИЗначение ИЗ ДополнительныеОтборы Цикл
		
		Если КлючИЗначение.Ключ="ПериодОтчета" И (НЕ Запрос.Параметры.Свойство("УправлениеПериодом")) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценария.ДатаНачала <= &ДатаНачала";
			
			Запрос.УстановитьПараметр("ДатаНачала",КлючИЗначение.Значение.ДатаНачала);
			
		ИначеЕсли КлючИЗначение.Ключ="ПериодОкончания" И (НЕ Запрос.Параметры.Свойство("УправлениеПериодом")) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|	И ОписаниеВерсий.УправлениеПериодом.ПериодСценарияОкончание.ДатаОкончания >= &ДатаОкончания";
			
			Запрос.УстановитьПараметр("ДатаОкончания",КлючИЗначение.Значение.ДатаОкончания);
			
		ИначеЕсли КлючИЗначение.Ключ="Сценарий" И (НЕ Запрос.Параметры.Свойство("Сценарий")) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|	И ОписаниеВерсий.УправлениеПериодом.Сценарий = &Сценарий";
			
			Запрос.УстановитьПараметр("Сценарий",КлючИЗначение.Значение);
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			| И ОписаниеВерсий."+КлючИЗначение.Ключ+" = &"+КлючИЗначение.Ключ;
			
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДополнитьТекстДополнительныеОтборы()


Процедура СверутьВерсииПоРеквизитам(УправлениеПериодом=Неопределено,
										ВидОтчета=Неопределено,
										ДополнительныеОтборы=Неопределено,
										НачальнаяВерсия=Неопределено,
										КонечнаяВерсия=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	
	Запрос.Текст= "ВЫБРАТЬ 
	|	ОписаниеВерсий.Ссылка КАК Ссылка,
	|	ОписаниеВерсий.Код КАК Код
	|ПОМЕСТИТЬ ТабОписанияВерсий
	|ИЗ
	|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
	|ГДЕ
	|	НЕ ОписаниеВерсий.ЧерноваяВерсия
	|	И НЕ ТИПЗНАЧЕНИЯ(ОписаниеВерсий.Регистратор) = ТИП(Документ.КорректировкаЗначенийПоказателей)
	|";
	
	Если ЗначениеЗаполнено(НачальнаяВерсия) Тогда
		Запрос.Текст = Запрос.Текст +" 
		| И ОписаниеВерсий.Код >= &НачальноеОписаниеВерсий";
		Запрос.УстановитьПараметр("НачальноеОписаниеВерсий", НачальнаяВерсия.Код);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КонечнаяВерсия) Тогда
		Запрос.Текст = Запрос.Текст +" 
		| И ОписаниеВерсий.Код <= &КонечноеОписаниеВерсий";
		Запрос.УстановитьПараметр("КонечноеОписаниеВерсий", КонечнаяВерсия.Код);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		Запрос.Текст = Запрос.Текст +" 
		| И ОписаниеВерсий.ВидОтчета = &ВидОтчета";
		Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УправлениеПериодом) Тогда
		Запрос.Текст = Запрос.Текст + "
		| И ОписаниеВерсий.УправлениеПериодом = &УправлениеПериодом";
		Запрос.УстановитьПараметр("УправлениеПериодом",УправлениеПериодом);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеОтборы) Тогда
		ДополнитьТекстДополнительныеОтборы(Запрос,ДополнительныеОтборы);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +" 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
	|	ВерсииЗначенийПоказателей.Организация КАК Организация,
	|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
	|	ВерсииЗначенийПоказателей.Проект КАК Проект,
	|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
	|	ВерсииЗначенийПоказателей.Активность КАК Активность,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета КАК ЭкземплярОтчета,
	|	ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте КАК ЗаписьВДополнительнойВалюте,
	|	ВерсииЗначенийПоказателей.Аналитика1 КАК Аналитика1,
	|	ВерсииЗначенийПоказателей.Аналитика2 КАК Аналитика2,
	|	ВерсииЗначенийПоказателей.Аналитика3 КАК Аналитика3,
	|	ВерсииЗначенийПоказателей.Аналитика4 КАК Аналитика4,
	|	ВерсииЗначенийПоказателей.Аналитика5 КАК Аналитика5,
	|	ВерсииЗначенийПоказателей.Аналитика6 КАК Аналитика6,
	|	ТабОписанияВерсий.Ссылка КАК ОписаниеВерсии,
	|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка,
	|	ВерсииЗначенийПоказателей.Код КАК Код
	|ПОМЕСТИТЬ ТабВерсииОписания
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТабОписанияВерсий КАК ТабОписанияВерсий
	|		ПО ВерсииЗначенийПоказателей.Владелец = ТабОписанияВерсий.Ссылка";
	
	Если ДополнительныеОтборы.Свойство("ПериодОтчета") Тогда	
		Запрос.Текст = Запрос.Текст +"
		|И (ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала>= &ДатаНачала)";
		
		Запрос.УстановитьПараметр("ДатаНачала",ДополнительныеОтборы.ПериодОтчета.ДатаНачала);
		
	КонецЕсли;
	
	Если ДополнительныеОтборы.Свойство("ПериодОкончания") Тогда	
		Запрос.Текст = Запрос.Текст +"
		|И (ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания>= &ДатаОкончания)";
		
		Запрос.УстановитьПараметр("ДатаОкончания",ДополнительныеОтборы.ПериодОкончания.ДатаОкончания);
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ Различные
	|	ТабВерсииОписания.Организация КАК Организация,
//	|	ТабВерсииОписания.ПериодОтчета КАК ПериодОтчета,
	|	ТабВерсииОписания.Проект КАК Проект,
	|	ТабВерсииОписания.Сценарий КАК Сценарий,
	|	ТабВерсииОписания.Валюта КАК ОсновнаяВалюта,
	|	ТабВерсииОписания.Аналитика1 КАК Аналитика1,
	|	ТабВерсииОписания.Аналитика2 КАК Аналитика2,
	|	ТабВерсииОписания.Аналитика3 КАК Аналитика3,
	|	ТабВерсииОписания.Аналитика4 КАК Аналитика4,
	|	ТабВерсииОписания.Аналитика5 КАК Аналитика5,
	|	ТабВерсииОписания.Аналитика6 КАК Аналитика6,
	|	ТабВерсииОписания.ВидОтчета КАК ВидОтчета
	|ИЗ
	|	ТабВерсииОписания КАК ТабВерсииОписания
	|ГДЕ НЕ ТабВерсииОписания.ЗаписьВДополнительнойВалюте";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	МассивПоследнихОписаний=Новый Массив;
	МассивОписанийКУдалению=Новый Массив;
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		Запрос.Текст="ВЫБРАТЬ ТабВерсииОписания.Ссылка,
		|ТабВерсииОписания.ОписаниеВерсии,
		|ТабВерсииОписания.Активность,
		|ТабВерсииОписания.ЭкземплярОтчета,
		|ТабВерсииОписания.Код	
		|ИЗ ТабВерсииОписания КАК ТабВерсииОписания
		|ГДЕ
		|ТабВерсииОписания.Организация=&Организация
//		|И ТабВерсииОписания.ПериодОтчета=&ПериодОтчета
		|И ТабВерсииОписания.ВидОтчета=&ВидОтчета
		|И ТабВерсииОписания.Сценарий=&Сценарий
		|И ТабВерсииОписания.Проект=&Проект
		|И ТабВерсииОписания.Аналитика1=&Аналитика1
		|И ТабВерсииОписания.Аналитика2=&Аналитика2
		|И ТабВерсииОписания.Аналитика3=&Аналитика3
		|И ТабВерсииОписания.Аналитика4=&Аналитика4
		|И ТабВерсииОписания.Аналитика5=&Аналитика5
		|И ТабВерсииОписания.Аналитика6=&Аналитика6
		|Упорядочить ПО ТабВерсииОписания.Код УБЫВ";
		
		Запрос.УстановитьПараметр("Организация",Результат.Организация);
//		Запрос.УстановитьПараметр("ПериодОтчета",Результат.ПериодОтчета);
		Запрос.УстановитьПараметр("ВидОтчета",	Результат.ВидОтчета);
		Запрос.УстановитьПараметр("Сценарий",	Результат.Сценарий);
		Запрос.УстановитьПараметр("Проект",		Результат.Проект);
		Запрос.УстановитьПараметр("Аналитика1",	Результат.Аналитика1);
		Запрос.УстановитьПараметр("Аналитика2",	Результат.Аналитика2);
		Запрос.УстановитьПараметр("Аналитика3",	Результат.Аналитика3);
		Запрос.УстановитьПараметр("Аналитика4",	Результат.Аналитика4);
		Запрос.УстановитьПараметр("Аналитика5",	Результат.Аналитика5);
		Запрос.УстановитьПараметр("Аналитика6",	Результат.Аналитика6);
		
		СтруктураРеквизитов=Новый Структура;
		
		Для Каждого Параметр ИЗ Запрос.Параметры Цикл
			
			СтруктураРеквизитов.Вставить(Параметр.Ключ,Параметр.Значение);
			
		КонецЦикла;
		
		СтруктураРеквизитов.Вставить("ОсновнаяВалюта",Результат.ОсновнаяВалюта);
		
		ТаблицаВерсийКСвертке=Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаВерсийКСвертке.Количество() = 0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Отказ=Ложь;
		
		ПоследнееОбнаруженноеОписание =  ТаблицаВерсийКСвертке[0].ОписаниеВерсии;
		
		СвернутьВерсии(ТаблицаВерсийКСвертке,СтруктураРеквизитов,ПоследнееОбнаруженноеОписание,Отказ);
		
		Если Отказ Тогда
			
			ОтменитьТранзакцию();
			Возврат;
			
		КонецЕсли;
		
		ТаблицаВерсийКСвертке.Свернуть("ОписаниеВерсии");
		МассивПоследнихОписаний.Добавить(ПоследнееОбнаруженноеОписание);
		
		Для Каждого Строка ИЗ ТаблицаВерсийКСвертке Цикл
			
			Если МассивОписанийКУдалению.Найти(Строка.ОписаниеВерсии)=Неопределено 
				И МассивПоследнихОписаний.Найти(Строка.ОписаниеВерсии)=Неопределено Тогда
				
				МассивОписанийКУдалению.Добавить(Строка.ОписаниеВерсии);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого ОписаниеВерсии ИЗ МассивОписанийКУдалению Цикл
		
		Попытка
			
			ОписаниеОбъект=ОписаниеВерсии.ПолучитьОбъект();
			ОписаниеОбъект.ОбменДанными.Загрузка=Истина;
			ОписаниеОбъект.Удалить();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Важное);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
	Запрос.МенеджерВременныхТаблиц.Закрыть();
		
КонецПроцедуры // СверутьВерсииПоРеквизитам()

Процедура СвернутьВерсии(ТаблицаВерсийКСвертке,ОбъектРасчета,ПоследнееОбнаруженноеОписание,Отказ)
		
	МаксАналитикПоказателя=ОбщегоНазначенияУХ.МаксКоличествоАналитикПоказателей(ОбъектРасчета.ВидОтчета);
	МаксАналитикОтчета=ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ОбъектРасчета.ВидОтчета);
	
	СписокВерсий = Новый СписокЗначений;
				
	Активность=ТаблицаВерсийКСвертке[0].Активность;
	СтрВерсияБезЭкземпляра=ТаблицаВерсийКСвертке.Найти(Документы.НастраиваемыйОтчет.ПустаяСсылка(),"ЭкземплярОтчета");
	
	Если СтрВерсияБезЭкземпляра=Неопределено Тогда
		
		Ссылка=ТаблицаВерсийКСвертке[0].ЭкземплярОтчета;
		
	КонецЕсли;
	
	СписокВерсий.ЗагрузитьЗначения(ТаблицаВерсийКСвертке.ВыгрузитьКолонку("Ссылка"));
			
	//////////////////////////////////////////////////////////////////////////////////////////////
	//// ПОДГОТОВИМ ТЕКСТ И ПАРАМЕТРЫ ВЛОЖЕННОГО ЗАПРОСА К НЕОБХОДИМЫМ РЕГИСТРАМ
	///
	
	ДополнительныеПоля=Новый Соответствие;
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.Валюта",			"Валюта");
	ДополнительныеПоля.Вставить("ВерсииЗначенийПоказателей.ПериодОтчета",	"ПериодОтчета");
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
	ДанныеЗапроса.Вставить("СписокВерсий",СписокВерсий);
	ДанныеЗапроса.Вставить("ВыводитьСинтетику",Истина);
	ДанныеЗапроса.Вставить("ВыводитьАналитику",Истина);
	ДанныеЗапроса.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	ДанныеЗапроса.Вставить("ТолькоЧисловые",Истина);
	
	СтруктураЗапроса=УправлениеОтчетамиУХ.ПодготовитьТекстЗапросаКРегистрам(ДанныеЗапроса);
	
	Если НЕ СтруктураЗапроса.Свойство("ТекстЗапроса") Тогда
		
		Возврат
		
	Иначе
		
		ТекстВложенногоЗапроса=СтруктураЗапроса.ТекстЗапроса;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Для Каждого СтрПараметр ИЗ СтруктураЗапроса.СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
		
	//////////////////////////////////////////////////////////////////////////////////////////////
	
	РабочееКоличествоАналитик=МаксАналитикПоказателя+МаксАналитикОтчета;
	ТекстАналитики = "АналитикаВалюта";
	
	Для Инд = 1 По РабочееКоличествоАналитик Цикл
		ТекстАналитики = ТекстАналитики + ", ЗначенияПоказателейОтчетов.Аналитика" + Инд;
	КонецЦикла;
		
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Значение КАК Значение,
	|	ЗначенияПоказателейОтчетов.ПериодОтчета КАК ПериодОтчета,
	|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
	|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение КАК ИтоговоеЗначение,
	|	ЗначенияПоказателейОтчетов.ЧислоАналитикГруппыРаскрытия КАК ЧислоАналитикГруппыРаскрытия,
	|	ЗначенияПоказателейОтчетов.Валюта КАК Валюта," + ТекстАналитики + "
	|ИЗ
	|	("+ТекстВложенногоЗапроса+") КАК ЗначенияПоказателейОтчетов";
	
	
	ТаблицаЧисловых=Запрос.Выполнить().Выгрузить();
	ТаблицаНечисловых=ПолучитьТаблицуНечисловых(СписокВерсий);
	
	ТаблицаЧисловых.Колонки.Добавить("Версия");
	ТаблицаНечисловых.Колонки.Добавить("Версия");
	
	ТаблицаВерсий=Новый ТаблицаЗначений;
	ТаблицаВерсий.Колонки.Добавить("ПериодОтчета");
	ТаблицаВерсий.Колонки.Добавить("Валюта");
	ТаблицаВерсий.Колонки.Добавить("ОсновнаяВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());	
	ТаблицаВерсий.Колонки.Добавить("Версия");
	
	ТаблицаВерсий.Индексы.Добавить("ПериодОтчета,Валюта");
	
	ОбъектРасчета.Вставить("АктивностьДвижений",Активность);
	ОбъектРасчета.Вставить("СохранятьИсториюИзменений",Истина);
	ОбъектРасчета.Вставить("РазделениеПоПроектам",ОбъектРасчета.ВидОтчета.РазделениеПоПроектам);

	ТаблицаКомментариев=ПолучитьТаблицуКомментариев(СписокВерсий);
					
	Для Каждого Элемент Из СписокВерсий Цикл
		
		Попытка
			
			ОбъектВерсия=Элемент.Значение.ПолучитьОбъект();
			Справочники.ВерсииЗначенийПоказателей.УдалитьЗаписиВерсии(ОбъектВерсия.Ссылка,Ложь);
			ОбъектВерсия.ОбменДанными.Загрузка=Истина;
			ОбъектВерсия.Удалить();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Отказ,,СтатусСообщения.Важное);
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗаполнитьКолонкуВерсий(ОбъектРасчета,ТаблицаЧисловых,ТаблицаВерсий,ПоследнееОбнаруженноеОписание);
	ЗаполнитьКолонкуВерсий(ОбъектРасчета,ТаблицаНечисловых,ТаблицаВерсий,ПоследнееОбнаруженноеОписание);
			
	ИмяТаблицыСинтетики=?(МаксАналитикОтчета=0,"ЗначенияПоказателейОтчетовСинтетика","ЗначенияПоказателейОтчетов"+МаксАналитикОтчета);
			
	СтруктураРеквизиты=Новый Структура;
	СтруктураРеквизиты.Вставить("ПравилоОбработки",			Справочники.ПравилаОбработки.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ИспользуемаяИБ",			Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("ДатаИзменения",			ТекущаяДата());
	СтруктураРеквизиты.Вставить("ПоследнийРедактировавший",	ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	СтруктураРеквизиты.Вставить("ДатаИзмененияMs",			ТекущаяУниверсальнаяДатаВМиллисекундах());
	СтруктураРеквизиты.Вставить("СпособФормированияОтчета",	Перечисления.СпособыФормированияОтчетов.ПустаяСсылка());
	СтруктураРеквизиты.Вставить("мНеЧисловыеПоказатели",	Новый Массив);
	СтруктураРеквизиты.Вставить("Регистратор",				Ссылка);
	
	ТабСоответствиеНаборовЗаписей=Новый ТаблицаЗначений;
	ТабСоответствиеНаборовЗаписей.Колонки.Добавить("Версия");
	ТабСоответствиеНаборовЗаписей.Колонки.Добавить("ИмяРегистра");
	ТабСоответствиеНаборовЗаписей.Колонки.Добавить("НаборЗаписей");

	Для Каждого СтрВерсия ИЗ ТаблицаВерсий Цикл
		
		ДобавитьЗаписиВНаборыЧисловые(СтрВерсия.Версия,
					ТаблицаЧисловых.НайтиСтроки(Новый Структура("Версия",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					ИмяТаблицыСинтетики,
					СтруктураРеквизиты);
					
		ДобавитьЗаписиВНаборыНеЧисловые(СтрВерсия.Версия,
					ТаблицаНечисловых.НайтиСтроки(Новый Структура("Версия",СтрВерсия.Версия)),
					ТабСоответствиеНаборовЗаписей,
					СтруктураРеквизиты);
					
		Если СтрВерсия.ОсновнаяВалюта Тогда
			
			ЗаписатьТаблицуКомментариев(СтрВерсия.Версия,
					ТаблицаКомментариев.НайтиСтроки(Новый Структура("ПериодОтчета",СтрВерсия.ПериодОтчета)));
					
		КонецЕсли;		
			
	КонецЦикла;
					
	Для Каждого СтрокаНабор ИЗ ТабСоответствиеНаборовЗаписей Цикл
		
		СтрокаНабор.НаборЗаписей.Записать(Истина);
		
	КонецЦикла;						
			
КонецПроцедуры

Процедура ДобавитьЗаписиВНаборыЧисловые(Версия,
					МассивСтрок,
					ТабСоответствиеНаборовЗаписей,
					ИмяТаблицыСинтетики,
					СтруктураРеквизиты)
					
	Если МассивСтрок.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;				
					
	Для Каждого СтрокаЧисловые ИЗ МассивСтрок Цикл
		
		Если СтрокаЧисловые.ИтоговоеЗначение Тогда
			
			ДобавитьЗаписьВНабор(Версия,
				ИмяТаблицыСинтетики,
				СтрокаЧисловые,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
			
		ИначеЕсли СтрокаЧисловые.ЧислоАналитикГруппыРаскрытия>0 Тогда
			
			 ДобавитьЗаписьВНабор(Версия,
				"ЗначенияПоказателейОтчетов"+СтрокаЧисловые.ЧислоАналитикГруппыРаскрытия,
				СтрокаЧисловые,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
			
						
		Иначе
			
			ДобавитьЗаписьВНабор(Версия,
				"ЗначенияПоказателейОтчетовВалютные",
				СтрокаЧисловые,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
			
		КонецЕсли;	
		
	КонецЦикла;
										
КонецПроцедуры // ДобавитьЗаписиВНаборыЧисловые()

Процедура ДобавитьЗаписиВНаборыНеЧисловые(Версия,
					МассивСтрок,
					ТабСоответствиеНаборовЗаписей,
					СтруктураРеквизиты)
					
	Если МассивСтрок.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;		
			
	Для Каждого СтрокаНеЧисловые ИЗ МассивСтрок Цикл
					
		ДобавитьЗаписьВНабор(Версия,
			"ЗначенияПоказателейОтчетовНечисловые",
			СтрокаНеЧисловые,
			СтруктураРеквизиты,
			ТабСоответствиеНаборовЗаписей);
					
	КонецЦикла;
										
КонецПроцедуры // ДобавитьЗаписиВНаборыЧисловые()

Процедура ДобавитьЗаписьВНабор(Версия,
				ИмяРегистра,
				СтрокаЗаписи,
				СтруктураРеквизиты,
				ТабСоответствиеНаборовЗаписей);
				
	МассивНабор=ТабСоответствиеНаборовЗаписей.НайтиСтроки(Новый Структура("Версия,ИмяРегистра",Версия,ИмяРегистра));
	
	Если МассивНабор.Количество()=0 Тогда
		
		СтрокаНабор=ТабСоответствиеНаборовЗаписей.Добавить();
		СтрокаНабор.Версия=Версия;
		СтрокаНабор.ИмяРегистра=ИмяРегистра;
		
		НаборЗаписей=РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		СтрокаНабор.НаборЗаписей=НаборЗаписей;
		
	Иначе
		
		СтрокаНабор=МассивНабор[0];
		
	КонецЕсли;
	
	Движение=СтрокаНабор.НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(Движение,СтрокаЗаписи);
	ЗаполнитьЗначенияСвойств(Движение,СтруктураРеквизиты);
	Движение.Активность=Истина;
	Движение.Регистратор=Версия;
					
КонецПроцедуры // ДобавитьЗаписьВНабор()

Процедура ЗаполнитьКолонкуВерсий(ОбъектРасчета,РабочаяТаблица,ТаблицаВерсий,ОписаниеВерсии)
	
	Для Каждого Строка ИЗ РабочаяТаблица Цикл
		
		СтрВерсия=ТаблицаВерсий.НайтиСтроки(Новый Структура("ПериодОтчета,Валюта",Строка.ПериодОтчета,Строка.Валюта));
		
		Если СтрВерсия.Количество()=0 Тогда
			
			ОбъектРасчета.Вставить("ПериодОтчета",Строка.ПериодОтчета);
			Строка.Версия=УправлениеОтчетамиУХ.ПолучитьВерсию(ОбъектРасчета,
										Ложь,
										Строка.Валюта,
										ОписаниеВерсии,
										ОбъектРасчета.АктивностьДвижений,
										Ложь,
										(Строка.Валюта<>ОбъектРасчета.ОсновнаяВалюта));
										
			НоваяСтрока=ТаблицаВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.ОсновнаяВалюта=(Строка.Валюта=ОбъектРасчета.ОсновнаяВалюта);
			
		Иначе
			
			Строка.Версия=СтрВерсия[0].Версия;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКолонкуВерсий()

Функция ПолучитьТаблицуКомментариев(СписокВерсий)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	КомментарииЗначенийПоказателей.Показатель КАК Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	КомментарииЗначенийПоказателей.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	КомментарииЗначенийПоказателей.АналитикаВалюта КАК АналитикаВалюта,
	|	КомментарииЗначенийПоказателей.Комментарий КАК Комментарий,
	|	КомментарииЗначенийПоказателей.Версия.Код КАК КодВерсии,
	|	КомментарииЗначенийПоказателей.Версия.ПериодОтчета КАК ПериодОтчета
	|ПОМЕСТИТЬ ТекЗначенияКомментариев
	|ИЗ
	|	РегистрСведений.КомментарииЗначенийПоказателей КАК КомментарииЗначенийПоказателей
	|ГДЕ
	|	КомментарииЗначенийПоказателей.Версия В(&СписокВерсий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекЗначенияКомментариев.Показатель КАК Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ТекЗначенияКомментариев.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	ТекЗначенияКомментариев.АналитикаВалюта КАК АналитикаВалюта,
	|	МАКСИМУМ(ТекЗначенияКомментариев.КодВерсии) КАК КодВерсии,
	|	ТекЗначенияКомментариев.ПериодОтчета КАК ПериодОтчета
	|ПОМЕСТИТЬ МаксЗначенияКомментариев
	|ИЗ
	|	ТекЗначенияКомментариев КАК ТекЗначенияКомментариев
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекЗначенияКомментариев.Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ТекЗначенияКомментариев.Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	ТекЗначенияКомментариев.АналитикаВалюта,
	|	ТекЗначенияКомментариев.ПериодОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксЗначенияКомментариев.Показатель КАК Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	МаксЗначенияКомментариев.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	МаксЗначенияКомментариев.АналитикаВалюта КАК АналитикаВалюта,
	|	ТекЗначенияКомментариев.Комментарий КАК Комментарий,
	|	МаксЗначенияКомментариев.ПериодОтчета КАК ПериодОтчета
	|ИЗ
	|	МаксЗначенияКомментариев КАК МаксЗначенияКомментариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекЗначенияКомментариев КАК ТекЗначенияКомментариев
	|		ПО МаксЗначенияКомментариев.КодВерсии = ТекЗначенияКомментариев.КодВерсии
	|			И МаксЗначенияКомментариев.Показатель = ТекЗначенияКомментариев.Показатель";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	И МаксЗначенияКомментариев.Аналитика"+Индекс+" = ТекЗначенияКомментариев.Аналитика"+Индекс;
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|			И МаксЗначенияКомментариев.АналитикаВалюта = ТекЗначенияКомментариев.АналитикаВалюта
	|			И МаксЗначенияКомментариев.ПериодОтчета = ТекЗначенияКомментариев.ПериодОтчета";
	
	Запрос.УстановитьПараметр("СписокВерсий",СписокВерсий);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции // ПолучитьТаблицуКомментариев()

Функция ПолучитьТаблицуНечисловых(СписокВерсий)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетовНечисловые.Версия.Код КАК ВерсияКод,
	|	ЗначенияПоказателейОтчетовНечисловые.Версия.Валюта КАК ВерсияВалюта,
	|	ЗначенияПоказателейОтчетовНечисловые.Показатель КАК Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ЗначенияПоказателейОтчетовНечисловые.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	ЗначенияПоказателейОтчетовНечисловые.АналитикаВалюта КАК АналитикаВалюта,
	|	ЗначенияПоказателейОтчетовНечисловые.Значение КАК Значение,
	|	ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение КАК ИтоговоеЗначение,
	|	ЗначенияПоказателейОтчетовНечисловые.Версия КАК Версия,
	|	ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета КАК ПериодОтчета
	|ПОМЕСТИТЬ ИсходнаяТаблицаРегистра
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
	|ГДЕ
	|	ЗначенияПоказателейОтчетовНечисловые.Версия В(&СписокВерсий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ИсходнаяТаблицаРегистра.ВерсияКод) КАК ВерсияКод,
	|	ИсходнаяТаблицаРегистра.ВерсияВалюта КАК ВерсияВалюта,
	|	ИсходнаяТаблицаРегистра.Показатель КАК Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ИсходнаяТаблицаРегистра.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	ИсходнаяТаблицаРегистра.АналитикаВалюта КАК АналитикаВалюта,
	|	ИсходнаяТаблицаРегистра.ПериодОтчета КАК ПериодОтчета
	|ПОМЕСТИТЬ МаксимальныеВерсии
	|ИЗ
	|	ИсходнаяТаблицаРегистра КАК ИсходнаяТаблицаРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	ИсходнаяТаблицаРегистра.ВерсияВалюта,
	|	ИсходнаяТаблицаРегистра.Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	ИсходнаяТаблицаРегистра.Аналитика"+Индекс+",";
		
	КонецЦикла;	
		
	Запрос.Текст=Запрос.Текст+"
	|	ИсходнаяТаблицаРегистра.АналитикаВалюта,
	|	ИсходнаяТаблицаРегистра.ПериодОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МаксимальныеВерсии.ВерсияВалюта КАК Валюта,
	|	МаксимальныеВерсии.Показатель КАК Показатель,";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	МаксимальныеВерсии.Аналитика"+Индекс+" КАК Аналитика"+Индекс+",";
		
	КонецЦикла;	
	
	Запрос.Текст=Запрос.Текст+"
	|	МаксимальныеВерсии.АналитикаВалюта КАК АналитикаВалюта,
	|	ИсходнаяТаблицаРегистра.Значение КАК Значение,
	|	ИсходнаяТаблицаРегистра.ИтоговоеЗначение КАК ИтоговоеЗначение,
	|	МаксимальныеВерсии.ПериодОтчета КАК ПериодОтчета
	|ИЗ
	|	МаксимальныеВерсии КАК МаксимальныеВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ИсходнаяТаблицаРегистра КАК ИсходнаяТаблицаРегистра
	|		ПО МаксимальныеВерсии.ВерсияКод = ИсходнаяТаблицаРегистра.ВерсияКод
	|			И МаксимальныеВерсии.Показатель = ИсходнаяТаблицаРегистра.Показатель
	|			И МаксимальныеВерсии.ВерсияВалюта = ИсходнаяТаблицаРегистра.ВерсияВалюта";
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст=Запрос.Текст+"
		|	И МаксимальныеВерсии.Аналитика"+Индекс+" = ИсходнаяТаблицаРегистра.Аналитика"+Индекс;
		
	КонецЦикла;	
	
	Запрос.Текст=Запрос.Текст+"
	|			И МаксимальныеВерсии.АналитикаВалюта = ИсходнаяТаблицаРегистра.АналитикаВалюта
	|			И МаксимальныеВерсии.ПериодОтчета = ИсходнаяТаблицаРегистра.ПериодОтчета";
	
	Запрос.УстановитьПараметр("СписокВерсий",СписокВерсий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуНечисловых()

Процедура ЗаписатьТаблицуКомментариев(Версия,ТаблицаКомментариев)
	
	Если ТаблицаКомментариев.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.КомментарииЗначенийПоказателей.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	
	Для Каждого Строка ИЗ ТаблицаКомментариев Цикл
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Версия=Версия;
		
	КонецЦикла;
	
	НаборЗаписей.Записать();	
	
КонецПроцедуры // ЗаписатьТаблицуКомментариев)()


#КонецОбласти




 


