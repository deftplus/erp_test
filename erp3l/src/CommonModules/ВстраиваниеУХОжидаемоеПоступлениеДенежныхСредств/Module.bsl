#Область СобытияМодуляФормы

#Область ФормаДокумента

#Область СтандартныеСобытия
	
// нетиповое событие документа. Вызывается перед исполнением основного кода
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	
	// Если реквизит формы РеквизитыДокумента существует и заполнен, то дальнейшая инициализация не нужна
	Если ЗаявкиНаОперации.ТребуетсяИнициализацияФормы(Форма) Тогда
		
		Элементы = Форма.Элементы;
		
		#Область СтраницаАналитикиПланирования
		Страницы = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаСтраницы", , ВидГруппыФормы.Страницы,, Элементы.ГруппаДокумент);
		Страница = ФормыУХ.СоздатьГруппуФормы(Элементы, "СтраницаОсновное", НСтр("ru = 'Основное'"), ВидГруппыФормы.Страница, Страницы);
		
		Элементы.Переместить(Элементы.ГруппаДокумент, Страница);
		Элементы.Переместить(Элементы.НазначениеПлатежа, Страница);
		#КонецОбласти 
		
		// ОПК			
		#Область РеквизитыДокумента
		// Создаем реквизиты формы документа
		Реквизиты = Новый Массив;
		Реквизиты.Добавить(Новый РеквизитФормы("ИспользоватьДоговорыМеждуОрганизациями",Новый ОписаниеТипов("Булево")));
		Реквизиты.Добавить(Новый РеквизитФормы("ИспользоватьДоговорыСКлиентами",		Новый ОписаниеТипов("Булево")));
		Реквизиты.Добавить(Новый РеквизитФормы("ИспользоватьДоговорыСПоставщиками",		Новый ОписаниеТипов("Булево")));
		Реквизиты.Добавить(Новый РеквизитФормы("СохраненнаяХозяйственнаяОперация",		Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации")));
		
		// НастройкиПолей
		ИмяРеквизита = "НастройкиПолей";
		Реквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита,	Новый ОписаниеТипов("ТаблицаЗначений"),			""));
		Реквизиты.Добавить(Новый РеквизитФормы("Поля",			Новый ОписаниеТипов(неопределено),				ИмяРеквизита));
		Реквизиты.Добавить(Новый РеквизитФормы("Условие",		Новый ОписаниеТипов("ОтборКомпоновкиДанных"),	ИмяРеквизита));
		Реквизиты.Добавить(Новый РеквизитФормы("Свойства",		Новый ОписаниеТипов(неопределено),				ИмяРеквизита));
		
		// ЗависимостиПолей
		ИмяРеквизита = "ЗависимостиПолей";
		Реквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита,	Новый ОписаниеТипов("ТаблицаЗначений"),			""));
		Реквизиты.Добавить(Новый РеквизитФормы("ИмяРеквизита",	ОбщегоНазначения.ОписаниеТипаСтрока(0),			ИмяРеквизита));
		Реквизиты.Добавить(Новый РеквизитФормы("ЗависимыеПоля",	Новый ОписаниеТипов(неопределено),				ИмяРеквизита));
		#КонецОбласти 
		
		ЗаявкиНаОперации.СоздатьРеквизитыФормыЗаявки(Форма, Реквизиты);
		
		СоздатьЭлементыФормыДокумента(Форма);
		
		// Инициализировать созданные реквизиты и элементы
		ЗаявкиНаОперации.ИнициализироватьФормуЗаявки(Форма);
		// Конец ОПК
		
		//
		ПодготовитьФормуНаСервере(Форма);
		
	КонецЕсли;

	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ЗаявкиНаОперации.ЗаполнитьИзмененностьРеквизитов(Форма);
	Иначе
		// для новых документов, при первоначальном открытии, пользователь ничего не успел поменять
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) экспорт
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	// ОПК
	ЗаявкиНаОперации.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ОПК
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	// ОПК
	ЗаявкиНаОперации.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ОПК
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события изменения элемента формы
Процедура ПриИзмененииЭлементаУХ(Форма, ИмяЭлемента) экспорт
	
	Если ИмяЭлемента = "ФормаОплаты" Тогда
		ЗаявкиНаОперации.ПриИзмененииФормыОплаты(Форма);
	ИначеЕсли ИмяЭлемента = "ППОтправитель" Тогда
		ЗаявкиНаОперации.ПриИзмененииБанковскогоСчетаКассы(Форма);
	ИначеЕсли ИмяЭлемента = "ППДатаИсполнения1" Тогда
		ЗаявкиНаОперации.ПриИзмененииПланируемойДатаОперации(Форма);
	ИначеЕсли ИмяЭлемента = "Валюта" Тогда
		ЗаявкиНаОперации.ПриИзмененииВалюты(Форма);
	ИначеЕсли ИмяЭлемента = "Контрагент" Тогда
		ЗаявкиНаОперации.ПриИзмененииКонтрагента(Форма);
	ИначеЕсли ИмяЭлемента = "Договор" Тогда
		ПриИзмененииДоговора(Форма);
	ИначеЕсли ИмяЭлемента = "ДоговорКредитаДепозита" Тогда
		ПриИзмененииДоговораКредитаДепозита(Форма);
	ИначеЕсли ИмяЭлемента = "ДоговорАренды" Тогда
		ПриИзмененииДоговораАренды(Форма);		
	ИначеЕсли ИмяЭлемента = "ЦФО" Тогда
		ЗаявкиНаОперации.ПриИзмененииЦФО(Форма);
	ИначеЕсли ИмяЭлемента = "Проект" Тогда
		ЗаявкиНаОперации.ПриИзмененииПроекта(Форма);
	ИначеЕсли ИмяЭлемента = "Организация" Тогда
		ЗаявкиНаОперации.ПриИзмененииОрганизации(Форма);
	ИначеЕсли ИмяЭлемента = "СуммаДокумента" Тогда
		ЗаявкиНаОперации.ПриИзмененииСуммыДокумента(Форма);
	ИначеЕсли ИмяЭлемента = "ВидОперацииУХ" Тогда
		ПриИзмененииВидаОперацииУХ(Форма);
		ЗаявкиНаОперации.ПриИзмененииВидаОперацииУХ(Форма);
	ИначеЕсли ИмяЭлемента = "ДокументПланирования" Тогда
		ЗаявкиНаОперации.ПриИзмененииДокументаПланирования(Форма);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьПараметрыЭлементов()
	
	ПараметрыЭлементов = ФормыУХ.ПолучитьПараметрыЭлементовПоУмолчанию();
	ПараметрыЭлементов.ГруппаВ.Вставить("ОтображатьЗаголовок",	Ложь);
	
	ПараметрыЭлементов.ГруппаГ.Вставить("Отображение", ОтображениеОбычнойГруппы.СлабоеВыделение);
	ПараметрыЭлементов.ГруппаГ.Вставить("ОтображатьЗаголовок",	Ложь);
	
	ПараметрыВалютаОплаты = Новый Структура;
	ПараметрыВалютаОплаты.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыВалютаОплаты.Вставить("РастягиватьПоГоризонтали",	Ложь);
	ПараметрыВалютаОплаты.Вставить("Ширина",					8);
	
	ПараметрыЭлементов.Вставить("ВалютаОплаты", ПараметрыВалютаОплаты);
	
	Возврат ПараметрыЭлементов;
	
КонецФункции

Процедура СоздатьЭлементыФормыДокумента(Форма)
	
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
	//
	ПараметрыЭлементов = ПолучитьПараметрыЭлементов();
	ДействиеПриИзменении = Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	//
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ВидОперацииУХ", НСтр("ru = 'Вид операции'"), "Объект.ВидОперацииУХ",,
		Элементы.ГруппаОсновныеРеквизиты, Элементы.Организация, 
		ПараметрыЭлементов.ПолеВводаВидаОперацииУХ, ДействиеПриИзменении);
	
	// Поле информация - замена декорации, но с такой-же высотой, как и у поля ввода
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "Информация", , "Информация",, 
		Элементы.ГруппаДополнительныеРеквизиты, Элементы.СтатьяДвиженияДенежныхСредств, 
		ПараметрыЭлементов.ПолеВводаНевидимое);
	
	// Контрагент
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "Контрагент", , "Объект.Контрагент", , Элементы.ГруппаДополнительныеРеквизиты,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	Элемент.ПодсказкаВвода = НСтр("ru = 'Введите ИНН или наименование'");
	
	// Договор
	Действия = ФормыУХ.ДополнитьСтруктуру(ДействиеПриИзменении, Новый Структура("НачалоВыбора", "Подключаемый_ДоговорНачалоВыбора"));
	ФормыУХ.СоздатьПолеФормы(Элементы, "Договор", , "Объект.Договор", , Элементы.ГруппаДополнительныеРеквизиты,, ПараметрыЭлементов.ПолеВвода28, Действия);
	
	// ДоговорКредитаДепозита
	ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорКредитаДепозита", , "Объект.ДоговорКредитаДепозита", , 
		Элементы.ГруппаДополнительныеРеквизиты,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	
	// ДоговорАренды
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорАренды", , "Объект.ДоговорАренды", , 
		Элементы.ГруппаДополнительныеРеквизиты,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	Элемент.Видимость = Ложь;
	
	// ДоговорЗаймаСотруднику
	ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорЗаймаСотруднику", , "Объект.ДоговорЗаймаСотруднику", , Элементы.ГруппаДополнительныеРеквизиты,, ПараметрыЭлементов.ПолеВвода28);
	
	// ЦеннаяБумага
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦеннаяБумага",, "Объект.ЦеннаяБумага",,
			Элементы.ГруппаДополнительныеРеквизиты, , ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	
	// Организация
	Форма.Элементы.Переместить(Элементы.СтатьяДвиженияДенежныхСредств, Элементы.ГруппаДополнительныеРеквизиты);	
	
	// Добавить элементам событие ПриИзменении
	ЭлементыКИзменению = Новый Структура("СуммаДокумента, Валюта, Организация");
	Для Каждого КлючЗначение Из ЭлементыКИзменению Цикл
		Элементы[КлючЗначение.Ключ].УстановитьДействие("ПриИзменении", ДействиеПриИзменении.ПриИзменении);
	КонецЦикла;
	
	//* ЦФО
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФО",, "Объект.ЦФО",,	Элементы.ГруппаДополнительныеРеквизиты, 
		Элементы.СтатьяДвиженияДенежныхСредств, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Проект",, "Объект.Проект",,	Элементы.ГруппаДополнительныеРеквизиты, 
		Элементы.СтатьяДвиженияДенежныхСредств, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПроектБюджетодержатель",, "ПроектБюджетодержатель",, Элементы.ГруппаДополнительныеРеквизиты,
		Элементы.СтатьяДвиженияДенежныхСредств, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	
	// Элемент структуры задолженности	
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ЭлементСтруктурыЗадолженности",, 
		"Объект.ЭлементСтруктурыЗадолженности",, Элементы.ГруппаДополнительныеРеквизиты, Элементы.СтатьяДвиженияДенежныхСредств,
		ПараметрыЭлементов.ПолеВвода28,
		Новый Структура("ПриИзменении", "Подключаемый_ЭлементСтруктурыЗадолженностиПриИзменении"));

	УстановитьПараметрыЭлементаСтруктурыЗадолженности(Форма);
	
	//* Аналитики статьи	
	ПараметрыРазмещения = Новый Структура;
	ПараметрыРазмещения.Вставить("ПараметрыЭлементов", ПараметрыЭлементов.ПолеВвода28);
	ПараметрыРазмещения.Вставить("СтраницаКонтроля", ФормыУХ.РазместитьВГруппе(Элементы.ГруппаСтраницы));
	ПараметрыРазмещения.Вставить("ПредставлениеПлатежнойПозции", ФормыУХ.РазместитьПередЭлементом(Элементы.НазначениеПлатежа));
	ЗаявкиНаОперации.СоздатьЭлементыФормыЗаявки(Форма, ПараметрыРазмещения);	
		
	// Валюта оплаты
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВалютаОплаты", НСтр("ru='Платеж в'"), "Объект.ВалютаОплаты",,
		Элементы.ГруппаОсновныеРеквизиты, , ПараметрыЭлементов.ВалютаОплаты);
	
	СоздатьЭлементыПлатежнойПозиции(Форма, ПараметрыЭлементов);
	
	Элементы.Валюта.Ширина = 8;
	Форма.УстановитьДействие("ОбработкаОповещения", "ОбработкаОповещения");
	
КонецПроцедуры

Процедура СоздатьЭлементыПлатежнойПозиции(Форма, ПараметрыЭлементов)
	
	Элементы = Форма.Элементы;
	
	//
	Форма.Элементы.Переместить(Элементы.ФормаОплаты, Элементы.ГруппаОсновныеРеквизиты, Элементы.Организация);
	Элементы.ФормаОплаты.АвтоОтметкаНезаполненного = Истина;
	Элементы.ФормаОплаты.АвтоВыборНезаполненного = Истина;
	Элементы.ФормаОплаты.МаксимальнаяШирина = 28;
	Элементы.ФормаОплаты.Заголовок = НСтр("ru = 'Форма оплаты'");
	
	Параметры = ФормыУХ.ДополнитьСтруктуру(ПараметрыЭлементов.ПолеВвода28, 
		Новый Структура("ВыбиратьТип, АвтоОтметкаНезаполненного, АвтоВыборНезаполненного", Ложь, Истина, Истина));
	
	// Отправитель
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ППОтправитель", НСтр("ru = 'Банковский счет/Касса'"), "ПлатежнаяПозиция[0].БанковскийСчетКасса",,
		Элементы.ГруппаОсновныеРеквизиты, , Параметры);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	//
	Массив = Новый Массив;
	Массив.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств", "Объект.ВалютаОплаты"));
	Массив.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(Массив);
	
	// Дата исполнения 1-й части
	Элемент = ФормыУХ.СоздатьПолеФормы(
		Элементы, "ППДатаИсполнения1", НСтр("ru = 'Дата зачисления'"), "ПлатежнаяПозиция[0].ДатаИсполнения",,
		Элементы.ГруппаОсновныеРеквизиты, , Параметры);
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	//// 
	//ПлатежныеПозиции.СоздатьЭлементПредставлениеПлатежнойПозиции(Форма, Форма, Элементы.НазначениеПлатежа);
	
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма)
	
	Объект = Форма.Объект;
	
	// Исключаем Любую форму оплаты
	Любая = Форма.Элементы.ФормаОплаты.СписокВыбора.НайтиПоЗначению(Перечисления.ФормыОплаты.ПустаяСсылка());
	Если Любая <> неопределено Тогда
		Форма.Элементы.ФормаОплаты.СписокВыбора.Удалить(Любая);
	КонецЕсли;
	
	Форма.СохраненнаяХозяйственнаяОперация = Форма.Объект.ХозяйственнаяОперация;
	
	Форма.Элементы.Касса.Видимость = Ложь;
	Форма.Элементы.БанковскийСчет.Видимость = Ложь;
	Форма.Элементы.ФормаОплаты.КнопкаОчистки = Ложь;
	
КонецПроцедуры

Процедура ПриИзмененииВидаОперацииУХ(Форма) экспорт
	
	Объект = Форма.Объект;
	
	Данные = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидОперацииУХ, "ВидОперацииДДСБезналичныйРасчет,ВидОперацииДДСНаличныйРасчет");
	
	Если ЗначениеЗаполнено(Данные.ВидОперацииДДСБезналичныйРасчет) Тогда
		Объект.ХозяйственнаяОперация = Данные.ВидОперацииДДСБезналичныйРасчет;
	Иначе
		Объект.ХозяйственнаяОперация = Данные.ВидОперацииДДСНаличныйРасчет;
	КонецЕсли;
	
	Если Форма.СохраненнаяХозяйственнаяОперация <> Объект.ХозяйственнаяОперация Тогда
		ХозяйственнаяОперацияПриИзменении(Форма);
		// Очистить договор
		ДанныеЗаполнения = Новый Структура(
			"СтатьяДвиженияденежныхСредств,"+АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1"),
			КэшируемыеПроцедурыОПК.ПустаяСтатьяДвиженияДенежныхСредств()
		);
		ДанныеЗаполнения.Вставить("Договор", Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
		ДанныеЗаполнения.Вставить("ПлатежВУсловныхЕдиницах", Ложь);
		ДанныеЗаполнения.Вставить("ВалютаОплаты", Объект.Валюта);
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ХозяйственнаяОперацияПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	Форма.СохраненнаяХозяйственнаяОперация = Объект.ХозяйственнаяОперация;
	
	ЗаполнитьЭлементСтруктурыЗадолженностиПоУмолчанию(Форма.Объект);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
	УстановитьПараметрыЭлементаСтруктурыЗадолженности(Форма);
	
КонецПроцедуры

Функция ДоговорДокумента(Объект) Экспорт
	
	МассивВсехРеквизитов = Неопределено;
	МассивРеквизитовОперации = Неопределено;
	
	Документы.ОжидаемоеПоступлениеДенежныхСредств.ПолучитьМассивыРеквизитов(Объект.ФормаОплаты, Объект.ВидОперацииУХ, 
		Объект.ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Если МассивРеквизитовОперации.Найти("Договор") <> Неопределено Тогда
		Возврат Объект.Договор;
	ИначеЕсли МассивРеквизитовОперации.Найти("ДоговорКредитаДепозита") <> Неопределено Тогда
		Возврат Объект.ДоговорКредитаДепозита;
	ИначеЕсли МассивРеквизитовОперации.Найти("ДоговорАренды") <> Неопределено Тогда
		Возврат Объект.ДоговорАренды;
	КонецЕсли;
	
	Возврат Неопределено;
		
КонецФункции

Процедура УстановитьПараметрыЭлементаСтруктурыЗадолженности(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ПутьКРеквизитуДоговора = ПутьКРеквизитуДоговора(Объект);	
	
	МассивСвязей = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(ПутьКРеквизитуДоговора) Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("ДоговорКонтрагента", ПутьКРеквизитуДоговора, 
			РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ДоговорКонтрагента", Неопределено));
	КонецЕсли;
	
	МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Ссылка", "Объект.Ссылка"));
	
	Элементы.ЭлементСтруктурыЗадолженности.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);	
	Элементы.ЭлементСтруктурыЗадолженности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

КонецПроцедуры

Функция ПутьКРеквизитуДоговора(Объект) 
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ОжидаемоеПоступлениеДенежныхСредств.ПолучитьМассивыРеквизитов(Объект.ФормаОплаты, Объект.ВидОперацииУХ, 
		Объект.ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	Если МассивРеквизитовОперации.Найти("Договор") <> Неопределено Тогда
		Возврат "Объект.Договор";
	ИначеЕсли МассивРеквизитовОперации.Найти("ДоговорКредитаДепозита") <> Неопределено Тогда
		Возврат "Объект.ДоговорКредитаДепозита";
	ИначеЕсли МассивРеквизитовОперации.Найти("ДоговорАренды") <> Неопределено Тогда
		Возврат "Объект.ДоговорАренды";
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиПоУмолчанию(Объект)
			
	Договор = ДоговорДокумента(Объект);
	МассивЭлементов = ЗаявкиНаОперацииВызовСервера.ЭлементыСтруктурыЗадолженностиПоДоговору(Договор, Объект.Ссылка);
	Если МассивЭлементов.Количество() >= 1 Тогда 
		ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
	Иначе
		ЭлементСтруктурыЗадолженности = Неопределено;
	КонецЕсли;
	
	Объект.ЭлементСтруктурыЗадолженности = ЭлементСтруктурыЗадолженности;
	
	СтатьяДДС = ЗаявкиНаОперацииВызовСервера.СтатьяДДСПоЭлементуСтруктурыЗадолженности(Договор, 
		ЭлементСтруктурыЗадолженности, ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход"));
	
	Объект.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		
КонецПроцедуры

Процедура ПриИзмененииДоговора(Форма)
	Объект = Форма.Объект;
	ЗаявкиНаОперации.ПриИзмененииДоговора(Форма);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
КонецПроцедуры	

Процедура ПриИзмененииДоговораКредитаДепозита(Форма)
	Объект = Форма.Объект;
	ЗаявкиНаОперации.ПриИзмененииДоговораКредитаДепозита(Форма);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
КонецПроцедуры

Процедура ПриИзмененииДоговораАренды(Форма)
	Объект = Форма.Объект;
	ЗаявкиНаОперации.ПриИзмененииДоговораАренды(Форма);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
КонецПроцедуры
		
#КонецОбласти 

#КонецОбласти 

#Область ФормаСпискаДокументов
	
Процедура ФормаСписка_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) экспорт
	
	Если НЕ ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		СоздатьЭлементыФормыСписка(Форма);
	КонецЕсли;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементыФормыСписка(Форма) 
	
	Форма.УстановитьДействие("ОбработкаОповещения", "ОбработкаОповещения");
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#КонецОбласти 

#Область СобытияМодуляОбъекта

Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты) Экспорт
	
	ВсеРеквизиты = Новый Массив;
	РеквизитыОперации = Новый Массив;
	
	Документы.ОжидаемоеПоступлениеДенежныхСредств.ПолучитьМассивыРеквизитов(
		Объект.ФормаОплаты,
	    Объект.ВидОперацииУХ,
		Объект.ХозяйственнаяОперация,
		ВсеРеквизиты,
		РеквизитыОперации);
	ОбщегоНазначенияУТКлиентСервер.ЗаполнитьМассивНепроверяемыхРеквизитов(
		ВсеРеквизиты,
		РеквизитыОперации,
		НепроверяемыеРеквизиты);
	
	ЗаявкиНаОперации.ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) экспорт
	ЗаявкиНаОперации.ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьДоговорКонтрагента(Объект); // Заполнить реквизит ДоговорКонтрагента для журнала ДокументыБюджетирования
КонецПроцедуры

Процедура ПриЗаписи(Объект, Отказ) экспорт
	ЗаявкиНаОперации.ПриЗаписи(Объект, Отказ);
КонецПроцедуры

Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	ЗаявкиНаОперации.ПриКопировании(Объект, ОбъектКопирования);
КонецПроцедуры

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	#Область УХ_Внедрение

	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Количество() = 1 И ДанныеЗаполнения.Свойство("ДоговорКонтрагента") Тогда
			// Вызов из журнала документов оперативного планирования
			ДанныеЗаполнения = ДанныеЗаполнения.ДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;
	
	ТипОснования = ТипЗнч(ДанныеЗаполнения);
	
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Объект.Ссылка.Метаданные().ПолноеИмя());
	ЗаявкиНаОперации.ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	ДанныеЗаказаПоставщика = Неопределено;
	ОчиститьДокОснованиеПослеЗаполнения = Ложь;
	
	Если ТипОснования=Тип("ДокументСсылка.ОперативныйПлан") Тогда
		
		Объект.ДокументПланирования = ДанныеЗаполнения;
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПланирования, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов Тогда
			ОчиститьДокОснованиеПослеЗаполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипОснования = Тип("ДокументСсылка.ЗаказПоставщику") Тогда	
		
		ДанныеЗаказаПоставщика = ДанныеЗаполнения;
		
	ИначеЕсли ТипОснования = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
		
		ЗаполнитьПоДоговоруКредитаДепозита(ДанныеЗаполнения, ДанныеЗаполнения);
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);
		
	ИначеЕсли ТипОснования = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения);	
		ОМ.ЗаполнитьРеквизитыШапкиЗаявки(Объект, ДанныеЗаполнения, РеквизитыЗаявки);
		
		Если ЗначениеЗаполнено(Объект.ОбъектРасчетов) Тогда	
			
			Если ТипЗнч(Объект.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если Не ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента)) Тогда
					ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента, Объект.ОбъектРасчетов);
				КонецЕсли;
			КонецЕсли;
			
			//++ ЕРПУХ
			Если ТипЗнч(Объект.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
				Если Не ЗначениеЗаполнено(Объект.ДоговорКредитаДепозита) Тогда
					Объект.ДоговорКредитаДепозита = Объект.ОбъектРасчетов;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Объект.ОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыАренды") Тогда
				Если Не ЗначениеЗаполнено(Объект.ДоговорАренды) Тогда
					Объект.ДоговорАренды = Объект.ОбъектРасчетов;
				КонецЕсли;	
			КонецЕсли;
			//-- ЕРПУХ
		КонецЕсли;
			
		Если ДанныеЗаполнения.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
			Объект.ДополнительныеСвойства.Вставить("БанковскийСчетКасса", ДанныеЗаполнения.БанковскийСчет);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
		ЗаполнитьПоДокументуПланирования(Объект, Объект.ДокументПланирования);
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ЗаполнитьПоДоговоруКонтрагента(Объект, Объект.Договор);
	КонецЕсли;
	
	// Определим незаполненные реквизиты значениями по умолчанию.
	Если НЕ ЗначениеЗаполнено(Объект.ВидОперацииУХ) Тогда
		Объект.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ОплатаОтПокупателя;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидОперацииУХ) Тогда
		
		СтруктураРеквизитов = Новый Структура("ВидОперацииДДСБезналичныйРасчет, ВидОперацииДДСНаличныйРасчет");
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидОперацииУХ, СтруктураРеквизитов);
		Если ЗначениеЗаполнено(Реквизиты.ВидОперацииДДСБезналичныйРасчет) Тогда
			Объект.ХозяйственнаяОперация = Реквизиты.ВидОперацииДДСБезналичныйРасчет;
		Иначе
			Объект.ХозяйственнаяОперация = Реквизиты.ВидОперацииДДСНаличныйРасчет;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим незаполненные реквизиты значениями по умолчанию.
	Если Не ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ПланируемаяДатаОперации)) Тогда
		ПроизводственныйКалендарь = КалендарныеГрафикиУХВызовСервераПовтИсп.ОсновнойПроизводственныйКалендарь();
		ОМ.УстановитьРеквизитЗаявки(
			Объект, 
			РеквизитыЗаявки.ПланируемаяДатаОперации, 
			КалендарныеГрафикиУХ.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ТекущаяДатаСеанса(), 1));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента, ОбщегоНазначенияПовтИспУХ.ПолучитьВалютуУправленческогоУчета());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты, ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Организация)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.Организация, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ЦФО)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ЦФО, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Проект)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.Проект, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты, Перечисления.ФормыОплаты.Безналичная);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Приоритет) Тогда
		Объект.Приоритет = ПолучитьПриоритетПлатежа(Объект);
	КонецЕсли;
	
	// Заполним табличную часть "Движения операции".
	Если НЕ РеквизитыЗаявки.СтатьяБюджета.РазмещенВТЧ Тогда
		// Если расшифровка платежа не заполнена ранее или есть документ планирования, то 
		Если ТипОснования = Тип("Структура") И ДанныеЗаполнения.Свойство("СтатьяБюджета") Тогда
			ЗаполнитьТабличнуюЧастьПоСтруктуре(Объект, ДанныеЗаполнения)
		ИначеЕсли ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
			ЗаполнитьТабличнуюЧастьПоДокументуПланирования(Объект);
		ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
			ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента(Объект, ДанныеЗаполнения);
		ИначеЕсли ЗначениеЗаполнено(Объект.ВидОперацииУХ) Тогда
			Объект.СтатьяДвиженияДенежныхСредств = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(Объект.ВидОперацииУХ);
		КонецЕсли;
				
	КонецЕсли;
	
	Если ОчиститьДокОснованиеПослеЗаполнения Тогда
		ДокументПланирования = Неопределено;
	КонецЕсли;
	
	#КонецОбласти 
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	ЗаявкиНаОперации.ОбработкаУдаленияПроведения(Объект, Отказ);
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции
	
// Возвращает приоритет текущей заявки по её реквизитам.
Функция ПолучитьПриоритетПлатежа(Объект) Экспорт
	Возврат ЗаявкиНаОперации.ПолучитьПриоритетПлатежа(Объект);
КонецФункции // ПолучитьПриоритетПлатежа()

Процедура ЗаполнитьПоДокументуПланирования(Объект, Знач ДанныеЗаполнения)
	
	ЗаявкиНаОперации.ЗаполнитьЗаявкуПоДокументуПланирования(Объект, ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоДокументуПланирования() 

Процедура ЗаполнитьПоДоговоруКонтрагента(Объект, Знач Договор)
	
	//
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	РеквизитыДоговора = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		РеквизитыДоговора.Вставить("Контрагент", "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыДоговора.Вставить("Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЦФО) Тогда
		РеквизитыДоговора.Вставить("ЦФО", "ОсновнойЦФО");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
		РеквизитыДоговора.Вставить("Проект", "ОсновнойПроект");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
		РеквизитыДоговора.Вставить("ВалютаДокумента", "ВалютаВзаиморасчетов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаОплаты) Тогда
		РеквизитыДоговора.Вставить("ВалютаОплаты", "ОсновнаяВалютаПлатежей");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		РеквизитыДоговора.Вставить("СчетКонтрагента", "БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "БанковскийСчетКасса")) Тогда
		РеквизитыДоговора.Вставить("БанковскийСчетКасса", "БанковскийСчет");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ИдентификаторПлатежа) Тогда
		РеквизитыДоговора.Вставить("ИдентификаторПлатежа");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВидОперацииУХ) Тогда
		РеквизитыДоговора.Вставить("ВидОперацииУХ", "ВидДоговораУХ.ВидОперацииУХПоступление");
	КонецЕсли;
	
	РеквизитыДоговора.Вставить("ЗапретПлатежаВПрочихВалютах");
	РеквизитыДоговора.Вставить("СпособОпределенияКурсаПлатежа");
	РеквизитыДоговора.Вставить("ДатаФиксацииКурсаПлатежа");
	РеквизитыДоговора.Вставить("СдвигДатыФиксацииКурсаПлатежа");
	РеквизитыДоговора.Вставить("КурсПлатежа");
	РеквизитыДоговора.Вставить("КратностьПлатежа");
	РеквизитыДоговора.Вставить("ФиксированныйСчетОрганизации");
	РеквизитыДоговора.Вставить("ФиксированныйСчетКонтрагента");
	РеквизитыДоговора.Вставить("ГосударственныйКонтракт");
	РеквизитыДоговора.Вставить("КурсПлатежаНеБолее");
	РеквизитыДоговора.Вставить("КурсПлатежаНеМенее");
	РеквизитыДоговора.Вставить("КурсПлатежаНеБолееВВалютеОплаты");
	РеквизитыДоговора.Вставить("КурсПлатежаНеМенееВВалютеОплаты");
	РеквизитыДоговора.Вставить("БезакцептноеСписание", "ВерсияСоглашения.БезакцептноеСписание");
	
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		СтруктураРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, РеквизитыДоговора);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитовДоговора);
		Объект.ПлатежВУсловныхЕдиницах = СтруктураРеквизитовДоговора.ВалютаДокумента <> СтруктураРеквизитовДоговора.ВалютаОплаты;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКредитаДепозита(Знач ДокументОснование, ДанныеЗаполнения)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Партнер КАК Партнер,
	|	ДанныеДокумента.Контрагент КАК Контрагент,
	|	ДанныеДокумента.Ссылка КАК Договор,
	|
	|	ЛОЖЬ КАК ФормаОплатыНаличная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			И ДанныеДокумента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) ТОГДА
	|		ИСТИНА
	|	ИНАЧЕ
	|		ЛОЖЬ
	|	КОНЕЦ КАК ФормаОплатыБезналичная,
	|	ВЫБОР
	|		КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|			И ДанныеДокумента.БанковскийСчетКонтрагента <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка) ТОГДА
	|		ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|	ИНАЧЕ
	|		НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФормаОплаты,
	|
	|	ДанныеДокумента.БанковскийСчет КАК БанковскийСчет,
	|	ДанныеДокумента.БанковскийСчетКонтрагента КАК БанковскийСчетКонтрагента,
	|
	|	ВЫБОР КОГДА ДанныеДокумента.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) ТОГДА
	|		ДанныеДокумента.БанковскийСчет.ВалютаДенежныхСредств
	|	ИНАЧЕ
	|		ДанныеДокумента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|
	|	ВЫБОР ДанныеДокумента.ХарактерДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоКредитам)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоДепозитам)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный) ТОГДА
	|			ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствПоЗаймамВыданным)
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	&Ссылка КАК ДокументОснование,
	|	&Ссылка КАК ДоговорКредитаДепозита
	|	
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	#Область УХ_Втраивание
	ТекстДляЗамены = "&Ссылка КАК ДоговорКредитаДепозита";
	ТекстЗамены = ",
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.ВерсияСоглашения.ОсновнойЦФО КАК ЦФО,
	|	ДанныеДокумента.ВерсияСоглашения.ОсновнойПроект КАК Проект,
	|	ДанныеДокумента.ВерсияСоглашения.ОсновнаяВалютаПлатежей КАК ВалютаОплаты,
	|	ВЫБОР ДанныеДокумента.ХарактерДоговора
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.КредитИлиЗайм) ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ПоступленияПоКредитамИЗаймам)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.Депозит) ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ВозвратДепозита)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.ХарактерыДоговоровФинансовыхИнструментов.ЗаймВыданный) ТОГДА
	|			ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ВозвратЗаймаКонтрагентом)
	|	КОНЕЦ КАК ВидОперацииУХ";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, ТекстДляЗамены, ТекстДляЗамены + ТекстЗамены);
	
	#КонецОбласти 
	
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаполнения = Новый Структура;
	Для каждого Колонка Из РезультатЗапроса.Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	
	//ДанныеЗаполнения.Вставить("ЖелательнаяДатаПлатежа");
	ДанныеЗаполнения.Вставить("ДатаНачала");
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.ФормаОплаты) Тогда
		ДанныеЗаполнения.ФормаОплатыНаличная = Истина;
		ДанныеЗаполнения.ФормаОплатыБезналичная = Истина;
	КонецЕсли;
	
	ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(ДанныеЗаполнения.ФормаОплаты, ДанныеЗаполнения);
	
	Если ЗначениеЗаполнено(ДанныеЗаполнения.Валюта) Тогда
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент,
			ДанныеЗаполнения.Валюта);
	Иначе
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьБанковскийСчетПоУмолчанию(
			ДанныеЗаполнения.Контрагент);
	КонецЕсли;
	РеквизитыСчета = Справочники.БанковскиеСчетаКонтрагентов.ПолучитьРеквизитыБанковскогоСчета(
		БанковскийСчетКонтрагента);
	НазначениеПлатежа = РеквизитыСчета.ТекстНазначения;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоСтруктуре(Объект, Знач ДанныеЗаполнения)
	
	Объект.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяБюджета;
	
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		Если ДанныеЗаполнения.Свойство("Аналитика" + Сч) Тогда
			Объект["Аналитика" + Сч] = ДанныеЗаполнения["Аналитика" + Сч];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДокументуПланирования(Объект)
	
	РасшифровкаИсходная = Объект.ДокументПланирования.ДвиженияОперации.Выгрузить();
	
	СписокСвойств = "СтатьяБюджета,Аналитика1,Аналитика2,Аналитика3";
	СписокРесурсов = "Сумма,Количество";
	РасшифровкаИсходная.Свернуть(СписокСвойств, СписокРесурсов);
	РасшифровкаИсходная.ЗаполнитьЗначения(0, СписокРесурсов);
	
	РасшифровкаИсходная.Колонки.СтатьяБюджета.Имя = "СтатьяДвиженияДенежныхСредств";
	Если РасшифровкаИсходная.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Объект, РасшифровкаИсходная[0], СписокСвойств);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента(Объект, Знач ДанныеЗаполнения = Неопределено) Экспорт
	
	//
	Если ДанныеЗаполнения = Неопределено Тогда
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств");
		СтруктураРеквизитов.Вставить("Аналитика1", "АналитикаБДДС1");
		СтруктураРеквизитов.Вставить("Аналитика2", "АналитикаБДДС2");
		СтруктураРеквизитов.Вставить("Аналитика3", "АналитикаБДДС3");
		
		ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, СтруктураРеквизитов);
	Конецесли;
	
	ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения, "СтатьяДвиженияДенежныхСредств, Аналитика1, Аналитика2, Аналитика3");

КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область МодульМенеджера

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Документы.ЗакрытиеПлатежнойПозиции.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	НоваяКоманда = Документы.ОтражениеФактическихДанныхБюджетирования.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "ДенежныеСредстваВстраиваниеУХКлиент.СоздатьДокументОФДНаОснованииЗаявокНаРасходДС";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию";
		НоваяКоманда.МножественныйВыбор = Ложь;
	КонецЕсли;
	
	СозданиеНаОснованииОПК.ДобавитьКоманду_НачисленияОперацийМСФО(КомандыСозданияНаОсновании);
	
КонецПроцедуры

// Добавляет команду создания документа по его метаданным.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//	 МетаданныеДокумента - 
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, МетаданныеДокумента) Экспорт
	
	Если ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = МетаданныеДокумента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МетаданныеДокумента);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	// Текст запроса, формирующего таблицы движений
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОперативныйПлан(Запрос, ТекстыЗапроса, Регистры);
	
	// Выполение запроса и выгрузка полученных таблиц для формирования движений
	ПроведениеСерверОПК.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

// Заполняет движения документа "Оперативный план по бюджетам"
//
Процедура ВыполнитьДвиженияОперативныйПланПоБюджетам(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОперативныйПланПоБюджетам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ОперативныйПланПоБюджетам.Записывать = Истина;
	Движения.ОперативныйПланПоБюджетам.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ВидОперацииУХ - СправочникСсылка.ВидОперацииУХ - Вид операции УХ
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	ПеречислениеВБюджет - Булево - Признак перечисления в бюджет
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемыз в выбранной хозяйственной операции.
//
Процедура ПолучитьМассивыРеквизитов(ВидОперацииУХ, ХозяйственнаяОперация, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	// Реквизит договор в зависимости от вида операции УХ
	Для Каждого КлючЗначение Из ДоговораИВидыОперацийУХ() Цикл
		МассивВсехРеквизитов.Добавить(КлючЗначение.Ключ);
		Если КлючЗначение.Значение.Найти(ВидОперацииУХ) <> неопределено Тогда
			МассивРеквизитовОперации.Добавить(КлючЗначение.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Функция НастройкиПолейФормы(Настройки) Экспорт
	
	//
	#Область УправлениеБлокомСуммаОперации
	
	//Элементы.ВалютаОплаты.Видимость					= ПлатежВУсловныхЕдиницах;
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("ВалютаОплаты");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ПлатежВУсловныхЕдиницах", Истина);
	Настройка.Свойства.Вставить("Видимость");
	
	//Элементы.ВалютаОплаты.ТолькоПросмотр = Объект.ЗапретПлатежаВПрочихВалютах;
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("ВалютаОплаты");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ЗапретПлатежаВПрочихВалютах", Истина);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	//Элементы.ВалютаДокумента.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ДоговорКонтрагента);
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("Валюта");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Договор", , , ВидСравненияКомпоновкиДанных.Заполнено);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	#КонецОбласти
	
	#Область УникальныеТипыДоговоровВШапке
	ДоговораИВидыОперацийУХ = ДоговораИВидыОперацийУХ();
	
	// Договор
	ИмяРеквизита = "Договор";
	МассивОпераций = Новый Массив(Новый ФиксированныйМассив(ДоговораИВидыОперацийУХ[ИмяРеквизита]));
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить(ИмяРеквизита);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ВидОперацииУХ", МассивОпераций,, ВидСравненияКомпоновкиДанных.ВСписке);
	Настройка.Свойства.Вставить("Видимость");
	
	// ДоговорКредитаДепозита
	ИмяРеквизита = "ДоговорКредитаДепозита";
	МассивОпераций = Новый Массив(Новый ФиксированныйМассив(ДоговораИВидыОперацийУХ[ИмяРеквизита]));
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить(ИмяРеквизита);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ВидОперацииУХ", МассивОпераций,, ВидСравненияКомпоновкиДанных.ВСписке);
	Настройка.Свойства.Вставить("Видимость");
	
	// ДоговорЗаймаСотруднику
	ИмяРеквизита = "ДоговорЗаймаСотруднику";
	МассивОпераций = Новый Массив(Новый ФиксированныйМассив(ДоговораИВидыОперацийУХ[ИмяРеквизита]));
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить(ИмяРеквизита);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ВидОперацииУХ", МассивОпераций,, ВидСравненияКомпоновкиДанных.ВСписке);
	Настройка.Свойства.Вставить("Видимость");
	
	// ЦеннаяБумага
	ИмяРеквизита = "ЦеннаяБумага";
	МассивОпераций = Новый Массив(Новый ФиксированныйМассив(ДоговораИВидыОперацийУХ[ИмяРеквизита]));
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить(ИмяРеквизита);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ВидОперацииУХ", МассивОпераций,, ВидСравненияКомпоновкиДанных.ВСписке);
	Настройка.Свойства.Вставить("Видимость");
	
	#КонецОбласти 
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДанныеДокумента.Дата                                     КАК Период,
	|	ДанныеДокумента.ДатаНачала								 КАК ДатаПлатежа,
	|	ДанныеДокумента.ДатаНачала				                 КАК ЖелательнаяДатаПлатежа,
	|	ДанныеДокумента.Организация                              КАК Организация,
	|	ДанныеДокумента.Подразделение                            КАК Подразделение,
	|	ДанныеДокумента.Валюта                                   КАК Валюта,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств            КАК СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.Аналитика1            					 КАК Аналитика1,
	|	ДанныеДокумента.Аналитика2            					 КАК Аналитика2,
	|	ДанныеДокумента.Аналитика3            					 КАК Аналитика3,
	|	ДанныеДокумента.ФормаОплаты                        		 КАК ФормаОплаты,
	|	ДанныеДокумента.ЦФО										 КАК ЦФО,
	|	ДанныеДокумента.Проект									 КАК Проект,
	|	неопределено											 КАК Приоритет,
	|	неопределено											 КАК Контрагент,
	|	неопределено											 КАК Договор,
	|	неопределено											 КАК ДоговорКонтрагента,
	|	неопределено											 КАК ДокументПланирования,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств) КАК ВидБюджета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)	 КАК ПриходРасход
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|";
	
	Результат = Запрос.Выполнить();
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	
	Для Каждого Колонка Из Результат.Колонки Цикл
		Запрос.УстановитьПараметр(Колонка.Имя, Реквизиты[Колонка.Имя]);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредствДокумента(Реквизиты));
	Запрос.УстановитьПараметр("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств",
		ПолучитьФункциональнуюОпцию("ИспользоватьЗаявкиНаРасходованиеДенежныхСредств"));
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОперативныйПлан(Запрос, ТекстыЗапроса, Регистры)
	
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_ТаблицаДвиженияОперации", ТекстыЗапроса) Тогда
		ТекстЗапроса_ВТ_ТаблицаДвиженияОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИмяРегистра = "ОперативныйПланПоБюджетам";
	ТекстЗапроса_ОперПланы(Запрос, ТекстыЗапроса, ИмяРегистра);
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапроса_ОперПланы(Запрос, ТекстыЗапроса, ИмяРегистра)
	
	//
	ТекстЗапроса7 = 
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета КАК ВидБюджета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЖелаемаяДатаОплаты КАК ЖелаемаяДатаОплаты,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса7, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапроса_ВТ_ТаблицаДвиженияОперации(Запрос, ТекстыЗапроса)

	ИмяВременнойТаблицы = "ВТ_ТаблицаДвиженияОперации";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДанныеДокумента.Ссылка КАК Ссылка,
	|	&Период КАК Период,
	|	&ВидБюджета КАК ВидБюджета,
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	&Организация КАК Организация,
	|	&Валюта КАК Валюта,
	|	&ЦФО КАК ЦФО,
	|	&Проект КАК Проект,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК ДоговорКонтрагента,
	|	&ПриходРасход КАК ПриходРасход,
	|	&Ссылка КАК ДокументПланирования,
	|	&ДокументПланирования КАК ДокументРезервирования,
	|	&ЖелательнаяДатаПлатежа КАК ЖелаемаяДатаОплаты,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств КАК СтатьяБюджета,
	|	ДанныеДокумента.Аналитика1 КАК Аналитика1,
	|	ДанныеДокумента.Аналитика2 КАК Аналитика2,
	|	ДанныеДокумента.Аналитика3 КАК Аналитика3,
	|	СУММА(ДанныеДокумента.СуммаДокумента) КАК Заявлено
	|ПОМЕСТИТЬ ВТ_ТаблицаДвиженияОперации
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|		ПО (ПараметрыОперативногоПланирования.ВидБюджета = &ВидБюджета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования = Периоды.Периодичность)
	|			И (&ЖелательнаяДатаПлатежа >= Периоды.ДатаНачала)
	|			И (&ЖелательнаяДатаПлатежа <= Периоды.ДатаОкончания)
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Ссылка,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.СтатьяДвиженияДенежныхСредств,
	|	ДанныеДокумента.Аналитика1,
	|	ДанныеДокумента.Аналитика2,
	|	ДанныеДокумента.Аналитика3";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецФункции

Функция СтатьяДвиженияДенежныхСредствДокумента(ДанныеДокумента)

	//Требуется рефакторинг: Вернуться после того, как будет решена судьба Хоз.Операции в Ожидаемом поступлении
	СтатьяДвиженияДенежныхСредств = ДанныеДокумента.СтатьяДвиженияДенежныхСредств;
	//
	//Если ЗначениеЗаполнено(ДанныеДокумента.СтатьяДвиженияДенежныхСредств) Тогда
	//	СтатьяДвиженияДенежныхСредств = ДанныеДокумента.СтатьяДвиженияДенежныхСредств;
	//Иначе
	//	СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.ПредопределеннаяСтатьяДДС(
	//		ДанныеДокумента.ХозяйственнаяОперация,
	//		ДанныеДокумента.Валюта);
	//КонецЕсли;
	
	Возврат СтатьяДвиженияДенежныхСредств;

КонецФункции

Функция ДоговораИВидыОперацийУХ()
	
	Результат = Новый Соответствие;
	
	ДобавитьДоговорВидОперации(Результат, "ДоговорКредитаДепозита", Справочники.ВидыОперацийУХ.ПоступленияПоКредитамИЗаймам);
	ДобавитьДоговорВидОперации(Результат, "ДоговорКредитаДепозита", Справочники.ВидыОперацийУХ.ВозвратЗаймаКонтрагентом);
	ДобавитьДоговорВидОперации(Результат, "ДоговорКредитаДепозита", Справочники.ВидыОперацийУХ.ВозвратДепозита);
	ДобавитьДоговорВидОперации(Результат, "ДоговорКредитаДепозита", Справочники.ВидыОперацийУХ.ПоступленияПоДепозитам);
	
	ДобавитьДоговорВидОперации(Результат, "ДоговорЗаймаСотруднику", Справочники.ВидыОперацийУХ.ВозвратЗаймаРаботником);
	
	ДобавитьДоговорВидОперации(Результат, "ЦеннаяБумага",			Справочники.ВидыОперацийУХ.ПоступленияПоЦеннымБумагам);
	
	ДобавитьДоговорВидОперации(Результат, "Договор",				Справочники.ВидыОперацийУХ.ОплатаОтПокупателя);
	ДобавитьДоговорВидОперации(Результат, "Договор",				Справочники.ВидыОперацийУХ.ВозвратОтПоставщика);
	ДобавитьДоговорВидОперации(Результат, "Договор",				Справочники.ВидыОперацийУХ.ОплатаОтФакторинговойКомпании);
	ДобавитьДоговорВидОперации(Результат, "Договор",				Справочники.ВидыОперацийУХ.ПрочиеПоступленияОтКонтрагентов);
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьДоговорВидОперации(Результат, ИмяРеквизитаДоговора, ВидОперации)
	
	//
	Если Результат[ИмяРеквизитаДоговора] = неопределено Тогда
		Результат.Вставить(ИмяРеквизитаДоговора, Новый Массив);
	КонецЕсли;
	
	Результат[ИмяРеквизитаДоговора].Добавить(ВидОперации);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 


