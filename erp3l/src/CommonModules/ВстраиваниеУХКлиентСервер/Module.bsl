#Область ПрограммныйИнтерфейс

#Область Справочник_Организации

Процедура ОбработкаПолученияФормыОрганизации(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаСписка" ИЛИ ВидФормы = "ФормаВыбора" Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Параметры.Свойство("Ключ") И ЗначениеЗаполнено(Параметры.Ключ)
		ИЛИ Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ВыбраннаяФорма = "ФормаОрганизации";
		
	ИначеЕсли Не (Параметры.Свойство("ОтключитьФормуУХ") И Параметры.ОтключитьФормуУХ = Истина) Тогда 
		
		// Новая организация
		ВыбраннаяФорма = "ФормаВыбораТипаОрганизации";
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Документ_ПлатежноеПоручение

Процедура ПереопределитьПолучаемуюФормуДокументаДДСУХ(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	//** ВстраиваниеУХВызовСервера.ПереопределитьПолучаемуюФормуДокументаДДС(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область Документ_УведомлениеОСпецрежимахНалогообложения

Процедура ПолучениеФормыУведомленияОКонтролируемыхИООбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Ключ = Неопределено;
		ВидУведомления = Неопределено;
		Если Параметры.Свойство("Ключ", Ключ) ИЛИ Параметры.Свойство("ВидУведомления", ВидУведомления) Тогда
			Если ТипЗнч(Ключ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
				ВидУведомления = Ключ.ВидУведомления;
			КонецЕсли;
			Если ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО") 
					ИЛИ ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК") Тогда
				ВыбраннаяФорма = "ФормаДокументаУХ";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область Справочник_ДоговорыКонтрагентов

Процедура ДоговорыКонтрагентовОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	ВстраиваниеУХВызовСервера.ДоговорыКонтрагентовОбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область Справочник_ДоговорыКонтрагентов_ИменаРеквизитов_БМНМ

Функция ИмяРеквизитаКонтрагент(ТипФИ = Неопределено) Экспорт
	
	Если ТипФИ = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		Возврат "Эмитент";
	Иначе	
		Возврат "Контрагент";
	КонецЕсли;
	
КонецФункции

Функция ИмяРеквизитаВидДоговора(ВидДоговораУХ) Экспорт

	Возврат "ТипДоговора";

КонецФункции

Функция ИмяРеквизитаСуммаДоговора(ТипДоговора = Неопределено) Экспорт
	
	Если ТипДоговора = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Возврат "Сумма";
	ИначеЕсли ТипДоговора = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		Возврат "Номинал";
	КонецЕсли;
	
КонецФункции

Функция ИмяРеквизитаСрокДействияДоговора(ТипДоговора = Неопределено) Экспорт
	
	Если ТипДоговора = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		Возврат "СрокПогашения";
	Иначе	
		Возврат "СрокПогашения";
	КонецЕсли;
	
КонецФункции

Функция ИмяРеквизитаДатаНачала(ТипФИ = Неопределено) Экспорт
	
	Если ТипФИ = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		Возврат "ДатаВыпуска";
	Иначе	
		Возврат "ДатаНачалаДействия";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ВНА

Функция ПолучитьТипОС() Экспорт
	Возврат Тип("СправочникСсылка.ОбъектыЭксплуатации");
КонецФункции

Функция ПолучитьПустуюСсылкуОС() Экспорт
	Возврат ПредопределенноеЗначение("Справочник.ОбъектыЭксплуатации.ПустаяСсылка");
КонецФункции

Функция ПолучитьПустуюСсылкуРБП() Экспорт
	Возврат ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
КонецФункции

Функция ПолучитьПустуюСсылкуДБП() Экспорт
	Возврат ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
КонецФункции

Функция ПолучитьПустуюСсылкуПрочиеДоходыРасходы() Экспорт
	Возврат ПредопределенноеЗначение("ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка");
КонецФункции

#КонецОбласти

#Область МСФО_КлючевыеСубконто

Функция ПолучитьКлючевыеСубконтоМПЗ(РеквизитыНоменклатуры = Истина, Аналитики = Ложь) Экспорт
	
	КлючевыеСубконто = Новый Соответствие;	
	КлючевыеСубконто.Вставить(Новый ОписаниеТипов("СправочникСсылка.Номенклатура"), "Номенклатура");
	
	Если РеквизитыНоменклатуры Тогда
		
		//БП КлючевыеСубконто.Вставить(Новый ОписаниеТипов("СправочникСсылка.НоменклатурныеГруппы"), "НоменклатурныеГруппы");
				
		КлючевыеСубконто.Вставить(Новый ОписаниеТипов("СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры"),	"ГруппаФинансовогоУчета");
		КлючевыеСубконто.Вставить(Новый ОписаниеТипов("СправочникСсылка.ЦеновыеГруппы"),						"ЦеноваяГруппа");
		КлючевыеСубконто.Вставить(Новый ОписаниеТипов("ПеречислениеСсылка.ТипыНоменклатуры"),					"ТипНоменклатуры");
		КлючевыеСубконто.Вставить(Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"), 					"ВидНоменклатуры");
		КлючевыеСубконто.Вставить(Новый ОписаниеТипов("СправочникСсылка.ГруппыДоступаНоменклатуры"), 			"ГруппаДоступа");
	
	КонецЕсли;	
	
	Возврат КлючевыеСубконто;	
	
КонецФункции
	
#КонецОбласти 

#Область МСФО_РасчетСебестоимости

Функция ЭлементЗатрат_МатериальныеЗатраты() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Материальные"); 

КонецФункции

Функция ЭлементЗатрат_Амортизация() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Амортизация"); 

КонецФункции

Функция ЭлементЗатрат_ОплатаТруда() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"); 

КонецФункции

Функция ЭлементЗатрат_ОтчисленияНаСоциальныеНужды() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ТипыЗатрат.ОплатаТруда"); 

КонецФункции

Функция ЭлементЗатрат_ПрочиеЗатраты() Экспорт

	Возврат ПредопределенноеЗначение("Перечисление.ТипыЗатрат.Прочее"); 

КонецФункции

Функция ТипыСтатьиЗатрат() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Результат.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	Результат.Добавить(Тип("СправочникСсылка.ВидыРаботСотрудников"));
	
	Возврат Результат;
	
КонецФункции

Функция ТипыНезаменяемыеВНА() Экспорт

	Результат = Новый Массив;
	Результат.Добавить(Тип("СправочникСсылка.Номенклатура"));
	Результат.Добавить(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов"));
	
	Возврат Результат;	

КонецФункции

Функция ТипыЭлементыЗатрат() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Тип("ПеречислениеСсылка.ТипыЗатрат"));
	//Результат.Добавить(Тип("ПеречислениеСсылка.ТипыЗатратРегл"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

Функция ИмяРеквизитаДоговорЗаказПоставщику() Экспорт

	Возврат "Договор";

КонецФункции

#Область ИзменитьПараметрыВыбораПолейСубконто

//Функция ЗаполнитьПараметрыПоСчету(ЗначенияПараметров, Контекст, ИмяСчетУчета = Неопределено, 
//									ИмяСубконтоКонтрагент = Неопределено, НомерСубконто = Неопределено) Экспорт

//	Если ИмяСчетУчета <> Неопределено Тогда
//		ЗначенияПараметров.СчетУчета = Контекст[ИмяСчетУчета];
//		
//		Если ЗначениеЗаполнено(ЗначенияПараметров.СчетУчета) Тогда
//			СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ЗначенияПараметров.СчетУчета);
//			ЗначенияПараметров.ВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "Ссылка"];
//		КонецЕсли;
//		
//	КонецЕсли;
//	
//	Если ИмяСубконтоКонтрагент <> Неопределено Тогда
//		ЗначенияПараметров.Контрагент = Контекст[ИмяСубконтоКонтрагент];
//	КонецЕсли;

//КонецФункции

Функция ЗначенияПараметровОтбораТипов(Контекст, Форма = Неопределено) Экспорт

	//Стадия1:начальные параметры (из шапки документа)
	ЗначенияПараметров = Новый Структура("Организация, 
										|Контрагент, 
										|СчетУчета, 
										|ВидСубконто, 
										|ПланСчетов,
										|ПланСчетовИсточник");
	
	ЗаполнитьЗначенияСвойств(ЗначенияПараметров, Контекст);
	
	ПолучениеКэша = Новый Структура("КэшируемыеЗначения");
	ЗаполнитьЗначенияСвойств(ПолучениеКэша, Форма);
	Кэш = ПолучениеКэша.КэшируемыеЗначения;
	
	Если ЗначениеЗаполнено(Кэш) Тогда
		
		Если Кэш.Свойство("ШаблонТрансляции") Тогда
			
			ШаблонТР = ОбщегоНазначенияУХ.ЗначенияРеквизитовОбъекта(
				Кэш.ШаблонТрансляции, "ПланСчетовПриемник, ПланСчетовИсточник");
			
			ЗначенияПараметров.Вставить("ПланСчетов", ШаблонТР.ПланСчетовПриемник);
			ЗначенияПараметров.Вставить("ПланСчетовИсточник", ШаблонТР.ПланСчетовИсточник);
		Иначе 
			
			ЗначенияПараметров.Вставить("ПланСчетов", 
					ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Кэш, "ПланСчетовМСФО"));
			ЗначенияПараметров.Вставить("ПланСчетовИсточник", 
					ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Кэш, "ПланСчетовНСБУ"));
			
		КонецЕсли;
			
		Если Не ЗначениеЗаполнено(ЗначенияПараметров.ПланСчетов) Тогда
			
			КонтекстУП = Новый Структура("Организация, Сценарий, Дата");
			ЗаполнитьЗначенияСвойств(КонтекстУП, Контекст);
			РеквизитыУП = МСФОВызовСервераУХ.РеквизитыДляФормыУП(
				КонтекстУП.Организация, КонтекстУП.Дата, КонтекстУП.Сценарий);
				
			ЗначенияПараметров.Вставить("ПланСчетов", РеквизитыУП.ПланСчетовМСФО);
			
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ЗначенияПараметров.ПланСчетовИсточник) Тогда
			
			КонтекстУП = Новый Структура("Организация, Сценарий, Дата");
			ЗаполнитьЗначенияСвойств(КонтекстУП, Контекст);
			РеквизитыУП = МСФОВызовСервераУХ.РеквизитыДляФормыУП(
				КонтекстУП.Организация, КонтекстУП.Дата, КонтекстУП.Сценарий);
				
			ЗначенияПараметров.Вставить("ПланСчетовИсточник", РеквизитыУП.ПланСчетов);
			
			Если Не ЗначениеЗаполнено(РеквизитыУП.ПланСчетов) Тогда
				ТекстСообщения = НСтр("ru = 'У организации <%1> не указан план счетов источника (национальный)'");
				Сообщить(СтрШаблон(ТекстСообщения, ЗначенияПараметров.Организация));
				Возврат Неопределено;
			КонецЕсли;
						
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат ЗначенияПараметров;
	
КонецФункции

Процедура ДоработатьЗапросПоиска(ТекстЗапроса, ТипСтрокой, ВидУчета = "МСФО", ОтборПоОрганизации = Истина) Экспорт

	//Стадия2: при запросах отборы на начальные параметры, остальные параметры - уточнения поиска
	Если ТипСтрокой = "Справочник.ДоговорыКонтрагентов" Тогда
		
		Договор_Контрагент = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьИмяРеквизитаКонтрагентДоговора();
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", СтрШаблон("ВЫБРАТЬ т.%1,", Договор_Контрагент));
		
		Если ОтборПоОрганизации Тогда
			ТекстЗапроса = ТекстЗапроса + " И т.Организация = &Организация";
		КонецЕсли;
		
	ИначеЕсли ОтборПоОрганизации И (ТипСтрокой = "Справочник.ПодразделенияОрганизаций") Тогда 
		
		Подразделение_Организация = БухгалтерскийУчетКлиентСерверПереопределяемый.ИмяРеквизитаОрганизацияПодразделения();
		ТекстЗапроса = ТекстЗапроса + СтрШаблон(" И т.%1 = &Организация", Подразделение_Организация);
		
	ИначеЕсли ОтборПоОрганизации И (ТипСтрокой = "Справочник.БанковскиеСчета") Тогда 
		
		ТекстЗапроса = ТекстЗапроса + " И т.Владелец = &Организация";
		
	ИначеЕсли (ТипСтрокой = "Справочник.Субконто") Тогда 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ т.Владелец,");
		
	ИначеЕсли (ТипСтрокой = "Справочник.ПроизвольныйКлассификаторУХ") Тогда 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ", "ВЫБРАТЬ т.Владелец,");
		
	ИначеЕсли (ТипСтрокой = "Справочник.СчетаБД") Тогда 
		
		ИмяПараметра = ?(ВидУчета = "НСБУ", "ПланСчетовИсточник", "ПланСчетов");
		ТекстЗапроса = ТекстЗапроса + " И т.Владелец = &" + ИмяПараметра;
		
	КонецЕсли;

КонецПроцедуры

Функция ТипыКэшируемыеТаблицей() Экспорт

	Результат = Новый Соответствие;
	Результат.Вставить("СправочникСсылка_ДоговорыКонтрагентов", 		Истина);//владелец-Контрагент
	Результат.Вставить("СправочникСсылка_Субконто", 					Истина);//владелец-ПВХ
	Результат.Вставить("СправочникСсылка_ПроизвольныйКлассификаторУХ", 	Истина);//владелец-ПВХ
	//Результат.Вставить(Тип("СправочникСсылка.СчетаБД"), Истина);//  на каждый план счетов своя таблица
	
	Возврат Результат;

КонецФункции

Процедура ЗаполнитьНомераСубконтоКэшаСчетов(СтрокаКэшаСчетов) Экспорт
	
	НомераСубконто = Новый Структура;
	ИменаКолонок = Новый Структура("ТипыПоиска1,ТипыПоиска2,ТипыПоиска3", 1, 2, 3);
	Для Каждого ИмяКолонки Из ИменаКолонок Цикл
		
		ЗначенияТипов = СтрокаКэшаСчетов[ИмяКолонки.Ключ];
		
		Если ЗначенияТипов = Неопределено Тогда
			Продолжить;
		ИначеЕсли ЗначенияТипов.Найти(Тип("СправочникСсылка.ДоговорыКонтрагентов")) <> Неопределено Тогда
			
			Для каждого ИмяК Из ИменаКолонок Цикл
				
				ТипыК = СтрокаКэшаСчетов[ИмяК.Ключ];
				Если ТипыК = Неопределено Тогда
					Продолжить;
				ИначеЕсли ТипыК.Найти(Тип("СправочникСсылка.Контрагенты"))  <> Неопределено Тогда
					НомераСубконто.Вставить("Контрагент", ИмяК.Значение);
					Прервать;
				КонецЕсли;
			
			КонецЦикла;
			
		ИначеЕсли ЗначенияТипов.Найти(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) <> Неопределено Тогда 
			
			НомераСубконто.Вставить("ВидСубконто", СтрокаКэшаСчетов["ВидСубконто" + ИмяКолонки.Значение]); 
			
		ИначеЕсли ЗначенияТипов.Найти(Тип("СправочникСсылка.Субконто")) <> Неопределено Тогда	
			
			НомераСубконто.Вставить("ВидСубконто", СтрокаКэшаСчетов["ВидСубконто" + ИмяКолонки.Значение]);
			
		ИначеЕсли ЗначенияТипов.Найти(Тип("СправочникСсылка.СчетаБД")) <> Неопределено Тогда	
			
			НомераСубконто.Вставить("Владелец", СтрокаКэшаСчетов["ВидСубконто" + ИмяКолонки.Значение]);
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если НомераСубконто.Количество() Тогда
		СтрокаКэшаСчетов.НомераСубконто = НомераСубконто;	
	КонецЕсли;
			
КонецПроцедуры

Процедура ДоработатьУточнениеПоиска(УточненияПоиска, СтрокаТаб, КолонкаТаб, КолонкиЗагрузки, КэшСчета) Экспорт
	
	Если КэшСчета.НомераСубконто.Свойство("Контрагент") Тогда
		
		Отбор = Новый Структура("ИмяСчетаДляСубконто, НомерСубконто", 
		КолонкаТаб.ИмяСчетаДляСубконто, 
		КэшСчета.НомераСубконто.Контрагент
		);
		
		КолонкиУточнения = КолонкиЗагрузки.НайтиСтроки(Отбор);
		Для каждого КолонкаУточнение Из КолонкиУточнения Цикл
			УточненияПоиска.Вставить("Владелец", СтрокаТаб[КолонкаУточнение.Имя]);
		КонецЦикла;
		
	КонецЕсли;
	
	Если КэшСчета.НомераСубконто.Свойство("ВидСубконто") Тогда
		УточненияПоиска.Вставить("Владелец", КэшСчета.НомераСубконто.ВидСубконто);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоработатьОтборКэша(Отбор, ТекущийТип, УточнениеПоиска) Экспорт

	Если ТекущийТип = ("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		Отбор.Вставить("Владелец", УточнениеПоиска.Контрагент);
	ИначеЕсли ТекущийТип = ("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
		Отбор.Вставить("Владелец", УточнениеПоиска.ВидСубконто);
	ИначеЕсли ТекущийТип = ("СправочникСсылка.Субконто") Тогда
		Отбор.Вставить("Владелец", УточнениеПоиска.ВидСубконто);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Функция ИмяСправочникаПодразделения() Экспорт

	Возврат "Справочник.СтруктураПредприятия";

КонецФункции

Функция ТипДокументСсылкаПоступлениеТоваровУслуг() Экспорт
	Возврат Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

Функция ПолучитьПараметрыКарточкаСубконто(ДокументСсылка, ИмяРеквизитСубконто = Неопределено) Экспорт
	
	ЗначениеСубконто = Неопределено;
	Организация = Неопределено;
	Если ИмяРеквизитСубконто = Неопределено Тогда
		Если ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
			
			ЗначениеСубконто = ДокументСсылка;	
			
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			
			ЗначениеСубконто = ДокументСсылка;
			Организация = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ДокументСсылка, "Организация");
			
		ИначеЕсли ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда //не БМ,НМ
			
			ТипДокумента = ТипЗнч(ДокументСсылка);
			Если (ТипДокумента = Тип("ДокументСсылка." + "ПоступлениеИнвестиций")) 
				Или (ТипДокумента = Тип("ДокументСсылка." + "ВыбытиеИнвестиций")) Тогда
				
				РеквизитыДок = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ДокументСсылка, "Организация,ОбъектИнвестирования");
				ЗначениеСубконто 	= РеквизитыДок.ОбъектИнвестирования;
				Организация 		= РеквизитыДок.Организация;
			
			КонецЕсли;
						
		Иначе 
			
			РеквизитыДок = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ДокументСсылка, "Организация,ФинансовыйИнструмент");
			
			ЗначениеСубконто 	= РеквизитыДок.ФинансовыйИнструмент;
			Организация 		= РеквизитыДок.Организация;
			
		КонецЕсли;;
	Иначе 
		
		РеквизитыДок = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ДокументСсылка, "Организация," + ИмяРеквизитСубконто);
		
		ЗначениеСубконто = РеквизитыДок[ИмяРеквизитСубконто];
		Организация = РеквизитыДок.Организация;
		
	КонецЕсли;
	
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Организации") Тогда
		ОбъектИнвестирования = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ДокументСсылка, "ОбъектИнвестирования");
		Контрагенты = ОрганизацииВызовСервераУХ.ПолучитьКонтрагентовПоОрганизации(ОбъектИнвестирования);
		Если Контрагенты.Количество() Тогда
			ЗначениеСубконто = Контрагенты[0];
		КонецЕсли;
	КонецЕсли;
	
	СписокВидовСубконто = Новый СписокЗначений;
	Если ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги"));
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.Контрагенты") Тогда
		СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты"));
	ИначеЕсли ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда	
		СписокВидовСубконто.Добавить(ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры"));
	КонецЕсли;
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода", Дата(1,1,1));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", Дата(1,1,1));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("СписокВидовСубконто", СписокВидовСубконто);
	Если Организация <> Неопределено Тогда
		Организация = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ДокументСсылка, "Организация");
		ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", Организация);
	КонецЕсли;
	
	Отбор = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Отбор, "Субконто1", ВидСравненияКомпоновкиДанных.Равно, ЗначениеСубконто, , Истина);
	
	Возврат Новый Структура("ПользовательскиеНастройки,СформироватьПриОткрытии,ВидРасшифровки,РежимРасшифровки", 
								ПользовательскиеНастройки, Истина, 2, Истина);
	
КонецФункции
