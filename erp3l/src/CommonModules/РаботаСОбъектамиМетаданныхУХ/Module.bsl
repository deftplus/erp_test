#Область ПрограммныйИнтерфейс
Функция ЭтоТекущаяИБ(База) Экспорт
	Возврат База = Неопределено ИЛИ ТипЗнч(База) = Тип("ОбработкаОбъект.РаботаСМетаданнымиУХ");
КонецФункции

#Область КэшОбновленияМетаданных
Функция НовыйКэшОбновленияМетаданных() Экспорт
	
	Кэш = Новый Структура;
	Кэш.Вставить("Параметры", Новый Соответствие);
	Кэш.Вставить("Данные", Новый Соответствие);
	Возврат Кэш;
	
КонецФункции

Функция ПараметрИзКэша(Кэш, ИмяПараметра) Экспорт
	Возврат Кэш.Параметры[ИмяПараметра];
КонецФункции

Функция СохранитьПараметрВКэш(Кэш, ИмяПараметра, ЗначениеПараметра) Экспорт
	Кэш.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
КонецФункции

Функция ПодключениеИзКэша(Кэш) Экспорт
	
	База = ПараметрИзКэша(Кэш, "СоединениеИБ");	
	Возврат База;
	
КонецФункции

Процедура СохранитьПодключениеВКэш(Кэш, ТекСоединение) Экспорт
	
	ЭтоТекущаяИБ = Ложь;
	ЭтоCOMПодключение = Ложь;
	ЭтоWSПодключение = Ложь;
	
	Если ЭтоТекущаяИБ(ТекСоединение) Тогда		
		ЭтоТекущаяИБ = Истина;		
	ИначеЕсли ТипЗнч(ТекСоединение) = Тип("WSПрокси") Тогда	
		ЭтоWSПодключение = Истина;
	Иначе
		ЭтоCOMПодключение = Истина;
	КонецЕсли;
	
	СохранитьПараметрВКэш(Кэш, "ЭтоТекущаяИБ", ЭтоТекущаяИБ);
	СохранитьПараметрВКэш(Кэш, "ЭтоCOMПодключение", ЭтоCOMПодключение);
	СохранитьПараметрВКэш(Кэш, "ЭтоWSПодключение", ЭтоWSПодключение);
	
	Если ЭтоCOMПодключение Тогда
		СохранитьПараметрВКэш(Кэш, "СоединениеИБ", ТекСоединение);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПроверитьКэшПередПодключениемКИБ(Кэш) Экспорт
	Если Кэш <> Неопределено И ЭтоCOMПодключениеИзКэша(Кэш) Тогда 
		Кэш = НовыйКэшОбновленияМетаданных(); // COM соединение нестабильно работает, пересоздаем
	КонецЕсли;
КонецПроцедуры

Процедура ИнициализироватьКэш(Кэш, База) Экспорт
	
	ИмяПараметра = "КэшИнициализирован";
	КэшИнициализирован = ПараметрИзКэша(Кэш, ИмяПараметра);
	Если КэшИнициализирован = Неопределено Тогда
		СохранитьПодключениеВКэш(Кэш, База);
		Если ЭтоCOMПодключениеИзКэша(Кэш) ИЛИ ЭтоТекущаяИБИзКэша(Кэш) Тогда
			СохранитьПараметрВКэш(Кэш, "ПримитивныеXMLТипы", 
				РаботаСОбъектамиМетаданныхВнешнийУХ.ПримитивныеXMLТипыБазы(База));
		КонецЕсли;	
		СохранитьПараметрВКэш(Кэш, ИмяПараметра, Истина);
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьЗначениеИзКэша(Кэш, Ресурс, Ключ, Значение)	Экспорт
	
	Если Кэш = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
		
	КэшРесурса = Кэш.Данные[Ресурс];
	Если КэшРесурса = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КлючДляКэша = КлючДляКэша(Кэш, Ключ);
	
	СтрокаКэша = КэшРесурса.Найти(КлючДляКэша, "Ключ");
	Если СтрокаКэша <> Неопределено Тогда
		Значение = СтрокаКэша.Значение;
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;	
	
КонецФункции

Процедура СохранитьЗначениеВКэш(Кэш, Ресурс, Ключ, Значение) Экспорт	
	
	Если Кэш = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшРесурса = Кэш.Данные[Ресурс];
	Если КэшРесурса = Неопределено Тогда
		КэшРесурса = Новый ТаблицаЗначений;
		КэшРесурса.Колонки.Добавить("Ключ");
		КэшРесурса.Колонки.Добавить("Значение");
		КэшРесурса.Индексы.Добавить("Ключ");
		
		Кэш.Данные.Вставить(Ресурс, КэшРесурса);
	КонецЕсли;
	
	КлючДляКэша = КлючДляКэша(Кэш, Ключ);
	
	СтрокаКэша = КэшРесурса.Добавить();
	СтрокаКэша.Ключ = КлючДляКэша;
	СтрокаКэша.Значение = Значение;
	
КонецПроцедуры

Функция КлючДляКэшаОбъекта(Объект) Экспорт
	Возврат ЗначениеВСтрокуВнутр(Объект);
КонецФункции	

Функция ОписаниеОбъектовМетаданных(Кэш, ТипОбъектаМетаданных) Экспорт
	
	ОписаниеМетаданных = Неопределено;
	ПолучитьЗначениеИзКэша(Кэш, "ОписаниеМетаданных", ТипОбъектаМетаданных, ОписаниеМетаданных);
	Возврат ОписаниеМетаданных;
	
КонецФункции

Функция СохранитьОписаниеМетаданных(Кэш, ОписаниеМетаданных, ТипОбъектовМетаданных) Экспорт
	СохранитьЗначениеВКэш(Кэш, "ОписаниеМетаданных", ТипОбъектовМетаданных, ОписаниеМетаданных);
КонецФункции
#КонецОбласти
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Функция КлючДляКэша(Кэш, Ключ)
	
	Если ЭтоCOMПодключениеИзКэша(Кэш) Тогда
		Возврат ПодключениеИзКэша(Кэш).ValueToStringInternal(Ключ);
	Иначе			
		Возврат Ключ;
	КонецЕсли;
	
КонецФункции

Функция ЭтоCOMПодключениеИзКэша(Кэш) Экспорт
	Возврат ПараметрИзКэша(Кэш, "ЭтоCOMПодключение") = Истина;
КонецФункции

Функция ЭтоТекущаяИБИзКэша(Кэш)
	Возврат ПараметрИзКэша(Кэш, "ЭтоТекущаяИБ") = Истина;
КонецФункции

Функция ЭтоWSПодключениеИзКэша(Кэш)
	Возврат ПараметрИзКэша(Кэш, "ЭтоWSПодключение") = Истина;
КонецФункции
#КонецОбласти

#Область ОбновлениеИнформацииПоМетаданным

Процедура ЗаполнитьСписокДокументовБД(ТипБД, База = Неопределено, Кэш = Неопределено) Экспорт
	
	Если НЕ ПодключитьсяКИБ(ТипБД, База, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
		
		НачатьТранзакцию();
		
		Для Инд = 1 По База.Метаданные().Документ() Цикл
			
			ДокументВИБ 	= База.Метаданные().Документ(Инд);
			ИмяОбъекта 		= ДокументВИБ.Идентификатор;
			
			ОбновитьОписаниеОбъектаБД(База,"Документ",ИмяОбъекта,ТипБД, Истина, Кэш);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		Если ТипЗнч(База) = Тип("WSПрокси") Тогда
			РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьКэшМетаданныхWS(Кэш, База, "Documents", Истина); 
		КонецЕсли;
		
		МассивСуществующих = Новый Массив;	
		МассивИмен = ПолучитьМассивИменОбъектовБД("Documents", База, Кэш);
		
		НачатьТранзакцию();
		
		Для Каждого ИмяОбъекта ИЗ МассивИмен Цикл
			ОбновитьОписаниеОбъектаБД(База, "Документ", ИмяОбъекта, ТипБД, Истина, Кэш);
			МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
		КонецЦикла;
		
		МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
		МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
		// Обновление реквизита Отсутствует в конфигурации.
		ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.ДокументыБД");
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры //

Процедура ЗаполнитьСписокПеречисленийБД(ТипБД, База = Неопределено, Кэш = Неопределено) Экспорт
	
	Если НЕ ПодключитьсяКИБ(ТипБД, База, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
		
		НачатьТранзакцию();
		
		Для Инд = 1 По База.Метаданные().Перечисление() Цикл
			
			СправочникБД 	= База.Метаданные().Перечисление(Инд);
			ИмяОбъекта 		= СправочникБД.Идентификатор;
			
			ОбновитьОписаниеОбъектаБД(База, "Перечисление", ИмяОбъекта, ТипБД,, Кэш)
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		Если ТипЗнч(База) = Тип("WSПрокси") Тогда
			РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьКэшМетаданныхWS(Кэш, База, "Enums", Ложь); 
		КонецЕсли;
		
		МассивСуществующих = Новый Массив;		
		МассивИмен = ПолучитьМассивИменОбъектовБД("Enums", База, Кэш);
		
		НачатьТранзакцию();
		
		Для Каждого ИмяОбъекта ИЗ МассивИмен Цикл

			ОбновитьОписаниеОбъектаБД(База, "Перечисление", ИмяОбъекта, ТипБД,,Кэш);
			МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
			
		КонецЦикла;
		
		МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
		МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
		// Обновление реквизита Отсутствует в конфигурации.
		ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.ПеречисленияБД");
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры //

Процедура ЗаполнитьСписокСправочниковБД(ТипБД, База = Неопределено, Кэш = Неопределено) Экспорт
	
	Если НЕ ПодключитьсяКИБ(ТипБД, База, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
		
		НачатьТранзакцию();
		
		Для Инд = 1 По База.Метаданные().Справочник() Цикл
			
			СправочникБД 	= База.Метаданные().Справочник(Инд);
			ИмяОбъекта 		= СправочникБД.Идентификатор;
			
			ОбновитьОписаниеОбъектаБД(База, "Справочник", ИмяОбъекта, ТипБД, Кэш);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		МассивСуществующих = Новый Массив;
		
		Если ТипЗнч(База) = Тип("WSПрокси") Тогда
			РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьКэшМетаданныхWS(Кэш, База, "Catalogs", Истина); 
		КонецЕсли;
			
		МассивИмен = ПолучитьМассивИменОбъектовБД("Catalogs", База, Кэш);
		
		НачатьТранзакцию();
		
		Для Каждого ИмяОбъекта ИЗ МассивИмен Цикл
						
			ОбновитьОписаниеОбъектаБД(База,"Справочник", ИмяОбъекта, ТипБД, Истина, Кэш);
			МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
			
		КонецЦикла;
		
		МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
		МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
		// Обновление реквизита Отсутствует в конфигурации.
		ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.СправочникиБД");
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры //

Процедура ЗаполнитьСписокПлановВидовХарактеристикБД(ТипБД, База = Неопределено, Кэш = Неопределено) Экспорт
	
	Если НЕ ПодключитьсяКИБ(ТипБД, База, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(База) = Тип("WSПрокси") Тогда
		РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьКэшМетаданныхWS(Кэш, База, "ChartsOfCharacteristicTypes", Истина); 
	КонецЕсли;
	
	МассивСуществующих = Новый Массив;	
	МассивИмен = ПолучитьМассивИменОбъектовБД("ChartsOfCharacteristicTypes", База, Кэш);

	НачатьТранзакцию();
		
	Для Каждого ИмяОбъекта ИЗ МассивИмен Цикл
		
		ОбновитьОписаниеОбъектаБД(База, "ПланВидовХарактеристик", ИмяОбъекта, ТипБД, Истина, Кэш);
		МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
		
	КонецЦикла;
	
	МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
	МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
	// Обновление реквизита Отсутствует в конфигурации.
	ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.ПланыВидовХарактеристикБД");
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры //

Процедура ЗаполнитьСписокРегистровБД(ТипБД, База = Неопределено, 
										РегистрыБухгалерии = Ложь, 
										РегистрыНакопления = Ложь,
										РегистрыСведений = Ложь,
										ЗаполнятьРеквизиты = Ложь,
										ОбновлятьПланыСчетов = Ложь,
										Кэш = Неопределено) Экспорт
										
	Если НЕ ПодключитьсяКИБ(ТипБД, База, Кэш) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 Тогда
		
		НачатьТранзакцию();
		
		Если РегистрыБухгалерии Тогда
			
			Для Инд = 1 По База.Метаданные().ПланСчетов() Цикл
				
				ТекПланСчетов 	= База.Метаданные().ПланСчетов(Инд);
				ИмяОбъекта 		= ТекПланСчетов.Идентификатор;
				
				ТекСправочник = Справочники.ПланыСчетовБД.НайтиПоНаименованию(ИмяОбъекта, Истина,, ТипБД);
				
				Если ЗначениеЗаполнено(ТекСправочник) Тогда
					
					Если НЕ ЗаполнятьРеквизиты Тогда
						
						Продолжить;
						
					Иначе
						
						ОбъектОписание = ТекСправочник.ПолучитьОбъект();
						
					КонецЕсли;		
					
				Иначе
					
					ОбъектОписание = Справочники.ПланыСчетовБД.СоздатьЭлемент();
					ОбъектОписание.Владелец = ТипБД;
					
				КонецЕсли;
				
				ЕстьИзменения = ОбъектОписание.ЭтоНовый();
				ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.Наименование, ИмяОбъекта, ЕстьИзменения);
				ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.Синоним, ТекПланСчетов.Представление(), 
					ЕстьИзменения);
				ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.ПланСчетовМетаданные,ИмяОбъекта,ЕстьИзменения, 
					ЕстьИзменения);
				
				Если ЗаполнятьРеквизиты Тогда
					
					ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
					
				КонецЕсли;
				
				Если ЕстьИзменения Тогда
					ОбъектОписание.Записать();
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если РегистрыНакопления Тогда
			
			Для Инд = 1 По База.Метаданные().Регистр() Цикл
				
				ТекРегистр	 	= База.Метаданные().Регистр(Инд);
				ИмяОбъекта 		= ТекРегистр.Идентификатор;
				
				ТекСправочник = Справочники.РегистрыНакопленияБД.НайтиПоНаименованию(ИмяОбъекта, Истина,, ТипБД);
				
				Если ЗначениеЗаполнено(ТекСправочник) Тогда
					
					Если НЕ ЗаполнятьРеквизиты Тогда
						
						Продолжить;
						
					Иначе
						
						ОбъектОписание = ТекСправочник.ПолучитьОбъект();
						
					КонецЕсли;		
					
				Иначе
					
					ОбъектОписание = Справочники.РегистрыНакопленияБД.СоздатьЭлемент();
					ОбъектОписание.Владелец=ТипБД;
					
				КонецЕсли;
				
				ЕстьИзменения = ОбъектОписание.ЭтоНовый();
				ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.Наименование, ИмяОбъекта, ЕстьИзменения);
				ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.Синоним, 
					ТекРегистр.Представление(), ЕстьИзменения);
				
				
				Если ЗаполнятьРеквизиты Тогда
					
					ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
					
				КонецЕсли;
				
				Если ЕстьИзменения Тогда
					ОбъектОписание.Записать();
				КонецЕсли;	
				
			КонецЦикла;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		
		// КЭШ WS
		Если ТипЗнч(База) = Тип("WSПрокси") Тогда		
			
			М = РаботаСОбъектамиМетаданныхВнутреннийУХ;
			ПараметрыЗаполнения = М.НовыеПараметрыЗаполненияКэшаМетаданныхWS();
			
			Если РегистрыБухгалерии Тогда
				М.ДобавитьПараметрЗаполненияКэшаМетаданныхWS(ПараметрыЗаполнения, "AccountingRegisters");
				М.ДобавитьПараметрЗаполненияКэшаМетаданныхWS(ПараметрыЗаполнения, "ChartsOfAccounts");
			КонецЕсли;
			
			Если РегистрыНакопления Тогда
				М.ДобавитьПараметрЗаполненияКэшаМетаданныхWS(ПараметрыЗаполнения, "AccumulationRegisters");
			КонецЕсли;
			
			Если РегистрыСведений Тогда
				М.ДобавитьПараметрЗаполненияКэшаМетаданныхWS(ПараметрыЗаполнения, "InformationRegisters");
			КонецЕсли;
			
			М.ЗаполнитьКэшМетаданныхWSПакетно(Кэш, База, ПараметрыЗаполнения);
		КонецЕсли;
		
		НачатьТранзакцию();

		Если РегистрыБухгалерии Тогда
			
			МассивСуществующих = Новый Массив;
			МассивПлановСчетов = Новый Массив;
			
			МассивРБ = ПолучитьМассивИменОбъектовБД("AccountingRegisters", База, Кэш);
			МассивПС = ПолучитьМассивИменОбъектовБД("ChartsOfAccounts", База, Кэш);
			
			Для Каждого ИмяОбъекта ИЗ МассивРБ Цикл
								
				ТекСправочник = Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию(ИмяОбъекта, Истина,, ТипБД);
				
				Если ЗначениеЗаполнено(ТекСправочник) Тогда
					
					Если НЕ ЗаполнятьРеквизиты Тогда
						
						Продолжить;
						
					Иначе
						
						ОбъектОписание=ТекСправочник.ПолучитьОбъект();
						
					КонецЕсли;		
					
				Иначе
					
					ОбъектОписание = Справочники.РегистрыБухгалтерииБД.СоздатьЭлемент();
					ОбъектОписание.Владелец = ТипБД;
					ОбъектОписание.Наименование = ИмяОбъекта;
					
				КонецЕсли;
				
				ЕстьИзменения = ОбъектОписание.ЭтоНовый();
				
				Если ЗаполнятьРеквизиты Тогда
					
					ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
					
				КонецЕсли;
				
				Если ЕстьИзменения Тогда
					ОбъектОписание.Записать();
				КонецЕсли;
				
				МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
				
			КонецЦикла;
			
			МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
			МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
			// Обновление реквизита Отсутствует в конфигурации.
			ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.РегистрыБухгалтерииБД");
			
			Если ОбновлятьПланыСчетов Тогда
				
				МассивСуществующих = Новый Массив;
				
				Для Каждого СтруктураОписания ИЗ МассивПС Цикл
					
					ИмяОбъекта=?(ЗначениеЗаполнено(СтруктураОписания.ПланСчетовБД),СтруктураОписания.ПланСчетовБД,СтруктураОписания.ПланСчетовМетаданные);
					
					Если МассивПлановСчетов.Найти(ИмяОбъекта)=Неопределено Тогда
						
						ТекСправочник = Справочники.ПланыСчетовБД.НайтиПоНаименованию(ИмяОбъекта,Истина,,ТипБД);
						
						Если ЗначениеЗаполнено(ТекСправочник) Тогда
							
							Если НЕ ЗаполнятьРеквизиты Тогда
								
								Продолжить;
								
							Иначе
								
								ОбъектОписание = ТекСправочник.ПолучитьОбъект();
								ОбъектОписание.ПланСчетовМетаданные=СтруктураОписания.ПланСчетовМетаданные;
								
							КонецЕсли;		
							
						Иначе
							
							ОбъектОписание = Справочники.ПланыСчетовБД.СоздатьЭлемент();
							ОбъектОписание.Владелец=ТипБД;
							ОбъектОписание.Наименование = ИмяОбъекта;
							ОбъектОписание.ПланСчетовМетаданные=СтруктураОписания.ПланСчетовМетаданные;
							
						КонецЕсли;
						
						ЕстьИзменения = ОбъектОписание.ЭтоНовый();
						
						Если ЗаполнятьРеквизиты Тогда
							
							ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
							
						КонецЕсли;
						
						Если ЕстьИзменения Тогда
							ОбъектОписание.Записать();
						КонецЕсли;	
						
					КонецЕсли;
					
					МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
					
				КонецЦикла;
				
				МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
				МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
				// Обновление реквизита Отсутствует в конфигурации.
				ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.ПланыСчетовБД");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если РегистрыНакопления Тогда
			
			МассивСуществующих = Новый Массив;	
			МассивРН = ПолучитьМассивИменОбъектовБД("AccumulationRegisters", База, Кэш);
	
			Для Каждого ИмяОбъекта ИЗ МассивРН Цикл
								
				ТекСправочник = Справочники.РегистрыНакопленияБД.НайтиПоНаименованию(ИмяОбъекта, Истина,, ТипБД);
				
				Если ЗначениеЗаполнено(ТекСправочник) Тогда
					
					Если НЕ ЗаполнятьРеквизиты Тогда
						
						Продолжить;
						
					Иначе
						
						ОбъектОписание = ТекСправочник.ПолучитьОбъект();
						
					КонецЕсли;		
					
				Иначе
					
					ОбъектОписание = Справочники.РегистрыНакопленияБД.СоздатьЭлемент();
					ОбъектОписание.Владелец=ТипБД;
					ОбъектОписание.Наименование=ИмяОбъекта;
					
				КонецЕсли;
				
				ЕстьИзменения = ОбъектОписание.ЭтоНовый();
				
				Если ЗаполнятьРеквизиты Тогда
					
					ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
					
				КонецЕсли;
				
				Если ЕстьИзменения Тогда
					ОбъектОписание.Записать();
				КонецЕсли;
				
				МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
				
			КонецЦикла;
			
			МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
			МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
			
			// Обновление реквизита Отсутствует в конфигурации.
			ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.РегистрыНакопленияБД");
			
		КонецЕсли;
		
		Если РегистрыСведений Тогда
			
			МассивСуществующих = Новый Массив;
			МассивРС = ПолучитьМассивИменОбъектовБД("InformationRegisters", База, Кэш);
	
			Для Каждого ИмяОбъекта ИЗ МассивРС Цикл
								
				ТекСправочник = Справочники.РегистрыСведенийБД.НайтиПоНаименованию(ИмяОбъекта, Истина,, ТипБД);
				
				Если ЗначениеЗаполнено(ТекСправочник) Тогда
					
					Если НЕ ЗаполнятьРеквизиты Тогда
						
						Продолжить;
						
					Иначе
						
						ОбъектОписание=ТекСправочник.ПолучитьОбъект();
						
					КонецЕсли;		
					
				Иначе
					
					ОбъектОписание = Справочники.РегистрыСведенийБД.СоздатьЭлемент();
					ОбъектОписание.Владелец = ТипБД;
					ОбъектОписание.Наименование = ИмяОбъекта;
					
				КонецЕсли;
								
				ЕстьИзменения = ОбъектОписание.ЭтоНовый();
				
				Если ЗаполнятьРеквизиты Тогда
					
					ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
					
				КонецЕсли;
				
				Если ЕстьИзменения Тогда
					ОбъектОписание.Записать();
				КонецЕсли;
				
				МассивСуществующих.Добавить(СокрЛП(ИмяОбъекта));
				
			КонецЦикла;
			
			МассивСуществующих = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСуществующих);
			МассивСуществующих = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивСуществующих);
			
			// Обновление реквизита Отсутствует в конфигурации.
			ОбновитьОтсутствующиеВКонфигурации(МассивСуществующих, ТипБД, "Справочник.РегистрыСведенийБД");
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();

	КонецЕсли;
		
КонецПроцедуры 

Функция ПодключитьсяКИБ(ТипБД, База, Кэш = Неопределено) Экспорт
		
	РаботаСОбъектамиМетаданныхУХ.ПроверитьКэшПередПодключениемКИБ(Кэш);
		
	Если Кэш = Неопределено Тогда
		Кэш = РаботаСОбъектамиМетаданныхУХ.НовыйКэшОбновленияМетаданных();
	КонецЕсли;

	Если НЕ ТипБД = Справочники.ТипыБазДанных.ТекущаяИБ Тогда
		
		Если База = Неопределено Тогда
			База = РаботаСОбъектамиМетаданныхУХ.ПодключениеИзКэша(Кэш);
		КонецЕсли;

		Если База = Неопределено Тогда
			База = ОбщегоНазначенияУХ.ПолучитьСоединениеСВИБПоУмолчанию(ТипБД, 1);
		КонецЕсли;
			
		Если База = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
	Иначе
		
		База = Обработки.РаботаСМетаданнымиУХ.Создать();
		
	КонецЕсли;
	
	РаботаСОбъектамиМетаданныхУХ.ИнициализироватьКэш(Кэш, База);
	
	Возврат Истина;
	
КонецФункции

Процедура ОбновитьОписаниеОбъектаБД(ТекСоединениеВИБ, ТипМетаДанных, ИмяОбъектаБД, Владелец, ОбновлятьТабличныеЧасти = Ложь, 
	Кэш = Неопределено) Экспорт
	
	Если ИмяОбъектаБД="" Тогда
		Возврат ;
	КонецЕсли;
	
	ВладелецДляПоиска = ?(ЗначениеЗаполнено(Владелец), Владелец, Справочники.ТипыБазДанных.ТекущаяИБ);
	ИзменитьСогласование = Ложь;
	
	Если ТипМетаДанных = "Справочник" Тогда
				
		ТекОписание = Справочники.СправочникиБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание = ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание = Справочники.СправочникиБД.СоздатьЭлемент();
			
		КонецЕсли;
		
		ДанныеОбъектаБД = Новый Структура("ТипОбъектаМетаданных,ИмяОбъектаМетаданных", "Catalogs", ИмяОбъектаБД);
		
		Если (НЕ ОбъектОписание.ПометкаУдаления) И (Метаданные.Справочники.Найти(ИмяОбъектаБД) <> неопределено) тогда
			ОбъектСогласуется = Метаданные.ОпределяемыеТипы.ОбъектыДляСогласования.Тип.СодержитТип(Тип("СправочникСсылка." + ИмяОбъектаБД));
			ИзменитьСогласование = (ОбъектОписание.Согласуется <> ОбъектСогласуется);
		КонецЕсли;
		
	ИначеЕсли ТипМетаДанных="ПланВидовХарактеристик" Тогда
				
		ТекОписание=Справочники.ПланыВидовХарактеристикБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.ПланыВидовХарактеристикБД.СоздатьЭлемент();
			
		КонецЕсли;
		
		ДанныеОбъектаБД=Новый Структура("ТипОбъектаМетаданных,ИмяОбъектаМетаданных","ChartsOfCharacteristicTypes",ИмяОбъектаБД);
		
	ИначеЕсли ТипМетаДанных="ПланСчетов" Тогда
				
		ТекОписание=Справочники.ПланыСчетовБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.ПланыСчетовБД.СоздатьЭлемент();
			
		КонецЕсли;
		
		ДанныеОбъектаБД=Новый Структура("ТипОбъектаМетаданных,ИмяОбъектаМетаданных","ChartsOfAccounts",ИмяОбъектаБД);
		
	ИначеЕсли ТипМетаДанных="РегистрБухгалтерии" Тогда
				
		ТекОписание=Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.РегистрыБухгалтерииБД.СоздатьЭлемент();
			
		КонецЕсли;
		
	ИначеЕсли ТипМетаДанных="РегистрНакопления" Тогда
				
		ТекОписание=Справочники.РегистрыНакопленияБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.РегистрыНакопленияБД.СоздатьЭлемент();
			
		КонецЕсли;
		
	ИначеЕсли ТипМетаДанных="РегистрСведений" Тогда
				
		ТекОписание=Справочники.РегистрыСведенийБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.РегистрыСведенийБД.СоздатьЭлемент();
			
		КонецЕсли;
				
	ИначеЕсли ТипМетаДанных="Документ" Тогда
			
		ТекОписание=Справочники.ДокументыБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.ДокументыБД.СоздатьЭлемент();
			
		КонецЕсли;
		
		ДанныеОбъектаБД=Новый Структура("ТипОбъектаМетаданных,ИмяОбъектаМетаданных","Documents",ИмяОбъектаБД);
		
		Если (НЕ ОбъектОписание.ПометкаУдаления) И (Метаданные.Документы.Найти(ИмяОбъектаБД) <> неопределено) тогда
			ОбъектСогласуется = Метаданные.ОпределяемыеТипы.ОбъектыДляСогласования.Тип.СодержитТип(Тип("ДокументСсылка." + ИмяОбъектаБД));
			ИзменитьСогласование = (ОбъектОписание.Согласуется <> ОбъектСогласуется);
		КонецЕсли;
		
	ИначеЕсли ТипМетаДанных="Перечисление" Тогда
			
		ТекОписание=Справочники.ПеречисленияБД.НайтиПоНаименованию(ИмяОбъектаБД,Истина,,ВладелецДляПоиска);
		
		Если ЗначениеЗаполнено(ТекОписание) Тогда
			
			ОбъектОписание=ТекОписание.ПолучитьОбъект();
			
		Иначе
			
			ОбъектОписание=Справочники.ПеречисленияБД.СоздатьЭлемент();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьИзменения = ОбъектОписание.ЭтоНовый();
	ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.Владелец, ВладелецДляПоиска, ЕстьИзменения);
	ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ОбъектОписание.Наименование, ИмяОбъектаБД, ЕстьИзменения);
	ЕстьИзменения = Макс(ЕстьИзменения, ИзменитьСогласование);
	
	ОбъектОписание.ТекСоединениеВИБ = ТекСоединениеВИБ;
	ОбъектОписание.ЗаполнитьРеквизитыОбъекта(Кэш, ЕстьИзменения);
	
	Если ЕстьИзменения Тогда
		ОбъектОписание.Записать();
	КонецЕсли;	
	
	Если ОбновлятьТабличныеЧасти Тогда
		
		ОбновитьОписаниеТабличнойЧастиБД(ТекСоединениеВИБ, ОбъектОписание.Ссылка, ДанныеОбъектаБД, 
			ВладелецДляПоиска.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77,
			Кэш);
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьОписаниеПланаСчетовВИБ()

// Обновляет ревизит ОтсутствуетВКонфигурации для справочника Справочник БД по данным
// МассивСуществующихВход для баз данных с типом ТипБдВход.
Процедура ОбновитьОтсутствующиеВКонфигурации(МассивСуществующихВход, ТипБдВход, ИмяСправочникаВход = "")
	// Получение исходных данных.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникиБД.Ссылка КАК Ссылка,
	|	СправочникиБД.ОтсутствуетВКонфигурации КАК ОтсутствуетВКонфигурации,
	|	СправочникиБД.Наименование КАК Наименование
	|ИЗ
	|	Справочник.СправочникиБД КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Владелец = &Владелец";
	Запрос.УстановитьПараметр("Владелец", ТипБдВход);
	Если СокрЛП(ИмяСправочникаВход) <> "" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.СправочникиБД", ИмяСправочникаВход);
	Иначе
		// Пустой параметр. По умолчанию используем справочники.
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		// Проверим отсутствие элемента в конфигурации.
		ТекНаименованиеСправочника = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТекСправочникаСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникНайден = (МассивСуществующихВход.Найти(ТекНаименованиеСправочника) <> Неопределено);
		ТекСправочникПрисутствует = НЕ ВыборкаДетальныеЗаписи.ОтсутствуетВКонфигурации;
		Если СправочникНайден <> ТекСправочникПрисутствует Тогда
			// Есть несоответствие данных. Обновим значения в элементах.
			Попытка
				СправочникОбъект = ТекСправочникаСсылка.ПолучитьОбъект();
				СправочникОбъект.ОтсутствуетВКонфигурации = НЕ СправочникНайден;
				СправочникОбъект.ОбменДанными.Загрузка=Истина;
				СправочникОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'При обновлении поля Отсутствует в конфигурации справочника ИБ %Справочник% возникли ошибки: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Справочник%", Строка(ТекСправочникаСсылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		Иначе
			// Не требуется обновление.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ОбновитьОтсутствующиеВКонфигурации()

Функция ПолучитьМассивИменОбъектовБД(ТипОбъектаМетаданных, ТекСоединениеВИБ, Кэш = Неопределено)
	
	Если ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьМассивИменОбъектовWS(ТипОбъектаМетаданных, ТекСоединениеВИБ,, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьМассивИменОбъектов8x(ТипОбъектаМетаданных,ТекСоединениеВИБ);
		
	КонецЕсли;
		
	
КонецФункции // ПолучитьМассивИменОбъектовБД()

Процедура ОбновитьОписаниеТабличнойЧастиБД(СоединениеВИБ, ВладелецТЧ, ДанныеВладельцаТЧ, Использование77 = Ложь, 
	Кэш = Неопределено) Экспорт
	
	МассивТЧ = ПолучитьМассивСтруктурТабличныхЧастей1С(СоединениеВИБ, ДанныеВладельцаТЧ, Использование77, Кэш);
	
	НачатьТранзакцию();
		
	Для Каждого ТЧ Из МассивТЧ Цикл
		
		ЕстьИзменения = Ложь;
		ТабличнаяЧастьСсылка = Справочники.ТабличныеЧастиБД.НайтиПоРеквизиту("Имя", ТЧ.Имя,, ВладелецТЧ);	
		Если ТабличнаяЧастьСсылка.Пустая() Тогда
			
			ТабличнаяЧастьОбъект = Справочники.ТабличныеЧастиБД.СоздатьЭлемент();
			ТабличнаяЧастьОбъект.Владелец = ВладелецТЧ;
			ТабличнаяЧастьОбъект.Имя = ТЧ.Имя;
			ТабличнаяЧастьОбъект.Наименование = ТЧ.Представление;
			ЕстьИзменения = Истина;
		Иначе		
			ТабличнаяЧастьОбъект = ТабличнаяЧастьСсылка.ПолучитьОбъект();
			ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ТабличнаяЧастьОбъект.ПометкаУдаления, Ложь, ЕстьИзменения);			
		КонецЕсли;
			
		ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ТабличнаяЧастьОбъект.Наименование, ТЧ.Представление, ЕстьИзменения);
		ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(ТабличнаяЧастьОбъект.Синоним, ТЧ.Представление, ЕстьИзменения);
		
		ТабНовыеРеквизиты = ТабличнаяЧастьОбъект.Реквизиты.ВыгрузитьКолонки();
		Для Каждого РеквизитТЧ Из ТЧ.Реквизиты Цикл
			
			НоваяСтрока = ТабНовыеРеквизиты.Добавить();
			НоваяСтрока.Имя = РеквизитТЧ.Имя;			
			НоваяСтрока.Синоним = РеквизитТЧ.Представление;
			НоваяСтрока.ТипДанных = РеквизитТЧ.Тип;
			НоваяСтрока.ОписаниеПримитивногоТипа = РеквизитТЧ.ОписаниеПримитивногоТипа;		
		КонецЦикла;
		
		РаботаСОбъектамиМетаданныхУХ.ЗагрузитьИзмененнуюТабЧасть(ТабличнаяЧастьОбъект.Реквизиты, ТабНовыеРеквизиты, ЕстьИзменения);
		
		Если ЕстьИзменения Тогда
			ТабличнаяЧастьОбъект.Записать();
		КонецЕсли;	
				
	КонецЦикла;
		
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ПолучитьМассивСтруктурТабличныхЧастей1С(ТекСоединениеВИБ, ДанныеОбъектаВладельцаТЧ, Использование77,
	Кэш = Неопределено) Экспорт
	
	ДанныеОбъектаВладельцаТЧ.Вставить("Tabular", Истина);
	
	Если Использование77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьМассивСтруктурТабличныхЧастей1CПредприятие77(ДанныеОбъектаВладельцаТЧ,
			ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьМассивСтруктурТабличныхЧастей1CПредприятиеWS(ДанныеОбъектаВладельцаТЧ,
			ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьМассивСтруктурТабличныхЧастей1CПредприятие8х(
			ДанныеОбъектаВладельцаТЧ, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьШаблонСтруктурыОписанияОбъектаБД(ТипОбъектаМетаДанных) Экспорт
	
	СтруктураОписание = Новый Структура("ТипОбъектаМетаДанных",ТипОбъектаМетаДанных);
	
	Если ТипОбъектаМетаДанных = "Catalogs" Тогда
		
		СтруктураОписание.Вставить("Синоним");
		СтруктураОписание.Вставить("ИерархическийСправочник");
		СтруктураОписание.Вставить("ВидИерархии");
							
		ОбъектОписание = Справочники.СправочникиБД.СоздатьЭлемент();
		
		ТабРеквизиты = ОбъектОписание.Реквизиты.ВыгрузитьКолонки();
		ТабРеквизиты.Колонки.Удалить("Использование");
		ТабРеквизиты.Колонки.Добавить("Использование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
				
		СтруктураОписание.Вставить("Реквизиты",ТабРеквизиты);
		СтруктураОписание.Вставить("Владельцы",ОбъектОписание.Владельцы.ВыгрузитьКолонки());
								
	ИначеЕсли ТипОбъектаМетаДанных = "ChartsOfCharacteristicTypes" Тогда
			
		ОбъектОписание = Справочники.ПланыВидовХарактеристикБД.СоздатьЭлемент();
		
		СтруктураОписание.Вставить("Синоним");
		СтруктураОписание.Вставить("ИерархическийСправочник");
		СтруктураОписание.Вставить("ТипЗначения");

		ТабРеквизиты = ОбъектОписание.Реквизиты.ВыгрузитьКолонки();
		ТабРеквизиты.Колонки.Удалить("Использование");
		ТабРеквизиты.Колонки.Добавить("Использование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
				
		СтруктураОписание.Вставить("Реквизиты",ТабРеквизиты);
					
	ИначеЕсли ТипОбъектаМетаДанных = "ChartsOfAccounts" Тогда
						
		СтруктураОписание.Вставить("МаксимальноеКоличествоСубконто");
		СтруктураОписание.Вставить("ПризнакиУчета");
		СтруктураОписание.Вставить("ПризнакиУчетаСубконто");
		СтруктураОписание.Вставить("ПланСчетовМетаданные");
		СтруктураОписание.Вставить("ДлинаКода");
		СтруктураОписание.Вставить("ВидыСубконто");
		
		ОбъектОписание = Справочники.ПланыСчетовБД.СоздатьЭлемент();
		СтруктураОписание.Вставить("Реквизиты",	ОбъектОписание.Реквизиты.ВыгрузитьКолонки());
			
		мОписаниеТиповСтрока = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150);
		мОписаниеТиповБулево = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
		
		мПланСчетов = Новый ТаблицаЗначений;
		мПланСчетов.Колонки.Добавить("Код", 						мОписаниеТиповСтрока);
		мПланСчетов.Колонки.Добавить("Наименование", 				мОписаниеТиповСтрока);
		мПланСчетов.Колонки.Добавить("Родитель", 					мОписаниеТиповСтрока);
		мПланСчетов.Колонки.Добавить("Забалансовый", 				мОписаниеТиповБулево);
		мПланСчетов.Колонки.Добавить("ПересчитыватьВалютнуюСумму", 	мОписаниеТиповБулево);
		мПланСчетов.Колонки.Добавить("ПометкаУдаления", 			мОписаниеТиповБулево);
		мПланСчетов.Колонки.Добавить("ЗапретитьИспользоватьВПроводках");
		мПланСчетов.Колонки.Добавить("РодительЗапретитьИспользоватьВПроводках");
		мПланСчетов.Колонки.Добавить("Вид", 						);
		мПланСчетов.Колонки.Добавить("ВидСтрока", 					);
		мПланСчетов.Колонки.Добавить("СчетСсылка");
		мПланСчетов.Колонки.Добавить("СчетИсточник");
		мПланСчетов.Колонки.Добавить("РодительСсылка");
		мПланСчетов.Колонки.Добавить("РазделПланаСчетов");
		мПланСчетов.Колонки.Добавить("ВидОтложенногоНалога");
		мПланСчетов.Колонки.Добавить("ВидКурса");
		мПланСчетов.Колонки.Добавить("ПризнакиУчета");
		мПланСчетов.Колонки.Добавить("ВидыСубконто");
		мПланСчетов.Колонки.Добавить("Наименование1");
		мПланСчетов.Колонки.Добавить("Наименование2");
		
		СтруктураОписание.Вставить("мПланСчетов",		мПланСчетов);
		
		ТаблицаСубконто = Новый ТаблицаЗначений;
		ТаблицаСубконто.Колонки.Добавить("Номер");
		ТаблицаСубконто.Колонки.Добавить("ВидСубконто");
		ТаблицаСубконто.Колонки.Добавить("ВидСубконтоСсылка");
		ТаблицаСубконто.Колонки.Добавить("ТолькоОбороты");
		ТаблицаСубконто.Колонки.Добавить("ТолькоСальдо");
		ТаблицаСубконто.Колонки.Добавить("ПризнакиУчетаСубконто");
		ТаблицаСубконто.Колонки.Добавить("ТипДанных");
		
		СтруктураОписание.Вставить("ТаблицаСубконто",	ТаблицаСубконто);
	
	ИначеЕсли ТипОбъектаМетаДанных="AccountingRegisters" Тогда
		
		СтруктураОписание.Вставить("Синоним");
		СтруктураОписание.Вставить("Корреспонденция");
		СтруктураОписание.Вставить("Регистраторы");
					
		ОбъектОписание = Справочники.РегистрыБухгалтерииБД.СоздатьЭлемент();
		СтруктураОписание.Вставить("Измерения",	ОбъектОписание.Измерения.ВыгрузитьКолонки());
		СтруктураОписание.Вставить("Ресурсы",	ОбъектОписание.Ресурсы.ВыгрузитьКолонки());
		СтруктураОписание.Вставить("Реквизиты",	ОбъектОписание.Реквизиты.ВыгрузитьКолонки());

	ИначеЕсли ТипОбъектаМетаДанных="AccumulationRegisters" Тогда
		
		СтруктураОписание.Вставить("Синоним");
		СтруктураОписание.Вставить("ВидРегистра");
		СтруктураОписание.Вставить("Регистраторы");
			
		ОбъектОписание = Справочники.РегистрыНакопленияБД.СоздатьЭлемент();
		СтруктураОписание.Вставить("Измерения",	ОбъектОписание.Измерения.ВыгрузитьКолонки());
		СтруктураОписание.Вставить("Ресурсы",	ОбъектОписание.Ресурсы.ВыгрузитьКолонки());
		СтруктураОписание.Вставить("Реквизиты",	ОбъектОписание.Реквизиты.ВыгрузитьКолонки());
		
	ИначеЕсли ТипОбъектаМетаДанных = "InformationRegisters" Тогда
		
		СтруктураОписание.Вставить("Синоним");
		СтруктураОписание.Вставить("Периодический");
		СтруктураОписание.Вставить("Периодичность");
		СтруктураОписание.Вставить("Регистраторы");
		
		ОбъектОписание = Справочники.РегистрыСведенийБД.СоздатьЭлемент();
		СтруктураОписание.Вставить("Измерения",	ОбъектОписание.Измерения.ВыгрузитьКолонки());
		СтруктураОписание.Вставить("Ресурсы",	ОбъектОписание.Ресурсы.ВыгрузитьКолонки());
		СтруктураОписание.Вставить("Реквизиты",	ОбъектОписание.Реквизиты.ВыгрузитьКолонки());
					
	ИначеЕсли ТипОбъектаМетаДанных = "Documents" Тогда
		
		СтруктураОписание.Вставить("Синоним");
		
		ОбъектОписание = Справочники.ДокументыБД.СоздатьЭлемент();
		СтруктураОписание.Вставить("Реквизиты", ОбъектОписание.Реквизиты.ВыгрузитьКолонки());
				
	ИначеЕсли ТипОбъектаМетаДанных="Enums" Тогда
			
		ОбъектОписание = Справочники.ПеречисленияБД.СоздатьЭлемент();
		
		СтруктураОписание.Вставить("Синоним");
		СтруктураОписание.Вставить("Реквизиты",	ОбъектОписание.Реквизиты.ВыгрузитьКолонки());
			
	КонецЕсли;
	
	Возврат СтруктураОписание; 
	
КонецФункции // ПолучитьШаблонСтруктурыОписанияОбъектаБД()

Функция ПолучитьСтруктуруОписанияСправочникаБД(ИмяСправочника, ТекСоединениеВИБ, Используется77, Кэш) Экспорт
	
	ШаблонОписания = ПолучитьШаблонСтруктурыОписанияОбъектаБД("Catalogs");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных",	ИмяСправочника);

	Если Используется77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияСправочника77(ШаблонОписания,ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияСправочникаWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияСправочника8х(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияСправочникаБД()

Функция ПолучитьСтруктуруОписанияДокументаБД(ИмяДокумента, ТекСоединениеВИБ, Используется77, Кэш = Неопределено) Экспорт
	
	ШаблонОписания=ПолучитьШаблонСтруктурыОписанияОбъектаБД("Documents");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных", ИмяДокумента);
	
	Если Используется77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияДокумента77(ШаблонОписания,ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияДокументаWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияДокумента8х(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияСправочникаБД()

Функция ПолучитьСтруктуруОписанияПланаВидовХарактеристикБД(ИмяПланаВидовХарактеристик, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
	
	ШаблонОписания=ПолучитьШаблонСтруктурыОписанияОбъектаБД("ChartsOfCharacteristicTypes");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных", ИмяПланаВидовХарактеристик);
	
	Если ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияПланаВидовХарактеристикWS(
			ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияПланаВидовХарактеристик8х(
			ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияСправочникаБД()

Функция ПолучитьСтруктуруОписанияПеречисленияБД(ИмяПеречисления, ТекСоединениеВИБ, Используется77, Кэш = Неопределено) Экспорт
	
	ШаблонОписания = ПолучитьШаблонСтруктурыОписанияОбъектаБД("Enums");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных",ИмяПеречисления);
	
	Если Используется77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияПеречисления77(ШаблонОписания, ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияПеречисленияWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияПеречисления8х(ШаблонОписания,ТекСоединениеВИБ);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияПеречисленияБД()

Функция ПолучитьСтруктуруОписанияРегистраНакопленияБД(ИмяРегистраНакопления, ТекСоединениеВИБ, Используется77,
	Кэш = Неопределено) Экспорт
	
	ШаблонОписания = ПолучитьШаблонСтруктурыОписанияОбъектаБД("AccumulationRegisters");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных", ИмяРегистраНакопления);
	
	Если Используется77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияРегистраНакопления77(ШаблонОписания, ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияРегистраНакопленияWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияРегистраНакопления8х(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияРегистраНакопленияБД()

Функция ПолучитьСтруктуруОписанияРегистраБухгалтерииБД(ИмяРегистраБухгалтерии, ТекСоединениеВИБ, Используется77,
	Кэш = Неопределено) Экспорт
	
	ШаблонОписания = ПолучитьШаблонСтруктурыОписанияОбъектаБД("AccountingRegisters");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных", ИмяРегистраБухгалтерии);
	
	Если Используется77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияРегистраБухгалтерии77(ШаблонОписания, ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияРегистраБухгалтерииWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияРегистраБухгалтерии8х(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияРегистраБухгалтерииБД()

Функция ПолучитьСтруктуруОписанияПланаСчетовБД(ПланСчетовНаименование,ПланСчетовМетаданные, ТекСоединениеВИБ, Используется77, 
	СчетБД = Неопределено, Кэш = Неопределено) Экспорт
	
	ШаблонОписания=ПолучитьШаблонСтруктурыОписанияОбъектаБД("ChartsOfAccounts");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных", 	ПланСчетовМетаданные);
	ШаблонОписания.Вставить("ПланСчетовНаименование", 	ПланСчетовНаименование);
	ШаблонОписания.Вставить("ТекущаяИБ", (ТипЗнч(ТекСоединениеВИБ) = Тип("ОбработкаОбъект.РаботаСМетаданнымиУХ")));
		
	Если Используется77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияПланаСчетов77(ШаблонОписания, ТекСоединениеВИБ);
		
	ИначеЕсли ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияПланаСчетовWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияПланаСчетов8х(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияПланаСчетовБД()

Функция ПолучитьСтруктуруОписанияРегистраСведенийБД(ИмяРегистраСведений, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
	
	ШаблонОписания=ПолучитьШаблонСтруктурыОписанияОбъектаБД("InformationRegisters");
	ШаблонОписания.Вставить("ИмяОбъектаМетаданных", ИмяРегистраСведений);
	
	Если ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.СтруктураОписанияРегистраСведенийWS(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.СтруктураОписанияРегистраСведений8х(ШаблонОписания, ТекСоединениеВИБ, Кэш);
		
	КонецЕсли;		
	
КонецФункции // ПолучитьСтруктуруОписанияРегистраСведенийБД()
 
Процедура ЗаполнитьИзмененныеРеквизиты(Объект, ЗначенияРеквизитов, ИсключаемыеСвойства, ЕстьИзменения) Экспорт
	
	Если ЕстьИзменения Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов,, ИсключаемыеСвойства);
		Возврат;
	КонецЕсли;		
	
	ИменаРеквизитов = ОбщегоНазначенияУХ.ИменаРеквизитовОбъекта(Объект.Метаданные());
	ИменаОбщихРеквизитов = Новый Массив;
	ИменаОбщихСвойств = Новый Массив;	
	МассивИсключаемыхСвойств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		ИсключаемыеСвойства, ",",, Истина);
	
	Для каждого Элемент Из ЗначенияРеквизитов Цикл
		ИмяСвойства = Элемент.Ключ; 
		Если МассивИсключаемыхСвойств.Найти(ИмяСвойства) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаРеквизитов.Найти(ИмяСвойства) <> Неопределено Тогда
			ИменаОбщихРеквизитов.Добавить(Элемент.Ключ);
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяСвойства) Тогда
			ИменаОбщихСвойств.Добавить(ИмяСвойства); 		 
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСерверУХ.ЗаполнитьЗначенияОтличающихсяСвойств(Объект, ЗначенияРеквизитов, ИменаОбщихРеквизитов,, 
		ЕстьИзменения);
	
	Если ЗначениеЗаполнено(ИменаОбщихСвойств) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, СтрСоединить(ИменаОбщихСвойств, ","));
	КонецЕсли;	

КонецПроцедуры

Процедура ЗагрузитьИзмененнуюТабЧасть(ТабЧасть, ТаблицаНовыхЗначений, ЕстьИзменения) Экспорт
	
	Если НЕ ЕстьИзменения Тогда		
		ЕстьИзменения = ИзменитсяТабличнаяЧастьПриЗагрузкеДанных(ТабЧасть, ТаблицаНовыхЗначений);
	КонецЕсли;

	Если ЕстьИзменения Тогда
		ТабЧасть.Загрузить(ТаблицаНовыхЗначений);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ЗаполнитьДеревоРС(Объект,СвязанныеРегистрыСведений) Экспорт 
	
	СвязанныеРегистрыСведений.ПолучитьЭлементы().Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СправочникиБДСвязанныеРегистрыСведений.РегистрСведений КАК РегистрСведенийБД,
	|	СправочникиБДСвязанныеРегистрыСведений.ИзмененияСогласуются КАК ИзмененияСогласуются,
	|	СправочникиБДСвязанныеРегистрыСведений.ИмяИзмерения КАК ИмяИзмерения
	|ПОМЕСТИТЬ СвязанныеРегистры
	|ИЗ
	|	Справочник.СправочникиБД.СвязанныеРегистрыСведений КАК СправочникиБДСвязанныеРегистрыСведений
	|ГДЕ
	|	СправочникиБДСвязанныеРегистрыСведений.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистрыСведенийБД.Наименование КАК Имя,
	|	РегистрыСведенийБД.Синоним КАК Синоним,
	|	РегистрыСведенийБД.Ресурсы.(
	|		Имя КАК Имя,
	|		Синоним КАК Синоним,
	|		ТипДанных КАК ТипДанных
	|	) КАК Ресурсы,
	|	РегистрыСведенийБД.Измерения.(
	|		Имя КАК Имя,
	|		Синоним КАК Синоним,
	|		ТипДанных КАК ТипДанных
	|	) КАК Измерения,
	|	РегистрыСведенийБД.Реквизиты.(
	|		Имя КАК Имя,
	|		Синоним КАК Синоним,
	|		ТипДанных КАК ТипДанных
	|	) КАК Реквизиты,
	|	СвязанныеРегистры.ИзмененияСогласуются КАК ИзмененияСогласуются,
	|	СвязанныеРегистры.ИмяИзмерения КАК ИмяИзмерения,
	|	СвязанныеРегистры.РегистрСведенийБД КАК Ссылка
	|ИЗ
	|	СвязанныеРегистры КАК СвязанныеРегистры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РегистрыСведенийБД КАК РегистрыСведенийБД
	|		ПО СвязанныеРегистры.РегистрСведенийБД = РегистрыСведенийБД.Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаРС=СвязанныеРегистрыСведений.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРС,Результат);
		
		ИзмеренияРС=Результат.Измерения.Выбрать();
		
		Пока ИзмеренияРС.Следующий() Цикл
			
			СтрокаИзмерение=СтрокаРС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаИзмерение,ИзмеренияРС);
			СтрокаИзмерение.ТипПоля="Измерение";
			
		КонецЦикла;
		
		РесурсыРС=Результат.Ресурсы.Выбрать();
		
		Пока РесурсыРС.Следующий() Цикл
			
			СтрокаРесурс=СтрокаРС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРесурс,РесурсыРС);
			СтрокаРесурс.ТипПоля="Ресурс";
			
		КонецЦикла;
		
		РеквизитыРС=Результат.Реквизиты.Выбрать();
		
		Пока РеквизитыРС.Следующий() Цикл
			
			СтрокаРеквизит=СтрокаРС.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизит,РеквизитыРС);
			СтрокаРеквизит.ТипПоля="Реквизит";
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоРС()

Процедура ЗаполнитьДеревоТЧ(Объект,ТабличныеЧасти) Экспорт 
	
	ТабличныеЧасти.ПолучитьЭлементы().Очистить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Контролируемый",Объект.Ссылка) Тогда
		
		ЗаполнитьДеревоТЧ_Контролируемый(Объект,ТабличныеЧасти);
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		             |	ТабличныеЧастиБД.Имя КАК Имя,
		             |	ТабличныеЧастиБД.Синоним КАК Синоним,
		             |	ТабличныеЧастиБД.Реквизиты.(
		             |		Синоним КАК Синоним,
		             |		ТипДанных КАК ТипДанных,
		             |		Имя КАК Имя
		             |	) КАК Реквизиты,
		             |	ТабличныеЧастиБД.Ссылка КАК Ссылка
		             |ИЗ
		             |	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
		             |ГДЕ
		             |	ТабличныеЧастиБД.Владелец = &Владелец
		             |	И НЕ ТабличныеЧастиБД.ПометкаУдаления
		             |	И НЕ ТабличныеЧастиБД.Имя = ""ДополнительныеРеквизиты""";
		
		Запрос.УстановитьПараметр("Владелец",Объект.Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СтрокаТЧ=ТабличныеЧасти.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТЧ,Результат);
			
			РеквизитыТЧ=Результат.Реквизиты.Выбрать();
			
			Пока РеквизитыТЧ.Следующий() Цикл
				
				СтрокаРеквизит=СтрокаТЧ.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизит,РеквизитыТЧ);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоТЧ()

// не должно быть одинаковых строк в таблице иначе алгоритм будет неправильно работать
Функция ИзменитсяТабличнаяЧастьПриЗагрузкеДанных(ТабЧасть, ТаблицаНовыхЗначений) Экспорт
	
	Если ТабЧасть.Количество() <> ТаблицаНовыхЗначений.Количество() Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Если ТаблицаНовыхЗначений.Количество() = 0 Тогда
		Возврат Ложь
	КонецЕсли;
	
	КолонкиТабЧасти = ТабЧасть.ВыгрузитьКолонки().Колонки;
		
	// сформируем строку индекса для оптимизации поиска по таблице значений
	СтрокаИндекса = "";
	СтруктураПоиска = Новый Структура;
	Для каждого Колонка Из ТаблицаНовыхЗначений.Колонки Цикл
		Если Колонка.Имя <> "НомерСтроки" И Колонка.Имя <> "LineNumber"
			И КолонкиТабЧасти.Найти(Колонка.Имя) <> Неопределено Тогда
			
			СтрокаИндекса = СтрокаИндекса + "," + Колонка.Имя;
			СтруктураПоиска.Вставить(Колонка.Имя);
		КонецЕсли;	
	КонецЦикла;
	
	Если СтруктураПоиска.Количество() = 0 Тогда
		// нет общих колонок
		Возврат Истина;
	КонецЕсли;
	
	СтрокаИндекса = Сред(СтрокаИндекса, 2);
	
	// добавим индекс
	ТаблицаНовыхЗначений.Индексы.Добавить(СтрокаИндекса);
			
	// Проверим записи
	Для каждого СтрокаТЧ Из ТабЧасть Цикл	
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТЧ);
		СтрокиНовыхЗначений = ТаблицаНовыхЗначений.НайтиСтроки(СтруктураПоиска);
		Если СтрокиНовыхЗначений.Количество() <> 1 Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла;
		
	Возврат Ложь;
	
КонецФункции // ИзменитсяТабличнаяЧастьПриЗагрузкеДанных


Процедура ЗаполнитьДеревоТЧ_Контролируемый(Объект,ТабличныеЧасти) 
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СогласуемыеТЧ.ОписаниеТЧ КАК ОписаниеТЧ
	|ПОМЕСТИТЬ СогласуемыеТЧ
	|ИЗ
	|	Справочник.СправочникиБД.СогласуемыеТЧ КАК СогласуемыеТЧ
	|ГДЕ
	|	СогласуемыеТЧ.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧастиБД.Имя КАК Имя,
	|	ТабличныеЧастиБД.Синоним КАК Синоним,
	|	ТабличныеЧастиБД.Реквизиты.(
	|		Синоним КАК Синоним,
	|		ТипДанных КАК ТипДанных,
	|		Имя КАК Имя
	|	) КАК Реквизиты,
	|	ТабличныеЧастиБД.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА СогласуемыеТЧ.ОписаниеТЧ ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ИзмененияСогласуются
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ СогласуемыеТЧ КАК СогласуемыеТЧ
	|		ПО ТабличныеЧастиБД.Ссылка = СогласуемыеТЧ.ОписаниеТЧ
	|ГДЕ
	|	ТабличныеЧастиБД.Владелец = &Ссылка
	|	И НЕ ТабличныеЧастиБД.ПометкаУдаления
	|	И НЕ ТабличныеЧастиБД.Имя = ""ДополнительныеРеквизиты""";
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СтрокаТЧ=ТабличныеЧасти.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ,Результат);
		
		РеквизитыТЧ=Результат.Реквизиты.Выбрать();
		
		Пока РеквизитыТЧ.Следующий() Цикл
			
			СтрокаРеквизит=СтрокаТЧ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРеквизит,РеквизитыТЧ);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДеревоТЧ_Контролируемый()



#КонецОбласти


