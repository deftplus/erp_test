
#Область ПрограммныйИнтерфейс

Процедура ДоговорКонтрагентаПриИзменении(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ЗаполнитьАналитикиПланированияПоДоговору(Объект.Договор, Объект);
	АналитикиПланированияДокументовКлиентСервер.ЗаполнитьЗаголовокДекорации(Форма); 
	
КонецПроцедуры

Процедура ЗаполнитьАналитикиПланированияПоДоговору(Договор, Объект) Экспорт
	
	ИменаРеквизитов = Новый Структура;
	
	// Реквизиты платежа
	ИменаРеквизитов.Вставить("БанковскийСчетКонтрагента",		"БанковскийСчетКонтрагента");
	ИменаРеквизитов.Вставить("БанковскийСчетОрганизации",		"БанковскийСчет");
	
	ИменаРеквизитов.Вставить("ФиксированныйСчетКонтрагента",	"ФиксированныйСчетКонтрагента");
	ИменаРеквизитов.Вставить("ФиксированныйСчетОрганизации",	"ФиксированныйСчетОрганизации");
	
	ИменаРеквизитов.Вставить("ПриоритетПлатежа",				"ПриоритетПлатежа");
	
	// Курс
	ИменаРеквизитов.Вставить("СпособОпределенияКурсаПлатежа",	"СпособОпределенияКурсаПлатежа");
	ИменаРеквизитов.Вставить("ДатаФиксацииКурсаПлатежа",		"ДатаФиксацииКурсаПлатежа");
	ИменаРеквизитов.Вставить("СдвигДатыФиксацииКурсаПлатежа",	"СдвигДатыФиксацииКурсаПлатежа");
	ИменаРеквизитов.Вставить("КурсПлатежаНеБолее",				"КурсПлатежаНеБолее");
	ИменаРеквизитов.Вставить("КурсПлатежаНеМенее",				"КурсПлатежаНеМенее");
	ИменаРеквизитов.Вставить("КурсПлатежаНеМенееВВалютеОплаты",	"КурсПлатежаНеМенееВВалютеОплаты");
	ИменаРеквизитов.Вставить("КурсПлатежаНеБолееВВалютеОплаты",	"КурсПлатежаНеБолееВВалютеОплаты");
	
	ИменаРеквизитовКурса = 
		"СпособОпределенияКурсаПлатежа, ДатаФиксацииКурсаПлатежа, СдвигДатыФиксацииКурсаПлатежа, "
		+ "КурсПлатежаНеБолее, КурсПлатежаНеМенее, КурсПлатежаНеМенееВВалютеОплаты, КурсПлатежаНеБолееВВалютеОплаты";
	
	//
	ИменаРеквизитов.Вставить("РежимИспользованияГрафика",		"ВерсияСоглашения.РежимИспользованияГрафика");
	
	// Аналитики планирования
	ИменаРеквизитов.Вставить("ДокументРезервирования",			"ВерсияСоглашения.ИсточникЛимитовБДДС");
	ИменаРеквизитов.Вставить("ЦФО",								"ВерсияСоглашения.ОсновнойЦФО");
	ИменаРеквизитов.Вставить("Проект",							"ВерсияСоглашения.ОсновнойПроект");
	ИменаРеквизитов.Вставить("СтатьяБюджетаОплата",				"ВерсияСоглашения.СтатьяДвиженияДенежныхСредств");
	ИменаРеквизитов.Вставить("Аналитика1Оплата",				"ВерсияСоглашения.АналитикаБДДС1");
	ИменаРеквизитов.Вставить("Аналитика2Оплата",				"ВерсияСоглашения.АналитикаБДДС2");
	ИменаРеквизитов.Вставить("Аналитика3Оплата",				"ВерсияСоглашения.АналитикаБДДС3");
	ИменаРеквизитов.Вставить("Аналитика4Оплата",				"ВерсияСоглашения.АналитикаБДДС4");
	ИменаРеквизитов.Вставить("Аналитика5Оплата",				"ВерсияСоглашения.АналитикаБДДС5");
	ИменаРеквизитов.Вставить("Аналитика6Оплата",				"ВерсияСоглашения.АналитикаБДДС6");
	ИменаРеквизитов.Вставить("ДокументРезервированияИсполнение","ВерсияСоглашения.ИсточникЛимитовИсполнение");
	ИменаРеквизитов.Вставить("СтатьяБюджетаИсполнение",			"ВерсияСоглашения.ОсновнаяСтатьяИсполнение");
	ИменаРеквизитов.Вставить("Аналитика1Исполнение",			"ВерсияСоглашения.АналитикаИсполнение1");
	ИменаРеквизитов.Вставить("Аналитика2Исполнение",			"ВерсияСоглашения.АналитикаИсполнение2");
	ИменаРеквизитов.Вставить("Аналитика3Исполнение",			"ВерсияСоглашения.АналитикаИсполнение3");
	ИменаРеквизитов.Вставить("Аналитика4Исполнение",			"ВерсияСоглашения.АналитикаИсполнение4");
	ИменаРеквизитов.Вставить("Аналитика5Исполнение",			"ВерсияСоглашения.АналитикаИсполнение5");
	ИменаРеквизитов.Вставить("Аналитика6Исполнение",			"ВерсияСоглашения.АналитикаИсполнение6");
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ИменаРеквизитов);
	
	//
	Объект.РежимИспользованияГрафика = ЗначенияРеквизитов.РежимИспользованияГрафика;
	
	// Банковский счет контрагента
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БанковскийСчетКонтрагента") Тогда
		Объект.БанковскийСчетКонтрагента = ЗначенияРеквизитов.БанковскийСчетКонтрагента;
	КонецЕсли;
	
	// Банковский счет организации
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БанковскийСчетОрганизации") Тогда
		Объект.БанковскийСчетОрганизации = ЗначенияРеквизитов.БанковскийСчетОрганизации;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "БанковскийСчет") Тогда
		Объект.БанковскийСчет = ЗначенияРеквизитов.БанковскийСчетОрганизации;
	КонецЕсли;
	
	Объект.ФиксированныйСчетКонтрагента = ЗначенияРеквизитов.ФиксированныйСчетКонтрагента;
	Объект.ФиксированныйСчетОрганизации = ЗначенияРеквизитов.ФиксированныйСчетОрганизации;
	Объект.ПриоритетПлатежа = ЗначенияРеквизитов.ПриоритетПлатежа;
	
	// Реквизиты курса
	ЗаполнитьЗначенияСвойств(Объект, ЗначенияРеквизитов, ИменаРеквизитовКурса);
	
	//
	Объект.АналитикиПланирования.Очистить();
	
	// Оплата
	Строка = Объект.АналитикиПланирования.Добавить();
	Строка.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств;
	Строка.ДокументРезервирования = ЗначенияРеквизитов.ДокументРезервирования;
	Строка.ЦФО = ЗначенияРеквизитов.ЦФО;
	Строка.Проект = ЗначенияРеквизитов.Проект;
	Строка.СтатьяБюджета = ЗначенияРеквизитов.СтатьяБюджетаОплата;
	Строка.Аналитика1 = ЗначенияРеквизитов.Аналитика1Оплата;
	Строка.Аналитика2 = ЗначенияРеквизитов.Аналитика2Оплата;
	Строка.Аналитика3 = ЗначенияРеквизитов.Аналитика3Оплата;
	Строка.Аналитика4 = ЗначенияРеквизитов.Аналитика4Оплата;
	Строка.Аналитика5 = ЗначенияРеквизитов.Аналитика5Оплата;
	Строка.Аналитика6 = ЗначенияРеквизитов.Аналитика6Оплата;
	
	// Исполнение
	Строка = Объект.АналитикиПланирования.Добавить();
	Если ТипЗнч(ЗначенияРеквизитов.СтатьяБюджетаИсполнение) = Тип("СправочникСсылка.СтатьиДвиженияРесурсов") Тогда
		Строка.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов;
	Иначе
		Строка.ВидБюджета = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов;
	КонецЕсли;
	
	Строка.ДокументРезервирования = ЗначенияРеквизитов.ДокументРезервированияИсполнение;
	Строка.ЦФО = ЗначенияРеквизитов.ЦФО;
	Строка.Проект = ЗначенияРеквизитов.Проект;
	Строка.СтатьяБюджета = ЗначенияРеквизитов.СтатьяБюджетаИсполнение;
	Строка.Аналитика1 = ЗначенияРеквизитов.Аналитика1Исполнение;
	Строка.Аналитика2 = ЗначенияРеквизитов.Аналитика2Исполнение;
	Строка.Аналитика3 = ЗначенияРеквизитов.Аналитика3Исполнение;
	Строка.Аналитика4 = ЗначенияРеквизитов.Аналитика4Исполнение;
	Строка.Аналитика5 = ЗначенияРеквизитов.Аналитика5Исполнение;
	Строка.Аналитика6 = ЗначенияРеквизитов.Аналитика6Исполнение;
	
КонецПроцедуры

#Область МодификацияОбщихФормЭтапыОплаты

Процедура ОбщаяФормаЭтапыОплаты_ПриСозданииНаСервере(Форма) Экспорт
	
	СоздатьРеквизитыФормыЭтапыОплаты(Форма);
	
	Форма.ДолжныФормироватьсяПозиции = Форма.Параметры.ДолжныФормироватьсяПозиции;
	
	Если Форма.ДолжныФормироватьсяПозиции Тогда
		СоздатьЭлементыФормыЭтапыОплаты(Форма);
		
		Если Форма.ИмяФормы = "ОбщаяФорма.ЭтапыОплатыПоставщику" Тогда
			УстановитьУсловноеОформлениеЭтаповОплатыПоставщику(Форма);
		ИначеЕсли Форма.ИмяФормы = "ОбщаяФорма.ЭтапыОплатыКлиентом" Тогда
			УстановитьУсловноеОформлениеЭтаповОплатыКлиентом(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбщаяФормаЭтапыОплаты_ПослеЗагрузкиЭтаповОплаты(Форма) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	РазрешенныеСостояния = Новый Массив;
	РазрешенныеСостояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.НеОбработана);
	РазрешенныеСостояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.Отменена);
	РазрешенныеСостояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.ПустаяСсылка());
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Форма.Параметры.Ключ);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних(, ДокументПланирования = &Документ) КАК СостоянияИсполненияДокументовПланированияСрезПоследних";
	ТаблицаСостояний = Запрос.Выполнить().Выгрузить();
	
	СтруктураПоиска = Новый Структура("ИдентификаторПозиции");
	Для Каждого Строка Из Форма.ЭтапыГрафикаОплаты Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		Строки = ТаблицаСостояний.НайтиСтроки(СтруктураПоиска);
		Если Строки.Количество() > 0 Тогда
			Строка.СостояниеИсполнения = Строки[0].СостояниеИсполнения;
			Строка.НеУдалять = РазрешенныеСостояния.Найти(Строка.СостояниеИсполнения) = неопределено;
			Форма.УстанавливатьДоступность = Форма.УстанавливатьДоступность ИЛИ Строка.НеУдалять;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбщаяФормаЭтапыОплаты_НедоступностьКнопокЗаполнения(Форма) Экспорт
	Элементы = Форма.Элементы;
	Если Элементы.Найти("ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамТаблица") <> Неопределено Тогда
		Элементы.ЗаполнитьЭтапыГрафикаПоПредыдущимЗаказамТаблица.Доступность = Ложь;
	КонецЕсли;
	Элементы.РаспределитьСуммуТаблица.Доступность = Ложь;
КонецПроцедуры

#Область Прочее

Процедура СоздатьРеквизитыФормыЭтапыОплаты(Форма)
	
	Реквизиты = Новый Массив; 
	ИмяТаблицы = "ЭтапыГрафикаОплаты";
	
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"ИдентификаторПозиции", 
			Новый ОписаниеТипов("УникальныйИдентификатор"),
			ИмяТаблицы));
			
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"СостояниеИсполнения", 
			Новый ОписаниеТипов("ПеречислениеСсылка.СостоянияИсполненияЗаявки"),
			ИмяТаблицы)); 
			
	Реквизиты.Добавить(
		Новый РеквизитФормы(
			"НеУдалять", 
			Новый ОписаниеТипов("Булево"),
			ИмяТаблицы)); 
			
	Реквизиты.Добавить(
		Новый РеквизитФормы("ДолжныФормироватьсяПозиции", 
			Новый ОписаниеТипов("Булево"))); 
			
	Реквизиты.Добавить(
		Новый РеквизитФормы("УстанавливатьДоступность", 
			Новый ОписаниеТипов("Булево")));
			
	Форма.ИзменитьРеквизиты(Реквизиты);
	
КонецПроцедуры

Процедура СоздатьЭлементыФормыЭтапыОплаты(Форма)
	
	Элементы = Форма.Элементы;
	
	//
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ЭтапыГрафикаОплатыСостояниеИсполнения", НСтр("ru = 'Состояние исполнения'"),
		"ЭтапыГрафикаОплаты.СостояниеИсполнения", , Форма.Элементы.ЭтапыГрафикаОплаты);
	Элемент.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
	Элемент.ТолькоПросмотр = Истина;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеЭтаповОплатыПоставщику(Форма)
	
	//
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	// Строку с признаком НеУдалять нельзя редактировать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСостояниеИсполнения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыВариантОплаты.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСдвиг.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыДатаПлатежа.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентПлатежа.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСуммаПлатежа.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыПроцентЗалогаЗаТару.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСуммаЗалогаЗаТару.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.НеУдалять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Пустое значение СостояниеИсполнения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСостояниеИсполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.СостояниеИсполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Новая платежная позиция>'"));
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеЭтаповОплатыКлиентом(Форма)
	
	//
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	// Строку с признаком НеУдалять нельзя редактировать
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСостояниеИсполнения.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыВариантОплаты.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСдвиг.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыДатаПлатежа.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентПлатежа.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСуммаПлатежа.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыПроцентЗалогаЗаТару.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыОплатыСуммаЗалогаЗаТару.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.НеУдалять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	// Пустое значение СостояниеИсполнения
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = 
		Новый ПолеКомпоновкиДанных(Элементы.ЭтапыГрафикаОплатыСостояниеИсполнения.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЭтапыГрафикаОплаты.СостояниеИсполнения");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Новая платежная позиция>'"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти 

#Область ПроцедурыОбновленияИнформационнойБазы

// Процедура заполняет табличную часть АналитикиПланирования у документов
Процедура ЗаполнитьАналитикиПланированияДокументов() Экспорт
	
	Запросы = Новый Массив;
	
	ТипыДокументов = Метаданные.ОпределяемыеТипы.РегистрацияДанныхБюджетированияСсылки.Тип.Типы();
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Договор КАК Договор
	|%2
	|ИЗ
	|	Документ.%1 КАК Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.%1.АналитикиПланирования КАК ДокументАналитикиПланирования
	|		ПО (ДокументАналитикиПланирования.Ссылка = Документ.Ссылка)
	|ГДЕ
	|	ДокументАналитикиПланирования.Ссылка ЕСТЬ NULL";
	
	
	ИмяВТ = "ПОМЕСТИТЬ ВТ_ДокументыБезАналитикПланирования";
	
	ЗапросыСбораДанных = Новый Массив;
	Для Каждого Тип Из ТипыДокументов Цикл
		ПустоеЗначениеТипа = Новый (Тип);
		ЗапросыСбораДанных.Добавить(СтрШаблон(ШаблонЗапроса, ПустоеЗначениеТипа.Метаданные().Имя, ИмяВТ));
		ИмяВТ = "";
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ЗапросыСбораДанных, 
		"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|");
	
	
	Запросы.Добавить(ТекстЗапроса);
	
	//
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств) КАК ВидБюджета,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнойЦФО КАК ЦФО,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнойПроект КАК Проект,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).СтатьяДвиженияДенежныхСредств КАК СтатьяБюджета,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаБДДС1 КАК Аналитика1,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаБДДС2 КАК Аналитика2,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаБДДС3 КАК Аналитика3,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаБДДС4 КАК Аналитика4,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаБДДС5 КАК Аналитика5,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаБДДС6 КАК Аналитика6,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ИсточникЛимитовБДДС КАК ДокументРезервирования
	|ПОМЕСТИТЬ ВТ_АналитикиПланирования
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВерсияСоглашения ССЫЛКА Документ.ВерсияСоглашенияКоммерческийДоговор
	|	И ДоговорыКонтрагентов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыБезАналитикПланирования.Договор КАК Договор
	|			ИЗ
	|				ВТ_ДокументыБезАналитикПланирования КАК ВТ_ДокументыБезАналитикПланирования)
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).СтатьяДвиженияДенежныхСредств <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов),
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнойЦФО,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнойПроект,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение1,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение2,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение3,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение4,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение5,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение6,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ИсточникЛимитовИсполнение
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВерсияСоглашения ССЫЛКА Документ.ВерсияСоглашенияКоммерческийДоговор
	|	И ДоговорыКонтрагентов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыБезАналитикПланирования.Договор КАК Договор
	|			ИЗ
	|				ВТ_ДокументыБезАналитикПланирования КАК ВТ_ДокументыБезАналитикПланирования)
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение ССЫЛКА Справочник.СтатьиДоходовИРасходов
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение <> ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение <> НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов),
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнойЦФО,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнойПроект,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение1,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение2,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение3,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение4,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение5,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).АналитикаИсполнение6,
	|	ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ИсточникЛимитовИсполнение
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВерсияСоглашения ССЫЛКА Документ.ВерсияСоглашенияКоммерческийДоговор
	|	И ДоговорыКонтрагентов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ДокументыБезАналитикПланирования.Договор КАК Договор
	|			ИЗ
	|				ВТ_ДокументыБезАналитикПланирования КАК ВТ_ДокументыБезАналитикПланирования)
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение ССЫЛКА Справочник.СтатьиДвиженияРесурсов
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияРесурсов.ПустаяСсылка)
	|	И ВЫРАЗИТЬ(ДоговорыКонтрагентов.ВерсияСоглашения КАК Документ.ВерсияСоглашенияКоммерческийДоговор).ОсновнаяСтатьяИсполнение <> НЕОПРЕДЕЛЕНО";
	Запросы.Добавить(ТекстЗапроса);
	
	//
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ДокументыБезАналитикПланирования.Ссылка КАК Ссылка,
	|	ВТ_АналитикиПланирования.ВидБюджета КАК ВидБюджета,
	|	ВТ_АналитикиПланирования.ЦФО КАК ЦФО,
	|	ВТ_АналитикиПланирования.Проект КАК Проект,
	|	ВТ_АналитикиПланирования.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_АналитикиПланирования.Аналитика1 КАК Аналитика1,
	|	ВТ_АналитикиПланирования.Аналитика2 КАК Аналитика2,
	|	ВТ_АналитикиПланирования.Аналитика3 КАК Аналитика3,
	|	ВТ_АналитикиПланирования.Аналитика4 КАК Аналитика4,
	|	ВТ_АналитикиПланирования.Аналитика5 КАК Аналитика5,
	|	ВТ_АналитикиПланирования.Аналитика6 КАК Аналитика6,
	|	ВТ_АналитикиПланирования.ДокументРезервирования КАК ДокументРезервирования
	|ИЗ
	|	ВТ_ДокументыБезАналитикПланирования КАК ВТ_ДокументыБезАналитикПланирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АналитикиПланирования КАК ВТ_АналитикиПланирования
	|		ПО ВТ_ДокументыБезАналитикПланирования.Договор = ВТ_АналитикиПланирования.Договор";
	Запросы.Добавить(ТекстЗапроса);
	
	//
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(Запросы, ОбщегоНазначенияОПК.ТекстРазделителяЗапросовПакета());
	
	Результат = Запрос.Выполнить().Выгрузить();
	ДокументыКОбработке = Результат.Скопировать(, "Ссылка");
	ДокументыКОбработке.Свернуть("Ссылка", "");
	Результат.Индексы.Добавить("Ссылка");
	
	СтруктураПоиска = Новый Структура("Ссылка");
	
	Для Каждого Строка Из ДокументыКОбработке Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Строка);
		АналитикиПланирования = Результат.Скопировать(СтруктураПоиска);
		
		Если АналитикиПланирования.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Док = Строка.Ссылка.ПолучитьОбъект();
		Док.АналитикиПланирования.Загрузить(АналитикиПланирования);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Док);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПриЧтенииНаСервере(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	// Если это перечитываение объекта, то элемент формы уже есть и его надо обновить.
	ИмяЭлемента = АналитикиПланированияДокументовКлиентСервер.ИмяЭлементаФормыДекорацияАналитикиПланированияДокумента();
	Если Элементы.Найти(ИмяЭлемента) = неопределено Тогда
		АналитикиПланированияДокументовКлиентСервер.ЗаполнитьЗаголовокДекорации(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, РодительДляДекорации = неопределено, ВставитьПередДляДекорации = неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	СоздатьЭлементыФормы(Форма, РодительДляДекорации, ВставитьПередДляДекорации);
	АналитикиПланированияДокументовКлиентСервер.ЗаполнитьЗаголовокДекорации(Форма);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементыФормы(Форма, РодительДляДекорации = неопределено, ВставитьПередДляДекорации = неопределено)
	
	Элементы = Форма.Элементы;
	ИмяЭлемента = АналитикиПланированияДокументовКлиентСервер.ИмяЭлементаФормыДекорацияАналитикиПланированияДокумента();
	
	//
	Группа = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиПланирования", "", , РодительДляДекорации, ВставитьПередДляДекорации);
	Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
	Группа.Ширина = 76;
	Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда;
	Группа.ОтображатьЗаголовок = Ложь;
	
	//
	Элемент = ФормыУХ.СоздатьДекорациюФормы(
		Форма.Элементы, "ЗаголовокАналитикиПланирования", НСтр("ru = 'Аналитики:'"), ВидДекорацииФормы.Надпись, Группа);
	Элемент.Ширина = 8;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	//
	ПараметрыЭлемента = Новый Структура("Гиперссылка", Истина);
	СобытияЭлемента = Новый Структура("Нажатие", "Подключаемый_АналитикиПланированияДокументаНажатие");
	Элемент = ФормыУХ.СоздатьДекорациюФормы(
		Форма.Элементы, ИмяЭлемента, "", ВидДекорацииФормы.Надпись, Группа, ,
		ПараметрыЭлемента, СобытияЭлемента);
	
КонецПроцедуры

#КонецОбласти
 
