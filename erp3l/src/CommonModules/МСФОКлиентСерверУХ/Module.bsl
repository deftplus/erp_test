
#Область ПрограммныйИнтерфейс

Функция СпособЗаполненияВручную() Экспорт
	Возврат НСтр("ru = 'Вручную'");
КонецФункции

Функция СпособЗаполненияСторно() Экспорт
	Возврат НСтр("ru = 'Сторно движений документа'");
КонецФункции

#Область СчетаСубконто

// Процедура заполняет усоловное оформление ключевых субконто
// Устанавливается оформление "Текст" значением типа субконто
Процедура УсловноеОформлениеКлючевыхСубконто(ЭтаФорма, ИмяТЧ, ПолеСубконто = "Субконто") Экспорт
	Для Инд = 1 По 3 Цикл 
		Для каждого Элемент Из ЭтаФорма.КэшируемыеЗначения.КлючевыеСубконто Цикл
			ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
		    КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "" + ИмяТЧ + ПолеСубконто + Инд);
		    ОграничениеТипа = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Элемент.Ключ));
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			    "" + ИмяТЧ + "." + ПолеСубконто + Инд, ВидСравненияКомпоновкиДанных.Равно, 
				ОграничениеТипа.ПривестиЗначение(Неопределено));
			
		    ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", Строка(Элемент.Ключ));
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

// Процедура установки доступности субконто в зависимости от выбранного счета
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Объект			 - <Управляемая форма> ИЛИ <Строка табличной части> - Объект, который содержит ПоляФормы
//	ПоляОбъекта		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции НужноСкрытьСубконто
//
Процедура УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта, СкрыватьСубконто = Неопределено) Экспорт
	
	ДанныеСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
	
	Для Индекс = 1 По УчетМСФОПовтИспУХ.ПолучитьМаксКоличествоСубконто() Цикл
		Если ПоляОбъекта.Свойство("Субконто" + Индекс) Тогда
			ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
			Если НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто) Тогда
				Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = Ложь;
			Иначе
				Объект[ПоляОбъекта["Субконто" + Индекс] + "Доступность"] = (Индекс <= ДанныеСчета.КоличествоСубконто);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПоляОбъекта.Свойство("Подразделение") Тогда
		Объект[ПоляОбъекта["Подразделение"] + "Доступность"] = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
			
	Если ПоляОбъекта.Свойство("НаправлениеДеятельности") Тогда
		Объект[ПоляОбъекта["НаправлениеДеятельности"] + "Доступность"] = ДанныеСчета.УчетПоНаправлениямДеятельности;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("УчетПоПодразделениям") Тогда
		Объект[ПоляОбъекта["УчетПоПодразделениям"] + "Доступность"] = ДанныеСчета.УчетПоПодразделениям;
	КонецЕсли;
			
	Если ПоляОбъекта.Свойство("УчетПоНаправлениямДеятельности") Тогда
		Объект[ПоляОбъекта["УчетПоНаправлениямДеятельности"] + "Доступность"] = ДанныеСчета.УчетПоНаправлениямДеятельности;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Валютный") Тогда
		Объект[ПоляОбъекта["Валютный"] + "Доступность"] = ДанныеСчета.Валютный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("Количественный") Тогда
		Объект[ПоляОбъекта["Количественный"] + "Доступность"] = ДанныеСчета.Количественный;
	КонецЕсли;
	
	Если ПоляОбъекта.Свойство("НалоговыйУчет") И ДанныеСчета.Свойство("НалоговыйУчет") Тогда
		Объект[ПоляОбъекта["НалоговыйУчет"] + "Доступность"] = ДанныеСчета.НалоговыйУчет;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значение и типизацию субконто, связанного со счетом
//
// Параметры:
//  <ЭтаФорма>  				- <УправляемаяФорма> - форма, на которой расположен обновляемый элемент
//  <ИмяРеквизитаСчета>  		- <Строка> - имя элемента управления
//  <ОбъектЗаполненияИсточник>  - <ОбъектМетаданных,СтрокаТаблицыФормы,Неопределено> - 
//  								Объект формы (или неопределено) - если реквизит принадлежит объекту, 
//  								СтрокаТаблицыФормы - если реквизит принадлежит строке табличной части
//  <ИмяТЧ> 					- <Строка> - имя табличной части, к которой относится обновляемый реквизит
//  <СчетГруппыПодробно> 		- <Булево> - признак отображения элемента на группе элементов управления "Подробно"
//
// ОбъектЗаполненияИсточник -
Процедура ОбновитьСубконтоСчета(ЭтаФорма, ИмяРеквизитаСчета = Неопределено, ОбъектЗаполненияИсточник = Неопределено, 
									ИмяТЧ = "", СчетГруппыПодробно = Ложь, СчетИсточник = Неопределено) Экспорт 

	Перем КлючевыеСубконто;
	
	ПоляФормы 			= Новый Структура;	
	ПоляОбъекта 		= Новый Структура;
	ЗначенияЗаголовков 	= Новый Структура;
	
	Если ЭтаФорма.КэшируемыеЗначения.Свойство("ИменаСубконто") 
		И ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.Свойство("ИсключенияСкрытияСубконто")
		И ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.ИсключенияСкрытияСубконто.Свойство(ИмяРеквизитаСчета) Тогда
		
		КлючевыеСубконто = Новый Соответствие;
		
	Иначе
		ЭтаФорма.КэшируемыеЗначения.Свойство("КлючевыеСубконто", КлючевыеСубконто);
	КонецЕсли;
	
	ОбъектЗаполнения 	= ?(ОбъектЗаполненияИсточник = Неопределено, ЭтаФорма.Объект, ОбъектЗаполненияИсточник);	
	Если СчетИсточник = Неопределено Тогда
		СчетИсточник = ОбъектЗаполнения[ИмяРеквизитаСчета];	
	КонецЕсли;
	
	РеквизитыОбъектаМД 	= (ОбъектЗаполненияИсточник = Неопределено) Или (ТипЗнч(ОбъектЗаполненияИсточник)=Тип("ДанныеФормыСтруктура"));
	ПрефиксЗаголовков 	= ?(РеквизитыОбъектаМД, "Заголовок", "");
	ЭтоТаблица 			= (НЕ РеквизитыОбъектаМД) И (ИмяТЧ <> "");
	
	НомераСубконтоСчета = ПолучитьНомераСубконто(ЭтаФорма, ИмяТЧ, ИмяРеквизитаСчета);
	
	Для каждого НомерСубконто Из НомераСубконтоСчета Цикл
		
		Если ТипЗнч(НомерСубконто.Ключ) = Тип("Число") Тогда
			НомерСубконтоКлюч = "Субконто" + НомерСубконто.Ключ;
		Иначе 
			НомерСубконтоКлюч = НомерСубконто.Ключ;		
		КонецЕсли;		
		
		ПоляФормы		.Вставить(НомерСубконтоКлюч, ИмяТЧ + НомерСубконто.Значение);	
		ПоляОбъекта		.Вставить(НомерСубконтоКлюч, НомерСубконто.Значение);
			
	КонецЦикла;	
		
	ПриВыбореСчета(СчетИсточник, ЭтаФорма, ПоляФормы, Неопределено, ЭтоТаблица, КлючевыеСубконто);		
	ПриИзмененииСчета(СчетИсточник, ОбъектЗаполнения, ПоляОбъекта, ЭтоТаблица, Неопределено, КлючевыеСубконто);
	
	Если СчетГруппыПодробно И ЭтоТаблица Тогда
		Для каждого НомерСубконто Из ПоляОбъекта Цикл			
			
			ПолеФормы = ЭтаФорма.Элементы[ПоляФормы[НомерСубконто.Ключ]];
			
			ДоступностьСубконто = ОбъектЗаполнения[НомерСубконто.Значение + "Доступность"];
			Если ПолеФормы.Видимость <> ДоступностьСубконто Тогда
				ПолеФормы.Видимость = ДоступностьСубконто;			
			КонецЕсли;
			
			Если ПолеФормы.Видимость И ЗначениеЗаполнено(ПолеФормы.ПодсказкаВвода) Тогда
				ПолеФормы.Заголовок = ПолеФормы.ПодсказкаВвода;			
			КонецЕсли;
			
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСубконтоСчетаТЧ(ФормаДокумента, ТекущаяСтрока = Неопределено, ИмяКолонкиСчета, ИмяТЧ = "ВНА", ИменаСубконто) Экспорт

	ПоляФормы = Новый Структура;
	ПоляОбъекта = Новый Структура;
	Для каждого РеквизитСтроки Из ИменаСубконто[ИмяКолонкиСчета] Цикл
		ПоляФормы.Вставить("Субконто" + РеквизитСтроки.Ключ, ИмяТЧ + РеквизитСтроки.Значение);
		ПоляОбъекта.Вставить("Субконто" + РеквизитСтроки.Ключ, РеквизитСтроки.Значение);
	КонецЦикла;
		
	ПриВыбореСчета(ТекущаяСтрока[ИмяКолонкиСчета], ФормаДокумента, ПоляФормы, Новый Структура, Истина);
	ПриИзмененииСчета(ТекущаяСтрока[ИмяКолонкиСчета], ТекущаяСтрока, ПоляОбъекта, Истина);
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораСчета(ЭлементФормы, ПланСчетовБД, РазделПланаСчетов = Неопределено) Экспорт	
	ЭлементФормы.ПараметрыВыбора = МСФОКлиентСерверУХ.ПолучитьПараметрыВыбораДляСчетаБД(ПланСчетовБД, РазделПланаСчетов);
КонецПроцедуры

Процедура ОбновитьСубконтоСчетов(Форма, ЭлементТаблицаФормы, ИмяТЧ) Экспорт

	ТекущаяСтрока = ЭлементТаблицаФормы.ТекущиеДанные;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СубконтоТЧ = Форма.КэшируемыеЗначения.ИменаСубконто[ИмяТЧ];
	
	Для каждого СчетСубконто Из СубконтоТЧ Цикл
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчетаТЧ(Форма, ТекущаяСтрока, СчетСубконто.Ключ, ИмяТЧ, СубконтоТЧ);	
	КонецЦикла;
		
КонецПроцедуры

Функция ЕстьТипВСубконтоСчета(СчетИсточник, ПроверяемыйТипЗначения) Экспорт

	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СчетИсточник);
	Если СвойстваСчета = Неопределено Тогда
		Возврат Ложь;
	ИначеЕсли СвойстваСчета.КоличествоСубконто = 0 Тогда 
		Возврат Ложь;
	КонецЕсли;	
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		Если СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"].СодержитТип(ПроверяемыйТипЗначения) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПолучитьНомераСубконто(ЭтаФорма, ИмяТЧ = "", ИмяРеквизитаСчета) Экспорт
	
	НомераСубконтоТЧ = Неопределено;
	
	Если (ИмяТЧ <> "") И ЭтаФорма.КэшируемыеЗначения.ИменаСубконто.Свойство(ИмяТЧ, НомераСубконтоТЧ) Тогда 
		НомераСубконтоСчета = НомераСубконтоТЧ[ИмяРеквизитаСчета];
	Иначе
		НомераСубконтоСчета	= ЭтаФорма.КэшируемыеЗначения.ИменаСубконто[ИмяРеквизитаСчета];
	КонецЕсли;
	
	Возврат НомераСубконтоСчета;

КонецФункции

#Область СчетаСубконто_Скрытие

// Процедура установки типа и видимости субконто в зависимости от выбранного счета
//
//Параметры:
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Форма			 - <Управляемая форма> - Форма, которая содержит ПоляФормы и ЗаголовкиПолей
//	ПоляФормы		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	ЗаголовкиПолей	 - <Структура> ИЛИ <Неопределено> - Ключи, которой Субконто1, Субконто2, Субконто3
//									 а значения имена соответствующих полей на форме (заголовки субконто)
//	ЭтоТаблица		 - <Булево>		 - Признак того, где выполняется настройка субконто. 
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции НужноСкрытьСубконто
//
Процедура ПриВыбореСчета(Счет, Форма, ПоляФормы, ЗаголовкиПолей = Неопределено, ЭтоТаблица = Ложь, СкрыватьСубконто = Неопределено) Экспорт
	
	ДанныеСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
			
	//Обновление признаков счета
	Если Не ЭтоТаблица Тогда
		Для каждого Поле Из ПоляФормы Цикл
			ЗначениеПризнакаУчета = Неопределено;
			Если ДанныеСчета.Свойство(Поле.Ключ, ЗначениеПризнакаУчета) И ТипЗнч(ЗначениеПризнакаУчета) = Тип("Булево") Тогда
				Форма.Элементы[Поле.Значение].Видимость = ЗначениеПризнакаУчета;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Для Индекс = 1 По 3 Цикл
		ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
		Если Индекс <= ДанныеСчета.КоличествоСубконто И НЕ НужноСкрытьСубконто(СкрыватьСубконто, ТипЗначенияСубконто) Тогда
			Если ЭтоТаблица Тогда
				Если ПоляФормы.Свойство("Субконто" + Индекс) Тогда
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ОграничениеТипа	 = ТипЗначенияСубконто;
					Форма.Элементы[ПоляФормы["Субконто" + Индекс]].ПодсказкаВвода	 = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];
				КонецЕсли;
			Иначе
				
				ИмяСубконто = "Субконто" + Индекс;
				
				Если (ЗаголовкиПолей = Неопределено) Тогда
					
					Если ПоляФормы.Свойство(ИмяСубконто)  Тогда
						Форма.Элементы[ПоляФормы[ИмяСубконто]].Заголовок = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"];					
					КонецЕсли;
					
				ИначеЕсли ЗаголовкиПолей.Свойство(ИмяСубконто) Тогда
					
					// Заголовок может быть не выведен на форму
					ЭлементФормыЗаголовок = Форма.Элементы.Найти(ЗаголовкиПолей[ИмяСубконто]);
					Если ЭлементФормыЗаголовок <> Неопределено Тогда
						ЭлементФормыЗаголовок.Видимость	 = Истина;
					КонецЕсли;
					Форма[ЗаголовкиПолей[ИмяСубконто]]						 = ДанныеСчета["ВидСубконто" + Индекс + "Наименование"] + ":";
					
				КонецЕсли;
				
				Если ПоляФормы.Свойство(ИмяСубконто) Тогда
					Форма.Элементы[ПоляФормы[ИмяСубконто]].Видимость		 = Истина;
					Форма.Элементы[ПоляФормы[ИмяСубконто]].ОграничениеТипа	 = ТипЗначенияСубконто;
				КонецЕсли;
				
			КонецЕсли;
		Иначе 
			// Ничего делать не надо, т.к. не доступные поля будут скрыты
			Если Не ЭтоТаблица Тогда
				
				ИмяСубконто = "Субконто" + Индекс;
				
				Если ЗаголовкиПолей = Неопределено Тогда
					
					Если ПоляФормы.Свойство(ИмяСубконто) Тогда
						Форма.Элементы[ПоляФормы[ИмяСубконто]].Заголовок = "";
					КонецЕсли;
					
				ИначеЕсли ЗаголовкиПолей.Свойство(ИмяСубконто) Тогда
					// Заголовок может быть не выведен на форму
					ЭлементФормыЗаголовок = Форма.Элементы.Найти(ЗаголовкиПолей[ИмяСубконто]);
					Если ЭлементФормыЗаголовок <> Неопределено Тогда
						ЭлементФормыЗаголовок.Видимость	 = Ложь;
					КонецЕсли;
					Форма[ЗаголовкиПолей[ИмяСубконто]] = "";
				КонецЕсли;
				Если ПоляФормы.Свойство(ИмяСубконто) Тогда
					Форма.Элементы[ПоляФормы[ИмяСубконто]].Видимость		 = Ложь;
					Форма.Элементы[ПоляФормы[ИмяСубконто]].ОграничениеТипа	 = Новый ОписаниеТипов("Неопределено");
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура установки типа, значения и доступности субконто в зависимости от выбранного счета
//
//Параметры:
//	Счет			 - <План счетов> - Счет, для которого необходимо настроить тип и видимость субконто
//	Объект			 - <Управляемая форма> ИЛИ <Строка табличной части> - Объект, который содержит ПоляФормы
//	ПоляОбъекта		 - <Структура> - Ключи, которой Субконто1, Субконто2, Субконто3, 
//									 а значения имена соответствующих полей на форме (поля субконто)
//	ЗначенияСубконто - <Соответствие> ИЛИ <Неопределено> - Значения субконто, где ключ Вид субконто, а значение - значение для подстановки
//	СкрыватьСубконто - <Булево>		 - Признак того, нужно ли для этой формы дополнительно скрывать субконто, влияет на выполнении функции СкрытьСубконто
//
Процедура ПриИзмененииСчета(Счет, Объект, ПоляОбъекта, ЭтоТаблица = Ложь, ЗначенияСубконто = Неопределено, СкрыватьСубконто = Неопределено) Экспорт
	
	Перем ПолеОбъекта;
	
	ДанныеСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
	Для Индекс = 1 По 3 Цикл
		
		Если ПоляОбъекта.Свойство("Субконто" + Индекс, ПолеОбъекта) Тогда
			Если Индекс <= ДанныеСчета.КоличествоСубконто Тогда
				ТипЗначенияСубконто = ДанныеСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				ЗначениеСубконто = ТипЗначенияСубконто.ПривестиЗначение(Объект[ПолеОбъекта]);
				ЗначениеСубконтоПоУмолчанию = ?(ЗначенияСубконто = Неопределено, ЗначенияСубконто, ЗначенияСубконто.Получить(ДанныеСчета["ВидСубконто" + Индекс]));
				Если ЗначениеЗаполнено(ЗначениеСубконто) ИЛИ (НЕ ЗначениеЗаполнено(ЗначениеСубконтоПоУмолчанию)) Тогда
					
					Если Объект[ПолеОбъекта] <> ЗначениеСубконто Тогда
						Объект[ПолеОбъекта] = ЗначениеСубконто;
					КонецЕсли;
					
				Иначе
					Объект[ПолеОбъекта] = ЗначениеСубконтоПоУмолчанию;
				КонецЕсли;
			Иначе 
				Объект[ПолеОбъекта] = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭтоТаблица Тогда
		УстановитьДоступностьСубконто(Счет, Объект, ПоляОбъекта, СкрыватьСубконто);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриИзмененииСчетаТЧ(ЭтаФорма, Элемент, ИмяТЧ = "ВНА") Экспорт

	ИмяРеквизитаСчета 		= Прав(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина(ИмяТЧ));
	
	ТекущаяСтрока = ЭтаФорма.Элементы[ИмяТЧ].ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока 			= ЭтаФорма.Объект[ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрока);
	КлючевыеСубконто		= ЭтаФорма.КэшируемыеЗначения.КлючевыеСубконто;
	СчетГруппыПодробно		= ЭтаФорма.КэшируемыеЗначения.СчетаГруппыПодробно.Свойство(ИмяРеквизитаСчета) 
								И ЭтаФорма.КэшируемыеЗначения.СчетаГруппыПодробно[ИмяРеквизитаСчета];
	
	МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(ЭтаФорма, ИмяРеквизитаСчета, ТекущаяСтрока, ИмяТЧ, СчетГруппыПодробно);
		
КонецПроцедуры

// Функция определяет, нужно ли скрывать данное субконто
//
//Параметры:
//	СкрыватьСубконто - Булево - - Признак того, нужно ли для этой формы дополнительно скрывать субконто
//	ТипЗначенияСубконто - Описание типов 
//
Функция НужноСкрытьСубконто(СкрыватьСубконто = Неопределено, ТипЗначенияСубконто)
	
	Если ТипЗначенияСубконто = Неопределено Тогда
		Возврат Истина;
	ИначеЕсли СкрыватьСубконто = Неопределено 
		  ИЛИ СкрыватьСубконто = Истина 
		  ИЛИ СкрыватьСубконто = Ложь
		  ИЛИ СкрыватьСубконто.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТипыСубконто = ТипЗначенияСубконто.Типы();
	
	Для каждого ТекущийТип Из ТипыСубконто Цикл
		Если СкрыватьСубконто.Получить(ТекущийТип) = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

#Если Клиент Тогда
Процедура НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, СписокПараметров) Экспорт

	ДанныеСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СписокПараметров.СчетУчета);
	ПараметрыВыбора = Новый Структура();


КонецПроцедуры
#КонецЕсли

Процедура ИзменитьПараметрыВыбораПолейСубконто(Форма, Объект, ШаблонИмяПоляОбъекта, ШаблонИмяЭлементаФормы, СписокПараметров) Экспорт
	
	ВидыПараметров = Новый Соответствие;
	ВидыПараметров.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), "Договор");
	
	ОчищатьСвязанныеСубконто = Ложь;
	ТипыСвязанныхСубконто    = Неопределено;
	Если ТипЗнч(Форма.ТекущийЭлемент) = Тип("ТаблицаФормы") Тогда
		ТекущийЭлемент = Форма.ТекущийЭлемент.ТекущийЭлемент;
	Иначе
		ТекущийЭлемент = Форма.ТекущийЭлемент;
	КонецЕсли;
	ИмяТекущегоЭлемента = ?(ТипЗнч(ТекущийЭлемент) = Тип("ПолеФормы"), ТекущийЭлемент.Имя, "");
	
	Для Индекс = 1 По 3 Цикл
		ИмяЭлементаФормы = СтрЗаменить(ШаблонИмяЭлементаФормы, "%Индекс%", Индекс);
		ИмяПоляОбъекта   = СтрЗаменить(ШаблонИмяПоляОбъекта  , "%Индекс%", Индекс);
		ТипПоляОбъекта   = ТипЗнч(Объект[ИмяПоляОбъекта]);
		
		ВидПараметра = ВидыПараметров[ТипПоляОбъекта];
		
		Если ВидПараметра <> Неопределено Тогда
			
			МассивПараметров = Новый Массив();
			Если ВидПараметра = "Договор" Тогда
				Если СписокПараметров.Свойство("Организация") Тогда
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.Организация", СписокПараметров.Организация));
				КонецЕсли;
				Если СписокПараметров.Свойство("Контрагент") Тогда
					ИмяКонтрагента = "Владелец";
					МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор." + ИмяКонтрагента, СписокПараметров.Контрагент));
				КонецЕсли;
			КонецЕсли;
			
			Если МассивПараметров.Количество() > 0 Тогда
				ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
				Форма.Элементы[ИмяЭлементаФормы].ПараметрыВыбора = ПараметрыВыбора;
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОчищатьСвязанныеСубконто 
			И ЗначениеЗаполнено(Объект[ИмяПоляОбъекта]) Тогда
			
			Если ТипыСвязанныхСубконто = Неопределено Тогда
				ВсеТипыСвязанныхСубконто = МСФОВызовСервераУХ.ВсеТипыСвязанныхСубконто();
				ТипыСвязанныхСубконто    = Новый ОписаниеТипов(Новый Массив);
				Для каждого Параметр Из СписокПараметров Цикл
					Если ВсеТипыСвязанныхСубконто[Параметр.Ключ] <> Неопределено Тогда
						ТипыСвязанныхСубконто = Новый ОписаниеТипов(ТипыСвязанныхСубконто, 
							ВсеТипыСвязанныхСубконто[Параметр.Ключ].Типы());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ТипыСвязанныхСубконто.СодержитТип(ТипПоляОбъекта) Тогда
				Объект[ИмяПоляОбъекта] = Новый (ТипПоляОбъекта);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИмяТекущегоЭлемента = ИмяЭлементаФормы Тогда
			ОчищатьСвязанныеСубконто = Истина; // Очищаются только субконто с номером больше текущего
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область КлючевыеСубконто

Функция ПолучитьКлючевыеСубконтоИнвестиций() Экспорт

	КлючевыеСубконто = Новый Соответствие;	
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Контрагенты"), 			"КонтрагентИнвестиция");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Организации"),			"ОрганизацияИнвестор");

	Возврат КлючевыеСубконто;

КонецФункции

Функция ПолучитьКлючевыеСубконтоФИ(ВключитьИнтервалы = Ложь, ВключитьЦБ = Ложь) Экспорт

	КлючевыеСубконто = Новый Соответствие;
	
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"),				"ФИ");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Контрагенты"), 						"Контрагент");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ГруппыКонтрагентов"),				"ГруппаКонтрагента");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ПараметрыУчетаФинансовыхИнструментовМСФО"),	"ПараметрыУчетаФИ");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ВидыОбъектовФинансовогоХарактера"),	"ВидыФИ");
	
	Если ВключитьИнтервалы Тогда
		КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ИнтервалыЗадолженностей"),	"ИнтервалыЗадолженностей");
	КонецЕсли;
	
	Если ВключитьЦБ Тогда
		КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ЦенныеБумаги"), "ФИ"); //в колонке "Договор" содержится составной тип данных
	КонецЕсли;
	
	Возврат КлючевыеСубконто;

КонецФункции

Процедура УстановитьКлючевыеСубконтоФИ(Движение, СтрокаИсточник, УстановитьДт = Истина, УстановитьКт = Истина, ВключитьИнтервалы = Ложь, ВключитьЦБ = Ложь) Экспорт

	Если УстановитьДт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоФИ(Движение.СчетДт, Истина, ВключитьИнтервалы, ВключитьЦБ);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			Движение["СубконтоДт" + СубконтоСчета.Ключ] = СтрокаИсточник[СубконтоСчета.Значение];
		КонецЦикла;
	
	КонецЕсли;
	
	Если УстановитьКт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоФИ(Движение.СчетКт, Истина, ВключитьИнтервалы, ВключитьЦБ);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			Движение["СубконтоКт" + СубконтоСчета.Ключ] = СтрокаИсточник[СубконтоСчета.Значение];
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточник, УстановитьДт = Истина, УстановитьКт = Истина) Экспорт

	Если УстановитьДт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоВНА(Движение.СчетДт, Истина);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			УстановитьКлючевоеСубконто(Движение["СубконтоДт" + СубконтоСчета.Ключ], СтрокаИсточник[СубконтоСчета.Значение]);	
		КонецЦикла;
	
	КонецЕсли;
	
	Если УстановитьКт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоВНА(Движение.СчетКт, Истина);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			УстановитьКлючевоеСубконто(Движение["СубконтоКт" + СубконтоСчета.Ключ], СтрокаИсточник[СубконтоСчета.Значение]);
		КонецЦикла;
	
	КонецЕсли;	

КонецПроцедуры

Процедура УстановитьКлючевыеСубконтоПереоценка(Движение, СтрокаИсточник, УстановитьДт = Истина, УстановитьКт = Истина) Экспорт

	Если УстановитьДт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоФИ(Движение.СчетДт, Истина);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл

			Движение["СубконтоДт" + СубконтоСчета.Ключ] = СтрокаИсточник[СубконтоСчета.Значение];
		КонецЦикла;
	
	КонецЕсли;
	
	Если УстановитьКт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоФИ(Движение.СчетКт, Истина);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			Движение["СубконтоКт" + СубконтоСчета.Ключ] = СтрокаИсточник[СубконтоСчета.Значение];
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьКлючевоеСубконто(ЗначениеПриемник, ЗначениеИсточник)
	
	ТипыИсключения = ВстраиваниеУХКлиентСервер.ТипыНезаменяемыеВНА();
	
	Если ЗначениеЗаполнено(ЗначениеПриемник)
		И ТипыИсключения.Найти(ТипЗнч(ЗначениеПриемник)) <> Неопределено Тогда
	    
		Возврат;//нельзя заменять заполненное субконто затрат(например для 20 - СЗ, МПЗ)
	
	КонецЕсли;
	
	ЗначениеПриемник = ЗначениеИсточник;

КонецПроцедуры

#КонецОбласти

#Область ПараметрыВыбораСчетовСубконто

Процедура УстановитьПараметрыВыбораСубконто(Форма, ИмяСубконто, НомерСубконто) Экспорт
	Форма.Элементы[ИмяСубконто].ПараметрыВыбора = ПолучитьПараметрыВыбора(Новый Структура("ОтборНомерСубконто", НомерСубконто));		
КонецПроцедуры

Функция ПолучитьПараметрыВыбора(ИсточникПараметров) Экспорт

	МассивИсточник = Новый Массив;
	Для каждого ИсточникПараметра Из ИсточникПараметров Цикл
		МассивИсточник.Добавить(Новый ПараметрВыбора(ИсточникПараметра.Ключ, ИсточникПараметра.Значение));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивИсточник);

КонецФункции

Функция ПолучитьСвязиВыбора(ИсточникПараметров) Экспорт

	МассивИсточник = Новый Массив;
	Для каждого ИсточникПараметра Из ИсточникПараметров Цикл
		МассивИсточник.Добавить(Новый СвязьПараметраВыбора(ИсточникПараметра.Ключ, ИсточникПараметра.Значение));
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(МассивИсточник);
	
КонецФункции

Процедура УстановитьВидимость(ЭлементыФормы, ИмяЭлемента, Видимость)

	Если ЭлементыФормы.Найти(ИмяЭлемента) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы[ИмяЭлемента].Видимость = Видимость;

КонецПроцедуры

#КонецОбласти

Процедура УстановитьПланСчетов(Форма, ИменаСубконто = Неопределено) Экспорт
	
	ПланСчетов = Форма.Объект.ПланСчетовБД;
	Если Не ЗначениеЗаполнено(ПланСчетов) Тогда
		
		Для каждого ИмяСубконто Из Форма.КэшируемыеЗначения.ИменаСубконто Цикл
			СчетБД = Форма.Объект[ИмяСубконто.Ключ];
			Если ЗначениеЗаполнено(СчетБД) Тогда
				Форма.Объект.ПланСчетовБД = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(СчетБД, "Владелец");
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		
		Если Форма.Объект.ПланСчетовБД.Пустая() Тогда
			Форма.Объект.ПланСчетовБД = МСФОВызовСервераУХ.ПланСчетовУП(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыВыбораИсточник = Новый Массив;
	ПараметрыВыбораИсточник.Добавить(Новый ПараметрВыбора("Владелец", ПланСчетов));
	ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораИсточник);	
	
	ИменаСубконто = ?(ИменаСубконто = Неопределено, Форма.КэшируемыеЗначения.ИменаСубконто, ИменаСубконто);
	
	Для каждого ИмяСчета Из ИменаСубконто Цикл
		
		Элемент = Форма.Элементы.Найти(ИмяСчета.Ключ);
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент.ПараметрыВыбора = ПараметрыВыбора;
		ОбновитьСубконтоСчета(Форма, ИмяСчета.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПланСчетовПараметровУчета(СчетУчета = Неопределено) Экспорт
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(СчетУчета) Тогда
		Если ТипЗнч(СчетУчета) = Тип("СправочникСсылка.СчетаБД") Тогда	
			Результат = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(СчетУчета, "Владелец");	
		ИначеЕсли ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.МСФО") Тогда	
			Результат = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(СчетУчета, "ПланСчетовБД");	
		КонецЕсли;
	КонецЕсли;                                                                  
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Возврат Результат;
	Иначе 
		Возврат МСФОВызовСервераУХ.ПланСчетовУП(Неопределено);	
	КонецЕсли;	

КонецФункции

#КонецОбласти

#Область ДокументыМСФО

Функция ПериодОтражения(ДатаОтражения, Раздел = "Резервы") Экспорт

	Если Раздел = "Резервы" Тогда	
		Возврат НачалоДня(ДатаОтражения) + 23*60*60;	
	КонецЕсли;
	
	Возврат ДатаОтражения;

КонецФункции

Функция ДатаСторно(ДатаОтражения) Экспорт
	Возврат НачалоДня(ДатаОтражения + 23*60*60);//начало следующего дня
КонецФункции

Функция ПолучитьСубконтоСчета(Форма, ИмяПоляСчета, ТекущаяСтрока) Экспорт 

	Элементы = Форма.Элементы;
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	Субконто = Новый Структура;
	Для каждого ТекущееСубконто Из КэшируемыеЗначения.ИменаСубконто[ИмяПоляСчета] Цикл		
		Если (Элементы.ВНА.ТекущиеДанные[ТекущееСубконто.Значение + "Доступность"] = Истина) И Не ЗначениеЗаполнено(ТекущаяСтрока[ТекущееСубконто.Значение]) Тогда
			Субконто = Неопределено;
			Прервать;
		ИначеЕсли ЗначениеЗаполнено(ТекущаяСтрока[ТекущееСубконто.Значение]) Тогда
			Субконто.Вставить("Субконто" + ТекущееСубконто.Ключ, ТекущаяСтрока[ТекущееСубконто.Значение]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Субконто;

КонецФункции

Функция ЭлементФормыЯвляетсяКолонкойТаблицыФормы(ЭлементФормы) Экспорт

	ТипТаблицаФормы = Тип("ТаблицаФормы");
	ТипФорма = Тип("УправляемаяФорма");
	
	ТекущийРодитель = ЭлементФормы.Родитель;
	Пока Истина Цикл	
		ТипРодителя = ТипЗнч(ТекущийРодитель);
		Если ТипРодителя = ТипТаблицаФормы Тогда
			Возврат Истина;
		ИначеЕсли ТипРодителя = ТипФорма Тогда
			Возврат Ложь;
		Иначе
			ТекущийРодитель = ТекущийРодитель.Родитель;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;	

КонецФункции

Процедура ОбновитьВидимостьСубконтоГруппыПодробно(Форма, ТекущаяСтрока, ИмяТЧ = "", ПроверятьВидимостьСчета = Ложь) Экспорт
	
	Элементы = Форма.Элементы;
	КэшируемыеЗначения = Форма.КэшируемыеЗначения;
	
	КлючевыеСубконто = Новый Соответствие;
	Для каждого ВозможныйКлюч Из Новый Структура("КлючевыеСубконто,КлючевыеСубконтоРБП") Цикл
		Если КэшируемыеЗначения.Свойство(ВозможныйКлюч.Ключ) Тогда
			Для каждого КлючевоеСубконто Из КэшируемыеЗначения[ВозможныйКлюч.Ключ] Цикл
				КлючевыеСубконто.Вставить(КлючевоеСубконто.Ключ, КлючевоеСубконто.Значение);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого СчетПодробно Из КэшируемыеЗначения.СчетаГруппыПодробно Цикл
		
		Если НЕ ПроверятьВидимостьСчета Или Элементы[ИмяТЧ + СчетПодробно.Ключ].Видимость Тогда
			ОбновитьСубконтоСчета(Форма, СчетПодробно.Ключ, ТекущаяСтрока, ИмяТЧ, СчетПодробно.Значение);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьДоступностьЗависимыхРеквизитов(ЭтаФорма, ТекущаяСтрока, ИмяТЧ = "") Экспорт
	
	ТребуемыеРеквизитыЗначений = Новый Соответствие;
	
	Если Не ЭтаФорма.КэшируемыеЗначения.Свойство("ЗависимостиРеквизитов") Тогда		
		Возврат;		
	КонецЕсли;
		
	Для каждого СтрокаЗависимость Из ЭтаФорма.КэшируемыеЗначения.ЗависимостиРеквизитов Цикл
		
		ЗначениеИсточник = ТекущаяСтрока[СтрокаЗависимость.Источник];
		СтрокаРеквизитов = ТребуемыеРеквизитыЗначений.Получить(ЗначениеИсточник);
		Если СтрокаРеквизитов = Неопределено Тогда			
			ТребуемыеРеквизитыЗначений.Вставить(ЗначениеИсточник, СтрокаЗависимость.РеквизитГруппы);
		Иначе
			ТребуемыеРеквизитыЗначений.Вставить(ЗначениеИсточник, СтрокаРеквизитов + "," + СтрокаЗависимость.РеквизитГруппы);
		КонецЕсли;
		
	КонецЦикла;
		
	Если ТребуемыеРеквизитыЗначений.Количество() Тогда
	    РеквизитыЗначений = МСФОВызовСервераУХ.ПолучитьРеквизитыЗначений(ТребуемыеРеквизитыЗначений);
	КонецЕсли;
	
	Для каждого СтрокаЗависимость Из ЭтаФорма.КэшируемыеЗначения.ЗависимостиРеквизитов Цикл
		
		РеквизитыЗначения = РеквизитыЗначений.Получить(ТекущаяСтрока[СтрокаЗависимость.Источник]);
		
		ЭлементЗависимый = ЭтаФорма.Элементы.Найти(ИмяТЧ + СтрокаЗависимость.Приемник);
		Если ЭлементЗависимый = Неопределено Тогда
			Продолжить; //Зависимый реквизит не выведен на форму
		КонецЕсли;
		
		ТолькоПросмотрЗависимого = РеквизитыЗначения.Свойство(СтрокаЗависимость.РеквизитГруппы)
									И ЗначениеЗаполнено(РеквизитыЗначения[СтрокаЗависимость.РеквизитГруппы]);
						
		Если ЭлементЗависимый.ТолькоПросмотр <> ТолькоПросмотрЗависимого Тогда
			ЭлементЗависимый.ТолькоПросмотр = ТолькоПросмотрЗависимого;
		КонецЕсли;							
						
	КонецЦикла;	
	
КонецПроцедуры

Функция ПолучитьВидимостьГруппВНА(Форма, СобытиеВНА, СтруктураИмяГруппа, КэшСобытияВНА = Неопределено) Экспорт

	Видимость = Новый Структура;

	Видимость.Вставить("ГруппаСчетУчета", 		Истина);
	Видимость.Вставить("ГруппаСчетАмортизации",	Ложь);
	Видимость.Вставить("ГруппаСчетВыбытия", 	Ложь);
	Видимость.Вставить("ГруппаВложениеВВНА", 	Ложь);
	ВидимостьГруппаПараметрыАмортизации = Ложь;
	ВидимостьГруппаПрофилиРаспределения = Ложь;
	
	ВидимостьГруппаВыбытие 						= Ложь;
	ВидимостьГруппаПереоценкаМСФО 				= Ложь;
	ВидимостьГруппаПараметрыЭксплуатации 		= Ложь;
	ВидимостьГруппаОграничениеПравИспользования = Ложь;	
	
	Если КэшСобытияВНА.ВводВНАВЭксплуатациюМСФО.Найти(СобытиеВНА) <> Неопределено Тогда
		
		ВидимостьГруппаСчетАмортизации 				= Истина;
		ВидимостьГруппаВложениеВВНА 				= Истина;
		ВидимостьГруппаПараметрыАмортизации 		= Истина;
		ВидимостьГруппаПрофилиРаспределения 		= Истина;
		ВидимостьГруппаПараметрыЭксплуатации 		= Истина;
		ВидимостьГруппаОграничениеПравИспользования = Истина;
		
	ИначеЕсли КэшСобытияВНА.ПоступлениеВНАМСФО.Найти(СобытиеВНА) <> Неопределено Тогда
		
		ВидимостьГруппаОграничениеПравИспользования = Истина;
		
	ИначеЕсли КэшСобытияВНА.НачислениеАмортизацииВНАМСФО.Найти(СобытиеВНА)  <> Неопределено Тогда
		
		ВидимостьГруппаПрофилиРаспределения = Истина;
		
	ИначеЕсли КэшСобытияВНА.ВыбытиеВНАМСФО.Найти(СобытиеВНА) <> Неопределено Тогда
		
		ВидимостьГруппаСчетВыбытия = Истина;
		
	ИначеЕсли КэшСобытияВНА.МодернизацияВНАМСФО.Найти(СобытиеВНА) <> Неопределено Тогда
		
		ВидимостьГруппаВложениеВВНА 				= Истина;
		ВидимостьГруппаПараметрыАмортизации 		= Истина;
		ВидимостьГруппаПараметрыЭксплуатации 		= Истина;
		ВидимостьГруппаОграничениеПравИспользования = Истина;
		
	ИначеЕсли КэшСобытияВНА.ИзменениеПараметровВНАМСФО.Найти(СобытиеВНА) <> Неопределено Тогда
		
		ВидимостьГруппаПараметрыАмортизации 		= Истина;
		ВидимостьГруппаПрофилиРаспределения 		= Истина;
		ВидимостьГруппаПараметрыЭксплуатации 		= Истина;
		ВидимостьГруппаОграничениеПравИспользования = Истина;
		
	ИначеЕсли КэшСобытияВНА.ПереоценкаВНАМСФО.Найти(СобытиеВНА) <> Неопределено Тогда
		
		ВидимостьГруппаПереоценкаМСФО 		= Истина;
		
	Иначе
		
		//скрываются все группы
		
	КонецЕсли;

КонецФункции

Функция ПолучитьПараметрыЗаполнения(ДокументОбъект, ДокументыОснования = Неопределено, Отказ = Ложь) Экспорт

	ПараметрыЗаполнения = Новый Структура();
	
	ШаблонТрансляции = МСФОВызовСервераУХ.ЗначениеУП("ШаблонТрансляции", 
						ДокументОбъект.Организация, ДокументОбъект.Дата, ДокументОбъект.Сценарий);

	Если НЕ ЗначениеЗаполнено(ШаблонТрансляции) Тогда
		
		ШаблонТекста = 
		НСтр("ru = 'При заполнении документа <%1> не удалось определить шаблон трансляции по организации <%2> по сценарию <%3>. 
		|Проверьте ""Учет по МСФО"" - ""Настройки МСФО"" - ""Основные шаблоны трансляции планов счетов"".'");
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ШаблонТекста, ДокументОбъект, ДокументОбъект.Организация, ДокументОбъект.Сценарий), Отказ);
		
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВводСобытийВНАМСФО")
		Или МСФОКлиентСерверУХ.ЭтоТипВводСведенийВнаМсфо(ТипЗнч(ДокументОбъект))
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВводСведенийОФинансовыхИнструментах") 
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВосстановлениеВНАИзРасходов") Тогда
		
		ГраницыПериода = МСФОВНАВызовСервераУХ.ПолучитьГраницыПериодаДокумента(ДокументОбъект, , Истина);
		
	Иначе	
		
		ГраницыПериода = Новый Структура("ДатаНачала,ДатаОкончания", НачалоДня(ДокументОбъект.Дата), КонецДня(ДокументОбъект.Дата));
		
	КонецЕсли;
	
	ПараметрыЗаполнения.Вставить("ДатаНачала", 		ГраницыПериода.ДатаНачала);
	ПараметрыЗаполнения.Вставить("ДатаОкончания", 	КонецДня(ГраницыПериода.ДатаОкончания));
	
	ПараметрыЗаполнения.Вставить("Организация", 		ДокументОбъект.Организация);
	ПараметрыЗаполнения.Вставить("ВИБ", 				Неопределено);
	ПараметрыЗаполнения.Вставить("ШаблонТрансляции",	ШаблонТрансляции);
	ПараметрыЗаполнения.Вставить("Сценарий",			ДокументОбъект.Сценарий);
	ПараметрыЗаполнения.Вставить("Ссылка",				ДокументОбъект.Ссылка);
	
	Если ДокументыОснования <> Неопределено Тогда
		ПараметрыЗаполнения.Вставить("ДокументОснование", ДокументыОснования);
	КонецЕсли;
	
	Возврат ПараметрыЗаполнения;

КонецФункции

#Область ДокументыУчетаМСФО

Процедура ОтображениеКолонок(ФормаДокумента, Постфикс = "МСФО") Экспорт 

	ЭлементКнопка = ФормаДокумента.Элементы["ОтображениеКолонок" + Постфикс];
	
	ОтборКолонок = Новый Структура(Постфикс, Истина);
	КолонкиПостфикса = ФормаДокумента.СоответствиеКолонок.НайтиСтроки(ОтборКолонок);
	Для каждого КолонкаТЧ Из КолонкиПостфикса Цикл
		
	КонецЦикла;
	
	ЭлементКнопка.Пометка = Не ЭлементКнопка.Пометка;
	
КонецПроцедуры

Процедура УстановитьОтборСтрок(ЭлементТаблица, СтруктураОтбора, ЭлементИсточник = Неопределено, ЗависимыеЭлементы = Неопределено) Экспорт  

	Если ЭлементТаблица.ОтборСтрок = Неопределено Тогда
		
		ЭлементТаблица.ОтборСтрок = СтруктураОтбора;
		ЭлементИсточник.Пометка = Истина;	
		
	Иначе
		
		ОтборУстановленРанее = Истина;
		Если СтруктураОтбора.Количество() = ЭлементТаблица.ОтборСтрок.Количество() Тогда	
			Для каждого ЭлементОтбора Из СтруктураОтбора Цикл
				Если НЕ ЭлементТаблица.ОтборСтрок.Свойство(ЭлементОтбора.Ключ) ИЛИ (ЭлементТаблица.ОтборСтрок[ЭлементОтбора.Ключ] <> ЭлементОтбора.Значение) Тогда
					ОтборУстановленРанее = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ОтборУстановленРанее Тогда
			ЭлементИсточник.Пометка = Ложь;
			ЭлементТаблица.ОтборСтрок = Неопределено;
		Иначе			
			ЭлементИсточник.Пометка = Истина;
			ЭлементТаблица.ОтборСтрок = СтруктураОтбора;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗависимыеЭлементы <> Неопределено Тогда
		Если Тип(ЗависимыеЭлементы) = Тип("Массив") Тогда
			Для каждого ЗависимыйЭлемент Из ЗависимыеЭлементы Цикл
				ЗависимыйЭлемент.Пометка = Ложь;
			КонецЦикла;
		Иначе
			ЗависимыеЭлементы.Пометка = Ложь;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьЗависимыеРеквизиты(СтрокаИсточник, ФормаДокумента, КолонкаИсточник) Экспорт

	Если НЕ ЗначениеЗаполнено(СтрокаИсточник[КолонкаИсточник]) Тогда
		Возврат;
	КонецЕсли;

	ТипСчетБД = Тип("СправочникСсылка.СчетаБД");
	
	Для каждого Реквизит Из ФормаДокумента.КэшируемыеЗначения.ЗависимостиРеквизитов Цикл
		
		Если Реквизит.Источник <> КолонкаИсточник Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаИсточник[Реквизит.Приемник] = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(
												СтрокаИсточник[КолонкаИсточник], Реквизит.РеквизитГруппы);	
		Если ТипЗнч(СтрокаИсточник[Реквизит.Приемник]) = ТипСчетБД Тогда
			
		КонецЕсли;
		
		ОбновитьЗависимыеРеквизиты(СтрокаИсточник, ФормаДокумента, Реквизит.Приемник);//например: ГруппаВНА.ПараметрыАмортизацииВНА 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРасчетныеРеквизитыСтроки(СтрокаДляЗаполнения, ЗаполняемыеРеквизиты) Экспорт
	
	Если ЗаполняемыеРеквизиты <> Неопределено Тогда
		
		Если ЗаполняемыеРеквизиты.Свойство("ИменаСубконто") Тогда			
			Для каждого СубконтоСчета Из ЗаполняемыеРеквизиты.ИменаСубконто Цикл
				
				Если Не СтрокаДляЗаполнения.Свойство(СубконтоСчета.Ключ) Тогда
					Продолжить;
				КонецЕсли;
				
				ИменаСубконто = Новый Структура;
				Для каждого НомерСубконто Из СубконтоСчета.Значение Цикл
					Если ТипЗнч(НомерСубконто.Ключ) = Тип("Число") Тогда
						ИменаСубконто.Вставить("Субконто" + НомерСубконто.Ключ, НомерСубконто.Значение);
					Иначе //НомерСубконто.Ключ = Подразделение, НаправлениеДеятельности 	
						ИменаСубконто.Вставить(НомерСубконто.Ключ, НомерСубконто.Значение);
					КонецЕсли;
					
				КонецЦикла;				
				
				СчетИсточник = СтрокаДляЗаполнения[СубконтоСчета.Ключ];
				МСФОКлиентСерверУХ.УстановитьДоступностьСубконто(СчетИсточник, СтрокаДляЗаполнения, ИменаСубконто);
				
			КонецЦикла;		
		КонецЕсли;
		
		Если ЗаполняемыеРеквизиты.Свойство("КолонкиРасхождений") Тогда
			Для каждого Расхождение Из ЗаполняемыеРеквизиты.КолонкиРасхождений Цикл
				СтрокаДляЗаполнения[Расхождение + "Расхождение"] = СтрокаДляЗаполнения[Расхождение + "МСФО"] - СтрокаДляЗаполнения[Расхождение + "НСБУ"];				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;		

КонецПроцедуры

Функция ИспользоватьЗаполнение(СтруктураЗаполнений, ИмяЗаполнения) Экспорт 

	Возврат СтруктураЗаполнений.Свойство(ИмяЗаполнения) И (СтруктураЗаполнений[ИмяЗаполнения] = Истина);

КонецФункции

Процедура УстановитьНезаполненноеЗначение(ЗначениеПриемник, ЗначениеИсточник) Экспорт 

	Если НЕ ЗначениеЗаполнено(ЗначениеПриемник) Тогда
		ЗначениеПриемник = ЗначениеИсточник;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьПоКолонкамНСБУСервер(ФормаДокумента, ИмяТаблицы, НастройкиЗаполнения = Неопределено, ТолькоНезаполненные = Истина) Экспорт

	//ДокументыПараллельногоУчета
	
	Если НастройкиЗаполнения <> Неопределено Тогда		
		ЗаполнитьКолонкуИзменений = НастройкиЗаполнения.Свойство("ЗаполнитьКолонкуИзменений") И (НастройкиЗаполнения.ЗаполнитьКолонкуИзменений = Истина);	
	Иначе 		
		ЗаполнитьКолонкуИзменений = Ложь;	
	КонецЕсли;	
	
	Объект = ФормаДокумента.Объект;
	
	ТипСчетаБД = Тип("СправочникСсылка.СчетаБД");
	ТипСпособы = Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизацииМСФО");
	
	ЭтоКонтекстФормы = (ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура"));
	
	СоответствиеКолонок = ФормаДокумента.СоответствиеКолонок.НайтиСтроки(Новый Структура("НСБУ,МСФО", Истина, Истина));
	
	КэшЗначенийМСФО = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		
		Для каждого КолонкаТаблицы Из СоответствиеКолонок Цикл
			
			Если ТолькоНезаполненные И ЗначениеЗаполнено(СтрокаТаблицы[КолонкаТаблицы.Имя + "МСФО"]) Тогда
				Продолжить; //Уже заполнено
			КонецЕсли;
			
			ЗначениеМСФО = СтрокаТаблицы[КолонкаТаблицы.Имя + "НСБУ"];
			Если ТипЗнч(ЗначениеМСФО) = ТипСчетаБД Тогда
				
				ЗначениеКэша = КэшЗначенийМСФО.Получить(ЗначениеМСФО);
				Если ЗначениеКэша = Неопределено Тогда
					ЗначениеКэша = МСФОВНАВызовСервераУХ.ПолучитьСчетМСФОТрансформации(ЗначениеМСФО, 
														Объект.Организация, Объект.Сценарий, Объект.ПериодОтчета);
					КэшЗначенийМСФО.Вставить(ЗначениеМСФО, ЗначениеКэша);
				КонецЕсли;
				ЗначениеМСФО = ЗначениеКэша;
			ИначеЕсли ТипЗнч(ЗначениеМСФО) = ТипСпособы Тогда 
				
				ЗначениеКэша = КэшЗначенийМСФО.Получить(ЗначениеМСФО);
				Если ЗначениеКэша = Неопределено Тогда
					//ЗначениеКэша = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ЗначениеМСФО, "СпособОтраженияРасходовМСФО");
					//КэшЗначенийМСФО.Вставить(ЗначениеМСФО, ЗначениеКэша);
				КонецЕсли;
				ЗначениеМСФО = ЗначениеКэша;
				
			КонецЕсли;
			
			СтрокаТаблицы[КолонкаТаблицы.Имя + "МСФО"] = ЗначениеМСФО;
			
		КонецЦикла;
		
		Если ЗаполнитьКолонкуИзменений Тогда
			СтрокаТаблицы.ЕстьИзменение = Истина;	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры	

Процедура ПроверитьКорректностьДатКолонки(ТаблицаФормы, ИмяКолонки = "ДатаОперацииМСФО", ГраницыПериода, Отказ = Ложь) Экспорт

	ПустаяДата = '00010101';
	ЧислоСтрок = ТаблицаФормы.Количество();
	Для НомерСтроки = 0 По (ЧислоСтрок-1) Цикл
		СтрокаТаблицы = ТаблицаФормы.Получить(НомерСтроки);
		Если (СтрокаТаблицы[ИмяКолонки] <> ПустаяДата) И НЕ ((СтрокаТаблицы[ИмяКолонки] >= ГраницыПериода.ДатаНачала) И (СтрокаТаблицы[ИмяКолонки] <= ГраницыПериода.ДатаОкончания)) Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(НСтр("ru = 'В строке №<%1> не заполнен реквизит <%2>'"), НомерСтроки+1, ИмяКолонки), Отказ);
		КонецЕсли;
	КонецЦикла;	

КонецПроцедуры

Процедура ПересчитатьСуммуВВалюте(Форма, СуммаВВалюте = Неопределено, СуммаВВалютеУчета, ВалютаДокумента = Неопределено, ДатаОперации, КэшКурсов = Неопределено) Экспорт

	ФункциональнаяВалюта = Форма.КэшируемыеЗначения.ФункциональнаяВалюта;
	
	Если (ВалютаДокумента = Неопределено) Или ВалютаДокумента.Пустая() Или (ФункциональнаяВалюта = ВалютаДокумента) Тогда
		СуммаВВалюте = СуммаВВалютеУчета;
		Возврат;
	Иначе
		
		КурсФункциональнойВалюты = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ФункциональнаяВалюта, ДатаОперации).Курс;
		КурсВалютыОперации = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаДокумента, ДатаОперации).Курс;
			
		СуммаВВалюте = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(СуммаВВалютеУчета, 
										ФункциональнаяВалюта, ВалютаДокумента, КурсФункциональнойВалюты, КурсВалютыОперации);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьЭлементаФормы(ЭтаФорма, СоотвествиеИменРеквизитовПараметрам, ИмяПараметра = Неопределено, УстанавливаемаяВидимость = Истина)

	Если (ИмяПараметра <> Неопределено) И СоотвествиеИменРеквизитовПараметрам.Свойство(ИмяПараметра) Тогда	
		ЭтаФорма.Элементы[СоотвествиеИменРеквизитовПараметрам[ИмяПараметра]].Видимость = УстанавливаемаяВидимость;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВНА

Функция ПолучитьАвтоНаименованиеПараметрыУчетаВНА(Объект) Экспорт 

	бЛожь = НСтр("ru = 'Не амортизируется'", );
	бИстина = НСтр("ru = 'Не амортизируется'", );
	
	Возврат СтрШаблон("%1(%2)/%3/%4", 
				Объект.КлассВНА, 
				Объект.СчетУчетаПервоначальнойСтоимости, 
				Формат(Объект.НачислятьАмортизацию, СтрШаблон("БЛ='%1'; БИ=%2", бЛожь, бИстина)),
				Объект.МодельУчетаВНА);

КонецФункции

Процедура ОбновитьВыборТипаВНА(Форма, НоваяСтрока = Ложь, Копирование = Ложь, ИмяТЧ = "ВНА", ИмяЭлементаВНА = "ВНАВНА", ИмяРеквизитаВНА = "ВНА") Экспорт

	Элементы = Форма.Элементы;
	
	ТекущаяСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока И Не Копирование Тогда
		
		Если ТекущаяСтрока[ИмяРеквизитаВНА] = Неопределено Тогда
			
			Если Форма.КэшируемыеЗначения.Свойство("ТипВНА", ТекущаяСтрока[ИмяРеквизитаВНА]) Тогда
				Форма.КэшируемыеЗначения.Удалить("ТипВНА");//тип ВНА заполнен из выбранного в меню
			Иначе 
				ТекущаяСтрока[ИмяРеквизитаВНА] = ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуОС();				
			КонецЕсли;
			
			Элементы[ИмяЭлементаВНА].ВыбиратьТип = Ложь;

		КонецЕсли;
		
	ИначеЕсли ТекущаяСтрока[ИмяРеквизитаВНА] <> Неопределено Тогда		
		Элементы[ИмяЭлементаВНА].ВыбиратьТип = Ложь;			
	КонецЕсли;

КонецПроцедуры

#Область ФормыВНА

Процедура ЗаполнитьНачислятьАмортизациюМСФО(Форма, ЗаполнитьИзПараметровУчетаВНА = Ложь) Экспорт

	Объект = Форма.Объект;
	
	Для каждого СтрокаВНА Из Объект.ВНА Цикл	
		
		СтрокаВНА.НачислятьАмортизациюМСФО = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(СтрокаВНА.ГруппаВНА, "НачислятьАмортизацию");
			
		Если Не СтрокаВНА.НачислятьАмортизациюМСФО И Не СтрокаВНА.СпособНачисленияАмортизацииМСФО.Пустая() Тогда
			СтрокаВНА.СпособНачисленияАмортизацииМСФО = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеФормойВНА(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЕстьМСФО = ЗначениеЗаполнено(Форма.ПринятоКУчетуМСФО);
	ВариантУчетаТрансляция = ВариантУчетаТрансляция(Форма.ВариантУчетаВНА);
	Если ВариантУчетаТрансляция Тогда
	    Форма.ПараметрыУчетаМСФО = Неопределено;
	КонецЕсли;
	ДоступнаАмортизация = (Элементы.Найти("СпособОтраженияРасходовПоАмортизацииМСФО") <> Неопределено);
		
	Элементы.ПараметрыУчетаВНА.Видимость 		= Не ВариантУчетаТрансляция;
	Элементы.ГруппаПараметрыУчетаУХ.Видимость	= Не ВариантУчетаТрансляция И ЗначениеЗаполнено(Форма.ПараметрыУчетаМСФО);
	Элементы.ГруппаСведения.Видимость 			= Не ВариантУчетаТрансляция И ЗначениеЗаполнено(Форма.ПринятоКУчетуМСФО);
	
	Элементы.ВариантУчетаВНА.ТолькоПросмотр 	= ЕстьМСФО;
	Элементы.ПараметрыУчетаВНА.ТолькоПросмотр 	= ЕстьМСФО;
	Элементы.ПараметрыУчетаВНА.Заголовок 		= ?(ЕстьМСФО, НСтр("ru = 'Параметры учета'"), НСтр("ru = 'Параметры по умолчанию'"));
	Элементы.ГруппаАмортизация.Видимость 		= ДоступнаАмортизация И Не Форма.СпособОтраженияРасходовПоАмортизацииМСФО.Пустая();
		
КонецПроцедуры

Функция ВариантУчетаТрансляция(ВариантУчетаВНА)
	Возврат (ВариантУчетаВНА = 0);
КонецФункции

Процедура ОбновитьЗаголовкиГруппВНА(Форма, ЗаголовокОбновления = Неопределено) Экспорт

	Объект = Форма.Объект;
	
	ТипОС = ВстраиваниеУХКлиентСервер.ПолучитьТипОС();
	ЭтоОС = ТипЗнч(Объект.Ссылка) = ТипОС;
		
	Если ЭтоОС И Форма.Элементы.Найти("РемонтныйЦикл") <> Неопределено Тогда
		
		Если (ЗаголовокОбновления = Неопределено) Или ЗаголовокОбновления = "РемонтныйЦикл" Тогда
			
			Если Объект.РемонтныйЦикл.Количество() Тогда
				Форма.ЗаголовокРемонтныйЦикл = НСтр("ru = 'Установлено ремонтных циклов: '") + Объект.РемонтныйЦикл.Количество();
			Иначе
				Форма.ЗаголовокРемонтныйЦикл = НСтр("ru = 'Информация о ремонтных циклах отсутствует'");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ЗаголовокОбновления = Неопределено) Или ЗаголовокОбновления = "ПравоСобственности" Тогда
	
		Если ЗначениеЗаполнено(Объект.ПраваСобственности) Тогда		
			Форма.ЗаголовокПравоСобственности = СтрПолучитьСтроку(Объект.ПраваСобственности, 1);
		Иначе
			Форма.ЗаголовокПравоСобственности = НСтр("ru = 'Информация о праве собственности отсутствует'");
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ЗаголовокОбновления = Неопределено) Или ЗаголовокОбновления = "Страхование" Тогда
	
		Если Объект.Страхование.Количество() Тогда		
			Форма.ЗаголовокСтрахование = НСтр("ru = 'Количество договоров страхования: '") + Объект.Страхование.Количество();
		Иначе
			Форма.ЗаголовокСтрахование = НСтр("ru = 'Объект не застрахован'");
		КонецЕсли;
	
	КонецЕсли;
	
	Если (ЗаголовокОбновления = Неопределено) Или ЗаголовокОбновления = "ДоговорыЗалога" Тогда
		
		ЗаголовокДоговорыЗалога = НСтр("ru = 'Объект не находится в залоге'");
		Если Форма.ДоговорыЗалога.Количество() Тогда
			
			АктуальнаяДата = Дата(1,1,1);
			Для каждого Стр Из Форма.ДоговорыЗалога Цикл
			
				Если Стр.Период >= АктуальнаяДата Тогда
					
					АктуальнаяДата = Стр.Период;
					Шаблон = НСтр("ru = 'Находится в залоге по договору <%1>'");
					Форма.ЗаголовокДоговорыЗалога = СтрШаблон(шаблон, Стр.ДоговорЗалога);
					
				КонецЕсли;
			
			КонецЦикла;
	
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область МСФОВНАУХ

Процедура ОбновитьВидимостьПараметровАмортизации(ЭтаФорма, СпособНачисленияАмортизации, ИмяТЧ = "ВНА") Экспорт

	ПараметрыАмортизации = Новый Структура;

	ЗависимостиАмортизации = ЭтаФорма.ЗависимостиРеквизитов.НайтиСтроки(Новый Структура("Источник", "ПараметрыАмортизацииВНАМСФО"));
	Для каждого ЗависимостьАмортизации Из ЗависимостиАмортизации Цикл	
		ПараметрыАмортизации.Вставить(ЗависимостьАмортизации.РеквизитГруппы, ИмяТЧ + ЗависимостьАмортизации.Приемник);
	КонецЦикла;
	
	МетодЗадан = НЕ СпособНачисленияАмортизации.Пустая();
	МетодОбъемаПродукции = СпособНачисленияАмортизации = ЭтаФорма.КэшируемыеЗначения.СпособыНачисленияАмортизации.ПропорциональноОбъемуПродукции;	
	МетодУменьшаемогоОстатка = СпособНачисленияАмортизации = ЭтаФорма.КэшируемыеЗначения.СпособыНачисленияАмортизации.УменьшаемогоОстатка;		
	
	УстановитьВидимостьЭлементаФормы(ЭтаФорма, ПараметрыАмортизации, "СрокПолезногоИспользования", 		НЕ МетодОбъемаПродукции);
	УстановитьВидимостьЭлементаФормы(ЭтаФорма, ПараметрыАмортизации, "КоэффициентУскорения", 			МетодЗадан И МетодУменьшаемогоОстатка);	
	УстановитьВидимостьЭлементаФормы(ЭтаФорма, ПараметрыАмортизации, "ПараметрВыработки", 				МетодЗадан И МетодОбъемаПродукции);
	УстановитьВидимостьЭлементаФормы(ЭтаФорма, ПараметрыАмортизации, "ПредполагаемыйОбъемПродукции", 	МетодЗадан И МетодОбъемаПродукции);
	
КонецПроцедуры

Процедура ОбновитьОтображениеПараметровАмортизации(ЭтаФорма, СпособНачисленияАмортизации, РеквизитыАмортизации, КэшСпособы) Экспорт
	
	Перем ТекущийРеквизит;
	
	МетодОбъемаПродукции = СпособНачисленияАмортизации = КэшСпособы.ПропорциональноОбъемуПродукции;	
	МетодУменьшаемогоОстатка = СпособНачисленияАмортизации = КэшСпособы.УменьшаемогоОстатка;		
	МетодЗадан = МетодОбъемаПродукции Или МетодУменьшаемогоОстатка Или НЕ СпособНачисленияАмортизации.Пустая();
	
	Если РеквизитыАмортизации.Свойство("СрокПолезногоИспользования", ТекущийРеквизит) Тогда
		ЭтаФорма.Элементы[ТекущийРеквизит].Видимость = МетодЗадан И НЕ МетодОбъемаПродукции;
	КонецЕсли;
	
	Если РеквизитыАмортизации.Свойство("СрокИспользованияДляВычисленияАмортизации", ТекущийРеквизит) Тогда
		ЭтаФорма.Элементы[ТекущийРеквизит].Видимость = МетодЗадан И НЕ МетодОбъемаПродукции;
	КонецЕсли;
	
	Если РеквизитыАмортизации.Свойство("КоэффициентУскорения", ТекущийРеквизит) Тогда
		ЭтаФорма.Элементы[ТекущийРеквизит].Видимость = МетодЗадан И МетодУменьшаемогоОстатка;
	КонецЕсли;
	
	Если РеквизитыАмортизации.Свойство("ПараметрВыработки", ТекущийРеквизит) Тогда
		ЭтаФорма.Элементы[ТекущийРеквизит].Видимость = МетодЗадан И МетодОбъемаПродукции;
	КонецЕсли;
	
	Если РеквизитыАмортизации.Свойство("ПредполагаемыйОбъемПродукции", ТекущийРеквизит) Тогда
		ЭтаФорма.Элементы[ТекущийРеквизит].Видимость = МетодЗадан И МетодОбъемаПродукции;
	КонецЕсли;
	
	Если РеквизитыАмортизации.Свойство("ПрофильРаспределения", ТекущийРеквизит) Тогда
		ЭтаФорма.Элементы[ТекущийРеквизит].Видимость = МетодЗадан;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ДокументыВНА

Функция ПолучитьИмяЭлементаРеквизита(КолонкаОС, ПостФикс, Префикс = "ВНА") Экспорт
	Возврат Префикс + ?(КолонкаОС.Значение.ПолеРеквизита, СтрЗаменить(КолонкаОС.Имя, ".", ПостФикс), КолонкаОС.Ключ + ПостФикс);
КонецФункции
                                                                                                       
Процедура ОбновитьРеквизитыПриИзмененииПараметровАмортизации(ФормаДокумента, СтрокаВНА = Неопределено) Экспорт

	Элементы = ФормаДокумента.Элементы;	                                                                                    
	Если СтрокаВНА = Неопределено Тогда
	    ТекущаяСтрока = Элементы.ВНА.ТекущиеДанные;
	Иначе	
		ТекущаяСтрока = СтрокаВНА;
	КонецЕсли;
	                                                                                                                
	ПолучаемыеРевизиты = "СчетАмортизации,СчетАмортизацииСубконто1,СчетАмортизацииСубконто2,СчетАмортизацииСубконто3,
		|СчетЗатрат,СчетЗатратСубконто1,СчетЗатратСубконто2,СчетЗатратСубконто3,СрокПолезногоИспользования, СпособНачисленияАмортизации";
	                                                                                                                  
	РеквизитыСсылки = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ТекущаяСтрока.ПараметрыАмортизацииВНАМСФО, ПолучаемыеРевизиты);

	РеквизитыЗаполнения = Новый Структура;
	Для каждого РеквизитСсылки Из РеквизитыСсылки Цикл
		РеквизитыЗаполнения.Вставить(РеквизитСсылки.Ключ + "МСФО", 	РеквизитСсылки.Значение);
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РеквизитыЗаполнения);
	
КонецПроцедуры

Процедура ОбновитьРасхожденияСтрокиВНА(СтрокаВНА, СоответствиеКолонок, КэшПроверки = Неопределено) Экспорт
	
	Если КэшПроверки = Неопределено Тогда
		
		КэшПроверки = Новый Соответствие;
		
		Для каждого КолонкаСоотв Из СоответствиеКолонок Цикл
		
			Если Не (КолонкаСоотв.Значение.Свойство("НСБУ") И КолонкаСоотв.Значение.Свойство("МСФО")) Тогда
				Продолжить;
			ИначеЕсли СтрНайти(КолонкаСоотв.Ключ, "Счет") > 0 Тогда // расхождение счетов не проверяем
				Продолжить;
			КонецЕсли;
			
			КэшПроверки.Вставить(КолонкаСоотв.Ключ, КолонкаСоотв.Значение);
			
		КонецЦикла;
		
	КонецЕсли; 	
		
	ЕстьРасхождения = Ложь;
	
	Для каждого КолонкаРасхождения Из КэшПроверки Цикл
		
		ИмяКолонки = КолонкаРасхождения.Ключ;
		
		Если КолонкаРасхождения.Значение.Свойство("Расхождение") Тогда
			СтрокаВНА[ИмяКолонки + "Расхождение"] = СтрокаВНА[ИмяКолонки + "МСФО"] - СтрокаВНА[ИмяКолонки + "НСБУ"];
		КонецЕсли; 
		Если СтрокаВНА[ИмяКолонки + "МСФО"] <> СтрокаВНА[ИмяКолонки + "НСБУ"] Тогда
			ЕстьРасхождения = Истина;
		КонецЕсли;
		
	КонецЦикла;		
	
	Если КэшПроверки.Количество() > 0 Тогда
		СтрокаВНА.ЕстьРасхождения = ЕстьРасхождения;	
	КонецЕсли;	
	
КонецПроцедуры

Функция ПолучитьПараметрыВыбораДляСчетаБД(ПланСчетов, РазделПланаСчетов = Неопределено) Экспорт

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Владелец", ПланСчетов));
	Если РазделПланаСчетов <> Неопределено Тогда
		
		Если ТипЗнч(РазделПланаСчетов) = Тип("СписокЗначений") Тогда
			
			СписокРазделов = РазделПланаСчетов;
			
		ИначеЕсли ТипЗнч(РазделПланаСчетов) = Тип("Массив") Тогда
			
			СписокРазделов = Новый СписокЗначений;
			СписокРазделов.ЗагрузитьЗначения(РазделПланаСчетов);
			
		Иначе	
			
			СписокРазделов = Новый СписокЗначений;
			СписокРазделов.Добавить(РазделПланаСчетов);
			
		КонецЕсли;
		
		СписокРазделов.Добавить(ПредопределенноеЗначение("Справочник.РазделыПланаСчетов.ПустаяСсылка"));		
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("РазделПланаСчетов", СписокРазделов));
		
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ПараметрыВыбора);

КонецФункции

Функция ЭтоТипВводСведенийВнаМсфо(ТипДокумента) Экспорт	
	
	ТипТекстом = "ДокументСсылка.ВводСведенийВНАМСФО";
	Возврат ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И (ТипДокумента = Тип(ТипТекстом));	
		
КонецФункции

#КонецОбласти

#Область КлассВНАДокументов

Процедура УстановитьКлассВПредставлении(ТекстПредставления, КлассВНА = Неопределено) Экспорт

	Если ЗначениеЗаполнено(КлассВНА) Тогда
		ТекстПредставления = СтрЗаменить(ТекстПредставления, "ВНА", КлассВНА);
	КонецЕсли;

КонецПроцедуры

Процедура Подключаемый_УстановитьКлассВНАДокумента(Результат = Неопределено, ДополнительныеПараметры) Экспорт
	
	Если (Результат <> Неопределено) И (ДополнительныеПараметры.ФормаДокумента.Объект.КлассВНА <> Результат) Тогда
		ДополнительныеПараметры.ФормаДокумента.Объект.КлассВНА = Результат;	
		УстановитьПредставлениеКлассаВНАДокумента(ДополнительныеПараметры.ФормаДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПредставлениеКлассаВНАДокумента(ФормаДокумента) Экспорт
	
	Если НЕ ФормаДокумента.Объект.Свойство("КлассВНА") Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаДокумента.Объект.КлассВНА.Пустая() Тогда
		ПредставлениеКлассаВНА = "ВНА";
	Иначе	
		ПредставлениеКлассаВНА = Строка(ФормаДокумента.Объект.КлассВНА);
	КонецЕсли;
	
	МетаданныеДокумента = ФормаДокумента.КэшируемыеЗначения.МетаданныеДокумента;
	
	ЭлементИзменитьКласс = ФормаДокумента.Элементы.Найти("ФормаОбщаяКомандаИзменитьКлассВНА");
	Если ЭлементИзменитьКласс <> Неопределено Тогда
		ЭлементИзменитьКласс.Заголовок = ПредставлениеКлассаВНА;
	КонецЕсли;
	
	ФормаДокумента.Заголовок = ПредставлениеКлассаВНА;
	//ПредставлениеДокумента = ?(МетаданныеДокумента.РасширенноеПредставлениеОбъекта = "", 
	//МетаданныеДокумента.Синоним, МетаданныеДокумента.РасширенноеПредставлениеОбъекта);
	
	//ФормаДокумента.Заголовок = СтрЗаменить(ПредставлениеДокумента, "ВНА", ПредставлениеКлассаВНА)
	//+ " №" + ФормаДокумента.Объект.Номер + " от " + ФормаДокумента.Объект.Дата;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ФИ

Функция ПолучитьГраницыГодаДляКраткосрочнойЧасти(ДатаОкончанияПериода) Экспорт

	ГраницыГода = Новый Структура;

	ГраницыГода.Вставить("ДатаНачала",		НачалоДня(ОбщегоНазначенияУХ.ДобавитьДень(ДатаОкончанияПериода, 1))	);
	ГраницыГода.Вставить("ДатаОкончания",	КонецМесяца(ДобавитьМесяц(ГраницыГода.ДатаНачала, 11))				);
	
	Возврат ГраницыГода;
	
КонецФункции

#КонецОбласти

#Область Отчеты

Функция ПолучитьПоляРасшифровки(ИсточникДанныеРасшифровки, ИдентификаторРасшифровки) Экспорт

	ПоляРасшифровки = Новый Соответствие;
	
	Если ТипЗнч(ИсточникДанныеРасшифровки) = Тип("Строка") Тогда		
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ИсточникДанныеРасшифровки);
	Иначе 
		ДанныеРасшифровки = ИсточникДанныеРасшифровки;
	КонецЕсли;
	
	ПоляРасшифровкиИзЭлемента(ДанныеРасшифровки.Элементы[ИдентификаторРасшифровки], ПоляРасшифровки);
	
	Возврат ПоляРасшифровки;

КонецФункции

// Получает все поля расшифровки из элемента расшифровки и его родителей. 
// По сути, получает контекст расшифровываемой ячейки отчета, для того чтобы в последующим наложить по нему отбор.
//
// Параметры:
//  ЭлементРасшифровки	 - ЭлементРасшифровкиКомпоновкиДанныхПоля, ЭлементРасшифровкиКомпоновкиДанныхГруппировка - Элемент расшифровки, из которого нужно получить поля.
//  ПоляРасшифровки		 - Соответствие																			 - Соответствие в которое нужно поместить найденные поля расшифровки.
//
Процедура ПоляРасшифровкиИзЭлемента(ЭлементРасшифровки, ПоляРасшифровки) Экспорт
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Если ПоляРасшифровки.Получить(Поле.Поле) = Неопределено Тогда
				ПоляРасшифровки.Вставить(Поле.Поле, Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// Для поиска полей на уровень выше, получим все родительские элементы данного элемента расшифровки,
	// и выполним поиск в каждом из них.
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ПоляРасшифровкиИзЭлемента(Родитель, ПоляРасшифровки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДоработатьНастройкиПоПолямРасшифровки(Настройки, ПоляРасшифровки) Экспорт
	
	Для Каждого ПолеРасшифровки Из ПоляРасшифровки Цикл
		
		ПрименяемыйВидСравнения = ВидСравненияДляПоляРасшифровки(ПолеРасшифровки.Значение);
		
		Если ОтборПоПолюИмеетСмысл(ПолеРасшифровки.Ключ, ПрименяемыйВидСравнения, Настройки.Отбор) Тогда
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Настройки.Отбор, 
					ПолеРасшифровки.Ключ, 
					ПрименяемыйВидСравнения, 
					ПолеРасшифровки.Значение.Значение
				);
				
		КонецЕсли;
				
	КонецЦикла;

КонецПроцедуры

// Определяет вид сравнения подходящий для отбора по переданному полю расшифровки.
// В качестве значения отбора, рассматривается значение поля расшифровки.
// Параметры:
//  ПолеРасшифровки	 - ЗначениеПоляРасшифровкиКомпоновкиДанных	 - Значение расшифровки для которого нужно определить вид сравнения.
// 
// Возвращаемое значение:
//  ВидСравненияКомпоновкиДанных - Вид сравнения подходящий для значения поля расшифровки.
//
Функция ВидСравненияДляПоляРасшифровки(ПолеРасшифровки)
	
	ЗначениеПоляРасшифровки = ПолеРасшифровки.Значение;
	ПрименяемыйВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	Если ПолеРасшифровки.Иерархия Тогда
		ПрименяемыйВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли НЕ ЗначениеЗаполнено(ЗначениеПоляРасшифровки) Тогда
		ПрименяемыйВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли ТипЗнч(ЗначениеПоляРасшифровки) = Тип("Строка") Тогда
		ПрименяемыйВидСравнения = ВидСравненияКомпоновкиДанных.Содержит;
	ИначеЕсли Истина <> "ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеПоляРасшифровки)" Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеПоляРасшифровки, "ЭтоГруппа") Тогда
			Если ЗначениеПоляРасшифровки.ЭтоГруппа Тогда
				ПрименяемыйВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЗначениеПоляРасшифровки, "Родитель")
			И НЕ ЗначениеЗаполнено(ЗначениеПоляРасшифровки.Родитель) Тогда
			ПрименяемыйВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
		КонецЕсли;
		
	КонецЕсли;
	Возврат ПрименяемыйВидСравнения;

КонецФункции

// Проверяет есть ли в коллекции отборов, элемент устанавливающий такой же или более точный отбор по переданному полю.
//
// Параметры:
//  Поле					 - Строка						 - Имя поля левого значения, по которому предполагается наложить отбор.
//  ПрименяемыйВидСравнения	 - ВидСравненияКомпоновкиДанных	 - Вид сравнения предполагаемого отбора.
//  Отбор					 - ОтборКомпоновкиДанных 		 - Проверяемый отбор.
// 
// Возвращаемое значение:
//  Булево - Истина - если более точного отбора в коллекции нет, и отбор имеет смысл, в противном случае - ложь.
//
Функция ОтборПоПолюИмеетСмысл(Поле, ПрименяемыйВидСравнения, Отбор)
	
	ПолеОтбора = Новый ПолеКомпоновкиДанных(Поле);
	
	Для Каждого ЭлементОтбора Из Отбор.Элементы Цикл
		
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Возврат ОтборПоПолюИмеетСмысл(Поле, ПрименяемыйВидСравнения, ЭлементОтбора);
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение <> ПолеОтбора Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно
			ИЛИ ЭлементОтбора.ВидСравнения = ПрименяемыйВидСравнения Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;

КонецФункции

Функция СкопироватьЭлементыПоНастройкамИзРасшифровки(НастройкиПриемник, НастройкиИсточник) Экспорт 
	
	//Отборы полностью заменяем на отбор расшифровки, в отчете приемнике следует очистить от недоступных
	НастройкиПриемник.Отбор.Элементы.Очистить();
	КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(НастройкиПриемник.Отбор, НастройкиИсточник.Отбор);
	
	Для каждого ПараметрИсточник Из НастройкиИсточник.ПараметрыДанных.Элементы  Цикл	
		Если ПараметрИсточник.Использование Тогда
			
			ПараметрПриемник = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрИсточник.Параметр);
			Если ПараметрПриемник <> Неопределено Тогда
				ПараметрПриемник.Значение = ПараметрИсточник.Значение;
			КонецЕсли;
			
		КонецЕсли;	
	КонецЦикла;
				
КонецФункции

Процедура ЗаполнитьСценарийОтчета(ОтчетОбъект) Экспорт
	
	Сценарий = УчетМСФОПовтИспУХ.ПолучитьСценарийМСФО();
		
	Для каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		
		Если Вариант.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Сценарий")) <> Неопределено Тогда
			Вариант.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий", Сценарий);
		КонецЕсли;
		
		Для каждого Отбор Из Вариант.Настройки.Отбор.Элементы Цикл
			Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сценарий") Тогда
				Отбор.ПравоеЗначение = Сценарий;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ДобавитьИзменитьЭлементОтбора(ОбластьПоискаДобавления,
								ИмяПоля = Неопределено,
								Представление = Неопределено,
								ПравоеЗначение = Неопределено,
								ВидСравнения = Неопределено,
								Использование = Неопределено,
								РежимОтображения = Неопределено,
								ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
								
	КоличествоИзмененных = ОбщегоНазначенияКлиентСервер
								.ИзменитьЭлементыОтбора(
									ОбластьПоискаДобавления, 
									ИмяПоля, 
									Представление, 
									ПравоеЗначение, 
									ВидСравнения, 
									Использование, 
									РежимОтображения, 
									ИдентификаторПользовательскойНастройки
								);

	Если КоличествоИзмененных = 0 Тогда
		ОбщегоНазначенияКлиентСервер
			.ДобавитьЭлементКомпоновки(
				ОбластьПоискаДобавления, 
				ИмяПоля, 				
				ВидСравнения, 
				ПравоеЗначение, 				
				Представление, 
				Использование, 
				РежимОтображения, 
				ИдентификаторПользовательскойНастройки
			);
	КонецЕсли;							
								
КонецФункции

Процедура Настройки_Отбор_Счет(Настройки, КлючВарианта = "ОСВ", ВидСравненияКД = Неопределено) Экспорт 

	ПоСчету = СтрНайти(КлючВарианта, "Счет") > 0;
	
	Если ВидСравненияКД = Неопределено Тогда		
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Счета"));
		Если ЗначениеПараметра = Неопределено Тогда
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВИерархии;
		ИначеЕсли ТипЗнч(ЗначениеПараметра.Значение) = Тип("ПланСчетовСсылка.МСФО") Тогда 
			ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
		Иначе	
			ВидСравненияКД = ?((ЗначениеПараметра.Значение <> Неопределено) И (ЗначениеПараметра.Значение.Количество() > 1), 
								ВидСравненияКомпоновкиДанных.ВИерархии, ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;		
	КонецЕсли;
		
	ДобавитьИзменитьЭлементОтбора(
			Настройки.Отбор, 
			"Счет", 
			, 
			Новый ПолеКомпоновкиДанных("ПараметрыДанных.Счет"), 
			ВидСравненияКД, 
			ПоСчету,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный
		);

КонецПроцедуры

Процедура ДонастроитьНастройкиПоВарианту(НовыеНастройки, НастройкиВарианта) Экспорт
	
	Для каждого ЭлементСтруктурыИсточник Из НастройкиВарианта.Структура Цикл
		ЭлементСтруктурыПриемник = НовыеНастройки.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
		ТиповыеОтчетыУХ.СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
	КонецЦикла;
	
	РежимыПН = Новый Структура("Отбор,Структура");
	Для каждого РежимПН Из РежимыПН Цикл
		ЗаполнитьЗначенияСвойств(НовыеНастройки[РежимПН.Ключ], НастройкиВарианта[РежимПН.Ключ], 
			"ИдентификаторПользовательскойНастройки,ПредставлениеПользовательскойНастройки,РежимОтображения");
	КонецЦикла;
	
	ТиповыеОтчетыУХ.СкопироватьЭлементы(НовыеНастройки.Отбор, 				НастройкиВарианта.Отбор, , Ложь);
	ТиповыеОтчетыУХ.СкопироватьЭлементы(НовыеНастройки.УсловноеОформление, 	НастройкиВарианта.УсловноеОформление, , Ложь);
	
	//удалим Параметр-период который будет скопирован из варианта
	НовыеНастройки.ПараметрыДанных.Элементы.Удалить(НовыеНастройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период")));
	
	ТиповыеОтчетыУХ.СкопироватьЭлементы(НовыеНастройки.ПараметрыДанных, 	НастройкиВарианта.ПараметрыДанных, , Ложь);
	
	ПараметрыКД = НовыеНастройки.ПараметрыДанных.Элементы;
	КоличествоПараметров = ПараметрыКД.Количество();
	Для ОбратныйИндекс = 0 По (КоличествоПараметров - 1) Цикл
		
		ПараметрКД = ПараметрыКД.Получить(КоличествоПараметров - 1 - ОбратныйИндекс);
		Если Не ПараметрКД.Использование И (ПараметрКД.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный) Тогда
			ПараметрыКД.Удалить(ПараметрКД);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗапомнитьДанныеРасшифровки(ДополнительныеСвойства, ДанныеРасшифровки, АдресСКД) Экспорт

	Если Не ДополнительныеСвойства.Свойство("РасшифровкиРаскрытий") Тогда
		ДополнительныеСвойства.Вставить("РасшифровкиРаскрытий", Новый Структура);
	КонецЕсли;
	
	ИмяРасшифровки = "Расшифровка_" + Формат(ДополнительныеСвойства.РасшифровкиРаскрытий.Количество()+1, "ЧГ=");
	ПараметрыРасшифровки = Новый Структура("ДанныеРасшифровки,АдресСКД", ДанныеРасшифровки, АдресСКД);
	ДополнительныеСвойства.РасшифровкиРаскрытий.Вставить(ИмяРасшифровки, ПараметрыРасшифровки);
	
	Возврат ИмяРасшифровки;
	
КонецФункции

Процедура ВставитьОбластьРасшифровки(ТабДокПриемник, ТабДокРасшифровка, ИмяОбласти = Неопределено, ЗаголовокГруппировки = Неопределено, НомерСтрокиДобавления) Экспорт
	
	КоличествоДобавляемых = ТабДокРасшифровка.ВысотаТаблицы;
	
	ОбластьРасшифровки = ТабДокРасшифровка.Область(1, , КоличествоДобавляемых);	
	ОбластьПриемник = ТабДокПриемник.Область(НомерСтрокиДобавления+1, , НомерСтрокиДобавления + КоличествоДобавляемых);
	
	ТабДокПриемник.ВставитьОбласть(ОбластьРасшифровки, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоГоризонтали, Ложь);
		
	Для Колонка = 1 По ТабДокПриемник.ШиринаТаблицы Цикл
		ТабДокПриемник.Область(НомерСтрокиДобавления+1, Колонка, НомерСтрокиДобавления + КоличествоДобавляемых, Колонка).ШиринаКолонки 
			= ТабДокПриемник.Область(НомерСтрокиДобавления, Колонка, НомерСтрокиДобавления, Колонка).ШиринаКолонки;
	КонецЦикла;

	ДобавленнаяОбласть = ТабДокПриемник.Область(НомерСтрокиДобавления+1, , НомерСтрокиДобавления + КоличествоДобавляемых);
	
	Если ИмяОбласти <> Неопределено Тогда
		ДобавленнаяОбласть.Имя = ИмяОбласти;
	КонецЕсли;	
	
	Если ЗаголовокГруппировки <> Неопределено Тогда
		ДобавленнаяОбласть.Сгруппировать(ЗаголовокГруппировки);
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеФункции

Функция ПолучитьПустойУникальныйИдентификатор() Экспорт
	Возврат Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
КонецФункции

Функция ПоляОбъекта(Объект, ИменаПолей) Экспорт

	КонтекстОбъекта = Новый Структура(ИменаПолей);
	ЗаполнитьЗначенияСвойств(КонтекстОбъекта, Объект);
	Возврат КонтекстОбъекта;

КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура УправлениеФормой(ФормаДокумента, ИмяТЧ = "ВНА", ОбновитьВидимостьПериодаОтчета = Истина, ИспользоватьПериодОтчета = Неопределено) Экспорт
	
	Элементы 			= ФормаДокумента.Элементы;
	Объект 				= ФормаДокумента.Объект;
	КэшируемыеЗначения 	= ФормаДокумента.КэшируемыеЗначения;
	
	ОбновитьРеквизитыУП(ФормаДокумента);
	
	ИспользоватьДанныеУчетнойСистемы = Ложь;	
	Если ЗначениеЗаполнено(КэшируемыеЗначения.ПланСчетовНСБУ) Тогда
		
		ТипБД = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(КэшируемыеЗначения.ПланСчетовНСБУ, "Владелец");
		ИспользоватьДанныеУчетнойСистемы = (ТипБД = ПредопределенноеЗначение("Справочник.ТипыБазДанных.ТекущаяИБ"));

	КонецЕсли;
	
	КонтекстЗаполнения = Новый Структура("РежимЗаполнения");
	ЗаполнитьЗначенияСвойств(КонтекстЗаполнения, Объект);	
	ВидЗаполнения = УчетМСФОПовтИспУХ.ПолучитьВидыУчетаРежимаЗаполнения(КонтекстЗаполнения.РежимЗаполнения);	
	
	// Колонки ТЧ	
	Для каждого КолонкаОС Из ПолучитьСоответствиеКолонок(ФормаДокумента) Цикл
		
		Если КолонкаОС.Значение.Свойство("НСБУ") Тогда
			ИмяЭлемента = ПолучитьИмяЭлементаРеквизита(КолонкаОС, "НСБУ", ИмяТЧ);
			Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
				Элементы[ИмяЭлемента].ТолькоПросмотр = НЕ ВидЗаполнения.ЕстьНСБУ;		
			КонецЕсли;
			
		КонецЕсли; 
		
		Если КолонкаОС.Значение.Свойство("МСФО") Тогда
			ИмяЭлемента = ПолучитьИмяЭлементаРеквизита(КолонкаОС, "МСФО", ИмяТЧ);
			Если Элементы.найти(ИмяЭлемента) <> Неопределено Тогда
				Элементы[ИмяЭлемента].Видимость = ВидЗаполнения.ЕстьМСФО;			
			КонецЕсли;
		КонецЕсли;
		
		Если КолонкаОС.Значение.Свойство("Расхождение") Тогда
			ИмяЭлемента = ПолучитьИмяЭлементаРеквизита(КолонкаОС, "Расхождение", ИмяТЧ);
			Если Элементы.Найти(ИмяЭлемента) <> Неопределено Тогда
				Элементы[ИмяЭлемента].Видимость = ВидЗаполнения.ЕстьМСФО;			
			КонецЕсли;			
		КонецЕсли;		
		
	КонецЦикла;	
	
	// команды формы
	Элементы.ФормаСоздатьДокументМСФО.Видимость = ВидЗаполнения.ЕстьНСБУ И НЕ ВидЗаполнения.ЕстьМСФО;
	
	// группы команд ТЧ ВНА
	Элементы.ЗаполнитьМСФО.Видимость = ВидЗаполнения.ЕстьМСФО;
	Элементы.ЗаполнитьНСБУ.Видимость = ВидЗаполнения.ЕстьНСБУ;
	
	// команды НСБУ
	Элементы.НСБУЗаполнитьИзУчетнойСистемы.Видимость = (ВидЗаполнения.ЕстьНСБУ) И ИспользоватьДанныеУчетнойСистемы;
	
	// команды МСФО
	УстановитьВидимость(Элементы, ИмяТЧ + "ОтобратьСтрокиРасхождений", ВидЗаполнения.ЕстьМСФО);
	УстановитьВидимость(Элементы, ИмяТЧ + "ОтобратьСтрокиИзменений", ВидЗаполнения.ЕстьМСФО);
	
	ЭлементСторнировать = Элементы.Найти("ВНАСторнироватьДанныеНСБУ");
	Если ЭлементСторнировать <> Неопределено Тогда
		ЭлементСторнировать.Видимость = Не КэшируемыеЗначения.ФормироватьПроводкиМСФО И ВидЗаполнения.ЕстьНСБУ;
	КонецЕсли;
	
	// Поле ПериодОтчета
	Если ОбновитьВидимостьПериодаОтчета Тогда
		
		Элементы.ПериодОтчета.Видимость = Не КэшируемыеЗначения.ФормироватьПроводкиМСФО;
		Если КэшируемыеЗначения.ФормироватьПроводкиМСФО Тогда
			Объект.ПериодОтчета = Неопределено;
		КонецЕсли;	
	
	КонецЕсли;
	
	ОбновитьВидимостьДокументыОснования(ФормаДокумента);
	
	ФормаДокумента.КэшируемыеЗначения.Вставить("ВидЗаполнения", 					ВидЗаполнения);
	ФормаДокумента.КэшируемыеЗначения.Вставить("ИспользоватьДанныеУчетнойСистемы", 	ИспользоватьДанныеУчетнойСистемы);
	
КонецПроцедуры

Процедура ОбновитьВидимостьДокументыОснования(ФормаДокумента) Экспорт
	
	Элементы = ФормаДокумента.Элементы;
	Объект = ФормаДокумента.Объект;
		
	// ГруппаДокументыОснования
	Если Объект.ДокументыОснования.Количество() = 0 Тогда
		Элементы.СтраницыДокументыОснования.ТекущаяСтраница = Элементы.СтраницаДокументОснованиеНеУказан;
		ФормаДокумента.ДокументОснование = Неопределено;
	ИначеЕсли Объект.ДокументыОснования.Количество() > 1 Тогда
		Элементы.СтраницыДокументыОснования.ТекущаяСтраница = Элементы.СтраницаДокументыОснования;
		ФормаДокумента.ТекстДокументыОснования = "";
		Для Каждого СтрокаТаблицы Из ФормаДокумента.Объект.ДокументыОснования Цикл
			ФормаДокумента.ТекстДокументыОснования = ФормаДокумента.ТекстДокументыОснования 
			+ ?(ФормаДокумента.ТекстДокументыОснования = "", "", ", " + Символы.ПС) + СтрокаТаблицы.ДокументОснование;
		КонецЦикла;
	Иначе
		Элементы.СтраницыДокументыОснования.ТекущаяСтраница = ФормаДокумента.Элементы.СтраницаДокументОснование;
		Если Объект.ДокументыОснования.Количество() > 0 Тогда
			ФормаДокумента.ДокументОснование = Объект.ДокументыОснования[0].ДокументОснование;
		Иначе
			ФормаДокумента.ДокументОснование = Неопределено;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВидимостьПодробно(Форма, ИзменитьПометку = Ложь, ИмяТЧ = "ВНА", ИмяГруппыПодробно = "ГруппаПодробно", ИмяКомандыПодробно = "ПоказатьПодробно") Экспорт
	
	Если Форма.Объект[ИмяТЧ].Количество() = 0 Тогда
	    НоваяПометка = Ложь;
	ИначеЕсли ИзменитьПометку Тогда
		НоваяПометка = Не Форма.Элементы[ИмяКомандыПодробно].Пометка;
	Иначе 
		НоваяПометка = Форма.Элементы[ИмяКомандыПодробно].Пометка;
	КонецЕсли;
	
	Если Форма.Элементы[ИмяКомандыПодробно].Пометка <> НоваяПометка Тогда
		Форма.Элементы[ИмяКомандыПодробно].Пометка = НоваяПометка;	
	КонецЕсли;
	
	Если Форма.Элементы[ИмяГруппыПодробно].Видимость <> НоваяПометка Тогда
		Форма.Элементы[ИмяГруппыПодробно].Видимость = НоваяПометка;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьСоответствиеКолонок(ФормаДокумента)
	
	Перем СоответствиеКолонок;
	
	Если ФормаДокумента.КэшируемыеЗначения.Свойство("СоответствиеКолонок", СоответствиеКолонок) Тогда
		Возврат СоответствиеКолонок;
	КонецЕсли;
	 
    Контекст = Новый Структура("СоответствиеКолонок");
	ЗаполнитьЗначенияСвойств(Контекст, ФормаДокумента);
	Если Не ЗначениеЗаполнено(Контекст.СоответствиеКолонок) Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Возврат Контекст.СоответствиеКолонок;
	
КонецФункции

Процедура ОбновитьРеквизитыУП(Форма, ДатаУчетнойПолитики = Неопределено, ОрганизацияУП = Неопределено) Экспорт

	Организация = ?(ОрганизацияУП = Неопределено, Форма.Объект.Организация, ОрганизацияУП);
	ДатаУП = ?(ДатаУчетнойПолитики = Неопределено, Форма.Объект.Дата, ДатаУчетнойПолитики);
	Сценарий = Форма.Объект.Сценарий;

	РеквизитыУП = МСФОВызовСервераУХ.РеквизитыДляФормыУП(Организация, ДатаУП, Сценарий);
	
	Форма.КэшируемыеЗначения.Вставить("ФункциональнаяВалюта", 		РеквизитыУП.ФункциональнаяВалюта);
	Форма.КэшируемыеЗначения.Вставить("ПланСчетовНСБУ", 			РеквизитыУП.ПланСчетов);	
	Форма.КэшируемыеЗначения.Вставить("ПланСчетовМСФО",				РеквизитыУП.ПланСчетовМСФО);
	Форма.КэшируемыеЗначения.Вставить("ШаблонТрансляции",			РеквизитыУП.ШаблонТрансляции);
    Форма.КэшируемыеЗначения.Вставить("ФормироватьПроводкиМСФО",	РеквизитыУП.ФормироватьПроводкиМСФО);
	Форма.КэшируемыеЗначения.Вставить("ИспользуютсяТК", 			Не РеквизитыУП.ФормироватьПроводкиМСФО);
	
	ЗаполнитьЗначенияСвойств(Форма, РеквизитыУП);
	
КонецПроцедуры

#КонецОбласти

#Область ТаблицаФормыПроводки

//Устарела**
Процедура ПриИзмененииСчетаПроводки(Форма, ДтКт = "Дт", ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", СтрокаТаблицы = Неопределено, ПересчитатьСтроку = Истина) Экспорт

	Если СтрокаТаблицы = Неопределено Тогда
		
		ИдСтроки = Форма.Элементы[ИмяТЧ].ТекущаяСтрока;
		Если ИдСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТабПроводки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТЧ);
		СтрокаТаблицы = ТабПроводки.НайтиПоИдентификатору(ИдСтроки);
	
	КонецЕсли;
	
	ПоляФормы = Новый Структура("Субконто1,Субконто2,Субконто3");
	ПоляФормы.Субконто1 = ИмяТЧ + "Субконто" + ДтКт + "1";
	ПоляФормы.Субконто2 = ИмяТЧ + "Субконто" + ДтКт + "2";
	ПоляФормы.Субконто3 = ИмяТЧ + "Субконто" + ДтКт + "3";
	МСФОКлиентСерверУХ.ПриВыбореСчета(СтрокаТаблицы["Счет" + ДтКт], Форма, ПоляФормы, Неопределено, Истина, Ложь);
	
	ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Валютный,Количественный,Организация");
	ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
	ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
	ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";	
	ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
	ПоляОбъекта.Количественный = "Количественный" + ДтКт;
	ПоляОбъекта.Организация    = Форма.Объект.Организация;
	МСФОКлиентСерверУХ.ПриИзмененииСчета(СтрокаТаблицы["Счет" + ДтКт], СтрокаТаблицы, ПоляОбъекта, Истина, , Ложь);
	
	Если ПересчитатьСтроку Тогда
		
		ПересчетСуммыПоКурсуДт = (ДтКт = "Кт"); // пересчитать валютную сумму изменившегося счета на основании другой стороны
		СтруктураПроводки = СтруктураДанныхПроводки(СтрокаТаблицы);
		ПересчитатьСуммыПроводки(Форма, СтрокаТаблицы, "СуммаВВалюте" + ДтКт);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураПроводки);
		
		ИзменитьПараметрыВыбораПолейСубконтоФормы(Форма, ПутьКДаннымТЧ, ИмяТЧ, ДтКт);
	
	КонецЕсли;
	
	ЗаполнитьНадписиВПроводке(СтрокаТаблицы);
	
КонецПроцедуры

Процедура ПриИзмененииСубконто(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", ДтКт = "") Экспорт
	
	ИдСтроки = Форма.Элементы[ИмяТЧ].ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабПроводки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТЧ);
	СтрокаТаблицы = ТабПроводки.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", ИмяТЧ + "СубконтоДт%Индекс%", ПараметрыДокумента);
		Валюта = ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(СтрокаТаблицы.ВалютаДт, ПараметрыДокумента);
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрокаТаблицы.ВалютаДт = Валюта;
		КонецЕсли;
	КонецЕсли;
	
	Если ДтКт <> "Дт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", ИмяТЧ + "СубконтоКт%Индекс%", ПараметрыДокумента);
		Валюта = ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(СтрокаТаблицы.ВалютаКт, ПараметрыДокумента);
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрокаТаблицы.ВалютаКт = Валюта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура НачалоВыбораСубконто(Форма, ИмяТЧ = "Проводки", ДтКт= "Дт", Элемент, СтандартнаяОбработка) Экспорт

	Элементы = Форма.Элементы;
	
	ТекущиеДанные      = Элементы[ИмяТЧ].ТекущиеДанные;
	ПараметрыДокумента = ПолучитьСписокПараметров(Форма, ТекущиеДанные, "Субконто" + ДтКт + "%Индекс%", "Счет" + ДтКт);
	МСФОКлиентСерверУХ.НачалоВыбораЗначенияСубконто(Форма, Элемент, СтандартнаяОбработка, ПараметрыДокумента);

КонецПроцедуры

Процедура ПересчитатьСуммыПроводки(Форма, Проводка, Знач ИсточникПересчета = "СуммаВВалютеДт") Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Дата = Форма.Объект.Дата;
	ФункциональнаяВалюта = Форма.КэшируемыеЗначения.ФункциональнаяВалюта;
	ВалютаОтчетности = Форма.КэшируемыеЗначения.ВалютаПредоставленияОтчетности;
	
	Если Не ЗначениеЗаполнено(ИсточникПересчета) Тогда		
		Если ЗначениеЗаполнено(Проводка.ВалютаКт) И (Проводка.СуммаВВалютеКт <> 0) Тогда
			ИсточникПересчета = "СуммаВВалютеКт";					
		ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаДт) И (Проводка.СуммаВВалютеДт <> 0) Тогда
			ИсточникПересчета = "СуммаВВалютеДт";					
		Иначе
			ИсточникПересчета = "СуммаВВалютеУчета";					
		КонецЕсли;
	КонецЕсли;
	
	Если ИсточникПересчета = "СуммаВВалютеУчета" Тогда 
		
		Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
			Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаДт);
			ИсточникПересчета = "СуммаВВалютеДт";
		ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда 
			Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, Проводка.ВалютаКт);
			ИсточникПересчета = "СуммаВВалютеКт";
		Иначе 
			Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеУчета, ФункциональнаяВалюта, Дата, ВалютаОтчетности);
		КонецЕсли;
		
	ИначеЕсли ИсточникПересчета = "СуммаВВалютеОтчетности" Тогда 
		
		Если ЗначениеЗаполнено(Проводка.ВалютаДт) Тогда
			Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеОтчетности, ВалютаОтчетности, Дата, Проводка.ВалютаДт);
			ИсточникПересчета = "СуммаВВалютеДт";
		ИначеЕсли ЗначениеЗаполнено(Проводка.ВалютаКт) Тогда 
			Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеОтчетности, ВалютаОтчетности, Дата, Проводка.ВалютаКт);
			ИсточникПересчета = "СуммаВВалютеКт";
		Иначе 
			Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеОтчетности, ВалютаОтчетности, Дата, ФункциональнаяВалюта);
		КонецЕсли;
		
	КонецЕсли;	
		
	Если ИсточникПересчета = "СуммаВВалютеКт" Тогда
		
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, ФункциональнаяВалюта);
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, ВалютаОтчетности);
		Проводка.СуммаВВалютеДт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеКт, Проводка.ВалютаКт, Дата, Проводка.ВалютаДт);
		
	ИначеЕсли ИсточникПересчета = "СуммаВВалютеДт" Тогда
		
		Проводка.СуммаВВалютеУчета = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, ФункциональнаяВалюта);
		Проводка.СуммаВВалютеОтчетности = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, ВалютаОтчетности);
		Проводка.СуммаВВалютеКт = ПересчетСуммыПоКурсу(Проводка.СуммаВВалютеДт, Проводка.ВалютаДт, Дата, Проводка.ВалютаКт);

	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(ЗначениеВалютыВСтроке, ПараметрыДокумента) Экспорт
	
	Договор = Неопределено;
	Счет = Неопределено;
	
	Если НЕ ПараметрыДокумента.Свойство("ДоговорКонтрагента", Договор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если НЕ ПараметрыДокумента.Свойство("СчетУчета", Счет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Счет, "Валютный") Тогда
		Валюта = ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(Договор, "ВалютаВзаиморасчетов");
		Возврат Валюта;
	КонецЕсли;
	
КонецФункции

#Область ТаблицаФормыПроводки_ВспомогательныеПроцедурыФункции

Функция ПересчетСуммыПоКурсу(Знач ВалютнаяСумма, Знач Валюта, Знач Дата, Знач ВалютаКон)
	
	Если Не ЗначениеЗаполнено(ВалютаКон) Тогда
		Возврат 0;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВалютнаяСумма) Тогда
		Возврат 0;
	КонецЕсли;
	
	Возврат РаботаСКурсамиВалютУХ.ПересчитатьВВалюту(ВалютнаяСумма, Валюта, ВалютаКон, Дата);
	
КонецФункции

Процедура ЗаполнитьНадписиВПроводке(Проводка, ЕстьНадписиНУ = Ложь) Экспорт
	
	Проводка.НадписьКоличествоДт = ?(Проводка.КоличественныйДтДоступность, НСтр("ru = 'Кол.:'"), "");
	Проводка.НадписьКоличествоКт = ?(Проводка.КоличественныйКтДоступность, НСтр("ru = 'Кол.:'"), "");

	Если ЕстьНадписиНУ Тогда
		
		Проводка.НадписьНУ = НСтр("ru = 'НУ:'");
		Проводка.НадписьПР = НСтр("ru = 'ПР:'");
		Проводка.НадписьВР = НСтр("ru = 'ВР:'");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПараметрыВыбораПолейСубконтоФормы(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", ДтКт = "")
	
	ИдСтроки = Форма.Элементы[ИмяТЧ].ТекущаяСтрока;
	Если ИдСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабПроводки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТЧ);
	СтрокаТаблицы = ТабПроводки.НайтиПоИдентификатору(ИдСтроки);
	
	Если ДтКт <> "Кт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", "СчетДт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоДт%Индекс%", ИмяТЧ + "СубконтоДт%Индекс%", ПараметрыДокумента);
		Валюта = ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(СтрокаТаблицы.ВалютаДт, ПараметрыДокумента);
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрокаТаблицы.ВалютаДт = Валюта;
		КонецЕсли;
	КонецЕсли;
	
	Если ДтКт <> "Дт" Тогда
		ПараметрыДокумента = ПолучитьСписокПараметров(Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", "СчетКт");
		МСФОКлиентСерверУХ.ИзменитьПараметрыВыбораПолейСубконто(
			Форма, СтрокаТаблицы, "СубконтоКт%Индекс%", ИмяТЧ + "СубконтоКт%Индекс%", ПараметрыДокумента);
		Валюта = ЗаполнитьВалютуОперацииМСФОПоСубконтоДоговор(СтрокаТаблицы.ВалютаКт, ПараметрыДокумента);
		Если ЗначениеЗаполнено(Валюта) Тогда
			СтрокаТаблицы.ВалютаКт = Валюта;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СтруктураДанныхПроводки(ТекущиеДанные)

	СтруктураПроводки = Новый Структура("НомерСтроки,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,
		|КоличествоДт,ВалютаДт,СуммаВВалютеДт,
		|СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|КоличествоКт,ВалютаКт,СуммаВВалютеКт,
		|СуммаВВалютеУчета,СуммаВВалютеОтчетности,Содержание");
	ЗаполнитьЗначенияСвойств(СтруктураПроводки, ТекущиеДанные);

	Возврат СтруктураПроводки;

КонецФункции

Функция ПолучитьСписокПараметров(Форма, ТекущиеДанные, ШаблонИмяПоляОбъекта, ИмяПоляСчетУчета) 

	СписокПараметров = Новый Структура("Организация,СчетУчета,ОстаткиОбороты",
		Форма.Объект.Организация, ТекущиеДанные[ИмяПоляСчетУчета], "Кт");
	ТипыДоговора = БухгалтерскийУчетКлиентСерверПереопределяемый.ПолучитьОписаниеТиповДоговора().Типы();
	Для Индекс = 1 По 3 Цикл
		ИмяПоля    = СтрЗаменить(ШаблонИмяПоляОбъекта, "%Индекс%", Индекс);
		ДанныеПоля = ТекущиеДанные[ИмяПоля];
		ТипПоля    = ТипЗнч(ДанныеПоля);
		Если ТипПоля = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ДанныеПоля);
		ИначеЕсли ТипыДоговора.Найти(ТипПоля) <> Неопределено Тогда
			СписокПараметров.Вставить("ДоговорКонтрагента", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Номенклатура") Тогда
			СписокПараметров.Вставить("Номенклатура", ДанныеПоля);
		ИначеЕсли ТипПоля = Тип("СправочникСсылка.Склады") Тогда
			СписокПараметров.Вставить("Склад", ДанныеПоля);
		КонецЕсли;
	КонецЦикла;

	Возврат СписокПараметров;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ТаблицаФормыКорректировки

Процедура ПриИзмененииПоказателяКорректировки(Форма, ПутьКДаннымТЧ = "Объект.Корректировки", ИмяТЧ = "Корректировки", СтрокаТаблицы = Неопределено, СкрыватьСубконто = Неопределено) Экспорт

	Элементы = Форма.Элементы;
	
	Если СтрокаТаблицы = Неопределено Тогда
		
		ИдСтроки = Элементы[ИмяТЧ].ТекущаяСтрока;
		Если ИдСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ТабПроводки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТЧ);
		СтрокаТаблицы = ТабПроводки.НайтиПоИдентификатору(ИдСтроки);
		
	КонецЕсли;
	
	ОписанияПоказателей = Новый Соответствие;//МСФОВызовСервераУХ.ОписанияПоказателей(СтрокаТаблицы.ПоказательОтчета);
	
	Пок = ОписанияПоказателей.Получить(СтрокаТаблицы.ПоказательОтчета);
	
	КоличествоАналитик = 6;
	Для й = 1 По КоличествоАналитик Цикл
		
		НомерТекстом = Формат(й, "ЧГ=");
		АналитикаТекст = "Аналитика" + НомерТекстом; 
		
		отАналитики = Пок["ВидАналитики" + НомерТекстом + "ТипЗначения"];
		отАналитики = ?(отАналитики = NULL, Неопределено, отАналитики);
		СкрытьСубконто = НужноСкрытьСубконто(СкрыватьСубконто, отАналитики);
		
		СтрокаТаблицы[АналитикаТекст + "Доступность"] = Не СкрытьСубконто;
		Если отАналитики = Неопределено Тогда
			СтрокаТаблицы[АналитикаТекст] = Неопределено;
		Иначе	
			СтрокаТаблицы[АналитикаТекст] = отАналитики.ПривестиЗначение(СтрокаТаблицы[АналитикаТекст]);
		КонецЕсли;
		
		Если Не СкрытьСубконто Тогда
			
			Элементы[ИмяТЧ + АналитикаТекст].ОграничениеТипа = отАналитики;
			Элементы[ИмяТЧ + АналитикаТекст].ПодсказкаВвода	 = Пок["ВидАналитики" + НомерТекстом];
		
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаТаблицы["АналитикаВалютаДоступность"] = Пок.АналитикаВалютаДоступность;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
