#Область ПрограммныйИнтерфейс

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций;
//  - возможность выполнения в различных режимах работы программы;
//  - прочие параметры.
//
// Параметры:
//  Настройки - ТаблицаЗначений - таблица значений с колонками:
//    * РегламентноеЗадание - ОбъектМетаданныхРегламентноеЗадание - регламентное задание.
//    * ФункциональнаяОпция - ОбъектМетаданныхФункциональнаяОпция - функциональная опция,
//        от которой зависит регламентное задание.
//    * ЗависимостьПоИ      - Булево - если регламентное задание зависит более чем
//        от одной функциональной опции и его необходимо включать только тогда,
//        когда все функциональные опции включены, то следует указывать Истина
//        для каждой зависимости.
//        По умолчанию Ложь - если хотя бы одна функциональная опция включена,
//        то регламентное задание тоже включено.
//    * ВключатьПриВключенииФункциональнойОпции - Булево, Неопределено - если Ложь, то при
//        включении функциональной опции регламентное задание не будет включаться. Значение
//        Неопределено соответствует значению Истина.
//        По умолчанию - Неопределено.
//    * ДоступноВПодчиненномУзлеРИБ - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в РИБ.
//        По умолчанию - Неопределено.
//    * ДоступноВАвтономномРабочемМесте - Булево, Неопределено - Истина или Неопределено, если регламентное
//        задание доступно в автономном рабочем месте.
//        По умолчанию - Неопределено.
//    * ДоступноВМоделиСервиса - Булево, Неопределено - Ложь, если необходимо блокировать выполнение регламентного
//        задания (в т.ч. задания очереди) в информационной базе с включенным использованием разделителя.
//        Значение Неопределено трактуется как Истина.
//        По умолчанию - Неопределено.
//    * РаботаетСВнешнимиРесурсами  - Булево - Истина, если регламентное задание модифицирует данные
//        во внешних источниках (получение почты, синхронизация данных и т.п.). Не следует устанавливать
//        значение Истина для регламентных заданий, не модифицирующих данные во внешних источниках.
//        Например, регламентное задание ЗагрузкаКурсовВалют. Регламентные задания, работающие с внешними ресурсами,
//        автоматически отключаются в копии информационной базы. По умолчанию - Ложь.
//    * Параметризуется             - Булево - Истина, если регламентное задание параметризованное.
//        По умолчанию - Ложь.
//
// Пример:
//	Настройка = Настройки.Добавить();
//	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОбновлениеСтатусовДоставкиSMS;
//	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьПочтовыйКлиент;
//	Настройка.ДоступноВМоделиСервиса = Ложь;
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ЗагрузкаСтавокМосПрайм;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОповещениеОНеобходимостиИзмененияСтатусаПретензии;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОповещениеОПриближенииСрокаОплаты;
	Настройка.РаботаетСВнешнимиРесурсами = Истина;
	
КонецПроцедуры

// Функция ПолучитьРегламентноеЗадание получает РегламентноеЗадание из информационной
// базы по строке уникального идентификатора.
//
// Параметры:
//  Идентификатор - Строка уникального идентификатора РегламентногоЗадания.
// 
// Возвращаемое значение:
//  РегламентноеЗадание.
//
Функция ПолучитьРегламентноеЗадание(Знач Идентификатор) Экспорт

	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Идентификатор));
	
	Если РегламентноеЗадание = Неопределено Тогда
		ВызватьИсключение( НСтр("ru = 'Задание не найдено в списке. Возможно, оно удалено другим пользователем.'") );
	КонецЕсли;
	
	Возврат РегламентноеЗадание;
	
КонецФункции // ПолучитьРегламентноеЗадание()

Процедура УстановитьРасписаниеРегламентногоЗадания(Знач Идентификатор, Знач ИдентификаторРасписание) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Расписание = ПолучитьИзВременногоХранилища(ИдентификаторРасписание);
	Задание = ПолучитьРегламентноеЗадание(Идентификатор);
	Задание.Расписание = Расписание;
	Задание.Записать();
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования вызывает исключение,
// если у пользователя нет права администрирования.
//
Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования()

	ВыполняетсяПроцедураОбработатьРегламентныеЗадания = ХранилищеОбщихНастроек.Загрузить("ВыполняетсяПроцедураОбработатьРегламентныеЗадания");
	Если ТипЗнч(ВыполняетсяПроцедураОбработатьРегламентныеЗадания) <> Тип("Булево") Тогда
		ВыполняетсяПроцедураОбработатьРегламентныеЗадания = Ложь;
	КонецЕсли;
	
	Если НЕ ВыполняетсяПроцедураОбработатьРегламентныеЗадания И
	     НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		
		ВызватьИсключение(НСтр("ru = 'У пользователя нет права администрирования.'"));
	КонецЕсли;
	
КонецПроцедуры // ВызватьИсключениеЕслиНетПраваАдминистрирования()


#КонецОбласти
