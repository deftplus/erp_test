
#Область ОбработчикиСобытий

Процедура ОбработкаПроведенияПриобретениеТоваровУслуг(
										ПТУОбъект,
										Отказ,
										РежимПроведения) Экспорт
	Если ПТУОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками") 
			И ЭтоДоговорСПланомПоставок(ПТУОбъект.Договор) Тогда
		ЗаполнитьДвиженияПланПоставокПТУ(ПТУОбъект, Отказ, РежимПроведения);
		ПоступлениеТоваровУслугЗаполнитьДвиженияЗаказовПоставщикам(
			ПТУОбъект, 
			Отказ, 
			РежимПроведения);
		ПоступлениеТоваровУслугЗаписатьВРегистрПоступлениеНоменклатуры(
			ПТУОбъект,
			Отказ, 
			РежимПроведения);
		ПоступлениеТоваровУслугЗаполнитьДвиженияПрослеживаемыеТоварыПоОКПД2(
			ПТУОбъект, 
			Отказ, 
			РежимПроведения);
			
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполненияПриобретениеТоваровУслуг(Источник, 
											ДанныеЗаполнения, 
											ТекстЗаполнения, 
											СтандартнаяОбработка) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
		Если ДанныеЗаполнения <> Неопределено
				И ТипЗнч(ДанныеЗаполнения) =
								Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Источник.ПоступлениеПоЗаказам = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РеализацияТоваровУслугУХПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Константы.ФормироватьВстречныйДокументУХ.Получить() = Ложь Тогда
		Возврат;
	КонецЕсли;
		
	РежимПроведение = РежимЗаписиДокумента.Проведение;
	РежимЗаписи = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "РежимЗаписи", РежимПроведение);
	Если РежимЗаписи <> РежимПроведение Тогда
		Возврат;//только для проведенных
	КонецЕсли;
	
	Если Источник.Контрагент.Пустая() Или Источник.Контрагент.ОрганизационнаяЕдиница.Пустая() Тогда
		Возврат;//контрагент не в базе	
	КонецЕсли;
	
	ФоновыеЗадания.Выполнить("УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПерезаполнитьВстречныйПТУ", 
								ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Источник.Ссылка));
	
КонецПроцедуры

#Область ДокументыВГО

Процедура ПерезаполнитьВстречныйПТУ(РТУ) Экспорт
	
	Док = ВстраиваниеУХВызовСервера.ПолучитьПТУ(РТУ);
	
	Если Не ЗначениеЗаполнено(Док) Тогда
		
		НовыйДокумент = Документы.ПриобретениеТоваровУслуг.СоздатьДокумент();
		
	ИначеЕсли Док.ПометкаУдаления Тогда
		
		Возврат;
		
	ИначеЕсли Не Док.Проведен Тогда
		
		НовыйДокумент = Док.ПолучитьОбъект();
		
	Иначе 
		
		ШаблонОшибки = НСтр("ru = 'Документ поступления <%1> не был перезаполнен, т.к. он был проведен'");
		Сообщить(СтрШаблон(ШаблонОшибки, Док, ОписаниеОшибки()));
		
		Возврат;
		
	КонецЕсли;
	
	ЗаполнитьПоступлениеТоваровУслугИзРеализации(НовыйДокумент, РТУ, "", Истина);
	
	Попытка
		
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);		
				
	Исключение
		
		ШаблонОшибки = НСтр("ru = 'Не удалось сформировать поступление по продаже <%1> по причине: %2'");
			Сообщить(СтрШаблон(ШаблонОшибки, Док, ОписаниеОшибки()));	
		
	КонецПопытки;

КонецПроцедуры

#КонецОбласти

Процедура ОбработкаПроведенияДокументаИсполненияДоговора(Источник, Отказ, РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ЗначениеЗаполнено(Источник.Договор) 
			И ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		Договор = Источник.Договор;
		Лот = ЦентрализованныеЗакупкиУХ.ПолучитьЛотДоговора(Договор);
		Если НЕ ЗначениеЗаполнено(Лот) Тогда
			// Записываем проводки только в рамках лота
			Возврат;
		КонецЕсли;
		
		СуммаДокумента = Источник.СуммаДокумента;
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		Если Источник.Валюта <> ВалютаРеглУчета Тогда
			КоэффициентПересчетаВалюты = РаботаСКурсамиВалют.ПересчитатьВВалюту(1, Источник.Валюта, ВалютаРеглУчета, Источник.Дата);
		Иначе
			КоэффициентПересчетаВалюты = 1;
		КонецЕсли;
		СуммаРуб = СуммаДокумента * КоэффициентПересчетаВалюты;
			
		НаборЗаписей = РегистрыСведений.ИсполнениеДоговоровСПоставщиками.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.ДоговорКонтрагента.Установить(Источник.Договор);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.ДоговорКонтрагента = Договор;
		НоваяЗапись.Дата = Источник.Дата;
		НоваяЗапись.ВидОперациии = ПолучитьВидОперацииИсполненияДоговораПоТипуДокумента(
			ТипЗнч(Источник));
		НоваяЗапись.Документ = Источник.Ссылка;
		
		НоваяЗапись.Сумма = СуммаДокумента;
		НоваяЗапись.СуммаРегл = СуммаРуб;
		НоваяЗапись.Курс = КоэффициентПересчетаВалюты;
		НоваяЗапись.ЭтоАванс = Ложь;
		
		НоваяЗапись.Лот = Лот;
		НоваяЗапись.ВалютаДокумента = Источник.Валюта;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведенияДокументаИсполненияДоговора(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		РегистрыСведений.ИсполнениеДоговоровСПоставщиками.ОчиститьПоДокументу(
			Источник.Ссылка);
		РегистрыСведений.ПоступлениеНоменклатуры.ОчиститьПоДокументу(
			Источник.Ссылка);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведенияВозвратТоваровПоставщику(
										Источник,
										Отказ,
										РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		ВозвратТоваровПоставщикуЗаполнитьДвиженияПланПоставокПоДоговорам(
			Источник, 
			Отказ, 
			РежимПроведения);
		ВозвратТоваровПоставщикуЗаполнитьДвиженияЗаказовПоставщикам(
			Источник, 
			Отказ, 
			РежимПроведения);
		ВозвратТоваровПоставщикуДобавитьВРегистрСведенийВозвратПоставщику(
		    Источник, 
			Отказ, 
			РежимПроведения);
		ВозвратТоваровУслугЗаполнитьДвиженияПрослеживаемыеТоварыПоОКПД2(
			Источник,
			Отказ, 
			РежимПроведения);
			
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведенияЗаказПоставщику(Источник, Отказ, РежимПроведения) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Источник.Движения.ЗаказыПоставщикамУХ.Записывать = Истина;
	Источник.Движения.ПланПоставокПоДоговорам.Записывать = Истина;
	Если НЕ Отказ
			И ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
			И ЭтоДоговорСПланомПоставок(Источник.Договор) Тогда
		ВыборкиЗапроса = ПолучитьВыборкуЗаписиДвиженийЗаказаПоставщику(Источник);
		ЗаполнитьДвиженияЗаказаПоставщикуРегистраЗаказыПоставщикам(
			Источник.Движения.ЗаказыПоставщикамУХ,
			ВыборкиЗапроса.ВыборкаДляЗаписиДвижений);
		ЗаполнитьДвиженияЗаказаПоставщикуРегистраПланПоставокПоДоговорам(
			Источник.Движения.ПланПоставокПоДоговорам,
			ВыборкиЗапроса.ВыборкаДляСписанияПланаПоставок);
		Источник.Движения.Записать();
		ВыполнитьКонтрольРезультатовПроведения(Источник, Отказ);
		Если ТИПЗНЧ(Источник.Ссылка) = ТИП("ДокументСсылка.ЗаказПоставщику") И ЗначениеЗаполнено(Источник.Договор) Тогда
			ВыполнитьКонтрольПоЦенеДоговора(Источник, Отказ);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаЗаполненияЗаказПоставщику(Источник, 
											 ДанныеЗаполнения, 
											 ТекстЗаполнения, 
											 СтандартнаяОбработка) Экспорт
	Перем ВерсияДоговора;
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		ВерсияДоговора = ПолучитьВерсиюСоглашенияИзДанныхЗаполнения(ДанныеЗаполнения);
		Если ЗначениеЗаполнено(ВерсияДоговора) Тогда
			ЗаполнитьЗаказПоставщикуПоДоговоруСПланомПоставки(Источник, ВерсияДоговора);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияЗаказПоставщику(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	Если НЕ Источник.ОбменДанными.Загрузка
			И ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
			И ЭтоДоговорСПланомПоставок(Источник.Договор) Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.Приоритет");
		ПроверяемыеРеквизиты.Добавить("Товары.НоменклатураИсходная");
		ПроверяемыеРеквизиты.Добавить("Товары.ПериодПотребности");
		ПроверяемыеРеквизиты.Добавить("Товары.ОрганизацияПолучатель");
		ПроверяемыеРеквизиты.Добавить("Товары.МестоПоставки");
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаУдаленияПроведенияЗаказПоставщику(Источник, Отказ) Экспорт
	ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКОтменеПроведения(Источник);
КонецПроцедуры

Процедура ПриЗаписиПрогрессСтадийМероприятийЦУЗПриЗаписи(
												Источник,
												Отказ,
												Замещение) Экспорт
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.Мероприятие")
			И ТипЗнч(Регистратор.Контекст) = 
					Тип("СправочникСсылка.ЗакупочныеПроцедуры") Тогда
		ЦентрализованныеЗакупкиУХ.ЗаписатьКлючевыеДатыЗакупочнойПроцедуры(
			Регистратор);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПриЗаписиУпаковкиЕдиницыИзмерения(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Источник.Предопределенный
			И ТипЗнч(Источник.Владелец) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Источник.ПометкаУдаления Тогда
			УдалитьЕдиницуИзмерения(Источник.Владелец, Источник.Ссылка);
		Иначе
			Если Источник.Числитель = 0 ИЛИ Источник.Знаменатель = 0 Тогда
				Коэффициент = 1;
			Иначе
				Коэффициент = Источник.Числитель / Источник.Знаменатель;
			КонецЕсли;
			УстановитьНастройкуЗаменыНоменклатурыДляЕдиницыИзмерения(
				Источник.Владелец,
				Источник.Ссылка,
				Источник.Владелец.ЕдиницаИзмерения,
				Коэффициент);
			УстановитьНастройкуЗаменыНоменклатурыДляЕдиницыИзмерения(
				Источник.Владелец,
				Источник.Владелец.ЕдиницаИзмерения,
				Источник.Ссылка,
				1/Коэффициент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПриЗаписиНоменклатуры(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка ИЛИ Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	флЕстьУпаковки = Источник.ИспользоватьУпаковки
		И ТипЗнч(Источник.НаборУпаковок) = Тип("СправочникСсылка.НаборыУпаковок");
	Если флЕстьУпаковки Тогда
		Если Источник.ПометкаУдаления Тогда
			УдалитьЕдиницыИзмеренияНоменклатуры(Источник.Ссылка);
		Иначе
			УстановитьНастройкиЗаменыЕдиницИзмеренияНоменклатуры(Источник.Ссылка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПрограмныйИнтерфейс


Функция ПолучитьВидОперацииИсполненияДоговораПоТипуДокумента(ТипДокумента) Экспорт
	Если ТипДокумента = ВстраиваниеУХ.ТипДокументСсылкаПоступлениеТоваровУслуг() Тогда
		Возврат Перечисления.ВидыОперацийИсполненияДоговора.ПоступлениеТоваров;
	ИначеЕсли ТипДокумента = ВстраиваниеУХ.ТипДокументСсылкаРасходныйКассовыйОрдер() Тогда
		Возврат Перечисления.ВидыОперацийИсполненияДоговора.ОплатаПоставщику;
	ИначеЕсли ТипДокумента = ВстраиваниеУХ.ТипДокументСсылкаСписаниеСРасчетногоСчета() Тогда
		Возврат Перечисления.ВидыОперацийИсполненияДоговора.ОплатаПоставщику;
	КонецЕсли;
	Возврат Перечисления.ВидыОперацийИсполненияДоговора.ОплатаПоставщику;
КонецФункции

Функция МожноПровестиВозвратТоваровПоставщику(ВозвратПоставщику) Экспорт
	Возврат ЗначениеЗаполнено(ВозвратПоставщику.ДокументПоступления)
		И ТипЗнч(ВозвратПоставщику.ДокументПоступления) = 
				ВстраиваниеУХ.ТипДокументСсылкаПоступлениеТоваровУслуг()
		И ЭтоДоговорСПланомПоставок(ВозвратПоставщику.Договор);
КонецФункции

Функция ЭтоДоговорСПланомПоставок(Договор) Экспорт
	Возврат ЗначениеЗаполнено(Договор)
		И ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоДопустимыйВидДоговораУХ(
							Договор.ВидДоговораУХ)
		И Документы.ВерсияСоглашенияКоммерческийДоговор.ЕстьПланПоставокНоменклатуры(
										Договор.ВерсияСоглашения);
КонецФункции
									
Процедура ЗаполнитьНоменклатуруЗаказаПоставщикуПоДоговору(ЗаказПоставщикуОбъект) Экспорт
	РезультатЗапроса = ПолучитьРезультатЗапросаОстатковДляЗаказаПоставщику(ЗаказПоставщикуОбъект);
	Выгрузка = РезультатЗапроса.Выгрузить();
	ЗаказПоставщикуОбъект.Товары.Загрузить(Выгрузка);
	Для каждого Стр Из ЗаказПоставщикуОбъект.Товары Цикл
		НоваяСтавка = ВстраиваниеУХВызовСервера.ПолучитьСтавкуНДС(Стр.СтавкаНДС);
		Если ТипЗнч(НоваяСтавка) = Тип("Число") Тогда
			Стр.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Стр.СуммаСНДС, Истина, НоваяСтавка);
		ИначеЕсли ТипЗнч(НоваяСтавка) = Тип("СправочникСсылка.СтавкиНДС") Тогда
			Стр.СуммаНДС = УчетНДСКлиентСервер.РассчитатьСуммуНДС(Стр.СуммаСНДС, Истина, НоваяСтавка.Ставка);
		Иначе
			Стр.СуммаНДС = 0;
		КонецЕсли;
		Если НЕ ЗаказПоставщикуОбъект.ЦенаВключаетНДС Тогда
			Стр.Сумма = Стр.СуммаСНДС - Стр.СуммаНДС;
			// пересчитаем цену без НДС, т.к. в запросе она с НДС
			Количество = ?(Стр.Количество = 0, 1, Стр.Количество);
			Стр.Цена = Окр(Стр.Сумма / Количество, 2);
		КонецЕсли;
		// Все места поставки в ТЧ одинаковы
		ЗаказПоставщикуОбъект.МестоПоставки = Стр.МестоПоставки;
	КонецЦикла;
	ЗаказПоставщикуОбъект.СуммаДокумента = 
		ЗаказПоставщикуОбъект.Товары.Итог("СуммаСНДС");
	ЗаказПоставщикуОбъект.СуммаНДС = 
		ЗаказПоставщикуОбъект.Товары.Итог("СуммаНДС");
КонецПроцедуры
									
// Возвращает массив содержащий подмножество значений
// перечисления ВариантыИспользованияХарактеристикНоменклатуры
// соотвествующие использованию характеристик.
//
Функция ПолучитьЗначенияИспользованияХарактеристик() Экспорт
	мРезультат = Новый Массив;
	мРезультат.Добавить(
		Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ИндивидуальныеДляНоменклатуры);
	мРезультат.Добавить(
		Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеДляВидаНоменклатуры);
	мРезультат.Добавить(
		Перечисления.ВариантыИспользованияХарактеристикНоменклатуры.ОбщиеСДругимВидомНоменклатуры);
	Возврат мРезультат;
КонецФункции

// Возвращает Истина, если ИспользованиеХарактеристик - это значение,
// подразумевающее использование характеристик.
//
Функция ДаХарактеристикиИспользуются(ИспользованиеХарактеристик) Экспорт
	Возврат
		ПолучитьЗначенияИспользованияХарактеристик()
			.Найти(ИспользованиеХарактеристик) <> Неопределено;
КонецФункции

Функция ПолучитьЛотИзЗаказаПоставщику(ЗаказПоставщику) Экспорт
	Возврат ЗаказПоставщику.Лот;
КонецФункции

Функция ПолучитьПустуюЕдиницуИзмерения() Экспорт
	ИмяСправочника =
		УправлениеЗакупкамиВстраиваниеПереопределяемыйКлиентСерверУХ.ПолучитьИмяСправочникаЕдиницыИзмерения();
	Возврат Справочники[ИмяСправочника].ПустаяСсылка();
КонецФункции

Функция ПолучитьТаблицуДоговоровСПоставщикамиЛота(Лот) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланПоставокПоДоговорамОстатки.Договор.Контрагент КАК Поставщик,
		|	ПланПоставокПоДоговорамОстатки.Договор КАК Договор
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(, Лот = &Лот) КАК ПланПоставокПоДоговорамОстатки";
	Запрос.УстановитьПараметр("Лот", Лот);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

// Функция переопределяет параметры проверки заполнения характеристик
// номенклатуры из модуля НоменклатураСервер.
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			*ИмяТЧ - Строка - значение по умолчанию "Товары"
//			*СуффиксДопРеквизита - Строка - значение по умолчанию "" - если в ТЧ два реквизита "Характеристика", то второй назван с суффиком. 
//											если суффикс передан, то проверяются оба реквизита
//          *СписокСтрок - Массив, Неопределенно - значение по умолчанию Неопределенно
//			*ВыводитьНомераСтрок - Булево - значение по умолчанию Истина
//			*ВыдаватьСообщения - Булево - значение по умолчанию пустая ИСТИНА - если ЛОЖЬ, но не будут выдаваться сообщения, просто выставится Отказ.
//			*ПутьКДаннымТаблицыФормы - Строка - значение по умолчанию "Объект" - путь к реквизиту формы, содержащий проверяемую табличную часть.
//                                                                               Если проверяется таблица, которая сама является реквизитом формы, нужно
//                                                                               передать "" (т.е. пустую строку)
//			*ИмяКолонкиХарактеристикаТаблицыФормы - Структура - значение по умолчанию "Характеристика" - имя колонки таблицы формы, рядом с которой нужно
//																вывести сообщение. Нужно переопределять, когда вместо колонки характеристики отображатеся какая-то
//																другая колонка, например, с какими-то строковыми представлениями.
//
Функция ПараметрыПроверкиЗаполненияХарактеристик(ИмяТЧ=Неопределено) Экспорт
	Если ИмяТЧ = Неопределено Тогда
		ИмяТЧ = "Номенклатура";
	КонецЕсли;
	ПараметрыПроверки = НоменклатураСервер.ПараметрыПроверкиЗаполненияХарактеристик();
	ПараметрыПроверки.ИмяТЧ = ИмяТЧ;
	Возврат ПараметрыПроверки;
КонецФункции

// Создает контрагента и связанные с ним объекты.
//
Функция СоздатьИнфраструктуруКонтрагентаПоАнкетеПоставщика(АнкетаПоставщика) Экспорт
	Если НЕ ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Партнер = СоздатьПартнераПоАнкетеПоставщика(АнкетаПоставщика);
	Контрагент = СоздатьКонтрагентаПоАнкетеПоставщика(АнкетаПоставщика, Партнер);
	КонтактныеЛица = СоздатьКонтактныеЛицаДляАнкетыПоставщика(АнкетаПоставщика, Партнер);
	Возврат Контрагент;
КонецФункции

// Обертка для функции получения НДС по умолчанию.
// Внимание: аргумент "Период" игнорируется!
// 
Функция СтавкаНДС(Номенклатура, Период=Неопределено) Экспорт
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ТипЭлемента = ТипЗнч(Номенклатура);
		ТипыНоменклатурыЕХ =
			Метаданные.ОпределяемыеТипы.ТипНоменклатураЕХ.Тип.Типы();
		Если ТипыНоменклатурыЕХ.Найти(ТипЭлемента) <> Неопределено Тогда
			Возврат Номенклатура.СтавкаНДС;
		КонецЕсли;
	КонецЕсли;
	Возврат Справочники.СтавкиНДС.ПустаяСсылка();
КонецФункции

// Заглушка.
//
Процедура УстановитьУсловноеОформлениеВидаСтавкиНДС(ЭлементыУсловногоОформления,
													Дата,
													ПутьКРеквизитуФормы,
													ИмяЭлементаФормы) Экспорт
КонецПроцедуры

// Возвращает структуру с описанием организации.
// Поля, которые гарантировано будут присутствовать:
//	- ЮридическийАдрес;
//	- Телефоны;
//	- Email;
//	- ИНН;
//	- КПП.
// Если организация пустая, то возвращает Неопределено.
//
Функция ПолучитьСведенияОбОрганизацииДляПечатнойФормы(Организация, Дата) Экспорт
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	СведенияОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация);
	СведенияОрганизации.Вставить("НаименованиеОрганизацииДляПечатныхФорм",
		ОбщегоНазначенияБПВызовСервера.ОписаниеОрганизации(
			СведенияОрганизации, "НаименованиеДляПечатныхФорм,"));
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		СведенияОрганизации.Вставить("Email", 
			УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				Организация,
				УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииEmailОрганизации(),
				Дата)); 
	КонецЕсли;
	Возврат СведенияОрганизации;
КонецФункции

// Обеспечивает переключение между УХ и ЕХ.
// Для переданного обеъекта возвращает значение реквизита:
// если УХ => "ДоговорКонтрагента"
// если ЕХ => "Договор".
//
Функция ПолучитьДоговор(Объект) Экспорт
	ИмяРеквизитаДоговора = 
		УправлениеЗакупкамиВстраиваниеПереопределяемыйКлиентСерверУХ.ПолучитьИмяРеквизитаДоговора();
	Если Объект = Объект.Ссылка Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			Объект,
			ИмяРеквизитаДоговора);
	КонецЕсли;
	Возврат Объект[ИмяРеквизитаДоговора];	
КонецФункции

// Обеспечивает переключение между УХ и ЕХ.
// Для переданного обеъекта получает договор, и по нему возвращает
// значение реквизита договора "ВерсияСоглашения".
// Для обращения не использует данные объекта, чтение
// всегда происходит по ссылке.
//
Функция ПолучитьДатуВерсииСоглашенияИзОбъекта(ОбъектСДоговором) Экспорт
	Договор = ПолучитьДоговор(ОбъектСДоговором);
	Если ЗначениеЗаполнено(Договор) Тогда
		Путь = Новый Структура("Дата", "ВерсияСоглашения.Дата");
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, "Дата");
		Возврат Результат.Дата;
	КонецЕсли;
	Возврат '00010101'
КонецФункции

// Добавляет регистры для вывода в отчет о движениях по полю, отличному от Регистратор.
// 
// Параметры:
//    Документ - ДокументСсылка - документ коллекцию движений которого необходимо дополнить.
//    СоответствиеРегистров - Соответствие - соответствие с данными:
//        * Ключ     - ОбъектМетаданных - регистр как объект метаданных.
//        * Значение - Строка           - имя поля регистратора.
//
Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(
											Документ,
											СоответствиеРегистров) Экспорт
	ДокументыИсполненияДоговораУХ =
		Метаданные.ОпределяемыеТипы.ДокументыИсполненияДоговораУХ.Тип;
	Если ДокументыИсполненияДоговораУХ.СодержитТип(ТипЗнч(Документ)) Тогда
		СоответствиеРегистров.Вставить(
			Метаданные.РегистрыСведений.ПоступлениеНоменклатуры, "Документ");
		СоответствиеРегистров.Вставить(
			Метаданные.РегистрыСведений.ИсполнениеДоговоровСПоставщиками, "Документ");
	КонецЕсли;
	ОбъектыЦУЗОбменаСЭТП_УХ = Метаданные.ОпределяемыеТипы.ОбъектыЦУЗОбменаСЭТП_УХ.Тип;
	Если ОбъектыЦУЗОбменаСЭТП_УХ.СодержитТип(ТипЗнч(Документ)) Тогда
		СоответствиеРегистров.Вставить(
			Метаданные.РегистрыСведений.ДанныеЭТП, "ОбъектОбмена");
		СоответствиеРегистров.Вставить(
			Метаданные.РегистрыСведений.ЖурналОбменаСЭТП, "ОбъектОбмена");
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область РаботаСНоменклатурой


Функция ПолучитьМассивЕдиницИзмеренияНоменклатуры(Номенклатура,
										Характеристика=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаЗаменыНоменклатуры.ЕдиницаИзмеренияИсточник КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.НастройкаЗаменыНоменклатуры КАК НастройкаЗаменыНоменклатуры
		|ГДЕ
		|	НастройкаЗаменыНоменклатуры.СпособЗамены = &СпособЗамены
		|	И НастройкаЗаменыНоменклатуры.НоменклатураИсточник = &Номенклатура
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НастройкаЗаменыНоменклатуры.ЕдиницаИзмеренияПриемник
		|ИЗ
		|	РегистрСведений.НастройкаЗаменыНоменклатуры КАК НастройкаЗаменыНоменклатуры
		|ГДЕ
		|	НастройкаЗаменыНоменклатуры.СпособЗамены = &СпособЗамены
		|	И НастройкаЗаменыНоменклатуры.НоменклатураИсточник = &Номенклатура
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Номенклатура.ЕдиницаИзмерения
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура";
	
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("СпособЗамены", Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения);
	
	Если ЗначениеЗаполнено(Характеристика) Тогда
		Запрос.Текст = Запрос.Текст
			+ "
			|	Характеристика.Ссылка = &Характеристика";
		Запрос.УстановитьПараметр("Характеристика", Характеристика);
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	
	ТЗЕдИзм = РезультатЗапроса.Выгрузить();
	
	Возврат ТЗЕдИзм.ВыгрузитьКолонку("ЕдиницаИзмерения");

КонецФункции

Функция ПолучитьКоэффициентЕдиницыИзмерения(Номенклатура, 
											Характеристика, 
											ЕдиницаИзмерения) Экспорт
	Если ЗначениеЗаполнено(ЕдиницаИзмерения) И ЕдиницаИзмерения.Знаменатель <> 0 Тогда
		Возврат ЕдиницаИзмерения.Числитель / ЕдиницаИзмерения.Знаменатель;
	КонецЕсли;
	Возврат 1;
КонецФункции

Функция ПолучитьКоэффициентЕдиницыИзмеренияИзРегистра(Номенклатура, 
											Характеристика, 
											ЕдиницаИзмерения) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НастройкаЗаменыНоменклатуры.Коэффициент КАК Коэффициент
		|ИЗ
		|	РегистрСведений.НастройкаЗаменыНоменклатуры КАК НастройкаЗаменыНоменклатуры
		|ГДЕ
		|	НастройкаЗаменыНоменклатуры.СпособЗамены = &СпособЗамены
		|	И НастройкаЗаменыНоменклатуры.НоменклатураИсточник = &Номенклатура
		|	И НастройкаЗаменыНоменклатуры.ЕдиницаИзмеренияИсточник = &БазоваяЕдиницаИзмерения
		|	И НастройкаЗаменыНоменклатуры.НоменклатураПриемник = &Номенклатура
		|	И НастройкаЗаменыНоменклатуры.ЕдиницаИзмеренияПриемник = &ЕдиницаИзмерения
		|	И НастройкаЗаменыНоменклатуры.ХарактеристикаИсточник = &Характеристика
		|	И НастройкаЗаменыНоменклатуры.ХарактеристикаПриемник = &Характеристика";
	
	Запрос.УстановитьПараметр("БазоваяЕдиницаИзмерения", Номенклатура.ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения", ЕдиницаИзмерения);
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	Запрос.УстановитьПараметр("Характеристика", Характеристика);
	Запрос.УстановитьПараметр("СпособЗамены", Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Коэффициент;
	КонецЦикла;
	
	Возврат 1;

КонецФункции

// Возвращает Истина, если ТекущаяНоменклатура использует характеристики.
Функция ХарактеристикиИспользуются(ТекущаяНоменклатура) Экспорт
	Если НЕ ЗначениеЗаполнено(ТекущаяНоменклатура) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если ТипЗнч(ТекущаяНоменклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		Возврат Ложь;
	КонецЕсли;
	Возврат ДаХарактеристикиИспользуются(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
			ТекущаяНоменклатура, 
			"ИспользованиеХарактеристик"));
КонецФункции

// Возвращает цену номенклатуры.
//
Функция ПолучитьЦенуНоменклатуры(Номенклатура, 
								 Характеристика, 
								 ТипЦен, 
								 Дата, 
								 Валюта) Экспорт
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Дата", Дата);
	ПараметрыОтбора.Вставить("Номенклатура", Номенклатура);
	ПараметрыОтбора.Вставить("Характеристика", Характеристика);
	// Запрашиваем цены в базовой ед. изм.
	ПараметрыОтбора.Вставить("Упаковка", Номенклатура.ЕдиницаИзмерения);
	ПараметрыОтбора.Вставить("ВидЦены", ТипЦен);
	ПараметрыОтбора.Вставить("ВидЦеныПоставщика", 
		Справочники.ВидыЦенПоставщиков.ПустаяСсылка());
	ПараметрыОтбора.Вставить("Валюта", Валюта);
	ПараметрыОтбора.Вставить("Серия", Справочники.СерииНоменклатуры.ПустаяСсылка());
	
	//Возврат ЗакупкиСервер.ПолучитьЦенуПоОтбору(ПараметрыОтбора);
	Возврат ЦеныПредприятияЗаполнениеСервер.ПолучитьЦенуПоОтбору(ПараметрыОтбора);
КонецФункции

Процедура УдалитьЕдиницыИзмеренияНоменклатуры(Номенклатура) Экспорт
	НаборЗаписей = 
		РегистрыСведений.НастройкаЗаменыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СпособЗамены.Установить(
		Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения);
	НаборЗаписей.Отбор.НоменклатураИсточник.Установить(Номенклатура);
	НаборЗаписей.Отбор.НоменклатураПриемник.Установить(Номенклатура);
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура УстановитьНастройкиЗаменыЕдиницИзмеренияНоменклатуры(
											Номенклатура) Экспорт
	ВыборкаДетальныеЗаписи = 
		ПолучитьВыборкуЗапросаЕдиницИзмеренияНоменклатуры(Номенклатура);
	НаборЗаписей = 
		РегистрыСведений.НастройкаЗаменыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СпособЗамены.Установить(
		Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения);
	НаборЗаписей.Отбор.НоменклатураИсточник.Установить(Номенклатура);
	НаборЗаписей.Отбор.ХарактеристикаИсточник.Установить(
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	НаборЗаписей.Отбор.НоменклатураПриемник.Установить(Номенклатура);
	НаборЗаписей.Отбор.ХарактеристикаПриемник.Установить(
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	НастройкаЗаменыНоменклатуры_ЗаполнитьНаборЗаписей(
		НаборЗаписей, 
		ВыборкаДетальныеЗаписи);
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

// Удалить после добавления в менеджер регистра.
//
Процедура НастройкаЗаменыНоменклатуры_ЗаполнитьНаборЗаписей(НаборЗаписей, ВыборкаЗапроса)
	Пока ВыборкаЗапроса.Следующий() Цикл
		Движение = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗапроса);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьНастройкуЗаменыНоменклатурыДляЕдиницыИзмерения(
												Номенклатура,
												ЕдиницаИзмерения,
												ЕдиницаИзмеренияБазовая,
												Коэффициент) Экспорт
	НаборЗаписей = 
		РегистрыСведений.НастройкаЗаменыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СпособЗамены.Установить(
		Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения);
	НаборЗаписей.Отбор.НоменклатураИсточник.Установить(Номенклатура);
	НаборЗаписей.Отбор.ХарактеристикаИсточник.Установить(
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	НаборЗаписей.Отбор.ЕдиницаИзмеренияИсточник.Установить(ЕдиницаИзмерения);
	НаборЗаписей.Отбор.НоменклатураПриемник.Установить(Номенклатура);
	НаборЗаписей.Отбор.ХарактеристикаПриемник.Установить(
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	НаборЗаписей.Отбор.ЕдиницаИзмеренияПриемник.Установить(
		ЕдиницаИзмеренияБазовая);

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.СпособЗамены =
		Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения;
	НоваяЗапись.НоменклатураИсточник = Номенклатура;
	НоваяЗапись.ЕдиницаИзмеренияИсточник = ЕдиницаИзмерения;
	НоваяЗапись.НоменклатураПриемник = Номенклатура;
	НоваяЗапись.ЕдиницаИзмеренияПриемник =
		ЕдиницаИзмеренияБазовая;
	НоваяЗапись.Коэффициент = Коэффициент;
	
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура УдалитьЕдиницуИзмерения(Номенклатура,
								  ЕдиницаИзмерения) Экспорт
	НаборЗаписей = 
		РегистрыСведений.НастройкаЗаменыНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СпособЗамены.Установить(
		Перечисления.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения);
	НаборЗаписей.Отбор.НоменклатураИсточник.Установить(Номенклатура);
	НаборЗаписей.Отбор.ХарактеристикаИсточник.Установить(
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	НаборЗаписей.Отбор.ЕдиницаИзмеренияИсточник.Установить(ЕдиницаИзмерения);
	НаборЗаписей.Отбор.НоменклатураПриемник.Установить(Номенклатура);
	НаборЗаписей.Отбор.ХарактеристикаПриемник.Установить(
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	НаборЗаписей.Записать(Истина);
	
	НаборЗаписей.Отбор.ЕдиницаИзмеренияИсточник.Использование	=	Ложь;
	НаборЗаписей.Отбор.ЕдиницаИзмеренияПриемник.Установить(ЕдиницаИзмерения);
	НаборЗаписей.Записать(Истина);
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции


Процедура ПоступлениеТоваровУслугЗаполнитьДвиженияПланПоставокПоДоговорам(
														ПТУОбъект, 
														Отказ, 
														РежимПроведения)
	Договор = ПТУОбъект.Договор;
	Если НЕ ЗначениеЗаполнено(ПТУОбъект.ЗаказПоставщику)
			И ЭтоДоговорСПланомПоставок(Договор) Тогда
		ПТУОбъект.Движения.ПланПоставокПоДоговорам.Записывать = Истина;
		ПостоянныеЗначенияРегистра = Новый Структура;
		ПостоянныеЗначенияРегистра.Вставить("ВидДвижения",
			ВидДвиженияНакопления.Расход);
		ПостоянныеЗначенияРегистра.Вставить("Период", ПТУОбъект.Дата);
		ПостоянныеЗначенияРегистра.Вставить("Договор", Договор);
		РезультатЗапроса =
			ПолучитьРезультатЗапросаДляСписанияПланаПоставокПоДоговорам(
				ПТУОбъект);
		ВыборкаТоварныхКатегорий = РезультатЗапроса.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
		Отказ_ = Ложь;
		Пока ВыборкаТоварныхКатегорий.Следующий() Цикл
			ВыборкаНоменклатура = ВыборкаТоварныхКатегорий.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
			Если МожноРаспределитьНоменклатуруПоПлануПоставокДоговора(
									ВыборкаТоварныхКатегорий, Отказ_) Тогда
				Пока ВыборкаНоменклатура.Следующий() Цикл
					ВыборкаХарактеристик = ВыборкаНоменклатура.Выбрать(
							ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаХарактеристик.Следующий() Цикл
						ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
							ПТУОбъект.Движения.ПланПоставокПоДоговорам,
							ПостоянныеЗначенияРегистра,
							ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой),
							ВыборкаХарактеристик.КонтролироватьКоличество,
							ВыборкаХарактеристик.КоличествоРаспределить,
							ВыборкаХарактеристик.СуммаРаспределить);
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРезультатЗапросаДляСписанияПланаПоставокПоДоговорам(ПоступлениеОбъект)
	ДоговорКонтрагента = ПолучитьДоговор(ПоступлениеОбъект);
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ПоступлениеОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ПоступлениеОбъект));	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(ПоступлениеТоваровУслугТовары.Цена) КАК Цена,
		|	СРЕДНЕЕ(ПоступлениеТоваровУслугТовары.Цена * &КоэффициентПересчетаВалюты / &Кратность) КАК ЦенаРегл,
		|	СУММА(ПоступлениеТоваровУслугТовары.СуммаСНДС) КАК Сумма,
		|	СУММА(ПоступлениеТоваровУслугТовары.СуммаСНДС * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаРегл,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ НоменклатураДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТоварнаяКатегория,
		|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПланПоставокПоДоговорамОстатки.Договор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьОстаток,
		|	ПланПоставокПоДоговорамОстатки.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
		|	ИСТИНА КАК КонтролироватьКоличество,
		|	НоменклатураДокумента.ТоварнаяКатегория КАК ТоварнаяКатегория,
		|	НоменклатураДокумента.Номенклатура КАК НоменклатураПоступления,
		|	НоменклатураДокумента.Характеристика КАК ХарактеристикаПоступления,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Номенклатура
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Номенклатура
		|	КОНЕЦ КАК Номенклатура,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Характеристика
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Характеристика
		|	КОНЕЦ КАК Характеристика,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)) КАК Лот,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК Проект,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)) КАК МестоПоставки,
		|	ПланПоставокПоДоговорамОстатки.Менеджер КАК Менеджер,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество) КАК КоличествоРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.СуммаРегл) КАК СуммаРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.ЦенаРегл) КАК ЦенаРаспределить,
		|	МАКСИМУМ(ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
		|	МАКСИМУМ(ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.СуммаОстаток, 0)) КАК СуммаОстаток,
		|	ПланПоставокПоДоговорамОстатки.Приоритет.Код КАК СортировкаПриоритет,
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала КАК СортировкаПериодПотребности,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ КАК СортировкаПоДатеЛота,
		|	1 КАК Коэффициент,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураДокумента.СтавкаНДС КАК СтавкаНДС,
		|	ЛОЖЬ КАК СписываемТоварнуюКатегорию,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.СтавкаНДС = НоменклатураДокумента.СтавкаНДС
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК СортировкаНДС,
		|	10 КАК СортировкаТипТовара
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам.Остатки(
		|				&ГраницаДокумента,
		|				Договор = &Договор
		|					И МестоПоставки В (&ДоступныеМестаПоставки)) КАК ПланПоставокПоДоговорамОстатки
		|		ПО НоменклатураДокумента.Номенклатура = ПланПоставокПоДоговорамОстатки.Номенклатура
		|			И НоменклатураДокумента.Характеристика = ПланПоставокПоДоговорамОстатки.Характеристика
		|ГДЕ
		|	НЕ НоменклатураДокумента.ЭтоУслуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланПоставокПоДоговорамОстатки.Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОстатки.Менеджер,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения,
		|	НоменклатураДокумента.СтавкаНДС,
		|	НоменклатураДокумента.Номенклатура,
		|	НоменклатураДокумента.Характеристика,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Номенклатура
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Характеристика
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Характеристика
		|	КОНЕЦ,
		|	ПланПоставокПоДоговорамОстатки.Приоритет.Код,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.СтавкаНДС = НоменклатураДокумента.СтавкаНДС
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	НоменклатураДокумента.ТоварнаяКатегория
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПланПоставокПоДоговорамОстатки.Договор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ),
		|	ПланПоставокПоДоговорамОстатки.Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ЛОЖЬ,
		|	НоменклатураДокумента.ТоварнаяКатегория,
		|	НоменклатураДокумента.Номенклатура,
		|	НоменклатураДокумента.Характеристика,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Номенклатура
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Характеристика
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Характеристика
		|	КОНЕЦ,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ПланПоставокПоДоговорамОстатки.Менеджер,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество),
		|	МАКСИМУМ(НоменклатураДокумента.СуммаРегл),
		|	МАКСИМУМ(НоменклатураДокумента.ЦенаРегл),
		|	МАКСИМУМ(ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.КоличествоОстаток, 0)),
		|	МАКСИМУМ(ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.СуммаОстаток, 0)),
		|	ПланПоставокПоДоговорамОстатки.Приоритет.Код,
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ,
		|	1,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения,
		|	НоменклатураДокумента.СтавкаНДС,
		|	ЛОЖЬ,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.СтавкаНДС = НоменклатураДокумента.СтавкаНДС
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	5
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам.Остатки(&ГраницаДокумента, Договор = &Договор) КАК ПланПоставокПоДоговорамОстатки
		|		ПО НоменклатураДокумента.Номенклатура = ПланПоставокПоДоговорамОстатки.Номенклатура
		|			И НоменклатураДокумента.Характеристика = ПланПоставокПоДоговорамОстатки.Характеристика
		|ГДЕ
		|	НоменклатураДокумента.ЭтоУслуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланПоставокПоДоговорамОстатки.Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОстатки.Менеджер,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения,
		|	НоменклатураДокумента.Характеристика,
		|	НоменклатураДокумента.СтавкаНДС,
		|	НоменклатураДокумента.Номенклатура,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Номенклатура
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Характеристика
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Характеристика
		|	КОНЕЦ,
		|	ПланПоставокПоДоговорамОстатки.Приоритет.Код,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.СтавкаНДС = НоменклатураДокумента.СтавкаНДС
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	НоменклатураДокумента.ТоварнаяКатегория
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПланПоставокПоДоговорамОстатки.Договор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ),
		|	ПланПоставокПоДоговорамОстатки.Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ЛОЖЬ,
		|	НоменклатураДокумента.ТоварнаяКатегория,
		|	НоменклатураДокумента.Номенклатура,
		|	НоменклатураДокумента.Характеристика,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Номенклатура
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Характеристика
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Характеристика
		|	КОНЕЦ,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ПланПоставокПоДоговорамОстатки.Менеджер,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество),
		|	МАКСИМУМ(НоменклатураДокумента.СуммаРегл),
		|	МАКСИМУМ(НоменклатураДокумента.ЦенаРегл),
		|	МАКСИМУМ(ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.КоличествоОстаток, 0)),
		|	МАКСИМУМ(ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.СуммаОстаток, 0)),
		|	ПланПоставокПоДоговорамОстатки.Приоритет.Код,
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ,
		|	1,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения,
		|	НоменклатураДокумента.СтавкаНДС,
		|	ИСТИНА,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.СтавкаНДС = НоменклатураДокумента.СтавкаНДС
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	1
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам.Остатки(
		|				&ГраницаДокумента,
		|				Договор = &Договор
		|					И МестоПоставки В (&ДоступныеМестаПоставки)) КАК ПланПоставокПоДоговорамОстатки
		|		ПО НоменклатураДокумента.ТоварнаяКатегория = ПланПоставокПоДоговорамОстатки.Номенклатура
		|			И НоменклатураДокумента.Характеристика = ПланПоставокПоДоговорамОстатки.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ПланПоставокПоДоговорамОстатки.Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОстатки.Менеджер,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения,
		|	НоменклатураДокумента.Характеристика,
		|	НоменклатураДокумента.СтавкаНДС,
		|	НоменклатураДокумента.Номенклатура,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Номенклатура
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Номенклатура
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.Номенклатура ЕСТЬ NULL
		|			ТОГДА НоменклатураДокумента.Характеристика
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Характеристика
		|	КОНЕЦ,
		|	ПланПоставокПоДоговорамОстатки.Приоритет.Код,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.СтавкаНДС = НоменклатураДокумента.СтавкаНДС
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	НоменклатураДокумента.ТоварнаяКатегория
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварнаяКатегория,
		|	НоменклатураПоступления,
		|	ХарактеристикаПоступления,
		|	ЕстьОстаток УБЫВ,
		|	СортировкаТипТовара УБЫВ,
		|	СортировкаНДС УБЫВ,
		|	СортировкаПриоритет УБЫВ,
		|	СортировкаПериодПотребности,
		|	СортировкаПоДатеЛота
		|ИТОГИ
		|	МАКСИМУМ(ЕстьОстаток),
		|	МАКСИМУМ(КонтролироватьКоличество),
		|	МАКСИМУМ(КоличествоРаспределить),
		|	МАКСИМУМ(СуммаРаспределить),
		|	СУММА(КоличествоОстаток),
		|	СУММА(СуммаОстаток),
		|	МИНИМУМ(СписываемТоварнуюКатегорию)
		|ПО
		|	ТоварнаяКатегория,
		|	НоменклатураПоступления,
		|	ХарактеристикаПоступления";
	Запрос.УстановитьПараметр("ДатаСреза", ПоступлениеОбъект.Дата);	
	Запрос.УстановитьПараметр("ГраницаДокумента",
		Новый Граница(ПоступлениеОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", ПоступлениеОбъект.Ссылка);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДоступныеМестаПоставки",
		Справочники.МестаПоставки.МестаПоставкиСклада(
			ПоступлениеОбъект.Склад));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

// Возвращает перечень типов номенклатуры, для которых
// всегда необходим контроль остатков по количеству.
//
Функция ПолучитьТипыНоменклатурыСКонтролемКоличества() Экспорт
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	Результат.Добавить(Перечисления.ТипыНоменклатуры.МногооборотнаяТара);
	Результат.Добавить(Перечисления.ТипыНоменклатуры.Набор);
	Результат.Добавить(Перечисления.ТипыНоменклатуры.Работа);
	Возврат Результат;
КонецФункции

Функция ПолучитьТекстЗапросаОстатковДляЗаказаПоставщику() Экспорт
	Возврат "ВЫБРАТЬ
	        |	ЕСТЬNULL(КурсВалютыЦЗ.Курс, 1) / ВЫБОР
	        |		КОГДА КурсВалютыДоговора.Курс = 0
	        |			ТОГДА 1
	        |		ИНАЧЕ ЕСТЬNULL(КурсВалютыДоговора.Курс, 1)
	        |	КОНЕЦ КАК Курс,
	        |	ЕСТЬNULL(КурсВалютыЦЗ.Кратность, 1) / ВЫБОР
	        |		КОГДА КурсВалютыДоговора.Кратность = 0
	        |			ТОГДА 1
	        |		ИНАЧЕ ЕСТЬNULL(КурсВалютыДоговора.Кратность, 1)
	        |	КОНЕЦ КАК Кратность
	        |ПОМЕСТИТЬ КоэффициентПересчетаВалюты
	        |ИЗ
	        |	Константа.ВалютаУчетаЦентрализованныхЗакупок КАК ВалютаУчетаЦентрализованныхЗакупок
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсВалютыЦЗ
	        |		ПО ВалютаУчетаЦентрализованныхЗакупок.Значение = КурсВалютыЦЗ.Валюта,
	        |	РегистрСведений.КурсыВалют.СрезПоследних(&Момент, ) КАК КурсВалютыДоговора
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	        |		ПО КурсВалютыДоговора.Валюта = ДоговорыКонтрагентов.ВалютаВзаиморасчетов
	        |			И (ДоговорыКонтрагентов.Ссылка = &Договор)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ПланПоставокПоДоговорамОстатки.Приоритет КАК Приоритет,
	        |	ПланПоставокПоДоговорамОстатки.Номенклатура КАК НоменклатураИсходная,
	        |	ПланПоставокПоДоговорамОстатки.Номенклатура КАК Номенклатура,
	        |	ПланПоставокПоДоговорамОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	        |	1 КАК Коэффициент,
	        |	ПланПоставокПоДоговорамОстатки.КоличествоОстаток КАК Количество,
	        |	ПланПоставокПоДоговорамОстатки.КоличествоОстаток КАК КоличествоУпаковок,
	        |	ВЫБОР
	        |		КОГДА ПланПоставокПоДоговорамОстатки.КоличествоОстаток = 0
	        |			ТОГДА 0
	        |		ИНАЧЕ ПланПоставокПоДоговорамОстатки.СуммаОстаток / ПланПоставокПоДоговорамОстатки.КоличествоОстаток
	        |	КОНЕЦ * КоэффициентПересчетаВалюты.Курс / КоэффициентПересчетаВалюты.Кратность КАК Цена,
	        |	ПланПоставокПоДоговорамОстатки.СуммаОстаток * КоэффициентПересчетаВалюты.Курс / КоэффициентПересчетаВалюты.Кратность КАК Сумма,
	        |	ПланПоставокПоДоговорамОстатки.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	        |	ПланПоставокПоДоговорамОстатки.СуммаОстаток * КоэффициентПересчетаВалюты.Курс / КоэффициентПересчетаВалюты.Кратность КАК СуммаСНДС,
	        |	ПланПоставокПоДоговорамОстатки.ПериодПотребности КАК ПериодПотребности,
	        |	ПланПоставокПоДоговорамОстатки.Проект КАК Проект,
	        |	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
	        |	ПланПоставокПоДоговорамОстатки.Лот КАК Лот,
	        |	ПланПоставокПоДоговорамОстатки.Организация КАК ОрганизацияПолучатель,
	        |	ПланПоставокПоДоговорамОстатки.МестоПоставки КАК МестоПоставки,
	        |	ПланПоставокПоДоговорамОстатки.Менеджер КАК Менеджер
	        |ИЗ
	        |	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(
	        |			&Момент,
	        |			Договор = &Договор
	        |				И ВЫБОР
	        |					КОГДА &ОтбиратьМестаПоставки
	        |						ТОГДА МестоПоставки В (&МестаПоставки)
	        |					ИНАЧЕ ИСТИНА
	        |				КОНЕЦ) КАК ПланПоставокПоДоговорамОстатки,
	        |	КоэффициентПересчетаВалюты КАК КоэффициентПересчетаВалюты";
КонецФункции

Функция МожноРаспределитьНоменклатуруПоПлануПоставокДоговора(
											ВыборкаНоменклатура, 
											Отказ)
	Если НЕ ВыборкаНоменклатура.ЕстьОстаток Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			НСтр(СтрШаблон(
				"ru='Номенклатура %1 не зарегистрирована в договоре, или уже"
				+ " оформлена другими поступлениями!'",
				ВыборкаНоменклатура.Номенклатура));
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	флКонтролироватьКоличество = 
		НЕ ВыборкаНоменклатура.СписываемТоварнуюКатегорию;
	Если ВыборкаНоменклатура.СуммаОстаток < ВыборкаНоменклатура.СуммаРаспределить
			ИЛИ (флКонтролироватьКоличество
					И ВыборкаНоменклатура.КоличествоОстаток
						< ВыборкаНоменклатура.КоличествоРаспределить) Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			НСтр(СтрШаблон(
				"ru='Номенклатуры %1 поступило больше, чем запланировано!'",
				ВыборкаНоменклатура.Номенклатура));
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Распределяет поступление номенклатуры по аналитикам регистра
// ЗаказыПоставщикам.
Процедура ПоступлениеТоваровУслугЗаполнитьДвиженияЗаказовПоставщикам(
												ПТУОбъект,
												Отказ,
												РежимПроведения)									
	ПТУОбъект.Движения.ЗаказыПоставщикамУХ.Записывать = Истина;
	ЗаказПоставщику = ПТУОбъект.ЗаказПоставщику;
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ПостоянныеЗначенияРегистра = Новый Структура;
		ПостоянныеЗначенияРегистра.Вставить("ВидДвижения",
			ВидДвиженияНакопления.Расход);
		ПостоянныеЗначенияРегистра.Вставить("Период",
			ПТУОбъект.Дата);
		ПостоянныеЗначенияРегистра.Вставить("ЗаказПоставщику",
			ЗаказПоставщику);
		ПостоянныеЗначенияРегистра.Вставить("Договор",
			ПТУОбъект.Договор);
		ПостоянныеЗначенияРегистра.Вставить("Склад",
			ПТУОбъект.Склад);
		РезультатЗапроса =
			ПолучитьРезультатЗапросаДляЗаполненияДвиженийЗаказовПоставщикам(
				ПТУОбъект);
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ВыборкаХарактеристик = ВыборкаНоменклатура.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				Если МожноРаспределитьНоменклатуруПоЗаказамПоставщику(
										ВыборкаХарактеристик, Отказ) Тогда
					ВыборкаДетальныеЗаписи =
						ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
					ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
						ПТУОбъект.Движения.ЗаказыПоставщикамУХ,
						ПостоянныеЗначенияРегистра,
						ВыборкаДетальныеЗаписи,
						Истина,
						ВыборкаХарактеристик.КоличествоРаспределить,
						ВыборкаХарактеристик.СуммаРаспределить);
				КонецЕсли;
			КонецЦИкла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Возвращает результат запроса с двумя уровнями:
// 1. Номенклатура с итогом кол-ва, суммы по регистру ЗаказыПоставщиков
//		и требуемого общего кол-ва, суммы по документу поступления.
// 2. Доступные кол-во и сумма по измерениям регистра ЗаказыПоставщику
//		неконтролируемые документом поступления.
//
Функция ПолучитьРезультатЗапросаДляЗаполненияДвиженийЗаказовПоставщикам(
														ПоступлениеОбъект)
	ДоговорКонтрагента = ПолучитьДоговор(ПоступлениеОбъект);
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ПоступлениеОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПоступлениеОбъект.Дата);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(ВЫБОР
		|			КОГДА ПоступлениеТоваровУслугТовары.КоличествоУпаковок <> 0
		|				ТОГДА ПоступлениеТоваровУслугТовары.Цена / ПоступлениеТоваровУслугТовары.КоличествоУпаковок
		|			ИНАЧЕ ПоступлениеТоваровУслугТовары.Цена
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
		|	СУММА(ПоступлениеТоваровУслугТовары.Сумма * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаРегл,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ПоступлениеТоваровУслугТовары.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения223ФЗ КАК СтраныПроисхождения
		|ПОМЕСТИТЬ НоменклатураДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
		|	ПоступлениеТоваровУслугТовары.СтранаПроизводителя,
		|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения223ФЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ЗаказыПоставщикамОстатки.Договор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьОстаток,
		|	ЗаказыПоставщикамОстатки.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
		|	ИСТИНА КАК КонтролироватьКоличество,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.НоменклатураИсходная, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураИсходная,
		|	НоменклатураДокумента.Номенклатура КАК Номенклатура,
		|	НоменклатураДокумента.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)) КАК Лот,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК Проект,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)) КАК МестоПоставки,
		|	ЗаказыПоставщикамОстатки.Менеджер КАК Менеджер,
		|	ЗаказыПоставщикамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество) КАК КоличествоРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.Сумма) КАК СуммаРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.Цена) КАК ЦенаРаспределить,
		|	МАКСИМУМ(ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)) КАК КоличествоОстаток,
		|	МАКСИМУМ(ЕСТЬNULL(ЗаказыПоставщикамОстатки.СуммаОстаток, 0)) КАК СуммаОстаток,
		|	ЗаказыПоставщикамОстатки.Приоритет.Код КАК СортировкаПриоритет,
		|	ЗаказыПоставщикамОстатки.ПериодПотребности.ДатаНачала КАК СортировкаПериодПотребности,
		|	ЗаказыПоставщикамОстатки.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	НоменклатураДокумента.СтранаПроизводителя КАК СтранаПроизводителя,
		|	НоменклатураДокумента.СтраныПроисхождения КАК СтраныПроисхождения
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамУХ.Остатки(
		|				&ГраницаДокумента,
		|				ЗаказПоставщику = &ЗаказПоставщику
		|					И Договор = &Договор
		|					И МестоПоставки В (&ДоступныеМестаПоставки)) КАК ЗаказыПоставщикамОстатки
		|		ПО НоменклатураДокумента.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И (ЗаказыПоставщикамОстатки.ЗаказПоставщику = &ЗаказПоставщику)
		|			И НоменклатураДокумента.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|ГДЕ
		|	НЕ НоменклатураДокумента.ЭтоУслуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.НоменклатураИсходная, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	НоменклатураДокумента.Номенклатура,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЗаказыПоставщикамОстатки.Приоритет,
		|	ЗаказыПоставщикамОстатки.Менеджер,
		|	ЗаказыПоставщикамОстатки.ДоговорСПокупателем,
		|	ЗаказыПоставщикамОстатки.ПериодПотребности.ДатаНачала,
		|	ЗаказыПоставщикамОстатки.Приоритет.Код,
		|	НоменклатураДокумента.Характеристика,
		|	ЗаказыПоставщикамОстатки.НоменклатураПоставщика,
		|	НоменклатураДокумента.СтранаПроизводителя,
		|	НоменклатураДокумента.СтраныПроисхождения
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ЗаказыПоставщикамОстатки.Договор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ),
		|	ЗаказыПоставщикамОстатки.Приоритет,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	НоменклатураДокумента.Количество <= ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.НоменклатураИсходная, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	НоменклатураДокумента.Номенклатура,
		|	НоменклатураДокумента.Характеристика,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ЗаказыПоставщикамОстатки.Менеджер,
		|	ЗаказыПоставщикамОстатки.ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество),
		|	МАКСИМУМ(НоменклатураДокумента.Сумма),
		|	МАКСИМУМ(НоменклатураДокумента.Цена),
		|	МАКСИМУМ(ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0)),
		|	МАКСИМУМ(ЕСТЬNULL(ЗаказыПоставщикамОстатки.СуммаОстаток, 0)),
		|	ЗаказыПоставщикамОстатки.Приоритет.Код,
		|	ЗаказыПоставщикамОстатки.ПериодПотребности.ДатаНачала,
		|	NULL,
		|	NULL,
		|	NULL		
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамУХ.Остатки(
		|				&ГраницаДокумента,
		|				ЗаказПоставщику = &ЗаказПоставщику
		|					И Договор = &Договор) КАК ЗаказыПоставщикамОстатки
		|		ПО НоменклатураДокумента.Номенклатура = ЗаказыПоставщикамОстатки.Номенклатура
		|			И (ЗаказыПоставщикамОстатки.ЗаказПоставщику = &ЗаказПоставщику)
		|			И НоменклатураДокумента.Характеристика = ЗаказыПоставщикамОстатки.Характеристика
		|ГДЕ
		|	НоменклатураДокумента.ЭтоУслуга
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.НоменклатураИсходная, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	НоменклатураДокумента.Номенклатура,
		|	ЕСТЬNULL(ЗаказыПоставщикамОстатки.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЗаказыПоставщикамОстатки.Приоритет,
		|	ЗаказыПоставщикамОстатки.Менеджер,
		|	ЗаказыПоставщикамОстатки.ДоговорСПокупателем,
		|	ЗаказыПоставщикамОстатки.ПериодПотребности.ДатаНачала,
		|	ЗаказыПоставщикамОстатки.Приоритет.Код,
		|	НоменклатураДокумента.Характеристика,
		|	НоменклатураДокумента.Количество <= ЕСТЬNULL(ЗаказыПоставщикамОстатки.КоличествоОстаток, 0),
		|	NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	КонтролироватьКоличество УБЫВ,
		|	СортировкаПриоритет УБЫВ,
		|	СортировкаПериодПотребности
		|ИТОГИ
		|	МИНИМУМ(ЕстьОстаток),
		|	МИНИМУМ(КонтролироватьКоличество),
		|	МАКСИМУМ(КоличествоРаспределить),
		|	МАКСИМУМ(СуммаРаспределить),
		|	СУММА(КоличествоОстаток),
		|	СУММА(СуммаОстаток)
		|ПО
		|	Номенклатура,
		|	Характеристика";
	Запрос.УстановитьПараметр("ГраницаДокумента",
		Новый Граница(ПоступлениеОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗаказПоставщику",
		ПоступлениеОбъект.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Ссылка", ПоступлениеОбъект.Ссылка);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДоступныеМестаПоставки",
		Справочники.МестаПоставки.МестаПоставкиСклада(
			ПоступлениеОбъект.Склад));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПолучитьРезультатЗапросаДляЗаполненияДвиженийПрослеживаемыеТоварыПоОКПД2ПоВозвратуПоставщику(ВозвратПоставщику)
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ВозвратПоставщику.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ВозвратПоставщику));
	ТоварыОКПД = ВозвратПоставщику.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",ВозвратПоставщику.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоляЗакупокТоваровРоссийскогоПроисхождения.ОКПД2 КАК ОКПД2
	               |ИЗ
	               |	РегистрСведений.ДоляЗакупокТоваровРоссийскогоПроисхождения КАК ДоляЗакупокТоваровРоссийскогоПроисхождения
	               |ГДЕ
	               |	ДоляЗакупокТоваровРоссийскогоПроисхождения.Год.ДатаНачала <= &Дата
	               |	И ДоляЗакупокТоваровРоссийскогоПроисхождения.Год.ДатаОкончания >= &Дата";
	Запрос.УстановитьПараметр("Дата",ВозвратПоставщику.Дата);
	Выборка = Запрос.Выполнить().Выгрузить();
	ДоляЗакупокТоваровРоссийскогоПроисхождения = Новый ТаблицаЗначений();
	ДоляЗакупокТоваровРоссийскогоПроисхождения.Колонки.Добавить("ОКПД2",Новый ОписаниеТипов("СправочникСсылка.КлассификаторОКПД2"));
	Для Каждого СтрокаОКПД ИЗ ТоварыОКПД Цикл
		Если Выборка.НайтиСтроки(Новый Структура("ОКПД2",СтрокаОКПД.Номенклатура.КодОКПД2)).Количество() <> 0 Тогда
			ДобСтрока = ДоляЗакупокТоваровРоссийскогоПроисхождения.Добавить();
			ДобСтрока.ОКПД2 = СтрокаОКПД.Номенклатура.КодОКПД2;
			Продолжить;
		КонецЕсли;
		ОКПД2 = СтрокаОКПД.Номенклатура.КодОКПД2.Код;
		Длина = СтрДлина(ОКПД2);
		Символ = 1;
		Классификатор = Неопределено;
		Пока Классификатор = Неопределено И НЕ СтрНайти(ОКПД2,".") = 0 Цикл
			ОКПД2 = Лев(ОКПД2,Длина-Символ); 
			Родитель = Справочники.КлассификаторОКПД2.НайтиПоКоду(ОКПД2);
			Если Выборка.НайтиСтроки(Новый Структура("ОКПД2",Родитель)).Количество() > 0 Тогда
				ДобСтрока = ДоляЗакупокТоваровРоссийскогоПроисхождения.Добавить();
				ДобСтрока.ОКПД2 = СтрокаОКПД.Номенклатура.КодОКПД2;
			КонецЕсли;	
			Символ = Символ +1;
		КонецЦикла;
	КонецЦикла;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОКПД.ОКПД2 КАК ОКПД2
		|ПОМЕСТИТЬ ТаблицаОКПД
		|ИЗ
		|	&ТаблицаОКПД КАК ТаблицаОКПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВозвратТоваровПоставщику.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровПоставщику.Характеристика КАК Характеристика,
		|	СУММА(ВозвратТоваровПоставщику.Количество) КАК Количество,
		|	СРЕДНЕЕ(ВЫБОР
		|			КОГДА ВозвратТоваровПоставщику.КоличествоУпаковок <> 0
		|				ТОГДА ВозвратТоваровПоставщику.Цена / ВозвратТоваровПоставщику.КоличествоУпаковок
		|			ИНАЧЕ ВозвратТоваровПоставщику.Цена
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ВозвратТоваровПоставщику.Сумма) КАК Сумма,
		|	СУММА(ВозвратТоваровПоставщику.Сумма * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаРегл,
		|	ВозвратТоваровПоставщику.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ВозвратТоваровПоставщику.СтавкаНДС КАК СтавкаНДС,
		|	ВозвратТоваровПоставщику.Ссылка.Договор КАК Договор,
		|	ВозвратТоваровПоставщику.СтранаПроисхождения223ФЗ КАК СтраныПроисхождения,
		|	ВозвратТоваровПоставщику.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ВозвратТоваровПоставщику.Ссылка.Организация КАК Организация
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщику
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОКПД КАК ТаблицаОКПД
		|		ПО ВозвратТоваровПоставщику.Номенклатура.КодОКПД2 = ТаблицаОКПД.ОКПД2
		|ГДЕ
		|	ВозвратТоваровПоставщику.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщику.Номенклатура,
		|	ВозвратТоваровПоставщику.Характеристика,
		|	ВозвратТоваровПоставщику.СтранаПроизводителя,
		|	ВозвратТоваровПоставщику.СтранаПроисхождения223ФЗ,
		|	ВозвратТоваровПоставщику.Ссылка.Организация,
		|	ВозвратТоваровПоставщику.СтавкаНДС,
		|	ВозвратТоваровПоставщику.Ссылка.Договор,
		|	ВозвратТоваровПоставщику.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыДокумента.Номенклатура КАК Номенклатура,
		|	СУММА(ТоварыДокумента.Количество) КАК КоличествоОстаток,
		|	СУММА(ТоварыДокумента.Сумма) КАК СуммаОстаток,
		|	ТоварыДокумента.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТоварыДокумента.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ТоварыДокумента.Договор КАК ДоговорКонтрагента,
		|	ИСТИНА КАК КонтролироватьКоличество,
		|	ТоварыДокумента.Организация КАК Организация
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыДокумента.Номенклатура,
		|	ТоварыДокумента.СтраныПроисхождения,
		|	ТоварыДокумента.СтранаПроизводителя,
		|	ТоварыДокумента.Договор,
		|	ТоварыДокумента.Организация
		|ИТОГИ ПО
		|	Номенклатура";
	Запрос.УстановитьПараметр("ТаблицаОКПД",ДоляЗакупокТоваровРоссийскогоПроисхождения);
	Запрос.УстановитьПараметр("ДатаСреза", ВозвратПоставщику.Дата);	
	Запрос.УстановитьПараметр("ГраницаДокумента",
		Новый Граница(ВозвратПоставщику.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", ВозвратПоставщику.Ссылка);
	МестаПоставок = Справочники.МестаПоставки.МестаПоставкиСклада(ВозвратПоставщику.Склад);
	ВерсияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВозвратПоставщику.Договор,"ВерсияСоглашения");
	Если ВерсияСоглашения <>  Неопределено И ТипЗнч(ВерсияСоглашения) = ТИП("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор")
		И ВерсияСоглашения.Номенклатура.Количество() = 0 Тогда
		МестаПоставок.Добавить(ПредопределенноеЗначение("Справочник.МестаПоставки.ПустаяСсылка"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ДоступныеМестаПоставки",МестаПоставок);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

Функция ПолучитьРезультатЗапросаДляЗаполненияДвиженийПрослеживаемыеТоварыПоОКПД2(ПТУОбъект)
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ПТУОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ПТУОбъект));
			
	ТоварыОКПД = ПТУОбъект.Товары.Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата",ПТУОбъект.Дата);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДоляЗакупокТоваровРоссийскогоПроисхождения.ОКПД2 КАК ОКПД2
	               |ИЗ
	               |	РегистрСведений.ДоляЗакупокТоваровРоссийскогоПроисхождения КАК ДоляЗакупокТоваровРоссийскогоПроисхождения
	               |ГДЕ
	               |	ДоляЗакупокТоваровРоссийскогоПроисхождения.Год.ДатаНачала <= &Дата
	               |	И ДоляЗакупокТоваровРоссийскогоПроисхождения.Год.ДатаОкончания >= &Дата";
	Запрос.УстановитьПараметр("Дата",ПТУОбъект.Дата);
	Выборка = Запрос.Выполнить().Выгрузить();
	ДоляЗакупокТоваровРоссийскогоПроисхождения = Новый ТаблицаЗначений();
	ДоляЗакупокТоваровРоссийскогоПроисхождения.Колонки.Добавить("ОКПД2",Новый ОписаниеТипов("СправочникСсылка.КлассификаторОКПД2"));
	Для Каждого СтрокаОКПД ИЗ ТоварыОКПД Цикл
		Если Выборка.НайтиСтроки(Новый Структура("ОКПД2",СтрокаОКПД.Номенклатура.КодОКПД2)).Количество() <> 0 Тогда
			ДобСтрока = ДоляЗакупокТоваровРоссийскогоПроисхождения.Добавить();
			ДобСтрока.ОКПД2 = СтрокаОКПД.Номенклатура.КодОКПД2;
			Продолжить;
		КонецЕсли;
		ОКПД2 = СтрокаОКПД.Номенклатура.КодОКПД2.Код;
		Длина = СтрДлина(ОКПД2);
		Символ = 1;
		Классификатор = Неопределено;
		Пока Классификатор = Неопределено И НЕ СтрНайти(ОКПД2,".") = 0 Цикл
			ОКПД2 = Лев(ОКПД2,Длина-Символ); 
			Родитель = Справочники.КлассификаторОКПД2.НайтиПоКоду(ОКПД2);
			Если Выборка.НайтиСтроки(Новый Структура("ОКПД2",Родитель)).Количество() > 0 Тогда
				ДобСтрока = ДоляЗакупокТоваровРоссийскогоПроисхождения.Добавить();
				ДобСтрока.ОКПД2 = СтрокаОКПД.Номенклатура.КодОКПД2;
			КонецЕсли;	
			Символ = Символ +1;
		КонецЦикла;
	КонецЦикла;	

			
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаОКПД.ОКПД2 КАК ОКПД2
		|ПОМЕСТИТЬ ТаблицаОКПД
		|ИЗ
		|	&ТаблицаОКПД КАК ТаблицаОКПД
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ Разрешенные
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(ВЫБОР
		|			КОГДА ПоступлениеТоваровУслугТовары.КоличествоУпаковок <> 0
		|				ТОГДА ПоступлениеТоваровУслугТовары.Цена / ПоступлениеТоваровУслугТовары.КоличествоУпаковок
		|			ИНАЧЕ ПоступлениеТоваровУслугТовары.Цена
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма,
		|	СУММА(ПоступлениеТоваровУслугТовары.Сумма * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаРегл,
		|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ПоступлениеТоваровУслугТовары.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения223ФЗ КАК СтраныПроисхождения,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Договор КАК Договор,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Организация КАК Организация
		|ПОМЕСТИТЬ ТоварыДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОКПД КАК ТаблицаОКПД
		|		ПО ПоступлениеТоваровУслугТовары.Номенклатура.КодОКПД2 = ТаблицаОКПД.ОКПД2
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика,
		|	ПоступлениеТоваровУслугТовары.СтранаПроизводителя,
		|	ПоступлениеТоваровУслугТовары.СтранаПроисхождения223ФЗ,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Договор,
		|	ПоступлениеТоваровУслугТовары.Ссылка.Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыДокумента.Номенклатура КАК Номенклатура,
		|	СУММА(ТоварыДокумента.Количество) КАК КоличествоОстаток,
		|	СУММА(ТоварыДокумента.Сумма) КАК СуммаОстаток,
		|	ТоварыДокумента.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ТоварыДокумента.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ТоварыДокумента.Договор КАК ДоговорКонтрагента,
		|	ИСТИНА КАК КонтролироватьКоличество,
		|	ТоварыДокумента.Организация КАК Организация
		|ИЗ
		|	ТоварыДокумента КАК ТоварыДокумента
		|
		|СГРУППИРОВАТЬ ПО
		|	ТоварыДокумента.Номенклатура,
		|	ТоварыДокумента.СтраныПроисхождения,
		|	ТоварыДокумента.СтранаПроизводителя,
		|	ТоварыДокумента.Договор,
		|	ТоварыДокумента.Организация
		|ИТОГИ ПО
		|	Номенклатура";
	Запрос.УстановитьПараметр("ДатаСреза", ПТУОбъект.Дата);
	Запрос.УстановитьПараметр("ТаблицаОКПД",ДоляЗакупокТоваровРоссийскогоПроисхождения);
	Запрос.УстановитьПараметр("ГраницаДокумента",
		Новый Граница(ПТУОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗаказПоставщику",
		ПТУОбъект.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Ссылка", ПТУОбъект.Ссылка);
	МестаПоставок = Справочники.МестаПоставки.МестаПоставкиСклада(ПТУОбъект.Склад);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

// Запишем данные документа "ПриобретениеТоваров" в регистр
// сведений "ПоступлениеНоменклатуры".
// Функция должна вызываться, когда движения по регистрам
// ПланПоставокПоДоговорам и ЗаказыПоставщикам уже заполнены.
//
Процедура ПоступлениеТоваровУслугЗаписатьВРегистрПоступлениеНоменклатуры(
													ПТУОбъект,
													Отказ, 
													РежимПроведения)
	Если НЕ ЭтоДоговорСПланомПоставок(ПТУОбъект.Договор) Тогда
		Возврат;
	КонецЕсли;
	ЗаказПоставщику = ПТУОбъект.ЗаказПоставщику;
	Лот = ПолучитьЛотИзНабораЗаписей(
		ПТУОбъект.Движения.ПланПоставокПоДоговорам);
	НаборЗаписей = РегистрыСведений.ПоступлениеНоменклатуры.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(ПТУОбъект.Ссылка);
	РезультатЗапроса = 
		ПолучитьРезультатЗапросаДляЗаполненияРегистраПоступлениеНоменклатуры(
			ПТУОбъект);
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПостоянныеЗначенияЗаполнения = Новый Структура;
	ПостоянныеЗначенияЗаполнения.Вставить("Документ", ПТУОбъект.Ссылка);
	ПостоянныеЗначенияЗаполнения.Вставить("Организация", ПТУОбъект.Организация);
	ПостоянныеЗначенияЗаполнения.Вставить("Поставщик", ПТУОбъект.Контрагент);
	ПостоянныеЗначенияЗаполнения.Вставить(
		"ДоговорКонтрагента", ПТУОбъект.Договор);
	ПостоянныеЗначенияЗаполнения.Вставить("Лот", Лот);
	ПостоянныеЗначенияЗаполнения.Вставить("ЗаказПоставщику", ЗаказПоставщику);
	ПостоянныеЗначенияЗаполнения.Вставить("Дата", ПТУОбъект.Дата);
	ПостоянныеЗначенияЗаполнения.Вставить(
		"ВалютаДокумента", ПТУОбъект.Валюта);
	РегистрыСведений.ПоступлениеНоменклатуры.ЗаполнитьДвиженияИзВыборкиЗапроса(
		НаборЗаписей,
		ПостоянныеЗначенияЗаполнения,
		ВыборкаДетальныеЗаписи);
	НаборЗаписей.Записать(Истина);
КонецПроцедуры

Процедура ПоступлениеТоваровУслугЗаполнитьДвиженияПрослеживаемыеТоварыПоОКПД2(
												ПТУОбъект,
												Отказ,
												РежимПроведения)		
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки") ИЛИ
		НЕ ЦентрализованныеЗакупкиВызовСервераУХ.ОрганизацияЗакупаетПоФЗ223(ПТУОбъект.Организация) Тогда
	Возврат;
	КонецЕсли;
	ПТУОбъект.Движения.ПрослеживаемыеТоварыПоОКПД2.Записывать = Истина;
	ДоговорКонтрагента = ПолучитьДоговор(ПТУОбъект);
	ЗаказПоставщику = ПТУОбъект.ЗаказПоставщику;
		ПостоянныеЗначенияРегистра = Новый Структура;
		ПостоянныеЗначенияРегистра.Вставить("ВидДвижения",
			ВидДвиженияНакопления.Приход);
		ПостоянныеЗначенияРегистра.Вставить("Период",
			ПТУОбъект.Дата);
		ПостоянныеЗначенияРегистра.Вставить("Договор",
			ДоговорКонтрагента);
		РезультатЗапроса =
			ПолучитьРезультатЗапросаДляЗаполненияДвиженийПрослеживаемыеТоварыПоОКПД2(
				ПТУОбъект);
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
				ВыборкаДетальныеЗаписи =
					ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.Прямой);
				ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
					ПТУОбъект.Движения.ПрослеживаемыеТоварыПоОКПД2,
					ПостоянныеЗначенияРегистра,
					ВыборкаДетальныеЗаписи,
					Истина,
					ВыборкаНоменклатура.КоличествоОстаток,
					ВыборкаНоменклатура.СуммаОстаток);
		КонецЦикла;
КонецПроцедуры

Функция ПолучитьЛотИзНабораЗаписей(НаборЗаписей, ИмяРеквизитаЛота="Лот")
	мЛотов = НаборЗаписей.ВыгрузитьКолонку(ИмяРеквизитаЛота);
	Для Каждого Лот Из мЛотов Цикл
		Если ЗначениеЗаполнено(Лот) Тогда
			Возврат Лот;
		КонецЕсли;
	КонецЦикла;
	Возврат Справочники.Лоты.ПустаяСсылка();
КонецФункции

Функция ПолучитьРезультатЗапросаДляЗаполненияРегистраПоступлениеНоменклатуры(
																	ПТУОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КурсыВалютыОбъекта.Курс, 1) * ЕСТЬNULL(КурсВалютыЗК.Кратность, 1) / ЕСТЬNULL(КурсыВалютыОбъекта.Кратность, 1) / ЕСТЬNULL(КурсВалютыЗК.Курс, 1) КАК Курс
		|ПОМЕСТИТЬ КурсаПересчета
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = &ВалютаЗК) КАК КурсВалютыЗК,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаСреза, Валюта = &ВалютаДокумента) КАК КурсыВалютыОбъекта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
		|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА ПоступлениеТоваровУслугТовары.КоличествоУпаковок <> 0
		|				ТОГДА ПоступлениеТоваровУслугТовары.Цена / ПоступлениеТоваровУслугТовары.КоличествоУпаковок
		|			ИНАЧЕ ПоступлениеТоваровУслугТовары.Цена
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ПоступлениеТоваровУслугТовары.Сумма) КАК Сумма
		|ПОМЕСТИТЬ НоменклатураДокумента
		|ИЗ
		|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
		|ГДЕ
		|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ПоступлениеТоваровУслугТовары.Номенклатура,
		|	ПоступлениеТоваровУслугТовары.Характеристика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НоменклатураДокумента.Номенклатура КАК Номенклатура,
		|	НоменклатураДокумента.Характеристика КАК Характеристика,
		|	СУММА(НоменклатураДокумента.Сумма) КАК Сумма,
		|	НоменклатураДокумента.Сумма * КурсаПересчета.Курс КАК СуммаРегл,
		|	СУММА(НоменклатураДокумента.Количество) КАК Количество,
		|	КурсаПересчета.Курс КАК Курс
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента,
		|	КурсаПересчета КАК КурсаПересчета
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураДокумента.Номенклатура,
		|	НоменклатураДокумента.Сумма * КурсаПересчета.Курс,
		|	КурсаПересчета.Курс,
		|	НоменклатураДокумента.Характеристика";
	
	Запрос.УстановитьПараметр("ДатаСреза", ПТУОбъект.Дата);	
	Запрос.УстановитьПараметр("ГраницаДокумента", 
		Новый Граница(ПТУОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", ПТУОбъект.Ссылка);
	Запрос.УстановитьПараметр("ВалютаДокумента", ПТУОбъект.Валюта);
	Запрос.УстановитьПараметр("ВалютаЗК", Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить());
	Возврат Запрос.Выполнить();
КонецФункции

// Если возникает ошибка, то формирует сообщение пользователю
// с описанием причины невозможности распределить требуемую
// номенклатуру по остаткам регистра.
//
Функция МожноРаспределитьНоменклатуруПоЗаказамПоставщику(
										ВыборкаНоменклатура,
										Отказ)
	Если НЕ ВыборкаНоменклатура.ЕстьОстаток Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			"Номенклатура "
			+ ВыборкаНоменклатура.Номенклатура
			+ " не заказана у поставщика, или уже оформлена другими поступлениями!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Если ВыборкаНоменклатура.КоличествоОстаток
			< ВыборкаНоменклатура.КоличествоРаспределить
		 ИЛИ ВыборкаНоменклатура.СуммаОстаток
			< ВыборкаНоменклатура.СуммаРаспределить Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			"Заказано меньше номенклатуры "
			+ ВыборкаНоменклатура.Номенклатура
			+ ", чем поступило!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

// Добавляет в набор записей ДвиженияРегистра распределение
//  номенклатуры по остаткам из выборки запроса
//  ВыборкаОстаткиАналитикиНоменклатуры.
//  У движений регистра должны быть реквизиты "Количество" и "Сумма".
//  У ВыборкаОстаткиАналитикиНоменклатуры должны быть
//  реквизиты для заполнения аналитик движений регистра,
//  а также реквизиты для распределения количества и суммы
//  "КоличествоОстаток", "ЦенаРаспределить" и "СуммаОстаток".
//  Недостающие аналитики для заполнения движения берем
//  из структуры ПостоянныеЗначенияРегистра.
//
// Параметры:
//  ДвиженияРегистра - РегистрНакопления.ПланПоставокПоДоговорам
//					 | РегистрНакопления.ЗаказыПоставщикам - набор
//			записей регистра для добавления записей.
//  ПостоянныеЗначенияРегистра - Структура - значения реквизитов
//			регистра, которые не изменяются.
//  ВыборкаОстаткиАналитикиНоменклатуры - ВыборкаИзРезультатаЗапроса -
//			выборка запроса, которая описывает распределение
//			элемента номенклатуры по измерениям записываемого регистра
//			с указанием возможного к использованию объема "КоличествоОстаток",
//			"СуммаОстаток". Для определения того, что нужно списывать
//			и контролировать количество используется поле
//			"КонтролироватьКоличество" (ЛОЖЬ - не списываем кол-во).
//  СписатьКоличество - Число - по значению. Количество номенклатуры
//			которое нужно распределить по измерениям регистра.
//  СписатьСумма - Число - по значению. Сумма номенклатуры которую
//			нужно распределить по измерениям регистра.
//
// Возвращает:
//	- Структура - объем номенклатуры, который не получилось
//		списать по записям регистра заказов поставщику. Реквизиты:
//			- Номенклатура;
//			- Количество;
//			- Сумма;
//			- Цена.
Функция ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
											ДвиженияРегистра,
											ПостоянныеЗначенияРегистра,
											ВыборкаОстаткиАналитикиНоменклатуры,
											УчитыватьКоличество,
											Знач СписатьКоличество,
											Знач СписатьСумма)
	флПродолжить = Истина;
	Пока флПродолжить И ВыборкаОстаткиАналитикиНоменклатуры.Следующий() Цикл
		флПродолжить = ДобавитьВРегистрДвижениеНоменклатуры(
			ДвиженияРегистра,
			ПостоянныеЗначенияРегистра,
			ВыборкаОстаткиАналитикиНоменклатуры,
			СписатьКоличество,
			СписатьСумма);
	КонецЦикла;
	Если (НЕ УчитыватьКоличество ИЛИ СписатьКоличество = 0)
										И СписатьСумма = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	НеСписано = Новый Структура();
	НеСписано.Вставить("Количество", СписатьКоличество);
	НеСписано.Вставить("Сумма", СписатьСумма);
	НеСписано.Вставить("Цена",
		СписатьСумма / ?(СписатьКоличество=0, 1, СписатьКоличество));
	Возврат НеСписано;
КонецФункции

Функция ДобавитьВРегистрДвижениеНоменклатуры(ДвиженияРегистра,
											ПостоянныеЗначенияРегистра,
											ВыборкаСписания,
											СписатьКоличество,
											СписатьСумма)
	Если СписатьКоличество <= 0 И СписатьСумма <= 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	Если (ВыборкаСписания.КонтролироватьКоличество И ВыборкаСписания.КоличествоОстаток <= 0)
			ИЛИ ВыборкаСписания.СуммаОстаток <= 0 Тогда
		Возврат Истина;
	КонецЕсли;
	ОписаниеРесурсов = Новый Структура(
		"КоличествоОстаток, СуммаОстаток, ЦенаРаспределить");
	ЗаполнитьЗначенияСвойств(ОписаниеРесурсов, ВыборкаСписания);
	ОписаниеРесурсов.Вставить("КоличествоДвижения", 0);
	ОписаниеРесурсов.Вставить("СуммаДвижения", 0);
	Если ВыборкаСписания.КонтролироватьКоличество Тогда
		ОпределитьРазмерСписанияРесурсовБазаКоличество(
			ОписаниеРесурсов, СписатьКоличество, СписатьСумма);
	Иначе
		ОпределитьРазмерСписанияРесурсовБазаСумма(
			ОписаниеРесурсов, СписатьКоличество, СписатьСумма);
	КонецЕсли;
	ДобавитьСписаниеРесурсовВДвиженияРегистра(
		ДвиженияРегистра,
		ПостоянныеЗначенияРегистра,
		ВыборкаСписания,
		ОписаниеРесурсов);
	Возврат Истина;
КонецФункции

// Количество - база.
// Сумма списывается с остатка регистра пропорционально кол-ву.
//
Процедура ОпределитьРазмерСписанияРесурсовБазаКоличество(ОписаниеРесурсов,
														СписатьКоличество,
														СписатьСумма)
	КоличествоДвижения = ОписаниеРесурсов.КоличествоОстаток;
	Если КоличествоДвижения <= СписатьКоличество Тогда
		СуммаДвижения = ОписаниеРесурсов.СуммаОстаток;
	Иначе
		КоличествоДвижения = СписатьКоличество;
		СуммаДвижения = КоличествоДвижения 
			* ОписаниеРесурсов.ЦенаРаспределить;
		Если СуммаДвижения > ОписаниеРесурсов.СуммаОстаток Тогда
			СуммаДвижения = ОписаниеРесурсов.СуммаОстаток;
		КонецЕсли;
	КонецЕсли;
	ОписаниеРесурсов.КоличествоДвижения = КоличествоДвижения;
	ОписаниеРесурсов.СуммаДвижения = СуммаДвижения;
	СписатьКоличество = СписатьКоличество - КоличествоДвижения;
	СписатьСумма = ?(СписатьСумма <= СуммаДвижения,
			0,
			СписатьСумма - СуммаДвижения);
КонецПроцедуры

// Сумма - база.
// Количество списывается если оно есть в остатках и табличной части.
//
Процедура ОпределитьРазмерСписанияРесурсовБазаСумма(ОписаниеРесурсов,
													СписатьКоличество,
													СписатьСумма)
	Если СписатьСумма <= ОписаниеРесурсов.СуммаОстаток Тогда
		ОписаниеРесурсов.СуммаДвижения = СписатьСумма;
		СписатьСумма = 0;
	Иначе
		ОписаниеРесурсов.СуммаДвижения = ОписаниеРесурсов.СуммаОстаток;
		СписатьСумма = СписатьСумма - ОписаниеРесурсов.СуммаДвижения;
	КонецЕсли;
	Если СписатьКоличество <= ОписаниеРесурсов.КоличествоОстаток Тогда
		ОписаниеРесурсов.КоличествоДвижения = СписатьКоличество;
		СписатьКоличество = 0;
	Иначе
		ОписаниеРесурсов.КоличествоДвижения =
			ОписаниеРесурсов.КоличествоОстаток;
		СписатьКоличество = 
			СписатьКоличество - ОписаниеРесурсов.КоличествоДвижения;
	КонецЕсли;
КонецПроцедуры

Функция ДобавитьСписаниеРесурсовВДвиженияРегистра(ДвиженияРегистра,
													ПостоянныеЗначенияРегистра,
													ВыборкаСписания,
													ОписаниеРесурсов)
	НоваяЗапись = ДвиженияРегистра.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ПостоянныеЗначенияРегистра);
	ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаСписания);
	НоваяЗапись.Количество = ОписаниеРесурсов.КоличествоДвижения;
	НоваяЗапись.Сумма = ОписаниеРесурсов.СуммаДвижения;
	НоваяЗапись.Цена = 
		ОписаниеРесурсов.СуммаДвижения /
		?(ОписаниеРесурсов.КоличествоДвижения=0,
			1,
			ОписаниеРесурсов.КоличествоДвижения);
	Возврат НоваяЗапись;
КонецФункции

Процедура ЗаполнитьНоменклатуруПоступленияИзЗаказаПоставщику(Приемник, Основание)
	Если НЕ ЗначениеЗаполнено(Основание) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Основание);
	Запрос.Текст =
		"ВЫБРАТЬ
       |	ЗаказПоставщикуНоменклатура.НомерСтроки КАК НомерСтроки,
       |	ЗаказПоставщикуНоменклатура.Номенклатура КАК Номенклатура,
       |	ПРЕДСТАВЛЕНИЕ(ЗаказПоставщикуНоменклатура.Номенклатура) КАК Содержание,
       |	ЗаказПоставщикуНоменклатура.Упаковка КАК ЕдиницаИзмерения,
       |	ЗаказПоставщикуНоменклатура.Номенклатура.НомерГТД КАК НомерГТД,
       |	ЗаказПоставщикуНоменклатура.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
       |	ЗаказПоставщикуНоменклатура.Цена КАК Цена,
       |	ЗаказПоставщикуНоменклатура.СуммаСНДС КАК Сумма,
       |	ЗаказПоставщикуНоменклатура.СтавкаНДС КАК СтавкаНДС,
       |	ЗаказПоставщикуНоменклатура.СуммаНДС КАК СуммаНДС,
       |	ЗаказПоставщикуНоменклатура.Количество КАК Количество
       |ИЗ
       |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуНоменклатура
       |ГДЕ
       |	ЗаказПоставщикуНоменклатура.Ссылка = &Ссылка
       |	И ЗаказПоставщикуНоменклатура.Номенклатура.ВидНоменклатуры.ТипНоменклатуры <> значение(Перечисление.ТипыНоменклатуры.Услуга)
       |
       |УПОРЯДОЧИТЬ ПО
       |	НомерСтроки
       |;
       |
       |////////////////////////////////////////////////////////////////////////////////
       |ВЫБРАТЬ
       |	ЗаказПоставщикуНоменклатура.НомерСтроки КАК НомерСтроки,
       |	ЗаказПоставщикуНоменклатура.Номенклатура КАК Номенклатура,
       |	ПРЕДСТАВЛЕНИЕ(ЗаказПоставщикуНоменклатура.Номенклатура) КАК Содержание,
       |	ЗаказПоставщикуНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
       |	ЗаказПоставщикуНоменклатура.Номенклатура.НомерГТД КАК НомерГТД,
       |	ЗаказПоставщикуНоменклатура.Номенклатура.СтранаПроисхождения КАК СтранаПроисхождения,
       |	ЗаказПоставщикуНоменклатура.Цена КАК Цена,
       |	ЗаказПоставщикуНоменклатура.СуммаСНДС КАК Сумма,
       |	ЗаказПоставщикуНоменклатура.СтавкаНДС КАК СтавкаНДС,
       |	ЗаказПоставщикуНоменклатура.СуммаНДС КАК СуммаНДС,
       |	ЗаказПоставщикуНоменклатура.Количество КАК Количество
       |ИЗ
       |	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуНоменклатура
       |ГДЕ
       |	ЗаказПоставщикуНоменклатура.Ссылка = &Ссылка
       |	И ЗаказПоставщикуНоменклатура.Номенклатура.Услуга
       |
       |УПОРЯДОЧИТЬ ПО
       |	НомерСтроки";
	//мРезультатовЗапроса = Запрос.ВыполнитьПакет();
	//Приемник.Товары.Загрузить(мРезультатовЗапроса[0].Выгрузить());
	//ЭтоКомиссия = ЗначениеЗаполнено(Приемник.Договор) 
	//	И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Приемник.Договор, "ВидДоговора") = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	//ЗначениеЗаполненияОтражениеВУСН = ПоступлениеТоваровУслугФормыКлиентСервер.ОтражениеВУСН(
	//			Приемник.ВидОперации, ЭтоКомиссия);
	//Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Приемник, "Товары");
	//ОснованиеСуммаВключаетНДС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Основание, "ЦенаВключаетНДС");
	//Приемник.СуммаВключаетНДС = ОснованиеСуммаВключаетНДС;
	//Приемник.НДСВключенВСтоимость = Ложь;
	//Приемник.НДСНеВыделять = Ложь;
	//Для Каждого СтрокаТЧ Из Приемник.Товары Цикл
	//	СтрокаТЧ.Коэффициент	 	 = 1;
	//	СтрокаТЧ.ОтражениеВУСН = ЗначениеЗаполненияОтражениеВУСН;
	//КонецЦикла;
	//Приемник.Услуги.Загрузить(мРезультатовЗапроса[1].Выгрузить());
	//Документы.ПоступлениеТоваровУслуг.ЗаполнитьСчетаУчетаВТабличнойЧасти(Приемник, "Услуги");
	//Если НЕ Основание.ЦенаВключаетНДС = Приемник.СуммаВключаетНДС Тогда
	//	Для Каждого СтрокаТЧ Из Приемник.Услуги Цикл
	//		СтрокаТЧ.ОтражениеВУСН = ЗначениеЗаполненияОтражениеВУСН;
	//		СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ?(Приемник.СуммаВключаетНДС, СтрокаТЧ.СуммаНДС, -СтрокаТЧ.СуммаНДС);
	//		СтрокаТЧ.Цена = ?(СтрокаТЧ.Количество = 0, 0, СтрокаТЧ.Сумма/СтрокаТЧ.Количество);
	//		// Рассчитываем реквизиты табличной части.
	//		ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, Приемник.СуммаВключаетНДС);
	//	КонецЦикла;
	//КонецЕсли;
КонецПроцедуры

Процедура ВозвратТоваровПоставщикуЗаполнитьДвиженияПланПоставокПоДоговорам(
														ВозвратПоставщикуОбъект, 
														Отказ, 
														РежимПроведения)
	ВозвратПоставщикуОбъект.Движения.ПланПоставокПоДоговорам.Записывать =
		Истина;
	ПоступлениеСсылка = ВозвратПоставщикуОбъект.ДокументПоступления;
	Если МожноПровестиВозвратТоваровПоставщику(ВозвратПоставщикуОбъект)
			И НЕ ЗначениеЗаполнено(ПоступлениеСсылка.ЗаказПоставщику)Тогда
		ПостоянныеЗначенияРегистра = Новый Структура;
		ПостоянныеЗначенияРегистра.Вставить("ВидДвижения",
			ВидДвиженияНакопления.Приход);
		ПостоянныеЗначенияРегистра.Вставить("Период",
			ВозвратПоставщикуОбъект.Дата);
		ПостоянныеЗначенияРегистра.Вставить("Договор",
			ВозвратПоставщикуОбъект.Договор);
		РезультатЗапроса =
			ПолучитьРезультатЗапросаВозвратПоПлануПоставок(
				ВозвратПоставщикуОбъект);
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ВыборкаХарактеристик = ВыборкаНоменклатура.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				Если МожноВернутьНоменклатуруПоПТиУ(
								ВыборкаХарактеристик, Отказ) Тогда
					ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
						ВозвратПоставщикуОбъект.Движения.ПланПоставокПоДоговорам,
						ПостоянныеЗначенияРегистра,
						ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой),
						Истина,
						ВыборкаХарактеристик.КоличествоРаспределить,
						ВыборкаХарактеристик.СуммаРаспределить);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьРезультатЗапросаВозвратПоПлануПоставок(
												ВозвратПоставщикуОбъект)
	ДоговорКонтрагента = ПолучитьДоговор(ВозвратПоставщикуОбъект);
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ВозвратПоставщикуОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ВозвратПоставщикуОбъект));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(ВЫБОР
		|			КОГДА ВозвратТоваровПоставщикуТовары.КоличествоУпаковок <> 0
		|				ТОГДА ВозвратТоваровПоставщикуТовары.Цена / ВозвратТоваровПоставщикуТовары.КоличествоУпаковок
		|			ИНАЧЕ ВозвратТоваровПоставщикуТовары.Цена
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма) КАК Сумма,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаРегл,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ВозвратТоваровПоставщикуТовары.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ НоменклатураДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуТовары.Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Характеристика,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
		|	ВозвратТоваровПоставщикуТовары.СтавкаНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ПланПоставокПоДоговорамПТУ.Сумма ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ПланПоставокПоДоговорамПТУ.Сумма > ЕСТЬNULL(ПланПоставокПоДоговорамВозвраты.СуммаПриход, 0)
		|		КОНЕЦ) КАК ЕстьОстаток,
		|	ПланПоставокПоДоговорамПТУ.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
		|	НЕ НоменклатураДокумента.ЭтоУслуга
		|		ИЛИ НоменклатураДокумента.Количество <= ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Количество, 0) - ЕСТЬNULL(ПланПоставокПоДоговорамВозвраты.КоличествоПриход, 0) КАК КонтролироватьКоличество,
		|	НоменклатураДокумента.Номенклатура КАК Номенклатура,
		|	НоменклатураДокумента.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)) КАК Лот,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК Проект,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)) КАК МестоПоставки,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Менеджер, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Менеджер,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.ДоговорСПокупателем, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество) КАК КоличествоРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.Сумма) КАК СуммаРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.Цена) КАК ЦенаРаспределить,
		|	СУММА(ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Количество, 0) - ЕСТЬNULL(ПланПоставокПоДоговорамВозвраты.КоличествоПриход, 0)) КАК КоличествоОстаток,
		|	СУММА(ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Сумма, 0) - ЕСТЬNULL(ПланПоставокПоДоговорамВозвраты.СуммаПриход, 0)) КАК СуммаОстаток,
		|	ПланПоставокПоДоговорамПТУ.Приоритет.Код КАК СортировкаПриоритет,
		|	ПланПоставокПоДоговорамПТУ.ПериодПотребности.ДатаНачала КАК СортировкаПериодПотребности,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамПТУ.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамПТУ.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамПТУ.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ КАК СортировкаПоДатеЛота,
		|	1 КАК Коэффициент,
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	НоменклатураДокумента.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорамПТУ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам.Обороты(
		|					,
		|					&ГраницаВозврата,
		|					Регистратор,
		|					Договор = &Договор
		|						И МестоПоставки В (&ДоступныеМестаПоставки)) КАК ПланПоставокПоДоговорамВозвраты
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВозвратыПоДоговорамЗакупок.СрезПоследних(
		|						&ГраницаВозврата,
		|						ДоговорПоставщика = &Договор
		|							И ДокументПоступление = &ПоступлениеСсылка) КАК ВозвратыПоДоговорамЗакупокСрезПоследних
		|				ПО ПланПоставокПоДоговорамВозвраты.Регистратор = ВозвратыПоДоговорамЗакупокСрезПоследних.ВозвратТоваровПоставщику
		|			ПО ПланПоставокПоДоговорамПТУ.Договор = ПланПоставокПоДоговорамВозвраты.Договор
		|				И ПланПоставокПоДоговорамПТУ.Приоритет = ПланПоставокПоДоговорамВозвраты.Приоритет
		|				И ПланПоставокПоДоговорамПТУ.Номенклатура = ПланПоставокПоДоговорамВозвраты.Номенклатура
		|				И ПланПоставокПоДоговорамПТУ.ПериодПотребности = ПланПоставокПоДоговорамВозвраты.ПериодПотребности
		|				И ПланПоставокПоДоговорамПТУ.Организация = ПланПоставокПоДоговорамВозвраты.Организация
		|				И ПланПоставокПоДоговорамПТУ.МестоПоставки = ПланПоставокПоДоговорамВозвраты.МестоПоставки
		|				И ПланПоставокПоДоговорамПТУ.Проект = ПланПоставокПоДоговорамВозвраты.Проект
		|				И ПланПоставокПоДоговорамПТУ.Менеджер = ПланПоставокПоДоговорамВозвраты.Менеджер
		|				И ПланПоставокПоДоговорамПТУ.ДоговорСПокупателем = ПланПоставокПоДоговорамВозвраты.ДоговорСПокупателем
		|				И ПланПоставокПоДоговорамПТУ.Лот = ПланПоставокПоДоговорамВозвраты.Лот
		|				И ПланПоставокПоДоговорамПТУ.Характеристика = ПланПоставокПоДоговорамВозвраты.Характеристика
		|		ПО НоменклатураДокумента.Номенклатура = ПланПоставокПоДоговорамПТУ.Номенклатура
		|			И (ПланПоставокПоДоговорамПТУ.Регистратор = &ПоступлениеСсылка)
		|			И (ПланПоставокПоДоговорамПТУ.МестоПоставки В (&ДоступныеМестаПоставки))
		|			И НоменклатураДокумента.Характеристика = ПланПоставокПоДоговорамПТУ.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	НоменклатураДокумента.Номенклатура.ЕдиницаИзмерения,
		|	ПланПоставокПоДоговорамПТУ.Приоритет,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	НоменклатураДокумента.Номенклатура,
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Менеджер, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)),
		|	ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.ДоговорСПокупателем, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)),
		|	ПланПоставокПоДоговорамПТУ.Приоритет.Код,
		|	ПланПоставокПоДоговорамПТУ.ПериодПотребности.ДатаНачала,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамПТУ.Лот ЕСТЬ NULL
		|				ИЛИ ПланПоставокПоДоговорамПТУ.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|			ТОГДА ПланПоставокПоДоговорамПТУ.Лот.ДатаНачалаПериодаПоставки
		|		ИНАЧЕ &ДатаСреза
		|	КОНЕЦ,
		|	НоменклатураДокумента.Характеристика,
		|	НЕ НоменклатураДокумента.ЭтоУслуга
		|		ИЛИ НоменклатураДокумента.Количество <= ЕСТЬNULL(ПланПоставокПоДоговорамПТУ.Количество, 0) - ЕСТЬNULL(ПланПоставокПоДоговорамВозвраты.КоличествоПриход, 0),
		|	НоменклатураДокумента.СтавкаНДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	СортировкаПриоритет УБЫВ,
		|	СортировкаПериодПотребности,
		|	СортировкаПоДатеЛота
		|ИТОГИ
		|	МИНИМУМ(ЕстьОстаток),
		|	МАКСИМУМ(КоличествоРаспределить),
		|	МАКСИМУМ(СуммаРаспределить),
		|	СУММА(КоличествоОстаток),
		|	СУММА(СуммаОстаток)
		|ПО
		|	Номенклатура,
		|	Характеристика";
	Запрос.УстановитьПараметр("ДатаСреза", ВозвратПоставщикуОбъект.Дата);	
	Запрос.УстановитьПараметр("ГраницаВозврата",
		Новый Граница(ВозвратПоставщикуОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Ссылка", ВозвратПоставщикуОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПоступлениеСсылка", ВозвратПоставщикуОбъект.ДокументПоступления);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДоступныеМестаПоставки",
		Справочники.МестаПоставки.МестаПоставкиСклада(
			ВозвратПоставщикуОбъект.Склад));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

Функция МожноВернутьНоменклатуруПоПТиУ(ВыборкаНоменклатура, 
									   Отказ)
	Если НЕ ВыборкаНоменклатура.ЕстьОстаток Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			"Номенклатура "
			+ ВыборкаНоменклатура.Номенклатура
			+ " не зарегистрирована документом поступления товаров услуг, или уже оформлена другим возвратом!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Если ВыборкаНоменклатура.КоличествоОстаток
			< ВыборкаНоменклатура.КоличествоРаспределить
		 ИЛИ ВыборкаНоменклатура.СуммаОстаток
			< ВыборкаНоменклатура.СуммаРаспределить Тогда
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст =
			"Номенклатуры "
			+ ВыборкаНоменклатура.Номенклатура
			+ " возвращаем больше, чем поступило!";
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

Процедура ВозвратТоваровПоставщикуЗаполнитьДвиженияЗаказовПоставщикам(
													ВозвратПоставщикуОбъект, 
													Отказ, 
													РежимПроведения)
	ВозвратПоставщикуОбъект.Движения.ЗаказыПоставщикамУХ.Записывать = Истина;
	ПоступлениеСсылка = ВозвратПоставщикуОбъект.ДокументПоступления;
	ДоговорКонтрагента = ПолучитьДоговор(ВозвратПоставщикуОбъект);
	Если МожноПровестиВозвратТоваровПоставщику(ВозвратПоставщикуОбъект)
			И ЗначениеЗаполнено(ПоступлениеСсылка.ЗаказПоставщику) Тогда
		ЗаказПоставщику = ПоступлениеСсылка.ЗаказПоставщику;
		ПостоянныеЗначенияРегистра = Новый Структура;
		ПостоянныеЗначенияРегистра.Вставить("ВидДвижения",
			ВидДвиженияНакопления.Приход);
		ПостоянныеЗначенияРегистра.Вставить("Период",
			ВозвратПоставщикуОбъект.Дата);
		ПостоянныеЗначенияРегистра.Вставить("ЗаказПоставщику",
			ЗаказПоставщику);
		ПостоянныеЗначенияРегистра.Вставить("Договор",
			ДоговорКонтрагента);
		ПостоянныеЗначенияРегистра.Вставить("Склад",
			ВозвратПоставщикуОбъект.Склад);
		РезультатЗапроса =
			ПолучитьРезультатЗапросаДляВозвратаЗаказовПоставщикам(
				ВозвратПоставщикуОбъект);
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
			ВыборкаХарактеристик = ВыборкаНоменклатура.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаХарактеристик.Следующий() Цикл
				Если МожноРаспределитьНоменклатуруПоЗаказамПоставщику(
										ВыборкаХарактеристик, Отказ) Тогда
					ВыборкаДетальныеЗаписи =
						ВыборкаХарактеристик.Выбрать(ОбходРезультатаЗапроса.Прямой);
					ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
						ВозвратПоставщикуОбъект.Движения.ЗаказыПоставщикамУХ,
						ПостоянныеЗначенияРегистра,
						ВыборкаДетальныеЗаписи,
						Истина,
						ВыборкаХарактеристик.КоличествоРаспределить,
						ВыборкаХарактеристик.СуммаРаспределить);
				КонецЕсли;
				КонецЦикла;
		КонецЦикла;
	КонецЕсли;	
КонецПроцедуры

Функция ПолучитьРезультатЗапросаДляВозвратаЗаказовПоставщикам(
										ВозвратПоставщикуОбъект)
	ДоговорКонтрагента = ПолучитьДоговор(ВозвратПоставщикуОбъект);
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ВозвратПоставщикуОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ВозвратПоставщикуОбъект));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВозвратТоваровПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Характеристика КАК Характеристика,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Количество) КАК Количество,
		|	СРЕДНЕЕ(ВЫБОР
		|			КОГДА ВозвратТоваровПоставщикуТовары.КоличествоУпаковок <> 0
		|				ТОГДА ВозвратТоваровПоставщикуТовары.Цена / ВозвратТоваровПоставщикуТовары.КоличествоУпаковок
		|			ИНАЧЕ ВозвратТоваровПоставщикуТовары.Цена
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма) КАК Сумма,
		|	СУММА(ВозвратТоваровПоставщикуТовары.Сумма * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаРегл,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ВозвратТоваровПоставщикуТовары.НоменклатураПартнера КАК НоменклатураПартнера,
		|	ВозвратТоваровПоставщикуТовары.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения223ФЗ КАК СтранаПроисхождения223ФЗ		
		|ПОМЕСТИТЬ НоменклатураДокумента
		|ИЗ
		|	Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
		|ГДЕ
		|	ВозвратТоваровПоставщикуТовары.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ВозвратТоваровПоставщикуТовары.Номенклатура,
		|	ВозвратТоваровПоставщикуТовары.Характеристика,
		|	ВозвратТоваровПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
		|	ВозвратТоваровПоставщикуТовары.НоменклатураПартнера,
		|	ВозвратТоваровПоставщикуТовары.СтранаПроизводителя,
		|	ВозвратТоваровПоставщикуТовары.СтранаПроисхождения223ФЗ		
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА ЗаказыПоставщикамПТУ.Договор ЕСТЬ NULL
		|				ТОГДА ЛОЖЬ
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ) КАК ЕстьОстаток,
		|	ЗаказыПоставщикамПТУ.Приоритет КАК Приоритет,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
		|	НЕ НоменклатураДокумента.ЭтоУслуга
		|		ИЛИ НоменклатураДокумента.Количество <= ЕСТЬNULL(ЗаказыПоставщикамПТУ.Количество, 0) - ЕСТЬNULL(ЗаказыПоставщикамВозврат.КоличествоПриход, 0) КАК КонтролироватьКоличество,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.НоменклатураИсходная, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК НоменклатураИсходная,
		|	НоменклатураДокумента.Номенклатура КАК Номенклатура,
		|	НоменклатураДокумента.Характеристика КАК Характеристика,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)) КАК Лот,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)) КАК Проект,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК Организация,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)) КАК МестоПоставки,
		|	ЗаказыПоставщикамПТУ.Менеджер КАК Менеджер,
		|	ЗаказыПоставщикамПТУ.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	МАКСИМУМ(НоменклатураДокумента.Количество) КАК КоличествоРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.Сумма) КАК СуммаРаспределить,
		|	МАКСИМУМ(НоменклатураДокумента.Цена) КАК ЦенаРаспределить,
		|	МАКСИМУМ(ЕСТЬNULL(ЗаказыПоставщикамПТУ.Количество, 0) - ЕСТЬNULL(ЗаказыПоставщикамВозврат.КоличествоПриход, 0)) КАК КоличествоОстаток,
		|	МАКСИМУМ(ЕСТЬNULL(ЗаказыПоставщикамПТУ.Сумма, 0) - ЕСТЬNULL(ЗаказыПоставщикамВозврат.СуммаПриход, 0)) КАК СуммаОстаток,
		|	ЗаказыПоставщикамПТУ.Приоритет.Код КАК СортировкаПриоритет,
		|	ЗаказыПоставщикамПТУ.ПериодПотребности.ДатаНачала КАК СортировкаПериодПотребности,
		|	ЗаказыПоставщикамПТУ.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	НоменклатураДокумента.СтранаПроизводителя КАК СтранаПроизводителя,
		|	НоменклатураДокумента.СтранаПроисхождения223ФЗ КАК СтраныПроисхождения		
		|ИЗ
		|	НоменклатураДокумента КАК НоменклатураДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамУХ КАК ЗаказыПоставщикамПТУ
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыПоставщикамУХ.Обороты(
		|					,
		|					&ГраницаДокумента,
		|					Регистратор,
		|					Договор = &Договор
		|						И МестоПоставки В (&ДоступныеМестаПоставки)) КАК ЗаказыПоставщикамВозврат
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВозвратыПоДоговорамЗакупок.СрезПоследних(
		|						&ГраницаДокумента,
		|						ДоговорПоставщика = &Договор
		|							И ДокументПоступление = &ПоступлениеСсылка) КАК ВозвратыПоДоговорамЗакупокСрезПоследних
		|				ПО ЗаказыПоставщикамВозврат.Регистратор = ВозвратыПоДоговорамЗакупокСрезПоследних.ВозвратТоваровПоставщику
		|			ПО ЗаказыПоставщикамПТУ.ЗаказПоставщику = ЗаказыПоставщикамВозврат.ЗаказПоставщику
		|				И ЗаказыПоставщикамПТУ.Договор = ЗаказыПоставщикамВозврат.Договор
		|				И ЗаказыПоставщикамПТУ.Приоритет = ЗаказыПоставщикамВозврат.Приоритет
		|				И ЗаказыПоставщикамПТУ.ПериодПотребности = ЗаказыПоставщикамВозврат.ПериодПотребности
		|				И ЗаказыПоставщикамПТУ.НоменклатураИсходная = ЗаказыПоставщикамВозврат.НоменклатураИсходная
		|				И ЗаказыПоставщикамПТУ.Номенклатура = ЗаказыПоставщикамВозврат.Номенклатура
		|				И ЗаказыПоставщикамПТУ.Лот = ЗаказыПоставщикамВозврат.Лот
		|				И ЗаказыПоставщикамПТУ.Проект = ЗаказыПоставщикамВозврат.Проект
		|				И ЗаказыПоставщикамПТУ.Организация = ЗаказыПоставщикамВозврат.Организация
		|				И ЗаказыПоставщикамПТУ.МестоПоставки = ЗаказыПоставщикамВозврат.МестоПоставки
		|				И ЗаказыПоставщикамПТУ.Менеджер = ЗаказыПоставщикамВозврат.Менеджер
		|				И ЗаказыПоставщикамПТУ.ДоговорСПокупателем = ЗаказыПоставщикамВозврат.ДоговорСПокупателем
		|				И ЗаказыПоставщикамПТУ.Склад = ЗаказыПоставщикамВозврат.Склад
		|				И ЗаказыПоставщикамПТУ.ХарактеристикаИсходная = ЗаказыПоставщикамВозврат.ХарактеристикаИсходная
		|				И ЗаказыПоставщикамПТУ.Характеристика = ЗаказыПоставщикамВозврат.Характеристика
		|		ПО НоменклатураДокумента.Номенклатура = ЗаказыПоставщикамПТУ.Номенклатура
		|			И (ЗаказыПоставщикамПТУ.Регистратор = &ПоступлениеСсылка)
		|			И (ЗаказыПоставщикамПТУ.МестоПоставки В (&ДоступныеМестаПоставки))
		|			И НоменклатураДокумента.Характеристика = ЗаказыПоставщикамПТУ.Характеристика
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.НоменклатураИсходная, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.ПериодПотребности, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)),
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.МестоПоставки, ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)),
		|	НоменклатураДокумента.Номенклатура,
		|	ЕСТЬNULL(ЗаказыПоставщикамПТУ.Лот, ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)),
		|	ЗаказыПоставщикамПТУ.Приоритет,
		|	ЗаказыПоставщикамПТУ.Менеджер,
		|	ЗаказыПоставщикамПТУ.ДоговорСПокупателем,
		|	ЗаказыПоставщикамПТУ.ПериодПотребности.ДатаНачала,
		|	ЗаказыПоставщикамПТУ.Приоритет.Код,
		|	НоменклатураДокумента.Характеристика,
		|	НЕ НоменклатураДокумента.ЭтоУслуга
		|		ИЛИ НоменклатураДокумента.Количество <= ЕСТЬNULL(ЗаказыПоставщикамПТУ.Количество, 0) - ЕСТЬNULL(ЗаказыПоставщикамВозврат.КоличествоПриход, 0),
		|	ЗаказыПоставщикамПТУ.НоменклатураПоставщика,
		|	НоменклатураДокумента.СтранаПроизводителя,
		|	НоменклатураДокумента.СтранаПроисхождения223ФЗ		
		|
		|УПОРЯДОЧИТЬ ПО
		|	Номенклатура,
		|	Характеристика,
		|	СортировкаПриоритет УБЫВ,
		|	СортировкаПериодПотребности
		|ИТОГИ
		|	МИНИМУМ(ЕстьОстаток),
		|	МАКСИМУМ(КоличествоРаспределить),
		|	МАКСИМУМ(СуммаРаспределить),
		|	СУММА(КоличествоОстаток),
		|	СУММА(СуммаОстаток)
		|ПО
		|	Номенклатура,
		|	Характеристика";
	Запрос.УстановитьПараметр("ДатаСреза", ВозвратПоставщикуОбъект.Дата);	
	Запрос.УстановитьПараметр("ГраницаДокумента",
		Новый Граница(ВозвратПоставщикуОбъект.Дата, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ЗаказПоставщику",
		ВозвратПоставщикуОбъект.ДокументПоступления.ЗаказПоставщику);
	Запрос.УстановитьПараметр("Ссылка", ВозвратПоставщикуОбъект.Ссылка);
	Запрос.УстановитьПараметр("ПоступлениеСсылка",
		ВозвратПоставщикуОбъект.ДокументПоступления);
	Запрос.УстановитьПараметр("Договор", ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДоступныеМестаПоставки",
		Справочники.МестаПоставки.МестаПоставкиСклада(
			ВозвратПоставщикуОбъект.Склад));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

Процедура ВозвратТоваровПоставщикуДобавитьВРегистрСведенийВозвратПоставщику(
													ВозвратПоставщикуОбъект, 
													Отказ, 
													РежимПроведения)
	ВозвратПоставщикуОбъект.Движения.ВозвратыПоДоговорамЗакупок.Записывать =
		Истина;												
	Если МожноПровестиВозвратТоваровПоставщику(ВозвратПоставщикуОбъект) Тогда
		РегистрыСведений.ВозвратыПоДоговорамЗакупок.ДобавитьДвижениеВозвратПоставщику(
			ВозвратПоставщикуОбъект.Движения.ВозвратыПоДоговорамЗакупок,
			ПолучитьОписаниеДвиженияРегистраВозвратыПоДоговорамЗакупок(
				ВозвратПоставщикуОбъект));
	КонецЕсли;
КонецПроцедуры

Процедура ВозвратТоваровУслугЗаполнитьДвиженияПрослеживаемыеТоварыПоОКПД2(
													ВозвратПоствщику,
													Отказ, 
													РежимПроведения)
	Если НЕ ПолучитьФункциональнуюОпцию("ВестиУчетПоСтранамКорпоративныеЗакупки") ИЛИ
		НЕ ЦентрализованныеЗакупкиВызовСервераУХ.ОрганизацияЗакупаетПоФЗ223(ВозвратПоствщику.Организация) Тогда
	Возврат;
	КонецЕсли;
													
	ВозвратПоствщику.Движения.ПрослеживаемыеТоварыПоОКПД2.Записывать = Истина;
	ДоговорКонтрагента = ПолучитьДоговор(ВозвратПоствщику);
		ПостоянныеЗначенияРегистра = Новый Структура;
		ПостоянныеЗначенияРегистра.Вставить("ВидДвижения",
			ВидДвиженияНакопления.Расход);
		ПостоянныеЗначенияРегистра.Вставить("Период",
			ВозвратПоствщику.Дата);
		ПостоянныеЗначенияРегистра.Вставить("Договор",
			ДоговорКонтрагента);
		РезультатЗапроса =
			ПолучитьРезультатЗапросаДляЗаполненияДвиженийПрослеживаемыеТоварыПоОКПД2ПоВозвратуПоставщику(
				ВозвратПоствщику);
		ВыборкаНоменклатура = РезультатЗапроса.Выбрать(
					ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаНоменклатура.Следующий() Цикл
				ВыборкаДетальныеЗаписи =
					ВыборкаНоменклатура.Выбрать(ОбходРезультатаЗапроса.Прямой);
				ДобавитьВРегистрДвиженияНоменклатурыПоАналитикамЗапроса(
					ВозвратПоствщику.Движения.ПрослеживаемыеТоварыПоОКПД2,
					ПостоянныеЗначенияРегистра,
					ВыборкаДетальныеЗаписи,
					Истина,
					ВыборкаНоменклатура.КоличествоОстаток,
					ВыборкаНоменклатура.СуммаОстаток);
		КонецЦикла;
КонецПроцедуры

Функция ПолучитьОписаниеДвиженияРегистраВозвратыПоДоговорамЗакупок(
											ВозвратПоставщикуОбъект)
	Результат = Новый Структура;										
	Результат.Вставить("Период", ВозвратПоставщикуОбъект.Дата);
	Результат.Вставить("Регистратор", ВозвратПоставщикуОбъект.Ссылка);
	Результат.Вставить("ДоговорПоставщика",
		ПолучитьДоговор(ВозвратПоставщикуОбъект));
	Результат.Вставить("ДокументПоступление",
		ВозвратПоставщикуОбъект.ДокументПоступления);
	Результат.Вставить("ВозвратТоваровПоставщику", ВозвратПоставщикуОбъект.Ссылка);
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьЗаказПоставщикуПоДоговоруСПланомПоставки(ЗаказПоставщикуОбъект,
													   	    ВерсияДоговора)
	Если ТипЗнч(ВерсияДоговора) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ЗаказПоставщикуОбъект.Договор = ВерсияДоговора;
	ИначеЕсли ТипЗнч(ВерсияДоговора) = 
				Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор") Тогда
		ЗаказПоставщикуОбъект.Договор = ВерсияДоговора.ДоговорКонтрагента;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЗаказПоставщикуОбъект.Договор) Тогда
		Если ЗаказПоставщикуОбъект.Договор.ВидСоглашения = 
					Перечисления.ВидыСоглашений.РамочныйДоговор Тогда
			ВызватьИсключение НСтр(
				"ru='Заказ поставщику нельзя создавать на основании рамочного договора!'");
		КонецЕсли;
		Если НЕ ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоДопустимыйВидДоговораУХ(
							ЗаказПоставщикуОбъект.Договор.ВидДоговораУХ) Тогда
			ВызватьИсключение НСтр(
				"ru='По данному виду договора невозможно создать заказ поставщику!'");
		КонецЕсли;
		ОбновитьЗаказПоставщикуОбъектПоДоговору(ЗаказПоставщикуОбъект);
	КонецЕсли;
КонецПроцедуры

Процедура ВыполнитьКонтрольРезультатовПроведения(ЗаказПоставщикуОбъект,
												 Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПланПоставокПоДоговорамОстатки.Приоритет КАК Приоритет,
		|	ПланПоставокПоДоговорамОстатки.Номенклатура КАК Номенклатура,
		|	ПланПоставокПоДоговорамОстатки.Характеристика КАК Характеристика,
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности КАК ПериодПотребности,
		|	ПланПоставокПоДоговорамОстатки.Организация КАК Организация,
		|	ПланПоставокПоДоговорамОстатки.МестоПоставки КАК МестоПоставки,
		|	ПланПоставокПоДоговорамОстатки.Проект КАК Проект,
		|	ПланПоставокПоДоговорамОстатки.Менеджер КАК Менеджер,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОстатки.Лот КАК Лот,
		|	ПланПоставокПоДоговорамОстатки.КоличествоОстаток КАК КоличествоОстаток,
		|	ПланПоставокПоДоговорамОстатки.СуммаОстаток КАК СуммаОстаток,
		|	ПланПоставокПоДоговорамОстатки.КоличествоОстаток < 0 КАК ЭтоКоличество,
		|	ПланПоставокПоДоговорамОстатки.СуммаОстаток < 0 КАК ЭтоСумма
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(&Период, Договор = &Договор) КАК ПланПоставокПоДоговорамОстатки
		|ГДЕ
		|	(ПланПоставокПоДоговорамОстатки.КоличествоОстаток < 0
		|			ИЛИ ПланПоставокПоДоговорамОстатки.СуммаОстаток < 0)";
	Запрос.УстановитьПараметр("Договор",
		ЗаказПоставщикуОбъект.Договор);
	Запрос.УстановитьПараметр("Период",
		Новый Граница(
			ЗаказПоставщикуОбъект.МоментВремени(), 
			ВидГраницы.Включая));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	мИменИзмерений = 
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьМассивИменаКлючевыхПолейЗаказа();
	Ошибки = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПредставлениеСтрокиЗаказа =
			ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьПредставлениеОбъекта(
				ВыборкаДетальныеЗаписи,
				мИменИзмерений);
	    ТекстОшибки = СтрШаблон(НСтр("ru='Для строки заказа %1 по договору! Аналитики строки заказа:%2%3'"),
			ТекстПревышенПоказатель(
					ВыборкаДетальныеЗаписи.ЭтоКоличество,
					ВыборкаДетальныеЗаписи.ЭтоСумма),
			Символы.ПС,
			ПредставлениеСтрокиЗаказа);
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			"", 
			ТекстОшибки,
			Неопределено);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
		Ошибки,
		Отказ);
КонецПроцедуры

Процедура ВыполнитьКонтрольПоЦенеДоговора(ЗаказПоставщикуОбъект,
												 Отказ)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Ссылка КАК Регистратор,
		|	ЗаказПоставщикуТовары.НомерСтроки КАК НомерСтроки,
		|	&Дата КАК Период,
		|	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику,
		|	ЗаказПоставщикуТовары.Ссылка.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.Обычный)
		|		ИНАЧЕ ЗаказПоставщикуТовары.Приоритет
		|	КОНЕЦ КАК Приоритет,
		|	ЗаказПоставщикуТовары.ПериодПотребности КАК ПериодПотребности,
		|	ЗаказПоставщикуТовары.НоменклатураИсходная КАК НоменклатураИсходная,
		|	ЗаказПоставщикуТовары.ХарактеристикаИсходная КАК ХарактеристикаИсходная,
		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
		|	ЗаказПоставщикуТовары.Лот КАК Лот,
		|	ЗаказПоставщикуТовары.Проект КАК Проект,
		|	ЗаказПоставщикуТовары.ОрганизацияПолучатель КАК Организация,
		|	ЗаказПоставщикуТовары.МестоПоставки КАК МестоПоставки,
		|	ЗаказПоставщикуТовары.Менеджер КАК Менеджер,
		|	ЗаказПоставщикуТовары.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ЗаказПоставщикуТовары.Склад КАК Склад,
		|	ЗаказПоставщикуТовары.Количество КАК Количество,
		|	ЗаказПоставщикуТовары.СуммаСНДС * &КоэффициентПересчетаВалюты / &Кратность КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Упаковка.Числитель = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПоставщикуТовары.Упаковка.Числитель / ВЫБОР
		|				КОГДА ЗаказПоставщикуТовары.Упаковка.Знаменатель = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЗаказПоставщикуТовары.Упаковка.Знаменатель
		|			КОНЕЦ
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПоставщикуТовары.Упаковка КАК ЕдиницаИзмерения,
		|	ЗаказПоставщикуТовары.Цена КАК Цена,
		|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ЗаказПоставщикуТовары.НоменклатураПартнера КАК НоменклатураПоставщика,
		|	ЗаказПоставщикуТовары.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ЗаказПоставщикуТовары.СтранаПроизводителя КАК СтранаПроизводителя
		|ПОМЕСТИТЬ ДанныеПоЗаказу
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПланПоставокПоДоговорамОстатки.Приоритет КАК Приоритет,
		|	ПланПоставокПоДоговорамОстатки.Номенклатура КАК Номенклатура,
		|	ПланПоставокПоДоговорамОстатки.Характеристика КАК Характеристика,
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности КАК ПериодПотребности,
		|	ПланПоставокПоДоговорамОстатки.Организация КАК Организация,
		|	ПланПоставокПоДоговорамОстатки.МестоПоставки КАК МестоПоставки,
		|	ПланПоставокПоДоговорамОстатки.Проект КАК Проект,
		|	ПланПоставокПоДоговорамОстатки.Менеджер КАК Менеджер,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОстатки.Лот КАК Лот,
		|	ПланПоставокПоДоговорамОстатки.Количество КАК КоличествоОстаток,
		|	ПланПоставокПоДоговорамОстатки.Сумма КАК СуммаОстаток,
		|	ПланПоставокПоДоговорамОстатки.Количество КАК ЭтоКоличество,
		|	ПланПоставокПоДоговорамОстатки.Цена КАК Цена,
		|	ПланПоставокПоДоговорамОстатки.Сумма КАК ЭтоСумма,
		|	ПланПоставокПоДоговорамОстатки.Регистратор КАК Регистратор,
		|	ПланПоставокПоДоговорамОстатки.Договор КАК Договор
		|ПОМЕСТИТЬ ДанныеПоДоговору
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорамОстатки
		|ГДЕ
		|	ПланПоставокПоДоговорамОстатки.Договор = &Договор
		|	И ПланПоставокПоДоговорамОстатки.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И ПланПоставокПоДоговорамОстатки.Регистратор.КонтролироватьЦенуВЗаказах = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоЗаказу.НомерСтроки КАК НомерСтроки,
		|	ДанныеПоЗаказу.ПериодПотребности КАК ПериодПотребности,
		|	ДанныеПоЗаказу.Номенклатура КАК Номенклатура,
		|	ДанныеПоЗаказу.ХарактеристикаИсходная КАК ХарактеристикаИсходная,
		|	ДанныеПоЗаказу.Характеристика КАК Характеристика,
		|	ДанныеПоЗаказу.Период КАК Период,
		|	ДанныеПоЗаказу.Приоритет КАК Приоритет,
		|	ДанныеПоЗаказу.Договор КАК Договор,
		|	ДанныеПоЗаказу.Цена КАК Цена,
		|	ДанныеПоДоговору.Цена КАК ЦенаДоговора,
		|	ДанныеПоЗаказу.СтавкаНДС КАК СтавкаНДС,
		|	ДанныеПоЗаказу.Регистратор.ЦенаВключаетНДС КАК ЦенаВключаетНДС
		|ИЗ
		|	ДанныеПоЗаказу КАК ДанныеПоЗаказу
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеПоДоговору КАК ДанныеПоДоговору
		|		ПО ДанныеПоЗаказу.ПериодПотребности = ДанныеПоДоговору.ПериодПотребности
		|			И ДанныеПоЗаказу.Приоритет = ДанныеПоДоговору.Приоритет
		|			И ДанныеПоЗаказу.Номенклатура = ДанныеПоДоговору.Номенклатура
		|			И ДанныеПоЗаказу.Характеристика = ДанныеПоДоговору.Характеристика
		|			И ДанныеПоЗаказу.Лот = ДанныеПоДоговору.Лот
		|			И ДанныеПоЗаказу.Проект = ДанныеПоДоговору.Проект
		|			И ДанныеПоЗаказу.МестоПоставки = ДанныеПоДоговору.МестоПоставки
		|			И ДанныеПоЗаказу.Цена <> ДанныеПоДоговору.Цена";
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ЗаказПоставщикуОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ЗаказПоставщикуОбъект));
	Запрос.УстановитьПараметр("Ссылка",	ЗаказПоставщикуОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата",	ЗаказПоставщикуОбъект.Дата);
	Запрос.УстановитьПараметр("Договор",ЗаказПоставщикуОбъект.Договор);
	
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Ошибки = Неопределено;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекстОшибки = НСтр("ru='Позиция (%1) %2 не совпадает цена заказа %3 %4 с ценой договора %5 %6 '");
		ТекстОшибки = СТрЗаменить(ТекстОшибки,"%1",ВыборкаДетальныеЗаписи.НомерСтроки);
		ТекстОшибки = СТрЗаменить(ТекстОшибки,"%2",ВыборкаДетальныеЗаписи.Номенклатура);
		ТекстОшибки = СТрЗаменить(ТекстОшибки,"%3",ВыборкаДетальныеЗаписи.Цена);
		ТекстОшибки = СТрЗаменить(ТекстОшибки,"%4",ЗаказПоставщикуОбъект.Валюта);
		ТекстОшибки = СТрЗаменить(ТекстОшибки,"%5",ВыборкаДетальныеЗаписи.ЦенаДоговора);
		ТекстОшибки = СТрЗаменить(ТекстОшибки,"%6",ЗаказПоставщикуОбъект.Валюта);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(
			Ошибки, 
			"", 
			ТекстОшибки,
			Неопределено);
	КонецЦикла;
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(
		Ошибки,
		Отказ);
КонецПроцедуры

Функция ТекстПревышенПоказатель(ЭтоКоличество, ЭтоСумма)
	Если ЭтоКоличество Тогда
		Результат = НСтр("ru='превышено количество'");
		Если ЭтоСумма Тогда
			Результат = Результат + НСтр("ru=' и сумма'");
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	Возврат НСтр("ru='превышена сумма'");
КонецФункции

Процедура ОбновитьЗаказПоставщикуОбъектПоДоговору(ЗаказПоставщикуОбъект)
	Договор = ПолучитьДоговор(ЗаказПоставщикуОбъект);
	ЗаказПоставщикуОбъект.ДокументОснование = Договор.ВерсияСоглашения;
	ЗаказПоставщикуОбъект.Контрагент = Договор.Контрагент;
	ЗаказПоставщикуОбъект.Партнер = Договор.Партнер;
	ЗаказПоставщикуОбъект.Организация = Договор.Организация;
	ЗаказПоставщикуОбъект.Подразделение = Договор.Подразделение;
	ЗаказПоставщикуОбъект.Валюта = Договор.ВалютаВзаиморасчетов;
	ЗаказПоставщикуОбъект.УсловиеОплаты = Договор.УсловиеОплаты;
	ЗаказПоставщикуОбъект.ЦенаВключаетНДС = Договор.ВерсияСоглашения.ЦенаВключаетНДС;
	ПараметрыЗаполнения = 
		Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(
			ЗаказПоставщикуОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(
		ЗаказПоставщикуОбъект.ЗакупкаПодДеятельность,
		ПараметрыЗаполнения);
	ЗаполнитьНоменклатуруЗаказаПоставщикуПоДоговору(ЗаказПоставщикуОбъект);
КонецПроцедуры

Функция ПолучитьВыборкуЗаписиДвиженийЗаказаПоставщику(ЗаказПоставщикуОбъект)
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    ЗаказПоставщикуОбъект.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ЗаказПоставщикуОбъект));
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуТовары.Ссылка КАК Регистратор,
		|	&Дата КАК Период,
		|	ЗаказПоставщикуТовары.Ссылка КАК ЗаказПоставщику,
		|	ЗаказПоставщикуТовары.Ссылка.Договор КАК Договор,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.ПустаяСсылка)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.Обычный)
		|		ИНАЧЕ ЗаказПоставщикуТовары.Приоритет
		|	КОНЕЦ КАК Приоритет,
		|	ЗаказПоставщикуТовары.ПериодПотребности КАК ПериодПотребности,
		|	ЗаказПоставщикуТовары.НоменклатураИсходная КАК НоменклатураИсходная,
		|	ЗаказПоставщикуТовары.ХарактеристикаИсходная КАК ХарактеристикаИсходная,
		|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
		|	ЗаказПоставщикуТовары.Характеристика КАК Характеристика,
		|	ЗаказПоставщикуТовары.Лот КАК Лот,
		|	ЗаказПоставщикуТовары.Проект КАК Проект,
		|	ЗаказПоставщикуТовары.ОрганизацияПолучатель КАК Организация,
		|	ЗаказПоставщикуТовары.МестоПоставки КАК МестоПоставки,
		|	ЗаказПоставщикуТовары.Менеджер КАК Менеджер,
		|	ЗаказПоставщикуТовары.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ЗаказПоставщикуТовары.Склад КАК Склад,
		|	ЗаказПоставщикуТовары.Количество КАК Количество,
		|	ЗаказПоставщикуТовары.СуммаСНДС КАК Сумма,
		|	ВЫБОР
		|		КОГДА ЗаказПоставщикуТовары.Упаковка.Числитель = 0
		|			ТОГДА 1
		|		ИНАЧЕ ЗаказПоставщикуТовары.Упаковка.Числитель / ВЫБОР
		|				КОГДА ЗаказПоставщикуТовары.Упаковка.Знаменатель = 0
		|					ТОГДА 1
		|				ИНАЧЕ ЗаказПоставщикуТовары.Упаковка.Знаменатель
		|			КОНЕЦ
		|	КОНЕЦ КАК Коэффициент,
		|	ЗаказПоставщикуТовары.Упаковка КАК ЕдиницаИзмерения,
		|	ЗаказПоставщикуТовары.Цена КАК Цена,
		|	ЗаказПоставщикуТовары.СтавкаНДС КАК СтавкаНДС,
		|	ЗаказПоставщикуТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга,
		|	ЗаказПоставщикуТовары.НоменклатураПартнера КАК НоменклатураПоставщика,
		|	ЗаказПоставщикуТовары.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ЗаказПоставщикуТовары.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ЗаказПоставщикуТовары.Ссылка.Валюта КАК Валюта
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
		|ГДЕ
		|	ЗаказПоставщикуТовары.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Регистратор КАК Регистратор,
		|	ВТ_Данные.Период КАК Период,
		|	ВТ_Данные.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ВТ_Данные.Договор КАК Договор,
		|	ВТ_Данные.Приоритет КАК Приоритет,
		|	ВТ_Данные.ПериодПотребности КАК ПериодПотребности,
		|	ВТ_Данные.НоменклатураИсходная КАК НоменклатураИсходная,
		|	ВТ_Данные.ХарактеристикаИсходная КАК ХарактеристикаИсходная,
		|	ВТ_Данные.Номенклатура КАК Номенклатура,
		|	ВТ_Данные.Характеристика КАК Характеристика,
		|	ВТ_Данные.Лот КАК Лот,
		|	ВТ_Данные.Проект КАК Проект,
		|	ВТ_Данные.Организация КАК Организация,
		|	ВТ_Данные.МестоПоставки КАК МестоПоставки,
		|	ВТ_Данные.Менеджер КАК Менеджер,
		|	ВТ_Данные.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Данные.Склад КАК Склад,
		|	ВТ_Данные.Количество КАК Количество,
		|	ВТ_Данные.Сумма КАК Сумма,
		|	ВТ_Данные.Коэффициент КАК Коэффициент,
		|	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Данные.Цена КАК Цена,
		|	ВТ_Данные.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Данные.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ВТ_Данные.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ВТ_Данные.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ВТ_Данные.Валюта КАК Валюта
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Данные.Регистратор КАК Регистратор,
		|	ВТ_Данные.Период КАК Период,
		|	ВТ_Данные.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ВТ_Данные.Договор КАК Договор,
		|	ВТ_Данные.Приоритет КАК Приоритет,
		|	ВТ_Данные.ПериодПотребности КАК ПериодПотребности,
		|	ВТ_Данные.НоменклатураИсходная КАК НоменклатураИсходная,
		|	ВТ_Данные.ХарактеристикаИсходная КАК ХарактеристикаИсходная,
		|	ВТ_Данные.Номенклатура КАК Номенклатура,
		|	ВТ_Данные.Характеристика КАК Характеристика,
		|	ВТ_Данные.Лот КАК Лот,
		|	ВТ_Данные.Проект КАК Проект,
		|	ВТ_Данные.Организация КАК Организация,
		|	ВТ_Данные.МестоПоставки КАК МестоПоставки,
		|	ВТ_Данные.Менеджер КАК Менеджер,
		|	ВТ_Данные.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ВТ_Данные.Склад КАК Склад,
		|	ВЫБОР
		|		КОГДА ВТ_Данные.НоменклатураИсходная ССЫЛКА Справочник.Номенклатура
		|			ТОГДА ВТ_Данные.Количество
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Количество,
		|	ВТ_Данные.Сумма КАК Сумма,
		|	ВТ_Данные.Коэффициент КАК Коэффициент,
		|	ВТ_Данные.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВТ_Данные.Цена КАК Цена,
		|	ВТ_Данные.СтавкаНДС КАК СтавкаНДС,
		|	ВТ_Данные.НоменклатураПоставщика КАК НоменклатураПоставщика,
		|	ВТ_Данные.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ВТ_Данные.СтранаПроизводителя КАК СтранаПроизводителя,
		|	ВТ_Данные.Валюта КАК Валюта
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные";
	Запрос.УстановитьПараметр("Ссылка",	ЗаказПоставщикуОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата",	ЗаказПоставщикуОбъект.Дата);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	мРезультатыЗапроса = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Результат.Вставить("ВыборкаДляЗаписиДвижений", мРезультатыЗапроса[1].Выбрать());
	Результат.Вставить("ВыборкаДляСписанияПланаПоставок", мРезультатыЗапроса[2].Выбрать());
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДвиженияЗаказаПоставщикуРегистраЗаказыПоставщикам(
													ЗаказыПоставщикамУХ,
													ВыборкаДляЗаписиДвижений)
	ЗаказыПоставщикамУХ.Записывать = Истина;
	РегистрыНакопления.ЗаказыПоставщикамУХ.ДобавитьЗаказПоставщику(
		ЗаказыПоставщикамУХ, 
		ВыборкаДляЗаписиДвижений);
КонецПроцедуры

Процедура ЗаполнитьДвиженияЗаказаПоставщикуРегистраПланПоставокПоДоговорам(
													ПланПоставокПоДоговорам, 
													ВыборкаДляЗаписиДвижений)
	СопоставлениеИменРеквизитов = Новый Соответствие;
	СопоставлениеИменРеквизитов.Вставить("НоменклатураИсходная", "Номенклатура");
	ПланПоставокПоДоговорам.Записывать = Истина;
	РегистрыНакопления.ПланПоставокПоДоговорам.СписатьИзПланаПоставок(
		ПланПоставокПоДоговорам,
		ВыборкаДляЗаписиДвижений,
		СопоставлениеИменРеквизитов);
КонецПроцедуры

Функция ПолучитьВыборкуЗапросаЕдиницИзмеренияНоменклатуры(
											Номенклатура)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК НоменклатураИсточник,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаИсточник,
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмеренияИсточник,
		|	Номенклатура.Ссылка КАК НоменклатураПриемник,
		|	ЗНАЧЕНИЕ(Справочник.ХарактеристикиНоменклатуры.ПустаяСсылка) КАК ХарактеристикаПриемник,
		|	НаборыУпаковок.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПриемник,
		|	УпаковкиЕдиницыИзмерения.Числитель / ВЫБОР
		|		КОГДА УпаковкиЕдиницыИзмерения.Знаменатель = 0
		|			ТОГДА 1
		|		ИНАЧЕ УпаковкиЕдиницыИзмерения.Знаменатель
		|	КОНЕЦ КАК Коэффициент
		|ПОМЕСТИТЬ ВТ_ПрямойПересчетКоэффициентов
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НаборыУпаковок КАК НаборыУпаковок
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|			ПО НаборыУпаковок.Ссылка = УпаковкиЕдиницыИзмерения.Владелец
		|		ПО Номенклатура.НаборУпаковок = НаборыУпаковок.Ссылка
		|ГДЕ
		|	Номенклатура.Ссылка = &Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения) КАК СпособЗамены,
		|	ВТ_ПрямойПересчетКоэффициентов.НоменклатураИсточник КАК НоменклатураИсточник,
		|	ВТ_ПрямойПересчетКоэффициентов.ХарактеристикаИсточник КАК ХарактеристикаИсточник,
		|	ВТ_ПрямойПересчетКоэффициентов.ЕдиницаИзмеренияИсточник КАК ЕдиницаИзмеренияИсточник,
		|	ВТ_ПрямойПересчетКоэффициентов.НоменклатураПриемник КАК НоменклатураПриемник,
		|	ВТ_ПрямойПересчетКоэффициентов.ХарактеристикаПриемник КАК ХарактеристикаПриемник,
		|	ВТ_ПрямойПересчетКоэффициентов.ЕдиницаИзмеренияПриемник КАК ЕдиницаИзмеренияПриемник,
		|	ВТ_ПрямойПересчетКоэффициентов.Коэффициент КАК Коэффициент
		|ИЗ
		|	ВТ_ПрямойПересчетКоэффициентов КАК ВТ_ПрямойПересчетКоэффициентов
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(Перечисление.СпособыЗаменыНоменклатуры.ПересчетЕдиницыИзмерения),
		|	ВТ_ПрямойПересчетКоэффициентов.НоменклатураИсточник,
		|	ВТ_ПрямойПересчетКоэффициентов.ХарактеристикаИсточник,
		|	ВТ_ПрямойПересчетКоэффициентов.ЕдиницаИзмеренияПриемник,
		|	ВТ_ПрямойПересчетКоэффициентов.НоменклатураПриемник,
		|	ВТ_ПрямойПересчетКоэффициентов.ХарактеристикаПриемник,
		|	ВТ_ПрямойПересчетКоэффициентов.ЕдиницаИзмеренияИсточник,
		|	ВЫБОР
		|		КОГДА ВТ_ПрямойПересчетКоэффициентов.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ 1 / ВТ_ПрямойПересчетКоэффициентов.Коэффициент
		|	КОНЕЦ
		|ИЗ
		|	ВТ_ПрямойПересчетКоэффициентов КАК ВТ_ПрямойПересчетКоэффициентов";
	Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

// Возвращает массив созданных контактных лиц.
//
Функция СоздатьКонтактныеЛицаДляАнкетыПоставщика(АнкетаПоставщика, Партнер)
	КонтактныеЛица = Новый Массив;
	Для Каждого СтрокаКонтактногоЛица Из АнкетаПоставщика.КонтактныеЛица Цикл
		КонтактноеЛицо = СоздатьКонтактноеЛицоПоОписанию(
			СтрокаКонтактногоЛица, 
			Партнер);
			Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
				КонтактныеЛица.Добавить(КонтактноеЛицо);
			КонецЕсли;
	КонецЦикла;
	Возврат КонтактныеЛица;
КонецФункции

// Создает контактное лицо контрагента.
//
Функция СоздатьКонтактноеЛицоПоОписанию(ОписаниеКонтактногоЛица, Партнер)
	КонтактноеЛицоОбъект = Справочники.КонтактныеЛицаПартнеров.СоздатьЭлемент();
	КонтактноеЛицоОбъект.Владелец = Партнер;
	КонтактноеЛицоОбъект.Наименование = СтрЗаменить(ОписаниеКонтактногоЛица.Фамилия
		+ " " + ОписаниеКонтактногоЛица.Имя
		+ " " + ОписаниеКонтактногоЛица.Отчество, "  ", " ");
	КонтактноеЛицоОбъект.ДолжностьПоВизитке = ОписаниеКонтактногоЛица.Должность;
	КонтактноеЛицоОбъект.Автор = Пользователи.АвторизованныйПользователь();
	КонтактноеЛицоОбъект.ДатаРегистрацииСвязи = ТекущаяДатаСеанса();
	// Контактная информация контактного лица
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(КонтактноеЛицоОбъект,
		ОписаниеКонтактногоЛица.АдресЭП,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииEmailКонтактныеЛица());
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(КонтактноеЛицоОбъект,
		ОписаниеКонтактногоЛица.НомерТелефона,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииТелефонРабочийКонтактныеЛица());
		
	КонтактноеЛицоОбъект.ОбменДанными.Загрузка = Истина;
	КонтактноеЛицоОбъект.Записать();
	Возврат КонтактноеЛицоОбъект.Ссылка;
КонецФункции

// Создать партнера на основании анкеты поставщика.
//
Функция СоздатьПартнераПоАнкетеПоставщика(АнкетаПоставщика)
	// Создаем контрагента
	ПартнерОбъект = Справочники.Партнеры.СоздатьЭлемент();
	ИсключитьСвойства = "Код,Владелец";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		ИсключитьСвойства = ИсключитьСвойства + ",Родитель";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ПартнерОбъект, АнкетаПоставщика,, ИсключитьСвойства);
	//ПартнерОбъект.ГруппаДоступа = Справочники.ГруппыДоступаПартнеров.;
	ПартнерОбъект.Поставщик = Истина;
	ПартнерОбъект.ЮрФизЛицо =
		?(АнкетаПоставщика.ЮридическоеФизическоеЛицо 
					= Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо,
			Перечисления.КомпанияЧастноеЛицо.Компания,
			Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо);
	// Контактная информация контрагента
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		ПартнерОбъект,
		АнкетаПоставщика.ЮридическийАдрес,
		Справочники.ВидыКонтактнойИнформации.АдресПартнера,
		Истина);
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		ПартнерОбъект,
		АнкетаПоставщика.АдресЭП,
		Справочники.ВидыКонтактнойИнформации.EmailПартнера);
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		ПартнерОбъект,
		АнкетаПоставщика.НомерТелефона,
		Справочники.ВидыКонтактнойИнформации.ТелефонПартнера);
	ПартнерОбъект.ОбменДанными.Загрузка = Истина;
	ПартнерОбъект.Записать();
	Возврат ПартнерОбъект.Ссылка; 
КонецФункции

// Создать контрагента на основании анкеты поставщика.
//
Функция СоздатьКонтрагентаПоАнкетеПоставщика(АнкетаПоставщика, Партнер) 
	// Создаем контрагента
	КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	ИсключитьСвойства = "Код,Владелец";
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		ИсключитьСвойства = ИсключитьСвойства + ",Родитель";
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(КонтрагентОбъект, АнкетаПоставщика,, ИсключитьСвойства);
	КонтрагентОбъект.Партнер = Партнер;
	КонтрагентОбъект.ЮрФизЛицо = ПолучитьЮрФизЛицоПоАнкете(АнкетаПоставщика);
	
	// Контактная информация контрагента
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		КонтрагентОбъект,
		АнкетаПоставщика.ЮридическийАдрес,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииЮрАдресКонтрагента(),
		Истина);
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		КонтрагентОбъект,
		АнкетаПоставщика.ФактическийАдрес,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииПочтовыйАдресКонтрагента(),
		Истина);
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		КонтрагентОбъект,
		АнкетаПоставщика.ФактическийАдрес,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииФактАдресКонтрагента(),
		Истина);
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		КонтрагентОбъект,
		АнкетаПоставщика.АдресЭП,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииEmailКонтрагенты());
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		КонтрагентОбъект,
		АнкетаПоставщика.НомерТелефона,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииТелефонКонтрагента());
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьКонтактнуюИнформациюОбъекта(
		КонтрагентОбъект,
		АнкетаПоставщика.Факс,
		УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииФаксКонтрагенты());
	КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
	КонтрагентОбъект.Записать();
	Возврат КонтрагентОбъект.Ссылка; 
КонецФункции

Функция ПолучитьЮрФизЛицоПоАнкете(АнкетаПоставщика)
	Если АнкетаПоставщика.ЮридическоеФизическоеЛицо 
			= Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат Перечисления.ЮрФизЛицо.ФизЛицо;
	КонецЕсли;
	Если АнкетаПоставщика.СтранаРегистрации = Справочники.СтраныМира.Россия Тогда
		Если АнкетаПоставщика.СубъектМалогоИлиСреднегоПредпринимательстваУХ Тогда
			Возврат Перечисления.ЮрФизЛицо.ИндивидуальныйПредприниматель;
		КонецЕсли;
		Возврат Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	Возврат Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент;
КонецФункции

// Возвращает основное контактное лицо контрагента.
//
// Параметры:
//  Контрагент - СправочникСсылка.Контрагнеты - контрагент.
// 
// Возвращаемое значение:
//   - ОпределяемыйТип.КонтактноеЛицоПоставщикаУХ.
//
Функция ПолучитьОсновноеКонтактноеЛицоКонтрагента(Контрагент) Экспорт
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Партнер = Контрагент.Партнер;
		Если ЗначениеЗаполнено(Партнер) Тогда
			мКонтактныхЛиц = ЦентрализованныеЗакупкиУХ.ПолучитьСправочникПоОтбору(
				"КонтактныеЛицаПартнеров",
				Новый Структура("Владелец", Партнер));
			Если мКонтактныхЛиц.Количество() > 0 Тогда
				Возврат мКонтактныхЛиц[0];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ПолучитьПустоеКонтактноеЛицо();
КонецФункции

Функция ПолучитьПустоеКонтактноеЛицо() Экспорт
	Возврат Справочники.КонтактныеЛицаПартнеров.ПустаяСсылка();
КонецФункции

Функция ПолучитьРезультатЗапросаОстатковДляЗаказаПоставщику(ЗаказПоставщикуОбъект)
	ДоговорКонтрагента = ПолучитьДоговор(ЗаказПоставщикуОбъект);
	ОписаниеКоэффициента = 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ЗаказПоставщикуОбъект.Валюта,
			ПолучитьДатуВерсииСоглашенияИзОбъекта(ЗаказПоставщикуОбъект));
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ПланПоставокПоДоговорамОстатки.Приоритет КАК Приоритет,
		|	ПланПоставокПоДоговорамОстатки.Номенклатура КАК НоменклатураИсходная,
		|	ПланПоставокПоДоговорамОстатки.Характеристика КАК ХарактеристикаИсходная,
		|	ПланПоставокПоДоговорамОстатки.Номенклатура КАК Номенклатура,
		|	ПланПоставокПоДоговорамОстатки.Характеристика КАК Характеристика,
		|	ПланПоставокПоДоговорамОстатки.Номенклатура.ЕдиницаИзмерения КАК Упаковка,
		|	ПланПоставокПоДоговорамОстатки.КоличествоОстаток КАК Количество,
		|	ПланПоставокПоДоговорамОстатки.КоличествоОстаток КАК КоличествоУпаковок,
		|	ВЫБОР
		|		КОГДА ПланПоставокПоДоговорамОстатки.КоличествоОстаток = 0
		|			ТОГДА 0
		|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.СуммаОстаток / ПланПоставокПоДоговорамОстатки.КоличествоОстаток
		|	КОНЕЦ  КАК Цена,
		|	ПланПоставокПоДоговорамОстатки.СуммаОстаток КАК Сумма,
		|	ПланПоставокПоДоговорамОстатки.СтавкаНДС КАК СтавкаНДС,
		|	ПланПоставокПоДоговорамОстатки.СуммаОстаток  КАК СуммаСНДС,
		|	ПланПоставокПоДоговорамОстатки.ПериодПотребности КАК ПериодПотребности,
		|	ПланПоставокПоДоговорамОстатки.Проект КАК Проект,
		|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
		|	ПланПоставокПоДоговорамОстатки.Лот КАК Лот,
		|	ПланПоставокПоДоговорамОстатки.Организация КАК ОрганизацияПолучатель,
		|	ПланПоставокПоДоговорамОстатки.Организация КАК Организация,
		|	ПланПоставокПоДоговорамОстатки.МестоПоставки КАК МестоПоставки,
		|	ПланПоставокПоДоговорамОстатки.Менеджер КАК Менеджер,
		|	ПланПоставокПоДоговорамОстатки.НоменклатураПоставщика КАК НоменклатураПартнера,
		|	ПланПоставокПоДоговорамОстатки.СтраныПроисхождения КАК СтраныПроисхождения,
		|	ПланПоставокПоДоговорамОстатки.СтранаПроизводителя КАК СтранаПроизводителя
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(
		|			&Момент,
		|			Договор = &Договор
		|				И ВЫБОР
		|					КОГДА &МестоПоставки = ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ МестоПоставки = &МестоПоставки
		|				КОНЕЦ) КАК ПланПоставокПоДоговорамОстатки";
	Запрос.УстановитьПараметр("Договор", ЗаказПоставщикуОбъект.Договор);
	Запрос.УстановитьПараметр("МестоПоставки", ЗаказПоставщикуОбъект.МестоПоставки);
	Запрос.УстановитьПараметр("Момент", 
		Новый Граница(ЗаказПоставщикуОбъект.МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты",
		ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ОписаниеКоэффициента.Кратность);
	Возврат Запрос.Выполнить();
КонецФункции

// Проверяет, что ДанныеЗаполнения - это документ ВерсияСоглашенияКоммерческийДоговор.
// Или, это справочник Договоры.
// Или, есть реквизит ДокументОснование типа ВерсияСоглашенияКоммерческийДоговор.
// Если не находит, то возвращает пустую ссылку.
//
Функция ПолучитьВерсиюСоглашенияИзДанныхЗаполнения(ДанныеЗаполнения)
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	Если ДанныеЗаполнения <> Неопределено Тогда
		Если ТипДанныхЗаполнения = 
						Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор") Тогда
			Возврат ДанныеЗаполнения;
		ИначеЕсли ТипДанныхЗаполнения = 
						Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
			Возврат ДанныеЗаполнения.ВерсияСоглашения;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
											ДанныеЗаполнения, "ДокументОснование")
				И ЗначениеЗаполнено(ДанныеЗаполнения.ДокументОснование)
				И ТипЗнч(ДанныеЗаполнения.ДокументОснование) = 
						Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор") Тогда
			Возврат ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	Возврат Документы.ВерсияСоглашенияКоммерческийДоговор.ПустаяСсылка();
КонецФункции

Процедура ЗаполнитьПоступлениеТоваровУслугИзРеализации(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
												
	Источник.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Или Не ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияКонтрагент = СверкаВГОУХ.КонтрагентДляОрганизацииВГО(ДанныеЗаполнения.Организация);
	КонтрагентОрганизация = ДанныеЗаполнения.Контрагент.ОрганизационнаяЕдиница;
	Если Не ЗначениеЗаполнено(ОрганизацияКонтрагент) Или Не ЗначениеЗаполнено(КонтрагентОрганизация) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним реквизиты шапки по документу основанию.
	ЗаполнениеДокументов.Заполнить(Источник, ДанныеЗаполнения, Истина);
	
	Источник.Организация 		= КонтрагентОрганизация;
	Источник.Контрагент 		= ОрганизацияКонтрагент;
	Источник.Договор 			= ВстраиваниеУХВызовСервера.ПолучитьДоговорКонтрагентаВГО(ДанныеЗаполнения.Договор);
	Источник.ДокументОснование 	= ДанныеЗаполнения;
	Источник.Дата 				= ДанныеЗаполнения.Дата;
	
	Источник.УстановитьНовыйНомер();
	
	Источник.Комментарий 		= "";
	
	Источник.Товары.Очистить();
	
	Для Каждого СтрокаРеализации Из ДанныеЗаполнения.Товары Цикл
		НоваяСтрока = Источник.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРеализации);
	КонецЦикла;
		
	Параметры = Новый Структура("Объект, КомпонентыОбмена, ОбъектМодифицирован", Источник, ПолучитьКомпонентыОбмена(), Истина);
	МенеджерОбменаЧерезУниверсальныйФормат.ВыполнитьПроцедуруМодуляМенеджера("ОтложеннаяОбработка_ПоступлениеТоваровУслуг", Параметры);
	
КонецПроцедуры

Функция ПолучитьКомпонентыОбмена()
	
	//ВерсияФорматаОбмена = МенеджерОбменаЧерезУниверсальныйФормат.ВерсияФорматаМенеджераОбмена();
	ВерсияФорматаОбмена = "1.8";
	
	КомпонентыОбмена = ОбменДаннымиXDTOСервер.ИнициализироватьКомпонентыОбмена("Получение");
	КомпонентыОбмена.ВерсияФорматаОбмена = ВерсияФорматаОбмена;
	КомпонентыОбмена.XMLСхема = "http://v8.1c.ru/edi/edi_stnd/EnterpriseData/" + ВерсияФорматаОбмена;
	
	ВерсииФорматаОбмена = Новый Соответствие;
	ОбменДаннымиПереопределяемый.ПриПолученииДоступныхВерсийФормата(ВерсииФорматаОбмена);
	КомпонентыОбмена.МенеджерОбмена = ОбменДаннымиXDTOСервер.МенеджерОбменаВерсииФормата(ВерсияФорматаОбмена);
	
	ОбменДаннымиXDTOСервер.ИнициализироватьТаблицыПравилОбмена(КомпонентыОбмена);

	Возврат КомпонентыОбмена;
	
КонецФункции

#Область ЗаполнитьДвиженияПланПоставокПТУ


Процедура ЗаполнитьДвиженияПланПоставокПТУ(Источник, Отказ, РежимПроведения)
	//
	ИнициализироватьДанныеДляПланаПоставок(Источник.ДополнительныеСвойства, Источник);
	Если (ТипЗНЧ(Источник.Ссылка) =  Тип("ДокументСсылка.ПриобретениеТоваровУслуг") 
		И ЗначениеЗаполнено(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка,"ЗаказПоставщику"))) Тогда
		Источник.Движения.ПланПоставокПоДоговорам.Записывать = Истина;
	Иначе	
		ОтразитьИсполнениеПланаПоставок(Источник.ДополнительныеСвойства, Источник.Движения, Отказ);
	КонецЕсли;
КонецПроцедуры
	
Процедура ИнициализироватьДанныеДляПланаПоставок(ДополнительныеСвойства, Источник)
	
	//
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ДоговорКонтрагента", 	ПолучитьДоговор(Источник));
	Реквизиты.Вставить("ДатаСреза", 			Источник.Дата);
	Реквизиты.Вставить("ГраницаДокумента", 		Новый Граница(Источник.МоментВремени(), ВидГраницы.Исключая));
	Реквизиты.Вставить("Ссылка", 				Источник.Ссылка);
	Реквизиты.Вставить("ДоступныеМестаПоставки",Справочники.МестаПоставки.МестаПоставкиСклада(Источник.Склад));
	
	Реквизиты.Вставить("ОписаниеКоэффициента", 
		ЦентрализованныеЗакупкиУХ.ПолучитьКоэффициентПересчетаВалют(
		    Источник.Валюта,
			Константы.ВалютаУчетаЦентрализованныхЗакупок.Получить(), 
			ПолучитьДатуВерсииСоглашенияИзОбъекта(Источник)));
	
	ДополнительныеСвойства.Вставить("Реквизиты", Реквизиты);
	
	// Получить таблицы для движений
	ПолучитьТаблицыДляДвижений(ДополнительныеСвойства);
	
	ВыполнитьРаспределение(ДополнительныеСвойства);
	
	СформироватьТаблицуДвиженийПланПоставок(ДополнительныеСвойства, ДополнительныеСвойства.ДляПроведения.ДанныеДоговора);
	
КонецПроцедуры

Процедура ВыполнитьРаспределение(ДополнительныеСвойства)
	
	// Распределить товары и услуги
	Для Каждого СтрокаДокумента Из ДополнительныеСвойства.ДляПроведения.ДанныеДокумента Цикл
		
		// НОМЕНКЛАТУРА
		СтруктураПоиска = Новый Структура("ЭтоТоварнаяКатегория, Номенклатура, Характеристика, СтавкаНДС", Ложь);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДокумента);
		
		// Ищем номенклатуру с учетом ставки НДС
		СтрокиДляРаспределения = ПолучитьДаннныеДоговора(ДополнительныеСвойства.ДляПроведения.ДанныеДоговора, СтруктураПоиска, Ложь);
		Если СтрокиДляРаспределения.Количество() > 0
			И РаспределитьВсе(Ложь, СтрокаДокумента, СтрокиДляРаспределения) Тогда
			Продолжить;
		Конецесли;

		// Ищем номенклатуру без учета ставки НДС
		//СтруктураПоиска.Удалить("СтавкаНДС");
		СтрокиДляРаспределения = ПолучитьДаннныеДоговора(ДополнительныеСвойства.ДляПроведения.ДанныеДоговора, СтруктураПоиска, Истина);
		Если СтрокиДляРаспределения.Количество() > 0
			И РаспределитьВсе(Ложь, СтрокаДокумента, СтрокиДляРаспределения) Тогда
			Продолжить;
		Конецесли;

		
		// ТОВАРНЫЕ КАТЕГОРИИ
		СтруктураПоиска.ЭтоТоварнаяКатегория = Истина;
		СтруктураПоиска.Номенклатура = СтрокаДокумента.ТоварнаяКатегория;
		СтруктураПоиска.Удалить("Характеристика");
		//
		// Ищем по товарной категории с учетом ставки НДС
		СтрокиДляРаспределения = ПолучитьДаннныеДоговора(ДополнительныеСвойства.ДляПроведения.ДанныеДоговора, СтруктураПоиска, Ложь);
		Если СтрокиДляРаспределения.Количество() > 0
			И РаспределитьВсе(Истина, СтрокаДокумента, СтрокиДляРаспределения) Тогда
			Продолжить;
		Конецесли;
		
		// Ищем по товарной категории без учета ставки НДС
		//СтруктураПоиска.Удалить("СтавкаНДС");
		СтрокиДляРаспределения = ПолучитьДаннныеДоговора(ДополнительныеСвойства.ДляПроведения.ДанныеДоговора, СтруктураПоиска, Истина);
		Если СтрокиДляРаспределения.Количество() > 0
			И РаспределитьВсе(Истина, СтрокаДокумента, СтрокиДляРаспределения) Тогда
			Продолжить;
		Конецесли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьТаблицуДвиженийПланПоставок(ДополнительныеСвойства, ТаблицаДанныеДоговора)
	
	//
	ТаблицаДвижений = ТаблицаДанныеДоговора.Скопировать();
	КУдалению = ТаблицаДвижений.НайтиСтроки(Новый Структура("Сумма, Количество", 0,0));
	Для каждого Строка Из КУдалению Цикл
		ТаблицаДвижений.Удалить(Строка);
	КонецЦикла; 
	
	//
	ТаблицаДвижений.Колонки.Добавить("ВидДвижения");
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.Колонки.Добавить("Активность");
	
	ТаблицаДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	ТаблицаДвижений.ЗаполнитьЗначения(ДополнительныеСвойства.Реквизиты.ДатаСреза, "Период");
	ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
	
	//
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура("ТаблицаПланПоставокПоДоговорам", ТаблицаДвижений));
	//
	
КонецПроцедуры

Процедура ОтразитьИсполнениеПланаПоставок(ДополнительныеСвойства, Движения, Отказ)
	
	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланПоставокПоДоговорам;
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ПланПоставокПоДоговорам.Записывать = Истина;
	Движения.ПланПоставокПоДоговорам.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ПолучитьТаблицыДляДвижений(ДанныеДокумента)
	
	Запрос = новый Запрос;
	Запрос.УстановитьПараметр("ДатаСреза", ДанныеДокумента.Реквизиты.ДатаСреза);
	Запрос.УстановитьПараметр("ГраницаДокумента", ДанныеДокумента.Реквизиты.ГраницаДокумента);
	Запрос.УстановитьПараметр("Ссылка", ДанныеДокумента.Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Договор", ДанныеДокумента.Реквизиты.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("ДоступныеМестаПоставки", ДанныеДокумента.Реквизиты.ДоступныеМестаПоставки);
	Запрос.УстановитьПараметр("КоэффициентПересчетаВалюты", ДанныеДокумента.Реквизиты.ОписаниеКоэффициента.Коэффициент);
	Запрос.УстановитьПараметр("Кратность", ДанныеДокумента.Реквизиты.ОписаниеКоэффициента.Кратность);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ТоварнаяКатегория КАК ТоварнаяКатегория,
	|	ПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика КАК Характеристика,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(ПоступлениеТоваровУслугТовары.Количество) КАК Количество,
	|	1 КАК Коэффициент,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СРЕДНЕЕ(ПоступлениеТоваровУслугТовары.Цена) КАК Цена,
	|	СРЕДНЕЕ(ПоступлениеТоваровУслугТовары.Цена * &КоэффициентПересчетаВалюты / &Кратность) КАК ЦенаДляРаспределения,
	|	СУММА(ПоступлениеТоваровУслугТовары.СуммаСНДС) КАК Сумма,
	|	СУММА(ПоступлениеТоваровУслугТовары.СуммаСНДС * &КоэффициентПересчетаВалюты / &Кратность) КАК СуммаДляРаспределения,
	|	0 КАК КоличествоРаспределено,
	|	0 КАК СуммаРаспределено,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга) КАК ЭтоУслуга
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслугТовары
	|ГДЕ
	|	ПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеТоваровУслугТовары.Номенклатура,
	|	ПоступлениеТоваровУслугТовары.Характеристика,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ТоварнаяКатегория,
	|	ПоступлениеТоваровУслугТовары.СтавкаНДС,
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга),
	|	ПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланПоставокПоДоговорамОстатки.Договор КАК Договор,
	|	ПланПоставокПоДоговорамОстатки.Приоритет КАК Приоритет,
	|	ТИПЗНАЧЕНИЯ(ПланПоставокПоДоговорамОстатки.Номенклатура) = ТИП(Справочник.ТоварныеКатегории) КАК ЭтоТоварнаяКатегория,
	|	ПланПоставокПоДоговорамОстатки.Номенклатура КАК Номенклатура,
	|	ПланПоставокПоДоговорамОстатки.Характеристика КАК Характеристика,
	|	ПланПоставокПоДоговорамОстатки.ПериодПотребности КАК ПериодПотребности,
	|	ПланПоставокПоДоговорамОстатки.Организация КАК Организация,
	|	ПланПоставокПоДоговорамОстатки.МестоПоставки КАК МестоПоставки,
	|	ПланПоставокПоДоговорамОстатки.Проект КАК Проект,
	|	ПланПоставокПоДоговорамОстатки.Менеджер КАК Менеджер,
	|	ПланПоставокПоДоговорамОстатки.ДоговорСПокупателем КАК ДоговорСПокупателем,
	|	ПланПоставокПоДоговорамОстатки.Лот КАК Лот,
	|	ПланПоставокПоДоговорамОстатки.СтавкаНДС КАК СтавкаНДС,
	|	0 КАК Количество,
	|	0 КАК Сумма,
	|	ПланПоставокПоДоговорамОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ПланПоставокПоДоговорамОстатки.СуммаОстаток КАК СуммаОстаток,
	|	ПланПоставокПоДоговорамОстатки.ПериодПотребности.ДатаНачала КАК СортировкаПериодПотребности,
	|	ВЫБОР
	|		КОГДА ПланПоставокПоДоговорамОстатки.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
	|			ТОГДА &ДатаСреза
	|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.Лот.ДатаНачалаПериодаПоставки
	|	КОНЕЦ КАК СортировкаПоДатеЛота,
	|	ПланПоставокПоДоговорамОстатки.Приоритет.Код КАК СортировкаПриоритет,
	|	ПланПоставокПоДоговорамОстатки.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ПланПоставокПоДоговорамОстатки.КоличествоОстаток = 0
	|			ТОГДА 0
	|		ИНАЧЕ ПланПоставокПоДоговорамОстатки.СуммаОстаток / ПланПоставокПоДоговорамОстатки.КоличествоОстаток
	|	КОНЕЦ КАК Цена
	|ИЗ
	|	РегистрНакопления.ПланПоставокПоДоговорам.Остатки(
	|			&ГраницаДокумента,
	|			Договор = &Договор
	|				И МестоПоставки В (&ДоступныеМестаПоставки)) КАК ПланПоставокПоДоговорамОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтоТоварнаяКатегория,
	|	Номенклатура,
	|	Характеристика,
	|	СортировкаПриоритет УБЫВ,
	|	СортировкаПериодПотребности,
	|	СортировкаПоДатеЛота";
	
	Результатзапроса = Запрос.ВыполнитьПакет();
	
	//
	ДанныеДокумента.Вставить("ДляПроведения", Новый Структура);
	ДанныеДокумента.ДляПроведения.Вставить("ДанныеДокумента", РезультатЗапроса[0].Выгрузить());
	ДанныеДокумента.ДляПроведения.Вставить("ДанныеДоговора",  РезультатЗапроса[1].Выгрузить());
	ДанныеДокумента.ДляПроведения.ДанныеДоговора.Индексы.Добавить("ЭтоТоварнаяКатегория, Номенклатура, Характеристика");
	
КонецПроцедуры

Функция ПолучитьДаннныеДоговора(ДанныеДоговора, СтруктураПоискаПоУмолчанию, БезУчетаНДС)
	
	//
	СтруктураПоиска = Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПоискаПоУмолчанию));
	
	Если БезУчетаНДС Тогда
		СтруктураПоиска.Удалить("СтавкаНДС");
	КонецЕсли;
	
	Возврат ДанныеДоговора.НайтиСтроки(СтруктураПоиска);
	
КонецФункции

Функция РаспределитьВсе(ЭтоРаспределениеНаТоварнуюКатегорию, СтрокаДокумента, СтрокиДляРаспределения)
	
	//
	РаспределениеПоКоличеству = Ложь;
	РаспределениеПоСумме = Ложь;
	
	//
	Если ЭтоРаспределениеНаТоварнуюКатегорию Тогда
		РаспределениеПоСумме = Истина;
	Иначе
		РаспределениеПоСумме = СтрокаДокумента.ЭтоУслуга;
		РаспределениеПоКоличеству = НЕ СтрокаДокумента.ЭтоУслуга;
	КонецЕсли;
	
	//
	Если РаспределениеПоСумме Тогда
		РесурсДокумента = "СуммаДляРаспределения";
		РесурсДокументаРаспределено = "СуммаРаспределено";
		РесурсДоговора = "СуммаОстаток";
		РесурсДоговораРаспределено = "Сумма";
	Иначе
		РесурсДокумента = "Количество";
		РесурсДокументаРаспределено = "КоличествоРаспределено";
		РесурсДоговора = "КоличествоОстаток";
		РесурсДоговораРаспределено = "Количество";
	КонецЕсли;
	
	//
	Для Каждого СтрокаДоговора Из СтрокиДляРаспределения Цикл
		
		// Эта строка документа уже распределена
		Требуется = СтрокаДокумента[РесурсДокумента] - СтрокаДокумента[РесурсДокументаРаспределено];
		Если Требуется = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Если основной реквизит распределения = 0, то не сможем посчитать цену распределения.
		Если СтрокаДоговора[РесурсДоговора] = 0 Тогда
			Прервать;
		КонецЕсли;
		
		// Эта строка договора уже распределена
		Свободно = СтрокаДоговора[РесурсДоговора] - СтрокаДоговора[РесурсДоговораРаспределено];
		Если Свободно = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		//
		Распределить = Мин(Требуется, Свободно);
		
		СтрокаДокумента[РесурсДокументаРаспределено] = СтрокаДокумента[РесурсДокументаРаспределено] + Распределить;
		СтрокаДоговора[РесурсДоговораРаспределено] = СтрокаДоговора[РесурсДоговораРаспределено] + Распределить;
		
		Если РаспределениеПоКоличеству Тогда
			// Расчет сумм распределено в документа
			СтрокаДокумента["СуммаРаспределено"] = СтрокаДокумента[РесурсДокументаРаспределено] * СтрокаДокумента.ЦенаДляРаспределения;
			// Расчет суммы распределено в договоре
			ЦенаРаспределено = Окр(СтрокаДоговора["СуммаОстаток"]/СтрокаДоговора[РесурсДоговора], 2);
			СтрокаДоговора["Сумма"] = СтрокаДоговора[РесурсДоговораРаспределено] * ЦенаРаспределено;
		ИначеЕсли ЭтоРаспределениеНаТоварнуюКатегорию Тогда
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокаДокумента[РесурсДокумента] = СтрокаДокумента[РесурсДокументаРаспределено];
	
КонецФункции


#КонецОбласти

#КонецОбласти
