
#Область ПрограммныйИнтерфейс

// Функция возвращает объект-проверку
Функция Создать() Экспорт
	
	Проверка = КонтрольУХ.Новый_Проверка();
	Проверка.Объект = КонтрольУХБюджетныеРезервы;
	Проверка.Источник = ИмяИсточника();
	Проверка.ВидКонтроля = ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольБюджетныхРезервов;
	Проверка.ИмяРеквизита = "ЕстьПревышениеЛимитыРезерв";
	
	Возврат Проверка;
	
КонецФункции

// Функция возвращает Истина, если для этого документа проверка выполняется
Функция ТребуетсяДляДокумента(ИмяДокумента) Экспорт
	Возврат Истина;
КонецФункции

// Функция возвращает Истина, если требуется выполнение проверки 
Функция ТребуетсяПроверка(ПараметрыКонтроля, Источник) Экспорт
	
	Результат = Ложь;
	
	ЭтоНовый = НЕ ЗначениеЗаполнено(ПараметрыКонтроля.Документ);
	
	Если ЭтоНовый Тогда
		
		Для Каждого СтрокаПлана Из Источник.ПланыДокумента Цикл
			Результат = Результат ИЛИ ЗначениеЗаполнено(СтрокаПлана.Зарезервировано);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		// Проверка существующего документа выполняется, если в источнике заполнен ДокументРезервирования
		Массив = Источник.ПланыДокумента.ВыгрузитьКолонку("ДокументРезервирования");
		ДокументыРезервирования = ОбщегоНазначенияКлиентСервер.СвернутьМассив(Массив);
		Для Каждого Документ Из ДокументыРезервирования Цикл
			Результат = Результат ИЛИ ЗначениеЗаполнено(Документ);
			Если Результат Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция выполняет обработку данных источника
Функция ОбработатьДанныеИсточника(ИнформацияДляКонтроля, Источник) Экспорт
	
	//
	Результат = Новый ТаблицаЗначений;
	
	Если ИнформацияДляКонтроля.Свойство("РезультатКонтроляРезервов") Тогда
		Результат = ИнформацияДляКонтроля.РезультатКонтроляРезервов;
		ИнформацияДляКонтроля.Удалить("РезультатКонтроляРезервов");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура выполняет контроль обработанных данных
Функция ВыполнитьКонтроль(ИнформацияДляКонтроля, ДанныеДляКонтроля) Экспорт
	
	КонтрольНарушен = Ложь;
	Для Каждого Строка Из ДанныеДляКонтроля Цикл
		
		Доступно = Строка.Зарезервировано + Строка.ЗарезервированоИзменение;
		
		Строка.КонтрольНарушен = Доступно < 0;
		КонтрольНарушен = КонтрольНарушен ИЛИ Строка.КонтрольНарушен;
		
	КонецЦикла;
	
	Возврат КонтрольНарушен;
	
КонецФункции

// Функция возвращает Истина, если нарушение контроля должно приводить к блокированию проведения
Функция БлокироватьПроведение(КлючКонтроля) Экспорт
	Возврат КонтрольУХБюджетныеЛимиты.БлокироватьПроведениеДляВидаКонтроля(ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольБюджетныхРезервов, КлючКонтроля);
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя источника для проверки
//
Функция ИмяИсточника() Экспорт
	
	Возврат КонтрольУХБюджетныеЛимиты.ИмяИсточника();
	
КонецФункции

// Процедура возвращает табличный документ с расшифровкой контроля документа
//
Функция СформироватьРасшифровкуКонтроля(Проверка, СтрокаКонтроль) Экспорт
	
	ДанныеКонтроля = ПолучитьИзВременногоХранилища(СтрокаКонтроль.АдресРезультата);
	
	// ЦФО и проект
	ЦФОПроект = ДанныеКонтроля.Скопировать(, "ЦФО, Проект");
	ЦФОПроект.Свернуть("ЦФО, Проект", "");
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("ЦФО", Справочники.Организации.ПустаяСсылка());
	Реквизиты.Вставить("Проект", Справочники.Проекты.ПустаяСсылка());
	Если ЦФОПроект.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(Реквизиты, ЦФОПроект[0]);
	КонецЕсли;
	
	//
	ТабДок = Новый ТабличныйДокумент;
	ТаблицаРезервов = ДанныеКонтроля.Скопировать(,"ДокументРезервирования, Зарезервировано, ЗарезервированоИзменение, Заявлено, ЗаявленоИзменение, Исполнено, ИсполненоИзменение");
	ТаблицаРезервов.Свернуть("ДокументРезервирования", "Зарезервировано, ЗарезервированоИзменение, Заявлено, ЗаявленоИзменение, Исполнено, ИсполненоИзменение");
	
	ТаблицаПериодов = ДанныеКонтроля.Скопировать(,"ПериодЛимитирования, ДокументРезервирования, Зарезервировано, ЗарезервированоИзменение, Заявлено, ЗаявленоИзменение, Исполнено, ИсполненоИзменение");
	ТаблицаПериодов.Свернуть("ДокументРезервирования, ПериодЛимитирования", "Зарезервировано, ЗарезервированоИзменение, Заявлено, ЗаявленоИзменение, Исполнено, ИсполненоИзменение");
	
	//
	Макет = ПланыВидовХарактеристик.ВидыКонтроляДокументов.ПолучитьМакет("КонтрольЛимитовПоРезервам");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьДокРезерв = Макет.ПолучитьОбласть("ГруппировкаДокументРезервирования");
	ОбластьПериод = Макет.ПолучитьОбласть("ГруппировкаПериод");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.Документ = СтрокаКонтроль.Документ;
	ОбластьЗаголовок.Параметры.ЦФО = Реквизиты.ЦФО;
	
	Если ЗначениеЗаполнено(Реквизиты.Проект) Тогда
		ОбластьЗаголовок.Параметры.Проект = Реквизиты.Проект;
	Иначе
		ОбластьЗаголовок.Параметры.Проект = НСтр("ru = '<без проекта>'");
	КонецЕсли;
	
	ОбластьЗаголовок.Параметры.ДатаВремяКонтроля = СтрокаКонтроль.ВремяПроверки;
	ОбластьЗаголовок.Параметры.ТекущееВремя = ТекущаяДатаСеанса();
	ОбластьЗаголовок.Параметры.ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);
	ТабДок.НачатьАвтогруппировкуСтрок();

	// 
	МассивПериодов = ТаблицаПериодов.ВыгрузитьКолонку("ПериодЛимитирования");
	ДатыНачалаПериодов = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивПериодов, "ДатаНачала");
	
	// Сортируем таблицу периодов по дате начала
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Для Каждого Стр Из ТаблицаПериодов Цикл
		Стр.ДатаНачала = ДатыНачалаПериодов[Стр.ПериодЛимитирования];
	КонецЦикла;
	ТаблицаПериодов.Сортировать("ДатаНачала");
	
	Для каждого СтрокаДокРезерва Из ТаблицаРезервов Цикл
		
		//
		РезервыЗаполнитьСуммыВОбласти(ОбластьДокРезерв, СтрокаДокРезерва);
		Если НЕ ЗначениеЗаполнено(ОбластьДокРезерв.Параметры.ДокументРезервирования) Тогда
			ОбластьДокРезерв.Параметры.ДокументРезервирования = НСтр("ru = 'Создаваемый документ ""Операционный план""'");
		КонецЕсли;
		ТабДок.Вывести(ОбластьДокРезерв, 1);
		
		СтрокиПериодов = ТаблицаПериодов.НайтиСтроки(Новый Структура("ДокументРезервирования", СтрокаДокРезерва.ДокументРезервирования));
		Для каждого СтрокаПериод Из СтрокиПериодов Цикл
			
			//
			РезервыЗаполнитьСуммыВОбласти(ОбластьПериод, СтрокаПериод);
			ТабДок.Вывести(ОбластьПериод, 1);
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ПериодЛимитирования", СтрокаПериод.ПериодЛимитирования);
			СтруктураПоиска.Вставить("ДокументРезервирования", СтрокаДокРезерва.ДокументРезервирования);
			
			СтрокиОтчета = ДанныеКонтроля.НайтиСтроки(СтруктураПоиска);
			Для Каждого ВыборкаДетальныеЗаписи Из СтрокиОтчета Цикл
				РезервыЗаполнитьСуммыВОбласти(ОбластьДетальныхЗаписей, ВыборкаДетальныеЗаписи);
				ТабДок.Вывести(ОбластьДетальныхЗаписей, 2);
			КонецЦикла;
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	Если ТаблицаПериодов.Количество() > 0 Тогда
		
		Если ТаблицаПериодов.Количество() = 0 Тогда
			ОбластьПодвалТаблицы.Параметры.ДиапазонПериодов = "";
		ИначеЕсли ТаблицаПериодов.Количество() = 1 Тогда
			ОбластьПодвалТаблицы.Параметры.ДиапазонПериодов = Строка(ТаблицаПериодов[0].ПериодЛимитирования);
		Иначе
			ОбластьПодвалТаблицы.Параметры.ДиапазонПериодов = Строка(ТаблицаПериодов[0].ПериодЛимитирования)
				+ " - " + Строка(ТаблицаПериодов[ТаблицаПериодов.Количество()-1].ПериодЛимитирования);
		КонецЕсли; 
		
		//
		ТаблицаПериодов.Свернуть("", "Зарезервировано, ЗарезервированоИзменение, Заявлено, ЗаявленоИзменение, Исполнено, ИсполненоИзменение");
		РезервыЗаполнитьСуммыВОбласти(ОбластьПодвалТаблицы, ТаблицаПериодов[0]);
		
		ТабДок.Вывести(ОбластьПодвалТаблицы);
	КонецЕсли;
	
	//
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции
	
// Процедура сохраняет данные для контроля в табличной части документа
//
// Параметры:
//  ДанныеДляКонтроля	- Таблица значений	- Результат контроля
//  РезультатыКонтроля	- ТабличнаяЧасть	- табличная часть РезультатыКонтроля проверяемого документа
//
Процедура СохранитьДанныеДляКонтроляВДокументе(ДанныеДляКонтроля, РезультатыКонтроля) Экспорт
	
	// НомерСтроки
	Если ДанныеДляКонтроля.Колонки.Найти("НомерСтроки") = неопределено Тогда
		ДанныеДляКонтроля.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10,0));
		Поз = 1;
		Для Каждого Строка Из ДанныеДляКонтроля Цикл
			Строка.НомерСтроки = Поз;
			Поз = Поз + 1;
		КонецЦикла;
	КонецЕсли;
	
	// АналитикаПланированияСтатейБюджетов
	Если ДанныеДляКонтроля.Колонки.Найти("АналитикаПланированияСтатейБюджетов") = неопределено Тогда
		ДанныеДляКонтроля.Колонки.Добавить("АналитикаПланированияСтатейБюджетов", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиПланированияСтатейБюджетов"));
	КонецЕсли;
	ИменаПолей = РегистрыСведений.АналитикаПланированияСтатейБюджетов.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.ПриходРасход = "";
	РегистрыСведений.АналитикаПланированияСтатейБюджетов.ЗаполнитьВКоллекции(ДанныеДляКонтроля, ИменаПолей);
	
	// АналитикаПланированияСтруктуры
	Если ДанныеДляКонтроля.Колонки.Найти("АналитикаПланированияСтруктуры") = неопределено Тогда
		ДанныеДляКонтроля.Колонки.Добавить("АналитикаПланированияСтруктуры", Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиПланированияСтруктуры"));
	КонецЕсли;
	ИменаПолей = РегистрыСведений.АналитикаПланированияСтруктуры.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.Организация = "";
	РегистрыСведений.АналитикаПланированияСтруктуры.ЗаполнитьВКоллекции(ДанныеДляКонтроля, ИменаПолей);
	
	// АналитикаКонтроляБюджетныхЛимитовРезервов
	Если ДанныеДляКонтроля.Колонки.Найти("КлючКонтроля") = неопределено Тогда
		ДанныеДляКонтроля.Колонки.Добавить("КлючКонтроля", Новый ОписаниеТипов("СправочникСсылка.КлючиКонтроляБюджетныхЛимитовРезервов"));
	КонецЕсли;
	ИменаПолей = РегистрыСведений.АналитикаКонтроляБюджетныхЛимитовРезервов.ИменаПолейКоллекцииПоУмолчанию();
	ИменаПолей.АналитикаКонтроляБюджетныхЛимитовРезервов = "КлючКонтроля";
	РегистрыСведений.АналитикаКонтроляБюджетныхЛимитовРезервов.ЗаполнитьВКоллекции(ДанныеДляКонтроля, ИменаПолей);
	
	Для Каждого Строка Из ДанныеДляКонтроля Цикл
		ЗаполнитьЗначенияСвойств(РезультатыКонтроля.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры // СохранитьДанныеДляКонтроляВДокументе()
	
// Функция возвращает соответствие с описанием колонок таблицы данных контроля, которые получаются из ключа контроля
//
// Возвращаемое значение:
//   Соответствие   - {ИмяКолонки, Структура("ИмяКолонки, ОписаниеТипа, ПутьКДанным")}
//
Функция КолонкиДанныхКонтроля() Экспорт
	Возврат КонтрольУХБюджетныеЛимиты.КолонкиДанныхКонтроля();
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РезервыЗаполнитьСуммыВОбласти(Область, Данные)
	
	Область.Параметры.Заполнить(Данные);
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Область.Параметры, "СтрАналитики") Тогда
		Область.Параметры.СтрАналитики = КонтрольУХ.ПолучитьПредставлениеСтатьиБюджетаИАналитик(Данные);
	КонецЕсли;
	
	Резерв = Данные.Зарезервировано;
	ТекущаяОперация = Данные.ЗарезервированоИзменение;
	
	Область.Параметры.ТекущаяОперация = ТекущаяОперация;
	Область.Параметры.Доступно =  Резерв + ТекущаяОперация;
	
КонецПроцедуры

#КонецОбласти
 