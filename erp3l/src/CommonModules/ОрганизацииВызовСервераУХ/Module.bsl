
#Область УХ_Встраивание

Функция ПолучитьКонтрагентовПоОрганизации(ОрганизацияИсточник) Экспорт
	
	Если Не ЗначениеЗаполнено(ОрганизацияИсточник) Тогда
		// Для обеспечения совместимости с вызовами, которые ожидают только массив.
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ОрганизационнаяЕдиница В (&ОрганизационнаяЕдиница)");
	
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияИсточник);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

Функция КонтрагентПоОрганизации(Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК т
	|ГДЕ
	|	т.ОрганизационнаяЕдиница = &Организация
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.ПометкаУдаления ВОЗР");

	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Возврат РезультатЗапроса.Выгрузить().Получить(0).Получить(0);
	
КонецФункции

#КонецОбласти

#Область ОграничениеСпискаРеглОтчетность

Функция ЗаменитьРегламентированнымиЗапрос(ТекстЗапроса) Экспорт

	Возврат СтрЗаменить(
				ТекстЗапроса, 
				"Справочник.Организации", 
				СтрШаблон("(%1)", ТекстЗапроса_РегламентированныеОрганизации())
			);

КонецФункции

Функция ТекстЗапроса_РегламентированныеОрганизации()

	Возврат
	"ВЫБРАТЬ 
	|	* 
	|ИЗ 
	|	Справочник.Организации КАК СправочникОрганизации
	|ГДЕ 
	|	СправочникОрганизации.ИспользоватьВРегламентированномУчете";

КонецФункции

#КонецОбласти

#Область ФормыСпискаВыбора

Процедура ПриСозданииНаСервереУХ_Организации(Форма, Отказ, СтандартнаяОбработка) Экспорт

	Список = Форма.Список;
	
	ДоработатьРеквизитСписок(Список);
	ДоработатьЭлементыФормы(Форма);

	ВидРавно = ВидСравненияКомпоновкиДанных.Равно;
	
	//Оформление Элиминирующие организации
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	ПолеЭлиминирующая = "Ссылка.ЭлиминирующаяОрганизация";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор, ПолеЭлиминирующая, ВидРавно, Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

	//Неактивный отбор по Регламентированным	
	ТолькоРегл = "Ссылка.ИспользоватьВРегламентированномУчете";
	ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Список.Отбор, ТолькоРегл);
	Если ЭлементыОтбора.Количество() = 0 Тогда
		
		Режим = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Список.Отбор, ТолькоРегл, ВидРавно, Истина, ,Ложь, Режим);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоработатьЭлементыФормы(Форма)
	
	ЕстьОтборы = Ложь;
	 	
	Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Количество() Тогда
		
		// Например, для налоговых резидентов(РФ, иностранные) отображаем списком, 
		// т.к. иерархия может скрывать резидентов, когда родитель не резидент 
		ЕстьОтборы = Истина;
			
	КонецЕсли;
	
	Если ЕстьОтборы Тогда		
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;		
	КонецЕсли;
	
	ЭлементЮрФизЛицо = Форма.Элементы.Найти("ЮрФизЛицо");
	Если ЭлементЮрФизЛицо <> Неопределено Тогда
		ЭлементЮрФизЛицо.Видимость = Ложь;
	КонецЕсли;
	
	ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "СписокТипОрганизации", , "Список.ТипОрганизации", 
								ВидПоляФормы.ПолеВвода, Форма.Элементы.Список);
	
КонецПроцедуры

Процедура ДоработатьРеквизитСписок(Список)
	
	Если Не Список.ПроизвольныйЗапрос Тогда
		
		Список.ПроизвольныйЗапрос = Истина;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ 
		|	* 
		|ИЗ 
		|	%1 КАК СправочникОрганизации";
		Список.ТекстЗапроса = СтрШаблон(ТекстЗапроса, Список.ОсновнаяТаблица);
		
	КонецЕсли;
	
	ТекстЗамены = "ВЫБРАТЬ " + ТекстЗапроса_ПоляОрганизаций();
	Список.ТекстЗапроса = СтрЗаменить(Список.ТекстЗапроса, "ВЫБРАТЬ", ТекстЗамены);

КонецПроцедуры

Функция ТекстЗапроса_ПоляОрганизаций(ИмяТаблицы = "СправочникОрганизации")

	ТекстЗапроса =	
	"
	|//#Область УХ_Организации
	|	СправочникОрганизации.ИспользоватьВРегламентированномУчете КАК ИспользоватьВРегламентированномУчете,
	|	СправочникОрганизации.ИностранныйНалоговыйРезидент КАК ИностранныйНалоговыйРезидент,
	|	СправочникОрганизации.ЭлиминирующаяОрганизация КАК ЭлиминирующаяОрганизация,
	|	СправочникОрганизации.ИспользоватьВРегламентированномУчете
	|		ИЛИ СправочникОрганизации.ИностранныйНалоговыйРезидент КАК ЯвляетсяНалоговымРезидентом,
	|	ВЫБОР
	|		КОГДА СправочникОрганизации.ИспользоватьВРегламентированномУчете
	|			ТОГДА ""%1""
	|		КОГДА СправочникОрганизации.ИностранныйНалоговыйРезидент
	|			ТОГДА ""%2""
	|		КОГДА СправочникОрганизации.ЭлиминирующаяОрганизация
	|			ТОГДА ""%3""
	|		ИНАЧЕ ""%4""
	|	КОНЕЦ КАК ТипОрганизации,	
	|	//#КонецОбласти
	|";
	
	Если ИмяТаблицы <> "СправочникОрганизации" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СправочникОрганизации", ИмяТаблицы);
	КонецЕсли;
	
	Возврат СтрШаблон(
				ТекстЗапроса, 
				НСтр("ru = 'Налоговый резидент РФ'"),
				НСтр("ru = 'Иностранный резидент'"),
				НСтр("ru = 'Элиминация'"),
				НСтр("ru = 'ЦФО'")				
			);
			
КонецФункции

#КонецОбласти
