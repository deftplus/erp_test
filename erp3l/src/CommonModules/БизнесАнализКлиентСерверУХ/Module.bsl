////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для реализации фукнциональности блока Бизнес-Анализ в
// контексте клиент-серверного кода.
////////////////////////////////////////////////////////////////////////////////

// Возвращает пустую структуру отборов аналитической панели.
Функция ИнициализироватьСтруктуруОтборовАналитическойПанели() Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ПериодОтчета",		 ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка"));
	РезультатФункции.Вставить("ПериодОтчетаНачало",	 ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка"));
	РезультатФункции.Вставить("Организация",		 ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка"));
	РезультатФункции.Вставить("Сценарий",			 ПредопределенноеЗначение("Справочник.Сценарии.ПустаяСсылка"));
	РезультатФункции.Вставить("Валюта",				 ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
	РезультатФункции.Вставить("Проект",				 ПредопределенноеЗначение("Справочник.Проекты.ПустаяСсылка"));
	Возврат РезультатФункции;
КонецФункции		// ИнициализироватьСтруктуруОтборовАналитическойПанели()

// Возвращает псевдо-графическое представление состояния Состояние.
Функция ПолучитьПредставлениеСостоянияПоказателяМкпВАналитическойРассылке(Состояние) Экспорт
	РезультатФункции = "";
	Если Состояние = 0 Тогда
		РезультатФункции = НСтр("ru = 'Хорошее'");
	ИначеЕсли Состояние = 1 Тогда
		РезультатФункции = НСтр("ru = 'Нормальное'");
	ИначеЕсли Состояние = 2 Тогда
		РезультатФункции = НСтр("ru = 'Тревожное'");
	ИначеЕсли Состояние = 3 Тогда
		РезультатФункции = "▲";
	ИначеЕсли Состояние = 4 Тогда
		РезультатФункции = "►";
	ИначеЕсли Состояние = 5 Тогда
		РезультатФункции = "▼";
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПредставлениеСостоянияПоказателяМкпВАналитическойРассылке()

// Определяет, входит ли значение ЗначениеПоказателяВход в коридор нижней и верхней границы
// показателя монитора ключевых показателей ПоказательВход. Когда границы противоречивы -
// возвращает Истину.
Функция ЗначениеПоказателяВКоридореЗначений(ПоказательВход, ЗначениеПоказателяВход) Экспорт
	РезультатФункции = Истина;
	НижняяГраница = ПоказательВход.НижняяГраницаЗначения;
	ВерхняяГраница = ПоказательВход.ВерхняяГраницаЗначения;
	Если ВерхняяГраница > НижняяГраница Тогда
		РезультатФункции = (НижняяГраница <= ЗначениеПоказателяВход) И (ЗначениеПоказателяВход <= ВерхняяГраница);
	Иначе
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЗначениеПоказателяВКоридореЗначений()

// Преобразует ТипДиаграммыВход в тот диаграммы, который будет передан в СКД.
Функция ПреобразоватьТипДиаграммы(ТипДиаграммыВход, ЗначениеПоУмолчаниюВход = Неопределено) Экспорт 
	Если ЗначениеЗаполнено(ЗначениеПоУмолчаниюВход) Тогда
		ЗначениеПоУмолчаниюИтоговое = ЗначениеПоУмолчаниюВход;
	Иначе
		ЗначениеПоУмолчаниюИтоговое = ТипДиаграммы.Гистограмма;     	// По умолчанию выводим гистограмму.
	КонецЕсли;
	РезультатФункции = ЗначениеПоУмолчаниюИтоговое;
	Если ТипЗнч(ТипДиаграммыВход) = Тип("ПеречислениеСсылка.ТипыДиаграмм") Тогда
		Если ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Гистограмма") Тогда
			РезультатФункции = ТипДиаграммы.Гистограмма;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГистограммаОбъемная") Тогда
			РезультатФункции = ТипДиаграммы.ГистограммаОбъемная;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Водопад") Тогда
			РезультатФункции = ТипДиаграммы.Водопад;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Воронка") Тогда
			РезультатФункции = ТипДиаграммы.Воронка;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГистограммаГоризонтальная") Тогда
			РезультатФункции = ТипДиаграммы.ГистограммаГоризонтальная;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.График") Тогда
			РезультатФункции = ТипДиаграммы.График;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГрафикПоШагам") Тогда
			РезультатФункции = ТипДиаграммы.ГрафикПоШагам;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.ГрафикСОбластями") Тогда
			РезультатФункции = ТипДиаграммы.ГрафикСОбластями;			
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Измерительная") Тогда
			РезультатФункции = ТипДиаграммы.Измерительная;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Изометрическая") Тогда
			РезультатФункции = ТипДиаграммы.Изометрическая;	
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Круговая") Тогда
			РезультатФункции = ТипДиаграммы.Круговая;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.КруговаяОбъемная") Тогда
			РезультатФункции = ТипДиаграммы.КруговаяОбъемная;
		ИначеЕсли ТипДиаграммыВход = ПредопределенноеЗначение("Перечисление.ТипыДиаграмм.Точечная") Тогда
			РезультатФункции = ТипДиаграммы.Точечная;
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипДиаграммыВход) Тогда
			РезультатФункции = ЗначениеПоУмолчаниюИтоговое; 
		Иначе
			// Неизвестный вариант перечисления, оставляем значение по умолчанию.
			РезультатФункции = ЗначениеПоУмолчаниюИтоговое; 
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТипДиаграммыВход) = Тип("ТипДиаграммы") Тогда	
		// Уже указан готовый вариант.
		РезультатФункции = ТипДиаграммыВход;
	Иначе
		// Неизвестный вариант, оставляем значение по умолчанию.
		РезультатФункции = ЗначениеПоУмолчаниюИтоговое; 
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьТипДиаграммы()

// Преобразует ВариантРазмещенияЛегендыВход из перечисления ВариантыРазмещенияЛегенды
// в соответственное значение системного перечисления.
Функция ПреобразоватьВариантРазмещенияДиаграммыКомпоновкиДанных(ВариантРазмещенияЛегендыВход) Экспорт
	РезультатФункции = Неопределено;
	Если ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Нет") Тогда
		РезультатФункции = РасположениеЛегендыДиаграммыКомпоновкиДанных.Нет;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Верх")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммыКомпоновкиДанных.Верх;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Лево")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммыКомпоновкиДанных.Лево;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Низ")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммыКомпоновкиДанных.Низ;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Право")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммыКомпоновкиДанных.Право;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант расположения легенды диаграммы: %ВариантРасположения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВариантРасположения%", Строка(ВариантРазмещенияЛегендыВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьВариантРазмещенияДиаграммыКомпоновкиДанных()

// Преобразует ВариантРазмещенияЛегендыВход из перечисления ВариантыРазмещенияЛегенды
// в соответственное значение системного перечисления.
Функция ПреобразоватьВариантРазмещенияДиаграммы(ВариантРазмещенияЛегендыВход) Экспорт
	РезультатФункции = Неопределено;
	Если ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Нет") Тогда
		РезультатФункции = РасположениеЛегендыДиаграммы.Нет;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Верх")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммы.Верх;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Лево")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммы.Лево;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Низ")  Тогда
		РезультатФункции = РасположениеЛегендыДиаграммы.Низ;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.Право") Тогда
		РезультатФункции = РасположениеЛегендыДиаграммы.Право;
	ИначеЕсли ВариантРазмещенияЛегендыВход = ПредопределенноеЗначение("Перечисление.ВариантыРазмещенияЛегендыДиаграммы.ПустаяСсылка") Тогда
		РезультатФункции = РасположениеЛегендыДиаграммы.Право;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант расположения легенды диаграммы: %ВариантРасположения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВариантРасположения%", Строка(ВариантРазмещенияЛегендыВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = РасположениеЛегендыДиаграммы.Право;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьВариантРазмещенияДиаграммы()
