#Область СобытияМодуляФормы

#Область ФормаДокумента

#Область СтандартныеОбработчики
	
// нетиповое событие документа. Вызывается перед исполнением основного кода
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	
	// Если реквизит формы РеквизитыДокумента существует и заполнен, то дальнейшая инициализация не нужна
	Если ЗаявкиНаОперации.ТребуетсяИнициализацияФормы(Форма) Тогда
		
		Элементы = Форма.Элементы;
		
		#Область СтраницаАналитикиПланирования
		//
		ДействиеПриИзменении = Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
		ПараметрыЭлементов = ПолучитьПараметрыЭлементов();
		
		СтраницаАналитик = ФормыУХ.СоздатьГруппуФормы(Элементы, "АналитикиПланирования", 
		НСтр("ru = 'Аналитики учета и планирования'"), ВидГруппыФормы.Страница, Элементы.ГруппаСтраницы, Элементы.СтраницаРасшифровка);
		ГруппаАналитикиБюджета = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиБюджета", , ,  СтраницаАналитик);
		ПараметрыВертикаль = Новый Структура("ОтображатьЗаголовок, Группировка, ", Ложь, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		ГруппаАналитикиБюджетаЛевая = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиБюджетаЛевая", , ,  ГруппаАналитикиБюджета,, ПараметрыВертикаль);
		ГруппаАналитикиБюджетаПравая = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиБюджетаПравая", , ,  ГруппаАналитикиБюджета,, ПараметрыВертикаль);
		
		////
		Элементы.Переместить(Элементы.СтатьяДвиженияДенежныхСредств, ГруппаАналитикиБюджетаЛевая);
		#КонецОбласти 
		
		// ОПК
		ПараметрыРазмещения = Новый Структура;
		ПараметрыРазмещения.Вставить("ПараметрыЭлементов", ПолучитьПараметрыЭлементов());
		ПараметрыРазмещения.Вставить("СтраницаКонтроля", ФормыУХ.РазместитьВГруппе(Форма.Элементы.ГруппаСтраницы));
		ПараметрыРазмещения.Вставить("ПредставлениеПлатежнойПозции", ФормыУХ.РазместитьПередЭлементом(Форма.Элементы.Заметки));
		
		// Создаем реквизиты формы документа
		ЗаявкиНаОперации.СоздатьРеквизитыФормыЗаявки(Форма);
		
		// Создаем элементы формы заявки
		ЗаявкиНаОперации.СоздатьЭлементыФормыЗаявки(Форма, ПараметрыРазмещения);
		СоздатьЭлементыФормыДокумента(Форма);
		
		// Инициализировать созданные реквизиты и элементы
		ЗаявкиНаОперации.ИнициализироватьФормуЗаявки(Форма);
		
		Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
			Элементы.Переместить(Элементы["РасшифровкаПлатежаАналитика" + Сч], Элементы.РасшифровкаПлатежа, Элементы.РасшифровкаПлатежаПодразделение);
		КонецЦикла;
		
		// Конец ОПК
		
		// Для Оргнизации вернуть обработчик действия
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОбработчикиИзмененияОрганизации")
			И ТипЗнч(Форма.ОбработчикиИзмененияОрганизации) = Тип("ДанныеФормыКоллекция") Тогда
			
			Строки = Форма.ОбработчикиИзмененияОрганизации.НайтиСтроки(Новый Структура("ИмяРеквизита", "Организация"));
			Если Строки.Количество() > 0 Тогда
				Элементы.Организация.УстановитьДействие("ПриИзменении", Строки[0].ИмяОбработчика);
			КонецЕсли;
			
		КонецЕсли;
		
		ПодготовитьФормуНаСервере(Форма);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ЗаявкиНаОперации.ЗаполнитьИзмененностьРеквизитов(Форма);
	Иначе
		// для новых документов, при первоначальном открытии, пользователь ничего не успел поменять
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Если это новая заявка, и заполнены какие-либо реквизиты, требуемые для платежной позиции, то
	// необходимо их продублировать в платежную позицию
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Форма.Объект.БанковскийСчет) Тогда
			ПриИзмененииСчетаСписания(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	ЗаявкиНаОперации.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ЗаявкиНаОперации.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти 

Процедура УточнитьСписокОперацийУХ(Форма) Экспорт
	
	СписокХозОпераций = Форма.Элементы.ХозяйственнаяОперация.СписокВыбора.ВыгрузитьЗначения();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокХозяйственныхОпераций", СписокХозОпераций);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыОперацийУХ.Ссылка КАК ВидОперацииУХ
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ИспользуетсяВЗаявках = ИСТИНА
	|	И ВидыОперацийУХ.ДопустимБезналичныйРасчет = ИСТИНА
	|	И ВидыОперацийУХ.ВидОперацииДДСБезналичныйРасчет В(&СписокХозяйственныхОпераций)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыОперацийУХ.Ссылка
	|ИЗ
	|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
	|ГДЕ
	|	ВидыОперацийУХ.ИспользуетсяВЗаявках = ИСТИНА
	|	И ВидыОперацийУХ.ДопустимНаличныйРасчет = ИСТИНА
	|	И ВидыОперацийУХ.ВидОперацииДДСНаличныйРасчет В(&СписокХозяйственныхОпераций)";
	
	Результат = Запрос.Выполнить();
	
	Массив = Результат.Выгрузить().ВыгрузитьКолонку("ВидОперацииУХ");
	
	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(Массив)));
	Форма.Элементы.ВидОперацииУХ.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);	
	
КонецПроцедуры


#Область ОбработчикиСобытийЭлементовФормы
	
// Обработчик события изменения элемента формы
Процедура ПриИзмененииЭлементаУХ(Форма, ИмяЭлемента) экспорт
	
	ТребуетсяВызватьУправлениеФормой = Истина;
	Если ИмяЭлемента = "ЖелательнаяДатаПлатежа" Тогда
		ЗаявкиНаОперации.ПриИзмененииПланируемойДатаОперации(Форма);
	ИначеЕсли ИмяЭлемента = "ЦФО"
		ИЛИ ИмяЭлемента = "ЦФОШапка"
		ИЛИ ИмяЭлемента = "ЦФОБезРазбиения" Тогда
		ЗаявкиНаОперации.ПриИзмененииЦФО(Форма);
	ИначеЕсли ИмяЭлемента = "Проект" 
		ИЛИ ИмяЭлемента = "ПроектШапка"
		ИЛИ ИмяЭлемента = "ПроектБезРазбиения" Тогда
		ЗаявкиНаОперации.ПриИзмененииПроекта(Форма);
	ИначеЕсли ИмяЭлемента = "КассаПолучатель" Тогда
		ПриИзмененииСчетаКассыПолучателя(Форма);
	ИначеЕсли ИмяЭлемента = "Касса" Тогда
		ПриИзмененииСчетаСписания(Форма);
	ИначеЕсли ИмяЭлемента = "СуммаДокумента" Тогда
		ЗаявкиНаОперации.ПриИзмененииСуммыДокумента(Форма);
	ИначеЕсли ИмяЭлемента = "Валюта" Тогда
		ЗаявкиНаОперации.ПриИзмененииВалюты(Форма);
	ИначеЕсли ИмяЭлемента = "ВалютаОплаты" Тогда
		ЗаявкиНаОперации.ПриИзмененииВалютыОплаты(Форма);
	ИначеЕсли ИмяЭлемента = "РасшифровкаПлатежа" Тогда
		ЗаявкиНаОперации.ПриИзмененииДвиженийОперации(Форма);
		ПриИзмененииРасшифровкиПлатежа(Форма);
		
	ИначеЕсли ИмяЭлемента = "ПриоритетЗаявки" Тогда
		ЗаявкиНаОперации.ПриИзмененииПриоритетаПлатежа(Форма);
	Иначе
		ТребуетсяВызватьУправлениеФормой = Ложь;
	КонецЕсли;
	
	Если ТребуетсяВызватьУправлениеФормой Тогда
		УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриУстановкеВидимости(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагента(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	// Реквизиты нужны для корректного заполнения платежной позиции
	Контрагент = Объект.Контрагент;
	Объект.ЭтоВнутригрупповоеПеремещение = РаботаСКонтрагентамиУХ.ЭтоВнутригрупповойКонтрагент(Контрагент);
	Если Объект.ЭтоВнутригрупповоеПеремещение Тогда
		Объект.ОрганизацияПолучатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Контрагент, "ОрганизационнаяЕдиница");
	Иначе
		Объект.ОрганизацияПолучатель = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	// ОПК
	ПлатежныеПозиции.УстановитьКонтрагента(Форма);
	// Конец ОПК
	
КонецПроцедуры

Процедура ПриИзмененииДоговора(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	// ОПК
	ЗаявкиНаОперации.ПриИзмененииДоговора(Форма);
	// Конец ОПК
	
	ЗаполнитьОбъектРасчетовПриИзмененииДоговора(Объект.РасшифровкаПлатежа, Объект.Договор);
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, "СтавкаНДС, ВалютаВзаиморасчетов");
		Для Каждого СтрокаРасшифровки Из Объект.РасшифровкаПлатежа Цикл
			ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, РеквизитыДоговора);
		КонецЦикла;
	КонецЕсли; 
	
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("ПересчитатьСуммуНДС", Новый Структура("ЦенаВключаетНДС", Истина));
	КэшированныеЗначения = Неопределено;	
	ОбработкаТабличнойЧастиСервер.ОбработатьТЧ(Объект.РасшифровкаПлатежа, СтруктураДействий, КэшированныеЗначения);
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииДоговораКредитаДепозита(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	// ОПК
	ЗаявкиНаОперации.ПриИзмененииДоговораКредитаДепозита(Форма);
	// Конец ОПК
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ДоговорКредитаДепозита,
		"ВалютаВзаиморасчетов");
	
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		
		ТекущаяСтрока.ДоговорКредитаДепозита = Объект.ДоговорКредитаДепозита;
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		ТекущаяСтрока.ВалютаВзаиморасчетов = РеквизитыДоговора.ВалютаВзаиморасчетов;
	КонецЦикла;
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
		
КонецПроцедуры

Процедура ПриИзмененииДоговораАренды(Форма) Экспорт
	
	Объект = Форма.Объект;
	
	// ОПК
	ЗаявкиНаОперации.ПриИзмененииДоговораАренды(Форма);
	// Конец ОПК
	
	РеквизитыДоговора = РаботаСДоговорамиКонтрагентовЕХ.ПараметрыДоговораАренды(Объект.ДоговорАренды, Объект.Дата);
		
	Для Каждого ТекущаяСтрока Из Объект.РасшифровкаПлатежа Цикл
		ТекущаяСтрока.ДоговорАренды = Объект.ДоговорАренды;
		
		//РасшифровкаПлатежаДоговорАрендыПриИзмененииСервер++
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, РеквизитыДоговора);
		ТекущаяСтрока.СуммаВзаиморасчетов = 0;
		ТекущаяСтрока.ТипПлатежаПоАренде = Перечисления.ТипыПлатежейПоАренде.УслугаПоАренде;
		//РасшифровкаПлатежаДоговорАрендыПриИзмененииСервер--
		
		СтруктураПересчетаСуммы = Новый Структура;
		СтруктураПересчетаСуммы.Вставить("ЦенаВключаетНДС", Истина);
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС", СтруктураПересчетаСуммы);
		ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(ТекущаяСтрока, СтруктураДействий, неопределено);
		
	КонецЦикла;
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
		
КонецПроцедуры

Процедура ЗаполнитьОбъектРасчетовПриИзмененииДоговора(РасшифровкаПлатежа, Договор)
	
	Если НЕ ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОбъектРасчетовДоговор = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(Договор);
	
	// Определяем к какому договору относится объект расчетов
	ОбъектыРасчетов = РасшифровкаПлатежа.Выгрузить(,"ОбъектРасчетов").ВыгрузитьКолонку("ОбъектРасчетов");
	ОбъектыРасчетовДоговор = Общегоназначения.ЗначениеРеквизитаОбъектов(ОбъектыРасчетов, "Договор");
	
	Для Каждого СтрокаРасшифровки Из РасшифровкаПлатежа Цикл	
		Если ОбъектыРасчетовДоговор[СтрокаРасшифровки.ОбъектРасчетов] <> Договор Тогда
			СтрокаРасшифровки.ОбъектРасчетов = ОбъектРасчетовДоговор; // заполняем объект расчетов договором по умолчанию
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры	

Процедура ПриИзмененииСтатьиБюджета(Форма, ИмяЭлемента, РучноеИзменение) Экспорт
	ЗаявкиНаОперации.ПриИзмененииСтатьиБюджета(Форма, ИмяЭлемента, РучноеИзменение);
КонецПроцедуры

Процедура ПриИзмененииВидаОперацииУХ(Форма) Экспорт
	// ОПК
	ЗаявкиНаОперации.ПриИзмененииВидаОперацииУХ(Форма);
	// Конец ОПК
	
	// 
	Форма.ТекущаяВалюта = Форма.Объект.Валюта;
	
	ЗаполнитьЭлементСтруктурыЗадолженностиПоУмолчанию(Форма.Объект);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
	УстановитьПараметрыЭлементовСтруктурыЗадолженности(Форма);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации(Форма) Экспорт
	ЗаявкиНаОперации.ПриИзмененииОрганизации(Форма);
КонецПроцедуры

Процедура ПриИзмененииФормыОплаты(Форма) Экспорт
	ЗаявкиНаОперации.ПриИзмененииФормыОплаты(Форма);
КонецПроцедуры

Процедура ПриИзмененииДокументаПланирования(Форма) Экспорт
	
	ЗаявкиНаОперации.ПриИзмененииДокументаПланирования(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизацииПолучателя(Форма) Экспорт
	
	//
	ПлатежныеПозиции.УстановитьОрганизациюПолучатель(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСчетаКассыПолучателя(Форма) Экспорт
	ПлатежныеПозиции.УстановитьБанковскийСчетКассуПолучатель(Форма);
КонецПроцедуры
Процедура ПриИзмененииСчетаКонтрагента(Форма) Экспорт
	ЗаявкиНаОперации.ПриИзмененииБанковскогоСчетаКонтрагента(Форма);
КонецПроцедуры

Процедура ПриИзмененииСчетаСписания(Форма) Экспорт
	
	//
	Объект = Форма.Объект;
	// Заглушка для заявок
	Форма.ПлатежнаяПозиция[0].БанковскийСчетКасса = Объект.БанковскийСчет;
	
	ЗаявкиНаОперации.ПриИзмененииБанковскогоСчетаКассы(Форма);
	
КонецПроцедуры

Процедура ПриИнициализацииРасшифровкиПлатежа(Форма) Экспорт
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
КонецПроцедуры

Процедура ОбновитьАналитикиСтатейБюджетов(Форма) Экспорт
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииЛицевыхСчетовСотрудников(Форма) Экспорт
	
	ПерезаполнитьПлатежныеПозицииПоЛицевымСчетам(Форма);
	
КонецПроцедуры

Процедура ПерезаполнитьПлатежныеПозицииПоЛицевымСчетам(Форма)
	
	Объект = Форма.Объект;
	
	ПлатежнаяПозиция = Форма.ПлатежнаяПозиция.Выгрузить();
	НоваяПлатежнаяПозиция = ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
	СохранямыеПоля = "ДатаИсполнения, БанковскийСчетКасса";
	
	Для каждого НоваяСтрока ИЗ НоваяПлатежнаяПозиция Цикл
		
		СтрокиСтарые = ПлатежнаяПозиция.НайтиСтроки(Новый Структура("Контрагент, СчетКонтрагента", 
			НоваяСтрока.Контрагент, НоваяСтрока.СчетКонтрагента));
		Если НЕ ЗначениеЗаполнено(СтрокиСтарые) Тогда
			СтрокиСтарые = ПлатежнаяПозиция.НайтиСтроки(Новый Структура("Контрагент", НоваяСтрока.Контрагент));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокиСтарые) Тогда
			 СтараяСтрока = СтрокиСтарые[0];
			 ЗаполнитьЗначенияСвойств(НоваяСтрока, СтараяСтрока, СохранямыеПоля);
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.ПлатежнаяПозиция.Загрузить(НоваяПлатежнаяПозиция);
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииХозяйственнойОперацииПоЗарплате(Форма) Экспорт
	ЗаполнитьПлатежныеПозицииПоДаннымДокумента(Форма);
КонецПроцедуры

Процедура ПриИзмененииРасшифровкиПлатежа(Форма)
	
	Объект = Форма.Объект;	
	Если ЭтоЗаявкаНаВыплатуЗарплатыПоЛицевымСчетамПоВедомостям(Объект) Тогда
		
		ПерезаполнитьПлатежныеПозицииПоЛицевымСчетам(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииВедомостиНаЗарплату(Форма) Экспорт
	
	Объект = Форма.Объект;	
	Если ЭтоЗаявкаНаВыплатуЗарплатыПоЛицевымСчетамПоВедомостям(Объект) Тогда	
		
		ПерезаполнитьПлатежныеПозицииПоЛицевымСчетам(Форма);
		
	КонецЕсли;
	
	ПлатежныеПозиции.УстановитьСуммуДокумента(Форма);
	
КонецПроцедуры

Функция ЭтоЗаявкаНаВыплатуЗарплатыПоЛицевымСчетамПоВедомостям(Заявка) Экспорт
	
	Если ТипЗнч(Заявка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		РеквизитыЗаявки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявка, "ВидОперацииУХ, ХозяйственнаяОперацияПоЗарплате");
		
	ИначеЕсли ТипЗнч(Заявка.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		РеквизитыЗаявки = Заявка;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ИспользоватьНачислениеЗарплатыУТ = Константы.ИспользоватьНачислениеЗарплаты.Получить();	
	Если ИспользоватьНачислениеЗарплатыУТ 
		И РеквизитыЗаявки.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПеречислениеЗаработнойПлатыПоВедомостям
		И РеквизитыЗаявки.ХозяйственнаяОперацияПоЗарплате = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции 

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиПоУмолчанию(Объект)
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, 
		МассивВсехРеквизитов, МассивРеквизитовОперации);
	
	Для каждого Строка ИЗ Объект.РасшифровкаПлатежа Цикл
		
		Договор = ДоговорСтрокиРасшифровки(Строка, Объект, МассивРеквизитовОперации);
		МассивЭлементов = ЗаявкиНаОперацииВызовСервера.ЭлементыСтруктурыЗадолженностиПоДоговору(Договор, Объект.Ссылка);
		Если МассивЭлементов.Количество() >= 1 Тогда 
			ЭлементСтруктурыЗадолженности = МассивЭлементов[0];
		Иначе
			ЭлементСтруктурыЗадолженности = Неопределено;
		КонецЕсли;
		
		Строка.ЭлементСтруктурыЗадолженности = ЭлементСтруктурыЗадолженности;
		
		СтатьяДДС = ЗаявкиНаОперацииВызовСервера.СтатьяДДСПоЭлементуСтруктурыЗадолженности(Договор, 
			ЭлементСтруктурыЗадолженности, ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход"));
		
		Строка.СтатьяДвиженияДенежныхСредств = СтатьяДДС;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СтатьяДДСПоЭлементуСтруктурыЗадолженности(ЭлементСтруктурыЗадолженности, Строка, Объект) Экспорт
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, 
		МассивВсехРеквизитов, МассивРеквизитовОперации);
			
	Договор = ДоговорСтрокиРасшифровки(Строка, Объект, МассивРеквизитовОперации);	
	СтатьяДДС = ЗаявкиНаОперацииВызовСервера.СтатьяДДСПоЭлементуСтруктурыЗадолженности(Договор, 
		ЭлементСтруктурыЗадолженности, ПредопределенноеЗначение("Перечисление.ВидыДвиженийПриходРасход.Расход"));
		
	Возврат СтатьяДДС;
	
КонецФункции

Функция ДоговорСтрокиРасшифровки(Строка, Объект, МассивРеквизитовОперации)
	
	Если МассивРеквизитовОперации.Найти("Договор") <> Неопределено Тогда
		Возврат Объект.Договор;
	ИначеЕсли МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
		Возврат Строка.ДоговорКредитаДепозита;
	ИначеЕсли МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорАренды") <> Неопределено Тогда
		Возврат Строка.ДоговорАренды;
	КонецЕсли;

	Возврат Неопределено;
	  
КонецФункции

Функция СписокФизЛицПриИзменении(Форма) Экспорт
	ЗаполнитьПлатежныеПозицииПоДаннымДокумента(Форма);
КонецФункции
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

#Область ДоработкаФормыЗаявкиПодХозОперации

Процедура ОбщиеДоработкиФормыЗаявки(Форма, Элементы, ПараметрыЭлементов)
	
	ГруппаКрайняяДатаБезАкцепт = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаКрайняяДатабезАкцепт",,, 
		Элементы.ГруппаШапкаПраво, Элементы.ГруппаТипНалога, ПараметрыЭлементов.ГруппаГ);
	
	// КрайняяДата и Безакцептное списание
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КрайняяДата", НСтр("ru = 'Не позднее'"), "Объект.КрайняяДата",, 
		ГруппаКрайняяДатаБезАкцепт, , ПараметрыЭлементов.ПолеВвода28);
	Элемент.Ширина = 9;
	
	// Безакцептное списание
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "БезакцептноеСписание",, "Объект.БезакцептноеСписание", 
		ВидПоляФормы.ПолеФлажка, ГруппаКрайняяДатаБезАкцепт,, ПараметрыЭлементов.ПолеФлажка,
		Новый Структура("ПриИзменении", "Подключаемый_БезакцептноеСписаниеПриИзменении"));
	
КонецПроцедуры
	
Процедура ДоработатьКонвертациюВалюты(Форма, Элементы, ПараметрыЭлементов)
	
	// Группа для указания счета списания
	Группа1 = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаКонвертацияВалютыСписать", НСтр("ru = 'Счет списания'"), ,
		Элементы.СтраницаОсновное, Элементы.ГруппаКонвертацияВалюты, ПараметрыЭлементов.ГруппаВ);
	Группа2 = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаКонвертацияВалютыЗачислить", НСтр("ru = 'Счет зачисления'"), ,
		Элементы.СтраницаОсновное, Элементы.ГруппаДатаОтчета, ПараметрыЭлементов.ГруппаВ);
		
	// БанковскийСчетСписатьС и КассаСписатьС
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "БанковскийСчетСписатьС",
		НСтр("ru = 'Списать со счета'"), "Объект.БанковскийСчет", 			,Группа1, , ПараметрыЭлементов.ПолеВвода28);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КассаСписатьС",
		НСтр("ru = 'Выдать из кассы'"),	 "Объект.Касса",					,Группа1, , ПараметрыЭлементов.ПолеВвода28);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "БанковскийСчетЗачислить",
		НСтр("ru = 'Зачислить на счет'"),"Объект.БанковскийСчетПолучатель", ,Группа2, , ПараметрыЭлементов.ПолеВвода28);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КассаЗачислить",
		НСтр("ru = 'Зачислить в кассу'"),"Объект.КассаПолучатель",			,Группа2, , ПараметрыЭлементов.ПолеВвода28);
		
	//
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.БанковскийСчетСписатьС,	"Отбор.ВалютаДенежныхСредств",	"Объект.Валюта"); 
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.БанковскийСчетСписатьС,	"Отбор.Владелец",				"Объект.Организация");
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.КассаСписатьС, 			"Отбор.ВалютаДенежныхСредств",	"Объект.Валюта"); 
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.КассаСписатьС,			"Отбор.Владелец", 				"Объект.Организация");
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.БанковскийСчетЗачислить,	"Отбор.ВалютаДенежныхСредств",	"Объект.ВалютаКонвертации"); 
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.БанковскийСчетЗачислить,	"Отбор.Владелец",				"Объект.Организация");
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.КассаЗачислить, 			"Отбор.ВалютаДенежныхСредств",	"Объект.ВалютаКонвертации"); 
	ФормыУХ.ДобавитьСвязьПараметровВыбора(Элементы.КассаЗачислить,			"Отбор.Владелец", 				"Объект.Организация");
	
	Элементы.БанковскийСчетСписатьС.АвтоОтметкаНезаполненного = Истина;
	Элементы.БанковскийСчетСписатьС.АвтоВыборНезаполненного = Истина;
	Элементы.КассаСписатьС.АвтоОтметкаНезаполненного = Истина;
	Элементы.КассаСписатьС.АвтоВыборНезаполненного = Истина;
	
	//
	Элементы.КассаСписатьС.УстановитьДействие("ПриИзменении", Элементы.Касса.ПолучитьДействие("ПриИзменении"));
	Элементы.БанковскийСчетСписатьС.УстановитьДействие("ПриИзменении", Элементы.БанковскийСчет.ПолучитьДействие("ПриИзменении"));
	Элементы.КассаЗачислить.УстановитьДействие("ПриИзменении", Элементы.КассаПолучатель.ПолучитьДействие("ПриИзменении"));
	Элементы.БанковскийСчетЗачислить.УстановитьДействие("ПриИзменении", Элементы.БанковскийСчетПолучатель.ПолучитьДействие("ПриИзменении"));
	
КонецПроцедуры

#КонецОбласти 

Функция ПолучитьПараметрыЭлементов()
	
	ПараметрыЭлементов = ФормыУХ.ПолучитьПараметрыЭлементовПоУмолчанию();
	ПараметрыЭлементов.ГруппаВ.ОтображатьЗаголовок  = Ложь;
	ПараметрыЭлементов.ГруппаГ.ОтображатьЗаголовок  = Ложь;
	
	Возврат ПараметрыЭлементов;
	
КонецФункции

Процедура СоздатьЭлементыФормыДокумента(Форма)
	
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	ПараметрыЭлементов = ПолучитьПараметрыЭлементов();
	
	ДействиеПриИзменении = Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	#Область СтраницаАналитикиПланирования
	ГруппаАналитикиБюджетаЛевая = Элементы.ГруппаАналитикиБюджетаЛевая;
	ГруппаАналитикиБюджетаПравая = Элементы.ГруппаАналитикиБюджетаПравая;
	
	//
	ВставитьПеред = Элементы.СтатьяДвиженияДенежныхСредств;
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФОШапка",, "Объект.ЦФО",,		
			ГруппаАналитикиБюджетаЛевая, ВставитьПеред, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПроектШапка",, "Объект.Проект",,	
			ГруппаАналитикиБюджетаЛевая, ВставитьПеред, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
			
	// Поле информация - замена декорации, но с такой-же высотой, как и у поля ввода
	ВставитьПеред = Элементы.СтатьяДвиженияДенежныхСредствЗачисление;
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ПолеДекорация1", , "Информация",,
		ГруппаАналитикиБюджетаПравая, ВставитьПеред, ПараметрыЭлементов.ПолеВводаНевидимое);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ПолеДекорация2", , "Информация",,
		ГруппаАналитикиБюджетаПравая, ВставитьПеред, ПараметрыЭлементов.ПолеВводаНевидимое);
	#КонецОбласти 
	
	//
	ШаблонЗаголовка = НСтр("ru = 'Аналитика %1 (списание)'");
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		АналитикаСписания = Элементы[СтрШаблон("АналитикаШапка%1", Сч)];
		ЗаполнитьЗначенияСвойств(АналитикаСписания, ПараметрыЭлементов.ПолеВвода28);
		АналитикаСписания.Заголовок = СтрШаблон(ШаблонЗаголовка, Сч);
		
		АналитикаЗачисления = Элементы[СтрШаблон("АналитикаЗачисление%1", Сч)];
		ЗаполнитьЗначенияСвойств(АналитикаЗачисления, ПараметрыЭлементов.ПолеВвода28);
	КонецЦикла;
	
	Элементы.СтатьяДвиженияДенежныхСредств.Заголовок = НСтр("ru = 'Статья ДДС (списание)'");
	ЗаполнитьЗначенияСвойств(Элементы.СтатьяДвиженияДенежныхСредствЗачисление, ПараметрыЭлементов.ПолеВвода28);
	
	//
	Родитель = Элементы.РасшифровкаСписком;
	Куда = Элементы.РасшифровкаПлатежа;
	Группа = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаЦФОПроект",,,Родитель, Куда, ПараметрыЭлементов.ГруппаГ);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФО",, "Объект.ЦФО",, Группа,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Проект",, "Объект.Проект",,	Группа,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПроектБюджетодержатель",, "ПроектБюджетодержатель",, Группа,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);	
		
	//
	Родитель = Элементы.РасшифровкаБезРазбиения;
	Куда = Элементы.РасшифровкаБезРазбиенияПодразделение;
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФОБезРазбиения",, "Объект.ЦФО",, Родитель, Куда, ПараметрыЭлементов.ПолеВвода, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПроектБезРазбиения",, "Объект.Проект",,	Родитель, Куда, ПараметрыЭлементов.ПолеВвода, ДействиеПриИзменении);
	
	Элементы.РасшифровкаБезРазбиенияВедомость.Ширина = 0;
	Элементы.РасшифровкаБезРазбиенияВедомость.РастягиватьПоГоризонтали = неопределено;
	
	//
	Элементы.ЖелательнаяДатаПлатежа.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	#Область ДоговорыВШапке
	
	ВставитьПеред = Элементы.БанковскийСчетПолучатель;
	
	// Договор 
	Элементы.Переместить(Элементы.Договор, ВставитьПеред.Родитель, ВставитьПеред);
	ЗаполнитьЗначенияСвойств(Элементы.Договор, ПараметрыЭлементов.ПолеВвода);
	Элементы.Договор.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	
	// Договор возврата
	Элементы.Переместить(Элементы.ДоговорВозврата, 				ВставитьПеред.Родитель, ВставитьПеред);
	ЗаполнитьЗначенияСвойств(Элементы.ДоговорВозврата, 			ПараметрыЭлементов.ПолеВвода);
	Элементы.ДоговорВозврата.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");

	
	ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорКредитаДепозита",, "Объект.ДоговорКредитаДепозита",,	
			ВставитьПеред.Родитель, ВставитьПеред, ПараметрыЭлементов.ПолеВвода, 
			Новый Структура("ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении"));
	ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорАренды",, "Объект.ДоговорАренды",,	
			ВставитьПеред.Родитель, ВставитьПеред, ПараметрыЭлементов.ПолеВвода, 
			Новый Структура("ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении"));
						
	ПолеДоговорЗайма = ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорЗаймаСотруднику",, "Объект.ДоговорЗаймаСотруднику",,	
		Элементы.ГруппаШапкаПраво, , ПараметрыЭлементов.ПолеВвода, 
			Новый Структура("ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении"));
			
	МассивСвязей = Новый Массив;		
	СвязьПараметровВыбора = Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация", 
		РежимИзмененияСвязанногоЗначения.Очищать); 		
	МассивСвязей.Добавить(СвязьПараметровВыбора);
	
	СвязьПараметровВыбора = Новый СвязьПараметраВыбора("Отбор.ФизическоеЛицо", "Объект.ПодотчетноеЛицо", 
		РежимИзмененияСвязанногоЗначения.Очищать); 		
	МассивСвязей.Добавить(СвязьПараметровВыбора);

	ПолеДоговорЗайма.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	#КонецОбласти 
		
	// ЦеннаяБумага
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦеннаяБумага",, "Объект.ЦеннаяБумага",,
			Элементы.ГруппаШапкаПраво, , ПараметрыЭлементов.ПолеВвода, ДействиеПриИзменении);
	
	// 
	ГруппаШапкаЛево = Элементы.ГруппаШапкаЛево;
	Куда = Неопределено;
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ДокументПланирования", НСтр("ru = 'Источник лимитов'"), 
		"Объект.ДокументПланирования",,	ГруппаШапкаЛево, Куда, 
		ПараметрыЭлементов.ПолеВвода, ФормыУХ.ПриИзменении("Подключаемый_ДокументПланированияПриИзменении"));
	Элемент.ПодсказкаВвода = НСтр("ru = '<Бюджет ЦФО>'");
	
	//
	ПараметрыВалютаОплаты = Новый Структура;
	ПараметрыВалютаОплаты.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыВалютаОплаты.Вставить("РастягиватьПоГоризонтали",	Ложь);
	ПараметрыВалютаОплаты.Вставить("Ширина",					8);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВалютаОплаты", НСтр("ru='Платеж в'"), "Объект.ВалютаОплаты",,
		Элементы.ГруппаСумма, Элементы.СверхЛимита, ПараметрыВалютаОплаты,ФормыУХ.ПриИзменении("Подключаемый_ВалютаОплатыПриИзменении"));
	
	//
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ВидОперацииУХ", НСтр("ru = 'Вид операции'"),
		"Объект.ВидОперацииУХ",, Элементы.ГруппаШапкаПраво, Элементы.ХозяйственнаяОперация,
		ПараметрыЭлементов.ПолеВвода);
	Элемент.ЦветФона = ЦветаСтиля.ФонУправляющегоПоля;	
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииВидаОперацииУХ");
	
	//ПриоритетЗаявки
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ПриоритетЗаявки", , "Объект.Приоритет",,
		Элементы.ГруппаСтатусПриоритетПерваяСтрока, , ПараметрыЭлементов.ПолеВвода28);
	Элемент.ПодсказкаВвода = НСтр("ru = '<не указан>'");
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	// ВнеМаршрута
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ВнеМаршрута", , "Объект.ВнеМаршрута", ВидПоляФормы.ПолеФлажка,
		Элементы.ГруппаСтатусПриоритетПерваяСтрока, , ПараметрыЭлементов.ПолеФлажка);

	//
	Элементы.КассаПолучатель.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	Элементы.Касса.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	// Настройка полей формы
	ОбщиеДоработкиФормыЗаявки(Форма, Элементы, ПараметрыЭлементов);
	ДоработатьКонвертациюВалюты(Форма, Элементы, ПараметрыЭлементов);
	//СоздатьЭлементыПлатежнойПозиции(Форма, ПараметрыЭлементов);
	
	// Элементы, при изменении которых производится контроль лимита
	ЭлементыКонтроляЛимитов = Новый Массив;
	ЭлементыКонтроляЛимитов.Добавить(Элементы.ЦФО);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.Проект);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.СуммаДокумента);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.Валюта);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.ЖелательнаяДатаПлатежа);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаАналитика1);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаАналитика2);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаАналитика3);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаАналитика4);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаАналитика5);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаПлатежаАналитика6);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияАналитика1);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияАналитика2);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияАналитика3);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияАналитика4);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияАналитика5);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.РасшифровкаБезРазбиенияАналитика6);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.ДокументПланирования);
	
	ЭлементыКонтроляЛимитов.Добавить(Элементы.СтатьяДвиженияДенежныхСредств);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка1);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка2);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка3);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка4);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка5);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка6);
	
	Для Каждого Элемент Из ЭлементыКонтроляЛимитов Цикл
		ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Элемент, 	"ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	КонецЦикла;
	
	// Сумма взаиморасчетов заполняется автоматически по сумме
	Элемент = Элементы["РасшифровкаБезРазбиенияСуммаВзаиморасчетов"];
	Элемент.Заголовок = "Сумма";
	Элемент.ОтображениеПредупрежденияПриРедактировании = ОтображениеПредупрежденияПриРедактировании.НеОтображать;	
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Элемент, "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	
	Элемент = Элементы["РасшифровкаПлатежаСумма"];
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Элемент, "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	
	// Скорректируем декорацию Декорация1 под ЕРПУХ
	Элемент = Элементы["Декорация1"];
	Элемент.Ширина = 10;
	Элемент.МаксимальнаяШирина = 10;
	
	// Элемент структуры задолженности
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "РасшифровкаПлатежаЭлементСтруктурыЗадолженности",, 
		"Объект.РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности",, Элементы.РасшифровкаПлатежа, 
		Элементы.РасшифровкаПлатежаТипСуммыКредитаДепозита,,
		Новый Структура("ПриИзменении", "Подключаемый_РасшифровкаПлатежаЭлементСтруктурыЗадолженностиПриИзменении"));
	
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "РасшифровкаБезРазбиенияЭлементСтруктурыЗадолженности",, 
		"Объект.РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности",, Элементы.РасшифровкаБезРазбиения, 
		Элементы.РасшифровкаБезРазбиенияТипСуммыКредитаДепозита, ПараметрыЭлементов.ПолеВвода,
		Новый Структура("ПриИзменении", "Подключаемый_РасшифровкаПлатежаЭлементСтруктурыЗадолженностиПриИзменении"));
		
	УстановитьПараметрыЭлементовСтруктурыЗадолженности(Форма);
	
	// Хозоперация ERP заменена на операцию УХ.
	Элементы.ХозяйственнаяОперация.Видимость = Ложь;
	
	// Добавить обработчик изменения для таблицыФормы ЛицевыеСчетаСотрудников
	Элементы.ЛицевыеСчетаСотрудников.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииТаблицыЛицевыхСчетовСотрудников");
	
	// Добавить обработчик изменения для таблицыФормы расшифровка платежа
	Элементы.РасшифровкаПлатежа.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	Элементы.РасшифровкаПлатежа.УстановитьДействие("ПриОкончанииРедактирования", "Подключаемый_ПриОкончанииРедактирования");
		
КонецПроцедуры

Процедура ПодготовитьФормуНаСервере(Форма)
	
	Объект = Форма.Объект;
	
	ПлатежныеПозиции.ИнициализироватьПлатежнуюПозициюЗаявки(Форма);
	ОбновитьОтборПоФункциональнымНаправлениям(Форма);
	ОперативноеПланированиеФормыУХ.ОпределитьПриоритетОперации(Форма, "ПриоритетЗаявки", Форма.РеквизитыДокумента);
	ОперативноеПланированиеФормыУХ.ОпределитьНаличиеПредопределенныхРолей(Форма);
	УстановитьУсловноеОформлениеФормыДокумента(Форма);
	УстановитьЗначенияОтбораСтатей(Форма);
	УстановитьПараметрыВыбораКонтрагента(Форма);
	УстановитьПараметрыВыбораДоговора(Форма);
	
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
	
КонецПроцедуры

Процедура УстановитьЗначенияОтбораСтатей(Форма)
	ОперативноеПланированиеФормыУХКлиентСервер.УстановитьЗначенияОтбораСтатей(Форма.ЗначенияВыбораПриходРасход, Форма.РеквизитыДокумента.ПриходРасход.Значение);
КонецПроцедуры

Процедура УправлениеФормой(Форма)
	Форма.УправлениеФормой();
КонецПроцедуры

Процедура УстановитьПараметрыВыбораКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыВыбораКонтрагента = Новый Массив;
	
	Если Объект.ЭтоВнутригрупповоеПеремещение Тогда
		
		ПараметрыВыбораКонтрагента.Добавить(Новый ПараметрВыбора("Отбор.ВидКонтрагентаДляВГО",ПредопределенноеЗначение("Перечисление.ВидыКонтрагентовДляВГО.ВнутренниеКонтрагенты")));
		
	КонецЕсли;
	
	Элементы.Контрагент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораКонтрагента);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеФормыДокумента(Форма)
	
	// НЕ ИСПОЛЬЗУЕТСЯ, т.к. управление условным оформлением производится в модуле управления аналитиками статьей бюджетов и есть опсность снести эти настройки
	//УсловноеОформление.Элементы.Очистить();
	
	//// НЕ ИСПОЛЬЗУЕТСЯ, т.к. устанавливается в модуле управления аналитиками статьей бюджетов
	//ОперативноеПланированиеФормыУХ.УстановитьУсловноеОформлениеДополнительныхАналитик(ЭтотОбъект, Элементы.ТаблицаДвижений, Объект.ВидБюджета);

КонецПроцедуры

Процедура ОбновитьОтборПоФункциональнымНаправлениям(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.РасшифровкаБезРазбиенияСтатьяДвиженияДенежныхСредств);
	МассивЭлементов.Добавить(Элементы.РасшифровкаПлатежаСтатьяДвиженияДенежныхСредств);
	МассивЭлементов.Добавить(Элементы.СтатьяДвиженияДенежныхСредств);
	
	ОперативноеПланированиеФормыУХКлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Объект.ЦФО, МассивЭлементов)
	
КонецПроцедуры

Процедура УстановитьПараметрыВыбораДоговора(Форма)
	
	Объект = Форма.Объект;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидОперацииУХ") тогда
		Если Не ЗначениеЗаполнено(Объект.ВидОперацииУХ) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	//
	ДопустимыеВиды = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
		Объект.ВидОперацииУХ, 
		"ДопустимыеВидыДоговоров").Выгрузить().ВыгрузитьКолонку("ВидДоговора");
	Отбор = "Отбор.ВидДоговораУХ";
	Если ДопустимыеВиды.Количество() > 0 Тогда
		// Добавить параметры выбора
		ФормыУХ.ДобавитьПараметрВыбора(Элементы.Договор, Отбор, Новый ФиксированныйМассив(ДопустимыеВиды));
	Иначе
		// Удалить параметры выбора
		ФормыУХ.УдалитьПараметрВыбора(Элементы.Договор, Отбор);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПараметрыЭлементовСтруктурыЗадолженности(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	ПутьКРеквизитуДоговора = ПутьКРеквизитуДоговора(Объект);	
	
	МассивСвязей = Новый Массив;
	МассивПараметровВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(ПутьКРеквизитуДоговора) Тогда
		МассивСвязей.Добавить(Новый СвязьПараметраВыбора("ДоговорКонтрагента", ПутьКРеквизитуДоговора, РежимИзмененияСвязанногоЗначения.НеИзменять));
	Иначе
		МассивПараметровВыбора.Добавить(Новый ПараметрВыбора("ДоговорКонтрагента", Неопределено));
	КонецЕсли;
	
	МассивСвязей.Добавить(Новый СвязьПараметраВыбора("Ссылка", "Объект.Ссылка"));
	
	Элементы.РасшифровкаПлатежаЭлементСтруктурыЗадолженности.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	Элементы.РасшифровкаПлатежаЭлементСтруктурыЗадолженности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);

	Элементы.РасшифровкаБезРазбиенияЭлементСтруктурыЗадолженности.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивСвязей);
	Элементы.РасшифровкаБезРазбиенияЭлементСтруктурыЗадолженности.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

Функция ПутьКРеквизитуДоговора(Объект) 
	
	МассивВсехРеквизитов = Новый Массив; МассивРеквизитовОперации = Новый Массив;
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, 
		МассивВсехРеквизитов, МассивРеквизитовОперации);
			
	Если МассивРеквизитовОперации.Найти("Договор") <> Неопределено Тогда
		Возврат "Объект.Договор";
	ИначеЕсли МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
		Возврат "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКредитаДепозита";
	ИначеЕсли МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорАренды") <> Неопределено Тогда
		Возврат "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорАренды";
	КонецЕсли;

	Возврат "";
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область ФормаСписка

Процедура ФормаСписка_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.Список.ПроизвольныйЗапрос = Истина;
	
	Форма.Список.ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка,
	|	Заявка.ПометкаУдаления КАК ПометкаУдаления,
	|	Заявка.Проведен КАК Проведен,
	|	Заявка.Номер КАК Номер,
	|	Заявка.Дата КАК Дата,
	|	Заявка.ВидОперацииУХ КАК ВидОперацииУХ,
	|	Заявка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Заявка.СуммаДокумента КАК СуммаДокумента,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.КтоЗаявил КАК КтоЗаявил,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостояний.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК Статус,
	|	Заявка.Приоритет КАК ПриоритетОплаты
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК РегистрСостояний
	|		ПО (РегистрСостояний.Объект = Заявка.Ссылка)";
	
	//
	ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "ФормаОплатыЗаявки",, "Список.ФормаОплатыЗаявки",,		
			Форма.Элементы.Статус.Родитель, Форма.Элементы.Статус);
	
	//
	ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "ВидОперацииУХ",, "Список.ВидОперацииУХ",,		
			Форма.Элементы.Список, Форма.Элементы.Статус);
	
КонецПроцедуры

#КонецОбласти 

#Область ФормаСпискаДокументов
	
Процедура ФормаСпискаДокументов_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	#Область ИзменениеЗапроса
		
	// Модификация запроса
	ТекстЗапроса = Форма.Список.ТекстЗапроса;
	
	//
	ТекстДляЗамены = "Заявка.Статус КАК Статус,";
	ТекстЗамены = "ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК Статус,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения) > 1
	|			ТОГДА ""<Различные состояния>""
	|		ИНАЧЕ МИНИМУМ(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения)
	|	КОНЕЦ КАК СостояниеИсполнения,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
	
	//ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Заявка.Статус КАК ", "ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК ");
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = Заявка.Ссылка)
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|	ПО (РазмещениеЗаявок.ЗаявкаНаОперацию = Заявка.Ссылка И РазмещениеЗаявок.ПриходРасход = Значение(Перечисление.ВидыДвиженийПриходРасход.Расход))
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|	ПО (СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования = РазмещениеЗаявок.ЗаявкаНаОперацию)
	|		И (СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции = РазмещениеЗаявок.ИдентификаторПозиции)";
	
	//
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Заявка.ПриоритетОплаты КАК ПриоритетОплаты", "Заявка.Приоритет КАК ПриоритетОплаты");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Заявка.ПриоритетОплаты", "Заявка.Приоритет");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ПриоритетыОплаты", "Справочник.ПриоритетыПлатежей");
	
	
	ТекстЗамены = "КАК ХозяйственнаяОперация,";
	
	ТекстДляЗамены = ТекстЗамены + Символы.ПС + "Заявка.ВидОперацииУХ КАК ВидОперацииУХ,";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, ТекстДляЗамены);
	
	// Приоритет
	ТекстЗамены = "В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					Приоритеты.Ссылка КАК Приоритет
	|				ИЗ
	|					Справочник.ПриоритетыПлатежей КАК Приоритеты
	|				УПОРЯДОЧИТЬ ПО
	|					Приоритеты.РеквизитДопУпорядочивания)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстЗамены, "= ЗНАЧЕНИЕ(Справочник.ПриоритетыПлатежей.Неотложно)");
	
	// Форма оплаты
	ТекстДляЗамены = "Заявка.Ссылка КАК Ссылка,";
	ТекстЗамены = "Заявка.Ссылка КАК Ссылка,
				|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
	
	//
	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО 
	|	Заявка.Ссылка,
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта,
	|	ДенежныеСредства.СуммаОстаток,
	|	НаличиеПрисоединенныхФайлов.ЕстьФайлы,
	|	СостоянияЭД.СостояниеЭДО,
	|	СостоянияЭД.ПредставлениеСостояния";
	
	//
	Форма.Список.ТекстЗапроса = ТекстЗапроса;
	
	#КонецОбласти
	
	Если НЕ ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		СоздатьЭлементыФормыСпискаДокументов(Форма);
	КонецЕсли;
	
	Форма.Элементы.Статус.Заголовок = "";
	
	Форма.Элементы.ГруппаУстановитьСтатус.Видимость = Ложь;
	
	// Команды установки статуса ERP для заявки отключены
	Форма.Элементы.ГруппаФункцииКонтекстноеМеню.Видимость = Ложь;
	
	Форма.Элементы.ЗаявкаОплачена.Видимость = Ложь;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементыФормыСпискаДокументов(Форма) 
	
	Элементы = Форма.Элементы;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
	//
	ПараметрыПоляВвода = Новый Структура;
	ПараметрыПоляВвода.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыПоляВвода.Вставить("АвтоМаксимальнаяШирина",	Ложь);
	ПараметрыПоляВвода.Вставить("МаксимальнаяШирина",		28);
		
	// Форма оплаты заявки
	ФормыУХ.СоздатьПолеФормы(Элементы, "ФормаОплатыЗаявки", НСтр("ru = 'Форма оплаты'"), "Список.ФормаОплатыЗаявки", , Элементы.Статус.Родитель, Элементы.Статус);
	
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидОперации", НСтр("ru = 'Вид операции'"), "Список.ВидОперацииУХ", , Элементы.Статус.Родитель, Элементы.ХозяйственнаяОперация);
	
	#Область Приоритет
		
	//
	ГруппаПриоритет = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаПриоритет", , ВидГруппыФормы.ГруппаКолонок, Элементы.Статус.Родитель, Элементы.Статус);
	ГруппаПриоритет.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	//
	Элементы.Приоритет.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элементы.Переместить(Элементы.Приоритет, Элементы.ГруппаПриоритет);
	
	//
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПриоритетТекст", НСтр("ru = 'Приоритет'"), "Список.ПриоритетОплаты", , ГруппаПриоритет);
	
	#КонецОбласти 
	
	// Состояние исполнения
	ФормыУХ.СоздатьПолеФормы(Элементы, "СостояниеИсполнения", НСтр("ru = 'Состояние исполнения'"), "Список.СостояниеИсполнения", , Элементы.ДатаПлатежа.Родитель, Элементы.ДатаПлатежа);
	
	// Отключим выпадающий список с видами операций. Их слишком много.
	Элементы.Переместить(Элементы.Создать, Элементы.СписокКоманднаяПанель, Элементы.ГруппаСоздать);
	Элементы.ГруппаСоздать.Видимость = Ложь;
	Элементы.Создать.Заголовок = "";
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти

#КонецОбласти 

#Область МодульОбъекта

Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	Объект.БанковскийСчет = Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	Объект.Касса = Справочники.Кассы.ПустаяСсылка();
	ЗаявкиНаОперации.ПриКопировании(Объект, ОбъектКопирования);
КонецПроцедуры

Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	ЗаявкиНаОперации.ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения);
	ЗаполнитьДоговорКонтрагента(Объект); // Заполнить реквизит ДоговорКонтрагента для журнала ДокументыБюджетирования
	ЗаполнитьТипСуммыКредитаДепозита(Объект);
КонецПроцедуры

Процедура ПриЗаписи(Объект, Отказ) Экспорт
	ЗаявкиНаОперации.ПриЗаписи(Объект, Отказ);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	ЗаявкиНаОперации.ОбработкаУдаленияПроведения(Объект, Отказ);
КонецПроцедуры

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		Объект.ХозяйственнаяОперация = Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств.Реквизиты.ХозяйственнаяОперация.ЗначениеЗаполнения;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) И Не ЗначениеЗаполнено(Объект.ВидОперацииУХ) Тогда
		Объект.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ВидОперацииУХПоХозяйственнойОперации(Объект.ХозяйственнаяОперация);
	КонецЕсли;
	
	// Заявка оформляется только в валюте взаиморасчетов
	Объект.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов;
	
	#Область УХ_Внедрение
	//
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
		
	ЗаявкиНаОперации.ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	//
	ДанныеЗаказаПоставщика = Неопределено;
	ОчиститьДокОснованиеПослеЗаполнения = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ОперативныйПлан") Тогда
		
		Объект.ДокументПланирования = ДанныеЗаполнения;
	
		//
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПланирования, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов Тогда
			ОчиститьДокОснованиеПослеЗаполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		Объект.ДокументПланирования = ДанныеЗаполнения;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ОМ.ЗаполнитьРеквизитыШапкиЗаявки(Объект, ДанныеЗаполнения, РеквизитыЗаявки);
		
		Если ДанныеЗаполнения.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
			Объект.ДополнительныеСвойства.Вставить("БанковскийСчетКасса", ДанныеЗаполнения.БанковскийСчет);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
		ЗаполнитьПоДокументуПланирования(Объект, Объект.ДокументПланирования);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Договор) Тогда
		ЗаполнитьПоДоговоруКонтрагента(Объект, Объект.Договор);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДоговорКредитаДепозита" )
		И ЗначениеЗаполнено(Объект.ДоговорКредитаДепозита) Тогда
		
		ЗаполнитьПоДоговоруКредитаДепозита(Объект, Объект.ДоговорКредитаДепозита);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ВидОперацииУХ) И НЕ ЗначениеЗаполнено(Объект.ХозяйственнаяОперация) Тогда
		
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("ХозяйственнаяОперация", "ВидОперацииДДСБезналичныйРасчет");
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ВидОперацииУХ, СтруктураРеквизитов);
		ЗаполнитьЗначенияСвойств(Объект, Реквизиты); 
		
	КонецЕсли;
	
	// Определим незаполненные реквизиты значениями по умолчанию.
	Если Не ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ПланируемаяДатаОперации)) Тогда
		ПроизводственныйКалендарь = КалендарныеГрафикиУХВызовСервераПовтИсп.ОсновнойПроизводственныйКалендарь();
		ОМ.УстановитьРеквизитЗаявки(
			Объект, 
			РеквизитыЗаявки.ПланируемаяДатаОперации, 
			КалендарныеГрафикиУХ.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ТекущаяДатаСеанса(), 1));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента, ОбщегоНазначенияПовтИспУХ.ПолучитьВалютуУправленческогоУчета());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты, ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Организация)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.Организация, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ЦФО)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ЦФО, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Проект)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.Проект, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты, Перечисления.ФормыОплаты.Безналичная);
		Объект.ФормаОплатыНаличная = Ложь;
		Объект.ФормаОплатыБезналичная = Истина;
		Объект.ФормаОплатыПлатежнаяКарта = Ложь;
		
		Если ДанныеЗаполнения = неопределено Тогда
			ДанныеЗаполнения = Новый Структура;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",			Объект.ФормаОплатыЗаявки);
			ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",		Объект.ФормаОплатыНаличная);
			ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная",		Объект.ФормаОплатыБезналичная);
			ДанныеЗаполнения.Вставить("ФормаОплатыПлатежнаяКарта",	Объект.ФормаОплатыПлатежнаяКарта);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним табличную часть "Движения операции".
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  
		И (НЕ ДанныеЗаполнения.Свойство("РасшифровкаПлатежаЗаполнена") ИЛИ ДанныеЗаполнения.РасшифровкаПлатежаЗаполнена = ЛОЖЬ) Тогда
		Если РеквизитыЗаявки.СтатьяБюджета.РазмещенВТЧ Тогда
			ИмяТЧ = РеквизитыЗаявки.СтатьяБюджета.ИмяТЧ;
			
			Если Объект[ИмяТЧ].Количество() = 0 ИЛИ ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
				// Если расшифровка платежа не заполнена ранее или есть документ планирования, то 
				
				Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
				
				Объект[ИмяТЧ].Очистить();
				
				Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
					И ДанныеЗаполнения.Свойство("СтатьяБюджета") Тогда
					
					ЗаполнитьТабличнуюЧастьПоСтруктуре(Объект, ИмяТЧ, ДанныеЗаполнения)
					
				ИначеЕсли ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
					ЗаполнитьТабличнуюЧастьПоДокументуПланирования(Объект, ИмяТЧ);
				КонецЕсли;
				
				Если Не Объект[ИмяТЧ].Количество() Тогда
					Объект[ИмяТЧ].Добавить();
				КонецЕсли;
				
				СтавкаНДСПоУмолчанию = ПолучитьСтавкуНДСПоДоговору(Объект.Организация, Объект.Договор);
				СтатьяБюджета = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(Объект.ВидОперацииУХ);
				
				Для каждого Строка ИЗ Объект[ИмяТЧ] Цикл 
					
					Если ДанныеЗаполнения.Свойство("ДоговорКредитаДепозита") 
						И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКредитаДепозита)
						И НЕ ЗначениеЗаполнено(Строка.ДоговорКредитаДепозита) Тогда
						
						Строка.ДоговорКредитаДепозита = ДанныеЗаполнения.ДоговорКредитаДепозита;
					КонецЕсли;
					
					Если ДанныеЗаполнения.Свойство("ТипСуммыКредитаДепозита") 
						И ЗначениеЗаполнено(ДанныеЗаполнения.ТипСуммыКредитаДепозита)
						И НЕ ЗначениеЗаполнено(Строка.ТипСуммыКредитаДепозита) Тогда
						
						Строка.ТипСуммыКредитаДепозита = ДанныеЗаполнения.ТипСуммыКредитаДепозита;
					КонецЕсли;
	
					Если Не ЗначениеЗаполнено(Строка.СтавкаНДС) Тогда
						Строка.СтавкаНДС = СтавкаНДСПоУмолчанию;
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
						Строка.СтатьяДвиженияДенежныхСредств = СтатьяБюджета;
					КонецЕсли;
					
					Строка.Партнер = Партнер;
					
					Если ДанныеЗаполнения.Свойство("ЭлементСтруктурыЗадолженности") Тогда
						Строка.ЭлементСтруктурыЗадолженности = ДанныеЗаполнения.ЭлементСтруктурыЗадолженности;
					КонецЕсли;
					
				КонецЦикла;
								
				Если Объект.СуммаДокумента <> 0 Тогда
					КоличествоСтрок = Объект[ИмяТЧ].Количество();
					СуммаВСтроке = Объект.СуммаДокумента / КоличествоСтрок;
					СуммаВПоследнейСтроке = Объект.СуммаДокумента - СуммаВСтроке *(КоличествоСтрок - 1);
					Для Сч = 0 По (КоличествоСтрок - 2) Цикл
						Объект[ИмяТЧ][Сч].Сумма = СуммаВСтроке;
						ОперативноеПланированиеФормыУХКлиентСервер.ПересчитатьСуммуНДС(Объект[ИмяТЧ][Сч]);
					КонецЦикла;
					Объект[ИмяТЧ][КоличествоСтрок - 1].Сумма = СуммаВПоследнейСтроке;
					ОперативноеПланированиеФормыУХКлиентСервер.ПересчитатьСуммуНДС(Объект[ИмяТЧ][Сч]);
					
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Объект.Договор) Тогда
					ЗаполнитьОбъектРасчетовПриИзмененииДоговора(Объект[ИмяТЧ], Объект.Договор);
				КонецЕсли;
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОчиститьДокОснованиеПослеЗаполнения Тогда
		ДокументПланирования = Неопределено;
	КонецЕсли;
	
	Если ВидыОперацийУХВызовСервераПовтИсп.ЭтоПеремещениеВнутриОрганизации(Объект.ВидОперацииУХ) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредств) Тогда
			 СтатьяБюджета = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(Объект.ВидОперацииУХ);
			 Объект.СтатьяДвиженияДенежныхСредств = СтатьяБюджета;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.СтатьяДвиженияДенежныхСредствЗачисление) Тогда
			СтатьяБюджетаЗачисления = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(
				ВидыОперацийУХВызовСервераПовтИсп.ВстречныйВидОперацииУХ(Объект.ВидОперацииУХ));
			Объект.СтатьяДвиженияДенежныхСредствЗачисление = СтатьяБюджетаЗачисления;	
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти 
	
	// Заполним контрагент-плательщик
	Если ЗначениеЗаполнено(Объект.Организация) И НЕ ЗначениеЗаполнено(Объект.КонтрагентПлательщик) Тогда
		Объект.КонтрагентПлательщик = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить("ПриоритетОплаты");
	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ТипСуммыКредитаДепозита");
	Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа") <> Неопределено Тогда	
		МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ФормаОплатыЗаявки");
	
	ЗаявкиНаОперации.ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

// Процедура дозаполнения по договору
Процедура ЗаполнитьПоДоговору(Объект, Знач ДокументОснование, ДанныеЗаполнения) Экспорт
	
	//
	РеквизитыДоговора = Новый Структура;
	Для Каждого КлючЗначение Из ВсеРеквизитыЗаполненияПоДоговору() Цикл
		Если Не ДанныеЗаполнения.Свойство(КлючЗначение.Ключ) Тогда
			РеквизитыДоговора.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	//
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		СтруктураРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДанныеЗаполнения.Договор, РеквизитыДоговора);
		
		Для каждого КлючЗначение Из СтруктураРеквизитовДоговора Цикл
			ДанныеЗаполнения.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
	ИмяТЧ = "РасшифровкаПлатежа";
	ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента(Объект, ИмяТЧ, ДанныеЗаполнения);
	
КонецПроцедуры

Функция ОписаниеОбъектовРасчетов() Экспорт
	
	Результат = неопределено;
	
	//ПоставщикиПокупатели
	ДобавитьОперацию(Результат, "ПоставщикиПокупатели", Справочники.ВидыОперацийУХ.ОплатаПоставщику);
	ДобавитьОперацию(Результат, "ПоставщикиПокупатели", Справочники.ВидыОперацийУХ.ВозвратПокупателю);
	ДобавитьОперацию(Результат, "ПоставщикиПокупатели", Справочники.ВидыОперацийУХ.ПеречислениеТаможне);
	
	//ДругиеОрганизации
	ДобавитьОперацию(Результат, "ДругиеОрганизации",	Справочники.ВидыОперацийУХ.ОплатаДенежныхСредствВДругуюОрганизацию);
	ДобавитьОперацию(Результат, "ДругиеОрганизации",	Справочники.ВидыОперацийУХ.ВозвратДенежныхСредствВДругуюОрганизацию);
	
	//ДепозитыКредитыЗаймы
	ДобавитьОперацию(Результат, "ДепозитыКредитыЗаймы", Справочники.ВидыОперацийУХ.РазмещениеСредствНаДепозите);
	ДобавитьОперацию(Результат, "ДепозитыКредитыЗаймы", Справочники.ВидыОперацийУХ.ВыдачаЗаймаКонтрагенту);
	ДобавитьОперацию(Результат, "ДепозитыКредитыЗаймы", Справочники.ВидыОперацийУХ.ПлатежПоКредитуИлиЗайму);
	
	//Лизинг
	ДобавитьОперацию(Результат, "Лизинг",				Справочники.ВидыОперацийУХ.ОплатаАрендодателю);
	
	//ЦБ
	ДобавитьОперацию(Результат, "ЦБ",					Справочники.ВидыОперацийУХ.ПлатежиПоЦеннымБумагам);
	
	////ЗаймыРаботникам
	//ДобавитьОперацию(Результат, "ЗаймыРаботникам",	Справочники.ВидыОперацийУХ.ВыдачаЗаймаРаботнику);
	
	Возврат Результат;
	
КонецФункции

Функция ДобавитьОперацию(Результат, ОбъектРасчетов, ВидОперацииУХ)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Результат = Новый Структура;
	КонецЕсли;
	
	Если НЕ Результат.Свойство("ВидыОперацийУХ") Тогда
		Результат.Вставить("ВидыОперацийУХ", Новый Соответствие);
	КонецЕсли;
	
	Если НЕ Результат.Свойство("ОбъектыРасчетов") Тогда
		Результат.Вставить("ОбъектыРасчетов", Новый Соответствие);
	КонецЕсли;

	Результат.ВидыОперацийУХ.Вставить(ВидОперацииУХ, ОбъектРасчетов);
	
	
	Если Результат.ОбъектыРасчетов[ОбъектРасчетов] = неопределено Тогда
		Результат.ОбъектыРасчетов.Вставить(ОбъектРасчетов, Новый СписокЗначений);
	КонецЕсли;
	
	Результат.ОбъектыРасчетов[ОбъектРасчетов].Добавить(ВидОперацииУХ);
	
	Возврат Результат;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции

// Функция возвращает все реквизиты для заполнения заявки на основании договора
Функция ВсеРеквизитыЗаполненияПоДоговору()
	
	ВсеРеквизиты = Новый Структура;
	ВсеРеквизиты.Вставить("Контрагент");
	ВсеРеквизиты.Вставить("Организация");
	ВсеРеквизиты.Вставить("ЦФО", "ОсновнойЦФО");
	ВсеРеквизиты.Вставить("Проект", "ОсновнойПроект");
	ВсеРеквизиты.Вставить("БанковскийСчетКонтрагента", "БанковскийСчетКонтрагента");
	ВсеРеквизиты.Вставить("БанковскийСчет", "БанковскийСчет");
	ВсеРеквизиты.Вставить("ИдентификаторПлатежа");
	ВсеРеквизиты.Вставить("ЗапретПлатежаВПрочихВалютах");
	ВсеРеквизиты.Вставить("СпособОпределенияКурсаПлатежа");
	ВсеРеквизиты.Вставить("ДатаФиксацииКурсаПлатежа");
	ВсеРеквизиты.Вставить("СдвигДатыФиксацииКурсаПлатежа");
	ВсеРеквизиты.Вставить("КурсПлатежа");
	ВсеРеквизиты.Вставить("КратностьПлатежа");
	ВсеРеквизиты.Вставить("ФиксированныйСчетОрганизации");
	ВсеРеквизиты.Вставить("ФиксированныйСчетКонтрагента");
	ВсеРеквизиты.Вставить("ГосударственныйКонтракт");
	ВсеРеквизиты.Вставить("КурсПлатежаНеБолее");
	ВсеРеквизиты.Вставить("КурсПлатежаНеМенее");
	ВсеРеквизиты.Вставить("КурсПлатежаНеБолееВВалютеОплаты");
	ВсеРеквизиты.Вставить("КурсПлатежаНеМенееВВалютеОплаты");
	ВсеРеквизиты.Вставить("БезакцептноеСписание", "ВерсияСоглашения.БезакцептноеСписание");
	ВсеРеквизиты.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств");
	ВсеРеквизиты.Вставить("Аналитика1", "АналитикаБДДС1");
	ВсеРеквизиты.Вставить("Аналитика2", "АналитикаБДДС2");
	ВсеРеквизиты.Вставить("Аналитика3", "АналитикаБДДС3");
	
	Возврат ВсеРеквизиты;
	
КонецФункции

Процедура ЗаполнитьПоДокументуПланирования(Объект, Знач ДанныеЗаполнения)
	
	ЗаявкиНаОперации.ЗаполнитьЗаявкуПоДокументуПланирования(Объект, ДанныеЗаполнения);
	
КонецПроцедуры // ЗаполнитьПоДокументуПланирования() 

Процедура ЗаполнитьТабличнуюЧастьПоСтруктуре(Объект, ИмяТЧ, Знач ДанныеЗаполнения)
	
	ИмяТЧ = "РасшифровкаПлатежа";
	
	НоваяСтрока = Объект[ИмяТЧ].Добавить();
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяБюджета;		
	
	Для Сч = 1 По 3 Цикл
		Если ДанныеЗаполнения.Свойство("Аналитика" + Сч) Тогда
			НоваяСтрока["Аналитика" + Сч] = ДанныеЗаполнения["Аналитика" + Сч];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДокументуПланирования(Объект, ИмяТЧ)
	
	РасшифровкаИсходная = Объект.ДокументПланирования.ДвиженияОперации.Выгрузить();
	
	РасшифровкаИсходная.Свернуть("СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3","Сумма, Количество");
	
	РасшифровкаИсходная.ЗаполнитьЗначения(0, "Сумма,Количество");
	
	РасшифровкаИсходная.Колонки.СтатьяБюджета.Имя = "СтатьяДвиженияДенежныхСредств";
	
	Объект[ИмяТЧ].Загрузить(РасшифровкаИсходная);
	
КонецПроцедуры

Процедура ЗаполнитьТабличнуюЧастьПоДоговоруКонтрагента(Объект, ИмяТЧ, Знач ДанныеЗаполнения = Неопределено) Экспорт
	
	Если Не Объект[ИмяТЧ].Количество() Тогда
		Объект[ИмяТЧ].Добавить();
	КонецЕсли;
	
	//
	Если ДанныеЗаполнения = Неопределено Тогда
		СтруктураРеквизитов = Новый Структура;
		СтруктураРеквизитов.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств");
		СтруктураРеквизитов.Вставить("Аналитика1", "АналитикаБДДС1");
		СтруктураРеквизитов.Вставить("Аналитика2", "АналитикаБДДС2");
		СтруктураРеквизитов.Вставить("Аналитика3", "АналитикаБДДС3");
		
		ДанныеЗаполнения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Договор, СтруктураРеквизитов);
	Конецесли;
	
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеЗаполнения, "СтатьяДвиженияДенежныхСредств, Аналитика1, Аналитика2, Аналитика3");
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКонтрагента(Объект, Знач Договор)
	
	//
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	РеквизитыДоговора = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		РеквизитыДоговора.Вставить("Контрагент", "Владелец");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыДоговора.Вставить("Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ЦФО) Тогда
		РеквизитыДоговора.Вставить("ЦФО", "ОсновнойЦФО");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Проект) Тогда
		РеквизитыДоговора.Вставить("Проект", "ОсновнойПроект");
	КонецЕсли;
	
	РеквизитыДоговора.Вставить("ВалютаДокумента", "ВалютаВзаиморасчетов");
	РеквизитыДоговора.Вставить("ВалютаОплаты", "ОсновнаяВалютаПлатежей");
	
	Если Не ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.БанковскийСчетКонтрагента)) Тогда
		РеквизитыДоговора.Вставить(РеквизитыЗаявки.БанковскийСчетКонтрагента.ИмяРеквизита, "БанковскийСчетКонтрагента");
	КонецЕсли;
	
	РеквизитыДоговора.Вставить("ИдентификаторПлатежа");
	//РеквизитыДоговора.Вставить("РасчетыВУсловныхЕдиницахВалюта");
	РеквизитыДоговора.Вставить("ЗапретПлатежаВПрочихВалютах");
	РеквизитыДоговора.Вставить("СпособОпределенияКурсаПлатежа");
	РеквизитыДоговора.Вставить("ДатаФиксацииКурсаПлатежа");
	РеквизитыДоговора.Вставить("СдвигДатыФиксацииКурсаПлатежа");
	РеквизитыДоговора.Вставить("КурсПлатежа");
	РеквизитыДоговора.Вставить("КратностьПлатежа");
	РеквизитыДоговора.Вставить("ФиксированныйСчетОрганизации");
	РеквизитыДоговора.Вставить("ФиксированныйСчетКонтрагента");
	РеквизитыДоговора.Вставить("ГосударственныйКонтракт");
	РеквизитыДоговора.Вставить("КурсПлатежаНеБолее");
	РеквизитыДоговора.Вставить("КурсПлатежаНеМенее");
	РеквизитыДоговора.Вставить("КурсПлатежаНеБолееВВалютеОплаты");
	РеквизитыДоговора.Вставить("КурсПлатежаНеМенееВВалютеОплаты");
	РеквизитыДоговора.Вставить("БезакцептноеСписание", "ВерсияСоглашения.БезакцептноеСписание");
	
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		СтруктураРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, РеквизитыДоговора);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитовДоговора);
		Объект.ПлатежВУсловныхЕдиницах = СтруктураРеквизитовДоговора.ВалютаДокумента <> СтруктураРеквизитовДоговора.ВалютаОплаты;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоДоговоруКредитаДепозита(Объект, Знач Договор)
	
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	РеквизитыДоговора = Новый Структура;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		РеквизитыДоговора.Вставить("Контрагент");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		РеквизитыДоговора.Вставить("Организация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Валюта) Тогда
		РеквизитыДоговора.Вставить("Валюта", "ВалютаВзаиморасчетов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаОплаты) Тогда
		РеквизитыДоговора.Вставить("ВалютаОплаты", "ВалютаВзаиморасчетов");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКонтрагента) Тогда	
		РеквизитыДоговора.Вставить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.БанковскийСчет) Тогда
		РеквизитыДоговора.Вставить("БанковскийСчет");
	КонецЕсли;
			
	Если ЗначениеЗаполнено(РеквизитыДоговора) Тогда
		СтруктураРеквизитовДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, РеквизитыДоговора);
		ЗаполнитьЗначенияСвойств(Объект, СтруктураРеквизитовДоговора);
		Объект.ПлатежВУсловныхЕдиницах = Объект.Валюта <> Объект.ВалютаОплаты;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСтавкуНДСПоДоговору(Организация, Договор)
	
	ЭтоРасчетыСКлиентами = Ложь;
	ОбъектыРасчетов = Новый Массив;
	ОбъектыРасчетов.Добавить(Договор);
	
	ТаблицаНДС = ДенежныеСредстваСервер.РасшифровкаПлатежаНДС(Организация, Неопределено, Неопределено, ОбъектыРасчетов, ЭтоРасчетыСКлиентами);
	Если ТаблицаНДС.Количество() = 1 Тогда
		Возврат ТаблицаНДС[0].СтавкаНДС;
	Иначе
		Возврат Справочники.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Вызывается из ОМ.ВстраиваниеУХОжидаемоеПоступлениеДС
Процедура ЗаполнитьДоговорКонтрагента(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДоговорАренды) Тогда
		Объект.ДоговорКонтрагента = Объект.ДоговорАренды;
	ИначеЕсли ЗначениеЗаполнено(Объект.ДоговорКредитаДепозита) Тогда
		Объект.ДоговорКонтрагента = Объект.ДоговорКредитаДепозита;
	ИначеЕсли ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.ДоговорКонтрагента = Объект.Договор;
	Иначе
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьТипСуммыКредитаДепозита(Объект)
	
	МассивВсехРеквизитов = Новый Массив;
	МассивРеквизитовОперации = Новый Массив;
	
	Документы.ЗаявкаНаРасходованиеДенежныхСредств.ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(
		Объект, МассивВсехРеквизитов, МассивРеквизитовОперации);
		
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ТипСуммыКредитаДепозита") <> Неопределено Тогда
		
		Для каждого Строка ИЗ Объект.РасшифровкаПлатежа Цикл
			Строка.ТипСуммыКредитаДепозита = ЗаявкиНаОперацииКлиентСервер.ТипСуммыКредитаДепозитаПоЭлементуСтруктурыЗадолженности(
				Строка.ЭлементСтруктурыЗадолженности);
		КонецЦикла;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПлатежныеПозицииПоДаннымДокумента(Форма);
	Объект = Форма.Объект;
	НоваяПлатежнаяПозиция = ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
	Форма.ПлатежнаяПозиция.Загрузить(НоваяПлатежнаяПозиция);
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область МодульМенеджера

// Определяет список команд создания на основании.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	СозданиеНаОснованииОПК.ДобавитьКоманду_ЗаявкуНаОплату(КомандыСозданияНаОсновании);
	
	Документы.ЗакрытиеПлатежнойПозиции.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	Документы.ЗаявкаНаКорректировкуЛимитов.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Документы.КорректировкаЛимитов.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	
	НоваяКоманда = Документы.ОтражениеФактическихДанныхБюджетирования.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "ДенежныеСредстваВстраиваниеУХКлиент.СоздатьДокументОФДНаОснованииЗаявокНаРасходДС";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов, ФормаСписка, ФормаСпискаЗаявокКСогласованию";
		НоваяКоманда.МножественныйВыбор = Ложь;
	КонецЕсли;
	
	СозданиеНаОснованииОПК.ДобавитьКоманду_НачисленияОперацийМСФО(КомандыСозданияНаОсновании);	
	
КонецПроцедуры

// Добавляет команду создания документа по его метаданным.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//	 МетаданныеДокумента - 
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, МетаданныеДокумента) Экспорт
	
	Если ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = МетаданныеДокумента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МетаданныеДокумента);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Процедура инициализации данных документа для УХ
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено, Запрос, ТекстыЗапроса) Экспорт
	
	//ЗаполнитьПараметрыИнициализации
	СтруктураРеквизитов = Новый Структура("ДокументПланирования, ЦФО, Проект, Приоритет, Договор, БанковскийСчет, Касса, СписокФизЛиц");
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	
	Реквизиты.Вставить("ВидБюджета", Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	Реквизиты.Вставить("ПриходРасход", Перечисления.ВидыДвиженийПриходРасход.Расход);
	Реквизиты.Вставить("ДоговорКонтрагента", Реквизиты.Договор);
	
	Для Каждого КлючЗначение Из Реквизиты Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	//
	ЗаполненностьДоговораЗаявки = КонтрольЛимитовУХ.ПолучитьЗаполненностьДоговораЗаявки(
		Запрос.Параметры.Организация, Запрос.Параметры.Контрагент, Запрос.Параметры.Договор); 
	Запрос.УстановитьПараметр("ЗаполненностьДоговораЗаявки", ЗаполненностьДоговораЗаявки);
	
	Запрос.УстановитьПараметр(
		"ХозОперацииБезРасшифровки", Документы.ЗаявкаНаРасходованиеДенежныхСредств.ХозОперацииБезРасшифровки());
	
	// Если это выдача дс списку подотчетников, то это тоже операция без Расшифровки
	Если Запрос.Параметры.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику 
		И Запрос.Параметры.СписокФизЛиц = Истина Тогда
		Запрос.Параметры.ХозОперацииБезРасшифровки.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику);
	КонецЕсли;
	
	//
	ТекстЗапросаТаблицаОперативныйПлан(Запрос, ТекстыЗапроса, Регистры);
	
КонецПроцедуры

Функция ПолучитьЗапросПоИмени(ТекстыЗапроса, ИмяРегистра)
	
	Для Каждого ЭлементСписка Из ТекстыЗапроса Цикл
		Если Врег(ЭлементСписка.Представление) = ВРег(ИмяРегистра) Тогда
			Возврат ЭлементСписка;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ОтразитьОперативныйПланПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

Процедура ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные = Ложь) Экспорт
	
	ТаблицаЛимитов = КонтрольЛимитовУХ.ПолучитьТаблицуЛимитов(Запрос, Запрос.Параметры.Период);
	
	Таблицы.Вставить("ТаблицаЛимитыПоБюджетам", ТаблицаЛимитов);
	
КонецПроцедуры

// Заполняет таблицу реквизитов, зависимых от хозяйственной операции документа.
//
// Параметры:
//	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа
//	ПеречислениеВБюджет - Булево - Признак перечисления в бюджет
//	МассивВсехРеквизитов - Массив - Массив всех реквизитов, зависимых от хозяйственной операции
//	МассивРеквизитовОперации - Массив - Массив имен реквизитов, используемыз в выбранной хозяйственной операции.
//
Процедура ЗаполнитьИменаРеквизитовПоХозяйственнойОперации(Объект, МассивВсехРеквизитов, МассивРеквизитовОперации) Экспорт
	
	МассивВсехРеквизитов.Добавить("Аналитика1");
	МассивВсехРеквизитов.Добавить("Аналитика2");
	МассивВсехРеквизитов.Добавить("Аналитика3");
	МассивВсехРеквизитов.Добавить("Аналитика4");
	МассивВсехРеквизитов.Добавить("Аналитика5");
	МассивВсехРеквизитов.Добавить("Аналитика6");
	Если МассивРеквизитовОперации.Найти("СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("Аналитика1");
		МассивРеквизитовОперации.Добавить("Аналитика2");
		МассивРеквизитовОперации.Добавить("Аналитика3");
		МассивРеквизитовОперации.Добавить("Аналитика4");
		МассивРеквизитовОперации.Добавить("Аналитика5");
		МассивРеквизитовОперации.Добавить("Аналитика6");
	КонецЕсли;
	
	// Статья зачисления используется, если видно поле БанковскийСчетПолучатель или КассаПолучатель
	МассивВсехРеквизитов.Добавить("СтатьяДвиженияДенежныхСредствЗачисление");
	МассивВсехРеквизитов.Добавить("АналитикаЗачисление1");
	МассивВсехРеквизитов.Добавить("АналитикаЗачисление2");
	МассивВсехРеквизитов.Добавить("АналитикаЗачисление3");
	МассивВсехРеквизитов.Добавить("АналитикаЗачисление4");
	МассивВсехРеквизитов.Добавить("АналитикаЗачисление5");
	МассивВсехРеквизитов.Добавить("АналитикаЗачисление6");
	Если МассивРеквизитовОперации.Найти("БанковскийСчетПолучатель") <> Неопределено
		ИЛИ МассивРеквизитовОперации.Найти("КассаПолучатель") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("СтатьяДвиженияДенежныхСредствЗачисление");
		МассивРеквизитовОперации.Добавить("АналитикаЗачисление1");
		МассивРеквизитовОперации.Добавить("АналитикаЗачисление2");
		МассивРеквизитовОперации.Добавить("АналитикаЗачисление3");
		МассивРеквизитовОперации.Добавить("АналитикаЗачисление4");
		МассивРеквизитовОперации.Добавить("АналитикаЗачисление5");
		МассивРеквизитовОперации.Добавить("АналитикаЗачисление6");
	КонецЕсли;
	
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Аналитика1");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Аналитика2");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Аналитика3");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Аналитика4");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Аналитика5");
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.Аналитика6");
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Аналитика1");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Аналитика2");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Аналитика3");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Аналитика4");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Аналитика5");
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.Аналитика6");
	КонецЕсли;

	// Реквизиты договоров
	МассивВсехРеквизитов.Добавить("ДоговорКредитаДепозита");
	МассивВсехРеквизитов.Добавить("ДоговорАренды");
	МассивВсехРеквизитов.Добавить("ДоговорЗаймаСотруднику");
	
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорКредитаДепозита") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("ДоговорКредитаДепозита");
	КонецЕсли;
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорАренды") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("ДоговорАренды");
	КонецЕсли;
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа.ДоговорЗаймаСотруднику") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("ДоговорЗаймаСотруднику");
	КонецЕсли;
	
	// Элемент структуры задолженности
	МассивВсехРеквизитов.Добавить("РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности");
	Если МассивРеквизитовОперации.Найти("РасшифровкаПлатежа") <> Неопределено Тогда
		МассивРеквизитовОперации.Добавить("РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности")
	КонецЕсли;
	
КонецПроцедуры

// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Функция ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	// Поля БанковскийСчет не видно никогда
	Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "БанковскийСчет", "Видимость");
	Если Элементы.Количество() > 0 Тогда
		Элемент = Элементы[0];
		Элемент.Условие.Элементы.Очистить();
		ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	КонецЕсли;
	// Поля БанковскийСчет и Касса не видны никогда
	Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "Касса", "Видимость");
	Если Элементы.Количество() > 0 Тогда
		Элемент = Элементы[0];
		Элемент.Условие.Элементы.Очистить();
		ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	КонецЕсли;
	
	// Поле "ЗакрытьЗаявку" скрываем 
	Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "ЗакрытьЗаявку", "Видимость");
	Если Элементы.Количество() > 0 Тогда
		Элемент = Элементы[0];
		Элемент.Условие.Элементы.Очистить();
		ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	КонецЕсли;
	// Поле "Расчеты" (гиперссылка) скрываем 
	Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "ДекорацияВалютыИКурсПлатежа", "Видимость");
	Если Элементы.Количество() > 0 Тогда
		Элемент = Элементы[0];
		Элемент.Условие.Элементы.Очистить();
		ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	КонецЕсли;
	
	//!!!
	//// СписокФизЛицВключено и СписокФизЛицОтключено отключены всегда
	//Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "СписокФизЛицВключено", "Видимость");
	//Если Элементы.Количество() > 0 Тогда
	//	Элемент = Элементы[0];
	//	Элемент.Условие.Элементы.Очистить();
	//	ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	//КонецЕсли;
	
	// СтатьяДДС - добавляем аналитики шапки к настройкам статьи бюджета шапки
	МассивНастроек = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "СтатьяДвиженияДенежныхСредств");
	Для Каждого Настройка Из МассивНастроек Цикл
		Настройка.Поля.Добавить("АналитикаШапка1");
		Настройка.Поля.Добавить("АналитикаШапка2");
		Настройка.Поля.Добавить("АналитикаШапка3");
		Настройка.Поля.Добавить("АналитикаШапка4");
		Настройка.Поля.Добавить("АналитикаШапка5");
		Настройка.Поля.Добавить("АналитикаШапка6");
		Настройка.Поля.Добавить("ЦФОШапка");
		Настройка.Поля.Добавить("ПроектШапка");
	КонецЦикла;
	
	// Список хоз.операций взят из поля БанковскийСчетПолучатель
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("СтатьяДвиженияДенежныхСредствЗачисление");
	Настройка.Поля.Добавить("АналитикаЗачисление1");
	Настройка.Поля.Добавить("АналитикаЗачисление2");
	Настройка.Поля.Добавить("АналитикаЗачисление3");
	Настройка.Поля.Добавить("АналитикаЗачисление4");
	Настройка.Поля.Добавить("АналитикаЗачисление5");
	Настройка.Поля.Добавить("АналитикаЗачисление6");
	Настройка.Поля.Добавить("ПолеДекорация1");
	Настройка.Поля.Добавить("ПолеДекорация2");
	ГруппаИли = ФормыУХ.НоваяГруппаИЛИ(Настройка.Условие);
	ФормыУХ.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств);
	ФормыУХ.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Настройка.Свойства.Вставить("Видимость");
	
	// ХозяйственнаяОперация - заполняется из реквизита ВидОперацииУХ
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ХозяйственнаяОперация");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Истина);
	Элемент.Свойства.Вставить("ТолькоПросмотр");
	Элемент.Свойства.Вставить("ПропускатьПриВводе");
	
	// Элементы формы, которые всегда невидимы
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("Приоритет");
	Элемент.Поля.Добавить("КтоРешил");
	Элемент.Поля.Добавить("Статус");
	Элемент.Поля.Добавить("СтраницаРаспределениеПоСчетам");
	Элемент.Поля.Добавить("РасшифровкаПлатежа.ТипПлатежаПоАренде");
	Элемент.Поля.Добавить("РасшифровкаБезРазбиенияТипПлатежаПоАренде");
	
	ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	
	// Заявку можно оформить только в валюте взаиморасчетов
	Настройка = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "ПланированиеСуммы", "Видимость")[0];
	Настройка.Условие.Элементы.Очистить();
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.Истина", Ложь);
	
	// ТолькоПросмотр добавленных элементов и меняем условие только0просмотра
	Настройка = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "Номер", "ТолькоПросмотр")[0];
	Настройка.Поля.Добавить("ВидОперацииУХ");
	Настройка.Поля.Добавить("ЦФО");
	Настройка.Поля.Добавить("Проект");
	Настройка.Поля.Добавить("БезакцептноеСписание");
	Настройка.Поля.Добавить("КрайняяДата");
	Настройка.Поля.Добавить("Договор");
	Настройка.Поля.Добавить("ДокументПланирования");
	Настройка.Поля.Добавить("ВалютаОплаты");
	Настройка.Поля.Добавить("ВнеМаршрута");
	Настройка.Условие.Элементы.Удалить(0); // Удаляем группу ИЛИ с проверкой статусов
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.ЕстьСуперПользователь", Ложь);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.СтатусОбъекта", Перечисления.СостоянияСогласования.Утверждена);
	
	//// Изменение условий доступности полей
	// в 2.5 нет управлением доступностью этого элемента
	//Элемент = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "НадписьРеквизитыПлатежаВБюджет", "Доступность")[0];
	//Элемент.Условие.Элементы.Удалить(0); // Удаляем группу ИЛИ с проверкой статусов
	//ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.ЕстьСуперПользователь", Ложь);
	//ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.СтатусОбъекта", Перечисления.СостоянияСогласования.Утверждена);
	
	// Платежная позиция видна только для нетехнических операций
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтрокаПлатежнаяПозиция");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты,,ВидСравненияКомпоновкиДанных.НеРавно);
	Элемент.Свойства.Вставить("Видимость");
	
	#Область УправлениеУправляющимиРеквизитами
	
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("ВнеМаршрута");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.ЕстьСуперПользователь", Истина);
	Настройка.Свойства.Вставить("Доступность");
	
	#КонецОбласти
	
	#Область УправлениеБлокомОплатаКонтрагенту
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("БезакцептноеСписание");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.ЕстьРасчетыСКонтрагентами", Истина);
	Настройка.Свойства.Вставить("Видимость");
	
	// Договор лизинга
	МассивНастроек = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "БанковскийСчетКонтрагента", "Видимость");
	Для Каждого Настройка Из МассивНастроек Цикл
		ФормыУХ.НовыйОтбор(Настройка.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
		ФормыУХ.НовыйОтбор(Настройка.Условие, "БезакцептноеСписание", Ложь);
	КонецЦикла;
	
	// БанковскийСчетКонтрагента недоступен, если фиксированный счет контрагента
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("БанковскийСчетКонтрагента");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ФиксированныйСчетКонтрагента", Истина);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	// ЦеннаяБумага
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("ЦеннаяБумага");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ВидОперацииУХ", Справочники.ВидыОперацийУХ.ПлатежиПоЦеннымБумагам);
	Настройка.Свойства.Вставить("Видимость");
	
	#КонецОбласти
	
	#Область УправлениеБлокомСуммаОперации
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("ВалютаОплаты");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ПлатежВУсловныхЕдиницах", Истина);
	Настройка.Свойства.Вставить("Видимость");
	
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("ВалютаОплаты");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ЗапретПлатежаВПрочихВалютах", Истина);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("Валюта");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Договор", , , ВидСравненияКомпоновкиДанных.Заполнено);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	#КонецОбласти
	
	#Область УправлениеБлокомДатаОперации
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("КрайняяДата");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.ЭтоТехническаяОперация", Ложь);
	Настройка.Свойства.Вставить("Видимость");
	#КонецОбласти
	
	#Область УникальныеТипыДоговоровВШапке
	// Договор аренды
	МассивНастроек = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "РасшифровкаПлатежа.ДоговорАренды", "Видимость");
	Для Каждого Настройка Из МассивНастроек Цикл
		Настройка.Поля.Добавить("ДоговорАренды");
	КонецЦикла;
	
	// ДоговорАренды	
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("РасшифровкаПлатежа.ДоговорАренды");
	Настройка.Поля.Добавить("РасшифровкаБезРазбиенияДоговорАренды");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаАрендодателю);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	// Договор кредита&депозита
	МассивНастроек = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "РасшифровкаПлатежа.ДоговорКредитаДепозита", "Видимость");
	Для Каждого Настройка Из МассивНастроек Цикл
		Настройка.Поля.Добавить("ДоговорКредитаДепозита");
	КонецЦикла;
	
	// ДоговорКредитаДепозита в расшифровке договор только просмотр
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("РасшифровкаПлатежа.ДоговорКредитаДепозита");
	Настройка.Поля.Добавить("РасшифровкаБезРазбиенияДоговорКредитаДепозита");
	ГруппаИли = ФормыУХ.НовыйОтбор(Настройка.Условие,,, Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ФормыУХ.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПеречислениеНаДепозиты);
	ФормыУХ.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймов);
	ФормыУХ.НовыйОтбор(ГруппаИли, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ОплатаПоКредитам);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	
	// Договор займа сотруднику
	МассивНастроек = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "РасшифровкаПлатежа.ДоговорЗаймаСотруднику", "Видимость");
	Для Каждого Настройка Из МассивНастроек Цикл
		Настройка.Поля.Добавить("ДоговорЗаймаСотруднику");
	КонецЦикла;
	
	// ДоговорЗаймаСотруднику в расшифровке договор только просмотр
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("РасшифровкаПлатежа.ДоговорЗаймаСотруднику");
	Настройка.Поля.Добавить("РасшифровкаБезРазбиенияДоговорЗаймаСотруднику");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику);
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.ИспользоватьНачислениеЗарплатыУТ", Истина);
	Настройка.Свойства.Вставить("ТолькоПросмотр");
	
	#КонецОбласти 
	
	#Область РасшифровкаПлатежей
	// скрываем сумму взаиморасчетов, т.к. она всегда совпадает с суммой
	ФормыУХ.УдалитьНастройкиПоля(Настройки, "РасшифровкаПлатежа.СуммаВзаиморасчетов", "Видимость");
	
	Настройка = Настройки.Добавить();
	Настройка.Поля.Добавить("РасшифровкаПлатежа.СуммаВзаиморасчетов");
	ФормыУХ.НовыйОтбор(Настройка.Условие, "Дополнительно.Истина", Ложь);
	Настройка.Свойства.Вставить("Видимость");
	
	// вместо типа суммы кредита и депозита используем наш реквизит ЭлементСтруктурыЗадолженности
	Элементы  = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "РасшифровкаПлатежа.ТипСуммыКредитаДепозита", "Видимость");
	Для каждого Элемент Из Элементы Цикл
		Элемент.Условие.Элементы.Очистить();
		ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	КонецЦикла;

	#КонецОбласти
	
	#Область КонвертацияВалюты
		
	// Видимость элемента БанковскийСчетСписатьС только Хоз.операции КонвертацияВалюты и ФормаОплатыЗаявки = Безналичная
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("БанковскийСчетСписатьС");
	Элемент.Поля.Добавить("БанковскийСчетЗачислить");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Безналичная);
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Видимость");
	
	// Видимость элемента КассаСписатьС только Хоз.операции КонвертацияВалюты и ФормаОплатыЗаявки = Наличная
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("КассаСписатьС");
	Элемент.Поля.Добавить("КассаЗачислить");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ФормаОплатыЗаявки", Перечисления.ФормыОплаты.Наличная);
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты);
	Элемент.Свойства.Вставить("Видимость");
	
	// БанковскийСчет не видим при Хоз.операции КонвертацияВалюты
	Элемент = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "БанковскийСчет", "Видимость")[0];
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты, , ВидСравненияКомпоновкиДанных.НеРавно);
	
	// Касса не видим при Хоз.операции КонвертацияВалюты
	Элемент = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "Касса", "Видимость")[0];
	ФормыУХ.НовыйОтбор(Элемент.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты, , ВидСравненияКомпоновкиДанных.НеРавно);
	
	// БанковскийСчетПолучатель не видим при Хоз.операции КонвертацияВалюты
	Настройка = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "БанковскийСчетПолучатель", "Видимость")[0];
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты, , ВидСравненияКомпоновкиДанных.НеРавно);
	
	// КассаПолучатель не видим при Хоз.операции КонвертацияВалюты
	Настройка = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "КассаПолучатель", "Видимость")[0];
	ФормыУХ.НовыйОтбор(Настройка.Условие, "ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.КонвертацияВалюты, , ВидСравненияКомпоновкиДанных.НеРавно);
	#КонецОбласти 
	
	// Отключить видимость поля договор, только при наличии нераспределенной суммы
		Отборы = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "Договор", "Видимость")[0].Условие.Элементы[0].Элементы;
		Отборы.Удалить(Отборы[0]);
		
КонецФункции

Функция ПолучитьТипСуммыКредитаДепозита(ДоговорКредитаДепозита, ВидОперацииУХ, ПриходРасход, СтатьяБюджета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперацииУХ", ВидОперацииУХ);
	Запрос.УстановитьПараметр("ПриходРасход", ПриходРасход);
	Запрос.УстановитьПараметр("СтатьяБюджета", СтатьяБюджета);
	Запрос.УстановитьПараметр("ДоговорКредитаДепозита", ДоговорКредитаДепозита);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастройкиФинансовыхИнструментов.Операция.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,
	|	НастройкиФинансовыхИнструментов.Операция.ВидОперацииУХ КАК ВидОперацииУХ,
	|	НастройкиФинансовыхИнструментов.Операция.НаправлениеДвижения КАК ПриходРасход,
	|	НастройкиФинансовыхИнструментов.СтатьяБюджета КАК СтатьяБюджета,
	|	НастройкиФинансовыхИнструментов.Операция.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКредитовИДепозитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|		ПО (ДоговорыКредитовИДепозитов.Ссылка = &ДоговорКредитаДепозита)
	|			И (НастройкиФинансовыхИнструментов.Операция.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств))
	|			И ДоговорыКредитовИДепозитов.ВидФинансовогоИнструмента = НастройкиФинансовыхИнструментов.Операция.ВидФинансовогоИнструмента
	|			И (НастройкиФинансовыхИнструментов.Операция.НаправлениеДвижения = &ПриходРасход)
	|			И (НастройкиФинансовыхИнструментов.Операция.ВидОперацииУХ = &ВидОперацииУХ)
	|ГДЕ
	|	НастройкиФинансовыхИнструментов.СтатьяБюджета = &СтатьяБюджета";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг Тогда
		Возврат Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ОсновнойДолг;
	ИначеЕсли Выборка.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Проценты Тогда
		Возврат Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Проценты;
	ИначеЕсли Выборка.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Комиссии Тогда
		Возврат Перечисления.ТипыСуммГрафикаКредитовИДепозитов.Комиссия;
	Иначе
		Возврат Перечисления.ТипыСуммГрафикаКредитовИДепозитов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

#Область СлужебныеПроцедурыИФункции
	
Функция ТекстЗапросаВтТаблицаДвиженияОперации(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаДвиженияОперации";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов) КАК ВидБюджета,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодОтчета,
	|	Товары.ДатаПоступления КАК ПериодПланирования,
	|	&ЦФО КАК ЦФО,
	|	&Проект КАК Проект,
	|	&Организация КАК Организация,
	|	&СтатьяБюджетов1 КАК СтатьяБюджета,
	|	&Аналитика1 КАК Аналитика1,
	|	&Аналитика2 КАК Аналитика2,
	|	&Аналитика3 КАК Аналитика3,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) КАК ПриходРасход,
	|	&Валюта КАК Валюта,
	|	&Контрагент КАК Контрагент,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПланирования,
	|	НЕОПРЕДЕЛЕНО КАК ДокументРезервирования,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Зарезервировано,
	|	0 КАК Заявлено,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.Сумма * (ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) КАК ЧИСЛО(15, 3))) / (ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютыУпр.Курс, 1) КАК ЧИСЛО(15, 3)))) КАК СуммаУпр
	|ПОМЕСТИТЬ ВТ_ТаблицаДвиженияОперации
	|ИЗ
	|	Документ.ПланЗакупок.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыДокумента
	|		ПО (КурсыВалютыДокумента.Валюта = &Валюта)
	|			И Товары.ДатаПоступления = КурсыВалютыДокумента.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И Товары.ДатаПоступления = КурсыВалютыУпр.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКонтрагентыПартнеров КАК ВтКонтрагентыПартнеров
	|		ПО Товары.Партнер = ВтКонтрагентыПартнеров.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И Товары.ДатаПоступления >= Периоды.ДатаНачала
	|			И Товары.ДатаПоступления <= Периоды.ДатаОкончания
	|			И Периоды.Произвольный = Ложь
	|			И Периоды.ПометкаУдаления = Ложь
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &ОтражаетсяВБюджетировании
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ Товары.Отменено
	|	И НЕ Товары.Замещен
	|	И &ЭтоЦентрализованныеЗакупки
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.ДатаПоступления,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Товары.Количество) <> 0
	|		ИЛИ СУММА(Товары.Сумма) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств),
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
	|	ПланОплат.ДатаПлатежа,
	|	&ЦФО,
	|	&Проект,
	|	&Организация,
	|	&СтатьяБюджетовОплат1,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход) КАК ПриходРасход,
	|	&Валюта,
	|	&Контрагент,
	|	&ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(0),
	|	СУММА(ПланОплат.СуммаПлатежа),
	|	0,
	|	СУММА(ПланОплат.СуммаПлатежа),
	|	СУММА(ПланОплат.СуммаПлатежа * ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) / ЕСТЬNULL(КурсыВалютыУпр.Курс, 1))
	|ИЗ
	|	Документ.ПланЗакупок.ПланОплаты КАК ПланОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыДокумента
	|		ПО (КурсыВалютыДокумента.Валюта = &Валюта)
	|			И ПланОплат.ДатаПлатежа = КурсыВалютыДокумента.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И ПланОплат.ДатаПлатежа = КурсыВалютыУпр.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКонтрагентыПартнеров КАК ВтКонтрагентыПартнеров
	|		ПО ПланОплат.Ссылка.Партнер = ВтКонтрагентыПартнеров.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И ПланОплат.ДатаПлатежа >= Периоды.ДатаНачала
	|			И ПланОплат.ДатаПлатежа <= Периоды.ДатаОкончания
	|			И Периоды.Произвольный = Ложь
	|			И Периоды.ПометкаУдаления = Ложь
	|ГДЕ
	|	ПланОплат.Ссылка = &Ссылка
	|	И &ОтражаетсяВБюджетированииОплаты
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ ПланОплат.Замещен
	|	И &ЭтоЦентрализованныеЗакупки
	|	И (НЕ &ОтражаетсяВБюджетированииОплатыКредит
	|			ИЛИ НЕ ПланОплат.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОплат.ДатаПлатежа,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПланОплат.СуммаПлатежа) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств),
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
	|	ПланОплатКредит.ДатаПлатежа,
	|	&ЦФО,
	|	&Проект,
	|	&Организация,
	|	&СтатьяБюджетовОплатКредит1,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход) КАК ПриходРасход,
	|	&Валюта,
	|	&Контрагент,
	|	&ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(0),
	|	СУММА(ПланОплатКредит.СуммаПлатежа),
	|	0,
	|	СУММА(ПланОплатКредит.СуммаПлатежа),
	|	СУММА(ПланОплатКредит.СуммаПлатежа * ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) / ЕСТЬNULL(КурсыВалютыУпр.Курс, 1))
	|ИЗ
	|	Документ.ПланЗакупок.ПланОплаты КАК ПланОплатКредит
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыДокумента
	|		ПО (КурсыВалютыДокумента.Валюта = &Валюта)
	|			И ПланОплатКредит.ДатаПлатежа = КурсыВалютыДокумента.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И ПланОплатКредит.ДатаПлатежа = КурсыВалютыУпр.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКонтрагентыПартнеров КАК ВтКонтрагентыПартнеров
	|		ПО ПланОплатКредит.Ссылка.Партнер = ВтКонтрагентыПартнеров.Партнер
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И ПланОплатКредит.ДатаПлатежа >= Периоды.ДатаНачала
	|			И ПланОплатКредит.ДатаПлатежа <= Периоды.ДатаОкончания
	|			И Периоды.Произвольный = Ложь
	|			И Периоды.ПометкаУдаления = Ложь
	|ГДЕ
	|	ПланОплатКредит.Ссылка = &Ссылка
	|	И &ОтражаетсяВБюджетированииОплатыКредит
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ ПланОплатКредит.Замещен
	|	И &ЭтоЦентрализованныеЗакупки
	|	И ПланОплатКредит.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОплатКредит.ДатаПлатежа,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПланОплатКредит.СуммаПлатежа) <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТ_ТаблицаПлановССуммамиЛимитирования";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета КАК ВидБюджета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодПланирования КАК ПериодПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ДокументРезервирования КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	ВТ_ТаблицаДвиженияОперации.Зарезервировано КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено,
	|	0 КАК Исполнено
	|ПОМЕСТИТЬ ВТ_ТаблицаПлановССуммамиЛимитирования
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОперативныйПлан(Запрос, ТекстыЗапроса, Регистры)
	
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_ТаблицаДвиженияОперации", ТекстыЗапроса) Тогда
		ТекстЗапроса_ВТ_ТаблицаДвиженияОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_ТаблицаПлановССуммамиЛимитирования", ТекстыЗапроса) Тогда
		ТекстЗапроса_ВТ_ПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИмяРегистра = "ОперативныйПланПоБюджетам";
	ТекстЗапроса_ОперПланы(Запрос, ТекстыЗапроса, ИмяРегистра);
	
	ТекстЗапроса = "";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапроса_ВТ_ТаблицаДвиженияОперации(Запрос, ТекстыЗапроса)

	ИмяВременнойТаблицы = "ВТ_ТаблицаДвиженияОперации";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаявкаНаОперациюДвиженияОперации.Ссылка КАК Ссылка,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств) КАК ВидБюджета,
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	&Организация КАК Организация,
	|	&Валюта КАК Валюта,
	|	&ЦФО КАК ЦФО,
	|	&Проект КАК Проект,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход) КАК ПриходРасход,
	|	&Ссылка КАК ДокументПланирования,
	|	&ДокументПланирования КАК ДокументРезервирования,
	|	&ЖелательнаяДатаПлатежа КАК ЖелаемаяДатаОплаты,
	|	ЗаявкаНаОперациюДвиженияОперации.СтатьяДвиженияДенежныхСредств КАК СтатьяБюджета,
	|	ЗаявкаНаОперациюДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ЗаявкаНаОперациюДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ЗаявкаНаОперациюДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	СУММА(ЗаявкаНаОперациюДвиженияОперации.Сумма) КАК Заявлено
	|ПОМЕСТИТЬ ВТ_ТаблицаДвиженияОперации
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаНаОперациюДвиженияОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|		ПО (ПараметрыОперативногоПланирования.ВидБюджета = &ВидБюджета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования = Периоды.Периодичность)
	|			И (&ЖелательнаяДатаПлатежа >= Периоды.ДатаНачала)
	|			И (&ЖелательнаяДатаПлатежа <= Периоды.ДатаОкончания)
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ЗаявкаНаОперациюДвиженияОперации.Ссылка = &Ссылка
	|	 И НЕ &ХозяйственнаяОперация В (&ХозОперацииБезРасшифровки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Ссылка,
	|	ЗаявкаНаОперациюДвиженияОперации.Ссылка,
	|	ЗаявкаНаОперациюДвиженияОперации.СтатьяДвиженияДенежныхСредств,
	|	ЗаявкаНаОперациюДвиженияОперации.Аналитика1,
	|	ЗаявкаНаОперациюДвиженияОперации.Аналитика2,
	|	ЗаявкаНаОперациюДвиженияОперации.Аналитика3
	|
	| ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаявкаНаОперацию.Ссылка КАК Ссылка,
	|	&Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств) КАК ВидБюджета,
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	&Организация КАК Организация,
	|	&Валюта КАК Валюта,
	|	&ЦФО КАК ЦФО,
	|	&Проект КАК Проект,
	|	&Контрагент КАК Контрагент,
	|	&Договор КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход) КАК ПриходРасход,
	|	&Ссылка КАК ДокументПланирования,
	|	&ДокументПланирования КАК ДокументРезервирования,
	|	&ЖелательнаяДатаПлатежа КАК ЖелаемаяДатаОплаты,
	|	ЗаявкаНаОперацию.СтатьяДвиженияДенежныхСредств КАК СтатьяБюджета,
	|	ЗаявкаНаОперацию.Аналитика1 КАК Аналитика1,
	|	ЗаявкаНаОперацию.Аналитика2 КАК Аналитика2,
	|	ЗаявкаНаОперацию.Аналитика3 КАК Аналитика3,
	|	СУММА(ЗаявкаНаОперацию.СуммаДокумента) КАК Заявлено
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаОперацию
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|		ПО (ПараметрыОперативногоПланирования.ВидБюджета = &ВидБюджета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования = Периоды.Периодичность)
	|			И (&ЖелательнаяДатаПлатежа >= Периоды.ДатаНачала)
	|			И (&ЖелательнаяДатаПлатежа <= Периоды.ДатаОкончания)
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ЗаявкаНаОперацию.Ссылка = &Ссылка
	|	 И &ХозяйственнаяОперация В (&ХозОперацииБезРасшифровки)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Ссылка,
	|	ЗаявкаНаОперацию.Ссылка,
	|	ЗаявкаНаОперацию.СтатьяДвиженияДенежныхСредств,
	|	ЗаявкаНаОперацию.Аналитика1,
	|	ЗаявкаНаОперацию.Аналитика2,
	|	ЗаявкаНаОперацию.Аналитика3";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецФункции

Функция ТекстЗапроса_ВТ_ПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса)

	ИмяВременнойТаблицы = "ВТ_ТаблицаПлановССуммамиЛимитирования";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета КАК ВидБюджета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ДокументРезервирования КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено,
	|	0 КАК Исполнено
	|ПОМЕСТИТЬ ВТ_ТаблицаПлановССуммамиЛимитирования
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецФункции

Процедура ТекстЗапроса_ОперПланы(Запрос, ТекстыЗапроса, ИмяРегистра)
	
	ТекстЗапроса1 = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ОрганизацияЗаполнена,
	|	ЛОЖЬ КАК КонтрагентЗаполнен,
	|	ЛОЖЬ КАК ДоговорКонтрагентаЗаполнен,
	|	1 КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_МатрицаЗаполненностиДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА,
	|	6";
	
	ТекстЗапроса2 = 
	"ВЫБРАТЬ
	|	6 КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_МатрицаОтбораПланов
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки = 6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки >= 5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|ГДЕ
	|	(&ЗаполненностьДоговораЗаявки = 6
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки >= 3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|ГДЕ
	|	(&ЗаполненностьДоговораЗаявки = 6
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 4
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1";
	ТекстЗапроса3 = 
	"ВЫБРАТЬ
	|	ЗапросОбороты.ВидБюджета КАК ВидБюджета,
	|	ЗапросОбороты.ПериодОтчета КАК ПериодОтчета,
	|	ЗапросОбороты.ЦФО КАК ЦФО,
	|	ЗапросОбороты.Проект КАК Проект,
	|	ЗапросОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ЗапросОбороты.Аналитика1 КАК Аналитика1,
	|	ЗапросОбороты.Аналитика2 КАК Аналитика2,
	|	ЗапросОбороты.Аналитика3 КАК Аналитика3,
	|	ЗапросОбороты.ПриходРасход КАК ПриходРасход,
	|	ЗапросОбороты.Валюта КАК Валюта,
	|	СУММА(ЗапросОбороты.ЗарезервированоОборот) КАК ЗарезервированоОборот,
	|	ЗапросОбороты.Организация КАК Организация,
	|	ЗапросОбороты.Контрагент КАК Контрагент,
	|	ЗапросОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОрганизацияЗаполнена,
	|	ВЫБОР
	|		КОГДА (ЗапросОбороты.Контрагент = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КонтрагентЗаполнен,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДоговорЗаполнен
	|ПОМЕСТИТЬ ВТ_ОстаткиПоДокументуПланирования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныйПланПоБюджетамОбороты.ВидБюджета КАК ВидБюджета,
	|		ОперативныйПланПоБюджетамОбороты.ПериодОтчета КАК ПериодОтчета,
	|		ОперативныйПланПоБюджетамОбороты.ЦФО КАК ЦФО,
	|		ОперативныйПланПоБюджетамОбороты.Проект КАК Проект,
	|		ОперативныйПланПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|		ОперативныйПланПоБюджетамОбороты.ПриходРасход КАК ПриходРасход,
	|		ОперативныйПланПоБюджетамОбороты.Валюта КАК Валюта,
	|		ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|		ОперативныйПланПоБюджетамОбороты.Организация КАК Организация,
	|		ОперативныйПланПоБюджетамОбороты.Контрагент КАК Контрагент,
	|		ОперативныйПланПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(, , , ДокументПланирования = &ДокументПланирования) КАК ОперативныйПланПоБюджетамОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперативныйПланПоБюджетам.ВидБюджета,
	|		ОперативныйПланПоБюджетам.ПериодОтчета,
	|		ОперативныйПланПоБюджетам.ЦФО,
	|		ОперативныйПланПоБюджетам.Проект,
	|		ОперативныйПланПоБюджетам.СтатьяБюджета,
	|		ОперативныйПланПоБюджетам.Аналитика1,
	|		ОперативныйПланПоБюджетам.Аналитика2,
	|		ОперативныйПланПоБюджетам.Аналитика3,
	|		ОперативныйПланПоБюджетам.ПриходРасход,
	|		ОперативныйПланПоБюджетам.Валюта,
	|		-ОперативныйПланПоБюджетам.Зарезервировано,
	|		ОперативныйПланПоБюджетам.Организация,
	|		ОперативныйПланПоБюджетам.Контрагент,
	|		ОперативныйПланПоБюджетам.ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления.ОперативныйПланПоБюджетам КАК ОперативныйПланПоБюджетам
	|	ГДЕ
	|		ОперативныйПланПоБюджетам.Регистратор = &Ссылка
	|		И ОперативныйПланПоБюджетам.ДокументПланирования = &ДокументПланирования) КАК ЗапросОбороты
	|ГДЕ
	|	&ДокументПланирования <> ЗНАЧЕНИЕ(Документ.ОперативныйПлан.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросОбороты.Аналитика2,
	|	ЗапросОбороты.Валюта,
	|	ЗапросОбороты.Контрагент,
	|	ЗапросОбороты.ПриходРасход,
	|	ЗапросОбороты.Организация,
	|	ЗапросОбороты.ПериодОтчета,
	|	ЗапросОбороты.СтатьяБюджета,
	|	ЗапросОбороты.ВидБюджета,
	|	ЗапросОбороты.ЦФО,
	|	ЗапросОбороты.Проект,
	|	ЗапросОбороты.Аналитика3,
	|	ЗапросОбороты.Аналитика1,
	|	ЗапросОбороты.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА (ЗапросОбороты.Контрагент = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	ТекстЗапроса4 = 
	"ВЫБРАТЬ
	|	ВТ_ОстаткиПоДокументуПланирования.ВидБюджета КАК ВидБюджета,
	|	ВТ_ОстаткиПоДокументуПланирования.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ОстаткиПоДокументуПланирования.ЦФО КАК ЦФО,
	|	ВТ_ОстаткиПоДокументуПланирования.Проект КАК Проект,
	|	ВТ_ОстаткиПоДокументуПланирования.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика1 КАК Аналитика1,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика2 КАК Аналитика2,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика3 КАК Аналитика3,
	|	ВТ_ОстаткиПоДокументуПланирования.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОстаткиПоДокументуПланирования.Валюта КАК Валюта,
	|	ВТ_ОстаткиПоДокументуПланирования.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_ОстаткиПоДокументуПланирования.Организация КАК Организация,
	|	ВТ_ОстаткиПоДокументуПланирования.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиПоДокументуПланирования.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена КАК ОрганизацияЗаполнена,
	|	ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен КАК КонтрагентЗаполнен,
	|	ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен КАК ДоговорЗаполнен,
	|	ВТ_МатрицаЗаполненностиДоговора.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_ОстаткиЗапланировано
	|ИЗ
	|	ВТ_МатрицаЗаполненностиДоговора КАК ВТ_МатрицаЗаполненностиДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоДокументуПланирования КАК ВТ_ОстаткиПоДокументуПланирования
	|		ПО ВТ_МатрицаЗаполненностиДоговора.ОрганизацияЗаполнена = ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена
	|			И ВТ_МатрицаЗаполненностиДоговора.КонтрагентЗаполнен = ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен
	|			И ВТ_МатрицаЗаполненностиДоговора.ДоговорКонтрагентаЗаполнен = ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен
	|ГДЕ
	|	(ВТ_ОстаткиПоДокументуПланирования.Организация = &Организация
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена = ЛОЖЬ)
	|	И (ВТ_ОстаткиПоДокументуПланирования.Контрагент = &Контрагент
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен = ЛОЖЬ)
	|	И (ВТ_ОстаткиПоДокументуПланирования.ДоговорКонтрагента = &ДоговорКонтрагента
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен = ЛОЖЬ)";
	
	ТекстЗапроса5 = 
	"ВЫБРАТЬ
	|	ВТ_ОстаткиЗапланировано.ВидБюджета КАК ВидБюджета,
	|	ВТ_ОстаткиЗапланировано.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ОстаткиЗапланировано.ЦФО КАК ЦФО,
	|	ВТ_ОстаткиЗапланировано.Проект КАК Проект,
	|	ВТ_ОстаткиЗапланировано.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ОстаткиЗапланировано.Аналитика1 КАК Аналитика1,
	|	ВТ_ОстаткиЗапланировано.Аналитика2 КАК Аналитика2,
	|	ВТ_ОстаткиЗапланировано.Аналитика3 КАК Аналитика3,
	|	ВТ_ОстаткиЗапланировано.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОстаткиЗапланировано.Валюта КАК Валюта,
	|	ВТ_ОстаткиЗапланировано.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_ОстаткиЗапланировано.Организация КАК Организация,
	|	ВТ_ОстаткиЗапланировано.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиЗапланировано.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОстаткиЗапланировано.ОрганизацияЗаполнена КАК ОрганизацияЗаполнена,
	|	ВТ_ОстаткиЗапланировано.КонтрагентЗаполнен КАК КонтрагентЗаполнен,
	|	ВТ_ОстаткиЗапланировано.ДоговорЗаполнен КАК ДоговорЗаполнен,
	|	ВТ_ОстаткиЗапланировано.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_Запланировано
	|ИЗ
	|	ВТ_МатрицаОтбораПланов КАК ВТ_МатрицаОтбораПланов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиЗапланировано КАК ВТ_ОстаткиЗапланировано
	|		ПО ВТ_МатрицаОтбораПланов.ТипДанных = ВТ_ОстаткиЗапланировано.ТипДанных";
	
	//
	ТекстЗапроса6 = 
	"ВЫБРАТЬ
	|	ВТ_Запланировано.ВидБюджета КАК ВидБюджета,
	|	ВТ_Запланировано.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_Запланировано.ЦФО КАК ЦФО,
	|	ВТ_Запланировано.Проект КАК Проект,
	|	ВТ_Запланировано.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_Запланировано.Аналитика1 КАК Аналитика1,
	|	ВТ_Запланировано.Аналитика2 КАК Аналитика2,
	|	ВТ_Запланировано.Аналитика3 КАК Аналитика3,
	|	ВТ_Запланировано.ПриходРасход КАК ПриходРасход,
	|	ВТ_Запланировано.Валюта КАК Валюта,
	|	ВТ_Запланировано.Организация КАК Организация,
	|	ВТ_Запланировано.Контрагент КАК Контрагент,
	|	ВТ_Запланировано.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Запланировано.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_Запланировано.ТипДанных КАК ТипДанных,
	|	СУММА(ВТ_Запланировано1.ЗарезервированоОборот) КАК ЗарезервированоОборот1
	|ПОМЕСТИТЬ ВТ_ЗапланированоСИтогами
	|ИЗ
	|	ВТ_Запланировано КАК ВТ_Запланировано
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запланировано КАК ВТ_Запланировано1
	|		ПО ВТ_Запланировано.ВидБюджета = ВТ_Запланировано1.ВидБюджета
	|			И ВТ_Запланировано.ПериодОтчета = ВТ_Запланировано1.ПериодОтчета
	|			И ВТ_Запланировано.ЦФО = ВТ_Запланировано1.ЦФО
	|			И ВТ_Запланировано.Проект = ВТ_Запланировано1.Проект
	|			И ВТ_Запланировано.СтатьяБюджета = ВТ_Запланировано1.СтатьяБюджета
	|			И ВТ_Запланировано.Аналитика1 = ВТ_Запланировано1.Аналитика1
	|			И ВТ_Запланировано.Аналитика2 = ВТ_Запланировано1.Аналитика2
	|			И ВТ_Запланировано.Аналитика3 = ВТ_Запланировано1.Аналитика3
	|			И ВТ_Запланировано.ПриходРасход = ВТ_Запланировано1.ПриходРасход
	|			И ВТ_Запланировано.Валюта = ВТ_Запланировано1.Валюта
	|			И ВТ_Запланировано.ТипДанных <= ВТ_Запланировано1.ТипДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Запланировано.ПриходРасход,
	|	ВТ_Запланировано.Аналитика1,
	|	ВТ_Запланировано.Валюта,
	|	ВТ_Запланировано.СтатьяБюджета,
	|	ВТ_Запланировано.ЦФО,
	|	ВТ_Запланировано.Проект,
	|	ВТ_Запланировано.ВидБюджета,
	|	ВТ_Запланировано.Аналитика2,
	|	ВТ_Запланировано.Аналитика3,
	|	ВТ_Запланировано.ПериодОтчета,
	|	ВТ_Запланировано.ЗарезервированоОборот,
	|	ВТ_Запланировано.Организация,
	|	ВТ_Запланировано.Контрагент,
	|	ВТ_Запланировано.ДоговорКонтрагента,
	|	ВТ_Запланировано.ТипДанных";
	
	//
	ТекстЗапроса7 = 
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета КАК ВидБюджета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЖелаемаяДатаОплаты КАК ЖелаемаяДатаОплаты,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход,
	|	&ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЖелаемаяДатаОплаты,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3,
	|	ВТ_ЗапланированоСИтогами.Организация,
	|	ВТ_ЗапланированоСИтогами.Контрагент,
	|	ВТ_ЗапланированоСИтогами.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 > ВТ_ТаблицаДвиженияОперации.Заявлено
	|			ТОГДА ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 - ВТ_ЗапланированоСИтогами.ЗарезервированоОборот - ВТ_ТаблицаДвиженияОперации.Заявлено
	|		ИНАЧЕ -ВТ_ЗапланированоСИтогами.ЗарезервированоОборот
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированоСИтогами КАК ВТ_ЗапланированоСИтогами
	|		ПО ВТ_ТаблицаДвиженияОперации.ВидБюджета = ВТ_ЗапланированоСИтогами.ВидБюджета
	|			И ВТ_ТаблицаДвиженияОперации.ПериодОтчета = ВТ_ЗапланированоСИтогами.ПериодОтчета
	|			И ВТ_ТаблицаДвиженияОперации.ЦФО = ВТ_ЗапланированоСИтогами.ЦФО
	|			И ВТ_ТаблицаДвиженияОперации.Проект = ВТ_ЗапланированоСИтогами.Проект
	|			И ВТ_ТаблицаДвиженияОперации.СтатьяБюджета = ВТ_ЗапланированоСИтогами.СтатьяБюджета
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика1 = ВТ_ЗапланированоСИтогами.Аналитика1
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика2 = ВТ_ЗапланированоСИтогами.Аналитика2
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика3 = ВТ_ЗапланированоСИтогами.Аналитика3
	|			И ВТ_ТаблицаДвиженияОперации.ПриходРасход = ВТ_ЗапланированоСИтогами.ПриходРасход
	|			И ВТ_ТаблицаДвиженияОперации.Валюта = ВТ_ЗапланированоСИтогами.Валюта
	|ГДЕ
	|	ВТ_ТаблицаДвиженияОперации.Заявлено > ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 - ВТ_ЗапланированоСИтогами.ЗарезервированоОборот";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса1, "ВТ_МатрицаЗаполненностиДоговора");
	ТекстыЗапроса.Добавить(ТекстЗапроса2, "ВТ_МатрицаОтбораПланов");
	ТекстыЗапроса.Добавить(ТекстЗапроса3, "ВТ_ОстаткиПоДокументуПланирования");
	ТекстыЗапроса.Добавить(ТекстЗапроса4, "ВТ_ОстаткиЗапланировано");
	ТекстыЗапроса.Добавить(ТекстЗапроса5, "ВТ_Запланировано");
	ТекстыЗапроса.Добавить(ТекстЗапроса6, "ВТ_ЗапланированоСИтогами");
	ТекстыЗапроса.Добавить(ТекстЗапроса7, ИмяРегистра);
	
КонецПроцедуры

// Заполняет движения документа "План закупок"
//
Процедура ОтразитьПотребностиВНоменклатуре(ДополнительныеСвойства, Движения, Отказ)

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностиВНоменклатуре;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПотребностиВНоменклатуре.Записывать = Истина;
	Движения.ПотребностиВНоменклатуре.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "Оперативный план по бюджетам"
//
Процедура ОтразитьОперативныйПланПоБюджетам(ДополнительныеСвойства, Движения, Отказ)

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОперативныйПланПоБюджетам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ОперативныйПланПоБюджетам.Записывать = Истина;
	Движения.ОперативныйПланПоБюджетам.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "Оперативный план по бюджетам"
//
Процедура ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ)

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЛимитыПоБюджетам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ЛимитыПоБюджетам.Записывать = Истина;
	Движения.ЛимитыПоБюджетам.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ОМ_ДенежныеСредстваВызовСервера
	
Функция ТекстЗапросаПроверкаСтатуса(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Заявка.Ссылка КАК Заявка,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостояний.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК Статус,
	|	НЕ Заявка.Проведен КАК ЕстьОшибкиПроведен,
	|	ВЫБОР КОГДА НЕ (ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостояний.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Утверждена))
	|		ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьОшибкиСтатус
	|	
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК РегистрСостояний
	|			ПО (РегистрСостояний.Объект = Заявка.Ссылка)
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)
	|	И (НЕ Заявка.Проведен ИЛИ
	|		Заявка.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате))
	|;
	|
	|///////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаНеОбработанныеПлатежныеПозиции(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ИдентификаторПозиции,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	РазмещениеЗаявок.ДатаИсполнения КАК ДатаПлатежа,
	|	СУММА(РазмещениеЗаявок.Сумма) КАК Сумма
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)
	|	И РазмещениеЗаявок.ЗаявкаНаОперацию В (&МассивСсылок)
	|	И РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|	И ТИПЗНАЧЕНИЯ(РазмещениеЗаявок.БанковскийСчетКасса) = &ТипМестаОплаты
	|СГРУППИРОВАТЬ ПО
	|	РазмещениеЗаявок.БанковскийСчетКасса,
	|	РазмещениеЗаявок.ДатаИсполнения,
	|	РазмещениеЗаявок.ИдентификаторПозиции
	|;
	|
	|///////////////////////////////////////////////////////
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти 

#Область КонтрольЛимитовДокумента
	
Процедура ВыполнитьИнтерактивнуюПроверкуЛимитов(Форма, ОбновитьЛимиты = Истина) Экспорт
	КонтрольУХ.ВыполнитьИнтерактивныйКонтроль(Форма);
КонецПроцедуры

#КонецОбласти 

