////////////////////////////////////////////////////////////////////////////////
// Общие процедуры и функции, используемые в подсистеме 
// международного финансового учета.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Возвращает доступность отражения документов в международном учете текущему пользователю.
// 
// Возвращаемое значение:
// 	Булево - Наличие прав на отражение документов в регл. учете
//
Функция ЕстьПравоОтраженияДокументовВМеждународномУчете() Экспорт
	
	Возврат ПравоДоступа("Использование", Метаданные.Обработки.ОтражениеДокументовВМеждународномУчете);
	
КонецФункции

// Возвращает валюты учета на плане счетов
// 
// Параметры:
// 	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, для которого необходимо получить учетные валюты.
// 	Организация - СправочникСсылка.Организации - Организация, для которой необходимо получить функциональную валюту.
// 	
// Возвращаемое значение:
//	Структура - Ключи:
//		* Функциональная - СправочникСсылка.Валюты - Функциональная валюта
//		* Представления - СправочникСсылка.Валюты -  Валюта представления
//		* УчетВФункциональнойВалюте - ПеречислениеСсылка.ВидыУчетаВФункциональнойВалюте - Источник сумм для учета в функциональной валюте
//
Функция УчетныеВалюты(ПланСчетов, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	РеквизитыПланаСчетов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
								ПланСчетов, "ВалютаПредставления, УчетВФункциональнойВалюте");
	Если РеквизитыПланаСчетов.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл Тогда
		ФункциональнаяВалюта = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	Иначе
		ФункциональнаяВалюта = ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета();
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Новый Структура("Функциональная, Представления, УчетВФункциональнойВалюте",
							ФункциональнаяВалюта,
							РеквизитыПланаСчетов.ВалютаПредставления,
							РеквизитыПланаСчетов.УчетВФункциональнойВалюте);
	
КонецФункции

// Определяет использование группы финансового учета
// в настройках уточнения счетов учета в международном финансовом учете.
//
// Параметры:
//  ГруппаФинансовогоУчета - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры -
//	                       - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов -
//	                       - СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств -
//	                       - СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов - группа финансового учета
//                               номенклатуры, расчетов с контрагентами, денежных средств, доходов/расходов.
//
// Возвращаемое значение:
//  Структура - Ключи:
//    * КоличествоСвязанныхШаблонов - Число - количество шаблонов проводок, использующих уточнение счетов с помощью данного типа групп финансового учета
//    * КоличествоНастроенныхШаблонов - Число - количество шаблонов проводок, для которых настроены счета учета для данной группы финансового учета.
//
Функция СостояниеУточненияСчетовУчета(ГруппаФинансовогоУчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаУточненияСчетов.ШаблонПроводки,
	|	ПравилаУточненияСчетов.ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета
	|ПОМЕСТИТЬ ПравилаУточненияСчетов
	|ИЗ
	|	РегистрСведений.ПравилаУточненияСчетовВМеждународномУчете КАК ПравилаУточненияСчетов
	|ГДЕ
	|	ПравилаУточненияСчетов.ГруппаФинансовогоУчета = &ГруппаФинансовогоУчета
	|;
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка КАК ШаблонПроводки,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет) КАК ВидДвижения,
	|	ПравилаУточненияСчетов.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ ШаблоныПроводок
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУточненияСчетов КАК ПравилаУточненияСчетов
	|		ПО (ПравилаУточненияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|			И (ПравилаУточненияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Дебет))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаДт В (&ТипыИсточниковУточненияСчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ШаблоныПроводок.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит),
	|	ПравилаУточненияСчетов.СчетУчета
	|ИЗ
	|	Справочник.ШаблоныПроводокДляМеждународногоУчета КАК ШаблоныПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаУточненияСчетов КАК ПравилаУточненияСчетов
	|		ПО (ПравилаУточненияСчетов.ШаблонПроводки = ШаблоныПроводок.Ссылка)
	|			И (ПравилаУточненияСчетов.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийБухгалтерии.Кредит))
	|ГДЕ
	|	ШаблоныПроводок.ТипИсточникаУточненияСчетаКт В (&ТипыИсточниковУточненияСчета)
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШаблоныПроводок.ШаблонПроводки) КАК КоличествоСвязанныхШаблонов
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|;
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(ШаблоныПроводок.ШаблонПроводки) КАК КоличествоНастроенныхШаблонов
	|ИЗ
	|	ШаблоныПроводок КАК ШаблоныПроводок
	|ГДЕ
	|	НЕ ШаблоныПроводок.СчетУчета ЕСТЬ NULL
	|";
	
	Запрос.УстановитьПараметр("ГруппаФинансовогоУчета", ГруппаФинансовогоУчета);  
	Запрос.УстановитьПараметр("ТипыИсточниковУточненияСчета", МеждународныйУчетКлиентСервер.ТипыИсточниковУточненияСчета(ГруппаФинансовогоУчета));
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	КоличествоСвязанныхШаблонов = 0;
	КоличествоНастроенныхШаблонов = 0;
	
	РезультатЗапросаСвязанныеШаблоны = МассивРезультатов[2]; // РезультатЗапроса - 
	ВыборкаСвязанныеШаблоны = РезультатЗапросаСвязанныеШаблоны.Выбрать();
	Если ВыборкаСвязанныеШаблоны.Следующий() Тогда
		КоличествоСвязанныхШаблонов = ВыборкаСвязанныеШаблоны.КоличествоСвязанныхШаблонов;
	КонецЕсли;
	РезультатЗапросаНастроенныеШаблоны = МассивРезультатов[3]; // РезультатЗапроса -
	ВыборкаНастроенныеШаблоны = РезультатЗапросаНастроенныеШаблоны.Выбрать();
	Если ВыборкаНастроенныеШаблоны.Следующий() Тогда
		КоличествоНастроенныхШаблонов = ВыборкаНастроенныеШаблоны.КоличествоНастроенныхШаблонов;
	КонецЕсли;
	
	Возврат Новый Структура("КоличествоСвязанныхШаблонов, КоличествоНастроенныхШаблонов",
							КоличествоСвязанныхШаблонов, КоличествоНастроенныхШаблонов);
	
КонецФункции

// Возвращает элемент справочника НастройкиХозяйственныхОпераций по ссылке на значение перечисления ХозяйственныеОперации.
//
// Параметры:
//  ЗначениеПеречисления - ПеречислениеСсылка.ХозяйственныеОперации - ссылка на значение перечисления ХозяйственныеОперации.
//
// Возвращаемое значение:
// СправочникСсылка.НастройкиХозяйственныхОпераций - элемент справочника настроек хозяйственной операции.
//
Функция ХозяйственнаяОперацияПоПеречислению(ЗначениеПеречисления) Экспорт

	ХозяйственнаяОперация = Неопределено;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиХозопераций.Ссылка КАК ХозяйственнаяОперация 
	|ИЗ
	|	Справочник.НастройкиХозяйственныхОпераций КАК НастройкиХозопераций
	|ГДЕ
	|	НастройкиХозопераций.ХозяйственнаяОперация = &ЗначениеПеречисления
	|";
	
	Запрос.УстановитьПараметр("ЗначениеПеречисления", ЗначениеПеречисления);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ХозяйственнаяОперация = Выборка.ХозяйственнаяОперация;
	КонецЕсли;
	
	Возврат ХозяйственнаяОперация;

КонецФункции

// Пересчитывает сумму функциональной валюты в валюту представления
//
// Параметры:
// 	ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, для которого необходим пересчет
// 	Организация - СправочникСсылка.Организации - Организация, для которой необходим пересчет
//  Сумма - Число - Сумма в функциональной валюте 
//  Дата - Дата - Дата определения курса валют.
//
// Возвращаемое значение:
//  Число - Сумма в валюте представления.
//
Функция РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата = Неопределено) Экспорт
	
	Если Дата = Неопределено Тогда
		Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ВалютыМеждународногоУчета = УчетныеВалюты(ПланСчетов, Организация);
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	Коэффициент = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентПересчетаИзВалютыВВалюту(
					ВалютыМеждународногоУчета.Функциональная, 
					ВалютыМеждународногоУчета.Представления,
					Дата,
					ВалютаРегламентированногоУчета);
	
	Возврат Сумма * Коэффициент;
	
КонецФункции

// Функция получает коэффициенты пересчета сумм из заданной валюты в функциональную валюту и валюту представления.
//
// Параметры:
//  ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, для которого необходимо выполнить пересчет
//  Организация - СправочникСсылка.Организации - Организация, для которой необходим пересчет
//  ИсходнаяВалюта - СправочникСсылка.Валюты - валюта для пересчета которой необходимо получить коэффициенты.
//  Период - Дата - дата определения курса валют.
//
// Возвращаемое значение:
//  Структура - содержащая коэффициенты пересчета в ключах "ВФункциональнуюВалюту" и "ВВалютуПредставления".
//
Функция ПолучитьКоэффициентыПересчетаВалюты(ПланСчетов, Организация, ИсходнаяВалюта, Период)Экспорт

	ВалютыМеждународногоУчета = УчетныеВалюты(ПланСчетов, Организация);
	ВалютаРегламентированногоУчета = ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация);
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.КурсЧислитель КАК КурсЧислитель,
	|	КурсыВалют.КурсЗнаменатель КАК КурсЗнаменатель
	|ИЗ
	|	РегистрСведений.ОтносительныеКурсыВалют.СрезПоследних(&Период, 
	|		БазоваяВалюта = &БазоваяВалюта
	|		И (Валюта = &ВалютаФункциональная 
	|				ИЛИ Валюта = &ВалютаПредставления 
	|				ИЛИ Валюта = &ИсходнаяВалюта)
	|	) КАК КурсыВалют
	|");
	Запрос.УстановитьПараметр("Период",               Период);
	Запрос.УстановитьПараметр("БазоваяВалюта",        ВалютаРегламентированногоУчета);
	Запрос.УстановитьПараметр("ВалютаФункциональная", ВалютыМеждународногоУчета.Функциональная);
	Запрос.УстановитьПараметр("ВалютаПредставления",  ВалютыМеждународногоУчета.Представления);
	Запрос.УстановитьПараметр("ИсходнаяВалюта",       ИсходнаяВалюта);

	КурсЧислительВалютыФункциональной   = 1;
	КурсЗнаменательВалютыФункциональной = 1;

	КурсЧислительВалютыПредставления  = 1;
	КурсЗнаменательВалютыПредставления = 1;

	КурсЧислительИсходнойВалюты = 1;
	КурсЗнаменательИсходнойВалюты = 1;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл

		Если Выборка.Валюта = ВалютыМеждународногоУчета.Функциональная Тогда

			КурсЧислительВалютыФункциональной      = Выборка.КурсЧислитель;
			КурсЗнаменательВалютыФункциональной = Выборка.КурсЗнаменатель;

		КонецЕсли;

		Если Выборка.Валюта = ВалютыМеждународногоУчета.Представления Тогда

			КурсЧислительВалютыПредставления      = Выборка.КурсЧислитель;
			КурсЗнаменательВалютыПредставления = Выборка.КурсЗнаменатель;

		КонецЕсли;

		Если Выборка.Валюта = ИсходнаяВалюта Тогда

			КурсЧислительИсходнойВалюты      = Выборка.КурсЧислитель;
			КурсЗнаменательИсходнойВалюты = Выборка.КурсЗнаменатель;

		КонецЕсли;
	КонецЦикла;

	Результат = Новый Структура("ВФункциональнуюВалюту, ВВалютуПредставления");

	Результат.ВФункциональнуюВалюту = 
		(КурсЧислительИсходнойВалюты * КурсЗнаменательВалютыФункциональной) 
		/ (КурсЗнаменательИсходнойВалюты * КурсЧислительВалютыФункциональной);
		
	Результат.ВВалютуПредставления = 
		(КурсЧислительИсходнойВалюты * КурсЗнаменательВалютыПредставления)
		/ (КурсЗнаменательИсходнойВалюты * КурсЧислительВалютыПредставления);

	Возврат Результат;

КонецФункции

// Проверяет доступность чтения настроек международного финансового учета.
//
// Возвращаемое значение:
//  Булево - Истина если разрешено чтение настроек международного учета.
//
Функция ДоступноЧтениеНастроекМеждународногоУчета() Экспорт

	Возврат	ПравоДоступа("Чтение", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);

КонецФункции

// Проверяет доступность изменения настроек международного финансового учета.
//
// Возвращаемое значение:
//  Булево - Истина если разрешено изменение настроек международного учета.
//
Функция ДоступноИзменениеНастроекМеждународногоУчета() Экспорт

	Возврат ПравоДоступа("Изменение", Метаданные.Справочники.ШаблоныПроводокДляМеждународногоУчета);

КонецФункции

// Установить условное оформление проводок международного учета.
// Оформляются поля таблицы формы проводок: Субконто, ПредставлениеВидаСубконто, Валюта, ТипПроводки.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//
Процедура УстановитьОформлениеПроводок(УсловноеОформление, ТаблицаПроводок) Экспорт
	
	// Не заполнено поле "ТипПроводки" отображать серым текстом "Обычная"
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТипПроводки");

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".ТипПроводки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																|en = 'Normal'"));
	
	// Поля зависящие от стороны счета
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	// Дт
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, "Дт", Индекс);
	КонецЦикла;
	УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, "Дт");
	УстановитьОформлениеКоличества(УсловноеОформление, ТаблицаПроводок, "Дт");
		
	// Кт
	Для Индекс = 1 По МаксКоличествоСубконто Цикл
		УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, "Кт", Индекс);
	КонецЦикла;
	УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, "Кт");
	УстановитьОформлениеКоличества(УсловноеОформление, ТаблицаПроводок, "Дт");
	
КонецПроцедуры

// Заполняет вспомогательные поля представления видов субконто
//
// Параметры:
//  ТаблицаФормы  - ДанныеФормыКоллекция - Реквизит формы (таблица) содержащая проводки.
//
Процедура ЗаполнитьПредставлениеВидовСубконто(ТаблицаФормы) Экспорт

	Для каждого СтрокаТаблицы Из ТаблицаФормы Цикл
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставлениеВидовСубконто(СтрокаТаблицы.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ПредставлениеВидовСубконто(СтрокаТаблицы.СчетКт, "Кт"));
	КонецЦикла;

КонецПроцедуры

// Получает строковые представления видов субконто счета.
//
// Параметры:
//  Счет - ПланСчетовСсылка - счет международного плана счетов
//  ВидДвижения - Строка - Сторона проводки "Дт" или "Кт".
//
// Возвращаемое значение:
//   Структура - Ключ структуры - Наименование поля представления вида субконто на форме ("ПредставлениеВидСубконтоДт1",
//               "ПредставлениеВидСубконтоДт2" и т.д.) Значение структуры - строковое представление вида субконто.
//
Функция ПредставлениеВидовСубконто(Счет, ВидДвижения) Экспорт

	ПредставлениеВидовСубконто = Новый Структура;
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	КоличествоВидовСубконто = Счет.ВидыСубконто.Количество();
	Для К = 1 По МаксКоличествоСубконто Цикл
		ПредставлениеВидаСубконто = ?(КоличествоВидовСубконто >= К, "<" + Счет.ВидыСубконто[К - 1].ВидСубконто + ">", Неопределено);
		ПредставлениеВидовСубконто.Вставить("ПредставлениеВидСубконто" + ВидДвижения + К, ПредставлениеВидаСубконто);
	КонецЦикла;
	СчетВалютный = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет).Валютный;
	ПредставлениеВидовСубконто.Вставить("ВалютныйУчет" + ВидДвижения, СчетВалютный);
	СчетКоличественный = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет).Количественный;
	ПредставлениеВидовСубконто.Вставить("КоличественныйУчет" + ВидДвижения, СчетКоличественный);
	ПредставлениеВидовСубконто.Вставить("КоличествоСубконто" + ВидДвижения, КоличествоВидовСубконто);

	Возврат ПредставлениеВидовСубконто;

КонецФункции

// Получает заголовок кнопки для вызова команды УстановитьДатуЗапрета
//
// Параметры:
//  ДатаЗапрета  - Дата - дата запрета формирования проводок по международному учету.
//
// Возвращаемое значение:
//   Строка - Текст заголовка кнопки.
//
Функция ПредставлениеКомандыУстановитьДатуЗапрета(ДатаЗапрета = Неопределено) Экспорт
	
	Шаблон = НСтр("ru = 'Дата запрета формирования проводок %ДатаЗапрета%';
					|en = 'Closing date of posting generation %ДатаЗапрета%'");
	Замена = ?(ЗначениеЗаполнено(ДатаЗапрета),Формат(ДатаЗапрета, "ДЛФ=DD"),НСтр("ru = 'не установлена';
																				|en = 'not set'"));
	Возврат СтрЗаменить(Шаблон, "%ДатаЗапрета%", Замена);
	
КонецФункции

// Выгружает набор записей регистра бухгалтерии в строгом соответствии номеров субконто своим видам субконто - как задано
// на плане счетов.
// 
// Параметры:
//  Набор - РегистрБухгалтерииНаборЗаписей.Международный - выгружаемый набор записей.
//
// Возвращаемое значение:
//   ТаблицаЗначений - данные набора записей.
//
Функция ВыгрузитьНаборЗаписейРегистраБухгалтерии(Набор) Экспорт
	
	МаксКоличествоСубконто = МеждународныйУчетСерверПовтИсп.МаксКоличествоСубконто();
	Запрос = Новый Запрос(ТекстЗапросаПравильныхНомеровСубконто(МаксКоличествоСубконто));
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("НаборДвижений", Набор.Выгрузить());
	
	Выборка = Запрос.Выполнить().Выгрузить();
	
	НовыйНабор = Набор.ВыгрузитьКолонки();
	ВидыДвижений = СтрРазделить("Дт,Кт",",");
	Для Каждого Запись Из Выборка Цикл
		НоваяЗапись = НовыйНабор.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
		Для Каждого ВидДвижения Из ВидыДвижений Цикл
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				ПравильныйНомер = Запись["НомерСубконто" + ВидДвижения + НомерСубконто];
				Если ПравильныйНомер <> 0 Тогда
					НоваяЗапись["ВидСубконто" + ВидДвижения + ПравильныйНомер] = Запись["ВидСубконто" + ВидДвижения + НомерСубконто];
					НоваяЗапись["Субконто" + ВидДвижения + ПравильныйНомер] = Запись["Субконто" + ВидДвижения + НомерСубконто];
				КонецЕсли;
			КонецЦикла;// по номерам субконто
		КонецЦикла;// видам движений Дт, Кт
	КонецЦикла;// по записям набора
	
	Возврат НовыйНабор;
	
КонецФункции

// Устанавливает видимость настроек для международного учета в зависимости от включенных
// ФО международного учета и наличия настроенных шаблонов проводк для международного учета.
// 
// Параметры:
//  Ссылка - СправочникСсылка.ГруппыФинансовогоУчетаДенежныхСредств -
//         - СправочникСсылка.ГруппыФинансовогоУчетаДоходовРасходов -
//         - СправочникСсылка.ГруппыФинансовогоУчетаНоменклатуры -
//         - СправочникСсылка.ГруппыФинансовогоУчетаРасчетов - проверяемая группа финансового учета.
//  ГруппаНастроекМФУ - ГруппаФормы - группа элементов формы в которой размещены настройки МФУ.
//  НастроитьУточнениеСчетов - КнопкаФормы - гиперссылка перехода к настройкам шаблонов проводок для международного учета.
//
Процедура УстановитьВидимостьНастроекМФУ(Ссылка, ГруппаНастроекМФУ, НастроитьУточнениеСчетов) Экспорт
	
	Если (ПолучитьФункциональнуюОпцию("НастройкаПроводокПоХозяйственнымОперациям")
		ИЛИ ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного"))
		И ДоступноЧтениеНастроекМеждународногоУчета() Тогда
		
		ДанныеНастроек = СостояниеУточненияСчетовУчета(Ссылка);
		КоличествоСвязанныхШаблонов = ДанныеНастроек.КоличествоСвязанныхШаблонов;
		КоличествоНастроенныхШаблонов = ДанныеНастроек.КоличествоНастроенныхШаблонов;
		
		ВидимостьНастроек = Ложь;
		ДоступноИзменениеНастроекМФУ = ДоступноИзменениеНастроекМеждународногоУчета();
		
		Если КоличествоСвязанныхШаблонов > 0 И КоличествоНастроенныхШаблонов > 0 Тогда
			ЗаголовокГиперссылкиНастройки = Нстр("ru = 'Посмотреть настройки счетов учета по шаблонам проводок';
												|en = 'View ledger account settings by posting templates'");
			Если ДоступноИзменениеНастроекМФУ Тогда
				ЗаголовокГиперссылкиНастройки = Нстр("ru = 'Изменить настройки счетов учета по шаблонам проводок';
													|en = 'Change ledger account settings by posting templates'");
			КонецЕсли;
			ВидимостьНастроек = Истина;
		ИначеЕсли КоличествоСвязанныхШаблонов > 0 И КоличествоНастроенныхШаблонов = 0 Тогда
			ЗаголовокГиперссылкиНастройки = Нстр("ru = 'Настроить счета учета по шаблонам проводок';
												|en = 'Configure ledger account by posting templates'");
			ВидимостьНастроек = ДоступноИзменениеНастроекМФУ;
		КонецЕсли;
		Если НастроитьУточнениеСчетов <> Неопределено Тогда
			НастроитьУточнениеСчетов.Заголовок = ЗаголовокГиперссылкиНастройки;
		КонецЕсли;
		ГруппаНастроекМФУ.Видимость = ВидимостьНастроек;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает видимость надписей заголовков направлений деятельности
//
// Параметры:
//  ЭлементПодразделениеДт - ПолеФормы - колонка табличной части документа
//  ЭлементПодразделениеКт - ПолеФормы - колонка табличной части документа.
//
Процедура УстановитьЗаголовкиПодразделения(ЭлементПодразделениеДт, ЭлементПодразделениеКт) Экспорт
	
	ШаблонЗаголовка = НСтр("ru = 'Подразделение %1';
							|en = 'Business unit %1'");
	Если Справочники.НаправленияДеятельности.ИспользуетсяУчетПоНаправлениям() Тогда
		ШаблонЗаголовка = ШаблонЗаголовка + ", " + НСтр("ru = 'Направление %1';
														|en = 'Direction %1'")
	КонецЕсли;
	ЭлементПодразделениеДт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Дт';
																		|en = 'Dr'"));
	ЭлементПодразделениеКт.Заголовок = СтрШаблон(ШаблонЗаголовка, НСтр("ru = 'Кт';
																		|en = 'Cr'"));
	
КонецПроцедуры

// Проверяет выражение заполнения субконто для указанной строки настроек и заполняет представление выражения в строке.
// 
// Параметры:
// 	СтрокиНастройки - ДанныеФормыЭлементКоллекции, ДанныеФормыЭлементДерева, Массив из ДанныеФормыЭлементДерева, ДанныеФормыЭлементКоллекции - Строка табличной части, содержащая выражение заполнения субконто.
// 			Поддерживается массив строк для оптимизации получения представлений для характеристик в выражениях.
// 	 *Выражение - Строка - Выражение заполнения субконто.
// 	 *НетВДоступныхПолях - Булево - Флаг прохождения проверки наличия поля в схеме.
// 	 *ПредставлениеВыражения - Строка - Представление выражения заполнения субконто.
// 	КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек, при помощи которого проверяются выражения.
//
Процедура ПроверитьВыражениеЗаполненияСубконто(СтрокиНастройки, КомпоновщикНастроек) Экспорт
	
	Выражения = Новый Массив;
	
	Если ТипЗнч(СтрокиНастройки) = Тип("Массив") Тогда
		МассивСтрокНастройки = СтрокиНастройки;
	Иначе
		МассивСтрокНастройки = Новый Массив;
		МассивСтрокНастройки.Добавить(СтрокиНастройки);
	КонецЕсли;
	
	Для каждого СтрокаНастройки Из МассивСтрокНастройки Цикл
		Выражения.Добавить(СтрокаНастройки.Выражение);
	КонецЦикла;
	ПредставленияВыражений = РаботаСФормулами.ВыраженияСПредставлениямиХарактеристикДляОнлайнПроверки(Выражения);
	
	Для каждого СтрокаНастройки Из МассивСтрокНастройки Цикл
		Если Не СтрокаНастройки.ЗаполнятьИзИсточника Тогда
			СтрокаНастройки.Выражение = "";
		КонецЕсли;
		
		Если СтрокаНастройки.Выражение = "" Тогда
			СтрокаНастройки.НетВДоступныхПолях = Ложь;
			СтрокаНастройки.ПредставлениеВыражения = "";
			Возврат;
		КонецЕсли;
		
		ВыражениеСПредставлениемХарактеристик = ПредставленияВыражений.Получить(СтрокаНастройки.Выражение);
		
		Поле = Новый ПолеКомпоновкиДанных(ВыражениеСПредставлениемХарактеристик); 
		ДоступноеПоле = КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Поле);
		
		Если ДоступноеПоле = Неопределено Тогда
			СтрокаНастройки.НетВДоступныхПолях = Истина;
			СтрокаНастройки.ПредставлениеВыражения = СтрокаНастройки.Выражение;
		Иначе
			СтрокаНастройки.НетВДоступныхПолях = Ложь;
			СтрокаНастройки.ПредставлениеВыражения = ДоступноеПоле.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает текущую дату запрета формирования проводок международного учета
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация (или массив организаций) 
//                 для которой требуется получить дату запрета формирования проводок
//                 если не указана, то будет получена общая дата запрета для всех организаций.
//
// Возвращаемое значение:
//   Дата - дата запрета формирования проводок по международному учету.
//
Функция ДатаЗапретаФормированияПроводок(Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОНЕЦПЕРИОДА(ДатыЗапрета.ДатаЗапрета, ДЕНЬ) КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет КАК ДатыЗапрета
	|ГДЕ
	|	ДатыЗапрета.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И ДатыЗапрета.ДатаЗапрета <> ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КОНЕЦПЕРИОДА(ДатыЗапрета.ДатаЗапрета, ДЕНЬ) КАК ДатаЗапрета
	|ИЗ
	|	РегистрСведений.ДатыЗапретаФормированияПроводокМеждународныйУчет КАК ДатыЗапрета
	|ГДЕ
	|	ДатыЗапрета.Организация В(&Организации)
	|	И ДатыЗапрета.ДатаЗапрета <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатыЗапрета.ДатаЗапрета";
	
	Запрос.УстановитьПараметр("Организации", Организация);
	
	ДатыЗапрета = Запрос.ВыполнитьПакет();
	
	РезультатЗапросаПоОрганизации = ДатыЗапрета[1]; // РезультатЗапроса - 
	ПоОрганизации = РезультатЗапросаПоОрганизации.Выбрать();
	Если ПоОрганизации.Следующий() Тогда
		Возврат ПоОрганизации.ДатаЗапрета;
	КонецЕсли;
	
	РезультатЗапросаДляВсех = ДатыЗапрета[0]; // РезультатЗапроса -
	ДляВсех = РезультатЗапросаДляВсех.Выбрать();
	Если ДляВсех.Следующий() Тогда
		Возврат ДляВсех.ДатаЗапрета;
	КонецЕсли;
	
	Возврат Дата(1,1,1);

КонецФункции

// Возвращает доступность способа аннулирования проводок международного учета реверсивными проводками.
// 
// Возвращаемое значение:
// 	Булево - доступность способа аннулирования реверсивными проводками
//
Функция ДоступноАннулированиеПроводокРеверсивнымиПроводками() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета")
		ИЛИ (ПолучитьФункциональнуюОпцию("ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного")
			И НЕ ПолучитьФункциональнуюОпцию("ПроводкиМеждународногоУчетаПоДаннымОперативного"));
	
КонецФункции

#Область ПодключениеКБСП

// (См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	ВыводитьВариантыОтчетов = Ложь;
	
	#Область ИспользованиеСчетовИСубконтоМеждународныйУчет
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИспользованиеСчетовИСубконтоМеждународныйУчет);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ настроек отчетов и шаблонов проводок, где используются счета плана счетов и субконто.';
									|en = 'Analysis of report and posting template settings where accounts of chart of accounts and extra dimensions are used.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ИспользованиеСчетовИСубконтоМеждународныйУчет");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ настроек отчетов и шаблонов проводок, где используются счета плана счетов и субконто.';
									|en = 'Analysis of report and posting template settings where accounts of chart of accounts and extra dimensions are used.'");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ИспользованиеСчетаКонтекст");	
	#КонецОбласти

	#Область МеждународныйОтчет
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.МеждународныйОтчет);
	ВариантыОтчетовУТПереопределяемый.ОтключитьОтчет(ОписаниеОтчета);
	#КонецОбласти

	#Область БухгалтерскийОтчетМеждународный
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.БухгалтерскийОтчетМеждународный);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ сальдо и оборотов по счетам международного финансового учета.
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Balance and turnover analysis by financial accounts. 
		|The data is in functional and presentation currency.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализВзаиморасчетовКонтрагентов");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сводный анализ взаиморасчетов с контрагентами (клиентами и поставщиками, дебиторами и кредиторами).
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Summary analysis of AR/AP with counterparties (customers and vendors, debtors and creditors).
		|Data is in functional and presentation currency.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСубконтоМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ данных международного учета по выбранным одному или нескольким субконто.
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Financial accounting data analysis by the selected one or several extra dimensions.
		|The data is in functional and presentation currency.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализСчетаМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ оборотов международного учета
		|между выбранным счетом и всеми остальными счетами.
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Financial accounting turnover analysis 
		|between the selected account and all the other accounts. 
		|The data is in functional and presentation currency.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОСВ_Международный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сальдо счетов на начало и на конец периода по дебету и кредиту и суммы оборотов за период.
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Start and closing account balance for debit and credit and turnover amount for the period. 
		|Data is in functional and presentation currency.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОСВ_ПоСчетуМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ оборотов и сальдо по счетам международного учета.
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Balance and turnover analysis by accounts of financial accounting. 
		|The data is in functional and presentation currency.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОСВПоСчетуСКорреспонденциейМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ сальдо и оборотов выбранного счета международного учета в разрезе аналитик и кор. счетов.
		|Данные в функциональной валюте и валюте представления.';
		|en = 'Analysis of balance and turnover of the selected financial accounting account broken down by analytics and correspondent accounts.
		|The data in the functional and presentation currency.'");
	#КонецОбласти

	#Область КарточкаСчетаМеждународный
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.КарточкаСчетаМеждународный);
	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, ОписаниеОтчета, ВыводитьВариантыОтчетов);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Детальный анализ проводок по счетам международного учета.';
									|en = 'Detailed analysis of postings by financial accounting accounts.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "КарточкаСчетаМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Корреспонденции счетов за выбранный период, в которых был использован выбранный счет.';
									|en = 'Account correspondences for the selected period when the selected account was used.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "СводныеПроводки");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сводные корреспонденции между счетами за выбранный период.';
									|en = 'Summary correspondence between accounts for the selected period.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ОтчетПоПроводкамМеждународный");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ проводок по счетам международного учета.';
									|en = 'Analysis of postings by financial accounting accounts.'");
	#КонецОбласти

	#Область ШахматнаяВедомостьМеждународный
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ШахматнаяВедомостьМеждународный);
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.';
		|en = 'Summary data of synthetic accounting by correspondent accounts. 
		|Expanded presentation of turnover between accounts.'");
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "ШахматнаяВедомостьМУ");
	ОписаниеВарианта.Описание = НСтр("ru = 'Обобщенные данные синтетического учета в разрезе корреспондирующих счетов.
		|Развернутое представление оборотов между счетами.';
		|en = 'Summary data of synthetic accounting by correspondent accounts. 
		|Expanded presentation of turnover between accounts.'");
	#КонецОбласти	

	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.НастроитьВариантыОтчетов(Настройки);
	МеждународныйУчетПоДаннымОперативногоУчета.НастроитьВариантыОтчетов(Настройки);
	МеждународныйУчетПоДаннымРеглУчета.НастроитьВариантыОтчетов(Настройки);
	
КонецПроцедуры

// Параметры:
// 	Объекты - Массив из ОбъектМетаданных -
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ОперацияМеждународный);
	Объекты.Добавить(Метаданные.ПланыСчетов.Международный);
	Объекты.Добавить(Метаданные.Справочники.НастройкиФормированияПроводокМеждународногоУчета);
	Объекты.Добавить(Метаданные.Документы.ЭкземплярФинансовогоОтчета);
	Объекты.Добавить(Метаданные.Документы.РегламентнаяОперацияМеждународныйУчет);
	Объекты.Добавить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете2_5);
	
КонецПроцедуры

// (См. ОбщийМодуль.ДатыЗапретаИзмененияПереопределяемый.ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения())
//
Процедура ЗаполнитьИсточникиДанныхДляПроверкиЗапретаИзменения(ИсточникиДанных) Экспорт
	
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.РегламентнаяОперацияМеждународныйУчет"	, "Дата", "МеждународныйУчет", "Организация");
	ДатыЗапретаИзменения.ДобавитьСтроку(ИсточникиДанных, "Документ.ОперацияМеждународный"					, "Дата", "МеждународныйУчет", "Организация");
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий.
//
// (См. ОчередьЗаданийПереопределяемый.ПриОпределенииПсевдонимовОбработчиков())
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗакрытиеМесяца.ИмяМетода);
	
КонецПроцедуры

// Формирует список шаблонов заданий очереди.
//
// (См. ОчередьЗаданийПереопределяемый.ПриПолученииСпискаШаблонов())
// 
// Параметры:
// 	ШаблоныЗаданий - Массив из Строка -
//
Процедура ПриПолученииСпискаШаблонов(ШаблоныЗаданий) Экспорт
	
	ШаблоныЗаданий.Добавить(Метаданные.РегламентныеЗадания.ОтражениеДокументовВМеждународномУчете.Имя);
	
КонецПроцедуры

// Определяет следующие свойств регламентных заданий:
//  - зависимость от функциональных опций.
//  - возможность выполнения в различных режимах работы программы.
//  - прочие параметры.
//
// (См. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий)
// 
// Параметры:
// 	Настройки - см. РегламентныеЗаданияПереопределяемый.ПриОпределенииНастроекРегламентныхЗаданий.Настройки 
//
Процедура ПриОпределенииНастроекРегламентныхЗаданий(Настройки) Экспорт
	
	Настройка = Настройки.Добавить();
	Настройка.РегламентноеЗадание = Метаданные.РегламентныеЗадания.ОтражениеДокументовВМеждународномУчете;
	Настройка.ФункциональнаяОпция = Метаданные.ФункциональныеОпции.ИспользоватьМеждународныйФинансовыйУчет;
	Настройка.ВключатьПриВключенииФункциональнойОпции = Ложь;	
	
КонецПроцедуры

// Определяет список объектов конфигурации, в модулях менеджеров которых предусмотрена процедура 
// ДобавитьКомандыСозданияНаОсновании, формирующая команды создания на основании объектов.
// Синтаксис процедуры ДобавитьКомандыСозданияНаОсновании см. в документации.
//
// Параметры:
// 	Объекты - Массив из ОбъектМетаданных -
Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Документы.ОперацияМеждународный);
	Объекты.Добавить(Метаданные.Документы.ЭкземплярФинансовогоОтчета);
	Объекты.Добавить(Метаданные.Документы.РегламентнаяОперацияМеждународныйУчет);
	Объекты.Добавить(Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете2_5);
	
КонецПроцедуры

// Позволяет указать списки, у которых объекты метаданных содержат описание логики ограничения
// доступа в модулях менеджеров или переопределяемом модуле.
//
// (См. ОбщийМодуль.УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа())
//
Процедура ПриЗаполненииСписковСОграничениемДоступа(Списки) Экспорт
	Списки.Вставить(Метаданные.Справочники.ТиповыеОперацииМеждународныйУчет, Истина);
	Списки.Вставить(Метаданные.Документы.РегламентнаяОперацияМеждународныйУчет, Истина);
	Списки.Вставить(Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете, Истина);
	Списки.Вставить(Метаданные.Документы.ЭкземплярФинансовогоОтчета, Истина);
	Списки.Вставить(Метаданные.Справочники.ТиповыеОперацииМеждународныйУчет, Истина);
	Списки.Вставить(Метаданные.РегистрыБухгалтерии.Международный, Истина);
	Списки.Вставить(Метаданные.Документы.ОперацияМеждународный, Истина);
КонецПроцедуры

// Определить объекты метаданных, в модулях менеджеров которых ограничивается возможность 
// редактирования реквизитов при групповом изменении.
// (См. ГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами())
//
Процедура ПриОпределенииОбъектовСРедактируемымиРеквизитами(Объекты) Экспорт
	
	Объекты.Вставить(Метаданные.Справочники.НастройкиФормированияПроводокМеждународногоУчетаПрисоединенныеФайлы.ПолноеИмя(), "РеквизитыРедактируемыеВГрупповойОбработке");
	
КонецПроцедуры

// Определяет объекты конфигурации, в модулях менеджеров которых размещена процедура ДобавитьКомандыПечати,
// формирующая список команд печати, предоставляемых этим объектом.
// Синтаксис процедуры ДобавитьКомандыПечати см. в документации к подсистеме.
//
// Параметры:
//  СписокОбъектов - Массив - менеджеры объектов с процедурой ДобавитьКомандыПечати.
//
Процедура ПриОпределенииОбъектовСКомандамиПечати(СписокОбъектов) Экспорт

	//++ НЕ УТ
	//++ НЕ УТКА
	СписокОбъектов.Добавить(Документы.ОперацияМеждународный)	
	//-- НЕ УТКА
	//-- НЕ УТ
	
КонецПроцедуры
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Установить условное оформление полей Субконто и ПредставлениеВидаСубконто для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//  НомерСубконто - Число,Строка - порядковый номер субконто.
//
Процедура УстановитьОформлениеСубконто(УсловноеОформление, ТаблицаПроводок, ДтКт, НомерСубконто)
	
	Номер = Строка(НомерСубконто);
	ПолеСубконто = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Субконто" + ДтКт + Номер);
	ПолеВидаСубконто = Новый ПолеКомпоновкиДанных("ПредставлениеВидСубконто" + ДтКт + Номер);
	
	// Серый текст полей субконто если указан счет и не заполнены его доступные субконто.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = ПолеВидаСубконто;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Счет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеСубконто;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
	
	// Если у счета нет субконто, то скрыть подсказки ввода
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = ПолеВидаСубконто;
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = ПолеСубконто;
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

// Установить условное оформление полей Валюта и ВалютнаяСумма для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//  НомерСубконто - Число,Строка - порядковый номер субконто.
//
Процедура УстановитьОформлениеВалюты(УсловноеОформление, ТаблицаПроводок, ДтКт)
	
	// Если на счете ведется валютный учет и не указана валюта, то подсветить незаполненное поле.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Валюта" + ДтКт);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".ВалютныйУчет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Валюта" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

Функция ТекстЗапросаПравильныхНомеровСубконто(МаксКоличествоСубконто)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВидыСубконто.Ссылка.Код КАК Код,
	|	ВидыСубконто.Ссылка КАК Счет,
	|	ВидыСубконто.НомерСтроки КАК НомерСубконто,
	|	ВидыСубконто.ВидСубконто КАК ВидСубконто
	|ПОМЕСТИТЬ СубконтоСчетов
	|ИЗ
	|	ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет,
	|	ВидСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДвижений.НомерСтроки КАК НомерСтроки,
	|	НаборДвижений.Период КАК Период,
	|	НаборДвижений.Регистратор,
	|	НаборДвижений.ПланСчетов,
	|	НаборДвижений.Организация,
	|	НаборДвижений.СчетДт,
	|	НаборДвижений.ПодразделениеДт,
	|	НаборДвижений.НаправлениеДеятельностиДт,
	|	НаборДвижений.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	НаборДвижений.СубконтоДт1 КАК СубконтоДт1,
	|	НаборДвижений.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	НаборДвижений.СубконтоДт2 КАК СубконтоДт2,
	|	НаборДвижений.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	НаборДвижений.СубконтоДт3 КАК СубконтоДт3,
	|	
	|	НаборДвижений.ВалютаДт,
	|	НаборДвижений.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	НаборДвижений.КоличествоДт КАК КоличествоДт,
	|	НаборДвижений.СчетКт,
	|	НаборДвижений.ПодразделениеКт,
	|	НаборДвижений.НаправлениеДеятельностиКт,
	|	НаборДвижений.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	НаборДвижений.СубконтоКт1 КАК СубконтоКт1,
	|	НаборДвижений.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	НаборДвижений.СубконтоКт2 КАК СубконтоКт2,
	|	НаборДвижений.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	НаборДвижений.СубконтоКт3 КАК СубконтоКт3,
	|
	|	&ЕщеСубконтоНабора,
	|
	|	НаборДвижений.ВалютаКт,
	|	НаборДвижений.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	НаборДвижений.КоличествоКт КАК КоличествоКт,
	|	НаборДвижений.Сумма КАК Сумма,
	|	НаборДвижений.СуммаПредставления КАК СуммаПредставления,
	|	НаборДвижений.ШаблонПроводки
	|ПОМЕСТИТЬ НаборДвижений
	|ИЗ
	|	&НаборДвижений КАК НаборДвижений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаборДвижений.НомерСтроки КАК НомерСтроки,
	|	НаборДвижений.Период КАК Период,
	|	НаборДвижений.Регистратор,
	|	НаборДвижений.ПланСчетов,
	|	НаборДвижений.Организация,
	|	НаборДвижений.СчетДт,
	|	НаборДвижений.ПодразделениеДт,
	|	НаборДвижений.НаправлениеДеятельностиДт,
	|	ЕСТЬNULL(СубконтоСчетовДт1.НомерСубконто,0) КАК НомерСубконтоДт1,
	|	НаборДвижений.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	НаборДвижений.СубконтоДт1 КАК СубконтоДт1,
	|	ЕСТЬNULL(СубконтоСчетовДт2.НомерСубконто,0) КАК НомерСубконтоДт2,
	|	НаборДвижений.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	НаборДвижений.СубконтоДт2 КАК СубконтоДт2,
	|	ЕСТЬNULL(СубконтоСчетовДт3.НомерСубконто,0) КАК НомерСубконтоДт3,
	|	НаборДвижений.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	НаборДвижений.СубконтоДт3 КАК СубконтоДт3,
	|
	|	НаборДвижений.ВалютаДт,
	|	НаборДвижений.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	НаборДвижений.КоличествоДт КАК КоличествоДт,
	|	НаборДвижений.СчетКт,
	|	НаборДвижений.ПодразделениеКт,
	|	НаборДвижений.НаправлениеДеятельностиКт,
	|	ЕСТЬNULL(СубконтоСчетовКт1.НомерСубконто,0) КАК НомерСубконтоКт1,
	|	НаборДвижений.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	НаборДвижений.СубконтоКт1 КАК СубконтоКт1,
	|	ЕСТЬNULL(СубконтоСчетовКт2.НомерСубконто,0) КАК НомерСубконтоКт2,
	|	НаборДвижений.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	НаборДвижений.СубконтоКт2 КАК СубконтоКт2,
	|	ЕСТЬNULL(СубконтоСчетовКт3.НомерСубконто,0) КАК НомерСубконтоКт3,
	|	НаборДвижений.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	НаборДвижений.СубконтоКт3 КАК СубконтоКт3,
	|
	|	&ЕщеСубконтоРезультата,
	|
	|	НаборДвижений.ВалютаКт,
	|	НаборДвижений.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	НаборДвижений.КоличествоКт КАК КоличествоКт,
	|	НаборДвижений.Сумма КАК Сумма,
	|	НаборДвижений.СуммаПредставления КАК СуммаПредставления,
	|	НаборДвижений.ШаблонПроводки
	|ИЗ
	|	НаборДвижений КАК НаборДвижений
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовДт1
	|	ПО НаборДвижений.СчетДт = СубконтоСчетовДт1.Счет
	|		И НаборДвижений.ВидСубконтоДт1 = СубконтоСчетовДт1.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовДт2
	|	ПО НаборДвижений.СчетДт = СубконтоСчетовДт2.Счет
	|		И НаборДвижений.ВидСубконтоДт2 = СубконтоСчетовДт2.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовДт3
	|	ПО НаборДвижений.СчетДт = СубконтоСчетовДт3.Счет
	|		И НаборДвижений.ВидСубконтоДт3 = СубконтоСчетовДт3.ВидСубконто
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовКт1
	|	ПО НаборДвижений.СчетКт = СубконтоСчетовКт1.Счет
	|		И НаборДвижений.ВидСубконтоКт1 = СубконтоСчетовКт1.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовКт2
	|	ПО НаборДвижений.СчетКт = СубконтоСчетовКт2.Счет
	|		И НаборДвижений.ВидСубконтоКт2 = СубконтоСчетовКт2.ВидСубконто
	|	ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетовКт3
	|	ПО НаборДвижений.СчетКт = СубконтоСчетовКт3.Счет
	|		И НаборДвижений.ВидСубконтоКт3 = СубконтоСчетовКт3.ВидСубконто
	|
	|	И &ЕщеСоединения
	|";
	
	Если МаксКоличествоСубконто > 3 Тогда
		ВидыДвижений = СтрРазделить("Дт,Кт",",");
		ШаблонНомерСубконто = "ЕСТЬNULL(СубконтоСчетов%1%2.НомерСубконто,0) КАК НомерСубконто%1%2,";
		
		ШаблонВидСубконто = "НаборДвижений.ВидСубконто%1%2 КАК ВидСубконто%1%2,";
		ШаблонСубконто = "НаборДвижений.Субконто%1%2 КАК Субконто%1%2,";
		
		ШаблонСоединения = "ЛЕВОЕ СОЕДИНЕНИЕ СубконтоСчетов КАК СубконтоСчетов%1%2
							|	ПО НаборДвижений.СчетДт = СубконтоСчетов%1%2.Счет
							|		И НаборДвижений.ВидСубконто%1%2 = СубконтоСчетов%1%2.ВидСубконто";
		
		ЕщеСубконтоНабора = Новый Массив;
		ЕщеСубконтоРезультата = Новый Массив;
		ЕщеСоединения = Новый Массив;
		ВидыДвижений = СтрРазделить("Дт,Кт",",");
		РазделительСтрок = Символы.ПС+Символы.Таб;
		Для Каждого ВидДвижения Из ВидыДвижений Цикл
			Для Номер = 4 По МаксКоличествоСубконто Цикл
				
				НовыйНомер = СтрШаблон(ШаблонНомерСубконто, ВидДвижения, Номер);
				НовоеСубконто = СтрШаблон(ШаблонВидСубконто, ВидДвижения, Номер)+РазделительСтрок
								+СтрШаблон(ШаблонСубконто, ВидДвижения, Номер);
				НовоеСоединение = СтрШаблон(ШаблонСоединения, ВидДвижения, Номер);
				
				ЕщеСубконтоНабора.Добавить(НовоеСубконто);
				ЕщеСубконтоРезультата.Добавить(НовыйНомер + РазделительСтрок + НовоеСубконто);
				ЕщеСоединения.Добавить(НовоеСоединение);
				
			КонецЦикла;
		КонецЦикла;
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕщеСубконтоНабора,", СтрСоединить(ЕщеСубконтоНабора, РазделительСтрок));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕщеСубконтоРезультата,", СтрСоединить(ЕщеСубконтоРезультата, РазделительСтрок));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЕщеСоединения", СтрСоединить(ЕщеСоединения, РазделительСтрок));
		
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕщеСубконтоНабора,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЕщеСубконтоРезультата,", "");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЕщеСоединения", "");
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Установить условное оформление поля Количество для таблицы формы проводок.
//
// Параметры:
//  УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - коллекция элементов условного оформления формы.
//  ТаблицаПроводок - Строка - Имя таблицы формы отображающей проводки.
//  ДтКт - Строка - Сторона проводки "Дт" или "Кт".
//
Процедура УстановитьОформлениеКоличества(УсловноеОформление, ТаблицаПроводок, ДтКт)
	
	// Если на счете ведется количественный учет и не указано количество, то подсветить незаполненное поле.
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("Количество" + ДтКт);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".КоличественныйУчет" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТаблицаПроводок + ".Количество" + ДтКт);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
КонецПроцедуры

#КонецОбласти

