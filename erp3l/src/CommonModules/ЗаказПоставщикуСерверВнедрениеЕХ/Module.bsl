#Область ПрограммныйИнтерфейс
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ФормаДокумента
	
#Область ОбработчикиСобытий

Процедура ФормаДокумента_ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	АналитикиПланированияДокументов.ПриЧтенииНаСервере(Форма);
КонецПроцедуры

Процедура ФормаДокумента_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма);
	Элементы.Переместить(Элементы.ГруппаСтатусыСогласования, Элементы.ГруппаДанныеДокумента, Элементы.ГруппаСтраницы);
	#КонецОбласти
	
	АналитикиПланированияДокументов.ПриСозданииНаСервере(Форма, Элементы.Комментарий.Родитель, Элементы.Комментарий);
	КонтрольУХ.ПодготовитьФормуНаСервере(Форма, Элементы.ГруппаСтраницы);
	
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "БанковскийСчетКонтрагента", ,
		"Объект.БанковскийСчетКонтрагента",, Элементы.ГруппаПараметрыПраво);
	
	ФормаДокумента_ИнициализироватьФормуЦУЗ(Форма);
	Если ПолучитьФункциональнуюОпцию(
			"ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		АккредитацияПоставщиковУХ.ПриСозданииНаСервереФормыКонтрагентаВнешнегоПоставщика(
			Форма, Отказ, "Список",,, Истина);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ФормаДокумента_ЗаполнитьДопРеквизитыЦУЗ(Форма);
		ФормаДокумента_УстановитьДоступныеСкладыНаСервере(Форма);
		ФормаДокумента_УстановитьОформлениеЭлементовЦУЗ(Форма);
		ФормаДокумента_УстановитьУсловноеОформлениеЭлементовЦУЗ(Форма);
	КонецЕсли;
	
КонецПроцедуры

// ОбработатьНаСервере - Произвольное значение - вид значения определяется
//		функцией ЗаказПоставщикуКлиентВнедрениеЕХ.ПолеФормыПриИзменении().
//
Процедура ФормаДокумента_ПолеФормыПриИзменении(Форма, Элемент, ОбработатьНаСервере) Экспорт
	Если Элемент.Имя = "МестоПоставки" Тогда
		ФормаДокумента_УстановитьДоступныеСкладыНаСервере(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаДокумента_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
КонецПроцедуры

#КонецОбласти

#Область ЭкспортныеФункции

Процедура ФормаДокумента_УстановитьОформлениеЭлементовЦУЗ(Форма) Экспорт
	Если ПолучитьФункциональнуюОпцию(
			"ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		Элементы = Форма.Элементы;
		Объект = Форма.Объект;
		Элементы.МестоПоставки.Видимость = Форма.ИспользуетсяУправлениеЗакупками;
		Если Форма.Элементы.Найти("Договор") <> Неопределено И ЗначениеЗаполнено(Форма.Договор)
			 Тогда
			 ВерсияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Договор,"ВерсияСоглашения");
			 ИспользуетсяГрафик = ВерсияСоглашения.Номенклатура.Количество() > 0;
		Иначе 
			ИспользуетсяГрафик = Истина;
		КонецЕсли;	
		ПараметрыЭлементовТЧ = ПолучитьПараметрыДобавляемыхЭлементовТЧТовары(
				ПолучитьСтандартныеПараметрыПоляВвода());
		Для Каждого ПараметрыЭлемента Из ПараметрыЭлементовТЧ ЦИкл
			Элементы[ПараметрыЭлемента.Имя].Видимость =
				Форма.ИспользуетсяУправлениеЗакупками И ИспользуетсяГрафик;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Процедура ФормаДокумента_УстановитьДоступныеСкладыНаСервере(Форма) Экспорт
	Перем СтарыйСклад;
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Если Форма.ИспользуетсяУправлениеЗакупками
			И ЗначениеЗаполнено(Объект.МестоПоставки) Тогда
		СтарыйСклад = Объект.Склад;
		мСклады = Справочники.МестаПоставки.СкладыМестаПоставки(Объект.МестоПоставки);
		Элементы.Склад.РежимВыбораИзСписка = Истина;
		Элементы.Склад.СписокВыбора.ЗагрузитьЗначения(мСклады);
		Если мСклады.Количество() = 1 Тогда
			Объект.Склад = мСклады[0];
		КонецЕсли;
		Если СтарыйСклад <> Объект.Склад Тогда
			ЗаказПоставщикуКлиентСерверВнедрениеЕХ.ФормаДокумента_СкладПриИзмененииКлиентСервер(
				Объект);
		КонецЕсли;
	Иначе
		Элементы.Склад.РежимВыбораИзСписка = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ФормаДокумента_ЗаполнитьДопРеквизитыЦУЗ(Форма) Экспорт
	ФормаДокумента_ИнициализироватьФлагИспользованияЦУЗ(Форма);
	ФормаДокумента_ЗаполнитьДопРеквизитыЦУЗТЧТовары(Форма);
КонецПроцедуры

Процедура ФормаДокумента_ЗаполнитьДопРеквизитыЦУЗТЧТовары(Форма) Экспорт
	Объект = Форма.Объект;
	Товары = Объект.Товары;
	Для Каждого СтрокаТовара Из Товары Цикл
		ФормаДокумента_ЗаполнитьДопРеквизитыЦУЗСтрокиТовары(
			Форма, СтрокаТовара);
	КонецЦикла;
КонецПроцедуры

Процедура ФормаДокумента_ИнициализироватьФлагИспользованияЦУЗ(Форма) Экспорт
	Объект = Форма.Объект;
	Форма.ИспользуетсяУправлениеЗакупками =
		ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
		И ЗначениеЗаполнено(Объект.Договор)
		И ЦентрализованныеЗакупкиКлиентСерверУХ.ЭтоДопустимыйВидДоговораУХ(
			Объект.Договор.ВидДоговораУХ);
КонецПроцедуры

Процедура ФормаДокумента_ЗаполнитьДопРеквизитыЦУЗСтрокиТовары(Форма,
															СтрокаТовара) Экспорт
	СтрокаТовара.ХарактеристикиИсходныеИспользуются =
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ХарактеристикиИспользуются(
			СтрокаТовара.НоменклатураИсходная);
КонецПроцедуры
		
#КонецОбласти

#КонецОбласти 

#Область ФормаСписка

Процедура ФормаСписка_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	Если ПолучитьФункциональнуюОпцию(
			"ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		АккредитацияПоставщиковУХ.ПриСозданииНаСервереФормыКонтрагентаВнешнегоПоставщика(
			Форма, Отказ, "Список",,, Истина);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		СоздатьЭлементыФормыСписка(Форма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область МенеджерДокумента
	
#Область ИсточникиДляКонтроляДокумента
	
Функция ИсточникиДокумента(Объект) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект));
	
	//// 2. Планы по взаиморасчетам с контрагентом
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоКонтрагенту, 
	//	Источник_ВзаиморасчетыПоКонтрагенту(Объект));
	
	//// 3. Планы по взаиморасчетам по договору
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоДоговору,
	//	Источник_ВзаиморасчетыПоДоговору(Объект));
	
	// 4. Контроль суммы по договору
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХРасходыПоДоговору,
		Источник_РасходыПоДоговору(Объект));
	
	Возврат Источники;
	
КонецФункции
	
Функция Источник_БюджетныеЛимитыРезервы(Объект)
	
	//
	Источник = Новый Структура;
	
	// Параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 		Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 	Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 	НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	// Получаем планы документа
	ДанныеДляПроверки = ПланыДокумента(Объект);
	ДанныеДляПроверки.Колонки.Сумма.Имя = "Заявлено";
	ДанныеДляПроверки.Колонки.Добавить("Лимит", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Зарезервировано", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Исполнено", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.ЗаполнитьЗначения(Объект.Дата, "Период");
	
	//
	Источник.Вставить("Параметры", ДопПараметры);
	Источник.Вставить("ПланыДокумента", ДанныеДляПроверки);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_РасходыПоДоговору(Объект)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат неопределено; // Контроль не выполняется
	КонецЕсли;
	
	КонтрольОплаты = Истина;
	Результат = КонтрольУХРасходыПоДоговору.СтруктураИсточник(Объект.Ссылка, Объект.Организация, КонтрольОплаты);
	Результат.Контрагент = Объект.Контрагент;
	Результат.Договор = Объект.Договор;
	
	//Строка = Результат.ДанныеДляПроверки.Добавить();
	//ЗаполнитьЗначенияСвойств(Строка, Объект);
	//Строка.Сумма = Объект.СуммаДокумента;
	
	// Оплата
	Для Каждого Этап Из Объект.ЭтапыГрафикаОплаты Цикл
		Строка = Результат.ДанныеДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Объект, "Организация, Контрагент, Договор, ОбъектРасчетов, Валюта");
		Строка.ЭтоОплата = КонтрольОплаты;
		Строка.Сумма = Этап.СуммаПлатежа;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") 
		И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	Если ДанныеОбъекта.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		ИЛИ ДанныеОбъекта.РежимИспользованияГрафика <> Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций Тогда
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	РеквизитыАналитик = "ВидБюджета, ДокументРезервирования, ЦФО, Проект, СтатьяБюджета, "
		+ АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	
	// Оплата
	АналитикиОплаты = ПолучитьАналитикиПланированияБДДС(ДанныеОбъекта);
	Если АналитикиОплаты <> неопределено Тогда
		
		Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств;
		
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
			Предназначение, ДанныеОбъекта.Дата);
			
		Для Каждого Строка Из ДанныеОбъекта.ЭтапыГрафикаОплаты Цикл
			СтрокаПлана = ТаблицаПланов.Добавить();
			СтрокаПлана.Период = ДанныеОбъекта.Дата;
			
			СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
			СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
				Строка.ДатаПлатежа, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
			СтрокаПлана.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
			СтрокаПлана.Сумма = Строка.СуммаПлатежа;
			СтрокаПлана.Организация = ДанныеОбъекта.Организация;
			СтрокаПлана.Контрагент = ДанныеОбъекта.Контрагент;
			СтрокаПлана.ДоговорКонтрагента = ДанныеОбъекта.Договор;
			СтрокаПлана.Валюта = ДанныеОбъекта.Валюта;
			
			ЗаполнитьЗначенияСвойств(СтрокаПлана, АналитикиОплаты, РеквизитыАналитик);
			СтрокаПлана.Предназначение = Предназначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Поставка
	АналитикиПоставки = ПолучитьАналитикиПланированияПоставки(ДанныеОбъекта);
	Если АналитикиПоставки <> неопределено Тогда
		
		Предназначение = АналитикиПоставки.ВидБюджета.Предназначение;
		
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
			Предназначение, ДанныеОбъекта.Дата);
			
		Если ДанныеОбъекта.ПоступлениеОднойДатой = Истина Тогда
			ЕдиныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
				ДанныеОбъекта.ДатаПоступления, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеОбъекта.Товары Цикл
			СтрокаПлана = ТаблицаПланов.Добавить();
			СтрокаПлана.Период = ДанныеОбъекта.Дата;
			
			СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
			Если ДанныеОбъекта.ПоступлениеОднойДатой = Истина Тогда
				СтрокаПлана.ПериодОтчета = ЕдиныйПериод;
			Иначе
				СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
					Строка.ДатаПоступления, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
			КонецЕсли;
			СтрокаПлана.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
			СтрокаПлана.Сумма = Строка.СуммаСНДС;
			СтрокаПлана.Организация = ДанныеОбъекта.Организация;
			СтрокаПлана.Контрагент = ДанныеОбъекта.Контрагент;
			СтрокаПлана.ДоговорКонтрагента = ДанныеОбъекта.Договор;
			СтрокаПлана.Валюта = ДанныеОбъекта.Валюта;
			
			ЗаполнитьЗначенияСвойств(СтрокаПлана, АналитикиПоставки, РеквизитыАналитик);
			СтрокаПлана.Предназначение = Предназначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РеквизитыПланов = "Период, ПериодОтчета, ВидБюджета, Предназначение, Валюта, ЦФО, Проект, ПриходРасход, СтатьяБюджета, Аналитика1,"
		+"Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, ДокументРезервирования, ДокументПланирования, Организация, Контрагент, ДоговорКонтрагента";
	
	ТаблицаПланов.Свернуть(РеквизитыПланов, "Сумма");
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Контрагент КАК Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.ПоступлениеОднойДатой КАК ПоступлениеОднойДатой,
	|	Документ.ДатаПоступления КАК ДатаПоступления,
	|	Документ.ПорядокРасчетов КАК ПорядокРасчетов,
	|	Документ.РежимИспользованияГрафика КАК РежимИспользованияГрафика,
	|	Документ.ЭтапыГрафикаОплаты.(
	|		ДатаПлатежа КАК ДатаПлатежа,
	|		ВариантОплаты КАК ВариантОплаты,
	|		СуммаПлатежа КАК СуммаПлатежа,
	|		СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|		ИдентификаторПозиции КАК ИдентификаторПозиции
	|	) КАК ГрафикРасчетов,
	|	Документ.Товары.(
	|		ДатаПоступления КАК ДатаПоступления,
	|		СуммаСНДС КАК СуммаСНДС
	|	) КАК Товары,
	|	Документ.АналитикиПланирования.(
	|		ВидБюджета КАК ВидБюджета,
	|		ДокументРезервирования КАК ДокументРезервирования,
	|		ЦФО КАК ЦФО,
	|		Проект КАК Проект,
	|		СтатьяБюджета КАК СтатьяБюджета,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6
	|	) КАК АналитикиПланирования
	|ИЗ
	|	Документ.ЗаказПоставщику КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ГрафикРасчетов");
		Результат.ГрафикРасчетов = Выборка.ГрафикРасчетов.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАналитикиПланированияБДДС(ДанныеОбъекта)
	
	СтруктураПоиска = Новый Структура("ВидБюджета", ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств);
	Строки = ДанныеОбъекта.АналитикиПланирования.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0];
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

Функция ПолучитьАналитикиПланированияПоставки(ДанныеОбъекта)
	
	Для Каждого Строка Из ДанныеОбъекта.АналитикиПланирования Цикл
		
		Если Строка.ВидБюджета <> ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
			Возврат Строка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции

#КонецОбласти 

#Область КомандыСозданияНаОсновании
	
// Определяет список команд создания на основании документа ЗаказПоставщику.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОснованииЗаказПоставщику(КомандыСозданияНаОсновании, Параметры) Экспорт

	// Претензия
	Данные = Метаданные.Справочники.Претензии;
	НоваяКоманда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Данные);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "УправлениеЗакупкамиВстраиваниеПереопределяемыйКлиентУХ.СоздатьСправочникПретензииНаОснованииЗаказаПоставщику";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСпискаДокументов";
		НоваяКоманда.МножественныйВыбор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Определяет список команд создания на основании документа Возврат товаров поставщику.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//
Процедура ДобавитьКомандыСозданияНаОснованииВозвратаТоваровПоставщику(КомандыСозданияНаОсновании, Параметры) Экспорт

	// Претензия
	Данные = Метаданные.Справочники.Претензии;
	НоваяКоманда = ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Данные);
	Если НоваяКоманда <> Неопределено Тогда
		НоваяКоманда.Обработчик = "УправлениеЗакупкамиВстраиваниеПереопределяемыйКлиентУХ.СоздатьСправочникПретензииНаОснованииВозвратаТоваровПоставщику";
		НоваяКоманда.ВидимостьВФормах = "ФормаДокумента, ФормаСписка";
		НоваяКоманда.МножественныйВыбор = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Добавляет команду создания документа по его метаданным.
//
// Параметры:
//   КомандыСозданияНаОсновании - ТаблицаЗначений - Таблица с командами создания на основании. Для изменения.
//       См. описание 1 параметра процедуры СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании().
//	 МетаданныеДокумента - 
//
Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, МетаданныеДокумента) Экспорт
	
	Если ПравоДоступа("Добавление", МетаданныеДокумента) Тогда
		КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
		КомандаСоздатьНаОсновании.Менеджер = МетаданныеДокумента.ПолноеИмя();
		КомандаСоздатьНаОсновании.Представление = ОбщегоНазначенияУТ.ПредставлениеОбъекта(МетаданныеДокумента);
		КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
		Возврат КомандаСоздатьНаОсновании;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ФормаДокумента_УстановитьУсловноеОформлениеЭлементовЦУЗ(Форма)
	НоменклатураСервер.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		Форма,
		"ТоварыХарактеристикаИсходная",
		"Объект.Товары.ХарактеристикиИсходныеИспользуются");
КонецПроцедуры

Функция ПолучитьПараметрыДобавляемыхЭлементовТЧТовары(ПараметрыПоляВвода)
	ДобавляемыеЭлементы = Новый Массив;
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыХарактеристикаИсходная",
		"Объект.Товары.ХарактеристикаИсходная",
		ПолучитьПараметрыПоляВводаХарактеристикиНоменклатуры(
			ПараметрыПоляВвода),
		"ТоварыНоменклатура",
		,
		,
		СоздатьОписаниеСобытий(
			"ПриИзменении",
			"Подключаемый_УХ_НоменклатураХарактеристикаИсходнаяПриИзменении")));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыНоменклатураИсходная",
		"Объект.Товары.НоменклатураИсходная",
		ПараметрыПоляВвода,
		"ТоварыХарактеристикаИсходная",
		,
		,
		СоздатьОписаниеСобытий(
			"ПриИзменении",
			"Подключаемый_УХ_ТоварыНоменклатураИсходнаяПриИзменении")));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыОрганизацияПолучатель",
		"Объект.Товары.ОрганизацияПолучатель",
		ПараметрыПоляВвода));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыНоменклатураМестоПоставки",
		"Объект.Товары.МестоПоставки",
		ПараметрыПоляВвода));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыПериодПотребности",
		"Объект.Товары.ПериодПотребности",
		ПараметрыПоляВвода));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыПриоритетЗакупок",
		"Объект.Товары.Приоритет",
		ПараметрыПоляВвода));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыМенеджерЗакупок",
		"Объект.Товары.Менеджер",
		ПараметрыПоляВвода));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыПроектЗакупок",
		"Объект.Товары.Проект",
		ПараметрыПоляВвода));
	ДобавляемыеЭлементы.Добавить(ПолучитьПараметрыЭлементаФормы(
		"ТоварыДоговорСПокупателем",
		"Объект.Товары.ДоговорСПокупателем",
		ПараметрыПоляВвода));
	Возврат ДобавляемыеЭлементы;
КонецФункции

Функция ПолучитьСтандартныеПараметрыПоляВвода()
	ПараметрыПоляВвода = Новый Структура;
	ПараметрыПоляВвода.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыПоляВвода.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ПараметрыПоляВвода.Вставить("МаксимальнаяШирина", 28);
	Возврат ПараметрыПоляВвода;
КонецФункции

Функция ДобавитьЭлементыТаблицыТоварыКакПоляВвода(Элементы, 
												  ЭлементРодитель,
												  НастройкиПолей)
	СозданныеПоля = Новый Массив;
	Для Каждого НастройкиПоля Из НастройкиПолей Цикл
		ВставитьПередЭлементом = ?(ПустаяСтрока(НастройкиПоля.ВставитьПередЭлементом),
			Неопределено,
			Элементы.Найти(НастройкиПоля.ВставитьПередЭлементом));
		ОписаниеСобытий = Неопределено;
		НастройкиПоля.Свойство("ОписаниеСобытий", ОписаниеСобытий);
		СозданныеПоля.Добавить(ФормыУХ.СоздатьПолеФормы(
			Элементы,
			НастройкиПоля.Имя,
			НастройкиПоля.Заголовок, 
			НастройкиПоля.ПутьКДанным,
			НастройкиПоля.Вид,
			ЭлементРодитель,
			ВставитьПередЭлементом,
			НастройкиПоля.ПараметрыПоляВвода,
			ОписаниеСобытий));
	КонецЦикла;
	Возврат СозданныеПоля;
КонецФункции

// Создаем элементы, если включено использование ЦУЗ.
// Переключение по виду договора не используем.
// Любой заказ поставщику будет иметь реквизиты и элементы ЦУЗ,
// даже если договор не подразумевает план поставок.
// Идея в том, чтобы не переинециализировать форму в случае
// смены договора.
//
Процедура ФормаДокумента_ИнициализироватьФормуЦУЗ(Форма)
	ФормаДокумента_СоздатьРеквизитыФормы(Форма);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
				И НЕ ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		ФормаДокумента_СоздатьЭлементыФормы(Форма.Элементы);
		ФормаДокумента_ПодключитьОбработчикиСобытийERPЭлементовФормы(Форма);
		ФормаДокумента_СоздатьКомандыЗаполненияТоваров(Форма, "ГруппаТоварыЗаполнить");
		ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаДокумента_СоздатьРеквизитыФормы(Форма)
	ДобавляемыеРеквизиты = Новый Массив();
	ФормыУХ.СоздатьДобавитьРеквизитФормы(
		Форма,
		ДобавляемыеРеквизиты,
		"ХарактеристикиИсходныеИспользуются",
		"Булево",
		"Объект.Товары");
	ФормыУХ.СоздатьДобавитьРеквизитФормы(
		Форма,
		ДобавляемыеРеквизиты,
		"ИспользуетсяУправлениеЗакупками",
		"Булево");
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаДокумента_ПодключитьОбработчикиСобытийERPЭлементовФормы(Форма)
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(
		Форма, 
		Форма.Элементы.Склад,
		"ПриИзменении",
		"Подключаемый_УХ_ПолеФормы_ПриИзменении");
КонецПроцедуры

Процедура ФормаДокумента_СоздатьЭлементыФормы(Элементы)
	ПараметрыПоляВвода = ПолучитьСтандартныеПараметрыПоляВвода();
	ФормыУХ.СоздатьПолеФормы(
		Элементы,
		"МестоПоставки",
		"", 
		"Объект.МестоПоставки",
		ВидПоляФормы.ПолеВвода,
		Элементы.ШапкаПраво,
		Элементы.Склад,
		ПараметрыПоляВвода,
		СоздатьОписаниеСобытий(
			"ПриИзменении",
			"Подключаемый_УХ_ПолеФормы_ПриИзменении"));		
	// Поля табличной части Товары редактировать запрещено.
	ДобавитьЭлементыТаблицыТоварыКакПоляВвода(
		Элементы,
		Элементы.Товары,
		ПолучитьПараметрыДобавляемыхЭлементовТЧТовары(ПараметрыПоляВвода));
КонецПроцедуры
	
Процедура ФормаДокумента_СоздатьКомандыЗаполненияТоваров(Форма, ИмяГруппыКоманд)
	Элементы = Форма.Элементы;
	ФормыУХ.СоздатьКоманду(
		Форма, 
		"ЗаполнитьПлановымиПотребностямиУХ", 
		"Заполнить по плану поставок", 
		"Подключаемый_УХ_ЗаполнитьПлановымиПотребностями");
	ФормыУХ.СоздатьКоманду(
		Форма, 
		"ПодборИзОстатковПланаПоставокУХ", 
		"Подбор из плана поставок", 
		"Подключаемый_УХ_ПодборИзПланаПоставок",
		БиблиотекаКартинок.Подбор);
	ФормыУХ.СоздатьКнопкуФормы(
		Элементы, 
		"ТоварыЗаполнитьПлановымиПотребностямиУХ",
		"",
		"ЗаполнитьПлановымиПотребностямиУХ",
		ВидКнопкиФормы.КнопкаКоманднойПанели,
		Элементы[ИмяГруппыКоманд]);
	ФормыУХ.СоздатьКнопкуФормы(
		Элементы, 
		"ТоварыПодборИзОстатковПланаПоставокУХ",
		"",
		"ПодборИзОстатковПланаПоставокУХ",
		ВидКнопкиФормы.КнопкаКоманднойПанели,
		Элементы[ИмяГруппыКоманд]);
КонецПроцедуры

Процедура СоздатьЭлементыФормыСписка(Форма)
	Если ПолучитьФункциональнуюОпцию(
			"ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
			Возврат;
		КонецЕсли;
		Элементы = Форма.Элементы;
		ПараметрыПоляВвода = ПолучитьСтандартныеПараметрыПоляВвода();
		ВстраиваниеУХ.СоздатьПолеФормы(
			Элементы,
			"МестоПоставки",
			"", 
			"Список.Ссылка.МестоПоставки",
			ВидПоляФормы.ПолеВвода,
			Элементы.Список,
			Элементы.СписокМенеджер,
			ПараметрыПоляВвода);
		ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьПараметрыЭлементаФормы(Имя, 
									   ПутьКДанным,
									   ПараметрыПоляВвода,
									   ВставитьПередЭлементом="",
									   Заголовок="",
									   Вид=Неопределено,
									   ОписаниеСобытий=Неопределено)
	ПараметрыЭлемента = Новый Структура;
	ПараметрыЭлемента.Вставить("Имя", Имя);
	ПараметрыЭлемента.Вставить("ПутьКДанным", ПутьКДанным);
	ПараметрыЭлемента.Вставить("Заголовок", Заголовок);
	ПараметрыЭлемента.Вставить("Вид", 
		?(Вид=Неопределено, ВидПоляФормы.ПолеВвода, Вид));
	ПараметрыЭлемента.Вставить("ВставитьПередЭлементом", ВставитьПередЭлементом);
	ПараметрыЭлемента.Вставить("ПараметрыПоляВвода", ПараметрыПоляВвода);
	ПараметрыЭлемента.Вставить("ОписаниеСобытий", ОписаниеСобытий); 
	Возврат ПараметрыЭлемента;
КонецФункции

// Создает структуру, в которой ключами будут имена из СтрокаИменСобытий,
// а значениями будут соответствующием им имена из СтрокаИменФункций.
// Разделитель имен в строке - запятая. Пробелы допускаются, но будут
// исключены из имен.
//
Функция СоздатьОписаниеСобытий(СтрокаИменСобытий, СтрокаИменФункций)
	Результат = Новый Структура;
	мИменаСобытий = СтрРазделить(СтрокаИменСобытий, ",", Ложь);
	мИменаФункций = СтрРазделить(СтрокаИменФункций, ",", Ложь);
	КолвоИмен = Мин(мИменаСобытий.Количество(), мИменаФункций.Количество()) - 1;
	Для Ном = 0 По КолвоИмен Цикл
		Результат.Вставить(
			СокрЛП(мИменаСобытий[Ном]),
			СокрЛП(мИменаФункций[Ном]));
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция СоздатьСвязиПараметровВыбора(мСвязейПараметровВыбора)
	Возврат Новый ФиксированныйМассив(мСвязейПараметровВыбора);
КонецФункции

Функция ПолучитьПараметрыПоляВводаХарактеристикиНоменклатуры(ПараметрыПоляВвода)
	ПараметрыХарактеристики = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		ПараметрыПоляВвода);
	ПараметрыХарактеристики.Вставить(
		"СвязиПараметровВыбора",
		СоздатьСвязиПараметровВыбора(
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
				Новый СвязьПараметраВыбора(
					"Номенклатура",
					"Элементы.Товары.ТекущиеДанные.НоменклатураИсходная"))));
	Возврат ПараметрыХарактеристики;
КонецФункции

#КонецОбласти
