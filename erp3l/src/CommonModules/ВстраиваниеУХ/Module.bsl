#Область ПрограммныйИнтерфейс

Процедура ПринудительноУстановитьКонстантуВЗначениеИстина(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Источник.Значение = Истина;

КонецПроцедуры

Процедура ПринудительноУстановитьКонстантуВЗначениеЛожь(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	Источник.Значение = Ложь;

КонецПроцедуры


#Область ТипыДокументов

Функция ТипДокументСсылкаПоступлениеТоваровУслуг() Экспорт
	Возврат Тип("ДокументСсылка.ПриобретениеТоваровУслуг");
КонецФункции

Функция ТипДокументСсылкаВозвратТоваровОтПокупателя() Экспорт
	Возврат Тип("ДокументСсылка.ВозвратТоваровОтКлиента");
КонецФункции

Функция ТипДокументСсылкаРасходныйКассовыйОрдер() Экспорт
	Возврат Тип("ДокументСсылка.РасходныйКассовыйОрдер");
КонецФункции

Функция ТипДокументСсылкаСписаниеСРасчетногоСчета() Экспорт
	Возврат Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
КонецФункции

Функция ТипДокументСсылкаПоступлениеНаРасчетныйСчет() Экспорт
	Возврат Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств");
КонецФункции

Функция ТипДокументСсылкаПриходныйКассовыйОрдер() Экспорт
	Возврат Тип("ДокументСсылка.ПриходныйКассовыйОрдер");
КонецФункции

Функция ТипДокументСсылкаПлатежноеПоручение() Экспорт
	Возврат Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
КонецФункции

#КонецОбласти

#Область Справочник_Контрагенты

Процедура ЗаполнитьКонтрагентаПоОрганизации(ОбъектКонтрагент, Организация) Экспорт

	Если ОбъектКонтрагент.ДополнительныеСвойства.Свойство("ЭтоНоваяОрганизацияУХ")
		И (ОбъектКонтрагент.ДополнительныеСвойства.ЭтоНоваяОрганизацияУХ = Истина) Тогда
	
		//Только при создании организации - заполняем реквизиты Наименование,НаименованиеПолное,ГруппаКонтрагента,ПометкаУдаления
		//в других случаях (например, перезапись контрагента) - реквизиты могут отличаться(для сопоставления по этим реквизитам через ВИБ)
		
		ОбъектКонтрагент.Наименование		= Организация.Наименование;
		ОбъектКонтрагент.ПометкаУдаления	= Организация.ПометкаУдаления;
		ОбъектКонтрагент.ГруппаКонтрагента	= Организация.ГруппаКонтрагента;
		
		ОбъектКонтрагент.НаименованиеПолное = Организация.НаименованиеПолное;
		
	КонецЕсли;
	
	ОбъектКонтрагент.ОрганизационнаяЕдиница	= Организация;

	РеквизитыЗаполнения = "ЮридическоеФизическоеЛицо, ОбособленноеПодразделение, ИНН, КПП, КодПоОКПО, ГруппаКонтрагента";
	
	УстановитьПривилегированныйРежим(Истина);//организация может быть недоступна при RLS
	ЗаполнитьЗначенияСвойств(ОбъектКонтрагент, Организация, РеквизитыЗаполнения);
	
	ОбъектКонтрагент.РегистрационныйНомер = Организация.ОГРН;
	
	ОбъектКонтрагент.КонтактнаяИнформация.Очистить();

	Для каждого ЭлементКонтактнойИнформации Из Организация.КонтактнаяИнформация Цикл

		Если ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации
			ИЛИ ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации
			ИЛИ ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации
			ИЛИ ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации
			ИЛИ ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации
			ИЛИ ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации
			ИЛИ ЭлементКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации Тогда
			
			НоваяСтрокаКонтактнойИнформации = ОбъектКонтрагент.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКонтактнойИнформации, ЭлементКонтактнойИнформации);
			
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
			КонецЕсли;
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			КонецЕсли;
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ПочтовыйАдресКонтрагента;
			КонецЕсли;
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента;
			КонецЕсли;
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФаксОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ФаксКонтрагенты;
			КонецЕсли;
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента;
			КонецЕсли;
			Если НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияОрганизации Тогда
				НоваяСтрокаКонтактнойИнформации.Вид = Справочники.ВидыКонтактнойИнформации.ДругаяИнформацияКонтрагенты;
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;

	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Организации

Процедура ПриЗаписиЭлементаСправочникаОрганизации(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьПодокументнойТрансляции();
	
	Если Источник.ЭлиминирующаяОрганизация ИЛИ НЕ (Источник.ИспользоватьВРегламентированномУчете ИЛИ Источник.ИностранныйНалоговыйРезидент) Тогда
		Возврат;
	КонецЕсли;
	
	МасКонтрагенты = ПолучитьКонтрагентовПоОрганизации(Источник.Ссылка);
	Если МасКонтрагенты.Количество() = 0 И ЗначениеЗаполнено(Источник.ИНН) Тогда
		МасКонтрагенты = ПолучитьКонтрагентовПоИННКПП(Источник.ИНН, Источник.КПП);
	КонецЕсли;
	Если МасКонтрагенты.Количество() = 0 Тогда
		МасКонтрагенты.Добавить(Неопределено);
	КонецЕсли;
	
	Для каждого ТекущийКонтрагент Из МасКонтрагенты Цикл
		
		Если ТекущийКонтрагент = Неопределено Тогда
			
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.УстановитьНовыйКод();
		Иначе			
			КонтрагентОбъект = ТекущийКонтрагент.ПолучитьОбъект();
		КонецЕсли;
		
		ЭтоНовыйУХ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ЭтоНовыйУХ");
		
		СтруктураЗаполнения = Новый Структура("Организация,ЭтоНоваяОрганизацияУХ", Источник.Ссылка, ЭтоНовыйУХ);
		КонтрагентОбъект.Заполнить(СтруктураЗаполнения);
		
		КонтрагентОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
		КонтрагентОбъект.Наименование = Источник.Наименование;
		
		Попытка
			КонтрагентОбъект.Записать();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(НСтр("ru = 'Не удалось сформировать контрагента, соответствующего организации ""%1"".'"), Источник.Наименование));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКонтрагентовПоИННКПП(ИНН, КПП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ПолучитьКонтрагентовПоОрганизации(ОрганизацияИсточник) Экспорт
	
	Если Не ЗначениеЗаполнено(ОрганизацияИсточник) Тогда
		// Для обеспечения совместимости с вызовами, которые ожидают только массив.
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ОрганизационнаяЕдиница В (&ОрганизационнаяЕдиница)");
	
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияИсточник);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

Процедура ПроверитьВозможностьПодокументнойТрансляции() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НЕ ПодокументнаяТрансляция.Значение КАК НовоеЗначение
	|ИЗ
	|	Константа.ПодокументнаяТрансляция КАК ПодокументнаяТрансляция
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА КАК ЕстьПоДокументам
	|					ИЗ
	|						РегистрСведений.УчетныеПолитикиМСФО КАК т
	|					ГДЕ     
	|						т.УчетнаяПолитика В
	|							(ВЫБРАТЬ
	|								д.Ссылка
	|							ИЗ
	|								Документ.УчетнаяПолитикаМСФО КАК д
	|							ГДЕ
	|								д.СпособТрансляции В (ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.ПоДокументамОбработка), ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.ПоДокументамФоновоеЗадание), ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.ПоДокументамПриПроведении))))
	|				ТОГДА ПодокументнаяТрансляция.Значение = ЛОЖЬ
	|			КОГДА ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						Справочник.ШаблоныТрансформационныхКорректировок КАК ШаблоныТрансформационныхКорректировок
	|					ГДЕ
	|						НЕ ШаблоныТрансформационныхКорректировок.ДокументБД = ЗНАЧЕНИЕ(Справочник.ДокументыБД.ПустаяСсылка))
	|				ТОГДА ПодокументнаяТрансляция.Значение = ЛОЖЬ
	|			ИНАЧЕ ПодокументнаяТрансляция.Значение = ИСТИНА
	|		КОНЕЦ");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;	
	КонецЕсли;
	
	Константы.ПодокументнаяТрансляция.Установить(РезультатЗапроса.Выгрузить()[0].НовоеЗначение);
		
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область РСБУ_ФИ

#Область ДоработкиЗапросов

Процедура НачисленияКредитовИДепозитов_ДоработатьЗапрос(ТекстЗапроса) Экспорт

	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикНачисленийКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикНачисленийКредитовИДепозитов(),
						"ГрафикНачислений",
						Ложь,
						"&Организация"
					);

	//уберем упоминание ВариантыГрафиков
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыГрафиков.Владелец", "ГрафикНачислений.ПредметГрафика");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыГрафиков.Используется", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВариантыГрафиков.ПометкаУдаления", "ЛОЖЬ");
	
КонецПроцедуры

Процедура НачислениеСписаниеРезервовПоСомнительнымДолгам_ДоработатьЗапрос(ТекстЗапроса) Экспорт

	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикОплатКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
						"График",
						Истина,
						"&Организация"
					);

КонецПроцедуры

Процедура ГрафикПлатежейКредитовДепозитов_ДоработатьЗапрос(ТекстЗапроса) Экспорт
	
	ОтборПоОрганизации = "ВЫРАЗИТЬ(&Договор КАК Справочник.ДоговорыКредитовИДепозитов).Организация";
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикОплатКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
						"ГрафикОплат",
						Истина,
						ОтборПоОрганизации
					);

КонецПроцедуры

Процедура ФинансовыеИнструменты_ДоработатьЗапрос(ТекстЗапроса) Экспорт

	ОтборПоОрганизации = "&МассивОрганизаций";
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикОплатКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
						"График",
						Ложь,
						ОтборПоОрганизации
					);

	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикНачисленийКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикНачисленийКредитовИДепозитов(),
						"График",
						Ложь,
						ОтборПоОрганизации
					);
		
КонецПроцедуры

Процедура РеглУчетВыборкиСерверПовтИсп_ДоработатьЗапрос(ТекстЗапроса) Экспорт

	ОтборПоОрганизации = 
	"ВЫБРАТЬ
	|	т.Договор.Организация КАК Организация
	|ИЗ
	|	ВтКредитыДепозиты КАК т";
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикОплатКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
						"ГрафикОплатКредитовИДепозитов",
						Ложь,
						ОтборПоОрганизации
					);

КонецПроцедуры

Процедура ДоговорыКредитовИДепозитов_ДоработатьЗапрос(ТекстЗапроса) Экспорт

	ОтборПоОрганизации = "ВЫРАЗИТЬ(&Ссылка КАК Справочник.ДоговорыКредитовИДепозитов).Организация";
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикОплатКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
						"ГрафикОплатКредитовИДепозитов",
						Ложь,
						ОтборПоОрганизации
					);
					
	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикТраншейКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикТраншейКредитовИДепозитов(),
						"ГрафикТраншейКредитовИДепозитов",
						Ложь,
						ОтборПоОрганизации
					);
КонецПроцедуры

Процедура РегламентнаяОперация_ДоработатьЗапрос(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
	                    ТекстЗапроса,
						"РегистрСведений.ГрафикОплатКредитовИДепозитов",
						ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
						"График",
						Истина,
						"&Организация"
					);
	
КонецПроцедуры

Процедура ГрафикПлатежей_ДоработатьЗапрос(ТекстЗапроса) Экспорт

	ОтборПоОрганизации = 
	"ВЫБРАТЬ
	|	т.Организация КАК Организация
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК т
	|ГДЕ
	|	т.Ссылка В(&ОбъектыОплаты)";
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
		                    ТекстЗапроса,
							"РегистрСведений.ГрафикТраншейКредитовИДепозитов",
							ТекстЗапроса_ЗаменитьГрафикТраншейКредитовИДепозитов(),
							"График",
							Истина,
							ОтборПоОрганизации
						);
	
	ТекстЗапроса = ДоработатьЗапросГрафика(
		                    ТекстЗапроса,
							"РегистрСведений.ГрафикОплатКредитовИДепозитов",
							ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов(),
							"График",
							Истина,
							ОтборПоОрганизации
						);
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапроса_ЗаменитьГрафикТраншейКредитовИДепозитов()

	Возврат
	"ВЫБРАТЬ
	|	ВерсииРасчетов.ВерсияГрафика КАК ВариантГрафика,
	|	Графики.ПредметГрафика КАК ПредметГрафика,
	|	Графики.Период КАК Период,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА Графики.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)
	|				ТОГДА 0
	|			КОГДА Графики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Графики.Сумма
	|			ИНАЧЕ -Графики.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ГрафикиИтог.Сумма
	|			ИНАЧЕ -ГрафикиИтог.Сумма
	|		КОНЕЦ) КАК СуммаИтог
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			,
	|			План = ЛОЖЬ
	|				И ПредметГрафика ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|				И ОпорныйГрафик
	|				И &ОтборПоОрганизации) КАК ВерсииРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК Графики
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК ГрафикиИтог
	|			ПО Графики.Регистратор = ГрафикиИтог.Регистратор
	|				И Графики.ПредметГрафика = ГрафикиИтог.ПредметГрафика
	|				И Графики.Период >= ГрафикиИтог.Период
	|				И Графики.ЭлементСтруктурыЗадолженности = ГрафикиИтог.ЭлементСтруктурыЗадолженности
	|				И (&ИспользоватьИтоги)
	|		ПО ВерсииРасчетов.ВерсияГрафика = Графики.Регистратор
	|			И ВерсииРасчетов.ПредметГрафика = Графики.ПредметГрафика
	|			И (Графики.ЭлементСтруктурыЗадолженности В (ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииРасчетов.ВерсияГрафика,
	|	Графики.ПредметГрафика,
	|	Графики.Период";

КонецФункции

Функция ТекстЗапроса_ЗаменитьГрафикОплатКредитовИДепозитов()

	Возврат 
	"ВЫБРАТЬ
	|	ГрафикБезИтогов.ВариантГрафика КАК ВариантГрафика,
	|	ГрафикБезИтогов.ПредметГрафика КАК ПредметГрафика,
	|	ГрафикБезИтогов.Период КАК Период,
	|	МАКСИМУМ(ГрафикБезИтогов.Сумма) КАК Сумма,
	|	МАКСИМУМ(ГрафикБезИтогов.Проценты) КАК Проценты,
	|	МАКСИМУМ(ГрафикБезИтогов.Комиссия) КАК Комиссия,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ГрафикиИтог.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаИтог,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Проценты)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ГрафикиИтог.Сумма
	|			ИНАЧЕ -ГрафикиИтог.Сумма
	|		КОНЕЦ) КАК ПроцентыИтог,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Комиссии)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ГрафикиИтог.Сумма
	|			ИНАЧЕ -ГрафикиИтог.Сумма
	|		КОНЕЦ) КАК КомиссияИтог
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВерсииРасчетов.ВерсияГрафика КАК ВариантГрафика,
	|		Графики.ПредметГрафика КАК ПредметГрафика,
	|		Графики.Период КАК Период,
	|		СУММА(ВЫБОР
	|				КОГДА Графики.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)
	|					ТОГДА 0
	|				КОГДА Графики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА Графики.Сумма
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Сумма,
	|		СУММА(ВЫБОР
	|				КОГДА Графики.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Проценты)
	|					ТОГДА 0
	|				КОГДА Графики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА Графики.Сумма
	|				ИНАЧЕ -Графики.Сумма
	|			КОНЕЦ) КАК Проценты,
	|		СУММА(ВЫБОР
	|				КОГДА Графики.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Комиссии)
	|					ТОГДА 0
	|				КОГДА Графики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|					ТОГДА Графики.Сумма
	|				ИНАЧЕ -Графики.Сумма
	|			КОНЕЦ) КАК Комиссия
	|	ИЗ
	|		РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|				,
	|				План = ЛОЖЬ
	|					И ПредметГрафика ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|					И ОпорныйГрафик
	|					И &ОтборПоОрганизации) КАК ВерсииРасчетов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК Графики
	|			ПО ВерсииРасчетов.ВерсияГрафика = Графики.Регистратор
	|				И ВерсииРасчетов.ПредметГрафика = Графики.ПредметГрафика
	|				И (Графики.Операция.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВерсииРасчетов.ВерсияГрафика,
	|		Графики.ПредметГрафика,
	|		Графики.Период) КАК ГрафикБезИтогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК ГрафикиИтог
	|		ПО ГрафикБезИтогов.ВариантГрафика = ГрафикиИтог.Регистратор
	|			И ГрафикБезИтогов.ПредметГрафика = ГрафикиИтог.ПредметГрафика
	|			И ГрафикБезИтогов.Период >= ГрафикиИтог.Период
	|			И (ГрафикиИтог.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств))
	|			И (&ИспользоватьИтоги)
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикБезИтогов.ВариантГрафика,
	|	ГрафикБезИтогов.ПредметГрафика,
	|	ГрафикБезИтогов.Период";

КонецФункции

Функция ТекстЗапроса_ЗаменитьГрафикНачисленийКредитовИДепозитов()

	Возврат
	"ВЫБРАТЬ
	|	ВерсииРасчетов.ВерсияГрафика КАК ВариантГрафика,
	|	Графики.ПредметГрафика КАК ПредметГрафика,
	|	Графики.Период КАК Период,
	|	СУММА(ВЫБОР
	|			КОГДА Графики.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Проценты)
	|				ТОГДА 0
	|			КОГДА Графики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Графики.Сумма
	|			ИНАЧЕ Графики.Сумма
	|		КОНЕЦ) КАК Проценты,
	|	СУММА(ВЫБОР
	|			КОГДА Графики.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Комиссии)
	|				ТОГДА 0
	|			КОГДА Графики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА Графики.Сумма
	|			ИНАЧЕ Графики.Сумма
	|		КОНЕЦ) КАК Комиссия,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ГрафикиИтог.Сумма
	|			ИНАЧЕ ГрафикиИтог.Сумма
	|		КОНЕЦ) КАК СуммаИтог,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Проценты)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ГрафикиИтог.Сумма
	|			ИНАЧЕ -ГрафикиИтог.Сумма
	|		КОНЕЦ) КАК ПроцентыИтог,
	|	СУММА(ВЫБОР
	|			КОГДА ГрафикиИтог.ЭлементСтруктурыЗадолженности <> ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Комиссии)
	|				ТОГДА 0
	|			КОГДА ГрафикиИтог.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА ГрафикиИтог.Сумма
	|			ИНАЧЕ -ГрафикиИтог.Сумма
	|		КОНЕЦ) КАК КомиссияИтог
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			,
	|			План = ЛОЖЬ
	|				И ПредметГрафика ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|				И ОпорныйГрафик
	|				И &ОтборПоОрганизации) КАК ВерсииРасчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК Графики
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК ГрафикиИтог
	|			ПО Графики.Регистратор = ГрафикиИтог.Регистратор
	|				И Графики.ПредметГрафика = ГрафикиИтог.ПредметГрафика
	|				И Графики.Период >= ГрафикиИтог.Период
	|				И (&ИспользоватьИтоги)
	|		ПО ВерсииРасчетов.ВерсияГрафика = Графики.Регистратор
	|			И ВерсииРасчетов.ПредметГрафика = Графики.ПредметГрафика
	|			И (Графики.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов))
	|			И (Графики.ЭлементСтруктурыЗадолженности В (ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Проценты), ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Комиссии), ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.Штрафы)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииРасчетов.ВерсияГрафика,
	|	Графики.ПредметГрафика,
	|	Графики.Период";

КонецФункции

Функция ДоработатьЗапросГрафика(ТекстЗапроса, ТекстПоиска, ТекстЗамены, ПсевдонимПоиска,
							ИспользоватьИтоги = Истина, ОтборПоОрганизации = Неопределено)

	Замена_ТекстЗапроса = СтрЗаменить(ТекстЗамены, "&ИспользоватьИтоги", ?(ИспользоватьИтоги, "ИСТИНА", "ЛОЖЬ"));
		
	ТекстОрганизация = ?(ЗначениеЗаполнено(ОтборПоОрганизации), СтрШаблон("Организация В (%1)", ОтборПоОрганизации), "");
	Замена_ТекстЗапроса = СтрЗаменить(Замена_ТекстЗапроса, "&ОтборПоОрганизации", ТекстОрганизация);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимПоиска + ".ВариантГрафика.Используется", "ИСТИНА");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимПоиска + ".ВариантГрафика.ПометкаУдаления", "ЛОЖЬ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимПоиска + ".ВариантГрафика.Владелец", 
												ПсевдонимПоиска + ".ПредметГрафика");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ПсевдонимПоиска + ".ВариантГрафика.ДатаПервогоТранша", 
												ПсевдонимПоиска + ".ВариантГрафика.ДатаНачалаДействия");
    
	Возврат СтрЗаменить(ТекстЗапроса, ТекстПоиска, СтрШаблон("( %1 )", Замена_ТекстЗапроса));

КонецФункции

#КонецОбласти

#Область МСФО_ВНА

Процедура ПроверитьУникальностьНомераВНА(Источник, Отказ = Ложь, ВызыватьИсключение = Ложь) Экспорт 

	отОС = УчетМСФОПовтИспУХ.ПолучитьОписаниеТиповОбъектовОС();
	Если Не отОС.СодержитТип(ТипЗнч(Источник)) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Источник.ИнвентарныйНомерМСФО) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеСредства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.Ссылка <> &Ссылка
	|	И ОсновныеСредства.ИнвентарныйНомерМСФО = &ИнвентарныйНомерМСФО");
	
	Запрос.УстановитьПараметр("ИнвентарныйНомерМСФО", Источник.ИнвентарныйНомерМСФО);
	Запрос.УстановитьПараметр("Ссылка", Источник.Ссылка);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонОшибки = НСтр("ru = 'Инвентарный номер МСФО <%1> уже существует'");	
	ТекстОшибки = СтрШаблон(ШаблонОшибки, Источник.ИнвентарныйНомерМСФО);
	Если ВызыватьИсключение Тогда
		ВызватьИсключение ТекстОшибки;
	Иначе 
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Источник.Ссылка, , , Отказ);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВнаУчитываемыеПараллельно() Экспорт

	#Область Запрос
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПараметрыУчетаВНАПоУмолчанию.ВНА КАК ВНА,
	|	ВЫБОР
	|		КОГДА ПараметрыУчетаВНАПоУмолчанию.ВНА ССЫЛКА Справочник.ОбъектыЭксплуатации
	|			ТОГДА 1
	|		КОГДА ПараметрыУчетаВНАПоУмолчанию.ВНА ССЫЛКА Справочник.НематериальныеАктивы
	|			ТОГДА 2
	|		КОГДА ПараметрыУчетаВНАПоУмолчанию.ВНА ССЫЛКА Справочник.Номенклатура
	|			ТОГДА 3
	|		КОГДА ПараметрыУчетаВНАПоУмолчанию.ВНА ССЫЛКА Справочник.ОбъектыСтроительства
	|			ТОГДА 4
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ТипВНА,
	|	ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА
	|ПОМЕСТИТЬ ТаблицаИсточникВНА
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАПоУмолчанию КАК ПараметрыУчетаВНАПоУмолчанию
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ЛОЖЬ
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПараметрыУчетаВНАПоУмолчанию.ВНА ССЫЛКА Справочник.Номенклатура
	|				ТОГДА ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА.КлассВНА = ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТипВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Ссылка КАК ВНА
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК т
	|ГДЕ
	|	т.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				т.ВНА
	|			ИЗ
	|				ТаблицаИсточникВНА КАК т
	|			ГДЕ
	|				т.ТипВНА = 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Ссылка
	|ИЗ
	|	Справочник.НематериальныеАктивы КАК т
	|ГДЕ
	|	т.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				т.ВНА
	|			ИЗ
	|				ТаблицаИсточникВНА КАК т
	|			ГДЕ
	|				т.ТипВНА = 2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Ссылка
	|ИЗ
	|	Справочник.Номенклатура КАК т
	|ГДЕ
	|	т.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				т.ВНА
	|			ИЗ
	|				ТаблицаИсточникВНА КАК т
	|			ГДЕ
	|				т.ТипВНА = 3)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Ссылка
	|ИЗ
	|	Справочник.ОбъектыСтроительства КАК т
	|ГДЕ
	|	т.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				т.ВНА
	|			ИЗ
	|				ТаблицаИсточникВНА КАК т
	|			ГДЕ
	|				т.ТипВНА = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Ссылка
	|ИЗ
	|	Справочник.ОбъектыУчетаРезервовПредстоящихРасходов КАК т
	|ГДЕ
	|	т.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				т.ВНА
	|			ИЗ
	|				ТаблицаИсточникВНА КАК т
	|			ГДЕ
	|				т.ТипВНА = 5)");
		
	#КонецОбласти 
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВНА");
			
КонецФункции

Функция ТекстЗапроса_ЦеныНоменклатуры(НомераТаблиц = Неопределено) Экспорт

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("ЦеныНоменклатуры", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&Дата,
	|			ВидЦены В (&ИсточникДляЧистойЦеныПродажиЗапасов)
	|				И Валюта = &ФункциональнаяВалюта
	|				И Номенклатура В (&Номенклатура)) КАК ЦеныНоменклатуры";

КонецФункции

Функция ТекстЗапроса_втЦеныНоменклатуры(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("втЦеныНоменклатуры", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ПОМЕСТИТЬ втЦеныНоменклатуры
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОкончанияПериода,
	|			ВидЦены В (&ИсточникДляЧистойЦеныПродажиЗапасов)
	|				И Валюта = &ФункциональнаяВалюта
	|				И Номенклатура В
	|					(ВЫБРАТЬ
	|						т.Номенклатура
	|					ИЗ
	|						втОстаткиОборотыНоменклатуры КАК т)) КАК ЦеныНоменклатуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура";

КонецФункции

#Область Заполнение_НачальныеОстаткиВНА

Функция ТекстЗапроса_ПараметрыДляЗаполненияВНА()

	Возврат
	"ВЫБРАТЬ
	|	т.ВНА КАК ВНА,
	|	т.ГруппаВНА КАК ГруппаВНА
	|ПОМЕСТИТЬ втУчитываемыеВНА
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАМСФО.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация = &Организация
	|				И Сценарий = &Сценарий
	|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|				И Активность) КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ВНА КАК ВНА,
	|	т.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА
	|ПОМЕСТИТЬ ПараметрыУчетаГруппВНАПоУмолчанию
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАПоУмолчанию КАК т
	|ГДЕ
	|	НЕ т.ВНА В
	|				(ВЫБРАТЬ
	|					т.ВНА
	|				ИЗ
	|					втУчитываемыеВНА КАК т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВНА.ВНА КАК ВНА,
	|	ТаблицаВНА.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	ВЫБОР
	|		КОГДА ТаблицаВНА.ВНА = ТаблицаВНА.ГруппаВНА
	|			ТОГДА 0
	|		КОГДА ТаблицаВНА.ВНА.Родитель = ТаблицаВНА.ГруппаВНА
	|			ТОГДА 1
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель = ТаблицаВНА.ГруппаВНА
	|			ТОГДА 2
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель = ТаблицаВНА.ГруппаВНА
	|			ТОГДА 3
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель.Родитель = ТаблицаВНА.ГруппаВНА
	|			ТОГДА 4
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель = ТаблицаВНА.ГруппаВНА
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втПриоритеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаВНА.Ссылка КАК ВНА,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ВНА КАК ГруппаВНА,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА
	|	ИЗ
	|		Справочник.ОбъектыЭксплуатации КАК ТаблицаВНА
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыУчетаГруппВНАПоУмолчанию КАК ПараметрыУчетаГруппВНАПоУмолчанию
	|			ПО (ТИПЗНАЧЕНИЯ(ПараметрыУчетаГруппВНАПоУмолчанию.ВНА) = ТИП(Справочник.ОбъектыЭксплуатации))
	|				И (ТаблицаВНА.Ссылка = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВНА.Ссылка,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ВНА,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ПараметрыУчетаВНА
	|	ИЗ
	|		Справочник.НематериальныеАктивы КАК ТаблицаВНА
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыУчетаГруппВНАПоУмолчанию КАК ПараметрыУчетаГруппВНАПоУмолчанию
	|			ПО (ТаблицаВНА.Ссылка = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВНА.Ссылка,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ВНА,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ПараметрыУчетаВНА
	|	ИЗ
	|		Справочник.ОбъектыСтроительства КАК ТаблицаВНА
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыУчетаГруппВНАПоУмолчанию КАК ПараметрыУчетаГруппВНАПоУмолчанию
	|			ПО (ТаблицаВНА.Ссылка = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаВНА.Ссылка,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ВНА,
	|		ПараметрыУчетаГруппВНАПоУмолчанию.ПараметрыУчетаВНА
	|	ИЗ
	|		Справочник.Номенклатура КАК ТаблицаВНА
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПараметрыУчетаГруппВНАПоУмолчанию КАК ПараметрыУчетаГруппВНАПоУмолчанию
	|			ПО (ТаблицаВНА.Ссылка = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА
	|					ИЛИ ТаблицаВНА.Ссылка.Родитель.Родитель.Родитель.Родитель = ПараметрыУчетаГруппВНАПоУмолчанию.ВНА)) КАК ТаблицаВНА
	|ГДЕ
	|	НЕ ТаблицаВНА.ВНА В
	|				(ВЫБРАТЬ
	|					т.ВНА
	|				ИЗ
	|					втУчитываемыеВНА КАК т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПриоритеты.ВНА КАК ВНА,
	|	МАКСИМУМ(втПриоритеты.ПараметрыУчетаВНА) КАК ПараметрыУчетаВНА,
	|	МАКСИМУМ(втПриоритеты.ПараметрыУчетаВНА.ПараметрыУчетаНЗС) КАК ПараметрыУчетаНЗС,
	|	ЛОЖЬ КАК ЕстьВУчете
	|ПОМЕСТИТЬ втПараметрыДляЗаполненияВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		втПриоритеты.ВНА КАК ВНА,
	|		МИНИМУМ(втПриоритеты.Приоритет) КАК Приоритет
	|	ИЗ
	|		втПриоритеты КАК втПриоритеты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втПриоритеты.ВНА) КАК МинПриоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
	|		ПО МинПриоритет.ВНА = втПриоритеты.ВНА
	|			И МинПриоритет.Приоритет = втПриоритеты.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втПриоритеты.ВНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втУчитываемыеВНА.ВНА,
	|	втУчитываемыеВНА.ГруппаВНА,
	|	втУчитываемыеВНА.ГруппаВНА.ПараметрыУчетаНЗС,
	|	ИСТИНА
	|ИЗ
	|	втУчитываемыеВНА КАК втУчитываемыеВНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА";

КонецФункции // ()

Функция ТекстЗапроса_СчетаВНА()

	Возврат
	"ВЫБРАТЬ
	|	СчетаВНА.Счет КАК Счет,
	|	СчетаВНА.НЗС КАК НЗС,
	|	СчетаВНА.ОС КАК ОС,
	|	СчетаВНА.НМА КАК НМА,
	|	СчетаВНА.Амортизация КАК Амортизация,
	|	СчетаВНА.РезервПереоценки КАК РезервПереоценки,
	|	ВидСубконто1.ТолькоОбороты КАК ТолькоОбороты1,
	|	ВидСубконто2.ТолькоОбороты КАК ТолькоОбороты2,
	|	ВидСубконто3.ТолькоОбороты КАК ТолькоОбороты3
	|ПОМЕСТИТЬ втСчетаВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		т.Ссылка КАК Счет,
	|		ИСТИНА КАК НЗС,
	|		ЛОЖЬ КАК ОС,
	|		ЛОЖЬ КАК НМА,
	|		ЛОЖЬ КАК Амортизация,
	|		ЛОЖЬ КАК РезервПереоценки
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК т
	|	ГДЕ
	|		т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОборудованиеКУстановке), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		т.Ссылка,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		ЛОЖЬ,
	|		т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств)),
	|		ЛОЖЬ
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК т
	|	ГДЕ
	|		т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		т.Ссылка,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА,
	|		т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов)),
	|		ЛОЖЬ
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК т
	|	ГДЕ
	|		т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		т.Ссылка,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ЛОЖЬ,
	|		ИСТИНА
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК т
	|	ГДЕ
	|		т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриростСтоимостиПоПереоценке))) КАК СчетаВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконто1
	|		ПО СчетаВНА.Счет = ВидСубконто1.Ссылка
	|			И (ВидСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконто2
	|		ПО СчетаВНА.Счет = ВидСубконто2.Ссылка
	|			И (ВидСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконто3
	|		ПО СчетаВНА.Счет = ВидСубконто3.Ссылка
	|			И (ВидСубконто3.НомерСтроки = 3)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Счет";

КонецФункции

Функция ТекстЗапроса_ОстаткиВНА()

	Возврат
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ВНА,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	СчетаБД.Ссылка КАК Счет
	|ПОМЕСТИТЬ ОстаткиВНА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.Счет
	|				ИЗ
	|					втСчетаВНА КАК т
	|				ГДЕ
	|					НЕ т.Амортизация),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СчетаБД КАК СчетаБД
	|		ПО ХозрасчетныйОстатки.Счет = СчетаБД.СчетСсылка
	|			И (НЕ СчетаБД.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК ВНА,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстаток,
	|	СчетаБД.Ссылка КАК Счет
	|ПОМЕСТИТЬ ОстаткиАВНА
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.Счет
	|				ИЗ
	|					втСчетаВНА КАК т
	|				ГДЕ
	|					т.Амортизация),
	|			,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СчетаБД КАК СчетаБД
	|		ПО ХозрасчетныйОстатки.Счет = СчетаБД.СчетСсылка
	|			И (НЕ СчетаБД.ПометкаУдаления)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА";

КонецФункции

Функция ТекстЗапроса_ПараметрыВНАРСБУ()

	Возврат
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ВНА,
	|	НачислениеАмортизацииОСБухгалтерскийУчет.НачислятьАмортизациюБУ КАК НачислятьАмортизациюНСБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияНСБУ,
	|	ПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ КАК СпособНачисленияАмортизацииНСБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииОС.Линейный)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|		КОГДА ПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.УменьшаемогоОстатка)
	|		КОГДА ПервоначальныеСведенияОС.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|	КОНЕЦ КАК СпособНачисленияАмортизацииМСФО,
	|	ПорядокУчетаОСБУ.СтатьяРасходовБУ КАК СтатьяРасходов,
	|	ПорядокУчетаОСБУ.АналитикаРасходовБУ КАК АналитикаРасходов,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчетаНСБУ,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетАмортизацииНСБУ,
	|	ПервоначальныеСведенияОС.СпособПоступления КАК СпособПоступления,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентУскорения КАК КоэффициентУскоренияНСБУ,
	|	ПорядокУчетаОС.ОбъемНаработки КАК ПредполагаемыйОбъемПродукцииНСБУ,
	|	ПорядокУчетаОС.ПоказательНаработки КАК ПараметрВыработкиНСБУ,
	|	МестонахождениеОС.Местонахождение КАК Подразделение,
	|	ПорядокУчетаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПервоначальныеСведенияОС.Период КАК ДатаПринятияКУчетуНСБУ
	|ПОМЕСТИТЬ втПараметрыВНА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|			{(&ДатаОкончания)},
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						ОстаткиВНА КАК т)) КАК ПервоначальныеСведенияОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБУ.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК ПорядокУчетаОСБУ
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПорядокУчетаОСБУ.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						ОстаткиВНА КАК т)) КАК ПорядокУчетаОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = ПорядокУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК СчетаБухгалтерскогоУчетаОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСБУ.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)
	|					И НЕ(Регистратор ССЫЛКА Документ.СписаниеОС
	|							ИЛИ Регистратор ССЫЛКА Документ.СписаниеОС2_4)) КАК НачислениеАмортизацииОСБухгалтерскийУчет
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК МестонахождениеОС
	|		ПО ПервоначальныеСведенияОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМА.НематериальныйАктив,
	|	ИСТИНА,
	|	ПараметрыАмортизацииНМАБУ.СрокПолезногоИспользованияБУ,
	|	ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииНМА.Линейный)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|		КОГДА ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.УменьшаемогоОстатка)
	|		КОГДА ПервоначальныеСведенияНМА.МетодНачисленияАмортизацииБУ = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|	КОНЕЦ,
	|	ПорядокУчетаНМАБУ.СтатьяРасходовБУ,
	|	ПорядокУчетаНМАБУ.АналитикаРасходовБУ,
	|	ПорядокУчетаНМА.СчетУчета,
	|	ПорядокУчетаНМА.СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияНМА.СпособПоступления,
	|	ПервоначальныеСведенияНМА.Коэффициент,
	|	ПорядокУчетаНМА.ОбъемНаработки,
	|	""ПорядокУчетаНМА.ПоказательНаработки"",
	|	МестоУчетаНМА.Подразделение,
	|	ПорядокУчетаНМА.НаправлениеДеятельности,
	|	ПервоначальныеСведенияНМА.Период
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|			{(&ДатаОкончания)},
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						ОстаткиВНА КАК т)) КАК ПервоначальныеСведенияНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииНМАБУ.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК ПараметрыАмортизацииНМАБУ
	|		ПО ПервоначальныеСведенияНМА.НематериальныйАктив = ПараметрыАмортизацииНМАБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАБУ.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК ПорядокУчетаНМАБУ
	|		ПО ПервоначальныеСведенияНМА.НематериальныйАктив = ПорядокУчетаНМАБУ.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК ПорядокУчетаНМА
	|		ПО ПервоначальныеСведенияНМА.НематериальныйАктив = ПорядокУчетаНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							ОстаткиВНА КАК т)) КАК МестоУчетаНМА
	|		ПО ПервоначальныеСведенияНМА.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СпособыОтраженияРасходовПоАмортизацииМСФО.Ссылка) КАК СпособОтраженияРасходовМСФО,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.СтатьяРасходов КАК СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.АналитикаРасходов КАК АналитикаРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.Подразделение КАК Подразделение,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ втПрофили
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизацииМСФО КАК СпособыОтраженияРасходовПоАмортизацииМСФО
	|ГДЕ
	|	(СпособыОтраженияРасходовПоАмортизацииМСФО.СтатьяРасходов, СпособыОтраженияРасходовПоАмортизацииМСФО.АналитикаРасходов, СпособыОтраженияРасходовПоАмортизацииМСФО.Подразделение, СпособыОтраженияРасходовПоАмортизацииМСФО.НаправлениеДеятельности) В
	|			(ВЫБРАТЬ
	|				втПараметрыВНА.СтатьяРасходов,
	|				втПараметрыВНА.АналитикаРасходов,
	|				втПараметрыВНА.Подразделение,
	|				втПараметрыВНА.НаправлениеДеятельности
	|			ИЗ
	|				втПараметрыВНА КАК втПараметрыВНА)
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.АналитикаРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.Подразделение,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.НаправлениеДеятельности
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.СтатьяРасходов,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.АналитикаРасходов";

КонецФункции

Функция ТекстЗапроса_ТрансляцияВНА()

	Возврат
	"ВЫБРАТЬ
	|	МАКСИМУМ(СчетаБД.Ссылка) КАК СчетБД,
	|	СчетаБД.СчетСсылка КАК СчетИсточник,
	|	ЕСТЬNULL(МАКСИМУМ(СоответствияСчетовДляТрансляции.СчетПриемник), ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК СчетБДМСФО
	|ПОМЕСТИТЬ втСчетаБД
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ПО (СоответствияСчетовДляТрансляции.СчетИсточник = СчетаБД.Ссылка)
	|			И (СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции)
	|ГДЕ
	|	(СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					т.Счет
	|				ИЗ
	|					ОстаткиВНА КАК т)
	|			ИЛИ СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					т.Счет
	|				ИЗ
	|					ОстаткиАВНА КАК т)
	|			ИЛИ СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					втПараметрыВНА.СчетАмортизацииНСБУ
	|				ИЗ
	|					втПараметрыВНА КАК втПараметрыВНА))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаБД.СчетСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетИсточник";

КонецФункции

Функция ТекстЗапроса_НачальныеОстаткиВНА()

	Возврат
	"ВЫБРАТЬ
	|	ОстаткиВНА.ВНА КАК ВНА,
	|	втПараметрыВНА.СпособПоступления КАК СпособПоступления,
	|	втПараметрыВНА.СрокПолезногоИспользованияНСБУ КАК СрокПолезногоИспользованияНСБУ,
	|	ВЫБОР
	|		КОГДА втПараметрыВНА.СпособНачисленияАмортизацииНСБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.Линейный)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииВНА.Линейный)
	|		КОГДА втПараметрыВНА.СпособНачисленияАмортизацииНСБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииВНА.УменьшаемогоОстатка)
	|		КОГДА втПараметрыВНА.СпособНачисленияАмортизацииНСБУ = ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СпособНачисленияАмортизацииНСБУ,
	|	ОстаткиВНА.СуммаОстаток КАК ТекущаяСтоимостьНСБУ,
	|	ОстаткиАВНА.СуммаОстаток КАК НакопленнаяАмортизацияНСБУ,
	|	ОстаткиВНА.Счет КАК СчетУчетаНСБУ,
	|	ОстаткиАВНА.Счет КАК СчетАмортизацииНСБУ,
	|	втПараметрыВНА.КоэффициентУскоренияНСБУ КАК КоэффициентУскоренияНСБУ,
	|	втПараметрыВНА.ПараметрВыработкиНСБУ КАК ПараметрВыработкиНСБУ,
	|	втПараметрыВНА.ПредполагаемыйОбъемПродукцииНСБУ КАК ПредполагаемыйОбъемПродукцииНСБУ,
	|	втПараметрыВНА.ДатаПринятияКУчетуНСБУ КАК ДатаПринятияКУчетуНСБУ,
	|	втПараметрыВНА.СтатьяРасходов КАК СпособОтраженияРасходовПоАмортизацииНСБУ,
	|	втПрофили.СпособОтраженияРасходовМСФО КАК СпособОтраженияРасходовПоАмортизацииМСФО
	|ИЗ
	|	ОстаткиВНА КАК ОстаткиВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиАВНА КАК ОстаткиАВНА
	|		ПО (ОстаткиВНА.ВНА = ОстаткиВНА.ВНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыДляЗаполненияВНА КАК втПараметрыДляЗаполненияВНА
	|		ПО ОстаткиВНА.ВНА = втПараметрыДляЗаполненияВНА.ВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыВНА КАК втПараметрыВНА
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетУчетаНСБУ
	|			ПО втПараметрыВНА.СчетУчетаНСБУ = втСчетУчетаНСБУ.СчетИсточник
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетАмортизацииНСБУ
	|			ПО втПараметрыВНА.СчетАмортизацииНСБУ = втСчетАмортизацииНСБУ.СчетИсточник
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПрофили КАК втПрофили
	|			ПО втПараметрыВНА.СтатьяРасходов = втПрофили.СтатьяРасходов
	|				И втПараметрыВНА.АналитикаРасходов = втПрофили.АналитикаРасходов
	|				И втПараметрыВНА.Подразделение = втПрофили.Подразделение
	|				И втПараметрыВНА.НаправлениеДеятельности = втПрофили.НаправлениеДеятельности
	|		ПО ОстаткиВНА.ВНА = втПараметрыВНА.ВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетДт
	|		ПО ОстаткиВНА.Счет = втСчетДт.СчетИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыАрендыПоУмолчаниюМСФО КАК ОбъектыАрендыПоУмолчаниюМСФО
	|		ПО ОстаткиВНА.ВНА = ОбъектыАрендыПоУмолчаниюМСФО.ВНА";
	
КонецФункции

#КонецОбласти

Процедура ЗаполнитьИзПодсистемыНСБУ(ЭтотОбъект, ДокументыОснованияИсточник = Неопределено) Экспорт
	
	ПараметрыЗаполнения = МСФОКлиентСерверУХ.ПолучитьПараметрыЗаполнения(ЭтотОбъект, ДокументыОснованияИсточник);
	//ИсточникЗаполнения = ИнтеграцияБП3КорпУХ.ПолучитьДанные_НачальныеОстаткиВНА(ПараметрыЗаполнения);

	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(ТекстЗапроса_ПараметрыДляЗаполненияВНА());
	ТекстЗапроса.Добавить(ТекстЗапроса_СчетаВНА());
	ТекстЗапроса.Добавить(ТекстЗапроса_ОстаткиВНА());
	ТекстЗапроса.Добавить(ТекстЗапроса_ПараметрыВНАРСБУ());
	ТекстЗапроса.Добавить(ТекстЗапроса_ТрансляцияВНА());
	ТекстЗапроса.Добавить(ТекстЗапроса_НачальныеОстаткиВНА());
		
	Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета()));
	
	Запрос.УстановитьПараметр("Организация", 		ЭтотОбъект.Организация);
	Запрос.УстановитьПараметр("Сценарий", 			ЭтотОбъект.Сценарий);
	Запрос.УстановитьПараметр("ДатаОкончания", 		КонецДня(ЭтотОбъект.Дата));
	Запрос.УстановитьПараметр("ШаблонТрансляции", 	ПараметрыЗаполнения.ШаблонТрансляции);
	
	ТабВНА = Запрос.Выполнить().Выгрузить();
	
	Группы = ЭтотОбъект.ПолучитьГруппыВНА(ТабВНА, ЭтотОбъект);
	
	ЭтотОбъект.ВНА.Очистить();
	Для каждого СтрокаВНА Из ТабВНА Цикл
		
		ТекущаяГруппаВНА = Группы.Получить(СтрокаВНА.ВНА);
		Если Не ЗначениеЗаполнено(ТекущаяГруппаВНА) Тогда
			Продолжить;//остатки только по ВНА, учитываемым параллельно
		КонецЕсли;
		
		НоваяСтрока = ЭтотОбъект.ВНА.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВНА);
		НоваяСтрока.ГруппаВНАМСФО = ТекущаяГруппаВНА;
	
	КонецЦикла;
	
	СформироватьПрофилиРаспределения(ЭтотОбъект.ВНА, 
		"СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Ложь);
	
КонецПроцедуры

Функция ТекстЗапроса_Приоритеты(НомераТаблиц) Экспорт 

	НомераТаблиц.Вставить("втПриоритеты", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	Номенклатура.Ссылка КАК ВНА
	|ПОМЕСТИТЬ втПриоритеты
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАПоУмолчанию КАК ПараметрыУчетаВНАПоУмолчанию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО (НЕ Номенклатура.ЭтоГруппа)
	|			И (ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА <> ЗНАЧЕНИЕ(Справочник.ГруппыВНАМСФО.ПустаяСсылка))
	|			И (ПараметрыУчетаВНАПоУмолчанию.ВНА В (Номенклатура.Ссылка, Номенклатура.Родитель, Номенклатура.Родитель.Родитель, Номенклатура.Родитель.Родитель.Родитель, Номенклатура.Родитель.Родитель.Родитель.Родитель))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА,
	|	РасходыБудущихПериодов.Ссылка
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАПоУмолчанию КАК ПараметрыУчетаВНАПоУмолчанию
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК РасходыБудущихПериодов
	|		ПО (НЕ РасходыБудущихПериодов.ЭтоГруппа)
	|			И (ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА <> ЗНАЧЕНИЕ(Справочник.ГруппыВНАМСФО.ПустаяСсылка))
	|			И (ПараметрыУчетаВНАПоУмолчанию.ВНА В (РасходыБудущихПериодов.Ссылка, РасходыБудущихПериодов.Родитель, РасходыБудущихПериодов.Родитель.Родитель, РасходыБудущихПериодов.Родитель.Родитель.Родитель, РасходыБудущихПериодов.Родитель.Родитель.Родитель.Родитель))"

КонецФункции

Функция ПолучитьСоздатьВНАПартии(АктивИсточник, НомерВНА, ПараметрыУчетаВНА) Экспорт
	
	КоличественныйУчет = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости).Количественный;
	
	Если КоличественныйУчет Тогда		
		
		ФорматНомерВНА 	= Формат(НомерВНА, "ЧГ=0");
		НаименованиеВНА = СтрШаблон("%1 (№%2)",  СокрЛП(АктивИсточник.Наименование), ФорматНомерВНА);
		КодВНА 			= СтрШаблон("%1-%2", СокрЛП(АктивИсточник.Код), ФорматНомерВНА);
		
	Иначе
		
		НаименованиеВНА = СокрЛП(АктивИсточник.Наименование);
		КодВНА 			= СокрЛП(АктивИсточник.Код);
		
	КонецЕсли;
	
	ПрефиксАктива 	= ПолучитьПрефиксАктива(АктивИсточник);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеСредства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.ПервоначальныйИнвентарныйНомерМСФО = &КодВНА";
	
	ИмяСправочника = "ОбъектыЭксплуатации";
	Если ПараметрыУчетаВНА.КлассВНА = ПредопределенноеЗначение("Перечисление.КлассыВНА.НематериальныйАктив") Тогда
		ИмяСправочника = "НематериальныеАктивы";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ОбъектыЭксплуатации", ".НематериальныеАктивы");
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("КодВНА", КодВНА);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Возврат РезультатЗапроса.Выгрузить()[0].Ссылка;
	КонецЕсли;
	
	НовыйВНА = Справочники[ИмяСправочника].СоздатьЭлемент();		
	НовыйВНА.Наименование	= НаименованиеВНА;
	НовыйВНА.УстановитьНовыйКод();
	НовыйВНА.ПервоначальныйИнвентарныйНомерМСФО = КодВНА;
	
	Если ИмяСправочника = "ОсновныеСредства" Тогда
		//нет в ЕРП
		//НовыйВНА.ТипОС = Перечисления.ТипыОС.ОбъектОС;
		//НовыйВНА.ГруппаОС = Перечисления.ГруппыОС.ДругиеВидыОсновныхСредств;
	КонецЕсли;
	
	Попытка
		НовыйВНА.Записать();	
	Исключение
		
		ТекстОшибки = "Не удалось создать внеоборотный актив(%1) на основании номенклатуры <%2> по причине" + ОписаниеОшибки();
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстОшибки, ИмяСправочника,  НаименованиеВНА), ТекстОшибки);
		
		Возврат Справочники[ИмяСправочника].ПустаяСсылка();
		
	КонецПопытки;
		
	Возврат НовыйВНА.Ссылка;
	
КонецФункции

Функция ПолучитьПрефиксАктива(АктивИсточник) Экспорт
	
	Если ТипЗнч(АктивИсточник) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат "МПЗ";
	ИначеЕсли ТипЗнч(АктивИсточник) = Тип("СправочникСсылка.ПрочиеРасходы") Тогда
		Возврат "РБП";
	ИначеЕсли ТипЗнч(АктивИсточник) = Тип("СправочникСсылка.ПрочиеРасходы") Тогда
		Возврат "ПДР";
	ИначеЕсли ТипЗнч(АктивИсточник) = Тип("СправочникСсылка.ПрочиеРасходы") Тогда
		Возврат "СтЗ";
	Иначе
		Возврат "_";
	КонецЕсли;
	
КонецФункции

#Область МСФО_ВНА_Заполнение

Функция ПолучитьТипыДокументовНачальныеОстаткиВНА() Экспорт 

	ДокументСобытиеВНА = Новый СписокЗначений;
	ДокументСобытиеВНА.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ДокументСобытиеВНА.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов"));
	ДокументСобытиеВНА.Добавить(Тип("ДокументСсылка.ВводОстатков"));

	Возврат ДокументСобытиеВНА;

КонецФункции

Процедура ДоработатьПараметрыЗаполненияВНА(ПараметрыЗаполнения) Экспорт

	Если Не ПараметрыЗаполнения.Свойство("ПоляВыбора") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыЗаполнения.ПоляВыбора.Свойство("СпособОтраженияРасходовПоАмортизацииНСБУ") Тогда
		ПараметрыЗаполнения.ПоляВыбора.Удалить("СпособОтраженияРасходовПоАмортизацииНСБУ");
		ПараметрыЗаполнения.ПоляВыбора.Вставить("СтатьяРасходов", "СтатьяРасходов");
		ПараметрыЗаполнения.ПоляВыбора.Вставить("АналитикаРасходов", "АналитикаРасходов");
	КонецЕсли;
	
КонецПроцедуры

Функция СоздатьПрофильРаспределенияПоНСБУ(ПрофильРаспределенияИсточник, ПланСчетовНСБУ = Неопределено, Отказ = Ложь) Экспорт

	ОбъектПрофиль = Справочники.СпособыОтраженияРасходовПоАмортизацииМСФО.СоздатьЭлемент();
	ОбъектПрофиль.ПрофильРаспределенияНСБУ = ПрофильРаспределенияИсточник;
	Справочники.СпособыОтраженияРасходовПоАмортизацииМСФО.ЗаполнитьПрофильМСФО(ОбъектПрофиль);
	
	Попытка
		
		ОбъектПрофиль.ДополнительныеСвойства.Вставить("ОбновлениеПрофиля", Истина);
		ОбъектПрофиль.ОбменДанными.Загрузка = Истина;
		ОбъектПрофиль.Записать();	
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось создать профиль распределения по источнику: '") + ПрофильРаспределенияИсточник);
		Возврат Неопределено;
		
	КонецПопытки;	
	
	Возврат ОбъектПрофиль.Ссылка;

КонецФункции

Процедура СформироватьПрофилиРаспределения(ТаблицаВНА, КолонкаПрофильМСФО, КолонкаПрофильНСБУ, ШаблонТрансляции, Отказ = Ложь) Экспорт 

	СозданныеПрофили = Новый ТаблицаЗначений;
	СозданныеПрофили.Колонки.Добавить("СтатьяРасходов");
	СозданныеПрофили.Колонки.Добавить("АналитикаРасходов");
	СозданныеПрофили.Колонки.Добавить("Подразделение");
	СозданныеПрофили.Колонки.Добавить("НаправлениеДеятельности");
	СозданныеПрофили.Колонки.Добавить("ПрофильМСФО");
		
	Для каждого СтрокаВНА Из ТаблицаВНА Цикл
		
		ПрофильМСФО = СтрокаВНА[КолонкаПрофильМСФО];
		
		Если ЗначениеЗаполнено(ПрофильМСФО) Тогда
			Продолжить;
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(СтрокаВНА.СтатьяРасходов) И Не ЗначениеЗаполнено(СтрокаВНА.АналитикаРасходов) Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ПоискНСБУ = Новый Структура("СтатьяРасходов,АналитикаРасходов,Подразделение,НаправлениеДеятельности,Местонахождение");
		ЗаполнитьЗначенияСвойств(ПоискНСБУ, СтрокаВНА.ДокументОснование);
		ЗаполнитьЗначенияСвойств(ПоискНСБУ, СтрокаВНА);
		
		Если не ЗначениеЗаполнено(ПоискНСБУ.Подразделение) Тогда
			ПоискНСБУ.Подразделение = ПоискНСБУ.Местонахождение;
		КонецЕсли;
		ПоискНСБУ.Удалить("Местонахождение");
		
		ПоискПрофильМСФО = СозданныеПрофили.НайтиСтроки(ПоискНСБУ);		
		Если ПоискПрофильМСФО.Количество() Тогда
			ПрофильМСФО = ПоискПрофильМСФО[0].ПрофильМСФО;
		Иначе
			
			ПрофильМСФО = СоздатьПрофильПоШаблонуТрансляции(ПоискНСБУ, ШаблонТрансляции, Отказ);			
			НовыйКэш = СозданныеПрофили.Добавить();
			НовыйКэш.ПрофильМСФО = ПрофильМСФО;
			ЗаполнитьЗначенияСвойств(НовыйКэш, ПоискНСБУ);
			
		КонецЕсли;
		
		СтрокаВНА[КолонкаПрофильМСФО] = ПрофильМСФО;			
		
	КонецЦикла;

КонецПроцедуры

Функция СоздатьПрофильПоШаблонуТрансляции(ПоискНСБУ, ШаблонТрансляции, Отказ = Ложь)

 	ОбъектПрофиль = Справочники.СпособыОтраженияРасходовПоАмортизацииМСФО.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ОбъектПрофиль, ПоискНСБУ);
	ЗаполнитьПрофильРаспределенияПоШаблонуТрансляции(ОбъектПрофиль, ШаблонТрансляции);
	
	Попытка
		
		ОбъектПрофиль.ДополнительныеСвойства.Вставить("ОбновлениеПрофиля", Истина);
		ОбъектПрофиль.ОбменДанными.Загрузка = Истина;
		ОбъектПрофиль.Записать();	
		
	Исключение
		
		Отказ = Истина;
		ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось создать профиль распределения по источнику: " + ПоискНСБУ.АналитикаРасходов);
		Возврат Неопределено;
		
	КонецПопытки;	
	
	Возврат ОбъектПрофиль.Ссылка;
	
КонецФункции

Функция ЗаполнитьПрофильРаспределенияПоШаблонуТрансляции(ПрофильРаспределения, ШаблонТрансляции)
	
	ПрофильРаспределения.Способы.Очистить();
	
	Если Не ПрофильРаспределения.СтатьяРасходов.Пустая() Тогда
		ДеталиАналитика = ?(ЗначениеЗаполнено(ПрофильРаспределения.АналитикаРасходов), " / " + ПрофильРаспределения.АналитикаРасходов, "");
		ПрофильРаспределения.Наименование = Строка(ПрофильРаспределения.СтатьяРасходов) + ДеталиАналитика;
	КонецЕсли;
	
	СчетЗатратБД = МСФОВНАВызовСервераУХ.ПолучитьСчетБДПоСчетуМСФО(ПрофильРаспределения.СтатьяРасходов.УдалитьСчетУчета, ШаблонТрансляции.ПланСчетовИсточник);
	
	НовыйСпособ = ПрофильРаспределения.Способы.Добавить();	
	НовыйСпособ.Коэффициент = 100;
	НовыйСпособ.СчетЗатрат = МСФОВНАВызовСервераУХ.ПолучитьСчетПриемникТрансляции(СчетЗатратБД, ШаблонТрансляции);		
	
	Если НЕ ЗначениеЗаполнено(НовыйСпособ.СчетЗатрат) Тогда
		Возврат ПрофильРаспределения;
	КонецЕсли;
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(НовыйСпособ.СчетЗатрат);
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл			
		
		СубконтоНомер = "Субконто" + НомерСубконто;			
		отВидСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
		
		Если отВидСубконто.СодержитТип(Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов")) Тогда
			НовыйСпособ[СубконтоНомер] = отВидСубконто.ПривестиЗначение(ПрофильРаспределения.СтатьяРасходов);
		Иначе 
			НовыйСпособ[СубконтоНомер] = отВидСубконто.ПривестиЗначение(ПрофильРаспределения.АналитикаРасходов);
		КонецЕсли;
				
	КонецЦикла;
	
	Если СвойстваСчета.УчетПоПодразделениям Тогда
		НовыйСпособ.Подразделение = ПрофильРаспределения.Подразделение.ЦФО;
	КонецЕсли;
	
	Если СвойстваСчета.УчетПоНаправлениямДеятельности Тогда
		НовыйСпособ.НаправлениеДеятельности = ПрофильРаспределения.НаправлениеДеятельности;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область МСФО_ФИ

Функция ТекстЗапросаПроизводныеФИ(НомераТаблиц) Экспорт 

	НомераТаблиц.Добавить("втПроизводныеФИ");
	
	Возврат
	"ВЫБРАТЬ
	|	ФорвардныйДоговор.Ссылка КАК ФИ,
	|	ЕСТЬNULL(СвязанныеДоговоры.БазовыйДоговор, ФорвардныйДоговор.Ссылка) КАК ФИИсточник,
	|	СчетАктиваДолгосрочный.Счет КАК СчетУчета,
	|	ФорвардныйДоговор.ПараметрыУчетаФИ КАК ПараметрыУчетаФИ,
	|	ФорвардныйДоговор.Контрагент КАК Контрагент,
	|	ФорвардныйДоговор.ВалютаВзаиморасчетов КАК ВалютаФИ,
	|	ФорвардныйДоговор.Сумма КАК БалансоваяСтоимостьВД
	|ПОМЕСТИТЬ втПроизводныеФИ
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ФорвардныйДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеДоговоры КАК СвязанныеДоговоры
	|		ПО ФорвардныйДоговор.Ссылка = СвязанныеДоговоры.СвязанныйДоговор
	|			И (СвязанныеДоговоры.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ДоговорНаПокупкуВалюты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПараметрыУчетаФинансовыхИнструментовМСФО.СчетаУчета КАК СчетАктиваДолгосрочный
	|		ПО ФорвардныйДоговор.ПараметрыУчетаФИ = СчетАктиваДолгосрочный.Ссылка
	|			И (СчетАктиваДолгосрочный.СчетУчета = ЗНАЧЕНИЕ(Справочник.СчетаУчетаФИ.СчетАктиваДолгосрочный))
	|ГДЕ
	|	ФорвардныйДоговор.ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера.ПроизводныйФИ
	|	И ФорвардныйДоговор.Организация = &Организация
	|	И НЕ ФорвардныйДоговор.Ссылка В
	|				(ВЫБРАТЬ
	|					т.БазовыйДоговор
	|				ИЗ
	|					РегистрСведений.СвязанныеДоговоры КАК т
	|				ГДЕ
	|					т.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ДоговорНаПокупкуВалюты))
	|	И (ФорвардныйДоговор.ДатаОкончанияДействия > &ДатаОкончанияПериода
	|			ИЛИ ФорвардныйДоговор.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1))";

КонецФункции

Функция ТекстЗапроса_втДКЗ(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("втДКЗ", НомераТаблиц.Количество());
		
	Возврат
	"ВЫБРАТЬ
	|	ДоговорыДКЗ.Ссылка КАК Договор,
	|	МАКСИМУМ(ЕСТЬNULL(Контрагенты.Ссылка, ДоговорыДКЗ.Контрагент)) КАК Контрагент,
	|	МАКСИМУМ(ДоговорыДКЗ.ВалютаВзаиморасчетов) КАК Валюта,
	|	МАКСИМУМ(ДоговорыДКЗ.ПараметрыУчетаФИ) КАК ПараметрыУчетаФИ,
	|	МАКСИМУМ(ДоговорыДКЗ.ДатаНачалаДействия) КАК ДатаНачала,
	|	МАКСИМУМ(ДоговорыДКЗ.ДатаОкончанияДействия) КАК ДатаОкончания,
	|	МАКСИМУМ(ДоговорыДКЗ.Сумма) КАК Стоимость
	|ПОМЕСТИТЬ втДКЗ
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыДКЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО ДоговорыДКЗ.Партнер = Контрагенты.Партнер
	|			И (ДоговорыДКЗ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|ГДЕ
	|	ДоговорыДКЗ.Организация = &Организация
	|	И ДоговорыДКЗ.Сумма <> 0
	|	И ДоговорыДКЗ.СпособФормированияПлатежей <> ЗНАЧЕНИЕ(Перечисление.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей)
	|	И ДоговорыДКЗ.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером), ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПоставщиком), ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентом))
	|	И НЕ ДоговорыДКЗ.Ссылка В
	|				(ВЫБРАТЬ
	|					т.ФИ КАК ФИ
	|				ИЗ
	|					втИсключения КАК т)
	|	И РАЗНОСТЬДАТ(&ДатаНачала, ДоговорыДКЗ.ДатаОкончанияДействия, ДЕНЬ) > 365
	|	И РАЗНОСТЬДАТ(ДоговорыДКЗ.ДатаНачалаДействия, ДоговорыДКЗ.ДатаОкончанияДействия, ДЕНЬ) > 365
	|	И ВЫБОР &ВидОперации
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Признание)
	|				ТОГДА ДоговорыДКЗ.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.ИзменениеНачислений)
	|				ТОГДА ДоговорыДКЗ.ВерсияСоглашения.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ДоговорыДКЗ.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ДоговорыДКЗ.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И ДоговорыДКЗ.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Рекласс)
	|				ТОГДА ДоговорыДКЗ.ВерсияСоглашения.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ДоговорыДКЗ.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ДоговорыДКЗ.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И ДоговорыДКЗ.ДатаНачалаДействия <> ДАТАВРЕМЯ(1, 1, 1)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Выбытие)
	|				ТОГДА ДоговорыДКЗ.ВерсияСоглашения.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И (ДоговорыДКЗ.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ДоговорыДКЗ.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	ДоговорыДКЗ.Ссылка";
	
КонецФункции

Функция ТекстЗапроса_втФИ(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("втФИ", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ВерсииФИ.ПредметГрафика КАК ФИ,
	|	ВерсииФИ.ПредметГрафика.ПараметрыУчетаФИ КАК ПараметрыУчетаФИ,
	|	ВерсииФИ.ПредметГрафика.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,
	|	ВЫБОР
	|		КОГДА ВерсииФИ.ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА ВерсииФИ.ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ВерсииФИ.ПредметГрафика.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвиженияНачисление,
	|	ВерсииФИ.ВерсияГрафика.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ВерсииФИ.ПредметГрафика.ВалютаВзаиморасчетов КАК Валюта,
	|	ВерсииФИ.ПредметГрафика.Контрагент КАК Контрагент,
	|	ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия КАК ДатаНачала,
	|	ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаОкончанияДействия КАК ДатаОкончания,
	|	ВерсииФИ.ВерсияГрафика КАК ВерсияФИ
	|ПОМЕСТИТЬ втФИ
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация = &Организация
	|				И ТИПЗНАЧЕНИЯ(ПредметГрафика) В (ТИП(Справочник.ДоговорыКонтрагентов), ТИП(Справочник.ДоговорыКредитовИДепозитов))
	|				И ПредметГрафика.ВерсияСоглашения.ДатаОкончанияДействия >= &ДатаНачала
	|				И ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия <= &ДатаОкончания
	|				И НЕ ПредметГрафика В
	|						(ВЫБРАТЬ
	|							т.Договор
	|						ИЗ
	|							втДКЗ КАК т)
	|				И НЕ ПредметГрафика В
	|						(ВЫБРАТЬ
	|							т.ФИ КАК ФИ
	|						ИЗ
	|							втИсключения КАК т)
	|				И ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов).ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем), ЗНАЧЕНИЕ(Перечисление.ТипыДОговоров.СКомиссионером))
	|						ТОГДА РАЗНОСТЬДАТ(&ДатаНачала, ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов).ДатаОплаты, ДЕНЬ) > 365
	|								И РАЗНОСТЬДАТ(ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов).ВерсияСоглашения.ДатаНачалаДействия, ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов).ВерсияСоглашения.ДатаОкончанияДействия, ДЕНЬ) > 365
	|								И ВЫРАЗИТЬ(ПредметГрафика КАК Справочник.ДоговорыКонтрагентов).СпособФормированияПлатежей = ЗНАЧЕНИЕ(Перечисление.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|				И НЕ План
	|				И ОпорныйГрафик
	|				И &ПредметГрафика_ОтборПоФИ) КАК ВерсииФИ
	|ГДЕ
	|	ВЫБОР &ВидОперации
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Признание)
	|				ТОГДА ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.ИзменениеНачислений)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Рекласс)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Выбытие)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И (ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсииФИ.ПредметГрафика,
	|	ВерсииФИ.ПредметГрафика.ПараметрыУчетаФИ,
	|	ВерсииФИ.ПредметГрафика.ВидФинансовогоИнструмента,
	|	ВЫБОР
	|		КОГДА ВерсииФИ.ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА ВерсииФИ.ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ВерсииФИ.ПредметГрафика.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	ВерсииФИ.ВерсияГрафика.ПроцентнаяСтавка,
	|	ВерсииФИ.ПредметГрафика.ВалютаВзаиморасчетов,
	|	ВерсииФИ.ПредметГрафика.Контрагент,
	|	ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаНачалаДействия,
	|	ВерсииФИ.ПредметГрафика.ВерсияСоглашения.ДатаОкончанияДействия,
	|	ВерсииФИ.ВерсияГрафика
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация = &Организация
	|				И ТИПЗНАЧЕНИЯ(ПредметГрафика) В (ТИП(Справочник.ДоговорыАренды))
	|				И ПредметГрафика.ДатаОкончанияДействия >= &ДатаНачала
	|				И ПредметГрафика.ДатаНачалаДействия <= &ДатаОкончания
	|				И НЕ ПредметГрафика В
	|						(ВЫБРАТЬ
	|							т.Договор
	|						ИЗ
	|							втДКЗ КАК т)
	|				И НЕ ПредметГрафика В
	|						(ВЫБРАТЬ
	|							т.ФИ КАК ФИ
	|						ИЗ
	|							втИсключения КАК т)
	|				И НЕ План
	|				И ОпорныйГрафик
	|				И &ПредметГрафика_ОтборПоФИ) КАК ВерсииФИ
	|ГДЕ
	|	ВЫБОР &ВидОперации
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Признание)
	|				ТОГДА ВерсииФИ.ПредметГрафика.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.ИзменениеНачислений)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Рекласс)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Выбытие)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И (ВерсииФИ.ПредметГрафика.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсииФИ.ПредметГрафика,
	|	ВерсииФИ.ПредметГрафика.ПараметрыУчетаФИ,
	|	ВерсииФИ.ПредметГрафика.ВидФинансовогоИнструмента,
	|	ВЫБОР
	|		КОГДА ВерсииФИ.ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА ВерсииФИ.ПредметГрафика.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ВерсииФИ.ПредметГрафика.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	ВерсииФИ.ПредметГрафика.ПараметрыЦеннойБумаги.ПроцентнаяСтавка,
	|	ВерсииФИ.ПредметГрафика.ВалютаКотировки,
	|	ВерсииФИ.ПредметГрафика.Эмитент,
	|	ВерсииФИ.ПредметГрафика.ДатаВыпуска,
	|	ВерсииФИ.ПредметГрафика.СрокПогашения,
	|	ВерсииФИ.ВерсияГрафика
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация = &Организация
	|				И ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги
	|				И ПредметГрафика.ДатаВыпуска <= &ДатаОкончания
	|				И НЕ ПредметГрафика В
	|						(ВЫБРАТЬ
	|							т.ФИ КАК ФИ
	|						ИЗ
	|							втИсключения КАК т)
	|				И ОпорныйГрафик
	|				И НЕ План
	|				И &ПредметГрафика_ОтборПоФИ) КАК ВерсииФИ
	|ГДЕ
	|	ВЫБОР &ВидОперации
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Признание)
	|				ТОГДА ВерсииФИ.ПредметГрафика.ДатаВыпуска МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.СрокПогашения МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.ИзменениеНачислений)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.СрокПогашения МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаВыпуска МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Рекласс)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ПредметГрафика.СрокПогашения МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаВыпуска МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Выбытие)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И (ВерсииФИ.ПредметГрафика.СрокПогашения МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ПредметГрафика.ДатаВыпуска МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсииФИ.ДоговорКонтрагента,
	|	ВерсииФИ.ДоговорКонтрагента.ПараметрыУчетаФИ,
	|	ВерсииФИ.ДоговорКонтрагента.ВидФинансовогоИнструмента,
	|	ВЫБОР
	|		КОГДА ВерсииФИ.ДоговорКонтрагента.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПривлечениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		КОГДА ВерсииФИ.ДоговорКонтрагента.ВидДоговораУХ В ИЕРАРХИИ (ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.РазмещениеСредств))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОГДА ВерсииФИ.ДоговорКонтрагента.ТипДоговора В (ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем))
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ,
	|	NULL,
	|	ВерсииФИ.Валюта,
	|	ВерсииФИ.Контрагент,
	|	ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаНачалаДействия,
	|	ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаОкончанияДействия,
	|	ВерсииФИ.ЗаявкаНаОперацию
	|ИЗ
	|	РегистрСведений.ГрафикиПериодическихОпераций.СрезПоследних(
	|			&ДатаОкончания,
	|			Организация = &Организация
	|				И ДоговорКонтрагента.ВерсияСоглашения.ДатаОкончанияДействия >= &ДатаНачала
	|				И ДоговорКонтрагента.ВерсияСоглашения.ДатаНачалаДействия <= &ДатаОкончания
	|				И НЕ ДоговорКонтрагента В
	|						(ВЫБРАТЬ
	|							т.ФИ КАК ФИ
	|						ИЗ
	|							втИсключения КАК т)) КАК ВерсииФИ
	|ГДЕ
	|	ВЫБОР &ВидОперации
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Признание)
	|				ТОГДА ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.ИзменениеНачислений)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Рекласс)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И НЕ(ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			КОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоФинансовымИнструментамМСФО.Выбытие)
	|				ТОГДА ВерсииФИ.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|						И (ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаОкончанияДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|						И НЕ(ВерсииФИ.ДоговорКонтрагента.ВерсияСоглашения.ДатаНачалаДействия МЕЖДУ &ДатаНачала И &ДатаОкончания)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ";

КонецФункции

Функция ТекстЗапроса_АналитикаУчетаФИ(НомераТаблиц) Экспорт
	
	НомераТаблиц.Вставить("втАналитикаФИ",	НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	МСФООбороты.Субконто1 КАК ФИ,
	|	МАКСИМУМ(МСФООбороты.Подразделение.Организация) КАК Подразделение,
	|	МАКСИМУМ(МСФООбороты.НаправлениеДеятельности) КАК НаправлениеДеятельности
	|ПОМЕСТИТЬ втАналитикаФИ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный.ВидыСубконто КАК т
	|				ГДЕ
	|					т.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						т.ФИ
	|					ИЗ
	|						втСведенияФИ КАК т)
	|				И &ИспользуютсяТК = ЛОЖЬ) КАК МСФООбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	МСФООбороты.Субконто1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МСФООбороты.Субконто1,
	|	МАКСИМУМ(МСФООбороты.Подразделение),
	|	МАКСИМУМ(МСФООбороты.НаправлениеДеятельности)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОкончания,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный.ВидыСубконто КАК т
	|				ГДЕ
	|					т.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						т.ФИ
	|					ИЗ
	|						втСведенияФИ КАК т)
	|				И &ИспользуютсяТК = ЛОЖЬ) КАК МСФООбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	МСФООбороты.Субконто1
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФИ";

КонецФункции

Функция ТекстЗапроса_УсловиеДоговораНеПрочее(ИмяПоляДоговора = "Субконто2") Экспорт
	Возврат СтрШаблон("ВЫРАЗИТЬ(%1 КАК Справочник.ДоговорыКонтрагентов).ТипДоговора <> ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.ПустаяСсылка)", ИмяПоляДоговора);
КонецФункции

Процедура ОбновитьСтавкуНДС(ПараметрыОбновления = Неопределено) Экспорт

КонецПроцедуры

#КонецОбласти

#Область МСФО

Функция ТекстЗапроса_втФИ_СпрС(НомераТаблиц) Экспорт

	//Поля:ФИ,Контрагент,Валюта,ПараметрыУчетаФИ,ДатаНачала,ДатаОкончания,Стоимость,ВидДоговораТекст,Выданный,Контрагент
	//Отбор:ДатаНачала
	
	НомераТаблиц.Вставить("втВозможныеПараметрыУчетаФИ", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втФИ", НомераТаблиц.Количество());
		
	Возврат 
	"ВЫБРАТЬ
	|	т.Ссылка КАК ПараметрыУчетаФИ
	|ПОМЕСТИТЬ втВозможныеПараметрыУчетаФИ
	|ИЗ
	|	Справочник.ПараметрыУчетаФинансовыхИнструментовМСФО КАК т
	|ГДЕ
	|	т.ВидОбъектаФинансовогоХарактера.СпособУчета = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаФинансовыхИнструментов.ПоСправедливойСтоимости)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Ссылка КАК ФИ,
	|	ИСТИНА КАК ЭтоДоговор,
	|	т.Контрагент КАК Контрагент,
	|	т.ВалютаВзаиморасчетов КАК Валюта,
	|	т.ПараметрыУчетаФИ КАК ПараметрыУчетаФИ,
	|	т.ВерсияСоглашения.ДатаНачалаДействия КАК ДатаНачала,
	|	т.ВерсияСоглашения.ДатаОкончанияДействия КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА т.Котировка = ЗНАЧЕНИЕ(Справочник.ВидыКотировокФинансовыхИнструментов.ПустаяСсылка)
	|			ТОГДА т.Ссылка
	|		ИНАЧЕ т.Котировка
	|	КОНЕЦ КАК Котировка,
	|	ВЫБОР
	|		КОГДА т.Котировка = ЗНАЧЕНИЕ(Справочник.ВидыКотировокФинансовыхИнструментов.ПустаяСсылка)
	|			ТОГДА т.ВалютаВзаиморасчетов
	|		ИНАЧЕ т.Котировка.Валюта
	|	КОНЕЦ КАК ВалютаКотировки,
	|	т.Сумма КАК Номинал
	|ПОМЕСТИТЬ втФИ
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК т
	|ГДЕ
	|	т.Организация = &Организация
	|	И т.ПараметрыУчетаФИ В
	|			(ВЫБРАТЬ
	|				т.ПараметрыУчетаФИ
	|			ИЗ
	|				втВозможныеПараметрыУчетаФИ КАК т)
	|	И ВЫБОР
	|			КОГДА т.ВерсияСоглашения.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ т.ВерсияСоглашения.ДатаОкончанияДействия >= &ДатаНачалаПериода
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА т.ВерсияСоглашения.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ т.ВерсияСоглашения.ДатаНачалаДействия <= &ДатаОкончанияПериода
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Ссылка,
	|	ИСТИНА,
	|	т.Контрагент,
	|	т.ВалютаВзаиморасчетов,
	|	т.ПараметрыУчетаФИ,
	|	т.ВерсияСоглашения.ДатаНачалаДействия,
	|	т.ВерсияСоглашения.ДатаОкончанияДействия,
	|	ВЫБОР
	|		КОГДА т.Котировка = ЗНАЧЕНИЕ(Справочник.ВидыКотировокФинансовыхИнструментов.ПустаяСсылка)
	|			ТОГДА т.Ссылка
	|		ИНАЧЕ т.Котировка
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА т.Котировка = ЗНАЧЕНИЕ(Справочник.ВидыКотировокФинансовыхИнструментов.ПустаяСсылка)
	|			ТОГДА т.ВалютаВзаиморасчетов
	|		ИНАЧЕ т.Котировка.Валюта
	|	КОНЕЦ,
	|	т.СуммаТраншей
	|ИЗ
	|	Справочник.ДоговорыКредитовИДепозитов КАК т
	|ГДЕ
	|	т.Организация = &Организация
	|	И т.ПараметрыУчетаФИ В
	|			(ВЫБРАТЬ
	|				т.ПараметрыУчетаФИ
	|			ИЗ
	|				втВозможныеПараметрыУчетаФИ КАК т)
	|	И ВЫБОР
	|			КОГДА т.ВерсияСоглашения.ДатаОкончанияДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ т.ВерсияСоглашения.ДатаОкончанияДействия >= &ДатаНачалаПериода
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА т.ВерсияСоглашения.ДатаНачалаДействия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ т.ВерсияСоглашения.ДатаНачалаДействия <= &ДатаОкончанияПериода
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Ссылка,
	|	ЛОЖЬ,
	|	МАКСИМУМ(т.Эмитент),
	|	МАКСИМУМ(т.ВалютаНоминала),
	|	МАКСИМУМ(т.ПараметрыУчетаФИ),
	|	МАКСИМУМ(т.ДатаВыпуска),
	|	МАКСИМУМ(т.СрокПогашения),
	|	МАКСИМУМ(ЕСТЬNULL(ВидыКотировокФинансовыхИнструментов.Ссылка, т.Ссылка)),
	|	МАКСИМУМ(ЕСТЬNULL(ВидыКотировокФинансовыхИнструментов.ФункциональнаяВалюта, т.ВалютаНоминала)),
	|	МАКСИМУМ(т.Номинал)
	|ИЗ
	|	Справочник.ЦенныеБумаги КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыКотировокФинансовыхИнструментов КАК ВидыКотировокФинансовыхИнструментов
	|		ПО т.Ссылка = ВидыКотировокФинансовыхИнструментов.ЦеннаяБумага
	|ГДЕ
	|	т.ПараметрыУчетаФИ В
	|			(ВЫБРАТЬ
	|				т.ПараметрыУчетаФИ
	|			ИЗ
	|				втВозможныеПараметрыУчетаФИ КАК т)
	|	И ВЫБОР
	|			КОГДА т.СрокПогашения = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ т.СрокПогашения >= &ДатаНачалаПериода
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА т.ДатаВыпуска = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ т.ДатаВыпуска <= &ДатаОкончанияПериода
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	т.Ссылка";

КонецФункции

#КонецОбласти

#Область Пользователи

#КонецОбласти

#Область ОФД

#КонецОбласти

#Область Прочее

// Процедура предназначена для заполнения общих реквизитов документов по документу основанию,
//	вызывается в обработчиках событий "ОбработкаЗаполнения" в модулях документов.
//
// Параметры:
//  ДокументОбъект  - объект редактируемого документа,
//  ДокументОснование - объект документа основания
//  КопироватьПодразделение - булево - если да - подразделение организации берется из документа-основания,
//										если нет - из реквизита СчетОрганизации или настройки пользователя
//
Процедура ЗаполнитьПоОснованию(ДокументОбъект, ДокументОснование, КопироватьПодразделение = Истина) Экспорт

	МетаданныеДокумента          = ДокументОбъект.Метаданные();
	МетаданныеДокументаОснования = ДокументОснование.Метаданные();

	// Дата
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Дата) Тогда
		ДокументОбъект.Дата = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	КонецЕсли;

	// Организация.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Организация = ДокументОснование.Организация;
	КонецЕсли;

	// Склад.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Склад", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Склад = ДокументОснование.Склад;
	КонецЕсли;

	// Контрагент.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("Контрагент", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.Контрагент = ДокументОснование.Контрагент;
	КонецЕсли;

	// ДоговорКонтрагента.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", МетаданныеДокументаОснования) Тогда
	   
	   РеквизитыДоговора = БухгалтерскийУчетПереопределяемый.ПолучитьРеквизитыДоговораКонтрагента(ДокументОснование.ДоговорКонтрагента);
	   
	   Если НЕ ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеДокумента)
	      ИЛИ ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ДокументОбъект.Организация) =
		  	ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(РеквизитыДоговора.Организация) Тогда

			ДокументОбъект.ДоговорКонтрагента = ДокументОснование.ДоговорКонтрагента;

			// КурсВзаиморасчетов.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокумента) Тогда
				СтруктураКурсаВзаиморасчетов = РаботаСКурсамиВалют.ПолучитьКурсВалюты(РеквизитыДоговора.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
				ДокументОбъект.КурсВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Курс;

				// КратностьВзаиморасчетов.
				Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьВзаиморасчетов", МетаданныеДокумента) Тогда
					ДокументОбъект.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
				КонецЕсли;
			КонецЕсли;
		
		КонецЕсли;

	КонецЕсли;

	// Банковский счет
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.БанковскийСчет = ДокументОснование.БанковскийСчет;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента) Тогда

		// Если в документе-основании есть структурная единица, то берем ее оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СтруктурнаяЕдиница", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СтруктурнаяЕдиница)
			   И ТипЗнч(ДокументОснование.СтруктурнаяЕдиница) = БухгалтерскийУчетКлиентСерверПереопределяемый.ТипЗначенияБанковскогоСчетаОрганизации() Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СтруктурнаяЕдиница;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.СчетОрганизации) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.СчетОрганизации;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокументаОснования) Тогда
			Если ЗначениеЗаполнено(ДокументОснование.БанковскийСчет) Тогда
				ДокументОбъект.СчетОрганизации = ДокументОснование.БанковскийСчет;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Подразделение организации
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокумента) Тогда

		Если КопироватьПодразделение Тогда

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ПодразделениеОрганизации", МетаданныеДокументаОснования) Тогда
				ДокументОбъект.ПодразделениеОрганизации = ДокументОснование.ПодразделениеОрганизации;
			КонецЕсли;

		Иначе

			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СчетОрганизации", МетаданныеДокумента) Тогда
				Если ЗначениеЗаполнено(ДокументОбъект.СчетОрганизации)
					И (ДокументОбъект.СчетОрганизации.Метаданные().Реквизиты.Найти("ПодразделениеОрганизации") <> Неопределено) Тогда
					РеквизитыСчетаОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.СчетОрганизации, "ПодразделениеОрганизации");
					ДокументОбъект.ПодразделениеОрганизации = РеквизитыСчетаОрганизации.ПодразделениеОрганизации;
				КонецЕсли;
			Иначе
				ОсновноеПодразделение = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновноеПодразделениеОрганизации");
				Если ЗначениеЗаполнено(ОсновноеПодразделение)
					И БухгалтерскийУчетПереопределяемый.ПодразделениеПринадлежитОрганизации(ОсновноеПодразделение, ДокументОбъект.Организация) Тогда
					ДокументОбъект.ПодразделениеОрганизации = ОсновноеПодразделение;
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

	// ВалютаДокумента.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокументаОснования) Тогда

		// Если есть касса или банковский счет, то валюта должна браться только оттуда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Касса", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.Касса) Тогда
				РеквизитыКассы = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Касса, "ВалютаДенежныхСредств");
				ДокументОбъект.ВалютаДокумента = РеквизитыКассы.ВалютаДенежныхСредств;
			КонецЕсли;
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("БанковскийСчет", МетаданныеДокумента) Тогда
			Если ЗначениеЗаполнено(ДокументОбъект.БанковскийСчет) Тогда
				РеквизитыБанковскогоСчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.БанковскийСчет, "ВалютаДенежныхСредств");
				ДокументОбъект.ВалютаДокумента = РеквизитыБанковскогоСчета.ВалютаДенежныхСредств;
		    КонецЕсли;
		Иначе
			ДокументОбъект.ВалютаДокумента = ДокументОснование.ВалютаДокумента;
		КонецЕсли;

		// КурсДокумента.
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокумента) Тогда
			СтруктураКурсаДокумента = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
			ДокументОбъект.КурсДокумента = СтруктураКурсаДокумента.Курс;

			// КратностьДокумента.
			Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КратностьДокумента", МетаданныеДокумента) Тогда
				ДокументОбъект.КратностьДокумента = СтруктураКурсаДокумента.Кратность;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// ТипЦен.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ТипЦен = ДокументОснование.ТипЦен;
	КонецЕсли;

	// СуммаВключаетНДС.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.СуммаВключаетНДС = ДокументОснование.СуммаВключаетНДС;
	КонецЕсли;

	// НДСВключенВСтоимость.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСВключенВСтоимость", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.НДСВключенВСтоимость = ДокументОснование.НДСВключенВСтоимость;
	КонецЕсли;
	
	// ДокументБезНДС.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("ДокументБезНДС", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.ДокументБезНДС = ДокументОснование.ДокументБезНДС;
	КонецЕсли;
	
	// НДСНеВыделять.
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСНеВыделять", МетаданныеДокумента)
	   И ОбщегоНазначения.ЕстьРеквизитОбъекта("НДСНеВыделять", МетаданныеДокументаОснования) Тогда
		ДокументОбъект.НДСНеВыделять = ДокументОснование.НДСНеВыделять;
	КонецЕсли;
	
	// ДеятельностьНаПатенте
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ДеятельностьНаПатенте", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.ДеятельностьНаПатенте = ДокументОснование.ДеятельностьНаПатенте;
		КонецЕсли;
	КонецЕсли;
	
	// Патент
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокумента) Тогда
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Патент", МетаданныеДокументаОснования) Тогда
			ДокументОбъект.Патент = ДокументОснование.Патент;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ВидыКонтактнойИнформацииИО() Экспорт
	ИменаПредопределенных = Метаданные.Справочники.ВидыКонтактнойИнформации.ПолучитьИменаПредопределенных();
	Если ИменаПредопределенных.Найти("УчредительныйАдресИностраннойОрганизации") <> Неопределено Тогда // УХ и БМ
		Возврат ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации." + "УчредительныйАдресИностраннойОрганизации");
	ИначеЕсли ИменаПредопределенных.Найти("МеждународныйАдресОрганизации") <> Неопределено Тогда // ЕРПУХ
		Возврат ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации." + "МеждународныйАдресОрганизации");
	КонецЕсли;
	//Возврат Справочники.ВидыКонтактнойИнформации.УчредительныйАдресИностраннойОрганизации;
КонецФункции

#КонецОбласти

#КонецОбласти

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	
	Обработчик = ВстраиваниеУХПовтИсп.ПолучитьСобытиеФормы(Форма.ИмяФормы, "ПриЧтенииНаСервере");
	Если Обработчик = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Выполнить(Обработчик+"(Форма, ТекущийОбъект);");
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Обработчик = ВстраиваниеУХПовтИсп.ПолучитьСобытиеФормы(Форма.ИмяФормы, "ПриСозданииНаСервере");
	Если Обработчик = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Выполнить(Обработчик+"(Форма, Отказ, СтандартнаяОбработка);");
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Обработчик = ВстраиваниеУХПовтИсп.ПолучитьСобытиеФормы(Форма.ИмяФормы, "ПослеЗаписиНаСервере");
	Если Обработчик = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Выполнить(Обработчик+"(Форма, ТекущийОбъект, ПараметрыЗаписи);");
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	
	Обработчик = ВстраиваниеУХПовтИсп.ПолучитьСобытиеФормы(Форма.ИмяФормы, "ПередЗаписьюНаСервере");
	Если Обработчик = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Выполнить(Обработчик+"(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);");
	
КонецПроцедуры

#Область Справочник_Организации

Процедура ПодготовитьСписокОрганизации(Список, ИмяРеквизитаСписка = "Ссылка") Экспорт
	
	ИспользоватьУправленческуюОрганизацию = ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию");
	Если Не ИспользоватьУправленческуюОрганизацию Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Список,
			ИмяРеквизитаСписка,
			Справочники.Организации.УправленческаяОрганизация,
			ВидСравненияКомпоновкиДанных.НеРавно);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Проекты
	
Процедура Проекты_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	// Проект
	Элемент = Элементы.Добавить("Проект", Тип("ПолеФормы"), Элементы.ГруппаСтраницаОсновная);
	Элемент.ПутьКДанным = "Объект.Проект";
	Элемент.Вид = ВидПоляФормы.ПолеФлажка;
	
	// ПроектЭтапа
	Элемент = Элементы.Добавить("ПроектЭтапа", Тип("ПолеФормы"), Элементы.ГруппаСтраницаОсновная);
	Элемент.ПутьКДанным = "Объект.ПроектЭтапа";
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	
КонецПроцедуры

#КонецОбласти 

#Область Справочник_Контрагенты
	
Процедура Контрагенты_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	// ПараметрыСтраницы
	ПараметрыСтраницы = Новый Структура;
	ПараметрыСтраницы.Вставить("Группировка", Элементы.ГруппаНаименования.Группировка);
	
	// Параметры групп 
	ПараметрыГруппы = Новый Структура;
	ПараметрыГруппы.Вставить("ШрифтЗаголовка", Элементы.ГруппаНаименования.ШрифтЗаголовка);
	//ПараметрыГруппы.Вставить("ЦветТекстаЗаголовка", Элементы.ГруппаНаименования.ЦветТекстаЗаголовка);
	ПараметрыГруппы.Вставить("Отображение", Элементы.ГруппаНаименования.Отображение);
	ПараметрыГруппы.Вставить("Группировка", Элементы.ГруппаНаименования.Группировка);
	ПараметрыГруппы.Вставить("Объединенная", Истина);
	
	//
	ПараметрыПоляВвода = Новый Структура;
	
	//
	ПараметрыФлажка = Новый Структура;
	ПараметрыФлажка.Вставить("Группировка", ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	
	// Страница
	Страница = ФормыУХ.СоздатьГруппуФормы(Элементы, "СтраницаХолдинг", "Холдинг", ВидГруппыФормы.Страница, Элементы.СтраницыФормы, Элементы.ГруппаКонтактнаяИнформация, ПараметрыСтраницы);
	
	// ГруппаПериметр
	ГруппаПериметр = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаПериметр", НСтр("ru = 'Периметр'"), , Страница,, ПараметрыГруппы);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ГруппаКонтрагента",		 "", "Объект.ГруппаКонтрагента",,		ГруппаПериметр,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ОрганизационнаяЕдиница", "", "Объект.ОрганизационнаяЕдиница",,	ГруппаПериметр,, ПараметрыПоляВвода, Новый Структура("ПриИзменении", "Подключаемый_ОрганизационнаяЕдиницаУХПриИзменении"));
	ФормыУХ.СоздатьПолеФормы(Элементы, "ФормаУчастияВКапитале",	 "", "Объект.ФормаУчастияВКапитале",,	ГруппаПериметр,, ПараметрыПоляВвода);
	
	//
	ГруппаАдресМеждународный = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАдресМеждународный", "Адрес международный", , Страница,, ПараметрыГруппы);
	ФормыУХ.СоздатьПолеФормы(Элементы, "АдресМеждународный",		"", "Объект.АдресМеждународный",,		ГруппаАдресМеждународный,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ГородСтранаМеждународный",  "", "Объект.ГородСтранаМеждународный",,	ГруппаАдресМеждународный,, ПараметрыПоляВвода);
	
	// Группа ПоддержкаМногоязычности
	ГруппаПоддержкаМногоязычности = ФормыУХ.СоздатьГруппуФормы(Элементы, "ПоддержкаМногоязычности", "Поддержка многоязычности", , Страница,, ПараметрыГруппы);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Наименование1", "Наименование (Язык1)", "Объект.Наименование1",	, ГруппаПоддержкаМногоязычности,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Наименование2", "Наименование (Язык2)", "Объект.Наименование2",	, ГруппаПоддержкаМногоязычности,, ПараметрыПоляВвода);
	
	// Группа ГруппаФЗ223
	ГруппаФЗ223 = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаФЗ223", "ФЗ-223", , Страница,, ПараметрыГруппы);
	ГруппаФЗ223.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ФормыУХ.СоздатьПолеФормы(Элементы, "ДатаПостановкиНаУчетВНалоговой", "", "Объект.ДатаПостановкиНаУчетВНалоговой",,	ГруппаФЗ223,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "СубъектМалогоИлиСреднегоПредпринимательстваУХ", "", "Объект.СубъектМалогоИлиСреднегоПредпринимательстваУХ", ВидПоляФормы.ПолеФлажка, ГруппаФЗ223, , ПараметрыФлажка);
	ИмяКоманды = "ОткрытьДокументРазмерКонтрагента";
	ФормыУХ.СоздатьКоманду(Форма, ИмяКоманды, НСтр("ru = 'Регистратор'"), "Подключаемый_ОткрытьДокументРазмерКонтрагента");
	ГиперссылкаКлассификаторы = Элементы.Добавить("ГиперссылкаРазмерКонтрагента", Тип("КнопкаФормы"), ГруппаФЗ223);
	ГиперссылкаКлассификаторы.Вид = ВидКнопкиФормы.Гиперссылка;
	ГиперссылкаКлассификаторы.Заголовок = ПолучитьИмяКомандыРазмерКонтрагента(Форма);
	ГиперссылкаКлассификаторы.ИмяКоманды = ИмяКоманды;
	
	ГруппаОтступКлассификаторы = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаОтступКлассификаторы", "Классификаторы:", , Страница,, ПараметрыГруппы);
	ГруппаОтступКлассификаторы.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Элемент = Элементы.Добавить("ОтступКлассификаторы", Тип("ДекорацияФормы"), ГруппаОтступКлассификаторы);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.Ширина = 1;
	
	ГруппаКлассификаторов = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаКлассификаторов", "", , ГруппаОтступКлассификаторы,, ПараметрыГруппы);
	ГруппаКлассификаторов.ОтображатьЗаголовок = Ложь;
	
	Элемент = Элементы.Добавить("ДекорацияОписаниеКлассификаторов", Тип("ДекорацияФормы"), ГруппаКлассификаторов);
	Элемент.Вид = ВидДекорацииФормы.Надпись;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	Элемент.МаксимальнаяШирина = 0;
	
	//
	ИмяКоманды = "ОткрытьПараметрыКлассификаторов";
	ФормыУХ.СоздатьКоманду(Форма, ИмяКоманды, "Классификаторы", "Подключаемый_ОткрытьПараметрыКлассификаторов");
	
	//
	ГиперссылкаКлассификаторы = Элементы.Добавить("ГиперссылкаКлассификаторы", Тип("КнопкаФормы"), ГруппаКлассификаторов);
	ГиперссылкаКлассификаторы.Вид = ВидКнопкиФормы.Гиперссылка;
	ГиперссылкаКлассификаторы.Заголовок = НСтр("ru = 'Изменить'");
	ГиперссылкаКлассификаторы.ИмяКоманды = ИмяКоманды;
	
	Форма.ЗаполнитьОписаниеКлассификаторов();
	
КонецПроцедуры

// Заполняет данные объекта-Партнёра по контрагенту Контрагент, добавляя в группу доступа ГруппаДоступаВход.
Процедура ЗаполнитьПартнераПоКонтрагенту(ПартнерОбъект, Контрагент, ГруппаДоступаВход) Экспорт
	Если ПартнерОбъект.ЭтоНовый() Тогда
		ПартнерОбъект.ДатаРегистрации = Дата('19800101');
		ПартнерОбъект.Клиент          = Истина;
		ПартнерОбъект.Поставщик       = Истина;
		ПартнерОбъект.ПрочиеОтношения = Истина;
		ПартнерОбъект.ГруппаДоступа   = ГруппаДоступаВход;
		
		ПартнерОбъект.УстановитьНовыйКод(ОбменДаннымиСервер.ПрефиксИнформационнойБазы());
	КонецЕсли;
	
	// Синхронизация свойств контрагента и партнера.
	Если ПартнерОбъект.Ссылка <> Справочники.Партнеры.НеизвестныйПартнер Тогда
		
		ПартнерОбъект.Наименование        = Контрагент.Наименование;
		ПартнерОбъект.НаименованиеПолное  = Контрагент.НаименованиеПолное;
		
		Если Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
		Иначе
			ПартнерОбъект.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
		КонецЕсли;
		
		ПартнерОбъект.КонтактнаяИнформация.Очистить();
		Для Каждого СтрокаКИКонтрагента Из Контрагент.КонтактнаяИнформация Цикл
			
			Если СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.EmailКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.EmailПартнера;
			ИначеЕсли СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.ТелефонПартнера;
			ИначеЕсли СтрокаКИКонтрагента.Вид = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента Тогда
				ВидКиПартнера = Справочники.ВидыКонтактнойИнформации.АдресПартнера;
			Иначе
				Продолжить;
			КонецЕсли;
			
			СтрокаКиПартнера = ПартнерОбъект.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаКИПартнера, СтрокаКиКонтрагента);
			СтрокаКИПартнера.Вид = ВидКиПартнера;
			
		КонецЦикла;
		
		БылаПометкаУдаления = ПартнерОбъект.ПометкаУдаления;
		ПартнерОбъект.ПометкаУдаления = Ложь;
		
		ПартнерОбъект.ОбменДанными.Загрузка = Истина;
		ПартнерОбъект.Записать();
		
		ПартнерыИКонтрагенты.ЗаписатьИерархиюПартнера(ПартнерОбъект.Ссылка);
		
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьПартнераПоКонтрагенту()

#КонецОбласти 

#Область Справочник_Сценарии
	
Процедура Сценарии_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	Элементы = Форма.Элементы;
	
	//
	ПараметрыПоляВвода = Новый Структура;
	
	ФормыУХ.СоздатьПолеФормы(Элементы, "Периодичность", "", "Объект.Периодичность",,	Элементы.ПлановыеДанные,, ПараметрыПоляВвода);
	
КонецПроцедуры

#КонецОбласти 

#Область Справочник_СтруктураПредприятия

Процедура СтруктураПредприятия_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт	
	
	ПараметрыЭлемента = Новый Структура("ОтображениеПодсказки", ОтображениеПодсказки.Кнопка);
	ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "ОрганизацияУХ", 	, "Объект.Организация", , Форма, Форма.Элементы.Группа1, ПараметрыЭлемента);
	ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "ЦФО", 			, "Объект.ЦФО", 		, Форма, Форма.Элементы.Группа1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
// Процедура добавляет реквизит в параметры запрета редактирования
// Параметры
//		Форма - УправляемаяФорма - Форма
//		ИмяРеквизита - Строка - Имя блокируемого реквизита
//		БлокируемыеЭлементы - Строка - Один или несколько элементов формы через запятую. Элементы, которые будут заблокированы
Процедура ДобавитьРеквизитВПараметрыЗапретаРедактирования(Форма, ИмяРеквизита, БлокируемыеЭлементы) Экспорт
	
	ФормыУХ.ДобавитьРеквизитВПараметрыЗапретаРедактирования(Форма, ИмяРеквизита, БлокируемыеЭлементы);
	
КонецПроцедуры

Функция СоздатьГруппуФормы(Элементы, Имя, Заголовок = "", Вид = неопределено, Родитель, ВставитьПередЭлементом = неопределено, ПараметрыЭлемента = неопределено, События = неопределено) экспорт
	
	Возврат ФормыУХ.СоздатьГруппуФормы(Элементы, Имя, Заголовок, Вид, Родитель, ВставитьПередЭлементом, ПараметрыЭлемента, События);
	
КонецФункции

Функция СоздатьПолеФормы(Элементы, Имя, Заголовок = "", ПутьКДанным, Вид = неопределено, Родитель, ВставитьПередЭлементом = неопределено, ПараметрыЭлемента = неопределено, СобытияЭлемента = неопределено) экспорт
	
	Возврат ФормыУХ.СоздатьПолеФормы(Элементы, Имя, Заголовок, ПутьКДанным, Вид, Родитель, ВставитьПередЭлементом, ПараметрыЭлемента, СобытияЭлемента);
	
КонецФункции

Функция СоздатьКнопкуФормы(Элементы, Имя, Заголовок = "", ИмяКоманды, Вид = неопределено, Родитель, ВставитьПередЭлементом = неопределено, ПараметрыЭлемента = неопределено, СобытияЭлемента = неопределено) экспорт
	
	Возврат СоздатьКнопкуФормы(Элементы, Имя, Заголовок, ИмяКоманды, Вид, Родитель, ВставитьПередЭлементом, ПараметрыЭлемента, СобытияЭлемента);
	
КонецФункции

Функция СоздатьКоманду(Форма, ИмяКоманды, Заголовок, Действие, Картинка = неопределено, Отображение = неопределено) Экспорт
	
	Возврат ФормыУХ.СоздатьКоманду(Форма, ИмяКоманды, Заголовок, Действие, Картинка, Отображение);
	
КонецФункции

Функция ЭлементыФормыУХУжеСозданы(Форма) экспорт
	
	Возврат ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма);
	
КонецФункции

Функция ЭлементыФормыУХДобавлены(Форма) экспорт
	
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
КонецФункции

Функция ИмяЭлементаПризнака() экспорт
	
	Возврат ФормыУХ.ИмяЭлементаПризнака();
	
КонецФункции

// Возвращает имя команды ввода документа регистрации размера контрагента
// для текущего объекта формы.
Функция ПолучитьИмяКомандыРазмерКонтрагента(Форма)
	РезультатФункции = НСтр("ru = 'Регистратор'");
	СсылкаКонтрагент = Форма.Объект.Ссылка;
	Если ЗначениеЗаполнено(СсылкаКонтрагент) Тогда
		НайденныйДокумент = РегистрыСведений.РазмерыКонтрагентовДляЕИС.НайтиДокументРегистрацииРазмера(СсылкаКонтрагент);
		Если ЗначениеЗаполнено(НайденныйДокумент) Тогда
			РезультатФункции = Строка(НайденныйДокумент);
		Иначе
			РезультатФункции = НСтр("ru = 'Ввести Размер контрагента для ЕИС'");
		КонецЕсли;
	Иначе
		РезультатФункции = НСтр("ru = 'Ввести Размер контрагента для ЕИС'");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьИмяКомандыРазмерКонтрагента()


#КонецОбласти 

#Область Справочник_Проекты
	
Процедура ТоварныеКатегории_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка)
	
	ПараметрыГруппаГоризонт = Новый Структура;
	ПараметрыГруппаГоризонт.Вставить("ОтображатьЗаголовок",	Ложь);
	ПараметрыГруппаГоризонт.Вставить("Группировка",			ГруппировкаПодчиненныхЭлементовФормы.ГоризонтальнаяВсегда);
	ПараметрыГруппаГоризонт.Вставить("Объединенная",		Истина);
	ПараметрыГруппаГоризонт.Вставить("Отображение",			ОтображениеОбычнойГруппы.Нет);
	
	ПараметрыГруппаВертикаль = Новый Структура;
	ПараметрыГруппаВертикаль.Вставить("ОтображатьЗаголовок",Ложь);
	ПараметрыГруппаВертикаль.Вставить("Группировка",		ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
	ПараметрыГруппаВертикаль.Вставить("Объединенная",		Истина);
	ПараметрыГруппаВертикаль.Вставить("Отображение",		ОтображениеОбычнойГруппы.Нет);
	
	//
	Элементы = Форма.Элементы;
	
	// Группа для указания счета списания
	ГруппаЕдНДС = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаЕдНДС",,,,,ПараметрыГруппаГоризонт);
	ГруппаКлассификаторы = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаКлассификаторы", НСтр("ru = 'Классификаторы'"),,,,ПараметрыГруппаВертикаль);
	ГруппаОКВЭД2 = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаОКВЭД2", , , ГруппаКлассификаторы,,ПараметрыГруппаГоризонт);
	ГруппаОКПД2 = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаОКПД2"  , , , ГруппаКлассификаторы,,ПараметрыГруппаГоризонт);
	
	// БанковскийСчетСписатьС и КассаСписатьС
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "СтавкаНДС", НСтр("ru = '% НДС'"), "Объект.СтавкаНДС", , ГруппаЕдНДС);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ЕдиницаИзмерения", , "Объект.ЕдиницаИзмерения", , ГруппаЕдНДС);
	
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КодОКВЭД2", , "Объект.КодОКВЭД2", , ГруппаОКВЭД2);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КодОКВЭД2Наименование", , "Объект.КодОКВЭД2.Наименование", ВидПоляФормы.ПолеНадписи, ГруппаОКВЭД2);
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КодОКПД2", , "Объект.КодОКПД2", , ГруппаОКПД2);
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "КодОКПД2Наименование", , "Объект.КодОКПД2.Наименование", ВидПоляФормы.ПолеНадписи, ГруппаОКПД2);
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	
КонецПроцедуры

#КонецОбласти 

#Область ПроведениеДокументов

// Описывает учетные механизмы используемые в локализуемой конфигурации.
//
// Параметры:
//  МеханизмыКонфигурации - Структура - список учетных механизмов,
//              где Ключ - имя механизма, а Значение - модуль реализующий интерфейс проведения.
//
Процедура ДополнитьУчетныеМеханизмыКонфигурации(МеханизмыКонфигурации) Экспорт
	
	МеханизмыКонфигурации.Вставить("ФинансовыеИнструментыУХ", "ВстраиваниеУХФинансовыеИнструменты");
	МеханизмыКонфигурации.Вставить("ГрафикиРасчетовУХ", "ВстраиваниеГрафикиРасчетовУХ");
	
КонецПроцедуры

Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	//ПроведениеСерверУХ.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства, РежимПроведения);

КонецПроцедуры

Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект) Экспорт
	
	//ПроведениеСерверУХ.ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);

КонецПроцедуры

Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	//ПроведениеСерверУХ.ЗаписатьНаборыЗаписей(Объект);
КонецПроцедуры

Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт
	//**ПроведениеДокументов.ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ);
	ПроведениеСерверУХ.ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ);	
КонецПроцедуры

Процедура СформироватьЗаписиРегистровЗаданий(Объект) Экспорт
	//ПроведениеСерверУХ.СформироватьЗаписиРегистровЗаданий(Объект);
КонецПроцедуры

Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	//ПроведениеСерверУХ.ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт

	ПроведениеДокументов.ОбработкаУдаленияПроведенияДокумента(Объект, Отказ);
	
	//**Ссылка = Объект.Ссылка;
	//ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	//		
	//ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);	
	//ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект);	
	//СформироватьСписокРегистровДляКонтроля(Объект);
	//ЗаписатьНаборыЗаписей(Объект);
	//СформироватьЗаписиРегистровЗаданий(Объект);
	//ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства);

КонецПроцедуры

Процедура СформироватьСписокРегистровДляКонтроля(Объект) Экспорт
	
	Движения = Объект.Движения;
	ДополнительныеСвойства = Объект.ДополнительныеСвойства;
	
	Массив = Новый Массив;

	Если ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда
			Массив.Добавить(Движения.РасчетыСКлиентами);
		КонецЕсли;
		
		Если Движения.Найти("ДвижениеИнвестиций") <> Неопределено Тогда
			Массив.Добавить(Движения.ДвижениеИнвестиций);
		КонецЕсли;
		
	КонецЕсли;

	Если ДополнительныеСвойства.Свойство("ДляПроведения") Тогда
		ДополнительныеСвойства.ДляПроведения.Вставить("РегистрыДляКонтроля", Массив);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТекстыЗапроса(ТекстыЗапроса, НомераТаблиц, МассивТекстовЗапроса) Экспорт

	ИменаТаблиц = Новый ТаблицаЗначений;
	ИменаТаблиц.Колонки.Добавить("Ключ");
	ИменаТаблиц.Колонки.Добавить("Значение");
	ОбщегоНазначенияКлиентСервер.ЗаполнитьКоллекциюСвойств(НомераТаблиц, ИменаТаблиц);
	ИменаТаблиц.Индексы.Добавить("Значение"); 
	
	Для НомерЗапроса = 0 По МассивТекстовЗапроса.ВГраница() Цикл
		ТекстыЗапроса.Добавить(МассивТекстовЗапроса[НомерЗапроса], ИменаТаблиц.Найти(НомерЗапроса, "Значение").Ключ);
	КонецЦикла;

КонецПроцедуры

Процедура ЗагрузитьТаблицыДвижений(Движения, ДополнительныеСвойства, Отказ) Экспорт
	
	ПроведениеСерверУХ.ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения);
	
	Если Движения.Найти("ДвиженияДоходыРасходыПрочиеАктивыПассивы") <> Неопределено Тогда
		//**УправленческийУчетПроведениеСервер.ОтразитьДвиженияДоходыРасходыПрочиеАктивыПассивы(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда
		//**ВзаиморасчетыСервер.ОтразитьРасчетыСКлиентами(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если Движения.Найти("РасчетыСПоставщиками") <> Неопределено Тогда
		//**ВзаиморасчетыСервер.ОтразитьРасчетыСПоставщиками(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура СтатьиДвиженияДенежныхСредств_ФормаВыбора_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	
	СтруктураПараметров = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	
	СтруктураПараметров.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СправочникСтатьиДвиженияДенежныхСредств.Ссылка КАК Ссылка,
	|	СправочникСтатьиДвиженияДенежныхСредств.ПометкаУдаления КАК ПометкаУдаления,
	|	СправочникСтатьиДвиженияДенежныхСредств.Родитель КАК Родитель,
	|	СправочникСтатьиДвиженияДенежныхСредств.ЭтоГруппа КАК ЭтоГруппа,
	|	СправочникСтатьиДвиженияДенежныхСредств.Наименование КАК Наименование,
	|	СправочникСтатьиДвиженияДенежныхСредств.Описание КАК Описание,
	|	СправочникСтатьиДвиженияДенежныхСредств.Код КАК Код,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК ВидДвиженияДенежныхСредств,
	|	СправочникСтатьиДвиженияДенежныхСредств.Предопределенный КАК Предопределенный,
	|	СправочникСтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,	
	|	СправочникСтатьиДвиженияДенежныхСредств.КорреспондирующийСчет,
	|	СправочникСтатьиДвиженияДенежныхСредств.РеквизитДопУпорядочивания,
	|	СправочникСтатьиДвиженияДенежныхСредств.ПриоритетОплаты,
	|	СправочникСтатьиДвиженияДенежныхСредств.НаименованиеЯзык1,
	|	СправочникСтатьиДвиженияДенежныхСредств.НаименованиеЯзык2,
	|	СправочникСтатьиДвиженияДенежныхСредств.ХозяйственныеОперации.*,
	|	СправочникСтатьиДвиженияДенежныхСредств.ДополнительныеРеквизиты.*,
	|	СправочникСтатьиДвиженияДенежныхСредств.Приоритет КАК Приоритет,
	|	СправочникСтатьиДвиженияДенежныхСредств.ПриходРасход КАК ПриходРасход,
	|	СправочникСтатьиДвиженияДенежныхСредств.ФункциональноеНаправление КАК ФункциональноеНаправление,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидАналитики1 КАК ВидАналитики1,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидАналитики2 КАК ВидАналитики2,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидАналитики3 КАК ВидАналитики3,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидАналитики4 КАК ВидАналитики4,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидАналитики5 КАК ВидАналитики5,
	|	СправочникСтатьиДвиженияДенежныхСредств.ВидАналитики6 КАК ВидАналитики6,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьСтатью, ЛОЖЬ) КАК КонтролироватьСтатью,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику1, ЛОЖЬ) КАК КонтролироватьАналитику1,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику2, ЛОЖЬ) КАК КонтролироватьАналитику2,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику3, ЛОЖЬ) КАК КонтролироватьАналитику3,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику4, ЛОЖЬ) КАК КонтролироватьАналитику4,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику5, ЛОЖЬ) КАК КонтролироватьАналитику5,
	|	ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику6, ЛОЖЬ) КАК КонтролироватьАналитику6
	|{ВЫБРАТЬ
	|	КонтролироватьСтатью,
	|	КонтролироватьАналитику1,
	|	КонтролироватьАналитику2,
	|	КонтролироватьАналитику3,
	|	КонтролироватьАналитику4,
	|	КонтролироватьАналитику5,
	|	КонтролироватьАналитику6}
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СправочникСтатьиДвиженияДенежныхСредств
	|		{ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтроляЛимитаСтатейБюджетов.СрезПоследних(&ПараметрыЛимитирования_Период, ВидБюджета = &ПараметрыЛимитирования_ВидБюджета) КАК ПараметрыКонтроляЛимитаСтатейБюджетов
	|		ПО СправочникСтатьиДвиженияДенежныхСредств.Ссылка = ПараметрыКонтроляЛимитаСтатейБюджетов.СтатьяБюджета}
	|{ГДЕ
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьСтатью, ЛОЖЬ)) КАК КонтролироватьСтатью,
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику1, ЛОЖЬ)) КАК КонтролироватьАналитику1,
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику2, ЛОЖЬ)) КАК КонтролироватьАналитику2,
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику3, ЛОЖЬ)) КАК КонтролироватьАналитику3,
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику4, ЛОЖЬ)) КАК КонтролироватьАналитику4,
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику5, ЛОЖЬ)) КАК КонтролироватьАналитику5,
	|	(ЕСТЬNULL(ПараметрыКонтроляЛимитаСтатейБюджетов.КонтролироватьАналитику6, ЛОЖЬ)) КАК КонтролироватьАналитику6}";
	
	СтруктураПараметров.ОсновнаяТаблица = "Справочник.СтатьиДвиженияДенежныхСредств";
	СтруктураПараметров.ДинамическоеСчитываниеДанных = Истина;
	
	Форма.Список.ПроизвольныйЗапрос = Истина;
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СтруктураПараметров);
	
	// Элементы формы
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидАналитики1", , "Список.ВидАналитики1",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидАналитики2", , "Список.ВидАналитики2",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидАналитики3", , "Список.ВидАналитики3",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидАналитики4", , "Список.ВидАналитики4",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидАналитики5", , "Список.ВидАналитики5",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ВидАналитики6", , "Список.ВидАналитики6",, Элементы.Список);
	
	//
	АналитикиСтатейБюджетовУХ.ПриСозданииФормыВыбора(Форма);
	УправлениеФормойУХ.УстановитьПредставлениеОтбора(Форма, , Метаданные.Справочники.СтатьиДвиженияДенежныхСредств);
	
КонецПроцедуры

#КонецОбласти

#Область БСП_КомандыОтчетов

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Функция ДобавитьКомандуОбработчик(КомандыОтчетов, Идентификатор, Представление) Экспорт
	
	КомандаОтчет = КомандыОтчетов.Добавить();
	КомандаОтчет.Обработчик = "ВстраиваниеУХКлиент.Подключаемый_ОткрытьФорму";
	КомандаОтчет.Представление = Представление;
	КомандаОтчет.Идентификатор = Идентификатор;
	КомандаОтчет.МножественныйВыбор = Ложь;
	
	Возврат КомандаОтчет;
	
КонецФункции

Процедура ПередДобавлениемКомандОтчетов(КомандыОтчетов, Параметры, СтандартнаяОбработка) Экспорт

КонецПроцедуры

#КонецОбласти

#Область Хозрасчетный

Функция ДоступностиПланаСчетовХозрасчетный() Экспорт

	Доступности = Новый Структура("Валютный,Количественный,УчетПоПодразделениям,УчетПоНаправлениямДеятельности"); 
	
	Доступности.Вставить("Валютный",				СтрРазделить("Валюта,ВалютнаяСумма", ","));
	Доступности.Вставить("Количественный",			СтрРазделить("Количество,НадписьКоличество", ","));
	Доступности.Вставить("УчетПоПодразделениям",	СтрРазделить("Подразделение", ","));
	Доступности.Вставить("НалоговыйУчет", 			СтрРазделить("СуммаНУ,СуммаПР,СуммаВР", ","));
	
	Возврат Доступности;

КонецФункции

#КонецОбласти

#Область УправлениеДоступном

Процедура ДобавитьРоль_ДобавлениеИзменениеДанныхБухгалтерии(ОписаниеПрофиля) Экспорт
	
КонецПроцедуры

Процедура ДобавитьРоль_ЧтениеПлановОбмена(ОписаниеПрофиля) Экспорт 
	//ОписаниеПрофиля.Роли.Добавить("ЧтениеПлановОбмена");
КонецПроцедуры

Процедура ПередЗаписьюКонтрагентаСозданиеПартнераУХПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("НеСоздаватьПартнера") И (Источник.ДополнительныеСвойства.НеСоздаватьПартнера = Истина) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.Партнер.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	НовыйПартнер = Справочники.Партнеры.СоздатьЭлемент();
	
	ЗаполнитьЗначенияСвойств(НовыйПартнер, Источник, , "Владелец,ДополнительныеРеквизиты,КонтактнаяИнформация");
	
	Если Источник.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.ЧастноеЛицо;
	Иначе
		НовыйПартнер.ЮрФизЛицо = Перечисления.КомпанияЧастноеЛицо.Компания;
	КонецЕсли;
		
	НовыйПартнер.Клиент 			= Истина;
	НовыйПартнер.Поставщик 			= Истина;
	НовыйПартнер.ПрочиеОтношения 	= Истина;
	НовыйПартнер.ДатаРегистрации 	= ТекущаяДатаСеанса();
	НовыйПартнер.Комментарий 		= НСтр("ru = '#Создан из контрагента'");
	
	НовыйПартнер.ДополнительныеРеквизиты.Загрузить(Источник.ДополнительныеРеквизиты.Выгрузить());
	НовыйПартнер.КонтактнаяИнформация.Загрузить(Источник.КонтактнаяИнформация.Выгрузить());
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() 
		И ПолучитьФункциональнуюОпцию("ИспользоватьГруппыДоступаПартнеров") Тогда
		// Заполнение группы доступа.
		НоваяГруппаДоступа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ГруппаДоступа", Справочники.ГруппыДоступаПартнеров.ПустаяСсылка());
		Если ЗначениеЗаполнено(НоваяГруппаДоступа) Тогда
			НовыйПартнер.ГруппаДоступа = НоваяГруппаДоступа;
		Иначе
			РазрешенныеГруппы = УправлениеДоступом.ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа(Тип("СправочникСсылка.Партнеры"), Истина);
			Если РазрешенныеГруппы.Количество() > 0 Тогда
				НовыйПартнер.ГруппаДоступа = РазрешенныеГруппы[0];
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		НовыйПартнер.Записать();						
	Исключение
		
		ТекстОшибки = СтрШаблон(НСтр("Не удалось создать партнера по контрагенту <%1>. При причине: %2"), Источник.Наименование, ОписаниеОшибки());
		
		ЗаписьЖурналаРегистрации(НСтр("ЕРПУХ.СозданиеПартнераПоКонтрагенту"), УровеньЖурналаРегистрации.Ошибка, Метаданные.Справочники.Партнеры, ТекстОшибки);		
		Сообщить(ТекстОшибки);
		
		Отказ = Истина;
		Возврат; 
		
	КонецПопытки;
	
	Источник.Партнер = НовыйПартнер.Ссылка;
	
КонецПроцедуры

#КонецОбласти
