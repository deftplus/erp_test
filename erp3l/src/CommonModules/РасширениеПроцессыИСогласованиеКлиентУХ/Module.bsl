////////////////////////////////////////////////////////////////////////////////////////
// Модуль содержит клиентские методы, специфичные для 1с:Управление холдингом, вызов 
// которых может потребоваться из 1С:БП МСФО.
////////////////////////////////////////////////////////////////////////////////////////

Процедура ПринятьКСогласованию(ФормаВход, СсылкаВход) Экспорт
	ДействияСогласованиеУХКлиент.ПринятьКСогласованию(ФормаВход, СсылкаВход);
КонецПроцедуры

Процедура ИсторияСогласования(ФормаВход, СсылкаВход) Экспорт
	ДействияСогласованиеУХКлиент.ИсторияСогласования(ФормаВход, СсылкаВход);
КонецПроцедуры

Процедура СогласоватьДокумент(ФормаВход) Экспорт
	ДействияСогласованиеУХКлиент.СогласоватьДокумент(ФормаВход);
КонецПроцедуры

Процедура ОтменитьСогласование(ФормаВход) Экспорт
	ДействияСогласованиеУХКлиент.ОтменитьСогласование(ФормаВход);
КонецПроцедуры

Процедура МаршрутСогласования(ФормаВход, СсылкаВход) Экспорт
	ДействияСогласованиеУХКлиент.МаршрутСогласования(ФормаВход, СсылкаВход);
КонецПроцедуры

Процедура ТелеграмВложенныеФайлы(ФормаВход, СсылкаВход) Экспорт
	//Для синхронизации с версией 3.2; не удалять!
КонецПроцедуры

Процедура ЗапуститьПроверкуТекущихНапоминаний() Экспорт
	ПроверитьТекущиеНапоминанияПользователя();
КонецПроцедуры

Процедура ОткрытьФормуУХ(СтрокаОткрытияФормыВход, СтруктураПараметровВход = Неопределено) Экспорт
	Если СтруктураПараметровВход = Неопределено Тогда
		СтруктураПараметровРабочий = Новый Структура;
	Иначе
		СтруктураПараметровРабочий = СтруктураПараметровВход;
	КонецЕсли;
	ОткрытьФорму(СтрокаОткрытияФормыВход, СтруктураПараметровРабочий);
КонецПроцедуры

Процедура ОткрытьФормуДоступныхСхемРеквизитов(СтруктураПараметров, ФормаВладелец, ОписаниеОЗакрытии) Экспорт
	ОткрытьФорму("Справочник.СхемаДоступностиРеквизитов.Форма.ФормаВводаДоступныхФормСхемРеквизитов", СтруктураПараметров, ФормаВладелец, , , , ОписаниеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры		// ОткрытьФормуДоступныхСхемРеквизитов()

// Выставляет объекту формы Форма новый статус СтатусВход. 
Процедура ИзменитьСостояниеЗаявкиКлиент(СтатусВход, Форма) Экспорт
	ОбъектСогласования = Форма.Объект.Ссылка;
	
	Если ТипЗнч(ОбъектСогласования) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		Результат = ДействияСогласованиеУХСервер.ИзменитьСостояниеЗаявкиСервер(ОбъектСогласования, СтатусВход);
	Иначе		
		Результат = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСогласования, СтатусВход);	
	КонецЕсли;
	
	УправлениеПроцессамиСогласованияУХКлиентСервер.УстановитьКартинкСтатусаПроцесса(ОбъектСогласования, Форма);
	Если Результат Тогда		
		Форма.Прочитать();
		Форма.СтатусОбъекта = СтатусВход;
		Оповестить("СостояниеЗаявкиПриИзменении", Форма.СостояниеЗаявки, Форма);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось изменить состояние объекта ""%Объект%"" на ""%Состояние%""'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСогласования));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СтатусВход));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ,"Объект");
	КонецЕсли;
КонецПроцедуры

Функция ОповеститьПользователей(ВидСобытия, ШаблонОповещения = Неопределено, ИсточникСсылка = Неопределено, СписокРассылки = Неопределено, ДопПараметры = Неопределено, ЗадачаВход = Неопределено, ЭтапПроцессаВход = Неопределено) Экспорт
	РезультатФункции = МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытия,ШаблонОповещения,ИсточникСсылка,СписокРассылки,ДопПараметры,ЗадачаВход,ЭтапПроцессаВход);	
	Возврат РезультатФункции;
КонецФункции
