#Область СобытияМодуляФормы

#Область ФормаДокумента

#Область СтандартныеОбработчики

// нетиповое событие документа. Вызывается перед исполнением основного кода
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	
	//
	СоздатьРеквизитыФормыДокумента(Форма);
	СоздатьЭлементыФормыДокумента(Форма);
	ПодготовитьФормуНаСервере(Форма);
	
КонецПроцедуры

Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	ПриУстановкеВидимости(Форма);
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
	// Показать результат проверки лимитов на форме
	КонтрольУХ.ВыполнитьЗагрузкуРезультатовКонтроля(Форма);
	
КонецПроцедуры

Процедура ПриУстановкеВидимости(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НЕ ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат ;
	КонецЕсли;
	
	//
	ЭтоПланированиеПотребностей = ЭтоПланированиеПотребностей(Объект.РежимФормированияПотребностейПланомЗакупок);
	
	// элементы шапки
	Элементы.Организация.Видимость = ЭтоПланированиеПотребностей;
	Элементы.ЦФО.Видимость = ЭтоПланированиеПотребностей;
	Элементы.Проект.Видимость = ЭтоПланированиеПотребностей;
	Элементы.МестоПоставки.Видимость = ЭтоПланированиеПотребностей;
	Элементы.Приоритет.Видимость = ЭтоПланированиеПотребностей;
	Элементы.Менеджер.Видимость = ЭтоПланированиеПотребностей;
	
	//
	ЭлементыКонтроля = КонтрольУХ.ИменаРеквизитовЭлементовКонтроля();
	
	Элементы[ЭлементыКонтроля.ИмяСтраницы].Видимость = ЭтоПланированиеПотребностей;
	Элементы[ЭлементыКонтроля.ИмяКоманды].Видимость = ЭтоПланированиеПотребностей;
	
	// стандартные реквизиты Статей невидны никогда
	Элементы.СтатьяБюджетов.Видимость = Ложь;
	Элементы.СтатьяБюджетовОплатыДоОтгрузки.Видимость = Ложь;
	Элементы.СтатьяБюджетовОплатыПослеОтгрузки.Видимость = Ложь;
	
	//
	ФлагВидимости = ЭтоПланированиеПотребностей;
	Элементы.СтатьяБюджета.Видимость = ФлагВидимости;
	Элементы.Аналитика1.Видимость = ФлагВидимости;
	Элементы.Аналитика2.Видимость = ФлагВидимости;
	Элементы.Аналитика3.Видимость = ФлагВидимости;
	
	ФлагВидимости = ЭтоПланированиеПотребностей И Объект.ОтражаетсяВБюджетированииОплаты;
	Элементы.СтатьяБюджетаОплат.Видимость = ФлагВидимости;
	Элементы.АналитикаОплат1.Видимость = ФлагВидимости;
	Элементы.АналитикаОплат2.Видимость = ФлагВидимости;
	Элементы.АналитикаОплат3.Видимость = ФлагВидимости;
	
	ФлагВидимости = ЭтоПланированиеПотребностей И Объект.ОтражаетсяВБюджетированииОплатыКредит;
	Элементы.СтатьяБюджетаОплатКредит.Видимость = ФлагВидимости;
	Элементы.АналитикаОплатКредит1.Видимость = ФлагВидимости;
	Элементы.АналитикаОплатКредит2.Видимость = ФлагВидимости;
	Элементы.АналитикаОплатКредит3.Видимость = ФлагВидимости;
	
	Элементы.СтатьяБюджетаОплат.Заголовок = 
		?(Объект.ОтражаетсяВБюджетированииОплаты И Не Объект.ОтражаетсяВБюджетированииОплатыКредит,
			НСтр("ru = 'Оплаты'"),
			НСтр("ru = 'Оплаты (до поступления)'"));
	
КонецПроцедуры

Процедура УстановитьУсловноеОформление(Форма) Экспорт
	
	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	Если ЭтоПланированиеПотребностей(Форма.Объект.РежимФормированияПотребностейПланомЗакупок) Тогда
		
		// Отметка незаполненного для единицы измерения
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамНоменклатураЕдиницаИзмерения");

		ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыПоПериодам.ТоварнаяКатегория");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНеЗаполненного", Ложь);
		
	КонецЕсли;
	
	СписокРежимов = Новый СписокЗначений;
	СписокРежимов.Добавить(Перечисления.РежимыФормированияПотребностейПланомЗакупок.РегистрируютПотребности);
	СписокРежимов.Добавить(Перечисления.РежимыФормированияПотребностейПланомЗакупок.ФормируютПотребности);
	
	
	// Номенклатура не видна совсем
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамНоменклатура");
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыНоменклатура");

	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РежимФормированияПотребностейПланомЗакупок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокРежимов;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Товарная позиция видна, если 
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамТоварнаяПозиция");
	ПолеЭлемента = ЭлементУО.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыТоварнаяПозиция");

	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РежимФормированияПотребностейПланомЗакупок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокРежимов;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Цена и кол-во доступны, если товарная категория НЕ заполнена
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамКоличествоУпаковок");
	Если Форма.Объект.ПланироватьПоСумме Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамЦена");
	КонецЕсли;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РежимФормированияПотребностейПланомЗакупок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокРежимов;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыПоПериодам.ТоварнаяКатегория");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",					НСтр("ru = '<Нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",		Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",	Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 			ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	// Оформление контролей
	КонтрольУХ.УстановитьУсловноеОформлениеТаблицыКонтролей(Форма);
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеКроссТаблицы(УсловноеОформление, ПланироватьПоСумме, ИмяКолонки) Экспорт
	
	// РежимФормированияПотребностейПланомЗакупок
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамКоличество_"+ИмяКолонки);
	Если ПланироватьПоСумме Тогда
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТоварыПоПериодамЦена_"+ИмяКолонки);
	КонецЕсли;
	
	СписокРежимов = Новый СписокЗначений;
	СписокРежимов.Добавить(Перечисления.РежимыФормированияПотребностейПланомЗакупок.РегистрируютПотребности);
	СписокРежимов.Добавить(Перечисления.РежимыФормированияПотребностейПланомЗакупок.ФормируютПотребности);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РежимФормированияПотребностейПланомЗакупок");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокРежимов;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ТоварыПоПериодам.ТоварнаяКатегория");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст",					НСтр("ru = '<Нет>'"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",		Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного",	Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 			ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры
#КонецОбласти 

#Область КонтрольЛимитовДокумента
	
//Процедура ВыполнитьИнтерактивнуюПроверкуЛимитов(Форма, ОбновитьЛимиты = Истина, КэшированныеЗначения, ПараметрыПреобразования) экспорт
//	
//	Если ОбновитьЛимиты = Истина ИЛИ ТребуетсяОбновлениеЗапроса(Форма) Тогда
//	
//		// Инициализируем запрос
//		Запрос = Новый Запрос;
//		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//		
//		// Формируем ВТ с данными документа
//		Сформировать_ВТ_СДаннымиДокумента(Форма, Запрос, КэшированныеЗначения, ПараметрыПреобразования);
//		
//		КонтрольЛимитовУХ.СформироватьТаблицуКонтроляЛимитовБюджетов(Форма, Запрос);
//		
//	КонецЕсли; 
//	
//	// Показать результат проверки лимитов на форме
//	КонтрольЛимитовУХ.ОтобразитьРезультатыКонтроляНаФорме(Форма);
//	ОперативноеПланированиеФормыУХ.УстановитьКартинкуСтраницыКонтроль(Форма);
//	
//КонецПроцедуры

//Функция ТребуетсяОбновлениеЗапроса(Форма)
//	
//	Возврат НЕ (Форма.Объект.Проведен И НЕ Форма.Модифицированность);
//	
//КонецФункции

//Процедура Сформировать_ВТ_СДаннымиДокумента(Форма, Запрос, КэшированныеЗначения, ПараметрыПреобразования)
//	
//	Объект = Форма.Объект;

//	Запрос.УстановитьПараметр("Дата", 						Объект.Дата);
//	
//	// Необходимые параметры
//	Запрос.УстановитьПараметр("Ссылка", 					Объект.Ссылка);
//	Запрос.УстановитьПараметр("Регистратор", 				Объект.Ссылка);
//	Запрос.УстановитьПараметр("ЭтоНовый", 					НЕ ЗначениеЗаполнено(Объект.Ссылка));
//	
//	//Запрос.УстановитьПараметр("ДокументПланирования", 		Объект.ДокументПланирования);
//	Запрос.УстановитьПараметр("ДокументПланирования", 		Документы.ОперативныйПлан.ПустаяСсылка());
//	Запрос.УстановитьПараметр("ВидБюджета", 				Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов);
//	Запрос.УстановитьПараметр("Организация", 				Объект.Организация);
//	Запрос.УстановитьПараметр("ЦФО", 						Объект.ЦФО);
//	Запрос.УстановитьПараметр("Проект", 					Объект.Проект);
//	//Запрос.УстановитьПараметр("ПриходРасход", 				Объект.ПриходРасход);
//	Запрос.УстановитьПараметр("ВалютаДокумента", 			Объект.Валюта);
//	Запрос.УстановитьПараметр("Контрагент", 				Объект.Контрагент);
//	Запрос.УстановитьПараметр("ДоговорКонтрагента", 		Объект.ДоговорКонтрагента);
//	Запрос.УстановитьПараметр("ДатаНачала", 				Объект.НачалоПериода);
//	Запрос.УстановитьПараметр("ВидОперации", 				неопределено);
//	
//	// ВРЕМЕННЫЕ ТАБЛИЦЫ
//	
//	// ВТ_ДвиженияОперации
//	ТаблицаДвиженияОперации = ПолучитьТаблицуОперативныхПланов(Форма, КэшированныеЗначения, ПараметрыПреобразования);
//	КонтрольЛимитовУХ.ЗагрузитьТаблицуДвиженийВоВременнуюТаблицу(Запрос, "ВТ_ТаблицаПлановССуммамиЛимитирования", ТаблицаДвиженияОперации);
//	
//КонецПроцедуры

//Функция ПолучитьТаблицуОперативныхПланов(Форма, КэшированныеЗначения, ПараметрыПреобразованияКроссТаблицы)
//	
//	Объект = Форма.Объект;
//	
//	Если Объект.КроссТаблица Или Форма.ИспользуютсяПланируемыеОстатки Тогда
//		ПараметрыПреобразования = ПараметрыПреобразованияКроссТаблицы;
//		
//		СтруктураДействий = Новый Структура;
//		
//		//ДобавитьВСтруктуруДействияПриИзмененииКоличестваУпаковок(СтруктураДействий);
//		СтруктураДействий.Вставить("ПересчитатьКоличествоЕдиниц", Новый Структура("НужноОкруглять", Ложь));
//		
//		Если НЕ ЭтоПланированиеПотребностей(Объект.РежимФормированияПотребностейПланомЗакупок) Тогда
//			// Для централизованных закупок пересчитывать сумму не надо
//			СтруктураДействий.Вставить("ПересчитатьСумму");
//		КонецЕсли;
//		
//		Планирование.ЗаполнитьТаблицуИзКроссТаблицы(Объект.Товары, Форма.ТоварыПоПериодам, ПараметрыПреобразования, 
//			СтруктураДействий, КэшированныеЗначения);
//	
//	КонецЕсли;
//	
//	СтрокиТоваров = Объект.Товары.НайтиСтроки(Новый Структура("Отменено, Замещен", Ложь, Ложь));	
//	
//	ТаблицаТоваров = Объект.Товары.Выгрузить(СтрокиТоваров);	
//	
//	//
//	ТаблицаПланов = Новый ТаблицаЗначений;
//	ТаблицаПланов.Колонки.Добавить("ВидБюджета", 			Новый ОписаниеТипов("ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета"));
//	ТаблицаПланов.Колонки.Добавить("Период", 				ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
//	ТаблицаПланов.Колонки.Добавить("ДокументПланирования",	Новый ОписаниеТипов("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));
//	ТаблицаПланов.Колонки.Добавить("ЦФО", 					Новый ОписаниеТипов("СправочникСсылка.Организации"));
//	ТаблицаПланов.Колонки.Добавить("Проект", 				Новый ОписаниеТипов("СправочникСсылка.Проекты"));
//	ТаблицаПланов.Колонки.Добавить("ПериодОтчета", 			Новый ОписаниеТипов("СправочникСсылка.Периоды"));
//	ТаблицаПланов.Колонки.Добавить("СтатьяБюджета", 		Метаданные.ОпределяемыеТипы.СтатьиБюджетов.Тип);
//	ТаблицаПланов.Колонки.Добавить("Аналитика1", 			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
//	ТаблицаПланов.Колонки.Добавить("Аналитика2", 			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
//	ТаблицаПланов.Колонки.Добавить("Аналитика3",			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
//	ТаблицаПланов.Колонки.Добавить("Валюта", 				Новый ОписаниеТипов("СправочникСсылка.Валюты"));
//	ТаблицаПланов.Колонки.Добавить("ПриходРасход", 			Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход"));
//	ТаблицаПланов.Колонки.Добавить("Контрагент", 			Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
//	ТаблицаПланов.Колонки.Добавить("ДоговорКонтрагента",	Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
//	ТаблицаПланов.Колонки.Добавить("Организация", 			Новый ОписаниеТипов("СправочникСсылка.Организации"));
//	ТаблицаПланов.Колонки.Добавить("ДокументРезервирования",Новый ОписаниеТипов("ДокументСсылка.ОперативныйПлан"));
//	ТаблицаПланов.Колонки.Добавить("Лимит",					Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
//	ТаблицаПланов.Колонки.Добавить("Зарезервировано",		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
//	ТаблицаПланов.Колонки.Добавить("Заявлено",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
//	ТаблицаПланов.Колонки.Добавить("Исполнено",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
//	
//	ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов;
//	
//	// Период отчета
//	ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Объект.НачалоПериода, ЦентрализованныеЗакупкиУХ.ПолучитьПериодичностьЗакупок(),0);
//	
//	//
//	РеквизитыШапки = "ВидБюджета, ЦФО, Проект, Организация, Контрагент, ДоговорКонтрагента, ПриходРасход, СтатьяБюджета,Аналитика1,Аналитика2,Аналитика3";
//	Шапка = Новый Структура(РеквизитыШапки);
//	ЗаполнитьЗначенияСвойств(Шапка, Объект);
//	Шапка.ВидБюджета = ВидБюджета;
//	Шапка.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.ПустаяСсылка();
//	Шапка.СтатьяБюджета = Объект.СтатьяБюджета;
//	
//	Для Каждого Строка Из ТаблицаТоваров Цикл
//		
//		СтрокаПлана = ТаблицаПланов.Добавить();
//		СтрокаПлана.Заявлено = Строка.Сумма;
//		
//		ЗаполнитьЗначенияСвойств(СтрокаПлана, Шапка, РеквизитыШапки);
//		СтрокаПлана.ДокументРезервирования = неопределено;
//		СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Строка.ДатаПоступления, Объект.Периодичность, 0);
//		
//	КонецЦикла;
//	
//	ТаблицаПланов.ЗаполнитьЗначения(Объект.Валюта,	"Валюта");
//	ТаблицаПланов.ЗаполнитьЗначения(Объект.Дата,	"Период");
//	
//	Возврат ТаблицаПланов;
//	
//КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьРеквизитыФормыДокумента(Форма)
	
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	//
	Реквизиты = Новый Массив;
	Реквизиты.Добавить(Новый РеквизитФормы("ТоварнаяПозиция",	Метаданные.ОпределяемыеТипы.ТипНоменклатураЕХ.Тип, "ТоварыПоПериодам"));
	Реквизиты.Добавить(Новый РеквизитФормы("ТоварнаяКатегория", Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"), "ТоварыПоПериодам"));
	Реквизиты.Добавить(Новый РеквизитФормы("ТоварнаяКатегория", Новый ОписаниеТипов("СправочникСсылка.ТоварныеКатегории"), "Объект.Товары"));
	
	Реквизиты.Добавить(Новый РеквизитФормы("ЕстьПредупреждения",Новый ОписаниеТипов("Булево")));
	Реквизиты.Добавить(Новый РеквизитФормы("ЕстьИнформация",	Новый ОписаниеТипов("Булево")));
	
	Реквизиты.Добавить(Новый РеквизитФормы("ТипНоменклатуры",	Новый ОписаниеТипов("неопределено")));
	
	Форма.ИзменитьРеквизиты(Реквизиты);
	
КонецПроцедуры

Процедура СоздатьЭлементыФормыДокумента(Форма)
	
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
	//
	ПараметрыПоляВвода = Новый Структура;
	ПараметрыПоляВвода.Вставить("ПоложениеЗаголовка", ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыПоляВвода.Вставить("АвтоМаксимальнаяШирина", Ложь);
	ПараметрыПоляВвода.Вставить("МаксимальнаяШирина", 28);
	
	// Организация
	ФормыУХ.СоздатьПолеФормы(Элементы, "Организация",			"", "Объект.Организация",		ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФО",					"", "Объект.ЦФО",				ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Проект",				"", "Объект.Проект",			ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "МестоПоставки",			"", "Объект.МестоПоставки", 	ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Приоритет",				"", "Объект.Приоритет",			ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	//ФормыУХ.СоздатьПолеФормы(Элементы, "Контрагент",			"", "Объект.Контрагент",		ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	//ФормыУХ.СоздатьПолеФормы(Элементы, "ДоговорКонтрагента",	"", "Объект.ДоговорКонтрагента",ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Менеджер",				"", "Объект.Менеджер", 			ВидПоляФормы.ПолеВвода, Элементы.ШапкаЛево,, ПараметрыПоляВвода);
	
	//
	//ПереопределениеСобытийФормы.СоздатьРеквизитФормыПереопределенныеСобытияЭлементов(Форма);
	
	ИмяРодителя = Элементы.ГруппаОтражатьВБюджетировании.Имя;
	ИмяКуда = неопределено;
	
	#Область АналитикиСтатейБюджета
	// Статьи бюджетов
	МассивОписанийСтатей = Новый Массив;
		
	// СтатьяБюджета
	ИмяЭлемента = "СтатьяБюджета";
	ДанныеАналитики = АналитикиСтатейБюджетовУХ.Новый_АналитикиСтатьиБюджета("Аналитика%1", "Объект", "");
	ПараметрыСтатьиОбъект = АналитикиСтатейБюджетовУХ.Новый_СтатьяБюджетов(ИмяЭлемента, "Объект", ДанныеАналитики);
	
	//
	АналитикиСтатейБюджетовУХ.СтатьяБюджета_НовыйЭлементФормы(ПараметрыСтатьиОбъект, ИмяЭлемента, "Объект", ИмяРодителя, ИмяКуда);
	АналитикиСтатейБюджетовУХ.СтатьяБюджетов_ЭлементыАналитикиИзШаблона(ПараметрыСтатьиОбъект, ИмяЭлемента, "Аналитика%1", "Объект", "");
	
	//
	МассивОписанийСтатей.Добавить(ПараметрыСтатьиОбъект);
		
	// СтатьяБюджетаОплат
	ИмяЭлемента = "СтатьяБюджетаОплат";
	ДанныеАналитики = АналитикиСтатейБюджетовУХ.Новый_АналитикиСтатьиБюджета("АналитикаОплатКредит%1", "Объект", "");
	ПараметрыСтатьиОбъект = АналитикиСтатейБюджетовУХ.Новый_СтатьяБюджетов(ИмяЭлемента, "Объект", ДанныеАналитики);
	
	//
	АналитикиСтатейБюджетовУХ.СтатьяБюджета_НовыйЭлементФормы(ПараметрыСтатьиОбъект, ИмяЭлемента, "Объект", ИмяРодителя, ИмяКуда);
	АналитикиСтатейБюджетовУХ.СтатьяБюджетов_ЭлементыАналитикиИзШаблона(ПараметрыСтатьиОбъект, ИмяЭлемента, "АналитикаОплатКредит%1", "Объект", "");
	
	//
	МассивОписанийСтатей.Добавить(ПараметрыСтатьиОбъект);
	
	// СтатьяБюджетаОплатКредит
	ИмяЭлемента = "СтатьяБюджетаОплатКредит";
	ДанныеАналитики = АналитикиСтатейБюджетовУХ.Новый_АналитикиСтатьиБюджета("АналитикаОплат%1", "Объект", "");
	ПараметрыСтатьиОбъект = АналитикиСтатейБюджетовУХ.Новый_СтатьяБюджетов(ИмяЭлемента, "Объект", ДанныеАналитики);
	
	//
	АналитикиСтатейБюджетовУХ.СтатьяБюджета_НовыйЭлементФормы(ПараметрыСтатьиОбъект, ИмяЭлемента, "Объект", ИмяРодителя, ИмяКуда);
	АналитикиСтатейБюджетовУХ.СтатьяБюджетов_ЭлементыАналитикиИзШаблона(ПараметрыСтатьиОбъект, ИмяЭлемента, "АналитикаОплат%1", "Объект", "");
	
	//
	МассивОписанийСтатей.Добавить(ПараметрыСтатьиОбъект);
	
	// Создать элементы формы для статей бюджетов и их аналитик
	АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(Форма, МассивОписанийСтатей, ПараметрыПоляВвода);
	#КонецОбласти 
	
	// Регистрируем обработчики событий элементов формы
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.ТоварыПоПериодам, "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.Товары, 		   "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	Если Объект.ОтражаетсяВБюджетировании Тогда
		ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.СтатьяБюджета,  "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
		ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.Аналитика1,	   "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
		ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.Аналитика2,	   "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
		ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.Аналитика3,	   "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	КонецЕсли;
	
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.ЦФО,	   		   "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Форма.Элементы.Проект,		   "ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	
#Область ТоварнаяПозиция
	//
	ФормыУХ.СоздатьПолеФормы(
		Элементы, "ТоварыТоварнаяПозиция", НСтр("ru = 'Товарная позиция'"), "Объект.Товары.ТоварнаяПозиция", , 
		Элементы.ТоварыНоменклатура.Родитель, Элементы.ТоварыНоменклатура,
		, Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииТоварыТоварнаяПозиция"));
		
	ФормыУХ.СоздатьПолеФормы(
		Элементы, "ТоварыПоПериодамТоварнаяПозиция", НСтр("ru = 'Товарная позиция'"), "ТоварыПоПериодам.ТоварнаяПозиция", , 
		Элементы.ТоварыПоПериодамНоменклатура.Родитель, Элементы.ТоварыПоПериодамНоменклатура,
		, Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииТоварыПоПериодамТоварнаяПозиция"));
		
	ФормыУХ.СоздатьПолеФормы(
		Элементы, "ТоварыПоПериодамТоварнаяКатегорияЕдиницаИзмерения", , "ТоварыПоПериодам.ТоварнаяКатегория.ЕдиницаИзмерения",,
		Элементы.ТоварыПоПериодамУпаковкаЕдиницаИзмерения,,
		Новый Структура("ТолькоПросмотр, АвтоОтметканезаполненного, ПоложениеЗаголовка", Истина, Истина, ПоложениеЗаголовкаЭлементаФормы.Нет));
		
	//
	ИмяКоманды = "ЗафиксироватьТипНоменклатуры";
	Команда = ФормыУХ.СоздатьКоманду(Форма, ИмяКоманды, НСтр("ru = 'Подбор заявок'"), "Подключаемый_ЗафиксироватьТипНоменклатуры");
	Команда.Заголовок = НСтр("ru = 'Тип номенклатуры: любой'");
	Команда.Подсказка = НСтр("ru = 'Зафиксировать тип номенклатуры'");
	ФормыУХ.СоздатьКнопкуФормы(Элементы, "ТоварыПоПериодамЗафиксироватьТипНоменклатуры", , ИмяКоманды, ВидКнопкиФормы.КнопкаКоманднойПанели, Элементы.ТоварыПоПериодамКоманднаяПанель);
	ФормыУХ.СоздатьКнопкуФормы(Элементы, "ТоварыЗафиксироватьТипНоменклатуры", ,           ИмяКоманды, ВидКнопкиФормы.КнопкаКоманднойПанели, Элементы.ТоварыКоманднаяПанель);
	
	//
	Элементы.Товары.УстановитьДействие("ПриНачалеРедактирования","Подключаемый_ТоварыПриНачалеРедактирования");
	Элементы.ТоварыПоПериодам.УстановитьДействие("ПриНачалеРедактирования","Подключаемый_ТоварыПриНачалеРедактирования");
	
#КонецОбласти 
	////
	//КонтрольЛимитовУХ.ДобавитьСтраницуКонтроля(Форма, Элементы.ГруппаСтраницы);
	
КонецПроцедуры

Функция ЭтоПланированиеПотребностей(Режим)
	
	Возврат Режим = ПредопределенноеЗначение("Перечисление.РежимыФормированияПотребностейПланомЗакупок.РегистрируютПотребности")
	ИЛИ Режим = ПредопределенноеЗначение("Перечисление.РежимыФормированияПотребностейПланомЗакупок.ФормируютПотребности");
	
КонецФункции

#Область УХ_Согласование

Процедура ОпределитьСостояниеОбъекта(Форма, ОбновитьОтветственныхВход = Ложь) Экспорт
	ДействияСогласованиеУХСервер.ОпределитьСостояниеЗаявки(Форма, ОбновитьОтветственныхВход);
КонецПроцедуры

#КонецОбласти

Процедура ПодготовитьФормуНаСервере(Форма)
	
	#Область УХ_Согласование
	Элементы = Форма.Элементы;
	#КонецОбласти
	
	// Контроль документа
	КонтрольУХ.ПодготовитьФормунаСервере(Форма, Элементы.ГруппаСтраницы);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область ФормаСписка

Процедура ФормаСписка_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) экспорт
	
	//
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
//	МодифицироватьЗапросСписка(Форма);
	
	Элементы = Форма.Элементы;
	
	//
	ФормыУХ.СоздатьПолеФормы(Элементы, "Организация",, "Список.Ссылка.Организация",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФО",, "Список.Ссылка.ЦФО",, Элементы.Список);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Проект",, "Список.Ссылка.Проект",, Элементы.Список);
	
	Элементы.ГруппаУстановитьСтатус.Видимость = Ложь;
	Элементы.ОтборСтатус.Видимость = Ложь;
	
КонецПроцедуры

Процедура МодифицироватьЗапросСписка(Форма)
	
	// Модификация запроса
	ТекстЗапроса = Форма.Список.ТекстЗапроса;
	
	//
	ТекстДляЗамены = "Планы.Статус КАК Статус,";
	ТекстЗамены = "ЕСТЬNULL(ВЫРАЗИТЬ(СостоянияОбъектов.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК Статус,";
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ТекстДляЗамены, ТекстЗамены);
	
	ТекстЗапроса = ТекстЗапроса + "
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.ПланЗакупок) КАК СостоянияОбъектов
	|		ПО (СостоянияОбъектов.Объект = Планы.Ссылка)";
	
	//
	Форма.Список.ТекстЗапроса = ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СобытияМодуляОбъекта

// ОбработкаПроверкиЗаполнения
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, Объект, МассивНепроверяемыхРеквизитов) Экспорт
	
	ЭтоНеЦПЗ = НЕ ЭтоПланированиеПотребностей(Объект.РежимФормированияПотребностейПланомЗакупок);
	
	МассивНепроверяемыхРеквизитов.Добавить("СценарийБюджетирования");
	МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетов");
	МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетовОплат");
	МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетовОплатКредит");
	
	Если ЭтоНеЦПЗ ИЛИ Не Объект.ОтражаетсяВБюджетировании Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджета");
	КонецЕсли;
	
	Если ЭтоНеЦПЗ ИЛИ Не Объект.ОтражаетсяВБюджетированииОплаты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетаОплат");
	КонецЕсли;
	
	Если ЭтоНеЦПЗ ИЛИ Не Объект.ОтражаетсяВБюджетированииОплатыКредит Тогда
		МассивНепроверяемыхРеквизитов.Добавить("СтатьяБюджетаОплатКредит");
	КонецЕсли;
	
	Если ЭтоНеЦПЗ Тогда
		МассивНепроверяемыхРеквизитов.Добавить("Приоритет");
		МассивНепроверяемыхРеквизитов.Добавить("МестоПоставки");
		МассивНепроверяемыхРеквизитов.Добавить("Организация");
		МассивНепроверяемыхРеквизитов.Добавить("ЦФО");
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
	Иначе
		МассивНепроверяемыхРеквизитов.Добавить("Склад");
		МассивНепроверяемыхРеквизитов.Добавить("Подразделение");
		
		//
		МассивНепроверяемыхРеквизитов.Добавить("Товары.Номенклатура");
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область МодульМенеджера

// Процедура инициализации данных документа для УХ
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено, Запрос, ТекстыЗапроса) Экспорт
	
	//ЗаполнитьПараметрыИнициализации
	СтруктураРеквизитов = Новый Структура("Периодичность, Приоритет, Организация, МестоПоставки, Проект, Менеджер, Контрагент, ДоговорСПокупателем, ЦФО, Проект, СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, СтатьяБюджетаОплат, СтатьяБюджетаОплатКредит, ДоговорКонтрагента, РежимФормированияПотребностейПланомЗакупок");
	СтруктураРеквизитов.ДоговорСПокупателем = "ДоговорКонтрагента";
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, СтруктураРеквизитов);
	Для Каждого КлючЗначение Из Реквизиты Цикл
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	//
	Запрос.УстановитьПараметр("ЭтоПланированиеПотребностей", ЭтоПланированиеПотребностей(Запрос.Параметры.РежимФормированияПотребностейПланомЗакупок));
	
	Запрос.УстановитьПараметр("Статус",ДокументСсылка.Статус);
	//Ключи
	АналитикаСтруктуры = РегистрыСведений.АналитикаПланированияСтруктуры.ЗначениеКлючаАналитики(Реквизиты);
	АналитикаСтатейБюджетов = РегистрыСведений.АналитикаПланированияСтатейБюджетов.ЗначениеКлючаАналитики(Реквизиты);
	АналитикаПотребностей = РегистрыСведений.АналитикаПланированияПотребностей.ЗначениеКлючаАналитики(Реквизиты);
	
	//
	Запрос.УстановитьПараметр("АналитикаСтруктуры", 		АналитикаСтруктуры);
	Запрос.УстановитьПараметр("АналитикаСтатейБюджетов", 	АналитикаСтатейБюджетов);
	Запрос.УстановитьПараметр("АналитикаПотребностей",		АналитикаПотребностей);
	
	Запрос.УстановитьПараметр("ОтражаетсяВБюджетировании", Ложь);
	Запрос.УстановитьПараметр("ОтражаетсяВБюджетированииОплаты", Ложь);
	Запрос.УстановитьПараметр("ОтражаетсяВБюджетированииОплатыКредит", Ложь);

	// Скорректировать запрос для рн.ПланыЗакупок
	СкорректироватьЗапросРНПланыЗакупок(ТекстыЗапроса);
	
	// Планы закупок по категориям
	ТекстЗапросаТаблицаПланыЗакупокПоКатегориям(Запрос, ТекстыЗапроса, Регистры);
	
	//
	ТекстЗапросаТаблицаПотребностиВНоменклатуре(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаОперативныйПлан(Запрос, ТекстыЗапроса, Регистры);
	
КонецПроцедуры

Процедура ОтразитьДвижения(ДополнительныеСвойства, Движения, Отказ) Экспорт
	
	ОтразитьПланЗакупокПоКатегориям(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьПотребностиВНоменклатуре(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьОперативныйПланПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ);
	
КонецПроцедуры

Процедура ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные = Ложь) Экспорт
	
	// Лимиты
	ТаблицаЛимитов = КонтрольЛимитовУХ.ПолучитьТаблицуЛимитов(Запрос, Запрос.Параметры.дата);
	
	Таблицы.Вставить("ТаблицаЛимитыПоБюджетам", ТаблицаЛимитов);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура СкорректироватьЗапросРНПланыЗакупок(ТекстыЗапроса)
	
	НайденныйЗапрос = неопределено;
	Для каждого КлючЗначение Из ТекстыЗапроса Цикл
		Если КлючЗначение.Представление = "ПланыЗакупок" Тогда
			НайденныйЗапрос = КлючЗначение;
			Прервать;
		КонецЕсли;
	КонецЦикла; 
	
	Если НайденныйЗапрос = неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка модификации запроса для регистра накопления ПланыЗакупок.'");
	КонецЕсли;
	
	//
	НайденныйЗапрос.Значение = НайденныйЗапрос.Значение + "
	|	И ТаблицаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)";
	
	//
	СтрокаДляЗамены = "ТаблицаТовары.Ссылка КАК ПланЗакупок,";
	СтрокаЗамены = СтрокаДляЗамены + "
		|	&АналитикаСтруктуры КАК АналитикаСтруктуры,
		|	&АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
		|	&АналитикаПотребностей КАК АналитикаПотребностей,";
	НайденныйЗапрос.Значение = СтрЗаменить(НайденныйЗапрос.Значение, СтрокаДляЗамены, СтрокаЗамены);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПланыЗакупокПоКатегориям(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПланыЗакупокПоКатегориям";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТоварныеКатегории.Ссылка КАК ПланЗакупок,
	|	&Статус КАК Статус,
	|	ВЫБОР
	|		КОГДА ТаблицаТоварныеКатегории.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ТаблицаТоварныеКатегории.ДатаПоступления
	|	КОНЕЦ КАК Период,
	|	ВЫРАЗИТЬ(ТаблицаТоварныеКатегории.ТоварнаяПозиция КАК Справочник.ТоварныеКатегории) КАК ТоварнаяКатегория,
	|	ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка) КАК Назначение,
	|	&Подразделение КАК Подразделение,
	|	ТаблицаТоварныеКатегории.Склад КАК Склад,
	|	&АналитикаСтруктуры КАК АналитикаСтруктуры,
	|	&АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
	|	&АналитикаПотребностей КАК АналитикаПотребностей,
	|	&Сценарий КАК Сценарий,
	|	ВЫБОР
	|		КОГДА &Замещающий
	|			ТОГДА &ВидПлана
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыПланов.ПустаяСсылка)
	|	КОНЕЦ КАК ВидПлана,
	|	ТаблицаТоварныеКатегории.Партнер КАК Партнер,
	|	ТаблицаТоварныеКатегории.Соглашение КАК Соглашение,
	|	ТаблицаТоварныеКатегории.Количество КАК Количество,
	|	ТаблицаТоварныеКатегории.Сумма КАК Сумма
	|ИЗ
	|	Документ.ПланЗакупок.Товары КАК ТаблицаТоварныеКатегории
	|ГДЕ
	|	ТаблицаТоварныеКатегории.Ссылка = &Ссылка
	|	И НЕ ТаблицаТоварныеКатегории.Отменено
	|	И НЕ ТаблицаТоварныеКатегории.Замещен
	|	И ТаблицаТоварныеКатегории.ТоварнаяПозиция ССЫЛКА Справочник.ТоварныеКатегории
	|	И &ЭтоПланированиеПотребностей = ИСТИНА";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура КурсПересчетаДляПотребностейВНоменклатуре(Запрос, ТекстыЗапроса)
	
	ИмяВременнойТаблицы = "ВТ_КурсПересчетаДляПотребностейВНоменклатуре";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КурсыВалютыОбъекта.Курс, 1) * ЕСТЬNULL(КурсВалютыЗК.Кратность, 1) / ЕСТЬNULL(КурсыВалютыОбъекта.Кратность, 1) / ЕСТЬNULL(КурсВалютыЗК.Курс, 1) КАК Курс
	|ПОМЕСТИТЬ ВТ_КурсПересчетаДляПотребностейВНоменклатуре
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&Дата,
	|			Валюта В
	|				(ВЫБРАТЬ
	|					ВалютаУчетаЦентрализованныхЗакупок.Значение КАК Значение
	|				ИЗ
	|					Константа.ВалютаУчетаЦентрализованныхЗакупок КАК ВалютаУчетаЦентрализованныхЗакупок)) КАК КурсВалютыЗК,
	|	РегистрСведений.КурсыВалют.СрезПоследних(&Дата, Валюта = &Валюта) КАК КурсыВалютыОбъекта";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПотребностиВНоменклатуре(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПотребностиВНоменклатуре";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_КурсПересчетаДляПотребностейВНоменклатуре", ТекстыЗапроса) Тогда
		КурсПересчетаДляПотребностейВНоменклатуре(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК ПланЗакупок,
	|	&Приоритет КАК Приоритет,
	|	ТаблицаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.Номенклатура.СтавкаНДС КАК СтавкаНДС,
	|	&Дата КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ТаблицаТовары.ДатаПоступления
	|	КОНЕЦ КАК ДатаНачалаПериодаПланирования,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
	|	&Организация КАК Организация,
	|	&МестоПоставки КАК МестоПоставки,
	|	&Проект КАК Проект,
	|	&Менеджер КАК Менеджер,
	|	&ДоговорСПокупателем КАК ДоговорСПокупателем,
	|	ВЫБОР
	|		КОГДА СпрНоменклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
	|		ИНАЧЕ ТаблицаТовары.Назначение
	|	КОНЕЦ КАК Назначение,
	|	ТаблицаТовары.Количество КАК КоличествоПотребность,
	|	ТаблицаТовары.Сумма КАК СуммаПотребность,
	|	0 КАК КоличествоВОбеспечении,
	|	0 КАК СуммаВОбеспечении,
	|	0 КАК КоличествоВнеПлана,
	|	0 КАК СуммаВнеПлана,
	|	1 КАК Коэффициент,
	|	СпрНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Ссылка.Валюта как Валюта	
	|ИЗ
	|	Документ.ПланЗакупок.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СпрНоменклатура
	|		ПО ТаблицаТовары.Номенклатура = СпрНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И ТаблицаТовары.ДатаПоступления >= Периоды.ДатаНачала
	|			И ТаблицаТовары.ДатаПоступления <= Периоды.ДатаОкончания
	|			И Периоды.Произвольный = Ложь
	|			И Периоды.ПометкаУдаления = Ложь,
	|	ВТ_КурсПересчетаДляПотребностейВНоменклатуре КАК КурсПересчета
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ ТаблицаТовары.Замещен
	|	И ТаблицаТовары.Количество <> 0
	|	И &РежимФормированияПотребностейПланомЗакупок = ЗНАЧЕНИЕ(Перечисление.РежимыФормированияПотребностейПланомЗакупок.РегистрируютПотребности)
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаТовары.Ссылка КАК ПланЗакупок,
	|	&Приоритет КАК Приоритет,
	|	ТаблицаТовары.ТоварнаяПозиция КАК Номенклатура,
	|	ТаблицаТовары.Характеристика КАК Характеристика,
	|	ТаблицаТовары.ТоварнаяПозиция.СтавкаНДС КАК СтавкаНДС,
	|	&Дата КАК Период,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.ДатаПоступления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &НачалоПериода
	|		ИНАЧЕ ТаблицаТовары.ДатаПоступления
	|	КОНЕЦ КАК ДатаНачалаПериодаПланирования,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодПотребности,
	|	&Организация КАК Организация,
	|	&МестоПоставки КАК МестоПоставки,
	|	&Проект КАК Проект,
	|	&Менеджер КАК Менеджер,
	|	&ДоговорСПокупателем КАК ДоговорСПокупателем,
	|	ТаблицаТовары.Назначение КАК Назначение,
	|	ТаблицаТовары.Количество КАК КоличествоПотребность,
	|	ТаблицаТовары.Сумма КАК СуммаПотребность,
	|	0 КАК КоличествоВОбеспечении,
	|	0 КАК СуммаВОбеспечении,
	|	0 КАК КоличествоВнеПлана,
	|	0 КАК СуммаВнеПлана,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.КоличествоУпаковок = 0
	|			ТОГДА 0
	|		ИНАЧЕ ТаблицаТовары.Количество / ТаблицаТовары.КоличествоУпаковок
	|	КОНЕЦ КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТаблицаТовары.Упаковка = ЗНАЧЕНИЕ(Справочник.УпаковкиЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА СпрТоварныеКатегории.ЕдиницаИзмерения
	|		ИНАЧЕ ТаблицаТовары.Упаковка
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ТаблицаТовары.Ссылка.Валюта как Валюта	
	|ИЗ
	|	Документ.ПланЗакупок.Товары КАК ТаблицаТовары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТоварныеКатегории КАК СпрТоварныеКатегории
	|		ПО ТаблицаТовары.ТоварнаяПозиция = СпрТоварныеКатегории.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И ТаблицаТовары.ДатаПоступления >= Периоды.ДатаНачала
	|			И ТаблицаТовары.ДатаПоступления <= Периоды.ДатаОкончания
	|			И Периоды.Произвольный = Ложь
	|			И Периоды.ПометкаУдаления = Ложь,
	|	ВТ_КурсПересчетаДляПотребностейВНоменклатуре КАК КурсПересчета
	|ГДЕ
	|	ТаблицаТовары.Ссылка = &Ссылка
	|	И ТаблицаТовары.ТоварнаяПозиция ССЫЛКА Справочник.ТоварныеКатегории
	|	И НЕ ТаблицаТовары.Отменено
	|	И НЕ ТаблицаТовары.Замещен
	|	И НЕ (ТаблицаТовары.Количество = 0 И ТаблицаТовары.Сумма = 0)
	|	И &РежимФормированияПотребностейПланомЗакупок = ЗНАЧЕНИЕ(Перечисление.РежимыФормированияПотребностейПланомЗакупок.РегистрируютПотребности)
	|	И &Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаДвиженияОперации(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтТаблицаДвиженияОперации";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов) КАК ВидБюджета,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)) КАК ПериодОтчета,
	|	Товары.ДатаПоступления КАК ПериодПланирования,
	|	&ЦФО КАК ЦФО,
	|	&Проект КАК Проект,
	|	&Организация КАК Организация,
	|	&СтатьяБюджета КАК СтатьяБюджета,
	|	&Аналитика1 КАК Аналитика1,
	|	&Аналитика2 КАК Аналитика2,
	|	&Аналитика3 КАК Аналитика3,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход) КАК ПриходРасход,
	|	&Валюта КАК Валюта,
	|	&Контрагент КАК Контрагент,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	&Ссылка КАК ДокументПланирования,
	|	&Ссылка КАК ДокументРезервирования,
	|	СУММА(Товары.Количество) КАК Количество,
	|	СУММА(Товары.Сумма) КАК Зарезервировано,
	|	0 КАК Заявлено,
	|	СУММА(Товары.Сумма) КАК Сумма,
	|	СУММА(Товары.Сумма * (ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) КАК ЧИСЛО(15, 3))) / (ВЫРАЗИТЬ(ЕСТЬNULL(КурсыВалютыУпр.Курс, 1) КАК ЧИСЛО(15, 3)))) КАК СуммаУпр,
	|	&Аналитика4 КАК Аналитика4,
	|	&Аналитика5 КАК Аналитика5,
	|	&Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ВТ_ТаблицаДвиженияОперации
	|ИЗ
	|	Документ.ПланЗакупок.Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыДокумента
	|		ПО (КурсыВалютыДокумента.Валюта = &Валюта)
	|			И Товары.ДатаПоступления = КурсыВалютыДокумента.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И Товары.ДатаПоступления = КурсыВалютыУпр.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И Товары.ДатаПоступления >= Периоды.ДатаНачала
	|			И Товары.ДатаПоступления <= Периоды.ДатаОкончания
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &ЭтоПланированиеПотребностей
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ Товары.Отменено
	|	И НЕ Товары.Замещен
	|	И &ЭтоПланированиеПотребностей
	|
	|СГРУППИРОВАТЬ ПО
	|	Товары.ДатаПоступления,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	(СУММА(Товары.Количество) <> 0
	|		ИЛИ СУММА(Товары.Сумма) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств),
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
	|	ПланОплат.ДатаПлатежа,
	|	&ЦФО,
	|	&Проект,
	|	&Организация,
	|	&СтатьяБюджетаОплат,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход),
	|	&Валюта,
	|	&Контрагент,
	|	&ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(0),
	|	СУММА(ПланОплат.СуммаПлатежа),
	|	0,
	|	СУММА(ПланОплат.СуммаПлатежа),
	|	СУММА(ПланОплат.СуммаПлатежа * ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) / ЕСТЬNULL(КурсыВалютыУпр.Курс, 1)),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.ПланЗакупок.ПланОплаты КАК ПланОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыДокумента
	|		ПО (КурсыВалютыДокумента.Валюта = &Валюта)
	|			И ПланОплат.ДатаПлатежа = КурсыВалютыДокумента.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И ПланОплат.ДатаПлатежа = КурсыВалютыУпр.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И ПланОплат.ДатаПлатежа >= Периоды.ДатаНачала
	|			И ПланОплат.ДатаПлатежа <= Периоды.ДатаОкончания
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ПланОплат.Ссылка = &Ссылка
	|	И &ОтражаетсяВБюджетированииОплаты
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ ПланОплат.Замещен
	|	И &ЭтоПланированиеПотребностей
	|	И (НЕ &ОтражаетсяВБюджетированииОплатыКредит
	|			ИЛИ НЕ ПланОплат.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОплат.ДатаПлатежа,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПланОплат.СуммаПлатежа) <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств),
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)),
	|	ПланОплатКредит.ДатаПлатежа,
	|	&ЦФО,
	|	&Проект,
	|	&Организация,
	|	&СтатьяБюджетаОплатКредит,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход),
	|	&Валюта,
	|	&Контрагент,
	|	&ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(0),
	|	СУММА(ПланОплатКредит.СуммаПлатежа),
	|	0,
	|	СУММА(ПланОплатКредит.СуммаПлатежа),
	|	СУММА(ПланОплатКредит.СуммаПлатежа * ЕСТЬNULL(КурсыВалютыДокумента.Курс, 1) / ЕСТЬNULL(КурсыВалютыУпр.Курс, 1)),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.ПланЗакупок.ПланОплаты КАК ПланОплатКредит
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыДокумента
	|		ПО (КурсыВалютыДокумента.Валюта = &Валюта)
	|			И ПланОплатКредит.ДатаПлатежа = КурсыВалютыДокумента.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтПрогнозныеКурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И ПланОплатКредит.ДатаПлатежа = КурсыВалютыУпр.ПериодПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (&Периодичность = Периоды.Периодичность)
	|			И ПланОплатКредит.ДатаПлатежа >= Периоды.ДатаНачала
	|			И ПланОплатКредит.ДатаПлатежа <= Периоды.ДатаОкончания
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|ГДЕ
	|	ПланОплатКредит.Ссылка = &Ссылка
	|	И &ОтражаетсяВБюджетированииОплатыКредит
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|	И НЕ ПланОплатКредит.Замещен
	|	И &ЭтоПланированиеПотребностей
	|	И ПланОплатКредит.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланОплатКредит.ДатаПлатежа,
	|	ЕСТЬNULL(Периоды.Ссылка, ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка))
	|
	|ИМЕЮЩИЕ
	|	СУММА(ПланОплатКредит.СуммаПлатежа) <> 0";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтТаблицаПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВТ_ТаблицаПлановССуммамиЛимитирования";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета КАК Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодПланирования КАК ПериодПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ПериодПланирования КАК ДатаОперации,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4 КАК Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5 КАК Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6 КАК Аналитика6,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ДокументРезервирования КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	ВТ_ТаблицаДвиженияОперации.Зарезервировано КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено,
	|	0 КАК Исполнено
	|ПОМЕСТИТЬ ВТ_ТаблицаПлановССуммамиЛимитирования
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаОперативныйПлан(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОперативныйПланПоБюджетам";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПериодыПланирования", ТекстыЗапроса) Тогда
		ТекстЗапросаВтПериодыПланирования(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалюты", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалюты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПериодыКурсовВалюты", ТекстыЗапроса) Тогда
		ТекстЗапросаВтПериодыКурсовВалюты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрогнозныеКурсыВалюты", ТекстыЗапроса) Тогда
		ТекстЗапросаВтПрогнозныеКурсыВалюты(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_ТаблицаДвиженияОперации", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаДвиженияОперации(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_ТаблицаПлановССуммамиЛимитирования", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.ВидБюджета КАК Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.ПериодПланирования КАК ПериодПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	// документ не пишет опер.план по контрагентам и договорам
	//|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	//|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.Зарезервировано КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено,
	|	ВТ_ТаблицаДвиженияОперации.Сумма КАК Сумма,
	|	ВТ_ТаблицаДвиженияОперации.СуммаУпр КАК СуммаУпр
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|ГДЕ
	|	&Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Утвержден)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтПериодыПланирования(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПериодыПланирования";
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Товары.ДатаПоступления КАК ПериодПланирования
	|ПОМЕСТИТЬ ВтПериодыПланирования
	|ИЗ
	|	Документ.ПланЗакупок.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка = &Ссылка
	|	И &ЭтоПланированиеПотребностей
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтКурсыВалюты(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКурсыВалюты";
	
	УстановитьПараметрыЗапросаКурсыСценария(Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Курсы.Период,
	|	Курсы.Валюта,
	|	Курсы.Курс
	|ПОМЕСТИТЬ ВтКурсыВалюты
	|ИЗ
	|	&КурсыСценария КАК Курсы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Курсы.Валюта,
	|	Курсы.Период";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыЗапросаКурсыСценария(Запрос)
	
	Если Запрос.Параметры.Свойство("КурсыСценария") Тогда
		Возврат;
	КонецЕсли;
	
	КурсыСценария = ТаблицаКурсовСценария(
		Запрос.Параметры.СценарийБюджетирования, , Запрос.Параметры.НачалоПериода, Запрос.Параметры.ОкончаниеПериода);
	
	Запрос.УстановитьПараметр("КурсыСценария", КурсыСценария);
	
КонецПроцедуры

// Возвращает таблицу прогнозных курсов сценариев за выбранный период,
// дополненную начальными курсами.
//
// Параметры:
//  Сценарий 		 - Массив - СправочникСсылка.Сценарии, сценарии для которых 
//								требуется получить курсы.
//  Валюты 			 - Массив - Валюты, по которым требуется получить таблицу курсов,
//								если не указано - то по всем
//  ДатаНачала 		 - Дата - Дата начала курсов.
//  ДатаОкончания 	 - Дата - Дата окончания курсов.
//
// Возвращаемое значание:
// 	ТаблицаЗначений - таблица курсов.
//		* Сценарий - СправочникСсылка.Сценарии - Сценарий.
//      * Валюта - СправочникСсылка.Валаюта - Валюта.
//		* Период - Дата - Период курса валют.
//		* Курс - Число - курс валюты.
//		* Кратность - Число - Кратность валюты.
//
Функция ТаблицаКурсовСценария(Сценарий = Неопределено, Валюты = Неопределено, ДатаНачала, ДатаОкончания) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период КАК Период,
	|	КурсыВалютСрезПоследних.Валюта КАК Валюта,
	|	ВЫБОР
	|		КОГДА КурсыВалютСрезПоследних.Кратность = 0
	|			ТОГДА 0
	|		ИНАЧЕ КурсыВалютСрезПоследних.Курс / КурсыВалютСрезПоследних.Кратность
	|	КОНЕЦ КАК Курс,
	|	НЕОПРЕДЕЛЕНО КАК Сценарий
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&НачалоПериода, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("Валюты", Валюты);
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
	Запрос.УстановитьПараметр("КонецПериода", ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТекстЗапросаВтПериодыКурсовВалюты(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПериодыКурсовВалюты";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтПериодыПланирования.ПериодПланирования КАК ПериодПланирования,
	|	КурсыВалют.Валюта КАК Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ ВтПериодыКурсовВалюты
	|ИЗ
	|	ВтПериодыПланирования КАК ВтПериодыПланирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКурсыВалюты КАК КурсыВалют
	|		ПО ВтПериодыПланирования.ПериодПланирования >= КурсыВалют.Период
	|			И (КурсыВалют.Валюта В (&Валюта, &ВалютаУправленческогоУчета, &ВалютаРегламентированногоУчета))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВтПериодыПланирования.ПериодПланирования,
	|	КурсыВалют.Валюта
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Валюта";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтПрогнозныеКурсыВалюты(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрогнозныеКурсыВалюты";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВтПериодыКурсовВалюты.ПериодПланирования КАК ПериодПланирования,
	|	ВтПериодыКурсовВалюты.Валюта КАК Валюта,
	|	КурсыВалют.Курс КАК Курс
	|ПОМЕСТИТЬ ВтПрогнозныеКурсыВалюты
	|ИЗ
	|	ВтПериодыКурсовВалюты КАК ВтПериодыКурсовВалюты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВтКурсыВалюты КАК КурсыВалют
	|		ПО ВтПериодыКурсовВалюты.Период = КурсыВалют.Период
	|			И ВтПериодыКурсовВалюты.Валюта = КурсыВалют.Валюта
	|	
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта,
	|	ПериодПланирования";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Заполняет движения документа "План закупок"
//
Процедура ОтразитьПотребностиВНоменклатуре(ДополнительныеСвойства, Движения, Отказ)

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПотребностиВНоменклатуре;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПотребностиВНоменклатуре.Записывать = Истина;
	Движения.ПотребностиВНоменклатуре.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "План закупок"
//
Процедура ОтразитьПланЗакупокПоКатегориям(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПланыЗакупокПоКатегориям;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ПланыЗакупокПоКатегориям.Записывать = Истина;
	Движения.ПланыЗакупокПоКатегориям.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "Оперативный план по бюджетам"
//
Процедура ОтразитьОперативныйПланПоБюджетам(ДополнительныеСвойства, Движения, Отказ)

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОперативныйПланПоБюджетам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ОперативныйПланПоБюджетам.Записывать = Истина;
	Движения.ОперативныйПланПоБюджетам.Загрузить(Таблица);
	
КонецПроцедуры

// Заполняет движения документа "Оперативный план по бюджетам"
//
Процедура ОтразитьЛимитыПоБюджетам(ДополнительныеСвойства, Движения, Отказ)

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаЛимитыПоБюджетам;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		
		Возврат;
		
	КонецЕсли;

	Движения.ЛимитыПоБюджетам.Записывать = Истина;
	Движения.ЛимитыПоБюджетам.Загрузить(Таблица);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 