

#Область ПрограммныйИнтерфейс

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	Описание.Имя    = "НалоговыйМониторинг";
	Описание.Версия = Метаданные.Версия;
	Описание.ИдентификаторИнтернетПоддержки = ИнтернетПоддержкаПользователейУХ.ИмяПрограммыДляИдентификацииВСервисахИнтернетПоддержки();
	
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики=Неопределено) Экспорт
	
	ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.7.1",
		"ОбновлениеИнформационнойБазыНМ.ЗаполнитьВидыЗапрашиваемойОтчетностиНалоговогоМониторинга",
		Истина,
		"Монопольно",
		Ложь);
		
	ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.7.1",
		"ОбновлениеИнформационнойБазыНМ.ЗаполнитьОснованияДляЗапросаНалоговогоМониторинга",
		Истина,
		"Монопольно",
		Ложь);
		
	ДобавитьОбработчикОбновления(
		Обработчики,
		"3.1.0.156",
		"Справочники.РасширенияПанелиНалоговогоМониторинга.ЗаполнитьПоставляемыеДанные",
		Истина,
		"Монопольно",
		Ложь);
		
КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы(Обработчики=Неопределено) Экспорт
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	Если ПредыдущееИмяКонфигурации = "БухгалтерияПредприятияКОРП" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
	КонецЕсли;
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления

Процедура ЗаполнитьВидыЗапрашиваемойОтчетностиНалоговогоМониторинга() Экспорт
	Макет = Справочники.ВидыЗапрашиваемойОтчетностиНалоговогоМониторинга.ПолучитьМакет("МакетЗаполнения");
	Инд = 2;
	Пока Истина Цикл
		Код = Макет.Область(Инд, 1, Инд, 1).Текст;
		Если ПустаяСтрока(Код) Тогда
			Прервать;
		КонецЕсли;
		Наименование = Макет.Область(Инд, 2, Инд, 2).Текст;
		Ссылка = Справочники.ВидыЗапрашиваемойОтчетностиНалоговогоМониторинга.НайтиПоКоду(Код);
		Если Ссылка.Пустая() Тогда
			НовОбъект = Справочники.ВидыЗапрашиваемойОтчетностиНалоговогоМониторинга.СоздатьЭлемент();
		Иначе
			НовОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		НовОбъект.Код = Код;
		НовОбъект.Наименование = Наименование;
		Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовОбъект);
		Исключение
		КонецПопытки;
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьОснованияДляЗапросаНалоговогоМониторинга() Экспорт
	Макет = Справочники.ОснованияДляЗапросаНалоговогоМониторинга.ПолучитьМакет("МакетЗаполнения");
	Инд = 2;
	Пока Истина Цикл
		Код = Макет.Область(Инд, 1, Инд, 1).Текст;
		Если ПустаяСтрока(Код) Тогда
			Прервать;
		КонецЕсли;
		Наименование = Макет.Область(Инд, 2, Инд, 2).Текст;
		Ссылка = Справочники.ОснованияДляЗапросаНалоговогоМониторинга.НайтиПоКоду(Код);
		Если Ссылка.Пустая() Тогда
			НовОбъект = Справочники.ОснованияДляЗапросаНалоговогоМониторинга.СоздатьЭлемент();
		Иначе
			НовОбъект = Ссылка.ПолучитьОбъект();
		КонецЕсли;
		НовОбъект.Код = Код;
		НовОбъект.Наименование = Наименование;
		Попытка
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовОбъект);
		Исключение
		КонецПопытки;
		Инд = Инд + 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункцииДляИспользованияВОбработчикахОбновления

// Добавляет новый обработчик заполнения и устанавливает его параметры.
//
// Параметры:
//	Обработчики - таблица обработчиков для добавления нового обработчика.
//		Переменная берется из одноименного аргумента функции
//		ПриДобавленииОбработчиковОбновления(Обработчики).
//	Версия - Строка - номер версии конфигурации, при обновлении на которую
//		должна быть вызвана процедура обновления, указанная в параметре
//		ИмяПроцедуры. В качестве версии можно указывать:
//			- Номер версии конфигурации в формате Р.П.В.С
//			  (Р – старший номер редакции; П – младший номер редакции;
//			   В – номер версии; С – номер сборки);
//			- если в качестве версии указан символ «*», то обработчик
//			  обновления должен выполняться каждый раз при обновлении
//			  информационной базы, независимо от номера версии конфигурации;
//			- если свойство Версия не задано, то должно быть установлено
//			  в Истина свойство НачальноеЗаполнение.
//	ИмяПроцедуры - Строка - полное имя экспортной процедуры, которая
//		будет вызвана для выполнения обновления.
//	НачальноеЗаполнение - Булево – если Истина, то процедура обновления
//		будет вызвана при первом запуске на пустой информационной базе
//		(версия «0.0.0.0»), созданной из файла поставки конфигурации
//		и не содержащей данных. Это обработчики первоначального
//		заполнения базы.
//	РежимВыполнения - Строка ("Монопольно", "Оперативно", "Отложенно").
//	ТолькоБМ - Булево - если Истина, то обработчик будет зарегистрирован
//		только для конфигурации БП МСФО. В противном случае, обработчик
//		будет зарегистрирован вне зависимости от типа конфигурации.
//	ДополнительныеПараметры - Структура|Неопределено - если передать
//		структуру, то поля обработчика будут заполнены в соотвествии
//		со значениями одноименных полей этой структуры.
//
// Возвращает:
//	Таблицу обработчиков с добавленным обработчиком.
//
Функция ДобавитьОбработчикОбновления(
				Обработчики,
				Версия,
				ИмяПроцедуры,
				НачальноеЗаполнение = Ложь,
				РежимВыполнения = "Монопольно",
				ТолькоБМ = Истина,
				ДополнительныеПараметры = Неопределено) Экспорт
										
	флЗарегистрироватьОбработчик = НЕ (ТолькоБМ И ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом());
	флПереходСБП = (Обработчики.Колонки.Найти("ПредыдущееИмяКонфигурации") <> Неопределено);
	Если флПереходСБП Тогда
		флЗарегистрироватьОбработчик = флЗарегистрироватьОбработчик И НачальноеЗаполнение;
	КонецЕсли;
	Если флЗарегистрироватьОбработчик Тогда
		Обработчик = Обработчики.Добавить();
		
		Если флПереходСБП Тогда
			Обработчик.Процедура					= ИмяПроцедуры;
			Обработчик.ПредыдущееИмяКонфигурации	= "БухгалтерияПредприятияКОРП";
		Иначе
			Если ДополнительныеПараметры <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(Обработчик, ДополнительныеПараметры);
			КонецЕсли;
			
			Обработчик.Версия				= Версия;
			Обработчик.Процедура			= ИмяПроцедуры;
			Обработчик.НачальноеЗаполнение	= НачальноеЗаполнение;
			Обработчик.РежимВыполнения		= РежимВыполнения;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Обработчики;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в обработчиках обновления.

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено И Объект.ЭтоНовый() Тогда
		РегистрироватьНаУзлахПлановОбмена = Истина;
	Иначе
		РегистрироватьНаУзлахПлановОбмена = Ложь;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ПровестиДокумент(Данные, ТекстНачалаОшибки = "", ЗаписатьЕслиНеУдалосьПровести = Истина, ОтказЕслиНеПроведен = Ложь, ОтказЕслиНеЗаписан = Ложь) Экспорт

	Попытка				
		Данные.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстНачалаОшибки + "Не удалось провести документ <%1>: " + ОписаниеОшибки(), Данные), ОтказЕслиНеПроведен);
	КонецПопытки;
	
	Если Не ОтказЕслиНеПроведен Тогда
		Возврат;
	ИначеЕсли Не ЗаписатьЕслиНеУдалосьПровести Тогда
		
	КонецЕсли;	
		
	Попытка
		Данные.Проведен = Ложь;
		Данные.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстНачалаОшибки + "Не удалось записать документ <%1>: " + ОписаниеОшибки(), Данные), ОтказЕслиНеЗаписан);
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти