#Область ПрограммныйИнтерфейс

#Область ОбработкаТабличныхЧастей

Процедура ОбновитьПроверяемыеРеквизитыТаблицыПоРежимуЗаполнения(ПроверяемыеРеквизиты, ДокументОбъект, ИмяТабличнойЧасти = "ВНА") Экспорт

	ДанныеРежима = МСФОУХ.ПолучитьДанныеРежимаЗаполнения(ДокументОбъект.РежимЗаполнения);
	
	Если ДанныеРежима.ЕстьНСБУ И ДанныеРежима.ЕстьМСФО Тогда
		Возврат; //Актуальны проверки НСБУ и МСФО
	КонецЕсли;
	
	ЧислоПроверок = ПроверяемыеРеквизиты.ВГраница();
	ПрефиксПоиска = ИмяТабличнойЧасти + ".";
	ДлинаПрефикса = СтрДлина(ПрефиксПоиска);
	
	// удалим проверки по неиспользуемым видам учета
	Для ОбратныйИндекс = 0 По ЧислоПроверок Цикл
		
		РеквизитПроверки = ПроверяемыеРеквизиты.Получить(ЧислоПроверок - ОбратныйИндекс);
		Если (Лев(РеквизитПроверки, ДлинаПрефикса) = ПрефиксПоиска) Тогда
			Если НЕ ДанныеРежима.ЕстьНСБУ И (Прав(РеквизитПроверки, 4) = "НСБУ") Тогда
				ПроверяемыеРеквизиты.Удалить(ЧислоПроверок - ОбратныйИндекс);
			ИначеЕсли НЕ ДанныеРежима.ЕстьМСФО И (Прав(РеквизитПроверки, 4) = "МСФО") Тогда
				ПроверяемыеРеквизиты.Удалить(ЧислоПроверок - ОбратныйИндекс);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(ДокументОбъект, Отказ, ПроверяемыеРеквизиты, РеквизитыАмортизации = Неопределено) Экспорт

	Если РеквизитыАмортизации = Неопределено Тогда
		РеквизитыАмортизации = ПолучитьРеквизитыАмортизацииПоУмолчанию();
	КонецЕсли; 
	
	Непроверяемые = Новый Массив;
	Для каждого ТекущийРеквизит Из РеквизитыАмортизации Цикл
		Если (ТекущийРеквизит.Ключ <> "ВНА") 
			И (ТекущийРеквизит.Ключ <> "ПараметрыУчетаВНА") 
			И (ТекущийРеквизит.Ключ <> "ВидОперации") Тогда
			
			Непроверяемые.Добавить("ВНА." + ТекущийРеквизит.Значение);
			
		КонецЕсли;		
	КонецЦикла;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, Непроверяемые);
	
	// Проверим заполнение полей СПИ в таб части.
	// -Определим режим заполнения.
	ЕстьРежимМСФО = Ложь;
	ТекРежим = ДокументОбъект.РежимЗаполнения;
	Если ТекРежим = Перечисления.РежимЗаполненияВидовУчета.НСБУ Тогда
		ЕстьРежимМСФО = Ложь;
	ИначеЕсли ТекРежим = Перечисления.РежимЗаполненияВидовУчета.МСФО Тогда
		ЕстьРежимМСФО = Истина;
	ИначеЕсли ТекРежим = Перечисления.РежимЗаполненияВидовУчета.НСБУИМСФО Тогда
		ЕстьРежимМСФО = Истина;
	ИначеЕсли ТекРежим = Перечисления.РежимЗаполненияВидовУчета.ПустаяСсылка() Тогда
		ЕстьРежимМСФО = Ложь;
	Иначе
		ЕстьРежимМСФО = Ложь;
		ТекстСообщения = НСтр("ru = 'Неизвестный режим заполнения видов учёта: %Режим%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Режим%", Строка(ТекРежим));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	
	// -Проверим таб части на заполнение СПИ.
	Если Не ЕстьРежимМСФО Тогда
		Возврат; // Не проверяем СПИ в части МСФО.
	КонецЕсли;
	
	СпособНачисленияПропорционально = Перечисления.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции;
	
	ЕстьВидОперации = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВводСобытийВНАМСФО"));
	ВидыОперацийВвод = Новый Массив;
	ВидыОперацийВвод.Добавить(Справочники.ВидыОпераций.ВводВЭксплуатацию);
	ВидыОперацийВвод.Добавить(Справочники.ВидыОпераций.ПринятиеКУчетуВНА);
	ВидыОперацийВвод.Добавить(Справочники.ВидыОпераций.ИзменениеПараметровАмортизации);
		
	Для Каждого ТекВНА Из ДокументОбъект.ВНА Цикл
		
		Если ЕстьВидОперации И (ВидыОперацийВвод.Найти(ТекВНА[РеквизитыАмортизации.ВидОперации]) = Неопределено) Тогда
			Продолжить;
		ИначеЕсли Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекВНА[РеквизитыАмортизации.ПараметрыУчетаВНА], "НачислятьАмортизацию") Тогда 
			Продолжить;
		ИначеЕсли ТекВНА[РеквизитыАмортизации.СпособНачисленияАмортизации].Пустая() Тогда
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для ВНА <%ВНА%> не указан <Способ начисления амортизации (МСФО)>. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВНА%", Строка(ТекВНА[РеквизитыАмортизации.ВНА]));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекВНА[РеквизитыАмортизации.ПрофильРаспределения]) Тогда
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для ВНА <%ВНА%> не указан профиль распределения амортизации по МСФО. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВНА%", Строка(ТекВНА[РеквизитыАмортизации.ВНА]));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			
		КонецЕсли;
		
		НачислениеПропорционально = (ТекВНА[РеквизитыАмортизации.СпособНачисленияАмортизации] = СпособНачисленияПропорционально);
		Если (НЕ НачислениеПропорционально) И (НЕ ЗначениеЗаполнено(ТекВНА[РеквизитыАмортизации.СПИ])) Тогда
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Для ВНА <%ВНА%> не указан срок полезного использования по МСФО. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВНА%", Строка(ТекВНА[РеквизитыАмортизации.ВНА]));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			
		ИначеЕсли НачислениеПропорционально Тогда 
			
			Если Не ЗначениеЗаполнено(ТекВНА[РеквизитыАмортизации.ОбъемВыработки]) Тогда
				
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Для ВНА <%ВНА%> не указан объем выработки по МСФО. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВНА%", Строка(ТекВНА[РеквизитыАмортизации.ВНА]));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				
			КонецЕсли;
			
			Если ТекВНА[РеквизитыАмортизации.ПараметрВыработки].Пустая() Тогда
				
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Для ВНА <%ВНА%> не указан параметр выработки по МСФО. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВНА%", Строка(ТекВНА[РеквизитыАмортизации.ВНА]));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьРеквизитыАмортизацииПоУмолчанию()

	РеквизитыАмортизации = Новый Структура;
	
	РеквизитыАмортизации.Вставить("ПараметрыУчетаВНА",				"ПараметрыУчетаВНА");
	РеквизитыАмортизации.Вставить("ВНА",							"ВНА");
	РеквизитыАмортизации.Вставить("ВидОперации",					"ВидОперации");
	
	РеквизитыАмортизации.Вставить("СпособНачисленияАмортизации",	"СпособНачисленияАмортизацииМСФО");
	РеквизитыАмортизации.Вставить("СПИ", 							"СрокПолезногоИспользованияМСФО");
	РеквизитыАмортизации.Вставить("КоэффициентУскорения", 			"КоэффициентУскоренияМСФО");
	РеквизитыАмортизации.Вставить("ОбъемВыработки", 				"ОбъемВыработкиМСФО");
	РеквизитыАмортизации.Вставить("ПараметрВыработки", 				"ПараметрВыработкиМСФО");
	РеквизитыАмортизации.Вставить("ПрофильРаспределения", 			"СпособОтраженияРасходовПоАмортизацииМСФО");

	Возврат РеквизитыАмортизации;

КонецФункции

#КонецОбласти

#Область РасчетАмортизации

Функция АлгоритмРСБУ() Экспорт
	Возврат Константы.АлгоритмНачиcленияАмортизацииАналогичноРСБУ.Получить();
КонецФункции

// Функция - Получить реквизиты ВНА
//
// Параметры:
//  Граница		 - <Дата,Граница,МоментВремени>	 - граница(дата), на которую получаются реквизиты ВНА
//  ВНА			 - <СправочникСсылка,Массив,СписокЗначений,НЕОПРЕДЕЛЕНО>	 - ВНА, по которым получаются реквизиты. Если НЕОПРЕДЕЛЕНО то получаются все ВНА
//  Организация	 - <СправочникСсылка.Организации,НЕОПРЕДЕЛЕНО>	 - Организация, по которой получаются ВНА. Если НЕОПРЕДЕЛЕНО то получаются по всем организациям
//  ВидыУчета	 - <Перечисление.ВидыУчета,Массив,СписокЗначений,>	 - НЕОПРЕДЕЛЕНО
//  Сценарий	 - <СправочникСсылка.Сценарий,НЕОПРЕДЕЛЕНО>	 - если НЕОПРЕДЕЛЕНО, тогда Константы.СценарийМСФО
//  ПоляВыбора	 - <Структура(Ключ: имя колонки результата, Значение: имя колонки СКД),Массив> 
// 
// Возвращаемое значение:
//   -  Новый Структура("НСБУ,МСФО", Новый Соответствие(ВНА,Структура), Новый Соответствие(ВНА,Структура))
//
Функция ПолучитьРеквизитыВНА(Граница, ВНА = Неопределено, Организация = Неопределено, ВидыУчета = Неопределено, Сценарий = Неопределено, ПоляВыбора = Неопределено, АлгоритмРСБУ = Неопределено) Экспорт

	Если ВидыУчета = Неопределено Тогда		
		ВидыУчета = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПредопределенноеЗначение("Перечисление.ВидыУчета.МСФО"));
		ВидыУчета.Добавить(ПредопределенноеЗначение("Перечисление.ВидыУчета.НСБУ"));
	КонецЕсли;
	
	ДатаДокумент = ПолучитьДатуДокументИзПериода(Граница);
	
	ЕстьИмена = Ложь;
	Если ТипЗнч(ПоляВыбора) = Тип("Структура") Тогда
		ПоляВыбораСтрокой = ПолучитьЗначенияСтруктурыСтрокой(ПоляВыбора);
		ЕстьИмена = Истина;
	ИначеЕсли ТипЗнч(ПоляВыбора) = Тип("Строка") Тогда
		ПоляВыбораСтрокой = ПоляВыбора;
	ИначеЕсли ТипЗнч(ПоляВыбора) = Тип("Массив") Тогда
		ПоляВыбораСтрокой = СтрСоединить(ПоляВыбора, ",");
	Иначе
		ПоляВыбораСтрокой = "ВНА,ГруппаВНА,ВидУчета";
	КонецЕсли;
	
	Запрос = Новый Запрос(УчетМСФОПовтИспУХ.ПолучитьКэшированныйТекстЗапросаВНА(ПоляВыбораСтрокой));
	
	Отчеты.ПараметрыВНА.ЗаполнитьПараметрыЗапроса(Запрос, ДатаДокумент.Дата, ДатаДокумент.Ссылка, АлгоритмРСБУ);
	
	Запрос.УстановитьПараметр("ВНА",				ВНА);
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("ВидыУчета", 			ВидыУчета);
	Запрос.УстановитьПараметр("Сценарий", 			?(Сценарий = Неопределено, Константы.СценарийМСФО.Получить(), Сценарий));	
	
	Запрос.УстановитьПараметр("ВсеВНА", 		НЕ ЗначениеЗаполнено(ВНА) И ТипЗнч(ВНА) <> Тип("Массив"));	
	Запрос.УстановитьПараметр("ВсеОрганизации",	НЕ ЗначениеЗаполнено(Организация));
			
	Результат = Новый Структура("НСБУ,МСФО", Новый Соответствие, Новый Соответствие);
	
	РезультатЗапроса = Запрос.Выполнить();		
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;

	СтруктураПоляВыбора = ?(ЕстьИмена,ПоляВыбора, Новый Структура(ПоляВыбораСтрокой));
	
	Выборка = РезультатЗапроса.Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		СтруктураВНА = Новый Структура;
		Для каждого ПолеВНА Из СтруктураПоляВыбора Цикл
			Если ЕстьИмена Тогда
				СтруктураВНА.Вставить(ПолеВНА.Ключ, Выборка[ПолеВНА.Значение]);				
			Иначе	
				СтруктураВНА.Вставить(ПолеВНА.Ключ, Выборка[ПолеВНА.Ключ]);
			КонецЕсли;
			
		КонецЦикла;
		
		Если Выборка.ВидУчета = ПредопределенноеЗначение("Перечисление.ВидыУчета.МСФО") Тогда
			Результат.МСФО.Вставить(Выборка.ВНА, СтруктураВНА);
		Иначе	
			Результат.НСБУ.Вставить(Выборка.ВНА, СтруктураВНА);
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции

Функция ПолучитьПараметрыОбъектаВНА(ОбъектВНА, ДатаАктуальности = Неопределено) Экспорт

	ПоляВНА = Новый Структура;
	ПоляВНА.Вставить("ВНА",					"ВНА");	
	ПоляВНА.Вставить("ВидУчета",			"ВидУчета");
	ПоляВНА.Вставить("ПараметрыУчетаМСФО", 	"ГруппаВНА");
	
	ПоляВНА.Вставить("ПринятоКУчетуМСФО",		"ДатаВвода");
	ПоляВНА.Вставить("СнятоСУчетаМСФО", 		"ДатаВыбытия");
	ПоляВНА.Вставить("СпособПоступленияМСФО", 	"СпособПоступления");
	
	ПоляВНА.Вставить("СчетУчетаМСФО", 								"СчетУчетаПервоначальнойСтоимости");	
	ПоляВНА.Вставить("ПервоначальнаяСтоимостьМСФО", 				"ПервоначальнаяСтоимость");	
	ПоляВНА.Вставить("СчетНачисленияАмортизацииМСФО", 				"СчетНакопленнойАмортизации");
	ПоляВНА.Вставить("НакопленнаяАмортизацияМСФО", 					"Амортизация");
	ПоляВНА.Вставить("ЛиквидационнаяСтоимостьМСФО", 				"ЛиквидационнаяСтоимость");
	ПоляВНА.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО",	"ПрофильРаспределения");
	ПоляВНА.Вставить("СПИМСФО", 									"СПИ");
	ПоляВНА.Вставить("ДокументВвода", 								"ДокументВвода");
	ПоляВНА.Вставить("ДокументВыбытия", 							"ДокументВыбытия");
	
	ДатаАктуальности = ?(ДатаАктуальности = Неопределено, ТекущаяДата(), ДатаАктуальности);	
	РеквизитыВНА = ПолучитьРеквизитыВНА(ДатаАктуальности, ОбъектВНА, Неопределено, Неопределено, Неопределено, ПоляВНА);
	
	РеквизитыМСФО = РеквизитыВНА.МСФО.Получить(ОбъектВНА);
	
	Если РеквизитыМСФО = Неопределено Тогда
		РеквизитыМСФО = Новый Структура("ВНА", ОбъектВНА);
	КонецЕсли;
	
	Возврат РеквизитыМСФО;	

КонецФункции

#Область ЗапросВНА

Функция ПолучитьДатуДокументИзПериода(Граница) Экспорт
	
	Ссылка = Неопределено;	
	Если ТипЗнч(Граница) = Тип("Граница") Тогда
		
		Если ТипЗнч(Граница.Значение) = Тип("Дата") Тогда
		    ДатаРасчета = Граница.Значение;
		Иначе	
			ДатаРасчета = Граница.Значение.Дата;
			Ссылка = Граница.Значение.Ссылка;
		КонецЕсли;
				
	ИначеЕсли ТипЗнч(Граница) = Тип("МоментВремени") Тогда 
		
		ДатаРасчета = Граница.Дата;
		Ссылка = Граница.Ссылка;
		
	Иначе 
		ДатаРасчета = Граница;
	КонецЕсли;
	
	Возврат Новый Структура("Дата,Ссылка", ДатаРасчета, Ссылка);

КонецФункции

Функция ПолучитьЗначенияСтруктурыСтрокой(ПоляВыбора)
	
	ПоляВыборкиСтрокой = "";
	Если ПоляВыбора <> "" Тогда		
		Для каждого ПолеВыбора Из ПоляВыбора Цикл
			ТекстПоля = ?(ЗначениеЗаполнено(ПолеВыбора.Значение), ПолеВыбора.Значение, ПолеВыбора.Ключ);
			ПоляВыборкиСтрокой = ?(ПоляВыборкиСтрокой = "", ТекстПоля, ПоляВыборкиСтрокой + ", " + ТекстПоля);
		КонецЦикла;	
	КонецЕсли;
	Возврат ПоляВыборкиСтрокой;

КонецФункции

#КонецОбласти 

#КонецОбласти

#Область СрокиИспользованияВНА

Функция РасчетАмортизацииРетро(ПараметрыРасчета, АлгоритмРСБУ = Ложь) Экспорт

	КонецРасчетногоПериода = ПараметрыРасчета.КонецРасчетногоПериода;
	
	Если (ПараметрыРасчета.ДатаПринятияКУчету < КонецРасчетногоПериода) И (ПараметрыРасчета.СрокПолезногоИспользования > 0) Тогда
		
		Если АлгоритмРСБУ Тогда
			
			СрокИспользования = РазностьДатВМесяцах(КонецРасчетногоПериода, ПараметрыРасчета.ДатаПринятияКУчету);
			
			СуммаНакопленнойАмортизации = ПараметрыРасчета.ПервоначальнаяСтоимость * СрокИспользования / ПараметрыРасчета.СрокПолезногоИспользования;
			
		Иначе
			
			ДатаОкончанияНачисленияПоСПИ = ДобавитьМесяц(ПараметрыРасчета.ДатаПринятияКУчету, ПараметрыРасчета.СрокПолезногоИспользования);
			Если КонецРасчетногоПериода >= ДатаОкончанияНачисленияПоСПИ Тогда // вся амортизация начислена
				Возврат ПараметрыРасчета.ПервоначальнаяСтоимость;
			КонецЕсли; 
			
			ЧислоДнейНачисления = (КонецРасчетногоПериода - ПараметрыРасчета.ДатаПринятияКУчету) / (24 * 60 * 60);
			ЧислоДнейСПИ	= (ДатаОкончанияНачисленияПоСПИ - ПараметрыРасчета.ДатаПринятияКУчету) / (24 * 60 * 60);
			
			СуммаНакопленнойАмортизации = ПараметрыРасчета.ПервоначальнаяСтоимость * ЧислоДнейНачисления / ЧислоДнейСПИ;
		
		КонецЕсли;
		
		
	Иначе 
		
		СуммаНакопленнойАмортизации = 0;
		
	КонецЕсли;		

	Возврат СуммаНакопленнойАмортизации;

КонецФункции // РасчетАмортизацииРетро()

Функция РазностьДатВМесяцах(ДатаУменьшаемая, ДатаВычитаемая) Экспорт

	Возврат (Год(ДатаУменьшаемая) - Год(ДатаВычитаемая)) * 12 + Месяц(ДатаУменьшаемая) - Месяц(ДатаВычитаемая);

КонецФункции

#КонецОбласти

#Область РасчетАмортизации_СверкаВГО

// Функция вызывается при расчете элиминационных корректировок. Возвращает таблицу с данными амортизации внутригрупповых ВНА.
// Параметры:
//	ПериодСценария - СправочникСсылка.Периоды. Период за который необходимо посчитать амортизацию.
//	Сценарий - СправочникСсылка.Сценарии. Сценарий за который необходимо посчитать амортизацию.
//	ВидУчета - ПеречислениеСсылка.ВидыУчета. Всегда равен МСФО.
//	ТаблицаВНА - ТаблицаЗначений. Заполнены колонки: Организация, ВНА, ПервоначальнаяСтоимостьДляРасчета.
//		Остальные колонке необходимо расчитать и заполнить. Колонки:
//			Организация - СправочникСсылка.Организации. Входящие данные. Организация владелец ВНА.
//			ВалютаФункц - СправочникСсылка.Валюты. Входящие данные. Функциональная
//			Курс - Число. Входящие данные. Изменять не следует.
//			ВНА - СправочникСсылка.ОсновныеСредства,СправочникСсылка.НематериальныеАктивы. Входящие данные. Ссылка на внеоборотный актив.
//			НаценкаПродавца - Число. Входящие данные. Изменять не следует.
//			НаценкаПродавцаГр - Число. Входящие данные. Изменять не следует.
//			Проводка - Входящие данные. Изменять не следует.
//			СчетУчетаВНА - СправочникСсылка.СчетаБД. По данным МСФО.
//			СчетУчетаАмортизации - СправочникСсылка.СчетаБД. По данным МСФО.
//			СчетУчетаЗатратПоАмортизации - СправочникСсылка.СчетаБД. По данным МСФО.
//			ПервоначальнаяСтоимость - Число. Сумма балансовой стоимости ВНА на конец периода, либо если была продажа на момент продажи. По данным МСФО.
//			НакопленнаяАмортизация - Число. Сумма амортизации МСФО за все периоды с учетом всех модернизаций, изменения сроков амортизации и т.п.

//
Процедура ПолучитьДанныеАмортизацииВНА_ВГО(ТаблицаВНА, ПериодСценария, Сценарий) Экспорт
	
КонецПроцедуры

// Функция вызывается при расчете элиминационных корректировок. Возвращает таблицу с данными амортизации внутригрупповых ВНА.
// Параметры:
//	ПериодСценария - СправочникСсылка.Периоды. Период за который необходимо посчитать амортизацию.
//	Сценарий - СправочникСсылка.Сценарии. Сценарий за который необходимо посчитать амортизацию.
//	ВидУчета - ПеречислениеСсылка.ВидыУчета. Всегда равен МСФО.
//	ТаблицаВНА - ТаблицаЗначений. Заполнены колонки: Организация, ВНА, ПервоначальнаяСтоимостьДляРасчета.
//		Остальные колонке необходимо расчитать и заполнить. Колонки:
//			Организация - СправочникСсылка.Организации. Входящие данные. Организация владелец ВНА.
//			ВалютаФункц - СправочникСсылка.Валюты. Входящие данные. Функциональная
//			Курс - Число. Входящие данные. Изменять не следует.
//			ВНА - СправочникСсылка.ОсновныеСредства,СправочникСсылка.НематериальныеАктивы. Входящие данные. Ссылка на внеоборотный актив.
//			ПервоначальнаяСтоимостьДляРасчета - Число. Входящие данные. Для расчета амортизации за период (см. колонку "АмортизацияЗаПериодПоПереданнойСтоиомости" ниже).
//			ПервоначальнаяСтоимостьДляРасчетаГр - Число. Входящие данные. Не изменять и не использовать.
//			Проводка - Входящие данные. Изменять не следует.
//			СчетУчетаАмортизации - СправочникСсылка.СчетаБД. По данным МСФО.
//			СчетУчетаЗатратПоАмортизации - СправочникСсылка.СчетаБД. По данным МСФО.
//			АмортизацияЗаПериодПоПереданнойСтоиомости - Число. Сумма амортизации МСФО за период по переданной первоначальной стоимости,
//				которая записана в колонку "ПервоначальнаяСтоимостьДляРасчета". Все остальные параметры расчета амортизации беруться по
//				данным организации.
//			АмортизацияЗаПериод - Число. Сумма амортизации МСФО за период с учетом всех модернизаций и т.п.
//
Процедура РассчитатьАмортизациюПоПервоначальнойСтоимостиВНА_ВГО(ТаблицаВНА, ПериодСценария, Сценарий, ВидУчета) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДанныхУчета

//устарела
Функция ИспользоватьДанныеУчетнойСистемы(Организация) Экспорт 

	Возврат Истина;
	
КонецФункции

Функция ПолучитьВозможныеСпособыНачисленияАмортизации() Экспорт

	Возврат Новый Структура("Линейный,УменьшаемогоОстатка,ПропорциональноОбъемуПродукции", 
								Перечисления.СпособыНачисленияАмортизацииВНА.Линейный, 
								Перечисления.СпособыНачисленияАмортизацииВНА.УменьшаемогоОстатка, 
								Перечисления.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции);
	
КонецФункции

Процедура УдалитьКолонкиМСФО(ТаблицаОбработки) Экспорт

	КолонкиТаблицы = ТаблицаОбработки.Колонки;
	КоличествоКолонок = КолонкиТаблицы.Количество()-1;
	
	Для ИндексКолонки = 0 По КоличествоКолонок Цикл
		
		ТекущаяКолонка = КолонкиТаблицы.Получить(КоличествоКолонок - ИндексКолонки);
		Если (ТекущаяКолонка.Имя <> "ГруппаВНАМСФО") И (Прав(ТекущаяКолонка.Имя, 4) = "МСФО") Тогда
			КолонкиТаблицы.Удалить(ТекущаяКолонка);
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

Функция ПолучитьПрофильРаспределения(СчетЗатрат, Субконто1, Субконто2, Субконто3) Экспорт

	Возврат Справочники.СпособыОтраженияРасходовПоАмортизацииМСФО
				.ПолучитьСоздатьПрофильПоАналитике(СчетЗатрат, Субконто1, Субконто2, Субконто3);																	
	
КонецФункции

Функция ПолучитьДокументыСобытияСОшибкой(ДокументОснование) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументыВНАПоОснованию.Ссылка КАК ДокументСобытие,
	|	ДокументыВНАПоОснованию.Ссылка.Дата КАК Дата,
	|	ТИПЗНАЧЕНИЯ(ДокументыВНАПоОснованию.Ссылка) КАК ТипЗначения
	|ИЗ
	|	КритерийОтбора.ДокументыВНАПоОснованию(&ДокументОснование) КАК ДокументыВНАПоОснованию
	|ГДЕ
	|	НЕ ДокументыВНАПоОснованию.Ссылка.ПометкаУдаления
	|	И НЕ ДокументыВНАПоОснованию.Ссылка.Проведен");

	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ОбновитьПараметрыМСФО(Форма, ДатаСведений = Неопределено) Экспорт
	
	Если Форма.Объект.Ссылка.Пустая() Тогда
		ИсточникГруппы = Форма.Объект.Родитель;
		ПараметрыМСФО = Новый Структура;
	Иначе	
		ИсточникГруппы = Форма.Объект.Ссылка;
		ПараметрыМСФО = МСФОВНАВызовСервераУХ.ПолучитьПараметрыОбъектаВНА(ИсточникГруппы, ?(ДатаСведений = Неопределено, Форма.ДатаСведений, ДатаСведений));
		Форма.ВариантУчетаВНА = ПараметрыМСФО.Свойство("ПринятоКУчетуМСФО") И ЗначениеЗаполнено(ПараметрыМСФО.ПринятоКУчетуМСФО);
	КонецЕсли;
	
	Если Форма.ВариантУчетаВНА = 0 Тогда		
		ПараметрыМСФО.Вставить("ПараметрыУчетаМСФО", Справочники.ГруппыВНАМСФО.ПолучитьГруппуВНАпоУмолчанию(ИсточникГруппы));
		Форма.ВариантУчетаВНА = ЗначениеЗаполнено(ПараметрыМСФО.ПараметрыУчетаМСФО);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, ПараметрыМСФО);
		
КонецПроцедуры

#КонецОбласти

#Область ПериодыДокументов

Функция ПолучитьГраницуДокумента(ДокументОбъект) Экспорт

	Если ДокументОбъект.Ссылка.Пустая() Тогда
		Возврат Новый Граница(ДокументОбъект.Дата, ВидГраницы.Исключая);
	Иначе	
		Возврат Новый Граница(Новый МоментВремени(ДокументОбъект.Дата, ДокументОбъект.Ссылка), ВидГраницы.Исключая);	
	КонецЕсли;

КонецФункции

Функция ПолучитьГраницыПериодаДокумента(КонтекстДокумента, СмещениеПериода = 0, ИспользоватьПериодОтчета = Неопределено, Периодичность = Неопределено) Экспорт

	ГраницыПериода = Новый Структура("ДатаНачала,ДатаОкончания,ПериодОтчета");
		
	Если (ИспользоватьПериодОтчета = Истина) ИЛИ (ИспользоватьПериодОтчета = Неопределено) Тогда
		
		//ПериодичностьОтчетности = ПолучитьПериодичностьОтчетности(КонтекстДокумента.ПериодОтчета.Периодичность);
		Если СмещениеПериода = 0 Тогда
			ПериодИсточник = КонтекстДокумента.ПериодОтчета;
		Иначе	
			ПериодИсточник = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(КонтекстДокумента.ПериодОтчета.ДатаОкончания, КонтекстДокумента.ПериодОтчета.Периодичность, СмещениеПериода);
		КонецЕсли;
					
	Иначе
		
		//считаем отчетным периодом - год
		//ПолучитьПериодичностьОтчетности(Неопределено);
		
		ПериодИсточник = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(КонтекстДокумента.Дата, ПолучитьПериодичностьОтчетности(Периодичность), СмещениеПериода);
			
	КонецЕсли;

	Если ПериодИсточник <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ГраницыПериода, ПериодИсточник);
	КонецЕсли;
	
	ГраницыПериода.ПериодОтчета = ПериодИсточник;
	
	Возврат ГраницыПериода;
		
КонецФункции

Функция ПолучитьПериодичностьОтчетности(ПериодичностьИсточник = Неопределено) Экспорт

	Если ПериодичностьИсточник = Перечисления.Периодичность.Месяц Тогда 
		
		Возврат ПериодичностьИсточник;
		
	Иначе
		
		ПериодичностьОтчетности = Константы.ПериодичностьОтчетностиМСФО.Получить();
		Возврат ?(ПериодичностьОтчетности.Пустая(), Перечисления.Периодичность.Год, ПериодичностьОтчетности);
		
	КонецЕсли;

КонецФункции

Функция ПолучитьПериодПоДатеПараллельногоУчета(ДатаДокумента, ПериодичностьОтчетности = Неопределено) Экспорт

	Если Не ЗначениеЗаполнено(ДатаДокумента) Тогда
		Возврат ПредопределенноеЗначение("Справочник.Периоды.ПустаяСсылка"); 
	КонецЕсли;

	Если (ПериодичностьОтчетности = Неопределено) ИЛИ (ПериодичностьОтчетности = Перечисления.Периодичность.Год) Тогда
		
		Возврат ОбщегоНазначенияУХ.ПолучитьПериодПоДате(ДатаДокумента, Перечисления.Периодичность.Год);
		
	КонецЕсли;
		
	НомерМесяцаУчета = Месяц(ДатаДокумента);
	
	Если ПериодичностьОтчетности = Перечисления.Периодичность.Квартал Тогда
	
		ПериодичностьПериода = Перечисления.Периодичность.Квартал;
		Если НомерМесяцаУчета > 9 Тогда
			ПериодичностьПериода = Перечисления.Периодичность.Год	
		ИначеЕсли НомерМесяцаУчета > 6 Тогда
			ПериодичностьПериода = Перечисления.Периодичность.ДевятьМесяцев;
		ИначеЕсли НомерМесяцаУчета > 3 Тогда
			ПериодичностьПериода = Перечисления.Периодичность.Полугодие;
		КонецЕсли;
		
		Возврат ОбщегоНазначенияУХ.ПолучитьПериодПоДате(ДатаДокумента, ПериодичностьПериода);
		
	ИначеЕсли ПериодичностьОтчетности = Перечисления.Периодичность.Месяц Тогда
		
		ПериодичностьПериода = Перечисления.Периодичность.Месяц;
		Если НомерМесяцаУчета = 12 Тогда
		    ПериодичностьПериода = Перечисления.Периодичность.Год;	
		ИначеЕсли НомерМесяцаУчета = 9 Тогда
			ПериодичностьПериода = Перечисления.Периодичность.ДевятьМесяцев;
		ИначеЕсли НомерМесяцаУчета = 6 Тогда
			ПериодичностьПериода = Перечисления.Периодичность.Полугодие;
		ИначеЕсли НомерМесяцаУчета = 3 Тогда
			ПериодичностьПериода = Перечисления.Периодичность.Квартал;
		КонецЕсли;	
		
		Возврат ОбщегоНазначенияУХ.ПолучитьПериодПоДате(ДатаДокумента, Перечисления.Периодичность.Месяц);
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДатуДвижений(ДатаДокумента, ГраницыПериода = Неопределено) Экспорт 

	Если ГраницыПериода = Неопределено Тогда
		Возврат ДатаДокумента;
	Иначе	
		Возврат ?(ГраницыПериода.ДатаНачала >= ДатаДокумента И ДатаДокумента <= ГраницыПериода.ДатаОкончания, ДатаДокумента, ГраницыПериода.ДатаОкончания);
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СчетаТрансляции

Функция ПолучитьСчетМСФОТрансформации(СчетИсточник, Организация = Неопределено, Сценарий, ПериодОтчета, ПланСчетов = Неопределено) Экспорт
	
	ДатаУП = ?(ЗначениеЗаполнено(ПериодОтчета), ПериодОтчета.ДатаОкончания, ТекущаяДата());
	ШаблонТрансляции = МСФОВызовСервераУХ.ЗначениеУП("ШаблонТрансляции", Организация, ДатаУП, Сценарий);
	Если ШаблонТрансляции.Пустая() Тогда 
		Возврат Справочники.СчетаБД.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПолучитьСчетПриемникТрансляции(СчетИсточник, ШаблонТрансляции);

КонецФункции

Функция ПолучитьСчетПриемникТрансляции(СчетИсточник, ШаблонТрансляции) Экспорт 

	Запрос = Новый Запрос(СтрЗаменить(ПолучитьТекстЗапросаСчетаТрансляции(), "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1"));		
	Запрос.УстановитьПараметр("ШаблонТрансляции",	ШаблонТрансляции);
	Запрос.УстановитьПараметр("СчетИсточник", 		СчетИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Справочники.СчетаБД.ПустаяСсылка();
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].СчетПриемник;	
	КонецЕсли;

КонецФункции

Функция ПолучитьТекстЗапросаСчетаТрансляции(НомераТаблиц = Неопределено) Экспорт

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("СчетаТрансляции", НомераТаблиц.Количество());
	КонецЕсли;
	
	Возврат
	"ВЫБРАТЬ
	|	СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
	|	СоответствияСчетовДляТрансляции.СчетИсточник КАК СчетИсточник
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|			И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
	|			И (СоответствияСчетовДляТрансляции.СчетИсточник В (&СчетИсточник))
	|			И (НЕ СоответствияСчетовДляТрансляции.ПометкаУдаления)
	|			И СоответствияСчетовДляТрансляции.Владелец = НастройкиПравилТрансляции.ШаблонТрансляции
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетИсточник,
	|	СоответствияСчетовДляТрансляции.СчетПриемник.Забалансовый";

КонецФункции

#КонецОбласти

#Область СчетаБД

Функция ПолучитьСчетБДПоСчетуМСФО(СчетМСФО, Знач ПланСчетов = Неопределено) Экспорт 

	Если ПланСчетов = Неопределено Тогда
		ПланСчетов = Справочники.ПланыСчетовБД.НайтиПоНаименованию("МСФО", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	КонецЕсли;
	
	Возврат Справочники.СчетаБД.НайтиПоРеквизиту("СчетСсылка", СчетМСФО, , ПланСчетов);

КонецФункции // ()

#КонецОбласти

#КонецОбласти
