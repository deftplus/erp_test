
#Область СлужебныйПрограммныйИнтерфейс

// Процедура регистрирует описание КТ и создает необходимые реквизиты формы (КроссТаблица, Экспресс-расшифровка, Периоды)
//
// Параметры:
//  ИдентификаторКроссТаблицы	- Строка 			- Идентификатор кросс-таблицы
//  Форма  						- УправляемаяФорма	- форма, в которой необходимо создать реквизиты формы
//
Функция ЗарегистрироватьКроссТаблицу(Форма, Знач ОписаниеКТ) Экспорт
	
	//
	СуществующиеРеквизиты = Новый Структура;
	СуществующиеРеквизиты.Вставить("Шапка", 		  ПолучитьСуществующиеРеквизитыФормы(Форма));
	СуществующиеРеквизиты.Вставить("КроссТаблица",	  ПолучитьСуществующиеРеквизитыФормы(Форма, ОписаниеКТ.Реквизиты.КроссТаблица));
	СуществующиеРеквизиты.Вставить("Расшифровка",	  ПолучитьСуществующиеРеквизитыФормы(Форма, ОписаниеКТ.Реквизиты.Расшифровка));
	СуществующиеРеквизиты.Вставить("РасшифровкаИтоги",ПолучитьСуществующиеРеквизитыФормы(Форма, ОписаниеКТ.Реквизиты.РасшифровкаИтоги));
	
	// Создание необходимых реквизитов формы
	ДобавляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты = Новый Массив;
	
	// При необходимости добавляем реквизит для хранения описаний кросс-таблиц
	Если СуществующиеРеквизиты.Шапка[ИмяРеквизитаОписанияКТ()] = неопределено Тогда
		ИнициализироватьФормуДляРаботыСКроссТаблицами(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	// При необходимости создаем таблицу периодов для кросс-таблицы
	Если СуществующиеРеквизиты.Шапка[ОписаниеКТ.Реквизиты.Периоды] = неопределено Тогда
		ДобавитьТаблицуПериодов(ОписаниеКТ.Реквизиты.Периоды, ДобавляемыеРеквизиты);
	КонецЕсли;
	
	ДобавитьРеквизитыКроссТаблицы(ОписаниеКТ, Форма, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, СуществующиеРеквизиты);
	ДобавитьРеквизитыЭкспрессРасшифровки(ОписаниеКТ, Форма, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, СуществующиеРеквизиты);
	
	//
	АналитикиСтатейБюджетовУХ.ДобавитьРеквизитОписаниеФормыВУдаляемыеРеквизиты(Форма, УдаляемыеРеквизиты);
	
	//
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	//
	ОбновитьИнформациюОКроссТаблицахФормы(ОписаниеКТ, Форма);
	
	Возврат ОписаниеКТ;
	
КонецФункции

Процедура ОбновитьПериоды_ПоПодПериодам(ОписаниеКТ, Форма, СтартовыйПериод, КоличествоПериодов) Экспорт
	
	Периоды = Форма.КроссТаблица_Периоды.Выгрузить();
	ЗаполнитьТаблицуПериодовПоКоличествуПодПериодов(Периоды, СтартовыйПериод, КоличествоПериодов);
	Форма.ЗначениеВРеквизитФормы(Периоды, ОписаниеКТ.Реквизиты.Периоды);
	
КонецПроцедуры

Процедура ОбновитьПериоды_ПоПериоду(ОписаниеКТ, Форма, ПериодНачала, ПериодОкончания) Экспорт
	
	Периоды = Форма.КроссТаблица_Периоды.Выгрузить();
	ЗаполнитьТаблицуПериодовПоПериоду(Периоды, ПериодНачала, ПериодОкончания);
	Форма.КроссТаблица_Периоды.Загрузить(Периоды);
	
КонецПроцедуры

#Область РаботаСКроссТаблицей

// Процедура создает реквизит формы "Таблица значений" с колонками, необходимыми для обработки периодов
//
// Параметры:
//  Форма  				- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//  ИмяТаблицыПериодов  - Строка - Имя, с которым будет создан реквизит формы таблица

Процедура ДобавитьТаблицуПериодов(ИмяТаблицыПериодов, ДобавляемыеРеквизиты) Экспорт
	
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(ИмяТаблицыПериодов, Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("НомерКолонки", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0), ИмяТаблицыПериодов));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("ИмяКолонки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)), ИмяТаблицыПериодов));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("Активная", Новый ОписаниеТипов("Булево"), ИмяТаблицыПериодов));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("Период", Новый ОписаниеТипов("СправочникСсылка.Периоды"), ИмяТаблицыПериодов));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("Заголовок", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(50)), ИмяТаблицыПериодов));
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы("ДатаНачала", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата), ИмяТаблицыПериодов));
	
КонецПроцедуры

Процедура ИнициализироватьФормуДляРаботыСКроссТаблицами(ДобавляемыеРеквизиты) Экспорт
	
	// Добавить реквизиты формы
	ДобавляемыеРеквизиты.Добавить(
		Новый РеквизитФормы(ИмяРеквизитаОписанияКТ(), Новый ОписаниеТипов("неопределено")));
	
КонецПроцедуры

// Процедура заполняет таблицу периодов, последовательно меньшими периодами заданной периодичности, для получения полей и их заголовков
//
// Параметры:
//  ТаблицаПериоды - ТаблицаЗначений - Таблица, которую заполняем периодами заданной периодичности
//  Периодичность  - ПеречислениеСсылка.Периодичность - Периодичность с которой нужно заполнить таблицу
//  ОсновнойПериод - СправочникСсылка.Периоды - Период содержащий подпериоды
//
Процедура ЗаполнитьТаблицуПериодов(ТаблицаПериоды, Знач ОсновнойПериод, Знач Периодичность) Экспорт 

	Если ТипЗнч(ТаблицаПериоды) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Периодичность) И ЗначениеЗаполнено(ОсновнойПериод) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ТаблицаПериоды.ИмяКолонки,
			|	ТаблицаПериоды.НомерКолонки,
			|	ТаблицаПериоды.Период,
			|	ТаблицаПериоды.Заголовок
			|ПОМЕСТИТЬ ВТ_ТаблицаПериоды
			|ИЗ
			|	&ТаблицаПериоды КАК ТаблицаПериоды
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Периоды.Ссылка,
			|	Периоды.ДатаНачала
			|ПОМЕСТИТЬ ТаблицаПериодов
			|ИЗ
			|	Справочник.Периоды КАК Периоды
			|ГДЕ
			|	НЕ Периоды.ПометкаУдаления
			|	И Периоды.Родитель В ИЕРАРХИИ(&Родитель)
			|	И Периоды.Периодичность = &Периодичность
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ВЫБОР
			|		КОГДА ВТ_ТаблицаПериоды.ИмяКолонки ЕСТЬ NULL 
			|			ТОГДА ""12345678-1234-1234-1234-123456789012""
			|		ИНАЧЕ ВТ_ТаблицаПериоды.ИмяКолонки
			|	КОНЕЦ КАК ИмяКолонки,
			|	-1 КАК НомерКолонки,
			|	ТаблицаПериодов.Ссылка КАК Период,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ТаблицаПериодов.Ссылка) КАК Заголовок,
			|	ИСТИНА КАК Активная,
			|	ТаблицаПериодов.ДатаНачала КАК ДатаНачала
			|ИЗ
			|	ТаблицаПериодов КАК ТаблицаПериодов
			|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаПериоды КАК ВТ_ТаблицаПериоды
			|		ПО ТаблицаПериодов.Ссылка = ВТ_ТаблицаПериоды.Период
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ВТ_ТаблицаПериоды.ИмяКолонки,
			|	-1,
			|	ВТ_ТаблицаПериоды.Период,
			|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ВТ_ТаблицаПериоды.Период),
			|	ЛОЖЬ,
			|	ВТ_ТаблицаПериоды.Период
			|ИЗ
			|	ВТ_ТаблицаПериоды КАК ВТ_ТаблицаПериоды
			|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаПериодов КАК ТаблицаПериодов
			|		ПО (ТаблицаПериодов.Ссылка = ВТ_ТаблицаПериоды.Период)
			|ГДЕ
			|	ТаблицаПериодов.Ссылка ЕСТЬ NULL 
			|
			|УПОРЯДОЧИТЬ ПО
			|	ДатаНачала";
		
		Запрос.УстановитьПараметр("Периодичность", Периодичность);
		Запрос.УстановитьПараметр("Родитель", ОсновнойПериод);
		Запрос.УстановитьПараметр("ТаблицаПериоды", ТаблицаПериоды);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		НоваяТаблица = НЕ РезультатЗапроса.Пустой();
		
	Иначе
		НоваяТаблица = Ложь;
		
	КонецЕсли;
	
	Если НоваяТаблица = Ложь Тогда
		Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
			СтрокаПериода.Активная = Ложь;
			СтрокаПериода.НомерКолонки = -1;
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	ТаблицаПериоды = РезультатЗапроса.Выгрузить();
	ТаблицаПериоды.Колонки.Удалить("ДатаНачала");
	
	ОбработатьАктивныеПериоды(ТаблицаПериоды);
	
КонецПроцедуры

// Процедура заполняет таблицу периодов, начиная со СтартовыйПериод в количестве КоличествоПериодов
//
// Параметры:
//  ТаблицаПериоды - ТаблицаЗначений - Таблица, которую заполняем периодами заданной периодичности
//  СтартовыйПериод  - СправочникСсылка.Периоды - Стартовый период
//  КоличествоПериодов - Число - Количество подпериодов
//
Процедура ЗаполнитьТаблицуПериодовПоКоличествуПодПериодов(ТаблицаПериоды, Знач СтартовыйПериод, Знач КоличествоПериодов) Экспорт 
	
	Если ТипЗнч(ТаблицаПериоды) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
		СтрокаПериода.Активная = Ложь;
		СтрокаПериода.НомерКолонки = -1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтартовыйПериод) И ЗначениеЗаполнено(КоличествоПериодов) Тогда
		
		ДобавитьВТаблицуПериодов(ТаблицаПериоды, СтартовыйПериод);
		
		ОсновнойПериод = СтартовыйПериод;
		
		Для НужныйПериод = 1 По КоличествоПериодов - 1 Цикл
			
			ПериодКДобавлению = ВстраиваниеОПКПереопределяемый.ПолучитьСледующийПериод(ОсновнойПериод, 1);
			
			Если НЕ ЗначениеЗаполнено(ПериодКДобавлению) Тогда
				
			    // Запись события в журнал регистрации для системного администратора.
				СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				   НСтр("ru = 'В справочнике периодов отсутствует следующий за %1 период'"), 
				   ОсновнойПериод);
				   
				ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(СтрокаСообщенияОбОшибке);
				   
			    ВызватьИсключение СтрокаСообщенияОбОшибке;				
				
			КонецЕсли;
			
			ДобавитьВТаблицуПериодов(ТаблицаПериоды, ПериодКДобавлению);
			
			ОсновнойПериод = ПериодКДобавлению;
			
		КонецЦикла;
		НоваяТаблица = Истина;
		
	Иначе
		НоваяТаблица = Ложь;
	КонецЕсли;
	
	// Если таблица не пополнялась, то дальше не надо
	Если НоваяТаблица = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьАктивныеПериоды(ТаблицаПериоды);
	
КонецПроцедуры

// Процедура заполняет таблицу периодов, начиная с ПериодНачала по ПериодОкончания
//
// Параметры:
//  ТаблицаПериоды - ТаблицаЗначений - Таблица, которую заполняем периодами заданной периодичности
//  ПериодНачала  - СправочникСсылка.Периоды - Период начала
//  ПериодОкончания - СправочникСсылка.Периоды - Период окончания
//
Процедура ЗаполнитьТаблицуПериодовПоПериоду(ТаблицаПериоды, Знач ПериодНачала, Знач ПериодОкончания) Экспорт 
	
	Если ТипЗнч(ТаблицаПериоды) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаПериода Из ТаблицаПериоды Цикл
		СтрокаПериода.Активная = Ложь;
		СтрокаПериода.НомерКолонки = -1;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ПериодНачала) И ЗначениеЗаполнено(ПериодОкончания) Тогда
		
		ДобавитьВТаблицуПериодов(ТаблицаПериоды, ПериодНачала);
		
		ОсновнойПериод = ПериодНачала;
		
		Пока ОсновнойПериод.ДатаНачала < ПериодОкончания.ДатаНачала Цикл
			
			ПериодКДобавлению = ВстраиваниеОПКПереопределяемый.ПолучитьСледующийПериод(ОсновнойПериод, 1);
			
			Если НЕ ЗначениеЗаполнено(ПериодКДобавлению) Тогда
				
			    // Запись события в журнал регистрации для системного администратора.
				СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				   НСтр("ru = 'В справочнике периодов отсутствует следующий за %1 период'"), 
				   ОсновнойПериод);
				   
				ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(СтрокаСообщенияОбОшибке);
				   
			    ВызватьИсключение СтрокаСообщенияОбОшибке;				
				
			КонецЕсли;
			
			ДобавитьВТаблицуПериодов(ТаблицаПериоды, ПериодКДобавлению);
			
			ОсновнойПериод = ПериодКДобавлению;
			
		КонецЦикла;
		НоваяТаблица = Истина;
		
	Иначе
		НоваяТаблица = Ложь;
	КонецЕсли;
	
	// Если таблица не пополнялась, то дальше не надо
	Если НоваяТаблица = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьАктивныеПериоды(ТаблицаПериоды);
	
КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Количество"
// 
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, необходимость группировки с полем картинки комментария
//  ЕстьЗаголовок				 - Булево		 - Флаг определяет, есть ли заголовок у поля
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыКоличество(
									ПараметрыВывода,
									СоздаватьЭлемент = Истина, 
									ЕстьПрефиксГруппыКомментария = Ложь,
									ЕстьЗаголовок = Истина,
									СтруктураДействий = Неопределено,
									ПрефиксИмени="Количество_") Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксИмени);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", "Число");
	Если ЕстьЗаголовок Тогда
		СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Количество'"));
	КонецЕсли;
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Цена"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  ЕстьПрефиксГруппыКомментария - Булево		 - Флаг определяет, необходимость группировки с полем картинки комментария
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыЦена(
							ПараметрыВывода,
							СоздаватьЭлемент = Истина, 
							ЕстьПрефиксГруппыКомментария = Ложь, 
							СтруктураДействий = Неопределено,
							ПрефиксИмени="Цена_") Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксИмени);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	Если ЕстьПрефиксГруппыКомментария Тогда
		СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	КонецЕсли; 
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Цена'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Видимость", Ложь);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Сумма"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыСумма(
						ПараметрыВывода,
						СоздаватьЭлемент = Истина,
						СтруктураДействий = Неопределено,
						ПрефиксИмени="Сумма_") Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", ПрефиксИмени);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

// Добавляет в настройки параметров вывода поле кросс-таблицы "Комментарий"
//
// Параметры:
//  ПараметрыВывода				 - Структура	 - Параметры вывода полей кросс-таблицы
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицыКомментарий(ПараметрыВывода, СоздаватьЭлемент = Истина, СтруктураДействий = Неопределено) Экспорт 

	Если НЕ ПараметрыВывода.Свойство("Поля") Тогда
		ПараметрыВывода.Вставить("Поля", Новый Массив());
	КонецЕсли;
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Комментарий_");
	СтруктураПоля.Вставить("ПрефиксГруппы", "ГруппаКомментарий_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", СоздаватьЭлемент);
	СтруктураПоля.Вставить("ТипЭлемента", Новый ОписаниеТипов("Строка"));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Комментарий'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Ложь);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("КнопкаВыбора", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("МногострочныйРежим", Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Высота", 1);
	
	Если СтруктураДействий <> Неопределено Тогда
		СтруктураПоля.Вставить("СтруктураДействий", СтруктураДействий);
	КонецЕсли; 
	
	ПараметрыВывода.Поля.Добавить(СтруктураПоля);

КонецПроцедуры

Функция ПолучитьСтруктураПоляСумма() Экспорт
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки", "Сумма_");
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы", Ложь);
	СтруктураПоля.Вставить("СоздаватьЭлемент", Истина);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	СтруктураПоля.Вставить("Заголовок", НСтр("ru = 'Сумма'"));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты", Истина);
	СтруктураПоля.Вставить("ШиринаЭлемента", 6);
	СтруктураПоля.Вставить("СвойстваЭлемента", Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные", Истина);
	
	Возврат СтруктураПоля;
	
КонецФункции

// Процедура обновляет состав колонок-периодов кросс-таблицы
//
// Параметры:
//  Форма  				- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//  ОписаниеКТ 			- Структура - Описание кросс-таблицы
//
Процедура ОбновитьСтруктуруВыводаКроссТаблицы(Форма, ОписаниеКТ) Экспорт
	
	ИмяРеквизитаКроссТаблицы = ОписаниеКТ.Реквизиты.КроссТаблица;
	ЭлементФормыКроссТаблицы = ОписаниеКТ.Элементы.КроссТаблица;
	
	ИмяКолонкиТерминатор = ИмяКолонкиТерминатор();
	Если ОписаниеКТ.Свойство("ДобавитьКолонкуТерминатор") Тогда
		ДобавитьКолонкуТерминатор = ОписаниеКТ.ДобавитьКолонкуТерминатор;
	Иначе
		ДобавитьКолонкуТерминатор = Ложь;
	КонецЕсли;
	
	#Область ДобавлениеРеквизитовФормы
		
	ТаблицаДанныхКолонок = Форма.КроссТаблица_Периоды.Выгрузить();
	
	АктивныеПериоды = КроссТаблицыУХКлиентСервер.ПолучитьАктивныеПериоды(ОписаниеКТ, Форма); 
	
	Поля = ОписаниеКТ.Схема.Поля;
	
	// СОЗДАЕМ РЕКВИЗИТЫ
	ДобавляемыеРеквизиты = Новый Массив();
	УдаляемыеРеквизиты = Новый Массив();
	
	//
	СуществующиеРеквизиты = ПолучитьСуществующиеРеквизитыФормы(Форма);
	СуществующиеРеквизитыТаблицы = ПолучитьСуществующиеРеквизитыФормы(Форма, ИмяРеквизитаКроссТаблицы);
	
	ОбновитьКолонкиРесурсыПериоды(ОписаниеКТ, АктивныеПериоды, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, СуществующиеРеквизиты, СуществующиеРеквизитыТаблицы);
	Если ДобавляемыеРеквизиты.Количество() > 0 ИЛИ УдаляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	КонецЕсли;
	
	#КонецОбласти
	
	Если ОписаниеКТ.Свойство("СоздаватьОбщуюГруппу") Тогда
		СоздаватьОбщуюГруппу = ОписаниеКТ.СоздаватьОбщуюГруппу;
	Иначе
		СоздаватьОбщуюГруппу = Ложь;
	КонецЕсли;
	
	Если ОписаниеКТ.Свойство("ВыводитьПредыдущийПериод") Тогда
		ВыводитьПредыдущийПериод = ОписаниеКТ.ВыводитьПредыдущийПериод;
	Иначе
		ВыводитьПредыдущийПериод = Ложь;
	КонецЕсли;
	
	Если ОписаниеКТ.Свойство("СоздаватьГруппуПериода") Тогда
		СоздаватьГруппуПериода = ОписаниеКТ.СоздаватьГруппуПериода;
		Если ОписаниеКТ.Свойство("СвойстваГруппыПериода") И ТипЗнч(ОписаниеКТ.СвойстваГруппыПериода) = Тип("Структура") Тогда
			СвойстваГруппыПериода = ОписаниеКТ.СвойстваГруппыПериода;
		КонецЕсли;
	Иначе
		СоздаватьГруппуПериода = Ложь;
	КонецЕсли;
	
	Если ОписаниеКТ.Свойство("ЗаголовокГруппыПериоды") Тогда
		ЗаголовокГруппыПериоды = ОписаниеКТ.ЗаголовокГруппыПериоды;
	Иначе
		ЗаголовокГруппыПериоды = "";
	КонецЕсли;
	
	Если ОписаниеКТ.Свойство("ГруппировкаКолонокПериода") Тогда
		ГруппировкаКолонокПериода = ОписаниеКТ.ГруппировкаКолонокПериода;
	Иначе
		ГруппировкаКолонокПериода = ГруппировкаКолонок.Горизонтальная;
	КонецЕсли;
	
	// Удаление элементов формы
	УдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекЭлемент Из Форма.Элементы[ЭлементФормыКроссТаблицы].ПодчиненныеЭлементы Цикл
		
		Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "ГруппаРеквизитов") Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		Если ДобавитьКолонкуТерминатор И СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + ИмяКолонкиТерминатор) Тогда
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
			Продолжить;
		КонецЕсли;
		
		ЭлементНайден = Ложь;
		Для каждого СтрокаПериода Из ТаблицаДанныхКолонок Цикл
			Если СтрНайти(ТекЭлемент.Имя, ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки) Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				ЭлементНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементНайден Тогда
			Продолжить;
		КонецЕсли; 
		
		Для каждого ОписаниеПоля Из Поля Цикл
			ПрефиксРеквизитаКолонки = ОписаниеПоля.Значение.ПрефиксРеквизитаКолонки;
			Если СтрНайти(ТекЭлемент.Имя, ПрефиксРеквизитаКолонки) > 0  Тогда
				УдаляемыеЭлементы.Добавить(ТекЭлемент);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Форма.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	// Создаем общую группу
	Если СоздаватьОбщуюГруппу Тогда
		
		Если АктивныеПериоды.Количество() > 1 Тогда
			ЭлементФормы = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + "ГруппаРеквизитов", Тип("ГруппаФормы"), 
				Форма.Элементы[ЭлементФормыКроссТаблицы]);
			ЭлементФормы.Группировка      = ГруппировкаКолонок.Горизонтальная;
			ЭлементФормы.ОтображатьВШапке = Ложь;
			ЭлементФормы.Заголовок        = ЗаголовокГруппыПериоды;
			
			ОсновнойКонтейнер = ЭлементФормы;
		Иначе
			ОсновнойКонтейнер = Форма.Элементы[ЭлементФормыКроссТаблицы];
		КонецЕсли;
		
	Иначе
		ОсновнойКонтейнер = Форма.Элементы[ЭлементФормыКроссТаблицы];
	КонецЕсли; 
	
	// Создаем элементы-колонки
	Для каждого СтрокаПериода Из АктивныеПериоды Цикл
		
		ЭлементДляПодвала = Неопределено;
		
		Если СоздаватьГруппуПериода Тогда
			Если АктивныеПериоды.Количество() >= 1 Тогда
				ЭлементФормы = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + "Группа"+СтрокаПериода.ИмяКолонки,
					Тип("ГруппаФормы"), ОсновнойКонтейнер);
				
				ЭлементФормы.Группировка     				= ГруппировкаКолонокПериода;
				ЭлементФормы.ОтображатьВШапке				= Истина;
				ЭлементФормы.Заголовок        				= СтрокаПериода.Заголовок;
				ЭлементФормы.ГоризонтальноеПоложениеВШапке	= ГоризонтальноеПоложениеЭлемента.Центр;
				
				Если ЗначениеЗаполнено(СвойстваГруппыПериода) Тогда
					ЗаполнитьЗначенияСвойств(ЭлементФормы, СвойстваГруппыПериода);
				КонецЕсли;
				
				ВладелецПоля = ЭлементФормы;
			Иначе
				ВладелецПоля = Форма.Элементы[ЭлементФормыКроссТаблицы];
			КонецЕсли;
		КонецЕсли;
		
		Для каждого КлючЗначениеПоказатель Из ОписаниеКТ.Схема.Показатели Цикл
		
			ОписаниеПоказателя = КлючЗначениеПоказатель.Значение;
			// Создать группу показателя
			
			ИмяГруппы = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлементаГруппаПоПериодуПоказателю(ОписаниеКТ, СтрокаПериода, ОписаниеПоказателя);
			
			ЭлементФормы = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ВладелецПоля);
				
			ЭлементФормы.Группировка      = ГруппировкаКолонок.Горизонтальная;
			ЭлементФормы.ОтображатьВШапке = Истина;
			ЭлементФормы.Заголовок        = ОписаниеПоказателя.Заголовок;
			ЭлементФормы.Видимость		  = ОписаниеПоказателя.Видимость;
			ЭлементФормы.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			
			Если ОписаниеПоказателя.Свойство("СвойствоЭлемента") Тогда
				ЗаполнитьЗначенияСвойств(ЭлементФормы, ОписаниеПоказателя.СвойствоЭлемента);
			КонецЕсли;
			
			ПоказательВладелецПоля = ЭлементФормы;
			
			Для каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
				
				ОписаниеРесурса = КлючЗначениеРесурс.Значение;
				// найти поле по ресурс+показатель
				
				Для каждого КлючЗначениеПоля Из Поля Цикл
					
					ОписаниеПоля = КлючЗначениеПоля.Значение;
					
					Если ОписаниеПоля.ИмяПоказателя <> ОписаниеПоказателя.Имя
						ИЛИ ОписаниеПоля.ИмяРесурса <> ОписаниеРесурса.Имя Тогда
					
						Продолжить;
					
					КонецЕсли; 
					
					ПрефиксРеквизитаКолонки = ОписаниеПоля.ПрефиксРеквизитаКолонки;
					Если ОписаниеПоля.Свойство("СоздаватьЭлемент") Тогда
						СоздаватьЭлемент = ОписаниеПоля.СоздаватьЭлемент;
					Иначе
						СоздаватьЭлемент = Истина;
					КонецЕсли;
					Если ОписаниеПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
						СоздаватьИтоговыеРеквизиты = ОписаниеПоля.СоздаватьИтоговыеРеквизиты;
					Иначе
						СоздаватьИтоговыеРеквизиты = Ложь;
					КонецЕсли;
					Если ОписаниеПоля.Свойство("ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе") Тогда
						ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = ОписаниеПоля.ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе;
					Иначе
						ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе = Ложь;
					КонецЕсли;
					Если ОписаниеПоля.Свойство("ПоказыватьИтоговыеРеквизитыВГруппе") Тогда
						ПоказыватьИтоговыеРеквизитыВГруппе = ОписаниеПоля.ПоказыватьИтоговыеРеквизитыВГруппе;
					Иначе
						ПоказыватьИтоговыеРеквизитыВГруппе = Ложь;
					КонецЕсли;
					Если ОписаниеПоля.Свойство("ШиринаЭлемента") Тогда
						ШиринаЭлемента = ОписаниеПоля.ШиринаЭлемента;
					Иначе
						ШиринаЭлемента = 6;
					КонецЕсли;
					Если ОписаниеПоля.Свойство("СтруктураДействий") Тогда
						СтруктураДействий = ОписаниеПоля.СтруктураДействий;
					Иначе
						СтруктураДействий = Новый Структура();
					КонецЕсли;
					Если ОписаниеПоля.Свойство("ТипЭлементаФормы") Тогда
						ТипЭлементаФормы = ОписаниеПоля.ТипЭлементаФормы;
					Иначе
						ТипЭлементаФормы = Тип("ПолеФормы");
					КонецЕсли;
					Если ОписаниеПоля.Свойство("ВидПоля") Тогда
						ВидПоля = ОписаниеПоля.ВидПоля;
					Иначе
						ВидПоля = ВидПоляФормы.ПолеВвода;
					КонецЕсли;
					Если ОписаниеПоля.Свойство("ПрефиксГруппы") Тогда
						РодительЭлемента = Форма.Элементы[ЭлементФормыКроссТаблицы + ОписаниеПоля.ПрефиксГруппы + СтрокаПериода.ИмяКолонки];
					Иначе
						РодительЭлемента = ПоказательВладелецПоля;
					КонецЕсли;
					
					Если СоздаватьЭлемент Тогда
						// Создание элементов формы
						Элемент = Форма.Элементы.Добавить(ЭлементФормыКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, 
							ТипЭлементаФормы, РодительЭлемента);
						Элемент.Вид = ВидПоля;
						Если ТипЭлементаФормы = Тип("ПолеФормы") ИЛИ ТипЭлементаФормы = Тип("ТаблицаФормы") Тогда
							Элемент.ПутьКДанным = ИмяРеквизитаКроссТаблицы+"."+ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
						КонецЕсли;
						Если Элемент.Вид <> ВидПоляФормы.ПолеФлажка Тогда
							Элемент.Ширина = ШиринаЭлемента;
						КонецЕсли; 
						Если ОписаниеПоля.Свойство("ГоризонтальноеПоложениеВШапке") Тогда
							Элемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента[ОписаниеПоля.ГоризонтальноеПоложениеВШапке];
						КонецЕсли;
						Если ОписаниеПоля.Свойство("СвойстваЭлемента") И ТипЗнч(ОписаниеПоля.СвойстваЭлемента) = Тип("Структура") Тогда
							ЗаполнитьЗначенияСвойств(Элемент, ОписаниеПоля.СвойстваЭлемента);
						КонецЕсли; 
						Для каждого Действие Из СтруктураДействий Цикл
							Элемент.УстановитьДействие(Действие.Ключ, Действие.Значение);
						КонецЦикла;
						
						Элемент.ОтображатьВШапке = ОписаниеКТ.ОтображатьВШапкеГруппуРеквизит;
						
						Элемент.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
						
						ЭлементДляПодвала = Элемент;
					КонецЕсли;
					
					Если СоздаватьИтоговыеРеквизиты 
						И (СоздаватьЭлемент 
							ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе 
							ИЛИ ПоказыватьИтоговыеРеквизитыВГруппе) Тогда
							
						Если (СоздаватьЭлемент ИЛИ ПоказыватьИтоговыеРеквизитыВПредыдущемЭлементе) И ЭлементДляПодвала <> Неопределено Тогда
							ЭлементДляПодвала.ПутьКДаннымПодвала = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
						КонецЕсли;
						
						Если ПоказыватьИтоговыеРеквизитыВГруппе 
							И СоздаватьГруппуПериода 
							И ВладелецПоля <> Неопределено 
							И ТипЗнч(ВладелецПоля) = Тип("ГруппаФормы") 
							И ВладелецПоля.ОтображатьВШапке Тогда
							Если НЕ ПустаяСтрока(ВладелецПоля.Заголовок) Тогда
								ВладелецПоля.Заголовок = ВладелецПоля.Заголовок + ": ";
							КонецЕсли; 
							ВладелецПоля.ПутьКДаннымШапки = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки, ".","_");
							ВладелецПоля.ФорматШапки = "ЧДЦ=2; ЧН=0,00";
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	// Колонка терминатор
	Если ДобавитьКолонкуТерминатор Тогда
		ФормыУХ.СоздатьПолеФормы(Форма.Элементы,
			ЭлементФормыКроссТаблицы + ИмяКолонкиТерминатор, ,
			ИмяРеквизитаКроссТаблицы+"."+ИмяКолонкиТерминатор,
			ВидПоляФормы.ПолеНадписи,
			Форма.Элементы[ЭлементФормыКроссТаблицы],,
			ПараметрыЭлементаТерминатор());
	КонецЕсли;
	
КонецПроцедуры

Процедура НастроитьЭлементыШапкиКТ(ОписаниеКТ, Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	Для Каждого КлючЗначение Из ОписаниеКТ.Элементы.Шапка Цикл
		ОписаниеЭлемента = КлючЗначение.Значение;
		ОписаниеЭлемента.Видимость = Ложь;
	КонецЦикла;
	
	// Включаем только те, которые в шапке
	Для Каждого КлючЗначение Из ОписаниеКТ.Схема.СтруктураАналитик Цикл
		
		ОписаниеАналитики = КлючЗначение.Значение;
		Если ОписаниеАналитики.Аналитика = Справочники.АналитикиОперативногоПланирования.ДокументПланирования Тогда
			Продолжить;
		КонецЕсли; 
		
		ОписаниеЭлемента = ОписаниеКТ.Элементы.Шапка[ОписаниеАналитики.Аналитика];
		Если ОписаниеЭлемента = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеЭлемента.Видимость = (ОписаниеАналитики.Использование	= ПредопределенноеЗначение("Перечисление.ИспользованиеАналитик.КлючеваяАналитика"));
		ОписаниеЭлемента.ОбязательноеЗаполнение = ОписаниеАналитики.ОбязательноеЗаполнение;
		
	КонецЦикла;
	
	// 
	Для Каждого КлючЗначение Из ОписаниеКТ.Элементы.Шапка Цикл
		
		ОписаниеЭлемента = КлючЗначение.Значение;
		Элемент = Элементы[ОписаниеЭлемента.ИмяЭлемента];
		
		// Видимость
		Если Элемент.Видимость <> ОписаниеЭлемента.Видимость Тогда
			Элемент.Видимость = ОписаниеЭлемента.Видимость;
		КонецЕсли;
		
		// Для управления автоматическими отметками нужно поле ввода
		Элемент = Элементы[ОписаниеЭлемента.ИмяЭлементаПолеВвода];
		Если Элемент.Вид <> ВидПоляФормы.ПолеНадписи Тогда
			
			ФормыУХКлиентСервер.УстановитьАвтоОтметкуЗаполненияЭлемента(Элемент, ОписаниеЭлемента.ОбязательноеЗаполнение);
			Элемент.АвтоВыборНезаполненного = ОписаниеЭлемента.ОбязательноеЗаполнение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////

// Установить свойства элементов кросс таблицы.
//
// Параметры:
//  ЭлементыФормы - ВсеЭлементыФормы - коллекция элементов формы.
//  Периоды - ТаблицаЗначений - таблица периодов. См. функцию
//				ЦентрализованныеЗакупкиУХ.ЗаполнитьТаблицуПериодов().
//  ИменаСвойствТаблицы - Строка - Имена реквизитов кросс-таблицы
//				расшифрованных по периодам. Разделитель запятая.
//  ЗначенияСвойствЭлемента - Структура - имена реквизитов элемента
//				формы и значения для установки.
//
Процедура УстановитьСвойстваЭлементовКроссТаблицы(ЭлементыФормы, Периоды,
						ИменаСвойствТаблицы, ЗначенияСвойствЭлемента) Экспорт
	мИменСвойств = СтрРазделить(ИменаСвойствТаблицы, ",");
	АктивныеПериоды = Периоды.НайтиСтроки(Новый Структура("Активная", Истина));
	Для Каждого ИмяСвойства Из мИменСвойств Цикл
		ИмяСвойства = СокрЛП(ИмяСвойства);
		Для каждого Период Из АктивныеПериоды Цикл
			Элемент = ЭлементыФормы["ПотребностиВНоменклатуре" + ИмяСвойства + "_" + Период.ИмяКолонки];
			ЗаполнитьЗначенияСвойств(Элемент, ЗначенияСвойствЭлемента);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

//
Процедура УстановитьУсловноеОформлениеДополнительныхАналитикКТ(ОписаниеКТ, Форма, Знач ОснованиеИмениЭлемента = Неопределено) Экспорт
	
	ТаблицаФормы = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица];
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	Если ОснованиеИмениЭлемента = Неопределено Тогда
		ОснованиеИмениЭлемента = "Аналитика";
	КонецЕсли;
	
	Для Индекс = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, ОснованиеИмениЭлемента, Индекс);
		
		ИмяРеквизита = "ВидАналитики" + Индекс;
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяЭлемента);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			ТаблицаФормы.ПутьКДанным + "." + ИмяРеквизита, ВидСравненияКомпоновкиДанных.НеЗаполнено,,,Истина);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",                     НСтр("ru = '<Не используется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",            Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", 	  Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 				  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
	КонецЦикла;
	//
	
	УстановитьУсловноеОформлениеНоменклатура(ОписаниеКТ, Форма, ОснованиеИмениЭлемента);
	
КонецПроцедуры

//
Процедура УстановитьУсловноеОформлениеДополнительныхАналитикРасшифровки(ОписаниеКТ, Форма, Знач ОснованиеИмениЭлемента = Неопределено) Экспорт
	
	ТаблицаФормы = Форма.Элементы[ОписаниеКТ.Элементы.Расшифровка];
	
	УсловноеОформление = Форма.УсловноеОформление;
	
	Если ОснованиеИмениЭлемента = Неопределено Тогда
		ОснованиеИмениЭлемента = "Аналитика";
	КонецЕсли;
	
	Для Индекс = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		ИмяЭлемента = ОписаниеКТ.Элементы.Расшифровка+"_"+ОснованиеИмениЭлемента+Индекс;
		
		ИмяРеквизита = "ВидАналитики" + Индекс;
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, ИмяЭлемента);
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			ТаблицаФормы.ПутьКДанным + "." + ИмяРеквизита, ВидСравненияКомпоновкиДанных.НеЗаполнено,,,Истина);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст",                     НСтр("ru = '<Не используется>'"));
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",            Истина);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", 	  Ложь);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", 				  ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
		
	КонецЦикла;
	
КонецПроцедуры

#Область Инициализация

#Область ИнициализацияКроссТаблицы

// Функция инициализирует структуру кросс-таблицы
// Параметры:
//  Идентификатор			- Строка 	- Идентификатор кросс-таблицы
//  ИмяТабличнойЧасти		- Строка	- Имя табличной части в которой будут храниться данные
//	ИмяРеквизита			- Строка	- Имя реквизита формы кросс-таблицы
//	ИмяЭлемента				- Строка	- Имя элемента формы в котором будет отражаться кросс-таблица
//
Функция Новый_КроссТаблица(Идентификатор, ИмяТабличнойЧасти, Знач ИмяРеквизита = "", Знач ИмяЭлемента = "", Знач ДанныеШапкиРасположеныВОбъекте = Ложь) экспорт
	
	Если ИмяРеквизита = "" Тогда
		ИмяРеквизита = ИмяТабличнойЧасти;
	КонецЕсли;
	
	Если ИмяЭлемента = "" Тогда
		ИмяЭлемента = ИмяРеквизита;
	КонецЕсли;
	
	//
	ОписаниеКТ = Новый Структура;
	ОписаниеКТ.Вставить("Версия",								2);
	ОписаниеКТ.Вставить("Идентификатор",						Идентификатор);
	ОписаниеКТ.Вставить("Схема",								Новый Структура);
	ОписаниеКТ.Вставить("ИмяТабличнойЧасти",					ИмяТабличнойЧасти);					// Имя табличной части
	ОписаниеКТ.Вставить("ДанныеШапкиРасположеныВОбъекте",		ДанныеШапкиРасположеныВОбъекте);	// Шапка расположена в объекте или в реквизитах формы
	ОписаниеКТ.Вставить("ПрефиксАналитикШапки",					?(ДанныеШапкиРасположеныВОбъекте, "Объект.", ""));
	
	ОписаниеКТ.Вставить("ЕстьШапка",							ДанныеШапкиРасположеныВОбъекте);
	ОписаниеКТ.Вставить("ЕстьСтроки",							Истина);
	ОписаниеКТ.Вставить("ЕстьРасшифровка",						Ложь);
	
	СтруктураЭлементы = Новый Структура;
	СтруктураЭлементы.Вставить("Шапка",							Новый Соответствие);
	СтруктураЭлементы.Вставить("КроссТаблица",					ИмяЭлемента);
	СтруктураЭлементы.Вставить("Расшифровка",					ИмяЭлемента+"_Расшифровка");		// Имя элемента таблицы расшифровки кросс-таблицы
	СтруктураЭлементы.Вставить("ГруппаРазмещения",				"");								// Имя элемента группы, являющейся владельцем элементов кросс-таблицы
	СтруктураЭлементы.Вставить("КнопкаТолькоЛимитируемыеСтатьи","КроссТаблицаКнопкаТолькоЛимитируемыеСтатьи");
	
	ОписаниеКТ.Вставить("Элементы", 							СтруктураЭлементы);					// Структура элементов формы кросс-таблицы
	
	СтруктураРеквизиты = Новый Структура;
	СтруктураРеквизиты.Вставить("КроссТаблица",					ИмяРеквизита);
	СтруктураРеквизиты.Вставить("Периоды",						ИмяРеквизита +"_Периоды");
	СтруктураРеквизиты.Вставить("Расшифровка",					ИмяРеквизита+"_Расшифровка");
	СтруктураРеквизиты.Вставить("РасшифровкаИтоги",				ИмяРеквизита+"_Расшифровка_Итоги");
	
	ОписаниеКТ.Вставить("Реквизиты", 							СтруктураРеквизиты);				// Структура реквизитов формы кросс-таблицы
	
	ОписаниеКТ.Вставить("СоздаватьОбщуюГруппу", 				Истина);
	
	ОписаниеКТ.Вставить("СоздаватьГруппуПериода", 				Истина);
	ОписаниеКТ.Вставить("ЗаголовокГруппыПериоды",				НСтр("ru = 'Периоды'"));
	
	ОписаниеКТ.Вставить("ИмяГруппыСтроки",						ИмяЭлемента+"_ГруппаСтрок");
	ОписаниеКТ.Вставить("ЗаголовокГруппыСтроки",				НСтр("ru = 'Аналитики в строках'"));
	ОписаниеКТ.Вставить("ИмяГруппыРесурсы",						ИмяЭлемента+"_ГруппаРесурсыИтого");
	
	ОписаниеКТ.Вставить("ИмяГруппыДопРеквизиты",				ИмяЭлемента+"_ГруппаДопРеквизитов");
	ОписаниеКТ.Вставить("ЗаголовокГруппыДопРеквизиты",			НСтр("ru = 'Дополнительные реквизиты'"));
	
	//
	ПрефиксыЭлементов = Новый Структура;
	ПрефиксыЭлементов.Вставить("Измерение", 					"_ИзмерениеСтрока_");
	ПрефиксыЭлементов.Вставить("ИзмерениеРасшифровки", 			"_Расшифровка_");
	ПрефиксыЭлементов.Вставить("Ресурс", 						"_Ресурс_");
	ПрефиксыЭлементов.Вставить("Реквизит", 						"_Реквизит_");
	
	ОписаниеКТ.Вставить("ПрефиксыЭлементов",					ПрефиксыЭлементов); // Префиксы элементов формы
	
	ОписаниеКТ.Вставить("УправлениеВидимостьюКолонок", 			Новый_УправлениеВидимостьюКолонок(ОписаниеКТ.Элементы.КроссТаблица));
	
	// Действия
	ОписаниеКТ.Вставить("СтруктураДействийСохранениеВОбъект",	Новый Структура);
	ОписаниеКТ.Вставить("ОтображатьВШапкеГруппуРеквизит",		Истина);
	ОписаниеКТ.Вставить("ДобавитьКолонкуТерминатор",			Истина);
	ОписаниеКТ.Вставить("Команды",								Новый Структура); // команды формы кросс-таблицы
	ОписаниеКТ.Вставить("УдалятьРеквизитыТаблицы",				Истина);
	ОписаниеКТ.Вставить("ЗапрещеноУдалятьСтрокиКТ",				Ложь); // Запрет на удаление строк и расшифровок в которых есть заполненный показатель Было
	ОписаниеКТ.Вставить("ТолькоЛимитируемыеСтатьи", 			Ложь); // Отбор статей бюджета по признаку лимитируется или нет?
	ОписаниеКТ.Вставить("РежимЭкспрессРасшифровки",				2); //Варианты РежимЭкспрессРасшифровки
																	// 2 состояния (внизу, выключена);
																	// 3 состояния (справа, внизу, выключена)
	ОписаниеКТ.Вставить("ЗаголовокКнопкиУправленияЭкспрессРасшифровкой", НСтр("ru = 'Расшифровка [↓]'"));
	
	ОписаниеКТ.Вставить("ПрефиксДляСпискаСвязейПараметровВыбора", Идентификатор+"_СписокСвязиПараметровВыбора_");				// Структура реквизитов формы кросс-таблицы
	
	Возврат ОписаниеКТ;

КонецФункции // Новый_КроссТаблица()

Функция Новый_Показатели() Экспорт 
	
	Показатели = Новый Структура();
	Показатели.Вставить("Исходное",		Новый_Показатель("Исходное",  "Исх_", НСтр("ru = 'Исходное'"), Истина,	Ложь));
	Показатели.Вставить("Изменение",	Новый_Показатель("Изменение", "Изм_", НСтр("ru = '∆'"), 	   Ложь, 	Ложь));
	Показатели.Вставить("Результат",	Новый_Показатель("Результат", "Рез_", НСтр("ru = 'Новое'"),    Ложь, 	Истина, ДопустимыйЗнак.Неотрицательный));
	
	Возврат Показатели;
	
КонецФункции // Новый_Показатели()

Функция Новый_Показатель(Имя, Префикс, Заголовок, ТолькоПросмотр, Видимость, Знач ЗнакЧисла = Неопределено) Экспорт

	Если ЗнакЧисла = неопределено Тогда
		ЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли; 
	
	Показатель = Новый Структура;
	Показатель.Вставить("Имя",				Имя);
	Показатель.Вставить("Префикс",			Префикс);
	Показатель.Вставить("Заголовок",		Заголовок);
	Показатель.Вставить("ТолькоПросмотр",	ТолькоПросмотр);
	Показатель.Вставить("Видимость",		Видимость);
	Показатель.Вставить("ЗнакЧисла",		ЗнакЧисла);
	
	// 
	УправлениеВидимостью = Новый_УправлениеВидимостью(
		Истина, Истина,
		Заголовок,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Видимость колонки ""%1""'"), 
			Заголовок));
	
	УправлениеВидимостью.ИмяКоманды = "_УправлениеВидимостьюПоказателя_"+Показатель.Имя;
	УправлениеВидимостью.ИмяЭлемента = "_УправлениеВидимостьюПоказателя_"+Показатель.Имя;
	
	Показатель.Вставить("УправлениеВидимостью",	УправлениеВидимостью);
	
	Возврат Показатель;

КонецФункции // Новый_Показатель()

Функция Новый_Ресурсы() Экспорт 

	Ресурсы = Новый Структура();
	
	Возврат Ресурсы;

КонецФункции // Новый_Ресурсы()
 
Функция ДобавитьРесурс(СхемаКТ, ИмяРесурса, Заголовок, Разрядность, РазрядностьДробнойЧасти = 0, Знач ЗнакЧисла = Неопределено, Видимость = Истина, ШиринаЭлемента = 12, Формат="", ПредставлениеРазрядности = "") экспорт
	
	СхемаКТ.Ресурсы.Вставить(ИмяРесурса, Новый_Ресурс(ИмяРесурса, Заголовок, Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла, Видимость, ШиринаЭлемента, Формат, ПредставлениеРазрядности));
	
КонецФункции // ДобавитьРесурс()

// Функция инициализирует структуру параметров периодичности кросс-таблицы
// Параметры:
//
Функция Новый_ПараметрыПериодичности() Экспорт
	
	ПараметрыПериодичности = Новый Структура;
	ПараметрыПериодичности.Вставить("Периодичность", 				Перечисления.Периодичность.Месяц);	// Периодичность
	ПараметрыПериодичности.Вставить("ФорматПериода",				"ДФ=ММММгггг");						// Формат даты периода в заголовке
	ПараметрыПериодичности.Вставить("ОтдельнаяГруппаПериодов",		Новый_ГруппаПериода());
	
	Возврат ПараметрыПериодичности;

КонецФункции // Новый_ПараметрыПериодичности()
 
#КонецОбласти 

#Область ИнициализироватьПолеКроссТаблицы

Процедура ОбновитьОписаниеПолей(ОписаниеКТ, СоответствиеДействий) экспорт
	
	// Формируем поля кросс-таблицы
	Для каждого КлючЗначениеПоказателя Из ОписаниеКТ.Схема.Показатели Цикл
		
		ОписаниеПоказателя = КлючЗначениеПоказателя.Значение;
		Для каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
			ОписаниеРесурса = КлючЗначениеРесурс.Значение;
			
			// Описание поля
			СтруктураПоля = Новый_СтруктураПоля(ОписаниеПоказателя, ОписаниеРесурса, ОписаниеКТ.ЕстьРасшифровка);
			
			СтруктураДействий = СоответствиеДействий[ОписаниеРесурса.Имя+ОписаниеПоказателя.Имя];
			
			Если СтруктураДействий = неопределено Тогда
				СтруктураДействий = Новый Структура;
			КонецЕсли; 
			
			//
			ДобавитьПолеКроссТаблицы(ОписаниеКТ.Схема, СтруктураПоля.Имя, СтруктураПоля, СтруктураДействий);
			
		КонецЦикла; 
		
	КонецЦикла; 
	
	// Итоги
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Ресурсы Цикл
		ДобавитьИтогКроссТаблицы(ОписаниеКТ.Схема, КлючЗначение.Значение.Имя);
	КонецЦикла; 
	
	// Формируем признак, что в расшифровке присутствует аналитика, зависимая от аналитик строки
	ЕстьЗависимаяОтСтрокиАналитикаРасшифровки = Ложь;
	Если ОписаниеКТ.ЕстьРасшифровка Тогда
		
		Если КроссТаблицыУХКлиентСервер.ЕстьАналитикаРасшифровки(ОписаниеКТ, "СтатьяБюджета")
			 И КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "ПриходРасход") Тогда
			ЕстьЗависимаяОтСтрокиАналитикаРасшифровки = Истина;
		ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаРасшифровки(ОписаниеКТ, "ДоговорКонтрагента")
			 И КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Контрагент") Тогда
			ЕстьЗависимаяОтСтрокиАналитикаРасшифровки = Истина;
		ИначеЕсли КроссТаблицыУХКлиентСервер.ЕстьАналитикаРасшифровки(ОписаниеКТ, "ДоговорКонтрагента")
			 И КроссТаблицыУХКлиентСервер.ЕстьАналитикаСтроки(ОписаниеКТ, "Организация") Тогда
			ЕстьЗависимаяОтСтрокиАналитикаРасшифровки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определяем, что ПриходРасход и Статья на одном уровне
	Если СтатьяИНаправлениеНаОдномУровне(ОписаниеКТ) Тогда
		ОписаниеКТ.Схема.СтруктураАналитик.СтатьяБюджета.Вставить("ЗаполнятьПриходРасходПоСтатье", Истина);
	КонецЕсли;
	
	//
	ОписаниеКТ.Вставить("ЕстьЗависимаяОтСтрокиАналитикаРасшифровки", ЕстьЗависимаяОтСтрокиАналитикаРасшифровки);
	
	//
	ОписаниеКТ.ОтображатьВШапкеГруппуРеквизит = ОписаниеКТ.Схема.Ресурсы.Количество()>1;
		
КонецПроцедуры

// Добавляет в настройки параметров вывода поле итога кросс-таблицы 
//
// Параметры:
//  ОписаниеКТ				 	 - Структура	 - Параметры вывода полей кросс-таблицы
//	ИмяИтога			 		 - Строка	 	 - имя итога для быстрого доступа из структуры Итоги
//	ПараметрыИтога				 - Структура	 - Параметры создания итога
Процедура ДобавитьИтогКроссТаблицы(СхемаКТ, ИмяИтога) Экспорт

	Если НЕ СхемаКТ.Свойство("Итоги") Тогда
		СхемаКТ.Вставить("Итоги", Новый Структура());
	КонецЕсли;
	
	СхемаКТ.Итоги.Вставить(ИмяИтога, ИмяИтога);

КонецПроцедуры

// Функция инициализирует структуру видимости ресурса кросс-таблицы
// Параметры:
//  Использовать			- Булево 	- Используется ли управление видимостью ресурса
//  ПервоначальнаяВидимость	- Булево	- Первоначальная видимость ресурса
//	Заголовок				- Строка	- Заголовок команды управления видимостью
//	Подсказка				- Строка	- Подсказка команды управления видимостью 
//
Функция Новый_УправлениеВидимостью(Использовать, ПервоначальнаяВидимость = Ложь, Заголовок = "", Подсказка = "") экспорт

	Возврат Новый Структура("Использовать, Видимость, Заголовок, Подсказка, ИмяКоманды, ИмяЭлемента, Доступность", Использовать, ПервоначальнаяВидимость, Заголовок, Подсказка, "", "", Истина);

КонецФункции // Новый_УправлениеВидимостью()

#КонецОбласти

// Функция инициализирует структуру видимости ресурса кросс-таблицы
// Параметры:
//  ОписаниеКТ			- Структура 	- Используется ли управление видимостью ресурса
//  Периодичность	- ПеречислениеСсылка.Периодичность	- Первоначальная видимость ресурса
//	ФорматПериода			- Строка	- Заголовок команды управления видимостью
//	СоздаватьГруппуПериода				- Строка	- Подсказка команды управления видимостью 
//	ЗаголовокГруппыПериоды			- Строка	- Заголовок поля группировки
//
Процедура УстановитьПараметрыПериодичности(СхемаКТ, Периодичность=неопределено, ФорматПериода = неопределено, 
		СоздаватьГруппуПериода = неопределено, ЗаголовокГруппыПериоды = неопределено) экспорт

	Если Периодичность <> неопределено Тогда
		СхемаКТ.ПараметрыПериодичности.Периодичность = Периодичность;
	КонецЕсли; 
	
	Если ФорматПериода <> неопределено Тогда
		СхемаКТ.ПараметрыПериодичности.ФорматПериода = ФорматПериода;
	КонецЕсли; 
	
	Если СоздаватьГруппуПериода <> неопределено Тогда
		СхемаКТ.ПараметрыПериодичности.ОтдельнаяГруппаПериодов.СоздаватьГруппу = СоздаватьГруппуПериода;
	КонецЕсли; 
	
	Если ЗаголовокГруппыПериоды <> неопределено Тогда
		СхемаКТ.ПараметрыПериодичности.ОтдельнаяГруппаПериодов.Заголовок = ЗаголовокГруппыПериоды;
	КонецЕсли; 
	
	//
	СтруктураРеквизитовПериода = Новый Структура("Период","Период");
	СхемаКТ.ПараметрыПериодичности.Вставить("СтруктураРеквизитовПериода",	 	СтруктураРеквизитовПериода);
	
КонецПроцедуры //
 
Функция Новый_СтруктураПоля(ОписаниеПоказателя, ОписаниеРесурса, ЕстьРасшифровка) Экспорт
	
	СтруктураПоля = Новый Структура;
	СтруктураПоля.Вставить("Имя",						ОписаниеРесурса.Имя+ОписаниеПоказателя.Имя);
	СтруктураПоля.Вставить("ПрефиксРеквизитаКолонки",	СтруктураПоля.Имя+"_");
	СтруктураПоля.Вставить("ИмяРесурса", 				ОписаниеРесурса.Имя);				// Используется при чтении из табличной части
	СтруктураПоля.Вставить("ИмяПоказателя", 			ОписаниеПоказателя.Имя);			// Используется при чтении из табличной части
	СтруктураПоля.Вставить("ИмяРеквизитаТЧ",			ОписаниеРесурса.Имя);
	Если СтруктураПоля.ИмяПоказателя <> "Результат" Тогда
		СтруктураПоля.ИмяРеквизитаТЧ = СтруктураПоля.ИмяРеквизитаТЧ+ОписаниеПоказателя.Имя;
	КонецЕсли;
	
	СтруктураПоля.Вставить("СоздаватьЭлемент", 			Истина);
	СтруктураПоля.Вставить("УдалятьРеквизитыТаблицы",	Ложь);
	СтруктураПоля.Вставить("ТипЭлемента", ОбщегоНазначения.ОписаниеТипаЧисло(
			ОписаниеРесурса.Разрядность, 
			ОписаниеРесурса.РазрядностьДробнойЧасти, 
			ОписаниеПоказателя.ЗнакЧисла));
	СтруктураПоля.Вставить("СоздаватьИтоговыеРеквизиты",			Истина); // ??
	СтруктураПоля.Вставить("ГоризонтальноеПоложениеВШапке", "Центр");
	
	// Структура свойств элемента
	СтруктураПоля.Вставить("СвойстваЭлемента", 						Новый Структура());
	СтруктураПоля.СвойстваЭлемента.Вставить("Заголовок", 			ОписаниеРесурса.Заголовок);
	СтруктураПоля.СвойстваЭлемента.Вставить("ВыделятьОтрицательные",Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("ОтображатьВШапке",		Истина);
	СтруктураПоля.СвойстваЭлемента.Вставить("Ширина", 				ОписаниеРесурса.ШиринаЭлемента);
	СтруктураПоля.СвойстваЭлемента.Вставить("Формат", 				ОписаниеРесурса.Формат);
	СтруктураПоля.СвойстваЭлемента.Вставить("ПропускатьПриВводе",	ЕстьРасшифровка);
	Если ЕстьРасшифровка Тогда
		СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", 	Истина);
	Иначе
		СтруктураПоля.СвойстваЭлемента.Вставить("ТолькоПросмотр", 	ОписаниеПоказателя.ТолькоПросмотр);
	КонецЕсли;
	
	СтруктураПоля.СвойстваЭлемента.Вставить("Видимость",			ОписаниеРесурса.Видимость 
																	И ОписаниеПоказателя.Видимость);
	
	//Действия
	СтруктураПоля.Вставить("СтруктураДействий", Новый Структура);
	
	Возврат СтруктураПоля;
	
КонецФункции

Функция Новый_СтруктураИтога(ОписаниеИтога) Экспорт
	
	СтруктураИтога = Новый Структура;
	СтруктураИтога.Вставить(ОписаниеИтога, ОписаниеИтога);
	
	Возврат СтруктураИтога;
	
КонецФункции


#КонецОбласти 

//
Процедура СоздатьЭлементыКроссТаблицы(ОписаниеКТ, Форма) экспорт
	
	Элементы = Форма.Элементы;
	
	//
	ЭлементКроссТаблица = Форма.Элементы[ОписаниеКТ.Элементы.КроссТаблица];
	
	СоздатьЭлементыУправленияВидимостьюРесурсов(ОписаниеКТ, Форма);
	
	#Область ДобавитьИзмеренияСтроки
	
	// НомерСтроки
	ИмяЭлемента = ОписаниеКТ.Реквизиты.КроссТаблица+"НомерСтроки";
	НомерСтроки = ЭлементКроссТаблица.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
	Если НомерСтроки = неопределено Тогда
		НомерСтроки = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементКроссТаблица);
		НомерСтроки.Вид = ВидПоляФормы.ПолеНадписи;
		НомерСтроки.ПутьКДанным = ОписаниеКТ.Реквизиты.КроссТаблица + "."+"НомерСтроки";
		НомерСтроки.ТолькоПросмотр = Истина;
		НомерСтроки.Заголовок = "№";
		НомерСтроки.Ширина = "3";
	КонецЕсли;
	
	#Область ДобавлениеГруппыСтрок
	// Группа строки
	ГруппаСтроки = ЭлементКроссТаблица.ПодчиненныеЭлементы.Найти(ОписаниеКТ.ИмяГруппыСтроки);
	Если ГруппаСтроки = неопределено Тогда
		ГруппаСтроки = Элементы.Добавить(ОписаниеКТ.ИмяГруппыСтроки, Тип("ГруппаФормы"), ЭлементКроссТаблица);
		ГруппаСтроки.Заголовок = ОписаниеКТ.ЗаголовокГруппыСтроки;
		ГруппаСтроки.Вид			  = ВидГруппыФормы.ГруппаКолонок;
		ГруппаСтроки.ОтображатьВШапке = Ложь;
		ГруппаСтроки.Группировка	  = ГруппировкаКолонок.Вертикальная;
	Иначе
		// удалить все ранее созданные элементы
		УдалитьПодчиненныеЭлементы(ГруппаСТроки.ПодчиненныеЭлементы, Элементы);
	КонецЕсли;
	#КонецОбласти
	
	#Область ДобавлениеГруппыДопРеквизитов
	
	// Группа доп.реквизитов
	ИмяГруппыДопРеквизитов = ОписаниеКТ.ИмяГруппыДопРеквизиты;
	ГруппаДополнительныхРеквизитов = ЭлементКроссТаблица.ПодчиненныеЭлементы.Найти(ИмяГруппыДопРеквизитов);
	Если ГруппаДополнительныхРеквизитов = неопределено Тогда
		
		ГруппаДополнительныхРеквизитов = Элементы.Добавить(ИмяГруппыДопРеквизитов, Тип("ГруппаФормы"), ЭлементКроссТаблица);
		ГруппаДополнительныхРеквизитов.Заголовок = ОписаниеКТ.ЗаголовокГруппыДопРеквизиты;
											
		ГруппаДополнительныхРеквизитов.Вид				= ВидГруппыФормы.ГруппаКолонок;
		ГруппаДополнительныхРеквизитов.ОтображатьВШапке	= Ложь;
		ГруппаДополнительныхРеквизитов.Группировка		= ГруппировкаКолонок.Горизонтальная;
	Иначе
		// удалить все ранее созданные элементы
		УдалитьПодчиненныеЭлементы(ГруппаДополнительныхРеквизитов.ПодчиненныеЭлементы, Элементы);
	КонецЕсли;
	#КонецОбласти
	
	#Область ДобавлениеСтрок
	
	// Определение списка групп в строках
	ГруппыСтрок = Новый Массив;
	
	Для Каждого СтрокаАналитики Из ОписаниеКТ.Схема.Аналитики.мСтрока Цикл
		Строка = ОписаниеКТ.Схема.СтруктураАналитик[СтрокаАналитики];
		
		//
		Строка.ГруппаСтрок = СтрЗаменить(ВРег(Строка.ГруппаСтрок), " ", "");
		Если ГруппыСтрок.Найти(Строка.ГруппаСтрок) = неопределено Тогда
			ГруппыСтрок.Добавить(Строка.ГруппаСтрок);
		КонецЕсли;
		
	КонецЦикла;
	
	//
	Для Каждого Группа Из ГруппыСтрок Цикл
		
		ИмяЭлементаГруппы = ОписаниеКТ.Элементы.КроссТаблица+"ГруппаИзмерений"+Группа;
		Если ГруппаСтроки.ПодчиненныеЭлементы.Найти(ИмяЭлементаГруппы) = неопределено Тогда
			Элемент = Элементы.Добавить(ИмяЭлементаГруппы, Тип("ГруппаФормы"), ГруппаСтроки);
			Элемент.Вид = ВидГруппыФормы.ГруппаКолонок;
			Элемент.ОтображатьВШапке = Истина;
			Элемент.ФиксацияВТаблице=ФиксацияВТаблице.Нет;
			Элемент.Группировка = ГруппировкаКолонок.Горизонтальная;
		КонецЕсли;
		
		ЭлементГруппа = Элементы[ИмяЭлементаГруппы];
		
		ЗаголовокГруппы = "";
		
		// Добавляем элементы
		МассивСтрокГруппы = ПолучитьМассивРеквизитовГруппыСтрок(ОписаниеКТ.Схема.Аналитики.мСтрока, 
			ОписаниеКТ.Схема.СтруктураАналитик, Группа);
		
		Для Каждого СтрокаЭлемент Из МассивСтрокГруппы Цикл
			
			ОписаниеРеквизита = ОписаниеКТ.Схема.РеквизитПоАналитике[СтрокаЭлемент.Аналитика];
			Если ОписаниеРеквизита = неопределено Тогда
				Продолжить;
			КонецЕсли; 
			
			ИмяИзмерения = ОписаниеРеквизита.Имя;
			
			//
			ИнфоИзмерения = неопределено;
			ОписаниеКТ.Схема.СтруктураАналитик.Свойство(ИмяИзмерения, ИнфоИзмерения);
			
			//
			ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, ИмяИзмерения);
			Элемент = ЭлементГруппа.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
			Если Элемент = неопределено Тогда
				
				//
				Элемент = Элементы.Найти(ИмяЭлемента);
				Если Элемент <> неопределено Тогда
				
					Элементы.Удалить(Элемент);
				
				КонецЕсли; 
				
				//
				Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ЭлементГруппа);
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				Элемент.ПутьКДанным = ОписаниеКТ.Реквизиты.КроссТаблица + "."+ИмяИзмерения;
				Элемент.ОтображатьВШапке = Ложь;
				Элемент.ОтображатьВПодвале = Ложь;
				
				Если ИнфоИзмерения <> неопределено И ИнфоИзмерения.Свойство("ТолькоПросмотр") 
						И ИнфоИзмерения.ТолькоПросмотр Тогда
					Элемент.ТолькоПросмотр = Истина;
				КонецЕсли;
				
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОбщийОбработчикИзмененияАналитик");
				
				ЗаголовокГруппы = ЗаголовокГруппы + ?(ЗаголовокГруппы="", "", " / ")+Строка(СтрокаЭлемент.Аналитика);
				
				Если СтрокаЭлемент.Аналитика = Справочники.АналитикиОперативногоПланирования.Номенклатура 
					И ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
					ДобавитьСвязанныеСНоменклатуройЭлементы(ОписаниеКТ, ГруппаДополнительныхРеквизитов, Элемент, Элементы);
				КонецЕсли; 
				
			КонецЕсли;
			
			// Обязательность заполнения измерений строк
			Элемент.АвтоОтметкаНезаполненного = СтрокаЭлемент.ОбязательноеЗаполнение;
			Элемент.АвтоВыборНезаполненного = СтрокаЭлемент.ОбязательноеЗаполнение;
			
			// Настройка аналитик
			ВыполнитьНастройкуЭлементовАналитики(ОписаниеКТ, Элемент, СтрокаЭлемент.Аналитика);
			
		КонецЦикла;
		
		ЭлементГруппа.Заголовок = ЗаголовокГруппы;
		
	КонецЦикла;
	
	#КонецОбласти 
	
	#КонецОбласти 
	
	#Область ДобавлениеИтоговыхРесурсов
	
	// Добавляем группу итоговых ресурсов
	ГруппаРесурсы = ЭлементКроссТаблица.ПодчиненныеЭлементы.Найти(ОписаниеКТ.ИмяГруппыРесурсы);
	Если ГруппаРесурсы = неопределено Тогда
		
		ГруппаРесурсы = Элементы.Добавить(ОписаниеКТ.ИмяГруппыРесурсы, Тип("ГруппаФормы"), ЭлементКроссТаблица);
		ГруппаРесурсы.Вид				= ВидГруппыФормы.ГруппаКолонок;
		ГруппаРесурсы.ОтображатьВШапке	= Ложь;
		ГруппаРесурсы.Группировка	  	= ГруппировкаКолонок.Горизонтальная;
		ГруппаРесурсы.Заголовок			= НСтр("ru = 'Итого'; en = 'Total'");
	Иначе
		// удалить все ранее созданные элементы
		УдалитьПодчиненныеЭлементы(ГруппаРесурсы.ПодчиненныеЭлементы, Элементы);
		
	КонецЕсли;
	
	Для Каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
		
		ОписаниеРесурса = КлючЗначениеРесурс.Значение;
		
		ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Ресурс(ОписаниеКТ, ОписаниеРесурса.Имя);
		
		Элемент = ГруппаРесурсы.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
		Если Элемент = неопределено Тогда
			  
			Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаРесурсы);
			Элемент.Вид					= ВидПоляФормы.ПолеВвода;
			Элемент.ПутьКДанным			= ОписаниеКТ.Реквизиты.КроссТаблица + "."+ОписаниеРесурса.Имя;
			Элемент.ОтображатьВШапке	= Истина;
			Элемент.ТолькоПросмотр		= Истина;
			Элемент.Ширина 				= ОписаниеРесурса.ШиринаЭлемента;
			Элемент.Формат				= ОписаниеРесурса.Формат;
			Элемент.ПутьКДаннымПодвала  = ОписаниеКТ.Реквизиты.КроссТаблица+ОписаниеРесурса.Имя+"Результат_Итог";
			Элемент.Заголовок			= ОписаниеРесурса.Заголовок
					+ ?(ОписаниеРесурса.ПредставлениеРазрядности="", "", ", ") + ОписаниеРесурса.ПредставлениеРазрядности ;
			Элемент.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
			
		КонецЕсли;
		
	КонецЦикла;
	
	#КонецОбласти 
	
	// При наличии расшифровки
	ЭлементКроссТаблица.АвтоВводНовойСтроки = НЕ ОписаниеКТ.ЕстьРасшифровка;
	
	// Создаем элементы расшифровки на основной форме
	Элемент = Форма.Элементы.Найти(ОписаниеКТ.Элементы.Расшифровка);
	Если ОписаниеКТ.ЕстьРасшифровка Тогда
		СоздатьЭлементыЭкспрессРасшифровки(ОписаниеКТ, Форма);
	Иначе
		// Удаляем элемент формы экспресс-расшифровки
		Если Элемент <> неопределено Тогда
			Форма.Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЕсли; 
	
	УстановитьПараметрыЭлементовАналитикКТ(ОписаниеКТ, Форма);
	
	//
	СброситьУправлениеВидимостью(ОписаниеКТ, Форма);
	
	// Если работа только с лимитирующими статьями, то 
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи 
		ИЛИ Форма.Элементы.КроссТаблицаКнопкаТолькоЛимитируемыеСтатьи.Пометка Тогда
		УправлениеВводомСтатейБюджета(ОписаниеКТ, Форма);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьАналитикуШапки(ОписаниеКТ, Форма, ИмяАналитики) экспорт

	Если ОписаниеКТ.ДанныеШапкиРасположеныВОбъекте Тогда
		ОбластьДанных = Форма.Объект;
	Иначе
		ОбластьДанных = Форма;
	КонецЕсли;
	
	Возврат ОбластьДанных[ИмяАналитики];	

КонецФункции // ПолучитьАналитикуШапки()
 
Процедура УправлениеВводомСтатейБюджета(ОписаниеКТ, Форма) экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	//
	ИмяСвойстваОтбора = "УровеньКонтроляСтатьиБюджета";
	СтруктураОтбора = Новый Структура(Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок);
	ОтборПоКонтролируемымСтатьямУстановлен = СтруктураОтбора.Свойство(ИмяСвойстваОтбора);
	
	// Нет такого свойства - не работаем
	СтатьяОтсутствуетВСтроке = ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("СтатьяБюджета") = неопределено;
	
	//
	КнопкаУправления = КроссТаблицыУХКлиентСервер.ПолучитьКнопкуУправленияЛимитированиемСтроки(ОписаниеКТ, Форма);
	
	//
	Если (СтатьяОтсутствуетВСтроке ИЛИ КнопкаУправления = неопределено) И ОтборПоКонтролируемымСтатьямУстановлен Тогда
		
		// Сбрасываем отборы
		СтруктураОтбора.Удалить(ИмяСвойстваОтбора);
		Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
		Если НЕ СтатьяОтсутствуетВСтроке Тогда
			ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета");
			УстановитьПараметрВыбораУровеньКонтроляСтатьиБюджета(Элементы[ИмяЭлемента], Ложь);
		КонецЕсли;
		КнопкаУправления.Пометка = Ложь;
		
		КроссТаблицыУХКлиентСервер.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
		
		Возврат;
		
	КонецЕсли;
	
	Если СтатьяОтсутствуетВСтроке Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи Тогда
		ЭтоУстановкаОтбора = Истина;
	Иначе
		ЭтоУстановкаОтбора = НЕ КнопкаУправления.Пометка;
	КонецЕсли;
	
	КнопкаУправления.Пометка = ЭтоУстановкаОтбора;
	
	Если ЭтоУстановкаОтбора Тогда
		
		ЗаполнитьУровеньКонтроляСтатьиБюджета(ОписаниеКТ, Форма);
		СтруктураОтбора.Вставить(ИмяСвойстваОтбора, Перечисления.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам);
		
	Иначе
		
		// сбрасываем отбор строк
		Если ОтборПоКонтролируемымСтатьямУстановлен Тогда
			СтруктураОтбора.Удалить(ИмяСвойстваОтбора);
		КонецЕсли;
		
	КонецЕсли; 
	
	Элементы[ОписаниеКТ.Элементы.КроссТаблица].ОтборСтрок = Новый ФиксированнаяСтруктура(СтруктураОтбора);
	
	// Установка параметра отбора статьи бюджета
	ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета");
	УстановитьПараметрВыбораУровеньКонтроляСтатьиБюджета(
		Элементы[ИмяЭлемента], ЭтоУстановкаОтбора, 
		ВидБюджета(Объект.Предназначение), Объект.ПериодОтчета);
	
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, Ложь);
	
КонецПроцедуры

// Процедура переносит данные из табличной части объекта в реквизит кросс-таблицы
//
// Параметры:
//	ДокументОбъект			 - ДокументОбъект	- Объект документа, из которого считываются данные
//  ОписаниеКТ				 - Структура		- Описание кросс-таблицы
//  Форма                    - УправляемаяФорма - Форма в которой есть кросс-таблица
//
Процедура ПрочитатьДанныеОбъектаВКроссТаблицу(ДокументОбъект, ОписаниеКТ, Форма, КроссТаблицаУжеЗаполнена = Ложь) экспорт
	
	Если НЕ КроссТаблицаУжеЗаполнена Тогда
	
		ЗаполнитьКроссТаблицуИзТаблицы(
			Форма[ОписаниеКТ.Реквизиты.КроссТаблица],
			Форма[ОписаниеКТ.Реквизиты.Расшифровка],
			ДокументОбъект[ОписаниеКТ.ИмяТабличнойЧасти],
			ОписаниеКТ,
			Форма[ОписаниеКТ.Реквизиты.Периоды]);
			
		// 
		Если (ОписаниеКТ.Схема.ЭтоВводЛимитов ИЛИ ОписаниеКТ.Схема.ЭтоРезервирование)
			И ПолучитьРасположениеАналитики(ОписаниеКТ, "СтатьяБюджета") = "ВСтроке" Тогда
			ЗаполнитьУровеньКонтроляСтатьиБюджета(ОписаниеКТ, Форма);
		КонецЕсли;
		
	КонецЕсли;
		
	КроссТаблицыУХКлиентСервер.РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма);
	
	КроссТаблицыУХКлиентСервер.РассчитатьНомерСтрокиКроссТаблицы(ОписаниеКТ, Форма);
	
	// Заполняем дополнительные реквизиты аналитик статьи бюджета движения ресурсов
	ИнициализироватьЗначенияДопРеквизитовКТ(ОписаниеКТ, Форма, ДокументОбъект.Предназначение);
	
КонецПроцедуры

//
Функция Новый_КомандаКТ(Имя, ИмяДействия, Действие = неопределено, Заголовок = "", Подсказка="", ИзменяетСохраняемыеДанные = Ложь) экспорт
	
	КомандаКТ = Новый Структура("Имя, ИмяДействия, Заголовок, Подсказка, Действие, ИзменяетСохраняемыеДанные", Имя, ИмяДействия, Заголовок, Подсказка, Действие,ИзменяетСохраняемыеДанные);
	Если Действие = неопределено Тогда
		КомандаКТ.Действие = "Подключаемый_ОбщаяКомандаУправленияКТ";
	КонецЕсли;
	
	КомандаКТ.Вставить("ДопСвойства", Новый Структура);
	
	Возврат КомандаКТ;
	
КонецФункции

// Функция возвращает структуру с ключевыми аналитиками документа ОперПлан
Функция АналитикиШапкиВСтруктуру(ОписаниеКТ, ДанныеШапки) Экспорт
	
	Результат = Новый Структура;
	Для Каждого ИмяАналитики Из ОписаниеКТ.Схема.Аналитики.мШапка Цикл
		
		Если НЕ ОписаниеКТ.Схема.СтруктураАналитик.Свойство(ИмяАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеАналитики = ОписаниеКТ.Схема.СтруктураАналитик[ИмяАналитики];
		ОписаниеРеквизита = ОписаниеКТ.Схема.РеквизитПоАналитике[ОписаниеАналитики.Аналитика];
		Если ОписаниеРеквизита = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(ИмяАналитики, ДанныеШапки[ОписаниеРеквизита.ИмяРеквизитаШапки]);
		
	КонецЦикла;
	
	Если ДанныеШапки.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование
		И ДанныеШапки.РежимВводаДокументаПланирования > 0  Тогда // 1-корректировка; 2-выделение нового из существующего
		Результат.Вставить("ДокументРезервирования", ДанныеШапки.ДокументПланирования);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура - Обновить кросс таблицу при изменении режима ввода документа планирования
//
// Параметры:
//  ОписаниеКТ	 - 	Структура - Описание кросс-таблицы
//  Форма		 - 	УправляемаяФорма - Форма документа 
//
Процедура ОбновитьКроссТаблицуПриИзмененииРежимаВводаДокументаПланирования(ОписаниеКТ, Форма) Экспорт
	
	Объект = Форма.Объект;
	
	ПредыдущийЭтоПеренос = ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования;
	Документы.ОперативныйПлан.ОбновитьСхемуПриИзмененииРежимаВводаДокументаПланирования(ОписаниеКТ.Схема, Объект);
	ТекущийЭтоПеренос = ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования;
	
	ТребуетсяПересчетИзменение = ПредыдущийЭтоПеренос <> ТекущийЭтоПеренос;
	
	// Кнопки управления видимостью ресурсов и показателей
	СоздатьЭлементыУправленияВидимостьюРесурсов(ОписаниеКТ, Форма);
	
	// Видимость колонки
	Для каждого КлючЗначениеПоказатель Из ОписаниеКТ.Схема.Показатели Цикл
		ОписаниеПоказателя = КлючЗначениеПоказатель.Значение;
		КроссТаблицыУХКлиентСервер.УстановитьВидимостьКолонкиПоказателя(Форма, ОписаниеКТ, ОписаниеПоказателя, ОписаниеПоказателя.Видимость);
	КонецЦикла;
	
	Поля = Новый Массив;
	Поля.Добавить(ОписаниеКТ.Схема.Поля.СуммаИзменение);
	Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
		Поля.Добавить(ОписаниеКТ.Схема.Поля.КоличествоИзменение);
	КонецЕсли;
	
	Если ТребуетсяПересчетИзменение = ИСТИНА Тогда
		// Изменить знак ресурса Изменение
		
		Периоды = Форма[ОписаниеКТ.Реквизиты.Периоды];
		КроссТаблица = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
		Для Каждого СтрокаКТ Из КроссТаблица Цикл
			Для Каждого ОписаниеПериода Из Периоды Цикл
				
				Для Каждого Поле Из Поля Цикл
					ИмяРеквизита = ОписаниеКТ.Схема.Поля.СуммаИзменение.ПрефиксреквизитаКолонки + ОписаниеПериода.ИмяКолонки;
					СтрокаКТ[ИмяРеквизита] = -СтрокаКТ[ИмяРеквизита];
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПризнакИспользованияХарактеристик(МассивСсылок)
	
	Результат = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.НеИспользовать)
	|			ТОГДА ЛОЖЬ
	|		КОГДА Номенклатура.ИспользованиеХарактеристик = ЗНАЧЕНИЕ(Перечисление.ВариантыИспользованияХарактеристикНоменклатуры.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ХарактеристикиИспользуются
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка В(&МассивСсылок)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Номенклатура, Выборка.ХарактеристикиИспользуются);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Добавляет период в таблицу периодов
// 
// Параметры:
//  ТаблицаПериодов				 - Таблица значений			 - Таблица периодов
//  ДобавляемыйПериод			 - СправочникСсылка.Периоды	 - Флаг определяет, создавать ли элемент формы
Процедура ДобавитьВТаблицуПериодов(ТаблицаПериодов, ДобавляемыйПериод)
	
	СтрокаПериод = ТаблицаПериодов.Найти(ДобавляемыйПериод, "Период");
	Если СтрокаПериод = неопределено Тогда
		СтрокаПериод = ТаблицаПериодов.Добавить();
		СтрокаПериод.Период = ДобавляемыйПериод;
		СтрокаПериод.ИмяКолонки = "12345678-1234-1234-1234-123456789012";
		СтрокаПериод.НомерКолонки = -1;
		
		РеквизитыПериода = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДобавляемыйПериод, "Наименование, Периодичность, ДатаНачала");
		Если РеквизитыПериода.Периодичность = Перечисления.Периодичность.Месяц Тогда
			СтрокаПериод.Заголовок = Формат(РеквизитыПериода.ДатаНачала, НСтр("ru = 'ДФ=''МММ гг'''"));
		Иначе
			СтрокаПериод.Заголовок = РеквизитыПериода.Наименование;
		КонецЕсли;
		
		СтрокаПериод.Активная = Истина;
	Иначе
		СтрокаПериод.Активная = Истина;
	КонецЕсли;
	
КонецПроцедуры

// нумерует активные периоды, а новым периодам присваивает ИмяКолонки
// 
// Параметры:
//  ТаблицаПериодов				 - Таблица значений			 - Таблица периодов
Процедура ОбработатьАктивныеПериоды(ТаблицаПериодов)
	
	//
	АктивныеПериоды = ТаблицаПериодов.НайтиСтроки(Новый Структура("Активная", Истина));
	
	//
	МассивПериодов = ТаблицаПериодов.Скопировать(АктивныеПериоды).ВыгрузитьКолонку("Период");
	
	ДатыНачала = ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивПериодов, "ДатаНачала");
	
	Для Каждого Период Из АктивныеПериоды Цикл
		Период.ДатаНачала = ДатыНачала[Период.Период];
		Если Период.ИмяКолонки = "12345678-1234-1234-1234-123456789012" Тогда
			Период.ИмяКолонки = СтрЗаменить(Строка(Новый УникальныйИдентификатор),"-","_");
		КонецЕсли;
	КонецЦикла; 
	
	//
	ТаблицаПериодов.Сортировать("Активная, ДатаНачала");
	
	//
	АктивныеПериоды = ТаблицаПериодов.НайтиСтроки(Новый Структура("Активная", Истина));
	
	ТекущийПериод = 1;
	Для Каждого Строка_ Из АктивныеПериоды Цикл
		Строка_.НомерКолонки = ТекущийПериод;
		ТекущийПериод = ТекущийПериод + 1;
	КонецЦикла; 
	
КонецПроцедуры

Процедура СброситьУправлениеВидимостью(ОписаниеКТ, Форма)
	
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Показатели Цикл
		
		ОписаниеПоказателя = КлючЗначение.Значение;
		
		Форма.Элементы[ОписаниеПоказателя.УправлениеВидимостью.ИмяЭлемента].Пометка = ОписаниеПоказателя.Видимость;
	
	КонецЦикла; 
	
КонецПроцедуры

Функция ИмяРеквизитаОписанияКТ()
	Возврат "КроссТаблицыФормы";
КонецФункции

Процедура ОбновитьИнформациюОКроссТаблицахФормы(ОписаниеКТ, Форма)
	
	// Замещаем реквизит формы КроссТаблицыФормы
	ИмяРеквизита = ИмяРеквизитаОписанияКТ();
	ВременнаяСтруктура = Новый Структура(Форма[ИмяРеквизита]);
	ВременнаяСтруктура.Вставить(ОписаниеКТ.Идентификатор, ОписаниеКТ);
	Форма[ИмяРеквизита] = Новый ФиксированнаяСтруктура(ВременнаяСтруктура);
	
КонецПроцедуры

// Процедура создает команду и элемент формы(кнопку), управляющие видимостью показателя в кросс-таблице
Процедура СоздатьКнопкуУправленияВидимостьюПоказателя(ОписаниеКТ, ОписаниеПоказателя, Форма)
	
	// Команда
	УправлениеВидимостью = ОписаниеПоказателя.УправлениеВидимостью;
	
	ИмяКоманды = УправлениеВидимостью.ИмяКоманды;
	
	Команда = Форма.Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.ИзменяетСохраняемыеДанные = Ложь;
		Команда.Действие = "Подключаемый_ОбщаяКомандаУправленияКТ";
	
	КонецЕсли; 
	Команда.Заголовок = УправлениеВидимостью.Заголовок;
	Команда.Подсказка = УправлениеВидимостью.Подсказка;
	
	// Элемент формы КроссТаблицаКнопкаДоступноИсходноеЗначение
	ИмяЭлемента = УправлениеВидимостью.ИмяЭлемента;
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если Элемент = неопределено Тогда
		
		ГруппаУправленияВидимостью = Форма.Элементы[ОписаниеКТ.УправлениеВидимостьюКолонок.ГруппаУправленияВидимостьюПоказателей];
		
 		Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаУправленияВидимостью);
     	Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
     	Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Пометка = ОписаниеПоказателя.Видимость;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура создает команду и элемент формы(кнопку), управляющие видимостью показателя в кросс-таблице
Процедура СоздатьКомандуУправленияВидимостьюРесурса(ОписаниеКТ, ОписаниеРесурса, Форма)
	
	// Команда
	УправлениеВидимостью = ОписаниеРесурса.УправлениеВидимостью;
	
	ИмяКоманды = УправлениеВидимостью.ИмяКоманды;
	
	Команда = Форма.Команды.Найти(ИмяКоманды);
	Если Команда = Неопределено Тогда
		
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Заголовок = УправлениеВидимостью.Заголовок;
		Команда.Подсказка = УправлениеВидимостью.Подсказка;
		Команда.ИзменяетСохраняемыеДанные = Ложь;
		Команда.Действие = "Подключаемый_ОбщаяКомандаУправленияКТ";
	
	КонецЕсли; 
	
	// Элемент формы КроссТаблицаКнопкаДоступноИсходноеЗначение
	
	ИмяЭлемента = УправлениеВидимостью.ИмяЭлемента;
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	
	Если Элемент = неопределено Тогда
		
		ГруппаУправленияВидимостью = Форма.Элементы[ОписаниеКТ.УправлениеВидимостьюКолонок.ГруппаУправленияВидимостьюРесурсов];
		
 		Элемент = Форма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), ГруппаУправленияВидимостью);
     	Элемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
     	Элемент.ИмяКоманды = ИмяКоманды;
		Элемент.Пометка = ОписаниеРесурса.Видимость;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СоздатьЭлементыЭкспрессРасшифровки(ОписаниеКТ, Форма)
	
	Элементы = Форма.Элементы;
	
	ЭлементВладелец = Форма.Элементы[ОписаниеКТ.Элементы.ГруппаРазмещения];
	
	Таблица = Форма.Элементы.Найти(ОписаниеКТ.Элементы.Расшифровка);
	
	Если Таблица <> неопределено Тогда
		УдалитьПодчиненныеЭлементы(Таблица.ПодчиненныеЭлементы, Элементы);
	КонецЕсли;
	
	Если Таблица = неопределено Тогда
	
		// Создаем таблицу
		Таблица = Элементы.Добавить(ОписаниеКТ.Элементы.Расшифровка, Тип("ТаблицаФормы"),	ЭлементВладелец);
		Таблица.ПутьКДанным = ОписаниеКТ.Реквизиты.Расшифровка;
		// События
		Таблица.УстановитьДействие("ПриНачалеРедактирования", "Подключаемый_Расшифровка_ПриНачалеРедактирования");
		Таблица.УстановитьДействие("ПриИзменении", "Подключаемый_Расшифровка_ПриИзменении");
		Таблица.УстановитьДействие("ПередОкончаниемРедактирования", "Подключаемый_Расшифровка_ПередОкончаниемРедактирования");
		Таблица.УстановитьДействие("ПередУдалением", "Подключаемый_Расшифровка_ПередУдалением");
		Таблица.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_Расшифровка_ПередНачаломИзменения");
		// Видимость
		Элементы[ОписаниеКТ.Элементы.Расшифровка].Видимость = Ложь;
		
	КонецЕсли;
	
	НевидимыеРеквизиты = Новый Массив;
	НевидимыеРеквизиты.Добавить("ИДСтроки");
	НевидимыеРеквизиты.Добавить("ИДПериода");
	НевидимыеРеквизиты.Добавить("НомерСтроки");
	
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		ВидАналитики = "ВидАналитики"+Сч;
		НевидимыеРеквизиты.Добавить(ВидАналитики);
		НевидимыеРеквизиты.Добавить(ВидАналитики+"ТипЗначения");
		НевидимыеРеквизиты.Добавить(ВидАналитики+"СвязиАналитик");
		НевидимыеРеквизиты.Добавить(ВидАналитики+"Наименование");
		НевидимыеРеквизиты.Добавить(ВидАналитики+"ПараметрыВыбора");
	КонецЦикла;
	
	НевидимыеРеквизиты.Добавить("УровеньКонтроляСтатьиБюджета");
	НевидимыеРеквизиты.Добавить("ИсходнаяНоменклатура");
	НевидимыеРеквизиты.Добавить("ЭтоКатегорияНоменклатуры");
	НевидимыеРеквизиты.Добавить("Коэффициент");
	НевидимыеРеквизиты.Добавить("СтарыйКоэффициент");
	
	//
	ИмяКолонкиТерминатор = ИмяКолонкиТерминатор();
	
	// Добавляем колонки таблицы экспресс-расшифровки
	СуществующиеРеквизитыРасшифровки = Форма.ПолучитьРеквизиты(ОписаниеКТ.Реквизиты.Расшифровка);
	Для каждого Реквизит Из СуществующиеРеквизитыРасшифровки Цикл
		
		Если Реквизит.Имя = ИмяКолонкиТерминатор Тогда
			РеквизитКолонкаТерминатор = Реквизит;
			Продолжить;
		КонецЕсли;
		
		//
		Элемент = Элементы.Добавить(Реквизит.Путь + "_"+Реквизит.Имя, Тип("ПолеФормы"), Таблица);
		Элемент.ПутьКДанным = Реквизит.Путь + "."+Реквизит.Имя;
		Если Реквизит.Имя <> "НомерСтроки" И Реквизит.Имя <> ИмяКолонкиТерминатор Тогда
			Элемент.Вид = ВидПоляФормы.ПолеВвода;
		КонецЕсли;
		
		Если Реквизит.Имя = "ПриходРасход" Тогда
			ИнфоПриходРасход = ОписаниеКТ.Схема.СтруктураАналитик.ПриходРасход;
			Если ИнфоПриходРасход.Свойство("ТолькоПросмотр") И ИнфоПриходРасход.ТолькоПросмотр Тогда
				Элемент.ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Реквизит.Имя = "СтатьяБюджета" Тогда
			Элемент.Заголовок = НСтр("ru='Статья бюджета'");
		КонецЕсли;
		
		Если Реквизит.Имя = "ДоговорКонтрагента" Тогда
			Элемент.Заголовок = НСтр("ru='Договор контрагента'");
		КонецЕсли;
		
		Если Реквизит.Имя = "ЕдиницаИзмерения" Тогда
			Элемент.Заголовок = НСтр("ru='Ед.изм.'");
		КонецЕсли;
		
		Если НевидимыеРеквизиты.Найти(Реквизит.Имя) <> неопределено Тогда
			Элемент.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла; 	
	
	Если РеквизитКолонкаТерминатор <> неопределено Тогда
		
		ФормыУХ.СоздатьПолеФормы(Элементы, 
			РеквизитКолонкаТерминатор.Путь + "_"+ИмяКолонкиТерминатор, "",
			РеквизитКолонкаТерминатор.Путь + "."+РеквизитКолонкаТерминатор.Имя,, Таблица, , 
			Новый Структура("ТолькоПросмотр, ПоложениеЗаголовка", Истина, ПоложениеЗаголовкаЭлементаФормы.Нет));
		
	КонецЕсли;
	
	// Итоги
	Таблица.Подвал = Истина;
	Для каждого КлючЗначениеПоле Из ОписаниеКТ.Схема.Поля Цикл
	
		ОписаниеПоля = КлючЗначениеПоле.Значение;
		ОписаниеРесурса = ОписаниеКТ.Схема.Ресурсы[ОписаниеПоля.ИмяРесурса];
		ОписаниеПоказателя = ОписаниеКТ.Схема.Показатели[ОписаниеПоля.ИмяПоказателя];
		
		ЭлементФормы = Элементы[ОписаниеКТ.Реквизиты.Расшифровка+"_"+ОписаниеПоля.ИмяРеквизитаТЧ];
		ЭлементФормы.Видимость = ОписаниеРесурса.Видимость И ОписаниеПоказателя.Видимость;
		
		ЭлементФормы.ГоризонтальноеПоложениеВПодвале = ГоризонтальноеПоложениеЭлемента.Право;
		ЭлементФормы.ПутьКДаннымПодвала = ОписаниеКТ.Реквизиты.РасшифровкаИтоги + "[0]."+ОписаниеПоля.ИмяРеквизитаТЧ;
		
		ЭлементФормы.Формат = ОписаниеРесурса.Формат;
		ЭлементФормы.Ширина = ОписаниеРесурса.ШиринаЭлемента;
		
		ЭлементФормы.Заголовок = ОписаниеРесурса.Заголовок + " ("+ОписаниеПоказателя.Заголовок+")";
		ЭлементФормы.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементФормы.ТолькоПросмотр = ОписаниеПоказателя.ТолькоПросмотр;
		
		Для каждого КлючЗначение Из ОписаниеПоля.СтруктураДействий Цикл
			ЭлементФормы.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение + "ВРасшифровке");
		КонецЦикла; 
		
	КонецЦикла; 
		
	// Команда локальной расшифровки
	ИмяДействия = "УправлениеРасшифровкой";
	ИмяКоманды = ОписаниеКТ.Реквизиты.КроссТаблица+"_"+ИмяДействия;
	
	Команда = КроссТаблицыУХ.Новый_КомандаКТ(ИмяКоманды, ИмяДействия);
	Команда.ДопСвойства.Вставить("ИмяКнопкиКТ", 		 	Элементы.КроссТаблицаПоказатьСкрытьРасшифровку.Имя);
	Команда.ДопСвойства.Вставить("ИмяКнопкиКТРасшифровка",	Элементы.КроссТаблицаКнопкаРасшифровка.Имя);
	Команда.ДопСвойства.Вставить("ИмяКнопкиРасшифровки",	ОписаниеКТ.Элементы.КроссТаблица+"_УправлениеВидимостьюРасшифровки");
	Команда.ДопСвойства.Вставить("ИмяЭлементаРасшифровка",	ОписаниеКТ.Элементы.Расшифровка);
	Команда.ДопСвойства.Вставить("ГруппаРазмещения",		ОписаниеКТ.Элементы.ГруппаРазмещения);
	
	КроссТаблицыУХ.ДобавитьКоманду(ОписаниеКТ, Форма, Команда);
	
	// Добавить кнопку управления видимостью расшифровки
	Если Форма.Элементы.Найти(Команда.ДопСвойства.ИмяКнопкиРасшифровки) = неопределено Тогда
		Кнопка = Элементы.Добавить(
			Команда.ДопСвойства.ИмяКнопкиРасшифровки, 
			Тип("КнопкаФормы"), 
			Форма.Элементы[ОписаниеКТ.Элементы.Расшифровка].КоманднаяПанель);
		
	 	Кнопка.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
	 	Кнопка.ИмяКоманды = Команда.Имя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьРеквизитыКроссТаблицы(ОписаниеКТ, Форма, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, СуществующиеРеквизиты)
		
	ДобавитьРеквизиты(ОписаниеКТ, ОписаниеКТ.Схема.Аналитики.мСтрока, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, ОписаниеКТ.Реквизиты.КроссТаблица, СуществующиеРеквизиты.КроссТаблица);
	
	// Добавление итогов ресурса по строке и таблице
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
		
		ОписаниеПоля = КлючЗначение.Значение;
		ОписаниеРесурса = ОписаниеКТ.Схема.Ресурсы[ОписаниеПоля.ИмяРесурса];
		
		//
		ОписаниеТипа = ОбщегоНазначения.ОписаниеТипаЧисло(
			ОписаниеРесурса.Разрядность,
			ОписаниеРесурса.РазрядностьДробнойЧасти,
			ОписаниеРесурса.ЗнакЧисла);
		
		
		// Добавляем итог по строке
		ИмяИскомогоРеквизита = ОписаниеПоля.ИмяРеквизитаТЧ;
		Если СуществующиеРеквизиты.КроссТаблица[ИмяИскомогоРеквизита] = неопределено Тогда
			ДобавляемыеРеквизиты.Добавить(
				Новый РеквизитФормы(ИмяИскомогоРеквизита, ОписаниеТипа, ОписаниеКТ.Реквизиты.КроссТаблица));
		КонецЕсли;
			
		// добавить итог ресурса по всей таблице
		ПрефиксРеквизита = СтрШаблон(НСтр("ru='Итого %1'"), ОписаниеПоля.СвойстваЭлемента.Заголовок);

		ИмяИскомогоРеквизита = СтрЗаменить(ОписаниеКТ.Реквизиты.КроссТаблица + ОписаниеПоля.ПрефиксРеквизитаКолонки,".","_")+"Итог";
		Если СуществующиеРеквизиты.Шапка[ИмяИскомогоРеквизита] = неопределено Тогда
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяИскомогоРеквизита, ОписаниеТипа, , ПрефиксРеквизита));
		КонецЕсли; 
			
	КонецЦикла; 
	
	// НомерСтроки
	ИмяИскомогоРеквизита = "НомерСтроки";
	Если СуществующиеРеквизиты.КроссТаблица[ИмяИскомогоРеквизита] = неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяИскомогоРеквизита,
			ОбщегоНазначения.ОписаниеТипаЧисло(6,0,ДопустимыйЗнак.Неотрицательный),
			ОписаниеКТ.Реквизиты.КроссТаблица));
	КонецЕсли;
	
	// СтрокаПуста для фильтрации незаполненных строк при нажатии на кнопку показать только заполненные
	ИмяИскомогоРеквизита = "СтрокаПуста";
	Если СуществующиеРеквизиты.КроссТаблица[ИмяИскомогоРеквизита] = неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяИскомогоРеквизита,
			Новый ОписаниеТипов("Булево"), ОписаниеКТ.Реквизиты.КроссТаблица));
	КонецЕсли;
	
	// Реквизит для связи строки с расшифровкой
	ИмяИскомогоРеквизита = "ИДСтроки";
	Если СуществующиеРеквизиты.КроссТаблица[ИмяИскомогоРеквизита] = неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяИскомогоРеквизита, 
			Новый ОписаниеТипов("УникальныйИдентификатор"), ОписаниеКТ.Реквизиты.КроссТаблица));
	КонецЕсли;
	
КонецПроцедуры

// Процедура добавляет описание реквизитов формы "Таблица значений" с колонками, необходимыми для обработки расшифровки кросс-таблицы
//
// Параметры:
//  Форма  					- УправляемаяФорма - форма в которой необходимо создать таблицу периодов
//	ОписаниеКТ				- Структура - Описание кросс-таблицы
//  ИмяТаблицыРасшифровки	- Строка - Имя, с которым будет создан реквизит формы таблица
//
Процедура ДобавитьРеквизитыЭкспрессРасшифровки(Знач ОписаниеКТ, Форма, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, СуществующиеРеквизиты)
	
	ТипНомерСтроки = ОбщегоНазначения.ОписаниеТипаЧисло(6, 0, ДопустимыйЗнак.Неотрицательный);
	ТипИД = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	Если СуществующиеРеквизиты.Шапка[ОписаниеКТ.Реквизиты.Расшифровка] <> неопределено Тогда
		// Удаляем существующие реквизиты формы
		Для Каждого КлючЗначение Из СуществующиеРеквизиты.Расшифровка Цикл
			УдаляемыеРеквизиты.Добавить(ОписаниеКТ.Реквизиты.Расшифровка+"." + КлючЗначение.Значение.Имя);
		КонецЦикла;
		
		// Удаляем существующие реквизиты формы итогов
		Для Каждого КлючЗначение Из СуществующиеРеквизиты.РасшифровкаИтоги Цикл
			УдаляемыеРеквизиты.Добавить(ОписаниеКТ.Реквизиты.РасшифровкаИтоги+"." + КлючЗначение.Значение.Имя);
		КонецЦикла;
		
	КонецЕсли;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("НомерСтроки",	ТипНомерСтроки, ОписаниеКТ.Реквизиты.Расшифровка, "№"));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИДСтроки", 		ТипИД, 			ОписаниеКТ.Реквизиты.Расшифровка));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИДПериода", 		ТипИД, 			ОписаниеКТ.Реквизиты.Расшифровка));
	
	ДобавитьРеквизиты(ОписаниеКТ, ОписаниеКТ.Схема.Аналитики.мРасшифровка, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, ОписаниеКТ.Реквизиты.Расшифровка);
	
	// Добавление ресурсов
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
		
		ОписаниеПоля = КлючЗначение.Значение;
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(ОписаниеПоля.ИмяРеквизитаТЧ, ОписаниеПоля.ТипЭлемента, ОписаниеКТ.Реквизиты.Расшифровка));
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(ОписаниеПоля.ИмяРеквизитаТЧ, ОписаниеПоля.ТипЭлемента, ОписаниеКТ.Реквизиты.РасшифровкаИтоги));
			
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДобавитьДопРеквизитыНоменклатуры(ДобавляемыеРеквизиты, ИмяРеквизитаВладельца)
	
	// ИсходнаяНоменклатура
	Реквизит = Новый РеквизитФормы(
		"ИсходнаяНоменклатура", 
		Метаданные.ОпределяемыеТипы.АналитикаПланированияНоменклатура.Тип,
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// ЕИ
	Реквизит = Новый РеквизитФормы(
		"ЕдиницаИзмерения", 
		Метаданные.ОпределяемыеТипы.ЕдиницыИзмерения.Тип,
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// Коэффициент
	Реквизит = Новый РеквизитФормы(
		"Коэффициент", 
		ОбщегоНазначения.ОписаниеТипаЧисло(10,3,ДопустимыйЗнак.Неотрицательный),
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// Коэффициент старой единицы измерения
	Реквизит = Новый РеквизитФормы(
		"СтарыйКоэффициент", 
		ОбщегоНазначения.ОписаниеТипаЧисло(10,3,ДопустимыйЗнак.Неотрицательный),
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// Цена
	Реквизит = Новый РеквизитФормы(
		"Цена", 
		ОбщегоНазначения.ОписаниеТипаЧисло(15,2,ДопустимыйЗнак.Неотрицательный),
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// ЭтоКатегорияНоменклатуры
	Реквизит = Новый РеквизитФормы(
		"ЭтоКатегорияНоменклатуры", 
		Новый ОписаниеТипов("Булево"),
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	// ХарактеристикиИспользуются
	Реквизит = Новый РеквизитФормы(
		"ХарактеристикиИспользуются", 
		Новый ОписаниеТипов("Булево"),
		ИмяРеквизитаВладельца);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
КонецПроцедуры // ДобавитьДопРеквизитыНоменклатуры

// Функция возвращает реквизиты формы в виде соответствия
Функция ПолучитьСуществующиеРеквизитыФормы(Форма, Путь = "")
	
	Результат = Новый Соответствие;
	СуществующиеРеквизиты = Форма.ПолучитьРеквизиты(Путь);
	Для Каждого СуществующийРеквизит Из СуществующиеРеквизиты Цикл
		Результат.Вставить(СуществующийРеквизит.Имя, СуществующийРеквизит);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьРеквизиты(ОписаниеКТ, МассивДобавляемыхАналитик, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, ИмяРеквизитаВладельца, Знач СуществующиеРеквизиты = неопределено)
	
	Если СуществующиеРеквизиты = неопределено Тогда
		СуществующиеРеквизиты = Новый Соответствие;
	КонецЕсли;
	
	Аналитики = Справочники.АналитикиОперативногоПланирования;
	//
	Для Каждого СтрокаАналитики Из МассивДобавляемыхАналитик Цикл
		
		Строка = ОписаниеКТ.Схема.СтруктураАналитик[СтрокаАналитики];
		
		//
		ОписаниеРеквизита = ОписаниеКТ.Схема.РеквизитПоАналитике[Строка.Аналитика];
		Если ОписаниеРеквизита = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СуществующийРеквизит = СуществующиеРеквизиты[ОписаниеРеквизита.Имя];
		
		// Если такой реквизит есть, но его тип отличается, то удалить его
		Если СуществующийРеквизит <> неопределено И СуществующиеРеквизиты[ОписаниеРеквизита.Имя].ТипЗначения <> ОписаниеРеквизита.Тип Тогда
			УдаляемыеРеквизиты.Добавить(ИмяРеквизитаВладельца+"."+ОписаниеРеквизита.Имя);
		КонецЕсли;
		
		// Если такого реквизита нет или его тип отличается, то добавить реквизит с новым типом
		Если СуществующийРеквизит = неопределено ИЛИ СуществующиеРеквизиты[ОписаниеРеквизита.Имя].ТипЗначения <> ОписаниеРеквизита.Тип Тогда
			Реквизит = Новый РеквизитФормы(ОписаниеРеквизита.Имя, ОписаниеРеквизита.Тип, ИмяРеквизитаВладельца);
			ДобавляемыеРеквизиты.Добавить(Реквизит);
		КонецЕсли;
		
		Если Строка.Аналитика = Аналитики.СтатьяБюджета Тогда
			ИмяРеквизита = "УровеньКонтроляСтатьиБюджета";
			Если СуществующиеРеквизиты[ИмяРеквизита] = неопределено Тогда
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, 
					Новый ОписаниеТипов("ПеречислениеСсылка.УровниКонтроляЛимитовСтатей"),
					ИмяРеквизитаВладельца));
			КонецЕсли;
			//
			ШаблонВидаАналитики = "ВидАналитики%1";
			Для НомерАналитики = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
				ИмяРеквизита = СтрШаблон(ШаблонВидаАналитики, НомерАналитики);
				Если СуществующиеРеквизиты[ИмяРеквизита] = неопределено Тогда
					АналитикиСтатейБюджетовУХ.ДобавитьРеквизитыВидаАналитики(ДобавляемыеРеквизиты, ИмяРеквизита, ИмяРеквизитаВладельца);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли; 
		
		Если Строка.Аналитика = Аналитики.Номенклатура Тогда
			ИмяРеквизита = "ЕдиницаИзмерения";
			Если СуществующиеРеквизиты[ИмяРеквизита] = неопределено Тогда
				ДобавитьДопРеквизитыНоменклатуры(ДобавляемыеРеквизиты, ИмяРеквизитаВладельца);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	// Терминатор
	ИмяРеквизита = ИмяКолонкиТерминатор();
	Если СуществующиеРеквизиты[ИмяРеквизита] = неопределено Тогда
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы(ИмяРеквизита, ОбщегоНазначения.ОписаниеТипаСтрока(1), ИмяРеквизитаВладельца, ""));
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьПодчиненныеЭлементы(КоллекцияПодчиненныхЭлементов, Элементы)
	
	МассивЭлементовКУдалению = Новый Массив;
	
	СформироватьСписокЭлементовКУдалению(КоллекцияПодчиненныхЭлементов, МассивЭлементовКУдалению);
	Для каждого Элемент Из МассивЭлементовКУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла; 

КонецПроцедуры
 
Функция ПолучитьМассивРеквизитовГруппыСтрок(МассивСтрок, СтруктураАналитик, ГруппаСтрок)
	
	Результат = Новый Массив;
	Для Каждого СтрокаАналитики Из МассивСтрок Цикл
		
		Строка = СтруктураАналитик[СтрокаАналитики];
		Если СтрЗаменить(ВРег(Строка.ГруппаСтрок), " ", "") = ГруппаСтрок Тогда
			Результат.Добавить(Строка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьСвязанныеСНоменклатуройЭлементы(ОписаниеКТ, ГруппаДополнительныхРеквизитов, Элемент, Элементы)
	
	// Номенклатура
	Элемент.Ширина = 24;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОбщийОбработчикИзмененияАналитик");
	
	//
	ОписаниеНоменклатуры = ОписаниеКТ.Схема.РеквизитПоАналитике[Справочники.АналитикиОперативногоПланирования.Номенклатура];
	
	ПрефиксЭлемента = ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Реквизит;
	
	// ИсходнаяНоменклатура
	ИмяИзмерения = "ИсходнаяНоменклатура";
	ИмяЭлемента = ПрефиксЭлемента+ИмяИзмерения;
	Элемент = ГруппаДополнительныхРеквизитов.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
	Если Элемент = неопределено Тогда
		  
		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаДополнительныхРеквизитов);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ОписаниеКТ.Реквизиты.КроссТаблица + "."+ИмяИзмерения;
		Элемент.Заголовок = НСтр("ru = 'Исходная номенклатура'");
		Элемент.ОтображатьВШапке = Истина;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Видимость = Ложь;
		
	КонецЕсли;
	
	// ЕИ
	ИмяИзмерения = "ЕдиницаИзмерения";
	ИмяЭлемента = ПрефиксЭлемента+ИмяИзмерения;
	Элемент = ГруппаДополнительныхРеквизитов.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
	Если Элемент = неопределено Тогда
		  
		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаДополнительныхРеквизитов);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ОписаниеКТ.Реквизиты.КроссТаблица + "."+ИмяИзмерения;
		Элемент.Заголовок = НСтр("ru = 'Ед. изм.'");
		Элемент.ОтображатьВШапке = Истина;
		Элемент.Ширина = 3;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.БыстрыйВыбор = Истина;
		Элемент.ИсторияВыбораПриВводе = ИсторияВыбораПриВводе.НеИспользовать;
		
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОбщийОбработчикИзмененияАналитик");
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_ОбщийОбработчикНачалаВыбораАналитик");
		
	КонецЕсли;
	
	// Коэффициент
	ИмяИзмерения = "Коэффициент";
	ИмяЭлемента = ПрефиксЭлемента+ИмяИзмерения;
	Элемент = ГруппаДополнительныхРеквизитов.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
	Если Элемент = неопределено Тогда
		  
		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаДополнительныхРеквизитов);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ОписаниеКТ.Реквизиты.КроссТаблица + "."+ИмяИзмерения;
		Элемент.ОтображатьВШапке = Истина;
		Элемент.Заголовок = НСтр("ru = 'К.'");
		Элемент.Ширина = 4;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Видимость = Ложь;
		
	КонецЕсли;
	
	// Цена
	ИмяИзмерения = "Цена";
	ИмяЭлемента = ПрефиксЭлемента+ИмяИзмерения;
	Элемент = ГруппаДополнительныхРеквизитов.ПодчиненныеЭлементы.Найти(ИмяЭлемента);
	Если Элемент = неопределено Тогда
		  
		Элемент = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ГруппаДополнительныхРеквизитов);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ОписаниеКТ.Реквизиты.КроссТаблица + "."+ИмяИзмерения;
		Элемент.ОтображатьВШапке = Истина;
		Элемент.Заголовок = НСтр("ru = 'Цена'");
		Элемент.Ширина = 7;
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ОбщийОбработчикИзмененияАналитик");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьНастройкуЭлементовАналитики(ОписаниеКТ, Элемент, Аналитика)
	
	Если Аналитика = Справочники.АналитикиОперативногоПланирования.СтатьяБюджета Тогда
		
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.Аналитика1 Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.Аналитика2 Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.Аналитика3 Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.Аналитика4 Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.Аналитика5 Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.Аналитика6 Тогда
		Элемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
	ИначеЕсли Аналитика = Справочники.АналитикиОперативногоПланирования.ПриходРасход Тогда
		
		Элемент.РастягиватьПоГоризонтали = Ложь;
		Элемент.Ширина = 4;
		
	КонецЕсли; 
	
КонецПроцедуры // ВыполнитьНастройкуЭлементовАналитики(Элементы.СтатьяБюджета, Аналитика.Ключ)()

Процедура СформироватьСписокЭлементовКУдалению(КоллекцияПодчиненныхЭлементов, МассивЭлементовКУдалению)

	Для каждого Элемент Из КоллекцияПодчиненныхЭлементов Цикл
		
		Если ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
		
			СформироватьСписокЭлементовКУдалению(Элемент.ПодчиненныеЭлементы, МассивЭлементовКУдалению);
		
		КонецЕсли; 
		
		МассивЭлементовКУдалению.Добавить(Элемент);
		
	КонецЦикла; 

КонецПроцедуры

Процедура ДобавитьКоманду(ОписаниеКТ, Форма, ОписаниеКоманды) экспорт

	Если НЕ ОписаниеКТ.Команды.Свойство(ОписаниеКоманды.Имя) Тогда
		
		//
		ОписаниеКТ.Команды.Вставить(ОписаниеКоманды.Имя, ОписаниеКоманды);
		
	КонецЕсли;
	
	Команда = Форма.Команды.Найти(ОписаниеКоманды.Имя);
	Если Команда = Неопределено Тогда
		
		Команда = Форма.Команды.Добавить(ОписаниеКоманды.Имя);
		ЗаполнитьЗначенияСвойств(Команда, ОписаниеКоманды);
	
	КонецЕсли; 
	
КонецПроцедуры
 
#Область НастройкаЭлементовАналитики

Процедура УстановитьПараметрыЭлементовАналитикКТ(ОписаниеКТ, Форма)
	
	//
	Аналитики = Справочники.АналитикиОперативногоПланирования;
	
	//
	СброситьСвязиПараметровВыбора(ОписаниеКТ, Форма, Аналитики.ДоговорКонтрагента);
	СброситьСвязиПараметровВыбора(ОписаниеКТ, Форма, Аналитики.СтатьяБюджета);
	СброситьСвязиПараметровВыбора(ОписаниеКТ, Форма, Аналитики.Номенклатура);
	СброситьСвязиПараметровВыбора(ОписаниеКТ, Форма, Аналитики.Характеристика);
	
	//
	УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма, 
		Аналитики.ДоговорКонтрагента, "Отбор.Владелец", 	Аналитики.Контрагент);
	УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма, 
		Аналитики.ДоговорКонтрагента, "Отбор.Организация", 	Аналитики.Организация);
	УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма, 
		Аналитики.ДоговорКонтрагента, "Отбор.ВалютаВзаиморасчетов", Аналитики.Валюта, "ВышеИлиНаОдномУровне");
	УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма,
		Аналитики.Характеристика, "Номенклатура", Аналитики.Номенклатура, "ВышеИлиНаОдномУровне"); // Отбор = "Номенклатура"
		
	// Параметры выбора
	Требуется = ОписаниеКТ.ТолькоЛимитируемыеСтатьи ИЛИ Форма.Элементы.КроссТаблицаКнопкаТолькоЛимитируемыеСтатьи.Пометка;
	Если Требуется Тогда
		Если ОписаниеКТ.ДанныеШапкиРасположеныВОбъекте Тогда
			ПутьВидБюджета = "Объект.Предназначение";
			ПутьПериодОтчета = "Объект.ПериодОтчета";
		Иначе
			ПутьВидБюджета = "Предназначение";
			ПутьПериодОтчета = "ПериодОтчета";
		КонецЕсли;
		
		УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма,
			Аналитики.СтатьяБюджета, "Отбор.ПараметрыЛимитирования_ВидБюджета", ПутьВидБюджета);
		УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма,
			Аналитики.СтатьяБюджета, "Отбор.ПараметрыЛимитирования_Период", ПутьПериодОтчета);
	КонецЕсли;
	
	//
	РасположениеПриходРасход = ПолучитьРасположениеАналитики(ОписаниеКТ, "ПриходРасход");
	РасположениеСтатьи = ПолучитьРасположениеАналитики(ОписаниеКТ, "СтатьяБюджета");
	Если РасположениеПриходРасход = "ВШапке" И (РасположениеСтатьи = "ВШапке" ИЛИ РасположениеСтатьи = "ВСтроке" ИЛИ РасположениеСтатьи = "ВРасшифровке") Тогда
		
		// Создать/получить реквизит формы для списка допустимых значений
		ИмяРеквизита = СоздатьПолучитьРеквизитФормыДляСвязиПараметровВыбора(ОписаниеКТ, Форма, "ПриходРасход", Тип("ПеречислениеСсылка.ВидыДвиженийПриходРасход"));
		
		УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма, 
			Аналитики.СтатьяБюджета,	  "Отбор.ПриходРасход",	Аналитики.ПриходРасход, "Выше",,ИмяРеквизита);
		
	Иначе
		УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма, 
			Аналитики.СтатьяБюджета,	  "Отбор.ПриходРасход",	Аналитики.ПриходРасход, "Выше");
	КонецЕсли;
	
	//
	УстановитьОграничениеТипов(ОписаниеКТ, Форма, Аналитики.СтатьяБюджета);
	
	// События элементов
	События = Новый Структура("ПриИзменении", "Подключаемый_ОбщийОбработчикИзмененияАналитик");
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.СтатьяБюджета, События);
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Аналитика1, События);
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Аналитика2, События);
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Аналитика3, События);
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Аналитика4, События);
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Аналитика5, События);
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Аналитика6, События);
	
	УстановитьСобытияЭлемента(ОписаниеКТ, Форма, Аналитики.Номенклатура, События);
	
КонецПроцедуры

Функция СоздатьПолучитьРеквизитФормыДляСвязиПараметровВыбора(ОписаниеКТ, Форма, ИмяОтбора, ТипЗначенияСписка)
	
	ИмяРеквизита = ОписаниеКТ.ПрефиксДляСпискаСвязейПараметровВыбора + ИмяОтбора;
	
	МассивРеквизитов = Форма.ПолучитьРеквизиты();
	Для Каждого Реквизит Из МассивРеквизитов Цикл
		Если Реквизит.Имя = ИмяРеквизита Тогда
			// Такой реквизит есть. Возвращаем имя
			Возврат Реквизит.Имя;
		КонецЕсли;
	КонецЦикла;
	
	// Создаем его
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("СписокЗначений"));
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Реквизит);
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// 
	МассивТиповЗначенийСписка = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗначенияСписка);
	
	Форма[ИмяРеквизита].ТипЗначения = Новый ОписаниеТипов(МассивТиповЗначенийСписка);
	
	Возврат ИмяРеквизита;
	
КонецФункции

Процедура УстановитьОграничениеТипов(ОписаниеКТ, Форма, ОсновнаяАналитика)

	ОписаниеАналитик = ОписаниеКТ.Схема.РеквизитПоАналитике;
	
	СтруктураАналитики = ОписаниеАналитик[ОсновнаяАналитика];
	Если СтруктураАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасположениеАналитики = ПолучитьРасположениеАналитики(ОписаниеКТ, СтруктураАналитики.Имя);
	Если РасположениеАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ИмяЭлемента = ПолучитьИмяЭлемента(ОписаниеКТ, СтруктураАналитики.Имя, РасположениеАналитики);
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	Если Элемент = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Если НЕ СтруктураАналитики.Свойство("ОграничениеТипа")
	  ИЛИ НЕ СтруктураАналитики.Свойство("ОграничениеТипаИсточник") Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СтруктураАналитики.ОграничениеТипаИсточник)
	  ИЛИ НЕ ЗначениеЗаполнено(СтруктураАналитики.ОграничениеТипа) Тогда
	  	Возврат;
	КонецЕсли;
	
	ОтказОтУстановки = Ложь;
	Попытка
		ЗначениеИсточника = ОбщегоНазначения.ВычислитьВБезопасномРежиме(
			"Параметры."+ОписаниеКТ.ПрефиксАналитикШапки+СтруктураАналитики.ОграничениеТипаИсточник, Форма);
	Исключение
		ОтказОтУстановки = Истина;
	КонецПопытки;
	
	Если ОтказОтУстановки ИЛИ НЕ ЗначениеЗаполнено(ЗначениеИсточника) Тогда
		Возврат;
	КонецЕсли;
	
	ОграничениеТипа = СтруктураАналитики.ОграничениеТипа[ЗначениеИсточника];
	
	//
	Элемент.ОграничениеТипа = ОграничениеТипа;
	
КонецПроцедуры //УстановитьОграничениеТипов()

Функция ВыполнитьПодменуИмениДляВалюты(ИмяАналитики)
	
	Если ИмяАналитики = "Валюта" Тогда
		Возврат "ВалютаДокумента";
	Иначе
		Возврат ИмяАналитики;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяЭлемента(ОписаниеКТ, ИмяАналитики, РасположениеАналитики)
	
	Если РасположениеАналитики = "ВРасшифровке" Тогда
		Возврат ОписаниеКТ.Элементы.Расшифровка+"_"+ИмяАналитики;
	ИначеЕсли РасположениеАналитики = "ВСтроке" Тогда
		Возврат КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, ИмяАналитики);
	ИначеЕсли РасположениеАналитики = "ВШапке" Тогда
		Возврат ВыполнитьПодменуИмениДляВалюты(ИмяАналитики);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПутьКДаннымОсновнойАналитики(ОписаниеКТ, ИмяАналитики, РасположениеАналитики)
	
	Если РасположениеАналитики = "ВРасшифровке" Тогда
		Возврат "Элементы."+ОписаниеКТ.Элементы.Расшифровка+".ТекущиеДанные."+ИмяАналитики;
	ИначеЕсли РасположениеАналитики = "ВСтроке" Тогда
		Возврат "Элементы."+ОписаниеКТ.Элементы.КроссТаблица+".ТекущиеДанные."+ИмяАналитики;
	ИначеЕсли РасположениеАналитики = "ВШапке" Тогда
		Возврат ОписаниеКТ.ПрефиксАналитикШапки + ВыполнитьПодменуИмениДляВалюты(ИмяАналитики);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьРасположениеАналитики(ОписаниеКТ, ИмяАналитики) экспорт
	
	Аналитики = ОписаниеКТ.Схема.Аналитики;
	
	Если Аналитики.мШапка.Найти(ИмяАналитики) <> неопределено Тогда
		Возврат "ВШапке";
	ИначеЕсли Аналитики.мСтрока.Найти(ИмяАналитики) <> неопределено Тогда
		Возврат "ВСтроке";
	ИначеЕсли Аналитики.мРасшифровка.Найти(ИмяАналитики) <> неопределено Тогда
		Возврат "ВРасшифровке";
	Иначе
		Возврат неопределено;
	КонецЕсли;
	
КонецФункции

Функция УсловиеРасположенияВыполнено(ОписаниеКТ, РасположениеЗависимойАналитики, РасположениеОсновнойАналитики, Условие = неопределено)
	
	Если РасположениеЗависимойАналитики = неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РасположениеОсновнойАналитики = неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Условие = "ВышеИлиНаОдномУровне" Тогда
		УсловиеРасположения = Условие;
	ИначеЕсли Условие = "Выше" Тогда
		УсловиеРасположения = Условие;
	Иначе
		УсловиеРасположения = "ВышеИлиНаОдномУровне";
	КонецЕсли; 
	
	Расположение = Новый Массив;
	Расположение.Добавить("ВШапке");
	Расположение.Добавить("ВСтроке");
	Расположение.Добавить("ВРасшифровке");
	
	ИндексЗависимойАналитики = Расположение.Найти(РасположениеЗависимойАналитики);
	ИндексОсновнойАналитики = Расположение.Найти(РасположениеОсновнойАналитики);
	
	Если ИндексЗависимойАналитики = неопределено ИЛИ ИндексОсновнойАналитики = неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если УсловиеРасположения = "ВышеИлиНаОдномУровне" Тогда
		Возврат ИндексОсновнойАналитики <= ИндексЗависимойАналитики;
	ИначеЕсли УсловиеРасположения = "Выше" Тогда
		Возврат ИндексОсновнойАналитики < ИндексЗависимойАналитики;
	Иначе
		Возврат Ложь;
	КонецЕсли;
		
КонецФункции

Процедура УстановитьСобытияЭлемента(ОписаниеКТ, Форма, ОсновнаяАналитика, СтруктураСвойств)
	
	ОписаниеАналитик = ОписаниеКТ.Схема.РеквизитПоАналитике;
	
	СтруктураАналитики = ОписаниеАналитик[ОсновнаяАналитика];
	Если СтруктураАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РасположениеАналитики = ПолучитьРасположениеАналитики(ОписаниеКТ, СтруктураАналитики.Имя);
	Если РасположениеАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИмяЭлемента = ПолучитьИмяЭлемента(ОписаниеКТ, СтруктураАналитики.Имя, РасположениеАналитики);
	Элемент = Форма.Элементы.Найти(ИмяЭлемента);
	Если Элемент = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого КлючЗначение Из СтруктураСвойств Цикл
		Элемент.УстановитьДействие(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьСвязиПараметровВыбора(ОписаниеКТ, Форма, ЗависимаяАналитика, ИмяОтбора, ОсновнаяАналитика, Условие = неопределено, Знач РежимСвязи = неопределено, ИмяРеквизитаСписка = неопределено)
	
	
	Если РежимСвязи = неопределено Тогда
		РежимСвязи = РежимИзмененияСвязанногоЗначения.Очищать;
	КонецЕсли;
	
	ОписаниеАналитик = ОписаниеКТ.Схема.РеквизитПоАналитике;
	
	//
	СтруктураЗависимойАналитики = ОписаниеАналитик[ЗависимаяАналитика];
	Если СтруктураЗависимойАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	РасположениеЗависимойАналитики = ПолучитьРасположениеАналитики(ОписаниеКТ, СтруктураЗависимойАналитики.Имя);
	
	ИмяЗависимогоЭлемента = ПолучитьИмяЭлемента(ОписаниеКТ, СтруктураЗависимойАналитики.Имя, РасположениеЗависимойАналитики);
	Элемент = Форма.Элементы.Найти(ИмяЗависимогоЭлемента);
	Если Элемент = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	СтруктураОсновнойАналитики = ОписаниеАналитик[ОсновнаяАналитика];
	ТипОсновнойАналитики = ТипЗнч(ОсновнаяАналитика);
	Если ТипОсновнойАналитики = Тип("СправочникСсылка.АналитикиОперативногоПланирования") Тогда
		// Есть основная аналитики
		РасположениеОсновнойАналитики = ПолучитьРасположениеАналитики(ОписаниеКТ, СтруктураОсновнойАналитики.Имя);
		Если НЕ УсловиеРасположенияВыполнено(ОписаниеКТ, РасположениеЗависимойАналитики, РасположениеОсновнойАналитики, Условие) Тогда
			Возврат;
		КонецЕсли;
		
		Если ИмяРеквизитаСписка = неопределено Тогда
			ПутьКДаннымОсновнойАналитики = ПолучитьПутьКДаннымОсновнойАналитики(ОписаниеКТ, СтруктураОсновнойАналитики.Имя, РасположениеОсновнойАналитики);
		Иначе
			ПутьКДаннымОсновнойАналитики = ИмяРеквизитаСписка;
		КонецЕсли;
	ИначеЕсли ТипОсновнойАналитики = Тип("Строка") Тогда
		// связь передана текстом
		ПутьКДаннымОсновнойАналитики = ОсновнаяАналитика;
	Иначе
		Возврат ;
	КонецЕсли;
	
	//
	СвязиПараметровВыбора = Новый Массив(Элемент.СвязиПараметровВыбора);
	
	// Зачистить от лишних
	Поз = 0;
	Пока Поз<СвязиПараметровВыбора.Количество() Цикл
		СтрокаСвязи = СвязиПараметровВыбора[Поз];
		Если СтрокаСвязи.Имя = ИмяОтбора Тогда
			СвязиПараметровВыбора.Удалить(Поз);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
	КонецЦикла; 
	
	//
	СвязиПараметровВыбора.Добавить(Новый СвязьПараметраВыбора(ИмяОтбора, ПутьКДаннымОсновнойАналитики, РежимСвязи));
	
	Элемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбора);
	
КонецПроцедуры

Процедура СброситьСвязиПараметровВыбора(ОписаниеКТ, Форма, ЗависимаяАналитика)
	
КонецПроцедуры

#КонецОбласти 

Процедура ИнициализироватьЗначенияДопРеквизитовКТ(ОписаниеКТ, Форма, ВидБюджета)
	
	ИнициализироватьДопРеквизитыСтатьиБюджета(ОписаниеКТ, Форма, ВидБюджета);
	
	ИнициализироватьДопРеквизитыНоменклатуры(ОписаниеКТ, Форма);
	
КонецПроцедуры

Процедура ИнициализироватьДопРеквизитыСтатьиБюджета(ОписаниеКТ, Форма, ВидБюджета)
	
	//
	Аналитика = Справочники.АналитикиОперативногоПланирования.СтатьяБюджета;
	ОписаниеАналитик = ОписаниеКТ.Схема.РеквизитПоАналитике;
	
	//
	СтруктураАналитики = ОписаниеАналитик[Аналитика];
	Если СтруктураАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	РасположениеАналитики = ПолучитьРасположениеАналитики(ОписаниеКТ, СтруктураАналитики.Имя);
	
	ИмяКолонкиСтатья = "СтатьяБюджета";
	Если РасположениеАналитики = "ВШапке" Тогда
		// Заполняемся тут
		ПереченьСтатей = Новый Массив;
		СтатьяБюджета = ПолучитьАналитикуШапки(ОписаниеКТ, Форма, ИмяКолонкиСтатья);
		Если ЗначениеЗаполнено(СтатьяБюджета) Тогда
			ПереченьСтатей.Добавить(СтатьяБюджета);
		КонецЕсли;
		ИмяЭлементаСтатья = "СтатьяБюджета";
	ИначеЕсли РасположениеАналитики = "ВСтроке" Тогда
		Данные = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
		ПереченьСтатей = Данные.Выгрузить(,ИмяКолонкиСтатья).ВыгрузитьКолонку(ИмяКолонкиСтатья);
		ИмяЭлементаСтатья = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "СтатьяБюджета");
	ИначеЕсли РасположениеАналитики = "ВРасшифровке" Тогда
		Данные = Форма[ОписаниеКТ.Реквизиты.Расшифровка];
		ПереченьСтатей = Данные.Выгрузить(,ИмяКолонкиСтатья).ВыгрузитьКолонку(ИмяКолонкиСтатья);
		ИмяЭлементаСтатья = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, "СтатьяБюджета");
	Иначе
		Возврат;
	КонецЕсли;
	
	//
	Поз = 0;
	Пока Поз<ПереченьСтатей.Количество() Цикл
		
		Если ПереченьСтатей[Поз] = неопределено Тогда
			ПереченьСтатей.Удалить(Поз);
		Иначе
			Поз = Поз + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПереченьСтатей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Заполняем ВидАналитик*, ВидАналитики*ТипЗначения, ВидАналитики*Наименование, ВидАналитики*ПараметрыВыбора и ВидАналитики*СвязиАналитик
	ВидБюджета = ПолучитьАналитикуШапки(ОписаниеКТ, Форма, "Предназначение");
	
	Если ОписаниеКТ.ТолькоЛимитируемыеСтатьи Тогда
		ПараметрыЛимитирования = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьПараметрыЛимитированияСтатьиБюджета(Форма, ИмяЭлементаСтатья);
	КонецЕсли;
	// тут
	НастройкиАналитикСтатей = АналитикиСтатейБюджетовУХВызовСервера.ВидыАналитикСтатей(ПереченьСтатей, ОписаниеКТ.ТолькоЛимитируемыеСтатьи, ПараметрыЛимитирования);
	
	Шаблон = "ВидАналитики%1,ВидАналитики%1ТипЗначения,ВидАналитики%1Наименование, ВидАналитики%1СвязиАналитик, ВидАналитики%1ПараметрыВыбора";
	СписокАналитик = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона(Шаблон);
	
	ПустыеАналитики = Новый Структура(СписокАналитик);
	ПустыеАналитики.Вставить("УровеньКонтроляСтатьиБюджета", неопределено);
	ПустыеАналитики.Вставить("Аналитика1", неопределено);
	ПустыеАналитики.Вставить("Аналитика2", неопределено);
	ПустыеАналитики.Вставить("Аналитика3", неопределено);
	ПустыеАналитики.Вставить("Аналитика4", неопределено);
	ПустыеАналитики.Вставить("Аналитика5", неопределено);
	ПустыеАналитики.Вставить("Аналитика6", неопределено);
	
	Если РасположениеАналитики = "ВШапке" Тогда
		
		СтатьяБюджета = ПереченьСтатей[0];
		НастройкиСтатьи = НастройкиАналитикСтатей.Найти(СтатьяБюджета, ИмяКолонкиСтатья);
		
		Если ЗначениеЗаполнено(СтатьяБюджета) И НастройкиСтатьи <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(Форма, НастройкиСтатьи, СписокАналитик);
		Иначе
			ЗаполнитьЗначенияСвойств(Форма, ПустыеАналитики);
		КонецЕсли;
		
	Иначе
		
		Уровни = Новый Соответствие;
		Уровни.Вставить(Ложь, Перечисления.УровниКонтроляЛимитовСтатей.НеКонтролируется);
		Уровни.Вставить(Истина, Перечисления.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам);
		
		// Обрабатываем таблицы
		Для Каждого Строка Из Данные Цикл
			
			//
			СтатьяБюджета = Строка[ИмяКолонкиСтатья];
			НастройкиСтатьи = НастройкиАналитикСтатей.Найти(СтатьяБюджета, ИмяКолонкиСтатья);
			
			Если ЗначениеЗаполнено(СтатьяБюджета) И НастройкиСтатьи <> Неопределено  Тогда
				ЗаполнитьЗначенияСвойств(Строка, НастройкиСтатьи, СписокАналитик);
			Иначе
				ЗаполнитьЗначенияСвойств(Строка, ПустыеАналитики);
			КонецЕсли;
			
			// 
			Если НастройкиСтатьи = неопределено Тогда
				Строка.УровеньКонтроляСтатьиБюджета = Уровни[Ложь];
			Иначе
				Строка.УровеньКонтроляСтатьиБюджета = Уровни[НастройкиСтатьи.КонтролироватьСтатью];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДопРеквизитыНоменклатуры(ОписаниеКТ, Форма)
	
	//
	Аналитика = Справочники.АналитикиОперативногоПланирования.Номенклатура;
	ОписаниеАналитик = ОписаниеКТ.Схема.РеквизитПоАналитике;
	
	//
	СтруктураАналитики = ОписаниеАналитик[Аналитика];
	Если СтруктураАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	РасположениеАналитики = ПолучитьРасположениеАналитики(ОписаниеКТ, СтруктураАналитики.Имя);
	
	Если РасположениеАналитики = "ВШапке" Тогда
		// Заполняемся тут
		Возврат;
	ИначеЕсли РасположениеАналитики = "ВСтроке" Тогда
		Данные = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
	ИначеЕсли РасположениеАналитики = "ВРасшифровке" Тогда
		Данные = Форма[ОписаниеКТ.Реквизиты.Расшифровка];
	Иначе
		Возврат;
	КонецЕсли;
	
	//
	Для Каждого Строка Из Данные Цикл
		Строка.ЭтоКатегорияНоменклатуры = ТипЗнч(Строка.Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории");
	КонецЦикла;
		
КонецПроцедуры

// Преобразование Таблицы в Кросс-таблицу с переносом значений реквизитов периода в колонки кросс-таблицы.
//
// Параметры:
//  КроссТаблица - ДанныеФормы.Коллекция - Кросс-таблица в форме
//  ТаблицаРасшифровки - ДанныеФормы.Коллекция - Расшифровка кросс-таблицы
//  Таблица      - ДанныеФормы.Коллекция - Табличная часть объекта
//	ОписаниеКТ	 - Структура - Описание кросс-таблицы
//	ТаблицаПериоды - ДанныеФормы.Коллекция - таблица периодов кросс-таблицы
//
Процедура ЗаполнитьКроссТаблицуИзТаблицы(РеквизитКроссТаблица, ТаблицаРасшифровки, Таблица, ОписаниеКТ, ТаблицаПериоды)
	
	ЕстьРасшифровка = ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0;
	
	Периодичность              = ОписаниеКТ.Схема.ПараметрыПериодичности.Периодичность;
	СтруктураРеквизитовПериода = ОписаниеКТ.Схема.ПараметрыПериодичности.СтруктураРеквизитовПериода;
	ПоляГруппировки            = ОписаниеКТ.Схема.Аналитики.Строка;
	
	РеквизитКроссТаблица.Очистить();
	ТаблицаРасшифровки.Очистить();
	
	КроссТаблица = РеквизитКроссТаблица.Выгрузить();
	КроссТаблица.Индексы.Добавить(ПоляГруппировки);
	
	СтрокаИсключений = "";
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Итоги Цикл
		СтрокаИсключений = СтрокаИсключений + ?(ПустаяСтрока(СтрокаИсключений), "", ", ") + КлючЗначение.Ключ;
	КонецЦикла;
	
	//
	СтруктураОтбораПериода = Новый Структура("Активная", Истина);
	СписокРеквизитовОтбораПериода = "";
	Для каждого Элемент Из СтруктураРеквизитовПериода Цикл
		СписокРеквизитовОтбораПериода = СписокРеквизитовОтбораПериода + ?(СписокРеквизитовОтбораПериода="", "", ",") + Элемент.Ключ;
		СтруктураОтбораПериода.Вставить(Элемент.Ключ);
	КонецЦикла;
	
	СтруктураОтбораПоПолямГруппировки = Новый Структура(ПоляГруппировки);
	
	// Доп.реквизиты Номенклатуры
	НоменклатураВШапке = ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Номенклатура") <> неопределено;
	НоменклатураВСтроке = ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено;
	НоменклатураВРасшифровке = ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти("Номенклатура") <> неопределено;
	СписокДопРеквизитовНоменклатуры = "ИсходнаяНоменклатура,ЕдиницаИзмерения,Коэффициент,Цена";
	
	//
	Параметры = Новый Структура;
	Параметры.Вставить("НоменклатураВШапке", 				НоменклатураВШапке);
	Параметры.Вставить("НоменклатураВСтроке", 				НоменклатураВСтроке);
	Параметры.Вставить("НоменклатураВРасшифровке", 			НоменклатураВРасшифровке);
	Параметры.Вставить("СписокДопРеквизитовНоменклатуры",	СписокДопРеквизитовНоменклатуры);
	
	// Получить признак использования характеристик для номенклатуры
	Если НоменклатураВШапке ИЛИ НоменклатураВСтроке ИЛИ НоменклатураВРасшифровке Тогда
		МассивСсылок = Таблица.Выгрузить(,"Номенклатура").ВыгрузитьКолонку("Номенклатура");
		ИспользованиеХарактеристик = ПризнакИспользованияХарактеристик(МассивСсылок);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		
		//
		ЗаполнитьЗначенияСвойств(СтруктураОтбораПериода, СтрокаТаблицы, СписокРеквизитовОтбораПериода);
		
		НайденныеСтрокиПериодов = ТаблицаПериоды.НайтиСтроки(СтруктураОтбораПериода);
		Если НайденныеСтрокиПериодов.Количество() = 0 Тогда 
			Продолжить;
		КонецЕсли;
		СтрокаПериода = НайденныеСтрокиПериодов[0];
		
		//
		Если НЕ ПустаяСтрока(ПоляГруппировки) Тогда
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбораПоПолямГруппировки, СтрокаТаблицы, ОписаниеКТ.Схема.Аналитики.Строка);
			
			НайденныеСтроки = КроссТаблица.НайтиСтроки(СтруктураОтбораПоПолямГруппировки);
			Если НайденныеСтроки.Количество()=0 Тогда
				НоваяСтрока = КроссТаблица.Добавить();
				НоваяСтрока.ИДСтроки = Новый УникальныйИдентификатор;
				// УИД
			Иначе
				НоваяСтрока = НайденныеСтроки[0];
			КонецЕсли;
			
		Иначе
			
			Если КроссТаблица.Количество() = 0 Тогда
				НоваяСтрока = КроссТаблица.Добавить();
				// УИД
				НоваяСтрока.ИДСтроки = Новый УникальныйИдентификатор;
			Иначе
				НоваяСтрока = КроссТаблица[0];
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполняем аналитики
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, ОписаниеКТ.Схема.Аналитики.Строка, СтрокаИсключений);
		
		// Рассчитываем ресурсы по строке
		Для каждого КлючЗначениеПоле Из ОписаниеКТ.Схема.Поля Цикл
			ОписаниеПоля = КлючЗначениеПоле.Значение;
			
			РеквизитКТ = ОписаниеПоля.ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
			
			// Изменение при переносе между резервами отображается как +, а хранится как -
			Если ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования
				И ОписаниеПоля.ИмяПоказателя = ОписаниеКТ.Схема.Показатели.Изменение.Имя Тогда
				Значение = -СтрокаТаблицы[ОписаниеПоля.ИмяРеквизитаТЧ];
			Иначе
				Значение = СтрокаТаблицы[ОписаниеПоля.ИмяРеквизитаТЧ];
			КонецЕсли;
			
			Если ОписаниеКТ.Схема.Итоги.Свойство(ОписаниеПоля.ИмяРесурса) Тогда
				НоваяСтрока[РеквизитКТ] = НоваяСтрока[РеквизитКТ] + Значение;
			Иначе
				НоваяСтрока[РеквизитКТ] = Значение;
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого КлючЗначение Из ОписаниеКТ.Схема.Итоги Цикл
			НоваяСтрока[КлючЗначение.Значение] = НоваяСтрока[КлючЗначение.Значение] + СтрокаТаблицы[КлючЗначение.Ключ];
		КонецЦикла;
		
		// Доп.Реквизиты Номенклатуры
		Если Параметры.НоменклатураВСтроке Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы, СписокДопРеквизитовНоменклатуры);
			НоваяСтрока.ХарактеристикиИспользуются = ИспользованиеХарактеристик[НоваяСтрока.Номенклатура] = Истина;
		КонецЕсли;
		
		Если ЕстьРасшифровка Тогда
			ЗаполнитьТаблицуРасшифровки(ОписаниеКТ, ТаблицаРасшифровки, Параметры,
				Новый УникальныйИдентификатор(СтрЗаменить(СтрокаПериода.ИмяКолонки, "_","-")), 
				НоваяСтрока.ИДСтроки, СтрокаТаблицы);
		КонецЕсли;
		
	КонецЦикла;
	
	РеквизитКроссТаблица.Загрузить(КроссТаблица);
	
КонецПроцедуры

//
Процедура ЗаполнитьТаблицуРасшифровки(ОписаниеКТ, ТаблицаРасшифровки, Параметры, ИДПериод, ИДСтроки, СтрокаТаблицы)
	
	// Заполнение таблицы расшифровки
	СтруктураРасшифровки = Новый Структура(ОписаниеКТ.Схема.Аналитики.Расшифровка);
	ЗаполнитьЗначенияСвойств(СтруктураРасшифровки, СтрокаТаблицы, ОписаниеКТ.Схема.Аналитики.Расшифровка);
	СтруктураРасшифровки.Вставить("ИДСтроки", ИДСтроки);
	СтруктураРасшифровки.Вставить("ИДПериода", ИДПериод);
	
	Строки = ТаблицаРасшифровки.НайтиСтроки(СтруктураРасшифровки);
	
	Если Строки.Количество() = 0 Тогда
	
		СтрокаРасшифровки = ТаблицаРасшифровки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтруктураРасшифровки);
		
	Иначе
		
		СтрокаРасшифровки = Строки[0];
		
	КонецЕсли; 
	
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
		
		ОписаниеПоля = КлючЗначение.Значение;
		
		СтрокаРасшифровки[ОписаниеПоля.ИмяРеквизитаТЧ] = СтрокаРасшифровки[ОписаниеПоля.ИмяРеквизитаТЧ] + СтрокаТаблицы[ОписаниеПоля.ИмяРеквизитаТЧ];
	
	КонецЦикла; 
	
	Если Параметры.НоменклатураВРасшифровке Тогда
		ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаТаблицы, Параметры.СписокДопРеквизитовНоменклатуры);
	КонецЕсли;	
	
КонецПроцедуры

Процедура УстановитьПараметрВыбораУровеньКонтроляСтатьиБюджета(Элемент, ЭтоУстановкаОтбора, ВидБюджета = неопределено, ПериодЛимитирования = неопределено)
	
	Если ЭтоУстановкаОтбора Тогда
		ФормыУХКлиентСервер.ДобавитьПараметрВыбора(Элемент, "ПараметрыЛимитирования_ВидБюджета", ВидБюджета);
		ФормыУХКлиентСервер.ДобавитьПараметрВыбора(Элемент, "ПараметрыЛимитирования_Период", ПериодЛимитирования);
	Иначе
		ФормыУХКлиентСервер.УдалитьПараметрВыбора(Элемент, "ПараметрыЛимитирования_ВидБюджета");
		ФормыУХКлиентСервер.УдалитьПараметрВыбора(Элемент, "ПараметрыЛимитирования_Период");
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьУровеньКонтроляСтатьиБюджета(ОписаниеКТ, Форма)

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыКонтроляЛимитаСтатейБюджетовСрезПоследних.СтатьяБюджета КАК СтатьяБюджета,
	|	ПараметрыКонтроляЛимитаСтатейБюджетовСрезПоследних.КонтролироватьСтатью КАК КонтролироватьСтатью
	|ИЗ
	|	РегистрСведений.ПараметрыКонтроляЛимитаСтатейБюджетов.СрезПоследних(, СтатьяБюджета В (&СписокСтатейБюджетов)) КАК ПараметрыКонтроляЛимитаСтатейБюджетовСрезПоследних
	|ГДЕ
	|	ПараметрыКонтроляЛимитаСтатейБюджетовСрезПоследних.КонтролироватьСтатью = ИСТИНА";
	
	КроссТаблица = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
	
	ТаблицаСтатей = КроссТаблица.Выгрузить(, "СтатьяБюджета");
	ТаблицаСтатей.Свернуть("СтатьяБюджета", "");
	СписокСтатей = Новый СписокЗначений;
	СписокСтатей.ЗагрузитьЗначения(ТаблицаСтатей.ВыгрузитьКолонку("СтатьяБюджета"));
	Запрос.УстановитьПараметр("СписокСтатейБюджетов", СписокСтатей);
	
	кэшСтатей = Запрос.Выполнить().Выгрузить();
	кэшСтатей.Индексы.Добавить("СтатьяБюджета");
	
	Для каждого СтрокаКТ Из КроссТаблица Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаКТ.СтатьяБюджета) Тогда
		
			// Если статья пустая, то признак - контролируется, т.к. при установленном отборе 
			// по УровнюКонтроля не должны пропадать строки с пустой статьей.
			СтрокаКТ.УровеньКонтроляСтатьиБюджета = Перечисления.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам;
			Продолжить;
		
		КонецЕсли; 
		
		Строки = кэшСтатей.НайтиСтроки(Новый Структура("СтатьяБюджета", СтрокаКТ.СтатьяБюджета));
		Если Строки.Количество() = 0 Тогда
			СтрокаКТ.УровеньКонтроляСтатьиБюджета = Перечисления.УровниКонтроляЛимитовСтатей.НеКонтролируется;
		Иначе
			СтрокаКТ.УровеньКонтроляСтатьиБюджета = Перечисления.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам;
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеНоменклатура(ОписаниеКТ, Форма, ОснованиеИмениЭлемента)
	
	ОписаниеНоменклатуры = ОписаниеКТ.Схема.РеквизитПоАналитике[Справочники.АналитикиОперативногоПланирования.Номенклатура];
	
	Если ОписаниеНоменклатуры = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОписаниеНоменклатуры.ИспользоватьХарактеристикиНоменклатуры Тогда
		Возврат;
	КонецЕсли;
	
	// Доступность характеристики
	Если ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено Тогда
		ИмяЭлемента = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, "Характеристика");
		Отбор = ОписаниеКТ.Реквизиты.КроссТаблица+".ХарактеристикиИспользуются";
		ВстраиваниеОПКПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(Форма, ИмяЭлемента, Отбор);
	КонецЕсли;
	
КонецПроцедуры

Функция Новый_Ресурс(ИмяРесурса, Заголовок, Разрядность, РазрядностьДробнойЧасти = 0, Знач ЗнакЧисла = Неопределено, Видимость = Истина, ШиринаЭлемента = 12, Формат = "", ПредставлениеРазрядности = "")
	
	Если ЗнакЧисла = неопределено Тогда
		ЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли; 
	
	Ресурс = Новый Структура();
	Ресурс.Вставить("Имя", ИмяРесурса);
	Ресурс.Вставить("Заголовок", Заголовок);
	Ресурс.Вставить("Разрядность", Разрядность);
	Ресурс.Вставить("РазрядностьДробнойЧасти", РазрядностьДробнойЧасти);
	Ресурс.Вставить("ЗнакЧисла", ЗнакЧисла);
	Ресурс.Вставить("Видимость", Видимость);
	Ресурс.Вставить("ШиринаЭлемента", ШиринаЭлемента);
	Ресурс.Вставить("Формат", Формат);
	Ресурс.Вставить("ПредставлениеРазрядности", ПредставлениеРазрядности);

	// 
	УправлениеВидимостью = Новый_УправлениеВидимостью(
		Истина, Истина,
		Заголовок,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Видимость ресурса ""%1""'"), 
			Заголовок));
	
	УправлениеВидимостью.ИмяКоманды = "_УправлениеВидимостьюРесурса_"+Ресурс.Имя;
	УправлениеВидимостью.ИмяЭлемента = "_УправлениеВидимостьюРесурса_"+Ресурс.Имя;
	
	Ресурс.Вставить("УправлениеВидимостью",	УправлениеВидимостью);
	
	Возврат Ресурс;

КонецФункции // Новый_Ресурс()

// Функция инициализирует структуру группы периоды
// Параметры:
//  СоздаватьГруппу			- Булево 	- Создавать элемент группу для размещения колонок периодов
//	Заголовок				- Строка	- Заголовок элемента группы периодов
//
Функция Новый_ГруппаПериода(СоздаватьГруппу = Истина, Заголовок = "Периоды")

	Рез = Новый Структура;
	Рез.Вставить("СоздаватьГруппу",	СоздаватьГруппу);	// Под периоды создавать отдельную группу
	Рез.Вставить("Заголовок",		Заголовок);			// Заголовок группы периоды
	
	Возврат Рез;
	
КонецФункции // Новый_ГруппаПериода()

// Функция инициализирует структуру управления видимостью в кросс-таблице
// Параметры:
//	ИмяЭлемента				- Строка	- Имя элемента формы кросс-таблицы
//  Использовать			- Булево 	- Создавать элемент группу для размещения колонок периодов
//
Функция Новый_УправлениеВидимостьюКолонок(ИмяЭлемента, Использовать = Истина)

	Рез = Новый Структура;
	Рез.Вставить("Использовать",		Использовать);	// Под периоды создавать отдельную группу
	
	Рез.Вставить("ГруппаУправленияВидимостьюРесурсов",
				ИмяЭлемента+"ГруппаУправленияВидимостьюРесурсов");		// Имя группы (элемент) управления видимостью ресурсов
	Рез.Вставить("ГруппаУправленияВидимостьюПоказателей",
				ИмяЭлемента+"ГруппаУправленияВидимостьюПоказателей");	// Имя группы (элемент) управления видимостью показателей
	
	Возврат Рез;
	
КонецФункции // Новый_УправлениеВидимостьюКолонок()

Функция СтатьяИНаправлениеНаОдномУровне(ОписаниеКТ)
	
	СтруктураАналитик = ОписаниеКТ.Схема.СтруктураАналитик;
	Если СтруктураАналитик.Свойство("ПриходРасход") = Ложь Тогда
		Возврат Ложь;
	ИначеЕсли СтруктураАналитик.Свойство("СтатьяБюджета") = Ложь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат СтруктураАналитик.ПриходРасход.Использование = СтруктураАналитик.СтатьяБюджета.Использование;
	
КонецФункции

// Добавляет в настройки параметров вывода поле кросс-таблицы 
//
// Параметры:
//  ОписаниеКТ				 	 - Структура	 - Параметры вывода полей кросс-таблицы
//	ИмяПоля				 		 - Строка	 	 - имя поля для быстрого доступа из структуры Поля
//	ПараметрыПоля				 - Структура	 - Параметры создания поля
//  СоздаватьЭлемент			 - Булево		 - Флаг определяет, создавать ли элемент формы
//  СтруктураДействий			 - Структура	 - Структура действий элемента, Ключ - имя события, значение - имя процедуры обработчика события
Процедура ДобавитьПолеКроссТаблицы(СхемаКТ, ИмяПоля, ПараметрыПоля, СтруктураДействий = Неопределено)

	Если НЕ СхемаКТ.Свойство("Поля") Тогда
		СхемаКТ.Вставить("Поля", Новый Структура());
	КонецЕсли;
	
	Если СтруктураДействий <> Неопределено Тогда
		ПараметрыПоля.Вставить("СтруктураДействий", СтруктураДействий);
	Иначе
		ПараметрыПоля.Вставить("СтруктураДействий", Новый Структура);
	КонецЕсли;
	
	СхемаКТ.Поля.Вставить(ИмяПоля, ПараметрыПоля);

КонецПроцедуры

Функция ВидБюджета(Предназначение)
	
	Если Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		Возврат ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств;
	ИначеЕсли Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
		Возврат ПланыВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов;
	ИначеЕсли Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		Возврат ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов;
	Иначе
		Возврат ПланыВидовХарактеристик.ВидыБюджетов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Процедура СоздатьЭлементыУправленияВидимостьюРесурсов(ОписаниеКТ, Форма)
	
	// Создаем кнопки управления видимостью показателей
	Если ОписаниеКТ.УправлениеВидимостьюКолонок.Использовать = Истина Тогда
		
		// 
		ГруппаВидимостиРесурсов = Форма.Элементы[ОписаниеКТ.УправлениеВидимостьюКолонок.ГруппаУправленияВидимостьюРесурсов];
		УдалитьПодчиненныеЭлементы(ГруппаВидимостиРесурсов.ПодчиненныеЭлементы, Форма.Элементы);
		
		// Ресурсы
		Если ОписаниеКТ.Схема.Ресурсы.Количество() > 1 Тогда
			Для каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
				
				ОписаниеРесурса = КлючЗначениеРесурс.Значение;
				// Создаем команды
				Если ОписаниеРесурса.УправлениеВидимостью.Использовать = Истина Тогда
					СоздатьКомандуУправленияВидимостьюРесурса(ОписаниеКТ, ОписаниеРесурса, Форма);
				КонецЕсли; 
			
			КонецЦикла; 
		КонецЕсли; 
	
		// Показатели
		Для каждого КлючЗначениеПоказатель Из ОписаниеКТ.Схема.Показатели Цикл
			
			ОписаниеПоказателя = КлючЗначениеПоказатель.Значение;
			// Создаем команды
			Если ОписаниеПоказателя.УправлениеВидимостью.Использовать = Истина Тогда
				СоздатьКнопкуУправленияВидимостьюПоказателя(ОписаниеКТ, ОписаниеПоказателя, Форма);
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

Функция ИмяКолонкиТерминатор()
	Возврат "КолонкаТерминатор";
КонецФункции

Функция ПараметрыЭлементаТерминатор()
	Результат = Новый Структура;
	Результат.Вставить("Ширина", 1);
	Результат.Вставить("ОтображатьВШапке", Ложь);
	Результат.Вставить("ОтображатьВПодвале", Ложь);
	Результат.Вставить("ТолькоПросмотр", Истина);
	Результат.Вставить("РастягиватьПоГоризонтали", Истина);
	Результат.Вставить("ПропускатьПриВводе", Истина);
	Результат.Вставить("ГоризонтальноеПоложение", ГоризонтальноеПоложениеЭлемента.Право);
	Возврат Результат;
КонецФункции

Процедура ОбновитьКолонкиРесурсыПериоды(ОписаниеКТ, АктивныеПериоды, ДобавляемыеРеквизиты, УдаляемыеРеквизиты, СуществующиеРеквизиты, СуществующиеРеквизитыТаблицы)
	
	ИмяРеквизитаКроссТаблицы = ОписаниеКТ.Реквизиты.КроссТаблица;
	Поля = ОписаниеКТ.Схема.Поля;
	
	Для каждого ОписаниеПоля Из Поля Цикл
		
		СтруктураПоля = ОписаниеПоля.Значение;
		
		Если СтруктураПоля.Свойство("СоздаватьРеквизит") Тогда
			СоздаватьРеквизит = СтруктураПоля.СоздаватьРеквизит;
		Иначе
			СоздаватьРеквизит = Истина;
		КонецЕсли;
		
		Если НЕ СоздаватьРеквизит Тогда
			Продолжить;
		КонецЕсли;
		
		ПрефиксРеквизитаКолонки = СтруктураПоля.ПрефиксРеквизитаКолонки;
		Если СтруктураПоля.Свойство("УдалятьРеквизитыТаблицы") Тогда
			УдалятьРеквизитыТаблицы = СтруктураПоля.УдалятьРеквизитыТаблицы;
		Иначе
			УдалятьРеквизитыТаблицы = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("ТипЭлемента") Тогда
			ТипЭлемента = СтруктураПоля.ТипЭлемента;
		Иначе
			ТипЭлемента = "Число";
		КонецЕсли;
		Если СтруктураПоля.Свойство("СоздаватьИтоговыеРеквизиты") Тогда
			СоздаватьИтоговыеРеквизиты = СтруктураПоля.СоздаватьИтоговыеРеквизиты;
		Иначе
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		Если СтруктураПоля.Свойство("РасширенныйФорматЧислаДаты") Тогда
			РасширенныйФорматЧислаДаты = СтруктураПоля.РасширенныйФорматЧислаДаты;
		Иначе
			РасширенныйФорматЧислаДаты = Ложь;
		КонецЕсли;
				
		Если СоздаватьИтоговыеРеквизиты И ТипЭлемента <> "Число" И ТипЗнч(ТипЭлемента) <> Тип("ОписаниеТипов") Тогда
			СоздаватьИтоговыеРеквизиты = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ТипЭлемента) = Тип("ОписаниеТипов") Тогда
			ОписаниеТипов = ТипЭлемента;
		ИначеЕсли ТипЭлемента = "Булево" Тогда
			ОписаниеТипов = Новый ОписаниеТипов("Булево");
		ИначеЕсли ТипЭлемента = "Дата" Тогда
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя);
			Иначе
				ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
			КонецЕсли;
		Иначе
			
			Если РасширенныйФорматЧислаДаты Тогда
				ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаЧисло(15, 5);
			Иначе
				ОписаниеТипов = ОбщегоНазначения.ОписаниеТипаЧисло(15, 3); 
			КонецЕсли; 
			
		КонецЕсли;
		
		// Удаление реквизитов
		Если УдалятьРеквизитыТаблицы Тогда
			Для Каждого КлючЗначение Из СуществующиеРеквизитыТаблицы Цикл
				Если СтрНайти(КлючЗначение.Значение.Имя, ПрефиксРеквизитаКолонки) Тогда
					УдаляемыеРеквизиты.Добавить(ИмяРеквизитаКроссТаблицы+"." + КлючЗначение.Значение.Имя);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Создание реквизитов  таблицы
		Для каждого СтрокаПериода Из АктивныеПериоды Цикл
			
			ИмяИскомогоРеквизита = ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки;
			Если СуществующиеРеквизитыТаблицы[ИмяИскомогоРеквизита] = неопределено Тогда
				Реквизит = Новый РеквизитФормы(ИмяИскомогоРеквизита, ОписаниеТипов, ИмяРеквизитаКроссТаблицы, СтрокаПериода.Заголовок);
				ДобавляемыеРеквизиты.Добавить(Реквизит);
			КонецЕсли; 
			
		КонецЦикла;
		
		// Создаем итоговые реквизиты 
		Если СоздаватьИтоговыеРеквизиты Тогда
			
			ПрефиксРеквизита = СтрШаблон(НСтр("ru='Итого %1'"), СтруктураПоля.СвойстваЭлемента.Заголовок);
			
			Для каждого СтрокаПериода Из АктивныеПериоды Цикл
				
				ИмяИскомогоРеквизита = СтрЗаменить(ИмяРеквизитаКроссТаблицы + ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки,".","_");
				Если СуществующиеРеквизиты[ИмяИскомогоРеквизита] = неопределено Тогда
				
					Реквизит = Новый РеквизитФормы(ИмяИскомогоРеквизита, ОписаниеТипов, , ПрефиксРеквизита + " " + СтрокаПериода.Заголовок);
					ДобавляемыеРеквизиты.Добавить(Реквизит);
				
				КонецЕсли; 
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
