////////////////////////////////////////////////////////////////////////////////
// Содержит служебные процедуры и функции подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкиУчета

Функция ЕстьУчетВнеоборотныхАктивов2_4() Экспорт

	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.МестонахождениеОС КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАУУ КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА КАК Таблица
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Регистратор
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК Таблица";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЕстьУчетВнеоборотныхАктивов2_4(СписокЗапросовОбъединение);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Функция ЕстьУчетВнеоборотныхАктивов() Экспорт

	СписокЗапросовОбъединение = Новый Массив;
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаЕстьУчетВнеоборотныхАктивов(СписокЗапросовОбъединение);
	
	Если СписокЗапросовОбъединение.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат НЕ Результат.Пустой();

КонецФункции

Процедура ПроверитьВозможностьПринятияКУчетуОС(Объект, Отказ) Экспорт

	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьВозможностьПринятияКУчетуОС();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка,
		|	ОбъектыЭксплуатации.Представление,
		|	ОбъектыЭксплуатации.ДокументСнятияСУчетаУУ,
		|	ОбъектыЭксплуатации.УжеПринятоКУчету
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|		ОбъектыЭксплуатации.Представление КАК Представление,
		|
		|		ЕСТЬNULL(ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ, НЕОПРЕДЕЛЕНО) КАК ДокументСнятияСУчетаУУ,
		|
		|		&ОтражатьВУпрУчете
		|			И ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету) КАК УжеПринятоКУчету
		|
		|	ИЗ
		|		Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И Организация = &Организация
		|						И ОсновноеСредство В (&СписокОС)) КАК ПервоначальныеСведенияОС
		|			ПО (ПервоначальныеСведенияОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|			ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|			ПО (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|				И (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
		|	ГДЕ
		|		ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	
		|	) КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.УжеПринятоКУчету";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуОС2_4") Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
		Запрос.УстановитьПараметр("Местонахождение", Объект.Местонахождение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС") Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
		Запрос.УстановитьПараметр("Местонахождение", Объект.Подразделение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Объект.Местонахождение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС") Тогда
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Объект.Подразделение);
	Иначе
		Запрос.УстановитьПараметр("МОЛ", Справочники.ФизическиеЛица.ПустаяСсылка());
		Запрос.УстановитьПараметр("Местонахождение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС") Тогда
		ОсновноеСредствоВШапке = Истина;
		Запрос.УстановитьПараметр("СписокОС", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.ОсновноеСредство));
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		ОсновноеСредствоВШапке = Ложь;
		Запрос.УстановитьПараметр("СписокОС", Объект.КомпонентыАмортизации.ВыгрузитьКолонку("КомпонентАмортизации"));
	Иначе
		ОсновноеСредствоВШапке = Ложь;
		Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	
	МестонахождениеВТабличнойЧасти =
		ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС;
	Запрос.УстановитьПараметр("МестонахождениеВТабличнойЧасти", МестонахождениеВТабличнойЧасти);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуОС2_4") Тогда
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВБУ);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВНУ);
	Иначе
		Запрос.УстановитьПараметр("ОтражатьВБУ", Объект.ОтражатьВРеглУчете);
		Запрос.УстановитьПараметр("ОтражатьВНУ", Объект.ОтражатьВРеглУчете);
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ЭтоВводОстатков = ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4");
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		ИмяРеквизитаДляСообщения = "НомерСтроки";
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		ИмяРеквизитаДляСообщения = "КомпонентАмортизации";
	Иначе
		ИмяРеквизитаДляСообщения = "ОсновноеСредство";
	КонецЕсли; 
	
	Пока Выборка.Следующий() Цикл
		
		Если ОсновноеСредствоВШапке Тогда
			Путь = "Объект";
			ДанныеСтроки = Неопределено;
		Иначе
			Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
				ДанныеСтроки = Объект.КомпонентыАмортизации.Найти(Выборка.Ссылка, "КомпонентАмортизации");
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("КомпонентыАмортизации", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
			Иначе
				ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
				Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
			КонецЕсли;
		КонецЕсли;
		
		Если Выборка.УжеПринятоКУчету Тогда
			Если ЗначениеЗаполнено(Выборка.ДокументСнятияСУчетаУУ) Тогда
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" было снято с учета в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.';
										|en = 'The ""%1"" fixed asset was derecognized in the %2 company. Cannot recognize it in the same company twice.'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
			ИначеЕсли ЭтоВводОстатков Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'По основному средству ""%1"" уже введены остатки.';
												|en = 'Balance is already entered by the ""%1"" fixed asset.'"), Выборка.Представление);
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" уже принято к учету.';
												|en = 'The ""%1"" fixed asset is already recognized.'"), Выборка.Представление);
			КонецЕсли; 
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли;
		
		ВнеоборотныеАктивыЛокализация.ПроверитьВозможностьПринятияКУчетуОС(
			Выборка, Объект, ДанныеСтроки, МестонахождениеВТабличнойЧасти, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет реквизиты ОС при принятии их к учету.
// 
// Параметры:
//  Объект - ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4, ДокументОбъект.ОбъединениеОС, ДокументОбъект.ПринятиеКУчетуОС2_4, ДокументОбъект.РазукомплектацияОС -
//  ИмяТЧ - Строка - Имя табличной части документа.
//  Отказ - Булево - 
Процедура ПроверитьРеквизитыОСПриПринятииКУчету(Объект, ИмяТЧ, Отказ) Экспорт

	Запрос = Новый Запрос;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьРеквизитыОСПриПринятииКУчету(Запрос, Объект);
	Если ТекстЗапроса = Неопределено Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Представление КАК Представление,
		|	ИСТИНА КАК НеЗаполненИнвентарныйНомер
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	И ОбъектыЭксплуатации.ИнвентарныйНомер = """"";
	КонецЕсли; 
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СписокОС", ?(ИмяТЧ <> Неопределено, Объект[ИмяТЧ].ВыгрузитьКолонку("ОсновноеСредство"), Объект.ОсновноеСредство));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Путь = Неопределено;
	Пока Выборка.Следующий() Цикл
		
		Если ИмяТЧ <> Неопределено Тогда
			ДанныеСтроки = Объект[ИмяТЧ].Найти(Выборка.Ссылка, "ОсновноеСредство"); // СтрокаТабличнойЧасти - 
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		КонецЕсли;
		
		Если Выборка.НеЗаполненИнвентарныйНомер Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В карточке основного средства ""%1"" необходимо заполнить инвентарный номер.';
											|en = 'Fill in the inventory number in the card of the ""%1"" fixed asset.'"), Выборка.Представление);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка, "ИнвентарныйНомер",, Отказ);
		КонецЕсли;
		
		ВнеоборотныеАктивыЛокализация.ПроверитьРеквизитыОСПриПринятииКУчету(Выборка, Объект, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПринятияКУчетуНМА(Объект, Отказ, НМАВШапке = Ложь) Экспорт
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьВозможностьПринятияКУчетуНМА();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыУчета.Ссылка,
		|	ОбъектыУчета.Представление,
		|	ОбъектыУчета.ВидОбъектаУчета,
		|	ОбъектыУчета.ТекущаяОрганизация,
		|	ОбъектыУчета.ТекущееПодразделение,
		|	ОбъектыУчета.ДокументСписания,
		|	ОбъектыУчета.УжеПринятоКУчету
		|ИЗ
		|	(ВЫБРАТЬ
		|		ОбъектыУчета.Ссылка КАК Ссылка,
		|		ОбъектыУчета.Представление КАК Представление,
		|		ОбъектыУчета.ВидОбъектаУчета КАК ВидОбъектаУчета,
		|		МестоУчетаНМА.Организация КАК ТекущаяОрганизация,
		|		МестоУчетаНМА.Подразделение КАК ТекущееПодразделение,
		|		ЕСТЬNULL(ПервоначальныеСведения.ДокументСписания, НЕОПРЕДЕЛЕНО) КАК ДокументСписания,
		|
		|		&ОтражатьВУпрУчете
		|				И ЕСТЬNULL(ПервоначальныеСведения.ДокументПринятияКУчетуУУ, НЕОПРЕДЕЛЕНО) <> &Ссылка
		|				И ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК УжеПринятоКУчету
		|
		|	ИЗ
		|		Справочник.НематериальныеАктивы КАК ОбъектыУчета
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И Организация = &Организация
		|						И НематериальныйАктив В (&СписокНМА)) КАК ПервоначальныеСведения
		|			ПО (ПервоначальныеСведения.НематериальныйАктив = ОбъектыУчета.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|			ПО (МестоУчетаНМА.НематериальныйАктив = ОбъектыУчета.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|					&Период,
		|					Регистратор <> &Ссылка
		|						И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|			ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = МестоУчетаНМА.НематериальныйАктив)
		|				И (ПорядокУчетаНМАУУ.Организация = МестоУчетаНМА.Организация)
		|	ГДЕ
		|		ОбъектыУчета.Ссылка В(&СписокНМА)) КАК ОбъектыУчета
		|ГДЕ
		|	ОбъектыУчета.УжеПринятоКУчету";
	
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Если НМАВШапке Тогда
		Запрос.УстановитьПараметр("СписокНМА", Объект.НематериальныйАктив);
	Иначе
		Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
	КонецЕсли;
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ПринятиеКУчетуНМА2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Местонахождение);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		ИмяРеквизитаДляСообщения = "НомерСтроки";
	Иначе
		ИмяРеквизитаДляСообщения = "НематериальныйАктив";
	КонецЕсли; 
	
	ЭтоВводОстатков =  ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4");
	
	Пока Выборка.Следующий() Цикл
		
		Если НМАВШапке Тогда
			Путь = "НематериальныйАктив";
		Иначе
			ДанныеСтроки = Объект.НМА.Найти(Выборка.Ссылка, "НематериальныйАктив");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НМА", ДанныеСтроки.НомерСтроки, ИмяРеквизитаДляСообщения);
		КонецЕсли;
			
		Если Выборка.УжеПринятоКУчету Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" были списаны в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.';
											|en = 'The ""%1"" R&D expenses were written off in the %2 company. Cannot recognize it in the same company twice.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
				ИначеЕсли ЭтоВводОстатков Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'По расходам на НИОКР ""%1"" уже введены остатки.';
													|en = 'Balance is already entered by ""%1"" R&D expenses.'"), Выборка.Представление);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Расходы на НИОКР ""%1"" уже приняты к учету.';
													|en = 'The ""%1"" R&D expenses are already recognized.'"), Выборка.Представление);
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(Выборка.ДокументСписания) Тогда
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" был списан в организации %2. Повторное принятие к учету в ту же организацию не поддерживается.';
											|en = 'The ""%1"" intangible asset was written off in the %2 company. Cannot recognize it in the same company twice.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Объект.Организация);
				ИначеЕсли ЭтоВводОстатков Тогда
					ТекстСообщения = СтрШаблон(НСтр("ru = 'По нематериальному активу ""%1"" уже введены остатки.';
													|en = 'Balance is already entered by the ""%1"" intangible asset.'"), Выборка.Представление);
				Иначе
					ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" уже принят к учету.';
													|en = 'The ""%1"" intangible asset is already recognized.'"), Выборка.Представление);
				КонецЕсли;
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
			
		КонецЕсли; 
		
		ВнеоборотныеАктивыЛокализация.ПроверитьВозможностьПринятияКУчетуНМА(Выборка, Объект, Путь, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что основные средства приняты к учету.
// 
// Параметры:
// 	Объект - ДокументОбъект - 
// 	Отказ - Булево -
// 
Процедура ПроверитьЧтоОСПринятыКУчету(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	СостоянияПринят = Новый Массив;
	СостоянияПринят.Добавить(Перечисления.СостоянияОС.ПринятоКУчету);
	СостоянияПринят.Добавить(Перечисления.СостоянияОС.ПринятоКЗабалансовомуУчету);
	
	ТипДокумента = ТипЗнч(Объект);
	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды") Тогда
		ПроверитьВВыбранномУчете = Ложь;
	Иначе
		ПроверитьВВыбранномУчете = ВедетсяРегламентированныйУчетВНА();
	КонецЕсли; 
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьЧтоОСПринятыКУчету(Объект, ПроверитьВВыбранномУчете);
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
		|	ОбъектыЭксплуатации.Представление КАК Представление,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеБУ,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету) КАК СостояниеНУ,
		|	ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) КАК СостояниеУУ,
		|	МестонахождениеОС.Организация КАК МестонахождениеОрганизация,	
		|	МестонахождениеОС.Организация.Представление КАК МестонахождениеОрганизацияПредставление,	
		|	МестонахождениеОС.Местонахождение КАК МестонахождениеПодразделение,
		|	МестонахождениеОС.Местонахождение.Представление КАК МестонахождениеПодразделениеПредставление,
		|	МестонахождениеОС.МОЛ КАК МестонахождениеМОЛ,
		|	МестонахождениеОС.МОЛ.Представление КАК МестонахождениеМОЛПредставление 
		|ИЗ
		|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И ОсновноеСредство В (&СписокОС)) КАК МестонахождениеОС
		|		ПО (МестонахождениеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И ОсновноеСредство В (&СписокОС)) КАК ПорядокУчетаОСУУ
		|		ПО (ПорядокУчетаОСУУ.Организация = МестонахождениеОС.Организация)
		|			И (ПорядокУчетаОСУУ.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство)
		|ГДЕ
		|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
		|	И (НЕ ЕСТЬNULL(ПорядокУчетаОСУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОС.НеПринятоКУчету)) В (&СостоянияПринят)
		|			ИЛИ МестонахождениеОС.Организация <> &Организация	
		|			ИЛИ МестонахождениеОС.Местонахождение <> &Подразделение
		|					И &Подразделение <> НЕОПРЕДЕЛЕНО
		|			ИЛИ МестонахождениеОС.МОЛ <> &МОЛ 
		|					И &МОЛ <> НЕОПРЕДЕЛЕНО
		|		)";
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("СостоянияПринят", СостоянияПринят);
	Запрос.УстановитьПараметр("ПроверитьВВыбранномУчете", ПроверитьВВыбранномУчете);
	
	Если ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ВыкупАрендованныхОС") Тогда
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Истина);
		Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Истина);
	Иначе		
		Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
		Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	КонецЕсли;
	
	Если ТипДокумента = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Если Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС 
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе Тогда
			ИмяРеквизитаПодразделение = Неопределено;
		Иначе
			ИмяРеквизитаПодразделение = "Местонахождение";
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументОбъект.ИзменениеПараметровОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ИзменениеУсловийДоговораАренды")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ВыкупАрендованныхОС") Тогда
		ИмяРеквизитаПодразделение = Неопределено;
	Иначе
		ИмяРеквизитаПодразделение = "Подразделение";
	КонецЕсли;
	
	Если ИмяРеквизитаПодразделение <> Неопределено Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект[ИмяРеквизитаПодразделение]);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Неопределено);
	КонецЕсли;

	ЕстьРеквизитМОЛ = (ТипДокумента = Тип("ДокументОбъект.ПеремещениеОС2_4"));
	Если ЕстьРеквизитМОЛ Тогда
		Запрос.УстановитьПараметр("МОЛ", Объект.МОЛ);
	Иначе
		Запрос.УстановитьПараметр("МОЛ", Неопределено);
	КонецЕсли;

	ОсновноеСредствоВШапке = (ТипДокумента = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ТипДокумента = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4")
		И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковАрендованныхОСЗаБалансом
			ИЛИ Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковПредметовЛизингаЗаБалансом) Тогда
		ИмяТЧ = "АрендованныеОС";
	Иначе
		ИмяТЧ = "ОС";
	КонецЕсли;
	
	ОсновноеСредствоВШапке = (ТипДокумента = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ОсновноеСредствоВШапке Тогда
		Запрос.УстановитьПараметр("СписокОС", Объект.ОсновноеСредство);
	Иначе
		Запрос.УстановитьПараметр("СписокОС", Объект[ИмяТЧ].ВыгрузитьКолонку("ОсновноеСредство"));
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ДоступенВыборОтраженияВУчетах = ВедетсяРегламентированныйУчетВНА();
	
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ОсновноеСредствоВШапке Тогда
			ТабличнаяЧасть = Объект[ИмяТЧ]; // ТабличнаяЧасть - 
			ДанныеСтроки = ТабличнаяЧасть.Найти(Выборка.Ссылка, "ОсновноеСредство");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяТЧ, ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		КонецЕсли; 
		
		ЕстьОшибкиМестонахождения = Ложь;
		
		Если СостоянияПринят.Найти(Выборка.СостояниеБУ) <> Неопределено
			ИЛИ СостоянияПринят.Найти(Выборка.СостояниеУУ) <> Неопределено Тогда
			
			Если Выборка.МестонахождениеОрганизация <> Объект.Организация Тогда
	
				ЕстьОшибкиМестонахождения = Истина;
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" числится в другой организации ""%2"".';
										|en = 'Fixed asset ""%1"" is in another company ""%2"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.МестонахождениеОрганизацияПредставление);
				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
			КонецЕсли;
			
			Если ИмяРеквизитаПодразделение <> Неопределено
				И Выборка.МестонахождениеПодразделение <> Объект[ИмяРеквизитаПодразделение] Тогда
	
				ЕстьОшибкиМестонахождения = Истина;
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" числится в другом подразделении ""%2"".';
										|en = 'Fixed asset ""%1"" is in another business unit ""%2"".'");
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.МестонахождениеПодразделениеПредставление);
				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
			КонецЕсли;

			Если ЕстьРеквизитМОЛ 
				И Выборка.МестонахождениеМОЛ <> Объект.МОЛ Тогда
	
				ЕстьОшибкиМестонахождения = Истина;
				
				Если ЗначениеЗаполнено(Выборка.МестонахождениеМОЛ) Тогда
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" числится за другим МОЛ ""%2"".';
											|en = 'Fixed asset ""%1"" is registered with the other financially liable person ""%2"".'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.МестонахождениеМОЛПредставление);
				Иначе
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не числится за МОЛ.';
											|en = 'Fixed asset ""%1"" is not registered with the financially liable person.'");
					ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление);
				КонецЕсли;

				СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
					
			КонецЕсли;

		КонецЕсли;
				
		Если НЕ ЕстьОшибкиМестонахождения
			И НЕ ТипДокумента = Тип("ДокументОбъект.ВыкупАрендованныхОС") Тогда
				
			// Если местонахождение указано неверно, то нет смысла сообщать по состоянии.
			Если ДоступенВыборОтраженияВУчетах Тогда
				
				Если СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено
					И СостоянияПринят.Найти(Выборка.СостояниеНУ) = Неопределено
					И СостоянияПринят.Найти(Выборка.СостояниеУУ) <> Неопределено Тогда
					
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2 в регламентированном учете.';
											|en = 'The ""%1"" fixed asset is not recognized in local accounting as of %2.'");
					
				ИначеЕсли СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено
					И (СостоянияПринят.Найти(Выборка.СостояниеБУ) <> Неопределено
						ИЛИ СостоянияПринят.Найти(Выборка.СостояниеНУ) <> Неопределено) Тогда
					
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2 в управленческом учете.';
											|en = 'The ""%1"" fixed asset is not recognized in management accounting as of %2.'");
					
				Иначе
					ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2.';
											|en = 'The ""%1"" fixed asset is not recognized as of %2.'");
				КонецЕсли; 
				
			Иначе
				ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не принято к учету на %2.';
										|en = 'The ""%1"" fixed asset is not recognized as of %2.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ); 
		
		КонецЕсли;		
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что ОС получены в аренду.
// 
// Параметры:
// 	Объект - ДокументОбъект.КорректировкаСтоимостиИАмортизацииОС - 
// 	Отказ - Булево -
Процедура ПроверитьЧтоОСПолученыВАрендуЗаБалансом(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОбъектыЭксплуатации.Ссылка КАК Ссылка,
	|	ОбъектыЭксплуатации.Представление КАК Представление
	|ИЗ
	|	Справочник.ОбъектыЭксплуатации КАК ОбъектыЭксплуатации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АрендованныеОС.СрезПоследних(&Период, Регистратор <> &Ссылка И ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|		ПО АрендованныеОС.ОсновноеСредство = ОбъектыЭксплуатации.Ссылка
	|			И АрендованныеОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКЗабалансовомуУчету)
	|ГДЕ
	|	ОбъектыЭксплуатации.Ссылка В(&СписокОС)
	|	И АрендованныеОС.ОсновноеСредство ЕСТЬ NULL";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("СписокОС", Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство"));
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Основное средство ""%1"" не поступало в аренду (забалансовый учет) на %2.';
								|en = 'Fixed asset ""%1"" was not leased (off-balance accounting) at %2.'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
		Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что ОС не получены в аренду на баланс.
// 
// Параметры:
// 	Объект - ДокументОбъект.СписаниеОС2_4, ДокументОбъект.ОбъединениеОС, ДокументОбъект.РазукомплектацияОС - 
// 	Отказ - Булево -
Процедура ПроверитьЧтоОСНеПолученыВАрендуНаБаланс(Объект, Отказ) Экспорт
	
	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК Ссылка,
	|	АрендованныеОС.ОсновноеСредство.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(&Период, Регистратор <> &Ссылка И ОсновноеСредство В (&СписокОС)) КАК АрендованныеОС
	|ГДЕ
	|	АрендованныеОС.Состояние В (
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ЗаключенДоговорАренды),
	|		ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ВАренде))";
		
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	ДанныеВШапке = (ТипЗнч(Объект) = Тип("ДокументОбъект.РазукомплектацияОС"));
	
	Если ДанныеВШапке Тогда
		
		СписокОС = Новый Массив;
		СписокОС.Добавить(Объект.ОсновноеСредство);
	
	Иначе
		
		СписокОС = Объект.ОС.ВыгрузитьКолонку("ОсновноеСредство");
		
		Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОбъединениеОС")
			И Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрисоединениеОС
			И ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
			СписокОС.Добавить(Объект.ОсновноеСредство);
		КонецЕсли;
		
	КонецЕсли;
		
	Запрос.УстановитьПараметр("СписокОС", СписокОС);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Оформление документа не поддерживается для основного средства ""%1"", поступившего в аренду.';
								|en = 'Document registration is not supported for leased fixed asset ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление);
		
		Если ДанныеВШапке Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
		Иначе
			ДанныеСтроки = Объект.ОС.Найти(Выборка.Ссылка, "ОсновноеСредство");
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ОС", ДанныеСтроки.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что на основании договора аренды можно заполнить документ.
// 
// Параметры:
// 	Договор - СправочникСсылка.ДоговорыАренды -
// 	
// Возвращаемое значение:
// 		Структура - содержит реквизиты договора:
//			* Организация - СправочникСсылка.Организации -
//			* Партнер - СправочникСсылка.Партнеры - 
//			* Контрагент - СправочникСсылка.Контрагенты -
//			* ВалютаВзаиморасчетов - СправочникСсылка.Валюты -
//			* ЕстьВыкупПредметовАренды - Булево -
//		Неопределено - 		
Функция ПроверитьРеквизитыДоговораАренды(Договор) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДоговорыАренды.Организация,
	|	ДоговорыАренды.Партнер,
	|	ДоговорыАренды.Контрагент,
	|	ДоговорыАренды.ВалютаВзаиморасчетов,
	|	ДоговорыАренды.ЕстьВыкупПредметовАренды,
	|	ДоговорыАренды.ПометкаУдаления,
	|	ЕСТЬNULL(УсловияДоговоровАренды.Состояние, НЕОПРЕДЕЛЕНО) КАК Состояние
	|ИЗ
	|	Справочник.ДоговорыАренды КАК ДоговорыАренды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияДоговоровАренды.СрезПоследних(&Дата, Договор = &Договор) КАК УсловияДоговоровАренды
	|		ПО УсловияДоговоровАренды.Договор = &Договор
	|ГДЕ
	|	ДоговорыАренды.Ссылка = &Договор";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Договор", Договор);
	Запрос.УстановитьПараметр("Дата", ТекущаяДатаСеанса());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	
	Если Выборка.ПометкаУдаления Тогда
		ТекстОшибки = НСтр("ru = 'Договор помечен на удаление, создание документа недоступно';
							|en = 'The contract is marked for deletion, document creation is not available'");
		ВызватьИсключение ТекстОшибки
	ИначеЕсли Выборка.Состояние <> Перечисления.СостоянияДоговоровКонтрагентов.Действует Тогда
		ТекстОшибки = НСтр("ru = 'Не оформлено заключение договора или договор не действует, создание документа недоступно';
							|en = 'The contract signing is not registered or the contract is not valid, creation of document is not available'");
		ВызватьИсключение ТекстОшибки
	КонецЕсли;
	
	РеквизитыДоговора = Новый Структура;
	РеквизитыДоговора.Вставить("Организация", Выборка.Организация);
	РеквизитыДоговора.Вставить("Партнер", Выборка.Партнер);
	РеквизитыДоговора.Вставить("Контрагент", Выборка.Контрагент);
	РеквизитыДоговора.Вставить("ВалютаВзаиморасчетов", Выборка.ВалютаВзаиморасчетов);
	РеквизитыДоговора.Вставить("ЕстьВыкупПредметовАренды", Выборка.ЕстьВыкупПредметовАренды);
	
	Возврат РеквизитыДоговора;
	
КонецФункции

Процедура ПроверитьЧтоНМАПринятыКУчету(Объект, Отказ) Экспорт

	Если НЕ ВнеоборотныеАктивы.ИспользуетсяУправлениеВНА_2_4(Объект.Дата) Тогда
		// Не нужно проверять, т.к. сработает проверка проведения документа раньше даты начала учета.
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПроверитьЧтоНМАПринятыКУчету();
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НематериальныеАктивы.Ссылка КАК Ссылка,
		|	НематериальныеАктивы.Представление КАК Представление,
		|	НематериальныеАктивы.ВидОбъектаУчета КАК ВидОбъектаУчета,
		|	ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету) КАК СостояниеБУ,
		|	ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) КАК СостояниеУУ,
		|	МестоУчетаНМА.Организация КАК Организация,
		|	МестоУчетаНМА.Организация.Представление КАК ОрганизацияПредставление,
		|	МестоУчетаНМА.Подразделение КАК Подразделение,
		|	МестоУчетаНМА.Подразделение.Представление КАК ПодразделениеПредставление
		|ИЗ
		|	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК ПорядокУчетаНМАУУ
		|		ПО (ПорядокУчетаНМАУУ.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
		|				&Период,
		|				Регистратор <> &Ссылка
		|					И НематериальныйАктив В (&СписокНМА)) КАК МестоУчетаНМА
		|		ПО (МестоУчетаНМА.НематериальныйАктив = НематериальныеАктивы.Ссылка)
		|ГДЕ
		|	НематериальныеАктивы.Ссылка В(&СписокНМА)
		|	И (
		|		НЕ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.НеПринятКУчету)) В (&СостоянияПринят)
		|
		// Проверка места учета НМА
		|		ИЛИ (
		|				(НЕ &ОтражатьВУпрУчете ИЛИ ЕСТЬNULL(ПорядокУчетаНМАУУ.Состояние, НЕОПРЕДЕЛЕНО) В (&СостоянияПринят))
		|				И (ЕСТЬNULL(МестоУчетаНМА.Организация, НЕОПРЕДЕЛЕНО) <> &Организация
		|						И &Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|					ИЛИ ЕСТЬNULL(МестоУчетаНМА.Подразделение, НЕОПРЕДЕЛЕНО) <> &Подразделение
		|						И &Подразделение <> ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
		|			)
		|		)";
		
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокНМА", Объект.НМА.ВыгрузитьКолонку("НематериальныйАктив"));
	Запрос.УстановитьПараметр("ОтражатьВУпрУчете", Объект.ОтражатьВУпрУчете);
	Запрос.УстановитьПараметр("ОтражатьВРеглУчете", Объект.ОтражатьВРеглУчете);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ИзменениеПараметровНМА2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Справочники.СтруктураПредприятия.ПустаяСсылка());
	ИначеЕсли ТипЗнч(Объект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4") Тогда
		Запрос.УстановитьПараметр("Подразделение", Объект.Местонахождение);
	Иначе
		Запрос.УстановитьПараметр("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	СостоянияПринят = Новый Массив;
	СостоянияПринят.Добавить(Перечисления.СостоянияНМА.ПринятКУчету);
	Запрос.УстановитьПараметр("СостоянияПринят", СостоянияПринят);
	
	ТипДокумента = ТипЗнч(Объект);
	Если ТипДокумента = Тип("ДокументОбъект.ПеремещениеНМА2_4")
		ИЛИ ТипДокумента = Тип("ДокументОбъект.ПодготовкаКПередачеНМА2_4") Тогда
		ПроверитьВВыбранномУчете = Ложь;
	Иначе
		ПроверитьВВыбранномУчете = ВедетсяРегламентированныйУчетВНА();
	КонецЕсли; 
	Запрос.УстановитьПараметр("ПроверитьВВыбранномУчете", ПроверитьВВыбранномУчете);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ДанныеСтроки = Объект.НМА.Найти(Выборка.Ссылка, "НематериальныйАктив");
		
		ТекстСообщения = Неопределено;
		
		Если СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено
			И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2.';
										|en = '%1 R&D expenses are not recognized as of %2.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2.';
										|en = 'The ""%1"" intangible asset is recognized as of %2.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		ИначеЕсли Объект.ОтражатьВРеглУчете
			И ПроверитьВВыбранномУчете
			И СостоянияПринят.Найти(Выборка.СостояниеБУ) = Неопределено Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2 в регламентированном учете.';
										|en = '%1 R&D expenses are not recognized in local accounting as of %2.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2 в регламентированном учете.';
										|en = 'The ""%1"" intangible asset is not recognized in local accounting as of %2.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		ИначеЕсли Объект.ОтражатьВУпрУчете
			И ПроверитьВВыбранномУчете
			И СостоянияПринят.Найти(Выборка.СостояниеУУ) = Неопределено Тогда
			
			Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
				ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" не приняты к учету на %2 в управленческом учете.';
										|en = '%1 R&D expenses are not recognized in management accounting as of %2.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету на %2 в управленческом учете.';
										|en = 'The ""%1"" intangible asset is not recognized in management accounting as of %2.'");
			КонецЕсли; 
			
			ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Формат(Объект.Дата, "ДЛФ=D"));
			
		Иначе
			
			// НМА принят к учету, проверим местонахождение.
			
			Если Выборка.Организация <> Объект.Организация
				И ЗначениеЗаполнено(Объект.Организация) Тогда
				
				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" приняты к учету в другой организации %2.';
											|en = '%1 R&D expenses are recognized in another company %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" принят к учету в другой организации %2.';
											|en = '%1 intangible asset is recognized in another company %2.'");
				КонецЕсли; 
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.ОрганизацияПредставление);
				
			КонецЕсли; 
			
			Если Выборка.Подразделение <> Объект.Подразделение
				И ЗначениеЗаполнено(Объект.Подразделение) Тогда
				
				Если Выборка.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР Тогда
					ТекстСообщения = НСтр("ru = 'Расходы на НИОКР ""%1"" приняты к учету в другое подразделение %2.';
											|en = '%1 R&D expenses are recognized in another business unit %2.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Нематериальный актив ""%1"" принят к учету в другое подразделение %2.';
											|en = '%1 intangible asset is recognized in another business unit %2.'");
				КонецЕсли; 
				
				ТекстСообщения = СтрШаблон(ТекстСообщения, Выборка.Представление, Выборка.ПодразделениеПредставление);
				
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если ТекстСообщения <> Неопределено Тогда
			Путь = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("НМА", ДанныеСтроки.НомерСтроки, "НематериальныйАктив");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры

// Проверить, что ОС принято к учету и сообщить, если не принято.
// 
// Параметры:
//  ОсновноеСредство - СправочникСсылка.ОбъектыЭксплуатации - Основное средство
//  Дата - Дата - Дата
// 
// Возвращаемое значение:
//  см. Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения
Функция СообщитьЕслиОСНеПринятоКУчету(ОсновноеСредство, Дата) Экспорт

	ПервоначальныеСведения = Справочники.ОбъектыЭксплуатации.ПервоначальныеСведения(ОсновноеСредство, Дата);
	Если ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.НеПринятоКУчету
		И ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.НеПринятоКУчету Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" не принято к учету.';
										|en = 'The ""%1"" fixed asset is not recognized.'"), Строка(ОсновноеСредство));
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияОС.СнятоСУчета
		ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияОС.СнятоСУчета Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Основное средство ""%1"" снято с учета.';
										|en = 'The ""%1"" fixed asset is derecognized.'"), Строка(ОсновноеСредство));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	Возврат ПервоначальныеСведения;
	
КонецФункции

Функция СообщитьЕслиНМАНеПринятКУчету(НематериальныйАктив, Дата) Экспорт

	ПервоначальныеСведения = Справочники.НематериальныеАктивы.ПервоначальныеСведения(НематериальныйАктив, Дата);
	Если ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияНМА.НеПринятКУчету
		И ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияНМА.НеПринятКУчету Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" не принят к учету.';
										|en = 'The ""%1"" intangible asset is not recognized.'"), Строка(НематериальныйАктив));
		ВызватьИсключение ТекстСообщения;
		
	ИначеЕсли ПервоначальныеСведения.СостояниеБУ = Перечисления.СостоянияНМА.Списан
		ИЛИ ПервоначальныеСведения.СостояниеУУ = Перечисления.СостоянияНМА.Списан Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Нематериальный актив ""%1"" снят с учета.';
										|en = 'The ""%1"" intangible asset is derecognized.'"), Строка(НематериальныйАктив));
		ВызватьИсключение ТекстСообщения;
		
	КонецЕсли; 

	Возврат ПервоначальныеСведения;
	
КонецФункции
 
#КонецОбласти

#Область РасчетАмортизации

// Копирует параметры, необходимые для расчета амортизации.
// Используется для "типизации" возвращаемого параметра.
// 
// Возвращаемое значение:
//  см. ВнеоборотныеАктивы.НовыеПараметрыРасчетаАмортизации
//
Функция СкопироватьПараметрыРасчетаАмортизации(ИсходныеПараметрыРасчета) Экспорт
	
	Возврат ОбщегоНазначения.СкопироватьРекурсивно(ИсходныеПараметрыРасчета);
	
КонецФункции

Процедура ДополнитьПараметрамиУчетаВнеоборотныхАктивов(Знач ПараметрыРасчета) Экспорт

	ВнеоборотныеАктивыЛокализация.ДополнитьПараметрамиУчетаВнеоборотныхАктивов(ПараметрыРасчета);
	
КонецПроцедуры

Функция ТекстПоляФактическийСрокИспользования(ПолеНачалаПериода) Экспорт

	ТекстПоля = 
	"((ГОД(&НачалоМесяца) - ГОД(НАЧАЛОПЕРИОДА(&ПолеНачалаПериода, МЕСЯЦ))) * 12 
		|				+ МЕСЯЦ(&НачалоМесяца) 
		|				- МЕСЯЦ(НАЧАЛОПЕРИОДА(&ПолеНачалаПериода, МЕСЯЦ)))";
	
	Возврат СтрЗаменить(ТекстПоля, "&ПолеНачалаПериода", ПолеНачалаПериода);
	
КонецФункции

Функция ТекстРаспределенияСуммы(ИмяПоляСумма, ИмяПоляБаза = Неопределено, ИмяПоляБазаНакопленная = Неопределено, ИмяПоляСуммаБазы = Неопределено) Экспорт

	Если ИмяПоляБаза = Неопределено Тогда
		ИмяПоляБаза = "СпособыОтраженияРасходов.База";
	КонецЕсли;
	
	Если ИмяПоляБазаНакопленная = Неопределено Тогда
		ИмяПоляБазаНакопленная = "СпособыОтраженияРасходов.БазаНакопленная";
	КонецЕсли;
	
	Если ИмяПоляСуммаБазы = Неопределено Тогда
		ИмяПоляСуммаБазы = "СпособыОтраженияРасходов.СуммаБазы";
	КонецЕсли;
	
	ТекстЗапроса =	
	"	ВЫБОР
	|		КОГДА (&СуммаБазы) <> 0
	|			ТОГДА ВЫРАЗИТЬ(&Сумма * (&БазаНакопленная + &База) / (&СуммаБазы) КАК ЧИСЛО(31,2))
	|					- ВЫРАЗИТЬ(&Сумма * &БазаНакопленная / (&СуммаБазы) КАК ЧИСЛО(31,2))
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаБазы", ИмяПоляСуммаБазы);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Сумма", ИмяПоляСумма);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&БазаНакопленная", ИмяПоляБазаНакопленная);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&База", ИмяПоляБаза);
	
	Возврат ТекстЗапроса;

КонецФункции
 
Процедура УничтожитьВременныеТаблицыПослеЗаписиРасчетаАмортизации(МенеджерВременныхТаблиц, ПараметрыРасчета) Экспорт
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(МенеджерВременныхТаблиц,, ПараметрыРасчета.ИспользуемыеТаблицы);
	
КонецПроцедуры

// Формирует текст запроса, получающий данные из регистра
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра
//  ИмяТаблицы - Строка - Имя таблицы
//  ОбъектУчета - Строка - Объект учета
//  СписокЗапросов - Массив из Строка -
//  ВычислениеПолей - Структура, Неопределено - Вычисление полей
Процедура ТекстЗапросаПараметрыРасчетаАмортизации(ИмяРегистра, ИмяТаблицы, ОбъектУчета, СписокЗапросов, ВычислениеПолей = Неопределено) Экспорт

	Если ВычислениеПолей = Неопределено Тогда
		ВычислениеПолей = Новый Структура;
	КонецЕсли;
	
	СписокЗапросовОбъединение = Новый Массив;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&НачалоМесяца КАК НачалоМесяца,
	|	&КонецПредыдущегоМесяца КАК Период,
	|	ЛОЖЬ КАК ДляДоначисления,
	|	&ТекстПолей
	|ПОМЕСТИТЬ ВТ_ИмяРегистра
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&КонецПредыдущегоМесяца,
	|			(ПолеОбъектУчета) В
	|				(ВЫБРАТЬ
	|					СписокОбъектовУчета.ПолеОбъектУчета
	|				ИЗ
	|					СписокОбъектовУчета КАК СписокОбъектовУчета)) КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоМесяца КАК НачалоМесяца,
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК Период,
	|	ИСТИНА КАК ДляДоначисления,
	|&ТекстПолей
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипПринятиеКУчету)
	|	И (ТаблицаРегистра.ПолеОбъектУчета) В
	|			(ВЫБРАТЬ
	|				СписокОбъектовУчета.ПолеОбъектУчета
	|			ИЗ
	|				СписокОбъектовУчета КАК СписокОбъектовУчета
	|			ГДЕ
	|				СписокОбъектовУчета.АмортизацияНачисляетсяПоСтандартамМУ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
	|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК Период,
	|	ИСТИНА КАК ДляДоначисления,
	|&ТекстПолей
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС КАК ТаблицаРегистра
	|ГДЕ
	|	ТаблицаРегистра.Период МЕЖДУ &НачалоПредыдущегоМесяца И &КонецПредыдущегоМесяца
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) В (&ТипПринятиеКУчету)
	|	И (ТаблицаРегистра.ПолеОбъектУчета) В
	|			(ВЫБРАТЬ
	|				СписокОбъектовУчета.ПолеОбъектУчета
	|			ИЗ
	|				СписокОбъектовУчета_Доначисление_Все КАК СписокОбъектовУчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&НачалоПредыдущегоМесяца КАК НачалоМесяца,
	|	&НачалоПредыдущегоМесяца КАК Период,
	|	ИСТИНА КАК ДляДоначисления,
	|&ТекстПолей
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&КонецПозапрошлогоМесяца,
	|			(ПолеОбъектУчета) В
	|				(ВЫБРАТЬ
	|					СписокОбъектовУчета.ПолеОбъектУчета
	|				ИЗ
	|					СписокОбъектовУчета_Доначисление_Все КАК СписокОбъектовУчета)) КАК ТаблицаРегистра";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	
	Если ОбъектУчета = "ОсновноеСредство" Тогда
		
		// Добавим параметры новых ОС отдельным запросом, чтобы исключить исходные ОС.
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&НачалоМесяца КАК НачалоМесяца,
		|	НАЧАЛОПЕРИОДА(ТаблицаРегистра.Период, ДЕНЬ) КАК Период,
		|	ИСТИНА КАК ДляДоначисления,
		|&ТекстПолей
		|ИЗ
		|	РегистрСведений.ПорядокУчетаОС КАК ТаблицаРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РазукомплектацияОС КАК РазукомплектацияОС
		|		ПО (РазукомплектацияОС.Ссылка = ТаблицаРегистра.Регистратор)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОбъединениеОС КАК ОбъединениеОС
		|		ПО (ОбъединениеОС.Ссылка = ТаблицаРегистра.Регистратор)
		|ГДЕ
		|	ТаблицаРегистра.Период МЕЖДУ &НачалоМесяца И &КонецМесяца
		|	И (ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.РазукомплектацияОС)
		|				И ТаблицаРегистра.ПолеОбъектУчета <> РазукомплектацияОС.ПолеОбъектУчета
		|			ИЛИ ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.ОбъединениеОС)
		|				И ТаблицаРегистра.ПолеОбъектУчета = ОбъединениеОС.ПолеОбъектУчета
		|				И ОбъединениеОС.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ОбъединениеОС))
		|	И (ТаблицаРегистра.ПолеОбъектУчета) В
		|			(ВЫБРАТЬ
		|				СписокОбъектовУчета.ПолеОбъектУчета
		|			ИЗ
		|				СписокОбъектовУчета КАК СписокОбъектовУчета
		|			ГДЕ
		|				СписокОбъектовУчета.АмортизацияНачисляетсяПоСтандартамМУ)";
		СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЕстьОрганизация = Ложь;
	
	СписокПолей = Новый Массив;
	Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
		СписокПолей.Добавить("	ТаблицаРегистра.Регистратор КАК Регистратор");
	КонецЕсли;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		СписокПолей.Добавить("	ТаблицаРегистра." + МетаданныеИзмерения.Имя + " КАК " + МетаданныеИзмерения.Имя);
		Если МетаданныеИзмерения.Имя = "Организация" Тогда
			ЕстьОрганизация = Истина;
		КонецЕсли; 
	КонецЦикла; 
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Ресурсы Цикл
		Если ВычислениеПолей.Свойство(МетаданныеИзмерения.Имя) Тогда
			ПутьКПолю = ВычислениеПолей[МетаданныеИзмерения.Имя];
		Иначе
			ПутьКПолю = "	ТаблицаРегистра." + МетаданныеИзмерения.Имя
		КонецЕсли; 
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеИзмерения.Имя);
	КонецЦикла; 
	
	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	Если ЕстьОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ПолеОбъектУчета)", "(ПолеОбъектУчета, Организация)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(ТаблицаРегистра.ПолеОбъектУчета)", "(ТаблицаРегистра.ПолеОбъектУчета, ТаблицаРегистра.Организация)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "СписокОбъектовУчета.ПолеОбъектУчета", "СписокОбъектовУчета.ПолеОбъектУчета, СписокОбъектовУчета.Организация");
	КонецЕсли; 
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПолеОбъектУчета", ОбъектУчета);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ?(ИмяТаблицы <> "", ИмяТаблицы, ИмяРегистра));
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	" + ОбъектУчета + ?(ЕстьОрганизация, ",Организация", "");
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

// Формирует текст запроса, отражающий начисленную амортизацию в регистре ПрочиеРасходы.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах() Экспорт

	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПрочихРасходах();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаРасходы.ПериодРасчета                      КАК Период,
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
		|	ТаблицаРасходы.Организация                        КАК Организация,
		|	ТаблицаРасходы.КорПодразделение                   КАК Подразделение,
		|	ТаблицаРасходы.СтатьяРасходов                     КАК СтатьяРасходов,
		|	ТаблицаРасходы.АналитикаРасходов                  КАК АналитикаРасходов,
		|	ТаблицаРасходы.КорНаправлениеДеятельности         КАК НаправлениеДеятельности,
		|	НЕОПРЕДЕЛЕНО                                      КАК ВидДеятельностиНДС,
		|	ТаблицаРасходы.СуммаУУ                            КАК СуммаСНДС,
		|	ТаблицаРасходы.СуммаУУ                            КАК СуммаБезНДС,
		|	ТаблицаРасходы.СуммаУУ                            КАК СуммаБезНДСУпр,
		|	ТаблицаРасходы.СуммаБУ                            КАК СуммаСНДСРегл,
		|	ТаблицаРасходы.СуммаБУ                            КАК СуммаБезНДСРегл,
		|	0                                                 КАК ПостояннаяРазница,
		|	0                                                 КАК ВременнаяРазница,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
		|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОСизДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМАизДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКРИзДругойОрганизации)
		|				КОНЕЦ
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМА)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКР)
		|
		|	КОНЕЦ КАК ХозяйственнаяОперация,
		|
		|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
		|	
		|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
		|
		|	ВЫБОР 
		|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
		|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|			ТОГДА ВЫБОР
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОСизДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМАизДругойОрганизации)
		|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКРИзДругойОрганизации)
		|				КОНЕЦ
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОС)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМА)
		|
		|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
		|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКР)
		|
		|	КОНЕЦ КАК НастройкаХозяйственнойОперации
		|	
		|ИЗ
		|	НачисленнаяАмортизация КАК ТаблицаРасходы
		|ГДЕ
		|	НЕ ТаблицаРасходы.НачислятьИзнос
		|	И ТаблицаРасходы.Организация = &Организация
		|	И ТаблицаРасходы.НомерПакета = &НомерПакета
		|
		|	И (ТаблицаРасходы.СуммаУУ <> 0
		|		ИЛИ ТаблицаРасходы.СуммаБУ <> 0)";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

// Формирует текст запроса, отражающий начисленную амортизацию в регистре ПартииПрочихРасходов.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеНачисленнойАмортизацииВПартияхПрочихРасходов() Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период                                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                      КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|			ТОГДА ТаблицаРасходы.ОрганизацияПолучательРасходов
	|		ИНАЧЕ ТаблицаРасходы.Организация
	|	КОНЕЦ                                                       КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                             КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов                               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаАктивовПассивов,
	|	&Ссылка                                                     КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаРасходы.КорНаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                КАК ВидДеятельностиНДС,
	|
	|	ТаблицаРасходы.СуммаУУ                                      КАК Стоимость,
	|	ТаблицаРасходы.СуммаУУ                                      КАК СтоимостьБезНДС,
	|	0                                                           КАК НДСУпр,
	|	ТаблицаРасходы.СуммаБУ + ТаблицаРасходы.СуммаЦФ             КАК СтоимостьРегл,
	|	0                                                           КАК НДСРегл,
	|	ТаблицаРасходы.СуммаПР + ТаблицаРасходы.СуммаПРЦФ           КАК ПостояннаяРазница,
	|	ТаблицаРасходы.СуммаВР + ТаблицаРасходы.СуммаВРЦФ           КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМАизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.АмортизацияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеНаРасходыНИОКР)
	|
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМАизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.АмортизацияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СписаниеНаРасходыНИОКР)
	|
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	НачисленнаяАмортизация КАК ТаблицаРасходы
	|
	|ГДЕ
	|	НЕ ТаблицаРасходы.НачислятьИзнос
	|	И ТаблицаРасходы.Организация = &Организация
	|	И ТаблицаРасходы.НомерПакета = &НомерПакета
	|
	|	И (ТаблицаРасходы.СуммаУУ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаБУ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаНУ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаПР <> 0
	|		ИЛИ ТаблицаРасходы.СуммаВР <> 0
	|		ИЛИ ТаблицаРасходы.СуммаЦФ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаНУЦФ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаПРЦФ <> 0
	|		ИЛИ ТаблицаРасходы.СуммаВРЦФ <> 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса, отражающий обесценение в регистре ПрочиеРасходы.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеОбесцененияВПрочихРасходах() Экспорт
	
	#Область СторноОбесценения // Дт Расходы - Кт Обесценение (сторно)
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаРасходы.ПериодРасчета                      КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)            КАК ВидДвижения,
	|	ТаблицаРасходы.Организация                        КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                   КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов                     КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                  КАК АналитикаРасходов,
	|	ТаблицаРасходы.КорНаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                      КАК ВидДеятельностиНДС,
	|
	|	-ТаблицаРасходы.ОбесценениеУУ                     КАК СуммаСНДС,
	|	-ТаблицаРасходы.ОбесценениеУУ                     КАК СуммаБезНДС,
	|	-ТаблицаРасходы.ОбесценениеУУ                     КАК СуммаБезНДСУпр,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ОбесценениеЦФ)   КАК СуммаСНДСРегл,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ОбесценениеЦФ)   КАК СуммаБезНДСРегл,
	|	0                                                 КАК ПостояннаяРазница,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ОбесценениеЦФ)   КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМАизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМАизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	НачисленнаяАмортизация КАК ТаблицаРасходы
	|
	|ГДЕ
	|	ТаблицаРасходы.Организация = &Организация
	|	И ТаблицаРасходы.НомерПакета = &НомерПакета
	|
	|	И ТаблицаРасходы.ВариантПроводокПоОбесценениюВНА = &СторнироватьКорректировкуОбесценения
	|
	|	И (ТаблицаРасходы.ОбесценениеУУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеБУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеЦФ <> 0)";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса, отражающий обесценение в регистре ПартииПрочихРасходов.
// Используется в документах, которые могут начислять амортизацию.
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
//
Функция ТекстЗапросаТаблицаОтражениеОбесцененияВПартияхПрочихРасходах() Экспорт
	
	#Область СторноОбесценения // Дт Расходы - Кт Обесценение (сторно)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)                      КАК ВидДвижения,
	|	ВЫБОР
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|			ТОГДА ТаблицаРасходы.ОрганизацияПолучательРасходов
	|		ИНАЧЕ ТаблицаРасходы.Организация
	|	КОНЕЦ                                                       КАК Организация,
	|	ТаблицаРасходы.КорПодразделение                             КАК Подразделение,
	|	ТаблицаРасходы.СтатьяРасходов                               КАК СтатьяРасходов,
	|	ТаблицаРасходы.АналитикаРасходов                            КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаАктивовПассивов,
	|	&Ссылка                                                     КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаРасходы.КорНаправлениеДеятельности                   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                                КАК ВидДеятельностиНДС,
	|
	|	-ТаблицаРасходы.ОбесценениеУУ                               КАК Стоимость,
	|	-ТаблицаРасходы.ОбесценениеУУ                               КАК СтоимостьБезНДС,
	|	0                                                           КАК НДСУпр,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ОбесценениеЦФ)             КАК СтоимостьРегл,
	|	0                                                           КАК НДСРегл,
	|	0                                                           КАК ПостояннаяРазница,
	|	-(ТаблицаРасходы.ОбесценениеБУ + ОбесценениеЦФ)             КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМАизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаРасходы.ИдентификаторСтроки КАК ИдентификаторФинЗаписи,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаРасходы.ПередаватьРасходыВДругуюОрганизацию
	|				И ТаблицаРасходы.ОрганизацияПолучательРасходов <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОСизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМАизДругойОрганизации)
	|					КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКРИзДругойОрганизации)
	|				КОНЕЦ
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.ОсновноеСредство)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияОС)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НМА)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНМА)
	|
	|		КОГДА ТаблицаРасходы.ВидВНА = ЗНАЧЕНИЕ(Перечисление.ВидыВнеоборотныхАктивов.НИОКР)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.СторноОбесцененияНИОКР)
	|
	|	КОНЕЦ КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	НачисленнаяАмортизация КАК ТаблицаРасходы
	|
	|ГДЕ
	|	НЕ ТаблицаРасходы.НачислятьИзнос
	|	И ТаблицаРасходы.Организация = &Организация
	|	И ТаблицаРасходы.НомерПакета = &НомерПакета
	|
	|	И ТаблицаРасходы.ВариантПроводокПоОбесценениюВНА = &СторнироватьКорректировкуОбесценения
	|
	|	И (ТаблицаРасходы.ОбесценениеУУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеБУ <> 0
	|		ИЛИ ТаблицаРасходы.ОбесценениеЦФ <> 0)";
	#КонецОбласти
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция МинимальнаяОстаточнаяСтоимость() Экспорт

	Возврат 5;

КонецФункции
 
#КонецОбласти

#Область ПереоценкаОС_НМА

// Добавляет тексты запросов для проведения при переоценке ОС и НМА.
//
// Параметры:
//  Запрос			 - Запрос - Запрос который используется при проведении.
//  ТекстыЗапроса	 - СписокЗначений - Список запросов.
//  ВидОбъектовУчета - Строка - "ОС" или "НМА".
//
Процедура ТекстыЗапросаПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета) Экспорт
	
	ИмяДокумента = ?(ВидОбъектовУчета = "ОС", "Документ.ПереоценкаОС2_4", "Документ.ПереоценкаНМА2_4");
	
	ТекстЗапросаВтТаблицаПереоценки(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаСтоимостьПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаАмортизацияПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаПрочиеРасходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаПартииПрочихРасходовПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	ТекстЗапросаТаблицаТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
КонецПроцедуры

#КонецОбласти

#Область ВыбытиеОС

// Формирует текст запроса для отражения списания стоимости ОС в регистре "СтоимостьОС".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 	
// Возвращаемое значение:
//	Строка -  
Функция ТекстЗапросаСписанияСтоимостиОС(ТекстыЗапроса) Экспорт
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Списание стоимости
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	ТаблицаОС.Местонахождение              КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьНУ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК СтоимостьНУ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьПР 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК СтоимостьПР,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА &ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.СтоимостьНУ + ТаблицаОС.СтоимостьПР
	|			ИНАЧЕ 0 
	|		КОНЕЦ                              КАК СтоимостьВР,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК СтоимостьЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьНУЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК СтоимостьНУЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьПРЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА &ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.СтоимостьНУЦФ + ТаблицаОС.СтоимостьПРЦФ
	|			ИНАЧЕ 0 
	|		КОНЕЦ                              КАК СтоимостьВРЦФ,
	|
	|	0                                      КАК ПредварительнаяСтоимость,
	|	0                                      КАК ПредварительнаяСтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизационнаяПремия 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК АмортизационнаяПремия,
	|
	|	0                                      КАК РезервПереоценкиСтоимости,
	|	0                                      КАК РезервПереоценкиСтоимостиРегл,
	|	0                                      КАК ПриростСтоимости,
	|	0                                      КАК ПриростСтоимостиРегл,
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|
	|	&ХО_СписаниеСтоимостиОС                КАК ХозяйственнаяОперация,
	|	&ОтражатьВРеглУчете                    КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|	
	|	ТаблицаОС.ИдентификаторСтроки          КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеСтоимостиОС       КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	ТаблицаОС.Местонахождение              КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл,
	|	0                                      КАК СтоимостьНУ,
	|	0                                      КАК СтоимостьПР,
	|	0                                      КАК СтоимостьВР,
	|	0                                      КАК СтоимостьЦФ,
	|	0                                      КАК СтоимостьНУЦФ,
	|	0                                      КАК СтоимостьПРЦФ,
	|	0                                      КАК СтоимостьВРЦФ,
	|
	|	0                                      КАК ПредварительнаяСтоимость,
	|	0                                      КАК ПредварительнаяСтоимостьРегл,
	|	0                                      КАК АмортизационнаяПремия,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК РезервПереоценкиСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0                                      КАК ПриростСтоимости,
	|	0                                      КАК ПриростСтоимостиРегл,
	|
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|
	|	&ХО_СписаниеРезерваПереоценкиСтоимостиОС КАК ХозяйственнаяОперация,
	|	&ОтражатьВБУ                           КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                           КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиСтоимости <> 0
	|		ИЛИ &ОтражатьВБУ И ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	НЕОПРЕДЕЛЕНО                           КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл,
	|	0                                      КАК СтоимостьНУ,
	|	0                                      КАК СтоимостьПР,
	|	0                                      КАК СтоимостьВР,
	|	0                                      КАК СтоимостьЦФ,
	|	0                                      КАК СтоимостьНУЦФ,
	|	0                                      КАК СтоимостьПРЦФ,
	|	0                                      КАК СтоимостьВРЦФ,
	|
	|	0                                      КАК ПредварительнаяСтоимость,
	|	0                                      КАК ПредварительнаяСтоимостьРегл,
	|	0                                      КАК АмортизационнаяПремия,
	|
	|	0                                      КАК РезервПереоценкиСтоимости,
	|	0                                      КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ПриростСтоимости 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ПриростСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                  КАК ПриростСтоимостиРегл,
	|
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|
	|	&ХО_СписаниеРезерваПереоценкиСтоимостиОС КАК ХозяйственнаяОперация,
	|	&ОтражатьВБУ                           КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                           КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.ПриростСтоимости <> 0
	|		ИЛИ &ОтражатьВБУ И ТаблицаОС.ПриростСтоимостиРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание предварительной стоимости
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	ТаблицаОС.Местонахождение              КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство             КАК ОсновноеСредство,
	|
	|	0                                      КАК Стоимость,
	|	0                                      КАК СтоимостьРегл,
	|	0                                      КАК СтоимостьНУ,
	|	0                                      КАК СтоимостьПР,
	|	0                                      КАК СтоимостьВР,
	|	0                                      КАК СтоимостьЦФ,
	|	0                                      КАК СтоимостьНУЦФ,
	|	0                                      КАК СтоимостьПРЦФ,
	|	0                                      КАК СтоимостьВРЦФ,
	|
	|	ТаблицаОС.ПредварительнаяСтоимость     КАК ПредварительнаяСтоимость,
	|	ТаблицаОС.ПредварительнаяСтоимостьРегл КАК ПредварительнаяСтоимостьРегл,
	|
	|	0                                      КАК АмортизационнаяПремия,
	|	0                                      КАК РезервПереоценкиСтоимости,
	|	0                                      КАК РезервПереоценкиСтоимостиРегл,
	|	0                                      КАК ПриростСтоимости,
	|	0                                      КАК ПриростСтоимостиРегл,
	|	0                                      КАК НеУчитываемаяСтоимостьНУ,
	|	0                                      КАК ЗалоговаяСтоимость,
	|	
	|	ТаблицаОС.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                    КАК Арендатор,
	|
	|	&ХозяйственнаяОперация                 КАК ХозяйственнаяОперация,
	|	&ОтражатьВРеглУчете                    КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                     КАК ОтражатьВУпрУчете,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи  КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                           КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|	И &ОтражатьВУпрУчете
	|	И (ТаблицаОС.ПредварительнаяСтоимость <> 0
	|		ИЛИ ТаблицаОС.ПредварительнаяСтоимостьРегл <> 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения списания амортизации ОС в регистре "АмортизацияОС".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 	
// Возвращаемое значение:
//	Строка - 
Функция ТекстЗапросаСписанияАмортизацииОС(ТекстыЗапроса) Экспорт

	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Списание амортизации
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	ТаблицаОС.Местонахождение                    КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияНУ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК АмортизацияНУ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияПР 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК АмортизацияПР,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА &ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.АмортизацияНУ + ТаблицаОС.АмортизацияПР
	|			ИНАЧЕ 0 
	|		КОНЕЦ                                    КАК АмортизацияВР,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ                                        КАК АмортизацияЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияНУЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК АмортизацияНУЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияПРЦФ 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА &ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.АмортизацияНУЦФ + ТаблицаОС.АмортизацияПРЦФ
	|			ИНАЧЕ 0 
	|		КОНЕЦ                                    КАК АмортизацияВРЦФ,
	|
	|	0                                            КАК РезервПереоценкиАмортизации,
	|	0                                            КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	&ХО_СписаниеАмортизацииОС                    КАК ХозяйственнаяОперация,
	|	ТаблицаОС.НачислятьИзнос                     КАК НачислятьИзнос,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеАмортизацииОС           КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	втСписаниеАмортизацииОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.Амортизация <> 0
	|		ИЛИ &ОтражатьВБУ И (ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ) <> 0
	|		ИЛИ &ОтражатьВНУ И (ТаблицаОС.АмортизацияНУ + ТаблицаОС.АмортизацияНУЦФ) <> 0
	|		ИЛИ &ОтражатьВНУ И (ТаблицаОС.АмортизацияПР + ТаблицаОС.АмортизацияПРЦФ) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	ТаблицаОС.Местонахождение                    КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство                   КАК ОсновноеСредство,
	|
	|	0                                            КАК Амортизация,
	|	0                                            КАК АмортизацияРегл,
	|	0                                            КАК АмортизацияНУ,
	|	0                                            КАК АмортизацияПР,
	|	0                                            КАК АмортизацияВР,
	|	0                                            КАК АмортизацияЦФ,
	|	0                                            КАК АмортизацияНУЦФ,
	|	0                                            КАК АмортизацияПРЦФ,
	|	0                                            КАК АмортизацияВРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК РезервПереоценкиАмортизации,
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	&ХО_СписаниеРезерваПереоценкиАмортизацииОС   КАК ХозяйственнаяОперация,
	|	ТаблицаОС.НачислятьИзнос                     КАК НачислятьИзнос,
	|	
	|	&ИдентификаторНеиспользуемойФинЗаписи        КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                 КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	втСписаниеАмортизацииОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиАмортизации <> 0
	|		ИЛИ &ОтражатьВБУ И ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

/// Формирует текст запроса для отражения списания обесценения ОС в регистре "ОбесценениеВНА".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 	
// Возвращаемое значение:
//	Строка - 
Функция ТекстЗапросаСписанияОбесцененияОС(ТекстыЗапроса) Экспорт

	ТекстЗапросаТаблицаВтСписаниеОбесцененияОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Списание обесценения
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)       КАК ВидДвижения,
	|	&Ссылка                                      КАК Регистратор,
	|	&Период                                      КАК Период,
	|	&Организация                                 КАК Организация,
	|	ТаблицаОС.Местонахождение                    КАК Подразделение,
	|	ТаблицаОС.ОсновноеСредство                   КАК ВнеоборотныйАктив,
	|	ТаблицаОС.ЕГДС                               КАК ЕГДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК ОбесценениеУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ                                        КАК ОбесценениеРегл,
	|
	|
	|	ТаблицаОС.ГруппаФинансовогоУчета             КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	&ХО_СписаниеОбесцененияОС                    КАК ХозяйственнаяОперация,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеОбесцененияОС           КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ВтСписаниеОбесцененияОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.ОбесценениеУпр <> 0
	|		ИЛИ &ОтражатьВБУ И (ТаблицаОС.ОбесценениеРегл) <> 0)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения выбытия ОС в регистре "ДвиженияДоходыРасходыПрочиеАктивыПассивы".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВыбытияОСДвиженияДоходыРасходыПрочиеАктивыПассивы(ТекстыЗапроса) Экспорт

	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);

	ТекстЗапроса =
	// Списание стоимости Дт 01.09 - Кт 01.01
	"ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&ХО_СписаниеСтоимостиОС           КАК ХозяйственнаяОперация,
	|	&Организация                      КАК Организация,
	|
	|	&Подразделение                    КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК Статья,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство        КАК АналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета  КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                    КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	&СтатьяВыбытияОС                  КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаДоходов,
	|	ТаблицаОС.ОсновноеСредство        КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                      КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ                             КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ                             КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ                             КАК СуммаРегл
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.Стоимость <> 0
	|		ИЛИ &ОтражатьВБУ И (ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Списание амортизации Дт 02.01 - Кт 01.09
	|ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&ХО_СписаниеАмортизацииОС         КАК ХозяйственнаяОперация,
	|	&Организация                      КАК Организация,
	|
	|	&Подразделение                    КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяВыбытияОС                  КАК Статья,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаДоходов,
	|	ТаблицаОС.ОсновноеСредство        КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                      КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                      КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                    КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                      КАК КорАналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство        КАК КорАналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета  КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ                             КАК Сумма,
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ                             КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ                             КАК СуммаРегл
	|ИЗ
	|	втСписаниеАмортизацииОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.Амортизация <> 0
	|		ИЛИ &ОтражатьВБУ И (ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки амортизации ОС
	|ВЫБРАТЬ
	|	&Период                                       КАК Период,
	|	&ХО_СписаниеРезерваПереоценкиАмортизацииОС    КАК ХозяйственнаяОперация,
	|	&Организация                                  КАК Организация,
	|
	|	&Подразделение                                КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности             КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                                  КАК Статья,
	|	НЕОПРЕДЕЛЕНО                                  КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК АналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство                    КАК АналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета              КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                                КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности             КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбытки                       КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                                  КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                  КАК КорАналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета              КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВРеглУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	втСписаниеАмортизацииОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиАмортизации <> 0
	|		ИЛИ &ОтражатьВБУ И ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Списание резерва переоценки стоимости ОС
	|ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&ХО_СписаниеРезерваПереоценкиСтоимостиОС   КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности          КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбытки                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета           КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаОС.НаправлениеДеятельности          КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	ТаблицаОС.ОсновноеСредство                 КАК КорАналитикаАктивовПассивов,
	|	ТаблицаОС.ГруппаФинансовогоУчета           КАК КорГруппаФинансовогоУчета,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА &ОтражатьВРеглУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете И ТаблицаОС.РезервПереоценкиСтоимости <> 0
	|		ИЛИ &ОтражатьВБУ И ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения выбытия ОС в регистре "ДвиженияПоПрочимАктивамПассивам".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВыбытияОСДвиженияПоПрочимАктивамПассивам(ТекстыЗапроса) Экспорт
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);

	ТекстЗапроса =
	// Резерв переоценки амортизации
	"ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&Организация                      КАК Организация,
	|	&Подразделение                    КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК Статья,
	|	ТаблицаОС.ОсновноеСредство        КАК Аналитика,
	|
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет) КАК ДебетКредит,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеРезерваПереоценкиАмортизацииОС КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втСписаниеАмортизацииОС КАК ТаблицаОС
	|ГДЕ
	|	(&ОтражатьВУпрУчете
	|			И ТаблицаОС.РезервПереоценкиАмортизации <> 0 
	|		ИЛИ &ОтражатьВБУ
	|			И ТаблицаОС.РезервПереоценкиАмортизацииРегл <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Резерв переоценки стоимости
	|ВЫБРАТЬ
	|	&Период                           КАК Период,
	|	&Организация                      КАК Организация,
	|	&Подразделение                    КАК Подразделение,
	|	ТаблицаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                      КАК Статья,
	|	ТаблицаОС.ОсновноеСредство        КАК Аналитика,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиСчетовУчетаПрочихОпераций.ПустаяСсылка) КАК НастройкаСчетовУчета,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит) КАК ДебетКредит,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеРезерваПереоценкиСтоимостиОС КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|ГДЕ
	|	&ОтражатьВУпрУчете
	|			И ТаблицаОС.РезервПереоценкиСтоимости <> 0
	|		ИЛИ &ОтражатьВБУ
	|			И ТаблицаОС.РезервПереоценкиСтоимостиРегл <> 0";

	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для отражения выбытия ОС в регистре "ПрочиеРасходы".
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
// 
// Возвращаемое значение:
//  Строка - Текст запроса.
Функция ТекстЗапросаВыбытияОСВтИсходныеПрочиеРасходы(ТекстыЗапроса) Экспорт
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);
	
	СписокЗапросовОбъединение = Новый Массив;

	#Область СписаниеСтоимостиОС // Дт 01.09 - Кт 01.01
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                         КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)          КАК ВидДвижения,
	|	&Организация                                    КАК Организация,
	|	ТаблицаОС.Местонахождение                       КАК Подразделение,
	|	&СтатьяВыбытияОС                                КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА СтрокаВладельца.ОСВладелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ СтрокаВладельца.ОСВладелец
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|
	|	ТаблицаОС.НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК ВидДеятельностиНДС,
	|	
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Стоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.СтоимостьПР + ТаблицаОС.СтоимостьПРЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.СтоимостьРегл + ТаблицаОС.СтоимостьЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА &ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.СтоимостьНУ + ТаблицаОС.СтоимостьНУЦФ + ТаблицаОС.СтоимостьПР + ТаблицаОС.СтоимостьПРЦФ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеСтоимостиОС                         КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                    КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеСтоимостиОС                КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО ТаблицаОС.ОсновноеСредство = СтрокаВладельца.ОсновноеСредство";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область СписаниеАмортизацииОС // Дт 02.01 - Кт 01.09
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                         КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
	|	&Организация                                    КАК Организация,
	|	ТаблицаОС.Местонахождение                       КАК Подразделение,
	|	&СтатьяВыбытияОС                                КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА СтрокаВладельца.ОСВладелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ СтрокаВладельца.ОСВладелец
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|	ТаблицаОС.НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                    КАК ВидДеятельностиНДС,
	|	
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.Амортизация
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВНУ 
	|			ТОГДА ТаблицаОС.АмортизацияПР + ТаблицаОС.АмортизацияПРЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.АмортизацияРегл + ТаблицаОС.АмортизацияЦФ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|		- ВЫБОР 
	|			КОГДА &ОтражатьВНУ 
	|				ТОГДА ТаблицаОС.АмортизацияНУ + ТаблицаОС.АмортизацияНУЦФ + ТаблицаОС.АмортизацияПР + ТаблицаОС.АмортизацияПРЦФ
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеАмортизацииОС                       КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                    КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеАмортизацииОС              КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	втСписаниеАмортизацииОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО ТаблицаОС.ОсновноеСредство = СтрокаВладельца.ОсновноеСредство";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	#Область СписаниеОбесцененияОС // Дт 02.04 - Кт 01.09
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                         КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)          КАК ВидДвижения,
	|	&Организация                                    КАК Организация,
	|	ТаблицаОС.Местонахождение                       КАК Подразделение,
	|	&СтатьяВыбытияОС                                КАК СтатьяРасходов,
	|
	|	ВЫБОР
	|		КОГДА СтрокаВладельца.ОСВладелец = ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			ТОГДА ТаблицаОС.ОсновноеСредство
	|		ИНАЧЕ СтрокаВладельца.ОСВладелец
	|	КОНЕЦ                                           КАК АналитикаРасходов,
	|
	|	ТаблицаОС.НаправлениеДеятельности               КАК НаправлениеДеятельности,
	|
	|	НЕОПРЕДЕЛЕНО                                    КАК ВидДеятельностиНДС,
	|	
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВУпрУчете 
	|			ТОГДА ТаблицаОС.ОбесценениеУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|
	|	0 КАК ПостояннаяРазница,
	|
	|	ВЫБОР 
	|		КОГДА &ОтражатьВБУ 
	|			ТОГДА ТаблицаОС.ОбесценениеРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВременнаяРазница,
	|
	|	&ХО_СписаниеОбесцененияОС                       КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                    КАК АналитикаУчетаНоменклатуры,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                   КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_СписаниеОбесцененияОС              КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	втСписаниеОбесцененияОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО ТаблицаОС.ОсновноеСредство = СтрокаВладельца.ОсновноеСредство";
	СписокЗапросовОбъединение.Добавить(ТекстЗапроса);
	#КонецОбласти
		
	ТекстЗапроса = СтрСоединить(СписокЗапросовОбъединение, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтОстаточнаяСтоимостьОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втОстаточнаяСтоимостьОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Остаточная стоимость при полном списании
	|ВЫБРАТЬ
	|	&Ссылка                                                   КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                                КАК ОсновноеСредство,
	|
	|	ЕСТЬNULL(СтоимостьОС.Стоимость, 0) - ЕСТЬNULL(АмортизацияОС.Амортизация, 0)         КАК Стоимость,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) КАК СтоимостьРегл,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0)     КАК СтоимостьНУ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0)     КАК СтоимостьПР,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0)     КАК СтоимостьВР,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)     КАК СтоимостьЦФ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) КАК СтоимостьНУЦФ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) КАК СтоимостьПРЦФ,
	|	ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) КАК СтоимостьВРЦФ,
	|
	|	ЕСТЬNULL(СтоимостьОС.АмортизационнаяПремия, 0)            КАК АмортизационнаяПремия,
	|	
	|	ТаблицаОС.Местонахождение                                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета                          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности                         КАК НаправлениеДеятельности,
	|	ТаблицаОС.СтатьяДоходов                                   КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов                                КАК АналитикаДоходов,
	|	
	|	ТаблицаОС.ИдентификаторСтроки                             КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ втОстаточнаяСтоимостьОС
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|			ПО ТаблицаОС.ОсновноеСредство = СтоимостьОС.ОбъектУчета
	|		И СтоимостьОС.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО ТаблицаОС.ОсновноеСредство = АмортизацияОС.ОбъектУчета
	|			И АмортизацияОС.Ссылка = &Ссылка
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|	И (ЕСТЬNULL(СтоимостьОС.Стоимость, 0) - ЕСТЬNULL(АмортизацияОС.Амортизация, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьВР, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) <> 0
	|		ИЛИ ЕСТЬNULL(СтоимостьОС.СтоимостьВРЦФ, 0) - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) <> 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Остаточная стоимость при частичном списании
	|ВЫБРАТЬ
	|	&Ссылка                                                 КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                              КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Стоимость - ЕСТЬNULL(АмортизацияОС.Амортизация, 0)         КАК Стоимость,
	|	ТаблицаОС.СтоимостьРегл - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) КАК СтоимостьРегл,
	|	ТаблицаОС.СтоимостьНУ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0)     КАК СтоимостьНУ,
	|	ТаблицаОС.СтоимостьПР - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0)     КАК СтоимостьПР,
	|	ТаблицаОС.СтоимостьВР - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0)     КАК СтоимостьВР,
	|	ТаблицаОС.СтоимостьЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)     КАК СтоимостьЦФ,
	|	ТаблицаОС.СтоимостьНУЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) КАК СтоимостьНУЦФ,
	|	ТаблицаОС.СтоимостьПРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) КАК СтоимостьПРЦФ,
	|	ТаблицаОС.СтоимостьВРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) КАК СтоимостьВРЦФ,
	|
	|	ТаблицаОС.АмортизационнаяПремия                         КАК АмортизационнаяПремия,
	|	
	|	ТаблицаОС.Местонахождение                               КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета                        КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности                       КАК НаправлениеДеятельности,
	|	ТаблицаОС.СтатьяДоходов                                 КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов                              КАК АналитикаДоходов,
	|
	|	ТаблицаОС.ИдентификаторСтроки                           КАК ИдентификаторСтроки
	|
	|ИЗ
	|	втСписаниеСтоимостиОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСписаниеАмортизацииОС КАК АмортизацияОС
	|			ПО ТаблицаОС.ОсновноеСредство = АмортизацияОС.ОсновноеСредство
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|	И (ТаблицаОС.Стоимость - ЕСТЬNULL(АмортизацияОС.Амортизация, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьРегл - ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьНУ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьПР - ЕСТЬNULL(АмортизацияОС.АмортизацияПР, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьВР - ЕСТЬNULL(АмортизацияОС.АмортизацияВР, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьНУЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияНУЦФ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьПРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияПРЦФ, 0) <> 0
	|		ИЛИ ТаблицаОС.СтоимостьВРЦФ - ЕСТЬNULL(АмортизацияОС.АмортизацияВРЦФ, 0) <> 0)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втСписаниеСтоимостиОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"// Полное списание стоимости
	|ВЫБРАТЬ
	|	&Ссылка                               КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство            КАК ОсновноеСредство,
	|
	|	СтоимостьОС.Стоимость                 КАК Стоимость,
	|	СтоимостьОС.СтоимостьРегл             КАК СтоимостьРегл,
	|	СтоимостьОС.СтоимостьНУ               КАК СтоимостьНУ,
	|	СтоимостьОС.СтоимостьПР               КАК СтоимостьПР,
	|	СтоимостьОС.СтоимостьВР               КАК СтоимостьВР,
	|	СтоимостьОС.СтоимостьЦФ               КАК СтоимостьЦФ,
	|	СтоимостьОС.СтоимостьНУЦФ             КАК СтоимостьНУЦФ,
	|	СтоимостьОС.СтоимостьПРЦФ             КАК СтоимостьПРЦФ,
	|	СтоимостьОС.СтоимостьВРЦФ             КАК СтоимостьВРЦФ,
	|
	|	СтоимостьОС.АмортизационнаяПремия         КАК АмортизационнаяПремия,
	|	СтоимостьОС.РезервПереоценкиСтоимости     КАК РезервПереоценкиСтоимости,
	|	СтоимостьОС.РезервПереоценкиСтоимостиРегл КАК РезервПереоценкиСтоимостиРегл,
	|	СтоимостьОС.ПриростСтоимости              КАК ПриростСтоимости,
	|	СтоимостьОС.ПриростСтоимостиРегл          КАК ПриростСтоимостиРегл,
	|	СтоимостьОС.ПредварительнаяСтоимость      КАК ПредварительнаяСтоимость,
	|	СтоимостьОС.ПредварительнаяСтоимостьРегл  КАК ПредварительнаяСтоимостьРегл,
	|	СтоимостьОС.ЗалоговаяСтоимость            КАК ЗалоговаяСтоимость,
	|
	|	1                                     КАК ДоляСписания,
	|	1                                     КАК ДоляСписанияБУ,
	|	1                                     КАК ДоляСписанияЦФ,
	|	1                                     КАК ДоляСписанияНУ,
	|	1                                     КАК ДоляСписанияНУЦФ,
	|	1                                     КАК ДоляСписанияПР,
	|	1                                     КАК ДоляСписанияПРЦФ,
	|	
	|	ТаблицаОС.Местонахождение             КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета      КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                   КАК Арендатор,
	|	ТаблицаОС.НачислятьИзнос              КАК НачислятьИзнос,
	|	ТаблицаОС.СтатьяДоходов               КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов            КАК АналитикаДоходов,
	|	
	|	ТаблицаОС.ИдентификаторСтроки         КАК ИдентификаторСтроки
	|
	|ПОМЕСТИТЬ втСписаниеСтоимостиОС
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО ТаблицаОС.ОсновноеСредство = СтоимостьОС.ОбъектУчета
	|			И СтоимостьОС.Ссылка = &Ссылка
	|
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Частичное списание стоимости
	|ВЫБРАТЬ
	|	&Ссылка                    КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|
	|	ТаблицаОС.СуммаСписанияУУ  КАК Стоимость,
	|	ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК СтоимостьРегл,
	|	ТаблицаОС.СуммаСписанияНУ - ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ КАК СтоимостьНУ,
	|	ТаблицаОС.СуммаСписанияПР - ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР КАК СтоимостьПР,
	|
	|	ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияНУ - ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияПР - ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР) КАК ЧИСЛО(31,2)) КАК СтоимостьВР,
	|
	|	ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ КАК СтоимостьЦФ,
	|	ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ КАК СтоимостьНУЦФ,
	|	ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР КАК СтоимостьПРЦФ,
	|
	|	ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ) КАК ЧИСЛО(31,2))
	|	- ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР) КАК ЧИСЛО(31,2)) КАК СтоимостьВРЦФ,
	|
	|	СтоимостьОС.АмортизационнаяПремия КАК АмортизационнаяПремия,
	|
	|	СтоимостьОС.РезервПереоценкиСтоимости
	|	* ВЫБОР КОГДА СтоимостьОС.Стоимость ЕСТЬ NULL ИЛИ СтоимостьОС.Стоимость = 0
	|		ТОГДА 1
	|		ИНАЧЕ ТаблицаОС.СуммаСписанияУУ / СтоимостьОС.Стоимость
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|
	|	СтоимостьОС.РезервПереоценкиСтоимостиРегл
	|	* ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ (ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) / СтоимостьОС.СтоимостьРегл
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	СтоимостьОС.ПриростСтоимости
	|	* ВЫБОР КОГДА СтоимостьОС.Стоимость ЕСТЬ NULL ИЛИ СтоимостьОС.Стоимость = 0
	|		ТОГДА 1
	|		ИНАЧЕ ТаблицаОС.СуммаСписанияУУ / СтоимостьОС.Стоимость
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	СтоимостьОС.ПриростСтоимостиРегл
	|	* ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ (ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) / СтоимостьОС.СтоимостьРегл
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	0 КАК ПредварительнаяСтоимость,
	|	0 КАК ПредварительнаяСтоимостьРегл,
	|	0 КАК ЗалоговаяСтоимость,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.Стоимость, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ(ТаблицаОС.СуммаСписанияУУ / СтоимостьОС.Стоимость КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписания,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияБУ - ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) / СтоимостьОС.СтоимостьРегл КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияБУ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияБУ * СтоимостьОС.ДоляЦФБУ) / СтоимостьОС.СтоимостьЦФ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияЦФ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияНУ - ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ) / СтоимостьОС.СтоимостьНУ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияНУ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьНУЦФ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияНУ * СтоимостьОС.ДоляЦФНУ) / СтоимостьОС.СтоимостьНУЦФ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияНУЦФ,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияПР - ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР) / СтоимостьОС.СтоимостьПР КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияПР,
	|
	|	ВЫБОР КОГДА ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0) = 0
	|		ТОГДА 1
	|		ИНАЧЕ ВЫРАЗИТЬ((ТаблицаОС.СуммаСписанияПР * СтоимостьОС.ДоляЦФПР) / СтоимостьОС.СтоимостьПРЦФ КАК ЧИСЛО(31, 10))
	|	КОНЕЦ КАК ДоляСписанияПРЦФ,
	|
	|	ТаблицаОС.Местонахождение             КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета      КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности     КАК НаправлениеДеятельности,
	|	ТаблицаОС.Арендатор                   КАК Арендатор,
	|	ТаблицаОС.НачислятьИзнос              КАК НачислятьИзнос,
	|	ТаблицаОС.СтатьяДоходов               КАК СтатьяДоходов,
	|	ТаблицаОС.АналитикаДоходов            КАК АналитикаДоходов,
	|	
	|	ТаблицаОС.ИдентификаторСтроки         КАК ИдентификаторСтроки
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО ТаблицаОС.ОсновноеСредство = СтоимостьОС.ОбъектУчета
	|			И СтоимостьОС.Ссылка = &Ссылка
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтСписаниеАмортизацииОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втСписаниеАмортизацииОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписаниеСтоимостиОС(ТекстыЗапроса);
	
	ТекстЗапроса =
	"// Полное списание амортизации
	|ВЫБРАТЬ
	|	&Ссылка                                   КАК Ссылка,
	|	ЕСТЬNULL(СтрокаВладельца.ОсновноеСредство, ТаблицаОС.ОсновноеСредство) КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	ТаблицаОС.НачислятьИзнос                  КАК НачислятьИзнос,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|
	|	АмортизацияОС.Амортизация                 КАК Амортизация,
	|	АмортизацияОС.АмортизацияРегл             КАК АмортизацияРегл,
	|	АмортизацияОС.АмортизацияНУ               КАК АмортизацияНУ,
	|	АмортизацияОС.АмортизацияПР               КАК АмортизацияПР,
	|	АмортизацияОС.АмортизацияВР               КАК АмортизацияВР,
	|	АмортизацияОС.АмортизацияЦФ               КАК АмортизацияЦФ,
	|	АмортизацияОС.АмортизацияНУЦФ             КАК АмортизацияНУЦФ,
	|	АмортизацияОС.АмортизацияПРЦФ             КАК АмортизацияПРЦФ,
	|	АмортизацияОС.АмортизацияВРЦФ             КАК АмортизацияВРЦФ,
	|	АмортизацияОС.РезервПереоценкиАмортизации     КАК РезервПереоценкиАмортизации,
	|	АмортизацияОС.РезервПереоценкиАмортизацииРегл КАК РезервПереоценкиАмортизацииРегл
	|
	|ПОМЕСТИТЬ втСписаниеАмортизацииОС
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО СтрокаВладельца.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|			И СтрокаВладельца.ОсновноеСредство.ТипОС В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС)) 
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО АмортизацияОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|			И АмортизацияОС.Ссылка = &Ссылка
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|// Частичное списание амортизации
	|ВЫБРАТЬ
	|	&Ссылка                                   КАК Ссылка,
	|	ТаблицаОС.ОсновноеСредство                КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	ТаблицаОС.НачислятьИзнос                  КАК НачислятьИзнос,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|
	// Амортизация
	|	ВЫБОР
	|		КОГДА АмортизацияОС.Амортизация = ЕСТЬNULL(СтоимостьОС.Стоимость, 0)
	|			ТОГДА СписаниеСтоимостиОС.Стоимость
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * СписаниеСтоимостиОС.ДоляСписания КАК ЧИСЛО(31,2))     
	|	КОНЕЦ КАК Амортизация,
	|
	// АмортизацияРегл
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияРегл = ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьРегл
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * СписаниеСтоимостиОС.ДоляСписанияБУ КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	// АмортизацияНУ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияНУ = ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьНУ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУ * СписаниеСтоимостиОС.ДоляСписанияНУ КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияНУ,
	|
	// АмортизацияПР
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияПР = ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьПР
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПР * СписаниеСтоимостиОС.ДоляСписанияПР КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияПР,
	|
	// АмортизацияВР
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияРегл = ЕСТЬNULL(СтоимостьОС.СтоимостьРегл, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьРегл
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * СписаниеСтоимостиОС.ДоляСписанияБУ КАК ЧИСЛО(31,2))
	|	КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияНУ = ЕСТЬNULL(СтоимостьОС.СтоимостьНУ, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьНУ
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУ * СписаниеСтоимостиОС.ДоляСписанияНУ КАК ЧИСЛО(31,2))
	|			КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияПР = ЕСТЬNULL(СтоимостьОС.СтоимостьПР, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьПР
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПР * СписаниеСтоимостиОС.ДоляСписанияПР КАК ЧИСЛО(31,2))
	|			КОНЕЦ КАК АмортизацияВР,
	|
	// АмортизацияЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияЦФ  * СписаниеСтоимостиОС.ДоляСписанияЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	
	// АмортизацияНУЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУЦФ * СписаниеСтоимостиОС.ДоляСписанияНУЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияНУЦФ,
	|
	
	// АмортизацияПРЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияПРЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьПРЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПРЦФ * СписаниеСтоимостиОС.ДоляСписанияПРЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	// АмортизацияВРЦФ
	|	ВЫБОР
	|		КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|			ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|		ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияЦФ  * СписаниеСтоимостиОС.ДоляСписанияЦФ  КАК ЧИСЛО(31,2))
	|	КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьЦФ, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьЦФ
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУЦФ * СписаниеСтоимостиОС.ДоляСписанияНУЦФ  КАК ЧИСЛО(31,2))
	|			КОНЕЦ
	|		- ВЫБОР
	|				КОГДА АмортизацияОС.АмортизацияПРЦФ = ЕСТЬNULL(СтоимостьОС.СтоимостьПРЦФ, 0)
	|					ТОГДА СписаниеСтоимостиОС.СтоимостьПРЦФ
	|				ИНАЧЕ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияПРЦФ * СписаниеСтоимостиОС.ДоляСписанияПРЦФ  КАК ЧИСЛО(31,2))
	|			КОНЕЦ КАК АмортизацияВРЦФ,
	|
	|	ВЫРАЗИТЬ(АмортизацияОС.РезервПереоценкиАмортизации * СписаниеСтоимостиОС.ДоляСписания КАК ЧИСЛО(31,2))         КАК РезервПереоценкиАмортизации,
	|	ВЫРАЗИТЬ(АмортизацияОС.РезервПереоценкиАмортизацииРегл * СписаниеСтоимостиОС.ДоляСписанияБУ КАК ЧИСЛО(31,2))   КАК РезервПереоценкиАмортизацииРегл
	|
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО АмортизацияОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|			И АмортизацияОС.Ссылка = &Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСписаниеСтоимостиОС КАК СписаниеСтоимостиОС
	|		ПО АмортизацияОС.ОбъектУчета = СписаниеСтоимостиОС.ОсновноеСредство
	|			И АмортизацияОС.Ссылка = СписаниеСтоимостиОС.Ссылка
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьОС
	|		ПО АмортизацияОС.ОбъектУчета = СтоимостьОС.ОбъектУчета
	|			И АмортизацияОС.Ссылка = СтоимостьОС.Ссылка
	|ГДЕ
	|	&ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
Процедура ТекстЗапросаТаблицаВтСписаниеОбесцененияОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "втСписаниеОбесцененияОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"// Полное списание
	|ВЫБРАТЬ
	|	&Ссылка                                   КАК Ссылка,
	|	ЕСТЬNULL(СтрокаВладельца.ОсновноеСредство, ТаблицаОС.ОсновноеСредство) КАК ОсновноеСредство,
	|
	|	ТаблицаОС.Местонахождение                 КАК Местонахождение,
	|	ТаблицаОС.ГруппаФинансовогоУчета          КАК ГруппаФинансовогоУчета,
	|	ТаблицаОС.НаправлениеДеятельности         КАК НаправлениеДеятельности,
	|	
	|	ТаблицаОС.ИдентификаторСтроки             КАК ИдентификаторСтроки,
	|	
	|	ОбесценениеОС.ЕГДС                        КАК ЕГДС,
	|
	|	ОбесценениеОС.ОбесценениеУпр              КАК ОбесценениеУпр,
	|	ОбесценениеОС.ОбесценениеРегл             КАК ОбесценениеРегл
	|ПОМЕСТИТЬ втСписаниеОбесцененияОС
	|ИЗ
	|	втТаблицаОС КАК ТаблицаОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОС КАК СтрокаВладельца
	|		ПО СтрокаВладельца.ИдентификаторСтроки = ТаблицаОС.ИдентификаторСтроки
	|			И СтрокаВладельца.ОсновноеСредство.ТипОС В (
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ОбъектЭксплуатации),
	|				ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС)) 
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОбесценениеВНА КАК ОбесценениеОС
	|		ПО ОбесценениеОС.ОбъектУчета = ТаблицаОС.ОсновноеСредство
	|			И ОбесценениеОС.Ссылка = &Ссылка
	|ГДЕ
	|	&ХозяйственнаяОперация <> ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное)
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Аренда

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтРасходыПриПрекращенииДоговораАренды(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втРасходыПриПрекращенииДоговораАренды";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаПустыеТаблицыОтложенныхДвижений(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР
	|		КОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) > 0
	|
	|			ТОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0))
	| 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				И (РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0)) > 0
	|
	|			ТОГДА (РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0))
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|				И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) > 0
	|
	|			ТОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуУпр
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	 
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И (РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0)) > 0
	|
	|			ТОГДА (РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0))
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) > 0
	|
	|			ТОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуРегл
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	&ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&ХО_ОтражениеАрендныхОбязательствВРасходах КАК ХозяйственнаяОперация,
	|	&НастройкаХО_ОтражениеАрендныхОбязательствВРасходах КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ втРасходыПриПрекращенииДоговораАренды
	|ИЗ
	|	ВТ_РасчетыПоФинансовымИнструментам КАК РасчетыОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзменениеАрендныхОбязательств КАК втИзменениеАрендныхОбязательств
	|		ПО ИСТИНА
	|ГДЕ
	|	РасчетыОстатки.Ссылка = &Ссылка
	|	И РасчетыОстатки.Договор = &Договор
	|	И РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства)
	|
	|	И (ВЫБОР
	|			КОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) > 0
	|
	|				ТОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0))
	| 
	|			ИНАЧЕ 0
	|		КОНЕЦ <> 0
	|	
	|		ИЛИ ВЫБОР
	|				КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|						И (РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0)) > 0
	|
	|					ТОГДА (РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0))
	|
	|				КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|						И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) > 0
	|
	|					ТОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуУпр
	|
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|		
	|		ИЛИ ВЫБОР
	|				КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|						И (РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0)) > 0
	|
	|					ТОГДА (РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0))
	|
	|				КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|						И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) > 0
	|
	|					ТОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуРегл
	|
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Истина);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтДоходыПриПрекращенииДоговораАренды(Запрос, ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втДоходыПриПрекращенииДоговораАренды";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;

	ТекстЗапросаПустыеТаблицыОтложенныхДвижений(ТекстыЗапроса, Запрос);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	РасчетыОстатки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|
	|	ВЫБОР
	|		КОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) < 0
	|
	|			ТОГДА -(РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0))
	| 
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|				И (РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0)) < 0
	|
	|			ТОГДА -(РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0))
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|				И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) < 0
	|
	|			ТОГДА -(РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуУпр
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	 
	|	ВЫБОР
	|		КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|				И (РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0)) < 0
	|
	|			ТОГДА -(РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0))
	|
	|		КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|				И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) < 0
	|
	|			ТОГДА -(РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуРегл
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	&ИдентификаторДокумента КАК ИдентификаторФинЗаписи,
	|	&ХО_ОтражениеАрендныхОбязательствВДоходах КАК ХозяйственнаяОперация,
	|	&НастройкаХО_ОтражениеАрендныхОбязательствВДоходах КАК НастройкаХозяйственнойОперации
	|
	|ПОМЕСТИТЬ втДоходыПриПрекращенииДоговораАренды
	|ИЗ
	|	ВТ_РасчетыПоФинансовымИнструментам КАК РасчетыОстатки
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзменениеАрендныхОбязательств КАК втИзменениеАрендныхОбязательств
	|		ПО ИСТИНА
	|ГДЕ
	|	РасчетыОстатки.Ссылка = &Ссылка
	|	И РасчетыОстатки.Договор = &Договор
	|	И РасчетыОстатки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.АрендныеОбязательства)
	|
	|	И (ВЫБОР
	|			КОГДА (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) < 0
	|
	|				ТОГДА -(РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0))
	| 
	|			ИНАЧЕ 0
	|		КОНЕЦ <> 0
	|
	|		ИЛИ ВЫБОР
	|				КОГДА &ВалютаВзаиморасчетов = &ВалютаУправленческогоУчета
	|						И (РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0)) < 0
	|
	|					ТОГДА -(РасчетыОстатки.СуммаУпр + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаУпр, 0))
	|
	|				КОГДА &ВалютаВзаиморасчетов <> &ВалютаУправленческогоУчета
	|						И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) < 0
	|
	|					ТОГДА -(РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуУпр
	|
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|	 
	|		ИЛИ ВЫБОР
	|				КОГДА &ВалютаВзаиморасчетов = &ВалютаРегламентированногоУчета
	|						И (РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0)) < 0
	|
	|					ТОГДА -(РасчетыОстатки.СуммаРегл + ЕСТЬNULL(втИзменениеАрендныхОбязательств.СуммаРегл, 0))
	|
	|				КОГДА &ВалютаВзаиморасчетов <> &ВалютаРегламентированногоУчета
	|						И (РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) < 0
	|
	|					ТОГДА -(РасчетыОстатки.Сумма + ЕСТЬNULL(втИзменениеАрендныхОбязательств.Сумма, 0)) * &КоэффициентПересчетаВВалютуРегл
	|
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0)";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Истина);
	
КонецПроцедуры

// Проверяет график.
// 
// Параметры:
//  ТаблицаГрафика - ТабличнаяЧасть, ДанныеФормыКоллекция- Данные графика.
//  ИмяГрафика - Строка - Имя таблицы.
//  ПроверяемыеПоля - Строка - Проверяемые поля.
//  Отказ - Булево - Истина, если есть ошибки.
//
Процедура ПроверитьГрафик(ТаблицаГрафика, ИмяГрафика, ПроверяемыеПоля, Отказ) Экспорт
	
	СписокПолей = СтрРазделить(ПроверяемыеПоля, ",");
	
	СуществующиеДаты = Новый Соответствие();
	
	НомерСтроки = 0;
	Для Каждого ДанныеСтроки Из ТаблицаГрафика Цикл
		
		НомерСтроки = НомерСтроки + 1;
		
		СуммаУказана = Ложь;
		Для Каждого ИмяПоля Из СписокПолей Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки[ИмяПоля]) Тогда
				СуммаУказана = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ СуммаУказана Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 необходимо указать сумму по графику';
											|en = 'Specify the amount according to the schedule in line %1'"), Формат(НомерСтроки, "ЧГ=;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяГрафика, НомерСтроки, "Дата");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.Дата) Тогда
			
			Если СуществующиеДаты.Получить(ДанныеСтроки.Дата) <> Неопределено Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'В строке %1 повторяется дата, необходимо указывать разные даты';
												|en = 'The date is repeated in line %1, specify different dates'"), Формат(НомерСтроки, "ЧГ=;"));
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ИмяГрафика, НомерСтроки, "Дата");
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,, Поле,, Отказ);
			КонецЕсли;
			
			СуществующиеДаты.Вставить(ДанныеСтроки.Дата, Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает реквизиты договора аренды.
// 
// Параметры:
//  Договор - СправочникСсылка.ДоговорыАренды - Договор
// 
// Возвращаемое значение:
//  Структура - Реквизиты договора аренды
Функция РеквизитыДоговораАренды(Договор) Экспорт
	
	СписокРеквизитов = "ТипДоговора,Балансодержатель,ДатаНачалаДействия,
	|ВалютаВзаиморасчетов,СпособОпределенияСтоимостиАктивов,
	|ЕстьОбеспечительныйПлатеж,ЕстьВыкупПредметовАренды,ЕстьАвансированиеВыкупнойСтоимости,
	|УчитыватьПредметыАрендыВРеглУчете,УчитыватьПредметыАрендыВУпрУчете";
	
	РеквизитыДоговора = Новый Структура(СписокРеквизитов);
	РеквизитыДоговора.ДатаНачалаДействия = '000101010000';
	РеквизитыДоговора.ЕстьОбеспечительныйПлатеж = Ложь;
	РеквизитыДоговора.ЕстьВыкупПредметовАренды = Ложь;
	РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости = Ложь;
	РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Ложь;
	РеквизитыДоговора.УчитыватьПредметыАрендыВУпрУчете = Ложь;
	
	Если ЗначениеЗаполнено(Договор) Тогда
		РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, СписокРеквизитов);
	КонецЕсли;
	
	Возврат РеквизитыДоговора;
	
КонецФункции

#КонецОбласти

#Область Отчеты

// Объединяет в отчете подчиненные ячейки.
// Используется в отчетах, которые вертикально выводят показатели БУ, НУ, ПУ, ВП, УУ.
//
// Параметры:
//  ТабДок					 - ТабличныйДокумент - Табличный документ отчета.
//  СписокГруппЯчеек		 - Массив			 - Список групп ячеек.
//  СписокПодчиненныхЯчеек	 - Массив			 - Список ячеек, которые будут объединены с группой ячеек.
//
Процедура ОбъединитьПодчиненныеЯчейки(ТабДок, СписокГруппЯчеек, СписокПодчиненныхЯчеек) Экспорт
	
	ШапкаНайдена = Ложь;
		
	Для индСтр = 1 По ТабДок.ВысотаТаблицы Цикл
		
		Для КолонкаНачалаШапки = 1 По ТабДок.ШиринаТаблицы Цикл
			
			ОбластьЯчейки = ТабДок.Область(индСтр, КолонкаНачалаШапки);
			ШапкаНайдена = СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено;
			Если ШапкаНайдена Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
				
		Если ШапкаНайдена Тогда
			
			Для индКол = КолонкаНачалаШапки По ТабДок.ШиринаТаблицы Цикл
				
				Смещение = 0;
				
				Для Сч = 0 По 5 Цикл
					
					ОбластьЯчейки = ТабДок.Область(индСтр + Сч, индКол);
					
					Если СписокГруппЯчеек.Найти(ОбластьЯчейки.Текст) <> Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					Смещение = Смещение + 1;
					
				КонецЦикла;
				
				ОбластьЯчейки = ТабДок.Область(
									индСтр + Смещение, 
									индКол, 
									индСтр + Смещение, 
									индКол);
									
				ТекстЗаголовка = ОбластьЯчейки.Текст;
				
				ВысотаШапки = 0;
				Для Индекс = 1 По 10 Цикл
					
					ОбластьЯчейки = ТабДок.Область(
											индСтр+Индекс+Смещение, 
											индКол, 
											индСтр+Индекс+Смещение, 
											индКол);
											
					СледующаяЯчейка = ОбластьЯчейки.Текст;
					
					Если СписокПодчиненныхЯчеек.Найти(СледующаяЯчейка) = Неопределено Тогда
						Прервать;
					КонецЕсли;
					
					ВысотаШапки = ВысотаШапки + 1;
					
				КонецЦикла;
				
				ОбъединяемаяОбласть = ТабДок.Область(индСтр+Смещение, индКол, индСтр + ВысотаШапки + Смещение, индКол);
				ОбъединяемаяОбласть.Объединить();
				ОбъединяемаяОбласть.Текст = ТекстЗаголовка;
				ОбъединяемаяОбласть.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
				
			КонецЦикла; 
				
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет, что отчет формируется начиная с даты начала учета версии 2.4.
//
// Параметры:
//  НачалоПериода	 - Дата - Начало периода отчета.
//  ОкончаниеПериода - Дата - Окончание периода отчета.
//  ШаблонСообщения	 - Строка - Шаблон сообщения об ошибке.
//  Отказ			 - Булево - Признак отказа.
// 
// Возвращаемое значение:
//  Булево - Ложь, если отчет формируется до даты начала учета версии 2.4.
//
Функция ПроверитьПериодОтчетаВерсии24(НачалоПериода, ОкончаниеПериода, ШаблонСообщения, Отказ) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
		Возврат Истина;
	КонецЕсли;
	
	ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
	
	Если НачалоПериода < ДатаНачалаУчета
		ИЛИ ЗначениеЗаполнено(ОкончаниеПериода)
			И ОкончаниеПериода < ДатаНачалаУчета Тогда
			
		Отказ = Истина;
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Формат(ДатаНачалаУчета, "ДЛФ=D"));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ); 
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;	
	
КонецФункции

// Добавляет период отчета в значения отбора.
//
// Параметры:
//  НастройкиКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки СКД.
//  ЗначенияОтбораДанных - Структура - Значения отбора.
//
Процедура ПериодОтчета(НастройкиКомпоновкиДанных, ЗначенияОтбораДанных) Экспорт

	ПараметрОтчета = ЗначениеПараметраСКД(НастройкиКомпоновкиДанных, "ПериодОтчета"); // СтандартныйПериод - 
	
	Если ПараметрОтчета <> Неопределено Тогда
		ЗначенияОтбораДанных.Вставить("НачалоПериода", ПараметрОтчета.ДатаНачала);
		ЗначенияОтбораДанных.Вставить("ОкончаниеПериода", ПараметрОтчета.ДатаОкончания);
	Иначе
		ЗначенияОтбораДанных.Вставить("НачалоПериода", '000101010000');
		ЗначенияОтбораДанных.Вставить("ОкончаниеПериода", '000101010000');
	КонецЕсли; 
	
КонецПроцедуры

// Получает значение параметра СКД.
//
// Параметры:
//  НастройкиКомпоновкиДанных	 - НастройкиКомпоновкиДанных - Настройки СКД.
//  Параметр					 - Строка, ПараметрКомпоновкиДанных	 - поле или имя поля, для которого нужно вернуть параметр.
//  ПустоеЗначение				 - Произвольный						 - Значение, которое нужно вернуть, если параметр не используется.
// 
// Возвращаемое значение:
//  Произвольный - Значение параметра СКД.
//
Функция ЗначениеПараметраСКД(НастройкиКомпоновкиДанных, Параметр, ПустоеЗначение = Неопределено) Экспорт

	ПараметрОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиКомпоновкиДанных, Параметр);
	
	Если ПараметрОтчета.Использование Тогда
		Возврат ПараметрОтчета.Значение;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;

КонецФункции

// Возвращает значение отбора установленного в отчете
//
// Параметры:
//  ИмяПоля			 - Строка									 - Имя отбора.
//  ЭлементыОтбора	 - КоллекцияЭлементовОтбораКомпоновкиДанных	 - Отбор компоновки данных.
// 
// Возвращаемое значение:
//  Массив - Установленный отбор.
//
Функция ЗначениеОтбораОтчета(ИмяПоля, ЭлементыОтбора) Экспорт

	МассивЗначенийОтбора = Новый Массив;
	
	Если ЭлементыОтбора = Неопределено Тогда
		Возврат МассивЗначенийОтбора;
	КонецЕсли;
	
	Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ЗначениеОтбора = Неопределено;
	Для каждого ЭлементКоллекции Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементКоллекции) = Тип("ЭлементОтбораКомпоновкиДанных") 
			И ЭлементКоллекции.ЛевоеЗначение = Поле 
			И ЭлементКоллекции.Использование Тогда
			
			ЗначениеОтбора = ЭлементКоллекции.ПравоеЗначение;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Если ЗначениеОтбора <> Неопределено И ТипЗнч(ЗначениеОтбора) = Тип("СписокЗначений") Тогда
		МассивЗначенийОтбора = ЗначениеОтбора.ВыгрузитьЗначения();
	ИначеЕсли ЗначениеОтбора <> Неопределено Тогда
		МассивЗначенийОтбора.Добавить(ЗначениеОтбора);
	КонецЕсли;
	
	Возврат МассивЗначенийОтбора;

КонецФункции
 
#КонецОбласти

#Область ТекстыЗапросов

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  Запрос - Запрос -
//  ИмяТаблицы - Строка, Неопределено - Имя таблицы
Процедура ТекстЗапросаПустаяТаблицаСтоимости(ТекстыЗапроса, Запрос, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВтРасчетСтоимости";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL   КАК Ссылка,
	|	NULL   КАК ОбъектУчета,
	|	NULL   КАК КорСтатьяРасходов,
	|	NULL   КАК КорАналитикаРасходов,
	|	NULL   КАК КорПодразделение,
	|	NULL   КАК КорНаправлениеДеятельности,
	|	0      КАК Стоимость,
	|	0      КАК Сумма,
	|	0      КАК СтоимостьРегл,
	|	0      КАК СтоимостьНУ,
	|	0      КАК СтоимостьПР,
	|	0      КАК СтоимостьВР,
	|	0      КАК СтоимостьЦФ,
	|	0      КАК СтоимостьНУЦФ,
	|	0      КАК СтоимостьПРЦФ,
	|	0      КАК СтоимостьВРЦФ,
	|	0      КАК АмортизационнаяПремия,
	|	0      КАК РезервПереоценкиСтоимости,
	|	0      КАК РезервПереоценкиСтоимостиРегл,
	|	0      КАК ЗалоговаяСтоимость,
	|	0      КАК ПредварительнаяСтоимость,
	|	0      КАК ПредварительнаяСтоимостьРегл,
	|	0      КАК КорСуммаНУ,
	|	0      КАК КорПостояннаяРазница,
	|	0      КАК НеУчитываемаяСтоимостьНУ,
	|	0      КАК НомерСтроки,
	|	""""   КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ втИмяТаблицы 
	|ГДЕ
	|	ЛОЖЬ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втИмяТаблицы", ИмяТаблицы);
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  Запрос - Запрос -
//  ИмяТаблицы - Неопределено - 
Процедура ТекстЗапросаПустаяТаблицаСтоимостьВНА(ТекстыЗапроса, Запрос, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВТ_СтоимостьВНА";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК Ссылка,
	|	NULL КАК Дата,
	|	NULL КАК Организация,
	|	NULL КАК ОбъектУчета,
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьНУ,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьВР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьНУЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК СтоимостьВРЦФ,
	|	0 КАК АмортизационнаяПремия,
	|	0 КАК ЗалоговаяСтоимость,
	|	0 КАК ПредварительнаяСтоимость,
	|	0 КАК ПредварительнаяСтоимостьРегл,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|	0 КАК ДоляЦФБУ,
	|	0 КАК ДоляЦФНУ,
	|	"""" КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ ВТ_СтоимостьВНА";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  Запрос - Запрос -
//  ИмяТаблицы - Строка, Неопределено - 
Процедура ТекстЗапросаПустаяТаблицаАмортизацияВНА(ТекстыЗапроса, Запрос, ИмяТаблицы = Неопределено) Экспорт

	Если ИмяТаблицы = Неопределено Тогда
		ИмяТаблицы = "ВТ_АмортизацияВНА";
	КонецЕсли; 
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	NULL КАК Ссылка,
	|	NULL КАК Дата,
	|	NULL КАК Организация,
	|	NULL КАК ОбъектУчета,
	|	0 КАК Амортизация,
	|	0 КАК АмортизацияРегл,
	|	0 КАК АмортизацияНУ,
	|	0 КАК АмортизацияПР,
	|	0 КАК АмортизацияВР,
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияНУЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|	0 КАК АмортизацияВРЦФ
	|ПОМЕСТИТЬ ВТ_АмортизацияВНА";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаВтСтоимостьВНАСгруппированная(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "ВтСтоимостьВНАСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПустаяТаблицаСтоимостьВНА(ТекстыЗапроса, Запрос);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(СтоимостьВНА.Стоимость)          КАК Стоимость,
	|	СУММА(СтоимостьВНА.СтоимостьРегл)      КАК СтоимостьРегл,
	|	СУММА(СтоимостьВНА.СтоимостьНУ)        КАК СтоимостьНУ,
	|	СУММА(СтоимостьВНА.СтоимостьПР)        КАК СтоимостьПР,
	|	СУММА(СтоимостьВНА.СтоимостьВР)        КАК СтоимостьВР,
	|	СУММА(СтоимостьВНА.СтоимостьЦФ)        КАК СтоимостьЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьНУЦФ)      КАК СтоимостьНУЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьПРЦФ)      КАК СтоимостьПРЦФ,
	|	СУММА(СтоимостьВНА.СтоимостьВРЦФ)      КАК СтоимостьВРЦФ
	|ПОМЕСТИТЬ ВтСтоимостьВНАСгруппированная
	|ИЗ
	|	ВТ_СтоимостьВНА КАК СтоимостьВНА
	|ГДЕ
	|	СтоимостьВНА.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  Запрос - Запрос - 
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаВтАмортизацияВНАСгруппированная(Запрос, ТекстыЗапроса) Экспорт

	ИмяТаблицы = "ВтАмортизацияВНАСгруппированная";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаПустаяТаблицаАмортизацияВНА(ТекстыЗапроса, Запрос);
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СУММА(АмортизацияВНА.Амортизация)          КАК Амортизация,
	|	СУММА(АмортизацияВНА.АмортизацияРегл)      КАК АмортизацияРегл,
	|	СУММА(АмортизацияВНА.АмортизацияНУ)        КАК АмортизацияНУ,
	|	СУММА(АмортизацияВНА.АмортизацияПР)        КАК АмортизацияПР,
	|	СУММА(АмортизацияВНА.АмортизацияВР)        КАК АмортизацияВР,
	|	СУММА(АмортизацияВНА.АмортизацияЦФ)        КАК АмортизацияЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияНУЦФ)      КАК АмортизацияНУЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияПРЦФ)      КАК АмортизацияПРЦФ,
	|	СУММА(АмортизацияВНА.АмортизацияВРЦФ)      КАК АмортизацияВРЦФ
	|ПОМЕСТИТЬ ВтАмортизацияВНАСгруппированная
	|ИЗ
	|	ВТ_АмортизацияВНА КАК АмортизацияВНА
	|ГДЕ
	|	АмортизацияВНА.Ссылка = &Ссылка";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
//  Запрос - Запрос - 
Процедура ТекстЗапросаПустаяВтРасчетРасходов(ТекстыЗапроса, Запрос) Экспорт

	ИмяТаблицы = "ВтРасчетРасходов";
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяТаблицы) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПрочиеРасходы.СтатьяРасходов             КАК СтатьяРасходов,
	|	ПрочиеРасходы.АналитикаРасходов          КАК АналитикаРасходов,
	|	ПрочиеРасходы.Подразделение              КАК Подразделение,
	|	ПрочиеРасходы.НаправлениеДеятельности    КАК НаправлениеДеятельности,
	|	0                                        КАК Сумма,
	|	0                                        КАК СуммаБезНДС,
	|	0                                        КАК СуммаУпр,
	|	0                                        КАК СуммаРегл,
	|	0                                        КАК ПостояннаяРазница,
	|	0                                        КАК ВременнаяРазница,
	|	0                                        КАК НомерСтроки,
	|	ПрочиеРасходы.Регистратор                КАК Ссылка,
	|	""""                                     КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО                             КАК НастройкаХозяйственнойОперации
	|ПОМЕСТИТЬ ВтРасчетРасходов 
	|ИЗ
	|	РегистрНакопления.ПрочиеРасходы КАК ПрочиеРасходы
	|ГДЕ
	|	ЛОЖЬ";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка -
//  Запрос - Запрос - 
Процедура ТекстЗапросаПустыеТаблицыОтложенныхДвижений(ТекстыЗапроса, Запрос) Экспорт

	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_СтоимостьВНА") = Неопределено
		И НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_СтоимостьВНА", ТекстыЗапроса) Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL   КАК Ссылка,
		|	NULL   КАК ОбъектУчета,
		|	0      КАК Стоимость,
		|	0      КАК СтоимостьРегл,
		|	0      КАК СтоимостьНУ,
		|	0      КАК СтоимостьЦФ,
		|	0      КАК ЗалоговаяСтоимость,
		|	0      КАК РезервПереоценкиСтоимости,
		|	0      КАК РезервПереоценкиСтоимостиРегл
		|
		|ПОМЕСТИТЬ ВТ_СтоимостьВНА 
		|ГДЕ
		|	ЛОЖЬ";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_СтоимостьВНА");
		
	КонецЕсли;
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_АмортизацияВНА") = Неопределено
		И НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_АмортизацияВНА", ТекстыЗапроса) Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	NULL   КАК Ссылка,
		|	NULL   КАК ОбъектУчета,
		|	0      КАК Амортизация,
		|	0      КАК АмортизацияРегл,
		|	0      КАК АмортизацияНУ,
		|	0      КАК АмортизацияПР,
		|	0      КАК АмортизацияВР,
		|	0      КАК АмортизацияЦФ,
		|	0      КАК РезервПереоценкиАмортизации,
		|	0      КАК РезервПереоценкиАмортизацииРегл,
		|	ЛОЖЬ   КАК НачислятьИзнос
		|ПОМЕСТИТЬ ВТ_АмортизацияВНА 
		|ГДЕ
		|	ЛОЖЬ";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_АмортизацияВНА");
		
	КонецЕсли;
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ВТ_РасчетыПоФинансовымИнструментам") = Неопределено
		И НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВТ_РасчетыПоФинансовымИнструментам", ТекстыЗапроса) Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НЕОПРЕДЕЛЕНО КАК Ссылка,
		|	ДАТАВРЕМЯ(1,1,1) КАК Дата,
		|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаПоПартнерам,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыАренды.ПустаяСсылка) КАК Договор,
		|	НЕОПРЕДЕЛЕНО КАК ТипСуммы,
		|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
		|	НЕОПРЕДЕЛЕНО КАК Валюта,
		|	0 КАК Сумма,
		|	0 КАК СуммаУпр,
		|	0 КАК СуммаРегл
		|ПОМЕСТИТЬ ВТ_РасчетыПоФинансовымИнструментам 
		|ГДЕ
		|	ЛОЖЬ";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ВТ_РасчетыПоФинансовымИнструментам");
		
	КонецЕсли;
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
//  ИмяВременнойТаблицы - Строка, Неопределено - Имя временной таблицы.
Процедура ТекстЗапросаТаблицаВтТаблицаОС(ТекстыЗапроса, ИмяДокумента, ИмяВременнойТаблицы = Неопределено) Экспорт

	ИмяТаблицы = ?(ИмяВременнойТаблицы <> Неопределено, ИмяВременнойТаблицы, "втТаблицаОС");
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтПервоначальныеСведенияОС(ТекстыЗапроса, ИмяДокумента);
	ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса, ИмяДокумента);
	ТекстЗапросаТаблицаВтМестонахождениеОС(ТекстыЗапроса, ИмяДокумента);
	
	ЗаменитьОсновнуюТаблицуОСНаРасширенную = Истина;
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтРасширеннаяТаблицаОС", ТекстыЗапроса) Тогда
		ЗаменитьОсновнуюТаблицуОСНаРасширенную = Ложь;
		ТекстЗапросаПустаяВтРасширеннаяТаблицаОС(ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаОС.ОсновноеСредство                  КАК ОсновноеСредство,
	|	ЕСТЬNULL(РасширеннаяТаблицаОС.ОСВладелец, ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)) КАК ОСВладелец,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета         КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности        КАК НаправлениеДеятельности,
	|	ПорядокУчета.ПоказательНаработки            КАК ПоказательНаработки,
	|	ПорядокУчета.ОбъемНаработки                 КАК ОбъемНаработки,
	|
	|	МестонахождениеОС.Организация               КАК Организация,
	|	МестонахождениеОС.Арендатор                 КАК Арендатор,
	|	МестонахождениеОС.МОЛ                       КАК МОЛ,
	|	МестонахождениеОС.Местонахождение           КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения      КАК АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	МестонахождениеОС.ПодразделениеАрендатора   КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора             КАК МОЛАрендатора,
	|
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатациюБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВРеглУчете,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаВводаВЭксплуатациюУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВУпрУчете,
	|	
	|	ТаблицаОС.ИдентификаторСтроки               КАК ИдентификаторСтроки,
	|
	|	&ПоляЛокализации
	|	
	|ПОМЕСТИТЬ втТаблицаОС
	|ИЗ
	|	Документ.ПеремещениеОС2_4.ОС КАК ТаблицаОС
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервоначальныеСведенияОС КАК ПервоначальныеСведения
	|		ПО ТаблицаОС.ОсновноеСредство = ПервоначальныеСведения.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокУчетаОС КАК ПорядокУчета
	|		ПО ТаблицаОС.ОсновноеСредство = ПорядокУчета.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМестонахождениеОС КАК МестонахождениеОС
	|		ПО ТаблицаОС.ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтРасширеннаяТаблицаОС КАК РасширеннаяТаблицаОС
	|		ПО ТаблицаОС.ОсновноеСредство = РасширеннаяТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаОС.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	Если ВРег(ИмяДокумента) = ВРег("Документ.РеализацияУслугПрочихАктивов") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4.ОС", "Документ.ПеремещениеОС2_4.Расходы");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.ОсновноеСредство", "ТаблицаОС.ВнеоборотныйАктив");
	КонецЕсли;
	
	Если ЗаменитьОсновнуюТаблицуОСНаРасширенную Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4.ОС", "ВтРасширеннаяТаблицаОС");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4", ИмяДокумента);
	
	ЧастиИмени = СтрРазделить(ИмяДокумента, ".");
	Если Метаданные.Документы[ЧастиИмени[1]].ТабличныеЧасти["ОС"].Реквизиты.Найти("ИдентификаторСтроки") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.ИдентификаторСтроки", """""");
	КонецЕсли;
		
	ВнеоборотныеАктивыЛокализация.ДобавитьВТекстЗапросаВтТаблицаОСПоляЛокализации(ТекстЗапроса, ИмяДокумента);
	
	Если ИмяВременнойТаблицы <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ втТаблицаОС", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа
Процедура ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "втСписокОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользоватьРасширеннуюТаблицуОС = ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтРасширеннаяТаблицаОС", ТекстыЗапроса);
	
	Если ИспользоватьРасширеннуюТаблицуОС Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСписокОС
		|ИЗ
		|	ВтРасширеннаяТаблицаОС КАК ТаблицаОС
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация";
		
	ИначеЕсли ВРег(ИмяДокумента) = ВРег("Документ.РазукомплектацияОС") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСписокОС
		|ИЗ
		|	Документ.РазукомплектацияОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация";
		
	ИначеЕсли ВРег(ИмяДокумента) = ВРег("Документ.ОбъединениеОС") Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСписокОС
		|ИЗ
		|	Документ.ОбъединениеОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ИЗ
		|	Документ.ОбъединениеОС.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация";
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Организация КАК Организация,
		|	ТаблицаОС.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ втСписокОС
		|ИЗ
		|	Документ.ПеремещениеОС2_4.ОС КАК ТаблицаОС
		|ГДЕ
		|	ТаблицаОС.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновноеСредство,
		|	Организация";
		
		Если ВРег(ИмяДокумента) = ВРег("Документ.РеализацияУслугПрочихАктивов") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4.ОС", "Документ.ПеремещениеОС2_4.Расходы");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаОС.ОсновноеСредство", "ТаблицаОС.ВнеоборотныйАктив");
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("Документ.ПрочееОприходованиеТоваров") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4.ОС", "Документ.ПеремещениеОС2_4.Товары");
		ИначеЕсли ВРег(ИмяДокумента) = ВРег("Документ.ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4.ОС", "Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеОС2_4", ИмяДокумента);
		
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаВтПервоначальныеСведенияОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПервоначальныеСведенияОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПервоначальныеСведенияОС.Организация КАК Организация,
	|	ПервоначальныеСведенияОС.ПорядокУчетаУУ КАК ПорядокУчетаУУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюБУ КАК ДатаВводаВЭксплуатациюБУ,
	|	ПервоначальныеСведенияОС.ДатаВводаВЭксплуатациюУУ КАК ДатаВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументВводаВЭксплуатациюУУ КАК ДокументВводаВЭксплуатациюУУ,
	|	ПервоначальныеСведенияОС.ДокументСнятияСУчетаУУ КАК ДокументСнятияСУчетаУУ,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьБУ КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияОС.ПервоначальнаяСтоимостьУУ КАК ПервоначальнаяСтоимостьУУ,
	|	ПервоначальныеСведенияОС.Контрагент КАК Контрагент,
	|	&ПервоначальныеСведенияОС_РеквизитыЛокализация
	|ПОМЕСТИТЬ втПервоначальныеСведенияОС
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПервоначальныеСведенияОС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	ВнеоборотныеАктивыЛокализация.ДобавитьВТекстЗапросаРесурсыРегистраПервоначальныеСведенияОС(ТекстЗапроса, "ПервоначальныеСведенияОС");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПервоначальныеСведенияНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПервоначальныеСведенияНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ втПервоначальныеСведенияНМА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПервоначальныеСведенияНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПервоначальныеСведенияНМА.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПорядокУчетаОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчета.ОсновноеСредство          КАК ОсновноеСредство,
	|	ПорядокУчета.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ПорядокУчета.ПоказательНаработки       КАК ПоказательНаработки,
	|	ПорядокУчета.ОбъемНаработки            КАК ОбъемНаработки,
	|	ПорядокУчета.СчетУчета                 КАК СчетУчета,
	|	ПорядокУчета.СчетНачисленияАмортизации КАК СчетНачисленияАмортизации,
	|	ПорядокУчета.СчетЗабалансовогоУчета    КАК СчетЗабалансовогоУчета
	|ПОМЕСТИТЬ втПорядокУчетаОС
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПорядокУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПорядокУчетаОСУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаОСУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаОСУУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПорядокУчетаОСУУ.Состояние КАК Состояние,
	|	ПорядокУчетаОСУУ.НачислятьАмортизациюУУ КАК НачислятьАмортизациюУУ,
	|	ПорядокУчетаОСУУ.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПорядокУчетаОСУУ.СтатьяРасходов КАК СтатьяРасходов,
	|	ПорядокУчетаОСУУ.АналитикаРасходов КАК АналитикаРасходов,
	|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов
	|ПОМЕСТИТЬ втПорядокУчетаОСУУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПорядокУчетаОСУУ
	|ИНДЕКСИРОВАТЬ ПО
	|	ОсновноеСредство";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПараметрыАмортизацииОСУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПараметрыАмортизацииОСУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииОСУУ.ОсновноеСредство КАК ОсновноеСредство,
	|	ПараметрыАмортизацииОСУУ.СрокИспользования КАК СрокИспользования,
	|	ПараметрыАмортизацииОСУУ.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСУУ.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизации,
	|	ПараметрыАмортизацииОСУУ.СтоимостьДляВычисленияАмортизацииРегл КАК СтоимостьДляВычисленияАмортизацииРегл,
	|	ПараметрыАмортизацииОСУУ.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииОСУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииОСУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл,
	|	ПараметрыАмортизацииОСУУ.ДатаПоследнегоИзменения КАК ДатаПоследнегоИзменения,
	|	ПараметрыАмортизацииОСУУ.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизации
	|ПОМЕСТИТЬ втПараметрыАмортизацииОСУУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииОСУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПараметрыАмортизацииОСУУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПараметрыАмортизацииОСУУ.ОсновноеСредство";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтМестонахождениеОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втМестонахождениеОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестонахождениеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МестонахождениеОС.Организация КАК Организация,
	|	МестонахождениеОС.МОЛ КАК МОЛ,
	|	МестонахождениеОС.Местонахождение КАК Местонахождение,
	|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
	|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
	|	МестонахождениеОС.Арендатор КАК Арендатор,
	|	МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
	|	МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора
	|ПОМЕСТИТЬ втМестонахождениеОС
	|ИЗ
	|	РегистрСведений.МестонахождениеОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК МестонахождениеОС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтАрендованныеОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втАрендованныеОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АрендованныеОС.ОсновноеСредство КАК ОсновноеСредство,
	|	АрендованныеОС.Партнер КАК Партнер,
	|	АрендованныеОС.Контрагент КАК Контрагент,
	|	АрендованныеОС.Договор КАК Договор,
	|	АрендованныеОС.Стоимость КАК Стоимость,
	|	АрендованныеОС.Состояние КАК Состояние
	|ПОМЕСТИТЬ втАрендованныеОС
	|ИЗ
	|	РегистрСведений.АрендованныеОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК АрендованныеОС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПереданныеВАрендуОС(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПереданныеВАрендуОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокОС(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПереданныеВАрендуОС.ОсновноеСредство КАК ОсновноеСредство,
	|	ПереданныеВАрендуОС.Партнер КАК Партнер,
	|	ПереданныеВАрендуОС.Контрагент КАК Контрагент,
	|	ПереданныеВАрендуОС.Договор КАК Договор,
	|	ПереданныеВАрендуОС.ЗалоговаяСтоимость КАК ЗалоговаяСтоимость,
	|	ПереданныеВАрендуОС.ДатаПередачи КАК ДатаПередачи,
	|	ПереданныеВАрендуОС.Состояние КАК Состояние
	|ПОМЕСТИТЬ втПереданныеВАрендуОС
	|ИЗ
	|	РегистрСведений.ПереданныеВАрендуОС.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.ОсновноеСредство
	|					ИЗ
	|						втСписокОС КАК СписокОС)) КАК ПереданныеВАрендуОС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаТаблицаВтУсловияДоговоровАренды(ТекстыЗапроса) Экспорт
	
	ИмяТаблицы = "втУсловияДоговоровАренды";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	УсловияДоговоровАренды.Договор,
	|	УсловияДоговоровАренды.Состояние,
	|	УсловияДоговоровАренды.СтавкаНДС,
	|	УсловияДоговоровАренды.СуммаОбеспечительногоПлатежа,
	|	УсловияДоговоровАренды.СуммаУслугПоАренде,
	|	УсловияДоговоровАренды.СуммаВыкупаПредметовАренды,
	|	УсловияДоговоровАренды.СуммаПроцентов,
	|	УсловияДоговоровАренды.СтоимостьПредметовАренды,
	|	УсловияДоговоровАренды.СуммаНДС,
	|	УсловияДоговоровАренды.СрокЛет,
	|	УсловияДоговоровАренды.СрокМес,
	|	УсловияДоговоровАренды.СрокДней,
	|	УсловияДоговоровАренды.ДатаНачалаАренды,
	|	УсловияДоговоровАренды.ДатаПервогоПлатежа,
	|	УсловияДоговоровАренды.ДатаПервогоОбеспечительногоПлатежа,
	|	УсловияДоговоровАренды.ДатаВыкупа,
	|	УсловияДоговоровАренды.ПроцентнаяСтавка,
	|	УсловияДоговоровАренды.ПериодичностьОплат,
	|	УсловияДоговоровАренды.ПериодичностьНачислений,
	|	УсловияДоговоровАренды.ОплатаУслугиПоАренде,
	|	УсловияДоговоровАренды.НачислениеУслугиПоАренде,
	|	УсловияДоговоровАренды.АктуальныеУсловияДоговора
	|ПОМЕСТИТЬ втУсловияДоговоровАренды
	|ИЗ
	|	РегистрСведений.УсловияДоговоровАренды.СрезПоследних(
	|		&Период, 
	|		Регистратор <> &Ссылка
	|			И Договор = &Договор) КАК УсловияДоговоровАренды";
	 
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтНаработкиОбъектовЭксплуатации(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "ВтНаработкиОбъектовЭксплуатации";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтТаблицаОС(ТекстыЗапроса, ИмяДокумента, "втПараметрыОС");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НаработкиОбъектовЭксплуатации.ОбъектЭксплуатации КАК ОбъектЭксплуатации,
	|	НаработкиОбъектовЭксплуатации.Значение КАК Значение
	|ПОМЕСТИТЬ ВтНаработкиОбъектовЭксплуатации
	|ИЗ
	|	РегистрСведений.НаработкиОбъектовЭксплуатации.СрезПоследних(
	|			КОНЕЦПЕРИОДА(&Период, МЕСЯЦ),
	|			(ОбъектЭксплуатации, ПоказательНаработки) В
	|				(ВЫБРАТЬ
	|					СписокОС.ОсновноеСредство,
	|					СписокОС.ПоказательНаработки
	|				ИЗ
	|					втПараметрыОС КАК СписокОС)) КАК НаработкиОбъектовЭксплуатации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектЭксплуатации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений -
//  ИмяДокумента - Строка - Полное имя документа.
//  ИмяВременнойТаблицы - Неопределено - Имя временной таблицы
Процедура ТекстЗапросаТаблицаВтТаблицаНМА(ТекстыЗапроса, ИмяДокумента, ИмяВременнойТаблицы = Неопределено) Экспорт

	ИмяТаблицы = ?(ИмяВременнойТаблицы <> Неопределено, ИмяВременнойТаблицы, "втТаблицаНМА");
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНМА.НематериальныйАктив              КАК НематериальныйАктив,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета         КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности        КАК НаправлениеДеятельности,
	|	ПорядокУчета.ОбъемНаработки                 КАК ОбъемНаработки,
	|
	|	МестоУчета.Организация                      КАК Организация,
	|	МестоУчета.Подразделение                    КАК Подразделение,
	|
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуБУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВРеглУчете,
	|	ЕСТЬNULL(ПервоначальныеСведения.ДатаПринятияКУчетуУУ, ДАТАВРЕМЯ(1, 1, 1)) <> ДАТАВРЕМЯ(1, 1, 1) КАК ОтражатьВУпрУчете,
	|
	|	ТаблицаНМА.ИдентификаторСтроки              КАК ИдентификаторСтроки
	|	
	|ПОМЕСТИТЬ втТаблицаНМА
	|ИЗ
	|	Документ.ПеремещениеНМА2_4.НМА КАК ТаблицаНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМА.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка 
	|				И Организация = &Организация
	|				И НематериальныйАктив В (ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ втСписокНМА КАК СписокНМА)
	|		) КАК ПервоначальныеСведения
	|		ПО ТаблицаНМА.НематериальныйАктив = ПервоначальныеСведения.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В (ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ втСписокНМА КАК СписокНМА)
	|		) КАК ПорядокУчета
	|		ПО ТаблицаНМА.НематериальныйАктив = ПорядокУчета.НематериальныйАктив
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестоУчетаНМА.СрезПоследних(
	|				&Период,
	|				Регистратор <> &Ссылка 
	|				И Организация = &Организация
	|				И НематериальныйАктив В (ВЫБРАТЬ СписокНМА.НематериальныйАктив ИЗ втСписокНМА КАК СписокНМА)
	|		) КАК МестоУчета
	|		ПО ТаблицаНМА.НематериальныйАктив = МестоУчета.НематериальныйАктив
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПеремещениеНМА2_4", ИмяДокумента);
	
	Если ИмяВременнойТаблицы <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ втТаблицаНМА", "ПОМЕСТИТЬ " + ИмяВременнойТаблицы);
	КонецЕсли; 
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПорядокУчетаНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчетаНМА.ГруппаФинансовогоУчета КАК ГруппаФинансовогоУчета,
	|	ПорядокУчетаНМА.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ПорядокУчетаНМА.ОбъемНаработки КАК ОбъемНаработки
	|ПОМЕСТИТЬ втПорядокУчетаНМА
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМА.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПорядокУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокУчетаНМА.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПорядокУчетаНМАУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПорядокУчетаНМАУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПорядокУчетаНМАУУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПорядокУчетаНМАУУ.Состояние КАК Состояние,
	|	ПорядокУчетаНМАУУ.НачислятьАмортизациюУУ КАК НачислятьАмортизациюУУ,
	|	ПорядокУчетаНМАУУ.СтатьяРасходов КАК СтатьяРасходов,
	|	ПорядокУчетаНМАУУ.АналитикаРасходов КАК АналитикаРасходов,
	|	ПорядокУчетаНМАУУ.СпособОтраженияРасходов КАК СпособОтраженияРасходов,
	|	ПорядокУчетаНМАУУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизацию,
	|	ПорядокУчетаНМАУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходов
	|ПОМЕСТИТЬ втПорядокУчетаНМАУУ
	|ИЗ
	|	РегистрСведений.ПорядокУчетаНМАУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПорядокУчетаНМАУУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтПараметрыАмортизацииНМАУУ(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втПараметрыАмортизацииНМАУУ";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПараметрыАмортизацииНМАУУ.НематериальныйАктив КАК НематериальныйАктив,
	|	ПараметрыАмортизацииНМАУУ.СрокИспользования КАК СрокИспользования,
	|	ПараметрыАмортизацииНМАУУ.КоэффициентУскорения КАК КоэффициентУскорения,
	|	ПараметрыАмортизацииНМАУУ.МетодНачисленияАмортизации КАК МетодНачисленияАмортизации,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимость,
	|	ПараметрыАмортизацииНМАУУ.ЛиквидационнаяСтоимостьРегл КАК ЛиквидационнаяСтоимостьРегл
	|ПОМЕСТИТЬ втПараметрыАмортизацииНМАУУ
	|ИЗ
	|	РегистрСведений.ПараметрыАмортизацииНМАУУ.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК ПараметрыАмортизацииНМАУУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПараметрыАмортизацииНМАУУ.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтМестоУчетаНМА(ТекстыЗапроса, ИмяДокумента) Экспорт

	ИмяТаблицы = "втМестоУчетаНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	МестоУчетаНМА.НематериальныйАктив КАК НематериальныйАктив,
	|	МестоУчетаНМА.Организация КАК Организация,
	|	МестоУчетаНМА.Подразделение КАК Подразделение
	|ПОМЕСТИТЬ втМестоУчетаНМА
	|ИЗ
	|	РегистрСведений.МестоУчетаНМА.СрезПоследних(
	|			&Период,
	|			Регистратор <> &Ссылка
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						СписокНМА.НематериальныйАктив
	|					ИЗ
	|						втСписокНМА КАК СписокНМА)) КАК МестоУчетаНМА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	МестоУчетаНМА.НематериальныйАктив";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений из Строка -
//  ИмяДокумента - Строка - Полное имя документа.
Процедура ТекстЗапросаТаблицаВтСписокНМА(ТекстыЗапроса, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "втСписокНМА";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	&ПолеНМА КАК НематериальныйАктив
	|ПОМЕСТИТЬ втСписокНМА
	|ИЗ
	|	&ТаблицаНМА КАК ТаблицаНМА
	|ГДЕ
	|	ТаблицаНМА.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НематериальныйАктив,
	|	Организация";
	
	ТаблицаНМА = ".НМА";
	ПолеНМА = "ТаблицаНМА.НематериальныйАктив";

	Если ВРег(ИмяДокумента) = ВРег("Документ.РеализацияУслугПрочихАктивов") Тогда

		ТаблицаНМА = ".Расходы";
		ПолеНМА = "ТаблицаНМА.ВнеоборотныйАктив";
		
	//++ Локализация
	ИначеЕсли ВРег(ИмяДокумента) = ВРег("Документ.ПринятиеКУчетуНМА") 
		ИЛИ ВРег(ИмяДокумента) = ВРег("Документ.ПереоценкаНМА")
		ИЛИ ВРег(ИмяДокумента) = ВРег("Документ.СписаниеНМА")
		ИЛИ ВРег(ИмяДокумента) = ВРег("Документ.ПодготовкаКПередачеНМА") Тогда
		ТаблицаНМА = "";
	//-- Локализация
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаНМА", ИмяДокумента + ТаблицаНМА);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолеНМА", ПолеНМА);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);
	
КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
//  ТекстыЗапроса - СписокЗначений -
//  ИмяТабличнойЧасти - Строка -
//  ИспользоватьОтборПоСсылке - Булево -
//
Процедура ТекстЗапросаТаблицаВтУзлыОсновныхСредств(ТекстыЗапроса, ИмяТабличнойЧасти, ИспользоватьОтборПоСсылке = Истина) Экспорт
	
	ИмяТаблицы = "ВтУзлыОсновныхСредств";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УзлыКомпоненты.УзелКомпонент КАК УзелКомпонент
	|ПОМЕСТИТЬ ВтУзлыОсновныхСредств
	|ИЗ
	|	РегистрСведений.УзлыКомпонентыАмортизации КАК УзлыКомпоненты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ИмяТабличнойЧасти КАК ТаблицаОС
	|		ПО УзлыКомпоненты.ОсновноеСредство = ТаблицаОС.ОсновноеСредство
	|ГДЕ
	|	&ОтборПоСсылке
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	УзелКомпонент";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяТабличнойЧасти", ИмяТабличнойЧасти);
	
	Если ИспользоватьОтборПоСсылке Тогда
		ТекстУсловия = "ТаблицаОС.Ссылка = &Ссылка";
	Иначе
		ТекстУсловия = "ИСТИНА";
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоСсылке", ТекстУсловия);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы, Ложь);

КонецПроцедуры

// Формирует текст запроса таблицы.
// 
// Параметры:
// 	ТекстыЗапроса - СписокЗначений из Строка - 
Процедура ТекстЗапросаПустаяВтРасширеннаяТаблицаОС(ТекстыЗапроса) Экспорт

	ИмяТаблицы = "ВтРасширеннаяТаблицаОС";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОсновноеСредство,
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка) КАК ОСВладелец
	|ПОМЕСТИТЬ ВтРасширеннаяТаблицаОС";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

// Формирует текст запроса, получающий срез последних регистра по документам.
// 
// Параметры:
//  ИмяРегистра - Строка - Имя регистра, для которого необходимо получить срез последних.
//  ИмяТаблицыСрезПоследних - Строка - Имя временной таблицы, которая будет содержать срез последних.
//  ИмяТаблицыОбъектов - Строка - Имя временной таблицы, содержащей документы (обязательные поля: Регистратор, ОсновноеСредство, Дата).
//
// Возвращаемое значение:
// 	Строка - Текст запроса.
//
Функция ТекстЗапросаСрезПоследнихРегистраОС(ИмяРегистра, ИмяТаблицыСрезПоследних, ИмяТаблицыОбъектов) Экспорт

	МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяРегистра];
	
	ЕстьОрганизация = Ложь;
	
	СписокПолей = Новый Массив;
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Измерения Цикл
		Если МетаданныеИзмерения.Имя = "Организация" Тогда
			ЕстьОрганизация = Истина;
			Прервать;
		КонецЕсли; 
	КонецЦикла; 
	
	Для каждого МетаданныеИзмерения Из МетаданныеРегистра.Ресурсы Цикл
		ПутьКПолю = "	ТаблицаРегистра." + МетаданныеИзмерения.Имя;
		СписокПолей.Добавить(ПутьКПолю + " КАК " + МетаданныеИзмерения.Имя);
	КонецЦикла; 
	
	РазделительПолей = ",
	|	";
	ТекстПолей = СтрСоединить(СписокПолей, РазделительПолей);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втТаблицаОС.Регистратор КАК Регистратор,
	|	втТаблицаОС.Организация КАК Организация,
	|	втТаблицаОС.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ТаблицаРегистра.Период) КАК Период
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_Период
	|ИЗ
	|	ВТ_ТаблицаОС КАК втТаблицаОС
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = втТаблицаОС.Организация
	|			И ТаблицаРегистра.ОсновноеСредство = втТаблицаОС.ОсновноеСредство
	|			И ТаблицаРегистра.Период <= втТаблицаОС.Дата
	|			И ТаблицаРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаОС.Регистратор,
	|	втТаблицаОС.Организация,
	|	втТаблицаОС.ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистраПериод.Регистратор КАК Регистратор,
	|	ТаблицаРегистраПериод.Период КАК ПериодТаблицыРегистра,
	|	ТаблицаРегистраПериод.Организация КАК Организация,
	|	ТаблицаРегистраПериод.ОсновноеСредство КАК ОсновноеСредство,
	|	МАКСИМУМ(ТаблицаРегистра.Регистратор) КАК РегистраторТаблицыРегистра
	|ПОМЕСТИТЬ ВТ_ИмяРегистра_Регистратор
	|ИЗ
	|	ВТ_ИмяРегистра_Период КАК ТаблицаРегистраПериод
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО ТаблицаРегистраПериод.Организация = ТаблицаРегистра.Организация
	|			И ТаблицаРегистраПериод.ОсновноеСредство = ТаблицаРегистра.ОсновноеСредство
	|			И ТаблицаРегистраПериод.Период = ТаблицаРегистра.Период
	|			И ТаблицаРегистра.Активность
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРегистраПериод.Регистратор,
	|	ТаблицаРегистраПериод.Период,
	|	ТаблицаРегистраПериод.Организация,
	|	ТаблицаРегистраПериод.ОсновноеСредство
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ПериодТаблицыРегистра,
	|	Организация,
	|	ОсновноеСредство
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистраРегистратор.Регистратор КАК Регистратор,
	|	ТаблицаРегистраРегистратор.ОсновноеСредство КАК ОсновноеСредство,
	|	&ТекстПолей
	|
	|ПОМЕСТИТЬ ВТ_СрезПоследнихРегистра
	|
	|ИЗ
	|	ВТ_ИмяРегистра_Регистратор КАК ТаблицаРегистраРегистратор
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС КАК ТаблицаРегистра
	|		ПО ТаблицаРегистра.Организация = ТаблицаРегистраРегистратор.Организация
	|			И ТаблицаРегистра.ОсновноеСредство = ТаблицаРегистраРегистратор.ОсновноеСредство
	|			И ТаблицаРегистра.Период = ТаблицаРегистраРегистратор.ПериодТаблицыРегистра
	|			И ТаблицаРегистра.Регистратор = ТаблицаРегистраРегистратор.РегистраторТаблицыРегистра
	|			И ТаблицаРегистра.Активность
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор,
	|	ОсновноеСредство";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ИмяРегистра", ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_ТаблицаОС", ИмяТаблицыОбъектов);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПервоначальныеСведенияОС", "РегистрСведений." + ИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВТ_СрезПоследнихРегистра", ИмяТаблицыСрезПоследних);
	
	Если НЕ ЕстьОрганизация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.Организация = втТаблицаОС.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистраПериод.Организация = ТаблицаРегистра.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистра.Организация = ТаблицаРегистраРегистратор.Организация", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втТаблицаОС.Организация", "НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаРегистраПериод.Организация", "НЕОПРЕДЕЛЕНО");
	КонецЕсли; 
		
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Прочее

Процедура ЗарегистрироватьПроблемуВыполненияРасчета(ЭтапРасчета, Период, Организация, ОписаниеПроблемы, ГруппаПроблем = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ЭтапРасчета,
		Организация,
		Период);
		
	Если НЕ ЗначениеЗаполнено(ГруппаПроблем) Тогда
		ГруппаПроблем = НСтр("ru = 'При выполнении операции были диагностированы ошибки';
							|en = 'Errors were found when executing the operation'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПроблем,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.Ошибка,
		ОписаниеПроблемы,
		Объект);
	
КонецПроцедуры

Процедура ЗарегистрироватьПредупреждениеВыполненияРасчета(ЭтапРасчета, Период, Организация, ОписаниеПредупреждения, ГруппаПредупреждений = "", Объект = Неопределено, Отказ = Ложь) Экспорт

	Отказ = Истина;
	
	ПараметрыРегистрации = ЗакрытиеМесяцаСервер.ИнициализироватьПараметрыРегистрацииПроблемыРасчета(
		ЭтапРасчета,
		Организация,
		Период);
		
	Если НЕ ЗначениеЗаполнено(ГруппаПредупреждений) Тогда
		ГруппаПредупреждений = НСтр("ru = 'При выполнении операции возникли предупреждения';
									|en = 'Warnings occurred while executing the operation'", ОбщегоНазначения.КодОсновногоЯзыка());
	КонецЕсли;
		
	ЗакрытиеМесяцаСервер.ЗарегистрироватьПроблемуВыполненияРасчета(
		ПараметрыРегистрации,
		ГруппаПредупреждений,
		Перечисления.ВариантыВажностиПроблемыСостоянияСистемы.ПолезныйСовет,
		ОписаниеПредупреждения,
		Объект);
	
КонецПроцедуры

// Добавляет описание ошибки.
// 
// Параметры:
//  ОписаниеПроблемы - Строка -
//  Объект - Произвольный - Объект
//  Организация - СправочникСсылка.Организации - 
//  СписокОшибок - Массив -
Процедура ДобавитьОписаниеОшибки(ОписаниеПроблемы, Объект, Организация, СписокОшибок) Экспорт

	Если СписокОшибок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ОписаниеПроблемы", ОписаниеПроблемы);
	ОписаниеОшибки.Вставить("Организация", Организация);
	ОписаниеОшибки.Вставить("Объект", Объект);
	
	СписокОшибок.Добавить(ОписаниеОшибки);
	
КонецПроцедуры
 
// Определяет возможность ведения раздельного учета ВНА.
//
// Возвращаемое значение:
//  Булево - Истина, если доступен раздельный учет ВНА.
//
Функция ВедетсяРегламентированныйУчетВНА() Экспорт

	Возврат ПолучитьФункциональнуюОпцию("РегламентированныйУчетВНА");
	
КонецФункции
 
Функция МаксимальныйОбъемПакетаОС() Экспорт

	Возврат 500;

КонецФункции

Функция МаксимальноеКоличествоЗаданийДляРасчетаАмортизации() Экспорт

	ЗначенияПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации(
  							Перечисления.ОперацииЗакрытияМесяца.НачислениеАмортизацииОС);
							
	Возврат ЗначенияПараметров.МаксимальноеКоличествоЗаданийДляРасчетаАмортизации;

КонецФункции

// Заполняет информацию о документе в другом учете.
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура - со свойствами:
// 	           * Ссылка - 
// 	           * ОтражатьВУпрУчете - 
// 	           * ОтражатьВРеглУчете - 
// 	           * ДокументВДругомУчете - 
// 	Элементы - ВсеЭлементыФормы:
//              * ИнформацияОДокументеВДругомУчете - ДекорацияФормы -  
//              * ДекорацияИнформацияОДокументеВДругомУчете - ДекорацияФормы -  
Процедура ЗаполнитьИнформациюОДокументеВДругомУчете(Объект, Элементы) Экспорт

	ЗаголовокНадписи = ИнформацияОДокументеВДругомУчете(Объект);
	
	Если ЗаголовокНадписи.Количество() <> 0 Тогда
		Элементы.ИнформацияОДокументеВДругомУчете.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокНадписи);
		Элементы.ДекорацияИнформацияОДокументеВДругомУчете.Видимость = Истина;
		Элементы.ИнформацияОДокументеВДругомУчете.Видимость = Истина;
	Иначе
		Элементы.ДекорацияИнформацияОДокументеВДругомУчете.Видимость = Ложь;
		Элементы.ИнформацияОДокументеВДругомУчете.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Объект - ДанныеФормыСтруктура - со свойствами:
// 	           * Ссылка - 
// 	           * ОтражатьВУпрУчете - 
// 	           * ОтражатьВРеглУчете - 
// 	           * ДокументВДругомУчете - 
// 	ПоказатьИнформациюЕслиНеСоздан - Булево - 
// Возвращаемое значение:
// 	Массив - Описание
Функция ИнформацияОДокументеВДругомУчете(Объект, ПоказатьИнформациюЕслиНеСоздан = Истина) Экспорт

	ЗаголовокНадписи = Новый Массив;
	
	Если НЕ ВедетсяРегламентированныйУчетВНА()
		ИЛИ Объект.ОтражатьВУпрУчете 
			И Объект.ОтражатьВРеглУчете Тогда
		Возврат ЗаголовокНадписи;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Объект.ДокументВДругомУчете) Тогда
		
		РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
									Объект.ДокументВДругомУчете, 
									"ОтражатьВРеглУчете,ОтражатьВУпрУчете,Проведен,ПометкаУдаления,Номер,Дата,Ссылка");
									
		Если НЕ РеквизитыДокумента.ПометкаУдаления Тогда
			ЗаголовокНадписи = ЗаголовокНадписиОДокументеВДругомУчете(РеквизитыДокумента);
		Иначе
			ЗаголовокНадписи = НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан);
		КонецЕсли; 
		
	Иначе
		
		ЗаголовокНадписи = НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан);
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция ПолучитьРегламентныйДокумент(СсылкаПроведен, СсылкаНеПроведен, СсылкаУдален, ДокументМенеджер) Экспорт

	Если НЕ ЗначениеЗаполнено(СсылкаПроведен)
		И НЕ ЗначениеЗаполнено(СсылкаНеПроведен)
		И НЕ ЗначениеЗаполнено(СсылкаУдален) Тогда
		
		ДокументОбъект = ДокументМенеджер.СоздатьДокумент();
		ДокументОбъект.Заполнить(Неопределено);
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаПроведен) Тогда
		
		ДокументОбъект = СсылкаПроведен.ПолучитьОбъект();
		
	ИначеЕсли ЗначениеЗаполнено(СсылкаНеПроведен) Тогда
		
		ДокументОбъект = СсылкаНеПроведен.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
	Иначе
		
		ДокументОбъект = СсылкаУдален.ПолучитьОбъект();
		ДокументОбъект.ПометкаУдаления = Ложь;
		
	КонецЕсли; 

	Возврат ДокументОбъект;
	
КонецФункции

// Заполняет признаки отражения в учете.
// Используется в документах, которые не содержат выбор отражения в учете.
//
// Параметры:
//  Объект			 - ДокументОбъект	 - Документ, в котором нужно заполнить признаки отражения в учете.
//  СписокАктивов	 - Массив			 - Список внеоборотных активов.
//
Процедура ЗаполнитьОтражениеВУчете(Объект, СписокАктивов) Экспорт
	
	Объект.ОтражатьВУпрУчете = Ложь;
	Объект.ОтражатьВРеглУчете = Ложь;
	
	Если СписокАктивов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = ВнеоборотныеАктивыЛокализация.ТекстЗапросаЗаполнитьОтражениеВУчете();
	
	Если ТекстЗапроса = Неопределено Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПринятоКУчету.ОтражатьВУпрУчете) > 0, ЛОЖЬ) КАК ОтражатьВУпрУчете,
		|	ЕСТЬNULL(СУММА(ПринятоКУчету.ОтражатьВУпрУчете) > 0, ЛОЖЬ) КАК ОтражатьВРеглУчете
		|
		|ИЗ
		|	(ВЫБРАТЬ ПЕРВЫЕ 1
		|		1 КАК ОтражатьВУпрУчете
		|	ИЗ
		|		РегистрСведений.ПорядокУчетаОСУУ КАК ПорядокУчетаОС
		|	ГДЕ
		|		ПорядокУчетаОС.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
		|		И ПорядокУчетаОС.ОсновноеСредство В(&СписокАктивов)
		|		И ПорядокУчетаОС.Организация = &Организация
		|		И ПорядокУчетаОС.Регистратор <> &Регистратор
		|
		|	ОБЪЕДИНИТЬ ВСЕ
		|
		|	ВЫБРАТЬ ПЕРВЫЕ 1
		|		1 КАК ОтражатьВУпрУчете
		|	ИЗ
		|		РегистрСведений.ПорядокУчетаНМАУУ КАК ПорядокУчета
		|	ГДЕ
		|		ПорядокУчета.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияНМА.ПринятКУчету)
		|		И ПорядокУчета.НематериальныйАктив В(&СписокАктивов)
		|		И ПорядокУчета.Организация = &Организация
		|		И ПорядокУчета.Регистратор <> &Регистратор) КАК ПринятоКУчету";
		
	КонецЕсли; 
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокАктивов", СписокАктивов);
	Запрос.УстановитьПараметр("Регистратор", Объект.Ссылка);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Объект, Выборка);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает условное оформление элементов, относящихся с целевому финансированию.
// 
// Параметры:
// 	УсловноеОформление - УсловноеОформлениеКомпоновкиДанных - 
// 	Элементы - ВсеЭлементыФормы:
//				* ЦелевоеФинансированиеСубконто1 - ПолеФормы -  
//				* ЦелевоеФинансированиеСубконто2 - ПолеФормы -  
//				* ЦелевоеФинансированиеСубконто3 - ПолеФормы -  
Процедура УстановитьУсловноеОформлениеЦелевогоФинансирования(УсловноеОформление, Элементы) Экспорт
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто1.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто1Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто2.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто2Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	//
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ЦелевоеФинансированиеСубконто3.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Разрешено");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.ЦелевоеФинансирование.Субконто3Заголовок"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);

КонецПроцедуры

Функция ФиксированныйМассивВСписок(ФиксированныйМассив) Экспорт

	Список = Новый СписокЗначений;
	Для каждого ЗначениеМассива Из ФиксированныйМассив Цикл
		Список.Добавить(ЗначениеМассива);
	КонецЦикла; 
	
	Возврат Список;

КонецФункции

// Рассчитывает номера пакетов и записывает их в регистр.
// 
// Параметры:
// 	Выборка - ВыборкаИзРезультатаЗапроса -
// 	ОбъемПакетов - Число -
// 	НаборЗаписей - РегистрСведенийНаборЗаписей - 
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
//      * Организация - СправочникСсылка.Организации -
//      * НомерПакета - Число -
Функция РассчитатьНомераПакетовАмортизации(Выборка, ОбъемПакетов, НаборЗаписей) Экспорт
	
	СписокТекущихПакетов = Новый ТаблицаЗначений;
	СписокТекущихПакетов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	СписокТекущихПакетов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СписокТекущихПакетов.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	СписокТекущихПакетов.Колонки.Добавить("ОбъемПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	МаксимальныйОбъемПакета = МаксимальныйОбъемПакетаОС();
	
	ИзмененныеПакеты = Новый ТаблицаЗначений;
	ИзмененныеПакеты.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ИзмененныеПакеты.Колонки.Добавить("НомерПакета", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));
	
	ТекущийПакет = Неопределено;
	ДанныеКЗаписи = 0;
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Организация,Период", Выборка.Организация, Выборка.Период);
		СписокСтрок = СписокТекущихПакетов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ТекущийПакет = СписокСтрок[0];
		Иначе
			ТекущийПакет = Неопределено;
		КонецЕсли;
		
		Если ТекущийПакет = Неопределено ИЛИ ТекущийПакет.ОбъемПакета >= МаксимальныйОбъемПакета Тогда
			
			ПодходящийПакет = НайтиПодходящийПакет(
									Выборка.Организация, 
									Выборка.Период,
									?(ТекущийПакет <> Неопределено, ТекущийПакет.НомерПакета, 0), 
									ОбъемПакетов, 
									МаксимальныйОбъемПакета);
			
			Если ТекущийПакет = Неопределено Тогда
				ТекущийПакет = СписокТекущихПакетов.Добавить();
				ТекущийПакет.Организация = Выборка.Организация;
				ТекущийПакет.Период      = Выборка.Период;
			КонецЕсли;
			ТекущийПакет.НомерПакета = ПодходящийПакет.НомерПакета;
			ТекущийПакет.ОбъемПакета = ПодходящийПакет.ОбъемПакета;
			
		КонецЕсли; 
		
		Если ДанныеКЗаписи > 5000 Тогда
			НаборЗаписей.Записать(Ложь);
			НаборЗаписей = РегистрыСведений.ПакетыАмортизацииОС.СоздатьНаборЗаписей();
			ДанныеКЗаписи = 0;
		КонецЕсли; 
		
		НовыйПакетЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйПакетЗапись, Выборка);
		НовыйПакетЗапись.НомерПакета = ТекущийПакет.НомерПакета;
		
		ИзмененныйПакет = ИзмененныеПакеты.Добавить();
		ЗаполнитьЗначенияСвойств(ИзмененныйПакет, НовыйПакетЗапись);
		
		ДанныеКЗаписи = ДанныеКЗаписи + 1;
		
		ТекущийПакет.ОбъемПакета = ТекущийПакет.ОбъемПакета + 1;
		
	КонецЦикла;
	
	Если ДанныеКЗаписи > 0 Тогда
		НаборЗаписей.Записать(Ложь);
	КонецЕсли;
	
	ИзмененныеПакеты.Свернуть("Организация,НомерПакета");
	
	Возврат ИзмененныеПакеты;

КонецФункции

// Описание
// 
// Параметры:
// 	ХозяйственныеОперацииИДокументы - См. ОбщегоНазначенияУТ.НоваяТаблицаХозяйственныеОперацииИДокументы
Процедура ИнициализироватьХозяйственныеОперацииИДокументыВнеоборотныхАктивов(ХозяйственныеОперацииИДокументы) Экспорт

	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ВнутренниеПотребленияТоваров";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'внутренние потребления товаров';
												|en = 'inventory consumption'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.ПриобретениеУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "ЗакупкаУПоставщика";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'приобретение услуг и прочих активов';
												|en = 'Vendor invoice — Services and Assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ХозяйственнаяОперация 		= Перечисления.ХозяйственныеОперации.РеализацияВнеоборотныхАктивов;
	Строка.ПолноеИмяДокумента			= Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя();
	Строка.КлючНазначенияИспользования 	= "РеализацияВнеоборотныхАктивов";
	Строка.ЗаголовокРабочегоМеста	 	= НСтр("ru = 'реализация услуг и прочих активов';
												|en = 'Customer invoice — Services and Assets'");
	Строка.ДобавитьКнопкуСоздать        = Истина;
	
КонецПроцедуры

Процедура ДобавитьРезультатПроверкиЗаполнения(Объект, ПредставлениеРеквизита, ИмяТЧ, НомерСтроки, ОбъектПроблемы) Экспорт

	Если НЕ Объект.ДополнительныеСвойства.Свойство("РезультатыПроверкиЗаполнения") Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения = Неопределено Тогда
		Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения = Новый Массив;
	КонецЕсли; 
	
	РезультатыПроверкиЗаполнения = Объект.ДополнительныеСвойства.РезультатыПроверкиЗаполнения; // Массив -
	
	ПараметрыОшибки = Новый Структура;
	ПараметрыОшибки.Вставить("Объект", ОбъектПроблемы);
	ПараметрыОшибки.Вставить("ПредставлениеРеквизита", ПредставлениеРеквизита);
	ПараметрыОшибки.Вставить("ИмяТЧ", ИмяТЧ);
	ПараметрыОшибки.Вставить("НомерСтроки", НомерСтроки);
	
	РезультатыПроверкиЗаполнения.Добавить(ПараметрыОшибки);
	
КонецПроцедуры

Процедура УстановитьПараметрыНабораСвойствВНА24() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьВнеоборотныеАктивы2_2 = Константы.ИспользоватьВнеоборотныеАктивы2_2.Получить();
	ИспользоватьВнеоборотныеАктивы2_4 = Константы.ИспользоватьВнеоборотныеАктивы2_4.Получить();
										
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ИзменениеПараметровОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_МодернизацияОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПеремещениеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПодготовкаКПередачеОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуОС2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_ПринятиеКУчетуУзловКомпонентовАмортизации", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеНМА2_4", ПараметрыНабора);
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Документ_СписаниеОС2_4", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4;
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_НематериальныеАктивы", ПараметрыНабора);
	
	ПараметрыНабора = УправлениеСвойствами.СтруктураПараметровНабораСвойств();
	ПараметрыНабора.Используется = 
		ИспользоватьВнеоборотныеАктивы2_2
		ИЛИ ИспользоватьВнеоборотныеАктивы2_4
		ИЛИ Константы.ИспользоватьУправлениеРемонтами.Получить();
	УправлениеСвойствами.УстановитьПараметрыНабораСвойств("Справочник_ОбъектыЭксплуатации_Общие", ПараметрыНабора);
	
КонецПроцедуры

Процедура УстановитьЗначенияПараметровПроведенияПриПеремещении(Реквизиты, ЗначенияПараметровПроведения) Экспорт

	Если Реквизиты = Неопределено Тогда
		Возврат
	КонецЕсли; 
		
	// ИнформацияПоОтправителю
	ШаблонСтроки = НСтр("ru = 'Перемещение из ""%1""';
						|en = 'Transfer from ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		ИЛИ Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.Подразделение)
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.Организация) Тогда
			ИнформацияПоОтправителю = "";
		ИначеЕсли Реквизиты.Подразделение <> Реквизиты.ПодразделениеПолучатель Тогда
			ШаблонСтроки = НСтр("ru = 'Перемещение из организации ""%1"" и подразделения ""%2""';
								|en = 'Transfer from the ""%1"" company and the ""%2"" business unit'", ОбщегоНазначения.КодОсновногоЯзыка());
			ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Организация, Реквизиты.Подразделение);
		Иначе
			ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Организация);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.Подразделение) Тогда
		ИнформацияПоОтправителю = СтрШаблон(ШаблонСтроки, Реквизиты.Подразделение);
	Иначе
		ИнформацияПоОтправителю = "";
	КонецЕсли;
	ЗначенияПараметровПроведения.Вставить("ИнформацияПоОтправителю", ИнформацияПоОтправителю);
	
	// ИнформацияПоПолучателю
	ШаблонСтроки = НСтр("ru = 'Перемещение в ""%1""';
						|en = 'Transfer to ""%1""'", ОбщегоНазначения.КодОсновногоЯзыка());
	Если Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеОСвПодразделениеВыделенноеНаБаланс
		ИЛИ Реквизиты.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеНМАвПодразделениеВыделенноеНаБаланс Тогда
		
		Если НЕ ЗначениеЗаполнено(Реквизиты.ПодразделениеПолучатель)
			ИЛИ НЕ ЗначениеЗаполнено(Реквизиты.ОрганизацияПолучатель) Тогда
			ИнформацияПоПолучателю = "";
		ИначеЕсли Реквизиты.Подразделение <> Реквизиты.ПодразделениеПолучатель Тогда
			ШаблонСтроки = НСтр("ru = 'Перемещение в организацию ""%1"" и подразделение ""%2""';
								|en = 'Transfer to the ""%1"" company and the ""%2"" business unit'", ОбщегоНазначения.КодОсновногоЯзыка());
			ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ОрганизацияПолучатель, Реквизиты.ПодразделениеПолучатель);
		Иначе
			ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ОрганизацияПолучатель);
		КонецЕсли; 
		
	ИначеЕсли ЗначениеЗаполнено(Реквизиты.ПодразделениеПолучатель) Тогда
		ИнформацияПоПолучателю = СтрШаблон(ШаблонСтроки, Реквизиты.ПодразделениеПолучатель);
	Иначе
		ИнформацияПоПолучателю = "";
	КонецЕсли;
	ЗначенияПараметровПроведения.Вставить("ИнформацияПоПолучателю", ИнформацияПоПолучателю);
	
КонецПроцедуры

// Возвращает список организаций, доступных пользователю.
// 
// Возвращаемое значение:
//  Массив - Список организаций, доступных пользователю.
//
Функция СписокРазрешенныхОрганизаций() Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	СписокОрганизаций = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат СписокОрганизаций;

КонецФункции

Функция ПредставлениеРеквизита(ИмяРеквизита, ИмяТЧ, ПредставлениеРеквизитов, МетаданныеОбъекта) Экспорт

	Если ПредставлениеРеквизитов = Неопределено Тогда
		ПредставлениеРеквизитов = Новый Соответствие;
		Для каждого МетаданныеРеквизита Из МетаданныеОбъекта.ТабличныеЧасти[ИмяТЧ].Реквизиты Цикл
			ПредставлениеРеквизитов.Вставить(МетаданныеРеквизита.Имя, МетаданныеРеквизита.Синоним);
		КонецЦикла;
	КонецЕсли;

	Возврат ПредставлениеРеквизитов.Получить(ИмяРеквизита);
	
КонецФункции

Процедура УстановитьВидимостьКомандыВводаНаОсновании(Элементы, ИмяДокумента, ТаблицаКоманд, ВидимостьКоманды) Экспорт

	ТекСтрока = ТаблицаКоманд.Найти("Документ." + ИмяДокумента, "Менеджер");
	Если ТекСтрока <> Неопределено Тогда
		Элементы[ТекСтрока.ИмяВФорме].Видимость = ВидимостьКоманды;
	КонецЕсли;

КонецПроцедуры

// Заполняет значение реквизита или очищает его.
// 
// Параметры:
//  Объект - ДокументОбъект - 
//  ИмяРеквизита - Строка - Имя реквизита
//  Действие - Строка - 
//  Значение - Произвольный -
//  ПустоеЗначение - Произвольный -
//  ИзмененныеРеквизиты - Массив из Строка -
Процедура ЗаполнитьОчиститьРеквизит(Объект, ИмяРеквизита, Действие, Значение, ПустоеЗначение, ИзмененныеРеквизиты) Экспорт

	Если Действие = "Заполнить" 
		И (НЕ ЗначениеЗаполнено(Объект[ИмяРеквизита])
			ИЛИ Объект[ИмяРеквизита] = Ложь И Значение = Истина) Тогда
		Объект[ИмяРеквизита] = Значение;
	ИначеЕсли Действие = "Очистить" Тогда
		Объект[ИмяРеквизита] = ПустоеЗначение;
	КонецЕсли;
	
	ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
	
КонецПроцедуры

// Добавляет тип объекта метаданных по его имени.
// 
// Параметры:
//  ИмяДокумента - Строка - Имя документа
//  ПроверитьНаличиеПрав - Булево - Проверить наличие прав
//  СписокОбъектов - Массив -
Процедура ДобавитьТипОбъектаМетаданных(ИмяДокумента, ПроверитьНаличиеПрав, СписокОбъектов) Экспорт

	Если НЕ ПроверитьНаличиеПрав ИЛИ ПравоДоступа("Проведение", Метаданные.Документы[ИмяДокумента]) Тогда
		СписокОбъектов.Добавить(Тип("ДокументСсылка." + ИмяДокумента));
	КонецЕсли; 
	
КонецПроцедуры

Функция ЕстьПраваНаЧтениеСостоянияОС() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаОСУУ) 
		И ВнеоборотныеАктивыЛокализация.ЕстьПраваНаЧтениеСостоянияОС();

КонецФункции

Функция ЕстьПраваНаЧтениеСостоянияНМА() Экспорт

	Возврат ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ПорядокУчетаНМАУУ) 
		И ВнеоборотныеАктивыЛокализация.ЕстьПраваНаЧтениеСостоянияНМА();

КонецФункции

Функция ПредставлениеСуммы(Сумма, ЗаголовокСуммы, Валюта) Экспорт

	СуммаСтрокой = Формат(Сумма, "ЧДЦ=2; ЧН=-; ЧГ=3,0");
	
	ПредставлениеСуммы = Новый Массив;
	
	Если Сумма > 0 Тогда
		
		Текст = СтрШаблон("%1 %2 %3", ЗаголовокСуммы, СуммаСтрокой, Валюта);
		ПредставлениеСуммы.Добавить(Текст);
		
	ИначеЕсли Сумма < 0 Тогда
		
		ПредставлениеСуммы.Добавить(ЗаголовокСуммы);
		ПредставлениеСуммы.Добавить(" ");
		ПредставлениеСуммы.Добавить(Новый ФорматированнаяСтрока(СуммаСтрокой,, ЦветаСтиля.ЦветОтрицательногоЧисла));
		ПредставлениеСуммы.Добавить(" ");
		ПредставлениеСуммы.Добавить(Строка(Валюта));
		
	Иначе
		
		ПредставлениеСуммы.Добавить(ЗаголовокСуммы + " -");
		
	КонецЕсли; 

	Возврат Новый ФорматированнаяСтрока(ПредставлениеСуммы);
	
КонецФункции

Процедура УстановитьСвойствоСтруктуры(ИмяСвойства, ЗначениеСвойства, Приемник) Экспорт

	НовыеСвойства = Новый Структура(Приемник);
	НовыеСвойства.Вставить(ИмяСвойства, ЗначениеСвойства);
	Приемник = Новый ФиксированнаяСтруктура(НовыеСвойства);
	
КонецПроцедуры

Функция ДоступенВыборОбъектовЭксплуатации2_4(Параметры) Экспорт

	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_4") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Контекст") 
		И СтрНайти(Параметры.Контекст, "УУ") = 0 Тогда
		
		// Если в параметрах выбора нет УУ то форма не поддерживает выбор 2.4
		ДоступенВыбор = Ложь;
		
	ИначеЕсли ПолучитьФункциональнуюОпцию("ИспользоватьВнеоборотныеАктивы2_2") Тогда
	
		ДатаНачалаУчета = ВнеоборотныеАктивыЛокализация.ДатаНачалаУчетаВнеоборотныхАктивов2_4();
		
		// Если в параметрах выбора есть МФУ, то форма поддерживает выбор 2.2 и 2.4 и Нужно по дате сведений определить какая
		// форма нужна. Если в параметрах выбора нет МФУ, то форма поддерживает только выбор 2.4.
		ДоступенВыбор = 
			Параметры.Свойство("Контекст") 
				И СтрНайти(Параметры.Контекст, "МФУ") = 0
			ИЛИ НЕ Параметры.Свойство("ДатаСведений")
				И ТекущаяДатаСеанса() >= ДатаНачалаУчета 
			ИЛИ Параметры.Свойство("ДатаСведений")
				И Параметры.ДатаСведений >= ДатаНачалаУчета;
	Иначе
		ДоступенВыбор = Истина;
	КонецЕсли;
			
	Если НЕ ДоступенВыбор Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("БУСостояние") Тогда
			Параметры.Отбор.Вставить("Состояние", Параметры.Отбор.БУСостояние);
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("БУОрганизация") Тогда
			Параметры.Отбор.Вставить("Организация", Параметры.Отбор.БУОрганизация);
		КонецЕсли; 
		Если Параметры.Отбор.Свойство("БУПодразделение") Тогда
			Параметры.Отбор.Вставить("Подразделение", Параметры.Отбор.БУПодразделение);
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

Процедура ПроверитьСоответствиеСтатьиРасходовПорядкуУчетаНУ(Форма) Экспорт

	Объект = Форма.Объект;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатьяРасходовБУ) Тогда
		Возврат;
	КонецЕсли;
	
	МассивВариантовРаспределения = ВнеоборотныеАктивыКлиентСерверЛокализация.ВариантыРаспределенияРасходовПоАмортизацииРегл(
		Новый Структура("ПорядокУчетаНУ", Объект.ПорядокУчетаНУ));
		
	Если МассивВариантовРаспределения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВариантРаспределенияРасходовРегл = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.СтатьяРасходовБУ, "ВариантРаспределенияРасходовРегл");
	
	Если МассивВариантовРаспределения.Найти(ВариантРаспределенияРасходовРегл) = Неопределено Тогда
		Объект.СтатьяРасходовБУ = Неопределено;
		Объект.АналитикаРасходовБУ = Неопределено;
		Форма.АналитикаРасходовБУОбязательна = Ложь;
		Форма.СтатьяРасходовДоИзменения = Объект.СтатьяРасходовБУ;
		Форма.АналитикаРасходовДоИзменения = Объект.АналитикаРасходовБУ;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа по местонахождению основных средств.
// 
// Параметры:
// 	СписокИлиСтруктураРеквизитов	- Строка, Структура	-	Реквизиты, которые нужно заполнить.
// 															В ключе структуры хранится имя реквизита документа.
// 															В значении хранится
// 	ТабличнаяЧасть	-	ДанныеФормыКоллекция	-	Табличная часть в которой указаны основные средства.
// 	Объект	-	ДанныеФормыСтруктура	- Данные документа.
// 	ИзмененныеРеквизиты	-	Строка	-	Список измененных реквизитов.
//
Процедура ЗаполнитьШапкуПоВыбраннымОС(СписокИлиСтруктураРеквизитов, ТабличнаяЧасть, Объект, ИзмененныеРеквизиты = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() = 0
		ИЛИ ТабличнаяЧасть = Неопределено И НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СписокИлиСтруктураРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(СписокИлиСтруктураРеквизитов);
	Иначе
		СтруктураРеквизитов = СписокИлиСтруктураРеквизитов;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНезаполненныеРеквизиты Тогда
		Возврат;
	КонецЕсли;

	ОсновноеСредство = Неопределено;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
				ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОсновноеСредство = Объект.ОсновноеСредство;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	МестонахождениеОС = ВнеоборотныеАктивы.МестонахождениеОС(ОсновноеСредство);
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизитыМассив = СтрРазделить(ИзмененныеРеквизиты, ",");
	Иначе
		ИзмененныеРеквизитыМассив = Новый Массив;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестонахождениеОС.Организация;
		ИзмененныеРеквизитыМассив.Добавить("Организация");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестонахождениеОС.Местонахождение;
		ИзмененныеРеквизитыМассив.Добавить("Подразделение");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("МОЛ")
		И НЕ ЗначениеЗаполнено(Объект.МОЛ) Тогда
		Объект.МОЛ = МестонахождениеОС.МОЛ;
		ИзмененныеРеквизитыМассив.Добавить("МОЛ");
	КонецЕсли;
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты = СтрСоединить(ИзмененныеРеквизитыМассив, ",");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа по местонахождению основных средств.
// 
// Параметры:
// 	СписокИлиСтруктураРеквизитов	- Строка, Структура	-	Реквизиты, которые нужно заполнить.
// 															В ключе структуры хранится имя реквизита документа.
// 															В значении хранится
// 	ТабличнаяЧасть	-	ДанныеФормыКоллекция	-	Табличная часть в которой указаны основные средства.
// 	Объект	-	ДанныеФормыСтруктура	- Данные документа.
// 	ИзмененныеРеквизиты	-	Строка	-	Список измененных реквизитов.
//
Процедура ЗаполнитьШапкуПоВыбраннымНМА(СписокИлиСтруктураРеквизитов, ТабличнаяЧасть, Объект, ИзмененныеРеквизиты = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() = 0
		ИЛИ ТабличнаяЧасть = Неопределено И НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(СписокИлиСтруктураРеквизитов) = Тип("Строка") Тогда
		СтруктураРеквизитов = Новый Структура(СписокИлиСтруктураРеквизитов);
	Иначе
		СтруктураРеквизитов = СписокИлиСтруктураРеквизитов;
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНезаполненныеРеквизиты Тогда
		Возврат;
	КонецЕсли;

	НематериальныйАктив = Неопределено;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.НематериальныйАктив) Тогда
				НематериальныйАктив = ДанныеСтроки.НематериальныйАктив;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		НематериальныйАктив = Объект.НематериальныйАктив;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		Возврат;
	КонецЕсли;
	
	МестоУчетаНМА = ВнеоборотныеАктивы.МестоУчетаНМА(НематериальныйАктив);
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизитыМассив = СтрРазделить(ИзмененныеРеквизиты, ",");
	Иначе
		ИзмененныеРеквизитыМассив = Новый Массив;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестоУчетаНМА.Организация;
		ИзмененныеРеквизитыМассив.Добавить("Организация");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестоУчетаНМА.Подразделение;
		ИзмененныеРеквизитыМассив.Добавить("Подразделение");
	КонецЕсли;
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты = СтрСоединить(ИзмененныеРеквизитыМассив, ",");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет реквизиты шапки документа по местонахождению арендованных основных средств.
// 
// Параметры:
// 	СписокРеквизитов - Строка - Реквизиты, которые нужно заполнить.
// 	ТабличнаяЧасть - ДанныеФормыКоллекция - Табличная часть в которой указаны основные средства.
// 	Объект - ДанныеФормыСтруктура - Данные документа.
// 	ИзмененныеРеквизиты	- Строка - Список измененных реквизитов.
//
Процедура ЗаполнитьШапкуПоАрендованнымОС(СписокРеквизитов, ТабличнаяЧасть, Объект, ИзмененныеРеквизиты = Неопределено) Экспорт
	
	Если ТабличнаяЧасть <> Неопределено И ТабличнаяЧасть.Количество() = 0
		ИЛИ ТабличнаяЧасть = Неопределено И НЕ ЗначениеЗаполнено(Объект.ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура(СписокРеквизитов);

	ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Объект);
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Если НЕ ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			ЕстьНезаполненныеРеквизиты = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьНезаполненныеРеквизиты Тогда
		Возврат;
	КонецЕсли;

	ОсновноеСредство = Неопределено;
	
	Если ТабличнаяЧасть <> Неопределено Тогда
		Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
			Если ЗначениеЗаполнено(ДанныеСтроки.ОсновноеСредство) Тогда
				ОсновноеСредство = ДанныеСтроки.ОсновноеСредство;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ОсновноеСредство = Объект.ОсновноеСредство;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОсновноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	МестонахождениеОС = ВнеоборотныеАктивы.МестонахождениеИАрендодательОС(ОсновноеСредство);
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизитыМассив = СтрРазделить(ИзмененныеРеквизиты, ",");
	Иначе
		ИзмененныеРеквизитыМассив = Новый Массив;
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Организация")
		И НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестонахождениеОС.Организация;
		ИзмененныеРеквизитыМассив.Добавить("Организация");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Партнер")
		И НЕ ЗначениеЗаполнено(Объект.Партнер) Тогда
		Объект.Партнер = МестонахождениеОС.Партнер;
		ИзмененныеРеквизитыМассив.Добавить("Партнер");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Контрагент")
		И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = МестонахождениеОС.Контрагент;
		ИзмененныеРеквизитыМассив.Добавить("Контрагент");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Договор")
		И НЕ ЗначениеЗаполнено(Объект.Договор) Тогда
		Объект.Договор = МестонахождениеОС.Договор;
		ИзмененныеРеквизитыМассив.Добавить("Договор");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("Подразделение")
		И НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестонахождениеОС.Местонахождение;
		ИзмененныеРеквизитыМассив.Добавить("Подразделение");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Свойство("МОЛ")
		И НЕ ЗначениеЗаполнено(Объект.МОЛ) Тогда
		Объект.МОЛ = МестонахождениеОС.МОЛ;
		ИзмененныеРеквизитыМассив.Добавить("МОЛ");
	КонецЕсли;
	
	Если ИзмененныеРеквизиты <> Неопределено Тогда
		ИзмененныеРеквизиты = СтрСоединить(ИзмененныеРеквизитыМассив, ",");
	КонецЕсли;
	
КонецПроцедуры

// Если есть проблемные объекты и не обработано ни одного объекта, то будет вызвано исключение.
// Позволяет быстрее завершить с ошибкой выполнение обработчика.
// 
// Параметры:
// 	ПроблемныхОбъектов	-	Число	- Количество проблемных объектов.
// 	ОбъектовОбработано	-	Число	- Количество обработанных объектов.
// 	ПолноеИмяОбъекта	-	Строка	- Полное имя объекта, для которого выполняется обработчик.
//
Процедура ПроверитьВыполнениеОбработчика(ПроблемныхОбъектов, ОбъектовОбработано, ПолноеИмяОбъекта) Экспорт

 	Если ПроблемныхОбъектов <> 0 И ОбъектовОбработано = 0 Тогда
		ТекстСообщения = 
			СтрШаблон(НСтр("ru = 'Не удалось выполнить обработчик обновления объекта метаданных ""%1"".
						   |Подробности в журнале регистрации.';
						   |en = 'The metadata object update handler ""%1"" failed.
						   |Details in the event log.'"),
						ПолноеИмяОбъекта);
 		
		ВызватьИсключение ТекстСообщения;
 	КонецЕсли;
	
КонецПроцедуры

// Добавляет к строке наименование валюты.
// 
// Параметры:
// 	ИсходнаяСтрока - Строка -
// 	ПредставлениеВалюты - Строка -
// Возвращаемое значение:
// 	Строка - Строка с валютой.
Функция ДобавитьКСтрокеВалюту(ИсходнаяСтрока, ПредставлениеВалюты) Экспорт
	Возврат ?(ЗначениеЗаполнено(ПредставлениеВалюты), СтрШаблон(ИсходнаяСтрока + " (%1)", ПредставлениеВалюты), ИсходнаяСтрока);
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РасчетАмортизации

Функция НайтиПодходящийПакет(Организация, Период, Знач НомерПакета, ОбъемПакетов, МаксимальныйОбъем)
	
	ОбъемПакета = МаксимальныйОбъем;
	Пока ОбъемПакета >= МаксимальныйОбъем Цикл
		НомерПакета = НомерПакета + 1;
		СтруктураПоиска = Новый Структура("Организация,Период,НомерПакета", Организация, Период, НомерПакета);
		СписокСтрок = ОбъемПакетов.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() <> 0 Тогда
			ОбъемПакета = СписокСтрок[0].ОбъемПакета;
		Иначе
			ОбъемПакета = 0;
		КонецЕсли;
	КонецЦикла;

	Возврат Новый Структура("ОбъемПакета,НомерПакета", ОбъемПакета,НомерПакета);
	
КонецФункции

#КонецОбласти

#Область ПереоценкаОС_НМА

Процедура ТекстЗапросаТаблицаСтоимостьПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)
	
	ИмяРегистра = ?(ВидОбъектовУчета = "ОС", "СтоимостьОС", "СтоимостьНМА");
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область Дооценка_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ТаблицаПереоценки.Арендатор                 КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&УвеличениеСтоимости                     КАК ХозяйственнаяОперация,
	|	&НастройкаХОУвеличениеСтоимости          КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ТаблицаПереоценки.Арендатор                 КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи        КАК ИдентификаторФинЗаписи,
	|	&УменьшениеВеличиныДооценкиСтоимости            КАК ХозяйственнаяОперация,
	|	&НастройкаХОУменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ТаблицаПереоценки.Арендатор                 КАК Арендатор,
	|	&СтатьяРасходов                             КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                          КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&УменьшениеСтоимости                     КАК ХозяйственнаяОперация,
	|	&НастройкаХОУменьшениеСтоимости          КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиЦФ > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	ТаблицаПереоценки.Арендатор                 КАК Арендатор,
	|	&СтатьяРасходов                             КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                          КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьПР,
	|
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
	|	0 КАК ПриростСтоимости,
	|	0 КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи        КАК ИдентификаторФинЗаписи,
	|	&УменьшениеВеличиныДооценкиСтоимости            КАК ХозяйственнаяОперация,
	|	&НастройкаХОУменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПриростСтоимости_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&УвеличениеСтоимости                     КАК ХозяйственнаяОперация,
	|	&НастройкаХОУвеличениеСтоимости          КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПриростСтоимости_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи     КАК ИдентификаторФинЗаписи,
	|	&ХО_УвеличениеНакопленнойАмортизации            КАК ХозяйственнаяОперация,
	|	&НастройкаХО_УвеличениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|			И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область ПриростСтоимости_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи        КАК ИдентификаторФинЗаписи,
	|	&УменьшениеВеличиныДооценкиСтоимости            КАК ХозяйственнаяОперация,
	|	&НастройкаХОУменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ПриростСтоимости_УменьшениеВеличиныДооценкиНакопленнойАмортизации 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	&Период                                     КАК Период,
	|	&Организация                                КАК Организация,
	|	НЕОПРЕДЕЛЕНО                                КАК Подразделение,
	|	&ОсновноеСредство                           КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета    КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК Арендатор,
	|	НЕОПРЕДЕЛЕНО                                КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК КорАналитикаРасходов,
	|	&ОтражатьВРеглУчете                         КАК ОтражатьВРеглУчете,
	|	&ОтражатьВУпрУчете                          КАК ОтражатьВУпрУчете,
	|
	|	0 КАК Стоимость,
	|	0 КАК СтоимостьРегл,
	|	0 КАК СтоимостьПР,
	|	0 КАК СтоимостьЦФ,
	|	0 КАК СтоимостьПРЦФ,
	|	0 КАК РезервПереоценкиСтоимости,
	|	0 КАК РезервПереоценкиСтоимостиРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимости,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриростСтоимостиРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи          КАК ИдентификаторФинЗаписи,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаАмортизацияПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)

	ИмяРегистра = ?(ВидОбъектовУчета = "ОС", "АмортизацияОС", "АмортизацияНМА");
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область Дооценка_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ХО_УвеличениеНакопленнойАмортизации   КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                           КАК КорСтатьяРасходов,
	|	НЕОПРЕДЕЛЕНО                           КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи      КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УвеличениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Дооценка_УменьшениеВеличиныДооценкиАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи                     КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеНакопленнойАмортизации           КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи      КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Период                                КАК Период,
	|	&Организация                           КАК Организация,
	|	&Подразделение                         КАК Подразделение,
	|	&ОсновноеСредство                      КАК ОсновноеСредство,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета       КАК ГруппаФинансовогоУчета,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&СтатьяРасходов                        КАК КорСтатьяРасходов,
	|	&АналитикаРасходов                     КАК КорАналитикаРасходов,
	|	ТаблицаПереоценки.НачислятьИзнос       КАК НачислятьИзнос,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Амортизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияРегл,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|				И &ВедетсяРегламентированныйУчетВНА
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК АмортизацияПР,
	|
	|	0 КАК АмортизацияЦФ,
	|	0 КАК АмортизацияПРЦФ,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|	
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи                     КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)

	ИмяРегистра = "ПрочиеДоходы";
	
	ТекстыТекущегоЗапроса = Новый Массив;
	
	#Область ДооценкаВосстановительнойСтоимостиИзУценки
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	&Период                                        КАК Период,
	|	&Организация                                   КАК Организация,
	|	&Подразделение                                 КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&УменьшениеВеличиныДооценкиСтоимости           КАК ХозяйственнаяОперация,
	|	&СтатьяДоходов                                 КАК СтатьяДоходов,
	|	&АналитикаДоходов                              КАК АналитикаДоходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	
	|	ВЫБОР 
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	
	|	ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи        КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеВеличиныДооценкиСтоимости КАК НастройкаХозяйственнойОперации
	|	
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область УценкаНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)         КАК ВидДвижения,
	|	&Период                                        КАК Период,
	|	&Организация                                   КАК Организация,
	|	&Подразделение                                 КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности      КАК НаправлениеДеятельности,
	|	&ХО_УменьшениеНакопленнойАмортизации           КАК ХозяйственнаяОперация,
	|	&СтатьяДоходов                                 КАК СтатьяДоходов,
	|	&АналитикаДоходов                              КАК АналитикаДоходов,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|
	|	ВЫБОР 
	|		КОГДА НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|
	|	ВЫБОР 
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ + ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ) > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ 
	|					+ ТаблицаПереоценки.СуммаУценкиАмортизацииЦФ
	|					- ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи     КАК ИдентификаторФинЗаписи,
	|	&НастройкаХО_УменьшениеНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0
	|				И НЕ ТаблицаПереоценки.НачислятьИзнос";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ВнеоборотныеАктивыЛокализация.ДополнитьТекстЗапросаТаблицаПрочиеДоходыПриПереоценке(ТекстыТекущегоЗапроса);
	
	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции
 
Функция ТекстЗапросаТаблицаПрочиеРасходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента) 
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	// Уценка восстановительной стоимости
	"ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                  КАК АналитикаУчетаНоменклатуры,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеСтоимости          КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0)
	|	И НЕ ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	// Дооценка накопленной амортизации из уценки
	|ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСУпр,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаСНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаБезНДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО                  КАК АналитикаУчетаНоменклатуры,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи                     КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ НЕ ТаблицаПереоценки.НачислятьИзнос 
	|				И ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0)
	|	И НЕ ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы),
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))";
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходовПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента) Экспорт
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходовПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходовПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходовПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходовПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстОписаниеВтИсходныеПартииПрочихРасходов();
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении() +
	"ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаАктивовПассивов,
	|	&Ссылка                                     КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеСтоимости          КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период                                     КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	&Организация                                КАК Организация,
	|	&Подразделение                              КАК Подразделение,
	|	&СтатьяРасходов                             КАК СтатьяРасходов,
	|	&АналитикаРасходов                          КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаАктивовПассивов,
	|	&Ссылка                                     КАК ДокументПоступленияРасходов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПартий.ПустаяСсылка) КАК АналитикаУчетаПартий,
	|	ТаблицаПереоценки.НаправлениеДеятельности   КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО                                КАК АналитикаУчетаНоменклатуры,
	|	НЕОПРЕДЕЛЕНО                                КАК ВидДеятельностиНДС,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.НачислятьИзнос
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПустаяСсылка) КАК ХозяйственнаяОперация,
	|
	|	ТаблицаПереоценки.ИдентификаторФинЗаписи                     КАК ИдентификаторФинЗаписи,
	|	&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации КАК НастройкаХозяйственнойОперации
	|
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов КАК ПВХСтатьиРасходов
	|	ПО &СтатьяРасходов = ПВХСтатьиРасходов.Ссылка
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ НЕ ТаблицаПереоценки.НачислятьИзнос 
	|				И ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 
	|				И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0)
	|	И ПВХСтатьиРасходов.ВариантРаспределенияРасходовРегл В (
	|		ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров))";
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ТекстЗапросаВтТаблицаПереоценки(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "ТаблицаПереоценки";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&ОсновноеСредство                                   КАК ОсновноеСредство,
	|	ТаблицаПереоценки.СтоимостьУУ                       КАК СтоимостьУУ,
	|	ТаблицаПереоценки.СтоимостьБУ                       КАК СтоимостьБУ,
	|
	|	ПорядокУчета.ГруппаФинансовогоУчета                 КАК ГруппаФинансовогоУчета,
	|	ПорядокУчета.НаправлениеДеятельности                КАК НаправлениеДеятельности,
	|	МестонахождениеОС.Арендатор                         КАК Арендатор,
	|
	|	ЕСТЬNULL(АмортизацияОС.НачислятьИзнос, ЛОЖЬ)        КАК НачислятьИзнос,
	|
	|	ЕСТЬNULL(АмортизацияОС.Амортизация, 0)              КАК НакопленнаяАмортизацияУУ,
	|
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0)
	|		+ ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)      КАК НакопленнаяАмортизацияБУ,
	|
	|	ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)            КАК НакопленнаяАмортизацияЦФ,
	|	ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)               КАК ТекущаяСтоимостьЦФ,
	|
		// Дооценка стоимости УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиСтоимостиУУ,
	|
		// Дооценка стоимости БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиСтоимостиБУ,
	|	
		// Уценка стоимости УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиУУ,
	|
		// Уценка стоимости БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ >= 0
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиБУ,
	|	
		// Уценка стоимости ЦФ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|					И ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) > ТаблицаПереоценки.СтоимостьБУ
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0) - ТаблицаПереоценки.СтоимостьБУ
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиСтоимостиЦФ,
	|	
		// РезервПереоценкиСтоимости
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) < -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьУУ - ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)) >= -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ) < ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) - ТаблицаПереоценки.СтоимостьУУ) >= ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимости, 0)
	|
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимости,
	|
		// РезервПереоценкиСтоимостиРегл
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) < -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) < 0
	|				И (ТаблицаПереоценки.СтоимостьБУ - ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)) >= -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ) < ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ
	|
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0) > 0
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) - ТаблицаПереоценки.СтоимостьБУ) >= ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(СтоимостьВНА.РезервПереоценкиСтоимостиРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиСтоимостиРегл,
	|
		// Дооценка амортизации УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.Амортизация, 0) <> 0
	|			ТОГДА -АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииУУ,
	|
		// Дооценка амортизации БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|				И (ЕСТЬNULL(АмортизацияОС.АмортизацияРегл, 0) + ЕСТЬNULL(АмортизацияОС.АмортизацияЦФ, 0)) <> 0
	|			ТОГДА -(АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ) 
	|					+ ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииБУ,
	|	
		// Дооценка амортизации НУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА &ТаблицаПереоценкиСтоимостьНУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.АмортизацияНУ, 0) <> 0
	|			ТОГДА -АмортизацияОС.АмортизацияНУ 
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУ
	|									* (&ТаблицаПереоценкиСтоимостьНУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаДооценкиАмортизацииНУ,
	|	
		// Уценка амортизации УУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|			ТОГДА АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииУУ,
	|
		// Уценка амортизации БУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|				И (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) <> 0
	|			ТОГДА (АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ) 
	|					- ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииБУ,
	|
		// Уценка амортизации НУ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА &ТаблицаПереоценкиСтоимостьНУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0) <> 0
	|			ТОГДА АмортизацияОС.АмортизацияНУ 
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияНУ
	|									* (&ТаблицаПереоценкиСтоимостьНУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьНУ, 0)) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииНУ,
	|
		// Уценка амортизации ЦФ
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|				ИЛИ (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0)) = 0
	|				ИЛИ ТаблицаПереоценки.СтоимостьБУ < (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))
	|			ТОГДА 0
	|		КОГДА АмортизацияОС.АмортизацияЦФ > ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|												* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2))
	|			ТОГДА АмортизацияОС.АмортизацияЦФ 
	|					- ВЫРАЗИТЬ((АмортизацияОС.АмортизацияРегл + АмортизацияОС.АмортизацияЦФ)
	|									* (ТаблицаПереоценки.СтоимостьБУ / (ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) + ЕСТЬNULL(СтоимостьВНА.СтоимостьЦФ, 0))) КАК ЧИСЛО(31,2)) 
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаУценкиАмортизацииЦФ,
	|
		// Резерв переоценки амортизации
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВУпрУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
			// Дооценка и резерв > дооценки: Резерв = Дооценка
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) < 0
	|				И (-АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|						/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) < -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА -АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))
	|
			// Дооценка и резерв <= дооценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ > ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) < 0
	|				И (-АмортизацияОС.Амортизация
	|					+ ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) >= -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|
			// Уценка и резерв > уценки: Резерв = Уценка
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) > 0
	|				И (АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) < ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ / ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))
	|
			// Уценка и резерв <= уценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьУУ < ЕСТЬNULL(СтоимостьВНА.Стоимость, 0)
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0) > 0
	|				И (АмортизацияОС.Амортизация
	|					- ВЫРАЗИТЬ(АмортизацияОС.Амортизация * ТаблицаПереоценки.СтоимостьУУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.Стоимость, 0) КАК ЧИСЛО(31,2))) >= ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|				
	|			ТОГДА ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизации, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизации,
	|
		// Резерв переоценки амортизации (регл)
	|	ВЫБОР 
	|		КОГДА НЕ &ОтражатьВРеглУчете ИЛИ СтоимостьВНА.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА 0
	|
			// Дооценка и резерв > дооценки: Резерв = Дооценка
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) < 0
	|				И (-АмортизацияОС.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) < -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА -АмортизацияОС.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))
	|
			// Дооценка и резерв <= дооценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ > ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) < 0
	|				И (-АмортизацияОС.АмортизацияРегл
	|					+ ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) >= -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА -ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|
			// Уценка и резерв > уценки: Резерв = Уценка
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) <> 0
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) > 0
	|				И (АмортизацияОС.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) < ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА АмортизацияОС.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ / ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))
	|
			// Уценка и резерв <= уценки: Резерв = Резерв
	|		КОГДА ТаблицаПереоценки.СтоимостьБУ < ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0)
	|				И ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0) > 0
	|				И (АмортизацияОС.АмортизацияРегл
	|					- ВЫРАЗИТЬ(АмортизацияОС.АмортизацияРегл * ТаблицаПереоценки.СтоимостьБУ 
	|							/ ЕСТЬNULL(СтоимостьВНА.СтоимостьРегл, 0) КАК ЧИСЛО(31,2))) >= ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|				
	|			ТОГДА ЕСТЬNULL(АмортизацияОС.РезервПереоценкиАмортизацииРегл, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РезервПереоценкиАмортизацииРегл,
	|
	|	ТаблицаПереоценки.ИдентификаторСтроки КАК ИдентификаторФинЗаписи
	|
	|ПОМЕСТИТЬ ТаблицаПереоценки
	|ИЗ
	|	Документ.ПереоценкаОС2_4.ОС КАК ТаблицаПереоценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтоимостьВНА КАК СтоимостьВНА
	|		ПО СтоимостьВНА.ОбъектУчета = &ОсновноеСредство
	|			И СтоимостьВНА.Ссылка = ТаблицаПереоценки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АмортизацияВНА КАК АмортизацияОС
	|		ПО АмортизацияОС.ОбъектУчета = &ОсновноеСредство
	|			И АмортизацияОС.Ссылка = ТаблицаПереоценки.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(&Период) КАК ПорядокУчета
	|		ПО &ОсновноеСредство = ПорядокУчета.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&Период) КАК МестонахождениеОС
	|		ПО &ОсновноеСредство = МестонахождениеОС.ОсновноеСредство
	|ГДЕ
	|	ТаблицаПереоценки.Ссылка = &Ссылка";
			
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапросаТаблицаТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивыПриПереоценке(ТекстыЗапроса, ВидОбъектовУчета, ИмяДокумента)

	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	ТекстыТекущегоЗапроса = Новый Массив;

	#Область Дооценка_УвеличениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УвеличениеСтоимости                       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0)";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиСтоимости       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяДоходов                             КАК Статья,
	|	&АналитикаДоходов                          КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеСтоимости
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеСтоимости                       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяРасходов                            КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	&АналитикаРасходов                         КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ - ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ - ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеВеличиныДооценкиСтоимости 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиСтоимости       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимости
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиСтоимостиУУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимости > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиСтоимостиБУ > 0 И ТаблицаПереоценки.РезервПереоценкиСтоимостиРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УвеличениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&ХО_УвеличениеНакопленнойАмортизации       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Дооценка_УменьшениеВеличиныДооценкиНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ПрибыльУбыток                    КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяРасходов                            КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	&АналитикаРасходов                         КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаДооценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаДооценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеНакопленнойАмортизации
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&ХО_УменьшениеНакопленнойАмортизации       КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяДоходов                             КАК Статья,
	|	&АналитикаДоходов                          КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО                               КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0
	|			ТОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0 
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	(ТаблицаПереоценки.СуммаУценкиАмортизацииУУ - ТаблицаПереоценки.РезервПереоценкиАмортизации) > 0
	|		ИЛИ (ТаблицаПереоценки.СуммаУценкиАмортизацииБУ - ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл) > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	#Область Уценка_УменьшениеВеличиныДооценкиНакопленнойАмортизации 
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период                                    КАК Период,
	|	&УменьшениеВеличиныДооценкиНакопленнойАмортизации КАК ХозяйственнаяОперация,
	|	&Организация                               КАК Организация,
	|
	|	&Подразделение                             КАК Подразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК НаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК Статья,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК АналитикаРасходов,
	|	&ОсновноеСредство                          КАК АналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК ГруппаФинансовогоУчета,
	|
	|	&Подразделение                             КАК КорПодразделение,
	|	ТаблицаПереоценки.НаправлениеДеятельности  КАК КорНаправлениеДеятельности,
	|	&СтатьяАП_ОС                               КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО                               КАК КорАналитикаРасходов,
	|	&ОсновноеСредство                          КАК КорАналитикаАктивовПассивов,
	|	ТаблицаПереоценки.ГруппаФинансовогоУчета   КАК КорГруппаФинансовогоУчета,
	|
	|	&Организация                               КАК КорОрганизация,
	|
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизации
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР 
	|		КОГДА ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0
	|			ТОГДА ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл
	|ИЗ
	|	ТаблицаПереоценки КАК ТаблицаПереоценки
	|ГДЕ
	|	ТаблицаПереоценки.СуммаУценкиАмортизацииУУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизации > 0
	|		ИЛИ ТаблицаПереоценки.СуммаУценкиАмортизацииБУ > 0 И ТаблицаПереоценки.РезервПереоценкиАмортизацииРегл > 0";
	ТекстыТекущегоЗапроса.Добавить(ТекстЗапроса);
	#КонецОбласти

	ТекстЗапроса = СтрСоединить(ТекстыТекущегоЗапроса, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
КонецПроцедуры
 
Процедура ЗаменитьПараметрыТекстаЗапросаПриПереоценке(ТекстЗапроса, ВидОбъектовУчета, ИмяДокумента)

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ПрибыльУбыток", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрибылиИУбытки)");
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПереоценкаОС2_4.ОС", ИмяДокумента + "." + ВидОбъектовУчета);
	
	Если ИмяДокумента = "Документ.ИзменениеУсловийДоговораАренды" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПереоценкиСтоимостьНУ", "ТаблицаПереоценки.СтоимостьНУ");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаПереоценкиСтоимостьНУ", "0");
	КонецЕсли;
	
	Если ВидОбъектовУчета = "ОС" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОсновноеСредство", "ТаблицаПереоценки.ОсновноеСредство");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УвеличениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУвеличениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УвеличениеСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУменьшениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеСтоимостиОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиСтоимостиОС)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиНакопленнойАмортизацииОС)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ОС", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ОсновныеСредства)");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОсновноеСредство", "ТаблицаПереоценки.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК ОсновноеСредство", "КАК НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.ПорядокУчетаОС", "РегистрСведений.ПорядокУчетаНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПорядокУчета.ОсновноеСредство", "ПорядокУчета.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрСведений.МестонахождениеОС", "РегистрСведений.МестоУчетаНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК МестонахождениеОС", "КАК МестоУчетаНМА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МестонахождениеОС.ОсновноеСредство", "МестоУчетаНМА.НематериальныйАктив");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МестонахождениеОС.Арендатор", "НЕОПРЕДЕЛЕНО");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УвеличениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УвеличениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУвеличениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УвеличениеСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУменьшениеСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеСтоимостиНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУменьшениеВеличиныДооценкиСтоимости", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиСтоимостиНМА)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НастройкаХОУменьшениеВеличиныДооценкиНакопленнойАмортизации", "ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.УменьшениеВеличиныДооценкиНакопленнойАмортизацииНМА)");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатьяАП_ОС", "ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.НематериальныеАктивы)");
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область УзлыКомпонентыАмортизации

Процедура ТекстЗапросаВтТаблицаСведенийДляКомпонентовАмортизации(ТекстыЗапроса, ИмяДокумента) Экспорт
	
	ИмяТаблицы = "ВтТаблицаСведенийДляКомпонентовАмортизации";
	
	Если ПроведениеДокументов.ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстыЗапросаСведений = Новый Массив;
	
	Если ВРег(ИмяДокумента) = ВРег("ПринятиеКУчетуУзловКомпонентовАмортизации") Тогда
		
		ТекстыЗапросаСведений.Добавить( 
		"ВЫБРАТЬ
		|	ТаблицаКомпонентовАмортизации.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	ТаблицаКомпонентовАмортизации.ОсновноеСредство КАК ОсновноеСредство
		|ПОМЕСТИТЬ ТаблицаВладельцев
		|ИЗ
		|	Документ.ПринятиеКУчетуУзловКомпонентовАмортизации.КомпонентыАмортизации КАК ТаблицаКомпонентовАмортизации
		|ГДЕ
		|	ТаблицаКомпонентовАмортизации.Ссылка = &Ссылка");
	
	КонецЕсли;
	
	ТекстЗапросаПараметрыВладельца = ВнеоборотныеАктивыЛокализация.ТекстЗапросаПараметрыВладельца();
	
	Если ТекстЗапросаПараметрыВладельца = Неопределено Тогда
		
		ТекстЗапросаПараметрыВладельца = 
		"ВЫБРАТЬ
		|	ТаблицаВладельцев.ИдентификаторСтроки КАК ИдентификаторСтроки,
		|	МестонахождениеОС.Местонахождение КАК Местонахождение,
		|	МестонахождениеОС.МОЛ КАК МОЛ,
		|	МестонахождениеОС.МОЛАрендатора КАК МОЛАрендатора,
		|	МестонахождениеОС.АдресМестонахождения КАК АдресМестонахождения,
		|	МестонахождениеОС.АдресМестонахожденияЗначение КАК АдресМестонахожденияЗначение,
		|	МестонахождениеОС.ПодразделениеАрендатора КАК ПодразделениеАрендатора,
		|	МестонахождениеОС.Арендатор КАК Арендатор,
		|	ПорядокУчетаОСУУ.СтатьяРасходов КАК СтатьяРасходовУУ,
		|	ПорядокУчетаОСУУ.АналитикаРасходов КАК АналитикаРасходовУУ,
		|	ПорядокУчетаОСУУ.ПередаватьРасходыВДругуюОрганизацию КАК ПередаватьРасходыВДругуюОрганизациюУУ,
		|	ПорядокУчетаОСУУ.ОрганизацияПолучательРасходов КАК ОрганизацияПолучательРасходовУУ,
		|	ПорядокУчетаОС.ОтражатьВРеглУчете КАК ОтражатьВРеглУчете,
		|	ПорядокУчетаОС.ОтражатьВУпрУчете КАК ОтражатьВУпрУчете,
		|	ПорядокУчетаОС.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	СоставЕГДС.ЕГДС КАК ЕГДС
		|
		|ПОМЕСТИТЬ ВтТаблицаСведенийДляКомпонентовАмортизации
		|
		|ИЗ
		|	ТаблицаВладельцев КАК ТаблицаВладельцев
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(
		|				&Период,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						Т.ОсновноеСредство
		|					ИЗ
		|						ТаблицаВладельцев КАК Т)) КАК МестонахождениеОС
		|		ПО (МестонахождениеОС.ОсновноеСредство = ТаблицаВладельцев.ОсновноеСредство)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОС.СрезПоследних(
		|				&Период,
		|				ОсновноеСредство В
		|					(ВЫБРАТЬ
		|						Т.ОсновноеСредство
		|					ИЗ
		|						ТаблицаВладельцев КАК Т)) КАК ПорядокУчетаОС
		|		ПО (ПорядокУчетаОС.ОсновноеСредство = ТаблицаВладельцев.ОсновноеСредство)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПорядокУчетаОСУУ.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ОсновноеСредство В
		|						(ВЫБРАТЬ
		|							Т.ОсновноеСредство
		|						ИЗ
		|							ТаблицаВладельцев КАК Т)) КАК ПорядокУчетаОСУУ
		|		ПО (ПорядокУчетаОСУУ.ОсновноеСредство = ТаблицаВладельцев.ОсновноеСредство)
		|
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставЕГДС.СрезПоследних(
		|				&Период,
		|				Организация = &Организация
		|					И ВнеоборотныйАктив В
		|						(ВЫБРАТЬ
		|							Т.ОсновноеСредство
		|						ИЗ
		|							ТаблицаВладельцев КАК Т)) КАК СоставЕГДС
		|		ПО (СоставЕГДС.ВнеоборотныйАктив = ТаблицаВладельцев.ОсновноеСредство)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИдентификаторСтроки
		|";
	КонецЕсли;
	
	ТекстыЗапросаСведений.Добавить(ТекстЗапросаПараметрыВладельца);
	ТекстыЗапросаСведений.Добавить("УНИЧТОЖИТЬ ТаблицаВладельцев");
			
	ТекстЗапроса = СтрСоединить(ТекстыЗапросаСведений, ОбщегоНазначения.РазделительПакетаЗапросов());
			
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяТаблицы);
	
КонецПроцедуры

#КонецОбласти

//++ НЕ УТКА

#Область МеждународныйУчет

Функция ИсточникиУточненияСчетаАмортизация(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивов,
		Новый Структура(СвойстваИсточника, "ГФУВнеоборотныеАктивы"));
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаДоходовРасходов,
		Новый Структура(СвойстваИсточника, "ГФУДоходовРасходов"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

Функция ИсточникиУточненияСчетаСтоимость(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	ИсточникиУточненияСчета.Вставить(Перечисления.ТипыИсточниковУточненияСчета.ГруппаФинансовогоУчетаВнеоборотныхАктивов,
		Новый Структура(СвойстваИсточника, "ГФУВнеоборотныеАктивы"));
		
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельности, "НаправлениеДеятельности");
	Результат.Вставить(ИсточникиНаправлений.КорНаправлениеДеятельности, "КорНаправлениеДеятельности");

	Возврат Результат;
	
КонецФункции

Функция ИсточникиПодразделенийАмортизация() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.Подразделение, "Подразделение");
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.КорПодразделение, "КорПодразделение");
	
	Возврат ИсточникиПодразделений;

КонецФункции

Функция ИсточникиПодразделенийСтоимость() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.ХозяйственнаяОперация, "Подразделение");

	Возврат ИсточникиПодразделений;

КонецФункции

#КонецОбласти

//-- НЕ УТКА

#Область Прочее

Процедура ВернутьДокументыКОтражению(Ссылка, Организация, Дата, ТаблицыДляДвижений) Экспорт
	
	ВнеоборотныеАктивыЛокализация.ВернутьДокументыКОтражению(Ссылка, Организация, Дата, ТаблицыДляДвижений);
	
	//++ НЕ УТКА
	Если Ссылка.Метаданные().Движения.Содержит(Метаданные.РегистрыСведений.ОтражениеДокументовВМеждународномУчете) Тогда
		
		ИмяТаблицыОтражениеДокументовВМеждународномУчете = "Таблица" + "ОтражениеДокументовВМеждународномУчете";
		
		Если ТаблицыДляДвижений.Свойство(ИмяТаблицыОтражениеДокументовВМеждународномУчете) Тогда
			ТаблицаОтражениеДокументовВУчете = ТаблицыДляДвижений[ИмяТаблицыОтражениеДокументовВМеждународномУчете];
		ИначеЕсли ТаблицыДляДвижений.Свойство("ОтражениеДокументовВМеждународномУчете") Тогда
			ТаблицаОтражениеДокументовВУчете = ТаблицыДляДвижений.ОтражениеДокументовВМеждународномУчете;
		Иначе
			ТаблицаОтражениеДокументовВУчете = ТаблицаОтражениеДокументов(Ссылка, Организация, Дата);
		КонецЕсли;
		
		МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ТаблицаОтражениеДокументовВУчете);

	КонецЕсли;
	//-- НЕ УТКА
	
КонецПроцедуры

// Записывает движения из таблицы движений.
// 
// Параметры:
//  ТаблицыДляДвижений - Структура - Таблицы для движений.
//  Документ - ДокументОбъект - Документ.
//  МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Менеджер временных таблиц.
//  ПрочитатьНабор - Булево - Прочитать набор.
//  ВидИсточника - ПеречислениеСсылка.ВидыИсточниковДвижений - Вид источника.
Процедура ЗаписатьТаблицыДвижений(ТаблицыДляДвижений, Документ, МенеджерВременныхТаблиц, ПрочитатьНабор = Ложь, ВидИсточника = Неопределено) Экспорт
	
	СлужебноеИмяТаблицы = ВРег("ТАБЛИЦА");
	ДлинаИмениТаблицы = СтрДлина(СлужебноеИмяТаблицы);
	
	Для Каждого КлючИЗначение Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = КлючИЗначение.Ключ;
		Если ВРег(Лев(ИмяРегистра, ДлинаИмениТаблицы)) = СлужебноеИмяТаблицы Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра) - ДлинаИмениТаблицы);
		КонецЕсли;
		
		Если НЕ ВнеоборотныеАктивыЛокализация.ТребуетсяЗагрузитьТаблицыДвижений(ИмяРегистра) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Метаданные.РегистрыСведений.Найти(ИмяРегистра) <> Неопределено Тогда
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			ПространствоБлокировки = "РегистрСведений." + ИмяРегистра + ".НаборЗаписей";
		ИначеЕсли Метаданные.РегистрыНакопления.Найти(ИмяРегистра) <> Неопределено Тогда
			НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
			ПространствоБлокировки = "РегистрНакопления." + ИмяРегистра + ".НаборЗаписей";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Блокировка = Новый БлокировкаДанных;
		
		ЭлементБлокировки = Блокировка.Добавить(ПространствоБлокировки);
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Документ.Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		НаборЗаписей.Отбор.Регистратор.Установить(Документ.Ссылка);
		
		ПроведениеДокументов.УстановитьДопСвойстваРегистра(НаборЗаписей, Документ, МенеджерВременныхТаблиц);
		
		Если ПрочитатьНабор Тогда
			НаборЗаписей.Прочитать();
		КонецЕсли;
		
		Если ВидИсточника <> Неопределено Тогда
			Для ИндексЗаписи = -НаборЗаписей.Количество() + 1 По 0 Цикл
				ЗаписьРегистра = НаборЗаписей[-ИндексЗаписи];
				Если ЗаписьРегистра.ВидИсточника = ВидИсточника Тогда
					НаборЗаписей.Удалить(-ИндексЗаписи);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРегистра = КлючИЗначение.Значение; // ТаблицаЗначений
		Для Каждого ДанныеСтроки Из ТаблицаРегистра Цикл
			
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, ДанныеСтроки);
			
			Если ВидИсточника <> Неопределено Тогда
				ЗаписьРегистра.ВидИсточника = ВидИсточника;
			КонецЕсли;
			
		КонецЦикла;
			
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьДвиженияАктивовПассивов(Ссылка) Экспорт

	МетаданныеДокумента = Ссылка.Метаданные();
	Если НЕ МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления.ПрочиеАктивыПассивы) Тогда
		Возврат;
	КонецЕсли;

	СписокРегистровДокумента = Новый Массив;

	БалансовыеРегистры = Обработки.ДвиженияАктивовПассивов.БалансовыеРегистры();
	Для Каждого Источник Из БалансовыеРегистры Цикл
		Если ВРег(Источник.Ключ) <> ВРег("ПрочиеАктивыПассивы")
			И МетаданныеДокумента.Движения.Содержит(Метаданные.РегистрыНакопления[Источник.Ключ]) Тогда
			СписокРегистровДокумента.Добавить(Источник.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ПрочиеАктивыПассивы.НаборЗаписей");
	ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Для Каждого ИмяРегистра Из СписокРегистровДокумента Цикл
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления." + ИмяРегистра + ".НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
	КонецЦикла;
	
	Блокировка.Заблокировать();
	
	ДвиженияУпрБаланса = Новый Структура;

	ПрочиеАктивыПассивы = РегистрыНакопления.ПрочиеАктивыПассивы.СоздатьНаборЗаписей();
	ПрочиеАктивыПассивы.Отбор.Регистратор.Установить(Ссылка);
	ПрочиеАктивыПассивы.Прочитать();
	ДвиженияУпрБаланса.Вставить("ПрочиеАктивыПассивы", ПрочиеАктивыПассивы.Выгрузить());
	
	Для Каждого ИмяРегистра Из СписокРегистровДокумента Цикл
		Движения = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
		Движения.Отбор.Регистратор.Установить(Ссылка);
		Движения.Прочитать();
		ДвиженияУпрБаланса.Вставить(ИмяРегистра, Движения.Выгрузить());
	КонецЦикла;
	
	УправленческийУчетПроведениеСервер.ОбновитьДвиженияАктивовПассивов(Ссылка, ДвиженияУпрБаланса);
	
	ПрочиеАктивыПассивы.Загрузить(ДвиженияУпрБаланса.ПрочиеАктивыПассивы);
	
	ПрочиеАктивыПассивы.Записать();
	
КонецПроцедуры

Функция ТаблицаОтражениеДокументов(ДокументСсылка, Организация, ДатаОтражения) Экспорт

	ТаблицаОтражениеДокументов = Новый ТаблицаЗначений;
	ТаблицаОтражениеДокументов.Колонки.Добавить("Документ", Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ДокументСсылка))));
	ТаблицаОтражениеДокументов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОтражениеДокументов.Колонки.Добавить("ДатаОтражения", Новый ОписаниеТипов("Дата"));
	ТаблицаОтражениеДокументов.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	
	НоваяСтрока = ТаблицаОтражениеДокументов.Добавить();
	НоваяСтрока.Документ = ДокументСсылка;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.ДатаОтражения = НачалоДня(ДатаОтражения);
	НоваяСтрока.Период = НачалоДня(ДатаОтражения);

	Возврат ТаблицаОтражениеДокументов;
	
КонецФункции

Процедура ДобавитьТекстОтбора(ТекстОтборы, ТекстУсловия) Экспорт
	
	Если НЕ ПустаяСтрока(ТекстУсловия) Тогда
		ТекстОтборы = ТекстОтборы + "
			|" + ?(ТекстОтборы <> "", "И (","(") + ТекстУсловия + ")";
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаголовокНадписиОДокументеВДругомУчете(РеквизитыДокумента)

	ЗаголовокНадписи = Новый Массив;
	Если РеквизитыДокумента.ПометкаУдаления 
		ИЛИ РеквизитыДокумента.ОтражатьВУпрУчете 
			И РеквизитыДокумента.ОтражатьВРеглУчете Тогда						
		// Гиперссылка о док-те  в другом учете не выводится, если другой документ отражается в обоих учетах.
		Возврат ЗаголовокНадписи;
	КонецЕсли; 
	
	МетаданныеДокумента = РеквизитыДокумента.Ссылка.Метаданные();
	ПредставлениеДокумента = ПредставлениеДокумента(МетаданныеДокумента.Синоним);
	ТекстПринятУУ = СтрШаблон(НСтр("ru = 'В управленческом учете создан документ %1';
									|en = 'The %1 document is created in management accounting'"), ПредставлениеДокумента);
	ТекстПринятБУ = СтрШаблон(НСтр("ru = 'В регламентированном учете создан документ %1';
									|en = 'The %1 document is created in local accounting'"), ПредставлениеДокумента);
		
	Если РеквизитыДокумента.ОтражатьВУпрУчете Тогда
		ЗаголовокНадписи.Добавить(ТекстПринятУУ);
	Иначе
		ЗаголовокНадписи.Добавить(ТекстПринятБУ);
	КонецЕсли;
	ЗаголовокНадписи.Добавить(" ");
	
	ПредставлениеЗаказа = СтрШаблон(НСтр("ru = '№%1 от %2';
										|en = 'No. %1 from %2'"), 
								ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(
										РеквизитыДокумента.Номер, Ложь, Истина),
								Формат(РеквизитыДокумента.Дата, "ДЛФ=D"));
	
	ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(ПредставлениеЗаказа,,,, ПолучитьНавигационнуюСсылку(РеквизитыДокумента.Ссылка)));
	
	Если НЕ РеквизитыДокумента.Проведен Тогда
		ЗаголовокНадписи.Добавить(" ");
		ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(
									НСтр("ru = 'не проведен';
										|en = 'not posted'"),, ЦветаСтиля.ЦветОсобогоТекста));
	КонецЕсли;
		
	Возврат ЗаголовокНадписи;
	
КонецФункции

Функция НайтиДокументВДругомУчетеИСформироватьЗаголовок(Объект, ПоказатьИнформациюЕслиНеСоздан)
	
	ЗаголовокНадписи = Новый Массив;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Возврат ЗаголовокНадписи;
	КонецЕсли;
	
	МетаданныеДокумента = Объект.Ссылка.Метаданные();
	ИмяДокумента = МетаданныеДокумента.Имя;
	
	ПредставлениеДокумента = ПредставлениеДокумента(МетаданныеДокумента.Синоним);
	ТекстНеПринятУУ = СтрШаблон(НСтр("ru = 'В управленческом учете не создан документ %1';
									|en = 'The %1 document is not created in management accounting'"), ПредставлениеДокумента);
	ТекстНеПринятБУ = СтрШаблон(НСтр("ru = 'В регламентированном учете не создан документ %1';
									|en = 'The %1 document is not created in local accounting'"), ПредставлениеДокумента);
	ТекстОформить = НСтр("ru = 'Создать';
						|en = 'Create'");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1 КАК Приоритет,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|ИЗ
	|	ИмяДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументВДругомУчете = &Ссылка
	|	И ДанныеДокумента.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	2,
	|	ДанныеДокумента.Ссылка,
	|	ДанныеДокумента.Номер,
	|	ДанныеДокумента.Дата,
	|	ДанныеДокумента.ПометкаУдаления,
	|	ДанныеДокумента.Проведен,
	|	ДанныеДокумента.ОтражатьВРеглУчете,
	|	ДанныеДокумента.ОтражатьВУпрУчете
	|ИЗ
	|	ИмяДокумента КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.ДокументВДругомУчете = &Ссылка
	|	И НЕ ДанныеДокумента.Проведен
	|	И НЕ ДанныеДокумента.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ИмяДокумента", "Документ." + ИмяДокумента);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ЗаголовокНадписи = ЗаголовокНадписиОДокументеВДругомУчете(Выборка);
		
	ИначеЕсли (НЕ Объект.ОтражатьВУпрУчете ИЛИ НЕ Объект.ОтражатьВРеглУчете) И ПоказатьИнформациюЕслиНеСоздан Тогда
		
		Если НЕ Объект.ОтражатьВУпрУчете Тогда
			ЗаголовокНадписи.Добавить(ТекстНеПринятУУ);
		Иначе
			ЗаголовокНадписи.Добавить(ТекстНеПринятБУ);
		КонецЕсли;
		
		Если ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы[ИмяДокумента]) Тогда
			ЗаголовокНадписи.Добавить(" ");
			ЗаголовокНадписи.Добавить(Новый ФорматированнаяСтрока(ТекстОформить,,,, "#СоздатьДокумент"));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЗаголовокНадписи;

КонецФункции

Функция ПредставлениеДокумента(СинонимДокумента)

	ПредставлениеДокумента = СинонимДокумента;
	
	Если СтрЗаканчиваетсяНа(СинонимДокумента, НСтр("ru = 'ОС';
													|en = 'Fixed assets'")) Тогда
		ПредставлениеДокумента = СокрЛП(Лев(СинонимДокумента, СтрДлина(СинонимДокумента) - 2));
	ИначеЕсли СтрЗаканчиваетсяНа(СинонимДокумента, НСтр("ru = 'НМА';
														|en = 'Intangible assets'")) Тогда
		ПредставлениеДокумента = СокрЛП(Лев(СинонимДокумента, СтрДлина(СинонимДокумента) - 3));
	КонецЕсли; 

	Возврат ПредставлениеДокумента;
	
КонецФункции

Процедура СообщитьПользователю(ТекстСообщения, Объект, ОсновноеСредствоВШапке, Путь, Отказ)
	
	Если ОсновноеСредствоВШапке Тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, "ОсновноеСредство",, Отказ);
	Иначе
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Путь,, Отказ);
	КонецЕсли;

КонецПроцедуры
 
#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// 
// Параметры:
// 	ДокументОбъект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4 - 
// 	РасчетыПоДокументу - ДокументОбъект.ЗаключениеДоговораАренды, СтрокаТаблицыЗначений - 
Процедура ПеренестиГрафики(ДокументОбъект, РасчетыПоДокументу) Экспорт
	
	Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.Договор) Тогда
		Возврат;
	КонецЕсли;			
	
	ЭтоВводОстатков = (ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4"));
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВариантГрафика.Ссылка КАК Ссылка,
	|	ВариантГрафика.Владелец КАК Договор,
	|	ВариантГрафика.СрокМес,
	|	ВариантГрафика.СрокДней,
	|
	|	ВЫБОР 
	|		КОГДА ВариантГрафика.Владелец.ЕстьОбеспечительныйПлатеж
	|			ТОГДА ВариантГрафика.СуммаОбеспечительногоПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОбеспечительногоПлатежа,
	|
	|	ВЫБОР 
	|		КОГДА ВариантГрафика.Владелец.ЕстьВыкупПредметовАренды
	|			ТОГДА ВариантГрафика.СуммаВыкупаПредметаЛизинга
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВыкупаПредметаЛизинга,
	|
	|	ВариантГрафика.Владелец.ДатаНачалаДействия КАК ДатаНачалаАренды
	|ПОМЕСТИТЬ ВариантГрафика
	|ИЗ
	|	Справочник.УдалитьВариантыГрафиковЛизинга КАК ВариантГрафика
	|ГДЕ
	|	ВариантГрафика.Владелец = &Договор
	|	И ВариантГрафика.Используется
	|	И НЕ ВариантГрафика.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантГрафика.СрокМес,
	|	ВариантГрафика.СрокДней,
	|	ВариантГрафика.СуммаОбеспечительногоПлатежа,
	|	ВариантГрафика.СуммаВыкупаПредметаЛизинга,
	|	ВариантГрафика.Договор.УдалитьСтавкаНДС2 КАК СтавкаНДС,
	|	ВариантГрафика.ДатаНачалаАренды
	|ИЗ
	|	ВариантГрафика КАК ВариантГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплат.Период КАК Дата,
	|	ГрафикОплат.УслугаПоЛизингу КАК УслугаПоАренде,
	|	ВЫБОР 
	|		КОГДА ГрафикОплат.ВариантГрафика.Владелец.ЕстьОбеспечительныйПлатеж
	|			ТОГДА ГрафикОплат.ЗачетОбеспечительногоПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбеспечительныйПлатеж,
	|	ВЫБОР 
	|		КОГДА ГрафикОплат.ВариантГрафика.Владелец.ЕстьВыкупПредметовАренды
	|			ТОГДА ГрафикОплат.ВыкупнаяСтоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыкупнаяСтоимость
	|ИЗ
	|	РегистрСведений.УдалитьГрафикОплатЛизинга КАК ГрафикОплат
	|ГДЕ
	|	ГрафикОплат.ВариантГрафика В
	|		(ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			ВариантГрафика КАК Т)
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикНачислений.Период КАК Дата,
	|	ГрафикНачислений.УслугаПоЛизингу КАК УслугаПоАренде,
	|	ВЫБОР 
	|		КОГДА ГрафикНачислений.ВариантГрафика.Владелец.ЕстьОбеспечительныйПлатеж
	|			ТОГДА ГрафикНачислений.ЗачетОбеспечительногоПлатежа
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбеспечительныйПлатеж,
	|	ВЫБОР 
	|		КОГДА ГрафикНачислений.ВариантГрафика.Владелец.ЕстьВыкупПредметовАренды
	|			ТОГДА ГрафикНачислений.ВыкупнаяСтоимость
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыкупнаяСтоимость
	|ИЗ
	|	РегистрСведений.УдалитьГрафикНачисленийЛизинга КАК ГрафикНачислений
	|ГДЕ
	|	ГрафикНачислений.ВариантГрафика В
	|		(ВЫБРАТЬ
	|			Т.Ссылка
	|		ИЗ
	|			ВариантГрафика КАК Т)
	|УПОРЯДОЧИТЬ ПО
	|	Дата";
	ЗапросВариантГрафика = Новый Запрос(ТекстЗапроса);
	ЗапросВариантГрафика.УстановитьПараметр("Договор", РасчетыПоДокументу.Договор);
	Результат = ЗапросВариантГрафика.ВыполнитьПакет();

	ВыборкаГрафик = Результат[Результат.ВГраница()-2].Выбрать();
	Если ВыборкаГрафик.Следующий() Тогда
		РасчетыПоДокументу.СрокМес = ВыборкаГрафик.СрокМес;
		РасчетыПоДокументу.СрокДней = ВыборкаГрафик.СрокДней;
		РасчетыПоДокументу.СуммаОбеспечительногоПлатежа = ВыборкаГрафик.СуммаОбеспечительногоПлатежа;
		РасчетыПоДокументу.СуммаВыкупаПредметовАренды = ВыборкаГрафик.СуммаВыкупаПредметаЛизинга;
		РасчетыПоДокументу.СтавкаНДС = ВыборкаГрафик.СтавкаНДС;
		РасчетыПоДокументу.ДатаНачалаАренды = ВыборкаГрафик.ДатаНачалаАренды;
	КонецЕсли;
	
	ВыборкаГрафик = Результат[Результат.ВГраница()-1].Выбрать();
	Пока ВыборкаГрафик.Следующий() Цикл
		
		НоваяСтрока = ДокументОбъект.ГрафикОплатУслуг.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаГрафик);
		Если ЭтоВводОстатков Тогда
			НоваяСтрока.КодСтроки = РасчетыПоДокументу.КодСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	ВыборкаГрафик = Результат[Результат.ВГраница()].Выбрать();
	Пока ВыборкаГрафик.Следующий() Цикл
		Если ВыборкаГрафик.УслугаПоАренде <> 0 
			ИЛИ ВыборкаГрафик.УслугаПоАренде <> 0 Тогда
			НоваяСтрока = ДокументОбъект.ГрафикНачисленияУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаГрафик);
		КонецЕсли;
		Если ВыборкаГрафик.ВыкупнаяСтоимость <> 0 Тогда
			РасчетыПоДокументу.ДатаВыкупа = ВыборкаГрафик.Дата;
		КонецЕсли;
		Если ЭтоВводОстатков Тогда
			НоваяСтрока.КодСтроки = РасчетыПоДокументу.КодСтроки;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ЭтоВводОстатков Тогда
		
		СписокРеквизитов = "ТипДоговора,Балансодержатель,ДатаНачалаДействия,
		|ВалютаВзаиморасчетов,СпособОпределенияСтоимостиАктивов,
		|ЕстьОбеспечительныйПлатеж,ЕстьВыкупПредметовАренды,ЕстьАвансированиеВыкупнойСтоимости,
		|УчитыватьПредметыАрендыВРеглУчете,УчитыватьПредметыАрендыВУпрУчете";
		
		РеквизитыДоговора = Новый Структура(СписокРеквизитов);
		РеквизитыДоговора.ДатаНачалаДействия = '000101010000';
		РеквизитыДоговора.ЕстьОбеспечительныйПлатеж = Ложь;
		РеквизитыДоговора.ЕстьВыкупПредметовАренды = Ложь;
		РеквизитыДоговора.ЕстьАвансированиеВыкупнойСтоимости = Ложь;
		РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Ложь;
		РеквизитыДоговора.УчитыватьПредметыАрендыВУпрУчете = Ложь;
		
		Если ЗначениеЗаполнено(ДокументОбъект.Договор) Тогда
			РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументОбъект.Договор, СписокРеквизитов);
		КонецЕсли;
		
		ДанныеГрафиков = ВнеоборотныеАктивыКлиентСервер.ДанныеГрафиков(ДокументОбъект, РеквизитыДоговора);
		
		Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.ДатаПервогоПлатежа) Тогда
			РасчетыПоДокументу.ДатаПервогоПлатежа = ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.ДатаПервогоОбеспечительногоПлатежа) Тогда
			РасчетыПоДокументу.ДатаПервогоОбеспечительногоПлатежа = ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.ПериодичностьОплат) Тогда
			РасчетыПоДокументу.ПериодичностьОплат = 
				?(ДанныеГрафиков.ГрафикОплатУслуг.Периодичность <> Неопределено,
					ДанныеГрафиков.ГрафикОплатУслуг.Периодичность,
					Перечисления.ПериодичностьГрафика.Произвольная);
		КонецЕсли;
			
		Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.ПериодичностьНачислений) Тогда
			РасчетыПоДокументу.ПериодичностьНачислений = 
				?(ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность <> Неопределено,
					ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность,
					Перечисления.ПериодичностьГрафика.Произвольная);
		КонецЕсли;
					
		Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.ОплатаУслугиПоАренде) Тогда
			РасчетыПоДокументу.ОплатаУслугиПоАренде = 
				?(ЗначениеЗаполнено(РасчетыПоДокументу.ПериодичностьОплат) И РасчетыПоДокументу.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная,
					ДанныеГрафиков.ГрафикОплатУслуг.ОплатаУслугиПоАренде,
					0);
		КонецЕсли;
					
		Если НЕ ЗначениеЗаполнено(РасчетыПоДокументу.НачислениеУслугиПоАренде) Тогда
			РасчетыПоДокументу.НачислениеУслугиПоАренде = 
				?(ЗначениеЗаполнено(РасчетыПоДокументу.ПериодичностьНачислений) И РасчетыПоДокументу.ПериодичностьНачислений <> Перечисления.ПериодичностьГрафика.Произвольная,
					ДанныеГрафиков.ГрафикНачисленияУслуг.НачислениеУслугиПоАренде,
					0);
		КонецЕсли;
		
	Иначе
		
		РасчетыПоДокументу.ПериодичностьОплат = Перечисления.ПериодичностьГрафика.Произвольная;
		РасчетыПоДокументу.ПериодичностьНачислений = Перечисления.ПериодичностьГрафика.Произвольная;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
