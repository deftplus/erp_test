
#Область ПрограммныйИнтерфейс

// Формирует сведения о документах-источниках, которые будут использоваться для заполнения реквизитов сканированных документов, 
// представляемых по требованию ФНС. Требуется заполнить для всех объектов метаданных,
// указанных в определяемом типе ИсточникДокументаПоТребованиюФНСБРО, за исключением тех, 
// которые предназначены исключительно для формирования электронных документов.
//
// Параметры:
//
//	СвойстваИсточников	- Соответствие, соответствие переданных ссылок на источники и массива структур
//		Ключ 		– ссылка на источник для заполнения реквизитов сканированных документов
//		Значение 	– Массив, массив структур (начальное значение: пустой массив)
//		(каждый элемент массива – реквизиты для заполнения одного сканированного документа).
//
//		В общем случае один источник может служить источником для заполнения реквизитов нескольких сканированных документов (например документы РеализацияТоваровУслуг, ОказаниеУслуг).
//		Если у источника стоит пометка на удаление, массив структур должен остаться пустым.
//		Состав полей структуры различен для различных видов документов.
//
//		Поля структуры:
//
//			(обязательный)		Организация				- СправочникСсылка.Организации
//			(обязательный)		ВидДокументаФНС 		- ПеречислениеСсылка.ВидыПредставляемыхДокументов
//			(необязательный)	НомерСтрокиИсточника	- Число, обязательно указывается, если данный источник может служить 
//														источником для заполнения реквизитов нескольких документов одного вида ФНС  
//														Для остальных документов-источников не указывается.
//			(необязательный)	Направление 			- Перечисление.НаправленияДокументаПоТребованиюФНС,
//														обязателен для следующих видов документов ФНС:
//															Счет-фактура
//															Корректировочный счет-фактура
//															Акт приемки-сдачи работ (услуг)
//															Товарная накладная (ТОРГ-12)
//															Товарно-транспортная накладная
//														Для остальных видов документов ФНС не указывается.			
// 
//			Состав следующих полей структуры различен для различных видов документов.
//
//			(необязательный)	Дата			- Дата
//			(необязательный)	Номер			- Строка
//			(необязательный)	СуммаВсего		- Число
//			(необязательный)	СуммаНалога		- Число
//			(необязательный)	НомерОснования	- Строка
//			(необязательный)	ДатаОснования	- Дата
//			(необязательный)	Предмет			- Строка
//			(необязательный)	НачалоПериода	- Дата
//			(необязательный)	КонецПериода	- Дата
//			(необязательный)	Участники		- Массив структур, 
//				поля структуры
//					(обязательный)		Роль				- ПеречислениеСсылка.РолиУчастниковСделкиДокументаПоТребованиюФНС
//					(обязательный)		ЯвляетсяЮрЛицом		- Булево
//					(необязательный)	ЮрЛицоНаименование	- Строка
//					(необязательный)	ЮрЛицоИНН			- Строка
//					(необязательный)	ЮрЛицоКПП			- Строка
//					(необязательный)	ФизЛицоИНН			- Строка
//					(необязательный)	ФизЛицоФамилия		- Строка
//					(необязательный)	ФизЛицоИмя			- Строка
//					(необязательный)	ФизЛицоОтчество		- Строка
//
//			Максимально возможный состав полей структуры для различных видов документов:
//				Счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Участники
//				Корректировочный счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					Участники
//				Акт приемки-сдачи работ (услуг)
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					НачалоПериода
//					КонецПериода
//					Участники
//				Товарная накладная (ТОРГ-12)
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					Участники
//				Товарно-транспортная накладная
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					НомерОснования
//					ДатаОснования
//					Участники
//				Грузовая таможенная декларация
//					Номер
//					Участники
//				Добавочный лист к грузовой таможенной декларации
//					Номер
//					НомерОснования
//					Участники
//				Договор
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Предмет
//					Участники
//				Дополнение к договору
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Предмет
//					НомерОснования
//					ДатаОснования
//					Участники
//				Спецификация (калькуляция, расчет) цены (стоимости)
//					Дата
//					Номер
//					СуммаВсего
//					СуммаНалога
//					Предмет
//					НомерОснования
//					ДатаОснования
//					Участники
//
//				Роли участников следует выбирать из возможных значений БРО перечисления РолиУчастниковСделкиДокументаПоТребованиюФНС.
//				Общий список возможных значений:
//					Агент
//					Акционер
//					Арендатор
//					Арендодатель
//					Векселедатель
//					Векселеполучатель
//					Генеральный подрядчик
//					Грузоотправитель
//					Грузополучатель
//					Декларант
//					Займодатель
//					Займополучатель (заемщик)
//					Заказчик
//					Импортер
//					Инвестор
//					Исполнитель
//					Лицо, составившее документ 
//					Отправитель
//					Перевозчик
//					Плательщик
//					Поверенный
//					Подрядчик
//					Покупатель
//					Получатель
//					Пользователь
//					Посредник
//					Поставщик
//					Продавец
//					Работник
//					Работодатель
//					Страхователь
//					Страховщик
//					Субподрядчик
//					Участник
//					Учредитель
//					Хранитель
//					Экспедитор
//					Экспортер
//					Эмитент
//
//				Вариант состава ролей участников для различных видов документов:
//					Счет-фактура
//						Агент
//						Грузоотправитель (если приобретаются/реализуются НЕ услуги)
//						Грузополучатель (если приобретаются/реализуются НЕ услуги)
//						Покупатель
//						Продавец
//					Корректировочный счет-фактура
//						Агент
//						Покупатель
//						Продавец
//					Акт приемки-сдачи работ (услуг)
//						Агент
//						Заказчик
//						Исполнитель
//					Товарная накладная (ТОРГ-12)
//						Грузоотправитель
//						Грузополучатель
//						Плательщик
//						Поставщик
//						Экспедитор
//					Товарно-транспортная накладная
//						Грузоотправитель
//						Грузополучатель
//						Заказчик
//						Перевозчик
//						Плательщик
//						Экспедитор
//					Грузовая таможенная декларация
//						Декларант
//						Импортер
//						Экспортер
//						Отправитель
//						Получатель
//					Добавочный лист к грузовой таможенной декларации
//						Декларант
//						Импортер
//						Экспортер
//						Отправитель
//						Получатель
//					Договор
//						Любые значения из общего списка
//					Дополнение к договору
//						Любые значения из общего списка
//					Спецификация (калькуляция, расчет) цены (стоимости)
//						Заказчик
//						Исполнитель
//
Процедура ОпределитьСвойстваИсточниковДляЗаполненияСканированныхДокументовПоТребованиюФНС(СвойстваИсточников) Экспорт
	
	ЗаполнитьСвойстваИсточниковДляФНС(СвойстваИсточников, Ложь);
	
КонецПроцедуры

// Формирует сведения о документах-источниках, которые будут отражаться в едином списке документов, представляемых по
// требованию ФНС. Требуется заполнить для всех объектов метаданных, указанных в определяемом типе ИсточникДокументаПоТребованиюФНСБРО..
//
// Параметры: 
//
//	СвойстваИсточников	- Соответствие, соответствие переданных ссылок на источники и массива структур 
//		Ключ 		– ссылка на источник
//		Значение 	– массив структур (начальное значение: пустой массив)
//		(каждый элемент массива – реквизиты для отображения свойств одного документа в журнале документов, 
//		представляемых по требованию ФНС).
//
//		В общем случае один источник может служить источником для отображения свойств нескольких документов.
//		Если у источника стоит пометка на удаление, массив структур должен остаться пустым массивом.
//		Состав полей структуры различен для различных видов документов-источников.
//
//			Поля структуры:
//				(обязательный)	Организация			- СправочникСсылка.Организации
//				(обязательный)	ВидДокументаФНС		- ПеречислениеСсылка.ВидыПредставляемыхДокументов
//				(необязательный)	Контрагент			- Ссылка на справочник контрагентов
//				(необязательный)	НомерСтрокиИсточника	- Число, обязательно указывается, 
//											если данный источник может служить 
//											источником для заполнения реквизитов 
//											нескольких документов одного вида ФНС 
//											(например Оказание услуг в БПКОРП3) 
//											Для остальных видов документов-источников не указывается.			
//				(необязательный)	Направление 			- Перечисление.
//												НаправленияДокументаПоТребованиюФНС,
//											обязателен для следующих видов документов ФНС:
//												Счет-фактура
//												Корректировочный счет-фактура
//												Акт приемки-сдачи работ (услуг)
//												Товарная накладная (ТОРГ-12)
//												Товарно-транспортная накладная
//												Для остальных видов документов ФНС не указывается.			
//
//			Состав следующих полей структуры различен для различных видов документов ФНС.
//
//				(необязательный)	Дата					- Дата
//				(необязательный)	Номер					- Строка
//				(необязательный)	СуммаВсего				- Число
//
//			Максимально возможный состав полей структуры для различных видов документов ФНС:
//				Счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//				Корректировочный счет-фактура
//					Дата
//					Номер
//					СуммаВсего
//				Акт приемки-сдачи работ (услуг)
//					Дата
//					Номер
//					СуммаВсего
//				Товарная накладная (ТОРГ-12)
//					Дата
//					Номер
//					СуммаВсего
//				Товарно-транспортная накладная
//					Дата
//					Номер
//					СуммаВсего
//				Грузовая таможенная декларация
//					Номер
//				Добавочный лист к грузовой таможенной декларации
//					Номер
//				Договор
//					Дата
//					Номер
//					СуммаВсего
//				Дополнение к договору
//					Дата
//					Номер
//					СуммаВсего
//				Спецификация (калькуляция, расчет) цены (стоимости)
//					Дата
//					Номер
//					СуммаВсего
//
Процедура ОпределитьСвойстваИсточниковДляРегистраДокументыПоТребованиюФНС(СвойстваИсточников) Экспорт
	
	ЗаполнитьСвойстваИсточниковДляФНС(СвойстваИсточников, Истина);
	
КонецПроцедуры

// Определяет доступность и необходимость подключения направлений для указанной организации.
// Используется для составления списка направлений по умолчанию при формировании заявления на подключение к 1С-Отчетности.
// Недоступные направления будут скрыты. С направлений, которые не подключаются, будет снят флажок.
// Пользователь сможет вручную скорректировать список доступных подключаемых направлений,
// но желательно список составлять таки образом, чтобы пользователю не пришлось его корректировать.
// По умолчанию - все направления доступны и подключаются.
//
// Параметры:
//  Организация	 - Справочник.Организации - Организация, для которой определяются подключаемые направления.
//  Направления	 - Массив структур - предназначена для указания какие направления доступны в этой базе и какие из них
//     имеет смысл подключить данному пользователю.
//     * Орган - Перечисления.ТипыКонтролирующихОрганов - направление сдачи отчетности.
//     * Доступен - Булево - Доступно ли подключение данного направления в этой базе. По умолчанию - Истина.
//         Например, если этот функционал скрыт функциональной опцией, или недоступен в базе, то установить Ложь.
//     * Подключить - Булево - Подключить ли для данной организации данное направление. По умолчанию - Истина.
//         Например, для ИП без сотрудников можно не подключать ФСС и ПФР, так как он не сдают отчетность за себя.
//
// Пример:
//	Для каждого Направление ИЗ Направления Цикл
//		Если Направление.Орган <> Перечисления.ТипыКонтролирующихОрганов.ФНС
//			И Направление.Орган <> Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
//			
//			Направление.Доступен   = Ложь;
//			Направление.Подключить = Ложь;
//			
//		КонецЕсли;
//	КонецЦикла;
// 
Процедура ОпределитьПодключаемыеНаправленияСдачиОтчетности(Организация, Направления) Экспорт
	
	Для каждого Направление Из Направления Цикл
		Если Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФНС Тогда
			УстановитьСвойстваНаправленияФНС(Направление);
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСС Тогда
			УстановитьСвойстваНаправленияФСС(Направление);
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ПФР Тогда
			УстановитьСвойстваНаправленияПФР(Направление);
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.ФСРАР Тогда
			УстановитьСвойстваНаправленияРосалкогольрегулирования(Направление);
		ИначеЕсли Направление.Орган = Перечисления.ТипыКонтролирующихОрганов.БанкРоссии Тогда
			УстановитьСвойстваНаправленияБанкаРоссии(Направление);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСвойстваИсточниковДляФНС(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	// Соответствует версии БП 3.0.39.56
	ЗаполнитьСведения_ДоговорКонтрагента(СвойстваИсточников,                  ТолькоОсновныеСвойства);
	ЗаполнитьСведения_АктВыполненныхРабот(СвойстваИсточников,                 ТолькоОсновныеСвойства);
	ЗаполнитьСведения_АктОРасхожденияхПослеОтгрузки(СвойстваИсточников,       ТолькоОсновныеСвойства);
	ЗаполнитьСведения_АктОРасхожденияхПослеПриемки(СвойстваИсточников,        ТолькоОсновныеСвойства);
	ЗаполнитьСведения_ВозвратТоваровПоставщику(СвойстваИсточников,            ТолькоОсновныеСвойства);
	ЗаполнитьСведения_КорректировкаПриобретения(СвойстваИсточников,           ТолькоОсновныеСвойства);
	ЗаполнитьСведения_КорректировкаРеализации(СвойстваИсточников,             ТолькоОсновныеСвойства);
	ЗаполнитьСведения_ОтчетКомитенту(СвойстваИсточников,                      ТолькоОсновныеСвойства);
	ЗаполнитьСведения_ПриобретениеТоваровУслуг(СвойстваИсточников,            ТолькоОсновныеСвойства);
	ЗаполнитьСведения_ПриобретениеУслугПрочихАктивов(СвойстваИсточников,      ТолькоОсновныеСвойства);
	ЗаполнитьСведения_РеализацияТоваровУслуг(СвойстваИсточников,              ТолькоОсновныеСвойства);
	ЗаполнитьСведения_РеализацияУслугПрочихАктивов(СвойстваИсточников,        ТолькоОсновныеСвойства);
	ЗаполнитьСведения_СчетФактураВыданный(СвойстваИсточников,                 ТолькоОсновныеСвойства);
	ЗаполнитьСведения_СчетФактураПолученный(СвойстваИсточников,               ТолькоОсновныеСвойства);
	ЗаполнитьСведения_ТаможеннаяДекларацияИмпорт(СвойстваИсточников,          ТолькоОсновныеСвойства);
	ЗаполнитьСведения_СчетФактураПолученныйНалоговыйАгент(СвойстваИсточников, ТолькоОсновныеСвойства);
	
КонецПроцедуры


Процедура ЗаполнитьСведения_ДоговорКонтрагента(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Справочник", "ДоговорыКонтрагентов");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Организация,
	|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
	|	ДоговорыКонтрагентов.Дата,
	|	ДоговорыКонтрагентов.Номер
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В(&Источники)
	|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Справочник = Новый Структура();
		Справочник.Вставить("Организация",     Выборка.Организация);
		Справочник.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.Договор);
		Справочник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Справочник.Вставить("Участники",     Новый Массив);
			ДобавитьУчастника(Справочник.Участники, Выборка.Контрагент);
			ДобавитьУчастника(Справочник.Участники, Выборка.Организация);
		КонецЕсли;
		
		Справочник.Вставить("Дата",            Выборка.Дата);
		Справочник.Вставить("Номер",           Выборка.Номер);
		Справочник.Вставить("СуммаВсего",      0);
		
		СвойстваИсточников.Получить(Выборка.Договор).Добавить(Справочник);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_АктВыполненныхРабот(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "АктВыполненныхРабот";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка КАК Документ,
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент,
	|	АктОбОказанииПроизводственныхУслуг.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(АктОбОказанииПроизводственныхУслуг.Договор.Номер, """") КАК НомерОснования,
	|	ЕСТЬNULL(АктОбОказанииПроизводственныхУслуг.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ЕСТЬNULL(СУММА(АктОбОказанииПроизводственныхУслугУслуги.СуммаСНДС), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(АктОбОказанииПроизводственныхУслугУслуги.СуммаНДС), 0) КАК УслугиСуммаНДС
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктОбОказанииПроизводственныхУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО АктОбОказанииПроизводственныхУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И АктОбОказанииПроизводственныхУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктВыполненныхРабот.Услуги КАК АктОбОказанииПроизводственныхУслугУслуги
	|		ПО АктОбОказанииПроизводственныхУслуг.Ссылка = АктОбОказанииПроизводственныхУслугУслуги.Ссылка
	|ГДЕ
	|	АктОбОказанииПроизводственныхУслуг.Ссылка В(&Источники)
	|	И АктОбОказанииПроизводственныхУслуг.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОбОказанииПроизводственныхУслуг.Ссылка,
	|	АктОбОказанииПроизводственныхУслуг.Организация,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	АктОбОказанииПроизводственныхУслуг.Контрагент,
	|	АктОбОказанииПроизводственныхУслуг.Договор,
	|	ЕСТЬNULL(АктОбОказанииПроизводственныхУслуг.Договор.Номер, """"),
	|	ЕСТЬNULL(АктОбОказанииПроизводственныхУслуг.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
			
		// Акт об оказании услуг
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
		Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
		
		Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			Документ.Вставить("НомерОснования", Выборка.НомерОснования);
			Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
			Документ.Вставить("НачалоПериода", Выборка.Дата);
			Документ.Вставить("КонецПериода",  Выборка.Дата);
			Документ.Вставить("Участники",     Новый Массив);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_АктОРасхожденияхПослеОтгрузки(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "АктОРасхожденияхПослеОтгрузки";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктОРасхожденияхПослеОтгрузки.Ссылка КАК Документ,
	|	АктОРасхожденияхПослеОтгрузки.Организация,
	|	АктОРасхожденияхПослеОтгрузки.Номер КАК Номер,
	|	АктОРасхожденияхПослеОтгрузки.Дата КАК Дата,
	|	ЕСТЬNULL(СУММА(АктОРасхожденияхПослеОтгрузкиТовары.Сумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(АктОРасхожденияхПослеОтгрузкиТовары.СуммаПоДокументу), 0) КАК ТоварыСуммаПоДокументу
	|ИЗ
	|	Документ.АктОРасхожденияхПослеОтгрузки КАК АктОРасхожденияхПослеОтгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеОтгрузки.Товары КАК АктОРасхожденияхПослеОтгрузкиТовары
	|		ПО АктОРасхожденияхПослеОтгрузки.Ссылка = АктОРасхожденияхПослеОтгрузкиТовары.Ссылка
	|ГДЕ
	|	АктОРасхожденияхПослеОтгрузки.Ссылка В(&Источники)
	|	И АктОРасхожденияхПослеОтгрузки.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеОтгрузки.Ссылка,
	|	АктОРасхожденияхПослеОтгрузки.Организация,
	|	АктОРасхожденияхПослеОтгрузки.Номер,
	|	АктОРасхожденияхПослеОтгрузки.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Документ = Новый Структура();
		Документ.Вставить("Организация",     Выборка.Организация);
		Документ.Вставить("Дата",            Выборка.Дата);
		Документ.Вставить("Номер",           Выборка.Номер);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктОРасхождениях);
		Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма - Выборка.ТоварыСуммаПоДокументу);
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_АктОРасхожденияхПослеПриемки(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "АктОРасхожденияхПослеПриемки";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	АктОРасхожденияхПослеПриемки.Ссылка КАК Документ,
	|	АктОРасхожденияхПослеПриемки.Организация,
	|	АктОРасхожденияхПослеПриемки.Номер КАК Номер,
	|	АктОРасхожденияхПослеПриемки.Дата КАК Дата,
	|	ЕСТЬNULL(СУММА(АктОРасхожденияхПослеПриемкиТовары.Сумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(АктОРасхожденияхПослеПриемкиТовары.СуммаПоДокументу), 0) КАК ТоварыСуммаПоДокументу
	|ИЗ
	|	Документ.АктОРасхожденияхПослеПриемки КАК АктОРасхожденияхПослеПриемки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АктОРасхожденияхПослеПриемки.Товары КАК АктОРасхожденияхПослеПриемкиТовары
	|		ПО АктОРасхожденияхПослеПриемки.Ссылка = АктОРасхожденияхПослеПриемкиТовары.Ссылка
	|ГДЕ
	|	АктОРасхожденияхПослеПриемки.Ссылка В(&Источники)
	|	И АктОРасхожденияхПослеПриемки.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	АктОРасхожденияхПослеПриемки.Ссылка,
	|	АктОРасхожденияхПослеПриемки.Организация,
	|	АктОРасхожденияхПослеПриемки.Номер,
	|	АктОРасхожденияхПослеПриемки.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Документ = Новый Структура();
		Документ.Вставить("Организация",     Выборка.Организация);
		Документ.Вставить("Дата",            Выборка.Дата);
		Документ.Вставить("Номер",           Выборка.Номер);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктОРасхождениях);
		Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма - Выборка.ТоварыСуммаПоДокументу);
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_ВозвратТоваровПоставщику(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", "ВозвратТоваровПоставщику");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВозвратТоваровПоставщику.Ссылка КАК Документ,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ВозвратТоваровПоставщику.Договор.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ВозвратТоваровПоставщику.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ЕСТЬNULL(СУММА(ВозвратТоваровПоставщикуТовары.СуммаСНДС), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(ВозвратТоваровПоставщикуТовары.СуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ВозвратТоваровПоставщику.Грузоотправитель,
	|	ВозвратТоваровПоставщику.Грузополучатель
	|ИЗ
	|	Документ.ВозвратТоваровПоставщику КАК ВозвратТоваровПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ВозвратТоваровПоставщику.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ВозвратТоваровПоставщику.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВозвратТоваровПоставщику.Товары КАК ВозвратТоваровПоставщикуТовары
	|		ПО ВозвратТоваровПоставщику.Ссылка = ВозвратТоваровПоставщикуТовары.Ссылка
	|ГДЕ
	|	ВозвратТоваровПоставщику.Ссылка В(&Источники)
	|	И ВозвратТоваровПоставщику.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ВозвратТоваровПоставщику.Ссылка,
	|	ВозвратТоваровПоставщику.Организация,
	|	ВозвратТоваровПоставщику.Контрагент,
	|	ВозвратТоваровПоставщику.Договор,
	|	ЕСТЬNULL(ВозвратТоваровПоставщику.Договор.Номер, """"),
	|	ЕСТЬNULL(ВозвратТоваровПоставщику.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """"),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	ВозвратТоваровПоставщику.Грузоотправитель,
	|	ВозвратТоваровПоставщику.Грузополучатель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		// Товарная накладная (ТОРГ-12)
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
		Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
		
		Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			Документ.Вставить("НомерОснования", Выборка.НомерДоговора);
			Документ.Вставить("ДатаОснования",  Выборка.ДатаДоговора);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			
			Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
			Документ.Вставить("Участники",   Новый Массив);
			
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
			Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
				ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
			Иначе
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
				ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
			Иначе
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
			КонецЕсли;
			
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
		// Товарно-транспортная накладная
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
		Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
		
		Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			Документ.Вставить("НомерОснования", Выборка.НомерДоговора);
			Документ.Вставить("ДатаОснования",  Выборка.ДатаДоговора);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			
			Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
			Документ.Вставить("Участники",   Новый Массив);
			
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
			Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
				ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
			Иначе
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
				ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
			Иначе
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
			КонецЕсли;
			
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_КорректировкаПриобретения(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", "КорректировкаПриобретения");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаПриобретения.Ссылка КАК Документ,
	|	КорректировкаПриобретения.Организация,
	|	КорректировкаПриобретения.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	КорректировкаПриобретения.ДокументОснование КАК ДокументПоступления,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовОснования.Номер, """") КАК НомерОснования,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовОснования.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	КорректировкаПриобретения.Организация КАК Грузополучатель,
	|	КорректировкаПриобретения.Контрагент КАК Грузоотправитель
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО КорректировкаПриобретения.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И КорректировкаПриобретения.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовОснования
	|		ПО КорректировкаПриобретения.ДокументОснование = ДанныеПервичныхДокументовОснования.Документ
	|			И КорректировкаПриобретения.Организация = ДанныеПервичныхДокументовОснования.Организация
	|ГДЕ
	|	КорректировкаПриобретения.Ссылка В(&Источники)
	|	И КорректировкаПриобретения.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ,
	|	1 КАК ТоварыКоличество,
	|	КорректировкаПриобретенияТовары.СуммаСНДС КАК ТоварыСумма,
	|	КорректировкаПриобретенияТовары.СуммаНДС КАК ТоварыСуммаНДС,
	|	0 КАК УслугиКоличество,
	|	0 КАК УслугиСумма,
	|	0 КАК УслугиСуммаНДС
	|ПОМЕСТИТЬ СтрокиДокументов
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения.Товары КАК КорректировкаПриобретенияТовары
	|		ПО Документы.Документ = КорректировкаПриобретенияТовары.Ссылка
	|			И НЕ КорректировкаПриобретенияТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	0,
	|	0,
	|	0,
	|	1,
	|	КорректировкаПриобретенияУслуги.СуммаСНДС,
	|	КорректировкаПриобретенияУслуги.СуммаНДС
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаПриобретения.Товары КАК КорректировкаПриобретенияУслуги
	|		ПО Документы.Документ = КорректировкаПриобретенияУслуги.Ссылка
	|			И КорректировкаПриобретенияУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыКоличество), 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиКоличество), 0) КАК УслугиКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСумма), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСуммаНДС), 0) КАК УслугиСуммаНДС,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.ДокументПоступления
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиДокументов КАК СтрокиДокументов
	|		ПО Документы.Документ = СтрокиДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.ДокументПоступления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Если Выборка.УслугиКоличество > 0 Тогда
			
			// Акт об оказании услуг
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
			Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
				Документ.Вставить("НачалоПериода", Выборка.Дата);
				Документ.Вставить("КонецПериода",  Выборка.Дата);
				Документ.Вставить("Участники",     Новый Массив);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		Если Выборка.ТоварыКоличество > 0 Тогда
			
			// Товарная накладная (ТОРГ-12)
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
			// Товарно-транспортная накладная
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДокументПоступления) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		Документ = Новый Структура();
		Документ.Вставить("Организация",     Выборка.Организация);
		Документ.Вставить("Дата",            Выборка.Дата);
		Документ.Вставить("Номер",           Выборка.Номер);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ДокументОбИзмененииСтоимости);
		Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма + Выборка.ТоварыСумма);
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_КорректировкаРеализации(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", "КорректировкаРеализации");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КорректировкаРеализации.Ссылка КАК Документ,
	|	КорректировкаРеализации.Организация,
	|	КорректировкаРеализации.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	КорректировкаРеализации.ДокументОснование КАК ДокументРеализации,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовОснования.Номер, """") КАК НомерОснования,
	|	ЕСТЬNULL(ДанныеПервичныхДокументовОснования.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	КорректировкаРеализации.Грузополучатель,
	|	КорректировкаРеализации.Грузоотправитель
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО КорректировкаРеализации.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И КорректировкаРеализации.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументовОснования
	|		ПО КорректировкаРеализации.ДокументОснование = ДанныеПервичныхДокументовОснования.Документ
	|			И КорректировкаРеализации.Организация = ДанныеПервичныхДокументовОснования.Организация
	|ГДЕ
	|	КорректировкаРеализации.Ссылка В(&Источники)
	|	И КорректировкаРеализации.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ,
	|	1 КАК ТоварыКоличество,
	|	КорректировкаРеализацииТовары.СуммаСНДС КАК ТоварыСумма,
	|	КорректировкаРеализацииТовары.СуммаНДС КАК ТоварыСуммаНДС,
	|	0 КАК УслугиКоличество,
	|	0 КАК УслугиСумма,
	|	0 КАК УслугиСуммаНДС
	|ПОМЕСТИТЬ СтрокиДокументов
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииТовары
	|		ПО Документы.Документ = КорректировкаРеализацииТовары.Ссылка
	|			И НЕ КорректировкаРеализацииТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	0,
	|	0,
	|	0,
	|	1,
	|	КорректировкаРеализацииУслуги.СуммаСНДС,
	|	КорректировкаРеализацииУслуги.СуммаНДС
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КорректировкаРеализации.Товары КАК КорректировкаРеализацииУслуги
	|		ПО Документы.Документ = КорректировкаРеализацииУслуги.Ссылка
	|			И КорректировкаРеализацииУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыКоличество), 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиКоличество), 0) КАК УслугиКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСумма), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСуммаНДС), 0) КАК УслугиСуммаНДС,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.ДокументРеализации
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиДокументов КАК СтрокиДокументов
	|		ПО Документы.Документ = СтрокиДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.ДокументРеализации";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Если Выборка.УслугиКоличество > 0 Тогда
			
			// Акт об оказании услуг
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
			Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
				Документ.Вставить("НачалоПериода", Выборка.Дата);
				Документ.Вставить("КонецПериода",  Выборка.Дата);
				Документ.Вставить("Участники",     Новый Массив);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		Если Выборка.ТоварыКоличество > 0 Тогда
			
			// Товарная накладная (ТОРГ-12)
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
			// Товарно-транспортная накладная
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДокументРеализации) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		Документ = Новый Структура();
		Документ.Вставить("Организация",     Выборка.Организация);
		Документ.Вставить("Дата",            Выборка.Дата);
		Документ.Вставить("Номер",           Выборка.Номер);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ДокументОбИзмененииСтоимости);
		Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма + Выборка.ТоварыСумма);
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_ОтчетКомитенту(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", "ОтчетКомитенту");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтчетКомитентуОПродажах.Ссылка КАК Документ,
	|	ОтчетКомитентуОПродажах.Организация,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ОтчетКомитентуОПродажах.СуммаВознаграждения КАК СуммаВознаграждения,
	|	ОтчетКомитентуОПродажах.СуммаНДСВознаграждения КАК СуммаНДСВознаграждения,
	|	ОтчетКомитентуОПродажах.Контрагент,
	|	ОтчетКомитентуОПродажах.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ОтчетКомитентуОПродажах.Договор.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ОтчетКомитентуОПродажах.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора
	|ИЗ
	|	Документ.ОтчетКомитенту КАК ОтчетКомитентуОПродажах
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОтчетКомитентуОПродажах.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ОтчетКомитентуОПродажах.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ОтчетКомитентуОПродажах.Ссылка В(&Источники)
	|	И ОтчетКомитентуОПродажах.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		// Акт об оказании услуг
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
		Документ.Вставить("СуммаВсего",      Выборка.СуммаВознаграждения);
		
		Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			Документ.Вставить("НомерОснования", Выборка.НомерДоговора);
			Документ.Вставить("ДатаОснования",  Выборка.ДатаДоговора);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Документ.Вставить("СуммаНалога",   Выборка.СуммаНДСВознаграждения);
			Документ.Вставить("НачалоПериода", Выборка.Дата);
			Документ.Вставить("КонецПериода",  Выборка.Дата);
			Документ.Вставить("Участники",     Новый Массив);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_ПриобретениеТоваровУслуг(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "ПриобретениеТоваровУслуг";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслуг.Ссылка КАК Документ,
	|	ПриобретениеТоваровУслуг.Организация,
	|	ПриобретениеТоваровУслуг.Контрагент,
	|	ПриобретениеТоваровУслуг.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.Договор.Номер, """") КАК НомерОснования,
	|	ЕСТЬNULL(ПриобретениеТоваровУслуг.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ПриобретениеТоваровУслуг.Организация КАК Грузополучатель,
	|	ПриобретениеТоваровУслуг.Грузоотправитель
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПриобретениеТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ПриобретениеТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	ПриобретениеТоваровУслуг.Ссылка В(&Источники)
	|	И ПриобретениеТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ,
	|	1 КАК ТоварыКоличество,
	|	ПриобретениеТоваровУслугТовары.СуммаСНДС КАК ТоварыСумма,
	|	ПриобретениеТоваровУслугТовары.СуммаНДС КАК ТоварыСуммаНДС,
	|	0 КАК УслугиКоличество,
	|	0 КАК УслугиСумма,
	|	0 КАК УслугиСуммаНДС
	|ПОМЕСТИТЬ СтрокиДокументов
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|		ПО Документы.Документ = ПриобретениеТоваровУслугТовары.Ссылка
	|			И НЕ ПриобретениеТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	0,
	|	0,
	|	0,
	|	1,
	|	ПриобретениеТоваровУслугУслуги.СуммаСНДС,
	|	ПриобретениеТоваровУслугУслуги.СуммаНДС
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугУслуги
	|		ПО Документы.Документ = ПриобретениеТоваровУслугУслуги.Ссылка
	|			И ПриобретениеТоваровУслугУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.ДоговорКонтрагента,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыКоличество), 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиКоличество), 0) КАК УслугиКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСумма), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСуммаНДС), 0) КАК УслугиСуммаНДС
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиДокументов КАК СтрокиДокументов
	|		ПО Документы.Документ = СтрокиДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.ДоговорКонтрагента,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Если Выборка.УслугиКоличество > 0 Тогда
			
			// Акт об оказании услуг
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
			Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
				Документ.Вставить("НачалоПериода", Выборка.Дата);
				Документ.Вставить("КонецПериода",  Выборка.Дата);
				Документ.Вставить("Участники",     Новый Массив);
				ДобавитьУчастника(Документ.Участники, Документ.Организация,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		Если Выборка.ТоварыКоличество > 0 Тогда
			
			// Товарная накладная (ТОРГ-12)
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
			// Товарно-транспортная накладная
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
			// Акт на передачу прав
			Документ = Новый Структура();
			Документ.Вставить("Организация",     Выборка.Организация);
			Документ.Вставить("Дата",            Выборка.Дата);
			Документ.Вставить("Номер",           Выборка.Номер);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктНаПередачуПрав);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_ПриобретениеУслугПрочихАктивов(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "ПриобретениеУслугПрочихАктивов";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПоступлениеУПА.Ссылка КАК Документ,
	|	ПоступлениеУПА.Организация,
	|	ПоступлениеУПА.Контрагент,
	|	ПоступлениеУПА.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ПоступлениеУПА.Договор.Номер, """") КАК НомерОснования,
	|	ЕСТЬNULL(ПоступлениеУПА.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ЕСТЬNULL(СУММА(ПоступлениеУПАРасходы.СуммаСНДС), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(ПоступлениеУПАРасходы.СуммаНДС), 0) КАК УслугиСуммаНДС
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ПоступлениеУПА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПоступлениеУПА.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И ПоступлениеУПА.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеУслугПрочихАктивов.Расходы КАК ПоступлениеУПАРасходы
	|		ПО ПоступлениеУПА.Ссылка = ПоступлениеУПАРасходы.Ссылка
	|ГДЕ
	|	ПоступлениеУПА.Ссылка В(&Источники)
	|	И ПоступлениеУПА.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	ПоступлениеУПА.Ссылка,
	|	ПоступлениеУПА.Организация,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	ПоступлениеУПА.Контрагент,
	|	ПоступлениеУПА.Договор,
	|	ЕСТЬNULL(ПоступлениеУПА.Договор.Номер, """"),
	|	ЕСТЬNULL(ПоступлениеУПА.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		// Акт об оказании услуг
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
		Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
		
		Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			Документ.Вставить("НомерОснования", Выборка.НомерОснования);
			Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
			Документ.Вставить("НачалоПериода", Выборка.Дата);
			Документ.Вставить("КонецПериода",  Выборка.Дата);
			Документ.Вставить("Участники",     Новый Массив);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_РеализацияТоваровУслуг(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "РеализацияТоваровУслуг";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Документ,
	|	РеализацияТоваровУслуг.Организация,
	|	РеализацияТоваровУслуг.Контрагент,
	|	РеализацияТоваровУслуг.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Договор.Номер, """") КАК НомерОснования,
	|	ЕСТЬNULL(РеализацияТоваровУслуг.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	РеализацияТоваровУслуг.ВариантОформленияПродажи,
	|	РеализацияТоваровУслуг.Грузополучатель,
	|	РеализацияТоваровУслуг.Грузоотправитель
	|ПОМЕСТИТЬ Документы
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РеализацияТоваровУслуг.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И РеализацияТоваровУслуг.Организация = ДанныеПервичныхДокументов.Организация
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка В(&Источники)
	|	И РеализацияТоваровУслуг.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ КАК Документ,
	|	1 КАК ТоварыКоличество,
	|	РеализацияТоваровУслугТовары.СуммаСНДС КАК ТоварыСумма,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК ТоварыСуммаНДС,
	|	0 КАК УслугиКоличество,
	|	0 КАК УслугиСумма,
	|	0 КАК УслугиСуммаНДС
	|ПОМЕСТИТЬ СтрокиДокументов
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|		ПО Документы.Документ = РеализацияТоваровУслугТовары.Ссылка
	|			И НЕ РеализацияТоваровУслугТовары.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	0,
	|	0,
	|	0,
	|	1,
	|	РеализацияТоваровУслугУслуги.СуммаСНДС,
	|	РеализацияТоваровУслугУслуги.СуммаНДС
	|ИЗ
	|	Документы КАК Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугУслуги
	|		ПО Документы.Документ = РеализацияТоваровУслугУслуги.Ссылка
	|			И РеализацияТоваровУслугУслуги.Номенклатура.ТипНоменклатуры В (ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга), ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.ДоговорКонтрагента,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.ВариантОформленияПродажи,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыКоличество), 0) КАК ТоварыКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСумма), 0) КАК ТоварыСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.ТоварыСуммаНДС), 0) КАК ТоварыСуммаНДС,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиКоличество), 0) КАК УслугиКоличество,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСумма), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(СтрокиДокументов.УслугиСуммаНДС), 0) КАК УслугиСуммаНДС
	|ИЗ
	|	Документы КАК Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СтрокиДокументов КАК СтрокиДокументов
	|		ПО Документы.Документ = СтрокиДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	Документы.Документ,
	|	Документы.Организация,
	|	Документы.Контрагент,
	|	Документы.ДоговорКонтрагента,
	|	Документы.НомерОснования,
	|	Документы.ДатаОснования,
	|	Документы.Номер,
	|	Документы.Дата,
	|	Документы.ВариантОформленияПродажи,
	|	Документы.Грузополучатель,
	|	Документы.Грузоотправитель";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Если Выборка.УслугиКоличество > 0 Тогда
			
			// Акт об оказании услуг
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
			Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
				Документ.Вставить("НачалоПериода", Выборка.Дата);
				Документ.Вставить("КонецПериода",  Выборка.Дата);
				Документ.Вставить("Участники",     Новый Массив);
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
		КонецЕсли;
		
		Если Выборка.ТоварыКоличество > 0 Тогда
			
			// Товарная накладная (ТОРГ-12)
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварнаяНакладнаяТОРГ12);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
			// Товарно-транспортная накладная
			Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ТоварноТранспортнаяНакладная);
			Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
			
			Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Если НЕ ТолькоОсновныеСвойства Тогда
				
				Документ.Вставить("СуммаНалога", Выборка.ТоварыСуммаНДС);
				Документ.Вставить("Участники",   Новый Массив);
				
				ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Плательщик", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
				ДобавитьУчастника(Документ.Участники, Документ.Организация, "Поставщик",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
				Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			
			Если Выборка.ВариантОформленияПродажи = Перечисления.ВариантыОформленияПродажи.АктНаПередачуПрав Тогда
				Документ = Новый Структура();
				Документ.Вставить("Организация",     Выборка.Организация);
				Документ.Вставить("Дата",            Выборка.Дата);
				Документ.Вставить("Номер",           Выборка.Номер);
				Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктНаПередачуПрав);
				Документ.Вставить("СуммаВсего",      Выборка.ТоварыСумма);
				
				СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
			КонецЕсли;
			
		КонецЕсли;
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_РеализацияУслугПрочихАктивов(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", "РеализацияУслугПрочихАктивов");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеализацияУслугПоПереработке.Ссылка КАК Документ,
	|	РеализацияУслугПоПереработке.Организация,
	|	РеализацияУслугПоПереработке.Контрагент,
	|	РеализацияУслугПоПереработке.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(РеализацияУслугПоПереработке.Договор.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(РеализацияУслугПоПереработке.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	ЕСТЬNULL(СУММА(РеализацияУслугПоПереработкеУслуги.СуммаСНДС), 0) КАК УслугиСумма,
	|	ЕСТЬNULL(СУММА(РеализацияУслугПоПереработкеУслуги.СуммаНДС), 0) КАК УслугиСуммаНДС
	|ИЗ
	|	Документ.РеализацияУслугПрочихАктивов КАК РеализацияУслугПоПереработке
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО РеализацияУслугПоПереработке.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И РеализацияУслугПоПереработке.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РеализацияУслугПрочихАктивов.Доходы КАК РеализацияУслугПоПереработкеУслуги
	|		ПО РеализацияУслугПоПереработке.Ссылка = РеализацияУслугПоПереработкеУслуги.Ссылка
	|ГДЕ
	|	РеализацияУслугПоПереработке.Ссылка В(&Источники)
	|	И РеализацияУслугПоПереработке.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияУслугПоПереработке.Ссылка,
	|	РеализацияУслугПоПереработке.Организация,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	РеализацияУслугПоПереработке.Контрагент,
	|	РеализацияУслугПоПереработке.Договор,
	|	ЕСТЬNULL(РеализацияУслугПоПереработке.Договор.Номер, """"),
	|	ЕСТЬNULL(РеализацияУслугПоПереработке.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		// Акт об оказании услуг
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.АктПриемкиСдачиРабот);
		Документ.Вставить("СуммаВсего",      Выборка.УслугиСумма);
		
		Если ЗначениеЗаполнено(Выборка.ДоговорКонтрагента) Тогда
			Документ.Вставить("НомерОснования", Выборка.НомерДоговора);
			Документ.Вставить("ДатаОснования",  Выборка.ДатаДоговора);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Документ.Вставить("СуммаНалога",   Выборка.УслугиСуммаНДС);
			Документ.Вставить("НачалоПериода", Выборка.Дата);
			Документ.Вставить("КонецПериода",  Выборка.Дата);
			Документ.Вставить("Участники",     Новый Массив);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Заказчик",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Заказчик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Исполнитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Исполнитель);
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_СчетФактураВыданный(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "СчетФактураВыданный";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка КАК Документ,
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	СчетФактураВыданный.Корректировочный,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаНДС, 0)) КАК СуммаНДСДокумента,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре, 0)) КАК СуммаДокумента,
	|	ЕСТЬNULL(МАКСИМУМ(СчетФактураВыданныйТовары.ПредыдущийСчетФактура.ПредставлениеНомера), """") КАК НомерОснования,
	|	ЕСТЬNULL(МАКСИМУМ(СчетФактураВыданныйТовары.ПредыдущийСчетФактура.Дата), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаОснования,
	|	ЕСТЬNULL(МАКСИМУМ(СчетФактураВыданныйДокументыОснования.ДокументОснование.Грузоотправитель), СчетФактураВыданный.Организация) КАК Грузоотправитель,
	|	ЕСТЬNULL(МАКСИМУМ(СчетФактураВыданныйДокументыОснования.ДокументОснование.Грузополучатель), СчетФактураВыданный.Контрагент) КАК Грузополучатель
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураВыданный.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И СчетФактураВыданный.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданныйДокументыОснования
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйДокументыОснования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Товары КАК СчетФактураВыданныйТовары
	|		ПО СчетФактураВыданный.Ссылка = СчетФактураВыданныйТовары.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО СчетФактураВыданный.Ссылка = ЖурналУчетаСчетовФактур.СчетФактура
	|ГДЕ
	|	СчетФактураВыданный.Ссылка В(&Источники)
	|	И СчетФактураВыданный.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Организация,
	|	СчетФактураВыданный.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """"),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	СчетФактураВыданный.Корректировочный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Выдан);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		
		Документ.Вставить("СуммаВсего", Выборка.СуммаДокумента);
		
		Если Выборка.Корректировочный Тогда
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
		Иначе
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Если Выборка.Корректировочный Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Документ.Вставить("СуммаНалога", Выборка.СуммаНДСДокумента);
			Документ.Вставить("Участники",   Новый Массив);
			
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Покупатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Продавец",   Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
			
			Если НЕ Выборка.Корректировочный Тогда
				ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_СчетФактураПолученный(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "СчетФактураПолученный";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СчетФактураПолученный.Ссылка КАК Документ,
	|	СчетФактураПолученный.Организация,
	|	СчетФактураПолученный.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаНДС, 0)) КАК СуммаНДСДокумента,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре, 0)) КАК СуммаДокумента,
	|	СчетФактураПолученный.Корректировочный,
	|	СчетФактураПолученныйДокументыОснования.ИсходныйДокумент.Номер КАК НомерОснования,
	|	СчетФактураПолученныйДокументыОснования.ИсходныйДокумент.Дата КАК ДатаОснования,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.ДокументОснование.Грузоотправитель) КАК Грузоотправитель,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.ДокументОснование.Грузополучатель) КАК Грузополучатель
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураПолученный.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И СчетФактураПолученный.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО СчетФактураПолученный.Ссылка = СчетФактураПолученныйДокументыОснования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО СчетФактураПолученный.Ссылка = ЖурналУчетаСчетовФактур.СчетФактура
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&Источники)
	|	И СчетФактураПолученный.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Организация,
	|	СчетФактураПолученный.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """"),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	СчетФактураПолученный.Корректировочный,
	|	СчетФактураПолученныйДокументыОснования.ИсходныйДокумент.Номер,
	|	СчетФактураПолученныйДокументыОснования.ИсходныйДокумент.Дата";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		
		Документ.Вставить("СуммаВсего",      Выборка.СуммаДокумента);
		
		Если Выборка.Корректировочный Тогда
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
		Иначе
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Если Выборка.Корректировочный Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Документ.Вставить("СуммаНалога", Выборка.СуммаНДСДокумента);
			Документ.Вставить("Участники",   Новый Массив);
			
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Покупатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Продавец",   Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
			
			Если НЕ Выборка.Корректировочный Тогда
				
				Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_СчетФактураПолученныйНалоговыйАгент(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	ТипДокумента = "СчетФактураПолученныйНалоговыйАгент";
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", ТипДокумента);
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеЭлектронныеДокументы = Новый Соответствие;
	СозданныеЭлектронныеДокументы = ОбменСКонтрагентами.СвойстваОбъектовУчетаЭлектронныхДокументовДляВыгрузкиВФНС(Источники);
	
	ДоступныеВидыЭлектронныхДокументов = ДоступныеВидыЭлектронныхДокументов(Тип("ДокументСсылка."+ТипДокумента));
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка КАК Документ,
	|	СчетФактураПолученный.Организация,
	|	СчетФактураПолученный.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """") КАК Номер,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК Дата,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаНДС, 0)) КАК СуммаНДСДокумента,
	|	СУММА(ЕСТЬNULL(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре, 0)) КАК СуммаДокумента,
	|	СчетФактураПолученный.Корректировочный,
	|	СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента КАК НомерОснования,
	|	СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента КАК ДатаОснования,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.ДокументОснование.Грузоотправитель) КАК Грузоотправитель,
	|	МАКСИМУМ(СчетФактураПолученныйДокументыОснования.ДокументОснование.Грузополучатель) КАК Грузополучатель
	|ИЗ
	|	Документ.СчетФактураПолученныйНалоговыйАгент КАК СчетФактураПолученный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО СчетФактураПолученный.Ссылка = ДанныеПервичныхДокументов.Документ
	|			И СчетФактураПолученный.Организация = ДанныеПервичныхДокументов.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураПолученныйНалоговыйАгент.ДокументыОснования КАК СчетФактураПолученныйДокументыОснования
	|		ПО СчетФактураПолученный.Ссылка = СчетФактураПолученныйДокументыОснования.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ПО СчетФактураПолученный.Ссылка = ЖурналУчетаСчетовФактур.СчетФактура
	|ГДЕ
	|	СчетФактураПолученный.Ссылка В(&Источники)
	|	И СчетФактураПолученный.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Организация,
	|	СчетФактураПолученный.Контрагент,
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Номер, """"),
	|	ЕСТЬNULL(ДанныеПервичныхДокументов.Дата, ДАТАВРЕМЯ(1, 1, 1)),
	|	СчетФактураПолученный.Корректировочный,
	|	СчетФактураПолученныйДокументыОснования.НомерИсходногоДокумента,
	|	СчетФактураПолученныйДокументыОснования.ДатаИсходногоДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);
		ОбъектИсточник.Вставить("Дата",            Выборка.Дата);
		ОбъектИсточник.Вставить("Номер",           Выборка.Номер);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		
		Документ.Вставить("СуммаВсего",      Выборка.СуммаДокумента);
		
		Если Выборка.Корректировочный Тогда
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.КорректировочныйСчетФактура);
		Иначе
			Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.СчетФактура);
		КонецЕсли;
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Если Выборка.Корректировочный Тогда
				Документ.Вставить("НомерОснования", Выборка.НомерОснования);
				Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
			КонецЕсли;
			
			Документ.Вставить("СуммаНалога", Выборка.СуммаНДСДокумента);
			Документ.Вставить("Участники",   Новый Массив);
			
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Покупатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Плательщик);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Продавец",   Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Поставщик);
			
			Если НЕ Выборка.Корректировочный Тогда
				
				Если ЗначениеЗаполнено(Выборка.Грузополучатель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузополучатель, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Организация, "Грузополучатель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузополучатель);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Выборка.Грузоотправитель) Тогда
					ДобавитьУчастника(Документ.Участники, Выборка.Грузоотправитель, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				Иначе
					ДобавитьУчастника(Документ.Участники, Документ.Контрагент, "Грузоотправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Грузоотправитель);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
		ВидПредставляемогоДокумента = ВидПредставляемогоДокумента(Выборка.Документ, СозданныеЭлектронныеДокументы, 
																	ДоступныеВидыЭлектронныхДокументов);
		Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
			ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСведения_ТаможеннаяДекларацияИмпорт(СвойстваИсточников, ТолькоОсновныеСвойства)
	
	Источники = МассивИсточников(СвойстваИсточников, "Документ", "ТаможеннаяДекларацияИмпорт");
	
	Если Источники.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Источники", Источники);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГТДИмпорт.Ссылка КАК Документ,
	|	ГТДИмпорт.Организация,
	|	ГТДИмпорт.НомерДекларации КАК НомерГТД,
	|	ГТДИмпорт.Контрагент,
	|	ГТДИмпорт.Договор КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ГТДИмпорт.Договор.Номер, """") КАК НомерДоговора,
	|	ЕСТЬNULL(ГТДИмпорт.Договор.Дата, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаДоговора
	|ИЗ
	|	Документ.ТаможеннаяДекларацияИмпорт КАК ГТДИмпорт
	|ГДЕ
	|	ГТДИмпорт.Ссылка В(&Источники)
	|	И ГТДИмпорт.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектИсточник = Новый Структура();
		ОбъектИсточник.Вставить("Организация",     Выборка.Организация);
		ОбъектИсточник.Вставить("Направление",     Перечисления.НаправленияДокументаПоТребованиюФНС.Получен);
		ОбъектИсточник.Вставить("Номер",           Выборка.НомерГТД);
		ОбъектИсточник.Вставить("Контрагент",      Выборка.Контрагент);
		
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", Перечисления.ВидыПредставляемыхДокументов.ГрузоваяТаможеннаяДекларация);
		
		Если НЕ ТолькоОсновныеСвойства Тогда
			Документ.Вставить("Участники",   Новый Массив);
			
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Получатель",  Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Получатель);
			ДобавитьУчастника(Документ.Участники, Документ.Контрагент,  "Отправитель", Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Отправитель);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Декларант",   Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Декларант);
			ДобавитьУчастника(Документ.Участники, Документ.Организация, "Импортер",    Перечисления.РолиУчастниковСделкиДокументаПоТребованиюФНС.Импортер);
		КонецЕсли;
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
		
	КонецЦикла;
	
КонецПроцедуры


Функция МассивИсточников(СвойстваИсточников, ТипРегистрируемогоОбъекта, ИмяРегистрируемогоОбъекта)
	
	Источники = Новый Массив;
	
	Для Каждого СвойствоИсточника Из СвойстваИсточников Цикл
		
		Если ТипЗнч(СвойствоИсточника.Ключ) = Тип(ТипРегистрируемогоОбъекта + "Объект." + ИмяРегистрируемогоОбъекта) Тогда
			Источники.Добавить(СвойствоИсточника.Ключ.Ссылка);
		ИначеЕсли ТипЗнч(СвойствоИсточника.Ключ) = Тип(ТипРегистрируемогоОбъекта + "Ссылка." + ИмяРегистрируемогоОбъекта) Тогда
			Источники.Добавить(СвойствоИсточника.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Источники;
	
КонецФункции

Функция СтруктураОсновныхСвойств(ОписаниеИсточника)
	
	ОбъектИсточник = Новый Структура("Организация, Направление, Дата, Номер, Контрагент");
	ЗаполнитьЗначенияСвойств(ОбъектИсточник, ОписаниеИсточника);
	Возврат ОбъектИсточник;
	
КонецФункции

Процедура ДобавитьУчастника(Участники, Контрагент, ВидКонтрагента = "", Роль = "")
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		СвойстваКонтрагента = Новый Структура();
		СвойстваКонтрагента.Вставить("Роль", Роль);
		
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Контрагент, "ЮридическоеФизическоеЛицо, НаименованиеПолное, ИНН, КПП");
		
		СвойстваКонтрагента.Вставить("ЯвляетсяЮрЛицом", Реквизиты.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		Если СвойстваКонтрагента.ЯвляетсяЮрЛицом Тогда
			СвойстваКонтрагента.Вставить("ЮрЛицоНаименование", Реквизиты.НаименованиеПолное);
			СвойстваКонтрагента.Вставить("ЮрЛицоИНН",          Реквизиты.ИНН);
			СвойстваКонтрагента.Вставить("ЮрЛицоКПП",          Реквизиты.КПП);
		Иначе
			ФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(СокрЛП(Реквизиты.НаименованиеПолное));
			СвойстваКонтрагента.Вставить("ФизЛицоФамилия",     ФИО.Фамилия);
			СвойстваКонтрагента.Вставить("ФизЛицоИмя",         ФИО.Имя);
			СвойстваКонтрагента.Вставить("ФизЛицоОтчество",    ФИО.Отчество);
			СвойстваКонтрагента.Вставить("ФизЛицоИНН",         Реквизиты.ИНН);
		КонецЕсли;
		
		Если ТипЗнч(Контрагент) = Тип("СправочникОбъект.Контрагенты")
			ИЛИ ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			
			СвойстваКонтрагента.Вставить("Контрагент", Контрагент);
			
		КонецЕсли;
		
		Участники.Добавить(СвойстваКонтрагента);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЭлектронныйДокумент(Выборка, ОбъектИсточник, СвойстваИсточников, ВидПредставляемогоДокумента)
	
	Если ЗначениеЗаполнено(ВидПредставляемогоДокумента) Тогда
		Документ = СтруктураОсновныхСвойств(ОбъектИсточник);
		Документ.Вставить("ВидДокументаФНС", ВидПредставляемогоДокумента);
		
		Документ.Вставить("НомерОснования", Выборка.НомерОснования);
		Документ.Вставить("ДатаОснования",  Выборка.ДатаОснования);
		
		Если ВидПредставляемогоДокумента = Перечисления.ВидыПредставляемыхДокументов.ПередачаТоваров Тогда
			СуммаДокумента = Выборка.ТоварыСумма;
		ИначеЕсли ВидПредставляемогоДокумента = Перечисления.ВидыПредставляемыхДокументов.ПередачаУслуг Тогда
			СуммаДокумента = Выборка.УслугиСумма;
		Иначе
			СуммаДокумента = Выборка.СуммаДокумента;
		КонецЕсли;
		Документ.Вставить("СуммаВсего", СуммаДокумента);
		
		СвойстваИсточников.Получить(Выборка.Документ).Добавить(Документ);
	КонецЕсли;
	
КонецПроцедуры

Функция ВидПредставляемогоДокумента(Документ, СозданныеЭлектронныеДокументы, ДоступныеВидыЭлектронныхДокументов)
	
	ВидПредставляемогоДокумента = Неопределено;
	
	// Всегда заполняем только основные свойства
	ВидЭД = СозданныеЭлектронныеДокументы.Получить(Документ);
	Если ЗначениеЗаполнено(ВидЭД) Тогда
		Если ВидЭД = "ПередачаТоваров" Тогда
			ВидПредставляемогоДокумента = Перечисления.ВидыПредставляемыхДокументов.ПередачаТоваров;
		ИначеЕсли ВидЭД = "ПередачаУслуг" Тогда
			ВидПредставляемогоДокумента = Перечисления.ВидыПредставляемыхДокументов.ПередачаУслуг;
		ИначеЕсли ВидЭД = "УПД" Тогда
			ВидПредставляемогоДокумента = Перечисления.ВидыПредставляемыхДокументов.УПД;
		ИначеЕсли ВидЭД = "УКД" Тогда
			ВидПредставляемогоДокумента = Перечисления.ВидыПредставляемыхДокументов.УКД;
		КонецЕсли;
	КонецЕсли;
	
	Если ДоступныеВидыЭлектронныхДокументов.Получить(ВидПредставляемогоДокумента) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ВидПредставляемогоДокумента;
	
КонецФункции

Функция ДоступныеВидыЭлектронныхДокументов(ТипОбъекта)
	
	// Возвращает доступные виды электронных документов
	// для данного типа объектов.
	// В качестве источника используется результат процедуры
	// ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС
	
	ВидыДокументовТипаОбъекта = Новый Соответствие;
	
	СоответствиеВидовДокументов = Новый Соответствие;
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСерверПереопределяемый.ОпределитьСоответствиеТиповИсточниковВидамДокументовФНС(СоответствиеВидовДокументов);
	Для Каждого ВидДокумента Из СоответствиеВидовДокументов Цикл
		Для Каждого ТипДляВидаДокумента Из ВидДокумента.Значение Цикл
			Если ТипДляВидаДокумента = ТипОбъекта Тогда
				ВидыДокументовТипаОбъекта.Вставить(ВидДокумента.Ключ, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВидыДокументовТипаОбъекта;
	
КонецФункции

Процедура УстановитьСвойстваНаправленияФНС(Направление)
	
	Направление.Подключить = Истина;
	
КонецПроцедуры

Процедура УстановитьСвойстваНаправленияФСС(Направление)
	
	Направление.Подключить = Истина;
	
КонецПроцедуры

Процедура УстановитьСвойстваНаправленияПФР(Направление)
	
	Направление.Подключить = Истина;
	
КонецПроцедуры

Процедура УстановитьСвойстваНаправленияРосалкогольрегулирования(Направление)
		
	Направление.Доступен   = Истина;
	Направление.Подключить = ПолучитьФункциональнуюОпцию("ВестиСведенияДляДекларацийАлкоВРознице");
	
КонецПроцедуры

Процедура УстановитьСвойстваНаправленияБанкаРоссии(Направление)
	
	Направление.Доступен = Метаданные.Подсистемы.РегламентированнаяОтчетность.Подсистемы.ЭлектронныйДокументооборотСКонтролирующимиОрганами.Подсистемы.Найти(
		"СдачаОтчетностиВБанкРоссии") <> Неопределено;
	
	Если Направление.Доступен Тогда
		Направление.Подключить = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
