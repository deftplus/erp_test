
#Область ФормированиеШаблонаСводнойТаблицы

Процедура ЗаполнитьДоступныеПоля(ТаблицаДоступныеПоля,ВидОтчета,Бланк,КэшАналитикПоказателей,ДоступныеАналитики,ИспользуемыеПоказатели,КэшАналитикПоказателейСТ=Неопределено,флОшибки="") Экспорт

	// Всегда заполняются предопределенные аналитики бюджетирования (Показатель,Сценарий,Проект,Валюта,Период)
	
	ТаблицаДоступныеПоля.Очистить();
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Периоды'");
    нПоле.ТипСтрока = "СправочникСсылка.ШкалыПериодов";
	нПоле.Код = "Фильтр_Периоды";
	нПоле.ИндексКартинки = 0;
    нПоле.ГлобальнаяАналитика = Истина;
	нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Периоды;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Валюта представления'");
	нПоле.ТипСтрока = "СправочникСсылка.Валюты";
	нПоле.Код = "Фильтр_Валюты";
	нПоле.ИндексКартинки = 1;
    нПоле.ГлобальнаяАналитика = Истина;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Валюты;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Строки'");
	нПоле.ТипСтрока = "СправочникСсылка.СтрокиОтчетов";
	нПоле.Код = "Фильтр_Показатели";
	нПоле.ИндексКартинки = 5;
    нПоле.ГлобальнаяАналитика = Истина;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.ПоказателиСтроки;
    
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Показатели'");
	нПоле.ТипСтрока = "СправочникСсылка.ПоказателиОтчетов";
	нПоле.Код = "Фильтр_Показатели_Колонки";
	нПоле.ИндексКартинки = 2;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.ПоказателиКолонки;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Сценарии'");
	нПоле.ТипСтрока = "СправочникСсылка.Сценарии";
	нПоле.Код = "Фильтр_Сценарии";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Сценарии;

	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Орг. единицы'");
	нПоле.ТипСтрока = "СправочникСсылка.Организации";
	нПоле.Код = "Фильтр_Организации";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = НСтр("ru = 'Проекты'");
	нПоле.ТипСтрока = "СправочникСсылка.Проекты";
	нПоле.Код = "Фильтр_Проекты";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
	нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты;
	
    СписокАналитик = Новый СписокЗначений;
	
	ОбновитьКэшАналитикПоказателей(КэшАналитикПоказателей,Бланк,ВидОтчета,СписокАналитик,КэшАналитикПоказателейСТ,флОшибки);
	
	ОбновитьИспользуемыеПоказатели(ИспользуемыеПоказатели,Бланк,ВидОтчета);
	
	Для Каждого СтрАналитики ИЗ  СписокАналитик Цикл
		
		Если СтрАналитики.Значение = "ДопВалюты" Тогда
			
			нПоле = ТаблицаДоступныеПоля.Добавить();
			нПоле.Наименование = НСтр("ru = 'Дополнительные валюты'");
			нПоле.ТипСтрока = "СправочникСсылка.Валюты";
			нПоле.Код = "Фильтр_"+СокрЛП(СтрАналитики.Значение);
			нПоле.ТипСубконто = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты;
			нПоле.ИндексКартинки = 4;			
		Иначе	
			
			
			Если СтрАналитики.Значение.ТипЗначения.ПривестиЗначение() = Неопределено Тогда
				
				нПоле = ТаблицаДоступныеПоля.Добавить();
				нПоле.Наименование = СтрАналитики.Значение.Наименование;
				нПоле.ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(СтрАналитики.Значение.ТипЗначения.Типы()[0]).Имя;
				нПоле.Код = "Фильтр_"+СокрЛП(СтрАналитики.Значение.Код);
				нПоле.ТипСубконто = СтрАналитики.Значение;
				нПоле.ГлобальнаяАналитика = СтрАналитики.Пометка;
				Если ВидОтчета.РазделениеПоПроектам Тогда
					нПоле.ЭтоЭтапПроекта = СтрАналитики.Представление = "ЭтоЭтапПроекта";
				КонецЕсли;
				нПоле.ИндексКартинки = 4;	
				
			Иначе	
				
				ИмяОбъекта=СтрАналитики.Значение.ТипЗначения.ПривестиЗначение().Метаданные().ПолноеИмя();	
				
				Если СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
					
					нПоле = ТаблицаДоступныеПоля.Добавить();
					нПоле.Наименование = СтрАналитики.Значение.Наименование;
					нПоле.ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(СтрАналитики.Значение.ТипЗначения.Типы()[0]).Имя;
					нПоле.Код = "Фильтр_"+СокрЛП(СтрАналитики.Значение.Код);
					нПоле.ТипСубконто = СтрАналитики.Значение;
					нПоле.ГлобальнаяАналитика = СтрАналитики.Пометка;
					Если ВидОтчета.РазделениеПоПроектам Тогда
						нПоле.ЭтоЭтапПроекта = СтрАналитики.Представление = "ЭтоЭтапПроекта";
					КонецЕсли;
					нПоле.ИндексКартинки = 4;	
					
				Иначе   
					
					нПоле = ТаблицаДоступныеПоля.Добавить();
					нПоле.Наименование = СтрАналитики.Значение.Наименование;
					нПоле.ТипСтрока = "ПеречислениеСсылка."+Метаданные.НайтиПоТипу(СтрАналитики.Значение.ТипЗначения.Типы()[0]).Имя;
					нПоле.Код = "Фильтр_"+СокрЛП(СтрАналитики.Значение.Код);
					нПоле.ТипСубконто = СтрАналитики.Значение;
					нПоле.ГлобальнаяАналитика = СтрАналитики.Пометка;
					нПоле.ИндексКартинки = 4;	
					
				КонецЕСли;   
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
				
	ЗаполнитьНастройкиАналитик(Бланк,ТаблицаДоступныеПоля);	
	ЗаполнитьДоступныеАналитики(ДоступныеАналитики,ТаблицаДоступныеПоля,ВидОтчета,Бланк,КэшАналитикПоказателей);
		
КонецПроцедуры

Процедура ЗаполнитьНастройкиАналитик(Бланк,ТаблицаДоступныеПоля) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПараметровАналитик.Редактируется,
	               |	НастройкиПараметровАналитик.Представление,
	               |	НастройкиПараметровАналитик.Аналитика,
	               |	НастройкиПараметровАналитик.Сортировка,
	               |	НастройкиПараметровАналитик.ПоддерживатьИерархию
	               |ИЗ
	               |	РегистрСведений.НастройкиПараметровАналитик КАК НастройкиПараметровАналитик
	               |ГДЕ
	               |	НастройкиПараметровАналитик.Бланк = &Бланк";
	
	Запрос.УстановитьПараметр("Бланк",Бланк);
    НастройкиАналитикБланка = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Поле из ТаблицаДоступныеПоля Цикл
		тНастройка = НастройкиАналитикБланка.НайтиСтроки(Новый Структура("Аналитика",Поле.ТипСубконто)); 
		
		Если Лев(Поле.ТипСтрока,12) = "Перечисление" Тогда
			
			Если  тНастройка.Количество()=1 Тогда 
				Поле.Редактируется = тНастройка[0].Редактируется;	
			Иначе
				Поле.Редактируется = Истина;
			КонецЕсли;	
			
			Поле.Представление = "&Ссылка";
			Поле.Сортировка    = "Ссылка";
			
		Иначе	   
			
			Если  тНастройка.Количество()=1 Тогда
				Поле.Редактируется = тНастройка[0].Редактируется;
				Поле.Представление = тНастройка[0].Представление;
				Поле.Сортировка    = тНастройка[0].Сортировка;
				Поле.ИндексКартинки = ?(тНастройка[0].Редактируется,4,1);
				Поле.ПоддерживатьИерархию    = тНастройка[0].ПоддерживатьИерархию;	
			Иначе	   
				Если Поле.Код = "Фильтр_Периоды" ИЛИ  Поле.Код = "Фильтр_Сценарии" ИЛИ  Поле.Код = "Фильтр_Организации" 
					ИЛИ Поле.Код = "Фильтр_Показатели"  ИЛИ Поле.Код = "Фильтр_Проекты" ИЛИ  Поле.Код = "Фильтр_Валюты" Тогда 
					Поле.Редактируется = Ложь;
					Поле.Представление = "&Наименование";
					Поле.Сортировка    = "Наименование";   
				Иначе	   
					Поле.Редактируется = Истина;
					Поле.Представление = "&Наименование";
					Поле.Сортировка    = "Наименование";
				КонецЕсли;   
			КонецЕсли;	   
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьДоступныеПоляУправленияДоступностью(ТаблицаДоступныеПоля,ДоступныеАналитики) Экспорт
	
	ТаблицаДоступныеПоля.Очистить();
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = "Периоды";
    нПоле.ТипСтрока = "СправочникСсылка.Периоды";
	нПоле.Код = "Фильтр_Периоды";
	нПоле.ИндексКартинки = 0;
    нПоле.ГлобальнаяАналитика = Истина;
		
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = "Сценарии";
	нПоле.ТипСтрока = "СправочникСсылка.Сценарии";
	нПоле.Код = "Фильтр_Сценарии";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
		
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = "Организации";
	нПоле.ТипСтрока = "СправочникСсылка.Организации";
	нПоле.Код = "Фильтр_Организации";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
  	
	ДоступныеАналитики.Очистить();
	
	Для Каждого Аналитика ИЗ ТаблицаДоступныеПоля Цикл
		
		Если Аналитика.ИндексКартинки = 1 ИЛИ Аналитика.ИндексКартинки = 4 Тогда
			нСтрока =  ДоступныеАналитики.Добавить();
			нСтрока.ИмяАналитики = Аналитика.Наименование;
			нСтрока.КодАналитики = СтрЗаменить(Аналитика.Код,"Фильтр_","");
			нСтрока.ГлобальнаяАналитика = Аналитика.ГлобальнаяАналитика;
			нСтрока.НазначениеАналитики =  Аналитика.ТипСубконто;
			нСтрока.Редактируется =  Аналитика.Редактируется;
			
			Если Аналитика.ИндексКартинки = 1  И НЕ ТипЗнч(Аналитика.ТипСубконто)=Тип("ПеречислениеСсылка.ПредназначенияЭлементовАналитик") Тогда
				нСтрока.НазначениеАналитики =  Аналитика.ТипСубконто;
			ИначеЕсли нСтрока.ИмяАналитики = "Сценарии" Тогда	
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Сценарии;	
				нСтрока.НазначениеАналитикиКод =  нСтрока.ИмяАналитики;
			ИначеЕсли нСтрока.ИмяАналитики = "Валюты" Тогда	
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Валюты;	
				нСтрока.НазначениеАналитикиКод =  нСтрока.ИмяАналитики;
			ИначеЕсли нСтрока.ИмяАналитики = "Организации" Тогда
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Организации;
				нСтрока.НазначениеАналитикиКод =  нСтрока.ИмяАналитики;
			Иначе 		
				нСтрока.НазначениеАналитики =  Аналитика.ТипСубконто;
			КонецЕсли;
			
			нСтрока.Показывать = Истина;	
		КонецЕсли;
						
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьДоступныеПоляМатрицаПолномочий(ТаблицаДоступныеПоля) Экспорт
	
	ТаблицаДоступныеПоля.Очистить();
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = "Шаблоны";
    нПоле.ТипСтрока = "СправочникСсылка.Периоды";
	нПоле.Код = "Фильтр_ШаблонДокументаБД";
	нПоле.ИндексКартинки = 1;
    нПоле.ГлобальнаяАналитика = Истина;
		
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = "Проект";
	нПоле.ТипСтрока = "СправочникСсылка.Проекты";
	нПоле.Код = "Фильтр_Проект";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
	
	нПоле = ТаблицаДоступныеПоля.Добавить();
	нПоле.Наименование = "Организация";
	нПоле.ТипСтрока = "СправочникСсылка.Организации";
	нПоле.Код = "Фильтр_Организация";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
	  	
КонецПроцедуры

Процедура ОбновитьКэшАналитикПоказателей(КэшАналитикПоказателей,Бланк,ВидОтчета,СписокАналитик,КэшАналитикПоказателейСТ=Неопределено,флОшибки = "") Экспорт
	
	//Заполняются все аналитики всех групп раскрытия текущего вида отчета
	
	ТекстАналитикФинальный 		= "";
	ТекстКодовАналитикФинальный = "";
    ТекстАналитикГр 			= "";
	ТекстАналитикВо 			= "";
	ТекстАналитикГрКод          = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТекстАналитикФинальный = ТекстАналитикФинальный+"
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+"
		|		ИНАЧЕ ВложенныйЗапрос1.ВидАналитики"+Инд+"
		|	КОНЕЦ КАК ВидАналитики"+Инд+",";
		
		ТекстКодовАналитикФинальный = ТекстКодовАналитикФинальный+"
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+".Код
		|		ИНАЧЕ ВложенныйЗапрос1.ВидАналитики"+Инд+"Код
		|	КОНЕЦ КАК ВидАналитики"+Инд+"Код,";

		ТекстАналитикГр = ТекстАналитикГр+"
		|	ГруппыРаскрытия.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";

		ТекстАналитикГрКод = ТекстАналитикГрКод+"
		|	ГруппыРаскрытия.ВидАналитики"+Инд+".Код КАК ВидАналитики"+Инд+"Код,";

		ТекстАналитикВо = ТекстАналитикВо+"
		|	ВидыОтчетов.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";
		
	КонецЦикла;	 

	КэшАналитикПоказателей.Очистить();
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ "+ТекстАналитикФинальный+"
	               |	ВложенныйЗапрос.ПоказательОтчетаСсылка КАК Показатель,
	               |	ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия КАК ГруппаРаскрытия,"+ТекстКодовАналитикФинальный+"
	               |	ВложенныйЗапрос.СтрокаОтчета КАК Строка,
	               |	ВложенныйЗапрос1.ВидАналитикиВалютаДт КАК ВидАналитикиВалюта,
	               |	ВложенныйЗапрос1.ВидАналитикиВалютаДтКод КАК ВидАналитикиВалютаКод,
	               |	ВложенныйЗапрос1.АналитикаЭтапПроекта КАК АналитикаЭтапПроекта
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		НастройкиСтруктурыБланка.ПоказательОтчета.Ссылка КАК ПоказательОтчетаСсылка,
	               |		НастройкиСтруктурыБланка.СтрокаОтчета.ГруппаРаскрытия КАК ПоказательОтчетаГруппаРаскрытия,
	               |		НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета
	               |	ИЗ
	               |		Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |	ГДЕ
	               |		НастройкиСтруктурыБланка.Владелец = &Бланк
	               |		И НастройкиСтруктурыБланка.ИндексЭлемента = 2) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстАналитикГр+ТекстАналитикГрКод+"
	               |			ГруппыРаскрытия.Ссылка КАК Ссылка,
	               |			ГруппыРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиВалютаДт,
	               |			ГруппыРаскрытия.ВидАналитикиВалютаДт.Код КАК ВидАналитикиВалютаДтКод,
	               |			ГруппыРаскрытия.АналитикаЭтапПроекта КАК АналитикаЭтапПроекта
	               |		ИЗ
	               |			Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	               |		ГДЕ
	               |			ГруппыРаскрытия.Владелец В (&ВидОтчета)) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия = ВложенныйЗапрос1.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстАналитикВо+"
	               |			ВидыОтчетов.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ВидыОтчетов КАК ВидыОтчетов
	               |		ГДЕ
	               |			ВидыОтчетов.Ссылка В (&ВидОтчета)) КАК ВложенныйЗапрос2
	               |		ПО ВложенныйЗапрос.СтрокаОтчета.Владелец = ВложенныйЗапрос2.Ссылка";
	
	Запрос.УстановитьПараметр("Бланк",Бланк);
	Запрос.УстановитьПараметр("ВидОтчета",ПолучитьИспользуемыеВидыОтчетов(Бланк));
	
	Результат = Запрос.Выполнить().Выгрузить();
		
	Если Не КэшАналитикПоказателейСТ = Неопределено Тогда 
		КэшАналитикПоказателейСТ.Колонки.Добавить("ПоказательСтрока");
	Иначе 
		КэшАналитикПоказателейСТ = Новый ТаблицаЗначений;	
		КэшАналитикПоказателейСТ.Колонки.Добавить("ПоказательСтрока");	
	КонецЕсли;
	
	КэшАналитикПоказателейСТ.Колонки.Добавить("Проекты");
	КэшАналитикПоказателейСТ.Колонки.Добавить("Сценарии");
	КэшАналитикПоказателейСТ.Колонки.Добавить("Показатели");
    КэшАналитикПоказателейСТ.Колонки.Добавить("Организации");
    КэшАналитикПоказателейСТ.Колонки.Добавить("Валюты");
    КэшАналитикПоказателейСТ.Колонки.Добавить("Периоды");
    КэшАналитикПоказателейСТ.Колонки.Добавить("ДопВалюты");
	
	Для Каждого СтрАналитики Из Результат Цикл
		НстрКэш = КэшАналитикПоказателей.Добавить();
		НстрКэш.Показатель = СтрАналитики.Показатель;
		НстрКэш.Строка = СтрАналитики.Строка;
		НстрКэш.ГруппаРаскрытия = СтрАналитики.ГруппаРаскрытия;
		
		НстрКэшСТ = КэшАналитикПоказателейСТ.Добавить();
		НстрКэшСТ.ПоказательСтрока = СтрАналитики.Строка;		
		НстрКэшСТ.Сценарии = Истина;
		НстрКэшСТ.Организации = Истина;
        НстрКэшСТ.Проекты = Истина;
		НстрКэшСТ.Показатели = Истина;
		НстрКэшСТ.Валюты = Истина;
		НстрКэшСТ.Периоды = Истина;
        НстрКэшСТ["ДопВалюты"] = Ложь;
	
		Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если  СтрАналитики["ВидАналитики"+ИндАналитики] = Null ИЛИ СтрАналитики["ВидАналитики"+ИндАналитики] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяССылка() Тогда	
				Продолжить;
			Иначе	
				НстрКэш["Аналитика"+ИндАналитики] = СокрЛП(СтрАналитики["ВидАналитики"+ИндАналитики+"Код"]);
				НстрКэш["Аналитика"+ИндАналитики+"Представление"] = Метаданные.НайтиПоТипу(СтрАналитики["ВидАналитики"+ИндАналитики].ТипЗначения.Типы()[0]).Имя;
				
				Если  КэшАналитикПоказателейСТ.Колонки.Найти(СокрЛП(СтрАналитики["ВидАналитики"+ИндАналитики+"Код"])) = Неопределено Тогда
					
					Попытка 
						КэшАналитикПоказателейСТ.Колонки.Добавить( СокрЛП(СтрАналитики["ВидАналитики"+ИндАналитики+"Код"]),ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
					Исключение
						флОшибки = НСтр("ru = ' код группы аналитик %ВидАналитикиНаименование% (%ВидАналитикиКод%) содержит некорректные символы или начинается с цифры.'");
						флОшибки = СтрЗаменить(флОшибки, "%ВидАналитикиНаименование%", СокрЛП(Строка(СтрАналитики["ВидАналитики"+ИндАналитики])));
						флОшибки = СтрЗаменить(флОшибки, "%ВидАналитикиКод%", Строка(СтрАналитики["ВидАналитики"+ИндАналитики+"Код"]));
						Возврат;
					КонецПопытки;
					
				КонецЕсли;	 
			    НстрКэшСТ[СокрЛП(СтрАналитики["ВидАналитики"+ИндАналитики+"Код"])] = Истина;
					
			КонецЕсли;	
			Если   СписокАналитик.НайтиПоЗначению(СтрАналитики["ВидАналитики"+ИндАналитики])= Неопределено Тогда
				ТекАналитика = СписокАналитик.Добавить(СтрАналитики["ВидАналитики"+ИндАналитики]);	
				Если СтрАналитики.АналитикаЭтапПроекта = ИндАналитики Тогда
					ТекАналитика.Представление = "ЭтоЭтапПроекта";
				КонецЕсли;			
			КонецЕсли;		
		КонецЦикла;	
		
		Если ЗначениеЗАполнено(СтрАналитики.ВидАналитикиВалюта) Тогда
			НстрКэш["АналитикаВалюта"] = СокрЛП(СтрАналитики["ВидАналитикиВалютаКод"]);
			НстрКэш["АналитикаВалютаПредставление"] = Метаданные.НайтиПоТипу(СтрАналитики["ВидАналитикиВалюта"].ТипЗначения.Типы()[0]).Имя;	
			НстрКэшСТ["ДопВалюты"] = Истина;
			Если   СписокАналитик.НайтиПоЗначению("ДопВалюты")= Неопределено Тогда
				СписокАналитик.Добавить("ДопВалюты");	
			КонецЕсли;	 
		КонецЕсли;	
		
	КонецЦикла;
	
	//Установим признак глобальной (общей для всех выбранных строк) аналитики
	Для Каждого Аналитика Из СписокАналитик Цикл
		Если Аналитика.Значение = "ДопВалюты" Тогда
			 Продолжить;
		КонецЕсли;
		Количество = КэшАналитикПоказателейСТ.НайтиСтроки(Новый Структура(Аналитика.Значение.Код,Истина)).Количество();
		Если Количество =  КэшАналитикПоказателейСТ.Количество() Тогда
			 Аналитика.Пометка = Истина;
		КонецЕсли;	
	КонецЦикла;	
		
	
КонецПроцедуры

Процедура ОбновитьИспользуемыеПоказатели(ИспользуемыеПоказатели,Бланк,ВидОтчета) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
	               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета
	               |ПОМЕСТИТЬ втСтроки
	               |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.ИндексЭлемента = 2
	               |	И НастройкиСтруктурыБланка.Владелец = &Бланк
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка КАК Ссылка,
	               |	НастройкиСтруктурыБланкаКолонкиОтчетов.Колонка КАК КолонкаОтчета
	               |ПОМЕСТИТЬ втКолонки
	               |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка.КолонкиОтчетов КАК НастройкиСтруктурыБланкаКолонкиОтчетов
	               |ГДЕ
	               |	НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка.ИндексЭлемента = 10
	               |	И НастройкиСтруктурыБланкаКолонкиОтчетов.Ссылка.Владелец = &Бланк
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Показатель,
	               |	ПоказателиОтчетов.Наименование КАК Наименование,
	               |	ПоказателиОтчетов.Колонка КАК Колонка,
	               |	ПоказателиОтчетов.Строка КАК Строка,
	               |	ПоказателиОтчетов.Код КАК Код,
	               |	ПоказателиОтчетов.Колонка.Код КАК КолонкаКод,
	               |	ПоказателиОтчетов.Строка.Код КАК СтрокаКод,
	               |	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
	               |	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
	               |	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
	               |	ПоказателиОтчетов.Владелец.Код КАК ВидОтчетаКод,
	               |	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число)
	               |						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Сумма)
	               |					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Минимум)
	               |				КОНЕЦ
	               |		ИНАЧЕ ПоказателиОтчетов.ВидИтога
	               |	КОНЕЦ КАК ВидИтога,
	               |	ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду КАК СпособРасчетаИтогаПоПериоду
	               |ПОМЕСТИТЬ втПоказатели
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтроки КАК втСтроки
	               |		ПО ПоказателиОтчетов.Строка = втСтроки.СтрокаОтчета
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКолонки КАК втКолонки
	               |		ПО ПоказателиОтчетов.Колонка = втКолонки.КолонкаОтчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втПоказатели.Показатель КАК Показатель,
	               |	втПоказатели.Наименование КАК Наименование,
	               |	втПоказатели.Колонка КАК Колонка,
	               |	втПоказатели.Строка КАК Строка,
	               |	втПоказатели.Код КАК Код,
	               |	втПоказатели.КолонкаКод КАК КолонкаКод,
	               |	втПоказатели.СтрокаКод КАК СтрокаКод,
	               |	втПоказатели.НеМасштабируется КАК НеМасштабируется,
	               |	втПоказатели.НеФинансовый КАК НеФинансовый,
	               |	втПоказатели.ТипЗначения КАК ТипЗначения,
	               |	втПоказатели.ВидОтчетаКод КАК ВидОтчетаКод,
	               |	втПоказатели.ВидОтчета КАК ВидОтчета,
	               |	втПоказатели.ВидИтога КАК ВидИтога,
	               |	втПоказатели.СпособРасчетаИтогаПоПериоду КАК СпособРасчетаИтогаПоПериоду,
	               |	ВЫБОР КОГДА ПроцедурыРасчетов.РедактированиеВозможно IS NULL ТОГДА ИСТИНА ИНАЧЕ ПроцедурыРасчетов.РедактированиеВозможно КОНЕЦ КАК РедактированиеВозможно
	               |ИЗ
	               |	втПоказатели КАК втПоказатели
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	               |		ПО втПоказатели.Показатель = ПроцедурыРасчетов.ПотребительРасчета
	               |			И (ПроцедурыРасчетов.НазначениеРасчетов = &ПравилоРасчета)";               
	
	
	ТекущееПравилоОбработки = Неопределено;
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);	
	СоответствиеНастроек.Свойство("ПравилоОбработки", ТекущееПравилоОбработки);

	Запрос.УстановитьПараметр("Бланк",Бланк);
	Запрос.УстановитьПараметр("ПравилоРасчета",ТекущееПравилоОбработки);
	
	ИспользуемыеПоказатели = Запрос.Выполнить().Выгрузить();                                                                         
	ИспользуемыеПоказатели.Колонки.Добавить("КолонкаФорматированныйКод",Новый ОписаниеТипов("Строка"));
	
	Для Каждого СтрПок Из ИспользуемыеПоказатели Цикл
		Если СтрПок.ВидОтчета = ВидОтчета Тогда
			СтрПок.КолонкаФорматированныйКод = СокрЛП(СтрПок.КолонкаКод);
		Иначе
			СтрПок.КолонкаФорматированныйКод = СокрЛП(СтрПок.ВидОтчетаКод)+"_"+СокрЛП(СтрПок.КолонкаКод);
		КонецЕсли;		
	КонецЦикла;	
	
КонецПроцедуры

	
#Область ПроцедурыФормированияПустогоБланка

Функция ПолучитьСоставСтрок(Бланк,ТаблицаСтроки,ТаблицаКолонки,ТаблицаСтраницы,ТаблицаКолонкиИСтроки,ДоступныеАналитики,КэшАналитикПоказателей) Экспорт
		
	ТаблицаКолонкиИСтроки.Очистить();	
	
	///////////////////////////////////////////////////////////////////////
	//Собираем все выводимые аналитики
	Для Каждого СтрокаАналитики ИЗ ТаблицаСтроки Цикл		 
		Если СтрокаАналитики.Код = "Фильтр_Периоды" ИЛИ СтрокаАналитики.Код = "Фильтр_Показатели" Тогда
			Продолжить;		 
		КонецЕсли; 
		нКС = ТаблицаКолонкиИСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нКС,СтрокаАналитики);
		нКС.Код = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");		
		нКС.Размещение = "С";
	КонецЦикла;	 
	
	Для Каждого СтрокаАналитики ИЗ ТаблицаКолонки Цикл
		Если СтрокаАналитики.Код = "Фильтр_Периоды" ИЛИ СтрокаАналитики.Код = "Фильтр_Показатели" Тогда
			Продолжить;		 
		КонецЕсли;
		нКС = ТаблицаКолонкиИСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нКС,СтрокаАналитики);
		нКС.Код = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		нКС.Размещение = "К";
	КонецЦикла;	
	
	Для Каждого СтрокаАналитики ИЗ ТаблицаСтраницы Цикл
		Если СтрокаАналитики.Код = "Фильтр_Периоды" ИЛИ СтрокаАналитики.Код = "Фильтр_Показатели" Тогда
			Продолжить;		 
		КонецЕсли;
		нКС = ТаблицаКолонкиИСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нКС,СтрокаАналитики);
		нКС.Код = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		нКС.Размещение = "О";
	КонецЦикла;	
	
	ТаблицаКолонкиИСтроки.Сортировать("ГлобальнаяАналитика УБЫВ");
	
	//Состав показателей и периодов заполняем всегда
	//
	ТЗПоказателей = ЗаполнитьСтрокиПоОтбору(Бланк,ТаблицаКолонкиИСтроки,КэшАналитикПоказателей,ДоступныеАналитики);
	
	Если ТЗПоказателей.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТЗПоказателей;
	 
КонецФункции

Функция ПолучитьНастройкиШкалыПериодовПоУмолчанию(Бланк) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиМасштабаВремени.КлючПериода КАК КлючПериода,
	               |	НастройкиМасштабаВремени.Масштаб КАК Масштаб,
	               |	НастройкиМасштабаВремени.КлючПериода.НачалоПериода КАК НачалоПериода,
	               |	НастройкиМасштабаВремени.КлючПериода.КонецПериода КАК КонецПериода,
	               |	НастройкиМасштабаВремени.КлючПериода.Ссылка КАК Ссылка,
	               |	НастройкиМасштабаВремени.ДетализацияДни КАК ДетализацияДни,
	               |	НастройкиМасштабаВремени.ДетализацияМесяцы КАК ДетализацияМесяцы,
	               |	НастройкиМасштабаВремени.ДетализацияКварталы КАК ДетализацияКварталы,
	               |	НастройкиМасштабаВремени.ДетализацияПолугодия КАК ДетализацияПолугодия,
	               |	НастройкиМасштабаВремени.ДетализацияГоды КАК ДетализацияГоды,
	               |	НастройкиМасштабаВремени.НарастающийИтог КАК НарастающийИтог
	               |ИЗ
	               |	РегистрСведений.НастройкиМасштабаВремени КАК НастройкиМасштабаВремени
	               |ГДЕ
	               |	НастройкиМасштабаВремени.Бланк = &Бланк";
	
	Запрос.УстановитьПараметр("Бланк",Бланк);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Функция ПолучитьШкалуПериодов(Бланк,ОтображатьТолькоИтогиПоПериодам,ДатаНачала,ДатаОкончания,Периодичность=Неопределено,НастройкиШкалыПериодов) Экспорт
	
	Если ЗначениеЗаполнено(Бланк) Тогда	
		Если НастройкиШкалыПериодов.Количество() = 0 ТОгда
			Возврат Неопределено;
		КонецЕсли;
		
		Выборка 			= НастройкиШкалыПериодов[0];	
		КлючПериода 		= Выборка.КлючПериода;
		Периодичность 		= КлючПериода.Периодичность;

		Если Периодичность = Перечисления.Периодичность.Месяц Тогда	
			ОтображатьТолькоИтогиПоПериодам = НЕ Выборка.ДетализацияМесяцы;	
		ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда		
			ОтображатьТолькоИтогиПоПериодам = НЕ Выборка.ДетализацияКварталы;	
		ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда		
			ОтображатьТолькоИтогиПоПериодам = НЕ Выборка.ДетализацияДни;	
		КонецЕсли;	
							
		//Заполнить шкалу недостающими периодами
		Если ДатаНачала<Выборка.НачалоПериода ИЛИ ДатаОкончания>Выборка.КонецПериода Тогда
			Справочники.КлючиШКалы.ЗаполнитьПериоды(КлючПериода,ДатаНачала,ДатаОкончания);
			КлючПериодаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			КлючПериодаОбъект.НачалоПериода =ДатаНачала;
			КлючПериодаОбъект.КонецПериода = ДатаОкончания;	 
			КлючПериодаОбъект.Записать();
		КонецЕсли;				
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШкалыПериодов.Ссылка КАК Периоды,
	|	ШкалыПериодов.СвязанныйПериод КАК ПериодыСвязанныйПериод 
	|ИЗ
	|	Справочник.ШкалыПериодов КАК ШкалыПериодов
	|ГДЕ
	|	ШкалыПериодов.Владелец = &Владелец
	|	И ШкалыПериодов.ДатаНачала >= &ДатаНачала 
	|	И ШкалыПериодов.ДатаНачала <= &ДатаОкончания
	|	И ШкалыПериодов.Периодичность = &Периодичность";
	
	Запрос.УстановитьПараметр("Владелец",КлючПериода);
	Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
    Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность",Периодичность);

    Возврат Запрос.Выполнить().Выгрузить();
				
КонецФункции

Функция ОтобратьДанныеПоСтруктуреФильтров(ТзСтрок,СтруктураФильтровИтог) Экспорт;
	
	   Запрос = Новый Запрос;
	   Запрос.Текст = "ВЫБРАТЬ
	                  |	*
	                  |ПОМЕСТИТЬ ТзСтрок
	                  |ИЗ
	                  |	&ТзСтрок КАК ТзСтрок;
					  |/////////////////////
					  | ВЫБРАТЬ * ИЗ ТзСтрок ";
	   	   
					  
		 Запрос.Текст =   Запрос.Текст +" ГДЕ "; 			  
					  
		Для Каждого СтрФильтр Из СтруктураФильтровИтог Цикл
		   
		   Если СтрФильтр.Ключ = "Фильтр_Валюты" Тогда
			   Продолжить;
		   КонецЕсли;
			
		   Если СтрНайти(СтрФильтр.Ключ,"Фильтр_")=0 Тогда
			   Продолжить;
		   КонецЕсли;	   
		    		   
		   Если СтрФильтр.Ключ = "Фильтр_Показатели" Тогда
			   Запрос.Текст =   Запрос.Текст +"
			   |  ТзСтрок.ПоказателиСтрокаОтчета"+" В(&"+СтрФильтр.Ключ+") И ";	      
		   Иначе	   	   
			   Запрос.Текст =   Запрос.Текст +"
			   |  ТзСтрок."+СтрЗаменить(СтрФильтр.Ключ,"Фильтр_","")+" В(&"+СтрФильтр.Ключ+") И ";	   
		   КонецЕсли;
		     
		   СтруктураФильтровИтогСп = Новый СписокЗначений;
		   СтруктураФильтровИтогСп.Добавить(Неопределено);
		   СтруктураФильтровИтогСп.Добавить(СтрФильтр.Значение);
		   
		   Запрос.УстановитьПараметр(СтрФильтр.Ключ,СтруктураФильтровИтогСп);
		   
	   КонецЦикла;	   
	    
	   Запрос.Текст = Лев(Запрос.Текст,СтрДлина(Запрос.Текст)-2);   
	   Запрос.УстановитьПараметр("ТзСтрок",ТзСтрок);
	   Результат = Запрос.Выполнить().Выгрузить();
	  	   
	   Возврат Результат;
	
КонецФункции

Функция ЗаполнитьСтрокиПоОтбору(Бланк,ТаблицаКолонкиИСтроки,КэшАналитикПоказателей,ДоступныеАналитики)
	
	Запрос =  СоздатьТекстЗапросаНастроекСоставаАналитик(ДоступныеАналитики,Бланк);
	РезультатОтборыСоставаАналитики = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	РезультатГлобальныеОтборы = РезультатОтборыСоставаАналитики.Строки[0].Строки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСоставаАналитикиБланков.Показатель,
	               |	НастройкиСоставаАналитикиБланков.НомерНастройки,
	               |	НастройкиСоставаАналитикиБланков.Назначение,
	               |	НастройкиСоставаАналитикиБланков.ЗначениеНастройки,
	               |	НастройкиСоставаАналитикиБланков.Показатель.СтрокаОтчета КАК СтрокаОтчета
	               |ИЗ
	               |	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	               |ГДЕ
	               |	НастройкиСоставаАналитикиБланков.БланкОтчета = &Бланк";

	Запрос.УстановитьПараметр("Бланк",Бланк);			   
	ЗначенияОтборов = Запрос.Выполнить().Выгрузить();
			 
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Бланк);
	
	//1.собираем показатели, у которых нет индивидуальных отборов 
		
	ПоказателиБезОтборов = РезультатОтборыСоставаАналитики.Строки.НайтиСтроки(Новый Структура("Назначение",NULL));
	ПоказателиБезОтборовМассив = Новый Массив;
	Для Каждого Пок Из ПоказателиБезОтборов Цикл
		      ПоказателиБезОтборовМассив.Добавить(Пок.Ссылка);
	КонецЦикла;	
	
	ИдПоказателей  = Новый УникальныйИдентификатор();
	Запрос.УстановитьПараметр("Показатели_"+СтрЗаменить(Строка(ИдПоказателей),"-",""),ПоказателиБезОтборовМассив);
	
	//2. собираем индивидуальные отборы показателей
	ПоказателиСОтбором = ЗначенияОтборов.Скопировать();
	ПоказателиСОтбором.Удалить(0);
	ПоказателиСОтбором.Свернуть("Показатель,СтрокаОтчета");
	Если ПоказателиСОтбором.Количество() > 0 Тогда
		ТекстЗапросаИндОтборы = "";
		Для Каждого СтрПоказательОтбор Из ПоказателиСОтбором Цикл
			
			Если СтрПоказательОтбор.Показатель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка()  Тогда  //Это глобальный отбор
				Продолжить;
			КонецЕсли;
			
			РезультатИндОтборы = РезультатОтборыСоставаАналитики.Строки.Найти(СтрПоказательОтбор.Показатель,"Ссылка");
			
			Если РезультатИндОтборы = Неопределено Тогда
				 Продолжить;
			КонецЕсли;	
	
			ИдПоказателей  = Новый УникальныйИдентификатор();
			ТекстЗапросаИндОтборы = ТекстЗапросаИндОтборы+
			ПолучитьТекстЗапросаПоИндивидуальнымОтборам(Запрос,РезультатИндОтборы,СтрПоказательОтбор,ТаблицаКолонкиИСтроки,ДоступныеАналитики,ЗначенияОтборов,КэшАналитикПоказателей,ИдПоказателей);
			Запрос.УстановитьПараметр("Показатели_"+СтрЗаменить(Строка(ИдПоказателей),"-",""),СтрПоказательОтбор.Показатель);
		КонецЦикла;	
		
		ТекстЗапросаИндОтборы =  ПРАВ(ТекстЗапросаИндОтборы,СтрДлина(ТекстЗапросаИндОтборы)-16);
		
		Если СтрНайти(СокрЛП(ТекстЗапросаИндОтборы), "ВЫБРАТЬ") <> 0 Тогда
			СхемаЗапроса = Новый СхемаЗапроса;
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаИндОтборы);
			Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
			СформироватьТекстТипизирующейСтроки(Запрос,ТаблицаКолонкиИСтроки,ДоступныеАналитики);
			
			ТЗ = Запрос.Выполнить().Выгрузить();
			Если ТЗ.Количество()>0 Тогда
				ТЗ.Удалить(ТЗ[ТЗ.Количество()-1]);
			КонецЕсли;	
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить значения отбора. Заполнение строк отменено.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ТЗ = Новый ТаблицаЗначений();
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заданы показатели для отбора. Заполнение строк отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ТЗ = Новый ТаблицаЗначений();
	КонецЕсли;
	Возврат ТЗ;
		
КонецФункции

Функция ПолучитьТекстЗапросаПоИндивидуальнымОтборам(Запрос,РезультатИндОтборы,СтрПоказательОтбор,ТаблицаКолонкиИСтроки,ДоступныеАналитики,ЗначенияОтборов,КэшАналитикПоказателей,ИдПоказателей)
	
	ТекстЗапроса = "";
	
	Для Каждого ГлОтбор Из РезультатИндОтборы.Строки Цикл
		
	    ТекстЗапроса = ТекстЗапроса+"
		           |ОБЪЕДИНИТЬ ВСЕ
		  		   |ВЫБРАТЬ
				   |    #ТекстПолейАналитик
				   |	НастройкиСтруктурыБланка.Ссылка КАК Показатели,
	               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК ПоказателиСтрокаОтчета
				   |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка";

	   
	    СписокПредставленийАналитик = Новый СписокЗначений;
				   
				   
		Для Каждого Аналитика Из ТаблицаКолонкиИСтроки Цикл
		     
		   НужнаяАналитикаПредставление = ДоступныеАналитики.НайтиСтроки(Новый Структура("НазначениеАналитикиКод",Аналитика.Код));
		   
		   Если НужнаяАналитикаПредставление.Количество()=0 Тогда
			    Продолжить;
		   КонецЕсли;	   
		    
		   ТекПоказательКэш = КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СтрПоказательОтбор.СтрокаОтчета))[0];
		   
		   ЕстьТакаяАналитика = Истина;
		   Если Не Аналитика.ГлобальнаяАналитика Тогда
			   ЕстьТакаяАналитика = Ложь;
			   Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
				   Если  ТекПоказательКэш["Аналитика"+Инд] = Аналитика.Код Тогда
					   ЕстьТакаяАналитика = Истина;
				   КонецЕсли;	
			   КонецЦикла;
			   Если Аналитика.Код = "ДопВалюты" Тогда
				   Если ЗначениеЗаполнено(ТекПоказательКэш.АналитикаВалюта) Тогда
					   ЕстьТакаяАналитика = Истина;
				   КонецЕсли;	
			   КонецЕсли;	
		   КонецЕсли;	
 
		   Если НЕ ЕстьТакаяАналитика Тогда
			   СтрокаСоединения = ДобавитьСтрокуСоединенияСАналитикой(Запрос,Аналитика, "Не заполнять","",СписокПредставленийАналитик,ИдПоказателей);
			   ТекстЗапроса = ТекстЗапроса+ СтрокаСоединения;
			   Продолжить;
		   КонецЕсли;	   
		   		  
		   ЗначениеОтбораСтрока = ЗначенияОтборов.НайтиСтроки(Новый Структура("Назначение,НомерНастройки",НужнаяАналитикаПредставление[0].НазначениеАналитики,ГлОтбор.НомерНастройки)); 
		   
		   СтрокаСоединения = ДобавитьСтрокуСоединенияСАналитикой(Запрос,Аналитика,ГлОтбор[НужнаяАналитикаПредставление[0].ПредставлениеАналитики],ЗначениеОтбораСтрока,СписокПредставленийАналитик,ИдПоказателей);
		   
		   ТекстЗапроса = ТекстЗапроса+ СтрокаСоединения;
			      
	   КонецЦикла;
	   
	   ТекстПолей = "";
	   Для Каждого Стр Из СписокПредставленийАналитик Цикл
		   ТекстПолей = ТекстПолей+"
		   |"+Стр.Значение+",";
	   КонецЦикла;
	   
	  ТекстЗапроса =  СтрЗаменить(ТекстЗапроса,"#ТекстПолейАналитик",ТекстПолей);
	  
	  ТекстУсловия = "
	   | ГДЕ
	   |	НастройкиСтруктурыБланка.Владелец = &Владелец
	   |	И НастройкиСтруктурыБланка.Ссылка В (&Показатели_"+СтрЗаменить(Строка(ИдПоказателей),"-","")+")
	   |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2";
	   
	  ТекстЗапроса = ТекстЗапроса+ТекстУсловия;
 	  
  КонецЦикла;	
		
  Возврат ТекстЗапроса; 

		
КонецФункции

Функция ДобавитьСтрокуСоединенияСАналитикой(Запрос,Аналитика,СтрокаОтбора,ЗначениеОтбораСтрока,СписокПредставленийАналитик,ИдПоказателей)
	
	Если Аналитика.Размещение = "О" И  (СтрокаОтбора = "Все элементы"  ИЛИ  СтрокаОтбора=NULL) Тогда	
		СписокПредставленийАналитик.Добавить(" НЕОПРЕДЕЛЕНО КАК "+Аналитика.Код);
		Возврат "";	
	ИначеЕсли  СтрокаОтбора="Синхронизировать по функц. направлениям" Тогда 	 	
		СписокПредставленийАналитик.Добавить(" Аналитика_"+Аналитика.Код+".Ссылка КАК "+Аналитика.Код);
		ТекстЗапроса = "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+СформироватьТекстЗапросаПоФункцНаправлениям(Запрос,Аналитика,ЗначениеОтбораСтрока);		
	ИначеЕсли  СтрокаОтбора="Не заполнять" Тогда 	 	
		СписокПредставленийАналитик.Добавить(" NULL КАК "+Аналитика.Код);
		Возврат "";	
	ИначеЕсли Аналитика.Редактируется  Тогда		
		СписокПредставленийАналитик.Добавить(" НЕОПРЕДЕЛЕНО КАК "+Аналитика.Код);
		Возврат "";	
	ИначеЕсли  СтрокаОтбора="Все элементы" ИЛИ СтрокаОтбора=NULL Тогда 	 	 
		СписокПредставленийАналитик.Добавить(" Аналитика_"+Аналитика.Код+".Ссылка КАК "+Аналитика.Код);
		ТекстЗапроса = "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+СформироватьТекстЗапросаПоАналитике(Запрос,Аналитика,ЗначениеОтбораСтрока,ИдПоказателей);	 
	Иначе  	 	 
		СписокПредставленийАналитик.Добавить(" Аналитика_"+Аналитика.Код+".Ссылка КАК "+Аналитика.Код);
		ТекстЗапроса = "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+СформироватьТекстЗапросаПоАналитике(Запрос,Аналитика,ЗначениеОтбораСтрока,ИдПоказателей);
	КонецЕсли;	
	
	Возврат ТекстЗапроса;
		
КонецФункции	

Функция СформироватьТекстЗапросаПоАналитике(Запрос,Аналитика,ЗначениеОтбораСтрока,ИдПоказателей) Экспорт 
	
	
	ТекстЗАпроса = "";
	ИмяТаблицы = СтрЗАменить(Аналитика.ТипСтрока,"Ссылка","");
	Пл =         Аналитика.Код;
	
	ТекстУсловия = "";
	ТекстЗАпроса=ТекстЗАпроса+ИмяТаблицы;
    ТекстЗАпроса=ТекстЗАпроса+" КАК Аналитика_"+Пл;
	Если НЕ ЗначениеОтбораСтрока.Количество() =0 Тогда	
		ТекстУсловия = ТекстУсловия+СформироватьТекстЗапросаПоУсловию(Запрос,Аналитика,ЗначениеОтбораСтрока[0]);
	КонецЕсли;
	
	Если ИмяТаблицы = "Справочник.Периоды" Тогда
		ТекстЗАпроса=
		"ВЫБРАТЬ
		|	ТекущийСправочник.СвязанныйПериод КАК СвязанныйПериод,
		|	ТекущийСправочник.Ссылка КАК "+Пл;
		ТекстЗАпроса=ТекстЗАпроса+" ИЗ ";
		ТекстЗАпроса=ТекстЗАпроса+ИмяТаблицы;
		ТекстЗАпроса=ТекстЗАпроса+" КАК ТекущийСправочник";	
		ТекстЗАпроса=ТекстЗАпроса+" Упорядочить ПО ТекущийСправочник.ДатаНачала";
		
	ИначеЕсли ИмяТаблицы = "Справочник.Проекты" И Аналитика.ЭтоЭтапПроекта Тогда	  
		
		Если ЗначениеЗАполнено(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия+"
			|И Аналитика_"+Аналитика.Код+".Проект = Ложь";
		Иначе
			ТекстУсловия = ТекстУсловия+"
			|Аналитика_"+Аналитика.Код+".Проект = Ложь";
		КонецЕсли;
		
	ИначеЕсли ИмяТаблицы = "Справочник.Проекты" И НЕ Аналитика.ЭтоЭтапПроекта И Аналитика.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты Тогда	
		
		Если ЗначениеЗАполнено(ТекстУсловия) Тогда
			ТекстУсловия = ТекстУсловия+"
			|И Аналитика_"+Аналитика.Код+".Проект = Истина";
		Иначе
			ТекстУсловия = ТекстУсловия+"
			|Аналитика_"+Аналитика.Код+".Проект = Истина";
		КонецЕсли;	
	КонецЕсли;
	
	Если НЕ ТекстУсловия = "" Тогда
		ТекстЗАпроса=ТекстЗАпроса+" 
		|ПО "+ТекстУсловия;	
	ИНАЧЕ	
		ТекстЗАпроса=ТекстЗАпроса+" 
		|ПО ИСТИНА";
	КонецЕсли;
	
	Возврат ТекстЗАпроса;

КонецФункции

Функция СформироватьТекстЗапросаПоУсловию(Запрос,Аналитика,ЗначениеОтбораСтрока) Экспорт
	
	ПреобразованныйОтбор = "";
	
	Если ЗначениеОтбораСтрока.ЗначениеНастройки = "Все элементы" Тогда
		 Возврат ПреобразованныйОтбор;
	КонецЕсли;
	Если СтрНайти(ЗначениеОтбораСтрока.ЗначениеНастройки,"#")=0 Тогда
		 Возврат ПреобразованныйОтбор;
	КонецЕсли;
			
    ЗначениеОтбораСКД =  ЗначениеИзСтрокиВнутр(ЗначениеОтбораСтрока.ЗначениеНастройки);
	
	Для Каждого Стр Из ЗначениеОтбораСКД.Элементы Цикл
	
		Если НЕ Стр.Использование Тогда
			 Продолжить;
		КонецЕсли;	
		
		Оператор = ПолучитьОператорОтбора(Стр.ВидСравнения);
		ЗакрывающийЗнак = "";
		
		Если СтрНайти(Оператор,"(")>0 Тогда
			 ЗакрывающийЗнак = ")";
		КонецЕсли;	
		
		ИмяПараметра = Аналитика.Код+"_"+СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","");
		ПозицияТочки = СтрНайти(Стр.ЛевоеЗначение,"."); 
		Если ПозицияТочки>0 Тогда
			ВыражениеПослеточки = Прав(Стр.ЛевоеЗначение,СтрДлина(Стр.ЛевоеЗначение)-(ПозицияТочки-1));
			ИмяПоля = "Аналитика_"+Аналитика.Код+ВыражениеПослеточки;
			
		Иначе
			ИмяПоля = "Аналитика_"+Аналитика.Код+".Ссылка";
		КонецЕсли;

		ПреобразованныйОтбор = ПреобразованныйОтбор+"		
		|"+ИмяПоля+" "+ПолучитьОператорОтбора(Стр.ВидСравнения)+" &"+ИмяПараметра+ЗакрывающийЗнак+" И ";
		
		Запрос.УстановитьПараметр(ИмяПараметра,Стр.ПравоеЗначение);
		
	КонецЦикла;
	
	ПреобразованныйОтбор = Лев(ПреобразованныйОтбор,СтрДлина(ПреобразованныйОтбор)-2);
	
	Возврат ПреобразованныйОтбор;
		
КонецФункции

Функция СформироватьТекстЗапросаПоФункцНаправлениям(Запрос,Аналитика,ЗначениеОтбораСтрока) Экспорт
	
	ТекстЗАпроса = "СПРАВОЧНИК.ОРГАНИЗАЦИИ КАК Аналитика_Организации 
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|	РегистрСведений.ФункциональныеНаправленияРазвернутые КАК ФункциональныеНаправленияРазвернутые
	|ПО ФункциональныеНаправленияРазвернутые.ФН_Предок = Аналитика_Организации.ФункциональноеНаправление
	|ПО ВЫБОР КОГДА Аналитика_Организации.ФункциональноеНаправление = Значение(Справочник.ФункциональныеНаправления.ПустаяССылка) 
	|	ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДвиженияДенежныхСредств.ФункциональноеНаправление = Значение(Справочник.ФункциональныеНаправления.ПустаяССылка)  
	|	ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДоходовИРасходов.ФункциональноеНаправление = Значение(Справочник.ФункциональныеНаправления.ПустаяССылка)  
	|	ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДвиженияРесурсов.ФункциональноеНаправление = Значение(Справочник.ФункциональныеНаправления.ПустаяССылка) 
	|	ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДвиженияДенежныхСредств = Значение(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяССылка)
	|	ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДоходовИРасходов = Значение(Справочник.СтатьиДоходовИРасходов.ПустаяССылка)
	|	ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДвиженияРесурсов = Значение(Справочник.СтатьиДвиженияРесурсов.ПустаяССылка)
	|ТОГДА ИСТИНА 
	|ИНАЧЕ 
	|	НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДвиженияДенежныхСредств.ФункциональноеНаправление = ФункциональныеНаправленияРазвернутые.ФН_Элемент 
    |ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДоходовИРасходов.ФункциональноеНаправление = ФункциональныеНаправленияРазвернутые.ФН_Элемент	
	|ИЛИ НастройкиСтруктурыБланка.СтрокаОтчета.СтатьяДвиженияРесурсов.ФункциональноеНаправление = ФункциональныеНаправленияРазвернутые.ФН_Элемент
	|КОНЕЦ	 
	|";
	Возврат ТекстЗАпроса;
		
КонецФункции

Функция ПолучитьОператорОтбора(ОператорСКД)

	СтрокаОператора = "";
	Если ОператорСКД = ВидСравненияКомпоновкиДанных.Равно Тогда
		
		 СтрокаОператора = "=";
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеРавно Тогда	 
		
		 СтрокаОператора = "<>";
		
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.Больше Тогда	 
		
		 СтрокаОператора = ">";
	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда	 
		
		 СтрокаОператора = ">=";
	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.ВИерархии Тогда	 
		
		 СтрокаОператора = "В Иерархии(";
	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.ВСписке Тогда	 
		
		 СтрокаОператора = "В (";	 
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеВСписке Тогда	 
		
		 СтрокаОператора = "НЕ В (";	 	 
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда	 
		
		 СтрокаОператора = "В Иерархии(";		 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.Заполнено Тогда	 
		
		 СтрокаОператора = "<>";	 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.Меньше Тогда	 
		
		 СтрокаОператора = "< ";		 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда	 
		
		 СтрокаОператора = "<= ";		 
		 
	 ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда	 
		
		 СтрокаОператора = "<= ";	 
		 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда	 
		
		СтрокаОператора = "НЕ В Иерархии(";
	 	 
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда	 
		
		СтрокаОператора = "НЕ В Иерархии(";	
		
	ИначеЕсли ОператорСКД = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда	 
		
		 СтрокаОператора = "=";	
		
	КонецЕсли;	
	
	Возврат СтрокаОператора;
	
КонецФункции

Процедура СформироватьТекстТипизирующейСтроки(Запрос,ТаблицаКолонкиИСтроки,ДоступныеАналитики)
	
	ТекстЗапроса = "
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ   #ТекстПолейАналитик
	|	&ПустойПоказатель КАК Показатели,
	|	&ПустаяСтрока КАК ПоказателиСтрокаОтчета";
	
	ТекстАналитики = "";			   
	
	Для Каждого Аналитика Из ТаблицаКолонкиИСтроки Цикл
		
		НужнаяАналитикаПредставление = ДоступныеАналитики.НайтиСтроки(Новый Структура("НазначениеАналитикиКод",Аналитика.Код));
		Если НужнаяАналитикаПредставление.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;	   
		
		
		ТекстАналитики = ТекстАналитики+"
		|&ПустаяАналитика_"+Аналитика.Код+",";
		
		Запрос.УстановитьПараметр("ПустаяАналитика_"+Аналитика.Код,Аналитика.ТипСубконто);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустойПоказатель",Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяСтрока",Справочники.СтрокиОтчетов.ПустаяСсылка());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"#ТекстПолейАналитик",ТекстАналитики);
	
	Запрос.Текст = ЗАпрос.Текст+ТекстЗапроса;
	
КонецПроцедуры

Процедура СоздатьНастройкуПоказателя(Бланк,Показатель) Экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСоставаАналитикиБланков.ЗначениеНастройки,
	               |	НастройкиСоставаАналитикиБланков.ПредставлениеНастройки,
	               |	НастройкиСоставаАналитикиБланков.БланкОтчета,
	               |	НастройкиСоставаАналитикиБланков.Назначение,
	               |	НастройкиСоставаАналитикиБланков.НомерНастройки
	               |ИЗ
	               |	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	               |ГДЕ
	               |	НастройкиСоставаАналитикиБланков.Показатель = &Показатель
	               |	И НастройкиСоставаАналитикиБланков.БланкОтчета = &БланкОтчета";
	
	
	Запрос.УстановитьПараметр("Показатель",Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());				
	Запрос.УстановитьПараметр("БланкОтчета",Бланк);
	
	ТзГлобальныхНастроек = Запрос.Выполнить().Выгрузить();
	
	Уид = Новый УникальныйИдентификатор();
	
	Для Каждого Стр ИЗ ТзГлобальныхНастроек Цикл 
		
		НастройкиСоставаБланков = РегистрыСВедений.НастройкиСоставаАналитикиБланков.СоздатьНаборЗаписей();
		НастройкиСоставаБланков.Отбор.Показатель.Установить(Показатель);
		НастройкиСоставаБланков.Отбор.БланкОтчета.Установить(Бланк);
		НастройкиСоставаБланков.Отбор.Назначение.Установить(Стр.Назначение);

		НастройкиСоставаБланков.Прочитать();
		
		НастройкиТаблица  = НастройкиСоставаБланков.Выгрузить();
			
		нНастройкиСоставаБланков = НастройкиТаблица.Добавить();	
			
		нНастройкиСоставаБланков.Показатель = Показатель;
		нНастройкиСоставаБланков.БланкОтчета = Бланк;
		нНастройкиСоставаБланков.Назначение = Стр.Назначение;
		нНастройкиСоставаБланков.НомерНастройки = Уид;
		нНастройкиСоставаБланков.ПредставлениеНастройки = Стр.ПредставлениеНастройки;
		нНастройкиСоставаБланков.ЗначениеНастройки = Стр.ЗначениеНастройки;
		
		НастройкиСоставаБланков.Загрузить(НастройкиТаблица);
		
		НастройкиСоставаБланков.Записать(Истина);	
		
	КонецЦикла;
		
КонецПроцедуры	

//Функции формирования пустого макета добавляемой строки.
Процедура ПолучитьТаблицуСтрокИКолонок(ТаблицаСтроки,ТаблицаКолонки,ТаблицаСтраницы,ТаблицаКолонкиИСтроки)
	
	///////////////////////////////////////////////////////////////////////
	//Собираем все выводимые аналитики
	Для Каждого СтрокаАналитики ИЗ ТаблицаСтроки Цикл		 
		Если СтрокаАналитики.Код = "Фильтр_Периоды" ИЛИ СтрокаАналитики.Код = "Фильтр_Показатели" Тогда
			Продолжить;		 
		КонецЕсли; 
		нКС = ТаблицаКолонкиИСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нКС,СтрокаАналитики);
		нКС.Код = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");		
		нКС.Размещение = "С";
	КонецЦикла;	 
	
	Для Каждого СтрокаАналитики ИЗ ТаблицаКолонки Цикл
		Если СтрокаАналитики.Код = "Фильтр_Периоды" ИЛИ СтрокаАналитики.Код = "Фильтр_Показатели" Тогда
			Продолжить;		 
		КонецЕсли;
		нКС = ТаблицаКолонкиИСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нКС,СтрокаАналитики);
		нКС.Код = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		нКС.Размещение = "К";
	КонецЦикла;	
	
	Для Каждого СтрокаАналитики ИЗ ТаблицаСтраницы Цикл
		Если СтрокаАналитики.Код = "Фильтр_Периоды" ИЛИ СтрокаАналитики.Код = "Фильтр_Показатели" Тогда
			Продолжить;		 
		КонецЕсли;
		нКС = ТаблицаКолонкиИСтроки.Добавить();
		ЗаполнитьЗначенияСвойств(нКС,СтрокаАналитики);
		нКС.Код = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		нКС.Размещение = "О";
	КонецЦикла;	

	ТаблицаКолонкиИСтроки.Сортировать("ГлобальнаяАналитика УБЫВ");
		
КонецПроцедуры	

Функция ПолучитьСоставСтрокиАналитики(Бланк,АналитикиТекущейОбласти,СтруктураТаблицИнтерфейса,СтруктураФильтров,ПолучатьСоставГруппы) Экспорт

	Строка = АналитикиТекущейОбласти.ПоказателиСтрокаОтчета;
		
	ДоступныеАналитики 		= СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей  = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
		
	ТаблицаКолонкиИСтроки = СтруктураТаблицИнтерфейса.ТаблицаСтроки.СкопироватьКолонки();
	ПолучитьТаблицуСтрокИКолонок(СтруктураТаблицИнтерфейса.ТаблицаСтроки,СтруктураТаблицИнтерфейса.ТаблицаКолонки,СтруктураТаблицИнтерфейса.ТаблицаСтраницы,ТаблицаКолонкиИСтроки);

	ТекстЗапросаИндОтборы = "";
		
	//Находим значения настроек текущей строки.
	Запрос =  СоздатьТекстЗапросаНастроекСоставаАналитик(ДоступныеАналитики,Бланк);
	РезультатОтборыСоставаАналитики = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ЗапросСостав = Новый Запрос;
	ЗапросСостав.Текст = "ВЫБРАТЬ
	|	НастройкиСоставаАналитикиБланков.Показатель,
	|	НастройкиСоставаАналитикиБланков.НомерНастройки,
	|	НастройкиСоставаАналитикиБланков.Назначение,
	|	НастройкиСоставаАналитикиБланков.ЗначениеНастройки,
	|	НастройкиСоставаАналитикиБланков.Показатель.СтрокаОтчета КАК СтрокаОтчета
	|ИЗ
	|	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	|ГДЕ
	|	НастройкиСоставаАналитикиБланков.БланкОтчета = &Бланк
	|	И НастройкиСоставаАналитикиБланков.Показатель.СтрокаОтчета = &Показатель";
	
	ЗапросСостав.УстановитьПараметр("Бланк",Бланк);			   
	ЗапросСостав.УстановитьПараметр("Показатель",Строка);
	ЗначенияОтборов = ЗапросСостав.Выполнить().Выгрузить();
	
	ПоказателиСОтбором = ЗначенияОтборов.Скопировать();
	ПоказателиСОтбором.Удалить(0);
	ПоказателиСОтбором.Свернуть("Показатель,СтрокаОтчета");
		
	РезультатИндОтборы = РезультатОтборыСоставаАналитики.Строки.Найти(Строка,"СтрокаОтчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец",Бланк);
		
	//получаем состав аналитик по колонкам;
	Если НЕ ПолучатьСоставГруппы Тогда
		ТаблицаКолонки = ТаблицаКолонкиИСтроки.Скопировать();
		Для Каждого Стр Из ТаблицаКолонки Цикл
			Если НЕ Стр.Размещение = "К" Тогда
				Стр.Размещение = "О";
			КонецЕсли;			
		КонецЦикла;	
		
		Для Каждого СтрПоказательОтбор Из ПоказателиСОтбором Цикл	
			ИдПоказателей  = Новый УникальныйИдентификатор();
			ТекстЗапросаИндОтборы = ТекстЗапросаИндОтборы+
			ПолучитьТекстЗапросаПоИндивидуальнымОтборамСтрока(Запрос,РезультатИндОтборы,СтрПоказательОтбор,ТаблицаКолонки,ДоступныеАналитики,ЗначенияОтборов,КэшАналитикПоказателей,ИдПоказателей,ПолучатьСоставГруппы);
			Запрос.УстановитьПараметр("Показатели_"+СтрЗаменить(Строка(ИдПоказателей),"-",""),СтрПоказательОтбор.Показатель);
		КонецЦикла;
		
	КонецЕсли;
		
	//Опционально получаем состав 
	Если ПолучатьСоставГруппы Тогда
		Для Каждого СтрПоказательОтбор Из ПоказателиСОтбором Цикл	
			ИдПоказателей  = Новый УникальныйИдентификатор();
			ТекстЗапросаИндОтборы = ТекстЗапросаИндОтборы+
			ПолучитьТекстЗапросаПоИндивидуальнымОтборамСтрока(Запрос,РезультатИндОтборы,СтрПоказательОтбор,ТаблицаКолонкиИСтроки,ДоступныеАналитики,ЗначенияОтборов,КэшАналитикПоказателей,ИдПоказателей,ПолучатьСоставГруппы);
			Запрос.УстановитьПараметр("Показатели_"+СтрЗаменить(Строка(ИдПоказателей),"-",""),СтрПоказательОтбор.Показатель);
		КонецЦикла;	
	КонецЕсли;					
	
	ТекстЗапросаИндОтборы =  ПРАВ(ТекстЗапросаИндОтборы,СтрДлина(ТекстЗапросаИндОтборы)-16);
		
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапросаИндОтборы);
	Запрос.Текст = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
		ПолеКод = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если СтруктураФильтров.Свойство(Стр.Код) Тогда
			Запрос.УстановитьПараметр("ПустаяАналитика_"+ПолеКод,СтруктураФильтров[Стр.Код]);
		КонецЕсли;		
	КонецЦикла;	
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл	
		ПолеКод = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если АналитикиТекущейОбласти.Свойство(ПолеКод) Тогда
			Если ЗначениеЗАполнено(АналитикиТекущейОбласти[ПолеКод]) Тогда
				Запрос.УстановитьПараметр("ПустаяАналитика_"+ПолеКод,АналитикиТекущейОбласти[ПолеКод]);
			Иначе
				ОписаниеТипов= Новый ОписаниеТипов(Стр.ТипСтрока);
		        Запрос.УстановитьПараметр("ПустаяАналитика_"+ПолеКод,ОписаниеТипов.ПривестиЗначение(Неопределено));  
			КонецЕсли;
			
		КонецЕсли;		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ПустойПоказатель",Строка);
	Запрос.УстановитьПараметр("ПустаяСтрока",Строка);
			
	ТЗ = Запрос.Выполнить().Выгрузить();
		
	Возврат ТЗ; 
		
КонецФункции

Функция ПолучитьТекстЗапросаПоИндивидуальнымОтборамСтрока(Запрос,РезультатИндОтборы,СтрПоказательОтбор,ТаблицаКолонкиИСтроки,ДоступныеАналитики,ЗначенияОтборов,КэшАналитикПоказателей,ИдПоказателей,ВключатьРедактируемые = Ложь)
	
	ТекстЗапроса = "";
	
	Для Каждого ГлОтбор Из РезультатИндОтборы.Строки Цикл
		
		ТекстЗапроса = ТекстЗапроса+"
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ
		|    #ТекстПолейАналитик
		|	НастройкиСтруктурыБланка.Ссылка КАК Показатели,
		|	НастройкиСтруктурыБланка.СтрокаОтчета КАК ПоказателиСтрокаОтчета
		|ИЗ
		|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка";
		
		
		СписокПредставленийАналитик = Новый СписокЗначений;
		
		ИсключитьАналитики = Ложь;
		
		Для Каждого Аналитика Из ТаблицаКолонкиИСтроки Цикл
			
			НужнаяАналитикаПредставление = ДоступныеАналитики.НайтиСтроки(Новый Структура("НазначениеАналитикиКод",Аналитика.Код));
			
			Если НужнаяАналитикаПредставление.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;	   
			
			ТекПоказательКэш = КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Строка",СтрПоказательОтбор.СтрокаОтчета))[0];
			
			ЕстьТакаяАналитика = Истина;
			Если Не Аналитика.ГлобальнаяАналитика Тогда
				ЕстьТакаяАналитика = Ложь;
				Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
					Если  ТекПоказательКэш["Аналитика"+Инд] = Аналитика.Код Тогда
						ЕстьТакаяАналитика = Истина;
					КонецЕсли;	
				КонецЦикла;
				Если Аналитика.Код = "ДопВалюты" Тогда
					Если ЗначениеЗаполнено(ТекПоказательКэш.АналитикаВалюта) Тогда
						ЕстьТакаяАналитика = Истина;
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;	
			
			Если НЕ ЕстьТакаяАналитика Тогда
				СтрокаСоединения = ДобавитьВыражениеСоединенияСАналитикойСтрока(Запрос,Аналитика,"Не заполнять","",СписокПредставленийАналитик,ИдПоказателей,ВключатьРедактируемые);
				ТекстЗапроса = ТекстЗапроса+ СтрокаСоединения;
				Продолжить;
			КонецЕсли;	   
			
			ЗначениеОтбораСтрока = ЗначенияОтборов.НайтиСтроки(Новый Структура("Назначение,НомерНастройки",НужнаяАналитикаПредставление[0].НазначениеАналитики,ГлОтбор.НомерНастройки)); 
			
			СтрокаСоединения = ДобавитьВыражениеСоединенияСАналитикойСтрока(Запрос,Аналитика,ГлОтбор[НужнаяАналитикаПредставление[0].ПредставлениеАналитики],ЗначениеОтбораСтрока,СписокПредставленийАналитик,ИдПоказателей,ВключатьРедактируемые);
			
			ТекстЗапроса = ТекстЗапроса+ СтрокаСоединения;
			
		КонецЦикла;
		
		ТекстПолей = "";
		Для Каждого Стр Из СписокПредставленийАналитик Цикл
			ТекстПолей = ТекстПолей+"
			|"+Стр.Значение+",";
		КонецЦикла;
		
		ТекстЗапроса =  СтрЗаменить(ТекстЗапроса,"#ТекстПолейАналитик",ТекстПолей);
		
		ТекстУсловия = "
		| ГДЕ
		|	НастройкиСтруктурыБланка.Владелец = &Владелец
		|	И НастройкиСтруктурыБланка.Ссылка В (&Показатели_"+СтрЗаменить(Строка(ИдПоказателей),"-","")+")
		|	И НастройкиСтруктурыБланка.ИндексЭлемента = 2";
		
		ТекстЗапроса = ТекстЗапроса+ТекстУсловия;
		
		
	КонецЦикла;	
	
	Возврат ТекстЗапроса; 
	
	
КонецФункции

Функция ДобавитьВыражениеСоединенияСАналитикойСтрока(Запрос,Аналитика,СтрокаОтбора,ЗначениеОтбораСтрока,СписокПредставленийАналитик,ИдПоказателей,ВключатьРедактируемые)
	
	Если Аналитика.Размещение = "О"  Тогда
		
			СписокПредставленийАналитик.Добавить("&ПустаяАналитика_"+Аналитика.Код+" КАК "+Аналитика.Код);	
		
		Возврат "";
		
	ИначеЕсли  СтрокаОтбора="Синхронизировать по функц. направлениям" Тогда 	 
		
		СписокПредставленийАналитик.Добавить(" Аналитика_"+Аналитика.Код+".Ссылка КАК "+Аналитика.Код);
		ТекстЗапроса = "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+СформироватьТекстЗапросаПоФункцНаправлениям(Запрос,Аналитика,ЗначениеОтбораСтрока);
		
	ИначеЕсли  СтрокаОтбора = "Не заполнять" Тогда 	 
		
		СписокПредставленийАналитик.Добавить(" NULL КАК "+Аналитика.Код);
		Возврат "";
		
	ИначеЕсли Аналитика.Редактируется И НЕ ВключатьРедактируемые  Тогда	
		
		СписокПредставленийАналитик.Добавить("&ПустаяАналитика_"+Аналитика.Код+" КАК "+Аналитика.Код);
		Возврат "";

		
	ИначеЕсли  СтрокаОтбора="Все элементы" ИЛИ СтрокаОтбора=NULL Тогда 	 
		 
		СписокПредставленийАналитик.Добавить(" Аналитика_"+Аналитика.Код+".Ссылка КАК "+Аналитика.Код);
		ТекстЗапроса = "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+СформироватьТекстЗапросаПоАналитике(Запрос,Аналитика,ЗначениеОтбораСтрока,ИдПоказателей);
			 
	Иначе  	 
		 
		СписокПредставленийАналитик.Добавить(" Аналитика_"+Аналитика.Код+".Ссылка КАК "+Аналитика.Код);
		ТекстЗапроса = "
		|ЛЕВОЕ СОЕДИНЕНИЕ "+СформироватьТекстЗапросаПоАналитике(Запрос,Аналитика,ЗначениеОтбораСтрока,ИдПоказателей);

	КонецЕсли;	
	
	Возврат ТекстЗапроса;
	
	
КонецФункции	

#КонецОбласти

Функция ПолучитьШаблонСводнойТаблицы(СтруктураФильтровИтог,СтруктураТаблицИнтерфейса,ВыбранныеРесурсы,Периодичность,ТЗСтрок,ТЗКолонок,КоличествоЯчеек) Экспорт
	
	КоличествоЯчеек = ТЗСтрок.Количество()*ТЗКолонок.Количество();
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СтруктураФильтровИтог",СтруктураФильтровИтог);
	СтруктураПараметров.Вставить("СтруктураТаблицИнтерфейса",СтруктураТаблицИнтерфейса);
	СтруктураПараметров.Вставить("ВыбранныеРесурсы",ВыбранныеРесурсы);
	СтруктураПараметров.Вставить("ТЗСтрок",ТЗСтрок);
    СтруктураПараметров.Вставить("ТЗКолонок",ТЗКолонок);
    СтруктураПараметров.Вставить("Периодичность",Периодичность);
    СтруктураПараметров.Вставить("ТолькоМакет",Истина);
   
	ТЗДанные = ПолучитьСводныеДанные(СтруктураПараметров);

	Возврат ТЗДанные;
		
КонецФункции	

Процедура ДобавитьПоляРесурсов(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы,ТекстОтклонения,ВариантОтображенияРесурсов) Экспорт
		
	НовоеПолеВыбор=НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПолеВыбор.Поле=Новый ПолеКомпоновкиДанных("Значение");
		
	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	
	Если ВариантОтображенияРесурсов = "ОбычныйИтог" Тогда
		ПолеИтога.Выражение="Сумма(Значение)";	
	Иначе	
		ПолеИтога.Выражение="ВычислитьВыражение(""Сумма(Значение)"",""Периоды"" , , ""Первая"", ""Текущая"")";
	КонецЕсли;
	ПолеИтога.ПутьКДанным="Значение";
	
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();	
	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="∆"+ТекстОтклонения;
	НовоеПолеВычисления.Выражение="Значение - ЗначениеБаза";
	НовоеПолеВычисления.ПутьКДанным="ОтклонениеАбсолютное";
	
	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="∆%"+ТекстОтклонения;
	НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ЗначениеБаза = 0  ТОГДА 0 ИНАЧЕ (Значение - ЗначениеБаза)/ЗначениеБаза*100 КОНЕЦ";
	НовоеПолеВычисления.ПутьКДанным="ОтклонениеОтносительное";
	
	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение="Сумма("+"ОтклонениеОтносительное"+")";
	ПолеИтога.ПутьКДанным="ОтклонениеОтносительное";
	
	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение="Сумма("+"ОтклонениеАбсолютное"+")";
	ПолеИтога.ПутьКДанным="ОтклонениеАбсолютное";
	
КонецПроцедуры

Процедура ЗаполнитьРесурсы(Источник,ТаблицаВыбранныеРесурсы) Экспорт
		
	Если ТипЗнч(Источник) = Тип("СправочникСсылка.ВидыОтчетов") Тогда //Выбираем все показатели текущего вида отчета
		
		ТаблицаВыбранныеРесурсы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КолонкиОтчетов.Ссылка КАК Колонка,
		               |	КолонкиОтчетов.Наименование КАК Представление
		               |ИЗ
		               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		               |ГДЕ
		               |	КолонкиОтчетов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",Источник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Нстр = ТаблицаВыбранныеРесурсы.Добавить();
			Нстр.ПредставлениеРесурса = Выборка.Представление;
			Нстр.Ресурс = Выборка.Колонка;
		КонецЦикла;
		
	Иначе	
		
		ТаблицаВыбранныеРесурсы.Очистить();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Колонка КАК Колонка,
		               |	НастройкиСтруктурыБланка.Колонка.Наименование КАК Представление
		               |ИЗ
		               |	Справочник.НастройкиСтруктурыБланка.КолонкиОтчетов КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Ссылка.ИндексЭлемента = 10
		               |	И НастройкиСтруктурыБланка.Ссылка.Владелец = &Бланк";
		
		
		Запрос.УстановитьПараметр("Бланк",Источник);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Нстр = ТаблицаВыбранныеРесурсы.Добавить();
			Нстр.ПредставлениеРесурса = Выборка.Представление;
			Нстр.Ресурс = Выборка.Колонка;
		КонецЦикла;
			
	КонецЕсли; 
	
КонецПроцедуры

Процедура ЗаполнитьВыбранныеПоказатели(ВыбранныеСтроки,ВыбранныеКолонки,ВыбранныеПоказатели) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка,
	|	ПоказателиОтчетов.Колонка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Колонка В(&Колонки)
	|	И ПоказателиОтчетов.Строка В(&Строки)";
	
	Запрос.УстановитьПараметр("Строки",ВыбранныеСтроки);
	Запрос.УстановитьПараметр("Колонки",ВыбранныеКолонки);
	
	ВыбранныеПоказатели.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));		 
	
КонецПроцедуры

Процедура ЗаполнитьПоляСхемы(СхемаСКДЭталон,ТаблицаДоступныеПоля) Экспорт
	
	СхемаСКДЭталон.НаборыДанных[0].Поля.Очистить();
	
	Для Каждого СтрПоле Из ТаблицаДоступныеПоля Цикл
		
		Если СтрПоле.Код = "Фильтр_Отклонения" ИЛИ СтрПоле.Код = "Фильтр_Показатели_Колонки"  Тогда 
			Продолжить
		КонецЕсли;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.ПутьКДанным = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок =  СтрЗаменить(СтрПоле.Наименование,"Фильтр_","");
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(СтрПоле.ТипСтрока);
		Если  СтрПоле.Код = "Фильтр_Показатели"  Тогда 
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НастройкиСтруктурыБланка");
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПоказателиСтрокаОтчета";
			НовоеПоле.Заголовок = "ПоказателиСтрокаОтчета";
			НовоеПоле.ПутьКДанным = "ПоказателиСтрокаОтчета";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетов");		
		КонецЕсли;
		ШрифтПолей = ПолучитьОбщийМакет("ШаблонСводнойТаблицы").НаборыДанных[0].Поля[7].Оформление.Элементы[5].Значение;
		Если  СтрПоле.Код = "Фильтр_Периоды"  Тогда 
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("Шрифт",ШрифтПолей);
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПериодыСвязанныйПериод";
			НовоеПоле.Заголовок = "ПериодыСвязанныйПериод";
			НовоеПоле.ПутьКДанным = "ПериодыСвязанныйПериод";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
		КонецЕсли;
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ЗаполнитьПоляСхемыПоСтруктуре(СхемаСКДЭталон,СтруктураТаблицИнтерфейса) Экспорт
	
	СхемаСКДЭталон.НаборыДанных[0].Поля.Очистить();
	
	Для Каждого СтрПоле Из СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля Цикл
		
		Если СтрПоле.Код = "Фильтр_Отклонения" ИЛИ СтрПоле.Код = "Фильтр_Показатели_Колонки"  Тогда 
			Продолжить
		КонецЕсли;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.ПутьКДанным = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок =  СтрЗаменить(СтрПоле.Наименование,"Фильтр_","");
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(СтрПоле.ТипСтрока);
		Если  СтрПоле.Код = "Фильтр_Показатели"  Тогда 
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НастройкиСтруктурыБланка");
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПоказателиСтрокаОтчета";
			НовоеПоле.Заголовок = "ПоказателиСтрокаОтчета";
			НовоеПоле.ПутьКДанным = "ПоказателиСтрокаОтчета";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетов");	
		КонецЕсли;
		ШрифтПолей = ПолучитьОбщийМакет("ШаблонСводнойТаблицы").НаборыДанных[0].Поля[7].Оформление.Элементы[5].Значение;
		Если  СтрПоле.Код = "Фильтр_Периоды"  Тогда 
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("Шрифт",ШрифтПолей);
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПериодыСвязанныйПериод";
			НовоеПоле.Заголовок = "ПериодыСвязанныйПериод";
			НовоеПоле.ПутьКДанным = "ПериодыСвязанныйПериод";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
		КонецЕсли;	
	КонецЦикла;	
	
	
	Для Каждого СтрПоле Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		
		Если СтрПоле.Код = "Фильтр_Отклонения" ИЛИ СтрПоле.Код = "Фильтр_Показатели_Колонки"  Тогда 
			Продолжить
		КонецЕсли;	
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.ПутьКДанным = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок =  СтрЗаменить(СтрПоле.Наименование,"Фильтр_","");
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(СтрПоле.ТипСтрока);
		Если  СтрПоле.Код = "Фильтр_Показатели"  Тогда 
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НастройкиСтруктурыБланка");
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПоказателиСтрокаОтчета";
			НовоеПоле.Заголовок = "ПоказателиСтрокаОтчета";
			НовоеПоле.ПутьКДанным = "ПоказателиСтрокаОтчета";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетов");	
		КонецЕсли;
		ШрифтПолей = ПолучитьОбщийМакет("ШаблонСводнойТаблицы").НаборыДанных[0].Поля[7].Оформление.Элементы[5].Значение;
		Если  СтрПоле.Код = "Фильтр_Периоды"  Тогда 
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("Шрифт",ШрифтПолей);
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПериодыСвязанныйПериод";
			НовоеПоле.Заголовок = "ПериодыСвязанныйПериод";
			НовоеПоле.ПутьКДанным = "ПериодыСвязанныйПериод";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
		КонецЕсли;		
	КонецЦикла;	

	Для Каждого СтрПоле Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		
		Если СтрПоле.Код = "Фильтр_Отклонения" ИЛИ СтрПоле.Код = "Фильтр_Показатели_Колонки"  Тогда 
			Продолжить
		КонецЕсли;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.ПутьКДанным = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок =  СтрЗаменить(СтрПоле.Наименование,"Фильтр_","");
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(СтрПоле.ТипСтрока);
		Если  СтрПоле.Код = "Фильтр_Показатели"  Тогда 
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НастройкиСтруктурыБланка");
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПоказателиСтрокаОтчета";
			НовоеПоле.Заголовок = "ПоказателиСтрокаОтчета";
			НовоеПоле.ПутьКДанным = "ПоказателиСтрокаОтчета";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетов");	
		КонецЕсли;
		ШрифтПолей = ПолучитьОбщийМакет("ШаблонСводнойТаблицы").НаборыДанных[0].Поля[7].Оформление.Элементы[5].Значение;
		Если  СтрПоле.Код = "Фильтр_Периоды"  Тогда 
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("Шрифт",ШрифтПолей);
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПериодыСвязанныйПериод";
			НовоеПоле.Заголовок = "ПериодыСвязанныйПериод";
			НовоеПоле.ПутьКДанным = "ПериодыСвязанныйПериод";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
		КонецЕсли;
		
	КонецЦикла;	

	Для Каждого СтрПоле Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		
		Если СтрПоле.Код = "Фильтр_Отклонения" ИЛИ СтрПоле.Код = "Фильтр_Показатели_Колонки"  Тогда 
			Продолжить
		КонецЕсли;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.ПутьКДанным = СтрЗаменить(СтрПоле.Код,"Фильтр_","");
		НовоеПоле.Заголовок =  СтрЗаменить(СтрПоле.Наименование,"Фильтр_","");
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(СтрПоле.ТипСтрока);
		Если  СтрПоле.Код = "Фильтр_Показатели"  Тогда 
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.НастройкиСтруктурыБланка");
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПоказателиСтрокаОтчета";
			НовоеПоле.Заголовок = "ПоказателиСтрокаОтчета";
			НовоеПоле.ПутьКДанным = "ПоказателиСтрокаОтчета";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.СтрокиОтчетов");	
		КонецЕсли;
		ШрифтПолей = ПолучитьОбщийМакет("ШаблонСводнойТаблицы").НаборыДанных[0].Поля[7].Оформление.Элементы[5].Значение;
		Если  СтрПоле.Код = "Фильтр_Периоды"  Тогда 
			НовоеПоле.Оформление.УстановитьЗначениеПараметра("Шрифт",ШрифтПолей);
			НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
			НовоеПоле.Поле = "ПериодыСвязанныйПериод";
			НовоеПоле.Заголовок = "ПериодыСвязанныйПериод";
			НовоеПоле.ПутьКДанным = "ПериодыСвязанныйПериод";
			НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
		КонецЕсли;
			
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПолучитьОписаниеТаблицИнтерфейса() Экспорт
	
	ТаблицаСтроки            = Новый ТаблицаЗначений;
	ТаблицаВыбранныеРесурсы  = Новый ТаблицаЗначений;
	КэшАналитикПоказателей   = Новый ТаблицаЗначений;
	ДоступныеАналитики       = Новый ТаблицаЗначений;
    ВыбранныеПоказатели      = Новый СписокЗначений;
	ДоступныеПоля            = Новый ДеревоЗначений;
	ИспользуемыеПоказатели   = Новый ТаблицаЗначений;
	ДополнительныеПоля       = Новый ТаблицаЗначений;
	ТаблицаПодпериодов       = Новый ТаблицаЗначений;
	НастройкиСреза           = Новый ДеревоЗначений;
	КэшРедактируемыхОбластей = Новый ТаблицаЗначений;
	БазаДляОтклонений        = Новый ТаблицаЗначений;
	
	ДоступныеПоля.Колонки.Добавить("Поле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ДоступныеПоля.Колонки.Добавить("ТипПоля",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ДоступныеПоля.Колонки.Добавить("ПолеСиноним",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	
	НастройкиСреза.Колонки.Добавить("Аналитика",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	НастройкиСреза.Колонки.Добавить("Отбор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	НастройкиСреза.Колонки.Добавить("ТипРеквизита",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2,0));
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ОтборКомпоновкиДанных"));
	
	НастройкиСреза.Колонки.Добавить("СтрокаОтбор",Новый ОписаниеТипов(Массив));
    НастройкиСреза.Колонки.Добавить("ИмяГруппировки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));              
    НастройкиСреза.Колонки.Добавить("ЗначениеНастройка1",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	НастройкиСреза.Колонки.Добавить("ЗначениеНастройка2",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
    НастройкиСреза.Колонки.Добавить("ЗначениеНастройка3",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));              
    НастройкиСреза.Колонки.Добавить("ЗначениеНастройка4",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
    НастройкиСреза.Колонки.Добавить("СтрПоля",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
    НастройкиСреза.Колонки.Добавить("ПолеИерархии",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
    НастройкиСреза.Колонки.Добавить("АналитикаРедактируется",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	ДоступныеАналитики.Колонки.Добавить("ИмяАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ДоступныеАналитики.Колонки.Добавить("Показывать",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ДоступныеАналитики.Колонки.Добавить("НазначениеАналитики");
	ДоступныеАналитики.Колонки.Добавить("ПредставлениеАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
    ДоступныеАналитики.Колонки.Добавить("НазначениеАналитикиКод",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ДоступныеАналитики.Колонки.Добавить("ТипСубконто");
	ДоступныеАналитики.Колонки.Добавить("ГлобальнаяАналитика",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ДоступныеАналитики.Колонки.Добавить("КодАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
    ДоступныеАналитики.Колонки.Добавить("Редактируется",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    ДоступныеАналитики.Колонки.Добавить("ЭтоЭтапПроекта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ДоступныеАналитики.Колонки.Добавить("ПоддерживатьИерархию",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    ДоступныеАналитики.Колонки.Добавить("ИндексКартинки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2,0));

	ТаблицаСтроки.Колонки.Добавить("Наименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ТаблицаСтроки.Колонки.Добавить("ИндексКартинки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2,0));
	ТаблицаСтроки.Колонки.Добавить("ТипСтрока",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ТаблицаСтроки.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
    ТаблицаСтроки.Колонки.Добавить("НПП",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2,0));
	ТаблицаСтроки.Колонки.Добавить("ТипСубконто");
	ТаблицаСтроки.Колонки.Добавить("ГлобальнаяАналитика",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаСтроки.Колонки.Добавить("Редактируется",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаСтроки.Колонки.Добавить("Представление",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(250));
	ТаблицаСтроки.Колонки.Добавить("Сортировка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(250));
    ТаблицаСтроки.Колонки.Добавить("ПоддерживатьИерархию",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
    ТаблицаСтроки.Колонки.Добавить("Размещение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(1));
    ТаблицаСтроки.Колонки.Добавить("ЭтоЭтапПроекта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	КэшАналитикПоказателей.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	КэшАналитикПоказателей.Колонки.Добавить("ГруппаРаскрытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ГруппыРаскрытия"));
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		КэшАналитикПоказателей.Колонки.Добавить("Аналитика"+Инд,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
		КэшАналитикПоказателей.Колонки.Добавить("Аналитика"+Инд+"Представление",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	КонецЦикла;
	
	КэшАналитикПоказателей.Колонки.Добавить("АналитикаВалюта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
    КэшАналитикПоказателей.Колонки.Добавить("АналитикаВалютаПредставление",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	КэшАналитикПоказателей.Колонки.Добавить("Строка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СтрокиОтчетов"));
	КэшАналитикПоказателей.Колонки.Добавить("Код",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
    КэшАналитикПоказателей.Колонки.Добавить("НПП",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2,0));
	КэшАналитикПоказателей.Колонки.Добавить("ТипСубконто");
	КэшАналитикПоказателей.Колонки.Добавить("ГлобальнаяАналитика",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
	ТаблицаВыбранныеРесурсы.Колонки.Добавить("ПредставлениеРесурса",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ТаблицаВыбранныеРесурсы.Колонки.Добавить("Ресурс",,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.КолонкиОтчетов"));
	
	ИспользуемыеПоказатели.Колонки.Добавить("ПредставлениеКолонки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ИспользуемыеПоказатели.Колонки.Добавить("Показатель",,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
    ИспользуемыеПоказатели.Колонки.Добавить("СтрокаОтчета",,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СтрокиОтчетов"));
	ИспользуемыеПоказатели.Колонки.Добавить("КолонкаОтчета",,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.КолонкиОтчетов"));
	
	ТаблицаДоступныеПоля = ТаблицаСтроки.Скопировать();
	ТаблицаКолонки		 = ТаблицаСтроки.Скопировать();
    ТаблицаСтраницы 	 = ТаблицаСтроки.Скопировать();

	ДополнительныеПоля.Колонки.Добавить("Использовать",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ДополнительныеПоля.Колонки.Добавить("Сценарии");
	ДополнительныеПоля.Колонки.Добавить("Периоды");
	ДополнительныеПоля.Колонки.Добавить("Организации");
    ДополнительныеПоля.Колонки.Добавить("Проекты");
	ДополнительныеПоля.Колонки.Добавить("Показатель",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
    ДополнительныеПоля.Колонки.Добавить("ВидОтклонения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
    ДополнительныеПоля.Колонки.Добавить("Заголовок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ДополнительныеПоля.Колонки.Добавить("НарастающийИтог",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	КэшРедактируемыхОбластей.Колонки.Добавить("ИмяОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	КэшРедактируемыхОбластей.Колонки.Добавить("ШаблонОбласти");
	
	БазаДляОтклонений = ДополнительныеПоля.СкопироватьКолонки();
	
	НастройкаШкалыВремени = РегистрыСведений.НастройкиМасштабаВремени.СоздатьНаборЗаписей().ВыгрузитьКолонки();

	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	СтруктураВозврата.Вставить("ТаблицаКолонки",ТаблицаКолонки);
	СтруктураВозврата.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
	СтруктураВозврата.Вставить("ТаблицаДоступныеПоля",ТаблицаДоступныеПоля);
	СтруктураВозврата.Вставить("ТаблицаВыбранныеРесурсы",ТаблицаВыбранныеРесурсы);
	СтруктураВозврата.Вставить("КэшАналитикПоказателей",КэшАналитикПоказателей);
	СтруктураВозврата.Вставить("ДоступныеАналитики",ДоступныеАналитики);
    СтруктураВозврата.Вставить("ВыбранныеПоказатели",ВыбранныеПоказатели);
	СтруктураВозврата.Вставить("ДоступныеПоля",ДоступныеПоля);
    СтруктураВозврата.Вставить("ИспользуемыеПоказатели",ИспользуемыеПоказатели);
	СтруктураВозврата.Вставить("ДополнительныеПоля",ДополнительныеПоля);
    СтруктураВозврата.Вставить("ДополнительныеПараметры",Новый Структура);
    СтруктураВозврата.Вставить("НастройкиСреза",НастройкиСреза);
	СтруктураВозврата.Вставить("КэшРедактируемыхОбластей",КэшРедактируемыхОбластей);
	СтруктураВозврата.Вставить("ДополнительныеПоля",ДополнительныеПоля);
	СтруктураВозврата.Вставить("БазаДляОтклонений",БазаДляОтклонений);
    СтруктураВозврата.Вставить("НастройкаШкалыВремени",НастройкаШкалыВремени);

	СтруктураВозврата.Вставить("ТаблицаИсходныхПоказателей",Новый ТаблицаЗначений);
    СтруктураВозврата.Вставить("ТаблицаТрассировкиРасчета", Новый ТаблицаЗначений);

	
	Возврат СтруктураВозврата;
	                                                                       	
КонецФункции	

Процедура ЗаполнитьЗначенияОсей(Бланк,ТаблицаДоступныеПоля,ТаблицаСтраницы,ТаблицаКолонки,ТаблицаСтроки,ЕстьСохраненныеЭлементы=Ложь) Экспорт
	
	СохраненнаяСтруктура = РегистрыСведений.СохраненныеМакетыБланков.СоздатьНаборЗаписей();
	СохраненнаяСтруктура.Отбор.Бланк.Установить(Бланк);
	СохраненнаяСтруктура.Прочитать();
	СохраненныеНастройки = СохраненнаяСтруктура[0].СохраненныйМакет.Получить();
	
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСтруктурыБланка.Ось,
	               |	НастройкиСтруктурыБланка.Наименование,
	               |	НастройкиСтруктурыБланка.Код,
	               |	НастройкиСтруктурыБланка.ТипСтрока,
	               |	НастройкиСтруктурыБланка.ИндексКартинки,
	               |	НастройкиСтруктурыБланка.Представление,
	               |	НастройкиСтруктурыБланка.Сортировка,
	               |	НастройкиСтруктурыБланка.Редактируется,
	               |	НастройкиСтруктурыБланка.ТипСубконто,
	               |	НастройкиСтруктурыБланка.НПП КАК НПП,
	               |	НастройкиСтруктурыБланка.ГлобальнаяАналитика,
	               |	НастройкиСтруктурыБланка.ПоддерживатьИерархию
	               |ИЗ
	               |	РегистрСведений.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.Бланк = &Бланк
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НПП";
	
	Запрос.УстановитьПараметр("Бланк",Бланк);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ЕстьСохраненныеЭлементы = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		ЕстьСохраненныеЭлементы = Истина;
		
		ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Выборка.Код));
		
		Если ИсключаемыйЭлемент.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;

		Если Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка Тогда
			нЭлемент = ТаблицаКолонки.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
		ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка Тогда
			нЭлемент = ТаблицаСтроки.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
		ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница Тогда 
			нЭлемент = ТаблицаСтраницы.Добавить();
			ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
		КонецЕсли;
		
		нЭлемент.ГлобальнаяАналитика = ИсключаемыйЭлемент[0].ГлобальнаяАналитика;
        нЭлемент.ЭтоЭтапПроекта = ИсключаемыйЭлемент[0].ЭтоЭтапПроекта;
		
		ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
			
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьДоступныеАналитикиДляОбработкиПереноса(МассивПоказателей,ТаблицаДоступныхАналитик,СтруктураФильтров = Неопределено) Экспорт
	
	ТаблицаДоступныхАналитик.Очистить();
	
	нПоле = ТаблицаДоступныхАналитик.Добавить();
	нПоле.Наименование = НСтр("ru = 'Организации'");
	нПоле.ТипСтрока = "СправочникСсылка.Организации";
	нПоле.Код = "Фильтр_Организации";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации;
    нПоле.ОтборИсточник = Нстр("ru = '<Без отбора>'");
	нПоле.ОтборПриемник = Нстр("ru = '<По значениям источника>'");

	нПоле = ТаблицаДоступныхАналитик.Добавить();
	нПоле.Наименование = НСтр("ru = 'Проекты'");
	нПоле.ТипСтрока = "СправочникСсылка.Проекты";
	нПоле.Код = "Фильтр_Проекты";
	нПоле.ИндексКартинки = 1;
	нПоле.ГлобальнаяАналитика = Истина;
    нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты;
    нПоле.ОтборИсточник = Нстр("ru = '<Без отбора>'");
	нПоле.ОтборПриемник = Нстр("ru = '<По значениям источника>'");

	МассивВо = ПолучитьВидыОтчетовПоПоказателям(МассивПоказателей);
	
	//Заполняем общие аналитики вида отчета
	Если МассивВо.Количество()>0 Тогда
		ВидОтчета =  МассивВо[0];
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+Инд]) Тогда
				нПоле = ТаблицаДоступныхАналитик.Добавить();
				нПоле.Наименование = ВидОтчета["ВидАналитики"+Инд].Наименование;
				нПоле.ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(ВидОтчета["ВидАналитики"+Инд].ТипЗначения.Типы()[0]).Имя;
				нПоле.Код = СокрЛП(ВидОтчета["ВидАналитики"+Инд].Код);
				нПоле.ТипСубконто = ВидОтчета["ВидАналитики"+Инд];
				нПоле.ИндексКартинки = 1;	
				нПоле.ГлобальнаяАналитика = Истина;
				нПоле.ОтборИсточник = Нстр("ru = '<Без отбора>'");
				нПоле.ОтборПриемник = Нстр("ru = '<По значениям источника>'");
				
			КонецЕсли;
		КонецЦикла;
	Иначе	
		Возврат;
	КонецЕсли; 
    	
	
	ТекстПолей 			= "";
	ТекстКодовПолей 	= "";
	ТекстПолейГР 		= "";
	ТекстКодовПолейГР 	= "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстПолей = ТекстПолей + "
		|	ВложенныйЗапрос1.ВидАналитики"+Инд+",";	
		ТекстКодовПолей = ТекстКодовПолей + "
		|	ВложенныйЗапрос1.ВидАналитики"+Инд+"Код,";	
		ТекстПолейГР = ТекстПолейГР + "
		|	ГруппыРаскрытия.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";
		ТекстКодовПолейГР = ТекстКодовПолейГР + "
		|	ГруппыРаскрытия.ВидАналитики"+Инд+".Код КАК ВидАналитики"+Инд+"Код,";
	КонецЦикла;
	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ"+ТекстПолей+ТекстКодовПолей+"
	               |	ВложенныйЗапрос.ПоказательОтчетаСсылка КАК Показатель,
	               |	ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия КАК ГруппаРаскрытия,
	               |	ВложенныйЗапрос.ПоказательОтчетаСсылка КАК Строка,
	               |	ВложенныйЗапрос1.ВидАналитикиВалютаДт КАК ВидАналитикиВалюта
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПоказателиОтчетов.Строка.Ссылка КАК ПоказательОтчетаСсылка,
	               |		ПоказателиОтчетов.ГруппаРаскрытия КАК ПоказательОтчетаГруппаРаскрытия
	               |	ИЗ
	               |		Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |	ГДЕ	
	               |		ПоказателиОтчетов.Ссылка В(&СписокПоказателей)) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстПолейГР+ТекстКодовПолейГР+"
	               |			ГруппыРаскрытия.Ссылка КАК Ссылка,
	               |			ГруппыРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиВалютаДт
	               |		ИЗ
	               |			Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	               |		ГДЕ
	               |			ГруппыРаскрытия.Владелец В (&ВидОтчета)) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия = ВложенныйЗапрос1.Ссылка";
	
	Запрос.УстановитьПараметр("СписокПоказателей",МассивПоказателей);
	Запрос.УстановитьПараметр("ВидОтчета",МассивВо);
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокАналитик = Новый СписокЗначений;
	
	Для Каждого СтрАналитики Из Результат Цикл						
		Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если  СтрАналитики["ВидАналитики"+ИндАналитики] = Null ИЛИ СтрАналитики["ВидАналитики"+ИндАналитики] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяССылка() Тогда
				Продолжить;
			КонецЕсли;	
			Если   СписокАналитик.НайтиПоЗначению(СтрАналитики["ВидАналитики"+ИндАналитики])= Неопределено Тогда
				СписокАналитик.Добавить(СтрАналитики["ВидАналитики"+ИндАналитики]);	
			КонецЕсли;		
		КонецЦикла;	
		
		Если ЗначениеЗАполнено(СтрАналитики.ВидАналитикиВалюта) Тогда
			Если   СписокАналитик.НайтиПоЗначению("АналитикаВалюта")= Неопределено Тогда
				СписокАналитик.Добавить("АналитикаВалюта");	
			КонецЕсли;	 
		КонецЕсли;		
	КонецЦикла;

	Для Каждого Знч Из СписокАналитик Цикл
		
		Если Знч.Значение = "АналитикаВалюта" Тогда
				
			нПоле = ТаблицаДоступныхАналитик.Добавить();
			нПоле.Наименование = НСтр("ru = 'Дополнительные валюты'");
			нПоле.ТипСтрока = "СправочникСсылка.Валюты";
			нПоле.Код = "АналитикаВалюта";
			нПоле.ИндексКартинки = 2;
			нПоле.ГлобальнаяАналитика = Ложь;
			нПоле.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.АналитикаВалюта;
			нПоле.ОтборИсточник = Нстр("ru = '<Без отбора>'");
			нПоле.ОтборПриемник = Нстр("ru = '<По значениям источника>'");	
			Продолжить;		
		КонецЕсли;	
		
		нПоле = ТаблицаДоступныхАналитик.Добавить();
		нПоле.Наименование = Знч.Значение.Наименование;
		нПоле.ТипСтрока = "СправочникСсылка."+Метаданные.НайтиПоТипу(Знч.Значение.ТипЗначения.Типы()[0]).Имя;;
		нПоле.Код = Знч.Значение.Код;
		нПоле.ТипСубконто = Знч.Значение;
		нПоле.ИндексКартинки = 2;	
		нПоле.ГлобальнаяАналитика = Ложь;	
		нПоле.ОтборИсточник = Нстр("ru = '<Без отбора>'");
		нПоле.ОтборПриемник = Нстр("ru = '<По значениям источника>'");
		
	КонецЦикла;	
		
	ТаблицаДоступныхАналитик.Сортировать("ИндексКартинки,Наименование");
	
	Если НЕ СтруктураФильтров = Неопределено Тогда
		Для Каждого Стр Из ТаблицаДоступныхАналитик Цикл	
			Если СтруктураФильтров.Свойство(Стр.Код)  Тогда		
				 ПредставлениеОтбора = Строка(СоздатьОписаниеОтбораСКД(Стр.Код,Стр.ТипСтрока,СтруктураФильтров[Стр.Код]).Отбор);
				 ПозицияПервойТочки  = СтрНайти(ПредставлениеОтбора,".");
				 Стр.ОтборИсточник   = Прав(ПредставлениеОтбора,СтрДлина(ПредставлениеОтбора)-ПозицияПервойТочки);
				 Стр.ОтборИсточникаСКД = ЗначениеВСтрокуВнутр(СоздатьОписаниеОтбораСКД(Стр.Код,Стр.ТипСтрока,СтруктураФильтров[Стр.Код]));
				 Стр.ИсточникЗначенияКопирования.Добавить(СтруктураФильтров[Стр.Код]);	 
				 Стр.Редактируется = Истина;		 
			 ИначеЕсли  СтруктураФильтров.Свойство("Фильтр_"+Стр.Код) Тогда 		  
				 ПредставлениеОтбора = Строка(СоздатьОписаниеОтбораСКД(Стр.Код,Стр.ТипСтрока,СтруктураФильтров["Фильтр_"+Стр.Код]).Отбор);
				 ПозицияПервойТочки  = СтрНайти(ПредставлениеОтбора,".");
				 Стр.ОтборИсточник   = Прав(ПредставлениеОтбора,СтрДлина(ПредставлениеОтбора)-ПозицияПервойТочки);
				 Стр.ОтборИсточникаСКД = ЗначениеВСтрокуВнутр(СоздатьОписаниеОтбораСКД(Стр.Код,Стр.ТипСтрока,СтруктураФильтров["Фильтр_"+Стр.Код]));
				 Стр.ИсточникЗначенияКопирования.Добавить(СтруктураФильтров["Фильтр_"+Стр.Код]);	 
                 Стр.Редактируется = Истина;	 
			КонецЕсли;	
		КонецЦикла;		
	КонецЕсли;
	
КонецПроцедуры	

Функция СоздатьОписаниеОтбораСКД(КодПоля,ТипПоля,ЗначениеОтбора)

	КодПоляСокр = СтрЗаменить(КодПоля,"Фильтр_","");
	НастройкиКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	
	НовыйЭлементОтбора = НастройкиКД.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора = Новый ПолеКомпоновкиДанных(ТипПоля);
	НовыйЭлементОтбора.ЛевоеЗначение = ПолеОтбора;
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;
	
	Возврат НастройкиКД.Настройки;
	
КонецФункции	

Функция ПолучитьИспользуемыеВидыОтчетов(Бланк) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	             |	НастройкиСтруктурыБланка.СтрокаОтчета.Владелец КАК ВидОтчета
	             |ИЗ
	             |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	             |ГДЕ
	             |	НастройкиСтруктурыБланка.Владелец = &Владелец
	             |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2";
	
	Запрос.УстановитьПараметр("Владелец",Бланк);

	Выборка = Запрос.Выполнить().Выгрузить();
		
	МассивВидовОтчетов = Новый Массив;
	
	Если Выборка.Количество() = 0 Тогда
		 МассивВидовОтчетов.Добавить(Бланк.Владелец);
	Иначе	
		 МассивВидовОтчетов = Выборка.ВыгрузитьКолонку("ВидОтчета");
	КонецЕсли;	
	
	Возврат  МассивВидовОтчетов; 
	
КонецФункции	

#КонецОбласти

#Область РаботаСДаннымиСводнойТаблицы

Процедура ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияСтрок,ИерархияКолонок,НастройкиРасчетаОтклоненийВыбранные=Неопределено,ОтображатьСуммыВДопВалютах=Неопределено,
	ОтображатьТолькоИтогиПоПериодам = Ложь,Периодичность = Неопределено,СкрыватьПустые=Истина,ПоляБазы = Неопределено) Экспорт
		
	Если ТипОбъекта = "Таблица" Тогда	
		ПолучитьФинальныеНастройкиТаблицы(ВыбранныеРесурсы,Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияСтрок,ИерархияКолонок,НастройкиРасчетаОтклоненийВыбранные,ОтображатьСуммыВДопВалютах,ОтображатьТолькоИтогиПоПериодам,Периодичность,СкрыватьПустые,ПоляБазы)		
	Иначе   
		ПолучитьФинальныеНастройкиДиаграммы(Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияСтрок,ИерархияКолонок,НастройкиРасчетаОтклоненийВыбранные)			
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПолучитьФинальныеНастройкиТаблицы(ВыбранныеРесурсы,Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияСтрок,ИерархияКолонок,НастройкиРасчетаОтклоненийВыбранные,ОтображатьСуммыВДопВалютах,ОтображатьТолькоИтогиПоПериодам,Периодичность,СкрыватьПустые,ПоляБазы);
	
	Настройки.Структура[0].Использование = Истина;
	Настройки.Структура[1].Использование = Ложь;
	Настройки.Структура[0].Строки.Очистить();
	Настройки.Структура[0].Колонки.Очистить();
	
	СоздатьСтруктуруСтрок(ВыбранныеРесурсы,Настройки,ТаблицаСтроки,ИерархияСтрок,НастройкиРасчетаОтклоненийВыбранные,ОтображатьСуммыВДопВалютах,ОтображатьТолькоИтогиПоПериодам,Периодичность,СкрыватьПустые);
	СоздатьСтруктуруКолонок(ВыбранныеРесурсы,Настройки,ТаблицаКолонки,ИерархияКолонок,НастройкиРасчетаОтклоненийВыбранные,ОтображатьСуммыВДопВалютах,ОтображатьТолькоИтогиПоПериодам,Периодичность,ПоляБазы);			
				
КонецПроцедуры

Процедура ПолучитьФинальныеНастройкиДиаграммы(Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияСтрок,ИерархияКолонок,НастройкиРасчетаОтклоненийВыбранные)
	
	Ресурсы =  Настройки.Выбор.Элементы;
	
	Настройки.Структура[1].Использование = Истина;
	Настройки.Структура[0].Использование = Ложь;
	Настройки.Структура[1].Серии.Очистить();
	Настройки.Структура[1].Точки.Очистить();
	НСерии = Настройки.Структура[1].Серии.Добавить();
	НСерии.Использование = Истина;
	
	Для Каждого Ресурс ИЗ НастройкиРасчетаОтклоненийВыбранные Цикл	
		Если Ресурс.Расчетный Тогда
			
			Если Ресурс.ВидОтклонения = "ОтнОтклонение"  Тогда
				НовЭлВыбор=НСерии.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+Ресурс.КодПоказателя);
				НовЭлВыбор.Использование=Истина;
			КонецЕсли;
			
			Если Ресурс.ВидОтклонения = "АбсОтклонение" Тогда
				НовЭлВыбор=НСерии.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+Ресурс.КодПоказателя);
				НовЭлВыбор.Использование=Истина;	
			КонецЕсли;
			
			Если Ресурс.ВидОтклонения = "Значение" Тогда		
				НовЭлВыбор=НСерии.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
				НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+Ресурс.КодПоказателя);
				НовЭлВыбор.Использование=Истина;	
			КонецЕсли;		
		Иначе			
			НовЭлВыбор=НСерии.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных(СокрЛП(Ресурс.КодПоказателя));
			НовЭлВыбор.Использование=Истина;	
		КонецЕсли;		
	
	КонецЦикла;
	
	Для Каждого СтрокаАналитики ИЗ ТаблицаСтроки Цикл		 
		
		Если  СтрокаАналитики.Код = "Фильтр_Отклонения"  Тогда
			Продолжить;
		КонецЕсли; 	  
		Если  СтрокаАналитики.Код = "Фильтр_Показатели_Колонки"  Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаАналитики.Код = "Фильтр_Периоды"  Тогда
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		Иначе
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		КонецЕсли; 
		НовЭлВыбор=НСерии.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
		НовЭлВыбор.Использование=Истина;
		
		НовПл=НСерии.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовПл.Использование=Истина;
		НовПл.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);	
		
	КонецЦикла;	 
	
	Нточки = Настройки.Структура[1].Точки.Добавить();
	Нточки.Использование = Истина;
	
	Для Каждого СтрокаАналитики ИЗ ТаблицаКолонки Цикл
		
		Если  СтрокаАналитики.Код = "Фильтр_Отклонения"  Тогда
			Продолжить;
		КонецЕсли; 	
		Если  СтрокаАналитики.Код = "Фильтр_Показатели_Колонки"  Тогда
			Продолжить;
		КонецЕсли; 
		Если СтрокаАналитики.Код = "Фильтр_Периоды"  Тогда
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		Иначе
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
		КонецЕсли; 
		
		НовЭлВыбор=Нточки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
		НовЭлВыбор.Использование=Истина;
		
		НовПл=Нточки.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовПл.Использование=Истина;
		НовПл.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
		
	КонецЦикла;		
	
	
КонецПроцедуры

Процедура СоздатьСтруктуруСтрок(Ресурсы,Настройки,ТаблицаСтроки,ИерархияСтрок,НастройкиРасчетаОтклоненийВыбранные,ОтображатьСуммыВДопВалютах,ОтображатьТолькоИтогиПоПериодам = Ложь,Периодичность = Неопределено,СкрыватьПустые = Истина)
	
	Если ИерархияСтрок Тогда	
		Для Каждого СтрокаАналитики ИЗ ТаблицаСтроки Цикл		 
			
			Если  СтрокаАналитики.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли; 	  									
			Если  СтрокаАналитики.Код = "Фильтр_Показатели_Колонки"  Тогда
				Продолжить;
			КонецЕсли; 
			
			Если   Настройки.Структура[0].Строки.Количество() = 0 Тогда
				Нгруппировка = Настройки.Структура[0].Строки.Добавить();
				Для Каждого Ресурс ИЗ Ресурсы Цикл
					НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя);
					НовЭлВыбор.Использование=Истина;
				КонецЦикла;	
			Иначе
				Нгруппировка = Нгруппировка.Структура.Добавить();	
				Для Каждого Ресурс ИЗ Ресурсы Цикл
					НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
					НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя);
					НовЭлВыбор.Использование=Истина;
				КонецЦикла;	
				
			КонецЕсли;
			
			Нгруппировка.Имя = СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
			
			НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
			НовЭлВыбор.Использование=Истина;
			НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НовПл.Использование=Истина;
			НовПл.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);	
			
			Если СтрокаАналитики.ПоддерживатьИерархию Тогда
				 НовПл.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия;
			КонецЕсли;	
			
			Если ПолеИмя = "Периоды" Тогда		
				НовПл.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия;
				Нгруппировка.ПараметрыВывода.Элементы[5].Использование=Истина;
				Нгруппировка.ПараметрыВывода.Элементы[5].Значение=РасположениеИтоговКомпоновкиДанных.Конец;	
				НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовПл.Использование=Истина;
				НовПл.Поле=Новый ПолеКомпоновкиДанных("ПериодыСвязанныйПериод");	
			КонецЕсли;
			
			Если ПолеИмя = "Показатели" Тогда
				НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовПл.Использование=Истина;
				НовПл.Поле=Новый ПолеКомпоновкиДанных("ПоказателиСтрокаОтчета");
			КонецЕсли;
			
			Нгруппировка.ПараметрыВывода.Элементы[9].Использование=Истина;
			Нгруппировка.ПараметрыВывода.Элементы[9].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
			Нгруппировка.ПараметрыВывода.Элементы[4].Использование=Истина;
			Нгруппировка.ПараметрыВывода.Элементы[4].Значение=РасположениеИтоговКомпоновкиДанных.Нет;	
			Нгруппировка.ПараметрыВывода.Элементы[12].Использование=Истина;
			Нгруппировка.ПараметрыВывода.Элементы[12].Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;	
			
			Если СтрокаАналитики.ПоддерживатьИерархию  Тогда
				НовПл.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия;
				Нгруппировка.ПараметрыВывода.Элементы[5].Использование=Истина;
				Нгруппировка.ПараметрыВывода.Элементы[5].Значение=РасположениеИтоговКомпоновкиДанных.Начало;	
				
				ЭлементУсловногоОформления =Нгруппировка.УсловноеОформление.Элементы.Добавить();
				
				Если ТипЗнч(СтрокаАналитики.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда
					
					Если Метаданные.НайтиПоТипу(СтрокаАналитики.ТипСубконто.ТипЗначения.Типы()[0]).Иерархический И Метаданные.НайтиПоТипу(СтрокаАналитики.ТипСубконто.ТипЗначения.Типы()[0]).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда		
						ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПолеИмя+".ЭтоГруппа");
						ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ПолеОтбора.ПравоеЗначение   = Истина;	
					ИначеЕсли Метаданные.НайтиПоТипу(СтрокаАналитики.ТипСубконто.ТипЗначения.Типы()[0]).Иерархический И Метаданные.НайтиПоТипу(СтрокаАналитики.ТипСубконто.ТипЗначения.Типы()[0]).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда		
						ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПолеИмя+"_ЭтоГруппа");
						ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						ПолеОтбора.ПравоеЗначение   = Истина;			
						ПолеОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.ТолькоИерархия;
						ЭлементУсловногоОформления.ИспользоватьВГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
					КонецЕсли;
					
				КонецЕсли;
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона",Новый Цвет(230,255,230));
			КонецЕсли;
						
			Если СкрыватьПустые Тогда
				ЭлементУсловногоОформления =Нгруппировка.УсловноеОформление.Элементы.Добавить();
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПолеИмя);
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("МаксимальнаяВысота", 1);
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеИмя);
				ОформляемоеПоле.Использование = Истина;
			КонецЕсли;
			
			Если (ТипЗнч(СтрокаАналитики.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") ИЛИ СтрокаАналитики.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты)
				И СтрокаАналитики.Редактируется Тогда
				
				Если ПолеИмя = "ДопВалюты" Тогда	
					ЭлементУсловногоОформления =Нгруппировка.УсловноеОформление.Элементы.Добавить();
					ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПолеИмя);
					ПолеОтбора.ПравоеЗначение =СтрокаАналитики.ТипСубконто.ТипЗначения.ПривестиЗначение();
					ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеИмя);
					ОформляемоеПоле.Использование = Истина;	
				ИначеЕсли ПолеИмя = "Проекты" Тогда		
					ЭлементУсловногоОформления =Нгруппировка.УсловноеОформление.Элементы.Добавить();
					ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПолеИмя);
					ПолеОтбора.ПравоеЗначение = Справочники.Проекты.ПустаяСсылка();
					ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеИмя);
					ОформляемоеПоле.Использование = Истина;
				Иначе	
					ЭлементУсловногоОформления =Нгруппировка.УсловноеОформление.Элементы.Добавить();
					ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных(ПолеИмя);
					ПолеОтбора.ПравоеЗначение =СтрокаАналитики.ТипСубконто.ТипЗначения.ПривестиЗначение();
					ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "<...>");
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеИмя);
					ОформляемоеПоле.Использование = Истина;			
				КонецЕсли;
		
			КонецЕсли;	
		КонецЦикла;	 	
	Иначе	
			
		Нгруппировка = Настройки.Структура[0].Строки.Добавить();
		Нгруппировка.Использование = Истина;
		Нгруппировка.ПараметрыВывода.Элементы[9].Использование=Истина;
		Нгруппировка.ПараметрыВывода.Элементы[9].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		Нгруппировка.ПараметрыВывода.Элементы[4].Использование=Истина;
		Нгруппировка.ПараметрыВывода.Элементы[4].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
        Нгруппировка.ПараметрыВывода.Элементы[12].Использование=Истина;
	    Нгруппировка.ПараметрыВывода.Элементы[12].Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;	
		
		Для Каждого СтрокаАналитики ИЗ ТаблицаСтроки Цикл		 
			
			Если  СтрокаАналитики.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли; 	  
			Если  СтрокаАналитики.Код = "Фильтр_Показатели_Колонки"  Тогда
				Продолжить;
			КонецЕсли; 
	
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
			
			НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
			НовЭлВыбор.Использование=Истина;
			
			НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НовПл.Использование=Истина;
			НовПл.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);	
			
			Если ПолеИмя = "Периоды" Тогда	
				НовПл.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия;
				Нгруппировка.ПараметрыВывода.Элементы[5].Использование=Истина;
				Нгруппировка.ПараметрыВывода.Элементы[5].Значение=РасположениеИтоговКомпоновкиДанных.Конец;	
				НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовПл.Использование=Истина;
				НовПл.Поле=Новый ПолеКомпоновкиДанных("ПериодыСвязанныйПериод");	
			КонецЕсли;
			
			Если ПолеИмя = "Показатели" Тогда
				НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовПл.Использование=Истина;
				НовПл.Поле=Новый ПолеКомпоновкиДанных("ПоказателиСтрокаОтчета");	
			КонецЕсли;
	
		КонецЦикла;	 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура СоздатьСтруктуруКолонок(Ресурсы,Настройки,ТаблицаКолонки,ИерархияСтрок,НастройкиРасчетаОтклоненийВыбранные,ОтображатьСуммыВДопВалютах,ОтображатьТолькоИтогиПоПериодам = Ложь,Периодичность = Неопределено, ПоляБазы = Неопределено);	
	
	Если ИерархияСтрок Тогда	
		Для Каждого СтрокаАналитики ИЗ ТаблицаКолонки Цикл
			
			Если  СтрокаАналитики.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли; 	
			Если  СтрокаАналитики.Код = "Фильтр_Показатели_Колонки"  Тогда
				Продолжить;
			КонецЕсли; 
			
			Если   Настройки.Структура[0].Колонки.Количество() = 0 Тогда
				Нгруппировка = Настройки.Структура[0].Колонки.Добавить();
			Иначе
				Нгруппировка = Нгруппировка.Структура.Добавить();	
			КонецЕсли;
			
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
			НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
			НовЭлВыбор.Использование=Истина;
			
			Нгруппировка.ПараметрыВывода.Элементы[12].Использование=Истина;
			Нгруппировка.ПараметрыВывода.Элементы[12].Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;	
			
			Если  ПоляБазы = Неопределено Тогда
				Для Каждого Ресурс Из НастройкиРасчетаОтклоненийВыбранные Цикл	
					Если Ресурс.Расчетный Тогда	
						Если Ресурс.ВидОтклонения = "ОтнОтклонение"  Тогда
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+Ресурс.КодПоказателя);
							НовЭлВыбор.Использование=Истина;
						КонецЕсли;
						
						Если Ресурс.ВидОтклонения = "АбсОтклонение" Тогда
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+Ресурс.КодПоказателя);
							НовЭлВыбор.Использование=Истина;	
						КонецЕсли;
						
						Если Ресурс.ВидОтклонения = "Значение" Тогда		
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+Ресурс.КодПоказателя);
							НовЭлВыбор.Использование=Истина;	
						КонецЕсли;			
					Иначе		
						НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных(СокрЛП(Ресурс.КодПоказателя));
						НовЭлВыбор.Использование=Истина;	
					КонецЕсли;				
				КонецЦикла;	
				
			Иначе		
				Для Каждого Ресурс Из ПоляБазы Цикл								
						НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных(СокрЛП(Ресурс.КодПоказателя));
						НовЭлВыбор.Использование=Истина;			
				КонецЦикла;	
			КонецЕсли;
			
			//Дополнительные валютные показатели
			Если НЕ ОтображатьСуммыВДопВалютах = Неопределено Тогда
				Если ОтображатьСуммыВДопВалютах Тогда
					Для Каждого Ресурс ИЗ Ресурсы Цикл
						Если НЕ Ресурс.Показатель.НеФинансовый Тогда
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя+"_ЗначениеВалюта");
							НовЭлВыбор.Использование=Истина;	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НовПл.Использование=Истина;
			НовПл.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
			
			Если ПолеИмя = "Периоды" Тогда
				
				НовПл.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия;
				Нгруппировка.ПараметрыВывода.Элементы[5].Использование=Истина;
				Нгруппировка.ПараметрыВывода.Элементы[5].Значение=РасположениеИтоговКомпоновкиДанных.Конец;		
				НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовПл.Использование=Истина;
				НовПл.Поле=Новый ПолеКомпоновкиДанных("ПериодыСвязанныйПериод");					
			КонецЕсли;
			
			
			Нгруппировка.ПараметрыВывода.Элементы[9].Использование=Истина;
			Нгруппировка.ПараметрыВывода.Элементы[9].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
			Нгруппировка.ПараметрыВывода.Элементы[8].Использование=Истина;
		    Нгруппировка.ПараметрыВывода.Элементы[8].Значение=РасположениеИтоговКомпоновкиДанных.Авто;		
		КонецЦикла;			
		
	Иначе	
		
		Нгруппировка = Настройки.Структура[0].Колонки.Добавить();
		Нгруппировка.Использование = Истина;
		Нгруппировка.ПараметрыВывода.Элементы[9].Использование=Истина;
		Нгруппировка.ПараметрыВывода.Элементы[9].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		Нгруппировка.ПараметрыВывода.Элементы[4].Использование=Истина;
		Нгруппировка.ПараметрыВывода.Элементы[4].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
		Нгруппировка.ПараметрыВывода.Элементы[12].Использование=Истина;
		Нгруппировка.ПараметрыВывода.Элементы[12].Значение=ТипВыводаТекстаКомпоновкиДанных.НеВыводить;	
		
		Для Каждого СтрокаАналитики ИЗ ТаблицаКолонки Цикл
			
			Если  СтрокаАналитики.Код = "Фильтр_Отклонения"  Тогда
				Продолжить;
			КонецЕсли; 	
			Если  СтрокаАналитики.Код = "Фильтр_Показатели_Колонки"  Тогда
				Продолжить;
			КонецЕсли; 
			
			ПолеИмя =СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
			
			НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
			НовЭлВыбор.Использование=Истина;
			
			Если  ПоляБазы = Неопределено ИЛИ ПоляБазы.Количество()=0 Тогда
				Для Каждого Ресурс Из НастройкиРасчетаОтклоненийВыбранные Цикл	
					Если Ресурс.Расчетный Тогда
						Если Ресурс.ВидОтклонения = "ОтнОтклонение"  Тогда
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+Ресурс.КодПоказателя);
							НовЭлВыбор.Использование=Истина;
						КонецЕсли;
						
						Если Ресурс.ВидОтклонения = "АбсОтклонение" Тогда
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+Ресурс.КодПоказателя);
							НовЭлВыбор.Использование=Истина;	
						КонецЕсли;
						
						Если Ресурс.ВидОтклонения = "Значение" Тогда		
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+Ресурс.КодПоказателя);
							НовЭлВыбор.Использование=Истина;	
						КонецЕсли;	
					Иначе			
						НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя);
						НовЭлВыбор.Использование=Истина;			
					КонецЕсли;				
				КонецЦикла;	
				
			Иначе
				Для Каждого Ресурс Из ПоляБазы Цикл							
						НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
						НовЭлВыбор.Поле= Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+Ресурс.КодПоказателя);
						НовЭлВыбор.Использование=Истина;			
				КонецЦикла;	
			КонецЕсли;


			///////////////////////////////////////
			
			//Дополнительные валютные показатели
			Если НЕ ОтображатьСуммыВДопВалютах = Неопределено Тогда
				Если ОтображатьСуммыВДопВалютах Тогда
					Для Каждого Ресурс ИЗ Ресурсы Цикл
						Если НЕ Ресурс.Показатель.НеФинансовый Тогда
							НовЭлВыбор=Нгруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
							НовЭлВыбор.Поле=Новый ПолеКомпоновкиДанных(Ресурс.КодПоказателя+"_ЗначениеВалюта");
							НовЭлВыбор.Использование=Истина;	
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			НовПл.Использование=Истина;
			НовПл.Поле=Новый ПолеКомпоновкиДанных(ПолеИмя);
						
			Если ПолеИмя = "Периоды" Тогда
				
				НовПл.ТипГруппировки=ТипГруппировкиКомпоновкиДанных.Иерархия;
				Нгруппировка.ПараметрыВывода.Элементы[5].Использование=Истина;
				Нгруппировка.ПараметрыВывода.Элементы[5].Значение=РасположениеГруппировкиКомпоновкиДАнных.Конец;		
				
				НовПл=Нгруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
				НовПл.Использование=Истина;
				НовПл.Поле=Новый ПолеКомпоновкиДанных("ПериодыСвязанныйПериод");	
												
			КонецЕсли;
			
		КонецЦикла;		
	
	КонецЕсли;	
		
КонецПроцедуры

Функция ПолучитьИсключаемыеПериоды(СтруктураПараметров) Экспорт
			
	ТекущаяШкалаПериодов                    = СтруктураПараметров.ТекущаяШкалаПериодов;
	ДатаНачалаДиапазона 					= СтруктураПараметров.ДатаНачалаДиапазона;
	ДатаОкончанияДиапазона 					= СтруктураПараметров.ДатаОкончанияДиапазона;
	ДатаГраницыОткрытогоПериода 			= СтруктураПараметров.ДатаГраницыОткрытогоПериода;
	ГраницаОткрытогоПериода 				= СтруктураПараметров.ГраницаОткрытогоПериода;
	ПериодичностьОсновная       			= СтруктураПараметров.ПериодичностьОсновная;
	ГраницаСреднесрочнойГруппировки 		= СтруктураПараметров.ГраницаСреднесрочнойГруппировки;
	ПериодичностьСреднесрочнойГруппировки  	= СтруктураПараметров.ПериодичностьСреднесрочнойГруппировки;
    ГраницаСреднесрочнойГруппировки 		= СтруктураПараметров.ГраницаСреднесрочнойГруппировки;
	ПериодичностьДолгосрочнойГруппировки  	= Неопределено;
    ГраницаДолгосрочнойГруппировки          = Неопределено;
	
	МассивИсключаемыхПериодов = Новый Массив;
		
	Если НЕ ЗначениеЗаполнено(ПериодичностьСреднесрочнойГруппировки) Тогда
		//Нет группировки периодов. Удаляем все итоги, кроме текущей периодичности
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШкалыПериодов КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность <> &Периодичность
		|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания <= &ДатаОкончания
		|	И Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Владелец = &Владелец	  ";
		
		Запрос.УстановитьПараметр("Периодичность"		,ПериодичностьОсновная);
		Запрос.УстановитьПараметр("ДатаНачала"			,ДатаНачалаДиапазона);
		Запрос.УстановитьПараметр("ДатаОкончания"		,КонецГода(ДатаОкончанияДиапазона));
		Запрос.УстановитьПараметр("Владелец"			,ТекущаяШкалаПериодов);
		
		Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Элемент Из Выборка Цикл
			МассивИсключаемыхПериодов.Добавить(Элемент);
		КонецЦикла;	
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ПериодичностьДолгосрочнойГруппировки) Тогда	
		//Удаляем итоги с ДатаНачалаДиапазона по ДатаГраницыОткрытогоПериода + ГраницаСреднесрочнойГруппировки
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШкалыПериодов КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность <> &Периодичность
		|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания <= &ДатаОкончания
		|	И Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Владелец = &Владелец	  ";
		
		Запрос.УстановитьПараметр("Периодичность"		,ПериодичностьОсновная);
		Запрос.УстановитьПараметр("ДатаНачала"			,ДатаНачалаДиапазона);
		Запрос.УстановитьПараметр("ДатаОкончания"		,ПолучитьДатуНачалаГруппировки(ПериодичностьОсновная,ГраницаОткрытогоПериода,ГраницаСреднесрочнойГруппировки));
		Запрос.УстановитьПараметр("Владелец"			,ТекущаяШкалаПериодов);
		
		
		Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Элемент Из Выборка Цикл
			МассивИсключаемыхПериодов.Добавить(Элемент);
		КонецЦикла;	

		//Оставляем только среднесрочные итоги с  ДатаГраницыОткрытогоПериода + ГраницаСреднесрочнойГруппировки по ДатаОкончанияДиапазона
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШкалыПериодов КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность <> &Периодичность
		//|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания >= &ДатаНачала
		|	И Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Владелец = &Владелец	  ";
		
		Запрос.УстановитьПараметр("Периодичность"		,ПериодичностьСреднесрочнойГруппировки);
		Запрос.УстановитьПараметр("ДатаНачала"			,ПолучитьДатуНачалаГруппировки(ПериодичностьОсновная,ГраницаОткрытогоПериода,ГраницаСреднесрочнойГруппировки));
		Запрос.УстановитьПараметр("ДатаОкончания"		,КонецГода(ДатаОкончанияДиапазона));
		Запрос.УстановитьПараметр("Владелец"			,ТекущаяШкалаПериодов);
		
		
		Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Элемент Из Выборка Цикл
			МассивИсключаемыхПериодов.Добавить(Элемент);
		КонецЦикла;	

	Иначе	
		
		//Удаляем итоги с ДатаНачалаДиапазона по ДатаГраницыОткрытогоПериода + ГраницаСреднесрочнойГруппировки
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШкалыПериодов КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность <> &Периодичность
		|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания <= &ДатаОкончания
		|	И Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Владелец = &Владелец	  ";
		
		Запрос.УстановитьПараметр("Периодичность"		,ПериодичностьОсновная);
		Запрос.УстановитьПараметр("ДатаНачала"			,ДатаНачалаДиапазона);
		Запрос.УстановитьПараметр("ДатаОкончания"		,ПолучитьДатуНачалаГруппировки(ПериодичностьСреднесрочнойГруппировки,ГраницаОткрытогоПериода,ГраницаСреднесрочнойГруппировки));
		Запрос.УстановитьПараметр("Владелец"			,ТекущаяШкалаПериодов);
		
		
		Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Элемент Из Выборка Цикл
			МассивИсключаемыхПериодов.Добавить(Элемент);
		КонецЦикла;	

		//Оставляем только среднесрочные итоги с  ДатаГраницыОткрытогоПериода + ГраницаСреднесрочнойГруппировки по Границу долгосрочной группировки
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШкалыПериодов КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность <> &Периодичность
		//|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания >= &ДатаНачала
		|	И Периоды.ДатаОкончания <= &ДатаОкончания
		|	И Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Владелец = &Владелец	  ";
		
		Запрос.УстановитьПараметр("Периодичность"		,ПериодичностьСреднесрочнойГруппировки);
		Запрос.УстановитьПараметр("ДатаНачала"			,ПолучитьДатуНачалаГруппировки(ПериодичностьСреднесрочнойГруппировки,ГраницаОткрытогоПериода,ГраницаСреднесрочнойГруппировки));
		Запрос.УстановитьПараметр("ДатаОкончания"		,ПолучитьДатуНачалаГруппировки(ПериодичностьДолгосрочнойГруппировки,ГраницаОткрытогоПериода,ГраницаДолгосрочнойГруппировки));
		Запрос.УстановитьПараметр("Владелец"			,ТекущаяШкалаПериодов);
		
		
		Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Элемент Из Выборка Цикл
			МассивИсключаемыхПериодов.Добавить(Элемент);
		КонецЦикла;	

		//Оставляем только долгосрочные итоги с  ДатаГраницыОткрытогоПериода + ГраницаДолгосрочнойГруппировки по конецпериода		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШкалыПериодов КАК Периоды
		|ГДЕ
		|	Периоды.Периодичность <> &Периодичность
		//|	И Периоды.ДатаНачала >= &ДатаНачала
		|	И Периоды.ДатаОкончания >= &ДатаНачала
		|	И Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Владелец = &Владелец	  ";
		
		Запрос.УстановитьПараметр("Периодичность"		,ПериодичностьДолгосрочнойГруппировки);
		Запрос.УстановитьПараметр("ДатаНачала"			,ПолучитьДатуНачалаГруппировки(ПериодичностьДолгосрочнойГруппировки,ГраницаОткрытогоПериода,ГраницаДолгосрочнойГруппировки));
		Запрос.УстановитьПараметр("Владелец"			,ТекущаяШкалаПериодов);
		
		
		Выборка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого Элемент Из Выборка Цикл
			МассивИсключаемыхПериодов.Добавить(Элемент);
		КонецЦикла;	

		
	КонецЕсли;
		
	Возврат МассивИсключаемыхПериодов;
		
КонецФункции	

Функция ПолучитьДатуНачалаГруппировки(Периодичность,ГраницаОткрытогоПериода,НачалоГруппировки)
	

	ПериодНачалаГруппиовки = УправлениеОтчетамиУХ.ПолучитьСледующийПериод(ГраницаОткрытогоПериода,НачалоГруппировки-1);

	ДатаГраницыНачалаГруппировки = ПериодНачалаГруппиовки.ДатаНачала;
	
	Если Периодичность = Перечисления.Периодичность.Месяц Тогда
		  ГраницаНачалаГруппировки = КонецМесяца(ДатаГраницыНачалаГруппировки)+1;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда	
		  ГраницаНачалаГруппировки = КонецНедели(ДатаГраницыНачалаГруппировки)+1;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда	
		  ГраницаНачалаГруппировки = КонецКвартала(ДатаГраницыНачалаГруппировки)+1;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Год Тогда	
		 ГраницаНачалаГруппировки = КонецГода(ДатаГраницыНачалаГруппировки)+1;
	Иначе	 
		 ГраницаНачалаГруппировки = ДатаГраницыНачалаГруппировки;
	КонецЕсли;	
	
	Возврат ГраницаНачалаГруппировки;
	
КонецФункции	


#Область ЗапросТаблицыЗначенийПоказателей

Функция ПолучитьСводныеДанные(СтруктураПараметров) Экспорт
	
	ТаблицаСтраницы		 		= СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ТаблицаСтроки		 		= СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки 		 		= СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	НастройкиРасчетаОтклонений 	= СтруктураПараметров.СтруктураТаблицИнтерфейса.ДополнительныеПоля;
	Показатели 					= СтруктураПараметров.СтруктураТаблицИнтерфейса.ВыбранныеПоказатели;
	ВидОтчета                   = СтруктураПараметров.СтруктураФильтровИтог.ВидОтчета;
	ВыбранныеРесурсы 			= СтруктураПараметров.ВыбранныеРесурсы;
	ТЗСтрок                     = СтруктураПараметров.ТЗСтрок;
	ТзКолонок                   = СтруктураПараметров.ТзКолонок;
	СтруктураФильтровИтог       = СтруктураПараметров.СтруктураФильтровИтог;
		
	
	Если СтруктураПараметров.Свойство("ТолькоМакет") Тогда
		ТолькоМакет = СтруктураПараметров.ТолькоМакет;
	Иначе
		ТолькоМакет = Ложь;
	КонецЕсли;	
	
	Если СтруктураПараметров.Свойство("РежимСравненияСБазой") Тогда
		РежимСравненияСБазой = СтруктураПараметров.РежимСравненияСБазой;
	Иначе
		РежимСравненияСБазой = Ложь;
	КонецЕсли;	

	Если СтруктураПараметров.Свойство("ОтображатьСуммыВДопВалютах") Тогда
		ОтображатьСуммуВДопВалютах = СтруктураПараметров.ОтображатьСуммыВДопВалютах;
	Иначе
		ОтображатьСуммуВДопВалютах = Ложь;
	КонецЕсли;	

	Если СтруктураПараметров.Свойство("СтруктураАналитикТекущейОбласти") Тогда
		СтруктураАналитикТекущейОбласти = СтруктураПараметров.СтруктураАналитикТекущейОбласти;
	Иначе
		СтруктураАналитикТекущейОбласти = Неопределено;
	КонецЕсли;	

	Если  СтруктураПараметров.Свойство("ПравилоРасчета") Тогда
		ПравилоРасчета =  СтруктураПараметров.ПравилоРасчета;
	Иначе	
		ПравилоРасчета =  Неопределено;
	КонецЕсли;
	
	Если СтруктураПараметров.Свойство("ЧерноваяВерсия") Тогда
		ЧерноваяВерсия 			= СтруктураПараметров.ЧерноваяВерсия;
		ИдентификаторСеанса     = СтруктураПараметров.ИдентификаторСеанса;
	Иначе
		ЧерноваяВерсия 			= Ложь;
		ИдентификаторСеанса     = Неопределено;
	КонецЕсли;	

	
	
	ОтборВерсий = 		Новый Соответствие;
	ОтборВерсийБаза = 	Новый Соответствие;
	ОтборПоказателей = 	Новый Соответствие;
	ОтборАналитик =	    Новый Соответствие;
	ПоляВыборки = 		Новый Соответствие;
	ЕстьОтборПоСтроке = Ложь;
	ТаблицаДопАналитик = Новый ТаблицаЗначений;
	ТаблицаДопАналитик.Колонки.Добавить("Код");
	ТаблицаДопАналитик.Колонки.Добавить("ТипСубконто");
	
	//Добавляем отбор по Периоду
	ОтборВерсий.Вставить("ПериодОтчета",ТзКолонок.ВыгрузитьКолонку("ПериодыСвязанныйПериод"));
	
	Для Каждого Страница из ТаблицаСтраницы Цикл	
		ИмяПоляФильтра = СтрЗаменить(Страница.Код,"Фильтр_","");	
		Если ИмяПоляФильтра = "Проекты" Тогда	
			ОтборВерсий.Вставить("Проект",СтруктураФильтровИтог[Страница.Код]);	
		ИначеЕсли ИмяПоляФильтра = "Организации" Тогда		
			ОтборВерсий.Вставить("Организация",СтруктураФильтровИтог[Страница.Код]);	
		ИначеЕсли ИмяПоляФильтра = "Сценарии" Тогда			
			ОтборВерсий.Вставить("Сценарий",СтруктураФильтровИтог[Страница.Код]);	
		ИначеЕсли ИмяПоляФильтра = "Валюты" Тогда		
			ОтборВерсий.Вставить("Валюта",СтруктураФильтровИтог[Страница.Код]);					
		ИначеЕсли ИмяПоляФильтра = "Показатели" Тогда				
			Если ТипЗнч(СтруктураФильтровИтог[Страница.Код]) = Тип("СправочникСсылка.НастройкиСтруктурыБланка") Тогда
				ОтборПоказателей.Вставить("ПоказательСтрокаОтчета",СтруктураФильтровИтог[Страница.Код].ПоказательОтчета);		
			Иначе	
				ОтборПоказателей.Вставить("ПоказательСтрокаОтчета",СтруктураФильтровИтог[Страница.Код]);	
			КонецЕсли;	
			ПоляВыборки.Вставить("Показатели","Показатели");
			ЕстьОтборПоСтроке = Истина;	
		ИначеЕсли ИмяПоляФильтра = "Показатели_Колонки" Тогда		
			Продолжить;	
		Иначе 	
			ОтборАналитик.Вставить(ИмяПоляФильтра,СтруктураФильтровИтог[Страница.Код]);	
			нДопАналитика = ТаблицаДопАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(нДопАналитика,Страница);
		КонецЕсли;		
	КонецЦикла;
	
	Если ТолькоМакет Тогда
		 ОтборВерсий.Вставить("Валюта",Справочники.Валюты.ПустаяСсылка());
	КонецЕсли;	
		
	
	Если НЕ ЕстьОтборПоСтроке Тогда
		ОтборПоказателей.Вставить("ПоказательОтчета",Показатели);	
	КонецЕсли;
	
	Для Каждого Строка Из ТаблицаСтроки Цикл		
		
		ИмяПоляФильтра = СтрЗаменить(Строка.Код,"Фильтр_","");
		
		Если ИмяПоляФильтра = "Показатели_Колонки" Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляВыборки.Вставить(ИмяПоляФильтра,ИмяПоляФильтра);		 
		
		Если ИмяПоляФильтра = "Проекты"  ИЛИ ИмяПоляФильтра = "Сценарии" ИЛИ ИмяПоляФильтра = "Организации" ИЛИ  ИмяПоляФильтра = "Проекты" ИЛИ
			ИмяПоляФильтра = "Валюты" ИЛИ ИмяПоляФильтра = "Периоды" ИЛИ  ИмяПоляФильтра = "Показатели"  ИЛИ ИмяПоляФильтра = "Показатели_Колонки" ИЛИ ИмяПоляФильтра = "Отклонения"   Тогда
			Продолжить;
		КонецЕсли;	  
		
		нДопАналитика = ТаблицаДопАналитик.Добавить();
		
		ЗаполнитьЗначенияСвойств(нДопАналитика,Строка);
	КонецЦикла;
	
	Для Каждого Колонка Из ТаблицаКолонки Цикл		
		ИмяПоляФильтра = СтрЗаменить(Колонка.Код,"Фильтр_","");
		Если ИмяПоляФильтра = "Показатели_Колонки" Тогда
			Продолжить;
		КонецЕсли;
		
		ПоляВыборки.Вставить(ИмяПоляФильтра,ИмяПоляФильтра);		 
		
		Если ИмяПоляФильтра = "Проекты"  ИЛИ ИмяПоляФильтра = "Сценарии" ИЛИ ИмяПоляФильтра = "Организации" ИЛИ  ИмяПоляФильтра = "Проекты" ИЛИ
			ИмяПоляФильтра = "Валюты" ИЛИ ИмяПоляФильтра = "Периоды" ИЛИ  ИмяПоляФильтра = "Показатели"  ИЛИ ИмяПоляФильтра = "Отклонения" Тогда
			Продолжить;
		КонецЕсли;
		нДопАналитика = ТаблицаДопАналитик.Добавить();
		ЗаполнитьЗначенияСвойств(нДопАналитика,Колонка);
	КонецЦикла;		
		
	ПоляВыборки.Вставить("Значение","Значение");
	
	Для Каждого Рес Из ВыбранныеРесурсы Цикл
		ПоляВыборки.Вставить(Рес.КодПоказателя,Рес.КодПоказателя);
	КонецЦикла;
	
	СтруктураПараметров_ = Новый Структура;                                                 
	СтруктураПараметров_.Вставить("ОтборВерсий",ОтборВерсий);
	СтруктураПараметров_.Вставить("ОтборПоказателей",ОтборПоказателей);
	СтруктураПараметров_.Вставить("ОтборАналитик",ОтборАналитик);
	СтруктураПараметров_.Вставить("ТаблицаДопАналитик",ТаблицаДопАналитик);
    СтруктураПараметров_.Вставить("ПоляВыборки",ПоляВыборки);
	СтруктураПараметров_.Вставить("ВыбранныеРесурсы",ВыбранныеРесурсы);
    СтруктураПараметров_.Вставить("ВыбранныеСтроки",ОтборПоказателей);
    СтруктураПараметров_.Вставить("ДополнительныеПараметры",Неопределено);                           
	СтруктураПараметров_.Вставить("НастройкиРасчетаОтклонений",НастройкиРасчетаОтклонений);
	СтруктураПараметров_.Вставить("СтруктураТаблицИнтерфейса",СтруктураПараметров.СтруктураТаблицИнтерфейса);
	СтруктураПараметров_.Вставить("СтруктураФильтровИтог",СтруктураФильтровИтог);	
	СтруктураПараметров_.Вставить("ВидОтчета",ВидОтчета);
	СтруктураПараметров_.Вставить("ОтображатьСуммуВДопВалютах",ОтображатьСуммуВДопВалютах);
	СтруктураПараметров_.Вставить("Периодичность",СтруктураПараметров.Периодичность);
	СтруктураПараметров_.Вставить("ТЗСтрок",ТЗСтрок);	
	СтруктураПараметров_.Вставить("ТзКолонок",ТзКолонок);	
	СтруктураПараметров_.Вставить("РежимСравненияСБазой",РежимСравненияСБазой);
	СтруктураПараметров_.Вставить("СтруктураАналитикТекущейОбласти",СтруктураАналитикТекущейОбласти);
    СтруктураПараметров_.Вставить("ТолькоМакет",ТолькоМакет);	
	СтруктураПараметров_.Вставить("ЧерноваяВерсия",ЧерноваяВерсия);
	СтруктураПараметров_.Вставить("ИдентификаторСеанса",ИдентификаторСеанса);
	
	НастройкиРасчетаОтклонений 			= СтруктураПараметров_.СтруктураТаблицИнтерфейса.ДополнительныеПоля;
	НастройкиРасчетаОтклоненийВыбранные = НастройкиРасчетаОтклонений.НайтиСтроки(Новый Структура("Использовать,Расчетный",Истина,Истина));

	ТЗданные = ПолучитьЗапросДанныхСТ(СтруктураПараметров_);	
		
	Возврат ТЗданные;
		
КонецФункции

Процедура ПолучитьРасшифровкуГруппировок(ПолеИлиГруппировка,СтруктураПолей) Экспорт
	
	МассивРодителей = ПолеИлиГруппировка.ПолучитьРодителей();
    Для Каждого Стр из МассивРодителей Цикл
        Если ТипЗнч(Стр) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда 
            ПолучитьРасшифровкуГруппировок(Стр,СтруктураПолей);
        ИначеЕсли ТипЗнч(Стр) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
            ПоляГруппировки = Стр.ПолучитьПоля();
            Для Каждого гСтр из ПоляГруппировки Цикл
                Если СтруктураПолей.Свойство(гСтр.Поле) Тогда
					Если Не ЗначениеЗаполнено(СтруктураПолей[гСтр.Поле]) Тогда
                        СтруктураПолей[гСтр.Поле] = гСтр.Значение;
					КонецЕсли;
                КонецЕсли;
				ПолучитьРасшифровкуГруппировок(Стр,СтруктураПолей);
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьРасшифровкуГруппировокИерархия(ПолеИлиГруппировка,СтруктураПолей) Экспорт
	
	МассивРодителей = ПолеИлиГруппировка.ПолучитьРодителей();
    Для Каждого Стр из МассивРодителей Цикл
        Если ТипЗнч(Стр) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда 
            ПолучитьРасшифровкуГруппировок(Стр,СтруктураПолей);
        ИначеЕсли ТипЗнч(Стр) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
            ПоляГруппировки = Стр.ПолучитьПоля();
            Для Каждого гСтр из ПоляГруппировки Цикл
                Если СтруктураПолей.Свойство(гСтр.Поле) Тогда
					Если Не ЗначениеЗаполнено(СтруктураПолей[гСтр.Поле]) Тогда
                        СтруктураПолей[гСтр.Поле] = гСтр.Значение;
					КонецЕсли;
                КонецЕсли;
            КонецЦикла;
        КонецЕсли;
    КонецЦикла;
	
КонецПроцедуры

#Область ГенерацияЗапросаДанныхДляСводнойТаблицы

Функция ПолучитьЗапросДанныхСТ(СтруктураПараметров,ТестовыйМакет = Ложь)
	
	НастройкиРасчетаОтклонений 			= СтруктураПараметров.СтруктураТаблицИнтерфейса.ДополнительныеПоля;
	Если СтруктураПараметров.РежимСравненияСБазой Тогда
		НастройкиРасчетаОтклоненийВыбранные = СтруктураПараметров.СтруктураТаблицИнтерфейса.БазаДляОтклонений.НайтиСтроки(Новый Структура("Использовать,Расчетный",Истина,Истина));
	Иначе	
		НастройкиРасчетаОтклоненийВыбранные = НастройкиРасчетаОтклонений.НайтиСтроки(Новый Структура("Использовать,Расчетный",Истина,Истина));
	КонецЕсли;

	ЕстьДополнительныеДанные = НастройкиРасчетаОтклоненийВыбранные.Количество()>0;
	
	КэшАналитикПоказателей = СтруктураПараметров.СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
		
	СхемаЗапроса = Новый СхемаЗапроса;
	Запрос = Новый Запрос;
	
	КэшПоказателей = Неопределено;
	КэшАналитик    = Неопределено;
	
	//Получим таблицу комбинаций для всех строк, без учета колонок
	КопируемыеКолонкиДляТаблицыСтрок   = "";
	КопируемыеКолонкиДляТаблицыКолонок = "";
	
	Для Каждого Кол Из СтруктураПараметров.ТЗСтрок.Колонки Цикл 
		Если СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Кол.Имя)).Количество() =1 Тогда
			КопируемыеКолонкиДляТаблицыКолонок = КопируемыеКолонкиДляТаблицыКолонок+Кол.Имя+",";
			Продолжить;
		КонецЕсли;	
		КопируемыеКолонкиДляТаблицыСтрок = КопируемыеКолонкиДляТаблицыСтрок+Кол.Имя+",";
	КонецЦикла;
	
	КопируемыеКолонкиДляТаблицыСтрок = ЛЕВ(КопируемыеКолонкиДляТаблицыСтрок,СтрДлина(КопируемыеКолонкиДляТаблицыСтрок)-1);
	КопируемыеКолонкиДляТаблицыКолонок = ЛЕВ(КопируемыеКолонкиДляТаблицыКолонок,СтрДлина(КопируемыеКолонкиДляТаблицыКолонок)-1);

	ТзСтрокМакета = СтруктураПараметров.ТЗСтрок.Скопировать(,КопируемыеКолонкиДляТаблицыСтрок);
	ТзСтрокМакета.Свернуть(КопируемыеКолонкиДляТаблицыСтрок);
	
	СтруктураПараметров.Вставить("ТзСтрокМакета",ТзСтрокМакета);
	
	//Получим таблицу комбинаций для всех аналитик, выведенных в колонки (без учета периодов)
	Если ЗначениеЗаполнено(КопируемыеКолонкиДляТаблицыКолонок) Тогда
		ТзКолонокМакета = СтруктураПараметров.ТЗСтрок.Скопировать(,КопируемыеКолонкиДляТаблицыКолонок);
		ТзКолонокМакета.Свернуть(КопируемыеКолонкиДляТаблицыКолонок);	
	Иначе	
		ТзКолонокМакета = СтруктураПараметров.ТЗСтрок.СкопироватьКолонки();
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ТзКолонокМакета",ТзКолонокМакета);

	//Получим предварительные таблицы, сгруппированные по количеству и составу нужных аналитик, для формирования основного текста запроса
    ПолучитьПредварительныйЗапрос(СтруктураПараметров,КэшПоказателей,КэшАналитик);	
	
	//Получим макет сводной таблицы
	ПолучитьПодзапросМакетаТаблицы(Запрос);
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
		
	//Добавим выбранные поля в подзапрос макета
	ИзменитьПодзапросМакетаТаблицы(Запрос,СхемаЗапроса,СтруктураПараметров);
	
	//Получим текущую версию данных
	ПолучитьПодзапросТекущейВерсии(Запрос,СхемаЗапроса,СтруктураПараметров);
		
	//Получим дополнительные версии показателей, для работы с отклонениями
	Для Каждого ДопБаза Из  НастройкиРасчетаОтклоненийВыбранные Цикл
		ПолучитьПодзапросДополнительнойВерсии(Запрос,ДопБаза,СхемаЗапроса,СтруктураПараметров);
	КонецЦикла;	
			
	ЕстьНечисловые   = КэшАналитик.НайтиСтроки(Новый Структура("ТипЗначенияЧисло",Ложь)).Количество() >0;
	ТолькоНечисловые = КэшАналитик.НайтиСтроки(Новый Структура("ТипЗначенияЧисло",Истина)).Количество()=0;
	
	//Для каждой группы показателей, для каждой базы - получим отдельный подзапрос	
	СтруктураПоиска = Новый Структура;
		
	ТекстШаблонаЗапроса = "";	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
	
		Нечисловые = НЕ ГруппаПоказателей.ТипЗначенияЧисло;	
		ИдГруппы = СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
		
		Для Каждого Кол Из КэшАналитик.Колонки Цикл
			СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
		Конеццикла;	
		
		Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
			 СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
		КонецЕсли;	
		
		ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
		ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
		ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	
		ДанныеТекущегоЗапроса.Свернуть("СтрокаОтчета");
		СтрокиТекущегоЗАпроса     =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("СтрокаОтчета");
		Если  ПоказателиТекущегоЗапроса.Количество()= 0 Тогда
			  Продолжить;
		КонецЕсли;	
		
		ДобавитьВыражениеПолученияДанных(ТекстШаблонаЗапроса,Запрос,ГруппаПоказателей,СхемаЗапроса,СтруктураПараметров,ИдГруппы,НастройкиРасчетаОтклоненийВыбранные,Нечисловые);
		
		//Получим запросы для каждой дополнительной версии данных
		Для Каждого ДопБаза Из  НастройкиРасчетаОтклоненийВыбранные Цикл
			ДобавитьДопВыражениеПолученияДанных(ТекстШаблонаЗапроса,ДопБаза,Запрос,ГруппаПоказателей,СхемаЗапроса,СтруктураПараметров,ИдГруппы,НастройкиРасчетаОтклоненийВыбранные,Нечисловые);
		КонецЦикла;	

		Запрос.Параметры.Вставить("ОтборПоказателей_"+ИдГруппы,ПоказателиТекущегоЗапроса);
		Запрос.Параметры.Вставить("ОтборСтрок_"+ИдГруппы,СтрокиТекущегоЗАпроса);	
	КонецЦикла;	
				
	Если НастройкиРасчетаОтклоненийВыбранные.Количество()=0 Тогда
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"втДанныеПредварительные","втДанные");
	КонецЕсли;

	ТекстЗапроса = ТекстЗапроса+ ТекстШаблонаЗапроса;	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	
	//Если были расчетные поля - добавим в пакет подзапрос группировки по базе
	Если НастройкиРасчетаОтклоненийВыбранные.Количество()>0 Тогда
		 ПолучитьГруппировкуСБазой(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные);
	КонецЕсли;	
		
	//Отдельно запрос по комментанриям показателей 
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	ТекстШаблонаЗапроса = "";
	
	Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
				
		ИдГруппы = СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
		Для Каждого Кол Из КэшАналитик.Колонки Цикл
			СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
		Конеццикла;	
		
		Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
			 СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
		КонецЕсли;	
		
		ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
		ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
		ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	
		ДанныеТекущегоЗапроса.Свернуть("СтрокаОтчета");
		СтрокиТекущегоЗАпроса     =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("СтрокаОтчета");
		
		Если  ПоказателиТекущегоЗапроса.Количество()= 0 Тогда
			  Продолжить;
		КонецЕсли;	
		
		ДобавитьВыражениеПолученияКомментариевДанных(ТекстШаблонаЗапроса,Запрос,ГруппаПоказателей,СхемаЗапроса,СтруктураПараметров,ИдГруппы,НастройкиРасчетаОтклоненийВыбранные);
		
		Запрос.Параметры.Вставить("ОтборПоказателей_"+ИдГруппы,ПоказателиТекущегоЗапроса);
		Запрос.Параметры.Вставить("ОтборСтрок_"+ИдГруппы,СтрокиТекущегоЗАпроса);	
	КонецЦикла;	

	ТекстЗапроса = ТекстЗапроса+ ТекстШаблонаЗапроса;	
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
              	
	ПолучитьПодзапросМакетаСтрок(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные,ЕстьНечисловые);	
	ПолучитьПодзапросМакетаСтрокИКолонок(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные);
	
	//Финальный запрос, соединения со стаусами показателей и статусами УОП  
	ПолучитьФинальныйПодзапрос(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные,ЕстьНечисловые);
		
	ТекстЗапроса =  СхемаЗапроса.ПолучитьТекстЗапроса();	
	
	ДополнитьТекстФинальногоЗапроса(ТекстЗапроса,СтруктураПараметров);	
	
	Запрос.Текст =  ТекстЗапроса;	
	
	Запрос.Параметры.Вставить("ВидОтчета",СтруктураПараметров.ВидОтчета);
	Запрос.Параметры.Вставить("ТзСтрокМакета",ТзСтрокМакета);
	Запрос.Параметры.Вставить("ТзКолонокМакета",ТзКолонокМакета);
	Запрос.Параметры.Вставить("ТЗПериодов",СтруктураПараметров.ТЗКолонок);
	
	//Пакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции

Процедура ПолучитьПредварительныйЗапрос(СтруктураПараметров,КэшПоказателей,КэшАналитик) 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 0
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 6
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 0
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 1
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 2
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 3
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 4
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 5
	               |				ИНАЧЕ 6
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ГруппаРаскрытияЧислоАналитик,
	               |	ПоказателиОтчетов.Строка КАК СтрокаОтчета,
	               |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыЗначенийПоказателейОтчетов.Число)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТипЗначенияЧисло,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт
	               |	КОНЕЦ КАК АналитикаВалюта
	               |ПОМЕСТИТЬ втАналитикиПоказателей
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Строка В(&Строка)
	               |	И ПоказателиОтчетов.Владелец В(&ВидОтчета)
	               |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
	               |	И ПоказателиОтчетов.Колонка В(&Колонка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втАналитикиПоказателей.ГруппаРаскрытияЧислоАналитик КАК ГруппаРаскрытияЧислоАналитик,
	               |	втАналитикиПоказателей.ТипЗначенияЧисло КАК ТипЗначенияЧисло,
	               |	втАналитикиПоказателей.АналитикаВалюта КАК АналитикаВалюта
	               |ИЗ
	               |	втАналитикиПоказателей КАК втАналитикиПоказателей";
	
	СхемаЗапросаКэшАналитик = Новый СхемаЗапроса;
	СхемаЗапросаКэшАналитик.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого Кол Из СтруктураПараметров.ТЗСтрок.Колонки Цикл
		
		НужнаяАналитика = СтруктураПараметров.СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",Кол.Имя));	
		Если НужнаяАналитика.Количество()=1 Тогда		
			Если ТипЗнч(НужнаяАналитика[0].НазначениеАналитики) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда
				
				Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[0];
				нОператор = Нпакет.Операторы[0];
				//Указываем выбираемые поля
				ТекстПолей = "";
				ТекстОкончанияПолей = "	0 ";
				Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					ТекстПолей = ТекстПолей + "
					|	ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+" = &ВидАналитики_"+Кол.Имя+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики"+Инд+" = &ВидАналитики_"+Кол.Имя+" ТОГДА "+Инд+" ИНАЧЕ";	
					ТекстОкончанияПолей = ТекстОкончанияПолей +" КОНЕЦ ";
				КонецЦикла;
				
				//Указываем выбираемые поля
				нОператор.ВыбираемыеПоля.Добавить(ТекстПолей+ТекстОкончанияПолей);
					
				//Указываем псевдонимы для выбранных полей
				Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Кол.Имя;
				Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[1];
				нОператор = Нпакет.Операторы[0];
                нОператор.ВыбираемыеПоля.Добавить("втАналитикиПоказателей.ВидАналитики_"+Кол.Имя);
			
				Запрос.Параметры.Вставить("ВидАналитики_"+Кол.Имя,НужнаяАналитика[0].НазначениеАналитики);
				
			КонецЕсли;			
		КонецЕсли;				
	КонецЦикла; 	
				   
	Запрос.Текст = СхемаЗапросаКэшАналитик.ПолучитьТекстЗапроса();
	Запрос.Параметры.Вставить("ВидОтчета",СтруктураПараметров.ВидОтчета);
	
	Если СтруктураПараметров.СтруктураФильтровИтог.Свойство("Фильтр_Показатели") И ЗначениеЗаполнено(СтруктураПараметров.СтруктураФильтровИтог.Фильтр_Показатели) Тогда
		Запрос.Параметры.Вставить("Строка",СтруктураПараметров.СтруктураФильтровИтог.Фильтр_Показатели);
	Иначе	
		Запрос.Параметры.Вставить("Строка",СтруктураПараметров.СтруктураТаблицИнтерфейса.КэшАналитикПоказателей.ВыгрузитьКолонку("Строка"));
	КонецЕсли;	
	
	Запрос.Параметры.Вставить("Колонка",СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы.ВыгрузитьКолонку("Ресурс"));			   
	
	КэшПоказателейПакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();	
	КэшПоказателей 		=  КэшПоказателейПакет[0].Выгрузить();	
	КэшАналитик   	    =  КэшПоказателейПакет[1].Выгрузить();
		
КонецПроцедуры	

Процедура ПолучитьПодзапросТекущейВерсии(Запрос,СхемаЗапроса,СтруктураПараметров) Экспорт

	Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
	нОператор = Нпакет.Операторы[0];
	нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	нОператор.Источники.Добавить("Справочник.ВерсииЗначенийПоказателей");
	
	Нпакет.ТаблицаДляПомещения = "мВерсииБаза0";
	
	//Указываем выбираемые поля
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Ссылка");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Сценарий");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Проект");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.ПериодОтчета");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Валюта");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Организация");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.ВидОтчета");
	
	//Указываем псевдонимы для выбранных полей
	Нпакет.Колонки[0].Псевдоним = "Версия";	
	//Проиндексируем по ссылке
	Нпакет.Индекс.Добавить(Нпакет.Колонки[0]);
		
	нОператор.Отбор.Добавить("ВерсииЗначенийПоказателей.ВидОтчета В (&ВидОтчета)");	             
	

	Если НЕ СтруктураПараметров.ЧерноваяВерсия Тогда
		нОператор.Отбор.Добавить("НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия");
	Иначе	
		нОператор.Отбор.Добавить("((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)");
        Запрос.Параметры.Вставить("ИдентификаторСеанса",СтруктураПараметров.ИдентификаторСеанса);
	КонецЕсли;	
	
	//Отборы базовой версии по ключевым измерениям
	Для Каждого КлючВерсии Из СтруктураПараметров.ОтборВерсий Цикл
		нОператор.Отбор.Добавить("ВерсииЗначенийПоказателей."+КлючВерсии.Ключ+" В (&"+КлючВерсии.Ключ+"База0" +")");
		Запрос.Параметры.Вставить(КлючВерсии.Ключ+"База0",КлючВерсии.Значение);
	КонецЦикла;	    
	
КонецПроцедуры	

Процедура ПолучитьПодзапросДополнительнойВерсии(Запрос,ДопБаза,СхемаЗапроса,СтруктураПараметров)
	
	Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
	нОператор = Нпакет.Операторы[0];
	нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	нОператор.Источники.Добавить("Справочник.ВерсииЗначенийПоказателей");
	
	Нпакет.ТаблицаДляПомещения = "втВерсииБаза_"+ДопБаза.ИндексПоказателя;
	
	//Указываем выбираемые поля
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Ссылка");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Сценарий");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Проект");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.ПериодОтчета");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Валюта");
	нОператор.ВыбираемыеПоля.Добавить("ВерсииЗначенийПоказателей.Организация");
	
	//Указываем псевдонимы для выбранных полей
	Нпакет.Колонки[0].Псевдоним = "Версия";
		
	//Проиндексируем по ссылке
	Нпакет.Индекс.Добавить(Нпакет.Колонки[0]);
	
	нОператор.Отбор.Добавить("ВерсииЗначенийПоказателей.ВидОтчета В (&ВидОтчета)");

	Если НЕ СтруктураПараметров.ЧерноваяВерсия Тогда
		нОператор.Отбор.Добавить("НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия");
	Иначе	
		нОператор.Отбор.Добавить("((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)");
        Запрос.Параметры.Вставить("ИдентификаторСеанса",СтруктураПараметров.ИдентификаторСеанса);
	КонецЕсли;	
	
	Для Каждого КлючВерсии Из СтруктураПараметров.ОтборВерсий Цикл
		нОператор.Отбор.Добавить("ВерсииЗначенийПоказателей."+КлючВерсии.Ключ+" В (&"+КлючВерсии.Ключ+"База_"+ ДопБаза.ИндексПоказателя +")");
		Запрос.Параметры.Вставить(КлючВерсии.Ключ+"База_"+ДопБаза.ИндексПоказателя,КлючВерсии.Значение);
	КонецЦикла;	
	
	//Отборы дополнительной версии по ключевым измерениям
	Если НЕ ДопБаза.Сценарии = "Значение источника" Тогда
		Запрос.Параметры.Вставить("СценарийБаза_"+ДопБаза.ИндексПоказателя,ДопБаза.Сценарии);
	КонецЕсли;	
	
	Если НЕ ДопБаза.Организации = "Значение источника" Тогда
		нОператор.Отбор.Добавить("ВерсииЗначенийПоказателей.Организация В (&ОрганизацияБаза_"+ ДопБаза.ИндексПоказателя +")");
		Запрос.Параметры.Вставить("ОрганизацияБаза_"+ДопБаза.ИндексПоказателя,ДопБаза.Организации);
	КонецЕсли;	
	
	Если НЕ ДопБаза.Проекты = "Значение источника" Тогда
		нОператор.Отбор.Добавить("ВерсииЗначенийПоказателей.Проект В (&ПроектБаза_"+ ДопБаза.ИндексПоказателя +")");
		Запрос.Параметры.Вставить("ПроектБаза_"+ДопБаза.ИндексПоказателя,ДопБаза.Проекты);
	КонецЕсли;	

	Если ТипЗнч(ДопБаза.Периоды) = Тип("СправочникСсылка.Периоды") Тогда
		Запрос.Параметры.Вставить("ПериодОтчетаБаза_"+ДопБаза.ИндексПоказателя,ДопБаза.Периоды);
		
		Нпакет.ТаблицаДляПомещения = "втВремВерсииБаза_"+ДопБаза.ИндексПоказателя;
		
		ТзПериодовСоСдвигом = Новый ТаблицаЗначений;
		ТзПериодовСоСдвигом.Колонки.Добавить("ИндексБазы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));	
		ТзПериодовСоСдвигом.Колонки.Добавить("ИсходныйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериодДатаНачала",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТзПериодовСоСдвигом.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
				
		ИсходныеПериоды = СтруктураПараметров.ОтборВерсий.Получить("ПериодОтчета");
		
		Для Каждого иПериод Из ИсходныеПериоды Цикл	       
			нПериод = ТзПериодовСоСдвигом.Добавить();
			нПериод.ИндексБазы = ДопБаза.ИндексПоказателя;
			нПериод.БазовыйПериод  = ДопБаза.Периоды;
			нПериод.ИсходныйПериод = иПериод;
			нПериод.Периодичность = СтруктураПараметров.Периодичность;
		КонецЦикла;

	
		Запрос.УстановитьПараметр("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя,ТзПериодовСоСдвигом);
		Запрос.Параметры.Вставить("ПериодОтчетаБаза_"+ДопБаза.ИндексПоказателя,ТзПериодовСоСдвигом.ВыгрузитьКолонку("БазовыйПериод"));
		
		Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
		нОператор = Нпакет.Операторы[0];
		нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
		
		нОператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя,"ТзПериодовСоСдвигом");
		Нпакет.ТаблицаДляПомещения = "ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя;
		
		нОператор.ВыбираемыеПоля.Добавить("ТзПериодовСоСдвигом.БазовыйПериод");
		нОператор.ВыбираемыеПоля.Добавить("ТзПериодовСоСдвигом.ИсходныйПериод");
		
		Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
		нОператор = Нпакет.Операторы[0];
		нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;

		ИсточникДанные = нОператор.Источники.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя);
		ИсточникДанные = нОператор.Источники.Добавить("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя);	
	   		
		нОператор.Источники[0].Соединения.Добавить("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя,"втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+
		".ПериодОтчета = ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя+".БазовыйПериод");
		нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Версия");
		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Сценарий");
		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Проект");
		нОператор.ВыбираемыеПоля.Добавить("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя+".ИсходныйПериод");
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ПериодОтчета";	
		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Валюта");
        нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Организация");
		
		Нпакет.ТаблицаДляПомещения = "втВерсииБаза_"+ДопБаза.ИндексПоказателя;

	КонецЕсли;	
	
	Если Найти(ДопБаза.Периоды,"Сдвиг")>0 Тогда
		
		Нпакет.ТаблицаДляПомещения = "втВремВерсииБаза_"+ДопБаза.ИндексПоказателя;
		
		ТзПериодовСоСдвигом = Новый ТаблицаЗначений;
		ТзПериодовСоСдвигом.Колонки.Добавить("ИндексБазы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));	
		ТзПериодовСоСдвигом.Колонки.Добавить("ИсходныйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериодДатаНачала",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТзПериодовСоСдвигом.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
		
		Сдвиг = Число(СтрЗаменить(ДопБаза.Периоды,НСтр("ru = 'Сдвиг по периоду: '"),""));
		ЗаполнитьТаблицуПериодов(ДопБаза.ИндексПоказателя,ТзПериодовСоСдвигом,Сдвиг,СтруктураПараметров.ОтборВерсий.Получить("ПериодОтчета"),СтруктураПараметров.Периодичность);
		Запрос.УстановитьПараметр("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя,ТзПериодовСоСдвигом);
		Запрос.Параметры.Вставить("ПериодОтчетаБаза_"+ДопБаза.ИндексПоказателя,ТзПериодовСоСдвигом.ВыгрузитьКолонку("БазовыйПериод"));
		
		Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
		нОператор = Нпакет.Операторы[0];
		нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
		
		нОператор.Источники.Добавить(Тип("ОписаниеВременнойТаблицыСхемыЗапроса"),"&ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя,"ТзПериодовСоСдвигом");
		Нпакет.ТаблицаДляПомещения = "ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя;
		
		нОператор.ВыбираемыеПоля.Добавить("ТзПериодовСоСдвигом.БазовыйПериод");
		нОператор.ВыбираемыеПоля.Добавить("ТзПериодовСоСдвигом.ИсходныйПериод");
		
		Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
		нОператор = Нпакет.Операторы[0];
		нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;

		ИсточникДанные = нОператор.Источники.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя);
		ИсточникДанные = нОператор.Источники.Добавить("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя);	
	   		
		нОператор.Источники[0].Соединения.Добавить("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя,"втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+
		".ПериодОтчета = ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя+".БазовыйПериод");
		нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Версия");
		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Сценарий");
		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Проект");
		нОператор.ВыбираемыеПоля.Добавить("ТзПериодовСоСдвигом_"+ДопБаза.ИндексПоказателя+".ИсходныйПериод");
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ПериодОтчета";	
		нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Валюта");
        нОператор.ВыбираемыеПоля.Добавить("втВремВерсииБаза_"+ДопБаза.ИндексПоказателя+".Организация");
		
		Нпакет.ТаблицаДляПомещения = "втВерсииБаза_"+ДопБаза.ИндексПоказателя;
	
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПолучитьПодзапросМакетаТаблицы(Запрос)
	
	Запрос.Текст ="
	|ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ втСтроки
	|ИЗ
	|	&ТзСтрокМакета КАК Строки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды_.Периоды,
	|	Периоды_.ПериодыСвязанныйПериод
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	&ТЗПериодов КАК Периоды_
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| *
	|ПОМЕСТИТЬ втМакетТаблицы
	|ИЗ
	|	втСтроки КАК втСтроки
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| *
	|ПОМЕСТИТЬ втМакетКолонокПредв
	|ИЗ
	|	&ТзКолонокМакета КАК втКолонки";
	
КонецПроцедуры

Процедура ИзменитьПодзапросМакетаТаблицы(Запрос,СхемаЗапроса,СтруктураПараметров)
	
    Нпакет = СхемаЗапроса.ПакетЗапросов[0];
	нОператор = Нпакет.Операторы[0];

	//Указываем выбираемые поля
	Для Каждого Поле Из СтруктураПараметров.ТЗСтрокМакета.Колонки Цикл
		нОператор.ВыбираемыеПоля.Добавить("Строки."+Поле.Имя);	
	КонецЦикла;
	
	Нпакет = СхемаЗапроса.ПакетЗапросов[2];
	нОператор = Нпакет.Операторы[0];

	ИсточникДанных = нОператор.Источники.Добавить("Справочник.ПоказателиОтчетов");
	
	//Получаем ссылки на показатели и колонки
	нОператор.Источники[0].Соединения.Добавить("ПоказателиОтчетов","втСтроки.ПоказателиСтрокаОтчета = ПоказателиОтчетов.Строка");
	нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	нОператор.ВыбираемыеПоля.Добавить("ПоказателиОтчетов.Ссылка");
    Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ПоказательСсылка";
	
	нОператор.ВыбираемыеПоля.Добавить("ПоказателиОтчетов.Колонка");
    Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ПоказательКолонка";

	нОператор.ВыбираемыеПоля.Добавить("ПоказателиОтчетов.ВидИтога");
    Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидИтога";
	
	нОператор.ВыбираемыеПоля.Добавить("ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду");
    Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "СпособРасчетаИтогаПоПериоду";

	нОператор.ВыбираемыеПоля.Добавить("ПоказателиОтчетов.ТипЗначения");
    Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ТипЗначения";

	нОператор.ВыбираемыеПоля.Добавить("ВЫРАЗИТЬ (ВтСтроки.Показатели КАК Справочник.НастройкиСтруктурыБланка).глПорядковыйНомер");
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "СтрокаПорядковыйНомер";

	
	//Указываем выбираемые поля
	Для Каждого Поле Из СтруктураПараметров.ТЗСтрокМакета.Колонки Цикл
		Если СтруктураПараметров.СтруктураФильтровИтог.Свойство("Фильтр_"+Поле.Имя) Тогда
			нОператор.ВыбираемыеПоля.Добавить("&"+Поле.Имя);
			Запрос.Параметры.Вставить(Поле.Имя,СтруктураПараметров.СтруктураФильтровИтог["Фильтр_"+Поле.Имя]);
		Иначе	
			
			Если  НЕ Поле.ТипЗначения.Типы().Найти(Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные")) = НЕОПРЕДЕЛЕНО Тогда
				нОператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА втСтроки."+Поле.Имя +" IS NULL ТОГДА НЕОПРЕДЕЛЕНО ИНАЧЕ втСтроки."+Поле.Имя +" КОНЕЦ");
				Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;
			Иначе
				нОператор.ВыбираемыеПоля.Добавить("втСтроки."+Поле.Имя);
				Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Нпакет = СхемаЗапроса.ПакетЗапросов[3];
	нОператор = Нпакет.Операторы[0];
	//Указываем выбираемые поля
	Для Каждого Поле Из СтруктураПараметров.ТЗКолонокМакета.Колонки Цикл
		Если СтруктураПараметров.СтруктураФильтровИтог.Свойство("Фильтр_"+Поле.Имя) Тогда
			нОператор.ВыбираемыеПоля.Добавить("&"+Поле.Имя);
			Запрос.Параметры.Вставить(Поле.Имя,СтруктураПараметров.СтруктураФильтровИтог["Фильтр_"+Поле.Имя]);
		Иначе	
			нОператор.ВыбираемыеПоля.Добавить("втКолонки."+Поле.Имя);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВыражениеПолученияДанных(ТекстШаблонаЗапроса,Запрос,ГруппаПоказателей,СхемаЗапроса,СтруктураПараметров,ИдГруппы,НастройкиРасчетаОтклоненийВыбранные,Нечисловые);
	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|;
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		| &&ТекстВыбираемыхПолей
		| ПОМЕСТИТЬ втДанныеПредварительные
		|ИЗ
		| втМакетТаблицы КАК втМакетТаблицы
		|	ЛЕВОЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|	ПО &&ВыражениеСоединенияСДанными
		|ГДЕ
		|	втМакетТаблицы.ПоказательСсылка В (&&ОтборПоказателей)";
		
	Иначе
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		| &&ТекстВыбираемыхПолей
		|
		|ИЗ
		| втМакетТаблицы КАК втМакетТаблицы
		|	ЛЕВОЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|	ПО &&ВыражениеСоединенияСДанными
		|ГДЕ
		|	втМакетТаблицы.ПоказательСсылка В (&&ОтборПоказателей)";

	КонецЕсли;
		
	ЧислоАналитикГруппы = ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		Если ЗначениеЗАполнено(ГруппаПоказателей.АналитикаВалюта) Тогда 	
			ЧислоАналитикГруппы = "Валютные";
		Иначе	
			ЧислоАналитикГруппы = "Синтетика";
		КонецЕсли;
	КонецЕсли;	
	
	Если Нечисловые Тогда
		  ЧислоАналитикГруппы = "Нечисловые";
	КонецЕсли;	
	
	//Добавляем соединения
	ВыражениеСоединенияСДанными  = ПолучитьТекстСоединенияМакетаСДанными(ГруппаПоказателей,СтруктураПараметров.СтруктураТаблицИнтерфейса,ЧислоАналитикГруппы,ИдГруппы);
	ВыражениеСоединенияСВерсиями = ПолучитьТекстСоединенияМакетаСВерсиями(ГруппаПоказателей,СтруктураПараметров.СтруктураТаблицИнтерфейса,ЧислоАналитикГруппы,ИдГруппы);
   	
	
	//Периоды всегда выбираем из значений
	ТекстВыбираемыхПолей = "";
	ТекстВыбираемыхПолей = "ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.ПериодОтчета КАК ПериодыСвязанныйПериод,";
		
	Для Каждого Поле Из СтруктураПараметров.ТЗСтрок.Колонки Цикл
		
		ПолеРедактируется = Ложь;
		НужнаяСтрока = СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));	
		Если НужнаяСтрока.Количество() =1 Тогда
			ПолеРедактируется = НужнаяСтрока[0].Редактируется;
		КонецЕсли;		
		
		Если НЕ СтруктураПараметров.СтруктураАналитикТекущейОбласти = Неопределено Тогда
			Если СтруктураПараметров.СтруктураАналитикТекущейОбласти.Свойство(Поле.Имя) И ЗначениеЗаполнено(СтруктураПараметров.СтруктураАналитикТекущейОбласти[Поле.Имя]) Тогда
				 ПолеРедактируется = Ложь;
			КонецЕсли;	
		КонецЕсли;	
				
		НужнаяКолонка =  СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));	
		Если НужнаяКолонка.Количество() =1 Тогда
			ПолеРедактируется = Истина;
		КонецЕсли;	
				
		Если НЕ ПолеРедактируется Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|втМакетТаблицы."+Поле.Имя+",";
		Иначе			
			ИндексАналитки = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Поле.Имя) = Неопределено Тогда	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Поле.Имя];	
			КонецЕсли;
			Если Поле.Имя = "ДопВалюты" Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитки = "Валюта";	
				Иначе
					ИндексАналитки = 0;
				КонецЕсли; 	 
			КонецЕсли;	
			
			Если Поле.Имя = "Организации" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Организация КАК "+Поле.Имя+",";		
			ИначеЕсли Поле.Имя = "Проекты" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Проект КАК "+Поле.Имя+",";				
			ИначеЕсли Поле.Имя = "Сценарии" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Сценарий КАК "+Поле.Имя+",";
			Иначе	
				Если ИндексАналитки = 0 Тогда 		
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|НЕОПРЕДЕЛЕНО КАК "+Поле.Имя+",";	
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" КАК "+Поле.Имя+",";	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;					
	КонецЦикла;              
	
   	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ПоказательСсылка,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ПоказательКолонка,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ВидИтога,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.СпособРасчетаИтогаПоПериоду,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.СтрокаПорядковыйНомер,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ТипЗначения,";
	
	
	Если Нечисловые Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ВЫБОР КОГДА ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Значение = Истина ТОГДА 1 ИНАЧЕ 0 КОНЕЦ  КАК Значение,";
	Иначе	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Значение КАК Значение,";
	КонецЕсли;
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|NULL КАК ЗначениеНеЧисло,";

	Если СтруктураПараметров.ОтображатьСуммуВДопВалютах  Тогда
		Если ЧислоАналитикГруппы = "Синтетика" Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|0 КАК ЗначениеВалюта,";
		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".ЗначениеВалюта КАК ЗначениеВалюта,";
		КонецЕсли;			
	КонецЕсли;	
	
	Для Каждого дПоле Из НастройкиРасчетаОтклоненийВыбранные Цикл			
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|0 КАК Значение_База_"+дПоле.ИндексПоказателя+",";	
	КонецЦикла;	
			
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|NULL КАК Комментарий,";

	
	//Если был установлен отобр на уровне фильтра по неключевой аналитике - добавляем его в запрос
	Для Каждого Стр Из СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			ЗначениеОтбора =  СтруктураПараметров.СтруктураФильтровИтог[Стр.Код];
			ИмяПоляОтбора  =  СтрЗаменить(Стр.Код,"Фильтр_","");
				Если ИмяПоляОтбора = "ДопВалюты" Тогда	
					ИндексАналитки = "Валюта";	
					ВыражениеСоединенияСДанными = ВыражениеСоединенияСДанными+"
					|И ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" = &Параметр_"+ИмяПоляОтбора;		
				Иначе
					
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
					Если НЕ ИндексАналитки = 0 Тогда
						ВыражениеСоединенияСДанными = ВыражениеСоединенияСДанными+"
						|И ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" = &Параметр_"+ИмяПоляОтбора;
					КонецЕсли;				
					
				КонецЕсли;		
			Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);	
		КонецЕсли;		
	КонецЦикла;
	
	ТекстВыбираемыхПолей = ЛЕВ(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-1);
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","мВерсииБаза0");
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+" КАК "+"ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСВерсиями",ВыражениеСоединенияСВерсиями);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСДанными" ,ВыражениеСоединенияСДанными);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстВыбираемыхПолей" ,ТекстВыбираемыхПолей);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборПоказателей" ,"&ОтборПоказателей_"+ИдГруппы);
		
КонецПроцедуры	

Процедура ДобавитьДопВыражениеПолученияДанных(ТекстШаблонаЗапроса,ДопБаза,Запрос,ГруппаПоказателей,СхемаЗапроса,СтруктураПараметров,ИдГруппы,НастройкиРасчетаОтклоненийВыбранные,Нечисловые);
		
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|;
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		| &&ТекстВыбираемыхПолей
		| ПОМЕСТИТЬ втДанныеПредварительные
		|ИЗ
		| втМакетТаблицы КАК втМакетТаблицы
		|	ЛЕВОЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|	ПО &&ВыражениеСоединенияСДанными
		|ГДЕ
		|	втМакетТаблицы.ПоказательСсылка В (&&ОтборПоказателей)";
		
	Иначе
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		| &&ТекстВыбираемыхПолей
		|
		|ИЗ
		| втМакетТаблицы КАК втМакетТаблицы
		|	ЛЕВОЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|	ПО &&ВыражениеСоединенияСДанными
		|ГДЕ
		|	втМакетТаблицы.ПоказательСсылка В (&&ОтборПоказателей)";

	КонецЕсли;
	
	
	ЧислоАналитикГруппы = ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		Если ЗначениеЗАполнено(ГруппаПоказателей.АналитикаВалюта) Тогда 	
			ЧислоАналитикГруппы = "Валютные";
		Иначе	
			ЧислоАналитикГруппы = "Синтетика";
		КонецЕсли;
	КонецЕсли;	

	Если Нечисловые Тогда
		 ЧислоАналитикГруппы = "Нечисловые";
	КонецЕсли;	

	
	//Добавляем соединения
	ВыражениеСоединенияСДанными  = ПолучитьТекстСоединенияМакетаСДанными(ГруппаПоказателей,СтруктураПараметров.СтруктураТаблицИнтерфейса,ЧислоАналитикГруппы,ИдГруппы);
	ВыражениеСоединенияСВерсиями = ПолучитьТекстСоединенияМакетаСВерсиями(ГруппаПоказателей,СтруктураПараметров.СтруктураТаблицИнтерфейса,ЧислоАналитикГруппы,ИдГруппы,ДопБаза.ИндексПоказателя);
   	
	//Периоды всегда выбираем из значений
	ТекстВыбираемыхПолей = "";
    ТекстВыбираемыхПолей = "втВерсииБаза_"+ДопБаза.ИндексПоказателя+".ПериодОтчета КАК ПериодыСвязанныйПериод,";
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|ЛОЖЬ КАК ЗначениеИзЛога,";

	
	Для Каждого Поле Из СтруктураПараметров.ТЗСтрок.Колонки Цикл
		
		ПолеРедактируется = Ложь;
		НужнаяСтрока = СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));	
		Если НужнаяСтрока.Количество() =1 Тогда
			ПолеРедактируется = НужнаяСтрока[0].Редактируется;
		КонецЕсли;		
		
		НужнаяКолонка =  СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));	
		Если НужнаяКолонка.Количество() =1 Тогда
			ПолеРедактируется = Истина;
		КонецЕсли;	
		
		Если НЕ ПолеРедактируется Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|втМакетТаблицы."+Поле.Имя+",";
		Иначе			
			ИндексАналитки = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Поле.Имя) = Неопределено Тогда	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Поле.Имя];	
			КонецЕсли;
			Если Поле.Имя = "ДопВалюты" Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитки = "Валюта";	
				Иначе
					ИндексАналитки = 0;
				КонецЕсли; 	 
			КонецЕсли;	
			Если Поле.Имя = "Организации" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Организация КАК "+Поле.Имя+",";		
			ИначеЕсли Поле.Имя = "Проекты" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Проект КАК "+Поле.Имя+",";				
			ИначеЕсли Поле.Имя = "Сценарии" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Сценарий КАК "+Поле.Имя+",";
			Иначе	
				Если ИндексАналитки = 0 Тогда 		
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|НЕОПРЕДЕЛЕНО КАК "+Поле.Имя+",";	
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+",";	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;					
	КонецЦикла;              
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ПоказательСсылка,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ПоказательКолонка,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ВидИтога,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.СпособРасчетаИтогаПоПериоду,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"                                    
	|втМакетТаблицы.СтрокаПорядковыйНомер,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ТипЗначения,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|0 КАК Значение,";

    ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|NULL КАК ЗначениеНеЧисло,";

	Если СтруктураПараметров.ОтображатьСуммуВДопВалютах  Тогда
		Если ЧислоАналитикГруппы = "Синтетика" Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|0 КАК ЗначениеВалюта,";
		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".ЗначениеВалюта КАК ЗначениеВалюта,";
		КонецЕсли;			
	КонецЕсли;	
	
	Для Каждого дПоле Из НастройкиРасчетаОтклоненийВыбранные Цикл
		
		Если дПоле.ИндексПоказателя = ДопБаза.ИндексПоказателя Тогда	
			Если Нечисловые Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ВЫБОР КОГДА ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Значение= Истина ТОГДА 1 ИНАЧЕ 0 КОНЕЦ КАК Значение_База_"+дПоле.ИндексПоказателя+",";
			Иначе
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Значение КАК Значение_База_"+дПоле.ИндексПоказателя+",";
			КонецЕсли;
		Иначе		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|0 КАК Значение_База_"+дПоле.ИндексПоказателя+",";	
		КонецЕсли;
		
	КонецЦикла;	

	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|NULL КАК Комментарий,";
	
	
	//Если был установлен отобр на уровне фильтра по неключевой аналитике - добавляем его в запрос
	Для Каждого Стр Из СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			ЗначениеОтбора =  СтруктураПараметров.СтруктураФильтровИтог[Стр.Код];
			ИмяПоляОтбора  =  СтрЗаменить(Стр.Код,"Фильтр_","");
				
				Если ИмяПоляОтбора = "ДопВалюты" Тогда	
					ИндексАналитки = "Валюта";	
					ВыражениеСоединенияСДанными = ВыражениеСоединенияСДанными+"
					|И ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" = &Параметр_"+ИмяПоляОтбора;		
				Иначе
					
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
					Если НЕ ИндексАналитки = 0 Тогда
						ВыражениеСоединенияСДанными = ВыражениеСоединенияСДанными+"
						|И ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" = &Параметр_"+ИмяПоляОтбора;
					КонецЕсли;				
					
				КонецЕсли;		
				
				Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);	
		КонецЕсли;		
	КонецЦикла;

	
	ТекстВыбираемыхПолей = ЛЕВ(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-1);
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","втВерсииБаза_"+ДопБаза.ИндексПоказателя);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+" КАК "+"ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСВерсиями",ВыражениеСоединенияСВерсиями);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСДанными" ,ВыражениеСоединенияСДанными);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстВыбираемыхПолей" ,ТекстВыбираемыхПолей);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборПоказателей" ,"&ОтборПоказателей_"+ИдГруппы);
	
КонецПроцедуры	

Процедура ДобавитьВыражениеПолученияКомментариевДанных(ТекстШаблонаЗапроса,Запрос,ГруппаПоказателей,СхемаЗапроса,СтруктураПараметров,ИдГруппы,НастройкиРасчетаОтклоненийВыбранные);
		
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда
		
		ТекстШаблонаЗапроса = "
		|;
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		| &&ТекстВыбираемыхПолей
		| ПОМЕСТИТЬ втДанныеКомментарии
		|ИЗ
		| втМакетТаблицы КАК втМакетТаблицы
		|	ЛЕВОЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|	ПО &&ВыражениеСоединенияСДанными
		|ГДЕ
		|	втМакетТаблицы.ПоказательСсылка В (&&ОтборПоказателей)";
		
	Иначе
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		| &&ТекстВыбираемыхПолей
		|
		|ИЗ
		| втМакетТаблицы КАК втМакетТаблицы
		|	ЛЕВОЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|	ПО &&ВыражениеСоединенияСДанными
		|ГДЕ
		|	втМакетТаблицы.ПоказательСсылка В (&&ОтборПоказателей)";

	КонецЕсли;
	
    ЧислоАналитикГруппы = "Комментарии";

	//Добавляем соединения
	ВыражениеСоединенияСДанными  = ПолучитьТекстСоединенияМакетаСДанными(ГруппаПоказателей,СтруктураПараметров.СтруктураТаблицИнтерфейса,ЧислоАналитикГруппы,ИдГруппы);
	ВыражениеСоединенияСВерсиями = ПолучитьТекстСоединенияМакетаСВерсиями(ГруппаПоказателей,СтруктураПараметров.СтруктураТаблицИнтерфейса,ЧислоАналитикГруппы,ИдГруппы);
   	
	
	//Периоды всегда выбираем из значений
	ТекстВыбираемыхПолей = "";
	ТекстВыбираемыхПолей = "КомментарииЗначенийПоказателей.Версия.ПериодОтчета КАК ПериодыСвязанныйПериод,";
		
	Для Каждого Поле Из СтруктураПараметров.ТЗСтрок.Колонки Цикл
		
		ПолеРедактируется = Ложь;
		НужнаяСтрока = СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));	
		Если НужнаяСтрока.Количество() =1 Тогда
			ПолеРедактируется = НужнаяСтрока[0].Редактируется;
		КонецЕсли;		
		
		НужнаяКолонка =  СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаКолонки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));	
		Если НужнаяКолонка.Количество() =1 Тогда
			ПолеРедактируется = Истина;
		КонецЕсли;	
		
		Если НЕ ПолеРедактируется Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|втМакетТаблицы."+Поле.Имя+",";
		Иначе			
			ИндексАналитки = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Поле.Имя) = Неопределено Тогда	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Поле.Имя];	
			КонецЕсли;
			Если Поле.Имя = "ДопВалюты" Тогда
				 ИндексАналитки = "Валюта";
			КонецЕсли;
			Если Поле.Имя = "Организации" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Организация КАК "+Поле.Имя+",";		
			ИначеЕсли Поле.Имя = "Проекты" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Проект КАК "+Поле.Имя+",";				
			ИначеЕсли Поле.Имя = "Сценарии" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Версия.Сценарий КАК "+Поле.Имя+",";
			Иначе	
				Если ИндексАналитки = 0 Тогда 		
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|НЕОПРЕДЕЛЕНО КАК "+Поле.Имя+",";	
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" КАК "+Поле.Имя+",";	
				КонецЕсли;	
			КонецЕсли;	
		КонецЕсли;					
	КонецЦикла;              
	
   	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ПоказательСсылка,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ПоказательКолонка,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ВидИтога,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.СпособРасчетаИтогаПоПериоду,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.СтрокаПорядковыйНомер,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|втМакетТаблицы.ТипЗначения,";

	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|0 КАК Значение,";
	
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|0 КАК ЗначениеНеЧисло,";

	Если СтруктураПараметров.ОтображатьСуммуВДопВалютах Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|NULL КАК ЗначениеВалюта,";	
	КонецЕсли;
	
	Для Каждого дПоле Из НастройкиРасчетаОтклоненийВыбранные Цикл			
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|0 КАК Значение_База_"+дПоле.ИндексПоказателя+",";	
	КонецЦикла;	
			
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Комментарий КАК Комментарий,";
	
	//Если был установлен отобр на уровне фильтра по неключевой аналитике - добавляем его в запрос
	Для Каждого Стр Из СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
		Если ТипЗнч(Стр.ТипСубконто) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда	
			ЗначениеОтбора =  СтруктураПараметров.СтруктураФильтровИтог[Стр.Код];
			ИмяПоляОтбора  =  СтрЗаменить(Стр.Код,"Фильтр_","");
				Если ИмяПоляОтбора = "ДопВалюты" Тогда	
					ИндексАналитки = "Валюта";	
					ВыражениеСоединенияСДанными = ВыражениеСоединенияСДанными+"
					|И ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" = &Параметр_"+ИмяПоляОтбора;		
				Иначе
					
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
					Если НЕ ИндексАналитки = 0 Тогда
						ВыражениеСоединенияСДанными = ВыражениеСоединенияСДанными+"
						|И ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Аналитика"+ИндексАналитки+" = &Параметр_"+ИмяПоляОтбора;
					КонецЕсли;				
					
				КонецЕсли;		
			Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);	
		КонецЕсли;		
	КонецЦикла;
	
	ТекстВыбираемыхПолей = ЛЕВ(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-1);
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","мВерсииБаза0");
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+" КАК "+"ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСВерсиями",ВыражениеСоединенияСВерсиями);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСДанными" ,ВыражениеСоединенияСДанными);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстВыбираемыхПолей" ,ТекстВыбираемыхПолей);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборПоказателей" ,"&ОтборПоказателей_"+ИдГруппы);
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"ЗначенияПоказателейОтчетовКомментарии" ,"КомментарииЗначенийПоказателей");
	
КонецПроцедуры	

Процедура ПолучитьГруппировкуСБазой(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные);
	
	Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
	нОператор = Нпакет.Операторы[0];
	нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	ИсточникМакета = нОператор.Источники.Добавить("втДанныеПредварительные");
	
	//Группировка по нередактируемым полям измерений
	нОператор.Группировка.Добавить("втДанныеПредварительные.ПериодыСвязанныйПериод");
    нОператор.Группировка.Добавить("втДанныеПредварительные.ПоказательСсылка");
    нОператор.Группировка.Добавить("втДанныеПредварительные.ПоказательКолонка");
	нОператор.Группировка.Добавить("втДанныеПредварительные.ПоказателиСтрокаОтчета");
	нОператор.Группировка.Добавить("втДанныеПредварительные.ВидИтога");
	нОператор.Группировка.Добавить("втДанныеПредварительные.СпособРасчетаИтогаПоПериоду");
	нОператор.Группировка.Добавить("втДанныеПредварительные.СтрокаПорядковыйНомер");
	нОператор.Группировка.Добавить("втДанныеПредварительные.ТипЗначения");

	//Указываем выбираемые поля
	нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.ПериодыСвязанныйПериод");
	Для Каждого Поле Из СтруктураПараметров.ТЗСтрок.Колонки Цикл	
		
		ПолеРедактируется = Ложь;
		Нполе = СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_"+Поле.Имя));
		
		Если Нполе.Количество() = 1 Тогда
			ПолеРедактируется = Нполе[0].Редактируется;
		КонецЕсли;	
		нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные."+Поле.Имя);	
		нОператор.Группировка.Добавить("втДанныеПредварительные."+Поле.Имя);
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;	
	КонецЦикла;
	
	
	нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.ПоказательСсылка");
	нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.ПоказательКолонка");
    нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.ВидИтога");
	нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.СпособРасчетаИтогаПоПериоду");
	нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.СтрокаПорядковыйНомер");
	нОператор.ВыбираемыеПоля.Добавить("втДанныеПредварительные.ТипЗначения");
	
	нОператор.ВыбираемыеПоля.Добавить("СУММА(втДанныеПредварительные.Значение)");
	Если СтруктураПараметров.ОтображатьСуммуВДопВалютах Тогда
		 нОператор.ВыбираемыеПоля.Добавить("СУММА(втДанныеПредварительные.ЗначениеВалюта)");
	КонецЕсли;	
	
	нОператор.ВыбираемыеПоля.Добавить("МАКСИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)");

	Для Каждого дПоле Из НастройкиРасчетаОтклоненийВыбранные Цикл
		нОператор.ВыбираемыеПоля.Добавить("СУММА(втДанныеПредварительные."+"Значение_База_"+дПоле.ИндексПоказателя+")");
	КонецЦикла;	
	
	нОператор.ВыбираемыеПоля.Добавить("МАКСИМУМ(втДанныеПредварительные.Комментарий)");
	
	Нпакет.ТаблицаДляПомещения = "втДанные";
	
КонецПроцедуры	

Процедура ПолучитьПодзапросМакетаСтрок(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные,ЕстьНечисловые);
	
	Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
	нОператор = Нпакет.Операторы[0];
	нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	
	ИсточникДанные = нОператор.Источники.Добавить("втДанные");	
		
	//Указываем выбираемые поля
	Для Каждого Поле Из СтруктураПараметров.ТзСтрокМакета.Колонки Цикл	
		нОператор.ВыбираемыеПоля.Добавить("втДанные."+Поле.Имя);	
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;	
		нОператор.Группировка.Добавить("втДанные."+Поле.Имя);
	КонецЦикла;
	
	нОператор.ВыбираемыеПоля.Добавить("втДанные.ПоказательСсылка");	
	нОператор.Группировка.Добавить("втДанные.ПоказательСсылка");
	нОператор.ВыбираемыеПоля.Добавить("втДанные.ПоказательКолонка");
	нОператор.Группировка.Добавить("втДанные.ПоказательКолонка");
	нОператор.ВыбираемыеПоля.Добавить("втДанные.ВидИтога");
	нОператор.Группировка.Добавить("втДанные.ВидИтога");
	нОператор.ВыбираемыеПоля.Добавить("втДанные.СпособРасчетаИтогаПоПериоду");
	нОператор.Группировка.Добавить("втДанные.СпособРасчетаИтогаПоПериоду");	
	нОператор.ВыбираемыеПоля.Добавить("втДанные.СтрокаПорядковыйНомер");
	нОператор.Группировка.Добавить("втДанные.СтрокаПорядковыйНомер");	
	нОператор.ВыбираемыеПоля.Добавить("втДанные.ТипЗначения");
	нОператор.Группировка.Добавить("втДанные.ТипЗначения");
	
	Нпакет.ТаблицаДляПомещения = "втМакетСтрок";
	
КонецПроцедуры
	
Процедура ПолучитьПодзапросМакетаСтрокИКолонок(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные);
	
	Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
	нОператор = Нпакет.Операторы[0];
	нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	
	ИсточникДанные = нОператор.Источники.Добавить("втМакетСтрок");	
	ИсточникДанные = нОператор.Источники.Добавить("втМакетКолонокПредв");	
	ИсточникДанные = нОператор.Источники.Добавить("втПериоды");
		
	нОператор.Источники[0].Соединения.Добавить("втМакетКолонокПредв","ИСТИНА");
    нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	
	нОператор.Источники[0].Соединения.Добавить("втПериоды","ИСТИНА");
    нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	
	//Указываем выбираемые поля
	Для Каждого Поле Из СтруктураПараметров.ТзСтрокМакета.Колонки Цикл	
		нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок."+Поле.Имя);	
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;	
	КонецЦикла;
	
	Если СтруктураПараметров.ТзКолонокМакета.Количество()>0 Тогда
		Для Каждого Поле Из СтруктураПараметров.ТзКолонокМакета.Колонки Цикл	
			нОператор.ВыбираемыеПоля.Добавить("втМакетКолонокПредв."+Поле.Имя);	
			Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;	
		КонецЦикла;
	КонецЕсли;
	
	нОператор.ВыбираемыеПоля.Добавить("втПериоды.Периоды");	
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "Периоды";	

	нОператор.ВыбираемыеПоля.Добавить("втПериоды.ПериодыСвязанныйПериод");	
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ПериодыСвязанныйПериод";	
	
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок.ПоказательСсылка");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок.ПоказательКолонка");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок.ВидИтога");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок.СпособРасчетаИтогаПоПериоду");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок.СтрокаПорядковыйНомер");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрок.ТипЗначения");
	
	Нпакет.ТаблицаДляПомещения = "втМакетСтрокИКолонок";
	
КонецПроцедуры

Процедура ПолучитьФинальныйПодзапрос(СхемаЗапроса,СтруктураПараметров,НастройкиРасчетаОтклоненийВыбранные,ЕстьНечисловые);
	
	Нпакет = СхемаЗапроса.ПакетЗапросов.Добавить();
	нОператор = Нпакет.Операторы[0];
	нОператор.ТипОбъединения = ТипОбъединенияСхемыЗапроса.ОбъединитьВсе;
	
	ИсточникМакета = нОператор.Источники.Добавить("втМакетСтрокИКолонок");
	ИсточникДанные = нОператор.Источники.Добавить("втДанные");	
	ИсточникДанныхПоСтатусамПериодов = нОператор.Источники.Добавить("РегистрСведений.СтатусыПериодовСценариев");
	ИсточникДанныхПоСтатусамПериодов = нОператор.Источники.Добавить("РегистрСведений.ЗначенияСтатусовПоказателейСинтетика");
	ИсточникКомментариев = нОператор.Источники.Добавить("втДанныеКомментарии");	
		
	//Получаем таблицу соединением макета с данными
	нОператор.Источники[0].Соединения.Добавить("втДанные",ПолучитьТекстСоединенияМакетаСоЗначениямиПоказателей(СтруктураПараметров));
	нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	//Получаем значения статусов периодов сценариев
	нОператор.Источники[0].Соединения.Добавить("СтатусыПериодовСценариев",ПолучитьТекстСоединенияМакетаСоСтатусамиПериодов(,СтруктураПараметров.ТЗСтрок));
	нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	//Получаем значения статусов и блокировок показателей
	нОператор.Источники[0].Соединения.Добавить("ЗначенияСтатусовПоказателейСинтетика",ПолучитьТекстСоединенияМакетаСоСтатусамиПоказателей(СтруктураПараметров.ТЗСтрок, СтруктураПараметров.ВидОтчета, нОператор.Источники[0].Источник.ДоступныеПоля));	
	нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;

	//Получаем комментарии данных
	нОператор.Источники[0].Соединения.Добавить("втДанныеКомментарии",ПолучитьТекстСоединенияМакетаСоЗначениямиКомментариев(СтруктураПараметров));
	нОператор.Источники[0].Соединения[0].ТипСоединения = ТипСоединенияСхемыЗапроса.ЛевоеВнешнее;
	
	//Указываем выбираемые поля
	Для Каждого Поле Из СтруктураПараметров.ТзСтрокМакета.Колонки Цикл	
		нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок."+Поле.Имя);	
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;	
	КонецЦикла;
	
	Если СтруктураПараметров.ТзКолонокМакета.Количество()>0 Тогда
		Для Каждого Поле Из СтруктураПараметров.ТзКолонокМакета.Колонки Цикл	
			нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок."+Поле.Имя);	
			Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = Поле.Имя;	
		КонецЦикла;
	КонецЕсли;                                                                                                   
	
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.Периоды");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.ПериодыСвязанныйПериод");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.ПоказательСсылка");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.ПоказательКолонка");
    нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.ВидИтога");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.СпособРасчетаИтогаПоПериоду");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.СтрокаПорядковыйНомер");
	нОператор.ВыбираемыеПоля.Добавить("втМакетСтрокИКолонок.ТипЗначения");
	
	нОператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА втДанные.Значение IS NULL И втМакетСтрокИКолонок.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Число) ТОГДА 0 ИНАЧЕ втДанные.Значение КОНЕЦ");
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "Значение";
	
	нОператор.ВыбираемыеПоля.Добавить("втДанные.ЗначениеНеЧисло");
    Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ЗначениеНеЧисло";

	Если СтруктураПараметров.ОтображатьСуммуВДопВалютах Тогда
		нОператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА втДанные.ЗначениеВалюта IS NULL ТОГДА 0 ИНАЧЕ втДанные.ЗначениеВалюта КОНЕЦ");
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ЗначениеВалюта";	
	КонецЕсли;	
	
	нОператор.ВыбираемыеПоля.Добавить("втДанныеКомментарии.Комментарий");
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "Комментарий";
	
	Для Каждого дПоле Из НастройкиРасчетаОтклоненийВыбранные Цикл
		нОператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА втДанные.Значение_База_"+дПоле.ИндексПоказателя+" IS NULL ТОГДА 0 ИНАЧЕ "+"втДанные.Значение_База_"+дПоле.ИндексПоказателя+" КОНЕЦ ");
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "Значение_База_"+дПоле.ИндексПоказателя;
	КонецЦикла;	

	нОператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА СтатусыПериодовСценариев.СтатусБлокировки IS NULL ТОГДА 0 ИНАЧЕ СтатусыПериодовСценариев.СтатусБлокировки КОНЕЦ");
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "Блокировка_Периоды";
	
	нОператор.ВыбираемыеПоля.Добавить("ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано");
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ЗначениеЗаблокировано";

	нОператор.ВыбираемыеПоля.Добавить("ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния");
	Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ИндексСостояния";
				
КонецПроцедуры	

Функция ПолучитьТекстСоединенияМакетаСДанными(ГруппаПоказателей,СтруктураТаблицИнтерфейса,ИндексБазы,ИдГруппы)
	
	ТекстСоединения = "втМакетТаблицы.ПоказателиСтрокаОтчета В (&ОтборСтрок_"+ИдГруппы+") 
	|  И ";
	
	Для Каждого Аналитика из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		
		ИмяПоляФильтра = СтрЗаменить(Аналитика.Код,"Фильтр_","");
		ИндексАналитки = Неопределено;
		Если ИмяПоляФильтра = "Показатели" Тогда	
			ТекстСоединения = ТекстСоединения + "(втМакетТаблицы.ПоказательСсылка = ЗначенияПоказателейОтчетов"+ИндексБазы+"."+"Показатель"+ ") И ";
			Продолжить;
		КонецЕсли;
		Если Аналитика.Редактируется Тогда
			Продолжить;
		КонецЕсли; 
		Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+ИмяПоляФильтра) = Неопределено Тогда	
			ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляФильтра];	
			Если Не ЗначениеЗаполнено(ИндексАналитки)  Тогда Продолжить КонецЕсли;
			ТекстСоединения = ТекстСоединения + "(втМакетТаблицы."+ИмяПоляФильтра+
			" = "+"ЗначенияПоказателейОтчетов"+ИндексБазы+".Аналитика"+ИндексАналитки+ ") И ";		
		ИначеЕсли ИмяПоляФильтра = "Организации" Тогда	
			ТекстСоединения = ТекстСоединения + "(втМакетТаблицы."+ИмяПоляФильтра+
			" = "+"ЗначенияПоказателейОтчетов"+ИндексБазы+".Версия.Организация"+ ") И ";		
		ИначеЕсли ИмяПоляФильтра = "Сценарии" Тогда	
			ТекстСоединения = ТекстСоединения + "(втМакетТаблицы."+ИмяПоляФильтра+
			" = "+"ЗначенияПоказателейОтчетов"+ИндексБазы+".Версия.Сценарий"+ ") И ";		
		ИначеЕсли ИмяПоляФильтра = "Проекты" Тогда	
			ТекстСоединения = ТекстСоединения + "(втМакетТаблицы."+ИмяПоляФильтра+
			" = "+"ЗначенияПоказателейОтчетов"+ИндексБазы+".Версия.Проект"+ ") И ";					
		Иначе	
			Продолжить;
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого Аналитика из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл			
		ИмяПоляФильтра = СтрЗаменить(Аналитика.Код,"Фильтр_","");
		ИндексАналитки = Неопределено;
		Если ИмяПоляФильтра = "Показатели" Тогда	
			ТекстСоединения = ТекстСоединения + "(втМакетТаблицы.ПоказательСсылка = ЗначенияПоказателейОтчетов"+ИндексБазы+"."+"Показатель"+ ") И ";
			Продолжить;
		КонецЕсли;
	КонецЦикла;	
	
	ТекстСоединения = Лев(ТекстСоединения,СтрДлина(ТекстСоединения)-2);	
	
	Возврат ТекстСоединения;
	
КонецФункции	

Функция ПолучитьТекстСоединенияМакетаСВерсиями(ГруппаПоказателей,СтруктураТаблицИнтерфейса,ИндексБазы,ИдГруппы,ИндексБазыВерсий=Неопределено)
	
	Если ИндексБазыВерсий=Неопределено Тогда
		ТекстБазыВерсий = "мВерсииБаза0";
	Иначе	
		ТекстБазыВерсий = "втВерсииБаза_"+ИндексБазыВерсий;
	КонецЕсли;	
		
	ТекстСоединения = "ЗначенияПоказателейОтчетов"+ИндексБазы+".Версия = "+ТекстБазыВерсий+".Версия И "+"ЗначенияПоказателейОтчетов"+ИндексБазы+".Показатель В (&ОтборПоказателей_"+ИдГруппы+")";
	
	Возврат ТекстСоединения;
	
КонецФункции	

Функция ПолучитьТекстСоединенияМакетаСоСтатусамиПериодов(Нечисловые = Ложь,ТзСтрок)
	
	Если ТзСтрок.Колонки.Найти("Организации") = Неопределено Тогда
		ТекстСоединения = " ЛОЖЬ ";
		Возврат ТекстСоединения;
	КонецЕсли;	
	
	Если Нечисловые Тогда	
		ТекстСоединения = "втМакетСтрокИКолонок.Сценарии = СтатусыПериодовСценариев.Сценарии И втМакетСтрокИКолонок.ПериодыСвязанныйПериод = СтатусыПериодовСценариев.Периоды И 
		| втМакетСтрокИКолонок.Организации = СтатусыПериодовСценариев.Организации";		
	Иначе		
		ТекстСоединения = "втМакетСтрокИКолонок.Сценарии = СтатусыПериодовСценариев.Сценарии И втМакетСтрокИКолонок.ПериодыСвязанныйПериод = СтатусыПериодовСценариев.Периоды И 
		| втМакетСтрокИКолонок.Организации = СтатусыПериодовСценариев.Организации";		
	КонецЕсли;

	
	Возврат ТекстСоединения;
	
КонецФункции	

Функция ПолучитьТекстСоединенияМакетаСоСтатусамиПоказателей(ТзСтрок, ВидыОтчетаМассив, ДоступныеПоля)
		
	Если ТзСтрок.Колонки.Найти("Организации") = Неопределено Тогда
		ТекстСоединения  = " ЛОЖЬ ";
		Возврат ТекстСоединения;
	КонецЕсли;	
	
	Если ТзСтрок.Колонки.Найти("Проекты") = Неопределено Тогда
		ТекстСоединения  = " ЛОЖЬ ";
		Возврат ТекстСоединения;
	КонецЕсли;	
	
	
	ТекстСоединения = "втМакетСтрокИКолонок.ПоказательСсылка = ЗначенияСтатусовПоказателейСинтетика.Показатель И втМакетСтрокИКолонок.ПериодыСвязанныйПериод = ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета И 
	|  втМакетСтрокИКолонок.Сценарии = ЗначенияСтатусовПоказателейСинтетика.Сценарий И
	|  ВЫБОР КОГДА ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница =  ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ втМакетСтрокИКолонок.Организации = ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КОНЕЦ  И
	|  ВЫБОР КОГДА ЗначенияСтатусовПоказателейСинтетика.Проект =   ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка) ТОГДА ИСТИНА ИНАЧЕ втМакетСтрокИКолонок.Проекты = ЗначенияСтатусовПоказателейСинтетика.Проект КОНЕЦ";		
	
	Если ВидыОтчетаМассив.Количество() = 0 тогда
		Возврат ТекстСоединения;
	Иначе
		ВидОтчета = ВидыОтчетаМассив[0];	
	КонецЕсли;
	
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
	
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		ИндАналитики = Строка(ИндексАналитики);
		ВидОтчетаКод = ВидОтчета["ВидАналитики" + ИндАналитики].Код;
		
		Если ДоступныеПоля.Найти(ВидОтчетаКод) = неопределено тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСоединения = ТекстСоединения + " И 
	|  втМакетСтрокИКолонок." + ВидОтчетаКод + " = ЗначенияСтатусовПоказателейСинтетика.Аналитика" + ИндАналитики;
	КонецЦикла;
		
	Возврат ТекстСоединения;
	
КонецФункции

Функция ПолучитьТекстСоединенияМакетаСоЗначениямиПоказателей(СтруктураПараметров)
	
	ТекстСоединения = "( втМакетСтрокИКолонок.ПериодыСвязанныйПериод = втДанные.ПериодыСвязанныйПериод) И  (втМакетСтрокИКолонок.ПоказательСсылка = втДанные.ПоказательСсылка)
	|  И ";
	
	Если СтруктураПараметров.ТзКолонокМакета.Количество()>0 Тогда
		Для Каждого Аналитика из СтруктураПараметров.ТзКолонокМакета.Колонки Цикл
			Если Аналитика.Имя = "Показатели" ИЛИ Аналитика.Имя = "ПоказателиСтрокаОтчета" Тогда
				 Продолжить;
			КонецЕсли;	
			ИмяПоляФильтра = Аналитика.Имя;
			
			ТекстСоединения = ТекстСоединения + "(втМакетСтрокИКолонок."+ИмяПоляФильтра+
			" = "+"втДанные."+ИмяПоляФильтра+" ИЛИ втМакетСтрокИКолонок."+ИмяПоляФильтра+" = НЕОПРЕДЕЛЕНО)  И ";	
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого Аналитика из СтруктураПараметров.ТзСтрокМакета.Колонки Цикл
		
		Если Аналитика.Имя = "Показатели" ИЛИ Аналитика.Имя = "ПоказателиСтрокаОтчета" Тогда
				 Продолжить;
		КонецЕсли;	
		ИмяПоляФильтра = Аналитика.Имя;
		
		Если СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтраницы.НайтиСтроки(Новый Структура("Код","Фильтр_"+ИмяПоляФильтра)).Количество()>0 Тогда
			 Продолжить;
		КонецЕсли;	
		
		ТекстСоединения = ТекстСоединения + "(втМакетСтрокИКолонок."+ИмяПоляФильтра+
			" = "+"втДанные."+ИмяПоляФильтра+" ИЛИ втМакетСтрокИКолонок."+ИмяПоляФильтра+" = НЕОПРЕДЕЛЕНО) И ";		
	КонецЦикла;	

	ТекстСоединения = Лев(ТекстСоединения,СтрДлина(ТекстСоединения)-2);
		
	Возврат ТекстСоединения;
	
КонецФункции

Функция ПолучитьТекстСоединенияМакетаСоЗначениямиКомментариев(СтруктураПараметров)
	
	ТекстСоединения = "( втМакетСтрокИКолонок.ПериодыСвязанныйПериод = втДанныеКомментарии.ПериодыСвязанныйПериод) И  (втМакетСтрокИКолонок.ПоказательСсылка = втДанныеКомментарии.ПоказательСсылка)
	|  И ";
	
	Если СтруктураПараметров.ТзКолонокМакета.Количество()>0 Тогда
		Для Каждого Аналитика из СтруктураПараметров.ТзКолонокМакета.Колонки Цикл
			Если Аналитика.Имя = "Показатели" ИЛИ Аналитика.Имя = "ПоказателиСтрокаОтчета" Тогда
				 Продолжить;
			КонецЕсли;	
			ИмяПоляФильтра = Аналитика.Имя;
			
			ТекстСоединения = ТекстСоединения + "(втМакетСтрокИКолонок."+ИмяПоляФильтра+
			" = "+"втДанныеКомментарии."+ИмяПоляФильтра+" ИЛИ втМакетСтрокИКолонок."+ИмяПоляФильтра+" IS NULL)  И ";	
		КонецЦикла;	
	КонецЕсли;
	
	Для Каждого Аналитика из СтруктураПараметров.ТзСтрокМакета.Колонки Цикл
		
		Если Аналитика.Имя = "Показатели" ИЛИ Аналитика.Имя = "ПоказателиСтрокаОтчета" Тогда
				 Продолжить;
		КонецЕсли;	
		ИмяПоляФильтра = Аналитика.Имя;
		
		Если СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтраницы.НайтиСтроки(Новый Структура("Код","Фильтр_"+ИмяПоляФильтра)).Количество()>0 Тогда
			 Продолжить;
		КонецЕсли;	
		
		ТекстСоединения = ТекстСоединения + "(втМакетСтрокИКолонок."+ИмяПоляФильтра+
			" = "+"втДанныеКомментарии."+ИмяПоляФильтра+" ИЛИ втМакетСтрокИКолонок."+ИмяПоляФильтра+" IS NULL)  И ";		
	КонецЦикла;	

	ТекстСоединения = Лев(ТекстСоединения,СтрДлина(ТекстСоединения)-2);
		
	Возврат ТекстСоединения;
	
КонецФункции

Процедура ЗаполнитьТаблицуПериодов(ИндексБазы,ТзПериодовСоСдвигом,Сдвиг,ИсходныеПериоды,Периодичность) Экспорт
	
	 Для Каждого иПериод Из ИсходныеПериоды Цикл	       
		   нПериод = ТзПериодовСоСдвигом.Добавить();
		   нПериод.ИндексБазы = ИндексБазы;
		   нПериод.БазовыйПериодДатаНачала  = ОбщегоНазначенияУХ.ДобавитьИнтервал(иПериод.ДатаНачала,Периодичность,Сдвиг);
		   нПериод.ИсходныйПериод = иПериод;
		   нПериод.Периодичность = Периодичность;
	 КонецЦикла;
		   
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТзПериодовСоСдвигом.ИндексБазы,
	               |	ТзПериодовСоСдвигом.БазовыйПериодДатаНачала,
	               |	ТзПериодовСоСдвигом.ИсходныйПериод,
	               |	ТзПериодовСоСдвигом.Периодичность
	               |ПОМЕСТИТЬ ВремПериоды
	               |ИЗ
	               |	&ТзПериодовСоСдвигом КАК ТзПериодовСоСдвигом
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ВремПериоды.ИндексБазы,
	               |	ВремПериоды.ИсходныйПериод,
	               |	Периоды.Ссылка КАК БазовыйПериод
	               |ИЗ
	               |	ВремПериоды КАК ВремПериоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	               |		ПО ВремПериоды.БазовыйПериодДатаНачала = Периоды.ДатаНачала
	               |			И ВремПериоды.Периодичность = Периоды.Периодичность
	               |ГДЕ
	               |	Периоды.Произвольный = Ложь";
	
	Запрос.УстановитьПараметр("ТзПериодовСоСдвигом",ТзПериодовСоСдвигом );
	
	ТзПериодовСоСдвигом = Запрос.Выполнить().Выгрузить();
			   
КонецПроцедуры	

Процедура ДополнитьТекстФинальногоЗапроса(ТекстЗапроса,СтруктураПараметров)
	
	ТекстСоединенияПоИерархии = "";
	ТекстПолейИерархии = "втМакетСтрокИКолонок.ВидИтога КАК ВидИтога, ";
	
	Для Каждого стр Из СтруктураПараметров.СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		
		Если Стр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации ИЛИ Стр.ПоддерживатьИерархию И  Метаданные.НайтиПоТипу(Стр.ТипСубконто.ТипЗначения.Типы()[0]).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов  Тогда

			ИмяИсточника 		=  СтрЗаменить(Стр.ТипСтрока,"Ссылка","");
			ПсевдонимИсточника  =  СтрЗаменить(Стр.Код,"Фильтр_","");		
			ТекстСоединенияПоИерархии = ТекстСоединенияПоИерархии+"
			|ЛЕВОЕ СОЕДИНЕНИЕ "+ИмяИсточника+" КАК "+ПсевдонимИсточника+"_Родители
			|ПО втМакетСтрокИКолонок."+ПсевдонимИсточника+" = "+ПсевдонимИсточника+"_Родители.Родитель";
			
			ТекстПолейИерархии = ТекстПолейИерархии+"
			|ВЫБОР КОГДА 
			|"+ПсевдонимИсточника+"_Родители.Ссылка IS NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК "+ПсевдонимИсточника+"_ЭтоГруппа,";
			
		КонецЕсли;		
		
	КонецЦикла;	
	
    ТекстЗапроса = ТекстЗапроса+ТекстСоединенияПоИерархии;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"втМакетСтрокИКолонок.ВидИтога КАК ВидИтога,",ТекстПолейИерархии);
	
	ТекстЗапроса = ТекстЗапроса+"
	|УПОРЯДОЧИТЬ ПО втМакетСтрокИКолонок.СтрокаПорядковыйНомер";
			
КонецПроцедуры	

// Функция ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики=Неопределено,ДополнительныеПараметры = Неопределено) Экспорт
// Получает срез значений показателей по заданным отборам в разрезе заданных аналитик.
// Числовые показатели агрегируются по срезу, Нечисловые  - выбираются последние по периодам значения.
// Параметры:
//   - СтруктураПараметровОтбора (Обязательный).
//	 Тип:Структура.
//   Ключ структуры - имя отбора, значение структуры -  ссылка или массив ссылок. Тип значения определяется по ключу. 
//   Обязательные элементы структуры: ПоказательОтчета или ВидОтчета
//   Если задан ключ "ПоказательОтчета", то фильтр по показателям устанавливается из него, иначе из значения ключа "ВидОтчета"
//   Дргими возможными ключами структуры отбора являются:
//			- Организация
//			- Валюта
//			- Сценарий
//          - ПериодОтчета
//          - Проект
//          - Аналитика[1...6], если отбор накладывается по индексу аналитики или Коды ПВХ нужных аналитик, если отбор накладывается по типу аналитики;
//   Для отсутствующих ключей отбора возвращаются все значения по данной аналитике.
//	 
//	- РаскрываемыеАналитики(Необязательный). 
//	 Тип:Структура. 
//   Ключ - Код элемента ПВХ ВидыСубконтоКорпортаивные или Индекс Аналитики (Аналитика1-6): аналитики по которым необходима дополнительная детализация(раскрытие) данных.
//   Если необходимо раскрытие по допвалютам, то передается ключ "АналитикаВалюта". Значение структуры не задается.
//   По аналитикам Сценарий,ПериодОтчета,Организация,Валюта,Проект раскрытие происходит всегда.
//
//   - ДополнительныеПараметры (Необязательный). 
//	 Тип:Структура.
//   Может принимать следующие значения ключей: 
//     - АнализЧувствительности:Булево. Ложь - запрос выполняется к регистрам ЗначенияПоказателей.*; Истина - запрос выполняется к регистрам ЗначенияПоказателейМоделирование.*
//     - ТолькоСинтетика:Булево. 		Ложь - запрос выполняется к регистрам ЗначенияПоказателей.*; Истина - запрос выполняется только к регистру ЗначенияПоказателейСинтетика;
//     - РежимОчистки	:Булево. 		Ложь - Извлекаются текущие значения показателей; Истина - все значения числовых показателей подменяются на 0;
//     - ВОсновнойВалюте:Булево.		Ложь - Извлекаются записи во всех(указанных в отборе) валютах. Истина - Излвлекаются записи только в основной валюте версии.
//     - СдвигПоПериоду :Число.         Если задано значение отличное от 0, то в итоговой выборке периоды записей будут смещены на указанное значение.
//     - СтруктураЗаменяемыхАналитик: Структура	
//           Ключ - код поля заменяемой аналитики; значение - новое значение, на которое будет подменено поле в выборке. Заменяемое поле должно содержаться в структуре РаскрываемыеАналитики  
//     - ОбщийИтог: Перечисление.ВидыИтоговПоказателя.   Добавить строку с общим итогом по срезу по ресурсу "Значение".
//
// Возвращаемое значение:
//	 ТаблицаЗначний.    Основные колонки: Показатель, Сценарий,ПериодОтчета,Организация,Проект,Валюта,Значение,ЗначениеНеЧисло.
//   Дополнительные колонки: КодПВХ1,КодПВХ2,КодПВХ..N И/ИЛИ Аналитика1,2,3,4,..N - Колонки со значением дополнительных аналитик раскрытия. 
//   Неопределено -  в случае возникновения ошибок передачи параметров функции
//
//   Пример: 
//
//    тВидОтчета 		= Справочники.ВидыОтчетов.НайтиПоКоду("Выручка");
//    тВалюта           = Справочники.Валюты.НайтиПоНаименованию("RUR");
//	  тПериодыОтчета    = Новый Массив;
//	  тПериодыОтчета.Добавить(Справочники.Периоды.НайтиПоНаименованию("Январь 2021 г."));
//    тСценарий      	= Справочники.Сценарии.НайтиПоНаименованию("Факт");
//
//    СтруктураПараметровОтбора 	= Новый Структура("ВидОтчета,Валюта,ПериодОтчета,Сценарий",тВидОтчета,тВалюта,тПериодыОтчета,тСценарий);
//    РаскрываемыеАналитики 		= Новый Структура("Аналитика1,Аналитика2");
//    ДополнительныеПараметры    	= Новый Структура("ОбщийИтог",Перечисления.ВидыИтоговПоказателя.Сумма);
//
//	  тЗначения  = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики,ДополнительныеПараметры);
//
//
//КонецФункции
Функция ПолучитьЗначениеПоказателей(СтруктураПараметровОтбора,РаскрываемыеАналитики=Неопределено,ДополнительныеПараметры = Неопределено) Экспорт
	
	флОшибки 						= Ложь;
	СообщениеОбОшибки	 			= "";
	КэшПоказателей         			= Неопределено;
	КэшАналитик            			= Неопределено;
	
	АнализЧувствительности 			= Ложь;
	СтруктураЗаменяемыхАналитик 	= Неопределено;
	ТолькоСинтетика 				= Ложь;
	РежимОчистки 					= Ложь;
	РежимИнверсии 					= Ложь;
  	ВОсновнойВалюте  				= Ложь;
	СдвигПоПериоду                  = 0;
	Периодичность                   = Неопределено;
	ИдентификаторСеанса             = Неопределено;
	ЭтоНечисловые         			= Ложь;
	ДополнительныйФильтр            = Неопределено;
	ОбщийИтог         				= Неопределено;
	ТолькоЧерновые                  = Ложь;
	МенеджерВременныхТаблиц			= Неопределено;

	Запрос                 			= Новый Запрос;
	СхемаЗапроса 					= Новый СхемаЗапроса;
	
	Если НЕ ТипЗнч(СтруктураПараметровОтбора) = Тип("Структура") Тогда
		флОшибки = Истина;
		СообщениеОбОшибки = НСтр("ru = 'Не задана структура отборов показателей'");
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей", , , СообщениеОбОшибки);
	КонецЕсли;	 
	
	Если НЕ СтруктураПараметровОтбора.Свойство("ПоказательОтчета")  Тогда
		Если НЕ СтруктураПараметровОтбора.Свойство("ВидОтчета") Тогда 	 
			флОшибки = Истина;
			СообщениеОбОшибки = НСтр("ru = 'Не задан отбор по показателям отчетов'");
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей", , , СообщениеОбОшибки);
		Иначе	 
			МассивПоказателей = ПолучитьПоказателиВО(СтруктураПараметровОтбора.ВидОтчета).ВыгрузитьКолонку("Показатель");
		КонецЕсли;	 
	Иначе	 
		МассивПоказателей = СтруктураПараметровОтбора["ПоказательОтчета"];
	КонецЕсли;	 
	
	Если флОшибки Тогда                                                                                                   
		Возврат Неопределено;
	КонецЕсли;	 
	
	Если НЕ ДополнительныеПараметры = Неопределено Тогда	 
		Если ДополнительныеПараметры.Свойство("АнализЧувствительности") Тогда
			АнализЧувствительности = ДополнительныеПараметры.АнализЧувствительности;
		КонецЕсли;	 		 
		Если ДополнительныеПараметры.Свойство("ТолькоСинтетика") Тогда
			ТолькоСинтетика = ДополнительныеПараметры.ТолькоСинтетика;
		КонецЕсли;	
		Если ДополнительныеПараметры.Свойство("РежимОчистки") Тогда
			РежимОчистки = ДополнительныеПараметры.РежимОчистки;
		КонецЕсли;	
		Если ДополнительныеПараметры.Свойство("СтруктураЗаменяемыхАналитик") Тогда
			СтруктураЗаменяемыхАналитик = ДополнительныеПараметры.СтруктураЗаменяемыхАналитик;
		КонецЕсли;	
		Если ДополнительныеПараметры.Свойство("ВОсновнойВалюте") Тогда
			ВОсновнойВалюте = ДополнительныеПараметры.ВОсновнойВалюте;
		КонецЕсли;	 
		Если ДополнительныеПараметры.Свойство("СдвигПоПериоду") Тогда
			СдвигПоПериоду = ДополнительныеПараметры.СдвигПоПериоду;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("Периодичность") Тогда
			Периодичность = ДополнительныеПараметры.Периодичность;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ИдентификаторСеанса") Тогда
			ИдентификаторСеанса = Строка(ДополнительныеПараметры.ИдентификаторСеанса);
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ЭтоНечисловые") Тогда
			ЭтоНечисловые = ДополнительныеПараметры.ЭтоНечисловые;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ДополнительныйФильтр") Тогда
			ДополнительныйФильтр = ДополнительныеПараметры.ДополнительныйФильтр;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ОбщийИтог") Тогда
			ОбщийИтог = ДополнительныеПараметры.ОбщийИтог;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ТолькоЧерновые") Тогда
			ТолькоЧерновые = ДополнительныеПараметры.ТолькоЧерновые;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("МенеджерВременныхТаблиц") Тогда
			МенеджерВременныхТаблиц = ДополнительныеПараметры.МенеджерВременныхТаблиц;
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("РежимИнверсии") Тогда
			РежимИнверсии = ДополнительныеПараметры.РежимИнверсии;
		КонецЕсли;
	КонецЕсли;	 
	
	Если ТолькоСинтетика Тогда
		РаскрываемыеАналитики = Неопределено;
	КонецЕсли;
	
	ТзАналитик = Новый ТаблицаЗначений;
	
	Если Не СтруктураПараметровОтбора.Свойство("ВидОтчета") Тогда
		МассивВо = ПолучитьВидыОтчетовПоПоказателям(МассивПоказателей);		 
		СтруктураПараметровОтбора.Вставить("ВидОтчета",МассивВо);
	КонецЕсли;	 
	
	СтруктураПоиска 				= Новый Структура;
	СтруктураПараметровВерсии 		= Новый Структура;
	ОтборВерсий                    = Новый Структура;
	СтруктураПараметровВерсии.Вставить("ОтборВерсий",ОтборВерсий);
	СтруктураПараметровВерсии.Вставить("ВидОтчета",СтруктураПараметровОтбора.ВидОтчета);
	СтруктураПараметровВерсии.Вставить("ВОсновнойВалюте",ВОсновнойВалюте);
	СтруктураПараметровВерсии.Вставить("СдвигПоПериоду",СдвигПоПериоду);
	СтруктураПараметровВерсии.Вставить("Периодичность",Периодичность);
	СтруктураПараметровВерсии.Вставить("ЭтоНечисловые",ЭтоНечисловые);
	СтруктураПараметровВерсии.Вставить("МассивПоказателей",МассивПоказателей);
	
	Если  ИдентификаторСеанса = Неопределено Тогда
		СтруктураПараметровВерсии.Вставить("ЧерноваяВерсия",Ложь);		 
	Иначе	 
		СтруктураПараметровВерсии.Вставить("ЧерноваяВерсия",Истина);
		СтруктураПараметровВерсии.Вставить("ИдентификаторСеанса",ИдентификаторСеанса);
	КонецЕсли;	 
	
	Если СтруктураПараметровОтбора.Свойство("Сценарий") Тогда
		ОтборВерсий.Вставить("Сценарий",СтруктураПараметровОтбора.Сценарий);
	КонецЕсли;
	
	Если СтруктураПараметровОтбора.Свойство("Валюта") И НЕ ВОсновнойВалюте Тогда 
		ОтборВерсий.Вставить("Валюта",СтруктураПараметровОтбора.Валюта);
	КонецЕсли;
	
	Если СтруктураПараметровОтбора.Свойство("Проект") Тогда 
		ОтборВерсий.Вставить("Проект",СтруктураПараметровОтбора.Проект);
	КонецЕсли;
	
	Если СтруктураПараметровОтбора.Свойство("Организация") Тогда 
		ОтборВерсий.Вставить("Организация",СтруктураПараметровОтбора.Организация);
	КонецЕсли;
	
	Если СтруктураПараметровОтбора.Свойство("ПериодОтчета") Тогда
		ОтборВерсий.Вставить("ПериодОтчета",СтруктураПараметровОтбора.ПериодОтчета);
	КонецЕсли;
	
	ДополнительныйОтбор = Новый Структура;
	Для Каждого Пар Из СтруктураПараметровОтбора Цикл
		
		Ключ = НРег(Пар.Ключ);
		Если Ключ = "сценарий" 
			ИЛИ Ключ = "организация"
			ИЛИ Ключ = "проект"
			ИЛИ Ключ = "периодотчета"
			ИЛИ Ключ = "валюта"  
			ИЛИ Ключ = "видотчета"
			ИЛИ Ключ = "показательотчета" Тогда
			Продолжить;		 
		КонецЕсли;			 
		
		ДополнительныйОтбор.Вставить(Пар.Ключ,Пар.Значение);
		
	КонецЦикла;	 
	
	ТекстЗапроса = ПолучитьТекстЗапросаПоВерсиям(Запрос,СтруктураПараметровВерсии);
	
	ТекстШаблонаЗапроса = "";	
	
	РаскрываемыеАналитики_ = Новый ТаблицаЗначений;
	РаскрываемыеАналитики_.Колонки.Добавить("Ключ");
	
	Нстр = РаскрываемыеАналитики_.Добавить();
	Нстр.Ключ = "Организация";	 
	Нстр = РаскрываемыеАналитики_.Добавить();
	Нстр.Ключ = "Проект";	 
	Нстр = РаскрываемыеАналитики_.Добавить();
	Нстр.Ключ = "Сценарий";
	Нстр = РаскрываемыеАналитики_.Добавить();
	Нстр.Ключ = "ПериодОтчета";
	Нстр = РаскрываемыеАналитики_.Добавить();
	Нстр.Ключ = "Валюта";
	
	Если Не РаскрываемыеАналитики=Неопределено Тогда	 
		Для Каждого Стр Из РаскрываемыеАналитики Цикл	 	 
			Если ВРЕГ(Стр.Ключ) = "АНАЛИТИКАВАЛЮТА" Тогда
				Нстр = РаскрываемыеАналитики_.Добавить();
				Нстр.Ключ = Стр.Ключ;
				Продолжить;	 
			КонецЕсли;	 
			Если ВРЕГ(Стр.Ключ) = "ВИДОТЧЕТА" Тогда
				Нстр = РаскрываемыеАналитики_.Добавить();
				Нстр.Ключ = Стр.Ключ;
				Продолжить;	 
			КонецЕсли;	  
			Если ВРЕГ(Лев(Стр.Ключ,9)) = "АНАЛИТИКА" Тогда
				ИндексАналитики = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Прав(Стр.Ключ,1));	
				Если ИндексАналитики = Неопределено ИЛИ ИндексАналитики>ПараметрыСеанса.ЧислоДопАналитик Тогда
					Продолжить;
				Иначе	
					Нстр = РаскрываемыеАналитики_.Добавить();
					Нстр.Ключ = Стр.Ключ;
					Продолжить;
				КонецЕсли;		
			КонецЕсли;	
			ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.Ключ);
			Если ЗначениеЗаполнено(ПВХзначение) Тогда
				Нстр = РаскрываемыеАналитики_.Добавить();
				Нстр.Ключ = Стр.Ключ;
			КонецЕсли;	 	 
		КонецЦикла;	 	 
	КонецЕсли;	 
	
	Для Каждого СтрДопОтбор Из ДополнительныйОтбор Цикл	 
		Если РаскрываемыеАналитики_.Найти(СтрДопОтбор.Ключ,"Ключ") = Неопределено Тогда
			Нстр = РаскрываемыеАналитики_.Добавить();
			Нстр.Ключ = СтрДопОтбор.Ключ;	 
		КонецЕсли;	
	КонецЦикла;	 
	
	Если НЕ СтруктураЗаменяемыхАналитик = Неопределено Тогда
		Для Каждого СтрДопОтбор Из СтруктураЗаменяемыхАналитик Цикл	 
			Если РаскрываемыеАналитики_.Найти(СтрДопОтбор.Ключ,"Ключ") = Неопределено Тогда
				Нстр = РаскрываемыеАналитики_.Добавить();
				Нстр.Ключ = СтрДопОтбор.Ключ;	 
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;
	
	Если ТолькоСинтетика Тогда
		ПолучитьКэшПоказателейТолькоСинтетика(МассивПоказателей,РаскрываемыеАналитики_,КэшПоказателей,КэшАналитик);
	Иначе	 
		ПолучитьКэшПоказателей(МассивПоказателей,РаскрываемыеАналитики_,КэшПоказателей,КэшАналитик);
	КонецЕсли;

	ИспользоватьДанныеЛога = Ложь;
	Если ЗначениеЗаполнено(ИдентификаторСеанса)Тогда
		ИспользоватьДанныеЛога = Истина;
		ПоместитьЛогИзмененныхПоказателейНечисловыеВЗапрос(Запрос,ТекстЗапроса);
	КонецЕсли;		
	
	Для Каждого ГруппаПоказателей Из КэшАналитик Цикл	 
		Нечисловые = НЕ ГруппаПоказателей.ТипЗначенияЧисло;
		
		ИдГруппы = СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
		Для Каждого Кол Из КэшАналитик.Колонки Цикл
			СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
		Конеццикла;	
		
		Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
			СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
		КонецЕсли;	
		
		ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
		ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
		ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	
		
		Если  ПоказателиТекущегоЗапроса.Количество()= 0 Тогда
			Продолжить;
		КонецЕсли;	
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Запрос",Запрос);
		СтруктураПараметров.Вставить("РаскрываемыеАналитики",РаскрываемыеАналитики_); 
		СтруктураПараметров.Вставить("ГруппаПоказателей",ГруппаПоказателей);
		СтруктураПараметров.Вставить("ИдГруппы",ИдГруппы);
		СтруктураПараметров.Вставить("Нечисловые",Нечисловые);
		СтруктураПараметров.Вставить("ОтображатьСуммуВДопВалютах",Ложь);
		СтруктураПараметров.Вставить("ДополнительныйОтбор",ДополнительныйОтбор);
		СтруктураПараметров.Вставить("АнализЧувствительности",АнализЧувствительности);
		СтруктураПараметров.Вставить("СтруктураЗаменяемыхАналитик",СтруктураЗаменяемыхАналитик);
		СтруктураПараметров.Вставить("РежимОчистки",РежимОчистки);
		СтруктураПараметров.Вставить("РежимИнверсии",РежимИнверсии);
		СтруктураПараметров.Вставить("ДополнительныйФильтр",ДополнительныйФильтр);
		СтруктураПараметров.Вставить("ТолькоЧерновые",ТолькоЧерновые);
		СтруктураПараметров.Вставить("МенеджерВременныхТаблиц",МенеджерВременныхТаблиц);
		СтруктураПараметров.Вставить("ОтборВерсий",ОтборВерсий);
		
		ДобавитьВыражениеПолученияДанныхПоказателей(СтруктураПараметров,ТекстШаблонаЗапроса); 
		
		Если ИспользоватьДанныеЛога Тогда
			 ДобавитьВыражениеПолученияДанныхЛога(СтруктураПараметров,ТекстШаблонаЗапроса);
		КонецЕсли;	

		Запрос.Параметры.Вставить("ОтборПоказателей_"+ИдГруппы,ПоказателиТекущегоЗапроса);		 
	КонецЦикла;	
	
	Запрос.Текст = ТекстЗапроса + ТекстШаблонаЗапроса; 
	Запрос.Параметры.Вставить("ВидОтчета",СтруктураПараметровОтбора.ВидОтчета);
	
	Если ЗначениеЗаполнено(ИдентификаторСеанса)Тогда	
		Запрос.Параметры.Вставить("УникальныйИдентификаторСеанса",Новый УникальныйИдентификатор(ИдентификаторСеанса));	
	КонецЕсли;
	
	//Сгруппировать по аналитикам
	тГруппыАналитик = "";
	Для Каждого СтрПоле Из РаскрываемыеАналитики_ Цикл
		Если СтрПоле.Ключ = "Значение" ИЛИ СтрПоле.Ключ = "ЗначениеНечисловое" Тогда
			Продолжить;
		КонецЕсли;	 
		тГруппыАналитик = тГруппыАналитик+"
		|	мПоказателиРаскрытияВрем."+СтрПоле.Ключ+",";
	КонецЦикла;	 
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	мПоказателиРаскрытияВрем.ПериодыСвязанныйПериод,
	|	мПоказателиРаскрытияВрем.ПоказательОтчета,
	|	мПоказателиРаскрытияВрем.СинтетическоеЗначение," + тГруппыАналитик;  
	Если  ИспользоватьДанныеЛога Тогда
		Запрос.Текст = Запрос.Текст+"
		|	ВЫБОР КОГДА МАКСИМУМ (мПоказателиРаскрытияВрем.ЗначениеИзЛога) ТОГДА МАКСИМУМ(мПоказателиРаскрытияВрем.ЗначениеНечисловоеИзЛога) ИНАЧЕ МАКСИМУМ(мПоказателиРаскрытияВрем.ЗначениеНечисловое) КОНЕЦ КАК ЗначениеНечисловое,";	
	Иначе	
		Запрос.Текст = Запрос.Текст+"
		|	МАКСИМУМ(мПоказателиРаскрытияВрем.ЗначениеНечисловое) КАК ЗначениеНечисловое,";	
	КонецЕсли;	
	
	Если ТолькоЧерновые Тогда
		Запрос.Текст = Запрос.Текст+"
		|	МАКСИМУМ(мПоказателиРаскрытияВрем.ЧерноваяВерсия) КАК ЧерноваяВерсия,";	
	КонецЕсли;	
	Запрос.Текст = Запрос.Текст+"
	|	СУММА(мПоказателиРаскрытияВрем.Значение) КАК Значение,
	|	СУММА(мПоказателиРаскрытияВрем.ЗначениеВалюта) КАК ЗначениеВалюта
	|ИЗ
	|	мПоказателиРаскрытияВрем КАК мПоказателиРаскрытияВрем
	|
	|СГРУППИРОВАТЬ ПО " + тГруппыАналитик + "
	|	мПоказателиРаскрытияВрем.ПоказательОтчета,
	|	мПоказателиРаскрытияВрем.СинтетическоеЗначение,
	|	мПоказателиРаскрытияВрем.ПериодыСвязанныйПериод"; 
	
	Если Не РежимОчистки  Тогда  // в режиме очистки нам нужен срез с 0 записями
		Если ТолькоЧерновые  Тогда   //для формирования лога по числовым,оставляем только черновые записи
			Если НЕ ЭтоНечисловые Тогда
				Запрос.Текст = Запрос.Текст+"
				|ИМЕЮЩИЕ 
				|	МАКСИМУМ(мПоказателиРаскрытияВрем.ЧерноваяВерсия) = ИСТИНА"; 
			КонецЕсли;
		Иначе	 
			Запрос.Текст = Запрос.Текст+"
			|ИМЕЮЩИЕ 
			|	СУММА(мПоказателиРаскрытияВрем.Значение)<>0";	 
		КонецЕсли;
	КонецЕсли;	
	
	Если ОбщийИтог = Перечисления.ВидыИтоговПоказателя.Сумма Тогда
		Запрос.Текст = Запрос.Текст+"
		|ИТОГИ 
		|	СУММА(Значение) 
		|	ПО ОБЩИЕ";
	ИначеЕсли ОбщийИтог = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
		Запрос.Текст = Запрос.Текст+"
		|ИТОГИ 
		|	МИНИМУМ(Значение) 
		|	ПО ОБЩИЕ";
	ИначеЕсли ОбщийИтог = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
		Запрос.Текст = Запрос.Текст+"
		|ИТОГИ 
		|	МАКСИМУМ(Значение) 
		|	ПО ОБЩИЕ";
	ИначеЕсли ОбщийИтог = Перечисления.ВидыИтоговПоказателя.Среднее Тогда
		Запрос.Текст = Запрос.Текст+"
		|ИТОГИ 
		|	СРЕДНЕЕ(Значение) 
		|	ПО ОБЩИЕ";	 
	КонецЕсли;
	
	тзДанные =  Запрос.Выполнить().Выгрузить();
	
	// Удалим временные таблицы
	Если МенеджерВременныхТаблиц <> Неопределено Тогда
		Запрос.Текст = "
		|УНИЧТОЖИТЬ мВерсииБаза0;
		|УНИЧТОЖИТЬ мПоказателиРаскрытияВрем;";
		
		Если ИспользоватьДанныеЛога Тогда
			Запрос.Текст = Запрос.Текст+"
			|УНИЧТОЖИТЬ мДанныеЛогаНечисловые;";	
		КонецЕсли;			
		Запрос.Выполнить();	
	КонецЕсли;
	
	// Проверка на типизированные колонки с видами субконто
	МассивУдаляемыхКолонок = Новый Массив();
	Для Каждого Кол Из тзДанные.Колонки Цикл
		Если Кол.ТипЗначения.Типы().Количество()=0 ИЛИ (Кол.ТипЗначения.Типы().Количество()=1 И Кол.ТипЗначения.Типы()[0]= Тип("null")) Тогда
			МассивУдаляемыхКолонок.Добавить(Кол);
		КонецЕсли;	 	 	 
	КонецЦикла;	 
	
	Для Каждого УдКолонка Из МассивУдаляемыхКолонок Цикл
		ИмяКолонки = УдКолонка.Имя;
		тзДанные.Колонки.Удалить(УдКолонка);
		Если ИмяКолонки = "ЗначениеНечисловое" Тогда	 
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Дата"));
			МассивТипов.Добавить(Тип("Строка"));
			МассивТипов.Добавить(Тип("Булево"));
			тзДанные.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов(МассивТипов)); 
		Иначе	 
			тзДанные.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные")); 
		КонецЕсли;
	КонецЦикла;	 
	
	Возврат тзДанные;
	 	 
 КонецФункции	
  
Функция ПолучитьВидыОтчетовПоПоказателям(МассивПоказателей) Экспорт
	 
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	                 |	ПоказателиОтчетов.Владелец КАК Владелец
	                 |ИЗ
	                 |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	                 |ГДЕ
	                 |	ПоказателиОтчетов.Ссылка В(&МассивПоказателей)";
	 
	  Запрос.Параметры.Вставить("МассивПоказателей",МассивПоказателей);	
	 
	  Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Владелец");
	  
 КонецФункции
 
Процедура ПолучитьКэшПоказателей(МассивПоказателей,ТзАналитик,КэшПоказателей,КэшАналитик) 
	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 0
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 6
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 0
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 1
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 2
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 3
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 4
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 5
	               |				ИНАЧЕ 6
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ГруппаРаскрытияЧислоАналитик,
				   |	ПоказателиОтчетов.Строка КАК СтрокаОтчета,
				   |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
				   |	ВЫБОР
				   |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
				   |			ТОГДА 0
				   |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
				   |			ТОГДА 1
				   |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
				   |			ТОГДА 2
				   |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
				   |			ТОГДА 3
				   |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
				   |			ТОГДА 4
				   |		КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
				   |			ТОГДА 5
				   |		ИНАЧЕ 6
				   |	КОНЕЦ КАК ВидОтчетаЧислоАналитик,   
				   |	ВЫБОР
				   |		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыЗначенийПоказателейОтчетов.Число)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТипЗначенияЧисло,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт
	               |	КОНЕЦ КАК АналитикаВалюта
	               |ПОМЕСТИТЬ втАналитикиПоказателей
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Ссылка В(&МассивПоказателей)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втАналитикиПоказателей.ГруппаРаскрытияЧислоАналитик КАК ГруппаРаскрытияЧислоАналитик,
				   |	втАналитикиПоказателей.ВидОтчетаЧислоАналитик КАК ВидОтчетаЧислоАналитик,
				   |	втАналитикиПоказателей.ТипЗначенияЧисло КАК ТипЗначенияЧисло,
	               |	втАналитикиПоказателей.АналитикаВалюта КАК АналитикаВалюта
	               |ИЗ
	               |	втАналитикиПоказателей КАК втАналитикиПоказателей";
	
	СхемаЗапросаКэшАналитик = Новый СхемаЗапроса;
	СхемаЗапросаКэшАналитик.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого Аналитика Из ТзАналитик Цикл
		
		Если Аналитика.Ключ = "Организация" 
			ИЛИ Аналитика.Ключ = "ПериодОтчета" 
			ИЛИ Аналитика.Ключ = "Сценарий" 
			ИЛИ Аналитика.Ключ = "Проект"
			ИЛИ Аналитика.Ключ = "Валюта"
			ИЛИ Аналитика.Ключ = "АналитикаВалюта" Тогда
			Продолжить;
		КонецЕсли;						
		
		Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[0];
		нОператор = Нпакет.Операторы[0];
		//Указываем выбираемые поля
		ТекстПолей = "";
		ТекстОкончанияПолей = "	0 ";
		
		Если Лев(Аналитика.Ключ,9)  = "Аналитика" Тогда
			
			Инд = Прав(Аналитика.Ключ,1);
			ТекстПолей = ТекстПолей + "
			|	ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка) 
			|		ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики"+Инд+"<> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка) ТОГДА "+Инд+" ИНАЧЕ";	
			ТекстОкончанияПолей = ТекстОкончанияПолей +" КОНЕЦ ";	
		Иначе	
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				ТекстПолей = ТекстПолей + "
				|	ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+".Код = &ВидАналитики_"+Аналитика.Ключ+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики"+Инд+".Код = &ВидАналитики_"+Аналитика.Ключ+" ТОГДА "+Инд+" ИНАЧЕ";	
				ТекстОкончанияПолей = ТекстОкончанияПолей +" КОНЕЦ ";
			КонецЦикла;
		КонецЕсли;
		//Указываем выбираемые поля
		нОператор.ВыбираемыеПоля.Добавить(ТекстПолей+ТекстОкончанияПолей);

		//Указываем псевдонимы для выбранных полей
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Аналитика.Ключ;
		
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Аналитика.Ключ;
		Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[1];
		нОператор = Нпакет.Операторы[0];
		нОператор.ВыбираемыеПоля.Добавить("втАналитикиПоказателей.ВидАналитики_"+Аналитика.Ключ);
		
		Запрос.Параметры.Вставить("ВидАналитики_"+Аналитика.Ключ,Аналитика.Ключ);
		
	КонецЦикла; 	
	
	Запрос.Текст = СхемаЗапросаКэшАналитик.ПолучитьТекстЗапроса();	
	Запрос.Параметры.Вставить("МассивПоказателей",МассивПоказателей);			   
	
	КэшПоказателейПакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();	
	КэшПоказателей 		=  КэшПоказателейПакет[0].Выгрузить();	
	КэшАналитик   	    =  КэшПоказателейПакет[1].Выгрузить();	
		
КонецПроцедуры	

Процедура ПолучитьКэшПоказателейТолькоСинтетика(МассивПоказателей,ТзАналитик,КэшПоказателей,КэшАналитик) 
	

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка,
	               |	ПоказателиОтчетов.ГруппаРаскрытия,
	               |	0 КАК ГруппаРаскрытияЧислоАналитик,
	               |	ПоказателиОтчетов.Строка КАК СтрокаОтчета,
	               |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыЗначенийПоказателейОтчетов.Число)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТипЗначенияЧисло,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт
	               |	КОНЕЦ КАК АналитикаВалюта
				   |ПОМЕСТИТЬ втАналитикиПоказателей
				   |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов				   
				   |ГДЕ
	               |	ПоказателиОтчетов.Ссылка В(&МассивПоказателей);
				   |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втАналитикиПоказателей.ГруппаРаскрытияЧислоАналитик,
	               |	втАналитикиПоказателей.ТипЗначенияЧисло,
	               |	втАналитикиПоказателей.АналитикаВалюта КАК АналитикаВалюта
	               |ИЗ
	               |	втАналитикиПоказателей КАК втАналитикиПоказателей";
	
	
	СхемаЗапросаКэшАналитик = Новый СхемаЗапроса;
	СхемаЗапросаКэшАналитик.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого Аналитика Из ТзАналитик Цикл
		
		Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[0];
		нОператор = Нпакет.Операторы[0];
		
		ТекстПолей = "";
		ТекстОкончанияПолей = "	0 ";
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			ТекстПолей = ТекстПолей + "
			|	ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+".Код = &ВидАналитики_"+Аналитика.Ключ+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики"+Инд+".Код = &ВидАналитики_"+Аналитика.Ключ+" ТОГДА "+Инд+" ИНАЧЕ";	
			ТекстОкончанияПолей = ТекстОкончанияПолей +" КОНЕЦ ";
		КонецЦикла;
		
		//Указываем выбираемые поля
		нОператор.ВыбираемыеПоля.Добавить(ТекстПолей+ТекстОкончанияПолей);
		
		//Указываем псевдонимы для выбранных полей
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Аналитика.Ключ;
		
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Аналитика.Ключ;
		Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[1];
		нОператор = Нпакет.Операторы[0];
		нОператор.ВыбираемыеПоля.Добавить("втАналитикиПоказателей.ВидАналитики_"+Аналитика.Ключ);
			
		Запрос.Параметры.Вставить("ВидАналитики_"+Аналитика.Ключ,Аналитика.Ключ);
		
	КонецЦикла; 	
	
	Запрос.Текст = СхемаЗапросаКэшАналитик.ПолучитьТекстЗапроса();
	
	Запрос.Параметры.Вставить("МассивПоказателей",МассивПоказателей);			   
	
	КэшПоказателейПакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();	
	КэшПоказателей 		=  КэшПоказателейПакет[0].Выгрузить();	
	КэшАналитик   	    =  КэшПоказателейПакет[1].Выгрузить();	
		
КонецПроцедуры	

Процедура ДобавитьВыражениеПолученияДанныхПоказателей(СтруктураПараметров,ТекстШаблонаЗапроса);
		
	Запрос              			= СтруктураПараметров.Запрос;
	РаскрываемыеАналитики        	= СтруктураПараметров.РаскрываемыеАналитики;
	ГруппаПоказателей   			= СтруктураПараметров.ГруппаПоказателей;
    ИдГруппы                        = СтруктураПараметров.ИдГруппы;
	Нечисловые                      = СтруктураПараметров.Нечисловые;
    ОтображатьСуммуВДопВалютах      = СтруктураПараметров.ОтображатьСуммуВДопВалютах;
	ДополнительныйОтбор             = СтруктураПараметров.ДополнительныйОтбор;
    АнализЧувствительности          = СтруктураПараметров.АнализЧувствительности;
	СтруктураЗаменяемыхАналитик     = СтруктураПараметров.СтруктураЗаменяемыхАналитик;
    РежимОчистки                    = СтруктураПараметров.РежимОчистки;
	ДополнительныйФильтр            = СтруктураПараметров.ДополнительныйФильтр;
	ТолькоЧерновые                  = СтруктураПараметров.ТолькоЧерновые;
	МенеджерВременныхТаблиц			= СтруктураПараметров.МенеджерВременныхТаблиц;
	ОтборВерсий						= СтруктураПараметров.ОтборВерсий;
	РежимИнверсии                   = СтруктураПараметров.РежимИнверсии;
	
	Моделирование = ?(АнализЧувствительности,"Моделирование","Отчетов");
	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|;
		|
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&&ТекстВыбираемыхПолей
		|ПОМЕСТИТЬ мПоказателиРаскрытияВрем
		|ИЗ
		|	РегистрСведений.&&ТекущийРегистр КАК &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|		&&Лог_СоединениеСЛогомНечисловыхПоказателей
		|ГДЕ
		|	&&ТекущийРегистр.Показатель В (&&ОтборПоказателей) &&ТекстДополнительныхОтборов &&Лог_ОтборПоЛогуНечисловыхПоказателей";		
	Иначе		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&&ТекстВыбираемыхПолей
		|
		|ИЗ
		|	РегистрСведений.&&ТекущийРегистр КАК &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&ВыражениеСоединенияСВерсиями
		|		&&Лог_СоединениеСЛогомНечисловыхПоказателей
		|ГДЕ
		|	&&ТекущийРегистр.Показатель В (&&ОтборПоказателей) &&ТекстДополнительныхОтборов &&Лог_ОтборПоЛогуНечисловыхПоказателей";
	КонецЕсли;
	
	ЧислоАналитикГруппы = ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		Если ЗначениеЗАполнено(ГруппаПоказателей.АналитикаВалюта) Тогда 	
			ЧислоАналитикГруппы = "Валютные";
		Иначе	
			ЧислоАналитикГруппы = "Синтетика";
		КонецЕсли;
	КонецЕсли;	
	
	Если Нечисловые Тогда
		  ЧислоАналитикГруппы = "Нечисловые";
	КонецЕсли;	
	
	//Добавляем соединения
	ВыражениеСоединенияСВерсиями = ПолучитьТекстСоединенияСВерсиями(ГруппаПоказателей,ЧислоАналитикГруппы,ИдГруппы);
   		
	//Периоды всегда выбираем из значений
	ТекстВыбираемыхПолей = "";
	ТекстВыбираемыхПолей = "мВерсииБаза0.ПериодОтчета КАК ПериодыСвязанныйПериод,";
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|	ЛОЖЬ КАК ЗначениеИзЛога,";

	Лог_ТекстСоединенияАналитик = "";
	Лог_ТекстСоединенияАналитик = "мВерсииБаза0.ПериодОтчета = ЛогИзмененныхПоказателей.ПериодОтчета";
		
	Для Каждого Поле Из РаскрываемыеАналитики Цикл
						
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Поле.Ключ) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+Поле.Ключ];	
			КонецЕсли;
			Если Поле.Ключ = "АналитикаВалюта" Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 	
			ИНачеЕсли ВРЕГ(Лев(Поле.Ключ,9)) = "АНАЛИТИКА" Тогда
				ИндексАналитики = Число(Прав(Поле.Ключ,1));
				Если ИндексАналитики>ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик Тогда
					 ИндексАналитики = 0;
				КонецЕсли;		
			КонецЕсли;	
				
			Если Поле.Ключ = "Организация" Тогда
						
				Если НЕ СтруктураЗаменяемыхАналитик = Неопределено И СтруктураЗаменяемыхАналитик.Свойство("Организация") Тогда
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	&ЗаменяемаяАналитика_Организация КАК "+Поле.Ключ+",";	
					Запрос.Параметры.Вставить("ЗаменяемаяАналитика_Организация",СтруктураЗаменяемыхАналитик["Организация"]);
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	мВерсииБаза0.Организация КАК "+Поле.Ключ+",";
				КонецЕсли;	
					
			ИначеЕсли Поле.Ключ = "Проект" Тогда
				
				Если НЕ СтруктураЗаменяемыхАналитик = Неопределено И СтруктураЗаменяемыхАналитик.Свойство("Проект") Тогда
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	&ЗаменяемаяАналитика_Проект КАК "+Поле.Ключ+",";	
					Запрос.Параметры.Вставить("ЗаменяемаяАналитика_Проект",СтруктураЗаменяемыхАналитик["Проект"]);
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	мВерсииБаза0.Проект КАК "+Поле.Ключ+",";
				КонецЕсли;	
				
			ИначеЕсли Поле.Ключ = "Сценарий" Тогда	
				
				Если НЕ СтруктураЗаменяемыхАналитик = Неопределено И СтруктураЗаменяемыхАналитик.Свойство("Сценарий") Тогда
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	&ЗаменяемаяАналитика_Сценарий КАК "+Поле.Ключ+",";	
					Запрос.Параметры.Вставить("ЗаменяемаяАналитика_Сценарий",СтруктураЗаменяемыхАналитик["Сценарий"]);
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	мВерсииБаза0.Сценарий КАК "+Поле.Ключ+",";
				КонецЕсли;	
	
			ИначеЕсли Поле.Ключ = "ПериодОтчета" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	мВерсииБаза0.ПериодОтчета КАК "+Поле.Ключ+",";
	        ИначеЕсли Поле.Ключ = "Валюта" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	мВерсииБаза0.Валюта КАК "+Поле.Ключ+",";		
			ИначеЕсли Поле.Ключ = "ВидОтчета" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	мВерсииБаза0.ВидОтчета КАК "+Поле.Ключ+",";	
			Иначе	
				Если ИндексАналитики = 0 Тогда 		
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	NULL КАК "+Поле.Ключ+",";	
				Иначе
					Если  СтруктураЗаменяемыхАналитик = Неопределено Тогда
						Если ТипЗнч(ИндексАналитики) = Тип("Число") И ИндексАналитики <= ГруппаПоказателей.ВидОтчетаЧислоАналитик Тогда
							// Это аналитика отчета
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|	&&ТаблицаКлючеваяАналитика.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";
						Иначе
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|	&&ТекущийРегистр.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";
							Лог_ТекстСоединенияАналитик = Лог_ТекстСоединенияАналитик + "
							|		И &&ТекущийРегистр.Аналитика"+ИндексАналитики+" = ЛогИзмененныхПоказателей.Аналитика"+ИндексАналитики;
						КонецЕсли;
					Иначе
						ФлагЗамены = Ложь;
						Для Каждого КодЗаменяемойаналитики Из СтруктураЗаменяемыхАналитик Цикл 
							Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+КодЗаменяемойаналитики.Ключ) = Неопределено Тогда	
								ИндексАналитикиЗамены = ГруппаПоказателей["ВидАналитики_"+КодЗаменяемойаналитики.Ключ];	
								Если ИндексАналитикиЗамены = ИндексАналитики Тогда			
									ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
									|&ЗаменяемаяАналитика_"+КодЗаменяемойаналитики.Ключ+" КАК "+Поле.Ключ+",";				
									Запрос.Параметры.Вставить("ЗаменяемаяАналитика_"+КодЗаменяемойаналитики.Ключ,КодЗаменяемойаналитики.Значение);
									ФлагЗамены = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;
						
						Если Не ФлагЗамены Тогда
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|	&&ТекущийРегистр.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";
						КонецЕсли;
						
						Если ТипЗнч(ИндексАналитики) = Тип("Число") И ИндексАналитики <= ГруппаПоказателей.ВидОтчетаЧислоАналитик Тогда
							// Это аналитика отчета
						Иначе
							Лог_ТекстСоединенияАналитик = Лог_ТекстСоединенияАналитик + "
							|		И &&ТекущийРегистр.Аналитика"+ИндексАналитики+" = ЛогИзмененныхПоказателей.Аналитика"+ИндексАналитики;
						КонецЕсли;
						
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;							
		КонецЦикла;              
	
   	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|	&&ТекущийРегистр.Показатель КАК ПоказательОтчета, ";
	Лог_ТекстСоединенияАналитик = Лог_ТекстСоединенияАналитик+"
	|		И &&ТекущийРегистр.Показатель = ЛогИзмененныхПоказателей.Показатель";
		
	Если ТолькоЧерновые Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	мВерсииБаза0.ЧерноваяВерсия КАК ЧерноваяВерсия,";	
	Конецесли;	
	
	Если РежимОчистки Тогда
		Если Нечисловые Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК Значение,";		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК Значение,";		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
		КонецЕсли;
	ИначеЕсли РежимИнверсии Тогда	
		
		Если Нечисловые Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	-1 КАК Значение,";					
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	&&ТекущийРегистр.Значение КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	-1*&&ТекущийРегистр.Значение КАК Значение,";
			
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";				
			Если ЧислоАналитикГруппы = "Синтетика" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	0 КАК ЗначениеВалюта,";
			Иначе	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	-1*ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".ЗначениеВалюта КАК ЗначениеВалюта,";
			КонецЕсли;	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";	
		КонецЕсли;

	Иначе	
		Если Нечисловые Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	-1 КАК Значение,";					
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	&&ТекущийРегистр.Значение КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	&&ТекущийРегистр.Значение КАК Значение,";
			
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";				
			Если ЧислоАналитикГруппы = "Синтетика" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	0 КАК ЗначениеВалюта,";
			Иначе	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".ЗначениеВалюта КАК ЗначениеВалюта,";
			КонецЕсли;	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";	
		КонецЕсли;
	КонецЕсли;	
						
	Если ЧислоАналитикГруппы = "Синтетика" ИЛИ (ЧислоАналитикГруппы = "Нечисловые" И ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик=0) Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	ИСТИНА КАК СинтетическоеЗначение,";	
	Иначе	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	ЛОЖЬ КАК СинтетическоеЗначение,";
	КонецЕсли;	
		
	ТекстДополнительныхОтборов = "";
	Лог_ТекстДополнительныхОтборов = "";
	
	//Если Нечисловые несинтетические показатели, то итоговые записи не нужны 
	Если ЧислоАналитикГруппы = "Нечисловые" И ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик>0 И ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик >ГруппаПоказателей.ВидОтчетаЧислоАналитик  Тогда
		ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
		|	И &&ТекущийРегистр.ИтоговоеЗначение = ЛОЖЬ";	
	КонецЕсли;	

	//Если был установлен отобр на уровне фильтра по неключевой аналитике - добавляем его в запрос	
	Для Каждого Стр Из ДополнительныйОтбор Цикл	
		Если Стр.Ключ = "АналитикаВалюта" Тогда		
			ЗначениеОтбора =  Стр.Значение;

			Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
				ИндексАналитики = "Валюта";	
			Иначе
				ИндексАналитики = 0;
			КонецЕсли; 	
			
			Если ИндексАналитики = "Валюта" Тогда 
				ИндексАналитки = "Валюта";
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
				Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
				|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
				Запрос.Параметры.Вставить("Параметр_АналитикаВалюта",ЗначениеОтбора);
			Иначе	
				ИндексАналитки = "Валюта";
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И ЛОЖЬ";	
			КонецЕсли;
			
			Продолжить;			
				
		КонецЕсли;	
		
		Если СтрНайти(Стр.Ключ,"Аналитика") = 1 Тогда
			
			ЗначениеОтбора =  Стр.Значение;
			ИмяПоляОтбора  =  Стр.Ключ;

			ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
			Если  НЕ ИндексАналитки = 0 Тогда
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
				Если ТипЗнч(ИндексАналитики) = Тип("Число") И ИндексАналитики <= ГруппаПоказателей.ВидОтчетаЧислоАналитик Тогда
					// Это аналитика отчета
				Иначе
					Лог_ТекстСоединенияАналитик = Лог_ТекстСоединенияАналитик + "
					|		И &&ТекущийРегистр.Аналитика"+ИндексАналитики+" = ЛогИзмененныхПоказателей.Аналитика"+ИндексАналитики;
				КонецЕсли;
				Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
			КонецЕсли;			
			Продолжить;
		КонецЕсли;	
		
		ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.Ключ);
		
		Если ЗначениеЗаполнено(ПВХзначение) Тогда	
			ИндексАналитки = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Стр.Ключ) = Неопределено Тогда	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Стр.Ключ];	
			КонецЕсли;
			Если ИндексАналитки = 0 Тогда
				Продолжить;
			КонецЕсли;		 
			
			ЗначениеОтбора =  Стр.Значение;
			ИмяПоляОтбора  =  Стр.Ключ;
			
			Если ИмяПоляОтбора = "АналитикаВалюта" Тогда	
				ИндексАналитки = "Валюта";	
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
				Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
				|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
			Иначе	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
				Если  ИндексАналитки = 0 Тогда
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И ЛОЖЬ";
				Иначе	
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
					Если ТипЗнч(ИндексАналитики) = Тип("Число") И ИндексАналитики <= ГруппаПоказателей.ВидОтчетаЧислоАналитик Тогда
						// Это аналитика отчета
					Иначе
						Лог_ТекстСоединенияАналитик = Лог_ТекстСоединенияАналитик + "
						|		И &&ТекущийРегистр.Аналитика"+ИндексАналитики+" = ЛогИзмененныхПоказателей.Аналитика"+ИндексАналитики;
					КонецЕсли;
					Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;		                                                                                                              
			
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныйФильтр) = Тип("ТаблицаЗначений") Тогда
		//Если был установлен расширенный фильтр по неключевой аналитике - добавляем его в запрос	
		
		Для Каждого Стр Из ДополнительныйФильтр Цикл	
			Если Стр.ИмяОтбора = "АналитикаВалюта" Тогда		
				ЗначениеОтбора =  Стр.ЗначениеОтбора;
				ТипОтбора      =  ВернутьОтборДляЗапроса(Стр.ТипОтбора);
				
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	
				
				Если ИндексАналитики = "Валюта" Тогда 
					ИндексАналитки = "Валюта";
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" "+ТипОтбора+" (&Параметр_АналитикаВалюта)";
					Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
					|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
					Запрос.Параметры.Вставить("Параметр_АналитикаВалюта",ЗначениеОтбора);					
				Иначе	
					ИндексАналитки = "Валюта";
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И ЛОЖЬ";	
				КонецЕсли;
				
				Продолжить;			
			КонецЕсли;	
			
			ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.ИмяОтбора);
			
			Если ЗначениеЗаполнено(ПВХзначение) Тогда	
				ИндексАналитки = Неопределено;	
				Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Стр.ИмяОтбора) = Неопределено Тогда	
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Стр.ИмяОтбора];	
				КонецЕсли;
				Если ИндексАналитки = 0 Тогда
					Продолжить;
				КонецЕсли;		 
				
				ЗначениеОтбора =  Стр.ЗначениеОтбора;
				ИмяПоляОтбора  =  Стр.ИмяОтбора;
				ТипОтбора      =  ВернутьОтборДляЗапроса(Стр.ТипОтбора);
				
				Если ИмяПоляОтбора = "АналитикаВалюта" Тогда	
					ИндексАналитки = "Валюта";	
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" "+ТипОтбора+" (&Параметр_"+ИмяПоляОтбора+")";
					Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
					|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
				Иначе	
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
					Если  ИндексАналитки = 0 Тогда
						ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
						|	И ЛОЖЬ";
					Иначе	
						ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
						|	И &&ТекущийРегистр.Аналитика"+ИндексАналитки+" "+ТипОтбора+" (&Параметр_"+ИмяПоляОтбора+")";
						Если ТипЗнч(ИндексАналитики) = Тип("Число") И ИндексАналитики <= ГруппаПоказателей.ВидОтчетаЧислоАналитик Тогда
							// Это аналитика отчета
						Иначе
							Лог_ТекстСоединенияАналитик = Лог_ТекстСоединенияАналитик + "
							|		И &&ТекущийРегистр.Аналитика"+ИндексАналитики+" = ЛогИзмененныхПоказателей.Аналитика"+ИндексАналитики;
						КонецЕсли;
						Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
					КонецЕсли;					
				КонецЕсли;				
			КонецЕсли;		                                                                                                              
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстВыбираемыхПолей = ЛЕВ(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-1);
	
	// Добавим значения из лога измененных показателей, если необходимо
	Если ТипЗнч(МенеджерВременныхТаблиц) = Тип("МенеджерВременныхТаблиц") Тогда
		
		ТекстУсловия = "";
		Для Каждого КлючВерсии Из СтруктураПараметров.ОтборВерсий Цикл
			ТекстУсловия = ТекстУсловия + "
			|	И &&ТекущийРегистр." + КлючВерсии.Ключ + " В (&" +КлючВерсии.Ключ + "База0" + ")";
		КонецЦикла;
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ 
		|	&&Лог_ТекстВыбираемыхПолей
		|ИЗ
		|	втЛогИзмененныхПоказателей КАК &&ТекущийРегистр
		|
		|ГДЕ
		|	&&ТекущийРегистр.Показатель В (&&ОтборПоказателей) &&Лог_ТекстДополнительныхОтборов &&ОтборВерсии";
		
		Если Нечисловые Тогда
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_СоединениеСЛогомНечисловыхПоказателей","
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЛогИзмененныхПоказателей КАК ЛогИзмененныхПоказателей
			|			ПО &&Лог_ТекстСоединенияАналитик");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ОтборПоЛогуНечисловыхПоказателей","
			|	И ЛогИзмененныхПоказателей.Показатель ЕСТЬ NULL");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ИмяТаблицыЛогаРассчитанныхПоказателей","втЛогИзмененныхПоказателей");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ТекстСоединенияАналитик",Лог_ТекстСоединенияАналитик);
		Иначе
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_СоединениеСЛогомНечисловыхПоказателей","");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ОтборПоЛогуНечисловыхПоказателей","");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ИмяТаблицыЛогаРассчитанныхПоказателей","втЛогИзмененныхПоказателей");
		КонецЕсли;
		
		Лог_ТекстВыбираемыхПолей = СтрЗаменить(ТекстВыбираемыхПолей,"&&ТаблицаКлючеваяАналитика","&&ТекущийРегистр");
		Лог_ТекстВыбираемыхПолей = СтрЗаменить(Лог_ТекстВыбираемыхПолей,"мВерсииБаза0","&&ТекущийРегистр");
		Лог_ТекстВыбираемыхПолей = СтрЗаменить(Лог_ТекстВыбираемыхПолей,"&&ТекущийРегистр.Значение КАК ЗначениеНечисловое","&&ТекущийРегистр.ЗначениеНечисловое КАК ЗначениеНечисловое");
		
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ТекстВыбираемыхПолей",Лог_ТекстВыбираемыхПолей);
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ТекстДополнительныхОтборов",Лог_ТекстДополнительныхОтборов);
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборВерсии",ТекстУсловия);
		
	Иначе
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_СоединениеСЛогомНечисловыхПоказателей","");
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&Лог_ОтборПоЛогуНечисловыхПоказателей","");
	КонецЕсли;
	ТекстВыбираемыхПолей = СтрЗаменить(ТекстВыбираемыхПолей,"&&ТаблицаКлючеваяАналитика","&&ТекущийРегистр");
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","мВерсииБаза0");
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСВерсиями",ВыражениеСоединенияСВерсиями);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстВыбираемыхПолей" ,ТекстВыбираемыхПолей);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборПоказателей" ,"&ОтборПоказателей_"+ИдГруппы);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстДополнительныхОтборов" ,ТекстДополнительныхОтборов);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","ЗначенияПоказателей"+Моделирование+ЧислоАналитикГруппы);
	
КонецПроцедуры	

Функция ПолучитьТекстСоединенияСВерсиями(ГруппаПоказателей,ИндексБазы,ИдГруппы)
	
	ТекстБазыВерсий = "мВерсииБаза0";
		
	ТекстСоединения = "&&ТекущийРегистр.Версия = "+ТекстБазыВерсий+".Версия И "+"&&ТекущийРегистр.Показатель В (&ОтборПоказателей_"+ИдГруппы+")";
	
	Возврат ТекстСоединения;
	
КонецФункции	

Функция ПолучитьЗначениеПоказателейПоИсточнику(ТаблицаИсточник,СтруктураПараметровОтбора,РаскрываемыеАналитики=Неопределено,АнализЧувствительности=Ложь,СтруктураЗаменяемыхАналитик = Неопределено) Экспорт
	
	 флОшибки 				= Ложь;
	 СообщениеОбОшибки	 	= "";
	 КэшПоказателей         = Неопределено;
	 КэшАналитик            = Неопределено;
	 
	 Запрос                 = Новый Запрос;
	 СхемаЗапроса 			= Новый СхемаЗапроса;
	 
	 Если НЕ ТипЗнч(СтруктураПараметровОтбора) = Тип("Структура") Тогда
		  флОшибки = Истина;
		  СообщениеОбОшибки = НСтр("ru = 'Не задана структура отборов показателей'");	 
	 КонецЕсли;	 
	 
	 Если НЕ СтруктураПараметровОтбора.Свойство("ПоказательОтчета") Тогда
		  флОшибки = Истина;
		  СообщениеОбОшибки = НСтр("ru = 'Не задан отбор по показателям отчетов'");	 
	 КонецЕсли;	 
	 	
	 Если НЕ СтруктураПараметровОтбора.Свойство("ПериодОтчета") Тогда
		  флОшибки = Истина;
		  СообщениеОбОшибки = НСтр("ru = 'Не задан отбор по периоду отчета'");	 
	 КонецЕсли;	

	 Если флОшибки Тогда
		  Возврат Неопределено;
	 КонецЕсли;	 
	 
	 ТзАналитик = Новый ТаблицаЗначений;
	 
	 МассивПоказателей = СтруктураПараметровОтбора["ПоказательОтчета"];
	 
	 Если Не СтруктураПараметровОтбора.Свойство("ВидОтчета") Тогда
		  МассивВо = ПолучитьВидыОтчетовПоПоказателям(МассивПоказателей);		 
		  СтруктураПараметровОтбора.Вставить("ВидОтчета",МассивВо);
	 КонецЕсли;	 
	 
	 СтруктураПоиска 				= Новый Структура;
	 СтруктураПараметровВерсии 		= Новый Структура;
	 ОтборВерсий                    = Новый Структура;
	 СтруктураПараметровВерсии.Вставить("ОтборВерсий",ОтборВерсий);
	 СтруктураПараметровВерсии.Вставить("ВидОтчета",СтруктураПараметровОтбора.ВидОтчета);
	 
	 Если СтруктураПараметровОтбора.Свойство("Сценарий") Тогда
		 ОтборВерсий.Вставить("Сценарий",СтруктураПараметровОтбора.Сценарий);
	 КонецЕсли;
	 
	 Если СтруктураПараметровОтбора.Свойство("Проект") Тогда 
		 ОтборВерсий.Вставить("Проект",СтруктураПараметровОтбора.Проект);
	 КонецЕсли;
	 
	 Если СтруктураПараметровОтбора.Свойство("Организация") Тогда 
		 ОтборВерсий.Вставить("Организация",СтруктураПараметровОтбора.Организация);
	 КонецЕсли;

	 
	 ОтборВерсий.Вставить("ПериодОтчета",СтруктураПараметровОтбора.ПериодОтчета);
		 
	 ДополнительныйОтбор = Новый Структура;
	 Для Каждого Пар Из СтруктураПараметровОтбора Цикл
		 
		 Если Пар.Ключ = "Сценарий" 
			 ИЛИ Пар.Ключ = "Организация"
			    ИЛИ Пар.Ключ = "Проект"
				   ИЛИ Пар.Ключ = "ПериодОтчета"
		             ИЛИ Пар.Ключ = "Валюта"  
					 	ИЛИ Пар.Ключ = "ВидОтчета"
					 		ИЛИ Пар.Ключ = "ПоказательОтчета" Тогда
							 Продолжить;		 
		 КонецЕсли;			 
					  
		 ДополнительныйОтбор.Вставить(Пар.Ключ,Пар.Значение);
		 
	 КонецЦикла;	 
	   
	 ТекстШаблонаЗапроса = "";	
	 ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();

	 РаскрываемыеАналитики_ = Новый ТаблицаЗначений;
	 РаскрываемыеАналитики_.Колонки.Добавить("Ключ");

	 Нстр = РаскрываемыеАналитики_.Добавить();
	 Нстр.Ключ = "Организация";	 
	 Нстр = РаскрываемыеАналитики_.Добавить();
	 Нстр.Ключ = "Проект";	 
	 Нстр = РаскрываемыеАналитики_.Добавить();
	 Нстр.Ключ = "Сценарий";
	 Нстр = РаскрываемыеАналитики_.Добавить();
	 Нстр.Ключ = "ПериодОтчета";
	 Нстр = РаскрываемыеАналитики_.Добавить();
	 Нстр.Ключ = "УидГруппыОтборов";

	 мАналитикВТаблице = 0;
	 Для  Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл		 
		 Если ТаблицаИсточник.Колонки.Найти("Аналитика"+Инд) = Неопределено Тогда
			  Прервать;
		 КонецЕсли;	 		 
		 мАналитикВТаблице = мАналитикВТаблице+1;	 
	 КонецЦикла;	 
	  
	 Если Не РаскрываемыеАналитики=Неопределено Тогда	 
		 Для Каждого Стр Из РаскрываемыеАналитики Цикл	 	 
			 Если ВРЕГ(Стр.Ключ) = "АНАЛИТИКАВАЛЮТА" Тогда
				 Нстр = РаскрываемыеАналитики_.Добавить();
				 Нстр.Ключ = Стр.Ключ;
				 Продолжить;	 
			 КонецЕсли;	 
			 Если ВРЕГ(Лев(Стр.Ключ,9)) = "АНАЛИТИКА" Тогда
				 ИндексАналитики = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Прав(Стр.Ключ,1));	
				 Если ИндексАналитики = Неопределено ИЛИ ИндексАналитики>ПараметрыСеанса.ЧислоДопАналитик Тогда
					 Продолжить;
				 Иначе	
					 Нстр = РаскрываемыеАналитики_.Добавить();
					 Нстр.Ключ = Стр.Ключ;
					 Продолжить;
				 КонецЕсли;		
			 КонецЕсли;	
			 ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.Ключ);
			 Если ЗначениеЗаполнено(ПВХзначение) Тогда
				 Нстр = РаскрываемыеАналитики_.Добавить();
				 Нстр.Ключ = Стр.Ключ;
			 КонецЕсли;	 	 
		 КонецЦикла;	 	 
	 КонецЕсли;	 
	 
	 Для Каждого СтрДопОтбор Из ДополнительныйОтбор Цикл	 
		 Если РаскрываемыеАналитики_.Найти(СтрДопОтбор.Ключ,"Ключ") = Неопределено Тогда
			 Нстр = РаскрываемыеАналитики_.Добавить();
			 Нстр.Ключ = СтрДопОтбор.Ключ;	 
		 КонецЕсли;	
	 КонецЦикла;	 
		 
	 ПолучитьКэшПоказателей(МассивПоказателей,РаскрываемыеАналитики_,КэшПоказателей,КэшАналитик);

	 ПолучитьТекстЗапроса_мПоказателей(ТекстЗапроса,мАналитикВТаблице);
	 
	 Для Каждого ГруппаПоказателей Из КэшАналитик Цикл	 
		 Нечисловые = НЕ ГруппаПоказателей.ТипЗначенияЧисло;
		 
		 ИдГруппы = СтрЗаменить(Новый УникальныйИдентификатор(),"-","");
		 Для Каждого Кол Из КэшАналитик.Колонки Цикл
			 СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
		 Конеццикла;	
		 
		 Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
			 СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
		 КонецЕсли;	
		 
		 ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
		 ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
		 ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	
		 
		 Если  ПоказателиТекущегоЗапроса.Количество()= 0 Тогда
			 Продолжить;
		 КонецЕсли;	
		 
		 СтруктураПараметров = Новый Структура;
		 СтруктураПараметров.Вставить("Запрос",Запрос);
		 СтруктураПараметров.Вставить("РаскрываемыеАналитики",РаскрываемыеАналитики_); 
		 СтруктураПараметров.Вставить("ГруппаПоказателей",ГруппаПоказателей);
		 СтруктураПараметров.Вставить("ИдГруппы",ИдГруппы);
		 СтруктураПараметров.Вставить("Нечисловые",Нечисловые);
		 СтруктураПараметров.Вставить("ОтображатьСуммуВДопВалютах",Ложь);
		 СтруктураПараметров.Вставить("ДополнительныйОтбор",ДополнительныйОтбор);
		 СтруктураПараметров.Вставить("ОтборВерсий",ОтборВерсий);
		 СтруктураПараметров.Вставить("АнализЧувствительности",АнализЧувствительности);
		 СтруктураПараметров.Вставить("СтруктураЗаменяемыхАналитик",СтруктураЗаменяемыхАналитик);
		 
		 ДобавитьВыражениеПолученияДанныхПоказателейИсточника(СтруктураПараметров,ТекстШаблонаЗапроса); 
		 Запрос.Параметры.Вставить("ОтборПоказателей_"+ИдГруппы,ПоказателиТекущегоЗапроса);		 
	 КонецЦикла;	
	 
	 ТекстЗапроса = ТекстЗапроса+ ТекстШаблонаЗапроса;		 	 
	 Запрос.Текст = ТекстЗапроса; 
	 Запрос.Параметры.Вставить("ВидОтчета",СтруктураПараметровОтбора.ВидОтчета);
	 Запрос.Параметры.Вставить("мПоказателиРаскрытия",ТаблицаИсточник);

	 
	 тзДанные =  Запрос.Выполнить().Выгрузить();
	 
	 //Проверка на типизированные колонки с видами субконто
	 МассивУдаляемыхКолонок = Новый Массив();
	 Для Каждого Кол Из тзДанные.Колонки Цикл
		 Если Кол.ТипЗначения.Типы().Количество()=0 ИЛИ (Кол.ТипЗначения.Типы().Количество()=1 И Кол.ТипЗначения.Типы()[0]= Тип("null")) Тогда
			  МассивУдаляемыхКолонок.Добавить(Кол);
		 КонецЕсли;	 	 	 
	 КонецЦикла;	 
	 
	 Для Каждого УдКолонка Из МассивУдаляемыхКолонок Цикл
		 ИмяКолонки = УдКолонка.Имя;
		 тзДанные.Колонки.Удалить(УдКолонка);
		 Если ИмяКолонки = "ЗначениеНечисловое" Тогда	 
			 МассивТипов = Новый Массив;
			 МассивТипов.Добавить(Тип("Дата"));
			 МассивТипов.Добавить(Тип("Строка"));
			 МассивТипов.Добавить(Тип("Булево"));
             тзДанные.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов(МассивТипов)); 
		 ИначеЕсли ИмяКолонки = "УидГруппыОтборов" Тогда	 
			 тзДанные.Колонки.Добавить(ИмяКолонки,ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(128));
		 Иначе	 
			 тзДанные.Колонки.Добавить(ИмяКолонки,Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные")); 
		 КонецЕсли;
	 КонецЦикла;	 
	 
	 Возврат тзДанные;
	 	 
 КонецФункции	
 
Процедура ДобавитьВыражениеПолученияДанныхПоказателейИсточника(СтруктураПараметров,ТекстШаблонаЗапроса);
		
	Запрос              			= СтруктураПараметров.Запрос;
	РаскрываемыеАналитики        	= СтруктураПараметров.РаскрываемыеАналитики;
	ГруппаПоказателей   			= СтруктураПараметров.ГруппаПоказателей;
    ИдГруппы                        = СтруктураПараметров.ИдГруппы;
	Нечисловые                      = СтруктураПараметров.Нечисловые;
    ОтображатьСуммуВДопВалютах      = СтруктураПараметров.ОтображатьСуммуВДопВалютах;
	ДополнительныйОтбор             = СтруктураПараметров.ДополнительныйОтбор;
	ОтборВерсий                     = СтруктураПараметров.ОтборВерсий;
	АнализЧувствительности          = СтруктураПараметров.АнализЧувствительности;
	СтруктураЗаменяемыхАналитик     = СтруктураПараметров.СтруктураЗаменяемыхАналитик;

	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|;
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		| &&ТекстВыбираемыхПолей
		|ИЗ
		|мПоказателиРаскрытия КАК мПоказателиРаскрытия 
		|ГДЕ
		|	мПоказателиРаскрытия.Показатель В (&&ОтборПоказателей) &&ТекстКлючевыхОтборов  &&ТекстДополнительныхОтборов";
		
	Иначе		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		| &&ТекстВыбираемыхПолей
		|
		|ИЗ
		|мПоказателиРаскрытия КАК мПоказателиРаскрытия 
		|ГДЕ
		|	мПоказателиРаскрытия.Показатель В (&&ОтборПоказателей) &&ТекстКлючевыхОтборов  &&ТекстДополнительныхОтборов";
	КонецЕсли;
		
	ЧислоАналитикГруппы = ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		Если ЗначениеЗАполнено(ГруппаПоказателей.АналитикаВалюта) Тогда 	
			ЧислоАналитикГруппы = "Валютные";
		Иначе	
			ЧислоАналитикГруппы = "Синтетика";
		КонецЕсли;
	КонецЕсли;	
	
	Если Нечисловые Тогда
		  ЧислоАналитикГруппы = "Нечисловые";
	КонецЕсли;	
	
   		
	//Периоды всегда выбираем из значений
	ТекстВыбираемыхПолей = "";
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|мПоказателиРаскрытия.Показатель КАК ПоказательОтчета, ";
    ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|	ЛОЖЬ КАК ЗначениеИзЛога,";
	
	Для Каждого Поле Из РаскрываемыеАналитики Цикл
						
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Поле.Ключ) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+Поле.Ключ];	
			КонецЕсли;
			Если Поле.Ключ = "АналитикаВалюта" Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 
			ИНачеЕсли ВРЕГ(Лев(Поле.Ключ,9)) = "АНАЛИТИКА" Тогда
				ИндексАналитики = Число(Прав(Поле.Ключ,1));
				Если ИндексАналитики>ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик Тогда
					 ИндексАналитики = 0;
				КонецЕсли;		
			КонецЕсли;	
				
			Если Поле.Ключ = "Организация" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.Организация КАК "+Поле.Ключ+",";		
			ИначеЕсли Поле.Ключ = "Проект" Тогда
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.Проект КАК "+Поле.Ключ+",";				
			ИначеЕсли Поле.Ключ = "Сценарий" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.Сценарий КАК "+Поле.Ключ+",";
			ИначеЕсли Поле.Ключ = "ПериодОтчета" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.ПериодОтчета КАК "+Поле.Ключ+",";
	        ИначеЕсли Поле.Ключ = "Валюта" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.Валюта КАК "+Поле.Ключ+",";		
			 ИначеЕсли Поле.Ключ = "АналитикаВалюта" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.АналитикаВалюта КАК "+Поле.Ключ+",";				
			ИначеЕсли Поле.Ключ = "УидГруппыОтборов" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|мПоказателиРаскрытия.УидГруппыОтборов КАК "+Поле.Ключ+",";		
			Иначе	
				Если ИндексАналитики = 0 Тогда 		
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|NULL КАК "+Поле.Ключ+",";	
				Иначе	
					Если  СтруктураЗаменяемыхАналитик = Неопределено Тогда	
						ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
						|мПоказателиРаскрытия.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";	
					Иначе
						ФлагЗамены = Ложь;
						Для Каждого КодЗаменяемойаналитики Из СтруктураЗаменяемыхАналитик Цикл 
							Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+КодЗаменяемойаналитики.Ключ) = Неопределено Тогда	
								ИндексАналитикиЗамены = ГруппаПоказателей["ВидАналитики_"+КодЗаменяемойаналитики.Ключ];	
								Если ИндексАналитикиЗамены = ИндексАналитики Тогда			
									ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
									|&ЗаменяемаяАналитика_"+КодЗаменяемойаналитики.Ключ+" КАК "+Поле.Ключ+",";				
									Запрос.Параметры.Вставить("ЗаменяемаяАналитика_"+КодЗаменяемойаналитики.Ключ,КодЗаменяемойаналитики.Значение);
									ФлагЗамены = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;
						
						Если Не ФлагЗамены Тогда
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|мПоказателиРаскрытия.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";			
						КонецЕсли;		
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;							
		КонецЦикла;              
	
   		
	Если Нечисловые Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		| мПоказателиРаскрытия.ЗначениеНеЧисло КАК Значение,";		
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		| 0 КАК ЗначениеВалюта,";	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|мПоказателиРаскрытия.ЗначениеНеЧисло КАК ЗначениеНечисловое,";	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
	Иначе	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|мПоказателиРаскрытия.Значение КАК Значение,";
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|мПоказателиРаскрытия.ЗначениеВалюта КАК ЗначениеВалюта,";
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|Ложь КАК ЗначениеНечисловое,";	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
	КонецЕсли;
		
	ТекстДополнительныхОтборов = "";
	Лог_ТекстДополнительныхОтборов = "";

	//Отборы по ключевым Аналитикам
	ТекстОтборовПоВерсиям = "";
	Для Каждого ОтборВерсии Из ОтборВерсий Цикл
		ТекстОтборовПоВерсиям = ТекстОтборовПоВерсиям+"
		|И мПоказателиРаскрытия."+ОтборВерсии.Ключ+" В (&Параметр_"+ОтборВерсии.Ключ+")";	
		Запрос.Параметры.Вставить("Параметр_"+ОтборВерсии.Ключ,ОтборВерсии.Значение);
	КонецЦикла;	
	
	//Если был установлен отобр на уровне фильтра по неключевой аналитике - добавляем его в запрос	
	Для Каждого Стр Из ДополнительныйОтбор Цикл	
		
		Если Стр.Ключ = "УидГруппыОтборов" Тогда
			ЗначениеОтбора =  Стр.Значение;
			ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
			|И мПоказателиРаскрытия.УидГруппыОтборов В (&Параметр_УидГруппыОтборов)";	
			Запрос.Параметры.Вставить("Параметр_УидГруппыОтборов",ЗначениеОтбора);
			Продолжить;
		КонецЕсли;	
		
		
		Если Стр.Ключ = "АналитикаВалюта" Тогда		
			ЗначениеОтбора =  Стр.Значение;

			Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
				ИндексАналитики = "Валюта";	
			Иначе
				ИндексАналитики = 0;
			КонецЕсли; 	
			
			Если ИндексАналитики = "Валюта" Тогда 
				ИндексАналитки = "Валюта";
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|И мПоказателиРаскрытия.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";	
				Запрос.Параметры.Вставить("Параметр_АналитикаВалюта",ЗначениеОтбора);	

			Иначе	
				ИндексАналитки = "Валюта";
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|И ЛОЖЬ";	
			КонецЕсли;
			
			Продолжить;			
		КонецЕсли;	
		
		ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.Ключ);
		
		Если ЗначениеЗаполнено(ПВХзначение) Тогда	
			ИндексАналитки = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Стр.Ключ) = Неопределено Тогда	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Стр.Ключ];	
			КонецЕсли;
			Если ИндексАналитки = 0 Тогда
				Продолжить;
			КонецЕсли;		 
			
			ЗначениеОтбора =  Стр.Значение;
			ИмяПоляОтбора  =  Стр.Ключ;
			
			Если ИмяПоляОтбора = "АналитикаВалюта" Тогда	
				ИндексАналитки = "Валюта";	
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|И мПоказателиРаскрытия.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";		
			Иначе	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
				Если  ИндексАналитки = 0 Тогда
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|И ЛОЖЬ";
				Иначе	
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|И мПоказателиРаскрытия.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
					Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;		                                                                                                              
			
	КонецЦикла;
	
	ТекстВыбираемыхПолей = ЛЕВ(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-1);
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","мВерсииБаза0");
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстКлючевыхОтборов",ТекстОтборовПоВерсиям);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстВыбираемыхПолей" ,ТекстВыбираемыхПолей);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборПоказателей" ,"&ОтборПоказателей_"+ИдГруппы);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстДополнительныхОтборов" ,ТекстДополнительныхОтборов);
	
КонецПроцедуры	

Процедура ПолучитьТекстЗапроса_мПоказателей(ТекстШаблонаЗапроса,мАналитикВТаблице)
	

	ТекстАналитик = "";
	ТекстИндексаАналитик = "";
	
	Для Инд = 1 По мАналитикВТаблице Цикл
		ТекстАналитик 			= ТекстАналитик+"тмПоказателиРаскрытия.Аналитика"+Инд+",";
		ТекстИндексаАналитик 	= ТекстИндексаАналитик+",Аналитика"+Инд;
	КонецЦикла;	
	
	ТекстШаблонаЗапроса =  ТекстШаблонаЗапроса +"
	|
	|ВЫБРАТЬ
	|тмПоказателиРаскрытия.Показатель,
	|тмПоказателиРаскрытия.УидГруппыОтборов,
	|тмПоказателиРаскрытия.ПериодОтчета,
	|тмПоказателиРаскрытия.Сценарий,
	|тмПоказателиРаскрытия.Организация,
	|тмПоказателиРаскрытия.Проект,
	|тмПоказателиРаскрытия.АналитикаВалюта,
	|&ТекстАналитик,
	|тмПоказателиРаскрытия.ЗначениеВалюта,
	|тмПоказателиРаскрытия.ЗначениеНеЧисло,
	|тмПоказателиРаскрытия.Значение
	|ПОМЕСТИТЬ мПоказателиРаскрытия
	|ИЗ
	|&мПоказателиРаскрытия КАК тмПоказателиРаскрытия	
	|ИНДЕКСИРОВАТЬ ПО
	|Показатель,
	|ПериодОтчета,
	|Сценарий,
	|Организация,
	|Проект,
	|АналитикаВалюта
	|&ТекстИндексаАналитик";
	
	ТекстШаблонаЗапроса =СтрЗаменить(ТекстШаблонаЗапроса,"&ТекстАналитик,",ТекстАналитик);
	ТекстШаблонаЗапроса =СтрЗаменить(ТекстШаблонаЗапроса,"&ТекстИндексаАналитик",ТекстИндексаАналитик);
	
КонецПроцедуры	

Функция ПолучитьПоказателиВО(ВидыОтчетов)
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	  |	ПоказателиОтчетов.Ссылка КАК Показатель,
	  |	ПоказателиОтчетов.Код КАК Код,
	  |	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	  |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	  |	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
	  |	ПоказателиОтчетов.Наименование КАК Наименование
	  |ИЗ
	  |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	  |ГДЕ
	  |	ПоказателиОтчетов.Владелец В(&Владелец)";
	  
	  Запрос.УстановитьПараметр("Владелец",ВидыОтчетов);
	  
	  Возврат  Запрос.Выполнить().Выгрузить();
	 	  
КонецФункции	

Функция ПолучитьТекстЗапросаПоВерсиям(Запрос,СтруктураПараметров) Экспорт

	ТекстУсловияПоВерсиям = "";
	
	Если СтруктураПараметров.ВОсновнойВалюте Тогда
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям+ "
		|	И НЕ ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте";
	КонецЕсли;	
	
	Если НЕ СтруктураПараметров.ЧерноваяВерсия Тогда
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям+ "
		|	И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия";
	Иначе	
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям+ "
		|	И ((НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия) ИЛИ ВерсииЗначенийПоказателей.ИдентификаторСеанса=&ИдентификаторСеанса)";
        Запрос.Параметры.Вставить("ИдентификаторСеанса",СтруктураПараметров.ИдентификаторСеанса);
	КонецЕсли;	

	//Отборы базовой версии по ключевым измерениям
	Для Каждого КлючВерсии Из СтруктураПараметров.ОтборВерсий Цикл
		ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям+"
		|	И ВерсииЗначенийПоказателей."+КлючВерсии.Ключ+" В (&"+КлючВерсии.Ключ+"База0" +")";
		Запрос.Параметры.Вставить(КлючВерсии.Ключ+"База0",КлючВерсии.Значение);
	КонецЦикла;	  
	
	Если СтруктураПараметров.СдвигПоПериоду<>0 Тогда
		
		ТзПериодовСоСдвигом = Новый ТаблицаЗначений;
		ТзПериодовСоСдвигом.Колонки.Добавить("ИндексБазы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));	
		ТзПериодовСоСдвигом.Колонки.Добавить("ИсходныйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериод",Новый ОписаниеТипов("СправочникСсылка.Периоды"));	
		ТзПериодовСоСдвигом.Колонки.Добавить("БазовыйПериодДатаНачала",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		ТзПериодовСоСдвигом.Колонки.Добавить("Периодичность",Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
		
		ИсходныеПериоды = СтруктураПараметров.ОтборВерсий.ПериодОтчета;		
		ЗаполнитьТаблицуПериодов(0,ТзПериодовСоСдвигом,СтруктураПараметров.СдвигПоПериоду,ИсходныеПериоды,СтруктураПараметров.Периодичность);
		
		Запрос.Параметры.Вставить("ТзПериодовСоСдвигом",ТзПериодовСоСдвигом);
		
		ТекстЗапросаПоВерсиям = "	
		|ВЫБРАТЬ
		|	ТзПериодовСоСдвигом.БазовыйПериод КАК БазовыйПериод,
		|	ТзПериодовСоСдвигом.ИсходныйПериод КАК ИсходныйПериод
		|	ПОМЕСТИТЬ ВтТзПериодовСоСдвигом
		|ИЗ
		|	&ТзПериодовСоСдвигом КАК ТзПериодовСоСдвигом
		|;
		|//////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|	ВерсииЗначенийПоказателей.Проект КАК Проект,
		|	ТзПериодовСоСдвигом.БазовыйПериод КАК ПериодОтчета,
		|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|	ВерсииЗначенийПоказателей.Организация КАК Организация,
		|	ТзПериодовСоСдвигом.БазовыйПериод.ДатаНачала КАК ПериодОтчетаДатаНачала,
		|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
		|	ВерсииЗначенийПоказателей.ЧерноваяВерсия КАК ЧерноваяВерсия
		|ПОМЕСТИТЬ мВерсииБаза0
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТзПериодовСоСдвигом КАК ТзПериодовСоСдвигом
		|		ПО (ВерсииЗначенийПоказателей.ПериодОтчета = ТзПериодовСоСдвигом.ИсходныйПериод)
		|ГДЕ
		|	ВерсииЗначенийПоказателей.ВидОтчета В (&ВидОтчета)"+
		ТекстУсловияПоВерсиям+"
		|ИНДЕКСИРОВАТЬ ПО
		|	Версия";		
			
	ИначеЕсли СтруктураПараметров.ЭтоНечисловые Тогда	
		
		ТекстУсловияПоВерсиям = "";
		
		Для Каждого КлючВерсии Из СтруктураПараметров.ОтборВерсий Цикл
			ТекстУсловияПоВерсиям = ТекстУсловияПоВерсиям+"
			|	И ЗначенияПоказателейОтчетовНечисловые.Версия."+КлючВерсии.Ключ+" В (&"+КлючВерсии.Ключ+"База0" +")";
		КонецЦикла;	  
		
		ТекстЗапросаПоВерсиям = "
		|ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|	ВерсииЗначенийПоказателей.Проект КАК Проект,
		|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|	ВерсииЗначенийПоказателей.Организация КАК Организация,
		|	ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала КАК ПериодОтчетаДатаНачала,
		|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
		|	ВерсииЗначенийПоказателей.ЧерноваяВерсия КАК ЧерноваяВерсия
		|ПОМЕСТИТЬ мВерсииБаза0
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей  
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
		|		(ВЫБРАТЬ 
		|			МАКСИМУМ(ЗначенияПоказателейОтчетовНечисловые.Версия.Код) КАК ВерсияКод,
		|			ЗначенияПоказателейОтчетовНечисловые.Показатель КАК Показатель,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.Сценарий КАК Сценарий,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.Проект КАК Проект,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета КАК ПериодОтчета,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.Организация КАК Организация
		|		ИЗ
		|			РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
		|		ГДЕ
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.ВидОтчета В (&ВидОтчета)
		|			И ЗначенияПоказателейОтчетовНечисловые.Показатель В (&МассивПоказателей)";
		ТекстЗапросаПоВерсиям = ТекстЗапросаПоВерсиям + ТекстУсловияПоВерсиям;
		Если НЕ СтруктураПараметров.ЧерноваяВерсия Тогда
			ТекстЗапросаПоВерсиям = ТекстЗапросаПоВерсиям+ "
			|	И НЕ ЗначенияПоказателейОтчетовНечисловые.Версия.ЧерноваяВерсия"; 
		Иначе
			ТекстЗапросаПоВерсиям = ТекстЗапросаПоВерсиям+ "
			|	И ((НЕ ЗначенияПоказателейОтчетовНечисловые.Версия.ЧерноваяВерсия) ИЛИ ЗначенияПоказателейОтчетовНечисловые.Версия.ИдентификаторСеанса=&ИдентификаторСеанса)";	
		КонецЕсли;
		ТекстЗапросаПоВерсиям = ТекстЗапросаПоВерсиям+ "
		|		СГРУППИРОВАТЬ ПО
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.Сценарий,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.Проект,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета,
		|			ЗначенияПоказателейОтчетовНечисловые.Версия.Организация,
		|			ЗначенияПоказателейОтчетовНечисловые.Показатель
        |		) КАК втВерсииБазаПредв
		|	ПО
		|		ВерсииЗначенийПоказателей.Код =  втВерсииБазаПредв.ВерсияКод 
		| 		И ВерсииЗначенийПоказателей.Сценарий =  втВерсииБазаПредв.Сценарий
		| 		И ВерсииЗначенийПоказателей.Организация =  втВерсииБазаПредв.Организация
		|		И ВерсииЗначенийПоказателей.ПериодОтчета =  втВерсииБазаПредв.ПериодОтчета
        |		И ВерсииЗначенийПоказателей.Проект =  втВерсииБазаПредв.Проект";

		Запрос.Параметры.Вставить("МассивПоказателей",СтруктураПараметров.МассивПоказателей);
		
	Иначе	
		ТекстЗапросаПоВерсиям = "	
		|ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|	ВерсииЗначенийПоказателей.Проект КАК Проект,
		|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|	ВерсииЗначенийПоказателей.Организация КАК Организация,
		|	ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала КАК ПериодОтчетаДатаНачала,
		|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
		|	ВерсииЗначенийПоказателей.ЧерноваяВерсия КАК ЧерноваяВерсия
		|ПОМЕСТИТЬ мВерсииБаза0
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	ВерсииЗначенийПоказателей.ВидОтчета В (&ВидОтчета)"+
		ТекстУсловияПоВерсиям+"";
		
	КонецЕсли;
	
	Возврат  ТекстЗапросаПоВерсиям;
	
КонецФункции	

Функция ВернутьОтборДляЗапроса(Отбор)
	
	Если Отбор = Нстр("ru = 'Равно'") Тогда 
		
		Возврат "=";
		
	ИначеЕсли Отбор = Нстр("ru = 'Не равно'") Тогда
		
		Возврат "<>";
			
	ИначеЕсли Отбор = Нстр("ru = 'В списке'") Тогда	 
		
		Возврат "В";
	
	ИначеЕсли Отбор = Нстр("ru = 'Не в списке'") Тогда	 
		
		Возврат "НЕ В";
	
	ИначеЕсли Отбор = Нстр("ru = 'В группе'") ИЛИ Отбор  = Нстр("ru = 'В группе из списка'") Тогда	 
		
		Возврат " В ИЕРАРХИИ";
	
	ИначеЕсли Отбор = Нстр("ru = 'НЕ В группе'") ИЛИ Отбор  = Нстр("ru = 'НЕ В группе из списка'") Тогда	 
		
		Возврат "НЕ В ИЕРАРХИИ";
		
	Иначе	
		
		ВызватьИсключение НСтр("ru = 'Отбор не поддерживается'");
		Возврат 0;
	КонецЕсли;

	
КонецФункции	

Процедура ПоместитьЛогИзмененныхПоказателейНечисловыеВЗапрос(Запрос,ТекстЗапроса)
	
	ТекстЗапроса =  ТекстЗапроса+"
	 |
	 |;
	 |///////////////// Нечисловые выделим в отдельную таблицу, чтобы получить срез значений по последним транзакциям
	 |ВЫБРАТЬ 
	 |	мДанныеЛога.НомерТранзакции,
	 |	мДанныеЛога.Показатель,
	 |	мДанныеЛога.Сценарий,
	 |	мДанныеЛога.Организация,
	 |	мДанныеЛога.Проект, 
	 |	мДанныеЛога.Аналитика1,
	 |	мДанныеЛога.Аналитика2,
	 |	мДанныеЛога.Аналитика3,
	 |	мДанныеЛога.Аналитика4,
	 |	мДанныеЛога.Аналитика5,
	 |	мДанныеЛога.Аналитика6,
     |	мДанныеЛога.АналитикаВалюта,
     |	мДанныеЛога.ПериодОтчета,
	 |	мДанныеЛога.Валюта,
	 |	мДанныеЛога.ЗначениеНечисловое 
	 |	ПОМЕСТИТЬ мДанныеЛогаНечисловые_
     |ИЗ
	 |	РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК мДанныеЛога
	 |ГДЕ 
	 |	мДанныеЛога.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса
	 |	И мДанныеЛога.ЗначениеНечисловое <> НЕОПРЕДЕЛЕНО 
	 |;
	 |///////////////// 
	 |ВЫБРАТЬ 
	 |	МАКСИМУМ(мДанныеЛога.НомерТранзакции),
	 |	мДанныеЛога.Показатель,
	 |	мДанныеЛога.Сценарий,
	 |	мДанныеЛога.Организация,
	 |	мДанныеЛога.Проект, 
	 |	мДанныеЛога.Аналитика1,
	 |	мДанныеЛога.Аналитика2,
	 |	мДанныеЛога.Аналитика3,
	 |	мДанныеЛога.Аналитика4,
	 |	мДанныеЛога.Аналитика5,
	 |	мДанныеЛога.Аналитика6,
     |	мДанныеЛога.АналитикаВалюта,
     |	мДанныеЛога.ПериодОтчета,
	 |	мДанныеЛога.Валюта
	 |	ПОМЕСТИТЬ мДанныеЛогаНечисловыеПоследние
     |ИЗ
	 |	мДанныеЛогаНечисловые_ КАК мДанныеЛога
     |СГРУППИРОВАТЬ ПО 
     |	мДанныеЛога.Показатель,
	 |	мДанныеЛога.Сценарий,
	 |	мДанныеЛога.Организация,
	 |	мДанныеЛога.Проект, 
	 |	мДанныеЛога.Аналитика1,
	 |	мДанныеЛога.Аналитика2,
	 |	мДанныеЛога.Аналитика3,
	 |	мДанныеЛога.Аналитика4,
	 |	мДанныеЛога.Аналитика5,
	 |	мДанныеЛога.Аналитика6,
	 |	мДанныеЛога.АналитикаВалюта,
	 |	мДанныеЛога.ПериодОтчета,
	 |	мДанныеЛога.Валюта
	 |;
	 |/////////////////  Срез последних по нечисловым
	 |ВЫБРАТЬ 
	 |	мДанныеЛогаНечисловыеПоследние.НомерТранзакции,
	 |	мДанныеЛогаНечисловые.Показатель,
	 |	мДанныеЛогаНечисловые.Сценарий,
	 |	мДанныеЛогаНечисловые.Организация,
	 |	мДанныеЛогаНечисловые.Проект, 
	 |	мДанныеЛогаНечисловые.Аналитика1,
	 |	мДанныеЛогаНечисловые.Аналитика2,
	 |	мДанныеЛогаНечисловые.Аналитика3,
	 |	мДанныеЛогаНечисловые.Аналитика4,
	 |	мДанныеЛогаНечисловые.Аналитика5,
	 |	мДанныеЛогаНечисловые.Аналитика6,
     |	мДанныеЛогаНечисловые.АналитикаВалюта,
     |	мДанныеЛогаНечисловые.ПериодОтчета,
	 |	мДанныеЛогаНечисловые.Валюта,
	 |	мДанныеЛогаНечисловые.ЗначениеНечисловое,
	 |	-1 КАК Значение,
	 |	-1 КАК ЗначениеВалюта
	 |	ПОМЕСТИТЬ мДанныеЛогаНечисловые
     |ИЗ
	 |	мДанныеЛогаНечисловыеПоследние КАК мДанныеЛогаНечисловыеПоследние
     |ЛЕВОЕ СОЕДИНЕНИЕ мДанныеЛогаНечисловые_ КАК мДанныеЛогаНечисловые 
	 |ПО 
	 |	мДанныеЛогаНечисловыеПоследние.НомерТранзакции 	   = мДанныеЛогаНечисловые.НомерТранзакции
	 |	И мДанныеЛогаНечисловыеПоследние.Показатель        = мДанныеЛогаНечисловые.Показатель
	 |	И мДанныеЛогаНечисловыеПоследние.Сценарий          = мДанныеЛогаНечисловые.Сценарий
	 |	И мДанныеЛогаНечисловыеПоследние.Организация       = мДанныеЛогаНечисловые.Организация
	 |	И мДанныеЛогаНечисловыеПоследние.Проект            = мДанныеЛогаНечисловые.Проект
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика1        = мДанныеЛогаНечисловые.Аналитика1
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика2        = мДанныеЛогаНечисловые.Аналитика2
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика3        = мДанныеЛогаНечисловые.Аналитика3
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика4        = мДанныеЛогаНечисловые.Аналитика4
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика5        = мДанныеЛогаНечисловые.Аналитика5
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика6        = мДанныеЛогаНечисловые.Аналитика6
	 |	И мДанныеЛогаНечисловыеПоследние.АналитикаВалюта   = мДанныеЛогаНечисловые.АналитикаВалюта
	 |	И мДанныеЛогаНечисловыеПоследние.ПериодОтчета      = мДанныеЛогаНечисловые.ПериодОтчета
	 |	И мДанныеЛогаНечисловыеПоследние.Валюта            = мДанныеЛогаНечисловые.Валюта
     |
	 |;
	 |/////////////////  Удаляем ненужные временные таблицы
	 |
	 |УНИЧТОЖИТЬ мДанныеЛогаНечисловые_
	 |;
	 |УНИЧТОЖИТЬ мДанныеЛогаНечисловыеПоследние
	 |";
	 
КонецПроцедуры	

Процедура ДобавитьВыражениеПолученияДанныхЛога(СтруктураПараметров,ТекстШаблонаЗапроса);
		
	Запрос              			= СтруктураПараметров.Запрос;
	РаскрываемыеАналитики        	= СтруктураПараметров.РаскрываемыеАналитики;
	ГруппаПоказателей   			= СтруктураПараметров.ГруппаПоказателей;
    ИдГруппы                        = СтруктураПараметров.ИдГруппы;
	Нечисловые                      = СтруктураПараметров.Нечисловые;
    ОтображатьСуммуВДопВалютах      = СтруктураПараметров.ОтображатьСуммуВДопВалютах;
	ДополнительныйОтбор             = СтруктураПараметров.ДополнительныйОтбор;
    АнализЧувствительности          = СтруктураПараметров.АнализЧувствительности;
	СтруктураЗаменяемыхАналитик     = СтруктураПараметров.СтруктураЗаменяемыхАналитик;
    РежимОчистки                    = СтруктураПараметров.РежимОчистки;
	ДополнительныйФильтр            = СтруктураПараметров.ДополнительныйФильтр;
	ТолькоЧерновые                  = СтруктураПараметров.ТолькоЧерновые;
	МенеджерВременныхТаблиц			= СтруктураПараметров.МенеджерВременныхТаблиц;
	ОтборВерсий						= СтруктураПараметров.ОтборВерсий;
	РежимИнверсии                   = СтруктураПараметров.РежимИнверсии;

		
	Если Нечисловые Тогда
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&&ТекстВыбираемыхПолей
		|
		|ИЗ
		|	мДанныеЛогаНечисловые КАК мДанныеЛога 
		|ГДЕ
		|	мДанныеЛога.Показатель В (&&ОтборПоказателей) &&ТекстДополнительныхОтборов";
	Иначе	
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	&&ТекстВыбираемыхПолей
		|
		|ИЗ
		|	РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК мДанныеЛога 
		|ГДЕ
		|	мДанныеЛога.УникальныйИдентификаторСеанса =  &УникальныйИдентификаторСеанса
		|	И мДанныеЛога.Показатель В (&&ОтборПоказателей) &&ТекстДополнительныхОтборов";
		
	КонецЕсли;
	   		
	//Периоды всегда выбираем из значений
	ТекстВыбираемыхПолей = "";
	ТекстВыбираемыхПолей = "мДанныеЛога.ПериодОтчета КАК ПериодыСвязанныйПериод,";
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|	ИСТИНА КАК ЗначениеИзЛога,";
	
	Для Каждого Поле Из РаскрываемыеАналитики Цикл
						
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Поле.Ключ) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+Поле.Ключ];	
			КонецЕсли;
			Если Поле.Ключ = "АналитикаВалюта" Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 	
			ИНачеЕсли ВРЕГ(Лев(Поле.Ключ,9)) = "АНАЛИТИКА" Тогда
				ИндексАналитики = Число(Прав(Поле.Ключ,1));
				Если ИндексАналитики>ГруппаПоказателей.ГруппаРаскрытияЧислоАналитик Тогда
					 ИндексАналитики = 0;
				КонецЕсли;		
			КонецЕсли;	
				
			Если Поле.Ключ = "Организация" Тогда
						
				Если НЕ СтруктураЗаменяемыхАналитик = Неопределено И СтруктураЗаменяемыхАналитик.Свойство("Организация") Тогда
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	&ЗаменяемаяАналитика_Организация КАК "+Поле.Ключ+",";	
					Запрос.Параметры.Вставить("ЗаменяемаяАналитика_Организация",СтруктураЗаменяемыхАналитик["Организация"]);
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	мДанныеЛога.Организация КАК "+Поле.Ключ+",";
				КонецЕсли;	
					
			ИначеЕсли Поле.Ключ = "Проект" Тогда
				
				Если НЕ СтруктураЗаменяемыхАналитик = Неопределено И СтруктураЗаменяемыхАналитик.Свойство("Проект") Тогда
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	&ЗаменяемаяАналитика_Проект КАК "+Поле.Ключ+",";	
					Запрос.Параметры.Вставить("ЗаменяемаяАналитика_Проект",СтруктураЗаменяемыхАналитик["Проект"]);
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	мДанныеЛога.Проект КАК "+Поле.Ключ+",";
				КонецЕсли;	
				
			ИначеЕсли Поле.Ключ = "Сценарий" Тогда	
				
				Если НЕ СтруктураЗаменяемыхАналитик = Неопределено И СтруктураЗаменяемыхАналитик.Свойство("Сценарий") Тогда
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	&ЗаменяемаяАналитика_Сценарий КАК "+Поле.Ключ+",";	
					Запрос.Параметры.Вставить("ЗаменяемаяАналитика_Сценарий",СтруктураЗаменяемыхАналитик["Сценарий"]);
				Иначе	
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	мДанныеЛога.Сценарий КАК "+Поле.Ключ+",";
				КонецЕсли;	
	
			ИначеЕсли Поле.Ключ = "ПериодОтчета" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	мДанныеЛога.ПериодОтчета КАК "+Поле.Ключ+",";
	        ИначеЕсли Поле.Ключ = "Валюта" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	мДанныеЛога.Валюта КАК "+Поле.Ключ+",";		
			ИначеЕсли Поле.Ключ = "ВидОтчета" Тогда	
				ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
				|	мДанныеЛога.ВидОтчета КАК "+Поле.Ключ+",";	
			Иначе	
				Если ИндексАналитики = 0 Тогда 		
					ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
					|	NULL КАК "+Поле.Ключ+",";	
				Иначе
					Если  СтруктураЗаменяемыхАналитик = Неопределено Тогда
						Если ТипЗнч(ИндексАналитики) = Тип("Число") И ИндексАналитики <= ГруппаПоказателей.ВидОтчетаЧислоАналитик Тогда
							// Это аналитика отчета
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|	&&ТаблицаКлючеваяАналитика.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";
						Иначе
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|	мДанныеЛога.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";
						КонецЕсли;
					Иначе
						ФлагЗамены = Ложь;
						Для Каждого КодЗаменяемойаналитики Из СтруктураЗаменяемыхАналитик Цикл 
							Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+КодЗаменяемойаналитики.Ключ) = Неопределено Тогда	
								ИндексАналитикиЗамены = ГруппаПоказателей["ВидАналитики_"+КодЗаменяемойаналитики.Ключ];	
								Если ИндексАналитикиЗамены = ИндексАналитики Тогда			
									ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
									|&ЗаменяемаяАналитика_"+КодЗаменяемойаналитики.Ключ+" КАК "+Поле.Ключ+",";				
									Запрос.Параметры.Вставить("ЗаменяемаяАналитика_"+КодЗаменяемойаналитики.Ключ,КодЗаменяемойаналитики.Значение);
									ФлагЗамены = Истина;
									Прервать;
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;
						
						Если Не ФлагЗамены Тогда
							ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
							|	мДанныеЛога.Аналитика"+ИндексАналитики+" КАК "+Поле.Ключ+",";
						КонецЕсли;
						
									
					КонецЕсли;	
				КонецЕсли;	
			КонецЕсли;							
		КонецЦикла;              
	
   	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
	|	мДанныеЛога.Показатель КАК ПоказательОтчета, ";
				
	Если ТолькоЧерновые Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	ЛОЖЬ КАК ЧерноваяВерсия,";	
	Конецесли;	

	
	Если РежимОчистки Тогда
		Если Нечисловые Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК Значение,";		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";

		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК Значение,";		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
		КонецЕсли;
	ИначеЕсли РежимИнверсии Тогда	
		
		Если Нечисловые Тогда
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК Значение,";		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	0 КАК ЗначениеВалюта,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";

		Иначе	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	-1*мДанныеЛога.Значение КАК Значение,";		
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловое,";	
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	-1*мДанныеЛога.ЗначениеВалюта КАК ЗначениеВалюта,";
			ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
			|	НЕОПРЕДЕЛЕНО КАК ЗначениеНечисловоеИзЛога,";
		КонецЕсли;
	
	Иначе	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	мДанныеЛога.Значение КАК Значение,";					
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	мДанныеЛога.ЗначениеНечисловое  КАК ЗначениеНечисловое,";	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	мДанныеЛога.ЗначениеВалюта  КАК ЗначениеВалюта,";		
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	мДанныеЛога.ЗначениеНечисловое КАК ЗначениеНечисловоеИзЛога,";

	КонецЕсли;	
						
	ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|	ЛОЖЬ КАК СинтетическоеЗначение,";
	
	ТекстДополнительныхОтборов = "";
	Лог_ТекстДополнительныхОтборов = "";

	
	//Отборы базовой версии по ключевым измерениям
	Для Каждого КлючВерсии Из СтруктураПараметров.ОтборВерсий Цикл
		ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
		|	И мДанныеЛога."+КлючВерсии.Ключ+" В (&"+КлючВерсии.Ключ+"База0" +")";
		Запрос.Параметры.Вставить(КлючВерсии.Ключ+"База0",КлючВерсии.Значение);
	КонецЦикла;	
	
	
	//Если был установлен отобр на уровне фильтра по неключевой аналитике - добавляем его в запрос	
	Для Каждого Стр Из ДополнительныйОтбор Цикл	
		Если Стр.Ключ = "АналитикаВалюта" Тогда		
			ЗначениеОтбора =  Стр.Значение;

			Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
				ИндексАналитики = "Валюта";	
			Иначе
				ИндексАналитики = 0;
			КонецЕсли; 	
			
			Если ИндексАналитики = "Валюта" Тогда 
				ИндексАналитки = "Валюта";
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
				Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
				|	И ДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
				Запрос.Параметры.Вставить("Параметр_АналитикаВалюта",ЗначениеОтбора);
			Иначе	
				ИндексАналитки = "Валюта";
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И ЛОЖЬ";	
			КонецЕсли;
			
			Продолжить;			
				
		КонецЕсли;	
		
		Если СтрНайти(Стр.Ключ,"Аналитика") = 1 Тогда
			
			ЗначениеОтбора =  Стр.Значение;
			ИмяПоляОтбора  =  Стр.Ключ;

			ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
			Если  НЕ ИндексАналитки = 0 Тогда
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
				Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
			КонецЕсли;			
			Продолжить;
		КонецЕсли;	
		
		ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.Ключ);
		
		Если ЗначениеЗаполнено(ПВХзначение) Тогда	
			ИндексАналитки = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Стр.Ключ) = Неопределено Тогда	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Стр.Ключ];	
			КонецЕсли;
			Если ИндексАналитки = 0 Тогда
				Продолжить;
			КонецЕсли;		 
			
			ЗначениеОтбора =  Стр.Значение;
			ИмяПоляОтбора  =  Стр.Ключ;
			
			Если ИмяПоляОтбора = "АналитикаВалюта" Тогда	
				ИндексАналитки = "Валюта";	
				ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
				|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
				Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
				|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
			Иначе	
				ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
				Если  ИндексАналитки = 0 Тогда
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И ЛОЖЬ";
				Иначе	
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_"+ИмяПоляОтбора+")";
					Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
				КонецЕсли;					
			КонецЕсли;				
		КонецЕсли;		                                                                                                              
			
	КонецЦикла;
	
	Если ТипЗнч(ДополнительныйФильтр) = Тип("ТаблицаЗначений") Тогда
		//Если был установлен расширенный фильтр по неключевой аналитике - добавляем его в запрос	
		
		Для Каждого Стр Из ДополнительныйФильтр Цикл	
			Если Стр.ИмяОтбора = "АналитикаВалюта" Тогда		
				ЗначениеОтбора =  Стр.ЗначениеОтбора;
				ТипОтбора      =  ВернутьОтборДляЗапроса(Стр.ТипОтбора);
				
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	
				
				Если ИндексАналитики = "Валюта" Тогда 
					ИндексАналитки = "Валюта";
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И мДанныеЛога.Аналитика"+ИндексАналитки+" "+ТипОтбора+" (&Параметр_АналитикаВалюта)";
					Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
					|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
					Запрос.Параметры.Вставить("Параметр_АналитикаВалюта",ЗначениеОтбора);					
				Иначе	
					ИндексАналитки = "Валюта";
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И ЛОЖЬ";	
				КонецЕсли;
				
				Продолжить;			
			КонецЕсли;	
			
			ПВХзначение  = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(Стр.ИмяОтбора);
			
			Если ЗначениеЗаполнено(ПВХзначение) Тогда	
				ИндексАналитки = Неопределено;	
				Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+Стр.ИмяОтбора) = Неопределено Тогда	
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+Стр.ИмяОтбора];	
				КонецЕсли;
				Если ИндексАналитки = 0 Тогда
					Продолжить;
				КонецЕсли;		 
				
				ЗначениеОтбора =  Стр.ЗначениеОтбора;
				ИмяПоляОтбора  =  Стр.ИмяОтбора;
				ТипОтбора      =  ВернутьОтборДляЗапроса(Стр.ТипОтбора);
				
				Если ИмяПоляОтбора = "АналитикаВалюта" Тогда	
					ИндексАналитки = "Валюта";	
					ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
					|	И мДанныеЛога.Аналитика"+ИндексАналитки+" "+ТипОтбора+" (&Параметр_"+ИмяПоляОтбора+")";
					Лог_ТекстДополнительныхОтборов = Лог_ТекстДополнительныхОтборов + "
					|	И мДанныеЛога.Аналитика"+ИндексАналитки+" В (&Параметр_АналитикаВалюта)";
				Иначе	
					ИндексАналитки = ГруппаПоказателей["ВидАналитики_"+ИмяПоляОтбора];	
					Если  ИндексАналитки = 0 Тогда
						ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
						|	И ЛОЖЬ";
					Иначе	
						ТекстДополнительныхОтборов = ТекстДополнительныхОтборов+"
						|	И мДанныеЛога.Аналитика"+ИндексАналитки+" "+ТипОтбора+" (&Параметр_"+ИмяПоляОтбора+")";
						Запрос.Параметры.Вставить("Параметр_"+ИмяПоляОтбора,ЗначениеОтбора);
					КонецЕсли;					
				КонецЕсли;				
			КонецЕсли;		                                                                                                              
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТекстВыбираемыхПолей = ЛЕВ(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-1);
	
	ТекстВыбираемыхПолей = СтрЗаменить(ТекстВыбираемыхПолей,"&&ТаблицаКлючеваяАналитика","мДанныеЛога");
	
	//ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ВыражениеСоединенияСВерсиями",ВыражениеСоединенияСВерсиями);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстВыбираемыхПолей" ,ТекстВыбираемыхПолей);
    ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ОтборПоказателей" ,"&ОтборПоказателей_"+ИдГруппы);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстДополнительныхОтборов" ,ТекстДополнительныхОтборов);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","мДанныеЛога");
	
КонецПроцедуры	


#КонецОбласти

#КонецОбласти

Функция ПрочитатьДанныеПоСтатусамПоказателей(СтруктураФильтровИтог,ТаблицаСтраницы,ТаблицаСтроки,ТаблицаКолонки,ВыбранныеПоказатели,ВыбранныеРесурсы) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтатусыПоказателей.СтатусПоказателя,
	|	СтатусыПоказателей.Периоды,
	|	СтатусыПоказателей.Ресурс,
	|	СтатусыПоказателей.Показатели
	|ИЗ
	|	РегистрСведений.СтатусыПоказателей КАК СтатусыПоказателей
	|ГДЕ
	|	СтатусыПоказателей.Сценарии = &Фильтр_Сценарии
	|	И СтатусыПоказателей.Организации = &Фильтр_Организации
	|	И СтатусыПоказателей.Проекты = &Фильтр_Проекты";
	
	Для Каждого Стр Из ТаблицаСтраницы Цикл
		Запрос.УстановитьПараметр(Стр.Код,СтруктураФильтровИтог[Стр.Код]);	
	КонецЦикла;
	
	Результат = Запрос.Выполнить.Выгрузить();
	  	   	
КонецФункции

Процедура УстановитьФорматВывода(Настройки,ЗначениеМасштаб,ЗначениеТочность,ПоляРесурсов,НастройкиРасчетаПоказателей,ОтображатьСуммыВДопВалютах=Ложь) Экспорт
		
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли
	
	ЭлементУсловногоОформления =Настройки.УсловноеОформление.Элементы.Добавить();
	
	Для Каждого вПоле Из НастройкиРасчетаПоказателей Цикл	
		Если ВПоле.Расчетный Тогда
			НполеОформления =ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			Если вПоле.ВидОтклонения = "Значение" Тогда
				НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_"+ВПоле.КодПоказателя);
			ИначеЕсли вПоле.ВидОтклонения = "АбсОтклонение" Тогда 
				НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+ВПоле.КодПоказателя);
			ИначеЕсли вПоле.ВидОтклонения = "ОтнОтклонение" Тогда				
				ЭлементУсловногоОформленияОтн = Настройки.УсловноеОформление.Элементы.Добавить();
				НполеОформленияОтн = ЭлементУсловногоОформленияОтн.Поля.Элементы.Добавить();
				НполеОформленияОтн.Поле = Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+ВПоле.КодПоказателя);
				НастройкаФормата = "ЧДЦ="+ЗначениеТочность+";ЧН=0; ЧС=; ЧГ=3,0";
				ЭлементУсловногоОформленияОтн.Оформление.УстановитьЗначениеПараметра("Формат", НастройкаФормата);
			КонецЕсли;		
		Иначе	
			НполеОформления =ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			НполеОформления.Поле = Новый ПолеКомпоновкиДанных(вПоле.КодПоказателя);
			НполеОформления.Использование = Истина;
			
			Если ОтображатьСуммыВДопВалютах Тогда
				НполеОформления =ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				НполеОформления.Поле = Новый ПолеКомпоновкиДанных(вПоле.КодПоказателя+"_ЗначениеВалюта");
				НполеОформления.Использование = Истина;	
			КонецЕсли;		
		КонецЕсли;	
	КонецЦикла;
	
	Если  ЗначениеМасштаб = "Ед" Тогда
		НастройкаФормата = "ЧДЦ="+ЗначениеТочность+";ЧН=0; ЧС=; ЧГ=3,0";
	ИначеЕсли ЗначениеМасштаб = "Тыс" Тогда
		НастройкаФормата = "ЧДЦ="+ЗначениеТочность+";ЧН=0; ЧС=3; ЧГ=3,0";
	ИначеЕсли ЗначениеМасштаб = "Миллионы" Тогда
		НастройкаФормата = "ЧДЦ="+ЗначениеТочность+";ЧН=0; ЧС=6; ЧГ=3,0";
	КонецЕсли;	 

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", НастройкаФормата);
	
	Для Каждого вПоле Из НастройкиРасчетаПоказателей Цикл	
		Если ВПоле.Расчетный Тогда 	
			Если вПоле.ВидОтклонения = "АбсОтклонение" ИЛИ вПоле.ВидОтклонения = "ОтнОтклонение" Тогда	
				//Отрицательное красным
				ЭлементУсловногоОформления =Настройки.УсловноеОформление.Элементы.Добавить();
				НполеОформления =ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Если вПоле.ВидОтклонения = "АбсОтклонение" Тогда 	
					НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+ВПоле.КодПоказателя);
					ПолеДляРасчета =  Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+ВПоле.КодПоказателя);		
				ИначеЕсли вПоле.ВидОтклонения = "ОтнОтклонение" Тогда	
					НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+ВПоле.КодПоказателя);
					ПолеДляРасчета = Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+ВПоле.КодПоказателя);	
				КонецЕсли;
				
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = ПолеДляРасчета;
				ПолеОтбора.ПравоеЗначение =0;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
				
				// Положительное  - зеленым
				ЭлементУсловногоОформления =Настройки.УсловноеОформление.Элементы.Добавить();
				НполеОформления =ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Если вПоле.ВидОтклонения = "АбсОтклонение" Тогда 
					НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+ВПоле.КодПоказателя);
					ПолеДляРасчета =  Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+ВПоле.КодПоказателя);	
				ИначеЕсли вПоле.ВидОтклонения = "ОтнОтклонение" Тогда	
					НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+ВПоле.КодПоказателя);
					ПолеДляРасчета =  Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+ВПоле.КодПоказателя);
				КонецЕсли;
				
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = ПолеДляРасчета;
				ПолеОтбора.ПравоеЗначение =0;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,150,0));
				НполеОформления.Использование = Истина;
				
			Иначе	
				
				ЭлементУсловногоОформления =Настройки.УсловноеОформление.Элементы.Добавить();
				НполеОформления =ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Если вПоле.ВидОтклонения = "Значение" Тогда 
					НполеОформления.Поле = Новый ПолеКомпоновкиДанных("БАЗА_"+ВПоле.КодПоказателя);
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);
					НполеОформления.Использование = Истина;	
				КонецЕсли;	
				
			КонецЕсли;
		КонецЕсли;	
	Конеццикла;		
КонецПроцедуры

Процедура УстановитьОформлениеГруппировокСТ(НастройкиСхемыСводнойТаблицы,ТаблицаСтроки,Периодичность
	,РежимОбратногоРаспределения=Ложь
	,НастройкиИспользуемыхРесурсов = Неопределено
	,РежимСтатусы
	,РежимНарастающегоИтога=Ложь
	,РежимСкользящегоПланирования = Ложь) Экспорт
	
	//Добавить Условное оформление для иерархии строк таблицы, если есть
	Если  ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_Показатели")).Количество()>0 Тогда
		Для ИндПоказателя = 0 по 10 Цикл
			ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.УсловноеОформление.Элементы.Добавить();
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.Уровень");
			ПолеОтбора.ПравоеЗначение = ИндПоказателя;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отступ", (ИндПоказателя)*2);
			//
			Для Каждого Стрполе Из ТаблицаСтроки Цикл			
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрЗАменить(Стрполе.Код,"Фильтр_",""));
				ОформляемоеПоле.Использование = Истина;
			КонецЦикла;	
		КонецЦикла;
	КонецЕсли;	
	
	//Выделим жирным группировочные строки
	ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.УсловноеОформление.Элементы.Добавить();
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.ЭтоЭлементГруппа");
	ПолеОтбора.ПравоеЗначение = Истина;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")).Значение,,,Истина));	
	
	ПараметрВывода = НастройкиСхемыСводнойТаблицы.ПараметрыВывода.Элементы.Найти("ВыводитьОтбор");
	ПараметрВывода.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	ПараметрВывода.Использование = Истина;
	
	Для Каждого СтрПоле Из ТаблицаСтроки Цикл
		
		Если Стрполе.ПоддерживатьИерархию тогда
			
			ЭлементОтбора = НастройкиСхемыСводнойТаблицы.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СтрЗаменить(СтрПоле.Код,"Фильтр_","") + "_ЭтоГруппа");
			ЭлементОтбора.ПравоеЗначение = Ложь;
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.Использование = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Подсветим серым заблокированные ключевые измерения периода сценария 
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли
	Если НЕ РежимСтатусы Тогда	
		Если НЕ НастройкиИспользуемыхРесурсов = Неопределено Тогда
			
			Для Каждого Стр Из НастройкиИспользуемыхРесурсов Цикл
				
				Если Стр.Расчетный Тогда
					 Стр_КодПоказателя = Прав(Стр.КодПоказателя,СтрДлина(Стр.КодПоказателя)-33); 
				Иначе	 
					 Стр_КодПоказателя = Стр.КодПоказателя;
				КонецЕсли;	
				
				ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.УсловноеОформление.Элементы.Добавить();
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗначениеЗаблокировано_"+Стр_КодПоказателя);
				ПолеОтбора.ПравоеЗначение = 0;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);      
				
				ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.УсловноеОформление.Элементы.Добавить();
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексСостояния_"+Стр_КодПоказателя);
				ПолеОтбора.ПравоеЗначение = 3;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки); 
				
			КонецЦикла;
			
			ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.УсловноеОформление.Элементы.Добавить();
			Если НЕ РежимНарастающегоИтога Тогда
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Блокировка_Периоды");
				ПолеОтбора.ПравоеЗначение = 0;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
			КонецЕсли;
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Периоды.Периодичность");
			ПолеОтбора.ПравоеЗначение = Периодичность;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);      
			
		КонецЕсли;	
	КонецЕсли;	
	
	//Подсветим итоговые периоды в колонках жирным 
	ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.УсловноеОформление.Элементы.Добавить();
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Периоды.Периодичность");
	ПолеОтбора.ПравоеЗначение = Периодичность;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")).Значение,,,Истина));	
	Если РежимОбратногоРаспределения Тогда
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,204,0));	
	Иначе
		Если Не РежимСкользящегоПланирования Тогда  // в режиме скользящего планирования можно вводить данные в итоговые периоды.
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(230,255,230));	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

Процедура УстановитьОформлениеСтатусы(НастройкиСхемыСводнойТаблицы,ПоляРесурсов,Периодичность) Экспорт
		
	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли

	
	ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
	ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
    ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);    
	
	
	Для Каждого Ресурс Из ПоляРесурсов Цикл
		
		ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;

		
		ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексСостояния_"+Ресурс.Ключ);
		ПолеОтбора.ПравоеЗначение = 3;
		ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(0,255,0));
      	
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.Ключ);
		ОформляемоеПоле.Использование = Истина;
			
		ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;

		
		ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексСостояния_"+Ресурс.Ключ);
		ПолеОтбора.ПравоеЗначение = 1;
		ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(153, 204, 255));
       
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.Ключ);
		ОформляемоеПоле.Использование = Истина;

		
		ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;

		ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ИндексСостояния_"+Ресурс.Ключ);
		ПолеОтбора.ПравоеЗначение = 0;
		ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(220,220,220));
      
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.Ключ);
		ОформляемоеПоле.Использование = Истина;
		

        ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;

		
		ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексСостояния_"+Ресурс.Ключ);
		ПолеОтбора.ПравоеЗначение = 2;
		ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(255,0,0));
     	
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.Ключ);
		ОформляемоеПоле.Использование = Истина;

		ЭлементУсловногоОформления = НастройкиСхемыСводнойТаблицы.Настройки.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		
		ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ИндексСостояния_"+Ресурс.Ключ);
		ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(220,220,220));
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Ресурс.Ключ);
		ОформляемоеПоле.Использование = Истина;
	
	КонецЦикла;
			
КонецПроцедуры	

Процедура УстановитьПредставлениеГруппировокСТ(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы,ТаблицаСтроки,ТаблицаКолонки) Экспорт
	
	Для Каждого Строка Из ТаблицаСтроки Цикл
		
		СтрокаАналитики = СтрЗаменить(Строка.Код,"Фильтр_","");
		Если  Строка.Код = "Фильтр_Показатели" Тогда				
			КодПоля = СхемаСКДЭталон.НаборыДанных[0].Поля.Найти(СтрЗаменить(Строка.Код,"Фильтр_",""));
			КодПоля.ВыражениеПредставления = СтрЗаменить(Строка.Представление,"&",СтрокаАналитики+".СтрокаОтчета.");	
		ИначеЕсли  Строка.Код = "Фильтр_Показатели_Колонки" Тогда	
			НовыйЭлементПорядка = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Показатели_Колонки.Код");
			НовыйЭлементПорядка.Использование = Истина;
			НовыйЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ИначеЕсли  Строка.Код = "Фильтр_Периоды" Тогда
			НовыйЭлементПорядка = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Периоды.ДатаНачала");
			НовыйЭлементПорядка.Использование = Истина;
			НовыйЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		Иначе	
			НовыйЭлементПорядка = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Если Строка.Сортировка = "" Тогда 
				НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(СтрокаАналитики+"."+"Наименование");
			Иначе	
				НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(СтрокаАналитики+"."+Строка.Сортировка);
			КонецЕсли;
			
			НовыйЭлементПорядка.Использование = Истина;
			НовыйЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;	
				
			КодПоля = СхемаСКДЭталон.НаборыДанных[0].Поля.Найти(СтрЗаменить(Строка.Код,"Фильтр_",""));
			КодПоля.ВыражениеПредставления = СтрЗаменить(Строка.Представление,"&",СтрокаАналитики+".");	
		КонецЕсли;			
	КонецЦикла;
	
	Для Каждого Колонка Из ТаблицаКолонки Цикл
		
		СтрокаАналитики = СтрЗаменить(Колонка.Код,"Фильтр_","");
		
		Если  Колонка.Код = "Фильтр_Показатели" Тогда
			КодПоля = СхемаСКДЭталон.НаборыДанных[0].Поля.Найти(СтрЗаменить(Строка.Код,"Фильтр_",""));
			КодПоля.ВыражениеПредставления = СтрЗаменить(Строка.Представление,"&",СтрокаАналитики+".СтрокаОтчета.");
		ИначеЕсли  Колонка.Код = "Фильтр_Показатели_Колонки" Тогда	
			НовыйЭлементПорядка = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Показатели_Колонки.Код");
			НовыйЭлементПорядка.Использование = Истина;
			НовыйЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;
		ИначеЕсли  Колонка.Код = "Фильтр_Периоды" Тогда
			НовыйЭлементПорядка = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных("Периоды.ДатаНачала");
			НовыйЭлементПорядка.Использование = Истина;
			НовыйЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;	
		Иначе	
			НовыйЭлементПорядка = НастройкиСхемыСводнойТаблицы.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
			Если Колонка.Сортировка = "" Тогда 
				НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(Колонка.Код,"Фильтр_","")+"."+"Наименование");
			Иначе	
				НовыйЭлементПорядка.Поле = Новый ПолеКомпоновкиДанных(СтрЗаменить(Колонка.Код,"Фильтр_","")+"."+Колонка.Сортировка);
			КонецЕсли;
					
			НовыйЭлементПорядка.Использование = Истина;
			НовыйЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр;		
			
			КодПоля = СхемаСКДЭталон.НаборыДанных[0].Поля.Найти(СтрЗаменить(Колонка.Код,"Фильтр_",""));
			КодПоля.ВыражениеПредставления = СтрЗаменить(Колонка.Представление,"&",СтрокаАналитики+".");
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОформитьУровниГруппировокПоказателией(КэшАналитикПоказателейСТ,ВыбранныеРесурсы,Настройки,СтруктураТаблицИнтерфейса,ПоказательОтбор = Неопределено,РежимОбратногоРаспределения,Периодичность) Экспорт
	
	 
	СтруктураОбязательныхАналитик = Новый Структура;
    СтруктураАналитикТаблицы = Новый Структура;
	СтруктураАналитикТаблицы.Вставить("Показатели",Ложь);
	СтруктураАналитикТаблицы.Вставить("Сценарии",Ложь);
	СтруктураАналитикТаблицы.Вставить("Организации",Ложь);
    СтруктураАналитикТаблицы.Вставить("Проекты",Ложь);
    СтруктураАналитикТаблицы.Вставить("Периоды",Ложь);	
	ПоказательВотборе = Ложь;
	
	Для Каждого Кол Из КэшАналитикПоказателейСТ.Колонки Цикл
		Если Кол.Имя = "ПоказательСтрока" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураАналитикТаблицы.Вставить(Кол.Имя,Ложь);
	КонецЦикла;
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		Код = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если Код = "Показатели" Тогда
			 ПоказательВотборе = Истина;
		КонецЕсли;
		СтруктураОбязательныхАналитик.Вставить(Код);	
		СтруктураАналитикТаблицы.Вставить(Код,Истина);
	КонецЦикла;	
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		Если Стр.Код = "Фильтр_Показатели_Колонки" Тогда
			Продолжить;
		КонецЕсли;	
		
		Код = СтрЗаменить(Стр.Код,"Фильтр_","");
		СтруктураОбязательныхАналитик.Вставить(Стр.Код);	
		СтруктураАналитикТаблицы.Вставить(Код,Истина);
	КонецЦикла;
		
    Если ПоказательВотборе И ПоказательОтбор=Неопределено Тогда; //Агрегация
		 Возврат;
	КонецЕсли;
	
	НастройкиСтруктура = Настройки.Структура[0].Строки[0];
	ВсегоУровнейГруппирвокСтрок = СтруктураТаблицИнтерфейса.ТаблицаСтроки.Количество();
	СписокИспользованныхАналитик = Новый СписокЗначений;
	ОформитьУровниРекурсивно(КэшАналитикПоказателейСТ,ВыбранныеРесурсы,НастройкиСтруктура,СтруктураАналитикТаблицы,ВсегоУровнейГруппирвокСтрок,ПоказательОтбор,РежимОбратногоРаспределения,СписокИспользованныхАналитик,Периодичность);
				
КонецПроцедуры	

Процедура ОформитьУровниРекурсивно(КэшАналитикПоказателейСТ,ВыбранныеРесурсы,ЭлементГруппировки,СтруктураАналитикТаблицы,ВсегоУровнейГруппирвокСтрок,ПоказательОтбор,РежимОбратногоРаспределения,СписокИспользованныхАналитик,Периодичность)
	
	Если ЭлементГруппировки.Имя = "" Тогда
		 Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли
	
	СписокИспользованныхАналитик.Добавить(ЭлементГруппировки.Имя);
	
	Если РежимОбратногоРаспределения Тогда
		 ЦветФона = Новый Цвет(255,204,0);
	Иначе	 
		 ЦветФона = Новый Цвет(230,255,230);
	КонецЕсли;	
    СтруктураАналитикТаблицыЭталон_ = Новый ФиксированнаяСтруктура(СтруктураАналитикТаблицы);	
	СтруктураАналитикТаблицыЭталон  = Новый Структура(СтруктураАналитикТаблицыЭталон_);
	
	СтруктураАналитикТаблицыЭталон.Вставить(ЭлементГруппировки.Имя,Истина);		
	СтруктураАналитикТаблицыЭталон.Вставить("Показатели",Истина);
	
	Для Каждого иСп Из СписокИспользованныхАналитик Цикл
		СтруктураАналитикТаблицыЭталон.Удалить(иСп.Значение);
	КонецЦикла;	
	
	ПоказателиНаТекущемУровне = КэшАналитикПоказателейСТ.НайтиСтроки(СтруктураАналитикТаблицыЭталон);
	Если ПоказательОтбор = Неопределено Тогда
		
		ЕстьПоказатель = Истина;
		Если СписокИспользованныхАналитик.НайтиПоЗначению("Показатели") = Неопределено Тогда
			 ЕстьПоказатель = Ложь;
		КонецЕсли;	
			
		
		СписокПоказателей = Новый СписокЗначений;
		Для Каждого Пок Из ПоказателиНаТекущемУровне Цикл
			СписокПоказателей.Добавить(Пок.ПоказательСтрока);
		КонецЦикла;	
		
		Если СписокПоказателей.Количество() >0 И ЕстьПоказатель Тогда
						
			// оформление для комментариев
			Если НЕ ВыбранныеРесурсы = Неопределено Тогда			
				
				Для Каждого СтрРесурс Из ВыбранныеРесурсы Цикл
					
					Если Не СтрРесурс.Использовать Тогда
						Продолжить;
					КонецЕсли;	
					
					Если Не СтрРесурс.Расчетный Тогда
						
						ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
						ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("Комментарий");
						ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
						
						ГруппаОтбор = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
						ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
						
						ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("ПоказателиСтрокаОтчета");
						ПолеОтбора.ПравоеЗначение =СписокПоказателей;
						ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
						
						
						ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("Периоды.Периодичность");
						ПолеОтбора.ПравоеЗначение =Периодичность;
						ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
						
						
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",Нстр("ru = 'КОММ##'"));
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрРесурс.КодПоказателя);
						
						ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
						ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказателиСтрокаОтчета");
						ПолеОтбора.ПравоеЗначение =СписокПоказателей;
						ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных(СтрРесурс.КодПоказателя);
						
					Иначе	
						
						Если РежимОбратногоРаспределения  Тогда
							
							ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
							ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);
							
							ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();							
							Если СтрРесурс.ВидОтклонения = "ОтнОтклонение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+СтрРесурс.КодПоказателя);	
							ИначеЕсли СтрРесурс.ВидОтклонения = "АбсОтклонение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+СтрРесурс.КодПоказателя);
							ИначеЕсли СтрРесурс.ВидОтклонения = "Значение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+СтрРесурс.КодПоказателя);		
							КонецЕсли;
							
							ОформляемоеПоле.Использование = Истина;
							
						Иначе	
							
							ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
							ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
							ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПоказателиСтрокаОтчета");
							ПолеОтбора.ПравоеЗначение =СписокПоказателей;
							ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
							ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
							
							
							ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();							
							Если СтрРесурс.ВидОтклонения = "ОтнОтклонение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+СтрРесурс.КодПоказателя);	
							ИначеЕсли СтрРесурс.ВидОтклонения = "АбсОтклонение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+СтрРесурс.КодПоказателя);
							ИначеЕсли СтрРесурс.ВидОтклонения = "Значение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+СтрРесурс.КодПоказателя);		
							КонецЕсли;
								
						КонецЕсли;		
					КонецЕсли;
				КонецЦикла;		
			КонецЕсли;		
		Иначе
			Если НЕ ВыбранныеРесурсы = Неопределено Тогда
			Для Каждого СтрРесурс Из ВыбранныеРесурсы Цикл
				
				Если Не СтрРесурс.Использовать Тогда
					Продолжить;
				КонецЕсли;	
				
				Если Не СтрРесурс.Расчетный Тогда
					
					ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных(СтрРесурс.КодПоказателя);
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
					
				Иначе	
					Если РежимОбратногоРаспределения  Тогда
						
						ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);
						
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();							
						Если СтрРесурс.ВидОтклонения = "ОтнОтклонение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+СтрРесурс.КодПоказателя);	
						ИначеЕсли СтрРесурс.ВидОтклонения = "АбсОтклонение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+СтрРесурс.КодПоказателя);
						ИначеЕсли СтрРесурс.ВидОтклонения = "Значение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+СтрРесурс.КодПоказателя);		
						КонецЕсли;
						
						ОформляемоеПоле.Использование = Истина;
						
					Иначе	
						ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
						
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();							
						Если СтрРесурс.ВидОтклонения = "ОтнОтклонение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+СтрРесурс.КодПоказателя);	
						ИначеЕсли СтрРесурс.ВидОтклонения = "АбсОтклонение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+СтрРесурс.КодПоказателя);
						ИначеЕсли СтрРесурс.ВидОтклонения = "Значение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+СтрРесурс.КодПоказателя);		
						КонецЕсли;
						
						ОформляемоеПоле.Использование = Истина;

					КонецЕсли;
					
					
				КонецЕсли;
				
			КонецЦикла;	
			КонецЕсли;

		КонецЕсли;
		
		Если ЭлементГруппировки.Имя = "Показатели" Тогда	
			ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")).Значение,,,Истина));
		КонецЕсли;
		
	Иначе	
		
		Если ПоказателиНаТекущемУровне.Количество() =0 Тогда
			ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		Иначе	
			ДоступноРедактирование = Ложь;
			Для Каждого Пок Из ПоказателиНаТекущемУровне Цикл
				Если Пок.ПоказательСтрока = ПоказательОтбор Тогда
					ДоступноРедактирование = Истина;
					Прервать;
				КонецЕсли;	
			КонецЦикла;	
			Если НЕ ДоступноРедактирование Тогда
				ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);	
			Иначе	
				// оформление для комментариев
				Если НЕ ВыбранныеРесурсы = Неопределено Тогда			
					
					Для Каждого СтрРесурс Из ВыбранныеРесурсы Цикл
						
						Если Не СтрРесурс.Использовать Тогда
							Продолжить;
						КонецЕсли;	
						
						Если Не СтрРесурс.Расчетный Тогда
							
							ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
							ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("Комментарий");
							ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
							
							ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							ПолеОтбора.ЛевоеЗначение =Новый ПолеКомпоновкиДанных("Периоды.Периодичность");
							ПолеОтбора.ПравоеЗначение =Периодичность;
							ПолеОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
							
							ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст",Нстр("ru = 'КОММ##'"));
							ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
							ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СтрРесурс.КодПоказателя);
							
						КонецЕсли;
					КонецЦикла;	
					
				КонецЕсли;	
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭлементГруппировки.Структура.Количество() =1 Тогда
		ОформитьУровниРекурсивно(КэшАналитикПоказателейСТ,ВыбранныеРесурсы, ЭлементГруппировки.Структура[0],СтруктураАналитикТаблицы,ВсегоУровнейГруппирвокСтрок,ПоказательОтбор,РежимОбратногоРаспределения,СписокИспользованныхАналитик,Периодичность);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОформитьУровниГруппировокУправленияПС(Настройки,СтруктураТаблицИнтерфейса) Экспорт
	
	
	НастройкиСтруктура = Настройки.Структура[0].Строки[0];
	ВсегоУровнейГруппирвокСтрок = СтруктураТаблицИнтерфейса.ТаблицаСтроки.Количество();
	ОформитьУровниРекурсивноПС(НастройкиСтруктура,ВсегоУровнейГруппирвокСтрок);

				
КонецПроцедуры	

Процедура ОформитьУровниРекурсивноПС(ЭлементГруппировки,ВсегоУровнейГруппирвокСтрок)
	
	ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СистемныеПоля.Уровень");
	ПолеОтбора.ПравоеЗначение =ВсегоУровнейГруппирвокСтрок;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")).Значение,,,Истина));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(230,255,230));
	
	Если ЭлементГруппировки.Структура.Количество() =1 Тогда
		ОформитьУровниРекурсивноПС(ЭлементГруппировки.Структура[0],ВсегоУровнейГруппирвокСтрок);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОформитьУровниГруппировокМП(Настройки,СтруктураТаблицИнтерфейса) Экспорт
	
	НастройкиСтруктура = Настройки.Структура[0].Строки[0];
	ВсегоУровнейГруппирвокСтрок = СтруктураТаблицИнтерфейса.ТаблицаСтроки.Количество();
	ОформитьУровниРекурсивноМП(НастройкиСтруктура,ВсегоУровнейГруппирвокСтрок);
	
КонецПроцедуры	

Процедура ОформитьУровниРекурсивноМП(ЭлементГруппировки,ВсегоУровнейГруппирвокСтрок)
		
	ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СистемныеПоля.Уровень");
	ПолеОтбора.ПравоеЗначение =ВсегоУровнейГруппирвокСтрок;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")).Значение,,,Истина));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(230,255,230));
	
	ЭлементУсловногоОформления = ЭлементГруппировки.УсловноеОформление.Элементы.Добавить();
	ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СистемныеПоля.Уровень");
	ПолеОтбора.ПравоеЗначение =ВсегоУровнейГруппирвокСтрок;
	ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Меньше;
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")).Значение,,,Истина));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(230,255,230));
	
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Согласование");
	ОформляемоеПоле.Использование = Истина;
	ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("Исполняющий");
	ОформляемоеПоле.Использование = Истина;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "");
	
	Если ЭлементГруппировки.Структура.Количество() =1 Тогда
		ОформитьУровниРекурсивноМП(ЭлементГруппировки.Структура[0],ВсегоУровнейГруппирвокСтрок);
	КонецЕсли;
	
КонецПроцедуры	

Процедура УстановитьОформлениеДопПоля(Настройки,НастройкиРасчетаОтклоненийВыбранные) Экспорт
			
	ИндексБазы = 1;
	Для Каждого вПоле Из НастройкиРасчетаОтклоненийВыбранные Цикл
		
		Если вПоле.ВидОтклонения = "Значение" Тогда
			ИндексБазы = ИндексБазы+1;
			Продолжить;
		КонецЕсли;
	ИндексБазы = ИндексБазы+1;	
	Конеццикла;	
	
КонецПроцедуры

Процедура ОформитьВычисляемые(ВидОтчета,Настройки,НастройкиИспользуемыхРесурсов,СтрокаОтбор = Неопределено,РежимСравненияСБазой=Ложь) Экспорт
	
	ТекущееПравилоОбработки = Неопределено;
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);	
	СоответствиеНастроек.Свойство("ПравилоОбработки", ТекущееПравилоОбработки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ 
	               |	ВЫРАЗИТЬ(ПроцедурыРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).Строка КАК СтрокаОтчета,
				   |    ВЫРАЗИТЬ(ПроцедурыРасчетов.ПотребительРасчета КАК Справочник.ПоказателиОтчетов).Колонка КАК КолонкаОтчета
				   |ИЗ
	               |	РегистрСведений.ПроцедурыРасчетов КАК ПроцедурыРасчетов
	               |ГДЕ
	               |	ВЫРАЗИТЬ (ПроцедурыРасчетов.НазначениеРасчетов КАК Справочник.ПравилаОбработки).Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",ТекущееПравилоОбработки);
	
	Результат =  Запрос.Выполнить().Выгрузить();
	РезультатСтроки = Результат.Скопировать();	
	РезультатСтроки.Свернуть("СтрокаОтчета");
		
	Для Каждого Стр Из  РезультатСтроки Цикл
		
		Если НЕ СтрокаОтбор = Неопределено Тогда
			Если Стр.СтрокаОтчета<>СтрокаОтбор Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		
		Если СтрокаОтбор = Неопределено Тогда
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.СтрокаОтчета");
			ПолеОтбора.ПравоеЗначение =Стр.СтрокаОтчета;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(191,220,192));
		
			РезультатКолонки = Результат.НайтиСтроки(Новый Структура("СтрокаОтчета",Стр.СтрокаОтчета));
			Для Каждого Кол Из РезультатКолонки Цикл
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						
				ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Кол.КолонкаОтчета.Код));
				
				ОформляемоеПоле.Использование = Истина;
				
				РезультатВычисляемыеКолонки = НастройкиИспользуемыхРесурсов.НайтиСтроки(Новый Структура("Расчетный",Истина));
				Для Каждого вКол Из РезультатВычисляемыеКолонки Цикл
					
					Для Каждого сКол Из вКол.Колонки Цикл
						
						Если сКол.Значение = Кол.КолонкаОтчета Тогда
							
							ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
							Если вКол.ВидОтклонения = "ОтнОтклонение"  Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+вКол.КодПоказателя);	
							КонецЕсли;
							
							Если вКол.ВидОтклонения = "АбсОтклонение" Тогда
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+вКол.КодПоказателя);		
							КонецЕсли;
							
							Если вКол.ВидОтклонения = "Значение" Тогда		
								ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+вКол.КодПоказателя);	
							КонецЕсли;
							
							ОформляемоеПоле.Использование = Истина;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЦикла;	
			КонецЦикла;		
		КонецЦикла;
	
КонецПроцедуры

Процедура ОформитьНедоступные(ВидОтчета,Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтрокаОтбор = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли
 
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиОтчетов.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втСтроки
	               |ИЗ
	               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	               |ГДЕ
	               |	СтрокиОтчетов.Ссылка В(&Строки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КолонкиОтчетов.Ссылка КАК Ссылка
	               |ПОМЕСТИТЬ втКолонки
	               |ИЗ
	               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	               |ГДЕ
	               |	КолонкиОтчетов.Ссылка В(&Колонки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКолонки.Ссылка КАК Колонка,
	               |	втСтроки.Ссылка КАК Строка
	               |ПОМЕСТИТЬ втСтрокиКолонки
	               |ИЗ
	               |	втСтроки КАК втСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКолонки КАК втКолонки
	               |		ПО (ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Показатель,
	               |	втСтрокиКолонки.Колонка КАК Колонка,
	               |	втСтрокиКолонки.Строка КАК Строка,
	               |	втСтрокиКолонки.Колонка.Код КАК КолонкаКод,
	               |	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения 
				   |ИЗ
	               |	втСтрокиКолонки КАК втСтрокиКолонки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |		ПО втСтрокиКолонки.Строка = ПоказателиОтчетов.Строка
	               |			И втСтрокиКолонки.Колонка = ПоказателиОтчетов.Колонка
	               |			И (ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ)
	               |ГДЕ
	               |	ПоказателиОтчетов.Ссылка ЕСТЬ НЕ NULL ";
	
	Запрос.УстановитьПараметр("Строки",КэшАналитикПоказателей.ВыгрузитьКолонку("Строка"));
	
	
	СписокКолонок = Новый СписокЗначений;
	Для Каждого Стр Из НастройкиИспользуемыхРесурсов Цикл	
		Для Каждого стрКол Из Стр.Ссылка.КолонкиОтчетов Цикл
			СписокКолонок.Добавить(стрКол.Колонка);	
		КонецЦикла;		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Колонки",СписокКолонок);
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();	
	РезультатСуществующиеПоказатели =  Результат[3].Выгрузить();
	РезультатСтроки =  Результат[0].Выгрузить();
	
	Для Каждого Стр Из РезультатСтроки Цикл
		
		Если НЕ СтрокаОтбор = Неопределено Тогда
			Если Стр.Ссылка<>СтрокаОтбор Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		Для Каждого Рес Из НастройкиИспользуемыхРесурсов Цикл
			
			ЕстьТакойПоказатель = Ложь;			
			Для Каждого стрКол Из Рес.Колонки Цикл	 
				тСтрокаПоказателя =  РезультатСуществующиеПоказатели.НайтиСтроки(Новый Структура("Строка,Колонка",Стр.Ссылка,стрКол.Значение));
				ЕстьТакойПоказатель =  тСтрокаПоказателя.Количество()>0; 
				Если ЕстьТакойПоказатель Тогда
					тЗначение = тСтрокаПоказателя[0].ТипЗначения;
					Прервать;
				Иначе	
					тЗначение = Неопределено;
				КонецЕсли;		
			Конеццикла;	
			
			Если Не ЕстьТакойПоказатель ИЛИ тЗначение = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка ИЛИ тЗначение = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
				
				ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();
				
				Если  СтрокаОтбор = Неопределено Тогда
					ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
					ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.СтрокаОтчета");
					ПолеОтбора.ПравоеЗначение =Стр.Ссылка;
					ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;
				
				ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
				ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Х");
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
				
				ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				
				Если Рес.ВидОтклонения = "ТекущееЗначение" Тогда
					ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(Рес.КодПоказателя);
				ИначеЕсли Рес.ВидОтклонения = "ОтнОтклонение" Тогда
					ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+Рес.КодПоказателя);	
				ИначеЕсли Рес.ВидОтклонения = "АбсОтклонение" Тогда
					ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+Рес.КодПоказателя);
				ИначеЕсли Рес.ВидОтклонения = "Значение" Тогда
					ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+Рес.КодПоказателя);		
				КонецЕсли;
				
				ОформляемоеПоле.Использование = Истина;	
				
			КонецЕсли;
			
		КонецЦикла;	
	КонецЦикла;	
		
КонецПроцедуры

Процедура ОформитьНеЧисловые(ВидОтчета,Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтрокаОтбор = Неопределено) Экспорт
	
	#Если ВебКлиент Тогда
		ЦветКнопки = WebЦвета.Бежевый;
	#Иначе	
		ЦветКнопки = windowsЦвета.Кнопка;
	#КонецЕсли

	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиОтчетов.Ссылка
	               |ПОМЕСТИТЬ втСтроки
	               |ИЗ
	               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	               |ГДЕ
	               |	СтрокиОтчетов.Ссылка В(&Строки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КолонкиОтчетов.Ссылка
	               |ПОМЕСТИТЬ втКолонки
	               |ИЗ
	               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	               |ГДЕ
	               |	КолонкиОтчетов.Ссылка В(&Колонки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКолонки.Ссылка КАК Колонка,
	               |	втСтроки.Ссылка КАК Строка
	               |ПОМЕСТИТЬ втСтрокиКолонки
	               |ИЗ
	               |	втСтроки КАК втСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКолонки КАК втКолонки
	               |		ПО (ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Показатель,
	               |	втСтрокиКолонки.Колонка,
	               |	втСтрокиКолонки.Строка,
	               |	втСтрокиКолонки.Колонка.Код КАК КолонкаКод,
	               |	ПоказателиОтчетов.ТипЗначения
	               |ИЗ
	               |	втСтрокиКолонки КАК втСтрокиКолонки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |		ПО втСтрокиКолонки.Строка = ПоказателиОтчетов.Строка
	               |			И втСтрокиКолонки.Колонка = ПоказателиОтчетов.Колонка
	               |			И (ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ)
	               |ГДЕ
	               |	 ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.Булево)";
	
	Запрос.УстановитьПараметр("Строки",КэшАналитикПоказателей.ВыгрузитьКолонку("Строка"));
	
	СписокКолонок = Новый СписокЗначений;
	Для Каждого Стр Из НастройкиИспользуемыхРесурсов Цикл	
		Для Каждого стрКол Из Стр.Ссылка.КолонкиОтчетов Цикл
			СписокКолонок.Добавить(стрКол.Колонка);	
		КонецЦикла;		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Колонки",СписокКолонок);
	Результат =  Запрос.Выполнить().Выгрузить();

	Для Каждого Стр Из Результат Цикл
		
		
		Если НЕ СтрокаОтбор = Неопределено Тогда
			Если Стр.Строка<>СтрокаОтбор Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
				
		Если Стр.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
			
			//Добавили оформление для положительного булево
			ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();

			Если  СтрокаОтбор = Неопределено Тогда
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.СтрокаОтчета");                                       
				ПолеОтбора.ПравоеЗначение =Стр.Строка;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;
			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СокрЛП(Стр.КолонкаКод));                                       
			ПолеОтбора.ПравоеЗначение =1;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;

			
			ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Да");
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(0,128,0));
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Стр.КолонкаКод));
			ОформляемоеПоле.Использование = Истина;
			
			РезультатБазовыеКолонки = НастройкиИспользуемыхРесурсов.НайтиСтроки(Новый Структура("Расчетный,ВидОтклонения",Истина,"Значение"));
			Для Каждого вКол Из РезультатБазовыеКолонки Цикл
				Для Каждого  текКол Из вКол.Колонки  Цикл
					Если  Стр.Колонка = текКол.Значение Тогда
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+вКол.КодПоказателя);
						ОформляемоеПоле.Использование = Истина;	
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;		
			
			
			//Добавили оформление для отрицательного булево			
			ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();

			Если  СтрокаОтбор = Неопределено Тогда
				ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.СтрокаОтчета");                                       
				ПолеОтбора.ПравоеЗначение =Стр.Строка;
				ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			КонецЕсли;

			
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(СокрЛП(Стр.КолонкаКод));                                       
			ПолеОтбора.ПравоеЗначение =0;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;

			
			ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Нет");
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", Новый Цвет(255,0,0));
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
		
			ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Стр.КолонкаКод));
			ОформляемоеПоле.Использование = Истина;
			
			РезультатБазовыеКолонки = НастройкиИспользуемыхРесурсов.НайтиСтроки(Новый Структура("Расчетный,ВидОтклонения",Истина,"Значение"));
			Для Каждого вКол Из РезультатБазовыеКолонки Цикл
				Для Каждого  текКол Из вКол.Колонки  Цикл
					Если  Стр.Колонка = текКол.Значение Тогда
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+вКол.КодПоказателя);
						ОформляемоеПоле.Использование = Истина;	
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;			
			//Вычисляемые булево не нужны.
			РезультатВычисляемыеКолонки = НастройкиИспользуемыхРесурсов.НайтиСтроки(Новый Структура("Расчетный",Истина));
			
			Для Каждого вКол Из РезультатВычисляемыеКолонки Цикл
				
				Если вКол.ВидОтклонения = "Значение" Тогда		
					Продолжить;	
				КонецЕсли;
				
				Для Каждого  текКол Из вКол.Колонки  Цикл
					
					Если  Стр.Колонка = текКол.Значение Тогда
						
						ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();
						
						Если  СтрокаОтбор = Неопределено Тогда
							ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
							ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.СтрокаОтчета");                                       
							ПолеОтбора.ПравоеЗначение =Стр.Строка;
							ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
						КонецЕсли;
						
						ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
						ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
						
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "Х");
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветКнопки);
						ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ГоризонтальноеПоложение", ГоризонтальноеПоложение.Центр);
						
						ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
						Если вКол.ВидОтклонения = "ОтнОтклонение"  Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_ОТН_"+вКол.КодПоказателя);	
						КонецЕсли;
						
						Если вКол.ВидОтклонения = "АбсОтклонение" Тогда
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+вКол.КодПоказателя);	
						КонецЕсли;
						
						Если вКол.ВидОтклонения = "Значение" Тогда		
							ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+вКол.КодПоказателя);	
						КонецЕсли;
						
						ОформляемоеПоле.Использование = Истина;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;				
		Иначе	
			Продолжить;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОформитьНемасштабируемые(ВидОтчета,Настройки,НастройкиИспользуемыхРесурсов,КэшАналитикПоказателей,СтрокаОтбор = Неопределено,ЗначениеТочность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтрокиОтчетов.Ссылка
	               |ПОМЕСТИТЬ втСтроки
	               |ИЗ
	               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	               |ГДЕ
	               |	СтрокиОтчетов.Ссылка В(&Строки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КолонкиОтчетов.Ссылка
	               |ПОМЕСТИТЬ втКолонки
	               |ИЗ
	               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	               |ГДЕ
	               |	КолонкиОтчетов.Ссылка В(&Колонки)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКолонки.Ссылка КАК Колонка,
	               |	втСтроки.Ссылка КАК Строка
	               |ПОМЕСТИТЬ втСтрокиКолонки
	               |ИЗ
	               |	втСтроки КАК втСтроки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втКолонки КАК втКолонки
	               |		ПО (ИСТИНА)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Показатель,
	               |	втСтрокиКолонки.Колонка,
	               |	втСтрокиКолонки.Строка,
	               |	втСтрокиКолонки.Колонка.Код КАК КолонкаКод,
	               |	ПоказателиОтчетов.ТипЗначения
	               |ИЗ
	               |	втСтрокиКолонки КАК втСтрокиКолонки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |		ПО втСтрокиКолонки.Строка = ПоказателиОтчетов.Строка
	               |			И втСтрокиКолонки.Колонка = ПоказателиОтчетов.Колонка
	               |			И (ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ)
	               |ГДЕ
	               |	 ПоказателиОтчетов.НеМасштабируется = ИСТИНА";
	
	Запрос.УстановитьПараметр("Строки",КэшАналитикПоказателей.ВыгрузитьКолонку("Строка"));
	
	СписокКолонок = Новый СписокЗначений;
	Для Каждого Стр Из НастройкиИспользуемыхРесурсов Цикл	
		Для Каждого стрКол Из Стр.Ссылка.КолонкиОтчетов Цикл
			СписокКолонок.Добавить(стрКол.Колонка);	
		КонецЦикла;		
	КонецЦикла;	
	
	Запрос.УстановитьПараметр("Колонки",СписокКолонок);
	Результат =  Запрос.Выполнить().Выгрузить();

	Для Каждого Стр Из Результат Цикл
		
		
		Если НЕ СтрокаОтбор = Неопределено Тогда
			Если Стр.Строка<>СтрокаОтбор Тогда
				Продолжить;
			КонецЕсли;	
		КонецЕсли;
		
		
		//Добавили оформление для положительного булево
		ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();
		
		Если  СтрокаОтбор = Неопределено Тогда
			ПолеОтбора = ЭлементУсловногоОформления.Отбор.элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели.СтрокаОтчета");                                       
			ПолеОтбора.ПравоеЗначение =Стр.Строка;
			ПолеОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
				
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		НастройкаФормата = "ЧДЦ="+ЗначениеТочность+";ЧН=0; ЧС=; ЧГ=3,0";
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", НастройкаФормата);
	
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(СокрЛП(Стр.КолонкаКод));
		ОформляемоеПоле.Использование = Истина;
		
		РезультатБазовыеКолонки = НастройкиИспользуемыхРесурсов.НайтиСтроки(Новый Структура("Расчетный,ВидОтклонения",Истина,"Значение"));
		Для Каждого вКол Из РезультатБазовыеКолонки Цикл
			Для Каждого  текКол Из вКол.Колонки  Цикл
				Если  Стр.Колонка = текКол.Значение Тогда
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
					ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_"+вКол.КодПоказателя);
					ОформляемоеПоле.Использование = Истина;	
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;		
		
		РезультатВычисляемыеКолонки = НастройкиИспользуемыхРесурсов.НайтиСтроки(Новый Структура("Расчетный",Истина));
		
		Для Каждого вКол Из РезультатВычисляемыеКолонки Цикл
			
			Если НЕ вКол.ВидОтклонения = "АбсОтклонение" Тогда		
				Продолжить;	
			КонецЕсли;
			
			Для Каждого  текКол Из вКол.Колонки  Цикл
				
				Если  Стр.Колонка = текКол.Значение Тогда
					
					ЭлементУсловногоОформления = Настройки.УсловноеОформление.Элементы.Добавить();
					
					ЭлементУсловногоОформления.ИспользоватьВЗаголовке = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
					ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
					
					НастройкаФормата = "ЧДЦ="+ЗначениеТочность+";ЧН=0; ЧС=; ЧГ=3,0";
					ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Формат", НастройкаФормата);
					
					
					ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
										
					Если вКол.ВидОтклонения = "АбсОтклонение" Тогда
						ОформляемоеПоле.Поле=Новый ПолеКомпоновкиДанных("БАЗА_АБС_"+вКол.КодПоказателя);	
					КонецЕсли;
										
					ОформляемоеПоле.Использование = Истина;
					
				КонецЕсли;
			КонецЦикла;		
		КонецЦикла;			
	КонецЦикла;	
	
КонецПроцедуры


#КонецОбласти


#Область СервисныеПроцедурыИФункции

Процедура ФорматироватьЗаголовкиИерархии(ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ВыбранныеРесурсы,ДополнительныеПараметры=Неопределено,ТЗДанные=Неопределено,ПредставлениеОтборов="") Экспорт
	
	///////////////////////////// Форматирование ///////////////////////////////////////////////////////////////////////////	
		
	КоличествоУдаляемыхСтрок = 0;
	
	Для Стр=1 По ДокументРезультат.ФиксацияСверху Цикл
	    Для Кол=1 По ДокументРезультат.ШиринаТаблицы Цикл
		      ДокументРезультат.Область(Стр,Кол,Стр,Кол).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			  ДокументРезультат.Область(Стр,Кол,Стр,Кол).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;	  
		  КонецЦикла;
	КонецЦикла; 
		
	//Фиксация    
	ФиксацияСлева=ДокументРезультат.ФиксацияСлева;
	ФиксацияСверху=ДокументРезультат.ФиксацияСверху;

	//Форматриуем иерархический вывод
	
	ТЗГрупп = Новый ТаблицаЗначений;
	ТЗГрупп.Колонки.Добавить("ИндексНачалаСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	ТЗГрупп.Колонки.Добавить("ИндексОкончанияСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ТЗГрупп.Колонки.Добавить("УровеньГруппировкиТекущейОбласти",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));	
	ТЗГрупп.Колонки.Добавить("ГруппаОткрыта",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	Для Инд =1 по ДокументРезультат.КоличествоУровнейГруппировокСтрок() Цикл	
		ДокументРезультат.Область(1,0,ДокументРезультат.ВысотаТаблицы,0).Разгруппировать();
	КонецЦикла;
	
	УровеньПоследнейСтроки = 0;
	МассивНомеровГрупп = Новый Массив;
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	
	Для  СтрокаТаблицы =ДокументРезультат.ФиксацияСверху+1  По ДокументРезультат.ВысотаТаблицы+1 Цикл 
		
		ОблКУдалению = ДокументРезультат.Область(СтрокаТаблицы,0,СтрокаТаблицы,0);
		Если ОблКУдалению.ВысотаСтроки = 1 Тогда
			
			Если ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Текст="<...>" Тогда
				ОблКУдалению.ВысотаСтроки = 0;
				Продолжить;
			КонецЕсли;
			
			МассивУдаляемыхСтрок.Добавить(ОблКУдалению);
			ОблКУдалению.Имя = "Удалить"+Сч;
			Сч = Сч+1;
			Продолжить;	
		КонецЕсли;	  		 
		
		ТекущаяОбласть    =  ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1);
		СледующаяОбласть  =  ДокументРезультат.Область(СтрокаТаблицы+1,1,СтрокаТаблицы+1,1);
		ПредыдущаяОбласть =  ДокументРезультат.Область(СтрокаТаблицы-1,1,СтрокаТаблицы-1,1);
		
		Если  ТекущаяОбласть.Отступ<ПредыдущаяОбласть.Отступ Тогда //Закрываем все открытые группы с уровнем большим текущего  	
			ОткрытыеСтроки = ТЗГрупп.НайтиСтроки(Новый Структура("ГруппаОткрыта",Истина));
			Для Каждого оСтр Из ОткрытыеСтроки Цикл
				Если  оСтр.УровеньГруппировкиТекущейОбласти > ТекущаяОбласть.Отступ Тогда
					оСтр.ГруппаОткрыта = Ложь;
					ДокументРезультат.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Сгруппировать();
					Если Лев(ДокументРезультат.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя,7)<>"Удалить" Тогда 
						ДокументРезультат.Область(оСтр.ИндексНачалаСтроки,0,СтрокаТаблицы-1,0).Имя = "ОбластьСтроки_"+Строка(Новый УникальныйИдентификатор);
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;	 	
		КонецЕсли;	
		
		Если СледующаяОбласть.Отступ > ТекущаяОбласть.Отступ Тогда //Открываем группу
			
			Если ТекущаяОбласть.СодержитЗначение тогда
				МассивНомеровГрупп.Добавить(СтрокаТаблицы);
			Иначе
				МассивНомеровГрупп.Добавить(СтрокаТаблицы);
			КонецЕсли;
			
			Нгруппа = ТЗГрупп.Добавить();
			Нгруппа.УровеньТекущейОбласти = ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ;
			Нгруппа.ИндексНачалаСтроки = СтрокаТаблицы+1;
			Нгруппа.ИндексОкончанияСтроки = СтрокаТаблицы;
			Нгруппа.УровеньГруппировкиТекущейОбласти = (ДокументРезультат.Область(СтрокаТаблицы,1,СтрокаТаблицы,1).Отступ)+2;
			Нгруппа.ГруппаОткрыта = Истина;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Сч=0 По МассивУдаляемыхСтрок.Количество()-1 Цикл	
		
		ОбластьКУдалению = ДокументРезультат.Область("Удалить"+Сч);
		
		ОбластьКУдалению.Разгруппировать();
		ДокументРезультат.УдалитьОбласть(ОбластьКУдалению, ТипСмещенияТабличногоДокумента.ПоВертикали);
		
		КоличествоУдаляемыхСтрок = ОбластьКУдалению.Низ - ОбластьКУдалению.Верх + 1;
		
		НомераГруппКУдалению = Новый Массив();
		ИндексГруппы = 0;
		
		Для каждого НомерГруппы Из МассивНомеровГрупп Цикл
			
			Если ОбластьКУдалению.Верх <= НомерГруппы И НомерГруппы <= ОбластьКУдалению.Низ тогда
				НомераГруппКУдалению.Добавить(ИндексГруппы);
			ИначеЕсли НомерГруппы > ОбластьКУдалению.Низ тогда
				МассивНомеровГрупп.Установить(ИндексГруппы, НомерГруппы - КоличествоУдаляемыхСтрок);
			КонецЕсли;
			
			ИндексГруппы = ИндексГруппы + 1;
			
		КонецЦикла;
		
		Для каждого НомерГруппыУдалить Из НомераГруппКУдалению Цикл
			МассивНомеровГрупп.Удалить(НомерГруппыУдалить);
		КонецЦикла;
		
	КонецЦикла;
	
	КоличествоДопФиксируемыхСтрок =ДокументРезультат.ФиксацияСверху;
	
	МассивУдаляемыхКолонок = Новый Массив;
	Сч = 0;
	Для  КолонкаТаблицы =ДокументРезультат.ФиксацияСлева+1  По ДокументРезультат.ШиринаТаблицы+1 Цикл 
		
		ОблКУдалению = ДокументРезультат.Область(0,КолонкаТаблицы,0,КолонкаТаблицы);
		Если ОблКУдалению.ШиринаКолонки = 1 Тогда			
			МассивУдаляемыхКолонок.Добавить(ОблКУдалению);
			ОблКУдалению.Имя = "Удалить"+Сч;
			Сч = Сч+1;
		КонецЕсли;	  		 		
	КонецЦикла;
	
	Для Сч=0 По  МассивУдаляемыхКолонок.Количество()-1 Цикл	
		ДокументРезультат.Область("Удалить"+Сч).Разгруппировать();
		ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоГоризонтали);
	КонецЦикла;

	
	
	//Уголок шапки с заголовком
	Если  НЕ ДополнительныеПараметры = Неопределено И  ДополнительныеПараметры.Свойство("Бланк") Тогда
		ТекТаблица = Строка(ДополнительныеПараметры.Бланк);
	Иначе	
		ТекТаблица = Нстр("ru = 'Сводная таблица '");
	КонецЕсли;	
		
	Для Стр=1 По ДокументРезультат.ФиксацияСлева Цикл
		ДокументРезультат.Область(Стр,1,Стр,1).Текст = ТекТаблица+?(ЗначениеЗаполнено(ПредставлениеОтборов),ПредставлениеОтборов,"");
	КонецЦикла;
	
	//Форматируем надписи в колонках (Последняя строка шапки - всегда имя ресурсов, его не форматируем)
	ЭтоСтрокаРесурсов = Ложь;
	Если НЕ ИерархияГруппировокКолонок Тогда
		Для ИндСтроки = 1 По ФиксацияСверху-1 Цикл
			СтрокаТекст = ДокументРезультат.Область(ИндСтроки,ФиксацияСлева+1,ИндСтроки,ФиксацияСлева+1).Текст;
			ИндПервойКолонки =ФиксацияСлева+1;
			Для ИндКолонки = ФиксацияСлева+2 По ДокументРезультат.ШиринаТаблицы+1 Цикл
				
				// Названия ресурсов не форматируем
				Для Каждого Рес Из ВыбранныеРесурсы Цикл
					Если СокрЛП(ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст)=Рес.Заголовок Тогда
						ЭтоСтрокаРесурсов = Истина;
						
						Если ИндКолонки<= ДокументРезультат.ШиринаТаблицы Тогда
							Если ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст = "" Тогда		
							КонецЕсли;	
						КонецЕсли;	
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				Если ЭтоСтрокаРесурсов Тогда
					Прервать;
				КонецЕсли;	
												
			КонецЦикла;
		КонецЦикла; 	
	КонецЕсли; 
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ДокументРезультат);
			
	//Устанавливаем фон и ширину для колонок 
		
	Для ИндКолонки=1 по ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл			
		Если ИндКолонки>ФиксацияСлева Тогда
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 14.4;
		Иначе	  
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 40;
		КонецЕсли;
	КонецЦикла;
				
	//Фиксируем 
	ПолеТабличногоДокументаМакет.ФиксацияСверху=ФиксацияСверху;
	ПолеТабличногоДокументаМакет.ФиксацияСлева=ФиксацияСлева;
	
	//Форматируем шапку...
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	//Уголок шапки с заголовком
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).Объединить();
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	
	//Линии таблицы
	ПолеТабличногоДокументаМакет.Область(2,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ШиринаТаблицы+1).ЦветРамки = Новый Цвет(230,230,250);	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ФиксацияСлева).ЦветФона = Новый Цвет(255,255,255);
					
	//Форматируем Общие Итоги
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоСтрокам") И ДополнительныеПараметры["ВыводитьОбщийИтогПоСтрокам"] Тогда
			ПолеТабличногоДокументаМакет.ФиксацияСверху=ДокументРезультат.ФиксацияСверху+1; 
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,1,ФиксацияСверху+1,ПолеТабличногоДокументаМакет.ШиринаТаблицы-1).ЦветФона=Новый Цвет(155,194,230);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,1,ФиксацияСверху+1,ПолеТабличногоДокументаМакет.ШиринаТаблицы-1).ЦветТекста=Новый Цвет(255,255,255);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,1,ФиксацияСверху+1,ПолеТабличногоДокументаМакет.ШиринаТаблицы-1).Шрифт=Новый Шрифт("Arial",8,Истина);	 
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоКолонкам") И ДополнительныеПараметры["ВыводитьОбщийИтогПоКолонкам"] Тогда
			
			ИндексОтступа = ВыбранныеРесурсы.Количество();
			ПолеТабличногоДокументаМакет.ФиксацияСлева=ДокументРезультат.ФиксацияСлева+ИндексОтступа; 
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,ФиксацияСлева+1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ФиксацияСлева+ИндексОтступа).ЦветФона=Новый Цвет(155,194,230);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,ФиксацияСлева+1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ФиксацияСлева+ИндексОтступа).ЦветТекста=Новый Цвет(255,255,255);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,ФиксацияСлева+1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ФиксацияСлева+ИндексОтступа).Шрифт=Новый Шрифт("Arial",8,Истина);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры	

Процедура ФорматироватьЗаголовкиБезИерархии(ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ВыбранныеРесурсы,ДополнительныеПараметры=Неопределено,ТЗДанные=Неопределено) Экспорт
	
	///////////////////////////// Форматирование ///////////////////////////////////////////////////////////////////////////	
		
	КоличествоУдаляемыхСтрок = 0;
	
	Для Стр=1 По ДокументРезультат.ФиксацияСверху Цикл
	    Для Кол=1 По ДокументРезультат.ШиринаТаблицы Цикл
		      ДокументРезультат.Область(Стр,Кол,Стр,Кол).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			  ДокументРезультат.Область(Стр,Кол,Стр,Кол).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;	  
		  КонецЦикла;
	КонецЦикла; 
		
	//Фиксация    
	ФиксацияСлева=ДокументРезультат.ФиксацияСлева;
	ФиксацияСверху=ДокументРезультат.ФиксацияСверху;
	
	КоличествоДопФиксируемыхСтрок =ДокументРезультат.ФиксацияСверху;
		
	//Уголок шапки с заголовком
	Для Стр=1 По ДокументРезультат.ФиксацияСлева Цикл
		ДокументРезультат.Область(Стр,1,Стр,1).Текст = Нстр("ru = 'Сводная таблица'");
	КонецЦикла;
	
	//Форматируем надписи в колонках (Последняя строка шапки - всегда имя ресурсов, его не форматируем)
	ЭтоСтрокаРесурсов = Ложь;
	Если НЕ ИерархияГруппировокКолонок Тогда
		Для ИндСтроки = 1 По ФиксацияСверху-1 Цикл
			СтрокаТекст = ДокументРезультат.Область(ИндСтроки,ФиксацияСлева+1,ИндСтроки,ФиксацияСлева+1).Текст;
			ИндПервойКолонки =ФиксацияСлева+1;
			Для ИндКолонки = ФиксацияСлева+2 По ДокументРезультат.ШиринаТаблицы+1 Цикл
				
				// Названия ресурсов не форматируем
				Для Каждого Рес Из ВыбранныеРесурсы Цикл
					Если СокрЛП(ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст)=СокрЛП(Рес.Наименование) Тогда
						ЭтоСтрокаРесурсов = Истина;
						
						Если ИндКолонки<= ДокументРезультат.ШиринаТаблицы Тогда
							Если ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст = "" Тогда
								
							КонецЕсли;	
						КонецЕсли;
						
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				Если ЭтоСтрокаРесурсов Тогда
					Прервать;
				КонецЕсли;	
				Если  ВыбранныеРесурсы.Количество()=1 Тогда
					Если  НЕ ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст=СтрокаТекст Тогда
						
						СтрокаТекст = ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст;
						ДокументРезультат.Область(ИндСтроки,ИндПервойКолонки,ИндСтроки,ИндКолонки-1).Объединить();
						ИндПервойКолонки =ИндКолонки; 
						
					КонецЕсли;	  
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла; 	
	КонецЕсли; 
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ДокументРезультат);
			
	//Устанавливаем фон и ширину для колонок 
		
	Для ИндКолонки=1 по ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
		
		ПолеТабличногоДокументаМакет.Область(КоличествоУдаляемыхСтрок,ИндКолонки,КоличествоУдаляемыхСтрок,ИндКолонки).РазмерКартинки=РазмерКартинки.Растянуть; 		
		ПолеТабличногоДокументаМакет.Область(2,ИндКолонки,2,ИндКолонки).ПоложениеТекстаОтносительноКартинки=ПоложениеТекстаОтносительноКартинки.Поверх;
		
		Если ИндКолонки>ФиксацияСлева Тогда
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 13.5;
		Иначе	  
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 40;
		КонецЕсли;
	КонецЦикла;
		
	//Фиксируем 
	ПолеТабличногоДокументаМакет.ФиксацияСверху=ФиксацияСверху;
	ПолеТабличногоДокументаМакет.ФиксацияСлева=ФиксацияСлева;
	
	//Форматируем шапку...
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	//Уголок шапки с заголовком
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).Объединить();
	
	
	//Линии таблицы
	ПолеТабличногоДокументаМакет.Область(2,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ШиринаТаблицы+1).ЦветРамки = Новый Цвет(230,230,250);	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ФиксацияСлева).ЦветФона = Новый Цвет(255,255,255);			
	ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,0,ФиксацияСверху,0).ВысотаСтроки=33; 
	 	
	//Форматируем Общие Итоги
	Если НЕ ДополнительныеПараметры = Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоСтрокам") И ДополнительныеПараметры["ВыводитьОбщийИтогПоСтрокам"] Тогда
			ПолеТабличногоДокументаМакет.ФиксацияСверху=ДокументРезультат.ФиксацияСверху+1; 
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,1,ФиксацияСверху+1,ПолеТабличногоДокументаМакет.ШиринаТаблицы-1).ЦветФона=Новый Цвет(155,194,230);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,1,ФиксацияСверху+1,ПолеТабличногоДокументаМакет.ШиринаТаблицы-1).ЦветТекста=Новый Цвет(255,255,255);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,1,ФиксацияСверху+1,ПолеТабличногоДокументаМакет.ШиринаТаблицы-1).Шрифт=Новый Шрифт("Arial",8,Истина);	 
		КонецЕсли;
		Если ДополнительныеПараметры.Свойство("ВыводитьОбщийИтогПоКолонкам") И ДополнительныеПараметры["ВыводитьОбщийИтогПоКолонкам"] Тогда
			
			ИндексОтступа = ВыбранныеРесурсы.Количество();
			ПолеТабличногоДокументаМакет.ФиксацияСлева=ДокументРезультат.ФиксацияСлева+ИндексОтступа; 
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,ФиксацияСлева+1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ФиксацияСлева+ИндексОтступа).ЦветФона=Новый Цвет(155,194,230);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,ФиксацияСлева+1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ФиксацияСлева+ИндексОтступа).ЦветТекста=Новый Цвет(255,255,255);
			ПолеТабличногоДокументаМакет.Область(ФиксацияСверху,ФиксацияСлева+1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,ФиксацияСлева+ИндексОтступа).Шрифт=Новый Шрифт("Arial",8,Истина);
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры	

Процедура ФорматироватьЗаголовкиИерархииМП(ТаблицаКолонки,ТаблицаСтроки,ПолеТабличногоДокументаМакет,ДокументРезультат,ДополнитьОтклонениями,ИерархияСтрок,ИерархияКолонок) Экспорт
	
	///////////////////////////// Форматирование ///////////////////////////////////////////////////////////////////////////
	
	Для Стр=1 По ДокументРезультат.ФиксацияСверху Цикл
	    Для Кол=1 По ДокументРезультат.ШиринаТаблицы Цикл
		      ДокументРезультат.Область(Стр,Кол,Стр,Кол).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			  ДокументРезультат.Область(Стр,Кол,Стр,Кол).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;	  
		  КонецЦикла;
	КонецЦикла; 
	ДополнитьОтклонениями = Истина;
	КоличествоУдаляемыхСтрок =ТаблицаКолонки.Количество();
	ДопИндекс =0;
	КоличествоДопФиксируемыхКолонок = ТаблицаКолонки.Количество();
	
	КоличествоДопФиксируемыхСтрок = 1;
	
	Если НЕ ДополнитьОтклонениями   Тогда
		ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область(1+КоличествоУдаляемыхСтрок,0,ДокументРезультат.ФиксацияСверху,0),ТипСмещенияТабличногоДокумента.ПоВертикали);	
	Иначе	
		Если ТаблицаСтроки.НайтиСтроки(Новый Структура("Код","Фильтр_Показатели_Колонки")).Количество()=1 Тогда
			
		Иначе
			ДопИндекс =1;
		КонецЕсли;
	КонецЕсли;
		
	Если Не ИерархияКолонок Тогда
		Если ТаблицаКолонки.Количество()>1 Тогда
			Для ИндСтроки = 1 По ТаблицаКолонки.Количество() Цикл
				СтрокаТекст = ДокументРезультат.Область(ИндСтроки,КоличествоДопФиксируемыхСтрок+1,ИндСтроки,КоличествоДопФиксируемыхСтрок+1).Текст;
				ИндПервойКолонки =КоличествоДопФиксируемыхСтрок+1;
				Для ИндКолонки = КоличествоДопФиксируемыхСтрок+2 По ДокументРезультат.ШиринаТаблицы+1 Цикл
					
					Если ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст="" И
						ИндКолонки<ДокументРезультат.ШиринаТаблицы+1 Тогда
						Продолжить;
					КонецЕсли;	
					Если  НЕ ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст=СтрокаТекст Тогда
						
						СтрокаТекст = ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст;
						ДокументРезультат.Область(ИндСтроки,ИндПервойКолонки,ИндСтроки,ИндКолонки-1).Объединить();
						ИндПервойКолонки =ИндКолонки; 
						
					КонецЕсли;	  
				КонецЦикла;
			КонецЦикла; 	
		КонецЕсли; 	
	КонецЕсли;
	
	
	//Фиксация    
	ФиксацияСлева=ДокументРезультат.ФиксацияСлева;
	ФиксацияСверху=ДокументРезультат.ФиксацияСверху;
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ДокументРезультат);
				
	Для ИндКолонки=1 по ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
		Если  ПолеТабличногоДокументаМакет.Область(КоличествоУдаляемыхСтрок+1,ИндКолонки,КоличествоУдаляемыхСтрок+1,ИндКолонки).Текст ="Исполнение"
			ИЛИ ПолеТабличногоДокументаМакет.Область(КоличествоУдаляемыхСтрок+1,ИндКолонки,КоличествоУдаляемыхСтрок+1,ИндКолонки).Текст ="Согласование" Тогда
		Иначе	
			
		КонецЕсли;	
		
		Если ИндКолонки>КоличествоДопФиксируемыхСтрок Тогда
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 18.5;
		Иначе	  
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 40;
		КонецЕсли;
	КонецЦикла;
	////Высота последней строки шапки увеличина...
	
	ПолеТабличногоДокументаМакет.ФиксацияСверху=КоличествоДопФиксируемыхКолонок+1;
	ПолеТабличногоДокументаМакет.ФиксацияСлева=1;
	ПолеТабличногоДокументаМакет.Область(1,0,ФиксацияСверху,0).ВысотаСтроки=15;

	
	//
	//Форматируем шапку...
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	//Уголок шапки с заголовком
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).Объединить();
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Обрезать;
	
	//Линии таблицы
	ПолеТабличногоДокументаМакет.Область(2,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ШиринаТаблицы+1).ЦветРамки = Новый Цвет(230,230,250);	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ФиксацияСлева).ЦветФона = Новый Цвет(255,255,255);

	
	
	
КонецПроцедуры	

Процедура ФорматироватьЗаголовкиУправлениеПериодом(ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,ПолеТабличногоДокументаМакет,ДокументРезультат,ВыбранныеРесурсы,ДополнительныеПараметры=Неопределено,ТЗДанные=Неопределено) Экспорт
	
	///////////////////////////// Форматирование ///////////////////////////////////////////////////////////////////////////	
		
	КоличествоУдаляемыхСтрок = 0;
	
	Для Стр=1 По ДокументРезультат.ФиксацияСверху Цикл
	    Для Кол=1 По ДокументРезультат.ШиринаТаблицы Цикл
		      ДокументРезультат.Область(Стр,Кол,Стр,Кол).ВертикальноеПоложение=ВертикальноеПоложение.Центр;
			  ДокументРезультат.Область(Стр,Кол,Стр,Кол).ГоризонтальноеПоложение=ГоризонтальноеПоложение.Центр;	  
		  КонецЦикла;
	КонецЦикла; 
		
	//Фиксация    
	ФиксацияСлева=ДокументРезультат.ФиксацияСлева;
	ФиксацияСверху=ДокументРезультат.ФиксацияСверху;

	//Удаляем пустые строки,если есть
	
	МассивУдаляемыхСтрок = Новый Массив;
	Сч = 0;
	Для  СтрокаТаблицы =ДокументРезультат.ФиксацияСверху  По ДокументРезультат.ВысотаТаблицы Цикл 
		
		ОблКУдалению = ДокументРезультат.Область(СтрокаТаблицы,0,СтрокаТаблицы,0);
		Если ОблКУдалению.ВысотаСтроки = 1 Тогда		
			МассивУдаляемыхСтрок.Добавить(ОблКУдалению);
			ОблКУдалению.Имя = "Удалить"+Сч;
			Сч = Сч+1;
		КонецЕсли;	
		
	КонецЦикла;
	
	Для Сч=0 По  МассивУдаляемыхСтрок.Количество()-1 Цикл	
		ДокументРезультат.УдалитьОбласть(ДокументРезультат.Область("Удалить"+Сч),ТипСмещенияТабличногоДокумента.ПоВертикали);
	КонецЦикла;
	
	КоличествоДопФиксируемыхСтрок =ДокументРезультат.ФиксацияСверху;
	
		
	//Уголок шапки с заголовком
	Для Стр=1 По ДокументРезультат.ФиксацияСлева Цикл
		ДокументРезультат.Область(Стр,1,Стр,1).Текст = Нстр("ru = 'Управление периодами'");
	КонецЦикла;
	
	//Форматируем надписи в колонках (Последняя строка шапки - всегда имя ресурсов, его не форматируем)
	ЭтоСтрокаРесурсов = Ложь;
	Если НЕ ИерархияГруппировокКолонок Тогда
		Для ИндСтроки = 1 По ФиксацияСверху-1 Цикл
			СтрокаТекст = ДокументРезультат.Область(ИндСтроки,ФиксацияСлева+1,ИндСтроки,ФиксацияСлева+1).Текст;
			ИндПервойКолонки =ФиксацияСлева+1;
			Для ИндКолонки = ФиксацияСлева+2 По ДокументРезультат.ШиринаТаблицы+1 Цикл
				
				// Названия ресурсов не форматируем
				Для Каждого Рес Из ВыбранныеРесурсы Цикл
					Если СокрЛП(ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст)=СокрЛП(Рес.Наименование) Тогда
						ЭтоСтрокаРесурсов = Истина;
						Прервать;
					КонецЕсли;	
				КонецЦикла;
				Если ЭтоСтрокаРесурсов Тогда
					Прервать;
				КонецЕсли;	
				Если ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст = "" Тогда
				    Продолжить;
				КонецЕсли;		
					
				Если  НЕ ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст=СтрокаТекст Тогда
					
					СтрокаТекст = ДокументРезультат.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки).Текст;
					ДокументРезультат.Область(ИндСтроки,ИндПервойКолонки,ИндСтроки,ИндКолонки-1).Объединить();
					ИндПервойКолонки =ИндКолонки; 
					
				КонецЕсли;	  
			КонецЦикла;
		КонецЦикла; 	
	КонецЕсли; 
	
	ПолеТабличногоДокументаМакет.Очистить();
	ПолеТабличногоДокументаМакет.Вывести(ДокументРезультат);
		
		
	Для ИндКолонки=1 по ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл
		
		ПолеТабличногоДокументаМакет.Область(КоличествоУдаляемыхСтрок,ИндКолонки,КоличествоУдаляемыхСтрок,ИндКолонки).РазмерКартинки=РазмерКартинки.Растянуть; 		
		ПолеТабличногоДокументаМакет.Область(2,ИндКолонки,2,ИндКолонки).ПоложениеТекстаОтносительноКартинки=ПоложениеТекстаОтносительноКартинки.Поверх;
		
		
		Если ИндКолонки>ФиксацияСлева Тогда
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 13.5;
		Иначе	  
			ПолеТабличногоДокументаМакет.Область(0,ИндКолонки,0,ИндКолонки).ШиринаКолонки = 40;
		КонецЕсли;
	КонецЦикла;
		
	
	//Фиксируем 
	ПолеТабличногоДокументаМакет.ФиксацияСверху=ФиксацияСверху;
	ПолеТабличногоДокументаМакет.ФиксацияСлева=ФиксацияСлева;
	
	//Форматируем шапку...
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветФона=Новый Цвет(155,194,230);
    ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).ЦветТекста=Новый Цвет(255,255,255);
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ПолеТабличногоДокументаМакет.ШиринаТаблицы).Шрифт=Новый Шрифт("Arial",8,Истина);

	//Уголок шапки с заголовком
	ПолеТабличногоДокументаМакет.Область(1,1,ФиксацияСверху,ФиксацияСлева).Объединить();
	
	
	//Линии таблицы
	ПолеТабличногоДокументаМакет.Область(2,2,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ШиринаТаблицы+1).ЦветРамки = Новый Цвет(230,230,250);	
	ПолеТабличногоДокументаМакет.Область(ПолеТабличногоДокументаМакет.ФиксацияСверху+1,1,ПолеТабличногоДокументаМакет.ВысотаТаблицы,
	ПолеТабличногоДокументаМакет.ФиксацияСлева).ЦветФона = Новый Цвет(255,255,255);
				
	 
	
	ПолеТабличногоДокументаМакет.УдалитьОбласть(ПолеТабличногоДокументаМакет.Область(2,0,2,0),ТипСмещенияТабличногоДокумента.ПоВертикали);
	
	ПолеТабличногоДокументаМакет.Область(1,0,1,0).ВысотаСтроки=33;
	
	ПолеТабличногоДокументаМакет.ФиксацияСверху=ФиксацияСверху-1;
	
КонецПроцедуры	

Функция ПолучитьТекущийПериод() Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	Периоды.Ссылка
	                |ИЗ
	                |	Справочник.Периоды КАК Периоды
	                |ГДЕ
	                |	Периоды.ДатаНачала = &ДатаНачала
	                |	И Периоды.ПометкаУдаления = ЛОЖЬ
	                |	И Периоды.Периодичность = &Периодичность";
	 
	 Запрос.УстановитьПараметр("ДатаНачала",НачалоГода(ТекущаяДата() ));
	 Запрос.УстановитьПараметр("Периодичность",Перечисления.Периодичность.Год);

	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	  Возврат Выборка.Ссылка;
	 
	 КонецЦикла;
	 
	 Возврат Неопределено;
	 
 КонецФункции

//Функция СоздатьМакетБланкаКИК(КлючевыеПараметры)
//Параметры: КлючевыеПараметры - cтруктура, содержащая следующие свойства:   
//   ВидОтчета - вид отчета, содержащий данные (обязательный)
//   НаименованиеБланка- Наименование создаваемого бланка (обязательный)
//   Периодичность - Периодичность бланка (Тип - ПеречислениеСсылка.Периодичность, Обязательный)  
//   ГруппаСтрок  - Тип СправочникСсылка.СтрокиОтчетов.  Родительская строка, ограничивающая набор данных (необязательный - если не задано, то берутся все показатели вида отчета)
//   Периметр - тип СправочникСсылка.Организации. Организация группа в справочнике, содержащая периметр для КИКов.
//   (необязательный - если не задан, то используются все орг. единицы).


Функция СоздатьМакетБланкаКИК(КлючевыеПараметры) Экспорт
	
	Если Не ТипЗнч(КлючевыеПараметры) = Тип("Структура") Тогда
		ВызватьИсключение НСтр("ru = 'Ошибка инициализации параметров'");
	КонецЕсли;	
	
	Если Не КлючевыеПараметры.Свойство("Периодичность")  Тогда
		ВызватьИсключение НСтр("ru = 'Не задан ключевой параметр Периодичность'");
	КонецЕсли;	
	
	Если Не КлючевыеПараметры.Свойство("ВидОтчета") Тогда
		ВызватьИсключение НСтр("ru = 'Не задан ключевой параметр ВидОтчета'");
	КонецЕсли;
	
	Если Не КлючевыеПараметры.Свойство("НаименованиеБланка")  Тогда
		 ВызватьИсключение НСтр("ru = 'Не задан ключевой параметр Наименование'");
	КонецЕсли;
	
	Если Не КлючевыеПараметры.Свойство("ГруппаСтрок") Тогда
		ГруппаСтрок = Неопределено;
	Иначе	
		ГруппаСтрок = КлючевыеПараметры.ГруппаСтрок;
	КонецЕсли;

	Если Не КлючевыеПараметры.Свойство("Периметр") Тогда
		Периметр = Неопределено;
	Иначе	
		Периметр = КлючевыеПараметры.Периметр;
	КонецЕсли;
	
	Периодичность 		= КлючевыеПараметры.Периодичность;
	ВидОтчета 			= КлючевыеПараметры.ВидОтчета;
	НаименованиеБланка 	= КлючевыеПараметры.НаименованиеБланка;
	
	Если НЕ ЗначениеЗАполнено(Периодичность) ИЛИ НЕ ЗначениеЗАполнено(ВидОтчета)  ИЛИ НЕ ЗначениеЗАполнено(НаименованиеБланка) Тогда
	    ВызватьИсключение НСтр("ru = 'Не заполнен ключевой параметр'");
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", ВидОтчета);
	ПараметрыЗаполнения.Вставить("РежимБланка",1);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ПараметрыЗаполнения);
	НаименованиеБланка = НаименованиеБланка;
	ПериодичностьБюджетирования = Периодичность;
	
	БланкСводнойТаблицы 							= Справочники.БланкиОтчетов.СоздатьЭлемент();
	БланкСводнойТаблицы.Наименование 				= НаименованиеБланка;
	БланкСводнойТаблицы.Периодичность 				= ПериодичностьБюджетирования;
	БланкСводнойТаблицы.ЕдиницаИзмеренияПоУмолчанию = Перечисления.ПорядкиОкругленияОтчетности.Окр1;
	БланкСводнойТаблицы.ИерархияГруппировокСтрок	= Истина;
	БланкСводнойТаблицы.ИерархияГруппировокКолонок	= Ложь;
	СоздатьМакетСводнойТаблицы(БланкСводнойТаблицы);
	БланкСводнойТаблицы.Владелец = ВидОтчета; 
	БланкСводнойТаблицы.РежимБланка = 1;
	БланкСводнойТаблицы.Записать();
	
	СоздатьБланкДляКИК(БланкСводнойТаблицы.Ссылка,ГруппаСтрок,Периметр);
	
	Возврат БланкСводнойТаблицы.Ссылка;
	
КонецФункции
  
Процедура СоздатьБланкДляКИК(СозданныйБланк,ГруппаСтрок,Периметр) Экспорт
		
	СоздатьНастройкиНовогоБланка(СозданныйБланк,Истина,Истина,ГруппаСтрок);
		
	//Перенести измрение организации в колонки
	НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
	НастройкиСтруктурыБланка.Отбор.Бланк.Установить(СозданныйБланк);
	НастройкиСтруктурыБланка.Прочитать();
	
	Для Каждого Нстр Из НастройкиСтруктурыБланка Цикл	
		Если Нстр.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации Тогда	
			 Нстр.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка;
			 Нстр.Сортировка = "Наименование";
		КонецЕсли;		
	КонецЦикла;	
	
	НастройкиСтруктурыБланка.Записать(Истина);
	
	//Установить отборы по умолчанию 
	Если ЗначениеЗАполнено(Периметр) Тогда
		
		СКДТекущегоПоля = ПолучитьОбщийМакет("ШаблонСводнойТаблицы");
		
		НП =  СКДТекущегоПоля.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НП.Заголовок = НСтр("ru = 'Организационная единица'");
		НП.ПутьКДанным = "Организации";;
		НП.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
		НП.Поле =  "Организации";;
		
		ЭлементОтбора = СКДТекущегоПоля.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организации");
		ЭлементОтбора.ВидСравнения=ВидСравненияКомпоновкиДанных.ВИерархии;
		ЭлементОтбора.ПравоеЗначение=Периметр;
		
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСоставаАналитикиБланков.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.БланкОтчета.Установить(СозданныйБланк);
		НастройкиСтруктурыБланка.Отбор.Назначение.Установить(Перечисления.ПредназначенияЭлементовАналитик.Организации);
		
		НастройкиСтруктурыБланка.Прочитать();
		
		Для Каждого Нстр Из НастройкиСтруктурыБланка Цикл
			Нстр.ЗначениеНастройки = ЗначениеВСтрокуВнутр(СКДТекущегоПоля.НастройкиПоУмолчанию.Отбор);
			Нстр.Представлениенастройки = Строка(СКДТекущегоПоля.НастройкиПоУмолчанию.Отбор);	
		КонецЦикла;	
		
		НастройкиСтруктурыБланка.Записать(Истина);
		
	КонецЕсли;
	
	СозданныйБланкОбъект = СозданныйБланк.ПолучитьОбъект();
	СоздатьМакетСводнойТаблицы(СозданныйБланкОбъект);
		
КонецПроцедуры	 
	  
Процедура СоздатьНастройкиНовогоБланка(Бланк,ЗаполнитьСтроки = Ложь,ЗаполнитьПоказатели= Ложь,ГруппаСтрок = Неопределено) Экспорт
			     
	//Расставим измерения осей по умолчанию
	ЗаполнитьСтруктуруОсей(Бланк);	
	
	//Выберем шкалу периодов по умолчанию
	ЗаполнитьНастройкуПериодов(Бланк);
	
	Если  ЗаполнитьСтроки Тогда
		//Выберем используемые строки
		ЗаполнитьСоставСтрок(Бланк,,,ГруппаСтрок);
	КонецЕсли;
	
	Если  ЗаполнитьПоказатели Тогда
		//Выберем  используемые ресурсы
		ЗаполнитьСоставПоказателей(Бланк);
	КонецЕсли;
	
КонецПроцедуры
  
Процедура СкопироватьНастройкиБланка(БланкИсточник,Бланк,СписокПараметровКопирования) Экспорт
			     
	Для Каждого СтрНастройка Из СписокПараметровКопирования Цикл
		Если СтрНастройка.Значение = "СтрокиБланка"  Тогда
			ЗаполнитьСоставСтрок(Бланк,СтрНастройка.Пометка,БланкИсточник);				
		КонецЕсли;	
		
		Если СтрНастройка.Значение = "КолонкиБланка"  Тогда
			ЗаполнитьСоставПоказателей(Бланк,СтрНастройка.Пометка,БланкИсточник);
		КонецЕсли;	

		Если СтрНастройка.Значение = "СтруктураОсейБланка"  Тогда
			ЗаполнитьСтруктуруОсей(Бланк,СтрНастройка.Пометка,БланкИсточник);			
		КонецЕсли;	

	    Если СтрНастройка.Значение = "НастройкаШкалыПериодов"  Тогда
			ЗаполнитьНастройкуПериодов(Бланк,СтрНастройка.Пометка,БланкИсточник);			
		КонецЕсли;		
		
		Если СтрНастройка.Значение = "НастройкиАналитик"  Тогда
			ЗаполнитьНастройкуАналитик(Бланк,СтрНастройка.Пометка,БланкИсточник);			
		КонецЕсли;	
		
	КонецЦикла;
	
	Попытка
		СоздатьМакетСводнойТаблицы(Бланк.ПолучитьОбъект());
	Исключение
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Не удалось получить объект бланка: %1'"), Бланк);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,, СтатусСообщения.Важное);
	КонецПопытки;
		
КонецПроцедуры

Процедура СоздатьБланкПоВыделеннымСтрокамКолонкам(ВыделенныеСтроки,ВыделенныеКолонки,Бланк) Экспорт
	
	ЗаполнитьСтруктуруОсей(Бланк);
	
	ЗаполнитьСоставСтрокПоМассивуСтрок(Бланк,ВыделенныеСтроки);	
	
	ЗаполнитьСоставПоказателейПоМассивуКолонок(Бланк,ВыделенныеКолонки);	
		
	ЗаполнитьНастройкуПериодов(Бланк);
	
	ЗаполнитьНастройкуАналитик(Бланк);	
	
КонецПроцедуры

Процедура ЗаполнитьСоставПоказателейПоМассивуКолонок(Бланк,ВыделенныеКолонки)

		
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КолонкиОтчетов.Ссылка КАК Ссылка,
	               |	КолонкиОтчетов.Наименование КАК Наименование,
	               |	КолонкиОтчетов.Код КАК Код,
	               |	КолонкиОтчетов.Владелец КАК Владелец
	               |ИЗ
	               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	               |ГДЕ
	               |	КолонкиОтчетов.Ссылка В(&ВыделенныеКолонки)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КолонкиОтчетов.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("ВыделенныеКолонки",ВыделенныеКолонки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Инд = 0; 
	
	Пока Выборка.Следующий() Цикл
		
		НСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
		НСтр.Владелец 			= Бланк;
		НСтр.Наименование 		= Выборка.Наименование;
		НСтр.ИндексЭлемента 	= 10;
		Нстр.КолонкаОтчета 		= Выборка.Ссылка;
		Нстр.ВидОтклонения 		= "ТекущееЗначение";
		НСтр.Использовать 		= Истина;
		
		НСтр.Сценарии = "Значение источника";
		НСтр.Периоды =  "Значение источника";
		НСтр.Организации = "Значение источника";
		НСтр.Проекты = "Значение источника";
		
		НСтр.КодПоказателя = СокрЛП(Выборка.Код);
		НСтр.ПорядковыйНомер = Инд;
		
		НстрКолонка 			= НСтр.КолонкиОтчетов.Добавить();
		НстрКолонка.Колонка     = Выборка.Ссылка;
		НстрКолонка.ВидОтчета   = Выборка.Владелец;
		НстрКолонка.КодПоказателя = СокрЛП(Выборка.Код);
		
		НСтр.Записать();	
		Инд = Инд+1;
		
	КонецЦикла;
	
			
КонецПроцедуры

Процедура ЗаполнитьСоставСтрок(Бланк,Копирование=Ложь,БланкИсточник=Неопределено,ГруппаСтрок=Неопределено)

	Если Копирование Тогда
		
		Запрос = Новый Запрос;
		
		СоответствиеСтрокОтчетов = Новый Соответствие;
		
		Если ЗначениеЗаполнено(БланкИсточник) тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	СтрокиОтчетов.Ссылка КАК Ссылка,
			               |	СтрокиОтчетов.Код КАК Код
			               |ПОМЕСТИТЬ ВТСтрокиИсточник
			               |ИЗ
			               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
			               |ГДЕ
			               |	СтрокиОтчетов.Владелец = &ВладелецИсточник
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Код
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	СтрокиОтчетов.Ссылка КАК Ссылка,
			               |	СтрокиОтчетов.Код КАК Код
			               |ПОМЕСТИТЬ ВТСтроки
			               |ИЗ
			               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
			               |ГДЕ
			               |	СтрокиОтчетов.Владелец = &Владелец
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Код
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВТСтрокиИсточник.Ссылка КАК СтрокаИсточник,
			               |	ВТСтроки.Ссылка КАК Строка
			               |ИЗ
			               |	ВТСтрокиИсточник КАК ВТСтрокиИсточник
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтроки КАК ВТСтроки
			               |		ПО ВТСтрокиИсточник.Код = ВТСтроки.Код";
			
			Запрос.УстановитьПараметр("ВладелецИсточник", БланкИсточник.Владелец);
			Запрос.УстановитьПараметр("Владелец", Бланк.Владелец);
			
			ВыборкаСоответствий = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаСоответствий.Следующий() Цикл
				СоответствиеСтрокОтчетов.Вставить(ВыборкаСоответствий.СтрокаИсточник, ВыборкаСоответствий.Строка);
			КонецЦикла;
			
		КонецЕсли;
				
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
		               |	НастройкиСтруктурыБланка.ВерсияДанных КАК ВерсияДанных,
		               |	НастройкиСтруктурыБланка.ПометкаУдаления КАК ПометкаУдаления,
		               |	НастройкиСтруктурыБланка.Наименование КАК Наименование,
		               |	НастройкиСтруктурыБланка.ТипЭлемента КАК ТипЭлемента,
		               |	НастройкиСтруктурыБланка.ИндексЭлемента КАК ИндексЭлемента,
		               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета,
		               |	НастройкиСтруктурыБланка.ПоказательОтчета КАК ПоказательОтчета,
		               |	НастройкиСтруктурыБланка.Защищенный КАК Защищенный,
		               |	НастройкиСтруктурыБланка.Уровень КАК Уровень,
		               |	НастройкиСтруктурыБланка.КолонкаОтчета КАК КолонкаОтчета,
		               |	НастройкиСтруктурыБланка.ПорядковыйНомер КАК ПорядковыйНомер,
		               |	НастройкиСтруктурыБланка.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
		               |	НастройкиСтруктурыБланка.Расчетный КАК Расчетный,
		               |	НастройкиСтруктурыБланка.ВидОтклонения КАК ВидОтклонения,
		               |	НастройкиСтруктурыБланка.Сценарии КАК Сценарии,
		               |	НастройкиСтруктурыБланка.Периоды КАК Периоды,
		               |	НастройкиСтруктурыБланка.Организации КАК Организации,
		               |	НастройкиСтруктурыБланка.Проекты КАК Проекты,
		               |	НастройкиСтруктурыБланка.КодПоказателя КАК КодПоказателя,
		               |	НастройкиСтруктурыБланка.ИндексПоказателя КАК ИндексПоказателя,
		               |	НастройкиСтруктурыБланка.Использовать КАК Использовать,
		               |	НастройкиСтруктурыБланка.Предопределенный КАК Предопределенный,
		               |	НастройкиСтруктурыБланка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		               |	НастройкиСтруктурыБланка.Представление КАК Представление,
		               |	НастройкиСтруктурыБланка.глПорядковыйНомер КАК глПорядковыйНомер
		               |ИЗ
		               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Владелец = &Владелец
		               |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2";
		
		Запрос.УстановитьПараметр("Владелец",БланкИсточник);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НСтр,Выборка);
			НСтр.Владелец = Бланк;
			НСтр.Родитель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();
			Нстр.СтрокаОтчета = СоответствиеСтрокОтчетов.Получить(Нстр.СтрокаОтчета);
			НСтр.Записать();	
			
		КонецЦикла;
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	СтрокиОтчетов.Ссылка,
		|	0 КАК НПП,
		|	СтрокиОтчетов.Наименование
		|ИЗ
		|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		|ГДЕ
		|	СтрокиОтчетов.Владелец = &Владелец 
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокиОтчетов.ПорядковыйНомер ИЕРАРХИЯ";
		
		Если ЗначениеЗаполнено(ГруппаСтрок) Тогда	
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"СтрокиОтчетов.Владелец = &Владелец",
			"СтрокиОтчетов.Владелец = &Владелец И СтрокиОтчетов.Родитель В ИЕРАРХИИ(&Родитель) ИЛИ СтрокиОтчетов.Ссылка  = (&Родитель)");
			Запрос.УстановитьПараметр("Родитель",ГруппаСтрок);		
		КонецЕсли;	
		
		Запрос.УстановитьПараметр("Владелец",Бланк.Владелец);		
		Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
		ОбойтиДеревоСтрок(Бланк,Результат.Строки,0,Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());
			
	КонецЕсли;	
	
		
КонецПроцедуры

Процедура ЗаполнитьСоставСтрокПоМассивуСтрок(Бланк,ВыделенныеСтроки)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка,
	|	0 КАК НПП,
	|	СтрокиОтчетов.Наименование
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Ссылка В (&ВыделенныеСтроки) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВыделенныеСтроки",ВыделенныеСтроки);		
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);	
	ОбойтиДеревоСтрок(Бланк,Результат.Строки,0,Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());
	
	
КонецПроцедуры

Процедура ОбойтиДеревоСтрок(Бланк,Строки,НПП,Родитель)
	
	Для Каждого ТекСтрока ИЗ Строки Цикл
		
		ТекСтрока.НПП = НПП;
		
		НСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
		НСтр.Владелец = Бланк;
		НСтр.Наименование = ТекСтрока.Наименование;
		НСтр.ИндексЭлемента = 2;
		Нстр.СтрокаОтчета = ТекСтрока.Ссылка;
		НСтр.ПорядковыйНомер = НПП;
		НСтр.Родитель = Родитель;
		НСтр.Уровень = ТекСтрока.Уровень();
		НСтр.Записать();	
		
		СоздатьНастройкуПоказателя(Бланк,НСтр.Ссылка);
		
		ОбойтиДеревоСтрок(Бланк,ТекСтрока.Строки,0,НСтр.Ссылка);
		
		НПП = НПП+1;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьСоставПоказателей(Бланк,Копирование=Ложь,БланкИсточник=Неопределено)

	Если Копирование Тогда
		
		Запрос = Новый Запрос;
		
		СоответствиеКолонокОтчетов = Новый Соответствие;
		
		Если ЗначениеЗаполнено(БланкИсточник) тогда
			
			Запрос.Текст = "ВЫБРАТЬ
			               |	КолонкиОтчетов.Ссылка КАК Ссылка,
			               |	КолонкиОтчетов.Код КАК Код
			               |ПОМЕСТИТЬ ВТКолонкиИсточник
			               |ИЗ
			               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
			               |ГДЕ
			               |	КолонкиОтчетов.Владелец = &ВладелецИсточник
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Код
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ
			               |	КолонкиОтчетов.Ссылка КАК Ссылка,
			               |	КолонкиОтчетов.Код КАК Код
			               |ПОМЕСТИТЬ ВТКолонки
			               |ИЗ
			               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
			               |ГДЕ
			               |	КолонкиОтчетов.Владелец = &Владелец
			               |
			               |ИНДЕКСИРОВАТЬ ПО
			               |	Код
			               |;
			               |
			               |////////////////////////////////////////////////////////////////////////////////
			               |ВЫБРАТЬ РАЗЛИЧНЫЕ
			               |	ВТКолонкиИсточник.Ссылка КАК КолонкаИсточник,
			               |	ВТКолонки.Ссылка КАК Колонка
			               |ИЗ
			               |	ВТКолонкиИсточник КАК ВТКолонкиИсточник
			               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТКолонки КАК ВТКолонки
			               |		ПО ВТКолонкиИсточник.Код = ВТКолонки.Код";
			
			Запрос.УстановитьПараметр("ВладелецИсточник", БланкИсточник.Владелец);
			Запрос.УстановитьПараметр("Владелец", Бланк.Владелец);
			
			ВыборкаСоответствий = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаСоответствий.Следующий() Цикл
				СоответствиеКолонокОтчетов.Вставить(ВыборкаСоответствий.КолонкаИсточник, ВыборкаСоответствий.Колонка);
			КонецЦикла;
			
		КонецЕсли;
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
		               |	НастройкиСтруктурыБланка.ВерсияДанных КАК ВерсияДанных,
		               |	НастройкиСтруктурыБланка.ПометкаУдаления КАК ПометкаУдаления,
		               |	НастройкиСтруктурыБланка.Наименование КАК Наименование,
		               |	НастройкиСтруктурыБланка.ТипЭлемента КАК ТипЭлемента,
		               |	НастройкиСтруктурыБланка.ИндексЭлемента КАК ИндексЭлемента,
		               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета,
		               |	НастройкиСтруктурыБланка.ПоказательОтчета КАК ПоказательОтчета,
		               |	НастройкиСтруктурыБланка.Защищенный КАК Защищенный,
		               |	НастройкиСтруктурыБланка.Уровень КАК Уровень,
		               |	НастройкиСтруктурыБланка.КолонкаОтчета КАК КолонкаОтчета,
		               |	НастройкиСтруктурыБланка.ПорядковыйНомер КАК ПорядковыйНомер,
		               |	НастройкиСтруктурыБланка.ЭтоЭлементГруппа КАК ЭтоЭлементГруппа,
		               |	НастройкиСтруктурыБланка.Расчетный КАК Расчетный,
		               |	НастройкиСтруктурыБланка.ВидОтклонения КАК ВидОтклонения,
		               |	НастройкиСтруктурыБланка.Сценарии КАК Сценарии,
		               |	НастройкиСтруктурыБланка.Периоды КАК Периоды,
		               |	НастройкиСтруктурыБланка.Организации КАК Организации,
		               |	НастройкиСтруктурыБланка.Проекты КАК Проекты,
		               |	НастройкиСтруктурыБланка.КодПоказателя КАК КодПоказателя,
		               |	НастройкиСтруктурыБланка.ИндексПоказателя КАК ИндексПоказателя,
		               |	НастройкиСтруктурыБланка.Использовать КАК Использовать,
		               |	НастройкиСтруктурыБланка.Предопределенный КАК Предопределенный,
		               |	НастройкиСтруктурыБланка.ИмяПредопределенныхДанных КАК ИмяПредопределенныхДанных,
		               |	НастройкиСтруктурыБланка.Представление КАК Представление,
		               |	НастройкиСтруктурыБланка.глПорядковыйНомер КАК глПорядковыйНомер
		               |ИЗ
		               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Владелец = &Владелец
		               |	И НастройкиСтруктурыБланка.ИндексЭлемента = 10";
		
		Запрос.УстановитьПараметр("Владелец",БланкИсточник);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(НСтр,Выборка);
			Для Каждого СтрКолонка Из Выборка.Ссылка.КолонкиОтчетов Цикл
				НстрТчКолонки =  НСтр.КолонкиОтчетов.Добавить();
				ЗаполнитьЗначенияСвойств(НстрТчКолонки,СтрКолонка);
				НстрТчКолонки.Колонка = СоответствиеКолонокОтчетов.Получить(НстрТчКолонки.Колонка);
			КонецЦикла;
			
			НСтр.Владелец = Бланк;
			НСтр.Родитель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();
			НСтр.Записать();	
			
		КонецЦикла;
		
		
	Иначе	
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	КолонкиОтчетов.Ссылка,
		               |	КолонкиОтчетов.Наименование,
		               |	КолонкиОтчетов.Код
		               |ИЗ
		               |	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
		               |ГДЕ
		               |	КолонкиОтчетов.Владелец = &Владелец
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	КолонкиОтчетов.ПорядковыйНомер";
		
		Запрос.УстановитьПараметр("Владелец",Бланк.Владелец);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Инд = 0; 
		
		Пока Выборка.Следующий() Цикл
			
			НСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
			НСтр.Владелец = Бланк;
			НСтр.Наименование = Выборка.Наименование;
			НСтр.ИндексЭлемента = 10;
			Нстр.КолонкаОтчета = Выборка.Ссылка;
			Нстр.ВидОтклонения = "ТекущееЗначение";
			НСтр.Сценарии = "Значение источника";
			НСтр.Периоды = "Значение источника";
			НСтр.Организации = "Значение источника";
			НСтр.Проекты = "Значение источника";
			
			НСтр.КодПоказателя = СокрЛП(Выборка.Код);
			НСтр.ПорядковыйНомер = Инд;
			НСтр.Записать();	
			
			Инд = Инд+1;
			
		КонецЦикла;
				
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьСтруктуруОсей(Бланк,Копирование=Ложь,БланкИсточник=Неопределено)

	Если Копирование Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ось КАК Ось,
		               |	НастройкиСтруктурыБланка.Код КАК Код,
		               |	НастройкиСтруктурыБланка.Наименование КАК Наименование,
		               |	НастройкиСтруктурыБланка.ТипСтрока КАК ТипСтрока,
		               |	НастройкиСтруктурыБланка.ИндексКартинки КАК ИндексКартинки,
		               |	НастройкиСтруктурыБланка.НПП КАК НПП,
		               |	НастройкиСтруктурыБланка.ТипСубконто КАК ТипСубконто,
		               |	НастройкиСтруктурыБланка.Редактируется КАК Редактируется,
		               |	НастройкиСтруктурыБланка.Представление КАК Представление,
		               |	НастройкиСтруктурыБланка.Сортировка КАК Сортировка,
		               |	НастройкиСтруктурыБланка.ГлобальнаяАналитика КАК ГлобальнаяАналитика
		               |ИЗ
		               |	РегистрСведений.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Бланк = &Бланк
		               |ИТОГИ
		               |	МАКСИМУМ(Код),
		               |	МАКСИМУМ(Наименование),
		               |	МАКСИМУМ(ТипСтрока),
		               |	МАКСИМУМ(ИндексКартинки),
		               |	МАКСИМУМ(НПП),
		               |	МАКСИМУМ(ТипСубконто),
		               |	МАКСИМУМ(Редактируется),
		               |	МАКСИМУМ(Представление),
		               |	МАКСИМУМ(Сортировка),
		               |	МАКСИМУМ(ГлобальнаяАналитика)
		               |ПО
		               |	Ось";
		
		Запрос.УстановитьПараметр("Бланк",БланкИсточник);
		Результат = Запрос.Выполнить();
		ВыборкаОси = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОси.Следующий() Цикл
			Выборка = ВыборкаОси.Выбрать();
			НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
			НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Бланк);
			НастройкиСтруктурыБланка.Отбор.Ось.Установить(ВыборкаОси.Ось);
			Пока Выборка.Следующий() Цикл
				нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
				ЗаполнитьЗначенияСвойств(нНастройкиСтруктурыБланка,Выборка);
				нНастройкиСтруктурыБланка.Бланк = Бланк;	
			КонецЦикла;
			НастройкиСтруктурыБланка.Записать(Истина);	
		КонецЦикла;
		
	Иначе	
		
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Бланк);
		НастройкиСтруктурыБланка.Отбор.Ось.Установить(Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка);
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка;
		нНастройкиСтруктурыБланка.Наименование = "Периоды";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.Периоды";
		нНастройкиСтруктурыБланка.ИндексКартинки = 0;
		нНастройкиСтруктурыБланка.НПП = 2;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Периоды";
		нНастройкиСтруктурыБланка.ГлобальнаяАналитика = Истина;
        нНастройкиСтруктурыБланка.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Периоды;
		
		
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка;
		нНастройкиСтруктурыБланка.Наименование = "Показатели";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.ПоказателиОтчетов";
		нНастройкиСтруктурыБланка.ИндексКартинки = 2;
		нНастройкиСтруктурыБланка.НПП = 1;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Показатели_Колонки";
		НастройкиСтруктурыБланка.Записать(Истина);
		
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Бланк);
		НастройкиСтруктурыБланка.Отбор.Ось.Установить(Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка);
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка;
		нНастройкиСтруктурыБланка.Наименование = "Строки";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.СтрокиОтчетов";
		нНастройкиСтруктурыБланка.ИндексКартинки = 5;
		нНастройкиСтруктурыБланка.НПП = 1;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Показатели";
		НастройкиСтруктурыБланка.Записать(Истина);
		
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Бланк);
		НастройкиСтруктурыБланка.Отбор.Ось.Установить(Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница);
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница;
		нНастройкиСтруктурыБланка.Наименование = "Сценарии";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.Сценарии";
		нНастройкиСтруктурыБланка.ИндексКартинки = 1;
		нНастройкиСтруктурыБланка.НПП = 1;
		нНастройкиСтруктурыБланка.ГлобальнаяАналитика = Истина;
        нНастройкиСтруктурыБланка.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Сценарии;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Сценарии";
		
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница;
		нНастройкиСтруктурыБланка.Наименование = "Организации";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.Организации";
		нНастройкиСтруктурыБланка.ИндексКартинки = 1;
		нНастройкиСтруктурыБланка.НПП = 2;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Организации";
		нНастройкиСтруктурыБланка.ГлобальнаяАналитика = Истина;
        нНастройкиСтруктурыБланка.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации;
		
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница;
		нНастройкиСтруктурыБланка.Наименование = "Валюты";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.Валюты";
		нНастройкиСтруктурыБланка.ИндексКартинки = 1;
		нНастройкиСтруктурыБланка.НПП = 3;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Валюты";
		нНастройкиСтруктурыБланка.ГлобальнаяАналитика = Истина;
        нНастройкиСтруктурыБланка.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Валюты;
		
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Бланк;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница;
		нНастройкиСтруктурыБланка.Наименование = "Проекты";
		нНастройкиСтруктурыБланка.ТипСтрока = "СправочникСсылка.Проекты";
		нНастройкиСтруктурыБланка.ИндексКартинки = 1;
		нНастройкиСтруктурыБланка.НПП = 4;
		нНастройкиСтруктурыБланка.Код = "Фильтр_Проекты";
		нНастройкиСтруктурыБланка.ГлобальнаяАналитика = Истина;
        нНастройкиСтруктурыБланка.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Проекты;
		
		НастройкиСтруктурыБланка.Записать(Истина);
		
	КонецЕсли;	
		
	ЗаполнитьСоставАналитикОсей(Бланк,Копирование,БланкИсточник);
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуПериодов(Бланк,Копирование=Ложь,БланкИсточник=Неопределено)

	Если Копирование Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиМасштабаВремени.Бланк,
		               |	НастройкиМасштабаВремени.ВыбранныйПериод,
		               |	НастройкиМасштабаВремени.ДетализацияДни,
		               |	НастройкиМасштабаВремени.ДетализацияМесяцы,
		               |	НастройкиМасштабаВремени.ДетализацияКварталы,
		               |	НастройкиМасштабаВремени.ДетализацияПолугодия,
		               |	НастройкиМасштабаВремени.ДетализацияГоды,
		               |	НастройкиМасштабаВремени.НаследоватьНастройкиРегламента,
		               |	НастройкиМасштабаВремени.Масштаб,
		               |	НастройкиМасштабаВремени.ПредставлениеПериода,
		               |	НастройкиМасштабаВремени.КлючПериода,
		               |	НастройкиМасштабаВремени.Сдвиг
		               |ИЗ
		               |	РегистрСведений.НастройкиМасштабаВремени КАК НастройкиМасштабаВремени
		               |ГДЕ
		               |	НастройкиМасштабаВремени.Бланк = &Бланк";
		
		Запрос.УстановитьПараметр("Бланк",БланкИсточник);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НастройкиПериодов = РегистрыСведений.НастройкиМасштабаВремени.СоздатьНаборЗаписей();
			НастройкиПериодов.Отбор.Бланк.Установить(Бланк);
            нНастройкиПериодов = НастройкиПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(нНастройкиПериодов,Выборка);
			нНастройкиПериодов.Бланк = Бланк;
			НастройкиПериодов.Записать();	
			
		КонецЦикла;
		
		
	Иначе	
		
		Периодичность =  Бланк.Периодичность;
		Параметры_ = Новый Структура();
		Параметры_.Вставить("Периодичность",Периодичность);
		Параметры_.Вставить("ИтогиПоКварталам",?(Периодичность = Перечисления.Периодичность.Квартал,Истина, Ложь));
		Параметры_.Вставить("ИтогиПоГодам",?(Периодичность = Перечисления.Периодичность.Год,Истина, Ложь));
		Параметры_.Вставить("ИтогиПоМесяцам",?(Периодичность = Перечисления.Периодичность.Месяц,Истина, Ложь));
		Параметры_.Вставить("ИтогиПоПолугодиям",?(Периодичность = Перечисления.Периодичность.Полугодие,Истина, Ложь));
		Параметры_.Вставить("ИтогиПоНеделям",?(Периодичность = Перечисления.Периодичность.Неделя,Истина, Ложь));
		Параметры_.Вставить("Сдвиг",0);

		
		КлючШкалы = Справочники.КлючиШкалы.ПроверитьКлючПериода(Параметры_);	
		
		НаборЗаписейШкалыВремени = РегистрыСведений.НастройкиМасштабаВремени.СоздатьНаборЗаписей();
		НаборЗаписейШкалыВремени.Отбор.Бланк.Установить(Бланк);
		нНаборЗаписейШкалыВремени = НаборЗаписейШкалыВремени.Добавить();
		нНаборЗаписейШкалыВремени.Бланк = Бланк;		
		нНаборЗаписейШкалыВремени.Масштаб =Периодичность;
		нНаборЗаписейШкалыВремени.ПредставлениеПериода ="Краткое";
		нНаборЗаписейШкалыВремени.КлючПериода =КлючШкалы;
		нНаборЗаписейШкалыВремени.Сдвиг =0;
		
		
		нНаборЗаписейШкалыВремени.ДетализацияМесяцы = Параметры_.ИтогиПоМесяцам;
		нНаборЗаписейШкалыВремени.ДетализацияКварталы = Параметры_.ИтогиПоКварталам;
		нНаборЗаписейШкалыВремени.ДетализацияПолугодия = Параметры_.ИтогиПоПолугодиям;
		нНаборЗаписейШкалыВремени.ДетализацияГоды = Параметры_.ИтогиПоГодам;
				
		НаборЗаписейШкалыВремени.Записать(Истина);
		
	КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура ЗаполнитьНастройкуАналитик(Бланк,Копирование=Ложь,БланкИсточник=Неопределено)

	Если Копирование Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиПараметровАналитик.Бланк,
		               |	НастройкиПараметровАналитик.Аналитика,
		               |	НастройкиПараметровАналитик.Редактируется,
		               |	НастройкиПараметровАналитик.Представление,
		               |	НастройкиПараметровАналитик.Сортировка
		               |ИЗ
		               |	РегистрСведений.НастройкиПараметровАналитик КАК НастройкиПараметровАналитик
		               |ГДЕ
		               |	НастройкиПараметровАналитик.Бланк = &Бланк";
		
		Запрос.УстановитьПараметр("Бланк",БланкИсточник);
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НастройкиПараметровАналитик = РегистрыСведений.НастройкиПараметровАналитик.СоздатьНаборЗаписей();
			НастройкиПараметровАналитик.Отбор.Бланк.Установить(Бланк);
            нНастройкиПараметровАналитик = НастройкиПараметровАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(нНастройкиПараметровАналитик,Выборка);
			нНастройкиПараметровАналитик.Бланк = Бланк;
			НастройкиПараметровАналитик.Записать();	
			
		КонецЦикла;
				
	КонецЕсли;	
	
	
	
КонецПроцедуры

Процедура ЗаполнитьСоставАналитикОсей(Бланк,Копирование=Ложь,БланкИсточник=Неопределено)

	Если Копирование Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	СтрокиОтчетов.Ссылка КАК Ссылка,
		               |	СтрокиОтчетов.Код КАК Код
		               |ПОМЕСТИТЬ ВТСтрокиИсточник
		               |ИЗ
		               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		               |ГДЕ
		               |	СтрокиОтчетов.Владелец = &ВладелецИсточник
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Код
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	СтрокиОтчетов.Ссылка КАК Ссылка,
		               |	СтрокиОтчетов.Код КАК Код
		               |ПОМЕСТИТЬ ВТСтроки
		               |ИЗ
		               |	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
		               |ГДЕ
		               |	СтрокиОтчетов.Владелец = &Владелец
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	Код
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	ВТСтрокиИсточник.Ссылка КАК СтрокаИсточник,
		               |	ВТСтроки.Ссылка КАК Строка
		               |ПОМЕСТИТЬ ВТСоответствиеСтрок
		               |ИЗ
		               |	ВТСтрокиИсточник КАК ВТСтрокиИсточник
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтроки КАК ВТСтроки
		               |		ПО ВТСтрокиИсточник.Код = ВТСтроки.Код
		               |
		               |ИНДЕКСИРОВАТЬ ПО
		               |	СтрокаИсточник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТСтрокиИсточник
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НастройкиСоставаАналитикиБланков.Назначение КАК Назначение,
		               |	НастройкиСоставаАналитикиБланков.НомерНастройки КАК НомерНастройки,
		               |	ВЫРАЗИТЬ(НастройкиСоставаАналитикиБланков.ЗначениеНастройки КАК СТРОКА(1024)) КАК ЗначениеНастройки,
		               |	НастройкиСоставаАналитикиБланков.ПредставлениеНастройки КАК ПредставлениеНастройки,
		               |	ВЫБОР
		               |		КОГДА СоответствиеСтрок.Строка ЕСТЬ NULL
		               |			ТОГДА НастройкиСоставаАналитикиБланков.Показатель.СтрокаОтчета
		               |		ИНАЧЕ СоответствиеСтрок.Строка
		               |	КОНЕЦ КАК ПоказательСтрокаОтчета
		               |ПОМЕСТИТЬ втНастройкиИсточника
		               |ИЗ
		               |	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
		               |		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеСтрок КАК СоответствиеСтрок
		               |		ПО НастройкиСоставаАналитикиБланков.Показатель.СтрокаОтчета = СоответствиеСтрок.СтрокаИсточник
		               |ГДЕ
		               |	НастройкиСоставаАналитикиБланков.БланкОтчета = &БланкОтчета
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |УНИЧТОЖИТЬ ВТСоответствиеСтрок
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
		               |	НастройкиСтруктурыБланка.СтрокаОтчета КАК СтрокаОтчета,
		               |	НастройкиСтруктурыБланка.ИндексЭлемента КАК ИндексЭлемента
		               |ПОМЕСТИТЬ втСтрокиТекущего
		               |ИЗ
		               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.ИндексЭлемента = 2
		               |	И НастройкиСтруктурыБланка.Владелец = &Бланк
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втНастройкиИсточника.Назначение КАК Назначение,
		               |	втНастройкиИсточника.НомерНастройки КАК НомерНастройки,
		               |	втНастройкиИсточника.ЗначениеНастройки КАК ЗначениеНастройки,
		               |	втНастройкиИсточника.ПредставлениеНастройки КАК ПредставлениеНастройки,
		               |	втСтрокиТекущего.Ссылка КАК Показатель
		               |ИЗ
		               |	втНастройкиИсточника КАК втНастройкиИсточника
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтрокиТекущего КАК втСтрокиТекущего
		               |		ПО втНастройкиИсточника.ПоказательСтрокаОтчета = втСтрокиТекущего.СтрокаОтчета";
		
		Запрос.УстановитьПараметр("ВладелецИсточник", БланкИсточник.Владелец);
		Запрос.УстановитьПараметр("Владелец", Бланк.Владелец);
		Запрос.УстановитьПараметр("БланкОтчета",БланкИсточник);
		Запрос.УстановитьПараметр("Бланк",Бланк);

		Результат = Запрос.Выполнить();
		ВыборкаОси = Результат.Выбрать();
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСоставаАналитикиБланков.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.БланкОтчета.Установить(Бланк);
		Пока ВыборкаОси.Следующий() Цикл	
			Ннастройка = НастройкиСтруктурыБланка.Добавить();
			ЗаполнитьЗначенияСвойств(Ннастройка,ВыборкаОси);
			Ннастройка.БланкОтчета = Бланк;		
		КонецЦикла;
		НастройкиСтруктурыБланка.Записать(Истина);
	Иначе	
		
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСоставаАналитикиБланков.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.БланкОтчета.Установить(Бланк);
		НастройкиСтруктурыБланка.Отбор.Показатель.Установить(Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());
		
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		
		нНастройкиСтруктурыБланка.БланкОтчета = Бланк;
		нНастройкиСтруктурыБланка.Показатель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();
		нНастройкиСтруктурыБланка.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Сценарии;
        нНастройкиСтруктурыБланка.НомерНастройки =1;
		нНастройкиСтруктурыБланка.ПредставлениеНастройки ="Все элементы";
		
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();

		нНастройкиСтруктурыБланка.БланкОтчета = Бланк;
		нНастройкиСтруктурыБланка.Показатель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();
		нНастройкиСтруктурыБланка.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Проекты;
        нНастройкиСтруктурыБланка.НомерНастройки =1;
		нНастройкиСтруктурыБланка.ПредставлениеНастройки ="Все элементы";
				
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();

		нНастройкиСтруктурыБланка.БланкОтчета = Бланк;
		нНастройкиСтруктурыБланка.Показатель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();
		нНастройкиСтруктурыБланка.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Валюты;
        нНастройкиСтруктурыБланка.НомерНастройки =1;
		нНастройкиСтруктурыБланка.ПредставлениеНастройки ="Все элементы";

		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();

		нНастройкиСтруктурыБланка.БланкОтчета = Бланк;
		нНастройкиСтруктурыБланка.Показатель = Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();
		нНастройкиСтруктурыБланка.Назначение = Перечисления.ПредназначенияЭлементовАналитик.Организации;
        нНастройкиСтруктурыБланка.НомерНастройки =1;
		нНастройкиСтруктурыБланка.ПредставлениеНастройки ="Все элементы";

		
		НастройкиСтруктурыБланка.Записать(Истина);
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений) Экспорт
		     
	МассивСтрок = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера,Символ(13));	
	Для Каждого Стр Из МассивСтрок Цикл
		МассивЗначений =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Стр,"	");
	КонецЦикла;
		 		
КонецПроцедуры

Функция СформироватьПредставлениеОтборов(Бланк,Горизонт,ТаблицаСтраницы,СтруктураФильтров) Экспорт
	
	  ПредставлениеОтборов = СокрЛП(Строка(Бланк))+"  "+"Период:"+Горизонт+"\";
	  
	  Для Каждого СтрПоле из ТаблицаСтраницы Цикл
		  Если СтруктураФильтров.Свойство(СтрПоле.Код) Тогда
			  ПредставлениеОтборов =ПредставлениеОтборов+СтрПоле.Наименование+":"+СтруктураФильтров[СтрПоле.Код]+"\";  
		  Иначе	  
			  ПредставлениеОтборов =ПредставлениеОтборов+СтрПоле.Наименование+": <...> "+"\"; 
		  КонецЕсли;
	  КонецЦикла;
	
	  Возврат ПредставлениеОтборов;	
	  
КонецФункции

Функция ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Заголовок) Экспорт
	
	БланкиОтчетовУХ.ВернутьРисунокПустойТаблицы(ПолеТабличногоДокументаМакет, Заголовок);
		
КонецФункции	
	
Процедура ЗаполнитьНстройкиДополнительныхОтборов(ОкончательнаяСКДАдрес,НастройкиСхемыСводнойТаблицы,СТ_ДополнительныеНастройки,СтруктураТаблицИнтерфейса,СтрокаПредставленияДополнительныхОтборов="") Экспорт
	
	МассивУдаляемыхОтборов = Новый Массив;
	НовыйИсточник = Новый ИсточникДоступныхНастроекКомпоновкиДанных(ОкончательнаяСКДАдрес); 

	СТ_ДополнительныеНастройки.Инициализировать(НовыйИсточник);
	
	
	Для Каждого Строка ИЗ СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		
		Если Строка.Код = "Фильтр_Показатели_Колонки" ИЛИ Строка.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;			
		
		Если НЕ ОтборСуществует(СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы,СтрЗаменить(Строка.Код,"Фильтр_",""))= Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.
		Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных(СтрЗаменить(Строка.Код,"Фильтр_",""));
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Ложь;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
	                
    КонецЦикла;
	
	Для Каждого Колонка ИЗ СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		
		Если Колонка.Код = "Фильтр_Показатели_Колонки" ИЛИ Колонка.Код = "Фильтр_Периоды" Тогда
			 Продолжить;
		КонецЕсли;	
		
		
		Если НЕ ОтборСуществует(СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы,СтрЗаменить(Колонка.Код,"Фильтр_",""))= Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		НовыйЭлементОтбора = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.
		Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных(СтрЗаменить(Колонка.Код,"Фильтр_",""));
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Ложь;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЦикла;
	
	Для Каждого ДопПоле ИЗ СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы Цикл
		
		Если ТипЗнч(ДопПоле.Ресурс) = Тип("СправочникСсылка.КолонкиОтчетов") Тогда
			ПредставлениеРесурса = ДопПоле.ПредставлениеРесурса;
		Иначе	
			ПредставлениеРесурса = ДопПоле.ПредставлениеРесурса;
		КонецЕсли;
		
		Если НЕ ОтборСуществует(СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы,ПредставлениеРесурса)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НовыйЭлементОтбора = СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.
		Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ПолеОтбора = Новый ПолеКомпоновкиДанных(ПредставлениеРесурса);
		НовыйЭлементОтбора.ЛевоеЗначение  = ПолеОтбора;
		НовыйЭлементОтбора.Использование  = Ложь;
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		
	КонецЦикла;
	
	
	Для Каждого Строка ИЗ СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл
		Если Строка.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Показатели") Тогда
			 Продолжить;
		КонецЕсли;	
		
		Если  СтруктураТаблицИнтерфейса.ДоступныеАналитики.Найти(Строка(Строка.ЛевоеЗначение),"НазначениеАналитикиКод") = Неопределено 
			И СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы.Найти(Строка(Строка.ЛевоеЗначение),"ПредставлениеРесурса") = Неопределено Тогда
			МассивУдаляемыхОтборов.Добавить(Строка);
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого Эл ИЗ МассивУдаляемыхОтборов Цикл
		СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы.Удалить(Эл);
	КонецЦикла;	 
	
	КоличествоОтборов = 0;
	Для Каждого стОтбор ИЗ СТ_ДополнительныеНастройки.Настройки.Отбор.Элементы Цикл		
		
		НовыйЭлементОтбора =   ОтборСуществует(НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы,Строка(стОтбор.ЛевоеЗначение));	
		Если НовыйЭлементОтбора = Неопределено Тогда
			
			НовыйЭлементОтбора = НастройкиСхемыСводнойТаблицы.Настройки.Отбор.Элементы.
			Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ПолеОтбора = Новый ПолеКомпоновкиДанных(стОтбор.ЛевоеЗначение);
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,стОтбор);
		Иначе
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,стОтбор);
		КонецЕсли;
		
		Если стОтбор.Использование  Тогда			
			НайденныеСтроки=СтруктураТаблицИнтерфейса.ДоступныеАналитики.НайтиСтроки(Новый Структура("КодАналитики",Строка(стОтбор.ЛевоеЗначение)));
			Если НайденныеСтроки.Количество()=1 Тогда 
				ПредставлениеОтбора = НайденныеСтроки[0].ИмяАналитики;
			Иначе	
				ПредставлениеОтбора = ?(стОтбор.ЛевоеЗначение=Новый ПолеКомпоновкиДанных("Показатели"),"Строки",стОтбор.ЛевоеЗначение);
			КонецЕсли;		
			СтрокаПредставленияДополнительныхОтборов = СтрокаПредставленияДополнительныхОтборов+ПредставлениеОтбора+" "+стОтбор.ВидСравнения+" "+стОтбор.ПравоеЗначение+"; "+СимВолы.ПС;		
			КоличествоОтборов = КоличествоОтборов+1;
		КонецЕсли;	
		
	КонецЦикла;	
	
	Если ЗначениеЗаполнено(СтрокаПредставленияДополнительныхОтборов) Тогда	
		СтрокаПредставленияДополнительныхОтборов = СимВолы.ПС+"Отборы: "+Строка(КоличествоОтборов)+СимВолы.ПС+СтрокаПредставленияДополнительныхОтборов;	
	КонецЕсли;	
	
	
КонецПроцедуры

Функция ОтборСуществует(НастройкиОтбор,ИмяПоляОтбора)
	
	Для Каждого Стр Из НастройкиОтбор Цикл
	    Если Строка(Стр.ЛевоеЗначение) = ИмяПоляОтбора Тогда
			 Возврат Стр;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Неопределено;	
	
КонецФункции

Функция УпорядочитьПериоды(СписокПериодов) Экспорт
	
	Если СписокПериодов.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды.Ссылка В(&Ссылка)
		|	И Периоды.Периодичность = &Периодичность
		|
		|УПОРЯДОЧИТЬ ПО
		|	Периоды.ДатаНачала";
		
		Запрос.УстановитьПараметр("Ссылка",СписокПериодов);
		Запрос.УстановитьПараметр("Периодичность",СписокПериодов[0].Значение.Периодичность);
		
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Иначе
		Возврат СписокПериодов;
	КонецЕсли;
	  
КонецФункции	


//Дополнительные поля и отклонения

Процедура СоздатьОписаниеРасчетногоПоля(СтруктураТаблицИнтерфейса,ДопПоле,ВыбранныеРесурсы,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах)  
	
	Если ДопПоле.ВидОтклонения = "АбсОтклонение" Тогда
		
		РесурсПоле = "БАЗА_АБС_"+ДопПоле.КодПоказателя;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = "Значение_База_"+ДопПоле.ИндексПоказателя;
		НовоеПоле.Заголовок =ДопПоле.Заголовок;
		НовоеПоле.ПутьКДанным ="Значение_База_"+ДопПоле.ИндексПоказателя;
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,4));
		
		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=ДопПоле.Заголовок;
		НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+ДопПоле.КодПоказателя+") ТОГДА Значение  - 
		| Значение_БАЗА_"+ДопПоле.ИндексПоказателя+ " ИНАЧЕ 0 КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= РесурсПоле;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= "Параметр_Колонка"+ДопПоле.КодПоказателя;
		Нпар.Значение  	    =  ДопПоле.Колонки.ВыгрузитьЗначения();
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;     
				
		СформироватьВыражениеИтога(СтруктураТаблицИнтерфейса,СхемаСКДЭталон,ДопПоле,РесурсПоле);
	КонецЕсли;
	
	
	////////////////////////////////////////////////////////
	Если ДопПоле.ВидОтклонения = "Значение" Тогда           
		
		РесурсПоле = "БАЗА_"+ДопПоле.КодПоказателя;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = "Значение_База_"+ДопПоле.ИндексПоказателя;
		НовоеПоле.Заголовок =ДопПоле.Заголовок;
		НовоеПоле.ПутьКДанным ="Значение_База_"+ДопПоле.ИндексПоказателя;
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,4));
		
		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=ДопПоле.Заголовок;
		НовоеПолеВычисления.Выражение=" ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+ДопПоле.КодПоказателя+") ТОГДА Значение_База_"+ДопПоле.ИндексПоказателя+ " КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= РесурсПоле;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= "Параметр_Колонка"+ДопПоле.КодПоказателя;
		Нпар.Значение  	 	=  ДопПоле.Колонки.ВыгрузитьЗначения();
		Нпар.Использование 	= ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		СформироватьВыражениеИтога(СтруктураТаблицИнтерфейса,СхемаСКДЭталон,ДопПоле,РесурсПоле);
		
	КонецЕсли;
	
	Если ДопПоле.ВидОтклонения = "ОтнОтклонение" Тогда
		
		РесурсПоле = "БАЗА_ОТН_"+ДопПоле.КодПоказателя;
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = "Значение_База_"+ДопПоле.ИндексПоказателя;
		НовоеПоле.Заголовок =ДопПоле.Заголовок;
		НовоеПоле.ПутьКДанным ="Значение_База_"+ДопПоле.ИндексПоказателя;
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,4));
		
		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=ДопПоле.Заголовок;
		НовоеПолеВычисления.Выражение=" 0";
		НовоеПолеВычисления.ПутьКДанным= РесурсПоле;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= "Параметр_Колонка"+ДопПоле.КодПоказателя;
		Нпар.Значение  	    =  ДопПоле.Колонки.ВыгрузитьЗначения();
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;     
				
		СформироватьВыражениеИтогаОтносительноеОтклонение(СтруктураТаблицИнтерфейса, СхемаСКДЭталон, ДопПоле, РесурсПоле);
		
	КонецЕсли;
			
КонецПроцедуры

Процедура СоздатьОписаниеБазовогоПоля(СтруктураТаблицИнтерфейса,СтрРесурс,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон) 
	
		ВыбранныеРесурсы_Структура.Вставить(СтрРесурс.КодПоказателя);
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = СтрРесурс.КодПоказателя;
		НовоеПоле.Заголовок =СтрРесурс.КодПоказателя;
		НовоеПоле.ПутьКДанным = СтрРесурс.КодПоказателя;
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,4));
		
		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=СтрРесурс.Заголовок;
		НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+СтрРесурс.КодПоказателя+") ТОГДА  Значение Иначе NULL КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= СтрРесурс.КодПоказателя;

		
		СформироватьВыражениеИтога(СтруктураТаблицИнтерфейса,СхемаСКДЭталон,СтрРесурс);
						
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= "Параметр_Колонка"+СтрРесурс.КодПоказателя;
		Нпар.Значение   	= СтрРесурс.Колонки.ВыгрузитьЗначения();
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
						
		//Комментарий к полю 
		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=СтрРесурс.Заголовок;
		НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+СтрРесурс.КодПоказателя+") ТОГДА  Комментарий  КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= "Комментарий_"+СтрРесурс.КодПоказателя;
		
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
		ПолеИтога.Выражение="МАКСИМУМ(Комментарий_"+СтрРесурс.КодПоказателя+")";
		ПолеИтога.ПутьКДанным="Комментарий_"+СтрРесурс.КодПоказателя;

		//Условное оформление к полю
		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=СтрРесурс.Заголовок;
		НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+СтрРесурс.КодПоказателя+") ТОГДА  ИндексСостояния ИНАЧЕ 0   КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= "ИндексСостояния_"+СтрРесурс.КодПоказателя;
		
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
		ПолеИтога.Выражение="МАКСИМУМ(ИндексСостояния_"+СтрРесурс.КодПоказателя+")";
		ПолеИтога.ПутьКДанным="ИндексСостояния_"+СтрРесурс.КодПоказателя;

		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=СтрРесурс.Заголовок;
		НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+СтрРесурс.КодПоказателя+") ТОГДА  ЗначениеЗаблокировано ИНАЧЕ 0   КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= "ЗначениеЗаблокировано_"+СтрРесурс.КодПоказателя;
		
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
		ПолеИтога.Выражение="МАКСИМУМ(ЗначениеЗаблокировано_"+СтрРесурс.КодПоказателя+")";
		ПолеИтога.ПутьКДанным="ЗначениеЗаблокировано_"+СтрРесурс.КодПоказателя;

		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=СтрРесурс.Заголовок;
		НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+СтрРесурс.КодПоказателя+") ТОГДА  СпособРасчетаИтогаПоПериоду  КОНЕЦ";
		НовоеПолеВычисления.ПутьКДанным= "СпособРасчетаИтогаПоПериоду_"+СтрРесурс.КодПоказателя;

		
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
		ПолеИтога.Выражение="МАКСИМУМ(СпособРасчетаИтогаПоПериоду_"+СтрРесурс.КодПоказателя+")";
		ПолеИтога.ПутьКДанным="СпособРасчетаИтогаПоПериоду_"+СтрРесурс.КодПоказателя;                                      		
		
		
КонецПроцедуры	
	
Процедура СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах) Экспорт
		
	ВыбранныеРесурсы 	= СтруктураТаблицИнтерфейса.ДополнительныеПоля;
	ПоляСравненияСБазой = СтруктураТаблицИнтерфейса.БазаДляОтклонений;
	
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();
	СхемаСКДЭталон.ПоляИтога.Очистить();
	СхемаСКДЭталон.Параметры.Очистить();
		
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "Блокировка_Периоды";
	НовоеПоле.Заголовок = "Блокировка_Периоды";
	НовоеПоле.ПутьКДанным = "Блокировка_Периоды";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ИндексСостояния";
	НовоеПоле.Заголовок = "ИндексСостояния";
	НовоеПоле.ПутьКДанным = "ИндексСостояния";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ЗначениеЗаблокировано";
	НовоеПоле.Заголовок = "ЗначениеЗаблокировано";
	НовоеПоле.ПутьКДанным = "ЗначениеЗаблокировано";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0));
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "Значение";
	НовоеПоле.Заголовок = "Значение";
	НовоеПоле.ПутьКДанным = "Значение";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,2));
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ЗначениеНеЧисло";
	НовоеПоле.Заголовок = "ЗначениеНеЧисло";
	НовоеПоле.ПутьКДанным = "ЗначениеНеЧисло";
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ТипЗначения";
	НовоеПоле.Заголовок = "ТипЗначения";
	НовоеПоле.ПутьКДанным = "ТипЗначения";
    НовоеПоле.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов");               
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ПоказательКолонка";
	НовоеПоле.Заголовок = "ПоказательКолонка";
	НовоеПоле.ПутьКДанным = "ПоказательКолонка";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.КолонкиОтчетов");

	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ПоказательСсылка";
	НовоеПоле.Заголовок = "ПоказательСсылка";
	НовоеПоле.ПутьКДанным = "ПоказательСсылка";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов");

	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "ВидИтога";
	НовоеПоле.Заголовок = "ВидИтога";
	НовоеПоле.ПутьКДанным = "ВидИтога";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИтоговПоказателя");
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "СпособРасчетаИтогаПоПериоду";
	НовоеПоле.Заголовок = "СпособРасчетаИтогаПоПериоду";
	НовоеПоле.ПутьКДанным = "СпособРасчетаИтогаПоПериоду";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("ПеречислениеСсылка.ВидыИтоговПоказателяПоПериоду");
	
	НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = "Комментарий";
	НовоеПоле.Заголовок = "Комментарий";
	НовоеПоле.ПутьКДанным = "Комментарий";
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов("Строка");
	
	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение="Сумма(Блокировка_Периоды)";
	ПолеИтога.ПутьКДанным="Блокировка_Периоды";

	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение="Комментарий";
	ПолеИтога.ПутьКДанным="Комментарий";

	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение="СУММА(ИндексСостояния)";
	ПолеИтога.ПутьКДанным="ИндексСостояния";

	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение="СУММА(ЗначениеЗаблокировано)";
	ПолеИтога.ПутьКДанным="ЗначениеЗаблокировано";
	
	Для Каждого СтрРесурс Из ВыбранныеРесурсы Цикл
		
		Если Не СтрРесурс.Использовать Тогда
			Продолжить;
		КонецЕсли;	
		
		Если Не СтрРесурс.Расчетный Тогда
			СоздатьОписаниеБазовогоПоля(СтруктураТаблицИнтерфейса,СтрРесурс,ВыбранныеРесурсы_Структура,СхемаСКД,СхемаСКДЭталон);
		Иначе	  
			СоздатьОписаниеРасчетногоПоля(СтруктураТаблицИнтерфейса,СтрРесурс,ВыбранныеРесурсы,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах);
		КонецЕсли; 
		
	КонецЦикла;
	
	Если НЕ ПоляСравненияСБазой = НЕопределено Тогда	
		Для Каждого СтрРесурс Из ПоляСравненияСБазой Цикл
			СоздатьОписаниеРасчетногоПоля(СтруктураТаблицИнтерфейса,СтрРесурс,ВыбранныеРесурсы,СхемаСКД,СхемаСКДЭталон,ОтображатьСуммыВДопВалютах);	
		КонецЦикла;	
	КонецЕсли; 
		
	
	Для Каждого СтрокаАналитики Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		Если СтрокаАналитики.ПоддерживатьИерархию Тогда
			Если СтрокаАналитики.ТипСубконто = Перечисления.ПредназначенияЭлементовАналитик.Организации ИЛИ Метаданные.НайтиПоТипу(СтрокаАналитики.ТипСубконто.ТипЗначения.Типы()[0]).ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
				
				ПсевдонимИсточника  =  СтрЗаменить(СтрокаАналитики.Код,"Фильтр_","");
				
				НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
				НовоеПоле.Поле 			= ПсевдонимИсточника+"_ЭтоГруппа";
				НовоеПоле.Заголовок 	= ПсевдонимИсточника+"_ЭтоГруппа";
				НовоеПоле.ПутьКДанным 	= ПсевдонимИсточника+"_ЭтоГруппа";
				ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
				ПолеИтога.Выражение		= ПсевдонимИсточника+"_ЭтоГруппа";
				ПолеИтога.ПутьКДанным	= ПсевдонимИсточника+"_ЭтоГруппа";			
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;	
	
	
	Если  ОтображатьСуммыВДопВалютах Тогда
		
		НовоеПоле = СхемаСКДЭталон.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
		НовоеПоле.Поле = "ЗначениеВалюта";
		НовоеПоле.Заголовок = "ЗначениеВалюта";
		НовоеПоле.ПутьКДанным = "ЗначениеВалюта";
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15,2));
		
		Для Каждого СтрРесурс Из ВыбранныеРесурсы Цикл
			
			Если Не СтрРесурс.Использовать Тогда
				Продолжить;
			КонецЕсли;	
			Если СтрРесурс.Расчетный Тогда
				Продолжить;
			КонецЕсли;			
			Если СтрРесурс.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число И Не СтрРесурс.Показатель.НеФинансовый  Тогда				
				НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
				НовыйЗаголовок = НСтр("ru = '%КодПоказателя% (В валюте)'");
				НовыйЗаголовок = СтрЗаменить(НовыйЗаголовок, "%КодПоказателя%", Строка(СтрРесурс.КодПоказателя));
				НовоеПолеВычисления.Заголовок = НовыйЗаголовок;
				НовоеПолеВычисления.Выражение="ВЫБОР КОГДА ПоказательКолонка В (&Параметр_Колонка"+СтрРесурс.КодПоказателя+") ТОГДА  ЗначениеВалюта ИНАЧЕ 0 КОНЕЦ";
				НовоеПолеВычисления.ПутьКДанным= СтрРесурс.КодПоказателя+"_ЗначениеВалюта";
				
				ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
				ПолеИтога.Выражение="Сумма("+СтрРесурс.КодПоказателя+"_ЗначениеВалюта"+")";
				ПолеИтога.ПутьКДанным=СтрРесурс.КодПоказателя+"_ЗначениеВалюта";
			КонецЕсли;	
			
		КонецЦикла;	
	КонецЕсли;	

	
КонецПроцедуры	

Процедура ПолучитьТаблицуВыбранныхПоказателей(Бланк,АдресТаблицИнтерфейса,ТаблицыИнтерфейса=Неопределено) Экспорт
	
	Если ТаблицыИнтерфейса=Неопределено Тогда
		ТаблицыИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИСТИНА КАК Заблокирован,
	               |	НастройкиСтруктурыБланка.Использовать КАК Использовать,
	               |	НастройкиСтруктурыБланка.Расчетный КАК Расчетный,
	               |	НастройкиСтруктурыБланка.КолонкаОтчета КАК Показатель,
	               |	НастройкиСтруктурыБланка.ВидОтклонения КАК ВидОтклонения,
	               |	НастройкиСтруктурыБланка.Наименование КАК Заголовок,
	               |	НастройкиСтруктурыБланка.Сценарии КАК Сценарии,
	               |	НастройкиСтруктурыБланка.Периоды КАК Периоды,
	               |	НастройкиСтруктурыБланка.Организации КАК Организации,
	               |	НастройкиСтруктурыБланка.Проекты КАК Проекты,
	               |	НастройкиСтруктурыБланка.КодПоказателя КАК КодПоказателя,
	               |	НастройкиСтруктурыБланка.КолонкаОтчета.ТипЗначения КАК ТипЗначения,
	               |	НастройкиСтруктурыБланка.ИндексПоказателя КАК ИндексПоказателя,
	               |	НастройкиСтруктурыБланка.Составной КАК Составной,
	               |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
	               |	НастройкиСтруктурыБланка.КолонкаОтчета.Владелец КАК ВидОтчета,
	               |	НастройкиСтруктурыБланка.НарастающийИтог КАК НарастающийИтог
	               |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.Владелец = &Владелец
	               |	И НастройкиСтруктурыБланка.ИндексЭлемента = 10
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НастройкиСтруктурыБланка.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец",Бланк);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицыИнтерфейса.ДополнительныеПоля = Результат;	
		
	ТаблицыИнтерфейса.ДополнительныеПоля.Колонки.Добавить("Колонки",Новый ОписаниеТипов("СписокЗначений"));
	
	Для Каждого Стр Из ТаблицыИнтерфейса.ДополнительныеПоля Цикл
		
		Для Каждого Кол Из Стр.Ссылка.КолонкиОтчетов.Выгрузить() Цикл
			Стр.Колонки.Добавить(Кол.Колонка,Кол.КодПоказателя);
			Стр.ТипЗначения = Кол.Колонка.ТипЗначения;
		КонецЦикла;	
		
	КонецЦикла;	
	
	
КонецПроцедуры

Процедура УстановитьУОДляЯчеекСКомментариями(ВыбранныеРесурсы,НастройкиСКД) Экспорт
	
	Для Каждого СтрРесурс Из ВыбранныеРесурсы Цикл
		
		Если Не СтрРесурс.Использовать Тогда
			Продолжить;
		КонецЕсли;	
				
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьВыражениеИтога(СтруктураТаблицИнтерфейса,СхемаСКДЭталон,СтрРесурс,КодПоказателя=Неопределено)
	
	Если КодПоказателя=Неопределено Тогда	
		КодПоказателя = СтрРесурс.КодПоказателя;	
	КонецЕсли;		
	// Для показателей   - необходимо определить группировки детального и агрегированных уровней...
	СписокИспользованныхАналитик = Новый Структура;
	СтруктураТаблицИнтерфейса.Вставить("КэшАналитикПоказателейСТ", СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
	
	Для Каждого Кол Из СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки Цикл
		Если НЕ Кол.Имя = "ПоказательСтрока" Тогда  
			СписокИспользованныхАналитик.Вставить(Кол.Имя,Ложь);
		КонецЕсли;
	КонецЦикла;	
		
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		ИмяПоля = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если НЕ СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			 СписокИспользованныхАналитик.Вставить(ИмяПоля,Истина);
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		ИмяПоля = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если НЕ СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			 СписокИспользованныхАналитик.Вставить(ИмяПоля,Истина);
		КонецЕсли;
	КонецЦикла;
	
	ИспользованныеПоказателиСумма = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Сумма));

	ИспользованныеПоказателиМаксимум = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Максимум));

	ИспользованныеПоказателиМинимум = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Минимум));

	ИспользованныеПоказателиСреднее = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Среднее));

	
	ПоказателиБезИтога = Новый Массив;
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();	
		ПолеИтога.ПутьКДанным=КодПоказателя;
		
		ВыражениеДляСуммы = "ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСумма_"+КодПоказателя+") ТОГДА Сумма("+КодПоказателя+") 
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМаксимум_"+КодПоказателя+") ТОГДА Максимум("+КодПоказателя+")  
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМинимум_"+КодПоказателя+")  ТОГДА Минимум("+КодПоказателя+") 
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрБезИтога_"+КодПоказателя+") ТОГДА Минимум("+КодПоказателя+")
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСреднее_"+КодПоказателя+") ТОГДА Среднее("+КодПоказателя+")
		|КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ ";                	
		
		ИмяПоля = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если НЕ СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			СписокИспользованныхАналитик.Вставить(ИмяПоля,Истина);
		КонецЕсли;	
		
		ПолеИтога.Выражение=ВыражениеДляСуммы;
		ПолеИтога.Группировки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_","")); 
		Если Стр.ПоддерживатьИерархию Тогда
			ПолеИтога.Группировки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_","")+ " ИЕРАРХИЯ"); 
		КонецЕсли;	
		
		//Без Итога
		ИспользованныеСтрокиТекущегоУровня = СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.НайтиСтроки(СписокИспользованныхАналитик);	
		
		ПоказателиБезИтога = Новый Массив;
		Для Каждого СтрокаИтога Из ИспользованныеСтрокиТекущегоУровня Цикл
			ИспользованныеПоказателиБезИтога = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
			Новый Структура("Строка,Колонка,ВидИтога",СтрокаИтога.ПоказательСтрока,СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.НеРассчитывается));
			
			Для Каждого СтрПоказатель Из  ИспользованныеПоказателиБезИтога Цикл
				ПоказателиБезИтога.Добавить(СтрПоказатель.Строка);
			КонецЦикла;		
		КонецЦикла;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрБезИтога_"+КодПоказателя;
		Нпар.Значение   	= ПоказателиБезИтога;
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрМинимум_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиМинимум.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрМаксимум_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиМаксимум.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрСумма_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиСумма.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрСреднее_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиСреднее.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;

		
	КонецЦикла;
		
	Если  НЕ СтруктураТаблицИнтерфейса.НастройкаШкалыВремени.Колонки.Найти("НарастающийИтог")=Неопределено 
		И СтруктураТаблицИнтерфейса.НастройкаШкалыВремени.Количество()=1			
		И СтруктураТаблицИнтерфейса.НастройкаШкалыВремени[0].НарастающийИтог Тогда
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
		ПолеИтога.Выражение="ВычислитьВыражение(""Сумма("+КодПоказателя+")"",""Периоды"",, ""Первая"", ""Текущая"")";
		ПолеИтога.ПутьКДанным=КодПоказателя;
		ПолеИтога.Группировки.Добавить("Периоды"); 		                  	
	КонецЕсли;
	
	ВыражениеДляСуммыОбщийИтог = "ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСумма_"+КодПоказателя+") ТОГДА Сумма("+КодПоказателя+") 
	|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМаксимум_"+КодПоказателя+") ТОГДА Максимум("+КодПоказателя+")  
	|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМинимум_"+КодПоказателя+")  ТОГДА Минимум("+КодПоказателя+") 
	|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСреднее_"+КодПоказателя+")  ТОГДА Среднее("+КодПоказателя+")
	|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрБезИтога_"+КодПоказателя+") ТОГДА 0
	|КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ";  
	
	ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();
	ПолеИтога.Выражение=ВыражениеДляСуммыОбщийИтог;
	ПолеИтога.ПутьКДанным=КодПоказателя;	
	
	
КонецПроцедуры

Процедура СформироватьВыражениеИтогаОтносительноеОтклонение(СтруктураТаблицИнтерфейса,СхемаСКДЭталон,СтрРесурс,КодПоказателя=Неопределено)
	
	Если КодПоказателя=Неопределено Тогда	
		КодПоказателя = СтрРесурс.КодПоказателя;	
	КонецЕсли;		
	// Для показателей   - необходимо определить группировки детального и агрегированных уровней...
	СписокИспользованныхАналитик = Новый Структура;
	СтруктураТаблицИнтерфейса.Вставить("КэшАналитикПоказателейСТ", СтруктураТаблицИнтерфейса.КэшАналитикПоказателей);
	
	Для Каждого Кол Из СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки Цикл
		Если НЕ Кол.Имя = "ПоказательСтрока" Тогда  
			СписокИспользованныхАналитик.Вставить(Кол.Имя,Ложь);
		КонецЕсли;
	КонецЦикла;	
		
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		ИмяПоля = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если НЕ СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			 СписокИспользованныхАналитик.Вставить(ИмяПоля,Истина);
		КонецЕсли;	
	КонецЦикла;	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		ИмяПоля = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если НЕ СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			 СписокИспользованныхАналитик.Вставить(ИмяПоля,Истина);
		КонецЕсли;
	КонецЦикла;
	
	ИспользованныеПоказателиСумма = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Сумма));

	ИспользованныеПоказателиМаксимум = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Максимум));

	ИспользованныеПоказателиМинимум = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Минимум));

	ИспользованныеПоказателиСреднее = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
	Новый Структура("Колонка,ВидИтога",СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.Среднее));

	
	ПоказателиБезИтога = Новый Массив;
	
	Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
				
		ПолеИтога=СхемаСКДЭталон.ПоляИтога.Добавить();	
		ПолеИтога.ПутьКДанным=КодПоказателя;
				
		Значение = "ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСумма_"+КодПоказателя+") ТОГДА Сумма(Значение) 
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМаксимум_"+КодПоказателя+") ТОГДА Максимум(Значение)  
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМинимум_"+КодПоказателя+")  ТОГДА Минимум(Значение) 
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрБезИтога_"+КодПоказателя+") ТОГДА Минимум(Значение)
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСреднее_"+КодПоказателя+") ТОГДА Среднее(Значение)
		|КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ ";
				
		БазовоеЗначение = "Сумма(Значение_База_" + СтрРесурс.ИндексПоказателя + ")";
		
		Отклонение = "ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСумма_"+КодПоказателя+") ТОГДА Сумма(Значение - Значение_База_" + СтрРесурс.ИндексПоказателя + ") 
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМаксимум_"+КодПоказателя+") ТОГДА Максимум(Значение - Значение_База_" + СтрРесурс.ИндексПоказателя + ")  
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрМинимум_"+КодПоказателя+")  ТОГДА Минимум(Значение - Значение_База_" + СтрРесурс.ИндексПоказателя + ") 
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрБезИтога_"+КодПоказателя+") ТОГДА Минимум(Значение - Значение_База_" + СтрРесурс.ИндексПоказателя + ")
		|ИНАЧЕ ВЫБОР КОГДА ПоказателиСтрокаОтчета В (&"+Стр.Код+"_ГрСреднее_"+КодПоказателя+") ТОГДА Среднее(Значение - Значение_База_" + СтрРесурс.ИндексПоказателя + ")
		|КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ ";
		
		ВыражениеДляСуммы = "ВЫБОР 
		|	КОГДА (" + БазовоеЗначение + " = 0) И (" + Значение + " = 0) ТОГДА 0
		|	КОГДА (" + БазовоеЗначение + " = 0) И (" + Значение + " <> 0) ТОГДА 100
		|	ИНАЧЕ " + Отклонение + " / " + БазовоеЗначение + " * 100
		|КОНЕЦ";
		
		ИмяПоля = СтрЗаменить(Стр.Код,"Фильтр_","");
		Если НЕ СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.Колонки.Найти(ИмяПоля) = Неопределено Тогда
			СписокИспользованныхАналитик.Вставить(ИмяПоля,Истина);
		КонецЕсли;	
		
		ПолеИтога.Выражение=ВыражениеДляСуммы;
		ПолеИтога.Группировки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_","")); 
		Если Стр.ПоддерживатьИерархию Тогда
			ПолеИтога.Группировки.Добавить(СтрЗаменить(Стр.Код,"Фильтр_","")+ " ИЕРАРХИЯ"); 
		КонецЕсли;	
		
		//Без Итога
		ИспользованныеСтрокиТекущегоУровня = СтруктураТаблицИнтерфейса.КэшАналитикПоказателейСТ.НайтиСтроки(СписокИспользованныхАналитик);	
		
		ПоказателиБезИтога = Новый Массив;
		Для Каждого СтрокаИтога Из ИспользованныеСтрокиТекущегоУровня Цикл
			ИспользованныеПоказателиБезИтога = СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели.Скопировать(
			Новый Структура("Строка,Колонка,ВидИтога",СтрокаИтога.ПоказательСтрока,СтрРесурс.Колонки.ВыгрузитьЗначения()[0],Перечисления.ВидыИтоговПоказателя.НеРассчитывается));
			
			Для Каждого СтрПоказатель Из  ИспользованныеПоказателиБезИтога Цикл
				ПоказателиБезИтога.Добавить(СтрПоказатель.Строка);
			КонецЦикла;		
		КонецЦикла;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрБезИтога_"+КодПоказателя;
		Нпар.Значение   	= ПоказателиБезИтога;
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрМинимум_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиМинимум.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрМаксимум_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиМаксимум.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрСумма_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиСумма.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
		
		Нпар 				= СхемаСКДЭталон.Параметры.Добавить();
		Нпар.Имя    		= Стр.Код+"_ГрСреднее_"+КодПоказателя;
		Нпар.Значение   	= ИспользованныеПоказателиСреднее.ВыгрузитьКолонку("Строка");
		Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;

	КонецЦикла;
		
КонецПроцедуры

Процедура РассчитатьДДСПоУсловиямОплаты(тОбъект) Экспорт
		
	ЗапосПоказатели  =  Новый Запрос;
	ЗапосПоказатели.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиРасчетаСтатейДС КАК НастройкиРасчетаСтатейДС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО НастройкиРасчетаСтатейДС.СтатьяБДР = ПоказателиОтчетов.СтатьяДоходовИРасходов
	|ГДЕ
	|	НастройкиРасчетаСтатейДС.Сценарий = &Сценарий
	|	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
	
	ЗапосПоказатели.УстановитьПараметр("Сценарий",тОбъект.Сценарий);
	Показатели = ЗапосПоказатели.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Если Показатели.Количество()=0 Тогда
		
		Возврат;
		
	КонецЕсли;
			
	СтрокаРаскрытийАналитик = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтрокаРаскрытийАналитик = СтрокаРаскрытийАналитик+"
		|тмПоказателиРаскрытия.Аналитика"+Инд+" КАК Аналитика"+Инд+",";
	КонецЦикла;	
	
	ЗапросДанные = Новый Запрос;
	ЗапросДанные.Текст = "ВЫБРАТЬ
	                     |	тмПоказателиРаскрытия.ПоказательОтчета  КАК Показатель,
	                     |	тмПоказателиРаскрытия.ПериодОтчета КАК ПериодОтчета,
	                     |	тмПоказателиРаскрытия.Сценарий КАК Сценарий,
	                     |	тмПоказателиРаскрытия.Организация КАК Организация,
	                     |	тмПоказателиРаскрытия.Проект КАК Проект,
	                     |	тмПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,"+СтрокаРаскрытийАналитик+"
	                     |	тмПоказателиРаскрытия.ЗначениеВалюта КАК ЗначениеВалюта,
	                     |	тмПоказателиРаскрытия.Значение КАК Значение
	                     |ПОМЕСТИТЬ втЗначения
	                     |ИЗ
	                     |	&ТЗданные КАК тмПоказателиРаскрытия
	                     |;
	                     |
	                     |////////////////////////////////////////////////////////////////////////////////
	                     |ВЫБРАТЬ
	                     |	втЗначения.Аналитика1 КАК Аналитика1,
	                     |	втЗначения.Аналитика2 КАК Аналитика2,
	                     |	втЗначения.Аналитика3 КАК Аналитика3,
	                     |	втЗначения.АналитикаВалюта КАК АналитикаВалюта,
	                     |	втЗначения.Организация КАК Организация,
	                     |	втЗначения.Сценарий КАК Сценарий,
	                     |	втЗначения.ПериодОтчета КАК Период,
	                     |	втЗначения.Проект КАК Проект,
	                     |	втЗначения.Показатель КАК ПоказательОтчета,
	                     |	ВЫРАЗИТЬ(втЗначения.Показатель КАК Справочник.ПоказателиОтчетов).СтатьяДоходовИРасходов КАК СтатьяДоходовИРасходов,
	                     |	втЗначения.Значение КАК Значение,
	                     |	ВЫРАЗИТЬ(втЗначения.ПериодОтчета КАК Справочник.Периоды).ДатаНачала КАК ДатаНачала,
	                     |	ВЫРАЗИТЬ(втЗначения.Показатель КАК Справочник.ПоказателиОтчетов).СтатьяДоходовИРасходов.РасчитыватьДДСПоАналитике1 КАК РасчитыватьДДСПоАналитике1,
	                     |	ВЫРАЗИТЬ(втЗначения.Показатель КАК Справочник.ПоказателиОтчетов).СтатьяДоходовИРасходов.РасчитыватьДДСПоАналитике2 КАК РасчитыватьДДСПоАналитике2,
	                     |	ВЫРАЗИТЬ(втЗначения.Показатель КАК Справочник.ПоказателиОтчетов).СтатьяДоходовИРасходов.РасчитыватьДДСПоАналитике3 КАК РасчитыватьДДСПоАналитике3
	                     |ИЗ
	                     |	втЗначения КАК втЗначения";
	
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ПоказательОтчета",Показатели);
	СтруктураПараметров.Вставить("Сценарий",тОбъект.Сценарий);
	СтруктураПараметров.Вставить("Проект",тОбъект.Проект);
    СтруктураПараметров.Вставить("Организация",тОбъект.Организация);
    СтруктураПараметров.Вставить("ПериодОтчета",тОбъект.ПериодОтчета);
    СтруктураПараметров.Вставить("Валюта",тОбъект.ОсновнаяВалюта);
		
	РаскрываемыеАналитики = Новый Структура;
	Для  Инд =1  По ПараметрыСеанса.ЧислоДопАналитик Цикл
		 РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;
	РаскрываемыеАналитики.Вставить("Валюта");
	РаскрываемыеАналитики.Вставить("АналитикаВалюта");

	ТЗданные = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики);

	ЗапросДанные.УстановитьПараметр("ТЗданные",ТЗданные);
	РезультатДанные = ЗапросДанные.Выполнить().Выгрузить();
	
	ЗапросНастройки = Новый Запрос;
	ЗапросНастройки.Текст = "ВЫБРАТЬ
	                        |	НастройкиРасчетаСтатейДС.СтатьяБДР,
	                        |	НастройкиРасчетаСтатейДС.Организация,
	                        |	НастройкиРасчетаСтатейДС.Аналитика1,
	                        |	НастройкиРасчетаСтатейДС.Аналитика2,
	                        |	НастройкиРасчетаСтатейДС.Аналитика3,
	                        |	НастройкиРасчетаСтатейДС.СтатьяДДС,
	                        |	НастройкиРасчетаСтатейДС.Сценарий,
	                        |	НастройкиРасчетаСтатейДС.УсловиеОплаты,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДР,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.Владелец КАК ВидОтчета,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия.ВидАналитики1 КАК ВидАналитики1,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия.ВидАналитики2 КАК ВидАналитики2,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия.ВидАналитики3 КАК ВидАналитики3,
	                        |	НастройкиРасчетаСтатейДС.ПоказательБДДС.ГруппаРаскрытия КАК ГруппаРаскрытия
	                        |ИЗ
	                        |	РегистрСведений.НастройкиРасчетаСтатейДС КАК НастройкиРасчетаСтатейДС
	                        |ГДЕ
	                        |	НастройкиРасчетаСтатейДС.Сценарий = &Сценарий";
							   
	ЗапросНастройки.УстановитьПараметр("Сценарий",тОбъект.Сценарий);
    РезультатНастройки = ЗапросНастройки.Выполнить().Выгрузить();
	
	РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВалютаОтображения = Константы.ВалютаУправленческогоУчета.Получить();
	РасчетПоказателейОбъект.РассчитыватьЗависимые = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	

	ПредварительнаяТаблица = РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Выгрузить();
	
	
	Для Каждого Стр Из  РезультатДанные Цикл
		
		СтруктураПоиска = Новый Структура;
		
		СтруктураПоиска.Вставить("СтатьяБДР",Стр.СтатьяДоходовИРасходов);
		СтруктураПоиска.Вставить("ПоказательБДР",Стр.ПоказательОтчета);

		Если Стр.РасчитыватьДДСПоАналитике1 Тогда
			СтруктураПоиска.Вставить("Аналитика1",Стр.Аналитика1);
		Иначе	
			СтруктураПоиска.Вставить("Аналитика1",Неопределено);
		КонецЕсли;
		
		Если Стр.РасчитыватьДДСПоАналитике2 Тогда
			СтруктураПоиска.Вставить("Аналитика2",Стр.Аналитика2);
		Иначе	
			СтруктураПоиска.Вставить("Аналитика2",Неопределено);
		КонецЕсли;

		Если Стр.РасчитыватьДДСПоАналитике3 Тогда
			СтруктураПоиска.Вставить("Аналитика3",Стр.Аналитика3);
		Иначе	
			СтруктураПоиска.Вставить("Аналитика3",Неопределено);
		КонецЕсли;

		Настройкирасчета = РезультатНастройки.НайтиСтроки(СтруктураПоиска);
		
		Если Настройкирасчета.Количество()=1 Тогда
			
			График =  РасчетГрафиковОперацийУХ.РассчитатьГрафикПоУсловиюОплаты(Настройкирасчета[0].УсловиеОплаты,Стр.ДатаНачала,Стр.Значение);
			
			Для Каждого стрГрафика Из График Цикл
				
				Если стрГрафика.СуммаОплата = 0 Тогда
					 Продолжить;
				КонецЕсли;	
				
				ПериодДляОплаты = ПолучитьПериодПоДате(НачалоМесяца(стрГрафика.Дата),Стр.Период.Периодичность);

				Если ПериодДляОплаты.Количество() >0 Тогда
					
					РасчетПоказателейОбъект.ВидОтчета =Настройкирасчета[0].ВидОтчета;
					Нстр = ПредварительнаяТаблица.Добавить();
					
					Если  НЕ ЗначениеЗаполнено(Настройкирасчета[0].ГруппаРаскрытия) Тогда
						
						Нстр.Значение = стрГрафика.СуммаОплата;
						Нстр.Сценарий = тОбъект.Сценарий;
						Нстр.Организация = Стр.Организация;
						Нстр.ПериодОтчета = ПериодДляОплаты[0].Ссылка;
						Нстр.Проект = Стр.Проект;
						Нстр.ПоказательОтчета = Настройкирасчета[0].ПоказательБДДС;
						Нстр.СинтетическоеЗначение = Истина;
						
					Иначе
						
							Нстр.Значение = стрГрафика.СуммаОплата;
							Нстр.Сценарий = тОбъект.Сценарий;
							Нстр.Организация = Стр.Организация;
							Нстр.ПериодОтчета = ПериодДляОплаты[0].Ссылка;
							Нстр.Проект = Стр.Проект;
							Нстр.ПоказательОтчета = Настройкирасчета[0].ПоказательБДДС;
							Нстр.СинтетическоеЗначение = Ложь;
							                                                   
							
							Если Не Настройкирасчета[0].ВидАналитики1.ТипЗначения = Неопределено Тогда
								Если ТипЗнч(Стр.Аналитика1) = ТипЗнч(Настройкирасчета[0].ВидАналитики1.ТипЗначения.ПривестиЗначение()) Тогда
									Нстр.Аналитика1 = Стр.Аналитика1;	
								ИначеЕсли ТипЗнч(Стр.Аналитика2) = ТипЗнч(Настройкирасчета[0].ВидАналитики1.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика1 = Стр.Аналитика2;	
								ИначеЕсли ТипЗнч(Стр.Аналитика3) = ТипЗнч(Настройкирасчета[0].ВидАналитики1.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика1 = Стр.Аналитика3;	
								КонецЕсли;	
							КонецЕсли;
							
							Если Не Настройкирасчета[0].ВидАналитики2.ТипЗначения = Неопределено Тогда
								Если ТипЗнч(Стр.Аналитика1)		 = ТипЗнч(Настройкирасчета[0].ВидАналитики2.ТипЗначения.ПривестиЗначение()) Тогда
									Нстр.Аналитика2 = Стр.Аналитика1;	
								ИначеЕсли ТипЗнч(Стр.Аналитика2) = ТипЗнч(Настройкирасчета[0].ВидАналитики2.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика2 = Стр.Аналитика2;	
								ИначеЕсли ТипЗнч(Стр.Аналитика3) = ТипЗнч(Настройкирасчета[0].ВидАналитики2.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика2 = Стр.Аналитика3;	
								КонецЕсли;	
							КонецЕсли;
							
							Если Не Настройкирасчета[0].ВидАналитики3.ТипЗначения = Неопределено Тогда
								
								Если ТипЗнч(Стр.Аналитика1) = ТипЗнч(Настройкирасчета[0].ВидАналитики3.ТипЗначения.ПривестиЗначение()) Тогда
									Нстр.Аналитика3 = Стр.Аналитика1;	
								ИначеЕсли ТипЗнч(Стр.Аналитика2) = ТипЗнч(Настройкирасчета[0].ВидАналитики3.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика3 = Стр.Аналитика2;	
								ИначеЕсли ТипЗнч(Стр.Аналитика3) = ТипЗнч(Настройкирасчета[0].ВидАналитики3.ТипЗначения.ПривестиЗначение())  Тогда
									Нстр.Аналитика3 = Стр.Аналитика3;	
								КонецЕсли;	
							КонецЕсли;		
						КонецЕсли;	 	
					КонецЕсли;	 		
			КонецЦикла;	 			
		КонецЕсли;	
			
	КонецЦикла;	
	
	СтрокаСвертки = "";
	Для  Инд =1  По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтрокаСвертки = СтрокаСвертки + "Аналитика"+Инд+",";
	КонецЦикла;	
	
	ПредварительнаяТаблица.Свернуть(СтрокаСвертки+"Организация,Сценарий,Проект,ПериодОтчета,ПоказательОтчета,АналитикаВалюта","Значение");
	
	Для Каждого Стр Из ПредварительнаяТаблица Цикл
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("ПоказательОтчета",стр.ПоказательОтчета);
		СтруктураПараметров.Вставить("Сценарий",тОбъект.Сценарий);
		СтруктураПараметров.Вставить("Проект",тОбъект.Проект);
		СтруктураПараметров.Вставить("Организация",тОбъект.Организация);
		СтруктураПараметров.Вставить("ПериодОтчета",Стр.ПериодОтчета);
		СтруктураПараметров.Вставить("Валюта",тОбъект.ОсновнаяВалюта);
		
		Для  Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если ЗначениеЗаполнено(Стр["Аналитика"+Инд]) Тогда
				СтруктураПараметров.Вставить("Аналитика"+Инд,Стр["Аналитика"+Инд]);
			КонецЕсли;	
		КонецЦикла;	
				
		РаскрываемыеАналитики = Новый Структура;
				
		ТЗданные = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики);
		
		Если ТЗданные.Количество() = 1 Тогда 
			 Стр.Значение = Стр.Значение+ТЗданные[0].Значение;
		КонецЕсли;	
		
	КонецЦикла;	
	
	РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ПредварительнаяТаблица);
	РасчетПоказателейОбъект.Регистратор 		= тОбъект.Регистратор;
	РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
КонецПроцедуры

Функция ПолучитьПериодПоДате(ДатаНачала,Периодичность)
	
	ЗапросПериоды = Новый Запрос;
	ЗапросПериоды.Текст = "ВЫБРАТЬ
	                      |	Периоды.Ссылка,
	                      |	Периоды.ДатаНачала
	                      |ИЗ
	                      |	Справочник.Периоды КАК Периоды
	                      |ГДЕ
	                      |	Периоды.ПометкаУдаления = ЛОЖЬ
	                      |	И Периоды.ДатаНачала = &ДатаНачала
	                      |	И Периоды.Произвольный = ЛОЖЬ
	                      |	И Периоды.Периодичность = &Периодичность";

	ЗапросПериоды.УстановитьПараметр("ДатаНачала",ДатаНачала);
	ЗапросПериоды.УстановитьПараметр("Периодичность",Периодичность);

	Результат = ЗапросПериоды.Выполнить().Выгрузить();
	
	Возврат Результат
	
КонецФункции



#КонецОбласти


#Область РаботаСОтборамиАналитик 

Процедура ЗаполнитьДоступныеАналитики(ДоступныеАналитики,ТаблицаДоступныеПоля,ВидОтчета,Бланк,КэшАналитикПоказателей) Экспорт
	
	
	ДоступныеАналитики.Очистить();
	
	Для Каждого Аналитика ИЗ ТаблицаДоступныеПоля Цикл
		
		Если Аналитика.ИндексКартинки = 1 ИЛИ Аналитика.ИндексКартинки = 4 Тогда
			нСтрока =  ДоступныеАналитики.Добавить();
			нСтрока.ИмяАналитики = Аналитика.Наименование;
			нСтрока.КодАналитики = СтрЗаменить(Аналитика.Код,"Фильтр_","");
			нСтрока.ГлобальнаяАналитика = Аналитика.ГлобальнаяАналитика;
			нСтрока.НазначениеАналитики =  Аналитика.ТипСубконто;
			нСтрока.Редактируется =  Аналитика.Редактируется;
			нСтрока.ПоддерживатьИерархию =  Аналитика.ПоддерживатьИерархию;
			нСтрока.ИндексКартинки =  Аналитика.ИндексКартинки;
            нСтрока.ЭтоЭтапПроекта =  Аналитика.ЭтоЭтапПроекта;

			Если нСтрока.ИмяАналитики = НСтр("ru = 'Дополнительные валюты'") Тогда	
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.АналитикаВалюта;	
				нСтрока.НазначениеАналитикиКод =  "ДопВалюты";
				нСтрока.ТипСубконто = Справочники.Валюты.ПустаяСсылка();	
				нСтрока.Показывать = Истина;
				Продолжить;
			КонецЕсли;
			
			
			Если Аналитика.ИндексКартинки = 1  И НЕ ТипЗнч(Аналитика.ТипСубконто)=Тип("ПеречислениеСсылка.ПредназначенияЭлементовАналитик") Тогда
				нСтрока.НазначениеАналитики =  Аналитика.ТипСубконто;
				нСтрока.НазначениеАналитикиКод =  СокрЛП(Аналитика.ТипСубконто.Код);	
				
			ИначеЕсли нСтрока.КодАналитики = "Сценарии" Тогда	
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Сценарии;	
				нСтрока.НазначениеАналитикиКод =  нСтрока.КодАналитики;
				нСтрока.ТипСубконто = Справочники.Сценарии.ПустаяСсылка();
			ИначеЕсли нСтрока.КодАналитики = "Валюты" Тогда	
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Валюты;	
				нСтрока.НазначениеАналитикиКод =  нСтрока.КодАналитики;
				нСтрока.ТипСубконто = Справочники.Валюты.ПустаяСсылка();	
			ИначеЕсли нСтрока.КодАналитики = "Организации" Тогда
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Организации;
				нСтрока.НазначениеАналитикиКод =  нСтрока.КодАналитики;
				нСтрока.ТипСубконто = Справочники.Организации.ПустаяСсылка();
			ИначеЕсли нСтрока.КодАналитики = "Проекты" Тогда	
				нСтрока.НазначениеАналитики = Перечисления.ПредназначенияЭлементовАналитик.Проекты;	
				нСтрока.НазначениеАналитикиКод =  нСтрока.КодАналитики;
				нСтрока.ТипСубконто = Справочники.Проекты.ПустаяСсылка();
			Иначе 		
				нСтрока.НазначениеАналитики =      Аналитика.ТипСубконто;
				нСтрока.НазначениеАналитикиКод =  СокрЛП(Аналитика.ТипСубконто.Код);
				нСтрока.ТипСубконто = Аналитика.ТипСубконто.ТипЗначения.ПривестиЗначение();
				
			КонецЕсли;
			
			нСтрока.Показывать = Истина;	
		КонецЕсли;
						
	КонецЦикла;	
		
	ИндексПредставления = 1;
	Для Каждого нСтрока Из ДоступныеАналитики Цикл
		нСтрока.ПредставлениеАналитики = "Представление"+ИндексПредставления;
		ИндексПредставления = ИндексПредставления+1;
	КонецЦикла;
	  
  КонецПроцедуры

Функция СоздатьТекстЗапросаНастроекСоставаАналитик(ДоступныеАналитики,Бланк) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстПолей = "";
	ТекстПолейСостав = "";
	
	
	НомерАналитики = 1;
	Для Каждого Аналитика из ДоступныеАналитики Цикл
		ТекстПолей = ТекстПолей+" МАКСИМУМ(ВЫБОР КОГДА НастройкиАналитик.Назначение = &Назначение"+НомерАналитики+"
		| ТОГДА  НастройкиАналитик.ПредставлениеНастройки КОНЕЦ)  КАК Представление"+НомерАналитики+",";	
		Запрос.УстановитьПараметр("Назначение"+НомерАналитики,Аналитика.НазначениеАналитики);			
		НомерАналитики = НомерАналитики+1;	
	КонецЦикла;
	
	ВсеЭлементыТекст = "Все элементы";
	СоставАналитикиТекст = "Состав аналитики";
	
	Запрос.Текст ="ВЫБРАТЬ
	              |	&ПустойПоказатель КАК Ссылка,
	              |	""ОБЩИЕ АНАЛИТИКИ"" КАК ПредставлениеПоказателя
	              |ПОМЕСТИТЬ ОбщиеАналитики
	              |;
	              |
	              |///////////////////////////////////////////////////////////////////////////////	              |
	              |ВЫБРАТЬ
	              |	ВЫБОР КОГДА НастройкиСоставаАналитикиБланков.ПредставлениеНастройки="""" ТОГДА """ + ВсеЭлементыТекст + """ ИНАЧЕ  НастройкиСоставаАналитикиБланков.ПредставлениеНастройки  КОНЕЦ  КАК ПредставлениеНастройки,
				  |	НастройкиСоставаАналитикиБланков.ЗначениеНастройки,
				  |	НастройкиСоставаАналитикиБланков.НомерНастройки,
	              |	НастройкиСоставаАналитикиБланков.Назначение,
	              |	НастройкиСтруктурыБланка.СтрокаОтчета.Код КАК ПредставлениеПоказателяКод,
				  |	НастройкиСтруктурыБланка.СтрокаОтчета.Наименование КАК ПредставлениеПоказателя,
				  |	2 КАК Приоритет,
	              |	НастройкиСтруктурыБланка.Ссылка
				  |ПОМЕСТИТЬ НастройкиАналитик
				  |ИЗ
	              |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	              |		ПО НастройкиСтруктурыБланка.Ссылка = НастройкиСоставаАналитикиБланков.Показатель
	              |			И (НастройкиСтруктурыБланка.Владелец = &БланкОтчета)
	              |ГДЕ
	              |	НастройкиСтруктурыБланка.Владелец = &БланкОтчета
	              |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
				  |	ВЫРАЗИТЬ(ВЫБОР
	              |			КОГДА НастройкиАналитик.НомерНастройки ЕСТЬ NULL 
	              |				ТОГДА ""<...>""
	              |			ИНАЧЕ """ + СоставАналитикиТекст + """
				  |		КОНЕЦ КАК СТРОКА(150)) КАК Заголовок,
				  |"+ТекстПолей+"
	              |	МАКСИМУМ(НастройкиАналитик.Назначение) КАК Назначение,
	              |	МАКСИМУМ(НастройкиАналитик.ПредставлениеНастройки) КАК ПредставлениеНастройки,
				  |	НастройкиАналитик.НомерНастройки КАК НомерНастройки,
	              |	МАКСИМУМ(НастройкиАналитик.Приоритет) КАК Приоритет,
	              |	0 КАК ИндексКартинки,
	              |	НастройкиАналитик.Ссылка,
	              |	НастройкиАналитик.Ссылка.ПоказательОтчета КАК ПоказательОтчета,
				  |	НастройкиАналитик.Ссылка.СтрокаОтчета КАК СтрокаОтчета,
				  | ЛОЖЬ КАК АналитикаИзменена,
				  | МАКСИМУМ(НастройкиАналитик.ПредставлениеПоказателя) КАК ПредставлениеПоказателя
				  |ИЗ
	              |	НастройкиАналитик КАК НастройкиАналитик
	              |
	              |СГРУППИРОВАТЬ ПО
	              |	НастройкиАналитик.ПредставлениеПоказателяКод,
	              |	НастройкиАналитик.НомерНастройки,
	              |	НастройкиАналитик.Ссылка
	              |
	              |УПОРЯДОЧИТЬ ПО
	              |	Приоритет,
	              |	ПредставлениеПоказателя
	              |ИТОГИ
	              |	МАКСИМУМ(Назначение),
	              |	МАКСИМУМ(Приоритет),
				  |	МАКСИМУМ(Ссылка),
				  |	МАКСИМУМ(ПоказательОтчета),
				  |	МАКСИМУМ(СтрокаОтчета),
				  |	МАКСИМУМ(ПредставлениеПоказателя)
				  |ПО
	              |	ПредставлениеПоказателяКод";
	
		
    Запрос.УстановитьПараметр("БланкОтчета",Бланк);
	Запрос.УстановитьПараметр("ПустойПоказатель",Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());

	Возврат  Запрос;
		
КонецФункции

#КонецОбласти


#Область СозданиеКомандИЭлементовАналитическойПанели

Процедура СоздатьКонтекстноеМенюСводнойТаблицы(ЭтаФорма,Родитель,Режим=1) Экспорт
	
	
	ИмяКоманды = "ПоказатьКоманднуюПанель";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),Родитель.КонтекстноеМеню.ПодчиненныеЭлементы[0]);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   = ИмяКоманды;
	КомандаСтатистика.Заголовок  = НСтр("ru = 'Показать командную панель'");
	КонМенюСтатистика.ИмяКоманды = Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка = БиблиотекаКартинок.АдминистрированиеСервиса;
	
	ИмяКоманды = "ОткрытьФакторныйАнализ";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),Родитель.КонтекстноеМеню.ПодчиненныеЭлементы[0]);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   = ИмяКоманды;
	КомандаСтатистика.Заголовок  = НСтр("ru = 'Открыть факторный анализ'");
	КонМенюСтатистика.ИмяКоманды = Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка = БиблиотекаКартинок.Иерархия;
	
	//Создание общих команд панели сводной таблицы
	ЭлементРодитель = Родитель.КонтекстноеМеню.ПодчиненныеЭлементы[0];
	
	ИмяКоманды = "ОткрытьСтруктуру";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Открыть структуру'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	
	ИмяКоманды = "УстановитьФильтры";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Установить фильтры'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.НастроитьСписок;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	ИмяКоманды = "ПерейтиКСоставуСтрок";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Перейти к составу строк'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.Реквизит;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "ЗаполнитьВлияющиеПоказатели";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Заполнить факторы по целевым показателям'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ПереместитьВлевоВверх;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
		
	ИмяКоманды = "ДобавитьАналитику";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Добавить аналитику'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ЗначокПлюс;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "УдалитьАналитику";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Удалить аналитику'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ЗначокМинус;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "СкопироватьАналитику";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Скопировать аналитику'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.СкопироватьЭлементСписка;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	ИмяКоманды = "КопироватьПоСтроке";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Копировать по строке'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ПереместитьВправо;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "КопироватьПоКолонке";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Копировать по колонке'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ПереместитьВниз;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "ИзменитьПоказатели";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель.КонтекстноеМеню.Имя + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Изменить показатели'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель.КонтекстноеМеню.Имя+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.Процент;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	УстановитьРежимМенюСводнойТаблицы(Родитель,Режим);
  	
КонецПроцедуры	

Процедура СоздатьКомандыСводнойТаблицы(ЭтаФорма) Экспорт
	
	Родитель = "стКоманды";
		
	//Создание общих команд панели сводной таблицы
	ЭлементРодитель = ЭтаФорма.Элементы.ГруппаКомандыСводныхТаблиц;
	
	ИмяКоманды = "ОткрытьСтруктуру";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Открыть структуру'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ВнешнийИсточникДанныхКуб;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	
	ИмяКоманды = "УстановитьФильтры";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Установить фильтры'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.НастроитьСписок;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	ИмяКоманды = "ПерейтиКСоставуСтрок";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Перейти к составу строк'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.Реквизит;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "ЗаполнитьВлияющиеПоказатели";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Заполнить факторы по целевым показателям'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ПереместитьВлевоВверх;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
	
	//Создание команд редактирования данных сводной таблицы	
	
	ИмяКоманды = "ДобавитьАналитику";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Добавить аналитику'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ЗначокПлюс;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "УдалитьАналитику";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Удалить аналитику'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ЗначокМинус;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "СкопироватьАналитику";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Скопировать аналитику'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.СкопироватьЭлементСписка;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "КопироватьПоСтроке";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Копировать по строке'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ПереместитьВправо;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "КопироватьПоКолонке";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Копировать по колонке'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.ПереместитьВниз;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;

	ИмяКоманды = "ИзменитьПоказатели";
	КонМенюСтатистика = ЭтаФорма.Элементы.Добавить(Родитель + "_"+ИмяКоманды,Тип("КнопкаФормы"),ЭлементРодитель);        
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(Родитель+"Команды_"+ИмяКоманды);
	КомандаСтатистика.Действие   		= ИмяКоманды;
	КомандаСтатистика.Заголовок 		= НСтр("ru = 'Изменить показатели'");
	КонМенюСтатистика.ИмяКоманды 		= Родитель+"Команды_"+ИмяКоманды;
	КонМенюСтатистика.Картинка 			= БиблиотекаКартинок.Процент;
    КонМенюСтатистика.Отображение 		= ОтображениеКнопки.Картинка;
	КонМенюСтатистика.ОтображениеФигуры = ОтображениеФигурыКнопки.ПриАктивности;
  	
КонецПроцедуры	

Процедура УстановитьРежимМенюСводнойТаблицы(Родитель,Режим) Экспорт
		
	Для Каждого Эл ИЗ Родитель.КонтекстноеМеню.ПодчиненныеЭлементы Цикл
		Для Каждого Эл_1 Из Эл.ПодчиненныеЭлементы Цикл
			Если Режим = 1 Тогда	
				Эл_1.Доступность = Истина;
			Иначе
				Эл_1.Доступность = Ложь;	
			КонецЕсли;	
			Если Найти(Эл_1.Имя,"ОткрытьДополнительныеНастройки")>0 Тогда
				Эл_1.Доступность = Истина;
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

	
КонецПроцедуры	

#КонецОбласти

 
Процедура ПрименитьИзменения(Параметры, АдресХранилища, АдресХранилищаДополнительный) Экспорт
	
	Если Параметры.Свойство("РежимЭкземпляра") Тогда
		ПрименитьИзмененияЭкземпляр(Параметры, АдресХранилища, АдресХранилищаДополнительный)
	Иначе	
		ПрименитьИзмененияСводнаяТаблица(Параметры, АдресХранилища, АдресХранилищаДополнительный)
	КонецЕсли;	
	
	КонецПроцедуры

Процедура ПрименитьИзмененияЭкземпляр(Параметры, АдресХранилища, АдресХранилищаДополнительный)
	
	Бланк = Параметры.Бланк;

	//Числовые и нечисловые показатели пишутся разными способами.
	//Для записи числовых достаточно передать измененный лог с аналитиками.
	//Для записи нечисловых нужно передавать полный срез по ключевым версиям

	Если  НЕ Параметры.ЧерновойРежим  Тогда  //Чистовая запись
		
		РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		
		ЗаполнитьЗначенияСвойств(РасчетПоказателейОбъект,Параметры);
		
		РасчетПоказателейОбъект.ВидОтчета 				= Бланк.Владелец;
		РасчетПоказателейОбъект.ВалютаОтображения 		= Параметры.Валюта;
		РасчетПоказателейОбъект.РассчитыватьЗависимые 	= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
		РасчетПоказателейОбъект.ТрассировкаРасчета 		= Параметры.РежимТрассировки;
		РасчетПоказателейОбъект.ЧистоваяЗаписьДанных    = Истина;
		
		ОчисткаДокумента = Ложь;
		Если Параметры.Свойство("ОчисткаДокумента") Тогда
			ОчисткаДокумента = Параметры.ОчисткаДокумента;
		КонецЕсли;	
		
		//Пишем числовые
		ТаблицаИзмененныхПоказателей 		= ПолучитьЛогПоЧерновымЗаписям(Параметры,"Число");
		Если Не ТаблицаИзмененныхПоказателей = Неопределено Тогда						
			РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТаблицаИзмененныхПоказателей);											
		КонецЕсли;	
		
		//добавляем  нечисловые, если есть
		Параметры.Вставить("РасчетПоказателейОбъект",РасчетПоказателейОбъект);
		ТаблицаИзмененныхПоказателейНечисловые 	= ПолучитьЛогПоЧерновымЗаписям(Параметры,"НеЧисло");
		
		ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Выгрузить());
		
		РасчетПоказателейОбъект.ИзменениеСостояний = Ложь;
		РасчетПоказателейОбъект.ОчисткаЗначенийПоказателей = ОчисткаДокумента;
		
		Если Параметры.Свойство("Регистратор") Тогда
			РасчетПоказателейОбъект.Регистратор = Параметры.Регистратор;
		КонецЕсли;	
		
		РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
		Если  Параметры.РежимТрассировки Тогда
			Параметры.ТаблицаИсходныхПоказателей = РасчетПоказателейОбъект.ТаблицаИсходныхПоказателей.Выгрузить();
			Параметры.ТаблицаТрассировкиРасчета  = РасчетПоказателейОбъект.ТаблицаТрассировкиРасчета.Выгрузить();
		КонецЕсли;
		
		Параметры.Вставить("МассивПересчитанныхПоказателей",РасчетПоказателейОбъект.МассивПересчитанныхПоказателей);
		
		
	Иначе // Режим черновой записи	
		ТаблицаИзмененныхПоказателей = ПолучитьИзВременногоХранилища(Параметры.логИзмененныхДанныхАдрес);
		
		РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		
		ЗаполнитьЗначенияСвойств(РасчетПоказателейОбъект,Параметры);
		
		РасчетПоказателейОбъект.ВидОтчета 				= Бланк.Владелец;
		РасчетПоказателейОбъект.ВалютаОтображения 		= Параметры.Валюта;
		РасчетПоказателейОбъект.РассчитыватьЗависимые 	= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
		РасчетПоказателейОбъект.ТрассировкаРасчета 		= Параметры.РежимТрассировки;
		
		ОчисткаДокумента = Ложь;
		Если Параметры.Свойство("ОчисткаДокумента") Тогда
			ОчисткаДокумента = Параметры.ОчисткаДокумента;
		КонецЕсли;	
		
		РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТаблицаИзмененныхПоказателей);
		
		ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,ТаблицаИзмененныхПоказателей.Скопировать());
		
		РасчетПоказателейОбъект.ИзменениеСостояний = Ложь;
		РасчетПоказателейОбъект.ОчисткаЗначенийПоказателей = ОчисткаДокумента;
		
		Если Параметры.Свойство("Регистратор") Тогда
			РасчетПоказателейОбъект.Регистратор = Параметры.Регистратор;
		КонецЕсли;	
		
		РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
		Если  Параметры.РежимТрассировки Тогда
			Параметры.ТаблицаИсходныхПоказателей = РасчетПоказателейОбъект.ТаблицаИсходныхПоказателей.Выгрузить();
			Параметры.ТаблицаТрассировкиРасчета  = РасчетПоказателейОбъект.ТаблицаТрассировкиРасчета.Выгрузить();
		КонецЕсли;
		
		Параметры.Вставить("МассивПересчитанныхПоказателей",РасчетПоказателейОбъект.МассивПересчитанныхПоказателей);
		
		ТаблицаИзмененныхПоказателей.Очистить();
		
	КонецЕсли;
		
	//Пишем комментарии, если есть...	
	Если Параметры.Свойство("логИзмененныхКомментариевАдрес") Тогда
		
		ТаблицаИзмененныхПоказателей = ПолучитьИзВременногоХранилища(Параметры.логИзмененныхКомментариевАдрес);

		Если ТаблицаИзмененныхПоказателей.Количество() = 0 Тогда
			 Возврат;
		КонецЕсли;	
		
		РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		
		ЗаполнитьЗначенияСвойств(РасчетПоказателейОбъект,Параметры);
		
		РасчетПоказателейОбъект.ЧистоваяЗаписьДанных    = НЕ Параметры.ЧерновойРежим;
		РасчетПоказателейОбъект.ВидОтчета = Бланк.Владелец;
		РасчетПоказателейОбъект.ВалютаОтображения = Параметры.Валюта;
		РасчетПоказателейОбъект.ЗаписьКомментариев = Истина;
		РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТаблицаИзмененныхПоказателей);
		РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
		ТаблицаИзмененныхПоказателей.Очистить();
		
	КонецЕсли;	
		
КонецПроцедуры	

Процедура ПрименитьИзмененияСводнаяТаблица(Параметры, АдресХранилища, АдресХранилищаДополнительный)
	
	ТаблицаИзмененныхПоказателей = ПолучитьИзВременногоХранилища(Параметры.логИзмененныхДанныхАдрес);
	
	Бланк = Параметры.Бланк;
	
	РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	
	ЗаполнитьЗначенияСвойств(РасчетПоказателейОбъект,Параметры);
	
	РасчетПоказателейОбъект.ВидОтчета 				= Бланк.Владелец;
	РасчетПоказателейОбъект.ВалютаОтображения 		= Параметры.Валюта;
	РасчетПоказателейОбъект.РассчитыватьЗависимые 	= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
	РасчетПоказателейОбъект.ТрассировкаРасчета 		= Параметры.РежимТрассировки;
		
	ОчисткаДокумента = Ложь;
	Если Параметры.Свойство("ОчисткаДокумента") Тогда
		ОчисткаДокумента = Параметры.ОчисткаДокумента;
	КонецЕсли;	
	
	СворачиватьЛог = Истина;
	Если Параметры.Свойство("СворачиватьЛог") Тогда
		СворачиватьЛог = Параметры.СворачиватьЛог;
	КонецЕсли; 
	
	Если СворачиватьЛог Тогда
		
		СтрокаСвертки = "";
		Для Каждого КолТч Из Метаданные.Обработки.ЗаписьПоказателяСРасчетомЗависимых.ТабличныеЧасти.ТаблицаИзмененныхПоказателей.Реквизиты Цикл
			Если КолТч.Имя = "Значение" Тогда
				Продолжить;
			КонецЕсли;		
			СтрокаСвертки = СтрокаСвертки+КолТч.Имя+",";
		КонецЦикла;	
		
		СтрокаСвертки = Лев(СтрокаСвертки,СтрДлина(СтрокаСвертки)-1);	
				
		ТаблицаИзмененныхПоказателей = СвернутьТаблицуЗначений(ТаблицаИзмененныхПоказателей,СтрокаСвертки,"Значение");
		
	КонецЕсли;
	
	//Пробуем открыть период автоматически, если есть нужные параметры у сценария
	ТаблицаИзмененныхПериодов = СвернутьТаблицуЗначений(ТаблицаИзмененныхПоказателей,"ПериодОтчета,Сценарий","Значение");
	
	Для Каждого СтрПериод Из ТаблицаИзмененныхПериодов Цикл
		РегламентыПериоды = СтрПериод.Сценарий.ПериодыРегламентов.Выгрузить();
		Регламенты = РегламентыПериоды.Найти(СтрПериод.ПериодОтчета.Периодичность,"Периодичность");
		
		ТекУоп = Справочники.ВерсииРегламентовПодготовкиОтчетности.ОткрытьУопПоСценарию(СтрПериод.Сценарий,СтрПериод.ПериодОтчета.ДатаНачала,СтрПериод.ПериодОтчета.Периодичность);
		
	КонецЦикла;	
	
	РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТаблицаИзмененныхПоказателей);
	
	ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,ТаблицаИзмененныхПоказателей.Скопировать());
	
	РасчетПоказателейОбъект.ИзменениеСостояний = Ложь;
	РасчетПоказателейОбъект.ОчисткаЗначенийПоказателей = ОчисткаДокумента;	
	
	Если СворачиватьЛог Тогда
		ТаблицаИзмененныхПоказателей.Колонки.Добавить("ID",Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	ТаблицаИзмененныхПоказателей.Очистить();
	
	Если Параметры.Свойство("Регистратор") Тогда
		РасчетПоказателейОбъект.Регистратор = Параметры.Регистратор;
	КонецЕсли;	

	РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
	
	Если  Параметры.РежимТрассировки Тогда
		Параметры.ТаблицаИсходныхПоказателей = РасчетПоказателейОбъект.ТаблицаИсходныхПоказателей.Выгрузить();
		Параметры.ТаблицаТрассировкиРасчета  = РасчетПоказателейОбъект.ТаблицаТрассировкиРасчета.Выгрузить();
	КонецЕсли;
		
	Если Параметры.Свойство("логИзмененныхКомментариевАдрес") Тогда
		
		ТаблицаИзмененныхПоказателей = ПолучитьИзВременногоХранилища(Параметры.логИзмененныхКомментариевАдрес);

		Если ТаблицаИзмененныхПоказателей.Количество() = 0 Тогда
			 Возврат;
		КонецЕсли;	
		
		РасчетПоказателейОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		
		ЗаполнитьЗначенияСвойств(РасчетПоказателейОбъект,Параметры);
		
		РасчетПоказателейОбъект.ВидОтчета = Бланк.Владелец;
		РасчетПоказателейОбъект.ВалютаОтображения = Параметры.Валюта;
		РасчетПоказателейОбъект.ЗаписьКомментариев = Истина;
		РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТаблицаИзмененныхПоказателей);
		РасчетПоказателейОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
		ТаблицаИзмененныхПоказателей.Очистить();
		
	КонецЕсли;	
	

	
КонецПроцедуры

Процедура ЗаполнитьВалютыПоРегламенту(РасчетПоказателейОбъект,ТаблицаИзмененныхПоказателей) Экспорт
	
	ТаблицаИзмененныхПоказателей.Свернуть("Сценарий,ПериодОтчета,Организация");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаИзмененныхПоказателей.Сценарий,
	               |	ВЫРАЗИТЬ(ТаблицаИзмененныхПоказателей.ПериодОтчета КАК Справочник.Периоды) КАК ПериодОтчета,
	               |	ТаблицаИзмененныхПоказателей.Организация
	               |ПОМЕСТИТЬ втКлючи
	               |ИЗ
	               |	&ТаблицаИзмененныхПоказателей КАК ТаблицаИзмененныхПоказателей
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втКлючи.Сценарий,
	               |	втКлючи.ПериодОтчета,
	               |	втКлючи.Организация,
	               |	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияРегламента
	               |ПОМЕСТИТЬ втТекРегламенты
	               |ИЗ
	               |	втКлючи КАК втКлючи
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	               |		ПО (УправлениеПериодомСценария.Сценарий = втКлючи.Сценарий)
	               |			И (УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ)
	               |			И (УправлениеПериодомСценария.ПериодСценария.ДатаНачала <= втКлючи.ПериодОтчета.ДатаНачала)
	               |			И (УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания >= втКлючи.ПериодОтчета.ДатаОкончания)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТекРегламенты.Сценарий,
	               |	ТекРегламенты.ПериодОтчета,
	               |	ТекРегламенты.Организация,
	               |	ВалютыОтчетностиСрезПоследних.Валюта,
	               |	ВалютыОтчетностиСрезПоследних.ОсновнаяВалюта
	               |ИЗ
	               |	втТекРегламенты КАК ТекРегламенты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВалютыОтчетности.СрезПоследних(
	               |				&ТекущийПериод,
	               |				(ШаблонДокументаБД = &ШаблонДокументаБД
	               |					ИЛИ ШаблонДокументаБД = НЕОПРЕДЕЛЕНО)
	               |					И Организация В (&Организация)
	               |					И Валюта <> &Валюта) КАК ВалютыОтчетностиСрезПоследних
	               |		ПО ТекРегламенты.Организация = ВалютыОтчетностиСрезПоследних.Организация
	               |			И ТекРегламенты.ВерсияРегламента = ВалютыОтчетностиСрезПоследних.Регламент";
	
	Запрос.УстановитьПараметр("Сценарий",ТаблицаИзмененныхПоказателей.ВыгрузитьКолонку("Сценарий"));
	Запрос.УстановитьПараметр("Организация",ТаблицаИзмененныхПоказателей.ВыгрузитьКолонку("Организация"));
	Запрос.УстановитьПараметр("ТекущийПериод",ТекущаяДата());
	Запрос.УстановитьПараметр("ШаблонДокументаБД",РасчетПоказателейОбъект.ВидОтчета);
	Запрос.УстановитьПараметр("Валюта",Справочники.Валюты.ПустаяСсылка());
	Запрос.УстановитьПараметр("ТаблицаИзмененныхПоказателей",ТаблицаИзмененныхПоказателей);
	
	Результат = Запрос.Выполнить().Выгрузить();
			
	РасчетПоказателейОбъект.ВалютыОтчетности.Загрузить(Результат);
		
КонецПроцедуры

Процедура ПеренестиИзмерение(ТаблицаИсточник,ТаблицаПриемник,Измерение) Экспорт

	    МассивУдаляемых = Новый Массив;
	    Для Каждого Стр Из ТаблицаИсточник Цикл
			Если Стр.Код = Измерение Тогда
				 МассивУдаляемых.Добавить(Стр);
				 Прервать;
			КонецЕсли;
		КонецЦикла;
	    Если МассивУдаляемых.Количество() = 0 Тогда
			 Возврат;
		КонецЕсли;
		
		Нстр = ТаблицаПриемник.Добавить();
		ЗаполнитьЗначенияСвойств(Нстр,МассивУдаляемых[0]);
		ТаблицаИсточник.Удалить(МассивУдаляемых[0]);
		
КонецПроцедуры	

Функция СвернутьТаблицуЗначений(ИсходнаяТаблица,КолонкиГруппировок,КолонкиСуммирования) Экспорт
    
    ПоляГруппировки=СтрРазделить(КолонкиГруппировок,    ",",Ложь);
    ПоляСуммирования=СтрРазделить(КолонкиСуммирования,    ",",Ложь);
    
    ТекстПоля="";
    ТекстСумма="";
    
    Для Каждого Поле ИЗ ПоляГруппировки Цикл
        
        ТекстПоля=ТекстПоля+","+Поле;
        
    КонецЦикла;
    
    Для Каждого Поле ИЗ ПоляСуммирования Цикл
        
        ТекстСумма=ТекстСумма+","+"Сумма("+Поле+") КАК "+Поле;
        
    КонецЦикла;     
    
    Запрос=Новый Запрос;
    Запрос.Текст="ВЫБРАТЬ * Поместить ИсходнаяТаблица ИЗ &ИсходнаяТаблица КАК ИсходнаяТаблица
    |;
    |ВЫБРАТЬ "+Сред(ТекстПоля,2)+ТекстСумма+"
    |ИЗ ИсходнаяТаблица КАК ИсходнаяТаблица
    |Сгруппировать ПО "+Сред(ТекстПоля,2);
    
    Запрос.УстановитьПараметр("ИсходнаяТаблица",ИсходнаяТаблица);
    
    Возврат Запрос.Выполнить().Выгрузить();
    
КонецФункции // СвернутьТаблицуЗначений()

Функция ПолучитьЛогПоЧерновымЗаписям(Параметры,ТипЗначенияПоказателей = Неопределено)
		
	Периоды = ПериодыУХ.ПолучитьПодчиненныеПериоды(Параметры.ПериодОтчета,Параметры.ПериодОкончания);
	
	СтрокаИндекса = "";
	
	СтруктураНезаполненыхАналитик = Новый Структура;
	СтруктураНезаполненыхАналитик.Вставить("АналитикаВалюта");
	
	СтруктураОтбираемыхАналитик  = Новый Структура;
	СтруктураОтбираемыхАналитик.Вставить("Валюта",Параметры.Валюта);
	СтруктураОтбираемыхАналитик.Вставить("ВидОтчета",			Параметры.ВидОтчета);
	СтруктураОтбираемыхАналитик.Вставить("ПериодОтчета",		Периоды); 
	СтруктураОтбираемыхАналитик.Вставить("Организация",			Параметры.Организация); 
	СтруктураОтбираемыхАналитик.Вставить("Сценарий",			Параметры.Сценарий);
	Если ЗначениеЗаполнено(Параметры.Проект) Тогда
		СтруктураОтбираемыхАналитик.Вставить("Проект",			Параметры.Проект);
	КонецЕсли;	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(Параметры["Аналитика"+Инд]) Тогда	
			СтруктураОтбираемыхАналитик.Вставить("Аналитика"+Инд, Параметры["Аналитика"+Инд]);
		КонецЕсли;
		СтруктураНезаполненыхАналитик.Вставить("Аналитика"+Инд);
		СтрокаИндекса = СтрокаИндекса+",Аналитика"+Инд;	
	КонецЦикла;	
	
	Если ТипЗначенияПоказателей = "Число" Тогда
		
		//Получаем сгруппированный лог измененных данных из черновых записей		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСеанса",Параметры.ИдентификаторСеанса);
		ДополнительныеПараметры.Вставить("ТолькоЧерновые",Истина);
		
		Результат = ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик,СтруктураНезаполненыхАналитик,ДополнительныеПараметры);	
		
	ИначеЕсли ТипЗначенияПоказателей = "НеЧисло" Тогда
		
		//Для того чтобы выловить удаленные нечисловые записи, которые есть в исходном варианте, но отсутствуют в черновом логе
		//необходимо получить эталонный срез до изменения и сравнить его со срезом после изменений.
		
		
		//Выберем только нечисловые показатели для дальнейшей работы.
		НечисловыеПоказатели = ПолучитьИзмененныеПоказатели(Параметры.ИдентификаторСеанса);
		Если НечисловыеПоказатели.Количество() = 0 Тогда
			 Возврат Неопределено;
		КонецЕсли;	
		
		СтруктураОтбираемыхАналитик.Вставить("ПоказательОтчета",НечисловыеПоказатели);	
		//Получаем чистовой срез до изменений.				
		ДополнительныеПараметры = Новый Структура;		
		ДополнительныеПараметры.Вставить("ЭтоНечисловые",Истина);
		
		РезультатДо = ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик,СтруктураНезаполненыхАналитик,ДополнительныеПараметры);	
		
		//Получаем сгруппированный лог измененных данных из черновых записей
				
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСеанса",Параметры.ИдентификаторСеанса);
		ДополнительныеПараметры.Вставить("ТолькоЧерновые",Истина);
		ДополнительныеПараметры.Вставить("ЭтоНечисловые",Истина);
		
		РезультатПосле = ПолучитьЗначениеПоказателей(СтруктураОтбираемыхАналитик,СтруктураНезаполненыхАналитик,ДополнительныеПараметры);	
		
		РезультатПосле.Индексы.Добавить("ПоказательОтчета,ПериодОтчета,АналитикаВалюта"+СтрокаИндекса);
				
		РасчетПоказателейОбъект = Параметры.РасчетПоказателейОбъект;
		
		//Добавляем удаленные записи
		Для Каждого СтрЛогаДо Из РезультатДо Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ПоказательОтчета"		,СтрЛогаДо["ПоказательОтчета"]);
			СтруктураПоиска.Вставить("ПериодОтчета"			,СтрЛогаДо["ПериодОтчета"]);
			СтруктураПоиска.Вставить("АналитикаВалюта"		,СтрЛогаДо["АналитикаВалюта"]);
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				СтруктураПоиска.Вставить("Аналитика"+Инд		,СтрЛогаДо["Аналитика"+Инд]);
			КонецЦикла;	
			
			СтрПосле = РезультатПосле.НайтиСтроки(СтруктураПоиска);
			Если СтрПосле.Количество() = 0 Тогда
				нСтрРезультат = РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Добавить();
				ЗаполнитьЗначенияСвойств(нСтрРезультат,СтрЛогаДо);
				нСтрРезультат.ЗначениеНечисловое = Неопределено;
				нСтрРезультат.Значение = 0;
			КонецЕсли;	
				
		КонецЦикла;	
					
		//Добавляем измененные записи
		Для Каждого СтрЛогаПосле Из РезультатПосле Цикл
			нСтрРезультат = РасчетПоказателейОбъект.ТаблицаИзмененныхПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрРезультат,СтрЛогаПосле);	
		КонецЦикла;	
		
		Результат = РезультатПосле;
		
	КонецЕсли;
		
	Возврат Результат;
	 	
	 	 
 КонецФункции	

Функция ПолучитьИзмененныеПоказатели(ИдентификаторСеанса,ТипЗначенияПоказателей = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
	               |	ВерсииЗначенийПоказателей.Организация КАК Организация,
	               |	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
	               |	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
	               |	ВерсииЗначенийПоказателей.Проект КАК Проект
	               |ПОМЕСТИТЬ мВерсииБаза0
	               |ИЗ
	               |	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	               |ГДЕ
	               |	ВерсииЗначенийПоказателей.ЧерноваяВерсия
	               |	И ВерсииЗначенийПоказателей.ИдентификаторСеанса = &ИдентификаторСеанса
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЗначенияПоказателейОтчетовСинтетика.Показатель
	               |ИЗ
	               |	РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовСинтетика
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ мВерсииБаза0 КАК мВерсииБаза0
	               |		ПО ЗначенияПоказателейОтчетовСинтетика.Версия = мВерсииБаза0.Версия
	               |ГДЕ
	               |	ЗначенияПоказателейОтчетовСинтетика.Показатель.ТипЗначения <> &ТипЗначения
	               |";
	 
					   
	Запрос.УстановитьПараметр("ИдентификаторСеанса",Строка(ИдентификаторСеанса));
	Запрос.УстановитьПараметр("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число);

	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Показатель");
	
КонецФункции 

#Область ФункцииКопированияДанных
	
Функция ПолучитьПоказателиПоСтрокамИколонкам(Строки,Колонки) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Строка В(&Строка)
	|	И ПоказателиОтчетов.Колонка В(&Колонка)
	|	И ПоказателиОтчетов.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Строка",Строки);
	Запрос.УстановитьПараметр("Колонка",Колонки);

	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Возврат Результат;	
	
КонецФункции	

Функция ПолучитьТаблицуДляОчистики(Параметры) Экспорт
	
	ОтборыРасширеннойНастройки = Параметры.ОтборыРасширеннойНастройки;
			
	ТаблицаДопАналитик = Новый ТаблицаЗначений;
	ТаблицаДопАналитик.Колонки.Добавить("Код");
	ТаблицаДопАналитик.Колонки.Добавить("ТипСубконто");
	ТаблицаДопАналитик.Колонки.Добавить("ЗначениеСубконто");
	
	СтруктураПараметров 			= Новый Структура;
	СтруктураЗаменяемыхАналитик 	= Новый Структура;

	РаскрываемыеАналитики = Новый Структура;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;	

	РаскрываемыеАналитики.Вставить("ВидОтчета");
	РаскрываемыеАналитики.Вставить("Валюта");
	РаскрываемыеАналитики.Вставить("АналитикаВалюта");
			
	МассивПоказателей = Параметры.МассивПоказателей;
	СтруктураПараметров.Вставить("ПоказательОтчета",МассивПоказателей);
	
	СтруктураПараметров.Вставить("Сценарий",Параметры.СценарийПриемник);
	Если Параметры.Свойство("Валюта") Тогда
		СтруктураПараметров.Вставить("Валюта",Параметры.Валюта);
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ПериодОтчета", ПериодыУХ.ПолучитьПодчиненныеПериоды(Параметры.ПериодПриемникС,Параметры.ПериодПриемникПо,Параметры.ПериодПриемникС.Периодичность));
		
	Для Каждого СтрОтбор Из ОтборыРасширеннойНастройки Цикл	
		КодПоля  =  СтрЗаменить(СокрЛП(СтрОтбор.Код),"Фильтр_","");
		Если КодПоля  = "Организации" Тогда
			КодПоля = "Организация";
		ИначеЕсли КодПоля = "Проекты" Тогда
			КодПоля = "Проект";
		КонецЕсли;	
		
		//Парсим отбираемые аналитики
		Если  НЕ СтрОтбор.ОтборИсточник = Нстр("ru = '<Без отбора>'") Тогда
			Если   СтрОтбор.ОтборПриемник = Нстр("ru = '<По значениям источника>'") Тогда	
				СтруктураПараметров.Вставить(КодПоля,СтрОтбор.ИсточникЗначенияКопирования);					
			ИначеЕсли СтрОтбор.ОтборПриемник = Нстр("ru = '<Пустое значение>'") Тогда
				Если КодПоля  = "Организация" Тогда
					СтруктураПараметров.Вставить(КодПоля, Справочники.Организации.ПустаяСсылка());		
				ИначеЕсли  КодПоля  = "Проект" Тогда
					СтруктураПараметров.Вставить(КодПоля, Справочники.Проекты.ПустаяСсылка());			
				Иначе
					СтруктураПараметров.Вставить(КодПоля, СтрОтбор.ТипСубконто.ТипЗначения.ПривестиЗначение());	
				КонецЕсли;	
			Иначе	
				СтруктураПараметров.Вставить(КодПоля, СтрОтбор.ОтборПриемник);
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
			
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("РежимОчистки",Истина);
	СтруктураДопПараметров.Вставить("ВОсновнойВалюте",Истина);
	
	ТЗданные = ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики,СтруктураДопПараметров);
	
	Возврат ТЗданные;
	
КонецФункции

Функция ПолучитьТаблицуДляЗаписи(Параметры) Экспорт
	
	ОтборыРасширеннойНастройки = Параметры.ОтборыРасширеннойНастройки;
			
	ТаблицаДопАналитик = Новый ТаблицаЗначений;
	ТаблицаДопАналитик.Колонки.Добавить("Код");
	ТаблицаДопАналитик.Колонки.Добавить("ТипСубконто");
	ТаблицаДопАналитик.Колонки.Добавить("ЗначениеСубконто");
	
	СтруктураПараметров 			= Новый Структура;
	СтруктураЗаменяемыхАналитик 	= Новый Структура;

	РаскрываемыеАналитики = Новый Структура;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;	
	РаскрываемыеАналитики.Вставить("ВидОтчета");
	РаскрываемыеАналитики.Вставить("Валюта");
	РаскрываемыеАналитики.Вставить("АналитикаВалюта");
			
	МассивПоказателей = Параметры.МассивПоказателей;
	СтруктураПараметров.Вставить("ПоказательОтчета",МассивПоказателей);
	
	СтруктураПараметров.Вставить("Сценарий",Параметры.СценарийИсточник);
	Если Параметры.Свойство("Валюта") Тогда
		СтруктураПараметров.Вставить("Валюта",Параметры.Валюта);
	КонецЕсли;	
	
	СтруктураПараметров.Вставить("ПериодОтчета", ПериодыУХ.ПолучитьПодчиненныеПериоды(Параметры.ПериодИсточникС,Параметры.ПериодИсточникПо,Параметры.ПериодИсточникС.Периодичность));
		
	Для Каждого СтрОтбор Из ОтборыРасширеннойНастройки Цикл	
		КодПоля  =  СтрЗаменить(СокрЛП(СтрОтбор.Код),"Фильтр_","");
		Если КодПоля  = "Организации" Тогда
			КодПоля = "Организация";
		ИначеЕсли КодПоля = "Проекты" Тогда
			КодПоля = "Проект";
		КонецЕсли;	
		
		//Парсим отбираемые аналитики
		Если  НЕ СтрОтбор.ОтборИсточник = Нстр("ru = '<Без отбора>'") Тогда	
			СтруктураПараметров.Вставить(КодПоля,СтрОтбор.ИсточникЗначенияКопирования);					
		КонецЕсли;	
		
		//Парсим заменяемые аналитики
		Если   СтрОтбор.ОтборПриемник = Нстр("ru = '<По значениям источника>'") Тогда
			Продолжить;
		ИначеЕсли СтрОтбор.ОтборПриемник = Нстр("ru = '<Пустое значение>'") Тогда		   
			Нстр = ТаблицаДопАналитик.Добавить();
			Нстр.Код = КодПоля;
			Нстр.ТипСубконто 			= СтрОтбор.ТипСубконто;		  
			Если КодПоля  = "Организация" Тогда
				Нстр.ЗначениеСубконто 		= Справочники.Организации.ПустаяСсылка();		
			ИначеЕсли  КодПоля  = "Проект" Тогда
				Нстр.ЗначениеСубконто 		= Справочники.Проекты.ПустаяСсылка();			
			Иначе
				Нстр.ЗначениеСубконто 		= СтрОтбор.ТипСубконто.ТипЗначения.ПривестиЗначение();		
			КонецЕсли;
		Иначе	 		
			Нстр = ТаблицаДопАналитик.Добавить();
			Нстр.Код = КодПоля;
			Нстр.ТипСубконто 			= СтрОтбор.ТипСубконто;		  
			Нстр.ЗначениеСубконто 		= СтрОтбор.ОтборПриемник;		
		КонецЕсли;	
	КонецЦикла;
	
	СтруктураЗаменяемыхАналитик.Вставить("Сценарий",Параметры.СценарийПриемник);
		
	Для Каждого Стр Из ТаблицаДопАналитик Цикл	
	
		Если  Стр.Код = "АналитикаВалюта" И ЗначениеЗаполнено(Стр.ЗначениеСубконто)  Тогда	
			ФлагАналитикаВалюта = Истина;
			Продолжить;
		КонецЕсли;	
					
		СтруктураЗаменяемыхАналитик.Вставить(Стр.Код,Стр.ЗначениеСубконто);	
				
	КонецЦикла;
	
	СтруктураДопПараметров = Новый Структура;
	СтруктураДопПараметров.Вставить("СтруктураЗаменяемыхАналитик",СтруктураЗаменяемыхАналитик);
	СтруктураДопПараметров.Вставить("ВОсновнойВалюте",Истина);

	Периодичность = Параметры.ПериодИсточникС.Периодичность;
	СдвигПоПериоду = ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(Параметры.ПериодИсточникС.ДатаНачала,Параметры.ПериодПриемникС.ДатаНачала,Периодичность);
	
	СтруктураДопПараметров.Вставить("СдвигПоПериоду",СдвигПоПериоду);
	СтруктураДопПараметров.Вставить("Периодичность",Периодичность);

	ТЗданные = ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики,СтруктураДопПараметров);
				
	Возврат ТЗданные;
	
КонецФункции

Процедура ВыполнитьКопированиеВФоне(АдресХранилищаСтатусаКопирования,СтруктураТаблиц,КопированиеВыполнено = Ложь) Экспорт
	
	ТЗВерсийПриемник_Количество = СтруктураТаблиц.ТЗВерсийПриемникКоличество;
	
	ТЗПриемник = СтруктураТаблиц.ТЗПриемник;
	ТЗИсточник = СтруктураТаблиц.ТЗИсточник;
	
	ИндВерсии = 0;
	Результат = Истина;
	
	//Очищаем значения
	ЗаписатьДанныеПоказателей(ТЗПриемник,АдресХранилищаСтатусаКопирования,1,Результат);
	Если НЕ Результат  Тогда
		 Возврат;
	КонецЕсли;	
	//Пишем новые
	ЗаписатьДанныеПоказателей(ТЗИсточник,АдресХранилищаСтатусаКопирования,ТЗВерсийПриемник_Количество+1,Результат);
	Если НЕ Результат  Тогда
		 Возврат;
	КонецЕсли;	
	
	Если СтруктураТаблиц.Свойство("ПеренестиЭкземплярыОтчетов") И СтруктураТаблиц.ПеренестиЭкземплярыОтчетов Тогда
		
		ОтборыРасширеннойНастройки = СтруктураТаблиц.ОтборыРасширеннойНастройки;
		СкопироватьЭкземплярыИсточникиПоУОП(СтруктураТаблиц.УопИсточник,СтруктураТаблиц.УопПриемник,ОтборыРасширеннойНастройки);
		
	КонецЕсли;	
		
	Если Результат Тогда
		СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИндексПрогресса,ИнформацияОбОшибке","Прогресс",1,"");
		СтруктураВыполнения.Вставить("СтатусВыполнения","Успех");	
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
		КопированиеВыполнено = Истина;
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ЗаписатьДанныеПоказателей(ТЗданные,АдресХранилищаСтатусаКопирования,НачальныйИндексПрогресса,Результат = Истина)
	
	ЗаписьПоказателяСРасчетомЗависимыхОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	
	Если ТЗданные.Количество()>0 Тогда
		ЗаписьПоказателяСРасчетомЗависимыхОбъект.ВидОтчета = ТЗданные[0].ВидОтчета;
	КонецЕсли;

	ЗаписьПоказателяСРасчетомЗависимыхОбъект.РассчитыватьЗависимые = Ложь;	
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТЗданные);	
	ЗаполнитьВалютыПоРегламенту(ЗаписьПоказателяСРасчетомЗависимыхОбъект,ТЗданные);
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.АдресХранилищаСтатусаКопирования = АдресХранилищаСтатусаКопирования;
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.НачальныйИндексПрогресса 		  = НачальныйИндексПрогресса;
	
	Попытка 
		Результат = ЗаписьПоказателяСРасчетомЗависимыхОбъект.ЗаписатьЗначенияТаблицыПоказателей();	
	Исключение
		СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИндексПрогресса,ИнформацияОбОшибке","Прогресс",1,"");
		СтруктураВыполнения.Вставить("ИнформацияОбОшибке",ОписаниеОшибки());	
		СтруктураВыполнения.Вставить("СтатусВыполнения","Ошибка");
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);	
		Результат = Ложь;
	КонецПопытки	
	
КонецПроцедуры	

Функция СкопироватьЭкземплярыИсточникиПоУОП(УопИсточник,УопПриемник,ОтборыРасширеннойНастройки)
	
	СтруктураПараметров = Новый Структура;
	
	ПроектПриемник  	= Неопределено;
	ОрганизацияПриемник = Неопределено;
		
	
	Для Каждого СтрОтбор Из ОтборыРасширеннойНастройки Цикл	
		КодПоля  =  СтрЗаменить(СокрЛП(СтрОтбор.Код),"Фильтр_","");
		Если КодПоля  = "Организации" Тогда
			КодПоля = "Организация";
		ИначеЕсли КодПоля = "Проекты" Тогда
			КодПоля = "Проект";
		КонецЕсли;	
		
		//Парсим отбираемые аналитики
		Если  НЕ СтрОтбор.ОтборИсточник = Нстр("ru = '<Без отбора>'") Тогда	
			СтруктураПараметров.Вставить(КодПоля,СтрОтбор.ИсточникЗначенияКопирования);					
		КонецЕсли;	
		
		Если   СтрОтбор.ОтборПриемник = Нстр("ru = '<По значениям источника>'") Тогда
			Продолжить;
		ИначеЕсли СтрОтбор.ОтборПриемник = Нстр("ru = '<Пустое значение>'") Тогда		   
				  
			Если КодПоля  = "Организация" Тогда
				ОрганизацияПриемник 		= Справочники.Организации.ПустаяСсылка();		
			ИначеЕсли  КодПоля  = "Проект" Тогда
				ПроектПриемник 		= Справочники.Проекты.ПустаяСсылка();				
			КонецЕсли;
		Иначе	 		
			
			Если КодПоля  = "Организация" Тогда
				ОрганизацияПриемник 			=  СтрОтбор.ОтборПриемник;		
			ИначеЕсли  КодПоля  = "Проект" Тогда
				ПроектПриемник 					=  СтрОтбор.ОтборПриемник;				
			КонецЕсли;			
		КонецЕсли;	
		
	КонецЦикла;

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.УправлениеПериодом = &УправлениеПериодом
	|	И НастраиваемыйОтчет.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("УправлениеПериодом",УопИсточник);
	
	Для Каждого СтрПараметр Из СтруктураПараметров Цикл
		Если СтрПараметр.Ключ  = "Организация" Тогда
			Запрос.Текст = Запрос.Текст+"
		    | И НастраиваемыйОтчет.Организация В (&Организация)";
			Запрос.УстановитьПараметр("Организация",СтрПараметр.Значение);
		КонецЕсли;
		Если СтрПараметр.Ключ  = "Проект" Тогда
			Запрос.Текст = Запрос.Текст+"
		    | И НастраиваемыйОтчет.Проект В (&Проект)";
			Запрос.УстановитьПараметр("Проект",СтрПараметр.Проект);
		КонецЕсли;

	КонецЦикла;	
	
	текущиеОтчеты 			= Запрос.Выполнить().Выгрузить();
	СценарийПриемник        = УопПриемник.Сценарий;
	
	Для Каждого Стр Из текущиеОтчеты Цикл
		
		тОбъект 						= Стр.Ссылка.Скопировать();
		тОбъект.УправлениеПериодом 		= УопПриемник;
		тОбъект.Сценарий                = СценарийПриемник;
		Если Не ОрганизацияПриемник = Неопределено Тогда
			тОбъект.Организация                = ОрганизацияПриемник;
		КонецЕсли;
		Если Не ПроектПриемник = Неопределено Тогда
			тОбъект.Проект                = ПроектПриемник;
		КонецЕсли;
		
		Попытка
			тОбъект.ОбменДанными.Загрузка 			= Истина;
			тОбъект.Дата                  			= ТекущаяДата();
			тОбъект.ПериодОтчета          			= УопПриемник.ПериодСценария;
			тОбъект.ПериодОкончания         		= УопПриемник.ПериодСценарияОкончание;
			
			Если УправлениеОтчетамиУХ.ПроверитьВозможностьЗаписиПоКлючевымРеквизитам(тОбъект) И НЕ ПолныеПраваУХ.ПроверитьНаличиеДокументовСРеквизитамиТекущего(тОбъект) Тогда
				тОбъект.Записать();
			КонецЕсли;			 
		Исключение
			
		КонецПопытки;	
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции	

Процедура ВыполнитьАктуализациюПоказателейВФоне(АдресХранилищаСтатусаКопирования,СтруктураПараметров) Экспорт

	МассивФактическихПериодов 			= СтруктураПараметров.МассивФактическихПериодов;
	СписокОрганизаций 					= СтруктураПараметров.СписокОрганизаций;
	СписокПоказателей				 	= СтруктураПараметров.СписокПоказателей;
	ДействияПриАктуализации 			= СтруктураПараметров.ДействияПриАктуализации;
	Сценарий 							= СтруктураПараметров.Сценарий;
	СценарийФактическихДанных 			= СтруктураПараметров.СценарийФактическихДанных;
	ПериодДействия                      = СтруктураПараметров.ПериодДействия;
	
	Результат = Истина;
	
	//Выполним загрузку факта для каждого периода
	ИндексПериода = 1;
	
	Для Каждого СтрПериод Из МассивФактическихПериодов Цикл
		
		СтрокаШаблона = Нстр("ru = 'Перенос данных за период: %1'");
		
		ТекстСтатусаВыполнения = Строка(СтрПериод);
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстСтатусаВыполнения = СтрШаблон(СтрокаШаблона, Строка(СтрПериод));
		КонецЕсли;
		
		СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Прогресс", "", ТекстСтатусаВыполнения);
        ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
		
		Для Каждого Организация Из СписокОрганизаций Цикл
			
			ОбработкаАктуализации=Обработки.АктуализацияБюджетов.Создать();
			ОбработкаАктуализации.Актуализировать			=	Истина;
			ОбработкаАктуализации.ПеренестиОтклонения		=	Истина;
			ОбработкаАктуализации.Организация	= Организация.Значение;
			ОбработкаАктуализации.ПериодОтчета	= СтрПериод;
			ОбработкаАктуализации.СценарийПлан	= Сценарий;
			ОбработкаАктуализации.СценарийФакт  = СценарийФактическихДанных;
						
			Если ИндексПериода = МассивФактическихПериодов.Количество() Тогда
				ОбработкаАктуализации.ПеренестиОтклонения		=	Истина;
				Для Каждого СтрПоказатель Из СписокПоказателей Цикл
					нСтр =  ОбработкаАктуализации.ТаблицаДействийПриАктуализации.Добавить();
					нСтр.Показатель				 = СтрПоказатель.Значение;
					нСтр.ДействияПриАктуализации = СтруктураПараметров.ДействияПриАктуализации;
				КонецЦикла;	
				
				СводнаяТаблицаУХ.ЗаполнитьТЧПериодыГоризонта(ОбработкаАктуализации,СтрПериод,ПериодДействия);
				
			Иначе	
				
				СтрокаШаблона = Нстр("ru = 'Перенос данных за период и пренос остатков по выбранному правилу: %1'");
				
				ТекстСтатусаВыполнения = Строка(СтрПериод);
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					ТекстСтатусаВыполнения = СтрШаблон(СтрокаШаблона, Строка(СтрПериод));
				КонецЕсли;
				
				СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Прогресс", "", ТекстСтатусаВыполнения);
        		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);

				ОбработкаАктуализации.ПеренестиОтклонения		=	Ложь;
				Для Каждого СтрПоказатель Из СписокПоказателей Цикл
					нСтр =  ОбработкаАктуализации.ТаблицаДействийПриАктуализации.Добавить();
					нСтр.Показатель				 = СтрПоказатель.Значение;
					нСтр.ДействияПриАктуализации = Перечисления.ДействияПриАктуализацииБюджетов.НеПереносить;
				КонецЦикла;	

				СводнаяТаблицаУХ.ЗаполнитьТЧПериодыГоризонта(ОбработкаАктуализации,СтрПериод,СтрПериод);
				
			КонецЕсли;	
			
			ОбработкаАктуализации.ВыполнитьАктуализациюБюджетов();
			
		КонецЦикла;
			
		ИндексПериода = ИндексПериода+1;
		
	КонецЦикла;	
	
	
	Если НЕ Результат  Тогда
		 Возврат;
	КонецЕсли;	
			
	Если Результат Тогда
		СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИнформацияОбОшибке,ТекстСтатусаВыполнения","Успех","", Нстр("ru = 'Данные успешно актуализированы'"));
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьЗаполнениеФактаВФоне(АдресХранилищаСтатусаКопирования,СтруктураПараметров) Экспорт

	СценарийФактическихДанных 			= СтруктураПараметров.СценарийФактическихДанных;
	
	Результат = Истина;
	СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИнформацияОбОшибке,ТекстСтатусаВыполнения","Прогресс",, Нстр("ru = 'Выполняется обновление фактических данных...'"));
    ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
	
	Попытка 	
		ЗаполнитьПоРегламенту(СтруктураПараметров);
	Исключение
		СтруктураВыполнения = Новый Структура("СтатусВыполнения,ИнформацияОбОшибке,ТекстСтатусаВыполнения","Ошибка",ОписаниеОшибки(), Нстр("ru = 'Возникли ошибки в ходе обновления данных'"));	
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
		Результат = Ложь;	
	КонецПопытки;	
		
	Если НЕ Результат  Тогда
		 Возврат;
	КонецЕсли;	
			
	Если Результат Тогда
		
		СтрокаШаблона = Нстр("ru = 'Данные по сценарию %1 успешно обновлены'");
		
		ТекстСтатусаВыполнения = СценарийФактическихДанных;
		Если Не ПустаяСтрока(СтрокаШаблона) тогда								
			ТекстСтатусаВыполнения = СтрШаблон(СтрокаШаблона, СценарийФактическихДанных);
		КонецЕсли;
		
		СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Успех", "", ТекстСтатусаВыполнения);
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПоРегламенту(СтруктураПараметров)
	
	ВидОтчета 							= СтруктураПараметров.ВидОтчета;
	СтруктураФильтров	 				= СтруктураПараметров.СтруктураФильтров;
	ТЗКолонок					 		= СтруктураПараметров.ТЗКолонок;
	тзДанные	 						= СтруктураПараметров.тзДанные;
	СценарийФактическихДанных 			= СтруктураПараметров.СценарийФактическихДанных;
		
	РасчетПоказателейОбъект 						= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	РасчетПоказателейОбъект.ВидОтчета 				= ВидОтчета;
	РасчетПоказателейОбъект.ВалютаОтображения 		= Константы.ВалютаУправленческогоУчета.Получить();
	РасчетПоказателейОбъект.РассчитыватьЗависимые 	= Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();	
	
	ТЗПериодов			= 	ТЗКолонок;
	
	СтруктураОбязательныхАналитикДляПересчета = Новый Структура;
	СтруктураОбязательныхАналитикДляПересчета.Вставить("Организации", НСтр("ru = 'Организационная единица'"));
	СтруктураОбязательныхАналитикДляПересчета.Вставить("Проекты", НСтр("ru = 'Проект'"));
    СтруктураОбязательныхАналитикДляПересчета.Вставить("Сценарии", НСтр("ru = 'Сценарий'"));
	Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+аИнд]) Тогда
			СтруктураОбязательныхАналитикДляПересчета.Вставить(ВидОтчета["ВидАналитики"+аИнд].Код,ВидОтчета["ВидАналитики"+аИнд].Наименование);
		КонецЕсли;	
	КонецЦикла;
	
	ТЗДанныеДляПересчетаПоказателей = тзДанные.Скопировать();

	СтрокаСвертки = "";
	
	Для Каждого Кол Из СтруктураОбязательныхАналитикДляПересчета Цикл
		Если  ТЗДанныеДляПересчетаПоказателей.Колонки.Найти(Кол.Ключ) = Неопределено Тогда
			
			СтрокаШаблона = Нстр("ru = 'Не выбрана ключевая аналитика вида отчета: %1'");
			
			ТекстИсключения = Кол.Значение;
			Если Не ПустаяСтрока(СтрокаШаблона) тогда								
				ТекстИсключения = СтрШаблон(СтрокаШаблона, Кол.Значение);
			КонецЕсли;
			
			ВызватьИсключение(ТекстИсключения);
			
		КонецЕсли;	
		СтрокаСвертки = СтрокаСвертки+Кол.Ключ+",";
	КонецЦикла;	

	СтрокаСвертки = СтрокаСвертки+"ПериодыСвязанныйПериод";	
	ТЗДанныеДляПересчетаПоказателей.Свернуть(СтрокаСвертки);

	ТЗДанныеДляПересчетаПоказателей.Колонки["Организации"].Имя = "Организация";
	ТЗДанныеДляПересчетаПоказателей.Колонки["Проекты"].Имя = "Проект";
    ТЗДанныеДляПересчетаПоказателей.Колонки["ПериодыСвязанныйПериод"].Имя = "ПериодОтчета";
    ТЗДанныеДляПересчетаПоказателей.Колонки["Сценарии"].Имя = "Сценарий";

	Для аИнд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(ВидОтчета["ВидАналитики"+аИнд]) Тогда			
			ТЗДанныеДляПересчетаПоказателей.Колонки[ВидОтчета["ВидАналитики"+аИнд].Код].Имя = "Аналитика"+аИнд;
		КонецЕсли;	
	КонецЦикла;

	ТЗДанныеДляПересчетаПоказателей.Сортировать("Сценарий");		
	
	Для Каждого тПериод Из  ТЗПериодов Цикл
		
		тТЗДанныеДляПересчетаПоказателей =  ТЗДанныеДляПересчетаПоказателей.НайтиСтроки(Новый Структура("ПериодОтчета",тПериод.ПериодыСвязанныйПериод));
		
		Для Каждого стрРасчета Из тТЗДанныеДляПересчетаПоказателей Цикл	
			Нстрока= РасчетПоказателейОбъект.ДанныеДляПересчетаПоказателей.Добавить();
			ЗаполнитьЗначенияСвойств(Нстрока,стрРасчета);
			Нстрока.ОсновнаяВалюта = СтруктураФильтров["Фильтр_Валюты"];			
			Нстрока.Сценарий       = СценарийФактическихДанных;
			
			СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета,СценарийФактическихДанных,стрРасчета.Организация,стрРасчета.ПериодОтчета);		
			Если СоответствиеНастроек.Свойство("СпособФормированияОтчета") Тогда
				Нстрока.СпособФормированияОтчета 	= СоответствиеНастроек.СпособФормированияОтчета;
			КонецЕсли;
			Если СоответствиеНастроек.Свойство("ПравилоОбработки") Тогда
				Нстрока.ПравилоОбработки 	= СоответствиеНастроек.ПравилоОбработки;
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
	РасчетПоказателейОбъект.РассчитатьЗначенияПоказателей();
	 	
КонецПроцедуры	


#КонецОбласти

#Область ПроцедурыПоддержкиРаботыСРакурсамиДанных

Процедура УстановитьСтатусОбласти(Знач ТекущийДокумент,СостояниеОбъекта=Неопределено,ИндексБлокировки=Неопределено) Экспорт
	
	
	МассивПодчиненныхПериодов = Новый Массив;
	
	Область = ТекущийДокумент.Область;
	
	Сценарий = ТекущийДокумент.Сценарий;   
	
	Организация =  ТекущийДокумент.Организация;
	
	Проект =  ТекущийДокумент.Проект;
	
	ПериодНачало = ТекущийДокумент.ПериодНачалоДата;   
	
	ПериодОкончания = ТекущийДокумент.ПериодОкончаниеДата;   
	
	Периодичность = ?(ЗначениеЗаполнено(Сценарий.Периодичность),Сценарий.Периодичность,ТекущийДокумент.Периодичность);
	
	МассивПодчиненныхПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодНачало, ПериодОкончания, Периодичность);	   
	
	ИндексСостояния = СостояниеОбъекта;
	 
	ПравилоОбработки = Область.Владелец;
	
	ТекущееПравилоОбработки = Неопределено;
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(Область.Владелец);	
	СоответствиеНастроек.Свойство("ПравилоОбработки", ТекущееПравилоОбработки);

		
	Если СостояниеОбъекта = Перечисления.СостоянияОтчетов.Подготовлен Тогда 
		ИндексСостояния = 1;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОтчетов.Утвержден Тогда
		ИндексСостояния = 3;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОтчетов.Возвращен Тогда
		ИндексСостояния = 2;		   
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОтчетов.Запланирован Тогда
		ИндексСостояния = 0;	   
	КонецЕсли;
	
	
	//Меняем статус документа
	ИзменитьСвойствоОбласти(ТекущийДокумент,ИндексСостояния,ИндексБлокировки);
	
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(Область.Владелец);
		
	Для Каждого мПериод Из МассивПодчиненныхПериодов Цикл  
		
		Если ЗначениеЗаполнено(Организация) Тогда
			НаборЗаписей = РегистрыСведений.ЗначенияСтатусовПоказателейСинтетика.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПериодОтчета.Установить(мПериод);
			НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
			НаборЗаписей.Отбор.ОбластьДанных.Установить(Область);
			НаборЗаписей.Отбор.ОрганизационнаяЕдиница.Установить(Справочники.Организации.ПустаяСсылка());
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(Истина);
		КонецЕсли;	   
		Если ЗначениеЗаполнено(Проект) Тогда
			
			НаборЗаписей = РегистрыСведений.ЗначенияСтатусовПоказателейСинтетика.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Проект.Установить(Проект);
			НаборЗаписей = РегистрыСведений.ЗначенияСтатусовПоказателейСинтетика.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПериодОтчета.Установить(мПериод);
			НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
			НаборЗаписей.Отбор.ОбластьДанных.Установить(Область);
			НаборЗаписей.Отбор.Проект.Установить(Справочники.Проекты.ПустаяСсылка());
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(Истина);
	
		КонецЕсли;

		НаборЗаписей = РегистрыСведений.ЗначенияСтатусовПоказателейСинтетика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодОтчета.Установить(мПериод);
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.ОбластьДанных.Установить(Область);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			НаборЗаписей.Отбор.ОрганизационнаяЕдиница.Установить(Организация);		
		КонецЕсли;	   
		Если ЗначениеЗаполнено(Проект) Тогда
			НаборЗаписей.Отбор.Проект.Установить(Проект);
		КонецЕсли;
		
		
		НаборОбласти = ПолучитьНаборЗаписейОбласти(Область,Сценарий,Организация,Проект,мПериод,ТекущийДокумент.ПериодОтчета,ИндексСостояния,ИндексБлокировки);
		
		Если МаксАналитикОтчета > 0 тогда
			ТипХарактеристика = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
			
			Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
				ИндАналитики = Строка(ИндексАналитики);
				НаборОбласти.Колонки.Добавить("Аналитика" + ИндАналитики, ТипХарактеристика);
			КонецЦикла;
			
			Для Каждого СтрокаОбласти Из НаборОбласти Цикл
				Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
					ИндАналитики = Строка(ИндексАналитики);				
					СтрокаОбласти["Аналитика" + ИндАналитики] = ТекущийДокумент["Аналитика" + ИндАналитики];
				КонецЦикла;	
			КонецЦикла;		
		КонецЕсли;
		
		Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
			ИндАналитики = Строка(ИндексАналитики);
						
			НаборЗаписей.Отбор["Аналитика" + ИндАналитики].Использование = Истина;
			НаборЗаписей.Отбор["Аналитика" + ИндАналитики].ВидСравнения = ВидСравнения.Равно;
			НаборЗаписей.Отбор["Аналитика" + ИндАналитики].Значение = ТекущийДокумент["Аналитика" + ИндАналитики];
		КонецЦикла;
		
		НаборЗаписей.Загрузить(НаборОбласти);
		
		НаборЗаписей.Записать(Истина);
			
	КонецЦикла;
	
	
КонецПроцедуры	

Функция ПолучитьНаборЗаписейОбласти(Область,Сценарий,Организация,Проект,Период,ПериодРодитель,СостояниеОбъекта,СостояниеБлокировки)

	Запрос = Новый Запрос;
	
	Если Область.ВключатьВсеПоказателиВидаОтчета Тогда
				
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	&КлючОбласти КАК ОбластьДанных,
		               |	&Сценарий КАК Сценарий,
		               |	&Период КАК ПериодОтчета,
		               |	&ПериодРодитель КАК ПериодРодитель,
		               |	ВЫБОР
		               |		КОГДА &СтатусБлокировки = НЕОПРЕДЕЛЕНО
		               |			ТОГДА РакурсДанных.ЗначениеЗаблокировано
		               |		ИНАЧЕ &СтатусБлокировки
		               |	КОНЕЦ КАК ЗначениеЗаблокировано,
		               |	ВЫБОР
		               |		КОГДА &СтатусПоказателя = НЕОПРЕДЕЛЕНО
		               |			ТОГДА РакурсДанных.ИндексСостояния
		               |		ИНАЧЕ &СтатусПоказателя
		               |	КОНЕЦ КАК ИндексСостояния,
		               |	&Организация КАК ОрганизационнаяЕдиница,
		               |	&Проект КАК Проект,
		               |	НастройкиСоставаОбластейВидовОтчетов.Ссылка КАК Показатель
		               |ИЗ
		               |	Справочник.ПоказателиОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РакурсДанных КАК РакурсДанных
		               |		ПО (РакурсДанных.Область = &КлючОбласти)
		               |			И (РакурсДанных.ПометкаУдаления = ЛОЖЬ)
		               |			И (РакурсДанных.ПериодОтчета = &ПериодРодитель)
		               |			И (РакурсДанных.Сценарий = &Сценарий)
		               |			И (РакурсДанных.Организация = &Организация)
		               |			И (РакурсДанных.Проект = &Проект)
		               |ГДЕ
		               |	НастройкиСоставаОбластейВидовОтчетов.Владелец = &ВидОтчета";
		
		Запрос.УстановитьПараметр("ВидОтчета",Область.Владелец);
		
	Иначе	
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		               |	НастройкиСоставаОбластейВидовОтчетов.КлючОбласти КАК ОбластьДанных,
		               |	&Сценарий КАК Сценарий,
		               |	&Период КАК ПериодОтчета,
		               |	&ПериодРодитель КАК ПериодРодитель,
		               |	ВЫБОР
		               |		КОГДА &СтатусБлокировки = НЕОПРЕДЕЛЕНО
		               |			ТОГДА РакурсДанных.ЗначениеЗаблокировано
		               |		ИНАЧЕ &СтатусБлокировки
		               |	КОНЕЦ КАК ЗначениеЗаблокировано,
		               |	ВЫБОР
		               |		КОГДА &СтатусПоказателя = НЕОПРЕДЕЛЕНО
		               |			ТОГДА РакурсДанных.ИндексСостояния
		               |		ИНАЧЕ &СтатусПоказателя
		               |	КОНЕЦ КАК ИндексСостояния,
		               |	&Организация КАК ОрганизационнаяЕдиница,
		               |	&Проект КАК Проект,
		               |	ПоказателиОтчетов.Ссылка КАК Показатель
		               |ИЗ
		               |	РегистрСведений.НастройкиСоставаОбластейВидовОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РакурсДанных КАК РакурсДанных
		               |		ПО НастройкиСоставаОбластейВидовОтчетов.КлючОбласти = РакурсДанных.Область
		               |			И (РакурсДанных.ПометкаУдаления = ЛОЖЬ)
		               |			И (РакурсДанных.ПериодОтчета = &ПериодРодитель)
		               |			И (РакурсДанных.Сценарий = &Сценарий)
		               |			И (РакурсДанных.Организация = &Организация)
		               |			И (РакурсДанных.Проект = &Проект)
		               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		               |		ПО НастройкиСоставаОбластейВидовОтчетов.СтрокаОтчета = ПоказателиОтчетов.Строка
		               |ГДЕ
		               |	НастройкиСоставаОбластейВидовОтчетов.КлючОбласти = &КлючОбласти";
		
	КонецЕсли;			   
	
	Запрос.УстановитьПараметр("КлючОбласти",Область);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("Период",Период);
	Запрос.УстановитьПараметр("ПериодРодитель",ПериодРодитель);
	
	Запрос.УстановитьПараметр("СтатусБлокировки",СостояниеБлокировки);
	Запрос.УстановитьПараметр("СтатусПоказателя",СостояниеОбъекта);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Проект",Проект);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;	
	
КонецФункции	

Функция СохранитьДанныеОбластиВPDF(ДокументСогласованияОбласти) Экспорт
		
	Бланк = ПолучитьБланкОбластиТекущегоПользователя(ДокументСогласованияОбласти.Область);
	
	Если Бланк.Количество() = 0 Тогда
		 Возврат Неопределено;
	КонецЕсли;	
	
	СТ_Данные = Обработки.СводнаяТаблица.Создать();
	СТ_Данные.НазначениеТаблицы = Перечисления.НазначенияИспользованияСводнойТаблицы.Данные;	
	СТ_Данные.ВидОтчета = Бланк[0].Бланк.Владелец;
	СТ_Данные.ИнициализироватьКонтекст(Бланк[0].Бланк);
	СТ_Данные.ИерархияГруппировокСтрок = Бланк[0].Бланк.ИерархияГруппировокСтрок;
	СТ_Данные.ИерархияГруппировокКолонок = Бланк[0].Бланк.ИерархияГруппировокКолонок;		
	СТ_Данные.ИнициализироватьКонтекст(Бланк[0].Бланк);
	
	ДанныеПериода			=  Документы.НастраиваемыйОтчет.ПолучитьДанныеПериода(ДокументСогласованияОбласти.Сценарий,ДокументСогласованияОбласти.ПериодОтчета,ДокументСогласованияОбласти.Организация);
	ВалютыРегламента 		=  УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ДанныеПериода.УправлениеПериодом.ВерсияОрганизационнойСтруктуры, СТ_Данные.ВидОтчета, ДокументСогласованияОбласти.Организация);
	
	Если ВалютыРегламента.Свойство("ОсновнаяВалюта") Тогда
		 ВалютаПредставления  = ВалютыРегламента.ОсновнаяВалюта;
	Иначе	
		 ВалютаПредставления  = Константы.ВалютаУправленческогоУчета.Получить();
	КонецЕсли;	

	ТаблицыИнтерфейса =  ПолучитьИзВременногоХранилища(СТ_Данные.АдресТаблицИнтерфейса);
	СтруктураФильтровИтог = ПолучитьИзВременногоХранилища(СТ_Данные.АдресСтруктураФильтров);
	
	СтруктураФильтровИтог.Вставить("ГоризонтДатаНачала",ДокументСогласованияОбласти.ПериодНачалоДата);
	СтруктураФильтровИтог.Вставить("ГоризонтДатаОкончания",ДокументСогласованияОбласти.ПериодОкончаниеДата);
	СтруктураФильтровИтог.Вставить("ВидОтчета",Бланк[0].Бланк.Владелец);

	Для Каждого Стр Из ТаблицыИнтерфейса.ТаблицаСтраницы Цикл
		
		Если Стр.Код = "Фильтр_Сценарии" Тогда	
			СтруктураФильтровИтог.Вставить("Фильтр_Сценарии",ДокументСогласованияОбласти.Сценарий);	
		КонецЕсли;	
		
		Если Стр.Код = "Фильтр_Организации" Тогда		
			СтруктураФильтровИтог.Вставить("Фильтр_Организации",ДокументСогласованияОбласти.Организация);		
		КонецЕсли;	
		
		Если Стр.Код = "Фильтр_Валюты" Тогда	
			СтруктураФильтровИтог.Вставить("Фильтр_Валюты",ВалютаПредставления);		
		КонецЕсли;	

		СтруктураФильтровИтог.Вставить("Фильтр_Проекты",ДокументСогласованияОбласти.Проект);
		
	КонецЦикла;	
		
	ПолеТабличногоДокументаМакет = СТ_Данные.ПолучитьИтоговыйМакет(Новый ТабличныйДокумент,Бланк[0].Бланк,,СтруктураФильтровИтог,Истина,,Истина,Неопределено);	
	
	ИмяФайла = ПолучитьИмяВременногоФайла("PDF");
	
	Если ТипЗнч(ПолеТабличногоДокументаМакет) = Тип("ТабличныйДокумент") Тогда
		ПолеТабличногоДокументаМакет.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ПолеТабличногоДокументаМакет.АвтоМасштаб = Истина;
		ПолеТабличногоДокументаМакет.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.PDF);
		Возврат имяФайла;
	Иначе	
		Возврат Неопределено;
	КонецЕсли;
			
КонецФункции	

Функция ПолучитьБланкОбластиТекущегоПользователя(Область) Экспорт
	
	БланкиДляОтображения = Область.БланкОтображения;
		
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиПравДоступаПользователейБланкиРазвернутые.Бланк
	               |ИЗ
	               |	РегистрСведений.НастройкиПравДоступаПользователейБланкиРазвернутые КАК НастройкиПравДоступаПользователейБланкиРазвернутые
	               |ГДЕ
	               |	
	               |	 НастройкиПравДоступаПользователейБланкиРазвернутые.Бланк  = &Бланки
	               |	И НастройкиПравДоступаПользователейБланкиРазвернутые.Чтение = Истина";
	
	Запрос.УстановитьПараметр("Бланки",БланкиДляОтображения);

	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции	

Процедура ИзменитьСвойствоОбласти(ТекущийДокументСогласования,Статус=Неопределено,Блокировка=Неопределено)
	
	оТекущийДокументСогласования = ТекущийДокументСогласования.ПолучитьОбъект();
	Если НЕ Статус = НЕОПРЕДЕЛЕНО Тогда
		оТекущийДокументСогласования.ИндексСостояния = Статус;
	КонецЕсли;
	Если НЕ Блокировка = НЕОПРЕДЕЛЕНО  Тогда
		оТекущийДокументСогласования.ЗначениеЗаблокировано = Блокировка;
	КонецЕсли;
    оТекущийДокументСогласования.Записать();
	
КонецПроцедуры

Процедура УстановитьСтатусЭкземпляра(Знач ТекущийДокумент,СостояниеОбъекта=Неопределено,ИндексБлокировки=Неопределено) Экспорт
	
	Сценарий 				= ТекущийДокумент.Сценарий;   	
	Организация 			= ТекущийДокумент.Организация;	
	Проект 					= ТекущийДокумент.Проект;	
	ПериодОтчета 			= ТекущийДокумент.ПериодОтчета;   
	ПериодОкончания 		= ТекущийДокумент.ПериодОкончания;   
	ИндексСостояния = СостояниеОбъекта;	
	ВидОтчета = ТекущийДокумент.ВидОтчета;
	
	ТекущееПравилоОбработки = Неопределено;
	СоответствиеНастроек = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета);	
	СоответствиеНастроек.Свойство("ПравилоОбработки", ТекущееПравилоОбработки);
	
	
	Если СостояниеОбъекта = Перечисления.СостоянияОтчетов.Подготовлен Тогда 
		ИндексСостояния = 1;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОтчетов.Утвержден Тогда
		ИндексСостояния = 3;
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОтчетов.Возвращен Тогда
		ИндексСостояния = 2;		   
	ИначеЕсли СостояниеОбъекта = Перечисления.СостоянияОтчетов.Запланирован Тогда
		ИндексСостояния = 0;	   	
	КонецЕсли;
		
	мПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ПериодОтчета,ПериодОкончания,ПериодОтчета.Периодичность);
	НаборОбласти = ПолучитьНаборЗаписейОбластиЭкзепляра(ВидОтчета,Сценарий,Организация,Проект,мПериодов,ИндексСостояния,ИндексБлокировки);
		
	МаксАналитикОтчета = ОбщегоНазначенияУХ.ВернутьКоличествоАналитикНаУровнеОтчета(ВидОтчета);
		
	Если МаксАналитикОтчета > 0 тогда
		ТипХарактеристика = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
		
		Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
			ИндАналитики = Строка(ИндексАналитики);
			НаборОбласти.Колонки.Добавить("Аналитика" + ИндАналитики, ТипХарактеристика);
		КонецЦикла;
		
		Для Каждого СтрокаОбласти Из НаборОбласти Цикл
			Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
				ИндАналитики = Строка(ИндексАналитики);				
				СтрокаОбласти["Аналитика" + ИндАналитики] = ТекущийДокумент["Аналитика" + ИндАналитики];
			КонецЦикла;	
		КонецЦикла;		
	КонецЕсли;
		
	Для Каждого текПериод Из мПериодов Цикл
		НаборЗаписей = РегистрыСведений.ЗначенияСтатусовПоказателейСинтетика.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПериодОтчета.Установить(текПериод);
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		НаборЗаписей.Отбор.ВидОтчета.Установить(ВидОтчета);
		
		Если ЗначениеЗаполнено(Организация) Тогда
			НаборЗаписей.Отбор.ОрганизационнаяЕдиница.Установить(Организация);
		КонецЕсли;	   
		Если ЗначениеЗаполнено(Проект) Тогда
			НаборЗаписей.Отбор.Проект.Установить(Проект);
		КонецЕсли;
		
		Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
			ИндАналитики = Строка(ИндексАналитики);
						
			НаборЗаписей.Отбор["Аналитика" + ИндАналитики].Использование = Истина;
			НаборЗаписей.Отбор["Аналитика" + ИндАналитики].ВидСравнения = ВидСравнения.Равно;
			НаборЗаписей.Отбор["Аналитика" + ИндАналитики].Значение = ТекущийДокумент["Аналитика" + ИндАналитики];
		КонецЦикла;
				
		НаборЗаписей.Загрузить(НаборОбласти.Скопировать(Новый Структура("ПериодОтчета",текПериод)));
		НаборЗаписей.Записать(Истина);				
	КонецЦикла;
		
	//Удаляются старые неактуальные аналитики показателей
	Если МаксАналитикОтчета = 0 тогда
		Возврат;
	КонецЕсли;
	
	ОсновнаяВалюта = ТекущийДокумент.ОсновнаяВалюта;
	
	//Формируется массив версий показателей
	ЗапросВерсии = Новый Запрос;
	
	ДопУсловие = "";
	
	Если ЗначениеЗаполнено(Организация) тогда
		ЗапросВерсии.УстановитьПараметр("Организация", Организация);
		
		ДопУсловие = ДопУсловие + "
	|	И ВерсииЗначенийПоказателей.Организация = &Организация";
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Проект) тогда
		ЗапросВерсии.УстановитьПараметр("Проект", Проект);
		
		ДопУсловие = ДопУсловие + "
	|	И ВерсииЗначенийПоказателей.Проект = &Проект";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОсновнаяВалюта) тогда
		ЗапросВерсии.УстановитьПараметр("ОсновнаяВалюта", ОсновнаяВалюта);
		
		ДопУсловие = ДопУсловие + "
	|	И ВерсииЗначенийПоказателей.Валюта = &ОсновнаяВалюта";
	КонецЕсли;
		
	ЗапросВерсии.Текст = "ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
	|	И ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И НЕ ВерсииЗначенийПоказателей.ЗаписьВДополнительнойВалюте" + ДопУсловие + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииЗначенийПоказателей.Код УБЫВ";
	
	ЗапросВерсии.УстановитьПараметр("ВидОтчета", ВидОтчета);
	ЗапросВерсии.УстановитьПараметр("Сценарий", Сценарий);
	
	ВыборкаВерсий = ЗапросВерсии.Выполнить().Выбрать();
	
	МассивИспользуемыхВерсий = Новый Массив;
	Пока ВыборкаВерсий.Следующий() Цикл
		МассивИспользуемыхВерсий.Добавить(ВыборкаВерсий.Ссылка);
	КонецЦикла;
	
	//Формируется Запрос "Записи к удалению"
	ПоляАналитик = "";
		
	ЗапросЗаписиКУдалению = Новый Запрос();
	
	ЗапросЗаписиКУдалению.УстановитьПараметр("ВидОтчета", ВидОтчета);
	ЗапросЗаписиКУдалению.УстановитьПараметр("Сценарий", Сценарий);
	ЗапросЗаписиКУдалению.УстановитьПараметр("МассивИспользуемыхВерсий", МассивИспользуемыхВерсий);
		
	ДопУсловие = "";
	Если ЗначениеЗаполнено(Организация) Тогда
		ДопУсловие = ДопУсловие + "
	|	И ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница";
		
		ЗапросЗаписиКУдалению.УстановитьПараметр("ОрганизационнаяЕдиница", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		ДопУсловие = ДопУсловие + "
	|	И ЗначенияСтатусовПоказателейСинтетика.Проект = &Проект";
		
		ЗапросЗаписиКУдалению.УстановитьПараметр("Проект", Проект);
	КонецЕсли;
		
	ТаблицаПараметр = НаборОбласти.Скопировать(, "Показатель");
	ТаблицаПараметр.Свернуть("Показатель");
	ЗапросЗаписиКУдалению.УстановитьПараметр("МассивПоказателиСРаскрытием", ТаблицаПараметр.ВыгрузитьКолонку("Показатель"));
	
	//Формируется подзапрос по актуальным аналитикам показателей
	ТекстПоляАналитик = "";
	ПоляГруппировки = "";
	
	Для ИндексАналитики = 1 По МаксАналитикОтчета Цикл
		ИндАналитики = Строка(ИндексАналитики);
		
		ТекстПоляАналитик = ТекстПоляАналитик + ",
	|	ЗначенияПоказателейОтчетов.Аналитика" + ИндАналитики + " КАК Аналитика" + ИндАналитики;
		ПоляГруппировки = ПоляГруппировки + ",
	|	ЗначенияПоказателейОтчетов.Аналитика" + ИндАналитики;
				
	КонецЦикла;
		
	Для ИндексАналитики = МаксАналитикОтчета + 1 По 6 Цикл
		ИндАналитики = Строка(ИндексАналитики);
		
		ТекстПоляАналитик = ТекстПоляАналитик + ",
	|	Неопределено КАК Аналитика" + ИндАналитики;			
	КонецЦикла;
		
	//Аналитики регистра сведений "ЗначенияСтатусовПоказателейСинтетика" сравниваются с актуальными.
	ТекстЗапросаЗаписиКУдалению = "ВЫБРАТЬ
	|	ЗначенияСтатусовПоказателейСинтетика.ВидОтчета КАК ВидОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.ОбластьДанных КАК ОбластьДанных,
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий КАК Сценарий,
	|	ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета КАК ПериодОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.Проект КАК Проект,
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель КАК Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика1 КАК Аналитика1,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика2 КАК Аналитика2,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика3 КАК Аналитика3,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика4 КАК Аналитика4,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика5 КАК Аналитика5,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ВТЗначенияСтатусовПоказателей
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|ГДЕ
	|	ЗначенияСтатусовПоказателейСинтетика.ВидОтчета = &ВидОтчета
	|	И ЗначенияСтатусовПоказателейСинтетика.Сценарий = &Сценарий" + ДопУсловие + "
	|	И ЗначенияСтатусовПоказателейСинтетика.Показатель В (&МассивПоказателиСРаскрытием)
	|;
	|
	|ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета КАК ПериодОтчета,
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) КАК Значение,
	|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель" + ТекстПоляАналитик + "
	|ПОМЕСТИТЬ ВТАналитикаПоказателей
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов" + Строка(МаксАналитикОтчета) + " КАК ЗначенияПоказателейОтчетов
	|ГДЕ
	|	ЗначенияПоказателейОтчетов.Показатель В (&МассивПоказателиСРаскрытием)
	|	И ЗначенияПоказателейОтчетов.Версия В (&МассивИспользуемыхВерсий)
	|
	|СГРУППИРОВАТЬ ПО 
	|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета,
	|   ЗначенияПоказателейОтчетов.Показатель" + ПоляГруппировки + "
	|ИМЕЮЩИЕ
	|	СУММА(ЗначенияПоказателейОтчетов.Значение) > 0	
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияСтатусовПоказателейСинтетика.ВидОтчета КАК ВидОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий КАК Сценарий,
	|	ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ЗначенияСтатусовПоказателейСинтетика.Проект КАК Проект,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика1 КАК Аналитика1,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика2 КАК Аналитика2,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика3 КАК Аналитика3,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика4 КАК Аналитика4,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика5 КАК Аналитика5,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ ВТИспользуемаяАналитика
	|ИЗ
	|	ВТЗначенияСтатусовПоказателей КАК ЗначенияСтатусовПоказателейСинтетика
	|   ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТАналитикаПоказателей КАК АналитикаПоказателей
	|		ПО ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета = АналитикаПоказателей.ПериодОтчета
	|		И ЗначенияСтатусовПоказателейСинтетика.Показатель = АналитикаПоказателей.Показатель
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика1 = АналитикаПоказателей.Аналитика1
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика2 = АналитикаПоказателей.Аналитика2
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика3 = АналитикаПоказателей.Аналитика3
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика4 = АналитикаПоказателей.Аналитика4
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика5 = АналитикаПоказателей.Аналитика5
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика6 = АналитикаПоказателей.Аналитика6
	|;
	|
	|УНИЧТОЖИТЬ ВТАналитикаПоказателей
	|;
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияСтатусовПоказателейСинтетика.ВидОтчета КАК ВидОтчета,
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий КАК Сценарий,
	|	ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ЗначенияСтатусовПоказателейСинтетика.Проект КАК Проект,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика1 КАК Аналитика1,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика2 КАК Аналитика2,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика3 КАК Аналитика3,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика4 КАК Аналитика4,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика5 КАК Аналитика5,
	|	ЗначенияСтатусовПоказателейСинтетика.Аналитика6 КАК Аналитика6
	|ИЗ
	|	ВТЗначенияСтатусовПоказателей КАК ЗначенияСтатусовПоказателейСинтетика
	|   ЛЕВОЕ СОЕДИНЕНИЕ ВТИспользуемаяАналитика КАК ИспользуемаяАналитика
	|		ПО ЗначенияСтатусовПоказателейСинтетика.ВидОтчета = ИспользуемаяАналитика.ВидОтчета
	|		И ЗначенияСтатусовПоказателейСинтетика.Сценарий = ИспользуемаяАналитика.Сценарий
	|		И ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = ИспользуемаяАналитика.ОрганизационнаяЕдиница
	|		И ЗначенияСтатусовПоказателейСинтетика.Проект = ИспользуемаяАналитика.Проект
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика1 = ИспользуемаяАналитика.Аналитика1
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика2 = ИспользуемаяАналитика.Аналитика2
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика3 = ИспользуемаяАналитика.Аналитика3
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика4 = ИспользуемаяАналитика.Аналитика4
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика5 = ИспользуемаяАналитика.Аналитика5
	|		И ЗначенияСтатусовПоказателейСинтетика.Аналитика6 = ИспользуемаяАналитика.Аналитика6
	|ГДЕ
	|	ИспользуемаяАналитика.ВидОтчета ЕСТЬ NULL
	|;
	|
	|УНИЧТОЖИТЬ ВТЗначенияСтатусовПоказателей
	|";
	
	ЗапросЗаписиКУдалению.Текст = ТекстЗапросаЗаписиКУдалению;
	ВыборкаЗаписиКУдалению = ЗапросЗаписиКУдалению.Выполнить().Выбрать();
	
	//Если соответствие не установлено - запись удаляется
	НаборЗаписей = РегистрыСведений.ЗначенияСтатусовПоказателейСинтетика.СоздатьНаборЗаписей();
			
	Пока ВыборкаЗаписиКУдалению.Следующий() Цикл		
		Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
			Если ЭлементОтбора.Имя = "ОбластьДанных" 
				ИЛИ ЭлементОтбора.Имя = "ПериодОтчета" 
				ИЛИ ЭлементОтбора.Имя = "Показатель" тогда
				
				Продолжить;
			КонецЕсли;
			
			НаборЗаписей.Отбор[ЭлементОтбора.Имя].Использование = Истина;
			НаборЗаписей.Отбор[ЭлементОтбора.Имя].ВидСравнения = ВидСравнения.Равно;
			НаборЗаписей.Отбор[ЭлементОтбора.Имя].Значение = ВыборкаЗаписиКУдалению[ЭлементОтбора.Имя];
		КонецЦикла;
				
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			Заголовок = НСтр("ru = 'Ошибка при записи регистра сведений ""ЗначенияСтатусовПоказателейСинтетика""'");
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка при записи регистра сведений ""ЗначенияСтатусовПоказателейСинтетика"": %1'"), ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,, Заголовок, СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
		
КонецПроцедуры	

Функция ПолучитьНаборЗаписейОбластиЭкзепляра(ВидОтчета,Сценарий,Организация,Проект,Период,СостояниеОбъекта,СостояниеБлокировки)

	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	Периоды.Ссылка КАК ПериодОтчета
	               |ПОМЕСТИТЬ тПериоды
	               |ИЗ
	               |	Справочник.Периоды КАК Периоды
	               |ГДЕ
	               |	Периоды.Ссылка В(&мПериоды)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	&ВидОтчета КАК ВидОтчета,
	               |	&Сценарий КАК Сценарий,
	               |	&СтатусБлокировки КАК ЗначениеЗаблокировано,
	               |	&СтатусПоказателя КАК ИндексСостояния,
	               |	&Организация КАК ОрганизационнаяЕдиница,
	               |	&Проект КАК Проект,
	               |	НастройкиСоставаОбластейВидовОтчетов.Ссылка КАК Показатель
	               |ПОМЕСТИТЬ тПоказатели
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
	               |ГДЕ
	               |	НастройкиСоставаОбластейВидовОтчетов.Владелец = &ВидОтчета
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	тПоказатели.ВидОтчета КАК ВидОтчета,
	               |	тПоказатели.Сценарий КАК Сценарий,
	               |	Периоды.ПериодОтчета КАК ПериодОтчета,
	               |	Периоды.ПериодОтчета КАК ПериодРодитель,
	               |	тПоказатели.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано,
	               |	тПоказатели.ИндексСостояния КАК ИндексСостояния,
	               |	тПоказатели.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	               |	тПоказатели.Проект КАК Проект,
	               |	тПоказатели.Показатель КАК Показатель
	               |ИЗ
	               |	тПериоды КАК Периоды
	               |		ЛЕВОЕ СОЕДИНЕНИЕ тПоказатели КАК тПоказатели
	               |		ПО (ИСТИНА)";
		
	Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("мПериоды",Период);	
	Запрос.УстановитьПараметр("СтатусБлокировки",СостояниеБлокировки);
	Запрос.УстановитьПараметр("СтатусПоказателя",СостояниеОбъекта);
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Проект",Проект);

	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;	
	
КонецФункции	

Функция ЗаполнитьСтрокиПоРакурсу(Ракурс,Бланк) Экспорт
	
	 Запрос = Новый Запрос;

	
	Если Ракурс.ВключатьВсеПоказателиВидаОтчета Тогда
		
		     Запрос.Текст = "ВЫБРАТЬ
		                    |	НастройкиСоставаОбластейВидовОтчетов.Ссылка КАК СтрокаОтчета
		                    |ПОМЕСТИТЬ втСоставРакурса
		                    |ИЗ
		                    |	Справочник.СтрокиОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
		                    |ГДЕ
		                    |	НастройкиСоставаОбластейВидовОтчетов.Владелец = &Ракурс
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	НастройкиСтруктурыБланка.Ссылка
		                    |ПОМЕСТИТЬ втСоставБланка
		                    |ИЗ
		                    |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		                    |ГДЕ
		                    |	НастройкиСтруктурыБланка.Владелец = &Бланк
		                    |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	втСоставРакурса.СтрокаОтчета,
		                    |	втСоставБланка.Ссылка,
		                    |	втСоставРакурса.СтрокаОтчета.Наименование КАК Наименование,
		                    |	втСоставРакурса.СтрокаОтчета.Код КАК Код
		                    |ИЗ
		                    |	втСоставРакурса КАК втСоставРакурса
		                    |		ЛЕВОЕ СОЕДИНЕНИЕ втСоставБланка КАК втСоставБланка
		                    |		ПО втСоставРакурса.СтрокаОтчета = втСоставБланка.Ссылка.СтрокаОтчета
		                    |ГДЕ
		                    |	втСоставБланка.Ссылка ЕСТЬ NULL 
		                    |
		                    |УПОРЯДОЧИТЬ ПО
		                    |	Код
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	втСоставБланка.Ссылка,
		                    |	втСоставРакурса.СтрокаОтчета
		                    |ИЗ
		                    |	втСоставБланка КАК втСоставБланка
		                    |		ЛЕВОЕ СОЕДИНЕНИЕ втСоставРакурса КАК втСоставРакурса
		                    |		ПО втСоставБланка.Ссылка.СтрокаОтчета = втСоставРакурса.СтрокаОтчета
		                    |ГДЕ
		                    |	втСоставРакурса.СтрокаОтчета ЕСТЬ NULL 
		                    |;
		                    |
		                    |////////////////////////////////////////////////////////////////////////////////
		                    |ВЫБРАТЬ
		                    |	МАКСИМУМ(втСоставБланка.Ссылка.ПорядковыйНомер) КАК МаксимальныйУровень
		                    |ИЗ
		                    |	втСоставБланка КАК втСоставБланка
		                    |ГДЕ
		                    |	втСоставБланка.Ссылка.Уровень = 0";
	   
	   Запрос.УстановитьПараметр("Ракурс",Ракурс.Владелец);
	  	
	Иначе	
	
	  	   Запрос.Текст = "ВЫБРАТЬ
	  	                  |	НастройкиСоставаОбластейВидовОтчетов.СтрокаОтчета
	  	                  |ПОМЕСТИТЬ втСоставРакурса
	  	                  |ИЗ
	  	                  |	РегистрСведений.НастройкиСоставаОбластейВидовОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
	  	                  |ГДЕ
	  	                  |	НастройкиСоставаОбластейВидовОтчетов.КлючОбласти = &Ракурс
	  	                  |;
	  	                  |
	  	                  |////////////////////////////////////////////////////////////////////////////////
	  	                  |ВЫБРАТЬ
	  	                  |	НастройкиСтруктурыБланка.Ссылка
	  	                  |ПОМЕСТИТЬ втСоставБланка
	  	                  |ИЗ
	  	                  |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	  	                  |ГДЕ
	  	                  |	НастройкиСтруктурыБланка.Владелец = &Бланк
	  	                  |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2
	  	                  |;
	  	                  |
	  	                  |////////////////////////////////////////////////////////////////////////////////
	  	                  |ВЫБРАТЬ
	  	                  |	втСоставРакурса.СтрокаОтчета,
	  	                  |	втСоставБланка.Ссылка,
	  	                  |	втСоставРакурса.СтрокаОтчета.Наименование КАК Наименование,
	  	                  |	втСоставРакурса.СтрокаОтчета.Код КАК Код
	  	                  |ИЗ
	  	                  |	втСоставРакурса КАК втСоставРакурса
	  	                  |		ЛЕВОЕ СОЕДИНЕНИЕ втСоставБланка КАК втСоставБланка
	  	                  |		ПО втСоставРакурса.СтрокаОтчета = втСоставБланка.Ссылка.СтрокаОтчета
	  	                  |ГДЕ
	  	                  |	втСоставБланка.Ссылка ЕСТЬ NULL
	  	                  |
	  	                  |УПОРЯДОЧИТЬ ПО
	  	                  |	Код
	  	                  |;
	  	                  |
	  	                  |////////////////////////////////////////////////////////////////////////////////
	  	                  |ВЫБРАТЬ
	  	                  |	втСоставБланка.Ссылка,
	  	                  |	втСоставРакурса.СтрокаОтчета
	  	                  |ИЗ
	  	                  |	втСоставБланка КАК втСоставБланка
	  	                  |		ЛЕВОЕ СОЕДИНЕНИЕ втСоставРакурса КАК втСоставРакурса
	  	                  |		ПО втСоставБланка.Ссылка.СтрокаОтчета = втСоставРакурса.СтрокаОтчета
	  	                  |ГДЕ
	  	                  |	втСоставРакурса.СтрокаОтчета ЕСТЬ NULL
	  	                  |;
	  	                  |
	  	                  |////////////////////////////////////////////////////////////////////////////////
	  	                  |ВЫБРАТЬ
	  	                  |	МАКСИМУМ(втСоставБланка.Ссылка.ПорядковыйНомер) КАК МаксимальныйУровень
	  	                  |ИЗ
	  	                  |	втСоставБланка КАК втСоставБланка
	  	                  |ГДЕ
	  	                  |	втСоставБланка.Ссылка.Уровень = 0";
	   
	   Запрос.УстановитьПараметр("Ракурс",Ракурс);
	   
	   КонецЕсли;
	   
	   Запрос.УстановитьПараметр("Бланк",Бланк);

	   РезультатЗапроса = Запрос.ВыполнитьПакет();
	   
	   РезультатДобавляемые = РезультатЗапроса[2].Выгрузить();
	   РезультатУдаляемые = РезультатЗапроса[3].Выгрузить();   
	   
	   тМаксимальныйУровень =  РезультатЗапроса[4].Выгрузить();
	   Если тМаксимальныйУровень.Количество() = 0 Тогда
		    МаксимальныйУровень = -1;
	   Иначе	
		   МаксимальныйУровень = тМаксимальныйУровень[0].МаксимальныйУровень;
	   КонецЕсли;	   
	   Если МаксимальныйУровень = NULL Тогда
		   МаксимальныйУровень = -1; 
	   КонецЕсли;	   
	  
	   Для Каждого Стр Из РезультатДобавляемые Цикл
		   
		     МаксимальныйУровень = МаксимальныйУровень+1;
		   
		     оСтр = Справочники.НастройкиСтруктурыБланка.СоздатьЭлемент();
			 оСтр.ПорядковыйНомер = МаксимальныйУровень;
			 оСтр.Наименование = Стр.Наименование;
			 оСтр.Код = Стр.Код;
			 оСтр.СтрокаОтчета = Стр.СтрокаОтчета;
			 оСтр.ИндексЭлемента = 2;
			 оСтр.Владелец = Бланк;
			 оСтр.Уровень =  0;
			 оСтр.Записать();
			 СводнаяТаблицаУХ.СоздатьНастройкуПоказателя(Бланк,оСтр.Ссылка)
			    
	   КонецЦикла;	   
	   
	   Для Каждого Стр Из РезультатУдаляемые Цикл
		   
		   оСтр = Стр.Ссылка.ПолучитьОбъект();		 
		   
		   Если НЕ оСтр=Неопределено Тогда		   
			   оСтр.Удалить();		   
		   КонецЕсли;
		   
	   КонецЦикла;	   

	   
	   
КонецФункции	

Процедура СоздатьРакурсПоУмолчанию(тСсылка) Экспорт
	
	Если НЕ тСсылка.ЭтоГруппа Тогда
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	ОбластиДанныхВидовОтчетов.Ссылка
		|ИЗ
		|	Справочник.ОбластиДанныхВидовОтчетов КАК ОбластиДанныхВидовОтчетов
		|ГДЕ
		|	ОбластиДанныхВидовОтчетов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",				тСсылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Количество()=0 Тогда		
			Справочники.ОбластиДанныхВидовОтчетов.СоздатьРакурсПоУмолчанию(тСсылка);		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновленияБланковСТ

//Процедура вызывается для обновления закэшированых настроек бланков сводных таблиц при изменении версии УХ (если необходимо) 
Процедура ОбновитьСтруктуруБланковСТ() Экспорт
	     
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		БланкОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка	
			СоздатьМакетСводнойТаблицы(БланкОбъект);	
		Исключение
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = НСтр("ru = 'Ошибка обновления бланка сводной таблицы %Ссылка%
                                 |
                                 |Текст ошибки: 
                                 |%ТекОшибка%'");
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%Ссылка%", Строка(Выборка.Ссылка));
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%ТекОшибка%", Строка(ТекОшибка));
			ЗаписьЖурналаРегистрации("ОбновлениеСтруктурыБланковСТ", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);
	
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ОбновитьПорядковыеНомераСтрокБланков() Экспорт
		
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК Бланк
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1";
	 
		 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 	  ЗаполнитьДеревоВыбранныхСтрок(Выборка.Бланк);	  
		  ОбновитьСвойстваПоказателей(Выборка.Бланк);	  
	 КонецЦикла;
	 
КонецПроцедуры

Процедура ЗаполнитьДеревоВыбранныхСтрок(Бланк)
		
	ДеревоНастройкиСервер=Новый ДеревоЗначений;
	ДеревоНастройкиСервер.Колонки.Добавить("Наименование");
	ДеревоНастройкиСервер.Колонки.Добавить("ПорядковыйНомер");
	ДеревоНастройкиСервер.Колонки.Добавить("Код");
	ДеревоНастройкиСервер.Колонки.Добавить("Строка");
	ДеревоНастройкиСервер.Колонки.Добавить("Изменена");
	ДеревоНастройкиСервер.Колонки.Добавить("СтрокаОтчета");
	
	ВыводимаяСтрокаОтчета=Справочники.НастройкиСтруктурыБланка.ПустаяСсылка();

	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	НастройкиСтруктурыБланка.Ссылка КАК Строка,
	             |	НастройкиСтруктурыБланка.СтрокаОтчета,
	             |	НастройкиСтруктурыБланка.Родитель,
	             |	НастройкиСтруктурыБланка.Наименование,
	             |	НастройкиСтруктурыБланка.Код,
	             |	НастройкиСтруктурыБланка.ПорядковыйНомер,
	             |	НастройкиСтруктурыБланка.Уровень
	             |ИЗ
	             |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	             |ГДЕ
	             |	НастройкиСтруктурыБланка.Владелец = &Владелец
	             |	И НастройкиСтруктурыБланка.ИндексЭлемента = 2
	             |
	             |УПОРЯДОЧИТЬ ПО
	             |	НастройкиСтруктурыБланка.Код ИЕРАРХИЯ";
				 
	Запрос.УстановитьПараметр("Владелец",Бланк);
	
	ТекущаяСтрокаДерева=Неопределено;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	СоответствиеСтрок=Новый Соответствие;
	СоответствиеРодителей=Новый Соответствие;
	
	СписокАналитик=Новый Массив;
	
	ЕстьСтрокиБюджетов=Ложь;
	ПорядковыйНомер =0;
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда
				
				Если Результат.Родитель=Справочники.НастройкиСтруктурыБланка.ПустаяСсылка() Тогда
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер.Строки.Добавить();
					ПорядковыйНомер =0;

				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];
					
					Если СтрокаРодитель=Неопределено Тогда
												
						СтрокаРодитель=ДеревоНастройкиСервер.Строки.Найти(Результат.Родитель,"Строка",Истина);
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);
						
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат);
				ТекущаяСтрокаДерева.Код=СокрЛП(Результат.Код);
				ТекущаяСтрокаДерева.ПорядковыйНомер=ПорядковыйНомер;
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);
				
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
		
		
		
	КонецЦикла;
	
	ЗаполнитьПорядковыйНомер(ДеревоНастройкиСервер.Строки);
							
КонецПроцедуры 

Процедура ЗаполнитьПорядковыйНомер(СтрокиДерева)
	
	Инд = 0;
	
	Для Каждого Стр Из СтрокиДерева Цикл 
		Стр.ПорядковыйНомер = Инд;
		СтрОбъект = Стр.Строка.ПолучитьОбъект();
		СтрОбъект.ПорядковыйНомер =Инд;
		СтрОбъект.Записать();
		Инд = Инд+1;
		Если Стр.Строки.Количество()>0 Тогда		
			ЗаполнитьПорядковыйНомер(Стр.Строки);		
		КонецЕсли;	
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСвойстваПоказателей(Бланк)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастройкиСтруктурыБланка.Ссылка
	               |ИЗ
	               |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	               |ГДЕ
	               |	НастройкиСтруктурыБланка.Владелец = &Владелец
	               |	И НастройкиСтруктурыБланка.ИндексЭлемента = 10
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	НастройкиСтруктурыБланка.ПорядковыйНомер";
	
	Запрос.УстановитьПараметр("Владелец",Бланк);

	Результат=Запрос.Выполнить().Выбрать();

	Инд = 0;
	Пока Результат.Следующий() Цикл
		
		  ПоказательОбъект = Результат.Ссылка.ПолучитьОбъект();
		  ПоказательОбъект.Использовать = Истина;
		  ПоказательОбъект.ПорядковыйНомер = Инд;
		  ПоказательОбъект.КодПоказателя = СокрЛП(ПоказательОбъект.КолонкаОтчета.Код);
		  ПоказательОбъект.Наименование =  СокрЛП(ПоказательОбъект.КолонкаОтчета.Наименование);
		  ПоказательОбъект.Записать();
		  Инд = Инд+1;
		  
	  КонецЦикла;
		
КонецПроцедуры	

Процедура ОбновитьХранилищеОтборов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК Бланк
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка
			
			
			НастройкиСоставаБланков = РегистрыСведений.НастройкиСоставаАналитикиБланков.СоздатьНаборЗаписей();
			НастройкиСоставаБланков.Отбор.БланкОтчета.Установить(Выборка.Бланк);		
			НастройкиСоставаБланков.Прочитать();
			Для Каждого стрЗапись Из НастройкиСоставаБланков Цикл
				
				Если стрЗапись.ПредставлениеНастройки = "Не заполнять" Тогда
					стрЗапись.ПредставлениеНастройки = "Все элементы";
				КонецЕсли;
				Если стрЗапись.ПредставлениеНастройки = "Состав не определен" Тогда
					стрЗапись.ПредставлениеНастройки = "Все элементы";
				КонецЕсли;
				
				Если СтрНайти(стрЗапись.ЗначениеНастройки,"{")>0 Тогда
					стрЗапись.ЗначениеНастройки = ЗначениеВСтрокуВнутр(ЗначениеИзСтрокиВнутр(стрЗапись.ЗначениеНастройки).Отбор); 
				КонецЕсли;
				
			КонецЦикла;	
			
			
			НастройкиСоставаБланков.Записать(Истина);
			
		Исключение
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = НСтр("ru = 'Ошибка обновления отбора бланка сводной таблицы %Бланк%
                                 |
                                 |Текст ошибки:
                                 |%ТекОшибка%'");
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%Бланк%", Строка(Выборка.Бланк));
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%ТекОшибка%", Строка(ТекОшибка));
			ЗаписьЖурналаРегистрации("ОбновлениеСтруктурыБланковСТ", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСоставОтборов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСоставаАналитикиБланков.ЗначениеНастройки,
	|	НастройкиСоставаАналитикиБланков.ПредставлениеНастройки,
	|	НастройкиСоставаАналитикиБланков.БланкОтчета
	|ИЗ
	|	РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	|ГДЕ
	|	НастройкиСоставаАналитикиБланков.Показатель = &Показатель";
	
	
	Запрос.УстановитьПараметр("Показатель",Справочники.НастройкиСтруктурыБланка.ПустаяСсылка());				
	ТзГлобальныхНастроек = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСтруктурыБланка.Ссылка КАК Показатель,
	|	НастройкиСоставаАналитикиБланков.ЗначениеНастройки,
	|	НастройкиСоставаАналитикиБланков.ПредставлениеНастройки,
	|	НастройкиСтруктурыБланка.Владелец КАК Бланк
	|ИЗ
	|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСоставаАналитикиБланков КАК НастройкиСоставаАналитикиБланков
	|		ПО НастройкиСтруктурыБланка.Ссылка = НастройкиСоставаАналитикиБланков.Показатель
	|ГДЕ
	|	НастройкиСтруктурыБланка.ИндексЭлемента = 2";
	
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЗначениеНастройки = NULL Тогда
			
			НайденнаяГлобальнаяНастройка = ТзГлобальныхНастроек.НайтиСтроки(Новый Структура("БланкОтчета",Выборка.Бланк));
			
			Если НайденнаяГлобальнаяНастройка.Количество() >0  Тогда
				
				СводнаяТаблицаУХ.СоздатьНастройкуПоказателя(Выборка.Бланк,Выборка.Показатель);
					
			КонецЕсли;	 
			
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьМасштабШкалыВремени() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК Бланк
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1";
	
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиМасштабаВремени = РегистрыСведений.НастройкиМасштабаВремени.СоздатьНаборЗаписей();
		НастройкиМасштабаВремени.Отбор.Бланк.Установить(Выборка.Бланк);		
		НастройкиМасштабаВремени.Прочитать();
		
		Для Каждого стрЗапись Из НастройкиМасштабаВремени Цикл
			
			Попытка 				
				КлючШкалыОбъект = стрЗапись.КлючПериода.ПолучитьОбъект();
			Исключение
				Продолжить;
			КонецПопытки;
			
			Если Выборка.Бланк.Периодичность = Перечисления.Периодичность.Месяц Тогда
				
				 стрЗапись.ДетализацияМесяцы = Истина;
				 КлючШкалыОбъект.ИтогиПоМесяцам = Истина;
				 КлючШкалыОбъект.Записать();
				
			ИначеЕсли Выборка.Бланк.Периодичность = Перечисления.Периодичность.Квартал Тогда
				
				 стрЗапись.ДетализацияКварталы = Истина;	
				 КлючШкалыОбъект.ИтогиПоКварталам = Истина;
				 КлючШкалыОбъект.Записать();

			ИначеЕсли Выборка.Бланк.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				
				 стрЗапись.ДетализацияПолугодия = Истина;		
				 КлючШкалыОбъект.ИтогиПоПолугодиям = Истина;
				 КлючШкалыОбъект.Записать();
				
			ИначеЕсли Выборка.Бланк.Периодичность = Перечисления.Периодичность.День Тогда
				
				стрЗапись.ДетализацияДни = Истина;				
			КонецЕсли;	
			
		КонецЦикла;
		
				
		НастройкиМасштабаВремени.Записать(Истина);
		
		
	КонецЦикла;
	
КонецПроцедуры
	
Процедура ОбновитьПредставлениеАналитик() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка КАК Бланк
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 1";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НастройкиПараметровАналитик = РегистрыСведений.НастройкиПараметровАналитик.СоздатьНаборЗаписей();
		НастройкиПараметровАналитик.Отбор.Бланк.Установить(Выборка.Бланк);		
		НастройкиПараметровАналитик.Прочитать();
		
		Для Каждого стрЗапись Из НастройкиПараметровАналитик Цикл
					
			Если НЕ ЗначениеЗаполнено(стрЗапись.Представление) ИЛИ стрЗапись.Представление = "Наименование" Тогда
				
				  стрЗапись.Представление = "&Наименование";
				
			КонецЕсли;	
				
		КонецЦикла;
				
		НастройкиПараметровАналитик.Записать(Истина);
		
		НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
		НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Выборка.Бланк);		
		НастройкиСтруктурыБланка.Прочитать();
		
		Для Каждого стрЗапись Из НастройкиСтруктурыБланка Цикл
			
			Если НЕ ЗначениеЗаполнено(стрЗапись.Представление) ИЛИ стрЗапись.Представление = "Наименование" Тогда

				
				  стрЗапись.Представление = "&Наименование";
				
			КонецЕсли;	
						
		КонецЦикла;
				
		НастройкиСтруктурыБланка.Записать(Истина);

	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПредставлениеКолонокСТ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСтруктурыБланка.Ссылка,
	|	НастройкиСтруктурыБланка.ВидОтклонения
	|ИЗ
	|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	|ГДЕ
	|	НастройкиСтруктурыБланка.ИндексЭлемента = 10
	|	И НастройкиСтруктурыБланка.Расчетный = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если СокрЛП(Выборка.ВидОтклонения) <> "ТекущееЗначение"  Тогда		
			ВыборкаОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВыборкаОбъект.ВидОтклонения = "ТекущееЗначение";
			ВыборкаОбъект.Записать();		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьКодыПВХВидыСубконтоКопоративные() Экспорт
	
	СубконтоКорпоративныеУХ = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Выбрать();	
	Счетчик = 1;	
	Пока СубконтоКорпоративныеУХ.Следующий() Цикл	
		
		оХарактеристика = СубконтоКорпоративныеУХ.Ссылка.ПолучитьОбъект();
		оХарактеристика.Код = СтрЗаменить("УХ"+(Формат(Счетчик,"ЧЦ=8; ЧГ=0; ЧВН="))," ","");        
		
		Попытка		
			оХарактеристика.Записать();		
		Исключение
			
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = НСтр("ru = 'Ошибка обновления кода ПВХ субконто корпоративные %Ссылка%
                 |
                 |Текст ошибки:
                 |%ТекОшибка%'");
			ТекстОшибки1 = ТекстОшибки1 + СтрЗаменить(ТекстОшибки1, "%Ссылка%", Строка(СубконтоКорпоративныеУХ.Ссылка));
			ТекстОшибки1 = ТекстОшибки1 + СтрЗаменить(ТекстОшибки1, "%ТекОшибка%", Строка(ТекОшибка));
			ЗаписьЖурналаРегистрации("ОбновлениеПВХСубконто", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);
			
		КонецПопытки;
		
		оХарактеристика.Записать();                                                         
		Счетчик = Счетчик+1;	
		
	КонецЦикла;	
		
КонецПроцедуры	

Процедура ОбновитьСтатусыПериодов() Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыПериодовСценариев.Сценарии,
	               |	СтатусыПериодовСценариев.Периоды,
	               |	СтатусыПериодовСценариев.Организации,
	               |	СтатусыПериодовСценариев.УдалитьПроекты,
	               |	СтатусыПериодовСценариев.СтатусПоказателя,
	               |	СтатусыПериодовСценариев.СтатусБлокировки,
	               |	СтатусыПериодовСценариев.ДатаЗакрытияПериода,
	               |	СтатусыПериодовСценариев.ВерсияРегламента
	               |ИЗ
	               |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |ГДЕ
	               |	СтатусыПериодовСценариев.УдалитьПроекты <> &ПустойПроект";
	
	Запрос.УстановитьПараметр("ПустойПроект",Справочники.Проекты.ПустаяСсылка() );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Менеджер = РегистрыСведений.СтатусыПериодовСценариев.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(Менеджер,Выборка);		
		Менеджер.Прочитать();
		Менеджер.Удалить();	
	КонецЦикла;
	
КонецПроцедуры	

	
#КонецОбласти


Процедура ЗаполнитьПодменюСохраненныхВариантов(ЭтаФорма,Родитель,СоответствиеВариантовНастроекТаблицы,ИмяТекущегоВарианта="") Экспорт
	
	СоответствиеВариантовНастроекТаблицы.Очистить();	
	МассивУдаляемыхЭлементов = Новый Массив();

	Для Каждого Эл Из Родитель.ПодчиненныеЭлементы Цикл	
		ЭтаФорма.Команды.Удалить(ЭтаФорма.Команды[Эл.ИмяКоманды]);
		МассивУдаляемыхЭлементов.Добавить(Эл);
	КонецЦикла;	

	Для Каждого УдЭлемент Из МассивУдаляемыхЭлементов Цикл
		ЭтаФорма.Элементы.Удалить(УдЭлемент);
	КонецЦикла;	
	
	
	//Добавляем вариант по умолчанию
	УидВарианта = СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","");
	ИмяКоманды = "ОткрытьВариант_"+УидВарианта;
	ЭлМеню = ЭтаФорма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"),Родитель); 
	КомандаСтатистика = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	КомандаСтатистика.Действие = "ОткрытьВариантТаблицы";
	НовыйЗаголовок = НСтр("ru = '%Бланк% (основной вариант)'");
	НовыйЗаголовок = СтрЗаменить(НовыйЗаголовок, "%Бланк%", ЭтаФорма.Бланк.Наименование);
	КомандаСтатистика.Заголовок = НовыйЗаголовок;
	ЭлМеню.ИмяКоманды = ИмяКоманды;	
	
	нСоответствие = СоответствиеВариантовНастроекТаблицы.Добавить();
	нСоответствие.ИдентификаторВарианта = ИмяКоманды;
	нСоответствие.ИмяВарианта = ЭтаФорма.Бланк.Наименование;
    нСоответствие.ОсновнаяНастройка = Истина;
	Если ИмяТекущегоВарианта = "" Тогда
		нСоответствие.Используется = Истина;
		ЭлМеню.Пометка = Истина;
	КонецЕсли;	
		

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ВариантыНастроекБланковСТ.ИмяНастройки,
	|	ВариантыНастроекБланковСТ.ПредставлениеНастройки
	|ИЗ
	|	РегистрСведений.ВариантыНастроекБланковСТ КАК ВариантыНастроекБланковСТ
	|ГДЕ
	|	ВариантыНастроекБланковСТ.Бланк = &Бланк
	|	И ВариантыНастроекБланковСТ.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Бланк",ЭтаФорма.Бланк);
	Запрос.УстановитьПараметр("Пользователь", ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ФлВарианта = Ложь;	
	
	Пока Выборка.Следующий() Цикл	
		УидВарианта = СтрЗаменить(Строка(Новый УникальныйИдентификатор()),"-","");
		ИмяКоманды = "ОткрытьВариант_"+УидВарианта;
		ЭлМеню = ЭтаФорма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"),Родитель); 
		КомандаСтатистика = ЭтаФорма.Команды.Добавить(ИмяКоманды);
		КомандаСтатистика.Действие   = "ОткрытьВариантТаблицы";
		КомандаСтатистика.Заголовок  = Выборка.ИмяНастройки;
		ЭлМеню.ИмяКоманды = ИмяКоманды;	
		
		нСоответствие = СоответствиеВариантовНастроекТаблицы.Добавить();
		нСоответствие.ИдентификаторВарианта = ИмяКоманды;
		нСоответствие.ИмяВарианта = Выборка.ИмяНастройки;
		
		Если ИмяТекущегоВарианта = нСоответствие.ИмяВарианта Тогда
			нСоответствие.Используется = Истина;
			ЭлМеню.Пометка = Истина;
			ФлВарианта = Истина;
		КонецЕсли;		
	КонецЦикла;
		
	//Если Не нашлось ИмяТекущегоВарианта то поставим активным основеной вариант
	Если  ЗначениеЗаполнено(ИмяТекущегоВарианта) И НЕ ФлВарианта  Тогда
		  СоответствиеВариантовНастроекТаблицы[0].Используется = Истина;
		  Родитель.ПодчиненныеЭлементы[0].Пометка = Истина;
		  ИмяТекущегоВарианта = "";
	КонецЕсли;	
	
	
КонецПроцедуры


#Область ИнтерфейсГенерацииБланкаСТ

Процедура СоздатьМакетСводнойТаблицы(БланкОбъект) Экспорт
			
	
	СтрукутраПараметров = Новый Структура;
	СтрукутраПараметров.Вставить("Владелец",БланкОбъект.Владелец);
	СтрукутраПараметров.Вставить("Ссылка",БланкОбъект.Ссылка);
	СтрукутраПараметров.Вставить("ИерархияГруппировокСтрок",БланкОбъект.ИерархияГруппировокСтрок);
	СтрукутраПараметров.Вставить("ИерархияГруппировокКолонок",БланкОбъект.ИерархияГруппировокКолонок);
	СтрукутраПараметров.Вставить("Периодичность",БланкОбъект.Периодичность);
 
	
	Владелец 					= СтрукутраПараметров.Владелец;
	Ссылка  					= СтрукутраПараметров.Ссылка;
	ИерархияГруппировокСтрок 	= СтрукутраПараметров.ИерархияГруппировокСтрок;
	ИерархияГруппировокКолонок 	= СтрукутраПараметров.ИерархияГруппировокКолонок;
	Периодичность               = СтрукутраПараметров.Периодичность;
	
	АдресТаблицИнтерфейса = "";	
	
    Если Не ЗначениеЗаполнено(АдресТаблицИнтерфейса) Тогда
		СтруктураТаблицИнтерфейса = СводнаяТаблицаУХ.ПолучитьОписаниеТаблицИнтерфейса();
	Иначе
		СтруктураТаблицИнтерфейса = ПолучитьИзВременногоХранилища(АдресТаблицИнтерфейса);	
	КонецЕсли;	
	
	НастройкиПолейД=СтруктураТаблицИнтерфейса.ДоступныеПоля;
	Нполе = НастройкиПолейД.Строки.Добавить();	
	Нполе.Поле = "";	
	
    флОшибки = "";
	
	КэшАналитикПоказателейСТ = Новый ТаблицаЗначений;
	СводнаяТаблицаУХ.ЗаполнитьДоступныеПоля(СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля,Владелец,Ссылка,СтруктураТаблицИнтерфейса.КэшАналитикПоказателей,
	СтруктураТаблицИнтерфейса.ДоступныеАналитики,СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели,КэшАналитикПоказателейСТ,флОшибки);
	
	Если ЗначениеЗаполнено(флОшибки) Тогда
		 Возврат;
	КонецЕсли;	
	
	
	КэшАналитикПоказателейСТАдрес = ПоместитьВоВременноеХранилище(КэшАналитикПоказателейСТ, Новый УникальныйИдентификатор);
	
	Для Каждого дПоле из СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля Цикл
		нНполе =  Нполе.Строки.Добавить();
		нНполе.ПолеСиноним = СтрЗаменить(дПоле.Код,"Фильтр_","");
	КонецЦикла;
	
	СводнаяТаблицаУХ.ЗаполнитьРесурсы(Ссылка,СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы);
		
	СхемаСКДЭталон=ПолучитьОбщийМакет("ШаблонСводнойТаблицы");
	
	СводнаяТаблицаУХ.ЗаполнитьПоляСхемы(СхемаСКДЭталон,СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля);
	
	АдресСхемыКомпоновкиДанныхЭталон = ПоместитьВоВременноеХранилище(СхемаСКДЭталон,Новый УникальныйИдентификатор);
	
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	ЕстьСохраненныеЭлементы = Ложь;

	СводнаяТаблицаУХ.ПолучитьТаблицуВыбранныхПоказателей(Ссылка,АдресТаблицИнтерфейса,СтруктураТаблицИнтерфейса);
	ОбновитьДанныеОсям = Истина;
	
	Если ОбновитьДанныеОсям Тогда
		
		СтруктураТаблицИнтерфейса.ТаблицаКолонки.Очистить();
		СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Очистить();
        СтруктураТаблицИнтерфейса.ТаблицаСтроки.Очистить();

		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ось,
		               |	НастройкиСтруктурыБланка.Наименование,
		               |	НастройкиСтруктурыБланка.Код,
		               |	НастройкиСтруктурыБланка.ТипСтрока,
		               |	НастройкиСтруктурыБланка.ИндексКартинки,
		               |	НастройкиСтруктурыБланка.ТипСубконто,
		               |	НастройкиСтруктурыБланка.НПП КАК НПП,
		               |	НастройкиСтруктурыБланка.Редактируется,
		               |	НастройкиСтруктурыБланка.Представление,
		               |	НастройкиСтруктурыБланка.Сортировка,
		               |	НастройкиСтруктурыБланка.ГлобальнаяАналитика,
		               |	НастройкиСтруктурыБланка.ПоддерживатьИерархию
		               |ИЗ
		               |	РегистрСведений.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Бланк = &Бланк
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НПП";
		
		Запрос.УстановитьПараметр("Бланк",Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
				
		Пока Выборка.Следующий() Цикл
			
			Если СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Выборка.Код)).Количество()=0 Тогда
				 Продолжить;
			КонецЕсли;	
			
			ЕстьСохраненныеЭлементы = Истина;
			Если Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка Тогда
				нЭлемент = СтруктураТаблицИнтерфейса.ТаблицаКолонки.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка Тогда
				нЭлемент = СтруктураТаблицИнтерфейса.ТаблицаСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница Тогда 
				нЭлемент = СтруктураТаблицИнтерфейса.ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	 
	 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтроки Цикл
		 ИсключаемыйЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		 Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			 СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		 КонецЕсли;	 
	 Конеццикла;	 
	 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаКолонки Цикл
		 ИсключаемыйЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		 Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			 СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		 КонецЕсли;	 
	 Конеццикла;	 
	 Для Каждого Стр Из СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл
		 ИсключаемыйЭлемент = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		 Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			 СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		 КонецЕсли;	 
	 Конеццикла;	 
	 	 
	НастройкиСхемыСводнойТаблицы 			= Новый  КомпоновщикНастроекКомпоновкиДанных; 
	ДополнительныеНастройкиСводнойТаблицы 	= Новый  КомпоновщикНастроекКомпоновкиДанных;
	
	
	ТаблицаСтроки 			= СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки 			= СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы 		= СтруктураТаблицИнтерфейса.ТаблицаСтраницы;
	ДоступныеАналитики 		= СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	КэшАналитикПоказателей  = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
    ТаблицаКолонкиИСтроки   = СтруктураТаблицИнтерфейса.ТаблицаСтроки.Скопировать();
	ТаблицаВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы;
	ДоступныеПоля           = СтруктураТаблицИнтерфейса.ДоступныеПоля;
	НастройкиСреза  		= СтруктураТаблицИнтерфейса.НастройкиСреза;
	
	ДатаНачала = НачалоГода(ТекущаяДата());   //Горизонт планирования по-умолчанию: текущий год
	ДатаОкончания = КонецГода(ТекущаяДата());
 	
	ТаблицаКолонкиИСтроки_ = ТаблицаКолонкиИСтроки.Скопировать();
	СтруктураТаблицИнтерфейса.НастройкиСреза.Строки.Очистить();
		
	ВыбранныеРесурсы = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Расчетный,Использовать",Ложь,Истина));
	ВыбранныеРесурсы_Структура = Новый Структура;
	
	Если ВыбранныеРесурсы.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;
	 	
	НастройкиПолейД=СтруктураТаблицИнтерфейса.ДоступныеПоля;
	
	СхемаСКДЭталон=ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхЭталон);
	СхемаСКДЭталон.ВычисляемыеПоля.Очистить();
	СхемаСКДЭталон.ПоляИтога.Очистить();
		
	СхемаСКД=Новый СхемаКомпоновкиДанных;
	НовыйИстчник=СхемаСКД.ИсточникиДанных.Добавить();
	НовыйИстчник.Имя="Источник1";
	НовыйИстчник.ТипИсточникаДанных="Local";
    
	
	НастройкиИспользуемыхРесурсов = СтруктураТаблицИнтерфейса.ДополнительныеПоля.Скопировать(Новый Структура("Использовать",Истина));
	СводнаяТаблицаУХ.СоздатьОписаниеПолейРесурсов(СтруктураТаблицИнтерфейса, ВыбранныеРесурсы_Структура, СхемаСКД,СхемаСКДЭталон, Ложь);
	
	////------------- Добавляем вычисляемые поля по ресурсам	
	Для Каждого СтрРесурс ИЗ НастройкиИспользуемыхРесурсов Цикл
	
		ПрефиксРесурса = "";
		Если СтрРесурс.Расчетный И СтрРесурс.ВидОтклонения = "Значение" Тогда 
			 ПрефиксРесурса = "БАЗА_";		 
		ИначеЕсли НЕ СтрРесурс.Расчетный Тогда	 
			 ПрефиксРесурса = "";
		Иначе	 
			 Продолжить;
		КонецЕсли;
		
		НовоеПолеВыбор=НастройкиСхемыСводнойТаблицы.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	    НовоеПолеВыбор.Поле=Новый ПолеКомпоновкиДанных(ПрефиксРесурса+СтрРесурс.КодПоказателя);

		НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
		НовоеПолеВычисления.Заголовок=СтрРесурс.Заголовок;
		НовоеПолеВычисления.Выражение="0";
		НовоеПолеВычисления.ПутьКДанным=ПрефиксРесурса+СтрРесурс.КодПоказателя;		
		
	КонецЦикла;	

	Для Каждого Стр Из СхемаСКДЭталон.ВычисляемыеПоля Цикл
		
		 Стр.Выражение = "0";
		 
	КонецЦикла;	
	
	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="СтатусПоказателя";
	НовоеПолеВычисления.Выражение="0";
	НовоеПолеВычисления.ПутьКДанным="СтатусПоказателя";

	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="СтатусБлокировки";
	НовоеПолеВычисления.Выражение="0";
	НовоеПолеВычисления.ПутьКДанным="СтатусБлокировки";

	НовоеПолеВычисления=СхемаСКДЭталон.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="КУдалению";
	НовоеПолеВычисления.Выражение="Ложь";
	НовоеПолеВычисления.ПутьКДанным="КУдалению";
	
	АдресСхемыКомпоновкиДанныхЭталон=ПоместитьВоВременноеХранилище(СхемаСКДЭталон,Новый УникальныйИдентификатор);	
	НастройкиСхемыСводнойТаблицы.ЗагрузитьНастройки(СхемаСКДЭталон.НастройкиПоУмолчанию);
	
	//----------------- Обновляем структуру предварительной схемы
	ТЗСтрок=СводнаяТаблицаУХ.ПолучитьСоставСтрок(Ссылка,ТаблицаСтроки,ТаблицаКолонки,ТаблицаСтраницы,ТаблицаКолонкиИСтроки_,ДоступныеАналитики,КэшАналитикПоказателей);
	АдресСхемыНабораСтрок=ПоместитьВоВременноеХранилище(ТЗСтрок,Новый УникальныйИдентификатор);
	
	НастройкиШкалыПериодов = СводнаяТаблицаУХ.ПолучитьНастройкиШкалыПериодовПоУмолчанию(Ссылка).Скопировать();
	ТЗКолонок=СводнаяТаблицаУХ.ПолучитьШкалуПериодов(Ссылка,Ложь,ДатаНачала,ДатаОкончания,,НастройкиШкалыПериодов);	
	АдресСхемыНабораКолонок=ПоместитьВоВременноеХранилище(ТЗКолонок, Новый УникальныйИдентификатор);
		
	//------------------ Получаем таблицу источник соединением строк и колонок		
	Если ТЗСтрок.Количество()=0 Тогда 
		Возврат;
	КонецЕсли;	
    КоличествоЯчеек = 0;	
		
	СтруктураФильтровИтог = Новый Структура();
	СтруктураФильтровИтог.Вставить("ВидОтчета",СводнаяТаблицаУХ.ПолучитьИспользуемыеВидыОтчетов(БланкОбъект.Ссылка));
	Для Каждого Страница ИЗ СтруктураТаблицИнтерфейса.ТаблицаСтраницы Цикл	
		СтруктураФильтровИтог.Вставить(Страница.Код,Новый(Тип(Страница.ТипСтрока)));  
	КонецЦикла;
		
	Результат = СводнаяТаблицаУХ.ПолучитьШаблонСводнойТаблицы(СтруктураФильтровИтог, СтруктураТаблицИнтерфейса, ВыбранныеРесурсы, БланкОбъект.Периодичность, ТЗСтрок, ТЗКолонок, КоличествоЯчеек);

	//------------------- Выводим предварительный макет
	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("мПоказателиРаскрытия",Результат);
    НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Значение=Неопределено;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[0].Использование=Истина;

	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	ТипОбъекта = "Таблица";
		
	СводнаяТаблицаУХ.ПреобразоватьНастройкиКонечнойСхемы(ТипОбъекта,ВыбранныеРесурсы,НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,ТаблицаКолонки,ИерархияГруппировокСтрок,ИерархияГруппировокКолонок,
	НастройкиИспользуемыхРесурсов,Ложь,Ложь,Периодичность);	

	
	//	
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[1].Значение=РасположениеИтоговКомпоновкиДанных.Авто;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[6].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Использование=Истина;
	НастройкиСхемыСводнойТаблицы.Настройки.ПараметрыВывода.Элементы[7].Значение=РасположениеИтоговКомпоновкиДанных.Нет;
	
	ДополнительныеНастройкиСводнойТаблицы.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхЭталон));
	
	//Вычисляемые для правила обработки по умолчанию пометить зеленым
	СводнаяТаблицаУХ.ОформитьВычисляемые(Владелец,НастройкиСхемыСводнойТаблицы.Настройки,НастройкиИспользуемыхРесурсов);
	
	//Добавить сортировки по всем полям таблицы
	СводнаяТаблицаУХ.УстановитьПредставлениеГруппировокСТ(СхемаСКДЭталон,НастройкиСхемыСводнойТаблицы,ТаблицаСтроки,ТаблицаКолонки);
	
	////////////// Установим  стандартное оформление для показателей и группировок
    СводнаяТаблицаУХ.УстановитьОформлениеГруппировокСТ(НастройкиСхемыСводнойТаблицы.Настройки,ТаблицаСтроки,Периодичность,,,Ложь);

	////////////// Установим  оформление для агрегированных  группировок
	СтруктураТаблицИнтерфейса = Новый Структура;
	СтруктураТаблицИнтерфейса.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	СтруктураТаблицИнтерфейса.Вставить("ТаблицаКолонки",ТаблицаКолонки);
    СтруктураТаблицИнтерфейса.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
    КэшАналитикПоказателейСТ = ПолучитьИзВременногоХранилища(КэшАналитикПоказателейСТАдрес);
	
	СводнаяТаблицаУХ.ОформитьУровниГруппировокПоказателией(КэшАналитикПоказателейСТ,Неопределено,НастройкиСхемыСводнойТаблицы.Настройки,СтруктураТаблицИнтерфейса,,Ложь,Периодичность);
	
	//Представление периодов: кратко
	СхемаСКДЭталон.НаборыДанных.НаборРаскрытие.Поля[0].ВыражениеПредставления = "Периоды.КраткоеНаименование";
		
	АдресХранилищаДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки,Новый УникальныйИдентификатор);
	АдресНастроекСхемыЭталон = ПоместитьВоВременноеХранилище(НастройкиСхемыСводнойТаблицы.Настройки,Новый УникальныйИдентификатор);
	
	СтрукутраПараметров.Вставить("АдресСхемыКомпоновкиДанныхЭталон",АдресСхемыКомпоновкиДанныхЭталон);
	СтрукутраПараметров.Вставить("АдресСхемыНабораКолонок",АдресСхемыНабораКолонок);
    СтрукутраПараметров.Вставить("АдресСхемыНабораСтрок",АдресСхемыНабораСтрок);
    СтрукутраПараметров.Вставить("АдресНастроекСхемыЭталон",АдресНастроекСхемыЭталон);
    СтрукутраПараметров.Вставить("ТаблицаСтраницы",ТаблицаСтраницы);
    СтрукутраПараметров.Вставить("ТаблицаКолонки",ТаблицаКолонки);
	СтрукутраПараметров.Вставить("ТаблицаСтроки",ТаблицаСтроки);
	
	ЗаписатьСтруктуруТаблицы(СтрукутраПараметров);
			
КонецПроцедуры

Процедура ПрочитатьСтруктуруТаблицы(ОбновитьДанныеОсям=Истина,СтруктураТаблицИнтерфейса,АдресСхемыКомпоновкиДанныхЭталон,КэшАналитикПоказателейСТАдрес,СтрукутраПараметров) Экспорт
	
	
	Владелец 					= СтрукутраПараметров.Владелец;
	Ссылка  					= СтрукутраПараметров.Ссылка;
	ИерархияГруппировокСтрок 	= СтрукутраПараметров.ИерархияГруппировокСтрок;
	ИерархияГруппировокКолонок 	= СтрукутраПараметров.ИерархияГруппировокКолонок;
	Периодичность               = СтрукутраПараметров.Периодичность;

	
	ТаблицаДоступныеПоля = СтруктураТаблицИнтерфейса.ТаблицаДоступныеПоля;
	КэшАналитикПоказателей = СтруктураТаблицИнтерфейса.КэшАналитикПоказателей;
	ДоступныеАналитики =     СтруктураТаблицИнтерфейса.ДоступныеАналитики;
	ИспользуемыеПоказатели =  СтруктураТаблицИнтерфейса.ИспользуемыеПоказатели;
	ТаблицаВыбранныеРесурсы =  СтруктураТаблицИнтерфейса.ТаблицаВыбранныеРесурсы;
	
	ТаблицаСтроки = СтруктураТаблицИнтерфейса.ТаблицаСтроки;
	ТаблицаКолонки = СтруктураТаблицИнтерфейса.ТаблицаКолонки;
	ТаблицаСтраницы = СтруктураТаблицИнтерфейса.ТаблицаСтраницы;

	
	НастройкиПолейД=СтруктураТаблицИнтерфейса.ДоступныеПоля;
	Нполе = НастройкиПолейД.Строки.Добавить();	
	Нполе.Поле = "";	
	ИспользуемыеПоказатели = Новый ТаблицаЗначений;
	КэшАналитикПоказателейСТ = Новый ТаблицаЗначений;
	СводнаяТаблицаУХ.ЗаполнитьДоступныеПоля(ТаблицаДоступныеПоля,Владелец,Ссылка,КэшАналитикПоказателей,ДоступныеАналитики,ИспользуемыеПоказатели,КэшАналитикПоказателейСТ);
	
	КэшАналитикПоказателейАдрес = ПоместитьВоВременноеХранилище(КэшАналитикПоказателей,Новый УникальныйИдентификатор);
	КэшАналитикПоказателейСТАдрес = ПоместитьВоВременноеХранилище(КэшАналитикПоказателейСТ, Новый УникальныйИдентификатор);

	
	Для Каждого дПоле из ТаблицаДоступныеПоля Цикл
		нНполе =  Нполе.Строки.Добавить();
		нНполе.ПолеСиноним = СтрЗаменить(дПоле.Код,"Фильтр_","");
	КонецЦикла;
	
	СводнаяТаблицаУХ.ЗаполнитьРесурсы(Ссылка,ТаблицаВыбранныеРесурсы);
	
		
	СхемаСКДЭталон=ПолучитьОбщийМакет("ШаблонСводнойТаблицы");
	СводнаяТаблицаУХ.ЗаполнитьПоляСхемы(СхемаСКДЭталон,ТаблицаДоступныеПоля);
    АдресСхемыКомпоновкиДанныхЭталон = ПоместитьВоВременноеХранилище(СхемаСКДЭталон);
	
	ИзмененаСтруктура = Истина;
	ИзмененыДанные = Истина;
	ЕстьСохраненныеЭлементы = Ложь;

	Если ОбновитьДанныеОсям Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	НастройкиСтруктурыБланка.Ось,
		               |	НастройкиСтруктурыБланка.Наименование,
		               |	НастройкиСтруктурыБланка.Код,
		               |	НастройкиСтруктурыБланка.ТипСтрока,
		               |	НастройкиСтруктурыБланка.ИндексКартинки,
		               |	НастройкиСтруктурыБланка.ТипСубконто,
		               |	НастройкиСтруктурыБланка.НПП КАК НПП,
		               |	НастройкиСтруктурыБланка.Редактируется,
		               |	НастройкиСтруктурыБланка.Представление,
		               |	НастройкиСтруктурыБланка.Сортировка,
		               |	НастройкиСтруктурыБланка.ГлобальнаяАналитика
		               |ИЗ
		               |	РегистрСведений.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
		               |ГДЕ
		               |	НастройкиСтруктурыБланка.Бланк = &Бланк
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НПП";
		
		Запрос.УстановитьПараметр("Бланк",Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ЕстьСохраненныеЭлементы = Истина;
			Если Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка Тогда
				нЭлемент = ТаблицаКолонки.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка Тогда
				нЭлемент = ТаблицаСтроки.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			ИначеЕсли Выборка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница Тогда 
				нЭлемент = ТаблицаСтраницы.Добавить();
				ЗаполнитьЗначенияСвойств(нЭлемент,Выборка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Стр Из ТаблицаСтроки Цикл
		ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		КонецЕсли;	 
	Конеццикла;	 
	Для Каждого Стр Из ТаблицаКолонки Цикл
		ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		КонецЕсли;	 
	Конеццикла;	 
	Для Каждого Стр Из ТаблицаСтраницы Цикл
		ИсключаемыйЭлемент = ТаблицаДоступныеПоля.НайтиСтроки(Новый Структура("Код",Стр.Код));
		Если ИсключаемыйЭлемент.Количество() = 1 Тогда
			ТаблицаДоступныеПоля.Удалить(ИсключаемыйЭлемент[0]); 
		КонецЕсли;	 
	Конеццикла;	 
	 		 
 КонецПроцедуры
 
Процедура ЗаписатьСтруктуруТаблицы(СтрукутраПараметров) Экспорт
	
	
	Владелец 							= СтрукутраПараметров.Владелец;
	Ссылка  							= СтрукутраПараметров.Ссылка;
	ИерархияГруппировокСтрок 			= СтрукутраПараметров.ИерархияГруппировокСтрок;
	ИерархияГруппировокКолонок 			= СтрукутраПараметров.ИерархияГруппировокКолонок;
	Периодичность               		= СтрукутраПараметров.Периодичность;
    АдресСхемыКомпоновкиДанныхЭталон 	= СтрукутраПараметров.АдресСхемыКомпоновкиДанныхЭталон;
	АдресСхемыНабораКолонок  			= СтрукутраПараметров.АдресСхемыНабораКолонок;
	АдресСхемыНабораСтрок               = СтрукутраПараметров.АдресСхемыНабораСтрок;
	АдресНастроекСхемыЭталон            = СтрукутраПараметров.АдресНастроекСхемыЭталон;
	ТаблицаСтраницы  					= СтрукутраПараметров.ТаблицаСтраницы;
	ТаблицаКолонки               		= СтрукутраПараметров.ТаблицаКолонки;
	ТаблицаСтроки            			= СтрукутраПараметров.ТаблицаСтроки;
 	
	Если АдресСхемыКомпоновкиДанныхЭталон = "" Тогда
	     Возврат;
	КонецЕсли;	 
		
	
	МассивИменОбластей = Новый Массив;	
		
	НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
	НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Ссылка);
	НастройкиСтруктурыБланка.Отбор.Ось.Установить(Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница);
	Инд =1;
	Для Каждого Страница Из ТаблицаСтраницы Цикл
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк = Ссылка;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Страница;
		ЗаполнитьЗначенияСвойств(нНастройкиСтруктурыБланка,Страница);
        нНастройкиСтруктурыБланка.НПП = Инд;
        Инд = Инд+1;	
	КонецЦикла;
	НастройкиСтруктурыБланка.Записать(Истина);

	Инд =1;
	НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
	НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Ссылка);
	НастройкиСтруктурыБланка.Отбор.Ось.Установить(Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка);
	Для Каждого Страница Из ТаблицаКолонки Цикл
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк =  Ссылка;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Колонка;
		ЗаполнитьЗначенияСвойств(нНастройкиСтруктурыБланка,Страница);
		нНастройкиСтруктурыБланка.НПП = Инд;
        Инд = Инд+1;
	КонецЦикла;
    НастройкиСтруктурыБланка.Записать(Истина);

	Инд =1;
	НастройкиСтруктурыБланка = РегистрыСведений.НастройкиСтруктурыБланка.СоздатьНаборЗаписей();
	НастройкиСтруктурыБланка.Отбор.Бланк.Установить(Ссылка);
	НастройкиСтруктурыБланка.Отбор.Ось.Установить(Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка);
	Для Каждого Страница Из ТаблицаСтроки Цикл
		нНастройкиСтруктурыБланка = НастройкиСтруктурыБланка.Добавить();
		нНастройкиСтруктурыБланка.Бланк =  Ссылка;
		нНастройкиСтруктурыБланка.Ось = Перечисления.ВидыНастроекБланковСводнойТаблицы.Строка;
		ЗаполнитьЗначенияСвойств(нНастройкиСтруктурыБланка,Страница);
		нНастройкиСтруктурыБланка.НПП = Инд;
        Инд = Инд+1;	
	КонецЦикла;
    НастройкиСтруктурыБланка.Записать(Истина);
	
	СтруктураСохраненныхНастроек = Новый Структура();
	
	Если ЗначениеЗаполнено(АдресСхемыНабораКолонок) Тогда
		СтруктураСохраненныхНастроек.Вставить("СхемаНабораКолонок",ПолучитьИзВременногоХранилища(АдресСхемыНабораКолонок));
		СтруктураСохраненныхНастроек.Вставить("СхемаНабораСтрок",ПолучитьИзВременногоХранилища(АдресСхемыНабораСтрок));
		СтруктураСохраненныхНастроек.Вставить("ОкончательнаяСКД",ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанныхЭталон));
		СтруктураСохраненныхНастроек.Вставить("ОкончательнаяСКДНастройки",ПолучитьИзВременногоХранилища(АдресНастроекСхемыЭталон));
		
		СохраненнаяСтруктура = РегистрыСведений.СохраненныеМакетыБланков.СоздатьНаборЗаписей();
		СохраненнаяСтруктура.Отбор.Бланк.Установить(Ссылка);
		СохраненнаяНастройка = СохраненнаяСтруктура.Добавить();
		СохраненнаяНастройка.Бланк = Ссылка;
		СохраненнаяНастройка.СохраненныйМакет = Новый ХранилищеЗначения(СтруктураСохраненныхНастроек);
		
		СохраненнаяСтруктура.Записать(Истина);	
	КонецЕсли;
	
КонецПроцедуры	 
	 
#КонецОбласти

#Область АктуализацияСценариевСПересчетомПоказателей

Процедура ВыполнитьАктуализациюУОПВФоне(АдресХранилищаСтатусаКопирования,СтруктураПараметров) Экспорт

	МассивФактическихПериодов 			= СтруктураПараметров.МассивФактическихПериодов;
	ОрганизацииДляАктуализации 			= СтруктураПараметров.ОрганизацииДляАктуализации;
	ТекущийДокументУправленияПериодом 	= СтруктураПараметров.ТекущийДокументУправленияПериодом;
	ЭтапПроцессаДляПересчета 			= СтруктураПараметров.ЭтапПроцессаДляПересчета;
	Сценарий 							= СтруктураПараметров.Сценарий;
	СценарийФактическихДанных 			= СтруктураПараметров.СценарийФактическихДанных;
	Объект                     			= Обработки.МатрицаУправленияУниверсальнымПроцессом.Создать();
	мПоследователиСтрок                 = СтруктураПараметров.мПоследователиСтрок;
	мПредшественникиСтрок               = СтруктураПараметров.мПредшественникиСтрок;

	Результат = Истина;
	
	//Выполним загрузку факта для каждого периода
	Для Каждого СтрПериод Из МассивФактическихПериодов Цикл
		
		ТекстСтатусаВыполнения = НСтр("ru = 'Перенос данных за период: %1'");
		Если ЗначениеЗаполнено(ТекстСтатусаВыполнения) тогда	
			ТекстСтатусаВыполнения = СтрШаблон(ТекстСтатусаВыполнения, Строка(СтрПериод));
		КонецЕсли;
	
		СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Прогресс", "", ТекстСтатусаВыполнения);
        ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
		
		Для Каждого стрОрганизация Из ОрганизацииДляАктуализации Цикл
			
			Если стрОрганизация.ПризнакИспользования Тогда
				
				ОбработкаАктуализации=Обработки.АктуализацияБюджетов.Создать();
				ОбработкаАктуализации.Актуализировать			=	Истина;
				ОбработкаАктуализации.НеРассчитыватьЗависимые   = 	Истина;
				ОбработкаАктуализации.ПеренестиОтклонения		=	Ложь;
				ОбработкаАктуализации.Организация	= стрОрганизация.Организация;
				ОбработкаАктуализации.ПериодОтчета	= СтрПериод;
				ОбработкаАктуализации.СценарийПлан	= Сценарий;
				ОбработкаАктуализации.СценарийФакт  = СценарийФактическихДанных;
				СводнаяТаблицаУХ.ЗаполнитьТЧПериодыГоризонта(ОбработкаАктуализации,стрОрганизация.ПериодФакт,стрОрганизация.ПериодПлан);
				
				ОбработкаАктуализации.ВыполнитьАктуализациюПоФакту();
				
			КонецЕсли;	
			
		КонецЦикла;	
			
	КонецЦикла;	
	
		
	//Если используется процесс подготовки отчетности, то пересчитаем отчеты поэтапно для каждой организации
	Если ТекущийДокументУправленияПериодом.РасширеннаяНастройка И ЗначениеЗаполнено(ЭтапПроцессаДляПересчета) Тогда
		
		СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Прогресс", "", НСтр("ru = 'Пересчет данных...'"));
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
		
		Попытка
			
			СостоянияВыполненияПроцесса = Объект.СостоянияВыполненияПроцесса.Выгрузить();
			
			УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(ТекущийДокументУправленияПериодом.ПериодСценария
			,ТекущийДокументУправленияПериодом.Сценарий
			,ТекущаяДатаСеанса()
			,СостоянияВыполненияПроцесса
			,мПоследователиСтрок
			,мПредшественникиСтрок);
						
			СформироватьПробнуюОтчетность_Сервер(ТекущийДокументУправленияПериодом,СостоянияВыполненияПроцесса,мПоследователиСтрок,ЭтапПроцессаДляПересчета);
		Исключение
			СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Ошибка", ОписаниеОшибки(), НСтр("ru = 'Возникли ошибки в ходе пересчета данных'"));	
			ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
			Результат = Ложь;
		КонецПопытки;
	КонецЕсли;	
	
	ЗаблокироватьПериоды(ТекущийДокументУправленияПериодом,МассивФактическихПериодов,ОрганизацииДляАктуализации,Сценарий);
	
	Если НЕ Результат  Тогда
		 Возврат;
	КонецЕсли;	
			
	Если Результат Тогда
		СтруктураВыполнения = Новый Структура("СтатусВыполнения, ИнформацияОбОшибке, ТекстСтатусаВыполнения", "Успех", "", НСтр("ru = 'Данные успешно актуализированы'"));
		ПоместитьВоВременноеХранилище(СтруктураВыполнения,АдресХранилищаСтатусаКопирования);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьПробнуюОтчетность_Сервер(ТекущийДокументУправленияПериодом,СостоянияВыполненияПроцесса,мПоследователиСтрок,ЭтапПроцесса, Организация = Неопределено)

	СтруктураПараметров = УправлениеПроцессамиСогласованияУХ.СформироватьСтруктуруПараметровПроцессаПодготовки();
	СтруктураПараметров.Вставить("ВерсияРегламента", ТекущийДокументУправленияПериодом.ВерсияОрганизационнойСтруктуры);
	СтруктураПараметров.Вставить("ПериодОтчета", ТекущийДокументУправленияПериодом.ПериодСценария);
	СтруктураПараметров.Вставить("Сценарий", ТекущийДокументУправленияПериодом.Сценарий);
	СтруктураПараметров.Вставить("ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	УправлениеПроцессамиСогласованияУХ.СформироватьПробнуюОтчетностьДоЭтапа(ЭтапПроцесса, СостоянияВыполненияПроцесса, мПоследователиСтрок, СтруктураПараметров);
	
КонецПроцедуры

Процедура ЗаблокироватьПериоды(ТекущийДокументУправленияПериодом,МассивФактическихПериодов,ОрганизацииДляАктуализации,Сценарий)
		
	
	УОПДатаНачала = ТекущийДокументУправленияПериодом.ПериодСценария.ДатаНачала;
	УОПДатаОкончания = ТекущийДокументУправленияПериодом.ПериодСценарияОкончание.ДатаОкончания;
	
	Для Каждого тОрганизация Из  ОрганизацииДляАктуализации Цикл
		
		Для Каждого тПериод Из  МассивФактическихПериодов Цикл
			
			НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
			
			Граница = тПериод;
			Периодичность  = тПериод.Периодичность;
			
			НаборЗаписей.Отбор.Сценарии.Установить(Сценарий);
			НаборЗаписей.Отбор.Организации.Установить(тОрганизация.Организация);
			
			НаборЗаписей.Прочитать();
			
			//Если закрываем - то закрываем все данные по организации, сценарию до текущего периода.
			Для Каждого СтрЗапись ИЗ НаборЗаписей Цикл
				Если  СтрЗапись.Периоды.ДатаНачала >= УОПДатаНачала И СтрЗапись.Периоды.ДатаНачала <= УОПДатаОкончания И СтрЗапись.Периоды.Периодичность = Периодичность Тогда
					СтрЗапись.ДатаЗакрытияПериода = ТекущаяДата();	
					Если  СтрЗапись.Периоды.ДатаНачала <= Граница.ДатаНачала Тогда 	
						СтрЗапись.СтатусБлокировки = 1;	 
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);	 		 
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти



Процедура ОбновитьПорядокСтрокБланкаСТ(Бланк_) Экспорт
		
	Бланк = Бланк_;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиСтруктурыБланка.Ссылка КАК Строка
	|ИЗ
	|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	|ГДЕ
	|	НастройкиСтруктурыБланка.Владелец = &Владелец
	|	И НастройкиСтруктурыБланка.ИндексЭлемента = 2
	|
	|УПОРЯДОЧИТЬ ПО
	|	НастройкиСтруктурыБланка.ПорядковыйНомер ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("Владелец",Бланк);
	
	ТекущаяСтрокаДерева=Неопределено;
	
	Результат=Запрос.Выполнить().Выгрузить();
	
	НПП = 1;
	
	Попытка
		
		Для Каждого стр Из Результат Цикл
			оСтр = Стр.Строка.ПолучитьОбъект();
			оСтр.глПорядковыйНомер = НПП;
			оСтр.Записать();
			НПП = НПП+1;
		КонецЦикла;	
		
	Исключение
		
		ШаблонСообщения = НСтр("ru = 'Не удалось обновить порядковые номера бланка
		|%1'");
		
		ТекстСообщения = "";
		Если ЗначениеЗаполнено(ШаблонСообщения) тогда
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		
		ЗаписьЖурналаРегистрации(
		ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.НастройкиСтруктурыБланка,
		Бланк, 
		ТекстСообщения);
			
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьОбновлениеПредставленийСтрокВСводнойТаблице(Строка) Экспорт
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	НастройкиСтруктурыБланка.Ссылка КАК Ссылка,
	                 |	НастройкиСтруктурыБланка.СтрокаОтчета.Наименование КАК СтрокаОтчетаНаименование
	                 |ИЗ
	                 |	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	                 |ГДЕ
	                 |	НастройкиСтруктурыБланка.СтрокаОтчета = &СтрокаОтчета";
	  
	  Запрос.УстановитьПараметр("СтрокаОтчета",Строка);
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Пока Выборка.Следующий() Цикл
	  	    тОбъект = Выборка.Ссылка.ПолучитьОбъект();
			тОбъект.Наименование = Выборка.СтрокаОтчетаНаименование;
			тОбъект.Записать();
	  КонецЦикла;
	  	
КонецПроцедуры	

Процедура ЗаполнитьТЧПериодыГоризонта(ОбработкаАктуализации,ПериодФакт,ПериодПлан) Экспорт
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	                |	Периоды.Ссылка КАК ПериодОтчета
	                |ИЗ
	                |	Справочник.Периоды КАК Периоды
	                |ГДЕ
	                |	Периоды.Произвольный = ЛОЖЬ
	                |	И Периоды.Периодичность = &Периодичность
	                |	И Периоды.ДатаНачала > &ДатаНачала
	                |	И Периоды.ДатаОкончания <= &ДатаОкончания
	                |	И Периоды.ПометкаУдаления = ЛОЖЬ
	                |
	                |УПОРЯДОЧИТЬ ПО
	                |	Периоды.ДатаНачала";
	 
	 Запрос.УстановитьПараметр("Периодичность",ПериодФакт.Периодичность);
	 Запрос.УстановитьПараметр("ДатаНачала",ПериодФакт.ДатаНачала);
	 Запрос.УстановитьПараметр("ДатаОкончания",ПериодПлан.ДатаОкончания);
	 
	 ОбработкаАктуализации.ПериодыГоризонта.Загрузить(Запрос.Выполнить().Выгрузить());
	 	 	
КонецПроцедуры	




