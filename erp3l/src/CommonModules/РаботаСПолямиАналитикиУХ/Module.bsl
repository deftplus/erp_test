
/////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ФУНКЦИИ ДЛЯ РАБОТЫ С ТАБЛИЦАМИ АНАЛИТИК ОБЪЕКТА

Функция НайтиСтрокуДанныхБДПоПолю(ПолеБД,ВыбранныйОбъект) Экспорт;
	
	СправочникОбъект=ПолучитьСправочникОбъект(ВыбранныйОбъект);
	
	СтрПоле=СправочникОбъект.мТаблицаПоказателейБД.Найти(ПолеБД,"ПолеБД");
	
	Если СтрПоле=Неопределено И СтрНайти(ПолеБД,".")>0 Тогда
		
		Возврат СправочникОбъект.мТаблицаПроизводныхБД.Найти(ПолеБД,"ПолеБД");
		
	Иначе
		
		Возврат СтрПоле;
		
	КонецЕсли;
	
КонецФункции // НайтиСтрокуДанныхБДПоПолю()

Функция НайтиСтрокуДереваОбъекта(ВыбранныйОбъект,ИмяДереваОбъекта,КолонкаДереваОбъекта,ИскомоеЗначение) Экспорт
	
	СправочникОбъект=ПолучитьСправочникОбъект(ВыбранныйОбъект);
	
	СтрокаДерева=СправочникОбъект[ИмяДереваОбъекта].Строки.Найти(ИскомоеЗначение,КолонкаДереваОбъекта,Истина);
	
	Если СтрокаДерева=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		СтруктураСтрока=Новый Структура;
		
		Для Каждого Колонка ИЗ СправочникОбъект[ИмяДереваОбъекта].Колонки Цикл
			
			СтруктураСтрока.Вставить(Колонка.Имя,СтрокаДерева[Колонка.Имя]);
			
		КонецЦикла;
		
		Возврат СтруктураСтрока;
		
	КонецЕсли;
				
КонецФункции // НайтиСтрокуТаблицыОбъекта()

Функция НайтиСтрокуТаблицыОбъекта(ВыбранныйОбъект,ИмяТаблицыОбъекта,КолонкаТаблицыОбъекта,ИскомоеЗначение) Экспорт
	
	СправочникОбъект=ПолучитьСправочникОбъект(ВыбранныйОбъект);
	
	СтрокаТаблицы=СправочникОбъект[ИмяТаблицыОбъекта].Найти(ИскомоеЗначение,КолонкаТаблицыОбъекта);
	
	Если СтрокаТаблицы=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		СтруктураСтрока=Новый Структура;
		
		Для Каждого Колонка ИЗ СправочникОбъект[ИмяТаблицыОбъекта].Колонки Цикл
			
			СтруктураСтрока.Вставить(Колонка.Имя,СтрокаТаблицы[Колонка.Имя]);
			
		КонецЦикла;
		
		Возврат СтруктураСтрока;
		
	КонецЕсли;
				
КонецФункции // НайтиСтрокуТаблицыОбъекта()

Функция ПолучитьНастройкуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД,ТипМетаДанных,ПервыйЭлемент=Истина) Экспорт
	
	ТаблицаНастроек=УправлениеОтчетамиУХ.ПолучитьНастройкуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД,ТипМетаДанных,ПервыйЭлемент);
	
	СписокНастроек=Новый СписокЗначений;
	СписокНастроек.ТипЗначения=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ");
	СписокНастроек.ЗагрузитьЗначения(ТаблицаНастроек.ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокНастроек;
	
КонецФункции // ПолучитьНастройкуСоответствияРеквизитов()

Функция ПолучитьДанныеДляВыбора(НастройкаСоответствия) Экспорт
	
	СтруктураДляВыбора=Новый Структура;
	СтруктураДлявыбора.Вставить("ТипОбъектаКонсолидации",НастройкаСоответствия.ТипОбъектаКонсолидации);
	СтруктураДлявыбора.Вставить("ИмяОбъектаМетаданных",НастройкаСоответствия.ИмяОбъектаМетаданных);
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда 
		
		СтруктураДляВыбора.Вставить("ТипЗначения",НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения);
		СтруктураДляВыбора.Вставить("Тип",НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]);
		СтруктураДляВыбора.Вставить("ТаблицаАналитики", Метаданные.НайтиПоТипу(СтруктураДляВыбора.Тип).ПолноеИмя());
		
	КонецЕсли;
	
	Возврат СтруктураДляВыбора;
	
КонецФункции // ПолучитьДанныеДляВыбора()

Функция ПолучитьДанныеВидаСубконто(ВидСубконто) Экспорт
	
	СтруктураДляВыбора=Новый Структура;
		
	СтруктураДляВыбора.Вставить("ТипЗначения",ВидСубконто.ТипЗначения);
	СтруктураДляВыбора.Вставить("Тип",ВидСубконто.ТипЗначения.Типы()[0]);
	СтруктураДляВыбора.Вставить("ТаблицаАналитики", Метаданные.НайтиПоТипу(СтруктураДляВыбора.Тип).ПолноеИмя());	
	
	Возврат СтруктураДляВыбора;
	
КонецФункции // ПолучитьДанныеДляВыбора()

Функция ПолучитьПолноеИмяОбъекта(ИмяОбъектаМетаданных) Экспорт
	
	Возврат Метаданные.НайтиПоТипу(ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
	
КонецФункции // ПолучитьПолноеИмяОбъекта()

Функция ПолучитьОписаниеОбъектаВИБ(РабочийОбъектАдрес,ИмяПараметра,ТипБД) Экспорт
	
	ПоказателиБДТек=РаботаСПолямиАналитикиУХ.НайтиСтрокуДанныхБДПоПолю(ИмяПараметра,РабочийОбъектАдрес);
	
	Если ПоказателиБДТек=Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
			
	Если ПоказателиБДТек.ТипЗначения.Количество()=1 Тогда
		
		СтруктураТипа=ОбщегоНазначенияУХ.ПолучитьДанныеТипа(ПоказателиБДТек.ТипЗначения[0].Значение);
		ОписаниеОбъектаВИБ=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,СтруктураТипа.ТипМетаДанных,СтруктураТипа.СправочникБД,ТипБД);
		
		Возврат ОписаниеОбъектаВИБ;
		
	ИначеЕсли ПоказателиБДТек.ТипЗначения.Количество()>1 Тогда
		
		СписокВыбора=Новый СписокЗначений();
		
		Для Каждого СтрТип ИЗ ПоказателиБДТек.ТипЗначения Цикл
			
			Тип=СтрТип.Значение;
			
			СтруктураТипа=ОбщегоНазначенияУХ.ПолучитьДанныеТипа(Тип);
			ОписаниеТипа=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,СтруктураТипа.ТипМетаДанных,СтруктураТипа.СправочникБД,ТипБД);
			
			СписокВыбора.Добавить(ОписаниеТипа,ОписаниеТипа.Синоним);
			
		КонецЦикла;
		
		Возврат СписокВыбора;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьОписаниеОбъектаВИБ() 

Функция ПолучитьСправочникОбъект(ВыбранныйОбъект)
	
	Если ТипЗнч(ВыбранныйОбъект)=Тип("Строка") Тогда // Передан адрес временного хранилища
		Возврат ПолучитьИзВременногоХранилища(ВыбранныйОбъект);
	Иначе
		Возврат ВыбранныйОбъект;
	КонецЕсли;
	 
КонецФункции // ПолучитьСправочникОбъект()

Функция ЗаполнитьПоляРеквизитовПроводки(РегистрБухгалтерии,Счет,КоррСчет) Экспорт	
		
	ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
			
	ЗаполнитьБалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБухгалтерии);
	
	ЗаполнитьНебалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет,	"Дт");
	ЗаполнитьНебалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБухгалтерии,КоррСчет,"Кт");

	ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет,		"Дт");
	ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБухгалтерии,КоррСчет,	"Кт");
	
	ЗаполнитьРеквизитыПроводки(ТаблицаПолей,РегистрБухгалтерии);
	
	ТаблицаПолей.Сортировать("Порядок");
	
	Возврат ТаблицаПолей;
					
КонецФункции // ЗаполнитьПоляРеквизитовПроводки()

Функция ЗаполнитьБалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБухгалтерии) Экспорт
	
	Если ТаблицаПолей=Неопределено Тогда
		
		ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	РегистрыБухгалтерииБДИзмерения.Имя КАК Имя,
	             |	РегистрыБухгалтерииБДИзмерения.Синоним КАК Синоним,
	             |	РегистрыБухгалтерииБДИзмерения.Балансовый КАК Балансовый,
	             |	РегистрыБухгалтерииБДИзмерения.ПризнакУчета КАК ПризнакУчета,
	             |	РегистрыБухгалтерииБДИзмерения.ТипДанных КАК ТипДанных
	             |ИЗ
	             |	Справочник.РегистрыБухгалтерииБД.Измерения КАК РегистрыБухгалтерииБДИзмерения
	             |ГДЕ
	             |	РегистрыБухгалтерииБДИзмерения.Ссылка = &Ссылка
	             |	И РегистрыБухгалтерииБДИзмерения.Балансовый";
	
	Запрос.УстановитьПараметр("Ссылка",РегистрБухгалтерии);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаПолей.Добавить();
		НоваяСтрока.Имя			= Результат.Имя;
		НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (измерение)'"), Результат.Синоним);
		НоваяСтрока.ТипДанных	= Результат.ТипДанных;
		НоваяСтрока.Балансовый	= Истина;
		НоваяСтрока.ТипПоля		= "Измерение";
		
	КонецЦикла;
		
	Возврат ТаблицаПолей;
	
КонецФункции // ЗаполнитьБалансовыеРеквизитыПроводки() 

Функция ЗаполнитьНебалансовыеИзмеренияПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет,ДтКт) Экспорт
	
	Если ТаблицаПолей=Неопределено Тогда
		
		ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБДИзмерения.Имя КАК Имя,
	|	РегистрыБухгалтерииБДИзмерения.Синоним КАК Синоним,
	|	РегистрыБухгалтерииБДИзмерения.Балансовый КАК Балансовый,
	|	РегистрыБухгалтерииБДИзмерения.ПризнакУчета КАК ПризнакУчета,
	|	РегистрыБухгалтерииБДИзмерения.ТипДанных КАК ТипДанных
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД.Измерения КАК РегистрыБухгалтерииБДИзмерения
	|ГДЕ
	|	РегистрыБухгалтерииБДИзмерения.Ссылка = &Ссылка
	|	И НЕ РегистрыБухгалтерииБДИзмерения.Балансовый";
	
	Запрос.УстановитьПараметр("Ссылка",РегистрБухгалтерии);
	ПризнакиУчетаСчета=Счет.ПризнакиУчета;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если ПроверитьВозможностьИспользованияПоля(Результат.ПризнакУчета,ПризнакиУчетаСчета) Тогда
			
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.Имя			= Результат.Имя+ДтКт;
			НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (измерение)'"), Результат.Синоним+ДтКт);
			НоваяСтрока.ТипДанных	= Результат.ТипДанных;
			НоваяСтрока.ТипПоля		= "Измерение";
			НоваяСтрока.ДтКт		= ДтКт;
			НоваяСтрока.Порядок		= 1;
			
		КонецЕсли;
		
	КонецЦикла;
				
	Возврат ТаблицаПолей;

КонецФункции // ЗаполнитьНебалансовыеИзмеренияПроводки()

Функция ЗаполнитьИзмеренияПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет=Неопределено,КоррСчет=Неопределено) Экспорт
	
	Если ТаблицаПолей=Неопределено Тогда
		
		ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
		
	КонецЕсли;
	
	ЕстьКорреспонденция=ЗначениеЗаполнено(КоррСчет);
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБДИзмерения.Имя КАК Имя,
	|	РегистрыБухгалтерииБДИзмерения.Синоним КАК Синоним,
	|	РегистрыБухгалтерииБДИзмерения.Балансовый КАК Балансовый,
	|	РегистрыБухгалтерииБДИзмерения.ПризнакУчета КАК ПризнакУчета,
	|	РегистрыБухгалтерииБДИзмерения.ТипДанных КАК ТипДанных
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД.Измерения КАК РегистрыБухгалтерииБДИзмерения
	|ГДЕ
	|	РегистрыБухгалтерииБДИзмерения.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",РегистрБухгалтерии);
	ИзмеренияРегистра=Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрИзмерение ИЗ ИзмеренияРегистра Цикл	
		
		Если СтрИзмерение.Балансовый Тогда
			
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.Имя			= СтрИзмерение.Имя;
			НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (измерение)'"), СтрИзмерение.Синоним);
			НоваяСтрока.ТипДанных	= СтрИзмерение.ТипДанных;
			НоваяСтрока.Балансовый	= Истина;
			НоваяСтрока.ТипПоля		= "Измерение";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		
		Для Каждого СтрИзмерение ИЗ ИзмеренияРегистра Цикл	
			
			Если НЕ СтрИзмерение.Балансовый Тогда
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.Имя			= СтрИзмерение.Имя;
				НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (измерение)'"), СтрИзмерение.Синоним);
				НоваяСтрока.ТипДанных	= СтрИзмерение.ТипДанных;
				НоваяСтрока.ТипПоля		= "Измерение";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ТаблицаПолей;
		
	КонецЕсли;
		
	ПризнакиУчетаСчета=Счет.ПризнакиУчета;
	Постфикс=?(ЕстьКорреспонденция,"Дт","");
	
	Для Каждого СтрИзмерение ИЗ ИзмеренияРегистра Цикл	
		
		Если (НЕ СтрИзмерение.Балансовый) И  ПроверитьВозможностьИспользованияПоля(СтрИзмерение.ПризнакУчета,ПризнакиУчетаСчета) Тогда
			
			НоваяСтрока=ТаблицаПолей.Добавить();
			НоваяСтрока.Имя			= СтрИзмерение.Имя+Постфикс;
			НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (измерение)'"), СтрИзмерение.Синоним+Постфикс);
			НоваяСтрока.ТипДанных	= СтрИзмерение.ТипДанных;
			НоваяСтрока.ТипПоля		= "Измерение";
			НоваяСтрока.Порядок		= 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьКорреспонденция Тогда
		
		ПризнакиУчетаСчета=КоррСчет.ПризнакиУчета;
		Постфикс="Кт";
		
		Для Каждого СтрИзмерение ИЗ ИзмеренияРегистра Цикл	
			
			Если (НЕ СтрИзмерение.Балансовый) И  ПроверитьВозможностьИспользованияПоля(СтрИзмерение.ПризнакУчета,ПризнакиУчетаСчета) Тогда
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.Имя			= СтрИзмерение.Имя+Постфикс;
				НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (измерение)'"), СтрИзмерение.Синоним+Постфикс);
				НоваяСтрока.ТипДанных	= СтрИзмерение.ТипДанных;
				НоваяСтрока.ТипПоля		= "Измерение";
				НоваяСтрока.Порядок		= 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;	
	
	Возврат ТаблицаПолей;

КонецФункции // ЗаполнитьИзмеренияПроводки()

Функция ЗаполнитьСубконтоПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет,ДтКт) Экспорт
	
	Если ТаблицаПолей=Неопределено Тогда
		
		ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	СчетаБДВидыСубконто.Номер КАК Номер,
	|	СчетаБДВидыСубконто.ТипДанных КАК ТипДанных,
	|	СчетаБДВидыСубконто.ВидСубконто КАК ВидСубконто,
	|	СчетаБДВидыСубконто.ВидСубконтоСсылка КАК ВидСубконтоСсылка
	|ИЗ
	|	Справочник.СчетаБД.ВидыСубконто КАК СчетаБДВидыСубконто
	|ГДЕ
	|	СчетаБДВидыСубконто.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Счет);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаПолей.Добавить();
		НоваяСтрока.Имя			= "Субконто"+ДтКт+Результат.Номер;
		НоваяСтрока.Синоним		= НоваяСтрока.Имя+": "+Результат.ВидСубконто;
		НоваяСтрока.ТипДанных	= Результат.ТипДанных;
		НоваяСтрока.ТипПоля		= "Субконто";
		НоваяСтрока.ВидАналитики= Результат.ВидСубконтоСсылка;
		НоваяСтрока.ДтКт		= ДтКт;
		НоваяСтрока.Порядок		= ?(ДтКт="Дт",2,3);
		
	КонецЦикла;
		
	Возврат ТаблицаПолей; 
		
КонецФункции // ЗаполнитьСубконтоПроводки()

Функция ЗаполнитьРесурсыПроводки(ТаблицаПолей,РегистрБухгалтерии,Счет,ДтКт) Экспорт
	
	Если ТаблицаПолей=Неопределено Тогда
		
		ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	РегистрыБухгалтерииБДРесурсы.Имя КАК Имя,
	|	РегистрыБухгалтерииБДРесурсы.Синоним КАК Синоним,
	|	РегистрыБухгалтерииБДРесурсы.Балансовый КАК Балансовый,
	|	РегистрыБухгалтерииБДРесурсы.ПризнакУчета КАК ПризнакУчета
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД.Ресурсы КАК РегистрыБухгалтерииБДРесурсы
	|ГДЕ
	|	РегистрыБухгалтерииБДРесурсы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",РегистрБухгалтерии);
	
	Результат=Запрос.Выполнить().Выбрать();
	ПризнакиУчетаСчета=Счет.ПризнакиУчета;
	
	Пока Результат.Следующий() Цикл
		
		Если ПустаяСтрока(Результат.ПризнакУчета) ИЛИ ПроверитьВозможностьИспользованияПоля(Результат.ПризнакУчета,ПризнакиУчетаСчета)>0 Тогда 
			
			ИмяПоля=Результат.Имя+?(Результат.Балансовый,"",ДтКт);
			
			Если ТаблицаПолей.Найти(ИмяПоля,"Имя")=Неопределено Тогда
				
				НоваяСтрока=ТаблицаПолей.Добавить();
				НоваяСтрока.Имя			= ИмяПоля;
				НоваяСтрока.Синоним		= Результат.Синоним+?(Результат.Балансовый,""," ("+ДтКт+")");
				НоваяСтрока.ТипДанных	= "Число";
				НоваяСтрока.ТипПоля		= "Ресурс";
				НоваяСтрока.Балансовый	= Результат.Балансовый;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат ТаблицаПолей; 
		
КонецФункции // ЗаполнитьСубконтоПроводки()

Функция ЗаполнитьРеквизитыПроводки(ТаблицаПолей,РегистрБухгалтерии) Экспорт
	
	Если ТаблицаПолей=Неопределено Тогда
		
		ТаблицаПолей=ПолучитьШаблонТаблицыРеквизитов();
		
	КонецЕсли;
	
	Запрос=Новый Запрос;	
	Запрос.Текст= "ВЫБРАТЬ
	|	РегистрыБухгалтерииБДРеквизиты.Имя КАК Имя,
	|	РегистрыБухгалтерииБДРеквизиты.Синоним КАК Синоним,
	|	РегистрыБухгалтерииБДРеквизиты.ТипДанных КАК ТипДанных
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД.Реквизиты КАК РегистрыБухгалтерииБДРеквизиты
	|ГДЕ
	|	РегистрыБухгалтерииБДРеквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",РегистрБухгалтерии);	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НоваяСтрока=ТаблицаПолей.Добавить();
		НоваяСтрока.Имя			= Результат.Имя;
		НоваяСтрока.Синоним		= СтрШаблон(Нстр("ru = '%1 (реквизит)'"), Результат.Синоним);
		НоваяСтрока.ТипДанных	= Результат.ТипДанных;
		НоваяСтрока.ТипПоля		= "Реквизит";
		НоваяСтрока.Порядок		= 4;
		
	КонецЦикла;
	
КонецФункции // ЗаполнитьРеквизитыПроводки()

Функция ПолучитьШаблонТаблицыРеквизитов()
	
	ТаблицаРеквизитов=Новый ТаблицаЗначений;
	ТаблицаРеквизитов.Колонки.Добавить("Имя",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаРеквизитов.Колонки.Добавить("Синоним",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРеквизитов.Колонки.Добавить("ТипДанных",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаРеквизитов.Колонки.Добавить("ВидАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	ТаблицаРеквизитов.Колонки.Добавить("Балансовый",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаРеквизитов.Колонки.Добавить("ТипПоля",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаРеквизитов.Колонки.Добавить("ДтКт",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(5));
	ТаблицаРеквизитов.Колонки.Добавить("Порядок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	
	Возврат ТаблицаРеквизитов;
		
КонецФункции // ПолучитьШаблонТаблицыРеквизитов() 

Функция ПроверитьВозможностьИспользованияПоля(ПризнакУчетаПоля,ПризнакиУчетаСчета) Экспорт
			
	Возврат ПустаяСтрока(ПризнакУчетаПоля) ИЛИ СтрНайти(ПризнакиУчетаСчета,ПризнакУчетаПоля)>0;
	
КонецФункции // ПроверитьВозможностьИспользованияПоля()
	
//////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАЗЫМЕНОВАНИЯ РЕКВИЗИТОВ ОБЪЕКТОВ ИНФОРМАЦИОННОЙ БАЗЫ

//////////////////////////////////////////////////////////////////////////////////////////////
// Процедура добавляет в переданную структуру строки массив структур строк, которые должны быть
// добавлены в подчиненные строки коллекции формы на клиенте
// Переменные
// ДанныеОбъекта - структура, содержащая набор данных для формирования массива строк:
// - РабочийОбъектАдрес (строка): адрес временного хранилища данных, содержащего рабочие таблицы объекта
// - УникальныйИдентификатор (УникальныйИдентификатор): идентификатор рабочей формы объекта
// - Отказ (булево): флаг отказа в разворачивании строки
// - РежимОтбора (булево): признак того, что разворачивается строка отбора по реквизитам объекта
// - ТипБД (Справочник.ТипыБазДанных): тип информационной базы, к которой относится объект
// - ТекСоединениеВИБ (COMобъект): текущее соединение в случае использования внешней информационной базы
// - СпособПолучения (Перечисления.СпособыПолученияОперандов): способ получения данных (для источников)
// - СпособИспользования (Перечисления.СпособыИспользованияОперандов): способ использования данных (для источников)
// СтруктураСтрока: структура, содержащая данные разворачиваемой строки аналитики объекта
//
Процедура ПередРазворачиваниемСтрокиРеквизитовАналитики(ДанныеОбъекта,СтруктураСтрока) Экспорт 
	
	Перем СпособПолучения;
	Перем СпособИспользования;
	Перем ТекСоединениеВИБ;
	
	ДанныеОбъекта.Свойство("СпособПолучения",		СпособПолучения);
	ДанныеОбъекта.Свойство("СпособИспользования",	СпособИспользования);
	ДанныеОбъекта.Свойство("ТекСоединениеВИБ",		ТекСоединениеВИБ);
	
	СтруктураСтрока.Вставить("СтрокиКДобавлению",Новый Массив);		
	
	ТаблицыОбъекта=ПолучитьИзВременногоХранилища(ДанныеОбъекта.РабочийОбъектАдрес);
	
	ПоказателиБДТек=НайтиСтрокуДанныхБДПоПолю(СтруктураСтрока.ПолеБД,ТаблицыОбъекта);
	
	Если ПоказателиБДТек=Неопределено Тогда
		ДанныеОбъекта.Вставить("Отказ",Истина);
		Возврат;
	КонецЕсли;
	
	Если СтруктураСтрока.ТипЗначения=Неопределено Тогда
		
		СтруктураСтрока=СформироватьСтруктуруСтрокиБД(ПоказателиБДТек);
		СтруктураСтрока.ПолеБД=ПоказателиБДТек.ПолеБД;
		
	КонецЕсли;
		
	Если СтруктураСтрока.ТипЗначения.Количество()=1 Тогда
		
		СтруктураТипа=ОбщегоНазначенияУХ.ПолучитьДанныеТипа(СтруктураСтрока.ТипЗначения[0].Значение);
		ОписаниеТипа=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(ДанныеОбъекта.ТекСоединениеВИБ,СтруктураТипа.ТипМетаДанных,СтруктураТипа.СправочникБД,ДанныеОбъекта.ТипБД);
		
		ОбработатьСтрокуПоТипуМетаданных(ДанныеОбъекта,ТаблицыОбъекта,ОписаниеТипа,СтруктураСтрока,ПоказателиБДТек);
					
	ИначеЕсли СтруктураСтрока.ТипЗначения.Количество()>1 Тогда
		
		Для Каждого СтрТип ИЗ СтруктураСтрока.ТипЗначения Цикл
			
			Тип=СтрТип.Значение;
			
			ТекущаяСтрока = СформироватьСтруктуруСтрокиБД();
			ЗаполнитьПоляТиповРеквизитовБД(ТекущаяСтрока,Тип,ДанныеОбъекта.ТипБД,?(ДанныеОбъекта.Свойство("ТипБДПриемник"),ДанныеОбъекта.ТипБДПриемник,Справочники.ТипыБазДанных.ПустаяСсылка()));
			
			ТекущаяСтрока.НаименованиеБД   	= Тип;
			ТекущаяСтрока.ПолеБД			= СтруктураСтрока.ПолеБД;
			ТекущаяСтрока.СправочникБД     	= СтрЗаменить(Тип,ТекущаяСтрока.ТипМетаДанных+".","");
						
			Если НЕ (ДанныеОбъекта.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
				ИЛИ ТолькоПримитивныеРеквизиты(ДанныеОбъекта,ТекущаяСтрока)) Тогда
				
				ТекущаяСтрока.СтрокиКДобавлению.Добавить(СформироватьСтруктуруСтрокиБД());
				
			КонецЕсли;
			
			СтруктураСтрока.СтрокиКДобавлению.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ТекущаяСтрока));
						
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеОбъекта.Свойство("УникальныйИдентификатор") Тогда
		ДанныеОбъекта.Вставить("РабочийОбъектАдрес",ПоместитьВоВременноеХранилище(ТаблицыОбъекта,ДанныеОбъекта.УникальныйИдентификатор));
	КонецЕсли;
		
КонецПроцедуры // ПередРазворачиваниемСтрокиРеквизитовАналитики()

Процедура ОбработатьСтрокуПоТипуМетаданных(ДанныеОбъекта,ТаблицыОбъекта,ТекТипМетаданных,Строка,ПоказателиБДТек) Экспорт
	
	Если Строка.ТипМетаДанных="Перечисление"
		ИЛИ Строка.ТипМетаДанных="ПланСчетов"
		ИЛИ Строка.ТипМетаДанных="НеПоддерживается" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ТекТипМетаДанных.Реквизиты Цикл
		
		Если Реквизит.Имя="Ссылка" Тогда
			
			Продолжить;
		
		ИначеЕсли СтрНайти(Реквизит.Имя,"НСИ_")>0 
			И (НЕ (Реквизит.Имя="НСИ_ЭталонныйЭлемент" ИЛИ Реквизит.Имя="НСИ_НеАктивный")) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьСтрокуПодчиненнойАналитики(ДанныеОбъекта,ТаблицыОбъекта,Строка,Реквизит,ПоказателиБДТек);
		
	КонецЦикла;
	
	Если Строка.ТипМетаДанных="Справочник" И ТекТипМетаДанных.Владельцы.Количество()>0 Тогда
		
		НоваяСтрока=СформироватьСтруктуруСтрокиБД();
		НоваяСтрока.НаименованиеБД  = "Владелец";
		Строка.СтрокиКДобавлению.Добавить(НоваяСтрока);
				
		Для Каждого ТекВладелец ИЗ ТекТипМетаДанных.Владельцы Цикл 
			
			СтрокаВладелец=СформироватьСтруктуруСтрокиБД(ПоказателиБДТек);
			
			СтрокаВладелец.НаименованиеБД 	= ТекВладелец.Имя;
			СтрокаВладелец.ТипЗначения     	= ТекВладелец.ТипДанных;
			
			ЗаполнитьПоляТиповРеквизитовБД(СтрокаВладелец,ТекВладелец.ТипДанных,ДанныеОбъекта.ТипБД,?(ДанныеОбъекта.Свойство("ТипБДПриемник"),ДанныеОбъекта.ТипБДПриемник,Справочники.ТипыБазДанных.ПустаяСсылка()));

			СтрокаВладелец.ПолеБД              = Строка.ПолеБД+".Владелец";
				
			Если ДанныеОбъекта.Свойство("РежимОтбора") Тогда
				
				СтрокаВладелец.СпособВычисления=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется;
				
			КонецЕсли;
			
			Если  НайтиСтрокуДанныхБДПоПолю(Строка.ПолеБД+".Владелец",ТаблицыОбъекта)=Неопределено Тогда
				
				СтрокаПоказателей                 = ТаблицыОбъекта.мТаблицаПроизводныхБД.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаПоказателей,СтрокаВладелец);
				
				СтрокаПоказателей.ПолеБД         = Строка.ПолеБД+".Владелец";
				СтрокаПоказателей.НаименованиеБД = ТекВладелец.Имя;
				
			КонецЕсли;
			
			СтрокаВладелец.СтрокиКДобавлению.Добавить(СформироватьСтруктуруСтрокиБД());

			НоваяСтрока.СтрокиКДобавлению.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтрокаВладелец));
							
		КонецЦикла;
		
	КонецЕсли;
	 	
КонецПроцедуры // ОбработатьСтрокуПоТипуМетаданных()

Процедура ДобавитьСтрокуПодчиненнойАналитики(ДанныеОбъекта,ТаблицыОбъекта,Строка,Реквизит,ПоказателиБДТек)
	
	Перем СпособПолучения;
	Перем СпособИспользования;
	Перем ТекСоединениеВИБ;
	
	ДанныеОбъекта.Свойство("СпособПолучения",		СпособПолучения);
	ДанныеОбъекта.Свойство("СпособИспользования",	СпособИспользования);
	ДанныеОбъекта.Свойство("ТекСоединениеВИБ",		ТекСоединениеВИБ);
	
	ИмяПоля=?(Строка.ПолеБД="",ПоказателиБДТек.ПолеБД,Строка.ПолеБД);
	
	СтрокаПоказателей=ТаблицыОбъекта.мТаблицаПроизводныхБД.Найти(ИмяПоля+"."+Реквизит.Имя,"ПолеБД");
	
	Если СтрокаПоказателей=Неопределено Тогда
		
		СтрокаПоказателей                 = ТаблицыОбъекта.мТаблицаПроизводныхБД.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПоказателей,ПоказателиБДТек,,"ТипМетаДанных");
		
		СтрокаПоказателей.ПолеБД         = ИмяПоля+"."+Реквизит.Имя;
		СтрокаПоказателей.НаименованиеБД = Реквизит.Синоним;
		СтрокаПоказателей.ТипЗначения    = Реквизит.ТипДанных;
		
		ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей, Реквизит.ТипДанных,ДанныеОбъекта.ТипБД,?(ДанныеОбъекта.Свойство("ТипБДПриемник"),ДанныеОбъекта.ТипБДПриемник,Справочники.ТипыБазДанных.ПустаяСсылка()));
		
	КонецЕсли;
	
	//Если НЕ (ДанныеОбъекта.Свойство("РежимОтбора") 
	//	ИЛИ СтрокаПоказателей.ТипМетаДанных="Справочник" 
	//	ИЛИ СтрокаПоказателей.ТипМетаДанных="Перечисление" 
	//	ИЛИ СтрокаПоказателей.ТипМетаДанных="Документ"
	//	ИЛИ СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов
	//	ИЛИ СпособИспользования=Неопределено) Тогда
	//	
	//	Возврат;
	//	
	//КонецЕсли;
	
	НоваяСтрока = СформироватьСтруктуруСтрокиБД(СтрокаПоказателей);
	НоваяСтрока.ПолеБД = СтрокаПоказателей.ПолеБД;
	
	Если ДанныеОбъекта.Свойство("РежимОтбора") Тогда
				
		НоваяСтрока.СпособВычисления=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется;
				
	КонецЕсли;

    Строка.СтрокиКДобавлению.Добавить(НоваяСтрока);
		
	// Добавляем строку для возможного раскрытия по реквизитам объекта
	
	Если ((НоваяСтрока.ТипЗначения <> "") И (НоваяСтрока.ТипЗначения.Количество()>1))
		ИЛИ (НоваяСтрока.ТипМетаДанных="Справочник" ИЛИ НоваяСтрока.ТипМетаДанных="Документ" ИЛИ НоваяСтрока.ТипМетаДанных="ПланВидовХарактеристик")
		И НЕ (ДанныеОбъекта.ТипБД.ВерсияПлатформы=Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77
		ИЛИ ТолькоПримитивныеРеквизиты(ДанныеОбъекта,НоваяСтрока) 
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос) Тогда 
		
		// Добавим строку для дальнейшего раскрытия
		
		НоваяСтрока.СтрокиКДобавлению.Добавить(СформироватьСтруктуруСтрокиБД());
				
	КонецЕсли;
	
КонецПроцедуры //  ДобавитьСтрокуПодчиненнойАналитики()


Функция ТолькоПримитивныеРеквизиты(ДанныеОбъекта,СтрокаМетаданных)
	
	Если СтрокаМетаданных.ТипЗначения.Количество()>1 Тогда
		Возврат ЛОЖЬ;
	КонецЕсли;
	
	ОписаниеОбъектаВИБ=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,СтрокаМетаданных.ТипМетаДанных,СтрокаМетаданных.СправочникБД,ДанныеОбъекта.ТипБД);
	
	Если ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.ПеречисленияБД") Тогда
		
		Возврат Истина;
		
	КонецЕсли;
		
	Попытка
	
	Для Каждого Реквизит ИЗ ОписаниеОбъектаВИБ.Реквизиты Цикл
		
		Если НЕ ОбщегоНазначенияУХ.ПримитивныйТипСтрока(Реквизит.ТипДанных) Тогда
			
			Возврат Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Исключение
		Возврат Истина;
	КонецПопытки;
	
	Возврат Истина;   
		
КонецФункции  // ТолькоПримитивныеРеквизиты()

Функция СформироватьСтруктуруСтрокиБД(ДанныеСтрокиАналитики=Неопределено)
	
	СтрокаВИБ=Новый Структура;
	СтрокаВИБ.Вставить("ПолеБД",					);
	СтрокаВИБ.Вставить("ИспользуетсяВСопоставлении",);
	СтрокаВИБ.Вставить("НаименованиеБД",			);
	СтрокаВИБ.Вставить("СправочникБД",				);
	СтрокаВИБ.Вставить("ТипЗначения",				);
	СтрокаВИБ.Вставить("ТипДанныхПоля",				);
	СтрокаВИБ.Вставить("ТипМетаДанных",				);
	СтрокаВИБ.Вставить("СпособВычисления",			);
	СтрокаВИБ.Вставить("ТаблицаАналитики",			);
	СтрокаВИБ.Вставить("ВидАналитики",				);
	СтрокаВИБ.Вставить("ПризнакиУчетаСубконто",		);
	СтрокаВИБ.Вставить("НеЯвляетсяРазделителемДанных",);
	СтрокаВИБ.Вставить("ТолькоОбороты",);
	СтрокаВИБ.Вставить("Балансовый",);
	СтрокаВИБ.Вставить("Дебетовый",);

	СтрокаВИБ.Вставить("СтрокиКДобавлению",Новый Массив);
	
	Если ЗначениеЗаполнено(ДанныеСтрокиАналитики) Тогда
		ЗаполнитьЗначенияСвойств(СтрокаВИБ,ДанныеСтрокиАналитики);
	КонецЕсли;
	
	Возврат СтрокаВИБ;
	
КонецФункции // СформироватьСтруктуруСтрокиБД()

// Процедура определяет и заполняет типы реквизитов объекта метаданных БД.
//
Процедура ЗаполнитьПоляТиповРеквизитовБД(СтрокаПоказателей,СтрокаТиповБД,ТипБДИсточник,ТипБДПриемник=Неопределено) Экспорт
	
	Если СтрДлина(СтрокаТиповБД)=0 Тогда
		
		СтрокаПоказателей.ТипМетаДанных = "НеПоддерживается";
		Возврат;
		
	КонецЕсли;
	
	МассивТиповБД = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаТиповБД,";");
	СписокТипов=Новый СписокЗначений;
	ВнешниеДанные=(ЗначениеЗаполнено(ТипБДИсточник) И (НЕ ТипБДИсточник=Справочники.ТипыБазДанных.ТекущаяИБ));
	
	Если МассивТиповБД.Количество() > 1 Тогда
		
		Для Каждого Тип ИЗ МассивТиповБД Цикл
			
			СписокТипов.Добавить(Тип);
			
		КонецЦикла;
		 		
	Иначе
		
		ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(МассивТиповБД[0]);
		
		Если ПримитивныйТип = Неопределено Тогда
			
			ОбъектБД = МассивТиповБД[0];
			
			СписокТипов.Добавить(ОбъектБД);
			
			СтрокаПоказателей.ТипМетаДанных    = ОбщегоНазначенияУХ.ПолучитьНаименованиеСсылочногоТипаБД(Неопределено,ОбъектБД);
			СтрокаПоказателей.СправочникБД    = СтрЗаменить(ОбъектБД,СтрокаПоказателей.ТипМетаДанных+".","");
	
		Иначе
			
			СписокТипов.Добавить(ПримитивныйТип);
			СтрокаПоказателей.ТипМетаДанных    = "Простой";
			
		КонецЕсли;
				
	КонецЕсли;
	
	СписокТипов.СортироватьПоЗначению();
	
	СтрокаПоказателей.ТипЗначения=СписокТипов;
	
	СписокТипов=Новый СписокЗначений;
	
	Если ЗначениеЗаполнено(ТипБДПриемник) И (НЕ ТипБДПриемник=Справочники.ТипыБазДанных.ТекущаяИБ) Тогда
		
		СписокТипов=ПолучитьСписокНастроекСоответствийПриемник(ТипБДПриемник,СтрокаПоказателей.ТипМетаДанных,СтрокаПоказателей.СправочникБД);
	
	ИначеЕсли НЕ ВнешниеДанные Тогда
		
		Для Каждого СтрТип ИЗ МассивТиповБД Цикл
			
			СписокТипов.Добавить(ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(СтрТип,Истина,Ложь));
			
		КонецЦикла;
		
	ИначеЕсли НЕ СтрокаПоказателей.ТипМетаДанных = "Простой" Тогда
		
		СписокТипов=ПолучитьСписокНастроекСоответствийИсточник(ТипБДИсточник,СтрокаПоказателей.ТипМетаДанных,СтрокаПоказателей.СправочникБД);
		
	КонецЕсли;
	
	СписокТипов.СортироватьПоЗначению();
	СтрокаПоказателей.ТипДанныхПоля=СписокТипов;
			
КонецПроцедуры

Функция ОпределитьИспользованиеКодаИНаименования(СтрокаПоказателей,ТипБД) Экспорт
	
	ЕстьКод=Ложь;
	ЕстьНаименование=Ложь;
	
	Для Каждого Элемент ИЗ СтрокаПоказателей.ТипЗначения Цикл
		
		Если СтрНайти(Элемент.Значение,"Справочник")>0 Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СправочникиБДРеквизиты.Имя
			|ИЗ
			|	Справочник.СправочникиБД.Реквизиты КАК СправочникиБДРеквизиты
			|ГДЕ
			|	СправочникиБДРеквизиты.Ссылка.Владелец = &Владелец
			|	И СправочникиБДРеквизиты.Ссылка.Наименование = &Наименование
			|	И (СправочникиБДРеквизиты.Имя = ""Код""
			|			ИЛИ СправочникиБДРеквизиты.Имя = ""Наименование"")";
			
			Запрос.УстановитьПараметр("Владелец",ТипБД);
			Запрос.УстановитьПараметр("Наименование",СтрЗаменить(Элемент.Значение,"Справочник.",""));
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Если Результат.Имя="Код" Тогда
					
					ЕстьКод=Истина;
					
				ИначеЕсли Результат.Имя="Наименование" Тогда
					
					ЕстьНаименование=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьКод И ЕстьНаименование Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Новый Структура("ЕстьКод,ЕстьНаименование",ЕстьКод,ЕстьНаименование);
		
КонецФункции // ОпределитьИспользованиеКодаИНаименования()

Функция ПолучитьСписокНастроекСоответствийИсточник(ТипБД,ТипОбъектаВИБ,ИмяОбъектаВИБ) Экспорт
	
	СписокТипов=Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВнешнимИБ.Ссылка,
	|	Представление(СоответствиеВнешнимИБ.ИмяОбъектаМетаданных) КАК ИмяОбъектаИБ
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец
	|	И СоответствиеВнешнимИБ.ТипОбъектаВИБ = &ТипОбъектаВИБ
	|	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Владелец",ТипБД);
	Запрос.УстановитьПараметр("ТипОбъектаВИБ",ТипОбъектаВИБ);
	Запрос.УстановитьПараметр("Наименование",ИмяОбъектаВИБ);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокТипов.Добавить(Результат.Ссылка,Результат.ИмяОбъектаИБ);
		
	КонецЦикла;
	
	Возврат СписокТипов;
		
КонецФункции // ПолучитьСписокНастроекСоответствийИсточник()

Функция ПолучитьСписокНастроекСоответствийПриемник(ТипБД,ТипОбъектаКонсолидации,ИмяОбъектаМетаданных) Экспорт
	
	СписокТипов=Новый СписокЗначений;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВнешнимИБ.Ссылка,
	|	Представление(СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ) КАК ИмяОбъектаИБ
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &Владелец
	|	И СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации
	|	И СоответствиеВнешнимИБ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных";
	
	Запрос.УстановитьПараметр("Владелец",ТипБД);
	Запрос.УстановитьПараметр("ТипОбъектаКонсолидации",ТипОбъектаКонсолидации);
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокТипов.Добавить(Результат.Ссылка,Результат.ИмяОбъектаИБ);
		
	КонецЦикла;
	
	Возврат СписокТипов;
		
КонецФункции // ПолучитьСписокНастроекСоответствийИсточник()

Процедура ОбработатьСтрокуПоТипуМетаданныхADO(ДанныеОбъекта,ТаблицыОбъекта,ТекТипМетаданных,Строка,ПоказателиБДТек,РежимОтбора) Экспорт
	
	СтрокаПримитивных=СформироватьСтруктуруСтрокиБД();
	СтрокаПримитивных.НаименованиеБД = Нстр("ru = 'Поля таблицы'");
		
	СтрокаСсылочных = СформироватьСтруктуруСтрокиБД();
	СтрокаСсылочных.НаименованиеБД = Нстр("ru = 'Связанные поля'");
		
	Для Каждого СтрИзмерение Из ТекТипМетаДанных.Реквизиты Цикл
		
		СтрокаПоказателей=ТаблицыОбъекта.мТаблицаПроизводныхБД.Найти("["+ТекТипМетаДанных.Наименование+"].["+СтрИзмерение.Имя+"]","ПолеБД");
		
		Если СтрокаПоказателей=Неопределено Тогда
			
			ПримитивныйТип = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(СтрИзмерение.ТипЗначения);
			
			Если ПримитивныйТип=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СписокТипов=Новый СписокЗначений;
			СписокТипов.Добавить(ПримитивныйТип);
			
			СтрокаПоказателей                 = ТаблицыОбъекта.мТаблицаПроизводныхБД.Добавить();	
			СтрокаПоказателей.ПолеБД         = "["+ТекТипМетаДанных.Наименование+"].["+СтрИзмерение.Имя+"]";
			СтрокаПоказателей.ТипМетаДанных   = "Простой";
			СтрокаПоказателей.ТипЗначения	  = СписокТипов;
						
			//////////////////////////////////////////////////////////////////////////////////////////
			// Проверяем на наличие связей
			
			СтрокаСсылка=ТекТипМетаДанных.СвязанныеТаблицы.Найти(СтрИзмерение.Имя,"ПолеТекущейТаблицы");
			
			Если СтрокаСсылка=Неопределено Тогда
				
				СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя;
				
				СтрокаПримитивныхПодчиненная=СформироватьСтруктуруСтрокиБД();	
				ЗаполнитьЗначенияСвойств(СтрокаПримитивныхПодчиненная,СтрокаПоказателей);
				
				СтрокаПримитивныхПодчиненная.ПолеБД=СтрокаПоказателей.ПолеБД;
				
				СтрокаПримитивных.СтрокиКДобавлению.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтрокаПримитивныхПодчиненная));
				
			Иначе
				
				СтрокаПодчиненные=ТаблицыОбъекта.мТаблицаПроизводныхБД.Найти("["+СтрокаСсылка.СвязаннаяТаблица+"]","ПолеБД");
				
				Если СтрокаПодчиненные=Неопределено Тогда
					
					СтрокаПоказателей.НаименованиеБД = СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+": "+СтрокаСсылка.ПолеСвязаннойТаблицы+")";
					СтрокаПримитивныхПодчиненная=СформироватьСтруктуруСтрокиБД();	
					ЗаполнитьЗначенияСвойств(СтрокаПримитивныхПодчиненная,СтрокаПоказателей);
					СтрокаПримитивныхПодчиненная.ПолеБД=СтрокаПоказателей.ПолеБД;
					СтрокаПримитивных.СтрокиКДобавлению.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтрокаПримитивныхПодчиненная));

					СтрокаПодчиненные                 	= ТаблицыОбъекта.мТаблицаПроизводныхБД.Добавить();	
					
					СтрокаПодчиненные.ПолеБД         	= "["+СтрокаСсылка.СвязаннаяТаблица+"]";
					
					СтрокаПодчиненные.НаименованиеБД 	= СтрИзмерение.Имя+" ("+СтрокаСсылка.СвязаннаяТаблица+")";
					СтрокаПодчиненные.ТипМетаДанных   	= "ТаблицаADO";
					СтрокаПодчиненные.СправочникБД   	= ПоказателиБДТек.СправочникБД+"({["+СтрокаСсылка.СвязаннаяТаблица+"]}{["+ТекТипМетаДанных.Наименование+"].["+СтрИзмерение.Имя+"]=["+СтрокаСсылка.СвязаннаяТаблица+"].["+СтрокаСсылка.ПолеСвязаннойТаблицы+"]})";
					
					СписокТипов=Новый СписокЗначений;
					
					СписокТипов.Добавить("ТаблицаADO."+СтрокаСсылка.СвязаннаяТаблица);
					СтрокаПодчиненные.ТипЗначения	  = СписокТипов;
					
				КонецЕсли;
				
				СтрокаСсылочныхПодчиненная=СформироватьСтруктуруСтрокиБД();
				ЗаполнитьЗначенияСвойств(СтрокаСсылочныхПодчиненная,СтрокаПодчиненные);
				
				СтрокаСсылочныхПодчиненная.ПолеБД			=СтрокаПодчиненные.ПолеБД;
				
				СтрокаСсылочныхПодчиненная.СтрокиКДобавлению.Добавить(СформироватьСтруктуруСтрокиБД());
				
				СтрокаСсылочных.СтрокиКДобавлению.Добавить(ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(СтрокаСсылочныхПодчиненная));
								
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Строка.СтрокиКДобавлению.Добавить(СтрокаПримитивных);
	Строка.СтрокиКДобавлению.Добавить(СтрокаСсылочных);
		
КонецПроцедуры // ОбработатьСтрокуПоТипуМетаданныхADO()

///////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТАБЛИЦАМИ ОТБОРА ДАННЫХ В ОБЪЕКТАХ


Функция ОпределитьТипПараметра(ИмяПараметра,СправочникОбъект) Экспорт
	
	СтрокаДанные=РаботаСПолямиАналитикиУХ.НайтиСтрокуДанныхБДПоПолю(ИмяПараметра,СправочникОбъект);
	
	Если СтрокаДанные=Неопределено Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат СтрокаДанные.ТипЗначения[0].Значение;
		
	КонецЕсли;
	
КонецФункции // ОпределитьТипПараметра() 

Функция ПолучитьТаблицуСинхронизированныхОбъектов(СписокНастроекСоответствий) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ,
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации,
	|	СоответствиеВнешнимИБ.ТипОбъектаВИБ,
	|	СоответствиеВнешнимИБ.Ссылка,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК НаименованиеОбъектаВИБ
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Ссылка В(&СписокНастроекСоответствий)";
	
	Запрос.УстановитьПараметр("СписокНастроекСоответствий",СписокНастроекСоответствий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСинхронизированныхОбъектов() 

Функция ПолеДокументСсылка(ТипДанныхПоля)
	
	Для Каждого Элемент ИЗ ТипДанныхПоля Цикл
		
		Если СтрНайти(Элемент.Значение,"Документ.")>0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
		
КонецФункции // ПолеДокументСсылка() 
	
Функция ПолучитьСписокВозможныхСпособовВычисленияПараметра(ДанныеОбъекта) Экспорт
	
	СправочникОбъект=ПолучитьИзВременногоХранилища(ДанныеОбъекта.РабочийОбъектАдрес);
	СпособПолучения=ДанныеОбъекта.СпособПолучения;
	ИмяПараметра=ДанныеОбъекта.ИмяПараметра;
	
	СписокВыбора=Новый СписокЗначений;
	
	// Типы данных для срезов регистров определим вручную
	Если ДанныеОбъекта.ТипДанныхПоля.Количество() = 1
		И ДанныеОбъекта.ТипДанныхПоля.Получить(0).Значение = Тип("Дата")
		И (СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений) Тогда 
		
		Если ДанныеОбъекта.ИмяПараметра = "ДатаНач" Тогда
			
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом);
			
		КонецЕсли;
		
		Если ДанныеОбъекта.ИмяПараметра = "ДатаКон" 
			ИЛИ (ДанныеОбъекта.ИмяПараметра = "ДатаНач" И 
			(СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений 
			ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений)) Тогда 
			
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом);
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом);
			
		КонецЕсли;			
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Дата);
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение,Нстр("ru = 'Значение (функция на встроенном языке)'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется,Нстр("ru = 'Отбор не производится'"));
					
		Возврат СписокВыбора;
			
	КонецЕсли;
	
	// Определяем возможные для этого параметра способы обработки
	
	Если ОбщегоНазначенияУХ.ПолучитьИмяОбъектаМетаданных(СправочникОбъект.РеквизитыОбъекта.ПотребительРасчета)="ШаблоныУниверсальныхПроцессов" Тогда
		
		Для Каждого Тип ИЗ ДанныеОбъекта.ТипДанныхПоля Цикл
			
			СтруктураПоиска=Новый Структура("ТипДанных",Тип.Значение);
			МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Способ ИЗ МассивСпособов Цикл
				
				СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
				
			КонецЦикла;
			
		КонецЦикла;
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,Нстр("ru = 'Фиксированное значение'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению,Нстр("ru = 'Не равно фиксированному значению'"));
		
		Если ДанныеОбъекта.ТипЗначения[0].Значение="Дата" 
			ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Дата")
			ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение="Число"
			ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Число") Тогда
			
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Больше,Нстр("ru = 'Больше'"));
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно,Нстр("ru = 'Больше или равно'"));
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Меньше,Нстр("ru = 'Меньше'"));
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно,Нстр("ru = 'Меньше или равно'"));
			
		КонецЕсли;
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение,Нстр("ru = 'Значение (функция на встроенном языке)'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется,Нстр("ru = 'Отбор не производится'"));
		
		Возврат СписокВыбора;
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ПроводкаТрансформационнойКорректировки
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеСправочники
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеДокументы
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРеквизитОбъектаБД Тогда
		
		Если ЗначениеЗаполнено(ДанныеОбъекта.ТипБДПриемник) Тогда
			
			Для Каждого Тип ИЗ ДанныеОбъекта.ТипЗначения Цикл
				
				Если ТипЗнч(Тип.Значение)=Тип("Тип") Тогда
					
					СтруктураПоиска=Новый Структура("ТипДанных",Тип.Значение);
					
				Иначе
					
					СтруктураПоиска=Новый Структура("ТаблицаАналитики",Тип.Значение);
					
				КонецЕсли;
				
				МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого Способ ИЗ МассивСпособов Цикл
					
					СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
					
				КонецЦикла;
				
			КонецЦикла;
			
		Иначе
			
			Для Каждого Тип ИЗ ДанныеОбъекта.ТипДанныхПоля Цикл
				
				СтруктураПоиска=Новый Структура("ТипДанных",Тип.Значение);
				МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
				
				Для Каждого Способ ИЗ МассивСпособов Цикл
					
					СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
				
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,Нстр("ru = 'Фиксированное значение'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений,Нстр("ru = 'Список фиксированных значений'"));
		
		Если НЕ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос Тогда
			
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению,Нстр("ru = 'Не равно фиксированному значению'"));
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений,Нстр("ru = 'Не в списке фиксированных значений'"));
			
			Если НЕ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
				
				СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии,Нстр("ru = 'Список с учетом иерархии'"));
				СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии,Нстр("ru = 'Не в списке с учетом иерархии'"));
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрБухгалтерии 
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеОстаткиИОборотыИзПланаСчетов
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистр
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрСведений
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеСправочники
		ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеДокументы Тогда
		
		Если ДанныеОбъекта.ТипДанныхПоля.Количество()>0 Тогда
			
			ТаблицаСоответствий=ПолучитьТаблицуСинхронизированныхОбъектов(ДанныеОбъекта.ТипДанныхПоля);
			
			Для Каждого СтрокаСоответствие ИЗ ТаблицаСоответствий Цикл
				
				Если СтрокаСоответствие.ТипОбъектаКонсолидации="ВидСубконто" Тогда
					
					СтруктураПоиска=Новый Структура("ВидАналитики",СтрокаСоответствие.ИмяОбъектаМетаданных);
					
					МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого Способ ИЗ МассивСпособов Цикл
						
						СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
						
					КонецЦикла;
					
					СтруктураПоиска=Новый Структура("ТипДанных",СтрокаСоответствие.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]);
					
					МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого Способ ИЗ МассивСпособов Цикл
						
						Если СписокВыбора.НайтиПоЗначению(Способ.СпособВычисления)=Неопределено Тогда
							
							СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
							
						КонецЕсли;
						
					КонецЦикла;
					
				Иначе
					
					СтруктураПоиска=Новый Структура("ТаблицаАналитики",СтрокаСоответствие.ТипОбъектаКонсолидации+"."+СтрокаСоответствие.ИмяОбъектаМетаданных);
					
					МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
					
					Для Каждого Способ ИЗ МассивСпособов Цикл
						
						СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
			
		Если ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Дата") ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение="Дата" Тогда
			
			СтруктураПоиска=Новый Структура("ТипДанных",Тип("Дата"));
			
			МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
			
			Для Каждого Способ ИЗ МассивСпособов Цикл
				
				Если СписокВыбора.НайтиПоЗначению(Способ.СпособВычисления)=Неопределено Тогда
					
					СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение,Нстр("ru = 'Фиксированное значение'"));
			СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений,Нстр("ru = 'Список фиксированных значений'"));
			
			Если НЕ (ДанныеОбъекта.Использование77 ИЛИ СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеПроизвольныйЗапрос) Тогда
				
				СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению,Нстр("ru = 'Не равно фиксированному значению'"));
				СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений,Нстр("ru = 'Не в списке фиксированных значений'"));
				
				Если НЕ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
					
					СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии,Нстр("ru = 'Список с учетом иерархии'"));
					СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии,Нстр("ru = 'Не в списке с учетом иерархии'"));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтруктураПоиска=Новый Структура("ТипРасчета","Простой");
		
		МассивСпособов=СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого Способ ИЗ МассивСпособов Цикл
			
			СписокВыбора.Добавить(Способ.СпособВычисления,Способ.ПредставлениеСпособа);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЗначения[0].Значение="Дата" 
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Дата")
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение="Число"
		ИЛИ ДанныеОбъекта.ТипЗначения[0].Значение=Тип("Число") Тогда
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Больше,Нстр("ru = 'Больше'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно,Нстр("ru = 'Больше или равно'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.Меньше,Нстр("ru = 'Меньше'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно,Нстр("ru = 'Меньше или равно'"));
		
	КонецЕсли;
	
	Если ДанныеОбъекта.ТипЗначения.Количество()>1 Тогда
		
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения,Нстр("ru = 'Тип значения равен'"));
		СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений,Нстр("ru = 'Тип значения в списке'"));
		
	КонецЕсли;
			
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение,Нстр("ru = 'Значение (функция на встроенном языке)'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений,Нстр("ru = 'Список значений (функция на встроенном языке)'"));
	СписокВыбора.Добавить(Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется,Нстр("ru = 'Отбор не производится'"));
	
	Возврат СписокВыбора;
	
КонецФункции // ПолучитьСписокВозможныхСпособовВычисленияПараметра()


Функция ПолучитьДанныеДляОграниченияТипа(ДанныеОбъекта) Экспорт
	
	СправочникОбъект=ПолучитьИзВременногоХранилища(ДанныеОбъекта.РабочийОбъектАдрес);
	МассивОграничений=Новый Массив;
	ВнешниеДанные=НЕ ДанныеОбъекта.ВнутренниеДанные;
	СпособПолучения=ДанныеОбъекта.СпособПолучения;
	
	ИмяПараметра=ДанныеОбъекта.ИмяПараметра;
	СпособВычисленияПараметра=ДанныеОбъекта.СпособВычисленияПараметра;
	
	Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ТипЗначения Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокТиповЗначений Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),Тип("Строка")));
		
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
			
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипЗначения[0].Значение));
		
	ИначеЕсли СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПроизвольныйЗапрос
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета
		ИЛИ СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия Тогда
		
		Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
						
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипДанныхПоля.ВыгрузитьЗначения()));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки",ДанныеОбъекта.ТипДанныхПоля.ВыгрузитьЗначения()));
			
		ИначеЕсли  СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
						
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),ДанныеОбъекта.ТипДанныхПоля[0].Значение));
			
		ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки", Тип("СправочникСсылка.Организации")));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СправочникСсылка.Организации")));
			
		ИначеЕсли НЕ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИсходныйДокумент Тогда
			
			СтрокаЗначения = СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.Найти(СпособВычисленияПараметра,"СпособВычисления");
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",СтрокаЗначения.ТипДанныхУточнение,СтрокаЗначения.ИзКонтекста));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки",СтрокаЗначения.ТипДанныхПроверка));
			
		КонецЕсли;
		
	ИначеЕсли (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению) Тогда
		
		Если Не ВнешниеДанные Тогда
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",ДанныеОбъекта.ТипДанныхПоля[0].Значение));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки",ДанныеОбъекта.ТипДанныхПоля[0].Значение));
			
		Иначе
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Новый ОписаниеТипов("Неопределено")));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки",Новый ОписаниеТипов("Неопределено")));
			
		КонецЕсли;
			
	ИначеЕсли (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии) Тогда
		
		Если Не ВнешниеДанные Тогда
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ТипДанныхСписка","УточнениеСпособаОпределения",Тип("СписокЗначений"),ДанныеОбъекта.ТипДанныхПоля[0].Значение));
			
		Иначе
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СписокЗначений")));
			
		КонецЕсли;
						
	ИначеЕсли СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки", Тип("СправочникСсылка.ВерсииРегламентовПодготовкиОтчетности")));
		МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СправочникСсылка.Организации")));
		
	ИначеЕсли НЕ (СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
		ИЛИ СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии) Тогда
		
		СтрокаЗначения = СправочникОбъект.мСоответствиеИзмеренийСпособовИТипов.Найти(СпособВычисленияПараметра,"СпособВычисления");
		
		
		Если СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","УточнениеСпособаОпределения",Тип("СписокЗначений")));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки",СтрокаЗначения.ТипДанныхПроверка));
			
		Иначе
			
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения,ИзКонтекста","УточнениеСпособаОпределения",СтрокаЗначения.ТипДанныхУточнение,СтрокаЗначения.ИзКонтекста));
			МассивОграничений.Добавить(Новый Структура("ИмяКолонки,ТипЗначения","ЗначениеДляПроверки",СтрокаЗначения.ТипДанныхПроверка));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МассивОграничений;
		
КонецФункции // ПолучитьДанныеДляОграниченияТипа()


