#Область ПрограммныйИнтерфейс

// Возвращает таблицу документов, имеющих в переданном периоде нарушения двойной записи в финансовых регистрах
//
// Параметры:
//	Период - Дата - месяц, за который выполняется проверка движений.
//	МассивОрганизаций - Массив - организации, по которым выполняется проверка движений.
//
// Возвращаемое значение:
//	ТаблицаЗначений:
//	* Организация - СправочникСсылка.Организации - организация, по которой обнаружена проблема.
//	* Регистратор - ДокументСсылка - регистратор с проблемами в движениях
//	* ИмяРегистра - Строка - имя регистра накопления с проблемными движениями, пустая строка если проблема в целом по документу
//
Функция ДокументыСНарушениямиДвойнойЗаписиВРегистрах(Период, МассивОрганизаций) Экспорт
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("ДатаНачала", НачалоМесяца(Период));
	ПараметрыЗапроса.Вставить("ДатаОкончания", КонецМесяца(Период));
	ПараметрыЗапроса.Вставить("Организация", МассивОрганизаций);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	
	Запрос = ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц);
	ТекстыЗапросовЗаписейРегистров = ТекстыЗапросовЗаписейРегистров(Запрос);
	ТекстЗапросаЗаписейДляКорреспонденций = ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров);
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаЗаписейДляКорреспонденций);
	
	СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов);
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втДвиженияНеотраженныхДебетКредит
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ГДЕ
	|			СтатусыОтражения.Организация = ДвиженияДебетКредит.Организация
	|			И СтатусыОтражения.Регистратор = ДвиженияДебетКредит.Регистратор
	|			И НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ) = НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ)
	|			И СтатусыОтражения.Статус В (
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете),
	|				ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную)
	|			)
	|		)
	|
	|;
	|
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втДвиженияНеотраженныхДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	ДвиженияДебетКредит.ИмяРегистраДт = """"
	|	ИЛИ ДвиженияДебетКредит.ИмяРегистраКт = """"
	|	ИЛИ ДвиженияДебетКредит.ИдентификаторФинЗаписи = """"
	|	ИЛИ ДвиженияДебетКредит.СуммаУпрДт <> ДвиженияДебетКредит.СуммаУпрКт
	|	ИЛИ ДвиженияДебетКредит.СуммаРеглДт <> ДвиженияДебетКредит.СуммаРеглКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ИмяРегистраСлужебныхОбъектовУчета КАК ИмяРегистраДт,
	|	&ИмяРегистраСлужебныхОбъектовУчета КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаУпрДт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаУпрКт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаРеглДт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаРеглКт
	|ИЗ
	|	втДвиженияНеотраженныхДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	(ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|	И ДвиженияДебетКредит.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ВводОстатков))
	|	ИЛИ
	|	(ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|	И ДвиженияДебетКредит.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ВводОстатков))
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.Организация,
	|	ДвиженияДебетКредит.Регистратор
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|	ИЛИ
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> СУММА(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	ТекстыЗапросов.Очистить();
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Результат.Колонки.Добавить("Регистратор", Документы.ТипВсеСсылки());
	Результат.Колонки.Добавить("ИмяРегистра", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Пока Выборка.Следующий() Цикл
		Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторФинЗаписи) Тогда
			Если ЗначениеЗаполнено(Выборка.ИмяРегистраДт)
				И Выборка.ИмяРегистраДт <> ИмяРегистраСлужебныхОбъектовУчета() Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Организация = Выборка.Организация;
				НоваяСтрока.Регистратор = Выборка.Регистратор;
				НоваяСтрока.ИмяРегистра = Выборка.ИмяРегистраДт;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ИмяРегистраКт)
				И Выборка.ИмяРегистраКт <> ИмяРегистраСлужебныхОбъектовУчета() Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Организация = Выборка.Организация;
				НоваяСтрока.Регистратор = Выборка.Регистратор;
				НоваяСтрока.ИмяРегистра = Выборка.ИмяРегистраКт;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт)
		 ИЛИ НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт) Тогда
			НоваяСтрока = Результат.Добавить();
			НоваяСтрока.Организация = Выборка.Организация;
			НоваяСтрока.Регистратор = Выборка.Регистратор;
		ИначеЕсли Выборка.СуммаУпрДт <> Выборка.СуммаУпрКт
			ИЛИ Выборка.СуммаРеглДт <> Выборка.СуммаРеглКт Тогда
			Если Выборка.ИмяРегистраДт = ИмяРегистраСлужебныхОбъектовУчета()
			 ИЛИ Выборка.ИмяРегистраКт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Организация = Выборка.Организация;
				НоваяСтрока.Регистратор = Выборка.Регистратор;
			Иначе
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Организация = Выборка.Организация;
				НоваяСтрока.Регистратор = Выборка.Регистратор;
				НоваяСтрока.ИмяРегистра = Выборка.ИмяРегистраДт;
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Организация = Выборка.Организация;
				НоваяСтрока.Регистратор = Выборка.Регистратор;
				НоваяСтрока.ИмяРегистра = Выборка.ИмяРегистраКт;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат.Свернуть("Организация,Регистратор,ИмяРегистра");
	
	СтруктураПоиска = Новый Структура("ИмяРегистра", "");
	СтрокиБезРегистра = Результат.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаБезРегистра Из СтрокиБезРегистра Цикл
		СтруктураПоиска = Новый Структура("Организация,Регистратор", СтрокаБезРегистра.Организация, СтрокаБезРегистра.Регистратор);
		УдаляемыеСтроки = Результат.НайтиСтроки(СтруктураПоиска);
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			Если УдаляемаяСтрока <> СтрокаБезРегистра Тогда
				Результат.Удалить(УдаляемаяСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	
	СтруктураПоиска = Новый Структура("ИмяРегистра", МетаданныеРегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
	СтрокиРасчетыПоСрокам = Результат.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаРасчетыПоСрокам Из СтрокиРасчетыПоСрокам Цикл
		СтрокаРасчетыПоСрокам.ИмяРегистра = МетаданныеРегистрыНакопления.РасчетыСКлиентами.Имя;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ИмяРегистра", МетаданныеРегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя);
	СтрокиРасчетыПоСрокам = Результат.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаРасчетыПоСрокам Из СтрокиРасчетыПоСрокам Цикл
		СтрокаРасчетыПоСрокам.ИмяРегистра = МетаданныеРегистрыНакопления.РасчетыСПоставщиками.Имя;
	КонецЦикла;
	
	СтруктураПоиска = Новый Структура("ИмяРегистра", МетаданныеРегистрыНакопления.ПроцентныеРасходыДисконтирования.Имя);
	СтрокиРасчетыПоСрокам = Результат.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаРасчетыПоСрокам Из СтрокиРасчетыПоСрокам Цикл
		СтрокаРасчетыПоСрокам.ИмяРегистра = МетаданныеРегистрыНакопления.РасчетыСПоставщиками.Имя;
	КонецЦикла;
	
	Результат.Свернуть("Организация,Регистратор,ИмяРегистра");
	
	Возврат Результат;
	
КонецФункции

// Дополняет параметры отражения необходимыми для формирования проводок по регистрам оперативного учета.
// 
// Параметры:
// 	 ПараметрыФормированияПроводок - см. МеждународныйУчетПроведениеСервер.ПараметрыФормированияПроводок
//
Процедура ДополнитьПараметрыФормированияПроводок(ПараметрыФормированияПроводок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормированияПроводок.СвернутьТаблицуПроводок = Истина;
	ПараметрыФормированияПроводок.УдалитьНезначащиеПроводки = Истина;
	
КонецПроцедуры

// Выполняет формирование проводок международного учета по данным регистров оперативного учета.
// 
// Параметры:
// 	ПараметрыФормированияПроводок - Структура - Параметры формирования проводок.
// 	ТаблицаПроводок - ТаблицаЗначений - Таблица, в которую добавляются сформированные проводки.
//
Процедура Отразить(ПараметрыФормированияПроводок, ТаблицаПроводок) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура();
	
	Запрос = ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, ПараметрыФормированияПроводок.МенеджерВременныхТаблиц);
	ТекстыЗапросовЗаписейРегистров = ТекстыЗапросовЗаписейРегистров(Запрос);
	ТекстЗапросаЗаписейДляКорреспонденций = ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров);
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаЗаписейДляКорреспонденций);
	
	СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов);
	
	РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов);
	
	ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
	
	ПроверитьОшибкиКорреспонденций(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок);
	
	СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов);
	
	ОпределитьСчетаУчетаОтдельныхКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров);

	УдалитьНеотражаемыеКорреспонденции(Запрос, ТекстыЗапросов);

	СформироватьЗапросыАналитикиКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров);
	
	ЗаполнитьТаблицуПроводок(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок);
	
КонецПроцедуры

// Дополняет таблицы регистрации документа к отражению в международном учете по данным движений в остаточных регистрах.
// 
// Параметры:
// 	Объект - ДокументОбъект - Документ, который проводится.
// 	ДополнительныеСвойства - Структура - Дополнительные свойства РС ОтражениеДокументовВМеждународномУчете.
// 	ТаблицаРегистрации - ТаблицаЗначений - Таблица с данными регистрации к отражению, которую необходимо дополнить:
// 	                      * Период - Дата - период регистрации (дата документа)
// 	                      * Организация - СправочникСсылка.Организации - организация по которой документ формирует проводки
// 	                      * ДатаОтражения - Дата - дата, на которую документ формирует проводки;
// 	                      * ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - отражаемая хозяйственная операция.
//
Процедура ДополнитьТаблицыРегистрацииКОтражению(Объект, ДополнительныеСвойства, ТаблицаРегистрации) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОтражениеДокументовВМеждународномУчете = Неопределено;
	ПереданаТаблицаОтражениеДокументовВМеждународномУчете = 
		ДополнительныеСвойства.Свойство("ТаблицаОтражениеДокументовВМеждународномУчете", ТаблицаОтражениеДокументовВМеждународномУчете);
	
	Если ПереданаТаблицаОтражениеДокументовВМеждународномУчете  Тогда 
		// В модуле менеджера была подготовлена таблица данных для регистрации.
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаОтражениеДокументовВМеждународномУчете, ТаблицаРегистрации);
	Иначе
		ДополнитьТаблицуРегистрацииПоДаннымОстаточныхФинансовыхРегистров(Объект, ТаблицаРегистрации);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру параметров отражения записей регистров накопления в финансовом учете.
// 
// Возвращаемое значение:
// 	Структура - Описание:
//  * ИнверсияДвижений - Булево - Признак несоответствия движений регистра правилу Приход = Дебет, Расход = Кредит
//  * ПутьКДаннымОбъектНастройки - Строка - Путь выборки данных регистра, соответствующих объектам настроек, в разрезе которых указываются счета учета. Может быть переопределено в описании объектов бух.учета
//  * ПутьКДаннымОрганизация - Строка - Путь выборки значения организации из данных регистра
//  * ПутьКДаннымРегистратор - Строка - Путь выборки значения документа движения из данных регистра
//  * ПутьКДаннымИдентификаторФинЗаписи - Строка - Путь выборки значения идентификатора записи регистра
//  * ПутьКДаннымНаправлениеДеятельности - Строка - Путь выборки значения направления деятельности из данных регистра
//  * ПутьКДаннымИдентификаторСтроки - Строка - Путь выборки значения идентификатора строки из данных регистра. Может быть переопределено в описании объектов бух.учета
//  * ПутьКДаннымВидДеятельностиНДС - Строка - Путь выборки значения вида деятельности по учету НДС из данных регистра
//  * ПутьКДаннымПодразделение - Строка - Путь выборки значения подразделения из данных регистра
//  * ПутьКДаннымМестоУчета - Строка - Путь выборки данных регистра, соответствующих местам учета, в разрезе которых указываются исключения счетов учета
//  * ПутьКДаннымВалюта - Строка - Путь выборки значения валюты из данных регистра, пустая строка если в регистре не ведется валютный учет
//  * ПутьКДаннымСторно - Строка - Путь выборки признака исправительной записи корректирующего документа
//  * ЭтоРегистрУчетаНДС - Булево - Признак учета входящего или исходящего НДС.
//  * РесурсыУпр - Массив - Массив строк с именами всех используемых ресурсов, хранящих сумму операции в валюте управленческого учета. Может быть переопределено в описании объектов бух.учета
//  * РесурсыРегл - Массив - Массив строк с именами всех используемых ресурсов, хранящих сумму операции в валюте регламентированного учета. Может быть переопределено в описании объектов бух.учета
//  * РесурсыВал - Массив - Массив строк с именами всех используемых ресурсов, хранящих валютную сумму операции, если в регистре ведется валютный учет. Может быть переопределено в описании объектов бух.учета
//  * РесурсыКоличество - Массив - Массив строк с именами ресурсов, хранящих количество операции
//  * ИсточникиСубконто - Структура Из КлючИЗначение - Описание:
//   ** Ключ - Строка - Имя измерения регистра или реквизита измерения если оно является ключем аналитики
//   ** Значение - см. ОписаниеИсточникаСубконто
//  * УсловиеПриход - Строка - Условие на языке запросов для определения признака дебета движения в некоторых оборотных регистрах и остаточных регистрах со сложной логикой
//  * УсловиеРасход - Строка - Условие на языке запросов для определения признака кредита движения в некоторых оборотных регистрах и остаточных регистрах со сложной логикой
//  * ДополнительныйОтбор - Строка - Условие на языке запросов для дополнительного отбора данных регистра.
// 
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = Новый Структура();
	ПараметрыОтражения.Вставить("ИнверсияДвижений", Ложь);
	ПараметрыОтражения.Вставить("ПутьКДаннымОбъектНастройки", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымОрганизация", "Организация");
	ПараметрыОтражения.Вставить("ПутьКДаннымРегистратор", "Регистратор");
	ПараметрыОтражения.Вставить("ПутьКДаннымИдентификаторФинЗаписи", "ИдентификаторФинЗаписи");
	ПараметрыОтражения.Вставить("ПутьКДаннымНаправлениеДеятельности", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымИдентификаторСтроки", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымВидДеятельностиНДС", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымПодразделение", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымМестоУчета", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымВалюта", "");
	ПараметрыОтражения.Вставить("ПутьКДаннымСторно", "");
	ПараметрыОтражения.Вставить("ЭтоРегистрУчетаНДС", Ложь);
	ПараметрыОтражения.Вставить("РесурсыУпр", Новый Массив());
	ПараметрыОтражения.Вставить("РесурсыРегл", Новый Массив());
	ПараметрыОтражения.Вставить("РесурсыВал", Новый Массив());
	ПараметрыОтражения.Вставить("РесурсыКоличество", Новый Массив());
	ПараметрыОтражения.Вставить("ИсточникиСубконто", Новый Структура);
	ПараметрыОтражения.Вставить("УсловиеДебет", "");
	ПараметрыОтражения.Вставить("УсловиеКредит", "");
	ПараметрыОтражения.Вставить("ДополнительныйОтбор", "");
	
	Возврат ПараметрыОтражения;
	
КонецФункции

// Заполняет параметры отражения движений в фин.учете и источники заполнения субконто по измерениям и реквизитам регистра накопления
//
// Параметры:
//  ПараметрыОтражения - см. ПараметрыОтраженияДвиженийВФинансовомУчете
//  МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//	НедоступныеПоля - Массив - Массив имен полей, которые не доступны в качестве источников заполнения субконто
//
Процедура ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра, НедоступныеПоля = Неопределено) Экспорт
	
	Если МетаданныеРегистра.Реквизиты.Найти("ИдентификаторСтроки") <> Неопределено Тогда
		ПараметрыОтражения.ПутьКДаннымИдентификаторСтроки = "ИдентификаторСтроки";
	КонецЕсли;
	
	Если ПараметрыОтражения.РесурсыВал.Количество() > 0
		И МетаданныеРегистра.Измерения.Найти("ВидДеятельностиНДС") <> Неопределено Тогда
		ПараметрыОтражения.ПутьКДаннымВидДеятельностиНДС = "ВидДеятельностиНДС";
	КонецЕсли;
	
	Если МетаданныеРегистра.Реквизиты.Найти("Сторно") <> Неопределено Тогда
		ПараметрыОтражения.ПутьКДаннымСторно = "Сторно";
	КонецЕсли;
	
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		Если НедоступныеПоля <> Неопределено И НедоступныеПоля.Найти(Измерение.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНачинаетсяС(Измерение.Имя, "Удалить") Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеИсточникаСубконто = ОписаниеИсточникаСубконто();
		ОписаниеИсточникаСубконто.ПутьКДанным = Измерение.Имя;
		ОписаниеИсточникаСубконто.Заголовок = Измерение.Синоним;
		ОписаниеИсточникаСубконто.Тип = Измерение.Тип;
		ПараметрыОтражения.ИсточникиСубконто.Вставить(Измерение.Имя, ОписаниеИсточникаСубконто);
	КонецЦикла;
	
	ДобавитьСоставКлючейАналитикиВИсточникиСубконто(ПараметрыОтражения.ИсточникиСубконто, МетаданныеРегистра);
	
	ОборотныеСубконто = МеждународныйУчетСерверПовтИсп.ОборотныеСубконто();
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ДобавитьРеквизитВИсточники = Ложь;
		
		Для Каждого ОборотноеСубконто Из ОборотныеСубконто Цикл
			Если Реквизит.Тип = ОборотноеСубконто.ТипЗначения Тогда
				ДобавитьРеквизитВИсточники = Истина;
			Иначе
				Для Каждого ТипСубконто Из ОборотноеСубконто.ТипЗначения.Типы() Цикл
					Если Реквизит.Тип.СодержитТип(ТипСубконто) Тогда
						ДобавитьРеквизитВИсточники = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавитьРеквизитВИсточники Тогда
			ОписаниеИсточникаСубконто = ОписаниеИсточникаСубконто();
			ОписаниеИсточникаСубконто.ПутьКДанным = Реквизит.Имя;
			ОписаниеИсточникаСубконто.Заголовок = Реквизит.Синоним;
			ОписаниеИсточникаСубконто.Тип = Реквизит.Тип;
			ПараметрыОтражения.ИсточникиСубконто.Вставить(Реквизит.Имя, ОписаниеИсточникаСубконто);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку - текст выборки значения ГФУ номенклатуры из регистров ВыручкаИСебестоимостьПродаж и СебестоимостьТоваров
//
// Параметры:
//
// Возвращаемое значение:
//  Строка - текст выборки значения ГФУ номенклатуры
//
Функция ПолеВыборкиГФУНоменклатуры() Экспорт
	
	Возврат "ВЫБОР
	|		КОГДА АналитикаУчетаНоменклатуры.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Работа)
	|			ТОГДА АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|		КОГДА &ФормироватьВидыЗапасовПоГруппамФинансовогоУчета И ВидЗапасов <> ЗНАЧЕНИЕ(Справочник.ВидыЗапасов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ВидЗапасов.ГруппаФинансовогоУчета, ЗНАЧЕНИЕ(Справочник.ГруппыФинансовогоУчетаНоменклатуры.ПустаяСсылка))
	|		ИНАЧЕ АналитикаУчетаНоменклатуры.Номенклатура.ГруппаФинансовогоУчета
	|	КОНЕЦ";
	
КонецФункции

// Выполняет проверку наличия настроенных соответствий счетов, необходимых для отражения документов. 
// 
// Параметры:
// 	МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - Содержит временную таблицу ДокументыКОтражению:
// 	              * Документ - ДокументСсылка - отражаемый документ
// 	              * Организация - СправочникСсылка.Организации - отражаемая организация
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - действующая на дату отражения настройка формирования проводок
// 	ПараметрыПроверки - См. Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения
// 	
// Возвращаемое значение:
// 	ТаблицаЗначений - Таблица необходимых настроек:
// 	              * ОбъектУчета - ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета -
// 	              * ОбъектНастройки - См. Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета
// 	              * ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета -
// 	              * НастройкаФормированияПроводок - СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета - 
//
Функция ПроверитьПравилаОтражения(МенеджерВременныхТаблиц, ПараметрыПроверки) Экспорт
	
	ТаблицаОшибок = Новый ТаблицаЗначений;
	
	Если Не ПолучитьФункциональнуюОпцию("НастройкаПроводокПоОбъектамУчета") Тогда
		Возврат ТаблицаОшибок;
	КонецЕсли;
	
	ТаблицаОшибок.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета"));
	ТаблицаОшибок.Колонки.Добавить("ОбъектНастройки", Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета.Тип);
	ТаблицаОшибок.Колонки.Добавить("ПланСчетов", Новый ОписаниеТипов("СправочникСсылка.ПланыСчетовМеждународногоУчета"));
	ТаблицаОшибок.Колонки.Добавить("НастройкаФормированияПроводок", Новый ОписаниеТипов("СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета"));
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбъектыДляНастройки.ОбъектУчета,
	|	ОбъектыДляНастройки.ОбъектНастройки,
	|	ОбъектыДляНастройки.ПланСчетов,
	|	ОбъектыДляНастройки.НастройкаФормированияПроводок
	|ИЗ
	|	РегистрСведений.СчетаМеждународногоУчетаТребующиеНастройки КАК ОбъектыДляНастройки
	|ГДЕ
	|	(ПланСчетов, НастройкаФормированияПроводок, Документ) В
	|		(ВЫБРАТЬ
	|			ДокументыКОтражению.ПланСчетов,
	|			ДокументыКОтражению.НастройкаФормированияПроводок,
	|			ДокументыКОтражению.Регистратор
	|		ИЗ
	|			ДокументыКОтражению КАК ДокументыКОтражению
	|		) 
	|";
	
	ТаблицаОшибок = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОшибок;
	
КонецФункции

// См. ОбщийМодуль.ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов()
// 
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
	
	#Область АнализКорреспонденцийОперативногоУчета
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.АнализКорреспонденцийОперативногоУчета);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НастройкаПроводокПоОбъектамУчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сформированные в финансовых регистрах корреспонденции объектов учета
		|с применением настроек счетов учета и настроек отражения корреспонденций.';
		|en = 'Correspondence of the accounting objects generated in financial registers
		|using GL account settings and correspondence settings.'");
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "АнализКорреспонденций");
	ОписаниеВарианта.ФункциональныеОпции.Добавить("НастройкаПроводокПоОбъектамУчета");
	ОписаниеВарианта.Описание = НСтр("ru = 'Сформированные в финансовых регистрах корреспонденции объектов учета
		|с применением настроек счетов учета и настроек отражения корреспонденций.';
		|en = 'Correspondence of the accounting objects generated in financial registers
		|using GL account settings and correspondence settings.'");

	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "АнализКорреспонденцийШахматка");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "АнализКорреспонденцийПоДокументам");
	ВариантыОтчетовУТПереопределяемый.ОтключитьВариантОтчета(Настройки, ОписаниеОтчета, "ОшибкиКорреспонденций");
	#КонецОбласти
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает список полей источника данных объекта учета, которые могут быть использованы для заполнения субконто определенного типа.
// Наиболее подходящие по типу поля будут в начале списка.
// 
// Параметры:
// 	ТипЗначенияСубконто - ОписаниеТипов - Тип субконто
// 	ОписаниеОбъектаУчета - См. Перечисления.ОбъектыБухгалтерскогоУчета.ОписаниеОбъектаБухгалтерскогоУчета 
// 	Префикс - Строка - произвольный префикс, который добавляется к имени поля. Например, "ОбъектУчетаКт"
// Возвращаемое значение:
// 	СписокЗначений Из ЭлементСпискаЗначений - Описание:
//		* Значение - Строка - Имя поля с учетом префикса
//		* Представление - Строка - Путь к данным
//
Функция ВозможныеПоляЗаполненияСубконто(ТипЗначенияСубконто, ОписаниеОбъектаУчета, Префикс = "") Экспорт
	
	Результат = Новый СписокЗначений();
	
	Если ОписаниеОбъектаУчета = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеПолейРегистра = ПоляРегистраПоТипуСубконто(ТипЗначенияСубконто, ОписаниеОбъектаУчета.ИсточникДанных);
	Для Каждого ОписаниеПоля Из ОписаниеПолейРегистра Цикл
		Результат.Добавить(?(ПустаяСтрока(Префикс), "", Префикс + ".") + ОписаниеПоля.ИмяПоля, ОписаниеПоля.ПутьКДанным);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Конструктор описание поля-источника субконто
//
// Возвращаемое значение:
// 	Структура - Описание:
// 		* ПутьКДанным - Строка - Полный путь к полю источнику субконто
// 		* Заголовок - Строка - Заголовок поля источника субконто
// 		* Тип - ОписаниеТипов - Тип данных, который хранится в поле
Функция ОписаниеИсточникаСубконто() Экспорт
	
	Возврат Новый Структура("ПутьКДанным, Заголовок, Тип", "", "", Новый ОписаниеТипов());
	
КонецФункции

// Добавляет в источники заполнения субконто реквизиты измерений регистра накопления - ключей аналитики
//
// Параметры:
//  ИсточникиСубконто - Структура Из КлючИЗначение - Источники заполнения субконто:
//   * Ключ - Строка - Имя реквизита измерения - ключа аналитики
//   * Значение - см. ОписаниеИсточникаСубконто
//	МетаданныеРегистра - ОбъектМетаданныхРегистрНакопления - Метаданные регистра накопления
//
Процедура ДобавитьСоставКлючейАналитикиВИсточникиСубконто(ИсточникиСубконто, МетаданныеРегистра) Экспорт
	
	ТипыКлючейАналитики = Новый Массив();
	ТипыКлючейАналитики.Добавить(Тип("СправочникСсылка.КлючиАналитикиУчетаПартий"));
	ТипыКлючейАналитики.Добавить(Тип("СправочникСсылка.КлючиАналитикиУчетаНоменклатуры"));
	ТипыКлючейАналитики.Добавить(Тип("СправочникСсылка.КлючиАналитикиУчетаПоПартнерам"));
	
	Для Каждого ТипКлючаАналитики Из ТипыКлючейАналитики Цикл
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			Если СтрНачинаетсяС(Измерение.Имя, "Удалить") Тогда
			ИначеЕсли Измерение.Тип.СодержитТип(ТипКлючаАналитики) Тогда
				МетаданныеКлючаАналитики = Метаданные.НайтиПоТипу(ТипКлючаАналитики);
				Для каждого Реквизит Из МетаданныеКлючаАналитики.Реквизиты Цикл
					ОписаниеИсточникаСубконто = ОписаниеИсточникаСубконто();
					ОписаниеИсточникаСубконто.ПутьКДанным = СтрШаблон("%1.%2", Измерение.Имя, Реквизит.Имя);
					ОписаниеИсточникаСубконто.Заголовок = СтрШаблон("%1 (%2)", Реквизит.Синоним, Измерение.Синоним);
					ОписаниеИсточникаСубконто.Тип = Реквизит.Тип;
					ИсточникиСубконто.Вставить(СтрШаблон("%1_%2", Измерение.Имя, Реквизит.Имя), ОписаниеИсточникаСубконто);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает запрос для выполнения отчета АнализКорреспонденцийОперативногоУчета
// Принимает на входе значения параметров, по которым в формируемом запросе должен быть установлен отбор
// или наложены ограничения на состав таблиц выборки при формировании текстов запросов.
// Состав параметров может быть произвольным. Список возможных параметров:
//  	* ДатаНачала - Дата - Начальная дата выборки данных
//  	* ДатаОкончания - Дата - Конечная дата выборки данных
//  	* Регистратор - ДокументСсылка или Массив из ДокументСсылка - отбор по регистратору
//  	* Организация - СправочникСсылка.Организации или Массив из СправочникСсылка.Организации - Отбор по организации
//  	* ОбъектУчетаДт - ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета или Массив из ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета - отбор по объекту учета дебета
//  	* ОбъектУчетаКт - ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета или Массив из ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета - отбор по объекту учета кредита
// 
// Параметры:
//  ПараметрыЗапроса - Структура Из КлючИЗначение - Описание
//  	* Ключ - Строка - Имя параметра запроса
//  	* Значение - Значение или Массив - Значение параметра запроса
// 
// Возвращаемое значение:
//  Запрос
//
Функция ЗапросАнализаКорреспонденцийОперативногоУчета(ПараметрыЗапроса) Экспорт
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц();
	ЕстьДополнительныйОтбор = ПараметрыЗапроса.ДополнительныйОтбор.Элементы.Количество() > 0;
	
	Запрос = ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц);
	ТекстыЗапросовЗаписейРегистров = ТекстыЗапросовЗаписейРегистров(Запрос);
	ТекстЗапросаЗаписейДляКорреспонденций = ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров);
	
	ТекстыЗапросов = Новый Массив();
	ТекстыЗапросов.Добавить(ТекстЗапросаЗаписейДляКорреспонденций);
	
	СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов);
	
	РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов);
	
	Если ПараметрыЗапроса.КлючВарианта = "ОшибкиКорреспонденций" Тогда
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапросаОшибкиКорреспонденций();
		
	ИначеЕсли ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийШахматка"
		ИЛИ (ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийПоДокументам" И НЕ ЕстьДополнительныйОтбор) Тогда
		
		ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапросаАнализКорреспонденцийДляНастройки();
		
	ИначеЕсли ПараметрыЗапроса.КлючВарианта = "АнализКорреспонденцийПоДокументам" И ЕстьДополнительныйОтбор Тогда
		
		ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
		
		ПодготовитьЗапросАнализаКорреспонденцийДляНастройкиСОтбором(Запрос, ТекстыЗапросов,
			ТекстыЗапросовЗаписейРегистров, ПараметрыЗапроса.ДополнительныйОтбор);
		
	Иначе
		
		ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов);
		
		ПропуститьПроверкуОшибокКорреспонденций(ТекстыЗапросов);
		
		СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов);
		
		ОпределитьСчетаУчетаОтдельныхКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовЗаписейРегистров);
		
		УдалитьНеотражаемыеКорреспонденции(Запрос, ТекстыЗапросов);
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Запрос.Выполнить();
		Запрос.Текст = ТекстЗапросаПолныйАнализКорреспонденций();
		
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

// Рекурсивно копирует отбор компоновки данных из источника в приемник с добавлением суффикса
// к имени поля компоновки данных
//
// Параметры:
//  ОтборПриемник - ОтборКомпоновкиДанных - отбор, в который копируются элементы отбора
//  ОтборИсточник - ОтборКомпоновкиДанных - отбор, из которого копируются элементы отбора
//  ДтКт - Строка - суффикс, добавляемый к имени поля компоновки данных, "Дт" или "Кт"
//
Процедура СкопироватьОтборКомпоновкиДанных(ОтборПриемник, ОтборИсточник, ДтКт = "") Экспорт
	
	Для Каждого ЭлементОтбора Из ОтборИсточник.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора, ДтКт);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ЭлементОтбора, ДтКт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает строку условия на языке запросов на основании описания отбора, переданного в виде структуры, соответствия,
// массива или фиксированного массива. Элементы отбора, переданные в структуре или соответствии, складываются в условии по "И".
// Элементы отбора, переданные в массиве или фиксированном массиве, складываются в условии по "ИЛИ".
// 
// Параметры:
//  ОтборДанных - Структура, Соответствие, Массив, ФиксированныйМассив - Описание
//  	* Ключ - Строка - Имя реквизита отбора
//  	* Значение - Значение или Массив - Значение отбора по реквизиту
//  ПараметрыЗапроса - Структура - параметры запроса, в которые будут добавлены значения отбора, которые невозможно описать языком запросов
//
// Возвращаемое значение:
//  Строка - текст условия отбора на языке запросов, заключенный в скобки
//
Функция СтрокаУсловияВыборкиДанных(ОтборДанных, ПараметрыЗапроса = Неопределено) Экспорт
	
	Если ТипЗнч(ОтборДанных) = Тип("Структура")
	 ИЛИ ТипЗнч(ОтборДанных) = Тип("Соответствие") Тогда
	
		СтрокиИ = Новый Массив();
		Для Каждого УсловиеОтбора Из ОтборДанных Цикл
			СтрокаВыборкиЗначения = СтрокаВыборкиЗначения(УсловиеОтбора.Значение);
			ЭтоПараметр = СтрНачинаетсяС(СтрокаВыборкиЗначения, "Параметр");
			ЭтоМассив = ТипЗнч(УсловиеОтбора.Значение) = Тип("Массив");
			Если ЭтоПараметр Тогда
				Если ПараметрыЗапроса <> Неопределено Тогда
					ПараметрыЗапроса.Вставить(СтрокаВыборкиЗначения, УсловиеОтбора.Значение);
				Иначе
					ТекстыИсключения = Новый Массив();
					ТекстыИсключения.Добавить(НСтр("ru = 'Значение не может быть преобразовано в выражение запроса.';
													|en = 'The value cannot be converted to a query expression.'"));
					ТекстыИсключения.Добавить(НСтр("ru = 'Требуется передача параметров запроса.';
													|en = 'Pass the query parameters.'"));
					ТекстыИсключения.Добавить(СтрШаблон("(%1)", УсловиеОтбора.Значение));
					ВызватьИсключение СтрСоединить(ТекстыИсключения, " ");
				КонецЕсли;
			КонецЕсли;
			ЧастиСтроки = Новый Массив();
			ЧастиСтроки.Добавить(УсловиеОтбора.Ключ);
			ЧастиСтроки.Добавить(?(ЭтоМассив, " В (", " = "));
			ЧастиСтроки.Добавить(?(ЭтоПараметр, "&", ""));
			ЧастиСтроки.Добавить(СтрокаВыборкиЗначения);
			ЧастиСтроки.Добавить(?(ЭтоМассив, ")", ""));
			СтрокиИ.Добавить(СтрСоединить(ЧастиСтроки));
		КонецЦикла;
		СтрокаУсловия = СтрСоединить(СтрокиИ, " И ");
		
	ИначеЕсли ТипЗнч(ОтборДанных) = Тип("Массив")
	 ИЛИ ТипЗнч(ОтборДанных) = Тип("ФиксированныйМассив") Тогда
		
		СтрокиИли = Новый Массив();
		Для Каждого УсловиеОтбора Из ОтборДанных Цикл
			СтрокиИли.Добавить(СтрокаУсловияВыборкиДанных(УсловиеОтбора, ПараметрыЗапроса));
		КонецЦикла;
		СтрокаУсловия = СтрСоединить(СтрокиИли, " ИЛИ ");
		
	КонецЕсли;
	
	Возврат "(" + СтрокаУсловия + ")";
	
КонецФункции

// Возвращает массив имен документов, не используемых при трансляции проводок МФУ по данным остаточных финансовых регистров
// 
// Возвращаемое значение:
// 	Массив из Строка - имена неиспользуемых документов
//
Функция ИменаНеиспользуемыхДокументов() Экспорт
	
	ИменаДокументов = Новый Массив();
	МетаданныеДокументы = Метаданные.Документы;
	
	ИменаДокументов.Добавить(МетаданныеДокументы.ВводОстатков.Имя);
	ИменаДокументов.Добавить(МетаданныеДокументы.КорректировкаРегистров.Имя);
	
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистровЛокализация.ДобавитьИменаНеиспользуемыхДокументов(ИменаДокументов);
	
	Возврат ИменаДокументов;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьТаблицуРегистрацииПоДаннымОстаточныхФинансовыхРегистров(Документ, ТаблицаРегистрации)

	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	ОписаниеРегистров = ОписаниеОстаточныхФинансовыхРегистров();
	ТекстыЗапросовРегистрации = Новый Массив;
	
	Для каждого КлючИЗначение Из ОписаниеРегистров Цикл
		ИмяРегистра = КлючИЗначение.Ключ;
		Описание = КлючИЗначение.Значение;
		
		Если Описание.Метаданные = МетаданныеРегистрыНакопления.РасчетыСКлиентамиПоСрокам Тогда
			ИмяРегистраПроверкиДвижений = МетаданныеРегистрыНакопления.РасчетыСКлиентами.Имя;
		ИначеЕсли Описание.Метаданные = МетаданныеРегистрыНакопления.РасчетыСПоставщикамиПоСрокам Тогда
			ИмяРегистраПроверкиДвижений = МетаданныеРегистрыНакопления.РасчетыСПоставщиками.Имя;
		Иначе
			ИмяРегистраПроверкиДвижений = ИмяРегистра;
		КонецЕсли;
		
		Если ТипЗнч(Документ.Движения) = Тип("Структура")
			И НЕ Документ.Движения.Свойство(ИмяРегистраПроверкиДвижений) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Документ.Движения) = Тип("КоллекцияДвижений")
			И Документ.Движения.Найти(ИмяРегистраПроверкиДвижений) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПустаяСтрока(Описание.ПутьКДаннымОрганизация) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Период КАК ДатаОтражения,
		|	&Организация КАК Организация,
		|	НастройкаХозяйственнойОперации.ХозяйственнаяОперация КАК ХозяйственнаяОперация
		|ИЗ
		|	&ПолноеИмяРегистра КАК Движения
		|ГДЕ
		|	&Регистратор = &Ссылка";
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПолноеИмяРегистра", Описание.Метаданные.ПолноеИмя());
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", Описание.ПутьКДаннымОрганизация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Регистратор", Описание.ПутьКДаннымРегистратор);
		ТекстыЗапросовРегистрации.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Если ТекстыЗапросовРегистрации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СтрСоединить(ТекстыЗапросовРегистрации, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении(Истина));
	Запрос.УстановитьПараметр("Ссылка", Документ.Ссылка);
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Запрос.Выполнить().Выгрузить(), ТаблицаРегистрации);
	
КонецПроцедуры

Функция ОписаниеОстаточныхФинансовыхРегистров() 
	
	ОбъектыБухгалтерскогоУчета = Перечисления.ОбъектыБухгалтерскогоУчета.ОписаниеОбъектовБухгалтерскогоУчета();
	ТаблицаФинансовыхРегистров = ОстаточныеФинансовыеРегистры(ОбъектыБухгалтерскогоУчета);
	
	МетаданныеРегистрыНакопления = Метаданные.РегистрыНакопления;
	ОписаниеОстаточныхФинансовыхРегистров = Новый Структура;
	
	Для Каждого СтрокаРегистра Из ТаблицаФинансовыхРегистров Цикл
		РегистрНакопленияМетаданные = МетаданныеРегистрыНакопления[СтрокаРегистра.ИсточникДанных];
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(РегистрНакопленияМетаданные.ПолноеИмя()); // РегистрНакопленияМенеджер - 
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
		ПараметрыОтраженияВУчете.Вставить("Метаданные", РегистрНакопленияМетаданные);
		ОписаниеОстаточныхФинансовыхРегистров.Вставить(РегистрНакопленияМетаданные.Имя, ПараметрыОтраженияВУчете);
	КонецЦикла;
	
	Возврат ОписаниеОстаточныхФинансовыхРегистров;
	
КонецФункции

Функция ОстаточныеФинансовыеРегистры(ОбъектыБухгалтерскогоУчета)
	
	ОстаточныеРегистры = ОбъектыБухгалтерскогоУчета.Скопировать(, "ИсточникДанных");
	
	СлужебныеСтроки = ОстаточныеРегистры.НайтиСтроки(Новый Структура("ИсточникДанных", ""));
	Для Каждого СлужебнаяСтрока Из СлужебныеСтроки Цикл
		ОстаточныеРегистры.Удалить(СлужебнаяСтрока);
	КонецЦикла;
	
	ОстаточныеРегистры.Свернуть("ИсточникДанных");
	
	Возврат ОстаточныеРегистры;
	
КонецФункции

Функция ПоляРегистраПоТипуСубконто(ТипЗначенияСубконто, ИмяРегистра)
	
	ПоляРегистра = Новый ТаблицаЗначений();
	ПоляРегистра.Колонки.Добавить("ИмяПоля", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	
	Если ИмяРегистра = "" Тогда
		Возврат ПоляРегистра;
	КонецЕсли;
	
	ОписаниеИсточникаСубконто = ОписаниеИсточникаСубконто();
	Для Каждого КлючИЗначение Из ОписаниеИсточникаСубконто Цикл
		ИмяКолонки = КлючИЗначение.Ключ;
		ТипКолонки = ТипЗнч(КлючИЗначение.Значение);
		ПоляРегистра.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипКолонки)));
	КонецЦикла;
	
	МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрНакопления." + ИмяРегистра); // РегистрНакопленияМенеджер -
	ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Для каждого КлючИЗначение Из ПараметрыОтраженияВУчете.ИсточникиСубконто Цикл
		ОписаниеИсточникаСубконто = КлючИЗначение.Значение;
		Если ОписаниеИсточникаСубконто.Тип = ТипЗначенияСубконто Тогда
			НоваяСтрока = ПоляРегистра.Вставить(0);
			НоваяСтрока.ИмяПоля = КлючИЗначение.Ключ;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеИсточникаСубконто);
		Иначе
			Для каждого Тип Из ТипЗначенияСубконто.Типы() Цикл
				Если ОписаниеИсточникаСубконто.Тип.СодержитТип(Тип) Тогда
					НоваяСтрока = ПоляРегистра.Добавить();
					НоваяСтрока.ИмяПоля = КлючИЗначение.Ключ;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеИсточникаСубконто);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПоляРегистра;
	
КонецФункции

Функция ПустыеЗначенияТипа(ОписаниеТипов)
	
	ПустыеЗначения = Новый Массив();
	
	Для Каждого Тип Из ОписаниеТипов.Типы() Цикл
		ПустыеЗначения.Добавить(МеждународныйУчетКлиентСервер.ПустоеЗначениеТипа(Тип));
	КонецЦикла;
	
	Если ПустыеЗначения.Количество() > 1 Тогда
		ПустыеЗначения.Добавить(Неопределено);
	КонецЕсли;
	
	Возврат ПустыеЗначения;
	
КонецФункции

#Область ТекстыЗапросовФормированияКорреспонденций

Функция ЗапросДанныхФинансовыхРегистров(ПараметрыЗапроса, МенеджерВременныхТаблиц)
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ИдентификаторНеиспользуемойФинЗаписи", ПроведениеДокументов.ИдентификаторНеиспользуемойФинЗаписи());
	Запрос.УстановитьПараметр("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета", ПолучитьФункциональнуюОпцию("ФормироватьВидыЗапасовПоГруппамФинансовогоУчета"));
	Запрос.УстановитьПараметр("ХозОперацииБезУчетаВВалюте", ХозяйственныеОперацииБезУчетаВВалюте());
	Запрос.УстановитьПараметр("ТипыНалогообложенияБезУчетаНДС", ТипыНалогообложенияБезУчетаНДС());
	Запрос.УстановитьПараметр("ТипыДокументовВводаОстатков", ТипыДокументовВводаОстатков());
	Запрос.УстановитьПараметр("ТипыДокументовРозничныхПродаж", ТипыДокументовРозничныхПродаж());
	Запрос.УстановитьПараметр("ТипыДокументовРозничныхВозвратов", ТипыДокументовРозничныхВозвратов());
	Запрос.УстановитьПараметр("ТипыДокументовВзаимозачетаЗадолженности", ТипыДокументовВзаимозачетаЗадолженности());

	Запрос.УстановитьПараметр("ТипыРегистраторовСлужебныхОбъектовУчета", ОбщегоНазначения.СкопироватьРекурсивно(Запрос.Параметры.ТипыДокументовВводаОстатков));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Запрос.Параметры.ТипыРегистраторовСлужебныхОбъектовУчета, Запрос.Параметры.ТипыДокументовРозничныхПродаж);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Запрос.Параметры.ТипыРегистраторовСлужебныхОбъектовУчета, Запрос.Параметры.ТипыДокументовРозничныхВозвратов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Запрос.Параметры.ТипыРегистраторовСлужебныхОбъектовУчета, Запрос.Параметры.ТипыДокументовВзаимозачетаЗадолженности);
	Запрос.УстановитьПараметр("ИмяРегистраСлужебныхОбъектовУчета", ИмяРегистраСлужебныхОбъектовУчета());
	
	КорИсточникиДанных = Новый ТаблицаЗначений();
	КорИсточникиДанных.Колонки.Добавить("ОбъектУчета", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета"));
	КорИсточникиДанных.Колонки.Добавить("ИмяРегистра", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	Запрос.УстановитьПараметр("КорИсточникиДанных", КорИсточникиДанных);
	
	Запрос.УстановитьПараметр("РегистрыНДС", Новый Массив());
	Запрос.УстановитьПараметр("РегистрыБезОрганизации", Новый Массив());
	Запрос.УстановитьПараметр("РегистрыВыборкиАналитики", Новый Массив());
	Запрос.УстановитьПараметр("ВсеВыраженияСубконто", Новый Соответствие());
	Запрос.УстановитьПараметр("ВсеВидыСубконто", Новый Соответствие());
	
	Запрос.УстановитьПараметр("Дт", "Дт");
	Запрос.УстановитьПараметр("Кт", "Кт");
	
	Запрос.УстановитьПараметр("ВосстановитьРасчетыПоСторно", Ложь);
	Запрос.УстановитьПараметр("ПорядокПримененияНастроекПоОбъектам", 9999);
	
	Запрос.УстановитьПараметр("ПрефиксВыраженияСубконтоДт", "ОбъектУчетаДт");
	Запрос.УстановитьПараметр("ПрефиксВыраженияСубконтоКт", "ОбъектУчетаКт");
	Запрос.УстановитьПараметр("ДлинаПрефиксаВыраженияДт", СтрДлина(Запрос.Параметры.ПрефиксВыраженияСубконтоДт));
	Запрос.УстановитьПараметр("ДлинаПрефиксаВыраженияКт", СтрДлина(Запрос.Параметры.ПрефиксВыраженияСубконтоКт));
	
	КвалификаторыДенежнойСуммы = Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип.КвалификаторыЧисла;
	Запрос.УстановитьПараметр("ДлинаСуммы", КвалификаторыДенежнойСуммы.Разрядность);
	Запрос.УстановитьПараметр("ТочностьСуммы", КвалификаторыДенежнойСуммы.РазрядностьДробнойЧасти);
	
	КвалификаторыКоличества = Метаданные.РегистрыБухгалтерии.Международный.Ресурсы.Количество.Тип.КвалификаторыЧисла;
	Запрос.УстановитьПараметр("ДлинаКоличества", КвалификаторыКоличества.Разрядность);
	Запрос.УстановитьПараметр("ТочностьКоличества", КвалификаторыКоличества.РазрядностьДробнойЧасти);
	
	ДатаНачала = '00010101';
	Если ПараметрыЗапроса.Свойство("ДатаНачала", ДатаНачала) Тогда
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	КонецЕсли;
	
	ДатаОкончания = '00010101';
	Если ПараметрыЗапроса.Свойство("ДатаОкончания", ДатаОкончания) Тогда
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	
	Регистратор = Неопределено;
	Если ПараметрыЗапроса.Свойство("Регистратор", Регистратор) Тогда
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
	КонецЕсли;
	
	Организация = Неопределено;
	Если ПараметрыЗапроса.Свойство("Организация", Организация) Тогда
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	ОбъектУчетаДт = Неопределено;
	Если ПараметрыЗапроса.Свойство("ОбъектУчетаДт", ОбъектУчетаДт) Тогда
		Запрос.УстановитьПараметр("ОбъектУчетаДт", ОбъектУчетаДт);
	КонецЕсли;
	
	ОбъектУчетаКт = Неопределено;
	Если ПараметрыЗапроса.Свойство("ОбъектУчетаКт", ОбъектУчетаКт) Тогда
		Запрос.УстановитьПараметр("ОбъектУчетаКт", ОбъектУчетаКт);
	КонецЕсли;
	
	Если МенеджерВременныхТаблиц.Таблицы.Найти("ДокументыКОтражению") <> Неопределено Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ДокументыКОтражению.Регистратор КАК РегистраторДвижений,
		|	ДокументыКОтражению.Организация КАК ОрганизацияДвижений,
		|	ДокументыКОтражению.ДатаОтражения КАК ДатаДвижений
		|ПОМЕСТИТЬ втПорцияДокументов
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|СГРУППИРОВАТЬ ПО
		|	ДокументыКОтражению.Регистратор,
		|	ДокументыКОтражению.Организация,
		|	ДокументыКОтражению.ДатаОтражения
		|ИНДЕКСИРОВАТЬ ПО
		|	РегистраторДвижений,
		|	ОрганизацияДвижений,
		|	ДатаДвижений
		|
		|;
		|
		|ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ПорцияДокументов.РегистраторДвижений) КАК ТипРегистратора
		|ИЗ
		|	втПорцияДокументов КАК ПорцияДокументов
		|СГРУППИРОВАТЬ ПО
		|	ТИПЗНАЧЕНИЯ(ПорцияДокументов.РегистраторДвижений)
		|";
		
		Результат = Запрос.Выполнить();
		Запрос.УстановитьПараметр("ТипРегистратора", Результат.Выгрузить().ВыгрузитьКолонку("ТипРегистратора"));
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции

Функция ШаблонТекстаЗапросаЗаписейРегистра()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	Период КАК Период,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&ОбъектУчета КАК ОбъектУчета,
	|	&ОбъектНастройки КАК ОбъектНастройки,
	|	&МестоУчета КАК МестоУчета,
	|	&ЭтоДебет КАК ЭтоДебет,
	|	&ЭтоКредит КАК ЭтоКредит,
	|	&ЭтоСторно КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	&Регистратор КАК Регистратор,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НастройкаХозяйственнойОперации КАК НастройкаХозОперации,
	|	&ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	&ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	&ВидДеятельностиНДС КАК СлужебныйВидДеятельностиНДС,
	|	&Валюта КАК Валюта,
	|	&СуммаУпр КАК СуммаУпр,
	|	&СуммаРегл КАК СуммаРегл,
	|	&СуммаВал КАК СуммаВал,
	|	&Количество КАК Количество,
	|	&РеквизитСторно КАК РеквизитСторно
	|ИЗ
	|	&ИсточникДанных
	|ГДЕ
	|	Активность
	|	И &ИдентификаторФинЗаписи <> &ИдентификаторНеиспользуемойФинЗаписи
	|	И &УсловиеПериод
	|	И &УсловиеРегистратор
	|	И &УсловиеОрганизация
	|	И &УсловиеЗначенияРесурсов
	|	И &УсловиеВидРегистратора
	|	И &УсловиеДополнительныйОтбор
	|	И &УсловиеРеквизитСторно
	|СГРУППИРОВАТЬ ПО
	|	Период,
	|	&ОбъектУчета,
	|	&ОбъектНастройки,
	|	&МестоУчета,
	|	&ЭтоДебет,
	|	&ЭтоКредит,
	|	&ЭтоСторно,
	|	&ГруппаПолейАналитики,
	|	&Регистратор,
	|	&Организация,
	|	&Подразделение,
	|	&НаправлениеДеятельности,
	|	НастройкаХозяйственнойОперации,
	|	&ИдентификаторФинЗаписи,
	|	&ИдентификаторСтроки,
	|	&ВидДеятельностиНДС,
	|	&Валюта,
	|	&РеквизитСторно
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстыЗапросовЗаписейРегистров(Запрос)
	
	ТекстыЗапросовРегистров = Новый Структура();
	ОбъектыБухгалтерскогоУчета = Перечисления.ОбъектыБухгалтерскогоУчета.ОписаниеОбъектовБухгалтерскогоУчета();
	ОстаточныеФинансовыеРегистры = ОстаточныеФинансовыеРегистры(ОбъектыБухгалтерскогоУчета);
	
	ИсключитьРегистрыПоКоллекциямДвиженийРегистраторов(Запрос.Параметры, ОстаточныеФинансовыеРегистры);
	ИсключитьРегистрыПоКорреспонденциямОбъектовУчета(Запрос.Параметры, ОстаточныеФинансовыеРегистры, ОбъектыБухгалтерскогоУчета);
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	СвойстваОбъектовМетаданных = Метаданные.СвойстваОбъектов;
	
	ЕстьПорцияДокументов = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втПорцияДокументов") <> Неопределено;
	РегистрыВосстановленияРасчетовПоСторно = РегистрыВосстановленияРасчетовПоСторно();
	
	Для Каждого СтрокаРегистра Из ОстаточныеФинансовыеРегистры Цикл
		СтруктураПоиска = Новый Структура("ИсточникДанных", СтрокаРегистра.ИсточникДанных);
		СтрокиОбъектовУчета = ОбъектыБухгалтерскогоУчета.НайтиСтроки(СтруктураПоиска);
		
		ИсключитьОбъектыУчетаПоФункциональнымОпциям(СтрокиОбъектовУчета);
		
		Если СтрокиОбъектовУчета.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если РегистрыВосстановленияРасчетовПоСторно.Найти(СтрокаРегистра.ИсточникДанных) <> Неопределено Тогда
			Запрос.Параметры.ВосстановитьРасчетыПоСторно = Истина;
		КонецЕсли;
		
		МетаданныеРегистра = РегистрыНакопленияМетаданные[СтрокаРегистра.ИсточникДанных];
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя()); // РегистрНакопленияМенеджер - 
		ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
		
		ЭтоДебет = "ВЫБОР
		|		КОГДА &ЭтоСторно
		|			ТОГДА &УсловиеКредит
		|		ИНАЧЕ &УсловиеДебет
		|	КОНЕЦ";
		
		ЭтоКредит = "ВЫБОР
		|		КОГДА &ЭтоСторно
		|			ТОГДА &УсловиеДебет
		|		ИНАЧЕ &УсловиеКредит
		|	КОНЕЦ";
		
		Если НЕ ПустаяСтрока(ПараметрыОтраженияДвижений.УсловиеДебет)
		 ИЛИ НЕ ПустаяСтрока(ПараметрыОтраженияДвижений.УсловиеКредит) Тогда
			УсловиеДебет  = ПараметрыОтраженияДвижений.УсловиеДебет;
			УсловиеКредит = ПараметрыОтраженияДвижений.УсловиеКредит;
		ИначеЕсли МетаданныеРегистра.ВидРегистра = СвойстваОбъектовМетаданных.ВидРегистраНакопления.Обороты Тогда
			УсловиеДебет  = "ЛОЖЬ";
			УсловиеКредит = "ЛОЖЬ";
		ИначеЕсли ПараметрыОтраженияДвижений.ИнверсияДвижений Тогда
			УсловиеДебет  = "ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
			УсловиеКредит = "ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
		Иначе
			УсловиеДебет  = "ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)";
			УсловиеКредит = "ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)";
		КонецЕсли;
		
		ЭтоДебет  = СтрЗаменить(ЭтоДебет,  "&УсловиеДебет",  УсловиеДебет);
		ЭтоДебет  = СтрЗаменить(ЭтоДебет,  "&УсловиеКредит", УсловиеКредит);
		ЭтоКредит = СтрЗаменить(ЭтоКредит, "&УсловиеДебет",  УсловиеДебет);
		ЭтоКредит = СтрЗаменить(ЭтоКредит, "&УсловиеКредит", УсловиеКредит);
		
		Если УсловиеДебет  = "ЛОЖЬ" И УсловиеКредит = "ЛОЖЬ" Тогда
			ШаблонВыборкиСуммы = "ВЫБОР
			|		КОГДА СУММА(&Ресурс) < 0
			|			ТОГДА -СУММА(&Ресурс)
			|		ИНАЧЕ СУММА(&Ресурс)
			|	КОНЕЦ";
		Иначе
			ШаблонВыборкиСуммы = "СУММА(ВЫБОР
			|		КОГДА &Ресурс < 0
			|			ТОГДА -&Ресурс
			|		ИНАЧЕ &Ресурс
			|	КОНЕЦ)";
		КонецЕсли;
		
		КлючиРесурсовОбъектовУчета = Новый Соответствие();
		ТекстыЗапросовРегистра = Новый Массив();
		
		Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
			Для Каждого КорИсточникДанных Из СтрокаОбъектаУчета.КорИсточникиДанных Цикл
				НоваяСтрока = Запрос.Параметры.КорИсточникиДанных.Добавить();
				НоваяСтрока.ОбъектУчета = СтрокаОбъектаУчета.ОбъектУчета;
				НоваяСтрока.ИмяРегистра = КорИсточникДанных;
			КонецЦикла;
			
			ВсеРесурсы = Новый Массив();
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаОбъектаУчета.РесурсыУпр);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаОбъектаУчета.РесурсыРегл);
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеРесурсы, СтрокаОбъектаУчета.РесурсыКоличество);
			КлючРесурсов = СтрСоединить(ВсеРесурсы, ",");
			
			Если КлючиРесурсовОбъектовУчета[КлючРесурсов] = Неопределено Тогда
				КлючиРесурсовОбъектовУчета.Вставить(КлючРесурсов, Новый Массив());
			КонецЕсли;
			
			КлючиРесурсовОбъектовУчета[КлючРесурсов].Добавить(СтрокаОбъектаУчета);
		КонецЦикла;
		
		Для Каждого КлючРесурсовОбъектовУчета Из КлючиРесурсовОбъектовУчета Цикл
			СтрокиОбъектовУчета = КлючРесурсовОбъектовУчета.Значение;
			ОбъектУчета = СтрокаВыборкиОбъектаУчета(СтрокиОбъектовУчета, Запрос.Параметры);
			
			ОбъектНастройки = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымОбъектНастройки",
				СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, Запрос.Параметры, Неопределено);
				
			НаправлениеДеятельности = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымНаправлениеДеятельности",
				СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, Запрос.Параметры, Справочники.НаправленияДеятельности.ПустаяСсылка());
				
			ИдентификаторФинЗаписи = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымИдентификаторФинЗаписи",
				СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, Запрос.Параметры, "");
				
			ИдентификаторСтроки = СтрокаВыборкиПоляОбъектаУчета("ПутьКДаннымИдентификаторСтроки",
				СтрокиОбъектовУчета, ПараметрыОтраженияДвижений, Запрос.Параметры, "");
			
			Если СтрокиОбъектовУчета[0].РесурсыУпр.Количество() > 0 Тогда
				РесурсУпр = СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыУпр);
			Иначе
				РесурсУпр = СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыУпр);
			КонецЕсли;
			
			Если СтрокиОбъектовУчета[0].РесурсыРегл.Количество() > 0 Тогда
				РесурсРегл = СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыРегл);
			Иначе
				РесурсРегл = СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыРегл);
			КонецЕсли;
			
			Если СтрокиОбъектовУчета[0].РесурсыВал.Количество() > 0 Тогда
				РесурсВал = СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыВал);
			Иначе
				РесурсВал = СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыВал);
			КонецЕсли;
			
			Если СтрокиОбъектовУчета[0].РесурсыКоличество.Количество() > 0 Тогда
				РесурсКоличество = СтрокаВыборкиРесурса(СтрокиОбъектовУчета[0].РесурсыКоличество);
			Иначе
				РесурсКоличество = СтрокаВыборкиРесурса(ПараметрыОтраженияДвижений.РесурсыКоличество);
			КонецЕсли;
			
			УсловияСторно = Новый Массив();
			УсловияНеНоль = Новый Массив();
			
			СуммаУпр = СтрокаВыборкиСуммыРесурса(РесурсУпр, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
			СуммаРегл = СтрокаВыборкиСуммыРесурса(РесурсРегл, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
			СуммаВал = СтрокаВыборкиСуммыРесурса(РесурсВал, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
			Количество = СтрокаВыборкиСуммыРесурса(РесурсКоличество, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль);
			
			Если УсловиеДебет  = "ЛОЖЬ" И УсловиеКредит = "ЛОЖЬ" Тогда
				ЭтоСторно = "ЛОЖЬ";
			Иначе
				ЭтоСторно = "(" + СтрСоединить(УсловияСторно, " ИЛИ ") + ")";
			КонецЕсли;
			
			УсловиеЗначенияРесурсов = "(" + СтрСоединить(УсловияНеНоль, " ИЛИ ") + ")";
			
			ТекстЗапроса = ШаблонТекстаЗапросаЗаписейРегистра();
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектУчета", ОбъектУчета);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОбъектНастройки", ОбъектНастройки);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&НаправлениеДеятельности", НаправлениеДеятельности);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторФинЗаписи", ИдентификаторФинЗаписи);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИдентификаторСтроки", ИдентификаторСтроки);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоДебет", ЭтоДебет);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоКредит", ЭтоКредит);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ЭтоСторно", ЭтоСторно);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаУпр", СуммаУпр);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаРегл", СуммаРегл);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СуммаВал", СуммаВал);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Количество", Количество);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеЗначенияРесурсов", УсловиеЗначенияРесурсов);
			
			ТекстыЗапросовРегистра.Добавить(ТекстЗапроса);
		КонецЦикла;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымВидДеятельностиНДС) Тогда
			ВидДеятельностиНДС = СтрокаВыборкиЗначения(Перечисления.ТипыНалогообложенияНДС.ПустаяСсылка());
		Иначе
			ВидДеятельностиНДС = ПараметрыОтраженияДвижений.ПутьКДаннымВидДеятельностиНДС;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымПодразделение) Тогда
			Подразделение = СтрокаВыборкиЗначения(Справочники.СтруктураПредприятия.ПустаяСсылка());
		Иначе
			Подразделение = ПараметрыОтраженияДвижений.ПутьКДаннымПодразделение;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымМестоУчета) Тогда
			МестоУчета = СтрокаВыборкиЗначения(Неопределено);
		Иначе
			МестоУчета = ПараметрыОтраженияДвижений.ПутьКДаннымМестоУчета;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымВалюта) Тогда
			Валюта = СтрокаВыборкиЗначения(Справочники.Валюты.ПустаяСсылка());
		Иначе
			Валюта = ПараметрыОтраженияДвижений.ПутьКДаннымВалюта;
		КонецЕсли;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымСторно) Тогда
			РеквизитСторно = СтрокаВыборкиЗначения(Ложь);
		Иначе
			РеквизитСторно = ПараметрыОтраженияДвижений.ПутьКДаннымСторно;
		КонецЕсли;
		
		Регистратор = ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор;
		
		Если ПустаяСтрока(ПараметрыОтраженияДвижений.ПутьКДаннымОрганизация) Тогда
			Организация = СтрокаВыборкиЗначения(Справочники.Организации.ПустаяСсылка());
			Запрос.Параметры.РегистрыБезОрганизации.Добавить(СтрокаРегистра.ИсточникДанных);
		Иначе
			Организация = ПараметрыОтраженияДвижений.ПутьКДаннымОрганизация;
			Если СтрНачинаетсяС(ПараметрыОтраженияДвижений.ПутьКДаннымОрганизация, "ЗНАЧЕНИЕ") Тогда
				Запрос.Параметры.РегистрыБезОрганизации.Добавить(СтрокаРегистра.ИсточникДанных);
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыОтраженияДвижений.ЭтоРегистрУчетаНДС Тогда
			Запрос.Параметры.РегистрыНДС.Добавить(СтрокаРегистра.ИсточникДанных);
		КонецЕсли;
		
		ИмяРегистра = СтрокаВыборкиЗначения(СтрокаРегистра.ИсточникДанных);
		ИсточникДанных = СтрШаблон("РегистрНакопления.%1 КАК ТаблицаРегистра", СтрокаРегистра.ИсточникДанных);
		
		Если ЕстьПорцияДокументов Тогда
			ИсточникДанных = ИсточникДанных + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПорцияДокументов КАК ПорцияДокументов
			|		ПО НАЧАЛОПЕРИОДА(Период, ДЕНЬ) = ПорцияДокументов.ДатаДвижений
			|		 И &Регистратор = ПорцияДокументов.РегистраторДвижений
			|		 И ВЫБОР
			|			КОГДА &ИмяРегистра В (&РегистрыБезОрганизации)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ &Организация = ПорцияДокументов.ОрганизацияДвижений
			|		КОНЕЦ";
		КонецЕсли;
		
		УсловиеПериод = СтрокаУсловияПериод(Запрос.Параметры);
		УсловиеРегистратор = СтрокаУсловияРегистратор(Запрос.Параметры);
		УсловиеОрганизация = СтрокаУсловияОрганизация(Запрос.Параметры, СтрокаРегистра.ИсточникДанных);
		УсловиеВидРегистратора = СтрокаУсловияВидРегистратора(МетаданныеРегистра);
		УсловиеДополнительныйОтбор = СтрокаДополнительныйОтбор(ПараметрыОтраженияДвижений);
		УсловиеРеквизитСторно = СтрокаУсловияРеквизитСторно();
		
		ТекстЗапроса = СтрСоединить(ТекстыЗапросовРегистра, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеПериод", УсловиеПериод);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРегистратор", УсловиеРегистратор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОрганизация", УсловиеОрганизация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВидРегистратора", УсловиеВидРегистратора);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДополнительныйОтбор", УсловиеДополнительныйОтбор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеРеквизитСторно", УсловиеРеквизитСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистра", ИмяРегистра);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Валюта", Валюта);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&МестоУчета", МестоУчета);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Регистратор", Регистратор);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", Организация);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Подразделение", Подразделение);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидДеятельностиНДС", ВидДеятельностиНДС);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&РеквизитСторно", РеквизитСторно);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрРегистратор", "&Регистратор");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПараметрОрганизация", "&Организация");
		
		ТекстыЗапросовРегистров.Вставить(СтрокаРегистра.ИсточникДанных, ТекстЗапроса);
	КонецЦикла;
	
	Возврат ТекстыЗапросовРегистров;
	
КонецФункции

Функция ТекстЗапросаЗаписейДляКорреспонденций(ТекстыЗапросовЗаписейРегистров)
	
	ТекстыЗапросов = Новый Массив();
	
	Для Каждого КлючИЗначение Из ТекстыЗапросовЗаписейРегистров Цикл
		ТекстыЗапросов.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляВыбораАналитики", "//ПоляВыбораАналитики");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГруппаПолейАналитики", "//ГруппаПолейАналитики");
	
	УдаляемыеПоля = Новый Массив();
	УдаляемыеПоля.Добавить("Подразделение");
	УдаляемыеПоля.Добавить("НаправлениеДеятельности");
	
	ТаблицаДляПомещения = "втДвиженияРегистров";
	
	ИзменитьСоставПолейВыборки(ТекстЗапроса, УдаляемыеПоля,, ТаблицаДляПомещения);

	Возврат ТекстЗапроса;
	
КонецФункции

Процедура СформироватьКорреспонденцииЗаписейРегистров(Запрос, ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КорИсточникиДанных.ОбъектУчета КАК ОбъектУчета,
	|	КорИсточникиДанных.ИмяРегистра КАК ИмяРегистра
	|ПОМЕСТИТЬ втКорИсточникиДанных
	|ИЗ
	|	&КорИсточникиДанных КАК КорИсточникиДанных
	|ИНДЕКСИРОВАТЬ ПО
	|	КорИсточникиДанных.ОбъектУчета,
	|	КорИсточникиДанных.ИмяРегистра
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоДебет КАК ЭтоДебет,
	|	ДвиженияРегистров.ЭтоКредит КАК ЭтоКредит,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.СлужебныйВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияДебет
	|ИЗ
	|	втДвиженияРегистров КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ДвиженияРегистров.ЭтоКредит
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияРегистров.Период,
	|	ДвиженияРегистров.ОбъектУчета,
	|	ДвиженияРегистров.Организация,
	|	ДвиженияРегистров.Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияРегистров.Период КАК Период,
	|	ДвиженияРегистров.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияРегистров.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияРегистров.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияРегистров.МестоУчета КАК МестоУчета,
	|	ДвиженияРегистров.ЭтоДебет КАК ЭтоДебет,
	|	ДвиженияРегистров.ЭтоКредит КАК ЭтоКредит,
	|	ДвиженияРегистров.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияРегистров.Организация КАК Организация,
	|	ДвиженияРегистров.Регистратор КАК Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияРегистров.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияРегистров.СлужебныйВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияРегистров.Валюта КАК Валюта,
	|	ДвиженияРегистров.СуммаУпр КАК СуммаУпр,
	|	ДвиженияРегистров.СуммаРегл КАК СуммаРегл,
	|	ДвиженияРегистров.СуммаВал КАК СуммаВал,
	|	ДвиженияРегистров.Количество КАК Количество,
	|	ДвиженияРегистров.РеквизитСторно КАК РеквизитСторно
	|ПОМЕСТИТЬ втДвиженияКредит
	|ИЗ
	|	втДвиженияРегистров КАК ДвиженияРегистров
	|ГДЕ
	|	НЕ ДвиженияРегистров.ЭтоДебет
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияРегистров.Период,
	|	ДвиженияРегистров.ОбъектУчета,
	|	ДвиженияРегистров.Организация,
	|	ДвиженияРегистров.Регистратор,
	|	ДвиженияРегистров.НастройкаХозОперации,
	|	ДвиженияРегистров.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияРегистров");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебет.Период КАК Период,
	|	ДвиженияДебет.Организация КАК Организация,
	|	ДвиженияДебет.Регистратор КАК Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КОЛИЧЕСТВО(ДвиженияДебет.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(ДвиженияДебет.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияДебет.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоОперацииДебет
	|ИЗ
	|	втДвиженияДебет КАК ДвиженияДебет
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияКредит.Период КАК Период,
	|	ДвиженияКредит.Организация КАК Организация,
	|	ДвиженияКредит.Регистратор КАК Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КОЛИЧЕСТВО(ДвиженияКредит.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(ДвиженияКредит.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияКредит.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоОперацииКредит
	|ИЗ
	|	втДвиженияКредит КАК ДвиженияКредит
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебет.Период КАК Период,
	|	ДвиженияДебет.Организация КАК Организация,
	|	ДвиженияДебет.Регистратор КАК Регистратор,
	|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КОЛИЧЕСТВО(ДвиженияДебет.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(ДвиженияДебет.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияДебет.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоФинЗаписиДебет
	|ИЗ
	|	втДвиженияДебет КАК ДвиженияДебет
	|ГДЕ
	|	ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	И ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втИтогиПоОперацииКредит КАК ИтогиПоОперацииКредит
	|		ГДЕ
	|			ИтогиПоОперацииКредит.Период = ДвиженияДебет.Период
	|			И ИтогиПоОперацииКредит.Регистратор = ДвиженияДебет.Регистратор
	|			И ИтогиПоОперацииКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|			И ИтогиПоОперацииКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И ВЫБОР
	|				КОГДА ИтогиПоОперацииКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ИтогиПоОперацииКредит.Организация = ДвиженияДебет.Организация
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДвиженияКредит КАК ДвиженияТолькоКредит
	|		ГДЕ
	|			ДвиженияТолькоКредит.ЭтоКредит
	|			И ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|			И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|			И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|			И ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|			И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|			И ВЫБОР
	|				КОГДА ДвиженияТолькоКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.ИдентификаторФинЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияКредит.Период КАК Период,
	|	ДвиженияКредит.Организация КАК Организация,
	|	ДвиженияКредит.Регистратор КАК Регистратор,
	|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	КОЛИЧЕСТВО(ДвиженияКредит.ИдентификаторФинЗаписи) КАК КоличествоФинЗаписей,
	|	СУММА(ДвиженияКредит.СуммаУпр) КАК СуммаУпр,
	|	СУММА(ДвиженияКредит.СуммаРегл) КАК СуммаРегл
	|ПОМЕСТИТЬ втИтогиПоФинЗаписиКредит
	|ИЗ
	|	втДвиженияКредит КАК ДвиженияКредит
	|ГДЕ
	|	ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	И ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втИтогиПоОперацииДебет КАК ИтогиПоОперацииДебет
	|		ГДЕ
	|			ИтогиПоОперацииДебет.Период = ДвиженияКредит.Период
	|			И ИтогиПоОперацииДебет.Регистратор = ДвиженияКредит.Регистратор
	|			И ИтогиПоОперацииДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|			И ИтогиПоОперацииДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И ВЫБОР
	|				КОГДА ИтогиПоОперацииДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ИтогиПоОперацииДебет.Организация = ДвиженияКредит.Организация
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		)
	|	И НЕ ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втДвиженияДебет КАК ДвиженияТолькоДебет
	|		ГДЕ
	|			ДвиженияТолькоДебет.ЭтоДебет
	|			И ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|			И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|			И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|			И ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|			И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|			И ВЫБОР
	|				КОГДА ДвиженияТолькоДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|					ТОГДА ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.ИдентификаторФинЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебет.Период КАК Период,
	|	ДвиженияДебет.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияДебет.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияДебет.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияДебет.МестоУчета КАК МестоУчета,
	|	ДвиженияДебет.ЭтоДебет КАК ЭтоДебет,
	|	ДвиженияДебет.ЭтоКредит КАК ЭтоКредит,
	|	ДвиженияДебет.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияДебет.Организация КАК Организация,
	|	ДвиженияДебет.Регистратор КАК Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебет.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияДебет.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияДебет.Валюта КАК Валюта,
	|	ДвиженияДебет.СуммаУпр КАК СуммаУпр,
	|	ДвиженияДебет.СуммаРегл КАК СуммаРегл,
	|	ДвиженияДебет.СуммаВал КАК СуммаВал,
	|	ДвиженияДебет.Количество КАК Количество,
	|	ДвиженияДебет.РеквизитСторно КАК РеквизитСторно,
	|	ЕСТЬNULL(ИтогиПоОперацииДебет.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейОперации,
	|	ЕСТЬNULL(ИтогиПоОперацииДебет.СуммаУпр, 0) КАК СуммаУпрОперации,
	|	ЕСТЬNULL(ИтогиПоОперацииДебет.СуммаРегл, 0) КАК СуммаРеглОперации,
	|	ЕСТЬNULL(ИтогиПоФинЗаписиДебет.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписиДебет.СуммаУпр, 0) КАК СуммаУпрФинЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписиДебет.СуммаРегл, 0) КАК СуммаРеглФинЗаписи,
	|	ТИПЗНАЧЕНИЯ(ДвиженияДебет.Регистратор) КАК ТипРегистратора,
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втКорИсточникиДанных КАК КорИсточникиДанных
	|		ГДЕ
	|			КорИсточникиДанных.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|		) КАК ЕстьКорИсточникиДанных
	|ПОМЕСТИТЬ втДвиженияСИтогамиДебет
	|ИЗ
	|	втДвиженияДебет КАК ДвиженияДебет
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоОперацииДебет КАК ИтогиПоОперацииДебет
	|	ПО ДвиженияДебет.Период = ИтогиПоОперацииДебет.Период
	|	 И ДвиженияДебет.Организация = ИтогиПоОперацииДебет.Организация
	|	 И ДвиженияДебет.Регистратор = ИтогиПоОперацииДебет.Регистратор
	|	 И ДвиженияДебет.НастройкаХозОперации = ИтогиПоОперацииДебет.НастройкаХозОперации
	|	 И ДвиженияДебет.ИдентификаторФинЗаписи = ИтогиПоОперацииДебет.ИдентификаторФинЗаписи
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоФинЗаписиДебет КАК ИтогиПоФинЗаписиДебет
	|	ПО ДвиженияДебет.Период = ИтогиПоФинЗаписиДебет.Период
	|	 И ДвиженияДебет.Организация = ИтогиПоФинЗаписиДебет.Организация
	|	 И ДвиженияДебет.Регистратор = ИтогиПоФинЗаписиДебет.Регистратор
	|	 И ДвиженияДебет.ИдентификаторФинЗаписи = ИтогиПоФинЗаписиДебет.ИдентификаторФинЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияДебет.Период,
	|	ДвиженияДебет.ОбъектУчета,
	|	ДвиженияДебет.Организация,
	|	ДвиженияДебет.Регистратор,
	|	ДвиженияДебет.НастройкаХозОперации,
	|	ДвиженияДебет.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втИтогиПоОперацииДебет");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втИтогиПоФинЗаписиДебет");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияКредит.Период КАК Период,
	|	ДвиженияКредит.ИмяРегистра КАК ИмяРегистра,
	|	ДвиженияКредит.ОбъектУчета КАК ОбъектУчета,
	|	ДвиженияКредит.ОбъектНастройки КАК ОбъектНастройки,
	|	ДвиженияКредит.МестоУчета КАК МестоУчета,
	|	ДвиженияКредит.ЭтоДебет КАК ЭтоДебет,
	|	ДвиженияКредит.ЭтоКредит КАК ЭтоКредит,
	|	ДвиженияКредит.ЭтоСторно КАК ЭтоСторно,
	|	ДвиженияКредит.Организация КАК Организация,
	|	ДвиженияКредит.Регистратор КАК Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияКредит.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	ДвиженияКредит.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	ДвиженияКредит.Валюта КАК Валюта,
	|	ДвиженияКредит.СуммаУпр КАК СуммаУпр,
	|	ДвиженияКредит.СуммаРегл КАК СуммаРегл,
	|	ДвиженияКредит.СуммаВал КАК СуммаВал,
	|	ДвиженияКредит.Количество КАК Количество,
	|	ДвиженияКредит.РеквизитСторно КАК РеквизитСторно,
	|	ЕСТЬNULL(ИтогиПоОперацииКредит.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейОперации,
	|	ЕСТЬNULL(ИтогиПоОперацииКредит.СуммаУпр, 0) КАК СуммаУпрОперации,
	|	ЕСТЬNULL(ИтогиПоОперацииКредит.СуммаРегл, 0) КАК СуммаРеглОперации,
	|	ЕСТЬNULL(ИтогиПоФинЗаписиКредит.КоличествоФинЗаписей, 0) КАК КоличествоЗаписейЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписиКредит.СуммаУпр, 0) КАК СуммаУпрФинЗаписи,
	|	ЕСТЬNULL(ИтогиПоФинЗаписиКредит.СуммаРегл, 0) КАК СуммаРеглФинЗаписи,
	|	ТИПЗНАЧЕНИЯ(ДвиженияКредит.Регистратор) КАК ТипРегистратора,
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втКорИсточникиДанных КАК КорИсточникиДанных
	|		ГДЕ
	|			КорИсточникиДанных.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|		) КАК ЕстьКорИсточникиДанных
	|ПОМЕСТИТЬ втДвиженияСИтогамиКредит
	|ИЗ
	|	втДвиженияКредит КАК ДвиженияКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоОперацииКредит КАК ИтогиПоОперацииКредит
	|	ПО ДвиженияКредит.Период = ИтогиПоОперацииКредит.Период
	|	 И ДвиженияКредит.Организация = ИтогиПоОперацииКредит.Организация
	|	 И ДвиженияКредит.Регистратор = ИтогиПоОперацииКредит.Регистратор
	|	 И ДвиженияКредит.НастройкаХозОперации = ИтогиПоОперацииКредит.НастройкаХозОперации
	|	 И ДвиженияКредит.ИдентификаторФинЗаписи = ИтогиПоОперацииКредит.ИдентификаторФинЗаписи
	|	ЛЕВОЕ СОЕДИНЕНИЕ втИтогиПоФинЗаписиКредит КАК ИтогиПоФинЗаписиКредит
	|	ПО ДвиженияКредит.Период = ИтогиПоФинЗаписиКредит.Период
	|	 И ДвиженияКредит.Организация = ИтогиПоФинЗаписиКредит.Организация
	|	 И ДвиженияКредит.Регистратор = ИтогиПоФинЗаписиКредит.Регистратор
	|	 И ДвиженияКредит.ИдентификаторФинЗаписи = ИтогиПоФинЗаписиКредит.ИдентификаторФинЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияКредит.Период,
	|	ДвиженияКредит.ОбъектУчета,
	|	ДвиженияКредит.Организация,
	|	ДвиженияКредит.Регистратор,
	|	ДвиженияКредит.НастройкаХозОперации,
	|	ДвиженияКредит.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втИтогиПоОперацииКредит");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втИтогиПоФинЗаписиКредит");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ДвиженияДебет.Период, ДвиженияКредит.Период) КАК Период,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебет.ИмяРегистра ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.ИмяРегистра
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияКредит.ИмяРегистра ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.ИмяРегистра
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|			ТОГДА &ИмяРегистраСлужебныхОбъектовУчета
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебет.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.ОбъектУчета
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыДокументовВзаимозачетаЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.РасчетыПоВзаимозачетамЗадолженности)
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|		  ИЛИ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.РасчетыСРозничнымиПокупателями)
	|		КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ВводОстатков)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияКредит.ОбъектУчета ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.ОбъектУчета
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыДокументовВзаимозачетаЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.РасчетыПоВзаимозачетамЗадолженности)
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|		  ИЛИ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.РасчетыСРозничнымиПокупателями)
	|		КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыДокументовВводаОстатков)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ВводОстатков)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ЕСТЬNULL(ДвиженияДебет.ОбъектНастройки, НЕОПРЕДЕЛЕНО) КАК ОбъектНастройкиДт,
	|	ЕСТЬNULL(ДвиженияКредит.ОбъектНастройки, НЕОПРЕДЕЛЕНО) КАК ОбъектНастройкиКт,
	|	ЕСТЬNULL(ДвиженияДебет.МестоУчета, НЕОПРЕДЕЛЕНО) КАК МестоУчетаДт,
	|	ЕСТЬNULL(ДвиженияКредит.МестоУчета, НЕОПРЕДЕЛЕНО) КАК МестоУчетаКт,
	|	ЕСТЬNULL(ДвиженияДебет.ЭтоСторно, ЛОЖЬ) КАК ЭтоСторноДт,
	|	ЕСТЬNULL(ДвиженияКредит.ЭтоСторно, ЛОЖЬ) КАК ЭтоСторноКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.Организация ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.Организация
	|		КОГДА ДвиженияКредит.Организация ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.Организация
	|		КОГДА ДвиженияДебет.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДвиженияКредит.Организация
	|		ИНАЧЕ ДвиженияДебет.Организация
	|	КОНЕЦ КАК Организация,
	|	ЕСТЬNULL(ДвиженияДебет.Регистратор, ДвиженияКредит.Регистратор) КАК Регистратор,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации ЕСТЬ NULL
	|			ТОГДА ДвиженияКредит.НастройкаХозОперации
	|		КОГДА ДвиженияКредит.НастройкаХозОперации ЕСТЬ NULL
	|			ТОГДА ДвиженияДебет.НастройкаХозОперации
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ДвиженияКредит.НастройкаХозОперации
	|		ИНАЧЕ ДвиженияДебет.НастройкаХозОперации
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	ЕСТЬNULL(ДвиженияДебет.ИдентификаторФинЗаписи, ДвиженияКредит.ИдентификаторФинЗаписи) КАК ИдентификаторФинЗаписи,
	|	ЕСТЬNULL(ДвиженияДебет.ИдентификаторСтроки, """") КАК ИдентификаторСтрокиДт,
	|	ЕСТЬNULL(ДвиженияКредит.ИдентификаторСтроки, """") КАК ИдентификаторСтрокиКт,
	|	ЕСТЬNULL(ДвиженияДебет.РеквизитСторно, ЛОЖЬ) ИЛИ ЕСТЬNULL(ДвиженияКредит.РеквизитСторно, ЛОЖЬ) КАК РеквизитСторно,
	|	ЕСТЬNULL(ДвиженияДебет.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСДт,
	|	ЕСТЬNULL(ДвиженияКредит.ВидДеятельностиНДС, ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка)) КАК ВидДеятельностиНДСКт,
	|	ЕСТЬNULL(ДвиженияДебет.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаДт,
	|	ЕСТЬNULL(ДвиженияКредит.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) КАК ИсходнаяСуммаУпрДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0) КАК ИсходнаяСуммаУпрКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0) КАК ИсходнаяСуммаРеглДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0) КАК ИсходнаяСуммаРеглКт,
	|	ЕСТЬNULL(ДвиженияДебет.СуммаВал, 0) КАК СуммаВалДт,
	|	ЕСТЬNULL(ДвиженияКредит.СуммаВал, 0) КАК СуммаВалКт,
	|	ЕСТЬNULL(ДвиженияДебет.Количество, 0) КАК КоличествоДт,
	|	ЕСТЬNULL(ДвиженияКредит.Количество, 0) КАК КоличествоКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрФинЗаписи, 0)
	|				И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СложнаяПроводкаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрФинЗаписи, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|				И ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) = ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) = 1
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СложнаяПроводкаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|		  ИЛИ ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УчитыватьХозОперацию,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.СуммаУпр ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.СуммаУпр <> ЕСТЬNULL(ДвиженияКредит.СуммаУпрФинЗаписи, 0)
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				КОГДА ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|				ИНАЧЕ ДвиженияДебет.СуммаУпр
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.СуммаУпрОперации <> ЕСТЬNULL(ДвиженияКредит.СуммаУпрОперации, 0)
	|			ТОГДА ДвиженияДебет.СуммаУпр
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|			ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаУпр, 0)
	|		ИНАЧЕ ДвиженияДебет.СуммаУпр
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.СуммаУпр ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияДебет.СуммаУпр
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрФинЗаписи, 0) <> ДвиженияКредит.СуммаУпр
	|					ТОГДА ДвиженияКредит.СуммаУпр
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0)
	|				ИНАЧЕ ДвиженияКредит.СуммаУпр
	|			КОНЕЦ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпрОперации, 0) <> ДвиженияКредит.СуммаУпрОперации
	|			ТОГДА ДвиженияКредит.СуммаУпр
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ДвиженияКредит.КоличествоЗаписейОперации = 1
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаУпр, 0)
	|		ИНАЧЕ ДвиженияКредит.СуммаУпр
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.СуммаРегл ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияКредит.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.СуммаРегл <> ЕСТЬNULL(ДвиженияКредит.СуммаРеглФинЗаписи, 0)
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|				ИНАЧЕ ДвиженияДебет.СуммаРегл
	|			КОНЕЦ
	|		КОГДА ДвиженияДебет.СуммаРеглОперации <> ЕСТЬNULL(ДвиженияКредит.СуммаРеглОперации, 0)
	|			ТОГДА ДвиженияДебет.СуммаРегл
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации = 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) > 1
	|			ТОГДА ЕСТЬNULL(ДвиженияКредит.СуммаРегл, 0)
	|		ИНАЧЕ ДвиженияДебет.СуммаРегл
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияКредит.СуммаРегл ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебет.ТипРегистратора В (&ТипыРегистраторовСлужебныхОбъектовУчета)
	|					ТОГДА ДвиженияДебет.СуммаРегл
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.НастройкаХозОперации = ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ВЫБОР
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРеглФинЗаписи, 0) <> ДвиженияКредит.СуммаРегл
	|					ТОГДА ДвиженияКредит.СуммаРегл
	|				КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейЗаписи, 0) > 1
	|					ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0)
	|				ИНАЧЕ ДвиженияКредит.СуммаРегл
	|			КОНЕЦ
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРеглОперации, 0) <> ДвиженияКредит.СуммаРеглОперации
	|			ТОГДА ДвиженияКредит.СуммаРегл
	|		КОГДА ЕСТЬNULL(ДвиженияДебет.КоличествоЗаписейОперации, 0) > 1 И ЕСТЬNULL(ДвиженияКредит.КоличествоЗаписейОперации, 0) = 1
	|			ТОГДА ЕСТЬNULL(ДвиженияДебет.СуммаРегл, 0)
	|		ИНАЧЕ ДвиженияКредит.СуммаРегл
	|	КОНЕЦ КАК СуммаРеглКт
	|ПОМЕСТИТЬ втДвиженияРегистровДебетКредит
	|ИЗ
	|	втДвиженияСИтогамиДебет КАК ДвиженияДебет
	|	ПОЛНОЕ СОЕДИНЕНИЕ втДвиженияСИтогамиКредит КАК ДвиженияКредит
	|	ПО ДвиженияДебет.Период = ДвиженияКредит.Период
	|	 И ДвиженияДебет.Регистратор = ДвиженияКредит.Регистратор
	|	 И ДвиженияДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|	 И ВЫБОР
	|		КОГДА ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ДвиженияДебет.Организация = ДвиженияКредит.Организация
	|		ИНАЧЕ ИСТИНА
	|	 КОНЕЦ
	|	 И ВЫБОР
	|		КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА ДвиженияДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	// корреспонденции записей с заполненной и пустой настройками ХО разрешены, если для записи с заполненной ХО нет других корреспонденций с такой же ХО
	|		КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.ЭтоКредит
	|					И ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|				)
	// корреспонденции записей с заполненной и пустой настройками ХО разрешены, если для записи с заполненной ХО нет других корреспонденций с такой же ХО
	|		КОГДА ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.ЭтоДебет
	|					И ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|				)
	|		ИНАЧЕ НЕ (ДвиженияДебет.КоличествоЗаписейЗаписи > 1 И ДвиженияКредит.КоличествоЗаписейЗаписи > 1)
	|	 КОНЕЦ
	|	 И ВЫБОР
	// корреспонденции записей оборотного регистров с самими собой запрещены всегда
	|		КОГДА НЕ (ДвиженияДебет.ЭтоДебет ИЛИ ДвиженияКредит.ЭтоКредит)
	|			ТОГДА ЛОЖЬ
	// корреспонденции записей ограничены в описании объекта учета дебета
	|		КОГДА ДвиженияДебет.ЕстьКорИсточникиДанных
	|			ТОГДА ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втКорИсточникиДанных КАК КорИсточникиДанных
	|				ГДЕ
	|					КорИсточникиДанных.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|					И КорИсточникиДанных.ИмяРегистра = ДвиженияКредит.ИмяРегистра
	|				)
	// корреспонденции записей ограничены в описании объекта учета кредита
	|		КОГДА ДвиженияКредит.ЕстьКорИсточникиДанных
	|			ТОГДА ИСТИНА В 
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втКорИсточникиДанных КАК КорИсточникиДанных
	|				ГДЕ
	|					КорИсточникиДанных.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|					И КорИсточникиДанных.ИмяРегистра = ДвиженияДебет.ИмяРегистра
	|				)
	// корреспонденции прямой и сторно записей внутри одного регистра разрешены, если для сторно нет корреспонденций с другими объектами или таким же признаком сторно и суммами упр и регл
	|		КОГДА ДвиженияДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета И ДвиженияДебет.ЭтоСторно И НЕ ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.ЭтоКредит
	|					И ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ((ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияДебет.ОбъектУчета
	|						ИЛИ ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно)
	|						ИЛИ
	|						(ДвиженияТолькоКредит.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|						И ДвиженияТолькоКредит.ЭтоСторно <> ДвиженияДебет.ЭтоСторно
	|						И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|						И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл)
	|					)
	|				)
	// корреспонденции прямой и сторно записей внутри одного регистра разрешены, если для сторно нет корреспонденций с другими объектами или таким же признаком сторно и суммами упр и регл
	|		КОГДА ДвиженияДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета И НЕ ДвиженияДебет.ЭтоСторно И ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.ЭтоДебет
	|					И ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ((ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияКредит.ОбъектУчета
	|						ИЛИ ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно)
	|						ИЛИ
	|						(ДвиженияТолькоДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|						И ДвиженияТолькоДебет.ЭтоСторно <> ДвиженияКредит.ЭтоСторно
	|						И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|						И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл)
	|					)
	|				)
	// корреспонденции записей внутри одного регистра приоритет у записей с одинаковыми объектами учета и суммами упр и регл
	|		КОГДА ДвиженияДебет.ИмяРегистра = ДвиженияКредит.ИмяРегистра И ДвиженияДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.ЭтоКредит
	|					И ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|					И ДвиженияТолькоКредит.ЭтоСторно = ДвиженияДебет.ЭтоСторно
	|					И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|					И (ДвиженияТолькоКредит.ОбъектУчета <> ДвиженияКредит.ОбъектУчета
	|						ИЛИ
	|						(ДвиженияТолькоКредит.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|						И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|						И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл)
	|					)
	|				)
	|			И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.ЭтоДебет
	|					И ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|					И ДвиженияТолькоДебет.ЭтоСторно = ДвиженияКредит.ЭтоСторно
	|					И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|					И (ДвиженияТолькоДебет.ОбъектУчета <> ДвиженияДебет.ОбъектУчета
	|						ИЛИ
	|						(ДвиженияТолькоДебет.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|						И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|						И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл)
	|					)
	|				)
	// прочие случаи отношения многие ко многим, приоритет у записей с одинаковыми суммами упр и регл
	|		КОГДА ДвиженияДебет.КоличествоЗаписейОперации > 1 И ДвиженияКредит.КоличествоЗаписейОперации > 1
	|			ТОГДА НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияКредит КАК ДвиженияТолькоКредит
	|				ГДЕ
	|					ДвиженияТолькоКредит.ЭтоКредит
	|					И ДвиженияТолькоКредит.Период = ДвиженияДебет.Период
	|					И ДвиженияТолькоКредит.Регистратор = ДвиженияДебет.Регистратор
	|					И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.Организация = ДвиженияДебет.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоКредит.СуммаУпр = ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл = ДвиженияДебет.СуммаРегл
	|					И ДвиженияТолькоКредит.СуммаУпр <> ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоКредит.СуммаРегл <> ДвиженияКредит.СуммаРегл
	|				)
	|			И НЕ ИСТИНА В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					ИСТИНА
	|				ИЗ
	|					втДвиженияДебет КАК ДвиженияТолькоДебет
	|				ГДЕ
	|					ДвиженияТолькоДебет.ЭтоДебет
	|					И ДвиженияТолькоДебет.Период = ДвиженияКредит.Период
	|					И ДвиженияТолькоДебет.Регистратор = ДвиженияКредит.Регистратор
	|					И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.Организация = ДвиженияКредит.Организация
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ВЫБОР
	|						КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|							ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|					И ДвиженияТолькоДебет.СуммаУпр = ДвиженияКредит.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл = ДвиженияКредит.СуммаРегл
	|					И ДвиженияТолькоДебет.СуммаУпр <> ДвиженияДебет.СуммаУпр
	|					И ДвиженияТолькоДебет.СуммаРегл <> ДвиженияДебет.СуммаРегл
	|				)
	|		ИНАЧЕ ИСТИНА
	|	 КОНЕЦ
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ДвиженияДебет.Регистратор ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	// запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияКредит.СуммаУпр = 0 И ДвиженияКредит.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияКредит.ЭтоКредит
	|					ТОГДА ИСТИНА
	// запись оборотного регистра не выводим, если для нее же есть корреспонденция с другим расходным движением
	|				ИНАЧЕ НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						втДвиженияКредит КАК ДвиженияТолькоКредит
	|						ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|							ПО ДвиженияТолькоКредит.ИмяРегистра = КорИсточникиДанных.ИмяРегистра
	|							 И ДвиженияКредит.ЕстьКорИсточникиДанных
	|					ГДЕ
	|						ДвиженияТолькоКредит.ЭтоКредит
	|						И ДвиженияТолькоКредит.Период = ДвиженияКредит.Период
	|						И ДвиженияТолькоКредит.Регистратор = ДвиженияКредит.Регистратор
	|						И ДвиженияТолькоКредит.ИдентификаторФинЗаписи = ДвиженияКредит.ИдентификаторФинЗаписи
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								И ДвиженияКредит.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоКредит.Организация = ДвиженияКредит.Организация
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								И ДвиженияКредит.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоКредит.НастройкаХозОперации = ДвиженияКредит.НастройкаХозОперации
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|								ТОГДА КорИсточникиДанных.ОбъектУчета = ДвиженияКредит.ОбъектУчета
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|					)
	|					И НЕ ДвиженияКредит.ТипРегистратора В (&ТипыДокументовРозничныхВозвратов)
	|			КОНЕЦ
	|		КОГДА ДвиженияКредит.Регистратор ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	// запись с нулевыми балансовыми ресурсами не выводим
	|				КОГДА ДвиженияДебет.СуммаУпр = 0 И ДвиженияДебет.СуммаРегл = 0
	|					ТОГДА ЛОЖЬ
	// запись остаточного регистра выводим всегда
	|				КОГДА ДвиженияДебет.ЭтоДебет
	|					ТОГДА ИСТИНА
	// запись оборотного регистра не выводим, если для нее же есть корреспонденция с другим приходным движением
	|				ИНАЧЕ НЕ ИСТИНА В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ИСТИНА
	|					ИЗ
	|						втДвиженияДебет КАК ДвиженияТолькоДебет
	|						ЛЕВОЕ СОЕДИНЕНИЕ втКорИсточникиДанных КАК КорИсточникиДанных
	|							ПО ДвиженияТолькоДебет.ИмяРегистра = КорИсточникиДанных.ИмяРегистра
	|							 И ДвиженияДебет.ЕстьКорИсточникиДанных
	|					ГДЕ
	|						ДвиженияТолькоДебет.ЭтоДебет
	|						И ДвиженияТолькоДебет.Период = ДвиженияДебет.Период
	|						И ДвиженияТолькоДебет.Регистратор = ДвиженияДебет.Регистратор
	|						И ДвиженияТолькоДебет.ИдентификаторФинЗаписи = ДвиженияДебет.ИдентификаторФинЗаписи
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								И ДвиженияДебет.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоДебет.Организация = ДвиженияДебет.Организация
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА ДвиженияТолькоДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								И ДвиженияДебет.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|								ТОГДА ДвиженияТолькоДебет.НастройкаХозОперации = ДвиженияДебет.НастройкаХозОперации
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|						И ВЫБОР
	|							КОГДА НЕ КорИсточникиДанных.ОбъектУчета ЕСТЬ NULL
	|								ТОГДА КорИсточникиДанных.ОбъектУчета = ДвиженияДебет.ОбъектУчета
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|					)
	|					И НЕ ДвиженияДебет.ТипРегистратора В (&ТипыДокументовРозничныхПродаж)
	|			КОНЕЦ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияДебет");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияКредит");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втКорИсточникиДанных");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияСИтогамиДебет");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияСИтогамиКредит");
	
	ВосстановитьРасчетыПоСторно(Запрос, ТекстыЗапросов);
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСДт КАК ВидДеятельностиНДСДт,
	|	ДвиженияДебетКредит.ВидДеятельностиНДСКт КАК ВидДеятельностиНДСКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.ИсходнаяСуммаУпрДт КАК ИсходнаяСуммаУпрДт,
	|	ДвиженияДебетКредит.ИсходнаяСуммаУпрКт КАК ИсходнаяСуммаУпрКт,
	|	ДвиженияДебетКредит.ИсходнаяСуммаРеглДт КАК ИсходнаяСуммаРеглДт,
	|	ДвиженияДебетКредит.ИсходнаяСуммаРеглКт КАК ИсходнаяСуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	втДвиженияРегистровДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	&УсловиеОбъектУчетаДт
	|	И &УсловиеОбъектУчетаКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСКлиентамиПоСторно.Период КАК Период,
	|	РасчетыСКлиентамиПоСторно.ИмяРегистра КАК ИмяРегистраДт,
	|	РасчетыСКлиентамиПоСторно.ИмяРегистра КАК ИмяРегистраКт,
	|	РасчетыСКлиентамиПоСторно.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РасчетыСКлиентамиПоСторно.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РасчетыСКлиентамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиДт,
	|	РасчетыСКлиентамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиКт,
	|	РасчетыСКлиентамиПоСторно.МестоУчета КАК МестоУчетаДт,
	|	РасчетыСКлиентамиПоСторно.МестоУчета КАК МестоУчетаКт,
	|	РасчетыСКлиентамиПоСторно.ЭтоСторно КАК ЭтоСторноДт,
	|	РасчетыСКлиентамиПоСторно.ЭтоСторно КАК ЭтоСторноКт,
	|	РасчетыСКлиентамиПоСторно.Организация КАК Организация,
	|	РасчетыСКлиентамиПоСторно.Регистратор КАК Регистратор,
	|	РасчетыСКлиентамиПоСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РасчетыСКлиентамиПоСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыСКлиентамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиДт,
	|	РасчетыСКлиентамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиКт,
	|	РасчетыСКлиентамиПоСторно.РеквизитСторно КАК РеквизитСторно,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСДт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСКт,
	|	РасчетыСКлиентамиПоСторно.Валюта КАК ВалютаДт,
	|	РасчетыСКлиентамиПоСторно.Валюта КАК ВалютаКт,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрДт КАК ИсходнаяСуммаУпрДт,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрКт КАК ИсходнаяСуммаУпрКт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглДт КАК ИсходнаяСуммаРеглДт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглКт КАК ИсходнаяСуммаРеглКт,
	|	РасчетыСКлиентамиПоСторно.СуммаВалДт КАК СуммаВалДт,
	|	РасчетыСКлиентамиПоСторно.СуммаВалКт КАК СуммаВалКт,
	|	0 КАК КоличествоДт,
	|	0 КАК КоличествоКт,
	|	ЛОЖЬ КАК СложнаяПроводкаДт,
	|	ЛОЖЬ КАК СложнаяПроводкаКт,
	|	ИСТИНА КАК УчитыватьХозОперацию,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрДт КАК СуммаУпрДт,
	|	РасчетыСКлиентамиПоСторно.СуммаУпрКт КАК СуммаУпрКт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглДт КАК СуммаРеглДт,
	|	РасчетыСКлиентамиПоСторно.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втРасчетыСКлиентамиПоСторно КАК РасчетыСКлиентамиПоСторно
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасчетыСПоставщикамиПоСторно.Период КАК Период,
	|	РасчетыСПоставщикамиПоСторно.ИмяРегистра КАК ИмяРегистраДт,
	|	РасчетыСПоставщикамиПоСторно.ИмяРегистра КАК ИмяРегистраКт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиДт,
	|	РасчетыСПоставщикамиПоСторно.ОбъектНастройки КАК ОбъектНастройкиКт,
	|	РасчетыСПоставщикамиПоСторно.МестоУчета КАК МестоУчетаДт,
	|	РасчетыСПоставщикамиПоСторно.МестоУчета КАК МестоУчетаКт,
	|	РасчетыСПоставщикамиПоСторно.ЭтоСторно КАК ЭтоСторноДт,
	|	РасчетыСПоставщикамиПоСторно.ЭтоСторно КАК ЭтоСторноКт,
	|	РасчетыСПоставщикамиПоСторно.Организация КАК Организация,
	|	РасчетыСПоставщикамиПоСторно.Регистратор КАК Регистратор,
	|	РасчетыСПоставщикамиПоСторно.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РасчетыСПоставщикамиПоСторно.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РасчетыСПоставщикамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиДт,
	|	РасчетыСПоставщикамиПоСторно.ИдентификаторСтроки КАК ИдентификаторСтрокиКт,
	|	РасчетыСПоставщикамиПоСторно.РеквизитСторно КАК РеквизитСторно,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСДт,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК ВидДеятельностиНДСКт,
	|	РасчетыСПоставщикамиПоСторно.Валюта КАК ВалютаДт,
	|	РасчетыСПоставщикамиПоСторно.Валюта КАК ВалютаКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрДт КАК ИсходнаяСуммаУпрДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрКт КАК ИсходнаяСуммаУпрКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглДт КАК ИсходнаяСуммаРеглДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглКт КАК ИсходнаяСуммаРеглКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаВалДт КАК СуммаВалДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаВалКт КАК СуммаВалКт,
	|	0 КАК КоличествоДт,
	|	0 КАК КоличествоКт,
	|	ЛОЖЬ КАК СложнаяПроводкаДт,
	|	ЛОЖЬ КАК СложнаяПроводкаКт,
	|	ИСТИНА КАК УчитыватьХозОперацию,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрДт КАК СуммаУпрДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаУпрКт КАК СуммаУпрКт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглДт КАК СуммаРеглДт,
	|	РасчетыСПоставщикамиПоСторно.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втРасчетыСПоставщикамиПоСторно КАК РасчетыСПоставщикамиПоСторно
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт,
	|	МестоУчетаДт,
	|	МестоУчетаКт,
	|	Организация
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектУчетаДт", СтрокаУсловияОбъектУчета(Запрос.Параметры, "Дт"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОбъектУчетаКт", СтрокаУсловияОбъектУчета(Запрос.Параметры, "Кт"));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияРегистровДебетКредит");
	
КонецПроцедуры

Процедура РаспределитьНебалансовыеРесурсыКорреспонденций(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчетаДт,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчетаКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК ИсходнаяСуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК ИсходнаяСуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК ИсходноеКоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК ИсходноеКоличествоКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ДвиженияДебетКредит.ВалютаДт <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетнаяСуммаВалДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА ЛОЖЬ
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ДвиженияДебетКредит.ВалютаКт <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчетнаяСуммаВалКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.СуммаВалДт
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА 0
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ВалютаДт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ТОГДА 0
	|				КОГДА ДвиженияДебетКредит.ИсходнаяСуммаУпрДт <> 0
	|					ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.СуммаВалДт * ДвиженияДебетКредит.СуммаУпрДт / ДвиженияДебетКредит.ИсходнаяСуммаУпрДт КАК ЧИСЛО(&ДлинаСуммы,&ТочностьСуммы))
	|				КОГДА ДвиженияДебетКредит.ИсходнаяСуммаРеглДт <> 0
	|					ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.СуммаВалДт * ДвиженияДебетКредит.СуммаРеглДт / ДвиженияДебетКредит.ИсходнаяСуммаРеглДт КАК ЧИСЛО(&ДлинаСуммы,&ТочностьСуммы))
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ВидДеятельностиНДСДт В (&ТипыНалогообложенияБезУчетаНДС)
	|		  ИЛИ ДвиженияДебетКредит.ВидДеятельностиНДСКт В (&ТипыНалогообложенияБезУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыНДС)
	|					ТОГДА 0
	|				ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраКт В (&РегистрыНДС)
	|			ТОГДА СуммыВВалютахДт.СуммаНДСВзаиморасчетов
	|		ИНАЧЕ СуммыВВалютахДт.СуммаВзаиморасчетов - СуммыВВалютахДт.СуммаНДСВзаиморасчетов
	|	КОНЕЦ * ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА 1
	|		КОГДА СуммыВВалютахДт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА СуммыВВалютахДт.СуммаВзаиморасчетов < 0 ИЛИ СуммыВВалютахДт.СуммаНДСВзаиморасчетов < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.СуммаВалКт
	|		КОГДА ДвиженияДебетКредит.НастройкаХозОперации В (&ХозОперацииБезУчетаВВалюте)
	|			ТОГДА 0
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ВалютаКт = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|					ТОГДА 0
	|				КОГДА ДвиженияДебетКредит.ИсходнаяСуммаУпрКт <> 0
	|					ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.СуммаВалКт * ДвиженияДебетКредит.СуммаУпрКт / ДвиженияДебетКредит.ИсходнаяСуммаУпрКт КАК ЧИСЛО(&ДлинаСуммы,&ТочностьСуммы))
	|				КОГДА ДвиженияДебетКредит.ИсходнаяСуммаРеглКт <> 0
	|					ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.СуммаВалКт * ДвиженияДебетКредит.СуммаРеглКт / ДвиженияДебетКредит.ИсходнаяСуммаРеглКт КАК ЧИСЛО(&ДлинаСуммы,&ТочностьСуммы))
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ВидДеятельностиНДСКт В (&ТипыНалогообложенияБезУчетаНДС)
	|		  ИЛИ ДвиженияДебетКредит.ВидДеятельностиНДСДт В (&ТипыНалогообложенияБезУчетаНДС)
	|			ТОГДА ВЫБОР
	|				КОГДА ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыНДС)
	|					ТОГДА 0
	|				ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов
	|			КОНЕЦ
	|		КОГДА ДвиженияДебетКредит.ИмяРегистраДт В (&РегистрыНДС)
	|			ТОГДА СуммыВВалютахКт.СуммаНДСВзаиморасчетов
	|		ИНАЧЕ СуммыВВалютахКт.СуммаВзаиморасчетов - СуммыВВалютахКт.СуммаНДСВзаиморасчетов
	|	КОНЕЦ * ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА 1
	|		КОГДА СуммыВВалютахКт.ИдентификаторСтроки ЕСТЬ NULL
	|			ТОГДА 1
	|		КОГДА СуммыВВалютахКт.СуммаВзаиморасчетов < 0 ИЛИ СуммыВВалютахКт.СуммаНДСВзаиморасчетов < 0
	|			ТОГДА -1
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаДт
	|			ТОГДА ДвиженияДебетКредит.КоличествоДт
	|		КОГДА ДвиженияДебетКредит.КоличествоДт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоДт
	|		КОГДА ДвиженияДебетКредит.ИсходнаяСуммаУпрДт <> 0
	|			ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.КоличествоДт * ДвиженияДебетКредит.СуммаУпрДт / ДвиженияДебетКредит.ИсходнаяСуммаУпрДт КАК ЧИСЛО(&ДлинаКоличества,&ТочностьКоличества))
	|		КОГДА ДвиженияДебетКредит.ИсходнаяСуммаРеглДт <> 0
	|			ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.КоличествоДт * ДвиженияДебетКредит.СуммаРеглДт / ДвиженияДебетКредит.ИсходнаяСуммаРеглДт КАК ЧИСЛО(&ДлинаКоличества,&ТочностьКоличества))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА НЕ ДвиженияДебетКредит.СложнаяПроводкаКт
	|			ТОГДА ДвиженияДебетКредит.КоличествоКт
	|		КОГДА ДвиженияДебетКредит.КоличествоКт = 0
	|			ТОГДА ДвиженияДебетКредит.КоличествоКт
	|		КОГДА ДвиженияДебетКредит.ИсходнаяСуммаУпрКт <> 0
	|			ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.КоличествоКт * ДвиженияДебетКредит.СуммаУпрКт / ДвиженияДебетКредит.ИсходнаяСуммаУпрКт КАК ЧИСЛО(&ДлинаКоличества,&ТочностьКоличества))
	|		КОГДА ДвиженияДебетКредит.ИсходнаяСуммаРеглКт <> 0
	|			ТОГДА ВЫРАЗИТЬ(ДвиженияДебетКредит.КоличествоКт * ДвиженияДебетКредит.СуммаРеглКт / ДвиженияДебетКредит.ИсходнаяСуммаРеглКт КАК ЧИСЛО(&ДлинаКоличества,&ТочностьКоличества))
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоКт
	|ПОМЕСТИТЬ втРаспределениеНебалансовых
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыВВалютахДт
	|	ПО ДвиженияДебетКредит.СложнаяПроводкаДт
	|	 И ДвиженияДебетКредит.ВалютаДт <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	 И ДвиженияДебетКредит.Регистратор = СуммыВВалютахДт.Регистратор
	|	 И ДвиженияДебетКредит.ИдентификаторСтрокиКт = СуммыВВалютахДт.ИдентификаторСтроки
	|	 И ДвиженияДебетКредит.ВалютаДт = СуммыВВалютахДт.ВалютаВзаиморасчетов
	|	 И СуммыВВалютахДт.ОтражаетсяВРасчетах
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыДокументовВВалютахУчета КАК СуммыВВалютахКт
	|	ПО ДвиженияДебетКредит.СложнаяПроводкаКт
	|	 И ДвиженияДебетКредит.ВалютаКт <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	 И ДвиженияДебетКредит.Регистратор = СуммыВВалютахКт.Регистратор
	|	 И ДвиженияДебетКредит.ИдентификаторСтрокиДт = СуммыВВалютахКт.ИдентификаторСтроки
	|	 И ДвиженияДебетКредит.ВалютаКт = СуммыВВалютахКт.ВалютаВзаиморасчетов
	|	 И СуммыВВалютахКт.ОтражаетсяВРасчетах
	|ИНДЕКСИРОВАТЬ ПО
	|	ДвиженияДебетКредит.Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт,
	|	ДвиженияДебетКредит.Организация,
	|	ДвиженияДебетКредит.Регистратор,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаСуммы", СтрокаВыборкиЗначения(Запрос.Параметры.ДлинаСуммы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьСуммы", СтрокаВыборкиЗначения(Запрос.Параметры.ТочностьСуммы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаКоличества", СтрокаВыборкиЗначения(Запрос.Параметры.ДлинаКоличества));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТочностьКоличества", СтрокаВыборкиЗначения(Запрос.Параметры.ТочностьКоличества));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияДебетКредит");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт КАК ИмяРегистраДт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ВалютаДт КАК ВалютаДт,
	|	РаспределениеНебалансовых.ИсходнаяСуммаВалДт КАК ИсходнаяСуммаВалДт,
	|	РаспределениеНебалансовых.ИсходнаяСуммаВалДт - СУММА(РаспределениеНебалансовых.СуммаВалДт) КАК ОшибкаОкругленияДт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА РаспределениеНебалансовых.РасчетнаяСуммаВалДт
	|			ТОГДА РаспределениеНебалансовых.СуммаВалДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК МаксимальнаяСуммаВалДт
	|ПОМЕСТИТЬ втОшибкиОкругленияСуммВалДт
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|ГДЕ
	|	РаспределениеНебалансовых.СложнаяПроводкаДт
	|	И РаспределениеНебалансовых.ВалютаДт <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ВалютаДт,
	|	РаспределениеНебалансовых.ИсходнаяСуммаВалДт
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РаспределениеНебалансовых.РасчетнаяСуммаВалДт) = ИСТИНА
	|	И РаспределениеНебалансовых.ИсходнаяСуммаВалДт <> СУММА(РаспределениеНебалансовых.СуммаВалДт)
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.ИмяРегистраКт КАК ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ВалютаКт КАК ВалютаКт,
	|	РаспределениеНебалансовых.ИсходнаяСуммаВалКт КАК ИсходнаяСуммаВалКт,
	|	РаспределениеНебалансовых.ИсходнаяСуммаВалКт - СУММА(РаспределениеНебалансовых.СуммаВалКт) КАК ОшибкаОкругленияКт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА РаспределениеНебалансовых.РасчетнаяСуммаВалКт
	|			ТОГДА РаспределениеНебалансовых.СуммаВалКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК МаксимальнаяСуммаВалКт
	|ПОМЕСТИТЬ втОшибкиОкругленияСуммВалКт
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|ГДЕ
	|	РаспределениеНебалансовых.СложнаяПроводкаКт
	|	И РаспределениеНебалансовых.ВалютаКт <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ВалютаКт,
	|	РаспределениеНебалансовых.ИсходнаяСуммаВалКт
	|ИМЕЮЩИЕ
	|	МАКСИМУМ(РаспределениеНебалансовых.РасчетнаяСуммаВалКт) = ИСТИНА
	|	И РаспределениеНебалансовых.ИсходнаяСуммаВалКт <> СУММА(РаспределениеНебалансовых.СуммаВалКт)
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиОкругленияСуммВалДт.Период КАК Период,
	|	ОшибкиОкругленияСуммВалДт.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОшибкиОкругленияСуммВалДт.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОшибкиОкругленияСуммВалДт.Организация КАК Организация,
	|	ОшибкиОкругленияСуммВалДт.Регистратор КАК Регистратор,
	|	ОшибкиОкругленияСуммВалДт.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиОкругленияСуммВалДт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияСуммВалДт.ВалютаДт КАК ВалютаДт,
	|	ОшибкиОкругленияСуммВалДт.ИсходнаяСуммаВалДт КАК ИсходнаяСуммаВалДт,
	|	ОшибкиОкругленияСуммВалДт.ОшибкаОкругленияДт КАК ОшибкаОкругленияДт,
	|	МИНИМУМ(РаспределениеНебалансовых.НомерЗаписи) КАК НомерЗаписи
	|ПОМЕСТИТЬ втКоррекцияОшибокСуммВалДт
	|ИЗ
	|	втОшибкиОкругленияСуммВалДт КАК ОшибкиОкругленияСуммВалДт
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|		ПО ОшибкиОкругленияСуммВалДт.Период = РаспределениеНебалансовых.Период
	|		 И ОшибкиОкругленияСуммВалДт.ИмяРегистраДт = РаспределениеНебалансовых.ИмяРегистраДт
	|		 И ОшибкиОкругленияСуммВалДт.ОбъектУчетаДт = РаспределениеНебалансовых.ОбъектУчетаДт
	|		 И ОшибкиОкругленияСуммВалДт.Организация = РаспределениеНебалансовых.Организация
	|		 И ОшибкиОкругленияСуммВалДт.Регистратор = РаспределениеНебалансовых.Регистратор
	|		 И ОшибкиОкругленияСуммВалДт.ИдентификаторФинЗаписи = РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|		 И ОшибкиОкругленияСуммВалДт.ВалютаДт = РаспределениеНебалансовых.ВалютаДт
	|		 И ОшибкиОкругленияСуммВалДт.ИсходнаяСуммаВалДт = РаспределениеНебалансовых.ИсходнаяСуммаВалДт
	|		 И ОшибкиОкругленияСуммВалДт.МаксимальнаяСуммаВалДт = РаспределениеНебалансовых.СуммаВалДт
	|		 И РаспределениеНебалансовых.РасчетнаяСуммаВалДт
	|		 И ВЫБОР
	|			КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|				ТОГДА ОшибкиОкругленияСуммВалДт.НастройкаХозОперации = РаспределениеНебалансовых.НастройкаХозОперации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругленияСуммВалДт.Период,
	|	ОшибкиОкругленияСуммВалДт.ИмяРегистраДт,
	|	ОшибкиОкругленияСуммВалДт.ОбъектУчетаДт,
	|	ОшибкиОкругленияСуммВалДт.Организация,
	|	ОшибкиОкругленияСуммВалДт.Регистратор,
	|	ОшибкиОкругленияСуммВалДт.НастройкаХозОперации,
	|	ОшибкиОкругленияСуммВалДт.ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияСуммВалДт.ВалютаДт,
	|	ОшибкиОкругленияСуммВалДт.ИсходнаяСуммаВалДт,
	|	ОшибкиОкругленияСуммВалДт.ОшибкаОкругленияДт
	|ИНДЕКСИРОВАТЬ ПО
	|	ОшибкиОкругленияСуммВалДт.Период,
	|	ОшибкиОкругленияСуммВалДт.ИмяРегистраДт,
	|	ОшибкиОкругленияСуммВалДт.ОбъектУчетаДт,
	|	ОшибкиОкругленияСуммВалДт.Организация,
	|	ОшибкиОкругленияСуммВалДт.Регистратор,
	|	ОшибкиОкругленияСуммВалДт.ИдентификаторФинЗаписи,
	|	НомерЗаписи
	|");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОшибкиОкругленияСуммВалДт");
		
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиОкругленияСуммВалКт.Период КАК Период,
	|	ОшибкиОкругленияСуммВалКт.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОшибкиОкругленияСуммВалКт.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОшибкиОкругленияСуммВалКт.Организация КАК Организация,
	|	ОшибкиОкругленияСуммВалКт.Регистратор КАК Регистратор,
	|	ОшибкиОкругленияСуммВалКт.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиОкругленияСуммВалКт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияСуммВалКт.ВалютаКт КАК ВалютаКт,
	|	ОшибкиОкругленияСуммВалКт.ИсходнаяСуммаВалКт КАК ИсходнаяСуммаВалКт,
	|	ОшибкиОкругленияСуммВалКт.ОшибкаОкругленияКт КАК ОшибкаОкругленияКт,
	|	МИНИМУМ(РаспределениеНебалансовых.НомерЗаписи) КАК НомерЗаписи
	|ПОМЕСТИТЬ втКоррекцияОшибокСуммВалКт
	|ИЗ
	|	втОшибкиОкругленияСуммВалКт КАК ОшибкиОкругленияСуммВалКт
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|		ПО ОшибкиОкругленияСуммВалКт.Период = РаспределениеНебалансовых.Период
	|		 И ОшибкиОкругленияСуммВалКт.ИмяРегистраКт = РаспределениеНебалансовых.ИмяРегистраКт
	|		 И ОшибкиОкругленияСуммВалКт.ОбъектУчетаКт = РаспределениеНебалансовых.ОбъектУчетаКт
	|		 И ОшибкиОкругленияСуммВалКт.Организация = РаспределениеНебалансовых.Организация
	|		 И ОшибкиОкругленияСуммВалКт.Регистратор = РаспределениеНебалансовых.Регистратор
	|		 И ОшибкиОкругленияСуммВалКт.ИдентификаторФинЗаписи = РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|		 И ОшибкиОкругленияСуммВалКт.ВалютаКт = РаспределениеНебалансовых.ВалютаКт
	|		 И ОшибкиОкругленияСуммВалКт.ИсходнаяСуммаВалКт = РаспределениеНебалансовых.ИсходнаяСуммаВалКт
	|		 И ОшибкиОкругленияСуммВалКт.МаксимальнаяСуммаВалКт = РаспределениеНебалансовых.СуммаВалКт
	|		 И РаспределениеНебалансовых.РасчетнаяСуммаВалКт
	|		 И ВЫБОР
	|			КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|				ТОГДА ОшибкиОкругленияСуммВалКт.НастройкаХозОперации = РаспределениеНебалансовых.НастройкаХозОперации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругленияСуммВалКт.Период,
	|	ОшибкиОкругленияСуммВалКт.ИмяРегистраКт,
	|	ОшибкиОкругленияСуммВалКт.ОбъектУчетаКт,
	|	ОшибкиОкругленияСуммВалКт.Организация,
	|	ОшибкиОкругленияСуммВалКт.Регистратор,
	|	ОшибкиОкругленияСуммВалКт.НастройкаХозОперации,
	|	ОшибкиОкругленияСуммВалКт.ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияСуммВалКт.ВалютаКт,
	|	ОшибкиОкругленияСуммВалКт.ИсходнаяСуммаВалКт,
	|	ОшибкиОкругленияСуммВалКт.ОшибкаОкругленияКт
	|ИНДЕКСИРОВАТЬ ПО
	|	ОшибкиОкругленияСуммВалКт.Период,
	|	ОшибкиОкругленияСуммВалКт.ИмяРегистраКт,
	|	ОшибкиОкругленияСуммВалКт.ОбъектУчетаКт,
	|	ОшибкиОкругленияСуммВалКт.Организация,
	|	ОшибкиОкругленияСуммВалКт.Регистратор,
	|	ОшибкиОкругленияСуммВалКт.ИдентификаторФинЗаписи,
	|	НомерЗаписи
	|");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОшибкиОкругленияСуммВалКт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт КАК ИмяРегистраДт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИсходноеКоличествоДт КАК ИсходноеКоличествоДт,
	|	РаспределениеНебалансовых.ИсходноеКоличествоДт - СУММА(РаспределениеНебалансовых.КоличествоДт) КАК ОшибкаОкругленияДт,
	|	МАКСИМУМ(РаспределениеНебалансовых.КоличествоДт) КАК МаксимальноеКоличествоДт
	|ПОМЕСТИТЬ втОшибкиОкругленияКоличествДт
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|ГДЕ
	|	РаспределениеНебалансовых.СложнаяПроводкаДт
	|	И РаспределениеНебалансовых.ИсходноеКоличествоДт <> 0
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИсходноеКоличествоДт
	|ИМЕЮЩИЕ
	|	РаспределениеНебалансовых.ИсходноеКоличествоДт <> СУММА(РаспределениеНебалансовых.КоличествоДт)
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.ИмяРегистраКт КАК ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИсходноеКоличествоКт КАК ИсходноеКоличествоКт,
	|	РаспределениеНебалансовых.ИсходноеКоличествоКт - СУММА(РаспределениеНебалансовых.КоличествоКт) КАК ОшибкаОкругленияКт,
	|	МАКСИМУМ(РаспределениеНебалансовых.КоличествоКт) КАК МаксимальноеКоличествоКт
	|ПОМЕСТИТЬ втОшибкиОкругленияКоличествКт
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|ГДЕ
	|	РаспределениеНебалансовых.СложнаяПроводкаКт
	|	И РаспределениеНебалансовых.ИсходноеКоличествоКт <> 0
	|СГРУППИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	ВЫБОР
	|		КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|			ТОГДА РаспределениеНебалансовых.НастройкаХозОперации
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
	|	КОНЕЦ,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИсходноеКоличествоКт
	|ИМЕЮЩИЕ
	|	РаспределениеНебалансовых.ИсходноеКоличествоКт <> СУММА(РаспределениеНебалансовых.КоличествоКт)
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт,
	|	РаспределениеНебалансовых.Организация,
	|	РаспределениеНебалансовых.Регистратор,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|");
		
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиОкругленияКоличествДт.Период КАК Период,
	|	ОшибкиОкругленияКоличествДт.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОшибкиОкругленияКоличествДт.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОшибкиОкругленияКоличествДт.Организация КАК Организация,
	|	ОшибкиОкругленияКоличествДт.Регистратор КАК Регистратор,
	|	ОшибкиОкругленияКоличествДт.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиОкругленияКоличествДт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияКоличествДт.ИсходноеКоличествоДт КАК ИсходноеКоличествоДт,
	|	ОшибкиОкругленияКоличествДт.ОшибкаОкругленияДт КАК ОшибкаОкругленияДт,
	|	МИНИМУМ(РаспределениеНебалансовых.НомерЗаписи) КАК НомерЗаписи
	|ПОМЕСТИТЬ втКоррекцияОшибокКоличествДт
	|ИЗ
	|	втОшибкиОкругленияКоличествДт КАК ОшибкиОкругленияКоличествДт
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|		ПО ОшибкиОкругленияКоличествДт.Период = РаспределениеНебалансовых.Период
	|		 И ОшибкиОкругленияКоличествДт.ИмяРегистраДт = РаспределениеНебалансовых.ИмяРегистраДт
	|		 И ОшибкиОкругленияКоличествДт.ОбъектУчетаДт = РаспределениеНебалансовых.ОбъектУчетаДт
	|		 И ОшибкиОкругленияКоличествДт.Организация = РаспределениеНебалансовых.Организация
	|		 И ОшибкиОкругленияКоличествДт.Регистратор = РаспределениеНебалансовых.Регистратор
	|		 И ОшибкиОкругленияКоличествДт.ИдентификаторФинЗаписи = РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|		 И ОшибкиОкругленияКоличествДт.ИсходноеКоличествоДт = РаспределениеНебалансовых.ИсходноеКоличествоДт
	|		 И ОшибкиОкругленияКоличествДт.МаксимальноеКоличествоДт = РаспределениеНебалансовых.КоличествоДт
	|		 И ВЫБОР
	|			КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|				ТОГДА ОшибкиОкругленияКоличествДт.НастройкаХозОперации = РаспределениеНебалансовых.НастройкаХозОперации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругленияКоличествДт.Период,
	|	ОшибкиОкругленияКоличествДт.ИмяРегистраДт,
	|	ОшибкиОкругленияКоличествДт.ОбъектУчетаДт,
	|	ОшибкиОкругленияКоличествДт.Организация,
	|	ОшибкиОкругленияКоличествДт.Регистратор,
	|	ОшибкиОкругленияКоличествДт.НастройкаХозОперации,
	|	ОшибкиОкругленияКоличествДт.ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияКоличествДт.ИсходноеКоличествоДт,
	|	ОшибкиОкругленияКоличествДт.ОшибкаОкругленияДт
	|ИНДЕКСИРОВАТЬ ПО
	|	ОшибкиОкругленияКоличествДт.Период,
	|	ОшибкиОкругленияКоличествДт.ИмяРегистраДт,
	|	ОшибкиОкругленияКоличествДт.ОбъектУчетаДт,
	|	ОшибкиОкругленияКоличествДт.Организация,
	|	ОшибкиОкругленияКоличествДт.Регистратор,
	|	ОшибкиОкругленияКоличествДт.ИдентификаторФинЗаписи,
	|	НомерЗаписи
	|");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОшибкиОкругленияКоличествДт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиОкругленияКоличествКт.Период КАК Период,
	|	ОшибкиОкругленияКоличествКт.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОшибкиОкругленияКоличествКт.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОшибкиОкругленияКоличествКт.Организация КАК Организация,
	|	ОшибкиОкругленияКоличествКт.Регистратор КАК Регистратор,
	|	ОшибкиОкругленияКоличествКт.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиОкругленияКоличествКт.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияКоличествКт.ИсходноеКоличествоКт КАК ИсходноеКоличествоКт,
	|	ОшибкиОкругленияКоличествКт.ОшибкаОкругленияКт КАК ОшибкаОкругленияКт,
	|	МИНИМУМ(РаспределениеНебалансовых.НомерЗаписи) КАК НомерЗаписи
	|ПОМЕСТИТЬ втКоррекцияОшибокКоличествКт
	|ИЗ
	|	втОшибкиОкругленияКоличествКт КАК ОшибкиОкругленияКоличествКт
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|		ПО ОшибкиОкругленияКоличествКт.Период = РаспределениеНебалансовых.Период
	|		 И ОшибкиОкругленияКоличествКт.ИмяРегистраКт = РаспределениеНебалансовых.ИмяРегистраКт
	|		 И ОшибкиОкругленияКоличествКт.ОбъектУчетаКт = РаспределениеНебалансовых.ОбъектУчетаКт
	|		 И ОшибкиОкругленияКоличествКт.Организация = РаспределениеНебалансовых.Организация
	|		 И ОшибкиОкругленияКоличествКт.Регистратор = РаспределениеНебалансовых.Регистратор
	|		 И ОшибкиОкругленияКоличествКт.ИдентификаторФинЗаписи = РаспределениеНебалансовых.ИдентификаторФинЗаписи
	|		 И ОшибкиОкругленияКоличествКт.ИсходноеКоличествоКт = РаспределениеНебалансовых.ИсходноеКоличествоКт
	|		 И ОшибкиОкругленияКоличествКт.МаксимальноеКоличествоКт = РаспределениеНебалансовых.КоличествоКт
	|		 И ВЫБОР
	|			КОГДА РаспределениеНебалансовых.УчитыватьХозОперацию
	|				ТОГДА ОшибкиОкругленияКоличествКт.НастройкаХозОперации = РаспределениеНебалансовых.НастройкаХозОперации
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиОкругленияКоличествКт.Период,
	|	ОшибкиОкругленияКоличествКт.ИмяРегистраКт,
	|	ОшибкиОкругленияКоличествКт.ОбъектУчетаКт,
	|	ОшибкиОкругленияКоличествКт.Организация,
	|	ОшибкиОкругленияКоличествКт.Регистратор,
	|	ОшибкиОкругленияКоличествКт.НастройкаХозОперации,
	|	ОшибкиОкругленияКоличествКт.ИдентификаторФинЗаписи,
	|	ОшибкиОкругленияКоличествКт.ИсходноеКоличествоКт,
	|	ОшибкиОкругленияКоличествКт.ОшибкаОкругленияКт
	|ИНДЕКСИРОВАТЬ ПО
	|	ОшибкиОкругленияКоличествКт.Период,
	|	ОшибкиОкругленияКоличествКт.ИмяРегистраКт,
	|	ОшибкиОкругленияКоличествКт.ОбъектУчетаКт,
	|	ОшибкиОкругленияКоличествКт.Организация,
	|	ОшибкиОкругленияКоличествКт.Регистратор,
	|	ОшибкиОкругленияКоличествКт.ИдентификаторФинЗаписи,
	|	НомерЗаписи
	|");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОшибкиОкругленияКоличествКт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	РаспределениеНебалансовых.НомерЗаписи КАК НомерЗаписи,
	|	РаспределениеНебалансовых.Период КАК Период,
	|	РаспределениеНебалансовых.ИмяРегистраДт КАК ИмяРегистраДт,
	|	РаспределениеНебалансовых.ИмяРегистраКт КАК ИмяРегистраКт,
	|	РаспределениеНебалансовых.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	РаспределениеНебалансовых.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	РаспределениеНебалансовых.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ТИПЗНАЧЕНИЯ(РаспределениеНебалансовых.ОбъектНастройкиДт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций) КАК ИспользоватьНастройкиПрочихОперацийДт,
	|	ТИПЗНАЧЕНИЯ(РаспределениеНебалансовых.ОбъектНастройкиКт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций) КАК ИспользоватьНастройкиПрочихОперацийКт,
	|	РаспределениеНебалансовых.МестоУчетаДт КАК МестоУчетаДт,
	|	РаспределениеНебалансовых.МестоУчетаКт КАК МестоУчетаКт,
	|	РаспределениеНебалансовых.ЭтоСторноДт КАК ЭтоСторноДт,
	|	РаспределениеНебалансовых.ЭтоСторноКт КАК ЭтоСторноКт,
	|	РаспределениеНебалансовых.Организация КАК Организация,
	|	РаспределениеНебалансовых.Регистратор КАК Регистратор,
	|	РаспределениеНебалансовых.НастройкаХозОперации КАК НастройкаХозОперации,
	|	РаспределениеНебалансовых.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	РаспределениеНебалансовых.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	РаспределениеНебалансовых.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	РаспределениеНебалансовых.РеквизитСторно КАК РеквизитСторно,
	|	РаспределениеНебалансовых.ВалютаДт КАК ВалютаДт,
	|	РаспределениеНебалансовых.ВалютаКт КАК ВалютаКт,
	|	РаспределениеНебалансовых.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	РаспределениеНебалансовых.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	РаспределениеНебалансовых.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	РаспределениеНебалансовых.СуммаУпрДт КАК СуммаУпрДт,
	|	РаспределениеНебалансовых.СуммаУпрКт КАК СуммаУпрКт,
	|	РаспределениеНебалансовых.СуммаРеглДт КАК СуммаРеглДт,
	|	РаспределениеНебалансовых.СуммаРеглКт КАК СуммаРеглКт,
	|	РаспределениеНебалансовых.СуммаВалДт + ЕСТЬNULL(КоррекцияОшибокСуммВалДт.ОшибкаОкругленияДт, 0) КАК СуммаВалДт,
	|	РаспределениеНебалансовых.СуммаВалКт + ЕСТЬNULL(КоррекцияОшибокСуммВалКт.ОшибкаОкругленияКт, 0) КАК СуммаВалКт,
	|	РаспределениеНебалансовых.КоличествоДт + ЕСТЬNULL(КоррекцияОшибокКоличествДт.ОшибкаОкругленияДт, 0) КАК КоличествоДт,
	|	РаспределениеНебалансовых.КоличествоКт + ЕСТЬNULL(КоррекцияОшибокКоличествКт.ОшибкаОкругленияКт, 0) КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияДебетКредит
	|ИЗ
	|	втРаспределениеНебалансовых КАК РаспределениеНебалансовых
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалДт КАК КоррекцияОшибокСуммВалДт
	|		ПО РаспределениеНебалансовых.Период = КоррекцияОшибокСуммВалДт.Период
	|		 И РаспределениеНебалансовых.ИмяРегистраДт = КоррекцияОшибокСуммВалДт.ИмяРегистраДт
	|		 И РаспределениеНебалансовых.ОбъектУчетаДт = КоррекцияОшибокСуммВалДт.ОбъектУчетаДт
	|		 И РаспределениеНебалансовых.Организация = КоррекцияОшибокСуммВалДт.Организация
	|		 И РаспределениеНебалансовых.Регистратор = КоррекцияОшибокСуммВалДт.Регистратор
	|		 И РаспределениеНебалансовых.ИдентификаторФинЗаписи = КоррекцияОшибокСуммВалДт.ИдентификаторФинЗаписи
	|		 И РаспределениеНебалансовых.НомерЗаписи = КоррекцияОшибокСуммВалДт.НомерЗаписи
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокСуммВалКт КАК КоррекцияОшибокСуммВалКт
	|		ПО РаспределениеНебалансовых.Период = КоррекцияОшибокСуммВалКт.Период
	|		 И РаспределениеНебалансовых.ИмяРегистраКт = КоррекцияОшибокСуммВалКт.ИмяРегистраКт
	|		 И РаспределениеНебалансовых.ОбъектУчетаКт = КоррекцияОшибокСуммВалКт.ОбъектУчетаКт
	|		 И РаспределениеНебалансовых.Организация = КоррекцияОшибокСуммВалКт.Организация
	|		 И РаспределениеНебалансовых.Регистратор = КоррекцияОшибокСуммВалКт.Регистратор
	|		 И РаспределениеНебалансовых.ИдентификаторФинЗаписи = КоррекцияОшибокСуммВалКт.ИдентификаторФинЗаписи
	|		 И РаспределениеНебалансовых.НомерЗаписи = КоррекцияОшибокСуммВалКт.НомерЗаписи
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествДт КАК КоррекцияОшибокКоличествДт
	|		ПО РаспределениеНебалансовых.Период = КоррекцияОшибокКоличествДт.Период
	|		 И РаспределениеНебалансовых.ИмяРегистраДт = КоррекцияОшибокКоличествДт.ИмяРегистраДт
	|		 И РаспределениеНебалансовых.ОбъектУчетаДт = КоррекцияОшибокКоличествДт.ОбъектУчетаДт
	|		 И РаспределениеНебалансовых.Организация = КоррекцияОшибокКоличествДт.Организация
	|		 И РаспределениеНебалансовых.Регистратор = КоррекцияОшибокКоличествДт.Регистратор
	|		 И РаспределениеНебалансовых.ИдентификаторФинЗаписи = КоррекцияОшибокКоличествДт.ИдентификаторФинЗаписи
	|		 И РаспределениеНебалансовых.НомерЗаписи = КоррекцияОшибокКоличествДт.НомерЗаписи
	|	ЛЕВОЕ СОЕДИНЕНИЕ втКоррекцияОшибокКоличествКт КАК КоррекцияОшибокКоличествКт
	|		ПО РаспределениеНебалансовых.Период = КоррекцияОшибокКоличествКт.Период
	|		 И РаспределениеНебалансовых.ИмяРегистраКт = КоррекцияОшибокКоличествКт.ИмяРегистраКт
	|		 И РаспределениеНебалансовых.ОбъектУчетаКт = КоррекцияОшибокКоличествКт.ОбъектУчетаКт
	|		 И РаспределениеНебалансовых.Организация = КоррекцияОшибокКоличествКт.Организация
	|		 И РаспределениеНебалансовых.Регистратор = КоррекцияОшибокКоличествКт.Регистратор
	|		 И РаспределениеНебалансовых.ИдентификаторФинЗаписи = КоррекцияОшибокКоличествКт.ИдентификаторФинЗаписи
	|		 И РаспределениеНебалансовых.НомерЗаписи = КоррекцияОшибокКоличествКт.НомерЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	РаспределениеНебалансовых.НомерЗаписи,
	|	РаспределениеНебалансовых.Период,
	|	РаспределениеНебалансовых.ОбъектУчетаДт,
	|	РаспределениеНебалансовых.ОбъектУчетаКт,
	|	РаспределениеНебалансовых.ОбъектНастройкиДт,
	|	РаспределениеНебалансовых.ОбъектНастройкиКт,
	|	РаспределениеНебалансовых.МестоУчетаДт,
	|	РаспределениеНебалансовых.МестоУчетаКт,
	|	РаспределениеНебалансовых.Организация
	|");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втРаспределениеНебалансовых");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втКоррекцияОшибокСуммВалДт");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втКоррекцияОшибокСуммВалКт");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втКоррекцияОшибокКоличествДт");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втКоррекцияОшибокКоличествКт");
	
КонецПроцедуры

Процедура ОпределитьСчетаУчетаКорреспонденцийПоОбъектам(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчета,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройки,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ОбъектНастройкиДт В (&ПустыеОбъектыНастройки)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиПодбораСчетов,
	|	ДвиженияДебетКредит.МестоУчетаДт КАК МестоУчета,
	|	ДвиженияДебетКредит.Организация КАК Организация
	|ПОМЕСТИТЬ втОбъектыУчетаИНастройки
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ДвиженияДебетКредит.ИспользоватьНастройкиПрочихОперацийДт
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.МестоУчетаДт,
	|	ДвиженияДебетКредит.Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчета,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройки,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ОбъектНастройкиКт В (&ПустыеОбъектыНастройки)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиПодбораСчетов,
	|	ДвиженияДебетКредит.МестоУчетаКт КАК МестоУчета,
	|	ДвиженияДебетКредит.Организация КАК Организация
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|ГДЕ
	|	НЕ ДвиженияДебетКредит.ИспользоватьНастройкиПрочихОперацийКт
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.МестоУчетаКт,
	|	ДвиженияДебетКредит.Организация
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	ОбъектНастройкиПодбораСчетов,
	|	МестоУчета,
	|	Организация
	|";
	
	ТипыОбъектовНастроек = Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета.Тип;
	ПустыеОбъектыНастройки = ПустыеЗначенияТипа(ТипыОбъектовНастроек);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПустыеОбъектыНастройки", СтрокаВыборкиЗначения(ПустыеОбъектыНастройки));
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	1 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	СчетаУчетаИсключений.ПланСчетов КАК ПланСчетов,
	|	СчетаУчетаИсключений.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаУчетаИсключений.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втПриоритетыСчетовУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК СчетаУчетаИсключений
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = СчетаУчетаИсключений.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = СчетаУчетаИсключений.ОбъектНастройки
	|		 И ОбъектыУчетаИНастройки.МестоУчета = СчетаУчетаИсключений.МестоУчета
	|		 И ОбъектыУчетаИНастройки.Организация = СчетаУчетаИсключений.Организация
	|ГДЕ
	|	СчетаУчетаИсключений.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета)
	|	И СчетаУчетаИсключений.МестоУчета <> НЕОПРЕДЕЛЕНО
	|	И СчетаУчетаИсключений.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	СчетаУчетаИсключений.ПланСчетов КАК ПланСчетов,
	|	СчетаУчетаИсключений.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаУчетаИсключений.СчетУчета КАК СчетУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК СчетаУчетаИсключений
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = СчетаУчетаИсключений.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = СчетаУчетаИсключений.ОбъектНастройки
	|		 И ОбъектыУчетаИНастройки.МестоУчета = СчетаУчетаИсключений.МестоУчета
	|ГДЕ
	|	СчетаУчетаИсключений.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета)
	|	И СчетаУчетаИсключений.МестоУчета <> НЕОПРЕДЕЛЕНО
	|	И СчетаУчетаИсключений.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	СчетаУчетаИсключений.ПланСчетов КАК ПланСчетов,
	|	СчетаУчетаИсключений.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаУчетаИсключений.СчетУчета КАК СчетУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК СчетаУчетаИсключений
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = СчетаУчетаИсключений.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = СчетаУчетаИсключений.ОбъектНастройки
	|		 И ОбъектыУчетаИНастройки.Организация = СчетаУчетаИсключений.Организация
	|ГДЕ
	|	СчетаУчетаИсключений.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ИсключениеПоОбъектуУчета)
	|	И СчетаУчетаИсключений.МестоУчета = НЕОПРЕДЕЛЕНО
	|	И СчетаУчетаИсключений.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4 КАК Приоритет,
	|	ОбъектыУчетаИНастройки.ОбъектУчета КАК ОбъектУчета,
	|	ОбъектыУчетаИНастройки.ОбъектНастройки КАК ОбъектНастройки,
	|	ОбъектыУчетаИНастройки.МестоУчета КАК МестоУчета,
	|	ОбъектыУчетаИНастройки.Организация КАК Организация,
	|	СчетаУчетаОбщие.ПланСчетов КАК ПланСчетов,
	|	СчетаУчетаОбщие.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаУчетаОбщие.СчетУчета КАК СчетУчета
	|ИЗ
	|	втОбъектыУчетаИНастройки КАК ОбъектыУчетаИНастройки
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСчетовМеждународногоУчетаПоОбъектам КАК СчетаУчетаОбщие
	|		ПО ОбъектыУчетаИНастройки.ОбъектУчета = СчетаУчетаОбщие.ОбъектУчета
	|		 И ОбъектыУчетаИНастройки.ОбъектНастройкиПодбораСчетов = СчетаУчетаОбщие.ОбъектНастройки
	|ГДЕ
	|	СчетаУчетаОбщие.ТипНастройки = ЗНАЧЕНИЕ(Перечисление.ТипыНастроекОтраженияВМеждународномУчете.ОбщаяПоОбъектуУчета)
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет,
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОбъектыУчетаИНастройки");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ПриоритетыСчетовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки КАК ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета КАК МестоУчета,
	|	ПриоритетыСчетовУчета.Организация КАК Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов КАК ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	МИНИМУМ(ПриоритетыСчетовУчета.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втНаивысшиеПриоритетыСчетов
	|ИЗ
	|	втПриоритетыСчетовУчета КАК ПриоритетыСчетовУчета
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыСчетовУчета.ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета,
	|	ПриоритетыСчетовУчета.Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок
	|ИНДЕКСИРОВАТЬ ПО
	|	Приоритет,
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ПриоритетыСчетовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки КАК ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета КАК МестоУчета,
	|	ПриоритетыСчетовУчета.Организация КАК Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов КАК ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ПриоритетыСчетовУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаОбъектовУчета
	|ИЗ
	|	втПриоритетыСчетовУчета КАК ПриоритетыСчетовУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНаивысшиеПриоритетыСчетов КАК НаивысшиеПриоритетыСчетов
	|		ПО ПриоритетыСчетовУчета.Приоритет = НаивысшиеПриоритетыСчетов.Приоритет
	|		 И ПриоритетыСчетовУчета.ОбъектУчета = НаивысшиеПриоритетыСчетов.ОбъектУчета
	|		 И ПриоритетыСчетовУчета.ОбъектНастройки = НаивысшиеПриоритетыСчетов.ОбъектНастройки
	|		 И ПриоритетыСчетовУчета.МестоУчета = НаивысшиеПриоритетыСчетов.МестоУчета
	|		 И ПриоритетыСчетовУчета.Организация = НаивысшиеПриоритетыСчетов.Организация
	|		 И ПриоритетыСчетовУчета.ПланСчетов = НаивысшиеПриоритетыСчетов.ПланСчетов
	|		 И ПриоритетыСчетовУчета.НастройкаФормированияПроводок = НаивысшиеПриоритетыСчетов.НастройкаФормированияПроводок
	|СГРУППИРОВАТЬ ПО
	|	ПриоритетыСчетовУчета.ОбъектУчета,
	|	ПриоритетыСчетовУчета.ОбъектНастройки,
	|	ПриоритетыСчетовУчета.МестоУчета,
	|	ПриоритетыСчетовУчета.Организация,
	|	ПриоритетыСчетовУчета.ПланСчетов,
	|	ПриоритетыСчетовУчета.НастройкаФормированияПроводок,
	|	ПриоритетыСчетовУчета.СчетУчета
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	МестоУчета,
	|	Организация,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втПриоритетыСчетовУчета");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втНаивысшиеПриоритетыСчетов");
	
	Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("ДокументыКОтражению") = Неопределено Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПланыСчетовМеждународногоУчетаОрганизаций.Период КАК Период,
		|	ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов КАК ПланСчетов,
		|	ПланыСчетовМеждународногоУчетаОрганизаций.Организация КАК Организация,
		|	ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
		|ПОМЕСТИТЬ втНастройкиПроводокПоПланамСчетов
		|ИЗ
		|	РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ПланСчетов,
		|	Организация
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) КАК Период,
		|	ДвиженияДебетКредит.Организация КАК Организация,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.ПланСчетов, ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)) КАК ПланСчетов,
		|	МАКСИМУМ(НастройкиПроводокПоПланамСчетов.Период) КАК ПериодНастройкиПроводок
		|ПОМЕСТИТЬ втПериодыНастроекПроводок
		|ИЗ
		|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
		|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиПроводокПоПланамСчетов КАК НастройкиПроводокПоПланамСчетов
		|		ПО ДвиженияДебетКредит.Организация = НастройкиПроводокПоПланамСчетов.Организация
		|		 И ДвиженияДебетКредит.Период >= НастройкиПроводокПоПланамСчетов.Период
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ),
		|	ДвиженияДебетКредит.Организация,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.ПланСчетов, ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка))
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	ПланСчетов,
		|	ПериодНастройкиПроводок
		|");
		
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ПериодыНастроекПроводок.Период КАК Период,
		|	ПериодыНастроекПроводок.Организация КАК Организация,
		|	ПериодыНастроекПроводок.ПланСчетов КАК ПланСчетов,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.НастройкаФормированияПроводок, ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)) КАК НастройкаФормированияПроводок
		|ПОМЕСТИТЬ втНастройкиПроводокПоПериодам
		|ИЗ
		|	втПериодыНастроекПроводок КАК ПериодыНастроекПроводок
		|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиПроводокПоПланамСчетов КАК НастройкиПроводокПоПланамСчетов
		|		ПО ПериодыНастроекПроводок.Организация = НастройкиПроводокПоПланамСчетов.Организация
		|		 И ПериодыНастроекПроводок.ПланСчетов = НастройкиПроводокПоПланамСчетов.ПланСчетов
		|		 И ПериодыНастроекПроводок.ПериодНастройкиПроводок = НастройкиПроводокПоПланамСчетов.Период
		|СГРУППИРОВАТЬ ПО
		|	ПериодыНастроекПроводок.Период,
		|	ПериодыНастроекПроводок.Организация,
		|	ПериодыНастроекПроводок.ПланСчетов,
		|	ЕСТЬNULL(НастройкиПроводокПоПланамСчетов.НастройкаФормированияПроводок, ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка))
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация,
		|	ПланСчетов,
		|	НастройкаФормированияПроводок
		|");
		
		ТекстыЗапросов.Добавить("
		|УНИЧТОЖИТЬ втНастройкиПроводокПоПланамСчетов");
		
		ТекстыЗапросов.Добавить("
		|УНИЧТОЖИТЬ втПериодыНастроекПроводок");
	Иначе
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ДокументыКОтражению.ДатаОтражения КАК Период,
		|	ДокументыКОтражению.Организация КАК Организация,
		|	ДокументыКОтражению.ПланСчетов КАК ПланСчетов,
		|	ДокументыКОтражению.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок
		|ПОМЕСТИТЬ втНастройкиПроводокПоПериодам
		|ИЗ
		|	ДокументыКОтражению КАК ДокументыКОтражению
		|СГРУППИРОВАТЬ ПО
		|	ДокументыКОтражению.ДатаОтражения,
		|	ДокументыКОтражению.Организация,
		|	ДокументыКОтражению.ПланСчетов,
		|	ДокументыКОтражению.НастройкаФормированияПроводок
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	Организация,
		|	ПланСчетов,
		|	НастройкаФормированияПроводок
		|");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.НомерЗаписи КАК НомерЗаписи,
	|	МАКСИМУМ(ПрочиеАктивыПассивы.НастройкаСчетовУчета) КАК НастройкаСчетовУчета
	|ПОМЕСТИТЬ втНастройкиУчетаПрочихОперацийДт
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивы
	|		ПО ДвиженияДебетКредит.Период = ПрочиеАктивыПассивы.Период
	|		 И ДвиженияДебетКредит.Регистратор = ПрочиеАктивыПассивы.Регистратор
	|		 И ДвиженияДебетКредит.Организация = ПрочиеАктивыПассивы.Организация
	|		 И ДвиженияДебетКредит.НастройкаХозОперации = ПрочиеАктивыПассивы.НастройкаХозяйственнойОперации
	|		 И ДвиженияДебетКредит.ИдентификаторФинЗаписи = ПрочиеАктивыПассивы.ИдентификаторФинЗаписи
	|		 И ПрочиеАктивыПассивы.ДебетКредит = ВЫБОР
	|			КОГДА ДвиженияДебетКредит.ЭтоСторноДт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|		 КОНЕЦ
	|ГДЕ
	|	ДвиженияДебетКредит.ИмяРегистраДт = ""ДвиженияПоПрочимАктивамПассивам""
	|	И ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиДт) <> ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций)
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	|		ГДЕ
	|			НастройкиМеждународногоУчета.Ссылка = ПрочиеАктивыПассивы.НастройкаСчетовУчета
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.НомерЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	НастройкаСчетовУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	НастройкиУчетаПрочихОпераций.НомерЗаписи КАК НомерЗаписи,
	|	НастройкиМеждународногоУчета.Ссылка КАК НастройкаСчетовУчета,
	|	НастройкиМеждународногоУчета.ПланСчетов КАК ПланСчетов,
	|	НастройкиМеждународногоУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаУчетаПрочихОперацийДт
	|ИЗ
	|	втНастройкиУчетаПрочихОперацийДт КАК НастройкиУчетаПрочихОпераций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	|		ПО НастройкиУчетаПрочихОпераций.НастройкаСчетовУчета = НастройкиМеждународногоУчета.Ссылка
	|ГДЕ
	|	НастройкиМеждународногоУчета.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	ПланСчетов
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втНастройкиУчетаПрочихОперацийДт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.НомерЗаписи КАК НомерЗаписи,
	|	МАКСИМУМ(ПрочиеАктивыПассивы.НастройкаСчетовУчета) КАК НастройкаСчетовУчета
	|ПОМЕСТИТЬ втНастройкиУчетаПрочихОперацийКт
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивы
	|		ПО ДвиженияДебетКредит.Период = ПрочиеАктивыПассивы.Период
	|		 И ДвиженияДебетКредит.Регистратор = ПрочиеАктивыПассивы.Регистратор
	|		 И ДвиженияДебетКредит.Организация = ПрочиеАктивыПассивы.Организация
	|		 И ДвиженияДебетКредит.НастройкаХозОперации = ПрочиеАктивыПассивы.НастройкаХозяйственнойОперации
	|		 И ДвиженияДебетКредит.ИдентификаторФинЗаписи = ПрочиеАктивыПассивы.ИдентификаторФинЗаписи
	|		 И ПрочиеАктивыПассивы.ДебетКредит = ВЫБОР
	|			КОГДА ДвиженияДебетКредит.ЭтоСторноКт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|		 КОНЕЦ
	|ГДЕ
	|	ДвиженияДебетКредит.ИмяРегистраКт = ""ДвиженияПоПрочимАктивамПассивам""
	|	И ТИПЗНАЧЕНИЯ(ДвиженияДебетКредит.ОбъектНастройкиКт) <> ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций)
	|	И ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	|		ГДЕ
	|			НастройкиМеждународногоУчета.Ссылка = ПрочиеАктивыПассивы.НастройкаСчетовУчета
	|		)
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияДебетКредит.НомерЗаписи
	|ИНДЕКСИРОВАТЬ ПО
	|	НастройкаСчетовУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	НастройкиУчетаПрочихОпераций.НомерЗаписи КАК НомерЗаписи,
	|	НастройкиМеждународногоУчета.Ссылка КАК НастройкаСчетовУчета,
	|	НастройкиМеждународногоУчета.ПланСчетов КАК ПланСчетов,
	|	НастройкиМеждународногоУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаУчетаПрочихОперацийКт
	|ИЗ
	|	втНастройкиУчетаПрочихОперацийКт КАК НастройкиУчетаПрочихОпераций
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиМеждународногоУчета
	|		ПО НастройкиУчетаПрочихОпераций.НастройкаСчетовУчета = НастройкиМеждународногоУчета.Ссылка
	|ГДЕ
	|	НастройкиМеждународногоУчета.СчетУчета <> ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерЗаписи,
	|	ПланСчетов
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втНастройкиУчетаПрочихОперацийКт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ЕСТЬNULL(НастройкиПроводокПоПериодам.ПланСчетов, ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)) КАК ПланСчетов,
	|	ЕСТЬNULL(НастройкиПроводокПоПериодам.НастройкаФормированияПроводок, ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)) КАК НастройкаФормированияПроводок,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиСчетовПрочихОперацийДт.СчетУчета
	|		КОГДА НЕ СчетаУчетаПрочихОперацийДт.СчетУчета ЕСТЬ NULL
	|			ТОГДА СчетаУчетаПрочихОперацийДт.СчетУчета
	|		ИНАЧЕ СчетаОбъектовУчетаДт.СчетУчета
	|	КОНЕЦ, ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)) КАК СчетУчетаДт,
	|	ЕСТЬNULL(ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиСчетовПрочихОперацийКт.СчетУчета
	|		КОГДА НЕ СчетаУчетаПрочихОперацийКт.СчетУчета ЕСТЬ NULL
	|			ТОГДА СчетаУчетаПрочихОперацийКт.СчетУчета
	|		ИНАЧЕ СчетаОбъектовУчетаКт.СчетУчета
	|	КОНЕЦ, ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаПрочихОперацийДт.НастройкаСчетовУчета ЕСТЬ NULL
	|			ТОГДА СчетаУчетаПрочихОперацийДт.НастройкаСчетовУчета
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА НЕ СчетаУчетаПрочихОперацийКт.НастройкаСчетовУчета ЕСТЬ NULL
	|			ТОГДА СчетаУчетаПрочихОперацийКт.НастройкаСчетовУчета
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияДебетКредит.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ДвиженияДебетКредит.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияДебетКредит.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияДебетКредит.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетамиДебетКредит
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ втНастройкиПроводокПоПериодам КАК НастройкиПроводокПоПериодам
	|		ПО НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НастройкиПроводокПоПериодам.Период
	|		 И ДвиженияДебетКредит.Организация = НастройкиПроводокПоПериодам.Организация
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОбъектовУчета КАК СчетаОбъектовУчетаДт
	|		ПО ДвиженияДебетКредит.ОбъектУчетаДт = СчетаОбъектовУчетаДт.ОбъектУчета
	|		 И ДвиженияДебетКредит.ОбъектНастройкиДт = СчетаОбъектовУчетаДт.ОбъектНастройки
	|		 И ДвиженияДебетКредит.МестоУчетаДт = СчетаОбъектовУчетаДт.МестоУчета
	|		 И ДвиженияДебетКредит.Организация = СчетаОбъектовУчетаДт.Организация
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = СчетаОбъектовУчетаДт.ПланСчетов
	|		 И НастройкиПроводокПоПериодам.НастройкаФормированияПроводок = СчетаОбъектовУчетаДт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаОбъектовУчета КАК СчетаОбъектовУчетаКт
	|		ПО ДвиженияДебетКредит.ОбъектУчетаКт = СчетаОбъектовУчетаКт.ОбъектУчета
	|		 И ДвиженияДебетКредит.ОбъектНастройкиКт = СчетаОбъектовУчетаКт.ОбъектНастройки
	|		 И ДвиженияДебетКредит.МестоУчетаКт = СчетаОбъектовУчетаКт.МестоУчета
	|		 И ДвиженияДебетКредит.Организация = СчетаОбъектовУчетаКт.Организация
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = СчетаОбъектовУчетаКт.ПланСчетов
	|		 И НастройкиПроводокПоПериодам.НастройкаФормированияПроводок = СчетаОбъектовУчетаКт.НастройкаФормированияПроводок
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиСчетовПрочихОперацийДт
	|		ПО ДвиженияДебетКредит.ОбъектНастройкиДт = НастройкиСчетовПрочихОперацийДт.Ссылка
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = НастройкиСчетовПрочихОперацийДт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиСчетовПрочихОперацийКт
	|		ПО ДвиженияДебетКредит.ОбъектНастройкиКт = НастройкиСчетовПрочихОперацийКт.Ссылка
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = НастройкиСчетовПрочихОперацийКт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчетаПрочихОперацийДт КАК СчетаУчетаПрочихОперацийДт
	|		ПО ДвиженияДебетКредит.НомерЗаписи = СчетаУчетаПрочихОперацийДт.НомерЗаписи
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = СчетаУчетаПрочихОперацийДт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчетаПрочихОперацийКт КАК СчетаУчетаПрочихОперацийКт
	|		ПО ДвиженияДебетКредит.НомерЗаписи = СчетаУчетаПрочихОперацийКт.НомерЗаписи
	|		 И НастройкиПроводокПоПериодам.ПланСчетов = СчетаУчетаПрочихОперацийКт.ПланСчетов
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	СчетУчетаДт,
	|	СчетУчетаКт,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втНастройкиПроводокПоПериодам");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияДебетКредит");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втСчетаОбъектовУчета");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втСчетаУчетаПрочихОперацийДт");

	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втСчетаУчетаПрочихОперацийКт");
	
КонецПроцедуры

Процедура ПроверитьОшибкиКорреспонденций(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.ЭтоСторноДт КАК ЭтоСторноДт,
	|	ДвиженияСоСчетами.ЭтоСторноКт КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт
	|ПОМЕСТИТЬ втОшибкиКорреспонденций
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ГДЕ
	|	ДвиженияСоСчетами.ПланСчетов = ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.НастройкаФормированияПроводок = ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.СчетУчетаДт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.СчетУчетаКт = ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.ОбъектУчетаДт = ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.ОбъектУчетаКт = ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)
	|	ИЛИ ДвиженияСоСчетами.ИмяРегистраДт = """"
	|	ИЛИ ДвиженияСоСчетами.ИмяРегистраКт = """"
	|	ИЛИ ДвиженияСоСчетами.ИдентификаторФинЗаписи = """"
	|	ИЛИ ДвиженияСоСчетами.СуммаУпрДт <> ДвиженияСоСчетами.СуммаУпрКт
	|	ИЛИ ДвиженияСоСчетами.СуммаРеглДт <> ДвиженияСоСчетами.СуммаРеглКт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаДт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	КОНЕЦ) КАК СчетУчетаДт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаКт
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка)
	|	КОНЕЦ) КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	&ИмяРегистраСлужебныхОбъектовУчета КАК ИмяРегистраДт,
	|	&ИмяРегистраСлужебныхОбъектовУчета КАК ИмяРегистраКт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаДт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)
	|	КОНЕЦ) КАК ОбъектУчетаДт,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаКт
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ПустаяСсылка)
	|	КОНЕЦ) КАК ОбъектУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектНастройкиДт,
	|	НЕОПРЕДЕЛЕНО КАК ОбъектНастройкиКт,
	|	ЛОЖЬ КАК ЭтоСторноДт,
	|	ЛОЖЬ КАК ЭтоСторноКт,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка) КАК НастройкаХозОперации,
	|	&ИдентификаторНеиспользуемойФинЗаписи КАК ИдентификаторФинЗаписи,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаУпрДт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаУпрКт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаРеглДт,
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СуммаРеглКт
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ГДЕ
	|	(ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|	И ДвиженияСоСчетами.ОбъектУчетаДт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ВводОстатков))
	|	ИЛИ
	|	(ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|	И ДвиженияСоСчетами.ОбъектУчетаКт <> ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ВводОстатков))
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период,
	|	ДвиженияСоСчетами.Организация,
	|	ДвиженияСоСчетами.Регистратор
	|ИМЕЮЩИЕ
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|	ИЛИ
	|	СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглДт
	|		ИНАЧЕ 0
	|	КОНЕЦ) <> СУММА(ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглКт
	|		ИНАЧЕ 0
	|	КОНЕЦ)
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Период,
	|	Регистратор,
	|	Организация,
	|	НастройкаХозОперации,
	|	ИдентификаторФинЗаписи
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.ПланСчетов КАК ПланСчетов,
	|	ОшибкиКорреспонденций.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОшибкиКорреспонденций.СчетУчетаДт КАК СчетУчетаДт,
	|	ОшибкиКорреспонденций.СчетУчетаКт КАК СчетУчетаКт,
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОшибкиКорреспонденций.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОшибкиКорреспонденций.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОшибкиКорреспонденций.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОшибкиКорреспонденций.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ОшибкиКорреспонденций.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ТИПЗНАЧЕНИЯ(ОшибкиКорреспонденций.ОбъектНастройкиДт) КАК ТипОбъектаНастройкиДт,
	|	ТИПЗНАЧЕНИЯ(ОшибкиКорреспонденций.ОбъектНастройкиКт) КАК ТипОбъектаНастройкиКт,
	|	ЕСТЬNULL(ПрочиеАктивыПассивыДт.Статья, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) КАК СтатьяАктивовПассивовДт,
	|	ЕСТЬNULL(ПрочиеАктивыПассивыКт.Статья, ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка)) КАК СтатьяАктивовПассивовКт,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор,
	|	ОшибкиКорреспонденций.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОшибкиКорреспонденций.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОшибкиКорреспонденций.СуммаУпрДт КАК СуммаУпрДт,
	|	ОшибкиКорреспонденций.СуммаУпрКт КАК СуммаУпрКт,
	|	ОшибкиКорреспонденций.СуммаРеглДт КАК СуммаРеглДт,
	|	ОшибкиКорреспонденций.СуммаРеглКт КАК СуммаРеглКт
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивыДт
	|		ПО ОшибкиКорреспонденций.Период = ПрочиеАктивыПассивыДт.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ПрочиеАктивыПассивыДт.Регистратор
	|		 И ОшибкиКорреспонденций.Организация = ПрочиеАктивыПассивыДт.Организация
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ПрочиеАктивыПассивыДт.НастройкаХозяйственнойОперации
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ПрочиеАктивыПассивыДт.ИдентификаторФинЗаписи
	|		 И ПрочиеАктивыПассивыДт.ДебетКредит = ВЫБОР
	|			КОГДА ОшибкиКорреспонденций.ЭтоСторноДт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|		 КОНЕЦ
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвиженияПоПрочимАктивамПассивам КАК ПрочиеАктивыПассивыКт
	|		ПО ОшибкиКорреспонденций.Период = ПрочиеАктивыПассивыКт.Период
	|		 И ОшибкиКорреспонденций.Регистратор = ПрочиеАктивыПассивыКт.Регистратор
	|		 И ОшибкиКорреспонденций.Организация = ПрочиеАктивыПассивыКт.Организация
	|		 И ОшибкиКорреспонденций.НастройкаХозОперации = ПрочиеАктивыПассивыКт.НастройкаХозяйственнойОперации
	|		 И ОшибкиКорреспонденций.ИдентификаторФинЗаписи = ПрочиеАктивыПассивыКт.ИдентификаторФинЗаписи
	|		 И ПрочиеАктивыПассивыКт.ДебетКредит = ВЫБОР
	|			КОГДА ОшибкиКорреспонденций.ЭтоСторноКт
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Дебет)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПрочихАктивовПассивов.Кредит)
	|		 КОНЕЦ
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.ПланСчетов КАК ПланСчетов,
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиКорреспонденций.ПланСчетов,
	|	ОшибкиКорреспонденций.Период,
	|	ОшибкиКорреспонденций.Организация,
	|	ОшибкиКорреспонденций.Регистратор
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	
	Выборка = Результаты[Результаты.ВГраница() - 1].Выбрать();
	ВыборкаПроводки = Результаты[Результаты.ВГраница()].Выбрать();
	
	РасширенноеОписаниеОбъектовУчета = Перечисления.ОбъектыБухгалтерскогоУчета.РасширенноеОписаниеОбъектовУчетаДляНастройки();
	
	Пока ВыборкаПроводки.Следующий() Цикл
		НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
		ЗаполнитьЗначенияСвойств(НоваяПроводка, ВыборкаПроводки, "ПланСчетов,Период,Организация,Регистратор");
		ОшибкиСтатусыПроводки = Новый Соответствие();
		
		СтруктураПоиска = Новый Структура("ПланСчетов,Период,Организация,Регистратор");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ВыборкаПроводки);
		
		Выборка.Сбросить();
		Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			Если НЕ ЗначениеЗаполнено(Выборка.ИдентификаторФинЗаписи) Тогда
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
				ТекстОшибки = НСтр("ru = 'Не заполнен идентификатор фин.записи в %1';
									|en = 'Financial record ID is required in %1'");
				Если НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт)
					ИЛИ Выборка.ИмяРегистраДт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт])));
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт)
					ИЛИ Выборка.ИмяРегистраКт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистре ""%1""';
																		|en = 'the ""%1"" register'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт])));
				Иначе
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтрШаблон(НСтр("ru = 'регистрах ""%1"" и ""%2""';
																		|en = 'the ""%1"" and ""%2"" registers'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт])));
				КонецЕсли;
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраДт) Тогда
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена корреспонденция для записи регистра ""%1"" с идентификатором %2';
											|en = 'Correspondence for the ""%1"" register record with the %2 ID is not found'"),
					ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
					Выборка.ИдентификаторФинЗаписи);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.ИмяРегистраКт) Тогда
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не найдена корреспонденция для записи регистра ""%1"" с идентификатором %2';
											|en = 'Correspondence for the ""%1"" register record with the %2 ID is not found'"),
					ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
					Выборка.ИдентификаторФинЗаписи);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
			Иначе
				Если НЕ ЗначениеЗаполнено(Выборка.ОбъектУчетаДт)
					И Выборка.ИмяРегистраДт <> ИмяРегистраСлужебныхОбъектовУчета() Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен объект учета для записи регистра ""%1"" с идентификатором %2';
												|en = 'Accounting object is not defined for the ""%1"" register record with the %2 ID'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
						Выборка.ИдентификаторФинЗаписи);
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Выборка.ОбъектУчетаКт)
					И Выборка.ИмяРегистраКт <> ИмяРегистраСлужебныхОбъектовУчета() Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен объект учета для записи регистра ""%1"" с идентификатором %2';
												|en = 'Accounting object is not defined for the ""%1"" register record with the %2 ID'"),
						ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
						Выборка.ИдентификаторФинЗаписи);
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				Если Выборка.СуммаУпрДт <> Выборка.СуммаУпрКт Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					Если Выборка.ИмяРегистраДт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы управленческого учета дебета и кредита по объекту учета ""%1""';
													|en = 'The amounts of management accounting of debit and credit for the ""%1"" accounting object do not match'"),
							Перечисления.ОбъектыБухгалтерскогоУчета.ПредставлениеОбъектаУчетаСГруппой(
								?(ЗначениеЗаполнено(Выборка.ОбъектУчетаДт), Выборка.ОбъектУчетаДт, Выборка.ОбъектУчетаКт),
								РасширенноеОписаниеОбъектовУчета));
					Иначе
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы управленческого учета записей регистров ""%1"" и ""%2"" с идентификатором %3';
													|en = 'The amounts of management accounting of the ""%1"" and ""%2"" register records with the %3 ID do not match'"),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
							Выборка.ИдентификаторФинЗаписи);
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				Если Выборка.СуммаРеглДт <> Выборка.СуммаРеглКт Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров;
					Если Выборка.ИмяРегистраДт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы регламентированного учета дебета и кредита по объекту учета ""%1""';
													|en = 'The amounts of local accounting of debit and credit for the ""%1"" accounting object do not match'"),
							Перечисления.ОбъектыБухгалтерскогоУчета.ПредставлениеОбъектаУчетаСГруппой(
								?(ЗначениеЗаполнено(Выборка.ОбъектУчетаДт), Выборка.ОбъектУчетаДт, Выборка.ОбъектУчетаКт),
								РасширенноеОписаниеОбъектовУчета));
					Иначе
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не совпадают суммы регламентированного учета записей регистров ""%1"" и ""%2"" с идентификатором %3';
													|en = 'The amounts of local accounting of the ""%1"" and ""%2"" register records with the %3 ID do not match'"),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраДт]),
							ОбщегоНазначения.ПредставлениеОбъекта(РегистрыНакопленияМетаданные[Выборка.ИмяРегистраКт]),
							Выборка.ИдентификаторФинЗаписи);
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.ПланСчетов) Тогда
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен план счетов международного учета организации ""%1""';
											|en = 'Financial accounting chart of accounts of the ""%1"" company is not defined'"), Выборка.Организация);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
			ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.НастройкаФормированияПроводок) Тогда
				СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
				ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определена настройка формирования проводок организации ""%1"" по плану счетов ""%2""';
											|en = 'Entry generation setting of the ""%1"" company for the ""%2"" chart of accounts is not defined'"),
					Выборка.Организация, Выборка.ПланСчетов);
				ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
			Иначе
				Если НЕ ЗначениеЗаполнено(Выборка.СчетУчетаДт) И ЗначениеЗаполнено(Выборка.ОбъектУчетаДт) Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
					Если Выборка.ТипОбъектаНастройкиДт = Тип("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций") Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен счет учета прочих активов и пассивов по статье ""%1""';
													|en = 'Ledger account of other assets and liabilities for the ""%1"" item is not defined'"),
							Выборка.СтатьяАктивовПассивовДт);
					Иначе
						ЗарегистрироватьПустойСчетДляНастройки(Выборка, "Дт");
						ПредставлениеОбъектаУчетаДт = Перечисления.ОбъектыБухгалтерскогоУчета.ПредставлениеОбъектаУчетаСГруппой(
							Выборка.ОбъектУчетаДт, РасширенноеОписаниеОбъектовУчета);
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен счет учета для объекта учета ""%1"" с %2';
													|en = 'Ledger account is not defined for the ""%1"" FA/IA with %2'"),
							ПредставлениеОбъектаУчетаДт,
							?(ЗначениеЗаполнено(Выборка.ОбъектНастройкиДт),
								СтрШаблон(НСтр("ru = 'настройкой ""%1""';
												|en = 'the ""%1"" setting'"), Выборка.ОбъектНастройкиДт),
								НСтр("ru = 'пустой настройкой';
									|en = 'empty setting'")));
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Выборка.СчетУчетаКт) И ЗначениеЗаполнено(Выборка.ОбъектУчетаКт) Тогда
					СтатусПроводки = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете;
					Если Выборка.ТипОбъектаНастройкиКт = Тип("СправочникСсылка.НастройкиСчетовУчетаПрочихОпераций") Тогда
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен счет учета прочих активов и пассивов по статье ""%1""';
													|en = 'Ledger account of other assets and liabilities for the ""%1"" item is not defined'"),
							Выборка.СтатьяАктивовПассивовКт);
					Иначе
						ЗарегистрироватьПустойСчетДляНастройки(Выборка, "Кт");
						ПредставлениеОбъектаУчетаКт = Перечисления.ОбъектыБухгалтерскогоУчета.ПредставлениеОбъектаУчетаСГруппой(
							Выборка.ОбъектУчетаКт, РасширенноеОписаниеОбъектовУчета);
						ТекстОшибки = СтрШаблон(НСтр("ru = 'Не определен счет учета для объекта учета ""%1"" с %2';
													|en = 'Ledger account is not defined for the ""%1"" FA/IA with %2'"),
							ПредставлениеОбъектаУчетаКт,
							?(ЗначениеЗаполнено(Выборка.ОбъектНастройкиКт),
								СтрШаблон(НСтр("ru = 'настройкой ""%1""';
												|en = 'the ""%1"" setting'"), Выборка.ОбъектНастройкиКт),
								НСтр("ru = 'пустой настройкой';
									|en = 'empty setting'")));
					КонецЕсли;
					ОшибкиСтатусыПроводки.Вставить(ТекстОшибки, СтатусПроводки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого КлючИЗначение Из ОшибкиСтатусыПроводки Цикл
			МеждународныйУчетПроведениеСервер.ДобавитьОшибкуПроводки(НоваяПроводка, КлючИЗначение.Ключ);
			МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(НоваяПроводка, КлючИЗначение.Значение);
		КонецЦикла;
		
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
	КонецЦикла;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОшибкиКорреспонденций.ПланСчетов КАК ПланСчетов,
	|	ОшибкиКорреспонденций.Период КАК Период,
	|	ОшибкиКорреспонденций.Организация КАК Организация,
	|	ОшибкиКорреспонденций.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ втРегистраторыСОшибками
	|ИЗ
	|	втОшибкиКорреспонденций КАК ОшибкиКорреспонденций
	|СГРУППИРОВАТЬ ПО
	|	ОшибкиКорреспонденций.ПланСчетов,
	|	ОшибкиКорреспонденций.Период,
	|	ОшибкиКорреспонденций.Организация,
	|	ОшибкиКорреспонденций.Регистратор
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	Период,
	|	Организация,
	|	Регистратор
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОшибкиКорреспонденций");

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	(ДвиженияСоСчетами.ЭтоСторноДт ИЛИ ДвиженияСоСчетами.ЭтоСторноКт)
	|		И ДвиженияСоСчетами.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		<> ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками) КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетами
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втРегистраторыСОшибками КАК РегистраторыСОшибками
	|		ГДЕ
	|			РегистраторыСОшибками.ПланСчетов = ДвиженияСоСчетами.ПланСчетов
	|			И РегистраторыСОшибками.Период = ДвиженияСоСчетами.Период
	|			И РегистраторыСОшибками.Организация = ДвиженияСоСчетами.Организация
	|			И РегистраторыСОшибками.Регистратор = ДвиженияСоСчетами.Регистратор
	|		)
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияСоСчетамиДебетКредит");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втРегистраторыСОшибками");
	
КонецПроцедуры

Процедура ПропуститьПроверкуОшибокКорреспонденций(ТекстыЗапросов)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	(ДвиженияСоСчетами.ЭтоСторноДт ИЛИ ДвиженияСоСчетами.ЭтоСторноКт)
	|		И ДвиженияСоСчетами.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|		<> ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками) КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетами
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияСоСчетами
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияСоСчетамиДебетКредит");
	
КонецПроцедуры

Процедура СоздатьТаблицуДвиженийСлужебныхОбъектовУчета(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ИСТИНА КАК ЭтоДебет,
	|	ЛОЖЬ КАК ЭтоКредит,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчета,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройки,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтроки,
	|	ДвиженияСоСчетами.ВалютаДт КАК Валюта,
	|	СУММА(ДвиженияСоСчетами.СуммаУпрДт) КАК СуммаУпр,
	|	СУММА(ДвиженияСоСчетами.СуммаРеглДт) КАК СуммаРегл,
	|	СУММА(ДвиженияСоСчетами.СуммаВалДт) КАК СуммаВал,
	|	СУММА(ДвиженияСоСчетами.КоличествоДт) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|ГДЕ
	|	ИмяРегистраДт = &ИмяРегистраСлужебныхОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.Регистратор,
	|	ДвиженияСоСчетами.Организация,
	|	ДвиженияСоСчетами.НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ВалютаДт
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ КАК ЭтоДебет,
	|	ИСТИНА КАК ЭтоКредит,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчета,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройки,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельности,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтроки,
	|	ДвиженияСоСчетами.ВалютаКт КАК Валюта,
	|	СУММА(ДвиженияСоСчетами.СуммаУпрКт) КАК СуммаУпр,
	|	СУММА(ДвиженияСоСчетами.СуммаРеглКт) КАК СуммаРегл,
	|	СУММА(ДвиженияСоСчетами.СуммаВалКт) КАК СуммаВал,
	|	СУММА(ДвиженияСоСчетами.КоличествоКт) КАК Количество
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|ГДЕ
	|	ИмяРегистраКт = &ИмяРегистраСлужебныхОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.Период,
	|	ДвиженияСоСчетами.ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.Регистратор,
	|	ДвиженияСоСчетами.Организация,
	|	ДвиженияСоСчетами.НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.ВалютаКт
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОбъектУчета,
	|	ОбъектНастройки,
	|	Регистратор,
	|	Организация,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтроки,
	|	НастройкаХозОперации
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ТаблицаДляПомещения", "вт" + ИмяРегистраСлужебныхОбъектовУчета());
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
КонецПроцедуры

Процедура ОпределитьСчетаУчетаОтдельныхКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров)
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	НастройкиОтраженияОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	НастройкиОтраженияОборотов.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	НастройкиОтраженияОборотов.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	НастройкиОтраженияОборотов.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	НастройкиОтраженияОборотов.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт КАК ПользовательскаяНастройкаЗаполненияСубконтоДт,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт КАК ПользовательскаяНастройкаЗаполненияСубконтоКт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	НастройкиОтраженияОборотов.СчетУчетаДт КАК СчетУчетаДт,
	|	НастройкиОтраженияОборотов.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втОборотыДляНастройки
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО ДвиженияСоСчетами.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И НЕ ДвиженияСоСчетами.ИнвертироватьПроводку
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиОтраженияОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	НастройкиОтраженияОборотов.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	НастройкиОтраженияОборотов.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	НастройкиОтраженияОборотов.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	НастройкиОтраженияОборотов.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт КАК ПользовательскаяНастройкаЗаполненияСубконтоДт,
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт КАК ПользовательскаяНастройкаЗаполненияСубконтоКт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	НастройкиОтраженияОборотов.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	НастройкиОтраженияОборотов.СчетУчетаДт КАК СчетУчетаДт,
	|	НастройкиОтраженияОборотов.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО ДвиженияСоСчетами.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ИнвертироватьПроводку
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт,
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтрокиДт,
	|	ИдентификаторСтрокиКт,
	|	НастройкаХозОперации
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОборотыДляНастройки.ПорядокПрименения КАК ПорядокПрименения,
	|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
	|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОборотыДляНастройки.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт
	|ПОМЕСТИТЬ втКлючиНастроекОборотов
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДляНастройки.ПорядокПрименения,
	|	ОборотыДляНастройки.ПланСчетов,
	|	ОборотыДляНастройки.НастройкаФормированияПроводок,
	|	ОборотыДляНастройки.ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт,
	|	ОборотыДляНастройки.ОбъектУчетаДт,
	|	ОборотыДляНастройки.ОбъектУчетаКт,
	|	ОборотыДляНастройки.ИнвертироватьПроводку,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборДт,
	|	ОборотыДляНастройки.ЕстьДополнительныйОтборКт
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокПрименения,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КлючиНастроекОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	КлючиНастроекОборотов.ПланСчетов КАК ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаКт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаДт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	КлючиНастроекОборотов.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоДт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконтоКт3
	|ПОМЕСТИТЬ втЗначенияСубконтоОборотов
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО КлючиНастроекОборотов.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И КлючиНастроекОборотов.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И КлючиНастроекОборотов.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И КлючиНастроекОборотов.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И КлючиНастроекОборотов.ПорядокПрименения = НастройкиОтраженияОборотов.ПорядокПрименения
	|ГДЕ
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|	) ИЛИ
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|	)
	|СГРУППИРОВАТЬ ПО
	|	КлючиНастроекОборотов.ПорядокПрименения,
	|	КлючиНастроекОборотов.ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаКт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаДт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаКт
	|	КОНЕЦ,
	|	КлючиНастроекОборотов.ИнвертироватьПроводку,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт1
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт1
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт2
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт2
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|					ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоДт3
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|					ТОГДА НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиОтраженияОборотов.УказанноеЗначениеСубконтоКт3
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокПрименения,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КлючиНастроекОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	КлючиНастроекОборотов.ПланСчетов КАК ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраКт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраДт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаКт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА КлючиНастроекОборотов.ОбъектУчетаДт
	|		ИНАЧЕ КлючиНастроекОборотов.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	КлючиНастроекОборотов.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоДт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеДт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеДт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеДт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА NULL
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3
	|				ИНАЧЕ NULL
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА NULL
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконтоКт3,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт1, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт1, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеКт1,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт2, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт2, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеКт2,
	|	ВЫБОР
	|		КОГДА КлючиНастроекОборотов.ИнвертироватьПроводку
	|			ТОГДА ВЫБОР
	|				КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|					ТОГДА ЛОЖЬ
	|				КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|					ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоДт3, 1, &ДлинаПрефиксаВыраженияКт) = &ПрефиксВыраженияСубконтоКт
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ
	|		КОГДА НЕ НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|			ТОГДА ЛОЖЬ
	|		КОГДА НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА ПОДСТРОКА(НастройкиОтраженияОборотов.ВыражениеЗаполненияСубконтоКт3, 1, &ДлинаПрефиксаВыраженияДт) = &ПрефиксВыраженияСубконтоДт
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КорВыражениеКт3
	|ПОМЕСТИТЬ втВыраженияСубконтоОборотов
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО КлючиНастроекОборотов.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И КлючиНастроекОборотов.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И КлючиНастроекОборотов.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И КлючиНастроекОборотов.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И КлючиНастроекОборотов.ПорядокПрименения = НастройкиОтраженияОборотов.ПорядокПрименения
	|ГДЕ
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоДт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоДт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|	) ИЛИ
	|	НастройкиОтраженияОборотов.ПользовательскаяНастройкаЗаполненияСубконтоКт
	|	И (НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиОтраженияОборотов.СпособЗаполненияСубконтоКт3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|	)
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокПрименения,
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	КлючиНастроекОборотов.ПорядокПрименения КАК ПорядокПрименения,
	|	КлючиНастроекОборотов.ПланСчетов КАК ПланСчетов,
	|	КлючиНастроекОборотов.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	КлючиНастроекОборотов.ИмяРегистраДт КАК ИмяРегистраДт,
	|	КлючиНастроекОборотов.ИмяРегистраКт КАК ИмяРегистраКт,
	|	КлючиНастроекОборотов.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	КлючиНастроекОборотов.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборДт КАК ЕстьДополнительныйОтборДт,
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборКт КАК ЕстьДополнительныйОтборКт,
	|	НастройкиОтраженияОборотов.ДополнительныйОтборДт КАК ДополнительныйОтборДт,
	|	НастройкиОтраженияОборотов.ДополнительныйОтборКт КАК ДополнительныйОтборКт
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете КАК НастройкиОтраженияОборотов
	|		ПО КлючиНастроекОборотов.ПланСчетов = НастройкиОтраженияОборотов.ПланСчетов
	|		 И КлючиНастроекОборотов.НастройкаФормированияПроводок = НастройкиОтраженияОборотов.НастройкаФормированияПроводок
	|		 И КлючиНастроекОборотов.ОбъектУчетаДт = НастройкиОтраженияОборотов.ОбъектУчетаДт
	|		 И КлючиНастроекОборотов.ОбъектУчетаКт = НастройкиОтраженияОборотов.ОбъектУчетаКт
	|		 И КлючиНастроекОборотов.ПорядокПрименения = НастройкиОтраженияОборотов.ПорядокПрименения
	|ГДЕ
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборДт
	|	ИЛИ КлючиНастроекОборотов.ЕстьДополнительныйОтборКт
	|ИТОГИ ПО
	|	ИмяРегистраДт,
	|	ИмяРегистраКт
	|");

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраДт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистра
	|ИЗ
	|	втКлючиНастроекОборотов КАК КлючиНастроекОборотов
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	КлючиНастроекОборотов.ЕстьДополнительныйОтборДт
	|	ИЛИ КлючиНастроекОборотов.ЕстьДополнительныйОтборКт
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА КлючиНастроекОборотов.ИмяРегистраДт
	|		ИНАЧЕ КлючиНастроекОборотов.ИмяРегистраКт
	|	КОНЕЦ
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РезультатОтборОборотов = Результаты[Результаты.ВГраница() - 1];
	РезультатИменаРегистров = Результаты[Результаты.ВГраница()];

	ВыборкаИмяРегистраДт = РезультатОтборОборотов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаИмяРегистра = РезультатИменаРегистров.Выбрать();
	
	ДоступныеПоляРегистров = Новый Структура();
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовАналитикиДвижений();
	ПоляИндексирования = ПоляИндексаЗапросовОтдельныхКорреспонденций();
	РегистрыВосстановленияРасчетовПоСторно = РегистрыВосстановленияРасчетовПоСторно();
	
	Пока ВыборкаИмяРегистра.Следующий() Цикл
		СтрокиПолейАналитики = Новый Массив();
		СтрокиГруппАналитики = Новый Массив();
		ДоступныеПоляРегистра = Новый Массив();
		
		Если ВыборкаИмяРегистра.ИмяРегистра = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ИмяРегистра = "";
			ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики,
				ДоступныеПоляРегистра, ИмяРегистра);
		Иначе
			ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики,
				ДоступныеПоляРегистра, ВыборкаИмяРегистра.ИмяРегистра);
			
			ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ВыборкаИмяРегистра.ИмяРегистра];
			Если РегистрыВосстановленияРасчетовПоСторно.Найти(ВыборкаИмяРегистра.ИмяРегистра) <> Неопределено Тогда
				ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ВыборкаИмяРегистра.ИмяРегистра);
			КонецЕсли;
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			
			ТаблицаДляПомещения = "вт" + ВыборкаИмяРегистра.ИмяРегистра;
			ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексирования, ТаблицаДляПомещения);
			
			ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
		КонецЕсли;
		
		ДоступныеПоляРегистров.Вставить(ВыборкаИмяРегистра.ИмяРегистра, ДоступныеПоляРегистра);
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
	
		ПоляВыбораКомпоновкиДанных = ПоляВыбораКомпоновкиДанных(Запрос.Параметры);
		ТаблицаРезультатовКомпоновкиДанных = ТаблицаРезультатовКомпоновкиДанных(ПоляВыбораКомпоновкиДанных);
		АдресХранилищаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор());
		ИзмеренияНастроекОборотов = ИзмеренияНастроекОтраженияКорреспонденций();
	Иначе
		ТаблицаРезультатовКомпоновкиДанных = Неопределено;
	КонецЕсли;
	
	Пока ВыборкаИмяРегистраДт.Следующий() Цикл
		ВыборкаИмяРегистраКт = ВыборкаИмяРегистраДт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаИмяРегистраКт.Следующий() Цикл
			ТекстЗапроса = "
			|ВЫБРАТЬ
			|	ОборотыДляНастройки.ПорядокПрименения КАК ПорядокПрименения,
			|	ОборотыДляНастройки.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
			|	ОборотыДляНастройки.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
			|	ОборотыДляНастройки.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
			|	ОборотыДляНастройки.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
			|	ОборотыДляНастройки.СчетУчетаДт КАК СчетУчетаДт,
			|	ОборотыДляНастройки.СчетУчетаКт КАК СчетУчетаКт,
			|	ОборотыДляНастройки.НомерЗаписи КАК НомерЗаписи,
			|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
			|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
			|	ОборотыДляНастройки.Период КАК Период,
			|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
			|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
			|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
			|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
			|	ОборотыДляНастройки.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
			|	ОборотыДляНастройки.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
			|	ОборотыДляНастройки.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
			|	ОборотыДляНастройки.Организация КАК Организация,
			|	ОборотыДляНастройки.Регистратор КАК Регистратор,
			|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
			|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ОборотыДляНастройки.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
			|	ОборотыДляНастройки.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
			|	ОборотыДляНастройки.РеквизитСторно КАК РеквизитСторно,
			|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
			|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
			|	ОборотыДляНастройки.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
			|	ОборотыДляНастройки.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
			|	ОборотыДляНастройки.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
			|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
			|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
			|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
			|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
			|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
			|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
			|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
			|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт,
			|	&ДоступныеПоляТаблицыДт,
			|	&ДоступныеПоляТаблицыКт
			|ИЗ
			|	втОборотыДляНастройки КАК ОборотыДляНастройки
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаДт КАК ТаблицаДт
			|		ПО ОборотыДляНастройки.ИмяРегистраДт = &ИмяРегистраДт
			|		 И ОборотыДляНастройки.ОбъектУчетаДт = ТаблицаДт.ОбъектУчета
			|		 И ОборотыДляНастройки.ОбъектНастройкиДт = ТаблицаДт.ОбъектНастройки
			|		 И ОборотыДляНастройки.Период = ТаблицаДт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаДт.Регистратор
			|		 И ВЫБОР
			|			КОГДА &ИмяРегистраДт В (&РегистрыБезОрганизации)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ОборотыДляНастройки.Организация = ТаблицаДт.Организация
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаДт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиДт = ТаблицаДт.ИдентификаторСтроки
			|		 И ВЫБОР
			|			КОГДА ТаблицаДт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаДт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаДт.ЭтоДебет
			|			ИНАЧЕ НЕ ТаблицаДт.ЭтоКредит
			|		 КОНЕЦ
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаКт КАК ТаблицаКт
			|		ПО ОборотыДляНастройки.ИмяРегистраКт = &ИмяРегистраКт
			|		 И ОборотыДляНастройки.ОбъектУчетаКт = ТаблицаКт.ОбъектУчета
			|		 И ОборотыДляНастройки.ОбъектНастройкиКт = ТаблицаКт.ОбъектНастройки
			|		 И ОборотыДляНастройки.Период = ТаблицаКт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаКт.Регистратор
			|		 И ВЫБОР
			|			КОГДА &ИмяРегистраКт В (&РегистрыБезОрганизации)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ОборотыДляНастройки.Организация = ТаблицаКт.Организация
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаКт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиКт = ТаблицаКт.ИдентификаторСтроки
			|		 И ВЫБОР
			|			КОГДА ТаблицаКт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаКт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаКт.ЭтоКредит
			|			ИНАЧЕ НЕ ТаблицаКт.ЭтоДебет
			|		 КОНЕЦ
			|ГДЕ
			|	ОборотыДляНастройки.ЕстьДополнительныйОтборДт
			|	ИЛИ ОборотыДляНастройки.ЕстьДополнительныйОтборКт
			|";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДт", СтрШаблон("вт%1", ВыборкаИмяРегистраДт.ИмяРегистраДт));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаКт", СтрШаблон("вт%1", ВыборкаИмяРегистраКт.ИмяРегистраКт));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраДт", СтрШаблон("""%1""", ВыборкаИмяРегистраДт.ИмяРегистраДт));
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраКт", СтрШаблон("""%1""", ВыборкаИмяРегистраКт.ИмяРегистраКт));
			
			ДобавитьДоступныеПоляВТекстЗапроса(ДоступныеПоляРегистров[ВыборкаИмяРегистраДт.ИмяРегистраДт], ТекстЗапроса, "Дт");
			ДобавитьДоступныеПоляВТекстЗапроса(ДоступныеПоляРегистров[ВыборкаИмяРегистраКт.ИмяРегистраКт], ТекстЗапроса, "Кт");
			
			СхемаКомпоновкиДанных = НоваяСхемаКомпоновкиДанных(ТекстЗапроса);
			АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, АдресХранилищаКомпоновкиДанных);
			КомпоновщикНастроек = НовыйКомпоновщикНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных, ПоляВыбораКомпоновкиДанных, Запрос.Параметры);
			
			ВыборкаОтборы = ВыборкаИмяРегистраКт.Выбрать();
			Если ВыборкаОтборы.Количество() > 1 Тогда
				ГруппаИли = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаИли.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
				ЭлементыОтбора = ГруппаИли.Элементы;
			Иначе
				ЭлементыОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы;
			КонецЕсли;
			
			Пока ВыборкаОтборы.Следующий() Цикл
				ОтборОборота = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ОтборОборота.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
				
				ДобавитьИзмеренияНастройкиВОтборКомпоновкиДанных(ИзмеренияНастроекОборотов, ВыборкаОтборы, ОтборОборота);
				
				Если ВыборкаОтборы.ЕстьДополнительныйОтборДт Тогда
					КомпоновщикНастроекДт = Новый КомпоновщикНастроекКомпоновкиДанных();
					КомпоновщикНастроекДт.ЗагрузитьНастройки(ВыборкаОтборы.ДополнительныйОтборДт.Получить());
					СкопироватьОтборКомпоновкиДанных(ОтборОборота, КомпоновщикНастроекДт.Настройки.Отбор, "Дт");
				КонецЕсли;
				
				Если ВыборкаОтборы.ЕстьДополнительныйОтборКт Тогда
					КомпоновщикНастроекКт = Новый КомпоновщикНастроекКомпоновкиДанных();
					КомпоновщикНастроекКт.ЗагрузитьНастройки(ВыборкаОтборы.ДополнительныйОтборКт.Получить());
					СкопироватьОтборКомпоновкиДанных(ОтборОборота, КомпоновщикНастроекКт.Настройки.Отбор, "Кт");
				КонецЕсли;
			КонецЦикла;
			
			ДобавитьРезультатыКомпоновкиВТаблицу(СхемаКомпоновкиДанных, КомпоновщикНастроек,
				Запрос.МенеджерВременныхТаблиц, ТаблицаРезультатовКомпоновкиДанных);
		КонецЦикла;
	КонецЦикла;
	
	Если ТаблицаРезультатовКомпоновкиДанных <> Неопределено И ТаблицаРезультатовКомпоновкиДанных.Количество() > 0 Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ТаблицаРезультатовКомпоновки.ПорядокПрименения КАК ПорядокПрименения,
		|	ТаблицаРезультатовКомпоновки.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
		|	ТаблицаРезультатовКомпоновки.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
		|	ТаблицаРезультатовКомпоновки.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
		|	ТаблицаРезультатовКомпоновки.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.СчетУчетаКт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.СчетУчетаДт
		|	КОНЕЦ КАК СчетУчетаДт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.СчетУчетаДт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.СчетУчетаКт
		|	КОНЕЦ КАК СчетУчетаКт,
		|	ТаблицаРезультатовКомпоновки.НомерЗаписи КАК НомерЗаписи,
		|	ТаблицаРезультатовКомпоновки.ПланСчетов КАК ПланСчетов,
		|	ТаблицаРезультатовКомпоновки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ТаблицаРезультатовКомпоновки.Период КАК Период,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ИмяРегистраКт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ИмяРегистраДт
		|	КОНЕЦ КАК ИмяРегистраДт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ИмяРегистраДт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ИмяРегистраКт
		|	КОНЕЦ КАК ИмяРегистраКт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ОбъектУчетаКт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ОбъектУчетаДт
		|	КОНЕЦ КАК ОбъектУчетаДт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ОбъектУчетаДт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ОбъектУчетаКт
		|	КОНЕЦ КАК ОбъектУчетаКт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ОбъектНастройкиКт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ОбъектНастройкиДт
		|	КОНЕЦ КАК ОбъектНастройкиДт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ОбъектНастройкиДт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ОбъектНастройкиКт
		|	КОНЕЦ КАК ОбъектНастройкиКт,
		|	ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
		|	ТаблицаРезультатовКомпоновки.Организация КАК Организация,
		|	ТаблицаРезультатовКомпоновки.Регистратор КАК Регистратор,
		|	ТаблицаРезультатовКомпоновки.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ТаблицаРезультатовКомпоновки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ИдентификаторСтрокиКт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ИдентификаторСтрокиДт
		|	КОНЕЦ КАК ИдентификаторСтрокиДт,
		|	ВЫБОР
		|		КОГДА ТаблицаРезультатовКомпоновки.ИнвертироватьПроводку
		|			ТОГДА ТаблицаРезультатовКомпоновки.ИдентификаторСтрокиДт
		|		ИНАЧЕ ТаблицаРезультатовКомпоновки.ИдентификаторСтрокиКт
		|	КОНЕЦ КАК ИдентификаторСтрокиКт,
		|	ТаблицаРезультатовКомпоновки.РеквизитСторно КАК РеквизитСторно,
		|	ТаблицаРезультатовКомпоновки.ВалютаДт КАК ВалютаДт,
		|	ТаблицаРезультатовКомпоновки.ВалютаКт КАК ВалютаКт,
		|	ТаблицаРезультатовКомпоновки.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
		|	ТаблицаРезультатовКомпоновки.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
		|	ТаблицаРезультатовКомпоновки.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
		|	ТаблицаРезультатовКомпоновки.СуммаУпрДт КАК СуммаУпрДт,
		|	ТаблицаРезультатовКомпоновки.СуммаУпрКт КАК СуммаУпрКт,
		|	ТаблицаРезультатовКомпоновки.СуммаРеглДт КАК СуммаРеглДт,
		|	ТаблицаРезультатовКомпоновки.СуммаРеглКт КАК СуммаРеглКт,
		|	ТаблицаРезультатовКомпоновки.СуммаВалДт КАК СуммаВалДт,
		|	ТаблицаРезультатовКомпоновки.СуммаВалКт КАК СуммаВалКт,
		|	ТаблицаРезультатовКомпоновки.КоличествоДт КАК КоличествоДт,
		|	ТаблицаРезультатовКомпоновки.КоличествоКт КАК КоличествоКт
		|ПОМЕСТИТЬ втОборотыСОтбором
		|ИЗ
		|	&ТаблицаРезультатовКомпоновкиДанных КАК ТаблицаРезультатовКомпоновки
		|");
		Запрос.УстановитьПараметр("ТаблицаРезультатовКомпоновкиДанных", ТаблицаРезультатовКомпоновкиДанных);
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОборотыДляНастройки.ПорядокПрименения КАК ПорядокПрименения,
	|	ОборотыДляНастройки.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	ОборотыДляНастройки.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ОборотыДляНастройки.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ОборотыДляНастройки.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.СчетУчетаКт
	|		ИНАЧЕ ОборотыДляНастройки.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчетаДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.СчетУчетаДт
	|		ИНАЧЕ ОборотыДляНастройки.СчетУчетаКт
	|	КОНЕЦ КАК СчетУчетаКт,
	|	ОборотыДляНастройки.НомерЗаписи КАК НомерЗаписи,
	|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
	|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОборотыДляНастройки.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраКт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраДт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектУчетаКт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектУчетаДт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектНастройкиКт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ОбъектНастройкиДт
	|		ИНАЧЕ ОборотыДляНастройки.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ОборотыДляНастройки.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ОборотыДляНастройки.Организация КАК Организация,
	|	ОборотыДляНастройки.Регистратор КАК Регистратор,
	|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИдентификаторСтрокиКт
	|		ИНАЧЕ ОборотыДляНастройки.ИдентификаторСтрокиДт
	|	КОНЕЦ КАК ИдентификаторСтрокиДт,
	|	ВЫБОР
	|		КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
	|			ТОГДА ОборотыДляНастройки.ИдентификаторСтрокиДт
	|		ИНАЧЕ ОборотыДляНастройки.ИдентификаторСтрокиКт
	|	КОНЕЦ КАК ИдентификаторСтрокиКт,
	|	ОборотыДляНастройки.РеквизитСторно КАК РеквизитСторно,
	|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
	|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
	|	ОборотыДляНастройки.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ОборотыДляНастройки.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ОборотыДляНастройки.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
	|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
	|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
	|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
	|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
	|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
	|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
	|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втОборотыБезОтбора
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|ГДЕ
	|	НЕ ОборотыДляНастройки.ЕстьДополнительныйОтборДт
	|	И НЕ ОборотыДляНастройки.ЕстьДополнительныйОтборКт
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втКлючиНастроекОборотов");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОборотыДляНастройки");
	
КонецПроцедуры

Процедура УдалитьНеотражаемыеКорреспонденции(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	&ПорядокПримененияНастроекПоОбъектам КАК ПорядокПрименения,
	|	ЛОЖЬ КАК НеОтражаетсяНаСчетах,
	|	ЛОЖЬ КАК РучноеУточнениеПроводки,
	|	ЛОЖЬ КАК ОтражениеКорреспонденции,
	|	ЛОЖЬ КАК ИнвертироватьЗнакРесурсов,
	|	ЛОЖЬ КАК ПрименятьПоследующиеНастройки,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.НомерЗаписи КАК НомерЗаписи,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияСоСчетами.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияСоСчетами.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втВсеДвиженияИОбороты
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|";
	
	ЕстьТаблицаОборотовСОтбором = Запрос.Параметры.Свойство("ТаблицаРезультатовКомпоновкиДанных");
	Если ЕстьТаблицаОборотовСОтбором Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОборотыСОтбором.ПорядокПрименения КАК ПорядокПрименения,
		|	ОборотыСОтбором.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
		|	ОборотыСОтбором.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
		|	ИСТИНА КАК ОтражениеКорреспонденции,
		|	ОборотыСОтбором.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
		|	ОборотыСОтбором.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
		|	ОборотыСОтбором.СчетУчетаДт КАК СчетУчетаДт,
		|	ОборотыСОтбором.СчетУчетаКт КАК СчетУчетаКт,
		|	ОборотыСОтбором.НомерЗаписи КАК НомерЗаписи,
		|	ОборотыСОтбором.ПланСчетов КАК ПланСчетов,
		|	ОборотыСОтбором.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ОборотыСОтбором.Период КАК Период,
		|	ОборотыСОтбором.ИмяРегистраДт КАК ИмяРегистраДт,
		|	ОборотыСОтбором.ИмяРегистраКт КАК ИмяРегистраКт,
		|	ОборотыСОтбором.ОбъектУчетаДт КАК ОбъектУчетаДт,
		|	ОборотыСОтбором.ОбъектУчетаКт КАК ОбъектУчетаКт,
		|	ОборотыСОтбором.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
		|	ОборотыСОтбором.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
		|	ОборотыСОтбором.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
		|	ОборотыСОтбором.Организация КАК Организация,
		|	ОборотыСОтбором.Регистратор КАК Регистратор,
		|	ОборотыСОтбором.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ОборотыСОтбором.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ОборотыСОтбором.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
		|	ОборотыСОтбором.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
		|	ОборотыСОтбором.РеквизитСторно КАК РеквизитСторно,
		|	ОборотыСОтбором.ВалютаДт КАК ВалютаДт,
		|	ОборотыСОтбором.ВалютаКт КАК ВалютаКт,
		|	ОборотыСОтбором.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
		|	ОборотыСОтбором.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
		|	ОборотыСОтбором.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
		|	ОборотыСОтбором.СуммаУпрДт КАК СуммаУпрДт,
		|	ОборотыСОтбором.СуммаУпрКт КАК СуммаУпрКт,
		|	ОборотыСОтбором.СуммаРеглДт КАК СуммаРеглДт,
		|	ОборотыСОтбором.СуммаРеглКт КАК СуммаРеглКт,
		|	ОборотыСОтбором.СуммаВалДт КАК СуммаВалДт,
		|	ОборотыСОтбором.СуммаВалКт КАК СуммаВалКт,
		|	ОборотыСОтбором.КоличествоДт КАК КоличествоДт,
		|	ОборотыСОтбором.КоличествоКт КАК КоличествоКт
		|ИЗ
		|	втОборотыСОтбором КАК ОборотыСОтбором
		|";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОборотыБезОтбора.ПорядокПрименения КАК ПорядокПрименения,
	|	ОборотыБезОтбора.НеОтражаетсяНаСчетах КАК НеОтражаетсяНаСчетах,
	|	ОборотыБезОтбора.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ИСТИНА КАК ОтражениеКорреспонденции,
	|	ОборотыБезОтбора.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ОборотыБезОтбора.ПрименятьПоследующиеНастройки КАК ПрименятьПоследующиеНастройки,
	|	ОборотыБезОтбора.СчетУчетаДт КАК СчетУчетаДт,
	|	ОборотыБезОтбора.СчетУчетаКт КАК СчетУчетаКт,
	|	ОборотыБезОтбора.НомерЗаписи КАК НомерЗаписи,
	|	ОборотыБезОтбора.ПланСчетов КАК ПланСчетов,
	|	ОборотыБезОтбора.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ОборотыБезОтбора.Период КАК Период,
	|	ОборотыБезОтбора.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОборотыБезОтбора.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ОборотыБезОтбора.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ОборотыБезОтбора.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ОборотыБезОтбора.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ОборотыБезОтбора.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ОборотыБезОтбора.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ОборотыБезОтбора.Организация КАК Организация,
	|	ОборотыБезОтбора.Регистратор КАК Регистратор,
	|	ОборотыБезОтбора.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ОборотыБезОтбора.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ОборотыБезОтбора.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ОборотыБезОтбора.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ОборотыБезОтбора.РеквизитСторно КАК РеквизитСторно,
	|	ОборотыБезОтбора.ВалютаДт КАК ВалютаДт,
	|	ОборотыБезОтбора.ВалютаКт КАК ВалютаКт,
	|	ОборотыБезОтбора.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ОборотыБезОтбора.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ОборотыБезОтбора.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ОборотыБезОтбора.СуммаУпрДт КАК СуммаУпрДт,
	|	ОборотыБезОтбора.СуммаУпрКт КАК СуммаУпрКт,
	|	ОборотыБезОтбора.СуммаРеглДт КАК СуммаРеглДт,
	|	ОборотыБезОтбора.СуммаРеглКт КАК СуммаРеглКт,
	|	ОборотыБезОтбора.СуммаВалДт КАК СуммаВалДт,
	|	ОборотыБезОтбора.СуммаВалКт КАК СуммаВалКт,
	|	ОборотыБезОтбора.КоличествоДт КАК КоличествоДт,
	|	ОборотыБезОтбора.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втОборотыБезОтбора КАК ОборотыБезОтбора
	|ИНДЕКСИРОВАТЬ ПО
	|	ПорядокПрименения,
	|	НомерЗаписи
	|";
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияСоСчетами");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втОборотыБезОтбора");
	
	Если ЕстьТаблицаОборотовСОтбором Тогда
		ТекстыЗапросов.Добавить("
		|УНИЧТОЖИТЬ втОборотыСОтбором");
	КонецЕсли;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВсеДвиженияИОбороты.ПорядокПрименения КАК ПорядокПрименения,
	|	ВсеДвиженияИОбороты.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ВсеДвиженияИОбороты.ОтражениеКорреспонденции КАК ОтражениеКорреспонденции,
	|	ВсеДвиженияИОбороты.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ВсеДвиженияИОбороты.СчетУчетаДт КАК СчетУчетаДт,
	|	ВсеДвиженияИОбороты.СчетУчетаКт КАК СчетУчетаКт,
	|	ВсеДвиженияИОбороты.ПланСчетов КАК ПланСчетов,
	|	ВсеДвиженияИОбороты.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВсеДвиженияИОбороты.Период КАК Период,
	|	ВсеДвиженияИОбороты.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ВсеДвиженияИОбороты.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ВсеДвиженияИОбороты.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ВсеДвиженияИОбороты.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ВсеДвиженияИОбороты.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ВсеДвиженияИОбороты.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ТИПЗНАЧЕНИЯ(ВсеДвиженияИОбороты.ОбъектНастройкиДт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций) КАК ИспользоватьНастройкиПрочихОперацийДт,
	|	ТИПЗНАЧЕНИЯ(ВсеДвиженияИОбороты.ОбъектНастройкиКт) = ТИП(Справочник.НастройкиСчетовУчетаПрочихОпераций) КАК ИспользоватьНастройкиПрочихОперацийКт,
	|	ВсеДвиженияИОбороты.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ВсеДвиженияИОбороты.Организация КАК Организация,
	|	ВсеДвиженияИОбороты.Регистратор КАК Регистратор,
	|	ВсеДвиженияИОбороты.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ВсеДвиженияИОбороты.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВсеДвиженияИОбороты.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ВсеДвиженияИОбороты.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ВсеДвиженияИОбороты.РеквизитСторно КАК РеквизитСторно,
	|	ВсеДвиженияИОбороты.ВалютаДт КАК ВалютаДт,
	|	ВсеДвиженияИОбороты.ВалютаКт КАК ВалютаКт,
	|	ВсеДвиженияИОбороты.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ВсеДвиженияИОбороты.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ВсеДвиженияИОбороты.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ВсеДвиженияИОбороты.СуммаУпрДт КАК СуммаУпрДт,
	|	ВсеДвиженияИОбороты.СуммаУпрКт КАК СуммаУпрКт,
	|	ВсеДвиженияИОбороты.СуммаРеглДт КАК СуммаРеглДт,
	|	ВсеДвиженияИОбороты.СуммаРеглКт КАК СуммаРеглКт,
	|	ВсеДвиженияИОбороты.СуммаВалДт КАК СуммаВалДт,
	|	ВсеДвиженияИОбороты.СуммаВалКт КАК СуммаВалКт,
	|	ВсеДвиженияИОбороты.КоличествоДт КАК КоличествоДт,
	|	ВсеДвиженияИОбороты.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втДвиженияСоСчетами
	|ИЗ
	|	втВсеДвиженияИОбороты КАК ВсеДвиженияИОбороты
	|ГДЕ
	|	НЕ ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			втВсеДвиженияИОбороты КАК ПредыдущиеНастройки
	|		ГДЕ
	|			ПредыдущиеНастройки.НомерЗаписи = ВсеДвиженияИОбороты.НомерЗаписи
	|			И ПредыдущиеНастройки.ПорядокПрименения < ВсеДвиженияИОбороты.ПорядокПрименения
	|			И НЕ ПредыдущиеНастройки.ПрименятьПоследующиеНастройки
	|		)
	|	И НЕ ВсеДвиженияИОбороты.НеОтражаетсяНаСчетах
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	СчетУчетаДт,
	|	СчетУчетаКт,
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втВсеДвиженияИОбороты");
	
КонецПроцедуры

Процедура СформироватьЗапросыАналитикиКорреспонденций(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров)
		
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ОтражениеКорреспонденции КАК ОтражениеКорреспонденции,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчета,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчета
	|ПОМЕСТИТЬ втСчетаОбъектовУчета
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.ОтражениеКорреспонденции,
	|	ДвиженияСоСчетами.ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт,
	|	ДвиженияСоСчетами.ИмяРегистраДт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ОтражениеКорреспонденции КАК ОтражениеКорреспонденции,
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчета,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистра,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчета
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияСоСчетами.ОтражениеКорреспонденции,
	|	ДвиженияСоСчетами.ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаКт,
	|	ДвиженияСоСчетами.ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	СчетУчета,
	|	ОбъектУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета
	|ПОМЕСТИТЬ втСчетаМеждународногоУчета
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	СчетаОбъектовУчета.СчетУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаМеждународногоУчета.СчетУчета КАК СчетУчета,
	|	СчетаМеждународногоУчета.СчетУчета.Валютный КАК Валютный,
	|	СчетаМеждународногоУчета.СчетУчета.Количественный КАК Количественный,
	|	СчетаМеждународногоУчета.СчетУчета.УчетПоПодразделениям КАК УчетПоПодразделениям,
	|	СчетаМеждународногоУчета.СчетУчета.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельности,
	|	ВЫБОР
	|		КОГДА НЕ ВидыСубконто3.Ссылка ЕСТЬ NULL ТОГДА 3
	|		КОГДА НЕ ВидыСубконто2.Ссылка ЕСТЬ NULL ТОГДА 2
	|		КОГДА НЕ ВидыСубконто1.Ссылка ЕСТЬ NULL ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоСубконто,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконто1,
	|	ВидыСубконто1.ВидСубконто.ТипЗначения КАК ТипЗначенияСубконто1,
	|	ЕСТЬNULL(ВидыСубконто1.ВидСубконто.ИмяПредопределенныхДанных, """") КАК ИмяВидаСубконто1,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконто2,
	|	ВидыСубконто2.ВидСубконто.ТипЗначения КАК ТипЗначенияСубконто2,
	|	ЕСТЬNULL(ВидыСубконто2.ВидСубконто.ИмяПредопределенныхДанных, """") КАК ИмяВидаСубконто2,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка)) КАК ВидСубконто3,
	|	ВидыСубконто3.ВидСубконто.ТипЗначения КАК ТипЗначенияСубконто3,
	|	ЕСТЬNULL(ВидыСубконто3.ВидСубконто.ИмяПредопределенныхДанных, """") КАК ИмяВидаСубконто3
	|ПОМЕСТИТЬ втСвойстваСчетовУчета
	|ИЗ
	|	втСчетаМеждународногоУчета КАК СчетаМеждународногоУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто1
	|		ПО СчетаМеждународногоУчета.СчетУчета = ВидыСубконто1.Ссылка
	|		 И ВидыСубконто1.НомерСтроки = 1
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто2
	|		ПО СчетаМеждународногоУчета.СчетУчета = ВидыСубконто2.Ссылка
	|		 И ВидыСубконто2.НомерСтроки = 2
	|	ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Международный.ВидыСубконто КАК ВидыСубконто3
	|		ПО СчетаМеждународногоУчета.СчетУчета = ВидыСубконто3.Ссылка
	|		 И ВидыСубконто3.НомерСтроки = 3
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втСчетаМеждународногоУчета");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.ПланСчетов КАК ПланСчетов,
	|	СчетаОбъектовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета,
	|	СчетаОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто1
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконто1,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто2
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконто2,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто3
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ЗначениеСубконто3
	|ПОМЕСТИТЬ втУказанныеЗначенияСубконто
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаполненияСубконтоНаСчетахМеждународногоУчета КАК НастройкиЗаполненияСубконто
	|		ПО СчетаОбъектовУчета.ПланСчетов = НастройкиЗаполненияСубконто.ПланСчетов
	|		 И СчетаОбъектовУчета.НастройкаФормированияПроводок = НастройкиЗаполненияСубконто.НастройкаФормированияПроводок
	|		 И СчетаОбъектовУчета.ОбъектУчета = НастройкиЗаполненияСубконто.ОбъектУчета
	|		 И СчетаОбъектовУчета.СчетУчета = НастройкиЗаполненияСубконто.СчетУчета
	|ГДЕ
	|	НЕ СчетаОбъектовУчета.ОтражениеКорреспонденции
	|	И (НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 В (
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение),
	|			ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять))
	|	)
	|СГРУППИРОВАТЬ ПО
	|	СчетаОбъектовУчета.ПланСчетов,
	|	СчетаОбъектовУчета.НастройкаФормированияПроводок,
	|	СчетаОбъектовУчета.СчетУчета,
	|	СчетаОбъектовУчета.ОбъектУчета,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто1
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто2
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.УказанноеЗначение)
	|			ТОГДА НастройкиЗаполненияСубконто.УказанноеЗначениеСубконто3
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.НеЗаполнять)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	СчетУчета,
	|	ОбъектУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.ПланСчетов КАК ПланСчетов,
	|	СчетаОбъектовУчета.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета,
	|	СчетаОбъектовУчета.ИмяРегистра КАК ИмяРегистра,
	|	СчетаОбъектовУчета.ОбъектУчета КАК ОбъектУчета,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто1,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто2,
	|	ВЫБОР
	|		КОГДА НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|			ТОГДА НастройкиЗаполненияСубконто.ВыражениеЗаполненияСубконто3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто3
	|ПОМЕСТИТЬ втВыраженияЗаполненияСубконто
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиЗаполненияСубконтоНаСчетахМеждународногоУчета КАК НастройкиЗаполненияСубконто
	|		ПО СчетаОбъектовУчета.ПланСчетов = НастройкиЗаполненияСубконто.ПланСчетов
	|		 И СчетаОбъектовУчета.НастройкаФормированияПроводок = НастройкиЗаполненияСубконто.НастройкаФормированияПроводок
	|		 И СчетаОбъектовУчета.ОбъектУчета = НастройкиЗаполненияСубконто.ОбъектУчета
	|		 И СчетаОбъектовУчета.СчетУчета = НастройкиЗаполненияСубконто.СчетУчета
	|ГДЕ
	|	НЕ СчетаОбъектовУчета.ОтражениеКорреспонденции
	|	И (НастройкиЗаполненияСубконто.СпособЗаполненияСубконто1 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто2 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|		ИЛИ НастройкиЗаполненияСубконто.СпособЗаполненияСубконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияСубконтоМеждународногоУчета.ИзРегистра)
	|	)
	|ИНДЕКСИРОВАТЬ ПО
	|	ПланСчетов,
	|	НастройкаФормированияПроводок,
	|	СчетУчета,
	|	ИмяРегистра,
	|	ОбъектУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СчетаОбъектовУчета.ИмяРегистра КАК ИмяРегистра,
	|	СчетаОбъектовУчета.СчетУчета КАК СчетУчета
	|ИЗ
	|	втСчетаОбъектовУчета КАК СчетаОбъектовУчета
	|СГРУППИРОВАТЬ ПО
	|	СчетаОбъектовУчета.ИмяРегистра,
	|	СчетаОбъектовУчета.СчетУчета
	|ИТОГИ ПО
	|	ИмяРегистра
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	СвойстваСчетовУчета.СчетУчета КАК СчетУчета,
	|	СвойстваСчетовУчета.КоличествоСубконто КАК КоличествоСубконто,
	|	СвойстваСчетовУчета.ВидСубконто1 КАК ВидСубконто1,
	|	СвойстваСчетовУчета.ТипЗначенияСубконто1 КАК ТипЗначенияСубконто1,
	|	СвойстваСчетовУчета.ИмяВидаСубконто1 КАК ИмяВидаСубконто1,
	|	СвойстваСчетовУчета.ВидСубконто2 КАК ВидСубконто2,
	|	СвойстваСчетовУчета.ТипЗначенияСубконто2 КАК ТипЗначенияСубконто2,
	|	СвойстваСчетовУчета.ИмяВидаСубконто2 КАК ИмяВидаСубконто2,
	|	СвойстваСчетовУчета.ВидСубконто3 КАК ВидСубконто3,
	|	СвойстваСчетовУчета.ТипЗначенияСубконто3 КАК ТипЗначенияСубконто3,
	|	СвойстваСчетовУчета.ИмяВидаСубконто3 КАК ИмяВидаСубконто3
	|ИЗ
	|	втСвойстваСчетовУчета КАК СвойстваСчетовУчета
	|");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВыраженияЗаполненияСубконто.ИмяРегистра КАК ИмяРегистра,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто1 КАК ВыражениеСубконто1,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто2 КАК ВыражениеСубконто2,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто3 КАК ВыражениеСубконто3
	|ИЗ
	|	втВыраженияЗаполненияСубконто КАК ВыраженияЗаполненияСубконто
	|СГРУППИРОВАТЬ ПО
	|	ВыраженияЗаполненияСубконто.ИмяРегистра,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто1,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто2,
	|	ВыраженияЗаполненияСубконто.ВыражениеСубконто3
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраДт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистра,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто1,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто2,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто3
	|ИЗ
	|	втВыраженияСубконтоОборотов КАК ВыраженияСубконтоОборотов
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Дт
	|		И (НЕ ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеДт3)
	|	) ИЛИ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Кт
	|		И (НЕ ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ИЛИ НЕ ВыраженияСубконтоОборотов.КорВыражениеКт3)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраДт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраКт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И НЕ ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И НЕ ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраКт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистра,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто1,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто2,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВыражениеСубконто3
	|ИЗ
	|	втВыраженияСубконтоОборотов КАК ВыраженияСубконтоОборотов
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|ГДЕ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Дт
	|		И (ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеДт3)
	|	) ИЛИ
	|	(ЧастиДвойнойЗаписи.ДтКт = &Кт
	|		И (ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ИЛИ ВыраженияСубконтоОборотов.КорВыражениеКт3)
	|	)
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ВыраженияСубконтоОборотов.ИмяРегистраКт
	|		ИНАЧЕ ВыраженияСубконтоОборотов.ИмяРегистраДт
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт1
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт2
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ NULL
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт И ВыраженияСубконтоОборотов.КорВыражениеДт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Кт И ВыраженияСубконтоОборотов.КорВыражениеКт3
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ NULL
	|	КОНЕЦ
	|");
	
	УдаляемыеВременныеТаблицы = Новый Массив();
	УдаляемыеВременныеТаблицы.Добавить("втСчетаОбъектовУчета");
	УдаляемыеВременныеТаблицы.Добавить("втСвойстваСчетовУчета");
	УдаляемыеВременныеТаблицы.Добавить("втУказанныеЗначенияСубконто");
	УдаляемыеВременныеТаблицы.Добавить("втВыраженияЗаполненияСубконто");
	УдаляемыеВременныеТаблицы.Добавить("втЗначенияСубконтоОборотов");
	УдаляемыеВременныеТаблицы.Добавить("втВыраженияСубконтоОборотов");
	УдаляемыеВременныеТаблицы.Добавить("втДвиженияСоСчетами");
	УдаляемыеВременныеТаблицы.Добавить("втПорцияДокументов");
	УдаляемыеВременныеТаблицы.Добавить("втРасчетыСКлиентамиПоСторно");
	УдаляемыеВременныеТаблицы.Добавить("втРасчетыСПоставщикамиПоСторно");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РезультатСчетаУчетаРегистров = Результаты[Результаты.ВГраница() - 2];
	РезультатВидыСубконто = Результаты[Результаты.ВГраница() - 1];
	РезультатВыраженияСубконто = Результаты[Результаты.ВГраница()];
	
	ВыборкаИмяРегистра = РезультатСчетаУчетаРегистров.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаВидыСубконто = РезультатВидыСубконто.Выбрать();
	ВыборкаВыраженияСубконто = РезультатВыраженияСубконто.Выбрать();
	
	ВсеВидыСубконто = ВсеВидыСубконтоСчетовУчета(ВыборкаВидыСубконто);
	ВсеВыраженияСубконто = ВсеВыраженияЗаполненияСубконто(ВыборкаВыраженияСубконто, Запрос.Параметры);
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовАналитикиДвижений();
	ОбъектыБухгалтерскогоУчета = Перечисления.ОбъектыБухгалтерскогоУчета.ОписаниеОбъектовБухгалтерскогоУчета();
	РегистрыВосстановленияРасчетовПоСторно = РегистрыВосстановленияРасчетовПоСторно();
	
	Пока ВыборкаИмяРегистра.Следующий() Цикл
		ВидыСубконтоРегистра = ВидыСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВидыСубконто);
		ВыраженияСубконтоРегистра = ВыраженияСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВыраженияСубконто, Запрос.Параметры);
		
		СтрокиПолейАналитики = Новый Массив();
		СтрокиГруппАналитики = Новый Массив();
		
		ИмяТаблицыРегистра = ВыборкаИмяРегистра.ИмяРегистра;
		Если ИмяТаблицыРегистра = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ИмяТаблицыРегистра = "";
		КонецЕсли;
		
		ДобавитьПоляВыбораСубконто(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ВсеВидыСубконто, ВидыСубконтоРегистра, ИмяТаблицыРегистра, ОбъектыБухгалтерскогоУчета);
		
		ДобавитьПоляВыбораВыражений(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ВсеВыраженияСубконто, ВыраженияСубконтоРегистра);
		
		ИмяВременнойТаблицыРегистра = "вт" + ВыборкаИмяРегистра.ИмяРегистра;
		
		Если Запрос.МенеджерВременныхТаблиц.Таблицы.Найти(ИмяВременнойТаблицыРегистра) = Неопределено Тогда
			ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ВыборкаИмяРегистра.ИмяРегистра];
			Если РегистрыВосстановленияРасчетовПоСторно.Найти(ВыборкаИмяРегистра.ИмяРегистра) <> Неопределено Тогда
				ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ВыборкаИмяРегистра.ИмяРегистра);
			КонецЕсли;
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки);
		Иначе
			ТекстЗапросаРегистра = "
			|ВЫБРАТЬ
			|	ТаблицаРегистра.Период КАК Период,
			|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
			|	ТаблицаРегистра.ОбъектУчета КАК ОбъектУчета,
			|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
			|	ТаблицаРегистра.ЭтоДебет КАК ЭтоДебет,
			|	ТаблицаРегистра.ЭтоКредит КАК ЭтоКредит,
			|	&ПоляВыбораАналитики,
			|	ТаблицаРегистра.Регистратор КАК Регистратор,
			|	ТаблицаРегистра.Организация КАК Организация,
			|	ТаблицаРегистра.Подразделение КАК Подразделение,
			|	ТаблицаРегистра.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
			|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
			|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
			|	ТаблицаРегистра.Валюта КАК Валюта,
			|	ТаблицаРегистра.СуммаУпр КАК СуммаУпр,
			|	ТаблицаРегистра.СуммаРегл КАК СуммаРегл,
			|	ТаблицаРегистра.СуммаВал КАК СуммаВал,
			|	ТаблицаРегистра.Количество КАК Количество
			|ИЗ
			|	&ИсточникДанных КАК ТаблицаРегистра
			|";
			ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ИсточникДанных", ИмяВременнойТаблицыРегистра);
			ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
			УдаляемыеВременныеТаблицы.Добавить(ИмяВременнойТаблицыРегистра);
		КонецЕсли;
		
		ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
		Запрос.Параметры.РегистрыВыборкиАналитики.Добавить(ВыборкаИмяРегистра.ИмяРегистра);
	КонецЦикла;
	
	Запрос.Параметры.ВсеВидыСубконто = ВсеВидыСубконто;
	Запрос.Параметры.ВсеВыраженияСубконто = ВсеВыраженияСубконто;
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ДвиженияСоСчетами.СчетУчетаДт КАК СчетУчетаДт,
	|	СвойстваСчетовУчетаДт.Валютный КАК ВалютныйДт,
	|	СвойстваСчетовУчетаДт.Количественный КАК КоличественныйДт,
	|	СвойстваСчетовУчетаДт.УчетПоПодразделениям КАК УчетПоПодразделениямДт,
	|	СвойстваСчетовУчетаДт.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельностиДт,
	|	СвойстваСчетовУчетаДт.КоличествоСубконто КАК КоличествоСубконтоДт,
	|	СвойстваСчетовУчетаДт.ВидСубконто1 КАК ВидСубконтоДт1,
	|	СвойстваСчетовУчетаДт.ВидСубконто2 КАК ВидСубконтоДт2,
	|	СвойстваСчетовУчетаДт.ВидСубконто3 КАК ВидСубконтоДт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиУчетаПрочихОперацийДт.Субконто1
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоДт1
	|		ИНАЧЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто1
	|	КОНЕЦ КАК ЗначениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиУчетаПрочихОперацийДт.Субконто2
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоДт2
	|		ИНАЧЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто2
	|	КОНЕЦ КАК ЗначениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА НастройкиУчетаПрочихОперацийДт.Субконто3
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоДт3
	|		ИНАЧЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто3
	|	КОНЕЦ КАК ЗначениеСубконтоДт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоДт1 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто1 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоДт2 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто2 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийДт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоДт3 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоДт.ЗначениеСубконто3 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоДт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт1
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоДт.ВыражениеСубконто1
	|	КОНЕЦ КАК ВыражениеСубконтоДт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт2
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоДт.ВыражениеСубконто2
	|	КОНЕЦ КАК ВыражениеСубконтоДт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоДт3
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоДт.ВыражениеСубконто3
	|	КОНЕЦ КАК ВыражениеСубконтоДт3,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеДт1, ЛОЖЬ) КАК КорВыражениеДт1,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеДт2, ЛОЖЬ) КАК КорВыражениеДт2,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеДт3, ЛОЖЬ) КАК КорВыражениеДт3,
	|	ДвиженияСоСчетами.СчетУчетаКт КАК СчетУчетаКт,
	|	СвойстваСчетовУчетаКт.Валютный КАК ВалютныйКт,
	|	СвойстваСчетовУчетаКт.Количественный КАК КоличественныйКт,
	|	СвойстваСчетовУчетаКт.УчетПоПодразделениям КАК УчетПоПодразделениямКт,
	|	СвойстваСчетовУчетаКт.УчетПоНаправлениямДеятельности КАК УчетПоНаправлениямДеятельностиКт,
	|	СвойстваСчетовУчетаКт.КоличествоСубконто КАК КоличествоСубконтоКт,
	|	СвойстваСчетовУчетаКт.ВидСубконто1 КАК ВидСубконтоКт1,
	|	СвойстваСчетовУчетаКт.ВидСубконто2 КАК ВидСубконтоКт2,
	|	СвойстваСчетовУчетаКт.ВидСубконто3 КАК ВидСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиУчетаПрочихОперацийКт.Субконто1
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоКт1
	|		ИНАЧЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто1
	|	КОНЕЦ КАК ЗначениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиУчетаПрочихОперацийКт.Субконто2
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоКт2
	|		ИНАЧЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто2
	|	КОНЕЦ КАК ЗначениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА НастройкиУчетаПрочихОперацийКт.Субконто3
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ЗначенияСубконтоОборотов.ЗначениеСубконтоКт3
	|		ИНАЧЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто3
	|	КОНЕЦ КАК ЗначениеСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоКт1 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто1 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоКт2 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто2 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИспользоватьНастройкиПрочихОперацийКт
	|			ТОГДА ИСТИНА
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА НЕ ЗначенияСубконтоОборотов.ЗначениеСубконтоКт3 ЕСТЬ NULL
	|		ИНАЧЕ НЕ УказанныеЗначенияСубконтоКт.ЗначениеСубконто3 ЕСТЬ NULL
	|	КОНЕЦ КАК НеВычислятьСубконтоКт3,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт1
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоКт.ВыражениеСубконто1
	|	КОНЕЦ КАК ВыражениеСубконтоКт1,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт2
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоКт.ВыражениеСубконто2
	|	КОНЕЦ КАК ВыражениеСубконтоКт2,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ОтражениеКорреспонденции
	|			ТОГДА ВыраженияСубконтоОборотов.ВыражениеСубконтоКт3
	|		ИНАЧЕ ВыраженияЗаполненияСубконтоКт.ВыражениеСубконто3
	|	КОНЕЦ КАК ВыражениеСубконтоКт3,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеКт1, ЛОЖЬ) КАК КорВыражениеКт1,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеКт2, ЛОЖЬ) КАК КорВыражениеКт2,
	|	ЕСТЬNULL(ВыраженияСубконтоОборотов.КорВыражениеКт3, ЛОЖЬ) КАК КорВыражениеКт3,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ДвиженияСоСчетами.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияСоСчетами.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияСоСчетами.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияСоСчетами.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияСоСчетами.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияСоСчетами.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.ИнвертироватьПроводку КАК ИнвертироватьПроводку,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(ДвиженияСоСчетами.НастройкаХозОперации) КАК НастройкаХозОперацииПредставление,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияСоСчетами.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияСоСчетами.РеквизитСторно КАК РеквизитСторно,
	|	ДвиженияСоСчетами.ВалютаДт КАК ВалютаДт,
	|	ДвиженияСоСчетами.ВалютаКт КАК ВалютаКт,
	|	ДвиженияСоСчетами.СложнаяПроводкаДт КАК СложнаяПроводкаДт,
	|	ДвиженияСоСчетами.СложнаяПроводкаКт КАК СложнаяПроводкаКт,
	|	ДвиженияСоСчетами.УчитыватьХозОперацию КАК УчитыватьХозОперацию,
	|	ДвиженияСоСчетами.РучноеУточнениеПроводки КАК РучноеУточнениеПроводки,
	|	ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов КАК ИнвертироватьЗнакРесурсов,
	|	ДвиженияСоСчетами.СуммаУпрДт КАК СуммаУпр,
	|	ДвиженияСоСчетами.СуммаРеглДт КАК СуммаРегл,
	|	ДвиженияСоСчетами.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияСоСчетами.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияСоСчетами.КоличествоДт КАК КоличествоДт,
	|	ДвиженияСоСчетами.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваСчетовУчета КАК СвойстваСчетовУчетаДт
	|		ПО ДвиженияСоСчетами.СчетУчетаДт = СвойстваСчетовУчетаДт.СчетУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваСчетовУчета КАК СвойстваСчетовУчетаКт
	|		ПО ДвиженияСоСчетами.СчетУчетаКт = СвойстваСчетовУчетаКт.СчетУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втУказанныеЗначенияСубконто КАК УказанныеЗначенияСубконтоДт
	|		ПО ДвиженияСоСчетами.ПланСчетов = УказанныеЗначенияСубконтоДт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = УказанныеЗначенияСубконтоДт.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.СчетУчетаДт = УказанныеЗначенияСубконтоДт.СчетУчета
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = УказанныеЗначенияСубконтоДт.ОбъектУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втУказанныеЗначенияСубконто КАК УказанныеЗначенияСубконтоКт
	|		ПО ДвиженияСоСчетами.ПланСчетов = УказанныеЗначенияСубконтоКт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = УказанныеЗначенияСубконтоКт.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.СчетУчетаКт = УказанныеЗначенияСубконтоКт.СчетУчета
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = УказанныеЗначенияСубконтоКт.ОбъектУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втВыраженияЗаполненияСубконто КАК ВыраженияЗаполненияСубконтоДт
	|		ПО ДвиженияСоСчетами.ПланСчетов = ВыраженияЗаполненияСубконтоДт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ВыраженияЗаполненияСубконтоДт.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.СчетУчетаДт = ВыраженияЗаполненияСубконтоДт.СчетУчета
	|		 И ДвиженияСоСчетами.ИмяРегистраДт = ВыраженияЗаполненияСубконтоДт.ИмяРегистра
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = ВыраженияЗаполненияСубконтоДт.ОбъектУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ втВыраженияЗаполненияСубконто КАК ВыраженияЗаполненияСубконтоКт
	|		ПО ДвиженияСоСчетами.ПланСчетов = ВыраженияЗаполненияСубконтоКт.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ВыраженияЗаполненияСубконтоКт.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.СчетУчетаКт = ВыраженияЗаполненияСубконтоКт.СчетУчета
	|		 И ДвиженияСоСчетами.ИмяРегистраКт = ВыраженияЗаполненияСубконтоКт.ИмяРегистра
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = ВыраженияЗаполненияСубконтоКт.ОбъектУчета
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиУчетаПрочихОперацийДт
	|		ПО ДвиженияСоСчетами.ОбъектНастройкиДт = НастройкиУчетаПрочихОперацийДт.Ссылка
	|		 И ДвиженияСоСчетами.ПланСчетов = НастройкиУчетаПрочихОперацийДт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НастройкиСчетовУчетаПрочихОпераций.НастройкиМеждународногоУчета КАК НастройкиУчетаПрочихОперацийКт
	|		ПО ДвиженияСоСчетами.ОбъектНастройкиКт = НастройкиУчетаПрочихОперацийКт.Ссылка
	|		 И ДвиженияСоСчетами.ПланСчетов = НастройкиУчетаПрочихОперацийКт.ПланСчетов
	|	ЛЕВОЕ СОЕДИНЕНИЕ втЗначенияСубконтоОборотов КАК ЗначенияСубконтоОборотов
	|		ПО ДвиженияСоСчетами.ПланСчетов = ЗначенияСубконтоОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ЗначенияСубконтоОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = ЗначенияСубконтоОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = ЗначенияСубконтоОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ПорядокПрименения = ЗначенияСубконтоОборотов.ПорядокПрименения
	|		 И ДвиженияСоСчетами.ИнвертироватьПроводку = ЗначенияСубконтоОборотов.ИнвертироватьПроводку
	|	ЛЕВОЕ СОЕДИНЕНИЕ втВыраженияСубконтоОборотов КАК ВыраженияСубконтоОборотов
	|		ПО ДвиженияСоСчетами.ПланСчетов = ВыраженияСубконтоОборотов.ПланСчетов
	|		 И ДвиженияСоСчетами.НастройкаФормированияПроводок = ВыраженияСубконтоОборотов.НастройкаФормированияПроводок
	|		 И ДвиженияСоСчетами.ИмяРегистраДт = ВыраженияСубконтоОборотов.ИмяРегистраДт
	|		 И ДвиженияСоСчетами.ИмяРегистраКт = ВыраженияСубконтоОборотов.ИмяРегистраКт
	|		 И ДвиженияСоСчетами.ОбъектУчетаДт = ВыраженияСубконтоОборотов.ОбъектУчетаДт
	|		 И ДвиженияСоСчетами.ОбъектУчетаКт = ВыраженияСубконтоОборотов.ОбъектУчетаКт
	|		 И ДвиженияСоСчетами.ПорядокПрименения = ВыраженияСубконтоОборотов.ПорядокПрименения
	|		 И ДвиженияСоСчетами.ИнвертироватьПроводку = ВыраженияСубконтоОборотов.ИнвертироватьПроводку
	|");
	
	ИмяВременнойТаблицыСлужебныхОбъектовУчета = "вт" + ИмяРегистраСлужебныхОбъектовУчета();
	Если УдаляемыеВременныеТаблицы.Найти(ИмяВременнойТаблицыСлужебныхОбъектовУчета) = Неопределено Тогда
		УдаляемыеВременныеТаблицы.Добавить(ИмяВременнойТаблицыСлужебныхОбъектовУчета);
	КонецЕсли;
	
	Для Каждого ИмяВременнойТаблицы Из УдаляемыеВременныеТаблицы Цикл
		ТекстыЗапросов.Добавить("
		|УНИЧТОЖИТЬ " + ИмяВременнойТаблицы);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовВосстановленияРасчетовПоСторно

Функция РегистрыВосстановленияРасчетовПоСторно()
	
	ИменаРегистров = Новый Массив();
	ИменаРегистров.Добавить(Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя);
	ИменаРегистров.Добавить(Метаданные.РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.Имя);
	
	Возврат ИменаРегистров;
	
КонецФункции

Процедура ВосстановитьРасчетыПоСторно(Запрос, ТекстыЗапросов)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ ПЕРВЫЕ 0
	|	&Организация КАК Организация,
	|	РеестрДокументов.Ссылка КАК ДокументСторно,
	|	РеестрДокументов.ДатаДокументаИБ КАК Период,
	|	РеестрДокументов.СторнируемыйДокумент КАК СторнируемыйДокумент
	|ПОМЕСТИТЬ втРеестрДокументовСторно
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|ГДЕ
	|	РеестрДокументов.СторноИсправление
	|	И НЕ РеестрДокументов.ДополнительнаяЗапись
	|	И &УсловияОтбора
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументСторно,
	|	СторнируемыйДокумент
	|";
	
	Если Запрос.Параметры.ВосстановитьРасчетыПоСторно Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 0", "");
	КонецЕсли;
	
	ЕстьПорцияДокументов = Запрос.МенеджерВременныхТаблиц.Таблицы.Найти("втПорцияДокументов") <> Неопределено;
	
	Если ЕстьПорцияДокументов Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
			"РегистрСведений.РеестрДокументов КАК РеестрДокументов",
			"РегистрСведений.РеестрДокументов КАК РеестрДокументов
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПорцияДокументов КАК ПорцияДокументов
			|		ПО НАЧАЛОПЕРИОДА(РеестрДокументов.ДатаДокументаИБ, ДЕНЬ) = ПорцияДокументов.ДатаДвижений
			|		 И РеестрДокументов.Ссылка = ПорцияДокументов.РегистраторДвижений");
		ПолеВыборкиОрганизации = "ПорцияДокументов.ОрганизацияДвижений";
	Иначе
		ПолеВыборкиОрганизации = СтрокаВыборкиЗначения(Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	СтрокиУсловийОтбора = Новый Массив();
	
	ДатаНачала = '00010101';
	Если Запрос.Параметры.Свойство("ДатаНачала", ДатаНачала) И ДатаНачала > '00010101' Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.ДатаДокументаИБ >= &ДатаНачала");
	КонецЕсли;
	
	ДатаОкончания = '00010101';
	Если Запрос.Параметры.Свойство("ДатаОкончания", ДатаОкончания) И ДатаОкончания > '00010101' Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.ДатаДокументаИБ <= &ДатаОкончания");
	КонецЕсли;
	
	Регистратор = Неопределено;
	Если НЕ Запрос.Параметры.Свойство("Регистратор", Регистратор) Тогда
	ИначеЕсли ТипЗнч(Регистратор) = Тип("Массив") Тогда
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.Ссылка В (&Регистратор)");
	Иначе
		СтрокиУсловийОтбора.Добавить("РеестрДокументов.Ссылка = &Регистратор");
	КонецЕсли;
	
	Если СтрокиУсловийОтбора.Количество() > 0 Тогда
		РазделительСтрок = Символы.ПС + Символы.Таб + "И ";
		ТекстУсловияОтбора = СтрСоединить(СтрокиУсловийОтбора, РазделительСтрок);
	Иначе
		ТекстУсловияОтбора = "ИСТИНА";
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", ПолеВыборкиОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловияОтбора", ТекстУсловияОтбора);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#Область ВосстановлениеАвансаКлиента
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	""РасчетыСКлиентамиПоСрокам"" КАК ИмяРегистра,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ЗадолженностьКлиентов) КАК ОбъектУчетаДт,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.АвансыПолученныеОтКлиентов) КАК ОбъектУчетаКт,
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ОбъектНастройки,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчета,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаКлиента) КАК НастройкаХозОперации,
	|	"""" КАК ИдентификаторФинЗаписи,
	|	"""" КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РеквизитСторно,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.Регистратор КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	&ПрочиеПоляИсточникиСубконто,
	|	СУММА(ДанныеРегистра.ДолгУпр) КАК СуммаУпрДт,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК СуммаУпрКт,
	|	СУММА(ДанныеРегистра.ДолгРегл) КАК СуммаРеглДт,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК СуммаРеглКт,
	|	СУММА(ДанныеРегистра.Долг) КАК СуммаВалДт,
	|	СУММА(ДанныеРегистра.Предоплата) КАК СуммаВалКт
	|ПОМЕСТИТЬ втРасчетыСКлиентамиПоСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта КАК Валюта,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РеестрДокументов.СторнируемыйДокумент
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		НЕ РасчетыСКлиентамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСКлиентамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСКлиентамиПоСрокам.Валюта КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСКлиентамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСКлиентамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСКлиентамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСКлиентамиПоСрокам КАК РасчетыСКлиентамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСКлиентамиПоСрокам.ДокументРегистратор = РеестрДокументов.ДокументСторно
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		РасчетыСКлиентамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Долг) <> 0 ИЛИ СУММА(ДанныеРегистра.Предоплата) <> 0
	|";
	
	Если ЕстьПорцияДокументов Тогда
		УсловиеСоединенияПоОрганизации = "РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация";
	Иначе
		УсловиеСоединенияПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Организация = Неопределено;
	Если НЕ Запрос.Параметры.Свойство("Организация", Организация) Тогда
		УсловиеОтбораПоОрганизации = "ИСТИНА";
	ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
		УсловиеОтбораПоОрганизации = "РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация В (&Организация)";
	Иначе
		УсловиеОтбораПоОрганизации = "РасчетыСКлиентамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = &Организация";
	КонецЕсли;
	
	СуществующиеПоляИсточникиСубконто = Новый Массив();
	СуществующиеПоляИсточникиСубконто.Добавить("АналитикаУчетаПоПартнерам");
	СуществующиеПоляИсточникиСубконто.Добавить("ОбъектРасчетов");
	СуществующиеПоляИсточникиСубконто.Добавить("Валюта");
	СуществующиеПоляИсточникиСубконто.Добавить("РасчетныйДокумент");
	
	ПрочиеПоляИсточникиСубконто = Новый Массив();
	ТекстыВыборкиПрочихПолей = Новый Массив();
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	ПараметрыОтраженияВУчете = РегистрыНакопления.РасчетыСКлиентамиПоСрокам.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Для Каждого ИсточникСубконто Из ПараметрыОтраженияВУчете.ИсточникиСубконто Цикл
		ЧастиПутиКДанным = СтрРазделить(ИсточникСубконто.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		Если СуществующиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено
			И ПрочиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено Тогда
			ПрочиеПоляИсточникиСубконто.Добавить(ИмяПоляРегистра);
			ТекстыВыборкиПрочихПолей.Добавить("НЕОПРЕДЕЛЕНО КАК " + ИмяПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеПоляИсточникиСубконто", СтрСоединить(ТекстыВыборкиПрочихПолей, РазделительСтрок));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияПоОрганизации", УсловиеСоединенияПоОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоОрганизации", УсловиеОтбораПоОрганизации);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	#Область ВосстановлениеАвансаПоставщику
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДанныеРегистра.Период КАК Период,
	|	""РасчетыСПоставщикамиПоСрокам"" КАК ИмяРегистра,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.АвансыВыданныеПоставщикам) КАК ОбъектУчетаДт,
	|	ЗНАЧЕНИЕ(Перечисление.ОбъектыБухгалтерскогоУчета.ЗадолженностьПередПоставщиками) КАК ОбъектУчетаКт,
	|	ДанныеРегистра.ОбъектРасчетов.ГруппаФинансовогоУчета КАК ОбъектНастройки,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчета,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ВосстановлениеАвансаПоставщику) КАК НастройкаХозОперации,
	|	"""" КАК ИдентификаторФинЗаписи,
	|	"""" КАК ИдентификаторСтроки,
	|	ЛОЖЬ КАК РеквизитСторно,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ДанныеРегистра.Регистратор КАК РасчетныйДокумент,
	|	ДанныеРегистра.Валюта КАК Валюта,
	|	&ПрочиеПоляИсточникиСубконто,
	|	СУММА(ДанныеРегистра.ПредоплатаУпр) КАК СуммаУпрДт,
	|	СУММА(ДанныеРегистра.ДолгУпр) КАК СуммаУпрКт,
	|	СУММА(ДанныеРегистра.ПредоплатаРегл) КАК СуммаРеглДт,
	|	СУММА(ДанныеРегистра.ДолгРегл) КАК СуммаРеглКт,
	|	СУММА(ДанныеРегистра.Предоплата) КАК СуммаВалДт,
	|	СУММА(ДанныеРегистра.Долг) КАК СуммаВалКт
	|ПОМЕСТИТЬ втРасчетыСПоставщикамиПоСторно
	|ИЗ
	|	(ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		-ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РеестрДокументов.СторнируемыйДокумент
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		НЕ РасчетыСПоставщикамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		РеестрДокументов.Период КАК Период,
	|		РеестрДокументов.ДокументСторно КАК Регистратор,
	|		РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|		РасчетыСПоставщикамиПоСрокам.ОбъектРасчетов КАК ОбъектРасчетов,
	|		РасчетыСПоставщикамиПоСрокам.Валюта КАК Валюта,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Долг 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Долг 
	|		КОНЕЦ КАК Долг,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгРегл 
	|		КОНЕЦ КАК ДолгРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ДолгУпр 
	|		КОНЕЦ КАК ДолгУпр,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.Предоплата 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.Предоплата 
	|		КОНЕЦ КАК Предоплата,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|		КОНЕЦ КАК ПредоплатаРегл,
	|		ВЫБОР
	|			КОГДА РасчетыСПоставщикамиПоСрокам.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|				ТОГДА -РасчетыСПоставщикамиПоСрокам.ПредоплатаРегл 
	|			ИНАЧЕ РасчетыСПоставщикамиПоСрокам.ПредоплатаУпр 
	|		КОНЕЦ КАК ПредоплатаУпр
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам КАК РасчетыСПоставщикамиПоСрокам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втРеестрДокументовСторно КАК РеестрДокументов
	|		ПО РасчетыСПоставщикамиПоСрокам.ДокументРегистратор = РеестрДокументов.ДокументСторно
	|		 И &УсловиеСоединенияПоОрганизации
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокам.Сторно
	|		И &УсловиеОтбораПоОрганизации
	|	) КАК ДанныеРегистра
	|СГРУППИРОВАТЬ ПО
	|	ДанныеРегистра.Период,
	|	ДанныеРегистра.Регистратор,
	|	ДанныеРегистра.АналитикаУчетаПоПартнерам,
	|	ДанныеРегистра.ОбъектРасчетов,
	|	ДанныеРегистра.Валюта
	|ИМЕЮЩИЕ
	|	СУММА(ДанныеРегистра.Долг) <> 0 ИЛИ СУММА(ДанныеРегистра.Предоплата) <> 0
	|";
	
	Если ЕстьПорцияДокументов Тогда
		УсловиеСоединенияПоОрганизации = "РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = РеестрДокументов.Организация";
	Иначе
		УсловиеСоединенияПоОрганизации = "ИСТИНА";
	КонецЕсли;
	
	Организация = Неопределено;
	Если НЕ Запрос.Параметры.Свойство("Организация", Организация) Тогда
		УсловиеОтбораПоОрганизации = "ИСТИНА";
	ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
		УсловиеОтбораПоОрганизации = "РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация В (&Организация)";
	Иначе
		УсловиеОтбораПоОрганизации = "РасчетыСПоставщикамиПоСрокам.АналитикаУчетаПоПартнерам.Организация = &Организация";
	КонецЕсли;
	
	СуществующиеПоляИсточникиСубконто = Новый Массив();
	СуществующиеПоляИсточникиСубконто.Добавить("АналитикаУчетаПоПартнерам");
	СуществующиеПоляИсточникиСубконто.Добавить("ОбъектРасчетов");
	СуществующиеПоляИсточникиСубконто.Добавить("Валюта");
	СуществующиеПоляИсточникиСубконто.Добавить("РасчетныйДокумент");
	
	ПрочиеПоляИсточникиСубконто = Новый Массив();
	ТекстыВыборкиПрочихПолей = Новый Массив();
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	ПараметрыОтраженияВУчете = РегистрыНакопления.РасчетыСПоставщикамиПоСрокам.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. ПараметрыОтраженияДвиженийВФинансовомУчете
	
	Для Каждого ИсточникСубконто Из ПараметрыОтраженияВУчете.ИсточникиСубконто Цикл
		ЧастиПутиКДанным = СтрРазделить(ИсточникСубконто.Значение.ПутьКДанным, ".");
		ИмяПоляРегистра = ЧастиПутиКДанным[0];
		Если СуществующиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено
			И ПрочиеПоляИсточникиСубконто.Найти(ИмяПоляРегистра) = Неопределено Тогда
			ПрочиеПоляИсточникиСубконто.Добавить(ИмяПоляРегистра);
			ТекстыВыборкиПрочихПолей.Добавить("НЕОПРЕДЕЛЕНО КАК " + ИмяПоляРегистра);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПрочиеПоляИсточникиСубконто", СтрСоединить(ТекстыВыборкиПрочихПолей, РазделительСтрок));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСоединенияПоОрганизации", УсловиеСоединенияПоОрганизации);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеОтбораПоОрганизации", УсловиеОтбораПоОрганизации);
	
	ТекстыЗапросов.Добавить(ТекстЗапроса);
	
	#КонецОбласти
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втРеестрДокументовСторно");
	
	Если Запрос.Параметры.ВосстановитьРасчетыПоСторно Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
		
		Если ОбщегоНазначенияУТ.РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "втРасчетыСКлиентамиПоСторно") > 0 Тогда
			ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(
				"втРасчетыСКлиентамиПоСторно",
				Запрос.МенеджерВременныхТаблиц,
				"ИдентификаторФинЗаписи");
		КонецЕсли;
		
		Если ОбщегоНазначенияУТ.РазмерВременнойТаблицы(Запрос.МенеджерВременныхТаблиц, "втРасчетыСПоставщикамиПоСторно") > 0 Тогда
			ОбщегоНазначенияУТ.ДобавитьИдентификаторыВоВременнуюТаблицу(
				"втРасчетыСПоставщикамиПоСторно",
				Запрос.МенеджерВременныхТаблиц,
				"ИдентификаторФинЗаписи");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ИмяРегистра)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
	|	ТаблицаРегистра.ОбъектУчетаДт КАК ОбъектУчета,
	|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчета,
	|	ИСТИНА КАК ЭтоДебет,
	|	ЛОЖЬ КАК ЭтоКредит,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	ТаблицаРегистра.Регистратор КАК Регистратор,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ТаблицаРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО КАК СлужебныйВидДеятельностиНДС,
	|	ТаблицаРегистра.Валюта КАК Валюта,
	|	ТаблицаРегистра.СуммаУпрДт КАК СуммаУпр,
	|	ТаблицаРегистра.СуммаРеглДт КАК СуммаРегл,
	|	ТаблицаРегистра.СуммаВалДт КАК СуммаВал,
	|	0 КАК Количество,
	|	ЛОЖЬ КАК РеквизитСторно
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаРегистра.Период КАК Период,
	|	ТаблицаРегистра.ИмяРегистра КАК ИмяРегистра,
	|	ТаблицаРегистра.ОбъектУчетаКт КАК ОбъектУчета,
	|	ТаблицаРегистра.ОбъектНастройки КАК ОбъектНастройки,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчета,
	|	ЛОЖЬ КАК ЭтоДебет,
	|	ИСТИНА КАК ЭтоКредит,
	|	ЛОЖЬ КАК ЭтоСторно,
	|	&ПоляВыбораАналитики,
	|	ТаблицаРегистра.Регистратор КАК Регистратор,
	|	ТаблицаРегистра.Организация КАК Организация,
	|	ТаблицаРегистра.ОбъектРасчетов.Подразделение КАК Подразделение,
	|	ТаблицаРегистра.АналитикаУчетаПоПартнерам.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаРегистра.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ТаблицаРегистра.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ТаблицаРегистра.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|	НЕОПРЕДЕЛЕНО КАК СлужебныйВидДеятельностиНДС,
	|	ТаблицаРегистра.Валюта КАК Валюта,
	|	ТаблицаРегистра.СуммаУпрКт КАК СуммаУпр,
	|	ТаблицаРегистра.СуммаРеглКт КАК СуммаРегл,
	|	ТаблицаРегистра.СуммаВалКт КАК СуммаВал,
	|	0 КАК Количество,
	|	ЛОЖЬ КАК РеквизитСторно
	|ИЗ
	|	&ИсточникДанных КАК ТаблицаРегистра
	|";
	
	Если ИмяРегистра = Метаданные.РегистрыНакопления.РасчетыСКлиентамиПоСрокам.Имя Тогда
		ИсточникДанных = "втРасчетыСКлиентамиПоСторно";
	Иначе
		ИсточникДанных = "втРасчетыСПоставщикамиПоСторно";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИсточникДанных", ИсточникДанных);
	
	ТекстЗапросаРегистра = ТекстЗапросаРегистра
		+ ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении()
		+ ТекстЗапроса;
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросовВариантовОтчетаАнализКорреспонденцийОперативногоУчета

Функция ТекстЗапросаОшибкиКорреспонденций()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка) КАК ПланСчетов,
	|	ЗНАЧЕНИЕ(Справочник.НастройкиФормированияПроводокМеждународногоУчета.ПустаяСсылка) КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраКт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраДт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка) КАК СтатусОтражения,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалДт
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалКт
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоДт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоДт
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоКт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоКт
	|	КОНЕЦ КАК КоличествоКт
	|ИЗ
	|	втДвиженияДебетКредит КАК ДвиженияДебетКредит
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ДвиженияДебетКредит.ИнвертироватьПроводку",
		"ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаАнализКорреспонденцийДляНастройки()
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраКт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ИмяРегистраДт
	|		ИНАЧЕ ДвиженияДебетКредит.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектУчетаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиКт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ОбъектНастройкиДт
	|		ИНАЧЕ ДвиженияДебетКредит.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаКт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА ДвиженияДебетКредит.ВалютаДт
	|		ИНАЧЕ ДвиженияДебетКредит.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаУпрКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаРеглКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалДт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалДт
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.СуммаВалКт
	|		ИНАЧЕ ДвиженияДебетКредит.СуммаВалКт
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоДт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоДт
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ДвиженияДебетКредит.ИнвертироватьПроводку
	|			ТОГДА -ДвиженияДебетКредит.КоличествоКт
	|		ИНАЧЕ ДвиженияДебетКредит.КоличествоКт
	|	КОНЕЦ КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияДебетКредит.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияДебетКредит.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияДебетКредит.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"ДвиженияДебетКредит.ИнвертироватьПроводку",
		"(ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт)
		|		И ДвиженияДебетКредит.НастройкаФормированияПроводок.СпособАннулированияПроводок
		|		<> ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)");
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ПодготовитьЗапросАнализаКорреспонденцийДляНастройкиСОтбором(Запрос, ТекстыЗапросов, ТекстыЗапросовРегистров, ДополнительныйОтбор)
	
	ПоляОтбораДт = Новый Массив();
	ПоляОтбораКт = Новый Массив();
	
	ЗаполнитьПоляЭлементовОтбора(ПоляОтбораДт, ДополнительныйОтбор.Элементы, "Дт");
	ЗаполнитьПоляЭлементовОтбора(ПоляОтбораКт, ДополнительныйОтбор.Элементы, "Кт");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
	|	ЛОЖЬ КАК ИнвертироватьПроводку,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт
	|ПОМЕСТИТЬ втОборотыДляНастройки
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияДебетКредит.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияДебетКредит.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияДебетКредит.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	НЕ (ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт)
	|	ИЛИ ДвиженияДебетКредит.НастройкаФормированияПроводок.СпособАннулированияПроводок = ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвиженияДебетКредит.ПланСчетов КАК ПланСчетов,
	|	ДвиженияДебетКредит.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаДт,
	|	ЗНАЧЕНИЕ(ПланСчетов.Международный.ПустаяСсылка) КАК СчетУчетаКт,
	|	ДвиженияДебетКредит.Период КАК Период,
	|	ДвиженияДебетКредит.ИмяРегистраКт КАК ИмяРегистраДт,
	|	ДвиженияДебетКредит.ИмяРегистраДт КАК ИмяРегистраКт,
	|	ДвиженияДебетКредит.ОбъектУчетаКт КАК ОбъектУчетаДт,
	|	ДвиженияДебетКредит.ОбъектУчетаДт КАК ОбъектУчетаКт,
	|	ДвиженияДебетКредит.ОбъектНастройкиКт КАК ОбъектНастройкиДт,
	|	ДвиженияДебетКредит.ОбъектНастройкиДт КАК ОбъектНастройкиКт,
	|	ИСТИНА КАК ИнвертироватьПроводку,
	|	ДвиженияДебетКредит.Организация КАК Организация,
	|	ДвиженияДебетКредит.Регистратор КАК Регистратор,
	|	ДвиженияДебетКредит.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияДебетКредит.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиКт КАК ИдентификаторСтрокиДт,
	|	ДвиженияДебетКредит.ИдентификаторСтрокиДт КАК ИдентификаторСтрокиКт,
	|	ДвиженияДебетКредит.ВалютаКт КАК ВалютаДт,
	|	ДвиженияДебетКредит.ВалютаДт КАК ВалютаКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	-ДвиженияДебетКредит.СуммаУпрДт КАК СуммаУпрДт,
	|	-ДвиженияДебетКредит.СуммаУпрКт КАК СуммаУпрКт,
	|	-ДвиженияДебетКредит.СуммаРеглДт КАК СуммаРеглДт,
	|	-ДвиженияДебетКредит.СуммаРеглКт КАК СуммаРеглКт,
	|	-ДвиженияДебетКредит.СуммаВалДт КАК СуммаВалДт,
	|	-ДвиженияДебетКредит.СуммаВалКт КАК СуммаВалКт,
	|	-ДвиженияДебетКредит.КоличествоДт КАК КоличествоДт,
	|	-ДвиженияДебетКредит.КоличествоКт КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетамиДебетКредит КАК ДвиженияДебетКредит
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияДебетКредит.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияДебетКредит.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияДебетКредит.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияДебетКредит.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|ГДЕ
	|	(ДвиженияДебетКредит.ЭтоСторноДт ИЛИ ДвиженияДебетКредит.ЭтоСторноКт)
	|	И ДвиженияДебетКредит.НастройкаФормированияПроводок.СпособАннулированияПроводок <> ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|ИНДЕКСИРОВАТЬ ПО
	|	ИмяРегистраДт,
	|	ИмяРегистраКт,
	|	ОбъектУчетаДт,
	|	ОбъектУчетаКт,
	|	ОбъектНастройкиДт,
	|	ОбъектНастройкиКт,
	|	Период,
	|	Регистратор,
	|	Организация,
	|	ИдентификаторФинЗаписи,
	|	ИдентификаторСтрокиДт,
	|	ИдентификаторСтрокиКт,
	|	НастройкаХозОперации
	|");
	
	ТекстыЗапросов.Добавить("
	|УНИЧТОЖИТЬ втДвиженияСоСчетамиДебетКредит");
	
	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДляНастройки.ИмяРегистраДт,
	|	ОборотыДляНастройки.ИмяРегистраКт
	|");

	ТекстыЗапросов.Добавить("
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраДт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистра
	|ИЗ
	|	втОборотыДляНастройки КАК ОборотыДляНастройки
	|	,
	|	(ВЫБРАТЬ
	|		&Дт КАК ДтКт
	|	ОБЪЕДИНИТЬ ВСЕ
	|	ВЫБРАТЬ
	|		&Кт КАК ДтКт
	|	) КАК ЧастиДвойнойЗаписи
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ЧастиДвойнойЗаписи.ДтКт = &Дт
	|			ТОГДА ОборотыДляНастройки.ИмяРегистраДт
	|		ИНАЧЕ ОборотыДляНастройки.ИмяРегистраКт
	|	КОНЕЦ
	|");
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	РезультатОборотыРегистров = Результаты[Результаты.ВГраница() - 1];
	РезультатИменаРегистров = Результаты[Результаты.ВГраница()];
	
	ВыборкаОборотыРегистров = РезультатОборотыРегистров.Выбрать();
	ВыборкаИмяРегистра = РезультатИменаРегистров.Выбрать();
	
	ДоступныеПоляРегистров = Новый Структура();
	УдаляемыеПоляВыборки = УдаляемыеПоляВыборкиЗапросовАналитикиДвижений();
	ПоляИндексирования = ПоляИндексаЗапросовОтдельныхКорреспонденций();
	РегистрыВосстановленияРасчетовПоСторно = РегистрыВосстановленияРасчетовПоСторно();
	
	Пока ВыборкаИмяРегистра.Следующий() Цикл
		Если ПустаяСтрока(ВыборкаИмяРегистра.ИмяРегистра)
		 ИЛИ ВыборкаИмяРегистра.ИмяРегистра = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПолейАналитики = Новый Массив();
		СтрокиГруппАналитики = Новый Массив();
		ДоступныеПоляРегистра = Новый Массив();
		
		ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики,
			ДоступныеПоляРегистра, ВыборкаИмяРегистра.ИмяРегистра);
		
		ТекстЗапросаРегистра = ТекстыЗапросовРегистров[ВыборкаИмяРегистра.ИмяРегистра];
		Если РегистрыВосстановленияРасчетовПоСторно.Найти(ВыборкаИмяРегистра.ИмяРегистра) <> Неопределено Тогда
			ДобавитьТаблицуВосстановленияРасчетовПоСторно(ТекстЗапросаРегистра, ВыборкаИмяРегистра.ИмяРегистра);
		КонецЕсли;
		ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра);
		
		ТаблицаДляПомещения = "вт" + ВыборкаИмяРегистра.ИмяРегистра;
		ИзменитьСоставПолейВыборки(ТекстЗапросаРегистра, УдаляемыеПоляВыборки, ПоляИндексирования, ТаблицаДляПомещения);
		
		ТекстыЗапросов.Добавить(ТекстЗапросаРегистра);
		ДоступныеПоляРегистров.Вставить(ВыборкаИмяРегистра.ИмяРегистра, ДоступныеПоляРегистра);
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() > 0 Тогда
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
	КонецЕсли;
	
	Пока ВыборкаОборотыРегистров.Следующий() Цикл
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
		|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ОборотыДляНастройки.СчетУчетаДт КАК СчетУчетаДт,
		|	ОборотыДляНастройки.СчетУчетаКт КАК СчетУчетаКт,
		|	ОборотыДляНастройки.Период КАК Период,
		|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
		|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
		|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
		|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
		|	ОборотыДляНастройки.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
		|	ОборотыДляНастройки.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
		|	ОборотыДляНастройки.Организация КАК Организация,
		|	ОборотыДляНастройки.Регистратор КАК Регистратор,
		|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
		|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
		|	ОборотыДляНастройки.СтатусОтражения КАК СтатусОтражения,
		|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
		|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
		|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
		|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
		|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
		|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
		|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
		|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт,
		|	&ПоляОтбораТаблицыДт,
		|	&ПоляОтбораТаблицыКт
		|ИЗ
		|	втОборотыДляНастройки КАК ОборотыДляНастройки
		|";
		
		Если ПоляОтбораДт.Количество() > 0
			И НЕ ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраДт)
			И НЕ ВыборкаОборотыРегистров.ИмяРегистраДт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаДт КАК ТаблицаДт
			|		ПО ОборотыДляНастройки.ИмяРегистраДт = &ИмяРегистраДт
			|		 И ОборотыДляНастройки.ОбъектУчетаДт = ТаблицаДт.ОбъектУчета
			|		 И ОборотыДляНастройки.ОбъектНастройкиДт = ТаблицаДт.ОбъектНастройки
			|		 И ОборотыДляНастройки.Период = ТаблицаДт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаДт.Регистратор
			|		 И ВЫБОР
			|			КОГДА &ИмяРегистраДт В (&РегистрыБезОрганизации)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ОборотыДляНастройки.Организация = ТаблицаДт.Организация
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаДт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиДт = ТаблицаДт.ИдентификаторСтроки
			|		 И ВЫБОР
			|			КОГДА ТаблицаДт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаДт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаДт.ЭтоДебет
			|			ИНАЧЕ НЕ ТаблицаДт.ЭтоКредит
			|		 КОНЕЦ
			|";
		КонецЕсли;
			
		Если ПоляОтбораКт.Количество() > 0
			И НЕ ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраКт)
			И НЕ ВыборкаОборотыРегистров.ИмяРегистраКт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &ТаблицаКт КАК ТаблицаКт
			|		ПО ОборотыДляНастройки.ИмяРегистраКт = &ИмяРегистраКт
			|		 И ОборотыДляНастройки.ОбъектУчетаКт = ТаблицаКт.ОбъектУчета
			|		 И ОборотыДляНастройки.ОбъектНастройкиКт = ТаблицаКт.ОбъектНастройки
			|		 И ОборотыДляНастройки.Период = ТаблицаКт.Период
			|		 И ОборотыДляНастройки.Регистратор = ТаблицаКт.Регистратор
			|		 И ВЫБОР
			|			КОГДА &ИмяРегистраКт В (&РегистрыБезОрганизации)
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ОборотыДляНастройки.Организация = ТаблицаКт.Организация
			|		 КОНЕЦ
			|		 И ОборотыДляНастройки.ИдентификаторФинЗаписи = ТаблицаКт.ИдентификаторФинЗаписи
			|		 И ОборотыДляНастройки.ИдентификаторСтрокиКт = ТаблицаКт.ИдентификаторСтроки
			|		 И ВЫБОР
			|			КОГДА ТаблицаКт.НастройкаХозОперации <> ЗНАЧЕНИЕ(Справочник.НастройкиХозяйственныхОпераций.ПустаяСсылка)
			|				ТОГДА ОборотыДляНастройки.НастройкаХозОперации = ТаблицаКт.НастройкаХозОперации
			|			ИНАЧЕ ИСТИНА
			|		 КОНЕЦ
			|		 И ВЫБОР
			|			КОГДА ОборотыДляНастройки.ИнвертироватьПроводку
			|				ТОГДА НЕ ТаблицаКт.ЭтоКредит
			|			ИНАЧЕ НЕ ТаблицаКт.ЭтоДебет
			|		 КОНЕЦ
			|";
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаДт", СтрШаблон("вт%1", ВыборкаОборотыРегистров.ИмяРегистраДт));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТаблицаКт", СтрШаблон("вт%1", ВыборкаОборотыРегистров.ИмяРегистраКт));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраДт", СтрШаблон("""%1""", ВыборкаОборотыРегистров.ИмяРегистраДт));
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяРегистраКт", СтрШаблон("""%1""", ВыборкаОборотыРегистров.ИмяРегистраКт));
		
		Если ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраДт)
		 ИЛИ ВыборкаОборотыРегистров.ИмяРегистраДт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ДоступныеПоляРегистраДт = Новый Массив();
		Иначе
			ДоступныеПоляРегистраДт = ДоступныеПоляРегистров[ВыборкаОборотыРегистров.ИмяРегистраДт];
		КонецЕсли;
		
		Если ПустаяСтрока(ВыборкаОборотыРегистров.ИмяРегистраКт)
		 ИЛИ ВыборкаОборотыРегистров.ИмяРегистраКт = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			ДоступныеПоляРегистраКт = Новый Массив();
		Иначе
			ДоступныеПоляРегистраКт = ДоступныеПоляРегистров[ВыборкаОборотыРегистров.ИмяРегистраКт];
		КонецЕсли;
		
		ДобавитьПоляОтбораВТекстЗапроса(ПоляОтбораДт, ДоступныеПоляРегистраДт, ТекстЗапроса, "Дт");
		ДобавитьПоляОтбораВТекстЗапроса(ПоляОтбораКт, ДоступныеПоляРегистраКт, ТекстЗапроса, "Кт");
		
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЦикла;
	
	Если ТекстыЗапросов.Количество() = 0 Тогда
		ТекстыЗапросов.Добавить("
		|ВЫБРАТЬ
		|	ОборотыДляНастройки.ПланСчетов КАК ПланСчетов,
		|	ОборотыДляНастройки.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
		|	ОборотыДляНастройки.СчетУчетаДт КАК СчетУчетаДт,
		|	ОборотыДляНастройки.СчетУчетаКт КАК СчетУчетаКт,
		|	ОборотыДляНастройки.Период КАК Период,
		|	ОборотыДляНастройки.ИмяРегистраДт КАК ИмяРегистраДт,
		|	ОборотыДляНастройки.ИмяРегистраКт КАК ИмяРегистраКт,
		|	ОборотыДляНастройки.ОбъектУчетаДт КАК ОбъектУчетаДт,
		|	ОборотыДляНастройки.ОбъектУчетаКт КАК ОбъектУчетаКт,
		|	ОборотыДляНастройки.ОбъектНастройкиДт КАК ОбъектНастройкиДт,
		|	ОборотыДляНастройки.ОбъектНастройкиКт КАК ОбъектНастройкиКт,
		|	ОборотыДляНастройки.Организация КАК Организация,
		|	ОборотыДляНастройки.Регистратор КАК Регистратор,
		|	ОборотыДляНастройки.НастройкаХозОперации КАК НастройкаХозОперации,
		|	ОборотыДляНастройки.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
		|	ОборотыДляНастройки.ВалютаДт КАК ВалютаДт,
		|	ОборотыДляНастройки.ВалютаКт КАК ВалютаКт,
		|	ОборотыДляНастройки.СтатусОтражения КАК СтатусОтражения,
		|	ОборотыДляНастройки.СуммаУпрДт КАК СуммаУпрДт,
		|	ОборотыДляНастройки.СуммаУпрКт КАК СуммаУпрКт,
		|	ОборотыДляНастройки.СуммаРеглДт КАК СуммаРеглДт,
		|	ОборотыДляНастройки.СуммаРеглКт КАК СуммаРеглКт,
		|	ОборотыДляНастройки.СуммаВалДт КАК СуммаВалДт,
		|	ОборотыДляНастройки.СуммаВалКт КАК СуммаВалКт,
		|	ОборотыДляНастройки.КоличествоДт КАК КоличествоДт,
		|	ОборотыДляНастройки.КоличествоКт КАК КоличествоКт
		|ИЗ
		|	втОборотыДляНастройки КАК ОборотыДляНастройки
		|");
		
		ТекстыЗапросов.Добавить("
		|УНИЧТОЖИТЬ втОборотыДляНастройки");
		
		Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
		Результаты = Запрос.ВыполнитьПакет();
		ТекстыЗапросов.Очистить();
		
		ОборотыДляНастройки = Результаты[0].Выгрузить();
		
		ТипыПолейОтбораДт = ТипыПолейОтбора(ПоляОтбораДт);
		ТипыПолейОтбораКт = ТипыПолейОтбора(ПоляОтбораКт);
		
		Для Каждого КлючИЗначение Из ТекстыЗапросовРегистров Цикл
			МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрНакопления." + КлючИЗначение.Ключ); // РегистрНакопленияМенеджер -
			ПараметрыОтражения = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
			ИсточникиСубконто = ПараметрыОтражения.ИсточникиСубконто;
			
			ДобавитьТипыПолейОтбораИзИсточниковСубконто(ПоляОтбораДт, ТипыПолейОтбораДт, ИсточникиСубконто);
			ДобавитьТипыПолейОтбораИзИсточниковСубконто(ПоляОтбораКт, ТипыПолейОтбораКт, ИсточникиСубконто);
		КонецЦикла;
		
		ДобавитьПоляОтбораВКолонкиТаблицы(ТипыПолейОтбораДт, ОборотыДляНастройки.Колонки, "Дт");
		ДобавитьПоляОтбораВКолонкиТаблицы(ТипыПолейОтбораКт, ОборотыДляНастройки.Колонки, "Кт");
		
		ТекстВыборкиПолей = "";
		РазделительСтрок = "," + Символы.ПС + Символы.Таб;
		
		Для Каждого Колонка Из ОборотыДляНастройки.Колонки Цикл
			Если НЕ ПустаяСтрока(ТекстВыборкиПолей) Тогда
				ТекстВыборкиПолей = ТекстВыборкиПолей + РазделительСтрок;
			КонецЕсли;
			ТекстВыборкиПолей = ТекстВыборкиПолей + "ОборотыДляНастройки." + Колонка.Имя;
		КонецЦикла;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ТекстВыборкиПолей
		|ПОМЕСТИТЬ втОборотыДляНастройки
		|ИЗ
		|	&ОборотыДляНастройки КАК ОборотыДляНастройки
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиПолей", ТекстВыборкиПолей);
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ОборотыДляНастройки", ОборотыДляНастройки);
		Результат = Запрос.Выполнить();
		
		Если ПоляОтбораДт.Найти("ТипРегистратора") <> Неопределено Тогда
			СтрокаВыборкиПоля = "ТИПЗНАЧЕНИЯ(ОборотыДляНастройки.РегистраторДт) КАК ТипРегистратораДт";
			ТекстВыборкиПолей = ТекстВыборкиПолей + РазделительСтрок + СтрокаВыборкиПоля;
		КонецЕсли;
		
		Если ПоляОтбораКт.Найти("ТипРегистратора") <> Неопределено Тогда
			СтрокаВыборкиПоля = "ТИПЗНАЧЕНИЯ(ОборотыДляНастройки.РегистраторКт) КАК ТипРегистратораКт";
			ТекстВыборкиПолей = ТекстВыборкиПолей + РазделительСтрок + СтрокаВыборкиПоля;
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	&ТекстВыборкиПолей
		|ИЗ
		|	втОборотыДляНастройки КАК ОборотыДляНастройки
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстВыборкиПолей", ТекстВыборкиПолей);
		ТекстыЗапросов.Добавить(ТекстЗапроса);
	КонецЕсли;
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
КонецПроцедуры

Функция ТекстЗапросаПолныйАнализКорреспонденций()
		
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ДвиженияСоСчетами.ПланСчетов КАК ПланСчетов,
	|	ДвиженияСоСчетами.НастройкаФормированияПроводок КАК НастройкаФормированияПроводок,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаКт
	|		ИНАЧЕ ДвиженияСоСчетами.СчетУчетаДт
	|	КОНЕЦ КАК СчетУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.СчетУчетаДт
	|		ИНАЧЕ ДвиженияСоСчетами.СчетУчетаКт
	|	КОНЕЦ КАК СчетУчетаКт,
	|	ДвиженияСоСчетами.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ИмяРегистраКт
	|		ИНАЧЕ ДвиженияСоСчетами.ИмяРегистраДт
	|	КОНЕЦ КАК ИмяРегистраДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ИмяРегистраДт
	|		ИНАЧЕ ДвиженияСоСчетами.ИмяРегистраКт
	|	КОНЕЦ КАК ИмяРегистраКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаКт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектУчетаДт
	|	КОНЕЦ КАК ОбъектУчетаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектУчетаДт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектУчетаКт
	|	КОНЕЦ КАК ОбъектУчетаКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектНастройкиКт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектНастройкиДт
	|	КОНЕЦ КАК ОбъектНастройкиДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ОбъектНастройкиДт
	|		ИНАЧЕ ДвиженияСоСчетами.ОбъектНастройкиКт
	|	КОНЕЦ КАК ОбъектНастройкиКт,
	|	ДвиженияСоСчетами.Организация КАК Организация,
	|	ДвиженияСоСчетами.Регистратор КАК Регистратор,
	|	ДвиженияСоСчетами.НастройкаХозОперации КАК НастройкаХозОперации,
	|	ДвиженияСоСчетами.ИдентификаторФинЗаписи КАК ИдентификаторФинЗаписи,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ВалютаКт
	|		ИНАЧЕ ДвиженияСоСчетами.ВалютаДт
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку
	|			ТОГДА ДвиженияСоСчетами.ВалютаДт
	|		ИНАЧЕ ДвиженияСоСчетами.ВалютаКт
	|	КОНЕЦ КАК ВалютаКт,
	|	ЕСТЬNULL(СтатусыОтражения.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ПустаяСсылка)) КАК СтатусОтражения,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрДт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.СуммаУпрДт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаУпрДт
	|	КОНЕЦ КАК СуммаУпрДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.СуммаУпрКт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.СуммаУпрКт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаУпрКт
	|	КОНЕЦ КАК СуммаУпрКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглДт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.СуммаРеглДт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаРеглДт
	|	КОНЕЦ КАК СуммаРеглДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.СуммаРеглКт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.СуммаРеглКт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаРеглКт
	|	КОНЕЦ КАК СуммаРеглКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.СуммаВалДт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.СуммаВалДт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаВалДт
	|	КОНЕЦ КАК СуммаВалДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.СуммаВалКт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.СуммаВалКт
	|		ИНАЧЕ ДвиженияСоСчетами.СуммаВалКт
	|	КОНЕЦ КАК СуммаВалКт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.КоличествоДт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.КоличествоДт
	|		ИНАЧЕ ДвиженияСоСчетами.КоличествоДт
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку И ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА ДвиженияСоСчетами.КоличествоКт
	|		КОГДА ДвиженияСоСчетами.ИнвертироватьПроводку ИЛИ ДвиженияСоСчетами.ИнвертироватьЗнакРесурсов
	|			ТОГДА -ДвиженияСоСчетами.КоличествоКт
	|		ИНАЧЕ ДвиженияСоСчетами.КоличествоКт
	|	КОНЕЦ КАК КоличествоКт
	|ИЗ
	|	втДвиженияСоСчетами КАК ДвиженияСоСчетами
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|		ПО ДвиженияСоСчетами.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		 И ДвиженияСоСчетами.Организация = СтатусыОтражения.Организация
	|		 И ДвиженияСоСчетами.Регистратор = СтатусыОтражения.Регистратор
	|		 И НАЧАЛОПЕРИОДА(ДвиженияСоСчетами.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(СтатусыОтражения.ДатаОтражения, ДЕНЬ)
	|";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииФормированияТекстовЗапросов

Процедура ИсключитьРегистрыПоКоллекциямДвиженийРегистраторов(ПараметрыЗапроса, ОстаточныеФинансовыеРегистры)
	
	ПараметрРегистратор = Неопределено;
	ПараметрТипРегистратора = Неопределено;
	
	Если НЕ ПараметрыЗапроса.Свойство("Регистратор", ПараметрРегистратор)
	   И НЕ ПараметрыЗапроса.Свойство("ТипРегистратора", ПараметрТипРегистратора) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрРегистратор) = Тип("Массив") Тогда
		ТипыРегистраторов = Новый Массив();
		Для Каждого Регистратор Из ПараметрРегистратор Цикл
			ТипРегистратора = ТипЗнч(Регистратор);
			Если ТипыРегистраторов.Найти(ТипРегистратора) = Неопределено Тогда
				ТипыРегистраторов.Добавить(ТипРегистратора);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ЗначениеЗаполнено(ПараметрРегистратор) Тогда 
		ТипыРегистраторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипЗнч(ПараметрРегистратор));
	ИначеЕсли ТипЗнч(ПараметрТипРегистратора) = Тип("Массив") Тогда
		ТипыРегистраторов = ПараметрТипРегистратора;
	Иначе
		ТипыРегистраторов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрТипРегистратора);
	КонецЕсли;
	
	РегистрыНакопленияМетаданные = Метаданные.РегистрыНакопления;
	ВсеРегистрыНакопления = Новый Соответствие();
	
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		ДокументМетаданные = Метаданные.НайтиПоТипу(ТипРегистратора);
		Для Каждого РегистрМетаданные Из ДокументМетаданные.Движения Цикл
			Если РегистрыНакопленияМетаданные.Содержит(РегистрМетаданные) Тогда
				ИмяРегистра = РегистрМетаданные.Имя;
				Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОстаточныйФинансовыйРегистр Из ОстаточныеФинансовыеРегистры Цикл
		ИмяРегистра = ОстаточныйФинансовыйРегистр.ИсточникДанных;
		МетаданныеРегистра = РегистрыНакопленияМетаданные[ИмяРегистра];
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеРегистра.ПолноеИмя());
		ПараметрыОтраженияДвижений = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете();
		Если ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор <> "Регистратор" Тогда
			РеквизитРегистратор = МетаданныеРегистра.Реквизиты[ПараметрыОтраженияДвижений.ПутьКДаннымРегистратор];
			Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
				Если РеквизитРегистратор.Тип.СодержитТип(ТипРегистратора) Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = ОстаточныеФинансовыеРегистры.Количество();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИндексСтроки = КоличествоСтрок - НомерСтроки;
		ИмяРегистра = ОстаточныеФинансовыеРегистры[ИндексСтроки].ИсточникДанных;
		Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
			ОстаточныеФинансовыеРегистры.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьРегистрыПоКорреспонденциямОбъектовУчета(ПараметрыЗапроса, ОстаточныеФинансовыеРегистры, ОбъектыБухгалтерскогоУчета)
	
	// Отбор регистров по объектам учета некрасиво показывает сложные проводки в отчетах
	Возврат;
	
	ОбъектУчетаДт = Неопределено;
	ОбъектУчетаКт = Неопределено;
	
	Если НЕ ПараметрыЗапроса.Свойство("ОбъектУчетаДт", ОбъектУчетаДт)
	 ИЛИ НЕ ПараметрыЗапроса.Свойство("ОбъектУчетаКт", ОбъектУчетаКт) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектУчетаДт) = Тип("Массив") Тогда
		ОбъектыУчетаДт = ОбъектУчетаДт;
	ИначеЕсли ЗначениеЗаполнено(ОбъектУчетаДт) Тогда
		ОбъектыУчетаДт = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчетаДт);
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектУчетаКт) = Тип("Массив") Тогда
		ОбъектыУчетаКт = ОбъектУчетаКт;
	ИначеЕсли ЗначениеЗаполнено(ОбъектУчетаКт) Тогда
		ОбъектыУчетаКт = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ОбъектУчетаКт);
	Иначе
		Возврат;
	КонецЕсли;
	
	ВсеРегистрыНакопления = Новый Соответствие();
	
	Для Каждого ОбъектУчета Из ОбъектыУчетаДт Цикл
		СтрокиОбъектаУчета = ОбъектыБухгалтерскогоУчета.НайтиСтроки(Новый Структура("ОбъектУчета", ОбъектУчета));
		Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектаУчета Цикл
			ИмяРегистра = СтрокаОбъектаУчета.ИсточникДанных;
			Если НЕ ПустаяСтрока(ИмяРегистра) Тогда
				Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ОбъектУчета Из ОбъектыУчетаКт Цикл
		СтрокиОбъектаУчета = ОбъектыБухгалтерскогоУчета.НайтиСтроки(Новый Структура("ОбъектУчета", ОбъектУчета));
		Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектаУчета Цикл
			ИмяРегистра = СтрокаОбъектаУчета.ИсточникДанных;
			Если НЕ ПустаяСтрока(ИмяРегистра) Тогда
				Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
					ВсеРегистрыНакопления.Вставить(ИмяРегистра, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ВсеРегистрыНакопления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоСтрок = ОстаточныеФинансовыеРегистры.Количество();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИндексСтроки = КоличествоСтрок - НомерСтроки;
		ИмяРегистра = ОстаточныеФинансовыеРегистры[ИндексСтроки].ИсточникДанных;
		Если ВсеРегистрыНакопления[ИмяРегистра] = Неопределено Тогда
			ОстаточныеФинансовыеРегистры.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИсключитьОбъектыУчетаПоФункциональнымОпциям(СтрокиОбъектовУчета)
	
	КоличествоСтрок = СтрокиОбъектовУчета.Количество();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		ИндексСтроки = КоличествоСтрок - НомерСтроки;
		ОписаниеОбъектаУчета = СтрокиОбъектовУчета[ИндексСтроки];
		Если НЕ Перечисления.ОбъектыБухгалтерскогоУчета.ОбъектУчетаДоступенПоФункциональнымОпциям(ОписаниеОбъектаУчета) Тогда
			СтрокиОбъектовУчета.Удалить(ИндексСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ИзменитьСоставПолейВыборки(ТекстЗапроса, УдаляемыеПоля, ПоляИндекса = Неопределено, ТаблицаДляПомещения = "")
	
	СхемаЗапроса = Новый СхемаЗапроса();
	ПакетЗапросов = СхемаЗапроса.ПакетЗапросов[0];
	ПакетЗапросов.УстановитьТекстЗапроса(ТекстЗапроса);
	
	Для Каждого ПсевдонимПоля Из УдаляемыеПоля Цикл
		ИндексКолонки = ПакетЗапросов.Колонки.Индекс(ПакетЗапросов.Колонки.Найти(ПсевдонимПоля));
		ПакетЗапросов.Колонки.Удалить(ИндексКолонки);
	КонецЦикла;
	
	Если ПоляИндекса <> Неопределено Тогда
		Для Каждого ПсевдонимПоля Из ПоляИндекса Цикл
			ПакетЗапросов.Индекс.Добавить(ПсевдонимПоля);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТаблицаДляПомещения) Тогда
		ПакетЗапросов.ТаблицаДляПомещения = ТаблицаДляПомещения;
	ИначеЕсли НЕ ПустаяСтрока(ПакетЗапросов.ТаблицаДляПомещения) Тогда
		ПакетЗапросов.ТаблицаДляПомещения = "";
	КонецЕсли;

	ТекстЗапроса = ПакетЗапросов.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция УдаляемыеПоляВыборкиЗапросовАналитикиДвижений()
	
	УдаляемыеПоля = Новый Массив();
	УдаляемыеПоля.Добавить("МестоУчета");
	УдаляемыеПоля.Добавить("ЭтоСторно");
	УдаляемыеПоля.Добавить("СлужебныйВидДеятельностиНДС");
	УдаляемыеПоля.Добавить("РеквизитСторно");
	
	Возврат УдаляемыеПоля;
	
КонецФункции

Функция ПоляИндексаЗапросовОтдельныхКорреспонденций()
	
	ПоляИндекса = Новый Массив();
	ПоляИндекса.Добавить("Период");
	ПоляИндекса.Добавить("ОбъектУчета");
	ПоляИндекса.Добавить("ОбъектНастройки");
	ПоляИндекса.Добавить("Регистратор");
	ПоляИндекса.Добавить("Организация");
	ПоляИндекса.Добавить("ИдентификаторФинЗаписи");
	ПоляИндекса.Добавить("ИдентификаторСтроки");
	ПоляИндекса.Добавить("НастройкаХозОперации");
	
	Возврат ПоляИндекса;
	
КонецФункции

Функция СтрокаВыборкиОбъектаУчета(СтрокиОбъектовУчета, ПараметрыЗапроса)
	
	СтрокиВыбора = Новый Массив();
	ОбъектыБезОтбора = Новый Массив();
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		Если ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			СтрокиКогда = Новый Массив();
			СтрокиКогда.Добавить(Символы.Таб);
			СтрокиКогда.Добавить("КОГДА"); //@Query-part
			СтрокиКогда.Добавить(СтрокаУсловияВыборкиДанных(СтрокаОбъектаУчета.ОтборДанных, ПараметрыЗапроса));
			
			СтрокиТогда = Новый Массив();
			СтрокиТогда.Добавить(Символы.Таб);
			СтрокиТогда.Добавить("ТОГДА"); //@Query-part
			СтрокиТогда.Добавить(СтрокаВыборкиЗначения(СтрокаОбъектаУчета.ОбъектУчета));
			
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
		Иначе
			ОбъектыБезОтбора.Добавить(СтрокаОбъектаУчета);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиВыбора.Количество() = 0 И ОбъектыБезОтбора.Количество() = 0 Тогда
		СтрокаВыборки = СтрокаВыборкиЗначения(Перечисления.ОбъектыБухгалтерскогоУчета.ПустаяСсылка());
	ИначеЕсли ОбъектыБезОтбора.Количество() > 1 Тогда
		СтрокиИсключения = Новый Массив();
		СтрокиИсключения.Добавить("ru = 'Для регистра %1 описано более одного объекта бухгалтерского учета без указания отбора выборки данных:'");
		Для Каждого СтрокаОбъектаУчета Из ОбъектыБезОтбора Цикл
			СтрокиИсключения[0] = СтрЗаменить(СтрокиИсключения[0], "%1", СтрокаОбъектаУчета.ИсточникДанных);
			СтрокиИсключения.Добавить(СтрокаОбъектаУчета.ОбъектУчета);
		КонецЦикла;
		ВызватьИсключение СтрСоединить(СтрокиИсключения, Символы.ПС);
	ИначеЕсли СтрокиВыбора.Количество() = 0 Тогда
		СтрокаВыборки = СтрокаВыборкиЗначения(ОбъектыБезОтбора[0].ОбъектУчета);
	Иначе
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		Если ОбъектыБезОтбора.Количество() = 0 Тогда
			СтрокиИначе.Добавить(СтрокаВыборкиЗначения(Перечисления.ОбъектыБухгалтерскогоУчета.ПустаяСсылка()));
		Иначе
			СтрокиИначе.Добавить(СтрокаВыборкиЗначения(ОбъектыБезОтбора[0].ОбъектУчета));
		КонецЕсли;
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиПоляОбъектаУчета(СвойствоПутьКДанным, СтрокиОбъектовУчета, ПараметрыОтраженияДвижений,
	ПараметрыЗапроса, НеопределенноеЗначение)
	
	ПутиКДаннымОбъектовУчета = Новый Соответствие();
	ПутьКДаннымБезОтбора = Неопределено;
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		ПутьКДанным = СтрокаОбъектаУчета[СвойствоПутьКДанным];
		Если ПутиКДаннымОбъектовУчета[ПутьКДанным] = Неопределено Тогда
			ПутиКДаннымОбъектовУчета.Вставить(ПутьКДанным, Новый Массив());
		КонецЕсли;
		ПутиКДаннымОбъектовУчета[ПутьКДанным].Добавить(СтрокаОбъектаУчета);
		Если НЕ ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			ПутьКДаннымБезОтбора = ПутьКДанным;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиВыбора = Новый Массив();
	
	Для Каждого ПутьКДаннымОбъектовУчета Из ПутиКДаннымОбъектовУчета Цикл
		Если ПутьКДаннымБезОтбора = Неопределено И ПустаяСтрока(ПутьКДаннымОбъектовУчета.Ключ) Тогда
			Продолжить;
		ИначеЕсли ПутьКДаннымОбъектовУчета.Ключ = ПутьКДаннымБезОтбора Тогда
			Продолжить;
		КонецЕсли;
		
		ГруппаОтборов = Новый Массив();
		Для Каждого СтрокаОбъектаУчета Из ПутьКДаннымОбъектовУчета.Значение Цикл
			ГруппаОтборов.Добавить(СтрокаОбъектаУчета.ОтборДанных);
		КонецЦикла;
		
		СтрокиКогда = Новый Массив();
		СтрокиКогда.Добавить(Символы.Таб);
		СтрокиКогда.Добавить("КОГДА"); //@Query-part
		СтрокиКогда.Добавить(СтрокаУсловияВыборкиДанных(ГруппаОтборов, ПараметрыЗапроса));
		
		СтрокиТогда = Новый Массив();
		СтрокиТогда.Добавить(Символы.Таб);
		СтрокиТогда.Добавить("ТОГДА"); //@Query-part
		Если НЕ ПустаяСтрока(ПутьКДаннымОбъектовУчета.Ключ) Тогда
			СтрокиТогда.Добавить(ПутьКДаннымОбъектовУчета.Ключ);
		ИначеЕсли НЕ ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
			СтрокиТогда.Добавить(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]);
		Иначе
			СтрокиТогда.Добавить(СтрокаВыборкиЗначения(НеопределенноеЗначение));
		КонецЕсли;
		
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
	КонецЦикла;
	
	Если СтрокиВыбора.Количество() > 0 Тогда
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		Если ЗначениеЗаполнено(ПутьКДаннымБезОтбора) Тогда
			СтрокиИначе.Добавить(ПутьКДаннымБезОтбора);
		ИначеЕсли НЕ ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
			СтрокиИначе.Добавить(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]);
		Иначе
			СтрокиИначе.Добавить(СтрокаВыборкиЗначения(НеопределенноеЗначение));
		КонецЕсли;
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	ИначеЕсли ЗначениеЗаполнено(ПутьКДаннымБезОтбора) Тогда
		СтрокаВыборки = ПутьКДаннымБезОтбора;
	ИначеЕсли НЕ ПустаяСтрока(ПараметрыОтраженияДвижений[СвойствоПутьКДанным]) Тогда
		СтрокаВыборки = ПараметрыОтраженияДвижений[СвойствоПутьКДанным];
	Иначе
		СтрокаВыборки = СтрокаВыборкиЗначения(НеопределенноеЗначение);
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиСубконто(ВидСубконто, ТипЗначенияСубконто, ИмяРегистра, СтрокиОбъектовУчета)
	
	СтрокиВыбора = Новый Массив();
	
	ПутьКДаннымСубконтоБезОтбора = "";
	ОтборыДанныхБезПутейСубконто = Новый Массив();
	
	Для Каждого СтрокаОбъектаУчета Из СтрокиОбъектовУчета Цикл
		ПутьКДаннымСубконто = СтрокаОбъектаУчета.ПутиКДаннымСубконто[ВидСубконто];
		Если ПутьКДаннымСубконто <> Неопределено Тогда
			ПутьКДаннымСубконто = "ТаблицаРегистра." + ПутьКДаннымСубконто;
			Если ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
				СтрокиКогда = Новый Массив();
				СтрокиКогда.Добавить(Символы.Таб);
				СтрокиКогда.Добавить("КОГДА"); //@Query-part
				СтрокиКогда.Добавить(СтрокаУсловияВыборкиДанных(СтрокаОбъектаУчета.ОтборДанных));
				
				СтрокиТогда = Новый Массив();
				СтрокиТогда.Добавить(Символы.Таб);
				СтрокиТогда.Добавить("ТОГДА"); //@Query-part
				СтрокиТогда.Добавить(ПутьКДаннымСубконто);
				
				СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
				СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
			Иначе
				ПутьКДаннымСубконтоБезОтбора = ПутьКДаннымСубконто;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаОбъектаУчета.ОтборДанных) Тогда
			ОтборыДанныхБезПутейСубконто.Добавить(СтрокаУсловияВыборкиДанных(СтрокаОбъектаУчета.ОтборДанных));
		КонецЕсли;
	КонецЦикла;
	
	ПодобратьПоляРегистраПоТипуСубконто = НЕ ПустаяСтрока(ИмяРегистра);
	
	Если НЕ ПустаяСтрока(ПутьКДаннымСубконтоБезОтбора) Тогда
		СтрокиКогда = Новый Массив();
		СтрокиКогда.Добавить(Символы.Таб);
		СтрокиКогда.Добавить("КОГДА"); //@Query-part
		
		Если ОтборыДанныхБезПутейСубконто.Количество() > 0 Тогда
			СтрокиКогда.Добавить("НЕ ("); //@Query-part
			СтрокиКогда.Добавить(СтрСоединить(ОтборыДанныхБезПутейСубконто, " ИЛИ ")); //@Query-part
			СтрокиКогда.Добавить(")");
		Иначе
			СтрокиКогда.Добавить("ИСТИНА"); //@Query-part
			ПодобратьПоляРегистраПоТипуСубконто = Ложь;
		КонецЕсли;
		
		СтрокиТогда = Новый Массив();
		СтрокиТогда.Добавить(Символы.Таб);
		СтрокиТогда.Добавить("ТОГДА"); //@Query-part
		СтрокиТогда.Добавить(ПутьКДаннымСубконтоБезОтбора);
		
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
	КонецЕсли;
	
	Если ПодобратьПоляРегистраПоТипуСубконто Тогда
		ОписаниеПолейРегистра = ПоляРегистраПоТипуСубконто(ТипЗначенияСубконто, ИмяРегистра);
		
		Для Каждого ОписаниеПоля Из ОписаниеПолейРегистра Цикл
			ПутьКДанным = "ТаблицаРегистра." + ОписаниеПоля.ПутьКДанным;
			
			СтрокиКогда = Новый Массив();
			СтрокиКогда.Добавить(Символы.Таб);
			СтрокиКогда.Добавить("КОГДА НЕ"); //@Query-part
			СтрокиКогда.Добавить(ПутьКДанным);
			СтрокиКогда.Добавить("В ("); //@Query-part
			СтрокиКогда.Добавить(СтрокаВыборкиЗначения(ПустыеЗначенияТипа(ОписаниеПоля.Тип)));
			СтрокиКогда.Добавить(") И ТИПЗНАЧЕНИЯ("); //@Query-part
			СтрокиКогда.Добавить(ПутьКДанным);
			СтрокиКогда.Добавить(") В ("); //@Query-part
			СтрокиКогда.Добавить(СтрокаВыборкиЗначения(ТипЗначенияСубконто.Типы()));
			СтрокиКогда.Добавить(")");
			
			СтрокиТогда = Новый Массив();
			СтрокиТогда.Добавить(Символы.Таб);
			СтрокиТогда.Добавить("ТОГДА"); //@Query-part
			СтрокиТогда.Добавить(ПутьКДанным);
				
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиКогда, " "));
			СтрокиВыбора.Добавить(СтрСоединить(СтрокиТогда, " "));
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокиВыбора.Количество() > 0 Тогда
		СтрокиИначе = Новый Массив();
		СтрокиИначе.Добавить(Символы.Таб);
		СтрокиИначе.Добавить("ИНАЧЕ"); //@Query-part
		СтрокиИначе.Добавить("НЕОПРЕДЕЛЕНО"); //@Query-part
		
		СтрокиКонец = Новый Массив();
		СтрокиКонец.Добавить(Символы.Таб);
		СтрокиКонец.Добавить("КОНЕЦ"); //@Query-part
		
		СтрокиВыбора.Вставить(0, "ВЫБОР"); //@Query-part
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиИначе, " "));
		СтрокиВыбора.Добавить(СтрСоединить(СтрокиКонец, ""));
		СтрокаВыборки = СтрСоединить(СтрокиВыбора, Символы.ПС);
	Иначе
		СтрокаВыборки = "НЕОПРЕДЕЛЕНО"; //@Query-part
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиЗначения(ЗначениеВыборки)
	
	ТипЗначенияВыборки = ТипЗнч(ЗначениеВыборки);
	
	Если ТипЗначенияВыборки = Тип("Неопределено") Тогда
		СтрокаВыборки = "НЕОПРЕДЕЛЕНО";
	ИначеЕсли ТипЗначенияВыборки = Тип("Число") Тогда
		СтрокаВыборки = Формат(ЗначениеВыборки, "ЧРД=.; ЧГ=0");
	ИначеЕсли ТипЗначенияВыборки = Тип("Дата") Тогда
		СтрокаВыборки = "ДАТАВРЕМЯ(" + Формат(ЗначениеВыборки, "ДФ='yyyy,MM,dd'") + ")";
	ИначеЕсли ТипЗначенияВыборки = Тип("Строка") Тогда
		СтрокаВыборки = """" + ЗначениеВыборки + """";
	ИначеЕсли ТипЗначенияВыборки = Тип("Булево") Тогда
		СтрокаВыборки = Формат(ЗначениеВыборки, "БЛ=ЛОЖЬ; БИ=ИСТИНА");
	ИначеЕсли ТипЗначенияВыборки = Тип("Тип") Тогда
		СтрокаВыборки = "ТИП(" + ПолноеИмяТипа(ЗначениеВыборки) + ")";
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки) Тогда
		СтрокаВыборки = "ЗНАЧЕНИЕ(" + ПолноеИмяЗначенияПеречисления(ЗначениеВыборки) + ")";
	ИначеЕсли (Справочники.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки))
		И (ЗначениеВыборки.Предопределенный ИЛИ ЗначениеВыборки.Пустая()) Тогда
		СтрокаВыборки = "ЗНАЧЕНИЕ(" + ПолноеИмяПредопределенногоЗначения(ЗначениеВыборки) + ")";
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗначенияВыборки)
		И ЗначениеВыборки.Пустая() Тогда
		СтрокаВыборки = "ЗНАЧЕНИЕ(" + ПолноеИмяПредопределенногоЗначения(ЗначениеВыборки) + ")";
	ИначеЕсли ТипЗначенияВыборки = Тип("Массив") Тогда
		СтрокиВыборкиЭлементов = Новый Массив();
		Для Каждого ЭлементВыборки Из ЗначениеВыборки Цикл
			СтрокаВыборкиЭлемента = СтрокаВыборкиЗначения(ЭлементВыборки);
			Если СтрНачинаетсяС(СтрокаВыборкиЭлемента, "Параметр") Тогда
				СтрокиВыборкиЭлементов.Очистить();
				Прервать;
			Иначе
				СтрокиВыборкиЭлементов.Добавить(СтрокаВыборкиЭлемента);
			КонецЕсли;
		КонецЦикла;
		Если СтрокиВыборкиЭлементов.Количество() > 0 Тогда
			Разделитель = "," + Символы.ПС + Символы.Таб + Символы.Таб;
			СтрокаВыборки = СтрСоединить(СтрокиВыборкиЭлементов, Разделитель);
		Иначе
			СтрокаВыборки = "Параметр" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
		КонецЕсли;
	Иначе
		СтрокаВыборки = "Параметр" + СтрЗаменить(Строка(Новый УникальныйИдентификатор()), "-", "");
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиРесурса(СоставРесурса)
	
	Если СоставРесурса.Количество() = 0 Тогда
		СтрокаВыборки = "0";
	ИначеЕсли СоставРесурса.Количество() = 1 Тогда
		СтрокаВыборки = СоставРесурса[0];
	Иначе
		СтрокаВыборки = СтрСоединить(СоставРесурса, " + ");
		СтрокаВыборки = "(" + СтрокаВыборки + ")";
	КонецЕсли;
	
	Возврат СтрокаВыборки;
	
КонецФункции

Функция СтрокаВыборкиСуммыРесурса(СтрокаВыборкиРесурса, ШаблонВыборкиСуммы, УсловияСторно, УсловияНеНоль)
	
	Если СтрокаВыборкиРесурса = "0" Тогда
		СтрокаВыборкиСуммы = "0";
	Иначе
		СтрокаВыборкиСуммы = СтрЗаменить(ШаблонВыборкиСуммы, "&Ресурс", СтрокаВыборкиРесурса);
	КонецЕсли;

	УсловияСторно.Добавить(СтрокаВыборкиРесурса + " < 0");
	УсловияНеНоль.Добавить(СтрокаВыборкиРесурса + " <> 0");
	
	Возврат СтрокаВыборкиСуммы;
	
КонецФункции

Функция СтрокаУсловияПериод(ПараметрыЗапроса)
	
	СтрокиУсловия = Новый Массив();
	
	ДатаНачала = '00010101';
	Если ПараметрыЗапроса.Свойство("ДатаНачала", ДатаНачала) И ДатаНачала > '00010101' Тогда
		СтрокиУсловия.Добавить("Период >= &ДатаНачала");
	КонецЕсли;
	
	ДатаОкончания = '00010101';
	Если ПараметрыЗапроса.Свойство("ДатаОкончания", ДатаОкончания) И ДатаОкончания > '00010101' Тогда
		СтрокиУсловия.Добавить("Период <= &ДатаОкончания");
	КонецЕсли;
	
	Если СтрокиУсловия.Количество() = 0 Тогда
		Возврат "ИСТИНА";
	Иначе
		Возврат СтрСоединить(СтрокиУсловия, Символы.ПС + Символы.Таб + "И ");
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияРегистратор(ПараметрыЗапроса)
	
	Регистратор = Неопределено;
	
	Если НЕ ПараметрыЗапроса.Свойство("Регистратор", Регистратор) Тогда
		Возврат "ИСТИНА";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("Массив") Тогда
		Возврат "&Регистратор В (&ПараметрРегистратор)";
	Иначе
		Возврат "&Регистратор = &ПараметрРегистратор";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияОрганизация(ПараметрыЗапроса, ИмяРегистра)
	
	Организация = Неопределено;
	
	Если ПараметрыЗапроса.РегистрыБезОрганизации.Найти(ИмяРегистра) <> Неопределено Тогда
		Возврат "ИСТИНА";
	ИначеЕсли НЕ ПараметрыЗапроса.Свойство("Организация", Организация) Тогда
		Возврат "ИСТИНА";
	ИначеЕсли ТипЗнч(Организация) = Тип("Массив") Тогда
		Возврат "&Организация В (&ПараметрОрганизация)";
	Иначе
		Возврат "&Организация = &ПараметрОрганизация";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияОбъектУчета(ПараметрыЗапроса, ДтКт)
	
	ОбъектУчета = Неопределено;
	КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
	
	Если НЕ ПараметрыЗапроса.Свойство("ОбъектУчета" + ДтКт, ОбъектУчета) Тогда
		Возврат "ИСТИНА";
	ИначеЕсли ТипЗнч(ОбъектУчета) = Тип("Массив") Тогда
		Возврат СтрШаблон("(ОбъектУчета%1 В (&ОбъектУчета%1) ИЛИ ОбъектУчета%2 В (&ОбъектУчета%1))", ДтКт, КорДтКт);
	Иначе
		Возврат СтрШаблон("(ОбъектУчета%1 = &ОбъектУчета%1 ИЛИ ОбъектУчета%2 = &ОбъектУчета%1)", ДтКт, КорДтКт);
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияВидРегистратора(МетаданныеРегистра)
	
	ДокументыМетаданные = Метаданные.Документы;
	СтрокиУсловия = Новый Массив();
	
	Для Каждого ИмяДокумента Из ИменаНеиспользуемыхДокументов() Цикл
		Если ДокументыМетаданные[ИмяДокумента].Движения.Содержит(МетаданныеРегистра) Тогда
			СтрокиУсловия.Добавить("НЕ &Регистратор ССЫЛКА Документ." + ИмяДокумента);
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокиУсловия.Количество() = 0 Тогда
		Возврат "ИСТИНА";
	Иначе
		Возврат СтрСоединить(СтрокиУсловия, Символы.ПС + Символы.Таб + "И ");
	КонецЕсли;
	
КонецФункции

Функция СтрокаДополнительныйОтбор(ПараметрыОтраженияДвижений)
	
	Если ЗначениеЗаполнено(ПараметрыОтраженияДвижений.ДополнительныйОтбор) Тогда
		Возврат ПараметрыОтраженияДвижений.ДополнительныйОтбор;
	Иначе
		Возврат "ИСТИНА";
	КонецЕсли;
	
КонецФункции

Функция СтрокаУсловияРеквизитСторно()
	
	Возврат "&РеквизитСторно = ЛОЖЬ";
	
КонецФункции

Функция ПолноеИмяТипа(ЗначениеТипа)
	
	Если ЗначениеТипа = Тип("Дата") Тогда
		Возврат "ДАТА";
	ИначеЕсли ЗначениеТипа = Тип("Число") Тогда
		Возврат "ЧИСЛО";
	ИначеЕсли ЗначениеТипа = Тип("Строка") Тогда
		Возврат "СТРОКА";
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ЗначениеТипа);
		Если ОбъектМетаданных <> Неопределено Тогда
			Возврат ОбъектМетаданных.ПолноеИмя();
		Иначе
			Возврат "БУЛЕВО";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ПолноеИмяЗначенияПеречисления(ЗначениеПеречисления)
	
	ОбъектМетаданных = ЗначениеПеречисления.Метаданные();
	
	Если ЗначениеПеречисления.Пустая() Тогда
		ИмяЗначения = "ПустаяСсылка";
	Иначе
		ИндексЗначения = Перечисления[ОбъектМетаданных.Имя].Индекс(ЗначениеПеречисления);
		ИмяЗначения = ОбъектМетаданных.ЗначенияПеречисления[ИндексЗначения].Имя;
	КонецЕсли;
	
	Возврат ОбъектМетаданных.ПолноеИмя() + "." + ИмяЗначения;
	
КонецФункции

Функция ПолноеИмяПредопределенногоЗначения(ПредопределенноеЗначение)
	
	ОбъектМетаданных = ПредопределенноеЗначение.Метаданные();
	
	Если ПредопределенноеЗначение.Пустая() Тогда
		ИмяЗначения = "ПустаяСсылка";
	Иначе
		ИмяЗначения = ПредопределенноеЗначение.ИмяПредопределенныхДанных;
	КонецЕсли;
	
	Возврат ОбъектМетаданных.ПолноеИмя() + "." + ИмяЗначения;
	
КонецФункции

Функция ТипыДокументовВводаОстатков()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВзаиморасчетов"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВзаиморасчетовПоАренде"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковВнеоборотныхАктивов2_4"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковДенежныхСредств"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковОПродажахЗаПрошлыеПериоды"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковПоФинансовымИнструментам"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочиеРасходы"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковПрочихАктивовПассивов"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковРасчетовПоЭквайрингу"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковСПодотчетниками"));
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВводОстатковТоваров"));
	
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистровЛокализация.ДобавитьТипыДокументовВводаОстатков(ТипыДокументов);
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ТипыДокументовРозничныхПродаж()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"));
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ТипыДокументовРозничныхВозвратов()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ОтчетОРозничныхВозвратах"));
	
	Возврат ТипыДокументов;
	
КонецФункции
	
Функция ТипыДокументовВзаимозачетаЗадолженности()
	
	ТипыДокументов = Новый Массив();
	
	ТипыДокументов.Добавить(Тип("ДокументСсылка.ВзаимозачетЗадолженности"));
	
	Возврат ТипыДокументов;
	
КонецФункции

Функция ИмяРегистраСлужебныхОбъектовУчета()
	
	Возврат "ДвиженияСлужебныхОбъектовУчета";
	
КонецФункции

Функция ХозяйственныеОперацииБезУчетаВВалюте()
	
	БезУчетаВВалюте = Новый Массив();
	
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыАрендаПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыАрендаУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДепозитыПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДепозитыУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДСПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыДСУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыЗаймыВыданныеПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыЗаймыВыданныеУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКлиентыУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКредитыИЗаймыПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыКредитыИЗаймыУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыПоставщикиУбыток);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыРезервыПоДолгамПрибыль);
	БезУчетаВВалюте.Добавить(Справочники.НастройкиХозяйственныхОпераций.КурсовыеРазницыРезервыПоДолгамУбыток);
	
	Возврат БезУчетаВВалюте;
	
КонецФункции

Функция ТипыНалогообложенияБезУчетаНДС()
	
	БезУчетаНДС = Новый Массив();
	
	БезУчетаНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС);
	БезУчетаНДС.Добавить(Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяЕНВД);
	
	Возврат БезУчетаНДС;
	
КонецФункции

#КонецОбласти

#Область ПодборСчетовУчета

Функция ВсеВидыСубконтоСчетовУчета(Выборка)
	
	ВсеВидыСубконто = Новый Соответствие();
	НомерПользовательскогоСубконто = 1;
	
	Пока Выборка.Следующий() Цикл
		Для НомерСубконто = 1 По Выборка.КоличествоСубконто Цикл
			ВидСубконто = Выборка["ВидСубконто" + НомерСубконто];
			Если ЗначениеЗаполнено(ВидСубконто) И ВсеВидыСубконто[ВидСубконто] = Неопределено Тогда
				Если ПустаяСтрока(Выборка["ИмяВидаСубконто" + НомерСубконто]) Тогда
					ИмяВидаСубконто = "ПользовательскоеСубконто" + Формат(НомерПользовательскогоСубконто, "ЧГ=0");
					НомерПользовательскогоСубконто = НомерПользовательскогоСубконто + 1;
				Иначе
					ИмяВидаСубконто = "Субконто" + Выборка["ИмяВидаСубконто" + НомерСубконто];
				КонецЕсли;
				ОписаниеСубконто = Новый Структура();
				ОписаниеСубконто.Вставить("Имя", ИмяВидаСубконто);
				ОписаниеСубконто.Вставить("Тип", Выборка["ТипЗначенияСубконто" + НомерСубконто]);
				ВсеВидыСубконто.Вставить(ВидСубконто, ОписаниеСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВсеВидыСубконто;
	
КонецФункции

Функция ВсеВыраженияЗаполненияСубконто(Выборка, ПараметрыЗапроса)
	
	ВсеВыраженияСубконто = Новый Соответствие();
	
	Пока Выборка.Следующий() Цикл
		Для НомерВыражения = 1 По 3 Цикл
			ВыражениеСубконто = Выборка["ВыражениеСубконто" + НомерВыражения];
			Если ЗначениеЗаполнено(ВыражениеСубконто) Тогда
				НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса);
				Если ВсеВыраженияСубконто[ВыражениеСубконто] = Неопределено Тогда
					ИмяВыражения = "Выражение" + СтрЗаменить(ВыражениеСубконто, ".", "");
					ВсеВыраженияСубконто.Вставить(ВыражениеСубконто, ИмяВыражения);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВсеВыраженияСубконто;
	
КонецФункции

Функция ВидыСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВидыСубконто)
	
	ВидыСубконтоРегистра = Новый Массив();
	
	ВыборкаСчетУчета = ВыборкаИмяРегистра.Выбрать();
	Пока ВыборкаСчетУчета.Следующий() Цикл
		ВыборкаВидыСубконто.Сбросить();
		ВыборкаВидыСубконто.НайтиСледующий(ВыборкаСчетУчета.СчетУчета, "СчетУчета");
		Для НомерСубконто = 1 По ВыборкаВидыСубконто.КоличествоСубконто Цикл
			ВидСубконто = ВыборкаВидыСубконто["ВидСубконто" + НомерСубконто];
			Если ЗначениеЗаполнено(ВидСубконто) И ВидыСубконтоРегистра.Найти(ВидСубконто) = Неопределено Тогда
				ВидыСубконтоРегистра.Добавить(ВидСубконто);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВидыСубконтоРегистра;
	
КонецФункции

Функция ВыраженияСубконтоРегистра(ВыборкаИмяРегистра, ВыборкаВыраженияСубконто, ПараметрыЗапроса)
	
	ВыраженияСубконтоРегистра = Новый Массив();
	
	ВыборкаВыраженияСубконто.Сбросить();
	Пока ВыборкаВыраженияСубконто.НайтиСледующий(ВыборкаИмяРегистра.ИмяРегистра, "ИмяРегистра") Цикл
		Для НомерВыражения = 1 По 3 Цикл
			ВыражениеСубконто = ВыборкаВыраженияСубконто["ВыражениеСубконто" + НомерВыражения];
			Если ЗначениеЗаполнено(ВыражениеСубконто) Тогда
				НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса);
				Если ВыраженияСубконтоРегистра.Найти(ВыражениеСубконто) = Неопределено Тогда
					ВыраженияСубконтоРегистра.Добавить(ВыражениеСубконто);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВыраженияСубконтоРегистра;
	
КонецФункции

Процедура ДобавитьПоляВыбораСубконто(СтрокиПолейАналитики, СтрокиГруппАналитики, ВсеВидыСубконто, ВидыСубконтоРегистра, ИмяРегистра, ОбъектыБухгалтерскогоУчета)
	
	СтруктураПоиска = Новый Структура("ИсточникДанных", ИмяРегистра);
	СтрокиОбъектовУчета = ОбъектыБухгалтерскогоУчета.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ВидСубконто Из ВидыСубконтоРегистра Цикл
		ОписаниеВидаСубконто = ВсеВидыСубконто[ВидСубконто];
		СтрокаВыборкиСубконто = СтрокаВыборкиСубконто(ВидСубконто, ОписаниеВидаСубконто.Тип, ИмяРегистра, СтрокиОбъектовУчета);
		СтрокиПолейАналитики.Добавить(СтрокаВыборкиСубконто + " КАК " + ОписаниеВидаСубконто.Имя);
		СтрокиГруппАналитики.Добавить(СтрокаВыборкиСубконто);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляВыбораВыражений(СтрокиПолейАналитики, СтрокиГруппАналитики, ВсеВыраженияСубконто, ВыраженияСубконтоРегистра)
	
	Для Каждого ВыражениеСубконто Из ВыраженияСубконтоРегистра Цикл
		ИмяВыражения = ВсеВыраженияСубконто[ВыражениеСубконто];
		ПутьКДанным = "ТаблицаРегистра." + ВыражениеСубконто;
		СтрокиПолейАналитики.Добавить(ПутьКДанным + " КАК " + ИмяВыражения);
		СтрокиГруппАналитики.Добавить(ПутьКДанным);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляАналитикиВТекстЗапроса(СтрокиПолейАналитики, СтрокиГруппАналитики, ТекстЗапросаРегистра)

	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиПолейАналитики.Количество() > 0 Тогда
		ТекстПолейАналитики = СтрСоединить(СтрокиПолейАналитики, РазделительСтрок);
	Иначе
		ТекстПолейАналитики = СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	Если СтрокиГруппАналитики.Количество() > 0 Тогда
		ТекстГруппыАналитики = СтрСоединить(СтрокиГруппАналитики, РазделительСтрок);
	Иначе
		ТекстГруппыАналитики = СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ПоляВыбораАналитики", ТекстПолейАналитики);
	ТекстЗапросаРегистра = СтрЗаменить(ТекстЗапросаРегистра, "&ГруппаПолейАналитики", ТекстГруппыАналитики);
	
КонецПроцедуры

Процедура ДобавитьДоступныеПоляРегистра(СтрокиПолейАналитики, СтрокиГруппАналитики, ДоступныеПоляРегистра, ИмяРегистра)
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("Организация");
	СуществующиеПоляВыборки.Добавить("Подразделение");
	СуществующиеПоляВыборки.Добавить("НаправлениеДеятельности");
	СуществующиеПоляВыборки.Добавить("Валюта");
	
	Если ПустаяСтрока(ИмяРегистра) Тогда
		Для Каждого ИмяПоля Из СуществующиеПоляВыборки Цикл
			ДоступныеПоляРегистра.Добавить(ИмяПоля);
		КонецЦикла;
	Иначе
		МенеджерРегистра = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени("РегистрНакопления." + ИмяРегистра); // РегистрНакопленияМенеджер -
		ПараметрыОтраженияВУчете = МенеджерРегистра.ПараметрыОтраженияДвиженийВФинансовомУчете(); // см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
		
		Для Каждого ИсточникСубконто Из ПараметрыОтраженияВУчете.ИсточникиСубконто Цикл
			ИмяПоля = ИсточникСубконто.Ключ;
			Если СуществующиеПоляВыборки.Найти(ИмяПоля) = Неопределено Тогда
				ПутьКДанным = "ТаблицаРегистра." + ИсточникСубконто.Значение.ПутьКДанным;
				СтрокиПолейАналитики.Добавить(ПутьКДанным + " КАК " + ИмяПоля);
				СтрокиГруппАналитики.Добавить(ПутьКДанным);
			КонецЕсли;
			ДоступныеПоляРегистра.Добавить(ИмяПоля);
		КонецЦикла;
	КонецЕсли;
	
	ДоступныеПоляРегистра.Добавить("Регистратор");
	ДоступныеПоляРегистра.Добавить("ТипРегистратора");
	ДоступныеПоляРегистра.Добавить("НастройкаХозОперации");
	
КонецПроцедуры

Процедура ДобавитьДоступныеПоляВТекстЗапроса(ДоступныеПоляРегистра, ТекстЗапроса, ДтКт);
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("ВалютаДт");
	СуществующиеПоляВыборки.Добавить("ВалютаКт");
	
	СтрокиДоступныхПолей = Новый Массив();
	
	Для Каждого ДоступноеПоле Из ДоступныеПоляРегистра Цикл
		Если ДоступноеПоле = "НастройкаХозОперации" Тогда
			ИмяПоля = "НастройкаХозяйственнойОперации" + ДтКт;
		Иначе
			ИмяПоля = ДоступноеПоле + ДтКт;
		КонецЕсли;
		
		Если СуществующиеПоляВыборки.Найти(ИмяПоля) = Неопределено Тогда
			Если ДоступноеПоле = "ТипРегистратора" Тогда
				СтрокиДоступныхПолей.Добавить("ТИПЗНАЧЕНИЯ(Таблица" + ДтКт+ ".Регистратор) КАК " + ИмяПоля);
			Иначе
				СтрокиДоступныхПолей.Добавить("Таблица" + ДтКт+ "." + ДоступноеПоле + " КАК " + ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиДоступныхПолей.Количество() > 0 Тогда
		ТекстДоступныхПолей = СтрСоединить(СтрокиДоступныхПолей, РазделительСтрок);
	Иначе
		ТекстДоступныхПолей = СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДоступныеПоляТаблицы" + ДтКт, ТекстДоступныхПолей);
	
КонецПроцедуры

Процедура ДобавитьПоляОтбораВТекстЗапроса(ПоляОтбора, ДоступныеПоляРегистра, ТекстЗапроса, ДтКт)
	
	СуществующиеПоляВыборки = Новый Массив();
	СуществующиеПоляВыборки.Добавить("ВалютаДт");
	СуществующиеПоляВыборки.Добавить("ВалютаКт");
	
	СтрокиПолейОтбора = Новый Массив();
	
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		ИмяПоля = ПолеОтбора + ДтКт;
		
		Если СуществующиеПоляВыборки.Найти(ИмяПоля) = Неопределено Тогда
			Если ПолеОтбора = "НастройкаХозяйственнойОперации" Тогда
				СтрокиПолейОтбора.Добавить("Таблица" + ДтКт+ ".НастройкаХозОперации КАК " + ИмяПоля);
			ИначеЕсли ПолеОтбора = "ТипРегистратора" Тогда
				СтрокиПолейОтбора.Добавить("ТИПЗНАЧЕНИЯ(Таблица" + ДтКт+ ".Регистратор) КАК " + ИмяПоля);
			ИначеЕсли ДоступныеПоляРегистра.Найти(ПолеОтбора) <> Неопределено Тогда
				СтрокиПолейОтбора.Добавить("Таблица" + ДтКт+ "." + ПолеОтбора + " КАК " + ИмяПоля);
			Иначе
				СтрокиПолейОтбора.Добавить(СтрокаВыборкиЗначения(Неопределено) + " КАК " + ИмяПоля);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РазделительСтрок = "," + Символы.ПС + Символы.Таб;
	
	Если СтрокиПолейОтбора.Количество() > 0 Тогда
		ТекстПолейОтбора = СтрСоединить(СтрокиПолейОтбора, РазделительСтрок);
	Иначе
		ТекстПолейОтбора = СтрокаВыборкиЗначения(Неопределено);
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляОтбораТаблицы" + ДтКт, ТекстПолейОтбора);
	
КонецПроцедуры

Функция ТипыПолейОтбора(ПоляОтбора)
	
	ТипыПолейОтбора = Новый Структура();
	
	Если ПоляОтбора.Найти("НастройкаХозяйственнойОперации") <> Неопределено Тогда
		ТипыПолейОтбора.Вставить("НастройкаХозяйственнойОперации", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Тип("СправочникСсылка.НастройкиХозяйственныхОпераций")));
	КонецЕсли;
	
	Если ПоляОтбора.Найти("Регистратор") <> Неопределено Тогда
		ТипыПолейОтбора.Вставить("Регистратор", Документы.ТипВсеСсылки().Типы());
	ИначеЕсли ПоляОтбора.Найти("ТипРегистратора") <> Неопределено Тогда
		ТипыПолейОтбора.Вставить("Регистратор", Документы.ТипВсеСсылки().Типы());
	КонецЕсли;
	
	Возврат ТипыПолейОтбора;
	
КонецФункции

Процедура ДобавитьТипыПолейОтбораИзИсточниковСубконто(ПоляОтбора, ТипыПолейОтбора, ИсточникиСубконто)
	
	Для Каждого ПолеОтбора Из ПоляОтбора Цикл
		Если ИсточникиСубконто.Свойство(ПолеОтбора) Тогда
			Если НЕ ТипыПолейОтбора.Свойство(ПолеОтбора) Тогда
				ТипыПолейОтбора.Вставить(ПолеОтбора, Новый Массив());
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ТипыПолейОтбора[ПолеОтбора], ИсточникиСубконто[ПолеОтбора].Тип.Типы(), Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПоляОтбораВКолонкиТаблицы(ТипыПолейОтбора, КолонкиТаблицы, ДтКт)
	
	СуществующиеКолонкиТаблицы = Новый Массив();
	СуществующиеКолонкиТаблицы.Добавить("ВалютаДт");
	СуществующиеКолонкиТаблицы.Добавить("ВалютаКт");
	
	Для Каждого КлючИЗначение Из ТипыПолейОтбора Цикл
		ИмяКолонки = КлючИЗначение.Ключ + ДтКт;
		
		Если СуществующиеКолонкиТаблицы.Найти(ИмяКолонки) = Неопределено Тогда
			КолонкиТаблицы.Добавить(ИмяКолонки, Новый ОписаниеТипов(КлючИЗначение.Значение));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗарегистрироватьПустойСчетДляНастройки(ВыборкаДвижения, ДтКт)
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СчетаМеждународногоУчетаТребующиеНастройки) Тогда
		РегистрыСведений.СчетаМеждународногоУчетаТребующиеНастройки.ЗарегистрироватьДляНастройки(
			ВыборкаДвижения.ПланСчетов,
			ВыборкаДвижения.НастройкаФормированияПроводок,
			ВыборкаДвижения["ОбъектУчета" + ДтКт],
			ВыборкаДвижения["ОбъектНастройки" + ДтКт],
			ВыборкаДвижения.Регистратор);
	КонецЕсли;
	
КонецПроцедуры

Функция НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса, ДтКт = "")
	
	Если ДтКт <> "Кт" И СтрНачинаетсяС(ВыражениеСубконто, ПараметрыЗапроса.ПрефиксВыраженияСубконтоДт) Тогда
		ВыражениеСубконто = Сред(ВыражениеСубконто, ПараметрыЗапроса.ДлинаПрефиксаВыраженияДт + 2);
	КонецЕсли;
	
	Если ДтКт <> "Дт" И СтрНачинаетсяС(ВыражениеСубконто, ПараметрыЗапроса.ПрефиксВыраженияСубконтоКт) Тогда
		ВыражениеСубконто = Сред(ВыражениеСубконто, ПараметрыЗапроса.ДлинаПрефиксаВыраженияКт + 2);
	КонецЕсли;
	
	ВыражениеСубконто = СтрЗаменить(ВыражениеСубконто, "_", ".");
	
КонецФункции

#КонецОбласти

#Область ФормированиеНастроекСКД

Функция ПоляВыбораКомпоновкиДанных(ПараметрыЗапроса)
	
	ПоляВыбора = Новый Структура();
	ПоляВыбора.Вставить("ПорядокПрименения", ОбщегоНазначения.ОписаниеТипаЧисло(3, 0, ДопустимыйЗнак.Неотрицательный));
	ПоляВыбора.Вставить("НеОтражаетсяНаСчетах", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("РучноеУточнениеПроводки", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("ИнвертироватьЗнакРесурсов", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("ПрименятьПоследующиеНастройки", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("СчетУчетаДт", Новый ОписаниеТипов("ПланСчетовСсылка.Международный"));
	ПоляВыбора.Вставить("СчетУчетаКт", Новый ОписаниеТипов("ПланСчетовСсылка.Международный"));
	ПоляВыбора.Вставить("НомерЗаписи", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0, ДопустимыйЗнак.Неотрицательный));
	ПоляВыбора.Вставить("ПланСчетов", Новый ОписаниеТипов("СправочникСсылка.ПланыСчетовМеждународногоУчета"));
	ПоляВыбора.Вставить("НастройкаФормированияПроводок", Новый ОписаниеТипов("СправочникСсылка.НастройкиФормированияПроводокМеждународногоУчета"));
	ПоляВыбора.Вставить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПоляВыбора.Вставить("ИмяРегистраДт", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ПоляВыбора.Вставить("ИмяРегистраКт", ОбщегоНазначения.ОписаниеТипаСтрока(150));
	ПоляВыбора.Вставить("ОбъектУчетаДт", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета"));
	ПоляВыбора.Вставить("ОбъектУчетаКт", Новый ОписаниеТипов("ПеречислениеСсылка.ОбъектыБухгалтерскогоУчета"));
	ПоляВыбора.Вставить("ОбъектНастройкиДт", Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета.Тип);
	ПоляВыбора.Вставить("ОбъектНастройкиКт", Метаданные.ОпределяемыеТипы.ОбъектНастройкиСчетовМеждународногоУчета.Тип);
	ПоляВыбора.Вставить("ИнвертироватьПроводку", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПоляВыбора.Вставить("Регистратор", Документы.ТипВсеСсылки());
	ПоляВыбора.Вставить("НастройкаХозОперации", Новый ОписаниеТипов("СправочникСсылка.НастройкиХозяйственныхОпераций"));
	ПоляВыбора.Вставить("ИдентификаторФинЗаписи", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ПоляВыбора.Вставить("ИдентификаторСтрокиДт", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ПоляВыбора.Вставить("ИдентификаторСтрокиКт", ОбщегоНазначения.ОписаниеТипаСтрока(36));
	ПоляВыбора.Вставить("РеквизитСторно", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("ВалютаДт", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПоляВыбора.Вставить("ВалютаКт", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ПоляВыбора.Вставить("СложнаяПроводкаДт", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("СложнаяПроводкаКт", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("УчитыватьХозОперацию", Новый ОписаниеТипов("Булево"));
	ПоляВыбора.Вставить("СуммаУпрДт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаСуммы, ПараметрыЗапроса.ТочностьСуммы, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("СуммаУпрКт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаСуммы, ПараметрыЗапроса.ТочностьСуммы, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("СуммаРеглДт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаСуммы, ПараметрыЗапроса.ТочностьСуммы, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("СуммаРеглКт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаСуммы, ПараметрыЗапроса.ТочностьСуммы, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("СуммаВалДт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаСуммы, ПараметрыЗапроса.ТочностьСуммы, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("СуммаВалКт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаСуммы, ПараметрыЗапроса.ТочностьСуммы, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("КоличествоДт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаКоличества, ПараметрыЗапроса.ТочностьКоличества, ДопустимыйЗнак.Любой));
	ПоляВыбора.Вставить("КоличествоКт", ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыЗапроса.ДлинаКоличества, ПараметрыЗапроса.ТочностьКоличества, ДопустимыйЗнак.Любой));
	
	Возврат ПоляВыбора;
	
КонецФункции

Функция ТаблицаРезультатовКомпоновкиДанных(ПоляВыбораКомпоновкиДанных)
	
	ТаблицаРезультатов = Новый ТаблицаЗначений();
	
	Для Каждого ПолеВыбора Из ПоляВыбораКомпоновкиДанных Цикл
		ТаблицаРезультатов.Колонки.Добавить(ПолеВыбора.Ключ, ПолеВыбора.Значение);
	КонецЦикла;
	
	Возврат ТаблицаРезультатов;
	
КонецФункции

Функция ИзмеренияНастроекОтраженияКорреспонденций()
	
	ИзмеренияНастроек = Новый Массив();
	
	Для Каждого Измерение Из Метаданные.РегистрыСведений.НастройкиОтраженияКорреспонденцийВМеждународномУчете.Измерения Цикл
		ИзмеренияНастроек.Добавить(Измерение.Имя);
	КонецЦикла;
	
	Возврат ИзмеренияНастроек;
	
КонецФункции

Функция НоваяСхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = КомпоновкаДанныхСервер.ПустаяСхема();
	НаборДанных = КомпоновкаДанныхСервер.ДобавитьПустойНаборДанных(СхемаКомпоновкиДанных);
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция НовыйКомпоновщикНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных, ПоляВыбораКомпоновкиДанных, ПараметрыЗапроса)
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных();
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	
	Для Каждого ПолеВыбора Из ПоляВыбораКомпоновкиДанных Цикл
		ВыбранноеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ПолеВыбора.Ключ);
	КонецЦикла;
	
	Для Каждого ДоступныйПараметр Из КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры.Элементы Цикл
		Параметр = ДоступныйПараметр.Параметр;
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра(Параметр, ПараметрыЗапроса[Строка(Параметр)]);
	КонецЦикла;
	
	ДетальныеЗаписи = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	
	Возврат КомпоновщикНастроек;
	
КонецФункции

Процедура ДобавитьИзмеренияНастройкиВОтборКомпоновкиДанных(ИзмеренияНастроек, ВыборкаНастройки, ОтборПриемник)
	
	Для Каждого ИмяИзмерения Из ИзмеренияНастроек Цикл
		НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяИзмерения);
		НовыйЭлемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлемент.ПравоеЗначение = ВыборкаНастройки[ИмяИзмерения];
		НовыйЭлемент.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРезультатыКомпоновкиВТаблицу(СхемаКомпоновкиДанных, КомпоновщикНастроек, МенеджерВременныхТаблиц, ТаблицаРезультатовКомпоновки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,,, Истина,, МенеджерВременныхТаблиц);
	
	ПроцессорВыводаВТаблицуЗначений = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	ТаблицаРезультатаКомпоновки = ПроцессорВыводаВТаблицуЗначений.Вывести(ПроцессорКомпоновкиДанных, Ложь);
	
	Для Каждого СтрокаРезультата Из ТаблицаРезультатаКомпоновки Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаРезультатовКомпоновки.Добавить(), СтрокаРезультата);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора, ДтКт)
	
	ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение);
	
	Если НЕ ПустаяСтрока(ДтКт) Тогда
		ЧастиПутиКДанным = СтрРазделить(ПутьКДанным, ".");
		ЧастиПутиКДанным[0] = ЧастиПутиКДанным[0] + ДтКт;
		ПутьКДанным = СтрСоединить(ЧастиПутиКДанным, ".");
	КонецЕсли;
	
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКДанным);
	ЗаполнитьЗначенияСвойств(НовыйЭлемент, ЭлементОтбора,, "ЛевоеЗначение");
	
КонецПроцедуры

Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов, ДтКт)
	
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа,ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора Из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(НоваяГруппа, ЭлементОтбора, ДтКт);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа, ЭлементОтбора, ДтКт);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПоляЭлементовОтбора(ПоляОтбора, ЭлементыОтбора, ДтКт = "")
	
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ЭлементОтбора.Использование Тогда
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ЗаполнитьПоляЭлементовОтбора(ПоляОтбора, ЭлементыОтбора, ДтКт);
			Иначе
				ПутьКДанным = Строка(ЭлементОтбора.ЛевоеЗначение);
				ПолеОтбора = СтрРазделить(ПутьКДанным, ".")[0];
				
				Если НЕ ПустаяСтрока(ДтКт) Тогда
					Если СтрЗаканчиваетсяНа(ПолеОтбора, ДтКт) Тогда
						ПолеОтбора = Сред(ПолеОтбора, 1, СтрДлина(ПолеОтбора) - СтрДлина(ДтКт));
					Иначе
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				Если ПоляОтбора.Найти(ПолеОтбора) = Неопределено Тогда
					ПоляОтбора.Добавить(ПолеОтбора);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеПроводок

Процедура ЗаполнитьТаблицуПроводок(Запрос, ТекстыЗапросов, ТаблицаПроводок, ПараметрыФормированияПроводок)
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияУТ.РазделительЗапросовВПакете());
	Результаты = Запрос.ВыполнитьПакет();
	ТекстыЗапросов.Очистить();
	
	ПараметрыФормированияПроводок.Вставить("ДлинаСуммы", Запрос.Параметры.ДлинаСуммы);
	ПараметрыФормированияПроводок.Вставить("ТочностьСуммы", Запрос.Параметры.ТочностьСуммы);
	ПараметрыФормированияПроводок.Вставить("ДлинаКоличества", Запрос.Параметры.ДлинаКоличества);
	ПараметрыФормированияПроводок.Вставить("ТочностьКоличества", Запрос.Параметры.ТочностьКоличества);
	
	РегистрыВыборкиАналитики = Запрос.Параметры.РегистрыВыборкиАналитики;
	КоличествоРегистровАналитики = РегистрыВыборкиАналитики.Количество();
	
	ТаблицыАналитики = Новый Структура();
	Для Индекс = 0 По КоличествоРегистровАналитики - 1 Цикл
		ТаблицыАналитики.Вставить(РегистрыВыборкиАналитики[Индекс], ТаблицаЗапросаАналитики(Результаты[Индекс]));
	КонецЦикла;
	
	РезультатДвижения = Результаты[КоличествоРегистровАналитики];
	ВыборкаДвижения = РезультатДвижения.Выбрать();
	
	Пока ВыборкаДвижения.Следующий() Цикл
		СтрокиАналитикиДт = СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, Запрос.Параметры, "Дт");
		СтрокиАналитикиКт = СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, Запрос.Параметры, "Кт");
		
		Если НЕ ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения, СтрокиАналитикиДт, "Дт")
		 ИЛИ НЕ ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения, СтрокиАналитикиКт, "Кт") Тогда
			// движения документа были изменены с момента первоначального считывания. Документ будет обработан повторно.
		ИначеЕсли СтрокиАналитикиДт.Количество() > 1 И СтрокиАналитикиКт.Количество() > 1 Тогда
			ТекстИсключения = СтрШаблон(НСтр("ru = 'Недопустимая сложная проводка по документу %1 с идентификатором фин. записи %2';
											|en = 'Invalid complex entry for the %1 document with the %2 financial record ID'"),
				ВыборкаДвижения.Регистратор, ВыборкаДвижения.ИдентификаторФинЗаписи);
			ВызватьИсключение ТекстИсключения;
		ИначеЕсли СтрокиАналитикиДт.Количество() = 1 И СтрокиАналитикиКт.Количество() = 1 Тогда
			ДобавитьПростуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок);
		Иначе
			ДобавитьСложнуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаЗапросаАналитики(РезультатЗапроса)
	
	ТаблицаЗапроса = РезультатЗапроса.Выгрузить();
	ОбязательныеПоляИндекса = "ИмяРегистра,ОбъектУчета,ОбъектНастройки,Период,Регистратор,ИдентификаторФинЗаписи,ИдентификаторСтроки";
	
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",Организация,ЭтоДебет");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",Организация,ЭтоКредит");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",НастройкаХозОперации,ЭтоДебет");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",НастройкаХозОперации,ЭтоКредит");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",Организация,НастройкаХозОперации,ЭтоДебет");
	ТаблицаЗапроса.Индексы.Добавить(ОбязательныеПоляИндекса + ",Организация,НастройкаХозОперации,ЭтоКредит");
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Функция СтрокиАналитикиДвижения(ВыборкаДвижения, ТаблицыАналитики, ПараметрыЗапроса, ДтКт)
	
	ИмяРегистра = ВыборкаДвижения["ИмяРегистра" + ДтКт];
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ИмяРегистра", ИмяРегистра);
	СтруктураПоиска.Вставить("ОбъектУчета", ВыборкаДвижения["ОбъектУчета" + ДтКт]);
	СтруктураПоиска.Вставить("ОбъектНастройки", ВыборкаДвижения["ОбъектНастройки" + ДтКт]);
	СтруктураПоиска.Вставить("Период", ВыборкаДвижения.Период);
	СтруктураПоиска.Вставить("Регистратор", ВыборкаДвижения.Регистратор);
	СтруктураПоиска.Вставить("ИдентификаторФинЗаписи", ВыборкаДвижения.ИдентификаторФинЗаписи);
	СтруктураПоиска.Вставить("ИдентификаторСтроки", ВыборкаДвижения["ИдентификаторСтроки" + ДтКт]);
	
	Если ПараметрыЗапроса.РегистрыБезОрганизации.Найти(ИмяРегистра) = Неопределено Тогда
		СтруктураПоиска.Вставить("Организация", ВыборкаДвижения.Организация);
	КонецЕсли;
	
	Если ВыборкаДвижения.УчитыватьХозОперацию Тогда
		СтруктураПоиска.Вставить("НастройкаХозОперации", ВыборкаДвижения.НастройкаХозОперации);
	КонецЕсли;
	
	Если ДтКт = "Дт" Тогда
		СтруктураПоиска.Вставить("ЭтоКредит", Ложь);
	Иначе
		СтруктураПоиска.Вставить("ЭтоДебет", Ложь);
	КонецЕсли;
	
	СтрокиАналитики = ТаблицыАналитики[ИмяРегистра].Скопировать(СтруктураПоиска);
	
	ВыполнитьДополнительныйОтборСтрокАналитики(ВыборкаДвижения, СтрокиАналитики);
	
	СтрокиАналитики.Колонки.Добавить("Субконто1");
	СтрокиАналитики.Колонки.Добавить("Субконто2");
	СтрокиАналитики.Колонки.Добавить("Субконто3");
	СтрокиАналитики.Колонки.Добавить("КорСубконто1");
	СтрокиАналитики.Колонки.Добавить("КорСубконто2");
	СтрокиАналитики.Колонки.Добавить("КорСубконто3");
	
	КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
	ПрефиксВыраженияСубконто = ?(ВыборкаДвижения.ИнвертироватьПроводку, КорДтКт, ДтКт);
	
	Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + ДтКт] Цикл
		ВидСубконто = ВыборкаДвижения["ВидСубконто" + ДтКт + НомерСубконто];
		ЗначениеСубконто = ВыборкаДвижения["ЗначениеСубконто" + ДтКт + НомерСубконто];
		НеВычислятьСубконто = ВыборкаДвижения["НеВычислятьСубконто" + ДтКт + НомерСубконто];
		ВыражениеСубконто = ВыборкаДвижения["ВыражениеСубконто" + ДтКт + НомерСубконто];
		ЭтоВыражениеИзКорреспонденции = ВыборкаДвижения["КорВыражение" + ДтКт + НомерСубконто];
		
		Если НЕ ЭтоВыражениеИзКорреспонденции И ЗначениеЗаполнено(ВыражениеСубконто) Тогда
			НормализоватьВыражениеСубконто(ВыражениеСубконто, ПараметрыЗапроса, ПрефиксВыраженияСубконто);
		КонецЕсли;
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			Если НеВычислятьСубконто Тогда
				СубконтоСтроки = ЗначениеСубконто;
			ИначеЕсли ЗначениеЗаполнено(ВыражениеСубконто) Тогда
				Если ЭтоВыражениеИзКорреспонденции Тогда
					СубконтоСтроки = Неопределено;
				Иначе
					СубконтоСтроки = СтрокаАналитики[ПараметрыЗапроса.ВсеВыраженияСубконто[ВыражениеСубконто]];
				КонецЕсли;
			Иначе
				СубконтоСтроки = СтрокаАналитики[ПараметрыЗапроса.ВсеВидыСубконто[ВидСубконто].Имя];
			КонецЕсли;
			
			СтрокаАналитики["Субконто" + НомерСубконто] = ?(ЗначениеЗаполнено(СубконтоСтроки), СубконтоСтроки, Неопределено);
			СтрокаАналитики.НаправлениеДеятельности = ?(ЗначениеЗаполнено(СтрокаАналитики.НаправлениеДеятельности), СтрокаАналитики.НаправлениеДеятельности, Неопределено);
			СтрокаАналитики.Подразделение = ?(ЗначениеЗаполнено(СтрокаАналитики.Подразделение), СтрокаАналитики.Подразделение, Неопределено);
		КонецЦикла;
	КонецЦикла;
	
	Если ВыборкаДвижения["КоличествоСубконто" + ДтКт] = 0 Тогда
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			СтрокаАналитики.НаправлениеДеятельности = ?(ЗначениеЗаполнено(СтрокаАналитики.НаправлениеДеятельности), СтрокаАналитики.НаправлениеДеятельности, Неопределено);
			СтрокаАналитики.Подразделение = ?(ЗначениеЗаполнено(СтрокаАналитики.Подразделение), СтрокаАналитики.Подразделение, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	ЕстьКорВыражения = Ложь;
	
	Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + КорДтКт] Цикл
		ЕстьВыражениеДляКорреспонденции = ВыборкаДвижения["КорВыражение" + КорДтКт + НомерСубконто];
		КорВыражениеСубконто = ВыборкаДвижения["ВыражениеСубконто" + КорДтКт + НомерСубконто];
		
		Если ЕстьВыражениеДляКорреспонденции И ЗначениеЗаполнено(КорВыражениеСубконто) Тогда
			НормализоватьВыражениеСубконто(КорВыражениеСубконто, ПараметрыЗапроса, ПрефиксВыраженияСубконто);
			ЕстьКорВыражения = Истина;
		Иначе
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			КорСубконтоСтроки = СтрокаАналитики[ПараметрыЗапроса.ВсеВыраженияСубконто[КорВыражениеСубконто]];
			СтрокаАналитики["КорСубконто" + НомерСубконто] = ?(ЗначениеЗаполнено(КорСубконтоСтроки), КорСубконтоСтроки, Неопределено);
		КонецЦикла;
	КонецЦикла;
	
	Если СтрокиАналитики.Количество() > 1 Тогда
		КолонкиГруппировки = "НаправлениеДеятельности,Подразделение,Субконто1,Субконто2,Субконто3";
		Если ЕстьКорВыражения Тогда
			КолонкиГруппировки = КолонкиГруппировки + ",КорСубконто1,КорСубконто2,КорСубконто3";
		КонецЕсли;
		КолонкиСуммирования = "СуммаУпр,СуммаРегл,СуммаВал,Количество";
		СтрокиАналитики.Свернуть(КолонкиГруппировки, КолонкиСуммирования);
	КонецЕсли;
	
	Возврат СтрокиАналитики;
	
КонецФункции

// Условия отбора в этой процедуре должны соответствовать дополнительным условиям соединения записей
// в процедуре формирования корреспонденций
//
Процедура ВыполнитьДополнительныйОтборСтрокАналитики(ВыборкаДвижения, СтрокиАналитики)
	
	Если НЕ ВыборкаДвижения.УчитыватьХозОперацию Тогда
		КоличествоСтрок = СтрокиАналитики.Количество();
		Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
			СтрокаАналитики = СтрокиАналитики[КоличествоСтрок - ОбратныйИндекс];
			Если ЗначениеЗаполнено(СтрокаАналитики.НастройкаХозОперации)
				И СтрокаАналитики.НастройкаХозОперации <> ВыборкаДвижения.НастройкаХозОперации Тогда
				СтрокиАналитики.Удалить(СтрокаАналитики);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыборкаДвижения.ОбъектУчетаДт = ВыборкаДвижения.ОбъектУчетаКт
	И НЕ ВыборкаДвижения.СложнаяПроводкаДт
	И НЕ ВыборкаДвижения.СложнаяПроводкаКт
	   И СтрокиАналитики.Количество() > 1 Тогда
		АналитикаССуммамиДвижения = Новый Массив();
		
		Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
			Если СтрокаАналитики.СуммаУпр = ВыборкаДвижения.СуммаУпр
			   И СтрокаАналитики.СуммаРегл = ВыборкаДвижения.СуммаРегл Тогда
				АналитикаССуммамиДвижения.Добавить(СтрокаАналитики);
			КонецЕсли;
		КонецЦикла;
		
		Если АналитикаССуммамиДвижения.Количество() = 1 Тогда
			КоличествоСтрок = СтрокиАналитики.Количество();
			Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
				СтрокаАналитики = СтрокиАналитики[КоличествоСтрок - ОбратныйИндекс];
				Если СтрокаАналитики <> АналитикаССуммамиДвижения[0] Тогда
					СтрокиАналитики.Удалить(СтрокаАналитики);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверкаРавенстваБалансовыхРесурсов(ВыборкаДвижения, СтрокиАналитики, ДтКт)
	
	Если СтрокиАналитики.Количество() = 0 Тогда
		Возврат Ложь;
	ИначеЕсли ВыборкаДвижения["СложнаяПроводка" + ДтКт] Тогда
		Возврат Истина;
	ИначеЕсли ВыборкаДвижения["ИмяРегистра" + ДтКт] = ИмяРегистраСлужебныхОбъектовУчета() Тогда
		Возврат Истина;
	КонецЕсли;
	
	СуммаУпр = 0;
	СуммаРегл = 0;
	
	Для Каждого СтрокаАналитики Из СтрокиАналитики Цикл
		СуммаУпр = СуммаУпр + СтрокаАналитики.СуммаУпр;
		СуммаРегл = СуммаРегл + СтрокаАналитики.СуммаРегл;
	КонецЦикла;
	
	Возврат ВыборкаДвижения.СуммаУпр = СуммаУпр И ВыборкаДвижения.СуммаРегл = СуммаРегл;
	
КонецФункции

Процедура ДобавитьПростуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок)
	
	ВалютыОперативногоУчета = ВалютыОперативногоУчета(ВыборкаДвижения.Организация);
	УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(ВыборкаДвижения.ПланСчетов, ВыборкаДвижения.Организация);

	ФункциональнаяСумма = ФункциональнаяСумма(ВыборкаДвижения, ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов);
	СуммаПредставления = СуммаПредставления(ВыборкаДвижения, ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов);
	
	НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);
	
	ЗаполнитьБалансовыеИзмеренияИРеквизиты(НоваяПроводка, ВыборкаДвижения);
	ЗаполнитьБалансовыеРесурсы(НоваяПроводка, ФункциональнаяСумма, СуммаПредставления, УчетныеВалютыНаПланеСчетов);
	
	ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения, ВыборкаДвижения, СтрокиАналитикиДт[0], "Дт");
	ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения, ВыборкаДвижения, СтрокиАналитикиКт[0], "Кт");
	
	ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокиАналитикиДт[0], "Дт");
	ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокиАналитикиКт[0], "Кт");
	
	ИнвертироватьПроводкуПриНеобходимости(НоваяПроводка, ВыборкаДвижения, ПараметрыФормированияПроводок);
	
	МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
	
КонецПроцедуры

Функция ВалютыОперативногоУчета(Организация)
	
	ВалютыОперативногоУчета = Новый Структура();
	ВалютыОперативногоУчета.Вставить("ВалютаУпр", ЗначениеНастроекПовтИсп.ВалютаУправленческогоУчета());
	ВалютыОперативногоУчета.Вставить("ВалютаРегл", ЗначениеНастроекПовтИсп.ВалютаРегламентированногоУчетаОрганизации(Организация));
	
	Возврат ВалютыОперативногоУчета;
	
КонецФункции

Функция ФункциональнаяСумма(ДанныеРесурсов, ВалютыОперативногоУчета, ВалютыМеждународногоУчета)
	
	Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
		Сумма = ДанныеРесурсов.СуммаУпр;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
	Иначе //ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл
		Сумма = ДанныеРесурсов.СуммаРегл;
		ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

Функция СуммаПредставления(ДанныеРесурсов, ВалютыОперативногоУчета, ВалютыМеждународногоУчета, Корреспонденция = Истина)
	
	Если ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеУпр Тогда
		Если ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаУпр
		 ИЛИ ДанныеРесурсов.СуммаУпр = 0 Тогда
			Сумма = ДанныеРесурсов.СуммаУпр;
			ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
		ИначеЕсли ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаРегл
			И ДанныеРесурсов.СуммаРегл <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаРегл;
			ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
		ИначеЕсли Корреспонденция
			И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.ВалютаДт
			И ДанныеРесурсов.СуммаВалДт <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаВалДт;
			ВалютаРесурса = ДанныеРесурсов.ВалютаДт;
		ИначеЕсли Корреспонденция
			И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.ВалютаКт
			И ДанныеРесурсов.СуммаВалКт <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаВалКт;
			ВалютаРесурса = ДанныеРесурсов.ВалютаКт;
		ИначеЕсли НЕ Корреспонденция
			И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.Валюта
			И ДанныеРесурсов.СуммаВал <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаВал;
			ВалютаРесурса = ДанныеРесурсов.Валюта;
		Иначе
			Сумма = ДанныеРесурсов.СуммаУпр;
			ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
		КонецЕсли;
	Иначе //ВалютыМеждународногоУчета.УчетВФункциональнойВалюте = Перечисления.ВидыУчетаВФункциональнойВалюте.ВВалютеРегл
		Если ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаРегл
		 ИЛИ ДанныеРесурсов.СуммаРегл = 0 Тогда
			Сумма = ДанныеРесурсов.СуммаРегл;
			ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
		ИначеЕсли ВалютыМеждународногоУчета.Представления = ВалютыОперативногоУчета.ВалютаУпр
			И ДанныеРесурсов.СуммаУпр <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаУпр;
			ВалютаРесурса = ВалютыОперативногоУчета.ВалютаУпр;
		ИначеЕсли Корреспонденция
			И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.ВалютаДт
			И ДанныеРесурсов.СуммаВалДт <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаВалДт;
			ВалютаРесурса = ДанныеРесурсов.ВалютаДт;
		ИначеЕсли Корреспонденция
			И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.ВалютаКт
			И ДанныеРесурсов.СуммаВалКт <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаВалКт;
			ВалютаРесурса = ДанныеРесурсов.ВалютаКт;
		ИначеЕсли НЕ Корреспонденция
			И ВалютыМеждународногоУчета.Представления = ДанныеРесурсов.Валюта
			И ДанныеРесурсов.СуммаВал <> 0 Тогда
			Сумма = ДанныеРесурсов.СуммаВал;
			ВалютаРесурса = ДанныеРесурсов.Валюта;
		Иначе
			Сумма = ДанныеРесурсов.СуммаРегл;
			ВалютаРесурса = ВалютыОперативногоУчета.ВалютаРегл;
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("Сумма", Сумма);
	Результат.Вставить("Валюта", ВалютаРесурса);
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьБалансовыеИзмеренияИРеквизиты(НоваяПроводка, ВыборкаДвижения)
	
	НоваяПроводка.Период = ВыборкаДвижения.Период;
	НоваяПроводка.Регистратор = ВыборкаДвижения.Регистратор;
	НоваяПроводка.ПланСчетов = ВыборкаДвижения.ПланСчетов;
	НоваяПроводка.Организация = ВыборкаДвижения.Организация;
	
	НоваяПроводка.СчетДт = ВыборкаДвижения.СчетУчетаДт;
	НоваяПроводка.СчетКт = ВыборкаДвижения.СчетУчетаКт;
	
	НоваяПроводка.Содержание = ВыборкаДвижения.НастройкаХозОперацииПредставление;
	НоваяПроводка.Сторно = ВыборкаДвижения.РеквизитСторно;
	НоваяПроводка.ИдентификаторФинЗаписи = ВыборкаДвижения.ИдентификаторФинЗаписи;
	НоваяПроводка.НастройкаХозяйственнойОперации = ВыборкаДвижения.НастройкаХозОперации;
	
	Если ВыборкаДвижения.РучноеУточнениеПроводки Тогда
		МеждународныйУчетПроведениеСервер.ЗаполнитьСтатусПроводки(НоваяПроводка, 
			Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьБалансовыеРесурсы(НоваяПроводка, ФункциональнаяСумма, СуммаПредставления, УчетныеВалютыНаПланеСчетов)
	
	НоваяПроводка.Сумма = ФункциональнаяСумма.Сумма;
	НоваяПроводка.ВалютаХраненияСуммыФункциональной = ФункциональнаяСумма.Валюта;
	НоваяПроводка.ВалютаФункциональная = УчетныеВалютыНаПланеСчетов.Функциональная;
	
	НоваяПроводка.СуммаПредставления = СуммаПредставления.Сумма;
	НоваяПроводка.ВалютаХраненияСуммыПредставления = СуммаПредставления.Валюта;
	НоваяПроводка.ВалютаПредставления = УчетныеВалютыНаПланеСчетов.Представления;
	
КонецПроцедуры

Процедура ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения, ДанныеРесурсов, СтрокаАналитики, ДтКт, Корреспонденция = Истина)
	
	Если ВыборкаДвижения["Валютный" + ДтКт] Тогда
		НоваяПроводка["Валюта" + ДтКт] = ДанныеРесурсов["Валюта" + ?(Корреспонденция, ДтКт, "")];
		НоваяПроводка["ВалютнаяСумма" + ДтКт] = ДанныеРесурсов["СуммаВал" + ?(Корреспонденция, ДтКт, "")];
		Если НЕ ЗначениеЗаполнено(НоваяПроводка["Валюта" + ДтКт])
		   И НЕ ЗначениеЗаполнено(НоваяПроводка["ВалютнаяСумма" + ДтКт]) Тогда
			НоваяПроводка["Валюта" + ДтКт] = НоваяПроводка.ВалютаХраненияСуммыФункциональной;
			НоваяПроводка["ВалютнаяСумма" + ДтКт] = НоваяПроводка.Сумма;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборкаДвижения["Количественный" + ДтКт] Тогда
		НоваяПроводка["Количество" + ДтКт] = ДанныеРесурсов["Количество" + ?(Корреспонденция, ДтКт, "")];
	КонецЕсли;
	
	Если ВыборкаДвижения["ИмяРегистра" + ДтКт] <> ИмяРегистраСлужебныхОбъектовУчета() Тогда
		Если ВыборкаДвижения["УчетПоПодразделениям" + ДтКт] Тогда
			НоваяПроводка["Подразделение" + ДтКт] = СтрокаАналитики.Подразделение;
		КонецЕсли;
		Если ВыборкаДвижения["УчетПоНаправлениямДеятельности" + ДтКт] Тогда
			НоваяПроводка["НаправлениеДеятельности" + ДтКт] = СтрокаАналитики.НаправлениеДеятельности;
		КонецЕсли;
		
		КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
		Если ВыборкаДвижения["ИмяРегистра" + КорДтКт] = ИмяРегистраСлужебныхОбъектовУчета() Тогда
			Если ВыборкаДвижения["УчетПоПодразделениям" + КорДтКт] Тогда
				НоваяПроводка["Подразделение" + КорДтКт] = СтрокаАналитики.Подразделение;
			КонецЕсли;
			
			Если ВыборкаДвижения["УчетПоНаправлениямДеятельности" + КорДтКт] Тогда
				НоваяПроводка["НаправлениеДеятельности" + КорДтКт] = СтрокаАналитики.НаправлениеДеятельности;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокаАналитики, ДтКт)
	
	Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + ДтКт] Цикл
		НоваяПроводка["ВидСубконто" + ДтКт + НомерСубконто] = ВыборкаДвижения["ВидСубконто" + ДтКт + НомерСубконто];
		Если ВыборкаДвижения["ИмяРегистра" + ДтКт] <> ИмяРегистраСлужебныхОбъектовУчета() Тогда
			Если НЕ ВыборкаДвижения["КорВыражение" + ДтКт + НомерСубконто]
			 ИЛИ ЗначениеЗаполнено(СтрокаАналитики["Субконто" + НомерСубконто]) Тогда
				НоваяПроводка["Субконто" + ДтКт + НомерСубконто] = СтрокаАналитики["Субконто" + НомерСубконто];
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(СтрокаАналитики["Субконто" + НомерСубконто]) Тогда
			НоваяПроводка["Субконто" + ДтКт + НомерСубконто] = СтрокаАналитики["Субконто" + НомерСубконто];
		КонецЕсли;
	КонецЦикла;
	
	КорДтКт = ?(ДтКт = "Дт", "Кт", "Дт");
	
	Для НомерКорСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + КорДтКт] Цикл
		Если ВыборкаДвижения["КорВыражение" + КорДтКт + НомерКорСубконто]
		И НЕ ЗначениеЗаполнено(НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто]) Тогда
			НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто] = СтрокаАналитики["КорСубконто" + НомерКорСубконто];
		КонецЕсли;
	КонецЦикла;
	
	Если ВыборкаДвижения["ИмяРегистра" + КорДтКт] = ИмяРегистраСлужебныхОбъектовУчета() Тогда
		Для НомерКорСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + КорДтКт] Цикл
			Если НЕ ЗначениеЗаполнено(НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто])
				И НЕ ВыборкаДвижения["НеВычислятьСубконто" + КорДтКт + НомерКорСубконто] Тогда
				Для НомерСубконто = 1 По ВыборкаДвижения["КоличествоСубконто" + ДтКт] Цикл
					Если ВыборкаДвижения["ВидСубконто" + КорДтКт + НомерКорСубконто] = ВыборкаДвижения["ВидСубконто" + ДтКт + НомерСубконто] Тогда
						НоваяПроводка["Субконто" + КорДтКт + НомерКорСубконто] = СтрокаАналитики["Субконто" + НомерСубконто];
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнвертироватьПроводкуПриНеобходимости(НоваяПроводка, ВыборкаДвижения, ПараметрыФормированияПроводок)
	
	Если ВыборкаДвижения.ИнвертироватьПроводку Тогда
		РегистрыБухгалтерии.Международный.ИнвертироватьПроводку(
			НоваяПроводка,
			ПараметрыФормированияПроводок.ИнвертируемыеПоля,
			ПараметрыФормированияПроводок.ИнвертируемыеРесурсы,
			ПараметрыФормированияПроводок.КоличествоСубконто);
	КонецЕсли;
	
	Если ВыборкаДвижения.ИнвертироватьЗнакРесурсов Тогда
		Для Каждого ИмяРесурса Из ПараметрыФормированияПроводок.ИнвертируемыеРесурсы Цикл
			Если ЗначениеЗаполнено(НоваяПроводка[ИмяРесурса]) Тогда
				НоваяПроводка[ИмяРесурса] = -НоваяПроводка[ИмяРесурса];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСложнуюПроводку(ТаблицаПроводок, ВыборкаДвижения, СтрокиАналитикиДт, СтрокиАналитикиКт, ПараметрыФормированияПроводок);
	
	ВалютыОперативногоУчета = ВалютыОперативногоУчета(ВыборкаДвижения.Организация);
	УчетныеВалютыНаПланеСчетов = МеждународныйУчетСерверПовтИсп.УчетныеВалюты(ВыборкаДвижения.ПланСчетов, ВыборкаДвижения.Организация);
	
	Если СтрокиАналитикиДт.Количество() > 1 Тогда
		МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
		ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
	Иначе
		ОднаАналитика = Новый Структура("ДтКт,СтрокиАналитики", "Дт", СтрокиАналитикиДт);
		МногоАналитик = Новый Структура("ДтКт,СтрокиАналитики", "Кт", СтрокиАналитикиКт);
	КонецЕсли;
	
	РесурсыМногихАналитик = ПересчитанныеРесурсыМногихАналитик(ВыборкаДвижения, МногоАналитик, ПараметрыФормированияПроводок);
	РесурсыОднойАналитики = РаспределенныеРесурсыОднойАналитики(ВыборкаДвижения, ОднаАналитика, РесурсыМногихАналитик, ПараметрыФормированияПроводок);
	
	ИндексСтрокиАналитики = 0;
	Для Каждого СтрокаАналитики Из МногоАналитик.СтрокиАналитики Цикл
		ФункциональнаяСумма = ФункциональнаяСумма(РесурсыМногихАналитик[ИндексСтрокиАналитики], ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов);
		СуммаПредставления = СуммаПредставления(РесурсыМногихАналитик[ИндексСтрокиАналитики], ВалютыОперативногоУчета, УчетныеВалютыНаПланеСчетов, Ложь);

		НоваяПроводка = ОбщегоНазначения.СкопироватьРекурсивно(ПараметрыФормированияПроводок.СтруктураПроводки);

		ЗаполнитьБалансовыеИзмеренияИРеквизиты(НоваяПроводка, ВыборкаДвижения);
		ЗаполнитьБалансовыеРесурсы(НоваяПроводка, ФункциональнаяСумма, СуммаПредставления, УчетныеВалютыНаПланеСчетов);
		
		ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения,
			РесурсыМногихАналитик[ИндексСтрокиАналитики], СтрокаАналитики, МногоАналитик.ДтКт, Ложь);
		ЗаполнитьНебалансовыеИзмеренияИРесурсы(НоваяПроводка, ВыборкаДвижения,
			РесурсыОднойАналитики[ИндексСтрокиАналитики], ОднаАналитика.СтрокиАналитики[0], ОднаАналитика.ДтКт, Ложь);
		
		ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, СтрокаАналитики, МногоАналитик.ДтКт);
		ЗаполнитьСубконтоСчета(НоваяПроводка, ВыборкаДвижения, ОднаАналитика.СтрокиАналитики[0], ОднаАналитика.ДтКт);
		
		ИнвертироватьПроводкуПриНеобходимости(НоваяПроводка, ВыборкаДвижения, ПараметрыФормированияПроводок);
		
		МеждународныйУчетПроведениеСервер.ДобавитьПроводкуВТаблицуПроводок(ТаблицаПроводок, НоваяПроводка);
		ИндексСтрокиАналитики = ИндексСтрокиАналитики + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПересчитанныеРесурсыМногихАналитик(ВыборкаДвижения, МногоАналитик, ПараметрыФормированияПроводок)
	
	ОписаниеСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаСуммы, ПараметрыФормированияПроводок.ТочностьСуммы);
	ОписаниеКоличества = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаКоличества, ПараметрыФормированияПроводок.ТочностьКоличества);
	
	ТаблицаРесурсов = Новый ТаблицаЗначений();
	ТаблицаРесурсов.Колонки.Добавить("СуммаУпр", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("СуммаРегл", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРесурсов.Колонки.Добавить("СуммаВал", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("Количество", ОписаниеКоличества);
	
	ПересчитатьБаланс = ВыборкаДвижения["СложнаяПроводка" + МногоАналитик.ДтКт];
	ПересчитатьСуммыВал = ПересчитатьБаланс
		И ВыборкаДвижения["Валютный" + МногоАналитик.ДтКт]
		И ВыборкаДвижения["СуммаВал" + МногоАналитик.ДтКт] <> 0;
	ПересчитатьКоличества = ПересчитатьБаланс
		И ВыборкаДвижения["Количественный" + МногоАналитик.ДтКт]
		И ВыборкаДвижения["Количество" + МногоАналитик.ДтКт] <> 0;
	
	СуммыУпр = Новый Массив();
	СуммыРегл = Новый Массив();
	СуммыВал = Новый Массив();
	Количества = Новый Массив();
	
	Для Каждого СтрокаАналитики Из МногоАналитик.СтрокиАналитики Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.Валюта = ВыборкаДвижения["Валюта" + МногоАналитик.ДтКт];
		
		Если ПересчитатьБаланс Тогда
			СуммыУпр.Добавить(СтрокаАналитики.СуммаУпр);
			СуммыРегл.Добавить(СтрокаАналитики.СуммаРегл);
			Если ПересчитатьСуммыВал Тогда
				СуммыВал.Добавить(СтрокаАналитики.СуммаВал);
			КонецЕсли;
			Если ПересчитатьКоличества Тогда
				Количества.Добавить(СтрокаАналитики.Количество);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАналитики, "СуммаУпр,СуммаРегл,СуммаВал,Количество");
		КонецЕсли;
	КонецЦикла;
	
	Если ПересчитатьБаланс Тогда
		РаспределениеСуммыУпр = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения.СуммаУпр, СуммыУпр, ПараметрыФормированияПроводок.ТочностьСуммы);
		Если РаспределениеСуммыУпр <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыУпр, "СуммаУпр");
		КонецЕсли;
		
		РаспределениеСуммыРегл = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения.СуммаРегл, СуммыРегл, ПараметрыФормированияПроводок.ТочностьСуммы);
		Если РаспределениеСуммыРегл <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыРегл, "СуммаРегл");
		КонецЕсли;
		
		Если ПересчитатьСуммыВал Тогда
			РаспределениеСуммыВал = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				ВыборкаДвижения["СуммаВал" + МногоАналитик.ДтКт], СуммыВал, ПараметрыФормированияПроводок.ТочностьСуммы);
			Если РаспределениеСуммыВал <> Неопределено Тогда
				ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыВал, "СуммаВал");
			КонецЕсли;
		КонецЕсли;
		
		Если ПересчитатьКоличества Тогда
			РаспределениеКоличества = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
				ВыборкаДвижения["Количество" + МногоАналитик.ДтКт], Количества, ПараметрыФормированияПроводок.ТочностьКоличества);
			Если РаспределениеКоличества <> Неопределено Тогда
				ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеКоличества, "Количество");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРесурсов;
	
КонецФункции

Функция РаспределенныеРесурсыОднойАналитики(ВыборкаДвижения, ОднаАналитика, РесурсыМногихАналитик, ПараметрыФормированияПроводок)
	
	ОписаниеСуммы = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаСуммы, ПараметрыФормированияПроводок.ТочностьСуммы);
	ОписаниеКоличества = ОбщегоНазначения.ОписаниеТипаЧисло(ПараметрыФормированияПроводок.ДлинаКоличества, ПараметрыФормированияПроводок.ТочностьКоличества);
	
	ТаблицаРесурсов = Новый ТаблицаЗначений();
	ТаблицаРесурсов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаРесурсов.Колонки.Добавить("СуммаВал", ОписаниеСуммы);
	ТаблицаРесурсов.Колонки.Добавить("Количество", ОписаниеКоличества);
	
	РаспределитьСуммуВал = ВыборкаДвижения["Валютный" + ОднаАналитика.ДтКт]
		И ВыборкаДвижения["СуммаВал" + ОднаАналитика.ДтКт] <> 0;
	РаспределитьКоличество = ВыборкаДвижения["Количественный" + ОднаАналитика.ДтКт]
		И ВыборкаДвижения["Количество" + ОднаАналитика.ДтКт] <> 0;
	
	СуммыУпр = Новый Массив();
	СуммыРегл = Новый Массив();
	
	ВсеСуммыУпрРавныНулю = Истина;
	ВсеСуммыУпрНеРавныНулю = Истина;
	ВсеСуммыРеглРавныНулю = Истина;
	ВсеСуммыРеглНеРавныНулю = Истина;
	
	Для Каждого СтрокаРесурсовМногих Из РесурсыМногихАналитик Цикл
		НоваяСтрока = ТаблицаРесурсов.Добавить();
		НоваяСтрока.Валюта = ВыборкаДвижения["Валюта" + ОднаАналитика.ДтКт];
		
		Если РаспределитьСуммуВал ИЛИ РаспределитьКоличество Тогда
			СуммыУпр.Добавить(СтрокаРесурсовМногих.СуммаУпр);
			СуммыРегл.Добавить(СтрокаРесурсовМногих.СуммаРегл);
			Если СтрокаРесурсовМногих.СуммаУпр = 0 Тогда
				ВсеСуммыУпрНеРавныНулю = Ложь;
			Иначе
				ВсеСуммыУпрРавныНулю = Ложь;
			КонецЕсли;
			Если СтрокаРесурсовМногих.СуммаРегл = 0 Тогда
				ВсеСуммыРеглНеРавныНулю = Ложь;
			Иначе
				ВсеСуммыРеглРавныНулю = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ВсеСуммыУпрНеРавныНулю Тогда
		Коэффициенты = СуммыУпр;
	ИначеЕсли ВсеСуммыРеглНеРавныНулю Тогда
		Коэффициенты = СуммыРегл;
	ИначеЕсли НЕ ВсеСуммыУпрРавныНулю Тогда
		Коэффициенты = СуммыУпр;
	ИначеЕсли НЕ ВсеСуммыРеглРавныНулю Тогда
		Коэффициенты = СуммыРегл;
	Иначе
		Возврат ТаблицаРесурсов;
	КонецЕсли;
	
	Если РаспределитьСуммуВал Тогда
		РаспределениеСуммыВал = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения["СуммаВал" + ОднаАналитика.ДтКт], Коэффициенты, ПараметрыФормированияПроводок.ТочностьСуммы);
		Если РаспределениеСуммыВал <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеСуммыВал, "СуммаВал");
		КонецЕсли;
	КонецЕсли;
	
	Если РаспределитьКоличество Тогда
		РаспределениеКоличества = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(
			ВыборкаДвижения["Количество" + ОднаАналитика.ДтКт], Коэффициенты, ПараметрыФормированияПроводок.ТочностьКоличества);
		Если РаспределениеКоличества <> Неопределено Тогда
			ТаблицаРесурсов.ЗагрузитьКолонку(РаспределениеКоличества, "Количество");
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТаблицаРесурсов;
	
КонецФункции

#КонецОбласти

#КонецОбласти