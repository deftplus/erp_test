
#Область ПрограммныйИнтерфейс

#Область ПодключаемыеКоманды
// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт
	
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	//++ Локализация
	
	//++ НЕ УТ
	КомандаОтчет = Отчеты.ПаспортКонтракта.ДобавитьКомандуОтчета(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли; 
	
	КомандаОтчет = Отчеты.СведенияОКооперации.ДобавитьКомандуСведенияОКооперацииПриложение1(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ТипДоговора", 
															Перечисления.ТипыДоговоров.СПокупателем, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	
	КомандаОтчет = Отчеты.СведенияОКооперации.ДобавитьКомандуСведенияОКооперацииПриложения2и3(КомандыОтчетов);
	Если КомандаОтчет <> Неопределено Тогда
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ПлатежиПо275ФЗ", Истина, ВидСравненияКомпоновкиДанных.Равно);
		ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(КомандаОтчет, "ТипДоговора", 
															Перечисления.ТипыДоговоров.СПокупателем, ВидСравненияКомпоновкиДанных.Равно);
	КонецЕсли;
	//-- НЕ УТ

	//-- Локализация
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы

// Обработчик события ПриСозданииНаСервере форм элемента справочника ДоговорыКонтрагентов.
//
// Параметры:
//  Форма                - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//  Отказ                - Булево - признак отказа от создания формы.
//  СтандартнаяОбработка - Булево - признак выполнения стандартной (системной) обработки события.
//
Процедура ПриСозданииНаСервереФормаЭлемента(Форма, Отказ, СтандартнаяОбработка) Экспорт
	НастройкиСистемыЛокализация.УстановитьВидимостьЭлементовЛокализации(Форма);
	//++ Локализация
	Объект = Форма.Объект;
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	ПараметрыПроцедуры = Новый Структура("ВариантОтображения", "Однострочный");
	СПАРКРиски.ПриСозданииНаСервере(
		Форма,
		Неопределено,
		Объект.Контрагент,
		Перечисления.ЮрФизЛицо.ВидКонтрагентаСПАРКРиски(Объект.Контрагент),
		ПараметрыПроцедуры);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	//-- Локализация
КонецПроцедуры

// Обработчик события ОбработкаПроверкиЗаполненияНаСервере
// 
// Параметры:
// 	Отказ - Булево - признак отказа.
// 	ПроверяемыеРеквизиты - Массив - массив путей к проверяемым реквизитам.
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика.
//
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты, Форма) Экспорт
	//++ Локализация
	//-- Локализация
	Возврат
КонецПроцедуры

// Вызывается при создании/чтении формы на сервере
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	//++ Локализация
	//++ НЕ УТ
	Форма.ПоддержкаПлатежей275ФЗ = ПолучитьФункциональнуюОпцию("ПоддержкаПлатежейВСоответствииС275ФЗ");
	//-- НЕ УТ
	Форма.Элементы.ЛокализацияГруппаНастроитьГОЗ.Видимость = Форма.ПоддержкаПлатежей275ФЗ;
	//++ НЕ УТ
	Если Форма.Объект.ДоговорыСЗаказчиками.Количество() Тогда
		Форма.КонтрактСЗаказчиком = Форма.Объект.ДоговорыСЗаказчиками[0].ДоговорСЗаказчиком;
	КонецЕсли;
	
	ДоговорыКонтрагентовЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	Форма.ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект);
	Форма.Элементы.ЛокализацияГруппаЗаполнениеРаздела7.Видимость = (Форма.Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем);
	Форма.АдресПодтверждающихДокументовВоВременномХранилище = ПоместитьВоВременноеХранилище(
		Форма.Объект.ПодтверждающиеДокументы.Выгрузить(),
		Форма.УникальныйИдентификатор);
	//-- НЕ УТ
	
	ИспользоватьЭДО = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	ИспользоватьМаркировку = ПолучитьФункциональнуюОпцию("ВестиУчетМаркировкиПродукцииВГИСМ") или ПолучитьФункциональнуюОпцию("ВестиУчетМаркируемойПродукцииИСМП");
	
	Если (Не ИспользоватьЭДО) или (Не ИспользоватьМаркировку) Тогда 
		Форма.Элементы.ЛокализацияГруппаВариантВыбытияМаркируемойПродукции.Видимость = Ложь;
	КонецЕсли;
	//-- Локализация
КонецПроцедуры

// Обработчик события ПослеЗаписиНаСервере формы элемента справочника ДоговорыКонтрагентов
//
// Параметры:
//  ТекущийОбъект   - СправочникОбъект - объект, который будет прочитан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	
	// ИнтернетПоддержкаПользователей.СПАРКРиски
	СПАРКРиски.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
	// Конец ИнтернетПоддержкаПользователей.СПАРКРиски
	
	//-- Локализация
КонецПроцедуры

// Обработчик события ПередЗаписьюНаСервере формы элемента справочника ДоговорыКонтрагентов
//
// Параметры:
//  Отказ           - Булево - признак отказа.
//  ТекущийОбъект   - СправочникОбъект - объект, который будет прочитан.
//  ПараметрыЗаписи - Структура - структура, содержащая параметры записи.
//  Форма           - ФормаКлиентскогоПриложения - форма, для которой выполняется обработчик.
//
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Форма) Экспорт
	//++ Локализация
	
	//++ НЕ УТ
	Если ТекущийОбъект.ПлатежиПо275ФЗ Тогда
		Если (Форма.Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
				Или Форма.Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком)
			И Форма.ВариантПлатежаГОЗ = 1 Тогда
			ТекущийОбъект.ДоговорыСЗаказчиками.Очистить();
			НоваяСтрока = ТекущийОбъект.ДоговорыСЗаказчиками.Добавить();
			НоваяСтрока.ДоговорСЗаказчиком = Форма.КонтрактСЗаказчиком;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

Процедура ПриОкончанииИзмененияРеквизита(ИмяЭлемента, Форма, ПараметрыОбработки) Экспорт
	Если ТипЗнч(ИмяЭлемента) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяЭлемента Цикл
			ПриОкончанииИзмененияРеквизита(ТекЭлемент, Форма, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация
	//++ НЕ УТ
	Если ИмяЭлемента = "БанковскийСчет" Тогда
		БанковскийСчетПриИзменении(Форма);
	КонецЕсли;
	Если ИмяЭлемента = "ГосударственныйКонтракт" Тогда
		ГосударственныйКонтрактПриИзменении(Форма);
	КонецЕсли;
	Если ИмяЭлемента = "Организация" Тогда
		Если ЗначениеЗаполнено(Форма.КонтрактСЗаказчиком) Тогда
			ОрганизацияДоговораСЗаказчиком = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.КонтрактСЗаказчиком, "Организация");
			Если Форма.Объект.Организация <> ОрганизацияДоговораСЗаказчиком Тогда
				Форма.КонтрактСЗаказчиком = Неопределено;
				Форма.Объект.ДоговорыСЗаказчиками.Очистить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	Если ИмяЭлемента = "ТипДоговора" Тогда
		ТипДоговораПриИзменении(Форма);
	КонецЕсли;
	Если ИмяЭлемента = "НалогообложениеНДС" Тогда
		НалогообложениеНДСПриИзменении(Форма);
	КонецЕсли;

	//-- Локализация
КонецПроцедуры

Процедура ВыполнитьКомандуЛокализации(Форма, ИмяКоманды, ПараметрыОбработки) Экспорт
	
	Если ТипЗнч(ИмяКоманды) = Тип("Массив") Тогда
		Для каждого ТекЭлемент Из ИмяКоманды Цикл
			ВыполнитьКомандуЛокализации(Форма, ТекЭлемент, ПараметрыОбработки);
		КонецЦикла;
	КонецЕсли;
	//++ Локализация
	
	//++ НЕ УТ
	Если ИмяКоманды = "ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ" Тогда
		ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ(ПараметрыОбработки, Форма)
	КонецЕсли;
	//-- НЕ УТ
	
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийМодуляОбъекта

// Обработчик события ОбработкаПроверкиЗаполнения объекта справочника ДоговорыКонтрагентов.
// См. описание платформенного метода ОбработкаПроверкиЗаполнения.
// 
// Параметры:
//   Отказ - Булево
//   ПроверяемыеРеквизиты - Массив из Строка
//   МассивНепроверяемыхРеквизитов - Массив из Строка
//   СправочникОбъект - СправочникОбъект.ДоговорыКонтрагентов
//
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов, СправочникОбъект) Экспорт
	//++ Локализация

	Перем Ошибки;
	
	//++ НЕ УТ
	ПроверяемыеРеквизиты.Добавить("ГосударственныйКонтракт");
	//-- НЕ УТ
	
	//++ НЕ УТ
	Если Не СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
	//-- НЕ УТ
		МассивНепроверяемыхРеквизитов.Добавить("ГосударственныйКонтракт");
	//++ НЕ УТ
	КонецЕсли;
	//-- НЕ УТ
	
	//++ НЕ УТ
	Если Не СправочникОбъект.ПлатежиПо275ФЗ
		Или (СправочникОбъект.ТипДоговора <> Перечисления.ТипыДоговоров.СПоставщиком
			И СправочникОбъект.ТипДоговора <> Перечисления.ТипыДоговоров.СПереработчиком) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ТипПлатежаФЗ275");
	КонецЕсли;
	
	Если СправочникОбъект.ПлатежиПо275ФЗ
		И (СправочникОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком
			Или СправочникОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком) Тогда
		
		ДенежныеСредстваСерверЛокализация.ОбработкаПроверкиЗаполненияПодтверждающиеДокументы(СправочникОбъект, Отказ, ПроверяемыеРеквизиты, Ошибки);
		ДенежныеСредстваСерверЛокализация.ПроверитьЗаполнениеРеквизитовПлатежаГОЗ(СправочникОбъект, Отказ);
		
		Если СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
			Если ЗначениеЗаполнено(СправочникОбъект.БанковскийСчет) И ЗначениеЗаполнено(СправочникОбъект.ГосударственныйКонтракт)
				И СправочникОбъект.ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчет, "ГосударственныйКонтракт") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
						|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
					СправочникОбъект,
					"БанковскийСчет",,
					Отказ);
			КонецЕсли;
			Если ЗначениеЗаполнено(СправочникОбъект.БанковскийСчетКонтрагента) И ЗначениеЗаполнено(СправочникОбъект.ГосударственныйКонтракт)
				И СправочникОбъект.ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчетКонтрагента, "ГосударственныйКонтракт") Тогда
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
						|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
					СправочникОбъект,
					"БанковскийСчетКонтрагента",,
					Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СправочникОбъект.ПлатежиПо275ФЗ
		И (СправочникОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
			//++ НЕ УТКА
			Или СправочникОбъект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем
			//-- НЕ УТКА
			) Тогда
		
		Если ЗначениеЗаполнено(СправочникОбъект.БанковскийСчет) И ЗначениеЗаполнено(СправочникОбъект.ГосударственныйКонтракт)
			И СправочникОбъект.ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчет, "ГосударственныйКонтракт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
					|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
				СправочникОбъект,
				"БанковскийСчет",,
				Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(СправочникОбъект.БанковскийСчетКонтрагента) И ЗначениеЗаполнено(СправочникОбъект.ГосударственныйКонтракт)
			И СправочникОбъект.ГосударственныйКонтракт <> ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчетКонтрагента, "ГосударственныйКонтракт") Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Государственный контракт, к которому привязан банковский счет, не должен отличаться от контракта, выбранного в договоре.';
					|en = 'State contract to which the bank account is linked cannot differ from the contract selected in the contract.'"),
				СправочникОбъект,
				"БанковскийСчетКонтрагента",,
				Отказ);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
		
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки);

	//-- Локализация
КонецПроцедуры

//  см. описание платформенного метода ПередЗаписью
// Обработчик события ПередЗаписью объекта справочника ДоговорыКонтрагентов
//
// Параметры:
// Отказ - Булево
// СправочникОбъект - СправочникОбъект
//
Процедура ПередЗаписью(Отказ, СправочникОбъект) Экспорт
	//++ Локализация
	//++ НЕ УТ
	Если Не СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
		СправочникОбъект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	Если Не СправочникОбъект.ПлатежиПо275ФЗ Тогда
		СправочникОбъект.ТипПлатежаФЗ275 = Неопределено;
		СправочникОбъект.ПодтверждающиеДокументы.Очистить();
	КонецЕсли;
	
	Если Не СправочникОбъект.ПлатежиПо275ФЗ Или Не СправочникОбъект.ДоговорСУчастникомГОЗ Тогда
		СправочникОбъект.ДоговорыСЗаказчиками.Очистить();
	КонецЕсли;
	//-- НЕ УТ
	
	Если ЗначениеЗаполнено(СправочникОбъект.Дата) И ЗначениеЗаполнено(СправочникОбъект.Номер) И Не СправочникОбъект.ПлатежиПо275ФЗ Тогда
		СправочникОбъект.ИдентификаторПлатежа = ОбщегоНазначенияУТ.ПолучитьУникальныйИдентификаторПлатежа(СправочникОбъект);
	//++ НЕ УТ
	ИначеЕсли СправочникОбъект.ПлатежиПо275ФЗ И ЗначениеЗаполнено(СправочникОбъект.БанковскийСчет) Тогда
		СправочникОбъект.ИдентификаторПлатежа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СправочникОбъект.БанковскийСчет, "ГосударственныйКонтракт.Код");
	//-- НЕ УТ
	Иначе
		СправочникОбъект.ИдентификаторПлатежа = Неопределено;
	КонецЕсли;
	
	//-- Локализация	
КонецПроцедуры

// Обработчик события ПриКопировании объекта справочника ДоговорыКонтрагентов
//  см. описание платформенного метода ПриКопировании
//
// Параметры:
// ОбъектКопирования - СправочникОбъект
// СправочникОбъект - СправочникОбъект
Процедура ПриКопировании(ОбъектКопирования, СправочникОбъект) Экспорт
	//++ Локализация
	ИдентификаторПлатежа = Неопределено;
	//-- Локализация
КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

// Устанавливает условное оформление формы
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - форма обработчика
//
Процедура УстановитьУсловноеОформление(Форма) Экспорт
	УсловноеОформление = Форма.УсловноеОформление;
	Элементы =  Форма.Элементы;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработчикиСобытийЭлементовШапкиФормы_Служебные
//++ Локализация

//++ НЕ УТ

Процедура БанковскийСчетПриИзменении(Форма)
	
	Госконтракт = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Форма.Объект.БанковскийСчет, "ГосударственныйКонтракт");
	Если ЗначениеЗаполнено(Госконтракт) Тогда
		Форма.Объект.ПлатежиПо275ФЗ = Истина;
		Форма.Объект.ДоговорСУчастникомГОЗ = Истина;
		Форма.Объект.ГосударственныйКонтракт = Госконтракт;
		Форма.ВариантПлатежаГОЗ = 1;
		Форма.Объект.ТипПлатежаФЗ275 = Справочники.ТипыПлатежейФЗ275.СписаниеНаОтдельныйСчет;
		ПриОкончанииИзмененияРеквизита("ГосударственныйКонтракт", Форма, Неопределено);
		ДоговорыКонтрагентовЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ГосударственныйКонтрактПриИзменении(Форма)
	
	Форма.КонтрактСЗаказчиком = ПолучитьКонтрактСЗаказчиком(Форма.Объект.ГосударственныйКонтракт, Форма.Объект.Организация);
	
КонецПроцедуры
//-- НЕ УТ

Процедура НалогообложениеНДСПриИзменении(Форма)
	
	Если Форма.Объект.НалогообложениеНДС = Перечисления.ТипыНалогообложенияНДС.НалоговыйАгентПоНДС  Тогда 
		Форма.Объект.УчетАгентскогоНДС = Истина;
	Иначе
		Форма.Объект.УчетАгентскогоНДС = Ложь;
		Форма.Объект.ВидАгентскогоДоговора = Перечисления.ВидыАгентскихДоговоров.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

// Параметры:
// 	Форма - ФормаКлиентскогоПриложения
//
Процедура ТипДоговораПриИзменении(Форма)
	Объект = Форма.Объект;
	
	ОперацииЗакупки = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика);
	ОперацииИмпорта = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту);
	ОперацииВСтранахЕАЭС = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС);
	
	РеквизитыПартнера = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Партнер, "Клиент, Поставщик");
	Если ЗначениеЗаполнено(Объект.Партнер)
		И (Не РеквизитыПартнера.Клиент
			И (Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию))
		И (Не РеквизитыПартнера.Поставщик
			И (ОперацииЗакупки.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или ОперацииИмпорта.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или ОперацииВСтранахЕАЭС.Найти(Объект.ХозяйственнаяОперация) <> Неопределено
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
				Или Объект.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи)) Тогда
		
		Объект.Партнер    = Справочники.Партнеры.ПустаяСсылка();
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		
	КонецЕсли;
	
	Если Не (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем
		//++ НЕ УТ
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПереработчиком
		//++ НЕ УТКА
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СДавальцем
		//-- НЕ УТКА
		//-- НЕ УТ
		Или Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПоставщиком) Тогда
		Объект.ПлатежиПо275ФЗ = Ложь;
		Объект.ДоговорСУчастникомГОЗ = Ложь;
	КонецЕсли;
	//++ НЕ УТ
	ДоговорыКонтрагентовЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	Форма.Элементы.ЛокализацияГруппаЗаполнениеРаздела7.Видимость = (Объект.ТипДоговора = Перечисления.ТипыДоговоров.СПокупателем);
	//-- НЕ УТ
КонецПроцедуры
//-- Локализация
#КонецОбласти

#Область ПрочиеСлужебныеПроцедуры

//++ Локализация

//++ НЕ УТ

Функция ПолучитьКонтрактСЗаказчиком(ГосударственныйКонтракт, Организация) Экспорт
	
	КонтрактСЗаказчиком = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Ссылка КАК ДоговорСсылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов
	|ГДЕ
	|	ГосударственныйКонтракт = &Госконтракт
	|	И Организация = &Организация
	|	И ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
	|	И НЕ ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Ссылка
	|ИЗ
	|	Справочник.ДоговорыМеждуОрганизациями
	|ГДЕ
	|	ГосударственныйКонтракт = &Госконтракт
	|	И НЕ ПометкаУдаления
	|";
	Запрос.УстановитьПараметр("Госконтракт", ГосударственныйКонтракт);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 1 Тогда
		КонтрактСЗаказчиком = Результат[0].ДоговорСсылка;
	КонецЕсли;
	
	Возврат КонтрактСЗаказчиком
КонецФункции

Процедура ЗаполнитьДоговорПоДаннымФормыНастройкиГОЗ(Результат, Форма) Экспорт
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	ЗаполнитьЗначенияСвойств(Форма.Объект, Результат);
	ПодтверждающиеДокументы = ПолучитьИзВременногоХранилища(Результат.АдресПодтверждающихДокументовВоВременномХранилище);
	ПодтверждающиеДокументыОбъекта = Форма.Объект.ПодтверждающиеДокументы;
	ПодтверждающиеДокументыОбъекта.Очистить();
	Для каждого ТекСтрока Из ПодтверждающиеДокументы Цикл
		НоваяСтрока = ПодтверждающиеДокументыОбъекта.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Форма.Модифицированность = Истина;
	ДоговорыКонтрагентовЛокализацияКлиентСервер.УправлениеНастройкойГОЗ(Форма);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(Форма, Форма.Объект)
КонецПроцедуры

//-- НЕ УТ

//-- Локализация
#КонецОбласти

#КонецОбласти