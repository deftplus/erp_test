
#Область ВнешниеФункцииМодуля


// Получить пустую структуру параметров элиминации.
// 
// Возвращаемое значение:
//   - Структура:
//		- ДокументЭлиминации - ДокументСсылка.Элиминация -
//			документ для которого нужно заполнить регистр.
//		- Сценарий - СправочникСсылка.Сценарии - сценарий по котому отбираются
//			данные для элиминации.
//		- ПериодОтчета - СправочникСсылка.Периоды - период по котому отбираются
//			данные для элиминации.
//		- ОрганизацияДляЭлиминации - СправочникСсылка.Организации - организация
//			в данные которой будут записаны проводки/значения показателей.
//		- ПериметрДляЭлиминации - ДокументСсылка.УправлениеПериодомСценария.
//
Функция ПолучитьПустыеПараметрыЭлиминации() Экспорт
	Возврат Новый Структура(
		"ДокументЭлиминации,
		|Сценарий,
		|ПериодОтчета,
		|ОрганизацияДляЭлиминации,
		|ПериметрДляЭлиминации");
КонецФункции

// Заполнить регистр сведений ПроводкиДляЭлиминации.
//
// Параметры:
//  ПараметрыЭлиминации - Структура - параметры заполнения.
//		См. функцию ПолучитьПустыеПараметрыЭлиминации().
//
Процедура ЗаполнитьРегистрПроводкиДляЭлиминации(ПараметрыЭлиминации) Экспорт
	
	Попытка
		
		ТекДата = ТекущаяДатаСеанса();
		флОтладка = ВключенаОтладка(ПараметрыЭлиминации);
		НомерЗаписи = 1; // Нумерация строк регистра для данного документа
		
		ДанныеДляЭлиминации = ПолучитьДанныеДляЭлиминации(ТекДата, ПараметрыЭлиминации);
		Если НЕ ЭтоКорректныеДанныеДляЭлиминации(ПараметрыЭлиминации, ДанныеДляЭлиминации) Тогда
			// Ошибки в протоколе.
			Возврат;
		КонецЕсли;
		
		ТЗ_КурсыВалют = ДанныеДляЭлиминации.ТЗ_КурсыВалют;
		ПараметрыДляЗапросаЭлиминации = ПолучитьБазовыеПараметрыДляЗапросаЭлиминации(
			ПараметрыЭлиминации);
		ПараметрыДляЗапросаЭлиминации.ТекДата = ТекДата;
		ОписаниеГлавнойОрганизации = ДанныеДляЭлиминации.ОписаниеГлавнойОрганизации;
		
		КурсГлПоВидуЗначения = Новый Соответствие();
		КурсГлПоВидуЗначения.Вставить(
			ОписаниеГлавнойОрганизации[0].ВидЗначения, 
			ОписаниеГлавнойОрганизации[0].КурсГр);
			
		ПараметрыДляЗапросаЭлиминации.ВалютаГр = 
			ОписаниеГлавнойОрганизации[0].ВалютаГр;
		ПараметрыДляЗапросаЭлиминации.ГлавнаяОрганизация = 
			ОписаниеГлавнойОрганизации[0].ГлавнаяОрганизация;

		РегПроводок = ПолучитьРегистрДляЗаписиПроводокДляЭлиминации(
			ПараметрыЭлиминации.ДокументЭлиминации);
			
		ТабДопАналитик = СверкаВГОУХ.СоздатьТаблицуДопАналитик();
		ТЗОрганизацийПоВидамЗначений = ДанныеДляЭлиминации.ТЗОрганизацийПоВидамЗначений;
		флМенеджерВременныхТаблицНеУстановлен = Истина;
		
		ВыборкаНастройкиСверки = ДанныеДляЭлиминации.ВыборкаНастройкиСверки;
		Пока ВыборкаНастройкиСверки.Следующий() Цикл
			
			РазделВГО = ВыборкаНастройкиСверки.РазделВГО;
			ШаблонСверкиВГО = РазделВГО.Владелец;
			БезТрансляции = ШаблонСверкиВГО.БезТрансляции ИЛИ (ШаблонСверкиВГО.ТрансляцияПлановСчетовНаМСФОДляЭлиминации.Количество() = 0);
			ПараметрыДляЗапросаЭлиминации.РазделВГО = РазделВГО;
			СпособЭлиминации = РазделВГО.СпособЭлиминации;
			ВидЗначенияКурса = РазделВГО.ВидЗначения;
			
			ПараметрыДляЗапросаЭлиминации.ВидЗначенияКурса = ВидЗначенияКурса;
			
			ТЗОрганизаций = ТЗОрганизацийПоВидамЗначений.Скопировать(Новый Структура("ВидЗначения", ВидЗначенияКурса));
			Если ТЗОрганизаций.Количество() = 0 Тогда
				ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, Неопределено,
					СтрШаблон(Нстр("ru = 'Невозможно определить обобщенные курсы валют для вида значения курса: %1.'"), 
						ВидЗначенияКурса));
			КонецЕсли;
			
			ПараметрыДляЗапросаЭлиминации.КурсГр = КурсГлПоВидуЗначения[ВидЗначенияКурса];
			
			Если СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов Тогда
				
				флИсключитьВыручку					= Истина;//Дт СчетУчета Кт ТехСчет:Сумма(кроме ВНА)
				флИсключитьСебестоимость			= Истина;//Дт ДР Кт ТехСчет: СуммаСс(для продавца)
				флИсключитьНРП						= Истина;//1. Дт МПЗ Кт ДКЗ:СуммаДКЗ, 2. Дт ДР Кт МПЗ: СуммаСс
				флИсключитьДанныеОС					= Ложь;//
				
				// Таблица для сохранения НРП входящей между организациям ВГО
				ТипОрганизация = Новый ОписаниеТипов("СправочникСсылка.Организации");
				ТЗНРП = Новый ТаблицаЗначений;
				ТЗНРП.Колонки.Добавить("Покупатель", ТипОрганизация);
				ТЗНРП.Колонки.Добавить("НРП", Новый ОписаниеТипов("Число"));
				ТЗНРП.Колонки.Добавить("НРПГр", Новый ОписаниеТипов("Число"));
				
			ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияУслуг Тогда
				
				флИсключитьВыручку					= Истина;
				флИсключитьСебестоимость			= Ложь;
				флИсключитьНРП						= Ложь;
				флИсключитьДанныеОС					= Ложь;
				
			ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияСтатейБаланса Тогда
				
				флИсключитьВыручку					= Истина;
				флИсключитьСебестоимость			= Ложь;
				флИсключитьНРП						= Ложь;
				флИсключитьДанныеОС					= Ложь;
				
			ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
				
				флИсключитьВыручку					= Истина;
				флИсключитьСебестоимость			= Истина;
				флИсключитьНРП						= Ложь;
				флИсключитьДанныеОС					= Истина;
				
				// Таблица для получения данных по первоначальной стоимости и амортизации
				ТаблицаВНА_Продавцы = Новый ТаблицаЗначений;
				КолонкиВНА = ТаблицаВНА_Продавцы.Колонки;
				КолонкиВНА.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
				КолонкиВНА.Добавить("ВалютаФункц", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
				КолонкиВНА.Добавить("КурсФункц", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("ВНА", УчетМСФОПовтИспУХ.ПолучитьОписаниеТиповВНА());
				КолонкиВНА.Добавить("СчетУчетаВНА", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("СчетУчетаАмортизации", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("СчетУчетаЗатратПоАмортизации", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("ПервоначальнаяСтоимость", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("НакопленнаяАмортизация", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("НаценкаПродавца", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("НаценкаПродавцаГр", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("Проводка");
				
				ТаблицаВНА_Покупатели = Новый ТаблицаЗначений;
				КолонкиВНА = ТаблицаВНА_Покупатели.Колонки;
				КолонкиВНА.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
				КолонкиВНА.Добавить("ВалютаФункц", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
				КолонкиВНА.Добавить("КурсФункц", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("ВНА", УчетМСФОПовтИспУХ.ПолучитьОписаниеТиповВНА());
				КолонкиВНА.Добавить("СчетУчетаАмортизации", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("СчетУчетаЗатратПоАмортизации", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("АмортизацияЗаПериод", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("ПервоначальнаяСтоимостьДляРасчета", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("ПервоначальнаяСтоимостьДляРасчетаГр", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("АмортизацияЗаПериодПоПереданнойСтоиомости", Новый ОписаниеТипов("Число"));
				КолонкиВНА.Добавить("Проводка");
				
			ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов Тогда
				
				ЗаполнитьРегистрПроводкиДляЭлиминацииПоказателейОтчетов(
					ПараметрыДляЗапросаЭлиминации,
					ТЗ_КурсыВалют,
					ВыборкаНастройкиСверки,
					ТЗОрганизаций.ВыгрузитьКолонку("Организация"),
					РегПроводок,
					НомерЗаписи);
					
				Продолжить;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если флМенеджерВременныхТаблицНеУстановлен Тогда
				
				// Создадим временные таблицы для последующих запросов
				МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
				Запрос.УстановитьПараметр("ПериодСценария", ПараметрыДляЗапросаЭлиминации.ПериодОтчета);
				Запрос.УстановитьПараметр("Сценарий", ПараметрыДляЗапросаЭлиминации.Сценарий);
				Запрос.Параметры.Вставить("ШаблонСверки", ШаблонСверкиВГО);
				Запрос.Параметры.Вставить("ВалютаГр", ПараметрыДляЗапросаЭлиминации.ВалютаГр);
				Запрос.Параметры.Вставить("Дата", ТекДата);
				Запрос.УстановитьПараметр("КурсыВалютВВалютеГруппы", ТЗ_КурсыВалют);
				
				Запрос.Текст = ВернутьТекстЗапросаДопТаблицДляЭлиминации(БезТрансляции);
				
				Если флОтладка Тогда
					СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки("ЭлиминацияДопТаблицы", Запрос, ПараметрыЭлиминации);
				КонецЕсли;
				
				Запрос.ВыполнитьПакет();
				
				флМенеджерВременныхТаблицНеУстановлен = Ложь;
				
			КонецЕсли;
			
			// Подготовим данные для заполнения технического счета и его субконто
			ОписаниеТехСчета = Справочники.ШаблоныСверкиВГО.ПолучитьОписаниеТехническогоСчетаУрегулирования(ШаблонСверкиВГО,
									Перечисления.ТипыТехническихСчетовДляСверкиЭлиминации.СчетУрегулирования);
			ТехническийСчет = ОписаниеТехСчета.Счет;
			Если НЕ ЗначениеЗаполнено(ТехническийСчет) Тогда
				ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, Неопределено,
					СтрШаблон(Нстр("ru = 'Не указан технический счет для шаблона сверки %1.'"), РазделВГО.Владелец));
				Возврат;
			КонецЕсли;
			
			ПараметрыДляЗапросаЭлиминации.Вставить("ТехническийСчет", ТехническийСчет);			
			ПараметрыДляЗапросаЭлиминации.Вставить("ШаблонСверкиВГО", ШаблонСверкиВГО);
			ПараметрыДляЗапросаЭлиминации.Вставить("ПланСчетовЭлиминации", ШаблонСверкиВГО.ПланСчетовЭлиминации);
			
			ЗапросЭлиминации = ВернутьЗапросПроводокДляЭлиминации(ПараметрыДляЗапросаЭлиминации);
			Если ЗапросЭлиминации = Неопределено Тогда
				ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, Неопределено,
					Нстр("ru = 'Не получен запрос проводок для элиминации для настройки элиминации.'"));
				Возврат;
			КонецЕсли;
			
			// установим ссылку на таблицы курсов валют, трансляции и т.п.
			ЗапросЭлиминации.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
			
			ВыборкаИсточниковДанных = ВыборкаНастройкиСверки.Выбрать();
			
			// для каждой организации получаем проводки элиминации
			Для Каждого ОписаниеОрганизации  Из ТЗОрганизаций Цикл
				Организация = ОписаниеОрганизации.Организация;
				ПараметрыДляЗапросаЭлиминации.Организация = Организация;
				
				// данные для выбора данных из источников
				КонтекстОтчета=Новый Структура("ПериодОтчета,Сценарий,ОсновнаяВалюта,АнализЧувствительности,ЧтениеНеактуальныхЗаписей,Организация",
					ПараметрыЭлиминации.ПериодОтчета,
					ПараметрыЭлиминации.Сценарий,
					ПараметрыДляЗапросаЭлиминации.ВалютаГр,
					Ложь,
					Истина,
					Организация);
				Для Ном = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
					КонтекстОтчета.Вставить("Аналитика" + Ном, Неопределено);
				КонецЦикла;
				ВалютаФункц = ОписаниеОрганизации.ВалютаФункц;
				КурсФункц = ОписаниеОрганизации.Курс;
				
				ЗапросЭлиминации.Параметры.Вставить("Организация", Организация);
				ВыборкаИсточниковДанных.Сбросить();
				Пока ВыборкаИсточниковДанных.Следующий() Цикл
					СпособДК = ВыборкаИсточниковДанных.СпособОпределенияНаправленияУчета;
					ТЗДанныхДляСопоставления = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстОтчета, ВыборкаИсточниковДанных.ИсточникДанных);
					
					ИмяТаблицы = ПолучитьИмяТаблицыДанных(ВыборкаИсточниковДанных);
					ЗапросЭлиминации.Параметры.Вставить(ИмяТаблицы, ТЗДанныхДляСопоставления);
					ЗапросЭлиминации.Параметры.Вставить("ИсточникДанных" + ВыборкаИсточниковДанных.НомерСтрокиРесурса, ВыборкаИсточниковДанных.ИсточникДанных);
				КонецЦикла;
				
				Если флОтладка Тогда
					СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки("Э_" + Организация.Наименование, ЗапросЭлиминации, ПараметрыДляЗапросаЭлиминации);
				КонецЕсли;
				
				Результат = ЗапросЭлиминации.Выполнить();
				
				КолАналитик = 0;
				Для Каждого Колонка_ Из Результат.Колонки Цикл
					Если Лев(Колонка_.Имя, 9) = "Аналитика" Тогда
						КолАналитик = КолАналитик + 1;
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыДляЗапросаЭлиминации.КолАналитик = КолАналитик;
				
				ДанныеПроводки = Результат.Выбрать(ОбходРезультатаЗапроса.Прямой);//ЭтоКредитор:Истина-Продавец, Ложь- покупатель
				Пока ДанныеПроводки.Следующий() Цикл
					
					Если флИсключитьВыручку И (НЕ флИсключитьНРП ИЛИ ДанныеПроводки.ЭтоКредитор) Тогда
						//для МПЗ исключаем только у продавца(кредитора)
						//для остальных и продавец и покупатель
						ЗаписатьПроводкуЭлиминацииВыручки(РегПроводок, НомерЗаписи, ДанныеПроводки, ПараметрыДляЗапросаЭлиминации);
					КонецЕсли;
					
					Если флИсключитьСебестоимость И ДанныеПроводки.ЭтоКредитор Тогда
						ЗаписатьПроводкуЭлиминацииСебестоимости(РегПроводок, НомерЗаписи, ДанныеПроводки, ПараметрыДляЗапросаЭлиминации);
					КонецЕсли;
					
					Если флИсключитьНРП И ДанныеПроводки.ЭтоКредитор Тогда
						СтрокаНРП = ТЗНРП.Добавить();
						СтрокаНРП.Покупатель = ДанныеПроводки.Контрагент;
						СтрокаНРП.НРП = ДанныеПроводки.ПоказательСверки - ДанныеПроводки.Себестоимость;
						СтрокаНРП.НРПГр = ДанныеПроводки.ПоказательСверкиГр - ДанныеПроводки.СебестоимостьГр;
					КонецЕсли;
					
					Если флИсключитьДанныеОС И ДанныеПроводки.ЭтоКредитор Тогда
						
						СтрокаТаблицыВНА_Продавец = ТаблицаВНА_Продавцы.Добавить();
						СтрокаТаблицыВНА_Продавец.Организация = ДанныеПроводки.Организация;
						СтрокаТаблицыВНА_Продавец.ВНА = ДанныеПроводки.ВНА;
						СтрокаТаблицыВНА_Продавец.ВалютаФункц = ВалютаФункц;
						СтрокаТаблицыВНА_Продавец.КурсФункц = КурсФункц;
						СтрокаТаблицыВНА_Продавец.НаценкаПродавца = ДанныеПроводки.ПоказательСверки - ДанныеПроводки.Себестоимость;
						СтрокаТаблицыВНА_Продавец.НаценкаПродавцаГр = ДанныеПроводки.ПоказательСверкиГр - ДанныеПроводки.СебестоимостьГр;
						СтрокаТаблицыВНА_Продавец.ДанныеПроводки = ДанныеПроводки;
						
						СтрокаТаблицыВНА_Покупатель = ТаблицаВНА_Покупатели.Добавить();
						СтрокаТаблицыВНА_Покупатель.Организация = ДанныеПроводки.Контрагент;
						СтрокаТаблицыВНА_Покупатель.ВНА = ДанныеПроводки.ВНА;
						СтрокаТаблицыВНА_Покупатель.ВалютаФункц = ДанныеПроводки.Контрагент.ФункциональнаяВалюта;
						СтрокаТаблицыВНА_Продавец.КурсФункц = 
							ПолучитьКурсВалютыИзТаблицы(
								ТЗ_КурсыВалют, 
								СтрокаТаблицыВНА_Покупатель.ВалютаФункц, 
								ВидЗначенияКурса);
						СтрокаТаблицыВНА_Покупатель.ПервоначальнаяСтоимостьДляРасчета = ДанныеПроводки.Себестоимость;
						СтрокаТаблицыВНА_Покупатель.ПервоначальнаяСтоимостьДляРасчетаГр = ДанныеПроводки.СебестоимостьГр;
						СтрокаТаблицыВНА_Покупатель.ДанныеПроводки = ДанныеПроводки;
						
					КонецЕсли;
					
				КонецЦикла;
						
			КонецЦикла; // мОрганизаций
			
			// Вторым этапом элиминируем НРП
			Если флИсключитьНРП Тогда
				ТЗНРП.Свернуть("Покупатель", "НРП,НРПГр");
				
				ЗапросЭлиминации = ВернутьЗапросПроводокДляЭлиминацииНРП(ПараметрыДляЗапросаЭлиминации);
				Если ЗапросЭлиминации = Неопределено Тогда
					ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, Неопределено,
						Нстр("ru = 'Не получен запрос проводок для второго этапа элиминации для настройки элиминации.'"));
					Возврат;
				КонецЕсли;
				
				// установим ссылку на таблицы курсов валют, трансляции и т.п.
				ЗапросЭлиминации.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
				
				ИтогоСебестоимостьПродаж = 0;
				ИтогоЗакупки = 0;
				Кост = 0;
				КостГр = 0;
				
				КоличествоОрганизацийНРП = ТЗНРП.Количество();
				// для каждой организации получаем проводки элиминации второго этапа
				Для НомерОрганизации = 0 По КоличествоОрганизацийНРП-1 Цикл
					Организация = ТЗНРП[НомерОрганизации].Покупатель;
					
					СтрокаНРП = ТЗНРП.Найти(Организация, "Покупатель");
					Если НЕ ЗначениеЗаполнено(СтрокаНРП) Тогда
						Продолжить;
					КонецЕсли;
					НРП = СтрокаНРП.НРП;
					НРПГр = СтрокаНРП.НРПГр;
					
					Если НРП = 0 ИЛИ НРПГр = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					ФункциональнаяВалюта = Организация.ФункциональнаяВалюта;
					
					ПараметрыДляЗапросаЭлиминации.Организация = Организация;
					ПараметрыДляЗапросаЭлиминации.Вставить("ФункциональнаяВалюта", ФункциональнаяВалюта);
					
					// данные для выбора данных из источников
					КонтекстОтчета=Новый Структура("ПериодОтчета,Сценарий,ОсновнаяВалюта,АнализЧувствительности,ЧтениеНеактуальныхЗаписей,Организация",
						ПараметрыЭлиминации.ПериодОтчета,
						ПараметрыЭлиминации.Сценарий,
						ФункциональнаяВалюта,
						Ложь,
						Истина,
						Организация);
						
					ЗапросЭлиминации.Параметры.Вставить("Организация", Организация);
					ЗапросЭлиминации.Параметры.Вставить("ФункциональнаяВалюта", ФункциональнаяВалюта);
					
					ИмяТаблицы = "ИсточникДанныхФСДЗакупки";
					ИсточникДанных = РазделВГО[ИмяТаблицы];
					ТЗДанныхДляСопоставления = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстОтчета, ИсточникДанных);
					ЗапросЭлиминации.Параметры.Вставить("ТЗ_" + ИмяТаблицы, ТЗДанныхДляСопоставления);
					ЗапросЭлиминации.Параметры.Вставить(ИмяТаблицы, ИсточникДанных);
					
					ИмяТаблицы = "ИсточникДанныхФСДСебестоимостьПродаж";
					ИсточникДанных = РазделВГО[ИмяТаблицы];
					ТЗДанныхДляСопоставления = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстОтчета, ИсточникДанных);
					ЗапросЭлиминации.Параметры.Вставить("ТЗ_" + ИмяТаблицы, ТЗДанныхДляСопоставления);
					ЗапросЭлиминации.Параметры.Вставить(ИмяТаблицы, ИсточникДанных);
					
					Если флОтладка Тогда
						СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки("НРП_" + Организация.Наименование, ЗапросЭлиминации, ПараметрыДляЗапросаЭлиминации);
					КонецЕсли;
					
					мРезультаты = ЗапросЭлиминации.ВыполнитьПакет();
					
					ВыборкаИтоговСебестоимости = мРезультаты[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					ВыборкаИтоговЗапасов = мРезультаты[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					
					Если ВыборкаИтоговСебестоимости.Следующий() Тогда
						ИтогоСебестоимостьПродаж = ВыборкаИтоговСебестоимости.СуммаСебестоимости;
						ИтогоСебестоимостьПродажГр = ВыборкаИтоговСебестоимости.СуммаСебестоимостиГр;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ВыборкаИтоговЗапасов.Следующий() Тогда
						ИтогоЗакупки = ВыборкаИтоговЗапасов.СуммаВзаиморасчетов;
						ИтогоЗакупкиГр = ВыборкаИтоговЗапасов.СуммаВзаиморасчетовГр;
					Иначе
						Продолжить;
					КонецЕсли;
					
					Если ИтогоЗакупки = 0 ИЛИ ИтогоЗакупкиГр = 0 Тогда
						Продолжить;
					КонецЕсли;
					
					// общая сумма НРП выбывшая к распределению
					Кост = ИтогоСебестоимостьПродаж / ИтогоЗакупки;
					КостГр = ИтогоСебестоимостьПродажГр / ИтогоЗакупкиГр;
					НРПвыб = НРП * Кост;
					НРПВыбГр = НРПГр * КостГр;
					
					// общая сумма НРП оставшегося к распределению
					НРПост = НРП - НРПвыб;
					НРПостГр = НРПГр -  НРПВыбГр;
					
					// проводки элиминации выбывшей части НРП
					ПараметрыДляЗапросаЭлиминации.КолАналитик = 1;
					Проводка = ВыборкаИтоговСебестоимости.Выбрать();
					
					КоличествоОсталось = Проводка.Количество();
					ОсталосьРаспределить = НРПвыб;
					ОсталосьРаспределитьГр = НРПвыбГр;
					Краспр = НРПвыб / ИтогоСебестоимостьПродаж;
					КраспрГр = НРПвыбГр / ИтогоСебестоимостьПродажГр;
					
					Пока Проводка.Следующий() Цикл
						КоличествоОсталось = КоличествоОсталось - 1;
						Если Проводка.СуммаСебестоимостиГр = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если КоличествоОсталось = 0 Тогда
							СуммаПроводки = ОсталосьРаспределить;
							СуммаПроводкиГр = ОсталосьРаспределитьГр;
							ОсталосьРаспределить = 0;
							ОсталосьРаспределитьГр = 0;
						Иначе
							СуммаПроводки = Краспр * Проводка.СуммаСебестоимости;
							СуммаПроводкиГр = КраспрГр * Проводка.СуммаСебестоимостиГр;
							ОсталосьРаспределить = ОсталосьРаспределить - СуммаПроводки;
							ОсталосьРаспределитьГр = ОсталосьРаспределитьГр - СуммаПроводкиГр;
						КонецЕсли;
						ПараметрыДляЗапросаЭлиминации.Вставить("СуммаПроводки", СуммаПроводки);
						ПараметрыДляЗапросаЭлиминации.Вставить("СуммаПроводкиГр", СуммаПроводкиГр);
						
						ЗаписатьПроводкуЭлиминацииНРППродано(РегПроводок, НомерЗаписи, Проводка, ПараметрыДляЗапросаЭлиминации);
					КонецЦикла;
					
					// проводки элиминации оставшейся части НРП
					ПараметрыДляЗапросаЭлиминации.Вставить("КолАналитик", 0);
					Проводка = ВыборкаИтоговЗапасов.Выбрать();
					
					КоличествоОсталось = Проводка.Количество();
					ОсталосьРаспределить = НРПост;
					ОсталосьРаспределитьГр = НРПостГр;
					Краспр = НРПост / ИтогоЗакупки;// к распределению
					КраспрГр = НРПостГр / ИтогоЗакупкиГр;
					
					Пока Проводка.Следующий() Цикл
						КоличествоОсталось = КоличествоОсталось - 1;
						Если Проводка.СуммаВзаиморасчетовГр = 0 Тогда
							Продолжить;
						КонецЕсли;
						Если КоличествоОсталось = 0 Тогда
							СуммаПроводки = ОсталосьРаспределить;
							СуммаПроводкиГр = ОсталосьРаспределитьГр;
							ОсталосьРаспределить = 0;
							ОсталосьРаспределитьГр = 0;
						Иначе
							СуммаПроводки = Краспр * Проводка.СуммаВзаиморасчетов;
							СуммаПроводкиГр = КраспрГр * Проводка.СуммаВзаиморасчетовГр;
							ОсталосьРаспределить = ОсталосьРаспределить - СуммаПроводки;
							ОсталосьРаспределитьГр = ОсталосьРаспределитьГр - СуммаПроводкиГр;
						КонецЕсли;
						ПараметрыДляЗапросаЭлиминации.Вставить("СуммаПроводки", СуммаПроводки);
						ПараметрыДляЗапросаЭлиминации.Вставить("СуммаПроводкиГр", СуммаПроводкиГр);
						
						ЗаписатьПроводкуЭлиминацииНРПЗапасы(РегПроводок, НомерЗаписи, Проводка, ПараметрыДляЗапросаЭлиминации);
					КонецЦикла;
					
				КонецЦикла;
				
				ТЗНРП = Неопределено;
			КонецЕсли;
			
			// Исключаем "себестоимость" и амортизацию
			Если флИсключитьДанныеОС Тогда
				
				// Получаем данные по ВНА для элиминации продавцов
				МСФОВНАВызовСервераУХ.ПолучитьДанныеАмортизацииВНА_ВГО(ТаблицаВНА_Продавцы, ПараметрыЭлиминации.ПериодОтчета, ПараметрыЭлиминации.Сценарий, Перечисления.ВидыУчета.МСФО);
				ДЛя Каждого ДанныеПродавца Из ТаблицаВНА_Продавцы Цикл
					ЗаписатьПроводкуЭлиминацииНаценкиПродавцаВНА(РегПроводок, НомерЗаписи, ДанныеПродавца, ПараметрыДляЗапросаЭлиминации);
					ЗаписатьПроводкуЭлиминацииНакопленнойАмортизации(РегПроводок, НомерЗаписи, ДанныеПродавца, ПараметрыДляЗапросаЭлиминации);
				КонецЦикла;
				ТаблицаВНА_Продавцы = Неопределено;
				
				// Получаем данные по ВНА для элиминации покупателей
				МСФОВНАВызовСервераУХ.РассчитатьАмортизациюПоПервоначальнойСтоимостиВНА_ВГО(ТаблицаВНА_Покупатели, ПараметрыЭлиминации.ПериодОтчета, ПараметрыЭлиминации.Сценарий, Перечисления.ВидыУчета.МСФО);
				ДЛя Каждого ДанныеПокупателя Из ТаблицаВНА_Покупатели Цикл
					ЗаписатьПроводкуЭлиминацииНачисленнойАмортизации(РегПроводок, НомерЗаписи, ДанныеПокупателя, ПараметрыДляЗапросаЭлиминации);	
				КонецЦикла;
				ТаблицаВНА_Покупатели = Неопределено;
				
			КонецЕсли;
			
			РазделВГО = Неопределено;
			
		КонецЦикла; // ВыборкаНастройкиСверки
	
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации,,
			Нстр("ru = 'Техническая ошибка получения проводок для элиминации'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

// Возвращает структуру с описанием аналитик, показателей для переданного способа элиминации
// В структуре следующие реквизиты:
//	Аналитики - массив структур с описанием аналитик, необходимых для элиминации. Реквизиты:
//		Имя - имя по умолчанию для реквизита,
//		ТипДляЭлиминации - Перечисление.ТипыАналитикЭлиминации,
//		ВидАналитики	- ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные
//		ИспользоватьДляСверки - Булево
//		 - Булево
//	Показатели - массив структур с описанием показателей. Реквизиты:
//		Имя - имя по умолчанию для реквизита,
//		ТипДляЭлиминации - Перечисление.ТипПоказателяЭлиминации
//		ТипЗначения - Перечисление.ТипыЗначенийПоказателейОтчетов
//
Функция ПолучитьОписаниеСпособаЭлиминации(СпособЭлиминации, ШаблонСверкиВГО) Экспорт
	
	СтруктураОписания = Новый Структура("Аналитики, Показатели, ДопИсточникиДанных", Новый Массив, Новый Массив);
	мАналитик = Новый Массив;
	мПоказателей = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(СпособЭлиминации) ИЛИ НЕ ЗначениеЗаполнено(ШаблонСверкиВГО) Тогда
		Возврат СтруктураОписания;
	КонецЕсли;
	
	ПереченьРеквизитовАналитик = "Имя,ТипДляЭлиминации,ВидАналитики,ИспользоватьДляСверки,Обязательная,Изменять";
	ПереченьРеквизитовПоказателей = "Имя,ТипДляЭлиминации,ТипЗначения";
	мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"Организация", Перечисления.ТипыАналитикЭлиминации.Организация, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ОргСтруктура, Истина, Истина, Ложь));
	мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"Контрагент", Перечисления.ТипыАналитикЭлиминации.Контрагент, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ОргСтруктура, Истина, Истина, Ложь));
	мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"Валюта", Перечисления.ТипыАналитикЭлиминации.ВалютаВзаиморасчетов, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты, Истина, Истина, Ложь));
	
	Если СпособЭлиминации = Перечисления.СпособыЭлиминации.НеЭлиминировать Тогда
		
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей, "ЗначениеСверки", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияУслуг Тогда
		
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаВыручки", Перечисления.ТипыАналитикЭлиминации.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"СуммаВыручкиЗатратыБезНДС", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияСтатейБаланса Тогда
		
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчета", Перечисления.ТипыАналитикЭлиминации.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"Сальдо", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"ВНА", Перечисления.ТипыАналитикЭлиминации.ВНА, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ОС, Истина, Истина, Ложь));
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СтатьяЗатрат", Перечисления.ТипыАналитикЭлиминации.СтатьяЗатрат, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникСтатьиЗатрат, ЛОжь, Истина, Ложь));
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"ВидВыручки", Перечисления.ТипыАналитикЭлиминации.ВидВыручки, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ВидВыручкиВГО, ЛОжь, Истина, Ложь));
		
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаВыручкиПоступленияАктива", Перечисления.ТипыАналитикЭлиминации.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаСебестоимости", Перечисления.ТипыАналитикЭлиминации.СчетУчетаСебестоимости, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД2, ЛОжь, Истина, Ложь));
		
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"СуммаПокупкиРеализацииБезНДС", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"Себестоимость", Перечисления.ТипПоказателяЭлиминации.Себестоимость, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов Тогда
		Если ШаблонСверкиВГО.ОпределятьСебестоимостьПоВидуВыручки Тогда
			мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"ВидВыручки", Перечисления.ТипыАналитикЭлиминации.ВидВыручки, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ВидВыручкиВГО, ЛОжь, Истина, Ложь));
		КонецЕсли;
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаВыручки", Перечисления.ТипыАналитикЭлиминации.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаСебестоимости", Перечисления.ТипыАналитикЭлиминации.СчетУчетаСебестоимости, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД2, ЛОжь, Истина, Ложь));
		
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"СуммаВыручкиЗатратыБезНДС", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		Если НЕ ШаблонСверкиВГО.ОпределятьСебестоимостьПоВидуВыручки Тогда
			мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"Себестоимость", Перечисления.ТипПоказателяЭлиминации.Себестоимость, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
		КонецЕсли;
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов Тогда
		
		мАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"ПоказательОтчета", Перечисления.ТипыАналитикЭлиминации.ПоказательОтчета, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПоказателиОтчетов, Ложь, Истина, Ложь));
		
		мПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"ЗначениеПоказателя", Перечисления.ТипПоказателяЭлиминации.ПоказательСверки, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
	
	КонецЕсли;
	
	СтруктураОписания.Аналитики = мАналитик;
	СтруктураОписания.Показатели = мПоказателей;
	
	// описание дополнительных источников данных
	мДопИсточникиДанных = Новый	Соответствие;
	
	// ИД:Себестоимость
	мДопАналитик = Новый Массив;
	мДопПоказателей = Новый Массив;
	
	мДопАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СтатьяЗатрат", Перечисления.ТипыАналитикЭлиминации.СтатьяЗатрат, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникСтатьиЗатрат, ЛОжь, Истина, Ложь));
	мДопАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаСебестоимости", Перечисления.ТипыАналитикЭлиминации.СчетУчетаСебестоимости, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
	мДопАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаЗапасов", Перечисления.ТипыАналитикЭлиминации.СчетУчетаЗапасов, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
	
	мДопПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"СуммаСебестоимости", Перечисления.ТипПоказателяЭлиминации.Себестоимость, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
	
	мДопИсточникиДанных.Вставить(Перечисления.ТипИсточникаДанныхВГО.СебестоимостьПродаж, Новый Структура("Аналитики,Показатели", мДопАналитик, мДопПоказателей));
	
	// ИД:Закупки
	мДопАналитик = Новый Массив;
	мДопПоказателей = Новый Массив;
	
	мДопАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаВзаиморасчетов", Перечисления.ТипыАналитикЭлиминации.СчетУчета, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
	мДопАналитик.Добавить(Новый Структура(ПереченьРеквизитовАналитик,"СчетУчетаЗапасов", Перечисления.ТипыАналитикЭлиминации.СчетУчетаЗапасов, ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СчетаБД, ЛОжь, Истина, Ложь));
	
	мДопПоказателей.Добавить(Новый Структура(ПереченьРеквизитовПоказателей,"СуммаВзаиморасчетов", Перечисления.ТипПоказателяЭлиминации.СуммаВзаиморасчетов, Перечисления.ТипыЗначенийПоказателейОтчетов.Число));
	
	мДопИсточникиДанных.Вставить(Перечисления.ТипИсточникаДанныхВГО.Закупки, Новый Структура("Аналитики,Показатели", мДопАналитик, мДопПоказателей));
	
	СтруктураОписания.ДопИсточникиДанных = мДопИсточникиДанных;
	
	Возврат СтруктураОписания;
КонецФункции

// Получает счет после трансляции
// Параметры:
//	ШаблонТрансляции - СправочникСсылка.ШаблоныТрансляций, трансляция по правилам которой будет найден счет.
//	СчетИсточник - СправочникСсылка.СЧетаБД, исходный счет, соответсвие которому будет найдено.
//	НаправлениеТрансляции - ПеречислениеСсылка.НаправленияТрансляцииДанных, направление трансляции
//	ЭтоДт - Булево, каое правило трансляции отбирать. Истина - дебетовые, Ложь - кредитовые.
//	ЭтоОборот - Булево, указывает какое правило трансляции отбирать. Истина - трансляция оборотов, Ложь - трансляция сальдо.
//	ПриемникИсточникаДанных - необязательный, любая переменная, которая будет заполнена ссылкой на источник данных с настройками
//		 трансляции субконто. Если не найден,то Неопределено.
// Возвращает:
//	СправочникСсылка.СчетаБД - счет применик, соответсвующий счету источнику в трансляции Трансляция.
//
Функция ТранслироватьСчет(Трансляция, СчетИсточник, НаправлениеТрансляции, ЭтоДт, ЭтоОборот, ПриемникИсточникаДанных=Неопределено) Экспорт
	Запрос = Новый Запрос;
	
	ВидИтогаОСВ = Новый Массив;
	Если ЭтоДт Тогда
		Если ЭтоОборот Тогда
			ВидИтогаОСВ.Добавить(Перечисления.ВидыБухгалтерскихИтогов.ДО);
		Иначе
			ВидИтогаОСВ.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКД);
		КонецЕсли;
	Иначе
		Если ЭтоОборот Тогда
			ВидИтогаОСВ.Добавить(Перечисления.ВидыБухгалтерскихИтогов.КО);
		Иначе
			ВидИтогаОСВ.Добавить(Перечисления.ВидыБухгалтерскихИтогов.СКК);
		КонецЕсли;
	КонецЕсли;
	
	Если НаправлениеТрансляции = Перечисления.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЕстьNULL(СоответствияСчетовДляТрансляции.СчетПриемник, Неопределено) КАК Счет,
			|	ЕстьNULL(ИсточникиДанныхДляРасчетов.Ссылка, Неопределено) КАК ИсточникДанных
			|ИЗ
			|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
			|			ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
			|				И (СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции)
			|				И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
			|				И (СоответствияСчетовДляТрансляции.СчетИсточник = &СчетИсточник)
			|				И (НастройкиПравилТрансляции.Транслировать" + ?(ЭтоОборот, "Обороты", "Сальдо") + ")
			|				И (НастройкиПравилТрансляции.Использование" + ?(ЭтоДт, "Дт", "Кт")+ ")
			|		ПО (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
			|			И (ИсточникиДанныхДляРасчетов.НазначениеРасчетов.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии))
			|			И ИсточникиДанныхДляРасчетов.ПотребительРасчета = СоответствияСчетовДляТрансляции.Ссылка
			|			И (ИсточникиДанныхДляРасчетов.Трансляция" + ?(ЭтоДт, "Дебет", "Кредит")+ ")
			|			И (ИсточникиДанныхДляРасчетов.НазначениеРасчетов.Владелец = &ШаблонТрансляции)
			|			И (НЕ ИсточникиДанныхДляРасчетов.НеИспользуется)
			|ГДЕ
			|	НЕ СоответствияСчетовДляТрансляции.ПометкаУдаления";
			
	ИначеЕсли НаправлениеТрансляции = Перечисления.НаправленияТрансляцииДанных.ПоказателиВПоказатели Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	СоответствияСчетовДляТрансляции.СчетПриемник КАК Счет,
			|	ИсточникиДанныхДляРасчетов.Ссылка КАК ИсточникДанных
			|ИЗ
			|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
			|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
			|			И (НастройкиПравилТрансляции.ШаблонТрансляции = &ШаблонТрансляции)
			|			И (СоответствияСчетовДляТрансляции.СчетИсточник = &СчетИсточник)
			|			И (НЕ СоответствияСчетовДляТрансляции.ПометкаУдаления)
			|			И СоответствияСчетовДляТрансляции.Владелец = НастройкиПравилТрансляции.ШаблонТрансляции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|		ПО (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
			|			И (ИсточникиДанныхДляРасчетов.НазначениеРасчетов.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.ПоказателиВПоказатели))
			|			И (ИсточникиДанныхДляРасчетов.СпособИспользования = ЗНАЧЕНИЕ(Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета))
			|			И (НЕ ИсточникиДанныхДляРасчетов.НеИспользуется)
			|			И (ИсточникиДанныхДляРасчетов.ВидИтогаОСВ В (&ВидИтогаОСВ))
			|			И (ИсточникиДанныхДляРасчетов.ПотребительРасчета ССЫЛКА Справочник.ПоказателиОтчетов)
			|			И (ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД = СоответствияСчетовДляТрансляции.СчетПриемник)
			|			И (ИсточникиДанныхДляРасчетов.ПоказательОтбор.СчетБД = СоответствияСчетовДляТрансляции.СчетИсточник)
			|			И СоответствияСчетовДляТрансляции.Владелец = ИсточникиДанныхДляРасчетов.НазначениеРасчетов.Владелец";
			
	Иначе
		ПриемникИсточникаДанных = Неопределено;
		Возврат Справочники.СчетаБД.ПустаяСсылка();
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ШаблонТрансляции", Трансляция);
	Запрос.УстановитьПараметр("НаправлениеТрансляции", НаправлениеТрансляции);
	Запрос.УстановитьПараметр("СчетИсточник", СчетИсточник);
	Запрос.УстановитьПараметр("ВидИтогаОСВ", ВидИтогаОСВ);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ПриемникИсточникаДанных = ВыборкаДетальныеЗаписи.ИсточникДанных;
		Возврат ВыборкаДетальныеЗаписи.Счет;
	КонецЕсли;
	
	ПриемникИсточникаДанных = Неопределено;
	возврат Справочники.СчетаБД.ПустаяСсылка();
КонецФункции

// Возвращает описание субконто счета по его номеру.
// Параметры:
//  СчетБД - СправочникСсылка.СчетаБД - счет для которого нужно получить субконто.
//  Номер - Число(1..3) - номер субконто 1..3.
// 
// Возвращаемое значение:
//  ПланВидовХарактеристикСсылка - описание субконто счета с номером Номер.
//	Неопределено - такого субконто у счета нет.
Функция ПолучитьСубконтоСчета(СчетБД, Номер) Экспорт
	Если Не ЗначениеЗаполнено(СчетБД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПолучитьСубконтоИзВидовСубконтоСчетаБД(СчетБД.ВидыСубконто, Номер);
КонецФункции

// Для указанных правил заполнения счета и контексту объекта
//  получить перечень значений субконто.
//
// Параметры:
//  ПравилаЗаполненияСчета - Структура - описание технического счета и правил заполнения его субконто.
//		Можно получить функцией Справочники.ШаблоныСверкиВГО.ПолучитьОписаниеТехническогоСчетаУрегулирования().
//  	Поля структуры:
//			- СпособЗаполненияСубконто1..3 - Перечисления.СпособыЗаполненияЗначенийСубконтоСчета -
//				задают правило заполнения;
//			- ЗначениеЗаполненияСубконто1..3 - любая ссылка, фиксированное значение заполнения.
//  ЗначенияЗаполнения - Любая ссылка на объект, который содержит реквизиты:
//		Организация, Контрагент, Отправитель, Получатель, РазделВГО, ВалютаВзаиморасчетов.
//		Из этих реквизитов будут браться значения для заполнения субконто.
// 		Можно получить и заполнить структуру функцией ПолучитьИсходныеДанныеЗаполненияСубконтоТехСчета().
//		Можно напрямую передать заполненный документ УрегулированиеРасхожденияВГО.
//
// Возвращаемое значение:
//   - Массив, индекс+1 - это номер субконто. Значение - это значение заполнения субконто.
//		Количество элементов соотвествует количеству субконто счета.
//
Функция ПолучитьЗначенияСубконтоТехСчета(ПравилаЗаполненияСчета, ЗначенияЗаполнения) Экспорт
	ЗначенияСубконто = Новый Массив;
	КонтекстЗаполнения = Неопределено; // заполняем по месту, если будет необходим
	
	Счет = ?(ТипЗнч(ПравилаЗаполненияСчета) = Тип("СправочникСсылка.СчетаБД"), ПравилаЗаполненияСчета, ПравилаЗаполненияСчета.Счет);	
	Если ЗначениеЗаполнено(Счет) Тогда
		ЧислоСубконто = Счет.ВидыСубконто.Количество();
		Если ЧислоСубконто > 0 Тогда
			Для НомерСубконто = 1 По ЧислоСубконто Цикл
				ЗначениеЗаполнения = Неопределено;
				
				ВидСубконто = Справочники.СчетаБД.ВидСубконтоСчета(Счет, НомерСубконто);
				Если ЗначениеЗаполнено(ВидСубконто) Тогда
					СпособЗаполнения = ПравилаЗаполненияСчета["СпособЗаполненияСубконто" + НомерСубконто];
					Если СпособЗаполнения = Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение Тогда
						ЗначениеЗаполнения = ПравилаЗаполненияСчета["ЗначениеЗаполненияСубконто" + НомерСубконто];
					ИначеЕсли ЗначениеЗаполнено(СпособЗаполнения) Тогда
						Если КонтекстЗаполнения = Неопределено Тогда
							КонтекстЗаполнения = ИнициализироватьКонтекстЗаполненияСубконто(ЗначенияЗаполнения);
						КонецЕсли;
						
						ЗначениеЗаполнения = КонтекстЗаполнения[СпособЗаполнения];
					КонецЕсли;					
					
					// Проверяем, что тип заполнения подходит к типу данных субконто.
					ПроверитьСкорректироватьТипЗначенияПоВидуСубконто(ЗначениеЗаполнения, ВидСубконто);
				КонецЕсли;
				
				ЗначенияСубконто.Добавить(ЗначениеЗаполнения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияСубконто;
КонецФункции

// Заполняет значения субконто в проводке для указанной стороны.
// Параметры:
//  Проводка - Любой объект содержащий реквизиты субконто.
//		Имя каждого реквизита субконто имеет формат [ИмяРеквизитаСубконто][Дт/Кт][НомерСубконто].
//  ДтКт - Имя стороны на которой находится счет. "Дт" или "Кт".
//  ЗначенияСубконтоТехСчет - массив. Количество элементов определеяет количество заполняемых субконто. 
//	ИмяРеквизитаСубконто - Префикс имени реквизита со значением субконто.
//
Процедура ЗаполнитьЗначенияСубконтоТехническогоСчета(Проводка, ДтКт, ЗначенияСубконтоТехСчет, ИмяРеквизитаСубконто="Субконто") Экспорт
	КоличествоСубконто = ЗначенияСубконтоТехСчет.Количество();
	Для НомерСубконто = 1 По КоличествоСубконто Цикл
		Проводка[ИмяРеквизитаСубконто+ДтКт+НомерСубконто] = ЗначенияСубконтоТехСчет[НомерСубконто-1];
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

#Область ВнутренниеФункцииМодуля


// Получить структуру для передачи данных в функцию заполнения занчений субконто. 
// Параметры:
//	Ссылка - любой объект с реквизитами: Организация, Контрагент, Отправитель, Получатель,
//		РазделВГО/РазделСверки, ВалютаВзаиморасчетов/ВалютаДокумента/Валюта
// Возвращаемое значение:
//   Структура с полями: Организация, Контрагент, Отправитель, Получатель, РазделВГО, ВалютаВзаиморасчетов.
//
Функция ПолучитьИсходныеЗначенияЗаполненияСубконтоТехСчета(Ссылка=Неопределено)
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("Контрагент", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("Отправитель", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("Получатель", Справочники.Организации.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("РазделВГО", Справочники.РазделыСверкиВГО.ПустаяСсылка());
	ЗначенияЗаполнения.Вставить("ВалютаВзаиморасчетов", Справочники.Валюты.ПустаяСсылка());
	
	Если ЗначениеЗаполнено(Ссылка) Тогда
    	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, Ссылка);
	
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка, "РазделВГО") Тогда
			ИмяРеквизита = ПодобратьВариантИмениРеквизита(Ссылка, "РазделСверкиВГО, РазделСверки");
			Если НЕ ПустаяСтрока(ИмяРеквизита) Тогда
				ЗначенияЗаполнения.РазделВГО = Ссылка[ИмяРеквизита];
			КонецЕсли;
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка, "ВалютаВзаиморасчетов") Тогда
			ИмяРеквизита = ПодобратьВариантИмениРеквизита(Ссылка, "ВалютаДокумента, Валюта");
			Если НЕ ПустаяСтрока(ИмяРеквизита) Тогда
				ЗначенияЗаполнения.ВалютаВзаиморасчетов = Ссылка[ИмяРеквизита];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
    
    Возврат ЗначенияЗаполнения;
КонецФункции

// Проверяем, что тип заполнения подходит к типу данных субконто.
// Если не подходит, то пытаемся скорректировать:
//	СправочникСсылка.Организации -> СправочникСсылка.Контрагенты
//
Процедура ПроверитьСкорректироватьТипЗначенияПоВидуСубконто(ЗначениеЗаполнения, Знач ВидСубконто)
	Если НЕ ЗначениеЗаполнено(ЗначениеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ТипЗначения = ТипЗнч(ЗначениеЗаполнения);
	ТипСубконто = ВидСубконто.ТипЗначения;
	Если ТипСубконто.СодержитТип(ТипЗначения) Тогда
		Возврат;
	КонецЕсли;
	
	// Преобразовываем организацию в контрагента.
	Если ТипЗначения = Тип("СправочникСсылка.Организации") И ТипСубконто.СодержитТип(Тип("СправочникСсылка.Контрагенты")) Тогда
		ЗначениеЗаполнения = ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(ЗначениеЗаполнения);
	КонецЕсли;
КонецПроцедуры

// Создать соответствие для заполнения значений субконто в правиле заполнения.
// Заполнить контекст заполнения субконто по данным объекта с реквизитами:
//	Организация, Контрагент, Отправитель, Получатель, РазделВГО, ВалютаВзаиморасчетов.
Функция ИнициализироватьКонтекстЗаполненияСубконто(ЗначенияЗаполнения)
	КонтекстЗаполнения = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыЗаполненияЗначенийСубконтоСчета.Ссылка КАК Ссылка
		|ИЗ
		|	Перечисление.СпособыЗаполненияЗначенийСубконтоСчета КАК СпособыЗаполненияЗначенийСубконтоСчета
		|ГДЕ
		|	СпособыЗаполненияЗначенийСубконтоСчета.Ссылка <> ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияЗначенийСубконтоСчета.ФиксированноеЗначение)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КонтекстЗаполнения.Вставить(ВыборкаДетальныеЗаписи.Ссылка, Неопределено);
	КонецЦикла;
	
	КонтекстЗаполнения[Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ОрганизацияПороводки] = ЗначенияЗаполнения.Организация;
	КонтекстЗаполнения[Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.КонтрагентПороводки] = ЗначенияЗаполнения.Контрагент;
	КонтекстЗаполнения[Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ОрганизацияДебитор] = ЗначенияЗаполнения.Отправитель;
	КонтекстЗаполнения[Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ОрганизацияКредитор] = ЗначенияЗаполнения.Получатель;
	КонтекстЗаполнения[Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.РазделСверки] = ЗначенияЗаполнения.РазделВГО;
	КонтекстЗаполнения[Перечисления.СпособыЗаполненияЗначенийСубконтоСчета.ВалютаВзаиморасчетов] = ЗначенияЗаполнения.ВалютаВзаиморасчетов;
	
	Возврат КонтекстЗаполнения;
КонецФункции

// Проверяет есть ли реквизиты с указанными именами у объекта, и возвращает первый существующий.
//
// Параметры:
//  Объект - любой объект - для него проверяем существование реквизитов.
//  ИменаРеквизитов	 - Строка - перечень имен реквизитов разделенные запятыми.
// 
// Возвращаемое значение:
//   - Строка - если найдено имя существующее у объекта, то возвращает это имя.
//		Иначе возвращает пустую строку.
//
Функция ПодобратьВариантИмениРеквизита(Объект, ИменаРеквизитов)
	мИмен = СтрРазделить(ИменаРеквизитов, ",", Ложь);
	Для Каждого ИмяРеквизита Из мИмен Цикл
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, ИмяРеквизита) Тогда
			Возврат ИмяРеквизита;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ""
КонецФункции

Функция ПолучитьТекстЗапросаПолученияДанныхДляЭлиминации(НомераТаблиц)
		
	НомераТаблиц.Вставить("втТаблицаКурсовПлоская", 			НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втТаблицаКурсов", 					НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожить_ТаблицаКурсовПлоская",	НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втУправлениеПериодом",				НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втШаблоныСверкиВГО",					НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втВалютаГоловнойОрганизации",		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("втКурсыВалютВВалютеГруппы",			НомераТаблиц.Количество());
	
	НомераТаблиц.Вставить("ОписаниеГлавнойОрганизации", 		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ВыборкаНастройкиСверки", 			НомераТаблиц.Количество());	
	НомераТаблиц.Вставить("ТЗОрганизацийПоВидамЗначений", 		НомераТаблиц.Количество());
	НомераТаблиц.Вставить("ТЗ_КурсыВалют", 						НомераТаблиц.Количество());
		
	Возврат 
	
	"ВЫБРАТЬ
	|	ТаблицаКурсов.Валюта КАК Валюта,
	|	ТаблицаКурсов.Кратность КАК Кратность,
	|	ТаблицаКурсов.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ТаблицаКурсов.КурсНаНачалоПериода КАК КурсНаНачалоПериода,
	|	ТаблицаКурсов.КурсНаКонецПериода КАК КурсНаКонецПериода
	|ПОМЕСТИТЬ ТаблицаКурсовПлоская
	|ИЗ
	|	&ТаблицаКурсов КАК ТаблицаКурсов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКурсовПлоская.Валюта КАК Валюта,
	|	ТаблицаКурсовПлоская.СреднийКурсЗаПериод / ТаблицаКурсовПлоская.Кратность КАК Курс,
	|	ИСТИНА КАК ЭтоСреднийКурс,
	|	ЛОЖЬ КАК ЭтоКурсНаКонецПериода,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗначенийВГО.ОборотЗаПериод) КАК ВидЗначения
	|ПОМЕСТИТЬ ТаблицаКурсов
	|ИЗ
	|	ТаблицаКурсовПлоская КАК ТаблицаКурсовПлоская
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаКурсовПлоская.Валюта,
	|	ТаблицаКурсовПлоская.КурсНаНачалоПериода / ТаблицаКурсовПлоская.Кратность,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗначенийВГО.СальдоНачальное)
	|ИЗ
	|	ТаблицаКурсовПлоская КАК ТаблицаКурсовПлоская
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаКурсовПлоская.Валюта,
	|	ТаблицаКурсовПлоская.КурсНаКонецПериода / ТаблицаКурсовПлоская.Кратность,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗначенийВГО.СальдоКонечное)
	|ИЗ
	|	ТаблицаКурсовПлоская КАК ТаблицаКурсовПлоская
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаКурсовПлоская
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК Ссылка,
	|	СтатусыПериодовСценариев.ВерсияРегламента КАК ВерсияОрганизационнойСтруктуры
	|ПОМЕСТИТЬ УправлениеПериодом
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	НЕ СтатусыПериодовСценариев.СтатусБлокировки = 1
	|	И СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УправлениеПериодом.Ссылка КАК УправлениеПериодом,
	|	ВерсииРегламентовПодготовкиОтчетности.Ссылка КАК Этап,
	|	ВерсииРегламентовПодготовкиОтчетности.ШаблонСверкиВГО КАК ШаблонСверкиВГО
	|ПОМЕСТИТЬ ШаблоныСверкиВГО
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ УправлениеПериодом КАК УправлениеПериодом
	|		ПО (УправлениеПериодом.ВерсияОрганизационнойСтруктуры = ВерсииРегламентовПодготовкиОтчетности.Ссылка)
	|			И (ВерсииРегламентовПодготовкиОтчетности.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(справочник.ШаблоныСверкиВГО.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УправлениеПериодом.Ссылка,
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ЭтапыУниверсальныхПроцессов.Владелец.СвязанныйРегламент.ШаблонСверкиВГО
	|ИЗ
	|	УправлениеПериодом КАК УправлениеПериодом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|			ПО ВерсииРегламентовПодготовкиОтчетности.ШаблонПроцесса = ЭтапыУниверсальныхПроцессов.Владелец
	|				И (ЭтапыУниверсальныхПроцессов.Владелец.СвязанныйРегламент.ШаблонСверкиВГО <> ЗНАЧЕНИЕ(Справочник.ШаблоныСверкиВГО.ПустаяСсылка))
	|				И (НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления)
	|		ПО УправлениеПериодом.ВерсияОрганизационнойСтруктуры = ВерсииРегламентовПодготовкиОтчетности.Ссылка
	|			И (ВерсииРегламентовПодготовкиОтчетности.ШаблонСверкиВГО = ЗНАЧЕНИЕ(Справочник.ШаблоныСверкиВГО.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ЭтапыУниверсальныхПроцессов.Владелец.СвязанныйРегламент.ШаблонСверкиВГО,
	|	УправлениеПериодом.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОсновнаяВалюта КАК ВалютаГр,
	|	&ПериметрДляЭлиминации КАК ГлавнаяОрганизация
	|ПОМЕСТИТЬ ВалютаГоловнойОрганизации
	|ИЗ
	|	УправлениеПериодом КАК УправлениеПериодом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|		ПО УправлениеПериодом.ВерсияОрганизационнойСтруктуры = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка
	|			И (ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница = &ПериметрДляЭлиминации)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(ТаблицаКурсов.Курс, 1) / ЕСТЬNULL(ТаблицаКурсовГлавнаяОрганизация.Курс, 1) КАК Курс,
	|	ТаблицаКурсов.Валюта КАК Валюта,
	|	ТаблицаКурсовГлавнаяОрганизация.ВидЗначения КАК ВидЗначения
	|ПОМЕСТИТЬ КурсыВалютВВалютеГруппы
	|ИЗ
	|	ВалютаГоловнойОрганизации КАК ВалютаГоловнойОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсовГлавнаяОрганизация
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсов
	|			ПО (ТаблицаКурсов.ВидЗначения = ТаблицаКурсовГлавнаяОрганизация.ВидЗначения)
	|		ПО ВалютаГоловнойОрганизации.ВалютаГр = ТаблицаКурсовГлавнаяОрганизация.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВалютаГоловнойОрганизации.ГлавнаяОрганизация КАК ГлавнаяОрганизация,
	|	ВалютаГоловнойОрганизации.ВалютаГр КАК ВалютаГр,
	|	ЕСТЬNULL(ТаблицаКурсов.Курс, 1) КАК КурсГр,
	|	ТаблицаКурсов.ВидЗначения КАК ВидЗначения
	|ИЗ
	|	ВалютаГоловнойОрганизации КАК ВалютаГоловнойОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаКурсов КАК ТаблицаКурсов
	|		ПО ВалютаГоловнойОрганизации.ВалютаГр = ТаблицаКурсов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазделыСверкиВГОИсточникиДанных.Ссылка КАК РазделВГО,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных КАК ИсточникДанных,
	|	РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета КАК СпособОпределенияНаправленияУчета,
	|	РазделыСверкиВГОИсточникиДанных.НомерСтроки КАК НомерСтрокиРесурса
	|ИЗ
	|	ШаблоныСверкиВГО КАК ШаблоныСверкиВГО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.РазделыСверкиВГО.ИсточникиДанных КАК РазделыСверкиВГОИсточникиДанных
	|		ПО ШаблоныСверкиВГО.ШаблонСверкиВГО = РазделыСверкиВГОИсточникиДанных.Ссылка.Владелец
	|			И (НЕ РазделыСверкиВГОИсточникиДанных.Ссылка.ПометкаУдаления)
	|			И (РазделыСверкиВГОИсточникиДанных.Ссылка.СпособЭлиминации <> ЗНАЧЕНИЕ(Перечисление.СпособыЭлиминации.НеЭлиминировать))
	|ГДЕ
	|	ШаблоныСверкиВГО.УправлениеПериодом.Сценарий = &Сценарий
	|	И ШаблоныСверкиВГО.УправлениеПериодом.ПериодСценария = &ПериодСценария
	|
	|СГРУППИРОВАТЬ ПО
	|	РазделыСверкиВГОИсточникиДанных.Ссылка,
	|	РазделыСверкиВГОИсточникиДанных.ИсточникДанных,
	|	РазделыСверкиВГОИсточникиДанных.СпособОпределенияНаправленияУчета,
	|	РазделыСверкиВГОИсточникиДанных.НомерСтроки
	|ИТОГИ ПО
	|	РазделВГО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Регламент.ОрганизационнаяЕдиницаРодитель КАК ГлавнаяОрганизация,
	|	Регламент.ОрганизационнаяЕдиница КАК Организация,
	|	Регламент.ОсновнаяВалюта КАК ВалютаФункц,
	|	КурсыВалютВВалютеГруппы.ВидЗначения ЕСТЬ NULL КАК КурсНеЗадан,
	|	ЕСТЬNULL(КурсыВалютВВалютеГруппы.Курс, 0) КАК Курс,
	|	ЕСТЬNULL(КурсыВалютВВалютеГруппы.ВидЗначения, ЗНАЧЕНИЕ(Перечисление.ВидыЗначенийВГО.ПустаяСсылка)) КАК ВидЗначения,
	|	Регламент.МетодИсключенияВГО КАК МетодИсключенияВГО
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК Регламент
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
	|		ПО Регламент.ОрганизационнаяЕдиница.ФункциональнаяВалюта = КурсыВалютВВалютеГруппы.Валюта
	|ГДЕ
	|	Регламент.Ссылка В
	|			(ВЫБРАТЬ
	|				УправлениеПериодом.ВерсияОрганизационнойСтруктуры
	|			ИЗ
	|				УправлениеПериодом КАК УправлениеПериодом)
	|	И Регламент.ОрганизационнаяЕдиницаРодитель = &ПериметрДляЭлиминации
	|	И НЕ Регламент.ОрганизационнаяЕдиница.ЭлиминирующаяОрганизация
	|	И НЕ Регламент.ОрганизационнаяЕдиница.ПометкаУдаления
	|	И ВЫБОР
	|			КОГДА КурсыВалютВВалютеГруппы.ВидЗначения ЕСТЬ NULL
	|				ТОГДА ИСТИНА
	|			КОГДА КурсыВалютВВалютеГруппы.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ВидыЗначенийВГО.ОборотЗаПериод)
	|				ТОГДА Регламент.МетодИсключенияВГО В (ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.ОстаткиИОбороты), ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.Обороты))
	|			КОГДА КурсыВалютВВалютеГруппы.ВидЗначения = ЗНАЧЕНИЕ(Перечисление.ВидыЗначенийВГО.СальдоКонечное)
	|				ТОГДА Регламент.МетодИсключенияВГО В (ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.ОстаткиИОбороты), ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.Остатки))
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КурсыВалютВВалютеГруппы.Курс КАК Курс,
	|	КурсыВалютВВалютеГруппы.Валюта КАК Валюта,
	|	КурсыВалютВВалютеГруппы.ВидЗначения КАК ВидЗначения
	|ИЗ
	|	КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы";
	
КонецФункции

// Функция - Получить данные для элиминации
//
// Параметры:
//  ДатаСреза - Дата - дата на которую будут получены данные.
//  ПараметрыЭлиминации - Структура - условия получения данных.
//		Состав см. функцию ПолучитьПустыеПараметрыЭлиминации().
// 
// Возвращаемое значение:
//   - Структура:
//		ТЗ_КурсыВалют  - таблица курсов валют для пересчета в валюту группы.
//			Дополнительно учитывается вид курса (средний, на начало, на конец).
//			Колонки:
//				- Курс - Число - курс валюты по отношению к валюте группы.
//              - Валюта - СправочникСсылка.Валюты.
//				- ВидЗначения - ПеречислениеСсылка.ВидыЗначенийВГО - вид курса. 
//		ВыборкаНастройкиСверки - выборка запроса для иерархического обхода
//			источников данных. Первый уровень - это разделы сверки ВГО.
//			Второй - это источники данных данного раздела.
//			Поля запроса:
//				- РазделВГО - СправочникСсылка.РазделыСверкиВГО.
//				- ИсточникДанных - СправочникСсылка.ИсточникиДанных.
//				- СпособОпределенияНаправленияУчета - ПеречислениеСсылка.СпособОпределенияНаправленияУчета.
//				- НомерСтрокиРесурса - Число- номер источника данных в настройке.
//		ТЗОрганизацийПоВидамЗначений - таблица организаций периметра элиминации.
//			Колонки:
//				- ГлавнаяОрганизация - СправочникСсылка.Организации;
//				- Организация - СправочникСсылка.Организации;
//				- ВалютаФункц - СправочникСсылка.Валюты;
//				- Курс - Число - курс валюты по отношению к валюте группы
//				- ВидЗначения - ПеречислениеСсылка.ВидыЗначенийВГО - вид курса.
//		ОписаниеГлавнойОрганизации - таблица с описывающую консолидирующую
//			компанию группы. Колонки: 
//				- ГлавнаяОрганизация - СправочникСсылка.Организации;
//				- ВалютаГр - СправочникСсылка.Валюты;
//				- КурсГр - Число - курс валюты группы;
//				- ВидЗначения - ПеречислениеСсылка.ВидыЗначенийВГО - вид курса.
//
Функция ПолучитьДанныеДляЭлиминации(ДатаСреза, ПараметрыЭлиминации)
		
	ТаблицаКурсов = ОбщегоНазначенияСерверУХ.ЗаполнитьПериодическиеКурсыВалют(ПараметрыЭлиминации.ПериодОтчета, ПараметрыЭлиминации.Сценарий);
	ТаблицаКурсов.Колонки.Удалить("СреднийКурсЗаПериодМСФО");
	ТаблицаКурсов.Колонки.Удалить("КурсНаКонецПредыдущегоПериода");
	ТаблицаКурсов.Колонки.Удалить("СреднийКурсЗаПредыдущийПериод");
	
	НомераТаблиц = Новый Структура;
	Запрос = Новый Запрос(ПолучитьТекстЗапросаПолученияДанныхДляЭлиминации(НомераТаблиц));
	Запрос.УстановитьПараметр("Дата", 					ДатаСреза);
	Запрос.УстановитьПараметр("ПериодСценария", 		ПараметрыЭлиминации.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий", 				ПараметрыЭлиминации.Сценарий);
	Запрос.УстановитьПараметр("ПериметрДляЭлиминации",  ПараметрыЭлиминации.ПериметрДляЭлиминации);
	Запрос.УстановитьПараметр("ТаблицаКурсов", 			ТаблицаКурсов);
	
	Если ВключенаОтладка(ПараметрыЭлиминации) Тогда
		СверкаВГОУХ.ЗаписатьЗапросВрегистрДляОтладки("ЭлиминацияНастройки", Запрос, ПараметрыЭлиминации);
	КонецЕсли;
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	
	ДанныеДляЭлиминации = Новый Структура;	
	ДанныеДляЭлиминации.Вставить("ОписаниеГлавнойОрганизации", 		РезультатПакет[НомераТаблиц.ОписаниеГлавнойОрганизации].Выгрузить());
	ДанныеДляЭлиминации.Вставить("ВыборкаНастройкиСверки", 			РезультатПакет[НомераТаблиц.ВыборкаНастройкиСверки].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам));
	ДанныеДляЭлиминации.Вставить("ТЗОрганизацийПоВидамЗначений",	РезультатПакет[НомераТаблиц.ТЗОрганизацийПоВидамЗначений].Выгрузить());
	ДанныеДляЭлиминации.Вставить("ТЗ_КурсыВалют", 					РезультатПакет[НомераТаблиц.ТЗ_КурсыВалют].Выгрузить());
	
	Возврат ДанныеДляЭлиминации;
		
КонецФункции

// Побочный эффект: в случае ошибки(ок) записывает сообщение
// в протокол элиминации.
//
Функция ЭтоКорректныеДанныеДляЭлиминации(ПараметрыЭлиминации, ДанныеДляЭлиминации)
	Результат = Истина;
	Если ДанныеДляЭлиминации.ВыборкаНастройкиСверки = Неопределено Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(
			ПараметрыЭлиминации, 
			Неопределено, 
			НСтр("ru='Нет настроек элиминации для сценария.'"));
		Результат = Ложь;
	КонецЕсли;
	Если ДанныеДляЭлиминации.ВыборкаНастройкиСверки.Количество() = 0 Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(
			ПараметрыЭлиминации, 
			Неопределено, 
			СтрШаблон(НСтр("ru='Нет настроек элиминации для сценария %1 и периода %2.'"),
				ПараметрыЭлиминации.Сценарий,
				ПараметрыЭлиминации.ПериодОтчета));
		Результат = Ложь;
	КонецЕсли;
	Если ДанныеДляЭлиминации.ТЗОрганизацийПоВидамЗначений.Количество() = 0 Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(
			ПараметрыЭлиминации, 
			Неопределено,
			НСтр("ru='Не задан список организаций для сверки.'"));
		Результат = Ложь;
	КонецЕсли;
	Если ДанныеДляЭлиминации.ОписаниеГлавнойОрганизации.Количество() = 0 Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(
			ПараметрыЭлиминации, 
			Неопределено, 
			НСтр("ru='Не задана головная организация и валюта группы.'"));
		Результат = Ложь;
	КонецЕсли;
	Возврат Результат;
КонецФункции
	
Функция ВключенаОтладка(ПараметрыЭлиминации)
	флОтладка = Ложь;
	Если ПараметрыЭлиминации.Свойство("Отладка", флОтладка) Тогда
		Возврат флОтладка;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

Функция  ПолучитьРегистрДляЗаписиПроводокДляЭлиминации(ДокументЭлиминации)
	РегПроводок = РегистрыСведений.ПроводкиДляЭлиминации.СоздатьНаборЗаписей();
	// очистим проводки по организации и документу элиминации
	РегПроводок.Отбор.ДокументЭлиминации.Установить(ДокументЭлиминации);
	РегПроводок.Записать();
	Возврат РегПроводок;
КонецФункции

// Функция - Получить курс валюты из таблицы
//
// Параметры:
//  ТаблицаКурсовВалют - ТаблицаЗначений - требуемые колонки: Валюта, Курс, ВидЗначения.
//		Можно получить функцией ПолучитьДанныеДляЭлиминации().ТЗ_КурсыВалют
//  Валюта - СправочникСсылка.Валюты.
//  ВидЗначенияКурса - ПеречислениеСсылка.ВидыЗначенийВГО - вид курса.
// 
// Возвращаемое значение:
//   - Число. Никогда не возвращает 0.
//		Если курс равен нулю или не найден, то вернет 1.
//
Функция ПолучитьКурсВалютыИзТаблицы(ТаблицаКурсовВалют, Валюта, ВидЗначенияКурса)
	Отбор = Новый Структура("Валюта, ВидЗначения", Валюта, ВидЗначенияКурса);
	мСтрок = ТаблицаКурсовВалют.НайтиСтроки(Отбор);
	Если мСтрок.Количество() > 0 Тогда
		Курс = мСтрок[0].Курс;
		Если Курс <> 0 Тогда
			Возврат Курс;
		КонецЕсли;
	КонецЕсли;
	Возврат 1;
КонецФункции

// Обновляет кэш если такой валюты в нем нет.
// Подразумеваем, что для всех вызовов функции с фиксированным кэшем
// ВидЗначенияКурса остается неизменным. Т.е. кэш не учитывает
// вид значения курса.
//
Функция ПолучитьКурсВалютыИзТаблицыСУчетомКэша(ТаблицаКурсовВалют, 
												Валюта, 
												ВидЗначенияКурса, 
												КэшКурсовВалют)
	Курс = КэшКурсовВалют[Валюта];
	Если Курс = Неопределено Тогда
		Курс = ПолучитьКурсВалютыИзТаблицы(
			ТаблицаКурсовВалют, 
			Валюта, 
			ВидЗначенияКурса);
		КэшКурсовВалют[Валюта] = Курс;
	КонецЕсли;
	Возврат Курс;
КонецФункции

Функция ПолучитьБазовыеПараметрыДляЗапросаЭлиминации(ПараметрыЭлиминации)
	ПараметрыДляЗапросаЭлиминации = Новый Структура(
			"ДокументЭлиминации,
			|Сценарий,
			|ПериодОтчета,
			|ОрганизацияДляЭлиминации,
			|ПериметрДляЭлиминации,
			|ВалютаЭлиминации,
			|РазделВГО,
			|ГлавнаяОрганизация,
			|КурсГр,
			|ВалютаГр,
			|ТекДата,
			|Организация,
			|ВидЗначенияКурса,
			|КолАналитик");
	ЗаполнитьЗначенияСвойств(ПараметрыДляЗапросаЭлиминации, ПараметрыЭлиминации);
	Возврат ПараметрыДляЗапросаЭлиминации;
КонецФункции

Функция ПолучитьПустыеДанныеДляЗаполненияПроводкиЭлиминацииЗначенияПоказателя()
	Результат = Новый Структура;
	// Исходное значение показателя
	Результат.Вставить("ПоказательСверки", 0);
	Результат.Вставить("ИсточникДанных",
		Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка());
	Результат.Вставить("ВалютаВзаиморасчетов",
		Справочники.Валюты.ПустаяСсылка());
	Результат.Вставить("КолАналитик", 0);
	Результат.Вставить("Аналитика1", Неопределено);
	Результат.Вставить("Аналитика2", Неопределено);
	Результат.Вставить("Аналитика3", Неопределено);
	Результат.Вставить("Аналитика4", Неопределено);
	Результат.Вставить("Аналитика5", Неопределено);
	// Значение в валюте группы
	Результат.Вставить("ПоказательСверкиГр", 0);
	Результат.Вставить("ПоказательОтчета", 
		Справочники.ПоказателиОтчетов.ПустаяСсылка());
	Возврат Результат;
КонецФункции

Процедура ЗаполнитьДанныеСтрокиПоказателя(СтрокаЗначения, ДанныеЗаполнения)
	ДанныеЗаполнения.ВалютаВзаиморасчетов = СтрокаЗначения.Валюта;
	ДанныеЗаполнения.Аналитика1 = СтрокаЗначения.Аналитика1;
	ДанныеЗаполнения.Аналитика2 = СтрокаЗначения.Аналитика2;
	ДанныеЗаполнения.Аналитика3 = СтрокаЗначения.Аналитика3;
	ДанныеЗаполнения.Аналитика4 = СтрокаЗначения.Аналитика4;
	ДанныеЗаполнения.Аналитика5 = СтрокаЗначения.Аналитика5;
    ДанныеЗаполнения.ПоказательСверки = СтрокаЗначения.Значение;
	ДанныеЗаполнения.ПоказательСверкиГр = 0;
КонецПроцедуры

Процедура ЗаполнитьРегистрПроводкиДляЭлиминацииПоказателейОтчетов(
												ПараметрыДляЗапросаЭлиминации,
												ТЗ_КурсыВалют,
												ВыборкаНастройкиСверки,
												мОрганизаций,
												РегПроводок, 
												НомерЗаписи)
	ИндексОрганизацийВГО = 
		ОбщегоНазначенияКлиентСерверУХ.МассивВСоответствие(
			мОрганизаций);
	РазделВГО = ПараметрыДляЗапросаЭлиминации.РазделВГО;
	КэшКурсовВалют = Новый Соответствие;
	ДанныеЗаполнения = 
		ПолучитьПустыеДанныеДляЗаполненияПроводкиЭлиминацииЗначенияПоказателя();
	ВыборкаИсточниковДанных = ВыборкаНастройкиСверки.Выбрать();
	Пока ВыборкаИсточниковДанных.Следующий() Цикл
		ИсточникДанных = ВыборкаИсточниковДанных.ИсточникДанных;
		Если НЕ ЗаполнитьДанныеДляЭлиминацииПоИсточникуДанных(
								ПараметрыДляЗапросаЭлиминации,
								ИсточникДанных,
								ДанныеЗаполнения) Тогда
			Продолжить;
		КонецЕсли;
		// для каждой организации получаем проводки элиминации
		Для Каждого Организация Из мОрганизаций Цикл
			ПараметрыДляЗапросаЭлиминации.Организация = Организация;
			ТЗначенийПоказателей = 
				Обработки.ПолучениеДанныхДляСверкиЭлиминации.ПолучитьРасширеннуюТаблицуРаскрытияПоказателя(
					ПараметрыДляЗапросаЭлиминации,
					ДанныеЗаполнения.ИсточникДанных,
					ДанныеЗаполнения.ПоказательОтчета);
			Для Каждого СтрокаЗначения Из ТЗначенийПоказателей Цикл
				Если ИндексОрганизацийВГО[СтрокаЗначения.Контрагент] = Истина Тогда
					ЗаполнитьДанныеСтрокиПоказателя(СтрокаЗначения, ДанныеЗаполнения);
					ЗаполнитьЗначениеЭлиминацииВВалютеГруппы(
						ДанныеЗаполнения, 
						КэшКурсовВалют, 
						ТЗ_КурсыВалют,
						ПараметрыДляЗапросаЭлиминации.ВидЗначенияКурса);
					ЗаписатьПроводкуЭлиминацииЗначенияПоказателя(
						РегПроводок, 
						НомерЗаписи, 
						ДанныеЗаполнения, 
						ПараметрыДляЗапросаЭлиминации);					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ЗаполнитьДанныеДляЭлиминацииПоИсточникуДанных(
											ПараметрыДляЗапросаЭлиминации,
											ИсточникДанных,
											ДанныеЗаполнения)
	ДанныеЗаполнения.ИсточникДанных = ИсточникДанных;
	ОписаниеИД = Справочники.РазделыСверкиВГО.ПолучитьОписаниеИД(
		ПараметрыДляЗапросаЭлиминации.РазделВГО, 
		ИсточникДанных);
	ПоказательОтчета = 
		ОписаниеИД.Показатели[
			Перечисления.ТипПоказателяЭлиминации.ПоказательСверки];
	Если НЕ ЗначениеЗаполнено(ПоказательОтчета) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыДляЗапросаЭлиминации, Неопределено,
			СтрШаблон(
				НСтр("ru='Не указан показатель отчета для источника данных %1 раздела сверки %2.'"),
				ИсточникДанных,
				ПараметрыДляЗапросаЭлиминации.РазделВГО));
		Возврат Ложь;
	КонецЕсли;
	ДанныеЗаполнения.ПоказательОтчета = ПоказательОтчета; 
	ГруппаРаскрытия = ИсточникДанных.ГруппаРаскрытияОтбор;
	Если НЕ ЗначениеЗаполнено(ГруппаРаскрытия) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыДляЗапросаЭлиминации, Неопределено,
			СтрШаблон(
				НСтр("ru='Не заполнена группа раскрытия раздела сверки %1.'"),
				ПараметрыДляЗапросаЭлиминации.РазделВГО));
		Возврат Ложь;
	КонецЕсли;
	КолАналитик = ГруппаРаскрытия.ЧислоАналитик;
	ДанныеЗаполнения.КолАналитик = КолАналитик;
	Возврат Истина;
КонецФункции

Процедура ЗаполнитьЗначениеЭлиминацииВВалютеГруппы(ДанныеЗаполнения, 
													КэшКурсовВалют, 
													ТЗ_КурсыВалют,
													ВидЗначенияКурса)
	Если ЗначениеЗаполнено(ДанныеЗаполнения.ВалютаВзаиморасчетов) Тогда
		Курс = ПолучитьКурсВалютыИзТаблицыСУчетомКэша(
			ТЗ_КурсыВалют,
			ДанныеЗаполнения.ВалютаВзаиморасчетов,
			ВидЗначенияКурса,
			КэшКурсовВалют);
	Иначе
		Курс = 1;
	КонецЕсли;
	ДанныеЗаполнения.ПоказательСверкиГр = 
		ДанныеЗаполнения.ПоказательСверки * Курс;
КонецПроцедуры

// Формирует запроса для проводок элиминации. Текст запроса формируется для одного шаблона сверки подходящего под Сценарий и ПериодОтчета.
// Входные параметны:
//	Параметры - структура с обязательными полями "Организация, Сценарий, ПериодОтчета, РазделВГО".
// Возвращает:
//	Запрос - если получилось создать.
//	Неопределено - если нет настроек для формирования проводок (Шаблон сверки не подходит под сценарий и период, либо шаблон сверки пуст).
//
Функция ВернутьЗапросПроводокДляЭлиминации(Параметры)
	Перем ЗапросПроводок;
	
	ЗапросПроводок = Новый Запрос;
	
	ЗапросПроводок.УстановитьПараметр("ПериодСценария", Параметры.ПериодОтчета);
	ЗапросПроводок.УстановитьПараметр("Сценарий", Параметры.Сценарий);
	ЗапросПроводок.Параметры.Вставить("РазделВГО", Параметры.РазделВГО);
	ЗапросПроводок.Параметры.Вставить("ШаблонСверки", Параметры.РазделВГО.Владелец);
	ЗапросПроводок.Параметры.Вставить("ВалютаГр", Параметры.ВалютаГр);
	ЗапросПроводок.Параметры.Вставить("КурсГр", Параметры.КурсГр);
	ЗапросПроводок.Параметры.Вставить("ВидЗначенияКурса", Параметры.ВидЗначенияКурса);
	ЗапросПроводок.Параметры.Вставить("Дата", Параметры.ТекДата);
		
	ЗапросПроводок.Текст = ВернутьТекстЗапросаЭлиминации(Параметры);
		
	Возврат ЗапросПроводок;
	
КонецФункции

// Формирует запроса для проводок элиминации. Текст запроса формируется для одного шаблона сверки подходящего под Сценарий и ПериодОтчета.
// Входные параметны:
//	Параметры - структура с обязательными полями "Организация, Сценарий, ПериодОтчета, РазделВГО".
// Возвращает:
//	Запрос - если получилось создать.
//	Неопределено - если нет настроек для формирования проводок (Шаблон сверки не подходит под сценарий и период, либо шаблон сверки пуст).
//
Функция ВернутьЗапросПроводокДляЭлиминацииНРП(Параметры)
	Перем ЗапросПроводок;
	
	ЗапросПроводок = Новый Запрос;
	
	ЗапросПроводок.УстановитьПараметр("ПериодСценария", Параметры.ПериодОтчета);
	ЗапросПроводок.УстановитьПараметр("Сценарий", Параметры.Сценарий);
	ЗапросПроводок.Параметры.Вставить("РазделВГО", Параметры.РазделВГО);
	ЗапросПроводок.Параметры.Вставить("ШаблонСверки", Параметры.РазделВГО.Владелец);
	ЗапросПроводок.Параметры.Вставить("ВалютаГр", Параметры.ВалютаГр);
	ЗапросПроводок.Параметры.Вставить("КурсГр", Параметры.КурсГр);
	ЗапросПроводок.Параметры.Вставить("ВидЗначенияКурса", Параметры.ВидЗначенияКурса);
	ЗапросПроводок.Параметры.Вставить("Дата", Параметры.ТекДата);
		
	ЗапросПроводок.Текст = ВернутьТекстЗапросаЭлиминацииНРП(Параметры);
		
	Возврат ЗапросПроводок;
	
КонецФункции

Функция ВернутьТекстЗапросаЭлиминации(ПараметрыЭлиминации, Отбор=Неопределено)
	РазделВГО = ПараметрыЭлиминации.РазделВГО;
	
	ГруппаАналитик						= РазделВГО.ГруппаРаскрытия;
	мАналитик							= ГруппаАналитик.Аналитики;
	мРесурсов							= ГруппаАналитик.Ресурсы;
	ТЧИД								= РазделВГО.ИсточникиДанных;
	флРегистрироватьНулевыеРасхождения	= РазделВГО.Владелец.РегистрироватьНулевыеРасхождения;
	ВидЗначенияСверки					= РазделВГО.ВидЗначения;
	ЭтоОборот							= (ВидЗначенияСверки = Перечисления.ВидыЗначенийВГО.ОборотЗаПериод);
	ЭтоКонечноеСальдо					= (ВидЗначенияСверки = Перечисления.ВидыЗначенийВГО.СальдоКонечное);
	флСебестоимостьПоВидуВыручки		= РазделВГО.СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов И РазделВГО.Владелец.ОпределятьСебестоимостьПоВидуВыручки;
	флЭлиминироватьДанныеПоказателей	= РазделВГО.СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов;
	ШаблонСверкиВГО						= РазделВГО.Владелец;
	БезТрансляции						= ШаблонСверкиВГО.БезТрансляции ИЛИ (ШаблонСверкиВГО.ТрансляцияПлановСчетовНаМСФОДляЭлиминации.Количество() = 0);
	
	ТекстЗапроса =
		"
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ТекстЗапросаОбъединение =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для объединения данных
		|"; // объединяем отдельные запросы в таблицу: ОбъединениеИД
	ТекстЗапросаОсновной =
		"////////////////////////////////////////////////////////////////////////////////
		|// Запрос для вычисления сумм элиминации
		|"; // расчитываем суммы элиминации и делаем трансляцию счетов
	ТекстЗапросаУничтоженияВТ =
		"////////////////////////////////////////////////////////////////////////////////
		|// Уничтожаем временные таблицы
		|";
	
	КолАналитик = мАналитик.Количество();
	КолРесурсов = мРесурсов.Количество();
	
	Если КолАналитик < 3 Тогда // Организация, Контрагент, ВалютаВзаиморасчетов
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, Неопределено,
			НСтр("ru='Некорректная настройка сверки. Необходимы аналитики: ""Организация, Контрагент, ВалютаВзаиморасчетов"".'"));
		Возврат "";
	КонецЕсли;
	Если КолРесурсов = 0 Тогда // ПоказательСверки
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, Неопределено,
			НСтр("ru='Некорректная настройка сверки. Необходим хотябы один ресурс.'"));
		Возврат "";
	КонецЕсли;
	
	ТекстАналитик = ""; // перечень аналитик с именами приведенными к стандартным
	ТекстАналитикТЗ = ""; // перечень аналитик с именами из группы раскрытия с приведением к стандартным именам
	ТекстТрансляцииСчетов = ""; // в текст основного запроса, для трансляции счетов
	ТекстСчетовДляГруппировки = "";
	ТекстСчетов = "";
	ИмяРазделаСверки = "";
	
	НомерАналитики = 2;
	НомерАналитикиСубконто = 0;
	Для Каждого Аналитика_ Из мАналитик Цикл
		ТипДляЭлиминации = Аналитика_.ТипДляЭлиминации;
		ИмяАналитики = СверкаВГОУХ.ИмяАналитикиДляСверки(Аналитика_); // Стандартное имя аналитики
		флЭтоАналитикаСубконто = Ложь;
		флЭтоСпециальнаяАналитика = Ложь;
		флЭтоАналитикаСчета = Ложь;
		Если ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Организация Тогда
			флЭтоСпециальнаяАналитика = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.Контрагент Тогда
			флЭтоАналитикаСубконто = Истина;
			флЭтоСпециальнаяАналитика = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ВалютаВзаиморасчетов Тогда
			флЭтоАналитикаСубконто = Истина;
			флЭтоСпециальнаяАналитика = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.СчетУчета Тогда
			флЭтоСпециальнаяАналитика = Истина;
			флЭтоАналитикаСчета = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.СчетУчетаСебестоимости Тогда
			флЭтоСпециальнаяАналитика = Истина;
			флЭтоАналитикаСчета = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ПоказательОтчета Тогда
			флЭтоСпециальнаяАналитика = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ТолькоСверка Тогда
			флЭтоАналитикаСубконто = Истина;
		ИначеЕсли ТипДляЭлиминации = Перечисления.ТипыАналитикЭлиминации.ВидВыручки Тогда
			флЭтоСпециальнаяАналитика = Истина;
		КонецЕсли;
		
		Если флЭтоАналитикаСчета Тогда
			Если БезТрансляции Тогда
				ТекстСчетовДляГруппировки = ТекстСчетовДляГруппировки +
					"	ОбъединениеИД." + ИмяАналитики + "," + Символы.ПС;
				ТекстСчетов = ТекстСчетов + 
					"	ОбъединениеИД." + ИмяАналитики + " КАК Т" + ИмяАналитики + "," + Символы.ПС;
				ТекстСчетов = ТекстСчетов +
					"
					|	Неопределено КАК " + ИмяАналитики + "ИсточникДанных," + Символы.ПС;
				
			Иначе
				ИмяТаблицыТрансляции = "ТрансляцияСчетов" + ИмяАналитики;
				
				ТекстСчетовДляГруппировки = ТекстСчетовДляГруппировки +
					"	ВЫБОР
					|		КОГДА " + ИмяТаблицыТрансляции + ".СчетПриемник ЕСТЬ NULL 
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
					|		ИНАЧЕ " + ИмяТаблицыТрансляции + ".СчетПриемник
					|	КОНЕЦ,
					|";
				ТекстСчетов = ТекстСчетов + 
					"	ВЫБОР
					|		КОГДА " + ИмяТаблицыТрансляции + ".СчетПриемник ЕСТЬ NULL 
					|			ТОГДА ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
					|		ИНАЧЕ " + ИмяТаблицыТрансляции + ".СчетПриемник
					|	КОНЕЦ КАК Т" + ИмяАналитики + ",
					|";
				ТекстТрансляцииСчетов = ТекстТрансляцииСчетов +
					"		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК " + ИмяТаблицыТрансляции + "
					|		ПО ОбъединениеИД." + ИмяАналитики + " = " + ИмяТаблицыТрансляции + ".СчетИсточник
					|			И (ОбъединениеИД.ЭтоКредитор = " + ИмяТаблицыТрансляции + ".ЭтоКт)
					|			И (" + ИмяТаблицыТрансляции + ".ЭтоОборот = " + ?(ЭтоОборот, "Истина", "Ложь") + ")
					|			И (" + ИмяТаблицыТрансляции + ".ЭтоКонечноеСальдо = " + ?(ЭтоКонечноеСальдо, "Истина", "Ложь") + ")
					|";
					
				ТекстСчетовДляГруппировки = ТекстСчетовДляГруппировки +
					"
					|" + ИмяТаблицыТрансляции + ".ИсточникДанных" + "," + Символы.ПС;
				ТекстСчетов = ТекстСчетов +
					"
					|" + ИмяТаблицыТрансляции + ".ИсточникДанных" + " КАК " + ИмяАналитики + "ИсточникДанных," + Символы.ПС;
			КонецЕсли;
		КонецЕсли;
		
		Если флЭтоСпециальнаяАналитика Тогда
			ТекстАналитик = ТекстАналитик + "	ИД#." + ИмяАналитики + "," + Символы.ПС;
			ТекстАналитикТЗ = ТекстАналитикТЗ + "	ИД#." + Аналитика_.Имя + " КАК " + ИмяАналитики + "," + Символы.ПС;
		КонецЕсли;
		
		Если флЭтоАналитикаСубконто Тогда
			НомерАналитикиСубконто = НомерАналитикиСубконто + 1;
			ТекстАналитик = ТекстАналитик + "	ИД#.Аналитика" + НомерАналитикиСубконто + "," + Символы.ПС;
			ТекстАналитикТЗ = ТекстАналитикТЗ + "	ИД#." + Аналитика_.Имя + " КАК Аналитика" + НомерАналитикиСубконто + "," + Символы.ПС;
		КонецЕсли;
		НомерАналитики = НомерАналитики + 1;
	КонецЦикла;
	
	// ресурсы формируются по шаблону ИД.Ресурс1 + ИД.Ресурс2 + Ид.Ресурс3 КАК [Имя ресурса]
	ОписаниеРесурсов = Новый Соответствие;
	ТекстРесурсов = ""; // обобщенные имена ресурсов
	ТекстРесурсовОбъединение = ""; // имена ресурсов с суммированием и пересчетом в валюту
	Для Каждого Ресурс_ Из мРесурсов Цикл
		ТипРесурсаДляЭлиминации = Ресурс_.ТипДляЭлиминации;
		ПараметрыРесурсов = ОписаниеРесурсов[ТипРесурсаДляЭлиминации];
		Если ПараметрыРесурсов = неопределено Тогда
			ИмяОбобщенное = СверкаВГОУХ.ПолучитьИмяЗначенияПеречисления(ТипРесурсаДляЭлиминации);
			ПараметрыРесурсов = Новый Структура("Текст,Имя", "	" + "	ИД#." + Ресурс_.Имя, ИмяОбобщенное);
			
			ТекстРесурсов = ТекстРесурсов + "	ИД#." + ИмяОбобщенное + "," + Символы.ПС;
			ТекстРесурсовОбъединение = ТекстРесурсовОбъединение + "	СУММА(ОбъединениеИД." + ИмяОбобщенное + ") КАК " + ИмяОбобщенное + "," + Символы.ПС;
			ТекстРесурсовОбъединение = ТекстРесурсовОбъединение + "	СУММА(ОбъединениеИД." + ИмяОбобщенное + " * ЕстьNULL(КурсыВалютВВалютеГруппы.Курс,1)) КАК " + ИмяОбобщенное + "Гр," + Символы.ПС;
		Иначе
			ПараметрыРесурсов.Текст = ПараметрыРесурсов.Текст + " + " + "	ИД#." + Ресурс_.Имя;
		КонецЕсли;
		ОписаниеРесурсов.Вставить(ТипРесурсаДляЭлиминации, ПараметрыРесурсов);
	КонецЦикла;
	
	// ДОбавим в основной запрос расчет по виду выручки
	ТекстРасчетаСебестоимости = "";
	ТекстАналитикиСебестоимостиДляГруппировки = "";
	Если флСебестоимостьПоВидуВыручки Тогда
		ТекстРесурсовОбъединение = ТекстРесурсовОбъединение + "	СУММА(ОбъединениеИД.ПоказательСверки * (100 - ЕстьNULL(НормыПрибыли.НормативнаяМаржа,0)) / 100) КАК Себестоимость," + Символы.ПС;
		ТекстРесурсовОбъединение = ТекстРесурсовОбъединение + "	СУММА(ОбъединениеИД.ПоказательСверки * (100 - ЕстьNULL(НормыПрибыли.НормативнаяМаржа,0)) / 100 * ЕстьNULL(КурсыВалютВВалютеГруппы.Курс,1)) КАК СебестоимостьГр," + Символы.ПС;
		
		ТекстРасчетаСебестоимости = 
					"		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НормыПрибылиДляВидовАналитик КАК НормыПрибыли
					|		ПО НормыПрибыли.ШаблонСверки = &ШаблонСверки
					|			И НормыПрибыли.Организация = &Организация
					|			И ОбъединениеИД.ЭтоКредитор
					|			И ОбъединениеИД.Контрагент = НормыПрибыли.Контрагент
					|			И ОбъединениеИД.ВидВыручки = НормыПрибыли.ВидВыручки
					|";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстАналитик) Тогда
		ТекстАналитик = Лев(ТекстАналитик, СтрДлина(ТекстАналитик)-2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекстАналитик) Тогда
		ТекстАналитикТЗ = Лев(ТекстАналитикТЗ, СтрДлина(ТекстАналитикТЗ)-2);
	КонецЕсли;
	
	ТекстЗапросаОсновной = ТекстЗапросаОсновной +
		"ВЫБРАТЬ
		|	ОбъединениеИД.ИсточникДанных КАК ИсточникДанных,
		|" + ТекстСчетов + "
		|	ОбъединениеИД.ЭтоДебитор Как ЭтоДебитор,
		|	ОбъединениеИД.ЭтоКредитор Как ЭтоКредитор,
		|	" + ТекстРесурсовОбъединение + "
		|	" + СтрЗаменить(ТекстАналитик, "ИД#", "ОбъединениеИД") + "
		|ИЗ
		|	ОбъединениеИД КАК ОбъединениеИД
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
		|		ПО ОбъединениеИД.Валютавзаиморасчетов = КурсыВалютВВалютеГруппы.Валюта
		|			И КурсыВалютВВалютеГруппы.ВидЗначения = &ВидЗначенияКурса
		|" + ТекстТрансляцииСчетов + "
		|" + ТекстРасчетаСебестоимости + "
		|
		|СГРУППИРОВАТЬ ПО
		|	ОбъединениеИД.ИсточникДанных,
		|" + ТекстСчетовДляГруппировки + "
		|	ОбъединениеИД.ЭтоДебитор,
		|	ОбъединениеИД.ЭтоКредитор,
		|	" + СтрЗаменить(ТекстАналитик, "ИД#", "ОбъединениеИД");
			
	флПервыйЗапрос = Истина;
	ФлЕстьД = Ложь;
	флЕстьК = Ложь;
	
	Для Каждого ИД_ Из ТЧИД Цикл
		НомерИД = ИД_.НомерСтроки;
		СпособОпределенияНаправленияУчета = ИД_.СпособОпределенияНаправленияУчета;
		Если СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
			флЭтоЗапросДебитора = Истина;
			флЭтоЗапросКредитора = Истина;
			флОтборПоЗнаку = Истина;
			флЕстьД = Истина;
			флЕстьК = Истина;
		ИначеЕсли СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет Тогда
			флЭтоЗапросДебитора = Истина;
			флЭтоЗапросКредитора = Ложь;
			флОтборПоЗнаку = Ложь;
			флЕстьД = Истина;
			
		ИначеЕсли СпособОпределенияНаправленияУчета = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит Тогда
			флЭтоЗапросДебитора = Ложь;
			флЭтоЗапросКредитора = Истина;
			флОтборПоЗнаку = Ложь;
			флЕстьК = Истина;
		КонецЕсли;
		
		ТекстАналитик_ = СтрЗаменить(ТекстАналитик, "ИД#", "ИД" + НомерИД); // стандартные аналитики для дальнейших запросов
		
		ТекстЗапроса = ТекстЗапроса +
			"ВЫБРАТЬ
			|	&ИсточникДанных" + НомерИД + " КАК ИсточникДанных," + Символы.ПС;
			
		СтрокаСуммаВсехРесурсов = "";
		Для Каждого РесурсОписание_ Из ОписаниеРесурсов Цикл
			ПараметрыРесурса = РесурсОписание_.Значение;
			ВнутреннееИмяРесурса = СтрЗаменить(ПараметрыРесурса.Текст, "ИД#", "ИД" + НомерИД);
			Если флОтборПоЗнаку Тогда
				ТекстЗапроса = ТекстЗапроса + "ВЫБОР КОГДА (" + ВнутреннееИмяРесурса + ") > 0 ТОГДА (" + ВнутреннееИмяРесурса + ") ИНАЧЕ -(" + ВнутреннееИмяРесурса + ") КОНЕЦ КАК " + ПараметрыРесурса.Имя + "," + Символы.ПС;
			Иначе
				ТекстЗапроса = ТекстЗапроса + ВнутреннееИмяРесурса + " КАК " + ПараметрыРесурса.Имя + "," + Символы.ПС;
			КонецЕсли;
			СтрокаСуммаВсехРесурсов = СтрокаСуммаВсехРесурсов + СокрЛП(ВнутреннееИмяРесурса) + " + ";
		КонецЦикла;
		
		Если СтрокаСуммаВсехРесурсов = "" Тогда
			СтрокаСуммаВсехРесурсов = "0";
		Иначе
			СтрокаСуммаВсехРесурсов = Лев(СтрокаСуммаВсехРесурсов, СтрДлина(СтрокаСуммаВсехРесурсов)-3);
		КонецЕсли;
		
		Если флОтборПоЗнаку Тогда
			ТекстЗапроса = ТекстЗапроса +
				"	Выбор когда (" + СтрокаСуммаВсехРесурсов + ") > 0 Тогда Истина Иначе Ложь Конец КАК ЭтоДебитор,
				|	Выбор когда (" + СтрокаСуммаВсехРесурсов + ") < 0 Тогда Истина Иначе Ложь Конец КАК ЭтоКредитор," + Символы.ПС;
		ИначеЕсли флЭтоЗапросДебитора Тогда
			ТекстЗапроса = ТекстЗапроса +
				"	ИСТИНА КАК ЭтоДебитор,
				|	ЛОЖЬ КАК ЭтоКредитор," + Символы.ПС;
		ИначеЕсли флЭтоЗапросКредитора Тогда
			ТекстЗапроса = ТекстЗапроса +
				"	ЛОЖЬ КАК ЭтоДебитор,
				|	ИСТИНА КАК ЭтоКредитор," + Символы.ПС;
			КонецЕсли;
					
		ТекстЗапроса = ТекстЗапроса + СтрЗаменить(ТекстАналитикТЗ, "ИД#", "ИД" + НомерИД) + Символы.ПС;
			
		ТекстЗапроса = ТекстЗапроса +
			"ПОМЕСТИТЬ ИД" + НомерИД + "
			|ИЗ
			|	&ИД" + НомерИД + " КАК ИД" + НомерИД + "
			|";
		
		ТекстЗапроса = ТекстЗапроса +
			";
			|
			|";
		
		ТекстЗапросаУничтоженияВТ = ТекстЗапросаУничтоженияВТ + "УНИЧТОЖИТЬ " + "ИД" + НомерИД + ";" + Символы.ПС + Символы.ПС;
		
		Если НЕ флПервыйЗапрос Тогда
			ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|";
		КонецЕсли;
		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение +
			"ВЫБРАТЬ
			|	ИД" + НомерИД + ".ИсточникДанных,
			|	ИД" + НомерИД + ".ЭтоДебитор,
			|	ИД" + НомерИД + ".ЭтоКредитор,
			|	"+ СтрЗаменить(ТекстРесурсов, "ИД#", "ИД" + НомерИД) + "
			|" + ТекстАналитик_ + "
			|";
		Если флПервыйЗапрос Тогда
			ТекстЗапросаОбъединение = ТекстЗапросаОбъединение +
				"ПОМЕСТИТЬ ОбъединениеИД" + Символы.ПС;
			флПервыйЗапрос = Ложь;
		КонецЕсли;
		ТекстЗапросаОбъединение = ТекстЗапросаОбъединение +
			"ИЗ
			|	ИД" + НомерИД + " КАК ИД" + НомерИД + Символы.ПС;
		
	КонецЦикла;
	
	ТекстЗапросаОбъединение = ТекстЗапросаОбъединение + "
		|;
		|";
		
	ТекстЗапроса = ТекстЗапроса +
		ТекстЗапросаОбъединение +
		ТекстЗапросаУничтоженияВТ +
		ТекстЗапросаОсновной + ";
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ОбъединениеИД;";

	Возврат ТекстЗапроса;
КонецФункции

Функция ВернутьТекстЗапросаЭлиминацииНРП(ПараметрыЭлиминации, Отбор=Неопределено)
	РазделВГО = ПараметрыЭлиминации.РазделВГО;
	
	Если РазделВГО.СпособЭлиминации <> Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВидЗначенияСверки = РазделВГО.ВидЗначения;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаВзаиморасчетов КАК СчетУчетаВзаиморасчетов,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ТЗ_ИсточникДанныхФСДЗакупки
		|ИЗ
		|	&ТЗ_ИсточникДанныхФСДЗакупки КАК ТЗ_ИсточникДанныхФСДЗакупки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаСебестоимости КАК СчетУчетаСебестоимости,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СуммаСебестоимости КАК СуммаСебестоимости
		|ПОМЕСТИТЬ ТЗ_ИсточникДанныхФСДСебестоимостьПродаж
		|ИЗ
		|	&ТЗ_ИсточникДанныхФСДСебестоимостьПродаж КАК ТЗ_ИсточникДанныхФСДСебестоимостьПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаВзаиморасчетов КАК СчетКт,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаЗапасов КАК СчетДт,
		|	ТрансляцияСчетовВзаиморасчетов.СчетПриемник КАК ТСчетКт,
		|	ТрансляцияСчетовВзаиморасчетов.ИсточникДанных КАК СчетКтИсточникДанных,
		|	ТрансляцияСчетовЗапасов.СчетПриемник КАК ТСчетДт,
		|	ТрансляцияСчетовЗапасов.ИсточникДанных КАК СчетДтИсточникДанных,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СуммаВзаиморасчетов * ЕСТЬNULL(КурсыВалютВВалютеГруппы.Курс, 0) КАК СуммаВзаиморасчетовГр
		|ИЗ
		|	ТЗ_ИсточникДанныхФСДЗакупки КАК ТЗ_ИсточникДанныхФСДЗакупки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовВзаиморасчетов
		|		ПО ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаВзаиморасчетов = ТрансляцияСчетовВзаиморасчетов.СчетИсточник
		|			И (ТрансляцияСчетовВзаиморасчетов.ЭтоКт = ЛОЖЬ)
		|			И (ТрансляцияСчетовВзаиморасчетов.ЭтоОборот = ЛОЖЬ)
		|			И (ТрансляцияСчетовВзаиморасчетов.ЭтоКонечноеСальдо = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовЗапасов
		|		ПО ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаЗапасов = ТрансляцияСчетовЗапасов.СчетИсточник
		|			И (ТрансляцияСчетовЗапасов.ЭтоКт = ИСТИНА)
		|			И (ТрансляцияСчетовЗапасов.ЭтоОборот = ЛОЖЬ)
		|			И (ТрансляцияСчетовЗапасов.ЭтоКонечноеСальдо = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
		|		ПО (КурсыВалютВВалютеГруппы.Валюта = &ФункциональнаяВалюта)
		|			И (КурсыВалютВВалютеГруппы.ВидЗначения = &ВидЗначенияКурса)
		|ИТОГИ
		|	СУММА(СуммаВзаиморасчетов),
		|	СУММА(СуммаВзаиморасчетовГр)
		|ПО
		|	ОБЩИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СтатьяЗатрат КАК Аналитика1,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаСебестоимости КАК СчетДт,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаЗапасов КАК СчетКт,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СуммаСебестоимости КАК СуммаСебестоимости,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СуммаСебестоимости * ЕСТЬNULL(КурсыВалютВВалютеГруппы.Курс, 0) КАК СуммаСебестоимостиГр,
		|	ТрансляцияСчетовЗапасы.СчетПриемник КАК ТСчетКт,
		|	ТрансляцияСчетовЗапасы.ИсточникДанных КАК СчетКтИсточникДанных,
		|	ТрансляцияСчетовСебестоимость.СчетПриемник КАК ТСчетДт,
		|	ТрансляцияСчетовСебестоимость.ИсточникДанных КАК СчетДтИсточникДанных
		|ИЗ
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж КАК ТЗ_ИсточникДанныхФСДСебестоимостьПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
		|		ПО (КурсыВалютВВалютеГруппы.Валюта = &ФункциональнаяВалюта)
		|			И (КурсыВалютВВалютеГруппы.ВидЗначения = &ВидЗначенияКурса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовСебестоимость
		|		ПО ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаСебестоимости = ТрансляцияСчетовСебестоимость.СчетИсточник
		|			И (ТрансляцияСчетовСебестоимость.ЭтоКт = ИСТИНА
		|				И ТрансляцияСчетовСебестоимость.ЭтоОборот = ЛОЖЬ
		|				И ТрансляцияСчетовСебестоимость.ЭтоКонечноеСальдо = ИСТИНА)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовЗапасы
		|		ПО ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаЗапасов = ТрансляцияСчетовЗапасы.СчетИсточник
		|			И (ТрансляцияСчетовЗапасы.ЭтоКт = ЛОЖЬ
		|				И ТрансляцияСчетовЗапасы.ЭтоОборот = ЛОЖЬ
		|				И ТрансляцияСчетовЗапасы.ЭтоКонечноеСальдо = ИСТИНА)
		|ИТОГИ
		|	СУММА(СуммаСебестоимости),
		|	СУММА(СуммаСебестоимостиГр)
		|ПО
		|	ОБЩИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТЗ_ИсточникДанныхФСДЗакупки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТЗ_ИсточникДанныхФСДСебестоимостьПродаж";
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ВернутьТекстЗапросаЭлиминацииВНА(РазделВГО, Отбор=Неопределено)
	Если РазделВГО.СпособЭлиминации <> Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
		Возврат Неопределено;
	КонецЕсли;
	ВидЗначенияСверки					= РазделВГО.ВидЗначения;
	
	ТекстЗапроса =
		"
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаВзаиморасчетов КАК СчетУчетаВзаиморасчетов,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов
		|ПОМЕСТИТЬ ТЗ_ИсточникДанныхФСДЗакупки
		|ИЗ
		|	&ТЗ_ИсточникДанныхФСДЗакупки КАК ТЗ_ИсточникДанныхФСДЗакупки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СтатьяЗатрат КАК СтатьяЗатрат,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаСебестоимости КАК СчетУчетаСебестоимости,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаЗапасов КАК СчетУчетаЗапасов,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СуммаСебестоимости КАК СуммаСебестоимости
		|ПОМЕСТИТЬ ТЗ_ИсточникДанныхФСДСебестоимостьПродаж
		|ИЗ
		|	&ТЗ_ИсточникДанныхФСДСебестоимостьПродаж КАК ТЗ_ИсточникДанныхФСДСебестоимостьПродаж
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаВзаиморасчетов КАК СчетДт,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаЗапасов КАК СчетКт,
		|	ТрансляцияСчетовВзаиморасчетов.СчетПриемник КАК ТСчетДт,
		|	ТрансляцияСчетовВзаиморасчетов.ИсточникДанных КАК СчетДтИсточникДанных,
		|	ТрансляцияСчетовЗапасов.СчетПриемник КАК ТСчетКт,
		|	ТрансляцияСчетовЗапасов.ИсточникДанных КАК СчетКтИсточникДанных,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
		|	ТЗ_ИсточникДанныхФСДЗакупки.СуммаВзаиморасчетов * ЕСТЬNULL(КурсыВалютВВалютеГруппы.Курс, 0) КАК СуммаВзаиморасчетовГр
		|ИЗ
		|	ТЗ_ИсточникДанныхФСДЗакупки КАК ТЗ_ИсточникДанныхФСДЗакупки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовВзаиморасчетов
		|		ПО ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаВзаиморасчетов = ТрансляцияСчетовВзаиморасчетов.СчетИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовЗапасов
		|		ПО ТЗ_ИсточникДанныхФСДЗакупки.СчетУчетаЗапасов = ТрансляцияСчетовЗапасов.СчетИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
		|		ПО (КурсыВалютВВалютеГруппы.Валюта = &ФункциональнаяВалюта)
		|ИТОГИ ПО
		|	ОБЩИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СтатьяЗатрат КАК Аналитика1,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаСебестоимости КАК СчетКт,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаЗапасов КАК СчетДт,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СуммаСебестоимости КАК СуммаСебестоимости,
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СуммаСебестоимости * ЕСТЬNULL(КурсыВалютВВалютеГруппы.Курс, 0) КАК СуммаСебестоимостиГр,
		|	ТрансляцияСчетовЗапасы.СчетПриемник КАК ТСчетДт,
		|	ТрансляцияСчетовЗапасы.ИсточникДанных КАК СчетДтИсточникДанных,
		|	ТрансляцияСчетовСебестоимость.СчетПриемник КАК ТСчетКт,
		|	ТрансляцияСчетовСебестоимость.ИсточникДанных КАК СчетКтИсточникДанных
		|ИЗ
		|	ТЗ_ИсточникДанныхФСДСебестоимостьПродаж КАК ТЗ_ИсточникДанныхФСДСебестоимостьПродаж
		|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
		|		ПО (КурсыВалютВВалютеГруппы.Валюта = &ФункциональнаяВалюта)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовСебестоимость
		|		ПО ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаСебестоимости = ТрансляцияСчетовСебестоимость.СчетИсточник
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияСчетов КАК ТрансляцияСчетовЗапасы
		|		ПО ТЗ_ИсточникДанныхФСДСебестоимостьПродаж.СчетУчетаЗапасов = ТрансляцияСчетовЗапасы.СчетИсточник
		|ИТОГИ ПО
		|	ОБЩИЕ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТЗ_ИсточникДанныхФСДЗакупки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ТЗ_ИсточникДанныхФСДСебестоимостьПродаж";
		
	Возврат ТекстЗапроса;
КонецФункции

Функция ВернутьТекстЗапросаДопТаблицДляЭлиминации(БезТрансляции)
	
	Если БезТрансляции Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КурсыВалютВВалютеГруппы.Валюта,
			|	КурсыВалютВВалютеГруппы.Курс,
			|	КурсыВалютВВалютеГруппы.ВидЗначения
			|ПОМЕСТИТЬ КурсыВалютВВалютеГруппы
			|ИЗ
			|	&КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
			|";
			
	Иначе
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	КурсыВалютВВалютеГруппы.Валюта,
			|	КурсыВалютВВалютеГруппы.Курс,
			|	КурсыВалютВВалютеГруппы.ВидЗначения
			|ПОМЕСТИТЬ КурсыВалютВВалютеГруппы
			|ИЗ
			|	&КурсыВалютВВалютеГруппы КАК КурсыВалютВВалютеГруппы
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ШаблоныСверкиВГОТрансляцияПлановСчетовНаМСФОДляЭлиминации.ШаблонТрансляцииСчетов КАК ШаблонТрансляции,
			|	ШаблоныСверкиВГОТрансляцияПлановСчетовНаМСФОДляЭлиминации.ПланСчетовИсточник КАК ПланСчетовИсточник
			|ПОМЕСТИТЬ Трансляции
			|ИЗ
			|	Справочник.ШаблоныСверкиВГО.ТрансляцияПлановСчетовНаМСФОДляЭлиминации КАК ШаблоныСверкиВГОТрансляцияПлановСчетовНаМСФОДляЭлиминации
			|ГДЕ
			|	НЕ ШаблоныСверкиВГОТрансляцияПлановСчетовНаМСФОДляЭлиминации.Ссылка.ПометкаУдаления
			|	И ШаблоныСверкиВГОТрансляцияПлановСчетовНаМСФОДляЭлиминации.Ссылка = &ШаблонСверки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СоответствияСчетовДляТрансляции.СчетИсточник КАК СчетИсточник,
			|	СоответствияСчетовДляТрансляции.СчетПриемник КАК СчетПриемник,
			|	ИсточникиДанныхДляРасчетов.Ссылка КАК ИсточникДанных,
			|	ВЫБОР
			|		КОГДА ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКК)
			|				ИЛИ ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.КО)
			|				ИЛИ ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СНК)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоКт,
			|	ВЫБОР
			|		КОГДА ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.ДО)
			|				ИЛИ ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.КО)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоОборот,
			|	ВЫБОР
			|		КОГДА ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКК)
			|				ИЛИ ИсточникиДанныхДляРасчетов.ВидИтогаОСВ = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКД)
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоКонечноеСальдо
			|ПОМЕСТИТЬ ТрансляцияСчетов
			|ИЗ
			|	Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
			|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Трансляции КАК Трансляции
			|			ПО (Трансляции.ШаблонТрансляции = НастройкиПравилТрансляции.ШаблонТрансляции)
			|		ПО СоответствияСчетовДляТрансляции.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
			|			И (НЕ СоответствияСчетовДляТрансляции.ПометкаУдаления)
			|			И (Трансляции.ШаблонТрансляции = СоответствияСчетовДляТрансляции.Владелец)
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
			|		ПО (ИсточникиДанныхДляРасчетов.НазначениеРасчетов.Владелец = Трансляции.ШаблонТрансляции)
			|			И (ИсточникиДанныхДляРасчетов.ПотребительРасчета ССЫЛКА Справочник.ПоказателиОтчетов)
			|			И (ИсточникиДанныхДляРасчетов.НазначениеРасчетов.НаправлениеТрансляции = ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.ПоказателиВПоказатели))
			|			И (НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления)
			|			И (НЕ ИсточникиДанныхДляРасчетов.НеИспользуется)
			|			И (ИсточникиДанныхДляРасчетов.СпособИспользования = ЗНАЧЕНИЕ(Перечисление.СпособыИспользованияОперандов.ДляФормулРасчета))
			|			И (ИсточникиДанныхДляРасчетов.ПотребительРасчета.СчетБД = СоответствияСчетовДляТрансляции.СчетПриемник)
			|			И (ИсточникиДанныхДляРасчетов.ПоказательОтбор.СчетБД = СоответствияСчетовДляТрансляции.СчетИсточник)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ Трансляции";
			
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

// Истина - если счета заполнены. Ложь если хотя бы один счет не заполнен.
// Если счет не заполнен, то делает запись об этом в журнал регистрации.
Функция ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт,СчетКт)
	Если НЕ ЗначениеЗаполнено(СчетДтИсточник) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, Нстр("ru = 'Не получилось определить счет дебета.'"));
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетКтИсточник) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, Нстр("ru = 'Не получилось определить счет кредита.'"));
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетДт) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			СтрШаблон(Нстр("ru = 'Не получилось сделать трансляцию счета дебета%1 плана счетов %2'"), 
				СчетДтИсточник, СчетДтИсточник.Владелец));
		Возврат Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетКт) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, 
			СтрШаблон(Нстр("ru = 'Не получилось сделать трансляцию счета кредита %1 плана счетов %2'"), 
				СчетКтИсточник, СчетКтИсточник.Владелец));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

Процедура ЗаписатьПроводкуЭлиминацииНРППродано(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	СчетДт = ДанныеЗаполнения.ТСчетДт;
	СчетКт = ПараметрыЭлиминации.ТехническийСчет;
	
	СчетДтИсточник = ДанныеЗаполнения.СчетДт;
	СчетКтИсточник = Справочники.СчетаБД.ПустаяСсылка();

	ИсточникДанныхДт = ДанныеЗаполнения.СчетДтИсточникДанных;
	
	ЗаменитьПустойСчетМСФО(СчетДт, СчетДтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт,СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = ПараметрыЭлиминации.ФункциональнаяВалюта;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = -ПараметрыЭлиминации.СуммаПроводки;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = -ПараметрыЭлиминации.СуммаПроводкиГр;
		НоваяСтрока.Комментарий = СтрШаблон(Нстр("ru = '%1. НРП проданный'"), ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 3));
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, ИсточникДанныхДт);
		ЗаполнитьЗначенияСубконтоТехСчетаЭлиминации(НоваяСтрока, "Кт", ПараметрыЭлиминации, ДанныеЗаполнения);
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииНРПЗапасы(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	СчетДт = ДанныеЗаполнения.ТСчетДт;
	СчетКт = ПараметрыЭлиминации.ТехническийСчет;
	
	СчетДтИсточник = ДанныеЗаполнения.СчетДт;
	СчетКтИсточник = Справочники.СчетаБД.ПустаяСсылка();

	ИсточникДанныхДт = ДанныеЗаполнения.СчетДтИсточникДанных;
	
	ЗаменитьПустойСчетМСФО(СчетДт, СчетДтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт,СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = ПараметрыЭлиминации.ФункциональнаяВалюта;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = -ПараметрыЭлиминации.СуммаПроводки;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = -ПараметрыЭлиминации.СуммаПроводкиГр;
		НоваяСтрока.Комментарий = СтрШаблон(Нстр("ru = '%1. НРП в остатках'"), ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 3));
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, ИсточникДанныхДт);
		ЗаполнитьЗначенияСубконтоТехСчетаЭлиминации(НоваяСтрока, "Кт", ПараметрыЭлиминации, ДанныеЗаполнения);
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		РасшифровкаОшибки = Символы.ПС + "	" + Символы.ПС + ПараметрыЭлиминации.РазделВГО;
		
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			РасшифровкаОшибки = СтрШаблон(Нстр("ru = '%1	Аналитика %2 = %3'"), РасшифровкаОшибки + Символы.ПС, 
			                    	Ном, ДанныеЗаполнения["Аналитика"+Ном]);
		КонецЦикла;
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.Элиминации",,, СтрШаблон(Нстр("ru = 'Техническая ошибка записи регистра проводок.%1'"), 
		                                                                       	РасшифровкаОшибки), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииСебестоимости(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	ЭтоОтправитель = ДанныеЗаполнения.ЭтоКредитор;
	
	Если НЕ ЭтоОтправитель И ПараметрыЭлиминации.РазделВГО.СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоОтправитель Тогда
		СчетДт = ДанныеЗаполнения.ТСчетУчетаСебестоимости;
		СчетКт = ПараметрыЭлиминации.ТехническийСчет;
		СчетДтИсточник = ДанныеЗаполнения.СчетУчетаСебестоимости;
		СчетКтИсточник = Справочники.СчетаБД.ПустаяСсылка();
		ПрефиксТехСчета = "Кт";
	Иначе
		СчетДт = ПараметрыЭлиминации.ТехническийСчет;
		СчетКт = ДанныеЗаполнения.ТСчетУчетаСебестоимости;
		СчетДтИсточник = Справочники.СчетаБД.ПустаяСсылка();
		СчетКтИсточник = ДанныеЗаполнения.СчетУчетаСебестоимости;
		ПрефиксТехСчета = "Дт";
	КонецЕсли;
	ИсточникДанныхТ = ДанныеЗаполнения.СчетУчетаСебестоимостиИсточникДанных;

	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.СчетУчета) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, Нстр("ru = 'Не получилось определить счет учета.'"));
		Возврат;
	КонецЕсли;
	
	Валюта = ДанныеЗаполнения.ВалютаВзаиморасчетов;
	
	ЗаменитьПустойСчетМСФО(СчетДт, СчетДтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт, СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = ДанныеЗаполнения.ИсточникДанных;
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = -ДанныеЗаполнения.Себестоимость;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = -ДанныеЗаполнения.СебестоимостьГр;
		НоваяСтрока.Комментарий = ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 2);
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, ИсточникДанныхТ, ?(ЭтоОтправитель, "СубконтоКт", "СубконтоДт"));
		ЗаполнитьЗначенияСубконтоТехСчетаЭлиминации(НоваяСтрока, ПрефиксТехСчета, ПараметрыЭлиминации, ДанныеЗаполнения);
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииВыручки(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	ЭтоОтправитель = ДанныеЗаполнения.ЭтоКредитор;
	
	Если НЕ ЭтоОтправитель И ПараметрыЭлиминации.РазделВГО.СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.СчетУчета) Тогда
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, Нстр("ru = 'Не получилось определить счет учета!'"));
		Возврат;
	КонецЕсли;
	
	Если ЭтоОтправитель Тогда
		СчетДт = ДанныеЗаполнения.ТСчетУчета;
		СчетКт = ПараметрыЭлиминации.ТехническийСчет;
		СчетДтИсточник = ДанныеЗаполнения.СчетУчета;
		СчетКтИсточник = Справочники.СчетаБД.ПустаяСсылка();
		ПрефиксТехСчета = "Кт";
	Иначе
		СчетДт = ПараметрыЭлиминации.ТехническийСчет;
		СчетКт = ДанныеЗаполнения.ТСчетУчета;
		СчетДтИсточник = Справочники.СчетаБД.ПустаяСсылка();
		СчетКтИсточник = ДанныеЗаполнения.СчетУчета;
		ПрефиксТехСчета = "Дт";
	КонецЕсли;
	ИсточникДанныхТ = ДанныеЗаполнения.СчетУчетаИсточникДанных;
	Валюта = ДанныеЗаполнения.ВалютаВзаиморасчетов;
	
	ЗаменитьПустойСчетМСФО(СчетДт, СчетДтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт, СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = ДанныеЗаполнения.ИсточникДанных;
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = -ДанныеЗаполнения.ПоказательСверки;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = -ДанныеЗаполнения.ПоказательСверкиГр;
		НоваяСтрока.Комментарий = ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 1);
		
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик,
								  ИсточникДанныхТ, ?(ЭтоОтправитель, "СубконтоДт", "СубконтоКт"));
								  
		ЗаполнитьЗначенияСубконтоТехСчетаЭлиминации(НоваяСтрока, ПрефиксТехСчета, ПараметрыЭлиминации, ДанныеЗаполнения);
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, 
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииЗначенияПоказателя(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = ПараметрыЭлиминации.ДокументЭлиминации;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.Значение = -ДанныеЗаполнения.ПоказательСверки;
		НоваяСтрока.Комментарий = ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 1);
		// Субконто не заполняем.
		НоваяСтрока.ИсточникДанных = ДанныеЗаполнения.ИсточникДанных;
		// Счета на заполняем.
		НоваяСтрока.Валюта = ДанныеЗаполнения.ВалютаВзаиморасчетов;
		Для Ном = 1 По ДанныеЗаполнения.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = -ДанныеЗаполнения.ПоказательСверкиГр;
		НоваяСтрока.ПоказательОтчета = ДанныеЗаполнения.ПоказательОтчета;
		РегПроводок.Записать();
		НомерЗаписи = НомерЗаписи + 1;
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииНаценкиПродавцаВНА(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	ЭтоОтправитель = ДанныеЗаполнения.ЭтоКредитор;
	
	Если НЕ ЭтоОтправитель Тогда
		Возврат;
	КонецЕсли;
	
	СчетДт = ПараметрыЭлиминации.ТехническийСчет;
	СчетДтИсточник = Справочники.СчетаБД.ПустаяСсылка();
	
	СчетКт = ДанныеЗаполнения.СчетУчетаВНА;
	СчетКтИсточник = ДанныеЗаполнения.СчетУчетаВНА;
	ИсточникДанныхТ = ДанныеЗаполнения.Проводка.ИсточникДанных;
	
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт, СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = ДанныеЗаполнения.Проводка.ВалютаВзаиморасчетов;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = ИсточникДанныхТ;
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения.Проводка["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = ДанныеЗаполнения.ПервоначальнаяСтоимостьДляРасчета;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = ДанныеЗаполнения.ПервоначальнаяСтоимостьДляРасчетаГр;
		НоваяСтрока.Комментарий = ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 3);
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения.Проводка, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, ИсточникДанныхТ, "СубконтоКт");
		ЗаполнитьЗначенияСубконтоТехСчетаЭлиминации(НоваяСтрока, "Дт", ПараметрыЭлиминации, ДанныеЗаполнения);
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииНакопленнойАмортизации(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	ЭтоОтправитель = ДанныеЗаполнения.ЭтоКредитор;
	
	Если НЕ ЭтоОтправитель Тогда
		Возврат;
	КонецЕсли;
	
	СчетДт = ДанныеЗаполнения.СчетУчетаВНА;
	СчетКт = ДанныеЗаполнения.СчетУчетаАмортизации;
	СчетДтИсточник = СчетДт;
	СчетКтИсточник = СчетКт;
	
	ЗаменитьПустойСчетМСФО(СчетДт, СчетДтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт, СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = ДанныеЗаполнения.ВалютаФункц;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = ДанныеЗаполнения.Проводка.ИсточникДанных;
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = ДанныеЗаполнения.НакопленнаяАмортизация;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = НоваяСтрока.Значение * ДанныеЗаполнения.Курс;
		НоваяСтрока.Комментарий = ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 5);
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, , "СубконтоДт");
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, , "СубконтоКт");
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьПроводкуЭлиминацииНачисленнойАмортизации(РегПроводок, НомерЗаписи, ДанныеЗаполнения, ПараметрыЭлиминации)
	ЭтоОтправитель = ДанныеЗаполнения.ЭтоКредитор;
	
	Если НЕ ЭтоОтправитель Тогда
		Возврат;
	КонецЕсли;
	
	СчетДт = ДанныеЗаполнения.СчетУчетаАмортизации;
	СчетКт = ДанныеЗаполнения.СчетУчетаЗатратПоАмортизации;
	СчетДтИсточник = СчетДт;
	СчетКтИсточник = СчетКт;
	
	ЗаменитьПустойСчетМСФО(СчетДт, СчетДтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	ЗаменитьПустойСчетМСФО(СчетКт, СчетКтИсточник, ПараметрыЭлиминации.ПланСчетовЭлиминации);
	
	Если ПроверитьЧтоЗаполненыСчетаДтКт(ПараметрыЭлиминации, ДанныеЗаполнения, СчетДтИсточник, СчетКтИсточник, СчетДт, СчетКт) Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = ДанныеЗаполнения.ВалютаФункц;
	
	Попытка
		РегПроводок.Отбор.Организация.Установить(ПараметрыЭлиминации.Организация);
		РегПроводок.Отбор.ДокументЭлиминации.Установить(ПараметрыЭлиминации.ДокументЭлиминации);
		РегПроводок.Отбор.РазделВГО.Установить(ПараметрыЭлиминации.РазделВГО);
		РегПроводок.Отбор.НомерЗаписи.Установить(НомерЗаписи);
		
		РегПроводок.Очистить();
		
		НоваяСтрока = РегПроводок.Добавить();
		НоваяСтрока.ДокументЭлиминации = РегПроводок.Отбор.ДокументЭлиминации.Значение;
		НоваяСтрока.НомерЗаписи = НомерЗаписи;
		НоваяСтрока.РазделВГО = ПараметрыЭлиминации.РазделВГО;
		НоваяСтрока.Организация = ПараметрыЭлиминации.Организация;
		НоваяСтрока.ИсточникДанных = ДанныеЗаполнения.Проводка.ИсточникДанных;
		НоваяСтрока.Валюта = Валюта;
		НоваяСтрока.ИсходныйСчетДт = СчетДтИсточник;
		НоваяСтрока.ИсходныйСчетКт = СчетКтИсточник;
		НоваяСтрока.СчетДт = СчетДт;
		НоваяСтрока.СчетКт = СчетКт;
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			НоваяСтрока["Аналитика"+Ном] = ДанныеЗаполнения["Аналитика"+Ном];
		КонецЦикла;
		НоваяСтрока.Значение = ДанныеЗаполнения.АмортизацияЗаПериодПоПереданнойСтоиомости - ДанныеЗаполнения.АмортизацияЗаПериод;
		НоваяСтрока.ЗначениеВВалютеЭлиминации = НоваяСтрока.Значение * ДанныеЗаполнения.Курс;
		НоваяСтрока.Комментарий = ПолучитьНаименованиеЭтапаЭлиминации(ПараметрыЭлиминации.РазделВГО, 5);
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, , "СубконтоДт");
		ЗаполнитьЗначенияСубконто(ДанныеЗаполнения, НоваяСтрока, ПараметрыЭлиминации.КолАналитик, , "СубконтоКт");
		РегПроводок.Записать();
		
		НомерЗаписи = НомерЗаписи + 1;
		
	Исключение
		ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения,
			Нстр("ru = 'Техническая ошибка записи регистра проводок.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

// Заполнить значения субконто технического счета
//
// Параметры:
//  ПриемникДанных - любой объект с реквизитами "СубконтоДт1..3", "СубконтоКт1..3". Будут установлены значения этих реквизитов.
//  ПрефиксТехСчета - Строка(2) "Дт" или "Кт" - префикс субконто.
//  ОписаниеТехСчета - 
//  ПараметрыЭлиминации - Структура - общие данные элиминации. Используемые реквизиты:
//		- ОписаниеТехСчета - Структура - описывает счет и правила заполнения его субконто.
//				Можно получить функцией Справочники.ШаблоныСверкиВГО.ПолучитьОписаниеТехническогоСчетаУрегулирования().
//		- Организация - СправочникСсылка.Организация.
//		- РазделВГО - СправочникСсылка.РазделыСверкиВГО.
//  ДанныеЗаполнения - Структура - данные подготовленные для заполнения проводки. Используем реквизиты:
//		- ЭтоКредитор - Булево. Если истина, то в проводке организация - это кредитор. Иначе дебитор.
//		- Контрагент - СправочникСсылка.Организация.
//		- ВалютаВзаиморасчетов - СправочникСсылка.Валюты.
//
Процедура ЗаполнитьЗначенияСубконтоТехСчетаЭлиминации(ПриемникДанных, ПрефиксТехСчета, ПараметрыЭлиминации, ДанныеЗаполнения)
	// Получаем структуру и заполняем поля: Организация, РазделВГО.
	ЗначенияЗаполнения = ПолучитьИсходныеЗначенияЗаполненияСубконтоТехСчета(ПараметрыЭлиминации);
	// Заполняем: Контрагент, ВалютаВзаиморасчетов.
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, ДанныеЗаполнения);
	
	Если ДанныеЗаполнения.ЭтоКредитор Тогда
		ЗначенияЗаполнения.Отправитель = ПараметрыЭлиминации.Организация;
		ЗначенияЗаполнения.Получатель = ДанныеЗаполнения.Контрагент;
	Иначе
		ЗначенияЗаполнения.Отправитель = ДанныеЗаполнения.Контрагент;
		ЗначенияЗаполнения.Получатель = ПараметрыЭлиминации.Организация;
	КонецЕсли;
	
	// Заполняем субконто проводки.
	ЗначенияСубконтоТехСчет = ПолучитьЗначенияСубконтоТехСчета(ПараметрыЭлиминации.ТехническийСчет, ЗначенияЗаполнения);
	ЗаполнитьЗначенияСубконтоТехническогоСчета(ПриемникДанных, ПрефиксТехСчета, ЗначенияСубконтоТехСчет);
КонецПроцедуры

Процедура ЗаписатьОшибкуВПротоколЭлиминации(ПараметрыЭлиминации, ДанныеЗаполнения, Знач ТекстОшибки, Знач ТехническаяИнформация="")
	ТекстОшибки = СтрШаблон(Нстр("ru = '%1
		|Сценарий: %2
		|Период: %3
		|Периметр: %4'"), 
	              	ТекстОшибки, ПараметрыЭлиминации.Сценарий, ПараметрыЭлиминации.ПериодОтчета, ПараметрыЭлиминации.ПериметрДляЭлиминации);
	Если ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		ТекстОшибки = СтрШаблон(Нстр("ru = '%1
			|Источник данных: %2
			|Раздел ВГО: %3'"), 
		              	ТекстОшибки, ДанныеЗаполнения.ИсточникДанных, ПараметрыЭлиминации.РазделВГО);
		Для Ном = 1 По ПараметрыЭлиминации.КолАналитик Цикл
			ТекстОшибки = СтрШаблон(Нстр("ru = '%1Аналитика %2 = %3'"), ТекстОшибки + Символы.ПС, Ном, 
			              	ДанныеЗаполнения["Аналитика"+Ном]);
		КонецЦикла;
	КонецЕсли;
	ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("Документ.Элиминации",,, ТекстОшибки, ТехническаяИнформация);
КонецПроцедуры

Функция ПолучитьИмяТаблицыДанных(ОписаниеИсточникаДанных)
	НомерСтрокиРесурса = ОписаниеИсточникаДанных.НомерСтрокиРесурса;
	Возврат "ИД" + НомерСтрокиРесурса;
	
	СпособДК = ОписаниеИсточникаДанных.СпособОпределенияНаправленияУчета;
	Если СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ТолькоДебет Тогда
		Возврат "ТабДт"; 
	ИначеЕсли СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ТолькоКредит Тогда
		Возврат "ТабКт";
	ИначеЕсли СпособДК = Перечисления.СпособОпределенияНаправленияУчета.ПоЗнакуОперации Тогда
		Возврат "ТабОбщ";
	КонецЕсли;
	Возврат "";
КонецФункции

// Заполнить субконто проводки значениями аналитик показателя счета.
// Паратетры:
//	ИсточникДанных - структура или строка таблицы значений, содержащая реквизиты "Аналитика1"-"Аналитика5".
//	ПриемникДанных - структура или строка таблицы значений, содержащая реквизиты "СубконтоДт1..3", "СубконтоКт1..3".
//	КолАналитик - Число - количество используемых аналитик в источнике данных.
//	ИсточникДанныхДляРасчетов - ссылка на элемент справочника "ИсточникиДанныхДляРасчетов", позволяет получить
//		правила трансляции субконто счетов источника и приемника.
//	ИмяРеквизитаСубконто - имя реквизита без номера. В такие реквизиты записываются значения. По умолчанию - "СубконтоДт".
//	ИмяРеквизитаАналитики - имя реквизита без номера. Из таких реквизитов читаются значения. По умолчанию - "Аналитика".
//
Процедура ЗаполнитьЗначенияСубконто(Знач ИсточникДанных, ПриемникДанных, Знач КолАналитик, Знач ИсточникДанныхДляРасчетов=Неопределено,
		Знач ИмяРеквизитаСубконто="СубконтоДт", Знач ИмяРеквизитаАналитики="Аналитика")
		
	Если ИмяРеквизитаСубконто="СубконтоДт" Тогда
		СчетУчета = ПриемникДанных.СчетДт;
	ИначеЕсли ИмяРеквизитаСубконто="СубконтоКт" Тогда
		СчетУчета = ПриемникДанных.СчетКт;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	ВидыСубконто = СчетУчета.ВидыСубконто;
	ЧислоСубконто = ВидыСубконто.Количество();
	
	Если ЧислоСубконто = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ИсточникДанныхДляРасчетов) Тогда
		ПравилаИспользованияПолейЗапроса = ИсточникДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса;
	Иначе
		ПравилаИспользованияПолейЗапроса = Неопределено;
	КонецЕсли;
	
	ТипДанныхКонтрагент = Тип("СправочникСсылка.Контрагенты");
	ТипДанныхОрганизация = Тип("СправочникСсылка.Организации");
	
	Если ЗначениеЗаполнено(ПравилаИспользованияПолейЗапроса) Тогда
		Для Каждого НастройкиСоответствия Из ПравилаИспользованияПолейЗапроса Цикл
			Попытка
				НомерСубконто = Число(Сред(НастройкиСоответствия.КодАналитики,10));
			Исключение
				НомерСубконто = 0;
				Продолжить;
			КонецПопытки;
			
			ВидСубконто = ПолучитьСубконтоИзВидовСубконтоСчетаБД(ВидыСубконто, НомерСубконто);
			ТипДопЗначенийСубконто = ПолучитьТипДопЗначенияПВХ(ВидСубконто);
			
			ОписаниеТиповПриемника = НастройкиСоответствия.АналитикаОперанда.ТипЗначения;
			Для Ном = 1 По КолАналитик Цикл
				ДанныеИсточника = ИсточникДанных[ИмяРеквизитаАналитики+Ном];
				ТипЗначенияДанных = ТипЗнч(ДанныеИсточника);
				Если ОписаниеТиповПриемника.СодержитТип(ТипЗначенияДанных) И
					 (ТипЗначенияДанных <> ТипДопЗначенийСубконто ИЛИ
						 ДанныеИсточника.Владелец = ВидСубконто) Тогда
						 
					ПриемникДанных[ИмяРеквизитаСубконто+НомерСубконто] = ДанныеИсточника;
					Прервать;
					
				ИначеЕсли ТипЗначенияДанных = ТипДанныхОрганизация И ОписаниеТиповПриемника.СодержитТип(ТипДанныхКонтрагент) Тогда
					// по организации определим контрагента
					КонтрагентВГО_ = ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(ДанныеИсточника);
					Если ЗначениеЗаполнено(КонтрагентВГО_) Тогда
						ПриемникДанных[ИмяРеквизитаСубконто+НомерСубконто] = КонтрагентВГО_;
						Прервать;
					КонецЕсли;
					
				ИначеЕсли ТипЗначенияДанных = ТипДанныхКонтрагент И ОписаниеТиповПриемника.СодержитТип(ТипДанныхОрганизация) Тогда
					// по контрагенту поределим организацию
					ОрганизацияВГО_ = ДанныеИсточника.ОрганизационнаяЕдиница;
					Если ЗначениеЗаполнено(ОрганизацияВГО_) Тогда
						ПриемникДанных[ИмяРеквизитаСубконто+НомерСубконто] = ОрганизацияВГО_;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		Для Каждого ОписаниеВидаСубконто Из ВидыСубконто Цикл
			НомерСубконто = ОписаниеВидаСубконто.Номер;
			ВидСубконто = ОписаниеВидаСубконто.ВидСубконтоСсылка;
			ТипДопЗначенийСубконто = ПолучитьТипДопЗначенияПВХ(ВидСубконто);
			
			ОписаниеТиповПриемника = ВидСубконто.ТипЗначения;
			Для Ном = 1 По КолАналитик Цикл
				ДанныеИсточника = ИсточникДанных[ИмяРеквизитаАналитики+Ном];
				ТипЗначенияДанных = ТипЗнч(ДанныеИсточника);
				Если ОписаниеТиповПриемника.СодержитТип(ТипЗначенияДанных) И
					 (ТипЗначенияДанных <> ТипДопЗначенийСубконто ИЛИ
						 ДанныеИсточника.Владелец = ВидСубконто) Тогда
						 
						ПриемникДанных[ИмяРеквизитаСубконто+НомерСубконто] = ДанныеИсточника;
						Прервать;
						
				ИначеЕсли ТипЗначенияДанных = ТипДанныхОрганизация И ОписаниеТиповПриемника.СодержитТип(ТипДанныхКонтрагент) Тогда
					// по организации определим контрагента
					КонтрагентВГО_ = ОрганизацииВызовСервераУХ.КонтрагентПоОрганизации(ДанныеИсточника);
					Если ЗначениеЗаполнено(КонтрагентВГО_) Тогда
						ПриемникДанных[ИмяРеквизитаСубконто+НомерСубконто] = КонтрагентВГО_;
						Прервать;
					КонецЕсли;
					
				ИначеЕсли ТипЗначенияДанных = ТипДанныхКонтрагент И ОписаниеТиповПриемника.СодержитТип(ТипДанныхОрганизация) Тогда
					// по контрагенту поределим организацию
					ОрганизацияВГО_ = ДанныеИсточника.ОрганизационнаяЕдиница;
					Если ЗначениеЗаполнено(ОрганизацияВГО_) Тогда
						ПриемникДанных[ИмяРеквизитаСубконто+НомерСубконто] = ОрганизацияВГО_;
						Прервать;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Если счет приемник - пустая ссылка на справочник "СчетаБД", и счет источник в том же плане счетов, что и ПланСчетов,
// то Счет приемник заменяем на счет источник.
// Иначе оставляем без изменений.
//
Процедура ЗаменитьПустойСчетМСФО(СчетПриемник, СчетИсточник, ПланСчетов)
	Если ЗначениеЗаполнено(СчетПриемник) Тогда
		Возврат;
	КонецЕсли;
	
	Если СчетИсточник.Владелец = ПланСчетов Тогда
		СчетПриемник = СчетИсточник;
	КонецЕсли;
КонецПроцедуры
	
Функция ПолучитьНаименованиеЭтапаЭлиминации(РазделВГО, НомерЭтапа)
	Перем Текст;
	Если НЕ ЗначениеЗаполнено(РазделВГО) Тогда
		Возврат "";
	КонецЕсли;
	
	СпособЭлиминации = РазделВГО.СпособЭлиминации;
	Текст = ""; // Строка(СпособЭлиминации);
	
	Если СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияСтатейБаланса Тогда
		Если НомерЭтапа = 1 Тогда
			Текст = Текст + НСтр("ru='Исключение задолженности'");
		КонецЕсли;
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияУслуг Тогда
		Если НомерЭтапа = 1 Тогда
			Текст = Текст + НСтр("ru='Исключение выручки/затрат'");
		КонецЕсли;
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияПоказателейОтчетов Тогда
		Если НомерЭтапа = 1 Тогда
			Текст = Текст + НСтр("ru='Исключение значений показателей отчетов'");
		КонецЕсли;
	
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияЗапасов Тогда
		Если НомерЭтапа = 1 Тогда
			Текст = Текст + НСтр("ru='Исключение выручки/затрат'");
		ИначеЕсли НомерЭтапа = 2 Тогда
			Текст = Текст + НСтр("ru='Исключение себестоимости'");
		ИначеЕсли НомерЭтапа = 3 Тогда
			Текст = Текст + НСтр("ru='Исключение НРП'");
		КонецЕсли;
		
	ИначеЕсли СпособЭлиминации = Перечисления.СпособыЭлиминации.ЭлиминацияОСиНМА Тогда
		Если НомерЭтапа = 1 Тогда
			Текст = Текст + НСтр("ru='Исключение выручки/затрат'");
		ИначеЕсли НомерЭтапа = 2 Тогда
			Текст = Текст + НСтр("ru='Исключение остаточной стоимости'");
		ИначеЕсли НомерЭтапа = 3 Тогда
			Текст = Текст + НСтр("ru='Исключение наценки при реализации'");
		ИначеЕсли НомерЭтапа = 4 Тогда
			Текст = Текст + НСтр("ru='Корректировка амортизации покупателя'");
		ИначеЕсли НомерЭтапа = 5 Тогда
			Текст = Текст + НСтр("ru='Исключение амортизации продавца'");
		КонецЕсли;
		
	КонецЕсли;
		
	Текст = Текст + НСтр("ru='. Раздел: '") + РазделВГО.Наименование;
	Возврат Текст;
КонецФункции

Функция ПолучитьСубконтоИзВидовСубконтоСчетаБД(ВидыСубконто, Номер)
	СтрокаВидСубконто_ = ВидыСубконто.Найти(Номер, "Номер");
	Если СтрокаВидСубконто_ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат СтрокаВидСубконто_.ВидСубконтоСсылка;
КонецФункции

// Получить тип справочника, который хранит дополнительные значения плана видов характеристик.
// Параметры:
//  ПВХ - ПланВидовХарактеристикСсылка - план видов характеристик для которого нужно получить тип справочника.
// 
// Возвращаемое значение:
//	Тип - тип справочника.
//  Неопределено - справочник у ПВХ не задан.
//
Функция ПолучитьТипДопЗначенияПВХ(ПВХ) 
	МетаданныеВидаСубконто = ПВХ.Метаданные();
	МетаданныеДопЗначенийСубконто = МетаданныеВидаСубконто.ДополнительныеЗначенияХарактеристик;
	Если МетаданныеДопЗначенийСубконто = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Тип("СправочникСсылка." + МетаданныеДопЗначенийСубконто.Имя);
КонецФункции


#КонецОбласти
