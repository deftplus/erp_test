
#Область СвойстваСчетов

Функция ПолучитьСвойстваСчета(Счет) Экспорт

	ДанныеСчета = Новый Структура;

	Если ТипЗнч(Счет) = Тип("СправочникСсылка.СчетаБД") Тогда
		
		ЗаданСчетСсылка = (Счет.СчетСсылка <> Неопределено) И НЕ Счет.СчетСсылка.Пустая();
		
		ДанныеСчета.Вставить("Ссылка",			Счет.Ссылка);		
		ДанныеСчета.Вставить("Код", 			Счет.Код);
		ДанныеСчета.Вставить("Наименование", 	Счет.Наименование);
		ДанныеСчета.Вставить("Родитель", 		Счет.Родитель);
		
		ДанныеСчета.Вставить("Вид", 			Счет.Вид);
		ДанныеСчета.Вставить("Забалансовый", 	Счет.Забалансовый);
		
		ДанныеСчета.Вставить("Валютный",						Счет.Валютный);
		ДанныеСчета.Вставить("Количественный", 					?(ЗаданСчетСсылка, Счет.СчетСсылка.Количественный, Ложь));
		ДанныеСчета.Вставить("УчетПоПодразделениям",			?(ЗаданСчетСсылка, Счет.СчетСсылка.УчетПоПодразделениям, Ложь));
		//ДанныеСчета.Вставить("УчетПоНаправлениямДеятельности",	?(ЗаданСчетСсылка, Счет.СчетСсылка.УчетПоНаправлениямДеятельности, Ложь));		
		ДанныеСчета.Вставить("УчетПоНаправлениямДеятельности",	СтрНайти(Счет.ПризнакиУчета, "УчетПоНаправлениямДеятельности") > 0);
				
		ДанныеСчета.Вставить("КоличествоСубконто",	Счет.ВидыСубконто.Количество());
		ДанныеСчета.Вставить("СчетМСФО", 			Счет.СчетСсылка);
		ДанныеСчета.Вставить("ЭтоСчетМСФО", 		Ложь);
				
		МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконто();
		Для Индекс = 1 По МаксКоличествоСубконто Цикл
			
			Если Индекс <= Счет.ВидыСубконто.Количество() Тогда
				
				ВидСубконтоСсылка = Счет.ВидыСубконто[Индекс - 1].ВидСубконтоСсылка;
				Если (ВидСубконтоСсылка = Неопределено) Или ВидСубконтоСсылка.Пустая() Тогда 
				    ТипЗначенияСубконто = Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип;
				Иначе //ЗначениеЗаполнено
					ТипЗначенияСубконто = ВидСубконтоСсылка.ТипЗначения;					
				КонецЕсли;
				
				ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   ТипЗначенияСубконто);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      СтрНайти(Счет.ВидыСубконто[Индекс - 1].ПризнакиУчетаСубконто, "Суммовой") >0);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Счет.ВидыСубконто[Индекс - 1].ТолькоОбороты);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Ссылка", 	   ВидСубконтоСсылка);

			Иначе
				
				ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   Неопределено);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  Неопределено);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   Неопределено);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      Ложь);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", Ложь);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Ссылка", 	   Неопределено);
					
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Счет) = Тип("ПланСчетовСсылка.МСФО") Или ТипЗнч(Счет) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда  
		
		ЭтоСчетМСФО = (ТипЗнч(Счет) = Тип("ПланСчетовСсылка.МСФО"));
		
		ДанныеСчета.Вставить("Ссылка", 							Счет.Ссылка);
		ДанныеСчета.Вставить("Код", 							Счет.Код);
		ДанныеСчета.Вставить("Наименование", 					Счет.Наименование);		
		ДанныеСчета.Вставить("Родитель", 						Счет.Родитель);				
		ДанныеСчета.Вставить("Вид", 							Счет.Вид);
		ДанныеСчета.Вставить("Забалансовый", 					Счет.Забалансовый);
		
		ДанныеСчета.Вставить("Валютный", 						Счет.Валютный);
		ДанныеСчета.Вставить("Количественный", 					Счет.Количественный);
		ДанныеСчета.Вставить("УчетПоПодразделениям",			Счет.УчетПоПодразделениям);
		ДанныеСчета.Вставить("УчетПоНаправлениямДеятельности",	?(ЭтоСчетМСФО, Счет.УчетПоНаправлениямДеятельности, Ложь));
		
		ДанныеСчета.Вставить("СчетМСФО", 						Счет.Ссылка);
		ДанныеСчета.Вставить("ЭтоСчетМСФО", 					Истина);		
		ДанныеСчета.Вставить("КоличествоСубконто", 				Счет.ВидыСубконто.Количество());
		ДанныеСчета.Вставить("НалоговыйУчет", 					?(ЭтоСчетМСФО, Ложь, Счет.НалоговыйУчет));
		
		МаксКоличествоСубконто = ПолучитьМаксКоличествоСубконто(?(ЭтоСчетМСФО, Неопределено, "Хозрасчетный"));
		
		Для Индекс = 1 По МаксКоличествоСубконто Цикл
			
			Если Индекс <= Счет.ВидыСубконто.Количество() Тогда
				
				ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   	Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  	Строка(Счет.ВидыСубконто[Индекс - 1].ВидСубконто));
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   	Счет.ВидыСубконто[Индекс - 1].ВидСубконто.ТипЗначения);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      	Счет.ВидыСубконто[Индекс - 1].Суммовой);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", 	Счет.ВидыСубконто[Индекс - 1].ТолькоОбороты);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Ссылка",			Счет.ВидыСубконто[Индекс - 1].ВидСубконто);
				
			Иначе
				
				ДанныеСчета.Вставить("ВидСубконто" + Индекс,                   	Неопределено);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Наименование",  	Неопределено);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТипЗначения",   	Неопределено);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Суммовой",      	Ложь);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "ТолькоОбороты", 	Ложь);
				ДанныеСчета.Вставить("ВидСубконто" + Индекс + "Ссылка",			Неопределено);

			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;

	Возврат ДанныеСчета;

КонецФункции

Функция ПолучитьМаксКоличествоСубконто(ИмяПланаСчетов = Неопределено) Экспорт

	Если ИмяПланаСчетов = Неопределено Тогда
		Возврат Метаданные.ПланыСчетов.МСФО.МаксКоличествоСубконто;
	Иначе 
		Возврат Метаданные.ПланыСчетов[ИмяПланаСчетов].МаксКоличествоСубконто;
	КонецЕсли;	

КонецФункции

Функция ПолучитьСчетаВИерархии(Счет) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	т.Ссылка КАК Счет
	|ИЗ
	|	ПланСчетов.МСФО КАК т
	|ГДЕ
	|	т.Ссылка В ИЕРАРХИИ(&Счет)");
	
	Если ТипЗнч(Счет) <> Тип("ПланСчетовСсылка.МСФО") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "МСФО", Метаданные.НайтиПоТипу(ТипЗнч(Счет)).Имя);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Счет", Счет);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Счет");
	
КонецФункции

#КонецОбласти

#Область ПредопределенныеСубконто

Функция ПолучитьПараметрыСубконтоФИ(Счет, ПолучитьКлючевые = Неопределено, ВключитьИнтервалы = Ложь, ВключитьЦБ = Ложь) Экспорт 
	
	ВозможныеРеквизиты = МСФОКлиентСерверУХ.ПолучитьКлючевыеСубконтоФИ(ВключитьИнтервалы, ВключитьЦБ);	
	Возврат ПолучитьПараметрыКлючевыхСубконто(Счет, ВозможныеРеквизиты, ПолучитьКлючевые);

КонецФункции

Функция ПолучитьПараметрыСубконтоВНА(Счет, ПолучитьКлючевые = Неопределено) Экспорт 
	
	ВозможныеРеквизиты = МСФОВНАУХ.ПолучитьКлючевыеСубконтоВНА();	
	Возврат ПолучитьПараметрыКлючевыхСубконто(Счет, ВозможныеРеквизиты, ПолучитьКлючевые);	

КонецФункции

Функция ПолучитьПараметрыСубконтоИнвестиции(Счет, ПолучитьКлючевые = Неопределено) Экспорт
	
	ВозможныеРеквизиты = МСФОКлиентСерверУХ.ПолучитьКлючевыеСубконтоИнвестиций();	
	Возврат ПолучитьПараметрыКлючевыхСубконто(Счет, ВозможныеРеквизиты, ПолучитьКлючевые); 
	
КонецФункции

Функция ПолучитьПараметрыКлючевыхСубконто(Счет, ВозможныеРеквизиты, ПолучитьКлючевые = Неопределено) 

	ПараметрыСубконто = Новый Соответствие;
	
	Если Счет = Неопределено Тогда
		Возврат ПараметрыСубконто;
	КонецЕсли;
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
	
	Если НЕ СвойстваСчета.Свойство("КоличествоСубконто") Тогда
		Возврат ПараметрыСубконто;
	КонецЕсли;
	
	Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
		
		ТипыСубконто = СвойстваСчета[СтрШаблон("ВидСубконто%1ТипЗначения", НомерСубконто)].Типы();
		
		Для каждого ТекущийТип Из ТипыСубконто Цикл
			ИмяКлючевогоРеквизита = ВозможныеРеквизиты.Получить(ТекущийТип);
			Если ЗначениеЗаполнено(ИмяКлючевогоРеквизита) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (ПолучитьКлючевые = Истина) И (ИмяКлючевогоРеквизита <> Неопределено) Тогда
			ПараметрыСубконто.Вставить(НомерСубконто, ИмяКлючевогоРеквизита);
		ИначеЕсли (ПолучитьКлючевые = Ложь) И (ИмяКлючевогоРеквизита = Неопределено) Тогда
			ПараметрыСубконто.Вставить(НомерСубконто, ИмяКлючевогоРеквизита);			
		ИначеЕсли ПолучитьКлючевые = Неопределено Тогда
			ПараметрыСубконто.Вставить(НомерСубконто, ИмяКлючевогоРеквизита);
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ПараметрыСубконто;
	
КонецФункции

#КонецОбласти

#Область ВидыУчета

Функция ПолучитьВидыУчетаРежимаЗаполнения(РежимЗаполнения) Экспорт
	
	Если РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.НСБУИМСФО Тогда
	
		Возврат Новый Структура("НСБУ,МСФО,ЕстьНСБУ,ЕстьМСФО", Перечисления.ВидыУчета.НСБУ, Перечисления.ВидыУчета.МСФО, Истина, Истина);
		
	ИначеЕсли РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.МСФО Тогда
		
		Возврат Новый Структура("НСБУ,МСФО,ЕстьНСБУ,ЕстьМСФО", Неопределено, Перечисления.ВидыУчета.МСФО, Ложь, Истина);
		
	ИначеЕсли РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.НСБУ Тогда
		
		Возврат Новый Структура("НСБУ,МСФО,ЕстьНСБУ,ЕстьМСФО", Перечисления.ВидыУчета.НСБУ, Неопределено, Истина, Ложь);
		
	Иначе
		
		Возврат Новый Структура("НСБУ,МСФО,ЕстьНСБУ,ЕстьМСФО", Неопределено, Неопределено, Ложь, Ложь);
		
	КонецЕсли;

КонецФункции

Функция ПолучитьСписокВидовУчетаПоРежимуЗаполнения(РежимЗаполнения = Неопределено) Экспорт

	РезультатСписок = Новый СписокЗначений;
	
	Если РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.НСБУИМСФО Тогда		
		РезультатСписок.Добавить(Перечисления.ВидыУчета.НСБУ);
		РезультатСписок.Добавить(Перечисления.ВидыУчета.МСФО);		
	ИначеЕсли РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.МСФО Тогда
		РезультатСписок.Добавить(Перечисления.ВидыУчета.МСФО);
	ИначеЕсли РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.НСБУ Тогда
		РезультатСписок.Добавить(Перечисления.ВидыУчета.НСБУ);
	КонецЕсли;	
	
	Возврат РезультатСписок; 
	
КонецФункции

#КонецОбласти

#Область ОбъектыУчета

Функция ПолучитьВидыСобытийВНАПоДокументам() Экспорт
	Возврат Справочники.ВидыОпераций.ПолучитьВидыСобытийВНАПоДокументам();
КонецФункции

Функция ПолучитьКэшированныйТекстЗапросаВНА(ПоляВыбораСтрокой = Неопределено, ТаблицаДляПомещения = Неопределено) Экспорт

	Отчет = Отчеты.ПараметрыВНА.Создать();
	НастройкиСКД = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	
	Если ПоляВыбораСтрокой <> Неопределено Тогда
		
		НастройкиСКД.Выбор.Элементы.Очистить();		
		
		Для каждого ТекущееПолеВыбора Из СтрРазделить(ПоляВыбораСтрокой, ",") Цикл		
			ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, СокрЛП(ТекущееПолеВыбора));
		КонецЦикла;
		
	КонецЕсли;
	
	Отчеты.ПараметрыВНА.ЗаполнитьПараметрыСКД(НастройкиСКД, ТекущаяДата(), Неопределено, Неопределено);
	
	Макет = ТиповыеОтчетыУХ.ПолучитьМакетКомпоновкиДанныхКоллекции(Отчет.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных"), НастройкиСКД, , Ложь, , );
	
	ТекстЗапроса = Макет.НаборыДанных.Получить(0).Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&П", "&ГраницаДоДокумента");

	Если ТаблицаДляПомещения = Неопределено Тогда
		
		Возврат ТекстЗапроса;	
		
	Иначе	
		
		СхемаЗапроса = Новый СхемаЗапроса;
		СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
		СхемаЗапроса.ПакетЗапросов[СхемаЗапроса.ПакетЗапросов.Количество()-1].ТаблицаДляПомещения = ТаблицаДляПомещения;
		
		ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		
		Возврат Новый Структура("Текст,НомераТаблиц", ТекстЗапроса, ПолучитьНомераТаблицСхемыЗапроса(СхемаЗапроса));
	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьНомераТаблицСхемыЗапроса(СхемаЗапроса)

	Результат = Новый Структура;
	
	Для каждого ЗапросПакета Из СхемаЗапроса.ПакетЗапросов Цикл
		ИмяЗапроса = ЗапросПакета.ТаблицаДляПомещения;
		Если Не ЗначениеЗаполнено(ИмяЗапроса) Тогда
			ИмяЗапроса = "_ЗапросПакета" + Формат(Результат.Количество(), "ЧГ=0");
		КонецЕсли;
		Результат.Вставить(ИмяЗапроса, Результат.Количество());
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьОписаниеТиповОбъектовОС() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ОбъектОС.Тип;
КонецФункции

Функция ПолучитьОписаниеТиповВНА() Экспорт
	Возврат Метаданные.ОпределяемыеТипы.ИсточникВНА.Тип;
КонецФункции

Функция ПолучитьСценарийМСФО() Экспорт
	Возврат Константы.СценарийМСФО.Получить();
КонецФункции

#КонецОбласти

#Область ПланыСчетовБД_ОСВ

Функция ПолучитьПланСчетовПоИмениРБ(ИмяРегистраБухгалтерииБД, ТипБД = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.ПланСчетов КАК ПланСчетов
	|ИЗ
	|	Справочник.РегистрыБухгалтерииБД КАК т
	|ГДЕ
	|	т.Наименование = &ИмяРегистра
	|	И НЕ т.ПометкаУдаления
	|	И т.Владелец = &ТипБД");
	Запрос.УстановитьПараметр("ИмяРегистра", ИмяРегистраБухгалтерииБД);
	Запрос.УстановитьПараметр("ТипБД", ?(ЗначениеЗаполнено(ТипБД), ТипБД, Справочники.ТипыБазДанных.ТекущаяИБ));
	
	РезультатЗапроса = Запрос.Выполнить();	
	Возврат ?(РезультатЗапроса.Пустой(), Справочники.ПланыСчетовБД.ПустаяСсылка(), РезультатЗапроса.Выгрузить().Получить(0).ПланСчетов);

КонецФункции

Функция ПолучитьОписаниеРегистраБухгалтерии(ИмяРегистраБухгалтерии) Экспорт

	ПоляРегистра = Новый ТаблицаЗначений;
	
	ПоляРегистра.Колонки.Добавить("Имя");
	ПоляРегистра.Колонки.Добавить("Заголовок");
	ПоляРегистра.Колонки.Добавить("ВидМД");
	ПоляРегистра.Колонки.Добавить("Тип");
	ПоляРегистра.Колонки.Добавить("ТекстЗапросаПустойСсылки");
	ПоляРегистра.Колонки.Добавить("Балансовый");
	ПоляРегистра.Колонки.Добавить("ПризнакУчета");
	ПоляРегистра.Колонки.Добавить("ПризнакУчетаСубконто");
	ПоляРегистра.Колонки.Добавить("Индексировать");
	
	ПоляРегистра.Колонки.Добавить("РольСубконто");
	ПоляРегистра.Колонки.Добавить("НомерСубконто");
	
	мдРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	ИсточникиРеквизитов = Новый Структура("Измерения, СтандартныеРеквизиты, Ресурсы, Реквизиты");
	
	Для Каждого ИсточникРеквизитов Из ИсточникиРеквизитов Цикл
		Для Каждого Стр Из мдРегистра[ИсточникРеквизитов.Ключ] Цикл
			
			СтрокаТаб = ПоляРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаб, Стр);
			
			СтрокаТаб.ВидМД = ИсточникРеквизитов.Ключ;
			
			Если ИсточникРеквизитов.Ключ = "Измерения" Тогда
				ТипыПоля = Стр.Тип.Типы();
				Если ТипыПоля.Количество() = 1 Тогда
					СтрокаТаб.ТекстЗапросаПустойСсылки = СтрШаблон("ЗНАЧЕНИЕ(%1.ПустаяСсылка)", Метаданные.НайтиПоТипу(ТипыПоля[0]).ПолноеИмя());
				Иначе 
					СтрокаТаб.ТекстЗапросаПустойСсылки = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
				
			ИначеЕсли ИсточникРеквизитов.Ключ = "СтандартныеРеквизиты" Тогда
				
				Если СтрНачинаетсяС(Стр.Имя, "ВидСубконто") Тогда
					СтрокаТаб.РольСубконто = "ВидСубконто";
					СтрокаТаб.НомерСубконто = Число(СтрЗаменить(Стр.Имя, "ВидСубконто", ""));
				ИначеЕсли СтрНачинаетсяС(Стр.Имя, "Субконто") Тогда
					СтрокаТаб.РольСубконто = "Субконто";
					СтрокаТаб.НомерСубконто = Число(СтрЗаменить(Стр.Имя, "Субконто", ""));
				КонецЕсли; 	
							
			КонецЕсли;
									
		КонецЦикла;
	КонецЦикла;
	
	ПоляРегистра.Индексы.Добавить("ВидМД");
	ПоляРегистра.Индексы.Добавить("РольСубконто");	
	
	Результат = Новый Структура("Имя, ПолноеИмя, Поля", мдРегистра.Имя, мдРегистра.ПолноеИмя(), ПоляРегистра);
	
	Возврат Результат;
	
КонецФункции

//возвращает ВидОперации
Функция ДополнительныеИзмеренияРБ(Знач ИмяРБ = Неопределено) Экспорт

	Если ИмяРБ = Неопределено Тогда
		ИмяРБ = "МСФО";
	КонецЕсли;
	
	Исключения = Новый Структура("Сценарий, Организация");
	
	Результат = Новый СписокЗначений;
	Для каждого Измерение Из Метаданные.РегистрыБухгалтерии[ИмяРБ].Измерения Цикл
	
		Если Измерение.ПризнакУчета <> Неопределено Тогда
			Продолжить;
		ИначеЕсли Исключения.Свойство(Измерение.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(Измерение.Имя, Измерение.Синоним);
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция НастройкиШаблонаТрансляции(ШаблонТрансляции = Неопределено) Экспорт

	Результат = Новый Структура("ДоступныеПути, ДоступныеОтборы", Новый Массив, Новый Массив);
	
	Запрос = Новый Запрос(ТекстЗапроса_ДоступныеПути());
	Запрос.УстановитьПараметр("ШаблонТрансляции", ШаблонТрансляции);
	
	Результат.Вставить("ДоступныеПути", Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Поле"));
	
	Возврат Результат;

КонецФункции

Функция ТекстЗапроса_ДоступныеПути()

	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Получение.Поле КАК Поле
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК Получение
	|		ПО ИД.Ссылка = Получение.Ссылка
	|ГДЕ
	|	ИД.НазначениеРасчетов В
	|			(ВЫБРАТЬ
	|				т.Ссылка
	|			ИЗ
	|				Справочник.ПравилаОбработки КАК т
	|			ГДЕ
	|				т.Владелец = &ШаблонТрансляции)
	|	И НЕ Получение.Поле В ("""", ""Сумма"")
	|	И Получение.Поле <> Получение.КодАналитики
	|	И Получение.КодАналитики <> ""АналитикаВалюта"""; 

КонецФункции

#КонецОбласти

#Область ВГО

Функция ПолучитьНомераЗпоВгоПоПериодуСценарию(ПериодСценария, Сценарий) Экспорт 

	НомераТаблиц = Новый Структура;
	
	ТекстЗапроса_ЗпоВго = ТекстЗапроса_ЗпоВго(НомераТаблиц);
	ТекстЗапроса_ЗпоВго = ТекстЗапроса_ЗпоВго + 
	" 
	|И т.Ссылка.Владелец В (ВЫБРАТЬ ПЕРВЫЕ 1 
	|								т.ВерсияРегламента.ШаблонСверкиВГО 
	|							ИЗ
	|								РегистрСведений.СтатусыПериодовСценариев КАК т
	|							ГДЕ
	|								т.Периоды = &ПериодСценария
	|								И т.Сценарии = &Сценарий)";
	
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(ТекстЗапроса_ЗпоВго);
	ТекстЗапроса.Добавить(ТекстЗапроса_ОтборыВГО(НомераТаблиц));
	
	Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета()));
	
	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	Результат = Новый Структура;
	Для каждого ТекНомер Из НомераТаблиц Цикл
		Результат.Вставить(ТекНомер.Ключ, РезультатПакет[ТекНомер.Значение].Выгрузить()); 
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ТекстЗапроса_ЗпоВго(НомераТаблиц)

	НомераТаблиц.Вставить("НомераЗпоВго", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВЫБОР ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики1
	|			ТОГДА 0
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики2
	|			ТОГДА 1
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики3
	|			ТОГДА 2
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики4
	|			ТОГДА 3
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики5
	|			ТОГДА 4
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики6
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК НомерЗПО,
	|	ВЫБОР ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникКонтрагенты)
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики1
	|			ТОГДА 1
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики2
	|			ТОГДА 2
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики3
	|			ТОГДА 3
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики4
	|			ТОГДА 4
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики5
	|			ТОГДА 5
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики6
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерАналитикиКонтрагент,
	|	ВЫБОР ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты)
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики1
	|			ТОГДА 1
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики2
	|			ТОГДА 2
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики3
	|			ТОГДА 3
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики4
	|			ТОГДА 4
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики5
	|			ТОГДА 5
	|		КОГДА т.ИсточникДанных.ГруппаРаскрытияОтбор.ВидАналитики6
	|			ТОГДА 6
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерАналитикиВалюта
	|ИЗ
	|	Справочник.РазделыСверкиВГО.ИсточникиДанных КАК т
	|ГДЕ
	|	т.ИсточникДанных.ГруппаРаскрытияОтбор <> ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)";

КонецФункции

Функция ТекстЗапроса_ОтборыВГО(НомераТаблиц)

	НомераТаблиц.Вставить("ОтборыВГО", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ ИСТИНА";
	//**ИД, ИмяАналитики, Значение 
	//**ТаблицаПараметровОтбораБД   - ПолеБД, ИмяПараметра, СпособВычисления...
	//**УточненияСпособовОпределения - ИмяПараметра
	
КонецФункции

#КонецОбласти
