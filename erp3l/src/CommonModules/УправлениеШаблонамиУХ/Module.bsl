////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ФУНКЦИИ РАБОТЫ С ШАБЛОНАМИ.
//

Функция ПолучитьЭлементШаблона(Объект) Экспорт
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.ШаблоныОповещений ГДЕ Объект = &Объект";
	Запрос.УстановитьПараметр("Объект", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ИнициализироватьДанныеПоШаблону(ЭлементШаблона, СхемаКомпоновки, ТипШаблона, Текст, ТабВычПолей, Компоновщик)
	
	ТипШаблона  = ЭлементШаблона.ТипШаблона;
	Текст       = ЭлементШаблона.Шаблон.Получить();
	ТабВычПолей = ПолучитьВычисляемыеПоляИзТекста(?(ТипШаблона = Перечисления.ТипыШаблонов.Текстовый, Текст, ИзHTMLПолучитьТекст(Текст)));
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	
КонецПроцедуры

Процедура ОтправитьПисьмаПоПодготовленномуШаблону(СхемаКомпоновкиДанных, Компоновщик, ТипШаблона, Текст, ТабВычПолей, ТаблицаАдресов, РегистраторПисьма)
	
	Если ЗначениеЗаполнено(ТабВычПолей) Тогда	
		
		
		Для Каждого Строка Из ТабВычПолей Цикл
			ПолеКомпоновки = Компоновщик.Настройки.Выбор.Элементы.ДОбавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеКомпоновки.Поле = Новый ПолеКомпоновкиДанных(Строка.Поле);
		КонецЦикла;
		
		Группировка = Компоновщик.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		ТекПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("АвтоПолеГруппировкиКомпоновкиДанных"));
		
		Группировка.Использование = Истина;
		
		Для Каждого Строка Из ТабВычПолей Цикл
			ТекПолеОтображения = Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ТекПолеОтображения.Поле = Новый ПолеКомпоновкиДанных(Строка.Поле);
		КонецЦикла;
		
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
		
		Пока Истина Цикл
			ТекДанные = ПроцессорКомпоновкиДанных.Следующий();
			Если ТекДанные <> Неопределено Тогда
				Значения = ТекДанные.ЗначенияПараметров;
				Если ЗначениеЗаполнено(Значения) Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Для Инд = 0 По ТабВычПолей.Количество() - 1 Цикл
			ТабВычПолей[Инд].Значение = Значения[Инд].Значение;
		КонецЦикла;
	
		// Сделаем замены в тексте
		ВыполнитьЗаменыВТекстеПоВычисляемымПолям(табВычПолей, Текст);

	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тексты.Добавить(Текст, ?(ТипШаблона = Перечисления.ТипыШаблонов.HTML, ТипТекстаПочтовогоСообщения.HTML, ТипТекстаПочтовогоСообщения.ПростойТекст));
	Письмо.Тема = НСтр("ru = '1С: Консолидация. Оповещение'");
	
	Для Каждого Строка Из ТаблицаАдресов Цикл
		Письмо.Получатели.Добавить(Строка.Адрес);
	КонецЦикла;
	
	УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, РегистраторПисьма);

	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВЫЧИСЛЯЕМЫЕ ПОЛЯ

// Получить пустую таблицу для хранения полей которые требуется вычислить
//
Функция ПолучитьПустуюТаблицуВычисляемыхПолей()

	табВычПолей = Новый ТаблицаЗначений;
	табВычПолей.Колонки.Добавить("Поле",           Новый ОписаниеТипов("Строка"));
	табВычПолей.Колонки.Добавить("Значение",       Новый ОписаниеТипов("Строка"));
	табВычПолей.Колонки.Добавить("НужноВычислять", Новый ОписаниеТипов("Булево"));
	табВычПолей.Колонки.Добавить("НомерПоля",      Новый ОписаниеТипов("Число"));
	
	Возврат табВычПолей;

КонецФункции // ПолучитьПустуюТаблицуВычисляемыхПолей()

// В таблице вычисляемых полей заполнить значения дополнительных полей
//
Процедура ВТаблицеВычисляемыхПолейЗаполнитьДополнительные(табВычПолей)

	текДата = ТекущаяДата();
	Для Каждого Стр Из табВычПолей Цикл
		Если ВРЕГ(Стр.Поле) = ВРЕГ("ТекущаяДатаИВремя") Тогда
			Стр.Значение = Формат(текДата, "ДЛФ=DT");
			
		ИначеЕсли ВРЕГ(Стр.Поле) = ВРЕГ("ТекущаяДата") Тогда
			Стр.Значение = Формат(текДата, "ДФ=dd.MM.yyyy");
			
		ИначеЕсли ВРЕГ(Стр.Поле) = ВРЕГ("ТекущееВремя") Тогда
			Стр.Значение = Формат(текДата, "ДФ=ЧЧ:мм:сс");
			
		ИначеЕсли ВРЕГ(Стр.Поле) = ВРЕГ("ИмяПользователя") Тогда
			Стр.Значение = ИмяПользователя();
			
		Иначе
			Стр.НужноВычислять = Истина;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Добавить запись в таблицу вычисляемых полей
//
Процедура ДобавитьПолеВТаблицуВычисляемыхПолей(табВычПолей, Поле, НужноВычислять)

	Если табВычПолей.Найти(Поле, "Поле") = Неопределено Тогда
		новСтр = табВычПолей.Добавить();
		новСтр.Поле = Поле;
		новСтр.НужноВычислять = НужноВычислять;
		новСтр.НомерПоля = 0;
	КонецЕсли;

КонецПроцедуры

// Из строки шаблона добавить все вычисляемые поля в таблицу
//
Процедура ДобавитьПоляИзТекстаВТаблицуВычисляемыхПолей(табВычПолей, Текст)

	Для Сч = 1 По СтрЧислоСтрок(Текст) Цикл
		Стр = СтрПолучитьСтроку(Текст, Сч);
		
		Пока Истина Цикл
			Поз = СтрНайти(Стр, "%%");
			Если Поз = 0 Тогда
				Прервать;
			КонецЕсли;
			Стр = Сред(Стр, Поз + 2);
			
			Поз = СтрНайти(Стр, "%%");
			Если Поз = 0 Тогда
				Прервать;
			КонецЕсли;
			Поле = Лев(Стр, Поз-1);
			Стр = Сред(Стр, Поз+2);
			
			ДобавитьПолеВТаблицуВычисляемыхПолей(табВычПолей, Поле, Ложь);
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

// По тексту шаблона создать таблицу с вычисляемыми полями
//
Функция ПолучитьВычисляемыеПоляИзТекста(Текст) Экспорт

	табВычПолей = ПолучитьПустуюТаблицуВычисляемыхПолей();
	ДобавитьПоляИзТекстаВТаблицуВычисляемыхПолей(табВычПолей, Текст);
	ВТаблицеВычисляемыхПолейЗаполнитьДополнительные(табВычПолей);
	
	Возврат табВычПолей;

КонецФункции // ПолучитьВычисляемыеПоляИзТекста()

// По табличному шаблону создать таблицу с вычисляемыми полями
//
Функция ПолучитьВычисляемыеПоляИзТаблицы(Таб) Экспорт

	табВычПолей = ПолучитьПустуюТаблицуВычисляемыхПолей();
	
	Для СчСтр = 1 По Таб.ВысотаТаблицы Цикл
		Для СчКол = 1 По Таб.ШиринаТаблицы Цикл
			ДобавитьПоляИзТекстаВТаблицуВычисляемыхПолей(табВычПолей, Таб.Область(СчСтр, СчКол).Текст);
		КонецЦикла;
	КонецЦикла;
	
	ВТаблицеВычисляемыхПолейЗаполнитьДополнительные(табВычПолей);
	
	Возврат табВычПолей;

КонецФункции // ПолучитьВычисляемыеПоляИзТаблицы()

// В строке с вычисляемыми полями выполнить замены значений
//
Процедура ВыполнитьЗаменыВТекстеПоВычисляемымПолям(табВычПолей, Текст)

	Для Каждого Стр Из табВычПолей Цикл
		Текст = СтрЗаменить(Текст, "%%" + Стр.Поле + "%%", Стр.Значение);
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАБОТА С СКД

// Для объекта получить макет СКД для подстановки в шаблоне
//
Функция ПолучитьСхемуСКДДляПодстановкиВШаблоне(МетаданныеОбъекта) Экспорт

	Имя = МетаданныеОбъекта.Имя;
	ИмяМакета = "ПоляШаблона";
	
	Если Метаданные.Справочники.Содержит(МетаданныеОбъекта) Тогда
		Возврат Справочники[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.Документы.Содержит(МетаданныеОбъекта) Тогда
		Возврат Документы[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.Отчеты.Содержит(МетаданныеОбъекта) Тогда
		Возврат Отчеты[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.Обработки.Содержит(МетаданныеОбъекта) Тогда
		Возврат Обработки[Имя].ПолучитьМакет(ИмяМакета);
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеОбъекта) Тогда
		Возврат РегистрыСведений[Имя].ПолучитьМакет(ИмяМакета);
	
	Иначе
		Возврат Неопределено;
		
	КонецЕсли;

КонецФункции // ПолучитьСхемуСКДДляПодстановкиВШаблоне()

// Среди элементов полей СКД найти поле по имени
//
Функция НайтиПолеСКДПоИмени(Элементы, Имя)

	Для Каждого Элемент Из Элементы Цикл
		Если ВРЕГ(Строка(Элемент.Поле)) = ВРЕГ(Имя) Тогда
			Возврат Элемент;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // НайтиПолеСКДПоИмени()

// Найти поле СКД по полному имени
//
Функция НайтиПолеСКДПоПолномуИмени(Элементы, ПолноеИмя)

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя);
	колЧастей = масЧастейИмен.Количество();
	
	текИмя = масЧастейИмен[0];
	Поле = НайтиПолеСКДПоИмени(Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Поле;

КонецФункции // НайтиПолеСКДПоПолномуИмени()

// Вычислить значение поля объекта по полному пути
//
Функция ВычислитьЗначениеПоляПоПолномуПути(Объект, Путь, ТекстЗапросаПроХарактеристики) Экспорт

	масЧастейИмен = ИзПолногоИмениПоляПолучитьЧасти(Путь);
	колЧастей = масЧастейИмен.Количество();
	
	ПервоеЗначение = ПолучитьЗначениеРеквизитаОбъекта(Объект, масЧастейИмен[0]);
	Если Не ЗначениеЗаполнено(ПервоеЗначение) ИЛИ колЧастей = 1 Тогда
		Возврат ПервоеЗначение;
	КонецЕсли;
	
	Если (НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение)))
		И (НЕ ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(ПервоеЗначение))) Тогда
		ИмяМетаданных = ПервоеЗначение.Метаданные().ПолноеИмя();
		
		Возврат "";
	КонецЕсли;
	
	ИмяМетаданных = ПервоеЗначение.Метаданные().ПолноеИмя();
	
	ТекстЗапроса = "ВЫБРАТЬ Таблица.Ссылка ИЗ " + ИмяМетаданных + " КАК Таблица
	|" + ТекстЗапросаПроХарактеристики;
	
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	Источник = СКД.ИсточникиДанных.Добавить();
	Источник.Имя = "ИсточникДанных1";
	Источник.ТипИсточникаДанных = "Local";
	
	Набор = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	Набор.Имя = "НаборДанных1";
	Набор.ИсточникДанных = "ИсточникДанных1";
	Набор.Запрос = ТекстЗапроса;
	
	Поле = Набор.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	Поле.ПутьКДанным = "Ссылка";
	Поле.Поле = "Ссылка";
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
	
	текИмя = "Ссылка";
	Поле = НайтиПолеСКДПоИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, текИмя);
	Если Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПолеСсылка = Поле;
	
	Для Сч = 2 По колЧастей Цикл
		текИмя = текИмя +"." + масЧастейИмен[Сч-1];
		Поле = НайтиПолеСКДПоИмени(Поле.Элементы, текИмя);
		Если Поле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле.Поле;
	
	ДобавитьОтборВНастройкиСКД(Компоновщик.Настройки, ПолеСсылка.Поле, ПервоеЗначение, ВидСравненияКомпоновкиДанных.Равно);
	ДобавитьАвтоГруппировкуВНастройкиСКД(Компоновщик.Настройки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СКД, Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		Значения = ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров;
		Если Значения.Количество() > 0 Тогда
			
			Для Каждого Значение Из Значения Цикл
				Возврат Значение.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции // ВычислитьЗначениеПоляПоПолномуПути()

// Из текста запроса получить текст про характеристики
//
Функция ТекстЗапросаКХарактеристикам(ТекстЗапроса)
	
	Поз = СтрНайти(ВРег(ТекстЗапроса), "{ХАРАКТЕРИСТИКИ");
	Возврат ?(Поз = 0, "", Сред(ТекстЗапроса, Поз));
	
КонецФункции // ТекстЗапросаКХарактеристикам()

// В настройки СКД добавить автогруппировку
//
Процедура ДобавитьАвтоГруппировкуВНастройкиСКД(Настройки)

	Группировка = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка.Использование = Истина;
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));

КонецПроцедуры

// В настройки СКД добавить отбор
//
Функция ДобавитьОтборВНастройкиСКД(Настройки, Поле, Значение, ВидСравнения)

	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.ЛевоеЗначение = Поле;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.ВидСравнения = ВидСравнения;
	
	Возврат ЭлементОтбора;

КонецФункции

Функция НайтиПолеВШаблонеПоИмени(ПоляШаблона, ИмяПоля) Экспорт
	
	// Попробуем сначала найти по переданному имени
	Поле = НайтиПолеСКДПоПолномуИмени(ПоляШаблона, ИмяПоля);
	Если Поле <> Неопределено Тогда
		Возврат Поле;
	КонецЕсли;
	
	// Если не нашли, то возможно надо добавить (или убрать) вначале имени поля "ВсеПоля."
	СтрВсеПоля = "ВсеПоля.";
	Если Лев(ИмяПоля, СтрДлина(СтрВсеПоля)) = СтрВсеПоля Тогда
		НовоеИмя = Сред(ИмяПоля, СтрДлина(СтрВсеПоля) + 1);
	Иначе
		НовоеИмя = СтрВсеПоля + ИмяПоля;
	КонецЕсли;
	Возврат НайтиПолеСКДПоПолномуИмени(ПоляШаблона, НовоеИмя);
	
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Полное имя поля разделить по частям
//
Функция ИзПолногоИмениПоляПолучитьЧасти(ПолноеИмя)

	масЧастей = Новый Массив;
	СтрИмя = ПолноеИмя;
	
	Пока Не ПустаяСтрока(СтрИмя) Цикл
		Если Лев(СтрИмя, 1) = "[" Тогда
			
			Поз = СтрНайти(СтрИмя, "]");
			Если Поз = 0 Тогда
				масЧастей.Добавить(Сред(СтрИмя, 2));
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Сред(СтрИмя, 1, Поз));
				СтрИмя = Сред(СтрИмя, Поз + 2);
			КонецЕсли;
			
		Иначе
			
			Поз = СтрНайти(СтрИмя, ".");
			Если Поз = 0 Тогда
				масЧастей.Добавить(СтрИмя);
				СтрИмя = "";
			Иначе
				масЧастей.Добавить(Лев(СтрИмя, Поз - 1));
				СтрИмя = Сред(СтрИмя, Поз + 1);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат масЧастей;

КонецФункции // ИзПолногоИмениПоляПолучитьЧасти()

// Получить значение реквизита объекта
//
Функция ПолучитьЗначениеРеквизитаОбъекта(Объект, Реквизит)

	Если Реквизит = "Код" Тогда
		Возврат Объект.Код;
	ИначеЕсли Реквизит = "Ссылка" Тогда
		Возврат Объект.Ссылка;
	ИначеЕсли Реквизит = "Номер" Тогда
		Возврат Объект.Номер;
	ИначеЕсли Реквизит = "Наименование" Тогда
		Возврат Объект.Наименование;
	ИначеЕсли Реквизит = "Проведен" Тогда
		Возврат Объект.Проведен;
	ИначеЕсли Реквизит = "Родитель" Тогда
		Возврат Объект.Родитель;
	ИначеЕсли Реквизит = "Владелец" Тогда
		Возврат Объект.Владелец;
	Иначе
		Возврат Объект[Реквизит];
	КонецЕсли;

КонецФункции // ПолучитьЗначениеРеквизитаОбъекта()

// Из HTML текста получить текст без тэгов
//
Функция ИзHTMLПолучитьТекст(Текст) Экспорт

	НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");
	НовыйHTMLДокумент.open("text/html");
	НовыйHTMLДокумент.write(Текст);
	НовыйHTMLДокумент.close();
	
	Возврат НовыйHTMLДокумент.all.tags("html").item(0).innerText;

КонецФункции // ИзHTMLПолучитьТекст()

Функция ВыполнитьПроверкуШаблона(Текст, КомпоновщикНастроек, ТекстСообщения) Экспорт
	
	ТабВычПолей = УправлениеШаблонамиУХ.ПолучитьВычисляемыеПоляИзТекста(Текст);
	ТекстСообщения = "";
	ЕстьОшибки = Ложь;
	Для Каждого Стр Из ТабВычПолей Цикл
		Если Стр.НужноВычислять Тогда
			ИмяПоля = Стр.Поле;
			Поле = УправлениеШаблонамиУХ.НайтиПолеВШаблонеПоИмени(КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.Элементы, ИмяПоля);
			Если Поле = Неопределено Тогда
				ЕстьОшибки = Истина;
				ТекстСообщения = ТекстСообщения + НСтр("ru = '
				|Не найдено поле: '") + ИмяПоля;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЕстьОшибки Тогда
		ТекстСообщения = НСтр("ru = 'Ошибок нет'");
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;

КонецФункции

// Создает элемент справочника Хранилище шаблонов, заполняет соответственные переданные поля
// и возвращает ссылку на шаблон.
Функция СоздатьШаблонДляВидаСобытия(КатегорияОповещенияВход, ВидСобытияОповещенияВход, ТипОбъектаОповещенияВход, ВидОбъектаОповещенияВход, ЗаполнитьТекстПоУмолчаниюВход = Ложь) Экспорт
	РезультатФункции = Справочники.ШаблоныОповещений.ПустаяСсылка();
	Попытка
		НовыйШаблон = Справочники.ШаблоныОповещений.СоздатьЭлемент();
		НовыйШаблон.Наименование = Строка(ВидСобытияОповещенияВход) + ": " + Строка(ТипОбъектаОповещенияВход);
		НовыйШаблон.КатегорияОповещения			 = КатегорияОповещенияВход;
		НовыйШаблон.НазначениеОповещения		 = ВидСобытияОповещенияВход;
		НовыйШаблон.ТипОбъектаОповещения		 = ТипОбъектаОповещенияВход;
		НовыйШаблон.ВидОбъектаОповещения		 = ВидОбъектаОповещенияВход;
		Если ЗаполнитьТекстПоУмолчаниюВход Тогда
			Если ЗначениеЗаполнено(ТипОбъектаОповещенияВход) Тогда
				ПустаяСсылкаСправочникаБД = МодульУправленияОповещениямиУХ.ПолучитьПустоеЗначениеСправочникаБД(ТипОбъектаОповещенияВход);
			Иначе
				ПустаяСсылкаСправочникаБД = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();
			КонецЕсли;
			Если ПустаяСсылкаСправочникаБД <> Неопределено Тогда
				ТекстШаблонаВход = МодульУправленияОповещениямиУХ.ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияОповещенияВход, ВидСобытияОповещенияВход, ПустаяСсылкаСправочникаБД);
				НовыйШаблон.Шаблон = Новый ХранилищеЗначения(ТекстШаблонаВход);
			Иначе
				ТекстОшибки = НСтр("ru = 'Не удалось получить пустое значение для типа %ТипОбъектаОповещения%. Заполнение шаблона по умолчанию отменено.'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипОбъектаОповещения%", Строка(ТипОбъектаОповещенияВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
			КонецЕсли;
		Иначе
			// Не заменяем текст шаблона
		КонецЕсли;
		НовыйШаблон.Записать();
		РезультатФункции = НовыйШаблон.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать шаблон для вида события %ВидСобытия%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСобытия%", Строка(ВидСобытияОповещенияВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники.ШаблоныОповещений.ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Создает элемент справочника Хранилище шаблонов, заполняет соответственные 
// переданные в структуре поля и возвращает ссылку на шаблон.
Функция СоздатьШаблонПоСтруктуреСобытия(СтруктураВход, ЗаполнитьТекстПоУмолчаниюВход = Ложь) Экспорт
	РезультатФункции = СоздатьШаблонДляВидаСобытия(СтруктураВход.КатегорияОповещения, СтруктураВход.ВидСобытияОповещения, СтруктураВход.ТипОбъектаОповещения, СтруктураВход.ВидОбъектаОповещения, ЗаполнитьТекстПоУмолчаниюВход);
	Возврат РезультатФункции;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ В ТАБЛИЧНЫХ ШАБЛОНАХ

// Выполнить подготовку перед заполнением табличного шаблона
//
Функция ПодготовитьсяКЗаполнениюТабличногоШаблона(МетаданныеОбъекта, Шаблон, ОбязательныеПоляДляВычисления = Неопределено) Экспорт

	НастройкиФормирования = Новый Структура;
	
	// Получим макет СКД
	СхемаСКД = ПолучитьСхемуСКДДляПодстановкиВШаблоне(МетаданныеОбъекта);
	
	// Получим макет табличного документа
	МакетТабДокумента = Шаблон.Шаблон.Получить();
	
	// Получим список полей которые нужно будет вычислить
	табВычПолей = ПолучитьВычисляемыеПоляИзТаблицы(МакетТабДокумента);
	
	// Добавим обязательные для вычисления поля
	Если ОбязательныеПоляДляВычисления <> Неопределено Тогда
		Для Каждого Поле Из ОбязательныеПоляДляВычисления Цикл
			ДобавитьПолеВТаблицуВычисляемыхПолей(табВычПолей, Поле, Истина);
		КонецЦикла;
	КонецЕсли;
	
	// Подготовим компоновщик
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаСКД));
	
	// Каждое поле, которое нужно вычислить через СКД, добавим в список выбранных полей
	Для Каждого Стр Из табВычПолей Цикл
		Если Стр.НужноВычислять Тогда
			ПолеСКД = НайтиПолеСКДПоПолномуИмени(Компоновщик.Настройки.Выбор.ДоступныеПоляВыбора.Элементы, Стр.Поле);
			Если ПолеСКД = Неопределено Тогда
				
				СтрокаШаблона = Нстр("ru = 'Не найдено поле %1'");
				
				ТекстИсключения = Стр.Поле;
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					ТекстИсключения = СтрШаблон(СтрокаШаблона, Стр.Поле);
				КонецЕсли;
				
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
			ВыбранноеПоле = Компоновщик.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ВыбранноеПоле.Поле = ПолеСКД.Поле;
			Стр.НомерПоля = Компоновщик.Настройки.Выбор.Элементы.Количество();
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьАвтоГруппировкуВНастройкиСКД(Компоновщик.Настройки);

	НастройкиФормирования.Вставить("СхемаСКД",    СхемаСКД);
	НастройкиФормирования.Вставить("табВычПолей", табВычПолей);
	НастройкиФормирования.Вставить("Компоновщик", Компоновщик);
	НастройкиФормирования.Вставить("МакетТабДокумента", МакетТабДокумента);
	
	Возврат НастройкиФормирования;

КонецФункции // ПодготовитьсяКЗаполнениюТабличногоШаблона()

// Подготовить процессор компоновки данных
//
Процедура ПодготовитьПроцессорКомпоновкиДанных(НастройкиФормирования) Экспорт

	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(НастройкиФормирования.СхемаСКД, НастройкиФормирования.Компоновщик.Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	НастройкиФормирования.Вставить("ПроцессорКомпоновкиДанных", ПроцессорКомпоновкиДанных);

КонецПроцедуры

// Из процессора компоновки получить значения вычисляемых полей
//
Функция ИзПроцессораКомпоновкиПолучитьВычисляемыеПоля(НастройкиФормирования) Экспорт

	ПроцессорКомпоновкиДанных = НастройкиФормирования.ПроцессорКомпоновкиДанных;
	
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Значения = ЭлементРезультатаКомпоновкиДанных.ЗначенияПараметров;
		Если Значения.Количество() > 0 Тогда
			
			НомерПоля = 0;
			Для Каждого Значение Из Значения Цикл
				НомерПоля = НомерПоля + 1;
				Стр = НастройкиФормирования.табВычПолей.Найти(НомерПоля, "НомерПоля");
				Если Стр <> Неопределено Тогда
					Стр.Значение = Значение.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;

КонецФункции // ИзПроцессораКомпоновкиПолучитьВычисляемыеПоля()

// Добавить отбор в СКД по полному имени поля
//
Функция ДобавитьОтборВСКДПоПолномуИмениПоля(НастройкиФормирования, ИмяПоля, ВидСравнения, ЗначениеОтбора) Экспорт

	ПолеСсылка = НайтиПолеСКДПоПолномуИмени(НастройкиФормирования.Компоновщик.Настройки.ДоступныеПоляОтбора.Элементы, ИмяПоля);
	Возврат ДобавитьОтборВНастройкиСКД(НастройкиФормирования.Компоновщик.Настройки, ПолеСсылка.Поле, ЗначениеОтбора, ВидСравнения);

КонецФункции

// Получить и заполнить вычисленными значениями область для вывода табличного шаблона
//
Функция ПолучитьОбластьДляВыводаТабличногоШаблона(НастройкиФормирования) Экспорт

	ИмяОбласти = НастройкиФормирования.МакетТабДокумента.ОбластьПечати.Имя;
	Область = НастройкиФормирования.МакетТабДокумента.ПолучитьОбласть(ИмяОбласти);
	
	Для СчК = 1 По Область.ШиринаТаблицы Цикл
		Для СчС = 1 По Область.ВысотаТаблицы Цикл
			Ячейка = Область.Область(СчС, СчК);
			
			// Сделаем замены в тексте
			ВыполнитьЗаменыВТекстеПоВычисляемымПолям(НастройкиФормирования.табВычПолей, Ячейка.Текст)
		КонецЦикла;
	КонецЦикла;
	
	Возврат Область;

КонецФункции // ПолучитьОбластьДляВыводаТабличногоШаблона()

// Получить вычисленное поле шаблона по имени
//
Функция ПолучитьВычисленноеПолеШаблонаПоИмени(НастройкиФормирования, ИмяПоля) Экспорт

	Стр = НастройкиФормирования.табВычПолей.Найти(ИмяПоля, "Поле");
	Возврат ?(Стр = Неопределено, Неопределено, Стр.Значение);

КонецФункции // ПолучитьВычисленноеПолеШаблонаПоИмени()



