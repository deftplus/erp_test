
&НаКлиенте
Функция ПолучитьНаименованиеСсылочногоТипа(Тип)
	
	Если СтрНайти(Тип,"Справочник")>0 Тогда
		Возврат "Справочник";
	ИначеЕсли СтрНайти(Тип,"Перечисление")>0 Тогда
		Возврат "Перечисление";
	ИначеЕсли СтрНайти(Тип,"Документ")>0 Тогда
		Возврат "Документ";
	ИначеЕсли СтрНайти(Тип,"ПланСчетов")>0 Тогда
		Возврат "ПланСчетов";
	ИначеЕсли СтрНайти(Тип,"ПланВидовХарактеристик")>0 Тогда
		Возврат "ПланВидовХарактеристик";
	Иначе
		Возврат "НеПоддерживается";
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПримитивныйТип(Тип)
	
	Возврат (Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") ИЛИ Тип = Тип("Число"));	
	
КонецФункции

// Выполняет обработку выбора параметра из строки СтрокаПараметр объекта ДанныеОбъекта, 
// когда способ вычисления задан списком, и используются внешние данные. Параметр 
// СтандартнаяОбработка управляет отменой выбора.
&НаКлиенте
Процедура ОбработатьВыборСписочногоПараметраВнешнихДанных(СтрокаПараметр, ДанныеОбъекта, ФормаОбъекта, Элемент, СтандартнаяОбработка)
	ТекСпособВычисления	= СтрокаПараметр.СпособВычисленияПараметра;
	ТекЗначениеПоля		= СтрокаПараметр.УточнениеСпособаОпределения;	

	СписокТиповПараметра = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтрокаПараметр, "ТипЗначения", Новый СписокЗначений);
	// Определим тип для выбора в случае составного.
	ЭтоСоставнойТип = СписокТиповПараметра.Количество() > 1;
	Если (НЕ ДанныеОбъекта.Использование77) И (ЭтоСоставнойТип) Тогда
		
		// Получим список доступных типов для выбора.
		СписокТипов=Новый СписокЗначений;
		Для Каждого СтрТип ИЗ СписокТиповПараметра Цикл
			ТекущийТип = СтрТип.Значение;
			ТекТипМетаданных = ПолучитьНаименованиеСсылочногоТипа(ТекущийТип);
			СписокТипов.Добавить(ТекТипМетаданных, СтрЗаменить(ТекущийТип, ТекТипМетаданных + ".", ""));
		КонецЦикла;
		
		Если СписокТипов.Количество()>0 Тогда
			
			ТекущийТип = ФормаОбъекта.ВыбратьИзСписка(СписокТипов,Элемент);
			
			Если Не ТекущийТип=Неопределено Тогда
				
				СтрокаПараметр.ТипМетаДанных=ТекущийТип.Значение;
				СтрокаПараметр.СправочникБД=ТекущийТип.Представление;
				
				Если НЕ СтрокаПараметр.ТипМетаДанных="Простой" Тогда // Убираем неоднозначность типизации
					
					СписокТиповПараметра.Очистить();
					СписокТиповПараметра.Добавить(СтрокаПараметр.ТипМетаДанных+"."+СтрокаПараметр.СправочникБД);
					СтрокаПараметр.ТипДанныхПоля=РаботаСПолямиАналитикиУХ.ПолучитьСписокНастроекСоответствийИсточник(ДанныеОбъекта.ТипБД,СтрокаПараметр.ТипМетаДанных,СтрокаПараметр.СправочникБД);
					
				КонецЕсли;
				
			Иначе
				
				СтрокаПараметр.ТипМетаДанных=Неопределено;
				СписокТиповПараметра.Очистить();
				СтрокаПараметр.ТипДанныхПоля.Очистить();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	// Обработаем список примитивных типов.
	Если СписокТиповПараметра.Количество() > 0 Тогда
		Если ПримитивныйТип(СписокТиповПараметра[0].Значение) Тогда
			
			Массив = Новый Массив;
			Массив.Добавить(СписокТиповПараметра[0].Значение);
			ОписаниеТипов = Новый ОписаниеТипов(Массив);
			
			Если ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
				ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
				
				Значение  = ТекЗначениеПоля;
				СтрокаПараметр.УточнениеСпособаОпределения = ОписаниеТипов.ПривестиЗначение(Значение);
				
			Иначе
				
				ОписаниеТипов                       = Новый ОписаниеТипов("СписокЗначений");
				СтрокаПараметр.УточнениеСпособаОпределения = ОписаниеТипов.ПривестиЗначение(ТекЗначениеПоля);
				
			КонецЕсли;
			
			СтандартнаяОбработка = Истина;
			
			Возврат;
			
		КонецЕсли;
	Иначе
		// Передан пустой список.
	КонецЕсли;
	
	ТекЭлементВИБ = СтрокаПараметр.СправочникБД;
	НастройкаСоответствия = Неопределено;
	
	// Поиск аналитики консолидации, соответствующей аналитике внешней ИБ. Первоначальный поиск осущетсвляется
	// по Таблице соответствия, и, если поиск не дал результатов, в справочнике Синхронизации с Внешними ИБ.
	
	ИспользоватьВнутреннююСинхронизацию = Истина;
	
	Если СтрокаПараметр.ТипДанныхПоля.Количество()>0 Тогда
		
		Если СтрокаПараметр.ТипДанныхПоля.Количество() > 1 Тогда
			
			СтрокаВыбора = СтрокаПараметр.ТипДанныхПоля.ВыбратьЭлемент(НСтр("ru = 'Выберите настройку синхронизации'"));
			
			Если НЕ СтрокаВыбора = Неопределено Тогда
				НастройкаСоответствия =  СтрокаВыбора.Значение;
			КонецЕсли;
			
		ИначеЕсли СтрокаПараметр.ТипДанныхПоля.Количество() = 1 Тогда
			
			НастройкаСоответствия = СтрокаПараметр.ТипДанныхПоля[0].Значение;
			
		КонецЕсли;
		
		СтрАналитикаКонсолидации=Неопределено;
		
	Иначе	
		
		ИспользоватьВнутреннююСинхронизацию=Ложь;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПараметр.СпособВыбора) Тогда
		
		СпособВыбора = ОпределитьСпособВыбора(НастройкаСоответствия, ФормаОбъекта, Элемент,ТекЗначениеПоля);
		СтрокаПараметр.СпособВыбора=СпособВыбора;
		
	Иначе
		
		СпособВыбора=СтрокаПараметр.СпособВыбора;
		
	КонецЕсли;
	
	Если СпособВыбора = "АналитикаКонсолидации" Тогда 
		
		ОткрытьФорму_АналитикаКонсолидации(					
		НастройкаСоответствия,					
		СтрокаПараметр, 
		ТекЗначениеПоля, 
		ТекСпособВычисления, 
		Элемент,
		СтандартнаяОбработка);
		
	Иначе	
		
		СтрокаПараметр.НастройкаСоответствия="";
		
		Если НЕ (СтрокаПараметр.ТипМетаДанных = "Справочник" 
			ИЛИ СтрокаПараметр.ТипМетаДанных = "Документ"
			ИЛИ СтрокаПараметр.ТипМетаДанных = "Перечисление"
			ИЛИ СтрокаПараметр.ТипМетаДанных = "ПланВидовХарактеристик"
			ИЛИ СтрокаПараметр.ТипМетаДанных = "ТаблицаADO"
			ИЛИ СтрокаПараметр.ТипМетаДанных = "ПланСчетов") Тогда
			
			Сообщить(Нстр("ru = 'Тип метаданных не поддерживается. Возможен выбор только из справочника и перечислений.'"));
			Возврат;
			
		КонецЕсли;
		
		ОткрытьФорму_Прочие(ДанныеОбъекта, Массив, ОписаниеТипов, СтрокаПараметр, ТекЗначениеПоля, ТекСпособВычисления);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывает открытие форм выбора для параметров источников данных
&НаКлиенте
Процедура ОбработатьВыборЗначенияПараметра(СтрокаПараметр, ФормаОбъекта, ДанныеОбъекта, Элемент, СтандартнаяОбработка) Экспорт
	
	ТекИмяПараметра		= СтрокаПараметр.ПолеБД;
	ТекСпособВычисления	= СтрокаПараметр.СпособВычисленияПараметра;
	ТекЗначениеПоля		= СтрокаПараметр.УточнениеСпособаОпределения;
	ВнешнееСоединение	= Не ДанныеОбъекта.ВнутренниеДанные;
	СтандартнаяОбработка = СтандартнаяОбработка;
	
	Элемент.ВыбиратьТип = Ложь;
	
	Если Элемент.РежимВыбораИзСписка Тогда
		
		Элемент.СписокВыбора.Очистить();
		Элемент.РежимВыбораИзСписка=Ложь;
		
	КонецЕсли;
	
	Если ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ТипЗначения") Тогда
		
		Элемент.РежимВыбораИзСписка=Истина;
		
		Для Каждого СтрТип ИЗ СтрокаПараметр.ТипЗначения Цикл
			
			Элемент.СписокВыбора.Добавить(СтрТип.Значение);
			
		КонецЦикла;
		
		СтандартнаяОбработка=Истина;	
		
	ИначеЕсли ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокТиповЗначений") Тогда

		ОткрытьФорму_РедактированиеСпискаТипов(СтрокаПараметр, Элемент, СтандартнаяОбработка)
	
	ИначеЕсли ДанныеОбъекта.ВнутренниеДанные 
		И (Элемент.ОграничениеТипа.Типы().Количество() > 0) 
		И (Элемент.ОграничениеТипа.Типы()[0] = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) Тогда
		
		ОткрытьФорму_ВыборПроизвольногоКлассификатора(ДанныеОбъекта, ТекЗначениеПоля, ТекИмяПараметра, Элемент, СтандартнаяОбработка);
		
	ИначеЕсли ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение")
		ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений")Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму_РедактированиеПроцедур(СтрокаПараметр, ФормаОбъекта, СтандартнаяОбработка);

	ИначеЕсли ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ИнтервалПериодов") Тогда
		
		СтандартнаяОбработка = Ложь;		
		ОткрытьФорму_ВыборИнтервалаПериодов(СтрокаПараметр, ФормаОбъекта);

	ИначеЕсли ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ПериметрОтчета")
		ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеПериметрОтчета") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму_НастройкаОтбораПоПериметру(СтрокаПараметр);
				
	ИначеЕсли ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета")
		ИЛИ ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрБухгалтерии") 
		ИЛИ ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрНакопления")
		ИЛИ ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеРегистрСведений")
		ИЛИ ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеСправочники")
		ИЛИ ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеДокументы")
		ИЛИ ДанныеОбъекта.СпособПолучения = ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнутренниеДанныеГруппаРаскрытия")  Тогда
				
		ОткрытьВнутренниеДанныеРегистрНакопленияИлиПоказательОтчета(
							СтрокаПараметр, 
							ТекЗначениеПоля, 
							ТекСпособВычисления, 
							ФормаОбъекта, 
							Элемент,
							СтандартнаяОбработка);

	ИначеЕсли НЕ ВнешнееСоединение
		И ТипЗнч(ТекЗначениеПоля)=Тип("СписокЗначений") Тогда
				
		ОткрытьСписокЗначений(ДанныеОбъекта, СтрокаПараметр, ТекЗначениеПоля, ТекИмяПараметра, Элемент,СтандартнаяОбработка);

	ИначеЕсли (НЕ ДанныеОбъекта.ВнутренниеДанные) 
		И (ТекСпособВычисления= ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
		ИЛИ ТекСпособВычисления= ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений")
		ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению")
		ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений")
		ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокПоИерархии")
		ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии")) Тогда
		
		СтандартнаяОбработка = Ложь;

		ОбработатьВыборСписочногоПараметраВнешнихДанных(СтрокаПараметр, ДанныеОбъекта, ФормаОбъекта, Элемент, СтандартнаяОбработка);					

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСпособВыбораПоТекущимЗначениям(ТекЗначениеПоля)
	
	Если НЕ ЗначениеЗаполнено(ТекЗначениеПоля) Тогда
		
		Возврат Неопределено;
		
	ИначеЕсли ТипЗнч(ТекЗначениеПоля)=Тип("СписокЗначений") Тогда
		
		Если ТекЗначениеПоля.Количество()>0 Тогда
			
			Возврат ?(ТипЗнч(ТекЗначениеПоля[0].Значение)=Тип("Строка"),"ПолеБД","АналитикаКонсолидации");
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ?(ТипЗнч(ТекЗначениеПоля)=Тип("Строка"),"ПолеБД","АналитикаКонсолидации");
		
	КонецЕсли;
		
	
КонецФункции // ПолучитьСпособВыбораПоТекущимЗначениям(ТекЗначениеПоля) 

&НаКлиенте
Функция ОпределитьСпособВыбора(НастройкаСоответствия, ФормаОбъекта, Элемент,ТекЗначениеПоля)
	
	СпособВыбора=ПолучитьСпособВыбораПоТекущимЗначениям(ТекЗначениеПоля);
	
	Если НЕ СпособВыбора=Неопределено Тогда
		
		Возврат СпособВыбора;
		
	КонецЕсли;
	
    СпособВыбора = "ПолеБД";
	
	Если ЗначениеЗаполнено(НастройкаСоответствия) Тогда
		
		// Соответствие найдено.
		
		СписокЗначений = Новый СписокЗначений;
		СписокЗначений.Добавить("АналитикаКонсолидации",	Нстр("ru = 'Справочник текущей ИБ'"));
		СписокЗначений.Добавить("ПолеБД",					Нстр("ru = 'Справочник внешней ИБ'"));
		
		ВыбранноеЗначение = ФормаОбъекта.ВыбратьИзСписка(СписокЗначений, Элемент);
		Если ВыбранноеЗначение <> Неопределено Тогда
			СпособВыбора = ВыбранноеЗначение.Значение;
		Иначе
			СпособВыбора = "ПолеБД";	
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СпособВыбора;

КонецФункции

#Область ОткрытиеФормВыбораЗначений

&НаКлиенте
Процедура ОткрытьФорму_Прочие(Знач ДанныеОбъекта, Массив, ОписаниеТипов, Знач СтрокаПараметр, Знач ТекЗначениеПоля, Знач ТекСпособВычисления)
    
    Значение = ТекЗначениеПоля;
    Массив   = Новый Массив;
    Массив.Добавить(Тип("СписокЗначений"));
    ОписаниеТипов = Новый ОписаниеТипов(Массив);
    СтрокаПараметр.УточнениеСпособаОпределения = ОписаниеТипов.ПривестиЗначение(Значение);
    
    СтруктураДанных = Новый Структура;
    СтруктураДанных.Вставить("Использование77",	ДанныеОбъекта.Использование77);
    СтруктураДанных.Вставить("СправочникБД",	СтрокаПараметр.СправочникБД);
    СтруктураДанных.Вставить("ТипМетаДанных",	СтрокаПараметр.ТипМетаДанных);
    СтруктураДанных.Вставить("ТипБД",			ДанныеОбъекта.ТипБД);
    
    Если ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
        ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
        
        ОткрытьФорму_ФиксированноеЗначение(ДанныеОбъекта, СтрокаПараметр, СтруктураДанных, ТекЗначениеПоля);
        
    Иначе
        
        Если ДанныеОбъекта.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеADO") Тогда
            
            СтруктураПараметров = Новый Структура;
            СтруктураПараметров.Вставить("ТипБД",				ДанныеОбъекта.ТипБД);
            СтруктураПараметров.Вставить("СвязаннаяТаблица",	УправлениеОтчетамиКлиентУХ.ПолучитьИмяСвязаннойТаблицы(СтрокаПараметр.СправочникБД));
            СтруктураПараметров.Вставить("СписокСтрок",			СтрокаПараметр.УточнениеСпособаОпределения);
            
            ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаСпискаЗаписейADO", 
							СтруктураПараметров,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            
        Иначе
            
            СтруктураДанных.Вставить("ТекСписокЗначений", ТекЗначениеПоля);
			
			ДопПараметры = Новый Структура("СтрокаПараметр", СтрокаПараметр);
			Оповещение = Новый ОписаниеОповещения("Подключаемый_ФормаВыбораСпискаЗначенийВИБ", ЭтотОбъект, ДопПараметры);
			
			ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаВыбораСпискаЗначенийВИБ",
							СтруктураДанных,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_АналитикаКонсолидации(НастройкаСоответствия, СтрокаПараметр, ТекЗначениеПоля, ТекСпособВычисления, Элемент, СтандартнаяОбработка)
    
    Массив = Новый Массив;
    СсылкаНаВидСубконто = Ложь;
    
    ДанныеСоответствия=РаботаСПолямиАналитикиУХ.ПолучитьДанныеДляВыбора(НастройкаСоответствия);
    
    ИмяОбъектаМетаданных=ДанныеСоответствия.ИмяОбъектаМетаданных;
    СтрокаПараметр.НастройкаСоответствия = НастройкаСоответствия;
    
    Если ДанныеСоответствия.ТипОбъектаКонсолидации = "ВидСубконто" Тогда
        
        ОписаниеТипов=ДанныеСоответствия.ТипЗначения;
        СсылкаНаВидСубконто = Истина;
        
    Иначе
        
        ТипПриведения = Тип(ДанныеСоответствия.ТипОбъектаКонсолидации+"Ссылка."+ДанныеСоответствия.ИмяОбъектаМетаданных);
        Массив.Добавить(ТипПриведения);
        ОписаниеТипов = Новый ОписаниеТипов(Массив);
        
    КонецЕсли;
    
    // В качестве значения параметра выступает одиночное значение или же список.
    Если ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
        ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
        Значение  = ТекЗначениеПоля;
        Если СсылкаНаВидСубконто Тогда
            СтрокаПараметр.УточнениеСпособаОпределения = ДанныеСоответствия.ТипЗначения.ПривестиЗначение(Значение);
        Иначе
            СтрокаПараметр.УточнениеСпособаОпределения = ОписаниеТипов.ПривестиЗначение(Значение);
        КонецЕсли;
        
    Иначе
        
        Массив                              = Новый Массив;
        Массив.Добавить(Тип("СписокЗначений"));
        ОписаниеТиповСписокЗначений         = Новый ОписаниеТипов(Массив);
        Значение                            = ТекЗначениеПоля;
        ТекЗначениеПоля                     = ОписаниеТиповСписокЗначений.ПривестиЗначение(Значение);
        ТекЗначениеПоля.ТипЗначения			= ОписаниеТипов;
        
    КонецЕсли;   
    
    Если СсылкаНаВидСубконто Тогда
        
        Если ТекСпособВычисления= ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
            ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
            
            Если ДанныеСоответствия.Тип=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
                
                СтруктураПараметров = Новый Структура;
                СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", ИмяОбъектаМетаданных));
                
                Если ЗначениеЗаполнено(ТекЗначениеПоля) Тогда
                    СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
                КонецЕсли;
                
                ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", СтруктураПараметров, Элемент);
                
            Иначе
                
                СтруктураПараметров = Новый Структура;
                Если ЗначениеЗаполнено(ТекЗначениеПоля) Тогда
                    СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
                КонецЕсли;
                
                ОткрытьФорму(ДанныеСоответствия.ТаблицаАналитики + ".ФормаВыбора",СтруктураПараметров, Элемент);
                
            КонецЕсли;	
            
        Иначе
            
            Если СтрНайти(ДанныеСоответствия.ТаблицаАналитики,"Перечисление.")=0 Тогда
                
                СтандартнаяОбработка = Ложь;
				
				ПараметрыФормы = Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", 
													ДанныеСоответствия.ТаблицаАналитики, ИмяОбъектаМетаданных, ТекЗначениеПоля);
													
                ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", ПараметрыФормы, Элемент);
                
            Иначе
                
                СтандартнаяОбработка = Истина;
                
            КонецЕсли;
            
        КонецЕсли
        
    Иначе
        
        Если ТекСпособВычисления= ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
            ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
            
            СтандартнаяОбработка = Истина;
            
        Иначе
            
            СтандартнаяОбработка = Ложь;
			ПараметрыФормы = Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", 
												ДанныеСоответствия.ТипОбъектаКонсолидации+"."+ДанныеСоответствия.ИмяОбъектаМетаданных, , ТекЗначениеПоля); 
            ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", ПараметрыФормы, Элемент);
            
        КонецЕсли;
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_ФиксированноеЗначение(ДанныеОбъекта, СтрокаПараметр, СтруктураДанных, ТекЗначениеПоля)
    
    Если ДанныеОбъекта.СпособПолучения=ПредопределенноеЗначение("Перечисление.СпособыПолученияОперандов.ВнешниеДанныеADO") Тогда
        
        СтруктураПараметров=Новый Структура;
        СтруктураПараметров.Вставить("ТипБД",ДанныеОбъекта.ТипБД);
        СтруктураПараметров.Вставить("СвязаннаяТаблица",УправлениеОтчетамиКлиентУХ.ПолучитьИмяСвязаннойТаблицы(СтрокаПараметр.СправочникБД));
        СтруктураПараметров.Вставить("СписокСтрок",СтрокаПараметр.УточнениеСпособаОпределения);
        СтруктураПараметров.Вставить("МножественныйВыбор",Ложь);
        СтруктураПараметров.Вставить("РежимВыбора",Истина);
        
        ОткрытьФорму("ОбщаяФорма.ФормаПросмотраТаблицыADO",
						СтруктураПараметров,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        
    Иначе
        
        Если ТипЗнч(ТекЗначениеПоля) = Тип("СписокЗначений") И ТекЗначениеПоля.Количество() > 0 Тогда
            
            СтруктураДанных.Вставить("Код",ТекЗначениеПоля[0].Значение);
            СтруктураДанных.Вставить("Наименование",ТекЗначениеПоля[0].Представление);
            
        КонецЕсли;
        
        ДанныеОбъектаВИБ = Неопределено;       
		
		ДопПараметры = Новый Структура("СтрокаПараметр", СтрокаПараметр);
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ФормаВыбораСпискаЗначенийВИБ", ЭтотОбъект, ДопПараметры);
		
        ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаВыбораЗначенийВИБ", 
						СтруктураДанных,,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        
    КонецЕсли;
    
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_ВыборИнтервалаПериодов(Знач СтрокаПараметр, Знач ФормаОбъекта)
    
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("ГраницыИнтервала", СтрокаПараметр.УточнениеСпособаОпределения);
    
    ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаВыбораИнтервалаПериодов", СтруктураПараметров, ФормаОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_РедактированиеПроцедур(СтрокаПараметр, ФормаОбъекта, СтандартнаяОбработка)
    
    СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("ТекстПроцедуры",СтрокаПараметр.ТекстМодуля);
    СтруктураПараметров.Вставить("ВычисляемыйПоказатель",Истина);
    СтруктураПараметров.Вставить("ИмяПроцедуры","РасчетЗначенияПараметра");
	
	Если ЗначениеЗаполнено(ФормаОбъекта.ВидОтчета) Тогда
		
		СтруктураПараметров.Вставить("ВидОтчета",ФормаОбъекта.ВидОтчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФормаОбъекта.Объект.СпособПолучения) Тогда
		
		СтруктураПараметров.Вставить("СпособПолучения",ФормаОбъекта.Объект.СпособПолучения);
		
	КонецЕсли;
    
    ОткрытьФорму("ОбщаяФорма.ФормаРедактированияПроцедур", СтруктураПараметров, ФормаОбъекта);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокЗначений(ДанныеОбъекта, СтрокаПараметр, ТекЗначениеПоля, ТекИмяПараметра, Элемент, СтандартнаяОбработка)
    
    Если НЕ СтрокаПараметр.ТипДанныхПоля.Количество()=0 Тогда
        
        ТипСписка=СтрокаПараметр.ТипДанныхПоля[0];
        Массив = Новый Массив;
        Массив.Добавить(ТипСписка);	
        
        ТекЗначениеПоля.ТипЗначения=Новый ОписаниеТипов(Массив);
        
        СтандартнаяОбработка = Ложь;
        
        ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", СтрокаПараметр.ТипМетаДанных+"."+СтрокаПараметр.СправочникБД, СтрокаПараметр.ВидАналитики, ТекЗначениеПоля), Элемент);
        
    Иначе
        
        СтрокаЗначения=РаботаСПолямиАналитикиУХ.НайтиСтрокуТаблицыОбъекта(ДанныеОбъекта.РабочийОбъектАдрес,"мСоответствиеИзмеренийСпособовИТипов","ИмяИзмерения",ТекИмяПараметра);
        
        ТипСписка=СтрокаЗначения.ТипДанных;
        
        Массив = Новый Массив;
        Массив.Добавить(ТипСписка);	
        
        ТекЗначениеПоля.ТипЗначения=Новый ОписаниеТипов(Массив);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_РедактированиеСпискаТипов(СтрокаПараметр, Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СтруктураПараметров = Новый Структура;
    СтруктураПараметров.Вставить("РедактируемыйСписок",СтрокаПараметр.ТипЗначения);
	СтруктураПараметров.Вставить("ТекущийСписок",СтрокаПараметр.УточнениеСпособаОпределения);
	СтруктураПараметров.Вставить("ПолеБД",СтрокаПараметр.ПолеБД);
   	    
    ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.УстановкаОтметокСпискаЗначений", СтруктураПараметров,Элемент);
		
КонецПроцедуры // ОткрытьФорму_РедактированиеСпискаТипов() 

&НаКлиенте
Процедура ОткрытьВнутренниеДанныеРегистрНакопленияИлиПоказательОтчета(СтрокаПараметр, ТекЗначениеПоля, ТекСпособВычисления, 
																	ФормаОбъекта, Элемент, СтандартнаяОбработка)
    
    Если СтрокаПараметр.ТипДанныхПоля.Количество()<2 Тогда
        
        СтандартнаяОбработка = Истина;
        
    ИначеЕсли ЗначениеЗаполнено(СтрокаПараметр.ВидАналитики) Тогда
        
        ДанныеДляВыбора=РаботаСПолямиАналитикиУХ.ПолучитьДанныеВидаСубконто(СтрокаПараметр.ВидАналитики);
        
        Если ДанныеДляВыбора.Тип=Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") Тогда
            
            Если ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
                ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
                
                СтандартнаяОбработка = Ложь;
                
                СтруктураПараметров = Новый Структура;
                СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", СтрокаПараметр.ВидАналитики));
                
                Если ЗначениеЗаполнено(ТекЗначениеПоля) Тогда
                    СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
                КонецЕсли;
                
                ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", СтруктураПараметров, Элемент);
                
            ИначеЕсли ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений")
                ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений") Тогда
				
				ПараметрыФормы = Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", 
													"Справочник.ПроизвольныйКлассификаторУХ", СтрокаПараметр.ВидАналитики, ТекЗначениеПоля);
                ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", ПараметрыФормы, Элемент);
                
            КонецЕсли;
            
        Иначе
            
            ТаблицаАналитики=ДанныеДляВыбора.ТаблицаАналитики;
            
            Если ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
                ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
                
                СтруктураПараметров=Новый Структура;
                СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
                
                ОткрытьФорму(ТаблицаАналитики+".ФормаВыбора",СтруктураПараметров,Элемент);
                
            ИначеЕсли ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений")
                ИЛИ ТекСпособВычисления=ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений") Тогда
                
                ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", ТаблицаАналитики,, ТекЗначениеПоля), Элемент);
                
            КонецЕсли;
            
        КонецЕсли;
        
    ИначеЕсли СтрокаПараметр.ТипДанныхПоля.Количество()>1 Тогда
		
		СтандартнаяОбработка = Ложь;		
        СписокЗначений = Новый СписокЗначений;
        
		Для Каждого Тип ИЗ СтрокаПараметр.ТипДанныхПоля Цикл            
			Если Тип.Значение <> Неопределено Тогда
				СписокЗначений.Добавить(Тип.Значение, СокрЛП(Тип.Значение));
			КонецЕсли;            
        КонецЦикла;
        
        ДопПараметры = Новый Структура("ТекЗначениеПоля, ТекСпособВычисления, Элемент", 
										ТекЗначениеПоля, ТекСпособВычисления, Элемент);
										
		Оповещение = Новый ОписаниеОповещения("Подключаемый_ОткрытьФормуПоВыбранномуТипу", ЭтотОбъект, ДопПараметры);
		
		Элемент.ВыбиратьТип = Истина;
        ФормаОбъекта.ПоказатьВыборИзСписка(Оповещение, СписокЗначений, Элемент);
		        
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОткрытьФормуПоВыбранномуТипу(Результат, ДополнительныеПараметры) Экспорт
	
	ТекЗначениеПоля		= ДополнительныеПараметры.ТекЗначениеПоля;
	ТекСпособВычисления	= ДополнительныеПараметры.ТекСпособВычисления;
	Элемент				= ДополнительныеПараметры.Элемент;	 
	ВыбранныйТип 		= Результат;
	
    Если ВыбранныйТип <> Неопределено Тогда
        
        ТаблицаАналитики = ОбщегоНазначенияУХ.ПолучитьПолноеИмяПоТипу(ВыбранныйТип.Значение);
		
        Если ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение")
            ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению") Тогда
            
            СтруктураПараметров = Новый Структура;
            СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
			
			МассивТипов=Новый Массив;
			МассивТипов.Добавить(ВыбранныйТип.Значение);
			Элемент.ОграничениеТипа=Новый ОписаниеТипов(МассивТипов);
            
            ОткрытьФорму(ТаблицаАналитики + ".ФормаВыбора", СтруктураПараметров, Элемент);
            
        ИначеЕсли ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений")
            ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений")
			ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.СписокПоИерархии")
			ИЛИ ТекСпособВычисления = ПредопределенноеЗначение("Перечисление.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии") Тогда
            
            ПараметрыФормы = Новый Структура("ИмяСправочника, Владелец, ТекСписокЗначений", ТаблицаАналитики, , ТекЗначениеПоля);
            ОткрытьФорму("ОбщаяФорма.ФормаРедактированияСпискаЗначений_Управляемая", ПараметрыФормы, Элемент);
            
        КонецЕсли;				
        
    КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_НастройкаОтбораПоПериметру(СтрокаПараметр)
    
    Если НЕ ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения) = Тип("СписокЗначений") Тогда
		
		СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Периметр", СтрокаПараметр.УточнениеСпособаОпределения);
		
    Иначе
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Периметр",			СтрокаПараметр.УточнениеСпособаОпределения[0].Значение);
        СтруктураПараметров.Вставить("МетодКонсолидации",	СтрокаПараметр.УточнениеСпособаОпределения[1].Значение);
    КонецЕсли;
    
    ОткрытьФорму("Справочник.ИсточникиДанныхДляРасчетов.Форма.ФормаНастройкиОтбораПоПериметру", СтруктураПараметров);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФорму_ВыборПроизвольногоКлассификатора(ДанныеОбъекта, ТекЗначениеПоля, ТекИмяПараметра, Элемент, СтандартнаяОбработка)
    
    ТекПоле = РаботаСПолямиАналитикиУХ.НайтиСтрокуТаблицыОбъекта(ДанныеОбъекта.РабочийОбъектАдрес, "мТаблицаВозможныхПолейОтбор", "Поле", ТекИмяПараметра);
    
    Если Не ТекПоле = Неопределено Тогда
        
        СтандартнаяОбработка = Ложь;
        
        СтруктураПараметров = Новый Структура;
        СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", ТекПоле.ВидАналитики));
        
        Если ЗначениеЗаполнено(ТекЗначениеПоля) Тогда
            СтруктураПараметров.Вставить("НачальноеЗначениеВыбора", ТекЗначениеПоля);
        КонецЕсли;
        
        ОткрытьФорму("Справочник.ПроизвольныйКлассификаторУХ.ФормаВыбора", СтруктураПараметров, Элемент);
        
    КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработатьВыборЗначения

&НаКлиенте
Процедура Подключаемый_ФормаВыбораСпискаЗначенийВИБ(Результат, ДополнительныеПараметры) Экспорт
    
    СтрокаПараметр = ДополнительныеПараметры.СтрокаПараметр;       
    ДанныеОбъектаВИБ = Результат;    
    Если ТипЗнч(ДанныеОбъектаВИБ) = Тип("СписокЗначений") Тогда        
        СтрокаПараметр.УточнениеСпособаОпределения = ДанныеОбъектаВИБ;        
    КонецЕсли;
    
КонецПроцедуры

#КонецОбласти

