#Область ПрограммныйИнтерфейс

Процедура УправлениеФормойВерсияСоглашения(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Логика, не зависящая от типа документа.
	ЭтоАктуальнаяВерсия = Форма.АктуальнаяВерсия.Пустая() ИЛИ Объект.Ссылка.Пустая() ИЛИ (Объект.Ссылка = Форма.АктуальнаяВерсия);
	Элементы.ГруппаТолькоПросмотр.Видимость = ЭтоАктуальнаяВерсия И Объект.Проведен И НЕ Форма.РежимРедактирования;
	Элементы.ГруппаНеактуальныеПараметры.Видимость = НЕ ЭтоАктуальнаяВерсия;
	Элементы.ПодменюРедактировать.Доступность = ЭтоАктуальнаяВерсия;
	
	// Режим редактирования
	Форма.ТолькоПросмотр = НЕ Форма.РежимРедактирования;
	Элементы.РедактироватьВерсию.Доступность = Не Форма.РежимРедактирования;
	// Сворачиваемые группы придется обойти еще раз...
	Для Каждого ТекСтраница из Элементы.Страницы.ПодчиненныеЭлементы Цикл
		
		Для Каждого ТекЭлементСтраницы из ТекСтраница.ПодчиненныеЭлементы Цикл
			
			Если ТипЗнч(ТекЭлементСтраницы) = Тип("ГруппаФормы") 
				И ТекЭлементСтраницы.Вид = ВидГруппыФормы.ОбычнаяГруппа
				И ТекЭлементСтраницы.Поведение = ПоведениеОбычнойГруппы.Свертываемая Тогда
				
				ТекЭлементСтраницы.ТолькоПросмотр = НЕ Форма.РежимРедактирования;
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	// Логика, специфическая для конкретного типа документа.
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	
	Если ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияКредит") Тогда
		УправлениеФормой_ВерсияСоглашенияКредит(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияДепозит") Тогда
		УправлениеФормой_ВерсияСоглашенияДепозит(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияБанковскаяГарантия") Тогда
		УправлениеФормой_ВерсияСоглашенияБанковскаяГарантия(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияАккредитив") Тогда
		УправлениеФормой_ВерсияСоглашенияАккредитив(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияВалютныйСвоп") Тогда
		УправлениеФормой_ВерсияСоглашенияВалютныйСвоп(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор") Тогда
		УправлениеФормой_ВерсияСоглашенияКоммерческийДоговор(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияВалютныйФорвард") Тогда
		УправлениеФормой_ВерсияСоглашенияВалютныйФорвард(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ВерсияСоглашенияВалютноПроцентныйСвоп") Тогда
		УправлениеФормой_ВерсияСоглашенияВалютноПроцентныйСвоп(Форма);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ГрафикРасчетовСПокупателемПоставщиком") Тогда
		УправлениеФормой_ГрафикРасчетовСПокупателемПоставщиком(Форма);
	КонецЕсли;
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
	  	ИмяВерсияСоглашенияЛизинг = "ДокументСсылка.ВерсияСоглашенияЛизинг";
		Если ТипОбъекта = Тип(ИмяВерсияСоглашенияЛизинг) Тогда
			УправлениеФормой_ВерсияСоглашенияЛизинг(Форма);		
	    КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСпособыВеденияРасчетов(Список, ВидДоговораУХ) Экспорт
	
	Список.Очистить();
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));
	
	Если РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПоставщиком(ВидДоговораУХ) Тогда
		Список.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоЗаказамНакладным"));
	КонецЕсли;
	
	Список.Добавить(ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоНакладным"));
	
КонецПроцедуры

Процедура УстановитьСпособыОсуществленияПлатежей(Список, ВидДоговораУХ) Экспорт
	
	Список.Очистить();
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыФормированияПлатежейПоДоговору.Вручную"), НСтр("ru = 'Вручную'"));
	
	Если Не (ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомиссионером") 
			ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомиссионеромНаЗакупку")
			ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомитентом")
			ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомитентомНаЗакупку")) Тогда
			
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей"), НСтр("ru = 'График'"));
			
	КонецЕсли;
	
	Список.Добавить(ПредопределенноеЗначение("Перечисление.СпособыФормированияПлатежейПоДоговору.ПоПроцессу"), НСтр("ru = 'Процесс'"));
	
КонецПроцедуры

Процедура ПересчитатьИтоговыеКурсыВалютногоКоридора(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Вывод полей Итоговый курс.
	ЗаполненКурсНеМенееДоговора = ЗначениеЗаполнено(Объект.КурсПлатежаНеМенее);
	ЗаполненКурсНеМенееОплаты = ЗначениеЗаполнено(Объект.КурсПлатежаНеМенееВВалютеОплаты);
	ЗаполненКурсНеБолееДоговора = ЗначениеЗаполнено(Объект.КурсПлатежаНеБолее);
	ЗаполненКурсНеБолееОплаты = ЗначениеЗаполнено(Объект.КурсПлатежаНеБолееВВалютеОплаты);
	Если ЗаполненКурсНеМенееДоговора И ЗаполненКурсНеМенееОплаты Тогда
		Форма.ИтоговыйКурсНеМенее = (Объект.КурсПлатежаНеМенее / Объект.КурсПлатежаНеМенееВВалютеОплаты);
	Иначе
		Форма.ИтоговыйКурсНеМенее = 0;
	КонецЕсли;
	Если ЗаполненКурсНеБолееДоговора И ЗаполненКурсНеБолееОплаты Тогда
		Форма.ИтоговыйКурсНеБолее = (Объект.КурсПлатежаНеБолее / Объект.КурсПлатежаНеБолееВВалютеОплаты);
	Иначе
		Форма.ИтоговыйКурсНеБолее = 0;
	КонецЕсли;
	// Раскраска полей Итоговый курс.
	Если ЗаполненКурсНеМенееДоговора И ЗаполненКурсНеМенееОплаты И ЗаполненКурсНеБолееДоговора И ЗаполненКурсНеБолееОплаты Тогда
		Если Форма.ИтоговыйКурсНеБолее < Форма.ИтоговыйКурсНеМенее Тогда
			Элементы.ИтоговыйКурсНеМенее.ЦветТекста = WebЦвета.Красный;
			Элементы.ИтоговыйКурсНеБолее.ЦветТекста = WebЦвета.Красный;
		Иначе
			Элементы.ИтоговыйКурсНеМенее.ЦветТекста = WebЦвета.Черный;
			Элементы.ИтоговыйКурсНеБолее.ЦветТекста = WebЦвета.Черный;
		КонецЕсли;
	Иначе
		Элементы.ИтоговыйКурсНеМенее.ЦветТекста = WebЦвета.Черный;
		Элементы.ИтоговыйКурсНеБолее.ЦветТекста = WebЦвета.Черный;
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстНадписиТолькоПросмотр() Экспорт
	Возврат НСтр("ru = 'Версия договора открыта только для чтения. Для перехода в режим редактирования следует использовать подменю ""Редактировать"".'");
КонецФункции

Функция ТекстНадписиНедействительнаяВерсия() Экспорт

	Возврат НСтр("ru = 'Открыта недействительная версия соглашения. Для открытия действующей версии следует использовать подменю ""Перейти""'");

КонецФункции // ТекстНадписиНедействительнаяВерсия()

Функция ТекстНадписиВерсияНеПроведена() Экспорт
	
	Возврат НСтр("ru = 'Версия соглашения не проведена. Для отражения ее параметров в системе используйте кнопку ""Провести"" или ""Провести и закрыть""'");
	
КонецФункции

Функция ПредставлениеВидаДоговора(ВидДоговора, ВидСоглашения) Экспорт
	
	Результат = "";
	
	Если ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация") Тогда
		
		Если ВидДоговора = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Кредит") Тогда
			Результат = НСтр("ru = 'Транш кредитной линии'");
		ИначеЕсли ВидДоговора = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Депозит") Тогда
			Результат = НСтр("ru = 'Депозитная сделка'");
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(Результат) Тогда
		
		Если ЗначениеЗаполнено(ВидДоговора) Тогда
			
			Результат = Строка(ВидДоговора);
			
		Иначе
			
			Результат = НСтр("ru = 'Договор с контрагентом'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстНадписиПроизводственныеКалендари(ПроизводственныеКалендари) Экспорт
	
	ТекстПустогоЗначения = НСтр("ru = '<Значение не заполнено>'");
	
	МассивСтрок = Новый Массив;
	Для Каждого ТекСтрока из ПроизводственныеКалендари Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПроизводственныйКалендарь) Тогда
			МассивСтрок.Добавить(ТекСтрока.ПроизводственныйКалендарь);
		КонецЕсли;
	КонецЦикла; 
	
	Если МассивСтрок.Количество() Тогда
		Возврат СтрСоединить(МассивСтрок, ", ");
	Иначе
		Возврат ТекстПустогоЗначения;
	КонецЕсли;
	
КонецФункции

Процедура УстановитьТекстНадписиПроизводственныеКалендари(Форма) Экспорт
	
	Объект = Форма.Объект;
	Форма.ТекстПроизводственныеКалендари = ТекстНадписиПроизводственныеКалендари(Объект.ПроизводственныеКалендари);
	
КонецПроцедуры 

Процедура ПриИзмененииПараметрыУчетаФИ(Форма, Элемент = Неопределено) Экспорт
	
	ЗаполнитьПредставлениеПараметровУчетаФИ(Форма);	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);	
	
КонецПроцедуры

Процедура ЗаполнитьПредставлениеПараметровУчетаФИ(Форма, Знач ФИ = Неопределено) Экспорт

	Элементы = Форма.Элементы;
	Если ФИ = Неопределено Тогда
		ФИ = Форма.ДоговорОбъект;
	КонецЕсли;
	
	Элементы.ДекорацияПараметрыУчетаФИ.Видимость = не Форма.Объект.ПараметрыУчетаФИ.Пустая();
	Если Не Элементы.ДекорацияПараметрыУчетаФИ.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Описание = МСФОВызовСервераУХ.ПолучитьОписаниеДекорацииПараметровФИ(ФИ, Форма.Объект.ПараметрыУчетаФИ, Форма.ВыборПараметровУчетаФИУХ);	
	ЗаполнитьЗначенияСвойств(Элементы.ДекорацияПараметрыУчетаФИ, Описание);
		
КонецПроцедуры

Процедура УстановитьСвязиПараметровВыбораБанковскихСчетов(Форма) Экспорт
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;

	// Счет организации
	СвязиПараметровВыбораОрганизация = Новый Массив;
	СвязиПараметровВыбораОрганизация.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств","Объект.ОсновнаяВалютаПлатежей"));
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "УполномоченныйБанк")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ТребуетсяПостановкаНаУчетВалютногоКонтроля") 
		И Объект.ТребуетсяПостановкаНаУчетВалютногоКонтроля Тогда
		СвязиПараметровВыбораОрганизация.Добавить(Новый СвязьПараметраВыбора("Отбор.Банк","Объект.УполномоченныйБанк"));
	КонецЕсли;
	СвязиПараметровВыбораОрганизация.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация"));
	Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбораОрганизация);

	// Счет контрагента
	СвязиПараметровВыбораКонтрагент = Новый Массив;
	СвязиПараметровВыбораКонтрагент.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаДенежныхСредств","Объект.ОсновнаяВалютаПлатежей"));
	СвязиПараметровВыбораКонтрагент.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент"));
	Элементы.БанковскийСчетКонтрагента.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметровВыбораКонтрагент);
	
КонецПроцедуры

Функция ИмяКолонкиГрафикаПоИмениЭлемента(ИмяЭлемента) Экспорт
	
	Возврат СтрЗаменить(ИмяЭлемента, "ГрафикРасчетов", "");
	
КонецФункции

Процедура УстановитьВидимостьКолонокФакта(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	
	ЭлементКнопка = Элементы.ГрафикРасчетовПоказатьФактВГрафике;
	ВидимостьКолонокФакт = Не ЭлементКнопка.Пометка;
	
	ЭлементКнопка.Пометка = ВидимостьКолонокФакт;
	
	Для Каждого КлючИЗначение Из ОписаниеГрафика Цикл
		
		Секция = КлючИЗначение.Значение;
		
		УправлениеВидимостьюКолонкиСекцииГрафика(Элементы, Секция.КолонкаПриход, ВидимостьКолонокФакт);
		УправлениеВидимостьюКолонкиСекцииГрафика(Элементы, Секция.КолонкаРасход, ВидимостьКолонокФакт);
		УправлениеВидимостьюКолонкиСекцииГрафика(Элементы, Секция.КолонкаОстаток, ВидимостьКолонокФакт);
		
	КонецЦикла
	
КонецПроцедуры

Процедура УстановитьВидимостьДетализации(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	
	ВидимостьДетализация = Не Элементы.ГрафикРасчетовПоказатьДетализацию.Пометка;
	Элементы.ГрафикРасчетовПоказатьДетализацию.Пометка = ВидимостьДетализация;
	Элементы.ГрафикРасчетовЛинейный.Видимость = ВидимостьДетализация;
	
КонецПроцедуры

#Область ОсновноеОбязательство
Функция ДоступноОсновноеОбязательство(ВидДоговораУХ) Экспорт
	 Возврат ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваВходящие") ИЛИ
	 	  ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваИсходящие")
КонецФункции
#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Общая логика для форм версий, связанных с договорами.
Процедура УправлениеФормой_ОбщееДляДоговоров(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Дата подписания
	Элементы.ДатаПодписания.ТолькоПросмотр = Не Объект.ДоговорПодписан;
	
	// Рамочные соглашения.
	ЭтоСпецификация = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация"));
	Элементы.БазовыйДоговор.Видимость = ЭтоСпецификация;
	Элементы.БазовыйДоговор.АвтоОтметкаНезаполненного = ЭтоСпецификация;
	
КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияКредит(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(Форма);
	
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьЗаголовкиГрафика(Форма, Объект.ВидДоговораУХ, Неопределено, "ГрафикРасчетов");
	
	УправлениеФормой_ФиксированныеСчета(Форма);
	УправлениеФормой_ВалютныйКонтроль(Форма);
	УправлениеФормой_Обеспечение(Форма);
	УправлениеФормой_ВнутригрупповыеДоговоры(Форма);
	УправлениеФормой_ПериодичностьНачисленияПроцентов(Форма);
	
	ЭтоОвердрафт = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Овердрафт"));
	ЭтоКредит = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Кредит"));
	
	ЭтоСпецификация = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация"));
	ЭтоРамочноеСоглашение = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.РамочныйДоговор"));
	
	Элементы.ГруппаСредстваПредоставляются.Видимость = Не ЭтоСпецификация И Не ЭтоОвердрафт;
	Элементы.ГруппаСредстваПредоставляются.ТолькоПросмотр = ЭтоРамочноеСоглашение;
	// Скорректируем текст в списке выбора.
	СписокВыбора = Элементы.ЭтоКредитнаяЛинияЧисло.СписокВыбора;
	Если ЭтоКредит Тогда
		СписокВыбора[0].Представление = НСтр("ru = 'единовременно (кредит)'");
		СписокВыбора[1].Представление = НСтр("ru = 'траншами (кредитная линия)'");
	Иначе
		СписокВыбора[0].Представление = НСтр("ru = 'единовременно'");
		СписокВыбора[1].Представление = НСтр("ru = 'траншами (линия займов)'");
	КонецЕсли;
	
	Элементы.ВозобновляемыйЛимит.Видимость = Объект.ЭтоКредитнаяЛиния И Не ЭтоСпецификация;
	Элементы.РазрешеноПланированиеТраншейИзПлатежногоКалендаря.Видимость = Объект.ЭтоКредитнаяЛиния И Не ЭтоСпецификация;
	
	Если ЭтоОвердрафт ИЛИ (Объект.ЭтоКредитнаяЛиния И Не ЭтоСпецификация) Тогда
		Элементы.СуммаКредита.Заголовок = НСтр("ru = 'Лимит'");
	Иначе
		Элементы.СуммаКредита.Заголовок = НСтр("ru = 'Сумма'");
	КонецЕсли;
	
	Элементы.ГруппаОграничения.Видимость = (Объект.ЭтоКредитнаяЛиния И Не ЭтоСпецификация);
	Элементы.ТекстОграничений.Видимость = (Объект.ЭтоКредитнаяЛиния И ЭтоСпецификация);
	Элементы.ГруппаИтогоПоДоговору.Видимость = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И Не ЭтоСпецификация;
	Элементы.ГруппаСводнаяИнформация.Видимость = Элементы.ТекстОграничений.Видимость ИЛИ Элементы.ГруппаИтогоПоДоговору.Видимость;	
	
	Элементы.ФормаВычисленияАвтоматически.Пометка = (Объект.АвтоматическиеВычисления);
	Элементы.ФормаВычисленияВручную.Пометка = (НЕ Объект.АвтоматическиеВычисления);
	
	Элементы.ДатаОкончанияПервогоПроцентногоПериода.Видимость = (Объект.ДатаОтсчетаПроцентныхПериодов = ПредопределенноеЗначение("Перечисление.ВидыДатОтсчетаПериодичности.ДатаПервогоПогашения"));
	
	ЭтоФиксированнаяСтавка = (Объект.ТипПроцентнойСтавки = ПредопределенноеЗначение("Перечисление.ТипыСтавокДляРасчетаПериодическихОпераций.Фиксированная"));
	Элементы.ГруппаФиксированнаяСтавка.Видимость = ЭтоФиксированнаяСтавка;
	Элементы.ГруппаПлавающаяСтавка.Видимость = НЕ ЭтоФиксированнаяСтавка;
	
	Элементы.ГруппаФиксированнаяСтавкаСтавка.Видимость = НЕ Объект.РучноеУправлениеИзменениямиСтавки;
	Элементы.РедактироватьПроцентныеСтавкиФиксированная.Видимость = Объект.РучноеУправлениеИзменениямиСтавки;
	Элементы.РедактироватьПроцентныеСтавкиПлавающая.Видимость = Объект.РучноеУправлениеИзменениямиСтавки;
	
	Если Объект.РучноеУправлениеИзменениямиСтавки И Объект.ПроцентныеСтавки.Количество() Тогда
		
		ТекстСтавок = ФинансовыеИнструментыФормыКлиентСервер.ПредставлениеИсторииСтавок(Объект.ПроцентныеСтавки);
		Элементы.РедактироватьПроцентныеСтавкиФиксированная.Заголовок = ТекстСтавок;
		Элементы.РедактироватьПроцентныеСтавкиПлавающая.Заголовок = ТекстСтавок;
		
	КонецЕсли;
	
	Элементы.ГруппаПериодичностьПроцентов.Видимость = Объект.ВыплачиватьПроцентыПериодически;
	
	Элементы.ГруппаГрафик.Видимость = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ДоступенГрафикРасчетовВерсияСоглашенияКредит(
		Объект.ВидДоговораУХ);
	Элементы.РежимАктуализацииЗаявок.Видимость = (Объект.РежимИспользованияГрафика = 
		ПредопределенноеЗначение("Перечисление.РежимыИспользованияГрафика.СозданиеЗаявок"));
	
	ОтображатьКомиссииИШтрафы = Элементы.ГрафикОтображатьКомиссииИШтрафы.Пометка;
	ОтображатьНачисления = Элементы.ГрафикОтображатьНачисления.Пометка;
	//ОтображатьДетальныеЗаписи = Элементы.ГрафикОтображатьДетальныеЗаписи.Пометка;
	
	ЭлементыФормыКомиссииШтрафы = Новый Массив;
	ЭлементыФормыКомиссииШтрафы.Добавить(Элементы.ГрафикРасчетовГруппаКомиссии);
	ЭлементыФормыКомиссииШтрафы.Добавить(Элементы.ГрафикРасчетовГруппаШтрафы);
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьВидимостьЭлементов(ЭлементыФормыКомиссииШтрафы, ОтображатьКомиссииИШтрафы);
	
	ЭлементыФормыНачисление = Новый Массив;
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаПроцентыНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовПроцентыОстаток);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовКомиссииНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовКомиссииОстаток);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовШтрафыНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовШтрафыОстаток);
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьВидимостьЭлементов(ЭлементыФормыНачисление, ОтображатьНачисления);
	
	ВидСоглашения_РамочныйДоговор = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.РамочныйДоговор"));
	Элементы.ГрафикРасчетовГруппаОсновнойДолг.Видимость = НЕ ВидСоглашения_РамочныйДоговор;
	Элементы.ГрафикРасчетовГруппаПроценты.Видимость = НЕ ВидСоглашения_РамочныйДоговор;
	Элементы.ГрафикРассчитатьСуммыПроцентов.Доступность = НЕ ВидСоглашения_РамочныйДоговор;
	Элементы.ГрафикОтображатьКомиссииИШтрафы.Доступность = НЕ ВидСоглашения_РамочныйДоговор;
		
	Элементы.ТекстНадписиПоручители.Видимость = ДоступенВыборПоручителей(Объект.ВидДоговораУХ);			
	Элементы.Реструктуризован.Видимость = ДоступнаРеструктуризацияКредита(Объект.ВидДоговораУХ);
	
	Элементы.ПредупреждениеОНарушенииКовенантовОсновное.Видимость = 
		ЗначениеЗаполнено(Форма.ТекстНадписиПредупреждениеОНарушенииКовенантов);
	Элементы.ПредупреждениеОНарушенииКовенантовРасчеты.Видимость = 
		ЗначениеЗаполнено(Форма.ТекстНадписиПредупреждениеОНарушенииКовенантов);
	
	УправлениеФормой_ГруппаРежимСравнения(Форма);
		
КонецПроцедуры

Функция ДоступенВыборПоручителей(ВидДоговораУХ) Экспорт
	
	Возврат ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Кредит")
		ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗаемВыданный")
		ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗаемПолученный");
		
КонецФункции
	
Функция ДоступнаРеструктуризацияКредита(ВидДоговораУХ) Экспорт
	
	Возврат ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Кредит")
		ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗаемВыданный")
		ИЛИ ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗаемПолученный");

КонецФункции

Процедура УправлениеФормой_ВерсияСоглашенияДепозит(Форма)
		
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ЭтоРамочноеСоглашение = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.РамочныйДоговор"));
	ЭтоСпецификация = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация"));
	
	УправлениеФормой_ФиксированныеСчета(Форма);
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(Форма);
	
	
	Элементы.ГруппаГрафик.Видимость = НЕ ЭтоРамочноеСоглашение;
	Элементы.РежимАктуализацииЗаявок.Видимость = (Объект.РежимИспользованияГрафика = 
		ПредопределенноеЗначение("Перечисление.РежимыИспользованияГрафика.СозданиеЗаявок"));
	
	Элементы.ГруппаСуммаСделки.Видимость = НЕ ЭтоРамочноеСоглашение;
	
	Элементы.ГруппаРамочноеСоглашение.Видимость = ЭтоРамочноеСоглашение;
	Элементы.ГруппаОграничения.Видимость = ЭтоРамочноеСоглашение;
	Элементы.ТекстОграничений.Видимость = ЭтоСпецификация;
	Элементы.ГруппаСводнаяИнформация.Видимость = ЗначениеЗаполнено(Объект.ДоговорКонтрагента) И  Элементы.ТекстОграничений.Видимость;
	
	Элементы.ФормаВычисленияАвтоматически.Пометка = (Объект.АвтоматическиеВычисления);
	Элементы.ФормаВычисленияВручную.Пометка = (НЕ Объект.АвтоматическиеВычисления);
	
	Элементы.ДатаОкончанияПервогоПроцентногоПериода.Видимость = (Объект.ДатаОтсчетаПроцентныхПериодов = ПредопределенноеЗначение("Перечисление.ВидыДатОтсчетаПериодичности.ДатаПервогоПогашения"));
	
	ЭлементыФормыНачисление = Новый Массив;
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаПроцентыНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовПроцентыОстаток);
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьВидимостьЭлементов(ЭлементыФормыНачисление, Элементы.ГрафикОтображатьНачисления.Пометка);
		
	Элементы.ГруппаПериодичностьПроцентов.Видимость = Объект.ВыплачиватьПроцентыПериодически;
	
	Элементы.КапитализацияПроцентов.Видимость = ДоступнаКапитализацияПроцентов(Объект.ВидДоговораУХ);	
	Элементы.КапитализацияПроцентов.ТолькоПросмотр = Не Объект.ВыплачиватьПроцентыПериодически;
	
	Элементы.ВозможностьЧастичногоДосрочногоВозврата.ТолькоПросмотр = НЕ Объект.ВозможностьДосрочногоВозврата;
	Элементы.ГруппаСтавкаДосрочногоВозврата.ТолькоПросмотр = НЕ Объект.ВозможностьДосрочногоВозврата;
	
	УправлениеФормой_ГруппаРежимСравнения(Форма);
	УправлениеФормой_ПериодичностьНачисленияПроцентов(Форма);
		
КонецПроцедуры

Функция ДоступнаКапитализацияПроцентов(ВидДоговораУХ) Экспорт
	
	Возврат ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Депозит");
		
КонецФункции		

Процедура УправлениеФормой_ВерсияСоглашенияБанковскаяГарантия(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	УправлениеФормой_ФиксированныеСчета(Форма);
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(Форма);
	
КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияАккредитив(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(Форма);
	
	УправлениеФормой_ФиксированныеСчета(Форма);
	
	Элементы.ДатаОкончанияПервогоПроцентногоПериода.Видимость = (Объект.ДатаОтсчетаПроцентныхПериодов = ПредопределенноеЗначение("Перечисление.ВидыДатОтсчетаПериодичности.ДатаПервогоПогашения"));
	
	Элементы.ФормаВычисленияАвтоматически.Пометка = (Объект.АвтоматическиеВычисления);
	Элементы.ФормаВычисленияВручную.Пометка = (НЕ Объект.АвтоматическиеВычисления);
	
	ОтображатьНачисления = Элементы.ГрафикОтображатьНачисления.Пометка;
	
	ЭлементыФормыНачисление = Новый Массив;
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаКомиссииЗаОткрытиеНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаКомиссииЗаОткрытиеОстаток);	
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаПрочиеКомиссииНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаПрочиеКомиссииОстаток);

	ФинансовыеИнструментыФормыКлиентСервер.УстановитьВидимостьЭлементов(ЭлементыФормыНачисление, ОтображатьНачисления);
		
	Элементы.ГруппаПериодичностьПроцентов.Видимость = Объект.ВыплачиватьПроцентыПериодически;
	
КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияВалютныйСвоп(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	МассивЭлементовАвтоФон = Новый Массив;
	МассивЭлементовЦветнойФон = Новый Массив;
	
	Если Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.ВидыВалютныхСвопов.КупилПродал") Тогда
		МассивЭлементовЦветнойФон.Добавить(Элементы.ГруппаСуммаПервогоПлатежаКПолучению);
		МассивЭлементовЦветнойФон.Добавить(Элементы.ГруппаСуммаОкончательногоПлатежаКОплате);
		
		МассивЭлементовАвтоФон.Добавить(Элементы.ГруппаСуммаПервогоПлатежаКОплате);
		МассивЭлементовАвтоФон.Добавить(Элементы.ГруппаСуммаОкончательногоПлатежаКПолучению);
		
	ИначеЕсли Объект.ВидСделки = ПредопределенноеЗначение("Перечисление.ВидыВалютныхСвопов.ПродалКупил") Тогда
		МассивЭлементовАвтоФон.Добавить(Элементы.ГруппаСуммаПервогоПлатежаКПолучению);
		МассивЭлементовАвтоФон.Добавить(Элементы.ГруппаСуммаОкончательногоПлатежаКОплате);
		
		МассивЭлементовЦветнойФон.Добавить(Элементы.ГруппаСуммаПервогоПлатежаКОплате);
		МассивЭлементовЦветнойФон.Добавить(Элементы.ГруппаСуммаОкончательногоПлатежаКПолучению);
		
	КонецЕсли;
	
	Для Каждого Элемент Из МассивЭлементовАвтоФон Цикл
		Элемент.ЦветФона = Новый Цвет();
	КонецЦикла;
	
	Для Каждого Элемент Из МассивЭлементовЦветнойФон Цикл
		Элемент.ЦветФона = Форма.ЦветБазовыхЗначений;
	КонецЦикла;
	
	ШаблонСчетОрганизации = НСтр("ru = 'Счет организации в %1'");
	Элементы.СчетОрганизацииВПервойВалюте.Заголовок = СтрШаблон(ШаблонСчетОрганизации, Объект.ПерваяВалюта);
	Элементы.СчетОрганизацииВоВторойВалюте.Заголовок = СтрШаблон(ШаблонСчетОрганизации, Объект.ВтораяВалюта);
	
	ШаблонСчетКонтрагента = НСтр("ru = 'Счет контрагента в %1'");
	Элементы.СчетКонтрагентаВПервойВалюте.Заголовок = СтрШаблон(ШаблонСчетКонтрагента, Объект.ПерваяВалюта);
	Элементы.СчетКонтрагентаВоВторойВалюте.Заголовок = СтрШаблон(ШаблонСчетКонтрагента, Объект.ВтораяВалюта);
	
КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияВалютныйФорвард(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ЭтоРасчетныйФорвард = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.РасчетныйВалютныйФорвард"));
	
	Элементы.ВалютаПлатежа.Видимость = ЭтоРасчетныйФорвард;
	Элементы.ГруппаКурсСпотВалютыПлатежа.Видимость = ЭтоРасчетныйФорвард 
													И (Объект.ВалютаПлатежа <> Объект.БазоваяВалюта) 
													И (Объект.ВалютаПлатежа <> Объект.ВалютаРасчетов);
	Элементы.ГруппаСчетВБазовойВалюте.Видимость = Не ЭтоРасчетныйФорвард;
	
	ШаблонСчетОрганизации = НСтр("ru = 'Счет организации в %1'");
	Элементы.СчетОрганизацииВБазовойВалюте.Заголовок = СтрШаблон(ШаблонСчетОрганизации, Объект.БазоваяВалюта);
	Элементы.СчетОрганизацииВВалютеПлатежа.Заголовок = СтрШаблон(ШаблонСчетОрганизации, Объект.ВалютаПлатежа);
	
	ШаблонСчетКонтрагента = НСтр("ru = 'Счет контрагента в %1'");
	Элементы.СчетКонтрагентаВБазовойВалюте.Заголовок = СтрШаблон(ШаблонСчетКонтрагента, Объект.БазоваяВалюта);
	Элементы.СчетКонтрагентаВВалютеПлатежа.Заголовок = СтрШаблон(ШаблонСчетКонтрагента, Объект.ВалютаПлатежа);
	
КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияВалютноПроцентныйСвоп(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой(Форма);
	
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьЗаголовкиГрафика(Форма, Объект.ВидДоговораУХ, Неопределено, "График");
	
	УправлениеФормой_ВнутригрупповыеДоговоры(Форма);
	
	Элементы.ФормаВычисленияАвтоматически.Пометка = (Объект.АвтоматическиеВычисления);
	Элементы.ФормаВычисленияВручную.Пометка = (НЕ Объект.АвтоматическиеВычисления);
	
	// Видимость в зависимости от вида сделки.
	ЭтоВалютноПроцентныйСвоп = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ВалютноПроцентныйСвоп"));
	
	Элементы.СуммаОрганизации.Заголовок = ?(ЭтоВалютноПроцентныйСвоп, НСтр("ru = 'Номинальная сумма организации'"), НСтр("ru = 'Номинальная сумма'"));
	Элементы.ГруппаСуммаКонтрагента.Видимость = ЭтоВалютноПроцентныйСвоп;
	Элементы.ПроизводитсяОбменНоминальнымиСуммами.Видимость = ЭтоВалютноПроцентныйСвоп;
	Элементы.ГруппаСчетаВВалютеПоступлений.Видимость = ЭтоВалютноПроцентныйСвоп;
	Элементы.ГрафикРасчетовГруппаНоминальнаяСуммаОрганизация.Видимость = Объект.ПроизводитсяОбменНоминальнымиСуммами;
	Элементы.ГрафикРасчетовГруппаНоминальнаяСуммаКонтрагент.Видимость = Объект.ПроизводитсяОбменНоминальнымиСуммами;

	// Подпишем счета
	ШаблонСчетОрганизации = НСтр("ru = 'Счет организации в %1'");
	Элементы.СчетОрганизацииВВалютеПоступления.Заголовок = СтрШаблон(ШаблонСчетОрганизации, Объект.ВалютаКонтрагента);
	Элементы.СчетОрганизацииВВалютеПлатежа.Заголовок = СтрШаблон(ШаблонСчетОрганизации, Объект.ВалютаОрганизации);
	
	ШаблонСчетКонтрагента = НСтр("ru = 'Счет контрагента в %1'");
	Элементы.СчетКонтрагентаВВалютеПоступления.Заголовок = СтрШаблон(ШаблонСчетКонтрагента, Объект.ВалютаКонтрагента);
	Элементы.СчетКонтрагентаВВалютеПлатежа.Заголовок = СтрШаблон(ШаблонСчетКонтрагента, Объект.ВалютаОрганизации);

	// Настройки периодичности платежей
	Элементы.ГруппаПериодичностьПроцентов.Видимость = Объект.ВыплачиватьПроцентыПериодически;
	Элементы.ДатаОкончанияПервогоПроцентногоПериода.Видимость = (Объект.ДатаОтсчетаПроцентныхПериодов = ПредопределенноеЗначение("Перечисление.ВидыДатОтсчетаПериодичности.ДатаПервогоПогашения"));
	
	// Процентная ставка организации
	ЭтоФиксированнаяСтавка = (Объект.ТипПроцентнойСтавкиОрганизации = ПредопределенноеЗначение("Перечисление.ТипыСтавокДляРасчетаПериодическихОпераций.Фиксированная"));
	Элементы.ГруппаФиксированнаяСтавка.Видимость = ЭтоФиксированнаяСтавка;
	Элементы.ГруппаПлавающаяСтавка.Видимость = НЕ ЭтоФиксированнаяСтавка;
	
	Элементы.РедактироватьПроцентныеСтавкиПлавающая.Видимость = Объект.РучноеУправлениеИзменениямиСтавкиОрганизации;
	
	Если Объект.РучноеУправлениеИзменениямиСтавкиОрганизации И Объект.ПроцентныеСтавкиОрганизация.Количество() Тогда
		ТекстСтавок = ФинансовыеИнструментыФормыКлиентСервер.ПредставлениеИсторииСтавок(Объект.ПроцентныеСтавкиОрганизация);
		Элементы.РедактироватьПроцентныеСтавкиПлавающая.Заголовок = ТекстСтавок;
	КонецЕсли;
	
	// Процентная ставка контрагента
	ЭтоФиксированнаяСтавка = (Объект.ТипПроцентнойСтавкиКонтрагента = ПредопределенноеЗначение("Перечисление.ТипыСтавокДляРасчетаПериодическихОпераций.Фиксированная"));
	Элементы.ГруппаФиксированнаяСтавкаПоступления.Видимость = ЭтоФиксированнаяСтавка;
	Элементы.ГруппаПлавающаяСтавкаПоступления.Видимость = НЕ ЭтоФиксированнаяСтавка;
	
	Элементы.РедактироватьПроцентныеСтавкиПоступленияПлавающая.Видимость = Объект.РучноеУправлениеИзменениямиСтавкиКонтрагента;
	
	Если Объект.РучноеУправлениеИзменениямиСтавкиКонтрагента И Объект.ПроцентныеСтавкиКонтрагент.Количество() Тогда
		ТекстСтавок = ФинансовыеИнструментыФормыКлиентСервер.ПредставлениеИсторииСтавок(Объект.ПроцентныеСтавкиКонтрагент);
		Элементы.РедактироватьПроцентныеСтавкиПоступленияПлавающая.Заголовок = ТекстСтавок;
	КонецЕсли;

	// Управление колонками графика
	ОтображатьНачисления = Элементы.ГрафикОтображатьНачисления.Пометка;
	
	ЭлементыФормыНачисление = Новый Массив;
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаПроцентыОрганизацияНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовПроцентыОрганизацияОстаток);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовГруппаПроцентыКонтрагентНачислено);
	ЭлементыФормыНачисление.Добавить(Элементы.ГрафикРасчетовПроцентыКонтрагентОстаток);
	ФинансовыеИнструментыФормыКлиентСервер.УстановитьВидимостьЭлементов(ЭлементыФормыНачисление, ОтображатьНачисления);
		
КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияКоммерческийДоговор(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	#Область УХ_Встраивание
	Элементы.ДекорацияНастроитьГОЗ.Доступность = Форма.РежимРедактирования; 
	#КонецОБласти
	ВалютаРегламентированногоУчета = Форма.ВалютаРегламентированногоУчета;
	
	Элементы.ГруппаЕстьПретензия.Видимость = ЗначениеЗаполнено(Объект.Претензия);
	
	ЭтоРамочноеСоглашение = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.РамочныйДоговор"));
	
	ЭтоДоговорФинансовогоИнструмента = УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорФинансовогоИнструмента(Объект.ВидДоговораУХ);
		
	ЭтоФиксированныйКурс		= (Объект.СпособОпределенияКурсаПлатежа 
									= ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс"));
	ЭтоКурсНаДатуПлатежа 		= (Объект.СпособОпределенияКурсаПлатежа 
									= ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.КурсНаДатуПлатежа"));								
	ЭтоКурсНаФиксированнуюДату 	= (Объект.СпособОпределенияКурсаПлатежа 
									= ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.КурсНаФиксированнуюДату"));	

	ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.УправлениеФормой_ВерсияСоглашенияКоммерческийДоговор(Форма);	
	
	УправлениеФормой_ПараметрыУчетаФИ(Форма);
	
	// Реквизиты валютного контроля.	
	УправлениеФормой_ВалютныйКонтроль(Форма);
	
	// Курс пересчета
	РазличаютсяВалютыВзаиморасчетовИПлатежа = (Объект.ВалютаВзаиморасчетов <> Объект.ОсновнаяВалютаПлатежей);
	
	Элементы.ГруппаКурсПлатежа.Видимость 		= РазличаютсяВалютыВзаиморасчетовИПлатежа;
	Если ЭтоФиксированныйКурс Тогда  
		//  для фикс. курса: "Курс оплаты: фиксированный XXX ВалютаОплаты за YYY ВалютаВзаиморасчетов"
		Элементы.ГруппаКурсПлатежа.ЗаголовокСвернутогоОтображения = СтрШаблон(НСтр("ru = 'Курс оплаты: фиксированный %1 %2 за %3 %4'"),
																Объект.КурсПлатежа,
																Объект.ОсновнаяВалютаПлатежей,
																Объект.КратностьПлатежа,
																Объект.ВалютаВзаиморасчетов);
	ИначеЕсли ЭтоКурсНаДатуПлатежа И Объект.СдвигДатыФиксацииКурсаПлатежа = 0 Тогда 												
		// Для курса на дату оплаты: "Курс оплаты: на дату оплаты"
		Элементы.ГруппаКурсПлатежа.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Курс оплаты: на дату оплаты'");	                                        
	ИначеЕсли ЭтоКурсНаДатуПлатежа Тогда 			
		// Для курса на дату оплаты со сдвигом: "Курс оплаты: за X дней до даты оплаты" 
		ОписаниеДлительности = НСтр("ru = ';%1 день;;%1 дня;%1 дней;'");
		Элементы.ГруппаКурсПлатежа.ЗаголовокСвернутогоОтображения = СтрШаблон(НСтр("ru = 'Курс оплаты: за %1 дней до даты оплаты'"),
																СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(ОписаниеДлительности, Объект.СдвигДатыФиксацииКурсаПлатежа));
	ИначеЕсли ЭтоКурсНаФиксированнуюДату Тогда	
		// На указанную дату: "Курс оплаты: на дату УказаннаяДата"   
		Элементы.ГруппаКурсПлатежа.ЗаголовокСвернутогоОтображения = СтрШаблон(НСтр("ru = 'Курс оплаты: на дату %1'"),
																Формат(Объект.ДатаФиксацииКурсаПлатежа, "ДФ=dd.MM.yyyy"));
	Иначе
		Элементы.ГруппаКурсПлатежа.ЗаголовокСвернутогоОтображения = НСтр("ru = 'Курс оплаты'");															
	КонецЕсли;

	Элементы.ГруппаФиксированныйКурс.Видимость			= ЭтоФиксированныйКурс;
	Элементы.ГруппаКурсНаДатуПлатежа.Видимость			= ЭтоКурсНаДатуПлатежа;
	Элементы.ГруппаКурсНаФиксированнуюДату.Видимость	= ЭтоКурсНаФиксированнуюДату;
				
	Элементы.ГруппаКоридор.Видимость = ЭтоФиксированныйКурс;
		
	Элементы.ЗапретПлатежаВПрочихВалютах.ТолькоПросмотр = 
		(РазличаютсяВалютыВзаиморасчетовИПлатежа
		И ЭтоФиксированныйКурс);
	
	// Режимы контроля по договору
	//Элементы.ДопустимаяСуммаЗадолженности.ТолькоПросмотр = НЕ Объект.ОграничиватьСуммуЗадолженности;
	Элементы.КонтролироватьСуммуЗадолженности.Видимость = Ложь;
	Элементы.КонтролироватьПревышениеСуммы.Видимость 	= Ложь;
	
	Элементы.ИдентификаторПлатежа.ТолькоПросмотр = ЗначениеЗаполнено(Объект.ГосударственныйКонтракт);
	
	// Доступность аналитик планирования в зависимости от используемых видов бюджетов
	ДоступностьБюджетов = ОперативноеПланированиеУХКлиентСерверПовтИсп.ДоступностьСтатейБюджетовВДоговоре();
	Элементы.ОсновнойЦФО.Видимость 		= ДоступностьБюджетов.ВидимостьЦФОПроект;
	Элементы.ОсновнойПроект.Видимость 	= ДоступностьБюджетов.ВидимостьЦФОПроект;
	Элементы.ГруппаСтатьяДДС.Видимость 	= ДоступностьБюджетов.ВидимостьБДДС;
	Элементы.ГруппаСтатьяБДР.Видимость 	= ДоступностьБюджетов.ВидимостьИсполнения;
	Элементы.ОсновнаяСтатьяИсполнение.ОграничениеТипа = ДоступностьБюджетов.ОписаниеТиповИсполнения;
	
	// Формирование платежей.
	СпособФормированияПлатежей_ПоГрафику = (Объект.СпособФормированияПлатежей =
			ПредопределенноеЗначение("Перечисление.СпособыФормированияПлатежейПоДоговору.ПоГрафикуПлатежей"));
	ПорядокРасчетов_ПоДоговорам = (Объект.ПорядокРасчетов = 
		ПредопределенноеЗначение("Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов"));		
	
	Элементы.ГруппаФормированиеПлатежей.Видимость = ПорядокРасчетов_ПоДоговорам; 
	
	Элементы.ПриоритетПлатежа.Видимость = ПорядокРасчетов_ПоДоговорам;
	
	Элементы.РежимИспользованияГрафика.ТолькоПросмотр = Не (ПорядокРасчетов_ПоДоговорам И СпособФормированияПлатежей_ПоГрафику);
	Элементы.ГруппаГрафик.Видимость = ПорядокРасчетов_ПоДоговорам И СпособФормированияПлатежей_ПоГрафику;
	Элементы.РежимАктуализацииЗаявок.Видимость = ПорядокРасчетов_ПоДоговорам 
		И СпособФормированияПлатежей_ПоГрафику 
		И (Объект.РежимИспользованияГрафика = ПредопределенноеЗначение("Перечисление.РежимыИспользованияГрафика.СозданиеЗаявок"));
	Элементы.РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов.Видимость = ПорядокРасчетов_ПоДоговорам И СпособФормированияПлатежей_ПоГрафику;	
	Элементы.ГруппаШаблонПроцесса.Видимость = (Объект.СпособФормированияПлатежей = 
		ПредопределенноеЗначение("Перечисление.СпособыФормированияПлатежейПоДоговору.ПоПроцессу"));
		
	//Видимость группы рекомендуемого условия оплаты
	ЕстьРекомендуемоеУсловиеОплаты = ЗначениеЗаполнено(Форма.РекомендуемоеУсловиеОплаты);
	ЕстьЗамечанияПоРекомендуемомуУсловию = ЗначениеЗаполнено(Форма.СравнениеРекомендуемоеУсловиеОплаты);
	Элементы.РекомендуемоеУсловиеОплаты.Видимость = (ЕстьРекомендуемоеУсловиеОплаты) ;
	Элементы.ДекорацияПредупреждениеУсловиеОплаты.Видимость = (ЕстьРекомендуемоеУсловиеОплаты) И (ЕстьЗамечанияПоРекомендуемомуУсловию);
	
	
	Элементы.СтраницаПериодическиеОперации.Видимость = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.УниверсальноеПривлечение")
														ИЛИ Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.УниверсальноеРазмещение")
														ИЛИ Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Прочее"));
	
	УправлениеФормой_ФиксированныеСчета(Форма);
	
	УправлениеФормой_Обеспечение(Форма);
	
	УправлениеФормой_ВнутригрупповыеДоговоры(Форма);
	
	// Дополнительная видимость по видам договоров
	ЭтоСПоставщиком				 = УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПоставщиком(Объект.ВидДоговораУХ);
	ЭтоСПокупателем				 = УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПокупателем(Объект.ВидДоговораУХ);
		
	ЭтоЗалоги			 = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваВходящие")
							ИЛИ Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваИсходящие"));
	ЭтоСтрахование		 = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.Страхование"));
	ЭтоДоговорСКомиссионером = (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомиссионером"));
	
	// Установим видимость элементов.
	Элементы.УсловияПоставкиИнкотермс.Видимость							= ЭтоСПоставщиком ИЛИ ЭтоСПокупателем;
	
	Элементы.ГруппаСтрахование.Видимость								= ЭтоСтрахование;
	Элементы.ГруппаОбъектыЗалога.Видимость								= ЭтоЗалоги;
	Элементы.ГруппаСведенияОбОбеспечении.Видимость 						= Не ЭтоЗалоги И Не ЭтоСтрахование;
	
	Элементы.ОсновноеОбязательство.Видимость = ДоступноОсновноеОбязательство(Объект.ВидДоговораУХ);
	
	// Переопределим видимость группы "Только просмотр".
	Элементы.ГруппаТолькоПросмотр.Видимость = Элементы.ГруппаТолькоПросмотр.Видимость И НЕ ЗначениеЗаполнено(Объект.Претензия);
	
	УправлениеФормой_ГрафикРасчетовКоммерческийДоговор(Форма);
	
	Элементы.УполномоченныйБанк.Видимость = (Объект.ТребуетсяПостановкаНаУчетВалютногоКонтроля Или Форма.ЭтоГосударственныйКонтракт);
	
	Элементы.СуммаДоговора.АвтоотметкаНезаполненного = (Форма.ВыполнятьКонтрольСуммыРасходаПоДоговору);
	
	Элементы.ГруппаСтатьяКомиссионногоВознаграждения.Видимость = ЭтоДоговорСКомиссионером;
			
КонецПроцедуры

Процедура УправлениеФормой_ГрафикРасчетовКоммерческийДоговор(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ГраницаФактическихДанных.Видимость = ЗначениеЗаполнено(Объект.ГраницаФактическихДанных);
	
	Если Форма.ЕстьАванс Тогда
		Элементы.ДатаПервойОперации.Заголовок = НСтр("ru = 'Дата аванса'");
		Элементы.ГрафикРассчитатьОтДатыПервогоПлатежа.Заголовок = НСтр("ru = 'От даты аванса'");
	Иначе
		Элементы.ДатаПервойОперации.Заголовок = НСтр("ru = 'Дата начисления'");
		Элементы.ГрафикРассчитатьОтДатыПервогоПлатежа.Заголовок = НСтр("ru = 'От даты начисления'");
	КонецЕсли;

КонецПроцедуры

Процедура УправлениеФормой_ВерсияСоглашенияЛизинг(Форма)
	
	УправлениеФормой_ОбщееДляДоговоров(Форма);
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	ВалютаРегламентированногоУчета = Форма.ВалютаРегламентированногоУчета;
	
	ЭтоРамочноеСоглашение = (Объект.ВидСоглашения = ПредопределенноеЗначение("Перечисление.ВидыСоглашений.РамочныйДоговор"));
	
	УправлениеФормой_ПараметрыУчетаФИ(Форма);
	
	УправлениеФормой_ВнутригрупповыеДоговоры(Форма);
	
	Элементы.ГраницаФактическихДанных.Видимость = ЗначениеЗаполнено(Объект.ГраницаФактическихДанных);
	
	//Элементы.ГрафикРасчетовГруппаЗачетОбеспечительногоПлатежа.Видимость = Объект.ЕстьОбеспечительныйПлатеж;
	//Элементы.ГрафикРасчетовГруппаВыкупПредметаЛизинга.Видимость = Объект.ЕстьВыкупПредметаЛизинга;
	
КонецПроцедуры

Процедура УправлениеФормой_ВалютныйКонтроль(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ГруппаВалютныйКонтроль.Видимость = Форма.ДоговорСНерезидентом;	
	Элементы.УникальныйНомерВалютногоКонтроля.ТолькоПросмотр = Не Объект.ТребуетсяПостановкаНаУчетВалютногоКонтроля;
	
КонецПроцедуры

Процедура УправлениеФормой_Обеспечение(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ДекорацияПерейтиОбеспечениеОбязательствОрганизации.Доступность = Объект.ВыданноеОбеспечение;
	Элементы.ДекорацияПерейтиОбеспечениеОбязательствКонтрагента.Доступность = Объект.ПолученноеОбеспечение;
	
	СуммыОбеспечения = ДоговорыКонтрагентовФормыУХВызовСервера.ВеличинаОбеспеченияПоДоговору(Объект.ДоговорКонтрагента);
	
	ЗаголовокВыданноеОбеспечение = НСтр("ru = 'Выданное обеспечение'");
	ЗаголовокПолученноеОбеспечение = НСтр("ru = 'Полученное обеспечение'");
	
	Если Объект.ВыданноеОбеспечение Тогда
		
		ЗаголовокВыданноеОбеспечение = СтрШаблон(НСтр("ru = 'Выданное обеспечение на сумму %1 %2'"),
			СуммыОбеспечения[ПредопределенноеЗначение("Перечисление.НаправленияПредоставленияОбеспечения.Выданное")],
			Объект.ВалютаВзаиморасчетов);

	КонецЕсли;
	
	Элементы.ДекорацияПерейтиОбеспечениеОбязательствОрганизации.Заголовок = ЗаголовокВыданноеОбеспечение;
	
	Если Объект.ПолученноеОбеспечение Тогда
		
		ЗаголовокПолученноеОбеспечение = СтрШаблон(НСтр("ru = 'Полученное обеспечение на сумму %1 %2'"),
			СуммыОбеспечения[ПредопределенноеЗначение("Перечисление.НаправленияПредоставленияОбеспечения.Полученное")],
			Объект.ВалютаВзаиморасчетов);
	
	КонецЕсли;
	
	Элементы.ДекорацияПерейтиОбеспечениеОбязательствКонтрагента.Заголовок = ЗаголовокПолученноеОбеспечение;
	
КонецПроцедуры

Процедура УправлениеФормой_ВнутригрупповыеДоговоры(Форма)
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ГруппаВстречный.Видимость = 
		УправлениеДоговорамиУХКлиентСерверПовтИсп.ПоддерживаетсяЗеркалированиеВнутригрупповыхДоговоров(Объект.ВидДоговораУХ) 
		И ЗначениеЗаполнено(Форма.ОрганизационнаяЕдиницаКонтрагентаУХ);
	
КонецПроцедуры

Процедура УправлениеФормой_ФиксированныеСчета(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Фиксация банковских счетов
	Элементы.БанковскийСчет.АвтоОтметкаНезаполненного = Объект.ФиксированныйСчетОрганизации;
	Элементы.БанковскийСчетКонтрагента.АвтоОтметкаНезаполненного = Объект.ФиксированныйСчетКонтрагента;
КонецПроцедуры

Процедура УправлениеФормой_ПараметрыУчетаФИ(Форма) Экспорт
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	ВидОФХ = Неопределено;
	РеквизитыВидаФИ = Новый Структура("ПроизводныйФИ,СпособУчета,СпрС",Ложь, Ложь, Ложь);
		
	Если Не Объект.ПараметрыУчетаФИ.Пустая() Тогда		
		
		ВидОФХ = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ПараметрыУчетаФИ, "ВидОбъектаФинансовогоХарактера");
		РеквизитыВидаФИ = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ВидОФХ, "ПроизводныйФИ,СпособУчета");
		РеквизитыВидаФИ.Вставить("СпрС", РеквизитыВидаФИ.СпособУчета = ПредопределенноеЗначение("Перечисление.СпособыУчетаФинансовыхИнструментов.ПоСправедливойСтоимости"));
				
	КонецЕсли;
	
	Элементы.УровеньИерархииСправедливойСтоимости.Видимость = РеквизитыВидаФИ.СпрС;
	Если Не РеквизитыВидаФИ.СпрС Тогда
		Если Объект.УровеньИерархииСправедливойСтоимости <> ПредопределенноеЗначение("Перечисление.УровеньИерархииСправедливойСтоимости.ПустаяСсылка") Тогда
            Объект.УровеньИерархииСправедливойСтоимости = ПредопределенноеЗначение("Перечисление.УровеньИерархииСправедливойСтоимости.ПустаяСсылка");
        КонецЕсли;
	КонецЕсли;
	
	Элементы.Котировка.Видимость = РеквизитыВидаФИ.ПроизводныйФИ;
	
КонецПроцедуры

Процедура УправлениеФормой_ГруппаРежимСравнения(Форма)
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	
КонецПроцедуры

Процедура УправлениеФормой_ГрафикРасчетовСПокупателемПоставщиком(Форма)
	
	Объект		= Форма.Объект;
	Элементы	= Форма.Элементы;
	
	Элементы.ГруппаЕстьПретензия.Видимость = ЗначениеЗаполнено(Объект.Претензия);
	
	// Курс пересчета
	РазличаютсяВалютыВзаиморасчетовИПлатежа = (Объект.ВалютаВзаиморасчетов <> Объект.ОсновнаяВалютаПлатежей);
	
	Элементы.ГруппаКурсПлатежа.Видимость = РазличаютсяВалютыВзаиморасчетовИПлатежа;
	Элементы.ГруппаФиксированныйКурс.Видимость			= 
		(Объект.СпособОпределенияКурсаПлатежа = ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс"));
	Элементы.ГруппаКурсНаДатуПлатежа.Видимость			= 
		(Объект.СпособОпределенияКурсаПлатежа = ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.КурсНаДатуПлатежа"));
	Элементы.ГруппаКурсНаФиксированнуюДату.Видимость	= 
		(Объект.СпособОпределенияКурсаПлатежа = ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.КурсНаФиксированнуюДату"));
		
	Элементы.ГруппаКоридор.Видимость = (Объект.СпособОпределенияКурсаПлатежа <> ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс"));
		
	УправлениеФормой_ФиксированныеСчета(Форма);
	УправлениеФормой_ГрафикРасчетовКоммерческийДоговор(Форма);
	
	// Переопределим видимость группы "Только просмотр".
	Элементы.ГруппаТолькоПросмотр.Видимость = Элементы.ГруппаТолькоПросмотр.Видимость И НЕ ЗначениеЗаполнено(Объект.Претензия);
				
КонецПроцедуры

Процедура УправлениеФормой_ПериодичностьНачисленияПроцентов(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПериодичностьНачисленияПроцентов.Доступность = Объект.НачислениеПроцентовНаОтчетныеДаты;
	
КонецПроцедуры	

Процедура УправлениеВидимостьюКолонкиСекцииГрафика(ЭлементыФормы, ИмяКолонкиСекции, ПризнакВидимости) 
	
		ПрефиксИмениЭлемента = "ГрафикРасчетов";
		
		// Колонка со значением суммы по графику видна всегда, изменяется только шапка.
		ЭлементыФормы[ПрефиксИмениЭлемента + ИмяКолонкиСекции].ОтображатьВШапке = ПризнакВидимости;
		
		ЭлементыФормы[ПрефиксИмениЭлемента + ИмяКолонкиСекции + "Факт"].Видимость = ПризнакВидимости;
		ЭлементыФормы[ПрефиксИмениЭлемента + ИмяКолонкиСекции + "ПланФакт"].Видимость = ПризнакВидимости;
		
КонецПроцедуры
#КонецОбласти
