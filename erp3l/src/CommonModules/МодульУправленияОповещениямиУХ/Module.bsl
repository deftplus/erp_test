
#Область РаботаСОповещениями

// Возвращает уникальную служебную часть, которая будет добавлена к письму с задачей
Функция ПолучитьСлужебнуюЧастьПисьмаЗадачи() Экспорт
	Возврат "95465917-c982-439e-a524-8858763489d2";
КонецФункции

// Создает запись в регистре Отправленные задачи по параметрам. Возвращает ИдентификаторСообщения. Когда
//ИдентификаторСообщенияВход не задан - будет сгенерирован новый.
Функция СоздатьЗаписьОтправленныеЗадачи(ЗадачаВход, ПользовательВход, ИдентификаторСообщенияВход = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Если ИдентификаторСообщенияВход = Неопределено Тогда
		НовыйИдентификатор = Строка(Новый УникальныйИдентификатор());
	Иначе
		НовыйИдентификатор = ИдентификаторСообщенияВход;
	КонецЕсли;
	Попытка
		МенеджерЗаписи = РегистрыСведений.ОтправленныеЗадачи.СоздатьМенеджерЗаписи();	
		МенеджерЗаписи.ИдентификаторСообщения	 = НовыйИдентификатор;
		МенеджерЗаписи.Задача					 = ЗадачаВход;
		МенеджерЗаписи.Пользователь				 = ПользовательВход;
		МенеджерЗаписи.Исполнено				 = Ложь;
		МенеджерЗаписи.Ошибка					 = Ложь;
		МенеджерЗаписи.Записать();
	Исключение
		УстановитьПривилегированныйРежим(Ложь);	
		ТекстСообщения = НСтр("ru = 'Во время записи в регистр Отправленные задачи по задаче %Задача% и пользователю %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Задача%", Строка(ЗадачаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", Строка(ПользовательВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат НовыйИдентификатор;
	КонецПопытки;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат НовыйИдентификатор;
КонецФункции

// По идентификатору сообщения ИдентификаторВход возвращает структуру из регистра ОтправленныеЗадачи.
Функция ПолучитьСтруктуруПоИдентификаторуСообщения(ИдентификаторВход) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	РезультатФункции = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтправленныеЗадачи.ИдентификаторСообщения,
		|	ОтправленныеЗадачи.Задача,
		|	ОтправленныеЗадачи.Пользователь,
		|	ОтправленныеЗадачи.Задача.СвязанныйОбъект КАК СвязанныйОбъект,
		|	ОтправленныеЗадачи.Исполнено,
		|	ОтправленныеЗадачи.Ошибка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВизаДополнительныхСогласующих.Задача) КАК КоличествоДопСогласования,
		|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа, ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ПустаяСсылка)) КАК ТипЭтапа
		|ИЗ
		|	РегистрСведений.ОтправленныеЗадачи КАК ОтправленныеЗадачи
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
		|		ПО ОтправленныеЗадачи.Задача = ВизаДополнительныхСогласующих.Задача
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
		|		ПО ОтправленныеЗадачи.Задача = ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
		|ГДЕ
		|	ОтправленныеЗадачи.ИдентификаторСообщения = &ИдентификаторСообщения
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтправленныеЗадачи.ИдентификаторСообщения,
		|	ОтправленныеЗадачи.Пользователь,
		|	ОтправленныеЗадачи.Ошибка,
		|	ОтправленныеЗадачи.Исполнено,
		|	ОтправленныеЗадачи.Задача,
		|	ОтправленныеЗадачи.Задача.СвязанныйОбъект,
		|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа, ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ПустаяСсылка))";
	Запрос.УстановитьПараметр("ИдентификаторСообщения", ИдентификаторВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДопСогласование = (ВыборкаДетальныеЗаписи.КоличествоДопСогласования > 0);
		РезультатФункции.Вставить("ИдентификаторСообщения", 	ВыборкаДетальныеЗаписи.ИдентификаторСообщения);
		РезультатФункции.Вставить("Задача", 					ВыборкаДетальныеЗаписи.Задача);
		РезультатФункции.Вставить("Пользователь", 				ВыборкаДетальныеЗаписи.Пользователь);
		РезультатФункции.Вставить("СвязанныйОбъект", 			ВыборкаДетальныеЗаписи.СвязанныйОбъект);
		РезультатФункции.Вставить("Исполнено", 					ВыборкаДетальныеЗаписи.Исполнено);
		РезультатФункции.Вставить("Ошибка", 					ВыборкаДетальныеЗаписи.Ошибка);
		РезультатФункции.Вставить("ТипЭтапа", 					ВыборкаДетальныеЗаписи.ТипЭтапа);
		РезультатФункции.Вставить("ДопСогласование", 			ДопСогласование);
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	Возврат РезультатФункции;
КонецФункции

// Устанавливает по ИдентификаторСообщенияВход в регистре ОтправленныеЗадачи флаг исполнения в
//значение ЗначениеИсполненияВход.
Процедура УстановитьИсполнениеОтправленнойЗадачи(ИдентификаторСообщенияВход, ЗначениеИсполненияВход) Экспорт
	НаборЗаписей = РегистрыСведений.ОтправленныеЗадачи.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщенияВход);
    НаборЗаписей.Прочитать();
    Если НаборЗаписей.Количество() = 0 Тогда
		// Нет такого значения.
    Иначе
        Запись = НаборЗаписей[0];
	    Запись.Исполнено = ЗначениеИсполненияВход;
	    НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

// Устанавливает по ИдентификаторСообщенияВход в регистре ОтправленныеЗадачи флаг Ошибка в
//значение ЗначениеИсполненияВход.
Процедура УстановитьСтатусОшибкиОтправленнойЗадачи(ИдентификаторСообщенияВход, ЗначениеСтатусаОшибкиВход) Экспорт
	НаборЗаписей = РегистрыСведений.ОтправленныеЗадачи.СоздатьНаборЗаписей();
    НаборЗаписей.Отбор.ИдентификаторСообщения.Установить(ИдентификаторСообщенияВход);
    НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		Запись = НаборЗаписей.Добавить();
		Запись.ИдентификаторСообщения = ИдентификаторСообщенияВход;
		Запись.Ошибка = ЗначениеСтатусаОшибкиВход;
	    НаборЗаписей.Записать();
    Иначе
        Запись = НаборЗаписей[0];
	    Запись.Ошибка = ЗначениеСтатусаОшибкиВход;
	    НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

// Возвращает значение константы НавигационнаяСсылкаИнформационнойБазы
Функция ПолучитьКонстантуНавигационнаяСсылкаИнформационнойБазы() Экспорт
	РезультатФункции = Константы.НавигационнаяСсылкаИнформационнойБазы.Получить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьКонстантуНавигационнаяСсылкаИнформационнойБазы()

// Заменяет все навигационные ссылки, содержащиеся в ИсходныйТекстВход, на внешние.
Функция ПреобразоватьНавигационныеСсылкиВоВнешние(ИсходныйТекстВход) Экспорт
	РезультатФункции = ИсходныйТекстВход;
	СсылкаИнфоБазы = ПолучитьНавигационнуюСсылкуИнформационнойБазы();
	Если СокрЛП(СсылкаИнфоБазы) = "" Тогда
		СсылкаИнфоБазы = ПолучитьКонстантуНавигационнаяСсылкаИнформационнойБазы();
		Если СокрЛП(СсылкаИнфоБазы) = "" Тогда
			СсылкаИнфоБазы = ОбщегоНазначения.АдресПубликацииИнформационнойБазыВИнтернете();
		Иначе
			// Ссылка установлена.
		КонецЕсли;
	Иначе
		// Ссылка установлена.
	КонецЕсли;	  
	ТекстЗамены = "<a href='" + СсылкаИнфоБазы + "#e1cib";
	РезультатФункции = СтрЗаменить(РезультатФункции, "<a href='e1cib", ТекстЗамены);
	Возврат РезультатФункции;
КонецФункции

Процедура СоздатьОповещениеПользователю(КатегорияОповещения,ВидСобытия,Пользователь,ТекстСообщения, ЗадачаВход = Неопределено, ТекстПочтовогоСообщения = "",Вложение = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		 Возврат;
	КонецЕсли;
	
	ОповещениеУспешноЗаписано = Ложь;
	
	ТекстОшибки = "<"+Строка(ВидСобытия)+">"
	+"<"+Строка(Пользователь)+">";

	ОповещениеОбъект = РегистрыСведений.ОповещенияПользователей.СоздатьМенеджерЗаписи();	
	ОповещениеОбъект.ВидОповещения 	= ВидСобытия;
	ОповещениеОбъект.Пользователь 	= Пользователь;
	ОповещениеОбъект.КатегорияОповещений 	= КатегорияОповещения;
	ОповещениеОбъект.ВидОповещения 	= ВидСобытия;
	ДокФормат = Новый ФорматированныйДокумент;
	ДокФормат.УстановитьHTML(ТекстСообщения,Новый Структура);
	ОповещениеОбъект.Тема	 		= ДокФормат.ПолучитьТекст(); 
	ОповещениеОбъект.Сообщение 		= ТекстСообщения;
	ОповещениеОбъект.ДатаСоздания 	= ТекущаяДата();
	ОповещениеОбъект.ИдентификаторОповещения = Новый УникальныйИдентификатор;
	//Когда задача задана, заполним её в ресурс. Иначе заполним пустую ссылку
	Если ЗначениеЗаполнено(ЗадачаВход) Тогда
		ОповещениеОбъект.Задача = ЗадачаВход;
	Иначе
		ОповещениеОбъект.Задача = Справочники.Задачи.ПустаяСсылка();
	КонецЕсли;

	Попытка
		ОповещениеОбъект.Записать();
		ОповещениеУспешноЗаписано = Истина;
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru='Не удалось записать ';en='Failed to write '")+ТекстОшибки+НСтр("ru=' пользователю по причине ';en=' for the user: '")+ОписаниеОшибки());
	КонецПопытки; 		
	
	//Проверим - хочет ли пользователь получать оповещение по mail
	Если ОповещениеУспешноЗаписано Тогда
		Если Пользователь.ОповещатьПоEmail Тогда
			
			ПочтаОтветственного = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь,Справочники.ВидыКонтактнойИнформации.EmailПользователя);
			Если (ПустаяСтрока(ПочтаОтветственного) ИЛИ ПочтаОтветственного = Неопределено) Тогда
				Возврат;
			КонецЕсли;
						
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Получатели.Добавить(ПочтаОтветственного);
			Письмо.Отправитель = УчетнаяЗаписьДляРассылкиУведомлений();			
			
			Если НЕ Вложение = Неопределено Тогда
				Письмо.Вложения.Добавить(Вложение);                
			КонецЕсли;	
			
			Если ТекстПочтовогоСообщения = "" Тогда
				ТекстОтправки = ТекстСообщения;					// Специализированный текст почтового сообщения не задан. Укажем тот же, что и для оповещения в системе.
			Иначе
				ТекстОтправки = ТекстПочтовогоСообщения;		// Текст для почтового сообщения задан отдельно. Укажем его.
			КонецЕсли;
			ТекстОтправки = ПреобразоватьНавигационныеСсылкиВоВнешние(ТекстОтправки);
			Письмо.Тексты.Добавить(ТекстОтправки, ТипТекстаПочтовогоСообщения.HTML);
			Письмо.Тема = НСтр("ru = 'Оповещение 1С:УХ: '") + Строка(ВидСобытия);
	       
			УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Неопределено);
				
		КонецЕсли;					
	КонецЕсли;	
	
	
КонецПроцедуры

Функция УчетнаяЗаписьДляРассылкиУведомлений() Экспорт
	
	ЭлПочта_ = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	Возврат ЭлПочта_.АдресЭлектроннойПочты;
	
КонецФункции

// Возвращает значение реквизита с именем ПараметрВход объекта СсылкаВход с именем ИмяСсылкиВход.
Функция ПолучитьЗначениеРеквизитаСсылки(ОбъектСсылкаВход, ИмяСсылкиВход, ПараметрВход)
	РезультатФункции = Неопределено;
	Если СтрНайти(ПараметрВход, ".") = 0 Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылкаВход, ПараметрВход) Тогда
			Если Прав(ИмяСсылкиВход, 1) = "." Тогда
				РезультатФункции = Вычислить(ИмяСсылкиВход + ПараметрВход);
			Иначе
				РезультатФункции = Вычислить(ИмяСсылкиВход + "." + ПараметрВход);
			КонецЕсли;
		Иначе
			РезультатФункции = Неопределено;
		КонецЕсли;
	Иначе
		Если Прав(ИмяСсылкиВход, 1) = "." Тогда
			РезультатФункции = Вычислить(ИмяСсылкиВход + ПараметрВход);
		Иначе
			РезультатФункции = Вычислить(ИмяСсылкиВход + "." + ПараметрВход);
		КонецЕсли;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

// Возвращает представление реквизита ИмяПараметраВход со значением ЗначениеПараметраВход для 
// объекта ОбъектСсылкаВход.
Функция ПолучитьПредставлениеПараметраШаблона(ОбъектСсылкаВход, ИмяПараметраВход, ЗначениеПараметраВход)
	РезультатФункции = "";
	ЭтоСкалярныйТип = (ТипЗнч(ЗначениеПараметраВход) = Тип("Булево") ИЛИ ТипЗнч(ЗначениеПараметраВход) = Тип("Число") ИЛИ ТипЗнч(ЗначениеПараметраВход) = Тип("Дата"));
	Если ЭтоСкалярныйТип Тогда
		Если ОбъектСсылкаВход <> Неопределено Тогда
			// Получение формата отображения.
			МетаданныеСсылки = ОбъектСсылкаВход.Метаданные();
			РеквизитыМетаданного = МетаданныеСсылки.Реквизиты;
			СтандартныеРеквизитыМетаданного = МетаданныеСсылки.СтандартныеРеквизиты;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РеквизитыМетаданного, ИмяПараметраВход) Тогда
				ФорматПредставления = РеквизитыМетаданного[ИмяПараметраВход].Формат;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтандартныеРеквизитыМетаданного, ИмяПараметраВход) Тогда	
				ФорматПредставления = СтандартныеРеквизитыМетаданного[ИмяПараметраВход].Формат;
			Иначе
				ФорматПредставления = "";
			КонецЕсли;
			// Формирование представления реквизита по полученному формату представления.
			Если ЗначениеЗаполнено(ФорматПредставления) Тогда
				РезультатФункции = Формат(ЗначениеПараметраВход, ФорматПредставления);
			Иначе
				РезультатФункции = Строка(ЗначениеПараметраВход);
			КонецЕсли;
		Иначе
			РезультатФункции = Строка(ЗначениеПараметраВход);
		КонецЕсли;
	Иначе
		РезультатФункции = Строка(ЗначениеПараметраВход);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции
			
// Выполняет обработку параметров, обозначенных через СлужебноеИмяВход. Возвращает структуру со значением и именем параметра
Функция ОбработатьПараметрШаблона(СлужебноеИмяВход, ПараметрыПроцессаВход, ОбъектСсылкаВход, ФлОшибкиВход, ТекстШаблонаРабочийВход)
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ЗначениеПараметра", Неопределено);
	РезультатФункции.Вставить("ТекПараметр", "");   	
	ЗначениеПараметра = "";
	ПредставлениеЗначения = "";
	// Поиск параметров.
	НачалоПараметра = СтрНайти(ТекстШаблонаРабочийВход,"["+СлужебноеИмяВход);
	ОкончаниеПараметра = СтрНайти(ТекстШаблонаРабочийВход,"]", , НачалоПараметра);
	ТекПараметр = Сред(ТекстШаблонаРабочийВход,НачалоПараметра ,ОкончаниеПараметра - НачалоПараметра+1);
	ТекПараметр_ = СтрЗаменить(ТекПараметр,"["+СлужебноеИмяВход,"");
	ТекПараметр_ = СтрЗаменить(ТекПараметр_,"[","");
	ТекПараметр_ = СтрЗаменить(ТекПараметр_,"]","");
	ПозицияПервойТочки = СтрНайти(ТекПараметр_,".");
	// Обработка найденных параметров.
	Если ТекПараметр_ = "ТекущаяДата" Тогда
		ЗначениеПараметра = ТекущаяДата();
	Иначе	
		// Обработаем дополнительные параметры.
		Если ПараметрыПроцессаВход <> Неопределено Тогда
			Если ПозицияПервойТочки = 0 Тогда
				СтрокаПараметра = ПараметрыПроцессаВход.Найти(ТекПараметр_,"КодПараметра");
				Попытка
					Если НЕ СтрокаПараметра = Неопределено Тогда
						ЗначениеПараметра = СтрокаПараметра.ЗначениеПоУмолчанию;  
					Иначе						
						СтруктураЗначения = ПолучитьЗначениеПараметраПоПолномуИмени(ОбъектСсылкаВход, ТекПараметр_);
						ЗначениеПараметра = СтруктураЗначения.ЗначениеПараметра;
						ПредставлениеЗначения = СтруктураЗначения.ПредставлениеЗначения;						
					КонецЕсли;
				Исключение
					ЗначениеПараметра = ТекПараметр;
					ФлОшибкиВход = Истина;
				КонецПопытки
			Иначе
				ИмяПараметраБезТочки = Лев(ТекПараметр_,ПозицияПервойТочки-1);
				ИмяПараметраПослеТочки = СтрЗаменить(ТекПараметр_,ИмяПараметраБезТочки,"");
				СтрокаПараметра = ПараметрыПроцессаВход.Найти(ИмяПараметраБезТочки,"КодПараметра");
				Попытка
					Если НЕ СтрокаПараметра = Неопределено Тогда
						ЗначениеПараметра = Вычислить("СтрокаПараметра.ЗначениеПоУмолчанию"+ИмяПараметраПослеТочки);  
					Иначе						
						СтруктураЗначения = ПолучитьЗначениеПараметраПоПолномуИмени(ОбъектСсылкаВход, ТекПараметр_);
						ЗначениеПараметра = СтруктураЗначения.ЗначениеПараметра;
						ПредставлениеЗначения = СтруктураЗначения.ПредставлениеЗначения;						
					КонецЕсли;
				Исключение
					ЗначениеПараметра = ТекПараметр;
					ФлОшибкиВход = Истина;
				КонецПопытки;
			КонецЕсли;
		Иначе	 
			// Дополнительных параметров нет.
		КонецЕсли;	
		// Обработаем параметры из реквизитов объекта.
		Попытка
			Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда				
				СтруктураЗначения = ПолучитьЗначениеПараметраПоПолномуИмени(ОбъектСсылкаВход, ТекПараметр_);
				ЗначениеПараметра = СтруктураЗначения.ЗначениеПараметра;
				ПредставлениеЗначения = СтруктураЗначения.ПредставлениеЗначения;				
			Иначе
				// Уже есть значение параметра.
			КонецЕсли;
		Исключение
			ЗначениеПараметра = ТекПараметр;
			ФлОшибкиВход = Истина;
		КонецПопытки;
	КонецЕсли;     
	// Заполнение и вывод результирующей структуры.
	Если ЗначениеЗаполнено(ПредставлениеЗначения) Тогда
		РезультатФункции.Вставить("ПредставлениеЗначения", ПредставлениеЗначения);
	Иначе
		РезультатФункции.Вставить("ПредставлениеЗначения", Строка(ЗначениеПараметра));
	КонецЕсли;
	РезультатФункции.Вставить("ЗначениеПараметра", ЗначениеПараметра);
	РезультатФункции.Вставить("ТекПараметр", ТекПараметр);
	Возврат РезультатФункции;
КонецФункции

Функция ПодготовитьТекстОповещенияПоШаблону(ТекстШаблона,ПараметрыПроцесса=Неопределено,ОбъектССылка,ФлОшибки=Ложь) Экспорт
		
	ТекстШаблонаРабочий = ТекстШаблона;
	ТекстШаблонаИтог = ТекстШаблона;
	СтруктураПараметров = Новый Структура;
	// Обработаем нессылочные параметры.
	Пока СтрНайти(ТекстШаблонаРабочий,"[Параметр.")>0 Цикл 
		СтруктураЗначениеПараметра = ОбработатьПараметрШаблона("Параметр.", ПараметрыПроцесса, ОбъектССылка, ФлОшибки, ТекстШаблонаРабочий);
		ТекстШаблонаИтог = СтрЗаменить(ТекстШаблонаИтог, СтруктураЗначениеПараметра.ТекПараметр, СтруктураЗначениеПараметра.ПредставлениеЗначения);
		ТекстШаблонаРабочий = СтрЗаменить(ТекстШаблонаРабочий,СтруктураЗначениеПараметра.ТекПараметр,"");
	КонецЦикла;	
	// Обработаем ссылочные параметры и добавим навигационную ссылку в шаблон.
	Пока СтрНайти(ТекстШаблонаРабочий,"[#Параметр.")>0 Цикл 
		СтруктураЗначениеПараметра = ОбработатьПараметрШаблона("#Параметр.", ПараметрыПроцесса, ОбъектССылка, ФлОшибки, ТекстШаблонаРабочий);
		ЗначениеВСтруктуре = СтруктураЗначениеПараметра.ЗначениеПараметра;
		Если ЗначениеЗаполнено(ЗначениеВСтруктуре) Тогда
			ЭтоСкалярныйТип = (ТипЗнч(ЗначениеВСтруктуре) = Тип("Число") ИЛИ ТипЗнч(ЗначениеВСтруктуре) = Тип("Булево") ИЛИ ТипЗнч(ЗначениеВСтруктуре) = Тип("Строка") ИЛИ ТипЗнч(ЗначениеВСтруктуре) = Тип("Дата"));
			Если НЕ ЭтоСкалярныйТип Тогда
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗначениеВСтруктуре);
				ЗначениеПараметра = "<a href='" + НавигационнаяСсылка + "'>" + Строка(ЗначениеВСтруктуре) + "</a>";
			Иначе
				ЗначениеПараметра = Строка(ЗначениеВСтруктуре);
			КонецЕсли;
		Иначе
			ЗначениеПараметра = "";
		КонецЕсли;
		ТекстШаблонаИтог = СтрЗаменить(ТекстШаблонаИтог, СтруктураЗначениеПараметра.ТекПараметр, ЗначениеПараметра);
		ТекстШаблонаРабочий = СтрЗаменить(ТекстШаблонаРабочий, СтруктураЗначениеПараметра.ТекПараметр, "");
	КонецЦикла;	
	
	Возврат ТекстШаблонаИтог;
	
КонецФункции

// Возвращает массив активных ответственных по задаче ЗадачаВход.
Функция ПолучитьМассивПользователейПоЗадаче(ЗадачаВход)
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(ЗадачаВход) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессов.Задача,
		|	ОтложеннаяОбработкаЭтаповПроцессов.Ответственный,
		|	ОтложеннаяОбработкаЭтаповПроцессов.Выполнено
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ОтложеннаяОбработкаЭтаповПроцессов
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессов.Задача = &Задача
		|	И ОтложеннаяОбработкаЭтаповПроцессов.Выполнено = ЛОЖЬ";
		Запрос.УстановитьПараметр("Задача", ЗадачаВход);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ТекОтветственный = ВыборкаДетальныеЗаписи.Ответственный;
			РезультатФункции.Добавить(ТекОтветственный);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Создаёт запись в регистре СобытияОповещений по переданным параметрам в структуре Параметры.
Процедура СоздатьСобытиеОповещения(Параметры)
	// Инициализация.
	ВидСобытия			 = Параметры.ВидСобытия;
	ШаблонОповещения	 = Параметры.ШаблонОповещения;
	ИсточникСсылка		 = Параметры.ИсточникСсылка;
	СписокРассылки		 = Параметры.СписокРассылки;
	ДопПараметры		 = Параметры.ДопПараметры;
	ЗадачаВход			 = Параметры.ЗадачаВход;
	ЭтапПроцессаВход	 = Параметры.ЭтапПроцессаВход;
	КатегорияСобытия	 = ВидСобытия.КатегорияСобытия;
	Вложение = Неопределено;
	ТипОбъектаОповещения = Неопределено;
	// Получение и обход таблицы шаблонов.
	Выгрузка = ПолучитьТаблицуШаблоновПоПараметрамРассылки(ВидСобытия, ИсточникСсылка, ТипОбъектаОповещения);
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		// Добавление дополнительных параметров для Экземпляра процесса.
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.ЭкземплярПроцесса")  Тогда
			ДопПараметры = ИсточникСсылка.ПараметрыПроцесса.Выгрузить();
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Параметры, "ТекущийЭтап") тогда
				ПараметрТекущийЭтап = ДопПараметры.Добавить();
				
				ПараметрТекущийЭтап.КодПараметра = "ТекущийЭтап";
				ПараметрТекущийЭтап.ИмяПараметра = "ТекущийЭтап";
				ПараметрТекущийЭтап.ЗначениеПоУмолчанию = Параметры.ТекущийЭтап;
				ПараметрТекущийЭтап.Ключевой = Ложь;
				ПараметрТекущийЭтап.Предопределенный = Ложь;
				ПараметрТекущийЭтап.ТипЗначенияПараметраСсылка = Справочники.СправочникиБД.НайтиПоНаименованию("ШаблоныУниверсальныхПроцессов", Истина);
				ПараметрТекущийЭтап.ЭтоПростойТип = Ложь;
				ПараметрТекущийЭтап.НомерСтроки = ДопПараметры.Количество();
			КонецЕсли;
			
		КонецЕсли;	
		// Получение списка оповещаемых.
		СписокОповещаемых = ПолучитьОповещаемыхПоУмолчанию(КатегорияСобытия,ВидСобытия,ИсточникСсылка,СписокРассылки);
		ТаблицаОповещаемых = ПолучитьОповещаемыхПоСпискуРассылки(ТекВыгрузка.СписокРассылки,ИсточникСсылка,ТипОбъектаОповещения,СписокОповещаемых);
		// Обход списка оповещаемых и отправка оповещений.
		Для Каждого Пользователь Из ТаблицаОповещаемых Цикл
			Если НЕ ЗначениеЗаполнено(Пользователь.Получатель) Тогда
				Продолжить;
			Иначе
				// Выполняем далее.
			КонецЕсли;
			// Проверим получение оповещения по данной задаче пользователем ранее.
			ЭтоНапоминание = (КатегорияСобытия = Справочники.КатегорииСобытийОповещений.Напоминания);
			Если ЗначениеЗаполнено(ЗадачаВход) И ЗначениеЗаполнено(ВидСобытия) И (НЕ ЭтоНапоминание) Тогда
				Если ПользовательПолучилОповещениеОЗадаче(Пользователь.Получатель, ЗадачаВход, ВидСобытия) Тогда
					Продолжить;				// Не требуется отправка такого оповещения.
				Иначе
					// Выполняем далее.
				КонецЕсли;
			Иначе
				// Не требуется проверять получение оповещения. Выполняем далее.
			КонецЕсли;
			// Добавим информацию о получателе.
			ДобавитьДопПараметрВТаблицу(ДопПараметры, "ПолучательОповещения", Пользователь.Получатель);
			// Получим шаблон оповещения.
			ШаблонРабочий = Справочники.ШаблоныОповещений.ПустаяСсылка();
			Если Не ЗначениеЗаполнено(ТекВыгрузка.ШаблонОповещения) Тогда
				Если ШаблонОповещения = Неопределено Тогда
					ТекстСообщения = ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияСобытия, ВидСобытия, ИсточникСсылка);
				Иначе	
					ТекстСообщения = ШаблонОповещения;
				КонецЕсли;
				ШаблонРабочий = Справочники.ШаблоныОповещений.ПустаяСсылка();
			Иначе	 
				ШаблонРабочий = ТекВыгрузка.ШаблонОповещения;
				ТекстСообщения = ""
			КонецЕсли;	
			// Получим печатную форму.
			ВнешняяПечатнаяФормаРабочий = ТекВыгрузка.ВнешняяПечатнаяФорма;
			// Оповестим в системе.
			СтруктураСобытия = Новый Структура;
			СтруктураСобытия.Вставить("СпособОповещения",		 Перечисления.СпособыОповещения.ВСистеме);
			СтруктураСобытия.Вставить("Получатель",				 Пользователь.Получатель);
			СтруктураСобытия.Вставить("ВидСобытия",				 ВидСобытия);
			СтруктураСобытия.Вставить("Источник",				 ИсточникСсылка);
			СтруктураСобытия.Вставить("ШаблонОповещения",		 ШаблонРабочий);
			СтруктураСобытия.Вставить("ПараметрыСобытия",		 ДопПараметры);
			СтруктураСобытия.Вставить("Задача",					 ЗадачаВход);
			СтруктураСобытия.Вставить("Этап",					 ЭтапПроцессаВход);
			СтруктураСобытия.Вставить("ТекстСообщения",			 ТекстСообщения);
			СтруктураСобытия.Вставить("Замещаемый",				 Пользователь.Замещаемый);
			СтруктураСобытия.Вставить("ВнешняяПечатнаяФорма",	 ВнешняяПечатнаяФормаРабочий);
			СобытияОповещенийСерверУХ.СоздатьЗаписьСобытияПоСтруктуре(СтруктураСобытия);
			// Оповестим по электронной почте.
			Если Пользователь.Получатель.ОповещатьПоEmail Тогда
				СтруктураСобытия = Новый Структура;
				СтруктураСобытия.Вставить("СпособОповещения",		 Перечисления.СпособыОповещения.ЭлектроннаяПочта);
				СтруктураСобытия.Вставить("Получатель",				 Пользователь.Получатель);
				СтруктураСобытия.Вставить("ВидСобытия",				 ВидСобытия);
				СтруктураСобытия.Вставить("Источник",				 ИсточникСсылка);
				СтруктураСобытия.Вставить("ШаблонОповещения",		 ШаблонРабочий);
				СтруктураСобытия.Вставить("ПараметрыСобытия",		 ДопПараметры);
				СтруктураСобытия.Вставить("Задача",					 ЗадачаВход);
				СтруктураСобытия.Вставить("Этап",					 ЭтапПроцессаВход);
				СтруктураСобытия.Вставить("ТекстСообщения",			 ТекстСообщения);
				СтруктураСобытия.Вставить("Замещаемый",				 Пользователь.Замещаемый);
				СтруктураСобытия.Вставить("ВнешняяПечатнаяФорма",	 ВнешняяПечатнаяФормаРабочий);
				СобытияОповещенийСерверУХ.СоздатьЗаписьСобытияПоСтруктуре(СтруктураСобытия);
			Иначе
				// Не требуется оповещать данного пользователя по почте.
			КонецЕсли;
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры

// Создаёт событие оповещения
//
// Параметры:
//  ВидСобытия - Вид события оповещения;
//  ШаблонОповещения - Шаблон, который будет заполнен в оповещении. Если не указан - будет использоваться из настроек оповещения;
//  ИсточникСсылка - Ссылка на ключевой объект оповещения. Если не указан - будет использоваться объект оповещения, назначенный категории оповещения;
//  СписокРассылки - Список пользователей, которым будет отправлено оповещение. Если не указан - будет использоваться пользователь, назначенный категорией оповещения;
//  ДопПараметры - Структура дополнительных параметров, подставляемых в шаблон;
//  ЗадачаВход - Задача, которая будет привязана к данному оповещению. Если не указано - оповещение будет создано без привязки к задаче;
//  ЭтапПроцессаВход - Этап процесса (если требуется), на котором произошло данное событие.
Функция ОповеститьПользователей(ВидСобытия, ШаблонОповещения = Неопределено, ИсточникСсылка = Неопределено, СписокРассылки = Неопределено, ДопПараметры = Неопределено, ЗадачаВход = Неопределено, ЭтапПроцессаВход = Неопределено) Экспорт
		
	РезультатФункции = Истина;
	Попытка
		// Преобразование входных параметров.
		Если ТипЗнч(СписокРассылки) = Тип("СправочникСсылка.Пользователи") Тогда
			СписокРассылкиРабочий = Новый Массив;
			СписокРассылкиРабочий.Добавить(СписокРассылки);
		Иначе
			СписокРассылкиРабочий = СписокРассылки;
		КонецЕсли;
		Если ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
			ДопПараметрыРабочий = ПреобразоватьСтруктуруДопПараметровОповещения(ДопПараметры);
		Иначе
			ДопПараметрыРабочий = ДопПараметры;
		КонецЕсли;
		// Формирования параметров задания оповещения.
		ПараметрыЗадания = Новый Структура;
		ПараметрыЗадания.Вставить("ВидСобытия",			 ВидСобытия);	
		ПараметрыЗадания.Вставить("ШаблонОповещения",	 ШаблонОповещения);	
		ПараметрыЗадания.Вставить("ИсточникСсылка",		 ИсточникСсылка);	
		ПараметрыЗадания.Вставить("СписокРассылки",		 СписокРассылкиРабочий);	
		ПараметрыЗадания.Вставить("ДопПараметры",		 ДопПараметрыРабочий);	
		ПараметрыЗадания.Вставить("ЗадачаВход",			 ЗадачаВход);	
		ПараметрыЗадания.Вставить("ЭтапПроцессаВход",	 ЭтапПроцессаВход);
		
		Если ДопПараметры <> Неопределено тогда
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДопПараметры, "ТекущийЭтап") тогда
				ПараметрыЗадания.Вставить("ТекущийЭтап", ДопПараметры.ТекущийЭтап);
			КонецЕсли;
		КонецЕсли;
		
		СоздатьСобытиеОповещения(ПараметрыЗадания);
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошли ошибки при отправке оповещения для события %ВидСобытия% : %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСобытия%", Строка(ВидСобытия));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Создаёт напоминание
//
// Параметры:
//  ВидСобытия - вид события оповещения;
//  ИсточникСсылка - ссылка на ключевой объект напоминания;
//  СписокРассылки - список пользователей, которым будет отправлено напоминание;
Функция СоздатьНапоминание(ВидСобытия, ИсточникСсылка, СписокРассылки) Экспорт
	
	ВидСобытияНапоминания = Справочники.ВидыСобытийОповещений.НапоминаниеСогласованиеЭтапа;
	
	Если ВидСобытия = Справочники.ВидыСобытийОповещений.ПроцессОстановлен тогда
		УдалитьНапоминанияПоОтбору(Новый Структура("Источник, ВидСобытияОповещения", ИсточникСсылка, ВидСобытияНапоминания));
	Иначе
		ТекущийЭтап = МодульУправленияПроцессамиУХ.ПолучитьТекущийЭтапСогласования(ИсточникСсылка);
		
		Если ТекущийЭтап <> Неопределено тогда
			Если ТекущийЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования
				И ТекущийЭтап.СтатусСогласованияобъекта = Перечисления.СостоянияСогласования.НаУтверждении Тогда
				
				ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылка);
				СтруктураНастроек = ПолучитьНастройкиОповещенийПоВидуСобытияИТипуОбъекта(ВидСобытияНапоминания, ТипОбъектаОповещения);
				
				Если СтруктураНастроек.ОповещениеВключено тогда
					УдалитьНапоминанияПоОтбору(Новый Структура("Источник, ВидСобытияОповещения", ИсточникСсылка, ВидСобытияНапоминания));
					
					СтруктураНапоминание = СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроек, 
					ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"), ТекущаяДата(), ИсточникСсылка);
					
					СтруктураДопПараметры = Новый Структура;
					СтруктураДопПараметры.Вставить("НеСоздаватьОповещения", Истина);
					СтруктураДопПараметры.Вставить("ТекущийЭтап", ТекущийЭтап);
					
					СтруктураНапоминание.Вставить("ДопПараметры", СтруктураДопПараметры);
					
					ДобавитьНапоминаниеПользователяСЗадачей(СтруктураНапоминание);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает ссылку на элементы справочника Справочник БД/Документ БД,
// который соответствует принадлежности ссылки СсылкаВход.
Функция ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВходПараметр) Экспорт
	ТекущаяИнфБаза = Справочники.ТипыБазДанных.ТекущаяИБ;
	РезультатФункции = Справочники.ДокументыБД.ПустаяСсылка();
	Если ТипЗнч(ИсточникСсылкаВходПараметр) = Тип("Массив") И ИсточникСсылкаВходПараметр.Количество() > 0 тогда
		ИсточникСсылкаВход = ИсточникСсылкаВходПараметр[0];
	Иначе
		ИсточникСсылкаВход = ИсточникСсылкаВходПараметр;
	КонецЕсли;	
	Если ИсточникСсылкаВход = Неопределено Тогда
		РезультатФункции = Справочники.ДокументыБД.ПустаяСсылка();
	ИначеЕсли ТипЗнч(ИсточникСсылкаВход) = Тип("СправочникСсылка.СправочникиБД") ИЛИ ТипЗнч(ИсточникСсылкаВход) = Тип("СправочникСсылка.ДокументыБД") Тогда
		РезультатФункции = ИсточникСсылкаВход;
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ИсточникСсылкаВход)) Тогда
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию(ИсточникСсылкаВход.Метаданные().Имя,,,ТекущаяИнфБаза);
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ИсточникСсылкаВход)) Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию(ИсточникСсылкаВход.Метаданные().Имя,,,ТекущаяИнфБаза);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить принадлежность объекта %ИсследуемыйОбъект%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИсследуемыйОбъект%", Строка(ИсточникСсылкаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию(ИсточникСсылкаВход.Метаданные().Имя,,,ТекущаяИнфБаза);		
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу значений, содержащую шаблоны оповещений и получателей
// по объекту ИсточникСсылкаВход и событию ВидСобытияВход
Функция ПолучитьТаблицуШаблоновПоПараметрамРассылки(ВидСобытияВход, ИсточникСсылкаВход, ТипОбъектаОповещения)  Экспорт
	// Установка текста запроса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиОповещений.ШаблонОповещения КАК ШаблонОповещения,
	|	НастройкиОповещений.СписокРассылки КАК СписокРассылки,
	|	1 КАК Приоритет,
	|	НастройкиОповещений.ВнешняяПечатнаяФорма КАК ВнешняяПечатнаяФорма
	|ПОМЕСТИТЬ НастройкиОповещений
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ТипОбъектаОповещения = &ТипОбъектаОповещения
	|	И НастройкиОповещений.ВидОбъектаОповещения = &ВидОбъектаОповещения
	|	И НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.КатегорияОповещения = &КатегорияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиОповещений.ШаблонОповещения,
	|	НастройкиОповещений.СписокРассылки,
	|	2,
	|	НастройкиОповещений.ВнешняяПечатнаяФорма
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ТипОбъектаОповещения = &ТипОбъектаОповещения
	|	И НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.КатегорияОповещения = &КатегорияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|	И НастройкиОповещений.ВидОбъектаОповещения = НЕОПРЕДЕЛЕНО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НастройкиОповещений.ШаблонОповещения,
	|	НастройкиОповещений.СписокРассылки,
	|	3,
	|	НастройкиОповещений.ВнешняяПечатнаяФорма
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.КатегорияОповещения = &КатегорияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|	И НастройкиОповещений.ВидОбъектаОповещения = НЕОПРЕДЕЛЕНО
	|	И НастройкиОповещений.ТипОбъектаОповещения = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиОповещений.ШаблонОповещения КАК ШаблонОповещения,
	|	НастройкиОповещений.СписокРассылки КАК СписокРассылки,
	|	НастройкиОповещений.Приоритет КАК Приоритет,
	|	НастройкиОповещений.ВнешняяПечатнаяФорма КАК ВнешняяПечатнаяФорма
	|ИЗ
	|	НастройкиОповещений КАК НастройкиОповещений
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет";
	Запрос.УстановитьПараметр("ВидСобытияОповещения",ВидСобытияВход);			   
	Запрос.УстановитьПараметр("КатегорияОповещения",ВидСобытияВход.КатегорияСобытия);			   
	// Установка параметров запроса.
	КатегорияСобытия = ВидСобытияВход.КатегорияСобытия;
	ВидОбъектаОповещения = Неопределено;
	Если  КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияВыполненияПроцесса Тогда
		// События выполнения процесса (категория).		
		ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("ЭкземплярПроцесса",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);		
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ИсточникСсылкаВход.ШаблонПроцесса);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияСогласования Тогда
		// События согласования (категория).
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Если ЗаявкиНаОперацииКлиентСервер.ЭтоЗаявкаНаОперацию(ИсточникСсылкаВход) Тогда
			ВидОбъектаОповещения = ИсточникСсылкаВход.ВидОперацииУХ;
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипОбъектаОповещения",ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияДоговоров Тогда
		// События договоров (категория).
		ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("ДоговорыКонтрагентов",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияПроектов Тогда
		// События проектов (категория).
		ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("Проекты",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияПроцессаПодготовкиОтчетности Тогда
		// События подготовки отчетности (категория).
		ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("ЭтапыУниверсальныхПроцессов",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ИсточникСсылкаВход.Владелец);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.ОплатаЗаявок Тогда
		// Оплата заявок (категория).
		ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("ЗаявкаНаРасходованиеДенежныхСредств",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.АккредитацияПоставщиков Тогда
		// Аккредитация поставщиков (категория).
		ТекущаяИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
		Если ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбОткрытииДоступаВнешнемуПоставщику ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбОтказеВДоступеВнешнемуПоставщику Тогда
			ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("АнкетыПоставщиков", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		ИначеЕсли ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеВнешнемуПоставщику ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеАккредитованномуВнешнемуПоставщику Тогда
			ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("ОповещениеАккредитованныхПоставщиковОТоргах", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		ИначеЕсли ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбУтвержденииАккредитации ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОНеутвержденииАккредитации ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбОтправкеНаИсправлениеАккредитации Тогда
			ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("АккредитацияПоставщика", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		ИначеЕсли ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбУтвержденииКвалификации ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОНеутвержденииКвалификации ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбОтправкеНаИсправлениеКвалификации Тогда
			ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("КвалификацияПоставщика", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		ИначеЕсли ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОЛишенииАккредитации ИЛИ
			ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОЗапретеАккредитацииДоДаты Тогда
			ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("ЛишениеАккредитации", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		ИначеЕсли ВидСобытияВход = Справочники.ВидыСобытийОповещений.ОповещениеОбОтменеАккредитации Тогда
			ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("ОтзывАккредитации", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Иначе
			ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("АккредитацияПоставщика", , , ТекущаяИБ);
			Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		КонецЕсли;
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);	
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.Напоминания Тогда
		// Напоминания (категория).
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Если ВидСобытияВход = Справочники.ВидыСобытийОповещений.Напоминание_СтадияМероприятия Тогда
			Если ТипЗнч(ИсточникСсылкаВход) = Тип("ДокументСсылка.Мероприятие") Тогда
				ВидОбъектаОповещения = ИсточникСсылкаВход.ВидМероприятия;
			Иначе
				ВидОбъектаОповещения = Неопределено;
			КонецЕсли;
		Иначе
			ВидОбъектаОповещения = Неопределено;
		КонецЕсли;
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.Ошибки Тогда
		// Ошибки (категория).
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);	
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияЭтапаОбработка Тогда
		// События этапа Обработка (категория).
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияЭтапаРучнойПереход Тогда
		// События этапа Ручной переход (категория).
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);	
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияПоМероприятиям Тогда
		// События по мероприятиям (категория).
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияМонитораКлючевыхПоказателей Тогда
		// События монитора ключевых показателей (категория).
		ТипОбъектаОповещения = Справочники.СправочникиБД.НайтиПоНаименованию("ПанелиОтчетов",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияПоКорректировкамЛимитов Тогда
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения",ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения",ВидОбъектаОповещения);
	Иначе
		// Неизвестная категория.
		ТипОбъектаОповещения = ПолучитьТипОбъектаОповещенияПоСсылке(ИсточникСсылкаВход);
		Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаОповещения);
		Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаОповещения);
		ТекстОшибки = НСтр("ru = 'Неизвестная категория %Категория% у события %ВидСобытия%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Категория%", КатегорияСобытия);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидСобытия%", ВидСобытияВход);
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;
	// Выполнение запроса и вывод результата.
	Результат = Запрос.Выполнить();
	РезультатФункции = Результат.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает текст сообщения по событию ВидСобытияВход и ИсточникСсылкаВход. Когда категория не задана -
// будет вычислена из Вида события. Сначала используется шаблон ШаблонОповещения, после ШаблонПоУмолчанию,
// в случае отсутствия обоих - берется шаблон из кода.
Функция ПолучитьТекстСообщенияПоШаблону(ВидСобытияВход, ИсточникСсылкаВход, КатегорияСобытияВход = Неопределено, ШаблонОповещения = Неопределено, ШаблонПоУмолчанию = Неопределено, ДопПараметрыВход = Неопределено) Экспорт
	// Установка необязательных параметров.
	Если КатегорияСобытияВход = Неопределено Тогда
		КатегорияСобытия = ВидСобытияВход.КатегорияСобытия;
	Иначе
		КатегорияСобытия = КатегорияСобытияВход;
	КонецЕсли;
	// Получение текста шаблона.
	Если Не ЗначениеЗаполнено(ШаблонОповещения) Тогда
		Если ШаблонПоУмолчанию = Неопределено Тогда
			ТекстСообщения = ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияСобытия, ВидСобытияВход, ИсточникСсылкаВход);
		Иначе	
			ТекстСообщения = ШаблонПоУмолчанию;
		КонецЕсли;
	Иначе	 
		ТекстСообщения = ШаблонОповещения.Шаблон.Получить();
	КонецЕсли;	
	// Заполнение шаблона и вывод результата.
	ТекстСообщения = ПодготовитьТекстОповещенияПоШаблону(ТекстСообщения, ДопПараметрыВход, ИсточникСсылкаВход);
	Возврат ТекстСообщения;
КонецФункции

// Возвращает текст сообщения, в которое добавлена информация 
// о замещении пользователя ЗамещаемыйВход.
Функция ДобавитьТекстЗамещения(СообщениеВход, ЗамещаемыйВход) Экспорт
	РезультатФункции = СообщениеВход;
	ТекстЗамещения = НСтр("ru = 'Заместителю пользователя %Замещаемый%:<HR>'");
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗамещаемыйВход);
	ПредставлениеЗамещаемого = "<a href='" + НавигационнаяСсылка + "'>" + Строка(ЗамещаемыйВход) + "</a>";
	ТекстЗамещения = СтрЗаменить(ТекстЗамещения, "%Замещаемый%", Строка(ПредставлениеЗамещаемого));
	РезультатФункции = ТекстЗамещения + СообщениеВход;
	Возврат РезультатФункции;
КонецФункции

// Определяет, получил ли пользователь оповещение по данной задаче ранее.
Функция ПользовательПолучилОповещениеОЗадаче(ПолучательВход, ЗадачаВход, ВидСобытияВход)
	РезультатФункции = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ОповещенияПользователей.Пользователь,
		|	ОповещенияПользователей.ВидОповещения,
		|	ОповещенияПользователей.Задача
		|ИЗ
		|	РегистрСведений.ОповещенияПользователей КАК ОповещенияПользователей
		|ГДЕ
		|	ОповещенияПользователей.Пользователь = &Пользователь
		|	И ОповещенияПользователей.ВидОповещения = &ВидОповещения
		|	И ОповещенияПользователей.Задача = &Задача";
	Запрос.УстановитьПараметр("ВидОповещения", ВидСобытияВход);
	Запрос.УстановитьПараметр("Задача", ЗадачаВход);
	Запрос.УстановитьПараметр("Пользователь", ПолучательВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Добавляет в таблицу дополнительных параметров ТаблицаДопПараметров значение ЗначениеПараметраВход
// параметра с кодом КодПараметраВход. Когда ТаблицаДопПараметров - неопределено, формирует новую.
Процедура ДобавитьДопПараметрВТаблицу(ТаблицаДопПараметров, КодПараметраВход, ЗначениеПараметраВход) Экспорт
	Если ТипЗнч(ТаблицаДопПараметров) = Тип("ТаблицаЗначений") Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("КодПараметра", КодПараметраВход);
		НайденныеСтроки = ТаблицаДопПараметров.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекНайденныеСтроки.КодПараметра			 = КодПараметраВход;
				ТекНайденныеСтроки.ЗначениеПоУмолчанию	 = ЗначениеПараметраВход;
			КонецЦикла;
		Иначе	
			НоваяСтрокаДопПараметры = ТаблицаДопПараметров.Добавить();
			НоваяСтрокаДопПараметры.КодПараметра		 = КодПараметраВход;
			НоваяСтрокаДопПараметры.ЗначениеПоУмолчанию	 = ЗначениеПараметраВход;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТаблицаДопПараметров) = Тип("Неопределено") Тогда
		ТаблицаДопПараметров = Новый ТаблицаЗначений;
		ТаблицаДопПараметров.Колонки.Добавить("КодПараметра");
		ТаблицаДопПараметров.Колонки.Добавить("ЗначениеПоУмолчанию");
		НоваяСтрокаДопПараметры = ТаблицаДопПараметров.Добавить();
		НоваяСтрокаДопПараметры.КодПараметра		 = КодПараметраВход;
		НоваяСтрокаДопПараметры.ЗначениеПоУмолчанию	 = ЗначениеПараметраВход;
	Иначе
		ТекстСообщения = НСтр("ru = 'Ошибка при добавлении дополнительного параметра %КодПараметра%: неизвестный вариант таблицы дополнительных параметров %ТаблицаДопПараметров%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаДопПараметров%", Строка(ТаблицаДопПараметров));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодПараметра%", Строка(КодПараметраВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

Процедура ОповеститьПользователейВФоне(Параметры, АдресХранилища, АдресХранилищаДополнительный) Экспорт
	// Получение параметров.
	ВидСобытия			 = Параметры.ВидСобытия;
	ШаблонОповещения	 = Параметры.ШаблонОповещения;
	ИсточникСсылка		 = Параметры.ИсточникСсылка;
	СписокРассылки		 = Параметры.СписокРассылки;
	ДопПараметры		 = Параметры.ДопПараметры;
	ЗадачаВход			 = Параметры.ЗадачаВход;
	ЭтапПроцессаВход	 = Параметры.ЭтапПроцессаВход;
	КатегорияСобытия	 = ВидСобытия.КатегорияСобытия;
	Вложение = Неопределено;
	ТипОбъектаОповещения = Неопределено;
	// Получение и обход таблицы шаблонов.
	Выгрузка = ПолучитьТаблицуШаблоновПоПараметрамРассылки(ВидСобытия, ИсточникСсылка, ТипОбъектаОповещения);
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		// Добавление дополнительных параметров для Экземпляра процесса.
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.ЭкземплярПроцесса")  Тогда
			ДопПараметры = ИсточникСсылка.ПараметрыПроцесса.Выгрузить();
		КонецЕсли;	
		// Получение списка оповещаемых.
		СписокОповещаемых = ПолучитьОповещаемыхПоУмолчанию(КатегорияСобытия,ВидСобытия,ИсточникСсылка,СписокРассылки);
		ТаблицаОповещаемых = ПолучитьОповещаемыхПоСпискуРассылки(ТекВыгрузка.СписокРассылки,ИсточникСсылка,ТипОбъектаОповещения,СписокОповещаемых);
		// Формирование вложения в PDF.
		Если ЗначениеЗаполнено(ЗадачаВход) Тогда
			Если ТипЗнч(ЗадачаВход.СвязанныйОбъект) = Тип("ДокументСсылка.РакурсДанных") Тогда
				  Вложение = СводнаяТаблицаУх.СохранитьДанныеОбластиВPDF(ЗадачаВход.СвязанныйОбъект)
			КонецЕсли;
		КонецЕсли;
		// Обход списка оповещаемых и отправка оповещений.
		Для Каждого Пользователь Из ТаблицаОповещаемых Цикл
			// Проверим получение оповещения по данной задаче пользователем ранее.
			ЭтоНапоминание = (КатегорияСобытия = Справочники.КатегорииСобытийОповещений.Напоминания);
			Если ЗначениеЗаполнено(ЗадачаВход) И ЗначениеЗаполнено(ВидСобытия) И (НЕ ЭтоНапоминание) Тогда
				Если ПользовательПолучилОповещениеОЗадаче(Пользователь.Получатель, ЗадачаВход, ВидСобытия) Тогда
					Продолжить;				// Не требуется отправка такого оповещения.
				Иначе
					// Выполняем далее.
				КонецЕсли;
			Иначе
				// Не требуется проверять получение оповещения. Выполняем далее.
			КонецЕсли;
			// Добавим информацию о получателе.
			ДобавитьДопПараметрВТаблицу(ДопПараметры, "ПолучательОповещения", Пользователь.Получатель);
			// Получение текста сообщения.
			ТекстСообщения = ПолучитьТекстСообщенияПоШаблону(ВидСобытия, ИсточникСсылка, КатегорияСобытия, ТекВыгрузка.ШаблонОповещения, ШаблонОповещения, ДопПараметры);
			ИсходноеСообщение = ТекстСообщения;
			// Добавим текст замещаемых.
			Если ЗначениеЗаполнено(Пользователь.Замещаемый) Тогда
				ТекстСообщенияСистемы	 = ДобавитьТекстЗамещения(ИсходноеСообщение, Пользователь.Замещаемый);
				ТекстПочтовогоСообщения	 = ДобавитьТекстЗамещения(ИсходноеСообщение, Пользователь.Замещаемый);
			Иначе
				ТекстСообщенияСистемы	 = ИсходноеСообщение;
				ТекстПочтовогоСообщения	 = ИсходноеСообщение;
			КонецЕсли;
			// Добавим текст для вида события.
			Если ВидСобытия = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование Тогда
				ТекстСообщенияСистемы	 = МодульРегламентныхЗаданийУХ.ДобавитьТекстСогласованияПоЗадаче(ТекстСообщенияСистемы, ЗадачаВход, Пользователь.Получатель, Ложь, ЭтапПроцессаВход);
				ТекстПочтовогоСообщения	 = МодульРегламентныхЗаданийУХ.ДобавитьТекстСогласованияПоЗадаче(ТекстПочтовогоСообщения, ЗадачаВход, Пользователь.Получатель, Истина, ЭтапПроцессаВход);
			ИначеЕсли ВидСобытия = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа Тогда				
				ТекстСообщенияСистемы	 = МодульРегламентныхЗаданийУХ.ДобавитьТекстВыбораЭтапаПоЗадаче(ТекстСообщенияСистемы, ЗадачаВход, Пользователь.Получатель, Ложь, ЭтапПроцессаВход);
				ТекстПочтовогоСообщения	 = МодульРегламентныхЗаданийУХ.ДобавитьТекстВыбораЭтапаПоЗадаче(ТекстПочтовогоСообщения, ЗадачаВход, Пользователь.Получатель, Истина, ЭтапПроцессаВход);
			Иначе
				ТекстСообщенияСистемы	 = ТекстСообщенияСистемы;
				ТекстПочтовогоСообщения	 = "";
			КонецЕсли;
			// Создадим оповещение по сформированным текстам.
			СоздатьОповещениеПользователю(КатегорияСобытия, ВидСобытия, Пользователь.Получатель, ТекстСообщенияСистемы, ЗадачаВход, ТекстПочтовогоСообщения, Вложение);
		КонецЦикла;	
	КонецЦикла;
КонецПроцедуры	

// Возвращает текст оповещения по настройкам шаблонов для события ВидСобытияВход по
// объекту ИсточникСсылкаВход.
Функция ПолучитьТекстПоВидуСобытияПоШаблону(ВидСобытияВход, ИсточникСсылкаВход, ДопПараметрыВход = Неопределено) Экспорт
	ТипОбъектаОповещения = Неопределено;
	КатегорияСобытия = ВидСобытияВход.КатегорияСобытия;
	Выгрузка = ПолучитьТаблицуШаблоновПоПараметрамРассылки(ВидСобытияВход, ИсточникСсылкаВход, ТипОбъектаОповещения);
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		ТекстСообщения = ПолучитьТекстСообщенияПоШаблону(ВидСобытияВход, ИсточникСсылкаВход, КатегорияСобытия, ТекВыгрузка.ШаблонОповещения, , ДопПараметрыВход);
	КонецЦикла;
	Возврат ТекстСообщения;
КонецФункции

// Преобразует структуру дополнительных параметров оповещения в таблицу для передачи в
// программный интерфейс заполнения шаблона.
Функция ПреобразоватьСтруктуруДопПараметровОповещения(СтруктураВход) Экспорт
	// Формирование таблицы.
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("КодПараметра");
	РезультатФункции.Колонки.Добавить("ЗначениеПоУмолчанию");
	// Заполнение строк значениями структуры.
	Для Каждого ТекСтруктураВход Из СтруктураВход Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		НоваяСтрока.КодПараметра		 = ТекСтруктураВход.Ключ;
		НоваяСтрока.ЗначениеПоУмолчанию	 = ТекСтруктураВход.Значение;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает пустое значение по данным справочника (Справочник БД, Документ БД).
Функция ПолучитьПустоеЗначениеСправочникаБД(СправочникБДВход) Экспорт
	РезультатФункции = Неопределено;
	Если ТипЗнч(СправочникБДВход) = Тип("СправочникСсылка.СправочникиБД") Тогда
		Если Метаданные.Справочники.Найти(СправочникБДВход.Наименование) <> неопределено тогда
			РезультатФункции = Справочники[СправочникБДВход.Наименование].ПустаяСсылка();
		КонецЕсли;
	ИначеЕсли ТипЗнч(СправочникБДВход) = Тип("СправочникСсылка.ДокументыБД") Тогда
		Если Метаданные.Документы.Найти(СправочникБДВход.Наименование) <> неопределено тогда
			РезультатФункции = Документы[СправочникБДВход.Наименование].ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции; 
КонецФункции

// Возвращает структуру, содержащую данные поставляемого макета по виду события 
// ВидСобытияВход и категории КатегорияВход.
Функция ПолучитьПоставляемыеДанныеПоВидуСобытия(ВидСобытияВход, КатегорияВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ВидСобытия",						 Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	РезультатФункции.Вставить("КатегорияСобытия",				 Справочники.КатегорииСобытийОповещений.ПустаяСсылка());
	РезультатФункции.Вставить("ШаблонОповещенияПоУмолчанию",	 "");
	РезультатФункции.Вставить("ДополнительныеПараметры",		 "");
	РезультатФункции.Вставить("Описание",						 "");
	Если ЗначениеЗаполнено(ВидСобытияВход) ИЛИ ЗначениеЗаполнено(КатегорияВход) Тогда
		ВидСобытияСтрока = СокрЛП(ВидСобытияВход.ИмяПредопределенныхДанных);
		Если КатегорияВход <> Неопределено Тогда
			КатегорияСобытияСтрока = СокрЛП(КатегорияВход.ИмяПредопределенныхДанных);
		Иначе
			КатегорияСобытияСтрока = "";
		КонецЕсли;
		// Получение данных из макета по виду события явно.
		СобытиеНайдено = Ложь;
		МакетНастройки = Справочники.ВидыСобытийОповещений.ПолучитьМакет("ПоставляемыеНастройкиВидовСобытий_ru");
		Если ВидСобытияСтрока <> "" Тогда
			Для Счетчик = 2 По МакетНастройки.ВысотаТаблицы Цикл
				ОбластьВидСобытия	 = МакетНастройки.Область(Счетчик, 1);
				ТекстВидСобытия		 = ОбластьВидСобытия.Текст;
				Если СокрЛП(ТекстВидСобытия) = ВидСобытияСтрока Тогда	// Значение найдено.
					// Считаем данные из таблицы.
					ОбластьКатегорияСобытия	 = МакетНастройки.Область(Счетчик, 2);
					ТекстКатегорияСобытия	 = ОбластьКатегорияСобытия.Текст;
					ОбластьШаблонОповещения	 = МакетНастройки.Область(Счетчик, 3);
					ТекстШаблонОповещения	 = ОбластьШаблонОповещения.Текст;
					ОбластьДополнительныеПараметры	 = МакетНастройки.Область(Счетчик, 4);
					ТекстДополнительныеПараметры	 = ОбластьДополнительныеПараметры.Текст;
					ОбластьОписание	 = МакетНастройки.Область(Счетчик, 5);
					ТекстОписание	 = ОбластьОписание.Текст;
					// Преобразуем и заполним в структуру полученные значения.
					КатегорияСсылка = Справочники.КатегорииСобытийОповещений.ПустаяСсылка();
					Если СокрЛП(ТекстКатегорияСобытия) <> "" Тогда
						КатегорияСсылка = Справочники.КатегорииСобытийОповещений[ТекстКатегорияСобытия];
					Иначе
						КатегорияСсылка = Справочники.КатегорииСобытийОповещений.ПустаяСсылка();
					КонецЕсли;
					РезультатФункции.Вставить("ВидСобытия",						 ВидСобытияВход);
					РезультатФункции.Вставить("КатегорияСобытия",				 КатегорияСсылка);
					РезультатФункции.Вставить("ШаблонОповещенияПоУмолчанию",	 ТекстШаблонОповещения);
					РезультатФункции.Вставить("ДополнительныеПараметры",		 ТекстДополнительныеПараметры);
					РезультатФункции.Вставить("Описание",						 ТекстОписание);
					СобытиеНайдено = Истина;
					Прервать;				// Значение найдено, структуру заполнена. Возвращаем итоговое значение.
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;		
		Иначе
			// Не удалось получить имя вида события. Вернём пустую структуру.
		КонецЕсли;
		// Попытаемся получить настройки для категории, если не удалось получить явно по виду события.
		Если (НЕ СобытиеНайдено) ИЛИ (РезультатФункции.ШаблонОповещенияПоУмолчанию = "") Тогда
			Для Счетчик = 2 По МакетНастройки.ВысотаТаблицы Цикл
				ОбластьВидСобытия	 = МакетНастройки.Область(Счетчик, 1);
				ТекстВидСобытия		 = ОбластьВидСобытия.Текст;
				ОбластьКатегорияСобытия	 = МакетНастройки.Область(Счетчик, 2);
				ТекстКатегорияСобытия	 = ОбластьКатегорияСобытия.Текст;
				Если (СокрЛП(ТекстВидСобытия) = "-") И (КатегорияСобытияСтрока <> "") И (СокрЛП(ТекстКатегорияСобытия) = КатегорияСобытияСтрока) Тогда		// Текст категории по умолчанию.
					// Считаем данные из таблицы.
					ОбластьШаблонОповещения	 = МакетНастройки.Область(Счетчик, 3);
					ТекстШаблонОповещения	 = ОбластьШаблонОповещения.Текст;
					ОбластьДополнительныеПараметры	 = МакетНастройки.Область(Счетчик, 4);
					ТекстДополнительныеПараметры	 = ОбластьДополнительныеПараметры.Текст;
					ОбластьОписание	 = МакетНастройки.Область(Счетчик, 5);
					ТекстОписание	 = ОбластьОписание.Текст;
					// Заполним в структуру полученные значения по умолчанию для категории.
					РезультатФункции.Вставить("ВидСобытия",						 ВидСобытияВход);
					РезультатФункции.Вставить("КатегорияСобытия",				 КатегорияВход);
					РезультатФункции.Вставить("ШаблонОповещенияПоУмолчанию",	 ТекстШаблонОповещения);
					РезультатФункции.Вставить("ДополнительныеПараметры",		 ТекстДополнительныеПараметры);
					РезультатФункции.Вставить("Описание",						 ТекстОписание);
					Прервать;					// Значение найдено, структуру заполнена. Возвращаем итоговое значение.
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Событие найдено, структура заполнена. Дополнительных действий не требуется.
		КонецЕсли;
	Иначе
		// Переданы пустые данные. Вернём пустую структуру.
	КонецЕсли; 
	Возврат РезультатФункции;
КонецФункции	// ПолучитьПоставляемыеДанныеПоВидуСобытия()

Функция ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияСобытия, ВидСобытия, ИсточникСсылка) Экспорт
	ТекстСобытия = "";
	СтруктураНастроек = ПолучитьПоставляемыеДанныеПоВидуСобытия(ВидСобытия, КатегорияСобытия);
	ТекстСобытия = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроек, "ШаблонОповещенияПоУмолчанию", "");
	Возврат ТекстСобытия;
КонецФункции

Функция ПолучитьОповещаемыхПоУмолчанию(КатегорияСобытия,ВидСобытия,ИсточникСсылка,ИсходныйСписокРассылки)
	
	Получатели = Новый Массив;
	Если НЕ ИсходныйСписокРассылки = Неопределено Тогда 
		Для Каждого Получатель Из ИсходныйСписокРассылки Цикл
			Получатели.Добавить(Получатель);		
		КонецЦикла;
	КонецЕсли;
	Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		Исполнитель = УправлениеОтчетамиУХ.ПолучитьОтветственногоЗаТипОбъекта(ИсточникСсылка,,,"Исполнитель");		// В настраиваемом отчете вместо реквизита Ответственный используем Исполнителя из регламента
	Иначе
		Если ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникСсылка, "Ответственный") Тогда
			Исполнитель = ИсточникСсылка.Ответственный;
		ИначеЕсли ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникСсылка, "Автор") Тогда
			Исполнитель = ИсточникСсылка.Автор;
		Иначе
			Исполнитель = Справочники.Пользователи.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияВыполненияПроцесса Тогда
		
		 Получатели.Добавить(ИсточникСсылка.ШаблонПроцесса.АдминистраторПроцесса);
		 
	ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияСогласования Тогда	 
		
		Если ВидСобытия <> Справочники.ВидыСобытийОповещений.ТребуетсяСогласование Тогда
			Получатели.Добавить(Исполнитель); 
		Иначе
			// Данное оповещение не требует наличие ответственного.
		КонецЕсли;
		
	 ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияПроцессаПодготовкиОтчетности Тогда
		 
		 ВернутьСписокОповещаемыхПоЭтапуПодготовкиОтчетности(ИсточникСсылка,ИсточникСсылка.Владелец.СвязанныйРегламент);
		 
	 ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияПроектов Тогда	 
		
		 Получатели.Добавить(Исполнитель); 
		 
	 ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.СобытияДоговоров Тогда	 
		
		 Получатели.Добавить(Исполнитель); 
		
	 ИначеЕсли КатегорияСобытия = Справочники.КатегорииСобытийОповещений.ОплатаЗаявок Тогда	 
		
		 Получатели.Добавить(Исполнитель); 
		 
	 КонецЕсли;	
	 
	Возврат Получатели;
	 	 
КонецФункции

// Возвращает копию ТаблицаВход, дополненную заместителями 
// пользователей, а также колонкой с замещаемыми пользователями.
Функция ДобавитьЗаместителейПользователей(ТаблицаВход)
	РезультатФункции = ТаблицаВход.Скопировать();
	Если РезультатФункции.Колонки.Найти("Замещаемый") = Неопределено Тогда
		РезультатФункции.Колонки.Добавить("Замещаемый");
	Иначе
		// Колонка Замещаемый уже есть в таблице. Не добавляем.
	КонецЕсли;
	МассивПолучатели = ТаблицаВход.ВыгрузитьКолонку("Получатель");
	МассивРезультат = Новый Массив;
	Для Каждого ТекМассивПолучатели Из МассивПолучатели Цикл
		МодульУправленияПроцессамиУХ.ПолучитьЗаместителейСЗамещаемыми(ТекМассивПолучатели, МассивРезультат);
		Для Каждого ТекМассивРезультат Из МассивРезультат Цикл
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.Получатель = ТекМассивРезультат.Заместитель;
			НоваяСтрока.Замещаемый = ТекМассивРезультат.Замещаемый;
		КонецЦикла;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьОповещаемыхПоСпискуРассылки(СписокРассылки,ИсточникСсылка,ТипОбъектаОповещения,ИсходныйСписокРассылки)
	
	ТзПолучатели = Новый ТаблицаЗначений;
	ТзПолучатели.Колонки.Добавить("Получатель");
	Если НЕ ИсходныйСписокРассылки = Неопределено Тогда 
		Для Каждого Получатель Из ИсходныйСписокРассылки Цикл
			стрПолучатель =ТзПолучатели.Добавить();
			стрПолучатель.Получатель = Получатель;	
		КонецЦикла;
	КонецЕсли;
	
	Проект = Справочники.Проекты.ПустаяСсылка();
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(СписокРассылки) Тогда
		СписокРассылкиМассив = ЗначениеИзСтрокиВнутр(СписокРассылки);
	Иначе
		СписокРассылкиМассив = Новый Массив;	
	КонецЕсли;
	
	Для Каждого Стр Из СписокРассылкиМассив Цикл
		Если Стр.ТипОповещаемого = Перечисления.РежимыПерсонификацииОтветственных.Пользователь Тогда
			
			стрПолучатель =ТзПолучатели.Добавить();
			стрПолучатель.Получатель = Стр.Пользователь;
			
		ИначеЕсли Стр.ТипОповещаемого = Перечисления.РежимыПерсонификацииОтветственных.Роль Тогда	
			
			Если ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.ДокументыБД") ИЛИ ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.СправочникиБД") Тогда
				Если ЗначениеЗАполнено(ТипОбъектаОповещения.РеквизитРазделенияПоПроектам) Тогда
					 Проект =  ИсточникСсылка[ТипОбъектаОповещения.РеквизитРазделенияПоПроектам];
				КонецЕсли;	
				Если ЗначениеЗАполнено(ТипОбъектаОповещения.РеквизитРазделенияПоОрганизациям) Тогда
					 Организация =  ИсточникСсылка[ТипОбъектаОповещения.РеквизитРазделенияПоОрганизациям];
				КонецЕсли;
				
			КонецЕсли;
			
			ПолучателиПоРоли = МодульУправленияПроцессамиУХ.ПолучитьПользователейПоРоли(Стр.Пользователь,Организация,Проект);
			
			Для Каждого Получатель Из ПолучателиПоРоли Цикл
				стрПолучатель =ТзПолучатели.Добавить();
				стрПолучатель.Получатель = Получатель.Пользователь;	
			КонецЦикла;
	
		ИначеЕсли Стр.ТипОповещаемого = Перечисления.РежимыПерсонификацииОтветственных.ЗначениеРеквизита Тогда	
			
			Попытка
				Получатель = Вычислить("ИсточникСсылка."+Стр.Пользователь);
				стрПолучатель =ТзПолучатели.Добавить();
				стрПолучатель.Получатель = Получатель;	
			Исключение	
				
			КонецПопытки;
			
		КонецЕсли;	
		
	КонецЦикла;	
	ТзПолучатели = ДобавитьЗаместителейПользователей(ТзПолучатели);
	ТзПолучатели.Свернуть("Получатель, Замещаемый");
	
	Возврат ТзПолучатели;
	 
КонецФункции

Процедура ОповеститьПользователейПоНаборуЗаписей(НаборЗаписей) Экспорт
	
	Для Каждого Стр Из НаборЗаписей Цикл
		
		ВидСобытия = Неопределено;
		СоответствиеСостоянийОбъекта = МодульУправленияПроцессамиУХ.ПолучитьСоответствиеСостоянийОбъекта(Стр.Объект);
		
		Если Стр.СостояниеОбъекта = СоответствиеСостоянийОбъекта["Черновик"] Тогда
			ВидСобытия = Справочники.ВидыСобытийОповещений.ОбъектОтклонен;
		ИначеЕсли  Стр.СостояниеОбъекта = СоответствиеСостоянийОбъекта["НаУтверждении"] Тогда
			ВидСобытия = Справочники.ВидыСобытийОповещений.ОбъектНаУтверждении;
		ИначеЕсли  Стр.СостояниеОбъекта = СоответствиеСостоянийОбъекта["Отклонен"]  Тогда	
			ВидСобытия = Справочники.ВидыСобытийОповещений.ОбъектОтклонен;
		ИначеЕсли  Стр.СостояниеОбъекта = СоответствиеСостоянийОбъекта["Утвержден"]  Тогда	
			ВидСобытия = Справочники.ВидыСобытийОповещений.ОбъектУтвержден;
		Иначе	
			Если  Стр.СостояниеОбъекта = Перечисления.СостоянияДоговоров.Подписан Тогда
				ВидСобытия = Справочники.ВидыСобытийОповещений.ДоговорПодписан;
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияДоговоров.ПереданНаПодписьКонтрагенту Тогда		  
				ВидСобытия = Справочники.ВидыСобытийОповещений.ДоговорПереданНаПодписьКонтрагенту;
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияДоговоров.Расторгнут Тогда		  
				ВидСобытия = Справочники.ВидыСобытийОповещений.ДоговорРасторгнут;	  
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияДоговоров.Приостановлен Тогда		  
				ВидСобытия = Справочники.ВидыСобытийОповещений.ДоговорПриостановлен;	  	
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияПроектов.ВключенВПрограмму Тогда		  
				ВидСобытия = Справочники.ВидыСобытийОповещений.ПроектВключенВПрограмму;
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияПроектов.Приостановлен Тогда		  
				ВидСобытия = Справочники.ВидыСобытийОповещений.ПроектПриостановлен;	  
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияПроектов.Завершен Тогда		  
				ВидСобытия = Справочники.ВидыСобытийОповещений.ПроектЗавершен;
			ИначеЕсли Стр.СостояниеОбъекта = Перечисления.СостоянияДоговоров.Возвращен Тогда    
		 		ВидСобытия = Справочники.ВидыСобытийОповещений.ДоговорОтправленНаУточнение;				
			КонецЕсли;	
	
		КонецЕсли;	
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("Автор", Стр.Автор);
		ДопПараметры.Вставить("СостояниеОбъекта", Стр.СостояниеОбъекта);
		Если ВидСобытия <> Неопределено Тогда 
			ОповеститьПользователей(ВидСобытия, , Стр.Объект, , ДопПараметры);
		КонецЕсли;
		
	Конеццикла;	
	
КонецПроцедуры	

Функция ВернутьСписокОповещаемыхПоЭтапуПодготовкиОтчетности(Этап,ВерсияОрганизационнойСтруктуры,Организация=Неопределено) Экспорт  
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса,
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента
	|ПОМЕСТИТЬ ВТ_ОрганизацииЭтапов
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
	|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияОрганизационнойСтруктуры
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = &Этап
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница В(&Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РегистрМатрицыПолномочий.ШаблонДокументаБД,
	|	РегистрМатрицыПолномочий.ДокументБД,
	|	РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности,
	|	РегистрМатрицыПолномочий.Организация,
	|	РегистрМатрицыПолномочий.Проект,
	|	РегистрМатрицыПолномочий.Исполняющий,
	|	РегистрМатрицыПолномочий.Исполняющий_Организация,
	|	РегистрМатрицыПолномочий.Согласование,
	|	РегистрМатрицыПолномочий.Согласование_Организация
	|ПОМЕСТИТЬ ВТ_Исполнители
	|ИЗ
	|	ВТ_ОрганизацииЭтапов КАК ВТ_ОрганизацииЭтапов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|		ПО ВТ_ОрганизацииЭтапов.ВерсияРегламентаПодготовкиОтчетности = РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности
	|			И ВТ_ОрганизацииЭтапов.ОрганизационнаяЕдиница = РегистрМатрицыПолномочий.Организация
	|			И ВТ_ОрганизацииЭтапов.ШаблонДокумента = РегистрМатрицыПолномочий.ШаблонДокументаБД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Исполнители.ШаблонДокументаБД,
	|	ВТ_Исполнители.ВерсияРегламентаПодготовкиОтчетности,
	|	ВТ_Исполнители.Организация,
	|	ВТ_Исполнители.Исполняющий
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|ГДЕ
	|	ВТ_Исполнители.Исполняющий ССЫЛКА Справочник.Пользователи
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_Исполнители.ШаблонДокументаБД,
	|	ВТ_Исполнители.ВерсияРегламентаПодготовкиОтчетности,
	|	ВТ_Исполнители.Организация,
	|	ОтветственныеОрганизаций.Пользователь
	|ИЗ
	|	ВТ_Исполнители КАК ВТ_Исполнители
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|		ПО ВТ_Исполнители.Исполняющий = ОтветственныеОрганизаций.Роль
	|			И ВТ_Исполнители.Организация = ОтветственныеОрганизаций.Организация
	|ГДЕ
	|	ВТ_Исполнители.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ВидыОтчетов.ПустаяСсылка),
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.Ответственный
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияОрганизационнойСтруктуры
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница В(&Организация)
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = &Этап";
	
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", ВерсияОрганизационнойСтруктуры);
	Запрос.УстановитьПараметр("Организация",Организация);
    Запрос.УстановитьПараметр("Этап",Этап);
	
	РезультатЗапроса  = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивИсполнителей = Выгрузка.ВыгрузитьКолонку("Исполняющий");
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИсполнителей); 
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
				
КонецФункции

// Возвращает ограничение типа для выбора вида объекта оповещения по категории
// КатегорияВход, событию ВидСобытияВход и типу объекта ТипОбъектаВход.
Функция ПолучитьОграниченияТипаДляВидаОбъектаОповещения(КатегорияВход, ВидСобытияВход, ТипОбъектаВход) Экспорт
	РезультатФункции = Новый ОписаниеТипов(("Неопределено")); 
	Если КатегорияВход = Справочники.КатегорииСобытийОповещений.СобытияВыполненияПроцесса Тогда
		РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.ШаблоныУниверсальныхПроцессов")); 
	ИначеЕсли КатегорияВход = Справочники.КатегорииСобытийОповещений.СобытияСогласования Тогда	
		Если ТипОбъектаВход = Справочники.ДокументыБД.НайтиПоНаименованию("ЗаявкаНаРасходованиеДенежныхСредств",,,Справочники.ТипыБазДанных.ТекущаяИБ) Тогда
			РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.ВидыОперацийУХ")); 
		ИначеЕсли ТипОбъектаВход = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ) Тогда
			РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.ВидыОтчетов")); 
		Иначе	
			РезультатФункции = Новый ОписаниеТипов(("Неопределено"));
		КонецЕсли;	
	ИначеЕсли КатегорияВход = Справочники.КатегорииСобытийОповещений.СобытияДоговоров Тогда	
		РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.ДоговорыКонтрагентов")); 
	ИначеЕсли КатегорияВход = Справочники.КатегорииСобытийОповещений.СобытияПроектов Тогда	
		РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.Проекты")); 
	ИначеЕсли КатегорияВход = Справочники.КатегорииСобытийОповещений.ОплатаЗаявок Тогда	
		РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.ВидыОперацийУХ")); 
	ИначеЕсли КатегорияВход = Справочники.КатегорииСобытийОповещений.СобытияПроцессаПодготовкиОтчетности Тогда	
		РезультатФункции = Новый ОписаниеТипов(("СправочникСсылка.ШаблоныУниверсальныхПроцессов")); 
	ИначеЕсли КатегорияВход = Справочники.КатегорииСобытийОповещений.Напоминания Тогда	
		Если ВидСобытияВход = Справочники.ВидыСобытийОповещений.Напоминание_СтадияМероприятия Тогда
			РезультатФункции = Новый ОписаниеТипов(("ПеречислениеСсылка.ВидыМероприятий")); 
		Иначе
			РезультатФункции = Новый ОписаниеТипов(("Неопределено")); 
		КонецЕсли;	
	Иначе
		РезультатФункции = Новый ОписаниеТипов(("Неопределено")); 
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

//Функция получает значение параметра оповещения по полному имени
//
Функция ПолучитьЗначениеПараметраПоПолномуИмени(ОбъектСсылкаВход, ИмяПараметра)
	
	МассивПараметров = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ИмяПараметра, ".");
	КоличествоВложений = МассивПараметров.Количество();
	
	ВложеннаяСсылка = ОбъектСсылкаВход;
	ИмяСсылкиВход = "ОбъектСсылкаВход";
	ЗначениеПараметра = Неопределено;
	ПредставлениеЗначения = "";
	
	Для Инд = 0 По КоличествоВложений - 1 Цикл
		ПараметрСтрокой = МассивПараметров[Инд];
		
		Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ПараметрСтрокой) И СтрНайти(ПредставлениеЗначения, "ТабличнаяЧасть") > 0 тогда
			ИндексСтрокиТЧ = Число(ПараметрСтрокой);						
			ТабличнаяЧасть = Вычислить(ИмяСсылкиВход);
			
			Если ТабличнаяЧасть.Количество() > ИндексСтрокиТЧ тогда
				ЗначениеПараметра = ТабличнаяЧасть[ИндексСтрокиТЧ];
				ПредставлениеЗначения = "";
				
				ВложеннаяСсылка = ЗначениеПараметра;
			Иначе
				ЗначениеПараметра = Неопределено;
				ПредставлениеЗначения = "";
				Прервать;
			КонецЕсли;
		ИначеЕсли СтрНайти(ПредставлениеЗначения, "ТабличнаяЧасть") > 0 тогда						
			ТабличнаяЧасть = Вычислить(ИмяСсылкиВход);
			
			Если ТабличнаяЧасть.Количество() > 0 тогда														
				ЗначениеПараметра = ПолучитьЗначениеРеквизитаСсылки(ТабличнаяЧасть[0], "ОбъектСсылкаВход.", ПараметрСтрокой);
				ПредставлениеЗначения = Строка(ЗначениеПараметра);
				
				ВложеннаяСсылка = ЗначениеПараметра;
			Иначе
				ЗначениеПараметра = Неопределено;
				ПредставлениеЗначения = "";
				Прервать;
			КонецЕсли;
		Иначе
			ЗначениеПараметра = ПолучитьЗначениеРеквизитаСсылки(ВложеннаяСсылка, "ОбъектСсылкаВход.", ПараметрСтрокой);
			
			Если СтрНайти(Строка(ВложеннаяСсылка), "ТабличнаяЧасть") > 0 тогда
				ПредставлениеЗначения = Строка(ЗначениеПараметра);
			Иначе
				ПредставлениеЗначения = ПолучитьПредставлениеПараметраШаблона(ВложеннаяСсылка, ПараметрСтрокой, ЗначениеПараметра);
			КонецЕсли;
			
			ВложеннаяСсылка = ЗначениеПараметра;
			ИмяСсылкиВход = ИмяСсылкиВход + "." + ПараметрСтрокой;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ЗначениеПараметра, ПредставлениеЗначения", ЗначениеПараметра, ПредставлениеЗначения);
	
КонецФункции

#КонецОбласти

#Область РаботаСРеквизитамиОбъектов

Функция ВернутьОбъектШаблона(ТипОбъектаОповещения,НазначениеОповещения) Экспорт
	
	Если ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.СправочникиБД") Тогда		
		Возврат "Справочник."+ТипОбъектаОповещения.Наименование;
	ИначеЕсли ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.ДокументыБД") Тогда	
		Возврат "Документ."+ТипОбъектаОповещения.Наименование;
	ИначеЕсли ЗначениеЗаполнено(НазначениеОповещения) И НазначениеОповещения = Справочники.КатегорииСобытийОповещений.СобытияВыполненияПроцесса Тогда	
		Возврат "Справочник.ШаблоныУниверсальныхПроцессов";
	ИначеЕсли НЕ ЗначениеЗаполнено(ТипОбъектаОповещения) Тогда
		Возврат "Справочник.ШаблоныУниверсальныхПроцессов";
	Иначе
		ТекстОшибки = Нстр("ru = 'Неизвестный вариант объекта оповещения %ТипОбъектаОповещения%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипОбъектаОповещения%", Строка(ТипОбъектаОповещения));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		Возврат "Справочник.ШаблоныУниверсальныхПроцессов";			
	КонецЕсли;	
	
КонецФункции

// Добавляет в схему скд МакетСкд ревизитов объекта ТипОбъектаОповещенияВход его 
// стандартные реквизиты.
Процедура ДобавитьСтандартныеРеквизитыВСхему(ТипОбъектаОповещенияВход, МакетСкд)
	Если ТипЗнч(ТипОбъектаОповещенияВход) = Тип("СправочникСсылка.СправочникиБД") Тогда
		// Поиск текущего справочника в метаданных.
		НайденныйСправочник = Неопределено;
		Для Каждого ТекСправочники Из Метаданные.Справочники Цикл
			Если ТипОбъектаОповещенияВход.Наименование = ТекСправочники.Имя Тогда
				НайденныйСправочник = ТекСправочники;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;	
		КонецЦикла;	
		// Поиск типов владельца.
		МассивТиповВладельца = Новый Массив;
		Для Каждого ТекВладельцы Из НайденныйСправочник.Владельцы Цикл
			//ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(НайденныйСправочник);
			Если ОбщегоНазначения.ЭтоСправочник(НайденныйСправочник) Тогда
				МассивТиповВладельца.Добавить("Справочник." + ТекВладельцы.Имя);
			ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(НайденныйСправочник) Тогда
				МассивТиповВладельца.Добавить("ПланВидовХарактеристик." + ТекВладельцы.Имя);	
			Иначе
				// Пропускаем.
			КонецЕсли;
		КонецЦикла;	
		// Добавление поля владельца по найденным типам.
		Если МассивТиповВладельца.Количество() > 0 Тогда
			СтрокаТипВладельца = СтрСоединить(МассивТиповВладельца, ";");
			ДобавитьОписаниеПоляСКД("Владелец", "Владелец", СтрокаТипВладельца, МакетСкд);
		Иначе
			// Нет владельцев.
		КонецЕсли;
		// Добавление поля родителя.
		СправочникПодчиненЭлементам = (Строка(НайденныйСправочник.ИспользованиеПодчинения) = "Элементам");
		СправочникПодчиненГруппамИЭлементам = (Строка(НайденныйСправочник.ИспользованиеПодчинения) = "ГруппамИЭлементам");
		Если СправочникПодчиненЭлементам ИЛИ СправочникПодчиненГруппамИЭлементам Тогда
			СтрокаТипРодителя = "Справочник." + НайденныйСправочник.Имя;
			ДобавитьОписаниеПоляСКД("Родитель", "Родитель", СтрокаТипРодителя, МакетСкд);
		Иначе
			// Нет владельцев.
		КонецЕсли;
	Иначе
		// Для прочих вариантов не добавляем.
	КонецЕсли;
КонецПроцедуры		// ДобавитьСтандартныеРеквизитыВСхему()

// Определяет, принадлежит ли представление типа ПредставлениеВход примитивному типу.
Функция ЭтоПредставлениеПримитивногоТипа(ПредставлениеВход)
	РезультатФункции = Ложь;
	ЭтоБулево	 = (ПредставлениеВход = "Булево");
	ЭтоДата		 = (ПредставлениеВход = "Дата");	
	ЭтоСтрока	 = (ПредставлениеВход = "Строка");
	ЭтоЧисло	 = (ПредставлениеВход = "Число");
	РезультатФункции = (ЭтоСтрока) ИЛИ (ЭтоЧисло) ИЛИ (ЭтоБулево) ИЛИ (ЭтоДата);
	Возврат РезультатФункции;
КонецФункции		// ЭтоПредставлениеПримитивногоТипа()

Функция ПолучитьСхемуСКДДляПодстановкиВШаблоне(ТипОбъектаОповещения, ВидОбъектаОповещения, НазначениеОповещения, ВидСобытияВход = Неопределено, ОграничиватьСсылочныеВход = Ложь) Экспорт
	
	МакетСкд = ПолучитьОбщийМакет("МакетНастройкиОтборов");	
	МакетСкд.НаборыДанных[0].Поля.Очистить();
	
	Если ЗначениеЗаполнено(ТипОбъектаОповещения) Тогда
		Если НазначениеОповещения = Справочники.КатегорииСобытийОповещений.СобытияСогласования  Тогда		
			
			Для Каждого СтрПоле Из ТипОбъектаОповещения.Реквизиты Цикл
				ТипДанныхРабочий = СтрПоле.ТипДанных;
				Если СокрЛП(СтрПоле.Имя) = "Ссылка" Тогда
					Если ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.СправочникиБД") Тогда
						ТипДанныхРабочий = "Справочник." + ТипОбъектаОповещения.Наименование;
					ИначеЕсли ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.ДокументыБД") Тогда
						ТипДанныхРабочий = "Документ." + ТипОбъектаОповещения.Наименование;
					ИначеЕсли ТипЗнч(ТипОбъектаОповещения) = Тип("СправочникСсылка.ПеречисленияБД") Тогда
						ТипДанныхРабочий = "Перечисление." + ТипОбъектаОповещения.Наименование;					
					Иначе
						ТипДанныхРабочий = СтрПоле.ТипДанных;
					КонецЕсли;
				Иначе	
					ТипДанныхРабочий = СтрПоле.ТипДанных;
				КонецЕсли;
				Если (НЕ ОграничиватьСсылочныеВход) ИЛИ (НЕ ЭтоПредставлениеПримитивногоТипа(ТипДанныхРабочий)) Тогда
					ДобавитьОписаниеПоляСКД(СтрПоле.Имя, СтрПоле.Синоним, ТипДанныхРабочий, МакетСкд);
				Иначе
					// Не добавляем примитивные типы.
				КонецЕсли;
			КонецЦикла;	
			ДобавитьСтандартныеРеквизитыВСхему(ТипОбъектаОповещения, МакетСкд);
		ИначеЕсли   НазначениеОповещения = Справочники.КатегорииСобытийОповещений.СобытияВыполненияПроцесса Тогда		
			
			Для Каждого СтрПоле Из ТипОбъектаОповещения.Реквизиты Цикл
				Если (НЕ ОграничиватьСсылочныеВход) ИЛИ (НЕ ЭтоПредставлениеПримитивногоТипа(ТипДанныхРабочий)) Тогда
					ДобавитьОписаниеПоляСКД(СтрПоле.Имя,СтрПоле.Синоним,СтрПоле.ТипДанных,МакетСкд, ТипОбъектаОповещения);
				Иначе
					// Не добавляем примитивные типы.
				КонецЕсли;
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(ВидОбъектаОповещения) Тогда
				
				ПараметрыПроцесса =  ВидОбъектаОповещения.ПараметрыПроцесса.Выгрузить();
				
				Для Каждого СтрПараметр ИЗ ПараметрыПроцесса Цикл
					
					ТипДанных = ПолучитьПредставлениеПараметра(СтрПараметр);
					
					ДобавитьОписаниеПоляСКД(СтрПараметр.КодПараметра,"Параметры процесса.["+СтрПараметр.ИмяПараметра+"]",ТипДанных,МакетСкд);
					
				КонецЦикла;
				
			КонецЕсли;	
			ДобавитьСтандартныеРеквизитыВСхему(ТипОбъектаОповещения, МакетСкд);
		ИначеЕсли   НазначениеОповещения = Справочники.КатегорииСобытийОповещений.СобытияПроцессаПодготовкиОтчетности Тогда		
			
			Для Каждого СтрПоле Из ТипОбъектаОповещения.Реквизиты Цикл
				
				ДобавитьОписаниеПоляСКД(СтрПоле.Имя, СтрПоле.Синоним, СтрПоле.ТипДанных, МакетСкд);
				
			КонецЦикла;	
			
			Если ЗначениеЗаполнено(ВидОбъектаОповещения) Тогда
				
				ПараметрыПроцесса =  ВидОбъектаОповещения.ПараметрыПроцесса.Выгрузить();
				
				Для Каждого СтрПараметр ИЗ ПараметрыПроцесса Цикл
					
					ТипДанных = ПолучитьПредставлениеПараметра(СтрПараметр);
					
					ДобавитьОписаниеПоляСКД(СтрПараметр.КодПараметра,"Параметры процесса.["+СтрПараметр.ИмяПараметра+"]",ТипДанных,МакетСкд);
					
				КонецЦикла;
				
			КонецЕсли;	
			ДобавитьСтандартныеРеквизитыВСхему(ТипОбъектаОповещения, МакетСкд);
			
		ИначеЕсли ЗначениеЗаполнено(ТипОбъектаОповещения) Тогда
			
			Для Каждого СтрПоле Из ТипОбъектаОповещения.Реквизиты Цикл
				Если (НЕ ОграничиватьСсылочныеВход) ИЛИ (НЕ ЭтоПредставлениеПримитивногоТипа(СтрПоле.ТипДанных)) Тогда
					ДобавитьОписаниеПоляСКД(СтрПоле.Имя,СтрПоле.Синоним,СтрПоле.ТипДанных,МакетСкд);
				Иначе
					// Не добавляем примитивные типы.
				КонецЕсли;
			КонецЦикла;	
			ДобавитьСтандартныеРеквизитыВСхему(ТипОбъектаОповещения, МакетСкд);
		КонецЕсли;	
		// Добавим специффические дополнительные параметры для данного вида события.
		Если ВидСобытияВход <> Неопределено Тогда
			СтруктураНастроек = ПолучитьПоставляемыеДанныеПоВидуСобытия(ВидСобытияВход, НазначениеОповещения);
			СтрокаДопПараметры = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроек, "ДополнительныеПараметры", "");
			МассивПараметров = СтрРазделить(СтрокаДопПараметры, ";");
			Для Каждого ТекМассивПараметров Из МассивПараметров Цикл
				Если СокрЛП(ТекМассивПараметров) <> "" Тогда
					
					СтрокаШаблона = Нстр("ru = ' <ПараметрыСобытия - %1>'");
					
					ОписаниеПоляСКД = "";
					Если Не ПустаяСтрока(СтрокаШаблона) тогда								
						ОписаниеПоляСКД = СтрШаблон(СтрокаШаблона, ТекМассивПараметров);
					КонецЕсли;
					
					ДобавитьОписаниеПоляСКД(ТекМассивПараметров, ОписаниеПоляСКД, "Строка", МакетСкд);
				Иначе
					// Пустой параметр. Пропускаем.
				КонецЕсли;
			КонецЦикла;
			// Также добавим стандартные параметры.
			ДобавитьОписаниеПоляСКД("ПолучательОповещения", НСтр("ru = ' <ПараметрыСобытия - ПолучательОповещения>'"), "Строка", МакетСкд);
			ДобавитьОписаниеПоляСКД("ТекущаяДата", НСтр("ru = ' <ПараметрыСобытия - ТекущаяДата>'"), "Строка", МакетСкд);
			ДобавитьОписаниеПоляСКД("ТекущийПользователь", НСтр("ru = ' <ПараметрыСобытия - ТекущийПользователь>'"), "Строка", МакетСкд);
		Иначе
			// Не добавляем дополнительные параметры.
		КонецЕсли;
		
		ДобавитьОписаниеПоляСКД("ТекущийЭтап", НСтр("ru = ' <ПараметрыСобытия - ТекущийЭтап>'"), "Строка", МакетСкд);
		
	Иначе
		// Неизвестный объект оповещения. Оставляем СКД пустой.
	КонецЕсли;
	
	Возврат МакетСкд;
	
КонецФункции

Процедура ЗаполнитьСхемуСКДДляПодстановкиВШаблоне(ТипОбъектаОповещенияВход, ВидОбъектаОповещенияВход, НазначениеОповещенияВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ПолучитьСхемуСКДДляПодстановкиВШаблоне(ТипОбъектаОповещенияВход, ВидОбъектаОповещенияВход, НазначениеОповещенияВход);
КонецПроцедуры

Процедура ДобавитьОписаниеПоляСКД(ИмяПоля,СинонимПоля,ТипДанных,МакетСкд, ТипОбъектаОповещения = Неопределено)
		
	НовоеПоле = МакетСкд.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = ИмяПоля;
	НовоеПоле.Заголовок = СинонимПоля;
	НовоеПоле.ПутьКДанным = ИмяПоля;
	
	МассивТипов = Новый Массив;
	МассивПриведенныхТипов = Новый Массив();
	
	Если (ТипОбъектаОповещения <> Неопределено) И (СокрЛП(ИмяПоля) = "Ссылка") Тогда
		// Ссылка представлен в виде уникального идетификатора. Подменим её тип на тип элемента.
		ТипСсылки = ОбщегоНазначенияСерверУХ.ВернутьТипПоСсылкеБД(ТипОбъектаОповещения);
		МассивПриведенныхТипов.Добавить(ТипСсылки);
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(МассивПриведенныхТипов);
	Иначе	
		МассивТипов=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипДанных, ";");
		Для Каждого Эл Из МассивТипов Цикл
			НазваниеТипа = СтрЗаменить(Эл,".","Ссылка.");
			Попытка
				ПриведенныйТип = Тип(НазваниеТипа);
				МассивПриведенныхТипов.Добавить(ПриведенныйТип);
			Исключение
				ТекстОшибки = НСтр("ru = 'Не удалось добавить тип %НазваниеТипа%. Возможно, требуется обновить метаданные по 
				|данным текущей информационной базы в разделе Интеграция и упрвление НСИ - 
				|Типы ИБ - Текущая информационная база - Загрузить структуру данных'");
				ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НазваниеТипа%", НазваниеТипа);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов(МассивПриведенныхТипов);		
КонецПроцедуры

Функция ПолучитьПредставлениеПараметра(СтрПараметр)
	
	Если  СтрПараметр.ЭтоПростойТип Тогда
		 Возврат СтрПараметр.ТипЗначенияПараметраСтрока;
	КонецЕсли;	
	
	Если ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка) = Тип("СправочникСсылка.СправочникиБД") Тогда
		 Возврат "Справочник."+СтрПараметр.ТипЗначенияПараметраСсылка.Наименование;
	КонецЕсли;	
	
	Если ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка) = Тип("СправочникСсылка.ДокументыБД") Тогда
		 Возврат "Документ."+СтрПараметр.ТипЗначенияПараметраСсылка.Наименование;
	КонецЕсли;	

	Если ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка) = Тип("СправочникСсылка.ПеречисленияБД") Тогда
		 Возврат "Перечисление."+СтрПараметр.ТипЗначенияПараметраСсылка.Наименование;
	КонецЕсли;	

	Если ТипЗнч(СтрПараметр.ТипЗначенияПараметраСсылка) = Тип("СправочникСсылка.ПланыСчетовБД") Тогда
		 Возврат "ПланСчетов."+СтрПараметр.ТипЗначенияПараметраСсылка.Наименование;
	КонецЕсли;	

	Возврат "Неопределено";
	
КонецФункции	

#КонецОбласти

//Процедура вызывается для заполнения предопределенных элементов категорий оповещений и видов событий оповещений 
Процедура ЗаполнитьНастройкиОповещений() Экспорт
	     
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	КатегорииСобытийОповещений.Ссылка
	               |ИЗ
	               |	Справочник.КатегорииСобытийОповещений КАК КатегорииСобытийОповещений";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КатегорияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			КатегорияОбъект.Записать();
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = НСтр("ru = 'Ошибка записи категории события оповещения %Ссылка%
                                |
                                |Текст ошибки:
                                |%ТекОшибка%'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%Ссылка%", Строка(Выборка.Ссылка));
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%ТекОшибка%", Строка(ТекОшибка));
			ЗаписьЖурналаРегистрации("ОбновлениеКатегорийОповещений", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);
	
		КонецПопытки;
	КонецЦикла;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыСобытийОповещений.Ссылка
	               |ИЗ
	               |	Справочник.ВидыСобытийОповещений КАК ВидыСобытийОповещений";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СобытиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			СобытиеОбъект.Записать();
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекстОшибки1 = НСтр("ru = 'Ошибка записи вида события оповещения %Ссылка%
                                |
                                |Текст ошибки: %ТекОшибка%'", ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%Ссылка%", Строка(Выборка.Ссылка));
			ТекстОшибки1 = СтрЗаменить(ТекстОшибки1, "%ТекОшибка%", Строка(ТекОшибка));
			ЗаписьЖурналаРегистрации("ОбновлениеСобытийОповещений", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);
	
		КонецПопытки;
	КонецЦикла;

	
	
	
КонецПроцедуры

// Возвращает тип объекта оповещения, ассоциировнный с видом события ВидСобытияВход.
// Когда невозможно однозначно определить тип объекта - возвращает Неопределено.
Функция ПолучитьТипОбъектаПоВидуОповещения(ВидСобытияВход) Экспорт
	РезультатФункции = Неопределено;
	ТекущаяИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	Если ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_ОплатаПоГрафикуДоговора") Тогда
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("ДоговорыКонтрагентов", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_СоздатьСВО") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("ОтражениеФактическихДанныхБюджетирования", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_СоздатьСПД") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("ОтражениеФактическихДанныхБюджетирования", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_ПроверитьОжидаемыеСрокиСВО") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("СправкаОВалютныхОперациях", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_ПроверитьОжидаемыеСрокиСПД") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("СправкаОПодтверждающихДокументах", , , ТекущаяИБ);
		
	// Централизованные закупки
		
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_ОфициальноеОбъявлениеЗакупки") Тогда
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("ЗакупочныеПроцедуры", , , ТекущаяИБ);
		
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_НачалоПодготовкиЗакупки") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("СтрокаПланаЗакупок", , , ТекущаяИБ);
			
	// Конец Централизованные закупки
	
	// Аккредитация
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОткрытииДоступаВнешнемуПоставщику") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтказеВДоступеВнешнемуПоставщику") Тогда
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("АнкетыПоставщиков", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеВнешнемуПоставщику") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеАккредитованномуВнешнемуПоставщику") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("ОповещениеАккредитованныхПоставщиковОТоргах", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбУтвержденииАккредитации") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОНеутвержденииАккредитации") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтправкеНаИсправлениеАккредитации") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("АккредитацияПоставщика", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбУтвержденииКвалификации") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОНеутвержденииКвалификации") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтправкеНаИсправлениеКвалификации") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("КвалификацияПоставщика", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОЛишенииАккредитации") ИЛИ
			  ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОЗапретеАккредитацииДоДаты") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("ЛишениеАккредитации", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ОповещениеОбОтменеАккредитации") Тогда
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("ОтзывАккредитации", , , ТекущаяИБ);
	// Конец Аккредитация
	
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ДобавленЗаместитель") Тогда
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("Пользователи", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.УдаленЗаместитель") Тогда
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("Пользователи", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход.КатегорияСобытия = ПредопределенноеЗначение("Справочник.КатегорииСобытийОповещений.СобытияДоговоров") Тогда	
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("ДоговорыКонтрагентов", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход.КатегорияСобытия = ПредопределенноеЗначение("Справочник.КатегорииСобытийОповещений.СобытияПроектов") Тогда	
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию("Проекты", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ПредписаниеИсполнителю") Тогда	
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("Мероприятие", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ПроверкаИсполненияПоручения") Тогда	
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("Мероприятие", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.Напоминание_СтадияМероприятия") Тогда	
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("Мероприятие", , , ТекущаяИБ);
	ИначеЕсли ВидСобытияВход = ПредопределенноеЗначение("Справочник.ВидыСобытийОповещений.ВыполнениеОперацииПоСтадииМероприятия") Тогда	
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию("Мероприятие", , , ТекущаяИБ);
	Иначе
		РезультатФункции = Неопределено;		// Для данного вида события нельзя однозначно установить связанный объект. 
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

#Область Напоминания

// Добавляет напоминание по ПользовательВход, ВремяСобытияВход, ИсточникВход, 
// ВидСобытияОповещенияВход с указанными параметрами.
Процедура ДобавитьНапоминаниеПользователя(ПользовательВход, ВремяСобытияВход, ИсточникВход, ВидСобытияОповещенияВход, СрокНапоминанияВход, ИнтервалВремениНапоминанияВход = 0, ВремяПоследнегоНапоминанияВход = Неопределено, ОписаниеВход = "", ЗадачаВход = Неопределено, ДопПараметрыВход = Неопределено) Экспорт
	Попытка 
		ИзмеренияЗаполнены = (ЗначениеЗаполнено(ВремяСобытияВход)) И (ЗначениеЗаполнено(ПользовательВход)) И (ЗначениеЗаполнено(ВидСобытияОповещенияВход));
		Если ИзмеренияЗаполнены Тогда
			// Запись напоминания.
			ЗаписьНапоминания = РегистрыСведений.НапоминанияПользователяУХ.СоздатьМенеджерЗаписи();
			ЗаписьНапоминания.Пользователь = ПользовательВход;
			ЗаписьНапоминания.ВремяСобытия = ВремяСобытияВход;
			ЗаписьНапоминания.Источник = ИсточникВход;
			ЗаписьНапоминания.ВидСобытияОповещения = ВидСобытияОповещенияВход;
			ЗаписьНапоминания.СрокНапоминания = СрокНапоминанияВход;
			ЗаписьНапоминания.ИнтервалВремениНапоминания = ИнтервалВремениНапоминанияВход;
			Если ЗначениеЗаполнено(ВремяПоследнегоНапоминанияВход) Тогда
				ЗаписьНапоминания.ВремяПоследнегоНапоминания = Дата(1, 1, 1);		// Дата не задана. Укажем пустую.
			Иначе	
				ЗаписьНапоминания.ВремяПоследнегоНапоминания = ВремяПоследнегоНапоминанияВход;
			КонецЕсли;
			ЗаписьНапоминания.НачалоНапоминаний = СрокНапоминанияВход; 
			ЗаписьНапоминания.Описание = ОписаниеВход;
			Если ЗначениеЗаполнено(ЗадачаВход) Тогда
				ЗаписьНапоминания.Задача = ЗадачаВход;
			Иначе
				ЗаписьНапоминания.Задача = Справочники.Задачи.ПустаяСсылка();
			КонецЕсли;
			Если ДопПараметрыВход <> Неопределено Тогда
				ЗаписьНапоминания.ПараметрыСобытия = Новый ХранилищеЗначения(ДопПараметрыВход);
			Иначе
				ЗаписьНапоминания.ПараметрыСобытия = Новый ХранилищеЗначения(Новый Структура);
			КонецЕсли;	
			ЗаписьНапоминания.Записать();
			// Оповещение пользователей.						
			НеСоздаватьОповещения = Неопределено;
			ДопПараметрыВход.Свойство("НеСоздаватьОповещения", НеСоздаватьОповещения);
			Если НеСоздаватьОповещения <> Истина тогда
				ОбработатьНапоминанияПользователей();
			КонецЕсли;
		Иначе
			// Нельзя создать напоминание, т.к. указаны не все обязательные поля.
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Во время добавления напоминания по объекту %СвязанныйОбъект% для пользователя %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СвязанныйОбъект%", Строка(ИсточникВход));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Пользователь%", Строка(ПользовательВход));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

// Добавляет напоминание пользователю и задачу, где необходимые параметры заданы в виде
// структуры СтруктураВход.
Процедура ДобавитьНапоминаниеПользователяСЗадачей(СтруктураВход) Экспорт
	// Инициализация.
	ПустойПроцесс = Документы.ЭкземплярПроцесса.ПустаяСсылка();
	ПустойЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	ПустойВидДействия = Перечисления.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка();
	ПользовательЗапись = СтруктураВход.Пользователь;
	// Создадим задачу по напоминанию.
	Попытка
		элЗадачи = Справочники.Задачи.СоздатьЭлемент();
		элЗадачи.СвязанныйОбъект = СтруктураВход.Источник;
		элЗадачи.Записать();
		СсылкаНаЗадачу = элЗадачи.Ссылка;
		МодульРегламентныхЗаданийУХ.СоздатьЗадачу(СсылкаНаЗадачу, ПользовательЗапись, ПустойПроцесс, ПустойЭтап, ПустойВидДействия);
	Исключение
		ТекстОшибки = НСтр("ru = 'Произошла ошибка во время создания задачи: %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		СсылкаНаЗадачу = Справочники.Задачи.ПустаяСсылка();
	КонецПопытки;
	СтруктураВход.Вставить("Задача", СсылкаНаЗадачу);
	// Создадим напоминание.
	ДобавитьНапоминаниеПользователяПоСтруктуре(СтруктураВход);
КонецПроцедуры

// Добавляет напоминание пользователю, где необходимые параметры заданы в виде Структуры
//
// Параметры:
//  СтруктураВход 	- см. МодульУправленияОповещениямиУХ.СтруктураНапоминания 
//
Процедура ДобавитьНапоминаниеПользователяПоСтруктуре(СтруктураВход) Экспорт
	ПустаяДата = Дата(1, 1, 1);
	ЗаписьПользователь					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Пользователь", Справочники.Пользователи.ПустаяСсылка());
	ЗаписьВремяСобытия					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ВремяСобытия", ПустаяДата);
	ЗаписьИсточник						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Источник", Справочники.Задачи.ПустаяСсылка());
	ЗаписьВидСобытияОповещения			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ВидСобытияОповещения", Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	ЗаписьСрокНапоминания				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "СрокНапоминания", ПустаяДата);
	ЗаписьИнтервалВремениНапоминания	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ИнтервалВремениНапоминания", 0);
	ЗаписьВремяПоследнегоНапоминания	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ВремяПоследнегоНапоминания", ПустаяДата);
	ЗаписьОписание						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Описание", "");
	ЗаписьЗадача						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Задача", "");
	ЗаписьДопПараметры					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ДопПараметры", Новый Структура);	
	ДобавитьНапоминаниеПользователя(ЗаписьПользователь, ЗаписьВремяСобытия, ЗаписьИсточник, ЗаписьВидСобытияОповещения, 
		ЗаписьСрокНапоминания, ЗаписьИнтервалВремениНапоминания, ЗаписьВремяПоследнегоНапоминания, ЗаписьОписание, ЗаписьЗадача, ЗаписьДопПараметры);
КонецПроцедуры

// Функция - Структура для создания напоминания см. МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяПоСтруктуре
// 
// Возвращаемое значение:
//   - Структура
//
Функция СтруктураНапоминания() Экспорт
	
	ПустаяДата = Дата(1, 1, 1);
	
	СтруктураНапоминания = Новый Структура;
	СтруктураНапоминания.Вставить("Пользователь", Справочники.Пользователи.ПустаяСсылка());
	СтруктураНапоминания.Вставить("ВремяСобытия", ПустаяДата);
	СтруктураНапоминания.Вставить("Источник", Справочники.Задачи.ПустаяСсылка());
	СтруктураНапоминания.Вставить("ВидСобытияОповещения", Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	СтруктураНапоминания.Вставить("СрокНапоминания", ПустаяДата);
	СтруктураНапоминания.Вставить("ИнтервалВремениНапоминания", 0);
	СтруктураНапоминания.Вставить("ВремяПоследнегоНапоминания", ПустаяДата);
	СтруктураНапоминания.Вставить("Описание", "");
	СтруктураНапоминания.Вставить("Задача", "");
	СтруктураНапоминания.Вставить("ДопПараметры", Новый Структура);
	
	Возврат СтруктураНапоминания;
	
КонецФункции	

// Возвращает таблицу напоминаний, которые уже наступили на дату ДатаВход.
// Когда ДатаВход не указана - будет использована текущая. 
Функция ПолучитьТаблицуНаступившихСобытий(ДатаВход = Неопределено) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Если ЗначениеЗаполнено(ДатаВход) Тогда
		ДатаПараметр = ДатаВход;
	Иначе
		ДатаПараметр = ТекущаяДатаСеанса();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НапоминанияПользователя.Пользователь КАК Пользователь,
		|	НапоминанияПользователя.ВремяСобытия КАК ВремяСобытия,
		|	НапоминанияПользователя.Источник КАК Источник,
		|	НапоминанияПользователя.ВидСобытияОповещения КАК ВидСобытияОповещения,
		|	НапоминанияПользователя.СрокНапоминания КАК СрокНапоминания,
		|	НапоминанияПользователя.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания,
		|	НапоминанияПользователя.ВремяПоследнегоНапоминания КАК ВремяПоследнегоНапоминания,
		|	НапоминанияПользователя.Описание КАК Описание,
		|	НапоминанияПользователя.Задача КАК Задача,
		|	НапоминанияПользователя.НачалоНапоминаний КАК НачалоНапоминаний,
		|	НапоминанияПользователя.ПараметрыСобытия КАК ПараметрыСобытия
		|ИЗ
		|	РегистрСведений.НапоминанияПользователяУХ КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.СрокНапоминания <= &ДатаТек
		|	И НапоминанияПользователя.СрокНапоминания <> &ПустаяДата
		|	И НапоминанияПользователя.ВремяСобытия >= &ДатаТек";
	Запрос.УстановитьПараметр("ДатаТек", ДатаПараметр);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу напоминаний актуальных для пользователя ПользовательВход на дату ДатаВход.
// Когда ДатаВход не указана, берётся текущая.
Функция ПолучитьТаблицуАктуальныхНапоминанийПользователя(ПользовательВход, ДатаВход = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ДатаВход) Тогда
		ДатаПараметр = ДатаВход;
	Иначе
		ДатаПараметр = ТекущаяДатаСеанса();
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НапоминанияПользователя.Пользователь,
		|	НапоминанияПользователя.ВремяСобытия,
		|	НапоминанияПользователя.Источник,
		|	НапоминанияПользователя.ВидСобытияОповещения,
		|	НапоминанияПользователя.СрокНапоминания,
		|	НапоминанияПользователя.ИнтервалВремениНапоминания,
		|	НапоминанияПользователя.ВремяПоследнегоНапоминания,
		|	НапоминанияПользователя.Описание,
		|	НапоминанияПользователя.Задача
		|ИЗ
		|	РегистрСведений.НапоминанияПользователяУХ КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.СрокНапоминания <> &ПустаяДата
		|	И НапоминанияПользователя.ВремяСобытия >= &ДатаТек
		|	И НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.НачалоНапоминаний <= &ДатаТек
		|	И НапоминанияПользователя.НачалоНапоминаний <> &ПустаяДата";
	Запрос.УстановитьПараметр("Пользователь", ПользовательВход);
	Запрос.УстановитьПараметр("ДатаТек", ДатаПараметр);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Осуществляет перенос напоминания по параметрам ПользовательВход, ВремяСобытияВход, ИсточникВход, ВидСобытияОповещенияВход
// на новое время НоваяДатаОповещенияВход. Когда параметр ЗафиксироватьПереносВход - Истина, будет также записано время переноса. 
// Возвращает успешность выполнения операции.
Функция ПеренестиНапоминание(ПользовательВход, ВремяСобытияВход, ИсточникВход, ВидСобытияОповещенияВход, НоваяДатаОповещенияВход) Экспорт
	РезультатФункции = Истина;
	Попытка
		ТекДата = ТекущаяДатаСеанса();
		НаборЗаписей = РегистрыСведений.НапоминанияПользователяУХ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПользовательВход);
		НаборЗаписей.Отбор.ВремяСобытия.Установить(ВремяСобытияВход);
		НаборЗаписей.Отбор.Источник.Установить(ИсточникВход);
		НаборЗаписей.Отбор.ВидСобытияОповещения.Установить(ВидСобытияОповещенияВход);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.СрокНапоминания = НоваяДатаОповещенияВход;
			Запись.ВремяПоследнегоНапоминания = ТекДата;
		КонецЦикла;
		НаборЗаписей.Записать();
	Исключение
		ТекстОшибки = НСтр("ru = 'Во время добавления напоминания по объекту %СвязанныйОбъект% для пользователя %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СвязанныйОбъект%", Строка(ИсточникВход));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Пользователь%", Строка(ПользовательВход));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Выполняет отключение напоминания пользователя по переданным параметрам. Возвращает успешность выполнения операции.
Функция ОтключитьНапоминание(ПользовательВход, ВремяСобытияВход, ИсточникВход, ВидСобытияОповещенияВход) Экспорт
	ПустаяДата = Дата(1, 1, 1);
	РезультатФункции = ПеренестиНапоминание(ПользовательВход, ВремяСобытияВход, ИсточникВход, ВидСобытияОповещенияВход, ПустаяДата);
	Возврат РезультатФункции;
КонецФункции

// Удаляет из регистра напоминание по переданным параметрам.
Процедура УдалитьНапоминание(ПользовательВход, ВремяСобытияВход, ИсточникВход, ВидСобытияОповещенияВход) Экспорт
	Попытка
		// Считаем данные из регистра НапоминанияПользователя по переданному отбору.
		ТекДата = ТекущаяДатаСеанса();
		НаборЗаписей = РегистрыСведений.НапоминанияПользователяУХ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ПользовательВход);
		НаборЗаписей.Отбор.ВремяСобытия.Установить(ВремяСобытияВход);
		НаборЗаписей.Отбор.Источник.Установить(ИсточникВход);
		НаборЗаписей.Отбор.ВидСобытияОповещения.Установить(ВидСобытияОповещенияВход);
		НаборЗаписей.Прочитать();
		// Считаем список задач, чтобы сбросить их в дальнейшем.
		Выгрузка = НаборЗаписей.Выгрузить();
		МассивЗадач = Новый Массив;
		Для Каждого ТекВыгрузка Из Выгрузка Цикл
			ТекЗадача = ТекВыгрузка.Задача;
			Если (ЗначениеЗаполнено(ТекЗадача)) И (МассивЗадач.Найти(ТекЗадача) = Неопределено) Тогда
				МассивЗадач.Добавить(ТекЗадача);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		// Очистка регистра НапоминанияПользователя.
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		// Сбрасывание задач.
		Для Каждого ТекМассивЗадач Из МассивЗадач Цикл
			МодульРегламентныхЗаданийУХ.СброситьЗадачу(ТекМассивЗадач);
		КонецЦикла;
	Исключение
		ТекстОшибки = НСтр("ru = 'Во время добавления напоминания по объекту %СвязанныйОбъект% для пользователя %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СвязанныйОбъект%", Строка(ИсточникВход));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Пользователь%", Строка(ПользовательВход));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
	КонецПопытки;
КонецПроцедуры

// Удаляет из регистра напоминание по переданным параметрам.
//
// Параметры:
//  ПараметрыОтбора	 - Структура - параметры отбора напоминаний по измерениям регистра НапоминанияПользователяУХ 
//
Процедура УдалитьНапоминанияПоОтбору(ПараметрыОтбора) Экспорт

	// Считаем данные из регистра НапоминанияПользователя по переданному отбору.
	ТекДата = ТекущаяДатаСеанса();
	НаборЗаписей = РегистрыСведений.НапоминанияПользователяУХ.СоздатьНаборЗаписей();
	Для каждого ЭлОтбора Из НаборЗаписей.Отбор Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыОтбора, ЭлОтбора.Имя) Тогда
			ЭлОтбора.Установить(ПараметрыОтбора[ЭлОтбора.Имя]);
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
	// Считаем список задач, чтобы сбросить их в дальнейшем.
	Выгрузка = НаборЗаписей.Выгрузить();
	МассивЗадач = Новый Массив;
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		ТекЗадача = ТекВыгрузка.Задача;
		Если (ЗначениеЗаполнено(ТекЗадача)) И (МассивЗадач.Найти(ТекЗадача) = Неопределено) Тогда
			МассивЗадач.Добавить(ТекЗадача);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	// Очистка регистра НапоминанияПользователя.
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	// Сбрасывание задач.
	Для Каждого ТекМассивЗадач Из МассивЗадач Цикл
		МодульРегламентныхЗаданийУХ.СброситьЗадачу(ТекМассивЗадач);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - Удаляет напоминания по источнику
//
// Параметры:
//  Источник - см. РегистрСведений.НапоминанияПользователяУХ.Источник 
//
Процедура УдалитьНапоминанияПоИсточнику(Источник) Экспорт
	УдалитьНапоминанияПоОтбору(Новый Структура("Источник", Источник));
КонецПроцедуры	

// Проверяет наличие оповещения по задаче ЗадачаВход. В случае отсуствия - создаёт новое оповещение с переданными 
// параметрами. Иначе - обновляет дату создания и сбрасывает флаг прочтения у оповещения.
Процедура ОбновитьОповещенияПоНапоминаниям(ПользовательВход, ИсточникВход, ВидСобытияОповещенияВход, ЗадачаВход, ДопПараметрыВход = Неопределено)
	ДопПараметрыРабочий = Новый Структура;
	Если ДопПараметрыВход <> Неопределено Тогда
		Если ТипЗнч(ДопПараметрыВход) = Тип("ХранилищеЗначения") Тогда
			ДопПараметрыРабочий = ДопПараметрыВход.Получить();
		Иначе
			ДопПараметрыРабочий = Новый Структура;
		КонецЕсли;	
	Иначе
		ДопПараметрыРабочий = Новый Структура;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОповещенияПользователей.Пользователь,
		|	ОповещенияПользователей.КатегорияОповещений,
		|	ОповещенияПользователей.ВидОповещения,
		|	ОповещенияПользователей.Задача,
		|	ОповещенияПользователей.Задача.СвязанныйОбъект КАК СвязанныйОбъект
		|ИЗ
		|	РегистрСведений.ОповещенияПользователей КАК ОповещенияПользователей
		|ГДЕ
		|	ОповещенияПользователей.Задача = &Задача";
	Запрос.УстановитьПараметр("Задача", ЗадачаВход);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		// Оповещения по данной задаче ещё нет - создадим его.		
		ТаблицаОтветственных = МодульУправленияПроцессамиУХ.ОтветственныеПоОбъектуСогласования(ИсточникВход);
		МассивОповещаемых = ТаблицаОтветственных.ВыгрузитьКолонку("Пользователь");		
		ОповеститьПользователей(ВидСобытияОповещенияВход, , ИсточникВход, МассивОповещаемых, ДопПараметрыРабочий, ЗадачаВход);
	Иначе
		// Уже есть оповещение. Обновим дату и сбросим флаг прочтения.
		НачатьТранзакцию();
		Попытка
			Выгрузка = РезультатЗапроса.Выгрузить();
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				// Удалим существующую запись.
				Набор = РегистрыСВедений.ОповещенияПользователей.СоздатьНаборЗаписей();
				Набор.Отбор.Пользователь.Установить(ТекВыгрузка.Пользователь);
				Набор.Отбор.КатегорияОповещений.Установить(ТекВыгрузка.КатегорияОповещений);
				Набор.Отбор.ВидОповещения.Установить(ТекВыгрузка.ВидОповещения);
				Набор.Прочитать();
				Набор.Очистить();
				Набор.Записать();
			КонецЦикла;			
			// Создадим новую запись с новыми параметрами.
			ТаблицаОтветственных = МодульУправленияПроцессамиУХ.ОтветственныеПоОбъектуСогласования(ИсточникВход);
			МассивОповещаемых = ТаблицаОтветственных.ВыгрузитьКолонку("Пользователь");			
			ОповеститьПользователей(ВидСобытияОповещенияВход, , ИсточникВход, МассивОповещаемых, ДопПараметрыРабочий, ЗадачаВход);			
		Исключение
			ТекстСообщения = НСтр("ru = 'Во время обновления оповещения по задаче %Задача% возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Задача%", ЗадачаВход);
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

// Осуществляет рассылку оповещений и перенос напоминаний по таблице
// событий ТаблицаСобытийВход
Процедура ОбработатьТаблицуНапоминанийСобытий(ТаблицаСобытийВход)
	ТекДата = ТекущаяДатаСеанса();
	Для Каждого ТекТаблицаСобытий Из ТаблицаСобытийВход Цикл
		// Оповещение пользователей.
		ТекПользователь					 = ТекТаблицаСобытий.Пользователь;
		ТекВремяСобытия					 = ТекТаблицаСобытий.ВремяСобытия;
		ТекИсточник						 = ТекТаблицаСобытий.Источник;
		ТекВидСобытияОповещения			 = ТекТаблицаСобытий.ВидСобытияОповещения;
		ТекИнтервалВремениНапоминания	 = ТекТаблицаСобытий.ИнтервалВремениНапоминания;
		ТекЗадача						 = ТекТаблицаСобытий.Задача;
		ТекНачалоНапоминаний			 = ТекТаблицаСобытий.НачалоНапоминаний;
		ТекДопПараметры					 = ТекТаблицаСобытий.ПараметрыСобытия;
		ОбновитьОповещенияПоНапоминаниям(ТекПользователь, ТекИсточник, ТекВидСобытияОповещения, ТекЗадача, ТекДопПараметры);
		// Перенос напоминания.
		Если ТекИнтервалВремениНапоминания > 0 Тогда
			ИнтервалСекунды = ТекИнтервалВремениНапоминания*60*60;
			Если ЗначениеЗаполнено(ТекНачалоНапоминаний) Тогда
				НоваяДатаОповещения = ТекНачалоНапоминаний;
				Пока НоваяДатаОповещения < ТекДата Цикл                                // Добавляем интервал к дате начала, пока не получим будующую дату.
					НоваяДатаОповещения = НоваяДатаОповещения + ИнтервалСекунды;
				КонецЦикла;
			Иначе
				НоваяДатаОповещения = ТекДата + ИнтервалСекунды;
			КонецЕсли;
			Если НоваяДатаОповещения < ТекВремяСобытия Тогда
				ПеренестиНапоминание(ТекПользователь, ТекВремяСобытия, ТекИсточник, ТекВидСобытияОповещения, НоваяДатаОповещения);
			Иначе
				ОтключитьНапоминание(ТекПользователь, ТекВремяСобытия, ТекИсточник, ТекВидСобытияОповещения);			// Событие уже наступило.
			КонецЕсли;
		Иначе
			ОтключитьНапоминание(ТекПользователь, ТекВремяСобытия, ТекИсточник, ТекВидСобытияОповещения);				// Интервал оповещения нулевой - оповещать не нужно.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Осуществляет обработку напоминаний пользователей и отправку по ним оповещений при необходимости
Процедура ОбработатьНапоминанияПользователей() Экспорт
	// Получение актуальных напоминаний.
	ТаблицаСобытий = ПолучитьТаблицуНаступившихСобытий();
	ОбработатьТаблицуНапоминанийСобытий(ТаблицаСобытий);
КонецПроцедуры

// Получает время (в секундах) до ближайшего напоминания пользователю ПользовательВход
Функция ПолучитьИнтервалДоБлижайшегоНапоминанияПользователя(ПользовательВход)
	РезультатФункции = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МИНИМУМ(НапоминанияПользователя.СрокНапоминания) КАК СрокНапоминания
		|ИЗ
		|	РегистрСведений.НапоминанияПользователяУХ КАК НапоминанияПользователя
		|ГДЕ
		|	НапоминанияПользователя.Пользователь = &Пользователь
		|	И НапоминанияПользователя.СрокНапоминания <> &ПустаяДата
		|
		|ИМЕЮЩИЕ
		|	НЕ МИНИМУМ(НапоминанияПользователя.СрокНапоминания) ЕСТЬ NULL ";
	Запрос.УстановитьПараметр("Пользователь", ПользовательВход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекДата = ТекущаяДатаСеанса();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйСрокНапоминания = ВыборкаДетальныеЗаписи.СрокНапоминания;
		Если НовыйСрокНапоминания > ТекДата Тогда
			РезультатФункции = НовыйСрокНапоминания - ТекДата;
		Иначе
			Продолжить; 			// Эта дата уже истекла.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Осуществляет поиск наступивших напоминаний пользователя. Возвращает
// структуру, содержащую массив напоминаний и интервал до ближайшего
// следующего напоминания
Функция ОбработатьНапоминанияТекущегоПользователя() Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	МассивНапоминаний = Новый Массив;
	РезультатФункции.Вставить("МассивНапоминаний", МассивНапоминаний);
	РезультатФункции.Вставить("ИнтервалДоБлижайшего", 0);
	// Получим таблицу наступивших событий и преобразуем её в массив для передачи на клиент.
	ТекущийПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	ТаблицаСобытий = ПолучитьТаблицуАктуальныхНапоминанийПользователя(ТекущийПользователь);
	Для Каждого ТекТаблицаСобытий Из ТаблицаСобытий Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки = ОбщегоНазначенияУХ.ПеренестиСтрокуТаблицыВСтруктуру(ТаблицаСобытий, ТекТаблицаСобытий, СтруктураСтроки);
		МассивНапоминаний.Добавить(СтруктураСтроки);
	КонецЦикла;
	// Получим интервал до ближайшего напоминания пользователя.
	ИнтервалДоБлижайшегоНапоминания	= ПолучитьИнтервалДоБлижайшегоНапоминанияПользователя(ТекущийПользователь);
	МаксимальныйИнтервал = ОбщегоНазначенияКлиентСерверУХ.МаксимальныйИнтервалПроверкиНапоминаний();				
	Если (ИнтервалДоБлижайшегоНапоминания > 0) И (ИнтервалДоБлижайшегоНапоминания > МаксимальныйИнтервал) Тогда
		ИнтервалДоБлижайшегоНапоминания = МаксимальныйИнтервал;                     								// Максимальный интервал превышен. Чтобы не пропустить ничего важного, проверим напоминания дополнительно.
	ИначеЕсли ИнтервалДоБлижайшегоНапоминания <= 0 Тогда	
		ИнтервалДоБлижайшегоНапоминания = МаксимальныйИнтервал;														// Нет предстоящих напоминаний. Чтобы не пропустить ничего важного, проверим напоминания дополнительно.
	Иначе
		ИнтервалДоБлижайшегоНапоминания = ИнтервалДоБлижайшегоНапоминания + 1;										// 1 секунда запас.
	КонецЕсли;
	// Сформируем и вернём результирующую структуру.
	РезультатФункции.Вставить("МассивНапоминаний", МассивНапоминаний);
	РезультатФункции.Вставить("ИнтервалДоБлижайшего", ИнтервалДоБлижайшегоНапоминания);		
	Возврат РезультатФункции;
КонецФункции

// Создаёт структуру напоминания с настройками СтруктураНастроекВход по 
// событию оповещения для отправки пользователю ПользовательВход напоминания
// о событии в дату ВремяСобытияВход по объекту напоминания ИстиочникСобытияВход.
// ВАЖНО! Ссылка на задачу по умолчанию не включается в структуру.
Функция СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроекВход, ПользовательВход, ВремяСобытияВход, ИсточникСобытияВход) Экспорт
	РезультатФункции = Новый Структура;
	НовыйПериод = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериодНапоминания", 0);
	Если ЗначениеЗаполнено(НовыйПериод) Тогда
		НовыйСрокНапоминания = ВремяСобытияВход - (СтруктураНастроекВход.ПериодНапоминания*60*60*24);
		НовоеВремяСобытия = ВремяСобытияВход + (СтруктураНастроекВход.ПериодПослеСобытия*60*60*24);
		СтруктураНапоминание = Новый Структура;
		РезультатФункции.Вставить("Пользователь",				 ПользовательВход);
		РезультатФункции.Вставить("ВремяСобытия",				 НовоеВремяСобытия);
		РезультатФункции.Вставить("Источник",					 ИсточникСобытияВход);
		РезультатФункции.Вставить("ВидСобытияОповещения",		 СтруктураНастроекВход.ВидСобытияОповещения);
		РезультатФункции.Вставить("СрокНапоминания",			 НовыйСрокНапоминания);
		РезультатФункции.Вставить("ИнтервалВремениНапоминания",	 СтруктураНастроекВход.ИнтервалВремениНапоминания);
	Иначе
		РезультатФункции.Вставить("Пользователь",				 Справочники.Пользователи.ПустаяСсылка());
		РезультатФункции.Вставить("ВремяСобытия",				 Дата(1, 1, 1));
		РезультатФункции.Вставить("Источник",					 Неопределено);
		РезультатФункции.Вставить("ВидСобытияОповещения",		 Справочники.ВидыСобытийОповещений.ПустаяСсылка());
		РезультатФункции.Вставить("СрокНапоминания",			 Дата(1, 1, 1));
		РезультатФункции.Вставить("ИнтервалВремениНапоминания",	 0);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// По виду события ВидСобытияВход возвращает структуру настроек оповещения
Функция ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияВход, ВидОбъектаВход = Неопределено) Экспорт
	РезультатФункции = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиОповещений.КатегорияОповещения КАК КатегорияОповещения,
	|	НастройкиОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
	|	НастройкиОповещений.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	|	НастройкиОповещений.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	|	НастройкиОповещений.ШаблонОповещения КАК ШаблонОповещения,
	|	НастройкиОповещений.ОповещениеВключено КАК ОповещениеВключено,
	|	НастройкиОповещений.ПериодНапоминания КАК ПериодНапоминания,
	|	НастройкиОповещений.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания,
	|	НастройкиОповещений.ПериодПослеСобытия КАК ПериодПослеСобытия
	|ПОМЕСТИТЬ ВТ_ДанныеРегистра
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|	И НастройкиОповещений.ВидОбъектаОповещения = &ВидОбъектаОповещения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОповещений.КатегорияОповещения,
	|	НастройкиОповещений.ВидСобытияОповещения,
	|	НастройкиОповещений.ТипОбъектаОповещения,
	|	НастройкиОповещений.ВидОбъектаОповещения,
	|	НастройкиОповещений.ШаблонОповещения,
	|	НастройкиОповещений.ОповещениеВключено,
	|	НастройкиОповещений.ПериодНапоминания,
	|	НастройкиОповещений.ИнтервалВремениНапоминания,
	|	НастройкиОповещений.ПериодПослеСобытия
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|	И НастройкиОповещений.ВидОбъектаОповещения = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДанныеРегистра.КатегорияОповещения КАК КатегорияОповещения,
	|	ВТ_ДанныеРегистра.ВидСобытияОповещения КАК ВидСобытияОповещения,
	|	ВТ_ДанныеРегистра.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	|	ВТ_ДанныеРегистра.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	|	ВТ_ДанныеРегистра.ШаблонОповещения КАК ШаблонОповещения,
	|	ВТ_ДанныеРегистра.ОповещениеВключено КАК ОповещениеВключено,
	|	ВТ_ДанныеРегистра.ПериодНапоминания КАК ПериодНапоминания,
	|	ВТ_ДанныеРегистра.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания,
	|	ВТ_ДанныеРегистра.ПериодПослеСобытия КАК ПериодПослеСобытия
	|ИЗ
	|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра";
	Запрос.УстановитьПараметр("ВидСобытияОповещения", ВидСобытияВход);
	Запрос.УстановитьПараметр("ВидОбъектаОповещения", ВидОбъектаВход);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Выгрузить().Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции.Вставить("ШаблонОповещения",			 ВыборкаДетальныеЗаписи.ШаблонОповещения);
			РезультатФункции.Вставить("ПериодНапоминания",			 ВыборкаДетальныеЗаписи.ПериодНапоминания);
			РезультатФункции.Вставить("ИнтервалВремениНапоминания",	 ВыборкаДетальныеЗаписи.ИнтервалВремениНапоминания);
			РезультатФункции.Вставить("ОповещениеВключено",			 ВыборкаДетальныеЗаписи.ОповещениеВключено);
			РезультатФункции.Вставить("ВидСобытияОповещения",		 ВыборкаДетальныеЗаписи.ВидСобытияОповещения);
			РезультатФункции.Вставить("ПериодПослеСобытия",			 ВыборкаДетальныеЗаписи.ПериодПослеСобытия);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Структура;
		РезультатФункции.Вставить("ШаблонОповещения",			 Справочники.ШаблоныОповещений.ПустаяСсылка());
		РезультатФункции.Вставить("ПериодНапоминания",			 0);
		РезультатФункции.Вставить("ИнтервалВремениНапоминания",	 0);
		РезультатФункции.Вставить("ОповещениеВключено",			 Ложь);
		РезультатФункции.Вставить("ВидСобытияОповещения",		 Справочники.ВидыСобытийОповещений.ПустаяСсылка());
		РезультатФункции.Вставить("ПериодПослеСобытия",			 0);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьНастройкиОповещенийПоВидуСобытия()

// По виду события ВидСобытияВход и типу объекта ТипОбъектаВход возвращает структуру настроек оповещения
Функция ПолучитьНастройкиОповещенийПоВидуСобытияИТипуОбъекта(ВидСобытияВход, ТипОбъектаВход) Экспорт
	РезультатФункции = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиОповещений.КатегорияОповещения КАК КатегорияОповещения,
	|	НастройкиОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
	|	НастройкиОповещений.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	|	НастройкиОповещений.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	|	НастройкиОповещений.ШаблонОповещения КАК ШаблонОповещения,
	|	НастройкиОповещений.ОповещениеВключено КАК ОповещениеВключено,
	|	НастройкиОповещений.ПериодНапоминания КАК ПериодНапоминания,
	|	НастройкиОповещений.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания,
	|	НастройкиОповещений.ПериодПослеСобытия КАК ПериодПослеСобытия
	|ПОМЕСТИТЬ ВТ_ДанныеРегистра
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|	И НастройкиОповещений.ТипОбъектаОповещения = &ТипОбъектаОповещения
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиОповещений.КатегорияОповещения,
	|	НастройкиОповещений.ВидСобытияОповещения,
	|	НастройкиОповещений.ТипОбъектаОповещения,
	|	НастройкиОповещений.ВидОбъектаОповещения,
	|	НастройкиОповещений.ШаблонОповещения,
	|	НастройкиОповещений.ОповещениеВключено,
	|	НастройкиОповещений.ПериодНапоминания,
	|	НастройкиОповещений.ИнтервалВремениНапоминания,
	|	НастройкиОповещений.ПериодПослеСобытия
	|ИЗ
	|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
	|ГДЕ
	|	НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
	|	И НастройкиОповещений.ОповещениеВключено = ИСТИНА
	|	И НастройкиОповещений.ТипОбъектаОповещения = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВТ_ДанныеРегистра.КатегорияОповещения КАК КатегорияОповещения,
	|	ВТ_ДанныеРегистра.ВидСобытияОповещения КАК ВидСобытияОповещения,
	|	ВТ_ДанныеРегистра.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
	|	ВТ_ДанныеРегистра.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
	|	ВТ_ДанныеРегистра.ШаблонОповещения КАК ШаблонОповещения,
	|	ВТ_ДанныеРегистра.ОповещениеВключено КАК ОповещениеВключено,
	|	ВТ_ДанныеРегистра.ПериодНапоминания КАК ПериодНапоминания,
	|	ВТ_ДанныеРегистра.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания,
	|	ВТ_ДанныеРегистра.ПериодПослеСобытия КАК ПериодПослеСобытия
	|ИЗ
	|	ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра";
	Запрос.УстановитьПараметр("ВидСобытияОповещения", ВидСобытияВход);
	Запрос.УстановитьПараметр("ТипОбъектаОповещения", ТипОбъектаВход);
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Выгрузить().Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции.Вставить("ШаблонОповещения",			 ВыборкаДетальныеЗаписи.ШаблонОповещения);
			РезультатФункции.Вставить("ПериодНапоминания",			 ВыборкаДетальныеЗаписи.ПериодНапоминания);
			РезультатФункции.Вставить("ИнтервалВремениНапоминания",	 ВыборкаДетальныеЗаписи.ИнтервалВремениНапоминания);
			РезультатФункции.Вставить("ОповещениеВключено",			 ВыборкаДетальныеЗаписи.ОповещениеВключено);
			РезультатФункции.Вставить("ВидСобытияОповещения",		 ВыборкаДетальныеЗаписи.ВидСобытияОповещения);
			РезультатФункции.Вставить("ПериодПослеСобытия",			 ВыборкаДетальныеЗаписи.ПериодПослеСобытия);
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Структура;
		РезультатФункции.Вставить("ШаблонОповещения",			 Справочники.ШаблоныОповещений.ПустаяСсылка());
		РезультатФункции.Вставить("ПериодНапоминания",			 0);
		РезультатФункции.Вставить("ИнтервалВремениНапоминания",	 0);
		РезультатФункции.Вставить("ОповещениеВключено",			 Ложь);
		РезультатФункции.Вставить("ВидСобытияОповещения",		 Справочники.ВидыСобытийОповещений.ПустаяСсылка());
		РезультатФункции.Вставить("ПериодПослеСобытия",			 0);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьНастройкиОповещенийПоВидуСобытияИТипуОбъекта()

// Возвращает состояние включения оповещения по виду события ВидСобытияВход.
Функция ВключеноОповещениеПоВидуСобытия(ВидСобытияВход) Экспорт
	СтруктураНастроек = ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияВход);
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроек, "ОповещениеВключено", Ложь);
	Возврат РезультатФункции;
КонецФункции

// Снимает напоминание пользователям из МассивОповещаемыхВход по заданным параметрам.
Процедура УдалитьНапоминанияПользователей(ИсточникВход, ВидСобытияВход, МассивОповещаемыхВход, ДатаВход) Экспорт
	Для Каждого ТекМассивОповещаемыхВход Из МассивОповещаемыхВход Цикл
		УдалитьНапоминание(ТекМассивОповещаемыхВход, ДатаВход, ИсточникВход, ВидСобытияВход);
	КонецЦикла;
КонецПроцедуры

// Создает напоминание пользователям из массива МассивОповещаемыхВход по лоту ЛотВход
// по виду события ВидСобытияВход на дату ДатаВход.
Процедура СоздатьНапоминаниеПоЛоту(ЛотВход, ВидСобытияВход, МассивОповещаемыхВход, ДатаВход) Экспорт
	// Проверка актуальности напоминания.
	ТекДата = ТекущаяДатаСеанса();
	Если ТекДата > ДатаВход Тогда
		Возврат;		// ДатаВход уже истекла. Не имеет смысла оповещать.
	Иначе	
		// Можно продолжать.
	КонецЕсли;
	// Очистим существующие напоминания.
	УдалитьНапоминанияПользователей(ЛотВход, ВидСобытияВход, МассивОповещаемыхВход, ДатаВход);
	Если ЗначениеЗаполнено(ДатаВход) Тогда
		// Инициализация.
		ПустойПроцесс = Документы.ЭкземплярПроцесса.ПустаяСсылка();
		ПустойЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
		ПустойВидДействия = Перечисления.СобытияОтложеннойОбработкиПроцессов.ПустаяСсылка();
		СтруктураНастроек = ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияВход);
		Если СтруктураНастроек.Количество() > 0 Тогда
			Для Каждого ТекМассивОповещаемыхВход Из МассивОповещаемыхВход Цикл
				// Создадим задачу по напоминанию.
				Попытка
					элЗадачи = Справочники.Задачи.СоздатьЭлемент();
					элЗадачи.СвязанныйОбъект = ЛотВход;
					элЗадачи.Записать();
					СсылкаНаЗадачу = элЗадачи.Ссылка;
					МодульРегламентныхЗаданийУХ.СоздатьЗадачу(СсылкаНаЗадачу, ТекМассивОповещаемыхВход, ПустойПроцесс, ПустойЭтап, ПустойВидДействия);
				Исключение
					ТекстОшибки = НСтр("ru = 'Произошла ошибка во время создания задачи: %ОписаниеОшибки%'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
					СсылкаНаЗадачу = Справочники.Задачи.ПустаяСсылка();
				КонецПопытки;
				// Создадим запись в регистре напоминания.
				НовыйСрокНапоминания = ДатаВход - (СтруктураНастроек.ПериодНапоминания*60*60*24);
				СтруктураНапоминание = Новый Структура;
				СтруктураНапоминание.Вставить("Пользователь",				 ТекМассивОповещаемыхВход);
				СтруктураНапоминание.Вставить("ВремяСобытия",				 ДатаВход);
				СтруктураНапоминание.Вставить("Источник",					 ЛотВход);
				СтруктураНапоминание.Вставить("ВидСобытияОповещения",		 ВидСобытияВход);
				СтруктураНапоминание.Вставить("СрокНапоминания",			 НовыйСрокНапоминания);
				СтруктураНапоминание.Вставить("ИнтервалВремениНапоминания",	 СтруктураНастроек.ИнтервалВремениНапоминания);
				СтруктураНапоминание.Вставить("Задача",						 СсылкаНаЗадачу);
				ДобавитьНапоминаниеПользователяПоСтруктуре(СтруктураНапоминание);
				ОбработатьНапоминанияТекущегоПользователя();
			КонецЦикла;
		Иначе
			// Не удалось получить настройки по данному виду события
		КонецЕсли;
	Иначе
		// Дата не задана. Не отправляем напоминание.
	КонецЕсли;
КонецПроцедуры

// Удаляет из регистра напоминания об оплате по договорам из массива МассивДоговоровВход.
Процедура УдалитьНапоминанияПоДоговорам(МассивДоговоровВход) Экспорт
	ТекДата = ТекущаяДатаСеанса();
	ВидСобытияНапоминаниеОплаты = Справочники.ВидыСобытийОповещений.Напоминание_ОплатаПоГрафикуДоговора;
	Для Каждого ТекМассивДоговоровВход Из МассивДоговоровВход Цикл
		Попытка
			// Считаем данные из регистра НапоминанияПользователя по переданному отбору.
			НаборЗаписей = РегистрыСведений.НапоминанияПользователяУХ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Источник.Установить(ТекМассивДоговоровВход);
			НаборЗаписей.Отбор.ВидСобытияОповещения.Установить(ВидСобытияНапоминаниеОплаты);
			НаборЗаписей.Прочитать();
			// Считаем список задач, чтобы сбросить их в дальнейшем.
			Выгрузка = НаборЗаписей.Выгрузить();
			МассивЗадач = Новый Массив;
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				ТекЗадача = ТекВыгрузка.Задача;
				Если (ЗначениеЗаполнено(ТекЗадача)) И (МассивЗадач.Найти(ТекЗадача) = Неопределено) Тогда
					МассивЗадач.Добавить(ТекЗадача);
				Иначе
					Продолжить;
				КонецЕсли;
			КонецЦикла;
			// Очистка регистра НапоминанияПользователя.
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			// Сбрасывание задач.
			Для Каждого ТекМассивЗадач Из МассивЗадач Цикл
				МодульРегламентныхЗаданийУХ.СброситьЗадачу(ТекМассивЗадач);
			КонецЦикла;
		Исключение
			ТекстОшибки = НСтр("ru = 'Во время удаления напоминаний по договору %СвязанныйОбъект% возникли ошибки: %ОписаниеОшибки%'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СвязанныйОбъект%", Строка(ТекМассивДоговоровВход));
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		КонецПопытки;   
	КонецЦикла;
КонецПроцедуры

Процедура ОповеститьПользователейОбИзмененииСостояния(ТекЗапись,ОбъектОповещенияСсылка) Экспорт
	
	ВидСобытияИзменениеСостояния = Справочники.ВидыСобытийОповещений.ИзменениеСостоянияОбъекта;
	МассивОповещаемых = Новый Массив;
	МассивОповещаемых.Добавить(ОбъектОповещенияСсылка.Ответственный);
	СтруктураДопПараметры = Новый Структура;
	СтруктураДопПараметры.Вставить("Состояние", ТекЗапись.СостояниеОбъекта);
	ОповеститьПользователей(ВидСобытияИзменениеСостояния, , ОбъектОповещенияСсылка, МассивОповещаемых, СтруктураДопПараметры);
	
	
КонецПроцедуры

#КонецОбласти
