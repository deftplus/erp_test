
#Область ПрограммныйИнтерфейс

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента) Экспорт
	
	//++ Локализация
	//++ НЕ УТ
	МеханизмыДокумента.Добавить("РегламентированныйУчет");
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый документ.
//  Отказ - Булево - Признак проведения документа.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то проведение документа выполнено не будет.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то будет выполнен отказ от продолжения работы после выполнения проверки заполнения.
//  ПроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет выполнена проверка заполнения.
//
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект.
//  ДанныеЗаполнения - Произвольный - Значение, которое используется как основание для заполнения.
//  СтандартнаяОбработка - Булево - В данный параметр передается признак выполнения стандартной (системной) обработки события.
//
Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//
Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина,
//                   то запись выполнена не будет и будет вызвано исключение.
//  РежимЗаписи - РежимЗаписиДокумента - В параметр передается текущий режим записи документа. Позволяет определить в теле процедуры режим записи.
//  РежимПроведения - РежимПроведенияДокумента - В данный параметр передается текущий режим проведения.
//
Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//                   Если в теле процедуры-обработчика установить данному параметру значение Истина, то запись выполнена не будет и будет вызвано исключение.
//
Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
//
// Параметры:
//  Объект - ДокументОбъект - Обрабатываемый объект
//  ОбъектКопирования - ДокументОбъект - Исходный документ, который является источником копирования.
//
Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеКоманды

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	
КонецПроцедуры

// Добавляет команду создания документа "Авансовый отчет".
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//
Процедура ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании) Экспорт


КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.КомандыОтчетов
//   Параметры - См. ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов.Параметры
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список команд печати.
//
// Параметры:
//   КомандыПечати - см. УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	//++ Локализация
	
	// Акт о списании товаров (ТОРГ-16)
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Обработка.ПечатьТОРГ16";
	КомандаПечати.Идентификатор = "ТОРГ16";
	КомандаПечати.Представление = НСтр("ru = 'Акт о списании товаров (ТОРГ-16)';
										|en = 'Retirement certificate (TORG-16)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	//-- Локализация
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр)
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	
КонецПроцедуры

//++ Локализация

// Функция получает данные для формирования печатной формы ТОРГ-16.
//
// Параметры:
//	ПараметрыПечати   - Структура                                        - Дополнительные параметры печати.
//	ДокументОснование - ДокументСсылка.СписаниеПринятыхНаХранениеТоваров - Документ, который нужно распечатать.
//
// Возвращаемое значение:
//	Структура - структура с данными для печати формы ТОРГ-16.
//
Функция ПолучитьДанныеДляПечатнойФормыТОРГ16(ПараметрыПечати, ДокументОснование) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Дата				КАК ДатаДокумента,
	|	СписаниеТоваров.Партнер				КАК Партнер,
	|	СписаниеТоваров.Организация			КАК Организация,
	|	СписаниеТоваров.Руководитель		КАК Руководитель,
	|	ЕСТЬNULL(СписаниеТоваров.Руководитель.Должность, """") КАК ДолжностьРуководителя,
	|	СписаниеТоваров.ГлавныйБухгалтер	КАК ГлавныйБухгалтер,
	|	ВЫБОР
	|		КОГДА СписаниеТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ								КАК СписаниеЗаНашСчет
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК СписаниеТоваров
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ДокументОснование";
	
	Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
	
	УстановитьПривилегированныйРежим(Истина);
	ДанныеДокумента = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеДокумента.Следующий();
	
	ДатаДокумента     = ДанныеДокумента.ДатаДокумента;
	Организация       = ДанныеДокумента.Организация;
	Партнер           = ДанныеДокумента.Партнер;
	СписаниеЗаНашСчет = ДанныеДокумента.СписаниеЗаНашСчет;
	
	ДопКолонка             = ФормированиеПечатныхФорм.ДополнительнаяКолонкаПечатныхФормДокументов().ИмяКолонки;
	ИспользуетсяДопКолонка = ЗначениеЗаполнено(ДопКолонка);
	
	СтруктураОтветственных = ОтветственныеЛицаСервер.ПолучитьОтветственныеЛицаОрганизации(Организация,
																							КонецДня(ДатаДокумента));
	
	Руководитель          = ?(ЗначениеЗаполнено(ДанныеДокумента.Руководитель),
								ДанныеДокумента.Руководитель,
								СтруктураОтветственных.Руководитель);
	ДолжностьРуководителя = ?(ЗначениеЗаполнено(ДанныеДокумента.Руководитель),
								ДанныеДокумента.ДолжностьРуководителя,
								СтруктураОтветственных.РуководительДолжность);
	ГлавныйБухгалтер      = ?(ЗначениеЗаполнено(ДанныеДокумента.ГлавныйБухгалтер),
								ДанныеДокумента.ГлавныйБухгалтер,
								СтруктураОтветственных.ГлавныйБухгалтер);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаЦен",               ДатаДокумента);
	Запрос.УстановитьПараметр("ТекущийДокумент",       ДокументОснование);
	Запрос.УстановитьПараметр("Руководитель",          Руководитель);
	Запрос.УстановитьПараметр("ДолжностьРуководителя", ДолжностьРуководителя);
	Запрос.УстановитьПараметр("ГлавныйБухгалтер",      ГлавныйБухгалтер);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СписаниеТоваров.Ссылка      КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО                КАК ДокументОснование,
	|	ЕСТЬNULL(СписаниеТоваров.ИсправляемыйДокумент.Номер, СписаниеТоваров.Номер) КАК Номер,
	|	ЕСТЬNULL(СписаниеТоваров.ИсправляемыйДокумент.Дата, СписаниеТоваров.Дата) КАК ДатаДокумента,
	|	СписаниеТоваров.Контрагент  КАК Поставщик,
	|	СписаниеТоваров.Организация КАК Организация,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Организация.НаименованиеСокращенное) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Организация.КодПоОКПО)               КАК ОрганизацияПоОКПО,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Организация.Префикс)                 КАК Префикс,
	|	СписаниеТоваров.Подразделение                КАК Подразделение,
	|	ПРЕДСТАВЛЕНИЕ(СписаниеТоваров.Подразделение) КАК ПодразделениеПредставление,
	|	НЕОПРЕДЕЛЕНО                КАК Кладовщик,
	|	НЕОПРЕДЕЛЕНО                КАК ДолжностьКладовщика,
	|	СписаниеТоваров.Менеджер.ФизическоеЛицо КАК Ответственный,
	|	&Руководитель               КАК Руководитель,
	|	&ДолжностьРуководителя      КАК ДолжностьРуководителя,
	|	&ГлавныйБухгалтер           КАК ГлавныйБухгалтер,
	|	""""                        КАК ОснованиеДата,
	|	""""                        КАК НомерОснования
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК СписаниеТоваров
	|
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|;
	|
	|//////////////////////////////////////////////////////////////////////////////// 1";
	
	Если СписаниеЗаНашСчет Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
		|	&ТекстЗапросаТоварКод                                       КАК ТоварКод,
		|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
		|	ТоварыСписания.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
		|	ТоварыСписания.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
		|	ТоварыСписания.Номенклатура.ЕдиницаИзмерения.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ПРЕДСТАВЛЕНИЕ(ТоварыСписания.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	&ТекстЗапросаВес                                            КАК МассаОдногоМеста,
		|	ТоварыСписания.Количество                                   КАК КоличествоМест,
		|	ВЫБОР
		|		КОГДА &ТекстЗапросаКоэффициентУпаковки <> 0
		|			ТОГДА ТоварыСписания.Цена / &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ ТоварыСписания.Цена
		|	КОНЕЦ                                                       КАК Цена
		|ИЗ
		|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТоварыСписания
		|ГДЕ
		|	ТоварыСписания.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыСписания.НомерСтроки";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаКоэффициентУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ТоварыСписания.Упаковка",
																											"ТоварыСписания.Номенклатура"));
		
	Иначе
		
		ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Запасы.ВидЦены                КАК ВидЦены,
		|	КлючиАналитики.Номенклатура   КАК Номенклатура,
		|	КлючиАналитики.Характеристика КАК Характеристика
		|
		|ПОМЕСТИТЬ ЗапасыСписания
		|ИЗ
		|	Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК ТоварыСписания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК Запасы
		|		ПО ТоварыСписания.ВидЗапасов = Запасы.Ссылка
		|		
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНоменклатуры КАК КлючиАналитики
		|		ПО ТоварыСписания.АналитикаУчетаНоменклатуры = КлючиАналитики.Ссылка
		|
		|ГДЕ
		|	ТоварыСписания.Ссылка = &ТекущийДокумент
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 2
		|ВЫБРАТЬ
		|	ЦеныНоменклатуры.Номенклатура   КАК Номенклатура,
		|	ЦеныНоменклатуры.Характеристика КАК Характеристика,
		|	ЦеныНоменклатуры.Упаковка       КАК Упаковка,
		|	ЦеныНоменклатуры.Цена           КАК Цена
		|
		|ПОМЕСТИТЬ ЦеныНоменклатуры
		|ИЗ
		|	РегистрСведений.ЦеныНоменклатурыПоставщиков.СрезПоследних(КОНЕЦПЕРИОДА(&ДатаЦен, ДЕНЬ),
		|		(Партнер, ВидЦеныПоставщика, Номенклатура, Характеристика) В
		|			(ВЫБРАТЬ
		|				&Партнер,
		|				ЗапасыСписания.ВидЦены        КАК ВидЦены,
		|				ЗапасыСписания.Номенклатура   КАК Номенклатура,
		|				ЗапасыСписания.Характеристика КАК Характеристика
		|			ИЗ
		|				ЗапасыСписания КАК ЗапасыСписания)) КАК ЦеныНоменклатуры
		|;
		|
		|//////////////////////////////////////////////////////////////////////////////// 3
		|ВЫБРАТЬ
		|	ТоварыСписания.НомерСтроки                                  КАК НомерСтроки,
		|	&ТекстЗапросаТоварКод                                       КАК ТоварКод,
		|	ТоварыСписания.Номенклатура                                 КАК Номенклатура,
		|	ТоварыСписания.Номенклатура.НаименованиеПолное              КАК НоменклатураПредставление,
		|	ТоварыСписания.Характеристика.НаименованиеПолное            КАК ХарактеристикаПредставление,
		|	ТоварыСписания.Номенклатура.ЕдиницаИзмерения.Код            КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ПРЕДСТАВЛЕНИЕ(ТоварыСписания.Номенклатура.ЕдиницаИзмерения) КАК ЕдиницаИзмеренияПредставление,
		|	&ТекстЗапросаВес                                            КАК МассаОдногоМеста,
		|	ТоварыСписания.Количество                                   КАК КоличествоМест,
		|	ВЫБОР
		|		КОГДА НЕ &ТекстЗапросаКоэффициентУпаковки ЕСТЬ NULL
		|				И &ТекстЗапросаКоэффициентУпаковки <> 0
		|			ТОГДА ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0) / &ТекстЗапросаКоэффициентУпаковки
		|		ИНАЧЕ ЕСТЬNULL(ЦеныНоменклатуры.Цена, 0)
		|	КОНЕЦ                                                       КАК Цена
		|ИЗ
		|	Документ.СписаниеПринятыхНаХранениеТоваров.Товары КАК ТоварыСписания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЦеныНоменклатуры КАК ЦеныНоменклатуры
		|		ПО ТоварыСписания.Номенклатура      = ЦеныНоменклатуры.Номенклатура
		|			И ТоварыСписания.Характеристика = ЦеныНоменклатуры.Характеристика
		|ГДЕ
		|	ТоварыСписания.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТоварыСписания.НомерСтроки";
		
		Запрос.УстановитьПараметр("Партнер", Партнер);
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаКоэффициентУпаковки",
									Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки("ЦеныНоменклатуры.Упаковка",
																											"ЦеныНоменклатуры.Номенклатура"));
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
								"&ТекстЗапросаВес",
								Справочники.УпаковкиЕдиницыИзмерения.ТекстЗапросаКоэффициентаУпаковки(
									"ТоварыСписания.Номенклатура.ЕдиницаИзмерения",
									"ТоварыСписания.Номенклатура"));
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
									"&ТекстЗапросаТоварКод",
									"ТоварыСписания.Номенклатура." + ?(ИспользуетсяДопКолонка, ДопКолонка, "Код"));
	
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	РезультатПоШапке    = РезультатЗапроса[0];
	РезультатПоДатам    = РезультатЗапроса[РезультатЗапроса.Количество() - 1];
	РезультатПоТоварам  = РезультатЗапроса[РезультатЗапроса.Количество() - 1];
	РезультатКурсыВалют = ТаблицаКурсовВалют(ДокументОснование);
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("РезультатПоШапке",    РезультатПоШапке);
	СтруктураВозврата.Вставить("РезультатПоДатам",    РезультатПоДатам);
	СтруктураВозврата.Вставить("РезультатПоТоварам",  РезультатПоТоварам);
	СтруктураВозврата.Вставить("РезультатКурсыВалют", РезультатКурсыВалют);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Функция формирует таблицу курсов валют по дням.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.СписаниеПринятыхНаХранениеТоваров - документ, на дату которого нужно получить
//																			курсы валют.
//
// Возвращаемое значение:
//	ТаблицаЗначений - таблица значений, содержащая информацию о курсах валют по дням.
//
Функция ТаблицаКурсовВалют(ДокументОснование)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТоварыСписания.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ТоварыСписания.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы)
	|			ТОГДА ТоварыСписания.Ссылка.Валюта
	|		ИНАЧЕ ЕСТЬNULL(МАКСИМУМ(ВидыЦен.Валюта), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|	КОНЕЦ                 КАК Валюта
	|ПОМЕСТИТЬ ВалютыСписанияТоваров
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК ТоварыСписания
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК Запасы
	|		ПО ТоварыСписания.ВидЗапасов = Запасы.Ссылка
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЦенПоставщиков КАК ВидыЦен
	|		ПО Запасы.ВидЦены = ВидыЦен.Ссылка
	|
	|ГДЕ
	|	ТоварыСписания.Ссылка = &ДокументОснование
	|
	|СГРУППИРОВАТЬ ПО
	|	ТоварыСписания.Ссылка
	|
	|;
	|//////////////////////////////////////////////////////////////////////////////// 1
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписаниеТоваров.Ссылка                    КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(СписаниеТоваров.Дата, ДЕНЬ) КАК Дата,
	|	ЕСТЬNULL(ВалютыСписания.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК Валюта,
	|	СписаниеТоваров.Организация.ВалютаРегламентированногоУчета КАК ВалютаРегламентированногоУчета
	|ИЗ
	|	Документ.СписаниеПринятыхНаХранениеТоваров КАК СписаниеТоваров
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВалютыСписанияТоваров КАК ВалютыСписания
	|		ПО СписаниеТоваров.Ссылка = ВалютыСписания.Ссылка
	|ГДЕ
	|	СписаниеТоваров.Ссылка = &ДокументОснование
	|	И ЕСТЬNULL(ВалютыСписания.Валюта, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) <> СписаниеТоваров.Организация.ВалютаРегламентированногоУчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Дата";
	
	Запрос.УстановитьПараметр("ДокументОснование",              ДокументОснование);
	
	ТаблицаКурсовВалют = Новый ТаблицаЗначений;
	ТаблицаКурсовВалют.Колонки.Добавить("Ссылка",    Новый ОписаниеТипов(
															"ДокументСсылка.СписаниеПринятыхНаХранениеТоваров"));
	ТаблицаКурсовВалют.Колонки.Добавить("Валюта",    Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКурсовВалют.Колонки.Добавить("Дата",      Новый ОписаниеТипов("Дата"));
	ТаблицаКурсовВалют.Колонки.Добавить("Курс",      Новый ОписаниеТипов("Число"));
	ТаблицаКурсовВалют.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Выборка.Следующий();
	
	НоваяСтрока = ТаблицаКурсовВалют.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
	КурсыВалюты = РаботаСКурсамиВалютУТ.ПолучитьКурсВалюты(Выборка.Валюта, Выборка.Дата, Выборка.ВалютаРегламентированногоУчета);
	
	НоваяСтрока.Курс      = КурсыВалюты.КурсЧислитель;
	НоваяСтрока.Кратность = КурсыВалюты.КурсЗнаменатель;
	
	Возврат ТаблицаКурсовВалют;
	
КонецФункции

//-- Локализация
#КонецОбласти

//++ НЕ УТ
#Область ПроводкиРегУчета

// Функция возвращает текст запроса для отражения документа в регламентированном учете.
//
// Возвращаемое значение:
//	Строка - Текст запроса
//
Функция ТекстОтраженияВРеглУчете() Экспорт
	
	//++ Локализация
	
	ТекстыОтражения = Новый Массив;
	
#Область СписаниеТоваровПринятыхНаОтветХранение              // (Дт  :: Кт 002.01, 002.02, 002.04)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Списание товаров, принятых на ответственное хранение (Дт  :: Кт 002.01, 002.02, 002.04)
	|
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Стоимости.Сумма, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Стоимости.СуммаУУ, Строки.СуммаУУ) КАК СуммаУУ,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаДт,
	|	НЕОПРЕДЕЛЕНО КАК ПодразделениеДт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиДт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	0 КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ВЫБОР КОГДА Строки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаСебестоимостиТоваров.ТоварыНаХраненииСПравомПродажиКОформлениюСписания)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦКСписанию)
	|		КОГДА Строки.Склад.ЦеховаяКладовая ИЛИ Строки.Склад Ссылка Справочник.СтруктураПредприятия
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦвпроизводстве)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ТМЦнаскладах)
	|	КОНЕЦ КАК ВидСчетаКт,
	|	Строки.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	Строки.Склад КАК МестоУчетаКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК ВалютаКт,
	|	Строки.ПодразделениеАналитики КАК ПодразделениеКт,
	|	ЗНАЧЕНИЕ(Справочник.НаправленияДеятельности.ПустаяСсылка) КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|	Строки.Номенклатура КАК СубконтоКт1,
	|	Операция.Контрагент КАК СубконтоКт2,
	|	Строки.Склад КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	0 КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Списание товаров, принятых на ответственное хранение"" КАК Содержание
	|
	|ИЗ 
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ВтСтроки КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВтСтоимости КАК Стоимости
	|	ПО
	|		Строки.Ссылка = Стоимости.Ссылка
	|		И Строки.Номенклатура = Стоимости.Номенклатура
	|		И Строки.Склад = Стоимости.Склад
	|		И Строки.ГруппаФинансовогоУчета = Стоимости.ГруппаФинансовогоУчета
	|		И Строки.НаправлениеДеятельности = Стоимости.НаправлениеДеятельности
	|		И Строки.РазделУчета = Стоимости.РазделУчета
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
	
#КонецОбласти

#Область ВозмещениеУбытковПоклажедателяНаРасходы // (Дт 20, 2Х, 44, 91.02 :: Кт 76.02)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Возмещение убытков поклажедателя на расходы (Дт 20, 2Х, 44, 91.02 :: Кт 76.02)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	НЕОПРЕДЕЛЕНО КАК ИдентификаторСтроки,
	|	
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.Расходы) КАК ВидСчетаДт,
	|	Операция.СтатьяРасходов КАК АналитикаУчетаДт,
	|	Операция.Подразделение КАК МестоУчетаДт,
	|	
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	Операция.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	ВЫБОР КОГДА СтатьиСтроительства.Ссылка ЕСТЬ НЕ NULL
	|		ТОГДА 
	|				ВЫБОР КОГДА ОбъектыСтроительства.СпособСтроительства <> ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.ПустаяСсылка) 
	|						ТОГДА ОбъектыСтроительства.СпособСтроительства
	|					ИНАЧЕ 
	|						ЗНАЧЕНИЕ(Перечисление.СпособыСтроительства.Подрядный) 
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыЗатратРегл.Прочее)
	|	КОНЕЦ КАК СубконтоДт1,
	|	Операция.СтатьяРасходов КАК СубконтоДт2,
	|	ВЫБОР КОГДА СтатьиСтроительства.Ссылка ЕСТЬ НЕ NULL
	|		ТОГДА Операция.АналитикаРасходов
	|		ИНАЧЕ Строки.АналитикаУчетаНоменклатуры.Номенклатура
	|	КОНЕЦ КАК СубконтоДт3,
	|	
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|	
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям) КАК ВидСчетаКт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Расчеты.Валюта КАК ВалютаКт,
	|	Расчеты.Подразделение КАК ПодразделениеКт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|
	|	Расчеты.Контрагент КАК СубконтоКт1,
	|	Расчеты.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Возмещение убытков поклажедателя на расходы "" КАК Содержание
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТРасчетыСПоставщиками КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НАЧАЛОПЕРИОДА(Операция.Дата, День)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиСтроительства
	|	ПО
	|		Операция.СтатьяРасходов = СтатьиСтроительства.Ссылка
	|		И СтатьиСтроительства.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНаПрочиеАктивы
	|	ПО
	|		Операция.СтатьяРасходов = СтатьиНаПрочиеАктивы.Ссылка
	|		И СтатьиНаПрочиеАктивы.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|	
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	|	ПО 
	|		ОбъектыСтроительства.Ссылка = Операция.АналитикаРасходов
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы)
	|	И Операция.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиРасходов
	|	И СтатьиНаПрочиеАктивы.Ссылка ЕСТЬ NULL
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ВозмещениеУбытковПоклажедателяНаПрочиеАктивы // (Дт ХХ.ХХ :: Кт 76.02)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Возмещение убытков поклажедателя на прочие активы (Дт ХХ.ХХ :: Кт 76.02)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	"""" КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеОперации) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	Операция.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка) КАК СчетДт,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт1,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям) КАК ВидСчетаКт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Расчеты.Валюта КАК ВалютаКт,
	|	Расчеты.Подразделение КАК ПодразделениеКт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|
	|	Расчеты.Контрагент КАК СубконтоКт1,
	|	Расчеты.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Возмещение убытков поклажедателя на прочие активы"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиНаПрочиеАктивы
	|	ПО
	|		Операция.СтатьяРасходов = СтатьиНаПрочиеАктивы.Ссылка
	|		И СтатьиНаПрочиеАктивы.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаПрочиеАктивы)
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТРасчетыСПоставщиками КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НАЧАЛОПЕРИОДА(Операция.Дата, День)
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы)
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

#Область ВозмещениеУбытковПоклажедателяНаСтатьиАктивовПассивов // (Дт ХХ.ХХ :: Кт 76.02)
	ТекстЗапроса = "
	|ВЫБРАТЬ //// Возмещение убытков поклажедателя на прочие активы (Дт ХХ.ХХ :: Кт 76.02)
	|	Операция.Ссылка КАК Ссылка,
	|	Операция.Дата КАК Период,
	|	Операция.Организация КАК Организация,
	|	Строки.ИдентификаторСтроки КАК ИдентификаторСтроки,
	|
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК Сумма,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСУпр + Суммы.СуммаНДСУпр, Строки.Сумма / КурсВалютыУпрУчета.Курс) КАК СуммаУУ,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.ПрочиеАктивыПассивы) КАК ВидСчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаДт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаДт,
	|
	|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК ВалютаДт,
	|	Операция.Подразделение КАК ПодразделениеДт,
	|	Операция.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|
	|	Операция.НастройкаСчетовУчета.СчетУчета КАК СчетДт,
	|	Операция.НастройкаСчетовУчета.Субконто1 КАК СубконтоДт1,
	|	Операция.НастройкаСчетовУчета.Субконто2 КАК СубконтоДт2,
	|	Операция.НастройкаСчетовУчета.Субконто3 КАК СубконтоДт3,
	|
	|	0 КАК ВалютнаяСуммаДт,
	|	0 КАК КоличествоДт,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК СуммаНУДт,
	|	0 КАК СуммаПРДт,
	|	0 КАК СуммаВРДт,
	|
	|	ЗНАЧЕНИЕ(Перечисление.ВидыСчетовРеглУчета.РасчетыПоПретензиям) КАК ВидСчетаКт,
	|	Расчеты.ГруппаФинансовогоУчета КАК АналитикаУчетаКт,
	|	НЕОПРЕДЕЛЕНО КАК МестоУчетаКт,
	|
	|	Расчеты.Валюта КАК ВалютаКт,
	|	Расчеты.Подразделение КАК ПодразделениеКт,
	|	Расчеты.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|
	|	НЕОПРЕДЕЛЕНО КАК СчетКт,
	|
	|	Расчеты.Контрагент КАК СубконтоКт1,
	|	Расчеты.Договор КАК СубконтоКт2,
	|	НЕОПРЕДЕЛЕНО КАК СубконтоКт3,
	|
	|	0 КАК ВалютнаяСуммаКт,
	|	Строки.Количество КАК КоличествоКт,
	|	ЕСТЬNULL(Суммы.СуммаБезНДСРегл + Суммы.СуммаНДСРегл, Строки.Сумма) КАК СуммаНУКт,
	|	0 КАК СуммаПРКт,
	|	0 КАК СуммаВРКт,
	|	""Возмещение убытков поклажедателя на прочие активы"" КАК Содержание
	|	
	|ИЗ
	|	ДокументыКОтражению КАК ДокументыКОтражению
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров КАК Операция
	|	ПО
	|		ДокументыКОтражению.Ссылка = Операция.Ссылка
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		Документ.СписаниеПринятыхНаХранениеТоваров.ВидыЗапасов КАК Строки
	|	ПО
	|		Операция.Ссылка = Строки.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СуммыДокументовВВалютахУчета КАК Суммы
	|	ПО
	|		Строки.Ссылка = Суммы.Регистратор
	|		И Строки.ИдентификаторСтроки = Суммы.ИдентификаторСтроки
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		ВТРасчетыСПоставщиками КАК Расчеты
	|	ПО 
	|		Операция.Ссылка = Расчеты.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		КурсыВалют КАК КурсВалютыУпрУчета
	|	ПО
	|		КурсВалютыУпрУчета.Валюта = &ВалютаУпрУчета
	|		И КурсВалютыУпрУчета.Дата = НАЧАЛОПЕРИОДА(Операция.Дата, День)
	|
	|ГДЕ
	|	Операция.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.СписаниеПринятыхТоваровНаРасходы)
	|	И Операция.СтатьяРасходов ССЫЛКА ПланВидовХарактеристик.СтатьиАктивовПассивов
	|";
	ТекстыОтражения.Добавить(ТекстЗапроса);
#КонецОбласти

	Возврат СтрСоединить(ТекстыОтражения, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	//-- Локализация
	Возврат "";
	
КонецФункции

// Функция возвращает текст запроса дополнительных временных таблиц,
// необходимых для отражения в регламентированном учете
//
// Возвращаемое значение:
//   Строка - сформированный текст запроса.
//
Функция ТекстЗапросаВТОтраженияВРеглУчете() Экспорт
	
	Возврат "";
	
КонецФункции

#КонецОбласти
//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Процедура дополняет тексты запросов проведения документа.
//
// Параметры:
//  Запрос - Запрос - Общий запрос проведения документа.
//  ТекстыЗапроса - СписокЗначений - Список текстов запроса проведения.
//  Регистры - Строка, Структура - Список регистров проведения документа через запятую или в ключах структуры.
//
Процедура ДополнитьТекстыЗапросовПроведения(Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	//++ Локализация
	//++ НЕ УТ
	ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры);
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры

//++ Локализация

//++ НЕ УТ

Функция ТекстЗапросаТаблицаОтражениеДокументовВРеглУчете(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОтражениеДокументовВРеглУчете";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период      КАК Период,
	|	&Организация КАК Организация,
	|	НАЧАЛОПЕРИОДА(&Период, ДЕНЬ) КАК ДатаОтражения";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции
//-- НЕ УТ
//-- Локализация

#КонецОбласти

#КонецОбласти
