
#Область ПрограммныйИнтерфейс

Функция ОпределитьУсловияВидимостиИДвиженияПоСамостоятельнумуКонтролю(ДокументДвиженияИнвестиций) Экспорт
	
	Если НЕ ДокументДвиженияИнвестиций.НалоговыйУчет Тогда
		Возврат Ложь;
	КонецЕсли;
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(ДокументДвиженияИнвестиций.Организация);
	МассивОрганизаций.Добавить(ДокументДвиженияИнвестиций.ОбъектИнвестирования);
	СоотвествиеЗначенийРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивОрганизаций, "ИностранныйНалоговыйРезидент");
	ОрганизацияИО = СоотвествиеЗначенийРеквизитов.Получить(ДокументДвиженияИнвестиций.Организация);
	ОбъектИнвестированияИО = СоотвествиеЗначенийРеквизитов.Получить(ДокументДвиженияИнвестиций.ОбъектИнвестирования);
	Возврат ?(ОрганизацияИО = Неопределено ИЛИ ОбъектИнвестированияИО = Неопределено, Ложь, НЕ ОрганизацияИО.ИностранныйНалоговыйРезидент И ОбъектИнвестированияИО.ИностранныйНалоговыйРезидент);
	
КонецФункции

Функция ПолучитьКодВидаИностраннойСтруктуры(ВидИностраннойСтруктуры) Экспорт
	Если ВидИностраннойСтруктуры = Перечисления.ВидыИностранныхСтруктурБезОбразованияЮЛ.Фонд Тогда
		Возврат 1;
	ИначеЕсли ВидИностраннойСтруктуры = Перечисления.ВидыИностранныхСтруктурБезОбразованияЮЛ.Партнерство Тогда
		Возврат 2;
	ИначеЕсли ВидИностраннойСтруктуры = Перечисления.ВидыИностранныхСтруктурБезОбразованияЮЛ.Траст Тогда
		Возврат 3;
	ИначеЕсли ВидИностраннойСтруктуры = Перечисления.ВидыИностранныхСтруктурБезОбразованияЮЛ.Товарищество Тогда
		Возврат 4;
	ИначеЕсли ВидИностраннойСтруктуры = Перечисления.ВидыИностранныхСтруктурБезОбразованияЮЛ.ИнаяФорма Тогда
		Возврат 5;
	Иначе
		Возврат ""; //для вызова из рег.отчетности
	КонецЕсли;
КонецФункции

Функция ПолучитьТаблицуНалоговыхОсвобождений(Дата, Сценарий) Экспорт
	Период = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(НачалоГода(Дата), Перечисления.Периодичность.Год, 0);
	Показатель = Справочники.ПоказателиОтчетов.НайтиПоКоду("С_ОсвобождПрибылиКИК_Значение");
	
	// Раньше использовался отдельный сценарий для долей и отдельный для освобождений (СценарийОтчетностиКИК)
	ОтборВерсий = Новый Структура("Сценарий, ПериодОтчета, ИспользоватьОсновнуюВалюту", Сценарий, Период, Истина); 

	ОтборПоказателей = Новый Соответствие();
	ОтборПоказателей.Вставить("ПоказательОтчета", Показатель);

	ПоляВыборки = Новый Соответствие();
	ПоляВыборки.Вставить("ПоказательОтчета");
	ПоляВыборки.Вставить("Значение");
	ПоляВыборки.Вставить("Организация");
	ПоляВыборки.Вставить("Аналитика1");

	Запрос = Справочники.ВидыОтчетов.ПолучитьЗапросТаблицыЗначенийПоказателей(ОтборВерсий, ОтборПоказателей, , ПоляВыборки, Новый Структура("ПолучитьНечисловые", Истина));
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Функция ПолучитьТекстЗапросаСтатусов(ОтборПоИнвестор = Ложь) Экспорт
	
	ТекстЗапроса =  
		"ВЫБРАТЬ
		|	СтатусыОбъектовИнвестированияСрезПоследних.Инвестор КАК Инвестор,
		|	СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|	СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля КАК ЭффективнаяДоля,
		|	ВЫБОР
		|		КОГДА СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля >= 10
		|				ИЛИ ЕСТЬNULL(СамостоятельноеПризнаниеКонтроляСрезПоследних.ПризнаниеКонтроля, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИностраннаяКомпанияТребующаяУведомление,
		|	ВЫБОР
		|		КОГДА &ДатаСреза >= ДАТАВРЕМЯ(2016, 1, 1)
		|				И СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля >= 25
		|			ТОГДА ИСТИНА
		|		КОГДА &ДатаСреза >= ДАТАВРЕМЯ(2015, 1, 1)
		|				И СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля >= 50
		|			ТОГДА ИСТИНА
		|		КОГДА ЕСТЬNULL(СамостоятельноеПризнаниеКонтроляСрезПоследних.ПризнаниеКонтроля, ЛОЖЬ)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК КонтролируемаяИностраннаяКомпания,
		|	СтатусыОбъектовИнвестированияСрезПоследних.ЦепочкаПАО КАК ЦепочкаПАО,
		|	СтатусыОбъектовИнвестированияСрезПоследних.Инвестор.ИспользоватьВРегламентированномУчете КАК ИнвесторИспользоватьВРегламентированномУчете,
		|	СтатусыОбъектовИнвестированияСрезПоследних.Сценарий КАК Сценарий,
		|	СтатусыОбъектовИнвестированияСрезПоследних.Инвестор.ИностранныйНалоговыйРезидент КАК ИнвесторИностранныйНалоговыйРезидент,
		|	СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования.ИностранныйНалоговыйРезидент КАК ОбъектИнвестированияИностранныйНалоговыйРезидент,
		|	ЕСТЬNULL(СамостоятельноеПризнаниеКонтроляСрезПоследних.ПризнаниеКонтроля, ЛОЖЬ) КАК СамостоятельноеПризнаниеКонтроля,
		|	ЕСТЬNULL(СамостоятельноеПризнаниеКонтроляСрезПоследних.ОснованиеКонтроля, """") КАК ОснованиеКонтроля
		|ПОМЕСТИТЬ Расчет
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
		|			&ДатаСреза,
		|			Сценарий = &Сценарий
		|				И &ОтборПоИнвестор) КАК СтатусыОбъектовИнвестированияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СамостоятельноеПризнаниеКонтроля.СрезПоследних КАК СамостоятельноеПризнаниеКонтроляСрезПоследних
		|		ПО СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования = СамостоятельноеПризнаниеКонтроляСрезПоследних.ОбъектИнвестирования
		|			И СтатусыОбъектовИнвестированияСрезПоследних.Инвестор = СамостоятельноеПризнаниеКонтроляСрезПоследних.Инвестор
		|ГДЕ
		|	СтатусыОбъектовИнвестированияСрезПоследних.Инвестор.ИспользоватьВРегламентированномУчете = ИСТИНА
		|	И СтатусыОбъектовИнвестированияСрезПоследних.Инвестор.ИностранныйНалоговыйРезидент = ЛОЖЬ
		|	И СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования.ИностранныйНалоговыйРезидент = ИСТИНА
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИнвесторИспользоватьВРегламентированномУчете,
		|	ИностраннаяКомпанияТребующаяУведомление,
		|	КонтролируемаяИностраннаяКомпания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|	Расчет.Сценарий КАК Сценарий,
		|	СУММА(Расчет.ЭффективнаяДоля) КАК ЭффективнаяДоля
		|ПОМЕСТИТЬ ДоляРоссийскихИнвесторов
		|ИЗ
		|	Расчет КАК Расчет
		|ГДЕ
		|	Расчет.ИностраннаяКомпанияТребующаяУведомление = ИСТИНА
		|	И Расчет.ИнвесторИспользоватьВРегламентированномУчете = ИСТИНА
		|
		|СГРУППИРОВАТЬ ПО
		|	Расчет.ОбъектИнвестирования,
		|	Расчет.Сценарий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Расчет.Сценарий КАК Сценарий,
		|	Расчет.Инвестор КАК Инвестор,
		|	Расчет.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|	Расчет.ЭффективнаяДоля КАК ЭффективнаяДоля,
		|	ВЫБОР
		|		КОГДА Расчет.ЦепочкаПАО
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ Расчет.ИностраннаяКомпанияТребующаяУведомление
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ Расчет.КонтролируемаяИностраннаяКомпания
		|			ТОГДА ВЫБОР
		|					КОГДА ДоляРоссийскихИнвесторов.ЭффективнаяДоля > 50
		|							И Расчет.ЭффективнаяДоля > 10
		|							И &ДатаСреза >= ДАТАВРЕМЯ(2016, 1, 1)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ЛОЖЬ
		|				КОНЕЦ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКИК
		|ИЗ
		|	Расчет КАК Расчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ ДоляРоссийскихИнвесторов КАК ДоляРоссийскихИнвесторов
		|		ПО Расчет.ОбъектИнвестирования = ДоляРоссийскихИнвесторов.ОбъектИнвестирования
		|			И Расчет.Сценарий = ДоляРоссийскихИнвесторов.Сценарий";
	
	Если ОтборПоИнвестор Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИнвестор", "Инвестор = &Инвестор");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоИнвестор", "ИСТИНА");
	КонецЕсли;
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ЭтоУведомлениеКИК(Вид) Экспорт
	Возврат Вид = "Уведомление о КИК";
КонецФункции

Процедура ЗаполнитьСведФЛ(СведФЛ, Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.ИндивидуальныйПредприниматель.ИНН КАК П_ИНН,
		|	Организации.ИндивидуальныйПредприниматель.Фамилия КАК Фамилия_ИП,
		|	Организации.ИндивидуальныйПредприниматель.Имя КАК Имя_ИП,
		|	Организации.ИндивидуальныйПредприниматель.Отчество КАК Отчество_ИП,
		|	ВЫБОР
		|		КОГДА Организации.ИндивидуальныйПредприниматель.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
		|			ТОГДА ""1""
		|		КОГДА Организации.ИндивидуальныйПредприниматель.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
		|			ТОГДА ""2""
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК Пол,
		|	Организации.ИндивидуальныйПредприниматель.ДатаРождения КАК ДатаРождения,
		|	Организации.ИндивидуальныйПредприниматель.ДатаРождения КАК ДатаРождДата,
		|	Организации.ИндивидуальныйПредприниматель.МестоРождения КАК МестоРождения,
		|	Организации.ИндивидуальныйПредприниматель.МестоРождения КАК МестоРожд,
		|	&УИД КАК УИД
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Организация);
	Запрос.УстановитьПараметр("УИД", Новый УникальныйИдентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СведФЛ, ВыборкаДетальныеЗаписи);
	Иначе 
		Возврат;
	КонецЕсли;
	
	
КонецПроцедуры

Функция ЗаполнитьВыходныеФормыУведомленияОбИК(ДанныеУведомления, СлужебныеДанныеУведомления, Организация, ПечатныеРеквизиты, ДатаУведомления, Сценарий) Экспорт // ФИО = "", Телефон = "", ДатаПодписи = "", Представитель = "") Экспорт
	
	// Конвертация документа в ПФ
	ОчиститьТаблицыУведомленияИК(ДанныеУведомления);
	
	ТС = ДанныеУведомления.ТитульнаяСтраница.Добавить();
	ЗаполнитьТитульнуюСтраницу(ТС, Организация, ПечатныеРеквизиты, СлужебныеДанныеУведомления.НомерКорректировки, СлужебныеДанныеУведомления.НалоговыйПериод, СлужебныеДанныеУведомления.Признак, "");
	
	Если Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		СведФЛ = ДанныеУведомления.СведФЛ.Добавить();
		ЗаполнитьСведФЛ(СведФЛ, Организация);
	Иначе
		ДанныеУведомления.СведФЛ.Очистить();
	КонецЕсли;
	
	ОснованиеПодачи = Неопределено;
	СлужебныеДанныеУведомления.Свойство("ОснованиеПодачи", ОснованиеПодачи);
	Если ЗначениеЗаполнено(ОснованиеПодачи) Тогда
		ТС.Основание = Перечисления.ОснованияПодачиУведомленийОбИО.Индекс(ОснованиеПодачи) + 1;
	Иначе
		ТС.Основание = "2";
	КонецЕсли;
	
	Если СлужебныеДанныеУведомления.Цепочки.Найти(Организация, "ОбъектИнвестированияПоследовательности") = Неопределено Тогда
		ЕстьКольцевоеВладение = Ложь;
	Иначе
		ЕстьКольцевоеВладение = Истина;
	КонецЕсли;
	
	РезультатЗапроса = РазбитьТаблицуВладенияНаЦепочки(СлужебныеДанныеУведомления.Цепочки, Организация);
	ВыборкаКосвенныхДолей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	МассивОрганизацийПоследовательностей = ПолучитьМассивОрганизацийИзЦепочки(СлужебныеДанныеУведомления.Цепочки);
	
	РезультатЗапроса = ПолучитьТаблицуИнвестиций(Организация, Сценарий, ДатаУведомления, ЕстьКольцевоеВладение, МассивОрганизацийПоследовательностей);
	ВыборкаОрганизаций = РезультатЗапроса.Выгрузить();
	
	
	ВыборкаОрганизаций.Колонки.Добавить("ПрефиксОрганизации", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(2));
	ВыборкаОрганизаций.Колонки.Добавить("UID", Новый ОписаниеТипов("УникальныйИдентификатор"));
	
	ЗаполнитьОсновныеСтраницыУведомления(ВыборкаОрганизаций, ДанныеУведомления, Организация, СлужебныеДанныеУведомления, Ложь, Неопределено, ДатаУведомления);
	
	Пока ВыборкаКосвенныхДолей.Следующий() Цикл
		
		СтрокаОрганизации = ВыборкаОрганизаций.Найти(ВыборкаКосвенныхДолей.ОбъектИнвестирования, "Инвестиция");
		Если СтрокаОрганизации = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаОрганизации.ИностраннаяОрганизация Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаЦепочекВладения = ВыборкаКосвенныхДолей.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СчетчикЦепочекКосвенныхДолей = 0;
		
		Пока ВыборкаЦепочекВладения.Следующий() Цикл
			
			Если НЕ СтрокаОрганизации.ИностраннаяСтруктура Тогда
				ВыборкаЦепочки = ВыборкаЦепочекВладения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				// Согласно 68 пункту инструкции по заполнению уведомления нужно заполнять лист Г для отдельной последовательности прямого участия
				Если ВыборкаЦепочки.Количество() = 1 И СтрокаОрганизации.ПризнакВладения = 1 Тогда
					Продолжить;
				КонецЕсли;
				
				СчетчикЦепочекКосвенныхДолей = СчетчикЦепочекКосвенныхДолей + 1;
				Строка2 = ДанныеУведомления.СведУч.Добавить();
				Строка2.П_ИНН_4 = Организация.ИНН;
				Строка2.П_КПП_4 = Организация.КПП;
				Строка2.UID = Новый УникальныйИдентификатор;
				Строка2.НомерУчастника = СтрокаОрганизации.ПрефиксОрганизации + "-" + Формат(СтрокаОрганизации.НомерУчастника, "ЧЦ=5; ЧВН=; ЧГ=" );
				Строка2.ПолноеНаименование = СтрокаОрганизации.Инвестиция.НаименованиеПолное;
				Строка2.ДоляКосвУчастия = СтрокаОрганизации.ПолнаяДоля;
				Строка2.НомерГруппы = СчетчикЦепочекКосвенныхДолей;
				
				ДоляКосвУчастияГр = 0;
				ДоляПрямУчастияГр = 0;
				Пока ВыборкаЦепочки.Следующий() Цикл
					СтрокаОрганизацииЦепочки = ВыборкаОрганизаций.Найти(ВыборкаЦепочки.ОбъектИнвестированияПоследовательности, "Инвестиция");
					Если СтрокаОрганизацииЦепочки = Неопределено Тогда
						//Сообщить("Ошибка расчета последовательности владения для объекта инвестирования: " + СтрокаОрганизации.Инвестиция + ". Не найден объект инвестирования последовательности: " + ВыборкаЦепочки.ОбъектИнвестированияПоследовательности);
						Продолжить;
					КонецЕсли;
					Строка3 = ДанныеУведомления.МногострочнаяЧасть.Добавить();
					Строка3.UID = Строка2.UID;
					Строка3.НомерУчастника = СтрокаОрганизацииЦепочки.ПрефиксОрганизации + "-" + Формат(СтрокаОрганизацииЦепочки.НомерУчастника, "ЧЦ=5; ЧВН=; ЧГ=" );
					Строка3.ДоляПрУчастия = ВыборкаЦепочки.ПрямаяДоля;
					Строка3.ДоляКосвУчастия = ?(ВыборкаЦепочки.ЭффективнаяДоля < ВыборкаЦепочки.ПрямаяДоля, ВыборкаЦепочки.ЭффективнаяДоля, ВыборкаЦепочки.ЭффективнаяДоля - ВыборкаЦепочки.ПрямаяДоля);
					
					ДоляКосвУчастияГр = Строка3.ДоляКосвУчастия;
					ДоляПрямУчастияГр = Строка3.ДоляПрУчастия;
					
				КонецЦикла;
				Если ДоляКосвУчастияГр = 0 Тогда
					Строка2.ДоляКосвУчастияГр = ДоляПрямУчастияГр;
				Иначе
					Строка2.ДоляКосвУчастияГр = ДоляКосвУчастияГр;
				КонецЕсли;
			Иначе
				Стр4 = СлужебныеДанныеУведомления.ИностранныеИнвестиции.Найти(СтрокаОрганизации.Инвестиция, "Инвестиция");
				Если Стр4 <> Неопределено Тогда
					Если Стр4.ИнвесторЯвляетсяУчредителем ИЛИ Стр4.ИнвесторОсуществляетКонтроль ИЛИ Стр4.ИнвесторИмеетПравоНаДоход Тогда
						Строка3 = ДанныеУведомления.СведИСУч.Добавить();
						Строка3.UID = Новый УникальныйИдентификатор;
						Строка3.UID_parent = СтрокаОрганизации.UID;
						Строка3.П_ИНН_6 = Организация.ИНН;
						Строка3.П_КПП_6 = Организация.КПП;
						Строка3.ПрУч = ?(Стр4.ИнвесторЯвляетсяУчредителем, 1, 0);
						Строка3.ПрКон = ?(Стр4.ИнвесторОсуществляетКонтроль, 1, 0);
						Строка3.ПрДох = ?(Стр4.ИнвесторИмеетПравоНаДоход, 1, 0);
						Строка3.ИС_Статус_RUS = Стр4.СтатусИнветораКакУчастникаИностраннойСтруктуры;
						Строка3.ИС_Статус_EN = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(Строка3.ИС_Статус_RUS);
						РасчетДатЦепочки = ОпределениеДатыНачалаИОкончанияВладения(Организация, Стр4.Инвестиция, ДатаУведомления);
						Строка3.ДатаНачИС = РасчетДатЦепочки.ДатаНачала;
						Строка3.ДатаКонИС = РасчетДатЦепочки.ДатаОкончания;
						Строка3.УчИнСтр = 1;
					КонецЕсли;
				КонецЕсли;
				//ВыборкаЦепочки = ВыборкаЦепочекВладения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				//Пока ВыборкаЦепочки.Следующий() Цикл
				//	Строка3 = ДанныеУведомления.СведИСУч.Добавить();
				//	Строка3.UID = Новый УникальныйИдентификатор;
				//	Строка3.UID_parent = СтрокаОрганизации.UID;
				//	Строка3.П_ИНН_6 = Организация.ИНН;
				//	Строка3.П_КПП_6 = Организация.КПП;
				//	//Строка3.ПрУч = 1;
				//	//Строка3.ПрКон = 1;
				//	//Строка3.ИС_Статус_RUS = ПолучитьОснованияВладенияИС(Организация, ВыборкаЦепочки.ОбъектИнвестирования);
				//	//СтатусИС = ПолучитьОснованияВладенияИС(Организация, ВыборкаЦепочки.ОбъектИнвестирования);
				//	//ЗаполнитьЗначенияСвойств(Строка3, СтатусИС);
				//	//Строка3.ИС_Статус_EN = СтроковыеФункцииКлиентСервер.СтрокаЛатиницей(СтатусИС.ИС_Статус_RUS);
				//	РасчетДатЦепочки = ОпределениеДатыНачалаИОкончанияВладения(Организация, ВыборкаЦепочки.ОбъектИнвестирования, ТекущаяДата());
				//	Строка3.ДатаНачИС = РасчетДатЦепочки.ДатаНачала;
				//	Строка3.ДатаКонИС = РасчетДатЦепочки.ДатаОкончания;
				//	Строка3.УчИнСтр = 1;
				//КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	Возврат ВыборкаОрганизаций;
КонецФункции

Функция ПолучитьГеоПризнаки(Страна, Период) Экспорт		
	Возврат РегистрыСведений.ГеографическиеПризнакиНалоговогоОсвобожденияКИК.ПолучитьГеоПризнаки(Страна, Период);	
КонецФункции

Процедура ОбновитьНумерациюПоследовательностей(НумерацияПоследовательностей, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Инвестиция,
		|	Таблица.НомерУчастника
		|ПОМЕСТИТЬ НовыеДанные
		|ИЗ
		|	&Таблица КАК Таблица
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	&Инвестор,
		|	НовыеДанные.Инвестиция,
		|	НовыеДанные.НомерУчастника КАК НомерУчастника
		|ИЗ
		|	НовыеДанные КАК НовыеДанные
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НумерацияПоследовательностейВладения КАК НумерацияПоследовательностейВладения
		|		ПО НовыеДанные.Инвестиция = НумерацияПоследовательностейВладения.Инвестиция
		|			И (НумерацияПоследовательностейВладения.Инвестор = &Инвестор)
		|ГДЕ
		|	НумерацияПоследовательностейВладения.НомерУчастника ЕСТЬ NULL
		|	И НовыеДанные.НомерУчастника <> 0";
	
	Запрос.УстановитьПараметр("Инвестор", Организация);
	Запрос.УстановитьПараметр("Таблица", НумерацияПоследовательностей);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Набор = РегистрыСведений.НумерацияПоследовательностейВладения.СоздатьНаборЗаписей();
		Набор.Отбор.Инвестор.Установить(ВыборкаДетальныеЗаписи.Инвестор);
		Набор.Отбор.Инвестиция.Установить(ВыборкаДетальныеЗаписи.Инвестиция);
		Запись = Набор.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		Набор.Записать();
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКодСводныйРегистр() Экспорт
	Возврат "СводныйКИК";
КонецФункции

Функция ПолучитьГруппуВидовОтчетаКИК() Экспорт
	
	Возврат Константы.ГруппаОтчетовКИК.Получить();
	
КонецФункции

Функция ПолучитьВидДеятельностиИК(Организация) Экспорт

	Если Организация.ЭтоБанк Тогда
		Возврат 1;
	ИначеЕсли Организация.ЭтоСтраховаяКомпания Тогда
		Возврат 2;
	ИначеЕсли Организация.ЭтоНКО Тогда
		Возврат 3;
	ИначеЕсли Организация.ЭтоМеждународныйХолдинг Тогда
		Возврат 4;
	Иначе 
		Возврат 5; 	
	КонецЕсли;	

КонецФункции

Процедура ПодставитьСтатусИК(ТекстЗапроса, ИмяТаблицыСтатусы = "Статусы", ИмяПараметраДатаСреза = "ДатаСреза") Экспорт

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СтатусКИК", ТекстПоля_СтатусИК(ИмяТаблицыСтатусы, ИмяПараметраДатаСреза));

КонецПроцедуры

#КонецОбласти

#Область Документ_УведомлениеОСпецрежимахНалогообложения

Процедура ПолучениеФормыУведомленияОКонтролируемыхИООбработкаПолученияФормы(Источник, ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка) Экспорт
	
	Если Константы.ОтключитьАвтоматическоеЗаполнениеУведомленийИК.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		Ключ = Неопределено;
		ВидУведомления = Неопределено;
		Если Параметры.Свойство("Ключ", Ключ) ИЛИ Параметры.Свойство("ВидУведомления", ВидУведомления) Тогда
			Если ТипЗнч(Ключ) = Тип("ДокументСсылка.УведомлениеОСпецрежимахНалогообложения") Тогда
				ВидУведомления = Ключ.ВидУведомления;
			КонецЕсли;
			Если ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаУ_ИО") 
					ИЛИ ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК") Тогда
				ВыбраннаяФорма = "ФормаДокументаУХ";
				СтандартнаяОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедуры

Функция ПолучитьМассивОрганизацийИзЦепочки(Цепочка)
	Объект = Цепочка.Скопировать();
	Объект.Свернуть("ОбъектИнвестированияПоследовательности");
	Результат = Объект.ВыгрузитьКолонку("ОбъектИнвестированияПоследовательности");
	Инвестор = Цепочка.Скопировать();
	Инвестор.Свернуть("ИнвесторПоследовательности");
	Для каждого Стр Из Инвестор Цикл
		Если Результат.Найти(Стр.ИнвесторПоследовательности) = Неопределено Тогда
			Результат.Добавить(Стр.ИнвесторПоследовательности);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция МаксимумПоВиду(Таблица, Префикс)
	Счетчик = 1;
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы.ПрефиксОрганизации = Префикс;
		Если СтрокаТаблицы.НомерУчастника >= Счетчик Тогда
			Счетчик = СтрокаТаблицы.НомерУчастника + 1;
		КонецЕсли;
	КонецЦикла;
	Возврат Счетчик;
	//Выгрузка = Таблица.Скопировать(Новый Структура("ПрефиксОрганизации", Префикс));
	//Размер = Выгрузка.Количество();
	//Если Размер > 0 Тогда
	//	Выгрузка.Сортировать("НомерУчастника");
	//	Возврат Выгрузка[Размер - 1].НомерУчастника + 1;
	//Иначе
	//	Возврат 1;
	//КонецЕсли;
КонецФункции

// Функция - Получить регистрацию в ИФНС
//
// Параметры:
//  Организация	 - 	организация для которой определяется налоговая инспекция 
// 
// Возвращаемое значение:
//  Ссылка на налоговый орган оранизации, только если он единственный. В противном случае не заполняется. 
//
Функция ПолучитьРегистрациюВИФНС(Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегистрацииВНалоговомОргане.Ссылка
		|ИЗ
		|	Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|ГДЕ
		|	РегистрацииВНалоговомОргане.Владелец = &Организация
		|	И РегистрацииВНалоговомОргане.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Количество() = 1 Тогда
		ВыборкаДетальныеЗаписи.Следующий();
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ОпределениеДатыНачалаИОкончанияВладения(Инвестор, ОбъектИнвестирования, Период)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатусыОбъектовИнвестирования.Период КАК Период,
	               |	СтатусыОбъектовИнвестирования.Инвестор КАК Инвестор,
	               |	СтатусыОбъектовИнвестирования.ОбъектИнвестирования КАК ОбъектИнвестирования,
	               |	СтатусыОбъектовИнвестирования.Сценарий КАК Сценарий,
	               |	СтатусыОбъектовИнвестирования.ЭффективнаяДоля КАК ЭффективнаяДоля
	               |ИЗ
	               |	РегистрСведений.СтатусыОбъектовИнвестирования КАК СтатусыОбъектовИнвестирования
	               |ГДЕ
	               |	СтатусыОбъектовИнвестирования.ОбъектИнвестирования = &ОбъектИнвестирования
	               |	И СтатусыОбъектовИнвестирования.Инвестор = &Инвестор
	               |	И СтатусыОбъектовИнвестирования.Период <= &Период
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ДАТАВРЕМЯ(1, 1, 1),
	               |	&Инвестор,
	               |	&ОбъектИнвестирования,
	               |	СценарийОтчетностиКИК.Значение,
	               |	0
	               |ИЗ
	               |	Константа.СценарийОтчетностиКИК КАК СценарийОтчетностиКИК";
				   
	Запрос.УстановитьПараметр("Инвестор", Инвестор);
	Запрос.УстановитьПараметр("ОбъектИнвестирования", ОбъектИнвестирования);
	Запрос.УстановитьПараметр("Период", Период);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Результат = Новый Структура("ДатаНачала, ДатаОкончания, ДатаИзменения", Дата('00010101'), Дата('00010101'), Дата('00010101'));
	ДатаНачалаВладения = "";
	ДатаОкончанияВладения = "";
	ДатаИзмененияВладения = "";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЭффективнаяДоля = 0 Тогда
			Если Не ЗначениеЗаполнено(ДатаОкончанияВладения) Тогда
				ДатаОкончанияВладения = ВыборкаДетальныеЗаписи.Период;
			Иначе
				Прервать;
			КонецЕсли;
		Иначе
			ДатаНачалаВладения = ВыборкаДетальныеЗаписи.Период;
			Если ДатаИзмененияВладения = "" Тогда
				ДатаИзмененияВладения = ВыборкаДетальныеЗаписи.Период;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Результат.ДатаНачала = ДатаНачалаВладения;
	Результат.ДатаОкончания = ДатаОкончанияВладения;
	Результат.ДатаИзменения = ДатаИзмененияВладения;
	
	Возврат Результат;
	
КонецФункции

Процедура ОчиститьТаблицыУведомленияИК(ДанныеУведомления)
	ДанныеУведомления.ТитульнаяСтраница.Очистить();
	ДанныеУведомления.МногострочнаяЧасть.Очистить();
	ДанныеУведомления.СведИО.Очистить();
	ДанныеУведомления.СведИС.Очистить();
	ДанныеУведомления.СведИСУч.Очистить();
	ДанныеУведомления.СведРО.Очистить();
	ДанныеУведомления.СведУч.Очистить();
	ДанныеУведомления.СведФЛ.Очистить();
КонецПроцедуры

Процедура ЗаполнитьТитульнуюСтраницу(ТС, Организация, ПечатныеРеквизиты, НомерКорректировки, НалоговыйПериод, Признак, КодНалоговогоОргана) Экспорт;
	ТС.П_ИНН 							= Организация.ИНН;
	ТС.П_КПП 							= Организация.КПП;
	ТС.КОД_НО 							= ?(ПустаяСтрока(КодНалоговогоОргана), Организация.КодНалоговогоОргана, КодНалоговогоОргана);
	ТС.КодНо 							= ТС.КОД_НО;
	ТС.НАИМЕНОВАНИЕ_ОРГАНИЗАЦИИ 		= Организация.Наименование;
	ТС.ОГРН 							= Организация.ОГРН;
	ТС.EMAIL_ПОДПИСАНТА 				= "";
	ТС.ДАТА_ПОДПИСИ 					= ПечатныеРеквизиты.ДатаПодписи;
	ТС.UID = Организация.УникальныйИдентификатор();
	ТС.ТЕЛЕФОН 							= ПечатныеРеквизиты.Телефон;
	ТС.ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ 	= ПечатныеРеквизиты.ФИО;
	ТС.ПРИЗНАК_НП_ПОДВАЛ 				= ПечатныеРеквизиты.Представитель;
	ТС.НомерКорректировки 				= НомерКорректировки;
	ТС.Основание 						= "";
	ТС.НалоговыйПериод 					= Формат(НалоговыйПериод, "ЧГ=");
	ТС.ИНН 								= Организация.ИНН;
	ТС.КПП 								= Организация.КПП;
	ТС.НаимДок 							= "";
	ТС.Наименование 					= Организация.Наименование;
	ТС.НалПер		 					= Формат(НалоговыйПериод, "ЧГ=");
	ТС.ПрНпл 							= 1;
	ТС.ПрНП 							= Признак;
	ТС.Тлф 								= ПечатныеРеквизиты.Телефон;
КонецПроцедуры

Функция РазбитьТаблицуВладенияНаЦепочки(Таблица, Организация)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.ОбъектИнвестирования,
		|	Таблица.ОбъектИнвестированияПоследовательности,
		|	Таблица.ИнвесторПоследовательности,
		|	Таблица.НомерПоследовательностиУчастия,
		|	Таблица.Номер,
		|	Таблица.ПрямаяДоля,
		|	Таблица.ЭффективнаяДоля
		|ПОМЕСТИТЬ Исходная
		|ИЗ
		|	&Таблица КАК Таблица
		//|	Документ.УведомлениеОСпецрежимахНалогообложения.Цепочки КАК Таблица
		//|ГДЕ
		//|	Таблица.Ссылка = &Ссылка
		|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	КИКи.ОбъектИнвестирования,
		//|	МАКСИМУМ(ВЫБОР
		//|			КОГДА КИКи.ОбъектИнвестирования = КИКи.ОбъектИнвестированияПоследовательности
		//|					И КИКи.ИнвесторПоследовательности = &Инвестор
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ) КАК ЕстьПрямые,
		//|	МАКСИМУМ(ВЫБОР
		//|			КОГДА КИКи.ОбъектИнвестирования <> КИКи.ОбъектИнвестированияПоследовательности
		//|				ТОГДА ИСТИНА
		//|			ИНАЧЕ ЛОЖЬ
		//|		КОНЕЦ) КАК ЕстьКосвенные,
		//|	СУММА(ВЫБОР
		//|			КОГДА КИКи.ОбъектИнвестирования = КИКи.ОбъектИнвестированияПоследовательности
		//|				ТОГДА КИКи.ЭффективнаяДоля
		//|			ИНАЧЕ 0
		//|		КОНЕЦ) КАК Доля
		//|ПОМЕСТИТЬ РасчетВидовВладения
		//|ИЗ
		//|	Исходная КАК КИКи
		////|ГДЕ
		////|	КИКи.ОбъектИнвестирования.ИностранныйНалоговыйРезидент
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	КИКи.ОбъектИнвестирования
		//|
		////|ИМЕЮЩИЕ
		////|	СУММА(КИКи.ЭффективнаяДоля) > 10
		//|;
		//|
		//|////////////////////////////////////////////////////////////////////////////////
		//|ВЫБРАТЬ
		//|	КИКи.ОбъектИнвестированияПоследовательности КАК Инвестиция,
		//|	КИКи.ОбъектИнвестированияПоследовательности.ИностранныйНалоговыйРезидент КАК ИностраннаяОрганизация,
		//|	КИКи.ОбъектИнвестированияПоследовательности.ИностраннаяСтруктураБезОбразованияЮрЛица КАК ИностраннаяСтруктура,
		//|	ВЫБОР
		//|		КОГДА КИКи.ОбъектИнвестированияПоследовательности.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ КАК ИндивидуальныйПредприниматель,
		//|	СУММА(КИКи.ЭффективнаяДоля) КАК ПолнаяДоля,
		//|	ЕСТЬNULL(ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот, 0) КАК ПрямаяДоля,
		//|	МАКСИМУМ(ВЫБОР
		//|			КОГДА РасчетВидовВладения.ЕстьПрямые
		//|					И РасчетВидовВладения.ЕстьКосвенные
		//|				ТОГДА 3
		//|			КОГДА РасчетВидовВладения.ЕстьКосвенные
		//|				ТОГДА 2
		//|			ИНАЧЕ 1
		//|		КОНЕЦ) КАК ПризнакВладения,
		//|	ЕСТЬNULL(НумерацияПоследовательностейВладения.НомерУчастника, 0) КАК НомерУчастника
		//|ИЗ
		//|	Исходная КАК КИКи
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РасчетВидовВладения КАК РасчетВидовВладения
		//|		ПО КИКи.ОбъектИнвестирования = РасчетВидовВладения.ОбъектИнвестирования
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НумерацияПоследовательностейВладения КАК НумерацияПоследовательностейВладения
		//|		ПО КИКи.ОбъектИнвестированияПоследовательности = НумерацияПоследовательностейВладения.Инвестиция
		//|			И (НумерацияПоследовательностейВладения.Инвестор = &Инвестор)
		//|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеИнвестиций.Обороты(
		//|				,
		//|				,
		//|				,
		//|				Сценарий = &Сценарий
		//|					И Инвестор = &Инвестор) КАК ДвижениеИнвестицийОбороты
		//|		ПО КИКи.ОбъектИнвестированияПоследовательности = ДвижениеИнвестицийОбороты.ОбъектИнвестирования
		////|ГДЕ
		////|	КИКи.ОбъектИнвестирования.ИностранныйНалоговыйРезидент
		//|
		//|СГРУППИРОВАТЬ ПО
		//|	КИКи.ОбъектИнвестированияПоследовательности,
		//|	КИКи.ОбъектИнвестированияПоследовательности.ИностранныйНалоговыйРезидент,
		//|	КИКи.ОбъектИнвестированияПоследовательности.ИностраннаяСтруктураБезОбразованияЮрЛица,
		//|	ВЫБОР
		//|		КОГДА КИКи.ОбъектИнвестированияПоследовательности.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		//|			ТОГДА ИСТИНА
		//|		ИНАЧЕ ЛОЖЬ
		//|	КОНЕЦ,
		//|	ЕСТЬNULL(НумерацияПоследовательностейВладения.НомерУчастника, 0)
		//|;
		//|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КИКи.ОбъектИнвестирования КАК ОбъектИнвестирования,
		|	КИКи.ОбъектИнвестированияПоследовательности,
		|	КИКи.НомерПоследовательностиУчастия КАК НомерПоследовательностиУчастия,
		|	КИКи.ПрямаяДоля,
		|	КИКи.ЭффективнаяДоля,
		|	КИКи.Номер КАК Номер
		|ИЗ
		|	Исходная КАК КИКи
		|ГДЕ
		|	КИКи.ОбъектИнвестирования.ИностранныйНалоговыйРезидент
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерПоследовательностиУчастия,
		|	Номер
		|ИТОГИ ПО
		|	ОбъектИнвестирования,
		|	НомерПоследовательностиУчастия";
	
	
	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("Инвестор", Организация);
	
	//Возврат Запрос.ВыполнитьПакет();
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьТаблицуИнвестиций(Инвестор, Сценарий, Период, ЕстьКольцевоеВладение, ОтборИнвестиций)
	
	Запрос = Новый Запрос;
	Запрос.Текст =  
		"ВЫБРАТЬ
		|	СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования КАК Инвестиция,
		|	ЕСТЬNULL(СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля, 0) КАК ПолнаяДоля,
		|	ЕСТЬNULL(ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот, 0) КАК ПрямаяДоля,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот, 0) = 0
		|				И СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля <> 0
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот, 0) = СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля
		|			ТОГДА 1
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК ПризнакВладения,
		|	ВЫБОР
		|		КОГДА СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ИндивидуальныйПредприниматель,
		|	СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования.ИностранныйНалоговыйРезидент КАК ИностраннаяОрганизация,
		|	СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования.ИностраннаяСтруктураБезОбразованияЮрЛица КАК ИностраннаяСтруктура,
		|	ЕСТЬNULL(НумерацияПоследовательностейВладения.НомерУчастника, 0) КАК НомерУчастника
		|ИЗ
		|	РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
		|			&ДатаСреза,
		|			Инвестор = &Инвестор
		|				И Сценарий = &Сценарий) КАК СтатусыОбъектовИнвестированияСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДвижениеИнвестиций.Обороты КАК ДвижениеИнвестицийОбороты
		|		ПО СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования = ДвижениеИнвестицийОбороты.ОбъектИнвестирования
		|			И СтатусыОбъектовИнвестированияСрезПоследних.Инвестор = ДвижениеИнвестицийОбороты.Инвестор
		|			И СтатусыОбъектовИнвестированияСрезПоследних.Сценарий = ДвижениеИнвестицийОбороты.Сценарий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НумерацияПоследовательностейВладения КАК НумерацияПоследовательностейВладения
		|		ПО СтатусыОбъектовИнвестированияСрезПоследних.Инвестор = НумерацияПоследовательностейВладения.Инвестор
		|			И СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования = НумерацияПоследовательностейВладения.Инвестиция
		|ГДЕ
		|	СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования В(&ОтборИнвестиций)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Организации.Ссылка,
		|	0,
		|	0,
		|	2,
		|	ВЫБОР
		|		КОГДА Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ,
		|	Организации.ИностранныйНалоговыйРезидент,
		|	Организации.ИностраннаяСтруктураБезОбразованияЮрЛица,
		|	ЕСТЬNULL(НумерацияПоследовательностейВладения.НомерУчастника, 0)
		|ИЗ
		|	Справочник.Организации КАК Организации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НумерацияПоследовательностейВладения КАК НумерацияПоследовательностейВладения
		|		ПО Организации.Ссылка = НумерацияПоследовательностейВладения.Инвестор
		|			И Организации.Ссылка = НумерацияПоследовательностейВладения.Инвестиция
		|ГДЕ
		|	&ЕстьКольцевоеВладение
		|	И Организации.Ссылка = &Инвестор";
	
	Запрос.УстановитьПараметр("Инвестор", Инвестор);
	Запрос.УстановитьПараметр("ДатаСреза", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ЕстьКольцевоеВладение", ЕстьКольцевоеВладение);
	Запрос.УстановитьПараметр("ОтборИнвестиций", ОтборИнвестиций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура ЗаполнитьСтрокуФЛИК(НоваяСтрока, СтрокаТаблицы)
	НоваяСтрока.UID = Новый УникальныйИдентификатор;
	НоваяСтрока.П_ИНН1 = СтрокаТаблицы.Инвестиция.ИНН;
	НоваяСтрока.ФАМИЛИЯ_ИП = СтрокаТаблицы.Инвестиция.Наименование;
КонецПроцедуры

Процедура ЗаполнитьСтрокуРОИК(НоваяСтрока, СтрокаТаблицы, Организация)
	НоваяСтрока.UID = Новый УникальныйИдентификатор;
	НоваяСтрока.ОГРН2 = СтрокаТаблицы.Инвестиция.ОГРН;
	НоваяСтрока.ИНН2 = СтрокаТаблицы.Инвестиция.ИНН;
	НоваяСтрока.КПП2 = СтрокаТаблицы.Инвестиция.КПП;
	НоваяСтрока.РО_ПолноеНаименование = СтрокаТаблицы.Инвестиция.НаименованиеПолное;
	НоваяСтрока.РО_Номер = СтрокаТаблицы.НомерУчастника;
	НоваяСтрока.П_ИНН_3 = Организация.ИНН;
	НоваяСтрока.П_КПП_3 = Организация.КПП;
КонецПроцедуры

Функция АдресИностраннойОрганизации(Организиция)
	Адрес = Организиция.КонтактнаяИнформация.Выгрузить(Новый Структура("Вид", ВстраиваниеУХ.ВидыКонтактнойИнформацииИО()), "Представление");
	Если Адрес.Количество() > 0 Тогда
		Возврат Адрес[0].Представление;
	КонецЕсли;
КонецФункции

Процедура ЗаполнитьСтрокуИОИК(НоваяСтрока, СтрокаТаблицы, Организация, ДатаУведомления, Основание)
	НоваяСтрока.ИО_Номер = СтрокаТаблицы.НомерУчастника;
	НоваяСтрока.П_ИНН_2 = Организация.ИНН;
	НоваяСтрока.П_КПП_2 = Организация.КПП;
	НоваяСтрока.UID = Новый УникальныйИдентификатор;
	НоваяСтрока.ИО_ПолноеНаименование_RUS = СтрокаТаблицы.Инвестиция.НаименованиеПолное;
	НоваяСтрока.ИО_ПолноеНаименование_EN = СтрокаТаблицы.Инвестиция.НаименованиеИнострОрганизации;
	НоваяСтрока.КодСтранаРегистрации = СтрокаТаблицы.Инвестиция.СтранаРегистрации.Код;
	НоваяСтрока.РегНом1 = СтрокаТаблицы.Инвестиция.КодВСтранеРегистрации;
	НоваяСтрока.КодНом1 = СтрокаТаблицы.Инвестиция.КодНалогоплательщикаИностранный;
	НоваяСтрока.ИнАдр1 = АдресИностраннойОрганизации(СтрокаТаблицы.Инвестиция);
		
	НоваяСтрока.ПрУч1 = СтрокаТаблицы.ПризнакВладения;
	РасчетДатЦепочки = ОпределениеДатыНачалаИОкончанияВладения(Организация, СтрокаТаблицы.Инвестиция, ДатаУведомления);
	Если Основание = Перечисления.ОснованияПодачиУведомленийОбИО.ИзменениеДолиУчастия Тогда
		НоваяСтрока.ДатаНач1 = РасчетДатЦепочки.ДатаИзменения;
	ИначеЕсли Основание = Перечисления.ОснованияПодачиУведомленийОбИО.ОснованиеВозниклоДо15052015 Тогда
		НоваяСтрока.ДатаНач1 = '20150515';
	Иначе
		НоваяСтрока.ДатаНач1 = РасчетДатЦепочки.ДатаНачала;
	КонецЕсли;
	НоваяСтрока.ДатаКон1 = РасчетДатЦепочки.ДатаОкончания;
	НоваяСтрока.ДоляУчастия1 = СтрокаТаблицы.ПолнаяДоля;
КонецПроцедуры

Процедура ЗаполнитьСтрокуИОКИК(НоваяСтрока, СтрокаТаблицы, Организация, СамостоятельноеПризнаниеКонтроля, ОснованиеКонтроля)
	НоваяСтрока.НомерКИКЧисло = СтрокаТаблицы.НомерУчастника;
	НоваяСтрока.УИД = СтрокаТаблицы.Инвестиция.УникальныйИдентификатор();
	НоваяСтрока.НаимОрг = СтрокаТаблицы.Инвестиция.НаименованиеПолное;
	НоваяСтрока.НаимОргЛат = СтрокаТаблицы.Инвестиция.НаименованиеИнострОрганизации;
	НоваяСтрока.СтрРег = СтрокаТаблицы.Инвестиция.СтранаРегистрации.Код;
	НоваяСтрока.РегНомер = СтрокаТаблицы.Инвестиция.КодВСтранеРегистрации;
	НоваяСтрока.КодНПРег = СтрокаТаблицы.Инвестиция.КодНалогоплательщикаИностранный;
	//НоваяСтрока.АдрСтрРег = СтрокаТаблицы.Инвестиция.ДатаРегистрации;
	Адрес = СтрокаТаблицы.Инвестиция.КонтактнаяИнформация.Выгрузить(Новый Структура("Вид", ВстраиваниеУХ.ВидыКонтактнойИнформацииИО()), "Представление");
	Если Адрес.Количество() > 0 Тогда
		НоваяСтрока.АдрСтрРег = Адрес[0].Представление;
	КонецЕсли;
	
	КосвеннаяДоля = СтрокаТаблицы.ПолнаяДоля - СтрокаТаблицы.ПрямаяДоля;
	НоваяСтрока.ДоляПрямУч = СтрокаТаблицы.ПрямаяДоля;
	НоваяСтрока.ДоляКосУч = КосвеннаяДоля;//?((СтрокаТаблицы.ПолнаяДоля - СтрокаТаблицы.ПрямаяДоля) < 0, 0, СтрокаТаблицы.ПолнаяДоля - СтрокаТаблицы.ПрямаяДоля);
	НоваяСтрока.ДоляСмешУч = ?(СтрокаТаблицы.ПрямаяДоля = 0 ИЛИ КосвеннаяДоля = 0, 0, СтрокаТаблицы.ПолнаяДоля);
	НоваяСтрока.ДоляУчСупДет = 0;
	НоваяСтрока.ДоляУчНалРезРФ = 0;
	
	НоваяСтрока.Код101 = ?(СтрокаТаблицы.ПолнаяДоля > 25, 1, 0);
	НоваяСтрока.Код102 = 0;//?(СтрокаТаблицы.ПолнаяДоля > 10, 1, 0);
	НоваяСтрока.Код103 = 0;
	НоваяСтрока.Код104 = 0;
	НоваяСтрока.Код105 = 0;
	
	НоваяСтрока.Код201 = ?(СтрокаТаблицы.ПризнакВладения = 1, 1, 0);
	НоваяСтрока.Код202 = ?(СтрокаТаблицы.ПризнакВладения = 2, 1, 0);
	НоваяСтрока.Код203 = ?(СтрокаТаблицы.ПризнакВладения = 3, 1, 0);
	НоваяСтрока.Код204 = 0;
	НоваяСтрока.Код205 = 0;
	
	НоваяСтрока.ПрСамПризн = ?(СамостоятельноеПризнаниеКонтроля, "1", "0");
	
	НоваяСтрока.ОснКонтрИО = ОснованиеКонтроля;
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуИСИК(НоваяСтрока, СтрокаТаблицы, Организация)
	НоваяСтрока.НомерСтруктуры = СтрокаТаблицы.НомерУчастника;
	НоваяСтрока.П_ИНН_5 = Организация.ИНН;
	НоваяСтрока.П_КПП_5 = Организация.КПП;
	НоваяСтрока.UID = Новый УникальныйИдентификатор;
	СтрокаТаблицы.UID = НоваяСтрока.UID;
	НоваяСтрока.ИС_ПолноеНаименование_RUS = СтрокаТаблицы.Инвестиция.НаименованиеПолное;
	НоваяСтрока.ИС_ПолноеНаименование_EN = СтрокаТаблицы.Инвестиция.НаименованиеИнострОрганизации;
	НоваяСтрока.ИС_ДокНаименование_RUS = СтрокаТаблицы.Инвестиция.УчредительныйДокумент;
	НоваяСтрока.ИС_ДокНаименование_EN = СтрокаТаблицы.Инвестиция.УчредительныйДокументЛат;
	НоваяСтрока.КодСтраныСтр = СтрокаТаблицы.Инвестиция.СтранаРегистрации.Код;
	НоваяСтрока.РегНомСтр = СтрокаТаблицы.Инвестиция.КодВСтранеРегистрации;
	НоваяСтрока.ДатаРегСтр = СтрокаТаблицы.Инвестиция.ДатаРегистрации;
	НоваяСтрока.ПрСтр = ПолучитьКодВидаИностраннойСтруктуры(СтрокаТаблицы.Инвестиция.ВидИностраннойСтруктуры);
КонецПроцедуры

Процедура ЗаполнитьОсновныеСтраницыУведомления(ВыборкаОрганизаций, ДанныеУведомления, Организация, СлужебныеДанныеУведомления, ЭтоКИК, НалоговыйПериод, ДатаУведомления)
	СписокРО = ВыборкаОрганизаций.НайтиСтроки(Новый Структура("ИностраннаяОрганизация, ИндивидуальныйПредприниматель", Ложь, Ложь));
	СписокФЛ = ВыборкаОрганизаций.НайтиСтроки(Новый Структура("ИностраннаяОрганизация, ИндивидуальныйПредприниматель", Ложь, Истина));
	СписокИО = ВыборкаОрганизаций.НайтиСтроки(Новый Структура("ИностраннаяОрганизация, ИностраннаяСтруктура", Истина, Ложь));
	СписокИС = ВыборкаОрганизаций.НайтиСтроки(Новый Структура("ИностраннаяОрганизация, ИностраннаяСтруктура", Истина, Истина));
	
	СчетчикРО = МаксимумПоВиду(СписокРО, "РО");
	СчетчикИО = МаксимумПоВиду(СписокИО, "ИО");
	СчетчикИС = МаксимумПоВиду(СписокИС, "ИС");
	СчетчикФЛ = МаксимумПоВиду(СписокФЛ, "ФЛ");
	
	Для каждого СтрокаТаблицы Из СписокФЛ Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерУчастника) Тогда
			СтрокаТаблицы.НомерУчастника = СчетчикФЛ;
			СчетчикФЛ = СчетчикФЛ + 1;
		КонецЕсли;
		НоваяСтрока = ДанныеУведомления.СведФЛ.Добавить();
		ЗаполнитьСтрокуФЛИК(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из СписокРО Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерУчастника) Тогда
			СтрокаТаблицы.НомерУчастника = СчетчикРО;
			СчетчикРО = СчетчикРО + 1;
		КонецЕсли;
		НоваяСтрока = ДанныеУведомления.СведРО.Добавить();
		ЗаполнитьСтрокуРОИК(НоваяСтрока, СтрокаТаблицы, Организация);
	КонецЦикла;
	
	Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	Сценарий = Константы.СценарийОтчетностиКИК.Получить();
	Период = Неопределено;

	КэшПоказателейОтчетов = Новый ТаблицаЗначений;
	КэшПоказателейОтчетов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КэшПоказателейОтчетов.Колонки.Добавить("Аналитика1", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КэшПоказателейОтчетов.Колонки.Добавить("ИмяПоказателя");
	КэшПоказателейОтчетов.Колонки.Добавить("Значение");
	
	Для каждого СтрокаТаблицы Из СписокИС Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерУчастника) Тогда
			СтрокаТаблицы.НомерУчастника = СчетчикИС;
			СчетчикИС = СчетчикИС + 1;
		КонецЕсли;
		НоваяСтрока = ДанныеУведомления.СведИС.Добавить();
		ЗаполнитьСтрокуИСИК(НоваяСтрока, СтрокаТаблицы, Организация);
	КонецЦикла;
	
	Для каждого СтрокаТаблицы Из СписокИО Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.НомерУчастника) Тогда
			СтрокаТаблицы.НомерУчастника = СчетчикИО;
			СчетчикИО = СчетчикИО + 1;
		КонецЕсли;
		НоваяСтрока = ДанныеУведомления.СведИО.Добавить();
		ЗаполнитьСтрокуИОИК(НоваяСтрока, СтрокаТаблицы, Организация, ДатаУведомления, СлужебныеДанныеУведомления.ОснованиеУведомленияОбИО);
	КонецЦикла;
	
КонецПроцедуры

Функция ТекстПоля_СтатусИК(ИмяТаблицыСтатусы = "Статусы", ИмяПараметраДатаСреза = "ДатаСреза")

	ТекстЗапроса =
	"ВЫБОР
	|		КОГДА НЕ втСтатусы.ОбъектИнвестирования.ИностранныйНалоговыйРезидент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.НеУчаствуетВНУКИК)
	|		КОГДА &ДатаСреза >= ДАТАВРЕМЯ(2016, 1, 1)
	|				И втСтатусы.ЭффективнаяДоля >= 25
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.КонтролируемаяИностраннаяКомпания)
	|		КОГДА &ДатаСреза >= ДАТАВРЕМЯ(2015, 1, 1)
	|				И втСтатусы.ЭффективнаяДоля >= 50
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.КонтролируемаяИностраннаяКомпания)
	|		КОГДА ИСТИНА В
	|				(ВЫБРАТЬ
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.СамостоятельноеПризнаниеКонтроля.СрезПоследних(&ДатаСреза) КАК т
	|				ГДЕ
	|					т.ПризнаниеКонтроля
	|					И т.Инвестор = втСтатусы.Инвестор
	|					И т.ОбъектИнвестирования = втСтатусы.ОбъектИнвестирования)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.КонтролируемаяИностраннаяКомпания)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыИностранныхКомпаний.НеУчаствуетВНУКИК)
	|	КОНЕЦ";
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДатаСреза", ИмяПараметраДатаСреза);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "втСтатусы", ИмяТаблицыСтатусы);

	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти