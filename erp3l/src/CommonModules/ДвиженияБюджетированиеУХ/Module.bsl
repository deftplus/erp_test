#Область ПрограммныйИнтерфейс

// Процедура обновляет показатели проектов при проведении
//  документов "Заявка на операцию", "Оперативный план", "Отражение фактических данных".
//
// Параметры:
//  ДокументОбъект	 - 	ДокументОбъект.ЗаявкаНаОперацию, ДокументОбъект.ОперативныйПлан, ДокументОбъект.ОтражениеФактическихДанных - Документ, который мы проводим.
//
Процедура ОбновитьПоказателиПроектовПриПроведенииДокумента(ДокументОбъект) Экспорт
	
	Проект = ДокументОбъект.Проект;
	Сценарий = ?(ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ОтражениеФактическихДанныхБюджетирования"), Справочники.Сценарии.Факт , Справочники.Сценарии.Резерв);
	
	Если ЗначениеЗаполнено(Проект)  Тогда
		СтруктураДанныхНов = ДвиженияБюджетированиеУХ.ПолучитьСтруктуруДанныхДляКорректировкиПланов(ДокументОбъект.Ссылка);
		РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Проект, "Проект,ПроектЭтапа");
		Если Константы.АвтоматическаяАктуализацияДанныхПоПроектам.Получить() Тогда
			Если РеквизитыПроекта.Проект Тогда
				ДвиженияБюджетированиеУХ.ОбновитьСводныеПоказателиПроектовПоБюджетам(Сценарий,Проект);
			Иначе
				ДвиженияБюджетированиеУХ.ОбновитьСводныеПоказателиПроектовПоБюджетам(Сценарий, РеквизитыПроекта.ПроектЭтапа);
				ДвиженияБюджетированиеУХ.ОбновитьСводныеПоказателиПроектовПоБюджетам(Сценарий, Проект);
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтруктураДанныхНов = Неопределено;
	КонецЕсли;
	
	СтруктураДанныхСтар = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокументОбъект.ДополнительныеСвойства, "СтруктураДанныхСтар", Неопределено);
	Если НЕ (СтруктураДанныхСтар = Неопределено И СтруктураДанныхНов = Неопределено) Тогда
		ДвиженияБюджетированиеУХ.ОбработатьИзменениеДвиженийПоПроектам(СтруктураДанныхСтар,СтруктураДанныхНов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАналитикуРегистраПоРаскрытию(РабочийОбъект,ВидБюджета,СтрокаЗаписи,СтрокаПоказатель,СтрокаРаскрытия) Экспорт
	
	СтрокаЗаписи.ПоказательОтчета	= СтрокаПоказатель.Ссылка;
	КоличествоПредопределенныхАналитик = РабочийОбъект.МаксАналитикОтчета;
	
	Если ВидБюджета="БюджетДоходовИРасходов" Тогда
		
		СтрокаЗаписи.СтатьяДоходовИРасходов	= СтрокаПоказатель.СтатьяДоходовИРасходов;
		
	ИначеЕсли ВидБюджета="БюджетДвиженияДенежныхСредств" Тогда
		
		СтрокаЗаписи.СтатьяДвиженияДенежныхСредств	= СтрокаПоказатель.СтатьяДвиженияДенежныхСредств;
		
	ИначеЕсли ВидБюджета="БюджетДвиженияРесурсов" Тогда
		
		СтрокаЗаписи.СтатьяДвиженияРесурсов	= СтрокаПоказатель.СтатьяДвиженияРесурсов;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочийОбъект.Проект) Тогда
		
		СтрокаЗаписи.Проект=РабочийОбъект.Проект;
		
	ИначеЕсли СтрокаПоказатель.РазделениеПоПроектам Тогда 
		
		СтрокаЗаписи.Проект=СтрокаРаскрытия.Аналитика1;
		КоличествоПредопределенныхАналитик=КоличествоПредопределенныхАналитик+1;
		
	КонецЕсли;
	
	//Если СтрокаПоказатель.АналитикаДоговорКонтрагента>0 Тогда 
	//	
	//	СтрокаЗаписи.ДоговорКонтрагента=СтрокаРаскрытия["Аналитика"+СтрокаПоказатель.АналитикаДоговорКонтрагента];
	//	
	//КонецЕсли;
			
	Для Индекс=1 по АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если Индекс+КоличествоПредопределенныхАналитик<=ПараметрыСеанса.ЧислоДопАналитик Тогда 
			
			СтрокаЗаписи["Аналитика"+Индекс] = СтрокаРаскрытия["Аналитика"+(Индекс+КоличествоПредопределенныхАналитик)];
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаЗаписи.Валюта	= ?(ЗначениеЗаполнено(СтрокаРаскрытия.АналитикаВалюта),СтрокаРаскрытия.АналитикаВалюта,РабочийОбъект.ОсновнаяВалюта);
		
КонецПроцедуры // ЗаполнитьАналитикуРегистраПоРаскрытию()  

// Аналог процедуры ЗаполнитьАналитикуРегистраПоРаскрытию для формирования таблицы (Опер)Планов для дальнейшего формирования таблицы лимитов.
Процедура ЗаполнитьАналитикуПлановПоРаскрытию(РабочийОбъект,ВидБюджета,СтрокаЗаписи,СтрокаПоказатель,СтрокаРаскрытия) Экспорт
	
	СтрокаЗаписи.ПоказательОтчета	= СтрокаПоказатель.Ссылка;
	КоличествоПредопределенныхАналитик = РабочийОбъект.МаксАналитикОтчета;
	
	ВидыБюджетов = Перечисления.ПредназначенияЭлементовСтруктурыОтчета;
	
	Если ВидБюджета=ВидыБюджетов.БюджетДоходовИРасходов Тогда
		
		СтрокаЗаписи.СтатьяБюджета	= СтрокаПоказатель.СтатьяДоходовИРасходов;
		
	ИначеЕсли ВидБюджета = ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
		
		СтрокаЗаписи.СтатьяБюджета	= СтрокаПоказатель.СтатьяДвиженияДенежныхСредств;
		
	ИначеЕсли ВидБюджета = ВидыБюджетов.БюджетДвиженияРесурсов Тогда
		
		СтрокаЗаписи.СтатьяБюджета	= СтрокаПоказатель.СтатьяДвиженияРесурсов;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РабочийОбъект.Проект) Тогда
		
		СтрокаЗаписи.Проект=РабочийОбъект.Проект;
		
	ИначеЕсли СтрокаПоказатель.РазделениеПоПроектам Тогда 
		
		СтрокаЗаписи.Проект=СтрокаРаскрытия.Аналитика1;
		КоличествоПредопределенныхАналитик=КоличествоПредопределенныхАналитик+1;
		
	КонецЕсли;
	
	//Если СтрокаПоказатель.АналитикаДоговорКонтрагента>0 Тогда 
	//	
	//	СтрокаЗаписи.ДоговорКонтрагента=СтрокаРаскрытия["Аналитика"+СтрокаПоказатель.АналитикаДоговорКонтрагента];
	//	
	//КонецЕсли;
			
	Для Индекс=1 по АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если Индекс+КоличествоПредопределенныхАналитик<=ПараметрыСеанса.ЧислоДопАналитик Тогда 
			
			СтрокаЗаписи["Аналитика"+Индекс] = СтрокаРаскрытия["Аналитика"+(Индекс+КоличествоПредопределенныхАналитик)];
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаЗаписи.Валюта	= ?(ЗначениеЗаполнено(СтрокаРаскрытия.АналитикаВалюта),СтрокаРаскрытия.АналитикаВалюта,РабочийОбъект.ОсновнаяВалюта);
		
КонецПроцедуры // ЗаполнитьАналитикуРегистраПоРаскрытию()  

Процедура ОбработатьТаблицуДвижений(ДокументОбъект, Знач ВидБюджета,ТаблицаДвижений,Отказ=Ложь,ЕстьКолонкиБюджетов=Истина, ПризнакБюджета = Неопределено) Экспорт
	
	Если ЕстьКолонкиБюджетов Тогда
		
		Если ПризнакБюджета = Ложь Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыБюджета = ДвиженияБюджетированиеКлиентСерверУХ.ПараметрыБюджета(ВидБюджета);
	
	Для Каждого СтрокаДвижение ИЗ ТаблицаДвижений Цикл
		
		ИменаАналитик = Новый Структура;
		ИменаАналитик.Вставить("ВидАналитики1", "ВидАналитики1");
		ИменаАналитик.Вставить("ВидАналитики2", "ВидАналитики2");
		ИменаАналитик.Вставить("ВидАналитики3", "ВидАналитики3");
		ИменаАналитик.Вставить("ВидАналитики4", "ВидАналитики4");
		ИменаАналитик.Вставить("ВидАналитики5", "ВидАналитики5");
		ИменаАналитик.Вставить("ВидАналитики6", "ВидАналитики6");
		
		АналитикиГруппыРаскрытия = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаДвижение[ПараметрыБюджета.КолонкаСтатья], ИменаАналитик);
		СтруктураАналитик = ПолучитьСтруктуруЗаполненияАналитикиПоРеквизитамОбъекта(ДокументОбъект,АналитикиГруппыРаскрытия);
		
		Для Каждого КлючИЗначение ИЗ СтруктураАналитик Цикл
			
			КодАналитикиБюджета = СтрЗаменить(КлючИЗначение.Ключ,"Аналитика","Аналитика"+?(ЕстьКолонкиБюджетов,ПараметрыБюджета.КодБюджета,""));
			
			Если НЕ ЗначениеЗаполнено(СтрокаДвижение[КодАналитикиБюджета]) Тогда
				
				СтрокаДвижение[КодАналитикиБюджета]=КлючИЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
КонецПроцедуры // ОбработатьТаблицуАналитик()

Процедура ОбновитьПоказателиОтчетовПоОперативнымДанным(ВидБюджета,ТаблицаПоказателей) Экспорт
	
	ПараметрыБюджета = ДвиженияБюджетированиеКлиентСерверУХ.ПараметрыБюджета(ВидБюджета);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ Организация,Сценарий,ПериодОтчета,Проект,ПриходРасход,Валюта,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6,Сумма,СуммаУпр,"+ПараметрыБюджета.КолонкаСтатья+" КАК СтатьяБюджета
	|Поместить ТаблицаПоказателей
	|ИЗ &ТаблицаПоказателей КАК ТаблицаПоказателей
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета,
	|	ПоказателиОтчетов.Владелец КАК ВидОтчета,
	|	ПоказателиОтчетов.Владелец.РазделениеПоПроектам КАК ВидОтчетаРазделениеПоПроектам,
	|	ПоказателиОтчетов.РазделениеПоПроектам КАК ПоказательРазделениеПоПроектам,
	|	ПоказателиОтчетов."+ПараметрыБюджета.КолонкаСтатья+" КАК СтатьяБюджета,
	|	ПоказателиОтчетов.Валютный,
	|	ПоказателиОтчетов.ПриходРасход,
	|	ПоказателиОтчетов.ВидКурса,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.АналитикаДоговорКонтрагента,0) КАК АналитикаДоговорКонтрагента,
	|	ЕСТЬNULL(ПоказателиОтчетов.ГруппаРаскрытия.АналитикаЭтапПроекта,0) КАК АналитикаЭтапПроекта,
	|	ПоказателиОтчетов.ПересчитыватьВалютнуюСумму,
	|	ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка) КАК СинтетическийПоказатель
	|ПОМЕСТИТЬ ПоказателиБюджета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Предназначение = &Предназначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказателей.Организация,
	|	ТаблицаПоказателей.Сценарий,
	|	ТаблицаПоказателей.ПериодОтчета,
	|	ТаблицаПоказателей.Проект,
	|	ТаблицаПоказателей.Валюта,
	|	ТаблицаПоказателей.Аналитика1,
	|	ТаблицаПоказателей.Аналитика2,
	|	ТаблицаПоказателей.Аналитика3,
	|	ТаблицаПоказателей.Аналитика4,
	|	ТаблицаПоказателей.Аналитика5,
	|	ТаблицаПоказателей.Аналитика6,
	|	ТаблицаПоказателей.Сумма,
	|	ТаблицаПоказателей.СуммаУпр,
	|	ПоказателиБюджета.ПоказательОтчета,
	|	ПоказателиБюджета.ВидОтчета,
	|	ПоказателиБюджета.Валютный,
	|	ПоказателиБюджета.ПересчитыватьВалютнуюСумму,
	|	ПоказателиБюджета.СинтетическийПоказатель,
	|	ПоказателиБюджета.ВидОтчетаРазделениеПоПроектам,
	|	ПоказателиБюджета.ПоказательРазделениеПоПроектам,
	|	ПоказателиБюджета.ВидКурса,
	|	ПоказателиБюджета.АналитикаДоговорКонтрагента,
	|	ПоказателиБюджета.АналитикаЭтапПроекта
	|ИЗ
	|	ТаблицаПоказателей КАК ТаблицаПоказателей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиБюджета КАК ПоказателиБюджета
	|		ПО ТаблицаПоказателей.СтатьяБюджета = ПоказателиБюджета.СтатьяБюджета
	|		И ТаблицаПоказателей.ПриходРасход = ПоказателиБюджета.ПриходРасход";
	
	Запрос.УстановитьПараметр("Предназначение",ПараметрыБюджета.ВидБюджета);
	Запрос.УстановитьПараметр("ТаблицаПоказателей",ТаблицаПоказателей);
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОбработкаОбъект=Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	
	ИзмененныеПоказатели=Результат.Выбрать();
	
	Пока ИзмененныеПоказатели.Следующий() Цикл
		
		НоваяСтрока=ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Добавить();
		
		НоваяСтрока.Организация			= ИзмененныеПоказатели.Организация;
		НоваяСтрока.Сценарий			= ИзмененныеПоказатели.Сценарий;
		НоваяСтрока.ПериодОтчета		= ИзмененныеПоказатели.ПериодОтчета;
		НоваяСтрока.ПоказательОтчета	= ИзмененныеПоказатели.ПоказательОтчета;
		
		Если ИзмененныеПоказатели.ВидОтчетаРазделениеПоПроектам Тогда
			
			НоваяСтрока.Проект=ИзмененныеПоказатели.Проект;
						
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ОбновитьПоказателиОтчетовПоОперативнымДанным()

Функция ДобавитьСписаниеПлана(ТаблицаДвижений,СценарийРасход,СценарийПриход,Ссылка) Экспорт
	
	ТаблицаДвиженийИтог=ТаблицаДвижений.СкопироватьКолонки();
	
	Для Каждого Строка ИЗ ТаблицаДвижений Цикл
		
		Если ЗначениеЗаполнено(Строка.ДокументПланирования) Тогда
			
			НоваяСтрока=ТаблицаДвиженийИтог.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			НоваяСтрока.Сценарий	= СценарийРасход;
			НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Расход;
	
			Если ТипЗнч(Строка.ДокументПланирования)=Тип("СправочникСсылка.Периоды") Тогда
				
				НоваяСтрока.ПериодОтчета=Строка.ДокументПланирования;
				
			ИначеЕсли ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ПериодОтчета",Строка.ДокументПланирования) Тогда
				
				НоваяСтрока.ПериодОтчета=Строка.ДокументПланирования.ПериодОтчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТаблицаДвижений Цикл
		
		НоваяСтрока=ТаблицаДвиженийИтог.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		НоваяСтрока.Сценарий	= СценарийПриход;
		НоваяСтрока.ВидДвижения	= ВидДвиженияНакопления.Приход;
		НоваяСтрока.ДокументПланирования = Ссылка;
		
	КонецЦикла;
	
	Возврат ТаблицаДвиженийИтог; 
			
КонецФункции // ТаблицаДвижений()

Функция ПолучитьПериодКонтроля(Дата,ВидБюджета) Экспорт
	
	ПараметрыБюджета = ДвиженияБюджетированиеКлиентСерверУХ.ПараметрыБюджета(ВидБюджета);
	
	Возврат ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Дата,ДвиженияБюджетированиеУХПереопределяемый.ПолучитьПериодичностьБюджетирования(ПараметрыБюджета.ВидБюджета),0);
		
КонецФункции // ПолучитьПериодКонтроля() 

Функция ВернутьТекущиеОстаткиПоДокументуПланирования(ДокументПланирования, ВидБюджета, ПриходРасход=Неопределено) Экспорт
	
	ПараметрыБюджета = ДвиженияБюджетированиеКлиентСерверУХ.ПараметрыБюджета(ВидБюджета);
	
	Запрос=Новый Запрос;
	
	ТекстОтбор="			ВидБюджета = &ВидБюджета
				|				И ДокументПланирования = &ДокументПланирования";
	
	Запрос.УстановитьПараметр("ВидБюджета",				ВидБюджета);
	Запрос.УстановитьПараметр("ДокументПланирования",	ДокументПланирования);
	
	Если НЕ ПриходРасход = Неопределено Тогда
		
		ТекстОтбор=ТекстОтбор+"				И ПриходРасход=&ПриходРасход";
		Запрос.УстановитьПараметр("ПриходРасход",	ПриходРасход);
		
	КонецЕсли;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ОперативныйПланПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ОперативныйПланПоБюджетамОбороты.Проект,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика1,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика2,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика3,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика4,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика5,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика6,
	|	ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот КАК Сумма,
	|	ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот КАК СуммаУпр,
	|	ОперативныйПланПоБюджетамОбороты.Валюта
	|ИЗ
	|	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|		 	"+ТекстОтбор+") КАК ОперативныйПланПоБюджетамОбороты";
	
	Если ТипЗнч(ДокументПланирования) = Тип("ДокументСсылка.ОперативныйПлан") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаявленоОборот", "ЗарезервированоОборот");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ВернутьТекущиеОстаткиПоДокументуПланирования()

// Функция получает виды аналитик статей некоторого вида бюджета.
// Вид бюджета определяется по первой статье из списка.
//
// Параметры:
//  СтатьиБюджета	 - 	Массив, - Перечень статей, для которых требуется получить виды аналитик
// 
// Возвращаемое значение:
//  ТаблицаЗначений - Таблица, содержащая необходимые параметры.
//
Функция ВидыАналитикСтатей(СтатьиБюджета, ВидБюджета = неопределено, ТолькоЛимитируемыеАналитики = Ложь) Экспорт
	
	Если Не ЗначениеЗаполнено(СтатьиБюджета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиДвиженияДенежныхСредств.Ссылка КАК СтатьяБюджета,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики1 КАК ВидАналитики1,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики2 КАК ВидАналитики2,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики3 КАК ВидАналитики3,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики4 КАК ВидАналитики4,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики5 КАК ВидАналитики5,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики6 КАК ВидАналитики6,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики1.Наименование КАК ВидАналитики1Наименование,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики1.ТипЗначения КАК ВидАналитики1ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ВидАналитики1ТипыВладельца,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики2.Наименование КАК ВидАналитики2Наименование,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики2.ТипЗначения КАК ВидАналитики2ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ВидАналитики2ТипыВладельца,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики3.Наименование КАК ВидАналитики3Наименование,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики3.ТипЗначения КАК ВидАналитики3ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ВидАналитики3ТипыВладельца,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики4.Наименование КАК ВидАналитики4Наименование,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики4.ТипЗначения КАК ВидАналитики4ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ВидАналитики4ТипыВладельца,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики5.Наименование КАК ВидАналитики5Наименование,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики5.ТипЗначения КАК ВидАналитики5ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ВидАналитики5ТипыВладельца,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики6.Наименование КАК ВидАналитики6Наименование,
	|	СтатьиДвиженияДенежныхСредств.ВидАналитики6.ТипЗначения КАК ВидАналитики6ТипЗначения,
	|	НЕОПРЕДЕЛЕНО КАК ВидАналитики6ТипыВладельца,
	|	НЕ ЕСТЬNULL(ПараметрыЛимитирования.КонтролироватьАналитику1, ИСТИНА) КАК НеЛимитируетсяАналитика1,
	|	НЕ ЕСТЬNULL(ПараметрыЛимитирования.КонтролироватьАналитику2, ИСТИНА) КАК НеЛимитируетсяАналитика2,
	|	НЕ ЕСТЬNULL(ПараметрыЛимитирования.КонтролироватьАналитику3, ИСТИНА) КАК НеЛимитируетсяАналитика3,
	|	НЕ ЕСТЬNULL(ПараметрыЛимитирования.КонтролироватьАналитику4, ИСТИНА) КАК НеЛимитируетсяАналитика4,
	|	НЕ ЕСТЬNULL(ПараметрыЛимитирования.КонтролироватьАналитику5, ИСТИНА) КАК НеЛимитируетсяАналитика5,
	|	НЕ ЕСТЬNULL(ПараметрыЛимитирования.КонтролироватьАналитику6, ИСТИНА) КАК НеЛимитируетсяАналитика6
	|ИЗ
	|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыКонтроляЛимитаСтатейБюджетов.СрезПоследних(, СтатьяБюджета В (&СтатьиБюджета)) КАК ПараметрыЛимитирования
	|		ПО СтатьиДвиженияДенежныхСредств.Ссылка = ПараметрыЛимитирования.СтатьяБюджета
	|ГДЕ
	|	СтатьиДвиженияДенежныхСредств.Ссылка В(&СтатьиБюджета)";
	
	Если ВидБюджета = Неопределено Тогда
		
		Если СтатьиБюджета[0] = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		ИмяСправочника = СтатьиБюджета[0].Метаданные().Имя;
		
	ИначеЕсли ДвиженияБюджетированиеКлиентСерверУХ.ЭтоБДДС(ВидБюджета) Тогда
		
		ИмяСправочника = "СтатьиДвиженияДенежныхСредств";
		
	ИначеЕсли ДвиженияБюджетированиеКлиентСерверУХ.ЭтоБДР(ВидБюджета) Тогда
		
		ИмяСправочника = "СтатьиДоходовИРасходов";
		
	ИначеЕсли ДвиженияБюджетированиеКлиентСерверУХ.ЭтоБюджетДвиженияРесурсов(ВидБюджета) Тогда
		
		ИмяСправочника = "СтатьиДвиженияРесурсов";
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "СтатьиДвиженияДенежныхСредств", ИмяСправочника);
	Запрос.УстановитьПараметр("СтатьиБюджета", СтатьиБюджета);
	Результат = Запрос.Выполнить().Выгрузить();
	
	//Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
	//	Результат.Колонки.Добавить("ВидАналитики" + Сч + "ТипыВладельца", Новый ОписаниеТипов("ОписаниеТипов"));
	//КонецЦикла;

	Для Каждого ТекПараметрыСтатьи Из Результат Цикл
		
		Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
			
			ОписаниеТиповАналитики = ТекПараметрыСтатьи["ВидАналитики" + Сч + "ТипЗначения"];
			Если Не ЗначениеЗаполнено(ОписаниеТиповАналитики) Тогда
				Продолжить;
			КонецЕсли;
			// 1С:УХ не поддерживает составные типы аналитик раскрытия, поэтому 
			// всегда будет только один элемент.
			ТипАналитикиРаскрытия = ОписаниеТиповАналитики.Типы()[0];
			
			Если Справочники.ТипВсеСсылки().СодержитТип(ТипАналитикиРаскрытия) Тогда
				ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипАналитикиРаскрытия);
				Если ОбъектМетаданных.Владельцы.Количество() Тогда
					ТекПараметрыСтатьи["ВидАналитики" + Сч + "ТипыВладельца"] = ОбъектМетаданных.СтандартныеРеквизиты.Владелец.Тип;
				КонецЕсли;
			КонецЕсли;
			
			//
			// При необходимости очищаем информацию о нелимитируемой аналитике
			Если ТолькоЛимитируемыеАналитики = Истина Тогда
				ВидАналитики = ТекПараметрыСтатьи["ВидАналитики"+Сч];
				НеЛимитируется = ТекПараметрыСтатьи["НеЛимитируетсяАналитика"+Сч];
				
				Если ЗначениеЗаполнено(ВидАналитики) И НеЛимитируется  Тогда
					ТекПараметрыСтатьи["ВидАналитики"+Сч] = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
					ТекПараметрыСтатьи["ВидАналитики"+Сч + "Наименование"] = null;
					ТекПараметрыСтатьи["ВидАналитики"+Сч + "ТипЗначения"] = null;
					ТекПараметрыСтатьи["ВидАналитики"+Сч + "ТипыВладельца"] = Новый ОписаниеТипов(неопределено);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ АКТУАЛИЗАЦИИ ДАННЫХ ПО ПРОЕКТАМ

Процедура АктуализироватьДанныеПоПроекту(СценарийАктуализации, Проект=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.УстановитьПараметр("ПроектНеУказан", НЕ ЗначениеЗаполнено(Проект));
	Запрос.УстановитьПараметр("Проект", Проект);
	Запрос.УстановитьПараметр("СценарийАктуализации",СценарийАктуализации);
	
	Если СценарийАктуализации = Справочники.Сценарии.Факт Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТИПЗНАЧЕНИЯ(ВТ_ФактБезПериодов.СтатьяБюджета) КАК ИмяСправочника,
		|	ВТ_ФактБезПериодов.СтатьяБюджета КАК СтатьяБюджета,
		|	ВТ_ФактБезПериодов.ПриходРасход КАК ПриходРасход,
		|	ВТ_ФактБезПериодов.Организация КАК Организация,
		|	ВТ_ФактБезПериодов.Проект КАК Проект,
		|	Периоды.Ссылка КАК ПериодОтчета
		|ПОМЕСТИТЬ ДвиженияПоБюджетам
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ФактПоБюджетам.СтатьяБюджета КАК СтатьяБюджета,
		|		ФактПоБюджетам.ПриходРасход КАК ПриходРасход,
		|		ФактПоБюджетам.Организация КАК Организация,
		|		ФактПоБюджетам.Проект КАК Проект,
		|		ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования КАК Периодичность,
		|		ВЫБОР ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.Неделя)
		|				ТОГДА НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, НЕДЕЛЯ)
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.ДЕКАДА)
		|				ТОГДА НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, ДЕКАДА)
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.МЕСЯЦ)
		|				ТОГДА НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, МЕСЯЦ)
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.КВАРТАЛ)
		|				ТОГДА НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, КВАРТАЛ)
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.ПОЛУГОДИЕ)
		|				ТОГДА НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, ПОЛУГОДИЕ)
		|			КОГДА ЗНАЧЕНИЕ(Перечисление.Периодичность.ГОД)
		|				ТОГДА НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, ГОД)
		|			ИНАЧЕ НАЧАЛОПЕРИОДА(ФактПоБюджетам.Период, ДЕНЬ)
		|		КОНЕЦ КАК ДатаНачала
		|	ИЗ
		|		РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактПоБюджетам КАК ФактПоБюджетам
		|			ПО ПараметрыОперативногоПланирования.Предназначение = ФактПоБюджетам.ВидБюджета
		|				И (ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования <> ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)),
		|		Справочник.Периоды КАК Периоды) КАК ВТ_ФактБезПериодов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
		|		ПО ВТ_ФактБезПериодов.Периодичность = Периоды.Периодичность
		|			И (Периоды.Произвольный = ЛОЖЬ)
		|			И ВТ_ФактБезПериодов.ДатаНачала = Периоды.ДатаНачала
		|ГДЕ
		|	ВТ_ФактБезПериодов.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|	И (&ПроектНеУказан
		|			ИЛИ ВТ_ФактБезПериодов.Проект = &Проект)";
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТИПЗНАЧЕНИЯ(ОперПлан.СтатьяБюджета) КАК ИмяСправочника,
		|	ОперПлан.СтатьяБюджета КАК СтатьяБюджета,
		|	ОперПлан.ПриходРасход КАК ПриходРасход,
		|	ОперПлан.Организация КАК Организация,
		|	ОперПлан.Проект КАК Проект,
		|	ОперПлан.ПериодОтчета КАК ПериодОтчета
		|ПОМЕСТИТЬ ДвиженияПоБюджетам
		|ИЗ
		|	РегистрНакопления.ОперативныйПланПоБюджетам КАК ОперПлан
		|ГДЕ
		|	ОперПлан.Проект <> ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
		|	И (&ПроектНеУказан
		|			ИЛИ ОперПлан.Проект = &Проект)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДвиженияПоБюджетам.СтатьяБюджета,
	|	ДвиженияПоБюджетам.ПриходРасход,
	|	ДвиженияПоБюджетам.ПериодОтчета,
	|	ДвиженияПоБюджетам.Организация,
	|	ДвиженияПоБюджетам.ИмяСправочника,
	|	ЕСТЬNULL(ПоказателиОтчетов.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПоказательОтчета,
	|	ЕСТЬNULL(ПоказателиОтчетов.Владелец, НЕОПРЕДЕЛЕНО) КАК ВидОтчета,
	|	ДвиженияПоБюджетам.Проект
	|ПОМЕСТИТЬ ПоказателиДвижений
	|ИЗ
	|	ДвиженияПоБюджетам КАК ДвиженияПоБюджетам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО (ДвиженияПоБюджетам.СтатьяБюджета = ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств
	|				ИЛИ ДвиженияПоБюджетам.СтатьяБюджета = ПоказателиОтчетов.СтатьяДоходовИРасходов
	|				ИЛИ ДвиженияПоБюджетам.СтатьяБюджета = ПоказателиОтчетов.СтатьяДвиженияРесурсов)
	|			И ДвиженияПоБюджетам.ПриходРасход = ПоказателиОтчетов.ПриходРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиДвижений.ПериодОтчета,
	|	ПоказателиДвижений.Организация,
	|	ПоказателиДвижений.ВидОтчета,
	|	ПоказателиДвижений.Проект
	|ПОМЕСТИТЬ ДанныеЭкземпляровОтчетов
	|ИЗ
	|	ПоказателиДвижений КАК ПоказателиДвижений
	|ГДЕ
	|	НЕ ПоказателиДвижений.ВидОтчета = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеЭкземпляровОтчетов.ПериодОтчета,
	|	ДанныеЭкземпляровОтчетов.Организация,
	|	ДанныеЭкземпляровОтчетов.ВидОтчета,
	|	ДанныеЭкземпляровОтчетов.Проект,
	|	ЕСТЬNULL(СуществующиеЭкземпляры.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЭкземплярОтчета
	|ИЗ
	|	ДанныеЭкземпляровОтчетов КАК ДанныеЭкземпляровОтчетов
	|		Полное СОЕДИНЕНИЕ 
	|		(ВЫБРАТЬ Ссылка,
	|		ПериодОтчета,
	|		Организация,
	|		ВидОтчета,
	|		Проект
	|ИЗ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ (НастраиваемыйОтчет.Сценарий = &СценарийАктуализации)";
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		ТекстЗапроса=ТекстЗапроса+"	
		|	И НастраиваемыйОтчет.Проект= &Проект";
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+"	
		|	И НЕ НастраиваемыйОтчет.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)";	
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+") КАК СуществующиеЭкземпляры	
	|		ПО ДанныеЭкземпляровОтчетов.ПериодОтчета = СуществующиеЭкземпляры.ПериодОтчета
	|			И ДанныеЭкземпляровОтчетов.Организация = СуществующиеЭкземпляры.Организация
	|			И ДанныеЭкземпляровОтчетов.ВидОтчета = СуществующиеЭкземпляры.ВидОтчета
	|			И ДанныеЭкземпляровОтчетов.Проект = СуществующиеЭкземпляры.Проект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПоказателиДвижений.СтатьяБюджета,
	|	ПоказателиДвижений.ПриходРасход,
	|	ПоказателиДвижений.ИмяСправочника
	|ИЗ
	|	ПоказателиДвижений КАК ПоказателиДвижений
	|ГДЕ
	|	ПоказателиДвижений.ПоказательОтчета = НЕОПРЕДЕЛЕНО";
	
	Запрос.Текст = ТекстЗапроса;
	Результат=Запрос.ВыполнитьПакет();
	
	СтатьиБезПоказателей=Результат[4].Выгрузить();
	
	Для Каждого Строка ИЗ СтатьиБезПоказателей Цикл
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не найден показатель отчета для статьи %1 справочника %2'"), Строка.СтатьяБюджета, Строка.ИмяСправочника),,,СтатусСообщения.Важное);
	КонецЦикла;
	
	ЭкземплярыОтчетов=Результат[3].Выбрать();
	МассивПроектов=Новый Массив;
	ВалютаРасчетаПоказателейПроекта=Константы.ВалютаРасчетаПоказателейПроекта.Получить();
	
	Пока ЭкземплярыОтчетов.Следующий() Цикл
		
		Если ЭкземплярыОтчетов.ЭкземплярОтчета=Неопределено Тогда
								
			РабочийЭкземпляр=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(ЭкземплярыОтчетов.Организация,ЭкземплярыОтчетов.ПериодОтчета,СценарийАктуализации,ЭкземплярыОтчетов.ВидОтчета,,,,,ЭкземплярыОтчетов.Проект);
			
			Если РабочийЭкземпляр=НЕопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект=РабочийЭкземпляр.ПолучитьОбъект();
			
		Иначе
			
			ДокументОбъект=ЭкземплярыОтчетов.ЭкземплярОтчета.ПолучитьОбъект();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетаПоказателейПроекта) Тогда
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ОсновнаяВалюта) Тогда
				
				ДокументОбъект.ОсновнаяВалюта=ВалютаРасчетаПоказателейПроекта;	
			
			ИначеЕсли (НЕ ДокументОбъект.ОсновнаяВалюта=ВалютаРасчетаПоказателейПроекта)
				И ДокументОбъект.ДополнительныеВалюты.Найти(ВалютаРасчетаПоказателейПроекта,"Валюта")=Неопределено Тогда
				
				НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
				НоваяСтрока.Валюта=ВалютаРасчетаПоказателейПроекта;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьОтчетПоУмолчанию();
		
		Попытка
			
			ДокументОбъект.Записать();
			
			Если МассивПроектов.Найти(ДокументОбъект.Проект)=Неопределено Тогда
				
				МассивПроектов.Добавить(ДокументОбъект.Проект);
				
			КонецЕсли;	
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось записать экземпляр отчета вида %1 с параметрами:
			|Организация: %2
			|Период отчета: %3
			|Сценарий: %4: 
			|%5'"), ЭкземплярыОтчетов.ВидОтчета, ЭкземплярыОтчетов.Организация, ЭкземплярыОтчетов.ПериодОтчета, СценарийАктуализации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
			
		КонецПопытки;
					
	КонецЦикла;
		
КонецПроцедуры // АктуализироватьДанныеПоПроекту()

Процедура РассчитатьПоказателиЭффективностиПоПроекту(Проект) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	АтрибутыПроектов.Сценарий,
	|	АтрибутыПроектов.СтавкаДисконтирования
	|ИЗ
	|	РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
	|ГДЕ
	|	АтрибутыПроектов.Проект = &Проект";
	
	Запрос.УстановитьПараметр("Проект",Проект);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		РассчитатьПоказателиЭффективности(Результат.Сценарий,Проект,Результат.СтавкаДисконтирования);
		
	КонецЦикла;
			
КонецПроцедуры // РассчитатьПоказателиЭффективностиПоПроекту()

Функция ПолучитьАтрибутПроекта(Сценарий,Проект,ИмяАтрибута) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	АтрибутыПроектов."+ИмяАтрибута+"
	|ИЗ
	|	РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
	|ГДЕ
	|	АтрибутыПроектов.Проект = &Проект
	|	И АтрибутыПроектов.Сценарий = &Сценарий";
	
	Запрос.УстановитьПараметр("Проект",		Проект);
	Запрос.УстановитьПараметр("Сценарий",	Сценарий);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Если Выборка.Следующий() Тогда
		
		Возврат Выборка[ИмяАтрибута];
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
КонецФункции // ПолучитьАтрибутПроекта()  

Процедура РассчитатьПоказателиЭффективности(Сценарий,Проект,СтавкаДисконтирования=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВалютаРасчетаПоказателейПроекта.Значение КАК ВалютаРасчетаПоказателейПроекта,
	|	ИтоговыйПоказательПоступленияБДДС.Значение КАК ИтоговыйПоказательПоступленияБДДС,
	|	ИтоговыйПоказательСписанияБДДС.Значение КАК ИтоговыйПоказательСписанияБДДС,
	|	ИтоговыйПоказательДоходыБДР.Значение КАК ИтоговыйПоказательДоходыБДР,
	|	ИтоговыйПоказательРасходыБДР.Значение КАК ИтоговыйПоказательРасходыБДР,
	|	ИтоговыйПоказательПоступленияРесурсы.Значение КАК ИтоговыйПоказательПоступленияРесурсы,
	|	ИтоговыйПоказательСписанияРесурсы.Значение КАК ИтоговыйПоказательСписанияРесурсы
	|ИЗ
	|	Константа.ВалютаРасчетаПоказателейПроекта КАК ВалютаРасчетаПоказателейПроекта,
	|	Константа.ИтоговыйПоказательПоступленияБДДС КАК ИтоговыйПоказательПоступленияБДДС,
	|	Константа.ИтоговыйПоказательСписанияБДДС КАК ИтоговыйПоказательСписанияБДДС,
	|	Константа.ИтоговыйПоказательДоходыБДР КАК ИтоговыйПоказательДоходыБДР,
	|	Константа.ИтоговыйПоказательРасходыБДР КАК ИтоговыйПоказательРасходыБДР,
	|	Константа.ИтоговыйПоказательПоступленияРесурсы КАК ИтоговыйПоказательПоступленияРесурсы,
	|	Константа.ИтоговыйПоказательСписанияРесурсы КАК ИтоговыйПоказательСписанияРесурсы";
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	СтруктураПоказателей=Новый Структура;
	МассивПоказателей=Новый Массив;
	
	Если ЗначениеЗаполнено(Результат.ИтоговыйПоказательДоходыБДР) Тогда	
		
		МассивПоказателей.Добавить(Результат.ИтоговыйПоказательДоходыБДР);
		
	Иначе
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не заполнена константа ""Итоговый показатель доходов БДР"". Расчет прибыльности невозможен.'"),,,СтатусСообщения.Информация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИтоговыйПоказательРасходыБДР) Тогда	
		
		МассивПоказателей.Добавить(Результат.ИтоговыйПоказательРасходыБДР);
		
	Иначе
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не заполнена константа ""Итоговый показатель расходов БДР"". Расчет прибыльности невозможен.'"),,,СтатусСообщения.Информация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИтоговыйПоказательПоступленияРесурсы) Тогда	
		
		МассивПоказателей.Добавить(Результат.ИтоговыйПоказательПоступленияРесурсы);
		
	Иначе
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не заполнена константа ""Итоговый показатель поступления ресурсов"". Анализ движения ресурсов невозможен.'"),,,СтатусСообщения.Информация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Результат.ИтоговыйПоказательСписанияРесурсы) Тогда	
		
		МассивПоказателей.Добавить(Результат.ИтоговыйПоказательСписанияРесурсы);
		
	Иначе
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не заполнена константа ""Итоговый показатель списания ресурсов"". Анализ движения ресурсов невозможен.'"),,,СтатусСообщения.Информация);
		
	КонецЕсли;
		
	ИтоговыеПоказатели=ПолучитьЗначенияПоказателей(МассивПоказателей,Сценарий,Результат.ВалютаРасчетаПоказателейПроекта,Проект);
	
	СтруктураПоказателей.Вставить("ИтогоРасходыБДР",?(ИтоговыеПоказатели[Результат.ИтоговыйПоказательРасходыБДР]=Неопределено,	0,ИтоговыеПоказатели[Результат.ИтоговыйПоказательРасходыБДР]));
	СтруктураПоказателей.Вставить("ИтогоДоходыБДР",	?(ИтоговыеПоказатели[Результат.ИтоговыйПоказательДоходыБДР]=Неопределено,	0,ИтоговыеПоказатели[Результат.ИтоговыйПоказательДоходыБДР]));
	
	СтруктураПоказателей.Вставить("ИтогоСписанияРесурсы",	?(ИтоговыеПоказатели[Результат.ИтоговыйПоказательСписанияРесурсы]=Неопределено,		0,ИтоговыеПоказатели[Результат.ИтоговыйПоказательСписанияРесурсы]));
	СтруктураПоказателей.Вставить("ИтогоПоступленияРесурсы",?(ИтоговыеПоказатели[Результат.ИтоговыйПоказательПоступленияРесурсы]=Неопределено,	0,ИтоговыеПоказатели[Результат.ИтоговыйПоказательПоступленияРесурсы]));

	СтруктураПоказателей.Вставить("ИтогоПрибыльУбыток",			СтруктураПоказателей.ИтогоДоходыБДР			- СтруктураПоказателей.ИтогоРасходыБДР);
	СтруктураПоказателей.Вставить("ИтогоМатериальныйБаланс",	СтруктураПоказателей.ИтогоПоступленияРесурсы- СтруктураПоказателей.ИтогоСписанияРесурсы);
	
	Если ЗначениеЗаполнено(Результат.ИтоговыйПоказательПоступленияБДДС) И ЗначениеЗаполнено(Результат.ИтоговыйПоказательСписанияБДДС) Тогда
		
		ПолучитьДанныеПоДвижениюДС(СтруктураПоказателей,
				Результат.ИтоговыйПоказательПоступленияБДДС,
				Результат.ИтоговыйПоказательСписанияБДДС,
				Сценарий,
				Результат.ВалютаРасчетаПоказателейПроекта,
				Проект,
				,
				СтавкаДисконтирования);		
	Иначе
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Не заполнены константы для итоговых показателей БДДС. Анализ движения денежных средств невозможен.'"),,,СтатусСообщения.Информация);
		СтруктураПоказателей.Вставить("ИтогоСписанияБДДС",		0);
		СтруктураПоказателей.Вставить("ИтогоПоступленияБДДС",	0);
		СтруктураПоказателей.Вставить("NPV",					0);
		СтруктураПоказателей.Вставить("IRR",					0);
		СтруктураПоказателей.Вставить("ИтогоЧистыйДенежныйПоток",0);
		
	КонецЕсли;
	
	НаборЗаписей=РегистрыСведений.АтрибутыПроектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Проект.Установить(Проект);
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество()=0 Тогда
		
		РабочаяСтрока=НаборЗаписей.Добавить();
		РабочаяСтрока.Проект=Проект;
		РабочаяСтрока.Сценарий=Сценарий;
		
	Иначе
		
		РабочаяСтрока=НаборЗаписей[0];
		
	КонецЕсли;

	ЗаполнитьЗначенияСвойств(РабочаяСтрока,СтруктураПоказателей);
		
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры // РассчитатьПоказателиЭффективности()

Функция ПолучитьЗначенияПоказателей(МассивПоказателей,Сценарий,ВалютаОтчета,Проект=Неопределено,Организация=Неопределено,ПериодОтчета=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Валюта = &ВалютаОтчета
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета";
		Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Проект = &Проект";
		Запрос.УстановитьПараметр("Проект",Проект);
	
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаОтчета",	ВалютаОтчета);
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);

	СписокВерсий=Новый СписокЗначений;
	СписокВерсий.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЗначенияПоказателейОтчетовСинтетика.Показатель,
	|	СУММА(ЗначенияПоказателейОтчетовСинтетика.Значение) КАК Значение
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	|ГДЕ
	|	ЗначенияПоказателейОтчетовСинтетика.Версия В(&СписокВерсий)
	|	И ЗначенияПоказателейОтчетовСинтетика.Показатель В(&МассивПоказателей)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗначенияПоказателейОтчетовСинтетика.Показатель";
	
	Запрос.УстановитьПараметр("СписокВерсий",СписокВерсий);
	Запрос.УстановитьПараметр("МассивПоказателей",МассивПоказателей);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	СоответствиеПоказателей=Новый Соответствие;
	
	Пока Результат.Следующий() Цикл
		
		СоответствиеПоказателей.Вставить(Результат.Показатель,Результат.Значение);
		
	КонецЦикла;
	
	Возврат СоответствиеПоказателей;
			
КонецФункции // ПолучитьЗначенияПоказателей()

Процедура ПолучитьДанныеПоДвижениюДС(СтруктураПоказателей,
								ПоказательПоступления,
								ПоказательСписания,
								Сценарий,
								ВалютаОтчета,
								Проект=Неопределено,
								Организация=Неопределено,
								СтавкаДисконтирования=Неопределено,
								ДатаНачала=Неопределено,
								ДатаОкончания=Неопределено) Экспорт
															
	ВидОтчетаПоступления		= ПоказательПоступления.Владелец;
	ВидОтчетаСписания			= ПоказательСписания.Владелец;
	ПериодичностьБюджетирования	= ?(ЗначениеЗаполнено(Сценарий.Периодичность),Сценарий.Периодичность,ДвиженияБюджетированиеУХПереопределяемый.ПолучитьПериодичностьБюджетирования());
		
	Запрос=Новый Запрос;	
	
	Запрос.Текст="ВЫБРАТЬ
	|	МИНИМУМ(ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.Валюта = &ВалютаОтчета
	|	И (ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчетаПоступления
	|			ИЛИ ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчетаСписания)
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &ПериодичностьБюджетирования";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Проект = &Проект";
		Запрос.УстановитьПараметр("Проект",Проект);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала>= &ДатаНачала";
		Запрос.УстановитьПараметр("ДатаНачала",ДатаНачала);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания<= &ДатаОкончания";
		Запрос.УстановитьПараметр("ДатаОкончания",ДатаОкончания);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВалютаОтчета",			ВалютаОтчета);
	Запрос.УстановитьПараметр("Сценарий",				Сценарий);
	Запрос.УстановитьПараметр("ВидОтчетаПоступления",	ВидОтчетаПоступления);
	Запрос.УстановитьПараметр("ВидОтчетаСписания",		ВидОтчетаСписания);
	Запрос.УстановитьПараметр("ПериодичностьБюджетирования",ПериодичностьБюджетирования);

	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если (НЕ Результат.Следующий()) ИЛИ (НЕ (ЗначениеЗаполнено(Результат.ДатаНачала) И ЗначениеЗаполнено(Результат.ДатаОкончания))) Тогда
		
		СтруктураПоказателей.Вставить("ИтогоСписанияБДДС",		0);
		СтруктураПоказателей.Вставить("ИтогоПоступленияБДДС",	0);
		СтруктураПоказателей.Вставить("NPV",					0);
		СтруктураПоказателей.Вставить("IRR",					0);
		
		Возврат;
		
	КонецЕсли;
	
	ДатаНачалаАнализа		=Результат.ДатаНачала;
	ДатаОкончанияАнализа	=Результат.ДатаОкончания;
	
	ТаблицаПериодов=Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",ОбщегоНазначенияУх.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
	
	НоваяСтрока=ТаблицаПериодов.Добавить();
	НоваяСтрока.ДатаНачала=ДатаНачалаАнализа;
	ТекДатаНачала=ДатаНачалаАнализа;
	
	Пока Истина Цикл
		
		ТекДатаНачала=ОбщегоНазначенияУХ.ДобавитьИнтервал(ТекДатаНачала,ПериодичностьБюджетирования,1);
		
		Если ТекДатаНачала<ДатаОкончанияАнализа Тогда
			
			НоваяСтрока=ТаблицаПериодов.Добавить();
			НоваяСтрока.ДатаНачала=ТекДатаНачала;
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст="Выбрать ДатаНачала Поместить ТаблицаПериодов ИЗ &ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|	ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка,
	|	ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала КАК ДатаНачала
	|ПОМЕСТИТЬ ВерсииЗначенийПоказателей
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	ВерсииЗначенийПоказателей.Валюта = &ВалютаОтчета
	|	И (ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчетаПоступления
	|			ИЛИ ВерсииЗначенийПоказателей.ВидОтчета = &ВидОтчетаСписания)
	|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &ПериодичностьБюджетирования
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ДатаНачала
	|	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ДатаОкончания";
	
	Если ЗначениеЗаполнено(Организация) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Организация = &Организация";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|	И ВерсииЗначенийПоказателей.Проект = &Проект";
		Запрос.УстановитьПараметр("Проект",Проект);
		
	КонецЕсли;
	Запрос.Текст=Запрос.Текст+"
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.ДатаНачала,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейОтчетовСинтетика.Показатель = &ПоказательПоступления
	|			ТОГДА ЗначенияПоказателейОтчетовСинтетика.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Поступления,
	|	ВЫБОР
	|		КОГДА ЗначенияПоказателейОтчетовСинтетика.Показатель = &ПоказательСписания
	|			ТОГДА ЗначенияПоказателейОтчетовСинтетика.Значение
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Списания
	|ПОМЕСТИТЬ ЗначенияПоказателейПоПериодам
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|		ПО ЗначенияПоказателейОтчетовСинтетика.Версия = ВерсииЗначенийПоказателей.Ссылка
	|ГДЕ
	|	(ЗначенияПоказателейОтчетовСинтетика.Показатель = &ПоказательПоступления
	|			ИЛИ ЗначенияПоказателейОтчетовСинтетика.Показатель = &ПоказательСписания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПериодов.ДатаНачала КАК ДатаНачала,
	|	СУММА(ЕСТЬNULL(ЗначенияПоказателейПоПериодам.Поступления, 0)) КАК Поступления,
	|	СУММА(ЕСТЬNULL(ЗначенияПоказателейПоПериодам.Списания, 0)) КАК Списания
	|ИЗ
	|	ТаблицаПериодов КАК ТаблицаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияПоказателейПоПериодам КАК ЗначенияПоказателейПоПериодам
	|		ПО ТаблицаПериодов.ДатаНачала = ЗначенияПоказателейПоПериодам.ДатаНачала
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПериодов.ДатаНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаПериодов.ДатаНачала";
	
	Запрос.УстановитьПараметр("ПоказательПоступления",	ПоказательПоступления);
	Запрос.УстановитьПараметр("ПоказательСписания",		ПоказательСписания);
	Запрос.УстановитьПараметр("ДатаНачала",				ДатаНачалаАнализа);
	Запрос.УстановитьПараметр("ДатаОкончания",			ДатаОкончанияАнализа);
	Запрос.УстановитьПараметр("ТаблицаПериодов",		ТаблицаПериодов);
	
	ТаблицаДвижений=Запрос.Выполнить().Выгрузить();
	ТаблицаДвижений.Колонки.Добавить("ПриведенныйДенежныйПоток",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	НормаДоходности=?(ЗначениеЗаполнено(СтавкаДисконтирования),СтавкаДисконтирования,ПолучитьАтрибутПроекта(Сценарий,Проект,"СтавкаДисконтирования"));
	
	Если НормаДоходности=0 Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не указана ставка дисконтирования для проекта %1. Анализ потоков денежных средств невозможен.'"), Проект),,,СтатусСообщения.Информация);
		СтруктураПоказателей.Вставить("ИтогоСписанияБДДС",		ТаблицаДвижений.Итог("Списания"));
		СтруктураПоказателей.Вставить("ИтогоПоступленияБДДС",	ТаблицаДвижений.Итог("Поступления"));
		СтруктураПоказателей.Вставить("NPV",					0);
		СтруктураПоказателей.Вставить("IRR",					0);
		СтруктураПоказателей.Вставить("ИтогоЧистыйДенежныйПоток",	СтруктураПоказателей.ИтогоПоступленияБДДС	- СтруктураПоказателей.ИтогоСписанияБДДС);
		
		Возврат;
		
	КонецЕсли;
	
	СтруктураПоказателей.Вставить("ИтогоСписанияБДДС",		ТаблицаДвижений.Итог("Списания"));
	СтруктураПоказателей.Вставить("ИтогоПоступленияБДДС",	ТаблицаДвижений.Итог("Поступления"));
	СтруктураПоказателей.Вставить("ИтогоЧистыйДенежныйПоток",СтруктураПоказателей.ИтогоПоступленияБДДС	- СтруктураПоказателей.ИтогоСписанияБДДС);
	
	СтруктураПоказателей.Вставить("NPV",РассчитатьNPV(ТаблицаДвижений,	НормаДоходности,ПериодичностьБюджетирования));
	СтруктураПоказателей.Вставить("IRR",РассчитатьIRR(ТаблицаДвижений,	НормаДоходности,ПериодичностьБюджетирования));
	СтруктураПоказателей.Вставить("PBP",РассчитатьPBP(ТаблицаДвижений,	НормаДоходности,ПериодичностьБюджетирования));
	СтруктураПоказателей.Вставить("PI",	РассчитатьPI(ТаблицаДвижений,	НормаДоходности,ПериодичностьБюджетирования));
			
КонецПроцедуры // ПолучитьДанныеПоДвижениюДС()

Функция ПолучитьСтруктуруДанныхДляКорректировкиПланов(Ссылка) Экспорт
	
	Если НЕ Константы.АвтоматическаяАктуализацияДанныхПоПроектам.Получить() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("Организация",		Ссылка.ЦФО);
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОтражениеФактическихДанныхБюджетирования") Тогда
		Если Ссылка.ЭтоБДДС Тогда
			Период = Ссылка.ПериодБДДС;
		ИначеЕсли Ссылка.ЭтоБДР  Тогда
			Период = Ссылка.ПериодБДР;
		ИначеЕсли Ссылка.ЭтоРесурсы  Тогда
			Период = Ссылка.ПериодРесурсы;
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ПериодОтчета", Ссылка.Метаданные()) Тогда
		Период = Ссылка.ПериодОтчета;
		
	Иначе
		
		Период = КонтрольЛимитовУХ.ПолучитьПериодКонтроля(Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств, Ссылка.ДатаПлатежа);
		
	КонецЕсли;
	
	СтруктураДанных.Вставить("ПериодОтчета", Период);
	
	Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Сценарий",Ссылка) Тогда
		
		СтруктураДанных.Вставить("Сценарий",Ссылка.Сценарий);
		
	Иначе
		
		СтруктураДанных.Вставить("Сценарий",Справочники.Сценарии.Резерв);
		
	КонецЕсли;
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств")
		Или ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		СтруктураДанных.Вставить("ВалютаДокумента",	Ссылка.Валюта);
	Иначе	
		СтруктураДанных.Вставить("ВалютаДокумента",	Ссылка.ВалютаДокумента);
	КонецЕсли;
	СтруктураДанных.Вставить("Проект",			?(ЗначениеЗаполнено(Ссылка.Проект),Ссылка.Проект.ПроектЭтапа,Неопределено));
	
	СтруктураТЧ=Новый Структура;
	
	Для Каждого ТЧ ИЗ Ссылка.Метаданные().ТабличныеЧасти Цикл
		
		СтруктураТЧ.Вставить(ТЧ.Имя,Ссылка[ТЧ.Имя].Выгрузить());
		
	КонецЦикла;
	
	СтруктураДанных.Вставить("ТабличныеЧасти",СтруктураТЧ);
	
	Возврат СтруктураДанных;
		
КонецФункции

Процедура ОбработатьИзменениеДвиженийПоПроектам(СтруктураДанныхСтар,СтруктураДанныхНов) Экспорт
	
	Если ТипЗнч(СтруктураДанныхСтар)=Тип("Структура") И ТипЗнч(СтруктураДанныхНов)=Тип("Структура")
		И ОбщегоНазначенияУХ.СравнитьСтруктурыЗначений(СтруктураДанныхСтар,СтруктураДанныхНов) Тогда // Не изменялись данные, влияющие на планы по проектам
		
		Возврат 
			
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхСтар)=Тип("Структура") Тогда
		
		ОбновитьДанныеПоПроектам(СтруктураДанныхСтар);
		
	КонецЕсли;
	
	Если ТипЗнч(СтруктураДанныхНов)=Тип("Структура") Тогда
		
		ОбновитьДанныеПоПроектам(СтруктураДанныхНов);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеРезерваПоПроектам()

Процедура ОбновитьДанныеПоПроектам(СтруктураДанных)
	
	Если НЕ ((СтруктураДанных.Сценарий=Справочники.Сценарии.Резерв ИЛИ СтруктураДанных.Сценарий=Справочники.Сценарии.Факт)
		И ЗначениеЗаполнено(СтруктураДанных.Проект)) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СценарийАктуализации=?(СтруктураДанных.Сценарий=Справочники.Сценарии.Факт,Справочники.Сценарии.Факт,Справочники.Сценарии.План);
	
	// Определим массив статей для показателей
	МассивСтатей=Новый Массив;
	
	Для Каждого ТабличнаяЧасть ИЗ СтруктураДанных.ТабличныеЧасти Цикл
		
		Для Каждого Строка ИЗ ТабличнаяЧасть.Значение Цикл
		
			Если (НЕ ТабличнаяЧасть.Значение.Колонки.Найти("СтатьяДвиженияДенежныхСредств")=Неопределено) И ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
				
				МассивСтатей.Добавить(Строка.СтатьяДвиженияДенежныхСредств);
				
			КонецЕсли;
			
			Если (НЕ ТабличнаяЧасть.Значение.Колонки.Найти("СтатьяДоходовИРасходов")=Неопределено) И ЗначениеЗаполнено(Строка.СтатьяДоходовИРасходов) Тогда
				
				МассивСтатей.Добавить(Строка.СтатьяДоходовИРасходов);
				
			КонецЕсли;
			
			Если (НЕ ТабличнаяЧасть.Значение.Колонки.Найти("СтатьяДвиженияРесурсов")=Неопределено) И ЗначениеЗаполнено(Строка.СтатьяДвиженияРесурсов) Тогда
				
				МассивСтатей.Добавить(Строка.СтатьяДвиженияРесурсов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|ПоказателиОтчетов.Владелец КАК ВидОтчета
	|ПОМЕСТИТЬ ВидыОтчетов
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	(ПоказателиОтчетов.СтатьяДвиженияДенежныхСредств В (&МассивСтатей)
	|			ИЛИ ПоказателиОтчетов.СтатьяДоходовИРасходов В (&МассивСтатей)
	|			ИЛИ ПоказателиОтчетов.СтатьяДвиженияРесурсов В (&МассивСтатей))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыОтчетов.ВидОтчета,
	|	ЕСТЬNULL(НастраиваемыйОтчет.Ссылка, НЕОПРЕДЕЛЕНО) КАК ЭкземплярОтчета
	|ИЗ
	|	ВидыОтчетов КАК ВидыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ПО ВидыОтчетов.ВидОтчета = НастраиваемыйОтчет.ВидОтчета
	|			И (НастраиваемыйОтчет.Организация = &Организация)
	|			И (НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета)
	|			И (НастраиваемыйОтчет.Сценарий = &Сценарий)
	|			И (НастраиваемыйОтчет.Проект = &Проект)";
	
	Запрос.УстановитьПараметр("Организация",	СтруктураДанных.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	СтруктураДанных.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",		СценарийАктуализации);
	Запрос.УстановитьПараметр("Проект",			СтруктураДанных.Проект);
	Запрос.УстановитьПараметр("МассивСтатей",	МассивСтатей);
	
	ЭкземплярыОтчетов=Запрос.Выполнить().Выбрать();
	ВалютаРасчетаПоказателейПроекта=Константы.ВалютаРасчетаПоказателейПроекта.Получить();
	
	Пока ЭкземплярыОтчетов.Следующий() Цикл
		
		Если ЭкземплярыОтчетов.ЭкземплярОтчета=Неопределено Тогда
								
			РабочийЭкземпляр=Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(СтруктураДанных.Организация,СтруктураДанных.ПериодОтчета,СценарийАктуализации,ЭкземплярыОтчетов.ВидОтчета,,,,,СтруктураДанных.Проект);
			
			Если РабочийЭкземпляр=НЕопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ДокументОбъект=РабочийЭкземпляр.ПолучитьОбъект();
			
		Иначе
			
			ДокументОбъект=ЭкземплярыОтчетов.ЭкземплярОтчета.ПолучитьОбъект();
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВалютаРасчетаПоказателейПроекта) Тогда
			
			Если НЕ ЗначениеЗаполнено(ДокументОбъект.ОсновнаяВалюта) Тогда
				
				  ДокументОбъект.ОсновнаяВалюта=ВалютаРасчетаПоказателейПроекта;
			
			ИначеЕсли (НЕ ДокументОбъект.ОсновнаяВалюта=ВалютаРасчетаПоказателейПроекта)
				И ДокументОбъект.ДополнительныеВалюты.Найти(ВалютаРасчетаПоказателейПроекта,"Валюта")=Неопределено Тогда
				
				НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
				НоваяСтрока.Валюта=ВалютаРасчетаПоказателейПроекта;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДокументОбъект.ЗаполнитьОтчетПоУмолчанию();
		
		Попытка
			
			ДокументОбъект.Записать();
						
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось записать экземпляр отчета вида %1 с параметрами:
			|Организация: %2
			|Период отчета: %3
			|Сценарий: %4: 
			|%5'"), ЭкземплярыОтчетов.ВидОтчета, СтруктураДанных.Организация, СтруктураДанных.ПериодОтчета, СценарийАктуализации, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
			
		КонецПопытки;
					
	КонецЦикла;
				
КонецПроцедуры // ОбновитьДанныеПоПроектам() 

Функция РассчитатьNPV(ТаблицаПериодов,НормаДоходностиГодовая,Периодичность) Экспорт
			
	НормаДоходностиНаПериод=НормаДоходностиГодовая/(ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(НачалоГода(ТекущаяДата()),КонецГода(ТекущаяДата()),Периодичность)*100);
	
	Для Индекс=0 По ТаблицаПериодов.Количество()-1 Цикл
		
		СтрокаПериод=ТаблицаПериодов[Индекс];
		
		ЧистыйДенежныйПоток=СтрокаПериод.Поступления-СтрокаПериод.Списания;
		
		СтрокаПериод.ПриведенныйДенежныйПоток=ЧистыйДенежныйПоток*(1/Pow((1+НормаДоходностиНаПериод),Индекс+1));
		
	КонецЦикла;
	
	Возврат ТаблицаПериодов.Итог("ПриведенныйДенежныйПоток");
	
КонецФункции // ПолучитьДанныеПоСтавкеДисконтирования()

Функция РассчитатьPBP(ТаблицаПериодов,НормаДоходностиГодовая,Периодичность) Экспорт
			
	НормаДоходностиНаПериод=НормаДоходностиГодовая/(ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(НачалоГода(ТекущаяДата()),КонецГода(ТекущаяДата()),Периодичность)*100);
	
	НакопленныйДенежныйПоток=0;
	ПериодОкупаемости=0;
	
	Для Индекс=0 По ТаблицаПериодов.Количество()-1 Цикл
		
		СтрокаПериод=ТаблицаПериодов[Индекс];
		
		ЧистыйДенежныйПоток=СтрокаПериод.Поступления-СтрокаПериод.Списания;
		
		СтрокаПериод.ПриведенныйДенежныйПоток=ЧистыйДенежныйПоток*(1/Pow((1+НормаДоходностиНаПериод),Индекс+1));
		
		НакопленныйДенежныйПоток=НакопленныйДенежныйПоток+СтрокаПериод.ПриведенныйДенежныйПоток;
		
		Если НакопленныйДенежныйПоток>0 Тогда
			
			Если ПериодОкупаемости=0 Тогда
				
				ПериодОкупаемости=Индекс+1;
				
			КонецЕсли;
			
		Иначе
			
			ПериодОкупаемости=0;
			
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат ПериодОкупаемости;
	
КонецФункции // РассчитатьPBP()

Функция РассчитатьPI(ТаблицаПериодов,НормаДоходностиГодовая,Периодичность) Экспорт
			
	НормаДоходностиНаПериод=НормаДоходностиГодовая/(ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(НачалоГода(ТекущаяДата()),КонецГода(ТекущаяДата()),Периодичность)*100);
	
	НакопленныйДенежныйПоток=0;
	ПериодОкупаемости=0;
	ТаблицаПериодов.Колонки.Добавить("ПриведеннаяСтоимостьИнвестиций",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Индекс=0 По ТаблицаПериодов.Количество()-1 Цикл
		
		СтрокаПериод=ТаблицаПериодов[Индекс];
		
		ЧистыйДенежныйПоток=СтрокаПериод.Поступления-СтрокаПериод.Списания;
		
		СтрокаПериод.ПриведенныйДенежныйПоток		= ЧистыйДенежныйПоток*(1/Pow((1+НормаДоходностиНаПериод),Индекс+1));
		СтрокаПериод.ПриведеннаяСтоимостьИнвестиций	= СтрокаПериод.Списания*(1/Pow((1+НормаДоходностиНаПериод),Индекс+1));
				
	КонецЦикла;
	
	Возврат ?(ТаблицаПериодов.Итог("ПриведеннаяСтоимостьИнвестиций")=0,0,ТаблицаПериодов.Итог("ПриведенныйДенежныйПоток")/ТаблицаПериодов.Итог("ПриведеннаяСтоимостьИнвестиций"));	
	
КонецФункции // РассчитатьPI()

Функция РассчитатьIRR(ТаблицаПериодов,НормаДоходностиГодовая,Периодичность) Экспорт
	
	ЧислоИтерацийУточнения = Константы.МаксимальноеЧислоИтерацийРасчетаЭСП.Получить();
	ЧислоИтерацийУточнения = ?(ЧислоИтерацийУточнения = 0, 100, ЧислоИтерацийУточнения);
	
	РазрядПорогаТочности = Константы.ПорогТочностиРасчетаЭСП.Получить();
	ПорогТочности = ?(РазрядПорогаТочности = 0, 0.0000001, Pow(10, -РазрядПорогаТочности));
	
	NPV_0=РассчитатьNPV(ТаблицаПериодов,0,Периодичность);
	
	Если NPV_0<=ПорогТочности Тогда
		
		Возврат 0;
		
	КонецЕсли;
	
	ЗначениеШага		= 1;
	НижняяГраница		= 0;
	ВерхняяГраница		= 0;
	NPV_НижняяГраница	= NPV_0;
	NPV_ВерхняяГраница	= NPV_0;
		
	Пока Истина Цикл
		
		NPV_тек=РассчитатьNPV(ТаблицаПериодов,НижняяГраница+ЗначениеШага,Периодичность);
		
		Если NPV_тек>0 Тогда
			
			НижняяГраница=НижняяГраница+ЗначениеШага;
			ЗначениеШага=ЗначениеШага*2;
			NPV_НижняяГраница=NPV_тек;
			
		Иначе
			
			ВерхняяГраница=НижняяГраница+ЗначениеШага;
			NPV_ВерхняяГраница=NPV_тек;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерОперации=1 ПО ЧислоИтерацийУточнения Цикл
		
		ТекГраница=(ВерхняяГраница+НижняяГраница)/2;
				
		NPV_Тек=РассчитатьNPV(ТаблицаПериодов,ТекГраница,Периодичность);
		
		Если ОбщегоНазначенияУХ.ЗначениеПоМодулю(NPV_Тек)<=ПорогТочности Тогда
			
			Возврат ТекГраница;
						
		ИначеЕсли NPV_Тек*NPV_НижняяГраница<0 Тогда
			
			ВерхняяГраница=ТекГраница;
			NPV_ВерхняяГраница=NPV_Тек;
			
		ИначеЕсли NPV_Тек*NPV_ВерхняяГраница<0 Тогда
			
			НижняяГраница=ТекГраница;
			NPV_НижняяГраница=NPV_Тек;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияУХ.ЗначениеПоМодулю(ВерхняяГраница-НижняяГраница)<=ПорогТочности Тогда
			
			Возврат ВерхняяГраница;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекГраница;
					
КонецФункции // РассчитатьNPV()

Процедура ОбновитьСводныеПоказателиПроектовПоБюджетам(Сценарий,Проект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Проект", Проект);
	
	Если Сценарий = Справочники.Сценарии.Факт Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоПоступленияБДДС,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоСписанияБДДС,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоДоходыБДР,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоРасходыБДР,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоПоступленияРесурсы,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоСписанияРесурсы
		|ИЗ
		|	РегистрНакопления.ФактПоБюджетам.Обороты(, , , Проект = &Проект) КАК ФактПоБюджетамОбороты";
	ИначеЕсли Сценарий = Справочники.Сценарии.Резерв Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоПоступленияБДДС,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоСписанияБДДС,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоДоходыБДР,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоРасходыБДР,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоПоступленияРесурсы,
		|	ЕСТЬNULL(СУММА(ВЫБОР
		|			КОГДА ФактПоБюджетамОбороты.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов)
		|					И ФактПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ТОГДА ФактПоБюджетамОбороты.СуммаУпрОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ),0) КАК ИтогоСписанияРесурсы
		|ИЗ
		|	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(, , , Проект = &Проект) КАК ФактПоБюджетамОбороты";
	Иначе
		Возврат ;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить().Выбрать();
	
	СценарийДляНабораЗаписей = ?(Сценарий=Справочники.Сценарии.Резерв, Справочники.Сценарии.План, Сценарий);
	
	НаборЗаписей = РегистрыСведений.АтрибутыПроектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Проект.Установить(Проект);
	НаборЗаписей.Отбор.Сценарий.Установить(СценарийДляНабораЗаписей);
	
	НаборЗаписей.Прочитать();
	Если НаборЗаписей.Количество() = 0 Тогда
		РабочаяСтрока = НаборЗаписей.Добавить();
		РабочаяСтрока.Проект = Проект;
		РабочаяСтрока.Сценарий = СценарийДляНабораЗаписей;
	Иначе
		РабочаяСтрока = НаборЗаписей[0];
	КонецЕсли;
	
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РабочаяСтрока, Результат);
		РабочаяСтрока.ИтогоЧистыйДенежныйПоток	= Результат.ИтогоПоступленияБДДС - Результат.ИтогоСписанияБДДС;
		РабочаяСтрока.ИтогоПрибыльУбыток		= Результат.ИтогоДоходыБДР - Результат.ИтогоРасходыБДР;
		РабочаяСтрока.ИтогоМатериальныйБаланс	= Результат.ИтогоПоступленияРесурсы - Результат.ИтогоСписанияРесурсы;
		РабочаяСтрока.NPV = 0;
		РабочаяСтрока.IRR = 0;
		РабочаяСтрока.PBP = 0;
		РабочаяСтрока.PI = 0;
	Иначе
		РабочаяСтрока.ИтогоЧистыйДенежныйПоток	= 0;
		РабочаяСтрока.ИтогоПрибыльУбыток		= 0;
		РабочаяСтрока.ИтогоМатериальныйБаланс	= 0;
		РабочаяСтрока.NPV = 0;
		РабочаяСтрока.IRR = 0;
		РабочаяСтрока.PBP = 0;
		РабочаяСтрока.PI = 0;
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
		
КонецПроцедуры // ОбновитьСводныеПоказателиПроектовПоБюджетам() 

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ПЕРЕСЧЕТА ЗАВИСИМЫХ ЭКЗЕМПЛЯРОВ ОТЧЕТОВ

Процедура РассчитатьЗависимыеЭкземплярыОтчетов(ИсходныйЭкземплярОтчета,МассивЭкземпляров) Экспорт
	
	Если НЕ Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
		
	// Обновим экземпляры отчетов, в которых исходный экземпляр указан как влияющий
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастраиваемыйОтчетЭкземплярыИсточники.Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет.ЭкземплярыИсточники КАК НастраиваемыйОтчетЭкземплярыИсточники
	|ГДЕ
	|	НастраиваемыйОтчетЭкземплярыИсточники.ЭкземплярОтчета = &ИсходныйЭкземпляр";
	
	Запрос.УстановитьПараметр("ИсходныйЭкземпляр",ИсходныйЭкземплярОтчета);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОбновитьЭкземплярОтчета(Результат.Ссылка,МассивЭкземпляров,ИсходныйЭкземплярОтчета.ОсновнаяВалюта);
				
	КонецЦикла; 
	
КонецПроцедуры // РассчитатьЗависимыеЭкземплярыОтчетов()
				
Процедура ОбновитьЭкземплярОтчета(ДокументСсылка,МассивЭкземпляров,ОсновнаяВалюта)
	
	Если НЕ МассивЭкземпляров.Найти(ДокументСсылка)=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	МассивЭкземпляров.Добавить(ДокументСсылка);	
	ДокументОбъект=ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.ЧтениеНеактуальныхЗаписей=Истина;
	
	Попытка
		
		ДокументОбъект.Заблокировать();
		
		Если НЕ ЗначениеЗаполнено(ДокументОбъект.ОсновнаяВалюта) Тогда
			
			ДокументОбъект.ОсновнаяВалюта=ОсновнаяВалюта;	
			
		ИначеЕсли (НЕ ДокументОбъект.ОсновнаяВалюта=ОсновнаяВалюта)
			И ДокументОбъект.ДополнительныеВалюты.Найти(ОсновнаяВалюта,"Валюта")=Неопределено Тогда
			
			НоваяСтрока=ДокументОбъект.ДополнительныеВалюты.Добавить();
			НоваяСтрока.Валюта=ОсновнаяВалюта;
			
		КонецЕсли;
		
		ДокументОбъект.МассивЭкземпляров=МассивЭкземпляров;
		ДокументОбъект.ЗаполнитьОтчетПоУмолчанию();
		ДокументОбъект.Записать();
		ДокументОбъект.Разблокировать();
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось записать экземпляр отчета вида %1 с параметрами:
			|Организация: %2
			|Период отчета: %3
			|Сценарий: %4: 
			|%5'"), ДокументОбъект.ВидОтчета, ДокументОбъект.Организация, ДокументОбъект.ПериодОтчета, ДокументОбъект.Сценарий, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),,,СтатусСообщения.Внимание);
		
	КонецПопытки;
	
КонецПроцедуры // ОбновитьЭкземплярОтчета(ДокументСсылка)

Процедура ИзменитьЗначенияДляОтчетовПоВнутригрупповымОперациям(ОбъектРасчета,ДеревоОтчетов) Экспорт
	
	Если ДеревоОтчетов.Строки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Изменение значений связанных внутригрупповых показателей:'"), , , СтатусСообщения.Информация);
	
	РассчитыватьЗависимые=Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	
	ТекстАналитикиВидаОтчета="";
	
	Для Индекс=1 По ОбъектРасчета.МаксАналитикОтчета Цикл
		
		ТекстАналитикиВидаОтчета=ТекстАналитикиВидаОтчета+",Аналитика"+Индекс;
		
	КонецЦикла;
	
	ТекстАналитикиВидаОтчета=Сред(ТекстАналитикиВидаОтчета,2);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	Для Каждого СтрокаОтчета Из ДеревоОтчетов.Строки Цикл
		
		ОбработкаОбъект							= Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
		ОбработкаОбъект.ВалютаОтображения		= ОбъектРасчета.ОсновнаяВалюта;
		ОбработкаОбъект.ВидОтчета				= СтрокаОтчета.ВидВнешнегоОтчета;
		ОбработкаОбъект.РассчитыватьЗависимые 	= РассчитыватьЗависимые;
		
		Для Каждого СтрокаПоказателя Из СтрокаОтчета.Строки Цикл
			
			НоваяСтрока=ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ОбъектРасчета);			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаПоказателя,,ТекстАналитикиВидаОтчета);
			
			НоваяСтрока.Организация=СтрокаОтчета.ОрганизацияВнешнегоОтчета;
			НоваяСтрока.ПоказательОтчета=СтрокаПоказателя.Показатель;
		
		КонецЦикла;
		
		СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(ОбработкаОбъект,ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Выгрузить());
		ОбработкаОбъект.ЗаписатьЗначенияТаблицыПоказателей();
		
	КонецЦикла;
	
КонецПроцедуры // ИзменитьЗначенияДляОтчетовПоВнутригрупповымОперациям()

Функция РассчитатьЗависимыеПоказателиОтчетов(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ТрассировкаРасчета=Ложь,ПересчитыватьТекущие=Истина) Экспорт
	
	ОбработкаОбъект=Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();	
	ОбработкаОбъект.ТрассировкаРасчета=ТрассировкаРасчета;
	ОбработкаОбъект.РассчитатьРекурсивноЗависимыеПоказатели(ОбъектРасчета,СтруктураКлючевыхРеквизитов,ПересчитыватьТекущие);
	
	Если ТрассировкаРасчета Тогда
		
		Возврат Новый Структура("ТаблицаИсходныхПоказателей,ТаблицаТрассировкиРасчета",ОбработкаОбъект.ТаблицаИсходныхПоказателей,ОбработкаОбъект.ТаблицаТрассировкиРасчета);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // РассчитатьЗависимыеПоказателиОтчетов() 
	
///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОТРАЖЕНИЯ ФАКТИЧЕСКИХ ДАННЫХ В ПОДСИСТЕМЕ БЮДЖЕТИРОВАНИЯ

#Область ОФД_НастраиваемыеПравила

// Процедура - Обработать настраиваемые правила для документа Источник
//
// Параметры:
//  Источник - ДокументСсылка - Ссылка, на документ, на основании которого будут выполнены настраиваемые правила
//  Отказ	 - Булево	 - Истина, если есть ошибки и требуется отказаться от выполнения операции
//
Процедура ОбработатьНастраиваемыеПравила(Источник, Отказ) Экспорт
	
	Перем Организация;
	Перем Сценарий;
	
	МетаданныеИсточника = Источник.Метаданные();
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", МетаданныеИсточника) Тогда
		Организация = Источник.Организация;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сценарий", МетаданныеИсточника) Тогда
		Сценарий = Источник.Сценарий;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Обработки.КорректировкиЗначенийПоказателей.ПроверитьОбработатьКорректировкиПоШаблонам(Источник,Отказ);
	КонецЕсли;
	
	ДокументБД=Справочники.ДокументыБД.НайтиПоНаименованию(МетаданныеИсточника.Имя,Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);	
	ПериодОтчета = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(Источник.Дата, ДвиженияБюджетированиеУХПереопределяемый.ПолучитьПериодичностьБюджетирования());
	
	МассивЗаполняемыхОбъектов=Обработки.ГенерацияОбъектовБД.ПолучитьПараметрыДляЗаполненияОбъектовБДПоИсходному(ДокументБД, Организация, Сценарий);
	
	Для Каждого ДанныеДляПроведения ИЗ МассивЗаполняемыхОбъектов Цикл
		
		СтруктураПоискаСеанса = Новый Структура;
		СтруктураПоискаСеанса.Вставить("ИспользуемаяИБ",		ДанныеДляПроведения.ИспользуемаяИБ);
		СтруктураПоискаСеанса.Вставить("ПравилоЗаполнения",		ДанныеДляПроведения.ПравилоЗаполнения);
		СтруктураПоискаСеанса.Вставить("ОбъектБД",				ДанныеДляПроведения.ОбъектБД);
		СтруктураПоискаСеанса.Вставить("Организация",			Организация);
		СтруктураПоискаСеанса.Вставить("Сценарий",				Сценарий);
		СтруктураПоискаСеанса.Вставить("ОбластьГенерации",		ДанныеДляПроведения.ОбластьГенерации);
		СтруктураПоискаСеанса.Вставить("ПериодОтчета",			ПериодОтчета);
		
		
		СтруктураЗаписи = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураПоискаСеанса);
		СтруктураЗаписи.Вставить("СеансОбменаДанными",		Справочники.СеансыОбменаДанными.НайтиСоздатьСеансОбменаДанными(СтруктураПоискаСеанса));
		СтруктураЗаписи.Вставить("ИсходныйОбъектСсылка",	Источник.Ссылка);
		СтруктураЗаписи.Вставить("ИсходныйОбъектДата",		Источник.Дата);
		СтруктураЗаписи.Вставить("ПроводитьДокументы",		ДанныеДляПроведения.ПроводитьДокументы);
		
		Если НЕ ДанныеДляПроведения.ВыполнятьАвтоматически Тогда
			
			СтруктураЗаписи.Вставить("ОбработанныйОбъектСсылка",);
			СтруктураЗаписи.Вставить("ОбработкаЗавершена",Ложь);
			
			НаборЗаписей=РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИсходныйОбъектСсылка.Установить(Источник.Ссылка);
			
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество()=0 Тогда
				
				НоваяСтрока				=НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
				
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
				
		Иначе	
			
			ОбработкаОбъект=Обработки.ГенерацияОбъектовБД.Создать();
			ЗаполнитьЗначенияСвойств(ОбработкаОбъект,СтруктураЗаписи);
			ОбработкаОбъект.ОбработатьОбъектыБД();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьНастраиваемыеПравилаПриОтменеПроведения(Источник, Отказ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина); // По причине обработки любых ссылок.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументСсылка", Источник.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка КАК ДокументОтраженияФакта
	|ИЗ
	|	РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБД
	|ГДЕ
	|	ОбработанныеОбъектыБД.ИсходныйОбъектСсылка = &ДокументСсылка
	|	И ОбработанныеОбъектыБД.ОбработкаЗавершена
	|	И ОбработанныеОбъектыБД.ОбработанныйОбъектСсылка ССЫЛКА Документ.ОтражениеФактическихДанныхБюджетирования";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ДокументОбъект = Выборка.ДокументОтраженияФакта.ПолучитьОбъект();
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			НаборЗаписей = РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ИсходныйОбъектСсылка.Установить(Источник.Ссылка);
			НаборЗаписей.Прочитать();
			Для Каждого Движение Из НаборЗаписей Цикл
				Движение.ОбработкаЗавершена = Ложь;
			КонецЦикла;
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось отменить документ отражения факта бюджетирования'") + " "+ДокументОбъект,Отказ,,СтатусСообщения.Важное);
		КонецПопытки;
		
	КонецЕсли;
	
	Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("Организация", Источник) Тогда
		Обработки.КорректировкиЗначенийПоказателей.ПроверитьОбработатьКорректировкиПоШаблонам(Источник, Отказ, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗавершитьОбработкуОбъектаБД(ДанныеОбъекта) Экспорт
	
	Если Не ЗначениеЗаполнено(ДанныеОбъекта.ИсходныйДокумент) Тогда
		Возврат;
	КонецЕсли;
	
	// Сеанс обмена
	СтруктураПоискаСеанса = Новый Структура;
	СтруктураПоискаСеанса.Вставить("ИспользуемаяИБ",	ДанныеОбъекта.ИспользуемаяИБ);
	СтруктураПоискаСеанса.Вставить("ОбъектБД",			ДанныеОбъекта.ДокументБД);
	СтруктураПоискаСеанса.Вставить("Организация",		ДанныеОбъекта.Организация);
	СтруктураПоискаСеанса.Вставить("ПравилоЗаполнения",	ДанныеОбъекта.ПравилоЗаполнения);
	СтруктураПоискаСеанса.Вставить("Сценарий",			ДанныеОбъекта.Сценарий);
	СтруктураПоискаСеанса.Вставить("ОбластьГенерации",	ДанныеОбъекта.ОбластьГенерации);
	СтруктураПоискаСеанса.Вставить("ПериодОтчета",		ДанныеОбъекта.ПериодОтчета);
	
	СеансОбмена = Справочники.СеансыОбменаДанными.НайтиСоздатьСеансОбменаДанными(СтруктураПоискаСеанса);
	
	// Набор записей
	НаборЗаписей = РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИсходныйОбъектСсылка.Установить(ДанныеОбъекта.ИсходныйДокумент);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 1 Тогда
		СтрокаЗаписи = НаборЗаписей[0];
	Иначе
		НаборЗаписей.Очистить();
		СтрокаЗаписи = НаборЗаписей.Добавить();
	КонецЕсли;
	
	//
	СтрокаЗаписи.Активность					= Истина;
	СтрокаЗаписи.СеансОбменаДанными			= СеансОбмена;
	СтрокаЗаписи.ИсходныйОбъектСсылка		= ДанныеОбъекта.ИсходныйДокумент;
	СтрокаЗаписи.ИсходныйОбъектДата			= ДанныеОбъекта.ДатаИсходногоДокумента;
	СтрокаЗаписи.ОбработанныйОбъектСсылка	= ДанныеОбъекта.ОбработанныйОбъектСсылка;
	СтрокаЗаписи.ОбработкаЗавершена			= Истина;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти 

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ПЕРИОДИЧЕСКИМИ ОПЕРАЦИЯМИ

Процедура СформироватьЗаявкиПоПериодическимОперациям(ДоговорКонтрагента) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	НастройкиПериодическихОперацийГрафикиОпераций.НомерСтроки,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.Валюта,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.СуммаОперации,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.СчетОрганизации,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.СчетКонтрагента,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.СтатьяБюджета,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.Ссылка КАК НастройкаПериодическойОперации,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.ДатаОперации,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.ВидОперации.ТипОперацииФИ КАК ТипОперацииФИ,
	             |	НастройкиПериодическихОперацийГрафикиОпераций.ВидОперации.ВидБюджета КАК ВидБюджета
	             |ПОМЕСТИТЬ ОперацииПоДоговору
	             |ИЗ
	             |	Справочник.НастройкиПериодическихОпераций.ГрафикиОпераций КАК НастройкиПериодическихОперацийГрафикиОпераций
	             |ГДЕ
	             |	НастройкиПериодическихОперацийГрафикиОпераций.Ссылка.ДоговорКонтрагента = &ДоговорКонтрагента
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ГрафикиПериодическихОпераций.ВерсияНастройкиПериодическихОпераций,
	             |	ГрафикиПериодическихОпераций.СуммаОперации,
	             |	ГрафикиПериодическихОпераций.ЗаявкаНаОперацию,
	             |	ГрафикиПериодическихОпераций.Оплачено,
	             |	ГрафикиПериодическихОпераций.ДатаОплаты,
	             |	ГрафикиПериодическихОпераций.Валюта,
	             |	ГрафикиПериодическихОпераций.СтатьяБюджета,
	             |	ГрафикиПериодическихОпераций.СчетОрганизации,
	             |	ГрафикиПериодическихОпераций.СчетКонтрагента,
	             |	ГрафикиПериодическихОпераций.Период,
	             |	ГрафикиПериодическихОпераций.НомерОперации
	             |ПОМЕСТИТЬ ГрафикиОпераций
	             |ИЗ
	             |	РегистрСведений.ГрафикиПериодическихОпераций КАК ГрафикиПериодическихОпераций
	             |ГДЕ
	             |	ГрафикиПериодическихОпераций.ДоговорКонтрагента = &ДоговорКонтрагента
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ЕСТЬNULL(ОперацииПоДоговору.СуммаОперации, НЕОПРЕДЕЛЕНО) КАК СуммаОперацииНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.ТипОперацииФИ, НЕОПРЕДЕЛЕНО) КАК ТипОперацииФИНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.ВидБюджета, НЕОПРЕДЕЛЕНО) КАК ВидБюджетаНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.ДатаОперации, НЕОПРЕДЕЛЕНО) КАК ДатаОперацииНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.ВидОперации, НЕОПРЕДЕЛЕНО) КАК ВидОперацииНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.НомерСтроки, НЕОПРЕДЕЛЕНО) КАК НомерСтрокиНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.Валюта, НЕОПРЕДЕЛЕНО) КАК ВалютаНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.СчетОрганизации, НЕОПРЕДЕЛЕНО) КАК СчетОрганизацииНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.СчетКонтрагента, НЕОПРЕДЕЛЕНО) КАК СчетКонтрагентаНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.СтатьяБюджета, НЕОПРЕДЕЛЕНО) КАК СтатьяБюджетаНов,
	             |	ЕСТЬNULL(ОперацииПоДоговору.НастройкаПериодическойОперации, НЕОПРЕДЕЛЕНО) КАК НастройкаПериодическойОперацииНов,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.ВерсияНастройкиПериодическихОпераций, НЕОПРЕДЕЛЕНО) КАК НастройкаПериодическойОперацииСтар,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.СуммаОперации, НЕОПРЕДЕЛЕНО) КАК СуммаОперацииСтар,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.ЗаявкаНаОперацию, НЕОПРЕДЕЛЕНО) КАК ЗаявкаНаОперацию,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.Оплачено, НЕОПРЕДЕЛЕНО) КАК Оплачено,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.ДатаОплаты, НЕОПРЕДЕЛЕНО) КАК ДатаОплаты,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.Валюта, НЕОПРЕДЕЛЕНО) КАК ВалютаСтар,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.СтатьяБюджета, НЕОПРЕДЕЛЕНО) КАК СтатьяБюджетаСтар,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.СчетОрганизации, НЕОПРЕДЕЛЕНО) КАК СчетОрганизацииСтар,
	             |	ЕСТЬNULL(ГрафикиПериодическихОпераций.СчетКонтрагента, НЕОПРЕДЕЛЕНО) КАК СчетКонтрагентаСтар,
	             |	ГрафикиПериодическихОпераций.Период КАК ПериодСтар
	             |ИЗ
	             |	ОперацииПоДоговору КАК ОперацииПоДоговору
	             |		ПОЛНОЕ СОЕДИНЕНИЕ ГрафикиОпераций КАК ГрафикиПериодическихОпераций
	             |		ПО ОперацииПоДоговору.НастройкаПериодическойОперации = ГрафикиПериодическихОпераций.ВерсияНастройкиПериодическихОпераций
	             |			И ОперацииПоДоговору.НомерСтроки = ГрафикиПериодическихОпераций.НомерОперации
	             |			И ОперацииПоДоговору.Валюта = ГрафикиПериодическихОпераций.Валюта
	             |			И ОперацииПоДоговору.ДатаОперации = ГрафикиПериодическихОпераций.Период";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Результат=Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НастройкаПериодическойОперацииНов=Неопределено И ЗначениеЗаполнено(Выборка.ЗаявкаНаОперацию) Тогда
			
			ЗаявкаОбъект=Выборка.ЗаявкаНаОперацию.ПолучитьОбъект();
			ЗаявкаОбъект.УстановитьПометкуУдаления(Истина);
			ЗаявкаОбъект.Записать();
			
			НаборЗаписей=РегистрыСведений.ГрафикиПериодическихОпераций.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.ВерсияНастройкиПериодическихОпераций	.Установить(Выборка.НастройкаПериодическойОперацииСтар);
			НаборЗаписей.Отбор.ДоговорКонтрагента					.Установить(ДоговорКонтрагента);
			НаборЗаписей.Отбор.Период								.Установить(Выборка.ПериодСтар);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать(Истина);
			
		ИначеЕсли Выборка.НастройкаПериодическойОперацииСтар=Неопределено Тогда
			
			НаборЗаписей=РегистрыСведений.ГрафикиПериодическихОпераций.СоздатьНаборЗаписей();
			НоваяСтрока=НаборЗаписей.Добавить();
			НоваяСтрока.Период								= Выборка.ДатаОперацииНов;
			НоваяСтрока.Активность=Истина;
			НоваяСтрока.Валюта								= Выборка.ВалютаНов;
			НоваяСтрока.ВерсияНастройкиПериодическихОпераций= Выборка.НастройкаПериодическойОперацииНов;
			НоваяСтрока.ДоговорКонтрагента					= ДоговорКонтрагента;
			НоваяСтрока.НомерОперации						= Выборка.НомерСтрокиНов;
			НоваяСтрока.Организация							= ДоговорКонтрагента.Организация;
			НоваяСтрока.Контрагент							= ДоговорКонтрагента.Владелец;
			НоваяСтрока.ПриходРасход						= Выборка.ВидОперацииНов.ПриходРасход;
			НоваяСтрока.СтатьяБюджета						= Выборка.СтатьяБюджетаНов;
			НоваяСтрока.СуммаОперации						= Выборка.СуммаОперацииНов;
			НоваяСтрока.СчетКонтрагента						= Выборка.СчетКонтрагентаНов;
			НоваяСтрока.СчетОрганизации						= Выборка.СчетОрганизацииНов;
			НоваяСтрока.ТипОперацииФИ						= Выборка.ТипОперацииФИНов;
			
			МенеджерДокумента = ЗаявкиНаОперации.ПолучитьМенеджерЗаявки(Выборка.ВидБюджетаНов, Выборка.ПриходРасходНов);
			Если Не ЗначениеЗаполнено(МенеджерДокумента) Тогда
				ВызватьИсключение НСтр("ru = 'Не удалось определить вид документа'");
			КонецЕсли;
			ДокументОбъект = МенеджерДокумента.СоздатьДокумент();
			СтруктураЗаполнения = Новый Структура;
			ОбщегоНазначенияУХ.ПеренестиСтрокуВыборкиВСтруктуру(Результат, Выборка,СтруктураЗаполнения);
			СтруктураЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
			СтруктураЗаполнения.Вставить("Дата", Выборка.ДатаОперацииНов);
			СтруктураЗаполнения.Вставить("ДатаНачала", Выборка.ДатаОперацииНов);
			СтруктураЗаполнения.Вставить("ФормаОплаты", Перечисления.ФормыОплаты.Безналичная);
			СтруктураЗаполнения.Вставить("ВалютаДокумента", Выборка.ВалютаНов);
			СтруктураЗаполнения.Вставить("СуммаДокумента", Выборка.СуммаОперацииНов);
			СтруктураЗаполнения.Вставить("ВидБюджета", Выборка.ВидБюджетаНов);
			СтруктураЗаполнения.Вставить("БанковскийСчетКасса", Выборка.СчетОрганизацииНов);
			СтруктураЗаполнения.Вставить("СтатьяБюджета", Выборка.СтатьяБюджетаНов);
			
			ДокументОбъект.Заполнить(СтруктураЗаполнения);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			НоваяСтрока.ЗаявкаНаОперацию=ДокументОбъект.Ссылка;
			НаборЗаписей.Записать(Ложь);
			
		ИначеЕсли НЕ (Выборка.ВалютаНов=Выборка.ВалютаСтар
					И Выборка.СчетОрганизацииНов=Выборка.СчетОрганизацииСтар
					И Выборка.СчетКонтрагентаНов=Выборка.СчетКонтрагентаСтар
					И Выборка.ВидОперацииНов=Выборка.ВидОперацииСтар
					И Выборка.СуммаОперацииНов=Выборка.СуммаОперацииСтар
					И ЗначениеЗаполнено(Выборка.ЗаявкаНаОперацию)) Тогда
					
					ДокументОбъект=Выборка.ЗаявкаНаОперацию.ПолучитьОбъект();
					ДокументОбъект.ФормаОплаты					= Перечисления.ФормыОплаты.Безналичная;
					ДокументОбъект.ВалютаДокумента				= Выборка.ВалютаНов;
					ДокументОбъект.СуммаДокумента				= Выборка.СуммаОперацииНов;
					ДокументОбъект.БанковскийСчетКасса 			= Выборка.СчетОрганизацииНов;
					ДокументОбъект.СчетКонтрагента				= Выборка.СчетКонтрагентаНов;
					ДокументОбъект.СуммаДокумента				= Выборка.СуммаОперацииНов;
					ДокументОбъект.ДвиженияОперации.Очистить();
					
					КолонкаСтатья = ДвиженияБюджетированиеКлиентСерверУХ.ИмяКолонкиСтатья(Выборка.ВидБюджетаНов);
					
					СтрокаДвижения									= ДокументОбъект.ДвиженияОперации.Добавить();
					СтрокаДвижения.Сумма							= Выборка.СуммаОперацииНов;
					СтрокаДвижения[КолонкаСтатья]	= Выборка.СтатьяБюджетаНов;
					
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					
					НаборЗаписей=РегистрыСведений.ГрафикиПериодическихОпераций.СоздатьНаборЗаписей();
					
					НаборЗаписей.Отбор.ВерсияНастройкиПериодическихОпераций	.Установить(Выборка.НастройкаПериодическойОперацииСтар);
					НаборЗаписей.Отбор.ДоговорКонтрагента					.Установить(ДоговорКонтрагента);
					НаборЗаписей.Отбор.Период								.Установить(Выборка.ПериодСтар);
					
					НаборЗаписей.Прочитать();
					НаборЗаписей[0].Валюта 						= Выборка.ВалютаНов;
					НаборЗаписей[0].СчетОрганизации 			= Выборка.СчетОрганизацииНов;
					НаборЗаписей[0].СчетКонтрагента 			= Выборка.СчетКонтрагентаНов;
					НаборЗаписей[0].СуммаОперации 				= Выборка.СуммаОперацииНов;
	
					НаборЗаписей.Записать(Истина);
					
				КонецЕсли;
				
		КонецЦикла;
			
	
КонецПроцедуры // СформироватьЗаявкиПоПериодическимОперациям() 

#Область ДвиженияЗаявокИРезервирования

Процедура ПроверитьНеобходимостьУстановкиСтатусаЧерновик(Объект, РежимЗаписи) Экспорт
	
	Если Объект.ЭтоНовый() И НЕ РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Объект.ДополнительныеСвойства.Вставить("УстановитьСтатусЧерновик", Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьСтатусЧерновикПриНеобходимости(Объект, ЭтоНовыйОбъектВход = Ложь) Экспорт
	
	Если Объект.ДополнительныеСвойства.Свойство("УстановитьСтатусЧерновик") Тогда
		//Проверим наличие поля Ответственный у документа
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Ответственный", Объект.Метаданные()) Тогда
			НовыйОтветственный = Объект.Ответственный;
		Иначе
			НовыйОтветственный = Неопределено;   		//Передадим пустое значение - будет выставлен текущий пользователь
		КонецЕсли;	
		ОтправлятьУведомление = НЕ ЭтоНовыйОбъектВход;		// Для нового объекта не отправляем уведомление об изменении статуса.
		//Переведем документ в Черновик
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(
			Объект.Ссылка, 
			Перечисления.СостоянияСогласования.Черновик, 
			ТекущаяДата(), 
			НовыйОтветственный, 
			, 		// Форма.
			,		// Документ процесса.
			ОтправлятьУведомление);
		
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетыУсловныхЕдиниц

// Возвращает значение курса с поправкой на валютный коридор [КурсНеМенееВход; КурсНеБолееВход]
Функция КурсСУчетомВалютногоКоридора(КурсВход, КурсНеМенееВход, КурсНеБолееВход, КурсПлатежаНеМенееВВалютеОплаты = 1, КурсПлатежаНеБолееВВалютеОплаты = 1)
	// Учет минимального курса
	РезультирующийКурс = КурсВход;
	Если ЗначениеЗаполнено(КурсНеМенееВход) Тогда
		Если КурсПлатежаНеМенееВВалютеОплаты <> 0 ТОгда
			РезультирующийКурс = Макс(КурсНеМенееВход / КурсПлатежаНеМенееВВалютеОплаты, РезультирующийКурс);
		Иначе
			РезультирующийКурс = Макс(КурсНеМенееВход, РезультирующийКурс);
		КонецЕсли;
	Иначе
		// Минимальный курс не задан. Не изменяем результирующий курс.
	КонецЕсли;	
	// Учет максимального курса
	Если ЗначениеЗаполнено(КурсНеБолееВход) Тогда
		Если КурсПлатежаНеБолееВВалютеОплаты <> 0 Тогда
			РезультирующийКурс = Мин(КурсНеБолееВход / КурсПлатежаНеБолееВВалютеОплаты, РезультирующийКурс);
		Иначе	
			РезультирующийКурс = Мин(КурсНеБолееВход, РезультирующийКурс);
		КонецЕсли;
	Иначе
		// Максимальный курс не задан. Не изменяем результирующий курс.
	КонецЕсли;
	Возврат РезультирующийКурс;
КонецФункции

Функция ПолучитьАктуальныйКурсПоПараметрам(Знач ПараметрыРасчета) Экспорт
	
	УчитыватьКоридорВалют = Ложь;
	Если ПараметрыРасчета.ВалютаДокумента = ПараметрыРасчета.ВалютаОплаты
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыРасчета.ВалютаОплаты) Тогда
		
		Возврат 1;
		
	ИначеЕсли ПараметрыРасчета.СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс Тогда
		
		Если ЗначениеЗаполнено(ПараметрыРасчета.КратностьПлатежа) Тогда
			Возврат ПараметрыРасчета.КурсПлатежа / ПараметрыРасчета.КратностьПлатежа;
		Иначе
			Возврат ПараметрыРасчета.КурсПлатежа;
		КонецЕсли;
		
	ИначеЕсли ПараметрыРасчета.СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.КурсНаДатуПлатежа Тогда
		
		ДатаКурса = ПараметрыРасчета.ДатаПлатежа - ПараметрыРасчета.СдвигДатыФиксацииКурсаПлатежа * 24*3600;
		УчитыватьКоридорВалют = Истина;								//Т.к. курс на дату платежа может измениться
		
	ИначеЕсли ПараметрыРасчета.СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.КурсНаФиксированнуюДату Тогда
		
		ДатаКурса = ПараметрыРасчета.ДатаФиксацииКурсаПлатежа;
		УчитыватьКоридорВалют = Истина;								//Т.к. курс на фикс дату может измениться
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;
	
	КурсБазовойВалюты = РаботаСКурсамиВалютУХ.ЗаполнитьДанныеКурсаДляВалюты(ПараметрыРасчета.ВалютаДокумента, ДатаКурса);
	КурсВалютыПлатежа = РаботаСКурсамиВалютУХ.ЗаполнитьДанныеКурсаДляВалюты(ПараметрыРасчета.ВалютаОплаты, ДатаКурса);
	
	Если КурсБазовойВалюты.Кратность = 0 ИЛИ КурсВалютыПлатежа.Курс = 0 Тогда
		Возврат 0;
	Иначе
		// Получим кросс-курс для пересчета.
		КроссКурсБезКоридора = (КурсБазовойВалюты.Курс * КурсВалютыПлатежа.Кратность) / (КурсБазовойВалюты.Кратность * КурсВалютыПлатежа.Курс);
		// Учтем возможные коридоры валют.
		Если УчитыватьКоридорВалют Тогда
			КурсПлатежаНеМенее = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "КурсПлатежаНеМенее", 0);
			КурсПлатежаНеБолее = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "КурсПлатежаНеБолее", 0);
			КурсПлатежаНеМенееВВалютеОплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "КурсПлатежаНеМенееВВалютеОплаты", 0);
			КурсПлатежаНеБолееВВалютеОплаты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРасчета, "КурсПлатежаНеБолееВВалютеОплаты", 0);
			РезультирующийКурс = КурсСУчетомВалютногоКоридора(КроссКурсБезКоридора, КурсПлатежаНеМенее, КурсПлатежаНеБолее, КурсПлатежаНеМенееВВалютеОплаты, КурсПлатежаНеБолееВВалютеОплаты);
		Иначе
			РезультирующийКурс = КроссКурсБезКоридора;			// Учитывать коридор не нужно.
		КонецЕсли;	
		// Вернём готовый кросс-курс
		Возврат РезультирующийКурс;
	КонецЕсли;
	
	Возврат 1;
	
КонецФункции

#КонецОбласти

#Область ПроведениеНастраиваемыйОтчет

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСтруктуруЗаполненияАналитикиПоРеквизитамОбъекта(Объект,ГруппаРаскрытия)
	
	СтруктураАналитик=Новый Структура;
	
	Если Не ЗначениеЗаполнено(ГруппаРаскрытия) Тогда
		Возврат СтруктураАналитик;
	КонецЕсли;
	
	Для Индекс=1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Если НЕ ЗначениеЗаполнено(ГруппаРаскрытия["ВидАналитики"+Индекс]) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивТипов=ГруппаРаскрытия["ВидАналитики"+Индекс].ТипЗначения.Типы();
		ЕстьЗаполнение=Ложь;
		
		МетаданныеОбъекта=Объект.Метаданные();
		Для Каждого Реквизит ИЗ МетаданныеОбъекта.Реквизиты Цикл
			
			Для Каждого Тип ИЗ Реквизит.Тип.Типы() Цикл
				
				Если НЕ МассивТипов.Найти(Тип)=Неопределено 
					И ТипЗнч(Объект[Реквизит.Имя]) = Тип 
					И ЗначениеЗаполнено(Объект[Реквизит.Имя]) Тогда
					
					СтруктураАналитик.Вставить("Аналитика"+Индекс,Объект[Реквизит.Имя]);
					ЕстьЗаполнение=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьЗаполнение Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьЗаполнение Тогда
			СтруктураАналитик.Вставить("Аналитика"+Индекс,ПолучитьЗначениеАналитикиПоУмолчанию(ГруппаРаскрытия["ВидАналитики"+Индекс]));
		КонецЕсли;
				
	КонецЦикла;
	
	Возврат СтруктураАналитик;
						
КонецФункции // ПолучитьСтруктуруЗаполненияАналитикиПоРеквизитамОбъекта()

Функция ПолучитьЗначениеАналитикиПоУмолчанию(ВидАналитики)
	
	Если ЗначениеЗаполнено(ВидАналитики) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ВидАналитики",ВидАналитики);
		Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗначенияАналитикПоУмолчанию.ЗначениеПоУмолчанию
		|ИЗ
		|	РегистрСведений.ЗначенияАналитикПоУмолчанию КАК ЗначенияАналитикПоУмолчанию
		|ГДЕ
		|	ЗначенияАналитикПоУмолчанию.ВидАналитики = &ВидАналитики";
		Результат=Запрос.Выполнить().Выбрать();
		Если Результат.Следующий() Тогда
			Возврат Результат.ЗначениеПоУмолчанию;
		Иначе
			Возврат ВидАналитики.ТипЗначения.ПривестиЗначение(Неопределено);
		КонецЕсли;
	Иначе
		Возврат Неопределено
	КонецЕсли;
		
КонецФункции

#КонецОбласти


#КонецОбласти

#Область УстаревшийПрограммныйИнтерфейс

// Устарела. Следует использовать ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию
Функция ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь = Неопределено) Экспорт
	Возврат ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию(Настройка, Пользователь);
КонецФункции
	
#КонецОбласти
