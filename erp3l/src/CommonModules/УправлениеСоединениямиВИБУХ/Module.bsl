
// Функция получает Web определение для подключения по Web-сервису.
//
Функция ПолучитьWSОпределение(Пользователь = Неопределено, Пароль = Неопределено, СообщениеОбОшибке, Путь) Экспорт
	
	Попытка
		#Если Клиент Тогда
			ТекстСообщения = НСтр("ru = 'Подключение к Web-сервису: %Путь%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Путь%", Строка(Путь));
			Состояние(ТекстСообщения);
		#КонецЕсли
		Определение = Новый WSОпределения(Путь, Пользователь, Пароль);
		#Если Клиент Тогда
			Состояние();
		#КонецЕсли
		Возврат Определение;
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось подключиться к web сервису.'"), , СообщениеОбОшибке + "
		|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		#Если Клиент Тогда
			Состояние();
		#КонецЕсли
		
		ОбновитьПовторноИспользуемыеЗначения();
		
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

// Функция получает Web-прокси для работы с методами, предоставляемыми Web-сервисом.
//
Функция ПолучитьWSПрокси(СообщениеОбОшибке, Определение, URIПространстваИмен, ИмяСервиса, ТочкаПодключения) Экспорт
	
	Попытка
		Прокси = Новый WSПрокси(Определение, URIПространстваИмен, ИмяСервиса, ТочкаПодключения);
		Возврат Прокси;
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СообщениеОбОшибке + "
		|" + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки
	
КонецФункции

Функция ПолучитьСоединениеADO(ВИБ,ПараметрыПодключения, КлючСоединения = Неопределено) Экспорт
	
	ПроверкаСоединения = НЕ КлючСоединения = Неопределено;
	
	РезультатНеуспешногоСоединения = ?(ПроверкаСоединения, Ложь, Неопределено);
	
	ТекстСообщения = НСтр("ru = 'При попытке ADO соедиения с ИБ %ВИБ% произошла ошибка.
	|'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВИБ%", Строка(ВИБ.Наименование));
	СтрокаОшибки = ТекстСообщения;		
	
	Если ПроверкаСоединения Тогда
		
		ТекСтрокаСоединения=ВИБ.СтрокаПодключения;
		
	Иначе
		
		ТекСтрокаСоединения=ПолучитьСтрокуСоединенияДляИмпортаADO(ВИБ,ПараметрыПодключения);
		
	КонецЕсли;
	
	Если ПустаяСтрока(ТекСтрокаСоединения) Тогда
		
		СтрокаОшибки = СтрокаОшибки + НСтр("ru = ' Не удалось получить строку подключения.'");
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.1", , , СтрокаОшибки);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрокаОшибки);
		
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат РезультатНеуспешногоСоединения;
		
	КонецЕсли;	
	
	Попытка 
		
		ADODB_Connection = Новый COMОбъект("ADODB.Connection");
		ADODB_Connection.Open(ТекСтрокаСоединения);
		
		Если ПроверкаСоединения Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
		Если НЕ ПараметрыПодключения=Неопределено Тогда
			ПараметрыПодключения.Вставить("СтрокаСоединения",ТекСтрокаСоединения);
		КонецЕсли;
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрокаОшибки);
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.2",,,СтрокаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат РезультатНеуспешногоСоединения;
		
	КонецПопытки;
		
	Если ПроверкаСоединения Тогда
		Возврат Истина;
	Иначе
		Возврат ADODB_Connection;
	КонецЕсли;
	
КонецФункции // ПолучитьСоединениеADO() 

Функция ПолучитьСоединениеПоWebСервису(ВИБ) Экспорт
	
	WSОпределение = ПолучитьWSОпределение(ВИБ.Пользователь, ВИБ.Пароль, " " + ВИБ.ПутьКWebСервису + НСтр("ru = '. Не удалось получить опеределение.'"), ВИБ.ПутьКWebСервису);
	
	Если WSОпределение = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат Неопределено;
	Иначе
		WSПрокси = ПолучитьWSПрокси(" " + ВИБ.ПутьКWebСервису + НСтр("ru = '. Не удалось получить прокси.'"), WSОпределение, ?(ПустаяСтрока(ВИБ.URIПространстваИмен),"http://v8.1c.ru",СокрЛП(ВИБ.URIПространстваИмен)), ВИБ.ИмяWebСервиса, ВИБ.ТочкаПодключенияWebСервиса);
	КонецЕсли;
	
	Если WSПрокси = Неопределено Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат НЕопределено;
	КонецЕсли;
	
	WSПрокси.Пользователь = ВИБ.Пользователь;
	WSПрокси.Пароль = ВИБ.Пароль;

	Возврат WSПрокси;
	
КонецФункции

// Функция, которая создает COM/OLE соединение с сервером и записывает в таблицу
// подключений. Если запись о соединении уже есть в таблице, возвращает суще-
// ствующее значение.
// Параметры:
//  ТаблицаПодключений - Таблица значений, таблица, в которой хранится информация о
//                    подключениях.
//  ВИБ             - Catalogs.ВнешниеИнформационныеБазы.Ссылка, Элемент справочника внешних
//                    информационных баз, по данным из которого создается соединение.
//  ТипПодключения  - Перечисление, указывает по какой технологии подключаться к 
//                    серверу. (OLE или COM)
//  КлючСоединения  - Уникальный идентификатор, если требуется только проверить соединение.
//                    Таким образом исключается кеширования средствами сервера.
// Возвращаемое значение:
// 	- COMОбъект, в котором хранится подключение к серверу.
//
Функция ПолучитьСоединение(ВИБ, ТипПодключения, КлючСоединения = Неопределено) Экспорт
	
	Если ВИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	ПроверкаСоединения = НЕ КлючСоединения = Неопределено;
	
	РезультатНеуспешногоСоединения = ?(ПроверкаСоединения, Ложь, Неопределено);
	
	Если ВИБ.ИспользоватьWS Тогда
		
		WSОпределение = ПолучитьWSОпределение(ВИБ.Пользователь, ВИБ.Пароль, " " + ВИБ.ПутьКWebСервису + НСтр("ru = '. Не удалось получить опеределение.'"), ВИБ.ПутьКWebСервису);
		
		Если WSОпределение = Неопределено Тогда
			ОбновитьПовторноИспользуемыеЗначения();
			Возврат РезультатНеуспешногоСоединения;
		КонецЕсли;
		
		WSПрокси = ПолучитьWSПрокси(" " + ВИБ.ПутьКWebСервису + НСтр("ru = '. Не удалось получить прокси.'"), WSОпределение, ?(ПустаяСтрока(ВИБ.URIПространстваИмен),"http://v8.1c.ru",СокрЛП(ВИБ.URIПространстваИмен)), ВИБ.ИмяWebСервиса, ВИБ.ТочкаПодключенияWebСервиса); 
		
		Если WSПрокси = Неопределено Тогда
			ОбновитьПовторноИспользуемыеЗначения();
			Возврат РезультатНеуспешногоСоединения;
		КонецЕсли;
		
		Если ПроверкаСоединения Тогда
			Возврат Истина;
		Иначе
			WSПрокси.Пользователь = ВИБ.Пользователь;
			WSПрокси.Пароль       = ВИБ.Пароль;
			Возврат WSПрокси;
		КонецЕсли;
				
	Иначе
	
		Если ПустаяСтрока(ВИБ) Тогда
			
			ТекстОшибки = НСтр("ru = 'При попытке соедиения с COM-сервером ИБ произошла следующая ошибка:
			|Не указана внешняя информационная база.'");
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.3", , , ТекстОшибки);
			
			ТекстОшибки = НСтр("ru = 'При попытке соедиения с COM-сервером ИБ произошла следующая ошибка:
			|Не указана внешняя информационная база.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
			Возврат РезультатНеуспешногоСоединения;
			
		КонецЕсли;
		
		Если НЕ ВИБ.ИспользоватьWS Тогда
			Если ТипПодключения = Неопределено Тогда
				ОбновитьПовторноИспользуемыеЗначения();
				Возврат РезультатНеуспешногоСоединения;
			Иначе
				Использование77 = ВИБ.ТипБД.ВерсияПлатформы  = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77;
			КонецЕсли;
		Иначе
			Использование77 = Ложь;
			ТипПодключения = 2; // Подключение по Web-сервису.
		КонецЕсли;
		
		Если Использование77 Тогда
			ТипПодключения = 0;
		КонецЕсли;
		
		СтрокаОшибки = НСтр("ru = 'При попытке соединения с COM-сервером ИБ %ВИБ% произошла ошибка.
                      |'");
		СтрокаОшибки = СтрЗаменить(СтрокаОшибки, "%ВИБ%", Строка(ВИБ.Наименование));
		
		Если ПустаяСтрока(ВИБ.ТипБД)Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрокаОшибки + НСтр("ru = ' Не указан тип внешней информационной базы.'"));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.4", , , СтрокаОшибки + НСтр("ru = 'Не указан тип внешней информационной базы.'"));	
			ОбновитьПовторноИспользуемыеЗначения();

			Возврат РезультатНеуспешногоСоединения;
			
		КонецЕсли;
		
		Если ПустаяСтрока(ВИБ.ТипБД.ВерсияПлатформы)Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрокаОшибки + НСтр("ru = ' Не указан тип платформы у элемента справочника Тип внешних информационных баз'"));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.5",,,СтрокаОшибки + НСтр("ru = 'Не указан тип платформы у элемента справочника Тип внешних информационных баз'"));	
			
			ОбновитьПовторноИспользуемыеЗначения();
			Возврат РезультатНеуспешногоСоединения;
			
		КонецЕсли;
		
		ФайловыйРежим = НЕ ВИБ.РазмещениеВнешнейИБ = Перечисления.ВидыРазмещенияИБ.КлиентСерверный;
		
		Если ФайловыйРежим ИЛИ Использование77 Тогда
			СтрокаПодключения = ?(Использование77, "/D""", "File=""") + СокрЛП(ВИБ.КаталогИБ) + """";
		Иначе
			СтрокаПодключения = "Srvr = """ + СокрЛП(ВИБ.ИмяСервера) + """; Ref = """ + СокрЛП(ВИБ.ИмяИБНаСервере) + """";
		КонецЕсли;
		
		Если Не ВИБ.АутентификацияWindows Тогда
			Если НЕ ПустаяСтрока(ВИБ.Пользователь) Тогда
				СтрокаПодключения = СтрокаПодключения + ?(Использование77, " /N""", ";Usr = """) + СокрЛП(ВИБ.Пользователь) + """";
			КонецЕсли;
			Если НЕ ПустаяСтрока(ВИБ.Пароль) Тогда
				СтрокаПодключения = СтрокаПодключения + ?(Использование77, " /P""", ";Pwd = """) + СокрЛП(ВИБ.Пароль) + """";
			КонецЕсли;
		КонецЕсли;
		
		Если  ВИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие8 Тогда
			ОбъектПодключения = "V8";
		ИначеЕсли  ВИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие81 Тогда
			ОбъектПодключения = "V81";
		ИначеЕсли  ВИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие82 Тогда
			ОбъектПодключения = "V82";
		ИначеЕсли  ВИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие83 Тогда
			ОбъектПодключения = "V83";
		Иначе
			ОбъектПодключения = "V77";
			Если ВИБ.РазмещениеВнешнейИБ = Перечисления.ВидыРазмещенияИБ.ЛокальнаяВерсия Тогда
				ОбъектПодключения = ОбъектПодключения + "L";
			ИначеЕсли ВИБ.РазмещениеВнешнейИБ = Перечисления.ВидыРазмещенияИБ.КлиентСерверный Тогда
				ОбъектПодключения = ОбъектПодключения + "S";
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Если ТипПодключения = 0 Тогда
				ОбъектПодключения = ОбъектПодключения + ".Application";
				ТекCOMОбъект = Новый COMОбъект(ОбъектПодключения);
				Если Использование77 Тогда
					Если ТекCOMОбъект.Initialize(ТекCOMОбъект.RMTrade, СтрокаПодключения, "NO_SPLASH_SHOW") = 0 Тогда
						ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.6",,, НСтр("ru = 'Ошибка при подключении к приложению 1С:Предприятие 7.7'"));
						ТекстИсключения = НСтр("ru = 'Ошибка при подключении к приложению 1С:Предприятие 7.7. Возможно, каталог пользователя занят (открыт другим сеансом).'");
						
						ВызватьИсключение(ТекстИсключения);
					КонецЕсли;
				Иначе
					ТекCOMОбъект.Connect(СтрокаПодключения);
				КонецЕсли;
			Иначе
				ОбъектПодключения = ОбъектПодключения + ".COMConnector";
				ТекCOMПодключение = Новый COMОбъект(ОбъектПодключения);
				ТекCOMОбъект = ТекCOMПодключение.Connect(СтрокаПодключения);
			КонецЕсли;
			
			Если ПроверкаСоединения Тогда
				Возврат Истина;
			Иначе
				Возврат ТекCOMОбъект;
			КонецЕсли;
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = '%1: %2'"), СтрокаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеСоединениямиВИБУХ.ПолучитьСоединение.7",,,СтрокаОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));	
			ОбновитьПовторноИспользуемыеЗначения();
			Возврат РезультатНеуспешногоСоединения;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

Функция ЗаполнитьДеревоЗначенийДляСправочникаВИБ(Параметры) Экспорт
	
	ДеревоЗначений=Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Код");
	ДеревоЗначений.Колонки.Добавить("Наименование");
	
	УказанаИнформационнаяБаза=ЗначениеЗаполнено(Параметры.ВнешняяИнформационнаяБаза);
	
	База = ПолучитьСоединение(?(УказанаИнформационнаяБаза,Параметры.ВнешняяИнформационнаяБаза,Параметры.ТипБД.ВИБПоУмолчанию), 1);
	
	Если База = Неопределено Тогда
		
		ДанныеСправочника=Новый Структура;
		ДанныеСправочника.Вставить("ДеревоЗначений",ДеревоЗначений);
		ДанныеСправочника.Вставить("КодНеИспользуется",Истина);
		
		Возврат ДанныеСправочника;
		
	КонецЕсли;
	
	РабочиеПараметры=Новый Структура;
	РабочиеПараметры.Вставить("ТипМетаДанных",	Параметры.ТипМетаДанных);
	РабочиеПараметры.Вставить("СправочникБД",	Параметры.СправочникБД);
	РабочиеПараметры.Вставить("УказанаИнформационнаяБаза",УказанаИнформационнаяБаза);
	
	Если Параметры.Использование77 Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьДеревоЗначенийДляСправочника77(База,РабочиеПараметры);
		
	ИначеЕсли ТипЗнч(База) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьДеревоЗначенийДляСправочникаWS(База,РабочиеПараметры);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ЗаполнитьДеревоЗначенийДляСправочника8х(База,РабочиеПараметры);
		
	КонецЕсли;		
	
КонецФункции

Функция ЗаполнитьДеревоЗначенийДляПеречисленияВИБ(Параметры) Экспорт
	
	ДеревоЗначений=Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Код");
	ДеревоЗначений.Колонки.Добавить("Наименование");
	
	База = ПолучитьСоединение(Параметры.ТипБД.ВИБПоУмолчанию, 1);
	
	Если База = Неопределено Тогда
		
		ДанныеСправочника=Новый Структура;
		ДанныеСправочника.Вставить("ДеревоЗначений",ДеревоЗначений);
		ДанныеСправочника.Вставить("КодНеИспользуется",Истина);
		
		Возврат ДанныеСправочника;
		
	КонецЕсли;
	
	РабочиеПараметры=Новый Структура;
	РабочиеПараметры.Вставить("СправочникБД",	Параметры.СправочникБД);
	
	Если ТипЗнч(База) = Тип("WSProxy") Тогда
		
		Возврат РаботаСОбъектамиМетаданныхВнутреннийУХ.ЗаполнитьДеревоЗначенийДляПеречисленияWS(База,РабочиеПараметры);
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ЗаполнитьДеревоЗначенийДляПеречисления8х(База,РабочиеПараметры);
		
	КонецЕсли;
		
КонецФункции

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ADO.
//

Процедура ПолучитьСписокПровайдеров(СписокПровайдеров) Экспорт
	
	Если ТипЗнч(СписокПровайдеров) = Тип("СписокЗначений") Тогда
		СписокПровайдеров.Очистить();
	Иначе
		СписокПровайдеров = Новый СписокЗначений;
	КонецЕсли;
	мПодключение  = Новый COMОбъект("WbemScripting.SWbemLocator");
	мСервер       = мПодключение.ConnectServer(, "root\default");
	мРегистр      = мСервер.Get("StdRegProv");
	
	HKEY_CLASSES_ROOT = 2147483648;
	 
	мМетод = мРегистр.Methods_.Item("EnumKey");
	ВнутрПараметр = мМетод.InParameters.SpawnInstance_();
	ВнутрПараметр.hDefKey = HKEY_CLASSES_ROOT;
	ВнутрПараметр.sSubKeyName = "CLSID\";
	ВыхПараметр = мРегистр.ExecMethod_(мМетод.Name, ВнутрПараметр);
	Вн_Массив   = ВыхПараметр.sNames;
	Количество  = Вн_Массив.GetLength()-1;
	Для Индекс = 1 По Количество Цикл
		мМетод        = мРегистр.Methods_.Item("GetStringValue");
		ВнутрПараметр = мМетод.InParameters.SpawnInstance_();
		ВнутрПараметр.hDefKey = HKEY_CLASSES_ROOT;
		ВнутрПараметр.sSubKeyName = "CLSID\"+Вн_Массив.GetValue(Индекс)+"\OLE DB Provider";
		ВнутрПараметр.sValueName = "";
		ВыхПараметр = мРегистр.ExecMethod_(мМетод.Name, ВнутрПараметр);
		Если ВыхПараметр.sValue <> NULL Тогда
			Описание = ВыхПараметр.sValue;
			мМетод        = мРегистр.Methods_.Item("GetStringValue");
			ВнутрПараметр = мМетод.InParameters.SpawnInstance_();
			ВнутрПараметр.hDefKey = HKEY_CLASSES_ROOT;
			ВнутрПараметр.sSubKeyName = "CLSID\"+Вн_Массив.GetValue(Индекс)+"\ProgID";
			ВнутрПараметр.sValueName = "";
			ВыхПараметр = мРегистр.ExecMethod_(мМетод.Name, ВнутрПараметр);
			СписокПровайдеров.Добавить(ВыхПараметр.sValue, Описание);
		КонецЕсли;
	КонецЦикла;
	
	СписокПровайдеров.СортироватьПоПредставлению();

КонецПроцедуры

Функция ВернутьНаименованиеТипа(КодТипа, Размерность, Длина, Точность) Экспорт
	
	Если КодТипа = 20 Тогда
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность); //"adBigInt"
	ИначеЕсли КодТипа = 128 Тогда //"adBinary"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 11 Тогда //"adBoolean"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
	ИначеЕсли КодТипа = 8 Тогда //"adBSTR"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 136 Тогда //"adChapter"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 129 Тогда //adChar
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 6 Тогда //"adCurrency"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 7 Тогда //"adDate"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	ИначеЕсли КодТипа = 133 Тогда //"adDBDate"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
	ИначеЕсли КодТипа = 134 Тогда //"adDBTime"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	ИначеЕсли КодТипа = 135 Тогда //"adDBTimeStamp"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Время);
	ИначеЕсли КодТипа = 14 Тогда //"adDecimal"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 5 Тогда //"adDouble"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 0 Тогда //"adEmpty"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 10 Тогда //"adError"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 64 Тогда //"adFileTime"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 72 Тогда //"adGUID"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 9 Тогда //"adIDispatch"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 3 Тогда //"adInteger"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 13 Тогда //"adIUnknown"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 205 Тогда //"adLongVarBinary"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 201 Тогда //"adLongVarChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 203 Тогда //"adLongVarWChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 131 Тогда //"adNumeric"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 138 Тогда //"adPropVariant"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 4 Тогда //"adSingle"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 2 Тогда //"adSmallInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 16 Тогда //"adTinyInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 21 Тогда //"adUnsignedBigInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 19 Тогда //"adUnsignedInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 18 Тогда //"adUnsignedSmallInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 17 Тогда //"adUnsignedTinyInt"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 132 Тогда //"adUserDefined"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 204 Тогда //"adVarBinary"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 200 Тогда //"adVarChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 12 Тогда //"adVariant"
		Возврат Неопределено;
	ИначеЕсли КодТипа = 139 Тогда //"adVarNumeric"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(Длина, Точность);
	ИначеЕсли КодТипа = 202 Тогда //"adVarWChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	ИначеЕсли КодТипа = 130 Тогда //"adWChar"
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Размерность);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ВернутьТипЗначенияВВидеСтроки(КодТипа) Экспорт
	
	Если КодТипа = 20 Тогда
		Возврат "Число";
	ИначеЕсли КодТипа = 128 Тогда //"adBinary"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 11 Тогда //"adBoolean"
		Возврат "Булево";
	ИначеЕсли КодТипа = 8 Тогда //"adBSTR"
		Возврат "Строка";
	ИначеЕсли КодТипа = 136 Тогда //"adChapter"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 129 Тогда //adChar
		Возврат "Строка";
	ИначеЕсли КодТипа = 6 Тогда //"adCurrency"
		Возврат "Число";
	ИначеЕсли КодТипа = 7 Тогда //"adDate"
		Возврат "Дата";
	ИначеЕсли КодТипа = 133 Тогда //"adDBDate"
		Возврат "Дата";
	ИначеЕсли КодТипа = 134 Тогда //"adDBTime"
		Возврат "Дата";
	ИначеЕсли КодТипа = 135 Тогда //"adDBTimeStamp"
		Возврат "Дата";
	ИначеЕсли КодТипа = 14 Тогда //"adDecimal"
		Возврат "Число";
	ИначеЕсли КодТипа = 5 Тогда //"adDouble"
		Возврат "Число";
	ИначеЕсли КодТипа = 0 Тогда //"adEmpty"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 10 Тогда //"adError"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 64 Тогда //"adFileTime"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 72 Тогда //"adGUID"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 9 Тогда //"adIDispatch"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 3 Тогда //"adInteger"
		Возврат "Число";
	ИначеЕсли КодТипа = 13 Тогда //"adIUnknown"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 205 Тогда //"adLongVarBinary"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 201 Тогда //"adLongVarChar"
		Возврат "Строка";
	ИначеЕсли КодТипа = 203 Тогда //"adLongVarWChar"
		Возврат "Строка";
	ИначеЕсли КодТипа = 131 Тогда //"adNumeric"
		Возврат "Число";
	ИначеЕсли КодТипа = 138 Тогда //"adPropVariant"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 4 Тогда //"adSingle"
		Возврат "Число";
	ИначеЕсли КодТипа = 2 Тогда //"adSmallInt"
		Возврат "Число";
	ИначеЕсли КодТипа = 16 Тогда //"adTinyInt"
		Возврат "Число";
	ИначеЕсли КодТипа = 21 Тогда //"adUnsignedBigInt"
		Возврат "Число";
	ИначеЕсли КодТипа = 19 Тогда //"adUnsignedInt"
		Возврат "Число";
	ИначеЕсли КодТипа = 18 Тогда //"adUnsignedSmallInt"
		Возврат "Число";
	ИначеЕсли КодТипа = 17 Тогда //"adUnsignedTinyInt"
		Возврат "Число";
	ИначеЕсли КодТипа = 132 Тогда //"adUserDefined"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 204 Тогда //"adVarBinary"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 200 Тогда //"adVarChar"
		Возврат "Строка";
	ИначеЕсли КодТипа = 12 Тогда //"adVariant"
		Возврат "НеПоддерживается";
	ИначеЕсли КодТипа = 139 Тогда //"adVarNumeric"
		Возврат "Число";
	ИначеЕсли КодТипа = 202 Тогда //"adVarWChar"
		Возврат "Строка";
	ИначеЕсли КодТипа = 130 Тогда //"adWChar"
		Возврат "Строка";
	Иначе
		Возврат "НеПоддерживается";
	КонецЕсли;
	
КонецФункции

Функция ВернутьТаблицуСвязей(ИмяТаблицы, СтрокаПодключения) Экспорт
	
	ТаблицаСвязей = Новый ТаблицаЗначений;
	ТаблицаСвязей.Колонки.Добавить("СвязаннаяТаблица");
	ТаблицаСвязей.Колонки.Добавить("КолонкаТекущейТаблицы");
	ТаблицаСвязей.Колонки.Добавить("КолонкаСвязаннойТаблицы");
	
	Попытка
		мКаталог                  = Новый COMОбъект("ADOX.Catalog");
		мКаталог.ActiveConnection = СтрокаПодключения;
		ТекТаблица = мКаталог.Tables(ИмяТаблицы);
		Для Каждого Ключ Из ТекТаблица.Keys Цикл
			СвязаннаяТаблица = Ключ.RelatedTable;
			Если Ключ.Type = 2 Тогда // Ключ является FOREIGN KEY.
				НоваяСтрока = ТаблицаСвязей.Добавить();
				НоваяСтрока.СвязаннаяТаблица = СвязаннаяТаблица;
				Для Каждого Колонка Из Ключ.Columns Цикл
					НоваяСтрока.КолонкаТекущейТаблицы = Колонка.Name;
					НоваяСтрока.КолонкаСвязаннойТаблицы = Колонка.RelatedColumn;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка ADO: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
	КонецПопытки;
	
	мКаталог = Неопределено;
	
	Возврат ТаблицаСвязей;
	
КонецФункции

Функция ВернутьКолонкиТаблицы(ИмяТаблицы, СтрокаПодключения, ТипКакОписаниеТипов = Истина) Экспорт
	
	ТаблицаКолонок = Новый ТаблицаЗначений;
	ТаблицаКолонок.Колонки.Добавить("Имя");
	ТаблицаКолонок.Колонки.Добавить("ВнутреннееПредставление");
	ТаблицаКолонок.Колонки.Добавить("ОписаниеТипов");
	
	Попытка
		мКаталог                  = Новый COMОбъект("ADOX.Catalog");
		мКаталог.ActiveConnection = СтрокаПодключения;
		ТекущаяТаблица = мКаталог.Tables(ИмяТаблицы);
		Для Каждого Колонка Из ТекущаяТаблица.Columns Цикл
			
			НоваяСтрока = ТаблицаКолонок.Добавить();
			НоваяСтрока.Имя = Колонка.Name;
			НоваяСтрока.ВнутреннееПредставление = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Колонка.Name);
			Если ТипКакОписаниеТипов Тогда
				НоваяСтрока.ОписаниеТипов = ВернутьНаименованиеТипа(Колонка.Type, Колонка.DefinedSize, Колонка.Precision, Колонка.NumericScale);
			Иначе
				НоваяСтрока.ОписаниеТипов = ВернутьТипЗначенияВВидеСтроки(Колонка.Type);
			КонецЕсли;
			
		КонецЦикла;
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка ADO: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
	КонецПопытки;
	мКаталог = Неопределено;
	Возврат ТаблицаКолонок;
	
КонецФункции

Функция ПолучитьДанныеИзТаблицы(ВИБ, Таблица) Экспорт
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	СоответствиеКолонок = Новый Соответствие;
	
	СтрокаСоединения=ПолучитьСтрокуСоединенияADO(ВИБ,,Таблица.ИмяФайла);
	
	ОбработаноКолонок=0;
	
	Для Каждого РеквизитТаблицы Из Таблица.Реквизиты Цикл
		
		ТипКолонки = ОбщегоНазначенияУХ.ПреобразоватьТипИзСтроки(РеквизитТаблицы.ТипЗначения, Истина);
		СоответствиеКолонок.Вставить(РеквизитТаблицы.Имя, РеквизитТаблицы.ВнутреннееПредставление);
		
		Если ТипКолонки <> Неопределено Тогда
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипКолонки);
			ТаблицаДанных.Колонки.Добавить(РеквизитТаблицы.ВнутреннееПредставление, Новый ОписаниеТипов(МассивТипов));
		Иначе
			ТаблицаДанных.Колонки.Добавить(РеквизитТаблицы.ВнутреннееПредставление);
		КонецЕсли;
		
		ОбработаноКолонок=ОбработаноКолонок+1;
				
	КонецЦикла;
	
	Попытка
		
		ADODB_Connection = Новый COMОбъект("ADODB.Connection");
		ADODB_Connection.Open(СтрокаСоединения);
		
		Если СтрНайти(Врег(ADODB_Connection.Provider),"ORA")>0 Тогда
			
			мНаборЗаписей=ADODB_Connection.Execute("Select * from "+ Таблица.Имя); 
			
		Иначе
			
			мНаборЗаписей=ADODB_Connection.Execute("Select * from ["+ Таблица.Имя+"]"); 
			
		КонецЕсли;

	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка ADO: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат ТаблицаДанных;
	КонецПопытки;
	
	х=1;
	
	Попытка
		
		Если НЕ мНаборЗаписей.EOF И НЕ мНаборЗаписей.EOF Тогда		
		
			мНаборЗаписей.MoveFirst();
			
			
			Пока НЕ мНаборЗаписей.EOF Цикл
				
				НоваяЗапись = ТаблицаДанных.Добавить();
				Для Каждого КлючИЗначение Из СоответствиеКолонок Цикл
					НоваяЗапись[КлючИЗначение.Значение] = мНаборЗаписей.Fields(КлючИЗначение.Ключ).Value;
				КонецЦикла;
				
				х=х+1;
				
				мНаборЗаписей.MoveNext();
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка ADO: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	мНаборЗаписей.Close();
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ВернутьСписокТаблицИсточника(СтрокаПодключения, Отказ = Ложь, СообщениеОбОшибке = Неопределено) Экспорт
	
	СписокТаблиц = Новый СписокЗначений;
	
	Попытка
		мКаталог                  = Новый COMОбъект("ADOX.Catalog");
		мКаталог.ActiveConnection = СтрокаПодключения;
		мТаблицы = мКаталог.Tables;
		Для Каждого Таблица Из мТаблицы Цикл
			
			Если СтрНайти(ВРЕГ(Таблица.Type),"TABLE")>0
				ИЛИ ВРЕГ(Таблица.Type) = "VIEW" Тогда
				
				СписокТаблиц.Добавить(Таблица.Name);
				
			КонецЕсли;
			
		КонецЦикла;
		Отказ = Ложь;
		СообщениеОбОшибке = НСтр("ru = 'Соединение установлено успешно'");
		
	Исключение
		
		СообщениеОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Отказ = Истина;
		
	КонецПопытки;
	мКаталог = Неопределено;
	
	Возврат Новый Структура("СписокТаблиц,Отказ,СообщениеОбОшибке", СписокТаблиц, Отказ, СообщениеОбОшибке);
	
КонецФункции

Функция ИмяВременногоФайлаMicrosoftExcel(Excel2003)
	
	Если Excel2003 Тогда
		Возврат ПолучитьИмяВременногоФайла("xls");
	Иначе
		Возврат ПолучитьИмяВременногоФайла("xlsx");
	КонецЕсли;
	
КонецФункции

Функция КонвертироватьВТекст(ИмяФайла,ПравилоОбработки,Пароль)
	
	Если НРег(Прав(ИмяФайла, 4)) = ".xls" Тогда
		Excel2003 = Истина;
	ИначеЕсли НРег(Прав(ИмяФайла, 5)) = ".xlsx" Тогда
		Excel2003 = Ложь;
	Иначе
		Возврат ИмяФайла;
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла), Новый УникальныйИдентификатор);
	
	Если НЕ ОбработкаФайловMicrosoftExcelКлиентСерверУХ.ПривестиЗначенияКТекстуДляПравилаОбработки(АдресХранилища, Excel2003, ПравилоОбработки, Пароль) Тогда
		
		Возврат ИмяФайла;
		
	Иначе
		
		ИмяВременногоФайла = ИмяВременногоФайлаMicrosoftExcel(Excel2003);
		ПолучитьИзВременногоХранилища(АдресХранилища).Записать(ИмяВременногоФайла);
		
		Возврат ИмяВременногоФайла;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецФункции // КонвертироватьВТекст()

Функция ПолучитьСтрокуСоединенияADO(ВнешняяИБ,ПутьКФайлу="",ИмяФайла="",ПравилоОбработки=Неопределено) Экспорт
	
	Если ВнешняяИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.DBF Тогда
		
		ТекстПровайдера="Provider=Microsoft.Jet.OLEDB.4.0;";
		
		Если Не ПустаяСтрока(ВнешняяИБ.Пользователь) Тогда
			
			ТекстПровайдера=ТекстПровайдера+"User ID="+СокрЛП(ВнешняяИБ.Пользователь)+";";
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ВнешняяИБ.Пароль) Тогда
			
			ТекстПровайдера=ТекстПровайдера+"Password="+СокрЛП(ВнешняяИБ.Пароль)+";";
			
		КонецЕсли;
		
		ТекстПровайдера=ТекстПровайдера+"Data Source="+?(ПустаяСтрока(ПутьКФайлу),ВнешняяИБ.ЭталонныйКаталог,ПутьКФайлу)+";";
		
		ТекстПровайдера=ТекстПровайдера+"Mode=Share Deny None;Extended Properties=dBase IV;Jet OLEDB:Database Locking Mode=1;Jet OLEDB:Global Partial Bulk Ops=2;Jet OLEDB:Global Bulk Transactions=1;Jet OLEDB:Create System Database=False;Jet OLEDB:Encrypt Database=False;Jet OLEDB:Don't Copy Locale on Compact=False;Jet OLEDB:Compact Without Replica Repair=False;Jet OLEDB:SFP=False";
		
		Возврат ТекстПровайдера;
		
	ИначеЕсли ВнешняяИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS Тогда
		
		ИмяРабочегоФайла=?(ПустаяСтрока(ПутьКФайлу),ВнешняяИБ.ЭталонныйКаталог,ПутьКФайлу)+?(ПустаяСтрока(ИмяФайла),"","\"+ИмяФайла);
		
		Если ВнешняяИБ.КонвертироватьЗначенияВТекст И НЕ ПустаяСтрока(ИмяРабочегоФайла) И ЗначениеЗаполнено(ПравилоОбработки) Тогда
			
			ИмяРабочегоФайла=КонвертироватьВТекст(ИмяРабочегоФайла,ПравилоОбработки,ВнешняяИБ.Пароль);
			
		КонецЕсли;
			
		//ТекстПровайдера="Driver={Microsoft Excel Driver (*.xls, *.xlsx, *.xlsm, *.xlsb)};DBQ="+ИмяРабочегоФайла+";";
		Если Прав(ИмяРабочегоФайла, 3) = "xls" Тогда
			//ТекстПровайдера = "Provider=Microsoft.Jet.OLEDB.4.0;Data Source=" + ИмяРабочегоФайла + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;MaxScanRows=0;""";
			ТекстПровайдера = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяРабочегоФайла + ";Extended Properties=""Excel 8.0;HDR=YES;IMEX=1;"";";
		Иначе
			ТекстПровайдера = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + ИмяРабочегоФайла + ";Extended Properties=""Excel 12.0 Xml;HDR=YES;IMEX=1;"";";
		КонецЕсли;
		
		Возврат ТекстПровайдера;
		
	ИначеЕсли ВнешняяИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.MSAccess Тогда
		
		ТекстПровайдера="Driver={Microsoft Access Driver (*.mdb, *.accdb)};";
		
		Если Не ПустаяСтрока(ВнешняяИБ.Пользователь) Тогда
			
			ТекстПровайдера=ТекстПровайдера+"Uid="+СокрЛП(ВнешняяИБ.Пользователь)+";";
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ВнешняяИБ.Пароль) Тогда
			
			ТекстПровайдера=ТекстПровайдера+"Pwd="+СокрЛП(ВнешняяИБ.Пароль)+";";
			
		КонецЕсли;
		
		ТекстПровайдера=ТекстПровайдера+"Dbq="+?(ПустаяСтрока(ПутьКФайлу),ВнешняяИБ.ЭталонныйКаталог,ПутьКФайлу)+?(ПустаяСтрока(ИмяФайла),"","\"+ИмяФайла)+";";
		
		Возврат ТекстПровайдера;
		
	Иначе
		
		Возврат ВнешняяИБ.СтрокаПодключения;
		
	КонецЕсли;
	
КонецФункции // ПолучитьСтрокуСоединенияADO()

Функция ПолучитьСтрокуСоединенияДляИмпортаADO(ВнешняяИБ,ОбъектРасчета)
	
	Если ВнешняяИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.Прочие Тогда

		Возврат ВнешняяИБ.СтрокаПодключения;
		
	КонецЕсли;
	
	ПутьКФайлуНаДиске="";
	
	Если ОбъектРасчета=Неопределено Тогда
		
		Возврат ПолучитьСтрокуСоединенияADO(ВнешняяИБ,ВнешняяИБ.ЭталонныйКаталог);
	
	ИначеЕсли ОбъектРасчета.Свойство("ПутьКФайлуADO") И ЗначениеЗаполнено(ОбъектРасчета.ПутьКФайлуADO) Тогда
		
		Если ТипЗнч(ОбъектРасчета.ПутьКФайлуADO)=Тип("СправочникСсылка.ХранимыеФайлыОрганизаций") Тогда // Файл уже был загружен в базу, повторной загрузки не производим
			
			ХранимыйФайл=ОбъектРасчета.ПутьКФайлуADO;
			
			ИмяФайла = ПолучитьИмяВременногоФайла(ХранимыйФайл.РасширениеФайла);
			
			ВерсияХранимогоФайла=ХранимыеФайлыУХ.ПолучитьХранимыйФайл(ХранимыйФайл, ИмяФайла, , , ТекущаяДата());
			
			Если ВерсияХранимогоФайла=Неопределено Тогда
				
				Возврат "";
				
			Иначе
				
				ОбъектРасчета.Вставить("ВерсияХранимогоФайла",	ВерсияХранимогоФайла);
				ОбъектРасчета.Вставить("ФайлИмпорта",			ХранимыйФайл);
				
				Возврат ПолучитьСтрокуСоединенияADO(ВнешняяИБ,ИмяФайла);
				
			КонецЕсли;
						
		Иначе
			
			ПутьКФайлуНаДиске=ОбъектРасчета.ПутьКФайлуADO;
			
		КонецЕсли;
		
	ИначеЕсли ОбъектРасчета.Свойство("ИмяФайла") И ЗначениеЗаполнено(ОбъектРасчета.ИмяФайла) Тогда
		
		Возврат ПолучитьСтрокуСоединенияADO(ВнешняяИБ,?(ОбъектРасчета.Свойство("ПутьКФайлу"),ОбъектРасчета.ПутьУФайлу,Неопределено),ОбъектРасчета.ИмяФайла)
		
	ИначеЕсли ВнешняяИБ.ИспользоватьДляИмпортаЭталонныйКаталог Тогда
		
		ИмяФайла=УправлениеОтчетамиУХ.ПолучитьИмяФайлаПоВидуОтчета(ОбъектРасчета.ВидОтчета);		
		МассивФайлов=НайтиФайлы(ВнешняяИБ.ЭталонныйКаталог,ИмяФайла+".*");
		
		Для Каждого СтрФайл ИЗ МассивФайлов Цикл
			
			Если СтрФайл.ИмяБезРасширения=ИмяФайла Тогда
				
				ПутьКФайлуНаДиске = СтрФайл.ПолноеИмя;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		МассивФайлов=Документы.НастраиваемыйОтчет.ПолучитьПереченьИмпортируемыхФайлов(ОбъектРасчета, ВнешняяИБ);
		
		Для Каждого СтрФайл ИЗ МассивФайлов Цикл
			
			Если СтрФайл.ИмяБезРасширения=УправлениеОтчетамиУХ.ПолучитьИмяФайлаПоВидуОтчета(ОбъектРасчета.ВидОтчета) Тогда
				
				ПутьКФайлуНаДиске = СтрФайл.ПолноеИмя;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
			
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКФайлуНаДиске) Тогда
		
		Возврат "";
		
	ИначеЕсли ВнешняяИБ.ТипХранилищаДанныхADO=Перечисления.ТипыХранилищДанныхADO.XLS
		И ОбъектРасчета.Свойство("ПериодСценария") Тогда
		
		ХранимыйФайлСсылка		= Catalogs.ХранимыеФайлыОрганизаций.ПустаяСсылка();
		ВерсияХранимогоФайла 	= ХранимыеФайлыУХ.ДобавитьХранимыйФайлИлиВерсию(ПутьКФайлуНаДиске, ОбъектРасчета,,ХранимыйФайлСсылка);
		
		Если ВерсияХранимогоФайла = Неопределено Тогда // Не удалось получить элемент справочника "Хранимые файлы организаций" по заданным параметрам.
			
			Возврат "";
			
		КонецЕсли;
		
		ИмяФайла = ПолучитьИмяВременногоФайла(ХранимыйФайлСсылка.РасширениеФайла)+"\"+ХранимыйФайлСсылка.Наименование;
		
		Если ХранимыеФайлыУХ.ПолучитьХранимыйФайл(ВерсияХранимогоФайла, ИмяФайла)=Неопределено Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось сохранить данные во временный файл.'"), , , СтатусСообщения.Важное);
			
			Возврат "";
			
		КонецЕсли;
		
		ОбъектРасчета.Вставить("ИмяВременногоФайлаADO",	ИмяФайла);
		ОбъектРасчета.Вставить("ФайлИмпорта",			ХранимыйФайлСсылка);
		ОбъектРасчета.Вставить("ВерсияХранимогоФайла",	ВерсияХранимогоФайла);
						
		Возврат ПолучитьСтрокуСоединенияADO(ВнешняяИБ,ИмяФайла,,ОбъектРасчета.ПравилоОбработки); 
		
	Иначе
		
		Возврат ПолучитьСтрокуСоединенияADO(ВнешняяИБ,ПутьКФайлуНаДиске);
		
	КонецЕсли;	
						
КонецФункции // ПолучитьСтрокуСоединенияДляИмпортаADO

Функция ПолучитьСтруктуруADO(СтрокаПодключения) Экспорт
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "ОбщийМодуль.УправлениеСоединениямиВИБУХ.ПолучитьСтруктуруADO";
	
	Таблицы = Новый ТаблицаЗначений;
	Таблицы.Колонки.Добавить("Имя");
	Таблицы.Колонки.Добавить("Колонки");
	Таблицы.Колонки.Добавить("Связи");
	
	Попытка
		
		ADOX_Catalog                  = Новый COMОбъект("ADOX.Catalog");
		ADOX_Catalog.ActiveConnection = СтрокаПодключения;
		
		Для Каждого Table Из ADOX_Catalog.Tables Цикл
			
			Если НЕ (Найти(ВРЕГ(Table.Type), "TABLE") > 0 ИЛИ ВРЕГ(Table.Type) = "VIEW") Тогда
				Продолжить;
			КонецЕсли;
			
			Таблица = Таблицы.Добавить();
			Таблица.Имя = Table.Name;
			
			Колонки = Новый ТаблицаЗначений;
			Колонки.Колонки.Добавить("Имя");
			Колонки.Колонки.Добавить("ВнутреннееПредставление");
			Колонки.Колонки.Добавить("ОписаниеТипов");
			
			Для Каждого Column Из Table.Columns Цикл
				
				Колонка = Колонки.Добавить();
				Колонка.Имя = Column.Name;
				Колонка.ВнутреннееПредставление = ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Column.Name);
				Колонка.ОписаниеТипов = УправлениеСоединениямиВИБУХ.ВернутьТипЗначенияВВидеСтроки(Column.Type);
				
			КонецЦикла; 
			
			Таблица.Колонки = Колонки;
			
			Связи = Новый ТаблицаЗначений;
			Связи.Колонки.Добавить("СвязаннаяТаблица");
			Связи.Колонки.Добавить("КолонкаТекущейТаблицы");
			Связи.Колонки.Добавить("КолонкаСвязаннойТаблицы");
			
			Для Каждого Ключ Из Table.Keys Цикл
				
				Если НЕ Ключ.Type = 2 Тогда // Ключ не является FOREIGN KEY.
					Продолжить;
				КонецЕсли;
				
				Для Каждого Column Из Ключ.Columns Цикл
					Связь = Связи.Добавить();
					Связь.СвязаннаяТаблица = Ключ.RelatedTable;
					Связь.КолонкаТекущейТаблицы = Column.Name;
					Связь.КолонкаСвязаннойТаблицы = Column.RelatedColumn;
				КонецЦикла;
				
			КонецЦикла;
			
			Таблица.Связи = Связи;
			
		КонецЦикла;
		
		ADOX_Catalog.ActiveConnection.Close();
		
	Исключение
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Таблицы.Очистить();
	КонецПопытки;
		
	Возврат Таблицы;
	
КонецФункции
	
	
