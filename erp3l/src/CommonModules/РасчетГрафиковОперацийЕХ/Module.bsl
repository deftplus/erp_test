////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции, необходимые для расчета графиков платежей по условиям оплаты.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область РасчетГрафикаПоСоглашению
Функция ПолучитьДатуНачисленияПоДатеПервойОперацииСоглашения(ДатаПервойОперации, Соглашение) Экспорт
	
	Если Не Соглашение.ЭтапыГрафикаОплаты.Количество() Тогда
		Возврат ДатаПервойОперации;
	КонецЕсли;
	
	ИсходныйЭтапОплаты = Соглашение.ЭтапыГрафикаОплаты[0];
	
	Если ЭтоЭтапАванса(ИсходныйЭтапОплаты.ВариантОплаты) Тогда
		ТипСрока = ?(ЗначениеЗаполнено(Соглашение.Календарь),
					Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоРабочимДням,
					Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням);
					
		ДатаНачисления = РасчетГрафиковОперацийУХ.ДатаОтБазовойДатыСоСдвигом(ДатаПервойОперации, ИсходныйЭтапОплаты.Сдвиг, ТипСрока, Соглашение.Календарь);
	Иначе
		ДатаНачисления = ДатаПервойОперации;
	КонецЕсли;
	
	Возврат ДатаНачисления;
	
КонецФункции

Функция ЭтоЭтапАванса(ВариантОплаты) Экспорт
	
	Возврат ВариантыОплатыАванса().Найти(ВариантОплаты) <> Неопределено;
			
КонецФункции

Функция ПолучитьГрафикЭтаповОплатыПоСоглашению(Знач ОбщаяСумма, Знач БазоваяДата, Знач Соглашение, ТолькоПостоплата = Ложь) Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Дата", ,ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("Сумма",, РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	
	Если ОбщаяСумма = 0 Или Не ЗначениеЗаполнено(Соглашение) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивКоэффициентов = Соглашение.ЭтапыГрафикаОплаты.ВыгрузитьКолонку("ПроцентПлатежа");
	РаспределенныеСуммы = ОбщегоНазначения.РаспределитьСуммуПропорциональноКоэффициентам(ОбщаяСумма, МассивКоэффициентов);
	
	ПроизводственныйКалендарь = Соглашение.Календарь;
	
	Для Каждого ЭтапОплаты Из Соглашение.ЭтапыГрафикаОплаты Цикл
		
		Если ТолькоПостоплата И ЭтоЭтапАванса(ЭтапОплаты.ВариантОплаты) Тогда
			Продолжить;
		КонецЕсли;
		
		ИндексЭтапа = Соглашение.ЭтапыГрафикаОплаты.Индекс(ЭтапОплаты);
		
		НоваяОплата = Результат.Добавить();
		НоваяОплата.Дата = ДатаОплатыПоЭтапуСоглашения(БазоваяДата, ЭтапОплаты, ПроизводственныйКалендарь);
		НоваяОплата.Сумма = РаспределенныеСуммы[ИндексЭтапа];
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМаксимальныйСрокОплатыПоСоглашению(Соглашение) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Максимум(УсловияОплатыЭтапыОплаты.Сдвиг),0) КАК Срок
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК УсловияОплатыЭтапыОплаты
	|ГДЕ
	|	УсловияОплатыЭтапыОплаты.Ссылка = &Соглашение
	|	И УсловияОплатыЭтапыОплаты.ВариантОплаты В (&ВариантыПостоплата)";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);
	
	ВариантыПостоплата = Новый Массив;
	ВариантыПостоплата.Добавить(Перечисления.ВариантыОплатыКлиентом.КредитПослеОтгрузки);
	ВариантыПостоплата.Добавить(Перечисления.ВариантыОплатыКлиентом.КредитСдвиг);
	ВариантыПостоплата.Добавить(Перечисления.ВариантыОплатыПоставщику.КредитПослеПоступления);
	ВариантыПостоплата.Добавить(Перечисления.ВариантыОплатыПоставщику.КредитСдвиг);
	
	Запрос.УстановитьПараметр("ВариантыПостоплата", ВариантыПостоплата);
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоглашенияСПоставщиками", "СоглашенияСКлиентами");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.Срок;
	КонецЦикла;
	
	Возврат 0;
КонецФункции

Функция ПолучитьПроцентАвансаПоСоглашению(Соглашение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(Сумма(УсловияОплатыЭтапыОплаты.ПроцентПлатежа),0) КАК ПроцентПлатежа
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК УсловияОплатыЭтапыОплаты
	|ГДЕ
	|	УсловияОплатыЭтапыОплаты.Ссылка = &Соглашение
	|	И УсловияОплатыЭтапыОплаты.ВариантОплаты В (&ВариантыАванс)";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);	
	Запрос.УстановитьПараметр("ВариантыАванс",  ВариантыОплатыАванса());
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоглашенияСПоставщиками", "СоглашенияСКлиентами");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Возврат Выборка.ПроцентПлатежа;
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции

Функция ПараметрыАвансаПоСоглашению(Соглашение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УсловияОплатыЭтапыОплаты.Сдвиг КАК Срок,
	|	УсловияОплатыЭтапыОплаты.ПроцентПлатежа КАК ПроцентОплаты,
	|	УсловияОплатыЭтапыОплаты.Ссылка.Календарь КАК Календарь
	|ИЗ
	|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК УсловияОплатыЭтапыОплаты
	|ГДЕ
	|	УсловияОплатыЭтапыОплаты.Ссылка = &Соглашение
	|	И УсловияОплатыЭтапыОплаты.ВариантОплаты В(&ВариантыАванса)";
	
	Запрос.УстановитьПараметр("Соглашение", Соглашение);	
	Запрос.УстановитьПараметр("ВариантыАванса",  ВариантыОплатыАванса());
	
	Если ТипЗнч(Соглашение) = Тип("СправочникСсылка.СоглашенияСКлиентами") Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "СоглашенияСПоставщиками", "СоглашенияСКлиентами");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		
		Результат = Новый Структура("ПроцентОплаты, ТипСрока, Срок");
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		
		Результат.ТипСрока = ?(ЗначениеЗаполнено(Выборка.Календарь),
					Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоРабочимДням,
					Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням);
					
		Возврат Результат;
				
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ДатаАвансаПоНакладной(Соглашение, ДатаПоступления) Экспорт

	ДатаАванса = Дата(1, 1, 1);
	ЭтапыОплаты = Соглашение.ЭтапыГрафикаОплаты;
	Для каждого Этап ИЗ ЭтапыОплаты Цикл
		Если ЭтоЭтапАванса(Этап.ВариантОплаты) Тогда
			ТипСрока = ?(ЗначениеЗаполнено(Соглашение.Календарь),
				Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоРабочимДням,
				Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням);
			
			ДатаАванса = РасчетГрафиковОперацийУХ.ДатаОтБазовойДатыСоСдвигом(ДатаПоступления, -Этап.Сдвиг, ТипСрока, Соглашение.Календарь);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДатаАванса;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
Функция ВариантыОплатыАванса()
	
	Варианты = Новый Массив;
	Варианты.Добавить(Перечисления.ВариантыОплаты.Аванс);
	Варианты.Добавить(Перечисления.ВариантыОплатыКлиентом.АвансДоОбеспечения);
	Варианты.Добавить(Перечисления.ВариантыОплатыКлиентом.ПредоплатаДоОтгрузки);
	Варианты.Добавить(Перечисления.ВариантыОплатыПоставщику.АвансДоПодтверждения);
	Варианты.Добавить(Перечисления.ВариантыОплатыПоставщику.ПредоплатаДоПоступления);
	
	Возврат Варианты;
	
КонецФункции

Функция ДатаОплатыПоЭтапуСоглашения(БазоваяДата, ЭтапОплаты, ПроизводственныйКалендарь)
	
	КоличествоДней = ЭтапОплаты.Сдвиг;
	
	Если ЭтоЭтапАванса(ЭтапОплаты.ВариантОплаты) Тогда 
		КоличествоДней = -КоличествоДней;
	КонецЕсли;
	
		ТипСрока = ?(ЗначениеЗаполнено(ПроизводственныйКалендарь),
					Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоРабочимДням,
					Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням);
	
	Возврат РасчетГрафиковОперацийУХ.ДатаОтБазовойДатыСоСдвигом(БазоваяДата, КоличествоДней, ТипСрока, ПроизводственныйКалендарь);
	
КонецФункции

#КонецОбласти
