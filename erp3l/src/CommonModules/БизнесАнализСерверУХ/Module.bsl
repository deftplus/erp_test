////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для реализации фукнциональности блока Бизнес-Анализ в
// контексте серверного кода.
////////////////////////////////////////////////////////////////////////////////

// Возвращает структуру, содержащую таблицы для базового периода, периода сравнения и плана
// по показателелю Объект, параметрам ВнешнийКонтекст и операнду ИмяОперанда. Когда 
// нет операндов по данным значениям - возвращает пустые таблицы.
Функция ПолучитьСтруктуруОтветаТаблицПоказателяМКП(Показатель, Контекст, ИмяОперанда = "") Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	ПустаяТаблицаОтвета = Новый ТаблицаЗначений;
	ПустаяТаблицаОтвета.Колонки.Добавить("Значение");
	РезультатФункции.Вставить("БАЗА_Таблица",		 ПустаяТаблицаОтвета);
	РезультатФункции.Вставить("Сравнение_Таблица",	 ПустаяТаблицаОтвета);
	РезультатФункции.Вставить("План_Таблица",		 ПустаяТаблицаОтвета);
	ТаблицаБаза = ПустаяТаблицаОтвета.Скопировать();
	// Получение данных.
	СтруктураТаблицы = ТиповыеОтчетыУХ.ПолучитьСтруктуруОтветаТаблицПоказателяМКП(Показатель, Контекст, ИмяОперанда);	
	// Дополнение таблицы База.
	Если СтруктураТаблицы.Свойство("БАЗА_Таблица") Тогда
		ТаблицаБаза = СтруктураТаблицы.БАЗА_Таблица;	
		// Дополнение таблицы План.
		Если СтруктураТаблицы.Свойство("План_Таблица") Тогда
			ТаблицаПлан = СтруктураТаблицы.План_Таблица;	
		Иначе
			ТаблицаПлан = ТаблицаБаза.СкопироватьКолонки();		// Нет плановых значений. Получим пустую таблицу.
		КонецЕсли;
		// Дополнение таблицы Сравнение.
		Если СтруктураТаблицы.Свойство("Сравнение_Таблица") Тогда
			ТаблицаСравнение = СтруктураТаблицы.Сравнение_Таблица;
		Иначе
			ТаблицаСравнение = ТаблицаБаза.СкопироватьКолонки();		// Нет сравнительных значений. Получим пустую таблицу.
		КонецЕсли;
		// Вывод сформированных значений.
		РезультатФункции.Вставить("БАЗА_Таблица",		 ТаблицаБаза);
		РезультатФункции.Вставить("Сравнение_Таблица",	 ТаблицаСравнение);
		РезультатФункции.Вставить("План_Таблица",		 ТаблицаПлан);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить таблицу базовых значений для показателя %Показатель%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(Показатель));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Рассчитывает итоговое значение в колонке Значение по способу СпособРасчетаИтогаВход.
// По умолчанию вычисляет сумму значений.
Функция РассчитатьИтогПоТаблицеПоказателя(ТаблицаПоказателяВход, СпособРасчетаИтогаВход = Неопределено) Экспорт
	РезультатФункции = 0;
	Если СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.ПустаяСсылка() Тогда
		РезультатФункции = ТаблицаПоказателяВход.Итог("Значение");			// По умолчанию считаем сумму.
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Минимум Тогда
		ВыгрузкаЗначений = ТаблицаПоказателяВход.ВыгрузитьКолонку("Значение");
		РезультатФункции = ОбщегоНазначенияУХ.МинимальноеЗначение(ВыгрузкаЗначений);
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Максимум Тогда
		ВыгрузкаЗначений = ТаблицаПоказателяВход.ВыгрузитьКолонку("Значение");
		РезультатФункции = ОбщегоНазначенияУХ.МаксимальноеЗначение(ВыгрузкаЗначений);
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Среднее Тогда
		ВыгрузкаЗначений = ТаблицаПоказателяВход.ВыгрузитьКолонку("Значение");
		РезультатФункции = ОбщегоНазначенияУХ.СреднеАрифметическоеЗначение(ВыгрузкаЗначений);
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Произведение Тогда
		ВыгрузкаЗначений = ТаблицаПоказателяВход.ВыгрузитьКолонку("Значение");
		РезультатФункции = ОбщегоНазначенияУХ.ПроизведениеЗначений(ВыгрузкаЗначений);
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.Сумма Тогда
		РезультатФункции = ТаблицаПоказателяВход.Итог("Значение");
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.ПервоеЗначение Тогда
		Если ТаблицаПоказателяВход.Количество() > 0 Тогда
			ПерваяСтрока = ТаблицаПоказателяВход[0];
			РезультатФункции = ПерваяСтрока.Значение;		
		Иначе
			РезультатФункции = 0;
		КонецЕсли;
	ИначеЕсли СпособРасчетаИтогаВход = Перечисления.СпособыРасчетаИтоговыхЗначенийПоказателейМКП.ПоследнееЗначение Тогда
		Если ТаблицаПоказателяВход.Количество() > 0 Тогда
			ПоследняяСтрока = ТаблицаПоказателяВход[ТаблицаПоказателяВход.Количество() - 1]; 
			РезультатФункции = ПоследняяСтрока.Значение;		
		Иначе
			РезультатФункции = 0;
		КонецЕсли;		
	Иначе
		РезультатФункции = ТаблицаПоказателяВход.Итог("Значение");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает HTML-представление картинки для состояния Состояние показателя МКП.
// Если параметр ГрафическиВход - Истина, то будет создан тег <img>, иначе -
// UNICODE-представление.
Функция ВернутьТекстДляКартинки(Состояние, ГрафическиВход = Истина) Экспорт
	Если ГрафическиВход Тогда
		Если Состояние = 0 Тогда
			Картинка = БиблиотекаКартинок.СостояниеХорошее;
		ИначеЕсли Состояние = 1 Тогда
			Картинка = БиблиотекаКартинок.СостояниеУдовлетворительное;
		ИначеЕсли Состояние = 2 Тогда
			Картинка = БиблиотекаКартинок.СостояниеТревожное;
		ИначеЕсли Состояние = 3 Тогда
			Картинка = БиблиотекаКартинок.ЧерныйТреугольникВверх;
		ИначеЕсли Состояние = 4 Тогда
			Картинка = БиблиотекаКартинок.ЧерныйТреугольникВправо;
		ИначеЕсли Состояние = 5 Тогда
			Картинка = БиблиотекаКартинок.ЧерныйТреугольникВниз;
		Иначе
			Картинка = БиблиотекаКартинок.Пустая;
		КонецЕсли;
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("png");	
		Картинка.Записать(ИмяВременногоФайла);
		РезультатФункциии = "<img src='" + ИмяВременногоФайла + "'>";
	Иначе
		РезультатФункциии = "";
		Если Состояние = 0 Тогда
			РезультатФункциии = "•";
		ИначеЕсли Состояние = 1 Тогда
			РезультатФункциии = "◊";
		ИначеЕсли Состояние = 2 Тогда
			РезультатФункциии = "■";
		ИначеЕсли Состояние = 3 Тогда
			РезультатФункциии = "▲";
		ИначеЕсли Состояние = 4 Тогда
			РезультатФункциии = "►";
		ИначеЕсли Состояние = 5 Тогда
			РезультатФункциии = "▼";
		Иначе
			РезультатФункциии = "";
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункциии;	
КонецФункции

// Возвращает текстовое представление показателя МКП для вывода в аналитическую рассылку.
Функция ПредставлениеПоказателяМкпВАналитическойРассылке(ПоказательВход) Экспорт
	РезультатФункции = Строка(ПоказательВход);
	ЕдиницаПоказателя = ПоказательВход.ЕдиницаИзмерения;
	Если ЗначениеЗаполнено(ЕдиницаПоказателя) Тогда
		РезультатФункции = Строка(ПоказательВход) + ", " + Строка(ЕдиницаПоказателя.КраткоеНаименование);
	Иначе
		РезультатФункции = Строка(ПоказательВход);
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции

// Возвращает массив имён групп анализа показателей по таблице анализа ТаблицаАнализаВход.
Функция ПолучитьГруппыАнализа(ТаблицаАнализаВход)
	РезультатФункции = Новый Массив;
	ТаблицаГрупп = ТаблицаАнализаВход.Скопировать();
	Для Каждого ТекТаблицаГрупп Из ТаблицаГрупп Цикл
		ТекТаблицаГрупп.ИмяГруппыИсточников = СокрЛП(ТекТаблицаГрупп.ИмяГруппыИсточников);
	КонецЦикла;	
	ТаблицаГрупп.Свернуть("ИмяГруппыИсточников");
	ТаблицаГрупп.Сортировать("ИмяГруппыИсточников Возр");
	РезультатФункции = ТаблицаГрупп.ВыгрузитьКолонку("ИмяГруппыИсточников");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьГруппыАнализа()

// Преобразует числовое представление СостояниеВход состояния показателя МКП
// в представление в виде перечисления.
Функция ПреобразоватьСостояниеМкп(СостояниеВход)
	РезультатФункции = Перечисления.СостоянияПоказателейМКП.ПустаяСсылка();
	Если СостояниеВход = 0 Тогда
		РезультатФункции = Перечисления.СостоянияПоказателейМКП.Хорошее; // Состояние хорошее
	ИначеЕсли СостояниеВход = 1 Тогда
		РезультатФункции = Перечисления.СостоянияПоказателейМКП.Нормальное;   // Состояние удовлетворительное
	ИначеЕсли СостояниеВход = 2 Тогда
		РезультатФункции = Перечисления.СостоянияПоказателейМКП.Тревожное; // Состояние тревожное
	Иначе
		РезультатФункции = Перечисления.СостоянияПоказателейМКП.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьСостояниеМкп()		

// Определяет нужно ли рассылать показатель по предыдущему ПредыдущееСостояниеВход 
// и новому НовоеСостояниеВход его состоянию, ориентируясь на настройки аналитической
// рассылки РассылкаВход.
Функция ТребуетсяРассылкаПоСостоянию(ПредыдущееСостояниеВход, НовоеСостояниеВход, РассылкаВход)
	РезультатФункции = Ложь;
	Если ТипЗнч(РассылкаВход) = Тип("СправочникСсылка.АналитическаяПодписка") Тогда
		ВариантРассылки = РассылкаВход.ВариантАналитическойРасылкиПоказателей;
		Если ВариантРассылки = Перечисления.ВариантыАналитическойРассылкиПоказателей.ВсеПоказатели Тогда
			// Все показатели. Разрешаем отправку.
			РезультатФункции = Истина;
		ИначеЕсли ВариантРассылки = Перечисления.ВариантыАналитическойРассылкиПоказателей.Измененные Тогда
			// Только изменённые. Убедимся в несовпадении состояния.
			РезультатФункции = (ПредыдущееСостояниеВход <> НовоеСостояниеВход);
		ИначеЕсли ВариантРассылки = Перечисления.ВариантыАналитическойРассылкиПоказателей.Выборочные Тогда
			// Выборочные. Проверим, что текущее состояние отмечено.
			РезультатФункции = Ложь;
			Для Каждого ТекРассылаемыеСостояния Из РассылкаВход.РассылаемыеСостояния Цикл
				Если ТекРассылаемыеСостояния.Использование Тогда
					СостояниеПреобразованное = ПреобразоватьСостояниеМкп(НовоеСостояниеВход);
					РезультатФункции = (ТекРассылаемыеСостояния.СостояниеПоказателяМКП = СостояниеПреобразованное);
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли НЕ ЗначениеЗаполнено(ВариантРассылки) Тогда
			// Пустое значение. По умолчанию разрешаем рассылать показатель.
			РезультатФункции = Истина;			
		Иначе
			// Неизвестный вариант. Сообщим об этом пользователю и запретим отправку этого показателя.
			ТекстСообщения = НСтр("ru = 'В рассылке %Рассылка% указан неизвестный вариант аналитической рассылки показателей: %ВариантРассылки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Рассылка%", Строка(РассылкаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВариантРассылки%", Строка(ВариантРассылки));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный тип аналитической рассылки: %Рассылка%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Рассылка%", Строка(РассылкаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ТребуетсяРассылкаПоСостоянию()

// Преобразует числовое представление ДинамикаВход динамики показателя МКП
// в представление в виде перечисления.
Функция ПреобразоватьДинамикуМкп(ДинамикаВход)
	РезультатФункции = Перечисления.ТрендыПоказателейМКП.ПустаяСсылка();
	Если ДинамикаВход = 5 Тогда
		РезультатФункции = Перечисления.ТрендыПоказателейМКП.Отрицательный; 
	ИначеЕсли ДинамикаВход = 4 Тогда
		РезультатФункции = Перечисления.ТрендыПоказателейМКП.Нулевой;   
	ИначеЕсли ДинамикаВход = 3 Тогда
		РезультатФункции = Перечисления.ТрендыПоказателейМКП.Положительный; 
	Иначе
		РезультатФункции = Перечисления.ТрендыПоказателейМКП.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьСостояниеМкп()	

// Определяет нужно ли рассылать показатель по предыдущей ПредыдущаяДинамикаВход 
// и новой НоваяДинамикаВход его динамике, ориентируясь на настройки аналитической
// рассылки РассылкаВход.
Функция ТребуетсяРассылкаПоДинамике(ПредыдущаяДинамикаВход, НоваяДинамикаВход, РассылкаВход)
	РезультатФункции = Ложь;
	Если ТипЗнч(РассылкаВход) = Тип("СправочникСсылка.АналитическаяПодписка") Тогда
		ВариантРассылки = РассылкаВход.ВариантАналитическойРасылкиПоказателей;
		Если ВариантРассылки = Перечисления.ВариантыАналитическойРассылкиПоказателей.ВсеПоказатели Тогда
			// Все показатели. Разрешаем отправку.
			РезультатФункции = Истина;
		ИначеЕсли ВариантРассылки = Перечисления.ВариантыАналитическойРассылкиПоказателей.Измененные Тогда
			// Только изменённые. Убедимся в несовпадении состояния.
			РезультатФункции = (ПредыдущаяДинамикаВход <> НоваяДинамикаВход);
		ИначеЕсли ВариантРассылки = Перечисления.ВариантыАналитическойРассылкиПоказателей.Выборочные Тогда
			// Выборочные. Проверим, что текущее состояние отмечено.
			РезультатФункции = Ложь;
			Для Каждого ТекРассылаемыеТренды Из РассылкаВход.РассылаемыеТренды Цикл
				Если ТекРассылаемыеТренды.Использование Тогда
					ДинамикаПреобразованная = ПреобразоватьДинамикуМкп(НоваяДинамикаВход);
					РезультатФункции = (ТекРассылаемыеТренды.ТрендПоказателяМКП = ДинамикаПреобразованная);
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;	
		ИначеЕсли НЕ ЗначениеЗаполнено(ВариантРассылки) Тогда
			// Пустое значение. По умолчанию разрешаем рассылать показатель.
			РезультатФункции = Истина;			
		Иначе
			// Неизвестный вариант. Сообщим об этом пользователю и запретим отправку этого показателя.
			ТекстСообщения = НСтр("ru = 'В рассылке %Рассылка% указан неизвестный вариант аналитической рассылки показателей: %ВариантРассылки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Рассылка%", Строка(РассылкаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВариантРассылки%", Строка(ВариантРассылки));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный тип аналитической рассылки: %Рассылка%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Рассылка%", Строка(РассылкаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ТребуетсяРассылкаПоДинамике()

// Возвращает HTML-текст для рассылки монитора ключевых показателей РассылаемыйОбъект по настройке
// НастройкаПанели, где показатели входят в таблицу ТаблицаПоказателей.
Функция ПолучитьHtmlТаблицуПоказателейМкп(РассылаемыйОбъект, НастройкаПанели, ТаблицаПоказателей, РассылкаВход) Экспорт
	// Получение данных анализа.
	РезультатФункции = "";
	РезультатАнализа = Справочники.ПроизвольныеОтчеты.ОбновитьДанныеОтчетаВРегистре(РассылаемыйОбъект, НастройкаПанели, ТаблицаПоказателей);
	// Получение групп.
	МассивГрупп = ПолучитьГруппыАнализа(РезультатАнализа);
	Для Каждого ТекМассивГрупп Из МассивГрупп Цикл
		// Вывод заголовка группы.
		Если ТекМассивГрупп <> "" Тогда
			РезультатФункции = РезультатФункции + "<h2>" + Строка(ТекМассивГрупп) + "</h2>";
		Иначе
			// Не добавляем заголовок.
		КонецЕсли;
		// Вывод заголовка таблицы показателей.
		РезультатФункции = РезультатФункции + НСтр("ru = '<table><tr style=""background-color:#eeeeee;font-family:Tahoma;font-weight:bold;text-align:center""><td>Показатель</td><td>Значение</td><td>Плановое значение</td><td>Состояние</td><td>Динамика</td></tr>'");
		Инд = 0;
		Для Каждого Элемент из РезультатАнализа Цикл
			Если СокрЛП(ТекМассивГрупп) = СокрЛП(Элемент.ИмяГруппыИсточников) Тогда
				// Получение значения и представления динамики и сосояния.
				НуженВывод = Ложь;
				Если ((Элемент.КонтрольСостояния) И ТребуетсяРассылкаПоСостоянию(Элемент.Состояние, Элемент.НовоеСостояние, РассылкаВход)) Тогда
					СтрокаСостояния = "<td style=""text-align:center"">" + ВернутьТекстДляКартинки(Элемент.НовоеСостояние) + НСтр("ru = ' (было '") + ВернутьТекстДляКартинки(Элемент.Состояние) + ")</td>";
					НуженВывод = Истина;
				Иначе
					СтрокаСостояния = "<td style=""text-align:center"">" + ВернутьТекстДляКартинки(Элемент.НовоеСостояние) + "</td>";
				КонецЕсли;
				Если ((Элемент.КонтрольДинамики) И ТребуетсяРассылкаПоДинамике(Элемент.Тренд, Элемент.НовыйТренд, РассылкаВход)) Тогда
					СтрокаДинамики = "<td style=""text-align:center"">" + ВернутьТекстДляКартинки(Элемент.НовыйТренд) + НСтр("ru = ' (было '") + ВернутьТекстДляКартинки(Элемент.Тренд) + ")</td>";
					НуженВывод = Истина;
				Иначе
					СтрокаДинамики = "<td style=""text-align:center"">" + ВернутьТекстДляКартинки(Элемент.НовыйТренд) + "</td>";
				КонецЕсли;
				Если НуженВывод Тогда
					// Представление показателя.
					ТекПоказатель = Элемент.Показатель;
					ПредставлениеПоказателя = ПредставлениеПоказателяМкпВАналитическойРассылке(ТекПоказатель);
					// Формирование строки таблицы.
					РезультатФункции = РезультатФункции + "
					|<tr style="""; 
					РезультатФункции = РезультатФункции + ?(ОбщегоНазначенияУХ.ЧетноеЧисло(Инд), "background-color:#eeeeee;", "");
					РезультатФункции = РезультатФункции + "font-family:Tahoma""><td>";
					РезультатФункции = РезультатФункции + ПредставлениеПоказателя;
					РезультатФункции = РезультатФункции + "</td><td>";
					РезультатФункции = РезультатФункции + Формат(Элемент.ФактическоеЗначениеТекущегоПериода, "ЧЦ=15; ЧДЦ=2");
					РезультатФункции = РезультатФункции + "</td><td>";
					РезультатФункции = РезультатФункции + Формат(Элемент.ПлановоеЗначение, "ЧЦ=15; ЧДЦ=2");
					РезультатФункции = РезультатФункции + "</td>";
					РезультатФункции = РезультатФункции + СтрокаСостояния;
					РезультатФункции = РезультатФункции + СтрокаДинамики;
					РезультатФункции = РезультатФункции + "</tr>";
					Инд = Инд + 1;
				Иначе
					Продолжить;		// Не требуется вывод этого показателя.
				КонецЕсли;
			Иначе
				// Показатель принадлежит другой группе.
			КонецЕсли;
		КонецЦикла;
		РезультатФункции = РезультатФункции + "</table>";
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции

// Получает список для аналитической рассылки.
Функция ПолучитьСписокПользователейАналитическойРассылки(ОбъектРассылки, АналитическаяПодпискаВход) Экспорт
	РезультатФункции = Новый СписокЗначений;
	Если ОбъектРассылки <> Неопределено Тогда
		РезультатФункции.Добавить(ОбъектРассылки);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТекущиеПользователи.Пользователь КАК Пользователь,
		|	КонтактнаяИнформация.Представление КАК АдресЭлектроннойПочты,
		|	ТекущиеПользователи.Пользователь.Представление КАК ПредставлениеПользователя
		|ИЗ
		|	(ВЫБРАТЬ
		|		АналитическаяПодпискаСписокРассылки.Пользователь КАК Пользователь
		|	ИЗ
		|		Справочник.АналитическаяПодписка.СписокРассылки КАК АналитическаяПодпискаСписокРассылки
		|	ГДЕ
		|		АналитическаяПодпискаСписокРассылки.Ссылка = &Источник
		|		И АналитическаяПодпискаСписокРассылки.Пользователь ССЫЛКА Справочник.Пользователи
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		ОтветственныеОрганизаций.Пользователь
		|	ИЗ
		|		Справочник.АналитическаяПодписка.СписокРассылки КАК АналитическаяПодпискаСписокРассылки
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
		|			ПО (ОтветственныеОрганизаций.Роль = АналитическаяПодпискаСписокРассылки.Пользователь)
		|				И (ОтветственныеОрганизаций.Организация = АналитическаяПодпискаСписокРассылки.Организация)
		|	ГДЕ
		|		АналитическаяПодпискаСписокРассылки.Ссылка = &Источник
		|		И АналитическаяПодпискаСписокРассылки.Пользователь ССЫЛКА Справочник.РолиКонтактныхЛиц) КАК ТекущиеПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК КонтактнаяИнформация
		|		ПО (КонтактнаяИнформация.Ссылка = ТекущиеПользователи.Пользователь)
		|			И (КонтактнаяИнформация.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.EmailПользователя))";
		Запрос.УстановитьПараметр("Источник", АналитическаяПодпискаВход);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 0 Тогда
			РезультатФункции = Новый СписокЗначений;
		Иначе
			Пока Выборка.Следующий() Цикл
				РезультатФункции.Добавить(Выборка.Пользователь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Формирует таблицу показателей со всеми показателями, входящими
// в монитор, а также с включенным контролем динамиики и состояния.
Функция СформироватьТаблицуПоказателейРассылкиПоМониторуМКП(МониторВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("Показатель");
	РезультатФункции.Колонки.Добавить("КонтрольСостояния");
	РезультатФункции.Колонки.Добавить("КонтрольДинамики");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПроизвольныеОтчетыИсточникиДанных.ИсточникДанных КАК Показатель,
		|	ИСТИНА КАК КонтрольСостояния,
		|	ИСТИНА КАК КонтрольДинамики
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты.ИсточникиДанных КАК ПроизвольныеОтчетыИсточникиДанных
		|ГДЕ
		|	ПроизвольныеОтчетыИсточникиДанных.Ссылка = &МониторМКП
		|	И НЕ ПроизвольныеОтчетыИсточникиДанных.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("МониторМКП", МониторВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает табличный документ, в который веден отчет по значениям 
// ТаблицаЗначенийПоказателейМкпВход монитора ключевых показаелей.
Функция ВывестиРезультатАнализаВТабДок(ТаблицаЗначенийПоказателейМкпВход, НаименованиеМонитораВход = "") Экспорт
	// Инициализация.
	РезультатФункции = Новый ТабличныйДокумент;
	Макет = ПолучитьОбщийМакет("АналитическаяРассылкаМонитораКлючевыхПоказателей");
	// Вывод шапки.
	ОбластьПечати = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьПечати.Параметры.НаименованиеМонитора = НаименованиеМонитораВход;
	РезультатФункции.Вывести(ОбластьПечати);
	// Вывод строк.
	Для Каждого ТекТаблицаЗначений Из ТаблицаЗначенийПоказателейМкпВход Цикл
		ПредставлениеПоказателя	 = ПредставлениеПоказателяМкпВАналитическойРассылке(ТекТаблицаЗначений.Показатель);
		ПредставлениеДинамики	 = БизнесАнализКлиентСерверУХ.ПолучитьПредставлениеСостоянияПоказателяМкпВАналитическойРассылке(ТекТаблицаЗначений.НовыйТренд);
		ПредставлениеСостояния	 = БизнесАнализКлиентСерверУХ.ПолучитьПредставлениеСостоянияПоказателяМкпВАналитическойРассылке(ТекТаблицаЗначений.НовоеСостояние);
		ОбластьПечати = Макет.ПолучитьОбласть("ОбластьСтрокаПоказатель");
		ОбластьПечати.Параметры.НаименованиеПоказателя	 = ПредставлениеПоказателя;
		ОбластьПечати.Параметры.ТекущееЗначение			 = Строка(ТекТаблицаЗначений.ФактическоеЗначениеТекущегоПериода);
		ОбластьПечати.Параметры.ПлановоеЗначение		 = Строка(ТекТаблицаЗначений.ПлановоеЗначение);
		ОбластьПечати.Параметры.Состояние				 = ПредставлениеСостояния;
		ОбластьПечати.Параметры.Динамика				 = ПредставлениеДинамики;
		РезультатФункции.Вывести(ОбластьПечати);
	КонецЦикла;
	// Вывод подвала.
	ОбластьПечати = Макет.ПолучитьОбласть("ОбластьПодвал");
	РезультатФункции.Вывести(ОбластьПечати);
	// Настройка табличного документа.
	РезультатФункции.ОриентацияСтраницы	 = ОриентацияСтраницы.Ландшафт;
	РезультатФункции.АвтоМасштаб		 = Истина;
	РезультатФункции.ОтображатьСетку	 = Ложь;
	Возврат РезультатФункции;
КонецФункции

// Возвращает стуруктуру, содержащую структуру таблиц с данными расшифровки объектом по владельцу
// ВладелецВход.
Функция ПолучитьСтруктуруТаблицРасшифровкиОбъектомИнформационнойБазыПоВладельцу(ВладелецВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("РасшифровкиОбъектом", Новый ТаблицаЗначений);
	РезультатФункции.Вставить("ПараметрыРасшифровки", Новый ТаблицаЗначений);
	// Считаем расшифровки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ТипОбъектаМетаданных,
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.НаименованиеОбъектаМетаданных,
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ФормаРасшифровки,
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Представление,
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.ИдентификаторСтроки
	|ИЗ
	|	Справочник.РасшифровкиАналитическихОтчетов.РасшифровкиОбъектомИнформационнойБазы КАК РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы
	|ГДЕ
	|	РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Ссылка.Владелец = &Владелец
	|	И НЕ РасшифровкиАналитическихОтчетовРасшифровкиОбъектомИнформационнойБазы.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", ВладелецВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции.Вставить("РасшифровкиОбъектом", Выгрузка);
	// Считаем параметры расшифровки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ИдентификаторСтроки,
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ИмяПараметраРасшифровки,
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ФиксированноеЗначение,
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.ВыражениеПолучения
	|ИЗ
	|	Справочник.РасшифровкиАналитическихОтчетов.ПараметрыРасшифровкиОбъектом КАК РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом
	|ГДЕ
	|	РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.Ссылка.Владелец = &Владелец
	|	И НЕ РасшифровкиАналитическихОтчетовПараметрыРасшифровкиОбъектом.Ссылка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", ВладелецВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции.Вставить("ПараметрыРасшифровки", Выгрузка);
	Возврат РезультатФункции;
КонецФункции

// Записывает в информационную базу данные ТаблицаРасшифровокВход и ТаблицаПараметровВход расшифровок
// объектом информационной базы по объекту ВладелецВход с наименованием НаименованиеОбъектаВход. Возвращает 
// успешность выполнения записи.
Функция ЗаписатьРасшифровкуОбъектом(ВладелецВход, ТаблицаРасшифровокВход, ТаблицаПараметровВход, НаименованиеОбъектаВход = "") Экспорт
	РезультатФункции = Истина;
	// Получение ссылки на расшифровку аналитических отчетов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	РасшифровкиАналитическихОтчетов.Ссылка,
	|	РасшифровкиАналитическихОтчетов.Владелец
	|ИЗ
	|	Справочник.РасшифровкиАналитическихОтчетов КАК РасшифровкиАналитическихОтчетов
	|ГДЕ
	|	РасшифровкиАналитическихОтчетов.Владелец = &Владелец
	|	И НЕ РасшифровкиАналитическихОтчетов.ПометкаУдаления";
	Запрос.УстановитьПараметр("Владелец", ВладелецВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Если Выгрузка.Количество() > 0 Тогда
		// Есть существующая расшифровка. Воспользуемся ей.
		ПерваяСтрока = Выгрузка[0];
		РасшифровкаСсылка = ПерваяСтрока.Ссылка;
		ОбъектРасшифровки = РасшифровкаСсылка.ПолучитьОбъект();
	Иначе
		// Расшифровки ещё нет. Создадим новую.
		ОбъектРасшифровки = Справочники.РасшифровкиАналитическихОтчетов.СоздатьЭлемент();
		НовоеНаименование = НСтр("ru = '%НаименованиеПоказателя% (расшифровка)'");
		Если НаименованиеОбъектаВход <> "" Тогда
			НовоеНаименование = СтрЗаменить(НовоеНаименование, "%НаименованиеПоказателя%", НаименованиеОбъектаВход);
		Иначе
			НовоеНаименование = СтрЗаменить(НовоеНаименование, "%НаименованиеПоказателя%", Строка(ВладелецВход));
		КонецЕсли;
		ОбъектРасшифровки.Наименование = НовоеНаименование;
		ОбъектРасшифровки.Владелец = ВладелецВход;
	КонецЕсли;
	// Заполним табличные части справочника и запишем объект.
	Попытка
		ОбъектРасшифровки.РасшифровкиОбъектомИнформационнойБазы.Загрузить(ТаблицаРасшифровокВход);
		ОбъектРасшифровки.ПараметрыРасшифровкиОбъектом.Загрузить(ТаблицаПараметровВход);
		ОбъектРасшифровки.Записать();
	Исключение
		РезультатФункции = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось записать расшифровку для %ИмяПоказателя% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПоказателя%", Строка(ВладелецВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Для показателя ПоказательВход получает цвет оформления тренда со значением ОтносительноеИзменениеВход.
Функция ПолучитьЦветВыделенияТренда(ПоказательВход, ОтносительноеИзменениеВход, ТекущееЗначениеПоказателяВход = Неопределено, ЭтоДинамикаВход = Ложь) Экспорт
	РезультатФункции = WebЦвета.Черный;
	Если (ПоказательВход.ИспользоватьКоридорЗначений) И (ТекущееЗначениеПоказателяВход <> Неопределено) Тогда
		ЗначениеВышеНижнейГраницы = (ТекущееЗначениеПоказателяВход >= ПоказательВход.НижняяГраницаЗначения);
		ЗначениеНижеВерхнейГраницы = (ТекущееЗначениеПоказателяВход <= ПоказательВход.ВерхняяГраницаЗначения);
		Если ЭтоДинамикаВход Тогда
			Если БизнесАнализКлиентСерверУХ.ЗначениеПоказателяВКоридореЗначений(ПоказательВход, ТекущееЗначениеПоказателяВход) Тогда
				РезультатФункции = WebЦвета.Черный;			// Внутри интервала.
			Иначе
				ИзменениеПоложительно = (ОтносительноеИзменениеВход > 0);
				ПриближениеКНижнейГранице = ((Не ЗначениеВышеНижнейГраницы) И (ИзменениеПоложительно));
				ПриближениеКВерхнейГранице = ((Не ЗначениеНижеВерхнейГраницы) И (НЕ ИзменениеПоложительно));
				Если ПриближениеКВерхнейГранице ИЛИ ПриближениеКНижнейГранице Тогда
					РезультатФункции = WebЦвета.Зеленый;	
				Иначе
					РезультатФункции = WebЦвета.Красный;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если БизнесАнализКлиентСерверУХ.ЗначениеПоказателяВКоридореЗначений(ПоказательВход, ТекущееЗначениеПоказателяВход) Тогда
				РезультатФункции = WebЦвета.Зеленый;			
			Иначе
				РезультатФункции = WebЦвета.Красный;
			КонецЕсли;
		КонецЕсли;
	Иначе	
		// Перевернём тренд, если его нужно трактовать отрицательно.
		Если ПоказательВход.ТрактовкаПоложительногоОтклонения Тогда
			ТрендРабочий = ОтносительноеИзменениеВход;
		Иначе
			ТрендРабочий = -ОтносительноеИзменениеВход;
		КонецЕсли;
		// Обработаем изменение тренда.
		Если ТрендРабочий < -ПоказательВход.ПредельноеОтклонениеОтПлана Тогда
			РезультатФункции = WebЦвета.Красный;
		ИначеЕсли (ТрендРабочий >= -ПоказательВход.ПредельноеОтклонениеОтПлана) И (ТрендРабочий < -ПоказательВход.ПорогЗначимостиТренда) Тогда
			РезультатФункции = WebЦвета.Лосось;
		ИначеЕсли (ТрендРабочий >= -ПоказательВход.ПорогЗначимостиТренда) И (ТрендРабочий < -ПоказательВход.ПорогЗначимостиТренда) Тогда
			РезультатФункции = WebЦвета.Черный;		
		ИначеЕсли (ТрендРабочий >= -ПоказательВход.ПорогЗначимостиТренда) И (ТрендРабочий < ПоказательВход.ПредельноеОтклонениеОтПлана) Тогда
			РезультатФункции = WebЦвета.ЦветМорскойВолны;				
		ИначеЕсли ТрендРабочий > ПоказательВход.ПредельноеОтклонениеОтПлана Тогда
			РезультатФункции = WebЦвета.Зеленый;						
		Иначе	
			РезультатФункции = WebЦвета.Черный;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции
