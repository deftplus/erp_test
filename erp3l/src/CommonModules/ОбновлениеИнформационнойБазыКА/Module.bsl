////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки КомплекснаяАвтоматизация.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "КомплекснаяАвтоматизация";
	Описание.Версия = "2.5.7.366";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	Описание.ИдентификаторИнтернетПоддержки = "ARAutomation";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Документы.АктВыполненныхВнутреннихРабот.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатковВнеоборотныхАктивов2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВозвратОСИзАренды2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыбытиеАрендованныхОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыработкаСотрудников.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ДвижениеПродукцииИМатериалов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказМатериаловВПроизводство.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаказПереработчику.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаключениеДоговораАренды.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ИзменениеПараметровНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ИзменениеПараметровОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ИзменениеУсловийДоговораАренды.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаСтоимостиИАмортизацииНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.КорректировкаСтоимостиИАмортизацииОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.МодернизацияОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НачислениеСписаниеРезервовПоСомнительнымДолгам.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НачислениеСписаниеРезервовПредстоящихРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОбъединениеОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ОтчетПереработчика.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПередачаОСВАренду2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПеремещениеНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПеремещениеОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПереоценкаНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПереоценкаОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПланПроизводства.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПодготовкаКПередачеНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПодготовкаКПередачеОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПоступлениеАрендованныхОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПоступлениеУслугПоАренде.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПринятиеКУчетуНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПринятиеКУчетуОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПроизводствоБезЗаказа.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РазукомплектацияОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РаспределениеВозвратныхОтходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РаспределениеПроизводственныхЗатрат.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.РаспределениеПрочихЗатрат.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеНМА2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеОС2_4.ПриДобавленииОбработчиковОбновления(Обработчики);
	ОбновлениеИнформационнойБазыКА.ПриДобавленииОбработчиковОбновленияКА(Обработчики);
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПланыВидовХарактеристик.РеквизитыЭлементовФинансовыхОтчетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	ПланыВидовХарактеристик.СтатьиДоходов.ПриДобавленииОбработчиковОбновленияКА(Обработчики);
	РегистрыНакопления.АмортизацияНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.АмортизацияОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ВыпускПродукции.ПриДобавленииОбработчиковОбновления(Обработчики);

//++ НЕ УТКА
//++ Локализация
	РегистрыНакопления.ЗаказыМатериаловВПроизводство.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- Локализация
//-- НЕ УТКА

//++ Локализация
	РегистрыНакопления.ЗаказыМатериаловСУчетомКорректировок.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- Локализация
	РегистрыНакопления.ОборотыБюджетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыВыпускаИзделий.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыЗанятостиТрудовыхРесурсов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыПотребленияМатериалов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПланыПроизводства.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.РезервыПоСомнительнымДолгам.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.СебестоимостьТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.СтоимостьНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.СтоимостьОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.ТоварыНаСкладах.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.АрендованныеОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ГрафикНачисленияУслугПоАренде.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ГрафикОплатУслугПоАренде.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДокументыПоНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ДокументыПоОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.МестонахождениеОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.МестоУчетаНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НастройкиРаспределенияПостатейныхРасходов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НормативнаяДлительностьПроизводства.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОчередьРасчетаПланаПроизводства.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПервоначальныеСведенияНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПервоначальныеСведенияОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПереданныеВАрендуОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПорядокУчетаНМА.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПорядокУчетаОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СпецификацииИзделий.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.УсловияДоговоровАренды.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ВидыБюджетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ДоговорыАренды.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.НефинансовыеПоказателиБюджетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ОбъектыЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПравилаЛимитовПоДаннымБюджетирования.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПравилаПолученияФактаПоПоказателямБюджетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПравилаПолученияФактаПоСтатьямБюджетов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.РесурсныеСпецификации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СтатьиКалькуляции.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.Сценарии.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ШаблоныВводаНефинансовыхПоказателей.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ЭлементыФинансовыхОтчетов.ПриДобавленииОбработчиковОбновления(Обработчики);

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ОбновлениеИнформационнойБазыУТ.ПослеОбновленияИнформационнойБазы(ПредыдущаяВерсия, ТекущаяВерсия,
		ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим);
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "КомплекснаяАвтоматизация";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ОбновлениеУТДоКА";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "Справочники.НастройкиХозяйственныхОпераций.ЗаполнитьПредопределенныеНастройкиХозяйственныхОпераций";
	
	ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииОбработчиковПереходаНаКА(Обработчики);
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	Если ПредыдущееИмяКонфигурации = "УправлениеТорговлей" Тогда
		Параметры.ОчиститьСведенияОПредыдущейКонфигурации = Ложь;
		ОбновлениеИнформационнойБазы.УстановитьВерсиюИБ(ПредыдущееИмяКонфигурации, ПредыдущаяВерсияКонфигурации, Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков, ИдентификаторИнтернетПоддержки");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.19",
		"Роль.РазделПроизводство",
		"Роль.ПодсистемаПроизводство",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.МежцеховоеУправление",
		"Подсистема.Производство.Подсистема.МежцеховоеУправление2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.ВнутрицеховоеУправление",
		"Подсистема.Производство.Подсистема.ВнутрицеховоеУправление2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.59",
		"Подсистема.Производство.Подсистема.МатериальныйУчет",
		"Подсистема.Производство.Подсистема.МатериальныйУчет2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.72",
		"Подсистема.Производство.Подсистема.ПроизводственныеЗатраты",
		"Подсистема.Производство.Подсистема.ПроизводственныеЗатраты2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.72",
		"Подсистема.Производство.Подсистема.АнализСебестоимости",
		"Подсистема.Производство.Подсистема.АнализСебестоимости2_1",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.2.10",
		"Роль.ДобавлениеИзменениеРегистрацийНаработок",
		"Роль.ДобавлениеИзменениеНаработкиОбъектовЭксплуатации",
		ОписаниеПодсистемы.Имя);	
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.6.1",
		"Подсистема.ВнеоборотныеАктивы.Подсистема.Лизинг",
		"Подсистема.ВнеоборотныеАктивы.Подсистема.Аренда",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.6.1",
		"Роль.ЧтениеДоговоровЛизинга",
		"Роль.ЧтениеДоговоровАренды",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.6.1",
		"Роль.ДобавлениеИзменениеПриобретенийУслугПоЛизингу",
		"Роль.ДобавлениеИзменениеПоступленийУслугПоАренде",
		ОписаниеПодсистемы.Имя);
	
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.6.1",
		"Роль.ЧтениеПриобретенийУслугПоЛизингу",
		"Роль.ЧтениеПоступленийУслугПоАренде",
		ОписаниеПодсистемы.Имя);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска КА.
//
Процедура ПервыйЗапуск() Экспорт
	
	УстановитьВалютуПлановыхЦен();
	УстановитьВалютуРасценокВидовРабот();
	
	ЗаполнитьКонстантуИспользоватьБюджетирование();
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
КонецПроцедуры

Процедура ОбновлениеУТДоКА() Экспорт
	
	ПланыВидовХарактеристик.АналитикиСтатейБюджетов.ЗаполнитьПредопределенныеАналитикиСтатейБюджетов();
	Константы.ЗаполненыДвиженияАктивовПассивов.Установить(Истина);
	
	ОбновлениеИнформационнойБазыУТ.ЗаполнитьЗначениеРазделенияПоОбластямДанных();
	
	ЗначенияКонстант = Новый Структура;
	ЗначенияКонстант.Вставить("УправлениеТорговлей", Ложь);
	ЗначенияКонстант.Вставить("КомплекснаяАвтоматизация", Истина);
	
	Для Каждого КлючИЗначение Из ЗначенияКонстант Цикл
		Константы[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
	КонецЦикла; 
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Процедура устанавливает значение валюты плановых цен.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуПлановыхЦен()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаПлановойСебестоимостиПродукции.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаПлановойСебестоимостиПродукции.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение валюты расценок видов работ.
// Вызывается при первоначальном заполнении ИБ.
//
Процедура УстановитьВалютуРасценокВидовРабот()
	
	Если НЕ ЗначениеЗаполнено(Константы.ВалютаРасценокВидовРабот.Получить())
		И Не Константы.ИспользоватьНесколькоВалют.Получить()Тогда
		
		Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	Валюты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Валюты КАК Валюты
			|ГДЕ
			|	НЕ Валюты.ПометкаУдаления");
		РезультатЗапроса = Запрос.Выполнить();
		
		Если Не РезультатЗапроса.Пустой() Тогда
			Выборка = РезультатЗапроса.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				
				Константы.ВалютаРасценокВидовРабот.Установить(Выборка.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияКА(Обработчики) Экспорт

#Область ДополнитьПользовательскиеПрофилиРолямиПоИсследованиямИРазработкам

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ДополнитьПользовательскиеПрофилиРолямиПоИсследованиямИРазработкам";
	Обработчик.Версия = "2.5.5.21";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("58c87eba-8913-4445-9e79-dbdb6da83f24");
	Обработчик.Комментарий = НСтр("ru = 'Дополняет пользовательские профили групп доступа по нематериальным активам новыми ролями для тем и этапов исследований и разработок.';
									|en = 'Supplements access groups user profiles by intangible assets with new roles for research and development topics and stages.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ДополнитьПользовательскиеПрофилиРолямиПоОбесценению

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ДополнитьПользовательскиеПрофилиРолямиПоОбесценению";
	Обработчик.Версия = "2.5.7.294";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("58c87eba-8913-6665-9e79-dbdb6da83f24");
	Обработчик.Комментарий = НСтр("ru = 'Дополняет пользовательские профили групп доступа по нематериальным активам новыми ролями для обесценения ВНА.';
									|en = 'Supplements access group user profiles for intangible assets with new roles for the fixed asset impairment.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКА.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

КонецПроцедуры

// Обработчик первого запуска КА.
// Включает константу "ИспользоватьБюджетирование".
//
Процедура ЗаполнитьКонстантуИспользоватьБюджетирование() Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("КомплекснаяАвтоматизация") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьБюджетирование.Установить(Истина);
	Константы.ИнтерфейсВерсии82.Установить(Ложь);
	
КонецПроцедуры

//++ Локализация
// Процедура включает использование ведомостей прочих доходов при обновлении
// в зависимости от использования учета зарплаты.
//
Процедура УстановитьИспользованиеВедомостейПрочихДоходов() Экспорт

	Если ПолучитьФункциональнуюОпцию("ИспользоватьНачислениеЗарплатыУТ") Тогда
		НаборЗаписей = РегистрыСведений.НастройкиВзаиморасчетовПоПрочимДоходам.СоздатьНаборЗаписей();
		Настройка = НаборЗаписей.Добавить();
		Настройка.ИспользоватьВзаиморасчетыПоПрочимДоходам = Истина;
		Настройка.ИспользоватьВедомостиДляВыплатыПрочихДоходов = Истина;
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	КонецЕсли;

КонецПроцедуры
//-- Локализация

Процедура ДополнитьПользовательскиеПрофилиРолямиПоИсследованиямИРазработкам() Экспорт
	
	ЗаменяемыеРоли = Новый Соответствие;
	
	// Все роли предоставляющие доступ к справочнику НематериальныеАктивы
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеНематериальныхАктивов", Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеНематериальныхАктивов",              Новый Массив);
	
	// Добавляем саму роль, чтобы не удалилась
	Для Каждого КлючИЗначение Из ЗаменяемыеРоли Цикл
		КлючИЗначение.Значение.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ЗаменяемыеРоли["ЧтениеНематериальныхАктивов"             ].Добавить("ЧтениеНематериальныхАктивов");
	ЗаменяемыеРоли["ЧтениеНематериальныхАктивов"             ].Добавить("ЧтениеТемЭтаповИсследованийИРазработок");
	ЗаменяемыеРоли["ДобавлениеИзменениеНематериальныхАктивов"].Добавить("ДобавлениеИзменениеНематериальныхАктивов");
	ЗаменяемыеРоли["ДобавлениеИзменениеНематериальныхАктивов"].Добавить("ДобавлениеИзменениеТемЭтаповИсследованийИРазработок");
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

Процедура ДополнитьПользовательскиеПрофилиРолямиПоОбесценению() Экспорт
	
	ЗаменяемыеРоли = Новый Соответствие;
	
	// Все роли предоставляющие доступ к справочнику НематериальныеАктивы
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеНематериальныхАктивов", Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеНематериальныхАктивов",              Новый Массив);
	
	// Добавляем саму роль, чтобы не удалилась
	Для Каждого КлючИЗначение Из ЗаменяемыеРоли Цикл
		КлючИЗначение.Значение.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	ЗаменяемыеРоли["ЧтениеНематериальныхАктивов"             ].Добавить("ЧтениеНематериальныхАктивов");
	ЗаменяемыеРоли["ЧтениеНематериальныхАктивов"             ].Добавить("ЧтениеДанныхОбесцененияВНА");
	ЗаменяемыеРоли["ДобавлениеИзменениеНематериальныхАктивов"].Добавить("ДобавлениеИзменениеНематериальныхАктивов");
	ЗаменяемыеРоли["ДобавлениеИзменениеНематериальныхАктивов"].Добавить("ДобавлениеИзменениеДанныхОбесцененияВНА");
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
