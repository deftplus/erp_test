
#Область ПрограммныйИнтерфейс

#Область СчетаСубконто

// Процедура устанавливает субконто на счете. Если такое субконто на счете
// отсутствует, то ничего не делается.
//
// Параметры:
//		Счет - Счет, к которому относится субконто
//      Субконто - набор субконто
//		Номер или имя устанавливаемого субконто
//      Значение субконто - значение устанавливаемого субконто
//
Процедура УстановитьСубконто(Счет, Субконто, ИмяСубконто, ЗначениеСубконто) Экспорт

	Если НЕ ЗначениеЗаполнено(ИмяСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
	
	Если ТипЗнч(ИмяСубконто) = Тип("Число") Тогда

		Если ИмяСубконто > СвойстваСчета.КоличествоСубконто Тогда
			Возврат;
		КонецЕсли;

		ВидСубконто = СвойстваСчета["ВидСубконто" + ИмяСубконто+"Ссылка"];
		
	ИначеЕсли ТипЗнч(ИмяСубконто)=Тип("Строка") Тогда
		
		ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные[ИмяСубконто];

		Если СвойстваСчета.ВидСубконто1 <> ВидСубконто
			И СвойстваСчета.ВидСубконто2 <> ВидСубконто
			И СвойстваСчета.ВидСубконто3 <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;

	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ИмяСубконто.Метаданные())Тогда
		
		ВидСубконто = ИмяСубконто;
		
		Если СвойстваСчета.ВидСубконто1Ссылка <> ВидСубконто
			И СвойстваСчета.ВидСубконто2Ссылка <> ВидСубконто
			И СвойстваСчета.ВидСубконто3Ссылка <> ВидСубконто Тогда
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
		
	Если ВидСубконто.ТипЗначения.СодержитТип(ТипЗнч(ЗначениеСубконто)) Тогда
		
		Субконто.Вставить(ВидСубконто, ЗначениеСубконто);
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСоотвествиеСчетаБДПоСчетамПланаСчетов(СчетаПланаСчетов, Знач ПланСчетовБД = Неопределено) Экспорт

	Если ПланСчетовБД = Неопределено Тогда
		ПланСчетовБД = Справочники.ПланыСчетовБД.НайтиПоНаименованию("МСФО", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетаБД.СчетСсылка КАК СчетПланСчетов,
	|	МАКСИМУМ(СчетаБД.Ссылка) КАК СчетБД
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	НЕ СчетаБД.ПометкаУдаления
	|	И СчетаБД.СчетСсылка В(&СчетаПланаСчетов)
	|	И СчетаБД.Владелец = &ПланСчетовБД
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаБД.СчетСсылка";
	Запрос.УстановитьПараметр("ПланСчетовБД", ПланСчетовБД);
	Запрос.УстановитьПараметр("СчетаПланаСчетов", СчетаПланаСчетов);
	
	Результат = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.СчетПланСчетов, Выборка.СчетБД);
	КонецЦикла;	
	
	Возврат Результат;

КонецФункции

Функция ПолучитьСчетаПоВидуДвижений(ВидДвижения, ПланСчетовБД = Неопределено, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КорреспонденцииВидовДвиженийМСФО.СчетДт,
	|	КорреспонденцииВидовДвиженийМСФО.СчетКт
	|ИЗ
	|	РегистрСведений.КорреспонденцииВидовДвиженийМСФО КАК КорреспонденцииВидовДвиженийМСФО
	|ГДЕ
	|	КорреспонденцииВидовДвиженийМСФО.ПланСчетовБД = &ПланСчетовБД
	|	И КорреспонденцииВидовДвиженийМСФО.ВидДвижения = &ВидДвижения";
	
	Запрос.УстановитьПараметр("ПланСчетовБД", ?(ПланСчетовБД=Неопределено, Организация.ПланСчетов, ПланСчетовБД));
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвижения);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("СчетДт,СчетКт", Выборка.СчетДт, Выборка.СчетКт);
	Иначе
		Возврат Новый Структура("СчетДт,СчетКт");
	КонецЕсли;

КонецФункции

Функция ВсеТипыСвязанныхСубконто() Экспорт
		
	СвязанныеСубконто = Новый Соответствие;
	
	ТипыСубконто = Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов");
	ТипыСубконто = Новый ОписаниеТипов(ТипыСубконто, Документы.ТипВсеСсылки().Типы());
	СвязанныеСубконто.Вставить("Контрагент", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("ДоговорКонтрагента", ТипыСубконто);
	
	ТипыСубконто = Документы.ТипВсеСсылки();
	СвязанныеСубконто.Вставить("Номенклатура", ТипыСубконто);
	
	СвязанныеСубконто.Вставить("Организация", Новый ОписаниеТипов(Документы.ТипВсеСсылки(), 
		"СправочникСсылка.БанковскиеСчета,СправочникСсылка.ПодразделенияОрганизаций,
		|СправочникСсылка.ДоговорыКонтрагентов,СправочникСсылка.РегистрацииВНалоговомОргане"));
	
	Возврат СвязанныеСубконто;
	
КонецФункции

#КонецОбласти

#Область РегистрыУчета

Функция ОписаниеРегистра(РегистрУчета = Неопределено) Экспорт

	пс = Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД();		
	Если ЗначениеЗаполнено(РегистрУчета) Тогда
		Результат = Новый Структура("РегистрУчета, ПланСчетов, ЭтоМСФО, ВозможныеРБ", 
							РегистрУчета, РегистрУчета.ПланСчетов, РегистрУчета.ПланСчетов = пс);
	Иначе 
		
		Результат = Новый Структура("РегистрУчета, ПланСчетов, ЭтоМСФО, ВозможныеРБ", 
									Справочники.РегистрыБухгалтерииБД.ПолучитьПоПлануСчетовБД(пс), 
									пс,
									Истина
								);
		
	КонецЕсли;
	
	ВозможныеРБ = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Результат.РегистрУчета);
	Если Результат.РегистрУчета = пс Тогда
		ВозможныеРБ.Добавить(Справочники.РегистрыБухгалтерииБД.ПустаяСсылка());
	КонецЕсли;
	Результат.Вставить("ВозможныеРБ", ВозможныеРБ);
	
	Возврат Результат;
	
КонецФункции

Функция ПланыСчетовПоРегистрам() Экспорт

	Результат = Новый Соответствие;
	Выборка = Справочники.РегистрыБухгалтерииБД.Выбрать(, Справочники.ТипыБазДанных.ТекущаяИБ);
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.Ссылка, Выборка.ПланСчетов);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПреобразоватьВРСБУ(ТекстЗапроса, ИмяТаблицы) Экспорт
	
	т = ИмяТаблицы;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".ВидОперации", "ЗНАЧЕНИЕ(Справочник.ВидыОпераций.Трансляция)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".СчетДтИсточник", т + ".СчетДт");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".СчетКтИсточник", т + ".СчетКт");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".НаправлениеДеятельностиДт", "NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".НаправлениеДеятельностиКт", "NULL");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".НаправлениеДеятельности", "NULL");

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".СуммаВВалютеОтчетности", т + ".Сумма");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".СуммаВВалютеУчета",		т + ".Сумма");//дб перед СуммаВВалюте
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, т + ".СуммаВВалюте", 			т + ".ВалютнаяСумма");
	
	//ПланВидовХарактеристик.ВидыСубконтоХозрасчетные
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "РегистрБухгалтерии.МСФО", "РегистрБухгалтерии.Хозрасчетный");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Сценарий = &Сценарий", "ИСТИНА");
	 
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПреобразоватьПолучениеРСБУ(ТекстЗапроса) Экспорт
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК СуммаВВалютеУчета",		"КАК Сумма");//дб перед СуммаВВалюте
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК СуммаВВалюте", 			"КАК ВалютнаяСумма");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК СуммаВВалютеОтчетности", 	"КАК СуммаНУ");
	
	//ПланВидовХарактеристик.ВидыСубконтоХозрасчетные
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область УчетнаяПолитика

Функция ОсновныеРеквизитыУП(Организация = Неопределено, ДатаУП = Неопределено, Сценарий = Неопределено) Экспорт

	ИменаУП = "ФормироватьПроводкиМСФО, ПланСчетовМСФО, ФункциональнаяВалюта, ВалютаПредоставленияОтчетности";
	Возврат ЗначенияПоОрганизацииУП(ЗначенияУП(ПутиРеквизитовУП(ИменаУП), Организация, ДатаУП, Сценарий));

КонецФункции

Функция РеквизитыДляФормыУП(Организация = Неопределено, ДатаУП = Неопределено, Сценарий = Неопределено) Экспорт
	
	ИменаУП = "ФормироватьПроводкиМСФО, ПланСчетовМСФО, ФункциональнаяВалюта, ПланСчетов, ШаблонТрансляции";
	Возврат ЗначенияПоОрганизацииУП(ЗначенияУП(ПутиРеквизитовУП(ИменаУП), Организация, ДатаУП, Сценарий));

КонецФункции

Функция ЗначенияПоОрганизацииУП(ТаблицаЗначенияУП) Экспорт

	Если ТаблицаЗначенияУП.Количество() Тогда
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаЗначенияУП[0]);
	КонецЕсли;
	
	ОбязательныеИменаУП = "ФормироватьПроводкиМСФО, ПланСчетовМСФО, ФункциональнаяВалюта, ВалютаПредоставленияОтчетности";
	ФВ = Константы.ВалютаУправленческогоУчета.Получить();
	ПоУмолчаниюУП = Новый Структура(ОбязательныеИменаУП, Истина, ПланСчетовУП(Неопределено), ФВ, ФВ);

	ЗаполнитьЗначенияСвойств(ТаблицаЗначенияУП.Добавить(), ПоУмолчаниюУП);
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТаблицаЗначенияУП[0]);

КонецФункции

Функция ПутиРеквизитовУП(ИменаРеквизитовУП) Экспорт
	
	ИменаУП = Новый Структура(ИменаРеквизитовУП);
	ПутиУП = Новый Массив;

	Если ИменаУП.Свойство("ПланСчетов") Тогда
	    ПутиУП.Добавить("УчетнаяПолитика.ШаблонТрансляции.ПланСчетовИсточник КАК ПланСчетов");
	КонецЕсли;

	Если ИменаУП.Свойство("ШаблонТрансляции") Тогда
	    ПутиУП.Добавить("УчетнаяПолитика.ШаблонТрансляции КАК ШаблонТрансляции");
	КонецЕсли;
	
	Если ИменаУП.Свойство("ПланСчетовМСФО") Тогда
	    ПутиУП.Добавить("УчетнаяПолитика.ПланСчетовУчета КАК ПланСчетовМСФО");
	КонецЕсли;

	Если ИменаУП.Свойство("ФункциональнаяВалюта") Тогда
		ПутиУП.Добавить("УчетнаяПолитика.ВалютаУчета КАК ФункциональнаяВалюта");
	КонецЕсли;

	Если ИменаУП.Свойство("ВалютаПредоставленияОтчетности") Тогда
		ПутиУП.Добавить("УчетнаяПолитика.ВалютаУчетаДоп КАК ВалютаПредоставленияОтчетности");
	КонецЕсли;

	Если ИменаУП.Свойство("ФормироватьПроводкиМСФО") Тогда
		ПутиУП.Добавить("ЕстьNULL(УчетнаяПолитика.ШаблонТрансляции.НаправлениеТрансляции, НЕОПРЕДЕЛЕНО)
						|	= ЗНАЧЕНИЕ(Перечисление.НаправленияТрансляцииДанных.РегистрБухгалтерииВРегистрБухгалтерии)
						|	КАК ФормироватьПроводкиМСФО");
	КонецЕсли;
	
	Если ИменаУП.Свойство("ЭлиминирующаяОрганизация") Тогда
		ПутиУП.Добавить("ЕстьNULL(Организация.ЭлиминирующаяОрганизация, ЛОЖЬ) КАК ЭлиминирующаяОрганизация");
	КонецЕсли;
	
	Если ИменаУП.Свойство("СтавкаОтложенногоНалога") Тогда
		ПутиУП.Добавить("ЕстьNULL(УчетнаяПолитика.СтавкаОтложенногоНалога, 0) КАК СтавкаОтложенногоНалога");
	КонецЕсли; 
	
	Если ИменаУП.Свойство("ИсточникДляЧистойЦеныПродажиЗапасов") Тогда
		ПутиУП.Добавить("УчетнаяПолитика.ИсточникДляЧистойЦеныПродажиЗапасов КАК ИсточникДляЧистойЦеныПродажиЗапасов");
	КонецЕсли;
	
	Если ИменаУП.Свойство("ПорогСущественностиВНА") Тогда
		ПутиУП.Добавить("УчетнаяПолитика.ПорогСущественностиВНА КАК ПорогСущественностиВНА");
	КонецЕсли;
	
	Если ИменаУП.Свойство("ВидОтчетаОСВ") Тогда
	    ПутиУП.Добавить("УчетнаяПолитика.ПланСчетовУчета.ВидОтчетаОСВ КАК ВидОтчетаОСВ");
	КонецЕсли; 
	
	Если ИменаУП.Свойство("УчетнаяПолитика") Тогда
	    ПутиУП.Добавить("УчетнаяПолитика КАК УчетнаяПолитика");
	КонецЕсли;
	
	Возврат СтрСоединить(ПутиУП, "," + Символы.ПС);	
	
КонецФункции

Функция ЗначенияУП(ИменаРеквизитовУП, Организация = Неопределено, ДатаУП = Неопределено, Сценарий = Неопределено) Экспорт
	
	Возврат Документы.УчетнаяПолитикаМСФО.ЗначенияУП(ИменаРеквизитовУП, Организация, ДатаУП, Сценарий);
	
КонецФункции

Функция ЗначениеУП(РеквизитУП, Организация = Неопределено, ДатаУП = Неопределено, Сценарий = Неопределено) Экспорт
	
	ИменаРеквизитовУП = СтрШаблон("УчетнаяПолитика.%1 КАК ЗначениеУП", РеквизитУП);
	Таб = Документы.УчетнаяПолитикаМСФО.ЗначенияУП(ИменаРеквизитовУП, Организация, ДатаУП, Сценарий);
	
	Если Таб.Количество() Тогда
		Возврат Таб[0].ЗначениеУП;
	Иначе		
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Функция ПланСчетовУП(Контекст) Экспорт

	Возврат Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("МСФО");

КонецФункции

Функция ЗаписатьУПМСФО(УчетнаяПолитика, Организация, Сценарий, Дата, ВключитьБизнесЛогику = Истина) Экспорт

	Отбор = Новый Структура("Сценарий, УчетнаяПолитика, Период, Регистратор, Активность", 
							Сценарий, УчетнаяПолитика, НачалоМесяца(Дата), УчетнаяПолитика, Истина);
							
	ОрганизацииДляУП = ОрганизацииДляУП(Организация);
							
	нз = РегистрыСведений.УчетныеПолитикиМСФО.СоздатьНаборЗаписей();
	
	Для каждого тОрганизация Из ОрганизацииДляУП Цикл
	
		нз.Отбор.Период.Установить(Отбор.Период);
		нз.Отбор.Сценарий.Установить(Отбор.Сценарий);
		нз.Отбор.Организация.Установить(тОрганизация);
		
		нз.Прочитать();
		Если нз.Количество() Тогда
		    ЗаписьНЗ = нз.Получить(0);			 
		Иначе
			ЗаписьНЗ = нз.Добавить();
			ЗаписьНЗ.Организация = тОрганизация;
		КонецЕсли;                   
		
		ЗаполнитьЗначенияСвойств(ЗаписьНЗ, Отбор);
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(нз,,,ВключитьБизнесЛогику);
	
	КонецЦикла;
			
КонецФункции

Функция ОрганизацииДляУП(Организация)

	Если Не ЗначениеЗаполнено(Организация) Тогда
		
		//Запрос = Новый Запрос(
		//"ВЫБРАТЬ
		//|	т.Ссылка КАК Ссылка
		//|ИЗ
		//|	Справочник.Организации КАК т
		//|ГДЕ
		//|	т.ИспользоватьВРегламентированномУчете
		//|	ИЛИ т.ЭлиминирующаяОрганизация
		//|	ИЛИ т.ИностранныйНалоговыйРезидент");
		//Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.Организации.ПустаяСсылка());
		
	ИначеЕсли ТипЗнч(Организация) = Тип("СправочникСсылка.Организации") Тогда
		Возврат ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация);
	Иначе	
		Возврат Организация.ВыгрузитьЗначения();
	КонецЕсли;	

КонецФункции

#КонецОбласти

#Область КэшированиеЗначений

Функция ПолучитьРеквизитыЗначений(СоответствиеЗначениеРеквизиты) Экспорт

	Результат = Новый Соответствие;
	
	Для каждого ЭлементЗначение Из СоответствиеЗначениеРеквизиты Цикл		
		
		РеквизитыЗначения = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ЭлементЗначение.Ключ, ЭлементЗначение.Значение);
		Результат.Вставить(ЭлементЗначение.Ключ, РеквизитыЗначения);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

// Функция возвращает фиксированную структуру содержащую все значения перечисления с
// с переданным именем.
//
// Параметры
//  ИмяПеречисления - Имя перечисления, для которого требуется получить структуру со значениями.
//
// Возвращаемое значение:
//   ФиксированнаяСтруктура - ФиксированнаяСтруктура содержащая значения перечисления. 
//   	Ключ - имя значения, Значение - значение перечисления (ссылка).
//
Функция ПолучитьСтруктуруСоЗначениямиПеречисления(Знач ИмяПеречисления) Экспорт
	
	Результат = Новый Структура;
	Для каждого МетаданныеЗначения Из Метаданные.Перечисления[ИмяПеречисления].ЗначенияПеречисления Цикл
		Результат.Вставить(МетаданныеЗначения.Имя, Перечисления[ИмяПеречисления][МетаданныеЗначения.Имя]);
	КонецЦикла;
	
	Возврат Новый ФиксированнаяСтруктура(Результат);
	
КонецФункции // ПолучитьСтруктуруСоЗначениямиПеречисления()

Функция ПолучитьТипРеквизитаТЧ(Ссылка, ИмяТЧ, ИмяРеквизита) Экспорт
	
	РеквизитТЧ = Ссылка.Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты.Найти(ИмяРеквизита);
	Если РеквизитТЧ = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат РеквизитТЧ.Тип;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ОбработкаТабличныхЧастей

Функция ПолучитьРеквизитыСсылок(МассивСсылок, РеквизитыСтрокой = Неопределено, ВернутьСоотвествие = Ложь) Экспорт

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	т.Ссылка, %РеквизитыСтрокой%
	|ИЗ
	|	%ПолноеИмяМетаданных% КАК т
	|ГДЕ
	|	т.Ссылка В (&Ссылка)";
	
	Если МассивСсылок.Количество() > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ПолноеИмяМетаданных%", МассивСсылок[0].Метаданные().ПолноеИмя());
	Иначе
		Возврат ?(ВернутьСоотвествие, Новый Соответствие, Новый ТаблицаЗначений);	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%РеквизитыСтрокой%", РеквизитыСтрокой);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	
	Если ВернутьСоотвествие Тогда
		
		Результат = Новый Соответствие;
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		ИсточникЗаполнения = Новый Структура;
		Для каждого РеквизитИсточник Из РезультатЗапроса.Колонки Цикл
			Если РеквизитИсточник.Имя <> "Ссылка" Тогда
				ИсточникЗаполнения.Вставить(РеквизитИсточник.Имя, Неопределено);			
			КонецЕсли;			
		КонецЦикла;
		
		Пока Выборка.Следующий() Цикл
			
			ЗаполнитьЗначенияСвойств(ИсточникЗаполнения, Выборка);
			Результат.Вставить(Выборка.Ссылка, ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(ИсточникЗаполнения)); 	
			
		КонецЦикла;
		
		Возврат Результат;
	
	Иначе 
		
		Возврат Запрос.Выполнить().Выгрузить();	
	
	КонецЕсли;

КонецФункции

Функция ПолучитьКэшДляРасчетаКоэффициентовРезервов(КонецПериода, Контрагенты = Неопределено, Договоры = Неопределено) Экспорт

	Запрос = Новый Запрос(ТекстЗапросаТаблицаКоэффициентов());
	
	Запрос.УстановитьПараметр("КонецПериода", 	КонецПериода);
	Запрос.УстановитьПараметр("Контрагенты", 	Контрагенты);
	Запрос.УстановитьПараметр("Договоры", 		Договоры);
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	ЧислоЗапросов = РезультатПакета.Количество()-1;	                                            
	Кэш = Новый Структура("ПараметрыРасчета,Вычисляемые,Невычисляемые", 
								РезультатПакета[ЧислоЗапросов].Выгрузить(), 
								РезультатПакета[ЧислоЗапросов-1].Выгрузить(),
								РезультатПакета[ЧислоЗапросов-2].Выгрузить());
								
	Кэш.Невычисляемые.Индексы.Добавить("Объект,ПараметрРасчета");
	Кэш.Вычисляемые.Индексы.Добавить("ПараметрРасчета");
	
	Возврат Кэш;

КонецФункции

Функция ТекстЗапросаТаблицаКоэффициентов()

	Возврат
	"ВЫБРАТЬ
	|	ПараметрыРасчетаРезервов.Ссылка КАК ПараметрРасчетаРезервов,
	|	ВЫБОР
	|		КОГДА ПараметрыРасчетаРезервов.ТипПараметраРасчетаРезервов = ЗНАЧЕНИЕ(Перечисление.ТипыПараметровРасчетаРезерва.Вычисляемый)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Рассчитывается,
	|	ВЫБОР
	|		КОГДА ПараметрыРасчетаРезервов.Ссылка = ЗНАЧЕНИЕ(Справочник.ПараметрыРасчетаРезервовПоДЗ.КлассНадежностиКонтрагента)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаКонтрагента,
	|	ВЫБОР
	|		КОГДА ПараметрыРасчетаРезервов.Ссылка = ЗНАЧЕНИЕ(Справочник.ПараметрыРасчетаРезервовПоДЗ.КоэффициентСрокаПогашения)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КоэффициентСрокПогашения,
	|	ПараметрыРасчетаРезервов.Алгоритм,
	|	ПараметрыРасчетаРезервов.ТипПараметраРасчетаРезервов
	|ПОМЕСТИТЬ втПараметрыРасчетаРезервов
	|ИЗ
	|	Справочник.ПараметрыРасчетаРезервовПоДЗ КАК ПараметрыРасчетаРезервов
	|ГДЕ
	|	ПараметрыРасчетаРезервов.Используется
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПризнакиФиксированные.Объект КАК Объект,
	|	ПризнакиФиксированные.ПараметрРасчетаРезервов КАК ПараметрРасчета,
	|	ПризнакиФиксированные.ГруппаПризнака КАК ГруппаПараметраРасчета,
	|	ПризнакиФиксированные.ГруппаПризнака.Коэффициент КАК РасчетноеЗначение
	|ИЗ
	|	РегистрСведений.ПризнакиЗадолженности.СрезПоследних(
	|			&КонецПериода,
	|			(Объект В (&Договоры)
	|				ИЛИ Объект В (&Контрагенты))
	|				И ПараметрРасчетаРезервов В
	|					(ВЫБРАТЬ
	|						т.ПараметрРасчетаРезервов
	|					ИЗ
	|						втПараметрыРасчетаРезервов КАК т
	|					ГДЕ
	|						НЕ т.Рассчитывается)) КАК ПризнакиФиксированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрыРасчетаРезервов.ПараметрРасчетаРезервов КАК ПараметрРасчета,
	|	ГруппыПараметровРасчетаРезервов.ЗначениеНач,
	|	ГруппыПараметровРасчетаРезервов.ЗначениеКон,
	|	ГруппыПараметровРасчетаРезервов.Коэффициент КАК РасчетноеЗначение,
	|	ГруппыПараметровРасчетаРезервов.Ссылка КАК ГруппаПараметраРасчета
	|ИЗ
	|	втПараметрыРасчетаРезервов КАК втПараметрыРасчетаРезервов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыПараметровРасчетаРезервов КАК ГруппыПараметровРасчетаРезервов
	|		ПО втПараметрыРасчетаРезервов.ПараметрРасчетаРезервов = ГруппыПараметровРасчетаРезервов.Владелец
	|ГДЕ
	|	втПараметрыРасчетаРезервов.Рассчитывается
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрыРасчетаРезервов.ПараметрРасчетаРезервов КАК ПараметрРасчета,
	|	втПараметрыРасчетаРезервов.ТипПараметраРасчетаРезервов,
	|	втПараметрыРасчетаРезервов.Рассчитывается,
	|	втПараметрыРасчетаРезервов.ГруппаКонтрагента,
	|	втПараметрыРасчетаРезервов.КоэффициентСрокПогашения,
	|	втПараметрыРасчетаРезервов.Алгоритм
	|ИЗ
	|	втПараметрыРасчетаРезервов КАК втПараметрыРасчетаРезервов";

КонецФункции

Функция ПолучитьКэшируемыеЗначения_РезервыМПЗ(СтруктураПолученияЗначений, СтруктураДействий) Экспорт
	
	Перем СписокНоменклатуры, КонтекстДокумента, ШаблонТрансляции, ТекущийПериодОтчета;
	
	КэшированныеЗначения = Новый Структура;
	
	СпособыОценкиРезервовПоЗапасамМСФО = МСФОВызовСервераУХ.ПолучитьСтруктуруСоЗначениямиПеречисления("СпособыОценкиРезервовПоЗапасамМСФО");
	КэшированныеЗначения.Вставить("СпособыОценкиРезервовПоЗапасамМСФО", СпособыОценкиРезервовПоЗапасамМСФО);
	
	Если СтруктураПолученияЗначений.Свойство("СписокНоменклатуры", СписокНоменклатуры) Тогда
		
		РеквизитыСтрокой = "ПараметрыРасчетаРезерваМСФО.НормативнаяОборачиваемость КАК НормативнаяОборачиваемость,
						|ПараметрыРасчетаРезерваМСФО.СпособОценкиРезерва КАК СпособОценкиРезерва";
						
		КэшированныеЗначения.Вставить("РеквизитыНоменклатуры", 
										ПолучитьРеквизитыСсылок(СписокНоменклатуры, РеквизитыСтрокой, Истина));
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаПоВидуДвижений")	Тогда 
		КэшированныеЗначения.Вставить("ПланСчетовБДМСФО", Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("МСФО"));
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЧистуюЦенуПродажи", КонтекстДокумента) Тогда 
		
		ИсточникДляЧистойЦеныПродажиЗапасов = ЗначениеУП("ИсточникДляЧистойЦеныПродажиЗапасов", 
			КонтекстДокумента.Организация, КонтекстДокумента.Дата, КонтекстДокумента.Сценарий);
		
		Запрос = Новый Запрос(ВстраиваниеУХ.ТекстЗапроса_ЦеныНоменклатуры());
		Запрос.УстановитьПараметр("Дата", 			КонтекстДокумента.Дата);
		Запрос.УстановитьПараметр("Организация", 	КонтекстДокумента.Организация);
		Запрос.УстановитьПараметр("Номенклатура", 	СтруктураПолученияЗначений.СписокНоменклатуры);
		Запрос.УстановитьПараметр("ИсточникДляЧистойЦеныПродажиЗапасов", ИсточникДляЧистойЦеныПродажиЗапасов);
		
		КэшированныеЗначения.Вставить("ЦеныНоменклатуры",
									ПолучитьКэшИзРезультатаЗапроса(Запрос.Выполнить(), "Номенклатура", "Цена")
								);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетУчетаМСФО", ШаблонТрансляции) Тогда
		
		Запрос = Новый Запрос(МСФОВНАВызовСервераУХ.ПолучитьТекстЗапросаСчетаТрансляции());
		Запрос.УстановитьПараметр("ШаблонТрансляции", ШаблонТрансляции);
		Запрос.УстановитьПараметр("СчетИсточник", СтруктураПолученияЗначений.CчетаЗапасовНСБУ);
		
		КэшированныеЗначения.Вставить("СчетаТрансляции",
									ПолучитьКэшИзРезультатаЗапроса(Запрос.Выполнить(), "СчетИсточник", "СчетПриемник")
								);
		
	КонецЕсли;							
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетРезерваМСФО") Тогда
		
		Запрос = Новый Запрос(ПолучитьТекстЗапросаСчетаРезервовМПЗ());
		
		КэшированныеЗначения.Вставить("СчетаРезерва",
									ПолучитьКэшИзРезультатаЗапроса(Запрос.Выполнить(), "СчетЗапасов", "СчетРезерва")
								);

	КонецЕсли;
						
	Если СтруктураДействий.Свойство("РассчитатьВычисляемыеПоля", ТекущийПериодОтчета) Тогда
		
		РеквизитыПериодаОтчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийПериодОтчета, "ДатаОкончания,ДатаНачала");
		КэшированныеЗначения.Вставить("ЧислоДнейПериода", ОбщегоНазначенияКлиентСерверУХ.РазностьДатВДнях(РеквизитыПериодаОтчета.ДатаОкончания, РеквизитыПериодаОтчета.ДатаНачала));
				
	КонецЕсли;
	
	Возврат КэшированныеЗначения; 

КонецФункции

Функция ПолучитьСчетаЗадолженности(СчетЗадолженности) Экспорт
	
	Отбор = Новый Структура("СчетЗадолженности, ПланСчетовБД", СчетЗадолженности, СчетЗадолженности.Владелец);
	Возврат РегистрыСведений.СчетаУчетаЗадолженностиИРезервов.Получить(Отбор);
	
КонецФункции

Функция ПолучитьКэшируемыеЗначения_РезервыДЗ(Знач СтруктураДействий, Знач Контекст = Неопределено, РеквизитыДоговораСтрокой = "",
												Договоры = Неопределено, Контрагенты = Неопределено) Экспорт

	КэшированныеЗначения = Новый Структура;	
		
	Если Контекст <> Неопределено Тогда
		
		ДанныеКурсов = Новый Структура;
		ДанныеКурсов.Вставить("ФункциональнаяВалюта", ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Контекст.Организация,"ФункциональнаяВалюта"));
		ДанныеКурсов.Вставить("ДатаКурсов", КонецДня(ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Контекст.ПериодОтчета,"ДатаОкончания")));
		
		КэшированныеЗначения.Вставить("ДанныеКурсов", ДанныеКурсов);
		
		РеквизитыДоговораСтрокой = ?(РеквизитыДоговораСтрокой="", "", РеквизитыДоговораСтрокой + ",") + "ВалютаВзаиморасчетов";
		
	КонецЕсли;
	
	Если РеквизитыДоговораСтрокой <> "" Тогда
	
		РеквизитыДоговоров = МСФОВызовСервераУХ.ПолучитьРеквизитыСсылок(Договоры, РеквизитыДоговораСтрокой, Истина);
		КэшированныеЗначения.Вставить("РеквизитыДоговоров", РеквизитыДоговоров);
		
		Если КэшированныеЗначения.Свойство("ДанныеКурсов") Тогда
			
			ИспользуемыеВалюты = Новый СписокЗначений;
			ИспользуемыеВалюты.Добавить(КэшированныеЗначения.ДанныеКурсов.ФункциональнаяВалюта);
			Для каждого СтрокаДоговор Из РеквизитыДоговоров Цикл
				ИспользуемыеВалюты.Добавить(СтрокаДоговор.Значение.ВалютаВзаиморасчетов);
			КонецЦикла;
			
			КэшКурсов = ПолучитьКэшКурсовВалют(ИспользуемыеВалюты, КэшированныеЗначения.ДанныеКурсов.ДатаКурсов);
			КэшированныеЗначения.ДанныеКурсов.Вставить("КэшКурсов", КэшКурсов);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьКоэффициентыРезерва") Тогда
		
		ТаблицыДляКоэффициентов = МСФОВызовСервераУХ.ПолучитьКэшДляРасчетаКоэффициентовРезервов(
									СтруктураДействий.ЗаполнитьКоэффициентыРезерва.КонецПериода, Контрагенты, Договоры);
		
		КэшированныеЗначения.Вставить("ТаблицыДляКоэффициентов", ТаблицыДляКоэффициентов);		
		КэшированныеЗначения.Вставить("РасчетныеЗначенияПараметров", Новый Массив);
		
	КонецЕсли;	
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаПоВидуДвижений")	Тогда 
		КэшированныеЗначения.Вставить("ПланСчетовБДМСФО", Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("МСФО"));
	КонецЕсли;
	
	Возврат КэшированныеЗначения;	

КонецФункции

Функция ПолучитьКэшируемыеЗначения_Инвестиции(Знач СтруктураДействий, Знач Организации = Неопределено) Экспорт

	Перем Контекст, РезультатЗапроса;
	
	КэшированныеЗначения = Новый Структура;	
	
	Если СтруктураДействий.Свойство("РассчитатьДолюВФинансовомРезультате", Контекст) Тогда
		КэшированныеЗначения.Вставить("СчетНРПОтчетногоПериода", "УчетМСФОПовтИспУХ.ПолучитьСчетНРПОтчетногоПериода()");//**
	КонецЕсли;
	
	Запрос = Новый Запрос;
	НомераЗапросов = Новый Структура;
	ТекстЗапроса = "";
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоИЗРегистра", Контекст) Тогда
		
		Отбор = Новый Соответствие;
		Отбор.Вставить("Сценарий", 						Контекст.Сценарий);
		Отбор.Вставить("КонсолидирующаяОрганизация",	Контекст.КонсолидирующаяОрганизация);
		Отбор.Вставить("ИндивидуальнаяОрганизация",		Организации);
		Отбор.Вставить("ПериодОтчета", 					Контекст.ПериодОтчета);
				
		ПоляВыборки = Новый Соответствие;
		ПоляВыборки.Вставить("ОтношениеКГруппе", 	"ОтношениеКГруппе");
		ПоляВыборки.Вставить("ПолнаяДоляВладения", 	"ЭффективнаяДоляРасчет");
				
		ТабРегламент = УправлениеРабочимиПроцессамиУХ.ПолучитьДанныеРегламента(Отбор, ПоляВыборки);
					
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("КэшироватьВидыОтношенийКГруппе", Контекст) Тогда
	
		ТекстЗапроса = ТекстЗапроса + ?(НомераЗапросов.Количество()=0, "", ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	МАКСИМУМ(ГруппыКонтрагентов.Ссылка) КАК Группа,
		|	ГруппыКонтрагентов.ВидОтношенияКГруппе
		|ИЗ
		|	Справочник.ГруппыКонтрагентов КАК ГруппыКонтрагентов
		|
		|СГРУППИРОВАТЬ ПО
		|	ГруппыКонтрагентов.ВидОтношенияКГруппе";
		
		НомераЗапросов.Вставить("ОтношенияКГруппе", НомераЗапросов.Количество());
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетДляМДУ") Тогда
	
		ТекстЗапроса = ТекстЗапроса + ?(НомераЗапросов.Количество()=0, "", ";" + Символы.ПС) +
		"ВЫБРАТЬ
		|	СчетаУчетаЧАдляАПСП.СчетЧА,
		|	СчетаУчетаЧАдляАПСП.СчетДляМДУ,
		|	СчетаУчетаЧАдляАПСП.Организация
		|ИЗ
		|	РегистрСведений.СчетаУчетаЧАдляАПСП КАК СчетаУчетаЧАдляАПСП
		|ГДЕ
		|	СчетаУчетаЧАдляАПСП.Организация В(&Организации)";
		
		Запрос.УстановитьПараметр("Организации", Организации);
		
		НомераЗапросов.Вставить("СчетаДляМДУ", НомераЗапросов.Количество());		
		
	КонецЕсли;
	
	Если ТекстЗапроса <> Неопределено Тогда
		Запрос.Текст = ТекстЗапроса;
		РезультатЗапроса = Запрос.ВыполнитьПакет();	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоИЗРегистра") Тогда
		
		КэшированныеЗначения.Вставить("ПоказателиНаНачало", Новый Соответствие);
		
		Для каждого СтрокаТаб Из ТабРегламент Цикл
			
			ПоказателиНаНачало = Новый Структура("ОтношениеКГруппе, ПолнаяДоляВладения", 
													СтрокаТаб.ОтношениеКГруппе, СтрокаТаб.ПолнаяДоляВладения);
			КэшированныеЗначения.ПоказателиНаНачало.Вставить(СтрокаТаб.ИндивидуальнаяОрганизация, ПоказателиНаНачало);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("КэшироватьВидыОтношенийКГруппе", Контекст) Тогда
		
		ТаблицаГруппыПоУмолчанию = РезультатЗапроса[НомераЗапросов.ОтношенияКГруппе].Выгрузить();
		ТаблицаГруппыПоУмолчанию.Индексы.Добавить("ВидОтношенияКГруппе");		
		ОтношенияКГруппе = Новый Структура;
		
		Для каждого ВидОтношения Из ПолучитьСтруктуруСоЗначениямиПеречисления("ВидыОтношенийКГруппе") Цикл
			СтрокаГруппа = ТаблицаГруппыПоУмолчанию.Найти(ВидОтношения.Значение, "ВидОтношенияКГруппе");
			ОтношенияКГруппе.Вставить(ВидОтношения.Ключ, ?(СтрокаГруппа = Неопределено, Неопределено, СтрокаГруппа.Группа));		
		КонецЦикла;
		
		КэшированныеЗначения.Вставить("ОтношенияКГруппе", ОтношенияКГруппе);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетДляМДУ") Тогда
		
		СчетаДляМДУ = Новый Соответствие;
		Для каждого СтрокаСчетМДУ Из РезультатЗапроса[НомераЗапросов.СчетаДляМДУ].Выгрузить() Цикл
			Если СчетаДляМДУ.Получить(СтрокаСчетМДУ.Организация) = Неопределено Тогда 
				СчетаДляМДУ.Вставить(СтрокаСчетМДУ.Организация, Новый Соответствие);
			КонецЕсли;
			СчетаДляМДУ[СтрокаСчетМДУ.Организация].Вставить(СтрокаСчетМДУ.СчетЧА, СтрокаСчетМДУ.СчетДляМДУ);
		КонецЦикла;
		
		КэшированныеЗначения.Вставить("СчетаДляМДУ", СчетаДляМДУ);
		
	КонецЕсли;
	
	Возврат КэшированныеЗначения;	

КонецФункции

Функция ПолучитьКэшируемыеЗначения_ВНА(Знач СтруктураПолученияКэша, Знач СтруктураДействий) Экспорт

	Перем Контекст;
	Перем АлгоритмРСБУ;
	
	Результат = Новый Структура;
	НомераТаблиц = Новый Структура;	
	Запрос = Новый Запрос;	
	
	Если СтруктураПолученияКэша.Свойство("СчетаНСБУ", Контекст) И (Контекст.Количество() > 0) Тогда
		
		Запрос.Текст = ?(Запрос.Текст="","", Запрос.Текст + "; ") 
					+ МСФОВНАВызовСервераУХ.ПолучитьТекстЗапросаСчетаТрансляции(НомераТаблиц);		
		Запрос.УстановитьПараметр("СчетИсточник", Контекст);
		Запрос.УстановитьПараметр("ШаблонТрансляции", СтруктураПолученияКэша.ШаблонТрансляции);
	
	КонецЕсли;
	
	Если СтруктураПолученияКэша.Свойство("ЗаполнитьПараметрыВНА", Контекст) Тогда
		
		ГраницаДоДокумента = МСФОВызовСервераУХ.ПолучитьГраницуДоДокумента(Контекст.ДатаДокумента, Контекст.Ссылка);
		
		//АлгоритмНСБУ: 
		//НЕОПРЕДЕЛЕНО - будет определен из организации. Используется для расчета амортизации
		//ИСТИНА - Параметры предыдущего месяца(СтоимостьДляВычисленияАмортизации), 
		//ЛОЖЬ - параметры текущего месяца(текущая стоимость ВНА). Используется для заполнения параметров при заполнении по ВНА(чтобы учесть несколько событий внутри месяца при АлгоритмРСБУ=ИСТИНА)
		Контекст.Свойство("АлгоритмРСБУ", АлгоритмРСБУ);
		
		РеквизитыВНА = МСФОВНАВызовСервераУХ.ПолучитьРеквизитыВНА(
								ГраницаДоДокумента, 
								СтруктураПолученияКэша.ВНА, 
								Контекст.Организация,
								Контекст.ВидыУчета, 
								Контекст.Сценарий,
								Контекст.ПоляВыбора,
								АлгоритмРСБУ
							);
		
		Результат.Вставить("ЗаполнитьПараметрыВНА", РеквизитыВНА);
			
	КонецЕсли;
		
	Если Запрос.Текст = "" Тогда
		Возврат Результат;
	КонецЕсли;
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
			
	Если СтруктураПолученияКэша.Свойство("СчетаНСБУ", Контекст) Тогда
		СчетаТрансляции = ПолучитьКэшИзРезультатаЗапроса(РезультатЗапроса[НомераТаблиц.СчетаТрансляции], "СчетИсточник", "СчетПриемник");
		Результат.Вставить("СчетаТрансляции", СчетаТрансляции);
	КонецЕсли;
	
	Если СтруктураПолученияКэша.Свойство("СчетаНеклассифицированные", Контекст) Тогда
	
		СчетаТрансляции = Результат.СчетаТрансляции;		
		ТипыИсточникВНА = Метаданные.ОпределяемыеТипы.ИсточникВНА.Тип.Типы();
		Результат.Вставить("СчетаНеклассифицированные", Новый Соответствие);
		
		Для каждого СчетИсточник Из Контекст Цикл
			
			СчетПриемник = СчетаТрансляции.Получить(СчетИсточник);
			Если СчетПриемник = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СвойстваПриемника = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СчетПриемник);
			Если СвойстваПриемника = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Для НомерСубконто = 1 По СвойстваПриемника.КоличествоСубконто Цикл
				ТипыСубконто = СвойстваПриемника["ВидСубконто" + НомерСубконто + "ТипЗначения"].Типы();

				Если (ТипыСубконто.Количество() > 0) 
					И (ТипыИсточникВНА.Найти(ТипыСубконто[0]) <> Неопределено) Тогда
					
					Результат.СчетаНеклассифицированные.Вставить(СчетИсточник, СчетПриемник);
					Прервать;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;		

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКэшИзРезультатаЗапроса(РезультатЗапроса, КолонкаКэширования, КолонкаЗначение = Неопределено)

	Результат = Новый Соответствие;
	
	Для каждого СтрокаТаб Из РезультатЗапроса.Выгрузить() Цикл
		Если КолонкаЗначение = Неопределено Тогда
			Результат.Вставить(СтрокаТаб[КолонкаКэширования], СтрокаТаб);
		Иначе	
			Результат.Вставить(СтрокаТаб[КолонкаКэширования], СтрокаТаб[КолонкаЗначение]);
		КонецЕсли;		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции			

Функция ПолучитьТекстЗапросаСчетаРезервовМПЗ(НомераТаблиц = Неопределено)

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("СчетаРезервовМПЗ", НомераТаблиц.Количество());
	КонецЕсли;

	Возврат
	"ВЫБРАТЬ
	|	т.СчетЗапасов,
	|	т.ПараметрыРасчетаРезерва,
	|	т.СчетРезерва
	|ИЗ
	|	РегистрСведений.СчетаУчетаЗапасовИРезервовМСФО КАК т";

КонецФункции

Функция ПолучитьПараметрыУчетаВНА(Дата, Организация, ВНА, ВидУчета, Сценарий = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.ГруппаВНА,
	|	т.СчетУчетаПервоначальнойСтоимости,
	|	т.СчетУчетаПервоначальнойСтоимостиСубконто2,
	|	т.СчетУчетаПервоначальнойСтоимостиСубконто3,
	|	т.СчетУчетаПервоначальнойСтоимостиСубконто1
	|ИЗ
	|	РегистрСведений.ПараметрыУчетаВНАМСФО.СрезПоследних(
	|			&Дата,
	|			ВНА = &ВНА
	|				И ВидУчета = &ВидУчета
	|				И Сценарий = &Сценарий
	|				И Организация = &Организация) КАК т");
	
	Запрос.УстановитьПараметр("Дата", 			Дата);
	Запрос.УстановитьПараметр("ВНА", 			ВНА);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВидУчета", 		ВидУчета);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	
	РезультатЗапроса  = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл	
		Результат.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);	    
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыФИ(Дата, Организация, ФИ, Сценарий = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сведения.ФИ КАК ФИ,
	|	Сведения.ПараметрыУчетаФИ КАК ПараметрыУчетаФИ,
	|	Сведения.Валюта
	|ИЗ
	|	РегистрСведений.СведенияОФИ.СрезПоследних(
	|			&Дата,
	|			ФИ В (&ФИ)
	|				И Сценарий = &Сценарий
	|				И Организация = &Организация) КАК Сведения");	
	
	Запрос.УстановитьПараметр("Дата", 			Дата);
	Запрос.УстановитьПараметр("ФИ",				ФИ);
	Запрос.УстановитьПараметр("Организация",	Организация);	
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	
	РезультатЗапроса  = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл	
		Результат.Вставить(КолонкаЗапроса.Имя);
	КонецЦикла;

	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);	    
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьГраницуДоДокумента(ДатаДокумента, ДокументСсылка = Неопределено) Экспорт

	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Новый Граница(Новый МоментВремени(ДатаДокумента, ДокументСсылка), ВидГраницы.Исключая);		
	Иначе	
		Возврат Новый Граница(ДатаДокумента, ВидГраницы.Исключая);
	КонецЕсли;

КонецФункции

Функция ПолучитьДатуИзПериода(ЗначениеПериод) Экспорт

	Результат = ЗначениеПериод;
	Если ТипЗнч(ЗначениеПериод) = Тип("СтандартнаяДатаНачала") Тогда
		Результат = Результат.Дата;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Граница") Тогда
		Результат = Результат.Значение;
		Если ТипЗнч(Результат) = Тип("МоментВремени") Тогда
			Результат = Результат.Дата;
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ДокументыМСФО

// Процедура - Заполнить документ из режима НСБУ
//
// Параметры:
//  ДокументОбъект		 - Заполняемый документ
//  ДокументыОснования	 - Массив документов-оснований
//  ИмяТЧ				 - Имя табличной части документов-оснований, данные НСБУ которой копируются
Процедура ЗаполнитьДокументИзРежимаНСБУ(ДокументОбъект, ДокументыОснования, ИмяТЧ = "ВНА") Экспорт

	ДокументОбъект.РежимЗаполнения = Перечисления.РежимЗаполненияВидовУчета.МСФО;
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ " + МетаданныеДокумента.ПолноеИмя() + "." + ИмяТЧ + " КАК т ГДЕ т.Ссылка В (&ДокументыОснования)");
	Запрос.УстановитьПараметр("ДокументыОснования", ДокументыОснования);
	
	ДокументОбъект[ИмяТЧ].Загрузить(Запрос.Выполнить().Выгрузить());

КонецПроцедуры

Процедура ЗаполнитьКонтекстПоОснованиям(Контекст, МассивДокументыОснования) Экспорт

	Перем ТекОснование;
	
	Контекст.ДокументыОснования.Очистить();
	Если ТипЗнч(МассивДокументыОснования) = Тип("Массив") Тогда
		
		Для каждого ТекущееОснование Из МассивДокументыОснования Цикл			
			Контекст.ДокументыОснования.Добавить().ДокументОснование = ТекущееОснование;
			ТекОснование = ТекущееОснование;			
		КонецЦикла;
		
		Если ТекущееОснование = Неопределено Тогда
			Контекст.Организация = ТекущееОснование.Организация;
			Контекст.Сценарий = ТекущееОснование.Сценарий;
			Контекст.Ответственный = Пользователи.ТекущийПользователь();
		КонецЕсли;
		
	Иначе
		
		Контекст.ДокументыОснования.Добавить().ДокументОснование = МассивДокументыОснования;
		
		Контекст.Организация = МассивДокументыОснования.Организация;
		Контекст.Сценарий = МассивДокументыОснования.Сценарий;
		Контекст.Ответственный = Пользователи.ТекущийПользователь();
		
	КонецЕсли;	

КонецПроцедуры

Процедура ПроверитьПериодОтчета(ДокументОбъект, ПроверитьЗаполненность = Неопределено, ПроверитьУникальностьПериодаОтчета = Ложь, Отказ = Ложь) Экспорт

	Если Не ПроверитьУникальностьПериодаОтчета Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(ТекстЗапроса_УникальностьПериодаОтчета(ДокументОбъект.Метаданные().Имя));
	Запрос.УстановитьПараметр("ПериодОтчета", 	ДокументОбъект.ПериодОтчета);
	Запрос.УстановитьПараметр("Ссылка", 		ДокументОбъект.Ссылка);
	Запрос.УстановитьПараметр("Организация", 	ДокументОбъект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда			
		
		ШаблонОшибки = НСтр("ru = 'Период отчета <%1> документа <%2> конфликтует с периодом отчета документа %3'");
		Выборка = РезультатЗапроса.Выбрать();		
		Пока Выборка.Следующий() Цикл
			ТекстОшибки = СтрШаблон(ШаблонОшибки, ДокументОбъект.ПериодОтчета, ДокументОбъект, Выборка.Ссылка);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, Отказ);					
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапроса_УникальностьПериодаОтчета(ИмяДокумента)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	НЕ Периоды.Ссылка В ИЕРАРХИИ (&ПериодОтчета) КАК Родитель
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(Периоды.ДатаНачала, ГОД) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(&ПериодОтчета КАК Справочник.Периоды).ДатаНачала, ГОД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВводСобытийВНАМСФО КАК т
	|ГДЕ
	|	т.Ссылка <> &Ссылка
	|	И т.ПериодОтчета В(&ПериодОтчета)
	|	И т.Проведен
	|	И т.Организация = &Организация";
	
	Возврат СтрЗаменить(ТекстЗапроса, "ВводСобытийВНАМСФО", ИмяДокумента);
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаТаблицей

Функция ПолучитьОписаниеТаблицыЗагрузки(ЗагружаемыйТип, ДопПараметры) Экспорт

	ИмяТЧ = "";
	ДопПараметры.Свойство("ИмяТЧ", ИмяТЧ);
	
	КолонкиТЧ = Новый СписокЗначений;
	
	Если ДопПараметры.Свойство("ФГА") Тогда
		
		КолонкиТЧ = Справочники.ФиксированныеГруппыАналитик.ПолучитьОписаниеТаблицы(ДопПараметры.ФГА);
		
	ИначеЕсли ДопПараметры.Свойство("ИсточникКолонок") И (ДопПараметры.ИсточникКолонок = "ПИТ") Тогда
		
		//
		
	Иначе
		
		КолонкиТЧ = ПолучитьКолонкиЗагрузкиТЧ(ДопПараметры.ИмяОбъекта, ИмяТЧ);
				
	КонецЕсли;
	
	Результат = Новый Структура("Колонки, ИмяТЧ, Модуль_ДоработатьТаблицу, ТипПриемника, ОтборыТипов, ПроцедураЗагрузки", 
									КолонкиТЧ, 
									ИмяТЧ, 
									"МСФОВызовСервераУХ", 
									ЗагружаемыйТип, 
									Новый Структура,
									"ЗаполнитьДокумент"//**
								);
	
	Возврат Результат;

КонецФункции

Функция ПолучитьКолонкиЗагрузкиТЧ(ПутьМД, ИмяТЧ)
	
	КолонкиТЧ = Новый СписокЗначений;
	мдЗагрузки = Метаданные.НайтиПоПолномуИмени(ПутьМД);
	
	Если ЗначениеЗаполнено(ИмяТЧ) Тогда
		
		Если Не СтрНачинаетсяС(ИмяТЧ, "Движения.") Тогда
			РеквизитыКолонки = мдЗагрузки.ТабличныеЧасти[ИмяТЧ].Реквизиты;			
		Иначе
			
			ИмяРБ = СтрЗаменить(ИмяТЧ, "Движения.", ""); 
			ТабШаблон = РегистрыБухгалтерии[ИмяРБ].СоздатьНаборЗаписей().ВыгрузитьКолонки();
			
			УдаляемыеКолонки = Новый Структура("Период, МоментВремени, НомерСтроки, Регистратор,
											|Активность, Организация, Сценарий");
			
			Для каждого Колонка Из ТабШаблон.Колонки Цикл
				
				Если УдаляемыеКолонки.Свойство(Колонка.Имя) Тогда
					Продолжить;
				ИначеЕсли СтрНачинаетсяС(Колонка.Имя, "ВидСубконто") Тогда
					Продолжить;
				КонецЕсли;
				КолонкиТЧ.Добавить(Колонка.ТипЗначения, Колонка.Имя);
				
			КонецЦикла;
			
			РеквизитыКолонки = Новый Массив;//уже добавили 
			
		КонецЕсли;
		
	Иначе	
		РеквизитыКолонки = мдЗагрузки.Реквизиты
	КонецЕсли;
	
	Для каждого Реквизит Из РеквизитыКолонки Цикл
		КолонкиТЧ.Добавить(Реквизит.Тип, Реквизит.Имя);
	КонецЦикла;
	
	Возврат КолонкиТЧ;

КонецФункции

Функция ПолучитьАдресТаблицыЗагрузки(ТаблицаЗагрузки, ОписаниеТаблицы, УникальныйИдентификатор) Экспорт

	Результат = Новый ТаблицаЗначений;
	Для каждого ТекКолонка Из ОписаниеТаблицы.Колонки Цикл
		
		ТипКолонки = Новый ОписаниеТипов(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекКолонка.Значение));
		Результат.Колонки.Добавить(ТекКолонка.Представление, ТипКолонки);
	
	КонецЦикла;
	
	Для каждого СтрокаИсточник Из ТаблицаЗагрузки Цикл	
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), СтрокаИсточник);	
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор); 

КонецФункции

Функция ПолучитьМассивДляЗагрузки(ОписаниеТаблицы) Экспорт

	ДанныеЗагрузки = ПолучитьИзВременногоХранилища(ОписаниеТаблицы.АдресТаблицы);
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ДанныеЗагрузки.ТаблицаДанных);

КонецФункции

Процедура ДоработатьТаблицуЗагрузки(ТаблицаЗагрузки, КэшируемыеЗначения = Неопределено) Экспорт 

	Если КэшируемыеЗначения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиЗагрузки = ПолучитьКолонкиЗагрузки(КэшируемыеЗначения);
	СоздатьКолонкиЗагрузки(ТаблицаЗагрузки, КолонкиЗагрузки);
	
	КэшПоискаЗначений = Новый Соответствие;
	
	ОтборКолонок = Новый Структура("ЭтоСчет", Истина);
	ДополнитьКэшЗагрузки(КэшПоискаЗначений, ТаблицаЗагрузки, КолонкиЗагрузки.НайтиСтроки(ОтборКолонок), КэшируемыеЗначения);
	КэшСчетов = ПолучитьКэшСчетов(КэшПоискаЗначений, КэшируемыеЗначения);
	
	ОтборКолонок = Новый Структура("ЭтоСчет", Ложь);
	ДополнитьКэшЗагрузки(КэшПоискаЗначений, ТаблицаЗагрузки, КолонкиЗагрузки.НайтиСтроки(ОтборКолонок), КэшируемыеЗначения, КэшСчетов);
	
	ЗаполнитьКолонкиЗначениямиКэша(ТаблицаЗагрузки, КолонкиЗагрузки, КэшПоискаЗначений, КэшируемыеЗначения, КэшСчетов);
	
КонецПроцедуры

Процедура ЗаполнитьПоТаблицеЗагрузки(Объект, ДанныеЗаполнения) Экспорт

	ДанныеИсточника = ПолучитьИзВременногоХранилища(ДанныеЗаполнения.АдресТаблицы);
		
	Если Не СтрНачинаетсяС(ДанныеЗаполнения.ИмяТЧ, "Движения.") Тогда
		
		ТаблицаТЧ = Объект[ДанныеЗаполнения.ИмяТЧ];
		ТаблицаТЧ.Загрузить(ДанныеИсточника.ТаблицаДанных);
		
		Возврат;
		
	КонецЕсли;
	
	ТаблицаТЧ = Объект.Движения[СтрЗаменить(ДанныеЗаполнения.ИмяТЧ, "Движения.", "")];
	ТаблицаТЧ.Очистить();
	
	Контекст = Новый Структура("Активность, Сценарий, Организация, Период", Истина);
	ЗаполнитьЗначенияСвойств(Контекст, Объект);	
	
	Для каждого СтрокаИсточник Из ДанныеИсточника.ТаблицаДанных Цикл
	
		СтрокаПриемник = ТаблицаТЧ.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, Контекст);
		ЗаполнитьЗначенияСвойств(СтрокаПриемник, СтрокаИсточник);
		//заполнение субконто по именам вида "СубконтоДт1"
		
		Стороны = Новый Структура("Дт,Кт", "СчетДт", "СчетКт");
		
		Для каждого Сторона Из Стороны Цикл
		
			СубконтоСтороны = СтрокаПриемник["Субконто" + Сторона.Ключ];
			СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СтрокаПриемник[Сторона.Значение]);
			Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				СубконтоСтороны.Вставить(
						СвойстваСчета["ВидСубконто" + НомерСубконто], 
						СтрокаИсточник["Субконто" + Сторона.Ключ + НомерСубконто]
					);
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияМСФО

Функция СформироватьОперациюМСФО(ТаблицаПроводок, Реквизиты, Отказ) Экспорт
	
	Если Реквизиты.Свойство("СторнируемыйДокумент") Тогда
		ОперацияСсылка = Документы.ОперацияМСФО.ПолучитьОперациюМСФОПоСторнируемомуДокументу(Реквизиты.СторнируемыйДокумент);
	Иначе
		ОперацияСсылка = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОперацияСсылка) Тогда
		ОперацияМСФО = ОперацияСсылка.ПолучитьОбъект();
	Иначе
		ОперацияМСФО = Документы.ОперацияМСФО.СоздатьДокумент();
	КонецЕсли;
	
	ОперацияМСФО.Заполнить(Реквизиты);
	ОперацияМСФО.Записать();
	
	ДвиженияМСФО = РегистрыБухгалтерии.МСФО.СоздатьНаборЗаписей();
	ДвиженияМСФО.Отбор.Регистратор.Установить(ОперацияМСФО.Ссылка);
	ДвиженияМСФО.Загрузить(ТаблицаПроводок);
	Для Каждого ТекДвижение Из ДвиженияМСФО Цикл
		ТекДвижение.Регистратор = ОперацияМСФО.Ссылка;
		ТекДвижение.Период = ОперацияМСФО.Дата;
	КонецЦикла;
	
	ДвиженияМСФО.Записать();
	
	Возврат ОперацияМСФО.Ссылка;
	
КонецФункции

Процедура СформироватьДвижения(Движения, ДополнительныеСвойства, Отказ = Ложь) Экспорт
	
	Реквизиты 		= ДополнительныеСвойства.ДляПроведения.Реквизиты;	
	ТаблицаПроводок = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПроводок;
		
	ОтразитьДвиженияПоТаблицеПроводок(Движения, ТаблицаПроводок, Реквизиты, Отказ, Ложь);
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;	
	
	Если Не ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Возврат;
	ИначеЕсли ДополнительныеСвойства.ДляПроведения.Реквизиты.ФормироватьПроводкиМСФО Тогда
		Возврат;
	КонецЕсли;
			
	ТаблицаПроводок.Колонки.СуммаВФункциональнойВалюте.Имя = "Значение";
	
	МодульТК = ОбщегоНазначения.ОбщийМодуль("ТрансформационныеКорректировкиУХ");
	Если Реквизиты.Свойство("ВидОперацииИзПроводок") Тогда
		
		МодульТК.ОчиститьДвиженияТрансформационнойКорректировкиПоСсылке(Реквизиты.Ссылка, Истина);
		
		ВидыОпераций = ТаблицаПроводок.Скопировать(, "ВидОперации");
		ВидыОпераций.Свернуть("ВидОперации");
		ВидыОпераций = ВидыОпераций.ВыгрузитьКолонку("ВидОперации");
		Если ВидыОпераций.Количество() > 1 Тогда
			ТаблицаПроводок.Индексы.Добавить("ВидОперации");
		КонецЕсли;
		
		СтарыйВО = Реквизиты.ВидОперации;
		Для каждого ТекВО Из ВидыОпераций Цикл
			Отбор = Новый Структура("ВидОперации", ТекВО);
			Реквизиты.ВидОперации = ТекВО;
			Если ВидыОпераций.Количество() = 1 Тогда
				МодульТК.СформироватьКорректировку(Реквизиты, Отказ, ТаблицаПроводок);
			Иначе	
				МодульТК.СформироватьКорректировку(Реквизиты, Отказ, ТаблицаПроводок.Скопировать(Отбор));
			КонецЕсли;						
		КонецЦикла;
		Реквизиты.ВидОперации = СтарыйВО;
		
	Иначе
		МодульТК.СформироватьКорректировку(Реквизиты, Отказ, ТаблицаПроводок);
	КонецЕсли;
	
	ТаблицаПроводок.Колонки.Значение.Имя = "СуммаВФункциональнойВалюте";
	
КонецПроцедуры

#Область ТаблицаПроводокЗаполнение

Процедура ЗаполнитьПодразделенияНаправленияДеятельности(Движение, Проводка, СвойстваСчетаДт, СвойстваСчетаКт) Экспорт 

	Если СвойстваСчетаДт.УчетПоПодразделениям Тогда
		Движение.ПодразделениеДт = Проводка.ПодразделениеДт;
	КонецЕсли;
	
	Если СвойстваСчетаДт.УчетПоНаправлениямДеятельности Тогда
		Движение.НаправлениеДеятельностиДт = Проводка.НаправлениеДеятельностиДт;
	КонецЕсли;
	
	Если СвойстваСчетаКт.УчетПоПодразделениям Тогда
		Движение.ПодразделениеКт = Проводка.ПодразделениеКт;
	КонецЕсли;
	
	Если СвойстваСчетаКт.УчетПоНаправлениямДеятельности Тогда
		Движение.НаправлениеДеятельностиКт = Проводка.НаправлениеДеятельностиКт;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьКлючевыеСубконто(Движение, СтрокаИсточник, УстановитьДт = Истина, УстановитьКт = Истина) Экспорт

	Если УстановитьДт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоФИ(Движение.СчетДт, Истина);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			Движение["СубконтоДт" + СубконтоСчета.Ключ] = СтрокаИсточник[СубконтоСчета.Значение];                        	
		КонецЦикла;
	
	КонецЕсли;
	
	Если УстановитьКт Тогда
	
		СубконтоСчета = УчетМСФОПовтИспУХ.ПолучитьПараметрыСубконтоФИ(Движение.СчетКт, Истина);
		Для каждого СубконтоСчета Из СубконтоСчета Цикл
			Движение["СубконтоКт" + СубконтоСчета.Ключ] = СтрокаИсточник[СубконтоСчета.Значение];                        	
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДатуДокументаПоКонцуПериодаОтчета(ДокументОбъект, СекундДоКонца = 0) Экспорт
	
	Если ДокументОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСерверУХ.УстановитьНовоеЗначение(
				ДокументОбъект.Дата,
				КонецДня(ДокументОбъект.ПериодОтчета.ДатаОкончания) - СекундДоКонца
			);
			
КонецПроцедуры

#КонецОбласти

#Область ТаблицаПроводокПроверка

Процедура ПроверитьКонфликтующиеДокументыВНА(Ссылка, ИмяТаблицыМД, Отказ = Ложь) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Конфликтующие.Ссылка) КАК ДокументПредставление,
	|	Конфликтующие.Сценарий КАК Сценарий,
	|	Конфликтующие.ПериодОтчета КАК ПериодОтчета,
	|	Конфликтующие.Ссылка КАК Документ
	|ИЗ
	|	Документ." + ИмяТаблицыМД + " КАК Документ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + ИмяТаблицыМД + " КАК Конфликтующие
	|		ПО Документ.ПериодОтчета = Конфликтующие.ПериодОтчета
	|			И Документ.Сценарий = Конфликтующие.Сценарий
	|			И Документ.Организация = Конфликтующие.Организация
	|			И Документ.РежимЗаполнения = Конфликтующие.РежимЗаполнения
	|			И Документ.Ссылка <> Конфликтующие.Ссылка
	|			И (Документ.Организация.МодельУчетаМСФО = ЗНАЧЕНИЕ(Перечисление.МоделиУчетаМСФО.ТрансформационныйУчетКорректировки))
	|ГДЕ
	|	Документ.Ссылка = &Ссылка
	|	И НЕ Документ.Ссылка В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					Документ." + ИмяТаблицыМД + ".ДокументыОснования КАК т
	|				ГДЕ
	|					т.Ссылка = &Ссылка
	|					И (т.ДокументОснование ССЫЛКА Документ.ВводСобытийВНАМСФО
	|						ИЛИ т.ДокументОснование ССЫЛКА Документ.ВводСведенийВНАМСФО))");
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	Иначе
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(
					СтрШаблон(НСтр("ru = 'В системе есть конфликтующий документ <%1> по <%2> и сценарий <%3>'"),
						Выборка.ДокументПредставление, Выборка.ПериодОтчета, Выборка.Сценарий), 
					Отказ
				);
				
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполненностьПроводок(ТаблицаПроводок, Реквизиты, Отказ) Экспорт

	Для каждого Проводка Из ТаблицаПроводок Цикл
		ПроверитьЗаполненностьПроводки(Проводка, Проводка, Реквизиты, Отказ);
	КонецЦикла;

КонецПроцедуры

Процедура ПроверитьЗаполненностьПроводки(Проводка, СтрокаТЧ = Неопределено, Реквизиты, Отказ = Ложь)

	Перем ЕстьСчетаУчета;
	
	Если Не ЗначениеЗаполнено(Проводка.СчетДт) И Не УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Проводка.СчетКт).Забалансовый Тогда
		
		Если Реквизиты.Свойство("ЕстьСчетаУчета", ЕстьСчетаУчета) И ЕстьСчетаУчета Тогда		
			СообщитьОбОшибкеСчетаУчета(Проводка, Проводка.СчетУчетаДт, Отказ);
		Иначе 
			СообщитьОбОшибкеПоСобытию(Проводка, ПолучитьУточнениеОшибки(СтрокаТЧ, Реквизиты), НСтр("ru = 'Счет дебета'"), Отказ);
	 	КонецЕсли; 
			
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Проводка.СчетКт) И Не УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Проводка.СчетДт).Забалансовый Тогда
		
		Если Реквизиты.Свойство("ЕстьСчетаУчета", ЕстьСчетаУчета) И ЕстьСчетаУчета Тогда		
			СообщитьОбОшибкеСчетаУчета(Проводка, Проводка.СчетУчетаКт, Отказ);
		Иначе 
			СообщитьОбОшибкеПоСобытию(Проводка, ПолучитьУточнениеОшибки(СтрокаТЧ, Реквизиты), НСтр("ru = 'Счет кредита'"), Отказ);
	 	КонецЕсли; 
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьУточнениеОшибки(СтрокаТЧ, Реквизиты)

	Перем РеквизитыОшибки;
	
	УточнениеОшибки = "";
	
	Если НЕ Реквизиты.Свойство("РеквизитыОшибки", РеквизитыОшибки) Тогда
		Возврат "";
		РеквизитыОшибки = Новый Структура("ФИ", "ФИ");
	КонецЕсли;
	
	Для каждого КлючОшибки Из РеквизитыОшибки Цикл
		УточнениеОшибки = ?(УточнениеОшибки = "", "", УточнениеОшибки + ", ") 
						+ КлючОшибки.Значение + ":" + СтрокаТЧ[КлючОшибки.Ключ];
	КонецЦикла;
	
	Возврат "(" + УточнениеОшибки + ")";
	
КонецФункции

Процедура СообщитьОбОшибкеСчетаУчета(СтрокаИсточник, СчетУчета, Отказ)
	
	ШаблонОшибки = НСтр("ru = 'При формировании события <%1> не удалось заполнить счет <%2> из параметров учета <%3>'");
	СообщениеОбОшибке = СтрШаблон(ШаблонОшибки, СтрокаИсточник.Событие, СчетУчета, СтрокаИсточник.ПараметрыУчетаФИ);
	
	ОбщегоНазначенияУХ.СообщитьОбОшибке(СообщениеОбОшибке, Отказ);

КонецПроцедуры

Процедура СообщитьОбОшибкеПоСобытию(Проводка, УточнениеОшибки, СчетОшибки, Отказ)
	
	ШаблонОшибки = НСтр("ru = 'При формировании события <%1> <%2> не удалось заполнить <%3>'");
	ТекстОшибки = СтрШаблон(ШаблонОшибки, Проводка.ВидОперации, УточнениеОшибки, СчетОшибки);
	
	ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, Отказ);

КонецПроцедуры

#КонецОбласти

#Область ТаблицаПроводокОписание

Функция ПолучитьОписаниеТаблицыПроводок(КолонкиВалют = Ложь, КолонкиКоличества = Ложь) Экспорт

	ТаблицаПроводок = Новый ТаблицаЗначений;	
	ТаблицаПроводок.Колонки.Добавить("СчетКт");
	
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт1");
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт2");
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт3");
	
	ТаблицаПроводок.Колонки.Добавить("СчетДт");
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт1");
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт2");
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт3");
	ТаблицаПроводок.Колонки.Добавить("СуммаВФункциональнойВалюте");
	
	ТаблицаПроводок.Колонки.Добавить("ВидОперации");
	ТаблицаПроводок.Колонки.Добавить("Комментарий");
	
	Если КолонкиВалют Тогда
	
		ТаблицаПроводок.Колонки.Добавить("ВалютаДт");
		ТаблицаПроводок.Колонки.Добавить("СуммаВВалютеДт");
		
	    ТаблицаПроводок.Колонки.Добавить("ВалютаКт");
		ТаблицаПроводок.Колонки.Добавить("СуммаВВалютеКт");
		
	КонецЕсли;
	
	Если КолонкиКоличества Тогда
	
		ТаблицаПроводок.Колонки.Добавить("КоличествоДт");
		ТаблицаПроводок.Колонки.Добавить("КоличествоКт");
		
	КонецЕсли;	
	
	Возврат ТаблицаПроводок;
	
КонецФункции

Функция ПолучитьТаблицуПроводок(Движения) Экспорт

	ТаблицаПроводок = ПолучитьНаборДвиженийРасчетныхДанных(Движения);	
	Если ТаблицаПроводок = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТаблицаПроводок = ТаблицаПроводок.ВыгрузитьКолонки();
	
	ТаблицаПроводок.Колонки.Удалить("НомерСтроки");
	ТаблицаПроводок.Колонки.Удалить("Регистратор");
	ТаблицаПроводок.Колонки.Удалить("Активность");
	ТаблицаПроводок.Колонки.Удалить("МоментВремени");
	
	ТаблицаПроводок.Колонки.Добавить("ПериодСторно");
	ТаблицаПроводок.Колонки.Добавить("СобытиеСторно");
	
	Возврат ТаблицаПроводок;

КонецФункции

Функция ПолучитьТаблицуПроводокФИ() Экспорт

	ТаблицаПроводок = РегистрыНакопления.РасчетныеДанныеФИ.СоздатьНаборЗаписей().ВыгрузитьКолонки();
	
	ТаблицаПроводок.Колонки.Удалить("НомерСтроки");
	ТаблицаПроводок.Колонки.Удалить("Регистратор");
	ТаблицаПроводок.Колонки.Удалить("Активность");
	ТаблицаПроводок.Колонки.Удалить("МоментВремени");
	
	ТаблицаПроводок.Колонки.Добавить("ПериодСторно");
	ТаблицаПроводок.Колонки.Добавить("СобытиеСторно");
	
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеДт");
	ТаблицаПроводок.Колонки.Добавить("НаправлениеДеятельностиДт");
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеКт");	
	ТаблицаПроводок.Колонки.Добавить("НаправлениеДеятельностиКт");
	
	Возврат ТаблицаПроводок;

КонецФункции

Функция ПолучитьНаборДвиженийРасчетныхДанных(Движения) Экспорт

	Если Движения.Найти("РасчетныеДанныеФИ") <> Неопределено Тогда
		Возврат Движения.РасчетныеДанныеФИ;
	ИначеЕсли Движения.Найти("РасчетныеДанныеДЗ") <> Неопределено Тогда
		Возврат Движения.РасчетныеДанныеДЗ;
	ИначеЕсли Движения.Найти("РасчетныеДанныеЗапасы") <> Неопределено Тогда
		Возврат Движения.РасчетныеДанныеЗапасы;
	Иначе
		Возврат Неопределено;
	КонецЕсли;	

КонецФункции

#КонецОбласти

#Область ТаблицаПроводокОтражение

Функция ОтразитьДвиженияПоТаблицеПроводок(Движения, ТаблицаПроводок, Реквизиты, Отказ = Ложь, ЗагрузитьРасчеты = Истина) Экспорт
	
	Перем ЗаполнитьВидОперацииСобытием;
	
	ДобавитьЗаполнитьКлючевыеКолонки(ТаблицаПроводок, Реквизиты);
	
	ЕстьКолонкаПериодСторно 	= ТаблицаПроводок.Колонки.Найти("ПериодСторно") <> Неопределено;
	ЕстьКолонкаСобытиеСторно 	= ТаблицаПроводок.Колонки.Найти("СобытиеСторно") <> Неопределено;
	ЕстьКолонкаВидОперации 		= ТаблицаПроводок.Колонки.Найти("ВидОперации") <> Неопределено;
	ЕстьКолонкаСуммаВВалюте		= ТаблицаПроводок.Колонки.Найти("СуммаВВалюте") <> Неопределено;
	ЕстьКолонкаСуммаВВалютеДт	= ТаблицаПроводок.Колонки.Найти("СуммаВВалютеДт") <> Неопределено;
	ЕстьКолонкаСуммаВВалютеКт	= ТаблицаПроводок.Колонки.Найти("СуммаВВалютеКт") <> Неопределено;
	ЕстьКолонкаСобытие			= ТаблицаПроводок.Колонки.Найти("Событие") <> Неопределено;
	ЕстьКолонкаВалюта			= ТаблицаПроводок.Колонки.Найти("Валюта") <> Неопределено;
	ЕстьКолонкаВалютаДт			= ТаблицаПроводок.Колонки.Найти("ВалютаДт") <> Неопределено;
	ЕстьКолонкаВалютаКт			= ТаблицаПроводок.Колонки.Найти("ВалютаКт") <> Неопределено;
	ЕстьКолонкиКоличество		= ТаблицаПроводок.Колонки.Найти("КоличествоДт") <> Неопределено;
	
	Реквизиты.Свойство("ЗаполнитьВидОперацииСобытием", ЗаполнитьВидОперацииСобытием);
		
	ОтразитьДвижениеРасчетов	= НЕ (Реквизиты.Свойство("ОтразитьДвижениеРасчетов") И Реквизиты.ОтразитьДвижениеРасчетов = Ложь);
	
	Если НЕ ЕстьКолонкаВидОперации И НЕ Реквизиты.Свойство("ВидОперации") Тогда
		Реквизиты.Вставить("ВидОперации", Справочники.ВидыОпераций.УчетныеОперации);
	КонецЕсли;
	
	ПроверитьЗаполненностьПроводок(ТаблицаПроводок, Реквизиты, Отказ);
	Если Отказ Тогда
		Возврат Неопределено;	
	КонецЕсли;
	
	Если Реквизиты.ФормироватьПроводкиМСФО Тогда
		
		ЕстьКолонкиПиНД = ТаблицаПроводок.Колонки.Найти("ПодразделениеДт") <> Неопределено;
		
		//РегистрНакопления.РасчетныеДанныеФинансовыхИнструментов
		Если ОтразитьДвижениеРасчетов Тогда
			МСФОВызовСервераУХ.ОтразитьДвиженияРасчетов(Движения, ТаблицаПроводок, ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно);
		КонецЕсли;
		
		СвернутьТаблицуПроводокДляМСФО(ТаблицаПроводок, ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно, ЕстьКолонкиПиНД);
		
		//РегистрБухгалтерии.МСФО
		Для каждого Проводка Из ТаблицаПроводок Цикл
			
			СвойстваСчетДт = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетКт = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Проводка.СчетКт);
	
			ДвижениеИсточник = ОтразитьДвижениеМСФО(Движения.МСФО, Проводка, Реквизиты, СвойстваСчетДт, СвойстваСчетКт,
									ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно, ЕстьКолонкаВидОперации, ЕстьКолонкаСуммаВВалюте, ЕстьКолонкаСобытие, 
									ЕстьКолонкаВалюта, ЕстьКолонкаВалютаДт, ЕстьКолонкаВалютаКт, ЗаполнитьВидОперацииСобытием, ЕстьКолонкиПиНД, ЕстьКолонкиКоличество);
									
			ОтразитьДвижениеСторно(Движения, ДвижениеИсточник, Проводка, СвойстваСчетДт, СвойстваСчетКт, ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно, ЗаполнитьВидОперацииСобытием, ЕстьКолонкиПиНД);
			
		КонецЦикла;
		
		Движения.МСФО.Записывать = Истина;
		
	Иначе
		
		Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
			Если ЕстьКолонкаВалюта Тогда
				ЗаполнитьСуммаВФункциональнойВалюте(ТаблицаПроводок, Реквизиты, "Период");	
			КонецЕсли;
			МСФОВызовСервераУХ.ОтразитьДвиженияРасчетов(Движения, ТаблицаПроводок, ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно);
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Процедура ДобавитьЗаполнитьКлючевыеКолонки(ТаблицаПроводок, Реквизиты)
	
	ДобавитьЗаполнитьКолонку(ТаблицаПроводок, "Организация",	Реквизиты.Организация);
	ДобавитьЗаполнитьКолонку(ТаблицаПроводок, "Сценарий", 		Реквизиты.Сценарий);
	
	Если ТаблицаПроводок.Колонки.Найти("Период") = Неопределено Тогда
		ДобавитьЗаполнитьКолонку(ТаблицаПроводок, "Период", Реквизиты.Период);	
	КонецЕсли;	
	
КонецПроцедуры

Процедура СвернутьТаблицуПроводокДляМСФО(ТаблицаПроводок, ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно, ЕстьКолонкиПиНД = Ложь)
	
	ДопустимыеКолонкиГруппировки = Новый Структура(
		"Период,Валюта,ВалютаДт,ВалютаКт,
		|Событие,ВидОперации,ПериодСторно,СобытиеСторно,
		|СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3, 
		|СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3,
		|ПодразделениеДт,НаправлениеДеятельностиДт,
		|ПодразделениеКт,НаправлениеДеятельностиКт");
	
	ДопустимыеКолонкиСуммирования = Новый Структура(
	"СуммаВВалюте, СуммаВФункциональнойВалюте, СуммаВВалютеУчета, СуммаВВалютеОтчетности,
	|Количество, КоличествоДт, КоличествоКт,
	|СуммаВВалютеДт, СуммаВВалютеКт, Комментарий");
	
	КолонкиГруппировки = "";
	КолонкиСуммирования = "";
	
	Для каждого Колонка Из ТаблицаПроводок.Колонки Цикл
		
		Если ДопустимыеКолонкиГруппировки.Свойство(Колонка.Имя) Тогда
			КолонкиГруппировки = ?(КолонкиГруппировки = "", Колонка.Имя, КолонкиГруппировки + ", " + Колонка.Имя);
		ИначеЕсли ДопустимыеКолонкиСуммирования.Свойство(Колонка.Имя) Тогда
			КолонкиСуммирования = ?(КолонкиСуммирования = "", Колонка.Имя, КолонкиСуммирования + ", " + Колонка.Имя); 
		КонецЕсли;

	КонецЦикла;
	
	ТаблицаПроводок.Свернуть(КолонкиГруппировки, КолонкиСуммирования);

КонецПроцедуры

Процедура ЗаполнитьСуммаВФункциональнойВалюте(ТаблицаПроводок, Реквизиты, КолонкаПериодКурса = Неопределено) Экспорт 

	КэшКурсов = Новый Соответствие;

	Для каждого Проводка Из ТаблицаПроводок Цикл

		Если (Проводка.Валюта = Реквизиты.ФункциональнаяВалюта) Или Проводка.Валюта.Пустая() Тогда
			Проводка.СуммаВФункциональнойВалюте = Проводка.СуммаВВалюте;
			Продолжить;
		КонецЕсли;

		Если Проводка.СуммаВФункциональнойВалюте = 0 Тогда
			
			Проводка.СуммаВФункциональнойВалюте = ПолучитьСуммуВВалюте(
				Проводка.СуммаВВалюте, 
				Проводка.Валюта, 
				Реквизиты.ФункциональнаяВалюта, 
				?(КолонкаПериодКурса = Неопределено, Реквизиты.Период, Проводка[КолонкаПериодКурса]),
				КэшКурсов
			);
		
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьСуммуВВалюте(СуммаОперации, ВалютаОперации, ФункциональнаяВалюта, Период, КэшКурсов = Неопределено)

	Перем ТекущиеКурсы, КурсВО, КурсФВ;
	
	Если ВалютаОперации = ФункциональнаяВалюта Тогда
		Возврат СуммаОперации;
	КонецЕсли;
	
	Если КэшКурсов <> Неопределено Тогда
	
		ТекущиеКурсы = КэшКурсов.Получить(Период);
		Если ТекущиеКурсы <> Неопределено Тогда
			КурсВО = ТекущиеКурсы.Получить(ВалютаОперации);
			КурсФВ = ТекущиеКурсы.Получить(ФункциональнаяВалюта);
		КонецЕсли;
	
	КонецЕсли;
	
	Если КурсВО = Неопределено Тогда	
		
		КурсВО = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаОперации, Период);
		
		Если КэшКурсов <> Неопределено Тогда		
			Если ТекущиеКурсы = Неопределено Тогда 
				КэшКурсов.Вставить(Период, Новый Соответствие);
			КонецЕсли;
			КэшКурсов[Период].Вставить(ВалютаОперации, КурсВО);
		КонецЕсли;
		
	КонецЕсли;
	
	Если КурсФВ = Неопределено Тогда	
		
		КурсФВ = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ФункциональнаяВалюта, Период);
		
		Если КэшКурсов <> Неопределено Тогда
			Если КэшКурсов.Получить(Период) = Неопределено Тогда 
				КэшКурсов.Вставить(Период, Новый Соответствие);
			КонецЕсли;
			КэшКурсов[Период].Вставить(ФункциональнаяВалюта, КурсФВ);
		КонецЕсли;
		
	КонецЕсли;

	Возврат РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(
			СуммаОперации, 
			ВалютаОперации,
			ФункциональнаяВалюта,
			КурсВО.Курс,
			КурсФВ.Курс,
			КурсВО.Кратность,
			КурсФВ.Кратность
		);

КонецФункции

Функция ДобавитьЗаполнитьКолонку(ТабИсточник, ИмяКолонки, ЗначениеКолонки)

	Если ТабИсточник.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
		ТабИсточник.Колонки.Добавить(ИмяКолонки);
	КонецЕсли;
		
	ТабИсточник.ЗаполнитьЗначения(ЗначениеКолонки, ИмяКолонки);	
	Возврат ТабИсточник;

КонецФункции

#Область ОтразитьДвижениеМСФО

Функция ОтразитьДвижениеМСФО(Движения, Проводка, Реквизиты, СвойстваСчетДт, СвойстваСчетКт, 
							ЕстьКолонкаПериодСторно = Ложь, ЕстьКолонкаСобытиеСторно = Ложь, 
							ЕстьКолонкаВидОперации = Ложь, ЕстьКолонкаСуммаВВалюте = Ложь, 
							ЕстьКолонкаСобытие = Ложь, ЕстьКолонкаВалюта = Ложь, 
							ЕстьКолонкаВалютаДт = Ложь, ЕстьКолонкаВалютаКт = Ложь,
							ЗаполнитьВидОперацииСобытием = Неопределено, ЕстьКолонкиПиНД = Ложь, ЕстьКолонкиКоличество = Ложь)

	Движение = Движения.Добавить();
	
	Движение.Период 		= Проводка.Период;
	Движение.Организация 	= Реквизиты.Организация;
	Движение.Сценарий 		= Реквизиты.Сценарий;
	Если ЕстьКолонкаСобытие Тогда
		Движение.Содержание		= Проводка.Событие;
	КонецЕсли;
	
	Если ЗаполнитьВидОперацииСобытием = Истина Тогда
	    Движение.ВидОперации = Проводка.Событие;
	Иначе	
		Движение.ВидОперации = ?(ЕстьКолонкаВидОперации, Проводка.ВидОперации, Реквизиты.ВидОперации);
	КонецЕсли;	
	
	ЗаполнитьСуммуВВалютеУчета(Движение, Проводка, Реквизиты, ЕстьКолонкаСуммаВВалюте);

	Движение.СчетДт = СвойстваСчетДт.СчетМСФО;
	МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Проводка.СубконтоДт1);
	МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Проводка.СубконтоДт2);
	МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Проводка.СубконтоДт3);
	
	ЗаполнитьСуммуВалютуДт(Движение, ЕстьКолонкаВалюта, ЕстьКолонкаВалютаДт, ЕстьКолонкаСуммаВВалюте, Проводка, СвойстваСчетДт);
	
	Движение.СчетКт = СвойстваСчетКт.СчетМСФО;
	МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Проводка.СубконтоКт1);
	МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Проводка.СубконтоКт2);
	МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Проводка.СубконтоКт3);
	
	Если ЕстьКолонкиПиНД Тогда	
		ЗаполнитьПодразделенияНаправленияДеятельности(Движение, Проводка, СвойстваСчетДт, СвойстваСчетКт);
	КонецЕсли;
	
	Если ЕстьКолонкиКоличество Тогда
		Движение.КоличествоДт = Проводка.КоличествоДт;
		Движение.КоличествоКт = Проводка.КоличествоКт;		
	КонецЕсли;
	
	ЗаполнитьСуммуВалютуКт(Движение, Проводка, СвойстваСчетКт, ЕстьКолонкаВалюта, ЕстьКолонкаВалютаКт, ЕстьКолонкаСуммаВВалюте);	
	ЗаполнитьСуммуВВалютеОтчетности(Движение, Проводка, Реквизиты, ЕстьКолонкаВалюта, ЕстьКолонкаВалютаДт, ЕстьКолонкаВалютаКт, СвойстваСчетДт, СвойстваСчетКт);
	
	Возврат Движение;

КонецФункции

Процедура ЗаполнитьСуммуВалютуДт(Движение, ЕстьКолонкаВалюта, ЕстьКолонкаВалютаДт, ЕстьКолонкаСуммаВВалюте, Проводка, СвойстваСчетДт)
	
	Если (ЕстьКолонкаВалюта Или ЕстьКолонкаВалютаДт) И СвойстваСчетДт.Валютный Тогда
		Если ЕстьКолонкаВалюта Тогда
			Движение.ВалютаДт = Проводка.Валюта;
		Иначе	
			Движение.ВалютаДт = Проводка.ВалютаДт;
		КонецЕсли;
		Если ЕстьКолонкаСуммаВВалюте Тогда
			Движение.СуммаВВалютеДт = Проводка.СуммаВВалюте;
		ИначеЕсли ЕстьКолонкаВалютаДт Тогда
			Движение.СуммаВВалютеДт = Проводка.СуммаВВалютеДт;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСуммуВалютуКт(Движение, Проводка, СвойстваСчетКт, ЕстьКолонкаВалюта, ЕстьКолонкаВалютаКт, ЕстьКолонкаСуммаВВалюте)
	
	Если (ЕстьКолонкаВалюта Или ЕстьКолонкаВалютаКт) И СвойстваСчетКт.Валютный Тогда
		
		Если ЕстьКолонкаВалюта Тогда
			Движение.ВалютаКт = Проводка.Валюта;
		Иначе	
			Движение.ВалютаКт = Проводка.ВалютаКт;
		КонецЕсли;
		
		Если ЕстьКолонкаСуммаВВалюте Тогда
			Движение.СуммаВВалютеКт = Проводка.СуммаВВалюте;
		ИначеЕсли ЕстьКолонкаВалютаКт Тогда
			Движение.СуммаВВалютеКт = Проводка.СуммаВВалютеКт;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСуммуВВалютеУчета(Движение, Проводка, Реквизиты, ЕстьКолонкаСуммаВВалюте)
	
	Если ЕстьКолонкаСуммаВВалюте Тогда
		
		Если Проводка.СуммаВФункциональнойВалюте <> 0 Тогда//не требуется пересчет в функциональную валюту 
			
			Движение.СуммаВВалютеУчета = Проводка.СуммаВФункциональнойВалюте;
			
		ИначеЕсли Проводка.Валюта = Реквизиты.ФункциональнаяВалюта Тогда
			
			Движение.СуммаВВалютеУчета = Проводка.СуммаВВалюте;
			
		Иначе
			
			Движение.СуммаВВалютеУчета = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(
													Проводка.СуммаВВалюте, 
													Проводка.Валюта,
													Реквизиты.ФункциональнаяВалюта,
													РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(Проводка.Валюта, Проводка.Период).Курс,
													РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(Реквизиты.ФункциональнаяВалюта, Проводка.Период).Курс
												);
			
		КонецЕсли;
		
	Иначе 
		
		Движение.СуммаВВалютеУчета = Проводка.СуммаВФункциональнойВалюте;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСуммуВВалютеОтчетности(Движение, Проводка, Реквизиты, ЕстьКолонкаВалюта, ЕстьКолонкаВалютаДт, ЕстьКолонкаВалютаКт, СвойстваСчетДт, СвойстваСчетКт)
	
	Если Не Реквизиты.Свойство("ВалютаПредставления") Тогда
		Возврат;
	КонецЕсли;
	
	Если Реквизиты.Свойство("ЕстьСуммаВВалютеОтчетности") Тогда
	    Движение.СуммаВВалютеОтчетности = Проводка.СуммаВВалютеОтчетности;
	ИначеЕсли ЕстьКолонкаВалюта И (Реквизиты.ВалютаПредставления = Проводка.Валюта) Тогда
		Движение.СуммаВВалютеОтчетности = Проводка.СуммаВВалюте;
	ИначеЕсли ЕстьКолонкаВалютаДт И (Реквизиты.ВалютаПредставления = Проводка.ВалютаДт) Тогда
		Движение.СуммаВВалютеОтчетности = Проводка.СуммаВВалютеДт;
	ИначеЕсли ЕстьКолонкаВалютаКт И (Реквизиты.ВалютаПредставления = Проводка.ВалютаКт) Тогда
		Движение.СуммаВВалютеОтчетности = Проводка.СуммаВВалютеКт;		
	ИначеЕсли Реквизиты.ВалютаПредставления = Реквизиты.ФункциональнаяВалюта Тогда
		Движение.СуммаВВалютеОтчетности = Движение.СуммаВВалютеУчета;
	Иначе
		
		Если СвойстваСчетДт.Валютный Тогда			
			ВалютаНач = Проводка.СуммаВВалютеДт;
			Сумма = Проводка.СуммаВВалютеДт;
 		ИначеЕсли СвойстваСчетКт.Валютный Тогда			
			ВалютаНач = Проводка.СуммаВВалютеКт;
			Сумма = Проводка.СуммаВВалютеКт;
		Иначе			
			ВалютаНач = Реквизиты.ФункциональнаяВалюта;
			Сумма = Движение.СуммаВВалютеУчета;
		КонецЕсли;
		
		КотировкаНач = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаНач, Проводка.Период);
		КотировкаКон = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(Реквизиты.ВалютаПредставления, Проводка.Период);
		
		Движение.СуммаВВалютеОтчетности = РаботаСКурсамиВалютКлиентСерверУХ.ПересчитатьИзВалютыВВалюту(
													Сумма, 
													ВалютаНач,
													Реквизиты.ВалютаПредставления,
													КотировкаНач.Курс,
													КотировкаКон.Курс,
													КотировкаНач.Кратность,
													КотировкаКон.Кратность
												);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Процедура ОтразитьДвижениеСторно(Движения, ДвижениеИсточник, Проводка, 
						СвойстваСчетДт, СвойстваСчетКт, 
						ЕстьКолонкаПериодСторно, ЕстьКолонкаСобытиеСторно, 
						ЗаполнитьВидОперацииСобытием = Неопределено, ЕстьКолонкиПиНД = Ложь)

	Если ЕстьКолонкаПериодСторно И ЗначениеЗаполнено(Проводка.ПериодСторно) Тогда
		
		Движение = Движения.МСФО.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, ДвижениеИсточник);
		
		МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Проводка.СубконтоДт1);
		МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Проводка.СубконтоДт2);
		МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Проводка.СубконтоДт3);
		
		МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Проводка.СубконтоКт1);
		МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Проводка.СубконтоКт2);
		МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Проводка.СубконтоКт3);
		
		Движение.СуммаВВалютеУчета = -ДвижениеИсточник.СуммаВВалютеУчета;
		
		Если ЕстьКолонкиПиНД Тогда	
			ЗаполнитьПодразделенияНаправленияДеятельности(Движение, Проводка, СвойстваСчетДт, СвойстваСчетКт);
		КонецЕсли;
		
		Если СвойстваСчетДт.Валютный Тогда
			Движение.СуммаВВалютеДт = -Проводка.СуммаВВалюте;
		КонецЕсли;
		
		Если СвойстваСчетКт.Валютный Тогда
			Движение.СуммаВВалютеКт = -Проводка.СуммаВВалюте;
		КонецЕсли;
		
		Движение.Период			= Проводка.ПериодСторно;
		Движение.Содержание 	= ?(ЕстьКолонкаСобытиеСторно, Проводка.СобытиеСторно, Проводка.Событие);
		
		Если ЗаполнитьВидОперацииСобытием = Истина Тогда			
			Движение.ВидОперации = ?(ЕстьКолонкаСобытиеСторно, Проводка.СобытиеСторно, Проводка.Событие);			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТекстЗапросаАОСВ

Функция ТекстЗапроса_АОСВ(НомераТаблиц, ВидИтогаПоСчету = Неопределено, ИсключитьДокумент = Истина, ИмяТаблицыСчетов = Неопределено) Экспорт
	
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(ТекстЗапроса_ПоказателиОтчета(НомераТаблиц, ВидИтогаПоСчету, ИмяТаблицыСчетов));
	ТекстЗапроса.Добавить(ТекстЗапроса_ВерсииПоказателей(НомераТаблиц, ИсключитьДокумент));
	ТекстЗапроса.Добавить(ТекстЗапроса_ЗначенияПоказателей(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_ИтогиПоПоказателям(НомераТаблиц));
	
	Возврат СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	
КонецФункции

Функция ТекстЗапроса_ВерсииПоказателей(НомераТаблиц, ИсключитьДокумент = Истина)
	
	НомераТаблиц.Вставить("втВерсии", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	т.Ссылка КАК Версия
	|ПОМЕСТИТЬ втВерсии
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК т
	|ГДЕ
	|	т.Сценарий = &Сценарий
	|	И т.ВидОтчета = &ВидОтчета
	|	И т.Организация = &Организация
	|	И т.ПериодОтчета = &ПериодОтчета
	|	И т.Валюта = &ФункциональнаяВалюта
	|	И НЕ т.ЧерноваяВерсия
	|	И НЕ т.Регистратор В (&Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	т.Ссылка";
	
	Если ИсключитьДокумент Тогда
		Возврат ТекстЗапроса;
	Иначе	
		Возврат СтрЗаменить(ТекстЗапроса, "И НЕ т.Регистратор В (&Ссылка)", "");
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапроса_ПоказателиОтчета(НомераТаблиц, ВидИтогаПоСчету = Неопределено, ИмяТаблицыСчетов = Неопределено)

	НомераТаблиц.Вставить("втПоказателиОтчета", НомераТаблиц.Количество());
	
	Если ВидИтогаПоСчету = Неопределено Тогда
		ВидИтогаПоСчету = "ДО,КО";
	КонецЕсли;
	
	МасВидыИтогов = Новый Массив;
	Для каждого ТекВидИтога Из Новый Структура(ВидИтогаПоСчету) Цикл	
		МасВидыИтогов.Добавить(СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.%1)", ТекВидИтога.Ключ));		
	КонецЦикла;
	
	ТекстУсловия = СтрШаблон(" И т.ВидИтогаПоСчету В (%1)", СтрСоединить(МасВидыИтогов, ", "));
	
	Если ИмяТаблицыСчетов <> Неопределено Тогда		
		ТекстУсловия = ТекстУсловия + СтрШаблон(" И т.СчетБД В (ВЫБРАТЬ т.Счет ИЗ %1 КАК т)", ИмяТаблицыСчетов);
	КонецЕсли;
	
	Возврат
	"ВЫБРАТЬ
	|	т.Ссылка КАК ПоказательОтчета,
	|	т.СчетБД КАК СчетБД,
	|	ВЫБОР
	|		КОГДА т.ВидИтогаПоСчету В (ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.ДО), ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКД), ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СНД))
	|			ТОГДА 1
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ втПоказателиОтчета
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК т
	|ГДЕ
	|	т.Владелец = &ВидОтчета
	|	И т.ВидИтога = ЗНАЧЕНИЕ(Перечисление.ВидыИтоговПоказателя.Сумма)"
	+ ТекстУсловия;
	
КонецФункции

Функция ТекстЗапроса_ЗначенияПоказателей(НомераТаблиц)

	НомераТаблиц.Вставить("втЗначенияПоказателей", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	т.Значение * п.Коэффициент КАК Значение,
	|	т.ЗначениеВалюта * п.Коэффициент КАК ЗначениеВалюта,
	|	п.СчетБД КАК СчетБД,
	|	т.АналитикаВалюта КАК АналитикаВалюта,
	|	т.Аналитика1 КАК Аналитика1,
	|	NULL КАК Аналитика2,
	|	NULL КАК Аналитика3,
	|	NULL КАК Аналитика4,
	|	NULL КАК Аналитика5,
	|	NULL КАК Аналитика6
	|ПОМЕСТИТЬ втЗначенияПоказателей
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов1 КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчета КАК п
	|		ПО т.Показатель = п.ПоказательОтчета
	|			И (т.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т))
	|			И (НЕ т.ИтоговоеЗначение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Значение * п.Коэффициент,
	|	т.ЗначениеВалюта * п.Коэффициент,
	|	п.СчетБД,
	|	т.АналитикаВалюта,
	|	т.Аналитика1,
	|	т.Аналитика2,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов2 КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчета КАК п
	|		ПО т.Показатель = п.ПоказательОтчета
	|			И (т.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т))
	|			И (НЕ т.ИтоговоеЗначение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Значение * п.Коэффициент,
	|	т.ЗначениеВалюта * п.Коэффициент,
	|	п.СчетБД,
	|	т.АналитикаВалюта,
	|	т.Аналитика1,
	|	т.Аналитика2,
	|	т.Аналитика3,
	|	NULL,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов3 КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчета КАК п
	|		ПО т.Показатель = п.ПоказательОтчета
	|			И (т.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т))
	|			И (НЕ т.ИтоговоеЗначение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Значение * п.Коэффициент,
	|	т.ЗначениеВалюта * п.Коэффициент,
	|	п.СчетБД,
	|	т.АналитикаВалюта,
	|	т.Аналитика1,
	|	т.Аналитика2,
	|	т.Аналитика3,
	|	т.Аналитика4,
	|	NULL,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов4 КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчета КАК п
	|		ПО т.Показатель = п.ПоказательОтчета
	|			И (т.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т))
	|			И (НЕ т.ИтоговоеЗначение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Значение * п.Коэффициент,
	|	т.ЗначениеВалюта * п.Коэффициент,
	|	п.СчетБД,
	|	т.АналитикаВалюта,
	|	т.Аналитика1,
	|	т.Аналитика2,
	|	т.Аналитика3,
	|	т.Аналитика4,
	|	т.Аналитика5,
	|	NULL
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов5 КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчета КАК п
	|		ПО т.Показатель = п.ПоказательОтчета
	|			И (т.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т))
	|			И (НЕ т.ИтоговоеЗначение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Значение * п.Коэффициент,
	|	т.ЗначениеВалюта * п.Коэффициент,
	|	п.СчетБД,
	|	т.АналитикаВалюта,
	|	т.Аналитика1,
	|	т.Аналитика2,
	|	т.Аналитика3,
	|	т.Аналитика4,
	|	т.Аналитика5,
	|	т.Аналитика6
	|ИЗ
	|	РегистрСведений.ЗначенияПоказателейОтчетов6 КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоказателиОтчета КАК п
	|		ПО т.Показатель = п.ПоказательОтчета
	|			И (т.Версия В
	|				(ВЫБРАТЬ
	|					т.Версия
	|				ИЗ
	|					втВерсии КАК т))
	|			И (НЕ т.ИтоговоеЗначение)";

КонецФункции

Функция ТекстЗапроса_ИтогиПоПоказателям(НомераТаблиц)
	
	НомераТаблиц.Вставить("втИтогиПоСчетам", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	СУММА(т.Значение) КАК Сумма,
	|	СУММА(т.ЗначениеВалюта) КАК СуммаВВалюте,
	|	т.СчетБД КАК Счет,
	|	т.АналитикаВалюта КАК Валюта,
	|	т.Аналитика1 КАК Субконто1,
	|	т.Аналитика2 КАК Субконто2,
	|	т.Аналитика3 КАК Субконто3
	|ПОМЕСТИТЬ втИтогиПоСчетам
	|ИЗ
	|	втЗначенияПоказателей КАК т
	|
	|СГРУППИРОВАТЬ ПО
	|	т.СчетБД,
	|	т.АналитикаВалюта,
	|	т.Аналитика1,
	|	т.Аналитика2,
	|	т.Аналитика3";	

КонецФункции
	
#КонецОбласти

#КонецОбласти

#Область ПроведениеМСФО

Процедура ЗаписатьДвижения(Движения) Экспорт
	
	Для каждого Движение Из Движения Цикл
		Движение.Записать();	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьДвиженияРасчетов(Движения, ТаблицаПроводок, ЕстьКолонкаПериодСторно = Ложь, ЕстьКолонкаСобытиеСторно = Ложь) Экспорт

	НаборДвижений = МСФОВызовСервераУХ.ПолучитьНаборДвиженийРасчетныхДанных(Движения);	
	Если НаборДвижений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НаборДвижений.Количество() Тогда
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаПроводок, НаборДвижений);
	Иначе
		НаборДвижений.Загрузить(ТаблицаПроводок);
		НаборДвижений.Записывать = Истина;
	КонецЕсли;
	
	Если ЕстьКолонкаПериодСторно Тогда 
		
		ТаблицаСторно = ТаблицаПроводок.Скопировать();
		
		Для каждого Проводка Из ТаблицаСторно Цикл
			
			Если НЕ ЗначениеЗаполнено(Проводка.ПериодСторно) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = НаборДвижений.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Проводка);
			
			Движение.Период 						= Проводка.ПериодСторно;
			Движение.Событие 						= ?(ЕстьКолонкаСобытиеСторно, Проводка.СобытиеСторно, Проводка.Событие);
			Движение.СуммаВВалюте 					= -Проводка.СуммаВВалюте;
			Движение.СуммаВФункциональнойВалюте 	= -Проводка.СуммаВФункциональнойВалюте;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьДвиженияТК(Ссылка, ПометитьТК = Ложь, Отказ = Ложь) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		МодульТК = ОбщегоНазначения.ОбщийМодуль("ТрансформационныеКорректировкиУХ");
		МодульТК.ОчиститьДвиженияТрансформационнойКорректировкиПоСсылке(Ссылка, ПометитьТК, Отказ);	
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Отчеты

Функция ПолучитьОтборРасшифровкиСверкаВГО(Отбор) Экспорт

	ОтборРасшифровки = Новый Структура("Период", Отбор.Получить("Период"));
	
	ОтборСчет = Отбор.Получить("СчетОрганизации");
	Если ЗначениеЗаполнено(ОтборСчет) Тогда
		
		ОтборРасшифровки.Вставить("Счет", ОтборСчет);
		ОтборРасшифровки.Вставить("Организация", Отбор.Получить("Организация"));
		ОрганизацияДляКонтрагента = Отбор.Получить("ОрганизацияСверки");
		
	Иначе
		
		ОтборСчет = Отбор.Получить("СчетКонтрагента");
		ОтборРасшифровки.Вставить("Счет", ОтборСчет);
		Счета = Новый СписокЗначений;
		Счета.Добавить(ОтборСчет);
		ОтборРасшифровки.Вставить("Счета", Счета);
		
	  	ОтборРасшифровки.Вставить("Организация", Отбор.Получить("ОрганизацияСверки"));
		ОрганизацияДляКонтрагента = Отбор.Получить("Организация");
		
	КонецЕсли;

	Контрагент = ОрганизацииВызовСервераУХ.ПолучитьКонтрагентовПоОрганизации(ОрганизацияДляКонтрагента);
	Если Контрагент.Количество() Тогда
		ОтборРасшифровки.Вставить("Субконто1", Контрагент[0]);		
	КонецЕсли;
	
	Возврат ОтборРасшифровки;

КонецФункции

Функция ПолучитьОстатокПоСчетуСубконто(Организация, Сценарий, ДатаСсылка, СчетИБ, Субконто = Неопределено, ИспользуетсяКт = Истина) Экспорт
	
	ДатаОстатка = ?(ТипЗнч(ДатаСсылка) = Тип("Структура"), ДатаСсылка.Дата, ДатаСсылка);
	РеквизитыУП = РеквизитыДляФормыУП(Организация, ДатаОстатка, Сценарий);
	
	Если Не РеквизитыУП.ФормироватьПроводкиМСФО Тогда
		
		Если Не ЗначениеЗаполнено(ДатаОстатка) Тогда
			Возврат 0;
		КонецЕсли;
		
		ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДатаОстатка, Перечисления.Периодичность.Год, 0, Истина);
		Если Не ЗначениеЗаполнено(ПериодОтчета) Тогда
			Возврат 0; 
		КонецЕсли;
				
		ВидОтчетаОСВ = Справочники.ВидыОтчетов.ПолучитьВидОтчетаОСВ();
		
		ТабПоказателей = УправлениеОтчетамиУХ.ПолучитьТаблицуЗначенийПоказателя(Сценарий, Организация, ПериодОтчета,
				РеквизитыУП.ФункциональнаяВалюта, ВидОтчетаОСВ, СчетИБ, Перечисления.ВидыБухгалтерскихИтогов.СКД);
				
		Возврат ТабПоказателей.Итог("Значение");
		
	Иначе	
		
		Если ТипЗнч(ДатаСсылка) = Тип("Структура") Тогда
			МоментВремени = Новый МоментВремени(ДатаСсылка.Дата, ДатаСсылка.Ссылка);
		Иначе 
			МоментВремени = Новый МоментВремени(ДатаСсылка);
		КонецЕсли;

		Отбор = Новый Структура;
		Отбор.Вставить("Организация",	Организация);
		Отбор.Вставить("Валюта", 		РеквизитыУП.ФункциональнаяВалюта);
		Отбор.Вставить("Сценарий", 		Сценарий);
		Отбор.Вставить("Счет", 			СчетИБ.СчетСсылка);
		
		Для каждого ТекущееСубконто Из Субконто Цикл
			Отбор.Вставить(ТекущееСубконто.Ключ, ТекущееСубконто.Значение);
		КонецЦикла;
		
		ТабОстатки = РегистрыБухгалтерии.МСФО.Остатки(МоментВремени, , Отбор);
		
		Возврат ?(ИспользуетсяКт, 1, -1) * (ТабОстатки.Итог("СуммаВВалютеУчетаОстатокДт") - ТабОстатки.Итог("СуммаВВалютеУчетаОстатокКт"));
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСценарийПоУмолчаниюВПараметрахОтчетов(ОтчетОбъект) Экспорт
	Сценарий = Константы.СценарийМСФО.Получить();
	Для каждого Вариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл
		Если Вариант.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Сценарий")) <> Неопределено Тогда
			Вариант.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Сценарий", Сценарий);
		КонецЕсли;
		Для каждого Отбор Из Вариант.Настройки.Отбор.Элементы Цикл
			Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сценарий") Тогда
				Отбор.ПравоеЗначение = Сценарий;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПараметрыВВариантахНастроек(ОтчетОбъект, ПараметрыОтчета) Экспорт
	
	Для каждого ТекущийВариант Из ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек Цикл		
		
		Для каждого ТекущийПараметр Из ПараметрыОтчета Цикл
			
			ТиповыеОтчетыУХ.УстановитьПараметр(ТекущийВариант.Настройки, ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
			
			ТекущееПоле = Новый ПолеКомпоновкиДанных(ТекущийПараметр.Ключ);
			Для каждого Отбор Из ТекущийВариант.Настройки.Отбор.Элементы Цикл
				
				Если Отбор.ЛевоеЗначение = ТекущееПоле Тогда
					Отбор.ПравоеЗначение = ТекущийПараметр.Значение;
				КонецЕсли;
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьОтборРСБУ(КлючПроводкиМСФО) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	МСФОДвиженияССубконто.Организация КАК Организация,
	|	МСФОДвиженияССубконто.СчетДт КАК СчетДтМСФО,
	|	МСФОДвиженияССубконто.СубконтоДт1 КАК СубконтоДт1,
	|	МСФОДвиженияССубконто.СубконтоДт2 КАК СубконтоДт2,
	|	МСФОДвиженияССубконто.СубконтоДт3 КАК СубконтоДт3,
	|	МСФОДвиженияССубконто.СчетКт КАК СчетКтМСФО,
	|	МСФОДвиженияССубконто.СубконтоКт1 КАК СубконтоКт1,
	|	МСФОДвиженияССубконто.СубконтоКт2 КАК СубконтоКт2,
	|	МСФОДвиженияССубконто.СубконтоКт3 КАК СубконтоКт3,
	|	МСФОДвиженияССубконто.СчетДтИсточник.СчетСсылка КАК СчетДт,
	|	МСФОДвиженияССубконто.СчетКтИсточник.СчетСсылка КАК СчетКт,
	|	МСФОДвиженияССубконто.Период КАК Период
	|ИЗ
	|	РегистрБухгалтерии.МСФО.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор = &Регистратор
	|				И НомерСтроки = &НомерСтроки,
	|			,
	|			1) КАК МСФОДвиженияССубконто");
	
	Запрос.УстановитьПараметр("Регистратор", КлючПроводкиМСФО.Регистратор);
	Запрос.УстановитьПараметр("НомерСтроки", КлючПроводкиМСФО.НомерСтроки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Структура;
	
	Пока Выборка.Следующий() Цикл
		
		Если Не ЗначениеЗаполнено(Выборка.СчетДт) 
			Или Не ЗначениеЗаполнено(Выборка.СчетКт) Тогда		
			Прервать;		
		КонецЕсли;
		
		Результат.Вставить("Организация",	Выборка.Организация);
		Результат.Вставить("Период", 		Выборка.Период);
		Результат.Вставить("НачалоПериода", Выборка.Период);
		Результат.Вставить("КонецПериода", 	Выборка.Период);
		Результат.Вставить("СчетДт", 		Выборка.СчетДт);
		Результат.Вставить("СчетКт", 		Выборка.СчетКт);
		
		Для каждого ТекСторона Из Новый Структура("Дт,Кт") Цикл			
			
			СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Выборка["Счет" + ТекСторона.Ключ]);
			
			ТекущиеСубконто = Новый Соответствие;
			
			Для НомерИсточник = 1 По 3 Цикл
				
				ЗначениеИсточник = Выборка["Субконто" + ТекСторона.Ключ + НомерИсточник];
				
				Для НомерПриемник = 1 По СвойстваСчета.КоличествоСубконто Цикл
					
					Если ТекущиеСубконто.Получить(НомерПриемник) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТекущееЗначение = СвойстваСчета[СтрШаблон("ВидСубконто%1ТипЗначения", НомерПриемник)].ПривестиЗначение(ЗначениеИсточник);
					Если ЗначениеЗаполнено(ТекущееЗначение) Тогда
						ТекущиеСубконто.Вставить(НомерПриемник, ТекущееЗначение);
						ЗначениеИсточник = Неопределено;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				Если СвойстваСчета.КоличествоСубконто = ТекущиеСубконто.Количество() Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Для каждого ТекСубконто Из ТекущиеСубконто Цикл
				Результат.Вставить("Субконто" + ТекСторона.Ключ + ТекСубконто.Ключ, ТекСубконто.Значение);
			КонецЦикла;
									
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат; 

КонецФункции

Функция ПолучитьРаскрытиеРасшифровки(АдресСКД, Настройки, ДанныеРасшифровки, СкрытьЗаголовокГруппировки = Истина) Экспорт

	ДанныеРасшифровки = Неопределено;
	СКД = ПолучитьИзВременногоХранилища(АдресСКД);//**
	СхемаКомпоновкиДанных = ОбщегоНазначения.ЗначениеИзСтрокиXML(ОбщегоНазначения.ЗначениеВСтрокуXML(СКД));	
	
	СКД_ДоработатьЗапрос(СхемаКомпоновкиДанных, Настройки, Новый Структура("Счет,ВыводитьЗабалансовыеСчета"));//уберем параметр счета
	
	Если СкрытьЗаголовокГруппировки Тогда
		
		Настройки.Структура[0].Имя = "СкрытьЗаголовокПоляГруппировки";
		
		МакетЗаголовка = Неопределено;
		Для каждого Макет Из СхемаКомпоновкиДанных.МакетыЗаголовковГруппировок Цикл			
			Если Макет.ИмяГруппировки = "СкрытьЗаголовокПоляГруппировки" Тогда
				МакетЗаголовка = Макет;
				Прервать;
			КонецЕсли;		
		КонецЦикла;
		
		Если МакетЗаголовка = Неопределено Тогда
			
			МакетЗаголовка = СхемаКомпоновкиДанных.МакетыЗаголовковГруппировок.Добавить();
			МакетЗаголовка.ИмяГруппировки = "СкрытьЗаголовокПоляГруппировки";
			МакетЗаголовка.Макет = "СкрытьЗаголовокПоляГруппировки";
			
			Макет = СхемаКомпоновкиДанных.Макеты.Добавить();
			Макет.Имя = "СкрытьЗаголовокПоляГруппировки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	КоличествоСубконто = УчетМСФОПовтИспУХ.ПолучитьМаксКоличествоСубконто();	
	Для каждого нд Из СхемаКомпоновкиДанных.НаборыДанных Цикл
		Для й = 1 По КоличествоСубконто Цикл
			
			ПолеКД = нд.Поля.Найти("Субконто"+й);
			Если ПолеКД = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ПолеКД.Роль.ИгнорироватьЗначенияNULL = Ложь; 
			
		КонецЦикла;
		
		Если (СтрНайти(нд.Запрос, "Движения") = 0) И (СтрНайти(нд.Запрос, ".Обороты") = 0) Тогда		
			нд.Запрос = СтрЗаменить(нд.Запрос, "Авто,", "Авто,Движения");	
		КонецЕсли;
		
	КонецЦикла;
	
	Если Настройки.ДополнительныеСвойства.Свойство("Счет") Тогда
		
		МСФОВызовСервераУХ.УстановитьИспользованиеПараметраСхемы(СхемаКомпоновкиДанных, "Счет", Истина);
		
		ПараметрСчет = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Счет"));
		Если ПараметрСчет <> Неопределено Тогда
			ПараметрСчет.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Обычный;
		КонецЕсли; 
		
		Если Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Счет")) <> Неопределено Тогда
			Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Счет",  	Настройки.ДополнительныеСвойства.Счет);
			МСФОКлиентСерверУХ.Настройки_Отбор_Счет(Настройки, "ОСВПоСчету"); 		
		Иначе 
			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
					Настройки.Отбор, 
					"Счет", 
					ВидСравненияКомпоновкиДанных.ВИерархии,
					Настройки.ДополнительныеСвойства.Счет, 
					, 
					Истина
				);
				
		КонецЕсли;
		
		ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Счета"));
		Если ЗначениеПараметра <> Неопределено Тогда
			ЗначениеПараметра.Значение = УчетМСФОПовтИспУХ.ПолучитьСчетаВИерархии(Настройки.ДополнительныеСвойства.Счет);	    	
		КонецЕсли;
		
		ДоработатьСубконтоПоСчету(СхемаКомпоновкиДанных, Настройки.ДополнительныеСвойства.Счет);
		
	КонецЕсли;
	
	Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	ОтборРасшифровки = Настройки.ДополнительныеСвойства.ОтборРасшифровки;
	Отбор = Новый Структура("ВариантДетали,РазвернутоеСальдо,ВыводимыеРесурсы", Ложь, ОтборРасшифровки.Получить("РазвернутоеСальдо"), ОтборРасшифровки.Получить("ВыводимыеРесурсы"));
	ВидыПоказателей = СхемаКомпоновкиДанных.Параметры.ВыводимыеРесурсы.Значение.ВыгрузитьЗначения();
	МСФОУХ.Компоновщик_Поля_Показатели(Новый Структура("Настройки", Настройки), Отбор, ВидыПоказателей);
	
	//Настройки.ДополнительныеСвойства.РасшифровкиРаскрытий;
	ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,,Истина));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстИнформационнойНадписи);

	Узел = Настройки.Структура[0];
	ГруппировкаПриемник = ?(ТипЗнч(Узел) = Тип("ТаблицаКомпоновкиДанных"), Узел.Строки[0], Узел);
	
	ЭлементУО = Настройки.УсловноеОформление.Элементы.Добавить();	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отступ", Настройки.ДополнительныеСвойства.Отступ + 1);
	ЭлементУО.Поля.Элементы.Добавить().Поле = ГруппировкаПриемник.ПоляГруппировки.Элементы[0].Поле;
	
	Настройки.ПараметрыВывода.УстановитьЗначениеПараметра("ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	ТабДок = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(СхемаКомпоновкиДанных, Настройки, 
									Неопределено, ДанныеРасшифровки, , , , Новый ТабличныйДокумент);
									
	ДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Настройки.ДополнительныеСвойства.ИдентификаторФормы); 
	
	Возврат ТабДок;
	
КонецФункции

Процедура ВставитьРасшифровку(ТабДокПриемник, НастройкиРасшифровки, ДополнительныеСвойства, АдресСхемы, ЗаголовокГруппировки, НомерСтрокиДобавления) Экспорт
	
	ДанныеРасшифровки = Неопределено;
	ТабДокРасшифровка = ПолучитьРаскрытиеРасшифровки(АдресСхемы, НастройкиРасшифровки, ДанныеРасшифровки);
	ИмяОбластиРасшифровки = МСФОКлиентСерверУХ.ЗапомнитьДанныеРасшифровки(ДополнительныеСвойства, ДанныеРасшифровки, АдресСхемы);	
	МСФОКлиентСерверУХ.ВставитьОбластьРасшифровки(ТабДокПриемник, ТабДокРасшифровка, ИмяОбластиРасшифровки, ЗаголовокГруппировки, НомерСтрокиДобавления);

КонецПроцедуры

Процедура ДоработатьСубконтоПоСчету(СхемаКД, Счет) Экспорт 
	
	Если Не ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Счет);
	ИмяПоляПрефикс = "Субконто";
	КоличествоСубконто = УчетМСФОПовтИспУХ.ПолучитьМаксКоличествоСубконто();
	
	// Изменение представления и наложения ограничения типа значения.
	Для Каждого НаборДанных Из СхемаКД.НаборыДанных Цикл
		Для Индекс = 1 По КоличествоСубконто Цикл
			
			Поле = НаборДанных.Поля.Найти(ИмяПоляПрефикс + Индекс);
			Если Поле <> Неопределено Тогда
				
				Если Индекс > СвойстваСчета.КоличествоСубконто Тогда // номер субконто больше чем доступно в счете
					
					Поле.ОграничениеИспользования.Условие = Истина;
					Поле.ОграничениеИспользования.Поле = Истина;
					Поле.ОграничениеИспользованияРеквизитов.Условие = Истина;
					Поле.ОграничениеИспользованияРеквизитов.Поле = Истина;
					
					Продолжить;
					
				КонецЕсли;
				
				Поле.ОграничениеИспользования.Условие = Ложь;
				Поле.ОграничениеИспользования.Поле = Ложь;
				Поле.ОграничениеИспользованияРеквизитов.Условие = Ложь;
				Поле.ОграничениеИспользованияРеквизитов.Поле = Ложь;
				
				ТипЗначения = СвойстваСчета["ВидСубконто" + Индекс + "ТипЗначения"];
				Поле.ТипЗначения = ТипЗначения;
				Поле.Заголовок   = СвойстваСчета["ВидСубконто" + Индекс + "Наименование"];
				
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьНастройкиРасшифровки(Знач ДанныеРасшифровки, Знач Компоновщик) Экспорт

	Если ЭтоАдресВременногоХранилища(ДанныеРасшифровки) Тогда		
		ДанныеРасшифровкиХранилища = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
		Если ДанныеРасшифровкиХранилища <> Неопределено Тогда
			Возврат  ДанныеРасшифровкиХранилища.Настройки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Компоновщик.ПолучитьНастройки();
	
КонецФункции

Функция ПолучитьПараметрыОтчетаПоПроводкам(Документ, НомерПроводки) Экспорт
	Возврат Обработки.КорректировкиЗначенийПоказателей.ПолучитьПараметрыОтчетаПоПроводкам(Документ, НомерПроводки);
КонецФункции

Функция УстановитьИспользованиеПараметраСхемы(СхемаКД, ИмяПараметра, Использование) Экспорт 

	ПараметрСчет = СхемаКД.Параметры.Найти(ИмяПараметра);
	Если ПараметрСчет = Неопределено Тогда		
		Возврат Неопределено;	
	КонецЕсли;
	
	ПараметрСчет.Использование 				= ?(Использование, ИспользованиеПараметраКомпоновкиДанных.Всегда, ИспользованиеПараметраКомпоновкиДанных.Авто);
	ПараметрСчет.ВключатьВДоступныеПоля 	= Использование;
	ПараметрСчет.ОграничениеИспользования 	= Не Использование;
	
	Если Не Использование Тогда
	    ПараметрСчет.ЗапрещатьНезаполненныеЗначения = Ложь;
	КонецЕсли;
	
	Возврат ПараметрСчет;

КонецФункции

Процедура СКД_ДоработатьЗапрос(СКД, Настройки, Отбор) Экспорт
	
	ОписаниеРасшифровки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "ОписаниеРасшифровки");
	КлючВарианта = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Настройки.ДополнительныеСвойства, "КлючВариантаПредопределенный", "ОСВ");
	
	РасшифровкаПоКорСчету = ЗначениеЗаполнено(ОписаниеРасшифровки) И (ОписаниеРасшифровки.Группировка.Найти("КорСчет") <> Неопределено);
	
	ТекстСчета = Новый Массив;
	Если Отбор.Свойство("ВариантДетали") И Отбор.ВариантДетали И СтрНайти(КлючВарианта, "ОСВ") > 0 Тогда
		
		Если ЗначениеЗаполнено(Отбор.Счет) Тогда
			ТекстСчета.Добавить("Счет В (&Счета)");
		КонецЕсли;
		
		Если (КлючВарианта = "ОСВ") И (Отбор.ВыводитьЗабалансовыеСчета <> Истина) Тогда
			ТекстСчета.Добавить("НЕ Счет.Забалансовый");
		КонецЕсли;
		
	ИначеЕсли СтрНайти(КлючВарианта, "Счет") > 0 Тогда
		
		Если ЗначениеЗаполнено(Отбор.Счет) Тогда
			ТекстСчета.Добавить("Счет В (&Счета)");
		КонецЕсли;
		
		Если (КлючВарианта = "ОСВ") И (Отбор.ВыводитьЗабалансовыеСчета <> Истина) Тогда
			ТекстСчета.Добавить("НЕ Счет.Забалансовый");
		КонецЕсли;
				
	КонецЕсли;
	
	ТекстСчета = СтрСоединить(ТекстСчета, " И ");
	Для каждого нд Из СКД.НаборыДанных Цикл
		
		Если РасшифровкаПоКорСчету И (СтрНайти(нд.Запрос, "ОстаткиИОбороты") > 0) Тогда
			
			нд.Запрос = СтрЗаменить(нд.Запрос, "ОстаткиИОбороты", "Обороты");
			нд.Запрос = СтрЗаменить(нд.Запрос, "Авто,", "Авто");
			
			Для каждого Поле Из нд.Поля Цикл
				Если СтрНайти(Поле.ПутьКДанным, "Остаток") Тогда
					ТиповыеОтчетыУХ.ДобавитьВычисляемоеПоле(СКД, Поле.ПутьКДанным, "0", Поле.Заголовок, Поле.ТипЗначения);
					Поле.ПутьКДанным = "_" + Поле.ПутьКДанным;
				КонецЕсли;				
			КонецЦикла;
			
		КонецЕсли;
		
		нд.Запрос = СтрЗаменить(нд.Запрос, "&УсловиеСчета", ТекстСчета);
		
	КонецЦикла;
		
 КонецПроцедуры

Функция ПараметрыКарточкаСчетаРСБУ(ОтборРасшифровки) Экспорт
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("НачалоПериода",	ОтборРасшифровки.Период.ДатаНачала);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("КонецПериода", 	КонецДня(ОтборРасшифровки.Период.ДатаОкончания));
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Организация", 	ОтборРасшифровки.Организация);
	ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("Счет", 			ОтборРасшифровки.Счет);
	
	ОтборКД = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	ОтборКД.ИдентификаторПользовательскойНастройки = "Отбор";
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборКД, "Субконто1", ВидСравненияКомпоновкиДанных.Равно, 
															ОтборРасшифровки.Субконто1, , Истина);
	
	Возврат Новый Структура("ПользовательскиеНастройки,ВидРасшифровки,РежимРасшифровки", 
										ПользовательскиеНастройки, 2, Истина);

КонецФункции 
 
#КонецОбласти

#Область ФИ

Функция ПолучитьОписаниеДекорацииПараметровФИ(ФИ, ПараметрыУчетаФИ, ВыборПараметровУчетаФИУХ) Экспорт

	Результат = Новый Структура;
	Результат.Вставить("Заголовок", Справочники.ВидыОбъектовФинансовогоХарактера.ПолучитьОписание(ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера));
	Результат.Вставить("Подсказка", РегистрыСведений.ВыборПараметровУчетаФИ.ПолучитьТекстВыбора(ФИ, ВыборПараметровУчетаФИУХ));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКэшКурсовВалют(Валюты, ДатаКурса)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Курс КАК Курс,
	|	КурсыВалютСрезПоследних.Кратность КАК Кратность,
	|	КурсыВалютСрезПоследних.Валюта.Ссылка КАК Валюта
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта В (&Валюты)) КАК КурсыВалютСрезПоследних");
	
	Запрос.УстановитьПараметр("ДатаКурса", ДатаКурса);
	Запрос.УстановитьПараметр("Валюты", Валюты);
	
	Кэш = Новый Соответствие;
	
	Для каждого СтрокаТЗ Из Запрос.Выполнить().Выгрузить() Цикл	
		Кэш.Вставить(СтрокаТЗ.Валюта, Новый Структура("Курс,Кратность,Валюта", СтрокаТЗ.Курс, СтрокаТЗ.Кратность, СтрокаТЗ.Валюта));	
	КонецЦикла;
	
	Возврат Кэш;

КонецФункции

#Область ДоработкаСсылок

#Область КолонкиЗагрузки

Функция ПолучитьКолонкиЗагрузки(КэшируемыеЗначения)
	
	КолонкиЗагрузки = Новый ТаблицаЗначений;
	КолонкиЗагрузки.Колонки.Добавить("Имя");
	КолонкиЗагрузки.Колонки.Добавить("ТипЗначения");//тип колонок в ТаблицаЗагрузки
	КолонкиЗагрузки.Колонки.Добавить("ТипыПоиска");//массив(ПолноеИмя типа) - для поиска в ЗначенияДляПоиска 
	КолонкиЗагрузки.Колонки.Добавить("ЭтоСчет", Новый ОписаниеТипов("Булево"));
	КолонкиЗагрузки.Колонки.Добавить("ИмяСчетаДляСубконто");
	КолонкиЗагрузки.Колонки.Добавить("НомерСубконто");
	КолонкиЗагрузки.Колонки.Добавить("ВидУчета");
	
	КэшируемыеЗначения.Вставить("ПолноеИмяПоТипу", Новый Соответствие);
	
	Для каждого ТекущаяКолонка Из КэшируемыеЗначения.Колонки Цикл
	
		ТипыКолонки = ТекущаяКолонка.Значение.Типы();
		
		Если ТипыКолонки.Количество() > 10 Тогда
			ДобавитьКолонкуСубконто(КолонкиЗагрузки, ТекущаяКолонка);
			Продолжить;
		КонецЕсли;
		
		ТипыПоиска = ПолучитьТипыПоиска(ТипыКолонки, КэшируемыеЗначения.ПолноеИмяПоТипу);

		Если ТипыПоиска.Количество() = 0 Тогда
			Продолжить;//нет ссылок для поиска
		КонецЕсли;
		
		ДобавитьКолонкуЗагрузки(КолонкиЗагрузки, ТекущаяКолонка, ТипыПоиска);
		
	КонецЦикла;

	КолонкиЗагрузки.Индексы.Добавить("ЭтоСчет");
	КолонкиЗагрузки.Индексы.Добавить("ИмяСчетаДляСубконто");
	
	Возврат КолонкиЗагрузки;
	
КонецФункции

Функция ПолучитьТипыПоиска(ТипыКолонки, КэшПолноеИмяПоТипу)
	
	ТипыПоиска = Новый Массив;
	Для каждого ТипКолонки Из ТипыКолонки Цикл
		
		ПолноеИмяТипа = ПолноеИмяСсылочногоТипа(ТипКолонки, КэшПолноеИмяПоТипу);
		Если ПолноеИмяТипа <> Неопределено Тогда
			ТипыПоиска.Добавить(ПолноеИмяТипа);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипыПоиска;

КонецФункции

Функция ПолноеИмяСсылочногоТипа(ТипДляПоиска, КэшПолноеИмяПоТипу)

	ПолноеИмяТипа = КэшПолноеИмяПоТипу.Получить(ТипДляПоиска);
	Если ПолноеИмяТипа <> Неопределено Тогда
		Возврат ПолноеИмяТипа;
	КонецЕсли;
		
	Если ОбщегоНазначения.ЭтоСсылка(ТипДляПоиска) Тогда
		
		ПолноеИмяТипа = Метаданные.НайтиПоТипу(ТипДляПоиска).ПолноеИмя();
		ПолноеИмяТипа = СтрЗаменить(ПолноеИмяТипа, ".", "_");
		
		КэшПолноеИмяПоТипу.Вставить(ТипДляПоиска, ПолноеИмяТипа);
		
		Возврат ПолноеИмяТипа;
		
	КонецЕсли;

КонецФункции

Процедура ДобавитьКолонкуЗагрузки(КолонкиЗагрузки, ТекущаяКолонка, ТипыПоиска)
	
	НоваяКолонка = КолонкиЗагрузки.Добавить();
	
	НоваяКолонка.Имя 			= ТекущаяКолонка.Представление;
	НоваяКолонка.ТипЗначения 	= ТекущаяКолонка.Значение;
	НоваяКолонка.ТипыПоиска 	= ТипыПоиска;
	НоваяКолонка.ЭтоСчет 		= ЭтоОписаниеТипаСчета(ТекущаяКолонка.Значение);
	НоваяКолонка.ВидУчета 		= ВидУчетаПоИмени(ТекущаяКолонка.Представление);
	
КонецПроцедуры

Функция ЭтоОписаниеТипаСчета(ПроверяемоеОписаниеТипа)

	Возврат 
	ПроверяемоеОписаниеТипа.СодержитТип(Тип("СправочникСсылка.СчетаБД"))
	Или ПроверяемоеОписаниеТипа.СодержитТип(Тип("ПланСчетовСсылка.МСФО"))
	Или ПроверяемоеОписаниеТипа.СодержитТип(Тип("ПланСчетовСсылка.Хозрасчетный"));

КонецФункции

Процедура ДобавитьКолонкуСубконто(КолонкиЗагрузки, ТекущаяКолонка)
	
	ИмяКолонки = ТекущаяКолонка.Представление;
	Если СтрНайти(ИмяКолонки, "Субконто") = 0 Тогда
		Возврат;		
	КонецЕсли;
	
	НоваяКолонка = КолонкиЗагрузки.Добавить();
	
	НоваяКолонка.Имя		= ТекущаяКолонка.Представление;
	НоваяКолонка.ЭтоСчет	= Ложь;
	НоваяКолонка.ВидУчета	= ВидУчетаПоИмени(ИмяКолонки);
	
	ОпределитьСчетНомерПоИмениСубконто(
					НоваяКолонка.Имя, 
					НоваяКолонка.ИмяСчетаДляСубконто, 
					НоваяКолонка.НомерСубконто
				);
	
	КонецПроцедуры

Функция ВидУчетаПоИмени(ИмяКолонки)

	Возврат ?(СтрНайти(ИмяКолонки, "НСБУ") > 0, "НСБУ", "МСФО");

КонецФункции
	
Процедура СоздатьКолонкиЗагрузки(ТаблицаЗагрузки, КолонкиЗагрузки)

	Для каждого Колонка Из КолонкиЗагрузки Цикл
		
		ТекКолонка = ТаблицаЗагрузки.Колонки[Колонка.Имя];
		ИмяКолонки = ТекКолонка.Имя;
		
		ТекКолонка.Имя = "_" + ТекКолонка.Имя;//потом удалим
		ИндексКолонки = ТаблицаЗагрузки.Колонки.Индекс(ТекКолонка);
		
		НоваяКолонка = ТаблицаЗагрузки.Колонки.Вставить(ИндексКолонки, ИмяКолонки, Колонка.ТипЗначения);
	
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ЗаполнитьКолонкиСсылки

Процедура ЗаполнитьКолонкиЗначениямиКэша(ТаблицаЗагрузки, КолонкиЗагрузки, КэшПоискаЗначений, КэшируемыеЗначения, КэшСчетов)
	
	Для Каждого СтрокаТаб Из ТаблицаЗагрузки Цикл
		Для Каждого КолонкаТаб Из КолонкиЗагрузки Цикл
			
			ЗначениеСтрокой = СтрокаТаб["_" + КолонкаТаб.Имя];
			Если Не ЗначениеЗаполнено(ЗначениеСтрокой) Тогда
				Продолжить;
			КонецЕсли;
			
			ТипыПоиска = КолонкаТаб.ТипыПоиска;
			УточненияПоиска = Неопределено;
			Если ЗначениеЗаполнено(КолонкаТаб.ИмяСчетаДляСубконто) Тогда
				
				КэшСчета = КэшСчетов.Найти(СтрокаТаб["_" + КолонкаТаб.ИмяСчетаДляСубконто], "Представление");
				Если КэшСчета = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ТипыПоиска = КэшСчета["ТипыПоиска" + КолонкаТаб.НомерСубконто];
				Если Не ЗначениеЗаполнено(ТипыПоиска) Тогда
					Продолжить;
				КонецЕсли;
				
				Если КэшСчета.НомераСубконто <> Неопределено Тогда
					
					ВстраиваниеУХКлиентСервер
						.ДоработатьУточнениеПоиска(
							УточненияПоиска, 
							СтрокаТаб, 
							КолонкаТаб, 
							КолонкиЗагрузки, 
							КэшСчета
						);
						
				КонецЕсли;

			КонецЕсли;
			
			СтрокаТаб[КолонкаТаб.Имя] = ПолучитьЗначениеКэша(
												ЗначениеСтрокой, 
												ТипыПоиска, 
												КэшПоискаЗначений, 
												УточненияПоиска, 
												КолонкаТаб
											);

			Если Не ЗначениеЗаполнено(СтрокаТаб[КолонкаТаб.Имя]) Тогда
				СообщитьОшибкуПоиска(ЗначениеСтрокой, ТаблицаЗагрузки.Индекс(СтрокаТаб) + 1, 
										КолонкаТаб, ТипыПоиска, КэшируемыеЗначения);	
			КонецЕсли;
			
		КонецЦикла;			
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЗначениеКэша(ЗначениеСтрокой, ТипыПоиска, КэшПоискаЗначений, УточнениеПоиска, КолонкаТаб)

	ЕстьПостфикс = (КолонкаТаб.ЭтоСчет И КолонкаТаб.ВидУчета = "НСБУ");
	
	Для каждого ТекущийТип Из ТипыПоиска Цикл
		
		Если ЕстьПостфикс Тогда
			КэшТипа = КэшПоискаЗначений.Получить(ТекущийТип + "_НСБУ");
		Иначе 
			КэшТипа = КэшПоискаЗначений.Получить(ТекущийТип);
		КонецЕсли;
		
		Если ТипЗнч(КэшТипа) = Тип("Соответствие") Тогда			
			
			ЗначениеПоСтроке = КэшТипа.Получить(ЗначениеСтрокой);
			Если ЗначениеПоСтроке = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Возврат ЗначениеПоСтроке;
			
		КонецЕсли;
		
		Отбор = Новый Структура("Представление", ЗначениеСтрокой);
		Если УточнениеПоиска <> Неопределено Тогда
			ВстраиваниеУХКлиентСервер.ДоработатьОтборКэша(
				Отбор, ТекущийТип, УточнениеПоиска);
		КонецЕсли;
		
		Для каждого СтрокаПоиска Из КэшТипа.НайтиСтроки(Отбор) Цикл
			Возврат СтрокаПоиска.Ссылка;
		КонецЦикла;
		
	КонецЦикла;
			
КонецФункции

Процедура СообщитьОшибкуПоиска(ЗначениеСтрокой, НомерСтрокиОшибки, КолонкаТаб, ТипыПоиска, КэшируемыеЗначения)
	
	ШаблонОшибки = НСтр("ru = 'Строка %1, колонка <%2> - не удалось найти <%3> (%4)'");
	ТипыСтрокой = СтрЗаменить(СтрСоединить(ТипыПоиска, ", "), "_", ".");
	ТекстОшибки = СтрШаблон(ШаблонОшибки, НомерСтрокиОшибки, КолонкаТаб.Имя, ЗначениеСтрокой, ТипыСтрокой);
	//ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Ссылка);
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = ТекстОшибки;
	Сообщение.ИдентификаторНазначения = КэшируемыеЗначения.ИдентификаторНазначения;
	Сообщение.Сообщить();

КонецПроцедуры

#КонецОбласти

#Область ДополнитьКэшЗагрузки

Процедура ДополнитьКэшЗагрузки(КэшПоискаЗначений, ТаблицаЗагрузки, КолонкиЗагрузки, КэшируемыеЗначения, КэшСчетов = Неопределено)

	Если КолонкиЗагрузки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьКэшСчетов			= КэшСчетов;
	ОбработанныеСчета 		= Новый Структура;
	ВидыСубконто_Значения 	= ПолучитьВидыСубконтоКэшаСчетов(КэшСчетов);
	ТабВсеКолонки 			= КолонкиЗагрузки.Получить(0).Владелец();
	
	КонтекстЗапроса = ПолучитьКонтекстЗапроса(КэшСчетов, КэшируемыеЗначения);
		
	Для каждого КолонкаЗагрузки Из КолонкиЗагрузки Цикл
		Если ЗначениеЗаполнено(КолонкаЗагрузки.ИмяСчетаДляСубконто) Тогда
			
			Если ОбработанныеСчета.Свойство(КолонкаЗагрузки.ИмяСчетаДляСубконто) Тогда
				Продолжить;//субконто обработано вместе с первым субконто
			КонецЕсли;
			
			ДополнитьВидыСубконтоЗначениями(ВидыСубконто_Значения, КолонкаЗагрузки, КэшСчетов, ТабВсеКолонки, ТаблицаЗагрузки);

		Иначе 
			
			ЗначенияДляПоиска = ТаблицаЗагрузки.ВыгрузитьКолонку("_" + КолонкаЗагрузки.Имя);
			ТипыПоиска = КолонкаЗагрузки.ТипыПоиска;
			
			ДобавитьКолонкуВЗапрос(КонтекстЗапроса, ТипыПоиска, ЗначенияДляПоиска, КолонкаЗагрузки.ВидУчета);
			
		КонецЕсли;		
	КонецЦикла;
	
	ДобавитьКолонкиСубконтоВЗапрос(КонтекстЗапроса, ВидыСубконто_Значения, КэшируемыеЗначения, "МСФО");//ВидУчета - учесть НСБУ
	
	ДополнитьКэшПоиска(КэшПоискаЗначений, КонтекстЗапроса);

КонецПроцедуры

Функция ПолучитьВидыСубконтоКэшаСчетов(КэшСчетов = Неопределено)

	ВидыСубконто_Значения = Новый Соответствие;
	
	Если КэшСчетов = Неопределено Тогда
		Возврат ВидыСубконто_Значения;
	КонецЕсли;
	
	ВидыСубконто = КэшСчетов.ВыгрузитьКолонку("ВидСубконто1");
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСубконто, КэшСчетов.ВыгрузитьКолонку("ВидСубконто2"));
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВидыСубконто, КэшСчетов.ВыгрузитьКолонку("ВидСубконто3"));
	
	ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВидыСубконто);
	
	Для каждого ВидСубконто Из ВидыСубконто Цикл
		ВидыСубконто_Значения.Вставить(ВидСубконто, Новый Массив);		
	КонецЦикла;

	Возврат ВидыСубконто_Значения;
	
КонецФункции

Функция ПолучитьКонтекстЗапроса(КэшСчетов = Неопределено, КэшируемыеЗначения = Неопределено)
	
	ПараметрыЗапроса = Новый Структура;
	
	Если КэшируемыеЗначения <> Неопределено Тогда
	    Для каждого ПараметрИсточник Из КэшируемыеЗначения.ОтборыТипов.Параметры Цикл
			Если ЗначениеЗаполнено(ПараметрИсточник.Значение) Тогда
				ПараметрыЗапроса.Вставить(ПараметрИсточник.Ключ, ПараметрИсточник.Значение);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
	КонтекстЗапроса = Новый Структура("ТекстЗапроса, Параметры, НомераТаблиц, КэшСчетов", 
								Новый Массив, ПараметрыЗапроса, Новый Соответствие, КэшСчетов);
	Возврат КонтекстЗапроса;

КонецФункции

Процедура ДобавитьКолонкуВЗапрос(КонтекстЗапроса, ТипыПоиска, ЗначенияДляПоиска, ВидУчета)
	
	Для каждого ПолноеИмяТипа Из ТипыПоиска Цикл
		
		Точка = СтрНайти(ПолноеИмяТипа, "_");//в имени могут быть "_"
		мдТипа = Метаданные.НайтиПоПолномуИмени(Лев(ПолноеИмяТипа, Точка-1) + "." + Сред(ПолноеИмяТипа, Точка+1));
		
		ИмяПараметра = СтрЗаменить(ПолноеИмяТипа, ".", "_");
		Если (ВидУчета = "НСБУ") И (ПолноеИмяТипа = "Справочник_СчетаБД") Тогда
			ИмяПараметра = ИмяПараметра + "_НСБУ";
		КонецЕсли;
		
		Если КонтекстЗапроса.Параметры.Свойство(ИмяПараметра) Тогда
			//запрос уже добавлен
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КонтекстЗапроса.Параметры[ИмяПараметра], ЗначенияДляПоиска);
		Иначе 
			
			КонтекстЗапроса.Параметры.Вставить(ИмяПараметра, ЗначенияДляПоиска);
			КонтекстЗапроса.НомераТаблиц.Вставить(ИмяПараметра, КонтекстЗапроса.НомераТаблиц.Количество());
			
			ТекстЗапроса = ТекстЗапроса_ПоискТипа(мдТипа, ВидУчета);
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Поиск", "&" + ИмяПараметра);
			//** ОтборыТипов
			КонтекстЗапроса.ТекстЗапроса.Добавить(ТекстЗапроса);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДополнитьКэшПоиска(КэшПоискаЗначений, КонтекстЗапроса)

	Если КонтекстЗапроса.ТекстЗапроса.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = СтрСоединить(КонтекстЗапроса.ТекстЗапроса, ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета());
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Для каждого ПараметрЗапроса Из КонтекстЗапроса.Параметры Цикл
		Если ТипЗнч(ПараметрЗапроса.Значение) = Тип("Массив") Тогда
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(ПараметрЗапроса.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, КонтекстЗапроса.Параметры);
	Если Не Запрос.Параметры.Свойство("Организация") Тогда
		Запрос.УстановитьПараметр("Организация", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	РезультатПакет = Запрос.ВыполнитьПакет();
	ТипыКэшируемыеТаблицей = ВстраиваниеУХКлиентСервер.ТипыКэшируемыеТаблицей();
	
	Для Каждого НомерТаблицы Из КонтекстЗапроса.НомераТаблиц Цикл
		
		Если ТипыКэшируемыеТаблицей.Получить(НомерТаблицы.Ключ) <> Неопределено Тогда
			
			КэшТипа = ПолучитьКэшТипаТаблицей(РезультатПакет[НомерТаблицы.Значение]);
			КэшПоискаЗначений.Вставить(НомерТаблицы.Ключ, КэшТипа);
			Продолжить;	
			
		КонецЕсли;
		
		КэшТипа = Новый Соответствие;
		
		Выборка = РезультатПакет[НомерТаблицы.Значение].Выбрать();
		Пока Выборка.Следующий() Цикл	
			КэшТипа.Вставить(Выборка.Представление, Выборка.Ссылка);			
		КонецЦикла;
		
		КэшПоискаЗначений.Вставить(НомерТаблицы.Ключ, КэшТипа);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКэшТипаТаблицей(РезультатЗапроса)
	
	КэшТипа = РезультатЗапроса.Выгрузить();
	
	ИменаКолонок = ОбщегоНазначения.ВыгрузитьКолонку(КэшТипа.Колонки, "Имя");
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(ИменаКолонок, "Ссылка");
	КэшТипа.Индексы.Добавить(СтрСоединить(ИменаКолонок, ","));
	
	Возврат КэшТипа;

КонецФункции

Функция ТекстЗапроса_ПоискТипа(мдТипа, ВидУчета = "МСФО", ОтборПоОрганизации = Истина)
	
	ТипСтрокой = мдТипа.ПолноеИмя();//Например, "Справочник.Номенклатура"
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	т.Ссылка КАК Ссылка,
	|	т.Наименование КАК Представление
	|ИЗ
	|	Справочник.Номенклатура КАК т
	|ГДЕ
	|	т.Наименование В (&Поиск)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Номенклатура", ТипСтрокой);
	Если СтрНачинаетсяС(ТипСтрокой, "ПланСчетов") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Наименование", ".Код");
	ИначеЕсли СтрНачинаетсяС(ТипСтрокой, "Справочник") 
		Или СтрНачинаетсяС(ТипСтрокой, "ПланВидовХарактеристик") Тогда
		
		Если мдТипа.ДлинаНаименования = 0 Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Наименование", ".Код");
		ИначеЕсли мдТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода Тогда 
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Наименование", ".Код");
		ИначеЕсли мдТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Наименование", ".Код");
		КонецЕсли;
		
	ИначеЕсли СтрНачинаетсяС(ТипСтрокой, "Документ") Тогда  		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Наименование", "т.Номер");
	Иначе // Если СтрНачинаетсяС(ТипСтрокой, "Перечисление") Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Наименование В (&Поиск)", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Наименование", "ПРЕДСТАВЛЕНИЕ(т.Ссылка)");	
		
	КонецЕсли;
	
	ВстраиваниеУХКлиентСервер.ДоработатьЗапросПоиска(ТекстЗапроса, ТипСтрокой, ВидУчета, ОтборПоОрганизации);
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

#Область ВидыСубконтоЗагрузки

Процедура ДополнитьВидыСубконтоЗначениями(ВидыСубконто_Значения, КолонкаЗагрузки, КэшСчетов, ТабВсеКолонки, ТаблицаЗагрузки)
	
	КолонкиСубконто = ТабВсеКолонки.НайтиСтроки(Новый Структура("ИмяСчетаДляСубконто", КолонкаЗагрузки.ИмяСчетаДляСубконто));
	
	Для каждого Стр Из ТаблицаЗагрузки Цикл
		
		СчетДляПоиска = Стр["_" + КолонкаЗагрузки.ИмяСчетаДляСубконто];
		СтрокаКэша = КэшСчетов.Найти(СчетДляПоиска, "Представление");
		Если СтрокаКэша = Неопределено Тогда
			Продолжить;//ошибка поиска по коду счета
		КонецЕсли;
		
		Для Каждого КолонкаСубконто Из КолонкиСубконто Цикл
			
			Если КолонкаСубконто.НомерСубконто > СтрокаКэша.КоличествоСубконто Тогда
				Продолжить;					
			КонецЕсли;
			
			ВидСубконтоКэша = СтрокаКэша["ВидСубконто" + КолонкаСубконто.НомерСубконто];
			ВидыСубконто_Значения[ВидСубконтоКэша].Добавить(стр["_" + КолонкаСубконто.Имя]);					
			
		КонецЦикла;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОпределитьСчетНомерПоИмениСубконто(ИмяСубконто, ИмяСчетаДляСубконто, НомерСубконто)

	ИмяСчетаДляСубконто = СтрЗаменить(ИмяСубконто, "Субконто", "");
	Для индекс = 1 По 5 Цикл
		
		СубконтоНомер = Строка(индекс);
		Если СтрНайти(ИмяСчетаДляСубконто, СубконтоНомер) > 0 Тогда
			
			НомерСубконто = Индекс;
			ИмяСчетаДляСубконто = СтрЗаменить(ИмяСчетаДляСубконто, СубконтоНомер, "");
			Если ИмяСчетаДляСубконто = "Дт" Тогда
				ИмяСчетаДляСубконто = "СчетДт";
			ИначеЕсли ИмяСчетаДляСубконто = "Кт" Тогда
				ИмяСчетаДляСубконто = "СчетКт";
			ИначеЕсли ИмяСчетаДляСубконто = "" Тогда
				ИмяСчетаДляСубконто = "Счет";
			КонецЕсли;
			
			Прервать;				
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьКолонкиСубконтоВЗапрос(КонтекстЗапроса, ВидыСубконто_Значения, КэшируемыеЗначения, ВидУчета = "МСФО")
	
	ПолноеИмяПоТипу = КэшируемыеЗначения.ПолноеИмяПоТипу;
	
	Для каждого ВидСубконто Из ВидыСубконто_Значения Цикл
		
		ЗначенияДляПоиска = ВидСубконто.Значение;
		ТипыПоиска = ПолучитьТипыПоиска(ВидСубконто.Ключ.ТипЗначения.Типы(), ПолноеИмяПоТипу);
		
		НомерСчетаБД = ТипыПоиска.Найти("Справочник_СчетаБД");
		Если НомерСчетаБД <> Неопределено Тогда
			ТипыПоиска.Удалить(НомерСчетаБД);//СчетаБД нельзя очищать при загрузке
		КонецЕсли;
		
		ДобавитьКолонкуВЗапрос(КонтекстЗапроса, ТипыПоиска, ЗначенияДляПоиска, ВидУчета);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКэшСчетов(КэшПоискаЗначений, КэшируемыеЗначения)

	КэшСчетов = Новый ТаблицаЗначений;
	КэшСчетов.Колонки.Добавить("Представление");
	КэшСчетов.Колонки.Добавить("СчетСсылка");
	КэшСчетов.Колонки.Добавить("КоличествоСубконто", ОбщегоНазначения.ОписаниеТипаЧисло(2, 0));
	КэшСчетов.Колонки.Добавить("ВидСубконто1");
	КэшСчетов.Колонки.Добавить("ВидСубконто2");
	КэшСчетов.Колонки.Добавить("ВидСубконто3");
	КэшСчетов.Колонки.Добавить("ТипыПоиска1");
	КэшСчетов.Колонки.Добавить("ТипыПоиска2");
	КэшСчетов.Колонки.Добавить("ТипыПоиска3");
	КэшСчетов.Колонки.Добавить("НомераСубконто");
	
	ПолноеИмяПоТипу = КэшируемыеЗначения.ПолноеИмяПоТипу;
	
	Для каждого КэшТипа Из КэшПоискаЗначений Цикл
		Для каждого Код_Счет Из КэшТипа.Значение Цикл
			
			СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Код_Счет.Значение);
			
			СтрокаТаб = КэшСчетов.Добавить();
			
			СтрокаТаб.Представление 		= Код_Счет.Ключ;
			СтрокаТаб.СчетСсылка 			= Код_Счет.Значение;
			СтрокаТаб.КоличествоСубконто 	= СвойстваСчета.КоличествоСубконто;
			
			Для НомерСубконто = 1 По СвойстваСчета.КоличествоСубконто Цикл
				
				отСубконто = СвойстваСчета["ВидСубконто" + НомерСубконто + "ТипЗначения"];
				СтрокаТаб["ВидСубконто" + НомерСубконто] = СвойстваСчета["ВидСубконто" + НомерСубконто + "Ссылка"];
				СтрокаТаб["ТипыПоиска" + НомерСубконто] = ПолучитьТипыПоиска(отСубконто.Типы(), ПолноеИмяПоТипу);

			КонецЦикла;
			
			ВстраиваниеУХКлиентСервер.
					ЗаполнитьНомераСубконтоКэшаСчетов(СтрокаТаб);
					
		КонецЦикла;	
	КонецЦикла;
	
	Возврат КэшСчетов;
	
КонецФункции

#КонецОбласти

#Область ИзменитьПараметрыВыбораПолейСубконто

Функция ПолучитьПараметрыВыбораСубконто(КэшируемыеЗначения)

	//Организация, Контрагент, СчетУчета
	
	

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

