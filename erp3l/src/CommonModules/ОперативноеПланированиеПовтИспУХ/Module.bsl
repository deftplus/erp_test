
#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьПараметрыОперПланирования(Предназначение, Знач ДатаПараметровЛимитирования = неопределено) Экспорт
	
  	Если ДатаПараметровЛимитирования = неопределено Тогда
		ДатаПараметровЛимитирования = '00010101';
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ВидБюджета", Предназначение);
	Результат.Вставить("ПериодичностьОперативногоПланирования",	Перечисления.Периодичность.Месяц);
	Результат.Вставить("ПланированиеИРезервированиеОдновременно", Ложь);
	Результат.Вставить("ИспользоватьПланирование",				Ложь);
	Результат.Вставить("ИспользоватьЛимитирование",				Ложь);
	Результат.Вставить("ИспользоватьРезервирование",			Ложь);
	Результат.Вставить("СпособОпределенияВалютыЛимитирования",	Перечисления.СпособыОпределенияВалютыЛимитирования.ПустаяСсылка());
	Результат.Вставить("ПериодичностьЛимитирования",  			Перечисления.Периодичность.Год);
	Результат.Вставить("КоличествоПериодовЛимитирования", 		1);
	Результат.Вставить("ВидГоризонтаЛимитирования", 			Перечисления.ВидыГоризонтовПланирования.СвободныйГоризонт);
	Результат.Вставить("ПервыйПериодЛимитирования",				Справочники.Периоды.ПустаяСсылка());
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предназначение", Предназначение);
	Запрос.УстановитьПараметр("ДатаПараметровЛимитирования", ДатаПараметровЛимитирования);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОперативногоПланирования.Предназначение КАК ВидБюджета,
	|	ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования КАК ПериодичностьОперативногоПланирования,
	|	ПараметрыОперативногоПланирования.ПланированиеИРезервированиеОдновременно КАК ПланированиеИРезервированиеОдновременно,
	|	ПараметрыОперативногоПланирования.Использовать КАК ИспользоватьПланирование,
	|	ЕСТЬNULL(ПараметрыЛимитированияСрезПоследних.ИспользоватьЛимитирование, ЛОЖЬ) КАК ИспользоватьЛимитирование,
	|	ЕСТЬNULL(ПараметрыЛимитированияСрезПоследних.ИспользоватьРезервирование, ЛОЖЬ) КАК ИспользоватьРезервирование,
	|	ЕСТЬNULL(ПараметрыЛимитированияСрезПоследних.СпособОпределенияВалютыЛимитирования, ЗНАЧЕНИЕ(Перечисление.СпособыОпределенияВалютыЛимитирования.ВалютаУпрУчета)) КАК СпособОпределенияВалютыЛимитирования,
	|	ЕСТЬNULL(ПараметрыЛимитированияСрезПоследних.ПериодичностьЛимитирования, ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)) КАК ПериодичностьЛимитирования,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыГоризонтовПланирования.СвободныйГоризонт) КАК ВидГоризонтаЛимитирования,
	|	ЕСТЬNULL(ПараметрыЛимитированияСрезПоследних.КоличествоПериодовЛимитирования, 1) КАК КоличествоПериодовЛимитирования,
	|	ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка) КАК ПервыйПериодЛимитирования
	|ИЗ
	|	РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЛимитирования.СрезПоследних(&ДатаПараметровЛимитирования, ВидБюджета.Предназначение = &Предназначение) КАК ПараметрыЛимитированияСрезПоследних
	|		ПО ПараметрыОперативногоПланирования.ВидБюджета = ПараметрыЛимитированияСрезПоследних.ВидБюджета
	|ГДЕ
	|	ПараметрыОперативногоПланирования.Предназначение = &Предназначение";
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Выборка = Рез.Выбрать();
	Выборка.Следующий();
	
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	Если ЗначениеЗаполнено(ДатаПараметровЛимитирования) Тогда
		Результат.ПервыйПериодЛимитирования = ВстраиваниеОПКПереопределяемый.ПолучитьПериодПоСдвигу(НачалоГода(ДатаПараметровЛимитирования), 0, Результат.ПериодичностьЛимитирования);
	Иначе
		Результат.ПервыйПериодЛимитирования = Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
	//
	Если НЕ Результат.ИспользоватьЛимитирование И Результат.ИспользоватьРезервирование Тогда
		Результат.ИспользоватьРезервирование = Ложь;
	КонецЕсли;
	
	// 
	РазрешенныеОперации = ОперативноеПланированиеПовтИспУХ.РазрешенныеОперацииОперПлана(Предназначение);
	Если РазрешенныеОперации[Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов] = неопределено Тогда
		Результат.ИспользоватьЛимитирование = Ложь;
		Результат.ИспользоватьРезервирование = Ложь;
	КонецЕсли;
	Если РазрешенныеОперации[Перечисления.ВидыОперацийОперативныйПлан.Резервирование] = неопределено Тогда
		Результат.ИспользоватьРезервирование = Ложь;
	КонецЕсли;
	Если РазрешенныеОперации[Перечисления.ВидыОперацийОперативныйПлан.Планирование] = неопределено Тогда
		Результат.ИспользоватьПланирование = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПараметрыОперПланирования()

Функция РазрешенныеОперацииОперПлана(ВидБюджета) Экспорт
	
	Результат = Новый Соответствие;
	Результат.Вставить(Перечисления.ВидыОперацийОперативныйПлан.Планирование, Истина);
	Результат.Вставить(Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов, Истина);
	Результат.Вставить(Перечисления.ВидыОперацийОперативныйПлан.Резервирование, Истина);
	
	//
	ОперативноеПланированиеУХПереопределяемый.РазрешенныеОперацииОперПланаРешения(ВидБюджета, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ИспользоватьЛимитирование(ВидБюджета) Экспорт
	
	Возврат ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(ВидБюджета).ИспользоватьЛимитирование;
	
КонецФункции

// Возвращает признак того, что резервирование может формировать лимиты
// Параметры:
//		нет
// Возвращаемое значение:
// 		Булево - может/не может формировать лимит
//
Функция ОперативныйПланМожетФормироватьЛимиты(ВидБюджета, ДатаНастроекЛимитирования) Экспорт
	
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(ВидБюджета, ДатаНастроекЛимитирования);
	Возврат ПараметрыОП.ИспользоватьЛимитирование;
	
КонецФункции 

// Возвращает список доступных операций опер.плана
Функция ДоступныеОперацииОперПлана(Предназначение, Знач ДатаНастроекЛимитирования = неопределено) Экспорт
	
	Если ДатаНастроекЛимитирования = неопределено Тогда
		ДатаНастроекЛимитирования = '00010101';
	КонецЕсли;
	
	//
	ДанныеВыбора = Новый СписокЗначений;
	
	//
	ПараметрыОП = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение, ДатаНастроекЛимитирования);
	
	//
	Если ПараметрыОП.ИспользоватьПланирование Тогда
		Если ПараметрыОП.ИспользоватьЛимитирование И ПараметрыОП.ИспользоватьРезервирование 
			И ПараметрыОП.ПланированиеИРезервированиеОдновременно Тогда
			ДанныеВыбора.Добавить(Перечисления.ВидыОперацийОперативныйПлан.ПланированиеИРезервирование);
		Иначе
			ДанныеВыбора.Добавить(Перечисления.ВидыОперацийОперативныйПлан.Планирование);
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыОП.ИспользоватьЛимитирование Тогда
		ДанныеВыбора.Добавить(Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов);
		
		Если ПараметрыОП.ИспользоватьРезервирование	И НЕ ПараметрыОП.ПланированиеИРезервированиеОдновременно Тогда
			ДанныеВыбора.Добавить(Перечисления.ВидыОперацийОперативныйПлан.Резервирование);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Функция возвращает массив видов бюджета, с незаполненными параметрами оперативного планирования
Функция ПолучитьВидыБюджетовСОшибкамиНастройкиОперативногоПланирования(ДоступныеОперацииНаДату) экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОперативногоПланирования.Предназначение КАК Предназначение
	|ИЗ
	|	РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|ГДЕ
	|	ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования = ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)
	|	ИЛИ ПараметрыОперативногоПланирования.Использовать = ЛОЖЬ";
	
	МассивОшибок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Предназначение");
	
	// Если по бюджету закупок нет доступных операций, то его убираем.
	Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов;
	Если МассивОшибок.Найти(Предназначение) = неопределено 
		И ОперативноеПланированиеПовтИспУХ.ДоступныеОперацииОперПлана(Предназначение, ДоступныеОперацииНаДату).Количество() = 0 Тогда
		МассивОшибок.Добавить(Предназначение);
	КонецЕсли;
	
	Возврат МассивОшибок;
	
КонецФункции

// Возвращает признак того, что необходимо актуализировать показатели бюджетирования по резерву и факту при проведении
// Параметры:
//		нет
// Возвращаемое значение:
// 		Булево - актуализировать или нет показатели бюджетирования
//
Функция АктуализироватьПоказателиБюджетированияРезервФакт() Экспорт
	
	Возврат ВстраиваниеОПКПереопределяемый.КонстантаАктуализироватьПоказателиБюджетированияРезервФакт();
	
КонецФункции 

Функция ИспользуетсяОдновременноеПланированиеИЛимитирование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПараметрыОперативногоПланирования.ВидБюджета КАК ВидБюджета
	|ИЗ
	|	РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|ГДЕ
	|	ПараметрыОперативногоПланирования.ПланированиеИРезервированиеОдновременно = ИСТИНА";
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ПолучитьТипыПредопределенныхАналитик() экспорт
	
	АОП = Справочники.АналитикиОперативногоПланирования;
	
	Результат = Новый Соответствие;
	
	//
	Результат.Вставить(АОП.ВидБюджета,			Метаданные.ОпределяемыеТипы.Предназначения.Тип);
	Результат.Вставить(АОП.Период,				Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	Результат.Вставить(АОП.Валюта,				Метаданные.ОпределяемыеТипы.Валюты.Тип);
	Результат.Вставить(АОП.ПриходРасход,		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход"));
	Результат.Вставить(АОП.СтатьяБюджета,		Метаданные.ПланыВидовХарактеристик.ВидыБюджетов.Тип);

	Результат.Вставить(АОП.Аналитика1,			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	Результат.Вставить(АОП.Аналитика2,			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	Результат.Вставить(АОП.Аналитика3,			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	Результат.Вставить(АОП.Аналитика4,			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	Результат.Вставить(АОП.Аналитика5,			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	Результат.Вставить(АОП.Аналитика6,			Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
	Результат.Вставить(АОП.ЦФО,					Метаданные.ОпределяемыеТипы.ЦФО.Тип);
	Результат.Вставить(АОП.Проект,				Метаданные.ОпределяемыеТипы.Проекты.Тип);
	Результат.Вставить(АОП.Организация,			Метаданные.ОпределяемыеТипы.Организации.Тип);
	Результат.Вставить(АОП.Контрагент,			Метаданные.ОпределяемыеТипы.АналитикаПланированияКонтрагент.Тип);
	Результат.Вставить(АОП.ДоговорКонтрагента,	Метаданные.ОпределяемыеТипы.Договоры.Тип);
	//
	Результат.Вставить(АОП.Номенклатура,		Метаданные.ОпределяемыеТипы.АналитикаПланированияНоменклатура.Тип);
	Результат.Вставить(АОП.Характеристика,		Метаданные.ОпределяемыеТипы.ХарактеристикиНоменклатуры.Тип);
	Результат.Вставить(АОП.МестоПоставки,		Метаданные.ОпределяемыеТипы.МестаПоставки.Тип);
	Результат.Вставить(АОП.Менеджер,			Метаданные.ОпределяемыеТипы.ФизическоеЛицо.Тип);
	Результат.Вставить(АОП.Приоритет,			Метаданные.ОпределяемыеТипы.ПриоритетыПотребностей.Тип);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипПользовательскойАналитики(ТипДанных) экспорт
	
	Возврат ТипДанных.ТипЗначения;
	
КонецФункции

Функция ПолучитьТипАналитикиОперПланирования(ВидАналитики, ВидБюджета = неопределено) Экспорт
	
	//
	Если НЕ ЗначениеЗаполнено(ВидАналитики) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	// Для статьи бюджета возвращаем единый тип
	Если ВидАналитики = Справочники.АналитикиОперативногоПланирования.СтатьяБюджета 
		И ТипЗнч(ВидБюджета) = Тип("ПеречислениеСсылка.ПредназначенияЭлементовСтруктурыОтчета")
		И ЗначениеЗаполнено(ВидБюджета) Тогда
		
		Если ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияДенежныхСредств");
		ИначеЕсли ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.СтатьиДоходовИРасходов");
		ИначеЕсли ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
			Возврат Новый ОписаниеТипов("СправочникСсылка.СтатьиДвиженияРесурсов");
		КонецЕсли;
		
	КонецЕсли;
	
	//
	ТипыПредопределенныхАналитики = ОперативноеПланированиеПовтИспУХ.ПолучитьТипыПредопределенныхАналитик();
	ТипДанных = ТипыПредопределенныхАналитики[ВидАналитики];
	Если ТипДанных = неопределено Тогда
		
		//
		РеквизитыВидаАналитики = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВидАналитики, "ТипДанных, Предопределенный");
		Если РеквизитыВидаАналитики.Предопределенный И ЗначениеЗаполнено(РеквизитыВидаАналитики.Предопределенный) Тогда
			ТипДанных = ОперативноеПланированиеПовтИспУХ.ПолучитьТипПользовательскойАналитики(РеквизитыВидаАналитики.ТипДанных);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТипДанных;
	
КонецФункции

Функция ПолучитьДоступныеДляВыбораАналитикиОперативногоПланирования() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитикиОперативногоПланирования.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АналитикиОперативногоПланирования КАК АналитикиОперативногоПланирования
	|ГДЕ
	|	АналитикиОперативногоПланирования.Ссылка <> ЗНАЧЕНИЕ(Справочник.АналитикиОперативногоПланирования.ДокументПланирования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	АналитикиОперативногоПланирования.Наименование";
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат ДанныеВыбора;
	
КонецФункции

// Функция возвращает структуру с параметрами периода: ДатаНачала, ДатаОкончания, Периодичность, Произвольный
Функция ПараметрыПериода(Период) Экспорт
	Возврат ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Период, "Ссылка, ДатаНачала, ДатаОкончания, Периодичность, Произвольный");
КонецФункции

// Функция возвращает элемент справочника Периоды соответствующий дате и периодичности
Функция ПериодПоДатеИПериодичности(Дата, Периодичность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", НачалоДня(Дата));
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Периоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Произвольный = ЛОЖЬ
	|	И Периоды.ПометкаУдаления = ЛОЖЬ
	|	И Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала <= &Дата
	|	И Периоды.ДатаОкончания >= &Дата";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

#КонецОбласти

 
