#Область ПрограммныйИнтерфейс

Процедура ОтменитьОптимизациюКалендаря(ТекущийПользователь) Экспорт
	
	ВерсияПлатежногоКалендаря = Справочники.СохраненныеВерсииПлатежногоКалендаря.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаУдалитьТекущуюОптимизацию();
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ВерсияПлатежногоКалендаря", ВерсияПлатежногоКалендаря);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	НомерПакета = РезультатЗапроса.Количество();
	
	НачатьТранзакцию();
	Попытка
		
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		
		// восстанавливаем отмененные операции
		НомерПакета = НомерПакета - 1;
		ВыборкаОтмененныеОперации = РезультатЗапроса[НомерПакета].Выбрать();
		Пока ВыборкаОтмененныеОперации.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(МЗ, ВыборкаОтмененныеОперации);
			МЗ.Прочитать();
			МЗ.Активна = Истина;
			МЗ.ИдентификаторОтменившейОперации = ОбщегоНазначенияКлиентСерверУХ.ПустойУникальныйИдентификатор();
			МЗ.Записать();
		КонецЦикла;
		
		// Удаляем операции оптимизации
		НомерПакета = НомерПакета - 1;
		ВыборкаОперацииОптимизации = РезультатЗапроса[НомерПакета].Выбрать();
		Пока ВыборкаОперацииОптимизации.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(МЗ, ВыборкаОперацииОптимизации);
			МЗ.Удалить();
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;	
	
КонецПроцедуры

Функция ТекущееСостояниеКалендаря(ПараметрыОтчета) Экспорт
	
	СостояниеКалендаря = НовыйСостояниеКалендаря();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		ТекстЗапросаСостояниеКалендаря_Остатки() 
		+ ТекстЗапросаСостояниеКалендаря_ДниКалендаря()
		+ ТекстЗапросаСостояниеКалендаря_Заявки()
		+ ТекстЗапросаСостояниеКалендаря_ЛимитыВнутригрупповыхПеремещений()
		+ ТекстЗапросаСостояниеКалендаря_КурсыВалют()
		+ ТекстЗапросаСостояниеКалендаря_ДоговорыОвердрафта()
		+ ТекстЗапросаСостояниеКалендаря_ДоговорыКредита()
		+ ТекстЗапросаСостояниеКалендаря_Выборка();
		
	ПрименитьОтборОтчетаКЗапросуСостояния(Запрос, ПараметрыОтчета.НастройкаОтбора);	
			
	ТекущийПользователь = ПараметрыОтчета.ТекущийПользователь;	
	ПустойБанковскийСчет = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчет();
	ПериодОтбораРабочий	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ПериодОтбора", Новый СтандартныйПериод);
	ПлановыеКурсыРабочая = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "ПлановыеКурсы", Новый ТаблицаЗначений);
	МатрицаВесовЛиквидности = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтчета, "МатрицаВесовЛиквидности", Новый ТаблицаЗначений);
	ДатаНачалаПериода = ПериодОтбораРабочий.ДатаНачала;
	ДатаОкончанияПериода = ПериодОтбораРабочий.ДатаОкончания;
	ГоризонтОперативногоПланирования = ПараметрыОтчета.ГоризонтОперативногоПланирования;
	ГоризонтТактическогоПланирования = КонецМесяца(ГоризонтОперативногоПланирования);
	
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", ПустойБанковскийСчет);
	Запрос.УстановитьПараметр("ВерсияПлатежногоКалендаря", Справочники.СохраненныеВерсииПлатежногоКалендаря.ПустаяСсылка());
	Запрос.УстановитьПараметр("ГоризонтОперативногоПланирования", ГоризонтОперативногоПланирования);
	Запрос.УстановитьПараметр("ГоризонтТактическогоПланирования", ГоризонтТактическогоПланирования);
	Запрос.УстановитьПараметр("НачалоПериодаОтбора", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериодаОтбора", ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Пользователь", ТекущийПользователь);
	Запрос.УстановитьПараметр("ПроизводственныйКалендарь", ПараметрыОтчета.ПроизводственныйКалендарь);
	Запрос.УстановитьПараметр("ТЗ_ПлановыеКурсы", ПлановыеКурсыРабочая);
	Запрос.УстановитьПараметр("МатрицаВесовЛиквидности", МатрицаВесовЛиквидности);
	Запрос.УстановитьПараметр("НачалоТекущегоДня", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ЗапланированныеКредиты", ПараметрыОтчета.ЗапланированныеКредиты);
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	НомерТаблицы = РезультатыЗапроса.Количество();
	
	// Остатки
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаОстатков = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ТаблицаОстатков.Индексы.Добавить("БанковскийСчет");
	ТаблицаОстатков.Индексы.Добавить("БанковскийСчет, Дата");
	ТаблицаОстатков.Индексы.Добавить("Организация, Валюта");
	ТаблицаОстатков.Индексы.Добавить("Организация, Валюта, Дата");
	СостояниеКалендаря.Остатки = ТаблицаОстатков;
	
	// Заявки
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаЗаявок = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ТаблицаЗаявок.Колонки.Добавить("ИсходнаяЗаявка", Новый ОписаниеТипов("Структура"));
	ТаблицаЗаявок.Индексы.Добавить("Заявка");
	ТаблицаЗаявок.Индексы.Добавить("БанковскийСчет");
	СостояниеКалендаря.Заявки = ТаблицаЗаявок;

	// Лимиты внутригрупповых переводов
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаЛимитовВнутригрупповыхПереводов = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ДобавитьКолонкуИндексСтрокиВТаблицуЗначений(ТаблицаЛимитовВнутригрупповыхПереводов, "ИндексСтроки");
	ТаблицаЛимитовВнутригрупповыхПереводов.Индексы.Добавить("ОрганизацияЗачисления, Валюта");
	СостояниеКалендаря.ЛимитыВнутригрупповыхПереводов = ТаблицаЛимитовВнутригрупповыхПереводов;
	
	// Курсы Валют
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаКурсовВалют = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ТаблицаКурсовВалют.Индексы.Добавить("Валюта, Дата");
	СостояниеКалендаря.КурсыВалют = ТаблицаКурсовВалют;
		
	// Дни календаря
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаДнейКалендаря = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	СостояниеКалендаря.ДниКалендаря = ТаблицаДнейКалендаря;
	
	// Договоры овердрафта
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаДоговорыОвердрафта = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ТаблицаДоговорыОвердрафта.Индексы.Добавить("БанковскийСчет");
	СостояниеКалендаря.ДоговорыОвердрафта = ТаблицаДоговорыОвердрафта;
	
	// Лимиты по кредитам
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаЛимитыКредитов = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ТаблицаЛимитыКредитов.Индексы.Добавить("БазовыйДоговорКредита");
	ДобавитьКолонкуИндексСтрокиВТаблицуЗначений(ТаблицаЛимитыКредитов, "ИндексСтроки");
	СостояниеКалендаря.ЛимитыКредитов = ТаблицаЛимитыКредитов;
	
	// Договоры кредита
	НомерТаблицы = НомерТаблицы - 1;
	ТаблицаДоговорыКредита = РезультатыЗапроса[НомерТаблицы].Выгрузить();
	ТаблицаДоговорыКредита.Индексы.Добавить("Организация, Валюта");  
	СостояниеКалендаря.ДоговорыКредита = ТаблицаДоговорыКредита;
	
	// Остальные параметры
	СостояниеКалендаря.Пользователь = ТекущийПользователь;
	СостояниеКалендаря.ОкончаниеКалендаря = ДатаОкончанияПериода;
	СостояниеКалендаря.ГоризонтОперативногоПланирования = ГоризонтОперативногоПланирования;
	СостояниеКалендаря.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	СостояниеКалендаря.ПлатежныеДниНедели = РегистрыСведений.ПлатежныеДниНедели.ПлатежныеДниНедели();
	
	Возврат СостояниеКалендаря;
	
КонецФункции

Процедура ВыполнитьОптимизациюПлатежногоКалендаря(СостояниеКалендаря, НастройкиОптимизации) Экспорт	
	
	РаспределитьЗаявкиСНезаполненнымСчетом(СостояниеКалендаря, НастройкиОптимизации);
	
	ТаблицаОстатков = СостояниеКалендаря.Остатки;
	ТаблицаОстатков.Сортировать("БанковскийСчет, Дата Возр", Новый СравнениеЗначений); // сравнение по уид
	ДобавитьКолонкуИндексСтрокиВТаблицуЗначений(ТаблицаОстатков, "ИндексСтроки");
	
	СписокЗаявок = СостояниеКалендаря.Заявки;
	ДоступныеВариантыОптимизации = ДоступныеВариантыОптимизации(НастройкиОптимизации);
	ИсключаемыйВариантОптимизации = Неопределено;
		
	Пока Истина Цикл
		
		// берем первый необработанный день с недостачей
		СтрокаДня = НайтиНеобработанныйДеньСНедостачей(ТаблицаОстатков);
		Если СтрокаДня = Неопределено Тогда
			Прервать;
		КонецЕсли;
			
		// Ищем оптимальный результат корректировки
		ОптимальныйРезультатКорректировки = Неопределено;
		ОптимальнаяСтоимостьОптимизации = Неопределено;
		ОптимальныйВариантОптимизации = Неопределено;
		Для каждого ВариантОптимизации Из ДоступныеВариантыОптимизации Цикл
			
			// если уже перемещали заявки в этот день то не делаем это второй раз подряд
			Если ВариантОптимизации = ИсключаемыйВариантОптимизации Тогда
				Продолжить;
			КонецЕсли;
			
			РезультатКорректировки = РезультатОптимизацииПлатежногоКалендаря(СтрокаДня, ВариантОптимизации, СостояниеКалендаря, НастройкиОптимизации);
			Если РезультатКорректировки.Выполнена Тогда
				
				ОтносительнаяСтоимостьОптимизации = РезультатКорректировки.ОтносительнаяСтоимостьОптимизации;
				Если ОптимальнаяСтоимостьОптимизации = Неопределено ИЛИ ОтносительнаяСтоимостьОптимизации < ОптимальнаяСтоимостьОптимизации Тогда
					
					ОптимальныйРезультатКорректировки = РезультатКорректировки;
					ОптимальнаяСтоимостьОптимизации = ОтносительнаяСтоимостьОптимизации;		
					ОптимальныйВариантОптимизации = ВариантОптимизации;
					Если ОптимальнаяСтоимостьОптимизации = 0 Тогда
						Прервать; // уже оптимальный вариант
					КонецЕсли;		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;		
		
		// Применяем найденный вариант
		Если ЗначениеЗаполнено(ОптимальныйРезультатКорректировки) Тогда
			ИзменитьСостояниеКалендаря(СостояниеКалендаря, ОптимальныйРезультатКорректировки);
			Если ОптимальныйРезультатКорректировки.ДеньПолностьюСкорректирован Тогда
				ЗакончитьОбработкуДня(СтрокаДня);
				ИсключаемыйВариантОптимизации = Неопределено;
			Иначе
				Если ОптимальныйВариантОптимизации = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеДатыЗаявки ИЛИ 
					ОптимальныйВариантОптимизации = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеСчетаЗаявки ИЛИ
					ОптимальныйВариантОптимизации = "ИзменениеДатыИСчетаЗаявки" Тогда
					
					ИсключаемыйВариантОптимизации = ОптимальныйВариантОптимизации; // если уже перемещали заявки в этот день то не делаем это второй раз подряд
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЗакончитьОбработкуДня(СтрокаДня); // нет вариантов исправления
			ИсключаемыйВариантОптимизации = Неопределено;
		КонецЕсли;
		
	КонецЦикла;
	
	ОптимизироватьРассчитанныеОперации(СостояниеКалендаря);	
	СоздатьОперацииОптимизацииКалендаря(СостояниеКалендаря);
	
КонецПроцедуры

Функция НовыеНастройкиОптимизации() Экспорт

	НастройкиОптимизации = Новый Структура;
	НастройкиОптимизации.Вставить("ВариантыОптимизации", Новый Массив);
	НастройкиОптимизации.Вставить("СтоимостьПереводаМеждуСчетами", 0);
	НастройкиОптимизации.Вставить("ПроцентКомиссииПриКонвертацииВалюты", 0);
	НастройкиОптимизации.Вставить("СрокКонвертацииВалютыДней", 1);
	НастройкиОптимизации.Вставить("СущественнаяРазницаСтоимостиКредитов", 0);
	 
	Возврат НастройкиОптимизации;
	
КонецФункции

Функция МассивДоступныхВариантовОптимизации() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоступныеВариантыОптимизацииПлатежногоКалендаря.ВариантОптимизации КАК ВариантОптимизации
	|ИЗ
	|	РегистрСведений.ДоступныеВариантыОптимизацииПлатежногоКалендаря КАК ДоступныеВариантыОптимизацииПлатежногоКалендаря
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоступныеВариантыОптимизацииПлатежногоКалендаря.ВариантОптимизации.Порядок"
	);
	
	МассивВариантов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВариантОптимизации");
	
	Возврат МассивВариантов;

КонецФункции

Функция ТаблицаДоступныхВариантовОптимизации() Экспорт
	
	ТаблицаВариантов = Новый ТаблицаЗначений;
	ТаблицаВариантов.Колонки.Добавить("ВариантОптимизации", Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыОптимизацииПлатежногоКалендаря"));
	ТаблицаВариантов.Колонки.Добавить("Доступен", Новый ОписаниеТипов("Булево"));
	
	МассивВариантов = МассивДоступныхВариантовОптимизации();
	
	КоллекцияМетаданных = Метаданные.Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ЗначенияПеречисления;
	Для каждого Мет Из КоллекцияМетаданных Цикл
		Строка = ТаблицаВариантов.Добавить();
		Индекс = КоллекцияМетаданных.Индекс(Мет); 
		Строка.ВариантОптимизации = Перечисления.ВариантыОптимизацииПлатежногоКалендаря[Индекс];
		Если МассивВариантов.Найти(Строка.ВариантОптимизации) <> Неопределено Тогда
			Строка.Доступен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВариантов;
	
КонецФункции

Функция СохранитьДоступныеВариантыОптимизации(ТаблицаВариантов) Экспорт
	
	НаборЗаписей = РегистрыСведений.ДоступныеВариантыОптимизацииПлатежногоКалендаря.СоздатьНаборЗаписей();
	Для каждого Строка ИЗ ТаблицаВариантов Цикл
		Если Строка.Доступен Тогда
			СтрокаНабора = НаборЗаписей.Добавить();
			СтрокаНабора.ВариантОптимизации = Строка.ВариантОптимизации;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецФункции

Процедура ВыполнитьОптимизациюПлатежногоКалендаряВФоне(Параметры, АдресРезультата) Экспорт
	
	ОтменитьОптимизациюКалендаря(Параметры.ПараметрыОтчета.ТекущийПользователь);
	
	СостояниеКалендаря = ТекущееСостояниеКалендаря(Параметры.ПараметрыОтчета);
	
	ВыполнитьОптимизациюПлатежногоКалендаря(СостояниеКалендаря, Параметры.НастройкиОптимизации);
	
	ПоместитьВоВременноеХранилище(СостояниеКалендаря.НовыеОперации, АдресРезультата);
	
КонецПроцедуры	

Процедура ОтменитьОптимизациюПлатежногоКалендаряВФоне(Параметры, АдресРезультата) Экспорт
	
	ОтменитьОптимизациюКалендаря(Параметры.ТекущийПользователь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция КлючЖурналаРегистрации()
	Возврат НСтр("ru = 'Оптимизация платежного календаря'");
КонецФункции

#Область СостояниеКалендаря

Процедура ПрименитьОтборОтчетаКЗапросуСостояния(Запрос, НастройкаОтбораОтчета)
	
	ТекстУсловиеОтбораОстатков = "";
	Для каждого ЭлементОтбора ИЗ НастройкаОтбораОтчета.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			ИмяЭлементаОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);			
			УсловиеЭлемента = СформироватьУсловиеПоЭлементуОтбораКомпоновки("ВТ_ДанныеКалендаря", ЭлементОтбора);
			ТекстУсловиеОтбораОстатков = ТекстУсловиеОтбораОстатков + ?(ТекстУсловиеОтбораОстатков <> "", " И ", "") + УсловиеЭлемента;
			
			Запрос.УстановитьПараметр(СтрШаблон("Отбор_%1", ИмяЭлементаОтбора), ЭлементОтбора.ПравоеЗначение);	
		КонецЕсли;
	КонецЦикла;
	
	ТекстУсловиеОтбораОстатков = ?(ЗначениеЗаполнено(ТекстУсловиеОтбораОстатков), ТекстУсловиеОтбораОстатков, "Истина");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораОстатков", ТекстУсловиеОтбораОстатков);
	
	ТекстУсловияОтбораЗаявок = СтрЗаменить(ТекстУсловиеОтбораОстатков, "ВТ_ДанныеКалендаря.", "Заявки.");
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораЗаявок", ТекстУсловияОтбораЗаявок);
	
КонецПроцедуры	

Функция СформироватьУсловиеПоЭлементуОтбораКомпоновки(ИмяТаблицы, ЭлементОтбора)
	
	ТекстУсловия = "Истина";
	ИмяЭлементаОтбора = Строка(ЭлементОтбора.ЛевоеЗначение);
	
	Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		ТекстУсловия = СтрШаблон("%1.%2 = &Отбор_%2", ИмяТаблицы, ИмяЭлементаОтбора);	
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда	
		ТекстУсловия = СтрШаблон("НЕ (%1.%2 = &Отбор_%2)", ИмяТаблицы, ИмяЭлементаОтбора);	
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда		
		
		ТекстУсловия = СтрШаблон("%1.%2 В (&Отбор_%2)", ИмяТаблицы, ИмяЭлементаОтбора);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда			
		ТекстУсловия = СтрШаблон("НЕ (%1.%2 В (&Отбор_%2))", ИмяТаблицы, ИмяЭлементаОтбора);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии ИЛИ
		 ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		 
		 ТекстУсловия = СтрШаблон("%1.%2 В ИЕРАРХИИ (&Отбор_%2)", ИмяТаблицы, ИмяЭлементаОтбора);

	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии ИЛИ
		ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда	
		
		ТекстУсловия = СтрШаблон("НЕ (%1.%2 В ИЕРАРХИИ (&Отбор_%2))", ИмяТаблицы, ИмяЭлементаОтбора);
			
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
		
		ТекстУсловия = СтрШаблон("НЕ %1.%2 В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка), 
			| ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))", ИмяТаблицы, ИмяЭлементаОтбора);
		
	ИначеЕсли ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда	
		
		ТекстУсловия = СтрШаблон("%1.%2 В (НЕОПРЕДЕЛЕНО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка), 
			| ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка))", ИмяТаблицы, ИмяЭлементаОтбора);
		
	КонецЕсли;

	Возврат ТекстУсловия;
	
КонецФункции

Функция НовыйСостояниеКалендаря()
	
	СостояниеКалендаря = Новый Структура;
	СостояниеКалендаря.Вставить("Остатки");
	СостояниеКалендаря.Вставить("Заявки");
	СостояниеКалендаря.Вставить("ДниКалендаря");
	СостояниеКалендаря.Вставить("ДоговорыКредита");
	СостояниеКалендаря.Вставить("ЛимитыКредитов");
	СостояниеКалендаря.Вставить("ДоговорыОвердрафта");
	СостояниеКалендаря.Вставить("ЛимитыВнутригрупповыхПереводов");
	СостояниеКалендаря.Вставить("КурсыВалют");
	СостояниеКалендаря.Вставить("Пользователь");
	СостояниеКалендаря.Вставить("ОкончаниеКалендаря");
	СостояниеКалендаря.Вставить("ГоризонтОперативногоПланирования");
	СостояниеКалендаря.Вставить("ВалютаРегламентированногоУчета");
	
	СостояниеКалендаря.Вставить("НовыеОперации", Новый Массив);
	СостояниеКалендаря.Вставить("ОвердрафтПоСчетам", НоваяТаблицаОвердрафтПоСчетам());
	СостояниеКалендаря.Вставить("КредитыПоСчетам", НоваяТаблицаКредитыПоСчетам());
	СостояниеКалендаря.Вставить("ПлатежныеДниНедели");
	
	Возврат СостояниеКалендаря;
	
КонецФункции	

Функция ТекстЗапросаСостояниеКалендаря_Остатки()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	МатрицаВесовЛиквидности.Источник КАК Источник,
	|	МатрицаВесовЛиквидности.ПриходРасход КАК ПриходРасход,
	|	МатрицаВесовЛиквидности.ГоризонтПланированияЛиквидности КАК ГоризонтПланированияЛиквидности,
	|	МатрицаВесовЛиквидности.Вес КАК Вес
	|ПОМЕСТИТЬ ВТ_МатрицаВесовЛиквидности
	|ИЗ
	|	&МатрицаВесовЛиквидности КАК МатрицаВесовЛиквидности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВходныеДанныеНесгруппированные.Организация КАК Организация,
	|	ВходныеДанныеНесгруппированные.ПулЛиквидности КАК ПулЛиквидности,
	|	ВходныеДанныеНесгруппированные.Валюта КАК Валюта,
	|	ВходныеДанныеНесгруппированные.БанковскийСчет КАК БанковскийСчет,
	|	ВходныеДанныеНесгруппированные.Банк КАК Банк,
	|	ВходныеДанныеНесгруппированные.ДатаПредставление КАК ДатаПредставление,
	|	СУММА(ВходныеДанныеНесгруппированные.Поступление) КАК Поступление,
	|	СУММА(ВходныеДанныеНесгруппированные.Списание) КАК Списание
	|ПОМЕСТИТЬ ВТ_ВходныеДанные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПредставлениеПлатежногоКалендаря.Организация КАК Организация,
	|		ПредставлениеПлатежногоКалендаря.ПулЛиквидности КАК ПулЛиквидности,
	|		ПредставлениеПлатежногоКалендаря.Валюта КАК Валюта,
	|		ПредставлениеПлатежногоКалендаря.БанковскийСчет КАК БанковскийСчет,
	|		ПредставлениеПлатежногоКалендаря.Банк КАК Банк,
	|		ВЫБОР
	|			КОГДА ПредставлениеПлатежногоКалендаря.Дата < &НачалоПериодаОтбора
	|				ТОГДА ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, ДЕНЬ, -1)
	|			ИНАЧЕ ПредставлениеПлатежногоКалендаря.Дата
	|		КОНЕЦ КАК ДатаПредставление,
	|		ВЫБОР
	|			КОГДА ПредставлениеПлатежногоКалендаря.Сумма > 0
	|				ТОГДА ПредставлениеПлатежногоКалендаря.Сумма * ЕСТЬNULL(ВТ_МатрицаВесовЛиквидности.Вес, 1)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Поступление,
	|		ВЫБОР
	|			КОГДА ПредставлениеПлатежногоКалендаря.Сумма < 0
	|				ТОГДА ПредставлениеПлатежногоКалендаря.Сумма * ЕСТЬNULL(ВТ_МатрицаВесовЛиквидности.Вес, 1)
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК Списание
	|	ИЗ
	|		РегистрСведений.ПредставлениеПлатежногоКалендаря КАК ПредставлениеПлатежногоКалендаря
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_МатрицаВесовЛиквидности КАК ВТ_МатрицаВесовЛиквидности
	|			ПО ПредставлениеПлатежногоКалендаря.ИсточникДанных = ВТ_МатрицаВесовЛиквидности.Источник
	|				И (ВЫБОР
	|					КОГДА ПредставлениеПлатежногоКалендаря.Сумма > 0
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|				КОНЕЦ = ВТ_МатрицаВесовЛиквидности.ПриходРасход)
	|				И (ВТ_МатрицаВесовЛиквидности.ГоризонтПланированияЛиквидности = ЗНАЧЕНИЕ(Перечисление.ГоризонтыПланированияЛиквидности.ОперативноеПланирование))
	|	ГДЕ
	|		ПредставлениеПлатежногоКалендаря.Пользователь = &Пользователь
	|		И ПредставлениеПлатежногоКалендаря.Активна
	|		И ПредставлениеПлатежногоКалендаря.ВерсияПлатежногоКалендаря = &ВерсияПлатежногоКалендаря
	|		И ЕСТЬNULL(ВТ_МатрицаВесовЛиквидности.Вес, 1) <> 0
	|		И НЕ ЕСТЬNULL(ПредставлениеПлатежногоКалендаря.БанковскийСчет.Закрыт, ЛОЖЬ)
	|		И ПредставлениеПлатежногоКалендаря.Дата <= &ГоризонтОперативногоПланирования) КАК ВходныеДанныеНесгруппированные
	|
	|СГРУППИРОВАТЬ ПО
	|	ВходныеДанныеНесгруппированные.Организация,
	|	ВходныеДанныеНесгруппированные.ПулЛиквидности,
	|	ВходныеДанныеНесгруппированные.Валюта,
	|	ВходныеДанныеНесгруппированные.БанковскийСчет,
	|	ВходныеДанныеНесгруппированные.Банк,
	|	ВходныеДанныеНесгруппированные.ДатаПредставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ВходныеДанные.ДатаПредставление КАК ДеньВходныхДанных
	|ПОМЕСТИТЬ ВТ_ВходныеДаты
	|ИЗ
	|	ВТ_ВходныеДанные КАК ВТ_ВходныеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыЗаПериод.ДатаКалендарь КАК ДатаКалендарь,
	|	СУММА(ДатыЗаПериод.ЭтоРабочийДень) > 0 КАК ЭтоРабочийДень
	|ПОМЕСТИТЬ ВТ_РабочиеДни
	|ИЗ
	|	(ВЫБРАТЬ
	|		НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, ДЕНЬ, -1), ДЕНЬ) КАК ДатаКалендарь,
	|		1 КАК ЭтоРабочийДень
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеПроизводственногоКалендаря.Дата,
	|		1
	|	ИЗ
	|		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|	ГДЕ
	|		ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|		И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ &НачалоПериодаОтбора И &ГоризонтОперативногоПланирования
	|		И ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ДанныеПроизводственногоКалендаря.Дата,
	|		0
	|	ИЗ
	|		РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВходныеДаты КАК ВТ_ВходныеДаты
	|			ПО ДанныеПроизводственногоКалендаря.Дата = ВТ_ВходныеДаты.ДеньВходныхДанных
	|				И (ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь)
	|				И (НЕ ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)))) КАК ДатыЗаПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ДатыЗаПериод.ДатаКалендарь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОборотыДополненныеНесгруппированные.Дата КАК Дата,
	|	МАКСИМУМ(ОборотыДополненныеНесгруппированные.ЭтоРабочийДень) КАК ЭтоРабочийДень,
	|	ОборотыДополненныеНесгруппированные.Организация КАК Организация,
	|	ОборотыДополненныеНесгруппированные.ПулЛиквидности КАК ПулЛиквидности,
	|	ОборотыДополненныеНесгруппированные.Валюта КАК Валюта,
	|	ОборотыДополненныеНесгруппированные.БанковскийСчет КАК БанковскийСчет,
	|	ОборотыДополненныеНесгруппированные.Банк КАК Банк,
	|	СУММА(ОборотыДополненныеНесгруппированные.Поступление) КАК Поступление,
	|	СУММА(ОборотыДополненныеНесгруппированные.Списание) КАК Списание
	|ПОМЕСТИТЬ ВТ_ОборотыСгруппированные
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_РабочиеДни.ДатаКалендарь КАК Дата,
	|		ВТ_РабочиеДни.ЭтоРабочийДень КАК ЭтоРабочийДень,
	|		ВсеДоступныеИзмерения.Организация КАК Организация,
	|		ВсеДоступныеИзмерения.ПулЛиквидности КАК ПулЛиквидности,
	|		ВсеДоступныеИзмерения.Валюта КАК Валюта,
	|		ВсеДоступныеИзмерения.БанковскийСчет КАК БанковскийСчет,
	|		ВсеДоступныеИзмерения.Банк КАК Банк,
	|		0 КАК Поступление,
	|		0 КАК Списание
	|	ИЗ
	|		(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВТ_ВходныеДанные.Организация КАК Организация,
	|			ВТ_ВходныеДанные.ПулЛиквидности КАК ПулЛиквидности,
	|			ВТ_ВходныеДанные.Валюта КАК Валюта,
	|			ВТ_ВходныеДанные.БанковскийСчет КАК БанковскийСчет,
	|			ВТ_ВходныеДанные.Банк КАК Банк
	|		ИЗ
	|			ВТ_ВходныеДанные КАК ВТ_ВходныеДанные) КАК ВсеДоступныеИзмерения,
	|		ВТ_РабочиеДни КАК ВТ_РабочиеДни
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ВходныеДанные.ДатаПредставление,
	|		ИСТИНА,
	|		ВТ_ВходныеДанные.Организация,
	|		ВТ_ВходныеДанные.ПулЛиквидности,
	|		ВТ_ВходныеДанные.Валюта,
	|		ВТ_ВходныеДанные.БанковскийСчет,
	|		ВТ_ВходныеДанные.Банк,
	|		ВТ_ВходныеДанные.Поступление,
	|		ВТ_ВходныеДанные.Списание
	|	ИЗ
	|		ВТ_ВходныеДанные КАК ВТ_ВходныеДанные) КАК ОборотыДополненныеНесгруппированные
	|
	|СГРУППИРОВАТЬ ПО
	|	ОборотыДополненныеНесгруппированные.Дата,
	|	ОборотыДополненныеНесгруппированные.Организация,
	|	ОборотыДополненныеНесгруппированные.ПулЛиквидности,
	|	ОборотыДополненныеНесгруппированные.Валюта,
	|	ОборотыДополненныеНесгруппированные.БанковскийСчет,
	|	ОборотыДополненныеНесгруппированные.Банк
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОборотыСгруппированные.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_ОборотыСгруппированные.ПулЛиквидности КАК ПулЛиквидности,
	|	ВТ_ОборотыСгруппированные.Валюта КАК Валюта,
	|	ВТ_ОборотыСгруппированные.Банк КАК Банк,
	|	ВТ_ОборотыСгруппированные.Дата КАК Дата,
	|	ВТ_ОборотыСгруппированные.Организация КАК Организация,
	|	ЕСТЬNULL(СУММА(Остатки.Поступление + Остатки.Списание), 0) КАК Остаток
	|ПОМЕСТИТЬ ВТ_ДанныеКалендаря
	|ИЗ
	|	ВТ_ОборотыСгруппированные КАК ВТ_ОборотыСгруппированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ОборотыСгруппированные КАК Остатки
	|		ПО ВТ_ОборотыСгруппированные.БанковскийСчет = Остатки.БанковскийСчет
	|			И ВТ_ОборотыСгруппированные.Валюта = Остатки.Валюта
	|			И ВТ_ОборотыСгруппированные.Организация = Остатки.Организация
	|			И ВТ_ОборотыСгруппированные.Банк = Остатки.Банк
	|			И ВТ_ОборотыСгруппированные.ПулЛиквидности = Остатки.ПулЛиквидности
	|			И ВТ_ОборотыСгруппированные.Дата >= Остатки.Дата
	|ГДЕ
	|	ВТ_ОборотыСгруппированные.Дата МЕЖДУ &НачалоПериодаОтбора И &ГоризонтОперативногоПланирования
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_ОборотыСгруппированные.БанковскийСчет,
	|	ВТ_ОборотыСгруппированные.ПулЛиквидности,
	|	ВТ_ОборотыСгруппированные.Валюта,
	|	ВТ_ОборотыСгруппированные.Банк,
	|	ВТ_ОборотыСгруппированные.Дата,
	|	ВТ_ОборотыСгруппированные.Организация"
	;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаСостояниеКалендаря_Заявки()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредставлениеПлатежногоКалендаря.Организация КАК Организация,
	|	ПредставлениеПлатежногоКалендаря.ПулЛиквидности КАК ПулЛиквидности,
	|	ПредставлениеПлатежногоКалендаря.Валюта КАК Валюта,
	|	ПредставлениеПлатежногоКалендаря.Банк КАК Банк,
	|	ПредставлениеПлатежногоКалендаря.БанковскийСчет КАК БанковскийСчет,
	|	ПредставлениеПлатежногоКалендаря.РазделПлатежногоКалендаря КАК РазделПлатежногоКалендаря,
	|	Выразить(ПредставлениеПлатежногоКалендаря.Инструмент КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств) КАК Заявка,
	|	ПредставлениеПлатежногоКалендаря.Приоритет КАК Приоритет,
	|	ПредставлениеПлатежногоКалендаря.Дата КАК Дата,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторДобавившейОперации КАК ИдентификаторДобавившейОперации,	
	|	-ПредставлениеПлатежногоКалендаря.Сумма КАК Сумма,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторОтменившейОперации КАК ИдентификаторОтменившейОперации,	
	|	ПредставлениеПлатежногоКалендаря.КрайняяДата КАК КрайняяДата,
	|	ПредставлениеПлатежногоКалендаря.ФиксированныйБанковскийСчет КАК ФиксированныйБанковскийСчет,
	|	ПредставлениеПлатежногоКалендаря.ИсточникДанных КАК ИсточникДанных
	|ПОМЕСТИТЬ ВТ_Заявки
	|ИЗ
	|	РегистрСведений.ПредставлениеПлатежногоКалендаря КАК ПредставлениеПлатежногоКалендаря
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО ПредставлениеПлатежногоКалендаря.ИдентификаторЗаписи = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|ГДЕ
	|	ПредставлениеПлатежногоКалендаря.ВерсияПлатежногоКалендаря = &ВерсияПлатежногоКалендаря
	|	И ПредставлениеПлатежногоКалендаря.Пользователь = &Пользователь
	|	И ПредставлениеПлатежногоКалендаря.Активна
	|	И ПредставлениеПлатежногоКалендаря.Инструмент ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|	И ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)
	|	И ПредставлениеПлатежногоКалендаря.Дата >= &НачалоПериодаОтбора
	|	И ПредставлениеПлатежногоКалендаря.Дата <= &ОкончаниеПериодаОтбора"
	;

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаСостояниеКалендаря_ЛимитыВнутригрупповыхПеремещений()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛимитыПеремещенийМеждуОрганизациями.Организация КАК ОрганизацияСписания,
	|	ЛимитыПеремещенийМеждуОрганизациями.Контрагент.ОрганизационнаяЕдиница КАК ОрганизацияЗачисления,
	|	ЛимитыПеремещенийМеждуОрганизациями.Контрагент КАК КонтрагентЗачисления,
	|	ЛимитыПеремещенийМеждуОрганизациями.ДоговорКонтрагента КАК ДоговорКонтрагентаЗачисления,
	|	ЛимитыПеремещенийМеждуОрганизациями.Валюта КАК Валюта,
	|	СУММА(ЛимитыПеремещенийМеждуОрганизациями.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ЛимитыВнутригрупповыхПеремещений
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСКонтрагентамиФактОстатки.Организация КАК Организация,
	|		РасчетыСКонтрагентамиФактОстатки.Контрагент КАК Контрагент,
	|		РасчетыСКонтрагентамиФактОстатки.ОбъектРасчетов КАК ДоговорКонтрагента,
	|		РасчетыСКонтрагентамиФактОстатки.Валюта КАК Валюта,
	|		-РасчетыСКонтрагентамиФактОстатки.СуммаОстаток КАК Сумма
	|	ИЗ
	|		РегистрНакопления.РасчетыСКонтрагентамиФакт.Остатки(, Контрагент.ОрганизационнаяЕдиница <> &ПустаяОрганизация) КАК РасчетыСКонтрагентамиФактОстатки
	|	ГДЕ
	|		РасчетыСКонтрагентамиФактОстатки.СуммаОстаток < 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Организация,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Контрагент,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Договор,
	|		ЗаявкаНаРасходованиеДенежныхСредств.Валюта,
	|		-ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента
	|	ИЗ
	|		Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|	ГДЕ
	|		ЗаявкаНаРасходованиеДенежныхСредств.Проведен
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Дата >= &НачалоТекущегоДня
	|		И ЗаявкаНаРасходованиеДенежныхСредств.Контрагент.ОрганизационнаяЕдиница <> &ПустаяОрганизация
	|		И ЗаявкаНаРасходованиеДенежныхСредств.ЭтоВнутригрупповоеПеремещение) КАК ЛимитыПеремещенийМеждуОрганизациями
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛимитыПеремещенийМеждуОрганизациями.Организация,
	|	ЛимитыПеремещенийМеждуОрганизациями.Контрагент,
	|	ЛимитыПеремещенийМеждуОрганизациями.ДоговорКонтрагента,
	|	ЛимитыПеремещенийМеждуОрганизациями.Валюта,
	|	ЛимитыПеремещенийМеждуОрганизациями.Контрагент.ОрганизационнаяЕдиница
	|
	|ИМЕЮЩИЕ
	|	СУММА(ЛимитыПеремещенийМеждуОрганизациями.Сумма) > 0"
	;

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаСостояниеКалендаря_КурсыВалют()
	
	ТекстЗапроса =	
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗ_ПлановыеКурсы.Валюта КАК Справочник.Валюты) КАК Валюта,
	|	ВЫРАЗИТЬ(ТЗ_ПлановыеКурсы.Период КАК ДАТА) КАК Период,
	|	ВЫРАЗИТЬ(ТЗ_ПлановыеКурсы.Курс КАК ЧИСЛО(15, 4)) КАК Курс,
	|	ВЫРАЗИТЬ(ТЗ_ПлановыеКурсы.Кратность КАК ЧИСЛО(15, 0)) КАК Кратность
	|ПОМЕСТИТЬ ТЗ_ПлановыеКурсы
	|ИЗ
	|	&ТЗ_ПлановыеКурсы КАК ТЗ_ПлановыеКурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеКалендаря.Валюта КАК Валюта,
	|	ВТ_ДанныеКалендаря.Дата КАК ДатаКалендарь
	|ПОМЕСТИТЬ ВТ_Валюты
	|ИЗ
	|	ВТ_ДанныеКалендаря КАК ВТ_ДанныеКалендаря
	|ГДЕ
	|	НЕ ВТ_ДанныеКалендаря.Валюта ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыВалют.Период КАК Период,
	|	КурсыВалют.Валюта КАК Валюта,
	|	КурсыВалют.Курс КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВТ_ДанныеКурсов
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &НачалоПериодаОтбора И &ОкончаниеПериодаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ТЗ_ПлановыеКурсы.Период, ВТ_ДанныеКурсов.Период) КАК Период,
	|	ЕСТЬNULL(ТЗ_ПлановыеКурсы.Валюта, ВТ_ДанныеКурсов.Валюта) КАК Валюта,
	|	ЕСТЬNULL(ТЗ_ПлановыеКурсы.Курс, ВТ_ДанныеКурсов.Курс) КАК Курс,
	|	ЕСТЬNULL(ТЗ_ПлановыеКурсы.Кратность, ВТ_ДанныеКурсов.Кратность) КАК Кратность
	|ПОМЕСТИТЬ ВТ_АктуальныеКурсы
	|ИЗ
	|	ВТ_ДанныеКурсов КАК ВТ_ДанныеКурсов
	|		ПОЛНОЕ СОЕДИНЕНИЕ ТЗ_ПлановыеКурсы КАК ТЗ_ПлановыеКурсы
	|		ПО ВТ_ДанныеКурсов.Валюта = ТЗ_ПлановыеКурсы.Валюта
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КурсыВалютСрезПоследних.Период,
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, ДЕНЬ, -1), ) КАК КурсыВалютСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыКурсов.Валюта КАК Валюта,
	|	ДатыКурсов.ДатаКалендарь КАК Дата,
	|	ЕСТЬNULL(ВТ_АктуальныеКурсы.Курс, 1) КАК Курс,
	|	ЕСТЬNULL(ВТ_АктуальныеКурсы.Кратность, 1) КАК Кратность
	|ПОМЕСТИТЬ ВТ_КурсыВалют
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВТ_Валюты.Валюта КАК Валюта,
	|		ВТ_Валюты.ДатаКалендарь КАК ДатаКалендарь,
	|		МАКСИМУМ(ВТ_АктуальныеКурсы.Период) КАК Период
	|	ИЗ
	|		ВТ_Валюты КАК ВТ_Валюты
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеКурсы КАК ВТ_АктуальныеКурсы
	|			ПО (ВТ_АктуальныеКурсы.Валюта = ВТ_Валюты.Валюта)
	|				И (ВТ_АктуальныеКурсы.Период <= ВТ_Валюты.ДатаКалендарь)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_Валюты.ДатаКалендарь,
	|		ВТ_Валюты.Валюта) КАК ДатыКурсов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_АктуальныеКурсы КАК ВТ_АктуальныеКурсы
	|		ПО ДатыКурсов.Валюта = ВТ_АктуальныеКурсы.Валюта
	|			И ДатыКурсов.Период = ВТ_АктуальныеКурсы.Период"
	;
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаСостояниеКалендаря_ДоговорыОвердрафта()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчет КАК БанковскийСчет,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).ДатаПервогоТранша КАК ДатаНачалаДействия,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).ДатаПоследнегоПлатежа КАК СрокДействия,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).СуммаТраншей КАК Лимит,
	|	ВЫРАЗИТЬ(ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).ВерсияСоглашения КАК Документ.ВерсияСоглашенияКредит).ПроцентнаяСтавка КАК ПроцентнаяСтавка
	|ПОМЕСТИТЬ ВТ_ДоговорыОвердрафта
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних КАК ВерсииРасчетовСрезПоследних
	|ГДЕ
	|	ВерсииРасчетовСрезПоследних.ПредметГрафика ССЫЛКА Справочник.ДоговорыКредитовИДепозитов
	|	И ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.Овердрафт)
	|	И ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).БанковскийСчет <> &ПустойБанковскийСчет
	|	И ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).ДатаПервогоТранша <= &ГоризонтОперативногоПланирования
	|	И ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).ДатаПоследнегоПлатежа >= &НачалоПериодаОтбора
	|	И ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ПредметГрафика КАК Справочник.ДоговорыКредитовИДепозитов).СуммаТраншей > 0"
	;

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	Возврат ТекстЗапроса;
	
КонецФункции	

Функция ТекстЗапросаСостояниеКалендаря_ДниКалендаря()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ДанныеКалендаря.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ДниКалендаря
	|ИЗ
	|	ВТ_ДанныеКалендаря КАК ВТ_ДанныеКалендаря
	|ГДЕ
	|	ВТ_ДанныеКалендаря.Дата МЕЖДУ &НачалоПериодаОтбора И &ГоризонтОперативногоПланирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДниКалендаря.Дата КАК Дата
	|ПОМЕСТИТЬ ВТ_ПроизводтсвеннныйКалендарь
	|ИЗ
	|	ВТ_ДниКалендаря КАК ВТ_ДниКалендаря
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеПроизводственногоКалендаря.Дата
	|ИЗ
	|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	|ГДЕ
	|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	|	И ДанныеПроизводственногоКалендаря.Дата > &ГоризонтОперативногоПланирования
	|	И ДанныеПроизводственногоКалендаря.Дата <= ДОБАВИТЬКДАТЕ(&ГоризонтОперативногоПланирования, МЕСЯЦ, 3)
	|	И ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))"
	;

	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаСостояниеКалендаря_ДоговорыКредита()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ВТ_ЗапланированныеКредиты.ДоговорКонтрагента КАК Справочник.ДоговорыКонтрагентов) КАК ДоговорКонтрагента,
	|	ВТ_ЗапланированныеКредиты.Сумма КАК Сумма,
	|	ВТ_ЗапланированныеКредиты.ДатаНачала КАК ДатаНачала,
	|	ВТ_ЗапланированныеКредиты.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ ВТ_ЗапланированныеКредиты
	|ИЗ
	|	&ЗапланированныеКредиты КАК ВТ_ЗапланированныеКредиты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ КАК БазовыйДоговор,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит) КАК ВерсияСоглашения,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВозобновляемыйЛимит КАК ВозобновляемыйЛимит,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).Сумма КАК Сумма,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).МинимальныйСрок КАК МинимальныйСрок,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).МаксимальныйСрок КАК МаксимальныйСрок,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).МинимальнаяСуммаСделки КАК МинимальнаяСуммаСделки,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).МаксимальнаяСуммаСделки КАК МаксимальнаяСуммаСделки,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДатаНачалаДоступности КАК ДатаНачалаДоступности,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДатаОкончанияДоступности КАК ДатаОкончанияДоступности,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения КАК ВидСоглашения,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ФиксированныйСчетОрганизации КАК ФиксированныйСчетОрганизации,
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БанковскийСчет КАК БанковскийСчет,
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта
	|ПОМЕСТИТЬ ВТ_ДоговораКредитов
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних КАК ВерсииРасчетовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКредитовИДепозитов КАК ДоговорыКонтрагентов
	|		ПО ВерсииРасчетовСрезПоследних.ПредметГрафика = ДоговорыКонтрагентов.Ссылка
	|			И (ДоговорыКонтрагентов.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.Кредит))
	|			И (ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).РазрешеноПланированиеТраншейИзПлатежногоКалендаря = ИСТИНА)
	|ГДЕ
	|	ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДатаНачалаДоступности <= &ГоризонтОперативногоПланирования
	|	И ВЫРАЗИТЬ(ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДатаОкончанияДоступности >= &НачалоПериодаОтбора
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазовыйДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОстатки.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОстатки.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОстатки.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ КАК БазовыйДоговор,
	|	СУММА(-РасчетыСКонтрагентамиГрафикиОстатки.СуммаОстаток) КАК Задолженность
	|ПОМЕСТИТЬ ВТ_ЗадолженностьПоКредитуНачало
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики.Остатки(
	|			&НачалоПериодаОтбора,
	|			ВерсияГрафика В
	|					(ВЫБРАТЬ
	|						ВТ_ДоговораКредитов.ВерсияСоглашения
	|					ИЗ
	|						ВТ_ДоговораКредитов
	|					ГДЕ
	|						ВТ_ДоговораКредитов.ВозобновляемыйЛимит)
	|				И ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)) КАК РасчетыСКонтрагентамиГрафикиОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОстатки.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОстатки.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОстатки.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазовыйДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ КАК БазовыйДоговор,
	|	СУММА(РасчетыСКонтрагентамиГрафикиОбороты.СуммаРасход) КАК СуммаПолученияКредита
	|ПОМЕСТИТЬ ВТ_ПолучениеКредитаДо
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики.Обороты(
	|			,
	|			ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, СЕКУНДА, -1),
	|			Авто,
	|			ВерсияГрафика В
	|					(ВЫБРАТЬ
	|						ВТ_ДоговораКредитов.ВерсияСоглашения
	|					ИЗ
	|						ВТ_ДоговораКредитов
	|					ГДЕ
	|						НЕ ВТ_ДоговораКредитов.ВозобновляемыйЛимит)
	|				И ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)) КАК РасчетыСКонтрагентамиГрафикиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазовыйДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговораКредитов.БазовыйДоговор КАК БазовыйДоговор,
	|	ВТ_ДоговораКредитов.Сумма - ЕСТЬNULL(ВТ_ЗадолженностьПоКредитуНачало.Задолженность, 0) - ЕСТЬNULL(ВТ_ПолучениеКредитаДо.СуммаПолученияКредита, 0) КАК ЛимитНачало,
	|	ВТ_ДоговораКредитов.ВозобновляемыйЛимит КАК ВозобновляемыйЛимит
	|ПОМЕСТИТЬ ВТ_НачальныйЛимит
	|ИЗ
	|	ВТ_ДоговораКредитов КАК ВТ_ДоговораКредитов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗадолженностьПоКредитуНачало КАК ВТ_ЗадолженностьПоКредитуНачало
	|		ПО ВТ_ДоговораКредитов.БазовыйДоговор = ВТ_ЗадолженностьПоКредитуНачало.БазовыйДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПолучениеКредитаДо КАК ВТ_ПолучениеКредитаДо
	|		ПО (ВТ_ПолучениеКредитаДо.БазовыйДоговор = ВТ_ДоговораКредитов.БазовыйДоговор)
	|ГДЕ
	|	ВТ_ДоговораКредитов.ВидСоглашения <> ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазовыйДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ КАК БазовыйДоговор,
	|	СУММА(РасчетыСКонтрагентамиГрафикиОбороты.СуммаРасход) КАК СуммаПолученияКредита,
	|	СУММА(РасчетыСКонтрагентамиГрафикиОбороты.СуммаПриход) КАК СуммаВозвратаКредита,
	|	РасчетыСКонтрагентамиГрафикиОбороты.Период КАК Дата
	|ПОМЕСТИТЬ ВТ_ИспользованиеКредитаЗаПериод
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики.Обороты(
	|			&НачалоПериодаОтбора,
	|			&ГоризонтОперативногоПланирования,
	|			День,
	|			ВерсияГрафика В
	|					(ВЫБРАТЬ
	|						ВТ_ДоговораКредитов.ВерсияСоглашения
	|					ИЗ
	|						ВТ_ДоговораКредитов)
	|				И ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОсновнойДолг)) КАК РасчетыСКонтрагентамиГрафикиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ВидСоглашения = ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация)
	|			ТОГДА ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).БазовыйДоговор
	|		ИНАЧЕ ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафикиОбороты.ВерсияГрафика КАК Документ.ВерсияСоглашенияКредит).ДоговорКонтрагента
	|	КОНЕЦ,
	|	РасчетыСКонтрагентамиГрафикиОбороты.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	БазовыйДоговор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛимитыПоКредитам.БазовыйДоговор КАК БазовыйДоговор,
	|	ЛимитыПоКредитам.Дата КАК Дата,
	|	ЛимитыПоКредитам.ЛимитНачало - ЛимитыПоКредитам.СуммаИспользованияКредита - ЛимитыПоКредитам.СуммаЗапланированныхСделок КАК Лимит
	|ПОМЕСТИТЬ ВТ_ЛимитыПоКредитам
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_НачальныйЛимит.БазовыйДоговор КАК БазовыйДоговор,
	|		ВТ_ДниКалендаря.Дата КАК Дата,
	|		ВТ_НачальныйЛимит.ЛимитНачало КАК ЛимитНачало,
	|		ВЫБОР
	|			КОГДА ВТ_НачальныйЛимит.ВозобновляемыйЛимит
	|				ТОГДА СУММА(ЕСТЬNULL(ВТ_ИспользованиеКредитаЗаПериод.СуммаПолученияКредита - ВТ_ИспользованиеКредитаЗаПериод.СуммаВозвратаКредита, 0))
	|			ИНАЧЕ СУММА(ЕСТЬNULL(ВТ_ИспользованиеКредитаЗаПериод.СуммаПолученияКредита, 0))
	|		КОНЕЦ КАК СуммаИспользованияКредита,
	|		СУММА(ЕСТЬNULL(ВТ_ЗапланированныеКредиты.Сумма, 0)) КАК СуммаЗапланированныхСделок
	|	ИЗ
	|		ВТ_НачальныйЛимит КАК ВТ_НачальныйЛимит
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДниКалендаря КАК ВТ_ДниКалендаря
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ИспользованиеКредитаЗаПериод КАК ВТ_ИспользованиеКредитаЗаПериод
	|			ПО (ВТ_ИспользованиеКредитаЗаПериод.БазовыйДоговор = ВТ_НачальныйЛимит.БазовыйДоговор)
	|				И (ВТ_ИспользованиеКредитаЗаПериод.Дата <= ВТ_ДниКалендаря.Дата)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированныеКредиты КАК ВТ_ЗапланированныеКредиты
	|			ПО ВТ_НачальныйЛимит.БазовыйДоговор = ВТ_ЗапланированныеКредиты.ДоговорКонтрагента
	|				И (ВТ_ЗапланированныеКредиты.ДатаНачала <= ВТ_ДниКалендаря.Дата)
	|				И (ВТ_ЗапланированныеКредиты.ДатаОкончания > ВТ_ДниКалендаря.Дата
	|					ИЛИ НЕ ВТ_НачальныйЛимит.ВозобновляемыйЛимит)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВТ_НачальныйЛимит.БазовыйДоговор,
	|		ВТ_ДниКалендаря.Дата,
	|		ВТ_НачальныйЛимит.ЛимитНачало,
	|		ВТ_НачальныйЛимит.ВозобновляемыйЛимит) КАК ЛимитыПоКредитам";
	
	
	ТекстЗапроса = ТекстЗапроса + ОбщегоНазначения.РазделительПакетаЗапросов();
	Возврат ТекстЗапроса;
	
КонецФункции	
       
Функция ТекстЗапросаСостояниеКалендаря_Выборка()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ДоговораКредитов.Организация КАК Организация,
	|	ВТ_ДоговораКредитов.Валюта КАК Валюта,
	|	ВТ_ДоговораКредитов.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_ДоговораКредитов.ФиксированныйСчетОрганизации КАК ФиксированныйСчетОрганизации,
	|	ВТ_ДоговораКредитов.Контрагент КАК Контрагент,
	|	ВТ_ДоговораКредитов.ДоговорКонтрагента КАК ДоговорКредита,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДоговораКредитов.ДоговорКонтрагента) КАК ДоговорКредитаПредставление,
	|	ВТ_ДоговораКредитов.БазовыйДоговор КАК БазовыйДоговорКредита,
	|	ВТ_ДоговораКредитов.ВерсияСоглашения КАК ВерсияСоглашения,
	|	ВТ_ДоговораКредитов.ВозобновляемыйЛимит КАК ВозобновляемыйЛимит,
	|	ВТ_ДоговораКредитов.Сумма КАК Сумма,
	|	ВТ_ДоговораКредитов.МинимальныйСрок КАК МинимальныйСрок,
	|	ВТ_ДоговораКредитов.МаксимальныйСрок КАК МаксимальныйСрок,
	|	ВТ_ДоговораКредитов.МинимальнаяСуммаСделки КАК МинимальнаяСуммаСделки,
	|	ВТ_ДоговораКредитов.МаксимальнаяСуммаСделки КАК МаксимальнаяСуммаСделки,
	|	ВТ_ДоговораКредитов.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ВТ_ДоговораКредитов.ДатаНачалаДоступности КАК ДатаНачалаДоступности,
	|	ВТ_ДоговораКредитов.ДатаОкончанияДоступности КАК ДатаОкончанияДоступности,
	|	ВТ_ДоговораКредитов.ВидСоглашения КАК ВидСоглашения
	|ИЗ
	|	ВТ_ДоговораКредитов КАК ВТ_ДоговораКредитов
	|ГДЕ
	|	ВТ_ДоговораКредитов.ВидСоглашения <> ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.РамочныйДоговор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПроцентнаяСтавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЛимитыПоКредитам.БазовыйДоговор КАК БазовыйДоговорКредита,
	|	ВТ_ЛимитыПоКредитам.Дата КАК Дата,
	|	ВТ_ЛимитыПоКредитам.Лимит КАК Лимит
	|ИЗ
	|	ВТ_ЛимитыПоКредитам КАК ВТ_ЛимитыПоКредитам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДоговорыОвердрафта.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_ДоговорыОвердрафта.ДатаНачалаДействия КАК ДатаНачалаДействия,
	|	ВТ_ДоговорыОвердрафта.СрокДействия КАК СрокДействия,
	|	ВТ_ДоговорыОвердрафта.ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	ВТ_ДоговорыОвердрафта.Лимит КАК Лимит
	|ИЗ
	|	ВТ_ДоговорыОвердрафта КАК ВТ_ДоговорыОвердрафта
	|
	|УПОРЯДОЧИТЬ ПО
	|	БанковскийСчет,
	|	ПроцентнаяСтавка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПроизводтсвеннныйКалендарь.Дата КАК Дата
	|ИЗ
	|	ВТ_ПроизводтсвеннныйКалендарь КАК ВТ_ПроизводтсвеннныйКалендарь
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_КурсыВалют.Валюта КАК Валюта,
	|	ВТ_КурсыВалют.Дата КАК Дата,
	|	ВТ_КурсыВалют.Курс КАК Курс,
	|	ВТ_КурсыВалют.Кратность КАК Кратность
	|ИЗ
	|	ВТ_КурсыВалют КАК ВТ_КурсыВалют
	|
	|УПОРЯДОЧИТЬ ПО
	|	Валюта,
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ЛимитыВнутригрупповыхПеремещений.ОрганизацияСписания КАК ОрганизацияСписания,
	|	ВТ_ЛимитыВнутригрупповыхПеремещений.ОрганизацияЗачисления КАК ОрганизацияЗачисления,
	|	ВТ_ЛимитыВнутригрупповыхПеремещений.КонтрагентЗачисления КАК КонтрагентЗачисления,
	|	ВТ_ЛимитыВнутригрупповыхПеремещений.ДоговорКонтрагентаЗачисления КАК ДоговорКонтрагентаЗачисления,
	|	ВТ_ЛимитыВнутригрупповыхПеремещений.Валюта КАК Валюта,
	|	ВТ_ЛимитыВнутригрупповыхПеремещений.Сумма КАК Сумма
	|ИЗ
	|	ВТ_ЛимитыВнутригрупповыхПеремещений КАК ВТ_ЛимитыВнутригрупповыхПеремещений
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияСписания,
	|	ОрганизацияЗачисления,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Заявки.Организация КАК Организация,
	|	Заявки.ПулЛиквидности КАК ПулЛиквидности,
	|	Заявки.Валюта КАК Валюта,
	|	Заявки.Банк КАК Банк,
	|	Заявки.БанковскийСчет КАК БанковскийСчет,
	|	Заявки.РазделПлатежногоКалендаря КАК РазделПлатежногоКалендаря,
	|	Заявки.Заявка КАК Заявка,
	|	Заявки.Приоритет КАК Приоритет,
	|	Заявки.Дата КАК Дата,
	|	Заявки.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	Заявки.ИдентификаторДобавившейОперации КАК ИдентификаторДобавившейОперации,
	|	Заявки.Сумма КАК Сумма,
	|	Заявки.ИдентификаторОтменившейОперации КАК ИдентификаторОтменившейОперации,
	|	Заявки.КрайняяДата КАК КрайняяДата,
	|	ВЫБОР
	|		КОГДА Заявки.КрайняяДата <= &ОкончаниеПериодаОтбора
	|			ТОГДА Заявки.КрайняяДата
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(&ОкончаниеПериодаОтбора, ДЕНЬ)
	|	КОНЕЦ КАК МаксимальнаяДатаЗаявки,
	|	Заявки.ФиксированныйБанковскийСчет КАК ФиксированныйБанковскийСчет,
	|	Заявки.ИсточникДанных КАК ИсточникДанных,
	|	ПРЕДСТАВЛЕНИЕ(Заявки.БанковскийСчет) КАК БанковскийСчетПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Заявки.Заявка) КАК ПредставлениеЗаявки,
	|	ЛОЖЬ КАК Оптимизация,
	|	ИСТИНА КАК Активна,
	|	&ВерсияПлатежногоКалендаря КАК ВерсияПлатежногоКалендаря,
	|	&Пользователь КАК Пользователь,
	|	Заявки.Заявка КАК Инструмент
	|ИЗ
	|	ВТ_Заявки КАК Заявки
	|ГДЕ
	|	&УсловиеОтбораЗаявок
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДанныеКалендаря.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_ДанныеКалендаря.Валюта КАК Валюта,
	|	ВТ_ДанныеКалендаря.Банк КАК Банк,
	|	ВТ_ДанныеКалендаря.Дата КАК Дата,
	|	ВТ_ДанныеКалендаря.Организация КАК Организация,
	|	ВТ_ДанныеКалендаря.Остаток КАК Остаток,
	|	ВТ_ДанныеКалендаря.ПулЛиквидности КАК ПулЛиквидности,
	|	ЕСТЬNULL(ВТ_ДанныеКалендаря.БанковскийСчет.СрокИсполненияПлатежа, 0) КАК СрокИсполненияПлатежаДней,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеКалендаря.Организация) КАК ОрганизацияПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеКалендаря.БанковскийСчет) КАК БанковскийСчетПредставление,
	|	ПРЕДСТАВЛЕНИЕ(ВТ_ДанныеКалендаря.Валюта) КАК ВалютаПредставление,
	|	ЛОЖЬ КАК Обработан,
	|	ВЫБОР
	|		КОГДА &УсловиеОтбораОстатков
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оптимизировать
	|ИЗ
	|	ВТ_ДанныеКалендаря КАК ВТ_ДанныеКалендаря
	|ГДЕ
	|	ВТ_ДанныеКалендаря.БанковскийСчет <> ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Остаток УБЫВ"
	;
		
	Возврат ТекстЗапроса;	
	
КонецФункции

Функция ТекстЗапросаУдалитьТекущуюОптимизацию()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПредставлениеПлатежногоКалендаря.ВерсияПлатежногоКалендаря КАК ВерсияПлатежногоКалендаря,
	|	ПредставлениеПлатежногоКалендаря.Пользователь КАК Пользователь,
	|	ПредставлениеПлатежногоКалендаря.Активна КАК Активна,
	|	ПредставлениеПлатежногоКалендаря.Организация КАК Организация,
	|	ПредставлениеПлатежногоКалендаря.ПулЛиквидности КАК ПулЛиквидности,
	|	ПредставлениеПлатежногоКалендаря.Валюта КАК Валюта,
	|	ПредставлениеПлатежногоКалендаря.Банк КАК Банк,
	|	ПредставлениеПлатежногоКалендаря.БанковскийСчет КАК БанковскийСчет,
	|	ПредставлениеПлатежногоКалендаря.РазделПлатежногоКалендаря КАК РазделПлатежногоКалендаря,
	|	ПредставлениеПлатежногоКалендаря.Инструмент КАК Инструмент,
	|	ПредставлениеПлатежногоКалендаря.Приоритет КАК Приоритет,
	|	ПредставлениеПлатежногоКалендаря.Дата КАК Дата,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторДобавившейОперации КАК ИдентификаторДобавившейОперации,
	|	ПредставлениеПлатежногоКалендаря.Сумма КАК Сумма,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторОтменившейОперации КАК ИдентификаторОтменившейОперации,
	|	ПредставлениеПлатежногоКалендаря.КрайняяДата КАК КрайняяДата,
	|	ПредставлениеПлатежногоКалендаря.ФиксированныйБанковскийСчет КАК ФиксированныйБанковскийСчет,
	|	ПредставлениеПлатежногоКалендаря.ИсточникДанных КАК ИсточникДанных,
	|	ПредставлениеПлатежногоКалендаря.Оптимизация КАК Оптимизация
	|ПОМЕСТИТЬ ВТ_ОперацииОптимизации
	|ИЗ
	|	РегистрСведений.ПредставлениеПлатежногоКалендаря КАК ПредставлениеПлатежногоКалендаря
	|ГДЕ
	|	ПредставлениеПлатежногоКалендаря.Оптимизация
	|	И ПредставлениеПлатежногоКалендаря.ВерсияПлатежногоКалендаря = &ВерсияПлатежногоКалендаря
	|	И ПредставлениеПлатежногоКалендаря.Пользователь = &Пользователь
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторДобавившейОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОперацииОптимизации.ВерсияПлатежногоКалендаря КАК ВерсияПлатежногоКалендаря,
	|	ВТ_ОперацииОптимизации.Пользователь КАК Пользователь,
	|	ВТ_ОперацииОптимизации.Активна КАК Активна,
	|	ВТ_ОперацииОптимизации.Организация КАК Организация,
	|	ВТ_ОперацииОптимизации.ПулЛиквидности КАК ПулЛиквидности,
	|	ВТ_ОперацииОптимизации.Валюта КАК Валюта,
	|	ВТ_ОперацииОптимизации.Банк КАК Банк,
	|	ВТ_ОперацииОптимизации.БанковскийСчет КАК БанковскийСчет,
	|	ВТ_ОперацииОптимизации.РазделПлатежногоКалендаря КАК РазделПлатежногоКалендаря,
	|	ВТ_ОперацииОптимизации.Инструмент КАК Инструмент,
	|	ВТ_ОперацииОптимизации.Приоритет КАК Приоритет,
	|	ВТ_ОперацииОптимизации.Дата КАК Дата,
	|	ВТ_ОперацииОптимизации.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ВТ_ОперацииОптимизации.ИдентификаторДобавившейОперации КАК ИдентификаторДобавившейОперации,
	|	ВТ_ОперацииОптимизации.Сумма КАК Сумма,
	|	ВТ_ОперацииОптимизации.ИдентификаторОтменившейОперации КАК ИдентификаторОтменившейОперации,
	|	ВТ_ОперацииОптимизации.КрайняяДата КАК КрайняяДата,
	|	ВТ_ОперацииОптимизации.ФиксированныйБанковскийСчет КАК ФиксированныйБанковскийСчет,
	|	ВТ_ОперацииОптимизации.ИсточникДанных КАК ИсточникДанных,
	|	ВТ_ОперацииОптимизации.Оптимизация КАК Оптимизация
	|ИЗ
	|	ВТ_ОперацииОптимизации КАК ВТ_ОперацииОптимизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредставлениеПлатежногоКалендаря.ВерсияПлатежногоКалендаря КАК ВерсияПлатежногоКалендаря,
	|	ПредставлениеПлатежногоКалендаря.Пользователь КАК Пользователь,
	|	ПредставлениеПлатежногоКалендаря.Активна КАК Активна,
	|	ПредставлениеПлатежногоКалендаря.Организация КАК Организация,
	|	ПредставлениеПлатежногоКалендаря.ПулЛиквидности КАК ПулЛиквидности,
	|	ПредставлениеПлатежногоКалендаря.Валюта КАК Валюта,
	|	ПредставлениеПлатежногоКалендаря.Банк КАК Банк,
	|	ПредставлениеПлатежногоКалендаря.БанковскийСчет КАК БанковскийСчет,
	|	ПредставлениеПлатежногоКалендаря.РазделПлатежногоКалендаря КАК РазделПлатежногоКалендаря,
	|	ПредставлениеПлатежногоКалендаря.Инструмент КАК Инструмент,
	|	ПредставлениеПлатежногоКалендаря.Приоритет КАК Приоритет,
	|	ПредставлениеПлатежногоКалендаря.Дата КАК Дата,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторДобавившейОперации КАК ИдентификаторДобавившейОперации,
	|	ПредставлениеПлатежногоКалендаря.Сумма КАК Сумма,
	|	ПредставлениеПлатежногоКалендаря.ИдентификаторОтменившейОперации КАК ИдентификаторОтменившейОперации,
	|	ПредставлениеПлатежногоКалендаря.КрайняяДата КАК КрайняяДата,
	|	ПредставлениеПлатежногоКалендаря.ФиксированныйБанковскийСчет КАК ФиксированныйБанковскийСчет,
	|	ПредставлениеПлатежногоКалендаря.ИсточникДанных КАК ИсточникДанных,
	|	ПредставлениеПлатежногоКалендаря.Оптимизация КАК Оптимизация
	|ИЗ
	|	РегистрСведений.ПредставлениеПлатежногоКалендаря КАК ПредставлениеПлатежногоКалендаря
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОперацииОптимизации КАК ВТ_ОперацииОптимизации
	|		ПО ПредставлениеПлатежногоКалендаря.ИдентификаторОтменившейОперации = ВТ_ОперацииОптимизации.ИдентификаторДобавившейОперации
	|			И (НЕ ПредставлениеПлатежногоКалендаря.Оптимизация)"
	;
	
	Возврат ТекстЗапроса;
	
КонецФункции	

Процедура ДобавитьКолонкуИндексСтрокиВТаблицуЗначений(Таблица, ИмяКолонкиИндекса)
	
	Если Таблица.Колонки.Найти(ИмяКолонкиИндекса) = Неопределено Тогда
		ТипИндекса = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10));
		Таблица.Колонки.Добавить(ИмяКолонкиИндекса, ТипИндекса);
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из Таблица Цикл
		СтрокаТаблицы[ИмяКолонкиИндекса] = Таблица.Индекс(СтрокаТаблицы);
	КонецЦикла;
		
КонецПроцедуры

Процедура ИзменитьСостояниеКалендаря(СостояниеКалендаря, ПараметрыКорректировки)
	
	Если ЗначениеЗаполнено(ПараметрыКорректировки.НовыеОстатки) Тогда
		ОбновитьСохраненныеОстаткиКалендаря(СостояниеКалендаря, ПараметрыКорректировки.НовыеОстатки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКорректировки.НовыеЛимитыВнутригрупповыхПереводов) Тогда
		ОбновитьЛимитыВнутригрупповыхПереводовКалендаря(СостояниеКалендаря, ПараметрыКорректировки.НовыеЛимитыВнутригрупповыхПереводов);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКорректировки.ПеремещенныеЗаявки) Тогда
		ВыполнитьПеремещениеЗаявокКалендаря(СостояниеКалендаря, ПараметрыКорректировки.ПеремещенныеЗаявки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКорректировки.ПереводыСобственныхСредств) Тогда
		ВыполнитьПереводыСобственныхСредств(СостояниеКалендаря, ПараметрыКорректировки.ПереводыСобственныхСредств);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКорректировки.ВнутригрупповыеПереводы) Тогда
		ВыполнитьВнутригрупповыеПереводы(СостояниеКалендаря, ПараметрыКорректировки.ВнутригрупповыеПереводы);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыКорректировки.КонвертацияВалюты) Тогда
		ВыполнитьКонвертациюВалюты(СостояниеКалендаря, ПараметрыКорректировки.КонвертацияВалюты);
	КонецЕсли;
	
	Если ПараметрыКорректировки.ОвердрафтПоСчету <> Неопределено Тогда
		ДобавитьОвердрафтВСписокОпераций(СостояниеКалендаря, ПараметрыКорректировки.ОвердрафтПоСчету);
	КонецЕсли;
	
	Если ПараметрыКорректировки.КредитПоСчету <> Неопределено Тогда
		ДобавитьКредитВСписокОпераций(СостояниеКалендаря, ПараметрыКорректировки.КредитПоСчету);
	КонецЕсли;

	Если ЗначениеЗаполнено(ПараметрыКорректировки.НовыеЛимитыКредитов) Тогда
		ОбновитьЛимитыКредитовКалендаря(СостояниеКалендаря, ПараметрыКорректировки.НовыеЛимитыКредитов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Остатки

Функция МинимальныйОстатокПоСчетуСДаты(Остатки, БанковскийСчет, Дата)
	
	ОтборОстатков = Новый Структура("БанковскийСчет", БанковскийСчет);
	ОстаткиПоСчету = Остатки.НайтиСтроки(ОтборОстатков); 
	
	МинимальныйОстаток = Неопределено;
	Для каждого СтрокаОстатка Из ОстаткиПоСчету Цикл	
		Если СтрокаОстатка.Дата >= Дата Тогда
			Если МинимальныйОстаток = Неопределено ИЛИ МинимальныйОстаток > СтрокаОстатка.Остаток Тогда
				 МинимальныйОстаток = СтрокаОстатка.Остаток;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат МинимальныйОстаток;
	
КонецФункции

Функция МинимальныйОстатокЗаПериод(ОстаткиПоСчету, ДатаНачала, ДатаОкончания)
	
	МинимальныйОстаток = Неопределено;
	Для каждого СтрокаОстатка Из ОстаткиПоСчету Цикл	
		Если СтрокаОстатка.Дата >= ДатаНачала И СтрокаОстатка.Дата <= ДатаОкончания Тогда
			Если МинимальныйОстаток = Неопределено ИЛИ МинимальныйОстаток > СтрокаОстатка.Остаток Тогда
				 МинимальныйОстаток = СтрокаОстатка.Остаток;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат МинимальныйОстаток;

КонецФункции

Функция ИзменитьСохраненныеОстаткиПоСчетуСДаты(Остатки, БанковскийСчет, Дата, Сумма)
	ИзменитьСохраненныеОстаткиПоОтборуЗаПериод(Остатки, Дата,, Сумма, Новый Структура("БанковскийСчет", БанковскийСчет));
КонецФункции

Функция ИзменитьСохраненныеОстаткиСДаты(Остатки, Дата, Сумма)
	ИзменитьСохраненныеОстаткиПоОтборуЗаПериод(Остатки, Дата,, Сумма);
КонецФункции

Функция ИзменитьСохраненныеОстаткиЗаПериод(Остатки, ДатаНачала, ДатаОкончания, Сумма)
	ИзменитьСохраненныеОстаткиПоОтборуЗаПериод(Остатки, ДатаНачала, ДатаОкончания, Сумма);
КонецФункции

Процедура ИзменитьСохраненныеОстаткиПоОтборуЗаПериод(Остатки, ДатаНачалаКорректировки = Неопределено, ДатаОкончанияКорректировки = Неопределено, СуммаКорректировки, ОтборОстатков = Неопределено)
	
	Если ОтборОстатков <> Неопределено Тогда 
		ОтобранныеОстатки = Остатки.НайтиСтроки(ОтборОстатков);
	Иначе
		ОтобранныеОстатки = Остатки;
	КонецЕсли;
	
	Если ТипЗнч(Остатки) = Тип("ТаблицаЗначений") Тогда
		ЕстьСвойствоИзменен = (Остатки.Колонки.Найти("Изменен") <> Неопределено);
	Иначе
		ЕстьСвойствоИзменен = Ложь;
	КонецЕсли;	
	
	Для каждого СтрокаОстатка Из ОтобранныеОстатки Цикл
		Если (ДатаНачалаКорректировки = Неопределено ИЛИ СтрокаОстатка.Дата >= ДатаНачалаКорректировки)
			И (ДатаОкончанияКорректировки = Неопределено ИЛИ СтрокаОстатка.Дата <= ДатаОкончанияКорректировки) Тогда
			
			СтрокаОстатка.Остаток = СтрокаОстатка.Остаток + СуммаКорректировки;
			Если ЕстьСвойствоИзменен Тогда
				СтрокаОстатка.Изменен = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСохраненныеОстаткиКалендаря(СостояниеКалендаря, НовыеОстатки)
	
	Остатки = СостояниеКалендаря.Остатки;
	Для каждого СтрокаНовыеОстатки ИЗ НовыеОстатки Цикл
		СтрокаОстатка = Остатки[СтрокаНовыеОстатки.ИндексСтроки];
		СтрокаОстатка.Остаток = СтрокаНовыеОстатки.Остаток;
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьСохраненныеОстаткиКалендаря(Остатки, КорректировкаОстатков)
	
	// Остатки: Дата, БанковскийСчет, Остаток
	// Корректировка: Дата, БанковскийСчет, Корректировка
	ОтборОстатков = Новый Структура("БанковскийСчет");
	ЗаполнитьЗначенияСвойств(ОтборОстатков, КорректировкаОстатков);
	ОстаткиПоСчету = Остатки.НайтиСтроки(ОтборОстатков);
	Для каждого СтрокаОстатка Из ОстаткиПоСчету Цикл
		Если СтрокаОстатка.Дата >= КорректировкаОстатков.Дата Тогда
			СтрокаОстатка.Остаток = СтрокаОстатка.Остаток + КорректировкаОстатков.Сумма;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// сумма исправлений отрицательных остатков по счету при поступлении средств, в валюте счета
Функция СуммарнаяОптимизацияПоСчетуЗаПериод(Остатки, БанковскийСчет, ДатаПоступления, ДатаВозврата = Неопределено, СуммаПоступления)
	
	СуммарнаяОптимизация = 0;                                                        
	ОтборПоСчету = Новый Структура("БанковскийСчет", БанковскийСчет);
	ОстаткиПоСчету = Остатки.НайтиСтроки(ОтборПоСчету);
	ПредыдущаяСтрока = Неопределено;
	Для каждого СтрокаОстатка Из ОстаткиПоСчету Цикл
		
		// если день пропущен (выходной) то берем предыдущее значение остатка на этот день
		Если ПредыдущаяСтрока <> Неопределено Тогда 
			ДнейМеждуДатами = ДнейМеждуДатами(ПредыдущаяСтрока.Дата, СтрокаОстатка.Дата);
			Для НомерДня = 1 По ДнейМеждуДатами - 1 Цикл
				Дата = ДобавитьДнейКДате(ПредыдущаяСтрока.Дата, НомерДня);
				Если Дата >= ДатаПоступления И (ДатаВозврата = Неопределено ИЛИ Дата < ДатаВозврата) Тогда 
					СуммаОптимизации = ?(ПредыдущаяСтрока.Остаток < 0, Мин(-ПредыдущаяСтрока.Остаток, СуммаПоступления), 0);
					СуммарнаяОптимизация = СуммарнаяОптимизация + СуммаОптимизации;
				КонецЕсли;	
			КонецЦикла;
		КонецЕсли;	
	
		Если СтрокаОстатка.Дата >= ДатаПоступления И (ДатаВозврата = Неопределено ИЛИ СтрокаОстатка.Дата < ДатаВозврата) Тогда
			СуммаОптимизации = ?(СтрокаОстатка.Остаток < 0, Мин(-СтрокаОстатка.Остаток, СуммаПоступления), 0);
			СуммарнаяОптимизация = СуммарнаяОптимизация + СуммаОптимизации;
		КонецЕсли;
		
		ПредыдущаяСтрока = СтрокаОстатка;
		
	КонецЦикла;	
	
	Возврат СуммарнаяОптимизация;
	
КонецФункции

#КонецОбласти

#Область Даты

Функция БлижайшийРабочийДеньПослеДаты(ВыбранныйДень, ТаблицаДниКалендаря, ДатаПоУмолчанию = Неопределено)
	
	// таблица дней отсортирована по убыванию даты
	БлижайшийДень = Неопределено;
	Для каждого СтрокаДень Из ТаблицаДниКалендаря Цикл
		Если СтрокаДень.Дата >= ВыбранныйДень Тогда
			БлижайшийДень = СтрокаДень.Дата;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если БлижайшийДень = Неопределено Тогда
		БлижайшийДень = ДатаПоУмолчанию;
	КонецЕсли;
	
	Возврат БлижайшийДень;
	
КонецФункции

Функция БлижайшийРабочийДеньДоДаты(ВыбранныйДень, ТаблицаДниКалендаря, ДатаПоУмолчанию = Неопределено, ПлатежныеДниНедели = Неопределено)
	
	// таблица дней отсортирована по убыванию даты
	БлижайшийДень = Неопределено;
	Для каждого СтрокаДень Из ТаблицаДниКалендаря Цикл
		Если СтрокаДень.Дата <= ВыбранныйДень Тогда
			Если ПлатежныеДниНедели = Неопределено ИЛИ ПлатежныеДниНедели.Найти(ДеньНедели(СтрокаДень.Дата)) <> Неопределено Тогда
				БлижайшийДень = СтрокаДень.Дата;
			КонецЕсли;	
		Иначе	
			Прервать;
		КонецЕсли;	
	КонецЦикла;
	
	Если БлижайшийДень = Неопределено Тогда
		БлижайшийДень = ДатаПоУмолчанию;
	КонецЕсли;

	
	Возврат БлижайшийДень;
	
КонецФункции

Функция ДобавитьДнейКДате(Дата, КоличествоДней)
	
	Возврат Дата + КоличествоДней * 24*60*60;
	
КонецФункции

Функция ДнейМеждуДатами(ДатаНачала, ДатаОкончания)
	Возврат (ДатаОкончания - ДатаНачала) / (24*60*60);
КонецФункции

#КонецОбласти

#Область ОбщиеПроцедурыОптимизации

Функция РезультатОптимизацииПлатежногоКалендаря(СтрокаДня, ВариантКорректировки, СостояниеКалендаря, НастройкиОптимизации)
	
	Если ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеСчетаЗаявки ИЛИ
		ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеДатыЗаявки ИЛИ
		ВариантКорректировки = "ИзменениеДатыИСчетаЗаявки" Тогда
		
		РезультатКорректировки = РезультатОптимизацииИзменениеДатыИСчетаЗаявки(СтрокаДня, ВариантКорректировки, СостояниеКалендаря, НастройкиОптимизации);
		
	ИначеЕсли ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ПереводСобственныхСредств Тогда	
		
		РезультатКорректировки = РезультатОптимизацииПереводСобственныхСредств(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации);
		
	ИначеЕсли ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ВнутригрупповойПеревод Тогда	
		
		РезультатКорректировки = РезультатОптимизацииВнутригрупповыеПереводы(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации);
		
	ИначеЕсли ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.КонвертацияВалюты Тогда	
		
		РезультатКорректировки = РезультатОптимизацииКонвертацияВалюты(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации);
		
	ИначеЕсли ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.Овердрафт Тогда	
		
		РезультатКорректировки = РезультатОптимизацииОвердрафт(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации);
		
	ИначеЕсли ВариантКорректировки = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.Кредит Тогда	
		
		РезультатКорректировки = РезультатОптимизацииКредит(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации);
		
	Иначе
		ВызватьИсключение "Неоподдерживаемый вариант оптимизации платежного календаря: " + ВариантКорректировки;
	КонецЕсли;
	
	Возврат РезультатКорректировки;
	
КонецФункции

Процедура ОптимизироватьРассчитанныеОперации(СостояниеКалендаря)
	
	Если ЗначениеЗаполнено(СостояниеКалендаря.КредитыПоСчетам) Тогда
		ОптимизироватьРассчитанныеКредиты(СостояниеКалендаря);
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьОперацииОптимизацииКалендаря(СостояниеКалендаря)
	
	СоздатьОперацииПеремещенияЗаявок(СостояниеКалендаря);
	
	Если ЗначениеЗаполнено(СостояниеКалендаря.ОвердрафтПоСчетам) Тогда
		СоздатьОперацииОвердрафта(СостояниеКалендаря, СостояниеКалендаря.ОвердрафтПоСчетам);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СостояниеКалендаря.КредитыПоСчетам) Тогда
		СоздатьОперацииКредита(СостояниеКалендаря, СостояниеКалендаря.КредитыПоСчетам);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйРезультатОптимизацииКалендаря()
	
	РезультатОптимизации = Новый Структура;
	РезультатОптимизации.Вставить("Выполнена", Ложь);
	РезультатОптимизации.Вставить("ОтносительнаяСтоимостьОптимизации", 0);
	РезультатОптимизации.Вставить("ДеньПолностьюСкорректирован", Ложь);
	РезультатОптимизации.Вставить("ПеремещенныеЗаявки");
	РезультатОптимизации.Вставить("НовыеОстатки");
	РезультатОптимизации.Вставить("НовыеЛимитыВнутригрупповыхПереводов");
	РезультатОптимизации.Вставить("ПереводыСобственныхСредств");
	РезультатОптимизации.Вставить("ВнутригрупповыеПереводы");
	РезультатОптимизации.Вставить("КонвертацияВалюты");
	РезультатОптимизации.Вставить("ОвердрафтПоСчету");
	РезультатОптимизации.Вставить("КредитПоСчету");
	РезультатОптимизации.Вставить("НовыеЛимитыКредитов");
	
	Возврат РезультатОптимизации;
	
КонецФункции

Процедура ЗакончитьОбработкуДня(СтрокаДня)
	
	СтрокаДня.Обработан = Истина;
	
КонецПроцедуры

Функция ДоступныеВариантыОптимизации(НастройкиОптимизации)
	
	ВариантыОптимизации = НастройкиОптимизации.ВариантыОптимизации;
	ИндексИзменениеДатыЗаявки = ВариантыОптимизации.Найти(Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеДатыЗаявки);
	ИндексИзменениеСчетаЗаявки = ВариантыОптимизации.Найти(Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеСчетаЗаявки);
	Если ИндексИзменениеДатыЗаявки <> Неопределено И ИндексИзменениеСчетаЗаявки <> Неопределено Тогда
		// заменяем на одну оптимизацию - изменение счета и даты
		ВариантыОптимизации = ОбщегоНазначения.СкопироватьРекурсивно(НастройкиОптимизации.ВариантыОптимизации);
		ВариантыОптимизации[ИндексИзменениеСчетаЗаявки] = "ИзменениеДатыИСчетаЗаявки";
		ВариантыОптимизации.Удалить(ИндексИзменениеДатыЗаявки);
	КонецЕсли;

	Возврат ВариантыОптимизации;
	
КонецФункции

Функция НайтиНеобработанныйДеньСНедостачей(ТаблицаОстатков)
	
	Для каждого СтрокаОстатка Из ТаблицаОстатков Цикл
		Если СтрокаОстатка.Остаток < 0 И СтрокаОстатка.Оптимизировать И НЕ СтрокаОстатка.Обработан Тогда
			Возврат СтрокаОстатка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйУточнениеОперации()
	
	СтрокаРеквизитов =
		"БанкСписания, БанкЗачисления, БанковскийСчетСписания, БанковскийСчетЗачисления, ДатаСписания, СуммаСписания,
		|ЭтоПополнениеСчета, СуммаЗачисления, ДатаЗачисления, КурсКонвертации, КратностьКонвертации,
		|ВалютаСписания, ВалютаЗачисления, ОрганизацияСписания, ОрганизацияЗачисления, ДоговорКонтрагента,
		|ВидОперацииУХ, ВидОперацииУХВстречный, ЦФО, Проект, Подразделение,
		|СтатьяДвиженияДенежныхСредств, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6,
		|СтатьяДвиженияДенежныхСредствЗачисление, АналитикаЗачисление1, АналитикаЗачисление2, АналитикаЗачисление3,
		|АналитикаЗачисление4, АналитикаЗачисление5, АналитикаЗачисление6,
		|ПлатежиПо275ФЗ, ТипПлатежаФЗ275, ДоговорСЗаказчиком, Контрагент, БанковскийСчетКонтрагента";
	
	Результат = Новый Структура(СтрокаРеквизитов);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РазмещениеЗаявок

Процедура РаспределитьЗаявкиСНезаполненнымСчетом(СостояниеКалендаря, НастройкиОптимизации)
	
	Заявки = СостояниеКалендаря.Заявки; // отсортированы по возврастанию даты
	Отбор = Новый Структура("БанковскийСчет", Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка());
	ЗаявкиБезСчета = Заявки.НайтиСтроки(Отбор);
	
	Если НЕ ЗначениеЗаполнено(ЗаявкиБезСчета) Тогда
		Возврат;
	КонецЕсли;         
	
	ОтборОстатков = Новый Структура("Организация, Валюта, Дата");
	Остатки = СостояниеКалендаря.Остатки; // отсортированы по убыванию остатка
	Для каждого СтрокаЗаявки ИЗ ЗаявкиБезСчета Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборОстатков, СтрокаЗаявки, "Организация, Валюта, Дата");
				
		// распределяем на первый счет с нужным остатком на дату заявки
		ОстаткиПоОрганизацииИВалюте = Остатки.НайтиСтроки(ОтборОстатков);	
		Для каждого СтрокаОстаток Из ОстаткиПоОрганизацииИВалюте Цикл 
			Если СтрокаОстаток.Остаток >= СтрокаЗаявки.Сумма Тогда
				РазместитьЗаявкуНаСчете(СостояниеКалендаря, СтрокаЗаявки, СтрокаОстаток);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// если нет остатка то берем первый попавшийся счет, потом будем оптимизировать 
		Если НЕ ЗначениеЗаполнено(СтрокаЗаявки.БанковскийСчет) Тогда
			Если ОстаткиПоОрганизацииИВалюте.Количество() > 0 Тогда
				РазместитьЗаявкуНаСчете(СостояниеКалендаря, СтрокаЗаявки, СтрокаОстаток);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	

Процедура РазместитьЗаявкуНаСчете(СостояниеКалендаря, ТекущиеПараметрыЗаявки, ПараметрыРазмещения)
	
	Остатки = СостояниеКалендаря.Остатки;
	
	НовыеПараметрыЗаявки = Новый Структура("Банк, БанковскийСчет, БанковскийСчетПредставление");
	ЗаполнитьЗначенияСвойств(НовыеПараметрыЗаявки, ПараметрыРазмещения, "Банк, БанковскийСчет, БанковскийСчетПредставление");
	ПереместитьЗаявкуКалендаря(НовыеПараметрыЗаявки, ТекущиеПараметрыЗаявки, СостояниеКалендаря);
	
	ПараметрыКорректировкиОстатков = Новый Структура("БанковскийСчет, Дата, Сумма");
	ЗаполнитьЗначенияСвойств(ПараметрыКорректировкиОстатков, ПараметрыРазмещения, "БанковскийСчет, Дата");
	ПараметрыКорректировкиОстатков.Сумма = - ТекущиеПараметрыЗаявки.Сумма;
	СкорректироватьСохраненныеОстаткиКалендаря(Остатки, ПараметрыКорректировкиОстатков);
	
КонецПроцедуры

#КонецОбласти

#Область ПеремещениеЗаявки

Функция РезультатОптимизацииИзменениеДатыИСчетаЗаявки(СтрокаДня, ВариантОптимизации, СостояниеКалендаря, НастройкиОптимизации)
	
	РезультатОптимизации = НовыйРезультатОптимизацииКалендаря();
	НачальныйОстаток = СтрокаДня.Остаток;
	ОстатокВДне = СтрокаДня.Остаток;
	Если ОстатокВДне >= 0 Тогда
		Возврат РезультатОптимизации; // изначально остаток отрицательный
	КонецЕсли;	
	
	ВсеОстатки = СостояниеКалендаря.Остатки;
	ВсеЗаявки = СостояниеКалендаря.Заявки;
	КорректируемыйДень = СтрокаДня.Дата;
	ГоризонтОперативногоПланирования = СостояниеКалендаря.ГоризонтОперативногоПланирования;
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря;
	ПлатежныеДниНедели = СостояниеКалендаря.ПлатежныеДниНедели;
	
	// Заявки по счету
	ОтборЗаявокПоСчету = Новый Структура("БанковскийСчет");
	ОтборЗаявокПоСчету.БанковскийСчет = СтрокаДня.БанковскийСчет;	
	ЗаявкиПоСчету = ВсеЗаявки.Скопировать(ОтборЗаявокПоСчету);
	Если НЕ ЗначениеЗаполнено(ЗаявкиПоСчету) Тогда
		Возврат РезультатОптимизации;
	КонецЕсли;
	
	ЗаявкиПоСчету.Колонки.Добавить("Изменена", Новый ОписаниеТипов("Булево"));
	ЗаявкиПоСчету.Сортировать("Сумма Убыв");
	
	// Доступные остатки
	ОтборДоступныхОстатков = Новый Структура("Организация, Валюта");
	ЗаполнитьЗначенияСвойств(ОтборДоступныхОстатков, СтрокаДня);	
	ДоступныеОстатки = ВсеОстатки.Скопировать(ОтборДоступныхОстатков);
	Если НЕ ЗначениеЗаполнено(ДоступныеОстатки) Тогда
		Возврат РезультатОптимизации;
	КонецЕсли;
	ДоступныеОстатки.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	ДоступныеОстатки.Сортировать("Остаток Возр");
		
	Для каждого СтрокаЗаявки Из ЗаявкиПоСчету Цикл
		Если СтрокаЗаявки.Дата <= КорректируемыйДень Тогда // перенос повлияет на остаток
			
			НайденнаяСтрокаОстатка = Неопределено;
			
			// перенос заявки на другой счет в туже дату	 		
			Если НайденнаяСтрокаОстатка = Неопределено
				И (ВариантОптимизации = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеСчетаЗаявки
					ИЛИ ВариантОптимизации = "ИзменениеДатыИСчетаЗаявки") Тогда
					
					Если НЕ СтрокаЗаявки.ФиксированныйБанковскийСчет Тогда 
						Для каждого СтрокаОстатка Из ДоступныеОстатки Цикл
							Если  СтрокаОстатка.БанковскийСчет <> СтрокаЗаявки.БанковскийСчет 
								И СтрокаОстатка.Дата = СтрокаЗаявки.Дата
								И СтрокаОстатка.Остаток >= СтрокаЗаявки.Сумма Тогда 
								
								МинимальныйОстатокПоСчету = МинимальныйОстатокПоСчетуСДаты(ДоступныеОстатки, СтрокаОстатка.БанковскийСчет, СтрокаОстатка.Дата);
								Если МинимальныйОстатокПоСчету >= СтрокаЗаявки.Сумма Тогда
									НайденнаяСтрокаОстатка = СтрокаОстатка;
									Прервать; // нашли
								КонецЕсли;
							КонецЕсли;	
						КонецЦикла;
					КонецЕсли;			
			КонецЕсли;	
				
			// переносим заявку на крайнюю дату в пределах календаря, если она повлияет на остаток в дне
			Если НайденнаяСтрокаОстатка = Неопределено 
				И (ВариантОптимизации = Перечисления.ВариантыОптимизацииПлатежногоКалендаря.ИзменениеДатыЗаявки
					ИЛИ ВариантОптимизации = "ИзменениеДатыИСчетаЗаявки") Тогда
							
					Если ЗначениеЗаполнено(СтрокаЗаявки.МаксимальнаяДатаЗаявки) И 
						СтрокаЗаявки.Дата < СтрокаЗаявки.МаксимальнаяДатаЗаявки И СтрокаЗаявки.МаксимальнаяДатаЗаявки > КорректируемыйДень Тогда 	
						
						НоваяДатаЗаявки = БлижайшийРабочийДеньДоДаты(СтрокаЗаявки.МаксимальнаяДатаЗаявки, ДниКалендаря, СтрокаЗаявки.Дата, ПлатежныеДниНедели);
						Если НоваяДатаЗаявки > СтрокаЗаявки.Дата И НоваяДатаЗаявки > КорректируемыйДень Тогда 
							ОтборПоСчетуДате = Новый Структура("БанковскийСчет, Дата");
							ОтборПоСчетуДате.БанковскийСчет = СтрокаЗаявки.БанковскийСчет;	
							ОтборПоСчетуДате.Дата = НоваяДатаЗаявки;
							ОстаткиПоСчетуДате = ДоступныеОстатки.НайтиСтроки(ОтборПоСчетуДате);
							
							Если ЗначениеЗаполнено(ОстаткиПоСчетуДате) Тогда
								НайденнаяСтрокаОстатка = ОстаткиПоСчетуДате[0]; // не нужно контролировать остаток при перемещении заявки вперед		
							Иначе
								// виртуальная строка остатка для единообразия алгоритма, если дата больше границы календаря
								НайденнаяСтрокаОстатка = Новый Структура("Дата, Банк, БанковскийСчет, БанковскийСчетПредставление");
								ЗаполнитьЗначенияСвойств(НайденнаяСтрокаОстатка, СтрокаЗаявки);
								НайденнаяСтрокаОстатка.Дата = НоваяДатаЗаявки;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
			КонецЕсли;	
				
			// переносим заявку и на другой счет и на другую дату
			Если НайденнаяСтрокаОстатка = Неопределено 
				И ВариантОптимизации = "ИзменениеДатыИСчетаЗаявки" Тогда
					 		
				Если НЕ СтрокаЗаявки.ФиксированныйБанковскийСчет И ЗначениеЗаполнено(СтрокаЗаявки.МаксимальнаяДатаЗаявки)
					И СтрокаЗаявки.Дата < СтрокаЗаявки.МаксимальнаяДатаЗаявки Тогда 
					
					Для каждого СтрокаОстатка Из ДоступныеОстатки Цикл
						Если  СтрокаОстатка.БанковскийСчет <> СтрокаЗаявки.БанковскийСчет 
							И СтрокаОстатка.Остаток >= СтрокаЗаявки.Сумма
							И СтрокаОстатка.Дата <= СтрокаЗаявки.МаксимальнаяДатаЗаявки 
							И СтрокаОстатка.Дата <> СтрокаЗаявки.Дата 
							И ПлатежныеДниНедели.Найти(ДеньНедели(СтрокаОстатка.Дата)) <> Неопределено Тогда 
							
							МинимальныйОстатокПоСчету = МинимальныйОстатокПоСчетуСДаты(ДоступныеОстатки, СтрокаОстатка.БанковскийСчет, СтрокаОстатка.Дата);
							Если МинимальныйОстатокПоСчету >= СтрокаЗаявки.Сумма Тогда
								НайденнаяСтрокаОстатка = СтрокаОстатка;
								Прервать; // нашли
							КонецЕсли;
						КонецЕсли;	
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
	
			Если НайденнаяСтрокаОстатка <> Неопределено Тогда 
				
				ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаЗаявки.БанковскийСчет, СтрокаЗаявки.Дата, СтрокаЗаявки.Сумма);
				ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, НайденнаяСтрокаОстатка.БанковскийСчет, НайденнаяСтрокаОстатка.Дата, -СтрокаЗаявки.Сумма);
				ЗаполнитьЗначенияСвойств(СтрокаЗаявки, НайденнаяСтрокаОстатка, "Дата, Банк, БанковскийСчет, БанковскийСчетПредставление");
				
				СтрокаЗаявки.Изменена = Истина;		
				
				ОстатокВДне = ОстатокВДне + СтрокаЗаявки.Сумма;
				Если ОстатокВДне >= 0 Тогда
					Прервать; // оптимизировали
				КонецЕсли;	
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	РезультатОптимизации.Выполнена = (ОстатокВДне > НачальныйОстаток);
	РезультатОптимизации.ДеньПолностьюСкорректирован = (ОстатокВДне >= 0);
	РезультатОптимизации.ОтносительнаяСтоимостьОптимизации = 0;
	
	ОтборИзмененныхЗаявок = Новый Структура("Изменена", Истина);
	ПеремещенныеЗаявки = ЗаявкиПоСчету.Скопировать(ОтборИзмененныхЗаявок);
	РезультатОптимизации.ПеремещенныеЗаявки = ПеремещенныеЗаявки;
	
	ОтборИзмененныхОстатков = Новый Структура("Изменен", Истина);
	НовыеОстатки = ДоступныеОстатки.Скопировать(ОтборИзмененныхОстатков, "ИндексСтроки, Остаток");
	РезультатОптимизации.НовыеОстатки = НовыеОстатки;
		
	Возврат РезультатОптимизации;
			
КонецФункции

Функция ПредставлениеОперацииПеремещенияЗаявки(НовыеПараметрыЗаявки, СтарыеПараметрыЗаявки)
	
	ПредставлениеОперации = ""; 
	ФорматДаты = "ДЛФ=D";
	
	Если СтарыеПараметрыЗаявки.БанковскийСчет <> НовыеПараметрыЗаявки.БанковскийСчет Тогда
		Если ЗначениеЗаполнено(СтарыеПараметрыЗаявки.БанковскийСчет) Тогда
			
			Если СтарыеПараметрыЗаявки.Дата = НовыеПараметрыЗаявки.Дата Тогда
				ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Перемещение ""%1"" со счета %2 на счет %3'"),
													СтарыеПараметрыЗаявки.ПредставлениеЗаявки,
													СтарыеПараметрыЗаявки.БанковскийСчетПредставление,
													НовыеПараметрыЗаявки.БанковскийСчетПредставление);
												
			Иначе
				ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Перемещение ""%1"" со счета %2 на счет %3 с %4 на %5'"),
													СтарыеПараметрыЗаявки.ПредставлениеЗаявки,
													СтарыеПараметрыЗаявки.БанковскийСчетПредставление,
													НовыеПараметрыЗаявки.БанковскийСчетПредставление,
													Формат(СтарыеПараметрыЗаявки.Дата, ФорматДаты),
													Формат(НовыеПараметрыЗаявки.Дата, ФорматДаты));								
			КонецЕсли;
												
		Иначе
			
			ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Размещение ""%1"" на счете %2'"),
												СтарыеПараметрыЗаявки.ПредставлениеЗаявки,
												НовыеПараметрыЗаявки.БанковскийСчетПредставление);
		КонецЕсли;
		
	ИначеЕсли СтарыеПараметрыЗаявки.Дата <> НовыеПараметрыЗаявки.Дата Тогда
				
		ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Изменение даты ""%1"" с %2 на %3'"),
												СтарыеПараметрыЗаявки.ПредставлениеЗаявки,
												Формат(СтарыеПараметрыЗаявки.Дата, ФорматДаты),
												Формат(НовыеПараметрыЗаявки.Дата, ФорматДаты));
	КонецЕсли;
	
	Возврат ПредставлениеОперации;
	
КонецФункции

Процедура ПереместитьЗаявкуКалендаря(НовыеПараметрыЗаявки, ТекущиеПараметрыЗаявки, СостояниеКалендаря)

	// повторное перемещение, объединяем в одно
	Если ТекущиеПараметрыЗаявки.Оптимизация Тогда 
		ИсходнаяЗаявка = ТекущиеПараметрыЗаявки.ИсходнаяЗаявка;
	Иначе
		ИсходнаяЗаявка = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекущиеПараметрыЗаявки);
	КонецЕсли;	
		
	// Обновляем свойства в заявке
	ЗаполнитьЗначенияСвойств(ТекущиеПараметрыЗаявки, НовыеПараметрыЗаявки);
	ТекущиеПараметрыЗаявки.ИдентификаторДобавившейОперации = Новый УникальныйИдентификатор;;
	ТекущиеПараметрыЗаявки.Оптимизация = Истина;
	ТекущиеПараметрыЗаявки.ИсходнаяЗаявка = ИсходнаяЗаявка;
	
КонецПроцедуры

Процедура СоздатьОперацииПеремещенияЗаявок(СостояниеКалендаря)
	
	Заявки = СостояниеКалендаря.Заявки;
	ОтборОптимизация = Новый Структура("Оптимизация", Истина);
	ПеремещенныеЗаявки = Заявки.НайтиСтроки(ОтборОптимизация);
	Для каждого СтрокаЗаявка Из ПеремещенныеЗаявки Цикл
		СоздатьОперациюПеремещенияЗаявки(СостояниеКалендаря, СтрокаЗаявка);
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОперациюПеремещенияЗаявки(СостояниеКалендаря, СтрокаЗаявки)
	
	ИсходнаяЗаявка = СтрокаЗаявки.ИсходнаяЗаявка;
	
	// Добавление операции на форме платежного календаря
	ИдентификаторОперации = Новый УникальныйИдентификатор;
	
	Операция = Отчеты.ПлатежныйКалендарьУХ.СтруктураИнструмента();
	Операция.Активна = Истина;
	Операция.ИдентификаторОперации = СтрокаЗаявки.ИдентификаторДобавившейОперации;
	Операция.ВидОперации =  Перечисления.ВидыОперацийПлатежногоКалендаря.ПеремещениеЗаявки;	
	Операция.Оптимизация = Истина;
	Операция.ПредставлениеОперации = ПредставлениеОперацииПеремещенияЗаявки(СтрокаЗаявки, ИсходнаяЗаявка);	
	
	Операция.ОрганизацияЗачисления = ИсходнаяЗаявка.Организация;
	Операция.БанкЗачисления = ИсходнаяЗаявка.Банк;
	Операция.БанковскийСчетЗачисления = ИсходнаяЗаявка.БанковскийСчет;
	Операция.ВалютаЗачисления = ИсходнаяЗаявка.Валюта;
	Операция.ДатаЗачисления = ИсходнаяЗаявка.Дата;
	Операция.ОрганизацияСписания = СтрокаЗаявки.Организация;
	Операция.БанкСписания = СтрокаЗаявки.Банк;
	Операция.БанковскийСчетСписания = СтрокаЗаявки.БанковскийСчет;
	Операция.ВалютаСписания = СтрокаЗаявки.Валюта;
	Операция.ДатаСписания = СтрокаЗаявки.Дата;
	
	СостояниеКалендаря.НовыеОперации.Добавить(Операция);
	
	НачатьТранзакцию();
	Попытка
		
		// Строка 1: отмена старой заявки со старого счета.
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ИсходнаяЗаявка);
		МЗ.Прочитать();
		МЗ.Активна = Ложь;
		МЗ.ИдентификаторОтменившейОперации = СтрокаЗаявки.ИдентификаторДобавившейОперации;
		МЗ.Записать();
		
		// Строка 2: размещение заявки на новый счет
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, СтрокаЗаявки);
		МЗ.Сумма = - СтрокаЗаявки.Сумма;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьПеремещениеЗаявокКалендаря(СостояниеКалендаря, ПеремещенныеЗаявки)
	
	ТекущиеЗаявки = СостояниеКалендаря.Заявки;
	Для каждого СтрокаИзмененныеЗаявки Из ПеремещенныеЗаявки Цикл
		СтрокаЗаявки = ТекущиеЗаявки.Найти(СтрокаИзмененныеЗаявки.Заявка, "Заявка"); 
		ПереместитьЗаявкуКалендаря(СтрокаИзмененныеЗаявки, СтрокаЗаявки, СостояниеКалендаря);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПереводыСобственныхСредств

Функция РезультатОптимизацииПереводСобственныхСредств(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации)
	
	РезультатОптимизации = НовыйРезультатОптимизацииКалендаря();
	
	НачальныйОстаток = СтрокаДня.Остаток;
	ОстатокВДне = СтрокаДня.Остаток;
	Если ОстатокВДне >= 0 Тогда
		Возврат РезультатОптимизации; // изначально остаток отрицательный
	КонецЕсли;	
	
	Остатки = СостояниеКалендаря.Остатки;
	
	ОтборОстатков = Новый Структура("Организация, Валюта");
	ЗаполнитьЗначенияСвойств(ОтборОстатков, СтрокаДня);
	ДоступныеОстатки = Остатки.Скопировать(ОтборОстатков);
	ДоступныеОстатки.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	ДоступныеОстатки.Сортировать("Остаток Возр");
	
	СтоимостьПереводаМеждуСчетами = НастройкиОптимизации.СтоимостьПереводаМеждуСчетами; // в рублях
	Если СтрокаДня.Валюта <> СостояниеКалендаря.ВалютаРегламентированногоУчета Тогда
		ОтборВалюты = Новый Структура("Валюта, Дата");
		ЗаполнитьЗначенияСвойств(ОтборВалюты, СтрокаДня);
		КурсыВалютыСчета = СостояниеКалендаря.КурсыВалют.НайтиСтроки(ОтборВалюты);
		СтрокаКурса = КурсыВалютыСчета[0];
		СтоимостьПереводаМеждуСчетами = СтоимостьПереводаМеждуСчетами / СтрокаКурса.Курс * СтрокаКурса.Кратность;
	КонецЕсли;
	
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря;
	
	ТаблицаПереводов = НоваяТаблицаПереводовСобственныхСредств();
	СтоимостьИзменения = 0;
	
	ДатаСписанияСДругогоБанка = СтрокаДня.Дата - СтрокаДня.СрокИсполненияПлатежаДней * 24*60*60;
	ДатаСписанияСДругогоБанкаПоКалендарю = БлижайшийРабочийДеньДоДаты(ДатаСписанияСДругогоБанка, ДниКалендаря);

	Для каждого СтрокаОстатка ИЗ ДоступныеОстатки Цикл
		Если СтрокаОстатка.БанковскийСчет <> СтрокаДня.БанковскийСчет
			И СтрокаОстатка.Остаток > 0 Тогда
			
			ДатаСписанияПоКалендарю = ?(СтрокаОстатка.Банк = СтрокаДня.Банк, СтрокаДня.Дата, ДатаСписанияСДругогоБанкаПоКалендарю);
			Если ДатаСписанияПоКалендарю <> Неопределено И СтрокаОстатка.Дата = ДатаСписанияПоКалендарю Тогда
		
				МинимальныйОстатокПоСчету = МинимальныйОстатокПоСчетуСДаты(ДоступныеОстатки, СтрокаОстатка.БанковскийСчет, СтрокаОстатка.Дата);
				Если МинимальныйОстатокПоСчету > 0 Тогда
					
					// Добавление перевода в таблицу  
					СуммаПеревода = Мин(МинимальныйОстатокПоСчету, -СтрокаДня.Остаток);
					
					СтрокаПеревода = ТаблицаПереводов.Добавить();
					СтрокаПеревода.Организация = СтрокаДня.Организация;
					СтрокаПеревода.ОрганизацияПредставление = СтрокаДня.ОрганизацияПредставление;
					СтрокаПеревода.Валюта = СтрокаДня.Валюта;
					СтрокаПеревода.ВалютаПредставление = СтрокаДня.ВалютаПредставление;
					СтрокаПеревода.Сумма = СуммаПеревода;

					СтрокаПеревода.ДатаЗачисления = СтрокаДня.Дата;
					СтрокаПеревода.БанкЗачисления = СтрокаДня.Банк;
					СтрокаПеревода.БанковскийСчетЗачисления = СтрокаДня.БанковскийСчет;
					СтрокаПеревода.БанковскийСчетЗачисленияПредставление = СтрокаДня.БанковскийСчетПредставление;
					СтрокаПеревода.ПулЛиквидностиЗачисления = СтрокаДня.ПулЛиквидности;
					
					СтрокаПеревода.ДатаСписания = СтрокаОстатка.Дата;
					СтрокаПеревода.БанкСписания = СтрокаОстатка.Банк;
					СтрокаПеревода.БанковскийСчетСписания = СтрокаОстатка.БанковскийСчет;
					СтрокаПеревода.БанковскийСчетСписанияПредставление = СтрокаОстатка.БанковскийСчетПредставление;
					СтрокаПеревода.ПулЛиквидностиСписания = СтрокаОстатка.ПулЛиквидности;
					
			        // изменяем остатки после перевода
					ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаПеревода.БанковскийСчетЗачисления, СтрокаПеревода.ДатаЗачисления, СтрокаПеревода.Сумма);
					ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаПеревода.БанковскийСчетСписания, СтрокаПеревода.ДатаСписания, -СтрокаПеревода.Сумма);
											
					СтоимостьИзменения = СтоимостьИзменения + СтоимостьПереводаМеждуСчетами;
					
					ОстатокВДне = ОстатокВДне + СуммаПеревода;
					Если ОстатокВДне >= 0 Тогда
						Прервать; // оптимизировали
					КонецЕсли;
					
				КонецЕсли;
	        КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
		
	РезультатОптимизации.Выполнена = (ОстатокВДне > НачальныйОстаток);
	РезультатОптимизации.ДеньПолностьюСкорректирован = (ОстатокВДне >= 0);
	Если РезультатОптимизации.Выполнена Тогда
		СуммаПоступления = ОстатокВДне - НачальныйОстаток;
		СуммарнаяОптимизацияКалендаря = СуммарнаяОптимизацияПоСчетуЗаПериод(СостояниеКалендаря.Остатки, СтрокаДня.БанковскийСчет, СтрокаДня.Дата,,СуммаПоступления); // в валюте остатка
		РезультатОптимизации.ОтносительнаяСтоимостьОптимизации = СтоимостьИзменения / СуммарнаяОптимизацияКалендаря;
	КонецЕсли;	

	РезультатОптимизации.ПереводыСобственныхСредств = ТаблицаПереводов;
	
	ОтборИзмененныхОстатков = Новый Структура("Изменен", Истина);
	НовыеОстатки = ДоступныеОстатки.Скопировать(ОтборИзмененныхОстатков, "ИндексСтроки, Остаток");
	РезультатОптимизации.НовыеОстатки = НовыеОстатки;
	
	Возврат РезультатОптимизации;
			
КонецФункции

Функция НоваяТаблицаПереводовСобственныхСредств()
	
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипСумма = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(18,2));
	ТипПредставление = Новый ОписаниеТипов("Строка");
	
	ТаблицаПереводов = Новый ТаблицаЗначений;
	ТаблицаПереводов.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПереводов.Колонки.Добавить("ОрганизацияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПереводов.Колонки.Добавить("ВалютаПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("Сумма", ТипСумма);
	
	ТаблицаПереводов.Колонки.Добавить("ДатаСписания", ТипДата);
	ТаблицаПереводов.Колонки.Добавить("БанкСписания", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетСписания", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетСписанияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("ПулЛиквидностиСписания", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
		
	ТаблицаПереводов.Колонки.Добавить("ДатаЗачисления", ТипДата);
	ТаблицаПереводов.Колонки.Добавить("БанкЗачисления", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетЗачисления", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетЗачисленияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("ПулЛиквидностиЗачисления", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));

	Возврат ТаблицаПереводов;
	
КонецФункции

Процедура ВыполнитьПереводыСобственныхСредств(СостояниеКалендаря, ТаблицаПереводов)
	
	Для каждого СтрокаПеревода Из ТаблицаПереводов Цикл
		ВыполнитьПереводСобственныхСредств(СостояниеКалендаря, СтрокаПеревода);	
	КонецЦикла;
	
КонецПроцедуры	

Функция ПредставлениеОперацииПереводСобственныхСредств(ПараметрыПеревода)
	
	ФорматнаяСтрокаДаты = "ДЛФ=D";
	
	ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Перевод %1 %2 со счета %3 на счет %4 в дату %5 (%6)'"),
									ПараметрыПеревода.Сумма,
									ПараметрыПеревода.ВалютаПредставление,
									ПараметрыПеревода.БанковскийСчетСписанияПредставление,		
									ПараметрыПеревода.БанковскийСчетЗачисленияПредставление,
									Формат(ПараметрыПеревода.ДатаЗачисления, ФорматнаяСтрокаДаты),
									ПараметрыПеревода.ОрганизацияПредставление);
									
	Возврат ПредставлениеОперации;
													
КонецФункции

Функция УточнениеОперацииПереводСобственныхСредств(ПараметрыПеревода)
	
	УточнениеОперации = НовыйУточнениеОперации();
	ЗаполнитьЗначенияСвойств(УточнениеОперации, ПараметрыПеревода, "БанковскийСчетЗачисления, БанковскийСчетСписания, ДатаСписания, ДатаЗачисления");
	УточнениеОперации.СуммаСписания = ПараметрыПеревода.Сумма;
	УточнениеОперации.СуммаЗачисления = ПараметрыПеревода.Сумма;
	УточнениеОперации.ВалютаСписания = ПараметрыПеревода.Валюта;
	УточнениеОперации.ВалютаЗачисления = ПараметрыПеревода.Валюта;
	УточнениеОперации.КурсКонвертации = 0;
	УточнениеОперации.КратностьКонвертации = 0;
	УточнениеОперации.ОрганизацияСписания = ПараметрыПеревода.Организация;
	УточнениеОперации.ОрганизацияЗачисления = ПараметрыПеревода.Организация;
	УточнениеОперации.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	УточнениеОперации.ЭтоПополнениеСчета = Истина;
	УточнениеОперации.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПереводНаДругойСчетОрганизации;
	УточнениеОперации.ВидОперацииУХВстречный = ВидыОперацийУХВызовСервераПовтИсп.ВстречныйВидОперацииУХ(УточнениеОперации.ВидОперацииУХ);
	
	Возврат УточнениеОперации;
	
КонецФункции

Процедура ВыполнитьПереводСобственныхСредств(СостояниеКалендаря, ПараметрыПеревода)
	
	// Добавление операции на форме платежного календаря
	ИдентификаторОперации = Новый УникальныйИдентификатор;
	
	Операция = Отчеты.ПлатежныйКалендарьУХ.СтруктураИнструмента();
	Операция.Активна = Истина;
	Операция.ИдентификаторОперации = ИдентификаторОперации;
	Операция.ВидОперации =  Перечисления.ВидыОперацийПлатежногоКалендаря.ПереводСобственныхСредств;	
	Операция.Оптимизация = Истина;
	Операция.ПредставлениеОперации = ПредставлениеОперацииПереводСобственныхСредств(ПараметрыПеревода);	
	Операция.УточнениеОперации = УточнениеОперацииПереводСобственныхСредств(ПараметрыПеревода);
	Операция.ОрганизацияСписания = ПараметрыПеревода.Организация;
	Операция.ОрганизацияЗачисления = ПараметрыПеревода.Организация;
	Операция.БанкСписания = ПараметрыПеревода.БанкСписания;
	Операция.БанкЗачисления = ПараметрыПеревода.БанкЗачисления;
	Операция.БанковскийСчетСписания = ПараметрыПеревода.БанковскийСчетСписания;
	Операция.БанковскийСчетЗачисления = ПараметрыПеревода.БанковскийСчетЗачисления;
	Операция.ВалютаСписания = ПараметрыПеревода.Валюта;
	Операция.ВалютаЗачисления = ПараметрыПеревода.Валюта;
	Операция.ДатаСписания = ПараметрыПеревода.ДатаСписания;
	Операция.ДатаЗачисления = ПараметрыПеревода.ДатаЗачисления;

	СостояниеКалендаря.НовыеОперации.Добавить(Операция);
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("Пользователь", СостояниеКалендаря.Пользователь);
	ОбщиеПараметры.Вставить("Инструмент", Перечисления.ВидыОперацийПлатежногоКалендаря.ПереводСобственныхСредств);
	ОбщиеПараметры.Вставить("Организация", ПараметрыПеревода.Организация);
	ОбщиеПараметры.Вставить("Валюта", ПараметрыПеревода.Валюта);
	ОбщиеПараметры.Вставить("Оптимизация", Истина);
	ОбщиеПараметры.Вставить("Активна", Истина);
	ОбщиеПараметры.Вставить("ИдентификаторДобавившейОперации", ИдентификаторОперации);
	
	НачатьТранзакцию();
	
	Попытка
		
		// Строка 1: списание со счета
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = ПараметрыПеревода.ДатаСписания;
		МЗ.Банк = ПараметрыПеревода.БанкСписания;
		МЗ.БанковскийСчет = ПараметрыПеревода.БанковскийСчетСписания;
		МЗ.ПулЛиквидности = ПараметрыПеревода.ПулЛиквидностиСписания;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = -ПараметрыПеревода.Сумма;
		МЗ.Записать();
		
		// Строка 2: поступление на счет
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = ПараметрыПеревода.ДатаЗачисления;
		МЗ.Банк = ПараметрыПеревода.БанкЗачисления;
		МЗ.БанковскийСчет = ПараметрыПеревода.БанковскийСчетЗачисления;
		МЗ.ПулЛиквидности = ПараметрыПеревода.ПулЛиквидностиЗачисления;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.ПоступлениеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = ПараметрыПеревода.Сумма;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
	
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ВнутригрупповыеПереводы

Функция РезультатОптимизацииВнутригрупповыеПереводы(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации)
	
	РезультатОптимизации = НовыйРезультатОптимизацииКалендаря();
	
	НачальныйОстаток = СтрокаДня.Остаток;
	ОстатокВДне = СтрокаДня.Остаток;
	Если ОстатокВДне >= 0 Тогда
		Возврат РезультатОптимизации; // изначально остаток отрицательный
	КонецЕсли;	
	
	ОстаткиКалендаря = СостояниеКалендаря.Остатки;
	ЛимитыВнутригрупповыхПереводов = СостояниеКалендаря.ЛимитыВнутригрупповыхПереводов;
	
	// Доступные лимиты
	ОтборДоступныхЛимитов = Новый Структура("ОрганизацияЗачисления, Валюта");
	ОтборДоступныхЛимитов.ОрганизацияЗачисления = СтрокаДня.Организация;
	ОтборДоступныхЛимитов.Валюта = СтрокаДня.Валюта;
	ДоступныеЛимитыПеремещений = ЛимитыВнутригрупповыхПереводов.Скопировать(ОтборДоступныхЛимитов);
	Если НЕ ЗначениеЗаполнено(ДоступныеЛимитыПеремещений) Тогда
		Возврат РезультатОптимизации;
	КонецЕсли;
	ДоступныеЛимитыПеремещений.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	ДоступныеЛимитыПеремещений.Индексы.Добавить("Изменен");
		
	// Доступные остатки
	ОтборОстатковПоВалюте = Новый Структура("Валюта");
	ЗаполнитьЗначенияСвойств(ОтборОстатковПоВалюте, СтрокаДня);
	ДоступныеОстатки = ОстаткиКалендаря.Скопировать(ОтборОстатковПоВалюте);
	ДоступныеОстатки.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	ДоступныеОстатки.Индексы.Добавить("Изменен");
	ДоступныеОстатки.Сортировать("Остаток Возр");
	
	СтоимостьПереводаМеждуСчетами = НастройкиОптимизации.СтоимостьПереводаМеждуСчетами; // в рублях
	Если СтрокаДня.Валюта <> СостояниеКалендаря.ВалютаРегламентированногоУчета Тогда
		ОтборВалюты = Новый Структура("Валюта, Дата");
		ЗаполнитьЗначенияСвойств(ОтборВалюты, СтрокаДня);
		КурсыВалютыСчета = СостояниеКалендаря.КурсыВалют.НайтиСтроки(ОтборВалюты);
		СтрокаКурса = КурсыВалютыСчета[0];
		СтоимостьПереводаМеждуСчетами = СтоимостьПереводаМеждуСчетами / СтрокаКурса.Курс * СтрокаКурса.Кратность;
	КонецЕсли;
	
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря;
	
	ТаблицаПереводов = НоваяТаблицаВнутригрупповыхПереводов();
	СтоимостьИзменения = 0;
	ОтборОстатковПоОрганизации = Новый Структура("Организация");
	
	ДатаСписанияСДругогоБанка = СтрокаДня.Дата - СтрокаДня.СрокИсполненияПлатежаДней * 24*60*60;
	ДатаСписанияСДругогоБанкаПоКалендарю = БлижайшийРабочийДеньДоДаты(ДатаСписанияСДругогоБанка, ДниКалендаря);
	
	Для каждого СтрокаЛимита ИЗ ДоступныеЛимитыПеремещений Цикл
		
		ОтборОстатковПоОрганизации.Организация = СтрокаЛимита.ОрганизацияСписания;
		ОстаткиПоОрганизацииСписания = ДоступныеОстатки.НайтиСтроки(ОтборОстатковПоОрганизации);
		Для каждого СтрокаОстатка Из ОстаткиПоОрганизацииСписания Цикл
			Если СтрокаОстатка.Остаток > 0 Тогда
				
				 ДатаСписанияПоКалендарю = ?(СтрокаОстатка.Банк = СтрокаДня.Банк, СтрокаДня.Дата, ДатаСписанияСДругогоБанкаПоКалендарю);
				 Если ДатаСписанияПоКалендарю <> Неопределено И СтрокаОстатка.Дата = ДатаСписанияПоКалендарю Тогда
		
						МинимальныйОстатокПоСчету = МинимальныйОстатокПоСчетуСДаты(ДоступныеОстатки, СтрокаОстатка.БанковскийСчет, СтрокаОстатка.Дата);
						Если МинимальныйОстатокПоСчету > 0 Тогда
							
							СуммаПеревода = Мин(МинимальныйОстатокПоСчету, СтрокаЛимита.Сумма, -СтрокаДня.Остаток);
							
							СтрокаПеревода = ТаблицаПереводов.Добавить();
							СтрокаПеревода.Валюта = СтрокаДня.Валюта;
							СтрокаПеревода.ВалютаПредставление = СтрокаДня.ВалютаПредставление;
							СтрокаПеревода.Сумма = СуммаПеревода;
							
							СтрокаПеревода.ОрганизацияЗачисления = СтрокаДня.Организация;
							СтрокаПеревода.ОрганизацияЗачисленияПредставление = СтрокаДня.ОрганизацияПредставление;
							СтрокаПеревода.ДатаЗачисления = СтрокаДня.Дата;
							СтрокаПеревода.БанкЗачисления = СтрокаДня.Банк;
							СтрокаПеревода.БанковскийСчетЗачисления = СтрокаДня.БанковскийСчет;
							СтрокаПеревода.БанковскийСчетЗачисленияПредставление = СтрокаДня.БанковскийСчетПредставление;
							СтрокаПеревода.ПулЛиквидностиЗачисления = СтрокаДня.ПулЛиквидности;
							СтрокаПеревода.КонтрагентЗачисления = СтрокаЛимита.КонтрагентЗачисления;
							СтрокаПеревода.ДоговорКонтрагентаЗачисления = СтрокаЛимита.ДоговорКонтрагентаЗачисления;
							
							СтрокаПеревода.ОрганизацияСписания = СтрокаОстатка.Организация;
							СтрокаПеревода.ОрганизацияСписанияПредставление = СтрокаОстатка.ОрганизацияПредставление;
							СтрокаПеревода.ДатаСписания = СтрокаОстатка.Дата;
							СтрокаПеревода.БанкСписания = СтрокаОстатка.Банк;
							СтрокаПеревода.БанковскийСчетСписания = СтрокаОстатка.БанковскийСчет;
							СтрокаПеревода.БанковскийСчетСписанияПредставление = СтрокаОстатка.БанковскийСчетПредставление;
							СтрокаПеревода.ПулЛиквидностиСписания = СтрокаОстатка.ПулЛиквидности;
														
							// Корректировка доступных остатков
							ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаПеревода.БанковскийСчетЗачисления, СтрокаПеревода.ДатаЗачисления, СтрокаПеревода.Сумма);
							ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаПеревода.БанковскийСчетСписания, СтрокаПеревода.ДатаСписания, -СтрокаПеревода.Сумма);
														
							// Корректировка лимитов
							СтрокаЛимита.Сумма = СтрокаЛимита.Сумма - СуммаПеревода;
							СтрокаЛимита.Изменен = Истина;

						    // Стоимость изменения
							СтоимостьИзменения = СтоимостьИзменения + СтоимостьПереводаМеждуСчетами;
							
							// новый остаток в дне
							ОстатокВДне = ОстатокВДне + СуммаПеревода;
							Если ОстатокВДне >= 0 Тогда
								Прервать; // оптимизировали
							КонецЕсли;
						КонецЕсли;		
				КонецЕсли;			 
			КонецЕсли;	
		КонецЦикла;
		
		Если ОстатокВДне >= 0 Тогда
			Прервать; // оптимизировали
		КонецЕсли;

	КонецЦикла;	
			
	РезультатОптимизации.Выполнена = (ОстатокВДне > НачальныйОстаток);
	РезультатОптимизации.ДеньПолностьюСкорректирован = (ОстатокВДне >= 0);
	
	Если РезультатОптимизации.Выполнена Тогда
		СуммаПоступления = ОстатокВДне - НачальныйОстаток;
		СуммарнаяОптимизацияКалендаря = СуммарнаяОптимизацияПоСчетуЗаПериод(СостояниеКалендаря.Остатки, СтрокаДня.БанковскийСчет, СтрокаДня.Дата,,СуммаПоступления);
		РезультатОптимизации.ОтносительнаяСтоимостьОптимизации = СтоимостьИзменения / СуммарнаяОптимизацияКалендаря;
	КонецЕсли;	

	РезультатОптимизации.ВнутригрупповыеПереводы = ТаблицаПереводов;
	
	ОтборИзмений = Новый Структура("Изменен", Истина);
	НовыеОстатки = ДоступныеОстатки.Скопировать(ОтборИзмений, "ИндексСтроки, Остаток");
	РезультатОптимизации.НовыеОстатки = НовыеОстатки;
	
	НовыеЛимиты = ДоступныеЛимитыПеремещений.Скопировать(ОтборИзмений, "ИндексСтроки, Сумма");
	РезультатОптимизации.НовыеЛимитыВнутригрупповыхПереводов = НовыеЛимиты;
	
	Возврат РезультатОптимизации;			
			
КонецФункции

Функция НоваяТаблицаВнутригрупповыхПереводов()
	
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипСумма = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(18,2));
	ТипПредставление = Новый ОписаниеТипов("Строка");
	
	ТаблицаПереводов = Новый ТаблицаЗначений;
	ТаблицаПереводов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПереводов.Колонки.Добавить("ВалютаПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("Сумма", ТипСумма);
	
	ТаблицаПереводов.Колонки.Добавить("ОрганизацияСписания", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПереводов.Колонки.Добавить("ОрганизацияСписанияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("ДатаСписания", ТипДата);
	ТаблицаПереводов.Колонки.Добавить("БанкСписания", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетСписания", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетСписанияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("ПулЛиквидностиСписания", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
	
	ТаблицаПереводов.Колонки.Добавить("ОрганизацияЗачисления", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПереводов.Колонки.Добавить("ОрганизацияЗачисленияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("ДатаЗачисления", ТипДата);
	ТаблицаПереводов.Колонки.Добавить("БанкЗачисления", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетЗачисления", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаПереводов.Колонки.Добавить("БанковскийСчетЗачисленияПредставление", ТипПредставление);
	ТаблицаПереводов.Колонки.Добавить("ПулЛиквидностиЗачисления", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
	ТаблицаПереводов.Колонки.Добавить("КонтрагентЗачисления", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПереводов.Колонки.Добавить("ДоговорКонтрагентаЗачисления", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));

	
	Возврат ТаблицаПереводов;
	
КонецФункции

Процедура ВыполнитьВнутригрупповыеПереводы(СостояниеКалендаря, ТаблицаПереводов)
	
	Для каждого СтрокаПеревода Из ТаблицаПереводов Цикл
		ВыполнитьВнутригрупповойПеревод(СостояниеКалендаря, СтрокаПеревода);	
	КонецЦикла;
	
КонецПроцедуры	

Функция ПредставлениеОперацииВнутригрупповойПеревод(ПараметрыПеревода)
	
	ФорматнаяСтрокаДаты = "ДЛФ=D";
				
	ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Перевод %1 %2 со счета %3 организации %4 на счет %5 организации %6 в дату %7'"),
									ПараметрыПеревода.Сумма,
									ПараметрыПеревода.ВалютаПредставление,
									ПараметрыПеревода.БанковскийСчетСписанияПредставление,
									ПараметрыПеревода.ОрганизацияСписанияПредставление,
									ПараметрыПеревода.БанковскийСчетЗачисленияПредставление,
									ПараметрыПеревода.ОрганизацияЗачисленияПредставление,
									Формат(ПараметрыПеревода.ДатаЗачисления, ФорматнаяСтрокаДаты));
								
									
	Возврат ПредставлениеОперации;
													
КонецФункции

Функция УточнениеОперацииВнутригрупповойПеревод(ПараметрыПеревода)
	
	УточнениеОперации = НовыйУточнениеОперации();
	ЗаполнитьЗначенияСвойств(УточнениеОперации, ПараметрыПеревода, "ОрганизацияСписания, ОрганизацияЗачисления, БанковскийСчетЗачисления, БанковскийСчетСписания, ДатаСписания, ДатаЗачисления");
	УточнениеОперации.СуммаСписания = ПараметрыПеревода.Сумма;
	УточнениеОперации.СуммаЗачисления = ПараметрыПеревода.Сумма;
	УточнениеОперации.ВалютаСписания = ПараметрыПеревода.Валюта;
	УточнениеОперации.ВалютаЗачисления = ПараметрыПеревода.Валюта;
	УточнениеОперации.КурсКонвертации = 0;
	УточнениеОперации.КратностьКонвертации = 0;
	УточнениеОперации.ДоговорКонтрагента = ПараметрыПеревода.ДоговорКонтрагентаЗачисления;
	УточнениеОперации.ЭтоПополнениеСчета = Истина;
	
	Возврат УточнениеОперации;
	
КонецФункции

Процедура ВыполнитьВнутригрупповойПеревод(СостояниеКалендаря, ПараметрыПеревода)
	
	// Добавление операции на форме платежного календаря
	ИдентификаторОперации = Новый УникальныйИдентификатор;
	
	Операция = Отчеты.ПлатежныйКалендарьУХ.СтруктураИнструмента();
	Операция.Активна = Истина;
	Операция.ИдентификаторОперации = ИдентификаторОперации;
	Операция.ВидОперации =  Перечисления.ВидыОперацийПлатежногоКалендаря.ВнутригрупповоеПеремещение;	
	Операция.Оптимизация = Истина;
	Операция.ПредставлениеОперации = ПредставлениеОперацииВнутригрупповойПеревод(ПараметрыПеревода);	
	Операция.УточнениеОперации = УточнениеОперацииВнутригрупповойПеревод(ПараметрыПеревода);
	Операция.ОрганизацияСписания = ПараметрыПеревода.ОрганизацияСписания;
	Операция.ОрганизацияЗачисления = ПараметрыПеревода.ОрганизацияЗачисления;
	Операция.БанкСписания = ПараметрыПеревода.БанкСписания;
	Операция.БанкЗачисления = ПараметрыПеревода.БанкЗачисления;
	Операция.БанковскийСчетСписания = ПараметрыПеревода.БанковскийСчетСписания;
	Операция.БанковскийСчетЗачисления = ПараметрыПеревода.БанковскийСчетЗачисления;
	Операция.ВалютаСписания = ПараметрыПеревода.Валюта;
	Операция.ВалютаЗачисления = ПараметрыПеревода.Валюта;
	Операция.ДатаСписания = ПараметрыПеревода.ДатаСписания;
	Операция.ДатаЗачисления = ПараметрыПеревода.ДатаЗачисления;
	
	СостояниеКалендаря.НовыеОперации.Добавить(Операция);
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("Пользователь", СостояниеКалендаря.Пользователь);
	ОбщиеПараметры.Вставить("Инструмент", Перечисления.ВидыОперацийПлатежногоКалендаря.ВнутригрупповоеПеремещение);
	ОбщиеПараметры.Вставить("Валюта", ПараметрыПеревода.Валюта);
	ОбщиеПараметры.Вставить("Оптимизация", Истина);
	ОбщиеПараметры.Вставить("Активна", Истина);
	ОбщиеПараметры.Вставить("ИдентификаторДобавившейОперации", ИдентификаторОперации);
	
	НачатьТранзакцию();
	Попытка
		// Строка 1: списание со счета
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Организация = ПараметрыПеревода.ОрганизацияСписания; 
		МЗ.Дата = ПараметрыПеревода.ДатаСписания;
		МЗ.Банк = ПараметрыПеревода.БанкСписания;
		МЗ.БанковскийСчет = ПараметрыПеревода.БанковскийСчетСписания;
		МЗ.ПулЛиквидности = ПараметрыПеревода.ПулЛиквидностиСписания;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = -ПараметрыПеревода.Сумма;
		МЗ.Записать();
		
		// Строка 2: поступление на счет
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Организация = ПараметрыПеревода.ОрганизацияЗачисления;
		МЗ.Дата = ПараметрыПеревода.ДатаЗачисления;
		МЗ.Банк = ПараметрыПеревода.БанкЗачисления;
		МЗ.БанковскийСчет = ПараметрыПеревода.БанковскийСчетЗачисления;
		МЗ.ПулЛиквидности = ПараметрыПеревода.ПулЛиквидностиЗачисления;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.ПоступлениеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = ПараметрыПеревода.Сумма;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбновитьЛимитыВнутригрупповыхПереводовКалендаря(СостояниеКалендаря, НовыеЛимитыПеремещений)
	
	ЛимитыПеремещений = СостояниеКалендаря.ЛимитыВнутригрупповыхПереводов;
	Для каждого СтрокаНовыеЛимиты ИЗ НовыеЛимитыПеремещений Цикл
		
		СтрокаЛимита = ЛимитыПеремещений[СтрокаНовыеЛимиты.ИндексСтроки];
		СтрокаЛимита.Сумма = СтрокаНовыеЛимиты.Сумма;
		Если СтрокаЛимита.Сумма = 0 Тогда
			ЛимитыПеремещений.Удалить(СтрокаЛимита);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область КонвертациюВалюты

Функция РезультатОптимизацииКонвертацияВалюты(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации)
	
	ПустойРезультатОптимизации = НовыйРезультатОптимизацииКалендаря();
	РезультатОптимизации = ПустойРезультатОптимизации;
	
	НачальныйОстаток = СтрокаДня.Остаток;
	ОстатокВДне = СтрокаДня.Остаток;
	Если ОстатокВДне >= 0 Тогда
		Возврат ПустойРезультатОптимизации; // изначально остаток отрицательный
	КонецЕсли;	
	
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря;
	ДатаСписания = СтрокаДня.Дата - НастройкиОптимизации.СрокКонвертацииВалютыДней * 24 * 60 *60;
	ДатаСписанияПоКалендарю = БлижайшийРабочийДеньДоДаты(ДатаСписания, ДниКалендаря);
	Если ДатаСписанияПоКалендарю = Неопределено Тогда
		Возврат ПустойРезультатОптимизации;
	КонецЕсли;
	
	Остатки = СостояниеКалендаря.Остатки;
	
	ОтборОстатков = Новый Структура("Организация");
	ЗаполнитьЗначенияСвойств(ОтборОстатков, СтрокаДня);
	ДоступныеОстатки = Остатки.Скопировать(ОтборОстатков);
	ДоступныеОстатки.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	ДоступныеОстатки.Сортировать("Остаток Возр");
	
	ПроцентКомиссииПриКонвертации = НастройкиОптимизации.ПроцентКомиссииПриКонвертацииВалюты;
		
	ТаблицаКонвертации = НоваяТаблицаКонвертацииВалюты();
	СтоимостьИзменения = 0;
	
	КурсыВалют = СостояниеКалендаря.КурсыВалют;
	ОтборКурса = Новый Структура("Валюта, Дата");
	
	Для каждого СтрокаОстатка ИЗ ДоступныеОстатки Цикл
		Если СтрокаОстатка.Валюта <> СтрокаДня.Валюта
			И СтрокаОстатка.Дата = ДатаСписанияПоКалендарю
			И СтрокаОстатка.Остаток > 0 Тогда
			
			МинимальныйОстатокПоСчету = МинимальныйОстатокПоСчетуСДаты(ДоступныеОстатки, СтрокаОстатка.БанковскийСчет, СтрокаОстатка.Дата);
			Если МинимальныйОстатокПоСчету > 0 Тогда
				
				// Курсы валют
				ОтборКурса.Дата = СтрокаОстатка.Дата;
				ОтборКурса.Валюта = СтрокаДня.Валюта;
				СтрокиКурсов = КурсыВалют.НайтиСтроки(ОтборКурса);
				СтрокаКурсаЗачисления = СтрокиКурсов[0];
							
				ОтборКурса.Валюта = СтрокаОстатка.Валюта;
				СтрокиКурсов = КурсыВалют.НайтиСтроки(ОтборКурса);
				СтрокаКурсаСписания = СтрокиКурсов[0];
				
				КроссКурсВалют = РаботаСКурсамиВалютУХ.ПолучитьКроссКурсвалют(СтрокаКурсаЗачисления, СтрокаКурсаСписания);
				КроссКурсКонвертации = КроссКурсВалют.Курс;
				КроссКратностьКонвертации = КроссКурсВалют.Кратность;

				// Расчет суммы конвертации
				МаксимальнаяСуммаКСписанию = Окр(-СтрокаДня.Остаток * КроссКурсКонвертации / КроссКратностьКонвертации, 2);
				МаксимальнаяСуммаКСписаниюСКомиссией = Окр(МаксимальнаяСуммаКСписанию * (1 + ПроцентКомиссииПриКонвертации/100), 2);	
				СуммаСписанияСКомиссей = Мин(МинимальныйОстатокПоСчету, МаксимальнаяСуммаКСписаниюСКомиссией);
				СуммаПроцентов = Окр(СуммаСписанияСКомиссей * ПроцентКомиссииПриКонвертации/ (100 + ПроцентКомиссииПриКонвертации), 2);
				СуммаСписания = СуммаСписанияСКомиссей - СуммаПроцентов;
				
				СуммаЗачисления = Окр(СуммаСписания * КроссКратностьКонвертации / КроссКурсКонвертации, 2);
				СтоимостьКонвертации = Окр(СуммаПроцентов * КроссКратностьКонвертации / КроссКурсКонвертации, 2);
				
				// Добавление конвертации в таблицу 
				СтрокаКонвертации = ТаблицаКонвертации.Добавить();
				СтрокаКонвертации.Организация = СтрокаДня.Организация;
				СтрокаКонвертации.ОрганизацияПредставление = СтрокаДня.ОрганизацияПредставление;
				СтрокаКонвертации.КурсКонвертации = КроссКурсКонвертации;
				СтрокаКонвертации.КратностьКонвертации = КроссКратностьКонвертации;
				
				СтрокаКонвертации.ВалютаЗачисления = СтрокаДня.Валюта;
				СтрокаКонвертации.ВалютаЗачисленияПредставление = СтрокаДня.ВалютаПредставление;
				СтрокаКонвертации.ДатаЗачисления = СтрокаДня.Дата;
				СтрокаКонвертации.БанкЗачисления = СтрокаДня.Банк;
				СтрокаКонвертации.БанковскийСчетЗачисления = СтрокаДня.БанковскийСчет;
				СтрокаКонвертации.БанковскийСчетЗачисленияПредставление = СтрокаДня.БанковскийСчетПредставление;
				СтрокаКонвертации.ПулЛиквидностиЗачисления = СтрокаДня.ПулЛиквидности;
				СтрокаКонвертации.СуммаЗачисления = СуммаЗачисления;
				
				СтрокаКонвертации.ВалютаСписания = СтрокаОстатка.Валюта;
				СтрокаКонвертации.ВалютаСписанияПредставление = СтрокаОстатка.ВалютаПредставление;
				СтрокаКонвертации.ДатаСписания = СтрокаОстатка.Дата;
				СтрокаКонвертации.БанкСписания = СтрокаОстатка.Банк;
				СтрокаКонвертации.БанковскийСчетСписания = СтрокаОстатка.БанковскийСчет;
				СтрокаКонвертации.БанковскийСчетСписанияПредставление = СтрокаОстатка.БанковскийСчетПредставление;
				СтрокаКонвертации.ПулЛиквидностиСписания = СтрокаОстатка.ПулЛиквидности;
				СтрокаКонвертации.СуммаСписания = СуммаСписанияСКомиссей;
				
				// Корректировка доступных остатков
				ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаКонвертации.БанковскийСчетЗачисления, СтрокаКонвертации.ДатаЗачисления, СтрокаКонвертации.СуммаЗачисления); 
				ИзменитьСохраненныеОстаткиПоСчетуСДаты(ДоступныеОстатки, СтрокаКонвертации.БанковскийСчетСписания, СтрокаКонвертации.ДатаСписания, -СтрокаКонвертации.СуммаСписания);
								
				СтоимостьИзменения = СтоимостьИзменения + СтоимостьКонвертации;
				
				ОстатокВДне = ОстатокВДне + СуммаЗачисления;
				Если ОстатокВДне >= 0 Тогда
					Прервать; // оптимизировали
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
		
	РезультатОптимизации.Выполнена = (ОстатокВДне > НачальныйОстаток);
	РезультатОптимизации.ДеньПолностьюСкорректирован = (ОстатокВДне >= 0);
	Если РезультатОптимизации.Выполнена Тогда
		СуммаПоступления = ОстатокВДне - НачальныйОстаток;
		СуммарнаяОптимизацияКалендаря = СуммарнаяОптимизацияПоСчетуЗаПериод(СостояниеКалендаря.Остатки, СтрокаДня.БанковскийСчет, СтрокаДня.Дата,,СуммаПоступления);
		РезультатОптимизации.ОтносительнаяСтоимостьОптимизации = СтоимостьИзменения / СуммарнаяОптимизацияКалендаря; // все в валюте счета
	КонецЕсли;	
	
	РезультатОптимизации.КонвертацияВалюты = ТаблицаКонвертации;
	
	ОтборИзмененныхОстатков = Новый Структура("Изменен", Истина);
	НовыеОстатки = ДоступныеОстатки.Скопировать(ОтборИзмененныхОстатков, "ИндексСтроки, Остаток");
	РезультатОптимизации.НовыеОстатки = НовыеОстатки;
	
	Возврат РезультатОптимизации;
			
КонецФункции

Функция НоваяТаблицаКонвертацииВалюты()
	
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипСумма = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(18,2));
	ТипПредставление = Новый ОписаниеТипов("Строка");
	
	ТаблицаКонвертации = Новый ТаблицаЗначений;
	ТаблицаКонвертации.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаКонвертации.Колонки.Добавить("ОрганизацияПредставление", ТипПредставление);
	
	ТаблицаКонвертации.Колонки.Добавить("ДатаСписания", ТипДата);
	ТаблицаКонвертации.Колонки.Добавить("БанкСписания", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаКонвертации.Колонки.Добавить("БанковскийСчетСписания", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаКонвертации.Колонки.Добавить("БанковскийСчетСписанияПредставление", ТипПредставление);
	ТаблицаКонвертации.Колонки.Добавить("ПулЛиквидностиСписания", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
	ТаблицаКонвертации.Колонки.Добавить("ВалютаСписания", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКонвертации.Колонки.Добавить("ВалютаСписанияПредставление", ТипПредставление);
	ТаблицаКонвертации.Колонки.Добавить("СуммаСписания", ТипСумма);
	
	ТаблицаКонвертации.Колонки.Добавить("ДатаЗачисления", ТипДата);
	ТаблицаКонвертации.Колонки.Добавить("БанкЗачисления", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаКонвертации.Колонки.Добавить("БанковскийСчетЗачисления", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаКонвертации.Колонки.Добавить("БанковскийСчетЗачисленияПредставление", ТипПредставление);
	ТаблицаКонвертации.Колонки.Добавить("ПулЛиквидностиЗачисления", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
	ТаблицаКонвертации.Колонки.Добавить("ВалютаЗачисления", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКонвертации.Колонки.Добавить("ВалютаЗачисленияПредставление", ТипПредставление);
	ТаблицаКонвертации.Колонки.Добавить("СуммаЗачисления", ТипСумма);
	
	ТаблицаКонвертации.Колонки.Добавить("КурсКонвертации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4)));
	ТаблицаКонвертации.Колонки.Добавить("КратностьКонвертации", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));

	Возврат ТаблицаКонвертации;
	
КонецФункции

Процедура ВыполнитьКонвертациюВалюты(СостояниеКалендаря, ТаблицаКонвертации)
	
	Для каждого СтрокаКонвертации Из ТаблицаКонвертации Цикл
		ВыполнитьОперациюКонвертацииВалюты(СостояниеКалендаря, СтрокаКонвертации);	
	КонецЦикла;
	
КонецПроцедуры	

Функция ПредставлениеОперацииКонвертацияВалюты(ПараметрыОперации)
	
	ФорматнаяСтрокаДаты = "ДЛФ=D";
	
	ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Конвертация валюты: списание %1 %2 со счета %3 в дату %4, зачисление %5 %6 на счет %7 в дату %8 (%9)'"),
								ПараметрыОперации.СуммаСписания,
								ПараметрыОперации.ВалютаСписанияПредставление,
								ПараметрыОперации.БанковскийСчетСписанияПредставление,
								Формат(ПараметрыОперации.ДатаСписания, ФорматнаяСтрокаДаты),
								ПараметрыОперации.СуммаЗачисления,
								ПараметрыОперации.ВалютаЗачисленияПредставление,
								ПараметрыОперации.БанковскийСчетЗачисления,
								Формат(ПараметрыОперации.ДатаЗачисления, ФорматнаяСтрокаДаты),
								ПараметрыОперации.ОрганизацияПредставление);
							
	Возврат ПредставлениеОперации;
													
КонецФункции

Функция УточнениеОперацииКонвертацияВалюты(ПараметрыОперации)
	
	УточнениеОперации = НовыйУточнениеОперации();
	ЗаполнитьЗначенияСвойств(УточнениеОперации, ПараметрыОперации, 
		"БанковскийСчетЗачисления, БанковскийСчетСписания, ДатаСписания, ДатаЗачисления, СуммаСписания, СуммаЗачисления, ВалютаСписания, ВалютаЗачисления, КурсКонвертации, КратностьКонвертации");
	УточнениеОперации.ОрганизацияСписания = ПараметрыОперации.Организация;
	УточнениеОперации.ОрганизацияЗачисления = ПараметрыОперации.Организация;
	УточнениеОперации.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	УточнениеОперации.ЭтоПополнениеСчета = Истина;
	УточнениеОперации.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПриобретениеВалюты;
	УточнениеОперации.ВидОперацииУХВстречный = ВидыОперацийУХВызовСервераПовтИсп.ВстречныйВидОперацииУХ(УточнениеОперации.ВидОперацииУХ);	
	
	Возврат УточнениеОперации;
	
КонецФункции

Процедура ВыполнитьОперациюКонвертацииВалюты(СостояниеКалендаря, ПараметрыОперации)
	
	// Добавление операции на форме платежного календаря
	ИдентификаторОперации = Новый УникальныйИдентификатор;
	
	Операция = Отчеты.ПлатежныйКалендарьУХ.СтруктураИнструмента();
	Операция.Активна = Истина;
	Операция.ИдентификаторОперации = ИдентификаторОперации;
	Операция.ВидОперации =  Перечисления.ВидыОперацийПлатежногоКалендаря.КонвертацияВалюты;	
	Операция.Оптимизация = Истина;
	Операция.ПредставлениеОперации = ПредставлениеОперацииКонвертацияВалюты(ПараметрыОперации);	
	Операция.УточнениеОперации = УточнениеОперацииКонвертацияВалюты(ПараметрыОперации);
	Операция.ОрганизацияСписания = ПараметрыОперации.Организация;
	Операция.ОрганизацияЗачисления = ПараметрыОперации.Организация;
	Операция.БанкСписания = ПараметрыОперации.БанкСписания;
	Операция.БанкЗачисления = ПараметрыОперации.БанкЗачисления;
	Операция.БанковскийСчетСписания = ПараметрыОперации.БанковскийСчетСписания;
	Операция.БанковскийСчетЗачисления = ПараметрыОперации.БанковскийСчетЗачисления;
	Операция.ВалютаСписания = ПараметрыОперации.ВалютаСписания;
	Операция.ВалютаЗачисления = ПараметрыОперации.ВалютаЗачисления;
	Операция.ДатаСписания = ПараметрыОперации.ДатаСписания;
	Операция.ДатаЗачисления = ПараметрыОперации.ДатаЗачисления;
	СостояниеКалендаря.НовыеОперации.Добавить(Операция);
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("Пользователь", СостояниеКалендаря.Пользователь);
	ОбщиеПараметры.Вставить("Инструмент", Перечисления.ВидыОперацийПлатежногоКалендаря.КонвертацияВалюты);
	ОбщиеПараметры.Вставить("Организация", ПараметрыОперации.Организация);
	ОбщиеПараметры.Вставить("Оптимизация", Истина);
	ОбщиеПараметры.Вставить("Активна", Истина);
	ОбщиеПараметры.Вставить("ИдентификаторДобавившейОперации", ИдентификаторОперации);
	
	НачатьТранзакцию();
	Попытка
		
		// Строка 1: списание со счета
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = ПараметрыОперации.ДатаСписания;
		МЗ.Банк = ПараметрыОперации.БанкСписания;
		МЗ.БанковскийСчет = ПараметрыОперации.БанковскийСчетСписания;
		МЗ.ПулЛиквидности = ПараметрыОперации.ПулЛиквидностиСписания;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Валюта = ПараметрыОперации.ВалютаСписания;
		МЗ.Сумма = -ПараметрыОперации.СуммаСписания;
		МЗ.Записать();
		
		// Строка 2: поступление на счет
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = ПараметрыОперации.ДатаЗачисления;
		МЗ.Банк = ПараметрыОперации.БанкЗачисления;
		МЗ.БанковскийСчет = ПараметрыОперации.БанковскийСчетЗачисления;
		МЗ.ПулЛиквидности = ПараметрыОперации.ПулЛиквидностиЗачисления;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.ПоступлениеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Валюта = ПараметрыОперации.ВалютаЗачисления;
		МЗ.Сумма = ПараметрыОперации.СуммаЗачисления;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Овердрафт

Функция РезультатОптимизацииОвердрафт(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации)
	
	РезультатОптимизации = НовыйРезультатОптимизацииКалендаря();
	НачальныйОстаток = СтрокаДня.Остаток;
	ОстатокВДне = СтрокаДня.Остаток;
	Если ОстатокВДне >= 0 Тогда
		Возврат РезультатОптимизации; // изначально остаток отрицательный
	КонецЕсли;
		
	Если ЕстьОвердрафтПоСчетуНаДату(СостояниеКалендаря.ОвердрафтПоСчетам, СтрокаДня.БанковскийСчет, СтрокаДня.Дата) Тогда
		Возврат РезультатОптимизации; // может быть только один овердрафт по счету
	КонецЕсли;	
	
	ДоговорОвердрафта = ДействующийДоговорОвердрафта(СостояниеКалендаря.ДоговорыОвердрафта, СтрокаДня.БанковскийСчет, СтрокаДня.Дата);	
	Если ДоговорОвердрафта = Неопределено Тогда 
		Возврат РезультатОптимизации;
	КонецЕсли;
	
	СуммаВыплатыПроцентовНаЭтотДень = СуммаВыплатыПроцентовОвердрафтаПоСчетуНаДату(СостояниеКалендаря.ОвердрафтПоСчетам, СтрокаДня.БанковскийСчет, СтрокаДня.Дата);
	СуммаДляПогашения = -ОстатокВДне - СуммаВыплатыПроцентовНаЭтотДень; // выплачиваем проценты независимо от овердрафта
	
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря;
	
	ДатаНачала = СтрокаДня.Дата;
	ДатаВозвратаСредств = ДобавитьДнейКДате(СтрокаДня.Дата, 1);
	ДатаВозвратаСредствПоКалендарю = БлижайшийРабочийДеньПослеДаты(ДатаВозвратаСредств, ДниКалендаря, ДатаВозвратаСредств);

	СуммаОвердрафта = Мин(СуммаДляПогашения, ДоговорОвердрафта.Лимит);
	СуммаПроцентов = СуммаПроцентовПоКредиту(СуммаОвердрафта, ДоговорОвердрафта.ПроцентнаяСтавка, ДатаНачала, ДатаВозвратаСредствПоКалендарю);
	ДатаОкончания = ДобавитьДнейКДате(ДатаВозвратаСредствПоКалендарю, -1);
	
	ДатаВыплатыПроцентов = НачалоДня(КонецМесяца(СтрокаДня.Дата)); // раз в месяц выплачиваем
	ДатаВыплатыПроцентовПоКалендарю = БлижайшийРабочийДеньПослеДаты(ДатаВыплатыПроцентов, ДниКалендаря, ДобавитьДнейКДате(СостояниеКалендаря.ГоризонтОперативногоПланирования, 1));
		
	Овердрафт = НовыйОвердрафтПоСчету();
	ЗаполнитьЗначенияСвойств(Овердрафт, СтрокаДня, "Организация, ОрганизацияПредставление, Банк, БанковскийСчет, БанковскийСчетПредставление, ПулЛиквидности, Валюта, ВалютаПредставление");
	Овердрафт.ДатаНачала = ДатаНачала;
	Овердрафт.ДатаВозвратаСредств = ДатаВозвратаСредствПоКалендарю;
	Овердрафт.ДатаОкончания = ДатаОкончания;	
	Овердрафт.Сумма = СуммаОвердрафта;
	Овердрафт.ДатаВыплатыПроцентов = ДатаВыплатыПроцентовПоКалендарю;
	Овердрафт.СуммаПроцентов = СуммаПроцентов;
	
	ОстатокВДне = ОстатокВДне + Овердрафт.Сумма;
	
	РезультатОптимизации.Выполнена = (ОстатокВДне > НачальныйОстаток);
	РезультатОптимизации.ДеньПолностьюСкорректирован = (ОстатокВДне >= 0);
	РезультатОптимизации.ОтносительнаяСтоимостьОптимизации = СуммаПроцентов / СуммаОвердрафта;
	РезультатОптимизации.ОвердрафтПоСчету = Овердрафт;
	
	// Корректировка остатков
	ОтборОстатковПоСчету = Новый Структура("БанковскийСчет", СтрокаДня.БанковскийСчет);
	ОстаткиПоСчету = СостояниеКалендаря.Остатки.Скопировать(ОтборОстатковПоСчету, "ИндексСтроки, БанковскийСчет, Дата, Остаток");
	ОстаткиПоСчету.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));

	// увеличиваем остаток в день овердрафта, овердрафт на один день
	СтрокаОстатка = ОстаткиПоСчету.Найти(СтрокаДня.Дата, "Дата");
	СтрокаОстатка.Остаток = ОстатокВДне;
	СтрокаОстатка.Изменен = Истина;
	
	// уменьшаем остаток на сумму комиссии в день выплаты процентов и далее
	ИзменитьСохраненныеОстаткиСДаты(ОстаткиПоСчету, Овердрафт.ДатаВыплатыПроцентов, -Овердрафт.СуммаПроцентов);
		
	ОтборИзмений = Новый Структура("Изменен", Истина);
	НовыеОстатки = ОстаткиПоСчету.Скопировать(ОтборИзмений, "ИндексСтроки, Остаток");
	РезультатОптимизации.НовыеОстатки = НовыеОстатки;
	
	Возврат РезультатОптимизации;
		
КонецФункции

Функция СуммаВыплатыПроцентовОвердрафтаПоСчетуНаДату(ТаблицаОвердрафтаПоСчетам, БанковскийСчет, Дата)
	
	Если Дата = НачалоДня(КонецМесяца(Дата)) Тогда // проценты выплачиваются в конце месяца	
		ОтборПроцентовПоСчету = Новый Структура("БанковскийСчет, ДатаВыплатыПроцентов");
		ОтборПроцентовПоСчету.БанковскийСчет = БанковскийСчет;
		ОтборПроцентовПоСчету.ДатаВыплатыПроцентов = Дата;
		ТаблицаВыплатыПроцентов = ТаблицаОвердрафтаПоСчетам.Скопировать(ОтборПроцентовПоСчету, "СуммаПроцентов");
		Если ЗначениеЗаполнено(ТаблицаВыплатыПроцентов) Тогда
			ТаблицаВыплатыПроцентов.Свернуть("СуммаПроцентов");
			Возврат ТаблицаВыплатыПроцентов[0].СуммаПроцентов;
		КонецЕсли;	
	КонецЕсли;

	Возврат 0;
	
КонецФункции

Функция ЕстьОвердрафтПоСчетуНаДату(ТаблицаОвердрафтаПоСчетам, БанковскийСчет, Дата)
	
	ОтборПоСчету = Новый Структура("БанковскийСчет");
	ОтборПоСчету.БанковскийСчет = БанковскийСчет;
	СтрокиОвердрафтаПоСчету = ТаблицаОвердрафтаПоСчетам.НайтиСтроки(ОтборПоСчету);
	Если ЗначениеЗаполнено(СтрокиОвердрафтаПоСчету) Тогда
		Для каждого СтрокаОвердрафта Из СтрокиОвердрафтаПоСчету Цикл
			Если СтрокаОвердрафта.ДатаНачала <= Дата И СтрокаОвердрафта.ДатаОкончания >= Дата Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат Ложь;
	
КонецФункции	

Функция ДействующийДоговорОвердрафта(ДоговорыОвердрафта, БанковскийСчет, Дата)
	
	ОтборПоСчету = Новый Структура("БанковскийСчет", Банковскийсчет);
	ДоговорыОвердрафтаПоСчету = ДоговорыОвердрафта.НайтиСтроки(ОтборПоСчету);
	Для каждого Договор Из ДоговорыОвердрафтаПоСчету Цикл
		Если Договор.ДатаНачалаДействия <= Дата И Договор.СрокДействия >= Дата Тогда
			Возврат Договор;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция НовыйОвердрафтПоСчету()
	
	НовыйОвердрафт = Новый Структура("Организация, ОрганизацияПредставление, Банк, БанковскийСчет, БанковскийСчетПредставление, ПулЛиквидности, Валюта,
		| ВалютаПредставление, Сумма, ДатаНачала, ДатаОкончания, ДатаВозвратаСредств, ДатаВыплатыПроцентов, СуммаПроцентов");
	Возврат НовыйОвердрафт;
	
КонецФункции

Функция НоваяТаблицаОвердрафтПоСчетам()
	
	ТипДата = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Дата));
	ТипСумма = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(18,2));
	ТипПредставление = Новый ОписаниеТипов("Строка");
	
	ТаблицаОвердрафтаПоСчетам = Новый ТаблицаЗначений;
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ОрганизацияПредставление", ТипПредставление);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("БанковскийСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("БанковскийСчетПредставление", ТипПредставление);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ПулЛиквидности", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ВалютаПредставление", ТипПредставление);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("Сумма", ТипСумма);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ДатаНачала", ТипДата);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ДатаОкончания", ТипДата);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ДатаВозвратаСредств", ТипДата);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("ДатаВыплатыПроцентов", ТипДата);
	ТаблицаОвердрафтаПоСчетам.Колонки.Добавить("СуммаПроцентов", ТипСумма);
	
	ТаблицаОвердрафтаПоСчетам.Индексы.Добавить("БанковскийСчет");
	ТаблицаОвердрафтаПоСчетам.Индексы.Добавить("БанковскийСчет, ДатаВозвратаСредств, ДатаВыплатыПроцентов, Сумма");
	
	Возврат ТаблицаОвердрафтаПоСчетам;
	
КонецФункции	

Процедура ДобавитьОвердрафтВСписокОпераций(СостояниеКалендаря, Овердрафт)
	
	// разделяем датам выплаты комиссии, непрерывным периодам и суммам, для удобства расчета процентов и управления операциями
	ОтборОвердрафта = Новый Структура("БанковскийСчет, ДатаВозвратаСредств, ДатаВыплатыПроцентов, Сумма");
	ЗаполнитьЗначенияСвойств(ОтборОвердрафта, Овердрафт, "БанковскийСчет, ДатаВыплатыПроцентов, Сумма");
	ОтборОвердрафта.ДатаВозвратаСредств = Овердрафт.ДатаНачала;

	МассивСтрокОвердрафта = СостояниеКалендаря.ОвердрафтПоСчетам.НайтиСтроки(ОтборОвердрафта);
	Если ЗначениеЗаполнено(МассивСтрокОвердрафта) Тогда
		// продлеваем предыдущий овердрафт
		СтрокаПредыдущегоОвердрафта = МассивСтрокОвердрафта[0];
		СтрокаПредыдущегоОвердрафта.ДатаОкончания = Овердрафт.ДатаОкончания;
		СтрокаПредыдущегоОвердрафта.ДатаВозвратаСредств = Овердрафт.ДатаВозвратаСредств;
		СтрокаПредыдущегоОвердрафта.СуммаПроцентов = СтрокаПредыдущегоОвердрафта.СуммаПроцентов + Овердрафт.СуммаПроцентов;
	Иначе
		СтрокаОвердрафта = СостояниеКалендаря.ОвердрафтПоСчетам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОвердрафта, Овердрафт);		 
	КонецЕсли;	 
		 
КонецПроцедуры	
		
Процедура СоздатьОперацииОвердрафта(СостояниеКалендаря, ТаблицаОвердрафтПоСчетам)
	Для каждого СтрокаОвердрафт Из ТаблицаОвердрафтПоСчетам Цикл
		СоздатьОперациюОвердрафта(СостояниеКалендаря, СтрокаОвердрафт);
	КонецЦикла;
КонецПроцедуры

Функция ПредставлениеОперацииОвердрафта(Овердрафт)
	
	ФорматнаяСтрокаДаты = "ДЛФ=D";
	
	ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Овердрафт %1 %2 на счете %3 с %4 по %5 (%6)'"),
									Овердрафт.Сумма,
									Овердрафт.ВалютаПредставление,
									Овердрафт.БанковскийСчетПредставление,		
									Формат(Овердрафт.ДатаНачала, ФорматнаяСтрокаДаты),
									Формат(Овердрафт.ДатаОкончания, ФорматнаяСтрокаДаты),
									Овердрафт.ОрганизацияПредставление);
									
	Возврат ПредставлениеОперации;
													
КонецФункции

Процедура СоздатьОперациюОвердрафта(СостояниеКалендаря, Овердрафт)
	
	// Добавление операции на форме платежного календаря
	ИдентификаторОперации = Новый УникальныйИдентификатор;
	
	Операция = Отчеты.ПлатежныйКалендарьУХ.СтруктураИнструмента();
	Операция.Активна = Истина;
	Операция.ИдентификаторОперации = ИдентификаторОперации;
	Операция.ВидОперации =  Перечисления.ВидыОперацийПлатежногоКалендаря.Овердрафт;	
	Операция.Оптимизация = Истина;
	Операция.ПредставлениеОперации = ПредставлениеОперацииОвердрафта(Овердрафт);	
	Операция.ОрганизацияЗачисления = Овердрафт.Организация;
	Операция.БанкЗачисления = Овердрафт.Банк;
	Операция.БанковскийСчетЗачисления = Овердрафт.БанковскийСчет;
	Операция.ВалютаЗачисления = Овердрафт.Валюта;
	Операция.ДатаЗачисления = Овердрафт.ДатаНачала;
	Операция.ДатаСписания = Овердрафт.ДатаВозвратаСредств;
	Операция.ДатаВыплатыПроцентов = Овердрафт.ДатаВыплатыПроцентов;
	
	СостояниеКалендаря.НовыеОперации.Добавить(Операция);
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("Пользователь", СостояниеКалендаря.Пользователь);
	ОбщиеПараметры.Вставить("Инструмент", Перечисления.ВидыОперацийПлатежногоКалендаря.Овердрафт);
	ОбщиеПараметры.Вставить("Организация", Овердрафт.Организация);
	ОбщиеПараметры.Вставить("Банк", Овердрафт.Банк);
	ОбщиеПараметры.Вставить("БанковскийСчет", Овердрафт.БанковскийСчет);
	ОбщиеПараметры.Вставить("ПулЛиквидности", Овердрафт.ПулЛиквидности);
	ОбщиеПараметры.Вставить("Валюта", Овердрафт.Валюта);
	ОбщиеПараметры.Вставить("Оптимизация", Истина);
	ОбщиеПараметры.Вставить("Активна", Истина);
	ОбщиеПараметры.Вставить("ИдентификаторДобавившейОперации", ИдентификаторОперации);
	
	НачатьТранзакцию();
	Попытка
		
		// Строка 1: поступление на счет
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = Овердрафт.ДатаНачала;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.ПоступлениеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = Овердрафт.Сумма;
		МЗ.Записать();
		
		// Строка 2: возврат со счета
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = Овердрафт.ДатаВозвратаСредств;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = - Овердрафт.Сумма;
		МЗ.Записать();
		
		// Строка 3: проценты по овердрафту
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = Овердрафт.ДатаВыплатыПроцентов;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = - Овердрафт.СуммаПроцентов;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Кредит

Функция РезультатОптимизацииКредит(СтрокаДня, СостояниеКалендаря, НастройкиОптимизации)
	
	РезультатОптимизации = НовыйРезультатОптимизацииКалендаря();
	
	НачальныйОстаток = СтрокаДня.Остаток;
	ОстатокВДне = СтрокаДня.Остаток;
	Если ОстатокВДне >= 0 Тогда
		Возврат РезультатОптимизации; // изначально остаток отрицательный
	КонецЕсли;
		
	ПараметрыКредита = ПараметрыПолученияКредита(СостояниеКалендаря, НастройкиОптимизации, СтрокаДня);
	Если ПараметрыКредита = Неопределено Тогда
		Возврат РезультатОптимизации;
	КонецЕсли;
	
	ИзменениеТекущегоКредита = ПараметрыКредита.ИзменениеТекущегоКредита; 
	ИсходныйКредит = ПараметрыКредита.ИсходныйКредит;
	ОтносительнаяСтоимостьОптимизации = ПараметрыКредита.ОтносительнаяСтоимостьОптимизации;
	
	Кредит = НовыйКредитПоСчету();
	ЗаполнитьЗначенияСвойств(Кредит, СтрокаДня, "Организация, ОрганизацияПредставление, Банк, БанковскийСчет, БанковскийСчетПредставление, ПулЛиквидности, Валюта, ВалютаПредставление");
	ЗаполнитьЗначенияСвойств(Кредит, ПараметрыКредита);
	
	// Корректировка лимита по кредиту
	ОтборЛимитаПоДоговору = Новый Структура("БазовыйДоговорКредита", ПараметрыКредита.БазовыйДоговорКредита);
	ЛимитыПоДоговору = СостояниеКалендаря.ЛимитыКредитов.Скопировать(ОтборЛимитаПоДоговору);
	ЛимитыПоДоговору.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));
	
	// корректировка лимита лимита
	ДатаВозобновленияЛимита = ?(Кредит.ВозобновляемыйЛимит, Кредит.ДатаВозвратаСредств, Неопределено);
	ИзменитьСохраненныеЛимитыПоКредиту(ЛимитыПоДоговору, Кредит.ДатаПоступленияСредств, ДатаВозобновленияЛимита, -Кредит.Сумма);	
	// Сторно корректировки лимита исходного кредита
	Если ИзменениеТекущегоКредита Тогда
		ДатаВозобновленияЛимитаИсходногоКредита = ?(ИсходныйКредит.ВозобновляемыйЛимит, ИсходныйКредит.ДатаВозвратаСредств, Неопределено);
		ИзменитьСохраненныеЛимитыПоКредиту(ЛимитыПоДоговору, ИсходныйКредит.ДатаПоступленияСредств, ДатаВозобновленияЛимитаИсходногоКредита, ИсходныйКредит.Сумма);
	КонецЕсли;
	
	ОтборИзмений = Новый Структура("Изменен", Истина);
	НовыеЛимиты = ЛимитыПоДоговору.Скопировать(ОтборИзмений, "ИндексСтроки, Лимит");
	РезультатОптимизации.НовыеЛимитыКредитов = НовыеЛимиты;
	
	// Корректировка остатков
	ОтборОстатковПоСчету = Новый Структура("БанковскийСчет", СтрокаДня.БанковскийСчет);
	ОстаткиПоСчету = СостояниеКалендаря.Остатки.Скопировать(ОтборОстатковПоСчету, "ИндексСтроки, БанковскийСчет, Дата, Остаток");
	ОстаткиПоСчету.Колонки.Добавить("Изменен", Новый ОписаниеТипов("Булево"));

	ДатаОкончанияИспользованияКредита = ДобавитьДнейКДате(Кредит.ДатаВозвратаСредств, -1);
	ИзменитьСохраненныеОстаткиЗаПериод(ОстаткиПоСчету, Кредит.ДатаПоступленияСредств, ДатаОкончанияИспользованияКредита, Кредит.Сумма); // Приход на счет
	ИзменитьСохраненныеОстаткиСДаты(ОстаткиПоСчету, Кредит.ДатаВыплатыПроцентов, -Кредит.СуммаПроцентов); // Выплата процентов

	// Сторно корректировки остатка исходного кредита
	Если ИзменениеТекущегоКредита Тогда
		ДатаОкончанияИспользованияИсходногоКредита = ДобавитьДнейКДате(ИсходныйКредит.ДатаВозвратаСредств, -1);
		ИзменитьСохраненныеОстаткиЗаПериод(ОстаткиПоСчету, ИсходныйКредит.ДатаПоступленияСредств, ДатаОкончанияИспользованияИсходногоКредита, -ИсходныйКредит.Сумма); // сторно прихода на счет
		ИзменитьСохраненныеОстаткиСДаты(ОстаткиПоСчету, ИсходныйКредит.ДатаВыплатыПроцентов, ИсходныйКредит.СуммаПроцентов); // 3. сторно выплаты процентов
	КонецЕсли;

	СтрокаДняНовый = ОстаткиПоСчету.Найти(СтрокаДня.Дата, "Дата");
	ОстатокВДне = СтрокаДняНовый.Остаток;
	
	РезультатОптимизации.Выполнена = (ОстатокВДне > НачальныйОстаток);
	РезультатОптимизации.ДеньПолностьюСкорректирован = (ОстатокВДне >= 0);
	РезультатОптимизации.ОтносительнаяСтоимостьОптимизации = ОтносительнаяСтоимостьОптимизации;
	РезультатОптимизации.КредитПоСчету = Кредит;

	ОтборИзмений = Новый Структура("Изменен", Истина);
	НовыеОстатки = ОстаткиПоСчету.Скопировать(ОтборИзмений, "ИндексСтроки, Остаток");
	РезультатОптимизации.НовыеОстатки = НовыеОстатки;
	
	Возврат РезультатОптимизации;
		
КонецФункции

Функция НовыеПараметрыПолученияКредита()
	
	Параметры = Новый Структура("БазовыйДоговорКредита, ДоговорКредита, ДоговорКредитаПредставление, ДатаПоступленияСредств, ДатаВозвратаСредств, ДатаВыплатыПроцентов, Сумма, 
		| СуммаПроцентов, ПроцентнаяСтавка, КоличествоДней, ВозобновляемыйЛимит, ИзменениеТекущегоКредита, ИсходныйКредит, ИндексСтрокиИсходногоКредита,
		| МаксимальныйСрок, ДатаОкончанияДоступности, МинимальнаяСуммаСделки, МаксимальнаяСуммаСделки, СуммарнаяОптимизацияКалендаря, ОтносительнаяСтоимостьОптимизации");
	
	Параметры.ИзменениеТекущегоКредита = Ложь;
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйКредитПоСчету()
	
	НовыйКредит = Новый Структура("Организация, ОрганизацияПредставление, Банк, БанковскийСчет, БанковскийСчетПредставление, ПулЛиквидности, Валюта, ВалютаПредставление, Сумма,
		| БазовыйДоговорКредита, ДоговорКредита, ДоговорКредитаПредставление, ИзменениеТекущегоКредита, ВозобновляемыйЛимит, ИндексСтрокиИсходногоКредита,
		| МаксимальныйСрок, ДатаОкончанияДоступности, МинимальнаяСуммаСделки, МаксимальнаяСуммаСделки,
		| ДатаПоступленияСредств, ДатаВозвратаСредств, КоличествоДней, ДатаВыплатыПроцентов, ПроцентнаяСтавка, СуммаПроцентов, СуммарнаяОптимизацияКалендаря, ОтносительнаяСтоимостьОптимизации");
	Возврат НовыйКредит;
	
КонецФункции

Функция НоваяТаблицаКредитыПоСчетам()
	
	ТипДата = ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата);
	ТипСумма = ОбщегоНазначения.ОписаниеТипаЧисло(18, 2);
	ТипПредставление = Новый ОписаниеТипов("Строка");
	
	ТаблицаКредитыПоСчетам = Новый ТаблицаЗначений;
	ТаблицаКредитыПоСчетам.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ОрганизацияПредставление", ТипПредставление);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("Банк", Новый ОписаниеТипов("СправочникСсылка.КлассификаторБанков"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("БанковскийСчет", Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчетаОрганизаций"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("БанковскийСчетПредставление", ТипПредставление);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ПулЛиквидности", Новый ОписаниеТипов("СправочникСсылка.ПулыЛиквидности"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ВалютаПредставление", ТипПредставление);
	
	ТаблицаКредитыПоСчетам.Колонки.Добавить("БазовыйДоговорКредита", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ДоговорКредита", Новый ОписаниеТипов("СправочникСсылка.ДоговорыКредитовИДепозитов"));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ДоговорКредитаПредставление", ТипПредставление);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("Сумма", ТипСумма);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ПроцентнаяСтавка", ОбщегоНазначения.ОписаниеТипаЧисло(5,2));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ДатаПоступленияСредств", ТипДата);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ДатаВозвратаСредств", ТипДата);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("КоличествоДней", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ДатаВыплатыПроцентов", ТипДата);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("СуммаПроцентов", ТипСумма);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("СуммарнаяОптимизацияКалендаря", ТипСумма);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ВозобновляемыйЛимит", Новый ОписаниеТипов("Булево"));
	
	ТаблицаКредитыПоСчетам.Колонки.Добавить("МаксимальныйСрок", ОбщегоНазначения.ОписаниеТипаЧисло(4));
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ДатаОкончанияДоступности", ТипДата);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("МинимальнаяСуммаСделки", ТипСумма);
	ТаблицаКредитыПоСчетам.Колонки.Добавить("МаксимальнаяСуммаСделки", ТипСумма);
	
	ТаблицаКредитыПоСчетам.Колонки.Добавить("ИндексСтроки", ОбщегоНазначения.ОписаниеТипаЧисло(10));
	
	ТаблицаКредитыПоСчетам.Индексы.Добавить("БанковскийСчет");
	
	Возврат ТаблицаКредитыПоСчетам;
	
КонецФункции	

Функция НовоеУточнениеОперацииКредита()
	
	СтрокаРеквизитов = "Банк, БанковскийСчет, Валюта, КоличествоДней, Организация, ПериодИспользования, ПроцентнаяСтавка, 
						| Сумма, СуммаПроцентов, ФинансовыйИнструмент, ЭтоПривлечениеСредств";
	
	Результат = Новый Структура(СтрокаРеквизитов);
	Результат.ПериодИспользования = Новый СтандартныйПериод;
	
	Возврат Результат;

КонецФункции

Функция ПараметрыПолученияКредита(СостояниеКалендаря, НастройкиОптимизации, СтрокаДня)
	
	ПараметрыКредита = Неопределено;	
		
	ПотребностьДня = -СтрокаДня.Остаток;
	
	СущественнаяРазница = НастройкиОптимизации.СущественнаяРазницаСтоимостиКредитов; // в рублях
	Если СтрокаДня.Валюта <> СостояниеКалендаря.ВалютаРегламентированногоУчета Тогда
		ОтборВалюты = Новый Структура("Валюта, Дата");
		ЗаполнитьЗначенияСвойств(ОтборВалюты, СтрокаДня);
		КурсыВалютыСчета = СостояниеКалендаря.КурсыВалют.НайтиСтроки(ОтборВалюты);
		СтрокаКурса = КурсыВалютыСчета[0];
		СущественнаяРазница = СущественнаяРазница / СтрокаКурса.Курс * СтрокаКурса.Кратность;
	КонецЕсли;	
	
	ПараметрыНовогоКредита = ПараметрыПолученияНовогоКредита(СостояниеКалендаря, СущественнаяРазница, СтрокаДня);	
	ПараметрыИзмененияТекущегоКредита = ПараметрыИзмененияТекущегоКредита(СостояниеКалендаря, СущественнаяРазница, СтрокаДня);
	
	Если ПараметрыНовогоКредита <> Неопределено И ПараметрыИзмененияТекущегоКредита <> Неопределено Тогда
			
		СуммарнаяОптимизацияИзмененияТекущегоКредита = ПараметрыИзмененияТекущегоКредита.СуммарнаяОптимизацияКалендаря - ПараметрыИзмененияТекущегоКредита.ИсходныйКредит.СуммарнаяОптимизацияКалендаря;
		СуммаПроцентовИзмененияТекущегоКредита = ПараметрыИзмененияТекущегоКредита.СуммаПроцентов - ПараметрыИзмененияТекущегоКредита.ИсходныйКредит.СуммаПроцентов;
		СуммаПроцентовНовогоКредитаПриведенная = ПараметрыНовогоКредита.СуммаПроцентов * СуммарнаяОптимизацияИзмененияТекущегоКредита / ПараметрыНовогоКредита.СуммарнаяОптимизацияКалендаря;
		РазницаСтоимости = (СуммаПроцентовИзмененияТекущегоКредита - СуммаПроцентовНовогоКредитаПриведенная) / ПараметрыИзмененияТекущегоКредита.КоличествоДней;
		
		Если РазницаСтоимости < СущественнаяРазница Тогда
			
			ПараметрыКредита = ПараметрыИзмененияТекущегоКредита;
			
		ИначеЕсли ПараметрыИзмененияТекущегоКредита.ОтносительнаяСтоимостьОптимизации <= ПараметрыНовогоКредита.ОтносительнаяСтоимостьОптимизации Тогда
			
			ПараметрыКредита = ПараметрыИзмененияТекущегоКредита;
		Иначе
			ПараметрыКредита = ПараметрыНовогоКредита;	
		КонецЕсли;
		
	ИначеЕсли ПараметрыНовогоКредита <> Неопределено Тогда
		ПараметрыКредита = ПараметрыНовогоКредита;
	ИначеЕсли ПараметрыИзмененияТекущегоКредита <> Неопределено Тогда
		ПараметрыКредита = ПараметрыИзмененияТекущегоКредита;
	КонецЕсли;
	
	Возврат ПараметрыКредита;
	
КонецФункции

Функция ПараметрыПолученияНовогоКредита(СостояниеКалендаря, СущественнаяРазницаСтоимостиКредитов, СтрокаДня)
	
	МассивПараметровКредита = Новый Массив;
	
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря;
	
	ТребуемаяДатаПоступленияСредств = СтрокаДня.Дата;
	ТребуемаяДатаВозвратаСредств = ДобавитьДнейКДате(СтрокаДня.Дата, 1);
	ТребуемаяДатаВозвратаСредств = БлижайшийРабочийДеньПослеДаты(ТребуемаяДатаВозвратаСредств, ДниКалендаря, ТребуемаяДатаВозвратаСредств);
	ТребуемыйСрокКредита = ДнейМеждуДатами(ТребуемаяДатаПоступленияСредств, ТребуемаяДатаВозвратаСредств);
	
	ОтборДоговоровКредита = Новый Структура("Организация, Валюта");
	ЗаполнитьЗначенияСвойств(ОтборДоговоровКредита, СтрокаДня);
	МассивДоговоров = СостояниеКалендаря.ДоговорыКредита.НайтиСтроки(ОтборДоговоровКредита);
		
	Для каждого СтрокаДоговора Из МассивДоговоров Цикл
		
		Если СтрокаДоговора.ФиксированныйСчетОрганизации И СтрокаДоговора.БанковскийСчет <> СтрокаДня.БанковскийСчет Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДоговора.ДатаНачалаДоступности > ТребуемаяДатаПоступленияСредств ИЛИ 
			СтрокаДоговора.ДатаОкончанияДоступности < ТребуемаяДатаВозвратаСредств Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаДоговора.МаксимальныйСрок) И СтрокаДоговора.МаксимальныйСрок < ТребуемыйСрокКредита Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаПоступленияСредств = ТребуемаяДатаПоступленияСредств;
		ДатаВозвратаСредств = ТребуемаяДатаВозвратаСредств;
		
		Если ЗначениеЗаполнено(СтрокаДоговора.МинимальныйСрок) И СтрокаДоговора.МинимальныйСрок > ТребуемыйСрокКредита Тогда
			// продлеваем кредит до минимального строка
			ДатаВозвратаСредств = ДобавитьДнейКДате(ДатаПоступленияСредств, СтрокаДоговора.МинимальныйСрок);
			ДатаВозвратаСредств = БлижайшийРабочийДеньПослеДаты(ДатаВозвратаСредств, ДниКалендаря, ДатаВозвратаСредств);
			
			Если ДатаВозвратаСредств > СтрокаДоговора.ДатаОкончанияДоступности Тогда
				// перемещаем кредит до даты окончания доступности	
				ДатаВозвратаСредств = БлижайшийРабочийДеньДоДаты(СтрокаДоговора.ДатаОкончанияДоступности, ДниКалендаря, СтрокаДоговора.ДатаОкончанияДоступности);
				
				ДатаПоступленияСредств = ДобавитьДнейКДате(ДатаВозвратаСредств, - СтрокаДоговора.МинимальныйСрок);
				ДатаПоступленияСредств = БлижайшийРабочийДеньДоДаты(ДатаПоступленияСредств, ДниКалендаря, ДатаПоступленияСредств);
				Если ДатаПоступленияСредств < СостояниеКалендаря.НачалоПериодаОтбора Тогда
					Продолжить;	// не можем взять такой кредит
				КонецЕсли;
				
				Если ДатаПоступленияСредств > ТребуемаяДатаПоступленияСредств Тогда
					ДатаПоступленияСредств = ТребуемаяДатаПоступленияСредств;
				КонецЕсли;
				
				КоличествоДнейКредита = ДнейМеждуДатами(ДатаПоступленияСредств, ДатаВозвратаСредств);		
				Если ЗначениеЗаполнено(СтрокаДоговора.МаксимальныйСрок) И СтрокаДоговора.МаксимальныйСрок < КоличествоДнейКредита Тогда
					Продолжить;	// не можем взять такой кредит
				КонецЕсли;
			КонецЕсли;				
		КонецЕсли;		
		
		ДоступныйЛимитПоКредиту = ДоступныйЛимитПоКредиту(СостояниеКалендаря.ЛимитыКредитов, СтрокаДоговора.БазовыйДоговорКредита, ДатаПоступленияСредств, ДатаВозвратаСредств);
		Если НЕ ЗначениеЗаполнено(ДоступныйЛимитПоКредиту) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаКредита = Мин(ДоступныйЛимитПоКредиту, -СтрокаДня.Остаток);
		Если ЗначениеЗаполнено(СтрокаДоговора.МинимальнаяСуммаСделки) И СуммаКредита < СтрокаДоговора.МинимальнаяСуммаСделки Тогда
			СуммаКредита = СтрокаДоговора.МинимальнаяСуммаСделки;
			Если СуммаКредита > ДоступныйЛимитПоКредиту Тогда
				Продолжить; // не можем взять
			КонецЕсли;
		КонецЕсли;	
				
		Если ЗначениеЗаполнено(СтрокаДоговора.МаксимальнаяСуммаСделки) И СуммаКредита > СтрокаДоговора.МаксимальнаяСуммаСделки Тогда
			СуммаКредита = СтрокаДоговора.МаксимальнаяСуммаСделки;
		КонецЕсли;	
				
		КоличествоДней = ДнейМеждуДатами(ДатаПоступленияСредств, ДатаВозвратаСредств);
		СуммаПроцентов = СуммаПроцентовПоКредиту(СуммаКредита, СтрокаДоговора.ПроцентнаяСтавка, ДатаПоступленияСредств, ДатаВозвратаСредств);
		
		// относительная стоимость оптмизации за период кредита
		СуммарнаяОптимизацияКалендаря = СуммарнаяОптимизацияПоСчетуЗаПериод(СостояниеКалендаря.Остатки, СтрокаДня.БанковскийСчет, ДатаПоступленияСредств, ДатаВозвратаСредств, СуммаКредита);                                                        
		ОтносительнаяСтоимостьОптимизации = СуммаПроцентов / СуммарнаяОптимизацияКалендаря;
		
		// Параметры кредита
		ПараметрыКредита = НовыеПараметрыПолученияКредита();
		ЗаполнитьЗначенияСвойств(ПараметрыКредита, СтрокаДоговора);
		ПараметрыКредита.ДатаПоступленияСредств = ДатаПоступленияСредств;
		ПараметрыКредита.ДатаВозвратаСредств = ДатаВозвратаСредств;
		ПараметрыКредита.ДатаВыплатыПроцентов = ДатаВыплатыПроцентовПоКредиту(ДатаВозвратаСредств);
		ПараметрыКредита.Сумма = СуммаКредита;
		ПараметрыКредита.КоличествоДней = КоличествоДней;
		ПараметрыКредита.СуммаПроцентов = СуммаПроцентов;
		ПараметрыКредита.СуммарнаяОптимизацияКалендаря = СуммарнаяОптимизацияКалендаря;
		ПараметрыКредита.ОтносительнаяСтоимостьОптимизации = ОтносительнаяСтоимостьОптимизации;
		
		МассивПараметровКредита.Добавить(ПараметрыКредита);
		
	КонецЦикла;
	
	// ищем оптимильный кредит
	ПараметрыОптимальногоКредита = ОптимальныйКредитИзКоллекцииКредитов(МассивПараметровКредита, -СтрокаДня.Остаток, СущественнаяРазницаСтоимостиКредитов);	
	Возврат ПараметрыОптимальногоКредита;

КонецФункции	

Функция ПараметрыИзмененияТекущегоКредита(СостояниеКалендаря, СущественнаяРазницаСтоимостиКредитов, СтрокаДня)
	
	МассивПараметровКредита = Новый Массив;
	
	ДниКалендаря = СостояниеКалендаря.ДниКалендаря; 
	
	ТребуемаяДатаПоступленияСредств = СтрокаДня.Дата;
	
	ТребуемаяДатаВозвратаСредств = ДобавитьДнейКДате(СтрокаДня.Дата, 1);
	ТребуемаяДатаВозвратаСредств = БлижайшийРабочийДеньПослеДаты(ТребуемаяДатаВозвратаСредств, ДниКалендаря, ТребуемаяДатаВозвратаСредств);
	ТребуемаяСумма = -СтрокаДня.Остаток;
	
	ОтборКредитов = Новый Структура("БанковскийСчет", СтрокаДня.БанковскийСчет);
	МассивВзятыхКредитов = СостояниеКалендаря.КредитыПоСчетам.Скопировать(ОтборКредитов);
	МассивВзятыхКредитов.Сортировать("ПроцентнаяСтавка Возр");
	Для каждого СтрокаКредита ИЗ МассивВзятыхКредитов Цикл
		
		НоваяДатаВозвратаСредств = Макс(ТребуемаяДатаВозвратаСредств, СтрокаКредита.ДатаВозвратаСредств);
		НовоеКоличествоДней = ДнейМеждуДатами(СтрокаКредита.ДатаПоступленияСредств, НоваяДатаВозвратаСредств);
		
		Если ЗначениеЗаполнено(СтрокаКредита.МаксимальныйСрок) И СтрокаКредита.МаксимальныйСрок < НовоеКоличествоДней
			ИЛИ СтрокаКредита.ДатаОкончанияДоступности < НоваяДатаВозвратаСредств Тогда
			Продолжить;
		КонецЕсли;

		Если СтрокаКредита.ДатаВозвратаСредств  <= ТребуемаяДатаПоступленияСредств Тогда
				
			// пробуем продолжить кредит
			НоваяСуммаКредита = СтрокаКредита.Сумма;
			// новый и старый кредиты не пересекаются
			ДоступныйЛимитДополнения = ДоступныйЛимитПоКредиту(СостояниеКалендаря.ЛимитыКредитов, СтрокаКредита.БазовыйДоговорКредита, СтрокаКредита.ДатаВозвратаСредств, НоваяДатаВозвратаСредств); 
			Если НЕ СтрокаКредита.ВозобновляемыйЛимит Тогда
				ДоступныйЛимитДополнения = ДоступныйЛимитДополнения + СтрокаКредита.Сумма; // не учитываем уже взятый кредит
			КонецЕсли;
			
			Если ДоступныйЛимитДополнения < СтрокаКредита.Сумма Тогда
				Продолжить;  // не можем продлить кредит
			КонецЕсли;
						
			// суммарная оптимизация календаря
			ДополнениеОптимизацииДобавПериод = СуммарнаяОптимизацияПоСчетуЗаПериод(СостояниеКалендаря.Остатки, СтрокаДня.БанковскийСчет, СтрокаКредита.ДатаВозвратаСредств, НоваяДатаВозвратаСредств, НоваяСуммаКредита);	
			
			СуммарнаяОптимизацияКалендаря = СтрокаКредита.СуммарнаяОптимизацияКалендаря + ДополнениеОптимизацииДобавПериод;
			
		Иначе
			// увеличиваем сумму текущего кредита
			// новый кредит в том же периоде, что старый, значит не хватило суммы исходного кредита на корректировку этого дня
			// если кредиты пересекаются то новая дата возврата всегда меньше или равна старой, т.к. новый кредит берется на один рабочий день
			ДоступныйЛимит = ДоступныйЛимитПоКредиту(СостояниеКалендаря.ЛимитыКредитов, СтрокаКредита.БазовыйДоговорКредита, СтрокаКредита.ДатаПоступленияСредств, СтрокаКредита.ДатаВозвратаСредств); 
		    ДоступныйЛимит = ДоступныйЛимит + СтрокаКредита.Сумма;
			
			НоваяСуммаКредита = СтрокаКредита.Сумма + ТребуемаяСумма;
			НоваяСуммаКредита = Мин(НоваяСуммаКредита, ДоступныйЛимит);
			Если ЗначениеЗаполнено(СтрокаКредита.МаксимальнаяСуммаСделки)  Тогда
				НоваяСуммаКредита = Мин(НоваяСуммаКредита, СтрокаКредита.МаксимальнаяСуммаСделки); 
			КонецЕсли;
			
			Если НоваяСуммаКредита <= СтрокаКредита.Сумма Тогда
				Продолжить; // не можем увеличить кредит
			КонецЕсли;
			
			// суммарная оптимизация календаря
			СуммаУвеличенияКредита = (НоваяСуммаКредита - СтрокаКредита.Сумма);
			ДополнениеОптимизации = СуммарнаяОптимизацияПоСчетуЗаПериод(СостояниеКалендаря.Остатки, СтрокаДня.БанковскийСчет, СтрокаКредита.ДатаПоступленияСредств, СтрокаКредита.ДатаВозвратаСредств, СуммаУвеличенияКредита);                                                        
			
			СуммарнаяОптимизацияКалендаря = СтрокаКредита.СуммарнаяОптимизацияКалендаря + ДополнениеОптимизации;
			
		КонецЕсли;
						
		НоваяСуммаПроцентов = СуммаПроцентовПоКредиту(НоваяСуммаКредита, СтрокаКредита.ПроцентнаяСтавка, СтрокаКредита.ДатаПоступленияСредств, НоваяДатаВозвратаСредств);	 
		ОтносительнаяСтоимостьОптимизации = НоваяСуммаПроцентов / СуммарнаяОптимизацияКалендаря;
		
		ПараметрыКредита = НовыеПараметрыПолученияКредита();
		ПараметрыКредита.ИзменениеТекущегоКредита = Истина;
		ЗаполнитьЗначенияСвойств(ПараметрыКредита, СтрокаКредита);
		ПараметрыКредита.ДатаПоступленияСредств = СтрокаКредита.ДатаПоступленияСредств;
		ПараметрыКредита.ДатаВозвратаСредств = НоваяДатаВозвратаСредств;
		ПараметрыКредита.ДатаВыплатыПроцентов = ДатаВыплатыПроцентовПоКредиту(НоваяДатаВозвратаСредств);
		ПараметрыКредита.Сумма = НоваяСуммаКредита;
		ПараметрыКредита.КоличествоДней = НовоеКоличествоДней;
		ПараметрыКредита.СуммаПроцентов = НоваяСуммаПроцентов;
		ПараметрыКредита.СуммарнаяОптимизацияКалендаря = СуммарнаяОптимизацияКалендаря;
		ПараметрыКредита.ОтносительнаяСтоимостьОптимизации = ОтносительнаяСтоимостьОптимизации;
		ПараметрыКредита.ИсходныйКредит = СтрокаКредита;
		ПараметрыКредита.ИндексСтрокиИсходногоКредита = СтрокаКредита.ИндексСтроки; 
				
		МассивПараметровКредита.Добавить(ПараметрыКредита);
				
	КонецЦикла;
		
	// ищем оптимильный кредит
	ПараметрыОптимальногоКредита = ОптимальныйКредитИзКоллекцииКредитов(МассивПараметровКредита, -СтрокаДня.Остаток, СущественнаяРазницаСтоимостиКредитов);
	Возврат ПараметрыОптимальногоКредита;
	
КонецФункции	

Функция ОптимальныйКредитИзКоллекцииКредитов(КоллекцияПараметровКредита, ПотребностьДня, СущественнаяРазницаСтоимостиКредитов)
	
	ПараметрыОптимальногоКредита = Неопределено;
	Для каждого Параметры Из КоллекцияПараметровКредита Цикл
		
		Если ПараметрыОптимальногоКредита = Неопределено Тогда
			ПараметрыОптимальногоКредита = Параметры;
			Продолжить;
		КонецЕсли;	
		
		СуммаПроцентовПриведенная = Параметры.СуммаПроцентов * ПараметрыОптимальногоКредита.СуммарнаяОптимизацияКалендаря / Параметры.СуммарнаяОптимизацияКалендаря;			
		РазницаСтоимости = (СуммаПроцентовПриведенная - ПараметрыОптимальногоКредита.СуммаПроцентов) / ПараметрыОптимальногоКредита.КоличествоДней;
				
		Если Параметры.Сумма >= ПотребностьДня И ПараметрыОптимальногоКредита.Сумма < ПотребностьДня Тогда
			// пытаемся взять кредит который закрывает всю потребность в дне
			Если РазницаСтоимости < СущественнаяРазницаСтоимостиКредитов Тогда
				ПараметрыОптимальногоКредита = Параметры;
				Продолжить;
			КонецЕсли;
			
		ИначеЕсли Параметры.Сумма < ПотребностьДня И ПараметрыОптимальногоКредита.Сумма >= ПотребностьДня Тогда
			
			Если РазницаСтоимости <= -СущественнаяРазницаСтоимостиКредитов Тогда
				ПараметрыОптимальногоКредита = Параметры;
				Продолжить;
			КонецЕсли;

		Иначе	
			Если Параметры.ОтносительнаяСтоимостьОптимизации < ПараметрыОптимальногоКредита.ОтносительнаяСтоимостьОптимизации Тогда
				ПараметрыОптимальногоКредита = Параметры;
				Продолжить;
			КонецЕсли;				
		КонецЕсли;	
				
					
	КонецЦикла;

	Возврат ПараметрыОптимальногоКредита;
	
КонецФункции

Функция СуммаПроцентовПоКредиту(СуммаКредита, ПроцентнаяСтавка, ДатаПоступленияСредств, ДатаВозвратаСредств)
	
	КоличествоДней = ДнейМеждуДатами(ДатаПоступленияСредств, ДатаВозвратаСредств);
	СуммаПроцентов = Окр(СуммаКредита * КоличествоДней * ПроцентнаяСтавка / (100 * 365), 2);  // упрощенный расчет процентов, без учета плавающих ставок и дней в году
	Возврат СуммаПроцентов;
	
КонецФункции

Функция ДатаВыплатыПроцентовПоКредиту(ДатаВозвратаСредств)
	Возврат ДатаВозвратаСредств; // упрощенный расчет даты выплаты процентов - всегда на дату возврата средств
КонецФункции

Функция ДоступныйЛимитПоКредиту(ЛимитыКредитов, БазовыйДоговорКредита, ДатаПоступленияСредств, ДатаВозвратаСредств)
	
	МинимальныйЛимитПоКредиту = Неопределено;
	
	ОтборЛимита = Новый Структура("БазовыйДоговорКредита", БазовыйДоговорКредита);
	МассивСтрокЛимита = ЛимитыКредитов.НайтиСтроки(ОтборЛимита);
	Для каждого  СтрокаЛимита Из МассивСтрокЛимита Цикл
		Если СтрокаЛимита.Дата >= ДатаПоступленияСредств И СтрокаЛимита.Дата < ДатаВозвратаСредств Тогда
			Если МинимальныйЛимитПоКредиту = Неопределено ИЛИ МинимальныйЛимитПоКредиту > СтрокаЛимита.Лимит Тогда
				МинимальныйЛимитПоКредиту = СтрокаЛимита.Лимит;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МинимальныйЛимитПоКредиту;
	
КонецФункции

Функция ИзменитьСохраненныеЛимитыПоКредиту(ЛимитыПоДоговору, ДатаПоступленияСредств = Неопределено, ДатаВозвратаСредств = Неопределено, СуммаКорректировки)
	
	ЕстьСвойствоИзменен = (ЛимитыПоДоговору.Колонки.Найти("Изменен") <> Неопределено);
	
	Для каждого СтрокаЛимита Из ЛимитыПоДоговору Цикл
		Если (ДатаПоступленияСредств = Неопределено ИЛИ СтрокаЛимита.Дата >= ДатаПоступленияСредств)
			И (ДатаВозвратаСредств = Неопределено ИЛИ СтрокаЛимита.Дата < ДатаВозвратаСредств) Тогда
			
			СтрокаЛимита.Лимит = СтрокаЛимита.Лимит + СуммаКорректировки;
			Если ЕстьСвойствоИзменен Тогда
				СтрокаЛимита.Изменен = Истина;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ДобавитьКредитВСписокОпераций(СостояниеКалендаря, Кредит)
	
	Если Кредит.ИзменениеТекущегоКредита Тогда		
		СтрокаИсходногоКредита = СостояниеКалендаря.КредитыПоСчетам[Кредит.ИндексСтрокиИсходногоКредита];
		ЗаполнитьЗначенияСвойств(СтрокаИсходногоКредита, Кредит);
	Иначе
		СтрокаКредита = СостояниеКалендаря.КредитыПоСчетам.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКредита, Кредит);
		СтрокаКредита.ИндексСтроки = СостояниеКалендаря.КредитыПоСчетам.Индекс(СтрокаКредита);
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОбновитьЛимитыКредитовКалендаря(СостояниеКалендаря, НовыеЛимитыКредитов)
	
	ЛимитыКредитов = СостояниеКалендаря.ЛимитыКредитов;
	Для каждого СтрокаНовыеЛимиты ИЗ НовыеЛимитыКредитов Цикл	
		СтрокаЛимита = ЛимитыКредитов[СтрокаНовыеЛимиты.ИндексСтроки];
		СтрокаЛимита.Лимит = СтрокаНовыеЛимиты.Лимит;
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьОперацииКредита(СостояниеКалендаря, ТаблицаКредитаПоСчетам)
	Для каждого СтрокаКредит Из ТаблицаКредитаПоСчетам Цикл
		СоздатьОперациюКредита(СостояниеКалендаря, СтрокаКредит);
	КонецЦикла;
КонецПроцедуры

Процедура ОптимизироватьРассчитанныеКредиты(СостояниеКалендаря)
	
	// проходим по каждому кредиту в дне, смотрим есть ли плюс в этом дне и смотрим минимальный остаток на время кредита
	// если есть минимальный остаток пробуем уменьшить этот кредит
	// упорядочиваем по убыванию суммы, так как меньшие кредиты проще убрать
	
	ТаблицаКредитыПоСчетам = СостояниеКалендаря.КредитыПоСчетам;
	ТаблицаКредитыПоСчетам.Сортировать("Сумма Возр");
	Для каждого СтрокаКредита ИЗ ТаблицаКредитыПоСчетам Цикл
		ОтборПоСчету = Новый Структура("БанковскийСчет", СтрокаКредита.БанковскийСчет);
		ОстаткиПоСчету = СостояниеКалендаря.Остатки.НайтиСтроки(ОтборПоСчету);
		
		ДатаОкончанияИспользованияКредита = ДобавитьДнейКДате(СтрокаКредита.ДатаВозвратаСредств, -1);
		МинимальныйОстаток = МинимальныйОстатокЗаПериод(ОстаткиПоСчету, СтрокаКредита.ДатаПоступленияСредств, ДатаОкончанияИспользованияКредита);
		Если МинимальныйОстаток > 0 Тогда
			// пробуем уменьшить кредит
			НоваяСуммаКредита = Макс(СтрокаКредита.Сумма - МинимальныйОстаток, 0);
			Если НоваяСуммаКредита <> 0 И ЗначениеЗаполнено(СтрокаКредита.МинимальнаяСуммаСделки) И НоваяСуммаКредита < СтрокаКредита.МинимальнаяСуммаСделки Тогда
				НоваяСуммаКредита = СтрокаКредита.МинимальнаяСуммаСделки;
				Если НоваяСуммаКредита >= СтрокаКредита.Сумма Тогда
					Продолжить; // не можем уменьшить сумму кредита
				КонецЕсли;	
			КонецЕсли;
			
			НоваяСуммаПроцентов = СуммаПроцентовПоКредиту(НоваяСуммаКредита, СтрокаКредита.ПроцентнаяСтавка, СтрокаКредита.ДатаПоступленияСредств, СтрокаКредита.ДатаВозвратаСредств);
			
			// лимиты не корректируем, т.к. далее не используются
			
			// корректируем остатки		
			СуммаКорректировкиТела = СтрокаКредита.Сумма - НоваяСуммаКредита;
			СуммаКорректировкиПроцентов = СтрокаКредита.СуммаПроцентов - НоваяСуммаПроцентов;
			
			ИзменитьСохраненныеОстаткиЗаПериод(ОстаткиПоСчету, СтрокаКредита.ДатаПоступленияСредств, ДатаОкончанияИспользованияКредита, -СуммаКорректировкиТела); // уменьшение прихода на счет по кредиту
			ИзменитьСохраненныеОстаткиСДаты(ОстаткиПоСчету, СтрокаКредита.ДатаВыплатыПроцентов, СуммаКорректировкиПроцентов); // уменьшение выплаты процентов
			
			СтрокаКредита.Сумма = НоваяСуммаКредита;
			СтрокаКредита.СуммаПроцентов = НоваяСуммаПроцентов;	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПредставлениеОперацииКредита(Кредит)
					
	ФорматнаяСтрокаДаты = "ДЛФ=D";

	ПредставлениеОперации = СтрШаблон(НСтр("ru = 'Транш инструмента %1 на сумму %2 %3 сроком %4 с %5'"),
				Кредит.ДоговорКредитаПредставление,
				Кредит.Сумма, 
				Кредит.ВалютаПредставление, 
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(Кредит.КоличествоДней, НСтр("ru = 'день,дня,дней'")),
				Формат(Кредит.ДатаПоступленияСредств, ФорматнаяСтрокаДаты));
								
	Возврат ПредставлениеОперации;
													
КонецФункции

Функция УточнениеОперацииКредита(Кредит)
	
	УточнениеОперации = НовоеУточнениеОперацииКредита();
	ЗаполнитьЗначенияСвойств(УточнениеОперации, Кредит, "Банк, БанковскийСчет, Валюта, Организация, ПроцентнаяСтавка, Сумма, СуммаПроцентов, КоличествоДней");
	УточнениеОперации.ПериодИспользования.ДатаНачала = Кредит.ДатаПоступленияСредств;
	УточнениеОперации.ПериодИспользования.ДатаОкончания = Кредит.ДатаВозвратаСредств;
	УточнениеОперации.ФинансовыйИнструмент = Кредит.ДоговорКредита;
	УточнениеОперации.ЭтоПривлечениеСредств = Истина;
	
	Возврат УточнениеОперации;
	
КонецФункции

Процедура СоздатьОперациюКредита(СостояниеКалендаря, Кредит)
	
	Если Кредит.Сумма = 0 Тогда
		Возврат; // не понадобился
	КонецЕсли;
	
	// Добавление операции на форме платежного календаря
	ИдентификаторОперации = Новый УникальныйИдентификатор;
	
	Операция = Отчеты.ПлатежныйКалендарьУХ.СтруктураИнструмента();
	Операция.Активна = Истина;
	Операция.ИдентификаторОперации = ИдентификаторОперации;
	Операция.ВидОперации =  Перечисления.ВидыОперацийПлатежногоКалендаря.ПривлечениеФинансирования;	
	Операция.Оптимизация = Истина;
	Операция.ПредставлениеОперации = ПредставлениеОперацииКредита(Кредит);	
	Операция.УточнениеОперации = УточнениеОперацииКредита(Кредит);
	Операция.ОрганизацияЗачисления = Кредит.Организация;
	Операция.БанкЗачисления = Кредит.Банк;
	Операция.БанковскийСчетЗачисления = Кредит.БанковскийСчет;
	Операция.ВалютаЗачисления = Кредит.Валюта;
	Операция.ДатаЗачисления = Кредит.ДатаПоступленияСредств;
	Операция.ДатаСписания = Кредит.ДатаВозвратаСредств;
	Операция.ДатаВыплатыПроцентов = Кредит.ДатаВыплатыПроцентов;
	
	СостояниеКалендаря.НовыеОперации.Добавить(Операция);
	
	ОбщиеПараметры = Новый Структура;
	ОбщиеПараметры.Вставить("Пользователь", СостояниеКалендаря.Пользователь);
	ОбщиеПараметры.Вставить("Инструмент", Перечисления.ВидыОперацийПлатежногоКалендаря.ПривлечениеФинансирования);
	ОбщиеПараметры.Вставить("Организация", Кредит.Организация);
	ОбщиеПараметры.Вставить("Банк", Кредит.Банк);
	ОбщиеПараметры.Вставить("БанковскийСчет", Кредит.БанковскийСчет);
	ОбщиеПараметры.Вставить("ПулЛиквидности", Кредит.ПулЛиквидности);
	ОбщиеПараметры.Вставить("Валюта", Кредит.Валюта);
	ОбщиеПараметры.Вставить("Оптимизация", Истина);
	ОбщиеПараметры.Вставить("Активна", Истина);
	ОбщиеПараметры.Вставить("ИдентификаторДобавившейОперации", ИдентификаторОперации);
	
	НачатьТранзакцию();
	Попытка
		
		// Строка 1: поступление на счет
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = Кредит.ДатаПоступленияСредств;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.ПоступлениеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = Кредит.Сумма;
		МЗ.Записать();
		
		// Строка 2: возврат со счета
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = Кредит.ДатаВозвратаСредств;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = - Кредит.Сумма;
		МЗ.Записать();
		
		// Строка 3: проценты по кредиту
		МЗ = РегистрыСведений.ПредставлениеПлатежногоКалендаря.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, ОбщиеПараметры);
		МЗ.Дата = Кредит.ДатаВыплатыПроцентов;
		МЗ.РазделПлатежногоКалендаря = Перечисления.РазделыПлатежногоКалендаря.СписаниеСредств;
		МЗ.ИдентификаторЗаписи = Новый УникальныйИдентификатор;
		МЗ.Сумма = - Кредит.СуммаПроцентов;
		МЗ.Записать();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();	
		ЗаписьЖурналаРегистрации(КлючЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти