////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции по работе с договорами и графиками их исполнения.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

// Функция возвращает ссылку на версию соглашения, на основании которой заполнен договор.
//
// Параметры:
//  ДоговорСсылка	 - СправочникСсылка.ДоговорыКонтрагентов - договор.
// 
// Возвращаемое значение:
//  ДокументСсылка - Версия соглашения, послужившая основанием для заполнения договора.
//
Функция ДействующаяВерсияСоглашения(ДоговорСсылка) Экспорт

	Если ЗначениеЗаполнено(ДоговорСсылка) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорСсылка, "ВерсияСоглашения");
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ДействующаяВерсияСоглашения()

// Функция возвращает последние версии графиков:
// действующую версию и последнюю согласованную контрагентом
//
// Параметры:
//  Договор	 - 	СправочникСсылка.ДоговорыКонтрагентов - Договор, для которого требуется получить версии графиков.
// 
// Возвращаемое значение:
//  Массив - Массив, содержащий ссылки на последние версии.
//
Функция ПоследниеВерсииГрафиков(Договор) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК Регистратор
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(, ПредметГрафика = &ПредметГрафика) КАК ВерсииРасчетовСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВерсииРасчетовСрезПоследних.ВерсияГрафика
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			,
	|			ПредметГрафика = &ПредметГрафика
	|				И ОпорныйГрафик) КАК ВерсииРасчетовСрезПоследних";

	Запрос.УстановитьПараметр("ПредметГрафика", Договор);
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
КонецФункции

Функция ДействующийГрафик(ОбъектРасчетов, Дата = Неопределено, Организация = Неопределено) Экспорт
	
	Возврат РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ОбъектРасчетов, Дата, Организация);
	
КонецФункции

Функция ОпорныйГрафик(ОбъектРасчетов, Дата = Неопределено, Организация = Неопределено) Экспорт
	
	Возврат РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ОбъектРасчетов, Дата, Организация, Истина);
	
КонецФункции

Функция ИсходныйГрафик(Договор) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииРасчетовСрезПервых.ВерсияГрафика КАК ВерсияГрафика
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПервых(, ПредметГрафика = &ПредметГрафика) КАК ВерсииРасчетовСрезПервых";
	Запрос.УстановитьПараметр("ПредметГрафика", Договор);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВерсияГрафика;
	Иначе
		Возврат Неопределено
	КонецЕсли;
	
КонецФункции

Функция ГрафикРасчетовВерсииСоглашения(ВерсияСоглашения) Экспорт
	
	ТекстЗапроса = 
		СтрШаблон(
			"ВЫБРАТЬ
			|	*
			|ИЗ
			|	%1.ГрафикРасчетов КАК ГрафикРасчетов
			|ГДЕ
			| ГрафикРасчетов.Ссылка = &ВерсияСоглашения",
	
			ВерсияСоглашения.Метаданные().ПолноеИмя());
			
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВерсияСоглашения", ВерсияСоглашения);
			
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПоследняяВерсияДокументаСоглашения(Объект, ИсключаемаяВерсия = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Данные.Ссылка КАК ВерсияСоглашения
	|ИЗ
	|	&ИмяДокумента КАК Данные
	|ГДЕ
	| 	&УсловиеОтбора И Данные.Ссылка <> &ИсключаемаяВерсия
	|
	|УПОРЯДОЧИТЬ ПО
	|	Данные.Дата УБЫВ"
	);

	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ИмяДокумента", 
		Объект.Ссылка.Метаданные().ПолноеИмя());
	
	МассивУсловий = Новый Массив;
	Отбор = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОтборВерсийСоглашений(Объект);
	Для каждого Элемент Из Отбор Цикл
		МассивУсловий.Добавить(
			СтрШаблон("Данные.%1 = &Параметр_%1", Элемент.Ключ));
		Запрос.УстановитьПараметр(
			СтрШаблоН("Параметр_%1", Элемент.Ключ), Элемент.Значение);	
	КонецЦикла;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбора", 
		СтрСоединить(МассивУсловий, " И "));	

	Запрос.УстановитьПараметр("ИсключаемаяВерсия", ИсключаемаяВерсия);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВерсияСоглашения;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

// Функция получает непроведенный черновик версии соглашения.
// Рассматриваются только черновики от актуальной версии соглашения.
//
// Параметры:
//  Договор		 - 	СправочникСсылка.ДоговорыКонтрагентов - 
//  ИмяДокумента - 	 Строка - имя документа версии соглашения. Если параметр не передан, 
//  определяется по договору (медленнее)
// 
// Возвращаемое значение:
//  ДокументСсылка, Неопределено - Ссылка на документ-черновик. Если черновик не найден, возвращает Неопределено.
//
Функция СохраненныйЧерновик(Договор, Знач ИмяДокумента = "") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсияСоглашения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияСоглашения
	|ГДЕ
	|	НЕ ВерсияСоглашения.Проведен
	|	И НЕ ВерсияСоглашения.ПометкаУдаления
	|	И ВерсияСоглашения.ДоговорКонтрагента = &ДоговорКонтрагента
	|	И ВерсияСоглашения.ДокументОснование = &ДокументОснование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсияСоглашения.Дата УБЫВ";
	
	ОписаниеПолейДоговора = Новый Структура ("ДокументОснование,ВидДоговораУХ", "ВерсияСоглашения", "ВидДоговораУХ");
	
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, ОписаниеПолейДоговора);
	
	Если ИмяДокумента = "" Тогда
		ИмяДокумента = УправлениеДоговорамиУХКлиентСерверПовтИсп.ПолучитьИмяДокументаПоВидуДоговора(РеквизитыДоговора.ВидДоговораУХ);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВерсияСоглашенияКредит", ИмяДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Договор);
	Запрос.УстановитьПараметр("ДокументОснование", РеквизитыДоговора.ДокументОснование);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Процедура заполняет реквизиты договора по версии соглашения. 
// Все одноименные реквизиты заполняются безусловно.
// Специфическая логика заполнения расположена в модуле менеджера версии соглашения 
// в методе ВычисляемыеРеквизитыДоговора()
//
// Параметры:
//  ДоговорОбъект	 - 	СправочникОбъект.ДоговорыКонтрагентов - заполняемый договор.
//  ВерсияСоглашения - 	ДокументОбъект, ДанныеФормыКоллекция, ДокументСсылка - версия соглашения.
//
Процедура ЗаполнитьДоговорПоВерсииСоглашения(ДоговорОбъект, ВерсияСоглашения) Экспорт
	
	ЗаполнитьЗначенияСвойств(ДоговорОбъект, ВерсияСоглашения,, "Ссылка,ПометкаУдаления,Номер,Дата");
	
	МетаданныеВерсииСоглашения = ВерсияСоглашения.Метаданные();
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(МетаданныеВерсииСоглашения.ПолноеИмя());
	ВычисляемыеПоляДоговора = МенеджерОбъекта.ВычисляемыеРеквизитыДоговора(ВерсияСоглашения);
	ЗаполнитьЗначенияСвойств(ДоговорОбъект, ВычисляемыеПоляДоговора);
	
	// При программном заполнении "от документа" возникнет задача передать реквизиты договора.
	// Они должны быть помещены в дополнительные свойства документа, в структуру ЗначенияЗаполненияДоговора.
	Если ВерсияСоглашения.ДополнительныеСвойства.Свойство("ЗначенияЗаполненияДоговора") Тогда
		ЗаполнитьЗначенияСвойств(ДоговорОбъект, ВерсияСоглашения.ДополнительныеСвойства.ЗначенияЗаполненияДоговора);
	КонецЕсли;
	
	// Если заполняем из версии соглашения коммерческий договор 
	// то необходимо заполлнить фирмы филиалы
	Если ВычисляемыеПоляДоговора.Свойство("Филиалы") Тогда
		ДоговорОбъект.Филиалы.Очистить();
		Для каждого ЭлементМассива Из ВычисляемыеПоляДоговора.Филиалы Цикл
			ДоговорОбъект.Филиалы.Добавить().Организация = ЭлементМассива;
		КонецЦикла; 				
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияСоглашения.Ссылка) Тогда
		ДоговорОбъект.ВерсияСоглашения = ВерсияСоглашения.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюВерсииСоглашения(ВерсияСоглашенияОбъект, Отказ, РежимЗаписи) Экспорт
	
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВерсияСоглашенияОбъект.Ссылка);
	
	ИменаКлючевыхРеквизитов = МенеджерДокумента.ИменаКлючевыхРеквизитов();
	
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ПроверитьИзменитьДатуВерсииСоглашения(
		НЕ ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДокументОснование),
		ВерсияСоглашенияОбъект[ИменаКлючевыхРеквизитов.ДатаНачалаДействия],
		ВерсияСоглашенияОбъект.Дата);
		
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.НаименованиеВерсии) Тогда
	
		ВерсияСоглашенияОбъект.НаименованиеВерсии = РаботаСДоговорамиКонтрагентовУХКлиентСервер.РеквизитыВерсииСоглашенияСтрокой(ВерсияСоглашенияОбъект.НомерДополнительногоСоглашения, ВерсияСоглашенияОбъект.Дата);
	
	КонецЕсли;
	
	ДополнительныеСвойства = ВерсияСоглашенияОбъект.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("ДополнительныеОбъекты", Новый Массив());
	
	// Обновляем при необходимости реквизиты договора.
	
	Если ДополнительныеСвойства.Свойство("НеЗаписыватьДоговор") Тогда
		Возврат;
	КонецЕсли;
	
	// Записываем договор, если нужный объект уже лежит в дополнительных свойствах, или же если
	ЭтоНовыйДоговор = Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДоговорКонтрагента);
	ПереданДоговорОбъект = ДополнительныеСвойства.Свойство("ДоговорОбъект");
	ЭтоТекущаяВерсияСоглашения = Не ЭтоНовыйДоговор И Не ВерсияСоглашенияОбъект.ЭтоНовый() 
		И (ВерсияСоглашенияОбъект.Ссылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСоглашенияОбъект.ДоговорКонтрагента, "ВерсияСоглашения"));
	
	// Проверим, что записываемая версия на самом деле будет новой актуальной.
	ПроводитсяНоваяАктуальнаяВерсия = Ложь;	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииРасчетовСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ВерсииРасчетов.СрезПоследних КАК ВерсииРасчетовСрезПоследних
		|ГДЕ
		|	ВерсииРасчетовСрезПоследних.ПредметГрафика = &ДоговорКонтрагента
		|	И ВерсииРасчетовСрезПоследних.Организация = &Организация
		|	И ВерсииРасчетовСрезПоследних.Период > &Дата";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ВерсияСоглашенияОбъект.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация", ВерсияСоглашенияОбъект.Организация);
		Запрос.УстановитьПараметр("Дата", ВерсияСоглашенияОбъект.Дата);
		
		РезультатЗапроса = Запрос.Выполнить();
		ПроводитсяНоваяАктуальнаяВерсия = РезультатЗапроса.Пустой();
	КонецЕсли;
	
		
	НадоЗаписыватьДоговор = ЭтоНовыйДоговор Или ПереданДоговорОбъект Или ЭтоТекущаяВерсияСоглашения Или ПроводитсяНоваяАктуальнаяВерсия;
	Если Не НадоЗаписыватьДоговор Тогда
		Возврат;
	КонецЕсли;
	
	НадоЗаполнятьДоговорПоТекущейВерсии = ЭтоНовыйДоговор 
											Или (ЭтоТекущаяВерсияСоглашения И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения) 
											Или ПроводитсяНоваяАктуальнаяВерсия;
	
	Если ПереданДоговорОбъект Тогда
		ДоговорОбъект = ДополнительныеСвойства.ДоговорОбъект;
	ИначеЕсли ЭтоНовыйДоговор Тогда
		МенеджерДоговора = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьМенеджерСправочникаДоговора(ВерсияСоглашенияОбъект.ВидДоговораУХ);
		ДоговорОбъект = МенеджерДоговора.СоздатьЭлемент();
	Иначе
		ДоговорОбъект = ВерсияСоглашенияОбъект.ДоговорКонтрагента.ПолучитьОбъект();
	КонецЕсли;
	
	Если ДоговорОбъект <> Неопределено И Не ДополнительныеСвойства.Свойство("ДоговорОбъект") Тогда
		ДополнительныеСвойства.Вставить("ДоговорОбъект", ДоговорОбъект);
	КонецЕсли;
	
	Если НадоЗаполнятьДоговорПоТекущейВерсии Тогда
		ЗаполнитьДоговорПоВерсииСоглашения(ДоговорОбъект, ВерсияСоглашенияОбъект);
		Если ВерсияСоглашенияОбъект.ЭтоНовый() Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВерсияСоглашенияОбъект.Ссылка);
			ДоговорОбъект.ВерсияСоглашения = МенеджерОбъекта.ПолучитьСсылку();
			ВерсияСоглашенияОбъект.УстановитьСсылкуНового(ДоговорОбъект.ВерсияСоглашения);
		КонецЕсли;
		
	ИначеЕсли ЭтоТекущаяВерсияСоглашения И (РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) Тогда
		// Снимается с проведения текущая версия соглашения. Откатимся на предыдущую.
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВерсииРасчетовСрезПоследних.ВерсияГрафика КАК ВерсияСоглашенияИсточник
		|ИЗ
		|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
		|			&Граница,
		|			ПредметГрафика = &ДоговорКонтрагента
		|				И Организация = &Организация) КАК ВерсииРасчетовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииРасчетовСрезПоследних.Период УБЫВ";

		Запрос.УстановитьПараметр("Граница", Новый Граница(ВерсияСоглашенияОбъект.МоментВремени(), ВидГраницы.Исключая));
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ВерсияСоглашенияОбъект.ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Организация", ВерсияСоглашенияОбъект.Организация);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			// Если есть на что откатываться - откатываемся. Если нет - оставляем как было.
			Источник = Выборка.ВерсияСоглашенияИсточник.ПолучитьОбъект();
			Источник.ДополнительныеСвойства.Вставить("ДоговорОбъект", ДоговорОбъект);
			Источник.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписиДокумента.Проведение);
			Источник.ДополнительныеСвойства.Вставить("ДополнительныеОбъекты", Новый Массив);
			ЗаполнитьДоговорПоВерсииСоглашения(ДоговорОбъект, Источник);
			
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
				ДополнительныеСвойства.ДополнительныеОбъекты, 
				Источник.ДополнительныеСвойства.ДополнительныеОбъекты);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоНовыйДоговор Тогда
		МенеджерДоговора = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьМенеджерСправочникаДоговора(ДоговорОбъект.ВидДоговораУХ);
		ВерсияСоглашенияОбъект.ДоговорКонтрагента = МенеджерДоговора.ПолучитьСсылку();
		ДоговорОбъект.УстановитьСсылкуНового(ВерсияСоглашенияОбъект.ДоговорКонтрагента);
	КонецЕсли;
	
	ДоговорОбъект.ДополнительныеСвойства.Вставить("ЭтоЗаписьИзВерсииСоглашения", Истина);
	ДоговорОбъект.Записать();
	Если ПереданДоговорОбъект Тогда
		ДополнительныеСвойства.Удалить("ДоговорОбъект");
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ИзмененДоговорКонтрагента", Истина);
	
	ДополнительныеСвойства.Удалить("ДоговорОбъект");
	Если ДополнительныеСвойства.Свойство("ДополнительныеОбъекты") Тогда
		Для Каждого Данные Из ДополнительныеСвойства.ДополнительныеОбъекты Цикл
			Если ТипЗнч(Данные) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			Если Данные.Действие = "ПровестиНеОперативно" Тогда
				Данные.Объект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			ИначеЕсли Данные.Действие = "УстановитьПометкуУдаления" Тогда
				Данные.Объект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
		КонецЦикла;
		ДополнительныеСвойства.Удалить("ДополнительныеОбъекты");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиВерсииСоглашения(ВерсияСоглашенияОбъект, Отказ) Экспорт
	
	
	ДополнительныеСвойства = ВерсияСоглашенияОбъект.ДополнительныеСвойства;
	
	Если ДополнительныеСвойства.Свойство("ЗаписатьВстречныеДоговоры") Тогда
		
		Если ДополнительныеСвойства.Свойство("ВстречныйДоговор") Тогда
			
			Если ЗначениеЗаполнено(ДополнительныеСвойства.ВстречныйДоговор) Тогда
				РаботаСДоговорамиКонтрагентовУХВызовСервера.ЗаписатьВстречныеДоговоры(
					ВерсияСоглашенияОбъект.ДоговорКонтрагента,
					ДополнительныеСвойства.ВстречныйДоговор);
			Иначе
				// Удалим ВГО связи данного договора и его версий.
				РаботаСДоговорамиКонтрагентовУХВызовСервера.ОчиститьСвязиВнутригрупповогоДоговора(ВерсияСоглашенияОбъект.ДоговорКонтрагента);
			КонецЕсли;
			
		//ИначеЕсли Тогда 
			
		КонецЕсли;
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияВерсииСоглашения(ВерсияСоглашенияОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	КешОбработкиЗаполнения = Неопределено;
	
	ТипДанныхЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипДанныхЗаполнения = Тип("Структура") Тогда
		
		// В БП 3.0 справочник "Договоры контрагентов" подчинен справочнику "Контрагенты". 
		// Возможна ситуация, когда в параметрах выбора задано значение для справочника.
		// Переименуем реквизит.
		Если ДанныеЗаполнения.Свойство("Владелец") И ЗначениеЗаполнено(ДанныеЗаполнения.Владелец)
			И НЕ ДанныеЗаполнения.Свойство("Контрагент") Тогда
			
			ДанныеЗаполнения.Вставить("Контрагент", ДанныеЗаполнения.Владелец);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("Партнер") Тогда
			Если НЕ (ДанныеЗаполнения.Свойство("Контрагент") И ЗначениеЗаполнено(ДанныеЗаполнения.Контрагент)) Тогда
				ДанныеЗаполнения.Вставить("Контрагент", ПартнерыИКонтрагенты.ПолучитьКонтрагентаПартнераПоУмолчанию(ДанныеЗаполнения.Партнер));
			КонецЕсли;
			Если НЕ (ДанныеЗаполнения.Свойство("КонтактноеЛицо") И ЗначениеЗаполнено(ДанныеЗаполнения.КонтактноеЛицо)) Тогда
				ДанныеЗаполнения.Вставить("КонтактноеЛицо", ПартнерыИКонтрагенты.ПолучитьКонтактноеЛицоПартнераПоУмолчанию(ДанныеЗаполнения.Партнер));
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ОрганизацияОтбора") Тогда
			ДанныеЗаполнения.Вставить("Организация", ДанныеЗаполнения.ОрганизацияОтбора);
		КонецЕсли;
		
		Если ТипДанныхЗаполнения = Тип("Структура") Тогда
			ЗаполнениеДокументов.ЗаполнитьПоСтруктуре(ВерсияСоглашенияОбъект, ДанныеЗаполнения);
		КонецЕсли;		
		
		// При групповом создании договоров (например, при загрузке из клиент-банка)
		// может быть передана структура для кеширования в ней данных, используемых в нескольких договорах.
		Если ДанныеЗаполнения.Свойство("КешОбработкиЗаполнения") Тогда
			КешОбработкиЗаполнения = ДанныеЗаполнения.КешОбработкиЗаполнения;
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("ВстречныйДоговор") Тогда
			
			ЗаполнитьВстречныйДоговор(ВерсияСоглашенияОбъект, ДанныеЗаполнения.ВстречныйДоговор);
			
		КонецЕсли;
		
		Если ДанныеЗаполнения.Свойство("РежимИнициализацииВерсииПоДоговору") Тогда
			
			ДоговорКонтрагентаОбъект = Неопределено;
			Если Не ДанныеЗаполнения.Свойство("ДоговорОбъект", ДоговорКонтрагентаОбъект) Тогда
				
				Если ДанныеЗаполнения.Свойство("ДоговорКонтрагента")
					И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКонтрагента) Тогда
					
					ДоговорКонтрагентаОбъект = ДанныеЗаполнения.ДоговорКонтрагента.ПолучитьОбъект();		
				Иначе
					ВызватьИсключение НСтр("ru = 'Некорректный вызов режима инициализации версии договора. Не передан объект договора.'");
				КонецЕсли;	
			КонецЕсли;

			ЗаполнитьВерсиюСоглашенияПоДоговоруКонтрагента(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
						
		КонецЕсли;

	ИначеЕсли ТипДанныхЗаполнения = ТипЗнч(ВерсияСоглашенияОбъект.Ссылка) Тогда
		
		ВерсияСоглашенияОбъект.ДокументОснование = ДанныеЗаполнения;
	ИначеЕсли ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ЭтоСсылкаНаДоговор(ДанныеЗаполнения) Тогда
		ВерсияСоглашенияОбъект.ДокументОснование = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "ВерсияСоглашения");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДоговорКонтрагента) 
		И НЕ ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДокументОснование) Тогда
		
			АктуальнаяВерсия = ДействующийГрафик(ВерсияСоглашенияОбъект.ДоговорКонтрагента);
			Если АктуальнаяВерсия <> ВерсияСоглашенияОбъект.Ссылка Тогда
				// Если это не единственная версия, то устанавливаем документ основание.
				ВерсияСоглашенияОбъект.ДокументОснование = АктуальнаяВерсия;
			КонецЕсли;
			
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Дата) Тогда
		ВерсияСоглашенияОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДокументОснование) Тогда
		// Это не первая версия
		ЗаполнитьВерсиюПараметровПоПредыдущейВерсии(ВерсияСоглашенияОбъект, ВерсияСоглашенияОбъект.ДокументОснование);
				
	Иначе
		
		НачальноеЗаполнениеВерсииСоглашения(ВерсияСоглашенияОбъект, КешОбработкиЗаполнения);
		
	КонецЕсли;
	
	// все кроме коммерческого договора
	Если ВерсияСоглашенияОбъект.Метаданные().ТабличныеЧасти.Найти("ПараметрыОпераций") <> Неопределено Тогда
		ГруппаОперацийГрафика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСоглашенияОбъект.ВидДоговораУХ, "ГруппаОперацийГрафика");
		ВерсияСоглашенияОбъект.ПараметрыОпераций.Загрузить(
			РаботаСДоговорамиКонтрагентовУХ.ПараметрыОперацийГрафикаПоУмолчанию(ГруппаОперацийГрафика));
	КонецЕсли;
			
	ДоговорыКонтрагентовВстраиваниеУХ.ОбработкаЗаполненияВерсияСоглашения(
		ВерсияСоглашенияОбъект, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриКопированииВерсииСоглашения(ВерсияСоглашенияОбъект, ОбъектКопирования) Экспорт
	
	ВерсияСоглашенияОбъект.ДоговорКонтрагента = Неопределено;
	ВерсияСоглашенияОбъект.ФайлДоговора = Неопределено;

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияВерсииСоглашения(ВерсияСоглашенияОбъект, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "СпособЗаполненияСтавкиНДС") Тогда
	
		Если ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СПокупателем
		 ИЛИ ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Прочее
		 ИЛИ ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.СКомитентомНаЗакупку
		 ИЛИ ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.РасчетыСБрокером
		 ИЛИ ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Страхование
		 ИЛИ ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваВходящие
		 ИЛИ ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.ЗалогиИПоручительстваИсходящие Тогда
			МассивНепроверяемыхРеквизитов.Добавить("СпособЗаполненияСтавкиНДС");
		КонецЕсли;
	
	КонецЕсли;
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ТребуетсяПостановкаНаУчетВалютногоКонтроля") Тогда
		Если Не ВерсияСоглашенияОбъект.ТребуетсяПостановкаНаУчетВалютногоКонтроля Тогда 
			МассивНепроверяемыхРеквизитов.Добавить("УникальныйНомерВалютногоКонтроля");
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ФиксированныйСчетОрганизации")
		И Не ВерсияСоглашенияОбъект.ФиксированныйСчетОрганизации Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ФиксированныйСчетКонтрагента")
		И Не ВерсияСоглашенияОбъект.ФиксированныйСчетКонтрагента Тогда
			МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ПериодичностьНачисленияПроцентов") Тогда
		Если НЕ ВерсияСоглашенияОбъект.НачислениеПроцентовНаОтчетныеДаты Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ПериодичностьНачисленияПроцентов");	
		КонецЕсли;
	КонецЕсли;
	
	Если ВерсияСоглашенияОбъект.ВидСоглашения <> ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БазовыйДоговор");
	КонецЕсли;
	
	МассивНепроверяемыхРеквизитов.Добавить("ПроизводственныеКалендари");
	МассивНепроверяемыхРеквизитов.Добавить("ПроизводственныеКалендари.ПроизводственныйКалендарь");
	
	Если ВерсияСоглашенияОбъект.ПроизводственныеКалендари.Количество() Тогда
		
		Для Каждого ТекСтрока Из ВерсияСоглашенияОбъект.ПроизводственныеКалендари Цикл
			
			Если Не ЗначениеЗаполнено(ТекСтрока.ПроизводственныйКалендарь) Тогда
				
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Колонка", "Заполнение", НСтр("ru = 'Производственный календарь'")
				,ТекСтрока.НомерСтроки ,НСтр("ru = 'Производственные календари'") , );
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВерсияСоглашенияОбъект.Ссылка, "ТекстПроизводственныеКалендари", , Отказ);

			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Список", "Заполнение",
			, ,НСтр("ru = 'Производственные календари'") , );
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ВерсияСоглашенияОбъект.Ссылка, "ТекстПроизводственныеКалендари", , Отказ);
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
	
КонецПроцедуры

Процедура ПометитьНаУдалениеВерсииСоглашенияДоговора(ДоговорКонтрагента, Знач ВидДоговораУХ = Неопределено) Экспорт
	
	Если ВидДоговораУХ <> Неопределено Тогда
		ВидДоговораУХ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговораУХ");
	КонецЕсли;
	
	ИмяДокумента = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьИмяДокументаПоВидуДоговора(ВидДоговораУХ);
	
	Если Не ЗначениеЗаполнено(ИмяДокумента) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсияСоглашения.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияСоглашения
	|ГДЕ
	|	НЕ ВерсияСоглашения.ПометкаУдаления
	|	И ВерсияСоглашения.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВерсияСоглашенияКредит", ИмяДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВерсияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьДоговор", Истина);
		ВерсияОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСвязанныеДоговоры(БазовыйДоговор, ПодчиненныйДоговор, ВидСвязи, Отказ = Ложь) Экспорт
	
	РегистрыСведений.СвязанныеДоговоры.ЗаписатьСвязанныеДоговоры(БазовыйДоговор, ПодчиненныйДоговор, ВидСвязи, Отказ);
	
КонецПроцедуры

Процедура ЗаполнитьВерсиюСоглашенияПоБазовомуДоговору(ВерсияСоглашенияОбъект) Экспорт
	
	ПараметрыРамочногоСоглашения = ДействующаяВерсияСоглашения(ВерсияСоглашенияОбъект.БазовыйДоговор);
	
	Если ЗначениеЗаполнено(ПараметрыРамочногоСоглашения) Тогда
		МенеджерВерсииСоглашения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВерсияСоглашенияОбъект.Ссылка);
		ОписаниеТабличныхЧастей = МенеджерВерсииСоглашения.ОписаниеТабличныхЧастейДокумента();
		
		СтрокаРеквизитовИсключений = "Ссылка,Проведен,Номер,Дата,ПометкаУдаления,ДокументОснование,ДоговорКонтрагента,БазовыйДоговор,НомерДополнительногоСоглашения,НаименованиеВерсии,ВидСоглашения";
		Для Каждого ОписаниеТабличнойЧасти Из ОписаниеТабличныхЧастей Цикл
			СтрокаРеквизитовИсключений = СтрокаРеквизитовИсключений + "," + ОписаниеТабличнойЧасти.Имя;
			Если ОписаниеТабличнойЧасти.ЗаполнятьИзРамочногоСоглашения Тогда
				ВерсияСоглашенияОбъект[ОписаниеТабличнойЧасти.Имя].Загрузить(ПараметрыРамочногоСоглашения[ОписаниеТабличнойЧасти.Имя].Выгрузить());
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ВерсияСоглашенияОбъект, ПараметрыРамочногоСоглашения,, СтрокаРеквизитовИсключений);
		
		Если ВерсияСоглашенияОбъект.ВидСоглашения = Перечисления.ВидыСоглашений.Спецификация
			И ВерсияСоглашенияОбъект.ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Кредит Тогда
			Результат = Документы.ВерсияСоглашенияКредит.ПолучитьОграниченияПоРамочномуСоглашению(ВерсияСоглашенияОбъект.БазовыйДоговор, 
				ВерсияСоглашенияОбъект.Ссылка, ВерсияСоглашенияОбъект.ДатаНачалаДействия);
			ВерсияСоглашенияОбъект.Сумма = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Результат, "СвободныйОстатокЛимита", 0);
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Функция НовыйОписаниеТабличныхЧастейДокумента() Экспорт
	
	Описание = Новый ТаблицаЗначений;
	Описание.Колонки.Добавить("Имя", ОбщегоНазначения.ОписаниеТипаСтрока(80));
	Описание.Колонки.Добавить("ЗаполнятьИзРамочногоСоглашения", Новый ОписаниеТипов("Булево"));
	
	Возврат Описание;
	
КонецФункции

Процедура ДобавитьОписаниеТабличнойЧасти(ОписаниеТабличныхЧастей, Имя, ЗаполнятьИзРамочногоСоглашения) Экспорт

	НоваяСтрока = ОписаниеТабличныхЧастей.Добавить();
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.ЗаполнятьИзРамочногоСоглашения = ЗаполнятьИзРамочногоСоглашения;

КонецПроцедуры

Функция ПолучитьПроизводственныеКалендари(ДоговорИлиВерсияСоглашения) Экспорт
	
	Если Не ЗначениеЗаполнено(ДоговорИлиВерсияСоглашения) Тогда
		Возврат Константы.ПроизводственныйКалендарьПоУмолчанию.Получить();
	КонецЕсли;
	
	ТипВходящегоОбъекта = ТипЗнч(ДоговорИлиВерсияСоглашения);
	
	Если ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ЭтоСсылкаНаДоговор(ДоговорИлиВерсияСоглашения) Тогда
		
		ВерсияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорИлиВерсияСоглашения, "ВерсияСоглашения");
		
		Возврат ПолучитьПроизводственныеКалендариВерсииСоглашения(ВерсияСоглашения);
		
	ИначеЕсли Метаданные.ОпределяемыеТипы.ВерсияСоглашения.Тип.СодержитТип(ТипВходящегоОбъекта) Тогда	
		
		Возврат ПолучитьПроизводственныеКалендариВерсииСоглашения(ДоговорИлиВерсияСоглашения);		
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
КонецФункции

// Процедура содержит общую логику формирования структуры
// вычисляемых реквизитов договора при заполнении из версии договора.
//
// Параметры:
//  ВычисляемыеРеквизиты	 - 	Структура - Структура вычисляемых реквизитов.
//  ВерсияСоглашенияОбъект	 - 	ДокументОбъект.ВерсияСоглашения* - Исходный документ версии договора.
//
Процедура ЗаполнитьВычисляемыеРеквизитыДоговора(ВычисляемыеРеквизиты, ВерсияСоглашения) Экспорт
	
	ВычисляемыеРеквизиты.Вставить("ВидФинансовогоИнструмента", УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьВидФинансовогоИнструментаПоВидуДоговора(ВерсияСоглашения.ВидДоговораУХ));
	
	ИмяРеквизитаВидДоговора = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяРеквизитаВидДоговора(ВерсияСоглашения.ВидДоговораУХ);
	ВычисляемыеРеквизиты.Вставить(ИмяРеквизитаВидДоговора, УправлениеДоговорамиУХВызовСервераПовтИсп.ВидДоговораБП(ВерсияСоглашения.ВидДоговораУХ));
	
КонецПроцедуры

Процедура СинхронизироватьВнутригрупповыеВерсииСоглашения(ВерсияСоглашенияСсылка, ДополнительныеСвойства = Неопределено) Экспорт
	
	Если ДополнительныеСвойства = Неопределено Или ДополнительныеСвойства.Свойство("НеОбновлятьЗеркально") Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорПриемник = РегистрыСведений.СвязанныеДоговоры.ПолучитьВстречныйДоговор(ВерсияСоглашенияСсылка.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(ДоговорПриемник) Тогда
		Возврат;
	КонецЕсли;
	
	НеобходимоОбновитьСвязьВГО = Ложь;
	ВерсияПриемник = ПолучитьВерсиюПриемник(ВерсияСоглашенияСсылка);
	
	Если ЗначениеЗаполнено(ВерсияПриемник) Тогда
		ЗаполняемыйОбъект = ВерсияПриемник.ПолучитьОбъект();
	Иначе
		НеобходимоОбновитьСвязьВГО = Истина;
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ВерсияСоглашенияСсылка);
		ЗаполняемыйОбъект = МенеджерДокумента.СоздатьДокумент();
	КонецЕсли;
	
	ДанныеЗаполнения = Новый Структура("ДоговорКонтрагента,ВстречныйДоговор", ДоговорПриемник,ВерсияСоглашенияСсылка);
	ЗаполняемыйОбъект.Заполнить(ДанныеЗаполнения);
	ЗаполняемыйОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьЗеркально", Истина);
	ЗаполняемыйОбъект.ДополнительныеСвойства.Вставить("НеОбновлятьФакт", Истина);
	
	ЗаполняемыйОбъект.Записать(РежимЗаписиДокумента.Проведение);

	Если НеобходимоОбновитьСвязьВГО Тогда
		ЗаписатьСвязьВнутригрупповыхВерсий(ВерсияСоглашенияСсылка, ЗаполняемыйОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьВерсиюПриемник(ВерсияСоглашенияИсточник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВнутригрупповыеВерсииСоглашения.ВерсияСоглашенияПриемник КАК ВерсияСоглашенияПриемник
	|ИЗ
	|	РегистрСведений.ВнутригрупповыеВерсииСоглашения КАК ВнутригрупповыеВерсииСоглашения
	|ГДЕ
	|	ВнутригрупповыеВерсииСоглашения.ВерсияСоглашенияИсточник = &ВерсияСоглашенияИсточник";
	
	Запрос.УстановитьПараметр("ВерсияСоглашенияИсточник", ВерсияСоглашенияИсточник);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда
		Возврат Результат[0].ВерсияСоглашенияПриемник;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЗаписатьСвязьВнутригрупповыхВерсий(ВерсияИсточник, ВерсияПриемник) Экспорт
	
	НачатьТранзакцию();
	Попытка
		// Запишем в регистр 2 записи консистентно.
		МенеджерЗаписи = РегистрыСведений.ВнутригрупповыеВерсииСоглашения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВерсияСоглашенияИсточник = ВерсияИсточник;
		МенеджерЗаписи.ВерсияСоглашенияПриемник = ВерсияПриемник;
		МенеджерЗаписи.Записать();
		
		МенеджерЗаписи = РегистрыСведений.ВнутригрупповыеВерсииСоглашения.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ВерсияСоглашенияИсточник = ВерсияПриемник;
		МенеджерЗаписи.ВерсияСоглашенияПриемник = ВерсияИсточник;
		МенеджерЗаписи.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура создает версию соглашения по данным договора, устанавливает его ссылку в сам объект договора.
//
// Параметры:
//  ДоговорОбъект	 - 	СправочникОбъект.ДоговорыКонтрагентов - исходный объект
//
Процедура СоздатьВерсиюСоглашенияПоДоговору(ДоговорОбъект) Экспорт
	
	// Возможны ситуации (например, в ряде интеграционных схем), когда элемент справочника 
	// изменяется непосредственно. В этом случае создадим либо обновим версию соглашения.
	Если ЗначениеЗаполнено(ДоговорОбъект.ВерсияСоглашения) Тогда
		ВерсияСоглашенияОбъект = ДоговорОбъект.ВерсияСоглашения.ПолучитьОбъект();
	ИначеЕсли ЗначениеЗаполнено(ДоговорОбъект.ВидДоговораУХ) Тогда
		// Создадим версию соглашения.
		ИмяДокумента = УправлениеДоговорамиУХКлиентСерверПовтИсп.ПолучитьИмяДокументаПоВидуДоговора(ДоговорОбъект.ВидДоговораУХ);
		МенеджерВерсииСоглашения = Документы[ИмяДокумента];
		ВерсияСоглашенияОбъект = МенеджерВерсииСоглашения.СоздатьДокумент();
		
	Иначе
		
		// Некорректная ситуация. Такой договор не может в дальнейшем использоваться.
		ВерсияСоглашенияОбъект = Неопределено;
		Возврат
	КонецЕсли;
	
	// Заполним документ.
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("РежимИнициализацииВерсииПоДоговору", Истина);
	ДанныеЗаполнения.Вставить("ДоговорОбъект", ДоговорОбъект);
	
	ВерсияСоглашенияОбъект.Заполнить(ДанныеЗаполнения);
	
	Если ДоговорОбъект.Ссылка.Пустая() Тогда
		Если Не ЗначениеЗаполнено(ДоговорОбъект.ПолучитьСсылкуНового()) Тогда
			МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДоговорОбъект.Ссылка);
			ДоговорОбъект.УстановитьСсылкуНового(МенеджерОбъекта.ПолучитьСсылку());
		КонецЕсли;
		ВерсияСоглашенияОбъект.ДоговорКонтрагента = ДоговорОбъект.ПолучитьСсылкуНового();
	КонецЕсли;
	
	ВерсияСоглашенияОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьДоговор");
	РежимЗаписи =?(ДоговорОбъект.ПометкаУдаления, РежимЗаписиДокумента.Запись, РежимЗаписиДокумента.Проведение);
	ВерсияСоглашенияОбъект.Записать(РежимЗаписи);
	
	ДоговорОбъект.ВерсияСоглашения = ВерсияСоглашенияОбъект.Ссылка
	
КонецПроцедуры

Функция ПроизводственныеКалендариВерсииСоглашения(ВерсияСоглашения) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТекСтрокаКалендаря Из ВерсияСоглашения.ПроизводственныеКалендари Цикл
		
		Результат.Добавить(ТекСтрокаКалендаря.ПроизводственныйКалендарь);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция РежимАктуализацииГрафика(ВерсияСоглашения) Экспорт
	
	Результат = Неопределено;
	
	Если ЗначениеЗаполнено(ВерсияСоглашения) Тогда
		Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСоглашения, "РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов");
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(Результат) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Результат = Константы.РежимАктуализацииГрафикаПриИзмененииПервичныхДокументов.Получить();
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Процедура определяет Состояния исполнения для Документа планирования: 
//		"Ожидает исполнения" - для новой заявки;
//		"Отложено" - если заявка попадает под директиву запрета
//
// Параметры:
//	ДокументПланирования - Ссылка на документ планирования;
//	НовыеИдентификаторы - Массив новых уникальных идентификаторов платежной позиции.
//
Процедура ПроверитьПравилаЗапретаОперацийДоговоры(ДокументПланирования, НовыеИдентификаторы) Экспорт
		
	ЗапросПоЗапретамПлатежей = Новый Запрос("ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЕСТЬNULL(ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств, &ПустаяСтатьяДвиженияДенежныхСредств) КАК СтатьяДвиженияДенежныхСредств
	|ПОМЕСТИТЬ ВТРазмещениеЗаявок
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию
	|			И РазмещениеЗаявок.ИдентификаторПозиции = ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции
	|			И РазмещениеЗаявок.ДоговорКонтрагента = ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента
	|ГДЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию = &ДокументПланирования
	|	И РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	СчетОрганизации,
	|	Контрагент,
	|	ДоговорКонтрагента,
	|	СтатьяДвиженияДенежныхСредств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазмещениеЗаявок.ДокументПланирования КАК ДокументПланирования,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ИЗ
	|	ВТРазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаЗапретаОпераций КАК ПравилаЗапретаОпераций
	|		ПО (РазмещениеЗаявок.Организация = ПравилаЗапретаОпераций.Организация
	|				ИЛИ ПравилаЗапретаОпераций.Организация = &ПустаяОрганизация)
	|			И (РазмещениеЗаявок.СчетОрганизации = ПравилаЗапретаОпераций.СчетОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = &ПустойБанковскийСчетОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = &ПустаяКассаОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации = НЕОПРЕДЕЛЕНО)
	|			И (РазмещениеЗаявок.Контрагент = ПравилаЗапретаОпераций.Контрагент
	|				ИЛИ ПравилаЗапретаОпераций.Контрагент = &ПустойКонтрагент)
	|			И (РазмещениеЗаявок.ДоговорКонтрагента = ПравилаЗапретаОпераций.ДоговорКонтрагента
	|				ИЛИ ПравилаЗапретаОпераций.ДоговорКонтрагента = &ПустойДоговор
	|				ИЛИ ПравилаЗапретаОпераций.ДоговорКонтрагента = НЕОПРЕДЕЛЕНО)
	|			И (РазмещениеЗаявок.СтатьяДвиженияДенежныхСредств = ПравилаЗапретаОпераций.СтатьяДвиженияДенежныхСредств
	|				ИЛИ ПравилаЗапретаОпераций.СтатьяДвиженияДенежныхСредств = &ПустаяСтатьяДвиженияДенежныхСредств)
	|			И (ПравилаЗапретаОпераций.ЗапретПлатежей = ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВТРазмещениеЗаявок");
	
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ДокументПланирования", ДокументПланирования);
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ПустойБанковскийСчетОрганизации", КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации());
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ПустаяКассаОрганизации", КэшируемыеПроцедурыОПК.ПустаяКассаОрганизации());
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ПустаяОрганизация", КэшируемыеПроцедурыОПК.ПустаяОрганизация());
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ПустойКонтрагент", КэшируемыеПроцедурыОПК.ПустойКонтрагент());
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ПустойДоговор", КэшируемыеПроцедурыОПК.ПустойДоговор());
	ЗапросПоЗапретамПлатежей.УстановитьПараметр("ПустаяСтатьяДвиженияДенежныхСредств", КэшируемыеПроцедурыОПК.ПустаяСтатьяДвиженияДенежныхСредств());
	
	ВыборкаПоЗапретамПлатежей = ЗапросПоЗапретамПлатежей.Выполнить().Выбрать();
	
	ЗаявкиОтложенные = Новый ТаблицаЗначений;
	ЗаявкиОтложенные.Колонки.Добавить("ДокументПланирования");
	ЗаявкиОтложенные.Колонки.Добавить("ИдентификаторПозиции");
	
	Пока ВыборкаПоЗапретамПлатежей.Следующий() Цикл
		
		НоваяСтрокаЗаявкаОтложенная = ЗаявкиОтложенные.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗаявкаОтложенная, ВыборкаПоЗапретамПлатежей);
		
	КонецЦикла;
	
	ЗаявкиОтложенные.Свернуть("ДокументПланирования, ИдентификаторПозиции");
	
	УправлениеДенежнымиСредствамиУХ.УстановитьСостояниеИсполненияДокументаСписок(ЗаявкиОтложенные, 
		Перечисления.СостоянияИсполненияЗаявки.Отложена,,, ДокументПланирования);
	
	ЗаявкиНовые = Новый ТаблицаЗначений;
	ЗаявкиНовые.Колонки.Добавить("ДокументПланирования");
	ЗаявкиНовые.Колонки.Добавить("ИдентификаторПозиции");
	
	// Переведем новые позиции в статус "Ожидает исполнения"
	Для Каждого НовыйИдентификатор Из НовыеИдентификаторы Цикл
		Если ЗаявкиОтложенные.Найти(НовыйИдентификатор, "ИдентификаторПозиции") = неопределено тогда
			
			НоваяСтрокаЗаявка = ЗаявкиНовые.Добавить();
			НоваяСтрокаЗаявка.ДокументПланирования = ДокументПланирования;
			НоваяСтрокаЗаявка.ИдентификаторПозиции = НовыйИдентификатор;
			
		КонецЕсли;
	КонецЦикла;
	
	ЗаявкиНовые.Свернуть("ДокументПланирования, ИдентификаторПозиции");
			
	УправлениеДенежнымиСредствамиУХ.УстановитьСостояниеИсполненияДокументаСписок(ЗаявкиНовые, 
		Перечисления.СостоянияИсполненияЗаявки.НеОбработана,,, ДокументПланирования);
		
КонецПроцедуры

Процедура УстановитьЛимитЗадолженностиПоДоговору(ВерсияСоглашенияОбъект) Экспорт
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ВидДоговораУХ) 
		Или Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	ВыполняетсяКонтрольЗадолженностиПоДоговору = ПланыВидовХарактеристик.ВидыКонтроляДокументов.ВидКонтроляИспользуется(
													ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольМаксимальнойСуммыЗадолженностиПоДоговору);
													
	Если Не ВыполняетсяКонтрольЗадолженностиПоДоговору Тогда
		Возврат;
	КонецЕсли;
	
	ВерсияСоглашенияОбъект.ОграничиватьСуммуЗадолженности = Истина;
	РольКонтрагента = РольКонтрагентаПоВидуДоговораУХ(ВерсияСоглашенияОбъект.ВидДоговораУХ);
	УсловияКлассификацииКонтрагента = УправлениеОбязательствамиУХ.ПолучитьРекомендованноеУсловиеОплатыКонрагента(
										ВерсияСоглашенияОбъект.Контрагент, РольКонтрагента);
	ВерсияСоглашенияОбъект.ДопустимаяСуммаЗадолженности = УсловияКлассификацииКонтрагента.ДопустимыйУровеньЗадолженности;
КонецПроцедуры

Функция РольКонтрагентаПоВидуДоговораУХ(ВидДоговораУХ) Экспорт
	
	Если РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПоставщиком(ВидДоговораУХ) Тогда
		Возврат Перечисления.РолиКонтрагентов.Поставщики;
	ИначеЕсли РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоДоговорСПокупателем(ВидДоговораУХ) Тогда
		Возврат Перечисления.РолиКонтрагентов.Покупатели;
	ИначеЕсли ВидДоговораУХ = Справочники.ВидыДоговоровКонтрагентовУХ.Депозит Тогда
		Возврат Перечисления.РолиКонтрагентов.Банки;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ГрафикиРасчетов

Функция НовыйОписаниеОперацииГрафика() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭлементСтруктурыЗадолженности");
	Результат.Вставить("ВидБюджета");
	Результат.Вставить("ОперацияГрафика");
	Результат.Вставить("НаправлениеДвижения");
	Результат.Вставить("НаправлениеВзаиморасчетов");
	Результат.Вставить("ВидОперацииУХ");
	Результат.Вставить("СтатьяБюджета");
	Результат.Вставить("КолонкаСекции");
	
	Для Сч = 1 по АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		Результат.Вставить("Аналитика" + Сч);
		Результат.Вставить("ВидАналитики" + Сч);
		Результат.Вставить("ВидАналитики" + Сч + "Наименование");
		Результат.Вставить("ВидАналитики" + Сч + "ТипЗначения");
		Результат.Вставить("ВидАналитики" + Сч + "ТипыВладельца");
		
	КонецЦикла;
	
	Результат.Вставить("ЦФО");
	Результат.Вставить("Проект");
	Результат.Вставить("Валюта");
	Результат.Вставить("СчетОрганизации");
	Результат.Вставить("СчетКонтрагента");
	Результат.Вставить("ИспользуетсяПланирование");
	
	Возврат Результат;
	
КонецФункции

// Функция определяет перечень доступных операций графика и их аналитики по умолчанию.
// Определение аналитик, специфичное для каждого вида версии соглашения, осуществляется
// в методе модуля менеджера ДополнитьПереченьОперацийГрафиков.
Функция ОперацииГрафика(ОписаниеГрафика, Объект, Знач ВидДоговораУХ = Неопределено) Экспорт
	
	Результат = Новый Соответствие;
	
	Если ВидДоговораУХ = Неопределено Тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидДоговораУХ") Тогда
			ВидДоговораУХ = Объект.ВидДоговораУХ;
		Иначе
			ВидДоговораУХ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговораУХ");
		КонецЕсли;
	КонецЕсли;
	
	ОперацииГрафикаПоВидуДоговора = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьОперацииГрафикаПоВидуДоговора(ВидДоговораУХ);
	Для Каждого ТекОперация из ОперацииГрафикаПоВидуДоговора Цикл
		ОписаниеОперации = НовыйОписаниеОперацииГрафика();
		ЗаполнитьЗначенияСвойств(ОписаниеОперации, ТекОперация);
		Результат.Вставить(ТекОперация.ОперацияГрафика, ОписаниеОперации);
	КонецЦикла;
	
	МенеджерВерсииСоглашения = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	МенеджерВерсииСоглашения.ДополнитьПереченьОперацийГрафиков(Результат, ОписаниеГрафика, Объект);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеОперации(Операция, ОперацииГрафика) Экспорт
	
	Результат = Неопределено;
	
	ОписаниеОперации = ОперацииГрафика[Операция];
	
	Если ОписаниеОперации <> Неопределено Тогда
		Результат = ОписаниеОперации;
	Иначе
		Результат = НовыйОписаниеОперацииГрафика();
	КонецЕсли;
	
	Возврат Результат
	
КонецФункции

Функция ДобавитьПозициюВГрафик(График, Сумма, Дата, ИдентификаторПозицииГрафика = Неопределено, ОписаниеОперации = Неопределено) Экспорт
	
	НоваяПозицияГрафика = График.Добавить();
	
	Если ОписаниеОперации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяПозицияГрафика, ОписаниеОперации);
		АналитикиСтатейБюджетовУХВызовСервера.ПривестиЗначениеСтатьиБюджетаПоВидуБюджета(
			НоваяПозицияГрафика.СтатьяБюджета, НоваяПозицияГрафика.ВидБюджета);
	КонецЕсли;
	
	НоваяПозицияГрафика.Сумма = Сумма;
	НоваяПозицияГрафика.СуммаРасчет = Сумма;
	НоваяПозицияГрафика.Дата = Дата;
	
	Если ИдентификаторПозицииГрафика = Неопределено Тогда
		НоваяПозицияГрафика.ИдентификаторПозицииГрафика = Новый УникальныйИдентификатор;
	Иначе
		НоваяПозицияГрафика.ИдентификаторПозицииГрафика = ИдентификаторПозицииГрафика;
	КонецЕсли;
	
	Возврат НоваяПозицияГрафика;
	
КонецФункции

Процедура ЗаполнитьАналитикиГрафикаЗначениямиПоУмолчанию(ГрафикРасчетов, ОперацииГрафика) Экспорт
	
	Если ОперацииГрафика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекОперацияГрафика Из ОперацииГрафика Цикл
		
		СтрокиГрафика = ГрафикРасчетов.НайтиСтроки(Новый Структура("ОперацияГрафика", ТекОперацияГрафика.Ключ));
		Для Каждого ТекСтрокаГрафика Из СтрокиГрафика Цикл
			ЗаполнитьЗначенияСвойств(ТекСтрокаГрафика, ТекОперацияГрафика.Значение);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НовыйПараметрыСозданияПозицийЗаявокПоГрафику() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("РазделятьПоОперациямГрафика", Ложь);
	Результат.Вставить("ДатаНачала", Дата(1,1,1));
	
	Возврат Результат;
	
КонецФункции

Процедура ОбновитьПозицииЗаявокПоГрафику(ДокументОбъект) Экспорт
	
	Если РаботаСДоговорамиКонтрагентовУХКлиентСервер.ФормироватьПозицииЗаявокПоГрафику(ДокументОбъект) Тогда
		РаботаСДоговорамиКонтрагентовУХ.СоздатьПозицииЗаявокПоГрафику(ДокументОбъект);
	Иначе
		РаботаСДоговорамиКонтрагентовУХ.ОчиститьПозицииЗаявокПоГрафику(ДокументОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьПозицииЗаявокПоГрафику(ДокументСсылка) Экспорт
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.РазмещениеЗаявок.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(ДокументСсылка);
	НаборЗаписей.Записать();
	
	НаборЗаписей = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаявкаНаОперацию.Установить(ДокументСсылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры	


// Процедура - Создать позиции заявок по графику
//
// Параметры:
//  Объект				 - ДокументОбъект.ГрафикРасчетовСПокупателемПоставщиком, ДокументОбъект.ВерсияСоглашенияКоммерческийДоговор	и ост. 
//								- документ для которого записываются платженые позиции
//  ПараметрыСоздания	 - НовыйПараметрыСозданияПозицийЗаявокПоГрафику() - параметры создания позиций
//
Процедура СоздатьПозицииЗаявокПоГрафику(Объект, ПараметрыСоздания = Неопределено) Экспорт
	
	Если ПараметрыСоздания = Неопределено Тогда
		ПараметрыСоздания = НовыйПараметрыСозданияПозицийЗаявокПоГрафику();
	КонецЕсли;
	
	КолонкиРазделителяПозиций = Новый Массив;
	КолонкиРазделителяПозиций.Добавить("Дата");
	КолонкиРазделителяПозиций.Добавить("НаправлениеДвижения");
	КолонкиРазделителяПозиций.Добавить("ВидОперацииУХ");
	КолонкиРазделителяПозиций.Добавить("Валюта");
	КолонкиРазделителяПозиций.Добавить("СчетОрганизации");
	КолонкиРазделителяПозиций.Добавить("СчетКонтрагента");
	Если ПараметрыСоздания.РазделятьПоОперациямГрафика Тогда
		КолонкиРазделителяПозиций.Добавить("ОперацияГрафика");
	КонецЕсли;
	
	ГрафикВыгрузка = Объект.ГрафикРасчетов.Выгрузить(
		Новый Структура("ВидБюджета", ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств));
		
	КлючиСозданияПозиций = ГрафикВыгрузка.Скопировать();
	КлючиСозданияПозиций.Свернуть(СтрСоединить(КолонкиРазделителяПозиций, ","));
	
	// Свертка записей набора для уникальности записей в регистре
	МетаданныеРегистра = Метаданные.РегистрыСведений.ДвиженияБюджетированияПоПозициям;
	МассивИзмерений = Новый Массив;
	Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		МассивИзмерений.Добавить(Измерение.Имя);
	КонецЦикла;
	СтрокаИзмерений = СтрСоединить(МассивИзмерений, ",");
	
	МассивРесурсов = Новый Массив;
	Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		МассивРесурсов.Добавить(Ресурс.Имя);
	КонецЦикла;
	СтрокаРесурсов = СтрСоединить(МассивРесурсов, ",");
		
	ОчиститьПозицииЗаявокПоГрафику(Объект.ДокументОснование);
	ОчиститьПозицииЗаявокПоГрафику(Объект.Ссылка);
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ОбъектРасчетов") Тогда // ДокументОбъект.ГрафикРасчетовСПокупателемПоставщиком
		ОбъектРасчетов = Объект.ОбъектРасчетов;
	Иначе
		ОбъектРасчетов = Объект.ДоговорКонтрагента;
	КонецЕсли;	
		
	ДатаНачалаДействияДоговора 	= ДоговорыКонтрагентовВстраиваниеУХ.ДатаНачалаДействияДоговора(Объект.ДоговорКонтрагента);
	СтавкаНДСПоДоговору 		= ДоговорыКонтрагентовВстраиваниеУХ.ПолучитьСтавкуНДСПоДоговору(Объект.ДоговорКонтрагента, ДатаНачалаДействияДоговора);
		
	НовыеИдентификаторы = Новый Массив;
	
	Для Каждого ТекКлючСозданияПозиции Из КлючиСозданияПозиций Цикл
		
		Если ЗначениеЗаполнено(ПараметрыСоздания.ДатаНачала) И ТекКлючСозданияПозиции.Дата < ПараметрыСоздания.ДатаНачала Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекКлючСозданияПозиции);
		
		ПозицииГрафика = ГрафикВыгрузка.Скопировать(СтруктураПоиска);
			
		НачатьТранзакцию();
		
		Попытка
			
			ИдентификаторПозицииОплаты = Новый УникальныйИдентификатор;
						
			НовыеИдентификаторы.Добавить(ИдентификаторПозицииОплаты);
						
			// Создаем запись позиции
			ПозицияОплаты = РегистрыСведений.РазмещениеЗаявок.СоздатьМенеджерЗаписи();
			ПозицияОплаты.ИдентификаторПозиции = ИдентификаторПозицииОплаты;
			ПозицияОплаты.ЗаявкаНаОперацию = Объект.Ссылка;
			ПозицияОплаты.ПриходРасход = ТекКлючСозданияПозиции.НаправлениеДвижения;
			
			ПозицияОплаты.БанковскийСчетКасса = ТекКлючСозданияПозиции.СчетОрганизации;
			ПозицияОплаты.СчетКонтрагента = ТекКлючСозданияПозиции.СчетКонтрагента;
			ПозицияОплаты.ДатаИсполнения = ТекКлючСозданияПозиции.Дата;
			ПозицияОплаты.СуммаВзаиморасчетов = ПозицииГрафика.Итог("Сумма");
			ПозицияОплаты.Сумма = ПозицияОплаты.СуммаВзаиморасчетов;
			ПозицияОплаты.КурсПлатежа = 1;
			ПозицияОплаты.КратностьПлатежа = 1;
			ПозицияОплаты.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная;
			ПозицияОплаты.ВалютаВзаиморасчетов = ТекКлючСозданияПозиции.Валюта;
			ПозицияОплаты.ВалютаОплаты = ТекКлючСозданияПозиции.Валюта;
			ПозицияОплаты.Организация = Объект.Организация;
			ПозицияОплаты.Контрагент = Объект.Контрагент;
			ПозицияОплаты.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
			ПозицияОплаты.Проведен = Истина;
			ПозицияОплаты.ВидОперацииУХ = ТекКлючСозданияПозиции.ВидОперацииУХ;
			ПозицияОплаты.Приоритет = Объект.ПриоритетПлатежа;
			
			ПозицияОплаты.Записать();
			
			// ДвиженияБюджетированияПоПозициям
			
			РасшифровкаПлатежа = РегистрыСведений.ДвиженияБюджетированияПоПозициям.СоздатьНаборЗаписей();
			РасшифровкаПлатежа.Отбор.ИдентификаторПозиции.Установить(ИдентификаторПозицииОплаты);
			
			Для Каждого ТекПозицияГрафика Из ПозицииГрафика Цикл
				
				НоваяЗапись = РасшифровкаПлатежа.Добавить();
				НоваяЗапись.ИдентификаторПозиции = ИдентификаторПозицииОплаты;
				НоваяЗапись.ЗаявкаНаОперацию = Объект.Ссылка;
				НоваяЗапись.СтатьяДвиженияДенежныхСредств = ТекПозицияГрафика.СтатьяБюджета;
				Для ном = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
					НоваяЗапись["Аналитика" + ном] = ТекПозицияГрафика["Аналитика" + ном];
				КонецЦикла;	
				
				НоваяЗапись.Партнер = Объект.Партнер;			
				НоваяЗапись.ОбъектРасчетов = ОбъектРасчетов;
				НоваяЗапись.ЦФО = ТекПозицияГрафика.ЦФО;
				НоваяЗапись.Проект = ТекПозицияГрафика.Проект;
				
				ТипДоговора = ТипЗнч(Объект.ДоговорКонтрагента);
				Если ТипДоговора = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					НоваяЗапись.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
				ИначеЕсли ТипДоговора = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов") Тогда
					НоваяЗапись.ДоговорКредитаДепозита = Объект.ДоговорКонтрагента;
					НоваяЗапись.ТипСуммыКредитаДепозита =
						ВстраиваниеУХЗаявкаНаРасходованиеДенежныхСредств.ПолучитьТипСуммыКредитаДепозита(
							Объект.ДоговорКонтрагента, 
							ТекКлючСозданияПозиции.ВидОперацииУХ, 
							ТекКлючСозданияПозиции.НаправлениеДвижения, 
							ТекПозицияГрафика.СтатьяБюджета);
				ИначеЕсли ТипДоговора = Тип("СправочникСсылка.ДоговорыАренды") Тогда
					НоваяЗапись.ДоговорАренды = Объект.ДоговорКонтрагента;
				КонецЕсли;	
	
				НоваяЗапись.ВалютаВзаиморасчетов = ТекПозицияГрафика.Валюта;
				НоваяЗапись.Сумма = ТекПозицияГрафика.Сумма;
				НоваяЗапись.СтавкаНДС = СтавкаНДСПоДоговору;
				НоваяЗапись.ЭлементСтруктурыЗадолженности = ТекПозицияГрафика.ЭлементСтруктурыЗадолженности;
				
				ОперативноеПланированиеФормыУХКлиентСервер.ПересчитатьСуммуНДС(НоваяЗапись);
				
			КонецЦикла;
			
			ТаблицаЗаписей = РасшифровкаПлатежа.Выгрузить();
			ТаблицаЗаписей.Свернуть(СтрокаИзмерений, СтрокаРесурсов);
			РасшифровкаПлатежа.Загрузить(ТаблицаЗаписей);
			
			РасшифровкаПлатежа.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение;
		КонецПопытки;
			
	КонецЦикла;
		
	ПроверитьПравилаЗапретаОперацийДоговоры(Объект.Ссылка, НовыеИдентификаторы);
		
КонецПроцедуры

Функция ИмяКолонкиГрафика(ОперацияГрафика, ОписаниеГрафика) Экспорт 
	
	Если Не ЗначениеЗаполнено(ОперацияГрафика) Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыОперации = УправлениеДоговорамиУХВызовСервераПовтИсп.ПараметрыОперацииГрафика(ОперацияГрафика);
	ОписаниеСекцииГрафика = НайтиСекциюГрафикаПоСтруктуреЗадолженности(ОписаниеГрафика, ПараметрыОперации.ЭлементСтруктурыЗадолженности);
	
	Если ПараметрыОперации.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		Возврат ОписаниеСекцииГрафика.КолонкаПриход;
	Иначе
		Возврат ОписаниеСекцииГрафика.КолонкаРасход;
	КонецЕсли;
	
КонецФункции	

// вариант заполнения по умолчанию, может переопределятся в модуле менеджера версии соглашения
Процедура ЗаполнитьОперацииВОписанииГрафика(ОписаниеГрафика, ВидДоговораУХ) Экспорт
	
	ОперацииГрафика = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьОперацииГрафикаПоВидуДоговора(ВидДоговораУХ);
	
	Для Каждого ТекОперация Из ОперацииГрафика Цикл
		
		СекцияГрафика = НайтиСекциюГрафикаПоСтруктуреЗадолженности(ОписаниеГрафика, ТекОперация.ЭлементСтруктурыЗадолженности);
		Если ЗначениеЗаполнено(СекцияГрафика) Тогда
			Если ТекОперация.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
				СекцияГрафика.КолонкаПриходОперация = ТекОперация.ОперацияГрафика;
			Иначе
				СекцияГрафика.КолонкаРасходОперация = ТекОперация.ОперацияГрафика;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Функция НайтиСекциюГрафикаПоСтруктуреЗадолженности(ОписаниеГрафика, ЭлементСтруктурыЗадолженности)
	
	Для каждого Элемент Из ОписаниеГрафика Цикл
		Секция = Элемент.Значение;
		Если Секция.ЭлементСтруктурыЗадолженности = ЭлементСтруктурыЗадолженности  Тогда		
			Возврат Секция;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОперацияИзОписанияГрафика(ОписаниеГрафика, ЭлементСтруктурыЗадолженности, КолонкаСекции) Экспорт
	
	СекцияГрафика = НайтиСекциюГрафикаПоСтруктуреЗадолженности(ОписаниеГрафика, ЭлементСтруктурыЗадолженности);
	Если СекцияГрафика = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		Возврат СекцияГрафика.КолонкаПриходОперация;
	ИначеЕсли КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		Возврат СекцияГрафика.КолонкаРасходОперация;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции	

Процедура ДополнитьПереченьОперацийГрафиков(ОперацииГрафика, ОписаниеГрафика, ДокументОбъект) Экспорт
	
	// заполнение по умолчанию для большинства версий соглашений
	СтруктураЗаполнения = Новый Структура;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ОсновнойЦФО") Тогда
		СтруктураЗаполнения.Вставить("ЦФО", ДокументОбъект.ОсновнойЦФО);	
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ОсновнойПроект") Тогда
		СтруктураЗаполнения.Вставить("Проект", ДокументОбъект.ОсновнойПроект);	
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ВалютаВзаиморасчетов") Тогда
		СтруктураЗаполнения.Вставить("Валюта", ДокументОбъект.ВалютаВзаиморасчетов);	
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "БанковскийСчет") Тогда
		СтруктураЗаполнения.Вставить("СчетОрганизации", ДокументОбъект.БанковскийСчет);	
	КонецЕсли;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "БанковскийСчетКонтрагента") Тогда
		СтруктураЗаполнения.Вставить("СчетКонтрагента", ДокументОбъект.БанковскийСчетКонтрагента);	
	КонецЕсли;
	
	Для Каждого ТекКлючЗначение Из ОперацииГрафика Цикл
		ТекОперация = ТекКлючЗначение.Значение;
		ЗаполнитьЗначенияСвойств(ТекОперация, СтруктураЗаполнения);
	КонецЦикла;	
	
	ДополнитьПереченьОперацийГрафикаИзВерсииСоглашения(ОперацииГрафика, ДокументОбъект.ПараметрыОпераций);
	
КонецПроцедуры

Процедура ДополнитьПереченьОперацийГрафикаИзВерсииСоглашения(ОперацииГрафика, ПараметрыОперацийВерсии)
	
	Если НЕ ЗначениеЗаполнено(ПараметрыОперацийВерсии) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекКлючЗначение Из ОперацииГрафика Цикл
		
		Операция = ТекКлючЗначение.Ключ;
		СвойстваОперации = ТекКлючЗначение.Значение;
		
		СтрокиОперацииВерсии = ПараметрыОперацийВерсии.НайтиСтроки(Новый Структура("ОперацияГрафика", Операция));
		Если ЗначениеЗаполнено(СтрокиОперацииВерсии) Тогда
			ЗаполнитьЗначенияСвойств(СвойстваОперации, СтрокиОперацииВерсии[0]); // СтатьяБюджета, Аналитика1..6
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаОписанияГрафика(ОписаниеГрафика, ОперацииГрафика)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("ИмяСекции", Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(200)) ); // ОсновнойДолгПолучение, ОсновнойДолгВозврат
	Таблица.Колонки.Добавить("КолонкаСекции", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход")); // Приход, Расход
	Таблица.Колонки.Добавить("ЭлементСтруктурыЗадолженности", Новый ОписаниеТипов("ПеречислениеСсылка.ЭлементыСтруктурыЗадолженности")); // ОсновнойДолг
	Таблица.Колонки.Добавить("Операция", Новый ОписаниеТипов("СправочникСсылка.ОперацииГрафиковДоговоров"));
	Таблица.Колонки.Добавить("ВидБюджета", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыБюджетов"));
	Таблица.Колонки.Добавить("НаправлениеВзаиморасчетов", 
		Новый ОписаниеТипов("ПеречислениеСсылка.ВидыДвиженийПриходРасход")); // вид движения в регистр РасчетыСКонтрагентамиГрафики
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("КолонкаПриход");
	МассивКолонок.Добавить("КолонкаРасход");
	
	Для каждого СекцияГрафика Из ОписаниеГрафика Цикл
		
		ПараметрыСекции = СекцияГрафика.Значение;
		Для каждого ИмяКолонки Из МассивКолонок Цикл
				
			Операция = ПараметрыСекции[ИмяКолонки + "Операция"];
			ПараметрыОперации = ОперацииГрафика.Получить(Операция);
			
			Строка = Таблица.Добавить();
			Строка.ИмяСекции = ПараметрыСекции[ИмяКолонки]; // ОсновнойДолгПолучение
			Строка.ЭлементСтруктурыЗадолженности = ПараметрыСекции.ЭлементСтруктурыЗадолженности; // ОсновнойДолг
			Строка.Операция = Операция; // КредитПолученный_ОсновнойДолгПолучение		 
			Строка.КолонкаСекции = ПараметрыОперации.КолонкаСекции; // Приход
			Строка.НаправлениеВзаиморасчетов = ПараметрыОперации.НаправлениеВзаиморасчетов; // Расход - рост задолженности
			Строка.ВидБюджета = ПараметрыОперации.ВидБюджета;	 
			
		КонецЦикла;
	КонецЦикла;

	Возврат Таблица;
	
КонецФункции

Функция ДоговорКонтрагентаОбъекта(Объект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДоговорКонтрагента") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДоговорКонтрагента");
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Договор") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Договор");
	ИначеЕсли Метаданные.ОпределяемыеТипы.Договор.Тип.СодержитТип(ТипЗнч(Объект)) Тогда
		Возврат Объект;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "Ссылка")
		И Метаданные.ОпределяемыеТипы.Договор.Тип.СодержитТип(ТипЗнч(Объект.Ссылка)) Тогда			
		Возврат Объект.Ссылка;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ФактическиеДанныеПоСекциямГрафика(ОбъектРасчетов, ОписаниеГрафика, ОперацииГрафика) Экспорт
	
	Если Не ЗначениеЗаполнено(ОбъектРасчетов) Тогда		
		Результат = Новый ТаблицаЗначений;
		Возврат Результат;		
	КонецЕсли;
	
	ДоговорКонтрагента = ДоговорКонтрагентаОбъекта(ОбъектРасчетов);
	ТаблицаФакт = ФактическиеДанныеПоГрафику(ДоговорКонтрагента, ОбъектРасчетов);	
	ТаблицаОписанияГрафика = ТаблицаОписанияГрафика(ОписаниеГрафика, ОперацииГрафика);
	
	ТаблицаФактПоСекциям = Новый ТаблицаЗначений;
	ТаблицаФактПоСекциям.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	МассивСекций = Новый Массив;
	Для каждого СтрокаОписания ИЗ ТаблицаОписанияГрафика Цикл
		ТаблицаФактПоСекциям.Колонки.Добавить(СтрокаОписания.ИмяСекции, Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип);
		МассивСекций.Добавить(СтрокаОписания.ИмяСекции);
	КонецЦикла;
	
	ОтборСтрок = Новый Структура("ЭлементСтруктурыЗадолженности, КолонкаСекции");
	Для каждого СтрокаОписания ИЗ ТаблицаОписанияГрафика Цикл
		
		ЗаполнитьЗначенияСвойств(ОтборСтрок, СтрокаОписания);
		СтрокиФакта = ТаблицаФакт.НайтиСтроки(ОтборСтрок);
		Для каждого СтрокаФакта Из СтрокиФакта Цикл
			
			СтрокаПоСекциям = ТаблицаФактПоСекциям.Добавить();
			СтрокаПоСекциям.Дата = СтрокаФакта.Дата;
			СтрокаПоСекциям[СтрокаОписания.ИмяСекции] = СтрокаФакта.Сумма;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаФактПоСекциям.Свернуть("Дата", СтрСоединить(МассивСекций, ","));
	ТаблицаФактПоСекциям.Сортировать("Дата");
	
	Возврат ТаблицаФактПоСекциям;
		
КонецФункции

Функция ФактическиеДанныеПоГрафику(ДоговорКонтрагента, ОбъектРасчетов, знач ДатаОкончания = Неопределено, знач ИсключаемыеЭСЗ = Неопределено) Экспорт
		
	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда	
		Результат = Новый ТаблицаЗначений;
		Возврат Результат;	
	КонецЕсли;
	
	Если ДатаОкончания = Неопределено Тогда
		ДатаОкончания = Дата(3999, 1, 1); // все данные
	КонецЕсли;
	
	Если ИсключаемыеЭСЗ = Неопределено Тогда
		ИсключаемыеЭСЗ = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	ВидДоговораУХ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговораУХ");
	ЭтоДоходныйДоговор = УправлениеДоговорамиУХВызовСервераПовтИсп.ЭтоДоходныйДоговор(ВидДоговораУХ);	
	Запрос.УстановитьПараметр("ЭтоДоходныйДоговор", ЭтоДоходныйДоговор);
	Запрос.УстановитьПараметр("ОбъектРасчетов", ОбъектРасчетов);
	Запрос.УстановитьПараметр("ДатаОкончания", КонецДня(ДатаОкончания));
	Запрос.УстановитьПараметр("ИсключаемыеЭСЗ", ИсключаемыеЭСЗ);
	
	Если РаботаСДоговорамиКонтрагентовУХВстраивание.ЭтоДокументПоступления(ОбъектРасчетов) Тогда
		
		// надо учесть зачет аванса
		// 26.05 расход: договор поступление 100 000    отраж1
		// 26.05 приход: договор поступление 10 000     отраж1 
		// 26.05 расход: договор списание 	 10 000     отраж1
		
		// -> заменяю строку 26.05 расход: договор списание 10 000  отраж1
		// на две и сворачиваю
		// 21.06(ОбъектРасчетов.Дата) приход: договор поступ (отраж1.исходдок) 10 000  отраж 1
		// 26.05 приход: договор поступ (отраж1.исходдок) -10 000 отраж 1		
		// +
		// 26.05 приход: договор поступление 10 000     отраж1
		// 26.05 расход: договор поступление 100 000    отраж1
			
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Данные.Дата КАК Дата,
		|	Данные.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
		|	Данные.Валюта КАК Валюта,
		|	Данные.СтатьяБюджета КАК СтатьяБюджета,
		|	ВЫБОР
		|		КОГДА &ЭтоДоходныйДоговор
		|			ТОГДА ВЫБОР
		|					КОГДА Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			КОНЕЦ
		|	КОНЕЦ КАК КолонкаСекции,
		|	СУММА(Данные.Сумма) КАК Сумма
		|ИЗ
		|	(ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиФакт.Период, ДЕНЬ) КАК Дата,
		|		РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
		|		РасчетыСКонтрагентамиФакт.Валюта КАК Валюта,
		|		РасчетыСКонтрагентамиФакт.СтатьяБюджета КАК СтатьяБюджета,
		|		РасчетыСКонтрагентамиФакт.Сумма КАК Сумма,
		|		РасчетыСКонтрагентамиФакт.Регистратор КАК Регистратор,
		|		РасчетыСКонтрагентамиФакт.ВидДвижения КАК ВидДвижения,
		|		РасчетыСКонтрагентамиФакт.ОбъектРасчетов КАК ОбъектРасчетов,
		|		РасчетыСКонтрагентамиФакт.ДоговорКонтрагента КАК ДоговорКонтрагента
		|	ИЗ
		|		РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКонтрагентамиФакт
		|	ГДЕ
		|		РасчетыСКонтрагентамиФакт.ОбъектРасчетов = &ОбъектРасчетов
		|		И РасчетыСКонтрагентамиФакт.Период <= &ДатаОкончания
		|		И НЕ РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности В (&ИсключаемыеЭСЗ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиФакт.ОбъектРасчетов.Дата, ДЕНЬ),
		|		РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности,
		|		РасчетыСКонтрагентамиФакт.Валюта,
		|		РасчетыСКонтрагентамиФакт.СтатьяБюджета,
		|		РасчетыСКонтрагентамиФакт.Сумма,
		|		РасчетыСКонтрагентамиФакт.Регистратор,
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|		ВЫРАЗИТЬ(РасчетыСКонтрагентамиФакт.Регистратор КАК Документ.ОтражениеФактическихДанныхБюджетирования).ИсходныйДокумент,
		|		РасчетыСКонтрагентамиФакт.ДоговорКонтрагента
		|	ИЗ
		|		РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКонтрагентамиФакт
		|	ГДЕ
		|		РасчетыСКонтрагентамиФакт.Период <= &ДатаОкончания
		|		И РасчетыСКонтрагентамиФакт.ОбъектРасчетов <> &ОбъектРасчетов
		|		И НЕ РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности В (&ИсключаемыеЭСЗ)
		|		И ВЫРАЗИТЬ(РасчетыСКонтрагентамиФакт.Регистратор КАК Документ.ОтражениеФактическихДанныхБюджетирования).ИсходныйДокумент = &ОбъектРасчетов
		|		И РасчетыСКонтрагентамиФакт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиФакт.Период, ДЕНЬ),
		|		РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности,
		|		РасчетыСКонтрагентамиФакт.Валюта,
		|		РасчетыСКонтрагентамиФакт.СтатьяБюджета,
		|		-РасчетыСКонтрагентамиФакт.Сумма,
		|		РасчетыСКонтрагентамиФакт.Регистратор,
		|		ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|		ВЫРАЗИТЬ(РасчетыСКонтрагентамиФакт.Регистратор КАК Документ.ОтражениеФактическихДанныхБюджетирования).ИсходныйДокумент,
		|		РасчетыСКонтрагентамиФакт.ДоговорКонтрагента
		|	ИЗ
		|		РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКонтрагентамиФакт
		|	ГДЕ
		|		РасчетыСКонтрагентамиФакт.Период <= &ДатаОкончания
		|		И РасчетыСКонтрагентамиФакт.ОбъектРасчетов <> &ОбъектРасчетов
		|		И НЕ РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности В (&ИсключаемыеЭСЗ)
		|		И ВЫРАЗИТЬ(РасчетыСКонтрагентамиФакт.Регистратор КАК Документ.ОтражениеФактическихДанныхБюджетирования).ИсходныйДокумент = &ОбъектРасчетов
		|		И РасчетыСКонтрагентамиФакт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)) КАК Данные
		|
		|СГРУППИРОВАТЬ ПО
		|	Данные.Дата,
		|	Данные.ЭлементСтруктурыЗадолженности,
		|	Данные.Валюта,
		|	Данные.СтатьяБюджета,
		|	ВЫБОР
		|		КОГДА &ЭтоДоходныйДоговор
		|			ТОГДА ВЫБОР
		|					КОГДА Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА Данные.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(Данные.Сумма) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ЭлементСтруктурыЗадолженности,
		|	КолонкаСекции";
		
	Иначе	
	
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиФакт.Период, ДЕНЬ) КАК Дата,
		|	РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
		|	РасчетыСКонтрагентамиФакт.Валюта КАК Валюта,
		|	РасчетыСКонтрагентамиФакт.СтатьяБюджета КАК СтатьяБюджета,
		|	ВЫБОР
		|		КОГДА &ЭтоДоходныйДоговор
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыСКонтрагентамиФакт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКонтрагентамиФакт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			КОНЕЦ
		|	КОНЕЦ КАК КолонкаСекции,
		|	СУММА(РасчетыСКонтрагентамиФакт.Сумма) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКонтрагентамиФакт
		|ГДЕ
		|	РасчетыСКонтрагентамиФакт.ОбъектРасчетов = &ОбъектРасчетов
		|	И РасчетыСКонтрагентамиФакт.Период <= &ДатаОкончания
		|	И НЕ РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности В (&ИсключаемыеЭСЗ)
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыСКонтрагентамиФакт.ЭлементСтруктурыЗадолженности,
		|	РасчетыСКонтрагентамиФакт.Валюта,
		|	РасчетыСКонтрагентамиФакт.СтатьяБюджета,
		|	РасчетыСКонтрагентамиФакт.ПриходРасход,
		|	НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиФакт.Период, ДЕНЬ),
		|	ВЫБОР
		|		КОГДА &ЭтоДоходныйДоговор
		|			ТОГДА ВЫБОР
		|					КОГДА РасчетыСКонтрагентамиФакт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		ИНАЧЕ ВЫБОР
		|				КОГДА РасчетыСКонтрагентамиФакт.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|					ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			КОНЕЦ
		|	КОНЕЦ
		|
		|ИМЕЮЩИЕ
		|	СУММА(РасчетыСКонтрагентамиФакт.Сумма) <> 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	ЭлементСтруктурыЗадолженности,
		|	КолонкаСекции";
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	

КонецФункции

Функция ПеренестиФактВГрафик(ТаблицаГрафик, ДатаПереноса, ДоговорКонтрагента, ОбъектРасчетов, ОписаниеГрафика, ОперацииГрафика, 
						ИсключаемыеЭСЗ = Неопределено) Экспорт
	
	КолонкиПоиска = "Дата, ЭлементСтруктурыЗадолженности, КолонкаСекции, СтатьяБюджета, Валюта";
	
	НоваяТаблицаГрафик = ТаблицаГрафик.Скопировать();
	НоваяТаблицаГрафик.Колонки.Добавить("ЕстьФакт", Новый ОписаниеТипов("Булево"));
	НоваяТаблицаГрафик.Индексы.Добавить(КолонкиПоиска);
	
	Если ИсключаемыеЭСЗ = Неопределено Тогда
		ИсключаемыеЭСЗ = Новый Массив;
	КонецЕсли;
	
	ТаблицаФакт = ФактическиеДанныеПоГрафику(ДоговорКонтрагента, ОбъектРасчетов, ДатаПереноса, ИсключаемыеЭСЗ);
		
	Отбор = Новый Структура(КолонкиПоиска);
	Для каждого СтрокаФакт Из ТаблицаФакт Цикл
		
		Если СтрокаФакт.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаФакт);
		СтрокиГрафика = НоваяТаблицаГрафик.НайтиСтроки(Отбор);
		ОбщаяСуммаГрафик = ОбщегоНазначенияКлиентСерверУХ.СуммаЭлементовКоллекции(СтрокиГрафика, "Сумма");			
		ОбщаяСуммаФакт = СтрокаФакт.Сумма;
		СуммаФактОстаток = СтрокаФакт.Сумма;	
		
		Если СтрокиГрафика.Количество() > 0 Тогда		
			// корректируем строки графика до суммы факта
			КоэффициентСтроки = ?(ОбщаяСуммаГрафик <> 0, 
				ОбщаяСуммаФакт / ОбщаяСуммаГрафик, 
				Окр(ОбщаяСуммаФакт / СтрокиГрафика.Количество(), 2) );
			
			Для каждого СтрокаГрафика Из СтрокиГрафика Цикл
				Если ОбщаяСуммаГрафик <> 0 Тогда
					СтрокаГрафика.Сумма = Окр(СтрокаГрафика.Сумма * КоэффициентСтроки, 2);
				Иначе
					СтрокаГрафика.Сумма = СтрокаГрафика.Сумма + КоэффициентСтроки;
				КонецЕсли;
				СтрокаГрафика.ЕстьФакт = Истина;
				СуммаФактОстаток = СуммаФактОстаток - СтрокаГрафика.Сумма;
			КонецЦикла;
			
			СтрокиГрафика[0].Сумма = СтрокиГрафика[0].Сумма + СуммаФактОстаток;	
			
		Иначе
			// добавляем строку в график			
			Операция = ОперацияИзОписанияГрафика(ОписаниеГрафика, СтрокаФакт.ЭлементСтруктурыЗадолженности, 
				СтрокаФакт.КолонкаСекции);						
			ОписаниеОперации = ОписаниеОперации(Операция, ОперацииГрафика);
			
			СтрокаГрафика = РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(НоваяТаблицаГрафик, 
				СтрокаФакт.Сумма, СтрокаФакт.Дата, ,ОписаниеОперации);
			СтрокаГрафика.ЕстьФакт = Истина;		
		КонецЕсли;
	КонецЦикла;
	
	СтрокиБезФакта = НоваяТаблицаГрафик.НайтиСтроки(Новый Структура("ЕстьФакт", Ложь));
	Для каждого СтрокаГрафика Из СтрокиБезФакта Цикл
		Если СтрокаГрафика.Дата <= ДатаПереноса 
			И ИсключаемыеЭСЗ.Найти(СтрокаГрафика.ЭлементСтруктурыЗадолженности) = Неопределено Тогда
			
			НоваяТаблицаГрафик.Удалить(СтрокаГрафика);
		КонецЕсли;
	КонецЦикла;
	
	НоваяТаблицаГрафик.Колонки.Удалить("ЕстьФакт");
	НоваяТаблицаГрафик.Сортировать("Дата");
	
	Возврат НоваяТаблицаГрафик;
	
КонецФункции

Функция АктуализироватьГрафикРасчетовПоНакладной(ДатаНакладной, СуммаНакладной, ДокументНакладной, ДоговорЗаказ) Экспорт
		
	ТекущийДокументГрафика = ДокументГрафикаНакладной(ДоговорЗаказ, ДокументНакладной);
	Если НЕ ЗначениеЗаполнено(ТекущийДокументГрафика) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыДокументаГрафика = Неопределено;
	Если НЕ РаботаСДоговорамиКонтрагентовУХВстраивание.ТребуетсяАктуализацияГрафикаРасчетов(ТекущийДокументГрафика, РеквизитыДокументаГрафика) Тогда
		Возврат ТекущийДокументГрафика;
	КонецЕсли;
	
	ОбъектРасчетов = ?(РеквизитыДокументаГрафика.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным,
		ДокументНакладной, ДоговорЗаказ);
		
	ДатаАктуализации = ТекущаяДатаСеанса();
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ТекущийДокументГрафика);
	Если РеквизитыДокументаГрафика.РежимАктуализацииГрафика 
		= Перечисления.РежимыАктуализацииГрафикаПриИзмененииПервичныхДокументов.СоздаватьНовыеВерсии Тогда
		
		ДокументГрафикаОбъект = МенеджерДокумента.СоздатьДокумент();					
		ДокументГрафикаОбъект.Заполнить(ОбъектРасчетов);
		ДокументГрафикаОбъект.Дата = ДатаАктуализации;
	Иначе				
		ДокументГрафикаОбъект = ТекущийДокументГрафика.ПолучитьОбъект();			
	КонецЕсли;
	
	ВидДоговораУХ = ВидДоговораУХОбъекта(ДокументГрафикаОбъект);
	ОписаниеГрафика = МенеджерДокумента.ОписаниеГрафика(ВидДоговораУХ);
	ОперацииГрафика = ОперацииГрафика(ОписаниеГрафика, ДокументГрафикаОбъект, ВидДоговораУХ);
			
	//** считаем, что поступление/реализация только одно и целиком всей суммой
	ДокументГрафикаОбъект.Сумма = СуммаНакладной;
	
	//* Новый план графика с учетом даты поступления	
	ДатаАванса = РасчетГрафиковОперацийУХВстраивание.ДатаАвансаПоНакладной(ТекущийДокументГрафика, ДатаНакладной);	
	ДатаОтсчета = ?(ЗначениеЗаполнено(ДатаАванса), ДатаАванса, ДатаНакладной);
	
	ПараметрыРасчета = Документы.ВерсияСоглашенияКоммерческийДоговор.НовыйПараметрыРасчетаГрафика();
	ПараметрыРасчета.РежимРасчета = "ВесьГрафикОтДатыПервойОперации";
	ПараметрыРасчета.ДатаОтсчета = ДатаОтсчета;
	
	ДокументГрафикаОбъект.ГрафикРасчетов.Очистить();
	Документы.ВерсияСоглашенияКоммерческийДоговор.ВыполнитьРасчетГрафика(ДокументГрафикаОбъект,
		"ОсновнойДолг", ОписаниеГрафика, ОперацииГрафика, ПараметрыРасчета);
	НовыйПланГрафик = ДокументГрафикаОбъект.ГрафикРасчетов.Выгрузить();
	
	//* Факт графика
	ДокументГрафикаОбъект.ГрафикРасчетов.Очистить();
	ПустойГрафикРасчетов = ДокументГрафикаОбъект.ГрафикРасчетов.Выгрузить();
	ФактГрафика = РаботаСДоговорамиКонтрагентовУХ.ПеренестиФактВГрафик(ПустойГрафикРасчетов, ДатаАктуализации, 
		ДокументГрафикаОбъект.ДоговорКонтрагента, ОбъектРасчетов, ОписаниеГрафика, ОперацииГрафика);	
	
	//* новый график с учетом плана и факта
	НовыйГрафикРасчетов = РасчетГрафиковОперацийУХ.РаспределитьПланНаФактГрафикаНакладной(НовыйПланГрафик, ФактГрафика, 
		ДатаНакладной, ДатаАктуализации);

	ДокументГрафикаОбъект.ГрафикРасчетов.Загрузить(НовыйГрафикРасчетов);		
	
	Если РеквизитыДокументаГрафика.РежимАктуализацииГрафика 
		= Перечисления.РежимыАктуализацииГрафикаПриИзмененииПервичныхДокументов.СоздаватьНовыеВерсии Тогда
		
		ГрафикиВерсийСовпадают = РасчетГрафиковОперацийУХ.ГрафикиРасчетаСовпадают(ДокументГрафикаОбъект.ГрафикРасчетов, ТекущийДокументГрафика.ГрафикРасчетов);
		Если ГрафикиВерсийСовпадают Тогда
			Возврат ТекущийДокументГрафика; // оставляем текущую версию
		Иначе	
			ДокументГрафикаОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	Иначе
		ДокументГрафикаОбъект.Записать(РежимЗаписиДокумента.Проведение);
	КонецЕсли;
	
	Возврат ДокументГрафикаОбъект.Ссылка;
						
КонецФункции		

Функция ПредметГрафикаРасчетов(Объект) Экспорт
	 Возврат ?(ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.ГрафикРасчетовСПокупателемПоставщиком"),
					Объект.ОбъектРасчетов,
					Объект.ДоговорКонтрагента);
КонецФункции
				
Функция ВидДоговораУХОбъекта(Объект) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ВидДоговораУХ") Тогда
		Возврат Объект.ВидДоговораУХ;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ДоговорКонтрагента") Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДоговорКонтрагента, "ВидДоговораУХ");
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ВедетсяГрафикРасчетов(ВидДоговораУХ) Экспорт
	ГруппаОперацийГрафика = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДоговораУХ, "ГруппаОперацийГрафика");
	Возврат ЗначениеЗаполнено(ГруппаОперацийГрафика);
КонецФункции

Функция СуммаОбъекта(Объект) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Сумма", Объект.Метаданные()) Тогда
		Возврат Объект["Сумма"];
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаДокумента", Объект.Метаданные()) Тогда
		Возврат Объект["СуммаДокумента"];
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

Функция ВерсияСоглашенияОбъекта(Объект) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВерсияСоглашения", Объект.Метаданные()) Тогда
		ВерсияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ВерсияСоглашения");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("ДоговорКонтрагента", Объект.Метаданные()) Тогда 
		ВерсияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "ДоговорКонтрагента.ВерсияСоглашения");
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Договор", Объект.Метаданные()) Тогда
		ВерсияСоглашения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект, "Договор.ВерсияСоглашения");	
	КонецЕсли;
	
	Возврат ВерсияСоглашения;
	
КонецФункции

Функция ДокументГрафикаНакладной(ДоговорЗаказ, ДокументНакладной) Экспорт
	
	ВерсияСоглашения = ВерсияСоглашенияОбъекта(ДоговорЗаказ);
	ПорядокРасчетов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСоглашения, "ПорядокРасчетов");
	
	Если ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоНакладным Тогда
		Возврат ДействующийГрафик(ДокументНакладной);
	ИначеЕсли ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
		Возврат ДействующийГрафик(ДоговорЗаказ);
	Иначе
		Возврат ВерсияСоглашения;
	КонецЕсли;
							
КонецФункции

Функция ПроизводственныйКалендарьОбъекта(Объект) Экспорт
	
	ПроизводственныйКалендарь = ПолучитьПроизводственныеКалендари(Объект);
	
	Если НЕ ЗначениеЗаполнено(ПроизводственныйКалендарь) Тогда
		ПроизводственныйКалендарь = Константы.ПроизводственныйКалендарьПоУмолчанию.Получить();
	КонецЕсли;
	
	Возврат ПроизводственныйКалендарь;

КонецФункции


#Область ПроведениеВерсийСоглашений

// Процедура выполняет формирование таблицы для движений по регистру накопления ЛимитыПоБюджетам
Процедура ПодготовитьТаблицуЛимитовПоБюджетам(Запрос, ТаблицыДляДвижений) Экспорт
	
	ТаблицаЛимитов = КонтрольЛимитовУХ.ПолучитьТаблицуЛимитов(Запрос, Запрос.Параметры.Дата);
	
	Для Каждого СтрокаСторно Из ТаблицыДляДвижений.ТаблицаВТ_ТаблицаСторноЛимитыПоБюджетам Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаЛимитов.Добавить(), СтрокаСторно);
	КонецЦикла;
	
	ТаблицыДляДвижений.Вставить("ТаблицаЛимитыПоБюджетам", ТаблицаЛимитов);
	
КонецПроцедуры

Функция ДобавитьТекстЗапросаРасчетыСКонтрагентамиГрафики(ТекстыЗапроса, ИмяТаблицыДокумента) Экспорт
	
	ИмяРегистра = "РасчетыСКонтрагентамиГрафики";
	ТекстЗапроса = ТекстЗапросаРасчетыСКонтрагентамиГрафики(ИмяТаблицыДокумента);
		
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаРасчетыСКонтрагентамиГрафики(ИмяТаблицыДокумента) Экспорт
	#Область УХВстраивание

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА График.ОперацияГрафика.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	&Ссылка КАК ВерсияГрафика,
	|	&ДоговорКонтрагента КАК ПредметГрафика,
	|	График.Дата КАК Период,
	|	График.СтатьяБюджета КАК СтатьяБюджета,
	|	График.Аналитика1 КАК Аналитика1,
	|	График.Аналитика2 КАК Аналитика2,
	|	График.Аналитика3 КАК Аналитика3,
	|	График.Аналитика4 КАК Аналитика4,
	|	График.Аналитика5 КАК Аналитика5,
	|	График.Аналитика6 КАК Аналитика6,
	|	График.ВидБюджета КАК ВидБюджета,
	|	(&ДоговорКонтрагента).ВидДоговораУХ КАК ВидДоговораУХ,
	|	График.ЦФО КАК ЦФО,
	|	График.Проект КАК Проект,
	|	График.НаправлениеДвижения КАК ПриходРасход,
	|	График.Сумма КАК Сумма,
	|	График.Валюта КАК Валюта,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	График.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	График.ОперацияГрафика КАК Операция,
	|	График.СчетОрганизации КАК СчетОрганизации,
	|	График.СчетКонтрагента КАК СчетКонтрагента
	|ИЗ
	|	_ИмяТаблицыГрафика_ КАК График
	|ГДЕ
	|	График.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ИмяТаблицыГрафика_", ИмяТаблицыДокумента + ".ГрафикРасчетов");
	
	#КонецОбласти

	Возврат ТекстЗапроса;
	
КонецФункции	

Процедура ДобавитьТекстЗапросаОперативныйПланПоБюджетам(ТекстыЗапроса, ИмяТаблицаДокумента) Экспорт
		
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_ТаблицаДвиженияОперации", ТекстыЗапроса) Тогда
		ДобавитьТекстЗапросаВТ_ТаблицаДвиженияОперации(ТекстыЗапроса, ИмяТаблицаДокумента);
	КонецЕсли;
	
	ИмяРегистра = "ОперативныйПланПоБюджетам";
	
	ТекстЗапроса1 = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ОрганизацияЗаполнена,
	|	ЛОЖЬ КАК КонтрагентЗаполнен,
	|	ЛОЖЬ КАК ДоговорКонтрагентаЗаполнен,
	|	1 КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_МатрицаЗаполненностиДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА,
	|	6";
	
	ТекстЗапроса2 = 
	"ВЫБРАТЬ
	|	6 КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_МатрицаОтбораПланов
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки = 6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки >= 5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|ГДЕ
	|	(&ЗаполненностьДоговораЗаявки = 6
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки >= 3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|ГДЕ
	|	(&ЗаполненностьДоговораЗаявки = 6
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 4
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1";
	ТекстЗапроса3 = 
	"ВЫБРАТЬ
	|	ЗапросОбороты.Предназначение КАК Предназначение,
	|	ЗапросОбороты.ПериодОтчета КАК ПериодОтчета,
	|	ЗапросОбороты.ЦФО КАК ЦФО,
	|	ЗапросОбороты.Проект КАК Проект,
	|	ЗапросОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ЗапросОбороты.Аналитика1 КАК Аналитика1,
	|	ЗапросОбороты.Аналитика2 КАК Аналитика2,
	|	ЗапросОбороты.Аналитика3 КАК Аналитика3,
	|	ЗапросОбороты.Аналитика4 КАК Аналитика4,
	|	ЗапросОбороты.Аналитика5 КАК Аналитика5,
	|	ЗапросОбороты.Аналитика6 КАК Аналитика6,
	|	ЗапросОбороты.ПриходРасход КАК ПриходРасход,
	|	ЗапросОбороты.Валюта КАК Валюта,
	|	СУММА(ЗапросОбороты.ЗарезервированоОборот) КАК ЗарезервированоОборот,
	|	ЗапросОбороты.Организация КАК Организация,
	|	ЗапросОбороты.Контрагент КАК Контрагент,
	|	ЗапросОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОрганизацияЗаполнена,
	|	ВЫБОР
	|		КОГДА (ЗапросОбороты.Контрагент = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КонтрагентЗаполнен,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДоговорЗаполнен
	|ПОМЕСТИТЬ ВТ_ОстаткиПоДокументуПланирования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныйПланПоБюджетамОбороты.Предназначение КАК Предназначение,
	|		ОперативныйПланПоБюджетамОбороты.ПериодОтчета КАК ПериодОтчета,
	|		ОперативныйПланПоБюджетамОбороты.ЦФО КАК ЦФО,
	|		ОперативныйПланПоБюджетамОбороты.Проект КАК Проект,
	|		ОперативныйПланПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
	|		ОперативныйПланПоБюджетамОбороты.ПриходРасход КАК ПриходРасход,
	|		ОперативныйПланПоБюджетамОбороты.Валюта КАК Валюта,
	|		ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|		ОперативныйПланПоБюджетамОбороты.Организация КАК Организация,
	|		ОперативныйПланПоБюджетамОбороты.Контрагент КАК Контрагент,
	|		ОперативныйПланПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(, , , ДокументПланирования = &ДокументПланирования) КАК ОперативныйПланПоБюджетамОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперативныйПланПоБюджетам.Предназначение,
	|		ОперативныйПланПоБюджетам.ПериодОтчета,
	|		ОперативныйПланПоБюджетам.ЦФО,
	|		ОперативныйПланПоБюджетам.Проект,
	|		ОперативныйПланПоБюджетам.СтатьяБюджета,
	|		ОперативныйПланПоБюджетам.Аналитика1,
	|		ОперативныйПланПоБюджетам.Аналитика2,
	|		ОперативныйПланПоБюджетам.Аналитика3,
	|		ОперативныйПланПоБюджетам.Аналитика4,
	|		ОперативныйПланПоБюджетам.Аналитика5,
	|		ОперативныйПланПоБюджетам.Аналитика6,
	|		ОперативныйПланПоБюджетам.ПриходРасход,
	|		ОперативныйПланПоБюджетам.Валюта,
	|		-ОперативныйПланПоБюджетам.Зарезервировано,
	|		ОперативныйПланПоБюджетам.Организация,
	|		ОперативныйПланПоБюджетам.Контрагент,
	|		ОперативныйПланПоБюджетам.ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления.ОперативныйПланПоБюджетам КАК ОперативныйПланПоБюджетам
	|	ГДЕ
	|		ОперативныйПланПоБюджетам.Регистратор = &Ссылка
	|		И ОперативныйПланПоБюджетам.ДокументПланирования = &ДокументПланирования) КАК ЗапросОбороты
	|ГДЕ
	|	&ДокументПланирования <> ЗНАЧЕНИЕ(Документ.ОперативныйПлан.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросОбороты.Валюта,
	|	ЗапросОбороты.Контрагент,
	|	ЗапросОбороты.ПриходРасход,
	|	ЗапросОбороты.Организация,
	|	ЗапросОбороты.ПериодОтчета,
	|	ЗапросОбороты.СтатьяБюджета,
	|	ЗапросОбороты.Предназначение,
	|	ЗапросОбороты.ЦФО,
	|	ЗапросОбороты.Проект,
	|	ЗапросОбороты.Аналитика1,
	|	ЗапросОбороты.Аналитика2,
	|	ЗапросОбороты.Аналитика3,
	|	ЗапросОбороты.Аналитика4,
	|	ЗапросОбороты.Аналитика5,
	|	ЗапросОбороты.Аналитика6,
	|	ЗапросОбороты.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА (ЗапросОбороты.Контрагент = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	ТекстЗапроса4 = 
	"ВЫБРАТЬ
	|	ВТ_ОстаткиПоДокументуПланирования.Предназначение КАК Предназначение,
	|	ВТ_ОстаткиПоДокументуПланирования.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ОстаткиПоДокументуПланирования.ЦФО КАК ЦФО,
	|	ВТ_ОстаткиПоДокументуПланирования.Проект КАК Проект,
	|	ВТ_ОстаткиПоДокументуПланирования.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика1 КАК Аналитика1,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика2 КАК Аналитика2,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика3 КАК Аналитика3,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика4 КАК Аналитика4,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика5 КАК Аналитика5,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика6 КАК Аналитика6,
	|	ВТ_ОстаткиПоДокументуПланирования.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОстаткиПоДокументуПланирования.Валюта КАК Валюта,
	|	ВТ_ОстаткиПоДокументуПланирования.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_ОстаткиПоДокументуПланирования.Организация КАК Организация,
	|	ВТ_ОстаткиПоДокументуПланирования.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиПоДокументуПланирования.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена КАК ОрганизацияЗаполнена,
	|	ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен КАК КонтрагентЗаполнен,
	|	ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен КАК ДоговорЗаполнен,
	|	ВТ_МатрицаЗаполненностиДоговора.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_ОстаткиЗапланировано
	|ИЗ
	|	ВТ_МатрицаЗаполненностиДоговора КАК ВТ_МатрицаЗаполненностиДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоДокументуПланирования КАК ВТ_ОстаткиПоДокументуПланирования
	|		ПО ВТ_МатрицаЗаполненностиДоговора.ОрганизацияЗаполнена = ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена
	|			И ВТ_МатрицаЗаполненностиДоговора.КонтрагентЗаполнен = ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен
	|			И ВТ_МатрицаЗаполненностиДоговора.ДоговорКонтрагентаЗаполнен = ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен
	|ГДЕ
	|	(ВТ_ОстаткиПоДокументуПланирования.Организация = &Организация
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена = ЛОЖЬ)
	|	И (ВТ_ОстаткиПоДокументуПланирования.Контрагент = &Контрагент
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен = ЛОЖЬ)
	|	И (ВТ_ОстаткиПоДокументуПланирования.ДоговорКонтрагента = &ДоговорКонтрагента
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен = ЛОЖЬ)";
	
	ТекстЗапроса5 = 
	"ВЫБРАТЬ
	|	ВТ_ОстаткиЗапланировано.Предназначение КАК Предназначение,
	|	ВТ_ОстаткиЗапланировано.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ОстаткиЗапланировано.ЦФО КАК ЦФО,
	|	ВТ_ОстаткиЗапланировано.Проект КАК Проект,
	|	ВТ_ОстаткиЗапланировано.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ОстаткиЗапланировано.Аналитика1 КАК Аналитика1,
	|	ВТ_ОстаткиЗапланировано.Аналитика2 КАК Аналитика2,
	|	ВТ_ОстаткиЗапланировано.Аналитика3 КАК Аналитика3,
	|	ВТ_ОстаткиЗапланировано.Аналитика4 КАК Аналитика4,
	|	ВТ_ОстаткиЗапланировано.Аналитика5 КАК Аналитика5,
	|	ВТ_ОстаткиЗапланировано.Аналитика6 КАК Аналитика6,
	|	ВТ_ОстаткиЗапланировано.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОстаткиЗапланировано.Валюта КАК Валюта,
	|	ВТ_ОстаткиЗапланировано.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_ОстаткиЗапланировано.Организация КАК Организация,
	|	ВТ_ОстаткиЗапланировано.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиЗапланировано.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОстаткиЗапланировано.ОрганизацияЗаполнена КАК ОрганизацияЗаполнена,
	|	ВТ_ОстаткиЗапланировано.КонтрагентЗаполнен КАК КонтрагентЗаполнен,
	|	ВТ_ОстаткиЗапланировано.ДоговорЗаполнен КАК ДоговорЗаполнен,
	|	ВТ_ОстаткиЗапланировано.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_Запланировано
	|ИЗ
	|	ВТ_МатрицаОтбораПланов КАК ВТ_МатрицаОтбораПланов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиЗапланировано КАК ВТ_ОстаткиЗапланировано
	|		ПО ВТ_МатрицаОтбораПланов.ТипДанных = ВТ_ОстаткиЗапланировано.ТипДанных";
	
	
	ТекстЗапроса6 = 
	"ВЫБРАТЬ
	|	ВТ_Запланировано.Предназначение КАК Предназначение,
	|	ВТ_Запланировано.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_Запланировано.ЦФО КАК ЦФО,
	|	ВТ_Запланировано.Проект КАК Проект,
	|	ВТ_Запланировано.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_Запланировано.Аналитика1 КАК Аналитика1,
	|	ВТ_Запланировано.Аналитика2 КАК Аналитика2,
	|	ВТ_Запланировано.Аналитика3 КАК Аналитика3,
	|	ВТ_Запланировано.Аналитика4 КАК Аналитика4,
	|	ВТ_Запланировано.Аналитика5 КАК Аналитика5,
	|	ВТ_Запланировано.Аналитика6 КАК Аналитика6,
	|	ВТ_Запланировано.ПриходРасход КАК ПриходРасход,
	|	ВТ_Запланировано.Валюта КАК Валюта,
	|	ВТ_Запланировано.Организация КАК Организация,
	|	ВТ_Запланировано.Контрагент КАК Контрагент,
	|	ВТ_Запланировано.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Запланировано.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_Запланировано.ТипДанных КАК ТипДанных,
	|	СУММА(ВТ_Запланировано1.ЗарезервированоОборот) КАК ЗарезервированоОборот1
	|ПОМЕСТИТЬ ВТ_ЗапланированоСИтогами
	|ИЗ
	|	ВТ_Запланировано КАК ВТ_Запланировано
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запланировано КАК ВТ_Запланировано1
	|		ПО ВТ_Запланировано.Предназначение = ВТ_Запланировано1.Предназначение
	|			И ВТ_Запланировано.ПериодОтчета = ВТ_Запланировано1.ПериодОтчета
	|			И ВТ_Запланировано.ЦФО = ВТ_Запланировано1.ЦФО
	|			И ВТ_Запланировано.Проект = ВТ_Запланировано1.Проект
	|			И ВТ_Запланировано.СтатьяБюджета = ВТ_Запланировано1.СтатьяБюджета
	|			И ВТ_Запланировано.Аналитика1 = ВТ_Запланировано1.Аналитика1
	|			И ВТ_Запланировано.Аналитика2 = ВТ_Запланировано1.Аналитика2
	|			И ВТ_Запланировано.Аналитика3 = ВТ_Запланировано1.Аналитика3
	|			И ВТ_Запланировано.Аналитика4 = ВТ_Запланировано1.Аналитика4
	|			И ВТ_Запланировано.Аналитика5 = ВТ_Запланировано1.Аналитика5
	|			И ВТ_Запланировано.Аналитика6 = ВТ_Запланировано1.Аналитика6
	|			И ВТ_Запланировано.ПриходРасход = ВТ_Запланировано1.ПриходРасход
	|			И ВТ_Запланировано.Валюта = ВТ_Запланировано1.Валюта
	|			И ВТ_Запланировано.ТипДанных <= ВТ_Запланировано1.ТипДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Запланировано.ПриходРасход,
	|	ВТ_Запланировано.Валюта,
	|	ВТ_Запланировано.СтатьяБюджета,
	|	ВТ_Запланировано.ЦФО,
	|	ВТ_Запланировано.Проект,
	|	ВТ_Запланировано.Предназначение,
	|	ВТ_Запланировано.Аналитика1,
	|	ВТ_Запланировано.Аналитика2,
	|	ВТ_Запланировано.Аналитика3,
	|	ВТ_Запланировано.Аналитика4,
	|	ВТ_Запланировано.Аналитика5,
	|	ВТ_Запланировано.Аналитика6,
	|	ВТ_Запланировано.ПериодОтчета,
	|	ВТ_Запланировано.ЗарезервированоОборот,
	|	ВТ_Запланировано.Организация,
	|	ВТ_Запланировано.Контрагент,
	|	ВТ_Запланировано.ДоговорКонтрагента,
	|	ВТ_Запланировано.ТипДанных";
	
	//
	ТекстЗапроса7 = 
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Ссылка КАК Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.Предназначение КАК Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЖелаемаяДатаОплаты КАК ЖелаемаяДатаОплаты,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4 КАК Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5 КАК Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6 КАК Аналитика6,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период,
	|	ВТ_ТаблицаДвиженияОперации.Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход,
	|	&ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ЖелаемаяДатаОплаты,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6,
	|	ВТ_ЗапланированоСИтогами.Организация,
	|	ВТ_ЗапланированоСИтогами.Контрагент,
	|	ВТ_ЗапланированоСИтогами.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 > ВТ_ТаблицаДвиженияОперации.Заявлено
	|			ТОГДА ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 - ВТ_ЗапланированоСИтогами.ЗарезервированоОборот - ВТ_ТаблицаДвиженияОперации.Заявлено
	|		ИНАЧЕ -ВТ_ЗапланированоСИтогами.ЗарезервированоОборот
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированоСИтогами КАК ВТ_ЗапланированоСИтогами
	|		ПО ВТ_ТаблицаДвиженияОперации.Предназначение = ВТ_ЗапланированоСИтогами.Предназначение
	|			И ВТ_ТаблицаДвиженияОперации.ПериодОтчета = ВТ_ЗапланированоСИтогами.ПериодОтчета
	|			И ВТ_ТаблицаДвиженияОперации.ЦФО = ВТ_ЗапланированоСИтогами.ЦФО
	|			И ВТ_ТаблицаДвиженияОперации.Проект = ВТ_ЗапланированоСИтогами.Проект
	|			И ВТ_ТаблицаДвиженияОперации.СтатьяБюджета = ВТ_ЗапланированоСИтогами.СтатьяБюджета
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика1 = ВТ_ЗапланированоСИтогами.Аналитика1
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика2 = ВТ_ЗапланированоСИтогами.Аналитика2
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика3 = ВТ_ЗапланированоСИтогами.Аналитика3
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика4 = ВТ_ЗапланированоСИтогами.Аналитика4
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика5 = ВТ_ЗапланированоСИтогами.Аналитика5
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика6 = ВТ_ЗапланированоСИтогами.Аналитика6
	|			И ВТ_ТаблицаДвиженияОперации.ПриходРасход = ВТ_ЗапланированоСИтогами.ПриходРасход
	|			И ВТ_ТаблицаДвиженияОперации.Валюта = ВТ_ЗапланированоСИтогами.Валюта
	|ГДЕ
	|	ВТ_ТаблицаДвиженияОперации.Заявлено > ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 - ВТ_ЗапланированоСИтогами.ЗарезервированоОборот
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_Сторно.Ссылка,
	|	ВТ_Сторно.Период,
	|	ВТ_Сторно.Предназначение,
	|	ВТ_Сторно.ПериодОтчета,
	|	ВТ_Сторно.Валюта,
	|	ВТ_Сторно.ЦФО,
	|	ВТ_Сторно.Проект,
	|	ВТ_Сторно.ПриходРасход,
	|	ВТ_Сторно.ДокументПланирования,
	|	ВТ_Сторно.ЖелаемаяДатаОплаты,
	|	ВТ_Сторно.СтатьяБюджета,
	|	ВТ_Сторно.Аналитика1,
	|	ВТ_Сторно.Аналитика2,
	|	ВТ_Сторно.Аналитика3,
	|	ВТ_Сторно.Аналитика4,
	|	ВТ_Сторно.Аналитика5,
	|	ВТ_Сторно.Аналитика6,
	|	ВТ_Сторно.Организация,
	|	ВТ_Сторно.Контрагент,
	|	ВТ_Сторно.ДоговорКонтрагента,
	|	ВТ_Сторно.Зарезервировано,
	|	ВТ_Сторно.Заявлено
	|ИЗ
	|	ВТ_ТаблицаСторноОперативныйПланПоБюджетам КАК ВТ_Сторно";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса1, "ВТ_МатрицаЗаполненностиДоговора");
	ТекстыЗапроса.Добавить(ТекстЗапроса2, "ВТ_МатрицаОтбораПланов");
	ТекстыЗапроса.Добавить(ТекстЗапроса3, "ВТ_ОстаткиПоДокументуПланирования");
	ТекстыЗапроса.Добавить(ТекстЗапроса4, "ВТ_ОстаткиЗапланировано");
	ТекстыЗапроса.Добавить(ТекстЗапроса5, "ВТ_Запланировано");
	ТекстыЗапроса.Добавить(ТекстЗапроса6, "ВТ_ЗапланированоСИтогами");
	ТекстыЗапроса.Добавить(ТекстЗапроса7, ИмяРегистра);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТ_ТаблицаСторноОперативныйПланПоБюджетам(ТекстыЗапроса, ИмяТаблицаДокумента)
	
	ИмяВременнойТаблицы = "ВТ_ТаблицаСторноОперативныйПланПоБюджетам";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	ОперативныйПланПоБюджетамОбороты.Предназначение КАК Предназначение,
	|	ОперативныйПланПоБюджетамОбороты.ПериодОтчета КАК ПериодОтчета,
	|	ОперативныйПланПоБюджетамОбороты.Организация КАК Организация,
	|	ОперативныйПланПоБюджетамОбороты.Валюта КАК Валюта,
	|	ОперативныйПланПоБюджетамОбороты.ЦФО КАК ЦФО,
	|	ОперативныйПланПоБюджетамОбороты.Проект КАК Проект,
	|	ОперативныйПланПоБюджетамОбороты.Контрагент КАК Контрагент,
	|	ОперативныйПланПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ОперативныйПланПоБюджетамОбороты.ПриходРасход КАК ПриходРасход,
	|	ОперативныйПланПоБюджетамОбороты.ДокументПланирования КАК ДокументПланирования,
	|	NULL КАК ЖелаемаяДатаОплаты,
	|	ОперативныйПланПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
	|	ОперативныйПланПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
	|	-ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот КАК Зарезервировано,
	|	-ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот КАК Заявлено
	|ПОМЕСТИТЬ ВТ_ТаблицаСторноОперативныйПланПоБюджетам
	|ИЗ
	|	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(
	|			,
	|			,
	|			Авто,
	|			ДокументПланирования В
	|				(ВЫБРАТЬ
	|					ВерсииРасчетов.Регистратор КАК Регистратор
	|				ИЗ
	|					РегистрСведений.ВерсииРасчетов КАК ВерсииРасчетов
	|				ГДЕ
	|					ВерсииРасчетов.ПредметГрафика = &ДоговорКонтрагента
	|					И ВерсииРасчетов.Регистратор <> &Ссылка)) КАК ОперативныйПланПоБюджетамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОперативныйПланПоБюджетам.Регистратор,
	|	&Дата,
	|	ОперативныйПланПоБюджетам.Предназначение,
	|	ОперативныйПланПоБюджетам.ПериодОтчета,
	|	ОперативныйПланПоБюджетам.Организация,
	|	ОперативныйПланПоБюджетам.Валюта,
	|	ОперативныйПланПоБюджетам.ЦФО,
	|	ОперативныйПланПоБюджетам.Проект,
	|	ОперативныйПланПоБюджетам.Контрагент,
	|	ОперативныйПланПоБюджетам.ДоговорКонтрагента,
	|	ОперативныйПланПоБюджетам.ПриходРасход,
	|	ОперативныйПланПоБюджетам.ДокументПланирования,
	|	NULL,
	|	ОперативныйПланПоБюджетам.СтатьяБюджета,
	|	ОперативныйПланПоБюджетам.Аналитика1,
	|	ОперативныйПланПоБюджетам.Аналитика2,
	|	ОперативныйПланПоБюджетам.Аналитика3,
	|	ОперативныйПланПоБюджетам.Аналитика4,
	|	ОперативныйПланПоБюджетам.Аналитика5,
	|	ОперативныйПланПоБюджетам.Аналитика6,
	|	ОперативныйПланПоБюджетам.Зарезервировано,
	|	ОперативныйПланПоБюджетам.Заявлено
	|ИЗ
	|	РегистрНакопления.ОперативныйПланПоБюджетам КАК ОперативныйПланПоБюджетам
	|ГДЕ
	|	ОперативныйПланПоБюджетам.Регистратор = &Ссылка
	|	И ОперативныйПланПоБюджетам.ДокументПланирования В
	|			(ВЫБРАТЬ
	|				ВерсииРасчетов.Регистратор КАК Регистратор
	|			ИЗ
	|				РегистрСведений.ВерсииРасчетов КАК ВерсииРасчетов
	|			ГДЕ
	|				ВерсииРасчетов.ПредметГрафика = &ДоговорКонтрагента
	|				И ВерсииРасчетов.Регистратор <> &Ссылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТ_ТаблицаСторноЛимитыПоБюджетам(ТекстыЗапроса, ИмяТаблицаДокумента)
	
	ИмяВременнойТаблицы = "ВТ_ТаблицаСторноЛимитыПоБюджетам";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Дата КАК Период,
	|	ЛимитыПоБюджетамОбороты.Предназначение КАК Предназначение,
	|	ЛимитыПоБюджетамОбороты.ДокументРезервирования КАК ДокументРезервирования,
	|	ЛимитыПоБюджетамОбороты.ПериодЛимитирования КАК ПериодЛимитирования,
	|	ЛимитыПоБюджетамОбороты.ЦФО КАК ЦФО,
	|	ЛимитыПоБюджетамОбороты.Проект КАК Проект,
	|	ЛимитыПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ЛимитыПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|	ЛимитыПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|	ЛимитыПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|	ЛимитыПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
	|	ЛимитыПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
	|	ЛимитыПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
	|	ЛимитыПоБюджетамОбороты.Валюта КАК Валюта,
	|	ЛимитыПоБюджетамОбороты.ДокументПланирования КАК ДокументПланирования,
	|	0 КАК Лимит,
	|	0 КАК Корректировка,
	|	-ЛимитыПоБюджетамОбороты.ЗарезервированоОборот КАК Зарезервировано,
	|	-ЛимитыПоБюджетамОбороты.ЗаявленоОборот КАК Заявлено,
	|	0 КАК Исполнено,
	|	0 КАК КОбеспечению,
	|	-ЛимитыПоБюджетамОбороты.ДефицитРезерваОборот КАК ДефицитРезерва
	|ИЗ
	|	РегистрНакопления.ЛимитыПоБюджетам.Обороты(
	|			,
	|			,
	|			,
	|			ДокументПланирования В
	|				(ВЫБРАТЬ
	|					ВерсииРасчетов.Регистратор КАК Регистратор
	|				ИЗ
	|					РегистрСведений.ВерсииРасчетов КАК ВерсииРасчетов
	|				ГДЕ
	|					ВерсииРасчетов.ПредметГрафика = &ДоговорКонтрагента
	|					И ВерсииРасчетов.Регистратор <> &Ссылка)) КАК ЛимитыПоБюджетамОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Дата,
	|	ЛимитыПоБюджетам.Предназначение,
	|	ЛимитыПоБюджетам.ДокументРезервирования,
	|	ЛимитыПоБюджетам.ПериодЛимитирования,
	|	ЛимитыПоБюджетам.ЦФО,
	|	ЛимитыПоБюджетам.Проект,
	|	ЛимитыПоБюджетам.СтатьяБюджета,
	|	ЛимитыПоБюджетам.Аналитика1,
	|	ЛимитыПоБюджетам.Аналитика2,
	|	ЛимитыПоБюджетам.Аналитика3,
	|	ЛимитыПоБюджетам.Аналитика4,
	|	ЛимитыПоБюджетам.Аналитика5,
	|	ЛимитыПоБюджетам.Аналитика6,
	|	ЛимитыПоБюджетам.Валюта,
	|	ЛимитыПоБюджетам.ДокументПланирования,
	|	0,
	|	0,
	|	ЛимитыПоБюджетам.Зарезервировано,
	|	ЛимитыПоБюджетам.Заявлено,
	|	0,
	|	0,
	|	ЛимитыПоБюджетам.ДефицитРезерва
	|ИЗ
	|	РегистрНакопления.ЛимитыПоБюджетам КАК ЛимитыПоБюджетам
	|ГДЕ
	|	ЛимитыПоБюджетам.Регистратор = &Ссылка
	|	И ЛимитыПоБюджетам.ДокументПланирования В
	|				(ВЫБРАТЬ
	|					ВерсииРасчетов.Регистратор КАК Регистратор
	|				ИЗ
	|					РегистрСведений.ВерсииРасчетов КАК ВерсииРасчетов
	|				ГДЕ
	|					ВерсииРасчетов.ПредметГрафика = &ДоговорКонтрагента
	|					И ВерсииРасчетов.Регистратор <> &Ссылка)";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВТ_ТаблицаДвиженияОперации(ТекстыЗапроса, ИмяТаблицаДокумента)
	
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_ТаблицаСторноОперативныйПланПоБюджетам", ТекстыЗапроса) Тогда
		ДобавитьТекстЗапросаВТ_ТаблицаСторноОперативныйПланПоБюджетам(ТекстыЗапроса, ИмяТаблицаДокумента);
	КонецЕсли;
	
	Если НЕ ПроведениеСерверУХ.ЕстьТаблицаЗапроса("ВТ_ТаблицаСторноЛимитыПоБюджетам", ТекстыЗапроса) Тогда
		ДобавитьТекстЗапросаВТ_ТаблицаСторноЛимитыПоБюджетам(ТекстыЗапроса, ИмяТаблицаДокумента);
	КонецЕсли;
	
	ИмяВременнойТаблицы = "ВТ_ТаблицаДвиженияОперации";
	
	// вытаскиваем данные из графика.
	ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ГрафикРасчетов.Ссылка КАК Ссылка,
	|	&Дата КАК Период,
	|	ГрафикРасчетов.ВидБюджета.Предназначение КАК Предназначение,
	|	Периоды.Ссылка КАК ПериодОтчета,
	|	&Организация КАК Организация,
	|	ГрафикРасчетов.Валюта КАК Валюта,
	|	ГрафикРасчетов.ЦФО КАК ЦФО,
	|	ГрафикРасчетов.Проект КАК Проект,
	|	&Контрагент КАК Контрагент,
	|	&ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ГрафикРасчетов.НаправлениеДвижения КАК ПриходРасход,
	|	&Ссылка КАК ДокументПланирования,
	|	ВЫБОР
	|		КОГДА ГрафикРасчетов.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|			ТОГДА ГрафикРасчетов.Ссылка.ИсточникЛимитовБДДС
	|		ИНАЧЕ ГрафикРасчетов.Ссылка.ИсточникЛимитовИсполнение
	|	КОНЕЦ КАК ДокументРезервирования,
	|	ГрафикРасчетов.Дата КАК ЖелаемаяДатаОплаты,
	|	ГрафикРасчетов.СтатьяБюджета КАК СтатьяБюджета,
	|	ГрафикРасчетов.Аналитика1 КАК Аналитика1,
	|	ГрафикРасчетов.Аналитика2 КАК Аналитика2,
	|	ГрафикРасчетов.Аналитика3 КАК Аналитика3,
	|	ГрафикРасчетов.Аналитика4 КАК Аналитика4,
	|	ГрафикРасчетов.Аналитика5 КАК Аналитика5,
	|	ГрафикРасчетов.Аналитика6 КАК Аналитика6,
	|	СУММА(ГрафикРасчетов.Сумма) КАК Заявлено
	|ПОМЕСТИТЬ ВТ_ТаблицаДвиженияОперации
	|ИЗ
	|	_ИмяТаблицыГрафика_ КАК ГрафикРасчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыОперативногоПланирования КАК ПараметрыОперативногоПланирования
	|		ПО (ПараметрыОперативногоПланирования.ВидБюджета = ГрафикРасчетов.ВидБюджета)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО (ПараметрыОперативногоПланирования.ПериодичностьОперативногоПланирования = Периоды.Периодичность)
	|			И ГрафикРасчетов.Дата >= Периоды.ДатаНачала
	|			И ГрафикРасчетов.Дата <= Периоды.ДатаОкончания
	|			И (Периоды.ПометкаУдаления = ЛОЖЬ)
	|			И (Периоды.Произвольный = ЛОЖЬ)
	|ГДЕ
	|	ГрафикРасчетов.Ссылка = &Ссылка
	|	И ГрафикРасчетов.ВидБюджета <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.Ссылка,
	|	ГрафикРасчетов.Ссылка,
	|	ГрафикРасчетов.СтатьяБюджета,
	|	ГрафикРасчетов.Аналитика1,
	|	ГрафикРасчетов.Аналитика2,
	|	ГрафикРасчетов.Аналитика3,
	|	ГрафикРасчетов.Аналитика4,
	|	ГрафикРасчетов.Аналитика5,
	|	ГрафикРасчетов.Аналитика6,
	|	ГрафикРасчетов.ВидБюджета.Предназначение,
	|	ГрафикРасчетов.Валюта,
	|	ГрафикРасчетов.ЦФО,
	|	ГрафикРасчетов.Проект,
	|	ГрафикРасчетов.НаправлениеДвижения,
	|	ГрафикРасчетов.Дата,
	|	ВЫБОР
	|		КОГДА ГрафикРасчетов.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|			ТОГДА ГрафикРасчетов.Ссылка.ИсточникЛимитовБДДС
	|		ИНАЧЕ ГрафикРасчетов.Ссылка.ИсточникЛимитовИсполнение
	|	КОНЕЦ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ИмяТаблицыГрафика_", ИмяТаблицаДокумента + ".ГрафикРасчетов");
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Функция ТекстЗапросаДатыОперацийДокумента(ИмяТаблицыДокумента) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НАЧАЛОПЕРИОДА(Данные.Дата, ДЕНЬ) КАК Дата,
	|	Данные.ВидБюджета КАК ВидБюджета
	|ПОМЕСТИТЬ ВТ_ДатыОпераций
	|ИЗ
	|	_ИмяТаблицыГрафика_ КАК Данные
	|ГДЕ
	|	Данные.Ссылка = &Ссылка
	|	И Данные.ВидБюджета <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.ПустаяСсылка)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ИмяТаблицыГрафика_", ИмяТаблицыДокумента + ".ГрафикРасчетов");
	
	Возврат ТекстЗапроса;

КонецФункции

Процедура ДобавитьТекстЗапросаВТ_ТаблицаПлановССуммамиЛимитирования(ТекстыЗапроса) Экспорт

	ИмяВременнойТаблицы = "ВТ_ТаблицаПлановССуммамиЛимитирования";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.Предназначение КАК Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4 КАК Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5 КАК Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6 КАК Аналитика6,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ДокументРезервирования КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Заявлено КАК Заявлено,
	|	0 КАК Исполнено
	|ПОМЕСТИТЬ ВТ_ТаблицаПлановССуммамиЛимитирования
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Процедура ДобавитьТекстЗапросаВерсииРасчетов(ТекстыЗапроса, ИмяТаблицыДокумента) Экспорт
	
	ИмяРегистра = "ВерсииРасчетов";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВерсияФИ.Дата КАК Период,
	|	ВерсияФИ.Ссылка КАК ВерсияГрафика,
	|	ВерсияФИ.ДоговорКонтрагента КАК ПредметГрафика,
	|	ВерсияФИ.Организация КАК Организация,	
	|	ВерсияФИ.ОпорныйГрафик КАК ОпорныйГрафик	
	|ИЗ
	|	_ИмяТаблицыДокумента_ КАК ВерсияФИ
	|ГДЕ
	|	ВерсияФИ.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "_ИмяТаблицыДокумента_", ИмяТаблицыДокумента);
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);

КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка) Экспорт
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Реквизиты.Ссылка КАК Ссылка,
		|	Реквизиты.Дата КАК Дата,
		|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Реквизиты.Организация КАК Организация,
		|	Реквизиты.Контрагент КАК Контрагент,
		|	6 КАК ЗаполненностьДоговораЗаявки,
		|	Неопределено КАК ДокументПланирования,
		|	Реквизиты.РежимИспользованияГрафика КАК РежимИспользованияГрафика
		|ИЗ
		|	_ИмяТаблицыДокумента_ КАК Реквизиты
		|ГДЕ
		|	Реквизиты.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ИмяТаблицыДокумента = "Документ." + ДокументСсылка.Метаданные().Имя;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "_ИмяТаблицыДокумента_", ИмяТаблицыДокумента);
	
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
		
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		Запрос.УстановитьПараметр(ТекРеквизит.Ключ, ТекРеквизит.Значение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область ПроцедурыЗаписиДвиженийВРегистр

Процедура ОтразитьВерсииРасчетов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаВерсииРасчетов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.ВерсииРасчетов.Записывать = Истина;
	Движения.ВерсииРасчетов.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьРасчетыСКонтрагентамиГрафики(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица= ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасчетыСКонтрагентамиГрафики;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.РасчетыСКонтрагентамиГрафики.Записывать = Истина;
	Движения.РасчетыСКонтрагентамиГрафики.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьСостояниеИсполненияКовенантов(ДополнительныеСвойства, Движения, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСостоянияИсполненияКовенантов;
	
	Если Отказ ИЛИ Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Движения.СостоянияИсполненияКовенантов.Записывать = Истина;
	Движения.СостоянияИсполненияКовенантов.Загрузить(Таблица);
	
КонецПроцедуры

Процедура ОтразитьНарушенияУсловийДоговора(ДокументСсылка, ДополнительныеСвойства, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНарушенияУсловийДоговора;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	УдалитьНарушенияУсловийДоговора(ДокументСсылка, Отказ);	
	РегистрыСведений.НарушенияУсловийДоговора.ДобавитьЗаписиВРегистр(Таблица);
		
КонецПроцедуры

Процедура УдалитьНарушенияУсловийДоговора(ДокументСсылка, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		 РегистрыСведений.НарушенияУсловийДоговора.УдалитьЗаписиПоДокументу(ДокументСсылка);		
	КонецЕсли;
		
КонецПроцедуры

Функция ВыполнятьБюджетирование(РежимИспользованияГрафика) Экспорт
	 Возврат РежимИспользованияГрафика = Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций;
КонецФункции

#Область РаботаСКовенантами
Процедура ОтразитьНапоминанияОПроверкеКовенантов(ВерсияСоглашения, ДоговорКонтрагента, ДополнительныеСвойства, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНапоминанияКовенантов;
	
	УдалитьПроверкиКовенантов(ВерсияСоглашения, ДоговорКонтрагента);	
		
	НастройкиНапоминаний = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(
		Справочники.ВидыСобытийОповещений.ПроверкаСтатусовКовенантов);				
	
	Для каждого СтрокаКовенанта Из Таблица Цикл	
		МассивДатПроверки = ДатыПроверкиИсполненияКовенанта(СтрокаКовенанта);
		Для каждого ДатаПроверки Из МассивДатПроверки Цикл
			 ДобавитьНапоминаниеОбИсполненииКовенанта(СтрокаКовенанта, НастройкиНапоминаний, ДатаПроверки);
			 ДобавитьСтатусПроверкиКовенанта(СтрокаКовенанта, ДатаПроверки, Истина);
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Функция ДатыПроверкиИсполненияКовенанта(ПараметрыКовенанта)
	
	ДатыПроверки = Новый Массив;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыКовенанта.Периодичность) 
		ИЛИ ПараметрыКовенанта.Периодичность = Перечисления.ПериодичностьКовенантов.Непериодический Тогда
		Возврат ДатыПроверки;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыКовенанта.ДатаНачалаДействияДоговора) 
		ИЛИ НЕ ЗначениеЗаполнено(ПараметрыКовенанта.ДатаОкончанияДействияДоговора) Тогда
		Возврат ДатыПроверки;	
	КонецЕсли;
	
	ДатаОтсчетаПроверкиКовенантов = НачалоДня(ПараметрыКовенанта.ДатаОтсчетаПроверкиКовенантов);
	ПериодичностьПроверки = ПериодичностьПоПериодичностиКовенанта(ПараметрыКовенанта.Периодичность);
	НачалоПериода = ОбщегоНазначенияУХ.ДатаНачалаПериода(ПараметрыКовенанта.ДатаОтсчетаПроверкиКовенантов, ПериодичностьПроверки);
	СмещениеВСекундах = ПараметрыКовенанта.ДатаОтсчетаПроверкиКовенантов - НачалоПериода;	
	
	ДатаПроверки = НачалоДня(ОбщегоНазначенияУХ.ДатаКонцаПериода(НачалоПериода, ПериодичностьПроверки) + СмещениеВСекундах);
	Пока ДатаПроверки <= ПараметрыКовенанта.ДатаОкончанияДействияДоговора Цикл
	
		Если ДатаПроверки >= ПараметрыКовенанта.ДатаНачалаДействияДоговора
			И ДатаПроверки >= ПараметрыКовенанта.ДатаНачалаДействияВерсии Тогда			
			
			ДатыПроверки.Добавить(ДатаПроверки);
		КонецЕсли;
		
		НачалоПериода = ОбщегоНазначенияУХ.ДобавитьИнтервал(НачалоПериода, ПериодичностьПроверки, 1);
		ДатаПроверки = НачалоДня(ОбщегоНазначенияУХ.ДатаКонцаПериода(НачалоПериода, ПериодичностьПроверки) + СмещениеВСекундах);
		 
	КонецЦикла;
	
	Возврат ДатыПроверки;

КонецФункции

Процедура ДобавитьНапоминаниеОбИсполненииКовенанта(ПараметрыКовенанта, НастройкиНапоминаний, ДатаПроверки)
	
	Если НЕ НастройкиНапоминаний.ОповещениеВключено Тогда
		Возврат;
	КонецЕсли;
	
	// Напоминания пользователям
	ДопПараметры = Новый Структура;   
	ДопПараметры.Вставить("Ковенант", ПараметрыКовенанта.Ковенант);
	ДопПараметры.Вставить("ДоговорКонтрагента", ПараметрыКовенанта.ДоговорКонтрагента);
	ДопПараметры.Вставить("Контрагент", ПараметрыКовенанта.Контрагент);
	ДопПараметры.Вставить("ПлановаяДата", Формат(ДатаПроверки, "ДЛФ=D"));
	
	Напоминание = МодульУправленияОповещениямиУХ.СоздатьСтруктуруНапоминанияПоУмолчанию(
		НастройкиНапоминаний, 
		ПараметрыКовенанта.Ответственный, 
		ДатаПроверки, 
		ПараметрыКовенанта.Ковенант // Источник
	);
	Напоминание.Вставить("ДопПараметры", ДопПараметры);
	
	МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяПоСтруктуре(Напоминание);
	
КонецПроцедуры

Процедура ДобавитьСтатусПроверкиКовенанта(ПараметрыКовенанта, ПлановаяДата, ПервоначальнаяУстановка = Ложь)
	
	// Статусы проверки ковенантов
	Запись = РегистрыСведений.СтатусыПроверкиКовенантов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, ПараметрыКовенанта);
	
	Если ПервоначальнаяУстановка Тогда
		Если ЗначениеЗаполнено(ПлановаяДата) 
			И Запись.Период >= ПлановаяДата Тогда
			
			// на случай если новая версия соглашения вводится позже плановой даты
            // при этом исполнение ковенанта уже может быть введено на плановую дату
			Запись.Период = ПлановаяДата - 1;
		КонецЕсли;
	КонецЕсли;	
	
	Запись.ПлановаяДата = ПлановаяДата;
	Запись.Записать();
				
КонецПроцедуры

Процедура УдалитьПроверкиКовенантов(ВерсияСоглашения, ДоговорКонтрагента, Отказ = Ложь) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияСоглашения) Тогда
		
		АктуальнаяВерсияСоглашения = РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ДоговорКонтрагента);
		Если ВерсияСоглашения = АктуальнаяВерсияСоглашения Тогда
		    УдалитьНапоминанияОПроверкиСтатусовКовенантов(ДоговорКонтрагента);
		КонецЕсли;

		РегистрыСведений.СтатусыПроверкиКовенантов.УдалитьЗаписиПоДокументу(ВерсияСоглашения);
		 
	КонецЕсли;
		
КонецПроцедуры

Функция ТаблицаКовенантовВерсииСоглашения(ВерсияСоглашения) 
	
	Запрос = Новый Запрос;
	Документы.ВерсияСоглашенияКредит.ЗаполнитьПараметрыИнициализации(Запрос, ВерсияСоглашения);
	
	ТекстыЗапроса = Новый СписокЗначений;
	Документы.ВерсияСоглашенияКредит.ДобавитьТекстЗапросаНапоминанияПользователюОПроверкеКовенантов(ТекстыЗапроса);

	ТаблицыЗапроса = Новый Структура;
	ПроведениеСерверУХ.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ТаблицыЗапроса, Истина);
	
	Возврат ТаблицыЗапроса.ТаблицаНапоминанияКовенантов;
	
КонецФункции

Процедура ДобавитьНапоминанияОПроверкеСтатусовКовенантов(ВерсияСоглашения) Экспорт
	
	ТаблицаКовенантов = ТаблицаКовенантовВерсииСоглашения(ВерсияСоглашения);
	
	НастройкиНапоминаний = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(
		Справочники.ВидыСобытийОповещений.ПроверкаСтатусовКовенантов);				
		
	Для каждого СтрокаКовенанта Из ТаблицаКовенантов Цикл
		МассивДатПроверки = ДатыПроверкиИсполненияКовенанта(СтрокаКовенанта);
		Для каждого ДатаПроверки Из МассивДатПроверки Цикл
			ДобавитьНапоминаниеОбИсполненииКовенанта(СтрокаКовенанта, НастройкиНапоминаний, ДатаПроверки);
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьНапоминанияОПроверкиСтатусовКовенантов(ДоговорКонтрагента)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Ковенанты.Ссылка КАК Ковенант
	|ИЗ
	|	Справочник.Ковенанты КАК Ковенанты
	|ГДЕ
	|	Ковенанты.Владелец = &ДоговорКонтрагента"
	);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКОнтрагента);
	
	Отбор = Новый Структура("ВидСобытияОповещения, Источник", Справочники.ВидыСобытийОповещений.ПроверкаСтатусовКовенантов);
			
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отбор.Источник = Выборка.Ковенант;
		МодульУправленияОповещениямиУХ.УдалитьНапоминанияПоОтбору(Отбор);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ОтразитьСтатусыПроверкиКовенантов(ДокументСсылка, ДополнительныеСвойства, Отказ) Экспорт

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаСтатусыПроверкиКовенантов;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	УдалитьСтатусыПроверкиКовенантов(ДокументСсылка, Отказ);	
	РегистрыСведений.СтатусыПроверкиКовенантов.ДобавитьЗаписиВРегистр(Таблица);
		
КонецПроцедуры

Процедура УдалитьСтатусыПроверкиКовенантов(ДокументСсылка, Отказ) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		 РегистрыСведений.СтатусыПроверкиКовенантов.УдалитьЗаписиПоДокументу(ДокументСсылка);		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыключитьНапоминанияОПросрочкеКовенантов(ДополнительныеСвойства, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// при проведении документа ИсполнениеКовенантов удаляем напоминания пользователю по просрочке ввода ковенантов, если были
	// и статусы проверки - просрочен
	// если документ Исполнения ковенантов распроведедут, то регламентное задание ПроверкаВводаИсполненияКовенантов 
	// опять создаст напоминания о просрочке и статус просрочен
	
	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНапоминанияОПросрочкеКовенантов;	
	МенеджерЗаписи = РегистрыСведений.НапоминанияПользователяУХ.СоздатьМенеджерЗаписи();
	Для каждого Строка ИЗ Таблица Цикл
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;

	Таблица = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПросроченныеСтатусыПроверки;
	МенеджерЗаписи = РегистрыСведений.СтатусыПроверкиКовенантов.СоздатьМенеджерЗаписи();
	Для каждого Строка ИЗ Таблица Цикл
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Строка);
		МенеджерЗаписи.Удалить();
	КонецЦикла;
	
КонецПроцедуры

// Процедура - проверяет ввод исполнения ковенантов на плановые даты и создает напоминание пользователю при их отстутствии
//
Процедура ПроверитьВводИсполненияКовенантов() Экспорт
		
	ВидСобытия = Справочники.ВидыСобытийОповещений.ПросрочкаПроверкиСтатусовКовенантов; 
	НастройкаНапоминаний = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытия);
	ТекущаяДата = ТекущаяДата();
	
	НачатьТранзакцию();
	
	Попытка
		
		// за вчера не введены документы
		ТаблицаНеПроверенныхКовеннантов = РегистрыСведений.СтатусыПроверкиКовенантов.НепроверенныеКовенантыНаДату(
			НачалоДня(ТекущаяДата) - 1);	
		
		Для каждого Строка Из ТаблицаНеПроверенныхКовеннантов Цикл
			
			// уведомление пользователю о просрочке проверки
			ДопПараметры = Новый Структура;   
			ДопПараметры.Вставить("Ковенант", Строка.Ковенант);
			ДопПараметры.Вставить("ДоговорКонтрагента", Строка.ДоговорКонтрагента);
			ДопПараметры.Вставить("Контрагент", Строка.Контрагент);                              
			ДопПараметры.Вставить("ПлановаяДата", Формат(Строка.ПлановаяДата, "ДЛФ=D"));
			
			Напоминание = МодульУправленияОповещениямиУХ.СоздатьСтруктуруНапоминанияПоУмолчанию(
				НастройкаНапоминаний, 
				Строка.Ответственный, 
				Строка.ПлановаяДата, 
				Строка.Ковенант);
				
			Напоминание.Вставить("ДопПараметры", ДопПараметры);
			МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяПоСтруктуре(Напоминание);	
			
			// запись в регистр, что проверка просрочена
			ЗаписьСтатуса = РегистрыСведений.СтатусыПроверкиКовенантов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(ЗаписьСтатуса, Строка,,"Документ");
			ЗаписьСтатуса.Период = КонецДня(Строка.ПлановаяДата) + 1;
			ЗаписьСтатуса.СтатусПроверки = Перечисления.СтатусыПроверкиКовенантов.Просрочен;
			ЗаписьСтатуса.Комментарий = 
				СтрШаблон(Нстр("ru = 'Статус изменен автоматически при проверке ввода исполнения ковенантов %1'", 
							ОбщегоНазначения.КодОсновногоЯзыка()), ТекущаяДата);
			ЗаписьСтатуса.Записать();	
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ЗаписьЖурналаРегистрации(Нстр("ru = 'Проверка ввода исполнения ковенантов'", ОбщегоНазначения.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			СтрШаблон(Нстр("ru = 'Ошибка проверки: %1'", ОбщегоНазначения.КодОсновногоЯзыка()),
			  	 ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ) );
		
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

Функция ПлановыеДатыКовенантовПоДоговору(ДоговорКонтрагента, Дата) Экспорт
	 Возврат РегистрыСведений.СтатусыПроверкиКовенантов.ПлановыеДатыПоДоговоруПоДату(ДоговорКонтрагента, Дата);
КонецФункции	

Функция НарушенныеКовенанты(Ковенанты, Дата = Неопределено) Экспорт
	
	Отбор = Новый Структура;
	Отбор.Вставить("Ковенант", Ковенанты);
	Отбор.Вставить("СтатусИсполнения", Перечисления.СтатусыИсполненияКовентантов.Нарушен);
	Отбор.Вставить("РеакцияБанкаНаНарушение", Перечисления.РеакцииБанковНаНарушенияКовенантов.ОтзывКредита);
	Если ЗначениеЗаполнено(Дата) Тогда
		Отбор.Вставить("Период", Дата);
	КонецЕсли;
	
	ТабКовенантов = РегистрыСведений.СостоянияИсполненияКовенантов.ИсполнениеКовенантовПоОтбору(Отбор);		
	ТабКовенантов.Свернуть("Ковенант, КовенантПредставление");
	Возврат ТабКовенантов;
	
КонецФункции
#КонецОбласти
#КонецОбласти

#Область НарушениеИсполненияОбязательствПоДоговорам
Процедура ПроверитьИсполнениеОбязательствПоДоговорам() Экспорт
	
	ТекущаяДата = ТекущаяДата();
	ДатаОкончанияПроверки = КонецДня(ТекущаяДата - 24*60*60); // за вчера
	
	ОкончаниеПериодаПоследнейПроверки = Константы.ОкончаниеПериодаПоследнейПроверкиИсполненияОбязательств.Получить();
	Если ЗначениеЗаполнено(ОкончаниеПериодаПоследнейПроверки) Тогда
		ДатаНачалаПроверки = НачалоДня(ОкончаниеПериодаПоследнейПроверки + 24*60*60);
	Иначе
		ДатаНачалаПроверки = НачалоДня(ДатаОкончанияПроверки);
	КонецЕсли;	
	
	Если ДатаНачалаПроверки > ДатаОкончанияПроверки Тогда
		Возврат; // уже проверяли этот период
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		
		ТаблицаНарушений = НарушенияИсполненияОбязательствПоДоговорамЗаПериод(ДатаНачалаПроверки, ДатаОкончанияПроверки);
		Если ЗначениеЗаполнено(ТаблицаНарушений) Тогда
			
			Комментарий = СтрШаблон(Нстр("ru = 'Нарушение выявлено автоматически регламентным заданием %1'"), ТекущаяДата);

			ЗначенияЗаполнения = Новый Структура;
			ЗначенияЗаполнения.Вставить("Период", ТекущаяДата);
			ЗначенияЗаполнения.Вставить("Комментарий", Комментарий);
		
			РегистрыСведений.НарушенияУсловийДоговора.ДобавитьЗаписиВРегистр(ТаблицаНарушений, ЗначенияЗаполнения);
			ДобавитьНапоминанияОНарушенииИсполненияОбязательствПоДоговорам(ТаблицаНарушений);
		КонецЕсли;
		
		Константы.ОкончаниеПериодаПоследнейПроверкиИсполненияОбязательств.Установить(ДатаОкончанияПроверки);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ЗаписьЖурналаРегистрации("ПроверкаПросрочкиИсполненияОбязательств", УровеньЖурналаРегистрации.Ошибка, ,,
			СтрШаблон(Нстр("ru = 'Ошибка: %1'"), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) ));
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция НарушенияИсполненияОбязательствПоДоговорамЗаПериод(НачалоПериода, ОкончаниеПериода)
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиГрафики.Период, ДЕНЬ) КАК Период,
	|	РасчетыСКонтрагентамиГрафики.ВерсияГрафика КАК ВерсияГрафика,
	|	ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ДоговорыКонтрагентов) КАК ПредметГрафика,
	|	РасчетыСКонтрагентамиГрафики.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	РасчетыСКонтрагентамиГрафики.Валюта КАК Валюта,
	|	РасчетыСКонтрагентамиГрафики.ПриходРасход КАК ПриходРасход,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКонтрагентамиГрафики.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -РасчетыСКонтрагентамиГрафики.Сумма
	|			ИНАЧЕ РасчетыСКонтрагентамиГрафики.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	РасчетыСКонтрагентамиГрафики.Организация КАК Организация,
	|	РасчетыСКонтрагентамиГрафики.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_ПланВсеВерсии
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК РасчетыСКонтрагентамиГрафики
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РасчетыСКонтрагентамиГрафики.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|				ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		КОНЕЦ = РасчетыСКонтрагентамиГрафики.ВидДвижения
	|	И РасчетыСКонтрагентамиГрафики.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
	|	И РасчетыСКонтрагентамиГрафики.ВерсияГрафика.КонтролироватьНарушенияУсловийДоговора
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(РасчетыСКонтрагентамиГрафики.Период, ДЕНЬ),
	|	РасчетыСКонтрагентамиГрафики.ВерсияГрафика,
	|	РасчетыСКонтрагентамиГрафики.ЭлементСтруктурыЗадолженности,
	|	РасчетыСКонтрагентамиГрафики.Валюта,
	|	РасчетыСКонтрагентамиГрафики.ПриходРасход,
	|	ВЫРАЗИТЬ(РасчетыСКонтрагентамиГрафики.ПредметГрафика КАК Справочник.ДоговорыКонтрагентов),
	|	РасчетыСКонтрагентамиГрафики.Организация,
	|	РасчетыСКонтрагентамиГрафики.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПредметГрафика,
	|	ВерсияГрафика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПланВсеВерсии.Период КАК Период,
	|	ВТ_ПланВсеВерсии.ПредметГрафика КАК ПредметГрафика,
	|	ВТ_ПланВсеВерсии.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ВТ_ПланВсеВерсии.Валюта КАК Валюта,
	|	ВТ_ПланВсеВерсии.ПриходРасход КАК ПриходРасход,
	|	ВТ_ПланВсеВерсии.Сумма КАК Сумма,
	|	ВТ_ПланВсеВерсии.Организация КАК Организация,
	|	ВТ_ПланВсеВерсии.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_План
	|ИЗ
	|	ВТ_ПланВсеВерсии КАК ВТ_ПланВсеВерсии
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|				,
	|				ПредметГрафика В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						ВТ_ПланВсеВерсии.ПредметГрафика
	|					ИЗ
	|						ВТ_ПланВсеВерсии КАК ВТ_ПланВсеВерсии)) КАК ВерсииРасчетовСрезПоследних
	|		ПО (ВерсииРасчетовСрезПоследних.ПредметГрафика = ВТ_ПланВсеВерсии.ПредметГрафика)
	|			И (ВерсииРасчетовСрезПоследних.ВерсияГрафика = ВТ_ПланВсеВерсии.ВерсияГрафика)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ПредметГрафика,
	|	ЭлементСтруктурыЗадолженности,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыСКонтрагентамиФактОбороты.Период КАК Период,
	|	РасчетыСКонтрагентамиФактОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиФактОбороты.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	РасчетыСКонтрагентамиФактОбороты.Валюта КАК Валюта,
	|	-РасчетыСКонтрагентамиФактОбороты.СуммаОборот КАК Сумма,
	|	РасчетыСКонтрагентамиФактОбороты.Организация КАК Организация,
	|	РасчетыСКонтрагентамиФактОбороты.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_Факт
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиФакт.Обороты(
	|			&НачалоПериода,
	|			&ОкончаниеПериода,
	|			День,
	|			ДоговорКонтрагента В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					ВТ_План.ПредметГрафика
	|				ИЗ
	|					ВТ_План КАК ВТ_План)) КАК РасчетыСКонтрагентамиФактОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ДоговорКонтрагента,
	|	ЭлементСтруктурыЗадолженности,
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_План.ПредметГрафика КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВТ_План.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНарушенийУсловийДоговоров.НарушениеИсполненияОбязательствКонтрагентом)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНарушенийУсловийДоговоров.НарушениеИсполненияОбязательствОрганизацией)
	|	КОНЕЦ КАК ВидНарушения,
	|	ИСТИНА КАК ЕстьНарушение,
	|	МИНИМУМ(ВТ_План.Период) КАК ДатаНарушения,
	|	ВТ_План.Организация КАК Организация,
	|	ВТ_План.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ВТ_Нарушения
	|ИЗ
	|	ВТ_План КАК ВТ_План
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Факт КАК ВТ_Факт
	|		ПО ВТ_План.Период = ВТ_Факт.Период
	|			И ВТ_План.ПредметГрафика = ВТ_Факт.ДоговорКонтрагента
	|			И ВТ_План.ЭлементСтруктурыЗадолженности = ВТ_Факт.ЭлементСтруктурыЗадолженности
	|			И ВТ_План.Валюта = ВТ_Факт.Валюта
	|ГДЕ
	|	ВТ_План.Сумма <> ЕСТЬNULL(ВТ_Факт.Сумма, 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_План.ПредметГрафика,
	|	ВЫБОР
	|		КОГДА ВТ_План.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыНарушенийУсловийДоговоров.НарушениеИсполненияОбязательствКонтрагентом)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыНарушенийУсловийДоговоров.НарушениеИсполненияОбязательствОрганизацией)
	|	КОНЕЦ,
	|	ВТ_План.Организация,
	|	ВТ_План.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Нарушения.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Нарушения.ВидНарушения КАК ВидНарушения,
	|	ВТ_Нарушения.ЕстьНарушение КАК ЕстьНарушение,
	|	ВТ_Нарушения.ДатаНарушения КАК ДатаНарушения,
	|	ВТ_Нарушения.Организация КАК Организация,
	|	ВТ_Нарушения.Контрагент КАК Контрагент,
	|	ВТ_Нарушения.ДоговорКонтрагента.Ответственный КАК Ответственный
	|ИЗ
	|	ВТ_Нарушения КАК ВТ_Нарушения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НарушенияУсловийДоговора.СрезПоследних(
	|				,
	|				ДоговорКонтрагента В
	|					(ВЫБРАТЬ
	|						ВТ_Нарушения.ДоговорКонтрагента КАК ДоговорКонтрагента
	|					ИЗ
	|						ВТ_Нарушения КАК ВТ_Нарушения)) КАК НарушенияУсловийДоговораСрезПоследних
	|		ПО ВТ_Нарушения.ДоговорКонтрагента = НарушенияУсловийДоговораСрезПоследних.ДоговорКонтрагента
	|			И ВТ_Нарушения.ВидНарушения = НарушенияУсловийДоговораСрезПоследних.ВидНарушения
	|			И ВТ_Нарушения.ЕстьНарушение = НарушенияУсловийДоговораСрезПоследних.ЕстьНарушение
	|ГДЕ
	|	НарушенияУсловийДоговораСрезПоследних.Период ЕСТЬ NULL"
	);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("ОкончаниеПериода", ОкончаниеПериода);
	
	ТаблицаНарушений = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаНарушений;
	
КонецФункции

Функция ДобавитьНапоминанияОНарушенииИсполненияОбязательствПоДоговорам(ТаблицаНарушений)
	
	НастройкиНапоминанийОрганизации = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(
		Справочники.ВидыСобытийОповещений.НарушениеИсполненияОбязательствОрганизациейПоДоговору);
		
	НастройкиНапоминанийКонтрагента = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(
		Справочники.ВидыСобытийОповещений.НарушениеИсполненияОбязательствКонтрагентомПоДоговору);
		
	НастройкиНапоминаний = Новый Соответствие;
	НастройкиНапоминаний.Вставить(Перечисления.ВидыНарушенийУсловийДоговоров.НарушениеИсполненияОбязательствКонтрагентом,
		 НастройкиНапоминанийКонтрагента);
	НастройкиНапоминаний.Вставить(Перечисления.ВидыНарушенийУсловийДоговоров.НарушениеИсполненияОбязательствОрганизацией,
		 НастройкиНапоминанийОрганизации);	 
		
	ДатаНапоминания = ТекущаяДата();
	
	Для каждого СтрокаНарушений ИЗ ТаблицаНарушений Цикл
		
		ДопПараметры = Новый Структура;   
		ДопПараметры.Вставить("Организация", СтрокаНарушений.Организация);
		ДопПараметры.Вставить("Контрагент", СтрокаНарушений.Контрагент);
		ДопПараметры.Вставить("ДоговорКонтрагента", СтрокаНарушений.ДоговорКонтрагента);
		ДопПараметры.Вставить("ДатаНарушения", Формат(СтрокаНарушений.ДатаНарушения, "ДЛФ=D"));
		
		Напоминание = МодульУправленияОповещениямиУХ.СоздатьСтруктуруНапоминанияПоУмолчанию(
			НастройкиНапоминаний[СтрокаНарушений.ВидНарушения], 
			СтрокаНарушений.Ответственный, 
			ДатаНапоминания, 
			СтрокаНарушений.ДоговорКонтрагента
		);
		Напоминание.Вставить("ДопПараметры", ДопПараметры);
		МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяПоСтруктуре(Напоминание);
	КонецЦикла;
	
КонецФункции	
#КонецОбласти
#КонецОбласти

#Область ПараметрыОпераций
Функция ПараметрыОперацийГрафикаПоУмолчанию(ГруппыОперацийГрафика) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперацииГрафиковДоговоров.Ссылка КАК ОперацияГрафика,
	|	ЕСТЬNULL(НастройкиФинансовыхИнструментов.СтатьяБюджета, НЕОПРЕДЕЛЕНО) КАК СтатьяБюджета,
	|	ОперацииГрафиковДоговоров.ВидБюджета КАК ВидБюджета,
	|	ОперацииГрафиковДоговоров.НаправлениеДвижения КАК ПриходРасход,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика1,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика2,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика3,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика4,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика5,
	|	НЕОПРЕДЕЛЕНО КАК Аналитика6	
	|ИЗ
	|	Справочник.ОперацииГрафиковДоговоров КАК ОперацииГрафиковДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|		ПО ОперацииГрафиковДоговоров.Ссылка = НастройкиФинансовыхИнструментов.Операция
	|ГДЕ
	|	НЕ ОперацииГрафиковДоговоров.ЭтоГруппа
	|	И ОперацииГрафиковДоговоров.Родитель В (&ГруппаОпераций)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОперацииГрафиковДоговоров.Код"
	);
	
	Запрос.УстановитьПараметр("ГруппаОпераций", ГруппыОперацийГрафика);
	
	НастройкиПоУмолчанию = Запрос.Выполнить().Выгрузить();
	
	Возврат НастройкиПоУмолчанию;
	
КонецФункции
#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы
// Процедура заполняет реквизит "Уполномоченный банк" справочника "Договоры контрагентов".
Процедура ЗаполнитьУполномоченныйБанкПоГОЗ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.ГосударственныйКонтракт.УполномоченныйБанк КАК УполномоченныйБанк,
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ГосударственныйКонтракт <> &ПустойГосударственныйКонтракт
	|	И ДоговорыКонтрагентов.УполномоченныйБанк = ЗНАЧЕНИЕ(Справочник.Банки.ПустаяСсылка)";
	
	Запрос.УстановитьПараметр("ПустойГосударственныйКонтракт", 
		ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ПустаяСсылкаСправочникГосударственныеКонтракты());
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДоговорОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДоговорОбъект.УполномоченныйБанк = Выборка.УполномоченныйБанк;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДоговорОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьВерсииСоглашенияИОбновитьДоговорыКонтрагентов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоговоровКонтрагентовУХ.УдалитьВидДоговораУХ КАК УдалитьВидДоговораУХ,
	|	ВидыДоговоровКонтрагентовУХ.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,
	|	ВидыДоговоровКонтрагентовУХ.Ссылка КАК ВидДоговораУХ
	|ИЗ
	|	Справочник.ВидыДоговоровКонтрагентовУХ КАК ВидыДоговоровКонтрагентовУХ
	|ГДЕ
	|	НЕ ВидыДоговоровКонтрагентовУХ.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(ВерсииРасчетовСрезПоследних.ВерсияГрафика, НЕОПРЕДЕЛЕНО) КАК ВерсияСоглашения
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииРасчетов.СрезПоследних КАК ВерсииРасчетовСрезПоследних
	|		ПО (ВерсииРасчетовСрезПоследних.ПредметГрафика = ДоговорыКонтрагентов.Ссылка)
	|ГДЕ
	|	ДоговорыКонтрагентов.ВерсияСоглашения = НЕОПРЕДЕЛЕНО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВерсияСоглашенияАккредитив.Ссылка КАК Ссылка,
	|	ВерсияСоглашенияАккредитив.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.ВерсияСоглашенияАккредитив КАК ВерсияСоглашенияАккредитив
	|ГДЕ
	|	ВерсияСоглашенияАккредитив.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияБанковскаяГарантия.Ссылка,
	|	ВерсияСоглашенияБанковскаяГарантия.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВерсияСоглашенияБанковскаяГарантия КАК ВерсияСоглашенияБанковскаяГарантия
	|ГДЕ
	|	ВерсияСоглашенияБанковскаяГарантия.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияВалютныйСвоп.Ссылка,
	|	ВерсияСоглашенияВалютныйСвоп.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйСвоп КАК ВерсияСоглашенияВалютныйСвоп
	|ГДЕ
	|	ВерсияСоглашенияВалютныйСвоп.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияДепозит.Ссылка,
	|	ВерсияСоглашенияДепозит.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВерсияСоглашенияДепозит КАК ВерсияСоглашенияДепозит
	|ГДЕ
	|	ВерсияСоглашенияДепозит.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка,
	|	ВерсияСоглашенияКоммерческийДоговор.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
	|ГДЕ
	|	ВерсияСоглашенияКоммерческийДоговор.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияКредит.Ссылка,
	|	ВерсияСоглашенияКредит.ДоговорКонтрагента
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияСоглашенияКредит
	|ГДЕ
	|	ВерсияСоглашенияКредит.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.ПустаяСсылка)";
	
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	
	ВидыДоговоров = РезультатыЗапроса[0].Выгрузить();
	СуществующиеВерсииСоглашения = РезультатыЗапроса[2].Выгрузить();
	СуществующиеВерсииСоглашения.Индексы.Добавить("ДоговорКонтрагента");
	
	ДоговорыКОбновлению = РезультатыЗапроса[1].Выбрать();
	СтруктураПоиска = Новый Структура("УдалитьВидДоговораУХ,ВидФинансовогоИнструмента");
	Пока ДоговорыКОбновлению.Следующий() Цикл
		
		ДоговорОбъект = ДоговорыКОбновлению.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ДоговорОбъект.УдалитьВидДоговораУХ) Тогда
			// Это обновление с УХ 1.3.
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДоговорОбъект);
			Если СтруктураПоиска.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.КредитнаяЛиния Тогда
				СтруктураПоиска.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.КредитПолученный;
			КонецЕсли;
			НайденныеВидыДоговоров = ВидыДоговоров.НайтиСтроки(СтруктураПоиска);
			Если НайденныеВидыДоговоров.Количество() Тогда
				ДоговорОбъект.ВидДоговораУХ = НайденныеВидыДоговоров[0].ВидДоговораУХ;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДоговорОбъект.ВидДоговораУХ) Тогда
			// Это обновление с БП или некорректные данные заполнения.
			ДоговорОбъект.ВидДоговораУХ = УправлениеДоговорамиУХКлиентСерверПовтИсп.ВидДоговораУХ(ДоговорОбъект.ВидДоговора);
		КонецЕсли;
		
		ИмяДокумента = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьИмяДокументаПоВидуДоговора(ДоговорОбъект.ВидДоговораУХ);
		
		Если ЗначениеЗаполнено(ДоговорыКОбновлению.ВерсияСоглашения) Тогда
			ДоговорОбъект.ВерсияСоглашения = ДоговорыКОбновлению.ВерсияСоглашения;
		Иначе
			
			Если ЗначениеЗаполнено(ДоговорОбъект.Дата) Тогда
				ДатаДокумента = ДоговорОбъект.Дата;
			ИначеЕсли ЗначениеЗаполнено(ДоговорОбъект.ДатаНачалаДействия) Тогда
				ДатаДокумента = ДоговорОбъект.ДатаНачалаДействия;
			Иначе
				// В договоре нет никаких сведений о дате. Установим некое достаточно старое значение.
				ДатаДокумента = Дата(2000,1,1);
			КонецЕсли;
			
			// Создадим новую версию соглашения.
			ВерсияСоглашения = Документы[ИмяДокумента].СоздатьДокумент();
			ВерсияСоглашения.Дата = ДатаДокумента;
			ЗаполнитьВерсиюСоглашенияПоДоговоруКонтрагентаПервоначальноеЗаполнение(ВерсияСоглашения, ДоговорОбъект);
			ВерсияСоглашения.ДополнительныеСвойства.Вставить("НеЗаписыватьДоговор", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВерсияСоглашения,,Истина,РежимЗаписиДокумента.Проведение);
			ДоговорОбъект.ВерсияСоглашения = ВерсияСоглашения.Ссылка;
			
		КонецЕсли;	
		
		// Обновим существующие версии соглашения, заполнив недостающие поля по договору.
		ВерсииСоглашенияКОбновлению = СуществующиеВерсииСоглашения.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ДоговорыКОбновлению.Ссылка));
		Для Каждого ТекВерсияСоглашения Из ВерсииСоглашенияКОбновлению Цикл
			
			ТекВерсияСоглашенияСсылка = ТекВерсияСоглашения.Ссылка;
			Если ТипЗнч(ТекВерсияСоглашенияСсылка) <> Тип("ДокументСсылка." + ИмяДокумента) Тогда
				// некорректные данные. Не будем их обрабатывать.
				Продолжить;
			КонецЕсли;
			
			ВерсияСоглашенияОбъект = ТекВерсияСоглашенияСсылка.ПолучитьОбъект();
			ЗаполнитьВерсиюСоглашенияПоДоговоруКонтрагентаПервоначальноеЗаполнение(ВерсияСоглашенияОбъект, ДоговорОбъект);
			ВерсияСоглашенияОбъект.ДополнительныеСвойства.Вставить("НеЗаписыватьДоговор", Истина);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВерсияСоглашенияОбъект);
		КонецЦикла;
		
		// Когда все документы отработаны, запишем сам договор. 
		// При повторном запуске обновления он уже не войдет в выборку.
		// От кредитных линий отказались.
		Если ДоговорОбъект.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.КредитнаяЛиния Тогда
			ДоговорОбъект.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.КредитПолученный;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДоговорОбъект);

	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДанныеСогласованияВерсийСоглашения() Экспорт
	
	ОписаниеДоговорыКОнтрагентов = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Справочники.ДоговорыКОнтрагентов);

	ОписанияВерсийСоглашения = Новый Массив;
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияАккредитив));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияБанковскаяГарантия));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияВалютноПроцентныйСвоп));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияВалютныйСвоп));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияВалютныйФорвард));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияДепозит));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияКоммерческийДоговор));
	ОписанияВерсийСоглашения.Добавить(ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоОбъектуМетаданных(Метаданные.Документы.ВерсияСоглашенияКредит));

	// 1. Получим таблицу маршрутов, при необходимости создадим элементы.
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДокументыБД.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ОписанияДокументовБД
	|ИЗ
	|	Справочник.ДокументыБД КАК ДокументыБД
	|ГДЕ
	|	ДокументыБД.Ссылка В(&ОписанияВерсийСоглашения)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ШаблоныУниверсальныхПроцессов.Ссылка КАК МаршрутСправочника,
	|	ВТ_ОписанияДокументовБД.Ссылка КАК ДокументБД,
	|	ШаблоныУниверсальныхПроцессов.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_СуществующиеМаршрутыДоговоров
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов,
	|	ВТ_ОписанияДокументовБД КАК ВТ_ОписанияДокументовБД
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.ТипОбъектаСогласования = &ОписаниеДоговорыКонтрагентов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СуществующиеМаршрутыДоговоров.МаршрутСправочника КАК МаршрутСправочника,
	|	ВТ_СуществующиеМаршрутыДоговоров.ДокументБД КАК ДокументБД,
	|	ЕСТЬNULL(ШаблоныУниверсальныхПроцессов.Ссылка, ЗНАЧЕНИЕ(Справочник.ШаблоныУниверсальныхПроцессов.ПустаяСсылка)) КАК МаршрутВерсииСоглашения
	|ИЗ
	|	ВТ_СуществующиеМаршрутыДоговоров КАК ВТ_СуществующиеМаршрутыДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|		ПО ВТ_СуществующиеМаршрутыДоговоров.ДокументБД = ШаблоныУниверсальныхПроцессов.ТипОбъектаСогласования
	|			И ВТ_СуществующиеМаршрутыДоговоров.Наименование = ШаблоныУниверсальныхПроцессов.Наименование";
	Запрос.УстановитьПараметр("ОписанияВерсийСоглашения", ОписанияВерсийСоглашения) ;
	Запрос.УстановитьПараметр("ОписаниеДоговорыКонтрагентов", ОписаниеДоговорыКОнтрагентов);
	СоответствиеШаблоновПроцессов = Запрос.Выполнить().Выгрузить();

	Для Каждого ТекСтрокаСоответствия из СоответствиеШаблоновПроцессов Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрокаСоответствия.МаршрутВерсииСоглашения) Тогда
			
			НовыйМаршрутВерсииСоглашения = ТекСтрокаСоответствия.МаршрутСправочника.Скопировать();
			НовыйМаршрутВерсииСоглашения.ТипОбъектаСогласования = ТекСтрокаСоответствия.ДокументБД;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйМаршрутВерсииСоглашения);
			Справочники.ШаблоныУниверсальныхПроцессов.СкопироватьСвязаннуюИнформациюПроцесса(ТекСтрокаСоответствия.МаршрутСправочника, НовыйМаршрутВерсииСоглашения.Ссылка);
			ТекСтрокаСоответствия.МаршрутВерсииСоглашения = НовыйМаршрутВерсииСоглашения.Ссылка;
		КонецЕсли;
		
	КонецЦикла;

	// 2. Копируем матрицу полномочий.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	РегистрМатрицыПолномочий.ШаблонДокументаБД КАК ШаблонДокументаБД,
	|	РегистрМатрицыПолномочий.ДокументБД КАК ДокументБД,
	|	РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности КАК ВерсияРегламентаПодготовкиОтчетности,
	|	РегистрМатрицыПолномочий.Организация КАК Организация,
	|	РегистрМатрицыПолномочий.Проект КАК Проект,
	|	РегистрМатрицыПолномочий.Исполняющий КАК Исполняющий,
	|	РегистрМатрицыПолномочий.Исполняющий_Организация КАК Исполняющий_Организация,
	|	РегистрМатрицыПолномочий.Согласование КАК Согласование,
	|	РегистрМатрицыПолномочий.Согласование_Организация КАК Согласование_Организация
	|ИЗ
	|	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|ГДЕ
	|	РегистрМатрицыПолномочий.ДокументБД = &ДокументБД";
	Запрос.УстановитьПараметр("ДокументБД", ОписаниеДоговорыКонтрагентов);

	ИсходнаяМатрицаПолномочий = Запрос.Выполнить().Выгрузить();

	Для Каждого ТекОписаниеВерсииСоглашения Из ОписанияВерсийСоглашения Цикл
		
		НаборЗаписей = РегистрыСведений.РегистрМатрицыПолномочий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ДокументБД.Установить(ТекОписаниеВерсииСоглашения);
		НаборЗаписей.Загрузить(ИсходнаяМатрицаПолномочий);
		Для Каждого ТекЗапись из НаборЗаписей Цикл
			ТекЗапись.ДокументБД = ТекОписаниеВерсииСоглашения;
			Если ТипЗнч(ТекЗапись.Согласование) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов") Тогда
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("МаршрутСправочника", ТекЗапись.Согласование);
				СтруктураПоиска.Вставить("ДокументБД", ТекОписаниеВерсииСоглашения);
				СтрокиСоответствия = СоответствиеШаблоновПроцессов.НайтиСтроки(СтруктураПоиска);
				Если СтрокиСоответствия.Количество() Тогда
					ТекЗапись.Согласование = СтрокиСоответствия[0].МаршрутВерсииСоглашения;
				Иначе
					ТекЗапись.Согласование = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;

	// Остановим запущенные процессы согласования договоров.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.ВРаботе)
	|	И ЭкземплярПроцесса.КлючевойОбъектПроцесса ССЫЛКА Справочник.ДоговорыКонтрагентов";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МодульУправленияПроцессамиУХ.ОтменитьСогласованиеОбъекта(Выборка.КлючевойОбъектПроцесса);
	КонецЦикла;
		
	
КонецПроцедуры

// Заполняет версию соглашения по данным справочника ДоговорыКонтрагентов.
Процедура ЗаполнитьВерсиюСоглашенияПоДоговоруКонтрагентаПервоначальноеЗаполнение(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект)
	
	ОбъектМетаданных = ВерсияСоглашенияОбъект.Метаданные();
	// Общее заполнение
	Для Каждого ТекРеквизит Из ОбъектМетаданных.Реквизиты Цикл
		ИмяРеквизита = ТекРеквизит.Имя;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, Метаданные.Справочники.ДоговорыКонтрагентов) Тогда
			ВерсияСоглашенияОбъект[ИмяРеквизита] = ДоговорКонтрагентаОбъект[ИмяРеквизита];
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДоговорКонтрагента) Тогда
		ВерсияСоглашенияОбъект.ДоговорКонтрагента = ДоговорКонтрагентаОбъект.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Контрагент) Тогда
		ВерсияСоглашенияОбъект.Контрагент = ДоговорКонтрагентаОбъект.Владелец;
	КонецЕсли;
	
	// Специфическое заполнение
	Если ОбъектМетаданных = Метаданные.Документы.ВерсияСоглашенияКредит Тогда
		ЗаполнитьРеквизитыКредитаПоДаннымДоговора(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ВерсияСоглашенияДепозит Тогда
		ЗаполнитьРеквизитыДепозитаПоДаннымДоговора(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ВерсияСоглашенияАккредитив Тогда
		ЗаполнитьРеквизитыАккредитиваПоДаннымДоговора(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ВерсияСоглашенияБанковскаяГарантия Тогда
		ЗаполнитьРеквизитыБанковскойГарантииПоДаннымДоговора(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ВерсияСоглашенияВалютныйСвоп Тогда
		ЗаполнитьРеквизитыВалютногоСвопаПоДаннымДоговора(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
	ИначеЕсли ОбъектМетаданных = Метаданные.Документы.ВерсияСоглашенияКоммерческийДоговор Тогда
		ЗаполнитьРеквизитыКоммерческогоДоговораПоДаннымДоговора(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКредитаПоДаннымДоговора(ВерсияСоглашенияОбъект, Договор)
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаОкончанияДействия) Тогда
		ВерсияСоглашенияОбъект.ДатаОкончанияДействия = Договор.СрокДействия;
	КонецЕсли;
	
	Если Договор.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.КредитнаяЛиния Тогда
		ВерсияСоглашенияОбъект.ЭтоКредитнаяЛиния = Истина;
		ВерсияСоглашенияОбъект.РазрешеноПланированиеТраншейИзПлатежногоКалендаря = Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитыДепозитаПоДаннымДоговора(ВерсияСоглашенияОбъект, Договор)
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаОкончанияДействия) Тогда
		ВерсияСоглашенияОбъект.ДатаОкончанияДействия = Договор.СрокДействия;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьРеквизитыАккредитиваПоДаннымДоговора(ВерсияСоглашенияОбъект, Договор)
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаОкончанияДействия) Тогда
		ВерсияСоглашенияОбъект.ДатаОкончанияДействия = Договор.СрокДействия;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыБанковскойГарантииПоДаннымДоговора(ВерсияСоглашенияОбъект, Договор)
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаОкончанияДействия) Тогда
		ВерсияСоглашенияОбъект.ДатаОкончанияДействия = Договор.СрокДействия;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыВалютногоСвопаПоДаннымДоговора(ВерсияСоглашенияОбъект, Договор)
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаПервоначальногоПлатежа) Тогда
		ВерсияСоглашенияОбъект.ДатаПервоначальногоПлатежа = Договор.ДатаНачалаДействия;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаОкончательногоПлатежа) Тогда
		ВерсияСоглашенияОбъект.ДатаОкончательногоПлатежа = Договор.СрокДействия;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ВидСделки) Тогда
		ВерсияСоглашенияОбъект.ВидСделки = Перечисления.ВидыВалютныхСвопов.КупилПродал;
	КонецЕсли;
	
	Если ВерсияСоглашенияОбъект.ВидСделки = Перечисления.ВидыВалютныхСвопов.КупилПродал Тогда
		ИмяРеквизитаВалюта = "ВтораяВалюта";
		ИмяРеквизитаСуммаПервоначальная = "СуммаПервоначальногоПлатежаВоВторойВалюте";
		ИмяРеквизитаСуммаОкончательная = "СуммаОкончательногоПлатежаВПервойВалюте";
	Иначе
		ИмяРеквизитаВалюта = "ПерваяВалюта";
		ИмяРеквизитаСуммаПервоначальная = "СуммаПервоначальногоПлатежаВПервойВалюте";
		ИмяРеквизитаСуммаОкончательная = "СуммаОкончательногоПлатежаВоВторойВалюте";		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект[ИмяРеквизитаВалюта]) Тогда
		ВерсияСоглашенияОбъект[ИмяРеквизитаВалюта] = Договор.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект[ИмяРеквизитаСуммаПервоначальная]) Тогда
		ВерсияСоглашенияОбъект[ИмяРеквизитаСуммаПервоначальная] = Договор.Сумма;
		ВерсияСоглашенияОбъект[ИмяРеквизитаСуммаОкончательная] = Договор.Сумма;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыКоммерческогоДоговораПоДаннымДоговора(ВерсияСоглашенияОбъект, Договор)
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаОкончанияДействия) Тогда
		ВерсияСоглашенияОбъект.ДатаОкончанияДействия = Договор.СрокДействия;
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьПроизводственныеКалендари() Экспорт

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсияСоглашенияАккредитив.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияАккредитив КАК ВерсияСоглашенияАккредитив
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияАккредитив.ПроизводственныеКалендари КАК ВерсияСоглашенияАккредитивПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияАккредитивПроизводственныеКалендари.Ссылка = ВерсияСоглашенияАккредитив.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияАккредитивПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияАккредитив.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияБанковскаяГарантия.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияБанковскаяГарантия КАК ВерсияСоглашенияБанковскаяГарантия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияБанковскаяГарантия.ПроизводственныеКалендари КАК ВерсияСоглашенияБанковскаяГарантияПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияБанковскаяГарантияПроизводственныеКалендари.Ссылка = ВерсияСоглашенияБанковскаяГарантия.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияБанковскаяГарантияПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияБанковскаяГарантия.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияДепозит.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияДепозит КАК ВерсияСоглашенияДепозит
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияДепозит.ПроизводственныеКалендари КАК ВерсияСоглашенияДепозитПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияДепозитПроизводственныеКалендари.Ссылка = ВерсияСоглашенияДепозит.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияДепозитПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияДепозит.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияВалютныйСвоп.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйСвоп КАК ВерсияСоглашенияВалютныйСвоп
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютныйСвоп.ПроизводственныеКалендари КАК ВерсияСоглашенияВалютныйСвопПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияВалютныйСвопПроизводственныеКалендари.Ссылка = ВерсияСоглашенияВалютныйСвоп.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияВалютныйСвопПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияВалютныйСвоп.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияВалютноПроцентныйСвоп.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютноПроцентныйСвоп КАК ВерсияСоглашенияВалютноПроцентныйСвоп
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютноПроцентныйСвоп.ПроизводственныеКалендари КАК ВерсияСоглашенияВалютноПроцентныйСвопПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияВалютноПроцентныйСвопПроизводственныеКалендари.Ссылка = ВерсияСоглашенияВалютноПроцентныйСвоп.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияВалютноПроцентныйСвопПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияВалютноПроцентныйСвоп.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияКредит.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияСоглашенияКредит
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКредит.ПроизводственныеКалендари КАК ВерсияСоглашенияКредитПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияКредитПроизводственныеКалендари.Ссылка = ВерсияСоглашенияКредит.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияКредитПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияКредит.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияКоммерческийДоговор.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор.ПроизводственныеКалендари КАК ВерсияСоглашенияКоммерческийДоговорПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияКоммерческийДоговорПроизводственныеКалендари.Ссылка = ВерсияСоглашенияКоммерческийДоговор.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияКоммерческийДоговорПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияКоммерческийДоговор.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВерсияСоглашенияВалютныйФорвард.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияВалютныйФорвард КАК ВерсияСоглашенияВалютныйФорвард
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияВалютныйФорвард.ПроизводственныеКалендари КАК ВерсияСоглашенияВалютныйФорвардПроизводственныеКалендари
	|		ПО (ВерсияСоглашенияВалютныйФорвардПроизводственныеКалендари.Ссылка = ВерсияСоглашенияВалютныйФорвард.Ссылка)
	|ГДЕ
	|	ВерсияСоглашенияВалютныйФорвардПроизводственныеКалендари.Ссылка ЕСТЬ NULL
	|	И ВерсияСоглашенияВалютныйФорвард.УдалитьПроизводственныйКалендарь <> ЗНАЧЕНИЕ(Справочник.ПроизводственныеКалендари.ПустаяСсылка)";

	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		НоваяСтрока = Объект.ПроизводственныеКалендари.Добавить();
		НоваяСтрока.ПроизводственныйКалендарь = Объект.УдалитьПроизводственныйКалендарь;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьВстречныйДоговор(ВерсияСоглашенияПриемник, ВерсияСоглашенияИсточник)

	КонтрагентыПоОрганизации = ИнтеграцияВИБПереопределяемыйУХ.ПолучитьКонтрагентовПоОрганизации(ВерсияСоглашенияИсточник.Организация);
		
	РеквизитыИсключения = "Ссылка,Номер,Проведен,ДоговорКонтрагента,ДокументОснование,ОсновнойЦФО";
	
	ЗаполнитьЗначенияСвойств(ВерсияСоглашенияПриемник, ВерсияСоглашенияИсточник,, РеквизитыИсключения);
	// Загрузим табличные части
	ОбъектМетаданных = ВерсияСоглашенияПриемник.Метаданные();
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		ИмяТабличнойЧасти = ТабличнаяЧасть.Имя;
		ВерсияСоглашенияПриемник[ИмяТабличнойЧасти].Загрузить(ВерсияСоглашенияИсточник[ИмяТабличнойЧасти].Выгрузить());
	КонецЦикла;
	
	// Зеркалируем реквизиты
	ВерсияСоглашенияПриемник.Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСоглашенияИсточник.Контрагент, "ОрганизационнаяЕдиница");
	ВерсияСоглашенияПриемник.Контрагент = ?(КонтрагентыПоОрганизации.Количество(), КонтрагентыПоОрганизации[0], Неопределено);
	ВерсияСоглашенияПриемник.ВидДоговораУХ = УправлениеДоговорамиУХКлиентСерверПовтИсп.ПолучитьВстречныйВидДоговораУХ(ВерсияСоглашенияИсточник.ВидДоговораУХ);
	//++ ЕРПУХ
	ВерсияСоглашенияПриемник.Партнер = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСоглашенияПриемник.Контрагент, "Партнер");
	//-- ЕРПУХ
	
	ДенежныеСредстваВстраиваниеУХ.ЗаполнитьВнутригрупповыеСчетаПоВерсииСоглашения(ВерсияСоглашенияИсточник, ВерсияСоглашенияПриемник);	
	
	ВерсияСоглашенияПриемник.ФиксированныйСчетКонтрагента = ВерсияСоглашенияИсточник.ФиксированныйСчетОрганизации;
	ВерсияСоглашенияПриемник.ФиксированныйСчетОрганизации = ВерсияСоглашенияИсточник.ФиксированныйСчетКонтрагента;
	
КонецПроцедуры

Процедура ЗаполнитьВерсиюПараметровПоПредыдущейВерсии(НоваяВерсия, ПредыдущаяВерсия)
	
	СтрокаРеквизитовИсключений = "Ссылка,Проведен,Номер,Дата,ПометкаУдаления,ДокументОснование";
	
	ЗаполнитьЗначенияСвойств(НоваяВерсия, ПредыдущаяВерсия,, СтрокаРеквизитовИсключений);
	
	Для Каждого ТабЧасть Из НоваяВерсия.Метаданные().ТабличныеЧасти Цикл
		НоваяВерсия[ТабЧасть.Имя].Загрузить(ПредыдущаяВерсия[ТабЧасть.Имя].Выгрузить());
	КонецЦикла;
	
	НоваяВерсия.НомерДополнительногоСоглашения = НоваяВерсия.НомерДополнительногоСоглашения + 1;
	НоваяВерсия.НаименованиеВерсии = РаботаСДоговорамиКонтрагентовУХКлиентСервер.РеквизитыВерсииСоглашенияСтрокой(НоваяВерсия.НомерДополнительногоСоглашения, НоваяВерсия.Дата);
	
КонецПроцедуры

Процедура ЗаполнитьВерсиюСоглашенияПоДоговоруКонтрагента(ВерсияСоглашенияОбъект, ДоговорКонтрагентаОбъект)
	
	// Общая часть - заполнение одноименных реквизитов объекта. 
	ОбъектМетаданных = ВерсияСоглашенияОбъект.Метаданные();
	ОбъектМетаданныхДоговора = ДоговорКонтрагентаОбъект.Метаданные();
	Для Каждого ТекРеквизит Из ОбъектМетаданных.Реквизиты Цикл
		ИмяРеквизита = ТекРеквизит.Имя;
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта(ИмяРеквизита, ОбъектМетаданныхДоговора) Тогда
			ВерсияСоглашенияОбъект[ИмяРеквизита] = ДоговорКонтрагентаОбъект[ИмяРеквизита];
		КонецЕсли;
	КонецЦикла;
	
	Если ДоговорКонтрагентаОбъект.Ссылка.Пустая() Тогда
		Если ДоговорКонтрагентаОбъект.ПолучитьСсылкуНового().Пустая() Тогда
			МенеджерДоговора = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданныхДоговора.ПолноеИмя());
			ДоговорКонтрагентаОбъект.УстановитьСсылкуНового(МенеджерДоговора.ПолучитьСсылку());
		КонецЕсли;
		ВерсияСоглашенияОбъект.ДоговорКонтрагента = ДоговорКонтрагентаОбъект.ПолучитьСсылкуНового();
	Иначе
		ВерсияСоглашенияОбъект.ДоговорКонтрагента = ДоговорКонтрагентаОбъект.Ссылка;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Контрагент) Тогда
		ИмяРеквизитаКонтрагент = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяРеквизитаКонтрагент();
		ВерсияСоглашенияОбъект.Контрагент = ДоговорКонтрагентаОбъект[ИмяРеквизитаКонтрагент];
	КонецЕсли;
	
	ВерсияСоглашенияОбъект.ЗаполнитьВычисляемыеРеквизитыПоДаннымДоговора(ДоговорКонтрагентаОбъект);
	
КонецПроцедуры

Процедура НачальноеЗаполнениеВерсииСоглашения(ВерсияСоглашенияОбъект, КешОбработкиЗаполнения)

	// Первая версия всегда опорная.
	ВерсияСоглашенияОбъект.ОпорныйГрафик = Истина;
	
	ВерсияСоглашенияОбъект.НомерДополнительногоСоглашения = 1;
	
	Если ЗначениеЗаполнено(ВерсияСоглашенияОбъект.БазовыйДоговор) Тогда
		ВерсияСоглашенияОбъект.ВидСоглашения = Перечисления.ВидыСоглашений.Спецификация;
		ЗаполнитьВерсиюСоглашенияПоБазовомуДоговору(ВерсияСоглашенияОбъект);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ДатаНачалаДействия")
		И ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ДатаНачалаДействия) Тогда
		ВерсияСоглашенияОбъект.Дата = ВерсияСоглашенияОбъект.ДатаНачалаДействия;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Организация) Тогда
		ВерсияСоглашенияОбъект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Организация) Тогда
		ВерсияСоглашенияОбъект.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(ВерсияСоглашенияОбъект.Организация);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ВалютаВзаиморасчетов")
		И НЕ ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ВалютаВзаиморасчетов) Тогда
		ВерсияСоглашенияОбъект.ВалютаВзаиморасчетов = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ВерсияСоглашенияОбъект, "ОсновнаяВалютаПлатежей")
		И Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ОсновнаяВалютаПлатежей) Тогда
		ВерсияСоглашенияОбъект.ОсновнаяВалютаПлатежей = ВерсияСоглашенияОбъект.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ПроизводственныеКалендари) Тогда
		ЗаполнитьПроизводственныеКалендариПоУмолчанию(ВерсияСоглашенияОбъект.ПроизводственныеКалендари);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.Ответственный) Тогда
		ВерсияСоглашенияОбъект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ОсновнойЦФО) Тогда
		ВерсияСоглашенияОбъект.ОсновнойЦФО = ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ОсновнойПроект) Тогда
		ВерсияСоглашенияОбъект.ОсновнойПроект = ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект");
	КонецЕсли;
	
	ДоговорыКонтрагентовВстраиваниеУХ.НачальноеЗаполнениеВерсииСоглашения(ВерсияСоглашенияОбъект, КешОбработкиЗаполнения);
	
КонецПроцедуры

Процедура ЗаполнитьПроизводственныеКалендариПоУмолчанию(ПроизводственныеКалендари) Экспорт
	НоваяСтрока = ПроизводственныеКалендари.Добавить();
	НоваяСтрока.ПроизводственныйКалендарь = Константы.ПроизводственныйКалендарьПоУмолчанию.Получить();
КонецПроцедуры

Функция ПолучитьПроизводственныеКалендариВерсииСоглашения(ВерсияСоглашенияСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственныеКалендари.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит.ПроизводственныеКалендари КАК ПроизводственныеКалендари
	|ГДЕ
	|	ПроизводственныеКалендари.Ссылка = &Ссылка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВерсияСоглашенияКредит", ВерсияСоглашенияСсылка.Метаданные().Имя);
	Запрос.УстановитьПараметр("Ссылка", ВерсияСоглашенияСсылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПроизводственныйКалендарь");
	
КонецФункции

#Область РаботаСКовенантами
// Функция - Возвращает периодичность по периодичности ковенанта
//
// Параметры:
//  ПериодичностьКовенанта	 - ПеречислениеСсылка.ПериодичностьКовенантов 
// 
// Возвращаемое значение:
//   - ПеречислениеСсылка.Периодичность
//
Функция ПериодичностьПоПериодичностиКовенанта(ПериодичностьКовенанта)
	
	Индекс1 = Перечисления.ПериодичностьКовенантов.Индекс(ПериодичностьКовенанта);
	ИмяПериодичности = Метаданные.Перечисления.ПериодичностьКовенантов.ЗначенияПеречисления[Индекс1].Имя;
	
	МетЗначениеПеречисления = Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Найти(ИмяПериодичности);
	Индекс2 = Метаданные.Перечисления.Периодичность.ЗначенияПеречисления.Индекс(МетЗначениеПеречисления);
	ЗначениеПеречисления = Перечисления.Периодичность[Индекс2];
	
	Возврат ЗначениеПеречисления;
	
КонецФункции
#КонецОбласти
#КонецОбласти