#Область ПрограммныйИнтерфейс


// Открывает файл для просмотра
Процедура ПодготовитьИОткрытьФайлДляПросмотра(ИдентификаторФайла, Форма) Экспорт
	ДанныеФайлаДляПросмотра = СвязанныеФайлыВызовСервера
			.ПолучитьДанныеФайлаДляОткрытия(
					ИдентификаторФайла, Форма.УникальныйИдентификатор);
	
	Если ЗначениеЗаполнено(ДанныеФайлаДляПросмотра) Тогда
		ОткрытьФайлДляПросмотра(ДанныеФайлаДляПросмотра, Форма);
	КонецЕсли;
КонецПроцедуры

// Открывает диалог выбора файла. Выбранный файл помещает в базу и вызывает
//  переданный обработчик выбора. Если файл не выбран, то возвращает в него
//	результат Неопределено. Иначе, ссылку на файл в базе.
//
// Параметры:
//	Владелец - Ссылка - объект к которому будет прикреплен файл.
//  ИдентификаторФайла - Строка, необязательный - идентификатор уже существующего
//		 файла, если его нужно обновить.
//  ОписаниеОбработчикаДобавленияФайла - ОписаниеОповещения - обработчик, который
//		будет вызван после помещения файла. Параметры обработчика:
//			- Результат - СправочникСсылка.Файлы или Строка - идентификатор файла;
//			- ДополнительныеПараметры - значение из обработчика оповещения.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - для привязки
//		временного хранилища файла.
//
Процедура ДобавитьФайлВИБ(Владелец, ИдентификаторФайла="",
		ОписаниеОбработчикаДобавленияФайла,	УникальныйИдентификаторФормы) Экспорт
	
	ДопПараметры =Новый Структура;
	ДопПараметры.Вставить("Владелец", Владелец);
	ДопПараметры.Вставить("ИдентификаторФайла", ИдентификаторФайла);
	ДопПараметры.Вставить("ОписаниеОбработчикаДобавленияФайла",
			ОписаниеОбработчикаДобавленияФайла);
	ДопПараметры.Вставить("УникальныйИдентификаторФормы",
			УникальныйИдентификаторФормы);
	
	// Нужна полная информация о выбранном клиентом файле.
	// Поэтому не используем интерактивный режим НачатьПомещениеФайла.
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(
		РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выбор файла'");
	ДиалогВыбораФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
	
	ОповещениеОВыбореФайла = Новый ОписаниеОповещения(
			"ОбработатьВыборФайлаДляДобавленияВИБ", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(ОповещениеОВыбореФайла);
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции


Процедура ОткрытьФайлДляПросмотра(ДанныеФайлаДляПросмотра, Форма) Экспорт
	
	Если ДанныеФайлаДляПросмотра.ИспользоватьИнтеграциюС1СДокументооборот Тогда
		
		ИнтеграцияС1СДокументооборотКлиент.ОткрытьФайл(
			ДанныеФайлаДляПросмотра.Идентификатор,
			ДанныеФайлаДляПросмотра.Наименование,
			ДанныеФайлаДляПросмотра.Расширение,
			Форма.УникальныйИдентификатор);
			
	Иначе
		
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайлаДляПросмотра);
		
	КонецЕсли;
	
КонецПроцедуры

// Продолжение. Начало см. ДобавитьФайлВИБ()
Процедура ОбработатьВыборФайлаДляДобавленияВИБ(
					ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
			И ВыбранныеФайлы.Количество() > 0 Тогда
			
		ФайлКлиента = Новый Файл(ВыбранныеФайлы[0]);
		
		Если ПроверитьВозможностьЗагрузкиФайла(ФайлКлиента) Тогда
				
			// Сохраним описание файла клиента
			ДопПараметры.Вставить("ОписаниеФайла",
				РаботаСФайламиКлиентСервер.СведенияОФайле("Файл", ФайлКлиента));
			
			// Поместим файл во временное хранилище
			ОповещениеОРазмещении = Новый ОписаниеОповещения(
					"ОбработатьПомещениеФайловДляДобавленияВИБ", ЭтотОбъект, ДопПараметры);
			
			ПомещаемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ВыбранныеФайлы[0], "");
			ПомещаемыеФайлы.Добавить(Описание);
			НачатьПомещениеФайлов(ОповещениеОРазмещении, ПомещаемыеФайлы,,
				Ложь, ДопПараметры.УникальныйИдентификаторФормы);
		КонецЕсли;
			
	Иначе	
		// Для вызова обработчика выбора файла с пустым значением.
		ОбработатьПомещениеФайловДляДобавленияВИБ(Неопределено, ДопПараметры);	
	КонецЕсли;
КонецПроцедуры

// Продолжение. Начало см. ОбработатьВыборФайлаДляДобавленияВИБ()
Процедура ОбработатьПомещениеФайловДляДобавленияВИБ(
					ПомещенныеФайлы, ДопПараметры) Экспорт
					
	СсылкаНаФайл = Неопределено;							
	Если ПомещенныеФайлы <> Неопределено
			И ПомещенныеФайлы.Количество() > 0 Тогда
			
		ФайлКлиента = ДопПараметры.ОписаниеФайла;
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
		Если ПустаяСтрока(ДопПараметры.ИдентификаторФайла) Тогда
			
			ДокументID = "";
			ДокументТип = "";
			// сохраним файл в ИБ
			СсылкаНаФайл = СвязанныеФайлыВызовСервера.ДобавитьФайлИзВременногоХранилища(
				ДопПараметры.Владелец, 
				АдресВременногоХранилищаФайла, 
				ФайлКлиента.ИмяБезРасширения,
				ФайлКлиента.РасширениеБезТочки,
				ФайлКлиента.Размер,
				ФайлКлиента.ВремяИзменения,
				ФайлКлиента.ВремяИзмененияУниверсальное,
				ДокументID,
				ДокументТип);
				
		Иначе
			Результат = СвязанныеФайлыВызовСервера.ОбновитьФайлИзВременногоХранилища(
				ДопПараметры.ИдентификаторФайла,
				ДопПараметры.Владелец, 
				АдресВременногоХранилищаФайла, 
				ФайлКлиента.ИмяБезРасширения,
				ФайлКлиента.РасширениеБезТочки,
				ФайлКлиента.Размер,
				ФайлКлиента.ВремяИзменения,
				ФайлКлиента.ВремяИзмененияУниверсальное);
				
			Если Результат Тогда
				СсылкаНаФайл = СвязанныеФайлыВызовСервера.ПолучитьСсылкуНаФайл(
						ДопПараметры.ИдентификаторФайла);
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОбработчикаДобавленияФайла, СсылкаНаФайл);
КонецПроцедуры

// Проверяет расширение файла и размер.
Функция ПроверитьВозможностьЗагрузкиФайла(Файл,
                                          ВызыватьИсключение = Истина,
                                          МассивИменФайловСОшибками = Неопределено)
	
	ОбщиеНастройки = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ОбщиеНастройкиРаботыСФайлами;
	
	// Размер файла слишком большой.
	Если Файл.Размер() > ОбщиеНастройки.МаксимальныйРазмерФайла Тогда
		
		РазмерВМб     = Файл.Размер() / (1024 * 1024);
		РазмерВМбМакс = ОбщиеНастройки.МаксимальныйРазмерФайла / (1024 * 1024);
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Размер файла ""%1"" (%2 Мб)
			           |превышает максимально допустимый размер файла (%3 Мб).'"),
			Файл.Имя,
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.ПолноеИмя);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка расширения файла.
	Если Не ПроверитьРасширениеФайлаДляЗагрузки(Файл.Расширение, Ложь) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
			           |Обратитесь к администратору.'"),
			Файл.Расширение);
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение ОписаниеОшибки;
		КонецЕсли;
		
		Запись = Новый Структура;
		Запись.Вставить("ИмяФайла", Файл.ПолноеИмя);
		Запись.Вставить("Ошибка",   ОписаниеОшибки);
		
		МассивИменФайловСОшибками.Добавить(Запись);
		Возврат Ложь;
	КонецЕсли;
	
	// Временные файлы Word не импортируются.
	Если СтрНачинаетсяС(Файл.Имя, "~")
		И Файл.ПолучитьНевидимость() Тогда
		
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает Истина, если файл с таким расширением можно загружать.
Функция ПроверитьРасширениеФайлаДляЗагрузки(РасширениеФайла, ВызыватьИсключение = Истина)
	
	ОбщиеНастройки = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ОбщиеНастройкиРаботыСФайлами;
	Если НЕ ОбщиеНастройки.ЗапретЗагрузкиФайловПоРасширению Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если РаботаСФайламиСлужебныйКлиентСервер.РасширениеФайлаВСписке(
		ОбщиеНастройки.СписокЗапрещенныхРасширений, РасширениеФайла) Тогда
		
		Если ВызыватьИсключение Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов с расширением ""%1"" запрещена.
				           |Обратитесь к администратору.'"),
				РасширениеФайла);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


#КонецОбласти