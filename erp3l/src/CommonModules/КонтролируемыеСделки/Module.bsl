#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.КонтролируемыеСделкиОрганизаций);
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам контролируемых сделок.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "КонтролируемыеСделкиОрганизаций");
	
КонецПроцедуры

#КонецОбласти

// Процедура переопределяет свойства объекта, с которыми он будет отображен в форме Отчетность
// Параметры:
//  СвойстваОбъектов  - ТаблицаЗначений - Таблица, содержащая в себе описания ссылок, переданных в закладке Ссылка таблицы
//		Каждая колонка таблицы соответствует свойству объекта.
//		Таблица содержит следующие колонки:
//			- ДатаСоздания - Дата - Дата создания объекта
//			- Наименование - Строка - Наименование объекта, с которым он будет отображаться в форме Отчетность
//			- КодКонтролирующегоОргана - Строка - Код контролирующего органа, в который отправляется отчетности по ТКС
//			- ДатаНачала - Дата - Дата начала периода. Пустая, если дата начала периода отсутствует
//			- ДатаОкончания - Дата - Дата окончания периода. Пустая, если дата окончания периода отсутствует 
//			- ВариантОтчета - Строка(3) - Корректировочный номер (0 - Первичный)
//			- ПометкаУдаления - Булево - Истина, если объект помечен на удаление 
//			- Организация - СправочникСсылка.Организации - Организация, которой принадлежит объект
//			- Комментарий - Строка - Комментарий из объекта.
Процедура ОпределитьСвойстваОбъектовДляОтображенииВФормеОтчетность(СвойстваОбъектов) Экспорт
	
	МассивУведомлений = Новый Массив();
	Для Каждого СвойстваОбъекта Из СвойстваОбъектов Цикл
		Если ТипЗнч(СвойстваОбъекта.Ссылка) = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках") Тогда
			МассивУведомлений.Добавить(СвойстваОбъекта.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУведомлений.Количество() > 0 Тогда
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("МассивУведомлений", МассивУведомлений);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка,
		|	УведомлениеОКонтролируемыхСделках.Дата КАК ДатаСоздания,
		|	УведомлениеОКонтролируемыхСделках.Организация КАК Организация,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод КАК ДатаНачала,
		|	КОНЕЦПЕРИОДА(УведомлениеОКонтролируемыхСделках.ОтчетныйГод, ГОД) КАК ДатаОкончания,
		|	УведомлениеОКонтролируемыхСделках.ПометкаУдаления,
		|	ЕСТЬNULL(УведомлениеОКонтролируемыхСделках.Организация.РегистрацияВНалоговомОргане.Код, """") КАК КодКонтролирующегоОргана
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Ссылка В(&МассивУведомлений)";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СтрокиОбъектов = СвойстваОбъектов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
			Для Каждого СтрокаОбъекта Из СтрокиОбъектов Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОбъекта, Выборка);
				СтрокаОбъекта.Наименование = НСтр("ru = 'Уведомление о контролируемых сделках';
													|en = 'Controlled transaction notification '");
				СтрокаОбъекта.ВариантОтчета = Формат(Выборка.НомерКорректировки, "ЧЦ=3; ЧГ=0");
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает уведомление организации в отчетном году
//Параметры
// Организация - Справочник Организации
//ОтчетныйГод - Число(4,0)
//ТипУведомления - Число(1,0)
//	0 - Уведомление
//	1 - Корректировка
//НомерКорректировки - Число(3,0)
//ТипПоиска - Строка
//	Последний 	- Искать корректировку с наибольшим номером
//	Следующий 	- Искать корректировку с номером "НомерКорректировки" или следующую
//	Предыдущий 	- Искать корректировку с номером "НомерКорректировки" или предыдущую
//	Указанный 	- Искать только указанный номер корректировки 
//	(Возвращает неопределено если уведомление  не найдено).
Функция НайтиУведомлениеОрганизацииВОтчетномГоду(Организация, ОтчетныйГод, ТипУведомления = Неопределено, НомерКорректировки = Неопределено, ТипПоиска = "Последний") Экспорт
		
		Запрос = Новый Запрос();
		Запрос.Параметры.Вставить("Организация", Организация);
		Запрос.Параметры.Вставить("ОтчетныйГод", Дата(ОтчетныйГод, 1, 1));
		Запрос.Параметры.Вставить("НомерКорректировки", ?(ТипУведомления = 0, 0, ?(НомерКорректировки = Неопределено,0,НомерКорректировки)));
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	УведомлениеОКонтролируемыхСделках.Ссылка КАК Уведомление,
		|	УведомлениеОКонтролируемыхСделках.НомерКорректировки КАК НомерКорректировки,
		|	УведомлениеОКонтролируемыхСделках.Организация,
		|	УведомлениеОКонтролируемыхСделках.ОтчетныйГод,
		|	УведомлениеОКонтролируемыхСделках.ДатаФормированияСпискаСделок,
		|	УведомлениеОКонтролируемыхСделках.ДатаЗаполненияУведомления
		|ИЗ
		|	Документ.УведомлениеОКонтролируемыхСделках КАК УведомлениеОКонтролируемыхСделках
		|ГДЕ
		|	УведомлениеОКонтролируемыхСделках.Организация = &Организация
		|	И УведомлениеОКонтролируемыхСделках.ОтчетныйГод = &ОтчетныйГод
		|	И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки
		|	И НЕ УведомлениеОКонтролируемыхСделках.ПометкаУдаления";
		
		Если ТипУведомления = Неопределено И ТипПоиска = "Последний" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки","");	
		КонецЕсли;
		
		Если ТипПоиска = "Последний" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
		ИначеЕсли ТипПоиска = "Следующий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки ВОЗР";
		ИначеЕсли ТипПоиска = "Предыдущий" Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерКорректировки УБЫВ";
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки <= &НомерКорректировки");	
		ИначеЕсли ТипПоиска = "Указанный" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И УведомлениеОКонтролируемыхСделках.НомерКорректировки >= &НомерКорректировки",
													"И УведомлениеОКонтролируемыхСделках.НомерКорректировки = &НомерКорректировки");	
		КонецЕсли;	
		
		Запрос.Текст = ТекстЗапроса;
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			ТипУведомления = ?(Результат.НомерКорректировки = 0, 0, 1);
			НомерКорректировки = ?(ТипУведомления = 0, 0, Результат.НомерКорректировки);
			Возврат Результат.Уведомление;
		Иначе
			Возврат Неопределено;
		КонецЕсли;

КонецФункции

// Процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
//  Форма					- УправляемаяФорма - форма, из обработчика события которой происходит вызов процедуры;
//  Отказ					- Булево - признак отказа от создания формы;
//  СтандартнаяОбработка	- Булево - признак выполнения стандартной (системной) обработки события;
//  ДополнительныеПараметры	- Структура - дополнительные параметры.
//
Процедура ИнициализироватьДопСведенияДоговоровУчастниковКонтролируемыхСделок(Форма, Отказ, СтандартнаяОбработка, ДополнительныеПараметры) Экспорт
	
	Если НаФормуДобавляютсяДопСведенияДоговоровКонтролируемыхСделок(Форма) Тогда
		
		ДобавитьРеквизитыКонтролируемыхСделокНаФорму(Форма);
		
		ДобавитьЭлементыКонтролируемыхСделокНаФорму(Форма);
		
		ОбновитьДанныеДоговоровКонтролируемыхСделок(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьДопСведенияДоговоровУчастниковКонтролируемыхСделок(Форма, ТекущийОбъект, ДополнительныеПараметры) Экспорт
	
	Если НаФормуДобавляютсяДопСведенияДоговоровКонтролируемыхСделок(Форма) И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок) Тогда
		
		СтруктураИзмерений = РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.ИнициализироватьСтруктуруИзмерений();
		ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Форма.Объект);
		СтруктураИзмерений.ДоговорКонтрагента = Форма.Объект.Ссылка;
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			СтруктураИзмерений.Контрагент = Форма.Объект.ОрганизацияПолучатель;
		КонецЕсли;
		
		ДопСведения = РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.ИнициализироватьДопСведенияДоговоров();
		Для каждого ДопСведение Из ДопСведения Цикл
			ДопСведения.Вставить(ДопСведение.Ключ, Форма["КонтролируемыеСделки_" + ДопСведение.Ключ]);;
		КонецЦикла;
		
		РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.СохранитьДопСведенияДоговоров(СтруктураИзмерений, ДопСведения);
		
		Если ТипЗнч(Форма.Объект.Ссылка) = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
			СтруктураИзмерений.Организация = Форма.Объект.ОрганизацияПолучатель;
			СтруктураИзмерений.Контрагент = Форма.Объект.Организация;
			РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок.СохранитьДопСведенияДоговоров(СтруктураИзмерений, ДопСведения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОпределитьТаблицуОписанияОбъектовРегламентированнойОтчетности(ТаблицаОписания) Экспорт
	
	ОписаниеОбъекта = ТаблицаОписания.Добавить();
	ОписаниеОбъекта.ТипОбъекта = Тип("ДокументСсылка.УведомлениеОКонтролируемыхСделках");
	ОписаниеОбъекта.ВидКонтролирующегоОргана = Перечисления.ТипыКонтролирующихОрганов.ФНС;
	ОписаниеОбъекта.ГруппаВДереве = "Налоговая отчетность";
	ОписаниеОбъекта.ВидДокумента = Перечисления.СтраницыЖурналаОтчетность.Отчеты;
	ОписаниеОбъекта.НеОтправляетсяВКонтролирующийОрган = Ложь;
	ОписаниеОбъекта.ЯвляетсяАктуальным = Истина;
	ОписаниеОбъекта.ИмяОсновногоМакетаДляПечати = "";
	
КонецПроцедуры

Функция ПолучитьЛистыУведомления(Уведомление, Лист1АДляПечати = Неопределено) Экспорт
	
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);
	
	ДатаАктуальностиСведений = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("УведомлениеОКонтролируемойСделке", Уведомление);
	Запрос.УстановитьПараметр("ДатаАктуальностиСведений", ДатаАктуальностиСведений);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам_2012();
	Иначе
		Запрос.Текст = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьТекстЗапросаПоКонтролируемымСделкам_2018();
	КонецЕсли;
	Если Лист1АДляПечати <> Неопределено Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И НЕ КонтролируемаяСделка.ПометкаУдаления", "И НЕ КонтролируемаяСделка.ПометкаУдаления И КонтролируемаяСделка.Ссылка = &Лист1АДляПечати");
		Запрос.УстановитьПараметр("Лист1АДляПечати", Лист1АДляПечати);
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Листы1А.*
	|ИЗ
	|	Листы1А КАК Листы1А
	|УПОРЯДОЧИТЬ ПО
	|	Листы1А.НомерЛиста1А
	|;
	|
	|//////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Листы1Б.*
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|УПОРЯДОЧИТЬ ПО
	|	Листы1Б.НомерЛиста1А, Листы1Б.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел2.Контрагент КАК Контрагент,
	|	Раздел2.Строка020ТипОрганизации КАК Строка020ТипОрганизации,
	|	Раздел2.Строка030КакКодСтраныРегистрации КАК Строка030КакКодСтраныРегистрации,
	|	Раздел2.Строка040Наименование КАК Строка040Наименование,
	|	Раздел2.Строка040НаименованиеЛат КАК Строка040НаименованиеЛат,
	|	Раздел2.Строка050ИНН КАК Строка050ИНН,
	|	Раздел2.Строка060КПП КАК Строка060КПП,
	|	Раздел2.Строка070РегНомерВСтрокеРегистрации КАК Строка070РегНомерВСтрокеРегистрации,
	|	Раздел2.Строка080КодНалогВСтранеРегистрации КАК Строка080КодНалогВСтранеРегистрации,
	|	Раздел2.Строка090АдресИностраннойОрганизации КАК Строка090АдресИностраннойОрганизации
	|ИЗ
	|	Раздел2 КАК Раздел2
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел2.Строка040Наименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Раздел3.Контрагент КАК Контрагент,
	|	Раздел3.Строка020КодВидаДеятельности КАК Строка020КодВидаДеятельности,
	|	Раздел3.Строка030ИНН КАК Строка030ИНН,
	|	Раздел3.ФизическоеЛицо КАК ФизическоеЛицо,
	|	Раздел3.ДатаРождения КАК ДатаРождения,
	|	Раздел3.МестоРождения КАК МестоРождения,
	|	Раздел3.ГражданствоФизЛицСтрана КАК ГражданствоФизЛицСтрана,
	|	Раздел3.ВидКонтактнойИнформации КАК ВидКонтактнойИнформации,
	|	Раздел3.КонтактнаяИнформацияЗначенияПолей КАК КонтактнаяИнформацияЗначенияПолей,
	|	Раздел3.КонтактнаяИнформацияЗначениеJSON КАК КонтактнаяИнформацияЗначениеJSON,
	|	Раздел3.КонтактнаяИнформацияСтрана КАК КонтактнаяИнформацияСтрана,
	|	Раздел3.КонтактнаяИнформацияПредставление КАК КонтактнаяИнформацияПредставление,
	|	Раздел3.КонтактнаяИнформацияЗаРФСтрана КАК КонтактнаяИнформацияЗаРФСтрана,
	|	Раздел3.КонтактнаяИнформацияЗаРФПредставление КАК КонтактнаяИнформацияЗаРФПредставление,
	|	Раздел3.ВидДокумента КАК ВидДокумента,
	|	Раздел3.ДокументСерия КАК ДокументСерия,
	|	Раздел3.ДокументНомер КАК ДокументНомер,
	|	Раздел3.ДокументКемВыдан КАК ДокументКемВыдан,
	|	Раздел3.ДокументДатаВыдачи КАК ДокументДатаВыдачи,
	|	Раздел3.Фамилия КАК Фамилия,
	|	Раздел3.Имя КАК Имя,
	|	Раздел3.Отчество КАК Отчество
	|ИЗ
	|	Раздел3 КАК Раздел3
	|
	|УПОРЯДОЧИТЬ ПО
	|	Раздел3.Фамилия,
	|	Раздел3.Имя,
	|	Раздел3.Отчество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка КАК Сделка,
	|	Листы1А.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1Б.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК СведенияОКомиссионере,
	|	""0"" КАК СведОтносительноАгента
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Комиссионер,
	|	ИСТИНА,
	|	""1""
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО Листы1Б.Сделка = Листы1А.Сделка
	|ГДЕ
	|	Листы1Б.ТипКомиссионера = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛиста1А,
	|	СведенияОКомиссионере УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка КАК Сделка,
	|	Листы1А.НомерЛиста1А КАК НомерЛиста1А,
	|	Листы1Б.Контрагент КАК Контрагент,
	|	ЛОЖЬ КАК СведенияОКомиссионере,
	|	""0"" КАК СведОтносительноАгента
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО (Листы1А.Сделка = Листы1Б.Сделка)
	|ГДЕ
	|	Листы1Б.ТипКонтрагента = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Листы1А.Сделка,
	|	Листы1А.НомерЛиста1А,
	|	Листы1Б.Комиссионер,
	|	ИСТИНА,
	|	""1""
	|ИЗ
	|	Листы1Б КАК Листы1Б
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Листы1А КАК Листы1А
	|		ПО Листы1Б.Сделка = Листы1А.Сделка
	|ГДЕ
	|	Листы1Б.ТипКомиссионера = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЛиста1А,
	|	СведенияОКомиссионере УБЫВ";
	
	Результат = Запрос.ВыполнитьПакет();
	Листы1А = Результат[0].Выгрузить(); 
	Листы1Б = Результат[1].Выгрузить(); 
	Раздел2 = Результат[2].Выгрузить(); 
	Раздел3 = Результат[3].Выгрузить();
	Листы2 = Результат[4].Выгрузить(); 
	Листы3 = Результат[5].Выгрузить();

	Листы1А.Индексы.Добавить("Сделка");
	Листы1Б.Индексы.Добавить("Сделка");
	Раздел2.Индексы.Добавить("Контрагент");
	Раздел3.Индексы.Добавить("Контрагент");
	Листы2.Индексы.Добавить("Сделка");
	Листы3.Индексы.Добавить("Сделка");
	
	ОписаниеТипаНомераУчастникаСделки = Новый ОписаниеТипов("Число", 
		Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный));
	
	Раздел2.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	Раздел3.Колонки.Добавить("НомерКонтрагента", ОписаниеТипаНомераУчастникаСделки);
	
	НомерКонтрагента = 1;
	Для Каждого Контрагент Из Раздел2 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;
	Для Каждого Контрагент Из Раздел3 Цикл
		Контрагент.НомерКонтрагента = НомерКонтрагента;
		НомерКонтрагента = НомерКонтрагента + 1;
	КонецЦикла;

	ТипНомераСтраницы = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный));
	КоличествоЛистовРаздела = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 0, ДопустимыйЗнак.Неотрицательный));
	
	Листы1А.Колонки.Добавить("Количество1Б", КоличествоЛистовРаздела);
	
	Листы1Б.Колонки.Добавить("Строка050НомерУчастникаСделки", ОписаниеТипаНомераУчастникаСделки);
	
	Листы = Новый ТаблицаЗначений();
	Листы.Колонки.Добавить("Раздел",             Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(50)));
	Листы.Колонки.Добавить("НомерСтрокиРаздела", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,0)));
	
	ДобавитьЛистВУведомление(Листы, "ТитульныйЛист", 0);
	// Для организации физического-лица титульные листы содержат 2 листа
	Если СведенияОбУведомлении.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо
		И СокрЛП(СведенияОбУведомлении.ИНН) = "" Тогда
		ДобавитьЛистВУведомление(Листы, "ТитульныйЛистФизическоеЛицо", 0);
	КонецЕсли;
	
	// нумерация листов раздела 1А и 1Б
	Для каждого Лист1А Из Листы1А Цикл
		
		ДобавитьЛистВУведомление(Листы, "Лист1А", Листы1А.Индекс(Лист1А));
		
		Отбор = Новый Структура("Сделка", Лист1А.Сделка);
		
		СписокЛистов1Б = Листы1Б.НайтиСтроки(Отбор);
		Лист1А.Количество1Б = СписокЛистов1Б.Количество();
		
		Для Каждого Лист1Б Из СписокЛистов1Б Цикл
			
			ДобавитьЛистВУведомление(Листы, "Лист1Б", Листы1Б.Индекс(Лист1Б));
			
			Если Лист1Б.ТипКонтрагента = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
				СведенияОКонтрагенте = Раздел3.Найти(Лист1Б.Контрагент, "Контрагент");
			Иначе
				СведенияОКонтрагенте = Раздел2.Найти(Лист1Б.Контрагент, "Контрагент");
			КонецЕсли;
			Если СведенияОКонтрагенте <> Неопределено Тогда
				Лист1Б.Строка050НомерУчастникаСделки = СведенияОКонтрагенте.НомерКонтрагента;
			КонецЕсли;
			
		КонецЦикла;
		
		СписокЛистов2 = Листы2.НайтиСтроки(Отбор);
		Для Каждого Лист2 Из СписокЛистов2 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел2", Листы2.Индекс(Лист2));
		КонецЦикла;
		
		СписокЛистов3 = Листы3.НайтиСтроки(Отбор);
		Для Каждого Лист3 Из СписокЛистов3 Цикл
			ДобавитьЛистВУведомление(Листы, "Раздел3", Листы3.Индекс(Лист3));
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("Листы", Листы);
	СтруктураВозврата.Вставить("ЛистыРаздела1А", Листы1А);
	СтруктураВозврата.Вставить("ЛистыРаздела1Б", Листы1Б);
	СтруктураВозврата.Вставить("ЛистыРаздела2", Листы2);
	СтруктураВозврата.Вставить("ЛистыРаздела3", Листы3);
	СтруктураВозврата.Вставить("ДанныеРаздела2", Раздел2);
	СтруктураВозврата.Вставить("ДанныеРаздела3", Раздел3);
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура ДобавитьЛистВУведомление(Знач Листы, Знач Раздел, Знач НомерСтрокиРаздела)
	
	Лист = Листы.Добавить();
	Лист.Раздел = Раздел;
	Лист.НомерСтрокиРаздела = НомерСтрокиРаздела;
	
КонецПроцедуры

Функция ПолучитьКодВидаДокументаПоВидуДокумента(ДокументВид) Экспорт 
	
	Если ЗначениеЗаполнено(ДокументВид) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументВид, "КодМВД");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

Функция СписокОфшоров(Знач ОтчетныйГод) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", КонтролируемыеСделкиПовтИсп.ПереченьКодовСтранОфшоров(ОтчетныйГод));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтраныМира.Ссылка КАК СтранаРегистрации
	|ИЗ
	|	Справочник.СтраныМира КАК СтраныМира
	|ГДЕ
	|	СтраныМира.Код В(&МассивКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СтранаРегистрации");
	
КонецФункции

Функция СписокТоваровМировойБиржевойТорговли() Экспорт
		
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("МассивКодов", КонтролируемыеСделкиПовтИсп.ПереченьКодовТНВЭДМировойБиржевойТорговли());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК ПредметСделки
	|ИЗ
	|	Справочник.КлассификаторТНВЭД КАК КлассификаторТНВЭД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО КлассификаторТНВЭД.Ссылка = Номенклатура.КодТНВЭД
	|ГДЕ
	|	КлассификаторТНВЭД.Код В(&МассивКодов)";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПредметСделки");
	
КонецФункции

Функция ПредставлениеУведомления(Уведомление, ШаблонТекста) Экспорт
	
	Если Уведомление = ПредопределенноеЗначение("Документ.УведомлениеОКонтролируемыхСделках.ПустаяСсылка") Тогда
		Возврат "";
	КонецЕсли;
	
	ПараметрыУведомления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Уведомление, "Организация, НомерКорректировки, ОтчетныйГод");
	
	Представление = ?(ПараметрыУведомления.НомерКорректировки > 0, 
		НСтр("ru = '%ШаблонТекста% корректировки №%НомерКорректировки% уведомления ""%Организация%"" за %Год%';
			|en = '%ШаблонТекста% of adjustment No.%НомерКорректировки% of notification ""%Организация%"" dated %Год%'"),
		НСтр("ru = '%ШаблонТекста% уведомления ""%Организация%"" за %Год%';
			|en = '%ШаблонТекста% of notification ""%Организация%"" dated  %Год%'"));
	Представление = СтрЗаменить(Представление, "%НомерКорректировки%", ПараметрыУведомления.НомерКорректировки);
	Представление = СтрЗаменить(Представление, "%Организация%", ПараметрыУведомления.Организация);
	Представление = СтрЗаменить(Представление, "%Год%", Формат(ПараметрыУведомления.ОтчетныйГод,"ДФ=yyyy"));
	Представление = СтрЗаменить(Представление, "%ШаблонТекста%", ШаблонТекста);
	
	Возврат Представление;
	
КонецФункции

Функция СписокОрганизацийИсключаяУказанную(ИсключающаясяОрганизация, ВключатьПомеченныеНаУдаление = Ложь, ВключатьУправленческуюОрганизацию = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка <> &ЭтаОрганизация
	|	И Организации.ГоловнаяОрганизация <> &ЭтаОрганизация
	|	И (Организации.ПометкаУдаления = &ВключатьПомеченныеНаУдаление
	|	ИЛИ Не Организации.ПометкаУдаления)
	|	И (Организации.Предопределенный = &ИспользоватьУпрОрганизацию
	|			ИЛИ НЕ Организации.Предопределенный)");
	
	Запрос.УстановитьПараметр("ЭтаОрганизация", ИсключающаясяОрганизация);
	Запрос.УстановитьПараметр("ВключатьПомеченныеНаУдаление", ВключатьПомеченныеНаУдаление);
	ИспользоватьУпрОрганизацию = ?(ВключатьУправленческуюОрганизацию, Истина, ПолучитьФункциональнуюОпцию("ИспользоватьУправленческуюОрганизацию"));
	Запрос.УстановитьПараметр("ИспользоватьУпрОрганизацию", ИспользоватьУпрОрганизацию);
	
	ОрганизацииДляВыбора = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат ОрганизацииДляВыбора;
	
КонецФункции

#Область НумерацияДокументов

Процедура ПеренумерацияКонтролируемыхСделокУведомления(Уведомление) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	КонтролируемаяСделка.Ссылка КАК Документ
	               |ИЗ
	               |	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	               |ГДЕ
	               |	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	               |	И НЕ КонтролируемаяСделка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	КонтролируемаяСделка.Номер";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	
	Сч = 1;
	
	Выборка = Запрос.Выполнить().Выбрать();
	СчетчикТранзакции = 0;
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Документ.Номер <> Сч Тогда
			КонтролируемаяСделка = Выборка.Документ.ПолучитьОбъект();
			КонтролируемаяСделка.Номер = Сч;
			КонтролируемаяСделка.Записать();
		КонецЕсли;
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция НомераКонтролируемыхСделокУведомленияКорректны(Уведомление) Экспорт
	
	НомераКорректны = Истина;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КонтролируемаяСделка.Ссылка) КАК Количество,
	|	ЕСТЬNULL(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК МаксимальныйНомер,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КонтролируемаяСделка.Номер) КАК КоличествоРазличных
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|ГДЕ
	|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	РезультатПроверки = Запрос.Выполнить().Выбрать();
	
	Если РезультатПроверки.Следующий() Тогда
		
		НомераКорректны = (РезультатПроверки.МаксимальныйНомер = РезультатПроверки.Количество
			И РезультатПроверки.МаксимальныйНомер = РезультатПроверки.КоличествоРазличных);
		
	КонецЕсли;
		
	Возврат НомераКорректны;
	
КонецФункции

Функция ПолучитьСледующийНомерКонтролируемойСделкиУведомления(Уведомление) Экспорт
	
	Номер = 0;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(КонтролируемаяСделка.Номер), 0) КАК Номер
	|ИЗ
	|	Документ.КонтролируемаяСделка КАК КонтролируемаяСделка
	|ГДЕ
	|	КонтролируемаяСделка.УведомлениеОКонтролируемойСделке = &Уведомление
	|	И НЕ КонтролируемаяСделка.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Уведомление", Уведомление);
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Номер = Результат.Номер;
		
	КонецЕсли;
	
	Возврат Номер + 1;
	
	
КонецФункции

Процедура ПолучитьЛистыУведомленияВФоне(ПараметрыОтчета, АдресХранилища) Экспорт 
	
	Уведомление = ПараметрыОтчета.Уведомление;
	Результат = ПолучитьЛистыУведомления(Уведомление);
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьСписокГоловныхОрганизаций(СписокОрганизаций) Экспорт
	
	СписокОрганизаций.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьПравильностьЗаполненияКонтрагентаРегистра(Отказ, ТаблицаЗаписей, ОписаниеКлючаЗаписи) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("КлючиРегистра", ТаблицаЗаписей);
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ КлючиРегистра
	|ИЗ
	|	&КлючиРегистра КАК КлючиРегистра
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	КлючиРегистра.Контрагент КАК Контрагент
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КлючиРегистра КАК КлючиРегистра
	|		ПО Контрагенты.Ссылка = КлючиРегистра.Контрагент
	|ГДЕ
	|	Контрагенты.Ссылка В
	|			(ВЫБРАТЬ
	|				КлючиРегистра.Контрагент
	|			ИЗ
	|				КлючиРегистра КАК КлючиРегистра)
	|	И Контрагенты.ОбособленноеПодразделение = ИСТИНА";
	
	ПоляКлюча = "";
	Для Каждого ОписаниеКлюча Из ОписаниеКлючаЗаписи Цикл
		ПоляКлюча = ПоляКлюча + ?(ПоляКлюча = "", "", ", ") + ОписаниеКлюча.Ключ + " КАК " + ОписаниеКлюча.Ключ;
	КонецЦикла;
	
	Запрос.Текст = СтрЗаменить(ТекстЗапроса, "КлючиРегистра.Контрагент КАК Контрагент", ПоляКлюча);
	
	Ошибка = Запрос.Выполнить().Выбрать();
	
	Пока Ошибка.Следующий() Цикл
		
		ТекстСообщения = НСтр("ru = 'Контрагент ""%1"" является обособленным подразделением. Можно выбирать только головного контрагента';
								|en = 'The ""%1"" counterparty is a branch office. You can select only the main counterparty.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Ошибка.Наименование);
		
		ЗаполнитьЗначенияСвойств(ОписаниеКлючаЗаписи, Ошибка);
		КлючЗаписи = РегистрыСведений.ВзаимозависимыеЛица.СоздатьКлючЗаписи(ОписаниеКлючаЗаписи);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, КлючЗаписи, "Запись.Контрагент", , Отказ);
		
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти

#Область ПечатьУведомления

Функция ПечатьКонтролируемыхСделок(МассивСделок, ОбъектыПечати) Экспорт
	
	ТабличныйДокументЛисты1А = Новый ТабличныйДокумент;
	ТабличныйДокументЛисты1А.АвтоМасштаб         = Истина;
	ТабличныйДокументЛисты1А.ПолеСверху          = 5;
	ТабличныйДокументЛисты1А.ПолеСнизу           = 5;
	ТабличныйДокументЛисты1А.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ТабличныйДокументЛисты1А.КлючПараметровПечати = "Документ.УведомлениеОКонтролируемыхСделках";
	
	Если НЕ ЗначениеЗаполнено(МассивСделок) Тогда
		Возврат ТабличныйДокументЛисты1А;
	КонецЕсли;
	
	Для Каждого КонтролируемаяСделка Из МассивСделок Цикл
		ПечатьКонтролируемойСделки(КонтролируемаяСделка, ТабличныйДокументЛисты1А, ОбъектыПечати);
	КонецЦикла;
	
	Возврат ТабличныйДокументЛисты1А;

КонецФункции

Функция ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении)
	
	Лист = ЛистыУведомления.Листы[НомерЛиста - 1];
	
	ИменаМакетов = СведенияОбУведомлении.ПараметрыВерсии.Макеты;
	Макет = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьМакет(ИменаМакетов[Лист.Раздел]);
	УстановитьНомерСтраницы(Макет, НомерЛиста, СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераСтраница);
	
	Если Лист.Раздел = "ТитульныйЛист" Тогда
		ДанныеЛиста = ДанныеЗаполненияЛиста1(СведенияОбУведомлении);
	ИначеЕсли Лист.Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ДанныеЛиста = ДанныеЗаполненияЛиста2(СведенияОбУведомлении);
	ИначеЕсли Лист.Раздел = "Лист1А" Тогда
		Лист1А = ЛистыУведомления.ЛистыРаздела1А[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1А(СведенияОбУведомлении, Лист1А);
	ИначеЕсли Лист.Раздел = "Лист1Б" Тогда
		Лист1Б = ЛистыУведомления.ЛистыРаздела1Б[Лист.НомерСтрокиРаздела];
		ДанныеЛиста = ДанныеЗаполненияЛиста1Б(СведенияОбУведомлении, Лист1Б);
	ИначеЕсли Лист.Раздел = "Раздел2" Тогда
		Лист2 = ЛистыУведомления.ЛистыРаздела2[Лист.НомерСтрокиРаздела];
		ДанныеРаздела2 = ЛистыУведомления.ДанныеРаздела2;
		ДанныеЛиста = ДанныеЗаполненияРаздела2(СведенияОбУведомлении, Лист2, ДанныеРаздела2);
	ИначеЕсли Лист.Раздел = "Раздел3" Тогда
		Лист3 = ЛистыУведомления.ЛистыРаздела3[Лист.НомерСтрокиРаздела];
		ДанныеРаздела3 = ЛистыУведомления.ДанныеРаздела3;
		ДанныеЛиста = ДанныеЗаполненияРаздела3(СведенияОбУведомлении, Лист3, ДанныеРаздела3);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ДанныеЛиста);
	
	Если ЕстьШтрихкод(Макет.Рисунки) Тогда
		ЗаполнитьШтрихкод(Макет.Рисунки.КартинкаШтрихкода);
	КонецЕсли;
	
	Возврат Макет;
	
КонецФункции

Процедура СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ПоследнийЛист, ТабличныйДокумент) Экспорт
	
	Для НомерЛиста = ПервыйЛист По ПоследнийЛист Цикл
		
		ЛистУведомления = ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении);
		
		ТабличныйДокумент.Вывести(ЛистУведомления);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
	КонецЦикла
	
КонецПроцедуры

Процедура ПечатьКонтролируемойСделки(КонтролируемаяСделка, ТабДокумент, ОбъектыПечати)
	
	Если НЕ ЗначениеЗаполнено(КонтролируемаяСделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
	
	Уведомление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КонтролируемаяСделка, "УведомлениеОКонтролируемойСделке");
	
	СведенияОбУведомлении = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьСведенияОбУведомлении(Уведомление);
	
	ЛистыУведомления = КонтролируемыеСделки.ПолучитьЛистыУведомления(Уведомление, КонтролируемаяСделка);
	Листы = ЛистыУведомления.Листы;
	
	Если Листы.Количество()>1 
		И Листы[1].Раздел = "ТитульныйЛистФизическоеЛицо" Тогда
		ПервыйЛист = 3;
	Иначе
		ПервыйЛист = 2;
	КонецЕсли;
	
	СформироватьЛистыУведомления(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ЛистыУведомления.Листы.Количество(), ТабДокумент);
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, 
		НомерСтрокиНачало, ОбъектыПечати, КонтролируемаяСделка);
	
КонецПроцедуры

Функция ПакетЛистовУведомленияДляПечати(ЛистыУведомления, СведенияОбУведомлении, ПервыйЛист, ПоследнийЛист, УникальныйИдентификаторФормы) Экспорт
	
	ПакетЛистов = Новый ПакетОтображаемыхДокументов;
	
	Для НомерЛиста = ПервыйЛист По ПоследнийЛист Цикл
		
		ЛистУведомления = ЛистУведомления(НомерЛиста, ЛистыУведомления, СведенияОбУведомлении);
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.Вывести(ЛистУведомления);
		
		УстановитьПараметрыПечатиУведомления(ТабличныйДокумент);
		
		ПакетЛистов.Состав.Добавить().Данные = ПоместитьВоВременноеХранилище(ТабличныйДокумент, УникальныйИдентификаторФормы);
		
	КонецЦикла;
	
	Возврат ПакетЛистов
	
КонецФункции

#КонецОбласти

#Область ДанныеЗаполнения

Функция ДанныеЗаполненияЛиста1(СведенияОбУведомлении)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "СтраницВсего_", СведенияОбУведомлении.ВсегоЛистов,
		СведенияОбУведомлении.ПараметрыВерсии.ДлинаНомераСтраница, 0);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерКорректировки_", СведенияОбУведомлении.НомерКорректировки, 3, 0);
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Налогоплательщик_", ОсновныеСведенияВыгрузки.НаименованиеДляЛиста1, 160, 40);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОтчетныйГод_", ОсновныеСведенияВыгрузки.ОтчетГод);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НомерКонтактногоТелефона_", ОсновныеСведенияВыгрузки.Тлф);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ЭлектроннаяПочта_", ОсновныеСведенияВыгрузки.ЭлПочта);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодНО_", ОсновныеСведенияВыгрузки.КодНО);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодМестаПредставления_", ОсновныеСведенияВыгрузки.ПоМесту);
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКВЭД") Тогда
		ОКВЭД = РазложитьОКВЭДВСтроку(ОсновныеСведенияВыгрузки.ОКВЭД);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОКВЭД_", ОКВЭД);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКАТО") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПоОКАТО_", ОсновныеСведенияВыгрузки.ОКАТО);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ОКТМО") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодПоОКТМО_", ОсновныеСведенияВыгрузки.ОКТМО);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ПрПодп_", ОсновныеСведенияВыгрузки.ПрПодп);
	
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпФамилия") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантФамилия_", ОсновныеСведенияВыгрузки.ПодпФамилия);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпИмя") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантИмя_", ОсновныеСведенияВыгрузки.ПодпИмя);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("ПодпОтчество") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргПодписантОтчество_", ОсновныеСведенияВыгрузки.ПодпОтчество);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимДокПодп") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ДокУпПред_", ОсновныеСведенияВыгрузки.НаимДокПодп);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НаимОргПодп") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОргУп_", ОсновныеСведенияВыгрузки.НаимОргПодп);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("ФормРеорг") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ФормРеорг_", ОсновныеСведенияВыгрузки.ФормРеорг);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИННЮЛРеорг_", ОсновныеСведенияВыгрузки.ИННЮЛРеорг);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КППЮЛРеорг_", ОсновныеСведенияВыгрузки.КППЮЛРеорг);
	КонецЕсли;
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаПодписи", ТекущаяДатаСеанса());
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияЛиста2(СведенияОбУведомлении)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДатаОкончания = КонецГода(СведенияОбУведомлении.ОтчетныйГод);
	ФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияОбУведомлении.Организация, "ИндивидуальныйПредприниматель");
	Если Не ЗначениеЗаполнено(ФизическоеЛицо) Тогда 
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ОсновныеСведенияВыгрузки = Документы.УведомлениеОКонтролируемыхСделках.ПолучитьОсновныеСведенияУведомленияДляВыгрузки(СведенияОбУведомлении.Уведомление);
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаРождения_", ОсновныеСведенияВыгрузки.НПФЛДатаРожд);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоРождения_", ОсновныеСведенияВыгрузки.НПФЛМестоРожд);
	ДанныеЗаполнения.Вставить("Гражданство", ОсновныеСведенияВыгрузки.НПФЛНалГражд);
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛОКСМ") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", ОсновныеСведенияВыгрузки.НПФЛОКСМ);
	КонецЕсли;
	Если ОсновныеСведенияВыгрузки.Свойство("НПФЛКодВидДок") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВидаДокумента_", ОсновныеСведенияВыгрузки.НПФЛКодВидДок);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СерияНомер_", ОсновныеСведенияВыгрузки.НПФЛСерНомДок);
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаВыдачи_", ОсновныеСведенияВыгрузки.НПФЛДатаДок);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОрганВыдавшийДокумент_", ОсновныеСведенияВыгрузки.НПФЛВыдДок);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("СтатусНалогоплательщика", ОсновныеСведенияВыгрузки.НПФЛСтатусНП);
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018()
		И ОсновныеСведенияВыгрузки.Свойство("НПФЛПрАдр") Тогда
		ДанныеЗаполнения.Вставить("МестоЖительства", ОсновныеСведенияВыгрузки.НПФЛПрАдр);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Индекс_", ОсновныеСведенияВыгрузки.НПФЛИндекс);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегионКод_", ОсновныеСведенияВыгрузки.НПФЛКодРегион);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Район_", ОсновныеСведенияВыгрузки.НПФЛРайон);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Город_", ОсновныеСведенияВыгрузки.НПФЛГород);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаселенныйПункт_", ОсновныеСведенияВыгрузки.НПФЛНаселПункт);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Улица_", ОсновныеСведенияВыгрузки.НПФЛУлица);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Дом_", ОсновныеСведенияВыгрузки.НПФЛДом);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НПФЛКорпус", ОсновныеСведенияВыгрузки.Корпус_);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НПФЛКварт", ОсновныеСведенияВыгрузки.Квартира_);
	КонецЕсли;
	
	Если ОсновныеСведенияВыгрузки.Свойство("АдрИнКодСтраны") Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраныОКСМ_", ОсновныеСведенияВыгрузки.АдрИнКодСтраны);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресЗаПределамиРФ_", ОсновныеСведенияВыгрузки.АдрИнТекст);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияЛиста1А(СведенияОбУведомлении, Лист1А)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1А.Сделка);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерЛиста1А_", Лист1А.НомерЛиста1А, 6, 0);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СделкаОтИмениКомиссионера", Лист1А.СделкаСовАгент);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П100", Лист1А.Строка100Взаимозависимость);
	ДанныеЗаполнения.Вставить("П121", Лист1А.Строка121СтороныВзаимозависимыПоКодексу);
	ДанныеЗаполнения.Вставить("П122", Лист1А.Строка122СделкаВОбластиВнешнейТорговли);
	ДанныеЗаполнения.Вставить("П123", Лист1А.Строка123СделкаСКонтрагентомСЛьготнымНалогообложением);
	ДанныеЗаполнения.Вставить("П124", Лист1А.Строка124СделкаСНезависимымПосредником);
	
	ДанныеЗаполнения.Вставить("П131", Лист1А.ОснованиеКонтролируемости131);
	ДанныеЗаполнения.Вставить("П132", Лист1А.ОснованиеКонтролируемости132);
	ДанныеЗаполнения.Вставить("П133", Лист1А.ОснованиеКонтролируемости133);
	ДанныеЗаполнения.Вставить("П134", Лист1А.ОснованиеКонтролируемости134);
	ДанныеЗаполнения.Вставить("П135", Лист1А.ОснованиеКонтролируемости135);
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("П136", Лист1А.ОснованиеКонтролируемости136);
		ДанныеЗаполнения.Вставить("П137", Лист1А.ОснованиеКонтролируемости137);
		ДанныеЗаполнения.Вставить("П138", Лист1А.ОснованиеКонтролируемости138);
		ДанныеЗаполнения.Вставить("П139", Лист1А.ОснованиеКонтролируемости139);
		ДанныеЗаполнения.Вставить("П140", Лист1А.ОснованиеКонтролируемости140);
	ИначеЕсли СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2019() Тогда
		ДанныеЗаполнения.Вставить("П136", Лист1А.ОснованиеКонтролируемости136);
		ДанныеЗаполнения.Вставить("П137", Лист1А.ОснованиеКонтролируемости137);
		ДанныеЗаполнения.Вставить("П138", Лист1А.ОснованиеКонтролируемости138);
	КонецЕсли;
	
	ДанныеЗаполнения.Вставить("П200", "0");
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П210_", Лист1А.Строка210КодНаименованияСделки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П211_", Лист1А.Строка211КодСтороныСделки);
	ДанныеЗаполнения.Вставить("П220", Лист1А.Строка220ПризнакОпределенияЦеныСделки);
	ДанныеЗаполнения.Вставить("П2201", Лист1А.Строка220_1Комментарий);
	ДанныеЗаполнения.Вставить("П230", Лист1А.Строка230КодОпределенияЦены);
	ДанныеЗаполнения.Вставить("П2301", Лист1А.Строка230_1Комментарий);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П240_", Лист1А.Строка240КодМетодовЦенообразования);
	ДанныеЗаполнения.Вставить("П2401", Лист1А.Строка240_1Комментарий);
	
	ДанныеЗаполнения.Вставить("П251", Лист1А.Строка251);
	ДанныеЗаполнения.Вставить("П252", Лист1А.Строка252);
	ДанныеЗаполнения.Вставить("П253", Лист1А.Строка253);
	ДанныеЗаполнения.Вставить("П254", Лист1А.Строка254);
	ДанныеЗаполнения.Вставить("П255", Лист1А.Строка255);
	ДанныеЗаполнения.Вставить("П256", Лист1А.Строка256);
	ДанныеЗаполнения.Вставить("П257", Лист1А.Строка257);
	ДанныеЗаполнения.Вставить("П258", Лист1А.Строка258);
	ДанныеЗаполнения.Вставить("П259", Лист1А.Строка259);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П260_", Лист1А.Строка260КоличествоУчастниковСделки, 3, 0);
	ДанныеЗаполнения.Вставить("П2601", Лист1А.Строка260_1Комментарий);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П300_", Лист1А.Строка300СуммаДоходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П301_", Лист1А.Строка301СуммаРегулируемыхДоходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П310_", Лист1А.Строка310СуммаРасходов, 15, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П311_", Лист1А.Строка311СуммаРегулируемыхРасходов, 15, 0);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияЛиста1Б(СведенияОбУведомлении, Лист1Б)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	
	ДанныеЗаполнения.Вставить("Сделка", Лист1Б.Сделка);
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерСделки1А_", Лист1Б.НомерЛиста1А, 6, 0);
	
	ДанныеЗаполнения.Вставить("П020", Лист1Б.Строка020ТипПредмета);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П030_", Лист1Б.Строка030НаименованиеПредмета);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_", Лист1Б.Строка040КодПоТНВЭД);
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", Лист1Б.Строка043КодПоОКП);
	ИначеЕсли СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2017() Тогда
		КодОКПД2 = КодПоОКПИзКодаПоОКПД2(Лист1Б.Строка043КодПоОКПД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", КодОКПД2);
	Иначе
		КодОКПД2 = РазложитьОКПД2ВСтроку(Лист1Б.Строка043КодПоОКПД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П043_", КодОКПД2);
	КонецЕсли;
	
	Если СведенияОбУведомлении.ВерсияУведомления = КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2012() Тогда
		КодОКВЭД = РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П045_", КодОКВЭД);
	Иначе
		КодОКВЭД = РазложитьОКВЭДВСтроку(Лист1Б.Строка045КодОКВЭД2);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П045_", КодОКВЭД);
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П050_", Лист1Б.Строка050НомерУчастникаСделки, 4, 0);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П060_", Лист1Б.Строка060НомерДоговора);
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "П065_", Лист1Б.Строка065ДатаДоговора);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П070_", Лист1Б.Строка070КодСтраныПроисхождения);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_С_", Лист1Б.Строка080КодСтраныОтправки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Р_", Лист1Б.Строка080КодРегионаОтправки);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Г_", Лист1Б.Строка080ГородОтправки);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_Н_", Лист1Б.Строка080НаселенныйПунктОтправки);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_С_", Лист1Б.Строка090КодСтраныСовершенияСделки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Р_", Лист1Б.Строка090КодРегионаСовершенияСделки);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Г_", Лист1Б.Строка090ГородСовершенияСделки);
	КонецЕсли;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_Н_", Лист1Б.Строка090НаселенныйПунктСовершенияСделки);
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П100_", Лист1Б.Строка100КодУсловийПоставки);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П110_", Лист1Б.Строка110КодЕдиницыИзмерения);
	
	Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П120_", Лист1Б.Строка120Количество, 15, 0);
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П130_", Лист1Б.Строка130Цена, 15, 0);
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П140_", Лист1Б.Строка140Стоимость, 15, 0);
	Иначе
		ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П120_", Лист1Б.Строка120Количество, 9, 5);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П140_", Лист1Б.Строка140КодВалюты);
		Если Лист1Б.ТипПредметаСделки = Перечисления.ТипыПредметовКонтролируемыхСделок.ДолговоеОбязательство Тогда
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П150_", Лист1Б.Строка150ПроцентнаяСтавка, 3, 4);
		Иначе
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П130_", Лист1Б.Строка130Цена, 14, 4);
			ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П160_", Лист1Б.Строка160Стоимость, 15, 0);
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаСовершенияСделки_", Лист1Б.Строка150ДатаСовершения);
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияРаздела2(СведенияОбУведомлении, Лист2, ДанныеРаздела2)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	ДанныеЗаполнения.Вставить("Сделка", Лист2.Сделка);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СведенияОКомиссионере", Лист2.СведОтносительноАгента);
	КонецЕсли;
	
	СведенияОКонтрагенте = ДанныеРаздела2.Найти(Лист2.Контрагент, "Контрагент");
	Если СведенияОКонтрагенте = Неопределено Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П010_", Лист2.НомерЛиста1А, 6, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "П015_", СведенияОКонтрагенте.НомерКонтрагента, 4, 0);
	
	ДанныеЗаполнения.Вставить("П020", Строка(СведенияОКонтрагенте.Строка020ТипОрганизации));
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П030_", СведенияОКонтрагенте.Строка030КакКодСтраныРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_", СведенияОКонтрагенте.Строка040Наименование);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П040_ЛАТ_", СведенияОКонтрагенте.Строка040НаименованиеЛат);
	КонецЕсли;
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П050_", СведенияОКонтрагенте.Строка050ИНН);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П060_", СведенияОКонтрагенте.Строка060КПП);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П070_", СведенияОКонтрагенте.Строка070РегНомерВСтрокеРегистрации);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П080_", СведенияОКонтрагенте.Строка080КодНалогВСтранеРегистрации);
	
	Если СведенияОКонтрагенте.Строка020ТипОрганизации = 2 Тогда
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "П090_", СведенияОКонтрагенте.Строка090АдресИностраннойОрганизации);
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Функция ДанныеЗаполненияРаздела3(СведенияОбУведомлении, Лист3, ДанныеРаздела3)
	
	ДанныеЗаполнения = Новый Структура;
	
	ДобавитьДанныеЗаголовка(ДанныеЗаполнения, СведенияОбУведомлении);
	ДанныеЗаполнения.Вставить("Сделка", Лист3.Сделка);
	
	Если СведенияОбУведомлении.ВерсияУведомления >= КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
		ДанныеЗаполнения.Вставить("СведенияОКомиссионере", Лист3.СведОтносительноАгента);
	КонецЕсли;
	
	СведенияОФизическомЛице = ДанныеРаздела3.Найти(Лист3.Контрагент, "Контрагент");
	Если СведенияОФизическомЛице = Неопределено Тогда
		Возврат ДанныеЗаполнения;
	КонецЕсли;
	
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерСделки_", Лист3.НомерЛиста1А, 6, 0);
	ДобавитьЧислоВСтруктуруПараметров(ДанныеЗаполнения, "НомерУчастника_", СведенияОФизическомЛице.НомерКонтрагента, 4, 0);
	
	ДанныеЗаполнения.Вставить("КодВидаДеятельности", СведенияОФизическомЛице.Строка020КодВидаДеятельности);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ИННФизлица_", СведенияОФизическомЛице.Строка030ИНН);
	
	Контрагент = СведенияОФизическомЛице.Контрагент;
	ФизическоеЛицо = СведенияОФизическомЛице.ФизическоеЛицо;
	
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Фамилия_", СведенияОФизическомЛице.Фамилия);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Имя_", СведенияОФизическомЛице.Имя);
	ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Отчество_", СведенияОФизическомЛице.Отчество);
	
	Если НЕ ЗначениеЗаполнено(СведенияОФизическомЛице.Строка030ИНН) Тогда
		
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаРождения_", ФизическоеЛицо.ДатаРождения);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "МестоРождения_", ФизическоеЛицо.МестоРождения);
		
		Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
			Если ЗначениеЗаполнено(СведенияОФизическомЛице.ГражданствоФизЛицСтрана) Тогда
				ДанныеЗаполнения.Вставить("Гражданство", "1");
				ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", СведенияОФизическомЛице.ГражданствоФизЛицСтрана.Код);
			Иначе
				ДанныеЗаполнения.Вставить("Гражданство", "2");
			КонецЕсли;
		Иначе
			СведенияОГражданстве = Документы.УведомлениеОКонтролируемыхСделках.СведенияОГражданстве2018(СведенияОФизическомЛице.ГражданствоФизЛицСтрана);
			ДанныеЗаполнения.Вставить("Гражданство", СведенияОГражданстве.Гражд);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодОКСМ_", СведенияОГражданстве.ОКСМ);
		КонецЕсли;
		
		КодВидаДокумента= КонтролируемыеСделки.ПолучитьКодВидаДокументаПоВидуДокумента(СведенияОФизическомЛице.ВидДокумента);
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодВидаДокумента_", КодВидаДокумента);
		
		Если ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументСерия) Или ЗначениеЗаполнено(СведенияОФизическомЛице.ДокументНомер) Тогда 
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "СерияНомер_",
				СведенияОФизическомЛице.ДокументСерия + " " + СведенияОФизическомЛице.ДокументНомер);
		КонецЕсли;
		
		ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "ОрганВыдавшийДокумент_", СведенияОФизическомЛице.ДокументКемВыдан);
		ДобавитьДатуВСтруктуруПараметров(ДанныеЗаполнения, "ДатаВыдачи_", СведенияОФизическомЛице.ДокументДатаВыдачи);
		
		Если СведенияОбУведомлении.ВерсияУведомления < КонтролируемыеСделкиКлиентСервер.ВерсияУведомления_2018() Тогда
			
			Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана = Справочники.СтраныМира.Россия Тогда
				ДанныеЗаполнения.Вставить("МестоЖительства", "1");
			Иначе
				ДанныеЗаполнения.Вставить("МестоЖительства", "2");
			КонецЕсли;
			
			ЗначениеАдреса = ?(ЗначениеЗаполнено(СведенияОФизическомЛице.КонтактнаяИнформацияЗначениеJSON),
				СведенияОФизическомЛице.КонтактнаяИнформацияЗначениеJSON,
				СведенияОФизическомЛице.КонтактнаяИнформацияЗначенияПолей);
			
			АдресСтруктурой = СтруктураАдреса(ЗначениеАдреса);
			
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Индекс_", АдресСтруктурой.Индекс);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "РегионКод_", АдресСтруктурой.КодРегиона);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Район_", АдресСтруктурой.Район);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Город_", АдресСтруктурой.Город);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "НаселенныйПункт_", АдресСтруктурой.НаселенныйПункт);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Улица_", АдресСтруктурой.Улица);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Дом_", АдресСтруктурой.Дом);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Корпус_", АдресСтруктурой.Корпус);
			ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "Квартира_", АдресСтруктурой.Квартира);
			
		КонецЕсли;
		
		Если СведенияОФизическомЛице.ГражданствоФизЛицСтрана <> Справочники.СтраныМира.Россия Тогда
			НаименованиеСтраны = СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФСтрана;
			Если ЗначениеЗаполнено(НаименованиеСтраны) Тогда
				НайденнаяСтрана = Справочники.СтраныМира.НайтиПоНаименованию(НаименованиеСтраны);
				Если ЗначениеЗаполнено(НайденнаяСтрана) И НайденнаяСтрана <> Справочники.СтраныМира.Россия Тогда
					ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "КодСтраныОКСМ_", НайденнаяСтрана.Код);
					ДобавитьСтрокуВСтруктуруПараметров(ДанныеЗаполнения, "АдресЗаПределамиРФ_", СведенияОФизическомЛице.КонтактнаяИнформацияЗаРФПредставление);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДанныеЗаполнения;
	
КонецФункции

Процедура ДобавитьДанныеЗаголовка(СтруктураПараметров, СведенияОбУведомлении)
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, "ИНН", СведенияОбУведомлении.ИНН);
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, "КПП", СведенияОбУведомлении.КПП);
	
КонецПроцедуры

Функция СтруктураАдреса(ЗначенияАдресаJSON, ДополнительныеПараметры = Неопределено) Экспорт
	
	СтруктураАдреса = НовыйСтруктураАдреса();
	
	СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначенияАдресаJSON, ДополнительныеПараметры);
	
	СтруктураАдреса.Страна    = СведенияОбАдресе.Страна;
	СтруктураАдреса.КодСтраны = СведенияОбАдресе.КодСтраны;
	Если СтруктураАдреса.Свойство("Страна") 
		И СтрСравнить(СтруктураАдреса.Страна, Справочники.СтраныМира.Россия.Наименование) = 0 Тогда
		СтруктураАдреса.АдресРФ = Истина;
	Иначе
		СтруктураАдреса.АдресРФ = Ложь;
	КонецЕсли;
	
	СтруктураАдреса.Представление             = СведенияОбАдресе.Представление;
	СтруктураАдреса.Индекс                    = СведенияОбАдресе.Индекс;
	СтруктураАдреса.Регион                    = СведенияОбАдресе.Регион;
	СтруктураАдреса.КодРегиона                = ?(СведенияОбАдресе.Свойство("КодРегиона"), СведенияОбАдресе.КодРегиона, "");
	СтруктураАдреса.РегионСокращение          = СведенияОбАдресе.РегионСокращение;
	СтруктураАдреса.Район                     = СведенияОбАдресе.Район;
	СтруктураАдреса.РайонСокращение           = СведенияОбАдресе.РайонСокращение;
	СтруктураАдреса.Город                     = СведенияОбАдресе.Город;
	СтруктураАдреса.ГородСокращение           = СведенияОбАдресе.ГородСокращение;
	СтруктураАдреса.НаселенныйПункт           = СведенияОбАдресе.НаселенныйПункт;
	СтруктураАдреса.НаселенныйПунктСокращение = СведенияОбАдресе.НаселенныйПунктСокращение;
	СтруктураАдреса.Улица                     = СведенияОбАдресе.Улица;
	СтруктураАдреса.УлицаСокращение           = СведенияОбАдресе.УлицаСокращение;
	СтруктураАдреса.Дом                       = СведенияОбАдресе.Здание.Номер;
	СтруктураАдреса.ТипДома                   = СведенияОбАдресе.Здание.ТипЗдания;
	
	Если СведенияОбАдресе.Корпуса.Количество() > 0 Тогда
		СтруктураАдреса.Корпус     = СведенияОбАдресе.Корпуса[0].Номер;
		СтруктураАдреса.ТипКорпуса = СведенияОбАдресе.Корпуса[0].ТипКорпуса;
	КонецЕсли;
	
	Если СведенияОбАдресе.Помещения.Количество() > 0 Тогда
		СтруктураАдреса.Квартира    = СведенияОбАдресе.Помещения[0].Номер;
		СтруктураАдреса.ТипКвартиры = СведенияОбАдресе.Помещения[0].ТипПомещения;
	КонецЕсли;
	
	Возврат СтруктураАдреса;
	
КонецФункции

Функция НовыйСтруктураАдреса()
	
	СтруктураАдреса = Новый Структура();
	СтруктураАдреса.Вставить("АдресРФ",                   Истина);
	СтруктураАдреса.Вставить("КодСтраны",                 "");
	СтруктураАдреса.Вставить("Страна",                    "");
	СтруктураАдреса.Вставить("Индекс",                    "");
	СтруктураАдреса.Вставить("Регион",                    "");
	СтруктураАдреса.Вставить("РегионСокращение",          "");
	СтруктураАдреса.Вставить("КодРегиона",                "");
	СтруктураАдреса.Вставить("Район",                     "");
	СтруктураАдреса.Вставить("РайонСокращение",           "");
	СтруктураАдреса.Вставить("Город",                     "");
	СтруктураАдреса.Вставить("ГородСокращение",           "");
	СтруктураАдреса.Вставить("НаселенныйПункт",           "");
	СтруктураАдреса.Вставить("НаселенныйПунктСокращение", "");
	СтруктураАдреса.Вставить("Улица",                     "");
	СтруктураАдреса.Вставить("УлицаСокращение",           "");
	СтруктураАдреса.Вставить("Дом",                       "");
	СтруктураАдреса.Вставить("ТипДома",                   "");
	СтруктураАдреса.Вставить("Корпус",                    "");
	СтруктураАдреса.Вставить("ТипКорпуса",                "");
	СтруктураАдреса.Вставить("Квартира",                  "");
	СтруктураАдреса.Вставить("ТипКвартиры",               "");
	СтруктураАдреса.Вставить("Представление",             "");
	СтруктураАдреса.Вставить("ЗначенияПолей",             "");
	СтруктураАдреса.Вставить("ЗначениеJSON",              "");
	
	Возврат СтруктураАдреса;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииДляЗаполненияМакетов

Процедура УстановитьНомерСтраницы(Макет, НомерСтраницы, ДлинаНомераСтраницы)
	
	ЧастиНомераСтраницы = Новый Структура();
	ДобавитьЧислоВСтруктуруПараметров(ЧастиНомераСтраницы, "СчетчикСтраниц_", НомерСтраницы, ДлинаНомераСтраницы, 0, Истина);
	ЗаполнитьЗначенияСвойств(Макет.Параметры, ЧастиНомераСтраницы);
	
КонецПроцедуры

Процедура ДобавитьЧислоВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра, ДлинаЦелойЧасти, ДлинаДробнойЧасти, ВыводитьЛидирующиеНули = Ложь)
	
	ФорматЧисла = СтрШаблон("ЧЦ=%1; ЧДЦ=%2; ЧРД=.; ЧН=0; %3 ЧГ=0",
		Формат(ДлинаЦелойЧасти+ДлинаДробнойЧасти, ""),
		Формат(ДлинаДробнойЧасти, ""),
		?(ВыводитьЛидирующиеНули, "ЧВН=;", ""));
	
	ЧастиЧисла = СтрРазделить(Формат(ЗначениеПараметра, ФорматЧисла), ".");
	Если ЧастиЧисла.Количество() > 0 Тогда
		ЦелаяЧастьЧисла = ЧастиЧисла[0];
	Иначе
		ЦелаяЧастьЧисла = "";
	КонецЕсли;
	
	ЧислоСтрокой = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ЦелаяЧастьЧисла, ДлинаЦелойЧасти, " ", "Справа");
	
	Если ЧастиЧисла.Количество() > 1 Тогда
		ДробнаяЧастьЧисла = СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ЧастиЧисла[1], "0", "Справа");
	Иначе
		ДробнаяЧастьЧисла = "";
	КонецЕсли;
	
	ЧислоСтрокой = ЧислоСтрокой + ДробнаяЧастьЧисла;
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЧислоСтрокой);
	
КонецПроцедуры

Процедура ДобавитьСтрокуВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра, ДлинаСтроки = 0, ДлинаПодстроки = 0)
	
	СтрокаДляВывода = ЗначениеПараметра;
	Если ДлинаСтроки > 0 И ДлинаПодстроки > 0 Тогда
		// Есть дополнительные ограничения по длине строки и делению ее на подстроки.
		// Выводим строку так, что бы целое слово умещалось на строке целиком.
		// Если так не получится - выводим как есть посимвольно.
		Слова = СтрРазделить(ЗначениеПараметра, " ", Ложь);
		
		СтрокаСловВыведенныхПострочно = СловаПострочно(Слова, ДлинаСтроки, ДлинаПодстроки);
		Если ЗначениеЗаполнено(СтрокаСловВыведенныхПострочно) Тогда
			СтрокаДляВывода = СтрокаСловВыведенныхПострочно;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаДляВывода = ВРег(СтрокаДляВывода);
	
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, СтрокаДляВывода);
	
КонецПроцедуры

Функция СловаПострочно(Слова, ДлинаСтроки, ДлинаПодстроки)
	
	СтрокаСлов = "";
	ВсеСловаВыведены = Ложь;
	
	Для Каждого Слово Из Слова Цикл
		
		Если СтрокаСлов = "" Тогда
			СтрокаСлов = Слово;
		ИначеЕсли СтрДлина(Слово) > ДлинаПодстроки Тогда
			// Слово слишком длинное - выводим его как есть.
			СтрокаСлов = СтрокаСлов + " " + Слово;
		Иначе
			СимволовВСтроке = СтрДлина(СтрокаСлов);
			ВсегоПолныхСтрок = Цел(СимволовВСтроке/ДлинаПодстроки);
			СимволовВПолныхСтроках = ВсегоПолныхСтрок * ДлинаПодстроки;
			СимволовВПоследнейПодстроке = СимволовВСтроке - СимволовВПолныхСтроках;
			Если СимволовВПоследнейПодстроке + 1 + СтрДлина(Слово) > ДлинаПодстроки Тогда
				СтрокаСлов = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаСлов, ДлинаПодстроки, " ", "Справа");
				СтрокаСлов = СтрокаСлов + Слово;
			Иначе
				СтрокаСлов = СтрокаСлов + ?(СимволовВПоследнейПодстроке = 0, "", " ") + Слово;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрДлина(СтрокаСлов) > ДлинаСтроки Тогда
		// Слова, выведенные построчно занимают места больше,
		// чем можно вывести. Поэтому считаем, что вывод не
		// удался и возвращаем пустую строку.
		Возврат "";
	Иначе
		Возврат СтрокаСлов;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьДатуВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра)
	
	ДатаСтрокой = Формат(ЗначениеПараметра, "ДФ=ddMMyyyy");
	ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ДатаСтрокой);
	
КонецПроцедуры

Процедура ДобавитьВСтруктуруПараметров(СтруктураПараметров, ИмяПараметра, ЗначениеПараметра)
	
	Для Позиция = 1 По СтрДлина(ЗначениеПараметра) Цикл
		ИмяПараметраЧастиЧисла = ИмяПараметра + Формат(Позиция, "ЧГ=0");
		СтруктураПараметров.Вставить(ИмяПараметраЧастиЧисла, Сред(ЗначениеПараметра, Позиция, 1));
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПараметрыПечатиУведомления(ЛистыУведомления) Экспорт
	
	ЛистыУведомления.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ЛистыУведомления.АвтоМасштаб = Истина;
	ЛистыУведомления.ПолеСверху          = 5;
	ЛистыУведомления.ПолеСнизу           = 5;
	ЛистыУведомления.КлючПараметровПечати = "Документ.УведомлениеОКонтролируемыхСделках";
	
КонецПроцедуры

Функция РазложитьОКПД2ВСтроку(ИсходныйКодСТочками)
	
	МассивКодов = СтрРазделить(ИсходныйКодСТочками, ".");
	
	Для НомерКода = 0 По МассивКодов.Количество() - 1 Цикл
		
		ДлинаЧастиКода = ?(НомерКода < 3, 2, 3);
		МассивКодов[НомерКода] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивКодов[НомерКода],
			ДлинаЧастиКода, " ", "Справа");
		
	КонецЦикла;
	
	Возврат СтрСоединить(МассивКодов, "");
	
КонецФункции

Функция КодПоОКПИзКодаПоОКПД2(КодПоОКПД2) Экспорт
	
	Если НЕ ЗначениеЗаполнено(КодПоОКПД2) Тогда
		Возврат "";
	КонецЕсли;
	
	КодПоОКП = СтрЗаменить(КодПоОКПД2, ".", "");
	КодПоОКП = Лев(СтроковыеФункцииКлиентСервер.ДополнитьСтроку(КодПоОКП, 6, "0", "Справа"), 6);
	Возврат КодПоОКП;
	
КонецФункции

Функция РазложитьОКВЭДВСтроку(ИсходныйКодСТочками)
	
	МассивКодов = СтрРазделить(ИсходныйКодСТочками, ".");
	
	Для НомерКода = 0 По МассивКодов.Количество() - 1 Цикл
		МассивКодов[НомерКода] = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(МассивКодов[НомерКода],
			2, " ", "Справа");
	КонецЦикла;
	
	Возврат СтрСоединить(МассивКодов, "");
	
КонецФункции

Процедура ЗаполнитьШтрихкод(Штрихкод)
	
	Эталон = ЦенообразованиеВызовСервера.ОбработкаПечатьЭтикетокИЦенников().ПолучитьМакет("Эталон");
	КоличествоМиллиметровВПикселе = Эталон.Рисунки.Квадрат100Пикселей.Высота / 100;
		
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("Ширина",           Окр(Штрихкод.Ширина / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Высота",           Окр(Штрихкод.Высота / КоличествоМиллиметровВПикселе));
	ПараметрыШтрихкода.Вставить("Штрихкод",         СтрЗаменить(Штрихкод.ПараметрРасшифровки, "Ш", ""));
	ПараметрыШтрихкода.Вставить("ТипВходныхДанных", 0); // Штрихкод - это строка
	ПараметрыШтрихкода.Вставить("ТипКода",          0); // Code128
	ПараметрыШтрихкода.Вставить("ОтображатьТекст",  Истина);
	ПараметрыШтрихкода.Вставить("РазмерШрифта",     12);
	
	Штрихкод.Картинка = МенеджерОборудованияВызовСервера.ПолучитьКартинкуШтрихкода(ПараметрыШтрихкода);
	
КонецПроцедуры

Функция ЕстьШтрихкод(Рисунки)
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("КартинкаШтрихкода", Новый УникальныйИдентификатор);
	СтароеЗначение = СтруктураПоиска.КартинкаШтрихкода;
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, Рисунки);
	
	Возврат Не СтруктураПоиска.КартинкаШтрихкода = СтароеЗначение;
	
КонецФункции

#КонецОбласти

#Область РаботаСФормамиДоговоров

Функция НаФормуДобавляютсяДопСведенияДоговоровКонтролируемыхСделок(Форма)
	
	// Проверяем включение соответствующей функциональной опции.
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьУведомленияОКонтролируемыхСделках") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем право на чтение соответствующих реквизитов.
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим наличие группы для добавления реквизитов контролируемых сделок.
	Если Форма.Элементы.Найти("ГруппаКонтролируемыеСделки") = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавляем реквизиты только тогда, когда есть реквизит "Объект".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма, "Объект") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавляем реквизиты только тогда, когда есть свойство объекта "Ссылка".
	Если Не ОбщегоНазначенияУТКлиентСервер.ЕстьРеквизитОбъекта(Форма.Объект, "Ссылка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Добавляем доп. реквизиты на форму только тогда, когда форма является договоров, для которого назначаются доп. сведения,
	// как участнику контролируемой сделки.
	СписокТиповДоговоров = Метаданные.РегистрыСведений["ДоговорыУчастниковКонтролируемыхСделок"].Измерения.ДоговорКонтрагента.Тип.Типы();
	Если СписокТиповДоговоров.Найти(ТипЗнч(Форма.Объект.Ссылка)) = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьРеквизитыКонтролируемыхСделокНаФорму(Форма)
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	ДопРеквизиты = Метаданные.РегистрыСведений["ДоговорыУчастниковКонтролируемыхСделок"].Ресурсы;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		
		МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтролируемыеСделки_" + ДопРеквизит.Имя, ДопРеквизит.Тип));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
КонецПроцедуры

Процедура ДобавитьЭлементыКонтролируемыхСделокНаФорму(Форма)
	
	ГруппаКонтролируемыхСделок = Форма.Элементы.Найти("ГруппаКонтролируемыеСделки");
	ДопРеквизиты = Метаданные.РегистрыСведений["ДоговорыУчастниковКонтролируемыхСделок"].Ресурсы;
	
	Для каждого ДопРеквизит Из ДопРеквизиты Цикл
		
		ЭлементФормы = Форма.Элементы.Добавить("КонтролируемыеСделки_" + ДопРеквизит.Имя, Тип("ПолеФормы"), ГруппаКонтролируемыхСделок);
		ЭлементФормы.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементФормы.Заголовок = ДопРеквизит.Синоним;
		ЭлементФормы.ПутьКДанным = "КонтролируемыеСделки_" + ДопРеквизит.Имя;
		Если ДопРеквизит.Тип = Новый ОписаниеТипов("Булево") Тогда
			ЭлементФормы.Вид = ВидПоляФормы.ПолеФлажка;
			ЭлементФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ЭлементФормы.Подсказка = ДопРеквизит.Подсказка;
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПравоДоступа("Изменение", Метаданные.РегистрыСведений.ДоговорыУчастниковКонтролируемыхСделок) Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		СписокКодовНаименованийСделок = КонтролируемыеСделкиПовтИсп.СписокКодовНаименованийСделки();
		СписокКодовПоставки = КонтролируемыеСделкиПовтИсп.КодыУсловийПоставки();
		УстановитьПривилегированныйРежим(Ложь);
		
		ЭлементКодНаименованияСделки = Форма.Элементы["КонтролируемыеСделки_КодНаименованияСделки"];
		Для каждого Код Из СписокКодовНаименованийСделок Цикл
			НовыйКод = ЭлементКодНаименованияСделки.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКод, Код);
		КонецЦикла;
		ЭлементКодНаименованияСделки.РежимВыбораИзСписка = Истина;
		ЭлементКодНаименованияСделки.РастягиватьПоГоризонтали = Истина;
		
		ЭлементКодУсловийПоставки = Форма.Элементы["КонтролируемыеСделки_КодУсловийПоставки"];
		Для каждого Код Из СписокКодовПоставки Цикл
			НовыйКод = ЭлементКодУсловийПоставки.СписокВыбора.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйКод, Код);
		КонецЦикла;
		ЭлементКодУсловийПоставки.РежимВыбораИзСписка = Истина;
		
	Иначе
		
		ГруппаКонтролируемыхСделок.ТолькоПросмотр = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеДоговоровКонтролируемыхСделок(Форма)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыУчастниковКонтролируемыхСделок.КодНаименованияСделки КАК КодНаименованияСделки,
	|	ДоговорыУчастниковКонтролируемыхСделок.СпособОпределенияЦеныСделки КАК СпособОпределенияЦеныСделки,
	|	ДоговорыУчастниковКонтролируемыхСделок.КодУсловийПоставки КАК КодУсловийПоставки,
	|	ДоговорыУчастниковКонтролируемыхСделок.СтороныПрименяютРазныеСтавкиПоНалогуНаПрибыль КАК СтороныПрименяютРазныеСтавкиПоНалогуНаПрибыль,
	|	ДоговорыУчастниковКонтролируемыхСделок.СделкаОтноситсяКДеятельностиНовогоМорскогоМесторождения КАК СделкаОтноситсяКДеятельностиНовогоМорскогоМесторождения,
	|	ДоговорыУчастниковКонтролируемыхСделок.СделкаОтноситсяКДеятельностиОблагаемойНалогомНаДопДоход КАК СделкаОтноситсяКДеятельностиОблагаемойНалогомНаДопДоход
	|ИЗ
	|	РегистрСведений.ДоговорыУчастниковКонтролируемыхСделок КАК ДоговорыУчастниковКонтролируемыхСделок
	|ГДЕ
	|	ДоговорыУчастниковКонтролируемыхСделок.ДоговорКонтрагента = &ДоговорКонтрагента";
	
	Запрос.Параметры.Вставить("ДоговорКонтрагента", Форма.Объект.Ссылка);
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Для каждого КолонкаРезультата Из Результат.Колонки Цикл
			Форма["КонтролируемыеСделки_" + КолонкаРезультата.Имя] = Выборка[КолонкаРезультата.Имя];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти