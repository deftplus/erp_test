////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ЭКСПОРТА ЭЛЕМЕНТОВ НСИ ВО ВНЕШНИЕ ИНФОРМАЦИОННЫЕ БАЗЫ
/////////////////////////////////////////////////////////////////////////////////////////////////////

Функция ВыгрузитьОбъектыВВИБ(ИспользуемаяИБ,НастройкаСоответствия,Организация=Неопределено,СписокОтбора=Неопределено,ВозвращатьСоответствиеОбъектов=Ложь,ОбновлениеДочернихЭлементов=Ложь) Экспорт
	
	Если НастройкаСоответствия.СинхронизацияПоGUID Тогда // Только соответствие объектов
		
		Если ВозвращатьСоответствиеОбъектов Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ КАК ОбъектТекущейИБ,
			|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ КАК ОбъектВнешнейИБ,
			|	СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия.ТипОбъектаВИБ КАК ТипОбъектаВИБ
			|ИЗ
			|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
			|ГДЕ
			|	СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия = &НастройкаСоответствия
			|	И СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ = &ИспользуемаяИБ";
			
			Если НЕ СписокОтбора=Неопределено Тогда
				
				Запрос.Текст=Запрос.Текст+"
				|И СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ В(&СписокОтбора)";
				
				Запрос.УстановитьПараметр("СписокОтбора",СписокОтбора);
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ИспользуемаяИБ",ИспользуемаяИБ);
			Запрос.УстановитьПараметр("НастройкаСоответствия",НастройкаСоответствия);
			
			СоответствиеОбъектов=Новый Соответствие;
			
			Результат=Запрос.Выполнить();
			
			Если Не Результат.Пустой() Тогда
				
				Выборка=Результат.Выбрать();
				ТекСоединениеВИБ = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);
				
				Если ТекСоединениеВИБ=Неопределено Тогда
					Возврат СоответствиеОбъектов;
				КонецЕсли;
				
				ИмяОбъектаВИБ=НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
				
				Пока Выборка.Следующий() Цикл
					
					ОбъектСсылкаВИБ=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,Выборка.ТипОбъектаВИБ,ИмяОбъектаВИБ,Выборка.ОбъектВнешнейИБ);
					
					СоответствиеОбъектов.Вставить(Выборка.ОбъектТекущейИБ,ОбъектСсылкаВИБ);
					
				КонецЦикла;
				
			КонецЕсли;
			
			Возврат СоответствиеОбъектов;
				
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	ИначеЕсли НастройкаСоответствия.ТипОбъектаВИБ="Перечисление" Тогда
		
		Если ВозвращатьСоответствиеОбъектов Тогда
			
			СоответствиеОбъектов=Новый Соответствие;
			
			ТекСоединениеВИБ = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);
				
				Если ТекСоединениеВИБ=Неопределено Тогда
					Возврат СоответствиеОбъектов;
				КонецЕсли;
			
			Для Каждого Элемент ИЗ СписокОтбора Цикл
				
				СоответствиеОбъектов.Вставить(Элемент.Значение,
							РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьЗначениеПеречисленияПоИмени(ТекСоединениеВИБ,
																НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование,
																XMLСтрока(Элемент.Значение),
																НастройкаСоответствия));
																
			КонецЦикла;
			
			Возврат СоответствиеОбъектов;
			
		Иначе
			
			Возврат Неопределено;													
				
		КонецЕсли;		
				
	КонецЕсли;
		
	КонтекстОтчета=Новый Структура;
	КонтекстОтчета.Вставить("ИспользуемаяИБ",ИспользуемаяИБ);
	КонтекстОтчета.Вставить("Организация",Организация);
	КонтекстОтчета.Вставить("Загрузка",Истина);
	
	Если ОбновлениеДочернихЭлементов Тогда
		
		КонтекстОтчета.Вставить("ОбновлениеДочернихЭлементов",Истина);
		
	КонецЕсли;
		
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ТАБЛИЦУ ДЛЯ ВЫЧИСЛЕНИЯ ПАРАМЕТРОВ ЗАПРОСА
	
	ПравилаВычисленияПараметров=Новый ТаблицаЗначений;
	ПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра");
	ПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
	ПравилаВычисленияПараметров.Колонки.Добавить("ТипРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	
	СтрЗапрос=Новый Структура;
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТаблицаАналитики=ОбщегоНазначенияУХ.ПолучитьСправочникПоВидуСубконто(НастройкаСоответствия.ИмяОбъектаМетаДанных).ПолноеИмя();
		
		Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
			НоваяСтрока.ИмяПараметра="Ссылка.Владелец";
			НоваяСтрока.СпособВычисленияПараметра=ВидСравнения.Равно;
			НоваяСтрока.УточнениеСпособаОпределения=НастройкаСоответствия.ИмяОбъектаМетаданных;
			НоваяСтрока.ТипРасчета="ПоСсылкам";
			
			Если НастройкаСоответствия.ИмяОбъектаМетаданных.РазделятьПоОрганизациям Тогда
				
				НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
				НоваяСтрока.ИмяПараметра="Ссылка.Организация";
				НоваяСтрока.СпособВычисленияПараметра=ВидСравнения.Равно;
				НоваяСтрока.УточнениеСпособаОпределения=Организация;
				НоваяСтрока.ТипРасчета="ПоСсылкам";
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если НЕ СписокОтбора=Неопределено Тогда
		
		НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
		НоваяСтрока.ИмяПараметра="Ссылка";
		НоваяСтрока.СпособВычисленияПараметра=ВидСравнения.ВСписке;
		НоваяСтрока.УточнениеСпособаОпределения=СписокОтбора;
		НоваяСтрока.ТипРасчета="ПоСсылкам";
					
	КонецЕсли;
	
	СтрЗапрос.Вставить("ПравилаВычисленияПараметров",ПравилаВычисленияПараметров);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ТЕКСТ ЗАПРОСА
	
	ТекстЗапроса="ВЫБРАТЬ 1 КАК ФиктивноеПоле
	|{ВЫБРАТЬ Ссылка.* КАК Ссылка";
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="Перечисление" Тогда
		
		ТекстЗапроса=ТекстЗапроса+"}
		|ИЗ "+НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаДанных+" КАК "+НастройкаСоответствия.ИмяОбъектаМетаДанных+"
		|{ГДЕ Ссылка.*}";
		
	Иначе
		
		Для Каждого СтрРеквизит ИЗ НастройкаСоответствия.СоответствиеРеквизитов Цикл
			
			ТекстЗапроса=ТекстЗапроса+",
			|"+СтрРеквизит.РеквизитОбъектаКонсолидации+".*";
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"}";
		
		Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
			
			ТекстЗапроса=ТекстЗапроса+"	
			|ИЗ "+ТаблицаАналитики+" КАК "+СтрЗаменить(ТаблицаАналитики,".","_");
			
		Иначе
			
			ТекстЗапроса=ТекстЗапроса+"
			|ИЗ "+НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаДанных+" КАК "+НастройкаСоответствия.ИмяОбъектаМетаДанных;	
			
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ (НЕ Ссылка.ПометкаУдаления)";
		
		Если НастройкаСоответствия.ТипОбъектаКонсолидации="Справочник" ИЛИ НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
			
			Если ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(НастройкаСоответствия.ИмяОбъектаМетаДанных,"НСИ_ТребуетСинхронизации") Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|И (НЕ Ссылка.НСИ_ТребуетСинхронизации)";
				
			КонецЕсли;
			
			Если ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(НастройкаСоответствия.ИмяОбъектаМетаДанных,"НСИ_НеАктивный") Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|И (НЕ Ссылка.НСИ_НеАктивный)";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|{ГДЕ Ссылка.*}";
		
	КонецЕсли;
		
	СтрЗапрос.Вставить("ТекстЗапроса", ТекстЗапроса);	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ПОЛЯ ЗАПРОСА
	
	ПравилаИспользованияПолей = ПолучитьОписаниеТаблицыПравилаИспользованияПолей();
	
	НоваяСтрока = ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.Поле = "Ссылка";
	НоваяСтрока.Синоним = "Элемент";
	НоваяСтрока.СоздаватьНовые = ?(ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("СоздаватьПриНеудачномПоискеПриИмпорте",НастройкаСоответствия.ОписаниеОбъектаВИБ),НастройкаСоответствия.ОписаниеОбъектаВИБ.СоздаватьПриНеудачномПоискеПриИмпорте,Ложь);
	НоваяСтрока.РазделятьПоОрганизациям = Ложь;
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте = ?(ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ОбновлятьРеквизитыПриИмпорте",НастройкаСоответствия.ОписаниеОбъектаВИБ),НастройкаСоответствия.ОписаниеОбъектаВИБ.ОбновлятьРеквизитыПриИмпорте,Ложь);
	НоваяСтрока.КодАналитики = НастройкаСоответствия.ТипОбъектаВИБ+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
	НоваяСтрока.НастройкаСоответствия = НастройкаСоответствия;
	НоваяСтрока.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.КонтекстОбъектаЗагрузки;
	НоваяСтрока.ФиксированноеЗначение = Неопределено;
		
	ТабПравилаРабочие=ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей,Ложь,Истина,Ложь,Истина,Истина);	
	
	НоваяСтрока = ТабПравилаРабочие.Добавить();
	НоваяСтрока.Поле = "Ссылка.Ссылка";
	НоваяСтрока.Синоним = "Reference";
	НоваяСтрока.СоздаватьНовые = Ложь;
	НоваяСтрока.РазделятьПоОрганизациям = Ложь;
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте = Ложь;
	НоваяСтрока.КодАналитики = "Reference";

	СтрЗапрос.Вставить("ПравилаИспользованияПолей", ТабПравилаРабочие);
	
	ТаблицаДанных = ПолучитьТаблицуДляВыгрузкиПоЗапросу(СтрЗапрос);
	
	ТаблицаДанных.Колонки.Добавить("ОбъектДляВыгрузки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(40));
	
	Для Каждого Строка ИЗ ТаблицаДанных Цикл
		
		Строка.ОбъектДляВыгрузки=XMLString(Строка.Reference);
		
	КонецЦикла;
	
	ТаблицаДанных.Колонки.Удалить("Reference");
	
	СтрокаСсылка=ТабПравилаРабочие.Найти("Reference","Синоним");
	ТабПравилаРабочие.Удалить(СтрокаСсылка);
	
	НоваяСтрока = ТабПравилаРабочие.Добавить();
	НоваяСтрока.Поле = "Ссылка.Ссылка";
	НоваяСтрока.Синоним = "ОбъектДляВыгрузки";
	НоваяСтрока.СоздаватьНовые = Ложь;
	НоваяСтрока.РазделятьПоОрганизациям = Ложь;
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте = Ложь;
	НоваяСтрока.КодАналитики = "ОбъектДляВыгрузки";
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ЗАПОЛНЯЕМ НЕДОСТАЮЩИЕ АНАЛИТИКИ
	
	ТекСоединениеВИБ = Неопределено;
	
	СтруктураКлючевыхРеквизитов = Новый Структура;
	СтруктураПодчиненныхРеквизитов = Новый Структура;
	
	ТабПравилаДляВыгрузки=ПолучитьТаблицуПравилДляВыгрузки(ТабПравилаРабочие,ИспользуемаяИБ);
	
	ТекСоединениеВИБ = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);			
	КонтекстОтчета.Вставить("ТекСоединениеВИБ",ТекСоединениеВИБ);
	
	СтруктураПравила= Экспорт_ЗаполнитьАналитикуПоПравилам(ТекСоединениеВИБ,ТаблицаДанных,ТабПравилаДляВыгрузки,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов);

	Если Не ПустаяСтрока(СтруктураПравила.ТекстОшибки) Тогда
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ДублированиеДанныхПриСинхронизации", , , СтруктураПравила.ТекстОшибки, Экспорт_ПолучитьСоответствиеТаблицДублейДляПротокола(ИспользуемаяИБ,СтруктураПравила.СоответствиеТаблицДублей));
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	РезультатЗаполнения=Экспорт_ЗаполнитьНедостающиеАналитики(ТекСоединениеВИБ,
										СтруктураПравила.ТаблицаДанных,
										СтруктураПравила.СтруктураКлючевыхРеквизитов,
										СтруктураПравила.СтруктураПодчиненныхРеквизитов,
										ТабПравилаДляВыгрузки,
										ОбновлениеДочернихЭлементов);
										
	Для Каждого Элемент ИЗ РезультатЗаполнения.МассивОшибок Цикл
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Элемент,,,СтатусСообщения.Важное);
		
	КонецЦикла;
	
	ВыгрузитьПодчиненныеОбъекты(ИспользуемаяИБ,РезультатЗаполнения.ТабОбъектовДляВыгрузки);	
	
	Если НастройкаСоответствия.СоответствияСвязанныхОбъектов.Количество()>0 Тогда
		
		ВыгрузитьДанныеСвязанныхОбъектов(ТекСоединениеВИБ,НастройкаСоответствия,РезультатЗаполнения.ТабОбработанныхОбъектов,ИспользуемаяИБ);
		
	КонецЕсли;	
	
	//////////////////////////////////////////////////////////////////////////////////
	// ПРОВЕРИМ, ВЫГРУЖАЛИСЬ ЛИ ОБЪЕКТЫ ИЗ СПИСКА ИЗМЕНЕННЫХ
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИзмененныеОбъектыДляВыгрузки.Элемент КАК Элемент
	|ИЗ
	|	РегистрСведений.ИзмененныеОбъектыДляВыгрузки КАК ИзмененныеОбъектыДляВыгрузки
	|ГДЕ
	|	ИзмененныеОбъектыДляВыгрузки.НастройкаСоответствия = &НастройкаСоответствия
	|	И ИзмененныеОбъектыДляВыгрузки.ИспользуемаяИБ = &ИспользуемаяИБ";
	
	Если НЕ СписокОтбора = Неопределено Тогда
		
		Запрос.Текст = Запрос.Текст + "
		|И ИзмененныеОбъектыДляВыгрузки.Элемент В(&СписокОтбора)";
		
		Запрос.УстановитьПараметр("СписокОтбора", СписокОтбора);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НастройкаСоответствия", НастройкаСоответствия);
	Запрос.УстановитьПараметр("ИспользуемаяИБ", ИспользуемаяИБ);
	
	ДанныеИзменения = Запрос.Выполнить();
	
	Если Не ДанныеИзменения.Пустой() Тогда
		
		ТекСоединениеВИБ=КонтекстОтчета.ТекСоединениеВИБ;
		СтруктураПравила.ТаблицаДанных.Индексы.Добавить("ОбъектДляВыгрузки");
		
		НаборЗаписей=РегистрыСведений.ИзмененныеОбъектыДляВыгрузки.СоздатьНаборЗаписей();
		
		ИзмененныеОбъекты=ДанныеИзменения.Выбрать();
		
		Пока ИзмененныеОбъекты.Следующий() Цикл
			
			ДанныеОбъекта=XMLСтрока(ИзмененныеОбъекты.Элемент);
			
			СтрОбъект=РезультатЗаполнения.ТабОбработанныхОбъектов.Найти(ДанныеОбъекта,"ИсходныйОбъектБД");
			
			Если (НЕ СтрОбъект=Неопределено) И ЗначениеЗаполнено(СтрОбъект.ОбработанныйОбъектБД)  Тогда
				
				НаборЗаписей.Отбор.НастройкаСоответствия.Установить(НастройкаСоответствия);
				НаборЗаписей.Отбор.ИспользуемаяИБ.Установить(ИспользуемаяИБ);
				НаборЗаписей.Отбор.Элемент.Установить(ИзмененныеОбъекты.Элемент);
				
				НаборЗаписей.Прочитать();
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать(Истина);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ВозвращатьСоответствиеОбъектов И (НЕ НастройкаСоответствия.ТипОбъектаКонсолидации="Перечисление") Тогда
		
		СтруктураПравила.ТаблицаДанных.Индексы.Добавить("ОбъектДляВыгрузки");
		
	КонецЕсли;	
	
	Если ВозвращатьСоответствиеОбъектов Тогда
		
		СоответствиеОбъектов=Новый Соответствие;
		ИмяКолонкиОбъекта=НастройкаСоответствия.ТипОбъектаВИБ+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;		
		ИмяКолонкиБД="ОбъектДляВыгрузки";
		
		Для Каждого Строка ИЗ ТаблицаДанных Цикл
			
			СтрРезультат=СтруктураПравила.ТаблицаДанных.Найти(XMLСтрока(Строка[ИмяКолонкиБД]),ИмяКолонкиБД);
			
			Если НЕ СтрРезультат=Неопределено Тогда
				
				СоответствиеОбъектов.Вставить(Строка[ИмяКолонкиБД],СтрРезультат[ИмяКолонкиОбъекта]);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат СоответствиеОбъектов
		
	КонецЕсли;
				
КонецФункции // ВыгрузитьОбъектыВВИБ()

Процедура ВыгрузитьДанныеСвязанныхОбъектов(ТекСоединениеВИБ,НастройкаСоответствия,ТабОбработанныхОбъектов,ИспользуемаяИБ)
	
	Для Каждого СтрокаСоответствия ИЗ НастройкаСоответствия.СоответствияСвязанныхОбъектов Цикл
		
		ВыгрузитьСвязанныеОбъектыПоНастройке(ТекСоединениеВИБ,СтрокаСоответствия,ТабОбработанныхОбъектов,НастройкаСоответствия,ИспользуемаяИБ);
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьДанныеСвязанныхОбъектов()

Процедура ВыгрузитьСвязанныеОбъектыПоНастройке(ТекСоединениеВИБ,СтрокаСвязь,ТабОбработанныхОбъектов,НастройкаСоответствия,ИспользуемаяИБ)
	
	ДанныеИсточника=Новый Структура;
	ДанныеИсточника.Вставить("ТипОбъектаТек",СтрокаСвязь.ТипОбъектаТек);
	ДанныеИсточника.Вставить("ОписаниеОбъектаТек",СтрокаСвязь.ОписаниеОбъектаТек);				
	ДанныеИсточника.Вставить("ПолеОтбора",?(СтрокаСвязь.ТипОбъектаТек="РегистрСведений",СтрокаСвязь.ИзмерениеРегистраТек,"Ссылка"));
	ДанныеИсточника.Вставить("ТаблицаАналитики",?(СтрокаСвязь.ТипОбъектаТек="РегистрСведений","РегистрСведений."+СтрокаСвязь.ОписаниеОбъектаТек.Наименование,НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных+"."+СтрокаСвязь.ОписаниеОбъектаТек.Имя));	
	
	
	СоответствиеНаборов=Новый Соответствие;
	ТипОбъектаМетаданныхТек=НастройкаСоответствия.ТипОбъектаКонсолидации;
	ИмяОбъектаМетаданныхТек=НастройкаСоответствия.ИмяОбъектаМетаданных;
	
	ТипОбъектаМетаданныхВИБ=НастройкаСоответствия.ТипОбъектаВИБ;
	ИмяОбъектаМетаданныхВИБ=НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
	
	ПравилаИспользованияПолей=ПодготовитьПравилаПолейДляВыгрузкиТЧ(СтрокаСвязь.НастройкаСоответствия);
	ПравилаДляВыгрузки=ПолучитьТаблицуПравилДляВыгрузки(ПравилаИспользованияПолей,ИспользуемаяИБ);
		
	ТекущаяИБ = Обработки.РаботаСМетаданнымиУХ.Создать();
	
	Для Каждого СтрОбъект ИЗ ТабОбработанныхОбъектов Цикл
		
		ОбъектСсылка=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьСсылкуПОСтрокеUUID(ТекущаяИБ,ТипОбъектаМетаданныхТек,ИмяОбъектаМетаданныхТек,СтрОбъект.ИсходныйОбъектБД);		
		
		ТаблицаДанных=ПолучитьТаблицуДляВыгрузкиТЧ(ОбъектСсылка,ДанныеИсточника,ПравилаИспользованияПолей);
					
		ТаблицаВИБ=ПеренестиТаблицуДанныхНаСторонуВИБ(?(ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy"),ТекущаяИБ,ТекСоединениеВИБ),ТаблицаДанных);
		
		СоответствиеНаборов.Вставить(СтрОбъект.ОбработанныйОбъектБД,Новый Структура("ТаблицаДанных,ТаблицаВИБ",?(ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy"),ТаблицаВИБ,ТаблицаДанных),ТаблицаВИБ));
				
	КонецЦикла;
	
	ДанныеПриемника=Новый Структура;
	ДанныеПриемника.Вставить("ПолеОтбора",?(СтрокаСвязь.ТипОбъектаВИБ="РегистрСведений",СтрокаСвязь.ИзмерениеРегистраВИБ,"Ссылка"));
	ДанныеПриемника.Вставить("ИмяТаблицы",?(СтрокаСвязь.ТипОбъектаВИБ="РегистрСведений",СтрокаСвязь.ОписаниеОбъектаВИБ.Наименование,СтрокаСвязь.ОписаниеОбъектаВИБ.Имя));
	ДанныеПриемника.Вставить("ТипОбъектаВИБ",СтрокаСвязь.ТипОбъектаВИБ);
	ДанныеПриемника.Вставить("ТипОбъектаМетаданных",ТипОбъектаМетаданныхВИБ);
	ДанныеПриемника.Вставить("ИмяОбъектаМетаданных",ИмяОбъектаМетаданныхВИБ);
	
	Если ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ПравилаДляВыгрузки",ПравилаДляВыгрузки);
		СтруктураПараметров.Вставить("СоответствиеНаборов",СоответствиеНаборов);
		СтруктураПараметров.Вставить("ДанныеПриемника",ДанныеПриемника);
		
		ДанныеОбработки= ТекСоединениеВИБ.FillInAssociatedTables(Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(9))).Получить();
		
	Иначе
		
		ДанныеОбработки=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ЗаполнитьСвязанныеТаблицы(ТекСоединениеВИБ,ПравилаДляВыгрузки,СоответствиеНаборов,ДанныеПриемника);
		
	КонецЕсли;
	
	Если ТипЗнч(ДанныеОбработки)=Тип("Структура") Тогда // Ошибка синхронизации, возможное дублирование данных
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ДублированиеДанныхПриСинхронизации", , , ДанныеОбработки.ТекстОшибки, Экспорт_ПолучитьСоответствиеТаблицДублейДляПротокола(ИспользуемаяИБ,ДанныеОбработки.СоответствиеТаблицДублей));
		
	ИначеЕсли ТипЗнч(ДанныеОбработки)=Тип("Массив") Тогда
		
		Для Каждого Элемент ИЗ ДанныеОбработки Цикл
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Элемент,,,СтатусСообщения.Важное);
			
		КонецЦикла;
			
	КонецЕсли;		
	
КонецПроцедуры // ВыгрузитьСвязанныеОбъектыПоНастройке()

Функция ПолучитьТаблицуДляВыгрузкиТЧ(ОбъектСсылка,ДанныеИсточника,ПравилаИспользованияПолей)
	
	ТекстПоля="";
	
	Если ДанныеИсточника.ТипОбъектаТек="РегистрСведений" Тогда
		
		Если ДанныеИсточника.ОписаниеОбъектаТек.Периодический Тогда
			
			ТекстЗапроса="ВЫБРАТЬ Период";
			
		Иначе
			
			ТекстЗапроса="ВЫБРАТЬ 1 КАК ФиктивноеПоле";
			
		КонецЕсли;
		
		Для Каждого СтрРесурс ИЗ ДанныеИсточника.ОписаниеОбъектаТек.Ресурсы Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрРесурс.Имя+".*";
			
		КонецЦикла;
		
		Для Каждого СтрИзмерение ИЗ ДанныеИсточника.ОписаниеОбъектаТек.Измерения Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрИзмерение.Имя+".*";
			
		КонецЦикла;
		
		Для Каждого СтрРеквизит ИЗ ДанныеИсточника.ОписаниеОбъектаТек.Реквизиты Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрРеквизит.Имя+".*";
			
		КонецЦикла;
		
	Иначе
		
		ТекстЗапроса="ВЫБРАТЬ 1 КАК ФиктивноеПоле";
		
		Для Каждого СтрРеквизит ИЗ ДанныеИсточника.ОписаниеОбъектаТек.Реквизиты Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрРеквизит.Имя+".*";
			
		КонецЦикла;
		
	КонецЕсли;

	ТекстЗапроса=ТекстЗапроса+"
	|{ВЫБРАТЬ "+Сред(ТекстПоля,2)+"}
	|ИЗ "+ДанныеИсточника.ТаблицаАналитики;
	
	ТекстЗапроса=ТекстЗапроса+"
	|{ГДЕ "+ДанныеИсточника.ПолеОтбора+"}";
	
	ПравилаВычисленияПараметров=Новый ТаблицаЗначений;
	ПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра");
	ПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
	ПравилаВычисленияПараметров.Колонки.Добавить("ТипРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));

	СтрЗапрос=Новый Структура;
				
	НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
	НоваяСтрока.ИмяПараметра=ДанныеИсточника.ПолеОтбора;
	НоваяСтрока.СпособВычисленияПараметра=ВидСравнения.Равно;
	НоваяСтрока.УточнениеСпособаОпределения=ОбъектСсылка;
	НоваяСтрока.ТипРасчета="ПоСсылкам";					
	
	СтрЗапрос.Вставить("ПравилаВычисленияПараметров",ПравилаВычисленияПараметров);
	СтрЗапрос.Вставить("ТекстЗапроса",ТекстЗапроса);
	
	СтрЗапрос.Вставить("ПравилаИспользованияПолей", ПравилаИспользованияПолей);
	
	ТаблицаДанных = ПолучитьТаблицуДляВыгрузкиПоЗапросу(СтрЗапрос);

	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьТаблицуДляВыгрузкиТЧ()

Функция ПодготовитьПравилаПолейДляВыгрузкиТЧ(НастройкаСоответствия)

	ПравилаИспользованияПолей = ПолучитьОписаниеТаблицыПравилаИспользованияПолей();
	ПравилаИспользованияПолей.Колонки.Добавить("ПолеТаблицаАналитикиВИБ",ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(150));
	ПравилаИспользованияПолей.Колонки.Добавить("ПолеАналитики",ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(150));
	
	Для Каждого СтрПоле ИЗ НастройкаСоответствия.СоответствиеРеквизитов Цикл
	
		НоваяСтрока=ПравилаИспользованияПолей.Добавить();
		НоваяСтрока.Поле=СтрПоле.РеквизитОбъектаКонсолидации;
		НоваяСтрока.Синоним		=СтрПоле.РеквизитОбъектаКонсолидации;
		НоваяСтрока.КодАналитики=СтрПоле.РеквизитОбъектаВнешнейИБ;
		
		Если ЗначениеЗаполнено(СтрПоле.НастройкаСоответствия) Тогда
			
			НоваяСтрока.ТаблицаАналитики	= СтрПоле.НастройкаСоответствия.ТипОбъектаКонсолидации+"."+СтрПоле.НастройкаСоответствия.ИмяОбъектаМетаданных;
			НоваяСтрока.ТаблицаАналитикиВИБ	= СтрПоле.НастройкаСоответствия.ТипОбъектаВИБ+"."+СтрПоле.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
			
		КонецЕсли;
		
		НоваяСтрока.СоздаватьНовые=Истина;
		НоваяСтрока.РазделятьПоОрганизациям=Ложь;
		НоваяСтрока.ОбновлятьРеквизитыПриИмпорте=Истина;
		НоваяСтрока.НастройкаСоответствия=СтрПоле.НастройкаСоответствия;
		НоваяСтрока.СпособЗаполнения=СтрПоле.СпособЗаполнения;
		НоваяСтрока.ФиксированноеЗначение = СтрПоле.ФиксированноеЗначение;
		НоваяСтрока.ПолеАналитики=СтрПоле.РеквизитОбъектаВнешнейИБ;
		
	КонецЦикла;
	
	ТабПравилаРабочие=ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей,Ложь,Истина,Ложь,Истина,Истина);
	
	Возврат ТабПравилаРабочие;
	
КонецФункции // ПодготовитьПравилаПолейДляВыгрузкиТЧ()

Функция Экспорт_ПолучитьСоответствиеТаблицДублейДляПротокола(ИспользуемаяИБ,СоответствиеТаблицДублей);
	
	ТипБД=ИспользуемаяИБ.ТипБД;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &ТипбД
	|	И СоответствиеВнешнимИБ.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	
	СоответствиеДляПротокола=Новый Соответствие;
	
	Для Каждого КлючИЗначение ИЗ СоответствиеТаблицДублей Цикл
		
		Запрос.УстановитьПараметр("Наименование",КлючИЗначение.Ключ);
		Результат=Запрос.Выполнить().Выбрать();
		Результат.Следующий();
		
		СоответствиеДляПротокола.Вставить(Результат.Ссылка,КлючИЗначение.Значение);
		
	КонецЦикла;
	
	Возврат СоответствиеДляПротокола;
	
КонецФункции // Экспорт_ПолучитьСоответствиеТаблицДублейДляПротокола() 

Функция Экспорт_ЗаполнитьАналитикуПоПравилам(ТекСоединениеВИБ,ТаблицаДанных,ТабПравилаДляВыгрузки,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов)
	
	Если ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТаблицаДанных",ТаблицаДанных);
		СтруктураПараметров.Вставить("ТабПравилаДляВыгрузки",ТабПравилаДляВыгрузки);
		СтруктураПараметров.Вставить("СтруктураКлючевыхРеквизитов",СтруктураКлючевыхРеквизитов);
		СтруктураПараметров.Вставить("СтруктураПодчиненныхРеквизитов",СтруктураПодчиненныхРеквизитов);
		
		Возврат ТекСоединениеВИБ.FillInAnalyticsByRules(Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(9))).Получить();
		
	Иначе
		
		ТаблицаВИБ=ПеренестиТаблицуДанныхНаСторонуВИБ(ТекСоединениеВИБ,ТаблицаДанных);
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ЗаполнитьАналитикуПоПравилам(ТекСоединениеВИБ,ТаблицаДанных,ТабПравилаДляВыгрузки,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,ТаблицаВИБ);
		
	КонецЕсли;
	
КонецФункции // Экспорт_ЗаполнитьАналитикуПоПравилам()

Функция Экспорт_ЗаполнитьНедостающиеАналитики(ТекСоединениеВИБ,
										ТаблицаИмпорта,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										ПравилаИспользованияПолей,
										ОбновлениеДочернихЭлементов)
										
	Если ТипЗнч(ТекСоединениеВИБ) = Тип("WSProxy") Тогда
		
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ТаблицаИмпорта",ТаблицаИмпорта);
		СтруктураПараметров.Вставить("СтруктураКлючевыхРеквизитов",СтруктураКлючевыхРеквизитов);
		СтруктураПараметров.Вставить("СтруктураПодчиненныхРеквизитов",СтруктураПодчиненныхРеквизитов);
		СтруктураПараметров.Вставить("ПравилаИспользованияПолей",ПравилаИспользованияПолей);
		СтруктураПараметров.Вставить("ОбновлениеДочернихЭлементов",ОбновлениеДочернихЭлементов);

		
		Возврат ТекСоединениеВИБ.FillInMissingItems(Новый ХранилищеЗначения(СтруктураПараметров, Новый СжатиеДанных(9))).Получить();
		
	Иначе
		
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ЗаполнитьНедостающиеАналитики(ТекСоединениеВИБ,
										ТаблицаИмпорта,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										ПравилаИспользованияПолей,
										ОбновлениеДочернихЭлементов);
		
	КонецЕсли;										
						
КонецФункции // Экспорт_ЗаполнитьНедостающиеАналитики

Процедура ВыгрузитьПодчиненныеОбъекты(ИспользуемаяИБ,ТабОбъектовДляВыгрузки)
	
	ТекОбъектыДляВыгрузки=ТабОбъектовДляВыгрузки.Скопировать();
	ТекОбъектыДляВыгрузки.Свернуть("ТаблицаАналитики");
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
	|ГДЕ
	|	(НЕ СоответствиеВнешнимИБСоответствиеРеквизитов.ПримитивныйТип)
	|	И СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.Владелец = &ТипБД
	|	И СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации
	|	И СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных";
	
	Запрос.УстановитьПараметр("ТипБД",ИспользуемаяИБ.ТипБД);
	
	Для Каждого СтрТаблица ИЗ ТекОбъектыДляВыгрузки Цикл 
		
		МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрТаблица.ТаблицаАналитики,".");
		ТипОбъектаМетаданных=МетаданныеОбъекта[0];
		ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
		
		Запрос.УстановитьПараметр("ТипОбъектаКонсолидации",ТипОбъектаМетаданных);
		Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ТекНастройкаСоответствия=Результат.Ссылка;
			СписокОбъектов=Новый СписокЗначений;
			
			МассивДанныхВыгрузки=ТабОбъектовДляВыгрузки.НайтиСтроки(Новый Структура("ТаблицаАналитики",СтрТаблица.ТаблицаАналитики));
			
			Для Каждого СтрОбъект ИЗ МассивДанныхВыгрузки Цикл
				
				ОбъектДляВыгрузки=ПолучитьЭлементАналитикиДляВыгрузки(СтрОбъект);
				
				Если НЕ ОбъектДляВыгрузки=Неопределено Тогда 
					
					Если СписокОбъектов.НайтиПоЗначению(ОбъектДляВыгрузки)=Неопределено Тогда
						
						СписокОбъектов.Добавить(ОбъектДляВыгрузки);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
			ВыгрузитьОбъектыВВИБ(ИспользуемаяИБ,ТекНастройкаСоответствия,
			Неопределено,
			СписокОбъектов,Ложь,Истина);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьПодчиненныеОбъекты() 

Функция ПолучитьТаблицуПравилДляВыгрузки(ТабПравилаРабочие,ИспользуемаяИБ)
	
	ТипБД=ИспользуемаяИБ.ТипБД;
	
	ТабПравилаДляВыгрузки=ТабПравилаРабочие.СкопироватьКолонки();
	ТабПравилаДляВыгрузки.Колонки.Удалить("ИспользованиеВИБ");
	ТабПравилаДляВыгрузки.Колонки.Удалить("ИспользованиеКонсолидация");
	ТабПравилаДляВыгрузки.Колонки.Удалить("НастройкаСоответствия");
	ТабПравилаДляВыгрузки.Колонки.Удалить("НастройкаСоответствияРеквизит");
	ТабПравилаДляВыгрузки.Колонки.Удалить("СпособЗаполнения");
	
	ТабПравилаДляВыгрузки.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТабПравилаДляВыгрузки.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТабПравилаДляВыгрузки.Колонки.Добавить("НастройкаСоответствия");
	ТабПравилаДляВыгрузки.Колонки.Добавить("НастройкаСоответствияРеквизит");
	ТабПравилаДляВыгрузки.Колонки.Добавить("СпособЗаполнения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТабПравилаДляВыгрузки.Колонки.Добавить("НастройкаСоответствияНаименование",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТабПравилаДляВыгрузки.Колонки.Добавить("ДанныеОбъекта");

	Для Каждого Строка ИЗ ТабПравилаРабочие Цикл
		
		НоваяСтрока=ТабПравилаДляВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка,,"ИспользованиеВИБ,ИспользованиеКонсолидация,НастройкаСоответствия,НастройкаСоответствияРеквизит,СпособЗаполнения");
		
		НоваяСтрока.ИспользованиеВИБ=XMLString(Строка.ИспользованиеВИБ);
		НоваяСтрока.ИспользованиеКонсолидация=XMLString(Строка.ИспользованиеКонсолидация);
		НоваяСтрока.СпособЗаполнения=XMLString(Строка.СпособЗаполнения);
		
		Если ЗначениеЗаполнено(Строка.НастройкаСоответствия) Тогда
			
			НоваяСтрока.НастройкаСоответствия=ПреобразоватьНастройкуСоответствияКПримитивным(Строка.НастройкаСоответствия,ИспользуемаяИБ);
			НоваяСтрока.НастройкаСоответствияНаименование=НоваяСтрока.НастройкаСоответствия.Наименование;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Строка.НастройкаСоответствияРеквизит) Тогда
			
			НоваяСтрока.НастройкаСоответствияРеквизит=ПреобразоватьНастройкуСоответствияКПримитивным(Строка.НастройкаСоответствияРеквизит,ИспользуемаяИБ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрока.ТаблицаАналитикиВИБ) Тогда
			
			НоваяСтрока.ДанныеОбъекта=Экспорт_ПолучитьДанныеОбъектаБД(НоваяСтрока.ТаблицаАналитикиВИБ,ТипБД);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТабПравилаДляВыгрузки;
	
КонецФункции // ПолучитьТаблицуПравилДляВыгрузки()

Функция ПреобразоватьНастройкуСоответствияКПримитивным(НастройкаСоответствия,ИспользуемаяИБ,ПреобразоватьНастройкуРеквизит=Истина)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	 |	СоответствиеВнешнимИБ.Наименование КАК Наименование,
	 |	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование КАК ИмяОбъектаВнешнейИБ,
	 |	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации КАК ТипОбъектаКонсолидации,
	 |	СоответствиеВнешнимИБ.ТипОбъектаВИБ КАК ТипОбъектаВИБ,
	 |	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	 |	СоответствиеВнешнимИБ.СинхронизацияПоGUID КАК СинхронизацияПоGUID,
	 |	СоответствиеВнешнимИБ.ПроцедураПередЗаписью КАК ПроцедураПередЗаписью,
	 |	СоответствиеВнешнимИБ.ПоддерживатьИерархиюВИБ КАК ПоддерживатьИерархиюВИБ,
	 |	СоответствиеВнешнимИБ.СоответствиеЗначенийПеречислений.(
	 |		ЗначениеВнешнейИБ КАК ЗначениеВнешнейИБ,
	 |		ПредставлениеВнешнейИБ КАК ПредставлениеВнешнейИБ,
	 |		ЗначениеТекущейИБ КАК ЗначениеТекущейИБ,
	 |		ПредставлениеТекущейИБ КАК ПредставлениеТекущейИБ
	 |	) КАК СоответствиеЗначенийПеречислений,
	 |	СоответствиеВнешнимИБ.СоответствиеРеквизитов.(
	 |		РеквизитОбъектаКонсолидации КАК РеквизитОбъектаКонсолидации,
	 |		РеквизитОбъектаВнешнейИБ КАК РеквизитОбъектаВнешнейИБ,
	 |		НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	 |		НастройкаСоответствия КАК НастройкаСоответствия,
	 |		ИспользованиеКонсолидация КАК ИспользованиеКонсолидация,
	 |		ИспользованиеВИБ КАК ИспользованиеВИБ,
	 |		ТаблицаАналитики КАК ТаблицаАналитики,
	 |		ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	 |		СпособЗаполнения КАК СпособЗаполнения,
	 |		ПримитивныйТип КАК ПримитивныйТип
	 |	) КАК СоответствиеРеквизитов
	 |ИЗ
	 |	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	 |ГДЕ
	 |	СоответствиеВнешнимИБ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",НастройкаСоответствия);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	СтруктураНастройки=Новый Структура;
	СтруктураНастройки.Вставить("Наименование",				Результат.Наименование);
	СтруктураНастройки.Вставить("ИмяОбъектаВнешнейИБ",		Результат.ИмяОбъектаВнешнейИБ);
	СтруктураНастройки.Вставить("ТипОбъектаКонсолидации",	Результат.ТипОбъектаКонсолидации);
	СтруктураНастройки.Вставить("ТипОбъектаВИБ",			Результат.ТипОбъектаВИБ);
	СтруктураНастройки.Вставить("ИмяОбъектаМетаданных",		Результат.ИмяОбъектаМетаданных);
	СтруктураНастройки.Вставить("СинхронизацияПоGUID",		Результат.СинхронизацияПоGUID);
	СтруктураНастройки.Вставить("ПроцедураПередЗаписью",	Результат.ПроцедураПередЗаписью);
	СтруктураНастройки.Вставить("ПоддерживатьИерархиюВИБ",	Результат.ПоддерживатьИерархиюВИБ);
	
	СтруктураНастройки.Вставить("СоответствиеЗначенийПеречислений",Результат.СоответствиеЗначенийПеречислений.Выгрузить());
	
	ТекСоответствиеРеквизитов=Результат.СоответствиеРеквизитов.Выгрузить();
	
	СоответствиеРеквизитов=ТекСоответствиеРеквизитов.СкопироватьКолонки();
	СоответствиеРеквизитов.Колонки.Удалить("ИспользованиеВИБ");
	СоответствиеРеквизитов.Колонки.Удалить("ИспользованиеКонсолидация");
	СоответствиеРеквизитов.Колонки.Удалить("НастройкаСоответствия");
	СоответствиеРеквизитов.Колонки.Удалить("СпособЗаполнения");
	
	СоответствиеРеквизитов.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	СоответствиеРеквизитов.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	СоответствиеРеквизитов.Колонки.Добавить("НастройкаСоответствия");
	СоответствиеРеквизитов.Колонки.Добавить("СпособЗаполнения",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));

	Для Каждого Строка ИЗ ТекСоответствиеРеквизитов Цикл
		
		НоваяСтрока=СоответствиеРеквизитов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка,,"ИспользованиеВИБ,ИспользованиеКонсолидация,НастройкаСоответствия,СпособЗаполнения");
		
		НоваяСтрока.ИспользованиеВИБ=XMLString(Строка.ИспользованиеВИБ);
		НоваяСтрока.ИспользованиеКонсолидация=XMLString(Строка.ИспользованиеКонсолидация);
		НоваяСтрока.СпособЗаполнения=XMLString(Строка.СпособЗаполнения);
		
		Если ЗначениеЗаполнено(Строка.НастройкаСоответствия) И ПреобразоватьНастройкуРеквизит Тогда
			
			НоваяСтрока.НастройкаСоответствия=ПреобразоватьНастройкуСоответствияКПримитивным(Строка.НастройкаСоответствия,ИспользуемаяИБ,Ложь);
			
		КонецЕсли;
				
	КонецЦикла;
	
	СтруктураНастройки.Вставить("СоответствиеРеквизитов",СоответствиеРеквизитов);
	
	Если Результат.СинхронизацияПоGUID Тогда
		
		СтруктураНастройки.Вставить("СоответствиеОбъектовРоGUID",ПолучитьТаблицуСинхронизацииПоGUID(НастройкаСоответствия,ИспользуемаяИБ)); 

	КонецЕсли;	
			
	Возврат СтруктураНастройки;
	
КонецФункции // ПреобразоватьНастройкуСоответствияКПримитивным 

Функция ПолучитьТаблицуСинхронизацииПоGUID(НастройкаСоответствия,ИспользуемаяИБ)
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ КАК GUIDОбъектаВнещнейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.GUIDОбъектаТекущейИБ КАК GUIDОбъектаТекущейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствияНаименование КАК НастройкаСоответствияНаименование,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ТипОбъектаТекущейИБ КАК ТипОбъектаВнешнейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ТипОбъектаВнешнейИБ КАК ТипОбъектаТекущейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ИмяОбъектаТекущейИБ КАК ИмяОбъектаВнешейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ИмяОбъектаВнешнейИБ КАК ИмяОбъектаТекущейИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
	|ГДЕ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия = &НастройкаСоответствия
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ = &ИспользуемаяИБ";
	
	Запрос.УстановитьПараметр("НастройкаСоответствия",	НастройкаСоответствия);
	Запрос.УстановитьПараметр("ИспользуемаяИБ",			ИспользуемаяИБ);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуСинхронизацииПоGUID()


Функция ВИБ_ПолучитьОписаниеТиповПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитики) Экспорт
	
	ДанныеТипа=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
	
	Если ДанныеТипа.Количество()=2 Тогда
		
		Если НЕ (ТекСоединениеВИБ.MetaData.Catalogs.Найти(ДанныеТипа[1])=Неопределено
			И ТекСоединениеВИБ.MetaData.Documents.Найти(ДанныеТипа[1])=Неопределено
			И ТекСоединениеВИБ.MetaData.Enums.Найти(ДанныеТипа[1])=Неопределено
			И ТекСоединениеВИБ.MetaData.ChartsOfAccounts.Найти(ДанныеТипа[1])=Неопределено
			И ТекСоединениеВИБ.MetaData.ChartsOfCharacteristicTypes.Найти(ДанныеТипа[1])=Неопределено) Тогда
			
			ОписаниеТипов=ТекСоединениеВИБ.NewObject("TypeDescription",ДанныеТипа[0]+"Ссылка."+ДанныеТипа[1]);
			
			Возврат ОписаниеТипов;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ВИБ_ПолучитьОписаниеТиповПоТаблицеАналитики() 




									
Функция ПолучитьТаблицуДляВыгрузкиПоЗапросу(ДанныеЗапроса)
	
	ПостроительЗапроса=Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст=ДанныеЗапроса.ТекстЗапроса;
	ПостроительЗапроса.ЗаполнитьНастройки();
	ПостроительЗапроса.ВыбранныеПоля.Очистить();
	ПостроительЗапроса.Параметры.Очистить();
	ПостроительЗапроса.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапроса.Отбор.Количество();
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапроса.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	СписокПутей=Новый Массив;
	
	Для Каждого СтрПоле ИЗ ДанныеЗапроса.ПравилаИспользованияПолей Цикл
		
		Если СписокПутей.Найти(СтрПоле.Поле)=Неопределено Тогда
			
			ПостроительЗапроса.ВыбранныеПоля.Добавить(СтрПоле.Поле,СтрПоле.Синоним);					
			СписокПутей.Добавить(СтрПоле.Поле);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрПараметр ИЗ ДанныеЗапроса.ПравилаВычисленияПараметров Цикл
		
		Если СтрПараметр.ТипРасчета="ПоСсылкам" Тогда 
			
			НовыйОтбор=ПостроительЗапроса.Отбор.Добавить(СтрПараметр.ИмяПараметра);
			НовыйОтбор.ВидСравнения=СтрПараметр.СпособВычисленияПараметра;
			
			НовыйОтбор.Значение=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрПараметр.УточнениеСпособаОпределения);			
			НовыйОтбор.Использование=Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();	
	
КонецФункции // ПолучитьТаблицуДляВыгрузкиПоЗапросу()

Функция ПеренестиТаблицуДанныхНаСторонуВИБ(ТекСоединениеВИБ,ТаблицаДанных)
	
	ТаблицаВИБ=ТекСоединениеВИБ.NewObject("ТаблицаЗначений");
	
	МассивСсылочные=Новый Массив;
	
	Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
		
		ТипЗначения=Колонка.ТипЗначения;
		
		Для Каждого ТекущийТип ИЗ ТипЗначения.Типы() Цикл
			
			Если ВРег(XMLТип(ТекущийТип).ИмяТипа)="NULL" Тогда
				
				Продолжить;
			
			ИначеЕсли ТекущийТип=Тип("Число") Тогда
				
				Разрядность=Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность;
				РазрядностьДробнойЧасти=Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти;
				
				ОписаниеТипов=ВИБ_ПолучитьОписаниеТиповЧисла(ТекСоединениеВИБ,Разрядность,РазрядностьДробнойЧасти);
				
			ИначеЕсли ТекущийТип=Тип("Строка") Тогда
				
				ДлинаСтроки=Колонка.ТипЗначения.КвалификаторыСтроки.Длина;
				ОписаниеТипов=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповСтроки(ТекСоединениеВИБ,ДлинаСтроки);
				
			ИначеЕсли ТекущийТип=Тип("Дата") Тогда
				
				ТекЧастиДаты=Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты;
				ОписаниеТипов=ВИБ_ПолучитьОписаниеТиповДата(ТекСоединениеВИБ,ТекЧастиДаты);
				
			ИначеЕсли ТекущийТип=Тип("Булево") Тогда
				
				ОписаниеТипов=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповБулево(ТекСоединениеВИБ);
				
			Иначе
				
				МассивСсылочные.Добавить(Колонка.Имя);
				ОписаниеТипов=РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьОписаниеТиповСтроки(ТекСоединениеВИБ,255);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаВИБ.Columns.Add(Колонка.Имя,ОписаниеТипов);
		
	КонецЦикла;
	
	Для Каждого Строка ИЗ ТаблицаДанных Цикл
		
		НоваяСтрока=ТаблицаВИБ.Add();
		
		Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
			
			Если (Не ЗначениеЗаполнено(Строка[Колонка.Имя])) Тогда
				Продолжить;
			КонецЕсли;
			
			Если МассивСсылочные.Найти(Колонка.Имя)=Неопределено Тогда
				
				НоваяСтрока[Колонка.Имя]=Строка[Колонка.Имя];
				
			Иначе
				
				МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(Колонка.Имя);
				
				СтрРеквизит=МассивПутей[МассивПутей.Количество()-1];
				ТаблицаАналитики=Строка[Колонка.Имя].Метаданные().ПолноеИмя();
				
				Если СтрРеквизит="Ссылка" Тогда
					
					НоваяСтрока[Колонка.Имя]=Строка[Колонка.Имя].Метаданные().ПолноеИмя();
					
				ИначеЕсли СтрНайти(ТаблицаАналитики,"Перечисление.")>0 Тогда
					
					НоваяСтрока[Колонка.Имя]=XMLСтрока(Строка[Колонка.Имя]);
					
				Иначе
					
					НоваяСтрока[Колонка.Имя]=XMLСтрока(Строка[Колонка.Имя]);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	Возврат ТаблицаВИБ;
		
КонецФункции // ПеренестиТаблицуДанныхНаСторонуВИБ()									



 


Функция ПолучитьОбъектВнешнейИБПоСсылкеТекущей(ТекСоединениеВИБ,СсылкаТекущейИБ,НастройкаСоответствия,ИспользуемаяИБ,ТаблицаАналитикиВИБ)
	
	МетаданныеОбъектаВИБ=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитикиВИБ,".");
	ТипОбъектаМетаданныхВИБ=МетаданныеОбъектаВИБ[0];
	ИмяОбъектаМетаданныхВИБ=МетаданныеОбъектаВИБ[1];
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ КАК ОбъектВнешнейИБ,
	|	СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия.ТипОбъектаВИБ КАК ТипОбъектаВИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
	|ГДЕ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ = &ОбъектТекущейИБ
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия = &НастройкаСоответствия
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ = &ИспользуемаяИБ";
	
	Запрос.УстановитьПараметр("ОбъектТекущейИБ",		СсылкаТекущейИБ);
	Запрос.УстановитьПараметр("НастройкаСоответствия",	НастройкаСоответствия);
	Запрос.УстановитьПараметр("ИспользуемаяИБ",			ИспользуемаяИБ);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ОбъектВнешнейИБ=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,Результат.ТипОбъектаВИБ,ИмяОбъектаМетаданныхВИБ,Результат.ОбъектВнешнейИБ);
		
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось определить элемент %ТаблицаАналитикиВИБ% по идентификатору объекта текущей ИБ: %СсылкаТекущейИБ%
		|		Настройка соответствия: %НастройкаСоответствия%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ТаблицаАналитикиВИБ));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СсылкаТекущейИБ%", Строка(СсылкаТекущейИБ));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НастройкаСоответствия%", Строка(НастройкаСоответствия));

		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		
		ОбъектВнешнейИБ=ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитикиВИБ);
		
	КонецЕсли;
	
	Возврат ОбъектВнешнейИБ;
	
КонецФункции // ПолучитьОбъектВнешнейИБПоСсылкеТекущей() 

Функция ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитикиВИБ)
	
	Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитикиВИБ);
		
КонецФункции // ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики()

 



Функция Экспорт_ПолучитьДанныеОбъектаБД(ТаблицаАналитики,ТипБД)
	
	ОбъектМетаданных						= Неопределено;
	СоздаватьПриНеудачномПоискеПриИмпорте	= Ложь;
	ОбновлятьРеквизитыПриИмпорте			= Ложь;
	РазделятьПоОрганизациям					= Ложь;
		
	МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
	
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
		
	Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ
		|	СправочникиБД.СоздаватьПриНеудачномПоискеПриИмпорте,
		|	СправочникиБД.ОбновлятьРеквизитыПриИмпорте
		|ИЗ
		|	Справочник."+?(ТипОбъектаМетаданных="Справочник","СправочникиБД","ПланыВидовХарактеристикБД")+" КАК СправочникиБД
		|ГДЕ
		|	СправочникиБД.Наименование = &Наименование
		|	И СправочникиБД.Владелец = &ТипБД";
		
		Запрос.УстановитьПараметр("Наименование",ИмяОбъектаМетаданных);
		Запрос.УстановитьПараметр("ТипБД",ТипБД);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			СоздаватьПриНеудачномПоискеПриИмпорте	= Результат.СоздаватьПриНеудачномПоискеПриИмпорте;
			ОбновлятьРеквизитыПриИмпорте			= Результат.ОбновлятьРеквизитыПриИмпорте;
			
		КонецЕсли;
		
	КонецЕсли;
			
	Данныеобъекта=Новый Структура;
	ДанныеОбъекта.Вставить("ТипОбъектаМетаданных"					,ТипОбъектаМетаданных);
	ДанныеОбъекта.Вставить("ИмяОбъектаМетаданных"					,ИмяОбъектаМетаданных);
	ДанныеОбъекта.Вставить("СоздаватьПриНеудачномПоискеПриИмпорте"	,СоздаватьПриНеудачномПоискеПриИмпорте);
	ДанныеОбъекта.Вставить("ОбновлятьРеквизитыПриИмпорте"			,ОбновлятьРеквизитыПриИмпорте);
	
	Возврат Данныеобъекта;
	
КонецФункции // ПолучитьДанныеОбъектаБД()

Функция ВИБ_ПодготовитьДеревоРеквизитов()
	
	
	
КонецФункции // ПодготовитьДеревоРеквизитов()


 
 
 //////////////////////////////////////////////////////////////////////////////////////////////////////
 ///
 
 Функция ЗагрузитьОбъектыИзВИБ(ИспользуемаяИБ,
	 	НастройкаСоответствия,
		Организация=Неопределено,
		СписокОтбора=Неопределено,
		ВернутьТаблицуСопоставления=Ложь,
		ОбновлениеДочернихЭлементов=Ложь,
		ЧислоПервых=0) Экспорт
	
	Использование77=(ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77);
	
	ПравилаИспользованияПолей = ПолучитьОписаниеТаблицыПравилаИспользованияПолей();
	
	НоваяСтрока=ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.Поле="Ссылка";
	НоваяСтрока.Синоним="Элемент";
	НоваяСтрока.СоздаватьНовые=Истина;
	НоваяСтрока.РазделятьПоОрганизациям=(НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" И НастройкаСоответствия.ИмяОбъектаМетаданных.РазделятьПоОрганизациям);
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте=Истина;
	НоваяСтрока.КодАналитики=НастройкаСоответствия.ТипОбъектаВИБ+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
	НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
	НоваяСтрока.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	НоваяСтрока.ФиксированноеЗначение = Неопределено;
	
	КонтекстОтчета=Новый Структура;
	КонтекстОтчета.Вставить("ИспользуемаяИБ",ИспользуемаяИБ);
	КонтекстОтчета.Вставить("Организация",Организация);
	КонтекстОтчета.Вставить("Загрузка",Истина);
	КонтекстОтчета.Вставить("База");
	
	Если ОбновлениеДочернихЭлементов Тогда
		
		КонтекстОтчета.Вставить("ОбновлениеДочернихЭлементов",Истина);
		
	КонецЕсли;
	
	СтрЗапрос=Новый Структура;
	
	Если СписокОтбора=Неопределено Тогда
		
		СтрЗапрос.Вставить("ПравилаВычисленияПараметров",Новый ТаблицаЗначений);
		
	Иначе
		
		ПравилаВычисленияПараметров=Новый ТаблицаЗначений;
		ПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
		ПравилаВычисленияПараметров.Колонки.Добавить("ПолеБД",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
		ПравилаВычисленияПараметров.Колонки.Добавить("ПредставлениеПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
		ПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыВычисленияПараметровОперандов"));
        ПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
		ПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеДляПроверки");
		ПравилаВычисленияПараметров.Колонки.Добавить("ТипРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
		ПравилаВычисленияПараметров.Колонки.Добавить("Реквизит",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
		ПравилаВычисленияПараметров.Колонки.Добавить("СмещениеПериода",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
		ПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));

		НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
		НоваяСтрока.ИмяПараметра="Ссылка";
		НоваяСтрока.ПолеБД		="Ссылка";
		НоваяСтрока.ПредставлениеПараметра="Ссылка";
		НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
		НоваяСтрока.УточнениеСпособаОпределения=СписокОтбора;
		НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
		НоваяСтрока.ТипРасчета="Простой";
		
		ТекПравилаВычисленияПараметров=ПолучитьРабочуюТаблицуВычисленияПараметров(ПравилаВычисленияПараметров);	
		ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
		
		СтрЗапрос.Вставить("ПравилаВычисленияПараметров",ТекПравилаВычисленияПараметров);
				
	КонецЕсли;
	
	СтрЗапрос.Вставить("ПланСчетов");
	
	ТекстЗапроса="ВЫБРАТЬ "+?(ЧислоПервых>0,"ПЕРВЫЕ "+Формат(ЧислоПервых,"ЧРГ=' '; ЧГ=0")+" " ,"")+ "Ссылка КАК Ссылка
	|{ВЫБРАТЬ Ссылка.*";
	
	Для Каждого СтрРеквизит ИЗ НастройкаСоответствия.ОписаниеОбъектаВИБ.Реквизиты Цикл
		
		ТекстЗапроса=ТекстЗапроса+",
		|"+СтрРеквизит.Имя+".*";
		
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+"}
	|ИЗ "+НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование+"
	|ГДЕ (НЕ Ссылка.ПометкаУдаления)
	|{ГДЕ Ссылка}";
	
	СтрЗапрос.Вставить("ТекстЗапроса",ТекстЗапроса);
	СтрЗапрос.Вставить("СпособПолучения");
	
	ТабПравилаРабочие=ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей,Использование77,,ВернутьТаблицуСопоставления,НЕ ОбновлениеДочернихЭлементов,Истина);
	
	СтруктураЗапроса=Новый Структура;
	СтруктураЗапроса.Вставить("СтруктураПолей",Новый Структура("ПравилаИспользованияПолей",ТабПравилаРабочие));
	
	СтрЗапрос.Вставить("СтруктураЗапроса",СтруктураЗапроса);
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);
	
	Если ВернутьТаблицуСопоставления Тогда
		
		СтруктураЗапроса.Вставить("ДобавлятьПредставление",Истина);
		
	КонецЕсли;
		

	ТаблицаДанных= ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ЗАПОЛНЯЕМ НЕДОСТАЮЩИЕ АНАЛИТИКИ
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураПодчиненныхРеквизитов=Новый Структура;
	
	Если СтруктураЗапроса.Свойство("База") Тогда
		
		КонтекстОтчета.Вставить("База",СтруктураЗапроса.База);
		
	КонецЕсли;
	
	Результат=ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ТабПравилаРабочие,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,КонтекстОтчета);
	
	Если ВернутьТаблицуСопоставления Тогда
		
		Возврат Результат;
		
	Иначе
	
		ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										Результат,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										Ложь,
										ТабПравилаРабочие);
										
	КонецЕсли;
				
КонецФункции // ЗагрузитьЭлементыСправочникаВИБ()


Функция ПолучитьОписаниеТаблицыПравилаИспользованияПолей()
	
	ПравилаИспользованияПолей = Новый ТаблицаЗначений;
	ПравилаИспользованияПолей.Колонки.Добавить("Поле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	ПравилаИспользованияПолей.Колонки.Добавить("Синоним",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	ПравилаИспользованияПолей.Колонки.Добавить("РеквизитАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	ПравилаИспользованияПолей.Колонки.Добавить("АналитикаОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));	
	ПравилаИспользованияПолей.Колонки.Добавить("СоздаватьНовые",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("РазделятьПоОрганизациям",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("КодАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	ПравилаИспользованияПолей.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	ПравилаИспользованияПолей.Колонки.Добавить("СпособЗаполнения", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыЗаполненияПолейИсточника"));
	ПравилаИспользованияПолей.Колонки.Добавить("ФиксированноеЗначение", Новый ОписаниеТипов(ОбщегоНазначенияУХ.ПолучитьМассивТиповЛюбаяСсылка()));

	Возврат ПравилаИспользованияПолей;
	
КонецФункции

Процедура ЗагрузитьОбъектыИзADO(ИспользуемаяИБ,НастройкаСоответствия,Организация=Неопределено,СписокОтбора=Неопределено,ОбновлениеДочернихЭлементов=Ложь) Экспорт
		
	ПравилаИспользованияПолей = ПолучитьОписаниеТаблицыПравилаИспользованияПолей();
	
	НоваяСтрока=ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.Поле="["+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование+"]";
	НоваяСтрока.Синоним="Элемент";
	НоваяСтрока.СоздаватьНовые=Истина;
	НоваяСтрока.РазделятьПоОрганизациям=(НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" И НастройкаСоответствия.ИмяОбъектаМетаданных.РазделятьПоОрганизациям);
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте=Истина;
	НоваяСтрока.КодАналитики="ТаблицаADO";
	НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
	НоваяСтрока.ТаблицаАналитикиВИБ="({["+НастройкаСоответствия.ОписаниеОбъектаВИБ.Имя+"]})";
	НоваяСтрока.СпособЗаполнения = Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
	НоваяСтрока.ФиксированноеЗначение = Неопределено;
	
	КонтекстОтчета=Новый Структура;
	КонтекстОтчета.Вставить("ИспользуемаяИБ",ИспользуемаяИБ);
	КонтекстОтчета.Вставить("Организация",Организация);
	КонтекстОтчета.Вставить("Загрузка",Истина);
	КонтекстОтчета.Вставить("База");
	КонтекстОтчета.Вставить("ИмяФайла",НастройкаСоответствия.ОписаниеОбъектаВИБ.ИмяФайла);
	
	Если ОбновлениеДочернихЭлементов Тогда
		
		КонтекстОтчета.Вставить("ОбновлениеДочернихЭлементов",Истина);
		
	КонецЕсли;
	
	СтрЗапрос=Новый Структура;
	
	Если СписокОтбора=Неопределено Тогда
		
		СтрЗапрос.Вставить("ПравилаВычисленияПараметров",Новый ТаблицаЗначений);
		
	Иначе
		
		ПравилаВычисленияПараметров=Новый ТаблицаЗначений;
		ПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
		ПравилаВычисленияПараметров.Колонки.Добавить("ПредставлениеПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
		ПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыВычисленияПараметровОперандов"));
        ПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
		ПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеДляПроверки");
		ПравилаВычисленияПараметров.Колонки.Добавить("ТипРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
		ПравилаВычисленияПараметров.Колонки.Добавить("Реквизит",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
		ПравилаВычисленияПараметров.Колонки.Добавить("СмещениеПериода",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
		ПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
		ПравилаВычисленияПараметров.Колонки.Добавить("ТаблицаАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));

		НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
		НоваяСтрока.ИмяПараметра="["+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование+"]";
		НоваяСтрока.ПредставлениеПараметра="Ссылка";
		НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений;
		НоваяСтрока.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СписокОтбора, Новый СжатиеДанных());
		НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
		НоваяСтрока.ТипРасчета="Простой";
		НоваяСтрока.ТаблицаАналитикиВИБ="({["+НастройкаСоответствия.ОписаниеОбъектаВИБ.Имя+"]})";
		
		ТекПравилаВычисленияПараметров=ПолучитьРабочуюТаблицуВычисленияПараметровADO(ПравилаВычисленияПараметров);	
		ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
		
		СтрЗапрос.Вставить("ПравилаВычисленияПараметров",ТекПравилаВычисленияПараметров);
				
	КонецЕсли;
		
	ТабПравилаРабочие=ADO_ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей);
	
	СтруктураЗапроса=Новый Структура;
	СтруктураЗапроса.Вставить("СтруктураПолей",Новый Структура("ПравилаИспользованияПолей",ТабПравилаРабочие));
	
	СтрЗапрос.Вставить("СтруктураЗапроса",СтруктураЗапроса);
	СтрЗапрос.Вставить("ТекстЗапроса","");
	СтрЗапрос.Вставить("ПланСчетов","");
	СтрЗапрос.Вставить("СпособПолучения",Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO);
		
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);

	ТаблицаДанных = ADO_ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ЗАПОЛНЯЕМ НЕДОСТАЮЩИЕ АНАЛИТИКИ
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураПодчиненныхРеквизитов=Новый Структура;
	
	Результат=ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ТабПравилаРабочие,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,КонтекстОтчета);
	
	ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										Результат,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										Ложь,
										ТабПравилаРабочие);
				
КонецПроцедуры // ЗагрузитьОбъектыИзADO()


Функция ВИБ_ПолучитьОписаниеТиповДата(База,ТекЧастиДаты) Экспорт
	
	Если ТекЧастиДаты=ЧастиДаты.Время Тогда	
		КвалификаторДаты = База.NewObject("DateQualifiers",База.DateFractions.Time);
	ИначеЕсли ТекЧастиДаты=ЧастиДаты.Дата Тогда	
		КвалификаторДаты = База.NewObject("DateQualifiers",База.DateFractions.Date);
	Иначе	
		КвалификаторДаты = База.NewObject("DateQualifiers",База.DateFractions.DateTime);
	КонецЕсли;
	
	ОписаниеТипов=База.NewObject("TypeDescription","Дата",КвалификаторДаты);
	
	Возврат ОписаниеТипов;
	
КонецФункции // ПолучитьОписаниеТиповСтроки()

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ВИБ_ПолучитьОписаниеТиповЧисла(База,Разрядность,РазрядностьДробнойЧасти=0) Экспорт
	
	КвалификаторЧисла = База.NewObject("NumberQualifiers",Разрядность,РазрядностьДробнойЧасти);	
	ОписаниеТипов=База.NewObject("TypeDescription","Число",КвалификаторЧисла);
	
	Возврат ОписаниеТипов;
	
КонецФункции	// ПолучитьОписаниеТиповЧисла() 



Функция ПолучитьЭлементАналитикиДляВыгрузки(СтрокаДанных) Экспорт
	 
   	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|СправочникБД.Ссылка
	|ИЗ "+СтрокаДанных.ТаблицаАналитики+" КАК СправочникБД";
	
	ТекстОтбор="";
	
	НомерПараметра=1;
	
	Для Каждого КлючИЗначение ИЗ СтрокаДанных.СтруктураРеквизитов Цикл
		
		Если СтрНайти(КлючИЗначение.Ключ,СтрокаДанных.КодАналитики)=1 Тогда
			
			ТекстПоля="СправочникБД."+СтрЗаменить(СтрЗаменить(КлючИЗначение.Ключ,СтрокаДанных.КодАналитики+"vzv",""),"vzv",".");
			
			Если ТипЗнч(КлючИЗначение.Значение)=Тип("Строка") Тогда
				ТекстПоля="ВЫРАЗИТЬ ("+ТекстПоля+" КАК Строка(200))";
			КонецЕсли;
			
			ТекстОтбор=ТекстОтбор+" И "+ТекстПоля+"=&Параметр"+НомерПараметра;
			Запрос.УстановитьПараметр("Параметр"+НомерПараметра,КлючИЗначение.Значение);
			
			НомерПараметра=НомерПараметра+1;
			
		ИначеЕсли СтрНайти(КлючИЗначение.Ключ,"НСИ_")>0 Тогда
			
			ТекстОтбор=ТекстОтбор+" И СправочникБД."+КлючИЗначение.Ключ+"=&Параметр"+НомерПараметра;
			Запрос.УстановитьПараметр("Параметр"+НомерПараметра,КлючИЗначение.Значение);
			
			НомерПараметра=НомерПараметра+1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТекстОтбор="" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|ГДЕ "+Сред(ТекстОтбор,3);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Возврат Результат.Ссылка;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
			 
КонецФункции // ПолучитьЭлементАналитикиДляВыгрузки() 

////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ КОПИРОВАНИЯ ЭЛЕМЕНТОВ НСИ С РЕКУРСИВНЫМ ЗАПОЛНЕНИЕМ РЕКВИЗИТОВ
/////////////////////////////////////////////////////////////////////////////////////////////////////

Функция КопироватьОбъектыНСИ(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных,СписокОтбора,НСИ_ВИБ=Неопределено) Экспорт
	
	Если СписокОтбора.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КонтекстОтчета=Новый Структура;
	КонтекстОтчета.Вставить("Загрузка",Истина);
	КонтекстОтчета.Вставить("ИспользуемаяИБ",Справочники.ВнешниеИнформационныеБазы.ПустаяСсылка());
	
	ТабОбъектовДляВыгрузки=Новый ТаблицаЗначений;
	ТабОбъектовДляВыгрузки.Колонки.Добавить("ТаблицаАналитики");
	ТабОбъектовДляВыгрузки.Колонки.Добавить("СтруктураРеквизитов");
	ТабОбъектовДляВыгрузки.Колонки.Добавить("КодАналитики");

	КонтекстОтчета.Вставить("ТабОбъектовДляВыгрузки",ТабОбъектовДляВыгрузки);
	КонтекстОтчета.Вставить("НСИ_ВИБ",?(НСИ_ВИБ=Неопределено,СписокОтбора[0].Значение.НСИ_ВИБ,НСИ_ВИБ));
		
	НастройкаСоответствия=ПолучитьШаблонНастройкиСоответствияТек(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных);
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ТАБЛИЦУ ДЛЯ ВЫЧИСЛЕНИЯ ПАРАМЕТРОВ ЗАПРОСА
	
	ПравилаВычисленияПараметров=Новый ТаблицаЗначений;
	ПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра");
	ПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
	ПравилаВычисленияПараметров.Колонки.Добавить("ТипРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	
	СтрЗапрос=Новый Структура;
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
		НоваяСтрока.ИмяПараметра="Ссылка.Владелец";
		НоваяСтрока.СпособВычисленияПараметра=ВидСравнения.Равно;
		НоваяСтрока.УточнениеСпособаОпределения=НастройкаСоответствия.ИмяОбъектаМетаданных;
		НоваяСтрока.ТипРасчета="ПоСсылкам";
				
	КонецЕсли;
	
	ПравилаИспользованияПолей=Новый ТаблицаЗначений;
	ПравилаИспользованияПолей.Колонки.Добавить("Поле",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПравилаИспользованияПолей.Колонки.Добавить("Синоним",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПравилаИспользованияПолей.Колонки.Добавить("РеквизитАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПравилаИспользованияПолей.Колонки.Добавить("ТаблицаАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПравилаИспользованияПолей.Колонки.Добавить("АналитикаОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));	
	ПравилаИспользованияПолей.Колонки.Добавить("СоздаватьНовые",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("РазделятьПоОрганизациям",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ПравилаИспользованияПолей.Колонки.Добавить("КодАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ПравилаИспользованияПолей.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));	
	
	НоваяСтрока=ПравилаИспользованияПолей.Добавить();
	НоваяСтрока.Поле="Ссылка";
	НоваяСтрока.Синоним="Элемент";
	НоваяСтрока.СоздаватьНовые=Истина;
	НоваяСтрока.РазделятьПоОрганизациям=(НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" И НастройкаСоответствия.ИмяОбъектаМетаданных.РазделятьПоОрганизациям);
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте=Истина;
	НоваяСтрока.КодАналитики=НастройкаСоответствия.ТипОбъектаВИБ+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
	НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
	
	ТабПравилаРабочие=ПодготовитьТаблицуПолейДляКопирования(ПравилаИспользованияПолей,НастройкаСоответствия);	
	
	НоваяСтрока=ТабПравилаРабочие.Добавить();
	НоваяСтрока.Поле="Ссылка";
	НоваяСтрока.Синоним="ОбъектДляВыгрузки";
	НоваяСтрока.СоздаватьНовые=Ложь;
	НоваяСтрока.РазделятьПоОрганизациям=Ложь;
    НоваяСтрока.ОбновлятьРеквизитыПриИмпорте=Ложь;
	НоваяСтрока.КодАналитики="ОбъектДляВыгрузки";

	СтрЗапрос.Вставить("ПравилаИспользованияПолей",ТабПравилаРабочие);
			
	НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
	НоваяСтрока.ИмяПараметра="Ссылка";
	НоваяСтрока.СпособВычисленияПараметра=ВидСравнения.ВСписке;
	НоваяСтрока.УточнениеСпособаОпределения=СписокОтбора;
	НоваяСтрока.ТипРасчета="ПоСсылкам";
		
	СтрЗапрос.Вставить("ПравилаВычисленияПараметров",ПравилаВычисленияПараметров);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ТЕКСТ ЗАПРОСА
	
	ТекстЗапроса="ВЫБРАТЬ 1 КАК ФиктивноеПоле
	|{ВЫБРАТЬ Ссылка.* КАК Ссылка";
	
	Для Каждого СтрРеквизит ИЗ НастройкаСоответствия.СоответствиеРеквизитов Цикл
		
		ТекстЗапроса=ТекстЗапроса+",
		|"+СтрРеквизит.РеквизитОбъектаКонсолидации+".*";
		
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+"}";
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТекстЗапроса=ТекстЗапроса+"	
		|ИЗ Справочник.ПроизвольныйКлассификаторУХ КАК ПроизвольныйКлассификаторУХ";
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+"
		|ИЗ "+НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаДанных+" КАК "+НастройкаСоответствия.ИмяОбъектаМетаДанных;	
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|ГДЕ (НЕ Ссылка.ПометкаУдаления) 
	|{ГДЕ Ссылка.*}";
		
	СтрЗапрос.Вставить("ТекстЗапроса",ТекстЗапроса);	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	// ПОДГОТОВИМ ПОЛЯ ЗАПРОСА
		
	ТаблицаДанных = ПолучитьТаблицуДляВыгрузкиПоЗапросу(СтрЗапрос);
	
	МассивКолонокСсылка=Новый Массив;
	
	Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
		
		МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(Колонка.Имя);
		
		СтрРеквизит=МассивПутей[МассивПутей.Количество()-1];
		
		Если СтрРеквизит="Ссылка" Тогда
			
			МассивКолонокСсылка.Добавить(Колонка.Имя);
			Колонка.Имя=Колонка.Имя+"vzv"+"Reference";			
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивКолонокСсылка.Количество()>0 Тогда
		
		Для Каждого КолонкаСсылка ИЗ МассивКолонокСсылка Цикл
			
			ТаблицаДанных.Колонки.Добавить(КолонкаСсылка,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
			
		КонецЦикла;
			
		Для Каждого Строка ИЗ ТаблицаДанных Цикл
			
			Для Каждого Колонка ИЗ МассивКолонокСсылка Цикл
				
				ОбъектМД=Метаданные.НайтиПоТипу(ТипЗнч(Строка[Колонка+"vzv"+"Reference"]));
				
				Если НЕ ОбъектМД=Неопределено Тогда
					
					Строка[Колонка]=ОбъектМД.ПолноеИмя();
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для Каждого КолонкаСсылка ИЗ МассивКолонокСсылка Цикл
			
			ТаблицаДанных.Колонки.Удалить(КолонкаСсылка+"vzv"+"Reference");
			
		КонецЦикла;
	
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ЗАПОЛНЯЕМ НЕДОСТАЮЩИЕ АНАЛИТИКИ
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураПодчиненныхРеквизитов=Новый Структура;
	
	Результат=ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ТабПравилаРабочие,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,КонтекстОтчета);
	
	ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										Результат,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										Ложь,
										ТабПравилаРабочие);
                                                                    
	
		
	Возврат Результат[0][НастройкаСоответствия.ТипОбъектаВИБ+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование];
										
КонецФункции // КопироватьОбъектыНСИ

Функция ПодготовитьТаблицуПолейДляКопирования(ПравилаИспользованияПолей,НастройкаСоответствия)
		
	СоответствиеПолейДляОбмена=ПолучитьТаблицуПолейДляКопирования(НастройкаСоответствия.ТипОбъектаКонсолидации,НастройкаСоответствия.ИмяОбъектаМетаданных,НастройкаСоответствия);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ТабПредварительныеДанные=ПравилаИспользованияПолей.СкопироватьКолонки();
	
	ТабПредварительныеДанные.Колонки.Добавить("РеквизитКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТабПредварительныеДанные.Колонки.Добавить("РеквизитВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТабПредварительныеДанные.Колонки.Добавить("ТипОбъектаКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная);
	ТабПредварительныеДанные.Колонки.Добавить("ИмяОбъектаМетаданных",Новый ОписаниеТипов(Массив, , КвалификаторСтроки));

	ТабПредварительныеДанные.Колонки.Добавить("ПолеДопРеквизитов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТабПредварительныеДанные.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	ТабПредварительныеДанные.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));	
	ТабПредварительныеДанные.Колонки.Добавить("ИерархияКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ВидИерархии"));
	ТабПредварительныеДанные.Колонки.Добавить("ИерархияВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ВидИерархии"));
	ТабПредварительныеДанные.Колонки.Добавить("НеИспользоватьДляОтбора",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТабПредварительныеДанные.Колонки.Добавить("НастройкаСоответствияРеквизит");
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
		
		Для Каждого СтрРеквизит ИЗ СоответствиеПолейДляОбмена Цикл
			
			НоваяСтрока=ТабПредварительныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрПоле);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрРеквизит);
			НоваяСтрока.НастройкаСоответствияРеквизит=СтрРеквизит.НастройкаСоответствия;
			НоваяСтрока.РеквизитКонсолидации=СтрРеквизит.РеквизитОбъектаКонсолидации;
			НоваяСтрока.РеквизитВИБ=СтрРеквизит.РеквизитОбъектаВнешнейИБ;
	
		КонецЦикла;
		
	КонецЦикла;
	
	ТабПредварительныеДанные.Сортировать("КодАналитики Возр");
	
	РабочаяТаблицаПолей=ПравилаИспользованияПолей.СкопироватьКолонки();
	РабочаяТаблицаПолей.Колонки.Добавить("УровеньВложенности",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	РабочаяТаблицаПолей.Колонки.Добавить("НастройкаСоответствияРеквизит");
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	
	Для Каждого Результат ИЗ ТабПредварительныеДанные Цикл
		
		СтрокаТаблицы=РабочаяТаблицаПолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Результат);
		
		Если Результат.РеквизитКонсолидации="EnumRefValue" Тогда
			РабочийРеквизитВыгрузки="";
		Иначе
			РабочийРеквизитВыгрузки=СтрЗаменить(Результат.РеквизитКонсолидации,".EnumRefValue","");
		КонецЕсли;	
		
		РабочийРеквизитЗагрузки=Результат.РеквизитВИБ;
		
		Если НЕ Результат.РеквизитВИБ=Неопределено Тогда
			
			Если СтрНайти(Результат.РеквизитВИБ,".Ссылка")>0 Тогда
				
				МассивПутейВИБ=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Результат.РеквизитВИБ,".");
				МассивПутейКонс=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Результат.РеквизитКонсолидации,".");
				
				Если МассивПутейВИБ.Количество()>МассивПутейКонс.Количество()
					И МассивПутейВИБ[МассивПутейВИБ.Количество()-1]="Ссылка" Тогда
					
					РабочийРеквизитВыгрузки=РабочийРеквизитВыгрузки+".Ссылка";
					РабочийРеквизитЗагрузки=СтрЗаменить(РабочийРеквизитЗагрузки,".Ссылка","");
					
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокаТаблицы.ТаблицаАналитики=Результат.ТаблицаАналитики;		
			СтрокаТаблицы.РеквизитАналитики = РабочийРеквизитЗагрузки;
			
		КонецЕсли;
			
		Если РабочийРеквизитВыгрузки=Неопределено Тогда
			
			Если ПустаяСтрока(Результат.КодАналитики) Тогда
				СтрокаТаблицы.КодАналитики=Результат.Синоним;
			КонецЕсли;
			
		Иначе // Ставим стандартный псевдоним запроса
			
			Если СтрНайти(Результат.КодАналитики,"Аналитика")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"Справочник")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"Документ")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"ПланВидовХарактеристик")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"ПланСчетов")>0 Тогда
				
				СтрокаТаблицы.Поле    = Результат.Поле+?(РабочийРеквизитВыгрузки="","","."+ РабочийРеквизитВыгрузки);	
				СтрокаТаблицы.Синоним = Результат.КодАналитики+?(РабочийРеквизитВыгрузки="","","vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"));
				
			Иначе
				
				СтрокаТаблицы.Поле    = Результат.Поле+"."+ РабочийРеквизитВыгрузки;	
				
				Если ЗначениеЗаполнено(Результат.Синоним) Тогда
					
					СтрокаТаблицы.Синоним = Результат.Синоним+?(СтрДлина(РабочийРеквизитВыгрузки)>0,"vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"),"");
					
				Иначе
					
					СтрокаТаблицы.Синоним = СтрЗаменить(Результат.Поле,".","vzv") + ?(РабочийРеквизитВыгрузки="","","vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"));
					
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.КодАналитики) Тогда
			СтрокаТаблицы.КодАналитики=Результат.Синоним;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаОперанда) Тогда
			СтрокаТаблицы.АналитикаОперанда=Результат.ИмяОбъектаМетаданных;
		КонецЕсли;
		
		Если СтрНайти(СтрокаТаблицы.КодАналитики,"Аналитика")>0 Тогда
			СтрокаТаблицы.ИндексАналитики=Число(СтрЗаменить(СтрокаТаблицы.КодАналитики,"Аналитика",""));
		КонецЕсли;
		
		СтрокаТаблицы.КодАналитики=СтрокаТаблицы.КодАналитики+Результат.ПолеДопРеквизитов;
		
		МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(СтрокаТаблицы.КодАналитики);
		
		СтрокаТаблицы.УровеньВложенности=МассивПутей.Количество();
		
	КонецЦикла;
	
	РабочаяТаблицаПолей.Сортировать("ИндексАналитики ВОЗР, УровеньВложенности ВОЗР");
	
	Возврат РабочаяТаблицаПолей;
	
КонецФункции // ПодготовитьТаблицуПолейДляКопирования()

Функция ПолучитьТаблицуПолейДляКопирования(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных,НастройкаСоответствия=Неопределено)
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("РеквизитОбъектаКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТаблицаПолей.Колонки.Добавить("РеквизитОбъектаВнешнейИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТаблицаПолей.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	ТаблицаПолей.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаПолей.Колонки.Добавить("ТипОбъектаКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	Массив.Добавить(Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная);
	ТаблицаПолей.Колонки.Добавить("ИмяОбъектаМетаданных",Новый ОписаниеТипов(Массив, , КвалификаторСтроки));

	ТаблицаПолей.Колонки.Добавить("ПолеДопРеквизитов",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	ТаблицаПолей.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	ТаблицаПолей.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));	
	ТаблицаПолей.Колонки.Добавить("ИерархияКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ВидИерархии"));
	ТаблицаПолей.Колонки.Добавить("ИерархияВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ВидИерархии"));
    ТаблицаПолей.Колонки.Добавить("ТаблицаАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
	ТаблицаПолей.Колонки.Добавить("НеИспользоватьДляОтбора",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТаблицаПолей.Колонки.Добавить("НастройкаСоответствия");

	ТаблицаСозданныхНастроек=Новый ТаблицаЗначений;
	ТаблицаСозданныхНастроек.Колонки.Добавить("ТипОбъектаКонсолидации");
	ТаблицаСозданныхНастроек.Колонки.Добавить("ИмяОбъектаМетаданных");
	ТаблицаСозданныхНастроек.Колонки.Добавить("НастройкаСоответствия");
	
	Если НастройкаСоответствия=Неопределено Тогда
		НастройкаСоответствия=ПолучитьШаблонНастройкиСоответствияТек(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных,ТаблицаСозданныхНастроек);
	КонецЕсли;
	
	ДобавитьСтрокиПолейДляИмпорта(ТаблицаПолей,НастройкаСоответствия,"","","");
	
	Возврат ТаблицаПолей;
	
КонецФункции // ПолучитьТаблицуПолейДляКопирования()

Функция ПолучитьШаблонНастройкиСоответствияТек(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных,ТаблицаСозданныхНастроек=Неопределено)
	
	Если ТаблицаСозданныхНастроек=Неопределено Тогда
		
		ТаблицаСозданныхНастроек=Новый ТаблицаЗначений;
		ТаблицаСозданныхНастроек.Колонки.Добавить("ТипОбъектаКонсолидации");
		ТаблицаСозданныхНастроек.Колонки.Добавить("ИмяОбъектаМетаданных");
		ТаблицаСозданныхНастроек.Колонки.Добавить("НастройкаСоответствия");
		
	КонецЕсли;
	
	МассивНастроек=ТаблицаСозданныхНастроек.НайтиСтроки(Новый Структура("ТипОбъектаКонсолидации,ИмяОбъектаМетаданных",ТипОбъектаКонсолидации,ИмяОбъектаМетаданных));
	
	Если МассивНастроек.Количество()=0 Тогда
		
		мТаблицаВозможныхПолей=Справочники.СоответствиеВнешнимИБ.ЗаполнитьСписокПолей(ТипОбъектаКонсолидации,ИмяОбъектаМетаданных);
		
		СоответствиеРеквизитов=Новый ТаблицаЗначений;
		СоответствиеРеквизитов.Колонки.Добавить("РеквизитОбъектаКонсолидации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		СоответствиеРеквизитов.Колонки.Добавить("РеквизитОбъектаВнешнейИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		СоответствиеРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		СоответствиеРеквизитов.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
		СоответствиеРеквизитов.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));	
		СоответствиеРеквизитов.Колонки.Добавить("НастройкаСоответствия");
		СоответствиеРеквизитов.Колонки.Добавить("ПримитивныйТип",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		СоответствиеРеквизитов.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
		
		СтруктураСоответствие=Новый Структура;
		СтруктураСоответствие.Вставить("ТипОбъектаКонсолидации",ТипОбъектаКонсолидации);
		СтруктураСоответствие.Вставить("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
		
		ИерархическийСправочник=Ложь;
		ВидИерархии=Перечисления.ВидИерархии.НетИерархии;
		
		Если ТипОбъектаКонсолидации="Справочник" Тогда	
			ОбъектМетаДанных = МетаДанные.Справочники[ИмяОбъектаМетаданных];
			ИмяСправочника=ИмяОбъектаМетаданных;
			ИерархическийСправочник=ОбъектМетаДанных.Иерархический;
		ИначеЕсли ТипОбъектаКонсолидации="ПланВидовХарактеристик" Тогда	
			ОбъектМетаДанных = МетаДанные.ПланыВидовХарактеристик[ИмяОбъектаМетаданных];
			ИмяСправочника=ИмяОбъектаМетаданных;
			ИерархическийСправочник=ОбъектМетаДанных.Иерархический;
		ИначеЕсли ТипОбъектаКонсолидации="ВидСубконто" Тогда	
			ОбъектМетаДанных = ОбщегоНазначенияУХ.ПолучитьСправочникПоВидуСубконто(ИмяОбъектаМетаданных);
			ИмяСправочника="ПроизвольныйКлассификаторУХ";
			ИерархическийСправочник=ОбъектМетаДанных.Иерархический;	
		КонецЕсли;
		
		Если ИерархическийСправочник Тогда
			
			Если ОбъектМетаДанных.HierarchyType=Metadata.ObjectProperties.HierarchyType.HierarchyFoldersAndItems Тогда
				
				ВидИерархии=Перечисления.ВидИерархии.ИерархияГруппИЭлементов;
				
			Иначе
				
				ВидИерархии=Перечисления.ВидИерархии.ИерархияЭлементов;
				
			КонецЕсли;
			
		КонецЕсли;
		
		СтруктураСоответствие.Вставить("ПоддерживатьИерархиюВИБ",ИерархическийСправочник);
		СтруктураСоответствие.Вставить("ТипОбъектаВИБ",ТипОбъектаКонсолидации);
		СтруктураСоответствие.Вставить("ОписаниеОбъектаВИБ",Новый Структура("Наименование,ИерархическийСправочник,ВидИерархии",ИмяСправочника,ИерархическийСправочник,ВидИерархии));
		
		СтруктураСоответствие.Вставить("СоответствиеРеквизитов",СоответствиеРеквизитов);
		
		СтрНастройка=ТаблицаСозданныхНастроек.Добавить();
		СтрНастройка.ТипОбъектаКонсолидации=ТипОбъектаКонсолидации;
		СтрНастройка.ИмяОбъектаМетаданных=ИмяОбъектаМетаданных;
		СтрНастройка.НастройкаСоответствия=СтруктураСоответствие;
		
	Иначе
		
		СтруктураСоответствие=МассивНастроек[0].НастройкаСоответствия;
		
	КонецЕсли;
	
	/////////////////////////////////////////////////////////////////////////////////////////////////
	// Заполним шаблон таблицы соответствия
	
	// Заполним примитивные типы
	
	МассивПримитивные=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ПримитивныйТип",Истина));
	
	Для Каждого СтрСоответствие ИЗ МассивПримитивные Цикл
		
		Если СтрСоответствие.Поле="Код" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока=СтруктураСоответствие.СоответствиеРеквизитов.Добавить();
		НоваяСтрока.РеквизитОбъектаКонсолидации=СтрСоответствие.Поле;
		НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрСоответствие.Поле;
		
		Если СтрСоответствие.ТипДанныхПоля.Количество()=1 Тогда
			
			Если СтрСоответствие.ТипДанныхПоля[0].Значение=Тип("Строка") 
				И СтрСоответствие.ТипДанныхПоля[0].Пометка Тогда
				
				НоваяСтрока.НеИспользоватьДляСинхронизации=Истина;
				
			КонецЕсли;
			
		КонецЕсли;
				
		НоваяСтрока.ИспользованиеКонсолидация=СтрСоответствие.Использование;
		НоваяСтрока.ИспользованиеВИБ=СтрСоответствие.Использование;
		НоваяСтрока.ПримитивныйТип=СтрСоответствие.ПримитивныйТип;
							
		НоваяСтрока.ТаблицаАналитики=ОпределитьТаблицуАналитики(СтруктураСоответствие);
				
	КонецЦикла;
		
	// Заполним ссылочные типы
	
	МассивСсылочные=мТаблицаВозможныхПолей.НайтиСтроки(Новый Структура("ПримитивныйТип",Ложь));
		
	Для Каждого СтрСоответствие ИЗ МассивСсылочные Цикл
		
		Если (НЕ (ЗначениеЗаполнено(СтрСоответствие.ТипОбъектаКонсолидации) И ЗначениеЗаполнено(СтрСоответствие.ИмяОбъектаМетаданных)))
			И СтрСоответствие.ТипДанныхПоля.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрСоответствие.ТипДанныхПоля.Количество()>1 Тогда
			
			НоваяСтрока=СтруктураСоответствие.СоответствиеРеквизитов.Добавить();
			НоваяСтрока.РеквизитОбъектаКонсолидации=СтрСоответствие.Поле;
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрСоответствие.Поле+".Ссылка";
			НоваяСтрока.ИспользованиеКонсолидация=СтрСоответствие.Использование;
			НоваяСтрока.ИспользованиеВИБ=СтрСоответствие.Использование;
			НоваяСтрока.ПримитивныйТип=Истина;
			
			СтрТаблицаАналитики="";
			
			Для Каждого СтрокаТип ИЗ СтрСоответствие.ТипДанныхПоля Цикл
				
				ТекТаблицаАналитики=Метаданные.НайтиПоТипу(СтрокаТип.Значение).ПолноеИмя();
				
				СтрТаблицаАналитики=СтрТаблицаАналитики+";"+ТекТаблицаАналитики;
				
			КонецЦикла;
			
			НоваяСтрока.ТаблицаАналитики=Сред(СтрТаблицаАналитики,2);
			
			Для Каждого СтрТип ИЗ СтрСоответствие.ТипДанныхПоля Цикл
				
				ТекДанныеОбъекта=Метаданные.НайтиПоТипу(СтрТип.Значение);
				
				Если ТекДанныеОбъекта=Неопределено Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ПодчиненнаяСтрока=СтруктураСоответствие.СоответствиеРеквизитов.Добавить();
				ПодчиненнаяСтрока.РеквизитОбъектаКонсолидации=СтрСоответствие.Поле;
				ПодчиненнаяСтрока.РеквизитОбъектаВнешнейИБ=СтрСоответствие.Поле;
				ПодчиненнаяСтрока.ИспользованиеКонсолидация=СтрСоответствие.Использование;
				ПодчиненнаяСтрока.ИспользованиеВИБ=СтрСоответствие.Использование;
				ПодчиненнаяСтрока.ПримитивныйТип=Ложь;
				
				ТаблицаАналитики=ТекДанныеОбъекта.ПолноеИмя();
				ДанныеСинхронизации=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
				
				ТекТипОбъектаКонсолидации=ДанныеСинхронизации[0];
				ТекИмяОбъектаМетаданных=ДанныеСинхронизации[1];
				
				МассивНастроек=ТаблицаСозданныхНастроек.НайтиСтроки(Новый Структура("ТипОбъектаКонсолидации,ИмяОбъектаМетаданных",ТекТипОбъектаКонсолидации,ТекИмяОбъектаМетаданных));
				
				Если МассивНастроек.Количество()=0 Тогда 	
					
					Если ТекТипОбъектаКонсолидации=ТипОбъектаКонсолидации
						И ТекИмяОбъектаМетаданных=ИмяОбъектаМетаданных Тогда
						
						ПодчиненнаяСтрока.НастройкаСоответствия=СтруктураСоответствие;
						
						СтрНастройка=ТаблицаСозданныхНастроек.Добавить();
						СтрНастройка.ТипОбъектаКонсолидации=ТекТипОбъектаКонсолидации;
						СтрНастройка.ИмяОбъектаМетаданных=ТекИмяОбъектаМетаданных;
						СтрНастройка.НастройкаСоответствия=ПодчиненнаяСтрока.НастройкаСоответствия;
						
					Иначе
						
						ПодчиненнаяСтрока.НастройкаСоответствия=ПолучитьШаблонНастройкиСоответствияТек(ТекТипОбъектаКонсолидации,ТекИмяОбъектаМетаданных,ТаблицаСозданныхНастроек);
						
						СтрНастройка=ТаблицаСозданныхНастроек.Добавить();
						СтрНастройка.ТипОбъектаКонсолидации=ТекТипОбъектаКонсолидации;
						СтрНастройка.ИмяОбъектаМетаданных=ТекИмяОбъектаМетаданных;
						СтрНастройка.НастройкаСоответствия=ПодчиненнаяСтрока.НастройкаСоответствия;
						
					КонецЕсли;
					
				Иначе
					
					ПодчиненнаяСтрока.НастройкаСоответствия=МассивНастроек[0].НастройкаСоответствия;
					
				КонецЕсли;
					
			КонецЦикла;
			
		Иначе
			
			НоваяСтрока=СтруктураСоответствие.СоответствиеРеквизитов.Добавить();
			НоваяСтрока.РеквизитОбъектаКонсолидации=СтрСоответствие.Поле;
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрСоответствие.Поле;
			
			МассивНастроек=ТаблицаСозданныхНастроек.НайтиСтроки(Новый Структура("ТипОбъектаКонсолидации,ИмяОбъектаМетаданных",СтрСоответствие.ТипОбъектаКонсолидации,СтрСоответствие.ИмяОбъектаМетаданных));
			
			Если МассивНастроек.Количество()=0 Тогда 	
				
				Если СтрСоответствие.ТипОбъектаКонсолидации=ТипОбъектаКонсолидации
					И СтрСоответствие.ИмяОбъектаМетаданных=ИмяОбъектаМетаданных Тогда
					
					НоваяСтрока.НастройкаСоответствия=СтруктураСоответствие;
					
					СтрНастройка=ТаблицаСозданныхНастроек.Добавить();
					СтрНастройка.ТипОбъектаКонсолидации=СтрСоответствие.ТипОбъектаКонсолидации;
					СтрНастройка.ИмяОбъектаМетаданных=СтрСоответствие.ИмяОбъектаМетаданных;
					СтрНастройка.НастройкаСоответствия=НоваяСтрока.НастройкаСоответствия;
					
				Иначе
					
					НоваяСтрока.НастройкаСоответствия=ПолучитьШаблонНастройкиСоответствияТек(СтрСоответствие.ТипОбъектаКонсолидации,СтрСоответствие.ИмяОбъектаМетаданных,ТаблицаСозданныхНастроек);
					
					СтрНастройка=ТаблицаСозданныхНастроек.Добавить();
					СтрНастройка.ТипОбъектаКонсолидации=СтрСоответствие.ТипОбъектаКонсолидации;
					СтрНастройка.ИмяОбъектаМетаданных=СтрСоответствие.ИмяОбъектаМетаданных;
					СтрНастройка.НастройкаСоответствия=НоваяСтрока.НастройкаСоответствия;
					
				КонецЕсли;
				
			Иначе
				
				НоваяСтрока.НастройкаСоответствия=МассивНастроек[0].НастройкаСоответствия;
				
			КонецЕсли;
			
			НоваяСтрока.НеИспользоватьДляСинхронизации=Ложь;
			НоваяСтрока.ИспользованиеКонсолидация=СтрСоответствие.Использование;
			НоваяСтрока.ИспользованиеВИБ=СтрСоответствие.Использование;
			НоваяСтрока.ПримитивныйТип=СтрСоответствие.ПримитивныйТип;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураСоответствие;
	
КонецФункции // ПолучитьШаблонНастройкиСоответствияТек() 

///////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОЗДАНИЯ МАССИВОВ ПОЛЕЙ ДЛЯ ОБМЕНА ДАННЫМИ С ВИБ


Функция ОпределитьТаблицуАналитики(НастройкаСоответствия)
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		Возврат Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		Возврат НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	
КонецФункции // ОпределитьТаблицуАналитики

Функция ПолучитьСтруктуруТаблицРеквизитов(НастройкаСоответствия)
	
	СтруктураРеквизиты=Новый Структура;
	
	Если ЕстьОписаниеПримитивногоТипа(НастройкаСоответствия.ОписаниеОбъектаВИБ) Тогда
		
		СтруктураРеквизиты.Вставить("РеквизитыВИБ",НастройкаСоответствия.ОписаниеОбъектаВИБ.Реквизиты.Выгрузить());
		
	КонецЕсли;
	
	Если ЕстьОписаниеПримитивногоТипа(НастройкаСоответствия.ОписаниеОбъектаТек) Тогда
		
		СтруктураРеквизиты.Вставить("РеквизитыТек",НастройкаСоответствия.ОписаниеОбъектаТек.Реквизиты.Выгрузить());
		
	КонецЕсли;
	
	Возврат СтруктураРеквизиты;

КонецФункции // ПолучитьСтруктуруТаблицРеквизитов() 

Функция ЕстьОписаниеПримитивногоТипа(ОписаниеОбъекта)
	
	Возврат (ТипЗнч(ОписаниеОбъекта)=Тип("СправочникСсылка.ДокументыБД")
		ИЛИ ТипЗнч(ОписаниеОбъекта)=Тип("СправочникСсылка.ПланыВидовХарактеристикБД")
		ИЛИ ТипЗнч(ОписаниеОбъекта)=Тип("СправочникСсылка.РегистрыСведенийБД")
		ИЛИ ТипЗнч(ОписаниеОбъекта)=Тип("СправочникСсылка.СправочникиБД")
		ИЛИ ТипЗнч(ОписаниеОбъекта)=Тип("СправочникСсылка.ТабличныеЧастиБД"));
	
КонецФункции //
	
Процедура УстановитьВозможностьГруппировки(НоваяСтрока,СтруктураРеквизиты,РеквизитОбъектаВИБ,РеквизитОбъектаТек)
	
	Если СтруктураРеквизиты.Свойство("РеквизитыВИБ") Тогда
		
		СтрРеквизит=СтруктураРеквизиты.РеквизитыВИБ.Найти(РеквизитОбъектаВИБ,"Имя");
		
		Если НЕ СтрРеквизит=Неопределено Тогда
			
			НоваяСтрока.НеГруппироватьИмпорт=(СтрРеквизит.ОписаниеПримитивногоТипа="Строка(0,Переменная)");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураРеквизиты.Свойство("РеквизитыТек") Тогда
		
		СтрРеквизит=СтруктураРеквизиты.РеквизитыТек.Найти(РеквизитОбъектаТек,"Имя");
		
		Если НЕ СтрРеквизит=Неопределено Тогда
			
			НоваяСтрока.НеГруппироватьЭкспорт=(СтрРеквизит.ОписаниеПримитивногоТипа="Строка(0,Переменная)");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // УстановитьВозможностьГруппировки()


Процедура ДобавитьСтрокиПолейДляИмпорта(НаборЗаписей,НастройкаСоответствия,ТекИмяПоляВИБ,ТекИмяПоляКонсолидации,ТекПолеДопРеквизитов)
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТекТаблицаАналитики= Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		ТекТаблицаАналитики=НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	Если НастройкаСоответствия.СинхронизацияПоGUID Тогда
		
		НоваяСтрока=НаборЗаписей.Добавить();
		НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ+"Ref";
		НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"Ref";
		НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
		НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;
		НоваяСтрока.НеИспользоватьДляСинхронизации=Истина;
		НоваяСтрока.ПервичноеЗаполнение=Истина;
		НоваяСтрока.ТаблицаАналитикиВИБ=НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;

		Возврат;
		
	КонецЕсли;
			
	СтруктураИерархия=ПолучитьДанныеПоИерархии(НастройкаСоответствия);
	СтруктураРеквизиты=ПолучитьСтруктуруТаблицРеквизитов(НастройкаСоответствия);
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивПримитивные=НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("ПримитивныйТип",Истина));
	
	Для Каждого СтрНастройка ИЗ МассивПримитивные Цикл
		
		Если СтрНастройка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		
		Если НастройкаСоответствия.ТипОбъектаВИБ="Перечисление" Тогда
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=?(ПустаяСтрока(ТекИмяПоляВИБ),"EnumRefValue",ТекИмяПоляВИБ);
		Иначе	
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ+СтрНастройка.РеквизитОбъектаВнешнейИБ;
		КонецЕсли;
		
		НоваяСтрока.НеИспользоватьДляСинхронизации=СтрНастройка.НеИспользоватьДляСинхронизации;
		НоваяСтрока.ТипОбъектаКонсолидации=НастройкаСоответствия.ТипОбъектаКонсолидации;
		НоваяСтрока.ИмяОбъектаМетаданных=НастройкаСоответствия.ИмяОбъектаМетаданных;
		НоваяСтрока.ИспользованиеКонсолидация=СтрНастройка.ИспользованиеКонсолидация;
		НоваяСтрока.ИспользованиеВИБ=СтрНастройка.ИспользованиеВИБ;
		НоваяСтрока.ИерархияКонсолидации=СтруктураИерархия.ИерархияКонсолидации;
		НоваяСтрока.ИерархияВИБ=СтруктураИерархия.ИерархияВИБ;
		
		Если СтрНайти(СтрНастройка.РеквизитОбъектаВнешнейИБ,".Ссылка")>0 Тогда
			НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов+"vzv"+СтрНастройка.РеквизитОбъектаКонсолидации;
			НоваяСтрока.НеИспользоватьДляОтбора=Истина;
		Иначе
			НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрНастройка.ТаблицаАналитики) Тогда
			НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		Иначе
			НоваяСтрока.ТаблицаАналитики=СтрНастройка.ТаблицаАналитики;
		КонецЕсли;
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление.")>0 Тогда
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"EnumRefValue";
			
		ИначеЕсли ЗначениеЗаполнено(СтрНастройка.ТаблицаАналитикиВИБ) Тогда
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации+"vzPrim";
			
		Иначе	
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации;
			
		КонецЕсли;
		
		НоваяСтрока.ТаблицаАналитикиВИБ=НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
		
		УстановитьВозможностьГруппировки(НоваяСтрока,СтруктураРеквизиты,СтрНастройка.РеквизитОбъектаВнешнейИБ,СтрНастройка.РеквизитОбъектаКонсолидации);
		
		НоваяСтрока.ПервичноеЗаполнение=Истина; 
		
	КонецЦикла;
	
	ТаблицаПереходов=Новый ТаблицаЗначений;
	ТаблицаПереходов.Колонки.Добавить("НачальнаяНастройка");
	ТаблицаПереходов.Колонки.Добавить("КонечнаяНастройка");	
	ТаблицаПереходов.Колонки.Добавить("ИмяРеквизита");
	
	Если НастройкаСоответствия.ПоддерживатьИерархиюВИБ И НастройкаСоответствия.ТипОбъектаВИБ="Справочник" Тогда
		
		Если СтруктураИерархия.ИерархияВИБ=Перечисления.ВидИерархии.ИерархияГруппИЭлементов
			И СтруктураИерархия.ИерархияКонсолидации=Перечисления.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			НоваяСтрока=НаборЗаписей.Добавить();
			
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ+"ЭтоГруппа";
			НоваяСтрока.НеИспользоватьДляСинхронизации=Истина;
			НоваяСтрока.ТипОбъектаКонсолидации=НастройкаСоответствия.ТипОбъектаКонсолидации;
			НоваяСтрока.ИмяОбъектаМетаданных=НастройкаСоответствия.ИмяОбъектаМетаданных;
			НоваяСтрока.ИспользованиеКонсолидация=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента;
			НоваяСтрока.ИспользованиеВИБ=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента;
			НоваяСтрока.ИерархияКонсолидации=СтруктураИерархия.ИерархияКонсолидации;
			НоваяСтрока.ИерархияВИБ=СтруктураИерархия.ИерархияВИБ;			
			НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;	
			НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"ЭтоГруппа";
			НоваяСтрока.ТаблицаАналитикиВИБ=НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
			
		КонецЕсли;
		
		Если ПроверитьВозможностьПерехода(ТаблицаПереходов,НастройкаСоответствия,НастройкаСоответствия,"Родитель") Тогда
			
			ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
									НаборЗаписей,НастройкаСоответствия,
									НЕ НастройкаСоответствия.РазделятьПоИерархииВИБ,
									?(СтруктураИерархия.ИерархияКонсолидации=Перечисления.ВидИерархии.ИерархияГруппИЭлементов,Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента,Перечисления.ИспользованиеРеквизита.ДляЭлемента),
									?(СтруктураИерархия.ИерархияВИБ=Перечисления.ВидИерархии.ИерархияГруппИЭлементов,Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента,Перечисления.ИспользованиеРеквизита.ДляЭлемента),
									ТекИмяПоляВИБ+"Родитель.",
									ТекИмяПоляКонсолидации+"Родитель.",
									ТекПолеДопРеквизитов+"vzvРодитель");
			
		КонецЕсли;
		
	КонецЕсли;
	
	МассивСсылочные=НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("ПримитивныйТип",Ложь));
	
	Для Каждого СтрНастройка ИЗ МассивСсылочные Цикл
				
		Если СтрНастройка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			Продолжить;
			
		КонецЕсли;
				
		ТаблицаПереходов.Очистить();	
		
		Если ПроверитьВозможностьПерехода(ТаблицаПереходов,НастройкаСоответствия,СтрНастройка.НастройкаСоответствия,СтрНастройка.РеквизитОбъектаКонсолидации) Тогда
			
			ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
								НаборЗаписей,
								СтрНастройка.НастройкаСоответствия,
								СтрНастройка.НеИспользоватьДляСинхронизации,
								СтрНастройка.ИспользованиеКонсолидация,
								СтрНастройка.ИспользованиеВИБ,
								ТекИмяПоляВИБ+СтрНастройка.РеквизитОбъектаВнешнейИБ+?(СтрНастройка.НастройкаСоответствия.ТипОбъектаВИБ="Перечисление","","."),
								ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации+".",
								ТекПолеДопРеквизитов+"vzv"+СтрНастройка.РеквизитОбъектаКонсолидации)

		КонецЕсли;				
						
	КонецЦикла;	
	
	//////////////////////////////////////////////////////////////////////////////////////////////////////
	//Если в таблице присутствуют реквизиты составного типа - отбираем только по пересекающимся реквизитам.
	
	Для Индекс=0 По НаборЗаписей.Количество()-1 Цикл
		
		СтрСоответствия=НаборЗаписей[Индекс];
		
		МассивТаблицАналитики=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрСоответствия.ТаблицаАналитики,";");
		
		Если МассивТаблицАналитики.Количество()>1 Тогда
			
			СтрСоответствиеРеквизитов=Новый Соответствие;
			КоличествоТаблиц=МассивТаблицАналитики.Количество();
			
			МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрСоответствия.РеквизитОбъектаВнешнейИБ,".");
			
			ТаблицаРеквизитов=Новый ТаблицаЗначений;
			ТаблицаРеквизитов.Колонки.Добавить("РеквизитВИБ");
			ТаблицаРеквизитов.Колонки.Добавить("КоличествоПересечений",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));

			Для Каждого ТекРеквизит ИЗ НаборЗаписей Цикл
				
				МассивПутейТек=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТекРеквизит.РеквизитОбъектаВнешнейИБ,".");
				
				Если МассивПутейТек.Количество()=МассивПутей.Количество() Тогда
					
					ЕстьСовпадение=Истина;
					
					Для ИндПуть=0 ПО МассивПутей.Количество()-2 Цикл
						
						Если НЕ МассивПутейТек[ИндПуть]=МассивПутей[ИндПуть] Тогда
							
							 ЕстьСовпадение=Ложь;
							 Прервать;
							 
						 КонецЕсли;
						 
					 КонецЦикла;
					 
					 Если ЕстьСовпадение Тогда
						 
						 НоваяСтрока=ТаблицаРеквизитов.Добавить();
						 НоваяСтрока.РеквизитВИБ=ТекРеквизит.РеквизитОбъектаВнешнейИБ;
						 НоваяСтрока.КоличествоПересечений=1;
						 
					 КонецЕсли;
					 
				 КонецЕсли;
				 
			КонецЦикла;
			
			ТаблицаРеквизитов.Свернуть("РеквизитВИБ","КоличествоПересечений");
			
			Для Каждого Строка ИЗ ТаблицаРеквизитов Цикл
				
				Если НЕ Строка.КоличествоПересечений=КоличествоТаблиц Тогда
					
					СтрокаБезОтбора=НаборЗаписей.Найти(Строка.РеквизитВИБ,"РеквизитОбъектаВнешнейИБ");
					СтрокаБезОтбора.НеИспользоватьДляОтбора=Истина;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
								
КонецПроцедуры // ДобавитьСтрокиПолейДляИмпорта()

Функция ПроверитьВозможностьПерехода(ТаблицаПереходов,НачальнаяНастройка,КонечнаяНастройка,ИмяРеквизита)
	
	ТекстИсходнаяНастройка=НачальнаяНастройка.ТипОбъектаКонсолидации+"."+НачальнаяНастройка.ИмяОбъектаМетаданных;
	ТекстКонечнаяНастройка=КонечнаяНастройка.ТипОбъектаКонсолидации+"."+КонечнаяНастройка.ИмяОбъектаМетаданных;
	
	МассивПереходов=ТаблицаПереходов.НайтиСтроки(Новый Структура("НачальнаяНастройка,КонечнаяНастройка,ИмяРеквизита",ТекстИсходнаяНастройка,ТекстКонечнаяНастройка,ИмяРеквизита));
	
	Если МассивПереходов.Количество()=0 Тогда
		
		СтрокаПереход=ТаблицаПереходов.Добавить();
		СтрокаПереход.НачальнаяНастройка=ТекстИсходнаяНастройка;
		СтрокаПереход.КонечнаяНастройка=ТекстКонечнаяНастройка;
		СтрокаПереход.ИмяРеквизита=ИмяРеквизита;
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
		
КонецФункции // 

Процедура ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
						НаборЗаписей,
						НастройкаСоответствия,
						НеИспользоватьДляСинхронизации,
						ИспользованиеКонсолидация,
						ИспользованиеВИБ,
						ТекИмяПоляВИБ,
						ТекИмяПоляКонсолидации,
						ТекПолеДопРеквизитов)
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТекТаблицаАналитики= Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		ТекТаблицаАналитики=НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	Если НастройкаСоответствия.СинхронизацияПоGUID Тогда
		
		НоваяСтрока=НаборЗаписей.Добавить();
		НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ+"Ref";
		НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"Ref";
		НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
		НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;
		НоваяСтрока.НеИспользоватьДляСинхронизации=Истина;
		НоваяСтрока.ПервичноеЗаполнение=Истина;
		НоваяСтрока.ТаблицаАналитикиВИБ=НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;

		Возврат;
		
	КонецЕсли;
	
	СтруктураИерархия=ПолучитьДанныеПоИерархии(НастройкаСоответствия);
	СтруктураРеквизиты=ПолучитьСтруктуруТаблицРеквизитов(НастройкаСоответствия);
	
	МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(ТекПолеДопРеквизитов);
	ИмяРеквизита=МассивПутей[МассивПутей.Количество()-1];
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивПримитивные=НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("ПримитивныйТип",Истина));
	
	Для Каждого СтрНастройка ИЗ МассивПримитивные Цикл
		
		Если ИмяРеквизита="Родитель" 
			И (НЕ (СтруктураИерархия.ИерархияВИБ=Перечисления.ВидИерархии.ИерархияЭлементов 
				ИЛИ СтрНастройка.ИспользованиеВИБ=Перечисления.ИспользованиеРеквизита.ДляГруппы
				ИЛИ СтрНастройка.ИспользованиеВИБ=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента)) Тогда
				
				Продолжить;
				
		КонецЕсли;
		
		Если СтрНастройка.НеИспользоватьДляСинхронизации И (НЕ СтрНайти(СтрНастройка.РеквизитОбъектаВнешнейИБ,".Ссылка")>0) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрНастройка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
			
			Продолжить;
			
		КонецЕсли;
			
		НоваяСтрока=НаборЗаписей.Добавить();
		
		Если НастройкаСоответствия.ТипОбъектаВИБ="Перечисление" Тогда
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ;
		Иначе	
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ+СтрНастройка.РеквизитОбъектаВнешнейИБ;
		КонецЕсли;
		
		НоваяСтрока.НеИспользоватьДляСинхронизации=НеИспользоватьДляСинхронизации ИЛИ СтрНастройка.НеИспользоватьДляСинхронизации;
		НоваяСтрока.ТипОбъектаКонсолидации=НастройкаСоответствия.ТипОбъектаКонсолидации;
		НоваяСтрока.ИмяОбъектаМетаданных=НастройкаСоответствия.ИмяОбъектаМетаданных;
		НоваяСтрока.ИспользованиеКонсолидация=ИспользованиеКонсолидация;
		НоваяСтрока.ИспользованиеВИБ=ИспользованиеВИБ;
		НоваяСтрока.ИерархияКонсолидации=СтруктураИерархия.ИерархияКонсолидации;
		НоваяСтрока.ИерархияВИБ=СтруктураИерархия.ИерархияВИБ;	
			
		Если СтрНайти(СтрНастройка.РеквизитОбъектаВнешнейИБ,".Ссылка")>0 Тогда
			НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов+"vzv"+СтрНастройка.РеквизитОбъектаКонсолидации;
			НоваяСтрока.НеИспользоватьДляОтбора=Истина;
		Иначе
			НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрНастройка.ТаблицаАналитики) Тогда
			НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		Иначе
			НоваяСтрока.ТаблицаАналитики=СтрНастройка.ТаблицаАналитики;
		КонецЕсли;
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление.")>0 Тогда
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"EnumRefValue";
			
		ИначеЕсли ЗначениеЗаполнено(СтрНастройка.ТаблицаАналитикиВИБ) Тогда
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации+"vzPrim";
			
		Иначе	
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации;
			
		КонецЕсли;
		
		НоваяСтрока.ТаблицаАналитикиВИБ=НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
		
		НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
		
		УстановитьВозможностьГруппировки(НоваяСтрока,СтруктураРеквизиты,СтрНастройка.РеквизитОбъектаВнешнейИБ,СтрНастройка.РеквизитОбъектаКонсолидации);
		
		НоваяСтрока.ПервичноеЗаполнение=(ТекПолеДопРеквизитов="vzvВладелец");
		
	КонецЦикла;
	
	Если НастройкаСоответствия.ПоддерживатьИерархиюВИБ И НастройкаСоответствия.ТипОбъектаВИБ="Справочник" Тогда
		
		Если СтруктураИерархия.ИерархияВИБ=Перечисления.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			НоваяСтрока=НаборЗаписей.Добавить();
			
			НоваяСтрока.РеквизитОбъектаВнешнейИБ=ТекИмяПоляВИБ+"ЭтоГруппа";
			НоваяСтрока.НеИспользоватьДляСинхронизации=Ложь;
			НоваяСтрока.ТипОбъектаКонсолидации=НастройкаСоответствия.ТипОбъектаКонсолидации;
			НоваяСтрока.ИмяОбъектаМетаданных=НастройкаСоответствия.ИмяОбъектаМетаданных;
			НоваяСтрока.ИспользованиеКонсолидация=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента;
			НоваяСтрока.ИспользованиеВИБ=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента;
			НоваяСтрока.ИерархияКонсолидации=СтруктураИерархия.ИерархияКонсолидации;
			НоваяСтрока.ИерархияВИБ=СтруктураИерархия.ИерархияВИБ;			
			НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;	
			НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"ЭтоГруппа";
			НоваяСтрока.ТаблицаАналитикиВИБ=НастройкаСоответствия.ТипОбъектаВИБ+"."+НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
			
			НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
			
		КонецЕсли;
			
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////
	// Отдельно сформируем поля импорта для владельцев и реквизитов типа "Перечисление".
	
	Для Каждого СтрНастройка ИЗ НастройкаСоответствия.СоответствиеРеквизитов Цикл
		
		Если СтрНастройка.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение Тогда
				
				Продолжить;
				
			КонецЕсли;
					
		Если ЗначениеЗаполнено(СтрНастройка.НастройкаСоответствия) И СтрНастройка.НастройкаСоответствия.ТипОбъектаКонсолидации="Перечисление"
			И ПроверитьВозможностьПерехода(ТаблицаПереходов,НастройкаСоответствия,СтрНастройка.НастройкаСоответствия,СтрНастройка.РеквизитОбъектаКонсолидации) Тогда 
								
			ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
												НаборЗаписей,
												СтрНастройка.НастройкаСоответствия,
												СтрНастройка.НеИспользоватьДляСинхронизации,
												ИспользованиеКонсолидация,
												ИспользованиеВИБ,
												ТекИмяПоляВИБ+СтрНастройка.РеквизитОбъектаВнешнейИБ+?(СтрНастройка.НастройкаСоответствия.ТипОбъектаВИБ="Перечисление","","."),
												ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации+".",
												ТекПолеДопРеквизитов+"vzv"+СтрНастройка.РеквизитОбъектаКонсолидации)

		КонецЕсли;											
						
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьСтрокиСсылочныхРеквизитов

Процедура ЗаполнитьТаблицуПолейДляИмпорта(НастройкаСоответствия) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеПолейДляОбменаВИБ.Ссылка
	|ИЗ
	|	Справочник.СоответствиеПолейДляОбменаВИБ КАК СоответствиеПолейДляОбменаВИБ
	|ГДЕ
	|	СоответствиеПолейДляОбменаВИБ.Владелец = &НастройкаСоответствия";
	
	Запрос.УстановитьПараметр("НастройкаСоответствия",НастройкаСоответствия);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТаблицаПолейДляИмпорта.Очистить();
	Иначе
		СправочникОбъект=Справочники.СоответствиеПолейДляОбменаВИБ.СоздатьЭлемент();
		СправочникОбъект.Владелец=НастройкаСоответствия;
	КонецЕсли;
		
	Если Не (НастройкаСоответствия.ПометкаУдаления) Тогда
		ДобавитьСтрокиПолейДляИмпорта(СправочникОбъект.ТаблицаПолейДляИмпорта,НастройкаСоответствия,"","","");
	КонецЕсли;
		
	СправочникОбъект.Записать();
		
КонецПроцедуры // ЗаполнитьТаблицуПолейДляИмпорта()

Процедура СформироватьРезультирующиеСтрокиПолейДляИмпорта(НастройкаСоответствия,МассивОбработанных=Неопределено) Экспорт
	
	Если МассивОбработанных=Неопределено Тогда
		МассивОбработанных=Новый Массив;
	КонецЕсли;
	
	ЗаполнитьТаблицуПолейДляИмпорта(НастройкаСоответствия);
	МассивОбработанных.Добавить(НастройкаСоответствия);
	
	Если Не НастройкаСоответствия.ПометкаУдаления Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка
		|ИЗ
		|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
		|ГДЕ
		|	СоответствиеВнешнимИБСоответствиеРеквизитов.НастройкаСоответствия = &НастройкаСоответствия
		|	И (НЕ СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка В (&МассивОбработанных))";
		
		Запрос.УстановитьПараметр("НастройкаСоответствия",НастройкаСоответствия);
		Запрос.УстановитьПараметр("МассивОбработанных",МассивОбработанных);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			СформироватьРезультирующиеСтрокиПолейДляИмпорта(Результат.Ссылка,МассивОбработанных);
			
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры // СформироватьРезультирующиеСтрокиПолейДляИмпорта()

Процедура ADO_СформироватьРезультирующиеСтрокиПолейДляИмпорта(НастройкаСоответствия,МассивОбработанных=Неопределено) Экспорт
	
	Если МассивОбработанных=Неопределено Тогда
		МассивОбработанных=Новый Массив;
	КонецЕсли;
	
	ADO_ЗаполнитьТаблицуПолейДляИмпорта(НастройкаСоответствия);
	МассивОбработанных.Добавить(НастройкаСоответствия);
	
	Если Не НастройкаСоответствия.ПометкаУдаления Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка
		|ИЗ
		|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
		|ГДЕ
		|	СоответствиеВнешнимИБСоответствиеРеквизитов.НастройкаСоответствия = &НастройкаСоответствия
		|	И (НЕ СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка В (&МассивОбработанных))";
		
		Запрос.УстановитьПараметр("НастройкаСоответствия",НастройкаСоответствия);
		Запрос.УстановитьПараметр("МассивОбработанных",МассивОбработанных);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			ADO_СформироватьРезультирующиеСтрокиПолейДляИмпорта(Результат.Ссылка,МассивОбработанных);
			
		КонецЦикла;
		
	КонецЕсли;
				
КонецПроцедуры // ADO_СформироватьРезультирующиеСтрокиПолейДляИмпорта()

Процедура ADO_ЗаполнитьТаблицуПолейДляИмпорта(НастройкаСоответствия)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеПолейДляОбменаВИБ.Ссылка
	|ИЗ
	|	Справочник.СоответствиеПолейДляОбменаВИБ КАК СоответствиеПолейДляОбменаВИБ
	|ГДЕ
	|	СоответствиеПолейДляОбменаВИБ.Владелец = &НастройкаСоответствия";
	
	Запрос.УстановитьПараметр("НастройкаСоответствия",НастройкаСоответствия);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТаблицаПолейДляИмпорта.Очистить();
	Иначе
		СправочникОбъект=Справочники.СоответствиеПолейДляОбменаВИБ.СоздатьЭлемент();
		СправочникОбъект.Владелец=НастройкаСоответствия;
	КонецЕсли;
		
	Если Не НастройкаСоответствия.ПометкаУдаления Тогда
		ADO_ДобавитьСтрокиПолейДляИмпорта(СправочникОбъект.ТаблицаПолейДляИмпорта,НастройкаСоответствия,"","","","");
	КонецЕсли;
		
	СправочникОбъект.Записать();
		
КонецПроцедуры // ADO_ЗаполнитьТаблицуПолейДляИмпорта()

Процедура ADO_ДобавитьСтрокиПолейДляИмпорта(НаборЗаписей,НастройкаСоответствия,ТекИмяПоляВИБ,ТекИмяПоляКонсолидации,ТекПолеДопРеквизитов,ТекТаблицаАналитикиВИБ)
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТекТаблицаАналитики= Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		ТекТаблицаАналитики=НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивПримитивные=НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("ПримитивныйТип",Истина));
	
	Для Каждого СтрНастройка ИЗ МассивПримитивные Цикл
		
		НоваяСтрока=НаборЗаписей.Добавить();
			
		НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрНастройка.РеквизитОбъектаВнешнейИБ;
				
		НоваяСтрока.НеИспользоватьДляСинхронизации=СтрНастройка.НеИспользоватьДляСинхронизации;
		НоваяСтрока.ТипОбъектаКонсолидации=НастройкаСоответствия.ТипОбъектаКонсолидации;
		НоваяСтрока.ИмяОбъектаМетаданных=НастройкаСоответствия.ИмяОбъектаМетаданных;
		НоваяСтрока.ИспользованиеКонсолидация=Перечисления.ИспользованиеРеквизита.ДляЭлемента;
		НоваяСтрока.ИспользованиеВИБ=Перечисления.ИспользованиеРеквизита.ДляЭлемента;
		НоваяСтрока.ИерархияКонсолидации=Перечисления.ВидИерархии.НетИерархии;
		НоваяСтрока.ИерархияВИБ=Перечисления.ВидИерархии.НетИерархии;
		
		НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;
				
		Если НЕ ЗначениеЗаполнено(СтрНастройка.ТаблицаАналитики) Тогда
			НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		Иначе
			НоваяСтрока.ТаблицаАналитики=СтрНастройка.ТаблицаАналитики;
		КонецЕсли;
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление.")>0 Тогда
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"EnumRefValue";
			
		Иначе	
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации;
			
		КонецЕсли;
		
		НоваяСтрока.ТаблицаАналитикиВИБ="({["+НастройкаСоответствия.ОписаниеОбъектаВИБ.Имя+"]})";
		
	КонецЦикла;
	
	ТаблицаПереходов=Новый ТаблицаЗначений;
	ТаблицаПереходов.Колонки.Добавить("НачальнаяНастройка");
	ТаблицаПереходов.Колонки.Добавить("КонечнаяНастройка");	
	ТаблицаПереходов.Колонки.Добавить("ИмяРеквизита");
		
	МассивСсылочные=НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("ПримитивныйТип",Ложь));
	
	Для Каждого СтрНастройка ИЗ МассивСсылочные Цикл
				
		ТаблицаПереходов.Очистить();	
		
		Если ПроверитьВозможностьПерехода(ТаблицаПереходов,НастройкаСоответствия,СтрНастройка.НастройкаСоответствия,СтрНастройка.РеквизитОбъектаКонсолидации) Тогда
			
			ADO_ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
								НаборЗаписей,
								СтрНастройка.НастройкаСоответствия,
								СтрНастройка.НеИспользоватьДляСинхронизации,
								СтрНастройка.ИспользованиеКонсолидация,
								СтрНастройка.ИспользованиеВИБ,
								ТекИмяПоляВИБ+СтрНастройка.РеквизитОбъектаВнешнейИБ+?(СтрНастройка.НастройкаСоответствия.ТипОбъектаВИБ="Перечисление","","."),
								ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации+".",
								ТекПолеДопРеквизитов+"vzv"+СтрНастройка.РеквизитОбъектаКонсолидации,
								СтрНастройка.ТаблицаАналитикиВИБ)

		КонецЕсли;				
						
	КонецЦикла;	
									
КонецПроцедуры // ADO_ДобавитьСтрокиПолейДляИмпорта()

Процедура ADO_ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
						НаборЗаписей,
						НастройкаСоответствия,
						НеИспользоватьДляСинхронизации,
						ИспользованиеКонсолидация,
						ИспользованиеВИБ,
						ТекИмяПоляВИБ,
						ТекИмяПоляКонсолидации,
						ТекПолеДопРеквизитов,
						ТекТаблицаАналитикиВИБ)
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" Тогда
		
		ТекТаблицаАналитики= Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		ТекТаблицаАналитики=НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(ТекПолеДопРеквизитов);
	ИмяРеквизита=МассивПутей[МассивПутей.Количество()-1];
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	МассивПримитивные=НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("ПримитивныйТип",Истина));
	
	Для Каждого СтрНастройка ИЗ МассивПримитивные Цикл
		
		Если ИмяРеквизита="Родитель" Тогда
				
			Продолжить;
				
		КонецЕсли;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		
		НоваяСтрока.РеквизитОбъектаВнешнейИБ=СтрНастройка.РеквизитОбъектаВнешнейИБ;
		
		НоваяСтрока.НеИспользоватьДляСинхронизации=НеИспользоватьДляСинхронизации ИЛИ СтрНастройка.НеИспользоватьДляСинхронизации;
		НоваяСтрока.ТипОбъектаКонсолидации=НастройкаСоответствия.ТипОбъектаКонсолидации;
		НоваяСтрока.ИмяОбъектаМетаданных=НастройкаСоответствия.ИмяОбъектаМетаданных;
		НоваяСтрока.ИспользованиеКонсолидация=Перечисления.ИспользованиеРеквизита.ДляЭлемента;
		НоваяСтрока.ИспользованиеВИБ=Перечисления.ИспользованиеРеквизита.ДляЭлемента;
		НоваяСтрока.ИерархияКонсолидации=Перечисления.ВидИерархии.НетИерархии;
		НоваяСтрока.ИерархияВИБ=Перечисления.ВидИерархии.НетИерархии;	
			
		НоваяСтрока.ПолеДопРеквизитов=ТекПолеДопРеквизитов;
		
		Если НЕ ЗначениеЗаполнено(СтрНастройка.ТаблицаАналитики) Тогда
			НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		Иначе
			НоваяСтрока.ТаблицаАналитики=СтрНастройка.ТаблицаАналитики;
		КонецЕсли;
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление.")>0 Тогда
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+"EnumRefValue";
			
		Иначе	
			
			НоваяСтрока.РеквизитОбъектаКонсолидации=ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации;
			
		КонецЕсли;
		
		НоваяСтрока.ТаблицаАналитикиВИБ=ТекТаблицаАналитикиВИБ;
		
		НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия;
		
	КонецЦикла;
		
	////////////////////////////////////////////////////////////////////////////////////////////
	// Отдельно сформируем поля импорта для владельцев и реквизитов типа "Перечисление".
	
	Для Каждого СтрНастройка ИЗ НастройкаСоответствия.СоответствиеРеквизитов Цикл
		
		Если ЗначениеЗаполнено(СтрНастройка.НастройкаСоответствия) И (СтрНастройка.РеквизитОбъектаВнешнейИБ="Владелец")
			И ПроверитьВозможностьПерехода(ТаблицаПереходов,НастройкаСоответствия,СтрНастройка.НастройкаСоответствия,СтрНастройка.РеквизитОбъектаКонсолидации) Тогда 
			
			Если ИмяРеквизита="Родитель" Тогда
				
				Продолжить;
				
			КонецЕсли;
					
			ADO_ДобавитьСтрокиСсылочныхРеквизитов(ТаблицаПереходов,
												НаборЗаписей,
												СтрНастройка.НастройкаСоответствия,
												СтрНастройка.НеИспользоватьДляСинхронизации,
												ИспользованиеКонсолидация,
												ИспользованиеВИБ,
												ТекИмяПоляВИБ+СтрНастройка.РеквизитОбъектаВнешнейИБ+?(СтрНастройка.НастройкаСоответствия.ТипОбъектаВИБ="Перечисление","","."),
												ТекИмяПоляКонсолидации+СтрНастройка.РеквизитОбъектаКонсолидации+".",
												ТекПолеДопРеквизитов+"vzv"+СтрНастройка.РеквизитОбъектаКонсолидации,
												ТекТаблицаАналитикиВИБ)

		КонецЕсли;											
						
	КонецЦикла;	
	
КонецПроцедуры // ДобавитьСтрокиСсылочныхРеквизитов

Функция ПолучитьДанныеПоИерархии(НастройкаСоответствия) Экспорт
	
	СтруктураИерархия=Новый Структура;
	
	Если НастройкаСоответствия.ТипОбъектаВИБ="Справочник" И ЗначениеЗаполнено(НастройкаСоответствия.ОписаниеОбъектаВИБ) И НастройкаСоответствия.ОписаниеОбъектаВИБ.ИерархическийСправочник Тогда
		
		СтруктураИерархия.Вставить("ИерархияВИБ",НастройкаСоответствия.ОписаниеОбъектаВИБ.ВидИерархии);
		
	ИначеЕсли НастройкаСоответствия.ТипОбъектаВИБ="ПланВидовХарактеристик" И ЗначениеЗаполнено(НастройкаСоответствия.ОписаниеОбъектаВИБ) И НастройкаСоответствия.ОписаниеОбъектаВИБ.ИерархическийСправочник Тогда
		
		СтруктураИерархия.Вставить("ИерархияВИБ",Перечисления.ВидИерархии.ИерархияГруппИЭлементов);
		
	Иначе
		СтруктураИерархия.Вставить("ИерархияВИБ",Перечисления.ВидИерархии.НетИерархии);
		
	КонецЕсли;
	
	Если НастройкаСоответствия.ТипОбъектаКонсолидации="ВидСубконто" И ЗначениеЗаполнено(НастройкаСоответствия.ИмяОбъектаМетаданных) Тогда
		
		ТаблицаАналитики= Метаданные.НайтиПоТипу(НастройкаСоответствия.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	Иначе
		
		ТаблицаАналитики=НастройкаСоответствия.ТипОбъектаКонсолидации+"."+НастройкаСоответствия.ИмяОбъектаМетаданных;
		
	КонецЕсли;
	
	Если СтрНайти(ТаблицаАналитики,"Справочник.")>0 И ЗначениеЗаполнено(НастройкаСоответствия.ИмяОбъектаМетаданных) Тогда
		
		ИмяСправочника=СтрЗаменить(ТаблицаАналитики,"Справочник.","");
		ОбъектМетаданных= МетаДанные.Справочники.Найти(ИмяСправочника);
		
		Если ОбъектМетаданных=Неопределено Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Тип баз данных: %1, настройка соответствия %2: '"),НастройкаСоответствия.Владелец,НастройкаСоответствия);
			ТекстОшибки=ТекстОшибки+Символы.ПС+СтрШаблон(Нстр("ru = 'Справочник %1 переименован или удален из конфигурации текущей информационной базы.'"),ИмяСправочника);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.ОченьВажное);						
			
			СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.НетИерархии);
			
		ИначеЕсли ОбъектМетаданных.Иерархический Тогда
			
			Если ОбъектМетаданных.ВидИерархии=Metadata.ObjectProperties.HierarchyType.HierarchyOfItems Тогда
				
				СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.ИерархияЭлементов);
				
			Иначе
				
				СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.ИерархияГруппИЭлементов);
				
			КонецЕсли;
			
		Иначе
			
			СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.НетИерархии);
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(ТаблицаАналитики,"ПланВидовХарактеристик.")>0 И ЗначениеЗаполнено(НастройкаСоответствия.ИмяОбъектаМетаданных) Тогда
		
		ИмяПВХ=СтрЗаменить(ТаблицаАналитики,"ПланВидовХарактеристик.","");
		ОбъектМетаданных= МетаДанные.ПланыВидовХарактеристик.Найти(ИмяПВХ);
		
		Если ОбъектМетаданных=Неопределено Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = 'Тип баз данных: %1, настройка соответствия %2: '"),НастройкаСоответствия.Владелец,НастройкаСоответствия);
			ТекстОшибки=ТекстОшибки+Символы.ПС+СтрШаблон(Нстр("ru = 'План видов характеристик %1 переименован или удален из конфигурации текущей информационной базы.'"),ИмяПВХ);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.ОченьВажное);
			
			СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.НетИерархии);
			
		ИначеЕсли ОбъектМетаданных.Иерархический Тогда
								
			СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.ИерархияГруппИЭлементов);
							
		Иначе
			
			СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.НетИерархии);
			
		КонецЕсли;
		
	Иначе

	СтруктураИерархия.Вставить("ИерархияКонсолидации",Перечисления.ВидИерархии.НетИерархии);
	
	КонецЕсли;
	
	Возврат СтруктураИерархия;	
	
КонецФункции // ПолучитьДанныеПоИерархии()

Функция ПолучитьТаблицуПолейДляОтбора(НастройкаСоответствия) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.Ссылка.Владелец КАК Ссылка,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.РеквизитОбъектаКонсолидации КАК РеквизитОбъектаКонсолидации,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.РеквизитОбъектаВнешнейИБ КАК РеквизитОбъектаВнешнейИБ,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ТаблицаАналитики КАК ТаблицаАналитики,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ТипОбъектаКонсолидации КАК ТипОбъектаКонсолидации,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ПолеДопРеквизитов КАК ПолеДопРеквизитов,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ИспользованиеКонсолидация КАК ИспользованиеКонсолидация,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ИспользованиеВИБ КАК ИспользованиеВИБ,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ИерархияКонсолидации КАК ИерархияКонсолидации,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ИерархияВИБ КАК ИерархияВИБ,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.НеИспользоватьДляОтбора КАК НеИспользоватьДляОтбора,
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.ПервичноеЗаполнение КАК ПервичноеЗаполнение
	|ИЗ
	|	Справочник.СоответствиеПолейДляОбменаВИБ.ТаблицаПолейДляИмпорта КАК СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта
	|ГДЕ
	|	СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.Ссылка.Владелец = &НастройкаСоответствия";
	
	Если НЕ НастройкаСоответствия.СинхронизацияПоGUID Тогда
		
		Запрос.Текст=Запрос.Текст+"
		
		|	И (НЕ (СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.НеИспользоватьДляСинхронизации
		|	ИЛИ СоответствиеПолейДляОбменаВИБТаблицаПолейДляИмпорта.НеИспользоватьДляОтбора))";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НастройкаСоответствия",НастройкаСоответствия);
	
	Возврат Запрос.Выполнить().Выгрузить();
		
КонецФункции // ПолучитьТаблицуПолейДляОтбора()

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ ДАННЫХ ИЗ ВНЕШНИХ СИСТЕМ

Функция ПолучитьТаблицуДанныхПроизвольногоЗапросаВИБ(КонтекстОтчета,СтрЗапрос) Экспорт
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);
	СтруктураЗапроса.ПроизвольныйЗапрос=Ложь;
	ТаблицаДанных= ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	ТекПравило=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение;		
	ТабОперандов=ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ТекПравило);
		
	Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
		
		Возврат Неопределено;
		
	Иначе
		
		ОпределитьКолонкуДанных(ТабОперандов,ТекПравило);
		Возврат ТабОперандов;
		
	КонецЕсли;
	
КонецФункции // ПолучитьТаблицуДанныхПроизвольногоЗапросаВИБ()

Функция ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ(КонтекстОтчета,СтрЗапрос) Экспорт
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);	
	ТаблицаДанных= ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	Если СтруктураЗапроса.ТабСчетаОперандов.Количество()=1 Тогда // Отбор по единичному источнику
		
		ТекПравило=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение;
		СтрЗначение=ТекПравило.Найти("Значение","КодАналитики");
		
		Если (Не СтрЗначение=Неопределено) И ТаблицаДанных.Колонки.Найти("Значение")=Неопределено Тогда
			ТаблицаДанных.Колонки[СтрЗаменить(СтрЗначение.Поле,".","")].Имя="Значение";
		КонецЕсли;
		
		ТабОперандов=ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ТекПравило);
		
		Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
			
			Возврат Неопределено;
			
		Иначе
			
			ОпределитьКолонкуДанных(ТабОперандов,ТекПравило);
			Возврат ТабОперандов;
			
		КонецЕсли;
		
	Иначе // Возвращаем структуру для дальнейшего разбора
		
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ТаблицаДанных",ТаблицаДанных);
		ДанныеЗапроса.Вставить("ТабСчетаОперандов",СтруктураЗапроса.ТабСчетаОперандов);
		ДанныеЗапроса.Вставить("СоответствиеРесурсов",СтруктураЗапроса.СоответствиеРесурсов);
		
		Возврат ДанныеЗапроса;
		
	КонецЕсли;
			
КонецФункции // ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ()

Процедура ПолучитьДанныеРегистраБухгалтерииВИБ(ОбъектРасчета,СтрЗапрос) Экспорт
	
	ДанныеЗапроса=ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ(ОбъектРасчета,СтрЗапрос);
	
	Если ДанныеЗапроса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,СтрЗапрос.ТаблицаОперандов,СтрЗапрос.ТабПравилаИспользованияПолей);
	
КонецПроцедуры // ПолучитьДанныеРегистраБухгалтерииВИБ()

Функция ПолучитьТаблицуДанныхРегистраНакопленияВИБ(КонтекстОтчета,СтрЗапрос) Экспорт
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);
	
	ТаблицаДанных= ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	Если (НЕ СтруктураЗапроса.Свойство("ТабСчетаСписок")) ИЛИ СтруктураЗапроса.ТабСчетаСписок.Количество()=1 Тогда // Отбор по единичному источнику
		
		ТекПравило=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение;
		СтрЗначение=ТекПравило.Найти("Значение","Синоним");
		
		Если (Не СтрЗначение=Неопределено) И ТаблицаДанных.Колонки.Найти("Значение")=Неопределено Тогда
			ТаблицаДанных.Колонки[СтрЗаменить(СтрЗначение.Поле,".","")].Имя="Значение";
		КонецЕсли;
		
		ТабОперандов=ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ТекПравило);
		
		Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
			
			Возврат Неопределено;
			
		Иначе
			
			ОпределитьКолонкуДанных(ТабОперандов,ТекПравило);
			Возврат ТабОперандов;
			
		КонецЕсли;
		
	Иначе // Возвращаем структуру для дальнейшего разбора в модуле настраиваемого отчета
		
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ТаблицаДанных",ТаблицаДанных);
		ДанныеЗапроса.Вставить("ТабСчетаОперандов",СтруктураЗапроса.ТабСчетаСписок);
		ДанныеЗапроса.Вставить("СоответствиеРесурсов",Неопределено);
		
		Возврат ДанныеЗапроса;
		
	КонецЕсли;
		
КонецФункции // ПолучитьТаблицуДанныхРегистраНакопленияВИБ()

Процедура ПолучитьДанныеРегистраНакопленияВИБ(ОбъектРасчета,СтрЗапрос) Экспорт
	
	ДанныеЗапроса=ПолучитьТаблицуДанныхРегистраНакопленияВИБ(ОбъектРасчета,СтрЗапрос);
	
	Если ДанныеЗапроса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,СтрЗапрос.ТаблицаОперандов);
	
КонецПроцедуры

Функция ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ_77(КонтекстОтчета,СтрЗапрос) Экспорт
	
	Перем ТаблицаДанных;
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета, СтрЗапрос);
		
	СписокСчетовИтог=Новый СписокЗначений;
	СписокКоррСчетовИтог=Новый СписокЗначений;
	
	СписокРесурсов=Новый СписокЗначений;
	
	ТабСчетаОперандов=Новый ТаблицаЗначений;
	ТабСчетаОперандов.Колонки.Добавить("КодОперанда",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТабСчетаОперандов.Колонки.Добавить("СчетДанные",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТабСчетаОперандов.Колонки.Добавить("КоррСчетДанные",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	
	СоответствиеРесурсов=Новый Соответствие;
		
	Для Каждого Операнд Из СтрЗапрос.ТаблицаОперандов Цикл
				
		Если СписокСчетовИтог.НайтиПоЗначению(Операнд.Счет.Код)=Неопределено Тогда 
			СписокСчетовИтог.Добавить(Операнд.Счет.Код);
		КонецЕсли;
		
		Если (Не ПустаяСтрока(Операнд.КоррСчет)) И СписокКоррСчетовИтог.НайтиПоЗначению(Операнд.КоррСчет.Код)=Неопределено Тогда
			СписокКоррСчетовИтог.Добавить(Операнд.КоррСчет.Код);
		КонецЕсли;
		
		ТекстЗапроса=Операнд.Ссылка.ТекстЗапросаМодуля;
		
		Если СписокРесурсов.НайтиПоЗначению(ТекстЗапроса)=Неопределено Тогда
			СписокРесурсов.Добавить(ТекстЗапроса);
		КонецЕсли;
		
		СоответствиеРесурсов.Вставить(СокрЛП(Операнд.Код),ТекстЗапроса);
		
		НоваяСтрока=ТабСчетаОперандов.Добавить();
		НоваяСтрока.КодОперанда=СокрЛП(Операнд.Код);
		НоваяСтрока.СчетДанные=Операнд.Счет;
		НоваяСтрока.КоррСчетДанные=Операнд.КоррСчет;
					
	КонецЦикла;
		
	СтруктураЗапроса.Вставить("СписокРесурсов",СписокРесурсов);
	СтруктураЗапроса.Вставить("ВИБ",Новый Структура("ВИБ,ТипПодключения",КонтекстОтчета.ИспользуемаяИБ,0));
	
	СтруктураЗапроса.Вставить("СписокСчетов",СписокСчетовИтог);
	СтруктураЗапроса.Вставить("СписокКоррСчетов",СписокКоррСчетовИтог);
    СтруктураЗапроса.Вставить("ПравилаИспользованияПолей",ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение);
		
	ТаблицаДанных=ПолучитьТаблицуДанныхПоЗапросу77(СтруктураЗапроса);
	
	Если ТабСчетаОперандов.Количество()=1 Тогда // Отбор по единичному источнику
		
		СтрЗначение=СтруктураЗапроса.ПравилаИспользованияПолей.Найти("Значение","Синоним");
		Если (Не СтрЗначение=Неопределено) И ТаблицаДанных.Колонки.Найти("Значение")=Неопределено Тогда
			ТаблицаДанных.Колонки[СтрЗаменить(СтрЗначение.Поле,".","")].Имя="Значение";
		КонецЕсли;
		
		ТабОперандов=ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,СтруктураЗапроса.ПравилаИспользованияПолей);
				
		Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
			
			Возврат Неопределено;
			
		Иначе
			
			ОпределитьКолонкуДанных(ТабОперандов,СтруктураЗапроса.ПравилаИспользованияПолей);
			Возврат ТабОперандов;
			
		КонецЕсли;
		
	Иначе // Возвращаем структуру для дальнейшего разбора в модуле настраиваемого отчета
		
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ТаблицаДанных",ТаблицаДанных);
		ДанныеЗапроса.Вставить("ТабСчетаОперандов",ТабСчетаОперандов);
		ДанныеЗапроса.Вставить("СоответствиеРесурсов",СоответствиеРесурсов);
		
		Возврат ДанныеЗапроса;
		
	КонецЕсли;
	
КонецФункции // ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ_77()

Процедура ПолучитьДанныеРегистраБухгалтерииВИБ77(ОбъектРасчета,СтрЗапрос) Экспорт
	
	ДанныеЗапроса=ПолучитьТаблицуДанныхРегистраБухгалтерииВИБ_77(ОбъектРасчета,СтрЗапрос);
	
	Если ДанныеЗапроса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,СтрЗапрос.ТаблицаОперандов,СтрЗапрос.ТабПравилаИспользованияПолей);
	
КонецПроцедуры

Функция ПолучитьТаблицуДанныхРегистраНакопленияВИБ_77(КонтекстОтчета,СтрЗапрос) Экспорт
	
	Перем ТаблицаДанных;
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);
	СтруктураЗапроса.Вставить("КодОперанда");
	СтруктураЗапроса.Вставить("ТаблицаИспользованияПолейЗапроса");
	СтруктураЗапроса.Вставить("ВИБ",Новый Структура("ВИБ,ТипПодключения",КонтекстОтчета.ИспользуемаяИБ,0));
	
	ТабСчетаСписок=Новый ТаблицаЗначений;
	ТабСчетаСписок.Колонки.Добавить("Операнд");

	Для Каждого Операнд Из СтрЗапрос.ТаблицаОперандов Цикл
		
		НоваяСтрока=ТабСчетаСписок.Добавить();
		НоваяСтрока.Операнд=СокрЛП(Операнд.Код);
				
		СтруктураЗапроса.КодОперанда                      = СокрЛП(Операнд.Код);
		
		СтруктураЗапроса.ТаблицаИспользованияПолейЗапроса = СтруктураЗапроса.СтруктураПолей[СтруктураЗапроса.КодОперанда];
		
		ВремТаблица = ПолучитьТаблицуДанныхДляРегистра77(СтруктураЗапроса);
		
		Если ТаблицаДанных = Неопределено Тогда
			ТаблицаДанных = ВремТаблица.СкопироватьКолонки();
		Иначе
			Для Каждого Колонка Из ВремТаблица.Колонки Цикл
				Если ТаблицаДанных.Колонки.Найти(Колонка.Имя) = Неопределено Тогда
					ТаблицаДанных.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ВремТаблица, ТаблицаДанных);
		
	КонецЦикла;
	
	Если ТабСчетаСписок.Количество()=1 Тогда // Отбор по единичному источнику
		
		ТекПравило=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение;
		СтрЗначение=ТекПравило.Найти("Значение","Синоним");
		
		Если (Не СтрЗначение=Неопределено) И ТаблицаДанных.Колонки.Найти("Значение")=Неопределено Тогда
			ТаблицаДанных.Колонки[СтрЗаменить(СтрЗначение.Поле,".","")].Имя="Значение";
		КонецЕсли;
		
		ТабОперандов=ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ТекПравило);
		
		Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
			
			Возврат Неопределено;
			
		Иначе
			
			ОпределитьКолонкуДанных(ТабОперандов,ТекПравило);
			Возврат ТабОперандов;
			
		КонецЕсли;
		
	Иначе // Возвращаем структуру для дальнейшего разбора в модуле настраиваемого отчета
		
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ТаблицаДанных",ТаблицаДанных);
		ДанныеЗапроса.Вставить("ТабСчетаОперандов",ТабСчетаСписок);
		ДанныеЗапроса.Вставить("СоответствиеРесурсов",Неопределено);
		
		Возврат ДанныеЗапроса;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьТаблицуДанныхРегистраНакопленияВИБ_77()

Процедура ПолучитьДанныеРегистраНакопленияВИБ77(ОбъектРасчета,СтрЗапрос) Экспорт
	
	ДанныеЗапроса=ПолучитьТаблицуДанныхРегистраНакопленияВИБ_77(ОбъектРасчета,СтрЗапрос);
	
	Если ДанныеЗапроса=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,СтрЗапрос.ТаблицаОперандов);
	
КонецПроцедуры

Функция ПолучитьТаблицуДанныхADO(КонтекстОтчета,СтрЗапрос) Экспорт
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);
	СтруктураЗапроса.ПроизвольныйЗапрос=Ложь;
	СтруктураЗапроса.Вставить("ТаблицаОперандов",СтрЗапрос.ТаблицаОперандов);
	СтруктураЗапроса.Вставить("ПутькФайлуADO",КонтекстОтчета.ПутьКФайлуADO);
	
	Если СтруктураЗапроса.База=Неопределено Тогда
		
		Возврат Новый ТаблицаЗначений;
		
	КонецЕсли;

	ДополнительныеСвойстваИмпорта = Неопределено;
	КонтекстОтчета.ДополнительныеСвойства.Свойство("ДополнительныеСвойстваИмпорта",ДополнительныеСвойстваИмпорта);	
	ТаблицаДанных = ADO_ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса,ДополнительныеСвойстваИмпорта);
	КонтекстОтчета.ДополнительныеСвойства.Вставить("ДополнительныеСвойстваИмпорта", ДополнительныеСвойстваИмпорта);
		
	ПравилаИспользованияПолей=СтрЗапрос.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей;
	
	ЕстьРазворотПоАналитикам=НЕ (ПравилаИспользованияПолей.Количество()=1 И СтрНайти(ПравилаИспользованияПолей[0].КодАналитики,"Аналитика")=0);
	
	Если ЕстьРазворотПоАналитикам Тогда
		
		ТабОперандов=ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ПравилаИспользованияПолей);
		
		Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	Иначе
		
		ТабОперандов=ТаблицаДанных;
		
	КонецЕсли;
	
	Если СтруктураЗапроса.ТаблицаОперандов.Количество()=1 Тогда // Выборка по единичному источнику
		
		КолонкаЗначение=ТабОперандов.Колонки.Найти(СтруктураЗапроса.ТаблицаОперандов[0].Код);
		
		Если НЕ КолонкаЗначение=Неопределено Тогда
			
			КолонкаЗначение.Имя="Значение";	
			
		КонецЕсли;
		
		Возврат ТабОперандов;
					
	Иначе // Возвращаем структуру для дальнейшего разбора в модуле настраиваемого отчета
		
		ДанныеЗапроса=Новый Структура;
		ДанныеЗапроса.Вставить("ТабОперандов",ТабОперандов);
		ДанныеЗапроса.Вставить("ТаблицаADO",СтруктураЗапроса.ТаблицаADO);
		
		Возврат ДанныеЗапроса;
		
	КонецЕсли;
		
КонецФункции // ПолучитьТаблицуДанныхADO()

Процедура ПолучитьДанныеЗапросаПоADO(ОбъектРасчета,СтрЗапрос) Экспорт
	
	ДанныеЗапроса = ПолучитьТаблицуДанныхADO(ОбъектРасчета, СтрЗапрос);
	
	Если ДанныеЗапроса = Неопределено ИЛИ ДанныеЗапроса.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,СтрЗапрос.ТаблицаОперандов,СтрЗапрос.ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей);
	
КонецПроцедуры // ПолучитьДанныеЗапросаПоADO()

Функция ПолучитьТаблицуДанныхОбъектаВИБ(КонтекстОтчета,СтрЗапрос) Экспорт
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);	
	ТаблицаДанных= ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	ТекПравило=ОбщегоНазначенияУХ.ПолучитьЭлементСтруктурыПоИндексу(СтруктураЗапроса.СтруктураПолей,0).Значение;
	
	Возврат ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ТекПравило);
		
КонецФункции // ПолучитьТаблицуДанныхОбъектаВИБ()

// Функция подгототавливает структура для выполнения запроса при обращении к регистру бухгалтерии, накопления 
// для ВИБ 1С: Предприятие 8 и 7.7.
Функция ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос,ПроизвольныйЗапрос=Ложь) Экспорт
	
	Если  КонтекстОтчета.База=Неопределено Тогда
		
		Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнешниеДанныеADO Тогда
			
			ПараметрыПодключения=Новый Структура("Организация,Проект,ПериодОтчета,Сценарий,ВидОтчета,ПравилоОбработки,ИмяФайла,ПутьКФайлуADO");
			
			ЗаполнитьЗначенияСвойств(ПараметрыПодключения,КонтекстОтчета);
						
			База=УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(КонтекстОтчета.ИспользуемаяИБ,ПараметрыПодключения);
			
			Если База=Неопределено Тогда
				
				ОбновитьПовторноИспользуемыеЗначения();
				База=УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(КонтекстОтчета.ИспользуемаяИБ,ПараметрыПодключения);
				
			КонецЕсли;
						
		Иначе
			
			ПараметрыПодключения=Неопределено;
			База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(КонтекстОтчета.ИспользуемаяИБ, 1);
			
			Если База=Неопределено Тогда
				
				ОбновитьПовторноИспользуемыеЗначения();
				База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(КонтекстОтчета.ИспользуемаяИБ, 1);
				
			КонецЕсли;
			
		КонецЕсли;
			
	Иначе
		
		База=КонтекстОтчета.База;
		
	КонецЕсли;
	
	Если НЕ (КонтекстОтчета.ИспользуемаяИБ.ИспользоватьWS 
		ИЛИ КонтекстОтчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.Предприятие77 
		ИЛИ КонтекстОтчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO
		ИЛИ База=Неопределено) Тогда
		
		Если ПроизвольныйЗапрос Тогда
			ПостроительЗапросаВИБ = База.NewObject("Запрос");
		Иначе
			ПостроительЗапросаВИБ = База.NewObject("ПостроительЗапроса");
		КонецЕсли;
		
	Иначе
		ПостроительЗапросаВИБ = Неопределено;
	КонецЕсли;
	
	Если СтрЗапрос.СтруктураЗапроса=Неопределено Тогда
		СтруктураЗапроса=Новый Структура;
	Иначе	
		СтруктураЗапроса=СтрЗапрос.СтруктураЗапроса;
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("ОбъектЗапрос",ПостроительЗапросаВИБ);
	СтруктураЗапроса.Вставить("ТекстЗапроса",СтрЗапрос.ТекстЗапроса);
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		СтрЗначения=УправлениеОтчетамиУХ.ПолучитьСвойстваПараметра(КонтекстОтчета,СтрокаПараметр);
		
	КонецЦикла;
	
	СтруктураЗапроса.Вставить("ТаблицаВычисленияПараметров",ТекПравилаВычисленияПараметров);
	СтруктураЗапроса.Вставить("ВИБ",Новый Структура("ВИБ,ТипПодключения",КонтекстОтчета.ИспользуемаяИБ,1));
	СтруктураЗапроса.Вставить("ПроизвольныйЗапрос",ПроизвольныйЗапрос);
	СтруктураЗапроса.Вставить("ПланСчетов",СтрЗапрос.ПланСчетов);		
	
	СтруктураЗапроса.Вставить("Организация");
	СтруктураЗапроса.Вставить("Проект");
	СтруктураЗапроса.Вставить("ПериодОтчета");
	СтруктураЗапроса.Вставить("Сценарий");
	СтруктураЗапроса.Вставить("ВидОтчета");
	СтруктураЗапроса.Вставить("ПравилоОбработки");
	
	ЗаполнитьЗначенияСвойств(СтруктураЗапроса,КонтекстОтчета);
	
	Если СтрЗапрос.СтруктураЗапроса.Свойство("СтрокаСоединения") Тогда
		
		СтруктураЗапроса.Вставить("СтрокаСоединения",СтрЗапрос.СтруктураЗапроса.СтрокаСоединения);
		
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("База",База);
		
	Возврат СтруктураЗапроса;
	
КонецФункции

Функция ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса) Экспорт
	
	ДанныеДляЗапроса=ПодготовитьДанныеДляНастройкиЗапроса(СтруктураЗапроса);
	
	РезультатЗапроса=РаботаСОбъектамиМетаданныхВнутреннийУХ.ПолучитьРабочуюТаблицуДанных(СтруктураЗапроса.База,ДанныеДляЗапроса);
	
	Если ТипЗнч(РезультатЗапроса)=Тип("Строка") Тогда
		
		ТекстОшибки = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьТаблицуДанныхПоЗапросу.1", , , ТекстОшибки, РезультатЗапроса);
				
		Возврат Новый ТаблицаЗначений;
		
	Иначе
		
		Возврат РезультатЗапроса;
		
	КонецЕсли;
			
КонецФункции

Функция ТрансформироватьВнешниеДанные(ЗНАЧ КонтекстОтчета,ТаблицаДанных,ПравилаИспользованияПолей) Экспорт
	
	Если ТипЗнч(КонтекстОтчета)=Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
		КонтекстОтчета=КонтекстОтчета.ПодготовитьСтруктуруПеременныхДляРасчета();
	КонецЕсли;
	
	Если НЕ КонтекстОтчета.Свойство("Загрузка") Тогда
		КонтекстОтчета.Вставить("Загрузка",Истина);
	КонецЕсли;
	
	Если ПравилаИспользованияПолей.Колонки.Найти("СпособЗаполнения")=Неопределено Тогда
		
		ПравилаИспользованияПолей.Колонки.Добавить("СпособЗаполнения");
		ПравилаИспользованияПолей.Колонки.Добавить("ФиксированноеЗначение");
		
	КонецЕсли;
	
	Если ТаблицаДанных.Количество()=0 Тогда
		УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно(ТаблицаДанных,ПравилаИспользованияПолей,КонтекстОтчета);
		Возврат ТаблицаДанных;
	КонецЕсли;
	
	ЕстьНастройкиСоответствия=Ложь;
	
	Для Каждого Строка ИЗ ПравилаИспользованияПолей Цикл
		
		Если ЗначениеЗаполнено(Строка.НастройкаСоответствия) Тогда
			
			ЕстьНастройкиСоответствия=Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЕстьНастройкиСоответствия Тогда
		
		УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно(ТаблицаДанных,ПравилаИспользованияПолей,КонтекстОтчета);
		Возврат ТаблицаДанных;
		
	КонецЕсли;
		
	РежимРасшифровки = ?(ЗначениеЗаполнено(РежимРасшифровки), РежимРасшифровки, Ложь);
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураПодчиненныхРеквизитов=Новый Структура;
	
	ПроверитьЗаполнениеОбязательныхРеквизитов(ТаблицаДанных,ПравилаИспользованияПолей);
		
	Результат=ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ПравилаИспользованияПолей,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,КонтекстОтчета);
		
	Если Результат=Ложь Тогда
		
		ФлагОшибкиИмпорта=Истина;
		Возврат Ложь;
		
	КонецЕсли;
			 
	 ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										Результат,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										РежимРасшифровки,
										ПравилаИспользованияПолей);
										
	////////////////////////////////////////////////////////////////////////////////////
	// Определим необходимость проверки и дополнительного запроса в случае использования
	// таблицы синхронизации ВИБ.
	
	УправлятьНСИ=КэшируемыеПроцедурыУХ.ИспользоватьУправлениеНСИ();
	
	Если УправлятьНСИ И КонтекстОтчета.Свойство("ИспользуемаяИБ") И КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации Тогда
		
		СтруктураОшибок=Новый Структура;
		
		ПроверитьИСинхронизироватьТаблицуРезультатов(Результат,СтруктураКлючевыхРеквизитов,ПравилаИспользованияПолей,СтруктураОшибок);
		
		Если СтруктураОшибок.Количество()>0 Тогда
			
			ТекстОшибки = НСтр("ru = 'При импорте данных обнаружены несинхронизированные элементы справочников.'");
			
			Для Каждого КлючИЗначение ИЗ СтруктураОшибок Цикл
				
				ТекстОшибки=ТекстОшибки+Символы.ПС+КлючИЗначение.Ключ+" ("+СтруктураКлючевыхРеквизитов[КлючИЗначение.Ключ][0]+"):";
				
				Для Каждого Элемент ИЗ КлючИЗначение.Значение Цикл
					
					ТекстОшибки=ТекстОшибки+Символы.ПС+Элемент;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ТекстОшибки = ТекстОшибки + Символы.ПС;
			ТекстОшибки = ТекстОшибки + НСтр("ru = 'Необходимо провести синхронизацию и выполнить загрузку данных заново.'");
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ТрансформироватьВнешниеДанные.1", , , ТекстОшибки);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Важное);
			
			ФлагОшибкиИмпорта=Истина;
			
			Возврат Ложь;
			
		КонецЕсли;	
		
	КонецЕсли;
						
	//////////////////////////////////////////////////////////////////////////////////////			
				
	Если КонтекстОтчета.Свойство("ДляАналитическихОтчетов") Тогда
		
		ОпределитьКолонкуДанных(Результат,ПравилаИспользованияПолей);			
		ОчиститьСлужебныеДанные(Результат,ПравилаИспользованияПолей);
		
	КонецЕсли;
	
	Возврат Результат;
				
КонецФункции // ТрансформироватьВнешниеДанные()

Процедура ОпределитьКолонкуДанных(ТаблицаДанных,ПравилаИспользованияПолей)
	
	Если ТаблицаДанных.Колонки.Найти("Значение")=Неопределено Тогда
		
		СтрЗначение=ПравилаИспользованияПолей.Найти("Значение","КодАналитики");
		
		Если НЕ СтрЗначение=Неопределено Тогда
			
			КолонкаЗначение=ТаблицаДанных.Колонки.Найти(СтрЗначение.Синоним);
			
			Если НЕ КолонкаЗначение=Неопределено Тогда
				
				КолонкаЗначение.Имя="Значение";
				
			Иначе
				
				КолонкаЗначение=ТаблицаДанных.Колонки.Найти(СтрЗаменить(СтрЗначение.Поле,".",""));
				
				Если НЕ КолонкаЗначение=Неопределено Тогда
					
					КолонкаЗначение.Имя="Значение";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ОпределитьКолонкуДанных()

// Трансформирует полученную из ВИБ таблицу в таблицу значений операндов
//
Процедура ПолучитьТаблицуОперандовВИБ(ОбъектРасчета,ДанныеЗапроса,ТаблицаОперандов,ТабПравилаИспользованияПолей=Неопределено)
	
	Если ТипЗнч(ОбъектРасчета) = Тип("Структура") 
		И ОбъектРасчета.Свойство("РасширенныйАлгоритмРасчетаПоказателей") Тогда
		РасширенныйАлгоритмРасчетаПоказателей = ОбъектРасчета.РасширенныйАлгоритмРасчетаПоказателей;
	Иначе
		РасширенныйАлгоритмРасчетаПоказателей = Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗапроса)=Тип("ТаблицаЗначений") Тогда
		
		УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно(ДанныеЗапроса,ТабПравилаИспользованияПолей,ОбъектРасчета);
		
		Если ДанныеЗапроса.Количество() > 0 Тогда
			
			ДанныеЗапроса.Колонки.Добавить("КодОперанда");
			ДанныеЗапроса.ЗаполнитьЗначения(ТаблицаОперандов[0].Код,"КодОперанда");
			
			Для Каждого Строка ИЗ ДанныеЗапроса Цикл
				
				Если ЗначениеЗаполнено(Строка.Значение) Тогда
					
					НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Добавим итоговое значение
			Если НЕ РасширенныйАлгоритмРасчетаПоказателей Тогда
			
				ИтоговоеЗначение=ОбщегоНазначенияУХ.ТЗИтог(ДанныеЗапроса,,"Значение",ТаблицаОперандов[0].ВидИтогаПоказателя,ТаблицаОперандов[0].ТипЗначенияПоказателя);
				
				НоваяСтрока = ОбъектРасчета.мЗначенияОперандов.Добавить();
				НоваяСтрока.КодОперанда = ДанныеЗапроса[0].КодОперанда;
				НоваяСтрока.Значение = ИтоговоеЗначение;
				НоваяСтрока.ИтогПоПоказателю=Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ДанныеЗапроса.Свойство("ТаблицаADO") Тогда
		
		РазобратьСводныеДанныеADO(ОбъектРасчета,ДанныеЗапроса.ТабОперандов,ТаблицаОперандов,ТабПравилаИспользованияПолей,РасширенныйАлгоритмРасчетаПоказателей);
		
	ИначеЕсли НЕ ДанныеЗапроса.ТабСчетаОперандов.Колонки.Найти("СчетДанные")=Неопределено Тогда 
		
		РазобратьСводныеДанныеРегистраБухгалтерииВИБ(ОбъектРасчета,ДанныеЗапроса.ТаблицаДанных,ТаблицаОперандов,ДанныеЗапроса.ТабСчетаОперандов,ДанныеЗапроса.СоответствиеРесурсов,ТабПравилаИспользованияПолей);
				
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьТаблицуОперандовВИБ()

// Функция возвращает таблицу значений для операнда, получаемого из плана счетов 1С: Предприятия 7.7
//
Функция ПолучитьТаблицуДанныхПоЗапросу77(СтруктураЗапроса,ТолькоОбъектИтоги=Ложь) Экспорт
	
	Перем ДатаНач;
	Перем ДатаКон;
	Перем Валюта;
	Перем Организация;
	Перем ТекСчет;
	Перем ТекКоррСчет;
	Перем Счет;
	Перем КодОперанда;
	
	СтруктураЗапроса.ОбъектЗапрос = СтруктураЗапроса.База.CreateObject("БухгалтерскиеИтоги");	
	БухИтоги = СтруктураЗапроса.ОбъектЗапрос;
		
	СписокРесурсов 				= СтруктураЗапроса.СписокРесурсов;
	НаименованиеПланаСчетов   	= СтруктураЗапроса.ПланСчетов.Наименование;
	СписокСчетов				= СтруктураЗапроса.СписокСчетов;
	СписокКоррСчетов			= СтруктураЗапроса.СписокКоррСчетов;
	
	ПланСчетов   = СтруктураЗапроса.База.ПланыСчетов.ЗначениеПоИдентификатору(СокрЛП(НаименованиеПланаСчетов));
	
	// Таблица хранит номера аналитик основных счетов и признак их использования в итоговой таблице.
	ТаблицаИспользуемыхАналитик   = Новый ТаблицаЗначений;
	ТаблицаИспользуемыхАналитик.Колонки.Добавить("ВидСубконто", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИспользуемыхАналитик.Колонки.Добавить("АналитикаСчета", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаИспользуемыхАналитик.Колонки.Добавить("ИндексСубконто", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	ТаблицаИспользуемыхАналитик.Колонки.Добавить("ПомещатьВТаблицу", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	// Таблица хранит номера аналитик корсчета и признак их использования в итоговой таблице.
	ТаблицаИспользуемыхАналитикКС   = Новый ТаблицаЗначений;
	ТаблицаИспользуемыхАналитикКС.Колонки.Добавить("ВидСубконто", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИспользуемыхАналитикКС.Колонки.Добавить("ИндексСубконто", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	ТаблицаИспользуемыхАналитикКС.Колонки.Добавить("АналитикаСчета", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаИспользуемыхАналитикКС.Колонки.Добавить("ПомещатьВТаблицу", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	// Возвращаемая таблица данных.
	ТаблицаДанных                = Новый ТаблицаЗначений;
	СтруктураПолей               = Новый Структура;
	МассивРесурсов               = Новый Массив; 
	
	Для Каждого Ресурс ИЗ СписокРесурсов Цикл
		
		ТаблицаДанных.Колонки.Добавить(Ресурс.Значение, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		СтруктураКолонки=Новый Структура;
		СтруктураКолонки.Вставить("ИмяКолонки",Ресурс.Значение);
		
		МассивРесурсов.Добавить(СтруктураКолонки);
		
	КонецЦикла;
	
	СтруктураПолей.Вставить("Значение",МассивРесурсов);
	
	Если СписокКоррСчетов.Количество()>0 Тогда
		ТаблицаДанных.Колонки.Добавить("Счет", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
		ТаблицаДанных.Колонки.Добавить("КоррСчет", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
	Иначе
		ТаблицаДанных.Колонки.Добавить("Счет", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
	КонецЕсли;
	
	БухИтоги.ИспользоватьПланСчетов(ПланСчетов);
	
	// Накладываем отборы.
	НекорректноеЗаполнениеОтборов = Ложь;
	ИндексСубконто=1;
	ИндексКоррСубконто=1;
	
	Для Каждого СтрокаВычисления Из СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
		
		Если СтрокаВычисления.ТипРасчета = "НеИспользуется" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ПолучитьЗначениеВИБНаОснованииОтбора77(СтруктураЗапроса.ВИБ,СтруктураЗапроса.База, СтрокаВычисления);
		
		Если ЗначениеПараметра <> Неопределено ИЛИ СтрНайти(СтрокаВычисления.ИмяПараметра,"Субконто")>0 Тогда
			Если СтрокаВычисления.ИмяПараметра = "ДатаНач" Тогда // Установлена дата начала
				ДатаНач = ЗначениеПараметра;
			ИначеЕсли СтрокаВычисления.ИмяПараметра = "ДатаКон" Тогда // Установлена дата окончания
				ДатаКон = ЗначениеПараметра;
			ИначеЕсли СтрокаВычисления.ИмяПараметра = "Валюта" Тогда // Выбрана валюта
				
				Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") И ЗначениеПараметра.Количество() = 1 Тогда
					Валюта = ЗначениеПараметра[0];
				Иначе
					НекорректноеЗаполнениеОтборов = Истина; // Не обнаружена валюта, указанная в отборе.
					Прервать;
				КонецЕсли;
				
			ИначеЕсли СтрокаВычисления.ИмяПараметра = "Организация" Тогда // Установлена организация
				Если ЗначениеПараметра.Количество() = 1 Тогда
					БухИтоги.ИспользоватьРазделительУчета(ЗначениеПараметра[0]);
				Иначе
					НекорректноеЗаполнениеОтборов = Истина; // Не обнаружен разделитель учета, указанный в отборе.
					Прервать;
				КонецЕсли;
			Иначе
				
				ПоложениеДвоеточия = СтрНайти(СтрокаВычисления.ПредставлениеПараметра, ": ");
				Если ПоложениеДвоеточия <> 0 Тогда
					
					ИдентификаторСубконто = СокрЛП(Сред(СтрокаВычисления.ПредставлениеПараметра, ПоложениеДвоеточия + 1));
										
					ВидСубконто=СтруктураЗапроса.База.ВидыСубконто.ЗначениеПоИдентификатору(ИдентификаторСубконто);
					
					ИспользуетсяАналитикаОсновногоСчета = СтрЧислоВхождений(СтрокаВычисления.ПредставлениеПараметра, "Дт") > 0;
					
					Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
						
						// Использовать список субконто можно только для основного счета.
						Если ИспользуетсяАналитикаОсновногоСчета Тогда
							
							Субконто = СтруктураЗапроса.База.CreateObject("СписокЗначений");
							Для Каждого Элемент Из ЗначениеПараметра Цикл
								Субконто.ДобавитьЗначение(Элемент);
							КонецЦикла;
							
						Иначе
							Субконто = ЗначениеПараметра[0];
						КонецЕсли;
						
					Иначе
						Субконто = ЗначениеПараметра;
					КонецЕсли;
					
					Если ИспользуетсяАналитикаОсновногоСчета Тогда
						
						// Устанавливаем отбор по субконто основного счета.
						
						БухИтоги.ИспользоватьСубконто(ВидСубконто, Субконто, 2);
						
						НоваяСтрока = ТаблицаИспользуемыхАналитик.Добавить();
						НоваяСтрока.ИндексСубконто=ИндексСубконто;
						НоваяСтрока.ВидСубконто   = ИдентификаторСубконто;
						НоваяСтрока.ПомещатьВТаблицу = Ложь;
						
						ИндексСубконто=ИндексСубконто+1;
						
					Иначе
						
						// Устанавливаем отбор по субконто корсчета.
						
						БухИтоги.ИспользоватьКорСубконто(ВидСубконто, Субконто, 2);
						
						НоваяСтрока = ТаблицаИспользуемыхАналитикКС.Добавить();
						НоваяСтрока.ИндексСубконто=ИндексКоррСубконто;
						НоваяСтрока.ВидСубконто   = ИдентификаторСубконто;
						НоваяСтрока.ПомещатьВТаблицу = Ложь;
						
						ИндексКоррСубконто=ИндексКоррСубконто+1;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИспользованиеКоррСчета = СписокКоррСчетов.Количество()>0;
	
	МассивПолей=Неопределено;
	
	Для Каждого ИспользованиеПолейЗапроса Из СтруктураЗапроса.ПравилаИспользованияПолей Цикл
		
		Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(ИспользованиеПолейЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ИспользованиеПолейЗапроса.КодАналитики="Значение" Тогда // Добавляем в том случае, если настроено соответствие аналитик.
			
			ДанныеПоля=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИспользованиеПолейЗапроса.Синоним,"vzv");
			
			АналитикаСчета=ДанныеПоля[0];
			ИдентификаторСубконто = ДанныеПоля[1];
			РеквизитСубконто = ДанныеПоля[2];
			
			Если ДанныеПоля.Количество() > 3 Тогда
				ИндексВМассиве = 3;
				Пока ИндексВМассиве < ДанныеПоля.Количество() Цикл
					РеквизитСубконто = РеквизитСубконто + "vzv" + ДанныеПоля[ИндексВМассиве];
					ИндексВМассиве = ИндексВМассиве + 1;
				КонецЦикла; 
			КонецЕсли;
						
			ВидСубконто=СтруктураЗапроса.База.ВидыСубконто.ЗначениеПоИдентификатору(ИдентификаторСубконто);
				
			АналитикаОсновногоСчета = НЕ СтрЧислоВхождений(ИспользованиеПолейЗапроса.Поле, "Кт") > 0;
			
			Если НЕ СтруктураПолей.Свойство(АналитикаСчета, МассивПолей) Тогда
				
				СтруктураПолей.Вставить(АналитикаСчета, Новый Массив);
				МассивПолей = СтруктураПолей[АналитикаСчета];
				
				// Раскрытие по виду субконто устанавливается только в том случае, если по нему еще не было отбора.
				Если АналитикаОсновногоСчета Тогда
					
					ТекЗапись=ТаблицаИспользуемыхАналитик.Найти(ИдентификаторСубконто,"ВидСубконто");
					
					Если ТекЗапись=Неопределено Тогда
						
						БухИтоги.ИспользоватьСубконто(ВидСубконто, Неопределено, 1);
						ТекЗапись = ТаблицаИспользуемыхАналитик.Добавить();
						ТекЗапись.ВидСубконто = ИдентификаторСубконто;
						ТекЗапись.ИндексСубконто = ИндексСубконто;
						ТекЗапись.АналитикаСчета = АналитикаСчета;
						ТекЗапись.ПомещатьВТаблицу = Истина;
						
						ИндексСубконто=ИндексСубконто+1;
						
					Иначе
						
						ТекЗапись.АналитикаСчета = АналитикаСчета;
						ТекЗапись.ПомещатьВТаблицу = Истина;
						
					КонецЕсли;
					
				Иначе
					
					ТекЗапись=ТаблицаИспользуемыхАналитикКС.Найти(ИдентификаторСубконто,"ВидСубконто");
					
					Если ТекЗапись=Неопределено Тогда
						
						БухИтоги.ИспользоватьКорСубконто(ВидСубконто, Неопределено, 1);
						ТекЗапись = ТаблицаИспользуемыхАналитикКС.Добавить();
						ТекЗапись.ВидСубконто = ИдентификаторСубконто;
						ТекЗапись.ИндексСубконто = ИндексКоррСубконто;
						ТекЗапись.АналитикаСчета = АналитикаСчета;
						ТекЗапись.ПомещатьВТаблицу = Истина;
						
						ИндексКоррСубконто=ИндексКоррСубконто+1;
						
					Иначе
						
						ТекЗапись.АналитикаСчета = АналитикаСчета;
						ТекЗапись.ПомещатьВТаблицу = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрНайти(ВидСубконто.ТипСубконто(),"Справочник.")>0 Тогда
				
				Справочник = СтруктураЗапроса.База.Метаданные().Справочник(СтрЗаменить(ВидСубконто.ТипСубконто(), "Справочник.", ""));
				
				ДлинаНаименования=Справочник.ДлинаНаименования;
				
			ИначеЕсли СтрНайти(ВидСубконто.ТипСубконто(),"Перечисление.")>0 Тогда
				
				ДлинаНаименования=100;
				
			КонецЕсли;
			
			Если ИспользованиеПолейЗапроса.РеквизитАналитики = "Наименование"
				ИЛИ ИспользованиеПолейЗапроса.РеквизитАналитики = "Комментарий" Тогда
				ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ДлинаНаименования);
			ИначеЕсли ИспользованиеПолейЗапроса.РеквизитАналитики = "Код" 
				ИЛИ ИспользованиеПолейЗапроса.РеквизитАналитики="КодДляСинхронизации" Тогда
				ДлинаКода = Справочник.ДлинаКода;
				ТипЗначенияПоля = ?(Справочник.ТипКода = "Текстовый"
				, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(?(ДлинаКода=0,25,ДлинаКода))
				, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(?(ДлинаКода=0,5,ДлинаКода)));
			Иначе
				
				Если СтруктураЗапроса.ПравилаИспользованияПолей.Колонки.Найти("РеквизитАналитикиВИБ")=Неопределено Тогда
					
					ДлинаПоля    = Справочник.Реквизит(ИспользованиеПолейЗапроса.РеквизитАналитики).Длина;
					ТочностьПоля = Справочник.Реквизит(ИспользованиеПолейЗапроса.РеквизитАналитики).Точность;
					ТипПоля      = Справочник.Реквизит(ИспользованиеПолейЗапроса.РеквизитАналитики).Тип;
					
				Иначе
					
					ДлинаПоля    = Справочник.Реквизит(ИспользованиеПолейЗапроса.РеквизитАналитикиВИБ).Длина;
					ТочностьПоля = Справочник.Реквизит(ИспользованиеПолейЗапроса.РеквизитАналитикиВИБ).Точность;
					ТипПоля      = Справочник.Реквизит(ИспользованиеПолейЗапроса.РеквизитАналитикиВИБ).Тип;
					
				КонецЕсли;
				
				Если ТипПоля = "Строка" Тогда
					ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(?(ДлинаПоля = 0, 500, ДлинаПоля));
				ИначеЕсли ТипПоля = "Число" Тогда
					ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(ДлинаПоля, ТочностьПоля);
				Иначе
					ТипЗначенияПоля = Новый ОписаниеТипов(ТипПоля);
				КонецЕсли;
				
			КонецЕсли;
			
			НаименованиеПоля = ИспользованиеПолейЗапроса.Синоним;
			
			Если СтрНайти(ИспользованиеПолейЗапроса.Поле,".")>0 Тогда // Используется реквизит ссылочного объекта 
				
				МассивПолей.Добавить(Новый Структура("Реквизит, ИмяКолонки", РеквизитСубконто,НаименованиеПоля));
				
			Иначе // Используется перечисление - синхронизируемся по его наименованию.
				МассивПолей.Добавить(Новый Структура("Реквизит, ИмяКолонки","Наименование",НаименованиеПоля));
				
			КонецЕсли;
			
			Если ТаблицаДанных.Колонки.Найти(НаименованиеПоля)=Неопределено Тогда														   															   
				ТаблицаДанных.Колонки.Добавить(НаименованиеПоля,ТипЗначенияПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НекорректноеЗаполнениеОтборов Тогда
		Возврат ТаблицаДанных; // Отборы не обнаружены, возвращаем пустую таблицу.
	КонецЕсли;
	
	СтрокаСчет=ОбщегоНазначенияУХ.ПолучитьСтрокуИзСпискаЗначений(СписокСчетов);
	СтрокаКоррСчет=ОбщегоНазначенияУХ.ПолучитьСтрокуИзСпискаЗначений(СписокКоррСчетов);
	
	Если ТолькоОбъектИтоги Тогда
		
		// Вернем настроенный объект "БухгалтерскиеИтоги", если в дальнейшем предполагается его использование
		// для расшифровок отчетов.
		
		БухИтоги.ВключатьСубсчета(1,1);
		
		Если Не ПустаяСтрока(СтрокаКоррСчет) Тогда
			
			БухИтоги.ВыполнитьЗапрос(ДатаНач, ДатаКон, СтрокаСчет, СтрокаКоррСчет, Валюта, 3,"Проводка");
			
		Иначе
			
			БухИтоги.ВыполнитьЗапрос(ДатаНач, ДатаКон, СтрокаСчет, СтрокаКоррСчет, Валюта, 3);
			
		КонецЕсли;
		
		СтруктураИтоги=Новый Структура;
		СтруктураИтоги.Вставить("Ит",БухИтоги);
		СтруктураИтоги.Вставить("ТаблицаИспользуемыхАналитик",ТаблицаИспользуемыхАналитик);
		СтруктураИтоги.Вставить("ТаблицаИспользуемыхАналитикКС",ТаблицаИспользуемыхАналитикКС);
		
		Возврат СтруктураИтоги;
		
	Иначе
		
		ВключатьСубсчета=?(СтрНайти(СтрокаСчет,".")>0 ,1,0);
		ВключатьКоррСубсчета=?(СтрНайти(СтрокаКоррСчет,".")>0,1,0);
		
		БухИтоги.ВключатьСубсчета(ВключатьСубсчета,ВключатьКоррСубсчета);
		
		БухИтоги.ВыполнитьЗапрос(ДатаНач, ДатаКон, СтрокаСчет, СтрокаКоррСчет, Валюта, ?(НЕ ПустаяСтрока(СтрокаКоррСчет), 2 , 1));
		
	КонецЕсли;
	
	ТабРазворот=ТаблицаИспользуемыхАналитик.Скопировать(Новый Структура("ПомещатьВТаблицу",Истина));
	ТабРазворотКС=ТаблицаИспользуемыхАналитикКС.Скопировать(Новый Структура("ПомещатьВТаблицу",Истина));
	
	БухИтоги.ВыбратьСчета();
	
	Пока БухИтоги.ПолучитьСчет() = 1 Цикл
		ТекСчет = СокрЛП(БухИтоги.Счет.Код);
		
		Если СписокСчетов.НайтиПоЗначению(ТекСчет)=Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТабРазворот.Количество() > 0 И СтруктураПолей.Количество()>1 Тогда
			
			Если СписокКоррСчетов.Количество()>0 Тогда
				
				БухИтоги.ВыбратьКорСчета();
				Пока БухИтоги.ПолучитьКорСчет() = 1 Цикл
					
					ТекКорСчет = СокрЛП(БухИтоги.КорСчет.Код);
					
					Если СписокКоррСчетов.НайтиПоЗначению(ТекКорСчет)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТЗ = ПолучитьРазвертываниеПоСубконто(БухИтоги, СписокРесурсов, ТабРазворот[0].ИндексСубконто,СтруктураПолей, ТабРазворот, ТекСчет,
					ТабРазворотКС.Количество() > 0, ТабРазворотКС);
					
					Для Каждого Строка ИЗ ТЗ Цикл
						
						НоваяСтрока=ТаблицаДанных.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
						НоваяСтрока.Счет=ТекСчет;
						НоваяСтрока.КоррСчет=ТекКорСчет;
						
					КонецЦикла;
					
				КонецЦикла;
				
			Иначе
				
				ТЗ = ПолучитьРазвертываниеПоСубконто(БухИтоги, СписокРесурсов, ТабРазворот[0].ИндексСубконто,СтруктураПолей, ТабРазворот, ТекСчет,
				ТабРазворотКС.Количество() > 0, ТабРазворотКС);
				
				Для Каждого Строка ИЗ ТЗ Цикл
					ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Строка);
				КонецЦикла;
				
			КонецЕсли;	
			
		ИначеЕсли ТаблицаИспользуемыхАналитикКС.Количество() > 0 И СтруктураПолей.Количество()>1 Тогда
			
			Если СписокКоррСчетов.Количество()>0 Тогда
				
				БухИтоги.ВыбратьКорСчета();
				Пока БухИтоги.ПолучитьКорСчет() = 1 Цикл
					
					ТекКорСчет = СокрЛП(БухИтоги.КорСчет.Код);
					
					Если СписокКоррСчетов.НайтиПоЗначению(ТекКорСчет)=Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТЗ = ПолучитьРазвертываниеПоСубконтоКС(БухИтоги,СписокРесурсов, 1, СтруктураПолей, ТаблицаИспользуемыхАналитикКС);
					Если ТЗ <> Неопределено Тогда
						Для Каждого Строка ИЗ ТЗ Цикл
							
							НоваяСтрока=ТаблицаДанных.Добавить();	
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							
							НоваяСтрока.Счет=ТекСчет;
							НоваяСтрока.КоррСчет=ТекКорСчет;
							
						КонецЦикла;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				
				ТЗ = ПолучитьРазвертываниеПоСубконтоКС(БухИтоги,СписокРесурсов, 1, СтруктураПолей, ТаблицаИспользуемыхАналитикКС);
				Если ТЗ <> Неопределено Тогда
					Для Каждого Строка ИЗ ТЗ Цикл
						ЗаполнитьЗначенияСвойств(ТаблицаДанных.Добавить(), Строка);
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если СписокКоррСчетов.Количество()>0 Тогда
				ТЗ = ПолучитьДетализациюПоКС(БухИтоги, СписокРесурсов, СтруктураПолей,Истина);
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТЗ, ТаблицаДанных);
			Иначе
				НоваяСтрока = ТаблицаДанных.Добавить();
				НоваяСтрока.Счет  = ТекСчет;
				
				Для Каждого Ресурс ИЗ СписокРесурсов Цикл 
					
					НоваяСтрока[Ресурс.Значение] = ПолучитьЗначениеИтогов(БухИтоги,Ресурс.Значение);
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ТаблицаДанных.Колонки.Найти("Счет")=Неопределено Тогда
		ТаблицаДанных.Колонки.Счет.Имя="СчетКод";
	КонецЕсли;
	
	Если НЕ ТаблицаДанных.Колонки.Найти("КоррСчет")=Неопределено Тогда
		ТаблицаДанных.Колонки.КоррСчет.Имя="КоррСчетКод";
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции //ПолучитьТаблицуДанныхПоЗапросу77

Функция ADO_ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса, ДополнительныеСвойстваИмпорта = Неопределено) Экспорт
		
	Перем ТаблицаКолонок; 
	
	Если СтрНайти(Врег(СтруктураЗапроса.База.Provider),"ORA")>0 Тогда
			
		Возврат Oracle_ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса, ДополнительныеСвойстваИмпорта); 
						
	КонецЕсли;
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ТаблицаАналитикиВИБ");
	ТаблицаПолей.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПолей.Колонки.Добавить("ПоляТаблицы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаПолей.Колонки.Добавить("ДанныеСвязаннойТаблицы");
	ТаблицаПолей.Колонки.Добавить("ДанныеОтбора",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаПолей.Колонки.Добавить("ДлинаПути",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0));
	ТаблицаПолей.Колонки.Добавить("СпособВычисленияПараметра");
	ТаблицаПолей.Колонки.Добавить("ЕстьОтбор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТипыПолучателей = Новый Соответствие;
	
	Для Каждого ТекПравило ИЗ СтруктураЗапроса.СтруктураПолей Цикл
		
		Для Каждого СтрПоле ИЗ ТекПравило.Значение Цикл
			
			Если СтрПоле.КодАналитики="Значение" ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
				Продолжить;
			КонецЕсли;
			
			РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей(СтрПоле.ТаблицаАналитикиВИБ,ТаблицаПолей);
			
			Если ОбщегоНазначенияУХ.СписокЗначенийНайтиПоПредставлению(РабочаяСтрока.ПоляТаблицы,"["+СтрПоле.Синоним+"]")=Неопределено Тогда
				РабочаяСтрока.ПоляТаблицы.Добавить(СтрПоле.Поле,"["+СтрПоле.Синоним+"]");
			КонецЕсли;
			
			ЦелевойТип = Неопределено;
			Если ЗначениеЗаполнено(СтрПоле.ТаблицаАналитики) Тогда
				
				Если Лев(СтрПоле.ТаблицаАналитики, СтрДлина("Перечисление.")) = "Перечисление." Тогда
					ЦелевойТип = Новый ОписаниеТипов("Строка");
				Иначе
					ТаблицаАналитика = Метаданные.НайтиПоПолномуИмени(СтрПоле.ТаблицаАналитики);
					Если НЕ ТаблицаАналитика = Неопределено Тогда
						
						Если СтрЧислоВхождений(СтрПоле.РеквизитАналитики, ".") < 2 Тогда
							
							Точка = СтрНайти(СтрПоле.РеквизитАналитики, ".");
							Если Точка = 0 Тогда
								РеквизитАналитики = СтрПоле.РеквизитАналитики;
							Иначе
								РеквизитАналитики = Сред(СтрПоле.РеквизитАналитики, Точка + 1);
							КонецЕсли;
							
							МетаданныеРеквизита=ОбщегоНазначенияУХ.ПолучитьРеквизитОбъекта(ТаблицаАналитика,РеквизитАналитики);
							
							Если НЕ МетаданныеРеквизита=Неопределено Тогда
								
								ЦелевойТип=МетаданныеРеквизита.Тип;
								
							КонецЕсли;
															
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЦелевойТип = Неопределено Тогда
					Если ЦелевойТип.Типы().Количество() = 1 Тогда
						ТипыПолучателей.Вставить(СтрПоле.Поле, ЦелевойТип.Типы()[0]);
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ТаблицаКолонок=Неопределено Тогда
					
					ТаблицаКолонок=СтруктураЗапроса.ТаблицаADO.Реквизиты.Выгрузить();
					
				КонецЕсли;
				
				ТипКолонки=ПолучитьТипДанныхПоля(ТаблицаКолонок,СтрПоле.Поле);
				
				Если НЕ ТипКолонки=Неопределено Тогда
					
					ТипыПолучателей.Вставить(СтрПоле.Поле, ТипКолонки);
					
				КонецЕсли;
						
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЦикла;

	СтруктураРесурсов=Новый Структура;
	
	Если СтруктураЗапроса.Свойство("ТаблицаОперандов") Тогда 
		
		Для Каждого СтрОперанд ИЗ СтруктураЗапроса.ТаблицаОперандов Цикл
			
			Если Не ЗначениеЗаполнено(СтрОперанд.Ресурс) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей("({["+СтруктураЗапроса.ТаблицаADO.Имя+"]})",ТаблицаПолей);
			
			Если ОбщегоНазначенияУХ.СписокЗначенийНайтиПоПредставлению(РабочаяСтрока.ПоляТаблицы,"["+СтрОперанд.Код+"]")=Неопределено Тогда
				РабочаяСтрока.ПоляТаблицы.Добавить(СтрОперанд.Ресурс,"["+СтрОперанд.Код+"]",Истина);
				СтруктураРесурсов.Вставить(СтрОперанд.Код,СтрОперанд.Ресурс);
			КонецЕсли;
			
			ТипыПолучателей.Вставить(СтрОперанд.Ресурс, КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(СтрОперанд.ТипЗначенияПоказателя).Типы()[0]);
			
		КонецЦикла;
			
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("СтруктураРесурсов",СтруктураРесурсов);
		
	Для Каждого СтрокаПараметр ИЗ СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
		
		ДанныеОтбора=СтрокаПараметр.УточнениеСпособаОпределения;
		
		РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей(СтрокаПараметр.ТаблицаАналитикиВИБ,ТаблицаПолей);
		РабочаяСтрока.ЕстьОтбор=Истина;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
								
			РабочаяСтрока.ДанныеОтбора.Добавить(СтрокаПараметр.ЗначениеИзКонтекста);		
					
		Иначе
			
			СписокОтбора=ПолучитьСписокОтбора(СтрокаПараметр);
			
			Для Каждого Отбор ИЗ СписокОтбора Цикл
				
				РабочаяСтрока.ДанныеОтбора.Добавить(Отбор.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПолей.Сортировать("ДлинаПути Возр");
	
	Если ТаблицаПолей.Количество()=0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
		
	ВыбранныеТаблицы=Новый ТаблицаЗначений;
	ВыбранныеТаблицы.Колонки.Добавить("ИмяТаблицы");
	ВыбранныеТаблицы.Колонки.Добавить("КоличествоВыборок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	
	ТаблицаСоединений=Новый ТаблицаЗначений;
	ТаблицаСоединений.Колонки.Добавить("ИмяЛевойТаблицы");
	ТаблицаСоединений.Колонки.Добавить("ИмяПравойТаблицы");
	ТаблицаСоединений.Колонки.Добавить("УсловиеСвязи");
	
	ТекстПоля="";
	ТекстОтбор="";
	ТекстПроверка="";
	
	СтрПерваяТаблица=ТаблицаПолей[0];
	
	ТекстВыборки="["+СтрПерваяТаблица.ИмяТаблицы+"] AS ["+СтрПерваяТаблица.ИмяТаблицы+"]";
	
	Если СтрНайти(СтруктураЗапроса.База.Properties("Provider friendly name").Value,"Jet")>0 Тогда
		
		ФункцииПриведения = Новый Соответствие;
		ФункцииПриведения.Вставить(Тип("Булево"), "CBool(");
		ФункцииПриведения.Вставить(Тип("Строка"), "Trim(CStr(");
		ФункцииПриведения.Вставить(Тип("Число"), "CDbl(");
		ФункцииПриведения.Вставить(Тип("Дата"), "CDate(");
		
		ПравыеСкобки = Новый Соответствие;
		ПравыеСкобки.Вставить(Тип("Булево"), ")");
		ПравыеСкобки.Вставить(Тип("Строка"), "))");
		ПравыеСкобки.Вставить(Тип("Число"), ")");
		ПравыеСкобки.Вставить(Тип("Дата"), ")");
		
	Иначе
		
		ФункцииПриведения = Новый Соответствие;
		ФункцииПриведения.Вставить(Тип("Булево"), "CAST(");
		ФункцииПриведения.Вставить(Тип("Строка"), "ltrim(rtrim(CAST(");
		ФункцииПриведения.Вставить(Тип("Число"), "CAST(");
		ФункцииПриведения.Вставить(Тип("Дата"), "CAST(");
		
		ПравыеСкобки = Новый Соответствие;
		ПравыеСкобки.Вставить(Тип("Булево"), " AS Boolean)");
		ПравыеСкобки.Вставить(Тип("Строка"), " AS nvarchar(255))))");
		ПравыеСкобки.Вставить(Тип("Число"), " AS Float)");
		ПравыеСкобки.Вставить(Тип("Дата"), " AS Datetime)");
		
	КонецЕсли;
	
	ТипыКолонокРезультата = Новый Соответствие;
	
	Для Каждого СтрПоле ИЗ СтрПерваяТаблица.ПоляТаблицы Цикл
		
		ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
		
		Если ТипПолучателя = Неопределено Тогда
			ТипПолучателя = Тип("Строка");
		КонецЕсли;
		
		ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
		
		ФункцияПриведения = ФункцииПриведения[ТипПолучателя];
		ПраваяСкобка = ПравыеСкобки[ТипПолучателя];
		
		Если ТипПолучателя = Тип("Число") Тогда
			
			ТекстПоляИсточника = "IIF(" + СтрПоле.Значение + " IS NULL, 0, " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + ")";
			
		Иначе
			
			ТекстПоляИсточника = "IIF(" + СтрПоле.Значение + " IS NULL, NULL, " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + ")";
			
		КонецЕсли;
		
		ТекстПроверка=ТекстПроверка+?(ПустаяСтрока(ТекстПроверка),""," AND ")+СтрПоле.Значение+" IS NULL";			
		ТекстПоля=ТекстПоля+","+ТекстПоляИсточника+" AS "+СтрПоле.Представление;
								
	КонецЦикла;
	
	ТекущийОтбор="";
	МассивСоответствий=Новый Массив;
	
	Для Каждого СтрОтбор ИЗ СтрПерваяТаблица.ДанныеОтбора Цикл
				
		Если ТипЗнч(СтрОтбор.Значение)=Тип("Структура") И СтрОтбор.Значение.Свойство("Интервал") Тогда // 
			
			ТекущийОтбор=ПолучитьСтрокуОтбораПоДате(СтрПерваяТаблица.ИмяТаблицы,СтрОтбор.Значение,СтруктураЗапроса);
			
			Если Не ПустаяСтрока(ТекущийОтбор) Тогда
				
				ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ТекущийОтбор+")";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрОтбор.Значение)=Тип("Соответствие") Тогда
			
			МассивСоответствий.Добавить(СтрОтбор.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоответствий.Количество()>0 Тогда
		
		ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ПолучитьТекстОтбораПоСписку(СтрПерваяТаблица.ИмяТаблицы,МассивСоответствий,СтруктураЗапроса)+")";
		
	КонецЕсли;
	
	// Пристыковываем таблицы с отбором по inner join
	
	СтрокиСОтбором=ТаблицаПолей.Скопировать(Новый Структура("ЕстьОтбор",Истина));
	СтрокиСОтбором.Сортировать("ДлинаПути Возр");
	
	Для Каждого Строка ИЗ СтрокиСОтбором Цикл
		
		Если Строка.ДлинаПути=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ПОЛЯ ТАБЛИЦЫ
		
		РабочийПсевдоним=ПолучитьРабочийПсевдонимТаблицы(Строка.ИмяТаблицы, ВыбранныеТаблицы);
		
		Для Каждого СтрПоле ИЗ Строка.ПоляТаблицы Цикл
			
			ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
			
			Если ТипПолучателя = Неопределено Тогда
				ТипПолучателя = Тип("Строка");
			КонецЕсли;
			
			ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
			
			ФункцияПриведения = ФункцииПриведения[ТипПолучателя];
			ПраваяСкобка = ПравыеСкобки[ТипПолучателя];
			
			ТекстПоляИсточника = "IIF(" + СтрПоле.Значение + " IS NULL, NULL, " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + ")";
			ТекстПроверка=ТекстПроверка+?(ПустаяСтрока(ТекстПроверка),""," AND ")+СтрПоле.Значение+" IS NULL";
							
			ТекстПоля=ТекстПоля+","+ТекстПоляИсточника+" AS "+СтрПоле.Представление;	
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ СОЕДИНЕНИЯ ТАБЛИЦЫ
		
		ИмяЛевойТаблицы="["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
		Для Каждого КлючИЗначение ИЗ Строка.ДанныеСвязаннойТаблицы Цикл
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПравойТаблицы=КлючИЗначение.Ключ;
			
			МассивПутей=ТаблицаСоединений.НайтиСтроки(Новый Структура("ИмяЛевойТаблицы,ИмяПравойТаблицы",ИмяЛевойТаблицы,ИмяПравойТаблицы));
			
			Если МассивПутей.Количество()=0 Тогда
				
				ТекстСоединение="";
				
				Если КлючИЗначение.Ключ="["+Строка.ИмяТаблицы+"]" Тогда
					
					ПсевдонимСоединения=РабочийПсевдоним;
					ИмяТаблицы=Строка.ИмяТаблицы;
					
				Иначе
					
					ИмяТаблицы=Сред(ИмяПравойТаблицы,2,СтрДлина(ИмяПравойТаблицы)-2);
					ПсевдонимСоединения=ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы);
					
				КонецЕсли;
				
				ТекстВыборки="("+ТекстВыборки+" INNER JOIN "+КлючИЗначение.Ключ+" AS ["+ПсевдонимСоединения+"] ON "+СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,КлючИЗначение.Значение)+")";
				
				НоваяСтрока=ТаблицаСоединений.Добавить();
				НоваяСтрока.ИмяЛевойТаблицы=ИмяЛевойТаблицы;
				НоваяСтрока.ИмяПравойТаблицы=ИмяПравойТаблицы;	
				
			КонецЕсли;
			
			ИмяЛевойТаблицы=ИмяПравойТаблицы;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ОТБОРЫ ТАБЛИЦЫ
		
		МассивСоответствий=Новый Массив;
		
		Для Каждого СтрОтбор ИЗ Строка.ДанныеОтбора Цикл
			
			Если ТипЗнч(СтрОтбор.Значение)=Тип("Структура") И СтрОтбор.Значение.Свойство("Интервал") Тогда // 
				
				ТекущийОтбор=ПолучитьСтрокуОтбораПоДате(РабочийПсевдоним,СтрОтбор.Значение,СтруктураЗапроса);
				
				Если Не ПустаяСтрока(ТекущийОтбор) Тогда
					
					ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ТекущийОтбор+")";
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрОтбор.Значение)=Тип("Соответствие") Тогда
				
				МассивСоответствий.Добавить(СтрОтбор.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСоответствий.Количество()>0 Тогда
			
			ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ПолучитьТекстОтбораПоСписку(РабочийПсевдоним,МассивСоответствий,СтруктураЗапроса)+")";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пристыковываем таблицы без отбора по left join
	
	СтрокиБезОтбора=ТаблицаПолей.Скопировать(Новый Структура("ЕстьОтбор",Ложь));
	СтрокиБезОтбора.Сортировать("ДлинаПути Возр");
	
	Для Каждого Строка ИЗ СтрокиБезОтбора Цикл
		
		Если Строка.ДлинаПути=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ПОЛЯ ТАБЛИЦЫ
		
		РабочийПсевдоним=ПолучитьРабочийПсевдонимТаблицы(Строка.ИмяТаблицы, ВыбранныеТаблицы);
		
		Для Каждого СтрПоле ИЗ Строка.ПоляТаблицы Цикл
			
			ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
			
			Если ТипПолучателя = Неопределено Тогда
				ТипПолучателя = Тип("Строка");
			КонецЕсли;
			
			ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
			
			ФункцияПриведения = ФункцииПриведения[ТипПолучателя];
			ПраваяСкобка = ПравыеСкобки[ТипПолучателя];
			
			ТекстПоляИсточника = "IIF(" + СтрПоле.Значение + " IS NULL, NULL, " + ФункцияПриведения + СтрПоле.Значение + ПраваяСкобка + ")";
			ТекстПроверка=ТекстПроверка+?(ПустаяСтрока(ТекстПроверка),""," AND ")+СтрПоле.Значение+" IS NULL";
							
			ТекстПоля=ТекстПоля+","+ТекстПоляИсточника+" AS "+СтрПоле.Представление;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ СОЕДИНЕНИЯ ТАБЛИЦЫ
		
		ИмяЛевойТаблицы="["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
		Для Каждого КлючИЗначение ИЗ Строка.ДанныеСвязаннойТаблицы Цикл
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПравойТаблицы=КлючИЗначение.Ключ;
			
			МассивПутей=ТаблицаСоединений.НайтиСтроки(Новый Структура("ИмяЛевойТаблицы,ИмяПравойТаблицы",ИмяЛевойТаблицы,ИмяПравойТаблицы));
			
			Если МассивПутей.Количество()=0 Тогда
				
				ТекстСоединение="";
				
				Если КлючИЗначение.Ключ="["+Строка.ИмяТаблицы+"]" Тогда
					
					ПсевдонимСоединения=РабочийПсевдоним;
					ИмяТаблицы=Строка.ИмяТаблицы;
					
				Иначе
					
					ИмяТаблицы=Сред(ИмяПравойТаблицы,2,СтрДлина(ИмяПравойТаблицы)-2);
					ПсевдонимСоединения=ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы);
					
				КонецЕсли;
				
				ТекстВыборки="("+ТекстВыборки+" LEFT JOIN "+КлючИЗначение.Ключ+" AS ["+ПсевдонимСоединения+"] ON "+СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,КлючИЗначение.Значение)+")";
				
				НоваяСтрока=ТаблицаСоединений.Добавить();
				НоваяСтрока.ИмяЛевойТаблицы=ИмяЛевойТаблицы;
				НоваяСтрока.ИмяПравойТаблицы=ИмяПравойТаблицы;
				
			КонецЕсли;
			
			ИмяЛевойТаблицы=ИмяПравойТаблицы;
			
		КонецЦикла;
				
	КонецЦикла;
	
	ТекстЗапроса="SELECT "+Сред(ТекстПоля,2)+" FROM "+ТекстВыборки;
		
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстЗапроса=ТекстЗапроса+" WHERE ("+ТекстОтбор+" AND NOT ("+ТекстПроверка+"))";
		
	Иначе
		
		ТекстЗапроса=ТекстЗапроса+" WHERE NOT ("+ТекстПроверка+")";
		
	КонецЕсли;
		
	СтруктураЗапроса.Вставить("ТаблицаПолей",ТаблицаПолей);
	
	Возврат ADO_ПолучитьДанныеИзЗапроса(ТекстЗапроса, СтруктураЗапроса, ТипыКолонокРезультата, ДополнительныеСвойстваИмпорта);
	
КонецФункции // ADO_ПолучитьТаблицуДанныхПоЗапросу()

Функция Oracle_ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса, ДополнительныеСвойстваИмпорта)
	
	ТаблицаПолей=Новый ТаблицаЗначений;
	ТаблицаПолей.Колонки.Добавить("ТаблицаАналитикиВИБ");
	ТаблицаПолей.Колонки.Добавить("ИмяТаблицы");
	ТаблицаПолей.Колонки.Добавить("ПоляТаблицы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаПолей.Колонки.Добавить("ДанныеСвязаннойТаблицы");
	ТаблицаПолей.Колонки.Добавить("ДанныеОтбора",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаПолей.Колонки.Добавить("ДлинаПути",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5,0));
	ТаблицаПолей.Колонки.Добавить("СпособВычисленияПараметра");
	ТаблицаПолей.Колонки.Добавить("ЕстьОтбор",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ТипыПолучателей = Новый Соответствие;
	
	Для Каждого ТекПравило ИЗ СтруктураЗапроса.СтруктураПолей Цикл
		
		Для Каждого СтрПоле ИЗ ТекПравило.Значение Цикл
			
			Если СтрПоле.КодАналитики="Значение" ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
				Продолжить;
			КонецЕсли;
			
			РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей(СтрПоле.ТаблицаАналитикиВИБ,ТаблицаПолей);
			
			Если ОбщегоНазначенияУХ.СписокЗначенийНайтиПоПредставлению(РабочаяСтрока.ПоляТаблицы,"["+СтрПоле.Синоним+"]")=Неопределено Тогда
				РабочаяСтрока.ПоляТаблицы.Добавить(СтрПоле.Поле,"["+СтрПоле.Синоним+"]");
			КонецЕсли;
			
			ЦелевойТип = Неопределено;
			Если ЗначениеЗаполнено(СтрПоле.ТаблицаАналитики) Тогда
				
				Если Лев(СтрПоле.ТаблицаАналитики, СтрДлина("Перечисление.")) = "Перечисление." Тогда
					ЦелевойТип = Новый ОписаниеТипов("Строка");
				Иначе
					ТаблицаАналитика = Метаданные.НайтиПоПолномуИмени(СтрПоле.ТаблицаАналитики);
					Если НЕ ТаблицаАналитика = Неопределено Тогда
						
						Если СтрЧислоВхождений(СтрПоле.РеквизитАналитики, ".") < 2 Тогда
							
							Точка = СтрНайти(СтрПоле.РеквизитАналитики, ".");
							Если Точка = 0 Тогда
								РеквизитАналитики = СтрПоле.РеквизитАналитики;
							Иначе
								РеквизитАналитики = Сред(СтрПоле.РеквизитАналитики, Точка + 1);
							КонецЕсли;
							
							МетаданныеРеквизита=ОбщегоНазначенияУХ.ПолучитьРеквизитОбъекта(ТаблицаАналитика,РеквизитАналитики);
							
							Если НЕ МетаданныеРеквизита=Неопределено Тогда
								
								ЦелевойТип=МетаданныеРеквизита.Тип;
								
							КонецЕсли;
															
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
				
				Если НЕ ЦелевойТип = Неопределено Тогда
					Если ЦелевойТип.Типы().Количество() = 1 Тогда
						ТипыПолучателей.Вставить(СтрПоле.Поле, ЦелевойТип.Типы()[0]);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураРесурсов=Новый Структура;
	
	Если СтруктураЗапроса.Свойство("ТаблицаОперандов") Тогда 
		
		Для Каждого СтрОперанд ИЗ СтруктураЗапроса.ТаблицаОперандов Цикл
			
			РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей("({["+СтруктураЗапроса.ТаблицаADO.Имя+"]})",ТаблицаПолей);
			
			Если ОбщегоНазначенияУХ.СписокЗначенийНайтиПоПредставлению(РабочаяСтрока.ПоляТаблицы,"["+СтрОперанд.Код+"]")=Неопределено Тогда
				РабочаяСтрока.ПоляТаблицы.Добавить(СтрОперанд.Ресурс,"["+СтрОперанд.Код+"]",Истина);
				СтруктураРесурсов.Вставить(СтрОперанд.Код,СтрОперанд.Ресурс);
			КонецЕсли;
			
			ТипыПолучателей.Вставить(СтрОперанд.Ресурс, КэшируемыеПроцедурыУХ.ПолучитьОписаниеТиповПоТипуЗначения(СтрОперанд.ТипЗначенияПоказателя).Типы()[0]);
			
		КонецЦикла;
			
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("СтруктураРесурсов",СтруктураРесурсов);
		
	Для Каждого СтрокаПараметр ИЗ СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
		
		ДанныеОтбора=СтрокаПараметр.УточнениеСпособаОпределения;
		
		РабочаяСтрока=ПолучитьРабочуюСтрокуТаблицыПолей(СтрокаПараметр.ТаблицаАналитикиВИБ,ТаблицаПолей);
		РабочаяСтрока.ЕстьОтбор=Истина;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
								
			РабочаяСтрока.ДанныеОтбора.Добавить(СтрокаПараметр.ЗначениеИзКонтекста);		
					
		Иначе
			
			СписокОтбора=ПолучитьСписокОтбора(СтрокаПараметр);
			
			Для Каждого Отбор ИЗ СписокОтбора Цикл
				
				РабочаяСтрока.ДанныеОтбора.Добавить(Отбор.Значение);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаПолей.Сортировать("ДлинаПути Возр");
	
	Если ТаблицаПолей.Количество()=0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
		
	ВыбранныеТаблицы=Новый ТаблицаЗначений;
	ВыбранныеТаблицы.Колонки.Добавить("ИмяТаблицы");
	ВыбранныеТаблицы.Колонки.Добавить("КоличествоВыборок",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(2));
	
	ТаблицаСоединений=Новый ТаблицаЗначений;
	ТаблицаСоединений.Колонки.Добавить("ИмяЛевойТаблицы");
	ТаблицаСоединений.Колонки.Добавить("ИмяПравойТаблицы");
	ТаблицаСоединений.Колонки.Добавить("УсловиеСвязи");
	
	ТекстПоля="";
	ТекстОтбор="";
	
	СтрПерваяТаблица=ТаблицаПолей[0];
	
	ТекстВыборки="["+СтрПерваяТаблица.ИмяТаблицы+"] ["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
	ТипыКолонокРезультата = Новый Соответствие;
	
	Для Каждого СтрПоле ИЗ СтрПерваяТаблица.ПоляТаблицы Цикл
		
		ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
		
		Если ТипПолучателя = Неопределено Тогда
			ТипПолучателя = Тип("Строка");
		КонецЕсли;
		
		ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
							
		ТекстПоля=ТекстПоля+","+СтрПоле.Значение+" "+СтрПоле.Представление;
								
	КонецЦикла;
	
	ТекущийОтбор="";
	МассивСоответствий=Новый Массив;
	
	Для Каждого СтрОтбор ИЗ СтрПерваяТаблица.ДанныеОтбора Цикл
				
		Если ТипЗнч(СтрОтбор.Значение)=Тип("Структура") И СтрОтбор.Значение.Свойство("Интервал") Тогда // 
			
			ТекущийОтбор=ПолучитьСтрокуОтбораПоДате(СтрПерваяТаблица.ИмяТаблицы,СтрОтбор.Значение,СтруктураЗапроса);
			
			Если Не ПустаяСтрока(ТекущийОтбор) Тогда
				
				ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ТекущийОтбор+")";
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрОтбор.Значение)=Тип("Соответствие") Тогда
			
			МассивСоответствий.Добавить(СтрОтбор.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСоответствий.Количество()>0 Тогда
		
		ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ПолучитьТекстОтбораПоСписку(СтрПерваяТаблица.ИмяТаблицы,МассивСоответствий,СтруктураЗапроса)+")";
		
	КонецЕсли;
	
	// Пристыковываем таблицы с отбором по inner join
	
	СтрокиСОтбором=ТаблицаПолей.Скопировать(Новый Структура("ЕстьОтбор",Истина));
	СтрокиСОтбором.Сортировать("ДлинаПути Возр");
	
	Для Каждого Строка ИЗ СтрокиСОтбором Цикл
		
		Если Строка.ДлинаПути=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ПОЛЯ ТАБЛИЦЫ
		
		РабочийПсевдоним=ПолучитьРабочийПсевдонимТаблицы(Строка.ИмяТаблицы, ВыбранныеТаблицы);
		
		Для Каждого СтрПоле ИЗ Строка.ПоляТаблицы Цикл
			
			ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
			
			Если ТипПолучателя = Неопределено Тогда
				ТипПолучателя = Тип("Строка");
			КонецЕсли;
			
			ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
										
			ТекстПоля=ТекстПоля+","+СтрПоле.Значение +" "+СтрПоле.Представление;	
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ СОЕДИНЕНИЯ ТАБЛИЦЫ
		
		ИмяЛевойТаблицы="["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
		Для Каждого КлючИЗначение ИЗ Строка.ДанныеСвязаннойТаблицы Цикл
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПравойТаблицы=КлючИЗначение.Ключ;
			
			МассивПутей=ТаблицаСоединений.НайтиСтроки(Новый Структура("ИмяЛевойТаблицы,ИмяПравойТаблицы",ИмяЛевойТаблицы,ИмяПравойТаблицы));
			
			Если МассивПутей.Количество()=0 Тогда
				
				ТекстСоединение="";
				
				Если КлючИЗначение.Ключ="["+Строка.ИмяТаблицы+"]" Тогда
					
					ПсевдонимСоединения=РабочийПсевдоним;
					ИмяТаблицы=Строка.ИмяТаблицы;
					
				Иначе
					
					ИмяТаблицы=Сред(ИмяПравойТаблицы,2,СтрДлина(ИмяПравойТаблицы)-2);
					ПсевдонимСоединения=ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы);
					
				КонецЕсли;
				
				ТекстВыборки="("+ТекстВыборки+" INNER JOIN "+КлючИЗначение.Ключ+" ["+ПсевдонимСоединения+"] ON "+СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,КлючИЗначение.Значение)+")";
				
				НоваяСтрока=ТаблицаСоединений.Добавить();
				НоваяСтрока.ИмяЛевойТаблицы=ИмяЛевойТаблицы;
				НоваяСтрока.ИмяПравойТаблицы=ИмяПравойТаблицы;	
				
			КонецЕсли;
			
			ИмяЛевойТаблицы=ИмяПравойТаблицы;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ОТБОРЫ ТАБЛИЦЫ
		
		МассивСоответствий=Новый Массив;
		
		Для Каждого СтрОтбор ИЗ Строка.ДанныеОтбора Цикл
			
			Если ТипЗнч(СтрОтбор.Значение)=Тип("Структура") И СтрОтбор.Значение.Свойство("Интервал") Тогда // 
				
				ТекущийОтбор=ПолучитьСтрокуОтбораПоДате(РабочийПсевдоним,СтрОтбор.Значение,СтруктураЗапроса);
				
				Если Не ПустаяСтрока(ТекущийОтбор) Тогда
					
					ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ТекущийОтбор+")";
					
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрОтбор.Значение)=Тип("Соответствие") Тогда
				
				МассивСоответствий.Добавить(СтрОтбор.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если МассивСоответствий.Количество()>0 Тогда
			
			ТекстОтбор="("+ТекстОтбор+?(ПустаяСтрока(ТекстОтбор),""," AND ")+ПолучитьТекстОтбораПоСписку(РабочийПсевдоним,МассивСоответствий,СтруктураЗапроса)+")";
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Пристыковываем таблицы без отбора по left join
	
	СтрокиБезОтбора=ТаблицаПолей.Скопировать(Новый Структура("ЕстьОтбор",Ложь));
	СтрокиБезОтбора.Сортировать("ДлинаПути Возр");
	
	Для Каждого Строка ИЗ СтрокиБезОтбора Цикл
		
		Если Строка.ДлинаПути=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ ПОЛЯ ТАБЛИЦЫ
		
		РабочийПсевдоним=ПолучитьРабочийПсевдонимТаблицы(Строка.ИмяТаблицы, ВыбранныеТаблицы);
		
		Для Каждого СтрПоле ИЗ Строка.ПоляТаблицы Цикл
			
			ТипПолучателя = ТипыПолучателей[СтрПоле.Значение];
			
			Если ТипПолучателя = Неопределено Тогда
				ТипПолучателя = Тип("Строка");
			КонецЕсли;
			
			ТипыКолонокРезультата.Вставить(Сред(СтрПоле.Представление, 2, СтрДлина(СтрПоле.Представление) - 2), ТипПолучателя);
										
			ТекстПоля=ТекстПоля+","+СтрПоле.Значение+" "+СтрПоле.Представление;
			
		КонецЦикла;
		
		/////////////////////////////////////////////////////////////////////////////////////
		// ДОБАВЛЯЕМ СОЕДИНЕНИЯ ТАБЛИЦЫ
		
		ИмяЛевойТаблицы="["+СтрПерваяТаблица.ИмяТаблицы+"]";
		
		Для Каждого КлючИЗначение ИЗ Строка.ДанныеСвязаннойТаблицы Цикл
			
			Если КлючИЗначение.Значение.Количество()=0 Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПравойТаблицы=КлючИЗначение.Ключ;
			
			МассивПутей=ТаблицаСоединений.НайтиСтроки(Новый Структура("ИмяЛевойТаблицы,ИмяПравойТаблицы",ИмяЛевойТаблицы,ИмяПравойТаблицы));
			
			Если МассивПутей.Количество()=0 Тогда
				
				ТекстСоединение="";
				
				Если КлючИЗначение.Ключ="["+Строка.ИмяТаблицы+"]" Тогда
					
					ПсевдонимСоединения=РабочийПсевдоним;
					ИмяТаблицы=Строка.ИмяТаблицы;
					
				Иначе
					
					ИмяТаблицы=Сред(ИмяПравойТаблицы,2,СтрДлина(ИмяПравойТаблицы)-2);
					ПсевдонимСоединения=ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы);
					
				КонецЕсли;
				
				ТекстВыборки="("+ТекстВыборки+" LEFT JOIN "+КлючИЗначение.Ключ+" ["+ПсевдонимСоединения+"] ON "+СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,КлючИЗначение.Значение)+")";
				
				НоваяСтрока=ТаблицаСоединений.Добавить();
				НоваяСтрока.ИмяЛевойТаблицы=ИмяЛевойТаблицы;
				НоваяСтрока.ИмяПравойТаблицы=ИмяПравойТаблицы;
				
			КонецЕсли;
			
			ИмяЛевойТаблицы=ИмяПравойТаблицы;
			
		КонецЦикла;
				
	КонецЦикла;
	
	ТекстЗапроса="SELECT "+Сред(ТекстПоля,2)+" FROM "+ТекстВыборки;
		
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		
		ТекстЗапроса=ТекстЗапроса+" WHERE ("+ТекстОтбор+")";
				
	КонецЕсли;
		
	СтруктураЗапроса.Вставить("ТаблицаПолей",ТаблицаПолей);
	
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"[","");
	ТекстЗапроса=СтрЗаменить(ТекстЗапроса,"]","");
	
	Возврат ADO_ПолучитьДанныеИзЗапроса(ТекстЗапроса, СтруктураЗапроса, ТипыКолонокРезультата, ДополнительныеСвойстваИмпорта);
	
КонецФункции // ПолучитьТаблицуДанныхПоЗапросуOracle()

Функция ПолучитьТипДанныхПоля(ТаблицаКолонок,ИмяПоля)
	
	МассивПутей=СтрРазделить(ИмяПоля,".");
	
	ИмяКолонки=СтрЗаменить(СтрЗаменить(МассивПутей[1],"]",""),"[","");
	
	СтрКолонка=ТаблицаКолонок.Найти(ИмяКолонки,"Имя");
	
	Если НЕ СтрКолонка=Неопределено Тогда
		
		Возврат Тип(СтрКолонка.ТипЗначения);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	
КонецФункции // ПолучитьТипДанныхПоля()

Функция ПодготовитьДанныеДляНастройкиЗапроса(СтруктураЗапроса) Экспорт
		
	ИспользуемыеПоля = Новый ТаблицаЗначений;
	ИспользуемыеПоля.Колонки.Добавить("ИмяПоля");
	ИспользуемыеПоля.Колонки.Добавить("ПутьКДанным");
			
	ИспользуемыеПараметры = Новый ТаблицаЗначений;
	ИспользуемыеПараметры.Колонки.Добавить("ИмяПараметра");
	ИспользуемыеПараметры.Колонки.Добавить("ПолеБД");
	ИспользуемыеПараметры.Колонки.Добавить("ЗначениеПараметра");
	ИспользуемыеПараметры.Колонки.Добавить("ВидСравнения");
	ИспользуемыеПараметры.Колонки.Добавить("Вычислять",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ИспользуемыеСчета      = Неопределено;
	ИспользуемыйПланСчетов = Неопределено;
	ИспользуемыеСтатьи     = Неопределено;
	
	ЕстьОбороты = СтрНайти(СтруктураЗапроса.ТекстЗапроса,"&СчетДт")>0 ИЛИ СтрНайти(СтруктураЗапроса.ТекстЗапроса,"ДвиженияССубконто")>0;
	
	Если СтруктураЗапроса.Свойство("СписокСчетов") И СтруктураЗапроса.СписокСчетов.Количество()>0 Тогда
		
		Если ЕстьОбороты Тогда
			
			ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля, "СчетДт.Код","СчетКод");
			ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля, "СчетКт.Код","КоррСчетКод");
			
		Иначе
			
			ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля, "Счет.Код","СчетКод");				
			
		КонецЕсли;
		
	КонецЕсли;
	
	СписокПутей=Новый Массив;
	СписокСинонимов=Новый Массив;
	
	Для Каждого КлючИЗначение ИЗ СтруктураЗапроса.СтруктураПолей Цикл
		
		Для Каждого Элемент Из КлючИЗначение.Значение Цикл
			// В случае, если аналитика внешней ИБ ссылается на несколько аналитик Консолидации
			// необходимо исключить добавление дублей в Выбранные поля Построителя запроса.
			
			СтрокаСиноним=СтрЗаменить(Элемент.Синоним,".","");
			
			Если (НЕ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(Элемент))
				И СписокСинонимов.Найти(СтрокаСиноним)=Неопределено Тогда
				
				ПутьВыбранногоПоля = СтрЗаменить(Элемент.Поле,".Ref",".Ссылка");
				
				РабочийПуть=УправлениеОтчетамиУХ.ПолучитьУникальноеПоле(ПутьВыбранногоПоля,СписокПутей);
				
				ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля,РабочийПуть,СтрокаСиноним);
				
				СписокСинонимов.Добавить(СтрокаСиноним);
				СписокПутей.Добавить(РабочийПуть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаВычисления Из СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
		
		Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			Продолжить;
		КонецЕсли;		
		
		Если СтрокаВычисления.ТипРасчета = "Простой"
			ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда	
			
			СтруктураОтбора  = УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрокаВычисления.УточнениеСпособаОпределения); 
			
			Если ЗначениеЗаполнено(СтруктураОтбора)	 Тогда
				
				Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
					
					СтруктураСправочники = Неопределено;
					МассивОтбора = Новый Массив;
					
					Если СтруктураОтбора.Свойство("_Справочники", СтруктураСправочники) Тогда
						
						СтруктураОтбора.Свойство("МассивОтбора", МассивОтбора);						
						
						НоваяСтрока						= ИспользуемыеПараметры.Добавить();
						НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
						НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
						НоваяСтрока.ЗначениеПараметра   = ПолучитьСтруктуруОтбора(СтруктураСправочники.СправочникБД,МассивОтбора,СтруктураЗапроса.ВИБ.ВИБ);
						
						Если НЕ СтруктураЗапроса.ПроизвольныйЗапрос Тогда	
							
							Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
								
								Если МассивОтбора.Количество()=0 И НоваяСтрока.ЗначениеПараметра.Количество()=1 Тогда
									
									НоваяСтрока.ВидСравнения="NotEqual";
									
								Иначе
									
									НоваяСтрока.ВидСравнения="NotInList";
									
								КонецЕсли;
								
							ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
								
								НоваяСтрока.ВидСравнения="InListByHierarchy";
								
							ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
								
								НоваяСтрока.ВидСравнения="NotInListByHierarchy";
								
							Иначе	
								
								Если МассивОтбора.Количество()<=1 И НоваяСтрока.ЗначениеПараметра.Количество()=1 Тогда
									
									Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
										
										ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
										НоваяСтрока.ВидСравнения="NotEqual";
										
									Иначе
										
										НоваяСтрока.ВидСравнения="Equal";
										
									КонецЕсли;
									
								Иначе
									
									Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
										
										НоваяСтрока.ВидСравнения="NotInList";
										
									Иначе
										
										НоваяСтрока.ВидСравнения="InList";
										
									КонецЕсли;
									
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						НоваяСтрока						= ИспользуемыеПараметры.Добавить();
						НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
						НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
						НоваяСтрока.ЗначениеПараметра   = СтруктураОтбора;
						
						Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
							НоваяСтрока.ВидСравнения="NotEqual";
						Иначе
							НоваяСтрока.ВидСравнения="Equal";
						КонецЕсли;
						
					КонецЕсли;
					
							
			ИначеЕсли ТипЗнч(СтруктураОтбора) = Тип("СписокЗначений") Тогда
				
				НоваяСтрока						= ИспользуемыеПараметры.Добавить();
				НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
				НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
				НоваяСтрока.ЗначениеПараметра   = СтруктураОтбора;
				
				Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
					НоваяСтрока.ВидСравнения="NotInList";
				ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
					НоваяСтрока.ВидСравнения="NotInListByHierarchy";
				ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
					НоваяСтрока.ВидСравнения="InListByHierarchy";
				Иначе
					НоваяСтрока.ВидСравнения="InList";
				КонецЕсли;
					
			Иначе
				
				НоваяСтрока						= ИспользуемыеПараметры.Добавить();
				НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
				НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
				НоваяСтрока.ЗначениеПараметра   = СтруктураОтбора;
				
				Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
					НоваяСтрока.ВидСравнения="NotEqual";
				Иначе
					НоваяСтрока.ВидСравнения="Equal";
				КонецЕсли;
						
			КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрНайти(СтрокаВычисления.ТипРасчета,"Периоды") <> 0
			ИЛИ СтрНайти(СтрокаВычисления.ТипРасчета,"Год") <> 0 Тогда
			
			Если СтрокаВычисления.ИзКонтекста Тогда
				
				ЗначениеПараметра=СтрокаВычисления.ЗначениеИзКонтекста;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаВычисления.ЗначениеДляПроверки) Тогда
					ЗначениеПараметра='00010101000000';
					
				Иначе	
					
					ЗначениеПараметра = УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтрокаВычисления.ЗначениеДляПроверки,СтрокаВычисления.ТипРасчета
					, СтрокаВычисления.УточнениеСпособаОпределения);		
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока						= ИспользуемыеПараметры.Добавить();
			НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
			НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
			НоваяСтрока.ЗначениеПараметра   = ЗначениеПараметра;
			
			Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
				НоваяСтрока.ВидСравнения="NotEqual";
			Иначе
				НоваяСтрока.ВидСравнения="Equal";
			КонецЕсли;
			
		ИначеЕсли СтрокаВычисления.ТипРасчета = "ПоКоду" Тогда
			
			Если СтруктураЗапроса.ПроизвольныйЗапрос Тогда
				
				УточнениеНазначения=СтрокаВычисления.УточнениеСпособаОпределения;
				
				Если ПустаяСтрока(СтрокаВычисления.ЗначениеДляПроверки) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока						= ИспользуемыеПараметры.Добавить();
				НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
				НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
				
				// В случае расчета по коду, в поле УточнениеЗначения хранится Поле реквизита, который
				// надо передать в запрос
				
				Если ТипЗнч(УточнениеНазначения)=Тип("Структура") Тогда
					
					НоваяСтрока.ЗначениеПараметра=ПолучитьСтруктуруОтбораПоДаннымКонсолидации(СтрокаВЫчисления.ЗначениеДляПроверки,УточнениеНазначения,СтруктураЗапроса.ВИБ.ВИБ);
					
				ИначеЕсли ТипЗнч(СтрокаВычисления.УточнениеСпособаОпределения) <> Тип("Строка") Тогда
					
					НоваяСтрока.ЗначениеПараметра=СтрокаВычисления.ЗначениеДляПроверки;
					
				Иначе
					Попытка
						ЗначениеПараметра = УправлениеОтчетамиУХ.ПолучитьЗначениеРеквизитаИзОбъектаСправочника(СтрокаВычисления.ЗначениеДляПроверки
						, СтрокаВычисления.УточнениеСпособаОпределения);
					Исключение
						
						ИспользуемыеПараметры.Удалить(НоваяСтрока);
						
						Продолжить;
						
					КонецПопытки;
					
					НоваяСтрока.ЗначениеПараметра=ЗначениеПараметра;
					
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаВычисления.ЗначениеДляПроверки) Тогда
				ТекстСообщения = НСтр("ru = 'Для параметра %ИмяПараметра% не задано значение по умолчанию. Параметр игнорируется.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(СтрокаВычисления.ИмяПараметра));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаВычисления.УточнениеСпособаОпределения) Тогда
				
				СтруктураОтбора=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрокаВычисления.УточнениеСпособаОпределения);
				
				Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
					
					НоваяСтрока						= ИспользуемыеПараметры.Добавить();
					НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
					НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
					НоваяСтрока.ЗначениеПараметра=ПолучитьСтруктуруОтбораПоДаннымКонсолидации(СтрокаВЫчисления.ЗначениеДляПроверки,СтруктураОтбора,СтруктураЗапроса.ВИБ.ВИБ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаВычисления.ТипРасчета = "РеквизитАналитики" Тогда
						
			РеквизитАналитики=СтрокаВычисления.УточнениеСпособаОпределения;
			ЗначениеРеквизита=УправлениеОтчетамиУХ.ПолучитьЗначениеРеквизитаИзОбъектаСправочника(СтрокаВЫчисления.ЗначениеДляПроверки, РеквизитАналитики);
			
			НоваяСтрока						= ИспользуемыеПараметры.Добавить();
			НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
			НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
			НоваяСтрока.ЗначениеПараметра	= ЗначениеРеквизита;
			
			Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
				
				НоваяСтрока.ВидСравнения="NotEqual";
				
			Иначе
				НоваяСтрока.ВидСравнения="Equal";
				
			КонецЕсли;
			
		ИначеЕсли СтрокаВычисления.ТипРасчета = "Функция" Тогда
			
			ЗначениеПараметра = "";
			
			Если СтрокаВычисления.ИзКонтекста Тогда
				
				ЗначениеПараметра=СтрокаВычисления.ЗначениеИзКонтекста;
				
			Иначе
				
				ТекстФункции=СтрокаВычисления.УточнениеСпособаОпределения;
				
				Если ПустаяСтрока(ТекстФункции) Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					Выполнить(ТекстФункции);
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЕсли;
			
			Если ПустаяСтрока(ЗначениеПараметра) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока						= ИспользуемыеПараметры.Добавить();
			НоваяСтрока.ИмяПараметра		= СтрокаВычисления.ИмяПараметра;
			НоваяСтрока.ПолеБД				= СтрокаВычисления.ПолеБД;
						
			Если ТипЗнч(ЗначениеПараметра)= Тип("COMОбъект") Тогда
				
				НоваяСтрока.ЗначениеПараметра	= ТекстФункции;
				НоваяСтрока.Вычислять			= Истина;
				
			Иначе	
				
				НоваяСтрока.ЗначениеПараметра	= ЗначениеПараметра;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если СтруктураЗапроса.Свойство("СписокСчетов") Тогда
				
		Если СтруктураЗапроса.Свойство("СписокКоррСчетов") Тогда
			
			НоваяСтрока						= ИспользуемыеПараметры.Добавить();
			НоваяСтрока.ИмяПараметра		= "СчетДт";
			НоваяСтрока.ЗначениеПараметра	= СтруктураЗапроса.Списоксчетов;
			
			НоваяСтрока						= ИспользуемыеПараметры.Добавить();
			НоваяСтрока.ИмяПараметра		= "СчетКт";
			НоваяСтрока.ЗначениеПараметра	= СтруктураЗапроса.СписокКоррСчетов;
			
		Иначе
			
			НоваяСтрока						= ИспользуемыеПараметры.Добавить();
			НоваяСтрока.ИмяПараметра		= "Счет";
			НоваяСтрока.ЗначениеПараметра	= СтруктураЗапроса.Списоксчетов;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураЗапроса.Свойство("ТабСтатьиСписок") Тогда
		
		НоваяСтрока						= ИспользуемыеПараметры.Добавить();
		НоваяСтрока.ИмяПараметра		= "Статья";
		НоваяСтрока.ЗначениеПараметра	= СтруктураЗапроса.СписокСтатей;
				
	КонецЕсли;
	
	ДанныеЗапроса=Новый Структура;
	ДанныеЗапроса.Вставить("ТекстЗапроса",			СтруктураЗапроса.ТекстЗапроса);
	ДанныеЗапроса.Вставить("ИспользуемыеПараметры",	ИспользуемыеПараметры);
	ДанныеЗапроса.Вставить("ИспользуемыеПоля",		ИспользуемыеПоля);
	ДанныеЗапроса.Вставить("ПроизвольныйЗапрос",	СтруктураЗапроса.ПроизвольныйЗапрос);
	
	Возврат ДанныеЗапроса;
		
КонецФункции // ПодготовитьДанныеДляНастройкиЗапроса()

Функция НастроитьОбъектЗапрос(СтруктураЗапроса, ИспользованиеWS = Ложь, Прокси = Неопределено) Экспорт
		
	Если НЕ ИспользованиеWS Тогда
		База = СтруктураЗапроса.База;
	КонецЕсли;
	
	ВИБ  = СтруктураЗапроса.ВИБ;
	ТекстЗапроса= СтруктураЗапроса.ТекстЗапроса;
	ТаблицаВычисленияПараметров= СтруктураЗапроса.ТаблицаВычисленияПараметров;
	ПроизвольныйЗапрос= СтруктураЗапроса.ПроизвольныйЗапрос;
	
	Если НЕ ИспользованиеWS Тогда
		ОбъектЗапрос=СтруктураЗапроса.ОбъектЗапрос;
	Иначе
		
		ИспользуемыеПоля = Новый ТаблицаЗначений;
		ИспользуемыеПоля.Колонки.Добавить("ИмяПоля");
		ИспользуемыеПоля.Колонки.Добавить("ПутьКДанным");
		
		ИспользуемыеОтборы = Новый ТаблицаЗначений;
		ИспользуемыеОтборы.Колонки.Добавить("ИмяОтбора");
		ИспользуемыеОтборы.Колонки.Добавить("ТипОтбора");
		ИспользуемыеОтборы.Колонки.Добавить("Значение");
		ИспользуемыеОтборы.Колонки.Добавить("Рассчитывается");
		
		ИспользуемыеПараметры = Новый ТаблицаЗначений;
		ИспользуемыеПараметры.Колонки.Добавить("ИмяПараметра");
		ИспользуемыеПараметры.Колонки.Добавить("ЗначениеПараметра");
		
		ИспользуемыеСчета      = Неопределено;
		ИспользуемыйПланСчетов = Неопределено;
		ИспользуемыеСтатьи     = Неопределено;
		
	КонецЕсли;
	
	ЕстьОбороты = СтрНайти(ТекстЗапроса,"&СчетДт")>0 ИЛИ СтрНайти(ТекстЗапроса,"ДвиженияССубконто")>0;
	
	Если НЕ ПроизвольныйЗапрос Тогда
		
		Если НЕ ИспользованиеWS Тогда
			ОбъектЗапрос.Text = ТекстЗапроса;
			ОбъектЗапрос.FillSettings();
			ОбъектЗапрос.SelectedFields.Clear();
			ОбъектЗапрос.Parameters.Clear();
					
			ОбъектЗапрос.PresentationAdding=База.PresentationAdditionType.Add;
							
			// Очистим отбор
			ОтборКоличество = ОбъектЗапрос.Filter.Count();
			Для Н = 1 По ОтборКоличество Цикл
				ОбъектЗапрос.Filter.Delete(ОтборКоличество - Н);
			КонецЦикла;
			
		КонецЕсли;
		
		Если СтруктураЗапроса.Свойство("СписокСчетов") И СтруктураЗапроса.СписокСчетов.Количество()>0 Тогда
			
			Если ЕстьОбороты Тогда
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.SelectedFields.Add("СчетДт.Код","СчетКод");
					ОбъектЗапрос.SelectedFields.Add("СчетКт.Код","КоррСчетКод");
				Иначе
					ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля, "СчетДт.Код","СчетКод");
					ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля, "СчетКт.Код","КоррСчетКод");
				КонецЕсли;
				
			Иначе
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.SelectedFields.Add("Счет.Код","СчетКод");
				Иначе
					ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля, "Счет.Код","СчетКод");
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
		СписокПутей=Новый Массив;
		СписокСинонимов=Новый Массив;
		
		Для Каждого КлючИЗначение ИЗ СтруктураЗапроса.СтруктураПолей Цикл
			
			Для Каждого Элемент Из КлючИЗначение.Значение Цикл
				// В случае, если аналитика внешней ИБ ссылается на несколько аналитик Консолидации
				// необходимо исключить добавление дублей в Выбранные поля Построителя запроса.
				
				СтрокаСиноним=СтрЗаменить(Элемент.Синоним,".","");
								
				Если (НЕ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(Элемент))
					И СписокСинонимов.Найти(СтрокаСиноним)=Неопределено Тогда
					
					ПутьВыбранногоПоля = СтрЗаменить(Элемент.Поле,".Ref",".Ссылка");
					
					РабочийПуть=УправлениеОтчетамиУХ.ПолучитьУникальноеПоле(ПутьВыбранногоПоля,СписокПутей);
					
					Если НЕ ИспользованиеWS Тогда
						ОбъектЗапрос.SelectedFields.Add(РабочийПуть,СтрокаСиноним);
					Иначе
						ДобавитьПолеВТаблицуПолей(ИспользуемыеПоля,РабочийПуть,СтрокаСиноним);
					КонецЕсли;
					
					СписокСинонимов.Добавить(СтрокаСиноним);
					СписокПутей.Добавить(РабочийПуть);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		МассивПараметров=Новый Массив;
		
		Если НЕ ИспользованиеWS Тогда
			
			ТекЗапрос = ОбъектЗапрос.GetQuery();
			
			Если НЕ ПустаяСтрока(ТекЗапрос.Text) Тогда
				
				ПараметрыЗапроса=ОбъектЗапрос.GetQuery().FindParameters();
				Для Каждого Параметр ИЗ ПараметрыЗапроса Цикл
					
					МассивПараметров.Добавить(Параметр.Name);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Каждого СтрокаВычисления Из ТаблицаВычисленияПараметров Цикл
		
		Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			Продолжить;
		КонецЕсли;		
		
		Если СтрокаВычисления.ТипРасчета = "Простой"
			ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда	
			
			СтруктураОтбора  = УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрокаВычисления.УточнениеСпособаОпределения); 
						
			Если ЗначениеЗаполнено(СтруктураОтбора)	 Тогда
				
				Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
					СтруктураСправочники = Неопределено;
					МассивОтбора = Новый Массив;
					Если СтруктураОтбора.Свойство("_Справочники", СтруктураСправочники) Тогда
						СтруктураОтбора.Свойство("МассивОтбора", МассивОтбора);						
						
						Если НЕ ИспользованиеWS Тогда
							
							ЗначениеПараметра=ПолучитьОтборИзВИБ(ВИБ,База, СтруктураСправочники.СправочникБД, МассивОтбора);
							
							Если ПроизвольныйЗапрос Тогда
								
								Если ЗначениеПараметра.Count()=1 Тогда
									
									ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра.Get(0).Value);
									
								Иначе
									
									ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра);
									
								КонецЕсли;
								
							ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
								
								Если ЗначениеПараметра.Count()=1 Тогда
									
									ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра.Get(0).Value);
									
								Иначе
									
									ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра);
									
								КонецЕсли;
								
							Иначе	
								
								Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
								
								Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
									Если МассивОтбора.Количество()=0 И ЗначениеПараметра.Count()=1 Тогда
										Отбор.ComparisonType=База.ComparisonType.NotEqual;
										Отбор.Value          = ЗначениеПараметра.Get(0).Value;
									Иначе
										Отбор.ComparisonType = База.ComparisonType.NotInList;
										Отбор.Value          = ЗначениеПараметра;
									КонецЕсли;
									
								ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
									
									Отбор.ComparisonType = База.ComparisonType.InListByHierarchy;
									Отбор.Value          = ЗначениеПараметра;
									
								ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
									
									Отбор.ComparisonType = База.ComparisonType.NotInListByHierarchy;
									Отбор.Value          = ЗначениеПараметра;

								Иначе	
									
									Если МассивОтбора.Количество()<=1 И ЗначениеПараметра.Count()=1 Тогда
										
										Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
											ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
											Отбор.ComparisonType=База.ComparisonType.NotEqual;
										Иначе
											Отбор.ComparisonType=База.ComparisonType.Equal;
										КонецЕсли;
										
										Отбор.Value          = ЗначениеПараметра.Get(0).Value;
										
									Иначе
										
										Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
											Отбор.ComparisonType = База.ComparisonType.NotInList;
										ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда 
											Отбор.ComparisonType = База.ComparisonType.NotInListByHierarchy;
										ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда 
											Отбор.ComparisonType = База.ComparisonType.InListByHierarchy;
										Иначе
											Отбор.ComparisonType = База.ComparisonType.InList;
										КонецЕсли;
										
										Отбор.Value          = ЗначениеПараметра;
										
									КонецЕсли;
									
								КонецЕсли;
								
								Отбор.Use            = Истина;
								
							КонецЕсли;
							
						Иначе
							
							Если НЕ ПроизвольныйЗапрос Тогда
								НовыйОтбор = ИспользуемыеОтборы.Добавить();
								НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
								НовыйОтбор.Значение       = СтруктураОтбора;
								
								Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
									НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
								Иначе		
									НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
								КонецЕсли;
								
								НовыйОтбор.Рассчитывается = Истина;
								
								Если СтрокаВычисления.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
									Если МассивОтбора.Количество() > 0 Тогда
										НовыйОтбор.ТипОтбора      = ВидСравнения.НеВСпискеПоИерархии;
									Иначе
										НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
									КонецЕсли;
								Иначе
									Если МассивОтбора.Количество() > 0 Тогда
										
										Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда	
											НовыйОтбор.ТипОтбора = ВидСравнения.НеВСпискеПоИерархии;	
										Иначе
											НовыйОтбор.ТипОтбора = ВидСравнения.ВСпискеПоИерархии;
										КонецЕсли;
										
									Иначе
										
										Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
											НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
										Иначе		
											НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
										КонецЕсли;
									КонецЕсли;
									
								КонецЕсли;
								
							Иначе
								НовыйПараметр = ИспользуемыеПараметры.Добавить();
								НовыйПараметр.Имя         = СтрокаВычисления.ИмяПараметра;
								НовыйПараметр.Значение    = СтруктураОтбора;
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						Если ПроизвольныйЗапрос Тогда
							
							Если НЕ ИспользованиеWS Тогда
								ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, СтруктураОтбора);
							Иначе
								НовыйПараметр = ИспользуемыеПараметры.Добавить();
								НовыйПараметр.Имя         = СтрокаВычисления.ИмяПараметра;
								НовыйПараметр.Значение    = СтруктураОтбора;
							КонецЕсли;
							
						ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
							
							Если НЕ ИспользованиеWS Тогда
								ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, СтруктураОтбора);	
							Иначе
								НовыйПараметр = ИспользуемыеПараметры.Добавить();
								НовыйПараметр.Имя         = СтрокаВычисления.ИмяПараметра;
								НовыйПараметр.Значение    = СтруктураОтбора;
							КонецЕсли;
							
						Иначе
							
							Если НЕ ИспользованиеWS Тогда
								Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
								
								Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
									Отбор.ComparisonType = База.ComparisonType.NotEqual;
								Иначе
									Отбор.ComparisonType = База.ComparisonType.Equal;
								КонецЕсли;
								
								Отбор.Value          = СтруктураОтбора;
								Отбор.Use            = Истина;
							Иначе
								НовыйОтбор = ИспользуемыеОтборы.Добавить();
								НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
								НовыйОтбор.Значение       = СтруктураОтбора;
								
								Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
									НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
								Иначе
									НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
								КонецЕсли;
								
								НовыйОтбор.Рассчитывается = Ложь;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(СтруктураОтбора) = Тип("СписокЗначений") Тогда
					
					Если НЕ ИспользованиеWS Тогда
						СписокЗначенийВИБ = База.NewObject("СписокЗначений");
						
						Для Каждого Элемент Из СтруктураОтбора Цикл
							СписокЗначенийВИБ.Add(Элемент.Значение);
						КонецЦикла;
					КонецЕсли;
					
					Если ПроизвольныйЗапрос Тогда
						
						Если НЕ ИспользованиеWS Тогда
							ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, СписокЗначенийВИБ);
						Иначе
							НовыйПараметр = ИспользуемыеПараметры.Добавить();
							НовыйПараметр.Имя         = СтрокаВычисления.ИмяПараметра;
							НовыйПараметр.Значение    = СтруктураОтбора;
						КонецЕсли;
						
					ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
						
						Если НЕ ИспользованиеWS Тогда
							ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, СписокЗначенийВИБ);
						Иначе
							НовыйПараметр = ИспользуемыеПараметры.Добавить();
							НовыйПараметр.Имя         = СтрокаВычисления.ИмяПараметра;
							НовыйПараметр.Значение    = СтруктураОтбора;
						КонецЕсли;
						
					Иначе
						
						Если НЕ ИспользованиеWS Тогда
							
							Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
							
							Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
								Отбор.ComparisonType = База.ComparisonType.NotInList;
							ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
								Отбор.ComparisonType = База.ComparisonType.NotInListByHierarchy;
							ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
								Отбор.ComparisonType = База.ComparisonType.InListByHierarchy;
							Иначе
								Отбор.ComparisonType = База.ComparisonType.InList;
							КонецЕсли;
							
							Отбор.Value          = СписокЗначенийВИБ;
							Отбор.Use            = Истина;
							
						Иначе
							
							НовыйОтбор = ИспользуемыеОтборы.Добавить();
							НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
							НовыйОтбор.Значение       = СтруктураОтбора;
							
							Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
								ИЛИ СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда	
								НовыйОтбор.ТипОтбора = ВидСравнения.НеВСпискеПоИерархии;	
							Иначе
								НовыйОтбор.ТипОтбора = ВидСравнения.ВСпискеПоИерархии;
							КонецЕсли;
							
							НовыйОтбор.Рассчитывается = Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					
					Если ПроизвольныйЗапрос Тогда
						Если НЕ ИспользованиеWS Тогда
							ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, СтруктураОтбора);
						Иначе
							НовыйПараметр          = ИспользуемыеПараметры.Добавить();
							НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
							НовыйПараметр.Значение = СтруктураОтбора;
						КонецЕсли;
						
					ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
						
						Если НЕ ИспользованиеWS Тогда
							ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, СтруктураОтбора);
						Иначе
							НовыйПараметр          = ИспользуемыеПараметры.Добавить();
							НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
							НовыйПараметр.Значение = СтруктураОтбора;
						КонецЕсли;
						
					Иначе
						
						Если НЕ ИспользованиеWS Тогда
							
							Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
							
							Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
								Отбор.ComparisonType = База.ComparisonType.NotEqual;
							Иначе
								Отбор.ComparisonType = База.ComparisonType.Equal;
							КонецЕсли;
							Отбор.Value          = СтруктураОтбора;
							Отбор.Use            = Истина;
							
						Иначе
							
							НовыйОтбор = ИспользуемыеОтборы.Добавить();
							НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
							НовыйОтбор.Значение       = СтруктураОтбора;
							
							Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
								НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
							Иначе
								НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
							КонецЕсли;
							
							НовыйОтбор.Рассчитывается = Ложь;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрНайти(СтрокаВычисления.ТипРасчета,"Периоды") <> 0
			ИЛИ СтрНайти(СтрокаВычисления.ТипРасчета,"Год") <> 0 Тогда
			
			Если СтрокаВычисления.ИзКонтекста Тогда
				
				ЗначениеПараметра=СтрокаВычисления.ЗначениеИзКонтекста;
				
			Иначе
				
				Если НЕ ЗначениеЗаполнено(СтрокаВычисления.ЗначениеДляПроверки) Тогда
					ЗначениеПараметра='00010101000000';
					
				Иначе	
					
					ЗначениеПараметра = УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтрокаВычисления.ЗначениеДляПроверки,СтрокаВычисления.ТипРасчета
					, СтрокаВычисления.УточнениеСпособаОпределения);		
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПроизвольныйЗапрос Тогда 
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра,ЗначениеПараметра);
				Иначе
					НовыйПараметр          = ИспользуемыеПараметры.Добавить();
					НовыйПараметр.ИмяПараметра      = СтрокаВычисления.ИмяПараметра;
					НовыйПараметр.ЗначениеПараметра = ЗначениеПараметра;
				КонецЕсли;
				
			ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра);
				Иначе
					НовыйПараметр          = ИспользуемыеПараметры.Добавить();
					НовыйПараметр.ИмяПараметра      = СтрокаВычисления.ИмяПараметра;
					НовыйПараметр.ЗначениеПараметра = ЗначениеПараметра;
				КонецЕсли;
				
			Иначе
				
				Если НЕ ИспользованиеWS Тогда
					
					Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
					
					Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
						Отбор.ComparisonType = База.ComparisonType.NotEqual;
					Иначе
						Отбор.ComparisonType = База.ComparisonType.Equal;
					КонецЕсли;
					
					Отбор.Value          = ЗначениеПараметра;
					Отбор.Use            = Истина;
					
				Иначе
					
					НовыйОтбор = ИспользуемыеОтборы.Добавить();
					НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
					НовыйОтбор.Значение       = ЗначениеПараметра;
					
					Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
						НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
					Иначе
						НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
					КонецЕсли;
					
					НовыйОтбор.Рассчитывается = Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаВычисления.ТипРасчета = "ПоКоду" Тогда
			
			Если ПроизвольныйЗапрос Тогда
				
				УточнениеНазначения=СтрокаВычисления.УточнениеСпособаОпределения;
				
				Если ПустаяСтрока(СтрокаВычисления.ЗначениеДляПроверки) Тогда
					Продолжить;
				КонецЕсли;
				
				// В случае расчета по коду, в поле УточнениеЗначения хранится Поле реквизита, который
				// надо передать в запрос
				
				Если ТипЗнч(УточнениеНазначения)=Тип("Структура") Тогда
					
					Если ИспользованиеWS Тогда
						
						НовыйПараметр          = ИспользуемыеПараметры.Добавить();
						НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
						НовыйПараметр.Значение = УточнениеНазначения;
						
					Иначе
						
						СписокЗначений=ПолучитьОтборПоДаннымКонсолидации(ВИБ, База, ОбъектЗапрос, СтрокаВычисления.ИмяПараметра, 
											СтрокаВЫчисления.ЗначениеДляПроверки, УточнениеНазначения);
						
						Если СписокЗначений.Count()=0 Тогда
							
							Если УточнениеНазначения.Свойство("_Справочники") Тогда
								
								ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра,База.Catalogs[СтрЗаменить(УточнениеНазначения["_Справочники"].СправочникБД,"Справочник.","")].EmptyRef());					
								
							ИначеЕсли УточнениеНазначения.Свойство("_Перечисление") Тогда
								
								ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра,База.Enums[СтрЗаменить(УточнениеНазначения["_Перечисление"],"Перечисление.","")].EmptyRef());
								
							КонецЕсли;
							
						ИначеЕсли СписокЗначений.Count()=1 Тогда
							
							ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, СписокЗначений.Get(0).Value);
							
						Иначе
							
							ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, СписокЗначений);
							
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ТипЗнч(СтрокаВычисления.УточнениеСпособаОпределения) <> Тип("Строка") Тогда
					ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, СтрокаВычисления.ЗначениеДляПроверки);
				Иначе
					Попытка
						ЗначениеПараметра = УправлениеОтчетамиУХ.ПолучитьЗначениеРеквизитаИзОбъектаСправочника(СтрокаВычисления.ЗначениеДляПроверки
						, СтрокаВычисления.УточнениеСпособаОпределения);
					Исключение
						Продолжить;
					КонецПопытки;
					
					Если НЕ ИспользованиеWS Тогда
						ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра);
					Иначе
						НовыйПараметр          = ИспользуемыеПараметры.Добавить();
						НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
						НовыйПараметр.Значение = ЗначениеПараметра;
					КонецЕсли;
				КонецЕсли;
				
				Продолжить;
				
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаВычисления.ЗначениеДляПроверки) Тогда
				ТекстСообщения = НСтр("ru = 'Для параметра %ИмяПараметра% не задано значение по умолчанию. Параметр игнорируется.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(СтрокаВычисления.ИмяПараметра));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(СтрокаВычисления.УточнениеСпособаОпределения) Тогда
								
				СтруктураОтбора=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрокаВычисления.УточнениеСпособаОпределения);
				
				Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
					
					Если НЕ ИспользованиеWS Тогда
						
						СписокЗначений=ПолучитьОтборПоДаннымКонсолидации(ВИБ,База, ОбъектЗапрос, СтрокаВычисления.ИмяПараметра, 
								СтрокаВЫчисления.ЗначениеДляПроверки, СтруктураОтбора);
						
						Если НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
							
							Если СписокЗначений.Count()=1 Тогда
								
								ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, СписокЗначений.Get(0).Value);
								
							Иначе
								
								ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, СписокЗначений);
								
							КонецЕсли;
							
						ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ПолеБД)=Неопределено Тогда
							
							Если СписокЗначений.Count()=1 Тогда
								
								ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ПолеБД, СписокЗначений.Get(0).Value);
								
							Иначе
								
								ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ПолеБД, СписокЗначений);
								
							КонецЕсли;
								
						Иначе
							
							Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
							
							Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда
								Отбор.ComparisonType = База.ComparisonType.NotInList;
							ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
								Отбор.ComparisonType = База.ComparisonType.NotInListByHierarchy;
							ИначеЕсли СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
								Отбор.ComparisonType = База.ComparisonType.InListByHierarchy;
							Иначе
								Отбор.ComparisonType = База.ComparisonType.InList;
							КонецЕсли;
							
							Отбор.Value          = СписокЗначений;
							Отбор.Use            = Истина;
							
						КонецЕсли;
						
					Иначе
						
						Если ЗначениеЗаполнено(СтрокаВычисления.ЗначениеДляПроверки) И СтруктураОтбора.Свойство("_Справочники") Тогда
							
							ЗначениеОтбора = Новый Массив;
							ОсновнаяСтруктура = Новый Структура("_Справочник", СтруктураОтбора._Справочники.СправочникБД);
							СтруктураОтбораДляСервиса = Новый Структура;
							
							Для Каждого КлючИЗначение Из СтруктураОТбора ЦИкл
								Если НЕ КлючИЗначение.Ключ = "_Справочники" Тогда
									СтруктураОтбораДляСервиса.Вставить(КлючИЗначение.Ключ,ПолучитьЗначениеРеквизитаДляОтбора(СтрокаВычисления.ЗначениеДляПроверки,КлючИЗначение.Значение,СтруктураОтбора._Справочники.СправочникКонсолидации));	
								КонецЕсли;
							КонецЦикла;
							
							ЗначениеОтбора.Добавить(СтруктураОтбораДляСервиса);
							ОсновнаяСтруктура.Вставить("МассивОтбора", ЗначениеОтбора);
							
						Иначе
							ЗначениеОтбора = NULL;
						КонецЕсли;
						
						НовыйОтбор = ИспользуемыеОтборы.Добавить();
						НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
						НовыйОтбор.Значение       = ОсновнаяСтруктура;
						
						Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
							НовыйОтбор.ТипОтбора      = ВидСравнения.НеВСпискеПоИерархии;
						Иначе
							НовыйОтбор.ТипОтбора      = ВидСравнения.ВСпискеПоИерархии;
						КонецЕсли;
						
						НовыйОтбор.Рассчитывается = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли СтрокаВычисления.ТипРасчета = "РеквизитАналитики" Тогда
			
			РеквизитАналитики=СтрокаВычисления.УточнениеСпособаОпределения;
			ЗначениеРеквизита=УправлениеОтчетамиУХ.ПолучитьЗначениеРеквизитаИзОбъектаСправочника(СтрокаВЫчисления.ЗначениеДляПроверки, РеквизитАналитики);
			
			Если ПроизвольныйЗапрос Тогда
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра, ЗначениеРеквизита);
				Иначе
					НовыйПараметр          = ИспользуемыеПараметры.Добавить();
					НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
					НовыйПараметр.Значение = ЗначениеРеквизита;
				КонецЕсли;
				
			ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, ЗначениеРеквизита);	
				Иначе
					НовыйПараметр          = ИспользуемыеПараметры.Добавить();
					НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
					НовыйПараметр.Значение = ЗначениеРеквизита;
				КонецЕсли;
				
			Иначе
				Если НЕ ИспользованиеWS Тогда
					
					Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
					
					Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
						Отбор.ComparisonType = База.ComparisonType.NotEqual;
					Иначе
						Отбор.ComparisonType = База.ComparisonType.Equal;
					КонецЕсли;
					
					Отбор.Value          = ЗначениеРеквизита;
					Отбор.Use            = Истина;
					
				Иначе
					
					НовыйОтбор = ИспользуемыеОтборы.Добавить();
					НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
					НовыйОтбор.Значение       = ЗначениеРеквизита;
					
					Если СтрокаВычисления.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
						НовыйОтбор.ТипОтбора      = ВидСравнения.НеРавно;
					Иначе
						НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
					КонецЕсли;
					
					НовыйОтбор.Рассчитывается = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли СтрокаВычисления.ТипРасчета = "Функция" Тогда
			
			мЗначениеПараметра = "";
			
			Если СтрокаВычисления.ИзКонтекста Тогда
				
				мЗначениеПараметра=СтрокаВычисления.ЗначениеИзКонтекста;
				
			Иначе
				
				ТекстФункции=СтрокаВычисления.УточнениеСпособаОпределения;
				
				Если ПустаяСтрока(ТекстФункции) Тогда
					Продолжить;
				КонецЕсли;
				
				Попытка
					Выполнить(ТекстФункции);
				Исключение
					Продолжить;
				КонецПопытки;
				
			КонецЕсли;
			
			Если ПустаяСтрока(мЗначениеПараметра) Тогда
				Продолжить;
			КонецЕсли;
			
			Если ПроизвольныйЗапрос Тогда 
				
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.SetParameter(СтрокаВычисления.ИмяПараметра,мЗначениеПараметра);
				Иначе
					НовыйПараметр          = ИспользуемыеПараметры.Добавить();
					НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
					НовыйПараметр.Значение = мЗначениеПараметра;
				КонецЕсли;
				
			ИначеЕсли НЕ МассивПараметров.Найти(СтрокаВычисления.ИмяПараметра)=Неопределено Тогда
				Если НЕ ИспользованиеWS Тогда
					ОбъектЗапрос.Parameters.Insert(СтрокаВычисления.ИмяПараметра, мЗначениеПараметра);	
				Иначе
					НовыйПараметр          = ИспользуемыеПараметры.Добавить();
					НовыйПараметр.Имя      = СтрокаВычисления.ИмяПараметра;
					НовыйПараметр.Значение = мЗначениеПараметра;
				КонецЕсли;
				
			Иначе
				
				Если НЕ ИспользованиеWS Тогда
					Отбор = ОбъектЗапрос.Filter.Add(СтрокаВычисления.ИмяПараметра);
					
					Если РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,мЗначениеПараметра)=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,База.NewObject("СписокЗначений")) Тогда
						Отбор.ComparisonType = База.ComparisonType.InList;
					Иначе
						Отбор.ComparisonType = База.ComparisonType.Equal;
					КонецЕсли;
					
					Отбор.Value          = мЗначениеПараметра;
					Отбор.Use            = Истина;
				Иначе
					НовыйОтбор = ИспользуемыеОтборы.Добавить();
					НовыйОтбор.ИмяОтбора      = СтрокаВычисления.ИмяПараметра;
					НовыйОтбор.Значение       = мЗначениеПараметра;
					НовыйОтбор.ТипОтбора      = ВидСравнения.Равно;
					НовыйОтбор.Рассчитывается = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИспользованиеWS Тогда
		
		СтруктураЗапроса.Вставить("ОбъектЗапрос", Новый Структура("ИспользуемыеПоля, ИспользуемыеПараметры, ИспользуемыеОтборы, ИспользуемыеСтатьи, ТекстЗапроса"
		, ИспользуемыеПоля
		, ИспользуемыеПараметры
		, ИспользуемыеОтборы
		, ИспользуемыеСтатьи
		, СтруктураЗапроса.ТекстЗапроса));
		Если СтруктураЗапроса.Свойство("ПланСчетов") И СтруктураЗапроса.ПланСчетов <> Неопределено Тогда
			СтруктураЗапроса.ОбъектЗапрос.Вставить("ИспользуемыйПланСчетов", ?(ТипЗнч(СтруктураЗапроса.ПланСчетов) = Тип("Строка"), СтруктураЗапроса.ПланСчетов, СтруктураЗапроса.ПланСчетов.Наименование));
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураЗапроса.Свойство("СписокСчетов") Тогда
		
		Если ИспользованиеWS Тогда
			
			ТабСчетаСписокДляWS = Новый ТаблицаЗначений;
			ТабСчетаСписокДляWS.Колонки.Добавить("Операнд");
			ТабСчетаСписокДляWS.Колонки.Добавить("Счет");
			ТабСчетаСписокДляWS.Колонки.Добавить("КоррСчет");
			
			Для Каждого Элемент Из СтруктураЗапроса.ТабСчетаСписок Цикл
				НоваяСтрока = ТабСчетаСписокДляWS.Добавить();
				НоваяСтрока.Операнд  = Элемент.Операнд;
				НоваяСтрока.Счет     = Элемент.Счет.Код;
				НоваяСтрока.КоррСчет = Элемент.КоррСчет.Код;
			КонецЦикла;
			
			СтруктураЗапроса.ОбъектЗапрос.Вставить("ТабСчетаСписок", ТабСчетаСписокДляWS);
			СтруктураЗапроса.ОбъектЗапрос.Вставить("СписокСчетов"  , СтруктураЗапроса.Списоксчетов);
			Если СтруктураЗапроса.Свойство("СписокКоррСчетов") Тогда
				СтруктураЗапроса.ОбъектЗапрос.Вставить("СписокКоррСчетов"  , СтруктураЗапроса.СписокКоррсчетов);
			КонецЕсли;
			
		Иначе
			
			Если СтруктураЗапроса.ТабСчетаСписок.Колонки.Найти("Счет") <> Неопределено Тогда
				
				ПланСчетов=СтруктураЗапроса.ПланСчетов;
				
				Если ЕстьОбороты Тогда
					
					Если СтруктураЗапроса.Свойство("СписокСчетов") Тогда
						
						СписокСчетовДт = База.NewObject("СписокЗначений");
						
						Для Каждого Счет ИЗ СтруктураЗапроса.СписокСчетов Цикл
							СписокСчетовДт.Add(Счет.Значение);
						КонецЦикла;
						
						ОбъектЗапрос.Parameters.Insert("СчетДт",СписокСчетовДт);
						
					КонецЕсли;
					
					Если СтруктураЗапроса.Свойство("СписокКоррСчетов") Тогда
						
						СписокСчетовКт = База.NewObject("СписокЗначений");
						
						Для Каждого КоррСчет ИЗ СтруктураЗапроса.СписокКоррСчетов Цикл
							СписокСчетовКт.Add(КоррСчет.Значение);
						КонецЦикла;
						
						ОбъектЗапрос.Parameters.Insert("СчетКт",СписокСчетовКт);
						
					КонецЕсли;
					
				Иначе
					
					СписокСчетов = База.NewObject("СписокЗначений");
					
					Для Каждого Счет ИЗ СтруктураЗапроса.СписокСчетов Цикл
						СписокСчетов.Add(Счет.Значение);
					КонецЦикла;
										
					ОбъектЗапрос.Parameters.Insert("Счет",СписокСчетов);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтруктураЗапроса.Свойство("ТабСтатьиСписок") Тогда
		
		Если НЕ ИспользованиеWS Тогда
			
			Если СтруктураЗапроса.ТабСтатьиСписок.Колонки.Найти("Статья") <> Неопределено Тогда
				
				СписокСтатей = База.NewObject("СписокЗначений");
				
				Для Каждого Статья ИЗ СтруктураЗапроса.СписокСтатей Цикл
					СписокСтатей.Add(Статья.Значение);
				КонецЦикла;
								
				ОбъектЗапрос.Parameters.Insert("Статья",СписокСтатей);
				
			КонецЕсли;
		Иначе
			СтруктураЗапроса.ОбъектЗапрос.Вставить("ТабСтатьиСписок", СтруктураЗапроса.ТабСтатьиСписок);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции// НастроитьЗапросКВнешнейИБ()



Процедура ПроверитьЗаполнениеОбязательныхРеквизитов(ТаблицаДанных,ПравилаИспользованияПолей)
		
	ТаблицаОбязательныхПолей=Новый ТаблицаЗначений;
	ТаблицаОбязательныхПолей.Колонки.Добавить("ПолеОбъектаВнешнейИБ");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ТаблицаАналитикиВИБ");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ПолеОбъектаКонсолидации");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ТипЗначения");
	ТаблицаОбязательныхПолей.Колонки.Добавить("КодАналитики");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ТаблицаАналитики");
	ТаблицаОбязательныхПолей.Колонки.Добавить("ОбъектМетаДанных");
	
	Запрос=Новый Запрос;
		
	КодАналитики="";
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
		
		Если (Не ЗначениеЗаполнено(СтрПоле.АналитикаОперанда))
			ИЛИ СтрПоле.КодАналитики=КодАналитики
			ИЛИ СтрНайти(СтрПоле.КодАналитики,"vzv")>0
			ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле)
			ИЛИ ПустаяСтрока(СтрПоле.ТаблицаАналитики) Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеОбъекта=ОбщегоНазначенияУХ.ПолучитьДанныеОбъектаБД(СтрПоле.ТаблицаАналитики);
				
		Если МетаданныеОбъекта.ТипОбъектаМетаданных="Перечисление" Тогда
			
			Запрос.Текст="ВЫБРАТЬ
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаВнешнейИБ,
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации,
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ОписаниеОбъектаВИБ
			|ИЗ
			|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
			|ГДЕ
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка = &НастройкаСоответствия";
			
		Иначе	
			
			Запрос.Текст="ВЫБРАТЬ
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаВнешнейИБ,
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации,
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ОписаниеОбъектаВИБ,
			|	РеквизитыОбъектаБД.Имя
			|ИЗ
			|	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ "+МетаданныеОбъекта.ТаблицаОписания+".Реквизиты КАК РеквизитыОбъектаБД
			|		ПО СоответствиеВнешнимИБСоответствиеРеквизитов.РеквизитОбъектаКонсолидации = РеквизитыОбъектаБД.Имя
			|			И (РеквизитыОбъектаБД.Обязательный)
			|ГДЕ
			|	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка = &НастройкаСоответствия
			|	И РеквизитыОбъектаБД.Ссылка.Наименование = &Наименование";
			
		КонецЕсли;

		
		КодАналитики=СтрПоле.КодАналитики;
		
		Запрос.УстановитьПараметр("НастройкаСоответствия",СтрПоле.НастройкаСоответствия);
		Запрос.УстановитьПараметр("Наименование",МетаданныеОбъекта.ИмяОбъектаМетаданных);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			Если ТаблицаДанных.Колонки.Найти(КодАналитики+?(МетаданныеОбъекта.ТипОбъектаМетаданных="Перечисление","","vzv"+Результат.РеквизитОбъектаКонсолидации))=Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока=ТаблицаОбязательныхПолей.Добавить();
			НоваяСтрока.ПолеОбъектаКонсолидации	= КодАналитики+?(МетаданныеОбъекта.ТипОбъектаМетаданных="Перечисление","","vzv"+Результат.РеквизитОбъектаКонсолидации);
			НоваяСтрока.ПолеОбъектаВнешнейИБ	= Результат.РеквизитОбъектаВнешнейИБ;
			НоваяСтрока.ТаблицаАналитикиВИБ		= Результат.ОписаниеОбъектаВИБ;
			НоваяСтрока.ТипЗначения				= ТаблицаДанных.Колонки[НоваяСтрока.ПолеОбъектаКонсолидации].ТипЗначения;
			НоваяСтрока.КодАналитики			= КодАналитики;
			НоваяСтрока.ТаблицаАналитики		= СтрПоле.ТаблицаАналитики;
			НоваяСтрока.ОбъектМетаДанных		= МетаданныеОбъекта.ОбъектМетаданных;
						
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	Запрос.Текст="ВЫБРАТЬ * Поместить РабочаяТаблица ИЗ &ТаблицаДанных КАК ТаблицаДанных
	|;";
	
	Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
	Запрос.Выполнить();
		
	Для Каждого ОбязательноеПоле ИЗ ТаблицаОбязательныхПолей Цикл
		
		Запрос.Текст="ВЫБРАТЬ Количество(РабочаяТаблица."+ОбязательноеПоле.ПолеОбъектаКонсолидации+") КАК ЧислоПолей ИЗ РабочаяТаблица ГДЕ РабочаяТаблица."+ОбязательноеПоле.ПолеОбъектаКонсолидации+"=&ПустоеЗначение";
		Запрос.УстановитьПараметр("ПустоеЗначение",ОбязательноеПоле.ТипЗначения.ПривестиЗначение());
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() И ЗначениеЗаполнено(Результат.ЧислоПолей) Тогда
			
			ТекстСообщения = НСтр("ru = 'В колонке %ПолеОбъектаВнешнейИБ% исходной таблицы %ТаблицаАналитикиВИБ% не заполнены одна или несколько ячеек'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПолеОбъектаВнешнейИБ%", Строка(ОбязательноеПоле.ПолеОбъектаВнешнейИБ));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ОбязательноеПоле.ТаблицаАналитикиВИБ));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ОбщийМодуль.УправлениеОтчетамиУХ.ПроверитьЗаполнениеОбязательныхРеквизитов.1010", ОбязательноеПоле.ОбъектМетаДанных,
							ОбязательноеПоле.КодАналитики+"."+ОбязательноеПоле.ТаблицаАналитики, ТекстСообщения);
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ПроверитьЗаполнениеОбязательныхРеквизитов() 

Процедура ОчиститьСлужебныеДанные(Результат,ПравилаИспользованияПолей)
	
	МассивСлужебныхКолонок=Новый Массив;
	
	СтрЗначение=ПравилаИспользованияПолей.Найти("Значение","КодАналитики");
	
	Если СтрЗначение=Неопределено Тогда
		ПолеЗначения="";
	Иначе
		ПолеЗначения=СтрЗначение.Синоним;
	КонецЕсли;
	
	Для Каждого Колонка ИЗ Результат.Колонки Цикл
		
		Если Колонка.Имя=ПолеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПравилаИспользованияПолей.Найти(Колонка.Имя,"КодАналитики")=Неопределено Тогда
			
			МассивСлужебныхКолонок.Добавить(Колонка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СлужебнаяКолонка ИЗ МассивСлужебныхКолонок Цикл
		
		Результат.Колонки.Удалить(СлужебнаяКолонка);
		
	КонецЦикла;
		
КонецПроцедуры // ОчиститьСлужебныеДанные()

Функция ПолучитьЭлементАналитики(СтрДанные,
	ДанныеРеквизитов,
	КэшНайденныхЗначений,
	КонтекстОтчета,
	ФлагОшибкиИмпортаТек,
	КэшСозданныхОбъектов)
		
	СтруктураЗаписи=Новый Структура;
	СтруктураПоиска=Новый Структура;
	СтруктураОбновление=Новый Структура;
	
	Если КонтекстОтчета.Свойство("ТабОбъектовДляВыгрузки") Тогда
		КонтекстОтчета.Вставить("СтруктураЗначенийРеквизитов",Новый Структура("НСИ_ВИБ",КонтекстОтчета.НСИ_ВИБ));
	КонецЕсли;
	
	СтрокаГруппа=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("ЭтоГруппа","ИмяРеквизита");
	
	Если СтрокаГруппа=Неопределено Тогда
		ЭтоГруппа=Ложь;
	Иначе
		ЭтоГруппа=СтрДанные[СтрокаГруппа.ДанныеРеквизита];
	КонецЕсли;
	
	Для Каждого СтрРеквизит ИЗ ДанныеРеквизитов.ФиксированныеРеквизиты Цикл
		
		Если НЕ ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);
		
		Если (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
			
			СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);
			
		КонецЕсли;
		
		СтруктураОбновление.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);
		
	КонецЦикла;
		
	Если ДанныеРеквизитов.ЕстьСсылочные Тогда
		
		ДанныеРеквизитов.СсылочныеРеквизиты.Сортировать("ИмяРеквизита");
		Владелец=Неопределено;
		
		Для ИндексРеквизита=0 ПО ДанныеРеквизитов.СсылочныеРеквизиты.Количество()-1 Цикл
			
			СтрРеквизит=ДанныеРеквизитов.СсылочныеРеквизиты[ИндексРеквизита];
			
			Если НЕ ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизита=Неопределено;
			
			МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
			
			Если МассивРеквизитов.Количество()=1 Тогда 
				
				ЗначениеРеквизита=ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
				МассивРеквизитов[0],
				КэшНайденныхЗначений,
				КонтекстОтчета,
				ФлагОшибкиИмпортаТек,
				КэшСозданныхОбъектов,
				ДанныеРеквизитов.КодАналитики,
				ДанныеРеквизитов.ТаблицаАналитики,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
				
			ИначеЕсли МассивРеквизитов.Количество()>1 Тогда
				
				ТаблицаАналитики=СтрДанные[СтрРеквизит.ДанныеРеквизита];
				
				Если ЗначениеЗаполнено(ТаблицаАналитики) Тогда
					
					МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита,ТаблицаАналитики",СтрРеквизит.ИмяРеквизита,ТаблицаАналитики));
					
					Если МассивРеквизитов.Количество()=1 Тогда 
						
						ЗначениеРеквизита=ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
						МассивРеквизитов[0],
						КэшНайденныхЗначений,
						КонтекстОтчета,
						ФлагОшибкиИмпортаТек,
						КэшСозданныхОбъектов,
						ДанныеРеквизитов.КодАналитики,
						ДанныеРеквизитов.ТаблицаАналитики,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;			
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				
				СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
				
				СтрСозданный=КэшСозданныхОбъектов.Найти(ЗначениеРеквизита,"Ссылка");
				
				Если (СтрСозданный=Неопределено И (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации)) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
					
					СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
					
				КонецЕсли;
				
				СтруктураОбновление.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
				
			Иначе
				
				Если (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации=Истина) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
					
					СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрРеквизит.ИмяРеквизита="Владелец" Тогда
				
				Владелец=ЗначениеРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;										
	
	ЕстьСоответствиеПоКоду = Ложь;
	ЕстьСоответствиеПоНомеру = Ложь;
	
	МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ДанныеРеквизитов.ТаблицаАналитики,".");
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
				
	Для Каждого СтрПоля ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл 
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа" 
			И ЗначениеЗаполнено(СтрДанные[СтрПоля.ДанныеРеквизита]) 
			И СтрДанные[СтрПоля.ДанныеРеквизита]=Истина Тогда
			СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			
			Если КонтекстОтчета.Свойство("СтруктураЗначенийРеквизитов") Тогда
				КонтекстОтчета.СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			КонецЕсли;
			
        КонецЕсли;
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа"
			ИЛИ СтрДанные[СтрПоля.ДанныеРеквизита]=Ложь
			ИЛИ (НЕ (ЗначениеЗаполнено(СтрДанные[СтрПоля.ДанныеРеквизита]) И ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа))) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрПоля.НеИспользоватьДляСинхронизации Тогда
			СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		КонецЕсли;
		
		СтруктураЗаписи.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		СтруктураОбновление.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		
		Если КонтекстОтчета.Свойство("СтруктураЗначенийРеквизитов") Тогда
			КонтекстОтчета.СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		КонецЕсли;
						
		Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если НЕ ЕстьСоответствиеПоКоду Тогда
				
				ЕстьСоответствиеПоКоду=(СтрПоля.ИмяРеквизита="Код");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				
				ЕстьСоответствиеПоНомеру=(СтрПоля.ИмяРеквизита="Номер");
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Проверим на тип "Перечисление"
	
	Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.")>0 Тогда
		
		ИмяПеречисления=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.","");
		ТекЗначениеПеречисления=ОбщегоНазначенияУХ.ПолучитьЗначениеПеречисленияПоИмени(ИмяПеречисления,СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита],ДанныеРеквизитов.НастройкаСоответствияРеквизит);
		
		Если ТекЗначениеПеречисления=Неопределено Тогда
						
			ФлагОшибкиИмпортаТек=Истина;
			
			ТекстСообщения = НСтр("ru = 'При импорте объекта %КодАналитики% не удалось получить значение перечисления
			|			%ТаблицаАналитики%: %ДанныеРеквизита%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитики%", Строка(ДанныеРеквизитов.ТаблицаАналитики));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеРеквизита%", Строка(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ОбщийМодуль.УправлениеОтчетамиУХ.ПолучитьЭлементАналитики.1000", ДанныеРеквизитов.ОбъектМетаДанных,
			ДанныеРеквизитов.КодАналитики+"."+ДанныеРеквизитов.ТаблицаАналитики, ТекстСообщения);
						
			Возврат ТекЗначениеПеречисления;
			
		Иначе
			
			НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
			НоваяСтрока._Ссылка_=ТекЗначениеПеречисления;
			
			Если КонтекстОтчета.Свойство("СтруктураЗначенийРеквизитов") Тогда
				
				ЗначениеПеречисленияТек=ОбщегоНазначенияУХ.ПолучитьЗначениеПеречисленияПоИмени(СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.",""),СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита],ДанныеРеквизитов.НастройкаСоответствияРеквизит);				
				КонтекстОтчета.СтруктураЗначенийРеквизитов.Вставить(ДанныеРеквизитов.ПримитивныеРеквизиты[0].ЗначениеПеречисленияТек);
				
			КонецЕсли;
			
			Возврат ТекЗначениеПеречисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим на заполненность полей, используемых для синхронизации
	
	Для Каждого Реквизит ИЗ СтруктураПоиска Цикл
		
		Если НЕ (ЗначениеЗаполнено(Реквизит.Значение) ИЛИ Реквизит.Ключ="Родитель") Тогда
			
			ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,ДанныеРеквизитов.КодАналитики,ДанныеРеквизитов.ТаблицаАналитики,СтруктураЗаписи,,Ложь);
			
			ФлагОшибкиИмпортаТек = Истина;
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Проверим на заполненность хотя бы одного реквизита
	
	ПустойЭлемент=Истина;
	
	Для Каждого Реквизит ИЗ СтруктураЗаписи Цикл
		
		Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
			
			ПустойЭлемент=Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ПустойЭлемент ИЛИ СтруктураПоиска.Количество()=0 Тогда
		
		Возврат КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики(ДанныеРеквизитов.ТаблицаАналитики);
		
	КонецЕсли;
				
	Если СтруктураПоиска.Количество()>0 Тогда
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в кэше
		
		Если ДанныеРеквизитов.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			СтруктураПоиска.Вставить("ИмяОбъектаМетаданных",ДанныеРеквизитов.ИмяОбъектаМетаДанных);
						
		КонецЕсли;
		
		Если ДанныеРеквизитов.РазделятьПоОрганизациям И ЗначениеЗаполнено(КонтекстОтчета.Организация) Тогда
			
			СтруктураПоиска.Вставить("Организация",КонтекстОтчета.Организация);
			
		КонецЕсли;
		
		Если ДанныеРеквизитов.ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" 
			И (Не СтруктураЗаписи.Свойство("Организация"))
			И ЗначениеЗаполнено(КонтекстОтчета.Организация) Тогда
			
			СтруктураПоиска.Вставить("Организация",КонтекстОтчета.Организация);
            СтруктураЗаписи.Вставить("Организация",КонтекстОтчета.Организация);
			
		КонецЕсли;

		Если ДанныеРеквизитов.ЕстьРеквизитВИБ Тогда
			Если КонтекстОтчета.Свойство("ИспользуемаяИБ") И КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации Тогда
				СтруктураПоиска.Вставить("НСИ_ВИБ",КонтекстОтчета.ИспользуемаяИБ);
			Иначе
				СтруктураПоиска.Вставить("НСИ_ТребуетСинхронизации",Ложь);
			КонецЕсли;
		КонецЕсли;
		
		НайденныеСтроки=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество()>0 Тогда
			
			Возврат ОбновитьДанныеОбъекта(НайденныеСтроки[0]._Ссылка_,СтруктураОбновление,КонтекстОтчета,ДанныеРеквизитов.ОбновлятьРеквизитыПриИмпорте);
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в БД
				
		Попытка
			
			НайденноеЗначение=ПолучитьЭлементСправочника(ДанныеРеквизитов.ТаблицаАналитики,СтруктураПоиска);
			
		Исключение
			
			ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,ДанныеРеквизитов.КодАналитики,ДанныеРеквизитов.ТаблицаАналитики,СтруктураПоиска,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Ложь);
			
		КонецПопытки;
		
		Если НЕ НайденноеЗначение=Неопределено Тогда
			
			НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
			НоваяСтрока._Ссылка_=НайденноеЗначение;
			
			Возврат ОбновитьДанныеОбъекта(НайденноеЗначение,СтруктураОбновление,КонтекстОтчета,ДанныеРеквизитов.ОбновлятьРеквизитыПриИмпорте);
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Создадим новый объект
	
	ТекстОшибки="";
	
	Попытка
					
		Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" 
			И (НЕ ДанныеРеквизитов.НастройкаСоответствия.ТипОбъектаВИБ="ТаблицаADO") Тогда
			
			Если ТипОбъектаМетаданных="Справочник" Тогда
				
				Если ЭтоГруппа Тогда
					НовыйОбъект = Справочники[ИмяОбъектаМетаданных].СоздатьГруппу();
				Иначе
					НовыйОбъект = Справочники[ИмяОбъектаМетаданных].СоздатьЭлемент();
				КонецЕсли;
				
			Иначе
				
				Если ЭтоГруппа Тогда
					НовыйОбъект = ПланыВидовХарактеристик[ИмяОбъектаМетаданных].СоздатьГруппу();
				Иначе
					НовыйОбъект = ПланыВидовХарактеристик[ИмяОбъектаМетаданных].СоздатьЭлемент();
				КонецЕсли;
				
			КонецЕсли;
			
			ДлинаКода=НовыйОбъект.Метаданные().ДлинаКода;
			ЗаполнитьЗначенияСвойств(НовыйОбъект,СтруктураЗаписи);
			
			Если ДлинаКода>0 Тогда
				
				Если НЕ ЕстьСоответствиеПоКоду Тогда
					
					НовыйОбъект.УстановитьНовыйКод();
					СтруктураЗаписи.Вставить("Код",НовыйОбъект.Код);
									
				КонецЕсли;
				
			КонецЕсли;
						
			Если ИмяОбъектаМетаданных="ПроизвольныйКлассификаторУХ" Тогда
				
				НовыйОбъект.Владелец=ДанныеРеквизитов.ИмяОбъектаМетаДанных;
				
			ИначеЕсли ИмяОбъектаМетаданных="СчетаБД" Тогда
				
				НовыйОбъект.Владелец=?(ЗначениеЗаполнено(КонтекстОтчета.Организация.ПланСчетов),КонтекстОтчета.Организация.ПланСчетов,Константы.ПланСчетовПоУмолчанию.Получить());
				
			КонецЕсли;
			
			Если ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
				
				НовыйОбъект.ТипЗначения=ПолучитьОписаниеТипаЗначенияПВХ(КонтекстОтчета,ДанныеРеквизитов.ТаблицаАналитикиВИБ,СтрДанные[ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылка"]);
				
			КонецЕсли;
			
			ДанныеДопЗаполнения=ПолучитьДанныеДопЗаполнения(ДанныеРеквизитов.НастройкаСоответствия);
			
			Если ЗначениеЗаполнено(ДанныеДопЗаполнения.КорневойКаталог)
				И (НЕ ЗначениеЗаполнено(НовыйОбъект.Родитель)) Тогда
				
				НовыйОбъект.Родитель=ДанныеДопЗаполнения.КорневойКаталог;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ДанныеДопЗаполнения.ПроцедураПередЗаписью) Тогда
				
				Выполнить(ДанныеДопЗаполнения.ПроцедураПередЗаписью);
				
			КонецЕсли;
										
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			НовыйОбъект=Документы[ИмяОбъектаМетаданных].СоздатьДокумент();
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				НовыйОбъект.УстановитьНовыйНомер();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовыйОбъект,СтруктураЗаписи);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ТекстУникальныеРеквизиты="";
		
		Если НЕ ПроверитьПередЗаписью(СтруктураЗаписи,ДанныеРеквизитов.ОбязательныеРеквизиты,ДанныеРеквизитов.ТаблицаАналитики,ТекстУникальныеРеквизиты) Тогда
			
			ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,ДанныеРеквизитов.КодАналитики,ДанныеРеквизитов.ТаблицаАналитики,СтруктураЗаписи,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина,ТекстУникальныеРеквизиты);
			
			ФлагОшибкиИмпортаТек = Истина;
			Возврат Неопределено;
			
		КонецЕсли;
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("НСИ_ВИБ",НовыйОбъект) Тогда
			
			НовыйОбъект.НСИ_ВИБ=КонтекстОтчета.ИспользуемаяИБ;
			
			Если КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации Тогда
				
				НовыйОбъект.НСИ_ТребуетСинхронизации=Истина;
				НовыйОбъект.НСИ_НеАктивный=Истина;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если КонтекстОтчета.Загрузка Тогда
			НовыйОбъект.ОбменДанными.Загрузка=Истина;
		КонецЕсли;
		
		НовыйОбъект.Записать();
		
		Если (ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик")
			И (Не ДанныеРеквизитов.НастройкаСоответствия.ТипОбъектаВИБ="ТаблицаADO") Тогда
			
			НаборЗаписей=РегистрыСведений.СоответствиеОбъектовТекущейИВнешнихИБ.СоздатьНаборЗаписей();
			
			НаборЗаписей.Отбор.НастройкаСоответствия	.Установить(ДанныеРеквизитов.НастройкаСоответствия);
			НаборЗаписей.Отбор.ОбъектТекущейИБ			.Установить(НовыйОбъект.Ссылка);
			НаборЗаписей.Отбор.ИспользуемаяИБ			.Установить(КонтекстОтчета.ИспользуемаяИБ);
			НаборЗаписей.Отбор.ОбъектВнешнейИБ			.Установить(СтрДанные[ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылка"]);

			НоваяСтрока=НаборЗаписей.Добавить();
			
			НоваяСтрока.НастройкаСоответствия			= ДанныеРеквизитов.НастройкаСоответствия;
			НоваяСтрока.ОбъектТекущейИБ					= НовыйОбъект.Ссылка;
			НоваяСтрока.ИспользуемаяИБ					= КонтекстОтчета.ИспользуемаяИБ;
			НоваяСтрока.ОбъектВнешнейИБ					= СтрДанные[ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылка"];
			
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;

		НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
		НоваяСтрока._Ссылка_=НовыйОбъект.Ссылка;
		
		НоваяСтрока=КэшСозданныхОбъектов.Добавить();
		НоваяСтрока.Ссылка=НовыйОбъект.Ссылка;
		НоваяСтрока.НастройкаСоответствияРеквизит=ДанныеРеквизитов.НастройкаСоответствия;
		
		Если КонтекстОтчета.Свойство("ТабОбъектовДляВыгрузки") Тогда
			
			СтрокаВыгрузка=КонтекстОтчета.ТабОбъектовДляВыгрузки.Добавить();
			СтрокаВыгрузка.ТаблицаАналитики		= ДанныеРеквизитов.ТаблицаАналитики;
			СтрокаВыгрузка.КодАналитики			= ДанныеРеквизитов.КодАналитики;
			СтрокаВыгрузка.СтруктураРеквизитов	= ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(КонтекстОтчета.СтруктураЗначенийРеквизитов);
			
		КонецЕсли;
		
		 Если (НЕ ЭтоГруппа) И ДанныеРеквизитов.НастройкаСоответствия.СоответствияСвязанныхОбъектов.Количество()>0 Тогда 
							 
			ТекОбъект = НовыйОбъект.Ссылка.ПолучитьОбъект(); 								 
			ОбновитьДанныеСвязанныхОбъектов(КонтекстОтчета,ТекОбъект,ДанныеРеквизитов.НастройкаСоответствия);
			ТекОбъект.Записать();
			
		КонецЕсли;
		
		Возврат НовыйОбъект.Ссылка; 
		
	Исключение
		
		ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,ДанныеРеквизитов.КодАналитики,ДанныеРеквизитов.ТаблицаАналитики,СтруктураЗаписи,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ФлагОшибкиИмпортаТек = Истина;
		Возврат Неопределено;
		
	КонецПопытки;	
	
КонецФункции // 

Функция ПолучитьДанныеДопЗаполнения(НастройкаСоответствия)
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.ПроцедураПередЗаписью КАК ПроцедураПередЗаписью,
	|	СоответствиеВнешнимИБ.КорневойКаталог КАК КорневойКаталог
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",НастройкаСоответствия);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Результат.Следующий();
	
	Возврат Новый Структура("ПроцедураПередЗаписью,КорневойКаталог",Результат.ПроцедураПередЗаписью,Результат.КорневойКаталог);
		
КонецФункции // ПолучитьДанныеДопЗаполнения() 

Функция ПроверитьПередЗаписью(СтруктураЗаписи,ТаблицаРеквизитов,ТаблицаАналитики,ТекстУникальныеРеквизиты="")
	
	ЗаписьВозможна=Истина;
	МассивКонтрольУникальности=Новый Массив;
	
	Для Каждого Реквизит ИЗ ТаблицаРеквизитов Цикл
		
		Если Реквизит.Обязательный Тогда
			
			Если СтруктураЗаписи.Свойство(Реквизит.Имя) Тогда
				
				Если НЕ ЗначениеЗаполнено(СтруктураЗаписи[Реквизит.Имя]) Тогда
					
					ЗаписьВозможна=Ложь;
					
				КонецЕсли;
				
			Иначе
				
				ЗаписьВозможна=Ложь;
				СтруктураЗаписи.Вставить(Реквизит.Имя);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Реквизит.КонтрольУникальности Тогда
			
			МассивКонтрольУникальности.Добавить(Реквизит.Имя);
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если НЕ ЗаписьВозможна Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если МассивКонтрольУникальности.Количество()>0 Тогда
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ Первые 1
		|Представление(КонтролируемыйОбъект.Ссылка) КАК Объект
		|ИЗ "+ТаблицаАналитики+" КАК КонтролируемыйОбъект";
		
		ТекстОтбор="";
		ТекстОшибка="";
		
		Для Каждого Реквизит ИЗ МассивКонтрольУникальности Цикл
			
			ТекстОтбор=ТекстОтбор+" И КонтролируемыйОбъект."+Реквизит+" = &"+Реквизит;
			Запрос.УстановитьПараметр(Реквизит,СтруктураЗаписи[Реквизит]);
			
			ТекстОшибка=ТекстОшибка+Символы.ПС+Реквизит+": "+СтруктураЗаписи[Реквизит];
			
		КонецЦикла;
		
		Запрос.Текст=Запрос.Текст+"
		|ГДЕ"+Сред(ТекстОтбор,3);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ТекстУникальныеРеквизиты=СтрШаблон(Нстр("ru = 'Запись с уникальными реквизитами %1
			|уже присутствует в информационной базе: %2'"), 
			                         	ТекстОшибка, Результат.Объект);
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;	
	
	Возврат ЗаписьВозможна;
				
КонецФункции // ПроверитьПередЗаписью() 

Процедура ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,КодАналитики,ТаблицаАналитики,СтруктураЗаписи,ИнформацияОбОшибке="",НовыйОбъект=Истина, ТекстУникальныеРеквизиты="")
	
	Если ТипОбъектаМетаданных="Справочник" Тогда
		
		МетаданныеОбъекта=Метаданные.Справочники[ИмяОбъектаМетаданных];
		ТекстОбъекта=?(ЭтоГруппа,Нстр("ru = 'группу справочника '"),Нстр("ru = ' элемент справочника '"));
		
	ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
		
		МетаданныеОбъекта=Метаданные.ПланыВидовХарактеристик[ИмяОбъектаМетаданных];
		ТекстОбъекта=?(ЭтоГруппа,Нстр("ru = 'группу ПВХ '"),Нстр("ru = ' элемент ПВХ '"));
		
	Иначе
		
		МетаданныеОбъекта=Метаданные.Документы[ИмяОбъектаМетаданных];
		ТекстОбъекта=Нстр("ru = 'документ '");
		
	КонецЕсли;
	
	Если НовыйОбъект Тогда
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось создать %1 %2
		|со следующими реквизитами: '"), 
		            	ТекстОбъекта, МетаданныеОбъекта.Синоним);
		
	Иначе
		
		ТекстОшибки=СтрШаблон(Нстр("ru = 'Не удалось найти в базе данных %1 %2
		|со следующими реквизитами: '"), 
		            	ТекстОбъекта, МетаданныеОбъекта.Синоним);
		
	КонецЕсли;
	
	Для Каждого СтрПоля ИЗ СтруктураЗаписи Цикл
		
		Если СтрПоля.Ключ="Владелец" 
			ИЛИ СтрПоля.Ключ="Код" 
			ИЛИ СтрПоля.Ключ="Наименование"
			ИЛИ СтрПоля.Ключ="Родитель" Тогда
			
			РеквизитОбъекта=МетаданныеОбъекта.СтандартныеРеквизиты[СтрПоля.Ключ];
			
		Иначе
			
			РеквизитОбъекта=МетаданныеОбъекта.Реквизиты[СтрПоля.Ключ];
			
		КонецЕсли;
		
		ОписаниеРеквизита=?(ЗначениеЗаполнено(РеквизитОбъекта.Синоним),РеквизитОбъекта.Синоним,СтрПоля.Ключ);
		
		ТекстОшибки=ТекстОшибки+Символы.ПС+ОписаниеРеквизита+" - "+?(ЗначениеЗаполнено(СтрПоля.Значение),СтрПоля.Значение,"???");
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстУникальныеРеквизиты) Тогда
		
		ТекстОшибки=СтрШаблон(Нстр("ru = '%1Не заполнены обязательные реквизиты'"), ТекстОшибки+Символы.ПС);
		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ДобавитьВПротоколОшибкуЗаписи.1001",МетаданныеОбъекта,
		СтрЗаменить(КодАналитики,"vzv",".")+"."+ТаблицаАналитики, ТекстОшибки, ИнформацияОбОшибке);
		
	Иначе
		
		ТекстОшибки=ТекстОшибки+Символы.ПС+ТекстУникальныеРеквизиты;		
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("УправлениеОтчетамиУХ.ДобавитьВПротоколОшибкуЗаписи.1002",МетаданныеОбъекта,
		СтрЗаменить(КодАналитики,"vzv",".")+"."+ТаблицаАналитики, ТекстОшибки, ИнформацияОбОшибке);
		
	КонецЕсли;
					
КонецПроцедуры // ДобавитьВПротоколОшибкуЗаписи()

Функция ПолучитьТаблицуКонтролируемыхРеквизитов(ОбъектАналитики) Экспорт
	
	Если ПустаяСтрока(ОбъектАналитики) Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ОбъектАналитики,".");
	
	Если НЕ МетаданныеОбъекта.Количество()>1 Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;
	
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
	
	Если ТипОбъектаМетаданных="Перечисление" Тогда
		
		Возврат Новый Массив;
		
	КонецЕсли;	
	
	Запрос = Новый Запрос;
		
	Запрос.Текст="ВЫБРАТЬ
	|	ОбъектБДРеквизиты.Имя,
	|	ОбъектБДРеквизиты.Обязательный" + ?(ТипОбъектаМетаданных="Справочник","
	|	,ОбъектБДРеквизиты.КонтрольУникальности", ", ЛОЖЬ КАК КонтрольУникальности")+"
	|ИЗ
	|	Справочник."+?(ТипОбъектаМетаданных="Справочник","СправочникиБД","ДокументыБД")+".Реквизиты КАК ОбъектБДРеквизиты
	|ГДЕ
	|	ОбъектБДРеквизиты.Ссылка.Владелец = &Владелец
	|	И ОбъектБДРеквизиты.Ссылка.Наименование = &Наименование
	|	И (ОбъектБДРеквизиты.Обязательный" + ?(ТипОбъектаМетаданных = "Справочник","
	|ИЛИ ОбъектБДРеквизиты.КонтрольУникальности)", ")");
	
	Запрос.УстановитьПараметр("Владелец",Справочники.ТипыБазДанных.ТекущаяИБ);
	Запрос.УстановитьПараметр("Наименование",ИмяОбъектаМетаданных);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьМассивОбязательныхРеквизитов()

Процедура ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										ТаблицаИмпорта,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										РежимРасшифровки,
										ПравилаИспользованияПолей) Экспорт
		
	КэшСозданныхОбъектов=Новый ТаблицаЗначений;
	КэшСозданныхОбъектов.Колонки.Добавить("Ссылка");
	КэшСозданныхОбъектов.Колонки.Добавить("НастройкаСоответствияРеквизит");
	КэшСозданныхОбъектов.Индексы.Добавить("Ссылка");
	
	Если НЕ КонтекстОтчета.Свойство("Загрузка") Тогда
		КонтекстОтчета.Вставить("Загрузка",Истина);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	 // Проверяем на совместимость со старыми правилами использования полей
	 
	 Если ПравилаИспользованияПолей.Колонки.Найти("НастройкаСоответствияРеквизит")=Неопределено Тогда
		 
		 ПравилаИспользованияПолей.Колонки.Добавить("НастройкаСоответствияРеквизит");
		 ПравилаИспользованияПолей.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		 
		 Для Каждого Строка ИЗ ПравилаИспользованияПолей Цикл
			 
			 Строка.ИспользованиеКонсолидация=НЕ Строка.НеИспользоватьДляСинхронизации;
			 
		 КонецЦикла;
		 
	 КонецЕсли;
	
	//////////////////////////////////////////////////////////////////////////////////////////
	
	// Подготовим соответствие для хранения найденных или созданных элементов справочников
	
	КэшНайденныхЗначений=Новый Соответствие;
			 
	 // Подготовим дерево реквизитов для заполнения
	 
	 ДеревоРеквизитов=Новый ДеревоЗначений;
	 ДеревоРеквизитов.Колонки.Добавить("ИмяРеквизита");
	 ДеревоРеквизитов.Колонки.Добавить("КодАналитики");
	 ДеревоРеквизитов.Колонки.Добавить("ТаблицаАналитики");
	 ДеревоРеквизитов.Колонки.Добавить("ОбъектМетаДанных");
	 ДеревоРеквизитов.Колонки.Добавить("ТаблицаАналитикиВИБ");
	 ДеревоРеквизитов.Колонки.Добавить("ПримитивныеРеквизиты");
	 ДеревоРеквизитов.Колонки.Добавить("СсылочныеРеквизиты");
	 ДеревоРеквизитов.Колонки.Добавить("ФиксированныеРеквизиты");
	 ДеревоРеквизитов.Колонки.Добавить("ИмяОбъектаМетаДанных");
	 ДеревоРеквизитов.Колонки.Добавить("ОбязательныеРеквизиты");
	 ДеревоРеквизитов.Колонки.Добавить("СоздаватьНовые",				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("РазделятьПоОрганизациям",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("ЕстьСсылочные",					ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("НастройкаСоответствияРеквизит");
	 ДеревоРеквизитов.Колонки.Добавить("НастройкаСоответствия");
	 ДеревоРеквизитов.Колонки.Добавить("ЕстьРеквизитВИБ",				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("ПолеТаблицаАналитикиВИБ");
	 ДеревоРеквизитов.Колонки.Добавить("ПолеАналитики");
	 
	 /////////////////////////////////////////////////////////////////////////////////////////////////////
	 
	 ТаблицаРеквизитов=Новый ТаблицаЗначений;
	 ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("ДанныеРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("Использование");
	 ТаблицаРеквизитов.Колонки.Добавить("ФиксированноеЗначение");
	 ТаблицаРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	  
	 Для Каждого КодАналитики ИЗ СтруктураКлючевыхРеквизитов Цикл
		 
		 // Добавим колонки для значений перечислений
		 
		 Если СтрНайти(КодАналитики.Значение[0],"Перечисление.")>0 Тогда
			 
			РабочаяКолонка=ТаблицаИмпорта.Колонки.Найти(КодАналитики.Ключ+"vzvЭлементСсылка");
			 
			 Если РабочаяКолонка=Неопределено Тогда // Импорт через ADO
				 
				 РабочаяКолонка=ТаблицаИмпорта.Колонки.Найти(КодАналитики.Ключ+"_ADO_ENUM");
				 
			 КонецЕсли;	
						 
			 РабочаяКолонка.Имя=КодАналитики.Ключ+"vzv1EnumValue";
			 
			  Если НЕ ТаблицаИмпорта.Колонки.Найти(КодАналитики.Ключ)=Неопределено Тогда
				 
				 ТаблицаИмпорта.Колонки.Удалить(КодАналитики.Ключ);
				 
			 КонецЕсли; 
			 
			 ТаблицаИмпорта.Колонки.Добавить(КодАналитики.Ключ,ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка(СтрЗаменить(КодАналитики.Значение[0],"Перечисление.","ПеречислениеСсылка.")));
			 
		КонецЕсли;
		 
		 МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики",КодАналитики.Ключ));
		 
		 Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл
			 
			 Если СтрПоле.Поле="Ссылка" ИЛИ СтрНайти(СтрПоле.Синоним,"vzvЭлементСсылка")>0 Тогда
				 
				 Продолжить;
				 
			 КонецЕсли;
			 
			 СтрАналитика=ДеревоРеквизитов.Строки.Найти(КодАналитики.Ключ,"КодАналитики");
			 
			 Если СтрАналитика=Неопределено Тогда
				 
				 СтрАналитика=ДеревоРеквизитов.Строки.Добавить();
				 
				 ЗаполнитьЗначенияСвойств(СтрАналитика,СтрПоле);
				 
				 СтрАналитика.КодАналитики					= КодАналитики.Ключ;
				 СтрАналитика.ИмяОбъектаМетаДанных			= СтрПоле.АналитикаОперанда;
				 
				 СтрАналитика.ОбязательныеРеквизиты			= ПолучитьТаблицуКонтролируемыхРеквизитов(СтрПоле.ТаблицаАналитики);
				 
				 ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьДанныеОбъектаБД(?(СтрПоле.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ",СтрПоле.АналитикаОперанда,СтрПоле.ТаблицаАналитики));	 
				 СтрАналитика.ОбъектМетаДанных				= ДанныеОбъекта.ОбъектМетаданных;
				 СтрАналитика.ОбновлятьРеквизитыПриИмпорте	= ДанныеОбъекта.ОбновлятьРеквизитыПриИмпорте;
				 СтрАналитика.СоздаватьНовые				= ДанныеОбъекта.СоздаватьПриНеудачномПоискеПриИмпорте;
				 СтрАналитика.РазделятьПоОрганизациям		= ДанныеОбъекта.РазделятьПоОрганизациям;
				 
				 СтрАналитика.ПримитивныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();	 
				 СтрАналитика.СсылочныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
				 СтрАналитика.ФиксированныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
				 
				 Если СтрНайти(СтрАналитика.ТаблицаАналитики,"Справочник.")>0 Тогда
					 
					 СтрАналитика.ЕстьРеквизитВИБ=ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(СтрЗаменить(СтрАналитика.ТаблицаАналитики,"Справочник.",""),"НСИ_ВИБ");
					 
				 КонецЕсли;
				 
				 Если ЗначениеЗаполнено(СтрАналитика.НастройкаСоответствия) Тогда
					 
					 МассивФиксированных=СтрАналитика.НастройкаСоответствия.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение));
					 
					 Для Каждого Строка ИЗ МассивФиксированных Цикл
						 
						 НоваяСтрока=СтрАналитика.ФиксированныеРеквизиты.Добавить();
						 НоваяСтрока.ИмяРеквизита					= Строка.РеквизитОбъектаКонсолидации;
						 НоваяСтрока.ФиксированноеЗначение			= Строка.ФиксированноеЗначение;
						 НоваяСтрока.НеИспользоватьДляСинхронизации	= Строка.НеИспользоватьДляСинхронизации;
						 НоваяСтрока.Использование					= Строка.ИспользованиеКонсолидация;
						 
						 ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,СтрПоле.ТаблицаАналитики,Строка.РеквизитОбъектаКонсолидации,СтрПоле.РазделятьПоОрганизациям);
	 
					 КонецЦикла;
					 
				 КонецЕсли;	 
				 
			 КонецЕсли;
			 			 
			 Если НЕ ТаблицаИмпорта.Колонки.Найти(СтрПоле.Синоним)=Неопределено Тогда
				 
				 НоваяСтрока=СтрАналитика.ПримитивныеРеквизиты.Добавить();
				 НоваяСтрока.ИмяРеквизита					= СтрПоле.РеквизитАналитики;
				 НоваяСтрока.ДанныеРеквизита				= СтрПоле.Синоним;
				 НоваяСтрока.Использование					= СтрПоле.ИспользованиеКонсолидация;
				 НоваяСтрока.НеИспользоватьДляСинхронизации	= СтрПоле.НеИспользоватьДляСинхронизации;
				 
				 ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,СтрПоле.ТаблицаАналитики,СтрПоле.РеквизитАналитики,СтрПоле.РазделятьПоОрганизациям);
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
		 Для Каждого СтрРеквизит ИЗ СтруктураПодчиненныхРеквизитов Цикл
			 
			 Если (НЕ СтрРеквизит.Ключ=КодАналитики.Ключ) И СтрНайти(СтрРеквизит.Ключ,КодАналитики.Ключ+"vzv")=1 Тогда
				 
				 СтрокаСиноним=ПравилаИспользованияПолей.Найти(СтрРеквизит.Ключ,"КодАналитики");
				 
				 МассивПуть=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаСиноним.РеквизитАналитики,".");
				 
				 ИмяРеквизита=МассивПуть[0]; 
				 
				 Если СтрАналитика.СсылочныеРеквизиты.Найти(ИмяРеквизита,"ИмяРеквизита")=Неопределено Тогда
					 
					 НоваяСтрока=СтрАналитика.СсылочныеРеквизиты.Добавить();
					 НоваяСтрока.ИмяРеквизита=ИмяРеквизита;
					 НоваяСтрока.Использование=СтрокаСиноним.ИспользованиеКонсолидация;
					 НоваяСтрока.НеИспользоватьДляСинхронизации=СтрокаСиноним.НеИспользоватьДляСинхронизации;
					 
					 Если ЗначениеЗаполнено(СтрАналитика.НастройкаСоответствия) Тогда
						 
						 СтрокаСоответствия=СтрАналитика.НастройкаСоответствия.СоответствиеРеквизитов.Найти(НоваяСтрока.ИмяРеквизита,"РеквизитОбъектаКонсолидации");
						 
						 Если НЕ СтрокаСоответствия=Неопределено Тогда
							 
							 НоваяСтрока.НеИспользоватьДляСинхронизации		= СтрокаСоответствия.НеИспользоватьДляСинхронизации;
							 НоваяСтрока.Использование						= СтрокаСоответствия.ИспользованиеКонсолидация;
							 
						 КонецЕсли;
						 
					 КонецЕсли;
					 	 
					 Если СтрРеквизит.Значение.Количество()>1 Тогда
						 НоваяСтрока.ДанныеРеквизита=СтрРеквизит.Ключ+"vzvСсылка";
					 КонецЕсли;
					 
					 СтрАналитика.ЕстьСсылочные=Истина;
					 
					 ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,СтрАналитика.ТаблицаАналитики,МассивПуть[0],СтрАналитика.РазделятьПоОрганизациям);
					 
					 Для Каждого СтрТаблица ИЗ СтрРеквизит.Значение Цикл
						 
						 МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитики",СтрРеквизит.Ключ,СтрТаблица));
						 ДобавитьСтрокиПодчиненныхРеквизитов(СтрАналитика,СтрРеквизит.Ключ,МассивРеквизитов,МассивПуть[0],КэшНайденныхЗначений,СтруктураПодчиненныхРеквизитов,ПравилаИспользованияПолей,ТаблицаИмпорта.Колонки);
						 
					 КонецЦикла;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
	 КонецЦикла;	 

	 ///////////////////////////////////////////////////////////////////////////////////////////////
	 // Создадим новые элементы и обновим существующие
	 
	 Попытка
		 		 
		 Для Каждого СтрДанные Из ТаблицаИмпорта Цикл
			 
			 ФлагОшибкиИмпортаТек=Ложь;
			 
			 Для Каждого Аналитика ИЗ СтруктураКлючевыхРеквизитов Цикл
				 
				 ЕстьИерархияГрупп=Ложь;
				 
				 ДанныеРеквизитов=ДеревоРеквизитов.Строки.Найти(Аналитика.Ключ,"КодАналитики");
				 
				 Если ЗначениеЗаполнено(ДанныеРеквизитов.ПолеТаблицаАналитикиВИБ) И (НЕ СтрДанные[ДанныеРеквизитов.ПолеТаблицаАналитикиВИБ]=ДанныеРеквизитов.ТаблицаАналитикиВИБ) Тогда
					 
					 Продолжить;
					 
				 КонецЕсли;
				 
				 Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"Справочник.")>0 Тогда
					 					 
					 ИмяСправочника=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"Справочник.","");
					 
					 МетаДанныеОбъекта=Метаданные.Справочники[ИмяСправочника]; 
					 ЕстьИерархияГрупп=(МетаДанныеОбъекта.Иерархический И МетаДанныеОбъекта.ВидИерархии=Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов);
					 
				ИначеЕсли СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"ПланВидовХарактеристик.")>0 Тогда
									
					 ИмяСправочника=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"ПланВидовХарактеристик.","");
					 
					 МетаДанныеОбъекта=Метаданные.ПланыВидовХарактеристик[ИмяСправочника]; 
					 ЕстьИерархияГрупп=МетаДанныеОбъекта.Иерархический;
					 
				 КонецЕсли;	 
				 
				 Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.")>0 Тогда
					 
					 ИмяПеречисления=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.","");
					 ТекЗначениеПеречисления=ОбщегоНазначенияУХ.ПолучитьЗначениеПеречисленияПоИмени(ИмяПеречисления,СтрДанные[ДанныеРеквизитов.КодАналитики+"vzv1EnumValue"],ДанныеРеквизитов.НастройкаСоответствия);
					 
					 Если ТекЗначениеПеречисления=Неопределено Тогда
						 
						 ФлагОшибкиИмпортаТек=Истина; 
						 
						 ТекстСообщения = НСтр("ru = 'При импорте объекта %КодАналитики% не удалось получить значение перечисления
						 |						 %ТаблицаАналитики%: %ДанныеРеквизита%'");
						 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
						 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитики%", Строка(ДанныеРеквизитов.ТаблицаАналитики));
						 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеРеквизита%", Строка(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]));
						 ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ЗаполнитьНедостающиеАналитики.1007",ДанныеРеквизитов.ОбъектМетаДанных, ДанныеРеквизитов.КодАналитики+"."+ДанныеРеквизитов.ТаблицаАналитики, ТекстСообщения);
						 
						 Продолжить;
						 
					 Иначе
						 
						 СтрДанные[Аналитика.Ключ]=ТекЗначениеПеречисления;
						 
					 КонецЕсли;			 
					 
				 ИначеЕсли НЕ ЗначениеЗаполнено(СтрДанные[Аналитика.Ключ]) Тогда
					 
					 ПустоеЗначениеАналитики = Истина; // Признак того, что импортируется запись с неопределенным значением аналитики.
					 
					 Для Каждого СтрРеквизит Из ДанныеРеквизитов.ПримитивныеРеквизиты Цикл
						 Если ЗначениеЗаполнено(СтрДанные[СтрРеквизит.ДанныеРеквизита]) И (НЕ СтрДанные[СтрРеквизит.ДанныеРеквизита]=Ложь) Тогда
							 ПустоеЗначениеАналитики = Ложь;
							 Прервать;
						 КонецЕсли;
					 КонецЦикла;
					 
					 Если ПустоеЗначениеАналитики Тогда
						 
						 СтрДанные[Аналитика.Ключ] = КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики(ДанныеРеквизитов.ТаблицаАналитики);
						 
					 ИначеЕсли ДанныеРеквизитов.СоздаватьНовые И НЕ РежимРасшифровки Тогда
						 
						 Если НЕ ДанныеРеквизитов.ЕстьСсылочные Тогда
							 
							 СтруктураПоиска=Новый Структура;
							 
							 Для Каждого СтрРеквизит ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл
								 
								 Если НЕ СтрРеквизит.НеИспользоватьДляСинхронизации=Истина Тогда
									 СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,СтрДанные[СтрРеквизит.ДанныеРеквизита]);
								 КонецЕсли;
								 
							 КонецЦикла;
							 
							 Если ДанныеРеквизитов.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
								 
								 СтруктураПоиска.Вставить("ИмяОбъектаМетаданных",ДанныеРеквизитов.ИмяОбъектаМетаДанных);
								 
							 КонецЕсли;
							 
							 Если ДанныеРеквизитов.РазделятьПоОрганизациям И ЗначениеЗаполнено(КонтекстОтчета.Организация) Тогда
								 
								 СтруктураПоиска.Вставить("Организация",КонтекстОтчета.Организация);
								 
							 КонецЕсли;
							 
							 НайденныеСтроки=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].НайтиСтроки(СтруктураПоиска);
							 
							 Если НайденныеСтроки.Количество()>0 Тогда
								 
								 СтрДанные[Аналитика.Ключ]=НайденныеСтроки[0]._Ссылка_;
								 
							 Иначе
								 
								 ЭлементАналитики=ПолучитьЭлементАналитики(СтрДанные,
								 ДанныеРеквизитов,
								 КэшНайденныхЗначений,
								 КонтекстОтчета,
								 ФлагОшибкиИмпортаТек,
								 КэшСозданныхОбъектов);
								 
								 Если НЕ ФлагОшибкиИмпортаТек Тогда
									 
									 СтрДанные[Аналитика.Ключ]=ЭлементАналитики;
									 
								 КонецЕсли;		
								 
							 КонецЕсли;
							 
						 Иначе
							 
							 ЭлементАналитики=ПолучитьЭлементАналитики(СтрДанные,
							 ДанныеРеквизитов,
							 КэшНайденныхЗначений,
							 КонтекстОтчета,
							 ФлагОшибкиИмпортаТек,
							 КэшСозданныхОбъектов);
							 
							 Если НЕ ФлагОшибкиИмпортаТек Тогда
								 
								 СтрДанные[Аналитика.Ключ]=ЭлементАналитики;
								 
							 КонецЕсли;
							 
						 КонецЕсли;
						 
					 Иначе // если флажок создания при неудачном поиске не взведен...
						 
						 ФлагОшибкиИмпорта=Истина;
						 
						 ТекстСообщения="";
						 ТекстАналитики="";
						 
						 Для Каждого Строка ИЗ ПравилаИспользованияПолей Цикл
							 
							 Если ПустаяСтрока(Строка.РеквизитАналитики) Тогда
								 
								 Продолжить;
								 
							КонецЕсли;
							 
							 Если СтрНайти(Строка.Синоним,Аналитика.Ключ)>0 И НЕ Строка.НеИспользоватьДляСинхронизации Тогда
								 
								 ТекстСообщения=ТекстСообщения+(Строка.РеквизитАналитики+" - "+СтрДанные[Строка.Синоним])+Символы.ПС;
								 ТекстАналитики=?(Строка.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ",Строка.АналитикаОперанда,ДанныеРеквизитов.ОбъектМетаДанных.Синоним);
								 
							 КонецЕсли;
							 
						 КонецЦикла;
						 
						 ТекстОшибки = НСтр("ru = 'Не удается найти элемент эталонного классификатора %ТекстАналитики%.
						 |Значения реквизитов аналитики: 
						 |%ТекстСообщения%'");
						 ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстАналитики%", Строка(ТекстАналитики));
						 ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстСообщения%", Строка(ТекстСообщения));
						 ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ЗаполнитьНедостающиеАналитики.1008", ДанныеРеквизитов.ОбъектМетаДанных, ДанныеРеквизитов.КодАналитики+"."+ДанныеРеквизитов.ТаблицаАналитики, ТекстОшибки);
						 
						 ФлагОшибкиИмпортаТек=Истина;
						 
					 КонецЕсли;
					 
				 ИначеЕсли (КонтекстОтчета.Свойство("ОбновлениеДочернихЭлементов") ИЛИ ДанныеРеквизитов.ОбновлятьРеквизитыПриИмпорте) И ЗначениеЗаполнено(СтрДанные[Аналитика.Ключ]) И НЕ РежимРасшифровки Тогда
					 
					 ЕстьИзменения=Ложь;
					 ЕстьСвязаннаяИнформация=Ложь;
					 СтруктураЗаписи=Новый Структура;
					 
					 СтрокаГруппа=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("ЭтоГруппа","ИмяРеквизита");
					 
					 Если СтрокаГруппа=Неопределено Тогда
						 Если ЕстьИерархияГрупп Тогда
							 ЭтоГруппа=СтрДанные[Аналитика.Ключ].ЭтоГруппа;
						 Иначе	 
							 ЭтоГруппа=Ложь;
						 КонецЕсли;
					 Иначе
						 ЭтоГруппа=СтрДанные[СтрокаГруппа.ДанныеРеквизита];
					 КонецЕсли;
					 
					 Если КонтекстОтчета.Свойство("ТабОбъектовДляВыгрузки") Тогда
						 КонтекстОтчета.Вставить("СтруктураЗначенийРеквизитов",Новый Структура("НСИ_ВИБ",КонтекстОтчета.НСИ_ВИБ));
					 КонецЕсли;
					 
					 ДанныеРеквизитов.СсылочныеРеквизиты.Сортировать("ИмяРеквизита");
					 
					 Владелец=Неопределено;
					 
					 Для ИндексРеквизита=0 ПО ДанныеРеквизитов.СсылочныеРеквизиты.Количество()-1 Цикл
						 
						 СтрРеквизит=ДанныеРеквизитов.СсылочныеРеквизиты[ИндексРеквизита];
						 
						 Если НЕ ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 ЗначениеРеквизита=Неопределено;
						 
						 МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
						 
						 Если МассивРеквизитов.Количество()=1 Тогда 
							 
							 ЗначениеРеквизита=ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
							 МассивРеквизитов[0],
							 КэшНайденныхЗначений,
							 КонтекстОтчета,
							 ФлагОшибкиИмпортаТек,
							 КэшСозданныхОбъектов,
							 ДанныеРеквизитов.КодАналитики,
							 ДанныеРеквизитов.ТаблицаАналитики,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
							 
						 ИначеЕсли МассивРеквизитов.Количество()>1 Тогда
							 
							 ТаблицаАналитики=СтрДанные[СтрРеквизит.ДанныеРеквизита];
							 
							 Если ЗначениеЗаполнено(ТаблицаАналитики) Тогда
								 
								 МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита,ТаблицаАналитики",СтрРеквизит.ИмяРеквизита,ТаблицаАналитики));
								 
								 Если МассивРеквизитов.Количество()=1 Тогда 
									 
									 ЗначениеРеквизита=ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
									 МассивРеквизитов[0],
									 КэшНайденныхЗначений,
									 КонтекстОтчета,
									 ФлагОшибкиИмпортаТек,
									 КэшСозданныхОбъектов,
									 ДанныеРеквизитов.КодАналитики,
									 ДанныеРеквизитов.ТаблицаАналитики,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
									 
								 КонецЕсли;
								 
							 КонецЕсли;
							 
						 Иначе
							 
							 Продолжить;
							 
						 КонецЕсли;
						 
						 Если ФлагОшибкиИмпортаТек Тогда
							 
							 Продолжить;
							 
						 Иначе
							 
							 Если ЗначениеЗаполнено(ЗначениеРеквизита)
								 И НЕ СтрДанные[Аналитика.Ключ][СтрРеквизит.ИмяРеквизита]=ЗначениеРеквизита Тогда
								 
								 СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);	
								 ЕстьИзменения=Истина;
								 
							 КонецЕсли;
							 
						 КонецЕсли;	
						 
						 Если СтрРеквизит.ИмяРеквизита="Владелец" Тогда
							 
							 Владелец=ЗначениеРеквизита;
							 
						 КонецЕсли;
						 
					 КонецЦикла;
					 
					 Для Каждого СтрРеквизит ИЗ ДанныеРеквизитов.ФиксированныеРеквизиты Цикл
						 
						 Если НЕ ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Если НЕ СтрДанные[Аналитика.Ключ][СтрРеквизит.ИмяРеквизита]=СтрРеквизит.ФиксированноеЗначение Тогда
							 
							 СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);	
							 ЕстьИзменения=Истина;
							 
						 КонецЕсли;
						 
					 КонецЦикла;
					 
					 Если ДанныеРеквизитов.НастройкаСоответствия.ТипОбъектаВИБ="ТаблицаADO" Тогда
						 
						 Продолжить;
						 
					 КонецЕсли;
					 	 
					 Если НЕ ФлагОшибкиИмпортаТек Тогда
						 
						 Для Каждого СтрПоля ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл 
							 
							 Если СтрПоля.ИмяРеквизита="ЭтоГруппа" ИЛИ
								 СтрПоля.ИмяРеквизита="Ref" ИЛИ
								 СтрДанные[СтрПоля.ДанныеРеквизита]=Ложь ИЛИ 
								 (НЕ (ЗначениеЗаполнено(СтрДанные[СтрПоля.ДанныеРеквизита]) И ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа))) Тогда
								 Продолжить;
							 КонецЕсли;
							 
							 Если (НЕ СокрЛП(СтрДанные[Аналитика.Ключ][СтрПоля.ИмяРеквизита])=СокрЛП(СтрДанные[СтрПоля.ДанныеРеквизита]))
								 И ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа) Тогда
								 
								 СтруктураЗаписи.Вставить(СтрПоля.ИмяРеквизита,СокрЛП(СтрДанные[СтрПоля.ДанныеРеквизита]));
								 ЕстьИзменения=Истина;
								 
							 КонецЕсли;
							 
						 КонецЦикла;
						 						 
						 НаборЗаписей=РегистрыСведений.СоответствиеОбъектовТекущейИВнешнихИБ.СоздатьНаборЗаписей();
						 
						 КолонкаСсылка			=?(ТаблицаИмпорта.Колонки.Найти(ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылка")				=Неопределено,ДанныеРеквизитов.КодАналитики+"vzvRef",				ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылка");
						 КолонкаПредставление	=?(ТаблицаИмпорта.Колонки.Найти(ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылкаПредставление")	=Неопределено,ДанныеРеквизитов.КодАналитики+"vzvRefПредставление",	ДанныеРеквизитов.КодАналитики+"vzvЭлементСсылкаПредставление");
						 
						 НаборЗаписей.Отбор.НастройкаСоответствия	.Установить(ДанныеРеквизитов.НастройкаСоответствия);
						 НаборЗаписей.Отбор.ОбъектТекущейИБ			.Установить(СтрДанные[Аналитика.Ключ]);
						 НаборЗаписей.Отбор.ИспользуемаяИБ			.Установить(КонтекстОтчета.ИспользуемаяИБ);
						 НаборЗаписей.Отбор.ОбъектВнешнейИБ			.Установить(СтрДанные[КолонкаСсылка]);
						 
						 НоваяСтрока=НаборЗаписей.Добавить();
						 
						 НоваяСтрока.НастройкаСоответствия			= ДанныеРеквизитов.НастройкаСоответствия;
						 НоваяСтрока.ОбъектТекущейИБ				= СтрДанные[Аналитика.Ключ];
						 НоваяСтрока.ИспользуемаяИБ					= КонтекстОтчета.ИспользуемаяИБ;
						 НоваяСтрока.ОбъектВнешнейИБ				= СтрДанные[КолонкаСсылка];
						 НоваяСтрока.НаименованиеОбъектаВнешнейИБ	= СтрДанные[КолонкаПредставление];
						 
						 НаборЗаписей.Записать(Истина);
						 						 
						 Если ДанныеРеквизитов.НастройкаСоответствия.СоответствияСвязанныхОбъектов.Количество()>0 ИЛИ ЕстьИзменения Тогда 
							 
							 ТекОбъект = СтрДанные[Аналитика.Ключ].ПолучитьОбъект();
							 
							 Если (НЕ ТекОбъект.Этогруппа) И ДанныеРеквизитов.НастройкаСоответствия.СоответствияСвязанныхОбъектов.Количество()>0 Тогда
								 
								 ОбновитьДанныеСвязанныхОбъектов(КонтекстОтчета,ТекОбъект,ДанныеРеквизитов.НастройкаСоответствия);
								 ЕстьСвязаннаяИнформация=Истина;
								 
							 КонецЕсли;
							 
							 Если ЕстьИзменения Тогда
								 
								 ЗаполнитьЗначенияСвойств(ТекОбъект, СтруктураЗаписи);
								 
							 КонецЕсли;
							 
							 Если КонтекстОтчета.Загрузка Тогда
								 ТекОбъект.ОбменДанными.Загрузка=Истина;
							 КонецЕсли;
							 
							 Если ЕстьИзменения ИЛИ ЕстьСвязаннаяИнформация Тогда 
								 
								 Попытка
									 
									 ТекОбъект.Записать();
									 
								 Исключение
									 
									 ТекстСообщения = НСтр("ru = 'Не удалось обновить данные по элементу справочника %Наименование%.'");
									 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Наименование%", Строка(ТекОбъект.Наименование));
									 ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ЗаполнитьНедостающиеАналитики.1009", ТекОбъект.МетаДанные(), , ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
									 
								 КонецПопытки;
								 
							 КонецЕсли;
							 
							 ТекОбъект = Неопределено;
							 
						 КонецЕсли;
						 
					 КонецЕсли;
					 
				 КонецЕсли;
				 
			 КонецЦикла;
			 
			 Если ФлагОшибкиИмпортаТек Тогда
				 КонтекстОтчета.Вставить("ФлагОшибкиИмпорта",Истина);
			 КонецЕсли;
			 
		 КонецЦикла; 
		 
		 Если ЗначениеЗаполнено(КонтекстОтчета.ИспользуемаяИБ) Тогда
			 
			 ///////////////////////////////////////////////////////////
			 // Выясним настройки соответствия для вновь созданных объектов,
			 // по которым требуется дополнительное получение данных.
			 
			 СоответствиеДляЗагрузки=Новый Соответствие; 
			 МассивНастроек=Новый Массив;
			 
			 Для Каждого СтрСсылка ИЗ КэшСозданныхОбъектов Цикл
				 
				 Если ЗначениеЗаполнено(СтрСсылка.НастройкаСоответствияРеквизит) И
					 МассивНастроек.Найти(СтрСсылка.НастройкаСоответствияРеквизит)=Неопределено Тогда
					 
					 МассивНастроек.Добавить(СтрСсылка.НастройкаСоответствияРеквизит);
					 
				 КонецЕсли;
				 
			 КонецЦикла;
			 
			 Если МассивНастроек.Количество()>0 Тогда
				 
				 Запрос=Новый Запрос;
				 Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
				 |	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка,
				 |	СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка.ТипОбъектаВИБ КАК ТипОбъектаВИБ
				 |ИЗ
				 |	Справочник.СоответствиеВнешнимИБ.СоответствиеРеквизитов КАК СоответствиеВнешнимИБСоответствиеРеквизитов
				 |ГДЕ
				 |	НЕ СоответствиеВнешнимИБСоответствиеРеквизитов.ПримитивныйТип
				 |	И СоответствиеВнешнимИБСоответствиеРеквизитов.Ссылка В(&Массив)";
				 
				 Запрос.УстановитьПараметр("Массив",МассивНастроек);
				 
				 Результат=Запрос.Выполнить();	 
				 
				 Если НЕ Результат.Пустой() Тогда
					 
					 КэшСозданныхОбъектов.Индексы.Добавить("НастройкаСоответствияРеквизит");
					 
					 СтрНастройка=Результат.Выбрать();
					 
					 Пока СтрНастройка.Следующий() Цикл
						 
						 СписокЭлементов=Новый СписокЗначений;
						 
						 МассивЭлементов=КэшСозданныхОбъектов.НайтиСтроки(Новый Структура("НастройкаСоответствияРеквизит",СтрНастройка.Ссылка));
						 
						 Для Каждого СтрЭлемент ИЗ МассивЭлементов Цикл
							 
							 СписокЭлементов.Добавить(СтрЭлемент.Ссылка);
							 
						 КонецЦикла;
						 
						 Если СтрНастройка.ТипОбъектаВИБ="ТаблицаADO" Тогда
							 
							 ИнтеграцияСВнешнимиСистемамиУХ.ЗагрузитьОбъектыИзADO(КонтекстОтчета.ИспользуемаяИБ,СтрНастройка.Ссылка,
							 Неопределено,
							 СписокЭлементов,Истина);
							 
						 Иначе
							 
							 ИнтеграцияСВнешнимиСистемамиУХ.ЗагрузитьОбъектыИзВИБ(КонтекстОтчета.ИспользуемаяИБ,СтрНастройка.Ссылка,
							 Неопределено,
							 СписокЭлементов,,Истина);
							 
						 КонецЕсли;
						 
					 КонецЦикла;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
		 ИначеЕсли КонтекстОтчета.Свойство("ТабОбъектовДляВыгрузки") Тогда
			 
			 ТекОбъектыДляВыгрузки=КонтекстОтчета.ТабОбъектовДляВыгрузки.Скопировать();
			 ТекОбъектыДляВыгрузки.Свернуть("ТаблицаАналитики");
			 
			 Для Каждого СтрТаблица ИЗ ТекОбъектыДляВыгрузки Цикл 
				 
				 МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрТаблица.ТаблицаАналитики,".");
				 ТипОбъектаМетаданных=МетаданныеОбъекта[0];
				 ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
				 
				 СписокОбъектов=Новый СписокЗначений;
				 
				 МассивДанныхВыгрузки=КонтекстОтчета.ТабОбъектовДляВыгрузки.НайтиСтроки(Новый Структура("ТаблицаАналитики",СтрТаблица.ТаблицаАналитики));
				 
				 Для Каждого СтрОбъект ИЗ МассивДанныхВыгрузки Цикл
					 
					 ОбъектДляВыгрузки=ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьЭлементАналитикиДляВыгрузки(СтрОбъект);
					 
					 Если НЕ ОбъектДляВыгрузки=Неопределено Тогда 
						 
						 СписокОбъектов.Добавить(ОбъектДляВыгрузки);
						 
					 КонецЕсли;
					 
				 КонецЦикла;
				 
				 ИнтеграцияСВнешнимиСистемамиУХ.КопироватьОбъектыНСИ(ТипОбъектаМетаданных,ИмяОбъектаМетаданных,СписокОбъектов,КонтекстОтчета.НСИ_ВИБ);
				 
			 КонецЦикла;
			 
		 КонецЕсли;
		 
	 Исключение
		
		 ТекстОшибки = НСтр("ru = 'Ошибка при получении данных: '");
		 ТекстОшибки = ТекстОшибки + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		 ОБщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, , , СтатусСообщения.Важное);		 		 
		 
	 КонецПопытки;
	 
 КонецПроцедуры // ЗаполнитьНедостающиеАналитики() 
 
Процедура ОбновитьДанныеСвязанныхОбъектов(КонтекстОтчета,ТекОбъект,НастройкаСоответствияРодитель)
		
	Для Каждого СтрокаСвязь ИЗ НастройкаСоответствияРодитель.СоответствияСвязанныхОбъектов Цикл
		
		ДанныеИсточника=Новый Структура;
		ДанныеИсточника.Вставить("ТипОбъектаВИБ",СтрокаСвязь.ТипОбъектаВИБ);
		ДанныеИсточника.Вставить("ОписаниеОбъектаВИБ",СтрокаСвязь.ОписаниеОбъектаВИБ);				
		ДанныеИсточника.Вставить("ПолеОтбора",?(СтрокаСвязь.ТипОбъектаВИБ="РегистрСведений",СтрокаСвязь.ИзмерениеРегистраВИБ,"Ссылка"));
		ДанныеИсточника.Вставить("ТаблицаАналитики",?(СтрокаСвязь.ТипОбъектаВИБ="РегистрСведений","РегистрСведений."+СтрокаСвязь.ОписаниеОбъектаВИБ,"Справочник."+НастройкаСоответствияРодитель.ИмяОбъектаМетаданных+"."+СтрокаСвязь.ОписаниеОбъектаВИБ.Имя));
			
		ТаблицаЗаписей=ПолучитьТаблицуСвязанныхЗаписей(КонтекстОтчета,СтрокаСвязь.НастройкаСоответствия,ТекОбъект.Ссылка, ДанныеИсточника);
		
		Если СтрокаСвязь.ТипОбъектаТек="РегистрСведений" Тогда
			
			НаборЗаписей=РегистрыСведений[СтрокаСвязь.ОписаниеОбъектаТек.Наименование].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор[СтрокаСвязь.ИзмерениеРегистраТек].Установить(ТекОбъект.Ссылка);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Для Каждого Строка ИЗ ТаблицаЗаписей Цикл
				
				НоваяСтрока=НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				НоваяСтрока[СтрокаСвязь.ИзмерениеРегистраТек]=ТекОбъект.Ссылка;
				
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		Иначе
			
			ТекОбъект[СтрокаСвязь.ОписаниеОбъектаТек.Имя].Очистить();
			
			Для Каждого Строка ИЗ ТаблицаЗаписей Цикл
				
				НоваяСтрока=ТекОбъект[СтрокаСвязь.ОписаниеОбъектаТек.Имя].Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЦикла;
			
		КонецЕсли;
			
	КонецЦикла;
			
КонецПроцедуры // ОбновитьДанныеСвязанныхОбъектов()
	
Функция ПолучитьТаблицуСвязанныхЗаписей(КонтекстОтчета,НастройкаСоответствия,Ссылка, ДанныеИсточника)
	
	ПравилаИспользованияПолей = ПолучитьОписаниеТаблицыПравилаИспользованияПолей();
	ПравилаИспользованияПолей.Колонки.Добавить("ПолеТаблицаАналитикиВИБ",ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(150));
	ПравилаИспользованияПолей.Колонки.Добавить("ПолеАналитики",ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(150));
	
	СвязаннаяТаблица=Новый ТаблицаЗначений;
	
	СоответствиеПолей=Новый Структура;
	
	Для Каждого СтрПоле ИЗ НастройкаСоответствия.СоответствиеРеквизитов Цикл
		
		Если СтрПоле.ПримитивныйТип Тогда
			
			МассивСтрок=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.РеквизитОбъектаВнешнейИБ,".");
			
			Если МассивСтрок.Количество()=2 И МассивСтрок[1]="Ссылка" Тогда
				
				СоответствиеПолей.Вставить(МассивСтрок[0],МассивСтрок[0]+"vzvСсылка");
				
			КонецЕсли;
				
			Если НЕ ПравилаИспользованияПолей.Найти(СтрПоле.РеквизитОбъектаВнешнейИБ,"Поле")=Неопределено Тогда
				
				Если НЕ ЗначениеЗаполнено(СтрПоле.ТаблицаАналитикиВИБ) Тогда
					
					Продолжить;
					
				Иначе
					
					НоваяСтрока=ПравилаИспользованияПолей.Добавить();
					НоваяСтрока.Поле=СтрПоле.РеквизитОбъектаВнешнейИБ;
					НоваяСтрока.Синоним		=СтрПоле.РеквизитОбъектаВнешнейИБ+"vzPrim";
					НоваяСтрока.КодАналитики=СтрПоле.РеквизитОбъектаКонсолидации+"vzPrim";
					
				КонецЕсли;
								
			Иначе
				
				НоваяСтрока=ПравилаИспользованияПолей.Добавить();
				НоваяСтрока.Поле=СтрПоле.РеквизитОбъектаВнешнейИБ;
				НоваяСтрока.Синоним		=?(ЗначениеЗаполнено(СтрПоле.ТаблицаАналитикиВИБ),СтрПоле.РеквизитОбъектаВнешнейИБ+"vzPrim",СтрПоле.РеквизитОбъектаВнешнейИБ);
				НоваяСтрока.КодАналитики=?(ЗначениеЗаполнено(СтрПоле.ТаблицаАналитикиВИБ),СтрПоле.РеквизитОбъектаКонсолидации+"vzPrim",СтрПоле.РеквизитОбъектаКонсолидации);
				
			КонецЕсли;
			
		Иначе
			
			НоваяСтрока=ПравилаИспользованияПолей.Добавить();
			НоваяСтрока.Поле				= СтрПоле.РеквизитОбъектаВнешнейИБ;
			НоваяСтрока.Синоним				= СтрПоле.РеквизитОбъектаВнешнейИБ;
			НоваяСтрока.КодАналитики		= СтрПоле.РеквизитОбъектаКонсолидации+"vzt"+СтрПоле.НастройкаСоответствия.ТипОбъектаКонсолидации+"vzt"+СтрПоле.НастройкаСоответствия.ИмяОбъектаМетаданных;
			НоваяСтрока.ТаблицаАналитикиВИБ	= СтрПоле.НастройкаСоответствия.ТипОбъектаВИБ+"."+СтрПоле.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
				
		КонецЕсли;
		
		НоваяСтрока.СоздаватьНовые=Истина;
		НоваяСтрока.РазделятьПоОрганизациям=Ложь;
		НоваяСтрока.ОбновлятьРеквизитыПриИмпорте=Истина;
		НоваяСтрока.НастройкаСоответствия=СтрПоле.НастройкаСоответствия;
		НоваяСтрока.СпособЗаполнения=Перечисления.СпособыЗаполненияПолейИсточника.ПолеИсходнойТаблицы;
		НоваяСтрока.ФиксированноеЗначение = Неопределено;
		НоваяСтрока.ПолеАналитики=СтрПоле.РеквизитОбъектаКонсолидации;
		
		Если СвязаннаяТаблица.Колонки.Найти(СтрПоле.РеквизитОбъектаКонсолидации)=Неопределено Тогда
			
			СвязаннаяТаблица.Колонки.Добавить(СтрПоле.РеквизитОбъектаКонсолидации);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение ИЗ СоответствиеПолей Цикл
		
		МассивПолей=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("Синоним",КлючИЗначение.Ключ));
		
		Для Каждого Поле ИЗ МассивПолей Цикл
			
			Поле.ПолеТаблицаАналитикиВИБ=КлючИЗначение.Значение;
			
		КонецЦикла;
		
	КонецЦикла;
		
	СтрЗапрос=Новый Структура;
	
	ПравилаВычисленияПараметров=Новый ТаблицаЗначений;
	ПравилаВычисленияПараметров.Колонки.Добавить("ИмяПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ПравилаВычисленияПараметров.Колонки.Добавить("ПолеБД",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ПравилаВычисленияПараметров.Колонки.Добавить("ПредставлениеПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	ПравилаВычисленияПараметров.Колонки.Добавить("СпособВычисленияПараметра",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.СпособыВычисленияПараметровОперандов"));
	ПравилаВычисленияПараметров.Колонки.Добавить("УточнениеСпособаОпределения");
	ПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеДляПроверки");
	ПравилаВычисленияПараметров.Колонки.Добавить("ТипРасчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(50));
	ПравилаВычисленияПараметров.Колонки.Добавить("Реквизит",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(10));
	ПравилаВычисленияПараметров.Колонки.Добавить("СмещениеПериода",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3));
	ПравилаВычисленияПараметров.Колонки.Добавить("НастройкаСоответствия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	
	НоваяСтрока=ПравилаВычисленияПараметров.Добавить();
	НоваяСтрока.ИмяПараметра=ДанныеИсточника.ПолеОтбора;
	НоваяСтрока.ПолеБД=ДанныеИсточника.ПолеОтбора;
	НоваяСтрока.ПредставлениеПараметра=ДанныеИсточника.ПолеОтбора;
	НоваяСтрока.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
	НоваяСтрока.УточнениеСпособаОпределения=Ссылка;
	НоваяСтрока.НастройкаСоответствия=НастройкаСоответствия.НастройкаСоответствияРодитель;
	НоваяСтрока.ТипРасчета="Простой";
	
	ТекПравилаВычисленияПараметров=ПолучитьРабочуюТаблицуВычисленияПараметров(ПравилаВычисленияПараметров);	
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	СтрЗапрос.Вставить("ПравилаВычисленияПараметров",ТекПравилаВычисленияПараметров);
	
	СтрЗапрос.Вставить("ПланСчетов");
	
	ТекстПоля="";
		
	Если ДанныеИсточника.ТипОбъектаВИБ="РегистрСведений" Тогда
		
		Если ДанныеИсточника.ОписаниеОбъектаВИБ.Периодический Тогда
			
			ТекстЗапроса="ВЫБРАТЬ Период";
			
		Иначе
			
			ТекстЗапроса="ВЫБРАТЬ 1 КАК ФиктивноеПоле";
			
		КонецЕсли;
		
		Для Каждого СтрРесурс ИЗ ДанныеИсточника.ОписаниеОбъектаВИБ.Ресурсы Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрРесурс.Имя+".*";
			
		КонецЦикла;
		
		Для Каждого СтрИзмерение ИЗ ДанныеИсточника.ОписаниеОбъектаВИБ.Измерения Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрИзмерение.Имя+".*";
			
		КонецЦикла;
		
		Для Каждого СтрРеквизит ИЗ ДанныеИсточника.ОписаниеОбъектаВИБ.Реквизиты Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрРеквизит.Имя+".*";
			
		КонецЦикла;
		
	Иначе
		
		ТекстЗапроса="ВЫБРАТЬ 1 КАК ФиктивноеПоле";
		
		Для Каждого СтрРеквизит ИЗ ДанныеИсточника.ОписаниеОбъектаВИБ.Реквизиты Цикл
			
			ТекстПоля=ТекстПоля+",
			|"+СтрРеквизит.Имя+".*";
			
		КонецЦикла;
		
	КонецЕсли;

	ТекстЗапроса=ТекстЗапроса+"
	|{ВЫБРАТЬ "+Сред(ТекстПоля,2)+"}
	|ИЗ "+ДанныеИсточника.ТаблицаАналитики;
	
	ТекстЗапроса=ТекстЗапроса+"
	|{ГДЕ "+ДанныеИсточника.ПолеОтбора+"}";
	
	СтрЗапрос.Вставить("ТекстЗапроса",ТекстЗапроса);
	СтрЗапрос.Вставить("СпособПолучения");
	
	ТабПравилаРабочие=ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей,Ложь,Ложь,Ложь,Истина,Истина);
	
	СтруктураЗапроса=Новый Структура;
	СтруктураЗапроса.Вставить("СтруктураПолей",Новый Структура("ПравилаИспользованияПолей",ТабПравилаРабочие));
	
	СтрЗапрос.Вставить("СтруктураЗапроса",СтруктураЗапроса);
	
	СтруктураЗапроса = ПодготовитьСтруктуруЗапроса(КонтекстОтчета,СтрЗапрос);		

	ТаблицаДанных= ПолучитьТаблицуДанныхПоЗапросу(СтруктураЗапроса);
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////
	// ЗАПОЛНЯЕМ НЕДОСТАЮЩИЕ АНАЛИТИКИ
	
	СтруктураКлючевыхРеквизитов=Новый Структура;
	СтруктураПодчиненныхРеквизитов=Новый Структура;
	
	Результат=ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ТабПравилаРабочие,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,КонтекстОтчета);	
	ЗаполнитьНедостающиеАналитики(КонтекстОтчета,
										Результат,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										Ложь,
										ТабПравилаРабочие);
	
	Для Каждого Строка ИЗ Результат Цикл
		
		НоваяСтрока=СвязаннаяТаблица.Добавить();
		
		Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
			
			Если Результат.Колонки.Найти(СтрПоле.КодАналитики)=Неопределено Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка[СтрПоле.КодАналитики]) Тогда
				
				НоваяСтрока[СтрПоле.ПолеАналитики]=Строка[СтрПоле.КодАналитики];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;										
										
	Возврат СвязаннаяТаблица;
										
				
КонецФункции // ПолучитьТаблицуСвязанныхЗаписей()

Функция НеИспользоватьДляСинхронизацииПодчиненный(ИмяРеквизита,НастройкаСоответствияРеквизит,НеИспользоватьДляСинхронизацииТек)
		
	Если (НЕ НеИспользоватьДляСинхронизацииТек) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НастройкаСоответствияРеквизит) Тогда
		
		СтрокаРеквизит=НастройкаСоответствияРеквизит.СоответствиеРеквизитов.Найти(ИмяРеквизита,"РеквизитОбъектаКонсолидации");
		
		Если СтрокаРеквизит=Неопределено Тогда
			
			Возврат НеИспользоватьДляСинхронизацииТек;
			
		Иначе
			
			Возврат СтрокаРеквизит.НеИспользоватьДляСинхронизации;
			
		КонецЕсли;
		
	Иначе
		
		Возврат НеИспользоватьДляСинхронизацииТек;
		
	КонецЕсли;
		
КонецФункции // НеИспользоватьДляСинхронизацииПодчиненный()

 
 Функция ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
	ДанныеРеквизитов,
	КэшНайденныхЗначений,
	КонтекстОтчета,
	ФлагОшибкиИмпортаТек,
	КэшСозданныхОбъектов,
	КодИсходнойАналитики,
	ТаблицаИсходнойАналитики,
	Владелец=Неопределено)
	
	СтруктураЗаписи=Новый Структура;
	СтруктураПоиска=Новый Структура;
	СтруктураОбновление=Новый Структура;
	
	СтрокаGUID=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("Ref","ИмяРеквизита");
	
	Если НЕ СтрокаGUID=Неопределено Тогда
		
		Возврат ПолучитьОбъектТекущейИБПоGUIDВнешней(ДанныеРеквизитов,КэшНайденныхЗначений,КонтекстОтчета,СтрДанные[СтрокаGUID.ДанныеРеквизита])
		
	КонецЕсли;	
	
	СтрокаГруппа=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("ЭтоГруппа","ИмяРеквизита");
	
	Если СтрокаГруппа=Неопределено Тогда
		ЭтоГруппа=Ложь;
	Иначе
		ЭтоГруппа=СтрДанные[СтрокаГруппа.ДанныеРеквизита];
	КонецЕсли;
	
	Для Каждого СтрРеквизит ИЗ ДанныеРеквизитов.ФиксированныеРеквизиты Цикл
		
		Если НЕ ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);
		
		Если (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
			
			СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);
			
		КонецЕсли;
		
		СтруктураОбновление.Вставить(СтрРеквизит.ИмяРеквизита,СтрРеквизит.ФиксированноеЗначение);
		
	КонецЦикла;
	
	Если ДанныеРеквизитов.ЕстьСсылочные Тогда
		
		ДанныеРеквизитов.СсылочныеРеквизиты.Сортировать("ИмяРеквизита");
		
		ВладелецПодчиненный=Неопределено;
		
		Для ИндексРеквизита=0 ПО ДанныеРеквизитов.СсылочныеРеквизиты.Количество()-1 Цикл
			
			СтрРеквизит=ДанныеРеквизитов.СсылочныеРеквизиты[ИндексРеквизита];
			
			Если НЕ ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизита=Неопределено;
			
			МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
			
			Если МассивРеквизитов.Количество()=1 Тогда 
				
				ЗначениеРеквизита=ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
				МассивРеквизитов[0],
				КэшНайденныхЗначений,
				КонтекстОтчета,
				ФлагОшибкиИмпортаТек,
				КэшСозданныхОбъектов,
				КодИсходнойАналитики,
				ТаблицаИсходнойАналитики,?(СтрРеквизит.ИмяРеквизита="Родитель",ВладелецПодчиненный,Неопределено));
				
			ИначеЕсли МассивРеквизитов.Количество()>1 Тогда
				
				ТаблицаАналитики=СтрДанные[СтрРеквизит.ДанныеРеквизита];
				
				Если ЗначениеЗаполнено(ТаблицаАналитики) Тогда
					
					МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита,ТаблицаАналитики",СтрРеквизит.ИмяРеквизита,ТаблицаАналитики));
					
					Если МассивРеквизитов.Количество()=1 Тогда 
						
						ЗначениеРеквизита=ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
						МассивРеквизитов[0],
						КэшНайденныхЗначений,
						КонтекстОтчета,
						ФлагОшибкиИмпортаТек,
						КэшСозданныхОбъектов,
						КодИсходнойАналитики,
						ТаблицаИсходнойАналитики,?(СтрРеквизит.ИмяРеквизита="Родитель",ВладелецПодчиненный,Неопределено));
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				
				СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);	
				СтрСозданный=КэшСозданныхОбъектов.Найти(ЗначениеРеквизита,"Ссылка");
				
				Если (СтрСозданный=Неопределено И (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации)) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
					
					СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
					
				КонецЕсли;
				
				СтруктураОбновление.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
				
			Иначе
				
				Если (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации=Истина) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
					
					СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрРеквизит.ИмяРеквизита="Владелец" Тогда
				
				ВладелецПодчиненный=ЗначениеРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЕстьСоответствиеПоКоду = Ложь;
	ЕстьСоответствиеПоНомеру = Ложь;
	
	МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ДанныеРеквизитов.ТаблицаАналитики,".");
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
	
	ПризнакГруппы=Неопределено;
				
	Для Каждого СтрПоля ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл 
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа" 
			И ЗначениеЗаполнено(СтрДанные[СтрПоля.ДанныеРеквизита]) 
			И СтрДанные[СтрПоля.ДанныеРеквизита]=Истина Тогда
			
			ПризнакГруппы=СтрДанные[СтрПоля.ДанныеРеквизита];
			
			Если КонтекстОтчета.Свойство("СтруктураЗначенийРеквизитов") Тогда
				КонтекстОтчета.СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа"
			ИЛИ СтрДанные[СтрПоля.ДанныеРеквизита]=Ложь
			ИЛИ (НЕ (ЗначениеЗаполнено(СтрДанные[СтрПоля.ДанныеРеквизита]) И ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа))) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ НеИспользоватьДляСинхронизацииПодчиненный(СтрПоля.ИмяРеквизита,ДанныеРеквизитов.НастройкаСоответствияРеквизит,СтрПоля.НеИспользоватьДляСинхронизации) Тогда
			СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		КонецЕсли;
		
		СтруктураЗаписи.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		СтруктураОбновление.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		
		Если КонтекстОтчета.Свойство("СтруктураЗначенийРеквизитов") Тогда
			КонтекстОтчета.СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		КонецЕсли;
		
		Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если НЕ ЕстьСоответствиеПоКоду Тогда
				
				ЕстьСоответствиеПоКоду=(СтрПоля.ИмяРеквизита="Код");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				
				ЕстьСоответствиеПоНомеру=(СтрПоля.ИмяРеквизита="Номер");
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Проверим на тип "Перечисление"
	
	Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.")>0 Тогда
		
		ИмяПеречисления=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.","");
		
		Если ПустаяСтрока(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]) Тогда
			
			Возврат Перечисления[ИмяПеречисления].ПустаяСсылка();
			
		КонецЕсли;	
		
		ТекЗначениеПеречисления=ОбщегоНазначенияУХ.ПолучитьЗначениеПеречисленияПоИмени(ИмяПеречисления,СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита],ДанныеРеквизитов.НастройкаСоответствияРеквизит);
		
		Если НЕ ЗначениеЗаполнено(ТекЗначениеПеречисления) Тогда
			
			ФлагОшибкиИмпортаТек=Истина;
			ТекстСообщения = НСтр("ru = 'При импорте объекта %КодАналитики% не удалось получить значение перечисления
			|			%ТаблицаАналитики%: %ДанныеРеквизита%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(СтрЗаменить(ДанныеРеквизитов.КодАналитики,"vzv",".")));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитики%", Строка(ДанныеРеквизитов.ТаблицаАналитики));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеРеквизита%", Строка(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]));
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьЗначениеПодчиненногоРеквизита.1005", ДанныеРеквизитов.ОбъектМетаДанных,
			ДанныеРеквизитов.КодАналитики+"."+ДанныеРеквизитов.ТаблицаАналитики, ТекстСообщения);
			
			Возврат ТекЗначениеПеречисления;
			
		Иначе
			
			НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
			НоваяСтрока._Ссылка_=ТекЗначениеПеречисления;
			
			Если КонтекстОтчета.Свойство("СтруктураЗначенийРеквизитов") Тогда
				ЗначениеПеречисленияТек=ОбщегоНазначенияУХ.ПолучитьЗначениеПеречисленияПоИмени(СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.",""),СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита],ДанныеРеквизитов.НастройкаСоответствияРеквизит);
				КонтекстОтчета.СтруктураЗначенийРеквизитов.Вставить(ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита,ЗначениеПеречисленияТек);
			КонецЕсли;
			
			Возврат ТекЗначениеПеречисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверим на заполненность хотя бы одного реквизита
	
	ПустойЭлемент=Истина;
	
	Для Каждого Реквизит ИЗ СтруктураЗаписи Цикл
		
		Если ЗначениеЗаполнено(Реквизит.Значение) Тогда
			
			ПустойЭлемент=Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ПустойЭлемент ИЛИ СтруктураПоиска.Количество()=0 Тогда
		
		Возврат КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики(ДанныеРеквизитов.ТаблицаАналитики);
				
	КонецЕсли;
	
	// Проверим на заполненность полей, используемых для синхронизации
	
	Для Каждого Реквизит ИЗ СтруктураПоиска Цикл
		
		Если НЕ (ЗначениеЗаполнено(Реквизит.Значение) ИЛИ Реквизит.Ключ="Родитель")  Тогда
			
			ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,КодИсходнойАналитики,ТаблицаИсходнойАналитики,СтруктураЗаписи,,Ложь);
			
			ФлагОшибкиИмпортаТек = Истина;
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ДанныеРеквизитов.ЕстьРеквизитВИБ Тогда
		Если КонтекстОтчета.Свойство("ИспользуемаяИБ") И КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации Тогда
			СтруктураПоиска.Вставить("НСИ_ВИБ",КонтекстОтчета.ИспользуемаяИБ);
		Иначе
			СтруктураПоиска.Вставить("НСИ_ТребуетСинхронизации",Ложь);
		КонецЕсли;
	КонецЕсли;

	Если СтруктураПоиска.Количество()>0 Тогда
		
		Если НЕ ПризнакГруппы=Неопределено Тогда
			
			СтруктураПоиска.Вставить("ЭтоГруппа",ПризнакГруппы);
			
		КонецЕсли;
		
		Если НЕ Владелец=Неопределено Тогда
			
			СтруктураПоиска.Вставить("Владелец",Владелец);
            СтруктураЗаписи.Вставить("Владелец",Владелец);
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в кэше
			
		НайденныеСтроки=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество()>0 Тогда
			
			Возврат ОбновитьДанныеОбъекта(НайденныеСтроки[0]._Ссылка_,СтруктураОбновление,КонтекстОтчета,ДанныеРеквизитов.ОбновлятьРеквизитыПриИмпорте);
			
		КонецЕсли;
		
		Если ДанныеРеквизитов.ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" 
			И (Не СтруктураЗаписи.Свойство("Организация"))
			И ЗначениеЗаполнено(КонтекстОтчета.Организация) Тогда
			
			СтруктураПоиска.Вставить("Организация",КонтекстОтчета.Организация);
            СтруктураЗаписи.Вставить("Организация",КонтекстОтчета.Организация);
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в БД
		
		Попытка
			
			НайденноеЗначение=ПолучитьЭлементСправочника(ДанныеРеквизитов.ТаблицаАналитики,СтруктураПоиска);
			
		Исключение
			
			ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,КодИсходнойАналитики,ТаблицаИсходнойАналитики,СтруктураПоиска,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Ложь);
			
		КонецПопытки;

		Если НЕ НайденноеЗначение=Неопределено Тогда
			
			НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураПоиска);
			НоваяСтрока._Ссылка_=НайденноеЗначение;
			
			Возврат ОбновитьДанныеОбъекта(НайденноеЗначение,СтруктураОбновление,КонтекстОтчета,ДанныеРеквизитов.ОбновлятьРеквизитыПриИмпорте);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ДанныеРеквизитов.СоздаватьНовые Тогда
		
		ТекстУникальныеРеквизиты=Нстр("ru = 'Автоматическое создание новых элементов для этого справочника запрещено.'");
		
		ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,КодИсходнойАналитики,ТаблицаИсходнойАналитики,СтруктураЗаписи,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина,ТекстУникальныеРеквизиты);
		
		ФлагОшибкиИмпортаТек = Истина;
		Возврат Неопределено;
		
	КонецЕсли;

	///////////////////////////////////////////////////////////////////////////////////////
	// Создадим новый объект
	
	ТекстОшибки="";
						
	Попытка
				
		Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если ТипОбъектаМетаданных="Справочник" Тогда
				
				Если ЭтоГруппа Тогда
					НовыйОбъект = Справочники[ИмяОбъектаМетаданных].СоздатьГруппу();
				Иначе
					НовыйОбъект = Справочники[ИмяОбъектаМетаданных].СоздатьЭлемент();
				КонецЕсли;
				
			Иначе
				
				Если ЭтоГруппа Тогда
					НовыйОбъект = ПланыВидовХарактеристик[ИмяОбъектаМетаданных].СоздатьГруппу();
				Иначе
					НовыйОбъект = ПланыВидовХарактеристик[ИмяОбъектаМетаданных].СоздатьЭлемент();
				КонецЕсли;
				
			КонецЕсли;

			ДлинаКода=НовыйОбъект.Метаданные().ДлинаКода;
			
			ЗаполнитьЗначенияСвойств(НовыйОбъект,СтруктураЗаписи);
			
			Если ДлинаКода>0 Тогда
				
				Если НЕ ЕстьСоответствиеПоКоду Тогда
					
					НовыйОбъект.УстановитьНовыйКод();
										
				КонецЕсли;
				
			КонецЕсли;
			
			Если ИмяОбъектаМетаданных="ПроизвольныйКлассификаторУХ" Тогда
				
				НовыйОбъект.Владелец=ДанныеРеквизитов.ИмяОбъектаМетаДанных;
				
			ИначеЕсли ИмяОбъектаМетаданных="СчетаБД" Тогда
				
				НовыйОбъект.Владелец=?(ЗначениеЗаполнено(КонтекстОтчета.Организация.ПланСчетов),КонтекстОтчета.Организация.ПланСчетов,Константы.ПланСчетовПоУмолчанию.Получить());
				
			КонецЕсли;
											
			ДанныеДопЗаполнения=ПолучитьДанныеДопЗаполнения(ДанныеРеквизитов.НастройкаСоответствияРеквизит);
			
			Если ЗначениеЗаполнено(ДанныеДопЗаполнения.КорневойКаталог)
				И (НЕ ЗначениеЗаполнено(НовыйОбъект.Родитель)) Тогда
				
				НовыйОбъект.Родитель=ДанныеДопЗаполнения.КорневойКаталог;
				
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ДанныеДопЗаполнения.ПроцедураПередЗаписью) Тогда
				
				Выполнить(ДанныеДопЗаполнения.ПроцедураПередЗаписью);
				
			КонецЕсли;
				
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			НовыйОбъект=Документы[ИмяОбъектаМетаданных].СоздатьДокумент();
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				НовыйОбъект.УстановитьНовыйНомер();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НовыйОбъект,СтруктураЗаписи);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ТекстУникальныеРеквизиты="";
		
		Если НЕ ПроверитьПередЗаписью(СтруктураЗаписи,ДанныеРеквизитов.ОбязательныеРеквизиты,ДанныеРеквизитов.ТаблицаАналитики,ТекстУникальныеРеквизиты) Тогда
			
			ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,КодИсходнойАналитики,ТаблицаИсходнойАналитики,СтруктураЗаписи,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),Истина,ТекстУникальныеРеквизиты);
			
			ФлагОшибкиИмпортаТек = Истина;
			Возврат Неопределено;
			
		КонецЕсли;
			
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("НСИ_ВИБ",НовыйОбъект) Тогда
			
			НовыйОбъект.НСИ_ВИБ=КонтекстОтчета.ИспользуемаяИБ;
			
			Если КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации Тогда
				
				НовыйОбъект.НСИ_ТребуетСинхронизации=Истина;
				НовыйОбъект.НСИ_НеАктивный=Истина;
				
			КонецЕсли;
				
		КонецЕсли;
		
		Если КонтекстОтчета.Загрузка Тогда
			НовыйОбъект.ОбменДанными.Загрузка=Истина;
		КонецЕсли;
		
		НовыйОбъект.Записать();
						
		НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтруктураЗаписи);
		НоваяСтрока._Ссылка_=НовыйОбъект.Ссылка;
		
		СтрСозданных=КэшСозданныхОбъектов.Добавить();
		СтрСозданных.Ссылка=НовыйОбъект.Ссылка;
		СтрСозданных.НастройкаСоответствияРеквизит=ДанныеРеквизитов.НастройкаСоответствияРеквизит;
		
		Если КонтекстОтчета.Свойство("ТабОбъектовДляВыгрузки") Тогда
			
			СтрокаВыгрузка=КонтекстОтчета.ТабОбъектовДляВыгрузки.Добавить();
			СтрокаВыгрузка.ТаблицаАналитики		= ДанныеРеквизитов.ТаблицаАналитики;
			СтрокаВыгрузка.КодАналитики			= ДанныеРеквизитов.КодАналитики;
			СтрокаВыгрузка.СтруктураРеквизитов	= ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(КонтекстОтчета.СтруктураЗначенийРеквизитов);
			
		КонецЕсли;
	
		Возврат НовыйОбъект.Ссылка; 
		
	Исключение
		
		ДобавитьВПротоколОшибкуЗаписи(ЭтоГруппа,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,КодИсходнойАналитики,ТаблицаИсходнойАналитики,СтруктураЗаписи,ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ФлагОшибкиИмпортаТек = Истина;
		Возврат Неопределено;
	
	КонецПопытки;	
		
КонецФункции // ПолучитьЗначениеПодчиненногоРеквизита() 


Процедура ДобавитьСтрокиПодчиненныхРеквизитов(СтрокаРодитель,КодАналитики,МассивРеквизитов,ИмяРеквизита,КэшНайденныхЗначений,СтруктураПодчиненныхРеквизитов,ПравилаИспользованияПолей,КолонкиДанных)
 ТаблицаРеквизитов=Новый ТаблицаЗначений;
	 ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("ДанныеРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("Использование");
	 ТаблицаРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	 ТаблицаРеквизитов.Колонки.Добавить("ФиксированноеЗначение");
	 
	 Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл
		 
		 МассивАналитика=СтрокаРодитель.Строки.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитики",КодАналитики,СтрПоле.ТаблицаАналитики));
		 
		 Если МассивАналитика.Количество()=0 Тогда
			 			 
			 СтрАналитика=СтрокаРодитель.Строки.Добавить();
			 СтрАналитика.КодАналитики					= КодАналитики;
			 СтрАналитика.ТаблицаАналитики				= СтрПоле.ТаблицаАналитики;
			 СтрАналитика.ТаблицаАналитикиВИБ			= СтрПоле.ТаблицаАналитикиВИБ;
			 СтрАналитика.НастройкаСоответствияРеквизит	= СтрПоле.НастройкаСоответствияРеквизит;
			 СтрАналитика.ИмяОбъектаМетаДанных			= СтрПоле.АналитикаОперанда;
			 СтрАналитика.НеИспользоватьДляСинхронизации= СтрПоле.НеИспользоватьДляСинхронизации;
			 СтрАналитика.ОбновлятьРеквизитыПриИмпорте	= СтрПоле.ОбновлятьРеквизитыПриИмпорте;
			 СтрАналитика.ИмяРеквизита					= ИмяРеквизита;
			 
			 СтрАналитика.ОбязательныеРеквизиты			= ПолучитьТаблицуКонтролируемыхРеквизитов(СтрПоле.ТаблицаАналитики);
			 
			 ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьДанныеОбъектаБД(?(СтрПоле.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ",СтрПоле.АналитикаОперанда,СтрПоле.ТаблицаАналитики));	 
			 СтрАналитика.ОбъектМетаДанных				= ДанныеОбъекта.ОбъектМетаданных;
			 СтрАналитика.ОбновлятьРеквизитыПриИмпорте	= ДанныеОбъекта.ОбновлятьРеквизитыПриИмпорте;
			 СтрАналитика.СоздаватьНовые				= ДанныеОбъекта.СоздаватьПриНеудачномПоискеПриИмпорте;
			 СтрАналитика.РазделятьПоОрганизациям		= ДанныеОбъекта.РазделятьПоОрганизациям;
			 
			 СтрАналитика.ПримитивныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
			 СтрАналитика.СсылочныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
			 СтрАналитика.ФиксированныеРеквизиты= ТаблицаРеквизитов.СкопироватьКолонки();
			 
			 Если СтрНайти(СтрАналитика.ТаблицаАналитики,"Справочник.")>0 Тогда
				 
				 СтрАналитика.ЕстьРеквизитВИБ=ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(СтрЗаменить(СтрАналитика.ТаблицаАналитики,"Справочник.",""),"НСИ_ВИБ");
				 
			 КонецЕсли;
			 
		 КонецЕсли;
		 
		 Если ЗначениеЗаполнено(СтрПоле.НастройкаСоответствияРеквизит) Тогда
			 
			 МассивФиксированных=СтрАналитика.НастройкаСоответствияРеквизит.СоответствиеРеквизитов.НайтиСтроки(Новый Структура("СпособЗаполнения",Перечисления.СпособыЗаполненияПолейИсточника.ФиксированноеЗначение));
			 
			 Для Каждого Строка ИЗ МассивФиксированных Цикл
				 
				 НоваяСтрока=СтрАналитика.ФиксированныеРеквизиты.Добавить();
				 НоваяСтрока.ИмяРеквизита					= Строка.РеквизитОбъектаКонсолидации;
				 НоваяСтрока.ФиксированноеЗначение			= Строка.ФиксированноеЗначение;
				 НоваяСтрока.НеИспользоватьДляСинхронизации	= Строка.НеИспользоватьДляСинхронизации;
				 НоваяСтрока.Использование					= Строка.ИспользованиеКонсолидация;
				 
				  ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,СтрПоле.ТаблицаАналитики,Строка.РеквизитОбъектаКонсолидации,СтрПоле.РазделятьПоОрганизациям);
				 
			 КонецЦикла;
			 
		 КонецЕсли;
		 
		 Если НЕ КолонкиДанных.Найти(СтрПоле.Синоним)=Неопределено Тогда
			 
			 МассивПуть=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрПоле.РеквизитАналитики,".");
			 
			 НоваяСтрока=СтрАналитика.ПримитивныеРеквизиты.Добавить();
			 НоваяСтрока.ИмяРеквизита					= МассивПуть[МассивПуть.Количество()-1];
			 НоваяСтрока.НеИспользоватьДляСинхронизации	= СтрПоле.НеИспользоватьДляСинхронизации;
			 НоваяСтрока.Использование					= СтрПоле.ИспользованиеКонсолидация;
			 
			 Если ЗначениеЗаполнено(СтрПоле.НастройкаСоответствияРеквизит) Тогда
				 
				 СтрокаСоответствия=СтрПоле.НастройкаСоответствияРеквизит.СоответствиеРеквизитов.Найти(НоваяСтрока.ИмяРеквизита,"РеквизитОбъектаКонсолидации");
				 
				 Если НЕ СтрокаСоответствия=Неопределено Тогда
					 
					 НоваяСтрока.НеИспользоватьДляСинхронизации		= СтрокаСоответствия.НеИспользоватьДляСинхронизации;
					 НоваяСтрока.Использование						= СтрокаСоответствия.ИспользованиеКонсолидация;
					 
				 КонецЕсли;
				 
			 КонецЕсли;

			 НоваяСтрока.ДанныеРеквизита				= СтрПоле.Синоним;
			 						 
			 ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,СтрПоле.ТаблицаАналитики,МассивПуть[МассивПуть.Количество()-1],СтрПоле.РазделятьПоОрганизациям);
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
	 Для Каждого СтрРеквизит ИЗ СтруктураПодчиненныхРеквизитов Цикл
		 
		 Если (НЕ СтрРеквизит.Ключ=КодАналитики) И СтрНайти(СтрРеквизит.Ключ,КодАналитики+"vzv")=1 Тогда
			 
			 СтрокаСиноним=ПравилаИспользованияПолей.Найти(СтрРеквизит.Ключ,"КодАналитики");
			 
			 МассивКлюч=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрРеквизит.Ключ,"vzv");
			 МассивПуть=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаСиноним.РеквизитАналитики,".");
			 
			 ИмяПодчиненногоРеквизита=МассивПуть[МассивКлюч.Количество()-2];
			 
			 Если СтрАналитика.СсылочныеРеквизиты.Найти(ИмяПодчиненногоРеквизита,"ИмяРеквизита")=Неопределено Тогда
				 
				 Если ЗначениеЗаполнено(СтрокаСиноним.НастройкаСоответствияРеквизит) Тогда
					 
					 СтрокаСоответствия=СтрокаСиноним.НастройкаСоответствияРеквизит.СоответствиеРеквизитов.Найти(ИмяПодчиненногоРеквизита,"РеквизитОбъектаКонсолидации");
					 
					 Если НЕ СтрокаСоответствия=Неопределено Тогда
						 
						 ТекНеИспользоватьДляСинхронизации		= СтрокаСоответствия.НеИспользоватьДляСинхронизации;
						 ТекИспользование						= СтрокаСоответствия.ИспользованиеКонсолидация;
						 
					 Иначе
						 
						 Продолжить;
						 
					 КонецЕсли;
					 
				 Иначе
					 
					 ТекИспользование=СтрокаСиноним.ИспользованиеКонсолидация;
					 ТекНеИспользоватьДляСинхронизации=СтрокаСиноним.НеИспользоватьДляСинхронизации;
					 
				 КонецЕсли;
				 
				 НоваяСтрока=СтрАналитика.СсылочныеРеквизиты.Добавить();
				 НоваяСтрока.ИмяРеквизита=ИмяПодчиненногоРеквизита;
				 НоваяСтрока.Использование=ТекИспользование;
				 НоваяСтрока.НеИспользоватьДляСинхронизации=ТекНеИспользоватьДляСинхронизации;
				 
				 Если СтрРеквизит.Значение.Количество()>1 Тогда
					 НоваяСтрока.ДанныеРеквизита=СтрРеквизит.Ключ+"vzvСсылка";
				 КонецЕсли;
				 
				 СтрАналитика.ЕстьСсылочные=Истина;
				 
				 ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,СтрАналитика.ТаблицаАналитики,ИмяПодчиненногоРеквизита,СтрАналитика.РазделятьПоОрганизациям);
				 
			 КонецЕсли;
			 
			 Для Каждого СтрТаблица ИЗ СтрРеквизит.Значение Цикл
				 
				 МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитики",СтрРеквизит.Ключ,СтрТаблица));
				 ДобавитьСтрокиПодчиненныхРеквизитов(СтрАналитика,СтрРеквизит.Ключ,МассивРеквизитов,ИмяПодчиненногоРеквизита,КэшНайденныхЗначений,СтруктураПодчиненныхРеквизитов,ПравилаИспользованияПолей,КолонкиДанных);
				 
			 КонецЦикла;
				 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецПроцедуры // ДобавитьСтрокиПодчиненныхРеквизитов

Процедура ДобавитьСтруктуруВКэш(КэшНайденныхЗначений,ТаблицаАналитики,ИмяРеквизита,РазделятьПоОрганизациям=Ложь)
	
	Если КэшНайденныхЗначений.Получить(ТаблицаАналитики)=Неопределено Тогда
		
		ТабНайденныхЗначений=Новый ТаблицаЗначений;
		ТабНайденныхЗначений.Колонки.Добавить("_Ссылка_");
		
		Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			ТабНайденныхЗначений.Колонки.Добавить("ИмяОбъектаМетаданных");
			ТабНайденныхЗначений.Индексы.Добавить("ИмяОбъектаМетаданных");
						
			Если РазделятьПоОрганизациям  Тогда
				
				ТабНайденныхЗначений.Колонки.Добавить("Организация");
				ТабНайденныхЗначений.Индексы.Добавить("Организация");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" И ТабНайденныхЗначений.Колонки.Найти("Организация")=Неопределено Тогда
			ТабНайденныхЗначений.Колонки.Добавить("Организация");
			ТабНайденныхЗначений.Индексы.Добавить("Организация");
		КонецЕсли;
		
		Если СтрНайти(ТаблицаАналитики,"Справочник.")>0 Тогда
			
			ЕстьРеквизитВИБ=ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(СтрЗаменить(ТаблицаАналитики,"Справочник.",""),"НСИ_ВИБ");
			
			Если ЕстьРеквизитВИБ Тогда
				
				ТабНайденныхЗначений.Колонки.Добавить("НСИ_ВИБ");
				ТабНайденныхЗначений.Индексы.Добавить("НСИ_ВИБ");
				
				ТабНайденныхЗначений.Колонки.Добавить("НСИ_ТребуетСинхронизации");
				ТабНайденныхЗначений.Индексы.Добавить("НСИ_ТребуетСинхронизации");
				
			КонецЕсли;		
			
		КонецЕсли; 
		
		КэшНайденныхЗначений.Вставить(ТаблицаАналитики,ТабНайденныхЗначений);
		
	КонецЕсли;
	
	Если КэшНайденныхЗначений[ТаблицаАналитики].Колонки.Найти(ИмяРеквизита)=Неопределено Тогда
		КэшНайденныхЗначений[ТаблицаАналитики].Колонки.Добавить(ИмяРеквизита);
		КэшНайденныхЗначений[ТаблицаАналитики].Индексы.Добавить(ИмяРеквизита);	 
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтруктуруВКэш()

Функция ПолучитьЭлементСправочника(ТаблицаАналитики,СтруктураПараметров)
	
	Если СтруктураПараметров.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|РабочаяТаблица.Ссылка
	|ИЗ "+ТаблицаАналитики+" КАК РабочаяТаблица";
	
	ТекстУсловие="";
	
	Для Каждого СтрПараметр ИЗ СтруктураПараметров Цикл
		
		Если ТипЗнч(СтрПараметр.Значение)=Тип("Строка") Тогда
			
			ТекстУсловие=ТекстУсловие+" И РабочаяТаблица."+СтрПараметр.Ключ+"=&"+СтрПараметр.Ключ;
			
		ИначеЕсли ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(СтрПараметр.Значение)) Тогда
			
			ТекстУсловие=ТекстУсловие+" И РабочаяТаблица."+СтрПараметр.Ключ+"=&"+СтрПараметр.Ключ;
			
		ИначеЕсли СтрПараметр.Ключ="ИмяОбъектаМетаданных" Тогда
			
			ТекстУсловие=ТекстУсловие+" И РабочаяТаблица.Владелец=&ИмяОбъектаМетаданных";
			
		ИначеЕсли СтрПараметр.Ключ="НСИ_ВИБ" Тогда
			
			Если (НЕ СтруктураПараметров.Свойство("ЭтоГруппа")) ИЛИ СтруктураПараметров.ЭтоГруппа=Ложь Тогда
				
				ТекстУсловие=ТекстУсловие+" И РабочаяТаблица.НСИ_ВИБ=&НСИ_ВИБ";
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрПараметр.Значение) Тогда	
				
				ТекстУсловие=ТекстУсловие+" И (РабочаяТаблица."+СтрПараметр.Ключ+"=&"+СтрПараметр.Ключ+" ИЛИ РабочаяТаблица."+СтрПараметр.Ключ+"=ЗНАЧЕНИЕ("+СтрПараметр.Значение.Метаданные().ПолноеИмя()+".ПустаяСсылка))";
				
			Иначе
				
				ТекстУсловие=ТекстУсловие+" И (РабочаяТаблица."+СтрПараметр.Ключ+"=&"+СтрПараметр.Ключ+")";
				
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ГДЕ "+Сред(ТекстУсловие,3);
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции // ПолучитьЭлементСправочника

Функция ОбновитьДанныеОбъекта(Ссылка,СтруктураОбновления,КонтекстОтчета,ОбновлятьРеквизитыПриИмпорте=Ложь)
	
	Если (НЕ ОбновлятьРеквизитыПриИмпорте) ИЛИ СтруктураОбновления.Количество()=0 Тогда
		
		Возврат Ссылка;
		
	Иначе
		
		Попытка
			
			ТекОбъект=Ссылка.ПолучитьОбъект();
			
			ЕстьИзменения=Ложь;
			
			Для Каждого КлючИЗначение ИЗ СтруктураОбновления Цикл
				
				Если НЕ ТекОбъект[КлючИЗначение.Ключ]=КлючИЗначение.Значение Тогда
					
					ЕстьИзменения=Истина;
					ТекОбъект[КлючИЗначение.Ключ]=КлючИЗначение.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				
				Если КонтекстОтчета.Загрузка Тогда
					ТекОбъект.ОбменДанными.Загрузка=Истина;
				КонецЕсли;
				
				ТекОбъект.Записать();
				
			КонецЕсли;
			
			Возврат ТекОбъект.Ссылка;
			
		Исключение
			
			Если НЕ КонтекстОтчета.Свойство("ТихийРежим") Тогда
				#Если НЕ ВнешнееСоединение Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось обновить реквизиты для %Ссылка% по причине:
					|					
					|					%ОписаниеОшибки%
					|					
					|					Свойства объекта ИБ:'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(Ссылка));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());

					
					Для Каждого СтрПоля ИЗ СтруктураОбновления Цикл
						
						ТекстСообщения = ТекстСообщения + СтрПоля.Ключ;
						ТекстСообщения = ТекстСообщения + " - ";
						ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(СтрПоля.Значение), СтрПоля.Значение, "???");
						ТекстСообщения = ТекстСообщения + Символы.ПС;
						
					КонецЦикла;
					
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
				#Иначе
					
				#КонецЕсли
				
			КонецЕсли;
			
			Возврат Ссылка;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции // ОбновитьДанныеОбъекта 

Функция ПроверитьВозможностьИспользованияРеквизита(ИспользованиеРеквизита,ЭтоГруппа)
	
	Если Не (ЗначениеЗаполнено(ИспользованиеРеквизита) ИЛИ ЭтоГруппа) Тогда

		Возврат Истина;
		
	КонецЕсли;
	
	Если ЭтоГруппа=Истина Тогда
		
		Возврат (ИспользованиеРеквизита=Перечисления.ИспользованиеРеквизита.ДляГруппы ИЛИ ИспользованиеРеквизита=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента);
		
	Иначе
		
		Возврат (ИспользованиеРеквизита=Перечисления.ИспользованиеРеквизита.ДляЭлемента ИЛИ ИспользованиеРеквизита=Перечисления.ИспользованиеРеквизита.ДляГруппыИЭлемента);
		
	КонецЕсли	
	
КонецФункции // ПроверитьВозможностьИспользованияРеквизита()

Функция ПолучитьОбъектТекущейИБПоGUIDВнешней(ДанныеРеквизитов,КэшНайденныхЗначений,КонтекстОтчета,ОбъектВнешнейИБ)
	
	Если ПустаяСтрока(ОбъектВнешнейИБ) Тогда
		
		Возврат КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики(ДанныеРеквизитов.ТаблицаАналитики);
		
	КонецЕсли;
	
	НайденныеСтроки=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].НайтиСтроки(Новый Структура("Ref",ОбъектВнешнейИБ));
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		Возврат НайденныеСтроки[0]._Ссылка_;
		
	КонецЕсли;
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
	|ГДЕ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ = &ОбъектВнешнейИБ
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.НастройкаСоответствия = &НастройкаСоответствия
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ = &ИспользуемаяИБ";
	
	Запрос.УстановитьПараметр("ОбъектВнешнейИБ",		ОбъектВнешнейИБ);
	Запрос.УстановитьПараметр("НастройкаСоответствия",	ДанныеРеквизитов.НастройкаСоответствияРеквизит);
	Запрос.УстановитьПараметр("ИспользуемаяИБ",			КонтекстОтчета.ИспользуемаяИБ);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ОбъектТекущейИБ=Результат.ОбъектТекущейИБ;
		
	Иначе
		ТекстСообщения = НСтр("ru = 'При заполнении реквизита %КодАналитики%
		|			не удалось определить элемент справочника %ТаблицаАналитики% по идентификатору объекта внешней ИБ: %ОбъектВнешнейИБ%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(СтрЗаменить(ДанныеРеквизитов.КодАналитики,"vzv",".")));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитики%", Строка(ДанныеРеквизитов.ТаблицаАналитики));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектВнешнейИБ%", Строка(ОбъектВнешнейИБ));
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ОбщийМодуль.ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьОбъектТекущейИБПоGUIDВнешней", ДанныеРеквизитов.ОбъектМетаДанных,
			ДанныеРеквизитов.КодАналитики+"."+ДанныеРеквизитов.ТаблицаАналитики, ТекстСообщения);
		
		
		ОбъектТекущейИБ=КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики(ДанныеРеквизитов.ТаблицаАналитики);
		
	КонецЕсли;
	
	НоваяСтрока=КэшНайденныхЗначений[ДанныеРеквизитов.ТаблицаАналитики].Добавить();
	НоваяСтрока.Ref=ОбъектВнешнейИБ;
	НоваяСтрока._Ссылка_=ОбъектТекущейИБ;
	
	Возврат ОбъектТекущейИБ;	
	
КонецФункции // ПолучитьОбъектТекущейИБПоGUIDВнешней

Процедура ПроверитьИСинхронизироватьТаблицуРезультатов(ТаблицаДанных,СтруктураКлючевыхРеквизитов,ПравилаИспользованияПолей,СтруктураОшибок)
	
	МассивПроверяемыхАналитик=Новый Массив;
	
	Для Каждого СтрАналитика ИЗ СтруктураКлючевыхРеквизитов Цикл
		
		Если СтрНайти(СтрАналитика.Значение[0],"Справочник.")>0 
			И ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(СтрЗаменить(СтрАналитика.Значение[0],"Справочник.",""),"НСИ_ЭталонныйЭлемент") Тогда
			
			МассивПроверяемыхАналитик.Добавить(СтрАналитика.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПроверяемыхАналитик.Количество()>0 Тогда // Проверяем наличие несинхронизированных элементов
														// и в случае их отсутствия заменяем значения на эталонные
		
		СтрЗначение=ПравилаИспользованияПолей.Найти("Значение","КодАналитики");
		
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
						
		Запрос.Текст="ВЫБРАТЬ *
		|ПОМЕСТИТЬ ТабРезультат
		|ИЗ &ТаблицаДанных КАК ТаблицаДанных";
		
		Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
		Запрос.Выполнить();
		
		Запрос.Текст = "";
		
		Для Каждого Аналитика ИЗ МассивПроверяемыхАналитик Цикл
			
			Запрос.Текст= Запрос.Текст + "
            |ВЫБРАТЬ  
            |    ТабРезультат."+Аналитика+".Наименование КАК Наименование
            |ИЗ
            |    ТабРезультат КАК ТабРезультат
            |ГДЕ
            |    ТабРезультат."+Аналитика+".НСИ_ЭталонныйЭлемент = ЗНАЧЕНИЕ("+СтруктураКлючевыхРеквизитов[Аналитика][0]+".ПустаяСсылка) ИЛИ ТабРезультат."+Аналитика+".НСИ_ЭталонныйЭлемент=Неопределено
            |;";
          
        КонецЦикла;
		
		Результат=Запрос.ВыполнитьПакет();
		
		Для Индекс=0 По МассивПроверяемыхАналитик.Количество()-1 Цикл
			
			ТекЗапрос=Результат[Индекс].Выбрать();
			
			Если ТекЗапрос.Количество()>0 Тогда
				
				МассивОшибок=Новый Массив;
				
				Пока ТекЗапрос.Следующий() Цикл
					
					МассивОшибок.Добавить(ТекЗапрос.Наименование);
					
				КонецЦикла;
				
				СтруктураОшибок.Вставить(МассивПроверяемыхАналитик[Индекс],МассивОшибок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СтруктураОшибок.Количество()=0 Тогда // Заменяем синхронизируемые значения эталонными реквизитами
			
			ТекстВыборки="";
			
			Для Каждого Колонка ИЗ ТаблицаДанных.Колонки Цикл
				
				Если МассивПроверяемыхАналитик.Найти(Колонка.Имя)=Неопределено Тогда
					
					ТекстВыборки=ТекстВыборки+",
					|"+Колонка.Имя+" КАК "+Колонка.Имя;
					
				Иначе
					
					ТекстВыборки=ТекстВыборки+",
					|"+Колонка.Имя+".НСИ_ЭталонныйЭлемент КАК "+Колонка.Имя;
					
				КонецЕсли;	
				
			КонецЦикла;
			
			Запрос.Текст="ВЫБРАТЬ
			|"+Сред(ТекстВыборки,2)+"
			|ИЗ ТабРезультат КАК ТабРезультат";
			
			ТаблицаДанных=Запрос.Выполнить().Выгрузить();
			
		КонецЕсли;
		
		Запрос.МенеджерВременныхТаблиц.Закрыть();
						
	КонецЕсли;				
		
КонецПроцедуры // ПроверитьИСинхронизироватьТаблицуРезультатов()

Процедура ПоместитьЗначенияВТаблицуОперандовВИБ(ОбъектРасчета,ТабОперандов,ТабСчетаОперандов,СоответствиеРесурсов,МассивРесурсов,ЕстьРазворотПоАналитикам,СписокКодовОперандов=Неопределено)
	
	ЕстьКоррСчета=(НЕ ТабОперандов.Колонки.Найти("КоррСчетКод")=Неопределено);
	
	ТекстКолонкиАналитика="";
	ТекстКолонкиРесурсы="";
	ТекстКолонкиРесурсыСумма="";
	
	Если ЕстьРазворотПоАналитикам Тогда
		
		Для Каждого Колонка ИЗ ТабОперандов.Колонки Цикл
			Если СтрНайти(Колонка.Имя,"Аналитика")>0 И СтрНайти(Колонка.Имя,"vzv")=0 Тогда
				ТекстКолонкиАналитика=ТекстКолонкиАналитика+",
				|ТаблицаДанных."+Колонка.Имя;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого Ресурс ИЗ МассивРесурсов Цикл 
		
		ТекстКолонкиРесурсыСумма=ТекстКолонкиРесурсыСумма+",
		|СУММА(ISNULL(ТаблицаДанных."+Ресурс+",0)) КАК "+Ресурс;
		
		ТекстКолонкиРесурсы=ТекстКолонкиРесурсы+",
		|ВЫРАЗИТЬ(ТаблицаДанных."+Ресурс+" КАК Число(18,5)) КАК "+Ресурс;
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	
	ТекстЗапроса="Выбрать
	|ТаблицаДанных.СчетКод,";
	
	Если ЕстьКоррСчета Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ТаблицаДанных.КоррСчетКод,";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+?(ПустаяСтрока(ТекстКолонкиАналитика),"",Сред(ТекстКолонкиАналитика,2)+",")+Сред(ТекстКолонкиРесурсы,2)+"	
	|Поместить ТаблицаДанных
	|ИЗ &ТаблицаДанных КАК ТаблицаДанных
	|;
	|ВЫБРАТЬ *
	|Поместить ТабСчетаОперандов
	|ИЗ &ТабСчетаОперандов КАК ТабСчетаОперандов";
	
	Если НЕ СписокКодовОперандов=Неопределено Тогда
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ ТабСчетаОперандов.КодОперанда В(&СписокКодовОперанда)";
		
		Запрос.УстановитьПараметр("СписокКодовОперанда",СписокКодовОперандов);
		
	КонецЕсли;
	ТекстЗапроса=ТекстЗапроса+"
	|;
	|ВЫБРАТЬ
	|ТабСчетаОперандов.КодОперанда,"+?(ПустаяСтрока(ТекстКолонкиАналитика),"",Сред(ТекстКолонкиАналитика,2)+",")+Сред(ТекстКолонкиРесурсыСумма,2)+"	
	|ИЗ ТабСчетаОперандов КАК ТабСчетаОперандов
	|ЛЕВОЕ СОЕДИНЕНИЕ 
	|ТаблицаДанных КАК ТаблицаДанных
	|ПО ТабСчетаОперандов.СчетДанные=ТаблицаДанных.СчетКод";
	
	Если ЕстьКоррСчета Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|И ТабСчетаОперандов.КоррСчетДанные=ТаблицаДанных.КоррСчетКод";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|Сгруппировать ПО
	|ТабСчетаОперандов.КодОперанда"+?(ПустаяСтрока(ТекстКолонкиАналитика),"",","+Сред(ТекстКолонкиАналитика,2));	
	
	Запрос.УстановитьПараметр("ТаблицаДанных",ТабОперандов);
	Запрос.УстановитьПараметр("ТабСчетаОперандов",ТабСчетаОперандов);
	Запрос.Текст=ТекстЗапроса;
	
	ТекТаблицаАналитик=Запрос.Выполнить().Выгрузить();
	
	Если ЕстьРазворотПоАналитикам Тогда
		ТекТаблицаИтога=ОбъектРасчета.мЗначенияОперандов.СкопироватьКолонки();
	КонецЕсли;
	
	Для Каждого СтрАналитика ИЗ ТекТаблицаАналитик Цикл
		НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
		НоваяСтрока.Значение=СтрАналитика[СоответствиеРесурсов[СтрАналитика.КодОперанда]];
		НоваяСтрока.ИтогПоПоказателю=НЕ ЕстьРазворотПоАналитикам;
		
		Если ЕстьРазворотПоАналитикам Тогда
			НоваяСтрока=ТекТаблицаИтога.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрАналитика);
			НоваяСтрока.Значение=СтрАналитика[СоответствиеРесурсов[СтрАналитика.КодОперанда]];
			НоваяСтрока.ИтогПоПоказателю=ИСТИНА;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРазворотПоАналитикам Тогда
		ТекТаблицаИтога.Свернуть("КодОперанда,ИтогПоПоказателю","Значение");
		ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТекТаблицаИтога,ОбъектРасчета.мЗначенияОперандов);
	КонецЕсли;
	
КонецПроцедуры // ПоместитьЗначенияВТаблицуОперандовВИБ() 

 Процедура РазобратьСводныеДанныеРегистраБухгалтерииВИБ(ОбъектРасчета,ТаблицаДанных,ТаблицаОперандов,ТабСчетаОперандов,СоответствиеРесурсов,ТабПравилаИспользованияПолей);
	
	Если ТаблицаДанных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповСтрокаНеограниченнойДлины=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ТаблицаОперандов.Ресурс КАК Ресурс
	|Поместить ТаблицаРесурсов
	|ИЗ &ТаблицаОперандов КАК ТаблицаОперандов
	|;
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|ТаблицаРесурсов.Ресурс
	|ИЗ ТаблицаРесурсов КАК ТаблицаРесурсов";
	
	Запрос.УстановитьПараметр("ТаблицаОперандов",ТаблицаОперандов);
	МассивРесурсов=Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ресурс");
	
	Если ТабПравилаИспользованияПолей.Количество()=1 Тогда
		
		ПравилаИспользованияПолей=ТабПравилаИспользованияПолей[0].ПравилаИспользованияПолей;
		
		ЕстьРазворотПоАналитикам=НЕ (ПравилаИспользованияПолей.Количество()=1 И СтрНайти(ПравилаИспользованияПолей[0].КодАналитики,"Аналитика")=0);
		
		Если ЕстьРазворотПоАналитикам Тогда
			
			ТабОперандов=РасширениеИнтеграцииУХ.ТрансформироватьВнешниеДанные(ОбъектРасчета,ТаблицаДанных,ПравилаИспользованияПолей);
			
			Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
				
				Возврат;
				
			КонецЕсли;
			
			ПоместитьЗначенияВТаблицуОперандовВИБ(ОбъектРасчета,ТабОперандов,ТабСчетаОперандов,СоответствиеРесурсов,МассивРесурсов,Истина);
			
		Иначе
			
			ПоместитьЗначенияВТаблицуОперандовВИБ(ОбъектРасчета,ТаблицаДанных,ТабСчетаОперандов,СоответствиеРесурсов,МассивРесурсов,Ложь);
			
		КонецЕсли;
		
	Иначе
		
		ЕстьКоррСчета=(НЕ ТаблицаДанных.Колонки.Найти("КоррСчетКод")=Неопределено);
		
		Запрос=Новый Запрос;
		Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
		Запрос.Текст="ВЫБРАТЬ * Поместить ТаблицаДанных ИЗ &ТаблицаДанных КАК ТаблицаДанных
		|;
		|ВЫБРАТЬ * ПОМЕСТИТЬ ТабСчетаОперандов ИЗ &ТабСчетаОперандов КАК ТабСчетаОперандов";
		Запрос.УстановитьПараметр("ТаблицаДанных",ТаблицаДанных);
		Запрос.УстановитьПараметр("ТабСчетаОперандов",ТабСчетаОперандов);
		Запрос.Выполнить();
		
		ТекстОтбор="	
		|ГДЕ ТаблицаДанных.СчетКод В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТабСчетаОперандов.СчетДанные ИЗ ТабСчетаОперандов КАК ТабСчетаОперандов ГДЕ ТабСчетаОперандов.КодОперанда В(&СписокКодовОперандов))"; 
		
		Если ЕстьКоррСчета Тогда
			ТекстОтбор=ТекстОтбор+"
			|И ТаблицаДанных.КоррСчетКод В (ВЫБРАТЬ РАЗЛИЧНЫЕ ТабСчетаОперандов.КоррСчетДанные ИЗ ТабСчетаОперандов КАК ТабСчетаОперандов ГДЕ ТабСчетаОперандов.КодОперанда В(&СписокКодовОперандов))"; 
		КонецЕсли;
		
		Для Каждого СтрПравило ИЗ ТабПравилаИспользованияПолей Цикл
			
			ТекПравило=СтрПравило.ПравилаИспользованияПолей;
			ТекстПоля=",ТаблицаДанных.СчетКод";
			ТекстГруппировка=",ТаблицаДанных.СчетКод";
			
			Если ЕстьКоррСчета Тогда
				
				ТекстПоля=ТекстПоля+",ТаблицаДанных.КоррСчетКод";
				ТекстГруппировка=ТекстГруппировка+",ТаблицаДанных.КоррСчетКод";
				
			КонецЕсли;
			
			Для Каждого СтрРесурс ИЗ МассивРесурсов Цикл
				
				ТекстПоля=ТекстПоля+",
				|СУММА(ТаблицаДанных."+СтрРесурс+") КАК "+СтрРесурс;
				
			КонецЦикла;
			
			МассивПолей=Новый Массив;
			
			Для Каждого СтрПоле ИЗ ТекПравило Цикл
				
				Если МассивРесурсов.Найти(СтрПоле.Синоним)=Неопределено
					И МассивПолей.Найти(СтрПоле.Синоним)=Неопределено Тогда
					
					ДанныеКолонки=ТаблицаДанных.Колонки.Найти(СтрПоле.Синоним);
					
					Если ДанныеКолонки.ТипЗначения=ОписаниеТиповСтрокаНеограниченнойДлины Тогда
						
						ТекстПоля=ТекстПоля+",
						|ВЫРАЗИТЬ(ТаблицаДанных."+СтрПоле.Синоним+" КАК Строка(255))  КАК "+СтрПоле.Синоним;
						
						ТекстГруппировка=ТекстГруппировка+",
						|ВЫРАЗИТЬ(ТаблицаДанных."+СтрПоле.Синоним+" КАК Строка(255))";
						
						
					Иначе
						
						ТекстПоля=ТекстПоля+",
						|ТаблицаДанных."+СтрПоле.Синоним+" КАК "+СтрПоле.Синоним;
						
						ТекстГруппировка=ТекстГруппировка+",
						|ТаблицаДанных."+СтрПоле.Синоним;
						
					КонецЕсли;
					
					МассивПолей.Добавить(СтрПоле.Синоним);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстПоля,2)+"
			|ИЗ ТаблицаДанных КАК ТаблицаДанных"+ТекстОтбор+"
			|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2);
			
			Запрос.УстановитьПараметр("СписокКодовОперандов",СтрПравило.СписокКодовОперандов);
			
			ТекТаблицаДанных=Запрос.Выполнить().Выгрузить();
			
			ПравилаИспользованияПолей=СтрПравило.ПравилаИспользованияПолей;
			ЕстьРазворотПоАналитикам=НЕ (ПравилаИспользованияПолей.Количество()=1 И СтрНайти(ПравилаИспользованияПолей[0].КодАналитики,"Аналитика")=0);
			
			Если ЕстьРазворотПоАналитикам Тогда
				
				ТабОперандов=РасширениеИнтеграцииУХ.ТрансформироватьВнешниеДанные(ОбъектРасчета,ТекТаблицаДанных,ПравилаИспользованияПолей);
				
				Если ТабОперандов=Ложь Тогда // Невозможно корректно сопоставить аналитики
					
					Возврат;
					
				КонецЕсли;
				
				ПоместитьЗначенияВТаблицуОперандовВИБ(ОбъектРасчета,ТабОперандов,ТабСчетаОперандов,СоответствиеРесурсов,МассивРесурсов,Истина,СтрПравило.СписокКодовОперандов);
				
			Иначе
				
				ПоместитьЗначенияВТаблицуОперандовВИБ(ОбъектРасчета,ТекТаблицаДанных,ТабСчетаОперандов,СоответствиеРесурсов,МассивРесурсов,Ложь,СтрПравило.СписокКодовОперандов);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РазобратьСводныеДанныеРегистраБухгалтерииВИБ()

Процедура РазобратьСводныеДанныеADO(ОбъектРасчета, ТаблицаДанных, ТаблицаОперандов, ТабПравилаИспользованияПолей, РасширенныйАлгоритмРасчетаПоказателей=Ложь)
	
	Если ТаблицаДанных.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;	
	
	Запрос.Текст="Выбрать *
	|Поместить ТаблицаДанных
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник",ТаблицаДанных);
	Запрос.Выполнить();
	
	МассивАналитик=Новый Массив;
	
	Для Каждого СтрПоле ИЗ ТабПравилаИспользованияПолей Цикл
		
		Если СтрНайти(СтрПоле.КодАналитики,"Аналитика")>0 
			И МассивАналитик.Найти(СтрПоле.КодАналитики)=Неопределено
			И СтрНайти(СтрПоле.КодАналитики,"vzv")=0
			И СтрНайти(СтрПоле.КодАналитики,"_")=0  Тогда
			
			МассивАналитик.Добавить(СтрПоле.КодАналитики);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса="";
	ТекстГруппировки="";
	
	Для Каждого СтрАналитика ИЗ МассивАналитик Цикл
		
		ТекстЗапроса=ТекстЗапроса+",ТаблицаДанных."+СтрАналитика;
		ТекстГруппировки=ТекстГруппировки+",ТаблицаДанных."+СтрАналитика;
		
	КонецЦикла;
	
	Для Каждого СтрОперанд ИЗ ТаблицаОперандов Цикл
		
		Если СтрОперанд.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			
			Если МассивАналитик.Количество()>0 Тогда 
				
				Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстЗапроса,2)+",
				|&КодОперанда КАК КодОперанда,
				|СУММА(ТаблицаДанных."+СтрОперанд.Код+") КАК Значение
				|ИЗ ТаблицаДанных КАК ТаблицаДанных
				|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировки,2)+"
				|;
				|ВЫБРАТЬ СУММА(ТаблицаДанных."+СтрОперанд.Код+") КАК Значение
				|ИЗ ТаблицаДанных КАК ТаблицаДанных";
				
				Запрос.УстановитьПараметр("КодОперанда",СтрОперанд.Код);
				
				РезультатЗапроса=Запрос.ВыполнитьПакет();
				
				ТабАналитики=РезультатЗапроса[0].Выгрузить();
				
				Для Каждого Строка ИЗ ТабАналитики Цикл
					
					Если ЗначениеЗаполнено(Строка.Значение) Тогда
						
						НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если НЕ РасширенныйАлгоритмРасчетаПоказателей Тогда
				
					СводныйРезультат=РезультатЗапроса[1].Выгрузить();
					
					НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
					НоваяСтрока.КодОперанда=СтрОперанд.Код;
					НоваяСтрока.Значение=СводныйРезультат[0].Значение;
					НоваяСтрока.ИтогПоПоказателю=Истина;
					
				КонецЕсли;
				
			Иначе
				
				Запрос.Текст="ВЫБРАТЬ СУММА("+СтрОперанд.Код+") КАК Значение
				|ИЗ ТаблицаДанных КАК ТаблицаДанных";
				
				Результат=Запрос.Выполнить().Выгрузить();
				
				НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
				НоваяСтрока.КодОперанда			= СтрОперанд.Код;
				НоваяСтрока.Значение 			= Результат[0].Значение;
				НоваяСтрока.ИтогПоПоказателю 	= НЕ РасширенныйАлгоритмРасчетаПоказателей;
				
			КонецЕсли;
			
		Иначе
					
			Запрос.Текст="ВЫБРАТЬ "+ ?(ТекстЗапроса = "", "", Сред(ТекстЗапроса,2)+",") +"
			|&КодОперанда КАК КодОперанда,
			|"+СтрОперанд.Код+" КАК Значение
			|ИЗ ТаблицаДанных КАК ТаблицаДанных";
			
			Запрос.УстановитьПараметр("КодОперанда",СтрОперанд.Код);
			
			ТабРезультат=Запрос.Выполнить().Выгрузить();
			
			Для Каждого Строка ИЗ ТабРезультат Цикл
				
				Если ЗначениеЗаполнено(Строка.Значение) Тогда
					
					НоваяСтрока=ОбъектРасчета.мЗначенияОперандов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ РасширенныйАлгоритмРасчетаПоказателей Тогда
			
				ИтоговоеЗначение=ОбщегоНазначенияУХ.ТЗИтог(ТабРезультат,,"Значение",СтрОперанд.ВидИтогаПоказателя,СтрОперанд.ТипЗначенияПоказателя);
				
				НоваяСтрока = ОбъектРасчета.мЗначенияОперандов.Добавить();
				НоваяСтрока.КодОперанда = СтрОперанд.Код;
				НоваяСтрока.Значение = ИтоговоеЗначение;
				НоваяСтрока.ИтогПоПоказателю=Истина;
				
			КонецЕсли;
			
		КонецЕсли;	
		
	КонецЦикла;
		
КонецПроцедуры

// Функция возвращает таблицу значений для операнда, получаемого из регистра 1С: Предприятия 7.7
//
Функция ПолучитьТаблицуДанныхДляРегистра77(СтруктураЗапроса, ПроверочнаяТаблица = Неопределено,ТолькоРегистр=Ложь) Экспорт
	
	Перем ДатаНач;
	Перем ДатаКон;
	
	Перем Справочник;
	
	Если ТипЗнч(ПроверочнаяТаблица) = Тип("ТаблицаЗначений") Тогда
		ПроверочнаяТаблица.Колонки.Добавить("ПолеОтбора");
		ПроверочнаяТаблица.Колонки.Добавить("ЗначениеКонсолидации");
		ПроверочнаяТаблица.Колонки.Добавить("ЗначениеВИБ");
	КонецЕсли;
	
	ТекстЗапроса      = СтруктураЗапроса.ТекстЗапроса;
	
	ИмяРегистра    = СокрЛП(СтрПолучитьСтроку(ТекстЗапроса, 1));
	РесурсРегистра = СокрЛП(СтрПолучитьСтроку(ТекстЗапроса, 2));
	ВидИтога       = СокрЛП(СтрПолучитьСтроку(ТекстЗапроса, 3));
	
	Попытка
		СтруктураЗапроса.База.Метаданные().Обработка("GetTotals").Идентификатор();
	Исключение
		ВызватьИсключение("В 1С Предприятии 7.7 не установлена обработка ""GetTotals""");
		Возврат ПроверочнаяТаблица;
	КонецПопытки;
	
	Регистр = СтруктураЗапроса.База.CreateObject("Регистр." + ИмяРегистра);
	Регистр.ВременныйРасчет();
	
	МассивПолей = Новый Массив;
	
	СписокНачальныхЗначений = СтруктураЗапроса.База.CreateObject("СписокЗначений");
	СписокОтборов           = СтруктураЗапроса.База.CreateObject("СписокЗначений");
	СписокПолей             = СтруктураЗапроса.База.CreateObject("СписокЗначений");
	
	// Начинаем заполнение списка начальных значений для передачи в ВИБ 7.7
	СписокНачальныхЗначений.Установить("Регистр", ИмяРегистра);
	СписокНачальныхЗначений.Установить("Ресурс", РесурсРегистра);
	Если ВидИтога = "НачальныйОстаток" Тогда
		ВидРасчета = "НачОст";
	ИначеЕсли ВидИтога = "КонечныйОстаток" Тогда
		ВидРасчета  ="КонОст";
	ИначеЕсли ВидИтога = "Оборот" Тогда
		ВидРасчета = "Сумма"
	Иначе
		ВидРасчета = ВидИтога;
	КонецЕсли;
	
	СписокНачальныхЗначений.Установить("ВидРасчета", ВидРасчета);
	ИзмерениеОрганизация="";
	
	Для Каждого СтрокаВычисления Из СтруктураЗапроса.ТаблицаВычисленияПараметров Цикл
		
		Если СтрокаВычисления.ТипРасчета = "НеИспользуется" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначениеПараметра = ПолучитьЗначениеВИБНаОснованииОтбора77(СтруктураЗапроса.ВИБ,СтруктураЗапроса.База, СтрокаВычисления);
		
		Если СтрокаВычисления.ИмяПараметра = "ДатаНач" Тогда
			ДатаНач = ЗначениеПараметра;
			СписокНачальныхЗначений.Установить("ДатаНач", ДатаНач);
		ИначеЕсли СтрокаВычисления.ИмяПараметра = "ДатаКон" Тогда
			ДатаКон = ЗначениеПараметра;
			СписокНачальныхЗначений.Установить("ДатаКон", ДатаКон);
		ИначеЕсли СтруктураЗапроса.Свойство("Статья") И СтрокаВычисления.ИмяПараметра = "НачалоПериода" Тогда
			
			СписокНачальныхЗначений.Установить("ДатаНач",НачалоМесяца(ДобавитьМесяц(ЗначениеПараметра,-12)));
			СписокНачальныхЗначений.Установить("ДатаКон",КонецМесяца(ЗначениеПараметра));
			
			СписокОтборов.ДобавитьЗначение(ЗначениеПараметра, СтрокаВычисления.ИмяПараметра);	
			Регистр.УстановитьЗначениеФильтра(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра);
			
		Иначе
			
			Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
				
				Если ЗначениеПараметра.Количество() = 1 Тогда
					ТекЗначение = ЗначениеПараметра[0];
				Иначе
					ТекЗначение = СтруктураЗапроса.База.CreateObject("СписокЗначений");
					Для Каждого Элемент Из ЗначениеПараметра Цикл
						ТекЗначение.ДобавитьЗначение(Элемент);
					КонецЦикла;
				КонецЕсли;
				
				ЗначениеПараметра = ТекЗначение;
				
			КонецЕсли;
			
			СписокОтборов.ДобавитьЗначение(ЗначениеПараметра, СтрокаВычисления.ИмяПараметра);	
			Регистр.УстановитьЗначениеФильтра(СтрокаВычисления.ИмяПараметра, ЗначениеПараметра);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Для получения данных из фин. планирования
	Если СтруктураЗапроса.Свойство("Статья") Тогда
		
		СтатьиВИБ=СтруктураЗапроса.База.CreateObject("Справочник.Статьи");
		СтатьиВИБ.НайтиПоКоду(СтруктураЗапроса.Статья);
		
		Если СтатьиВИБ.Выбран() = 1 Тогда
			
			ТекЭлемент=СтатьиВИБ.ТекущийЭлемент();
			
			СписокОтборов.ДобавитьЗначение(ТекЭлемент, "Статья");		
			Регистр.УстановитьЗначениеФильтра("Статья", ТекЭлемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаДанныхНО    = Новый ТаблицаЗначений;
	
	СтрокаСвертки = "";
	
	КэшСправочников = Новый Структура;
	КэшПеречислений = Новый Структура;
	
	СтруктураПолей  = Новый Структура;
	СтруктураОтбора = Новый Структура;
	
	Если ТолькоРегистр Тогда
		
		СтруктураИзмерений=Новый Структура;
		
		СтруктураИтоги=Новый Структура;
		СтруктураИтоги.Вставить("ИмяРегистра",ИмяРегистра);
		СтруктураИтоги.Вставить("ТипРегистра",СтруктураЗапроса.База.Метаданные().Регистр(ИмяРегистра).ТипРегистра);
		СтруктураИтоги.Вставить("РесурсРегистра",РесурсРегистра);
		
	КонецЕсли;
	
	Для Каждого ИспользованиеПолейЗапроса Из СтруктураЗапроса.ТаблицаИспользованияПолейЗапроса Цикл
		Если НЕ ИспользованиеПолейЗапроса.КодАналитики="Значение"  Тогда // Добавляем в том случае, если настроено соответствие аналитик.
			
			ПолеИзмерения = СтрЗаменить(ИспользованиеПолейЗапроса.Поле, "." + ИспользованиеПолейЗапроса.РеквизитАналитики, "");
			
			Если СтрНайти(ПолеИзмерения,".")>0 Тогда
				ПолеИзмерения=Лев(ПолеИзмерения, СтрНайти(ПолеИзмерения,".")-1);
			КонецЕсли;	
			
			Измерение     = СтруктураЗапроса.База.Метаданные().Регистр(ИмяРегистра).Измерение(ПолеИзмерения);
			
			Если ТолькоРегистр И НЕ СтруктураИзмерений.Свойство(ПолеИзмерения) Тогда 
				
				СтруктураРеквизитов=Новый Структура;
				СтруктураРеквизитов.Вставить("Тип",Измерение.Тип);
				СтруктураРеквизитов.Вставить("Вид",Измерение.Вид);
				
				СтруктураИзмерений.Вставить(ПолеИзмерения,СтруктураРеквизитов);
				
			КонецЕсли;	
			
			Если Измерение.Тип = "Справочник" Тогда
				
				Если НЕ КэшСправочников.Свойство(Измерение.Вид, Справочник) Тогда
					Справочник = СтруктураЗапроса.База.Метаданные().Справочник(Измерение.Вид);
					КэшСправочников.Вставить(Измерение.Вид, Справочник);
				КонецЕсли;
				
			ИначеЕсли Измерение.Тип = "Перечисление" Тогда
				
				Если НЕ КэшПеречислений.Свойство(Измерение.Вид, Справочник) Тогда
					Справочник = СтруктураЗапроса.База.Метаданные().Перечисление(Измерение.Вид);
					КэшПеречислений.Вставить(Измерение.Вид, Справочник);
				КонецЕсли;
				
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ИспользованиеПолейЗапроса.РеквизитАналитики="КодДляСинхронизации" Тогда
				ТекущийРеквизит="Код";
			Иначе
				ТекущийРеквизит=ИспользованиеПолейЗапроса.РеквизитАналитики;
			КонецЕсли;
			
			Если ТекущийРеквизит = "Наименование" Тогда
				Если  Измерение.Тип="Справочник" Тогда
					ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(Справочник.ДлинаНаименования);
				Иначе
					ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100);
				КонецЕсли;
			ИначеЕсли ТекущийРеквизит = "Код" Тогда
				ДлинаКода = Справочник.ДлинаКода;
				ТипЗначенияПоля = ?(Справочник.ТипКода = "Текстовый"
				, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(ДлинаКода)
				, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(ДлинаКода));
			Иначе
				
				ДлинаПоля    = Справочник.Реквизит(ТекущийРеквизит).Длина;
				ТочностьПоля = Справочник.Реквизит(ТекущийРеквизит).Точность;
				ТипПоля      = Справочник.Реквизит(ТекущийРеквизит).Тип;
				
				Если ТипПоля = "Строка" Тогда
					ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(?(ДлинаПоля = 0, 500, ДлинаПоля));
				ИначеЕсли ТипПоля = "Число" Тогда
					ТипЗначенияПоля = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(ДлинаПоля, ТочностьПоля);
				Иначе
					ТипЗначенияПоля = Новый ОписаниеТипов(ТипПоля);
				КонецЕсли;
				
			КонецЕсли;
			
			НаименованиеПоля = ИспользованиеПолейЗапроса.Синоним;
			
			Если НЕ СтруктураПолей.Свойство(ПолеИзмерения, МассивПолей) Тогда
				МассивПолей = Новый Массив;
				СтруктураПолей.Вставить(ПолеИзмерения, МассивПолей);
			КонецЕсли;
			
			МассивПолей.Добавить(Новый Структура("Тип, Реквизит, ИмяКолонки", Измерение.Тип, ТекущийРеквизит
			, НаименованиеПоля));
			
			СписокПолей.ДобавитьЗначение(ИспользованиеПолейЗапроса.Поле, НаименованиеПоля);
			СтрокаСвертки = СтрокаСвертки + ПолеИзмерения + ", ";
			СтруктураОтбора.Вставить(НаименованиеПоля);
			ТаблицаДанныхНО.Колонки.Добавить(НаименованиеПоля, ТипЗначенияПоля);
			
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаСвертки) Тогда
		СтрокаСвертки = Лев(СтрокаСвертки, СтрДлина(СтрокаСвертки) - 2);
	КонецЕсли;
	
	ТаблицаДанныхНО.Колонки.Добавить("Значение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДанныхКО = ТаблицаДанныхНО.СкопироватьКолонки();
	
	СписокНачальныхЗначений.Установить("СписокПолей", СписокПолей);
	СписокНачальныхЗначений.Установить("СписокОтборов", СписокОтборов);
	
	Если ТолькоРегистр Тогда
		
		СтруктураИтоги.Вставить("Измерения",СтруктураИзмерений);
		СтруктураИтоги.Вставить("Регистр",Регистр);
		СтруктураИтоги.Вставить("СписокНачальныхЗначений",СписокНачальныхЗначений);
		Возврат СтруктураИтоги;
		
	КонецЕсли;
	
	ТЗ_ВИБ = Неопределено;
	СтруктураЗапроса.База.СохранитьЗначение("_СписокНачальныхЗначений", СписокНачальныхЗначений);
	СтруктураЗапроса.База.ExecuteBatch("ОткрытьФормуМодально(""Обработка.GetTotals"")"); // Открываем обработку для получения данных из ВИБ
	Попытка
		ТЗ_ВИБ = СтруктураЗапроса.База.ВосстановитьЗначение("_ТаблицаДанных", Неопределено);
	Исключение
		
	КонецПопытки;
	
	ТаблицаДанных = ТаблицаДанныхНО.СкопироватьКолонки();
	
	Попытка
		ПеренестиДанныеИзТЗ77(ТЗ_ВИБ, ТаблицаДанных, СтруктураПолей, "Значение");
	Исключение
	КонецПопытки;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Функция возвращает элемент справочника из ВИБ, удовлетворяющего условиям,
// указанным в поле УточнениеСпособаОпределения параметра СтрокаВычисления.
//
Функция ПолучитьЗначениеВИБНаОснованииОтбора77(ВИБ,База, СтрокаВычисления) Экспорт
	
	Если СтрокаВычисления.ТипРасчета = "НеИспользуется" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаВычисления.ТипРасчета = "Простой" ИЛИ СтрокаВычисления.ТипРасчета="ПоКонсолидирующейОрганизации" Тогда
		
		СтруктураОтбора  = СтрокаВычисления.УточнениеСпособаОпределения;
		
		Если ЗначениеЗаполнено(СтруктураОтбора)	 Тогда
			
			Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
				СтруктураСправочники = Неопределено;
				МассивОтбора = Новый Массив;
				Если СтруктураОтбора.Свойство("_Справочники", СтруктураСправочники) Тогда
					СтруктураОтбора.Свойство("МассивОтбора", МассивОтбора);
					Возврат ПолучитьОтборИзВИБ77(ВИБ, База, СтруктураСправочники.СправочникБД, СтрокаВычисления.ИмяПараметра, МассивОтбора);
					
				Иначе
					Возврат СтруктураОтбора;
				КонецЕсли;
				
			Иначе
				Возврат СтруктураОтбора;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрНайти(СтрокаВычисления.ТипРасчета,"Периоды") <> 0
		ИЛИ СтрНайти(СтрокаВычисления.ТипРасчета,"Год") <> 0 Тогда
		
		Если СтрокаВычисления.ИзКонтекста Тогда
			
			ЗначениеПараметра=СтрокаВычисления.ЗначениеИзКонтекста;
			
		Иначе
			
			Если НЕ ЗначениеЗаполнено(СтрокаВычисления.ЗначениеДляПроверки) Тогда
				ЗначениеПараметра='00010101000000';
				
			Иначе	
				
				ЗначениеПараметра = УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтрокаВычисления.ЗначениеДляПроверки,СтрокаВычисления.ТипРасчета
				, СтрокаВычисления.УточнениеСпособаОпределения);
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ЗначениеПараметра;
		
	ИначеЕсли СтрокаВычисления.ТипРасчета = "ПоКоду" Тогда
		
		Если ПустаяСтрока(СтрокаВычисления.ЗначениеДляПроверки) Тогда
			ТекстСообщения = НСтр("ru = 'Для параметра %ИмяПараметра% не задано значение по умолчанию. Параметр игнорируется.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(СтрокаВычисления.ИмяПараметра));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат Неопределено;
		КонецЕсли;
		
		//	ТипЗначения = мСоответствиеИзмеренийСпособовИТипов.Найти(СтрокаВычисления.СпособВычисленияПараметра, "СпособВычисления").ТипДанных;
		
		Если Не ПустаяСтрока(СтрокаВычисления.УточнениеСпособаОпределения) Тогда
			СтруктураОтбора = СтрокаВычисления.УточнениеСпособаОпределения;
			Если ТипЗнч(СтруктураОтбора) = Тип("Структура") Тогда
				
				СписокЗначений=ПолучитьОтборПоДаннымКонсолидации77(ВИБ,База, СтрокаВычисления.ИмяПараметра, 
						СтрокаВЫчисления.ЗначениеДляПроверки, СтруктураОтбора);
				
				Возврат СписокЗначений;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаВычисления.ТипРасчета="Функция" Тогда
		
		Возврат СтрокаВычисления.ЗначениеИзКонтекста; 
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции


// Функция переносит данные из таблицы, полученной из 7.7 в специально подготовленную таблицу 1С: Предприятия 8.
Процедура ПеренестиДанныеИзТЗ77(Таблица77, Таблица8, СтруктураПолей, РесурсРегистра)
	
	Таблица8.Очистить();
	
	Таблица77.ВыбратьСтроки();
	Для Инд = 1 По Таблица77.КоличествоСтрок() Цикл
		
		НоваяСтрока = Таблица8.Добавить();
		
		Для Каждого Элемент Из СтруктураПолей Цикл
			//ТекЭлемент = Таблица77.ПолучитьЗначение(Инд, Элемент.Ключ);
			Для Каждого ЭлементМассива Из Элемент.Значение Цикл
				Если ЭлементМассива.Тип="Перечисление" Тогда
					НоваяСтрока[ЭлементМассива.ИмяКолонки] = Таблица77.ПолучитьЗначение(Инд, ЭлементМассива.ИмяКолонки).Identifier();
				Иначе
					НоваяСтрока[ЭлементМассива.ИмяКолонки] = Таблица77.ПолучитьЗначение(Инд, ЭлементМассива.ИмяКолонки);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		НоваяСтрока.Значение = Таблица77.ПолучитьЗначение(Инд, РесурсРегистра);
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает ТЗ для конкретной аналитики основного счета, заданной параметром ТекИндекс.
//
Функция ПолучитьРазвертываниеПоСубконто(БухИтоги, СписокРесурсов, ТекИндекс, СтруктураПолей, ТаблицаИспользуемыхАналитик, ТекСчет
	, ИспКорСчет = Ложь
	, ТаблицаИспользуемыхАналитикКС = Неопределено)
	
	Перем ТекМассивПолей;
	Перем ТЗ;
	
	ПоследнееСубконто = (ТекИндекс = ТаблицаИспользуемыхАналитик[ТаблицаИспользуемыхАналитик.Количество()-1].ИндексСубконто);
	ТекСтрока         = ТаблицаИспользуемыхАналитик.Найти(ТекИндекс,"ИндексСубконто");
	
	СтруктураПолей.Свойство(ТекСтрока.АналитикаСчета, ТекМассивПолей);
	БухИтоги.ВыбратьСубконто(ТекИндекс, 0, 0, Неопределено, 1);
	
	Пока БухИтоги.ПолучитьСубконто(ТекИндекс) = 1 Цикл
		
		Субконто = БухИтоги.Субконто(ТекИндекс);
		
		Если ПоследнееСубконто Тогда
			
			Если ИспКорСчет И ТаблицаИспользуемыхАналитикКС.Количество()>0 Тогда
				
				Врем_ТЗ = ПолучитьРазвертываниеПоСубконтоКС(БухИтоги, СписокРесурсов, ТаблицаИспользуемыхАналитикКС[0].ИндексСубконто, СтруктураПолей, ТаблицаИспользуемыхАналитикКС, Истина);
				
				Для Каждого Элемент Из ТекМассивПолей Цикл
					
					Если Элемент.Реквизит="Наименование" Тогда
						Попытка
							Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
						Исключение
							Врем_ТЗ.ЗаполнитьЗначения(Субконто.Identifier(), Элемент.ИмяКолонки);
						КонецПопытки;
					Иначе
						Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
					КонецЕсли;
					
				КонецЦикла;
				
				Если ТЗ = Неопределено Тогда
					ТЗ = Врем_ТЗ.СкопироватьКолонки();
				КонецЕсли;
				
				ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Врем_ТЗ, ТЗ);
				
			Иначе
				
				Если ТЗ = Неопределено Тогда
					ТЗ = СформироватьТЗНаОсновеСтруктуры(СтруктураПолей);
				КонецЕсли;
				
				НоваяСтрока = ТЗ.Добавить();
				НоваяСтрока.Счет = ТекСчет;
				
				Для Каждого Ресурс ИЗ СписокРесурсов Цикл
					
					НоваяСтрока[Ресурс.Значение] = ПолучитьЗначениеИтогов(БухИтоги,Ресурс.Значение, Истина, Ложь);
					
				КонецЦикла;
				
				Если ТекСтрока.ПомещатьВТаблицу Тогда
					Для Каждого Элемент Из ТекМассивПолей Цикл
						
						Если Элемент.Реквизит="Наименование" Тогда
							Попытка
								НоваяСтрока[Элемент.ИмяКолонки] = Субконто[Элемент.Реквизит];
							Исключение
								НоваяСтрока[Элемент.ИмяКолонки] = Субконто.Identifier();
							КонецПопытки;
						Иначе
							НоваяСтрока[Элемент.ИмяКолонки] = Субконто[Элемент.Реквизит];
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Врем_ТЗ = ПолучитьРазвертываниеПоСубконто(БухИтоги, СписокРесурсов, ТекИндекс + 1, СтруктураПолей, ТаблицаИспользуемыхАналитик, ТекСчет,ИспКорСчет,ТаблицаИспользуемыхАналитикКС);
			
			Если СтруктураПолей.Свойство(ТекСтрока.АналитикаСчета, ТекМассивПолей) Тогда
				
				Для Каждого Элемент Из ТекМассивПолей Цикл
					
					Если Элемент.Реквизит="Наименование" Тогда
						Попытка
							Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
						Исключение
							Врем_ТЗ.ЗаполнитьЗначения(Субконто.Identifier(), Элемент.ИмяКолонки);
						КонецПопытки;
					Иначе
						Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
					КонецЕсли;		
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТЗ = Неопределено Тогда
				ТЗ = Врем_ТЗ.СкопироватьКолонки();
			КонецЕсли;
			
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Врем_ТЗ, ТЗ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТЗ = Неопределено Тогда
		ТЗ = СформироватьТЗНаОсновеСтруктуры(СтруктураПолей);
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции // ПолучитьРазвертываниеПоСубконто.

// Функция возвращает ТЗ для конкретной аналитики корсчета, заданной параметром ТекИндекс.
//
Функция ПолучитьРазвертываниеПоСубконтоКС(БухИтоги, СписокРесурсов, ТекИндекс, СтруктураПолей, ТаблицаИспользуемыхАналитик, ЕстьСубконтоОснСчета = Ложь)
	
	Перем ТекМассивПолей;
	Перем ТЗ;
	
	ПоследнееСубконто = (ТекИндекс = ТаблицаИспользуемыхАналитик[ТаблицаИспользуемыхАналитик.Количество()-1].ИндексСубконто);
	ТекСтрока         = ТаблицаИспользуемыхАналитик.Найти(ТекИндекс,"ИндексСубконто");
	
	СтруктураПолей.Свойство(ТекСтрока.АналитикаСчета, ТекМассивПолей);
	БухИтоги.ВыбратьКорСубконто(ТекИндекс);
	
	Пока БухИтоги.ПолучитьКорСубконто(ТекИндекс) = 1 Цикл
		
		Субконто = БухИтоги.КорСубконто(ТекИндекс);
		Если ПоследнееСубконто Тогда
			
			Врем_ТЗ = ПолучитьДетализациюПоКС(БухИтоги, СписокРесурсов, СтруктураПолей);
			
			Для Каждого Элемент Из ТекМассивПолей Цикл
				
				Если Элемент.Реквизит="Наименование" Тогда
					Попытка
						Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
					Исключение
						Врем_ТЗ.ЗаполнитьЗначения(Субконто.Identifier(), Элемент.ИмяКолонки);
					КонецПопытки;
				Иначе
					Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТЗ = Неопределено Тогда
				ТЗ = Врем_ТЗ.СкопироватьКолонки();
			КонецЕсли;
			
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Врем_ТЗ, ТЗ);
			
		Иначе
			
			Врем_ТЗ = ПолучитьРазвертываниеПоСубконтоКС(БухИтоги, СписокРесурсов, ТекИндекс + 1, СтруктураПолей, ТаблицаИспользуемыхАналитик, ЕстьСубконтоОснСчета);
			
			Если СтруктураПолей.Свойство(ТекСтрока.АналитикаСчета, ТекМассивПолей) Тогда
				
				Для Каждого Элемент Из ТекМассивПолей Цикл
					
					Если Элемент.Реквизит="Наименование" Тогда
						Попытка
							Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
						Исключение
							Врем_ТЗ.ЗаполнитьЗначения(Субконто.Identifier(), Элемент.ИмяКолонки);
						КонецПопытки;
					Иначе
						Врем_ТЗ.ЗаполнитьЗначения(Субконто[Элемент.Реквизит], Элемент.ИмяКолонки);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если ТЗ = Неопределено Тогда
				ТЗ = Врем_ТЗ.СкопироватьКолонки();
			КонецЕсли;
			
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(Врем_ТЗ, ТЗ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции // ПолучитьРазвертываниеПоСубконтоКС.

// Функция возвращает ТЗ для корсчетов.
//
Функция ПолучитьДетализациюПоКС(БухИтоги, СписокРесурсов, СтруктураПолей, ОборотМеждуСчетами = Ложь)
	
	Перем НоваяСтрока;
	
	ТЗ = СформироватьТЗНаОсновеСтруктуры(СтруктураПолей);
	
	Если ОборотМеждуСчетами Тогда
		
		БухИтоги.ВыбратьКорСчета();
		
		Пока БухИтоги.ПолучитьКорСчет() = 1 Цикл
			
			Для Каждого Ресурс ИЗ СписокРесурсов Цикл
				
				ЗначениеРесурса=ПолучитьЗначениеИтогов(БухИтоги, Ресурс.Значение, ОборотМеждуСчетами, ОборотМеждуСчетами);
				
				Если Не ЗначениеРесурса=0 Тогда
					
					Если НоваяСтрока=Неопределено Тогда
						
						НоваяСтрока = ТЗ.Добавить();
						НоваяСтрока.Счет     = СокрЛП(БухИтоги.Счет.Код);
						НоваяСтрока.КоррСчет = СокрЛП(БухИтоги.КорСчет.Код);
						
					КонецЕсли;	
					
					НоваяСтрока[Ресурс.Значение] = ПолучитьЗначениеИтогов(БухИтоги, Ресурс.Значение, ОборотМеждуСчетами, ОборотМеждуСчетами);
					
				КонецЕсли;
				
			КонецЦикла;
			
			НоваяСтрока=Неопределено;
			
		КонецЦикла;
		
	Иначе	
		
		Для Каждого Ресурс ИЗ СписокРесурсов Цикл
			
			ЗначениеРесурса=ПолучитьЗначениеИтогов(БухИтоги, Ресурс.Значение, ОборотМеждуСчетами, ОборотМеждуСчетами);
			
			Если Не ЗначениеРесурса=0 Тогда
				
				Если НоваяСтрока=Неопределено Тогда
					
					НоваяСтрока = ТЗ.Добавить();
					НоваяСтрока.Счет     = СокрЛП(БухИтоги.Счет.Код);
					НоваяСтрока.КоррСчет = СокрЛП(БухИтоги.КорСчет.Код);
					
				КонецЕсли;	
				
				НоваяСтрока[Ресурс.Значение] = ПолучитьЗначениеИтогов(БухИтоги, Ресурс.Значение, ОборотМеждуСчетами, ОборотМеждуСчетами);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции

Функция ПолучитьЗначениеИтогов(БухИтоги, Ресурс, РаскрытиеПоСубконто = Ложь, ОборотМеждуСчетами = Ложь)
	
	ДанныеРесурса=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Ресурс,"_");
	ВидИтога=ДанныеРесурса[0];
	ТипИтога=ДанныеРесурса[1];
	
	Если ВидИтога = "СНД" Тогда
		Возврат БухИтоги.СНД(ТипИтога);
	ИначеЕсли ВидИтога = "СКД" Тогда
		Возврат БухИтоги.СКД(ТипИтога);
	ИначеЕсли ВидИтога = "СНДРС" Тогда
		Возврат БухИтоги.СНДРС(ТипИтога);
	ИначеЕсли ВидИтога = "СКДРС" Тогда
		Возврат БухИтоги.СКДРС(ТипИтога);
	ИначеЕсли ВидИтога = "СНК" Тогда
		Возврат БухИтоги.СНК(ТипИтога);
	ИначеЕсли ВидИтога = "СКК" Тогда
		Возврат БухИтоги.СКК(ТипИтога);
	ИначеЕсли ВидИтога = "СНКРС" Тогда
		Возврат БухИтоги.СНКРС(ТипИтога);
	ИначеЕсли ВидИтога = "СККРС" Тогда
		Возврат БухИтоги.СККРС(ТипИтога);
	ИначеЕсли ВидИтога = "ДО" Тогда
		Возврат БухИтоги.ДО(ТипИтога);
	ИначеЕсли ВидИтога = "КО" Тогда
		Возврат БухИтоги.КО(ТипИтога);
	ИначеЕсли ВидИтога = "КорДО" Тогда
		Возврат БухИтоги.КорДО(ТипИтога);
	ИначеЕсли ВидИтога = "СНСВ" Тогда
		Возврат БухИтоги.СНД(ТипИтога)-БухИтоги.СНК(ТипИтога);
	ИначеЕсли ВидИтога = "СКСВ" Тогда
		Возврат БухИтоги.СКД(ТипИтога)-БухИтоги.СКК(ТипИтога);
	ИначеЕсли ВидИтога = "СВО" Тогда
		Возврат БухИтоги.ДО(ТипИтога)-БухИтоги.КО(ТипИтога);	
	Иначе
		Возврат 0;
	КонецЕсли
	
КонецФункции

// Функция формирует ТЗ, поля которой соответствуют записям в структуре СтруктураПолей.
//
Функция СформироватьТЗНаОсновеСтруктуры(СтруктураПолей)
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Счет");
	ТЗ.Колонки.Добавить("КоррСчет");
	ТЗ.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	Для Каждого КлючИЗначение Из СтруктураПолей Цикл
		
		Для Каждого Элемент Из КлючИЗначение.Значение Цикл
			
			Если ТЗ.Колонки.Найти(Элемент.ИмяКолонки)=Неопределено Тогда
				
				ТЗ.Колонки.Добавить(Элемент.ИмяКолонки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции



Функция ПолучитьОтборИзВИБ77(ВИБ,База, СправочникБД, ИмяПараметра, МассивОтбора)
	
	МассивЗначений = Новый Массив;
	НоваяСтрока    = Неопределено;
	
	Для Каждого ЭлементМассива Из  МассивОтбора Цикл
		
		ТекстЗапроса = "ТекущийЭлемент = " + СправочникБД + ".ТекущийЭлемент;" + Символы.ПС;
		ТекстУсловия = "";
				
		Для Каждого ЗаписьСтруктуры Из ЭлементМассива Цикл
			
			Если ЗаписьСтруктуры.Ключ = "_ЗначениеКонсолидации" Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|" + ЗаписьСтруктуры.Ключ + " = " + СправочникБД + "." + ЗаписьСтруктуры.Ключ + ";" + Символы.ПС;
			
			ТипЗначения  = ТипЗнч(ЗаписьСтруктуры.Значение);
			Если ТипЗначения = Тип("Строка") Тогда
				
				ЗначениеЗапроса = СтрЗаменить(СокрЛП(ЗаписьСтруктуры.Значение), """", "vzv");
				ТекстУсловия = ТекстУсловия + "
				|Условие(СтрЗаменить(СтрЗаменить(СокрЛП(" + ЗаписьСтруктуры.Ключ + "), """""""", ""vzv""),""\"",""vzv"") = "
				+ ?(СтрДлина(ЗначениеЗапроса) = 0, "СокрЛП("" "")", """" + СтрЗаменить(ЗначениеЗапроса,"\","vzv") + """);");
								
				Продолжить;
				
			КонецЕсли;
			
			Если ТипЗначения = Тип("Число") Тогда
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СокрЛП(" + ЗаписьСтруктуры.Ключ + ") = " + Строка(ЗаписьСтруктуры.Значение) + ");";
											  
			ИначеЕсли ТипЗначения = Тип("Булево") Тогда
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СокрЛП(" + ЗаписьСтруктуры.Ключ + ") = " + ?(ЗаписьСтруктуры.Значение, "0", "-1") + ");";
				
			Иначе
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СокрЛП(" + ЗаписьСтруктуры.Ключ + ") = '" + Формат(ЗаписьСтруктуры.Значение, "ДФ=dd.MM.yy") + "');";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос       = База.CreateObject("Запрос");
		
		ТекстЗапроса = ТекстЗапроса + ТекстУсловия + "
		|Группировка ТекущийЭлемент Без Упорядочивания Без Групп;
		|Без Итогов;";
		Запрос.Выполнить(ТекстЗапроса);
		ТЗ_ВИБ = База.CreateObject("ТаблицаЗначений");
		
		Запрос.Выгрузить(ТЗ_ВИБ, 0, 0);
		
		Если ТЗ_ВИБ.КоличествоСтрок() > 0 Тогда
			
			ЗначениеВИБ=ТЗ_ВИБ.ПолучитьЗначение(1, 1);
			МассивЗначений.Добавить(ЗначениеВИБ);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

Функция ПолучитьОтборПоДаннымКонсолидации77(ВИБ, База, ИмяПараметра, ЗначениеКонсолидации, Отбор)
	
	СтруктураСправочники  = Неопределено;
	МассивЗначений = Новый Массив;
	
	Если НЕ ТипЗнч(ЗначениеКонсолидации) = Тип("СписокЗначений") Тогда
		
		МассивЗначенийКонсолидации=Новый Массив;
		МассивЗначенийКонсолидации.Добавить(ЗначениеКонсолидации);
		
	Иначе
		
		МассивЗначенийКонсолидации=ЗначениеКонсолидации.ВыгрузитьЗначения();
		
	КонецЕсли;
	
	Если НЕ Отбор.Свойство("_Справочники", СтруктураСправочники) Тогда
		Возврат МассивЗначений;
	КонецЕсли;
	
	Для Каждого ТекЗначениеКонсолидации ИЗ МассивЗначенийКонсолидации Цикл
				
		ТекстЗапроса = "ТекущийЭлемент = " + СтруктураСправочники.СправочникБД + ".ТекущийЭлемент;" + Символы.ПС;
		ТекстУсловия = "";
		Для Каждого ЗаписьСтруктуры Из Отбор Цикл
			
			Если ЗаписьСтруктуры.Ключ = "_ЗначениеКонсолидации" 
				ИЛИ ЗаписьСтруктуры.Ключ = "_Справочники" Тогда
				Продолжить;
			КонецЕсли;
						
			ТекстЗапроса = ТекстЗапроса + "
			|" + ЗаписьСтруктуры.Ключ + " = " + СтруктураСправочники.СправочникБД + "." + ЗаписьСтруктуры.Ключ + ";" + Символы.ПС;							  
			
			РеквизитКонсолидации = ТекЗначениеКонсолидации[ЗаписьСтруктуры.Значение];
			ТипЗначения  = ТипЗнч(РеквизитКонсолидации);
			
			Если ТипЗначения = Тип("Строка") Тогда
								
				ЗначениеЗапроса = СтрЗаменить(СокрЛП(РеквизитКонсолидации), """", "vzv");
				
				Если СтрДлина(ЗначениеЗапроса) = 0 Тогда
					ЗначениеЗапроса = """""";
				КонецЕсли;
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СтрЗаменить(СокрЛП(" + ЗаписьСтруктуры.Ключ + "), """""""", ""vzv"") = """ + ЗначениеЗапроса + """);";
				Продолжить;
			КонецЕсли;
			
			Если ТипЗначения = Тип("Число") Тогда
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СокрЛП(" + ЗаписьСтруктуры.Ключ + ") = " + Строка(РеквизитКонсолидации) + ");";
								
			ИначеЕсли ТипЗначения = Тип("Булево") Тогда
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СокрЛП(" + ЗаписьСтруктуры.Ключ + ") = " + ?(РеквизитКонсолидации, "0", "-1") + ");";
				
			Иначе
				
				ТекстУсловия = ТекстУсловия + "
				|Условие(СокрЛП(" + ЗаписьСтруктуры.Ключ + ") = '" + Формат(РеквизитКонсолидации, "ДФ=dd.MM.yy") + "');";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос = База.CreateObject("Запрос");
		
		ТекстЗапроса = ТекстЗапроса + ТекстУсловия + "
		|Группировка ТекущийЭлемент Без Упорядочивания Без Групп;
		|Без Итогов;";
		Запрос.Выполнить(ТекстЗапроса);
		
		ТЗ_ВИБ = База.CreateObject("ТаблицаЗначений");
		Запрос.Выгрузить(ТЗ_ВИБ, 0, 0);
		
		Если ТЗ_ВИБ.КоличествоСтрок() > 0 Тогда
			
			ЗначениеВИБ=ТЗ_ВИБ.ПолучитьЗначение(1, 1);
			
			МассивЗначений.Добавить(ЗначениеВИБ);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивЗначений;
	
КонецФункции

Функция ПолучитьРабочуюСтрокуТаблицыПолей(ТаблицаАналитикиВИБ,ТаблицаПолей)
	
	РабочаяСтрока=ТаблицаПолей.Найти(ТаблицаАналитикиВИБ,"ТаблицаАналитикиВИБ");
	
	Если НЕ РабочаяСтрока=Неопределено Тогда
		Возврат РабочаяСтрока;
	КонецЕсли;
	
	НоваяСтрока=ТаблицаПолей.Добавить();
	НоваяСтрока.ТаблицаАналитикиВИБ=ТаблицаАналитикиВИБ;
	НоваяСтрока.ДанныеСвязаннойТаблицы=УправлениеОтчетамиУХ.ПолучитьДанныеСвязанныхТаблиц(ТаблицаАналитикиВИБ);
	НоваяСтрока.ИмяТаблицы=УправлениеОтчетамиУХ.ПолучитьИмяСвязаннойТаблицы(,НоваяСтрока.ДанныеСвязаннойТаблицы);
	
	Если НоваяСтрока.ДанныеСвязаннойТаблицы.Количество()=1 Тогда
		
		Если НоваяСтрока.ДанныеСвязаннойТаблицы["["+НоваяСтрока.ИмяТаблицы+"]"].Количество()=0 Тогда
			
			НоваяСтрока.ДлинаПути=0;
			
		Иначе
			
			НоваяСтрока.ДлинаПути=1;
			
		КонецЕсли;
		
	Иначе
		
		НоваяСтрока.ДлинаПути=НоваяСтрока.ДанныеСвязаннойТаблицы.Количество();
		
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции // ДобавитьСтрокуВТаблицуПолей()

Функция ADO_ПолучитьКонструкциюОтбора(ПолеБД,СтрокаПараметр) Экспорт
	
	Если ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения)=Тип("СписокЗначений")
		ИЛИ ТипЗнч(СтрокаПараметр.УточнениеСпособаОпределения)=Тип("Массив") Тогда
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда			
			
			Возврат ПолеБД+" NOT IN (&&)";
									
		Иначе
			
			Возврат ПолеБД+" IN (&&)";
			
		КонецЕсли;
		
	Иначе
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
			
			Возврат ПолеБД+"<>&&";
						
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Больше Тогда
			
			Возврат ПолеБД+">&&";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.БольшеИлиРавно Тогда
			
			Возврат ПолеБД+">=&&";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Меньше Тогда
			
			Возврат ПолеБД+"<&&";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.МеньшеИлиРавно Тогда
			
			Возврат ПолеБД+"<=&&";
			
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
			
			Возврат ПолеБД+" IN (&&)";
						
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений Тогда			
			
			Возврат ПолеБД+" NOT IN (&&)";
				
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений Тогда
			
			Возврат ПолеБД+" IN (&&)";
			
		Иначе	
			
			Возврат ПолеБД+"=&&";
			
		КонецЕсли;
		
	КонецЕсли;
			
КонецФункции // ПолучитьКонструкциюОтбора()

Функция ПолучитьСписокОтбора(СтрокаПараметр)
	
	ПараметрыВычисления=СтрокаПараметр.УточнениеСпособаОпределения;
	СписокОтбора=Новый СписокЗначений;
	
	Если ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(СтрокаПараметр.ЗначениеИзКонтекста))
		ИЛИ ТипЗнч(ПараметрыВычисления)=Тип("СписокЗначений") Тогда
		
		ДанныеОтбора=Новый Соответствие;
				
		ДанныеОтбора.Вставить(ADO_ПолучитьКонструкциюОтбора(СтрокаПараметр.ПолеБД,СтрокаПараметр),СтрокаПараметр.ЗначениеИзКонтекста);
		СписокОтбора.Добавить(ДанныеОтбора);
		
	ИначеЕсли ТипЗнч(ПараметрыВычисления)=Тип("Структура") И ПараметрыВычисления.Свойство("ДанныеСинхронизации") Тогда
		
		СписокСинхронизации=ПараметрыВычисления.ДанныеСинхронизации;
		ТекТаблицаАналитики=СписокСинхронизации[0].ТаблицаАналитики;
		
		Если ТипЗнч(СтрокаПараметр.ЗначениеИзКонтекста)=Тип("СписокЗначений") Тогда
			
			Для Каждого Элемент Из СтрокаПараметр.ЗначениеИзКонтекста Цикл
				
				ДанныеОтбора=Новый Соответствие;
				
				Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
					
					ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(Элемент.Значение,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ДанныеОтбора.Вставить(ADO_ПолучитьКонструкциюОтбора(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,СтрокаПараметр),ЗначениеРеквизита);
					
				КонецЦикла;
				
				СписокОтбора.Добавить(ДанныеОтбора);
				
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(СтрокаПараметр.ЗначениеИзКонтекста) Тогда
			
			ДанныеОтбора=Новый Соответствие;
			
			Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
				
				ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(СтрокаПараметр.ЗначениеИзКонтекста,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
				
				Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				ДанныеОтбора.Вставить(ADO_ПолучитьКонструкциюОтбора(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,СтрокаПараметр),ЗначениеРеквизита);
				
			КонецЦикла;
			
			СписокОтбора.Добавить(ДанныеОтбора);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СписокОтбора;
		
КонецФункции // ПолучитьСписокОтбора() 

Функция ADO_ПолучитьДанныеИзЗапроса(ТекстЗапроса, СтруктураЗапроса, ТипыКолонокРезультата, ДополнительныеСвойстваИмпорта = Неопределено)
	
	Попытка	
		
		Соединение=СтруктураЗапроса.База;  
			
		ТаблицаДанных=Новый ТаблицаЗначений;
			
		мНаборЗаписей = Соединение.Execute(ТекстЗапроса);
		
		ДанныеПреобразования=Новый Соответствие;
		
		ОграниченияСтрок = Новый Соответствие;
		
		ТекстГруппировки="";
		ТекстЗначения="";
		
		Для Каждого Поле ИЗ мНаборЗаписей.Fields Цикл
						
			ТипКолонки = ТипыКолонокРезультата[Поле.Name];
			
			Если ТипКолонки = Неопределено Тогда
				ТипКолонки = УправлениеСоединениямиВИБУХ.ВернутьНаименованиеТипа(Поле.Type, Поле.DefinedSize, 18, 5);
			Иначе
				Типы = Новый Массив;
				Типы.Добавить(ТипКолонки);
				ТипКолонки = Новый ОписаниеТипов(Типы);
			КонецЕсли;
			
			ТаблицаДанных.Колонки.Добавить(Поле.Name, ТипКолонки);
			
			Если ТипКолонки = Новый ОписаниеТипов("Строка") Тогда
				ОграниченияСтрок.Вставить(Поле.Name, 0);
			КонецЕсли;
			
			Если ТипКолонки=Новый ОписаниеТипов("Число") И СтруктураЗапроса.СтруктураРесурсов.Свойство(Поле.Name) Тогда
				
				ТекстЗначения=ТекстЗначения+","+Поле.Name;
				
			Иначе
				
				ТекстГруппировки=ТекстГруппировки+","+Поле.Name;
				
			КонецЕсли;
			
		КонецЦикла;	
		
		//ЕстьПреобразованиеТипов=(ДанныеПреобразования.Количество()>0);
		
		//Попытка
		
		Индекс=1;
		
		Пока НЕ мНаборЗаписей.EOF Цикл
			
			НоваяСтрока = ТаблицаДанных.Добавить();
			
			Для Каждого Колонка Из ТаблицаДанных.Колонки Цикл
				
				Попытка
					
					Value = мНаборЗаписей.Fields(Колонка.Имя).Value;
					Если НЕ Value = NULL Тогда
						Если ТипыКолонокРезультата[Колонка.Имя] = Тип("Булево") И ТипЗнч(Value) = Тип("Число") Тогда
							Value = ?(Value = 0, Ложь, Истина);
						ИначеЕсли НЕ ОграниченияСтрок[Колонка.Имя] = Неопределено Тогда
							Длина = СтрДлина(Value);
							Если Длина > ОграниченияСтрок[Колонка.Имя] Тогда
								ОграниченияСтрок.Вставить(Колонка.Имя, Длина);
							КонецЕсли;
						КонецЕсли;
						
						НоваяСтрока[Колонка.Имя] = Value;
												
					КонецЕсли;
					
				Исключение
					
					ТекстСообщения = НСтр("ru = 'Системная ошибка. Подробности в полном протоколе.'");
					ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение("ИнтеграцияСВнешнимиСистемамиУХ.ADO_ПолучитьДанныеИзЗапроса",,, ТекстСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
				КонецПопытки;
					
				//КонецЕсли;
				
			КонецЦикла;
			
			Индекс=Индекс+1;
			мНаборЗаписей.MoveNext();
			
		КонецЦикла;
				
		мНаборЗаписей.Close();
		
		Для Каждого ЭлементОграниченияСтрок Из ОграниченияСтрок Цикл
			Колонка = ТаблицаДанных.Колонки[ЭлементОграниченияСтрок.Ключ];
			Колонка.Имя = "vzv" + СтрЗаменить(Новый УникальныйИдентификатор(), "-", "");
			НоваяКолонка = ТаблицаДанных.Колонки.Добавить(ЭлементОграниченияСтрок.Ключ, Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(?(ЭлементОграниченияСтрок.Значение = 0, 1, ЭлементОграниченияСтрок.Значение))));
			ТаблицаДанных.ЗагрузитьКолонку(ТаблицаДанных.ВыгрузитьКолонку(Колонка), НоваяКолонка);
			ТаблицаДанных.Колонки.Удалить(Колонка);
		КонецЦикла; 
		
		ТаблицаДанных.Свернуть(Сред(ТекстГруппировки,2),Сред(ТекстЗначения,2));
		
	Исключение
		
		ТекстОшибки="";
		
		Если СтруктураЗапроса.Свойство("СтрокаСоединения") Тогда
			
			ТекстОшибки = ПроверитьИсточникADO(СтруктураЗапроса, ДополнительныеСвойстваИмпорта);
			
		КонецЕсли;
		
		ЕстьКритичныеОшибки = Истина;
		Если (ДополнительныеСвойстваИмпорта <> Неопределено) 
			И ПропуститьОшибкиОтсутствияТаблиц(ДополнительныеСвойстваИмпорта) Тогда 
			ЕстьКритичныеОшибки = Ложь; 
		КонецЕсли;
		
		Если ЕстьКритичныеОшибки Тогда
		
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ИнтеграцияСВнешнимиСистемамиУХ.ADO_ПолучитьДанныеИзЗапроса.1011",,,ТекстОшибки,
															ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())+"
															|"+ТекстЗапроса);
			ВызватьИсключение;
		
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ТаблицаДанных;
	
КонецФункции

Функция ПроверитьИсточникADO(СтруктураЗапроса, ДополнительныеСвойстваИмпорта = Неопределено) Экспорт
	
	// Проверим наличие в источнике таблиц, используемых в запросе
	
	Отказ=Ложь;
	ТекстОшибки="";
	
	РезультатПолученияТаблиц = УправлениеСоединениямиВИБУХ.ВернутьСписокТаблицИсточника(СтруктураЗапроса.СтрокаСоединения, Отказ);
	СписокТаблицИсточника = РезультатПолученияТаблиц.СписокТаблиц;
	
	Если РезультатПолученияТаблиц.Отказ = Истина Тогда
		
		Отказ = Истина;		
		Возврат РезультатПолученияТаблиц.СообщениеОбОшибке;
		
	КонецЕсли;
			  
	Для Каждого СтрТаблица ИЗ СтруктураЗапроса.ТаблицаПолей Цикл
		
		Если СписокТаблицИсточника.НайтиПоЗначению(СтрТаблица.ИмяТаблицы)=Неопределено Тогда
			
			ТекстОшибки=СтрШаблон(Нстр("ru = '%1
			|В файле %2 не найдена таблица %3'"), ТекстОшибки, 
			            	СтруктураЗапроса.ТаблицаADO.ИмяФайла, СтрТаблица.ИмяТаблицы);
			
			ДобавитьОшибкуВДополнительныеСвойстваИмпорта(ДополнительныеСвойстваИмпорта, "НеНайденаТаблицаADO");
			
		Иначе
			
			// Проверим наличие в таблице колонок, используемых в запросе
			
			ПоляТаблицы = УправлениеСоединениямиВИБУХ.ВернутьКолонкиТаблицы(СтрТаблица.ИмяТаблицы, СтруктураЗапроса.СтрокаСоединения, Ложь);
			
			Для Каждого СтрПоле ИЗ СтрТаблица.ПоляТаблицы Цикл
				
				ИмяКолонки=ПолучитьИмяКолонкиТаблицы(СтрПоле.Значение);
				
				Если ПоляТаблицы.Найти(ИмяКолонки,"Имя")=Неопределено Тогда
										
					ТекстОшибки=СтрШаблон(Нстр("ru = '%1
					|В таблице %2 файла %3 не найдена колонка %4'"), 
					            	ТекстОшибки, СтрТаблица.ИмяТаблицы, СтруктураЗапроса.ТаблицаADO.ИмяФайла, 
					            	ИмяКолонки);
							
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверитьИсточникADO()

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


Функция СформироватьТекстСоединения(ИмяТаблицы,ПсевдонимСоединения,МассивУсловий)
	
	Если МассивУсловий.Количество()=1 Тогда
		
		Возврат СтрЗаменить(МассивУсловий[0],ИмяТаблицы,ПсевдонимСоединения);
		
	Иначе
		
		СтрУсловия="";
		
		Для Каждого Условие ИЗ МассивУсловий Цикл
			
			СтрУсловия=СтрУсловия+" AND "+СтрЗаменить(Условие,ИмяТаблицы,ПсевдонимСоединения);
			
		КонецЦикла;
		
		Возврат "("+Сред(СтрУсловия,6)+")";
		
	КонецЕсли;
	
КонецФункции // СформироватьТекстСоединения();
			
Функция ПолучитьСтрокуОтбораПоДате(ИмяТаблицы,СтруктураОтбора,СтруктураЗапроса)
	
	ПолеОтбора=СтруктураОтбора.ИмяПоля;
	
	Если СтруктураОтбора.Свойство("ДатаНач") И СтруктураОтбора.Свойство("ДатаКон") Тогда
		
		ТекущийОтбор="((["+ИмяТаблицы+"]."+ПолеОтбора+">="+ПолучитьТекстПараметра(СтруктураОтбора.ДатаНач,СтруктураЗапроса)+") AND (["+ИмяТаблицы+"]."+ПолеОтбора+"<="+ПолучитьТекстПараметра(СтруктураОтбора.ДатаКон,СтруктураЗапроса)+"))"; 
		
	ИначеЕсли СтруктураОтбора.Свойство("ДатаНач") Тогда
		
		ТекущийОтбор="(["+ИмяТаблицы+"]."+ПолеОтбора+">="+ПолучитьТекстПараметра(СтруктураОтбора.ДатаНач,СтруктураЗапроса)+")";
		
	ИначеЕсли СтруктураОтбора.Свойство("ДатаКон") Тогда
		
		ТекущийОтбор= "(["+ИмяТаблицы+"]."+ПолеОтбора+"<="+ПолучитьТекстПараметра(СтруктураОтбора.ДатаКон,СтруктураЗапроса)+")";
		
	Иначе
		
		ТекущийОтбор="";
		
	КонецЕсли;
	
	Возврат ТекущийОтбор;
	
КонецФункции // ПолучитьСтрокуОтбораПоДате() 

Функция ПолучитьТекстОтбораПоСписку(ИмяТаблицы,МассивСоответствий,СтруктураЗапроса)
	
	ТекстОтборСписок="";
	
	Для Каждого Соответствие ИЗ МассивСоответствий Цикл
		
		ТекстОтборСтрока="";
		
		Для Каждого КлючИЗначение ИЗ Соответствие Цикл
			
			ТекстОтборСтрока=ТекстОтборСтрока+" AND (["+ИмяТаблицы+"]."+СтрЗаменить(КлючИЗначение.Ключ,"&&",ПолучитьТекстПараметра(КлючИЗначение.Значение,СтруктураЗапроса))+")";
			
		КонецЦикла;
		
		ТекстОтборСтрока=Сред(ТекстОтборСтрока,6);
		
		ТекстОтборСписок=ТекстОтборСписок+" AND ("+ТекстОтборСтрока+")";
		
	КонецЦикла;
	
	Возврат "("+Сред(ТекстОтборСписок,5)+")";
	
КонецФункции // ПолучитьТекстОтбораПоСписку() 

Функция ADO_ПолучитьСтрокуИзСпискаЗначений(СписокЗначений,СтруктураЗапроса) Экспорт
	
	Если СписокЗначений=Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаСписок="";
	
	Для Каждого Элемент ИЗ СписокЗначений Цикл
		СтрокаСписок=СтрокаСписок+","+ПолучитьТекстПараметра(Элемент.Значение,СтруктураЗапроса);
	КонецЦикла;
	
	Возврат Сред(СтрокаСписок,2);
	
КонецФункции // ПолучитьСтрокуИзСпискаЗначений()
		
Функция ПолучитьТекстПараметра(ЗначениеПараметра,СтруктураЗапроса)
	
	Если ТипЗнч(ЗначениеПараметра)=Тип("Число") Тогда
		
		Возврат Формат(ЗначениеПараметра,"ЧГ=0");
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Строка") Тогда
		
		Возврат "'"+ЗначениеПараметра+"'";
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Дата") Тогда
		
		Если СтрНайти(СтруктураЗапроса.База.Properties("Provider friendly name").Value,"Jet")>0 Тогда
			
			Возврат "CDate('"+Формат(ЗначениеПараметра,"ДФ=""yyyy-MM-dd ЧЧ:мм:сс""")+"')";
			
		Иначе
			
			Возврат "CONVERT(DATETIME,'"+Формат(ЗначениеПараметра,"ДФ=""yyyy-MM-dd ЧЧ:мм:сс""")+"',102)";
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("СписокЗначений") Тогда
		
		Возврат ADO_ПолучитьСтрокуИзСпискаЗначений(ЗначениеПараметра,СтруктураЗапроса); 
		
	ИначеЕсли ТипЗнч(ЗначениеПараметра)=Тип("Булево") Тогда
		
		Если ЗначениеПараметра=Истина Тогда
			
			Возврат "True"
			
		Иначе
			
			Возврат "False";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьТекстПараметра() 

Функция ПолучитьРабочийПсевдонимТаблицы(ИмяТаблицы, ВыбранныеТаблицы)
	
	СтрТаблица=ВыбранныеТаблицы.Найти(ИмяТаблицы,"ИмяТаблицы");
	
	Если СтрТаблица=Неопределено Тогда
		
		НоваяСтрока=ВыбранныеТаблицы.Добавить();
		НоваяСтрока.ИмяТаблицы=ИмяТаблицы;
		НоваяСтрока.КоличествоВыборок=1;
		Возврат ИмяТаблицы;
		
	Иначе
		
		СтрТаблица.КоличествоВыборок=СтрТаблица.КоличествоВыборок+1;
		Возврат ИмяТаблицы+"vzv"+(СтрТаблица.КоличествоВыборок-1);
		
	КонецЕсли;
			
КонецФункции // ПолучитьРабочийПсевдонимТаблицы()

Функция ПолучитьИмяКолонкиТаблицы(ПолеЗапроса)
	
	МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеЗапроса,".");
	
	СтрПоле=МассивПутей[МассивПутей.Количество()-1];
	
	Возврат СтрЗаменить(СтрЗаменить(СтрПоле,"]",""),"[","");
		
КонецФункции // ПолучитьИмяКолонкиТаблицы() 

#Область ДополнительныеСвойстваИмпорта

Процедура ДобавитьОшибкуВДополнительныеСвойстваИмпорта(ДополнительныеСвойстваИмпорта, ИмяОшибки)

	Если ДополнительныеСвойстваИмпорта = Неопределено Тогда
		ДополнительныеСвойстваИмпорта = Новый Структура(ИмяОшибки, Неопределено);
	ИначеЕсли НЕ ДополнительныеСвойстваИмпорта.Свойство(ИмяОшибки) Тогда 
		ДополнительныеСвойстваИмпорта.Вставить(ИмяОшибки, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Функция ПропуститьОшибкиОтсутствияТаблиц(ДополнительныеСвойстваИмпорта) Экспорт

	Возврат ДополнительныеСвойстваИмпорта.Свойство("ПропускатьОшибкиОтсутствияТаблиц") 
			И ДополнительныеСвойстваИмпорта.Свойство("НеНайденаТаблицаADO");

КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Процедура ДобавитьПолеВТаблицуПолей(ТаблицаПолей, ПутьКДанным, ИмяПоля)
	
	НоваяСтрока             = ТаблицаПолей.Добавить();
	НоваяСтрока.ИмяПоля     = ИмяПоля;
	НоваяСтрока.ПутьКДанным = ПутьКДанным;
	
КонецПроцедуры

/////Новые модули для работы с WS

Процедура ПолучитьИдентификаторыВнешнейИБПоТекущему(ИспользуемаяИБ,ОбъектТекущейИБ,МассивОтбора)
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
	|ГДЕ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ = &ОбъектТекущейИБ
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ = &ИспользуемаяИБ";
	
	Запрос.УстановитьПараметр("ОбъектТекущейИБ",ОбъектТекущейИБ);
	Запрос.УстановитьПараметр("ИспользуемаяИБ",ИспользуемаяИБ);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		МассивОтбора.Добавить(Новый Структура("GUID",Результат.ОбъектВнешнейИБ));
			
	КонецЦикла;
			
КонецПроцедуры // ПолучитьОбъектыВнешнейИБПоТекущему()

Функция ПолучитьСтруктуруОтбора(ТаблицаАналитики, Отбор,ИспользуемаяИБ) Экспорт
		
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("ТаблицаАналитики",ТаблицаАналитики);
	СтруктураОтбора.Вставить("МассивОтбора",	Новый Массив);
	
	МассивОтбора=Новый Массив;
	
	Если Отбор.Количество() = 0 Тогда // Обработка выбора пустого значения.
		
		СтруктураОтбора.МассивОтбора.Добавить(Новый Структура("EmptyRef"));
		Возврат СтруктураОтбора;
		
	КонецЕсли;	
	
	Для Каждого ЭлементМассива Из Отбор Цикл
		
		ТекСтруктураОтбора=Новый Структура;
		
		Для Каждого ЗаписьСтруктуры Из ЭлементМассива Цикл
			
			Если ЗаписьСтруктуры.Ключ = "_ЗначениеКонсолидации" Тогда
								
				Продолжить;
				
			ИначеЕсли ЗаписьСтруктуры.Ключ="Ref" ИЛИ СтрНайти(ЗаписьСтруктуры.Ключ,"vzvRef") Тогда
				
				ПолучитьИдентификаторыВнешнейИБПоТекущему(ИспользуемаяИБ,ЗаписьСтруктуры.Значение,СтруктураОтбора.МассивОтбора);
				
				Прервать;
				
			ИначеЕсли ЗаписьСтруктуры.Ключ="Ссылка" И СтрНайти(ЗаписьСтруктуры.Значение,"{#@UUID@#}")>0 Тогда 
				
				СтруктураОтбора.МассивОтбора.Добавить(ЗаписьСтруктуры);
				
				Прервать;
				
			КонецЕсли;
			
			ТекСтруктураОтбора.Вставить(ЗаписьСтруктуры.Ключ,ЗаписьСтруктуры.Значение);
						
		КонецЦикла;
		
		СтруктураОтбора.МассивОтбора.Добавить(ТекСтруктураОтбора);
				
	КонецЦикла;
	
	Возврат СтруктураОтбора;
		
КонецФункции

Функция ПолучитьСтруктуруОтбораПоДаннымКонсолидации(ЗначениеКонсолидации,Отбор,ИспользуемаяИБ)
	
	Перем СтруктураСправочники;
	
	СправочникБД = "";
	
	СтруктураОтбора=Новый Структура;
	СтруктураОтбора.Вставить("МассивОтбора",	Новый Массив);
	
	ТекМассивОтбора=Новый Массив;
		
	Если НЕ ЗначениеЗаполнено(ЗначениеКонсолидации) Тогда
		
		СтруктураСправочники= Неопределено;
		
		Если Отбор.Свойство("_Справочники", СтруктураСправочники) Тогда
			
			СтруктураОтбора.Вставить("ТаблицаАналитики",СтруктураСправочники.СправочникБД);
			СтруктураОтбора.МассивОтбора.Добавить(Новый Структура("EmptyRef"));
												
		КонецЕсли;
		
		ТекМассивОтбора.Добавить(СтруктураОтбора);
		
		Возврат ТекМассивОтбора;
		
	КонецЕсли;
		
	Если НЕ ТипЗнч(ЗначениеКонсолидации)=Тип("СписокЗначений") Тогда
		
		МассивЗначений=Новый Массив;
		МассивЗначений.Добавить(ЗначениеКонсолидации);
		
	Иначе
		
		МассивЗначений=ЗначениеКонсолидации.ВыгрузитьЗначения();
		
	КонецЕсли;
	
	Отбор.Свойство("СтруктураСправочники",СтруктураСправочники);
	
	Если НЕ СтруктураСправочники=Неопределено Тогда
		
		МетаданныеОбъекта=ОбщегоНазначенияУХ.ПолучитьОбъектМетаданныхПоТаблицеАналитики(СтруктураСправочники.СправочникКонсолидации);
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("НСИ_ЭталонныйЭлемент",МетаданныеОбъекта) Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СправочникКонсолидации.Ссылка
			|ИЗ
			|	"+СтруктураСправочники.СправочникКонсолидации+" КАК СправочникКонсолидации
			|ГДЕ
			|	СправочникКонсолидации.НСИ_ЭталонныйЭлемент В(&НСИ_ЭталонныйЭлемент)
			|	И НЕ СправочникКонсолидации.Ссылка В (&НСИ_ЭталонныйЭлемент)
			|	И СправочникКонсолидации.НСИ_ВИБ = &НСИ_ВИБ";
			
			Запрос.УстановитьПараметр("НСИ_ЭталонныйЭлемент",МассивЗначений);
			Запрос.УстановитьПараметр("НСИ_ВИБ",ИспользуемаяИБ);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				МассивЗначений.Добавить(Результат.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отбор.Свойство("СинхронизацияПоGUID") Тогда
		
		ТаблицаАналитикиВИБ=Отбор.НастройкаСоответствия.ТипОбъектаВИБ+"."+Отбор.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
		
		СтруктураОтбора.Вставить("ТаблицаАналитики",ТаблицаАналитикиВИБ);
		
		Для Каждого ТекЗначениеКонсолидации ИЗ МассивЗначений Цикл
			
			ПолучитьИдентификаторыВнешнейИБПоТекущему(ИспользуемаяИБ,ТекЗначениеКонсолидации,СтруктураОтбора.МассивОтбора);
									
		КонецЦикла;
		
		ТекМассивОтбора.Добавить(СтруктураОтбора);
		Возврат ТекМассивОтбора;
				
	КонецЕсли;		
		
	Для Каждого ТекЗначениеКонсолидации ИЗ МассивЗначений Цикл

		ТекСтруктураОтбора=Новый Структура;
		
		СтруктураОтбора=Новый Структура;
		СтруктураОтбора.Вставить("МассивОтбора",	Новый Массив);
		
		СтруктураОтбора.Вставить("ТаблицаАналитики",Отбор._Справочники.СправочникБД);
		СправочникКонсолидации=Отбор._Справочники.СправочникКонсолидации;
	
		Для Каждого ЭлементОтбора Из Отбор Цикл
			
			Если НЕ ЭлементОтбора.Ключ = "_Справочники" Тогда
												
				ТекСтруктураОтбора.Вставить(ЭлементОтбора.Ключ,ПолучитьЗначениеРеквизитаДляОтбора(ТекЗначениеКонсолидации,ЭлементОтбора.Значение,СправочникКонсолидации));
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтруктураОтбора.МассивОтбора.Добавить(ТекСтруктураОтбора);
		ТекМассивОтбора.Добавить(СтруктураОтбора);
				
	КонецЦикла;
	
	Возврат ТекМассивОтбора;
	
КонецФункции

Функция ПолучитьОтборИзВИБ(ВИБ, База, СправочникБД, Отбор) Экспорт
		
	СписокЗначенийВИБ = База.NewObject("СписокЗначений");
	
	НоваяСтрока = Неопределено;
	
	Если Отбор.Количество() = 0 Тогда // Обработка выбора пустого значения.
		
		СписокЗначенийВИБ.Add(ПолучитьПустуюСсылкуБД(База, СправочникБД));		
		Возврат СписокЗначенийВИБ;
		
	КонецЕсли;	
	
	Для Каждого ЭлементМассива Из Отбор Цикл
				
		ТекстЗапроса = "ВЫБРАТЬ СправочникБД.Ссылка ИЗ " + СправочникБД + " КАК СправочникБД ГДЕ ";
		
		ЗначениеПолученоПоСсылке=Ложь;
		
		Для Каждого ЗаписьСтруктуры Из ЭлементМассива Цикл
			
			Если ЗаписьСтруктуры.Ключ = "_ЗначениеКонсолидации" Тогда
								
				Продолжить;
				
			ИначеЕсли ЗаписьСтруктуры.Ключ="Ref" ИЛИ СтрНайти(ЗаписьСтруктуры.Ключ,"vzvRef") Тогда
				
				ПолучитьОбъектыВнешнейИБПоТекущему(ВИБ.ВИБ,База,ЗаписьСтруктуры.Значение,СправочникБД,СписокЗначенийВиб);
				
				Прервать;
				
			ИначеЕсли ЗаписьСтруктуры.Ключ="Ссылка" И СтрНайти(ЗаписьСтруктуры.Значение,"{#@UUID@#}")>0 Тогда // Обрабатываем ссылку внешней ИБ
								
				ИспользуетсяКэш=Ложь;
				
				ОбъектСсылка=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьСсылкуИзТаблицыПОСтрокеUUID(База,СправочникБД,СтрЗаменить(ЗаписьСтруктуры.Значение,"{#@UUID@#}",""));
				
				СписокЗначенийВиб.Add(ОбъектСсылка);
				
				Если НоваяСтрока <> Неопределено Тогда
					
					ПредставлениеСсылки=ПолучитьПредставлениеСсылкиВИБ(База,СправочникБД,ОбъектСсылка);					
					НоваяСтрока.ЗначениеВИБ = ПредставлениеСсылки;
					
				КонецЕсли;
			
				ЗначениеПолученоПоСсылке=Истина;
				
				Прервать;
				
			КонецЕсли;	 
			
			Если СтрНайти(Врег(ЗаписьСтруктуры.Значение),"ЗНАЧЕНИЕ(")>0 Тогда // Получаем перечисление или предопределенный элемент справочника
				
				Если ЗаписьСтруктуры.Ключ="EnumRefValue" Тогда
					
					ТекстЗапроса = ТекстЗапроса + "СправочникБД.Ссылка = " + ЗаписьСтруктуры.Значение + " И ";	
					
				Иначе	
					
					ТекстЗапроса = ТекстЗапроса + "СправочникБД." + СтрЗаменить(ЗаписьСтруктуры.Ключ,"vzv",".") + " = " + ЗаписьСтруктуры.Значение + " И ";
					
				КонецЕсли;
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + "СправочникБД." + СтрЗаменить(ЗаписьСтруктуры.Ключ,"vzv",".") + " = &" + СтрЗаменить(ЗаписьСтруктуры.Ключ,".","") + " И ";
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеПолученоПоСсылке Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Запрос       = База.NewObject("Запрос");
		
		Для Каждого ЗаписьСтруктуры Из ЭлементМассива Цикл
			Если НЕ (СтрНайти(Врег(ЗаписьСтруктуры.Значение),"ЗНАЧЕНИЕ(")>0) Тогда
				Запрос.SetParameter(СтрЗаменить(ЗаписьСтруктуры.Ключ,".",""), ЗаписьСтруктуры.Значение);
			КонецЕсли;
		КонецЦикла;
		
		ТекстЗапроса = Лев(ТекстЗапроса, СтрДлина(ТекстЗапроса) - 2);
		
		Запрос.Text  = ТекстЗапроса;
		Выборка      = Запрос.Execute().Choose();
		
		Если Выборка.Next() Тогда
			
			ЗначениеВИБ=Выборка.Get(0);	
			СписокЗначенийВиб.Add(ЗначениеВИБ);
						
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокЗначенийВИБ.Count()=0 Тогда
		
		СписокЗначенийВИБ.Add(ПолучитьПустуюСсылкуБД(База, СправочникБД));
		
	КонецЕсли;		
	
	Возврат СписокЗначенийВИБ;
	
КонецФункции

Функция ПолучитьОтборПоДаннымКонсолидации(ВИБ,База, ПостроительЗапроса, ИмяПараметра, ЗначениеКонсолидации, Отбор)
	
	Перем СтруктураСправочники;
	
	СправочникБД = "";
	СписокЗначений = База.NewObject("СписокЗначений");
		
	Если НЕ ЗначениеЗаполнено(ЗначениеКонсолидации) Тогда
		
		СтруктураСправочники= Неопределено;
		
		Если Отбор.Свойство("_Справочники", СтруктураСправочники) Тогда
			
			Если СтрЧислоВхождений(СтруктураСправочники.СправочникБД, "Справочник.") > 0 Тогда
				ПустоеЗначение = База.Catalogs(СтрЗаменить(СтруктураСправочники.СправочникБД, "Справочник.", "")).EmptyRef();
			Иначе
				ПустоеЗначение = База.Enums(СтрЗаменить(СтруктураСправочники.СправочникБД, "Перечисление.", "")).EmptyRef();
			КонецЕсли;
			
			СписокЗначений.Add(ПустоеЗначение);
						
		Иначе
			СписокЗначений.Add(NULL);
		КонецЕсли;
		
		Возврат СписокЗначений;
		
	КонецЕсли;
		
	Если НЕ ТипЗнч(ЗначениеКонсолидации)=Тип(СписокЗначений) Тогда
		
		МассивЗначений=Новый Массив;
		МассивЗначений.Добавить(ЗначениеКонсолидации);
		
	Иначе
		
		МассивЗначений=ЗначениеКонсолидации.ВыгрузитьЗначения();
		
	КонецЕсли;
	
	Отбор.Свойство("СтруктураСправочники",СтруктураСправочники);
	
	Если НЕ СтруктураСправочники=Неопределено Тогда
		
		МетаданныеОбъекта=ОбщегоНазначенияУХ.ПолучитьОбъектМетаданныхПоТаблицеАналитики(СтруктураСправочники.СправочникКонсолидации);
		
		Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("НСИ_ЭталонныйЭлемент",МетаданныеОбъекта) Тогда
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ
			|	СправочникКонсолидации.Ссылка
			|ИЗ
			|	"+СтруктураСправочники.СправочникКонсолидации+" КАК СправочникКонсолидации
			|ГДЕ
			|	СправочникКонсолидации.НСИ_ЭталонныйЭлемент В(&НСИ_ЭталонныйЭлемент)
			|	И НЕ СправочникКонсолидации.Ссылка В (&НСИ_ЭталонныйЭлемент)
			|	И СправочникКонсолидации.НСИ_ВИБ = &НСИ_ВИБ";
			
			Запрос.УстановитьПараметр("НСИ_ЭталонныйЭлемент",МассивЗначений);
			Запрос.УстановитьПараметр("НСИ_ВИБ",ВИБ.ВИБ);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				МассивЗначений.Добавить(Результат.Ссылка);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отбор.Свойство("СинхронизацияПоGUID") Тогда
		
		ТаблицаАналитикиВИБ=Отбор.НастройкаСоответствия.ТипОбъектаВИБ+"."+Отбор.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование;
		
		Для Каждого ТекЗначениеКонсолидации ИЗ МассивЗначений Цикл
						
			ЗначениеВИБ=ПолучитьОбъектВнешнейИБПоСсылкеТекущей(База,ТекЗначениеКонсолидации,Отбор.НастройкаСоответствия,ВИБ.ВИБ,ТаблицаАналитикиВИБ);	
			СписокЗначений.Add(ЗначениеВИБ);
						
		КонецЦикла;
		
		Возврат СписокЗначений;
		
	КонецЕсли;		
		
	Для Каждого ТекЗначениеКонсолидации ИЗ МассивЗначений Цикл
		
		ГдеЗапрос     = "";
		
		ТекстЗапроса   = "ВЫБРАТЬ СправочникБД.Ссылка, ПРЕДСТАВЛЕНИЕ(СправочникБД.Ссылка) КАК Представление";
				
		Для Каждого ЭлементОтбора Из Отбор Цикл
			
			Если ЭлементОтбора.Ключ = "_Справочники" Тогда
				
				СтруктураСправочники = ЭлементОтбора.Значение;
				
			Иначе
								
				ГдеЗапрос = ГдеЗапрос + " И СправочникБД." + СтрЗаменить(ЭлементОтбора.Ключ,"vzv",".") + " = &"+ ЭлементОтбора.Ключ;
				ТекстЗапроса = ТекстЗапроса + ", СправочникБД." + СтрЗаменить(ЭлементОтбора.Ключ,"vzv",".")+" КАК "+ЭлементОтбора.Ключ;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос       = База.NewObject("Запрос");
		
		Запрос.Text = ТекстЗапроса + 
		" ИЗ " + СтруктураСправочники.СправочникБД + " КАК СправочникБД
		| ГДЕ " + Сред(ГдеЗапрос, 3);
		
		Для Каждого ЭлементОтбора Из Отбор Цикл
			Если НЕ ЭлементОтбора.Ключ = "_Справочники" Тогда
				Запрос.SetParameter(ЭлементОтбора.Ключ,ПолучитьЗначениеРеквизитаДляОтбора(ТекЗначениеКонсолидации,ЭлементОтбора.Значение,СтруктураСправочники.СправочникКонсолидации));	
			КонецЕсли;	
		КонецЦикла;
		
		Выборка      = Запрос.Execute().Choose();
		
		Если Выборка.Next() Тогда
			
			ЗначениеВИБ=Выборка.Get(0);
			
			СписокЗначений.Add(ЗначениеВИБ);
						
		Иначе
			
			СписокЗначений.Add(NULL);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокЗначений;
	
КонецФункции

Функция ADO_ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаИспользованияПолейЗапроса.Поле,
	|	ПравилаИспользованияПолейЗапроса.Синоним,
	|	ПравилаИспользованияПолейЗапроса.АналитикаОперанда,
	|	ПравилаИспользованияПолейЗапроса.СоздаватьНовые,
	|	ПравилаИспользованияПолейЗапроса.РазделятьПоОрганизациям,
	|	ПравилаИспользованияПолейЗапроса.ОбновлятьРеквизитыПриИмпорте,
	|	ПравилаИспользованияПолейЗапроса.КодАналитики,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия,
	|	ПравилаИспользованияПолейЗапроса.ТаблицаАналитикиВИБ,
	|	ПравилаИспользованияПолейЗапроса.СпособЗаполнения,
	|	ПравилаИспользованияПолейЗапроса.ФиксированноеЗначение
	|ПОМЕСТИТЬ ПравилаИспользованияПолейЗапроса
	|ИЗ
	|	&ПравилаИспользованияПолейЗапроса КАК ПравилаИспользованияПолейЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИспользованияПолейЗапроса.Поле,
	|	ПравилаИспользованияПолейЗапроса.Синоним,
	|	ПравилаИспользованияПолейЗапроса.АналитикаОперанда,
	|	ПравилаИспользованияПолейЗапроса.СоздаватьНовые,
	|	ПравилаИспользованияПолейЗапроса.РазделятьПоОрганизациям,
	|	ПравилаИспользованияПолейЗапроса.ОбновлятьРеквизитыПриИмпорте,
	|	ПравилаИспользованияПолейЗапроса.КодАналитики КАК КодАналитики,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия,
	|	ПравилаИспользованияПолейЗапроса.СпособЗаполнения,
	|	ПравилаИспользованияПолейЗапроса.ФиксированноеЗначение,
	|	ПравилаИспользованияПолейЗапроса.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБПравило,
	|	ЕСТЬNULL(НастройкиСоответствия.РеквизитОбъектаКонсолидации, НЕОПРЕДЕЛЕНО) КАК РеквизитКонсолидации,
	|	ЕСТЬNULL(НастройкиСоответствия.РеквизитОбъектаВнешнейИБ, НЕОПРЕДЕЛЕНО) КАК РеквизитВИБ,
	|	ЕСТЬNULL(НастройкиСоответствия.НеИспользоватьДляСинхронизации, ИСТИНА) КАК НеИспользоватьДляСинхронизации,
	|	НастройкиСоответствия.ТипОбъектаКонсолидации,
	|	НастройкиСоответствия.ИмяОбъектаМетаданных,
	|	НастройкиСоответствия.ТаблицаАналитики КАК ТаблицаАналитики,
	|	НастройкиСоответствия.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБРеквизит,
	|	НастройкиСоответствия.ПолеДопРеквизитов,
	|	НастройкиСоответствия.НастройкаСоответствияРеквизит КАК НастройкаСоответствияРеквизит
	|ИЗ
	|	ПравилаИспользованияПолейЗапроса КАК ПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПолейДляИмпорта.РеквизитОбъектаКонсолидации КАК РеквизитОбъектаКонсолидации,
	|			ТаблицаПолейДляИмпорта.РеквизитОбъектаВнешнейИБ КАК РеквизитОбъектаВнешнейИБ,
	|			ТаблицаПолейДляИмпорта.НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	|			ТаблицаПолейДляИмпорта.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	|			ТаблицаПолейДляИмпорта.Ссылка.Владелец КАК Ссылка,
	|			ТаблицаПолейДляИмпорта.ТипОбъектаКонсолидации КАК ТипОбъектаКонсолидации,
	|			ТаблицаПолейДляИмпорта.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|			ТаблицаПолейДляИмпорта.ТаблицаАналитики КАК ТаблицаАналитики,
	|			ТаблицаПолейДляИмпорта.ПолеДопРеквизитов КАК ПолеДопРеквизитов,
	|			ТаблицаПолейДляИмпорта.ИспользованиеКонсолидация КАК ИспользованиеКонсолидация,
	|			ТаблицаПолейДляИмпорта.ИспользованиеВИБ КАК ИспользованиеВИБ,
	|			ТаблицаПолейДляИмпорта.ИерархияКонсолидации КАК ИерархияКонсолидации,
	|			ТаблицаПолейДляИмпорта.ИерархияВИБ КАК ИерархияВИБ,
	|			ТаблицаПолейДляИмпорта.НастройкаСоответствия КАК НастройкаСоответствияРеквизит
	|		ИЗ
	|			Справочник.СоответствиеПолейДляОбменаВИБ.ТаблицаПолейДляИмпорта КАК ТаблицаПолейДляИмпорта
	|		ГДЕ
	|			ТаблицаПолейДляИмпорта.Ссылка.Владелец В(&МассивНастроек)) КАК НастройкиСоответствия
	|		ПО ПравилаИспользованияПолейЗапроса.НастройкаСоответствия = НастройкиСоответствия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАналитики";
	
	Запрос.УстановитьПараметр("ПравилаИспользованияПолейЗапроса",ПравилаИспользованияПолей);
	Запрос.УстановитьПараметр("МассивНастроек",ПравилаИспользованияПолей.ВыгрузитьКолонку("НастройкаСоответствия"));
	
	РабочаяТаблицаПолей=ПравилаИспользованияПолей.СкопироватьКолонки();
	РабочаяТаблицаПолей.Колонки.Добавить("УровеньВложенности",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	РабочаяТаблицаПолей.Колонки.Добавить("НастройкаСоответствияРеквизит",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	РабочаяТаблицаПолей.Колонки.Добавить("РеквизитАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
		
	Результат=Запрос.Выполнить().Выбрать();
	                                                                                           
	Пока Результат.Следующий() Цикл
		
		СтрокаТаблицы=РабочаяТаблицаПолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Результат);
		
		ИмяТаблицыПравило=УправлениеОтчетамиУХ.ПолучитьИмяСвязаннойТаблицы(Результат.ТаблицаАналитикиВИБПравило);
		
		Если ЗначениеЗаполнено(Результат.НастройкаСоответствия) Тогда
						
			ИмяТаблицыРеквизит=УправлениеОтчетамиУХ.ПолучитьИмяСвязаннойТаблицы(Результат.ТаблицаАналитикиВИБРеквизит);
			
			СтрокаТаблицы.Поле="["+ИмяТаблицыРеквизит+"]."+Результат.РеквизитВИБ;
			
			Если ИмяТаблицыПравило=ИмяТаблицыРеквизит Тогда // берем путь из источника
				
				СтрокаТаблицы.ТаблицаАналитикиВИБ=Результат.ТаблицаАналитикиВИБПравило;
				
			Иначе // Ссылочные реквизиты
				
				СтрокаТаблицы.ТаблицаАналитикиВИБ=Результат.ТаблицаАналитикиВИБПравило+Результат.ТаблицаАналитикиВИБРеквизит;
				
			КонецЕсли;
			
		Иначе
			
			Если ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(Результат) Тогда
				
				СтрокаТаблицы.Поле=Результат.Поле;
				
			Иначе				
				
				СтрокаТаблицы.Поле="["+ИмяТаблицыПравило+"]."+Результат.Поле;
				СтрокаТаблицы.ТаблицаАналитикиВИБ=Результат.ТаблицаАналитикиВИБПравило;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Результат.НастройкаСоответствия) Тогда
			
			Если Результат.РеквизитКонсолидации="EnumRefValue" Тогда
				РабочийРеквизитВыгрузки="";
			Иначе
				РабочийРеквизитВыгрузки=СтрЗаменить(Результат.РеквизитКонсолидации,".EnumRefValue","");
			КонецЕсли;
			
			Если РабочийРеквизитВыгрузки="" И СтрНайти(Результат.ТаблицаАналитики,"Перечисление.")>0 Тогда
				
				СтрокаТаблицы.Синоним = Результат.КодАналитики+"_ADO_ENUM";
				
			Иначе
				
				СтрокаТаблицы.Синоним = Результат.КодАналитики+?(РабочийРеквизитВыгрузки="","","vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"));
				
			КонецЕсли;
			
		Иначе
			
			СтрокаТаблицы.Синоним=Результат.КодАналитики;
			
		КонецЕсли;
			
		СтрокаТаблицы.ТаблицаАналитики=Результат.ТаблицаАналитики;
		СтрокаТаблицы.РеквизитАналитики = Результат.РеквизитКонсолидации;

		СтрокаТаблицы.РеквизитАналитикиВИБ=Сред(Результат.РеквизитВИБ,2,СтрДлина(Результат.РеквизитВИБ)-2);
		
		Если Не ЗначениеЗаполнено(Результат.КодАналитики) Тогда
			СтрокаТаблицы.КодАналитики=ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Результат.Синоним,,,Ложь);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаОперанда) Тогда
			СтрокаТаблицы.АналитикаОперанда=Результат.ИмяОбъектаМетаданных;
		КонецЕсли;
		
		Если СтрокаТаблицы.КодАналитики="АналитикаВалюта" Тогда
			СтрокаТаблицы.ИндексАналитики=-1;
		ИначеЕсли СтрНайти(СтрокаТаблицы.КодАналитики,"Аналитика")>0 Тогда
			СтрокаТаблицы.ИндексАналитики=Число(СтрЗаменить(СтрокаТаблицы.КодАналитики,"Аналитика",""));
		КонецЕсли;
		
		СтрокаТаблицы.КодАналитики=СтрокаТаблицы.КодАналитики+Результат.ПолеДопРеквизитов;
		
		МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(СтрокаТаблицы.КодАналитики);
		
		СтрокаТаблицы.УровеньВложенности=МассивПутей.Количество();
				
	КонецЦикла;
	
	РабочаяТаблицаПолей.Сортировать("ИндексАналитики ВОЗР, УровеньВложенности ВОЗР");
	
	Возврат РабочаяТаблицаПолей;
	
КонецФункции // ПодготовитьТаблицуПолейДляЗапроса()

Функция ПолучитьПустуюСсылкуБД(База, ТаблицаАналитки)
	
	Если СтрНайти(ТаблицаАналитки, "Справочник.") > 0 Тогда
		ПустоеЗначение = База.Catalogs[СтрЗаменить(ТаблицаАналитки, "Справочник.", "")].EmptyRef();
	ИначеЕсли СтрНайти(ТаблицаАналитки, "Перечисление.") > 0 Тогда
		ПустоеЗначение = База.Enums[СтрЗаменить(ТаблицаАналитки, "Перечисление.", "")].EmptyRef();
	ИначеЕсли СтрНайти(ТаблицаАналитки, "ПланВидовХарактеристик.") > 0 Тогда
		ПустоеЗначение = База.ChartsOfCharacteristicTypes[СтрЗаменить(ТаблицаАналитки, "Перечисление.", "")].EmptyRef();
	КонецЕсли;
		
	Возврат ПустоеЗначение;
	
КонецФункции // ПолучитьПустуюСсылкуВИБ()

Процедура ПолучитьОбъектыВнешнейИБПоТекущему(ИспользуемаяИБ,База,ОбъектТекущейИБ,СправочникБД,СписокЗначенийВиб)
	
	Если База=Неопределено Тогда
		
		База=УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);
		
		Если База=Неопределено Тогда
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектВнешнейИБ
	|ИЗ
	|	РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК СоответствиеОбъектовТекущейИВнешнихИБ
	|ГДЕ
	|	СоответствиеОбъектовТекущейИВнешнихИБ.ОбъектТекущейИБ = &ОбъектТекущейИБ
	|	И СоответствиеОбъектовТекущейИВнешнихИБ.ИспользуемаяИБ = &ИспользуемаяИБ";
	
	Запрос.УстановитьПараметр("ОбъектТекущейИБ",ОбъектТекущейИБ);
	Запрос.УстановитьПараметр("ИспользуемаяИБ",ИспользуемаяИБ);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СписокЗначенийВиб.Add(РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьСсылкуИзТаблицыПОСтрокеUUID(База, СправочникБД,Результат.ОбъектВнешнейИБ));
			
	КонецЦикла;
			
КонецПроцедуры // ПолучитьОбъектыВнешнейИБПоТекущему()

Функция ПолучитьПредставлениеСсылкиВИБ(База,СправочникБД,Ссылка)
	
	ТекстЗапроса = "ВЫБРАТЬ ПРЕДСТАВЛЕНИЕ(СправочникБД.Ссылка) ИЗ " + СправочникБД + " КАК СправочникБД ГДЕ СправочникБД.Ссылка=&Ссылка";
	
	Запрос 			= База.NewObject("Запрос");
	Запрос.Text  	= ТекстЗапроса;
	Запрос.SetParameter("Ссылка",Ссылка);
	
	Выборка      = Запрос.Execute().Choose();	
	
	Если Выборка.Next() Тогда
		
		Возврат Выборка.Get(0);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьПредставлениеСсылкиБД() 

Процедура ПолучитьСоединениеВИБ(ОбъектРасчета) Экспорт
	
	Попытка
		
		Если ОбъектРасчета.ИспользуемаяИБ.ТипБД.ВерсияПлатформы = Перечисления.ПлатформыВнешнихИнформационныхБаз.ADO Тогда
			
			ПараметрыПодключения=Новый Структура;
			ПараметрыПодключения.Вставить("Организация",		ОбъектРасчета.Организация);
			ПараметрыПодключения.Вставить("Проект",				ОбъектРасчета.Проект);
			ПараметрыПодключения.Вставить("ПериодСценария",		ОбъектРасчета.ПериодОтчета);
			ПараметрыПодключения.Вставить("Сценарий",			ОбъектРасчета.Сценарий);
			ПараметрыПодключения.Вставить("ВидОтчета",			ОбъектРасчета.ВидОтчета);
			ПараметрыПодключения.Вставить("ПравилоОбработки",	ОбъектРасчета.ПравилоОбработки);
			ПараметрыПодключения.Вставить("ФайлИмпорта",		);
			ПараметрыПодключения.Вставить("СтрокаСоединения",	);
			
			Если НЕ ПустаяСтрока(ОбъектРасчета.ПутьКФайлуADO) Тогда
				ПараметрыПодключения.Вставить("ПутьКФайлуADO",ОбъектРасчета.ПутьКФайлуADO);
			КонецЕсли;
			
			Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				
				ПараметрыПодключения.Вставить("Аналитика"+Индекс,ОбъектРасчета["Аналитика"+Индекс]);
				
			КонецЦикла;
			
			ОбъектРасчета.База=УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(ОбъектРасчета.ИспользуемаяИБ,ПараметрыПодключения);
			
			Если ОбъектРасчета.База = Неопределено ИЛИ ПараметрыПодключения.СтрокаСоединения = Неопределено Тогда
				
				ОбновитьПовторноИспользуемыеЗначения();
				ОбъектРасчета.База=УправлениеСоединениямиВИБУХ.ПолучитьСоединениеADO(ОбъектРасчета.ИспользуемаяИБ,ПараметрыПодключения);
				
			КонецЕсли;
			
			ОбъектРасчета.СтрокаСоединения=ПараметрыПодключения.СтрокаСоединения;
			
			Если ЗначениеЗаполнено(ПараметрыПодключения.ФайлИмпорта) Тогда
				
				ОбъектРасчета.ФайлИмпорта			= ПараметрыПодключения.ФайлИмпорта;
				ОбъектРасчета.ВерсияХранимогоФайла	= ПараметрыПодключения.ВерсияХранимогоФайла;
				
			КонецЕсли;
		
		Иначе
			
			ОбъектРасчета.База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ОбъектРасчета.ИспользуемаяИБ,1);
			
			Если ОбъектРасчета.База = Неопределено Тогда
				
				ОбновитьПовторноИспользуемыеЗначения();
				ОбъектРасчета.База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(ОбъектРасчета.ИспользуемаяИБ,1);
				
			КонецЕсли;		
			
		КонецЕсли;
						
	Исключение
		
		ОбъектРасчета.ФлагОшибкиИмпорта = Истина;
		ОбновитьПовторноИспользуемыеЗначения();
		Возврат;
		
	КонецПопытки;
	
КонецПроцедуры // ПолучитьСоединениеВИБ()

Функция ПолучитьРабочуюТаблицуВычисленияПараметров(ТаблицаВычисленияПараметров) Экспорт
	
	РабочаяТаблицаПараметров=ТаблицаВычисленияПараметров.СкопироватьКолонки();
	
	Для Каждого СтрПараметр ИЗ ТаблицаВычисленияПараметров Цикл
		
		Если СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрПараметр.ТипРасчета,"Периоды")>0
			ИЛИ СтрНайти(СтрПараметр.ТипРасчета,"Год")>0
			ИЛИ СтрПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
			ИЛИ СтрПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
			
			СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
			
			Продолжить;
			
		ИначеЕсли СтрПараметр.ТипРасчета="Простой" И (НЕ ЗначениеЗаполнено(СтрПараметр.НастройкаСоответствия)) Тогда
			
			ДанныеОтбора=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрПараметр.УточнениеСпособаОпределения);
			
			Если ТипЗнч(ДанныеОтбора)=Тип("Структура") И ДанныеОтбора.Свойство("_Справочник") Тогда
				
				СтруктураСправочники=Новый Структура;
				СтруктураСправочники.Вставить("СправочникБД",ДанныеОтбора._Справочник);
				СтруктураСправочники.Вставить("СправочникКонсолидации",ДанныеОтбора._Справочник);
				
				СтруктураОтбора=Новый Структура;
				СтруктураОтбора.Вставить("_Справочники",СтруктураСправочники);
				
				СтруктураОтбора.Вставить("МассивОтбора", ДанныеОтбора.МассивОтбора);
				
				СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
				
				СтрокаТаблицы.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СтруктураОтбора);
				
			Иначе
				
				СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
				
			КонецЕсли;
			
			Продолжить;
			
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(СтрПараметр.НастройкаСоответствия) Тогда
				
			Продолжить;
			
		КонецЕсли;
		
		СписокСинхронизации=ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьТаблицуПолейДляОтбора(СтрПараметр.НастройкаСоответствия);
		
		Если СписокСинхронизации.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
		
		ТекТаблицаАналитики=СписокСинхронизации[0].ТаблицаАналитики;
		
		Если СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			
			ЗначениеДляОтбора=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрПараметр.УточнениеСпособаОпределения);
						
			СтруктураСправочники=Новый Структура;
			СтруктураСправочники.Вставить("СправочникБД",СтрПараметр.НастройкаСоответствия.ТипОбъектаВИБ+"."+СтрПараметр.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование);
			СтруктураСправочники.Вставить("СправочникКонсолидации",ТекТаблицаАналитики);
			
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("_Справочники",СтруктураСправочники);
			
			МассивЭлементаОтбора    = Новый Массив;	
			СтруктураОтбора.Вставить("МассивОтбора", МассивЭлементаОтбора);
			
			Если ТипЗнч(ЗначениеДляОтбора) = Тип("СписокЗначений") Тогда
				
				Для Каждого Элемент Из ЗначениеДляОтбора Цикл
					
					СтруктураЭлементаОтбора = Новый Соответствие;
					МассивЭлементаОтбора.Добавить(СтруктураЭлементаОтбора);
					
					Если ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(Элемент.Значение)) Тогда
						
						Если Элемент.Пометка Тогда
							
							СтруктураЭлементаОтбора.Вставить("Наименование",Элемент.Представление);
							
						Иначе
							
							СтруктураЭлементаОтбора.Вставить("Код",Элемент.Значение);
							СтруктураЭлементаОтбора.Вставить("Наименование",Элемент.Представление);
							
						КонецЕсли;
						
						Продолжить;
						
					КонецЕсли;
		
					Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
						
						ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(Элемент.Значение,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
						
						Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
							Продолжить;
						КонецЕсли;
						
						Если СтрНайти(ЭлементСоответствия.ТаблицаАналитикиВИБ,"Перечисление")>0 Тогда
							
							СтруктураЭлементаОтбора.Вставить(СтрЗаменить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,".","vzv")
							,"ЗНАЧЕНИЕ("+ЭлементСоответствия.ТаблицаАналитикиВИБ+"."+ЗначениеРеквизита+")");
							
						Иначе	
							
							СтруктураЭлементаОтбора.Вставить(СтрЗаменить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,".","vzv")
							,ЗначениеРеквизита);
							
						КонецЕсли;	
						
					КонецЦикла;
					
					СтруктураЭлементаОтбора.Вставить("_ЗначениеКонсолидации", Элемент.Значение);
					
				КонецЦикла;
				
			ИначеЕсли ЗначениеЗаполнено(ЗначениеДляОтбора) Тогда
				
				СтруктураЭлементаОтбора = Новый Структура;
				МассивЭлементаОтбора.Добавить(СтруктураЭлементаОтбора);
				
				Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
					
					ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(ЗначениеДляОтбора,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						Продолжить;
					КонецЕсли;
					
					Если СтрНайти(ЭлементСоответствия.ТаблицаАналитикиВИБ,"Перечисление")>0 Тогда
						
						СтруктураЭлементаОтбора.Вставить(СтрЗаменить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,".","vzv")
						,"ЗНАЧЕНИЕ("+ЭлементСоответствия.ТаблицаАналитикиВИБ+"."+ЗначениеРеквизита+")");
						
					Иначе
						
						СтруктураЭлементаОтбора.Вставить(СтрЗаменить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,".","vzv")
						,ЗначениеРеквизита);
						
					КонецЕсли;	
					
				КонецЦикла;
				
				СтруктураЭлементаОтбора.Вставить("_ЗначениеКонсолидации", ЗначениеДляОтбора);
				
			КонецЕсли;
			
			Если  СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
				ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
				
				СтруктураОтбора.Вставить("СписокЭлементов",СписокСинхронизации);
				
			КонецЕсли;
			
			СтрокаТаблицы.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СтруктураОтбора);
			
		Иначе
							
			Если СтрПараметр.НастройкаСоответствия.СинхронизацияПоGUID Тогда
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("СинхронизацияПоGUID",Истина);
				СтруктураОтбора.Вставить("НастройкаСоответствия",СтрПараметр.НастройкаСоответствия);
				
			Иначе
				
				СтруктураСправочники=Новый Структура;
				СтруктураСправочники.Вставить("СправочникБД",СтрПараметр.НастройкаСоответствия.ТипОбъектаВИБ+"."+СтрПараметр.НастройкаСоответствия.ОписаниеОбъектаВИБ.Наименование);
				СтруктураСправочники.Вставить("СправочникКонсолидации",СписокСинхронизации[0].ТаблицаАналитики);
				
				СтруктураОтбора = Новый Структура("_Справочники",СтруктураСправочники);
				
				Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
					СтруктураОтбора.Вставить(СтрЗаменить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,".","vzv"), ЭлементСоответствия.РеквизитОбъектаКонсолидации);				   
				КонецЦикла;
				
			КонецЕсли;
			
			СтрокаТаблицы.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СтруктураОтбора);
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат РабочаяТаблицаПараметров;
	
КонецФункции // ПолучитьРабочуюТаблицуВычисленияПараметров()

Функция ПолучитьЗначениеРеквизитаДляОтбора(Ссылка,РеквизитОбъектаКонсолидации,ТаблицаАналитики)
	
	ИспользуетсяПеречисление=Ложь;
	
	Если РеквизитОбъектаКонсолидации="EnumRefValue" Тогда
		
		Возврат XMLСтрока(Ссылка);
		
	ИначеЕсли СтрНайти(РеквизитОбъектаКонсолидации,".EnumRefValue")>0 Тогда
		
		ИспользуетсяПеречисление=Истина;
		РабочийРеквизит=СтрЗаменить(РеквизитОбъектаКонсолидации,".EnumRefValue","");
		
	Иначе
		
		РабочийРеквизит=РеквизитОбъектаКонсолидации;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|РабочаяТаблица."+РабочийРеквизит+" КАК Значение
	|ИЗ "+ТаблицаАналитики+" КАК РабочаяТаблица
	|ГДЕ РабочаяТаблица.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",?(ТипЗнч(Ссылка)=Тип("ХранилищеЗначения"),Ссылка.Получить(),Ссылка));
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		Если ИспользуетсяПеречисление Тогда
			
			Возврат XMLСтрока(Результат.Значение);
			
		Иначе
			
			Возврат Результат.Значение;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции // ПолучитьЗначениеРеквизитаДляОтбора()

Функция ПолучитьРабочуюТаблицуВычисленияПараметровADO(ТаблицаВычисленияПараметров) Экспорт
	
	РабочаяТаблицаПараметров=ТаблицаВычисленияПараметров.СкопироватьКолонки();
	
	Для Каждого СтрПараметр ИЗ ТаблицаВычисленияПараметров Цикл
		
		Если СтрПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(СтрПараметр.ТипРасчета,"Периоды")>0
			ИЛИ СтрНайти(СтрПараметр.ТипРасчета,"Год")>0
			ИЛИ СтрПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
			ИЛИ СтрПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений
			ИЛИ СтрПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ИнтервалПериодов Тогда
			
			СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
			
			Продолжить;
			
		ИначеЕсли СтрПараметр.ТипРасчета="Простой" И (НЕ ЗначениеЗаполнено(СтрПараметр.НастройкаСоответствия)) Тогда
			
			СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
			
			Продолжить;
			
		КонецЕсли;		
		
		Если НЕ ЗначениеЗаполнено(СтрПараметр.НастройкаСоответствия) Тогда
				
			Продолжить;
			
		КонецЕсли;
		
		СписокСинхронизации=ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьТаблицуПолейДляОтбора(СтрПараметр.НастройкаСоответствия);
		
		Если СписокСинхронизации.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрокаТаблицы=РабочаяТаблицаПараметров.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПараметр);
		
		ТекТаблицаАналитики=СписокСинхронизации[0].ТаблицаАналитики;
		
		Если СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
			ИЛИ СтрокаТаблицы.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			
			ЗначениеДляОтбора=УправлениеОтчетамиУХ.ПолучитьЗначениеИзХранилища(СтрПараметр.УточнениеСпособаОпределения);
						
			СтруктураОтбора=Новый Структура;
			СписокОтбора=Новый СписокЗначений;
			ОтборПоСписку=Ложь;
			
			Если ТипЗнч(ЗначениеДляОтбора) = Тип("СписокЗначений") Тогда
				
				Для Каждого Элемент Из ЗначениеДляОтбора Цикл
					
					Если ТипЗнч(Элемент.Значение)=Тип("Соответствие") Тогда // Отбор по значению полей таблицы ADO
						
						СписокОтбора.Добавить(Элемент.Значение);
						
					Иначе
						
						ДанныеОтбора=Новый Соответствие;
						
						Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
							
							ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(Элемент.Значение,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
							
							Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
								
								Продолжить;
								
							КонецЕсли;
							
							ДанныеОтбора.Вставить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,ЗначениеРеквизита);
							
						КонецЦикла;
						
						СписокОтбора.Добавить(ДанныеОтбора);
						
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаТаблицы.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СписокОтбора);
				Продолжить;
				
			ИначеЕсли ЗначениеЗаполнено(ЗначениеДляОтбора) Тогда
				
				ДанныеОтбора=Новый Соответствие;
				
				Для Каждого ЭлементСоответствия Из СписокСинхронизации Цикл
					
					ЗначениеРеквизита=ПолучитьЗначениеРеквизитаДляОтбора(ЗначениеДляОтбора,ЭлементСоответствия.РеквизитОбъектаКонсолидации,ТекТаблицаАналитики);
					
					Если НЕ ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ДанныеОтбора.Вставить(ЭлементСоответствия.РеквизитОбъектаВнешнейИБ,ЗначениеРеквизита);
					
				КонецЦикла;
				
				СписокОтбора.Добавить(ДанныеОтбора);
				
			КонецЕсли;
			
				
			Если  СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
				ИЛИ СтрокаТаблицы.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
				
				СтруктураОтбора.Вставить("ДанныеСинхронизации",СписокСинхронизации);
				СтруктураОтбора.Вставить("Периметр",ЗначениеДляОтбора);
				СтруктураОтбора.Вставить("ТаблицаADO");
				
			КонецЕсли;
			
			СтрокаТаблицы.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СтруктураОтбора);
			
		Иначе
			
			СтруктураОтбора=Новый Структура;
			СтруктураОтбора.Вставить("ДанныеСинхронизации",СписокСинхронизации);
						
			СтрокаТаблицы.УточнениеСпособаОпределения=Новый ХранилищеЗначения(СтруктураОтбора);
			
		КонецЕсли;		
		
	КонецЦикла;
	
	Возврат РабочаяТаблицаПараметров;
	
КонецФункции // ПолучитьРабочуюТаблицуВычисленияПараметровADO()

Функция НеГруппироватьПриОбмене(СтрРеквизит,ВыгрузкаДанных)
	
	Если ВыгрузкаДанных Тогда
		
		Если СтрРеквизит.НеГруппироватьЭкспорт Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	Иначе
		
		Если СтрРеквизит.НеГруппироватьИмпорт Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
			
КонецФункции // НеГруппироватьПриОбмене()

Функция ПодготовитьТаблицуПолейДляЗапроса(ПравилаИспользованияПолей,ДанныеСчетов77=Ложь,ВыгрузкаДанных=Ложь,ПолучатьПредставление=Ложь,ПервичноеЗаполнение=Истина,ОбменНСИ=Ложь) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Если ПравилаИспользованияПолей.Колонки.Найти("ПолеТаблицаАналитикиВИБ")=Неопределено Тогда
		
		ПравилаИспользованияПолей.Колонки.Добавить("ПолеТаблицаАналитикиВИБ",ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(150));
		ПравилаИспользованияПолей.Колонки.Добавить("ПолеАналитики",ОбщегоНазначенияУх.ПолучитьОписаниеТиповСтроки(150));
		
	КонецЕсли;	
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаИспользованияПолейЗапроса.Поле,
	|	ПравилаИспользованияПолейЗапроса.Синоним,
	|	ПравилаИспользованияПолейЗапроса.АналитикаОперанда,
	|	ПравилаИспользованияПолейЗапроса.СоздаватьНовые,
	|	ПравилаИспользованияПолейЗапроса.РазделятьПоОрганизациям,
	|	ПравилаИспользованияПолейЗапроса.ОбновлятьРеквизитыПриИмпорте,
	|	ПравилаИспользованияПолейЗапроса.КодАналитики,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия,
	|	ПравилаИспользованияПолейЗапроса.СпособЗаполнения,
	|	ПравилаИспользованияПолейЗапроса.ФиксированноеЗначение,
	|	ПравилаИспользованияПолейЗапроса.ПолеТаблицаАналитикиВИБ,
	|	ПравилаИспользованияПолейЗапроса.ПолеАналитики
	|ПОМЕСТИТЬ ПравилаИспользованияПолейЗапроса
	|ИЗ
	|	&ПравилаИспользованияПолейЗапроса КАК ПравилаИспользованияПолейЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИспользованияПолейЗапроса.Поле,
	|	ПравилаИспользованияПолейЗапроса.Синоним,
	|	ПравилаИспользованияПолейЗапроса.АналитикаОперанда,
	|	ПравилаИспользованияПолейЗапроса.СоздаватьНовые,
	|	ПравилаИспользованияПолейЗапроса.РазделятьПоОрганизациям,
	|	ПравилаИспользованияПолейЗапроса.ОбновлятьРеквизитыПриИмпорте,
	|	ПравилаИспользованияПолейЗапроса.КодАналитики КАК КодАналитики,
	|	ПравилаИспользованияПолейЗапроса.СпособЗаполнения,
	|	ПравилаИспользованияПолейЗапроса.ФиксированноеЗначение,
	|	ПравилаИспользованияПолейЗапроса.ПолеТаблицаАналитикиВИБ,
	|	ПравилаИспользованияПолейЗапроса.ПолеАналитики,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия,
	|	ПравилаИспользованияПолейЗапроса.НастройкаСоответствия.СинхронизацияПоGUID КАК СинхронизацияПоGUID,
	|	ЕСТЬNULL(НастройкиСоответствия.РеквизитОбъектаКонсолидации, НЕОПРЕДЕЛЕНО) КАК РеквизитКонсолидации,
	|	ЕСТЬNULL(НастройкиСоответствия.РеквизитОбъектаВнешнейИБ, НЕОПРЕДЕЛЕНО) КАК РеквизитВИБ,
	|	ЕСТЬNULL(НастройкиСоответствия.НеИспользоватьДляСинхронизации, ИСТИНА) КАК НеИспользоватьДляСинхронизации,
	|	ЕСТЬNULL(НастройкиСоответствия.НеГруппироватьИмпорт, ЛОЖЬ) КАК НеГруппироватьИмпорт,
	|	ЕСТЬNULL(НастройкиСоответствия.НеГруппироватьЭкспорт, ЛОЖЬ) КАК НеГруппироватьЭкспорт,
	|	НастройкиСоответствия.ТипОбъектаКонсолидации,
	|	НастройкиСоответствия.ИмяОбъектаМетаданных,
	|	НастройкиСоответствия.ТаблицаАналитики КАК ТаблицаАналитики,
	|	НастройкиСоответствия.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	|	НастройкиСоответствия.ПолеДопРеквизитов,
	|	НастройкиСоответствия.ИспользованиеКонсолидация,
	|	НастройкиСоответствия.ИспользованиеВИБ,
	|	НастройкиСоответствия.ИерархияКонсолидации,
	|	НастройкиСоответствия.ИерархияВИБ,
	|	НастройкиСоответствия.НастройкаСоответствияРеквизит КАК НастройкаСоответствияРеквизит
	|ИЗ
	|	ПравилаИспользованияПолейЗапроса КАК ПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаПолейДляИмпорта.РеквизитОбъектаКонсолидации КАК РеквизитОбъектаКонсолидации,
	|			ТаблицаПолейДляИмпорта.РеквизитОбъектаВнешнейИБ КАК РеквизитОбъектаВнешнейИБ,
	|			ТаблицаПолейДляИмпорта.НеИспользоватьДляСинхронизации КАК НеИспользоватьДляСинхронизации,
	|			ТаблицаПолейДляИмпорта.ТаблицаАналитикиВИБ КАК ТаблицаАналитикиВИБ,
	|			ТаблицаПолейДляИмпорта.Ссылка.Владелец КАК Ссылка,
	|			ТаблицаПолейДляИмпорта.ТипОбъектаКонсолидации КАК ТипОбъектаКонсолидации,
	|			ТаблицаПолейДляИмпорта.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|			ТаблицаПолейДляИмпорта.ТаблицаАналитики КАК ТаблицаАналитики,
	|			ТаблицаПолейДляИмпорта.ПолеДопРеквизитов КАК ПолеДопРеквизитов,
	|			ТаблицаПолейДляИмпорта.ИспользованиеКонсолидация КАК ИспользованиеКонсолидация,
	|			ТаблицаПолейДляИмпорта.ИспользованиеВИБ КАК ИспользованиеВИБ,
	|			ТаблицаПолейДляИмпорта.ИерархияКонсолидации КАК ИерархияКонсолидации,
	|			ТаблицаПолейДляИмпорта.ИерархияВИБ КАК ИерархияВИБ,
	|			ТаблицаПолейДляИмпорта.НастройкаСоответствия КАК НастройкаСоответствияРеквизит,
	|			ТаблицаПолейДляИмпорта.НеГруппироватьИмпорт КАК НеГруппироватьИмпорт,
	|			ТаблицаПолейДляИмпорта.НеГруппироватьЭкспорт КАК НеГруппироватьЭкспорт
	|		ИЗ
	|			Справочник.СоответствиеПолейДляОбменаВИБ.ТаблицаПолейДляИмпорта КАК ТаблицаПолейДляИмпорта
	|		ГДЕ
	|			ТаблицаПолейДляИмпорта.Ссылка.Владелец В(&МассивНастроек)";
			
	Запрос.Текст=Запрос.Текст+") КАК НастройкиСоответствия
	|		ПО ПравилаИспользованияПолейЗапроса.НастройкаСоответствия = НастройкиСоответствия.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодАналитики";
	
	Запрос.УстановитьПараметр("ПравилаИспользованияПолейЗапроса",ПравилаИспользованияПолей);
	Запрос.УстановитьПараметр("МассивНастроек",ПравилаИспользованияПолей.ВыгрузитьКолонку("НастройкаСоответствия"));
	
	РабочаяТаблицаПолей=ПравилаИспользованияПолей.СкопироватьКолонки();
	РабочаяТаблицаПолей.Колонки.Добавить("УровеньВложенности",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	РабочаяТаблицаПолей.Колонки.Добавить("НастройкаСоответствияРеквизит",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.СоответствиеВнешнимИБ"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеКонсолидация",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИспользованиеВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ИспользованиеРеквизита"));
	РабочаяТаблицаПолей.Колонки.Добавить("ИндексАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1));
	РабочаяТаблицаПолей.Колонки.Добавить("РеквизитАналитикиВИБ",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
	РабочаяТаблицаПолей.Колонки.Добавить("СинхронизацияПоGUID",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		
	Результат=Запрос.Выполнить().Выбрать();
	                                                                                           
	Пока Результат.Следующий() Цикл
		
		Если ПервичноеЗаполнение И НеГруппироватьПриОбмене(Результат,ВыгрузкаДанных) И (НЕ ОбменНСИ) Тогда
			
			Продолжить;
			
		КонецЕсли;		
		
		СтрокаТаблицы=РабочаяТаблицаПолей.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы,Результат);
		
		Если ВыгрузкаДанных Тогда
			
			Если Результат.РеквизитКонсолидации="EnumRefValue" Тогда
				РабочийРеквизитВыгрузки="";
			Иначе
				РабочийРеквизитВыгрузки=СтрЗаменить(Результат.РеквизитКонсолидации,".EnumRefValue","");
			КонецЕсли;	
			
			РабочийРеквизитЗагрузки=Результат.РеквизитВИБ;
			
			Если НЕ Результат.РеквизитВИБ=Неопределено Тогда
				
				Если СтрНайти(Результат.РеквизитВИБ,".Ссылка")>0 Тогда
					
					МассивПутейВИБ=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Результат.РеквизитВИБ,".");
					МассивПутейКонс=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Результат.РеквизитКонсолидации,".");
					
					Если МассивПутейВИБ.Количество()>МассивПутейКонс.Количество()
						И МассивПутейВИБ[МассивПутейВИБ.Количество()-1]="Ссылка" Тогда
						
						РабочийРеквизитВыгрузки=РабочийРеквизитВыгрузки+".Ссылка";
						РабочийРеквизитЗагрузки=СтрЗаменить(РабочийРеквизитЗагрузки,".Ссылка","");
						
					КонецЕсли;
					
				КонецЕсли;
				
				СтрокаТаблицы.ТаблицаАналитики	=Результат.ТаблицаАналитики;		
				СтрокаТаблицы.РеквизитАналитики = РабочийРеквизитЗагрузки;
				
			КонецЕсли;
			
		Иначе
			
			Если Результат.РеквизитВИБ="EnumRefValue" Тогда
				РабочийРеквизитВыгрузки="";
			Иначе
				РабочийРеквизитВыгрузки=СтрЗаменить(Результат.РеквизитВИБ,".EnumRefValue","");
			КонецЕсли;
			
			Если Результат.РеквизитКонсолидации="EnumRefValue" Тогда
				РабочийРеквизитЗагрузки="";
			Иначе
				РабочийРеквизитЗагрузки=СтрЗаменить(Результат.РеквизитКонсолидации,".EnumRefValue","");
			КонецЕсли;
 
			
			Если НЕ Результат.РеквизитКонсолидации=Неопределено Тогда
				
				СтрокаТаблицы.ТаблицаАналитики=Результат.ТаблицаАналитики;		
				СтрокаТаблицы.РеквизитАналитики = РабочийРеквизитЗагрузки;
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РабочийРеквизитВыгрузки) Тогда
				СтрокаТаблицы.РеквизитАналитикиВИБ = РабочийРеквизитВыгрузки;
			Иначе
				СтрокаТаблицы.РеквизитАналитикиВИБ = РабочийРеквизитЗагрузки;
			КонецЕсли; 
			
		КонецЕсли;		
		
		Если РабочийРеквизитВыгрузки=Неопределено Тогда
			
			Если ПустаяСтрока(Результат.КодАналитики) Тогда
				СтрокаТаблицы.КодАналитики=Результат.Синоним;
			КонецЕсли;
			
		ИначеЕсли НЕ ДанныеСчетов77 Тогда // Ставим стандартный псевдоним запроса
			
			Если СтрНайти(Результат.КодАналитики,"Аналитика")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"Справочник")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"ПланВидовХарактеристик")>0
				ИЛИ СтрНайти(Результат.КодАналитики,"Документ")>0 Тогда
				
				Если РабочийРеквизитВыгрузки="" И СтрНайти(Результат.ТаблицаАналитикиВИБ,"Перечисление.")>0 Тогда
					
					СтрокаТаблицы.Поле = Результат.Поле;
					СтрокаТаблицы.Синоним = Результат.Синоним+"vzvНаименование";
					
				Иначе
					
					СтрокаТаблицы.Поле    = Результат.Поле+?(РабочийРеквизитВыгрузки="","","."+ РабочийРеквизитВыгрузки);	
					СтрокаТаблицы.Синоним = Результат.КодАналитики+?(РабочийРеквизитВыгрузки="","","vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"));
					
				КонецЕсли;
				
			ИначеЕсли ПустаяСтрока(Результат.ТаблицаАналитикиВИБ) И ЗначениеЗаполнено(Результат.КодАналитики) Тогда

				Если Не Результат.КодАналитики="Значение" Тогда
					
					СтрокаТаблицы.Синоним=Результат.КодАналитики;
					
				ИначеЕсли Результат.Поле=Результат.КодАналитики+".Ссылка" Тогда 
					
					СтрокаТаблицы.Поле=Результат.Поле;
					СтрокаТаблицы.Синоним=Результат.КодАналитики+"vzvСсылка"
					
				КонецЕсли;
				
			Иначе
								
				СтрокаТаблицы.Поле    = Результат.Поле+?(СтрДлина(РабочийРеквизитВыгрузки)>0,"."+ РабочийРеквизитВыгрузки,"");
				
				Если ЗначениеЗаполнено(Результат.Синоним) Тогда
					
					СтрокаТаблицы.Синоним = Результат.Синоним+?(СтрДлина(РабочийРеквизитВыгрузки)>0,"vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"),"");
					
				Иначе
					
					СтрокаТаблицы.Синоним = СтрЗаменить(Результат.Поле,".","vzv") + ?(РабочийРеквизитВыгрузки="","","vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"));
					
				КонецЕсли;
				
			КонецЕсли;
				
		ИначеЕсли НЕ Результат.КодАналитики="Значение" Тогда
			
			Если РабочийРеквизитВыгрузки="" И СтрНайти(Результат.ТаблицаАналитикиВИБ,"Перечисление.")>0 Тогда
				
				СтрокаТаблицы.Поле = Результат.Поле;
				СтрокаТаблицы.Синоним = Результат.Синоним+"vzvНаименование";
				
			Иначе
				
				СтрокаТаблицы.Поле    = Результат.Поле+?(РабочийРеквизитВыгрузки="","","."+ РабочийРеквизитВыгрузки);		
				СтрокаТаблицы.Синоним = Результат.Синоним+?(РабочийРеквизитВыгрузки="","","vzv" + СтрЗаменить(РабочийРеквизитВыгрузки,".","vzv"));
				
			КонецЕсли;
							
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Результат.КодАналитики) Тогда
			СтрокаТаблицы.КодАналитики=Результат.Синоним;
		КонецЕсли;
				
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.АналитикаОперанда) Тогда
			СтрокаТаблицы.АналитикаОперанда=Результат.ИмяОбъектаМетаданных;
		КонецЕсли;
		
		Если СтрокаТаблицы.КодАналитики="АналитикаВалюта" Тогда
			
			СтрокаТаблицы.ИндексАналитики=-1;
			
		ИначеЕсли СтрНайти(СтрокаТаблицы.КодАналитики,"Аналитика")>0 Тогда
			
			СтрокаТаблицы.ИндексАналитики=Число(СтрЗаменить(СтрокаТаблицы.КодАналитики,"Аналитика",""));
			
		КонецЕсли;
		
		СтрокаТаблицы.КодАналитики=СтрокаТаблицы.КодАналитики+Результат.ПолеДопРеквизитов;
		
		МассивПутей=ОбщегоНазначенияУХ.ПолучитьМассивПутей(СтрокаТаблицы.КодАналитики);
		
		СтрокаТаблицы.УровеньВложенности=МассивПутей.Количество();
				
	КонецЦикла;
	
	Если НЕ ВыгрузкаДанных Тогда
		
		Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
			
			Если (НЕ ЗначениеЗаполнено(СтрПоле.НастройкаСоответствия))
				ИЛИ СтрПоле.НастройкаСоответствия.СинхронизацияПоGUID Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			СтрокаТаблицы=РабочаяТаблицаПолей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы,СтрПоле,,"Поле,Синоним");
			СтрокаТаблицы.Синоним 	= СтрПоле.КодАналитики+"vzvЭлементСсылка";
			СтрокаТаблицы.Поле 		= СтрПоле.Поле+".Ссылка";
			
		КонецЦикла;
		
	КонецЕсли;
		
	РабочаяТаблицаПолей.Сортировать("ИндексАналитики ВОЗР, УровеньВложенности ВОЗР");
	
	Возврат РабочаяТаблицаПолей;
	
КонецФункции // ПодготовитьТаблицуПолейДляЗапроса()

Функция ЗаполнитьАналитикуПоПравилам(ТаблицаДанных,ПравилаИспользованияПолей,СтруктураКлючевыхРеквизитов=Неопределено,СтруктураПодчиненныхРеквизитов=Неопределено,КонтекстОтчета=Неопределено) Экспорт

	Перем Организация;
	Перем ПериодОтчета;
	Перем Сценарий;
	
	СтруктураПараметров=Новый Структура("Организация,ПериодОтчета,Сценарий",Справочники.Организации.ПустаяСсылка(),Неопределено,Неопределено);
	
	Если НЕ КонтекстОтчета=Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураПараметров,КонтекстОтчета);		
		
	КонецЕсли;	
				
	СтруктураПараметров.Свойство("Организация",Организация);
	СтруктураПараметров.Свойство("ПериодОтчета",ПериодОтчета);
	СтруктураПараметров.Свойство("Сценарий",Сценарий);
	
	Если ПравилаИспользованияПолей.Количество()=0
		ИЛИ (ПравилаИспользованияПолей.Количество()=1 И ПустаяСтрока(ПравилаИспользованияПолей[0].КодАналитики)) Тогда
		
		Возврат ТаблицаДанных;
		
	КонецЕсли;
	
	ОписаниеТиповСтрокаНеограниченнойДлины=ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0);
	СоответствиеОбъектовМД=Новый Соответствие;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	Запрос=Новый Запрос;
	ТекстВыбор="";
	ТекстСоединенияТаблица="";
	ТекстСоединенияРеквизиты="";
	ТекстСоединенияКонтрагент="";
	ТекстСоединенияОрганизация="";
	ТекстСоединенияОрганизацияДоговор="";
	
	Аналитика="";
	ТекстСвертка="";
	
	ТекстИменКолонок = "";
	
	Для Инд = 0 По ТаблицаДанных.Колонки.Количество() - 1 Цикл
		
		ТекстИменКолонок = ТекстИменКолонок + ", " + ТаблицаДанных.Колонки[Инд].Имя;
		
	КонецЦикла;
		
	Запрос=Новый Запрос;
	
	ТабКолонкиТаблицы=ПравилаИспользованияПолей.Скопировать();
	ТабКолонкиТаблицы.Свернуть("КодАналитики,ТаблицаАналитики,АналитикаОперанда,РазделятьПоОрганизациям,СпособЗаполнения,НастройкаСоответствия");
	
	Если СтруктураКлючевыхРеквизитов=Неопределено Тогда
		СтруктураКлючевыхРеквизитов=Новый Структура;
		СтруктураПодчиненныхРеквизитов=Новый Структура;
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТабКолонкиТаблицы Цикл
		
		Если (НЕ ЗначениеЗаполнено(Строка.ТаблицаАналитики)) 
			ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка.КодАналитики,"vzv")=0 Тогда
			
			Если НЕ СтруктураКлючевыхРеквизитов.Свойство(Строка.КодАналитики) Тогда
				
				СтруктураКлючевыхРеквизитов.Вставить(Строка.КодАналитики,Новый Массив);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ТаблицаАналитики) И (НЕ СтрНайти(Строка.ТаблицаАналитики,";")>0) Тогда
				
				Если СтруктураКлючевыхРеквизитов[Строка.КодАналитики].Найти(Строка.ТаблицаАналитики)=Неопределено Тогда
					
					СтруктураКлючевыхРеквизитов[Строка.КодАналитики].Добавить(Строка.ТаблицаАналитики);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ СтруктураПодчиненныхРеквизитов.Свойство(Строка.КодАналитики) Тогда
				
				СтруктураПодчиненныхРеквизитов.Вставить(Строка.КодАналитики,Новый Массив);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ТаблицаАналитики) И (НЕ СтрНайти(Строка.ТаблицаАналитики,";")>0) Тогда
				
				Если СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Найти(Строка.ТаблицаАналитики)=Неопределено Тогда
					
					СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Добавить(Строка.ТаблицаАналитики);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ СтруктураПодчиненныхРеквизитов.Свойство(Строка.КодАналитики) Тогда
				
				СтруктураПодчиненныхРеквизитов.Вставить(Строка.КодАналитики,Новый Массив);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ТаблицаАналитики) И (НЕ СтрНайти(Строка.ТаблицаАналитики,";")>0) Тогда
				
				Если СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Найти(Строка.ТаблицаАналитики)=Неопределено Тогда
					
					СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Добавить(Строка.ТаблицаАналитики);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстПолейАналитики="";
	
	ТабГруппировкиДубли=Новый ТаблицаЗначений;
	ТабГруппировкиДубли.Колонки.Добавить("КодАналитики");
	ТабГруппировкиДубли.Колонки.Добавить("ТаблицаАналитики");
	ТабГруппировкиДубли.Колонки.Добавить("НастройкаСоответствия");
	ТабГруппировкиДубли.Колонки.Добавить("МассивПолей");
	ТабГруппировкиДубли.Колонки.Добавить("СинхронизацияПоGUID",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
			
	Для Каждого КодАналитики ИЗ СтруктураКлючевыхРеквизитов Цикл
			
		Если КодАналитики.Значение.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТаблицаАналитики=КодАналитики.Значение[0];
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление")>0 Тогда
					
			Продолжить;
			
		КонецЕсли;
		
		СтрПолеПравило=ТабКолонкиТаблицы.Найти(КодАналитики.Ключ,"КодАналитики");
		
		НоваяСтрока=ТабГруппировкиДубли.Добавить();
		НоваяСтрока.КодАналитики=КодАналитики.Ключ;
		НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		НоваяСтрока.НастройкаСоответствия=СтрПолеПравило.НастройкаСоответствия;
		
		МассивПолей=Новый Массив;
		
		Если СтрПолеПравило.НастройкаСоответствия.СинхронизацияПоGUID Тогда
			
			ТекстВыбор=ТекстВыбор+"
			|ЕСТЬNULL(Таблица_"+КодАналитики.Ключ+".ОбъектТекущейИБ,ЗНАЧЕНИЕ("+ТекТаблицаАналитики+".ПустаяСсылка)) КАК "+КодАналитики.Ключ + ", ";
			
			ТекстПолейАналитики=ТекстПолейАналитики+", ВЫРАЗИТЬ ("+КодАналитики.Ключ+" КАК "+ТекТаблицаАналитики+") КАК "+КодАналитики.Ключ;
			ТекстСвертка=ТекстСвертка+","+КодАналитики.Ключ;
			
			СтрРеквизит=ПравилаИспользованияПолей.Найти(КодАналитики.Ключ,"КодАналитики");
			
			ТекстСоединенияТаблица=ТекстСоединенияТаблица+"
			|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеОбъектовТекущейИВнешнихИБ КАК Таблица_"+КодАналитики.Ключ+" ПО
			|ВТ."+СтрРеквизит.Синоним+"=Таблица_"+КодАналитики.Ключ+".ОбъектВнешнейИБ
			|И Таблица_"+КодАналитики.Ключ+".ИспользуемаяИБ=&ИспользуемаяИБ
			|И Таблица_"+КодАналитики.Ключ+".НастройкаСоответствия=&НастройкаСоответствия_"+КодАналитики.Ключ;
			
			Запрос.УстановитьПараметр("НастройкаСоответствия_"+КодАналитики.Ключ,СтрПолеПравило.НастройкаСоответствия);	
			Запрос.УстановитьПараметр("ИспользуемаяИБ",КонтекстОтчета.ИспользуемаяИБ);
			
			НоваяСтрока.СинхронизацияПоGUID=Истина;
			МассивПолей.Добавить(СтрРеквизит.Синоним);
			НоваяСтрока.МассивПолей=МассивПолей;
			
			Продолжить;
				
		КонецЕсли;
		
		ТекстВыбор=ТекстВыбор+"
		|ЕСТЬNULL(Таблица_"+КодАналитики.Ключ+".Ссылка,ЗНАЧЕНИЕ("+ТекТаблицаАналитики+".ПустаяСсылка)) КАК "+КодАналитики.Ключ + ", ";
		
		ТекстПолейАналитики=ТекстПолейАналитики+", ВЫРАЗИТЬ ("+КодАналитики.Ключ+" КАК "+ТекТаблицаАналитики+") КАК "+КодАналитики.Ключ;
		
		ТекстСвертка=ТекстСвертка+","+КодАналитики.Ключ;
		
		ТекстСоединенияТаблица=ТекстСоединенияТаблица+"
		|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекТаблицаАналитики+" КАК Таблица_"+КодАналитики.Ключ+" ПО";
		
		Если СтрНайти(ТекТаблицаАналитики,"Справочник.")>0 
			И КонтекстОтчета.Свойство("ИспользуемаяИБ")
			И КонтекстОтчета.ИспользуемаяИБ.НСИ_ТребуетСинхронизации
			И ОбщегоНазначенияУХ.ЕстьРеквизитСправочника(СтрЗаменить(ТекТаблицаАналитики,"Справочник.",""),"НСИ_ВИБ") Тогда
			
			ТекстСоединенияТаблица=ТекстСоединенияТаблица+"
			|Таблица_"+КодАналитики.Ключ+".НСИ_ВИБ=&ИспользуемаяИБ И ";
			
			Запрос.УстановитьПараметр("ИспользуемаяИБ",КонтекстОтчета.ИспользуемаяИБ);
			
		КонецЕсли;
				
		ТекстСоединенияРеквизиты="";
		
		///////////////////////////////////////////////////////////////////////////////////////
		// Проверим на наличие реквизитов составного типа
		
		Для Каждого СтрРеквизит ИЗ СтруктураПодчиненныхРеквизитов Цикл
			
			Если СтрРеквизит.Значение.Количество()=0 ИЛИ (НЕ (СтрРеквизит.Ключ=КодАналитики.Ключ ИЛИ СтрНайти(СтрРеквизит.Ключ,КодАналитики.Ключ+"vzv")=1)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрРеквизит.Значение.Количество()=1 Тогда // Работаем с реквизитом одного типа
				
				Если СтрНайти(СтрРеквизит.Значение[0],"Перечисление.")>0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитики,НеИспользоватьДляСинхронизации",СтрРеквизит.Ключ,СтрРеквизит.Значение[0],Ложь));
				ОтборПоОдномуПолю=МассивРеквизитов.Количество()=1;
				
				Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл 
					
					КолонкаДанных=ТаблицаДанных.Колонки.Найти(СтрПоле.Синоним);
					
					Если КолонкаДанных=Неопределено ИЛИ КолонкаДанных.ТипЗначения=ОписаниеТиповСтрокаНеограниченнойДлины ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
						Продолжить;
					КонецЕсли;
					
					ДанныеРеквизита=ПолучитьДанныеРеквизитаОбъектаМД(СтрПоле.ТаблицаАналитики,СтрПоле.РеквизитАналитики,СоответствиеОбъектовМД);
					
					Если ДанныеРеквизита.Тип=ОписаниеТиповСтрокаНеограниченнойДлины Тогда
						
						Продолжить;
						
					КонецЕсли;	
						
					ТекстПоляКонсолидации=КодАналитики.Ключ+"."+СтрЗаменить(СтрПоле.РеквизитАналитики,СтрЗаменить(КодАналитики.Ключ,"vzv",".")+".","");
					
					ТекстСоединенияРеквизиты=ТекстСоединенияРеквизиты+" И ("+"ВТ."+СтрПоле.Синоним+"=Таблица_"+ТекстПоляКонсолидации +")";
					МассивПолей.Добавить(СтрПоле.Синоним);
					
					Если СтрПоле.УровеньВложенности=1 И СтрПоле.ТаблицаАналитики = ТекТаблицаАналитики Тогда 
						
						Если СтрПоле.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" И ЗначениеЗаполнено(СтрПоле.АналитикаОперанда) Тогда
							
							ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И Таблица_"+КодАналитики.Ключ + ".Владелец = &" 
							+ КодАналитики.Ключ + "Владелец";
							Если СтрПоле.РазделятьПоОрганизациям Тогда 
								ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И Таблица_"+КодАналитики.Ключ + ".Организация = &" + КодАналитики.Ключ + "Организация";
								Запрос.УстановитьПараметр(КодАналитики.Ключ + "Организация", Организация);
							КонецЕсли;
							
							Запрос.УстановитьПараметр(КодАналитики.Ключ + "Владелец", СтрПоле.АналитикаОперанда);
							
						ИначеЕсли СтрПоле.ТаблицаАналитики="Справочник.СчетаБД" ИЛИ СтрПоле.ТаблицаАналитики="Справочник.КорреспонденцииВГО" Тогда
							
							ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И Таблица_"+КодАналитики.Ключ + ".Владелец = &" 
							+ КодАналитики.Ключ + "Владелец";
							
							Запрос.УстановитьПараметр(КодАналитики.Ключ + "Владелец", УправлениеОтчетамиУХ.ПолучитьПланСчетовОрганизации(Организация,Сценарий,ПериодОтчета));
							
						ИначеЕсли СтрПоле.ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" Тогда
							
							ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И Таблица_"+КодАналитики.Ключ + ".Организация = &" 
							+ КодАналитики.Ключ + "Организация";
							
							Запрос.УстановитьПараметр(КодАналитики.Ключ + "Организация", Организация);
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе // Обрабатываем реквизиты составного типа
				
				ТекстСоединенияТек="";
				
				Для Каждого ТаблицаАналитики ИЗ СтрРеквизит.Значение Цикл
					
					Если СтрНайти(ТаблицаАналитики,"Перечисление.")>0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ТекстСоединенияСоставной="";
								
					МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитики,НеИспользоватьДляСинхронизации",СтрРеквизит.Ключ,ТаблицаАналитики,Ложь));
					ОтборПоОдномуПолю=МассивРеквизитов.Количество()=1;
					
					Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл 
						
						КолонкаДанных=ТаблицаДанных.Колонки.Найти(СтрПоле.Синоним);
						
						Если КолонкаДанных=Неопределено ИЛИ КолонкаДанных.ТипЗначения=ОписаниеТиповСтрокаНеограниченнойДлины ИЛИ ОбщегоНазначенияУХ.ПринудительноеЗаполнениеПоля(СтрПоле) Тогда
							Продолжить;
						КонецЕсли;
						
						ДанныеРеквизита=ПолучитьДанныеРеквизитаОбъектаМД(СтрПоле.ТаблицаАналитики,СтрПоле.РеквизитАналитики,СоответствиеОбъектовМД);
						
						Если ДанныеРеквизита.Тип=ОписаниеТиповСтрокаНеограниченнойДлины Тогда
							
							Продолжить;
							
						КонецЕсли;
						
						ТекстПоляКонсолидации=КодАналитики.Ключ+"."+СтрЗаменить(СтрПоле.РеквизитАналитики,СтрЗаменить(КодАналитики.Ключ,"vzv",".")+".","");
						
						ТекстСоединенияСоставной=ТекстСоединенияСоставной+" И ("+"ВТ."+СтрПоле.Синоним+"=Таблица_"+ТекстПоляКонсолидации +")";
						
						Если СтрПоле.УровеньВложенности=1 И СтрПоле.ТаблицаАналитики = ТекТаблицаАналитики Тогда 
							
							Если СтрПоле.ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" И ЗначениеЗаполнено(СтрПоле.АналитикаОперанда) Тогда
								
								ТекстСоединенияСоставной = ТекстСоединенияСоставной + " И Таблица_"+КодАналитики.Ключ + ".Владелец = &" 
								+ КодАналитики.Ключ + "Владелец";
								Если СтрПоле.РазделятьПоОрганизациям Тогда 
									ТекстСоединенияСоставной = ТекстСоединенияСоставной + " И Таблица_"+КодАналитики.Ключ + ".Организация = &" + КодАналитики.Ключ + "Организация";
									Запрос.УстановитьПараметр(КодАналитики.Ключ + "Организация", Организация);
								КонецЕсли;
								
								Запрос.УстановитьПараметр(КодАналитики.Ключ + "Владелец", СтрПоле.АналитикаОперанда); 
								
							ИначеЕсли СтрПоле.ТаблицаАналитики="Справочник.СчетаБД" ИЛИ СтрПоле.ТаблицаАналитики="Справочник.КорреспонденцииВГО" Тогда
								
								ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И Таблица_"+КодАналитики.Ключ + ".Владелец = &" 
								+ КодАналитики.Ключ + "Владелец";
								
								Запрос.УстановитьПараметр(КодАналитики.Ключ + "Владелец", УправлениеОтчетамиУХ.ПолучитьПланСчетовОрганизации(Организация,Сценарий,ПериодОтчета));
								
							ИначеЕсли СтрПоле.ТаблицаАналитики="Справочник.ДоговорыКонтрагентов" Тогда
								
								ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И Таблица_"+КодАналитики.Ключ + ".Организация = &" 
								+ КодАналитики.Ключ + "Организация";
								
								Запрос.УстановитьПараметр(КодАналитики.Ключ + "Организация", Организация);
								
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЦикла;
					
					Если НЕ ПустаяСтрока(ТекстСоединенияСоставной) Тогда
						
						ТекстСоединенияТек=ТекстСоединенияТек+" ИЛИ ("+Сред(ТекстСоединенияСоставной,3)+")";
						
					КонецЕсли;
					
				КонецЦикла;

				Если Не ПустаяСтрока(ТекстСоединенияТек) Тогда
					
					ТекстСоединенияРеквизиты=ТекстСоединенияРеквизиты+" И ("+Сред(ТекстСоединенияТек,5)+")";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ПустаяСтрока(ТекстСоединенияРеквизиты) Тогда
			
			ТекстСоединенияТаблица=ТекстСоединенияТаблица+Сред(ТекстСоединенияРеквизиты,3);
			
		КонецЕсли;
		
		НоваяСтрока.МассивПолей=МассивПолей;
		
	КонецЦикла;
		
	ТекстИменКолонок = Сред(ТекстИменКолонок, 2);
	
	Если НЕ ПравилаИспользованияПолей.Найти("ОбъектДляВыгрузки","Синоним")=Неопределено Тогда
		ТекстСоединенияТаблица=ТекстСоединенияТаблица+"
		|И (НЕ Таблица_"+ПравилаИспользованияПолей[0].КодАналитики+".НСИ_ТребуетСинхронизации)";
	КонецЕсли;	
				
	ТекстВыбор = "ВЫБРАТЬ ВТ.* " + ?(СтрДлина(ТекстВыбор) > 2,", " + Лев(ТекстВыбор, СтрДлина(ТекстВыбор) - 2), "");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ "+ТекстИменКолонок+"
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;";
	
	Запрос.Текст = Запрос.Текст + ТекстВыбор + " ПОМЕСТИТЬ РезультатыРасчета
	|ИЗ ВременнаяТаблица КАК ВТ"+ТекстСоединенияТаблица + "
	|;
	|ВЫБРАТЬ " + ТекстИменКолонок +ТекстПолейАналитики+" ИЗ РезультатыРасчета
	|;";
		
	Запрос.Текст=Запрос.Текст+"
	|УНИЧТОЖИТЬ ВременнаяТаблица
	|;
	|УНИЧТОЖИТЬ РезультатыРасчета";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаДанных);	
	РезЗапроса = Запрос.ВыполнитьПакет();
	
	ТабРезультат=РезЗапроса[2].Выгрузить(); 
	
	Если НЕ ТабРезультат.Количество()=ТаблицаДанных.Количество() Тогда // Некорректная синхронизация с возникновением дублирующихся строк
		
		СоответствиеТаблицДублей=ПолучитьСоответствиеТаблицДублей(ТабРезультат,ТабГруппировкиДубли);
		
		ТекстСообщения = НСтр("ru = 'При синхронизации объектов текущей и внешней информационных баз 
                              |		возникли неоднозначности при синхронизации реквизитов, приводящие к дублированию данных. 
                              |		Синхронизация отменена, детальная информация в полном протоколе.'");
		ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка("ДублированиеДанныхПриСинхронизации", , , ТекстСообщения, СоответствиеТаблицДублей);
				
		ТабРезультат.Очистить();
				
	Иначе
		
		УправлениеОтчетамиУХ.ЗаполнитьАналитикиПринудительно(ТабРезультат,ПравилаИспользованияПолей,КонтекстОтчета);
				
	КонецЕсли;
	
	Возврат ТабРезультат;
	
КонецФункции // ЗаполнитьАналитикуПоПравилам()

Функция ПолучитьСоответствиеТаблицДублей(ТабРезультат,ТабГруппировкиДубли) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="Выбрать * Поместить ТабРезультат ИЗ &ТабРезультат КАК ТабРезультат";
	Запрос.УстановитьПараметр("ТабРезультат",ТабРезультат);
	
	Запрос.Выполнить();
	
	СоответствиеТаблицДублей=Новый Соответствие;
	
	Для Каждого Строка ИЗ ТабГруппировкиДубли Цикл
		
		ТекстВыборка="";
		ТекстГруппировка="";
		
		Для Каждого Поле ИЗ Строка.МассивПолей Цикл
			
			ТекстПоле=Поле;
			ТекстПсевдоним="";
			
			Если СтрНайти(Поле,"vzv")>0 Тогда
				
				МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Поле,"vzv");
				
				Для Индекс=1 ПО МассивПутей.Количество()-1 Цикл
					
					ТекстПсевдоним=ТекстПсевдоним+"_"+МассивПутей[Индекс];
					
				КонецЦикла;
				
			Иначе
				
				ТекстПсевдоним=Поле;
				
			КонецЕсли;
					
			ТекстВыборка=ТекстВыборка+",ТабРезультат."+Поле+" КАК "+Сред(ТекстПсевдоним,2);
			ТекстГруппировка=ТекстГруппировка+",ТабРезультат."+Поле;
			
		КонецЦикла;
		
		Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстВыборка,2)+", КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабРезультат."+Строка.КодАналитики+") КАК КоличествоДублей
		|ИЗ ТабРезультат КАК ТабРезультат
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2)+"
		|ИМЕЮЩИЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабРезультат."+Строка.КодАналитики+")>1";
		
		Результат=Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество()>0 Тогда
			
			СоответствиеТаблицДублей.Вставить(Строка.НастройкаСоответствия,Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеТаблицДублей;
			
КонецФункции // ПолучитьСоответствиеТаблицДублей() 

Функция ПолучитьДанныеРеквизитаОбъектаМД(ТаблицаАналитики,ПолеРеквизита,СоответствиеОбъектовМД)
	
	Перем ДанныеРеквизита;
	
	ДанныеОбъектаМД=СоответствиеОбъектовМД.Получить(ТаблицаАналитики);
	
	Если ДанныеОбъектаМД=Неопределено Тогда
		
		ДанныеОбъектаМД=Новый Структура;
		ДанныеОбъектаМД.Вставить("ОбъектМетаданныхУХ",ОбщегоНазначенияУХ.ПолучитьОбъектМетаданныхПоТаблицеАналитики(ТаблицаАналитики));
		
	КонецЕсли;
	
	ПутьКРеквизиту=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ПолеРеквизита,".");
	ИмяРеквизита=ПутьКРеквизиту[ПутьКРеквизиту.Количество()-1];
	
	ДанныеОбъектаМД.Свойство(ИмяРеквизита,ДанныеРеквизита);
	
	Если ДанныеРеквизита=Неопределено Тогда
		
		ДанныеРеквизита=ОбщегоНазначенияУХ.ПолучитьРеквизитОбъектаМД(ИмяРеквизита, ДанныеОбъектаМД.ОбъектМетаданныхУХ);
		ДанныеОбъектаМД.Вставить("ИмяРеквизита",ДанныеРеквизита);
		
	КонецЕсли;
	
	СоответствиеОбъектовМД.Вставить(ТаблицаАналитики,ДанныеОбъектаМД);
	
	Возврат ДанныеРеквизита;		
	
КонецФункции // ПолучитьДанныеРеквизитаОбъектаМД()

Функция ПолучитьТекстПеречисленияИЗВИБ(База,ЗначениеПеречисления,Использование77=Ложь) Экспорт
	
	Если Использование77 Тогда
	Иначе
		Возврат РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLString(База,ЗначениеПеречисления);
	КонецЕсли;
	
КонецФункции // ПолучитьТекстПеречисленияИЗВИБ()

Функция ПолучитьНастройкуСоответствияРеквизитов(ТипБД,СправочникКонсолидации,СправочникБД,ТипМетаДанных,ПервыйЭлемент=Истина,СоздаватьОбъект=Ложь,ТипОбъектаКонсолидации="") Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ "+?(ПервыйЭлемент,"ПЕРВЫЕ 1","")+"
	|	СоответствиеВнешнимИБ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &ТипБД";
	
	Если ТипЗнч(СправочникБД)=Тип("Строка") Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование = &ИмяОбъектаВнешнейИБ";
		
		Запрос.УстановитьПараметр("ИмяОбъектаВнешнейИБ" , СправочникБД);
		
	Иначе
		
		Запрос.Текст=Запрос.Текст+"	
		|	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ = &ОписаниеОбъектаВИБ";
		
		Запрос.УстановитьПараметр("ОписаниеОбъектаВИБ" , СправочникБД);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|	И (НЕ СоответствиеВнешнимИБ.ПометкаУдаления)
	|	И СоответствиеВнешнимИБ.ТипОбъектаВИБ = &ТипМетаДанных";
	
	Если ЗначениеЗаполнено(СправочникКонсолидации) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И СоответствиеВнешнимИБ.ИмяОбъектаМетаданных = &ИмяОбъектаМетаданных";
		
		Запрос.УстановитьПараметр("ИмяОбъектаМетаДанных", СправочникКонсолидации);
	
	КонецЕсли;
	
	Если ТипЗнч(СправочникКонсолидации)=Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|   И СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = ""ВидСубконто""";
		
	ИначеЕсли ЗначениеЗаполнено(ТипОбъектаКонсолидации) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|   И СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = &ТипОбъектаКонсолидации";
		
		Запрос.УстановитьПараметр("ТипОбъектаКонсолидации",ТипОбъектаКонсолидации);
			
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипМетаДанных", ТипМетаДанных);
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	
	Если ПервыйЭлемент Тогда
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			Возврат Результат.Ссылка;
			
		Иначе
			
			Если СоздаватьОбъект
				И ЗначениеЗаполнено(ТипОбъектаКонсолидации)
				И ЗначениеЗаполнено(СправочникКонсолидации)
				И ЗначениеЗаполнено(СправочникБД)
				И ЗначениеЗаполнено(ТипМетаДанных) Тогда
				
				ОписаниеОбъекта=ОбщегоНазначенияУХ.ПолучитьОписаниеОбъектаБД(Неопределено,ТипМетаДанных,СправочникБД,ТипБД);
				
				Если ОписаниеОбъекта=Неопределено Тогда
					
					Возврат Неопределено;
					
				КонецЕсли;
				
				СправочникОбъект=Справочники.СоответствиеВнешнимИБ.СоздатьЭлемент();
				СправочникОбъект.Владелец=ТипБД;
				СправочникОбъект.ТипОбъектаКонсолидации=ТипОбъектаКонсолидации;
				СправочникОбъект.ИмяОбъектаМетаданных=СправочникКонсолидации;
				СправочникОбъект.ТипОбъектаВИБ=ТипМетаДанных;
				СправочникОбъект.ОписаниеОбъектаВИБ=ОписаниеОбъекта;
				
				Если СправочникОбъект.ОписаниеОбъектаВИБ.Реквизиты.Количество()=0 Тогда
					
					ОбъектНСИ=СправочникОбъект.ОписаниеОбъектаВИБ.ПолучитьОбъект();
					ОбъектНСИ.ЗаполнитьРеквизитыОбъекта();
					ОбъектНСИ.Записать();
					
				КонецЕсли;
				
				СправочникОбъект.ЗаполнитьРеквизитыОбъектаВИБ();
				СправочникОбъект.ЗаполнитьСписокПолей();
				СправочникОбъект.СформироватьТаблицуСоответствияБД();
				СправочникОбъект.ЗаполнитьДеревоПоОбъектуВИБ();
				
				Попытка
					
					СправочникОбъект.СохранитьНастройкиОперанда();	
					СправочникОбъект.Записать();
					Возврат СправочникОбъект.Ссылка;
					
				Исключение
					ТекстОшибки = НСтр("ru = 'Не удалось создать настройку соответствия:
					|					Объект консолидации %ТипОбъектаКонсолидации%: %СправочникКонсолидации%.
					|					Объект ВИБ %ТипМетаДанных%: %СправочникБД%.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипОбъектаКонсолидации%", Строка(ТипОбъектаКонсолидации));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СправочникКонсолидации%", Строка(СправочникКонсолидации));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТипМетаДанных%", Строка(ТипМетаДанных));
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%СправочникБД%", Строка(СправочникБД));

					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки, , , СтатусСообщения.Важное);
					
					Возврат Неопределено;
					
				КонецПопытки;
				
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		КонецЕсли;			
		
	Иначе
		
		Возврат Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкуСоответствия()

Функция ПолучитьОписаниеТипаЗначенияПВХ(КонтекстОтчета,ТаблицаАналитикиВИБ,СтрокаUUID) Экспорт
	
	Если (НЕ КонтекстОтчета.Свойство("База")) ИЛИ КонтекстОтчета.База=Неопределено Тогда
		
		База = УправлениеСоединениямиВИБУХ.ПолучитьСоединение(КонтекстОтчета.ИспользуемаяИБ,1);
		
		Если База=Неопределено Тогда
			
			Возврат Неопределено;
			
		Иначе
			
			КонтекстОтчета.Вставить("База",База);
			
		КонецЕсли;
		
	Иначе
		
		База=КонтекстОтчета.База;
		
	КонецЕсли;
	
	ОбъектВИБ=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьСсылкуПОСтрокеUUID(База,"ПланВидовХарактеристик",СтрЗаменить(ТаблицаАналитикиВИБ,"ПланВидовХарактеристик.",""),СтрокаUUID);
	
	Если ОбъектВИБ=Неопределено Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ОписаниеТиповБД=ОбъектВИБ.ValueType;
	
	ТипКОМБулево = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,истина);
	ТипКОМЧисло  = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,20);
	ТипКОМСтрока = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База," ");
	ТипКОМДата   = РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLTypeOf(База,ТекущаяДата());
	
	МассивТипов  = Новый Массив;
	
	Для Каждого Тип Из ОписаниеТиповБД.Типы() Цикл
		
		Если РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLType(База,Тип) = ТипКОМБулево Тогда
			
			МассивТипов.Добавить(Тип("Булево"));
			
		ИначеЕсли РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLType(База,Тип) = ТипКОМЧисло Тогда
			
			МассивТипов.Добавить(Тип("Число"));
			
		ИначеЕсли РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLType(База,Тип) = ТипКОМСтрока Тогда
			
			МассивТипов.Добавить(Тип("Строка"));
			
		ИначеЕсли РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLType(База,Тип) = ТипКОМДата Тогда
			
			МассивТипов.Добавить(Тип("Дата"));
			
		Иначе
			
			СтрокаТип=РаботаСОбъектамиМетаданныхВнешнийУХ.ПолучитьXMLType(База,Тип).TypeName;
			МассивСсылочныхТипов=ПолучитьМассивСсылочныхТиповПоСтрокеВИБ(КонтекстОтчета.ИспользуемаяИБ.ТипБД,СтрокаТип);
			
			Если НЕ МассивСсылочныхТипов=Неопределено Тогда
				
				Для Каждого СсылочныйТип ИЗ МассивСсылочныхТипов Цикл
					
					МассивТипов.Добавить(СсылочныйТип);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивТипов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТК_Числа = Новый КвалификаторыЧисла(ОписаниеТиповБД.NumberQualifiers.Digits
	, ОписаниеТиповБД.NumberQualifiers.FractionDigits
	, ?(ОписаниеТиповБД.NumberQualifiers.AllowedSign = База.AllowedSign.Any, ДопустимыйЗнак.Любой, ДопустимыйЗнак.Неотрицательный));
	
	ТК_Строки = Новый КвалификаторыСтроки(ОписаниеТиповБД.StringQualifiers.Length
	, ?(ОписаниеТиповБД.StringQualifiers.AllowedLength = База.AllowedLength.Variable
	, ДопустимаяДлина.Переменная
	, ДопустимаяДлина.Фиксированная));
	
	COM_DateFractions = ОписаниеТиповБД.DateQualifiers.DateFractions;
	
	Если COM_DateFractions = База.DateFractions.Date Тогда
		ДатаЧасть = ЧастиДаты.Дата;
	ИначеЕсли COM_DateFractions = База.DateFractions.Time Тогда
		ДатаЧасть = ЧастиДаты.Время;
	Иначе
		ДатаЧасть = ЧастиДаты.ДатаВремя;
	КонецЕсли;
	
	ТК_Даты   = Новый КвалификаторыДаты(ДатаЧасть);
	
	Возврат Новый ОписаниеТипов(МассивТипов, ТК_Числа, ТК_Строки, ТК_Даты);
	
КонецФункции

Функция ПолучитьМассивСсылочныхТиповПоСтрокеВИБ(ТипБД,СтрокаТип) Экспорт
	
	ДанныеТипа=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаТип,".");
	
	Если НЕ ДанныеТипа.Количество()=2 Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТипОбъектаМетаданных=ПреобразоватьТипОбъектаВнешнейИБ(ДанныеТипа[0]);
	
	Если ПустаяСтрока(ТипОбъектаМетаданных) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИмяОбъектаМетаданных=ДанныеТипа[1];
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации КАК ТипОбъектаКонсолидации,
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.ТипОбъектаВИБ = &ТипОбъектаВИБ
	|	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Наименование = &ИмяОбъектаМетаданных
	|	И СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ.Владелец = &Владелец
	|	И НЕ СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = ""ВидСубконто""";
	
	Запрос.УстановитьПараметр("ТипОбъектаВИБ",		ТипОбъектаМетаданных);
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
	Запрос.УстановитьПараметр("Владелец",			ТипБД);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	МассивСсылочныхТипов=Новый Массив;
	
	Пока Результат.Следующий() Цикл
		
		МассивСсылочныхТипов.Добавить(Тип(Результат.ТипОбъектаКонсолидации+"Ссылка."+Результат.ИмяОбъектаМетаданных));
		
	КонецЦикла;
	
	Возврат МассивСсылочныхТипов;
		
КонецФункции // ПолучитьОписаниеСсылочногоТипаПоСтрокеВИБ()

Функция ПреобразоватьТипОбъектаВнешнейИБ(ТипОбъектаВнешнейИБ) Экспорт
	
	Если ТипОбъектаВнешнейИБ="EnumRef" ИЛИ ТипОбъектаВнешнейИБ="ПеречислениеСсылка" Тогда
		
		Возврат "Перечисление";
		
	ИначеЕсли ТипОбъектаВнешнейИБ="CatalogRef" ИЛИ ТипОбъектаВнешнейИБ="СправочникСсылка" Тогда
		
		Возврат "Справочник";
				
	ИначеЕсли ТипОбъектаВнешнейИБ="DocumentRef" ИЛИ ТипОбъектаВнешнейИБ="ДокументСсылка" Тогда
		
		Возврат "Документ";
		
	ИначеЕсли ТипОбъектаВнешнейИБ="ChartOfCharacteristicTypesRef" ИЛИ ТипОбъектаВнешнейИБ="ПланВидовХарактеристикСсылка" Тогда
		
		Возврат "ПланВидовХарактеристик";
		
	ИначеЕсли ТипОбъектаВнешнейИБ="ChartOfAccountsRef" ИЛИ ТипОбъектаВнешнейИБ="ПланСчетовСсылка" Тогда
		
		Возврат "ПланСчетов";
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
				
КонецФункции // ВернутьТипобъектаТекущейИБ()

Функция ПолучитьТаблицуМетаданных(ТипДанных,ТаблицаМетаданных=Неопределено,ИскатьСуществующие=Ложь)
	
	Если ТаблицаМетаданных=Неопределено Тогда
		
		ТаблицаМетаданных=Новый ТаблицаЗначений;
		ТаблицаМетаданных.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));
		
	КонецЕсли;
	
	МассивМетаданных=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТипДанных,";");
	
	Для Каждого Таблица ИЗ МассивМетаданных Цикл
		
		Если СтрНайти(Таблица,"Справочник")>0
			ИЛИ СтрНайти(Таблица,"Перечисление")>0
			ИЛИ СтрНайти(Таблица,"ПланВидовХарактеристик")>0
			ИЛИ СтрНайти(Таблица,"ПланСчетов")>0 Тогда
			
			Если ИскатьСуществующие И (НЕ ТаблицаМетаданных.Найти(Таблица,"ТаблицаАналитики")=Неопределено) Тогда
				
				Продолжить;
				
			Иначе
				
				НоваяСтрока=ТаблицаМетаданных.Добавить();
				НоваяСтрока.ТаблицаАналитики=Таблица;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаМетаданных;
	
КонецФункции // ПолучитьТаблицуМетаданных() 

Функция ПолучитьТаблицуСоответствий(ТипБД,ТипДанных,ТаблицаМетаданных=Неопределено) Экспорт
	
	Если ТаблицаМетаданных=Неопределено Тогда
		
		ТаблицаМетаданных=ПолучитьТаблицуМетаданных(ТипДанных);
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТаблицаМетаданных.ТаблицаАналитики КАК ТаблицаАналитики
	|ПОМЕСТИТЬ ТаблицаМетаданных
	|ИЗ
	|	&ТаблицаМетаданных КАК ТаблицаМетаданных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Справочник."" + СправочникиБД.Наименование КАК ТаблицаАналитики,
	|	СправочникиБД.Ссылка КАК ОписаниеОбъектаБД
	|ПОМЕСТИТЬ ОписанияОбъектовБД
	|ИЗ
	|	Справочник.СправочникиБД КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Владелец = &ТипБД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Перечисление."" + ПеречисленияБД.Наименование,
	|	ПеречисленияБД.Ссылка
	|ИЗ
	|	Справочник.ПеречисленияБД КАК ПеречисленияБД
	|ГДЕ
	|	ПеречисленияБД.Владелец = &ТипБД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПланСчетов."" + ПланыСчетовБД.Наименование,
	|	ПланыСчетовБД.Ссылка
	|ИЗ
	|	Справочник.ПланыСчетовБД КАК ПланыСчетовБД
	|ГДЕ
	|	ПланыСчетовБД.Владелец = &ТипБД
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПланВидовХарактеристик."" + ПланыВидовХарактеристикБД.Наименование,
	|	ПланыВидовХарактеристикБД.Ссылка
	|ИЗ
	|	Справочник.ПланыВидовХарактеристикБД КАК ПланыВидовХарактеристикБД
	|ГДЕ
	|	ПланыВидовХарактеристикБД.Владелец = &ТипБД
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаМетаданных.ТаблицаАналитики КАК ТаблицаАналитики,
	|	ОписанияОбъектовБД.ОписаниеОбъектаБД КАК ОписаниеОбъектаБД
	|ПОМЕСТИТЬ ТаблицыОписания
	|ИЗ
	|	ТаблицаМетаданных КАК ТаблицаМетаданных
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОписанияОбъектовБД КАК ОписанияОбъектовБД
	|		ПО ТаблицаМетаданных.ТаблицаАналитики = ОписанияОбъектовБД.ТаблицаАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОписаниеОбъектаБД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка КАК НастройкаСоответствия,
	|	СоответствиеВнешнимИБ.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ
	|ПОМЕСТИТЬ НастройкиСоответствия
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	СоответствиеВнешнимИБ.Владелец = &ТипБД
	|	И НЕ СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = ""ВидСубконто""
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОписаниеОбъектаВИБ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицыОписания.ТаблицаАналитики КАК ТаблицаАналитикиВИБ,
	|	ТаблицыОписания.ОписаниеОбъектаБД КАК ОписаниеОбъектаВИБ,
	|	ЕСТЬNULL(НастройкиСоответствия.НастройкаСоответствия, ЗНАЧЕНИЕ(Справочник.СоответствиеВнешнимИБ.ПустаяСсылка)) КАК НастройкаСоответствия
	|ИЗ
	|	ТаблицыОписания КАК ТаблицыОписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастройкиСоответствия КАК НастройкиСоответствия
	|		ПО ТаблицыОписания.ОписаниеОбъектаБД = НастройкиСоответствия.ОписаниеОбъектаВИБ";
	
	Запрос.УстановитьПараметр("ТипБД",ТипБД);
	Запрос.УстановитьПараметр("ТаблицаМетаданных",ТаблицаМетаданных);
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции // ПолучитьТаблицуСоответствий() 

Функция ПолучитьПроектСоответствий(ТабНастройкаСоответствий)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ТабНастройкаСоответствий.ТаблицаАналитикиВИБ КАК ТаблицаАналитики,
	|	ТабНастройкаСоответствий.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ,
	|	ТабНастройкаСоответствий.НастройкаСоответствия КАК НастройкаСоответствия
	|ПОМЕСТИТЬ ТабНастройкаСоответствий
	|ИЗ
	|	&ТабНастройкаСоответствий КАК ТабНастройкаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНастройкаСоответствий.ТаблицаАналитики КАК ТаблицаАналитики,
	|	ТабНастройкаСоответствий.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ
	|ПОМЕСТИТЬ ОписанияОбъектовВИБ
	|ИЗ
	|	ТабНастройкаСоответствий КАК ТабНастройкаСоответствий
	|ГДЕ
	|	ТабНастройкаСоответствий.НастройкаСоответствия = ЗНАЧЕНИЕ(Справочник.СоответствиеВнешнимИБ.ПустаяСсылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""Справочник."" + СправочникиБД.Наименование КАК ТаблицаАналитики,
	|	СправочникиБД.Ссылка КАК ОписаниеОбъектаБД
	|ПОМЕСТИТЬ ОписанияОбъектовБД
	|ИЗ
	|	Справочник.СправочникиБД КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Перечисление."" + ПеречисленияБД.Наименование,
	|	ПеречисленияБД.Ссылка
	|ИЗ
	|	Справочник.ПеречисленияБД КАК ПеречисленияБД
	|ГДЕ
	|	ПеречисленияБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПланСчетов."" + ПланыСчетовБД.Наименование,
	|	ПланыСчетовБД.Ссылка
	|ИЗ
	|	Справочник.ПланыСчетовБД КАК ПланыСчетовБД
	|ГДЕ
	|	ПланыСчетовБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПланВидовХарактеристик."" + ПланыВидовХарактеристикБД.Наименование,
	|	ПланыВидовХарактеристикБД.Ссылка
	|ИЗ
	|	Справочник.ПланыВидовХарактеристикБД КАК ПланыВидовХарактеристикБД
	|ГДЕ
	|	ПланыВидовХарактеристикБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписанияОбъектовВИБ.ОписаниеОбъектаВИБ КАК ОписаниеОбъектаВИБ,
	|	ОписанияОбъектовБД.ОписаниеОбъектаБД КАК ОписаниеОбъектаБД,
	|	ОписанияОбъектовВИБ.ТаблицаАналитики КАК ТаблицаАналитики
	|ИЗ
	|	ОписанияОбъектовВИБ КАК ОписанияОбъектовВИБ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОписанияОбъектовБД КАК ОписанияОбъектовБД
	|		ПО ОписанияОбъектовВИБ.ТаблицаАналитики = ОписанияОбъектовБД.ТаблицаАналитики";
	
	Запрос.УстановитьПараметр("ТабНастройкаСоответствий",ТабНастройкаСоответствий);
	
	Возврат Запрос.Выполнить().Выгрузить();	
	
КонецФункции // ПолучитьПроектСоответствий()

Процедура СформироватьНастройкиСоответствия(ТипБД,ТипДанных,ТабНастройкаСоответствий=Неопределено) Экспорт
	
	Если ТабНастройкаСоответствий=Неопределено Тогда
		
		ТабНастройкаСоответствий=ИнтеграцияСВнешнимиСистемамиУХ.ПолучитьТаблицуСоответствий(ТипБД,ТипДанных);
		
	КонецЕсли;
	
	Результат=ПолучитьПроектСоответствий(ТабНастройкаСоответствий);
		
	ТаблицаМетаданных=Новый ТаблицаЗначений;
	ТаблицаМетаданных.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(500));	
	МассивОписаний=Новый Массив;
		
	Для Каждого Строка ИЗ Результат Цикл
		
		Если СтрНайти(Строка.ТаблицаАналитики,"Перечисление.")>0 Тогда
			
			СоздатьНастройкуСоответствияПеречисление(ТипБД,Строка);
			
		ИначеЕсли СтрНайти(Строка.ТаблицаАналитики,"ПланСчетов.")>0 Тогда
			
			СоздатьНастройкуСоответствияПланСчетов(ТипБД,Строка);
			
		Иначе
			
			НоваяСтрока=ТаблицаМетаданных.Добавить();
			НоваяСтрока.ТаблицаАналитики=Строка.ТаблицаАналитики;
			
			МассивОписаний.Добавить(Строка.ОписаниеОбъектаВИБ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////////////////////
	// Определяем рекурсивно ссылочные объекты, по которым также необходима установка настроек соответствия
	
	Для Каждого ОписаниеОбъектаВИБ ИЗ МассивОписаний Цикл
		
		ОбработатьТЧРеквизитов(ТипБД,ОписаниеОбъектаВИБ.Реквизиты,ТаблицаМетаданных);
				
		Если ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.СправочникиБД") Тогда
			
			ОбработатьТЧРеквизитов(ТипБД,ОписаниеОбъектаВИБ.Владельцы,ТаблицаМетаданных);
			
		КонецЕсли;
					
	КонецЦикла;
	
	ТабНастройкаСоответствийФинал=ПолучитьТаблицуСоответствий(ТипБД,,ТаблицаМетаданных);
	ПроектСоответствий=ПолучитьПроектСоответствий(ТабНастройкаСоответствийФинал);
	
	
	
	
	
	
	
	
	
	
							
КонецПроцедуры // СформироватьНастройкиСоответствия()

Процедура ОбработатьТаблицуНастроекСоответствий(ТипБД,ТабНастройкаСоответствий)
	
	
КонецПроцедуры // ОбработатьТаблицуНастроекСоответствий()

Процедура ОбработатьТЧРеквизитов(ТипБД,Реквизиты,ТаблицаМетаданных)
	
	Для Каждого СтрРеквизит ИЗ Реквизиты Цикл
		
		ТекТаблицаМетаданных=ПолучитьТаблицуМетаданных(СтрРеквизит.ТипДанных);
		
		Если ТекТаблицаМетаданных.Количество()>0 Тогда
			
			ТекНастройкиСоответствия=ПолучитьТаблицуСоответствий(ТипБД,СтрРеквизит.ТипДанных,ТекТаблицаМетаданных);
			
			Для Каждого Строка ИЗ ТекНастройкиСоответствия Цикл
				
				Если ЗначениеЗаполнено(Строка.НастройкаСоответствия) Тогда
					
					Продолжить;
					
				ИначеЕсли ТаблицаМетаданных.Найти(Строка.ТаблицаАналитикиВИБ,"ТаблицаАналитики")=Неопределено Тогда
					
					НоваяСтрока=ТаблицаМетаданных.Добавить();
					НоваяСтрока.ТаблицаАналитики=Строка.ТаблицаАналитикиВИБ;
					
					Если СтрНайти(Строка.ТаблицаАналитикиВИБ,"Справочник.")>0
						ИЛИ СтрНайти(Строка.ТаблицаАналитикиВИБ,"ПланВидовХарактеристик.")>0 Тогда
	
						ДополнитьТаблицуМетаданныхРекурсивно(ТипБД,Строка.ОписаниеОбъектаВИБ,ТаблицаМетаданных);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // ОбработатьТЧРеквизитов() 

Процедура ДополнитьТаблицуМетаданныхРекурсивно(ТипБД,ОписаниеОбъектаВИБ,ТаблицаМетаданных)
	
	ОбработатьТЧРеквизитов(ТипБД,ОписаниеОбъектаВИБ.Реквизиты,ТаблицаМетаданных);
	
	Если ТипЗнч(ОписаниеОбъектаВИБ)=Тип("СправочникСсылка.СправочникиБД") Тогда
		
		ОбработатьТЧРеквизитов(ТипБД,ОписаниеОбъектаВИБ.Владельцы,ТаблицаМетаданных);
		
	КонецЕсли;
	
КонецПроцедуры // ДополнитьТаблицуМетаданныхРекурсивно()

Процедура СоздатьНастройкуСоответствияПеречисление(ТипБД,СтрокаДанные)
	
	СправочникОбъект=Справочники.СоответствиеВнешнимИБ.СоздатьЭлемент();
	СправочникОбъект.Владелец=ТипБД;
	СправочникОбъект.ТипОбъектаВИБ="Перечисление";
	СправочникОбъект.ОписаниеОбъектаВИБ=СтрокаДанные.ОписаниеОбъектаВИБ;
	СправочникОбъект.ТипОбъектаКонсолидации="Перечисление";
	СправочникОбъект.ИмяОбъектаМетаданных=СтрЗаменить(СтрокаДанные.ТаблицаАналитики,"Перечисление.","");
	СправочникОбъект.ОписаниеОбъектаТек=СтрокаДанные.ОписаниеОбъектаБД;
	
	СправочникОбъект.ЗаполнитьРеквизитыОбъектаВИБ();	
	СправочникОбъект.ЗаполнитьСписокПолей();
	СправочникОбъект.ИнициализироватьТаблицуСоответствия();
	
	СправочникОбъект.мТабличноеПолеИзмеренийБД=СправочникОбъект.ЗаполнитьДеревоПоОбъектуВИБ();	
	СправочникОбъект.мТаблицаСоответствия=СправочникОбъект.СформироватьТаблицуСоответствияБД(Истина);
	СправочникОбъект.СохранитьНастройкиОперанда();
	
	Попытка
		
		СправочникОбъект.Записать();
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Ошибка при создании настройки соответствия %НаименованиеСправочника%:  %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеСправочника%", Строка(СправочникОбъект.Наименование));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Информация);
								
	КонецПопытки;	
	
КонецПроцедуры // СоздатьНастройкуСоответствияПеречисление() 

Процедура СоздатьНастройкуСоответствияПланСчетов(ТипБД,СтрокаДанные)
	
	СправочникОбъект=Справочники.СоответствиеВнешнимИБ.СоздатьЭлемент();
	СправочникОбъект.Владелец=ТипБД;
	СправочникОбъект.ТипОбъектаВИБ="ПланСчетов";
	СправочникОбъект.ОписаниеОбъектаВИБ=СтрокаДанные.ОписаниеОбъектаВИБ;
	СправочникОбъект.ТипОбъектаКонсолидации="ПланСчетов";
	СправочникОбъект.ИмяОбъектаМетаданных=СтрЗаменить(СтрокаДанные.ТаблицаАналитики,"ПланСчетов.","");
	СправочникОбъект.ОписаниеОбъектаТек=СтрокаДанные.ОписаниеОбъектаБД;
	
	СправочникОбъект.ЗаполнитьРеквизитыОбъектаВИБ();	
	СправочникОбъект.ЗаполнитьСписокПолей();
	СправочникОбъект.ИнициализироватьТаблицуСоответствия();
	
	СправочникОбъект.мТабличноеПолеИзмеренийБД=СправочникОбъект.ЗаполнитьДеревоПоОбъектуВИБ();	
	СправочникОбъект.мТаблицаСоответствия=СправочникОбъект.СформироватьТаблицуСоответствияБД(Истина);
	СправочникОбъект.СохранитьНастройкиОперанда();
	
	Попытка
		
		СправочникОбъект.Записать();
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при создании настройки соответствия %СправочникНаименование%: %ИнформацияОбОшибке%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СправочникНаименование%", Строка(СправочникОбъект.Наименование));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));

		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,	, , СтатусСообщения.Информация);
								
	КонецПопытки;	
	
КонецПроцедуры // СоздатьНастройкуСоответствияПеречисление()
