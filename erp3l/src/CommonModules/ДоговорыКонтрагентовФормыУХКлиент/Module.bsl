////////////////////////////////////////////////////////////////////////////////
// Модуль содержит общие клиентские методы для форм, связанных со справочником ДоговорыКонтрагентов.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

#Область ОбработчикиСобытийФормы
Процедура ПриОткрытииВерсииСоглашения(Форма, Отказ) Экспорт
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(Форма);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(Форма);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	#Область УХ_Договоры
	//ПересчитатьИтоговыеКурсыВалютногоКоридора();
	#КонецОбласти	
	
КонецПроцедуры

Процедура ОбработкаОповещенияВерсииСоглашения(Форма, ИмяСобытия, Параметр, Источник) Экспорт

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если ИмяСобытия = "ДоговорыКонтрагентов_СозданиеФайлаДоговора" 
		И Параметр.ДоговорКонтрагента = Форма.ДоговорОбъект.Ссылка Тогда 
		// Для текущего договора был добавлен присоединенный файл с текстом договора.
		// Сохраним ссылку на него в текущем объекте.
		ОбработкаОповещенияСозданиеФайлаДоговора(Форма, Параметр.ФайлДоговора);
	КонецЕсли;
	
	Если (ИмяСобытия = "ВыборПараметровУчетаФИ") И (Источник = Элементы.ПараметрыУчетаФИ) Тогда	
		
		Форма.ВыборПараметровУчетаФИУХ = Параметр;
		
	ИначеЕсли (ИмяСобытия = "ЗаписанВстречныйДоговор")
		И (Параметр = Объект.ДоговорКонтрагента) Тогда
		
		Форма.ВстречныйДоговор = Источник;
		ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
		
	ИначеЕсли ИмяСобытия = "СвязанныеДоговоры_Изменение" Тогда
		
		ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
		
	КонецЕсли;
	
	#Область ВерсионированиеОбъектовДляЕИС
	ЦентрализованныеЗакупкиКлиентУХ.ОбработкаОповещенияОбИзмененииВерсииДляЕИС(Форма, ИмяСобытия, Параметр, Источник);
	#КонецОбласти
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоВерсияСоглашения(Форма, НовыйОбъект, Источник, СтандартнаяОбработка) Экспорт
	
	Если (ТипЗнч(НовыйОбъект) = Тип("ДокументСсылка.ВерсияСоглашенияКредит")) Тогда
		
		Форма.ВстречныйДоговор = ДоговорыКонтрагентовФормыУХВызовСервера.ПолучитьВстречныйДоговор(Форма.Объект.ДоговорКонтрагента);
		ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ПередЗаписьюВерсииСоглашения(Форма, Отказ, ПараметрыЗаписи) Экспорт
	
	ДоговорыКонтрагентовВстраиваниеУХКлиент.ПередЗаписьюВерсииСоглашения(Форма, Отказ, ПараметрыЗАписи);	
	
КонецПроцедуры

Процедура ПослеЗаписиВерсииСоглашения(Форма, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	
	Оповестить("Запись_ДоговорыКонтрагентов", ПараметрыЗаписи, Объект.ДоговорКонтрагента);
	
	Если Форма.СозданИзФормыДокумента Тогда
		Форма.ОповеститьОВыборе(Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВстречныйДоговор") 
		И ЗначениеЗаполнено(Форма.ВстречныйДоговор) Тогда
		
		Оповестить("ЗаписанВстречныйДоговор", Форма.ВстречныйДоговор, Объект.ДоговорКонтрагента);
		
	КонецЕсли;
	
	ОповеститьОбИзменении(Объект.ДоговорКонтрагента);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработкаВыбора(Форма, ВыбранноеЗначение, ИсточникВыбора) Экспорт
	
	Результат = Новый Структура("Успех", Истина);
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.РаботаСДоговорамиУХ.Форма.ФормаПозицияГрафика" Тогда
		
		Объект = Форма.Объект;
		
		Строка = Объект.ГрафикРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ВыбранноеЗначение);
	
		Строка.РучнаяКорректировка = Истина;
		Строка.ИдентификаторПозицииГрафика = Новый УникальныйИдентификатор;
	    Строка.СуммаКорректировка = Строка.Сумма - Строка.СуммаРасчет;
		
		Результат.Вставить("ОбновитьГрафикРасчетов");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
#КонецОбласти

#Область ОбработчикиСобытийРеквизитовШапкиФормы

Процедура ПриИзмененииНомераДоговора(Форма, Элемент) Экспорт
	
	СформироватьНаименованиеДоговора(Форма);
	УстановитьИдентификаторПлатежа(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииДатыДоговора(Форма, Элемент) Экспорт
	
	СформироватьНаименованиеДоговора(Форма);

КонецПроцедуры

Процедура ПриИзмененииКонтрагентаКлиент(Форма, Элемент) Экспорт
			
КонецПроцедуры

Процедура ПриИзмененииВстречногоДоговора(Форма, Элемент) Экспорт
	
	Форма.ЗаписатьВстречныеДоговоры = Истина;
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура СозданиеВстречногоДоговора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ОткрытьНовыйВстречныйДоговор(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСуммыДоговора(Форма, Элемент) Экспорт
	
	ОпределитьПараметрыВалютногоКонтроля(Форма);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииВалютыВзаиморасчетов(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	ИзмениласьВалютаПлатежей = Ложь;
	ТекОсновнаяВалютаПлатежей = Объект.ОсновнаяВалютаПлатежей;
	
	Если НЕ УправлениеДоговорамиУХКлиентСерверПовтИсп.ДопустимыУсловныеЕдиницы(Объект.ВидДоговораУХ) Тогда
		
		Объект.ОсновнаяВалютаПлатежей = Объект.ВалютаВзаиморасчетов;
		ИзмениласьВалютаПлатежей = (Объект.ОсновнаяВалютаПлатежей <> ТекОсновнаяВалютаПлатежей);
		
	КонецЕсли;
	
	Если ИзмениласьВалютаПлатежей Тогда
		Объект.БанковскийСчет = Неопределено;
		Объект.БанковскийСчетКонтрагента = Неопределено;
	КонецЕсли;
	
	ЭтоВалютныйИнструмент = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ЭтоВалютныйДоговорМСФО(Объект);
	Объект.ПараметрыУчетаФИ = ДоговорыКонтрагентовФормыУХВызовСервера.ПолучитьПараметрыУчетаФИ(Объект.ВидДоговораУХ, Объект.Организация, ЭтоВалютныйИнструмент);
	ОпределитьПараметрыВалютногоКонтроля(Форма);
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОсновнойВалютыПлатежей(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСпособаОпределенияКурсаПлатежа(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Если Объект.СпособОпределенияКурсаПлатежа = ПредопределенноеЗначение("Перечисление.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс") Тогда
		Объект.ЗапретПлатежаВПрочихВалютах = Истина;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииКурсПлатежаНеМенее(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПересчитатьИтоговыеКурсыВалютногоКоридора(Форма);
КонецПроцедуры

Процедура ПриИзмененииКурсПлатежаНеМенееВВалютеОплаты(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПересчитатьИтоговыеКурсыВалютногоКоридора(Форма);
КонецПроцедуры

Процедура ПриИзмененииКурсПлатежаНеБолее(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПересчитатьИтоговыеКурсыВалютногоКоридора(Форма);
КонецПроцедуры

Процедура ПриИзмененииКурсПлатежаНеБолееВВалютеОплаты(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.ПересчитатьИтоговыеКурсыВалютногоКоридора(Форма);
КонецПроцедуры

Процедура ПриИзмененииКонтролироватьСуммуЗадолженности(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСпособФормированияПлатежей(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииПорядкаРасчетов(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ОткрытиеШаблонаПроцесса(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.ОБъект;
	
	Если ЗначениеЗаполнено(Объект.ШаблонПроцесса) Тогда 
		МодульОбработкиЭтаповПроцессовКлиентУХ.ДиалогВыбораДействийНадШаблономПроцесса(Форма, Объект.ШаблонПроцесса, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииВидаСоглашения(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
			
	Если Объект.ВидСоглашения <> ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация") Тогда
		Объект.БазовыйДоговор = Неопределено;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииПодписан(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура НачалоВыбораРуководителяКонтрагента(Форма, Элемент, ДанныеВыбора, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	Список = ДоговорыКонтрагентовФормыУХВызовСервера.ПолучитьСписокКонтактныхЛиц(Объект.Контрагент);
	
	ПараметрыОповещения = Новый Структура("Форма", Форма);
	ОповещениеВыбора = Новый ОписаниеОповещения("РуководительКонтрагентаНачалоВыбораЗавершение", ЭтотОбъект, ПараметрыОповещения);
	Форма.ПоказатьВыборИзСписка(ОповещениеВыбора, Список, Элемент);

КонецПроцедуры

Процедура ПриИзмененииПредставленияРуководителяКонтрагента(Форма, Элемент = Неопределено) Экспорт
	
	
КонецПроцедуры

Процедура ПриИзмененииДолжностиРуководителяКонтрагента(Форма, Элемент) Экспорт
		
	Объект = Форма.Объект;
	
	// СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	Форма[Форма.ТекущийРеквизитСклонения] = Форма.Склонения;
	Форма["ИзмененоПредставление" + Сред(Форма.ТекущийРеквизитСклонения, 10)] = Форма.ИзмененоПредставление;
	
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыОповещения = Новый Структура("Форма", Форма);
	ОповещениеОРезультатеСклонения = Новый ОписаниеОповещения(
		"ДолжностьРуководителяКонтрагентаПриИзмененииЗавершение", ЭтотОбъект, ПараметрыОповещения);
	СклонениеПредставленийОбъектовКлиент.НачатьСклонение(
		Форма, Объект.ДолжностьРуководителяКонтрагента, ПараметрыСклонения, Истина, ОповещениеОРезультатеСклонения);
	// Конец СтандартныеПодсистемы.СклонениеПредставленийОбъектов
	
КонецПроцедуры

Процедура ОткрытиеФайлДоговора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	ДоговорыКонтрагентовВстраиваниеУХКлиент.ОткрытиеФайлДоговора(Форма, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура СозданиеФайлаДоговора(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	ДоговорыКонтрагентовВстраиваниеУХКлиент.СозданиеФайлаДоговора(Форма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПерейтиОбеспечениеОбязательствОрганизации(Форма) Экспорт
	
	ОткрытьСведенияОбОбеспечении(Форма, ПредопределенноеЗначение("Справочник.ВидыСвязейОбъектов.ОбеспечениеВыданное"));
	
КонецПроцедуры

Процедура ПерейтиОбеспечениеОбязательствКонтрагента(Форма) Экспорт
	
	ОткрытьСведенияОбОбеспечении(Форма, ПредопределенноеЗначение("Справочник.ВидыСвязейОбъектов.ОбеспечениеПолученное"));
	
КонецПроцедуры

Процедура ПриИзмененииОбеспечениеОбязательствОрганизации(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииОбеспечениеОбязательствКонтрагента(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииФиксированныйСчетОрганизации(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииФиксированныйСчетКонтрагента(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииТребуетсяПостановкаНаУчетВалютногоКонтроля(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ЭтоГосударственныйКонтрактПриИзменении(Форма, Элемент) Экспорт
	
	Если НЕ Форма.ЭтоГосударственныйКонтракт Тогда
		Форма.Объект.ГосударственныйКонтракт = Неопределено;
	КонецЕсли;
	
	Форма.Элементы.ГосударственныйКонтракт.Доступность = Форма.ЭтоГосударственныйКонтракт;
	
КонецПроцедуры

Процедура ГосударственныйКонтрактСоздание(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	Объект = Форма.Объект;
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) ИЛИ Форма.Модифицированность Тогда
		Форма.Записать();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", Новый Структура);
	СтруктураПараметров.ЗначенияЗаполнения.Вставить("Контракт", Объект.ДоговорКонтрагента);
	ИмяОткрываемойФормы = СтрШаблон("Справочник.%1.ФормаОбъекта", 
			ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ИмяСправочникаГосударственныеКонтракты());
	ОткрытьФорму(ИмяОткрываемойФормы, СтруктураПараметров, Форма);

КонецПроцедуры

Процедура ПриИзмененииУчетАгентскогоНДСПокупателем(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииПорядокРегистрацииСчетовФактурНаАвансПоДоговору(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииВидАгентскогоДоговора(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииПредъявляетНДС(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не Объект.ПредъявляетНДС Тогда
		Объект.НДСПоСтавкам4и2 = Ложь;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииРасчетОплаты(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Объект.УстановленСрокОплаты = (Форма.РасчетОплаты > 0);
	Объект.ИспользоватьДатуОплаты = (Форма.РасчетОплаты = 2);
	
	Если Объект.УстановленСрокОплаты И Не Объект.ИспользоватьДатуОплаты Тогда
		Если (УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПокупателем(Объект.ВидДоговораУХ))
				ИЛИ (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомиссионером"))
				ИЛИ (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомитентомНаЗакупку")) Тогда
			Объект.СрокОплаты = Форма.СрокОплатыПокупателей;
		ИначеЕсли УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПоставщиком(Объект.ВидДоговораУХ)			
				ИЛИ (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомитентом"))
				ИЛИ (Объект.ВидДоговораУХ = ПредопределенноеЗначение("Справочник.ВидыДоговоровКонтрагентовУХ.СКомиссионеромНаЗакупку")) Тогда
			Объект.СрокОплаты = Форма.СрокОплатыПоставщикам;
		КонецЕсли;
	Иначе
		Объект.СрокОплаты = 0;
	КонецЕсли;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииПредметДоговора(Форма, Элемент) Экспорт
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
КонецПроцедуры

Процедура ПриИзмененииПлатежныйАгент(Форма, Элемент) Экспорт
	
	ОчиститьПризнакиАгента(Форма);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииПризнакАгента(Форма, Элемент) Экспорт
	
	ОчиститьПризнакиАгента(Форма);
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСчетаФактурыОтИмениОрганизации(Форма, Элемент) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииСостоянияДоговора(Форма, Элемент) Экспорт
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Форма.Записать();
	КонецЕсли;
		
	ДоговорыКонтрагентовФормыУХВызовСервера.ЗаписатьСостояниеДоговора(Объект.ДоговорКонтрагента, Форма.СостояниеДоговора);
	
КонецПроцедуры

Процедура ПриИзмененииНомераВерсииСоглашения(Форма, Элемент) Экспорт
	
	СформироватьНаименованиеВерсииСоглашения(Форма);

КонецПроцедуры

Процедура ПриИзмененииДатыВерсииСоглашения(Форма, Элемент) Экспорт
	
	СформироватьНаименованиеВерсииСоглашения(Форма);

КонецПроцедуры

Процедура ПриИзмененииДатыНачалаДействия(Форма, Элемент) Экспорт 
	
	Объект = Форма.Объект;
	
	ДатаВерсииСоглашенияСтар = Объект.Дата;
	РаботаСДоговорамиКонтрагентовУХКлиентСервер.ПроверитьИзменитьДатуВерсииСоглашения(
		НЕ ЗначениеЗаполнено(Объект.ДокументОснование),
		Объект[Форма.ИменаКлючевыхРеквизитов.ДатаНачалаДействия],
		Объект.Дата);
		
	Если ДатаВерсииСоглашенияСтар <> Объект.Дата Тогда
		СформироватьНаименованиеВерсииСоглашения(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьПроизводственныеКалендари(Форма, Элемент, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Объект = Форма.Объект;
	
	ПараметрыОповещения = Новый Структура("Форма", Форма);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьПроизводственныеКалендариЗавершение",ЭтотОбъект,ПараметрыОповещения);
	
	ПараметрыФормы = Новый Структура("Объект,ТолькоПросмотр", Объект, Форма.ТолькоПросмотр);
	
	ОткрытьФорму("Обработка.РаботаСДоговорамиУХ.Форма.ФормаПроизводственныеКалендари",
		ПараметрыФормы,
		Форма,,,,ОписаниеОповещения);
		
КонецПроцедуры

#Область ГрафикРасчетов
Процедура ПриИзмененииСуммыСтрокиГрафика(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	ТекДанные = Элементы.ГрафикРасчетовЛинейный.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.СуммаКорректировка = ТекДанные.Сумма - ТекДанные.СуммаРасчет;
	
КонецПроцедуры

Процедура ПриИзмененииСуммыКорректировкиСтрокиГрафика(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	
	ТекДанные = Элементы.ГрафикРасчетовЛинейный.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекДанные.Сумма = ТекДанные.СуммаРасчет + ТекДанные.СуммаКорректировка;
	
КонецПроцедуры

Процедура ПриИзмененииДатыСтрокиГрафика(Форма, Элемент, ИсходнаяДатаСтроки) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТекДанные = Элементы.ГрафикРасчетовЛинейный.ТекущиеДанные;
	
	Если ИсходнаяДатаСтроки = ТекДанные.Дата Тогда
		// Дата не менялась.
		Возврат;
	КонецЕсли;
	
	Если ТекДанные.СуммаРасчет <> 0 Тогда
		
		НоваяСтрока = Объект.ГрафикРасчетов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДанные,,"Дата");
		НоваяСтрока.Дата = ИсходнаяДатаСтроки;
		НоваяСтрока.Сумма = 0;
		НоваяСтрока.СуммаКорректировка = -ТекДанные.СуммаРасчет;
		
		ТекДанные.СуммаРасчет = 0;
		ТекДанные.СуммаКорректировка = ТекДанные.Сумма;
		ТекДанные.ИдентификаторПозицииГрафика = Новый УникальныйИдентификатор;
		
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииОперацииСтрокиГрафика(Форма, Элемент) Экспорт
	
	Элементы = Форма.Элементы;
	ТекДанные = Элементы.ГрафикРасчетовЛинейный.ТекущиеДанные;
	
	ПараметрыОперации = Форма.ОперацииГрафика.Получить(ТекДанные.ОперацияГрафика);
	Если ПараметрыОперации <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТекДанные, ПараметрыОперации);
		АналитикиСтатейБюджетовУХВызовСервера.ПривестиЗначениеСтатьиБюджетаПоВидуБюджета(ТекДанные.СтатьяБюджета, ТекДанные.ВидБюджета);
		АналитикиСтатейБюджетовУХКлиент.ПриИзмененииСтатьиБюджета(Форма, "ГрафикРасчетовЛинейныйСтатьяБюджета");
	КонецЕсли;

КонецПроцедуры

Процедура ПередУдалениемСтрокиГрафика(Форма, Элемент, Отказ) Экспорт
	
	Элементы = Форма.Элементы;
	ТекДанные = Элементы.ГрафикРасчетовЛинейный.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.СуммаРасчет) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередНачаломИзмененияСтрокиГрафикаРасчетов(Форма, Элемент, Отказ) Экспорт
	Отказ = Истина;	// не редактируется
КонецПроцедуры

Процедура ПриНачалеРедактированияСтрокиГрафика(Форма, НоваяСтрока, Копирование, ИсходнаяДатаСтроки) Экспорт
	
	Элементы = Форма.Элементы;
	ТекДанные = Элементы.ГрафикРасчетовЛинейный.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ТекДанные.РучнаяКорректировка = Истина;
		ТекДанные.ИдентификаторПозицииГрафика = Новый УникальныйИдентификатор;
		
		Если Копирование Тогда
			ТекДанные.СуммаРасчет = 0;
		ИначеЕсли Элементы.ГрафикРасчетов.ТекущиеДанные <> Неопределено Тогда
			ТекДанные.Дата = Элементы.ГрафикРасчетов.ТекущиеДанные.Дата;
		КонецЕсли;
		
	КонецЕсли;
	
	ИсходнаяДатаСтроки = ТекДанные.Дата;
	
КонецПроцедуры

Процедура ПриАктивизацииЯчейкиГрафикаРасчетов(Форма, Элемент) Экспорт

	Элементы = Форма.Элементы;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВыбраннаяДатаГрафика = Элемент.ТекущиеДанные.Дата;
	
	Если ЗначениеЗаполнено(ВыбраннаяДатаГрафика) Тогда
		Элементы.ГрафикРасчетовЛинейный.ОтборСтрок = Новый ФиксированнаяСтруктура("Дата", ВыбраннаяДатаГрафика);
	Иначе
		Элементы.ГрафикРасчетовЛинейный.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

Процедура ПередНачаломДобавленияСтрокиГрафикаРасчетов(Форма, Элемент, Отказ, Копирование, Родитель, Группа, Параметр) Экспорт
	
	Объект = Форма.Объект;
	
	Отказ = Истина;
	ПараметрыСтрокиГрафика = Новый Структура;
	ПараметрыСтрокиГрафика.Вставить("ОперацииГрафика", Форма.ОперацииГрафика);
	ПараметрыСтрокиГрафика.Вставить("Организация", Объект.Организация);
	ПараметрыСтрокиГрафика.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыСтрокиГрафика.Вставить("БюджетДвиженияДенежныхСредствИспользуется", Форма.БюджетДвиженияДенежныхСредствИспользуется);
	ПараметрыСтрокиГрафика.Вставить("БюджетДоходовРасходовИспользуется", Форма.БюджетДоходовРасходовИспользуется);
	ПараметрыСтрокиГрафика.Вставить("БюджетЗакупокИспользуется", Форма.БюджетЗакупокИспользуется);

	ОткрытьФорму("Обработка.РаботаСДоговорамиУХ.Форма.ФормаПозицияГрафика", ПараметрыСтрокиГрафика, Форма);

КонецПроцедуры

Процедура ПередНачаломУдаленияСтрокиГрафикаРасчетов(Форма, Элемент, Отказ) Экспорт
	
	Отказ = Истина; // строка не удалится, максимум занулится.
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТекДанные = Элементы.ГрафикРасчетов.ТекущиеДанные;
	ДатаКУдалению = ТекДанные.Дата;
	
	СтрокиДетализации = Объект.ГрафикРасчетов.НайтиСтроки(Новый Структура("Дата", ДатаКУдалению));
	Для Каждого ТекСтрокаДетализации Из СтрокиДетализации Цикл
		Если ТекСтрокаДетализации.СуммаРасчет = 0 Тогда
			Объект.ГрафикРасчетов.Удалить(ТекСтрокаДетализации);
		Иначе
			ТекСтрокаДетализации.Сумма = 0;
			ТекСтрокаДетализации.СуммаКорректировка = ТекСтрокаДетализации.СуммаРасчет;
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры	

Процедура ОткрытьЗагрузкуГрафика(Форма, Данные) Экспорт
	
	ПараметрыГрафика = Новый Структура("ФИ, ДатаНачала", Данные.Ссылка, Данные.Дата);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыГрафика", 	ПараметрыГрафика);
	ПараметрыФормы.Вставить("АдресТаблицыГрафика", 	Данные.АдресТаблицыГрафика);
		
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗагрузитьГрафикЗавершение", Форма);
	
	ОткрытьФорму("Обработка.ЗагрузкаГрафикаФИ.Форма.Форма", ПараметрыФормы, Форма,,,, ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура НачатьПереносФактаВГрафик(Форма) Экспорт
	
	ОповещениеОВыборе = Новый ОписаниеОповещения("ЗавершениеВыбораДатыПереносаФакта", Форма);
	ПоказатьВводДаты(
		ОповещениеОВыборе, 
		ТекущаяДата(), 
		Нстр("ru = 'Укажите дату, по которую производится перенос факта в график'"), 
		ЧастиДаты.Дата);

КонецПроцедуры

Процедура ОткрытьСравнениеВерсийГрафиков(Форма, ПараметрыКоманды) Экспорт	
	
	Если НЕ ЗначениеЗаполнено(ПараметрыКоманды.ВерсияСоглашенияДляСравнения) Тогда
		ПоказатьПредупреждение(,Нстр("ru = 'Нет версий соглашений для сравнения'")); // первая версия и еще не записана
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.СравнениеВерсийГрафиков.Форма.Форма", ПараметрыКоманды, Форма,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры

Функция ДоступностьПоказатьИсториюИзмененияЗначения(ИмяКолонки, ОписаниеГрафика) Экспорт
	
	ИменаКолонок = Новый Массив;
	
	Для каждого ЭлементОписания Из ОписаниеГрафика Цикл	
		Секция = ЭлементОписания.Значение;
		ИменаКолонок.Добавить("ГрафикРасчетов" + Секция.КолонкаПриход);
		ИменаКолонок.Добавить("ГрафикРасчетов" + Секция.КолонкаРасход);		
	КонецЦикла;
	
	Возврат ИменаКолонок.Найти(ИмяКолонки) <> Неопределено;
	
КонецФункции
#КонецОбласти
#КонецОбласти

#Область ПодключаемыеОбработчики

Процедура Подключаемый_ВыполнитьКомандуСогласования(Форма, Команда) Экспорт

	Объект = Форма.Объект;
	
	Если Команда.Имя = "ПринятьКСогласованию" Тогда
		
		ДействияСогласованиеУХКлиент.ПринятьКСогласованию(Форма, Объект.Ссылка);

	ИначеЕсли Команда.Имя = "ИсторияСогласования" Тогда
		
		ДействияСогласованиеУХКлиент.ИсторияСогласования(Форма, Объект.Ссылка);
		
	ИначеЕсли Команда.Имя = "СогласоватьДокумент" Тогда
		
		ДействияСогласованиеУХКлиент.СогласоватьДокумент(Форма);
		
	ИначеЕсли Команда.Имя = "ОтменитьСогласование" Тогда
		ДействияСогласованиеУХКлиент.ОтменитьСогласование(Форма);
		
	ИначеЕсли Команда.Имя = "МаршрутСогласования" Тогда
		ДействияСогласованиеУХКлиент.МаршрутСогласования(Форма, Объект.Ссылка);
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорыФормаСписка_ЭлементПриИзменении(Форма, Элемент) Экспорт
	
	Если Элемент.Имя = "ВидДоговораУХ" Тогда
		ДоговорыФормаСписка_ОтборВидДоговораПриИзменении(Форма, Элемент);
	ИначеЕсли Элемент.Имя = "СостояниеДоговораУХ" Тогда
		ДоговорыФормаСписка_ОтборСостояниеДоговораПриИзменении(Форма, Элемент);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорыФормаСписка_ОтборВидДоговораПриИзменении(Форма, Элемент) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ВидДоговораУХ") Тогда
		ВыбранныйВидДоговора = Форма["ВидДоговораУХ"];
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"ВидДоговораУХ", 
			ВыбранныйВидДоговора, 
			ВидСравненияКомпоновкиДанных.Равно,
			, 
			ЗначениеЗаполнено(ВыбранныйВидДоговора));
	Иначе
		// Поле не найдено.
	КонецЕсли;
КонецПроцедуры

Процедура ДоговорыФормаСписка_ОтборСостояниеДоговораПриИзменении(Форма, Элемент) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СостояниеДоговораУХ") Тогда
		
		ВыбранноеСостояние = Форма["СостояниеДоговораУХ"];
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			Форма.Список, 
			"Состояние", 
			ВыбранноеСостояние, 
			ВидСравненияКомпоновкиДанных.Равно,
			, 
			ЗначениеЗаполнено(ВыбранноеСостояние));
	Иначе
		// Поле не найдено.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Обработчик команды "Склонения" формы объекта склонения.
//
// Параметры:
//  Представление   - Строка - Строка для склонения.
//  ЗапретРедактирования - Булево - форма склонений открывается в режиме ТолькоПросмотр.
//  ПараметрыСклонения - Структура - см. СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения() 
//
Процедура ПоказатьСклонение(Форма, Представление, ЗапретРедактирования, ПараметрыСклонения)
	
	СтруктураСклонения = ДоговорыКонтрагентовФормыУХВызовСервера.ПросклонятьПредставлениеПоВсемПадежам(Представление, ПараметрыСклонения);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Представление", Представление);
	ДополнительныеПараметры.Вставить("Форма", Форма);
	Если ЗапретРедактирования Тогда
		ДополнительныеПараметры.Вставить("ЗапретРедактирования", Истина);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьФормуСклоненияЗавершение", ЭтотОбъект, ДополнительныеПараметры);

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Склонения",             СтруктураСклонения);
	СтруктураПараметров.Вставить("Представление",         Представление);
	СтруктураПараметров.Вставить("ПараметрыСклонения",    ПараметрыСклонения);
	СтруктураПараметров.Вставить("ИзмененоПредставление", Ложь);
	
	Если ЗапретРедактирования Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.Склонения", СтруктураПараметров, Форма, , , , Оповещение);
	
КонецПроцедуры

Процедура ПоказатьСклоненияРуководительКонтрагента(Форма, Команда) Экспорт
		
КонецПроцедуры

Процедура ПоказатьСклоненияДолжностьРуководителяКонтрагента(Форма, Команда) Экспорт
		
	Объект = Форма.Объект;
	
	Форма[Форма.ТекущийРеквизитСклонения] = Форма.Склонения;
	Форма["ИзмененоПредставление" + Сред(Форма.ТекущийРеквизитСклонения, 10)] = Форма.ИзмененоПредставление;
	
	Форма.ТекущийРеквизитСклонения         = "СклоненияДолжностьРуководителяКонтрагента";
	Форма.Склонения             = Форма[Форма.ТекущийРеквизитСклонения];
	Форма.ИзмененоПредставление = Форма.ИзмененоПредставлениеДолжностьРуководителяКонтрагента;
	Если Форма.ИзмененоПредставление Тогда
		ДоговорыКонтрагентовФормыУХВызовСервера.ЗаписатьВРегистрСклонения(
			ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"),
			Объект.ДолжностьРуководителяКонтрагента,
			Форма.Склонения);
	КонецЕсли;
	
	ЗапретРедактирования = Не ДоговорыКонтрагентовФормыУХВызовСервера.ПравоНаРедактирование(Ложь);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПоказатьСклонение(Форма, Объект.ДолжностьРуководителяКонтрагента, ЗапретРедактирования, ПараметрыСклонения);	
	
КонецПроцедуры

// Завершение процедуры ПоказатьСклонение.
// Вызывается для реквизитов, чьи склонения привязаны к объектам вне договора: ФИО и должности руководителя организации.
//
Процедура ОткрытьФормуСклоненияЗавершение(РезультатРедактирования, ДополнительныеПараметры) Экспорт

	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	Если РезультатРедактирования <> Неопределено
	   И РезультатРедактирования.Именительный = ДополнительныеПараметры.Представление
	   И Не ДополнительныеПараметры.Свойство("ЗапретРедактирования") Тогда
	   
		СтруктураСклонения = Новый ФиксированнаяСтруктура(РезультатРедактирования);
		Если Форма.ТекущийРеквизитСклонения = "СклоненияДолжностьРуководителяКонтрагента"
		 Или Форма.ТекущийРеквизитСклонения = "СклоненияРуководительКонтрагента" Тогда // только получаем результат
		 
			Форма[Форма.ТекущийРеквизитСклонения] = СтруктураСклонения;
			Форма["ИзмененоПредставление" + Сред(Форма.ТекущийРеквизитСклонения, 10)] = Истина;
			Модифицированность = Истина;
		 
	 	Иначе // получаем результат и фиксируем в регистре

			ДоговорыКонтрагентовФормыУХВызовСервера.ЗаписатьВРегистрСклонения(
				Объект[Форма.ТекущийРеквизитСклонения],
				ДополнительныеПараметры.Представление,
				СтруктураСклонения);
				
		КонецЕсли;
		
	КонецЕсли;	
	
	// Закончили редактирование объекта склонения внешнего по отношению к данной форме.
	// Возвращаемся к редактированию склонений реквизита формы.
	Форма.ТекущийРеквизитСклонения         = "СклоненияРуководительКонтрагента";
	Форма.Склонения             = Форма[Форма.ТекущийРеквизитСклонения];
	Форма.ИзмененоПредставление = Форма.ИзмененоПредставлениеРуководительКонтрагента;

КонецПроцедуры

Процедура ПоказатьСклоненияРуководитель(Форма, Команда) Экспорт
		
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.Руководитель) Тогда
		Возврат;
	КонецЕсли;
	
	Форма[Форма.ТекущийРеквизитСклонения] = Форма.Склонения;
	Форма["ИзмененоПредставление" + Сред(Форма.ТекущийРеквизитСклонения, 10)] = Форма.ИзмененоПредставление;
	Форма.ТекущийРеквизитСклонения = "Руководитель";
	
	РеквизитыСклонения = ДоговорыКонтрагентовФормыУХВызовСервера.РеквизитыСклоненияРуководителя(Объект.Руководитель);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();
	ПараметрыСклонения.ЭтоФИО = Истина;
	ПараметрыСклонения.Пол    = РеквизитыСклонения.Пол;
	
	ПоказатьСклонение(Форма, РеквизитыСклонения.ФИО, РеквизитыСклонения.ТолькоПросмотр, ПараметрыСклонения);
	
КонецПроцедуры

Процедура ПоказатьСклоненияДолжностьРуководителя(Форма, Команда) Экспорт
		
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(Объект.ДолжностьРуководителя) Тогда
		Возврат;
	КонецЕсли;
	
	Форма[Форма.ТекущийРеквизитСклонения] = Форма.Склонения;
	Форма["ИзмененоПредставление" + Сред(Форма.ТекущийРеквизитСклонения, 10)] = Форма.ИзмененоПредставление;
	Форма.ТекущийРеквизитСклонения = "ДолжностьРуководителя";
	
	ПредставлениеОбъекта = Строка(Объект.ДолжностьРуководителя);
	ЗапретРедактирования = Не ДоговорыКонтрагентовФормыУХВызовСервера.ПравоНаРедактирование(Ложь);
	ПараметрыСклонения = СклонениеПредставленийОбъектовКлиентСервер.ПараметрыСклонения();

	ПоказатьСклонение(Форма,ПредставлениеОбъекта, ЗапретРедактирования, ПараметрыСклонения);
	
КонецПроцедуры

Процедура ОткрытьКонсольПроцесса(Форма, Команда) Экспорт
	
	Объект = Форма.Объект;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Режим", "УправлениеПроизвольнымПроцессом");
	СтруктураПараметров.Вставить("ШаблонПроцесса", Объект.ШаблонПроцесса);
	ОткрытьФорму("Обработка.КонсольУправленияПроцессом.Форма", СтруктураПараметров, Форма);
КонецПроцедуры

Процедура ОткрытьДокументГрафикРасчетовСЗаписьюПриМодифицированности(Форма) Экспорт
	
	Если Форма.Модифицированность Тогда
		
		ТекстВопроса = НСтр("ru = 'Документ еще не записан.
			|Ввод графика расчетов возможен только после записи.
			|Данные будут записаны.'");
			
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Форма", Форма);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьДокументГрафикРасчетовПродолжение", ЭтотОбъект, ДополнительныеПараметры);
				
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена);
		
		Возврат;
	КонецЕсли;
	
	ОткрытьДокументГрафикРасчетов(Форма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументГрафикРасчетовПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Форма = Параметры.Форма;
		Форма.Записать();
		ОткрытьДокументГрафикРасчетов(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьДокументГрафикРасчетов(Форма) Экспорт
	
	ОбъектРасчетов = Форма.Объект.Ссылка;
	АктуальнаяВерсияГрафикаРасчетов = ДоговорыКонтрагентовФормыУХВызовСервера.АктуальнаяВерсияГрафикаРасчетов(ОбъектРасчетов);
	
	Если ЗначениеЗаполнено(АктуальнаяВерсияГрафикаРасчетов) Тогда
		
		ПоказатьЗначение(,АктуальнаяВерсияГрафикаРасчетов);
		
	Иначе
			
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ЗначенияЗаполнения", Новый Структура("ОбъектРасчетов", ОбъектРасчетов));
		
		ОткрытьФорму("Документ.ГрафикРасчетовСПокупателемПоставщиком.ФормаОбъекта", ПараметрыОткрытия, Форма);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСКовенантами

// Процедура - Показывает отчет по ковенантам по документу кредита
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.ВерсияСоглашенияКредит 
//  ПараметрыОтбора	 - Структура - структура дополнительных отборов отчета
//
Процедура ОткрытьОтчетПоКовенантамПоКредиту(ДокументСсылка, ПараметрыОтбора = Неопределено) Экспорт
		
	ПараметрыФормы = Новый Структура;
	СтруктураОтбора = ДоговорыКонтрагентовФормыУХВызовСервера.ОтборОтчетаПоКовенантамПоКредиту(ДокументСсылка);
	Если ПараметрыОтбора <> Неопределено Тогда
		Для каждого Элемент Из ПараметрыОтбора Цикл
			СтруктураОтбора.Вставить(Элемент.Ключ, Элемент.Значение);
		КонецЦикла;
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("Отбор", СтруктураОтбора);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ОткрытьФорму("Отчет.ОтчетПоКовенантам.Форма", ПараметрыФормы);
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура ОбработкаОповещенияСозданиеФайлаДоговора(Форма, ФайлДоговора)
	
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ФайлДоговора) Тогда
		// В договоре уже указан какой-то файл договора, не меняем его.
		Возврат;
	КонецЕсли;

	Объект.ФайлДоговора = ФайлДоговора;
	
	Если НЕ Форма.Модифицированность Тогда
		// Пользователь договор не менял, записываем его самостоятельно.
		Форма.Записать();
	КонецЕсли;	
	
	// Сообщим форме редактирования текста договора, что мы запомнили ссылку на файл, 
	// и сам объект справочника ДоговорыКонтрагентов изменять не требуется,
	// чтобы при интерактивной работе пользователя не возникало сообщений об изменении
	// объекта в другом сеансе из-за записи изменений элемента справочника.
	Оповестить("ДоговорыКонтрагентов_СозданиеФайлаОбработаноОсновнойФормойДоговора", Объект.Ссылка);

КонецПроцедуры

Процедура ОткрытьНовыйВстречныйДоговор(Форма)

	Если Форма.Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Договор еще не записан.
			|Создание встречного договора возможно только после записи.
			|Данные будут записаны.'");
			
		ПараметрыФормы = Новый Структура("Форма", Форма);
		ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНовыйВстречныйДоговорПродолжение", ЭтотОбъект, ПараметрыФормы);
			
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена,,КодВозвратаДиалога.Отмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВстречногоДоговора(Форма)

КонецПроцедуры

Процедура ОткрытьНовыйВстречныйДоговорПродолжение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Параметры.Форма.Записать();
		ОткрытьФормуВстречногоДоговора(Параметры.Форма);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОткрытьФормуВстречногоДоговора(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ПараметрыОткрытия = Новый Структура("ЗначенияЗаполнения", Новый Структура("ВстречныйДоговор", Объект.Ссылка));
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыОткрытия, Элементы.ВстречныйДоговор, Истина);
	
КонецПроцедуры

Процедура ОпределитьПараметрыВалютногоКонтроля(Форма)
	
	Объект = Форма.Объект;
	ДоговорОбъект = Форма.ДоговорОбъект;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Объект, "ТребуетсяПостановкаНаУчетВалютногоКонтроля") Тогда
		Объект.ТребуетсяПостановкаНаУчетВалютногоКонтроля = Форма.ДоговорСНерезидентом 
			И ДоговорыКонтрагентовФормыУХВызовСервера.ТреубетсяПостановкаКонтрактаНаУчет(Объект.ВидДоговораУХ, Объект.Сумма, Объект.ВалютаВзаиморасчетов, ДоговорОбъект.Дата);		
	КонецЕсли;	
	
КонецПроцедуры

Процедура РуководительКонтрагентаНачалоВыбораЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	Объект = Форма.Объект;
	
	МассивФИОДолжность = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РезультатВыбора.Представление, ", ");
	Если МассивФИОДолжность.Количество() > 0 Тогда
		Объект.РуководительКонтрагента = МассивФИОДолжность[0];
	КонецЕсли;
	Если МассивФИОДолжность.Количество() > 1 Тогда
		Объект.ДолжностьРуководителяКонтрагента = МассивФИОДолжность[1];
	КонецЕсли;
	ПриИзмененииПредставленияРуководителяКонтрагента(Форма);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяКонтрагентаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСоСклоняемымиРеквизитами = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"); // любой договор
	
	Форма = ДополнительныеПараметры.Форма;
	
	Форма.СклоненияДолжностьРуководителяКонтрагента = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	Форма.ИзмененоПредставлениеДолжностьРуководителяКонтрагента = Истина;
	Если Форма.ТекущийРеквизитСклонения = "СклоненияДолжностьРуководителяКонтрагента" Тогда
		Форма.Склонения = Форма.Склонения;
		Форма.ИзмененоПредставление = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РуководительКонтрагентаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Форма = ДополнительныеПараметры.Форма;
	
	Если Результат.Статус = "Ошибка" Тогда
		ОбщегоНазначенияКлиент.СообщитьПользователю(Результат.ПодробноеПредставлениеОшибки);
		Возврат;
	ИначеЕсли Результат.Статус <> "Выполнено" Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектСоСклоняемымиРеквизитами = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка"); // любой договор
	
	Форма.СклоненияРуководительКонтрагента = Новый ФиксированнаяСтруктура(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
	Форма.ИзмененоПредставлениеРуководительКонтрагента = Истина;
	Если Форма.ТекущийРеквизитСклонения = "СклоненияРуководительКонтрагента" Тогда
		Форма.Склонения = Форма.Склонения;
		Форма.ИзмененоПредставление = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИдентификаторПлатежа(Форма)
	
	ВерсияСоглашенияОбъект = Форма.Объект;
	ДоговорОбъект = Форма.ДоговорОбъект;
	
	Если УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорСПокупателем(ВерсияСоглашенияОбъект.ВидДоговораУХ)
		И Не ЗначениеЗаполнено(ВерсияСоглашенияОбъект.ГосударственныйКонтракт)
		И ЗначениеЗаполнено(ДоговорОбъект.Номер) И ЗначениеЗаполнено(ДоговорОбъект.Дата) Тогда
		
		ПараметрыДоговора = Новый Структура("Ссылка,Номер,Дата", ДоговорОбъект.Ссылка, ДоговорОбъект.Номер, ДоговорОбъект.Дата);
		ИдентификаторПлатежа = ДоговорыКонтрагентовФормыУХВызовСервера.ПолучитьИдентификаторПлатежаНаСервере(ПараметрыДоговора);
		Если Не ПустаяСтрока(ИдентификаторПлатежа) Тогда
			ВерсияСоглашенияОбъект.ИдентификаторПлатежа = ИдентификаторПлатежа;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьНаименованиеДоговора(Форма)
	
	Договор = Форма.ДоговорОбъект;
	
	ТекстНаименования = Договор.Наименование;
	
	НовыеРеквизитыДоговораСтрокой = ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.РеквизитыДоговораСтрокой(Договор.Номер, Договор.Дата);
	
	Если ПустаяСтрока(ТекстНаименования) Или ТекстНаименования = Форма.НаименованиеПоУмолчанию Тогда // См. ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.НаименованиеПоУмолчаниюБезРеквизитов()
		ТекстНаименования = НовыеРеквизитыДоговораСтрокой;
	ИначеЕсли СтрНайти(ТекстНаименования, Форма.РеквизитыДоговораСтрокой) > 0 
		И СтрНайти(ТекстНаименования, НовыеРеквизитыДоговораСтрокой) = 0 Тогда
		ТекстНаименования = СтрЗаменить(ТекстНаименования, Форма.РеквизитыДоговораСтрокой, НовыеРеквизитыДоговораСтрокой);
	КонецЕсли;
	
	Форма.РеквизитыДоговораСтрокой = НовыеРеквизитыДоговораСтрокой;
	
	Договор.Наименование = ТекстНаименования;
	
КонецПроцедуры

Процедура ОткрытьСведенияОбОбеспечении(Форма, НаправлениеПредоставления)
	
	Объект = Форма.Объект;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("БазовыйДоговор", Объект.ДоговорКонтрагента);
	СтруктураОтбора.Вставить("ВидСвязи", НаправлениеПредоставления);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Отбор", СтруктураОтбора);
	
	ПараметрыОповещения = Новый Структура("Форма", Форма);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьСведенияОбОбеспеченииПродолжение", ЭтотОбъект, ПараметрыОповещения);
	
	ОткрытьФорму("РегистрСведений.СвязанныеДоговоры.ФормаСписка", 
		СтруктураПараметров, 
		Форма,,,,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

Процедура ОткрытьСведенияОбОбеспеченииПродолжение(Результат, Параметры) Экспорт
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УправлениеФормойВерсияСоглашения(Параметры.Форма);
	
КонецПроцедуры

Процедура ОчиститьПризнакиАгента(Форма)
	
	Объект = Форма.Объект;
	
	Если НЕ Объект.ПлатежныйАгент Тогда
		Объект.ПризнакАгента = Неопределено;
		Объект.ТелефонПоставщика             = "";
		Объект.ТелефонПлатежногоАгента       = "";
	КонецЕсли; 
	
	ЭтоПлатежныйАгент  = (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйАгент")) ИЛИ (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.ПлатежныйСубагент"));
	ЭтоБанковскийАгент = (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйАгент")) ИЛИ (Объект.ПризнакАгента = ПредопределенноеЗначение("Перечисление.ПризнакиАгента.БанковскийПлатежныйСубагент"));
	
	Если НЕ ЭтоБанковскийАгент Тогда
		Объект.НаименованиеОператораПеревода = "";
		Объект.ИННОператораПеревода          = "";
		Объект.АдресОператораПеревода        = "";
		Объект.ТелефонОператораПеревода      = "";
	КонецЕсли;
	
	Если НЕ ЭтоПлатежныйАгент Тогда
		Объект.ТелефонОператораПоПриемуПлатежей = "";
		Объект.ОперацияПлатежногоАгента         = "";
	КонецЕсли; 
КонецПроцедуры 

Процедура СформироватьНаименованиеВерсииСоглашения(Форма)

	Объект = Форма.Объект;
	Объект.НаименованиеВерсии = РаботаСДоговорамиКонтрагентовУХКлиентСервер.РеквизитыВерсииСоглашенияСтрокой(Объект.НомерДополнительногоСоглашения, Объект.Дата);

КонецПроцедуры

Процедура ИзменитьПроизводственныеКалендариЗавершение(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	Объект = Параметры.Форма.Объект;
	Объект.ПроизводственныеКалендари.Очистить();
	Для Каждого ТекКалендарь из Результат Цикл
		НоваяСтрока = Объект.ПроизводственныеКалендари.Добавить();
		НоваяСтрока.ПроизводственныйКалендарь = ТекКалендарь;
	КонецЦикла;
	
	Параметры.Форма.Модифицированность = Истина;
	
	ДоговорыКонтрагентовФормыУХКлиентСервер.УстановитьТекстНадписиПроизводственныеКалендари(Параметры.Форма);	
	
КонецПроцедуры

#КонецОбласти
#КонецОбласти

#Область ДоговорыКонтрагентов
Функция ОткрытьНовуюВерсиюСоглашенияПоДоговору(ДоговорКонтрагента) Экспорт	
	Данные = ДоговорыКонтрагентовФормыУХВызовСервера.ДанныеДляОткрытияНовойВерсииСоглашенияПоДоговору(ДоговорКонтрагента);
	ОткрытьФорму(Данные.ИмяФормы, Данные.Параметры,,Данные.Уникальность);
КонецФункции

Процедура ОбработатьОповещенияДоговораКонтрагента(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	ОбработатьОповещениеЗаписиВерсииСоглашенияДоговора(Форма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры	

Процедура ОбработатьОповещенияДоговораЛизинга(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	ОбработатьОповещениеЗаписиВерсииСоглашенияДоговора(Форма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры	

Процедура ОбработатьОповещенияДоговораКредитаИДепозита(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	ОбработатьОповещениеЗаписиВерсииСоглашенияДоговора(Форма, ИмяСобытия, Параметр, Источник);
КонецПроцедуры	

Процедура ОбработатьОповещениеЗаписиВерсииСоглашенияДоговора(Форма, ИмяСобытия, Параметр, Источник)
	
	Объект = Форма.Объект;
	
	Если ИмяСобытия = "Запись_ДоговорыКонтрагентов" И Объект.Ссылка = Источник Тогда
		Если НЕ Форма.Модифицированность Тогда
			Форма.Прочитать();
			Если ЗначениеЗаполнено(Объект.ВерсияСоглашения) Тогда
				// нужно открыть версию вместо договора
				Форма.Закрыть();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры	
#КонецОбласти

#Область ПараметрыОпераций
Процедура ОткрытьПараметрыОперацийГрафика(Форма, ПараметрыКоманды) Экспорт
	
	Оповещение = Новый ОписаниеОповещения("ЗавершитьНастройкуОпераций", Форма); 
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОперацийГрафика", ПараметрыКоманды, Форма,,,,Оповещение, 
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры
#КонецОбласти