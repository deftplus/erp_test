///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Повторно используемые значения для механизмов
//	- партионного учета версии 2.2
//	- расчета себестоимости
//	- закрытия месяца.
//
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область ТипыЗаписейПартий

// Возвращает правила заполнения полей в первичных движениях документов по регистру "Себестоимость товаров".
//
// Параметры:
//	ИмяДокументаДляОтбора - Строка - имя документа для отбора строк таблицы; если не указано, то выводится таблица по всем документам
//
// Возвращаемое значение:
//	ТаблицаЗначений - правила заполнения записей, полученные из макета регистра накопления СебестоимостьТоваров
//
Функция ПравилаЗаполненияПоляТипЗаписи(ИмяДокументаДляОтбора = "") Экспорт
	
	ТаблицаПравил = Новый ТаблицаЗначений;
	ТаблицаПравил.Колонки.Добавить("ИмяДокумента", 				 Новый ОписаниеТипов("Строка"));
	ТаблицаПравил.Колонки.Добавить("ПустоеЗначениеРегистратора", Новый ОписаниеТипов(РасчетСебестоимостиУниверсальныеАлгоритмы.ОписаниеТиповДокументов()));
	ТаблицаПравил.Колонки.Добавить("ХозяйственнаяОперация",   	 Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	ТаблицаПравил.Колонки.Добавить("ПоложительноеКоличество", 	 Новый ОписаниеТипов("Булево, NULL")); // допустимо Неопределено
	ТаблицаПравил.Колонки.Добавить("ТипЗаписиПриход", 		  	 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаписейПартий, NULL")); // допустимо Неопределено
	ТаблицаПравил.Колонки.Добавить("ТипЗаписиРасход", 		  	 Новый ОписаниеТипов("ПеречислениеСсылка.ТипыЗаписейПартий, NULL")); // допустимо Неопределено
	ТаблицаПравил.Колонки.Добавить("ДокументИсточникВПриходе", 	 Новый ОписаниеТипов("Булево"));
	ТаблицаПравил.Колонки.Добавить("ДокументИсточникВРасходе", 	 Новый ОписаниеТипов("Булево"));
	ТаблицаПравил.Колонки.Добавить("КорПартияВРасходе", 		 Новый ОписаниеТипов("Булево"));
	
	#Область АвансовыйОтчет
	
	ТекущийДокумент = Метаданные.Документы.АвансовыйОтчет.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТ
	#Область АктВыполненныхВнутреннихРабот
	
	ТекущийДокумент = Метаданные.Документы.АктВыполненныхВнутреннихРабот.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуПодразделениями;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемПередачаРаботМеждуФилиалами;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеРабот;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ПеремещениеОбособленно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область АктВыполненныхРабот
	
	ТекущийДокумент = Метаданные.Документы.АктВыполненныхРабот.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВводОстатков
	
	ТекущийДокумент = Метаданные.Документы.ВводОстатков.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВводОстатковТоваров
	
	ТекущийДокумент = Метаданные.Документы.ВводОстатковТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВнутреннееПотреблениеТоваров
	
	ТекущийДокумент = Метаданные.Документы.ВнутреннееПотреблениеТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатациюБУНУ;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	//++ НЕ УТ
	#Область ВозвратМатериаловИзПроизводства
	
	ТекущийДокумент = Метаданные.Документы.ВозвратМатериаловИзПроизводства.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ПотреблениеПроизводство;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	//-- Локализация
	
	//++ НЕ УТКА
	#Область ВозвратСырьяДавальцу
	
	ТекущийДокумент = Метаданные.Документы.ВозвратСырьяДавальцу.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДавальцу;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	//++ НЕ УТ
	#Область ВозвратСырьяОтПереработчика
	
	ТекущийДокумент = Метаданные.Документы.ВозвратСырьяОтПереработчика.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтПереработчика;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ВозвратТоваровМеждуОрганизациями
	
	ТекущийДокумент = Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровМеждуОрганизациями;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализации;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализацииВозвратНаДругойСклад;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ВозвратНаДругойСклад;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратПоКомиссииМеждуОрганизациями;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВозвратТоваровОтКлиента
	
	ТекущийДокумент = Метаданные.Документы.ВозвратТоваровОтКлиента.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТарыОтКлиентаПрошлыхПериодов;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТары;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноПереданнойТарыВозвратНаДругойСклад;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализации;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализацииВозвратНаДругойСклад;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноВозвратНаДругойСклад;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ВозвратНаДругойСклад;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтРозничногоПокупателя;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ВозвратНаДругойСклад;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтКомиссионера;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВозвратТоваровПоставщику
	
	ТекущийДокумент = Метаданные.Документы.ВозвратТоваровПоставщику.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровКомитенту;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыкупПринятыхНаХранениеТоваров
	
	ТекущийДокумент = Метаданные.Документы.ВыкупПринятыхНаХранениеТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровПереданныхВПроизводство;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупПринятыхНаХранениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровПереданныхНаХранение;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ВыкупТоваровХранителем
	
	ТекущийДокумент = Метаданные.Документы.ВыкупТоваровХранителем.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыкупТоваровХранителем;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	//++ НЕ УТ
	#Область ВыпускПродукции
	
	ТекущийДокумент = Метаданные.Документы.ВыпускПродукции.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииВПодразделение;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СписаниеНаРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	//-- Локализация
	
	//++ НЕ УТ
	#Область ДвижениеПродукцииИМатериалов
	
	ТекущийДокумент = Метаданные.Документы.ДвижениеПродукцииИМатериалов.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзКладовой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВПроизводство;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаМатериаловВКладовую;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратМатериаловИзКладовой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатов;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеПолуфабрикатовМеждуФилиалами;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ПеремещениеОбособленно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	//++ Локализация
	#Область ЗаявлениеОВвозеТоваров
	
	ТекущийДокумент = Метаданные.Документы.ЗаявлениеОВвозеТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаСтоимости;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	#Область ИсправлениеРазвернутогоСальдоТоваровОрганизаций
	
	ТекущийДокумент = Метаданные.Документы.ИсправлениеРазвернутогоСальдоТоваровОрганизаций.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	#Область КорректировкаВидаДеятельностиНДС
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаВидаДеятельностиНДС.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	#Область КорректировкаНазначенияТоваров
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаНазначенияТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	#Область КорректировкаНалогообложенияНДСПартийТоваров
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаНалогообложенияНДСПартийТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	//++ Локализация
	#Область КорректировкаОбособленногоУчетаЗапасов
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаОбособленногоУчетаЗапасов.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаОбособленногоУчета;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	#Область КорректировкаПриобретения
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаПриобретения.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаСтоимости;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Потребление;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КорректировкаПриобретенияПрошлогоПериода;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемкаПодПринципала;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КорректировкаРеализации
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаРеализации.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКомиссионногоТовара;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализации;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область КорректировкаРегистров
	
	ТекущийДокумент = Метаданные.Документы.КорректировкаРегистров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	#Область МаркировкаТоваровГИСМ
	
	ТекущийДокумент = Метаданные.Документы.МаркировкаТоваровГИСМ.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	//++ НЕ УТКА
	#Область НачальныеОстаткиНЗППоПартиямПроизводства
	
	ТекущийДокумент = Метаданные.Документы.НачальныеОстаткиНЗППоПартиямПроизводства.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВводОстатковЗатратПартийПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	//++ Локализация
	//++ НЕ УТ
	#Область НачислениеОценочныхОбязательствПоОтпускам
	
	ТекущийДокумент = Метаданные.Документы.НачислениеОценочныхОбязательствПоОтпускам.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	//-- Локализация
	
	#Область ОприходованиеИзлишковТоваров
	
	ТекущийДокумент = Метаданные.Документы.ОприходованиеИзлишковТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтгрузкаТоваровСХранения
	
	ТекущийДокумент = Метаданные.Документы.ОтгрузкаТоваровСХранения.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтгрузкаПринятыхСПравомПродажиТоваровСХранения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	//++ НЕ УТ
	#Область ОтражениеЗарплатыВФинансовомУчете
	
	ТекущийДокумент = Метаданные.Документы.ОтражениеЗарплатыВФинансовомУчете.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	//-- Локализация
	
	//++ НЕ УТКА
	#Область ОтчетДавальцу
	
	ТекущийДокумент = Метаданные.Документы.ОтчетДавальцу.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	#Область ОтчетКомиссионера
	
	ТекущийДокумент = Метаданные.Документы.ОтчетКомиссионера.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ВозвратБезДокументаИсточника;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтчетКомиссионераОСписании
	
	ТекущийДокумент = Метаданные.Документы.ОтчетКомиссионераОСписании.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтчетКомитентуОСписании
	
	ТекущийДокумент = Метаданные.Документы.ОтчетКомитентуОСписании.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтчетОРозничныхВозвратах
	
	ТекущийДокумент = Метаданные.Документы.ОтчетОРозничныхВозвратах.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеПоВозврату;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноРеализации;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиентаПрошлыхПериодов;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтчетОРозничныхПродажах
	
	ТекущийДокумент = Метаданные.Документы.ОтчетОРозничныхПродажах.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияВРозницу;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКомиссионногоТовара;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТ
	#Область ОтчетПереработчика
	
	ТекущийДокумент = Метаданные.Документы.ОтчетПереработчика.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СписаниеНаДругиеПартии;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ОтчетПоКомиссииМеждуОрганизациями
	
	ТекущийДокумент = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионера;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ВозвратБезДокументаИсточника;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтчетПоКомиссииМеждуОрганизациямиОСписании
	
	ТекущийДокумент = Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомиссионераОСписании;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОтчетКомитентуОСписании;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТКА
	#Область ПередачаДавальцу
	
	ТекущийДокумент = Метаданные.Документы.ПередачаДавальцу.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаДавальцу;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	//++ Локализация
	//++ НЕ УТ
	#Область ПередачаМатериаловВПроизводство
	
	ТекущийДокумент = Метаданные.Документы.ПередачаМатериаловВПроизводство.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	//-- Локализация
	
	//++ НЕ УТ
	#Область ПередачаСырьяПереработчику
	
	ТекущийДокумент = Метаданные.Документы.ПередачаСырьяПереработчику.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПереработчику;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ПередачаТоваровМеждуОрганизациями
	
	ТекущийДокумент = Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссиюВДругуюОрганизацию;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПередачаТоваровХранителю
	
	ТекущийДокумент = Метаданные.Документы.ПередачаТоваровХранителю.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	#Область ПеремаркировкаТоваровГИСМ
	
	ТекущийДокумент = Метаданные.Документы.ПеремаркировкаТоваровГИСМ.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	//++ Локализация
	//++ НЕ УТ
	#Область ПеремещениеМатериаловВПроизводстве
	
	ТекущийДокумент = Метаданные.Документы.ПеремещениеМатериаловВПроизводстве.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ПотреблениеПроизводство;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	//-- Локализация
	
	#Область ПеремещениеТоваров
	
	ТекущийДокумент = Метаданные.Документы.ПеремещениеТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеремещениеТоваровМеждуФилиалами;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутреннееПоступлениеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ПеремещениеОбособленно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПересортицаТоваров
	
	ТекущийДокумент = Метаданные.Документы.ПересортицаТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПересортицаТоваровСПереоценкой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПорчаТоваров
	
	ТекущийДокумент = Метаданные.Документы.ПорчаТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПорчаТоваровСПереоценкой;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПередачаТоваровХранителю
	
	ТекущийДокумент = Метаданные.Документы.ПередачаТоваровХранителю.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаХранениеСПравомПродажи;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТ
	#Область ПоступлениеОтПереработчика
	
	ТекущийДокумент = Метаданные.Документы.ПоступлениеОтПереработчика.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтПереработчика;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	//++ НЕ УТКА
	#Область ПоступлениеСырьяОтДавальца
	
	ТекущийДокумент = Метаданные.Документы.ПоступлениеСырьяОтДавальца.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПоступлениеОтДавальца;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	#Область ПоступлениеТоваровНаСклад
	
	ТекущийДокумент = Метаданные.Документы.ПоступлениеТоваровНаСклад.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСПоступлениеИзТоваровВПути;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуПоступлениеИзТоваровВПути;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаПоступлениеИзТоваровВПути;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСНеотфактурованнаяПоставка;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаНеотфактурованнаяПоставка;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПоступлениеТоваровОтХранителя
	
	ТекущийДокумент = Метаданные.Документы.ПоступлениеТоваровОтХранителя.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратОтХранителя;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПриобретениеТоваровУслуг
	
	ТекущийДокумент = Метаданные.Документы.ПриобретениеТоваровУслуг.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемкаПодПринципала;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровПоставщику;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПриобретениеУслугПрочихАктивов
	
	ТекущийДокумент = Метаданные.Документы.ПриобретениеУслугПрочихАктивов.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПриемкаТоваровНаХранение
	
	ТекущийДокумент = Метаданные.Документы.ПриемкаТоваровНаХранение.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаХранениеСПравомПродажи;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТ
	#Область ПроизводствоБезЗаказа
	
	ТекущийДокумент = Метаданные.Документы.ПроизводствоБезЗаказа.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДополнениеПрошлыйПериод;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ДополнениеПрошлыйПериод;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СписаниеНаДругиеПартии;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДополнениеПрошлыйПериод;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноСписанияНаДругиеПартии;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область ПрочееОприходованиеТоваров
	
	ТекущийДокумент = Метаданные.Документы.ПрочееОприходованиеТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОприходованиеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СторноСписанияНаРасходы;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ВозвратПрошлыхПериодов;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПрочиеДоходыРасходы
	
	ТекущийДокумент = Метаданные.Документы.ПрочиеДоходыРасходы.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТ
	#Область РаспределениеВозвратныхОтходов
	
	ТекущийДокумент = Метаданные.Документы.РаспределениеВозвратныхОтходов.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаПродукцииИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	//++ НЕ УТ
	#Область РаспределениеПроизводственныхЗатрат
	
	ТекущийДокумент = Метаданные.Документы.РаспределениеПроизводственныхЗатрат.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СписаниеНаДругиеПартии;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеКомиссионныхТоваров;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТ
	
	#Область РаспределениеРасходовБудущихПериодов
	
	ТекущийДокумент = Метаданные.Документы.РаспределениеРасходовБудущихПериодов.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасходныйКассовыйОрдер
	
	ТекущийДокумент = Метаданные.Документы.РасходныйКассовыйОрдер.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РасчетСебестоимостиТоваров
	
	ТекущийДокумент = Метаданные.Документы.РасчетСебестоимостиТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область РеализацияТоваровУслуг
	
	ТекущийДокумент = Метаданные.Документы.РеализацияТоваровУслуг.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиенту;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПереданнойВозвратнойТары;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКомиссионногоТовара;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияКлиентуРеглУчет;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияБезПереходаПраваСобственности;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		НовоеПравило.КорПартияВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СборкаТоваров
	
	ТекущийДокумент = Метаданные.Документы.СборкаТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СборкаТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СписаниеНаДругиеПартии;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РазборкаТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СписаниеНаДругиеПартии;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноСписанияНаДругиеПартии;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СписаниеБезналичныхДенежныхСредств
	
	ТекущийДокумент = Метаданные.Документы.СписаниеБезналичныхДенежныхСредств.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СписаниеНедостачТоваров
	
	ТекущийДокумент = Метаданные.Документы.СписаниеНедостачТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваров;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СписаниеПринятыхНаХранениеТоваров
	
	ТекущийДокумент = Метаданные.Документы.СписаниеПринятыхНаХранениеТоваров.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеПринятыхТоваровЗаСчетПоклажедателя;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СписаниеТоваровУХранителя
	
	ТекущийДокумент = Метаданные.Документы.СписаниеТоваровУХранителя.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровУХранителя;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Сторно
	
	ТекущийДокумент = Метаданные.Документы.Сторно.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ИсправлениеТекущегоПериода;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Сторно;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ИсправлениеПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретения;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноСписанияНаДругиеПартии;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.СторноДопРасходов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДополнениеПрошлыйПериод;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ДополнениеПрошлыйПериод;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноВозврата;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.СторноПотребления;
		НовоеПравило.ДокументИсточникВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратТоваровОтКлиента;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.ВозвратНаДругойСклад;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.СторноВозвратаПрошлыхПериодов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ Локализация
	#Область СчетФактураНалоговыйАгент
	
	ТекущийДокумент = Метаданные.Документы.СчетФактураНалоговыйАгент.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходы;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- Локализация
	
	#Область ТаможеннаяДекларацияИмпорт
	
	ТекущийДокумент = Метаданные.Документы.ТаможеннаяДекларацияИмпорт.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДополнительныеРасходыСПартией;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходыСПартией;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ДополнительныеРасходыБезПартии;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.ДопРасходыБезПартии;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.СторноДопРасходов;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.КорректировкаПриобретенияПрошлогоПериода;
		НовоеПравило.ДокументИсточникВПриходе = Истина;
	
	КонецЕсли;
	
	#КонецОбласти
	
	//++ НЕ УТКА
	#Область ЭтапПроизводства2_2
	
	ТекущийДокумент = Метаданные.Документы.ЭтапПроизводства2_2.Имя;
	
	Если НЕ ЗначениеЗаполнено(ИмяДокументаДляОтбора) ИЛИ НРег(ИмяДокументаДляОтбора) = НРег(ТекущийДокумент) Тогда
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВПроизводство;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратИзПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукции;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Партия;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыпускПродукцииФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеТоваровПоТребованию;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставОС;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаВСоставНМА;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаПрочиеЦели;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеРасходовНаПартииПроизводства;
		НовоеПравило.ТипЗаписиПриход = Перечисления.ТипыЗаписейПартий.Перемещение;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Потребление;
		НовоеПравило.КорПартияВРасходе = Истина;
		
		НовоеПравило = ТаблицаПравил.Добавить();
		НовоеПравило.ИмяДокумента = ТекущийДокумент;
		НовоеПравило.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СписаниеНаРасходыФиксированнаяСтоимость;
		НовоеПравило.ТипЗаписиРасход = Перечисления.ТипыЗаписейПартий.Дополнение;
	
	КонецЕсли;
	
	#КонецОбласти
	//-- НЕ УТКА
	
	Для Каждого ТекСтр Из ТаблицаПравил Цикл
		ТекСтр.ПустоеЗначениеРегистратора = Документы[ТекСтр.ИмяДокумента].ПустаяСсылка();
	КонецЦикла;
	
	Возврат ТаблицаПравил;
	
КонецФункции

// Определяет, является ли указанный тип записи записью партии.
//
// Параметры:
// 	ТипЗаписи - ПеречислениеСсылка.ТипыЗаписейПартий - проверяемый тип записи
// 	
// Возвращаемое значение:
//	Булево - переданный тип записи является первичной партией.
//
Функция ЭтоТипЗаписиПервичнойПартии(ТипЗаписи) Экспорт
	
	Возврат (РасчетСебестоимостиПрикладныеАлгоритмы.ТипыЗаписейПервичныхПартий().Найти(ТипЗаписи) <> Неопределено);
	
КонецФункции

// Определяет, возможен ли пересчет записи указанного типа.
//
// Параметры:
// 	ТипЗаписи - ПеречислениеСсылка.ТипыЗаписейПартий - проверяемый тип записи
//
// Возвращаемое значение:
//	Булево - переданный тип записи является непересчитываемум.
//
Функция ЭтоНепересчитываемыйТипЗаписи(ТипЗаписи) Экспорт
	
	Возврат (РасчетСебестоимостиПрикладныеАлгоритмы.НепересчитываемыеТипыЗаписей().Найти(ТипЗаписи) <> Неопределено);
	
КонецФункции

// Определяет, является ли переданный тип записи расчетным (не используется в первичных движениях).
// Если это расчетный тип записи (например, Выпуск, Распределение), значит она сгенерирована
// на этапе заполнения партий в себестоимости - для таких записей устанавливается признак "РасчетПартий".
// В противном случае считаем что это уже существующая первичная запись, для которой просто заполнились поля партионного
// учета. Используется только для регистра СебестоимостьТоваров на этапе заполнения партий в движениях этого регистра.
//
// Параметры:
// 	ТипЗаписи - ПеречислениеСсылка.ТипыЗаписейПартий - проверяемый тип записи
//
// Возвращаемое значение:
//	Булево - переданный тип записи является расчетным.
//
Функция ЭтоТолькоРасчетныйТипЗаписи(ТипЗаписи) Экспорт
	
	Правила = РасчетСебестоимостиПовтИсп.ПравилаЗаполненияПоляТипЗаписи();
	СтрокаПравил = Правила.Найти(ТипЗаписи, "ТипЗаписиПриход, ТипЗаписиРасход");
	
	Возврат (СтрокаПравил = Неопределено); // тип записи не используется в первичных движениях
	
КонецФункции

#КонецОбласти

#Область УчетСебестоимости

// Возвращает признак возможности расчета себестоимости.
//
//	Параметры:
//		Период - Дата - период, для которого проверяется возможность расчета себестоимости.
//
//	Возвращаемое значение:
//		Булево - признак возможности расчета себестоимости.
//
Функция ВозможенРасчетСебестоимости(Период = Неопределено) Экспорт
	
	ВедетсяУчет = ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости");
	
	Если НЕ ВедетсяУчет ИЛИ Период = Неопределено Тогда
		Возврат ВедетсяУчет;
	КонецЕсли;
	
	// Расчет возможен с периода, предшествующего периоду начала учета себестоимости (с периода, в котором вводятся начальные остатки)
	ДатаПроверки = НачалоМесяца(НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить()) - 1);
	
	Возврат ДатаПроверки <= НачалоМесяца(Период);
	
КонецФункции

// Возвращает признак необходимости формирования движений по регистрам себестоимости.
//
//	Параметры:
//		Период			- Дата		- период, для которого проверяется возможность расчета себестоимости.
//		ЭтоВводОстатков	- Булево	- признак того, что регистратор является вводом остатков.
//
//	Возвращаемое значение:
//		Булево - признак необходимости формирования движений по регистрам себестоимости.
//
Функция ФормироватьДвиженияПоРегистрамСебестоимости(Период, ЭтоВводОстатков = Ложь) Экспорт
	
	ВедетсяУчет = ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости");
	
	Если НЕ ВедетсяУчет Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Движения документов формируются с периода начала учета себестоимости.
	ДатаПроверки = НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить());
	
	Если ЭтоВводОстатков Тогда
		// Документы ввода остатков формируют движения начиная с периода, предшествующего периоду начала учета себестоимости.
		ДатаПроверки = НачалоМесяца(ДатаПроверки - 1);
	КонецЕсли;
	
	Возврат ДатаПроверки <= НачалоМесяца(?(ЗначениеЗаполнено(Период), Период, ТекущаяДатаСеанса()));
	
КонецФункции

// Возвращает признак возможности наличия неиспользуемых движений себестоимости.
//
//	Возвращаемое значение:
//		Булево - признак возможности наличия неиспользуемых движений себестоимости.
//
Функция ВозможныНеиспользуемыеДвиженияПоРегистрамСебестоимости() Экспорт
	
	ВестиУчет = ПолучитьФункциональнуюОпцию("ИспользоватьУчетСебестоимости");
	ДатаНачалаУчета = НачалоМесяца(Константы.ДатаНачалаУчетаСебестоимости.Получить());
	
	Если ВестиУчет И НЕ ЗначениеЗаполнено(ДатаНачалаУчета) Тогда
		Возврат Ложь; // учет себестоимости ведется во всех периодах
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает перечень регистров, которые не используются при отключенном учете себестоимости.
//
//	Возвращаемое значение:
//		Соответствие - перечень регистров, которые не используются при отключенном учете себестоимости.
//
Функция РегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости() Экспорт
	
	ПереченьРегистров = Новый Соответствие;
	
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПартииПрочихРасходов, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПрочиеДоходы, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходы, Истина);
	//++ НЕ УТ
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.РезервыПредстоящихРасходов, Истина);
	//-- НЕ УТ
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.СебестоимостьТоваров, Истина);
	//++ НЕ УТ
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ТрудозатратыНезавершенногоПроизводства, Истина);
	//-- НЕ УТ
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ФинансовыеРезультаты, Истина);
	
	ПереченьРегистров.Вставить(Метаданные.РегистрыСведений.СтоимостьТоваров, Истина);
	
	РасчетСебестоимостиЛокализация.ДополнитьРегистрыНеИспользуемыеПриВыключенномУчетеСебестоимости(ПереченьРегистров);
	
	Возврат ПереченьРегистров;
	
КонецФункции

// Возвращает перечень регистров, которые не рассчитываются при отключенном учете себестоимости.
//
//	Возвращаемое значение:
//		Соответствие - перечень регистров, которые не рассчитываются при отключенном учете себестоимости.
//
Функция РегистрыНеРассчитываемыеПриВыключенномУчетеСебестоимости() Экспорт
	
	ПереченьРегистров = Новый Соответствие;
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ВыручкаИСебестоимостьПродаж, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураДоходыРасходы, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.ДвиженияНоменклатураНоменклатура, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.Закупки, Истина);
	ПереченьРегистров.Вставить(Метаданные.РегистрыНакопления.МатериалыИРаботыВПроизводстве, Истина);
	
	Возврат ПереченьРегистров;
	
КонецФункции

// Возвращает перечень документов, которые формируют движения при отключенном учете себестоимости.
//
//	Возвращаемое значение:
//		Соответствие - перечень документов, которые формируют движения при отключенном учете себестоимости.
//
Функция РегистраторыСДвижениямиПриВыключенномУчетеСебестоимости() Экспорт
	
	ПереченьРегистраторов = Новый Соответствие;
	
	ПереченьРегистраторов.Вставить(Метаданные.Документы.ВводОстатков       , Истина);
	ПереченьРегистраторов.Вставить(Метаданные.Документы.ВводОстатковТоваров, Истина);
	ПереченьРегистраторов.Вставить(Метаданные.Документы.РасчетСебестоимостиТоваров, Истина);
	//++ НЕ УТКА
	ПереченьРегистраторов.Вставить(Метаданные.Документы.НачальныеОстаткиНЗППоПартиямПроизводства, Истина);
	//-- НЕ УТКА
	//++ НЕ УТ
	ПереченьРегистраторов.Вставить(Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4, Истина);
	//-- НЕ УТ
	
	Возврат ПереченьРегистраторов;
	
КонецФункции

#КонецОбласти

#Область РежимыПартионногоУчета

// Определяет, используется ли партионный учет версии 2.2 на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак использования партионного учета версии 2.2 на указанную дату
//	Если дата не указана, то определяется сам факт использования партионного учета версии 2.2.
//
Функция ПартионныйУчетВерсии22(Дата = Неопределено) Экспорт
	Возврат РасчетСебестоимостиЛокализация.ПартионныйУчетВерсии22(Дата);
КонецФункции

// Определяет, используется ли партионный учет версии 2.1 на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак использования партионного учета версии 2.1 на указанную дату
//	Если дата не указана, то определяется сам факт использования партионного учета версии 2.1.
//
Функция ПартионныйУчетВерсии21(Дата = Неопределено) Экспорт
	
	БылВключенПартионныйУчет = РасчетСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата);
	
	Возврат ?(БылВключенПартионныйУчет = Неопределено, Ложь, БылВключенПартионныйУчет);
	
КонецФункции

// Определяет, отключен ли партионный учет на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак отключенного партионного учета на указанную дату.
//
Функция ПартионныйУчетНеИспользуется(Дата = Неопределено) Экспорт
	
	БылВключенПартионныйУчет = РасчетСебестоимостиПовтИсп.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата);
	
	Возврат ?(БылВключенПартионныйУчет = Неопределено, Ложь, НЕ БылВключенПартионныйУчет);
	
КонецФункции

// Определяет, включен ли партионный учет на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево - признак использования партионного учета на указанную дату.
//
Функция ПартионныйУчетВключен(Дата = Неопределено) Экспорт
	
	БылВключенПартионныйУчет =
		РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии22(Дата)
		ИЛИ РасчетСебестоимостиПовтИсп.ПартионныйУчетВерсии21(Дата);
	
	Возврат БылВключенПартионныйУчет;
	
КонецФункции

// Определяет "старый" режим партионного учета, до перехода на партионный учет версии 2.2.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить режим партионного учета.
//
// Возвращаемое значение:
//	Булево, Неопределено - признак использования партионного учета на указанную дату
// 		Если параметр Дата не передан, или Дата находится в периоде действия партионного учета версии 2.2,
//		то возвращается значение Неопределено - в такой проверке нет смысла.
//
Функция ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата) Экспорт
	Возврат РасчетСебестоимостиЛокализация.ИспользовалсяПартионныйУчетДоПереходаНаВерсию22(Дата);
КонецФункции

// Возвращает дату перехода на партионный учет версии 2.2.
// Дата может быть пустой - значит партионный учет версии 2.2 включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца перехода на партионный учет версии 2.2.
//
Функция ДатаПереходаНаПартионныйУчетВерсии22() Экспорт
	Возврат РасчетСебестоимостиЛокализация.ДатаПереходаНаПартионныйУчетВерсии22();
КонецФункции

#КонецОбласти

#Область УправленческийУчетОрганизаций

// Возвращает дату начала ведения управленческого учета организаций.
// Дата может быть пустой - значит управленческий учет организаций включен для всех периодов.
//
// Возвращаемое значение:
//	Дата - начало месяца ведения управленческого учета организаций
//
Функция ДатаНачалаВеденияУправленческогоУчетаОрганизаций() Экспорт
	
	Возврат РасчетСебестоимостиЛокализация.ДатаНачалаВеденияУправленческогоУчетаОрганизаций();
	
КонецФункции

// Определяет, включен ли управленческий учет организаций на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить ведение управленческого учета организаций.
//
// Возвращаемое значение:
//	Булево - признак использования управленческого учета организаций на указанную дату
//	Если дата не указана, то определяется сам факт включения партионного учета организаций.
//
Функция УправленческийУчетОрганизаций(Дата = Неопределено) Экспорт
	Возврат РасчетСебестоимостиЛокализация.УправленческийУчетОрганизаций(Дата);
КонецФункции

#КонецОбласти

#Область УчетПоНазначениям

// Возвращает дату начала включения обособленного учета себестоимости по назначениям.
//
// Возвращаемое значение:
//	Дата - начало месяца включения обособленного учета по назначениям.
//
Функция ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям() Экспорт
	
	Возврат НачалоМесяца(Константы.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям.Получить());
	
КонецФункции

// Определяет, включен ли учет себестоимости по назначениям на указанную дату.
//
// Параметры:
//	Дата - Дата - дата, для которой надо определить ведение учета себестоимости по назначениям.
//
// Возвращаемое значение:
//	Булево - признак учета себестоимости по назначениям на указанную дату
//	Если дата не указана, то определяется сам факт учета себестоимости по назначениям.
//
Функция СебестоимостьТоваровПоНазначениям(Дата = Неопределено) Экспорт
	
	УчитыватьСебестоимостьТоваровПоНазначениям = ПолучитьФункциональнуюОпцию("УчитыватьСебестоимостьТоваровПоНазначениям")
		И (Дата = Неопределено
			ИЛИ Дата >= РасчетСебестоимостиПовтИсп.ДатаВключенияОбособленногоУчетаСебестоимостиПоНазначениям());
	
	Возврат УчитыватьСебестоимостьТоваровПоНазначениям;
	
КонецФункции

#КонецОбласти

#Область ТехнологическиеПараметрыРасчета

// Возвращает значения технологических параметров операции закрытия месяца.
//
// Параметры:
//	Операция - ПеречислениеСсылка.ОперацииЗакрытияМесяца - операция, для которой получаются технологические параметры;
//				если не указана, то возвращаются значения параметров для операции "Расчет партий и себестоимости".
//	СкрытыеИмеютЗначенияПоУмолчанию - Булево - для скрытых параметров будет возвращено
//		значение по умолчанию независимо от наличия измененного значения
//
// Возвращаемое значение:
//	Структура - см. Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации().
//
Функция ЗначенияТехнологическихПараметров(Операция = Неопределено, СкрытыеИмеютЗначенияПоУмолчанию = Истина) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Операция = Неопределено Тогда
		Операция = Перечисления.ОперацииЗакрытияМесяца.РасчетПартийИСебестоимости;
	КонецЕсли;
	
	ЗначенияПараметров = Константы.НастройкиЗакрытияМесяца.СоздатьМенеджерЗначения().УстановленныеЗначенияПараметровОперации(
		Операция,
		СкрытыеИмеютЗначенияПоУмолчанию);
	
	Возврат ЗначенияПараметров;
	
КонецФункции

#КонецОбласти

#Область АнализСостоянияСистемы

// Возвращает важность указанной проверки состояния системы.
//
// Параметры:
//	Проверка - СправочникСсылка.ПроверкиСостоянияСистемы - проверка.
//
// Возвращаемое значение:
//	ПеречислениеСсылка.ВариантыВажностиПроблемыСостоянияСистемы - важность проверки.
//
Функция ВажностьПроверкиСостоянияСистемы(Проверка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Важность = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Проверка, "Важность");
	
	Возврат Важность;
	
КонецФункции

#КонецОбласти

#КонецОбласти
