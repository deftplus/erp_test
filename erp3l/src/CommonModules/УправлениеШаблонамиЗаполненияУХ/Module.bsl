////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для реализации фукнциональности механизма шаблонов 
// заполнения контексте серверного кода.
////////////////////////////////////////////////////////////////////////////////

// Возвращает структуру данных по объекту ИсследуемыйОбъект.
Функция СтруктураДанныхОбъектаШаблонаПоМетаданному(МетаданныеОбъекта) Экспорт
	НазначениеШаблона = Неопределено;
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	Если ОбщегоНазначения.ЭтоДокумент(МетаданныеОбъекта) Тогда
		НазначениеШаблона = Перечисления.НазначенияШаблонов.Документ;
	ИначеЕсли ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда	
		НазначениеШаблона = Перечисления.НазначенияШаблонов.Справочник;
	Иначе
		НазначениеШаблона = Перечисления.НазначенияШаблонов.ПустаяСсылка();
	КонецЕсли;
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Назначение", НазначениеШаблона);
	СтруктураРезультат.Вставить("ИмяОбъекта", ИмяОбъекта);
	Возврат СтруктураРезультат;
КонецФункции		// СтруктураДанныхОбъектаШаблонаПоМетаданному()

// Возвращает структуру данных по объекту ИсследуемыйОбъект.
Функция СтруктураДанныхОбъектаШаблонаПоОбъекту(ИсследуемыйОбъект) Экспорт
	МетаданныеОбъекта = ИсследуемыйОбъект.Ссылка.Метаданные();
	СтруктураРезультат = СтруктураДанныхОбъектаШаблонаПоМетаданному(МетаданныеОбъекта);
	Возврат СтруктураРезультат;
КонецФункции		// СтруктураДанныхОбъектаШаблонаПоОбъекту()

// Возвращает структуру данных по ссылке ИсследуемыйОбъект.
Функция СтруктураДанныхОбъектаШаблонаПоСсылке(ИсследуемыйОбъект) Экспорт
	МетаданныеОбъекта = ИсследуемыйОбъект.Метаданные();
	СтруктураРезультат = СтруктураДанныхОбъектаШаблонаПоМетаданному(МетаданныеОбъекта);
	Возврат СтруктураРезультат;
КонецФункции		// СтруктураДанныхОбъектаШаблонаПоСсылке()

// Заполняет ОбъектВход по шаблону заполнения ШаблонВход и возвращает результат.
Функция ЗаполнитьИзШаблона(ШаблонВход, ОбъектВход) Экспорт
	// Заполним реквизиты.
	Попытка
		СтруктураРеквизитов = Новый Структура;
		Для каждого ТекРеквизит Из ШаблонВход.РеквизитыШаблона Цикл
			Если ТекРеквизит.ТабличнаяЧасть = "" Тогда
				СтруктураРеквизитов.Вставить(ТекРеквизит.НаименованиеРеквизита, ТекРеквизит.ЗначениеРеквизита);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(ОбъектВход, СтруктураРеквизитов);
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось считать значения реквизитов: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	// Заполним табличные части.
	ТабРеквизиты = ШаблонВход.РеквизитыШаблона.Выгрузить();
	ТабРеквизиты.Сортировать("ТабличнаяЧасть Возр, НомерСтрокиТаблицы возр");
	ПоследнийНомерСтроки = -1;
	ТекТабЧасть = "";
	Для каждого ТекТабРеквизиты Из ТабРеквизиты Цикл
		Если ТекТабРеквизиты.ТабличнаяЧасть <> "" Тогда
			Попытка
				ТекНомерСтроки = ТекТабРеквизиты.НомерСтрокиТаблицы;
				Если (ТекНомерСтроки <> ПоследнийНомерСтроки) ИЛИ (ТекТабЧасть <> ТекТабРеквизиты.ТабличнаяЧасть) Тогда
					НоваяСтрока = ОбъектВход[ТекТабРеквизиты.ТабличнаяЧасть].Добавить();	
				Иначе
					//Пользуемся уже существующей строкой
				КонецЕсли;
				НоваяСтрока[ТекТабРеквизиты.НаименованиеРеквизита] = ТекТабРеквизиты.ЗначениеРеквизита;
				ПоследнийНомерСтроки = ТекНомерСтроки;
				ТекТабЧасть = ТекТабРеквизиты.ТабличнаяЧасть;
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось считать значения табличной части %ТабличнаяЧасть%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТабличнаяЧасть%", Строка(ТекТабРеквизиты.ТабличнаяЧасть));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	Возврат ОбъектВход;
КонецФункции		// ЗаполнитьИзШаблона()

// Возвращает имя объекта метаданных по ссылке на объект ОбъектСсылкаВход.
Функция ИмяОбъектаМетаданных(ОбъектСсылкаВход) Экспорт
	РезультатФункции = ОбъектСсылкаВход.Метаданные().Имя;
	Возврат РезультатФункции;
КонецФункции		// ИмяОбъектаМетаданных()

// Заполняет в таблицу ТаблицаЗаполненияВход значение стандартного реквизита НаименованиеРеквизитаВход 
// из ОбъектРодительВход в случае его наличия.
Процедура ЗаполнитьСтандартныйРеквизитОбъектаВШалон(ОбъектРодительВход, ТаблицаЗаполненияВход, НаименованиеРеквизитаВход)
	Если ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектРодительВход, НаименованиеРеквизитаВход) Тогда
		НоваяСтрокаРеквизиты = ТаблицаЗаполненияВход.Добавить();
		НоваяСтрокаРеквизиты.НаименованиеРеквизита	 = НаименованиеРеквизитаВход;
		НоваяСтрокаРеквизиты.СинонимРеквизита	 = НаименованиеРеквизитаВход;
		НоваяСтрокаРеквизиты.ЗначениеРеквизита		 = ОбъектРодительВход[НаименованиеРеквизитаВход];
		НоваяСтрокаРеквизиты.ТабличнаяЧасть			 = "";
		НоваяСтрокаРеквизиты.СинонимТабличнойЧасти	 = "";
		НоваяСтрокаРеквизиты.НомерСтрокиТаблицы		 = 0;
	Иначе
		// Такого реквизита нет. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьСтандартныйРеквизитОбъектаВШалон()

// Возвращает пустую таблицу реквизитов для заполнения в шаблоне.
Функция ИнициализироватьТаблицуРеквизитов() Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("НаименованиеРеквизита");
	РезультатФункции.Колонки.Добавить("СинонимРеквизита");
	РезультатФункции.Колонки.Добавить("ТабличнаяЧасть");
	РезультатФункции.Колонки.Добавить("СинонимТабличнойЧасти");
	РезультатФункции.Колонки.Добавить("НомерСтрокиТаблицы");
	РезультатФункции.Колонки.Добавить("ЗначениеРеквизита");
	РезультатФункции.Колонки.Добавить("Комментарий");
	Возврат РезультатФункции;	
КонецФункции		// ИнициализироватьТаблицуРеквизитов()

// Возвращает массив имен реквизитов, которые разрешены для данного объекта.
Функция ПолучитьМассивРазрешенныхРеквизитовОбъекта(ОбъектРодительВход) Экспорт
	РезультатФункции = Новый Массив;
	Если ТипЗнч(ОбъектРодительВход) = Тип("СправочникСсылка.Лоты") Тогда
		РезультатФункции.Добавить("ПредметДоговора");
		РезультатФункции.Добавить("ОбщиеТребования");
		РезультатФункции.Добавить("ПояснениеУсловияПоставки");
		РезультатФункции.Добавить("ОписаниеГрафикаПоставки");
		РезультатФункции.Добавить("УсловияПоставкиИнкотермс");
		РезультатФункции.Добавить("ТребованияКОформлениюДокументации");
		РезультатФункции.Добавить("АдресПредоставленияДокументации");
		РезультатФункции.Добавить("ПорядокПредоставленияДокументации");
		РезультатФункции.Добавить("РазмерОплатыЗаПредоставлениеДокументации");
		РезультатФункции.Добавить("СрокИПорядокОплатыЗаПредоставлениеДокументации");
		РезультатФункции.Добавить("УсловияОплаты");
		РезультатФункции.Добавить("ИсточникФинансирования");
		РезультатФункции.Добавить("ВнешняяСистемаДляПроведенияАукциона");
		РезультатФункции.Добавить("EMailПриема");
		РезультатФункции.Добавить("АдресПриемаДокументации");
		РезультатФункции.Добавить("ГрафикРаботы");
		РезультатФункции.Добавить("АдресРассмотренияЗаявок");
		РезультатФункции.Добавить("АдресПодведенияИтогов");
		РезультатФункции.Добавить("КоличествоМестСОбязанностьюЗаключитьДоговор");
		РезультатФункции.Добавить("МинимальноеКоличествоЗаявок");
		РезультатФункции.Добавить("НомерПриказаНазначенияЗакупочнойКомиссии");
		РезультатФункции.Добавить("ДатаПриказаНазначенияЗакупочнойКомиссии");
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьМассивРазрешенныхРеквизитовОбъекта()

// Возвращает массив имен реквизитов, которые разрешены для данного объекта.
Функция ПолучитьМассивРазрешенныхТабличныхЧастейОбъекта(ОбъектРодительВход) Экспорт
	РезультатФункции = Новый Массив;
	Если ТипЗнч(ОбъектРодительВход) = Тип("СправочникСсылка.Лоты") Тогда
		РезультатФункции.Добавить("ЗакупочнаяКомиссия");
	Иначе
		РезультатФункции = Новый Массив;
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьМассивРазрешенныхТабличныхЧастейОбъекта()

// Определяет разрешено ли использование в шаблоне реквизита с именем
// ИмяРеквизитаВход. Когда МассивРазрешенныхРеквизитовВход не указан -
// будет заполнен по умолчанию для объекта ОбъектРодительВход.
Функция РеквизитШаблонаРазрешен(ИмяРеквизитаВход, МассивРазрешенныхРеквизитовВход = Неопределено, ОбъектРодительВход = Неопределено)
	РезультатФункции = Истина;
	МассивРазрешенныхРеквизитовРабочий = Новый Массив;
	Если МассивРазрешенныхРеквизитовВход = Неопределено Тогда
		Если ОбъектРодительВход = Неопределено Тогда
			МассивРазрешенныхРеквизитовРабочий = Новый Массив;
		Иначе	
			МассивРазрешенныхРеквизитовРабочий = ПолучитьМассивРазрешенныхРеквизитовОбъекта(ОбъектРодительВход);
		КонецЕсли;
	Иначе
		МассивРазрешенныхРеквизитовРабочий = МассивРазрешенныхРеквизитовВход;
	КонецЕсли;
	Если МассивРазрешенныхРеквизитовРабочий.Количество() > 0 Тогда
		РезультатФункции = (МассивРазрешенныхРеквизитовРабочий.Найти(ИмяРеквизитаВход) <> Неопределено);
	Иначе
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РеквизитШаблонаРазрешен()

// Определяет разрешено ли использование в шаблоне табличной части с 
// именем ИмяТабличнойЧастиВход. Когда МассивРазрешенныхРеквизитовВход не 
// указан - будет заполнен по умолчанию для объекта ОбъектРодительВход.
Функция ТабличнаяЧастьШаблонаРазрешена(ИмяТабличнойЧастиВход, МассивРазрешенныхРеквизитовВход = Неопределено, ОбъектРодительВход = Неопределено)
	РезультатФункции = Истина;
	МассивРазрешенныхРеквизитовРабочий = Новый Массив;
	Если МассивРазрешенныхРеквизитовВход = Неопределено Тогда
		Если ОбъектРодительВход = Неопределено Тогда
			МассивРазрешенныхРеквизитовРабочий = Новый Массив;
		Иначе	
			МассивРазрешенныхРеквизитовРабочий = ПолучитьМассивРазрешенныхТабличныхЧастейОбъекта(ОбъектРодительВход);
		КонецЕсли;
	Иначе
		МассивРазрешенныхРеквизитовРабочий = МассивРазрешенныхРеквизитовВход;
	КонецЕсли;
	Если МассивРазрешенныхРеквизитовРабочий.Количество() > 0 Тогда
		РезультатФункции = (МассивРазрешенныхРеквизитовРабочий.Найти(ИмяТабличнойЧастиВход) <> Неопределено);
	Иначе
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ТабличнаяЧастьШаблонаРазрешена()

// Получает таблицу реквизитов и их значений по ссылке на объект ОбъектРодительВход.
Функция ПолучитьТаблицуРеквизитовОбъекта(ОбъектРодительВход) Экспорт
	МетаданныеОбъекта = ОбъектРодительВход.Метаданные();
	РезультатФункции = ИнициализироватьТаблицуРеквизитов();
	МассивРазрешенныхРеквизитовОбъекта = ПолучитьМассивРазрешенныхРеквизитовОбъекта(ОбъектРодительВход);
	ЕстьОграниченияРеквизитов = МассивРазрешенныхРеквизитовОбъекта.Количество() > 0;
	// Заполним реквизиты объекта.
	Для Каждого ТекРеквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если РеквизитШаблонаРазрешен(ТекРеквизит.Имя, МассивРазрешенныхРеквизитовОбъекта) Тогда
			ЗначениеРеквизита = ОбъектРодительВход[ТекРеквизит.Имя];
			Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
				НоваяСтрокаРеквизиты = РезультатФункции.Добавить();			
				НоваяСтрокаРеквизиты.НаименованиеРеквизита	 = ТекРеквизит.Имя;
				НоваяСтрокаРеквизиты.СинонимРеквизита		 = ТекРеквизит.Синоним;
				НоваяСтрокаРеквизиты.ЗначениеРеквизита		 = ЗначениеРеквизита;
				НоваяСтрокаРеквизиты.ТабличнаяЧасть			 = "";
				НоваяСтрокаРеквизиты.СинонимТабличнойЧасти	 = "";
				НоваяСтрокаРеквизиты.НомерСтрокиТаблицы		 = 0;
			Иначе
				// Значение пустое, пропустим его.
			КонецЕсли;
		Иначе
			Продолжить;				// Данный реквизит не разрешен для шаблона. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуРеквизитовОбъекта()

// Получает таблицу табличных частей по ссылке на объект ОбъектРодительВход.
Функция ПолучитьТаблицуТабличныхЧастейОбъекта(ОбъектРодительВход) Экспорт
	МетаданныеОбъекта = ОбъектРодительВход.Метаданные();
	РезультатФункции = ИнициализироватьТаблицуРеквизитов();
	МассивРазрешенныхТабличныхЧастейОбъекта = ПолучитьМассивРазрешенныхТабличныхЧастейОбъекта(ОбъектРодительВход);
	Для каждого ТекТабличнаяЧасть Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		ИмяТабЧасти = ТекТабличнаяЧасть.Имя;
		Если РеквизитШаблонаРазрешен(ИмяТабЧасти, МассивРазрешенныхТабличныхЧастейОбъекта) Тогда
			ТабЧастьСиноним = ТекТабличнаяЧасть.Синоним;
			ТабличнаяЧасть = ОбъектРодительВход[ИмяТабЧасти];
			НомерСтрокиТаблицы = 1;
			Для каждого ТекСтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				Для Каждого ТекКолонка Из МетаданныеОбъекта.ТабличныеЧасти[ИмяТабЧасти].Реквизиты Цикл
					ЗначениеРеквизита = ТекСтрокаТабличнойЧасти[ТекКолонка.Имя];
					Если ЗначениеЗаполнено(ЗначениеРеквизита) Тогда
						НоваяСтрокаРеквизиты = РезультатФункции.Добавить();
						НоваяСтрокаРеквизиты.НаименованиеРеквизита	 = ТекКолонка.Имя;
						НоваяСтрокаРеквизиты.СинонимРеквизита		 = ТекКолонка.Синоним;
						НоваяСтрокаРеквизиты.ЗначениеРеквизита		 = ЗначениеРеквизита;
						НоваяСтрокаРеквизиты.ТабличнаяЧасть			 = ИмяТабЧасти;
						НоваяСтрокаРеквизиты.СинонимТабличнойЧасти	 = ТабЧастьСиноним;
						НоваяСтрокаРеквизиты.НомерСтрокиТаблицы		 = НомерСтрокиТаблицы;
					Иначе
						//Значение пустое, пропустим его	
					КонецЕсли;
				КонецЦикла;
				НомерСтрокиТаблицы = НомерСтрокиТаблицы + 1;
			КонецЦикла;
		Иначе
			Продолжить;				// Данная табличная часть не разрешена для шаблона. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуТабличныхЧастейОбъекта()

// Возвращает имя основной формы элемента для элемента ЭлементВход.
Функция ПолучитьИмяОсновнойФормы(ЭлементВход) Экспорт
	РезультатФункции = "";
	МетаданныеЭлемента = ЭлементВход.Метаданные();
	Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлемента) Тогда
		РезультатФункции = "Справочник." + МетаданныеЭлемента.Имя + ".Форма." + МетаданныеЭлемента.ОсновнаяФормаОбъекта.Имя;
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(МетаданныеЭлемента) Тогда
		РезультатФункции = "Документ." + МетаданныеЭлемента.Имя + ".Форма." + МетаданныеЭлемента.ОсновнаяФормаОбъекта.Имя;
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьИмяОсновнойФормы()

// Возвращает представление метаданного (справочника/документа) 
// для назначения шаблона НазначениеВход с именем родителя ИмяРодителяВход.
Функция ПолучитьПредставлениеМетаданногоРодителя(ИмяРодителяВход, НазначениеВход) Экспорт
	РезультатФункции = ИмяРодителяВход;
	Попытка
		Если НазначениеВход = Перечисления.НазначенияШаблонов.Справочник Тогда
			МетаданноеСправочника = Метаданные.Справочники[ИмяРодителяВход];
			РезультатФункции = МетаданноеСправочника.Синоним;
		ИначеЕсли НазначениеВход = Перечисления.НазначенияШаблонов.Документ Тогда	
			МетаданноеДокумента = Метаданные.Документы[ИмяРодителяВход];
			РезультатФункции = МетаданноеДокумента.Синоним;
		Иначе
			РезультатФункции = ИмяРодителяВход;
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Произошла ошибка при получении представления для объекта %ИмяРодителя%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяРодителя%", Строка(ИмяРодителяВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = ИмяРодителяВход;
	КонецПопытки;
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьПредставлениеМетаданногоРодителя()

// Возвращает организацию для заключения договора закупочной процедуры,
// к которой привязан лот ЛотВход.
Функция ПолучитьОрганизациюЗакупочнойПроцедурыЛота(ЛотВход) Экспорт
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	РезультатФункции = ПустаяОрганизация;
	Если ЗначениеЗаполнено(ЛотВход) Тогда
		ТекЗакупочнаяПроцедура = ЛотВход.Владелец;
		Если ЗначениеЗаполнено(ТекЗакупочнаяПроцедура) Тогда
			РезультатФункции = ТекЗакупочнаяПроцедура.ОрганизацияДляЗаключенияДоговора;
		Иначе
			РезультатФункции = ПустаяОрганизация;
		КонецЕсли;	
	Иначе
		РезультатФункции = ПустаяОрганизация;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОрганизациюЗакупочнойПроцедурыЛота()
