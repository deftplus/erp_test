#Область Работа_со_списком_ЭТП_и_обработками_интеграции_с_ЭТП


// Создает Структуру с пустыми полями описания обработки интеграции
Функция ШаблонОписанияЭТП() Экспорт
	ПоляОписанияЭТП = Новый Структура;
	ПоляОписанияЭТП.Вставить("Наименование", "");			// Имя отображаемое пользователю в качестве имени ЭТП. Ключ, по которому обработки включаются в табличную часть ЭТП.
	ПоляОписанияЭТП.Вставить("АдресВебСервиса", "");		// Адрес web-сервиса или веб-сервера
	ПоляОписанияЭТП.Вставить("АдресЛичногоКабинета", "");	// Адрес входа пользователя через браузер (если есть)
	ПоляОписанияЭТП.Вставить("ЕстьАвторизация", Ложь);		// Передавать имя и пароль при обращении к веб-сервису
	ПоляОписанияЭТП.Вставить("ИмяФормыДопНастроек", "");	// Имя формы в обработке, которая вызывается для ввода дополнительных настроек синхронизации, перед обменом данными.ю
	ПоляОписанияЭТП.Вставить("ВерсияОбработки", 0);			// Текущая версия обработки. Если Справочник.ЭТП.ВерсияОбработки < Обработка.ВерсияОбработки, то производится обновление элемента справочника ЭТП.
	ПоляОписанияЭТП.Вставить("ИмяОбработки", "");			// Не использовать. Имя текущей обработки.
	ПоляОписанияЭТП.Вставить("ОбменНаСервере", Истина);		// Признак обмена с использованием серверных процедур для выбранной обработки обмена
	
	// Вложенная структура с описанием обработок обмена с ЭТП разных версий
	ВерсииОбработок = Новый Структура;
	ВерсииОбработок.Вставить("ВерсияОбработки", 0);		// Версия обработки. Выбор обработки делаем по версии.
	ВерсииОбработок.Вставить("ЭтоДопОбработка", Ложь);	// Это обработка из справочника ДополнительныеОтчетыИОбработки, или встроенная обработка
	ВерсииОбработок.Вставить("ДопОбработка", Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка());
														// Ссылка на доп. обработку (если ЭтоДопОбработка == Истина)
	ВерсииОбработок.Вставить("НеИспользуется", Ложь);	// Если установлено в Истина, то эта обработка устарела и не используется.
	ВерсииОбработок.Вставить("ИмяОбработки", "");		// Имя обработки (заполняем если это встроенная обработка)
	ВерсииОбработок.Вставить("ОбменНаСервере", Истина);	// Признак обмена с использованием серверных процедур (из модуля объекта),
														// иначе вызываются форма по умолчанию с параметрами
	
	ПоляОписанияЭТП.Вставить("ВерсииОбработки", ВерсииОбработок); // Перечень обработок обмена для данной ЭТП.
	
	Возврат ПоляОписанияЭТП;
КонецФункции

// Возвращает таблицу значений, колонки которой соответсвтуют структуре возвращаемой функцией ШаблонОписанияЭТП()
Функция ШаблонТаблицыОписанияЭТП() Экспорт
	ТЗ = Новый ТаблицаЗначений;
	Шаблон = ШаблонОписанияЭТП();
	Для Каждого Элемент Из Шаблон Цикл
		Ключ = Элемент.Ключ;
		Если Ключ = "Наименование" Тогда
			ТЗ.Колонки.Добавить(Ключ, ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ЭлектронныеТорговыеПлощадки.ДлинаНаименования));
		ИначеЕсли Ключ = "ВерсииОбработки" Тогда
			Продолжить;
		Иначе
			ТипКолонки = ТипЗнч(Элемент.Значение);
			Если ТипКолонки = Неопределено Тогда
				ТЗ.Колонки.Добавить(Ключ);
			Иначе
				мТипов = Новый Массив;
				мТипов.Добавить(ТипКолонки);
				ТЗ.Колонки.Добавить(Ключ, Новый ОписаниеТипов(мТипов));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Добавим дополнительные колонки для описания обработок
	Для Каждого Элемент Из Шаблон.ВерсииОбработки Цикл
		Ключ = Элемент.Ключ;
		Если Шаблон.Свойство(Ключ) Тогда
			Продолжить;
		КонецЕсли;
		ТипКолонки = ТипЗнч(Элемент.Значение);
		Если ТипКолонки = Неопределено Тогда
			ТЗ.Колонки.Добавить(Ключ);
		Иначе
			мТипов = Новый Массив;
			мТипов.Добавить(ТипКолонки);
			ТЗ.Колонки.Добавить(Ключ, Новый ОписаниеТипов(мТипов));
		КонецЕсли;
	КонецЦикла;
			
	Возврат ТЗ;
КонецФункции

// Создает элементы справочника ЭлектронныеТроговыеПлощадки на основании обработок обмена,
// зарегистрированных в подсистеме ИнтеграцияСЭТП и справочнике ДополнительныеОтчетыИОбработки.
// Поиск ЭТП производится по Наименованию.
// Параметры:
//	НаименованиеЭТП - Строка. Если заполнено то, обновляем только данные по ЭТП с указанным Наименованием.
//
Процедура ОбновитьСоставЭТП(НаименованиеЭТП=Неопределено) Экспорт
	
    ТЗЭТП = ПолучитьОписанияОбработокИнтеграцииСЭТП(НаименованиеЭТП);
	
	// Добавим вновь появившиеся ЭТП и обработки обмена
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	//ПараметрТЗЭТП.ВерсияОбработки,
		|	//ПараметрТЗЭТП.Наименование,
		|	ПараметрТЗЭТП.*
		|ПОМЕСТИТЬ ТЗЭТП
		|ИЗ
		|	&ПараметрТЗЭТП КАК ПараметрТЗЭТП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ЭлектронныеТорговыеПлощадки.Ссылка, ЗНАЧЕНИЕ(Справочник.ЭлектронныеТорговыеПлощадки.ПустаяСсылка)) КАК Ссылка,
		|	//ТЗЭТП.Наименование,
		|	//ТЗЭТП.ВерсияОбработки,
		|	ТЗЭТП.*
		|ПОМЕСТИТЬ ЭТПобработок
		|ИЗ
		|	ТЗЭТП КАК ТЗЭТП
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлектронныеТорговыеПлощадки КАК ЭлектронныеТорговыеПлощадки
		|		ПО ТЗЭТП.Наименование = ЭлектронныеТорговыеПлощадки.Наименование
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	//ЭТПобработок.Ссылка КАК Ссылка,
		|	ВЫБОР КОГДА ЭлектронныеТорговыеПлощадкиВерсииОбработки.ВерсияОбработки ЕСТЬ NULL ТОГДА ЛОЖЬ ИНАЧЕ ИСТИНА КОНЕЦ КАК Сохранен,
		|	//ЭТПобработок.Наименование,
		|	//ЭТПобработок.ВерсияОбработки КАК ВерсияОбработки,
		|	ЭТПобработок.*
		|ИЗ
		|	ЭТПобработок КАК ЭТПобработок
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭлектронныеТорговыеПлощадки.ВерсииОбработки КАК ЭлектронныеТорговыеПлощадкиВерсииОбработки
		|		ПО ЭТПобработок.Ссылка = ЭлектронныеТорговыеПлощадкиВерсииОбработки.Ссылка
		|			И ЭТПобработок.ВерсияОбработки = ЭлектронныеТорговыеПлощадкиВерсииОбработки.ВерсияОбработки
		|ИТОГИ
		|	МАКСИМУМ(ЭТПобработок.ВерсияОбработки),
		|	МИНИМУМ(Сохранен)
		|ПО
		|	ЭТПобработок.Ссылка";
	
	Запрос.УстановитьПараметр("ПараметрТЗЭТП", ТЗЭТП);	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаЭТП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЭТП.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаЭТП.Ссылка) Тогда
			ЭТПОбъект = ВыборкаЭТП.Ссылка.ПолучитьОБъект();
			ЭТПОбъект.ВерсииОбработки.Очистить();
		Иначе
			ЭТПОбъект = Справочники.ЭлектронныеТорговыеПлощадки.СоздатьЭлемент();
		КонецЕсли;
		
		ИспользуемаяВерсияОбработки = ВыборкаЭТП.ВерсияОбработки;
		ОбъектЗаполнен = Ложь;
		
		ВыборкаДетальныеЗаписи = ВыборкаЭТП.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НЕ ОбъектЗаполнен И ИспользуемаяВерсияОбработки = ВыборкаДетальныеЗаписи.ВерсияОбработки Тогда
				ЗаполнитьЗначенияСвойств(ЭТПОбъект, ВыборкаДетальныеЗаписи);
				ОбъектЗаполнен = Истина;
			КонецЕсли;
			
			НоваяСтрока = ЭТПОбъект.ВерсииОбработки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		ЭТПОбъект.Записать();
		
	КонецЦикла;

КонецПроцедуры

// Получить таблицу значений с описаниями обработок обмена зарегистрированных в подсистеме ИнтеграцияСЭТП
// и справочнике ДополнительныеОтчетыИОбработки. Поиск ЭТП в справочнике производится по Наименованию.
// Параметры:
//	НаименованиеЭТП - Строка(25). Если заполнено то, получаем данные по указанной ЭТП.
// Возвращает:
//	ТаблицаЗначений - описание обработок в формате таблицы колонки которой соответсвтуют структуре возвращаемой функцией ШаблонОписанияЭТП().
//
Функция ПолучитьОписанияОбработокИнтеграцииСЭТП(НаименованиеЭТП="") Экспорт
	ТЗЭТП = ШаблонТаблицыОписанияЭТП();
	
	// Заполним описания по встроенным обработкам
	СоставПодсистемыИнтеграции = Метаданные.Подсистемы.ЦентрализованноеУправлениеЗакупками.Подсистемы.ИнтеграцияСЭТП.Состав;
	Для Каждого МетаданныеОбъекта Из СоставПодсистемыИнтеграции Цикл
		Если НЕ Метаданные.Обработки.Содержит(МетаданныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		ИмяОбработки = МетаданныеОбъекта.Имя;
		Если ИмяОбработки = "УправлениеИнтеграциейЦУЗсЭТП" Тогда
			Продолжить;
		КонецЕсли;
		
		Обработка = Обработки[ИмяОбработки].Создать();
		ОписаниеЭТП = Неопределено;
		Попытка
			ОписаниеЭТП = Обработка.ОписаниеЭТП();
		Исключение
			ОписаниеЭТП = Неопределено;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ОписаниеЭТП) Тогда
			Если НЕ ЗначениеЗаполнено(НаименованиеЭТП) ИЛИ ОписаниеЭТП.Наименование = НаименованиеЭТП Тогда
				НоваяСтрока = ТЗЭТП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЭТП);
				НоваяСтрока.ЭтоДопОбработка = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим описание из дополнительных обработок режима пользователя
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|ГДЕ
	|	ПОДСТРОКА(ДополнительныеОтчетыИОбработки.Наименование, 1, 16) = &НазваниеОтчета
	|	И ДополнительныеОтчетыИОбработки.Вид = &ВидОбработки
	|	И НЕ ДополнительныеОтчетыИОбработки.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
	Запрос.УстановитьПараметр("НазваниеОтчета",	НСтр("ru='Интеграция с ЭТП'"));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Обработка = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(ВыборкаДетальныеЗаписи.Ссылка);
		
		ОписаниеЭТП = Неопределено;
		Попытка
			ОписаниеЭТП = Обработка.ОписаниеЭТП();
		Исключение
			ОписаниеЭТП = Неопределено;
		КонецПопытки;
		
		Если ЗначениеЗаполнено(ОписаниеЭТП) Тогда
			Если НЕ ЗначениеЗаполнено(НаименованиеЭТП) ИЛИ ОписаниеЭТП.Наименование = НаименованиеЭТП Тогда
				НоваяСтрока = ТЗЭТП.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ОписаниеЭТП);
				НоваяСтрока.ЭтоДопОбработка = Истина;
				НоваяСтрока.ДопОбработка = ВыборкаДетальныеЗаписи.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат ТЗЭТП;
КонецФункции


#КонецОбласти


#Область Работа_параметрами_подключения_к_ЭТП_сотрудника


// Создает Структуру с пустыми полями описания обработки интеграции и параметров подключения пользователя
Функция ШаблонОписанияПараметровПодключенияКЭТП() Экспорт
	ПоляОписания = ШаблонОписанияЭТП();
	ПоляОписания.Вставить("ЭТП", Справочники.ЭлектронныеТорговыеПлощадки.ПустаяСсылка()); // СправочникСсылка.ЭлектронныеТорговыеПлощадки
	ПоляОписания.Вставить("НеСпрашиватьПараметрыПодключения", Ложь); // Отображать или нет ввод пароля и адреса
	ПоляОписания.Вставить("Пользователь", ""); // Логин пользователя
	ПоляОписания.Вставить("Пароль", ""); // Пароль подключения	
	ПоляОписания.Вставить("ОбменЧерезInternetExplorer", Ложь);
	ПоляОписания.Вставить("ИспользоватьПрокси", Ложь);
	ПоляОписания.Вставить("ПроксиСервер", "");
	ПоляОписания.Вставить("ПроксиПорт", "");
	ПоляОписания.Вставить("ПроксиПользователь", "");
	ПоляОписания.Вставить("ПроксиПароль", "");
	ПоляОписания.Вставить("ОбменНаСервере", Истина); // Вызывать функции обмена из модуля обработки (Истина) или из основной формы обработки (Ложь)
	
	Возврат ПоляОписания;
КонецФункции

// Получить настройки ЭТП для указанного сотрудника. Если не находит настройки пользователя, то возвращает настройки по умолчанию.
// Принимает:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	Сотрудник - СправочникСсылка.ФизическиеЛица.
// Возвращает:
//	Структура - параметры ЭТП (см. функцию ШаблонОписанияЭТП), дополнительно заполняет поле "ЭТП" значением ЭТП.
//	Неопределено - не найдена ЭТП.
Функция ПолучитьПараметрыПодключенияКЭТП(ЭТП, Сотрудник) Экспорт
	ПараметрыПодключенияКЭТП = ШаблонОписанияПараметровПодключенияКЭТП();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(НастройкиОбменаСЭТП.АдресВебСервиса, ЭлектронныеТорговыеПлощадки.АдресВебСервиса) КАК АдресВебСервиса,
		|	ЕСТЬNULL(НастройкиОбменаСЭТП.Пользователь, """") КАК Пользователь,
		|	ЕСТЬNULL(НастройкиОбменаСЭТП.Пароль, """") КАК Пароль,
		|	НастройкиОбменаСЭТП.ЭТП.ИмяОбработки КАК ИмяОбработки,
		|	ЕСТЬNULL(НастройкиОбменаСЭТП.АдресЛичногоКабинета, ЭлектронныеТорговыеПлощадки.АдресЛичногоКабинета) КАК АдресЛичногоКабинета,
		|	ЕСТЬNULL(НастройкиОбменаСЭТП.ЕстьАвторизация, ЭлектронныеТорговыеПлощадки.ЕстьАвторизация) КАК ЕстьАвторизация,
		|	ЭлектронныеТорговыеПлощадки.ВерсияОбработки КАК ВерсияОбработки,
		|	ЭлектронныеТорговыеПлощадки.ИмяФормыДопНастроек КАК ИмяФормыДопНастроек,
		|	ЕСТЬNULL(НастройкиОбменаСЭТП.НеСпрашиватьПараметрыПодключения, ЛОЖЬ) КАК НеСпрашиватьПараметрыПодключения,
		|	ЭлектронныеТорговыеПлощадки.Ссылка КАК ЭТП,
		|	ЭлектронныеТорговыеПлощадки.ОбменНаСервере КАК ОбменНаСервере,
		|	НастройкиОбменаСЭТП.ОбменЧерезInternetExplorer КАК ОбменЧерезInternetExplorer
		|ИЗ
		|	Справочник.ЭлектронныеТорговыеПлощадки КАК ЭлектронныеТорговыеПлощадки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиОбменаСЭТП КАК НастройкиОбменаСЭТП
		|		ПО (НастройкиОбменаСЭТП.ЭТП = &ЭТП)
		|			И (НастройкиОбменаСЭТП.Сотрудник = &Сотрудник)
		|			И (ЭлектронныеТорговыеПлощадки.Ссылка = &ЭТП)
		|ГДЕ
		|	ЭлектронныеТорговыеПлощадки.Ссылка = &ЭТП";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	Запрос.УстановитьПараметр("ЭТП", ЭТП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ПараметрыПодключенияКЭТП, ВыборкаДетальныеЗаписи);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПодключенияКЭТП;
КонецФункции


#КонецОбласти


#Область Получение_вспомогательной_информации


Функция ТекущийСотрудникДляОбмена() Экспорт
	ПользовательОбмена = Пользователи.ТекущийПользователь();
	
	Если НЕ ЗначениеЗаполнено(ПользовательОбмена) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПользовательОбмена.ФизическоеЛицо) Тогда
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПользовательОбмена.ФизическоеЛицо;
КонецФункции

// Возвращает массив ЭТП, для которых есть учетные записи по сотруднику.
// Принимает:
//	Сотрудник - СправочникСсылка.ФизическиеЛица.
// Возвращает:
//	Массив - элементы которого - это ссылки на ЭТП, доступные сотруднику.
Функция ЭТП_Сотрудника(Сотрудник) Экспорт
	мЭТП = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОбменаСЭТП.ЭТП КАК ЭТП
		|ИЗ
		|	РегистрСведений.НастройкиОбменаСЭТП КАК НастройкиОбменаСЭТП
		|ГДЕ
		|	НастройкиОбменаСЭТП.Сотрудник = &Сотрудник
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкиОбменаСЭТП.ЭТП";
	
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		мЭТП.Добавить(ВыборкаДетальныеЗаписи.ЭТП);
	КонецЦикла;
	
	Возврат мЭТП;
КонецФункции

// Если код корректен для отправки на ЭТП, то возвращает Неопределено. Иначе текст ошибки.
Функция КодОКДПКорректен(КодОКДП) Экспорт
	ТекстОшибки = "";
	СтрокаПроверки = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
	ПерваяБуква = Лев(КодОКДП, 1);
	Если СтрНайти(СтрокаПроверки, ПерваяБуква) = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки),"",Символы.ПС) 
			+ НСтр("ru='Не указана буква в начале кода.'");
	КонецЕсли;
	Если СтрДлина(КодОКДП) <> 8 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки),"",Символы.ПС)
			+ НСтр("ru='Длина кода не равна восьми символам.'");
	КонеЦЕсли;
		
	Если ПустаяСтрока(ТекстОшибки) Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат ТекстОшибки;
КонецФункции

Функция ПолныйКодОКДП(КодОКДП) Экспорт
	Префикс = БукваРазделаОКДП(КодОКДП);
	Возврат Префикс + КодОКДП;
КонецФункции

Функция БукваРазделаОКДП(КодОКДП) Экспорт
	Попытка
		КодРаздела = Число(Лев(КодОКДП, 2));
	Исключение
		Возврат "";
	КонецПопытки;
	
	Если КодРаздела < 3 Тогда
		возврат "A";
	ИначеЕсли КодРаздела =5 Тогда
		Возврат "B";
	ИначеЕсли КодРаздела > 9 И КодРаздела < 15 Тогда
		Возврат "C";
	ИначеЕсли КодРаздела > 14 И КодРаздела < 38 Тогда
		Возврат "D";
	ИначеЕсли КодРаздела > 39 И КодРаздела < 42 Тогда
		Возврат "E";
	ИначеЕсли КодРаздела = 45 Тогда
		Возврат "F";
	ИначеЕсли КодРаздела > 49 И КодРаздела < 53 Тогда
		Возврат "G";
	ИначеЕсли КодРаздела = 55 Тогда
		Возврат "H";
	ИначеЕсли КодРаздела > 59 И КодРаздела < 65 Тогда
		Возврат "I";
	ИначеЕсли КодРаздела > 64 И КодРаздела < 68 Тогда
		Возврат "J";
	ИначеЕсли КодРаздела > 69 И КодРаздела < 75 Тогда
		Возврат "K";
	ИначеЕсли КодРаздела = 75 Тогда
		Возврат "L";
	ИначеЕсли КодРаздела = 80 Тогда
		Возврат "M";
	ИначеЕсли КодРаздела = 85 Тогда
		Возврат "N";
	ИначеЕсли КодРаздела > 89 И КодРаздела < 95 Тогда
		Возврат "O";
	ИначеЕсли КодРаздела = 95 Тогда
		Возврат "P";
	ИначеЕсли КодРаздела = 99 Тогда
		Возврат "Q";
	КонецЕсли;
	
	Возврат "";
КонецФункции

// Получить период по дате. Периодичность определяется по периодичности закупочной процедуры.
// Возвращает:
//	- СправочникСсылка.Периоды, если удалось определить период.
//	- СправочникСсылка.Периоды.ПустаяСсылка, если не удалось.
Функция ПериодПоДатеЗакупочнойПроцедуры(ЗакупочнаяПроцедура, ДатаВПериоде) Экспорт
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура) ИЛИ НЕ ЗначениеЗаполнено(ДатаВПериоде) Тогда
		Возврат Справочники.Периоды.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ОбщегоНазначенияУХ.ПолучитьПериодПоДате(ДатаВПериоде,ЗакупочнаяПроцедура.Периодичность);
КонецФункции



#КонецОбласти


#Область Функции_обмена_с_ЭТП


// Возвращает:
//	Структура - описание статуса обмена с ЭТП и последней транзакции обмена. Поля:
//		- Статус - Перечисление.СтатусыЗакупокНаЭТП, текущий статус закупочной процедуры (Закупка).
//			Если статус не установлен, то устанавливает статус == "НеЗарегистрирована".
//		- Сотрудник - Справочник.ФизическиеЛица.  Физ. лицо производитвшее обмен
//		- ОписаниеСобытия - Строка. Описание транзакции обмена.
//		- ОтЭТПК1С - Булево. Истина - передача от ЭТП к 1С. Ложь - от 1С к ЭТП.
//		- ОшибкаОбменаСЭТП - Булево. Была ли ошибка последнего обмена или нет. Если обменов не было, то ТекстОшибки == "".
//		- ЗаписанаВЖурнал - Булево. Ошибка возникла до начала транзакции на этапе подготовки данных к отправке, и не была записана в журнал обмена с ЭТП.
//		- ТекстОшибки - Строка(0). Описание ошибки.
Функция ШаблонОписанияТранзакцииОбмена() Экспорт
	ПоляОписанияТранзакции = Новый Структура;
	ПоляОписанияТранзакции.Вставить("Завершена", Ложь); // Выполнена ли транзакция
	ПоляОписанияТранзакции.Вставить("ВидТранзакции", Неопределено); // Перечисления.ВидыТранзакцийОбменаСЭТП
	ПоляОписанияТранзакции.Вставить("Статус", Неопределено); // Статус публикации
			// Для статуса закупки на ЭТП - Перечисления.СтатусыПубликацииЗакупок
			// Для статуса плана закупок - Перечисления.СтатусыПубликацииОбъектовНаЭТП
	ПоляОписанияТранзакции.Вставить("ПланируемыйСтатус", Неопределено); // Статус закупки после выполнения транзакции. Тип аналогичен полю "Статус".
	ПоляОписанияТранзакции.Вставить("ЭТП", Справочники.ЭлектронныеТорговыеПлощадки.ПустаяСсылка()); // ЭТП
	ПоляОписанияТранзакции.Вставить("Сотрудник", Справочники.ФизическиеЛица.ПустаяСсылка()); // Физ. лицо производитвшее обмен
	ПоляОписанияТранзакции.Вставить("Организация", Справочники.Организации.ПустаяСсылка()); // Организация в рамках которой происходит обмен.
	ПоляОписанияТранзакции.Вставить("ДатаОбмена", ТекущаяУниверсальнаяДата()); // Дата транзакции
	ПоляОписанияТранзакции.Вставить("ОписаниеСобытия", ""); // Описание транзакции обмена.
	ПоляОписанияТранзакции.Вставить("ОтЭТПК1С", Ложь); // Направление транзакции
	ПоляОписанияТранзакции.Вставить("ОшибкаОбменаСЭТП", Ложь); // В процессе транзакции произошла ошибка
	ПоляОписанияТранзакции.Вставить("ЗаписанаВЖурнал", Ложь); // Записана-ли информация об ошибке в регистре сведений ЖурналОбменаСЭТП.
	ПоляОписанияТранзакции.Вставить("ТекстОшибки", ""); // Описание ошибки.
	ПоляОписанияТранзакции.Вставить("КлючСообщения", ""); // Необязательно. Уникальный идентификатор сообщения в регистре ДанныеЭТП.Ключ.
	ПоляОписанияТранзакции.Вставить("КлючОтвета", ""); // Необязательно. Уникальный идентификатор ответа в регистре ДанныеЭТП.Ключ.
	Возврат ПоляОписанияТранзакции;
КонецФункции

// Основная функция подготовки, проверки данных и вызова процедур обмена из обработок на сервере.
// Если обмен должен быть выполнен на сервере, то выполняет его. Если на клиенте, то ограничивается
// подготовкой данных:
//	- добавляет поле "ОписаниеОбмена.ИмяФормыОбмена" - полный путь для открытия формы обмена;
//	- добавляет поле "ОписаниеОбмена.ИмяФункции" - имя функции которую должна выполнить форма обмена.
// Параметры:
//	ОписаниеОбмена - Структура:
//		ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//  	ОбъектВыгрузки - Справочник.Лоты.
//		ПараметрыПодключенияКЭТП - Структура. Состав полей соответствует значению возвращаемому функцией  ШаблонОписанияПараметровПодключенияКЭТП().
//			Можно получить функцией ПолучитьПараметрыПодключенияКЭТП(ЭТП, Сотрудник).
//		ПоляОписанияТранзакции - Структура. Состав полей соответствует значению возвращаемому функцией ШаблонОписанияТранзакцииОбмена().
//			Поля, обязательные к заполнению: Статус, Сотрудник.
//		НомерПубликацииНаЭТП - Строка. Идентификатор закупки на ЭТП. Если не заполнено, то закупка не опубликована на ЭТП.
//		флТранзакцияЗавершиласьУспешно - Строка. Идентификатор закупки на ЭТП. Если не заполнено, то закупка не опубликована на ЭТП.
//
Процедура ОбработатьТранзакциюОбменаНаСервере(ОписаниеОбмена) Экспорт

	ИмяФункции = "";
	Если ОписаниеОбмена.КомандаОбмена = "ОтправитьПроцедуруЗакупкиНаЭТП" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаЧерновикаНаЭТП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииЗакупок.ЗарегистрированЧерновик;
		Если ОписаниеОбмена.ПоляОписанияТранзакции.Статус = Перечисления.СтатусыПубликацииЗакупок.ЗарегистрированЧерновик Тогда
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка изменений закупочной процедуры.'");
		Иначе
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка черновика закупочной процедуры.'");
		КонецЕсли;
		ИмяФункции = "ОтправитьПроцедуруЗакупкиНаЭТП";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ПолучитьСтатусОбъектаНаЭТП" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ПолучениеСтатусаНаЭТП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = ОписаниеОбмена.ПоляОписанияТранзакции.Статус;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Получение статуста объекта обмена.'");
		ИмяФункции = "ПолучитьСтатусОбъекта";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ПолучитьПротоколВыбораПоставщиков" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ПолучениеПротоколовВыбораПоставщиков;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииЗакупок.ПолученыПредложенияПоставщиков;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Получение протоколов выбора поставщиков.'");
		ИмяФункции = "ПолучитьПротоколВыбораПоставщиков";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтменитьЗакупку" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииЗакупок.Отменена;
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтменаПубликацииНаЭТП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отмена закупочной процедуры.'");
		ИмяФункции = "ОтменитьЗакупкуНаЭТП";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьПланЗакупки" Тогда
		Если НЕ ОписаниеОбмена.ОбъектВыгрузки.Проведен Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ОписаниеОбмена.ПоляОписанияТранзакции, 
				Символы.ПС + НСтр(СтрШаблон(
					"ru='План закупок %1 не проведен. Обмен данными невозможен!'",
					ОписаниеОбмена.ОбъектВыгрузки)));
			Возврат;
		КонецЕсли;
		
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаЧерновикаНаЭТП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		Если ОписаниеОбмена.ПоляОписанияТранзакции.Статус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован Тогда
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка изменений черновика плана закупки.'");
		Иначе
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка черновика плана закупки.'");
		КонецЕсли;
		ИмяФункции = "ОтправитьПланЗакупокНаЭТП";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьПроектПланаЗакупки" Тогда
		Если НЕ ОписаниеОбмена.ОбъектВыгрузки.Проведен Тогда
			ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(
				ОписаниеОбмена.ПоляОписанияТранзакции, 
				Символы.ПС + НСтр(СтрШаблон(
					"ru='План закупок %1 не проведен. Обмен данными невозможен!'",
					ОписаниеОбмена.ОбъектВыгрузки)));
			Возврат;
		КонецЕсли;
		
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаЧерновикаНаЭТП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка проекта плана закупки.'");
		ИмяФункции = "ОтправитьПроектПланаЗакупки";
	
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьПротоколВыбораПобедителей" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаПротоколаВыбораПобедителей;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		Если ОписаниеОбмена.ПоляОписанияТранзакции.Статус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован Тогда
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка протокола выбора победителей.'");
		Иначе
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка черновика протокола выбора победителей.'");
		КонецЕсли;
		ИмяФункции = "ОтправитьПротоколВыбораПобедителей";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьДоговорНаЭТП" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаЧерновикаНаЭТП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		Если ОписаниеОбмена.ПоляОписанияТранзакции.Статус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован Тогда
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка изменений черновика договора.'");
		Иначе
			ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка черновика договора.'");
		КонецЕсли;
		ИмяФункции = "ОтправитьДоговорНаЭТП";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьИсполнениеДоговора" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаСведенийОбИсполненииДоговора;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка сведений об исполнении договора.'");
		ИмяФункции = "ОтправитьИсполнениеДоговора";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьОбъемЗакупокУМCП" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаОбъемаЗакупокУМCП;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка сведений о годовых закупках у МСП.'");
		ИмяФункции = "ОтправитьОбъемЗакупокУМCП";
		
	ИначеЕсли ОписаниеОбмена.КомандаОбмена = "ОтправитьОтчетОЗаключенныхДоговорах" Тогда
		ОписаниеОбмена.ПоляОписанияТранзакции.ВидТранзакции = Перечисления.ВидыТранзакцийОбменаСЭТП.ОтправкаОтчетаОЗаключенныхДоговорах;
		ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус = Перечисления.СтатусыПубликацииОбъектовНаЭТП.Зарегистрирован;
		ОписаниеОбмена.ПоляОписанияТранзакции.ОписаниеСобытия = НСтр("ru='Отправка отчета о заключенных договорах.'");
		ИмяФункции = "ОтправитьОтчетОЗаключенныхДоговорах";
		
	Иначе
		УстановитьЗначениеОшибки(
			ОписаниеОбмена.ПоляОписанияТранзакции, 
			НСтр(СтрШаблон(
				"ru='Не распознана команда для обмена с ЭТП!'",
				ОписаниеОбмена.КомандаОбмена)));
		Возврат;
	КонецЕсли;

	ОписаниеОбмена.ПоляОписанияТранзакции.Завершена = Ложь;
	ОписаниеОбмена.ПоляОписанияТранзакции.ДатаОбмена = ТекущаяУниверсальнаяДата();
	
	Если ОписаниеОбмена.ПараметрыПодключенияКЭТП.ОбменНаСервере Тогда
		// Выполняем обмен на стороне сервера
		Попытка
			// Обработчик функций интеграции
			Обработка = Справочники.ЭлектронныеТорговыеПлощадки.ПолучитьОбработкуИнтеграции(ОписаниеОбмена.ЭТП);
			
			// Выполняем команду обмена
			Выполнить("ОписаниеОбмена.флТранзакцияЗавершиласьУспешно = Обработка." + ИмяФункции + 
						"(ОписаниеОбмена.ЭТП,
						|ОписаниеОбмена.ОбъектВыгрузки,
						|ОписаниеОбмена.ПараметрыПодключенияКЭТП,
						|ОписаниеОбмена.ПоляОписанияТранзакции)");
						
			ИнтеграцияЦУЗсЭТПСерверУХ.ПослеОбменаНаСервере(ОписаниеОбмена);
			
		Исключение
			Инфо = ИнформацияОбОшибке();
			ТекстОшибки = НСтр("ru='Ошибка вызова команды обмена:'") + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
			ИнтеграцияЦУЗсЭТПСерверУХ.ЗарегистрироватьОшибку(ОписаниеОбмена.ПоляОписанияТранзакции, ТекстОшибки);
			ОписаниеОбмена.флТранзакцияЗавершиласьУспешно = Ложь;
		КонецПопытки;
		
		Возврат;
	КонецЕсли;
	
	// Подготовка данных для вызова формы обработки на клиенте
	ЭтоВнешняяОбработка = Неопределено;
	ИмяОбработки = Справочники.ЭлектронныеТорговыеПлощадки.ПолучитьИмяОбработкиИнтеграции(ОписаниеОбмена.ЭТП, ЭтоВнешняяОбработка);
	
	ИмяФормыОбмена = "";
	Если НЕ ПустаяСтрока(ИмяОбработки) Тогда
		Если ЭтоВнешняяОбработка Тогда
			ИмяФормыОбмена = "ВнешняяОбработка." + ИмяОбработки + ".Форма";
		Иначе
			ИмяФормыОбмена = "Обработка." + ИмяОбработки + ".Форма";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФормыОбмена) Тогда
		УстановитьЗначениеОшибки(
			ОписаниеОбмена.ПоляОписанияТранзакции, 
			НСтр("ru='Не удалось определить обработку обмена. Проверьте настройки.'"));
		Возврат;
	КонецЕсли;

	ОписаниеОбмена.Вставить("ИмяФормыОбмена", ИмяФормыОбмена);
	ОписаниеОбмена.Вставить("ИмяФункции", ИмяФункции);
	
КонецПроцедуры

// Обработка данных после обмена на сервере: запись лога в БД, изменение статуса транзакции.
// Если обмен должен быть выполнен на сервере, то выполняет его. Если на клиенте, то ограничивается
// подготовкой данных:
//	- добавляет поле "ОписаниеОбмена.ИмяФормыОбмена" - полный путь для открытия формы обмена;
//	- добавляет поле "ОписаниеОбмена.ИмяФункции" - имя функции которую должна выполнить форма обмена.
// Параметры:
//	ОписаниеОбмена - Структура:
//		ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//  	ОбъектВыгрузки - Справочник.Лоты.
//		ПараметрыПодключенияКЭТП - Структура. Состав полей соответствует значению возвращаемому функцией  ШаблонОписанияПараметровПодключенияКЭТП().
//			Можно получить функцией ПолучитьПараметрыПодключенияКЭТП(ЭТП, Сотрудник).
//		ПоляОписанияТранзакции - Структура. Состав полей соответствует значению возвращаемому функцией ШаблонОписанияТранзакцииОбмена().
//			Поля, обязательные к заполнению: Статус, Сотрудник.
//		НомерПубликацииНаЭТП - Строка. Идентификатор закупки на ЭТП. Если не заполнено, то закупка не опубликована на ЭТП.
//		флТранзакцияЗавершиласьУспешно - Строка. Идентификатор закупки на ЭТП. Если не заполнено, то закупка не опубликована на ЭТП.
//
Процедура ПослеОбменаНаСервере(ОписаниеОбмена) Экспорт
	// Обновялем данные статуса публикации
	Если ОписаниеОбмена.флТранзакцияЗавершиласьУспешно И ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус <> ОписаниеОбмена.ПоляОписанияТранзакции.Статус Тогда
		ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьСтатусПубликацииОбъектаНаЭТП(ОписаниеОбмена.ЭТП, ОписаниеОбмена.ОбъектВыгрузки, ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус, ОписаниеОбмена.ПоляОписанияТранзакции.ДатаОбмена);
		ОписаниеОбмена.ПоляОписанияТранзакции.Статус = ОписаниеОбмена.ПоляОписанияТранзакции.ПланируемыйСтатус;
	КонецЕсли;
	
	// Записываем в журнал данные транзакции обмена
	ИнтеграцияЦУЗсЭТПСерверУХ.ЗаписатьСобытиеЖурнала(ОписаниеОбмена.ОбъектВыгрузки, ОписаниеОбмена.ЭТП, ОписаниеОбмена.ПоляОписанияТранзакции);
КонецПроцедуры

// Получить перечень ЭТП поддерживающих обмен планами закупки
// Возвращает:
//	Массив - элементы - СправочникСсылка.ЭлектронныеТорговыеПлощадки
Функция ПолучитьЭТПДляПлановЗакупки() Экспорт
	мЭТП = Новый Массив;
	ЭТП = Справочники.ЭлектронныеТорговыеПлощадки.НайтиПоНаименованию("new.zakupky.gov.ru", Истина);
	Если НЕ ЭТП = Неопределено Тогда
		мЭТП.Добавить(ЭТП);
	КонецЕсли;
	
	Возврат мЭТП;
КонецФункции

// Получить перечень ЭТП поддерживающих обмен закупочными процедурами
// Возвращает:
//	Массив - элементы - СправочникСсылка.ЭлектронныеТорговыеПлощадки
Функция ПолучитьЭТПДляЛотов() Экспорт
	мНаименований = Новый Массив;
	мНаименований.Добавить("fabrikant.ru");
	мНаименований.Добавить("new.zakupky.gov.ru");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеТорговыеПлощадки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭлектронныеТорговыеПлощадки КАК ЭлектронныеТорговыеПлощадки
		|ГДЕ
		|	НЕ ЭлектронныеТорговыеПлощадки.ПометкаУдаления
		|	И ЭлектронныеТорговыеПлощадки.Наименование В(&мНаименований)";
	
	Запрос.УстановитьПараметр("мНаименований", мНаименований);
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции

// Получить перечень ЭТП поддерживающих обмен для различных типов объектов обмена
// Возвращает:
//	Соответствие -
//			ключ - тип объекта из ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ,
//			значение - Массив, элементы которого - СправочникСсылка.ЭлектронныеТорговыеПлощадки
Функция ПолучитьЭТПДляТипов() Экспорт
	ТипыДляЭТП = Новый Соответствие;
	
	ЕИС = Справочники.ЭлектронныеТорговыеПлощадки.НайтиПоНаименованию("new.zakupky.gov.ru", Истина);
	Фабрикант = Справочники.ЭлектронныеТорговыеПлощадки.НайтиПоНаименованию("fabrikant.ru", Истина);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	мЭТП.Добавить(Фабрикант);
	ТипыДляЭТП.Вставить(Тип("СправочникСсылка.Лоты"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("ДокументСсылка.ПрограммаЗакупок"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("ДокументСсылка.ПротоколВыбораПобедителей"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("ДокументСсылка.ПротоколОтменыЗакупочнойПроцедуры"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("ДокументСсылка.СведенияОбИсполненииДоговора"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("ДокументСсылка.РегистрацияОбъемаЗакупокУМСП"), мЭТП);
	
	мЭТП = Новый Массив;
	мЭТП.Добавить(ЕИС);
	ТипыДляЭТП.Вставить(Тип("ДокументСсылка.РегистрацияОтчетаОЗаключенныхДоговорах"), мЭТП);
	
	Возврат ТипыДляЭТП;
КонецФункции


#КонецОбласти


#Область Функции_доступа_к_данным_УХ_из_обработок_обмена


// Установить значения полей описания транзакции для переданной ошибки.
Процедура УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки) Экспорт
	ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки);
КонецПроцедуры

// По статусу публикации лота получаем его статус.
// Если статус менять нет необходимости, то возвраащет Неопределено.
Функция СтатусЗакупкиПоСтатусуПубликации(СтатусПубликации) Экспорт
	Если НЕ ЗначениеЗаполнено(СтатусПубликации) ИЛИ
		СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.НеЗарегистрирована Тогда
		Возврат Перечисления.СтатусыЛотов.ПубликацияЗаявки;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.ЗарегистрированЧерновик Тогда
		Возврат Перечисления.СтатусыЛотов.СборПредложенийПоставщиков;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.ОпубликованаИдетСборЗаявок Тогда
		Возврат Перечисления.СтатусыЛотов.СборПредложенийПоставщиков;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.ПолученыПредложенияПоставщиков Тогда
		Возврат Перечисления.СтатусыЛотов.ВыборПоставщика;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.ЗакрытаУспешно Тогда
		Возврат Перечисления.СтатусыЛотов.ВыборПоставщика;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.Приостановлена Тогда
		Возврат Перечисления.СтатусыЛотов.СборПредложенийПоставщиков;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.ЗакрытаОтказ Тогда
		Возврат Перечисления.СтатусыЛотов.ЗакрытСОтменой;
	ИначеЕсли СтатусПубликации = Перечисления.СтатусыПубликацииЗакупок.Отменена Тогда
		Возврат Перечисления.СтатусыЛотов.ЗакрытСОтменой;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Получить ЭТП для объекта, если уже был обмен.
// Параметры:
//	ОбъектВыгруки - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Объект для которого получем ЭТП.
// Возвращает:
//	СправочникСсылка.ЭлектронныеТорговыеПлощадки - если ЭТП найдена.
//	Справочники.ЭлектронныеТорговыеПлощадки.ПустаяСсылка() - обмена небыло, ЭТП определить невозможно.
//
Функция ПолучитьЭТПОбъекта(ОбъектВыгрузки) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЖурналОбменаСЭТП.ЭТП КАК ЭТП
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|ГДЕ
		|	ЖурналОбменаСЭТП.ОбъектОбмена = &ОбъектОбмена
		|	И ЖурналОбменаСЭТП.ЭТП <> ЗНАЧЕНИЕ(Справочник.ЭлектронныеТорговыеПлощадки.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЖурналОбменаСЭТП.ДатаОбмена УБЫВ,
		|	ЖурналОбменаСЭТП.НомерЗаписи УБЫВ";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектВыгрузки);
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.ЭТП;
	КонецЦикла;
	
	Возврат Справочники.ЭлектронныеТорговыеПлощадки.ПустаяСсылка();
КонецФункции

// Получить структуру с описанием ответственного за закупку
// Параметры:
//  ЗакупочнаяПроцедура - Справочник.Лоты.
// Возвращает:
//	Неопределено - для закупочной процедуры не определено ответсвенное лицо.
//	Структура - с описанием ответственного лица:
//		Фамилия - Строка.
//		Имя - Строка.
//		Отчество - Строка.
//		Телефон - Строка.
//		Email - Строка.
Функция ПолучитьОписаниеОтветсвенногоЛица(ЗакупочнаяПроцедура) Экспорт
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.Ответственный) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура.Ответственный.ФизическоеЛицо) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОписаниеОтветственного = Новый Структура("Фамилия,Имя,Отчество,Телефон,Email", "", "", "", "", "");
	
	ФизическоеЛицо = ЗакупочнаяПроцедура.Ответственный.ФизическоеЛицо;
	
	СтруктураФИО = ФизическиеЛицаКлиентСервер.ЧастиИмени(ФизическоеЛицо.ФИО);
	ОписаниеОтветственного.Фамилия = ?(СтруктураФИО.Фамилия = Неопределено, "", СтруктураФИО.Фамилия);
	ОписаниеОтветственного.Имя = ?(СтруктураФИО.Имя = Неопределено, "", СтруктураФИО.Имя);
	ОписаниеОтветственного.Отчество = ?(СтруктураФИО.Отчество = Неопределено, "", СтруктураФИО.Отчество);
	
	КонтактнаяИнформация = ИнтеграцияЦУЗсЭТПСерверУХ.ПолучитьКонтактнуюИнформацию(ЗакупочнаяПроцедура.Ответственный);
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Телефон) Тогда
		ОписаниеОтветственного.Телефон = КонтактнаяИнформация.Телефон;
	КонецЕсли;
	Если ЗначениеЗаполнено(КонтактнаяИнформация.Email) Тогда
		ОписаниеОтветственного.Email = КонтактнаяИнформация.Email;
	КонецЕсли;
	
	Возврат ОписаниеОтветственного;
КонецФункции

// Получить описание номенклатуры лота в виде таблицы значений.
// Параметры:
//	Лот - СправочникСсылка.Лот, закупочная процедура по которой получаем таблицу номенклатуры.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает номенклатуру лота. Поля:
//	Идентификатор - Строка, уникальный идентификатор строки, по которому ее можно будет найти в УХ.
//	Номенклатура - СправочникСсылка.Номенклатура;
//	НоменклатураНаименование - Строка, полное наименование номенклатуры;
//	АдресМестаПоставки - Строка, содержимое поля Адрес реквизита МестоПоставки (если заполнено);
//	МестоПоставкиОКАТО - Строка, содержимое поля КодПоОКАТО реквизита МестоПоставки (если заполнено);
//	КодОКПД2 - Строка, код ОКПД2 номенклатуры;
//	КодОКВЭД2 - Строка, код ОКВЭД2 номенклатуры;
//	ЕдиницаИзмерения - ОпределяемыйТип.ТипЕдиницаИзмеренияЕХ, базовая единица измерения, в ней выражено количество закупки;
//	ЕдиницаИзмеренияКод - Строка, ОКЕИ единицы измерения;
//	ЭтоТоварнаяКатегория - Булево, если истина, то это товарная категория, количество = 0;
//	Количество - Число, количество закупаемой номенклатуры в базовой единице измерения;
//	Сумма - Число, планируемая сумма закупки по указанной номенклатуре;
//	СтавкаНДС - Перечисление.СтавкиНДС, для товарных категорий всегда == БезНДС;
//	ВеличинаСтавкиНДС - Число, значение ставки НДС, если БезНДС, то 0.
//
Функция ПолучитьОписаниеНоменклатурыЛота(Лот, ТекстОшибки) Экспорт
	Возврат ПолучитьОписаниеТаблицыНоменклатурыОбъекта(
		Лот, 
		"Номенклатура",
		НСтр("ru='лота'"),
		ТекстОшибки);
КонецФункции

// Получить описание номенклатуры строки плана закупок в виде таблицы значений.
// Параметры:
//	СтрокаПлана - ДокументСсылка.СтрокаПланаЗакупок, закупочная процедура по которой получаем таблицу номенклатуры.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает номенклатуру лота. Поля:
//		Идентификатор - Строка, уникальный идентификатор строки, по которому ее можно будет найти в УХ.
//		Номенклатура - СправочникСсылка.Номенклатура;
//		НоменклатураНаименование - Строка, полное наименование номенклатуры;
//		АдресМестаПоставки - Строка, содержимое поля Адрес реквизита МестоПоставки (если заполнено);
//		МестоПоставкиОКАТО - Строка, содержимое поля КодПоОКАТО реквизита МестоПоставки (если заполнено);
//		КодОКПД2 - Строка, код ОКПД2 номенклатуры;
//		КодОКВЭД2 - Строка, код ОКВЭД2 номенклатуры;
//		ЕдиницаИзмерения - ОпределяемыйТип.ТипЕдиницаИзмеренияЕХ, базовая единица измерения, в ней выражено количество закупки;
//		ЕдиницаИзмеренияКод - Строка, ОКЕИ единицы измерения;
//		ЭтоТоварнаяКатегория - Булево, если истина, то это товарная категория, количество = 0;
//		Количество - Число, количество закупаемой номенклатуры в базовой единице измерения;
//		Сумма - Число, планируемая сумма закупки по указанной номенклатуре;
//		СтавкаНДС - Перечисление.СтавкиНДС, для товарных категорий всегда == БезНДС;
//		ВеличинаСтавкиНДС - Число, значение ставки НДС, если БезНДС, то 0.
//
Функция ПолучитьОписаниеНоменклатурыСтрокиПланаЗакупок(СтрокаПлана, ТекстОшибки) Экспорт
	Возврат ПолучитьОписаниеТаблицыНоменклатурыОбъекта(
		СтрокаПлана, 
		"Номенклатура",
		НСтр("ru='строки плана закупок'"),
		ТекстОшибки);
КонецФункции

// Получить описание номенклатуры документа в виде таблицы
// пригодной для отправки на ЕИС.
//
// Параметры:
//	СтрокаПлана - ДокументСсылка.СтрокаПланаЗакупок - закупочная процедура
//				  по которой получаем таблицу номенклатуры.
//
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает номенклатуру лота. Поля:
//	Идентификатор - Строка, уникальный идентификатор строки, по которому ее можно будет найти в УХ.
//	Номенклатура - СправочникСсылка.Номенклатура;
//	НоменклатураНаименование - Строка, полное наименование номенклатуры;
//	АдресМестаПоставки - Строка, содержимое поля Адрес реквизита МестоПоставки (если заполнено);
//	МестоПоставкиОКАТО - Строка, содержимое поля КодПоОКАТО реквизита МестоПоставки (если заполнено);
//	КодОКПД2 - Строка, код ОКПД2 номенклатуры;
//	КодОКВЭД2 - Строка, код ОКВЭД2 номенклатуры;
//	ЕдиницаИзмерения - ОпределяемыйТип.ТипЕдиницаИзмеренияЕХ, базовая единица измерения, в ней выражено количество закупки;
//	ЕдиницаИзмеренияКод - Строка, ОКЕИ единицы измерения;
//	ЭтоТоварнаяКатегория - Булево, если истина, то это товарная категория, количество = 0;
//	Количество - Число, количество закупаемой номенклатуры в базовой единице измерения;
//	Сумма - Число, планируемая сумма закупки по указанной номенклатуре;
//	СтавкаНДС - Перечисление.СтавкиНДС, для товарных категорий всегда == БезНДС;
//	ВеличинаСтавкиНДС - Число, значение ставки НДС, если БезНДС, то 0.
//
Функция ПолучитьОписаниеТаблицыНоменклатурыОбъекта(
									Ссылка, 
									ИмяТЧНоменклатура, 
									ПредставлениеОбъектаРодительныйПадеж, 
									ТекстОшибки)
	Попытка
		МетаданныеОбъекта = Ссылка.Метаданные();
		ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
		Запрос = Новый Запрос;
		Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаНоменклатурыДокумента.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ТаблицаНоменклатурыДокумента.Номенклатура.Наименование
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ТаблицаНоменклатурыДокумента.Номенклатура.НаименованиеПолное = """"
			|					ТОГДА ТаблицаНоменклатурыДокумента.Номенклатура.Наименование
			|				ИНАЧЕ ТаблицаНоменклатурыДокумента.Номенклатура.НаименованиеПолное
			|			КОНЕЦ
			|	КОНЕЦ КАК НоменклатураНаименование,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКДП, """") КАК КодОКДП,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКПД2.Код, """") КАК КодОКПД2,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКВЭД.Код, """") КАК КодОКВЭД,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКВЭД2.Код, """") КАК КодОКВЭД2,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.ЕдиницаИзмерения.Код, ""876"") КАК ЕдиницаИзмеренияКод,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТоварнаяКатегория,
			|	СУММА(ВЫБОР
			|			КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.Номенклатура
			|				ТОГДА ТаблицаНоменклатурыДокумента.Количество
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество,
			|	СУММА(ТаблицаНоменклатурыДокумента.Сумма) КАК Сумма,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
			|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтавкаНДС
			|	КОНЕЦ КАК СтавкаНДС,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтавкаНДС.Ставка
			|	КОНЕЦ КАК ВеличинаСтавкиНДС,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ТаблицаНоменклатурыДокумента.МестоПоставки.КодПоОКАТО = ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)
			|				ТОГДА """"
			|			ИНАЧЕ ЕСТЬNULL(ТаблицаНоменклатурыДокумента.МестоПоставки.КодПоОКАТО, """")
			|		КОНЕЦ) КАК МестоПоставкиОКАТО,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.МестоПоставки = ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)
			|			ТОГДА """"
			|		ИНАЧЕ ПОДСТРОКА(ТаблицаНоменклатурыДокумента.МестоПоставки.Адрес, 1, 1000)
			|	КОНЕЦ КАК АдресМестаПоставки,
			|	ТаблицаНоменклатурыДокумента.МестоПоставки КАК МестоПоставки
			|ИЗ
			|	Документ.СтрокаПланаЗакупок.Номенклатура КАК ТаблицаНоменклатурыДокумента
			|ГДЕ
			|	ТаблицаНоменклатурыДокумента.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ТаблицаНоменклатурыДокумента.Номенклатура,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ТаблицаНоменклатурыДокумента.Номенклатура.Наименование
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ТаблицаНоменклатурыДокумента.Номенклатура.НаименованиеПолное = """"
			|					ТОГДА ТаблицаНоменклатурыДокумента.Номенклатура.Наименование
			|				ИНАЧЕ ТаблицаНоменклатурыДокумента.Номенклатура.НаименованиеПолное
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКДП, """"),
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКПД2.Код, """"),
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКВЭД.Код, """"),
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.КодОКВЭД2.Код, """"),
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО),
			|	ЕСТЬNULL(ТаблицаНоменклатурыДокумента.Номенклатура.ЕдиницаИзмерения.Код, ""876""),
			|	ТаблицаНоменклатурыДокумента.МестоПоставки,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.МестоПоставки = ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)
			|			ТОГДА """"
			|		ИНАЧЕ ПОДСТРОКА(ТаблицаНоменклатурыДокумента.МестоПоставки.Адрес, 1, 1000)
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
			|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтавкаНДС
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ТаблицаНоменклатурыДокумента.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА 0
			|		ИНАЧЕ ТаблицаНоменклатурыДокумента.СтавкаНДС.Ставка
			|	КОНЕЦ";
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Документ.СтрокаПланаЗакупок.Номенклатура",
			ПолноеИмяОбъектаМетаданных + "." + ИмяТЧНоменклатура);
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		РезультатЗапроса = Запрос.Выполнить();
		ТЗРез = РезультатЗапроса.Выгрузить();
		ТЗРез.Колонки.Добавить("Идентификатор",
				Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
		Для Каждого СтрокаЛота Из ТЗРез Цикл
			СтрокаЛота.Идентификатор = ИнтеграцияЦУЗсЭТПСерверУХ.ИдентификаторСтрокиЛота(СтрокаЛота);
		КонецЦикла;
		Возврат ТЗРез;
		Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = 
			НСтр(СтрШаблон(
				"ru='Ошибка получения таблицы номенклатуры для %1 %2.'",
				ПредставлениеОбъектаРодительныйПадеж,
				Ссылка))
			+ Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
		Возврат Неопределено;
	КонецПопытки;
	ТекстОшибки = НСтр(СтрШаблон(
		"ru='Неопознанная ошибка получения таблицы номенклатуры для %1 %2.'",
		ПредставлениеОбъектаРодительныйПадеж,
		Ссылка));
	Возврат Неопределено;
КонецФункции

// Получить описание предложений поставщиков из протокола-документа
// в виде таблицы значений.
//
// Параметры:
//	ПротоколВыбораПобедителей - ДокументСсылка.ПротоколВыбораПобедителей.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает предложения поставщиков из документа.
//		Описание полей см. функции:
//			ПолучитьОписаниеПредложенийПобедителей;
//			ПолучитьОписаниеВскрытияКонвертов;
//			ПолучитьОписаниеРассмотренияЗаявок.
//
Функция ПолучитьОписаниеПредложенийПоставщиков(ДокументПротокол, ТекстОшибки) Экспорт
	ТипПротокола = ТипЗнч(ДокументПротокол);
	Если ТипПротокола = Тип("ДокументСсылка.ПротоколВыбораПобедителей") Тогда
		Возврат ПолучитьОписаниеПредложенийПобедителей(
			ДокументПротокол,
			ТекстОшибки);
	КонецЕсли;
	ТекстОшибки = НСтр(СтрШаблон(
		"ru='Не поддерживается получение предложений поставщиков по протоколу:%1""%2""!'",
		Символы.ПС,
		Строка(ТипПротокола)));
	Возврат Неопределено;
КонецФункции

// Получить описание предложений поставщиков из протокола
// выбора победителей в виде таблицы значений.
//
// Параметры:
//	ПротоколВыбораПобедителей - ДокументСсылка.ПротоколВыбораПобедителей.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает номенклатуру лота. Поля:
//		ПредложениеУчастника - ДокументСсылка.ПредложениеПоставщика.
//		ДатаПодачиЗаявки - Дата+Время, дата документа ПредложениеПоставщика.
//		Номер - Строка, номер документа.
//		ПоставщикСМП - Булево, относится ли поставщик к субъектам малого и среднего предпринимательства.
//		Контрагент - СправочникСсылка.Контрагенты, поставщик.
//		СуммаДокумента - Число(15,2).
//		ВалютаДокумента - СправочникСсылка.Валюты.
//		СведенияОбОбъемеЗакупки - Строка(2000), текстовое описание товаров и услуг из табличной части УсловияПоНоменклатуре.
//									Заполняется функцией ПолучитьПредставлениеОбъемаЗакупки().
//		СрокиВыполненияДоговора - Строка(500).
//		Допущен - Булево, Истина - предложение поставщика допущено к участию. Ложь - не допущено.
//		Место - Число, 0 - не входит в победителей. Если больше нуля, то - это место которое заняло предолжение.
//
Функция ПолучитьОписаниеПредложенийПобедителей(ПротоколВыбораПобедителей, ТекстОшибки) Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПредложениеПоставщикаДокумент.Ссылка КАК ПредложениеУчастника,
			|	ПредложениеПоставщикаДокумент.ДатаОтправкиЗаявки КАК ДатаПодачиЗаявки,
			|	ПредложениеПоставщикаДокумент.Номер КАК Номер,
			|	ЕСТЬNULL(РазмерыКонтрагентовДляЕИССрезПоследних.Контрагент, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.РазмерыКонтрагентовДляЕИС.Крупный) КАК ПоставщикСМП,
			|	ПредложениеПоставщикаДокумент.Контрагент КАК Контрагент,
			|	ПредложениеПоставщикаДокумент.СуммаДокумента КАК СуммаДокумента,
			|	ПредложениеПоставщикаДокумент.ВалютаДокумента КАК ВалютаДокумента,
			|	ПредложениеПоставщикаДокумент.СрокиВыполненияДоговора КАК СрокиВыполненияДоговора,
			|	ПредложениеПоставщикаДокумент.ДопущенКУчастию КАК ДопущенКУчастию,
			|	ЕСТЬNULL(ПротоколВыбораПобедителейПредложенияПобедителей.Место, 0) КАК Место,
			|	ПредложениеПоставщикаДокумент.ПричинаОтказаВДоступе КАК ПричинаОтказаВДоступе,
			|	ПредложениеПоставщикаДокумент.ПоследняяЦена КАК ПоследняяЦена,
			|	ПредложениеПоставщикаДокумент.ПредпоследняяЦена КАК ПредпоследняяЦена
			|ИЗ
			|	Документ.ПротоколВыбораПобедителей КАК ПротоколВыбораПобедителей
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПредложениеПоставщика КАК ПредложениеПоставщикаДокумент
			|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПротоколВыбораПобедителей.ПредложенияПобедителей КАК ПротоколВыбораПобедителейПредложенияПобедителей
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыКонтрагентовДляЕИС.СрезПоследних(&ДатаПротокола, ) КАК РазмерыКонтрагентовДляЕИССрезПоследних
			|				ПО ПротоколВыбораПобедителейПредложенияПобедителей.Поставщик = РазмерыКонтрагентовДляЕИССрезПоследних.Контрагент
			|			ПО (ПротоколВыбораПобедителейПредложенияПобедителей.Ссылка = &ПротоколВыбораПобедителей)
			|				И ПредложениеПоставщикаДокумент.Ссылка = ПротоколВыбораПобедителейПредложенияПобедителей.ПредложениеПоставщика
			|		ПО ПротоколВыбораПобедителей.ЗакупочнаяПроцедура = ПредложениеПоставщикаДокумент.Лот.Владелец
			|			И (ПредложениеПоставщикаДокумент.Проведен)
			|ГДЕ
			|	ПротоколВыбораПобедителей.Ссылка = &ПротоколВыбораПобедителей";
		
		Запрос.УстановитьПараметр("ПротоколВыбораПобедителей", ПротоколВыбораПобедителей);
		Запрос.УстановитьПараметр("ДатаПротокола", ПротоколВыбораПобедителей.ДатаПодписания);
		РезультатЗапроса = Запрос.Выполнить();
		ТЗРез = РезультатЗапроса.Выгрузить();
		ТЗРез.Колонки.Добавить("СведенияОбОбъемеЗакупки", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(2000)));
		Для Каждого СтрокаПредложения Из ТЗРез Цикл
			СтрокаПредложения.СведенияОбОбъемеЗакупки = ПолучитьПредставлениеОбъемаЗакупки(СтрокаПредложения.ПредложениеУчастника);
		КонецЦикла;
		Возврат ТЗРез;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = НСтр(СтрШаблон(
			"ru='Ошибка получения таблицы предложений участников для протокола выбора победителей %1.'",
			 ПротоколВыбораПобедителей)) + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
		Возврат Неопределено;
	КонецПопытки;
	ТекстОшибки = НСтр(СтрШаблон(
			"ru='Неопознанная ошибка получения таблицы участников для протокола выбора победителей %1.'",
		ПротоколВыбораПобедителей));
	Возврат Неопределено;
КонецФункции

// Формирует текстовое описание табличной части УсловияПоНоменклатуре документа ПредложениеПоставщика
Функция ПолучитьПредставлениеОбъемаЗакупки(ПредложениеПоставщика)
	ТекстПредставления = "";
	флПерваяСтрока = Истина;
	
	Для Каждого Строка_ Из ПредложениеПоставщика.УсловияПоНоменклатуре Цикл
		Номенклатура = Строка_.Номенклатура;
		
		Если флПерваяСтрока Тогда
			флПерваяСтрока = Ложь;
		Иначе
			ТекстПредставления = ТекстПредставления + "; ";
		КонецЕсли;
		ТекстПредставления = ТекстПредставления + Номенклатура.Наименование + " - "
			+ Формат(Строка_.Количество, "ЧГ=") + " ("
			+ ?(ЗначениеЗаполнено(Строка_.ЕдиницаИзмерения), Строка_.ЕдиницаИзмерения.Код, "876") + ")";
		
	КонецЦикла;

	Возврат ТекстПредставления;
КонецФункции

// Получить идентификатор строки номенклатуры лота. Используется в функции ПолучитьОписаниеНоменклатурыЗакупки().
// Параметры:
//	СтрокаЛота - СтрокаТаблицыЗначений. Описание реквизитов строки см. функцию ПолучитьОписаниеНоменклатурыЗакупки().
// Возвращает:
//	Строка(0) - идентификатор однозначно характеризующий строку лота.
// Примечание:
//	Текущая реализация основана на уникальности строк по колнкам Номенклатура+МестоПоставки.
Функция ИдентификаторСтрокиЛота(СтрокаЛота) Экспорт
	Если Не ЗначениеЗаполнено(СтрокаЛота) Тогда
		Возврат "";
	КонеЦЕсли;
	Номенклатура = СтрокаЛота.Номенклатура;
	Если Не ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат "";
	КонеЦЕсли;
	
	МестоПоставки = СтрокаЛота.МестоПоставки;
	Префикс = "";
	Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.ТоварныеКатегории") Тогда
		Префикс = "k";
	КонецЕсли;
	
	Возврат Префикс + Строка(Номенклатура.УникальныйИдентификатор()) + "_" + ?(ЗначениеЗаполнено(МестоПоставки), Строка(МестоПоставки.УникальныйИдентификатор()), "");
КонецФункции

// Получить структуру с заполненными полями отбора одной строки из номенклатуры лота.
// Параметры:
//	Идентификатор - Строка(0). Идентификатор полученный функцией ИдентификаторСтрокиЛота().
// Возвращает:
//	- Структура. Ее поля - имена ключевых полей из таблицы получаемой функцией ПолучитьОписаниеНоменклатурыЗакупки().
//		Сейчас это Номенклатура и МестоПоставки.
//	- Неопределено - не удалось определить значения ключевых полей по идентификатору.
Функция ПолучитьОтборСтрокиЛотаПоИдентификатору(Идентификатор) Экспорт
	Если ПустаяСтрока(Идентификатор) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Лев(Идентификатор, 1) = "k" Тогда
		флЭтоТоварнаяКатегория = Истина;
		НачалоМестаПоставки = 39;
		УИД_Номенклатуры = Сред(Идентификатор, 2, 37);
	Иначе
		флЭтоТоварнаяКатегория = Ложь;
		НачалоМестаПоставки = 38;
		УИД_Номенклатуры = Сред(Идентификатор, 1, 36);
	КонецЕсли;
	
	Если ПустаяСтрока(УИД_Номенклатуры) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если флЭтоТоварнаяКатегория Тогда
		НоменклатураСсылка = Справочники.ТоварныеКатегории.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД_Номенклатуры));
	Иначе
		НоменклатураСсылка = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД_Номенклатуры));
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Номенклатура,МестоПоставки", НоменклатураСсылка, Справочники.МестаПоставки.ПустаяСсылка());
	
	УИД_МестаПоставки = Сред(Идентификатор, НачалоМестаПоставки);
	Если НЕ ПустаяСтрока(УИД_МестаПоставки) Тогда
		СтруктураОтбора.МестоПоставки = Справочники.МестаПоставки.ПолучитьСсылку(Новый УникальныйИдентификатор(УИД_МестаПоставки));
	КонецЕсли;
	
	Возврат СтруктураОтбора;
КонецФункции

// Сохранить строку с адресом закупочной процедуры на сайте ЭТП (http://АдресСайта/АдресЗакупочнойПроцедуры).
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
//	АдресНаСайте - Строка. Адрес закупки на сайте.
Процедура УстановитьАдресЗакупкиНаСайтеЭТП(ЭТП, ЗакупочнаяПроцедура, АдресНаСайте) Экспорт
	Если НЕ ЗначениеЗаполнено(ЭТП)
		ИЛИ НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура)
		ИЛИ НЕ ЗначениеЗаполнено(АдресНаСайте) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьЗначениеРеквизитаЭТП(ЭТП, ЗакупочнаяПроцедура, "ProcedureUrl", АдресНаСайте);
КонецПроцедуры

// Возвращает строку с адресом закупочной процедуры на сайте ЭТП (http://АдресСайта/АдресЗакупочнойПроцедуры).
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
// Возвращает:
//	Строка - адрес на сайте. Если адрес получить невозможно, то возвращает пустую строку.
Функция ПолучитьАдресЗакупкиНаСайтеЭТП(ЭТП, ЗакупочнаяПроцедура) Экспорт
	Если НЕ ЗначениеЗаполнено(ЭТП)
		ИЛИ НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура) Тогда
		Возврат "";
	КонецЕсли;
	
	ProcedureUrl = ИнтеграцияЦУЗсЭТПСерверУХ.ЗначениеРеквизитаЭТП(ЭТП, ЗакупочнаяПроцедура, "ProcedureUrl");
	Если ProcedureUrl = Неопределено Тогда
		Возврат "";
	КонецЕсли;

	Возврат ProcedureUrl;
КонецФункции

// Сохранить номер закупки на ЭТП в УХ.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
// Возвращает:
//	Неопределено - закупка не зарегистрирована на ЭТП, или не был получен номер от ЭТП.
//	Строка - номер закупки на ЭТП.
Процедура СохранитьНомерЗакупкиНаЭТП(ЭТП, ЗакупочнаяПроцедура, НомерЗакупки) Экспорт
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьЗначениеРеквизитаЭТП(ЭТП, ЗакупочнаяПроцедура, "ProcedureNumber", НомерЗакупки);
КонецПроцедуры

// Получить сохраненный в УХ номер закупки на ЭТП
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
// Возвращает:
//	Неопределено - закупка не зарегистрирована на ЭТП, или не был получен номер от ЭТП.
//	Строка - номер закупки на ЭТП.
Функция ПолучитьНомерЗакупкиНаЭТП(ЭТП, ЗакупочнаяПроцедура) Экспорт
	Возврат ИнтеграцияЦУЗсЭТПСерверУХ.ЗначениеРеквизитаЭТП(ЭТП, ЗакупочнаяПроцедура, "ProcedureNumber");
КонецФункции

// Сохранить строку с описанием статуса закупочной процедуры на сайте ЭТП.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
//	НаименованиеСтатуса - Строка. Статус закупки на ЭТП.
//	НаименованиеСтатусаЕИС - Строка. Статус закупки ЕИС.
//  НомерНаЕИС - Строка. Номер закупки на ЕИС.
//	URLнаЕИС - Строка. Адрес закупки на ЕИС.
//
Процедура УстановитьСтатусЗакупкиНаЭТП(ЭТП, ЗакупочнаяПроцедура, НаименованиеСтатуса) Экспорт
	Если НЕ ЗначениеЗаполнено(ЭТП)
		ИЛИ НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура)
		ИЛИ НЕ ЗначениеЗаполнено(НаименованиеСтатуса) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьЗначениеРеквизитаЭТП(ЭТП, ЗакупочнаяПроцедура, "PurchaseStatus", НаименованиеСтатуса);
КонецПроцедуры

// Возвращает строку с описанием статуса указанного объекта на ЭТП.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ЗакупочнаяПроцедура - СправочникСсылка.Лоты. Закупочная процедура для синхронизации.
//	НаименованиеСтатусаЕИС - Строка. Переменная для установки статуса на ЕИС.
//  НомерНаЕИС - Строка. Переменная для установки номера закупки на ЕИС.
//	URLнаЕИС - Строка. Переменная для установки адреса закупки на ЕИС.
// Возвращает:
//	Строка - Статус закупки на ЭТП. Если статус получить невозможно, то возвращает пустую строку.
Функция ПолучитьСтатусОбъектаНаЭТП(ЭТП, Ссылка) Экспорт
	Возврат ИнтеграцияЦУЗсЭТПСерверУХ.ЗначениеРеквизитаЭТП(ЭТП, Ссылка, "PurchaseStatus");
КонецФункции

// Получить массив описаний файлов прикрепленных к закупочной процедуре
Функция ПолучитьФайлыВладельца(ВладелецФайлов) Экспорт
	ДокументID = "";
	ДокументТип = "";
	Файлы = СвязанныеФайлыВызовСервера.СвязанныеФайлыПоВладельцу(
													ВладелецФайлов, 
													ДокументID, 
													ДокументТип);
	Для Каждого ОписаниеФайла Из Файлы Цикл
		ИдентификаторВерсии = СвязанныеФайлыВызовСервера.НайтиПоследнююВерсиюФайла(
			СвязанныеФайлыВызовСервера.ВерсииФайла(ОписаниеФайла.Идентификатор));
		Если ИдентификаторВерсии <> Неопределено Тогда
			ОписаниеФайла.Добавить("ИдентификаторВерсии", ИдентификаторВерсии);
		Иначе
			// Идентифиакторы версии и файла совпадают.
			ОписаниеФайла.Вставить("ИдентификаторВерсии", ОписаниеФайла.Идентификатор);
		КонецЕсли;
	КонецЦикла;
	Возврат Файлы;
КонецФункции

// Записать файл в базу данных.
// Параметры:
//  Владелец - ЛюбаяСсылка - объект-владелец связанных файлов.
//  АдресВременногоХранилищаФайла - Строка - адрес временного хранилища, где размещен файл.
//  Имя - Строка - имя помещаемого файла с расширением.
//	Размер - Число - размер помещаемого файла.
//	ТекстОшибки - Строка. Переменная для помщения описания ошибки, если она возникнет в процессе работы функции.
// Возвращает:
//	Неопределено - ошибка сохранения файла. Описание ошибки в ТекстОшибки.
//	Строка - Уникальный идентификатор файла. Позволяет по УИД получить файл функцией ПолучитьФайлПоУИД().
Функция ДобавитьФайлПоВладельцу(Владелец, АдресВременногоХранилищаФайла, Имя, Размер, ТекстОшибки) Экспорт
	ВремяИзменения = ТекущаяДата();
	ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	
	ПозицияТочки = СтрНайти(Имя, ".", НаправлениеПоиска.СКонца);
	Если ПозицияТочки > 0 Тогда
		ИмяБезРасширения = Лев(Имя, ПозицияТочки-1);
		Расширение = Сред(Имя, ПозицияТочки+1);
	Иначе
		ИмяБезРасширения = Имя;
		Расширение = "";
	КонеЦесли;
	
	Файл = СвязанныеФайлыВызовСервера.ДобавитьФайлИзВременногоХранилища(Владелец, АдресВременногоХранилищаФайла, ИмяБезРасширения, Расширение, Размер, ВремяИзменения, ВремяИзмененияУниверсальное);
	
	Если ТипЗнч(Файл) = Тип("Строка") Тогда
		Возврат "Д" + Файл;
	ИначеЕсли ТипЗнч(Файл) = Тип("СправочникСсылка.Файлы") Тогда
		Возврат "С" + Файл.УникальныйИдентификатор();
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Получить ссылку в базе на файл по его уникальному идентификатору.
// Параметры:
//	УИДФайла - строка. Либо УИД справочника СправочникСсылка.Файлы (если начинается на "C"), либо  или Строка идентификатор файла ДО (если начинается на "Д"). 
//	ТекстОшибки - Строка. Переменная для помщения описания ошибки, если она возникнет в процессе работы функции.
// Возвращает:
//	Неопределено - ошибка сохранения файла. Описание ошибки в ТекстОшибки.
//	Строка - Уникальный идентификатор файла. Позволяет по УИД получить файл функцией ПолучитьФайлПоУИД().
Функция ПолучитьСсылкуНаФайлПоУИД(УИДФайла, ТекстОшибки) Экспорт
	Если Лев(УИДФайла, 1) = "С" Тогда
		Возврат Справочники.Файлы.ПолучитьСсылку(Новый УникальныйИдентификатор(Сред(УИДФайла,2)));
	ИначеЕсли Лев(УИДФайла, 1) = "Д" Тогда
		Возврат Сред(УИДФайла,2);
	КонеЦЕсли;
	
	ТекстОшибки = НСтр(СтрШаблон(
		"ru='Некорректный формат ссылки на файл: %1'", 
		УИДФайла));
	Возврат Неопределено;
КонецФункции

// Получить двоичные данные файла по его описанию
Функция ДвоичныеДанныеФайла(ОписаниеФайла) Экспорт
	Если ТипЗнч(ОписаниеФайла.СвязанныйФайл) = Тип("Строка") Тогда
		Возврат ИнтеграцияС1СДокументооборотВызовСервера.ДвоичныеДанныеФайла(ОписаниеФайла.СвязанныйФайл);
	ИначеЕсли ТипЗнч(ОписаниеФайла.СвязанныйФайл) = Тип("СправочникСсылка.Файлы") Тогда
		СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаИДвоичныеДанные(ОписаниеФайла.СвязанныйФайл);
		Возврат СтруктураВозврата.ДвоичныеДанные;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Записываем в регистр сведений произвольные данные связанные с ЭТП и ЗакупочнойПроцедурой.
// Если передано значение == Неопределено, то запись из регистра удаляется.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которого необходимо записать данные.
//	ИмяРеквизита - Строка(100). Произвольное имя реквизита. Если реквизит с таким имененм для указанных ЭТП и закупки существует, то его значение перезаписывается.
//	Значение - Строка(0), либо произвольные двоичные данные для помещения в хранилище значений.
//	ВДвоичныеДанные - Булево. Записать строку в двоичные данные со сжатием (Истина), или в строку (Ложь). Любые другие значения записываются в двоичные данные.
Процедура УстановитьЗначениеРеквизитаЭТП(ЭТП, ОбъектОбмена, ИмяРеквизита, Значение, ВДвоичныеДанные=Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(ЭТП) ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи                  = РегистрыСведений.ДанныеЭТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ЭТП      		= ЭТП;
	МенеджерЗаписи.ОбъектОбмена		= ОбъектОбмена;
	МенеджерЗаписи.Ключ			    = ИмяРеквизита;
	
	Если Значение = Неопределено Тогда
		// Обнуляем данные
		МенеджерЗаписи.Удалить();
		
	Иначе
		Если НЕ ВДвоичныеДанные И ТипЗнч(Значение) = Тип("Строка") Тогда
			МенеджерЗаписи.ЗаписьСтрока	= Значение;
			МенеджерЗаписи.ЗаписьДвоичныеДанные = Неопределено;
			МенеджерЗаписи.ЭтоДвоичныеДанные = Ложь;
		Иначе
			МенеджерЗаписи.ЗаписьСтрока = НСтр("ru = 'Двоичные данные'", ОбщегоНазначения.КодОсновногоЯзыка());
			МенеджерЗаписи.ЗаписьДвоичныеДанные = Новый ХранилищеЗначения(Значение, Новый СжатиеДанных(9));
			МенеджерЗаписи.ЭтоДвоичныеДанные = Истина;
		КонецЕсли;
		
		МенеджерЗаписи.ДатаЗаписи = ТекущаяДата();
		
		МенеджерЗаписи.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Записываем в регистр сведений несколько произвольных значений связанные с ЭТП и (если задан) объектом обмена.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которого необходимо записать данные.
//	Значения - Структура, содержит значения для записи:
//		Ключ - Строка(100), произвольное имя реквизита. Если реквизит с таким имененм для указанных ЭТП и закупки существует, то его значение перезаписывается.
//		Значение - Строка(0), либо произвольные двоичные данные для помещения в хранилище значений.
//	ВДвоичныеДанные - Булево. Записать строки в двоичные данные со сжатием, или в строку. Любые другие значения записываются в двоичные данные.
Процедура УстановитьЗначенияРеквизитовЭТП(ЭТП, ОбъектОбмена, Значения, ВДвоичныеДанные=Ложь) Экспорт
	Если НЕ ЗначениеЗаполнено(ОбъектОбмена) ИЛИ НЕ ЗначениеЗаполнено(ЭТП) ИЛИ Не ЗначениеЗаполнено(Значения) Тогда
		Возврат;
	КонецЕсли;
		
	Для Каждого КлючЗначение Из Значения Цикл
		УстановитьЗначениеРеквизитаЭТП(ЭТП, ОбъектОбмена, КлючЗначение.Ключ, КлючЗначение.Значение, ВДвоичныеДанные);
	КонецЦикла;
	
КонецПроцедуры

// Получить значение произвольного реквизита ассоциированного с ЭТП и (если задан) с объектом обмена.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которого необходимо прочитать данные.
//	ИмяРеквизита - Строка(100). Произвольное имя реквизита. Если реквизит с таким имененм для указанных ЭТП и закупки не существует, то возвращает Неопределено.
//	ЭтоДвоичныеДанные - Булево. Переменная в которую будет возвращен флаг, показывающий какие данные возвращает функция. Ложь - строка. Истина - произвольное значение из хранилища.
// Возвращает:
//	Строка(0) - если была сохранена строка.
//	Произвольные данные - если был сохранен любой другой тип данных.
//	Неопределено - данные по ключевым полям не найдены.
Функция ЗначениеРеквизитаЭТП(ЭТП, ОбъектОбмена, ИмяРеквизита, ЭтоДвоичныеДанные=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(ЭТП) ИЛИ ПустаяСтрока(ИмяРеквизита) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектОбмена) Тогда
		ОбъектОбмена_ = ОбъектОбмена;
	Иначе
		ОбъектОбмена_ = Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеЭТП.ЗаписьСтрока КАК ЗаписьСтрока,
		|	ДанныеЭТП.ЗаписьДвоичныеДанные КАК ЗаписьДвоичныеДанные,
		|	ДанныеЭТП.ЭтоДвоичныеДанные КАК ЭтоДвоичныеДанные
		|ИЗ
		|	РегистрСведений.ДанныеЭТП КАК ДанныеЭТП
		|ГДЕ
		|	ДанныеЭТП.ЭТП = &ЭТП
		|	И ДанныеЭТП.ОбъектОбмена = &ОбъектОбмена
		|	И ДанныеЭТП.Ключ = &ИмяРеквизита";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектОбмена_);
	Запрос.УстановитьПараметр("ИмяРеквизита", ИмяРеквизита);
	Запрос.УстановитьПараметр("ЭТП", ЭТП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЭтоДвоичныеДанные_ = ВыборкаДетальныеЗаписи.ЭтоДвоичныеДанные;
		
		ЭтоДвоичныеДанные = ЭтоДвоичныеДанные_;
		
		Если ЭтоДвоичныеДанные_ Тогда
			Возврат ВыборкаДетальныеЗаписи.ЗаписьДвоичныеДанные.Получить();
		Иначе
			Возврат ВыборкаДетальныеЗаписи.ЗаписьСтрока;
		КонецЕсли;
	КонецЕсли;
	
	
	Возврат Неопределено;
КонецФункции

// Получить значение набора реквизитов ассоциированного с ЭТП и (если указан) с объектом обмена.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//  ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Необязательное. Если пустое, то данные сохраняются для ЭТП.
//	Значения - Структура, будет заполнена значениями реквизитов по именам ключей. 
//		Ключ - Строка(100). Входящее значение. Произвольное имя реквизита.
//		Знчение - произвольный. Заполняется функцией. Возможные типы значений:
//			Строка(0) - если была сохранена строка.
//			Произвольные данные - если был сохранен любой другой тип данных.
//			Неопределено - данные по имени ключевого поля не найдены.
Процедура ЗначенияРеквизитовЭТП(ЭТП, ОбъектОбмена, Значения) Экспорт
	Если НЕ ЗначениеЗаполнено(ОбъектОбмена) ИЛИ НЕ ЗначениеЗаполнено(ЭТП) ИЛИ НЕ ЗначениеЗаполнено(Значения) Тогда
		Возврат;
	КонецЕсли;
	
	мКлючей = Новый Массив;
	Для Каждого Пара Из Значения Цикл
		мКлючей.Добавить(Пара.Ключ);
		Значения[Пара.Ключ]= Неопределено;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДанныеЭТП.ЗаписьСтрока,
		|	ДанныеЭТП.ЗаписьДвоичныеДанные,
		|	ДанныеЭТП.ЭтоДвоичныеДанные,
		|	ДанныеЭТП.Ключ
		|ИЗ
		|	РегистрСведений.ДанныеЭТП КАК ДанныеЭТП
		|ГДЕ
		|	ДанныеЭТП.ЭТП = &ЭТП
		|	И ДанныеЭТП.ОбъектОбмена = &ОбъектОбмена
		|	И ДанныеЭТП.Ключ В(&ИменаРеквизитов)";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектОбмена);
	Запрос.УстановитьПараметр("ИменаРеквизитов", мКлючей);
	Запрос.УстановитьПараметр("ЭТП", ЭТП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ЭтоДвоичныеДанные Тогда
			Значения[ВыборкаДетальныеЗаписи.Ключ] = ВыборкаДетальныеЗаписи.ЗаписьДвоичныеДанные.Получить();
		Иначе
			Значения[ВыборкаДетальныеЗаписи.Ключ] = ВыборкаДетальныеЗаписи.ЗаписьСтрока;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Установить статус публикации объекта на ЭТП. 
Процедура УстановитьСтатусПубликацииОбъектаНаЭТП(ЭТП, ОбъектОбмена, Статус, ДатаИзмененияСтатуса) Экспорт
	МенеджерЗаписи                  = РегистрыСведений.СтатусыПубликацииОбъектовНаЭТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Период			= ДатаИзмененияСтатуса;
	МенеджерЗаписи.ОбъектОбмена		= ОбъектОбмена;
	МенеджерЗаписи.ЭТП      		= ЭТП;
	МенеджерЗаписи.Статус			= Статус;
	МенеджерЗаписи.Записать();
КонецПроцедуры

// Получить статус публикации объекта на ЭТП. 
Функция ПолучитьСтатусПубликацииОбъектаНаЭТП(ЭТП, ОбъектОбмена) Экспорт
	ОписаниеСтатуса = Новый Структура(
			"Статус, ДатаИзмененияСтатуса",
			Перечисления.СтатусыПубликацииОбъектовНаЭТП.ПустаяСсылка(),
			'00010101');
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовНаЭТПСрезПоследних.Статус КАК Статус,
		|	СтатусыПубликацииОбъектовНаЭТПСрезПоследних.Период КАК ДатаИзмененияСтатуса
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовНаЭТП.СрезПоследних(
		|			,
		|			ЭТП = &ЭТП
		|				И ОбъектОбмена = &ОбъектОбмена) КАК СтатусыПубликацииОбъектовНаЭТПСрезПоследних";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектОбмена);
	Запрос.УстановитьПараметр("ЭТП", ЭТП);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ОписаниеСтатуса, ВыборкаДетальныеЗаписи);
	КонецЕсли;
	Возврат ОписаниеСтатуса;
КонецФункции

// Записывает текст ошибки в системный журнал регистрации. Устанавливает значений реквизитов ПоляОписанияТранзакции для сохранения ошибки.
// В журнале транзакции обмена запись не делается!
// Параметры:
//	ПоляОписанияТранзакции - Структура, см. функцию ШаблонОписанияТранзакцииОбмена(). В структуре будут заполнены поля описания ошибки, установлен флаг ошибки.
//	ТекстОшибки - Строка, текст ошибки.
//	ИмяСобытия - Строка, для фильтрации событий в журнале регистрации.
Процедура ЗарегистрироватьОшибку(ПоляОписанияТранзакции, ТекстОшибки, ИмяЭТП="") Экспорт
	ЗаписатьОшибкуИнтеграцииВЖурналаРегистрации(ТекстОшибки, ИмяЭТП);
	ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки);
	ПоляОписанияТранзакции.ЗаписанаВЖурнал = Ложь;
КонецПроцедуры

// Возвращает:
//	Структура - описание поставщика, для заполнения в обработке обмена с ЭТП. Состав полей:
//		- КонтрагентПолноеНаименование - Строка. Полное наименование поставщика.
//		- КонтрагентНаименование - Строка. Сокращенное наименование поставщика.
//		- КонтрагентИНН - Строка. ИНН поставщика.
//		- КонтрагентКПП - Строка. КПП поставщика.
//		- КонтрагентОГРН - Строка. ОГРН поставщика.
//		- КонтрагентЮрАдрес - Строка. Юридический адрес поставщика.
//		- КонтрагентПочтовыйАдрес - Строка. Почтовый адрес поставщика.
//		- КонтрагентEmail - Строка. Адрес электронной почты поставщика.
//		- КонтрагентТелефон - Строка. Телефон поставщика.
//		- КонтрагентКонтактноеЛицо - Строка. ФИО контактного лица поставщика.
//		- КонтрагентМалыйПредприниматель - Булево. Контрагент является субъектом малого предпринимательства.
//		- КонтрагентСреднийПредприниматель - Булево. Контрагент является субъектом "среднего" предпринимательства.
Функция ПолучитьШаблонОписанияКонтрагента() Экспорт
	ШаблонОписанияКонтрагента = Новый Структура;
	
	ШаблонОписанияКонтрагента.Вставить("КонтрагентПолноеНаименование", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентНаименование", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентИНН", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентКПП", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентОГРН", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентЮрАдрес", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентПочтовыйАдрес", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентEmail", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентТелефон", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентКонтактноеЛицо", "");
	ШаблонОписанияКонтрагента.Вставить("КонтрагентМалыйПредприниматель", Ложь);
	ШаблонОписанияКонтрагента.Вставить("КонтрагентСреднийПредприниматель", ЛОжь);
	
	ШаблонОписанияКонтрагента.Вставить("Файлы", Новый Массив);
	
	Возврат ШаблонОписанияКонтрагента;
КонецФункции

Процедура ЗаписатьОшибкуИнтеграцииВЖурналаРегистрации(ТекстОшибки, ИмяЭТП="") Экспорт
	ЗаписьЖурналаРегистрации("ИнтеграцияСЭТП" + ?(ПустаяСтрока(ИмяЭТП), "", "." + Строка(ИмяЭТП)), УровеньЖурналаРегистрации.Ошибка,,, ТекстОшибки);
КонецПроцедуры

// Записать сообщение в базу с уникальным идентификатором
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которого необходимо записать сообщение.
//	КлючСообщения - Строка, используется для сохранения занчения.
//	ИсходящееСообщение - Булево. Истина - сообщение посланное от нас к ЭТП. Ложь - сообщение получено от ЭТП.
// Возвращает:
//	Булево. Истина - запись прошла успешно.
//		Ложь - записать сообщение не удалось.
Функция ЗаписатьСообщениеОбмена(ЭТП, ОбъектОбмена, ТекстСообщения, КлючСообщения, ИсходящееСообщение) Экспорт
	Если ИсходящееСообщение Тогда
		Префикс = "OutGUID_";
	Иначе
		Префикс = "InGUID_";
	КонецЕсли;
	
	Попытка
		УстановитьЗначениеРеквизитаЭТП(ЭТП, ОбъектОбмена, Префикс + КлючСообщения, ТекстСообщения, Ложь);
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Прочитать сообщение из базы по уникальному идентификатору
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которого необходимо записать сообщение.
//	КлючСообщения - Строка(36) - уникальный идентификатор записанного сообщения.
//	ИсходящееСообщение - Булево, Истина - сообщение посланное от нас к ЭТП. Ложь - сообщение получено от ЭТП.
// Возвращает:
//	Строка(0) - текст сообщения.
//	Неопределено - прочитать сообщение не удалось.
Функция ПолучитьСообщениеОбменаПоКлючу(ЭТП, ОбъектОбмена, КлючСообщения, ИсходящееСообщение) Экспорт
	ТекстСообщения = "";
	Если ИсходящееСообщение Тогда
		Префикс = "OutGUID_";
	Иначе
		Префикс = "InGUID_";
	КонецЕсли;
	
	Попытка
		ТекстСообщения = ЗначениеРеквизитаЭТП(ЭТП, ОбъектОбмена, Префикс + КлючСообщения, Истина);
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат ТекстСообщения;
КонецФункции

// Читает из базы УИД назначенный строковому идентификатору. Если УИД не сопоставлен, то он генерируется и записывается соответствие.
// Параметры:
//	ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	Идентификатор - Строка(). Произвольный непустой идентификатор для которого нужно получить УИД.
// Возвращает:
//	Строка(36) - УИД сопоставленный с Идентификатор.
Функция ПолучитьУИД_Идентификатора(ЭТП, Идентификатор) Экспорт
	ПозицияУИД = ИнтеграцияЦУЗсЭТПСерверУХ.ЗначениеРеквизитаЭТП(ЭТП, Неопределено, Идентификатор);
	Если ПозицияУИД = Неопределено Тогда
		ПозицияУИД = Строка(Новый УникальныйИдентификатор);
		ИнтеграцияЦУЗсЭТПСерверУХ.УстановитьЗначениеРеквизитаЭТП(ЭТП, Неопределено, Идентификатор, ПозицияУИД);
	КонецЕсли;
	
	Возврат ПозицияУИД;
КонецФункции

// Получить контактную информацию организации
// или контрагента в виде набора строк.
//
// Параметры:
//	Ссылка - СправочникСсылка.Организация,
//			 СправочникСсылка.Контрагенты,
//			 СправочникСсылка.Пользователи - ссылка на организацию или контрагента
//									  		 для которого нужно получить КИ.
// Возвращает:
//	Структура - с полями:
//		ЮридическийАдрес;
//		ПочтовыйАдрес;
//		Телефон; 
//		Факс;
//		Email. 
//
Функция ПолучитьКонтактнуюИнформацию(Ссылка) Экспорт
	СтруктураКИ = Новый Структура;
	СтруктураКИ.Вставить("ЮридическийАдрес", "");
	СтруктураКИ.Вставить("ЮридическийАдресЗначение", "");
	СтруктураКИ.Вставить("ПочтовыйАдрес", "");
	СтруктураКИ.Вставить("ПочтовыйАдресЗначение", "");
	СтруктураКИ.Вставить("Телефон", "");
	СтруктураКИ.Вставить("Факс", "");
	СтруктураКИ.Вставить("Email", "");
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
		МассивОбъектов,,, ТекущаяДатаСеанса());
	Для Каждого КИ Из КонтактнаяИнформацияОбъекта Цикл
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.Организации") Тогда
			Если КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииЮрАдресОрганизации() Тогда
				СтруктураКИ.ЮридическийАдрес = КИ.Представление;
				СтруктураКИ.ЮридическийАдресЗначение = КИ.ЗначенияПолей;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииПочтовыйАдресОрганизации() Тогда
				СтруктураКИ.ПочтовыйАдрес = КИ.Представление;
				СтруктураКИ.ПочтовыйАдресЗначение = КИ.ЗначенияПолей;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииТелефонОрганизации() Тогда
				СтруктураКИ.Телефон = КИ.Представление;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииФаксОрганизации() Тогда
				СтруктураКИ.Факс = КИ.Представление;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииEmailОрганизации() Тогда
				СтруктураКИ.Email = КИ.Представление;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииЮрАдресКонтрагента() Тогда
				СтруктураКИ.ЮридическийАдрес = КИ.Представление;
				СтруктураКИ.ЮридическийАдресЗначение = КИ.ЗначенияПолей;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииПочтовыйАдресКонтрагента() Тогда
				СтруктураКИ.ПочтовыйАдрес = КИ.Представление;
				СтруктураКИ.ПочтовыйАдресЗначение = КИ.ЗначенияПолей;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииТелефонКонтрагента() Тогда
				СтруктураКИ.Телефон = КИ.Представление;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииФаксКонтрагенты() Тогда
				СтруктураКИ.Факс = КИ.Представление;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииEmailКонтрагенты() Тогда
				СтруктураКИ.Email = КИ.Представление;
			КонецЕсли;
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.Пользователи") Тогда
			Если КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииТелефонПользователя() Тогда
				СтруктураКИ.Телефон = КИ.Представление;
			ИначеЕсли КИ.Вид = УправлениеКонтактнойИнформациейВстраиваниеПереопределяемыйУХ.ВидКонтактнойИнформацииEmailПользователя() Тогда
				СтруктураКИ.Email = КИ.Представление;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат СтруктураКИ;
КонецФункции

// Возвращает код способа закупки для передачи в ЕИС.
//
Функция ПолучитьКодЗакупкиВЕИС(СпособВыбораПоставщика,ЗакрытыйКонкурс,ВЭлектроннойФорме, Наименование) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КодыЗакупокВЕИС.КодЕИС КАК КодЕИС,
		|	КодыЗакупокВЕИС.НаименованиеЕИС КАК НаименованиеЕИС
		|ИЗ
		|	РегистрСведений.НомераСпособовЗакупокВЕИС КАК КодыЗакупокВЕИС
		|ГДЕ
		|	КодыЗакупокВЕИС.СпособВыбораПоставщика = &СпособВыбораПоставщика
		|	И КодыЗакупокВЕИС.ЗакрытыйКонкурс = &ЗакрытыйКонкурс
		|	И КодыЗакупокВЕИС.ВЭлектроннойФорме = &ВЭлектроннойФорме";
	
	Запрос.УстановитьПараметр("СпособВыбораПоставщика", СпособВыбораПоставщика);
	Запрос.УстановитьПараметр("ЗакрытыйКонкурс", ЗакрытыйКонкурс);
	Запрос.УстановитьПараметр("ВЭлектроннойФорме", ВЭлектроннойФорме);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Наименование = ВыборкаДетальныеЗаписи.НаименованиеЕИС;
		Возврат ВыборкаДетальныеЗаписи.КодЕИС;
	КонецЦикла;
	
	Возврат 0;
КонецФункции


// Получить реквизиты лота зарегистрированного в плане закупок.
// Если лот не зарегистрирован, то возваращет Лот.УникальныйИдентификатор()
// Параметры:
//	Лот - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Объект для которого получем ЭТП.
// Возвращает:
//	Структура:
//		ПрограммаЗакупок - СправочникСсылка.Лоты, 
//		УИД_Плана - Строка(36) - УИД последней размещенной версии плана закупки., 
//		НомерЛотаВПлане - Число - номер лота в плане, 
//		УИД_Лота - Строка(36) - УИД лота переданный, не ЕИС.
Функция ПолучитьОписаниеЛотаВПланеЗакупок(Лот) Экспорт
	Описание = Новый Структура;
	Описание.Вставить("ПрограммаЗакупок", Документы.ПрограммаЗакупок.ПустаяСсылка());
	Описание.Вставить("УИД_Плана", "");
	Описание.Вставить("НомерЛотаВПлане", Лот.СтрокаПланаЗакупок.Номер);
	Описание.Вставить("УИД_Лота", "");
	Описание.Вставить("УИД_ЛотаВПлане", "");	
	ОписаниеВерсииЛота = ПолучитьВерсиюОбъектаДляЕИС(Лот);
	Описание.УИД_Лота = ОписаниеВерсииЛота.ГУИДВерсии;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПрограммаЗакупок.Ссылка КАК ПрограммаЗакупок
			|ИЗ
			|	Справочник.Лоты КАК СправочникЛоты
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрограммаЗакупок КАК ПрограммаЗакупок
			|		ПО СправочникЛоты.ПериодЗакупок = ПрограммаЗакупок.ПериодЗакупок
			|			И СправочникЛоты.ОрганизацияДляЗаключенияДоговора = ПрограммаЗакупок.ОрганизацияДляЗаключенияДоговора
			|			И (ПрограммаЗакупок.Проведен)
			|ГДЕ
			|	СправочникЛоты.Ссылка = &Лот";
		
		Запрос.УстановитьПараметр("Лот", Лот);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПрограммаЗакупок) Тогда
				Описание.ПрограммаЗакупок = ВыборкаДетальныеЗаписи.ПрограммаЗакупок;
				ОписаниеВерсииПлана = 
					ПолучитьВерсиюОбъектаДляЕИС(ВыборкаДетальныеЗаписи.ПрограммаЗакупок);
				Описание.УИД_Плана = ОписаниеВерсииПлана.ГУИДВерсии;
				Если ИнтеграцияЦУЗсЭТПСерверУХ.КорректныйНомерРегистрацииЕИС(
													Описание.ПрограммаЗакупок) Тогда
					Описание.УИД_ЛотаВПлане = 
						ИнтеграцияЦУЗсЭТПСерверУХ.guidСтрокиПланаЗакупокПредыдущейОтправки(
							Справочники.ЭлектронныеТорговыеПлощадки.СсылкаНаЕИС(), 
							Описание.ПрограммаЗакупок, 
							Лот.СтрокаПланаЗакупок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Исключение КонецПопытки;
	Возврат Описание;
КонецФункции

// Ищем УИД закупочной процедуры в сообщениях обмена
// от последних к ранним.
//
// Параметры:
//  ЭТП					 - СправочникСсылка.ЭлектронныеТорговыеПлощадки - ссылка на ЕИС.
//  ПланЗакупок			 - ДокументСсылка.ПрограммаЗакупок - план закупок для отправки.
//  ЗакупочнаяПроцедура	 - СправочникСсылка.Лоты - лот как строка плана закупок.
// 
// Возвращаемое значение:
//   - Строка - УИД закупочной процедуры в предыдущей отправке плана закупок.
//
Функция guidСтрокиПланаЗакупокПредыдущейОтправки(ЭТП, 
												ПланЗакупок, 
												СтрокаПлана) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЖурналОбменаСЭТП.ДатаОбмена) КАК ДатаОбмена
		|ПОМЕСТИТЬ ПоследняяДатаОбмена
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|ГДЕ
		|	ЖурналОбменаСЭТП.Ошибка = ЛОЖЬ
		|	И ЖурналОбменаСЭТП.ОбъектОбмена = &ПланЗакупок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЖурналОбменаСЭТП.НомерЗаписи) КАК НомерЗаписи,
		|	ЖурналОбменаСЭТП.ДатаОбмена КАК ДатаОбмена
		|ПОМЕСТИТЬ ДавтаНомерОбмена
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоследняяДатаОбмена КАК ПоследняяДатаОбмена
		|		ПО ЖурналОбменаСЭТП.ДатаОбмена = ПоследняяДатаОбмена.ДатаОбмена
		|ГДЕ
		|	ЖурналОбменаСЭТП.ОбъектОбмена = &ПланЗакупок
		|	И ЖурналОбменаСЭТП.Ошибка = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналОбменаСЭТП.ДатаОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЖурналОбменаСЭТП.КлючСообщения КАК КлючСообщения
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДавтаНомерОбмена КАК ДавтаНомерОбмена
		|		ПО ЖурналОбменаСЭТП.ДатаОбмена = ДавтаНомерОбмена.ДатаОбмена
		|			И (ЖурналОбменаСЭТП.ОбъектОбмена = &ПланЗакупок)
		|			И (ЖурналОбменаСЭТП.Ошибка = ЛОЖЬ)
		|			И ЖурналОбменаСЭТП.НомерЗаписи = ДавтаНомерОбмена.НомерЗаписи
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""<guid>"" + ВерсииОбъектовДляЕИС.ГУИДВерсии КАК ГУИДВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииОбъектовДляЕИС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПланаЗакупок КАК СтрокиПланаЗакупок
		|		ПО ВерсииОбъектовДляЕИС.Объект = СтрокиПланаЗакупок.Регистратор
		|			И (ВерсииОбъектовДляЕИС.Объект = &ОбъектДляВерсии)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВерсииОбъектовДляЕИС.Дата УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтрокиПланаЗакупок.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрСведений.СтрокиПланаЗакупок КАК СтрокиПланаЗакупок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|		ПО СтрокиПланаЗакупок.ИдентификаторСтрокиПланаЗакупок = СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок
		|			И (СтрокаПланаЗакупок.Ссылка = &ОбъектДляВерсии)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокиПланаЗакупок.НомерВерсии УБЫВ";
	
	Запрос.УстановитьПараметр("ПланЗакупок", ПланЗакупок);
	Запрос.УстановитьПараметр("ОбъектДляВерсии", СтрокаПлана);
	мРезультатыЗапроса = Запрос.ВыполнитьПакет();
	КлючиСообщений = мРезультатыЗапроса[2].Выгрузить().ВыгрузитьКолонку("КлючСообщения");
	Если КлючиСообщений.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	УИДы = мРезультатыЗапроса[3].Выгрузить().ВыгрузитьКолонку("ГУИДВерсии");
	ВыборкаСсылокНаВерсииСтроки = мРезультатыЗапроса[4].Выбрать();
	Пока ВыборкаСсылокНаВерсииСтроки.Следующий() Цикл
		УИДы.Добавить("<guid>" + 
			ПолучитьУИДОбъектаИнтеграцииСЕИС(
				ВыборкаСсылокНаВерсииСтроки.Ссылка));
	КонецЦикла;
	ТекстПоследнейОтправки = ПолучитьСообщениеОбменаПоКлючу(
			ЭТП,
			ПланЗакупок, 
			КлючиСообщений[0], 
			Истина);
	ШаблонУИД =  НайтиОднуИзПодстрокВТексте(ТекстПоследнейОтправки, УИДы);
	Если НЕ ПустаяСтрока(ШаблонУИД) Тогда
		Возврат Сред(ШаблонУИД, 7);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Ищет подстроку в тексте из переданного перечня.
//
// Параметры:
//  Текст			 - Строка - текст в котором ищем.
//  СтрокиДляПоиска	 - Строка - строки, которые ищем.
// 
// Возвращаемое значение:
//   - первая найденная строка.
//
Функция НайтиОднуИзПодстрокВТексте(Текст, СтрокиДляПоиска)
	Для Каждого СтрокаДляПоиска Из СтрокиДляПоиска Цикл
		Если СтрНайти(Текст, СтрокаДляПоиска) > 0 Тогда
			Возврат СтрокаДляПоиска;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
КонецФункции

// Получить УИД объекта.
//
// Параметры:
//  Ссылка	 - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ - ссылка на объект
//				для которго необходимо получить УИД.
// 
// Возвращаемое значение:
//   - Строка(36) - строковое представление УИД объекта.
//
Функция ПолучитьУИДОбъектаИнтеграцииСЕИС(Ссылка) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Ссылка, "УИД_ЕИС") 
			И НЕ ПустаяСтрока(Ссылка.УИД_ЕИС) Тогда
		Возврат Ссылка.УИД_ЕИС;
	Иначе
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
КонецФункции

// Получить номер последней размещенной (подписанной) в ЕИС версии изменения объекта.
// Параметры:
//	Ссылка - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ.
//	Размещена - Булево - Истина - искать только среди размещенных (подписанных) в ЕИС версий.
//						 Ложь - искать только среди не размещенных (не подписанных) в ЕИС версий.
//						 Неопределено - не учитывать факт размещения.
//
// Возвращает:
//	Структура с описанием последней версии:
//		НомерВерсии - Число. Номер последней версии. Если версий нет, то 0.
//		ОбоснованиеИзменений - Строка(2000). Обоснование внесения изменения при создании версии.
//		Дата - Дата+Время - универсальные дата и время создания версии.
//		ГУИДВерсии - Строка(36) - строковое представление УИД зарегистрированное для версии.
//		Размещена - Булево - версия размещена (подписана) в ЕИС.
//
Функция ПолучитьВерсиюОбъектаДляЕИС(Ссылка, Размещена=Неопределено) Экспорт
	ОписаниеВерсии = Новый Структура;
	ОписаниеВерсии.Вставить("НомерВерсии", 0);
	ОписаниеВерсии.Вставить("Дата", '00010101');
	ОписаниеВерсии.Вставить("ОбоснованиеИзменений", "");
	ОписаниеВерсии.Вставить("ГУИДВерсии", "");
	ОписаниеВерсии.Вставить("Размещена", Ложь);
	ОписаниеВерсии.Вставить("РегистрационныйНомерЕИС", "");
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	МАКСИМУМ(ВерсииОбъектовДляЕИС.НомерВерсии) КАК НомерВерсии,
			|	ВерсииОбъектовДляЕИС.Объект КАК Объект
			|ПОМЕСТИТЬ ПоследнийНомер
			|ИЗ
			|	РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииОбъектовДляЕИС
			|ГДЕ
			|	ВерсииОбъектовДляЕИС.Объект = &Ссылка
			|	И ВерсииОбъектовДляЕИС.Размещен = &Размещена
			|
			|СГРУППИРОВАТЬ ПО
			|	ВерсииОбъектовДляЕИС.Объект
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВерсииОбъектовДляЕИС.НомерВерсии КАК НомерВерсии,
			|	ВерсииОбъектовДляЕИС.ОбоснованиеИзменений КАК ОбоснованиеИзменений,
			|	ВерсииОбъектовДляЕИС.Дата КАК Дата,
			|	ВерсииОбъектовДляЕИС.ГУИДВерсии КАК ГУИДВерсии,
			|	ВерсииОбъектовДляЕИС.Размещен КАК Размещена
			|ИЗ
			|	ПоследнийНомер КАК ПоследнийНомер
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииОбъектовДляЕИС
			|		ПО (ВерсииОбъектовДляЕИС.Объект = ПоследнийНомер.Объект)
			|			И (ВерсииОбъектовДляЕИС.НомерВерсии = ПоследнийНомер.НомерВерсии)";
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Если Размещена <> Неопределено Тогда
			Запрос.УстановитьПараметр("Размещена", Размещена);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ВерсииОбъектовДляЕИС.Размещен = &Размещена", "");
		КонецЕсли;
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Если ВыборкаДетальныеЗаписи.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(ОписаниеВерсии, ВыборкаДетальныеЗаписи);
		Иначе
			ОписаниеВерсии.Размещена = КорректныйНомерРегистрацииЕИС(Ссылка);
			ОписаниеВерсии.ГУИДВерсии = ПолучитьУИДОбъектаИнтеграцииСЕИС(Ссылка);
		КонецЕсли;
		ОписаниеВерсии.РегистрационныйНомерЕИС = ПолучитьНомерРегистрацииЕИС(Ссылка);
	КонецЕсли;
	Возврат ОписаниеВерсии;
КонецФункции

// Проверить, что объект подписан в ЕИС.
//
Функция КорректныйНомерРегистрацииЕИС(Ссылка) Экспорт
	РегНомер = ПолучитьНомерРегистрацииЕИС(Ссылка);
	Возврат ЗначениеЗаполнено(РегНомер);
КонецФункции

// Возвращает номер регистрации объект в ЕИС.
//
Функция ПолучитьНомерРегистрацииЕИС(Ссылка) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				Ссылка, "РегистрационныйНомерЕИС") Тогда
		Возврат Ссылка.РегистрационныйНомерЕИС;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
				Ссылка, "РегистрационныйНомер") Тогда
		Возврат Ссылка.РегистрационныйНомер;
	КонецЕсли;
	Возврат "";
КонецФункции
	
// Получить УИД объекта для указания в качестве значения поля "guid"
// без учета версий объекта для ЕИС.
//
// Параметры:
//  Ссылка	 - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ - ссылка на объект
//				для которго необходимо получить УИД.
// 
// Возвращаемое значение:
//   - Строка(36) - строковое представление УИД объекта.
//
Функция ПолучитьУИДОбъектаБезУчетаВерсий(Ссылка) Экспорт
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
					Ссылка, "УИД_ЕИС") 
			И НЕ ПустаяСтрока(Ссылка.УИД_ЕИС) Тогда
		Возврат Ссылка.УИД_ЕИС;
	Иначе
		Возврат Строка(Ссылка.УникальныйИдентификатор());
	КонецЕсли;
КонецФункции

// Получить строки плана закупок зарегистрированных в плане закупок.
// Параметры:
//	ПрограммаЗакупок - ДокументСсылка.ПрограммаЗакупок для которой получем список лотов.
// Возвращает:
//	Массив, элементы - ДокумдентСсылка.СтрокаПланаЗакупок.
//
Функция ПолучитьСтрокиПланаЗакупок(ПрограммаЗакупок) Экспорт
	РезультатФункции = Новый Массив;
	Для Каждого ТекСтрокиПланаЗакупок Из ПрограммаЗакупок.СтрокиПланаЗакупок Цикл
		РезультатФункции.Добавить(ТекСтрокиПланаЗакупок.СтрокаПланаЗакупок);
	КонецЦикла;
	Для Каждого ТекСтрокиПланаВалютные Из ПрограммаЗакупок.СтрокиПланаВалютные Цикл
		РезультатФункции.Добавить(ТекСтрокиПланаВалютные.СтрокаПланаЗакупок);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив строк плана закупок из плана ПрограммаЗакупокВход, которые
// не были включены в документ-основание.
Функция ПолучитьДобавленныеСтрокиПланаЗакупок(ПрограммаЗакупокВход) Экспорт
	РезультатФункции = Новый Массив;
	ТекОснование = ПрограммаЗакупокВход.ДокументОснование;
	Если ЗначениеЗаполнено(ТекОснование) Тогда
		МассивТекущиеСтроки = ПолучитьСтрокиПланаЗакупок(ПрограммаЗакупокВход);
		МассиСтрокиОснования = ПолучитьСтрокиПланаЗакупок(ТекОснование);
		Для Каждого ТекМассивТекущиеСтроки Из МассивТекущиеСтроки Цикл
			Если МассиСтрокиОснования.Найти(ТекМассивТекущиеСтроки) = Неопределено Тогда
				РезультатФункции.Добавить(ТекМассивТекущиеСтроки);
			Иначе
				// Строка присутствовала ранее. Не добавляем.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = Новый Массив;			// Нет основания.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьДобавленныеСтрокиПланаЗакупок()

// Получить сумму, сумму по МСП программы закупок (в валюте централизованных закупок на указанную дату)
// Параметры:
//	ПрограммаЗакупок - ДокументСсылка.ПрограммаЗакупок. Документ для которого нужно посчитать суммы
// Возвращает:
//	Структура:
//		- СуммаДокумента - Число, сумма плана закупок рассчитанную в валюте централизованных закупок на указанную дату.
//		- СуммаТолькоМСП - Число, сумма плана закупок в части МСП.
//		- СуммаБезМСП - Число, сумма плана закупок с флагом исключения при расчете доли СМП
//		- ПроцентМСП - Число == СуммаТолькоМСП / СуммаДокумента * 100
//
Функция ПолучитьСуммыПланаЗакупок(ПрограммаЗакупок) Экспорт
	Возврат Документы.ПрограммаЗакупок.ПолучитьСтатистикуСумм(ПрограммаЗакупок);
КонецФункции

// Ищем ссылку на объект среди справочников и документов
Функция ПолучитьОбъектОбменаПоУИД(УИД, ИмяТипа=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(УИД) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УИОбъект = Новый УникальныйИдентификатор(УИД);
	
	мТиповОбъектовОбмена = Метаданные.ОпределяемыеТипы.ОбъектыЦУЗОбменаСЭТП_УХ.Тип.Типы();
	
	Для Каждого ТипОбъекта Из мТиповОбъектовОбмена Цикл
		МетаТипа = Метаданные.НайтиПоТипу(ТипОбъекта);
		
		Если ЗначениеЗаполнено(ИмяТипа) Тогда
			Если МетаТипа.Имя <> ИмяТипа Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если Метаданные.Справочники.Содержит(МетаТипа) Тогда
			Ссылка = Справочники[МетаТипа.Имя].ПолучитьСсылку(УИОбъект);
			Если Ссылка.ПолучитьОбъект() <> Неопределено Тогда
				Возврат Ссылка;
			КонецЕсли;
		ИначеЕсли Метаданные.Документы.Содержит(МетаТипа) Тогда
			Ссылка = Документы[МетаТипа.Имя].ПолучитьСсылку(УИОбъект);
			Если Ссылка.ПолучитьОбъект() <> Неопределено Тогда
				Возврат Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

// Получить протокол отмены закупки
Функция ПолучитьПротоколОтменыЗакупки(ЗакупочнаяПроцедура) Экспорт
	Возврат ЦентрализованныеЗакупкиУХ.ПолучитьДокументЗакупочнойПроцедуры(
				"ПротоколОтменыЗакупочнойПроцедуры", ЗакупочнаяПроцедура, Неопределено);
КонецФункции

// Получить протокол выбора победителей
Функция ПолучитьПротоколВыбораПобедителей(ЗакупочнаяПроцедура) Экспорт
	Возврат ЦентрализованныеЗакупкиУХ.ПолучитьДокументЗакупочнойПроцедуры(
				"ПротоколВыбораПобедителей", ЗакупочнаяПроцедура, Неопределено);
КонецФункции

// Получить ЗакупочнаяПроцедура в рамках которого введен договор.
// Если не находит, возвращает пустую ссылку.
Функция ПолучитьЛотДоговора(ДоговорКонтрагента) Экспорт
	Возврат ЦентрализованныеЗакупкиУХ.ПолучитьЛотДоговора(ДоговорКонтрагента);
КонецФункции

// Получить описание номенклатуры договора в виде таблицы значений.
// Параметры:
//	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает номенклатуру договора. Поля:
//	Идентификатор - Строка, уникальный идентификатор строки, по которому ее можно будет найти в УХ;
//	Лот - СправочникСсылка.Лоты, лот в рамках которого действует договор;
//	Номенклатура - СправочникСсылка.Номенклатура;
//	НоменклатураНаименование - Строка, полное наименование номенклатуры;
//	АдресМестаПоставки - Строка, содержимое поля Адрес реквизита МестоПоставки (если заполнено);
//	МестоПоставкиОКАТО - Строка, содержимое поля КодПоОКАТО реквизита МестоПоставки (если заполнено);
//	КодОКПД2 - Строка, код ОКПД2 номенклатуры;
//	КодОКВЭД2 - Строка, код ОКВЭД2 номенклатуры;
//	ЕдиницаИзмерения - ОпределяемыйТип.ТипЕдиницаИзмеренияЕХ, базовая единица измерения, в ней выражено количество закупки;
//	ЕдиницаИзмеренияКод - Строка, ОКЕИ единицы измерения;
//	ЭтоТоварнаяКатегория - Булево, если истина, то это товарная категория, количество = 0;
//	Количество - Число, количество закупаемой номенклатуры в базовой единице измерения;
//	Сумма - Число, планируемая сумма закупки по указанной номенклатуре;
//	СтавкаНДС - Перечисление.СтавкиНДС, для товарных категорий всегда == БезНДС;
//	ВеличинаСтавкиНДС - Число, значение ставки НДС, если БезНДС, то 0.
//
Функция ПолучитьОписаниеНоменклатурыДоговора(ДоговорКонтрагента, ТекстОшибки) Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПланПоставокПоДоговорамОбороты.Лот КАК Лот,
			|	ПланПоставокПоДоговорамОбороты.Номенклатура КАК Номенклатура,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ПланПоставокПоДоговорамОбороты.Номенклатура.Наименование
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура.НаименованиеПолное = """"
			|					ТОГДА ПланПоставокПоДоговорамОбороты.Номенклатура.Наименование
			|				ИНАЧЕ ПланПоставокПоДоговорамОбороты.Номенклатура.НаименованиеПолное
			|			КОНЕЦ
			|	КОНЕЦ КАК НоменклатураНаименование,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.КодОКПД2.Код, """") КАК КодОКПД2,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.КодОКВЭД2.Код, """") КАК КодОКВЭД2,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.ЕдиницаИзмерения.Код, ""876"") КАК ЕдиницаИзмеренияКод,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК ЭтоТоварнаяКатегория,
			|	СУММА(ВЫБОР
			|			КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.Номенклатура
			|				ТОГДА ПланПоставокПоДоговорамОбороты.КоличествоОборот
			|			ИНАЧЕ 1
			|		КОНЕЦ) КАК Количество,
			|	СУММА(ПланПоставокПоДоговорамОбороты.СуммаОборот) КАК Сумма,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
			|		ИНАЧЕ ПланПоставокПоДоговорамОбороты.СтавкаНДС
			|	КОНЕЦ КАК СтавкаНДС,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА 0
			|		ИНАЧЕ ПланПоставокПоДоговорамОбороты.СтавкаНДС.Ставка
			|	КОНЕЦ КАК ВеличинаСтавкиНДС,
			|	МАКСИМУМ(ВЫБОР
			|			КОГДА ПланПоставокПоДоговорамОбороты.МестоПоставки.КодПоОКАТО = ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)
			|				ТОГДА """"
			|			ИНАЧЕ ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.МестоПоставки.КодПоОКАТО, """")
			|		КОНЕЦ) КАК МестоПоставкиОКАТО,
			|	МИНИМУМ(ВЫБОР
			|			КОГДА ПланПоставокПоДоговорамОбороты.МестоПоставки = ЗНАЧЕНИЕ(Справочник.МестаПоставки.ПустаяСсылка)
			|				ТОГДА """"
			|			ИНАЧЕ ПОДСТРОКА(ПланПоставокПоДоговорамОбороты.МестоПоставки.Адрес, 1, 1000)
			|		КОНЕЦ) КАК АдресМестаПоставки,
			|	ПланПоставокПоДоговорамОбороты.МестоПоставки КАК МестоПоставки,
			|	ПланПоставокПоДоговорамОбороты.НоменклатураПоставщика КАК НоменклатураПоставщика,
			|	ПланПоставокПоДоговорамОбороты.СтраныПроисхождения КАК СтраныПроисхождения,
			|	ПланПоставокПоДоговорамОбороты.СтранаПроизводителя КАК СтранаПроизводителя						
			|ИЗ                  
			|	РегистрНакопления.ПланПоставокПоДоговорам.Обороты(, , Период, Договор = &ДоговорКонтрагента) КАК ПланПоставокПоДоговорамОбороты
			|ГДЕ
			|	ПланПоставокПоДоговорамОбороты.СуммаПриход > 0
			|
			|СГРУППИРОВАТЬ ПО
			|	ПланПоставокПоДоговорамОбороты.Номенклатура,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО),
			|	ПланПоставокПоДоговорамОбороты.МестоПоставки,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.ЕдиницаИзмерения.Код, ""876""),
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ПланПоставокПоДоговорамОбороты.Номенклатура.Наименование
			|		ИНАЧЕ ВЫБОР
			|				КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура.НаименованиеПолное = """"
			|					ТОГДА ПланПоставокПоДоговорамОбороты.Номенклатура.Наименование
			|				ИНАЧЕ ПланПоставокПоДоговорамОбороты.Номенклатура.НаименованиеПолное
			|			КОНЕЦ
			|	КОНЕЦ,
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.КодОКПД2.Код, """"),
			|	ЕСТЬNULL(ПланПоставокПоДоговорамОбороты.Номенклатура.КодОКВЭД2.Код, """"),
			|	ПланПоставокПоДоговорамОбороты.Лот,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.СтавкиНДС.БезНДС)
			|		ИНАЧЕ ПланПоставокПоДоговорамОбороты.СтавкаНДС
			|	КОНЕЦ,
			|	ВЫБОР
			|		КОГДА ПланПоставокПоДоговорамОбороты.Номенклатура ССЫЛКА Справочник.ТоварныеКатегории
			|			ТОГДА 0
			|		ИНАЧЕ ПланПоставокПоДоговорамОбороты.СтавкаНДС.Ставка
			|	КОНЕЦ,
			|	ПланПоставокПоДоговорамОбороты.НоменклатураПоставщика,
			|	ПланПоставокПоДоговорамОбороты.СтраныПроисхождения,
			|	ПланПоставокПоДоговорамОбороты.СтранаПроизводителя";
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		РезультатЗапроса = Запрос.Выполнить();
		ТЗРез = РезультатЗапроса.Выгрузить();
		ТЗРез.Колонки.Добавить("Идентификатор", 
			Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки()));
		Для Каждого СтрокаЛота Из ТЗРез Цикл
			СтрокаЛота.Идентификатор = 
				ИнтеграцияЦУЗсЭТПСерверУХ.ИдентификаторСтрокиЛота(СтрокаЛота);
		КонецЦикла;
		Возврат ТЗРез;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = НСтр(СтрШаблон(
				"ru='Ошибка получения таблицы номенклатуры договора %1.'",
				ДоговорКонтрагента))
			+ Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
		Возврат Неопределено;
	КонецПопытки;
	
	ТекстОшибки = НСтр(СтрШаблон(
		"ru='Неопознанная ошибка получения таблицы номенклатуры договора %1.'",
		ДоговорКонтрагента));
	Возврат Неопределено;
КонецФункции

// Получить таблицу значений каждая строка которой, описывает документов на основании которых введен договор.
// Параметры:
//	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
// Возвращает:
//	- Неопределено - нет документов оснований.
// 	- ТаблицаЗначений, описывает основания заключения договора. Поля:
//		УИД - Строка(36), уникальный идентификатор строки, по которому ее можно будет найти в УХ;
//		Ссылка - ДокументСсылка - ссылка на документ в УХ;
//		Номер - Строка(500), номер документа;
//		Дата - Дата+Время, дата документа;
//		Наименование - Строка(2000), представление документа;
//		Комментарий - Строка(500), дополнительная информация по документу основанию.
Функция ПолучитьОснованияДоговора(ДоговорКонтрагента) Экспорт
	Лот = ЦентрализованныеЗакупкиУХ.ПолучитьЛотДоговора(ДоговорКонтрагента);
	Если НЕ ЗначениеЗаполнено(Лот) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ЗакупочнаяПроцедура = Лот.Владелец;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура) Тогда
		Возврат Неопределено;
	КонецЕсли;
	ПротоколВыбораПобедителей = ПолучитьПротоколВыбораПобедителей(ЗакупочнаяПроцедура);
	Если НЕ ЗначениеЗаполнено(ПротоколВыбораПобедителей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗОснований = Новый ТаблицаЗначений;
	ТЗОснований.Колонки.Добавить("УИД", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(36)));
	ТЗОснований.Колонки.Добавить("Ссылка");
	ТЗОснований.Колонки.Добавить("Номер", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	ТЗОснований.Колонки.Добавить("Дата", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТЗОснований.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(2000)));
	ТЗОснований.Колонки.Добавить("Комментарий", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(500)));
	
	НоваяСтрока = ТЗОснований.Добавить();
	НоваяСтрока.УИД = ПротоколВыбораПобедителей.УникальныйИдентификатор();
	НоваяСтрока.Ссылка = ПротоколВыбораПобедителей;
	НоваяСтрока.Номер = ПротоколВыбораПобедителей.Номер;
	НоваяСтрока.Дата = ПротоколВыбораПобедителей.Дата;
	НоваяСтрока.Наименование = Строка(ПротоколВыбораПобедителей);
	НоваяСтрока.Комментарий = СокрЛП(ПротоколВыбораПобедителей.Комментарий);
	
	Возврат ТЗОснований;
КонецФункции

// Получить описание позиций документа исполнения договора.
//
// Параметры:
//	ИсполнениеДоговора - ДокументСсылка.СведенияОбИсполненииДоговора.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
//
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
//	- ТаблицаЗначений, описывает номенклатуру договора. Поля:
//			Номер - номер строки позиции;
//			Дата - Дата+Время, дата оплаты;
//			Сумма - Число, сумма движения по документу;
//			ВалютаДокумента - СправочникСсылка.Валюты, валюта документа;
//			Курс - Число, курс валюты документа на дату операции;
//			СуммаВРублях - Число, сумма операции выраженная в рублях
//						на дату операции;
//			ЭтоАванс - Булево, если Истина - то это авансовый платеж;
//			ДокументыИсполнения - ТаблицаЗначений, описывает постулпения
//							номенклатуры договора. Поля:
//				Номер - Число - номер строки документа;
//				Дата - Дата+Время, дата документа;
//				КодВидаДокумента - Строка(1-2) - код вида документа;
//				НаименованиеВидаДокумента - Строка - наименование вида документа;
//				НомерДокумента - Строка - номер документа;
//				ИдентификаторСтрокиЛота - Строка - ид строки номенклаутры в лоте;
//				НоменклатураНаименование - Строка - наименование номенклатуры;
//				КодОКПД2 - Строка - код ОКПД2;
//				КодОКЕИ - Строка - код единицы измерения;
//				НаименованиеОКЕИ - Строка - наименование единицы измерения;
//				Количество - Число - количество поставленной номенклатуры.
//
Функция ПолучитьОписаниеПозицийИсполненияДоговора(ИсполнениеДоговора, ТекстОшибки) Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПозицииСведенийОбИсполнении.НомерСтроки КАК Номер,
			|	ПозицииСведенийОбИсполнении.ДатаОплаты КАК Дата,
			|	СУММА(ПозицииСведенийОбИсполнении.СуммаОплаты) КАК Сумма,
			|	ПозицииСведенийОбИсполнении.ВалютаДокумента КАК ВалютаДокумента,
			|	МАКСИМУМ(ПозицииСведенийОбИсполнении.Курс) КАК Курс,
			|	СУММА(ПозицииСведенийОбИсполнении.СуммаРегл) КАК СуммаВРублях,
			|	ПозицииСведенийОбИсполнении.ЭтоАванс КАК ЭтоАванс,
			|	ПозицииСведенийОбИсполнении.УИДПозиции КАК УИДПозиции
			|ИЗ
			|	Документ.СведенияОбИсполненииДоговора.ПозицииСведенийОбИсполнении КАК ПозицииСведенийОбИсполнении
			|ГДЕ
			|	ПозицииСведенийОбИсполнении.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ПозицииСведенийОбИсполнении.ДатаОплаты,
			|	ПозицииСведенийОбИсполнении.ЭтоАванс,
			|	ПозицииСведенийОбИсполнении.ВалютаДокумента,
			|	ПозицииСведенийОбИсполнении.НомерСтроки,
			|	ПозицииСведенийОбИсполнении.УИДПозиции
			|
			|УПОРЯДОЧИТЬ ПО
			|	Номер
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ДокументыИсполнения.НомерСтроки КАК Номер,
			|	ДокументыИсполнения.ДатаДокумента КАК Дата,
			|	ДокументыИсполнения.ВидДокумента.КодНаЕИС КАК КодВидаДокумента,
			|	ДокументыИсполнения.ВидДокумента.Наименование КАК НаименованиеВидаДокумента,
			|	ДокументыИсполнения.НомерДокумента КАК НомерДокумента,
			|	ДокументыИсполнения.МестоПоставки КАК МестоПоставки,
			|	ДокументыИсполнения.Номенклатура КАК Номенклатура,
			|	ПРЕДСТАВЛЕНИЕ(ДокументыИсполнения.Номенклатура) КАК НоменклатураНаименование,
			|	ДокументыИсполнения.Номенклатура.КодОКПД2.Код КАК КодОКПД2,
			|	ВЫБОР
			|		КОГДА ДокументыИсполнения.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения
			|			ТОГДА """"
			|		ИНАЧЕ ДокументыИсполнения.Номенклатура.ЕдиницаИзмерения.Код
			|	КОНЕЦ КАК КодОКЕИ,
			|	ДокументыИсполнения.ЕдиницаИзмерения.Наименование КАК НаименованиеОКЕИ,
			|	ДокументыИсполнения.УИДПозиции КАК УИДПозиции,
			|	ДокументыИсполнения.Количество КАК Количество
			|ИЗ
			|	Документ.СведенияОбИсполненииДоговора.ДокументыИсполнения КАК ДокументыИсполнения
			|ГДЕ
			|	ДокументыИсполнения.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокументыИсполнения.НомерСтроки,
			|	ДокументыИсполнения.ДатаДокумента,
			|	ДокументыИсполнения.ВидДокумента.Наименование,
			|	ДокументыИсполнения.НомерДокумента,
			|	ДокументыИсполнения.МестоПоставки,
			|	ДокументыИсполнения.Номенклатура,
			|	ДокументыИсполнения.Номенклатура.КодОКПД2.Код,
			|	ДокументыИсполнения.УИДПозиции,
			|	ДокументыИсполнения.ВидДокумента.КодНаЕИС,
			|	ДокументыИсполнения.Количество,
			|	ВЫБОР
			|		КОГДА ДокументыИсполнения.Номенклатура.ЕдиницаИзмерения = &ПустаяЕдиницаИзмерения
			|			ТОГДА """"
			|		ИНАЧЕ ДокументыИсполнения.Номенклатура.ЕдиницаИзмерения.Код
			|	КОНЕЦ,
			|	ДокументыИсполнения.ЕдиницаИзмерения.Наименование
			|ИТОГИ ПО
			|	УИДПозиции";
		
		Запрос.УстановитьПараметр("Ссылка", ИсполнениеДоговора);
		Запрос.УстановитьПараметр("ПустаяЕдиницаИзмерения", 
			УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.ПолучитьПустуюЕдиницуИзмерения());
		мРезультатЗапроса = Запрос.ВыполнитьПакет();
		ТЗРез = мРезультатЗапроса[0].Выгрузить();
		ТЗРез.Индексы.Добавить("УИДПозиции");
		ТЗРез.Колонки.Добавить("ДокументыИсполнения");
		ДеревоИсполнений = мРезультатЗапроса[1].Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		ДеревоИсполнений.Колонки.Добавить("ИдентификаторСтрокиЛота");
		Для Каждого СтрокаУИД Из ДеревоИсполнений.Строки Цикл
			СтрокаСведений = ТЗРез.Найти(СтрокаУИД.УИДПозиции, "УИДПозиции");
			СтрокаСведений.ДокументыИсполнения = СтрокаУИД.Строки;

			Для Каждого СтрокаДокумента Из СтрокаСведений.ДокументыИсполнения Цикл
				// Важно: строкаДокумента предается как строка лота,
				//        т.к. содержит поля Номенклатуа и МестоПоставки.
				СтрокаДокумента.ИдентификаторСтрокиЛота =
					ИнтеграцияЦУЗсЭТПСерверУХ.ИдентификаторСтрокиЛота(СтрокаДокумента);
				СтрокаДокумента.КодОКЕИ = СокрЛП(СтрокаДокумента.КодОКЕИ);
			КонецЦикла;
		КонецЦикла;
		Возврат ТЗРез;
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = НСтр(СтрШаблон(
				"ru='Ошибка получения описания документа исполнения договора %1.'",
				ИсполнениеДоговора))
			+ Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
		Возврат Неопределено;
	КонецПопытки;
	ТекстОшибки = НСтр(СтрШаблон(
		"ru='Неопознанная ошибка получения описания документа исполнения договора %1.'",
		ИсполнениеДоговора));
	Возврат Неопределено;
КонецФункции

// По типу документа получить ссылку на справочник
//  видов документов исполнения договора.
//
// Параметры:
//  ТипДокумента - Тип - тип документа в 1С.
// 
// Возвращаемое значение:
//   - СправочникСсылка.ВидыДокументовИсполненияДоговора
//		Если такому типу документа не сопоставлено
//		ни одного элемента справочника, то возвращает
//		пустое значение.
//
Функция ПолучитьВидДокументаИсполнения(ТипДокумента) Экспорт
	ДокументБД = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(ТипДокумента);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВидыДокументовИсполненияДоговора.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыДокументовИсполненияДоговора КАК ВидыДокументовИсполненияДоговора
		|ГДЕ
		|	ВидыДокументовИсполненияДоговора.ДокументБД = &ДокументБД";
	Запрос.УстановитьПараметр("ДокументБД", ДокументБД);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Возврат Справочники.ВидыДокументовИсполненияДоговора.ПустаяСсылка();
КонецФункции
	
// Версия для конфигурации не поддерживающей протокол обмена с ЕИС 7.5.
// Получить описание исполнения договора виде таблицы значений.
// Параметры:
//	ДоговорКонтрагента - СправочникСсылка.ДоговорыКонтрагентов.
//	ТекстОшибки - Строка(0). Переменная для возвращения из функции описания ошибки.
// Возвращает:
//	- Неопределено - возникла ошибка. В переменной ТекстОшибки содержиться описание.
// 	- ТаблицаЗначений, описывает номенклатуру договора. Поля:
//		Дата - Дата+Время, дата движения;
//		Сумма - Число, сумма движения по документу;
//		ВалютаДокумента - СправочникСсылка.Валюты, валюта документа;
//		Курс - Число, курс валюты документа на дату операции;
//		СуммаВРублях - Число, сумма операции выраженная в рублях на дату операции;
//		ЭтоАванс - Булево, если Истина - то это авансовый платеж;
//		Документ - ДокументСсылка, документ операции;
//
Функция ПолучитьОписаниеИсполненияДоговораПоПозициям(ДоговорКонтрагента, ТекстОшибки) Экспорт
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ИсполнениеДоговоровСПоставщиками.Документ КАК Документ,
			|	ИсполнениеДоговоровСПоставщиками.Дата КАК Дата,
			|	СУММА(ИсполнениеДоговоровСПоставщиками.Сумма) КАК Сумма,
			|	СУММА(ИсполнениеДоговоровСПоставщиками.СуммаРегл) КАК СуммаВРублях,
			|	ИсполнениеДоговоровСПоставщиками.ЭтоАванс КАК ЭтоАванс,
			|	ИсполнениеДоговоровСПоставщиками.ВалютаДокумента КАК ВалютаДокумента,
			|	МАКСИМУМ(ИсполнениеДоговоровСПоставщиками.Курс) КАК Курс,
			|	ИсполнениеДоговоровСПоставщиками.ВидОперациии КАК ВидОперациии
			|ИЗ
			|	РегистрСведений.ИсполнениеДоговоровСПоставщиками КАК ИсполнениеДоговоровСПоставщиками
			|ГДЕ
			|	ИсполнениеДоговоровСПоставщиками.ДоговорКонтрагента = &ДоговорКонтрагента
			|	И ИсполнениеДоговоровСПоставщиками.Дата <= &Дата
			|	И ИсполнениеДоговоровСПоставщиками.ВидОперациии = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийИсполненияДоговора.ОплатаПоставщику)
			|
			|СГРУППИРОВАТЬ ПО
			|	ИсполнениеДоговоровСПоставщиками.Документ,
			|	ИсполнениеДоговоровСПоставщиками.Дата,
			|	ИсполнениеДоговоровСПоставщиками.ВалютаДокумента,
			|	ИсполнениеДоговоровСПоставщиками.ЭтоАванс,
			|	ИсполнениеДоговоровСПоставщиками.ВидОперациии";
		
		Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
		Запрос.УстановитьПараметр("Дата", ТекущаяУниверсальнаяДата());
		
		РезультатЗапроса = Запрос.Выполнить();
		ТЗРез = РезультатЗапроса.Выгрузить();
		Возврат ТЗРез;
		
	Исключение
		Инфо = ИнформацияОбОшибке();
		ТекстОшибки = НСтр("ru='Ошибка получения таблицы исполнения договора '")
			+ ДоговорКонтрагента + "." + Символы.ПС + ПодробноеПредставлениеОшибки(Инфо);
		Возврат Неопределено;
	КонецПопытки;
	
	ТекстОшибки = НСтр("ru='Неопознанная ошибка получения таблицы исполнения договора '")
		+ ДоговорКонтрагента + ".";
	Возврат Неопределено;
КонецФункции

// Возвращает:
//	Истина - если для лота зарегистрировано требование "ОтсутствиеСведенийВРНП".
//	Ложь - в противном случае.
Функция ПроверитьТребованиеОтсутствиеСведенийВРНП(ЗакупочнаяПроцедура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Справочник.ЗакупочныеПроцедуры.ТребованияКПоставщикам КАК ТребованияКПоставщикам
		|ГДЕ
		|	ТребованияКПоставщикам.Ссылка = &ЗакупочнаяПроцедура
		|	И ТребованияКПоставщикам.ТребованиеКПоставщику = &ТребованиеКПоставщику";
	
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура",
		ЗакупочнаяПроцедура);
	Запрос.УстановитьПараметр("ТребованиеКПоставщику",
		Справочники.ТребованияКПоставщикам.ОтсутствиеСведенийВРНП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонеЦЕсли;
	
	Возврат Ложь;
КонецФункции

Функция ИзмененРазделСМППланаЗакупок(ПрограммаЗакупок) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЖурналОбменаСЭТП.ДатаОбмена) КАК ДатаОбмена
		|ПОМЕСТИТЬ ДатаПоследнегоОбменаПланомЗакупок
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|ГДЕ
		|	ЖурналОбменаСЭТП.ОбъектОбмена = &ПрограммаЗакупок
		|	И НЕ ЖурналОбменаСЭТП.Ошибка
		|	И НЕ ЖурналОбменаСЭТП.ОтЭТПК1С
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	Документ.ПрограммаЗакупок КАК ПрограммаЗакупок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПланаЗакупок.СрезПоследних(, ) КАК СтрокиПланаЗакупокСрезПоследних
		|		ПО ПрограммаЗакупок.ПериодЗакупок = СтрокиПланаЗакупокСрезПоследних.ПериодЗакупок
		|			И ПрограммаЗакупок.ОрганизацияДляЗаключенияДоговора = СтрокиПланаЗакупокСрезПоследних.ОрганизацияДляЗаключенияДоговора
		|			И ПрограммаЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств = СтрокиПланаЗакупокСрезПоследних.ИнновационныйПланЗакупок
		|			И (НЕ СтрокиПланаЗакупокСрезПоследних.Регистратор.ЗакрытаяЗакупка)
		|			И (СтрокиПланаЗакупокСрезПоследних.Регистратор.ПриоритетУчастияМалогоИСреднегоПредпринимательства),
		|	ДатаПоследнегоОбменаПланомЗакупок КАК ДатаПоследнегоОбменаПланомЗакупок
		|ГДЕ
		|	ПрограммаЗакупок.Ссылка = &ПрограммаЗакупок
		|	И ЕСТЬNULL(ДатаПоследнегоОбменаПланомЗакупок.ДатаОбмена, ДАТАВРЕМЯ(2015, 1, 1)) < СтрокиПланаЗакупокСрезПоследних.Регистратор.Дата";
	
	Запрос.УстановитьПараметр("ПрограммаЗакупок", ПрограммаЗакупок);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции

Функция ПолучитьРезультатОтменыПротокола(ДокументПротокол) Экспорт
	РезультатОтмены = Новый Структура("Отменен, ПричинаОтмены", Ложь, "");
	ТипПротокола = ТипЗнч(ДокументПротокол);
	Если ТипПротокола = Тип("ДокументСсылка.ПротоколВскрытияКонвертов") Тогда
		РезультатОтмены.Отменен = ДокументПротокол.Отменен;
		РезультатОтмены.ПричинаОтмены = ДокументПротокол.ПричинаОтмены;
	ИначеЕсли ТипПротокола = Тип("ДокументСсылка.ПротоколРассмотренияЗаявок") Тогда
		РезультатОтмены.Отменен = ДокументПротокол.Отменен;
		РезультатОтмены.ПричинаОтмены = ДокументПротокол.ПричинаОтмены;
	ИначеЕсли ТипПротокола = Тип("ДокументСсылка.ПротоколВыбораПобедителей") Тогда
		РезультатОтмены.Отменен = НЕ ДокументПротокол.ТоргиСостоялись;
		РезультатОтмены.ПричинаОтмены = ДокументПротокол.ПричинаПризнанияТорговНесостоявшимися;
	КонецЕсли;
	Возврат РезультатОтмены;
КонецФункции

Функция ПолучитьТребованияКСоставуДокументовПоЛоту(Лот) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЛотыТребованияКСоставуДокументов.НомерСтроки КАК Номер,
		|	ЛотыТребованияКСоставуДокументов.Требование КАК Требование
		|ИЗ
		|	Справочник.Лоты.ТребованияКСоставуДокументов КАК ЛотыТребованияКСоставуДокументов
		|ГДЕ
		|	ЛотыТребованияКСоставуДокументов.Ссылка = &Лот";
	Запрос.УстановитьПараметр("Лот", Лот);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Для документов Протокол... возвращает его родителя.
//
// Параметры:
//  ДокументПротокол - ДокументСсылка.ПротоколВыбораПобедителей
//					   | ДокументСсылка.ПротоколРассмотренияЗаявок
//					   | ДокументСсылка.ПротоколВскрытияКонвертов -
//		документ для которого, необходимо получить предшественника
//		в последовательности определенной логикой ЕИС.
// 
// Возвращаемое значение:
//   - СправочникСсылка.Лоты
//	   | ДокументСсылка.ПротоколРассмотренияЗаявок
//	   | ДокументСсылка.ПротоколВскрытияКонвертов -
//		документ основание для переданного документа.
//		Если  не удалось определить документ, то возвращает пустую ссылку
//		того типа документа, который должен предшествовать переданному.
//
Функция ПолучитьРодителяПротокола(ДокументПротокол) Экспорт
	Если НЕ ЗначениеЗаполнено(ДокументПротокол) Тогда
		Возврат Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
	КонецЕсли;
	ЗакупочнаяПроцедура = ДокументПротокол.ЗакупочнаяПроцедура;
	Если НЕ ЗначениеЗаполнено(ЗакупочнаяПроцедура) Тогда
		Возврат Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
	КонецЕсли;
	СпособВыбораПоставщика = ЗакупочнаяПроцедура.СпособВыбораПоставщика;
	Если НЕ ЗначениеЗаполнено(СпособВыбораПоставщика) Тогда
		Возврат Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
	КонецЕсли;
	ТипДокумента = ТипЗнч(ДокументПротокол);
	Если ТипДокумента = Тип("ДокументСсылка.ПротоколВскрытияКонвертов") Тогда
		Возврат ЗакупочнаяПроцедура;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПротоколРассмотренияЗаявок") Тогда
		Если СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Конкурс Тогда
			ПротоколВскрытияКонвертов = 
				ЦентрализованныеЗакупкиУХ.ПолучитьДокументЗакупочнойПроцедуры(
					"ПротоколВскрытияКонвертов",
					ЗакупочнаяПроцедура);
			Если ЗначениеЗаполнено(ПротоколВскрытияКонвертов) Тогда
				Возврат ПротоколВскрытияКонвертов;
			Иначе
				Возврат Документы.ПротоколВскрытияКонвертов.ПустаяСсылка();
			КонецЕсли;
		Иначе
			Возврат ЗакупочнаяПроцедура;
		КонецЕсли;
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПротоколВыбораПобедителей")
				И (СпособВыбораПоставщика = Перечисления.СпособыВыбораПоставщика.Конкурс
					ИЛИ Перечисления.СпособыВыбораПоставщика.ЭтоАукцион(СпособВыбораПоставщика)) Тогда
		ПротоколРассмотренияЗаявок = 
			ЦентрализованныеЗакупкиУХ.ПолучитьДокументЗакупочнойПроцедуры(
					"ПротоколРассмотренияЗаявок",
					ЗакупочнаяПроцедура);
		Если ЗначениеЗаполнено(ПротоколРассмотренияЗаявок) Тогда
			Возврат ПротоколРассмотренияЗаявок;
		КонецЕсли;
		Возврат ЗакупочнаяПроцедура;
	КонецЕсли;
	Возврат Справочники.ЗакупочныеПроцедуры.ПустаяСсылка();
КонецФункции

// Возвращает выборку запроса возвращающего лоты назначенные закупочной процедуре.
//
// Параметры:
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры - закупка.
// 
// Возвращаемое значение:
//   - ВыборкаИзРезультатаЗапроса - содержит одно поле "Лот".
//
Функция ПолучитьВыборокуЛотовЗакупочнойПроцедуры(ЗакупочнаяПроцедура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Лоты.Ссылка КАК Лот
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	Лоты.Владелец = &ЗакупочнаяПроцедура";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

// Возвращает таблицу значений описывающую объект и его версии
// найденные по УИД.
//
// Параметры:
//  УИДСтрока - Строка(36) - УИД объекта или версии для поиска.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений:
//		- Ссылка - ссылка на объект.
//		- НомерВерсии - номер версии.
//
Функция ПолучитьТаблицуСсылокПоУИД(УИДСтрока) Экспорт
	ТЗ = ПолучитьСсылкиНаВерсииПоУИД(УИДСтрока);
	мСсылок = ПолучитьСсылкиНаОбъектыПоУИД(УИДСтрока);
	Для Каждого Ссылка Из мСсылок Цикл
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока.Ссылка = Ссылка;
		НоваяСтрока.НомерВерсии = 0;
	КонецЦикла;
	Возврат ТЗ;
КонецФункции

Функция ПолучитьКонтрагентаДоговора(Договор) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		Возврат Договор.Контрагент;
	Иначе
		Возврат Договор.Владелец;
	КонецЕсли;
КонецФункции

// Установить контактную информацию контаргента
Процедура УстановитьКонтактнуюИнформациюОбъекта(ОбъектКИ, ЗначениеКИ, ВидКИ, XMLформат=Ложь) Экспорт
	Если ПустаяСтрока(ЗначениеКИ) Тогда
		Возврат;
	КонецЕсли;
	Если XMLформат Тогда
		СтрокаXMLКИ = ЗначениеКИ;
	Иначе
		СтрокаXMLКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияXMLПоПредставлению(ЗначениеКИ, ВидКИ);
	КонецЕсли;
	
	УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ОбъектКИ, СтрокаXMLКИ, ВидКИ, ВидКИ.Тип);
КонецПроцедуры

// Возвращает единое место поставки закупочной процедуры.
// Если места поставки различны, возвращает Неопределено.
//
Функция ЕдиноеМестоПоставкиВЗакупочнойПроцедуре(ЗакупочнаяПроцедура) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МИНИМУМ(Лоты.ЕдиноеМестоПоставки)
		|		И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Лоты.МестоПоставки) < 2 КАК ЕдиноеМестоПоставки,
		|	МАКСИМУМ(Лоты.МестоПоставки) КАК МестоПоставки
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	НЕ Лоты.ПометкаУдаления
		|	И Лоты.Владелец = &ЗакупочнаяПроцедура";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий()
			И ВыборкаДетальныеЗаписи.ЕдиноеМестоПоставки Тогда
		Возврат ВыборкаДетальныеЗаписи.МестоПоставки;
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

// Возвращает размер контрагента.
//
Функция ПолучитьРазмерКонтрагента(Контрагент, Дата=Неопределено) Экспорт
	Возврат
		РегистрыСведений.РазмерыКонтрагентовДляЕИС.ПолучитьРазмер(
			Контрагент, Дата);
КонецФункции


#КонецОбласти


#Область Работа_с_журналом_событий_обмена_с_ЭТП


// Возвращает структуру описывающую последнюю транзакцию.
// Параметры:
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которой необходимо узнать статус.
//	ЭТП - СправочникСсылка.Номенклатура - если указан, то получает данные по указанной ЭТП. Иначе ищет по всем ЭТП.
//
// Возвращает:
//	Структура - описание последнего обмена. Описание полей см. функцию ШаблонОписанияТранзакцииОбмена().
Функция ОписаниеПоследнейТранзакции(ОбъектОбмена, ЭТП=Неопределено) Экспорт
	ПоляОписанияТранзакции = ШаблонОписанияТранзакцииОбмена();
	
	Если НЕ ЗначениеЗаполнено(ОбъектОбмена) Тогда
		Возврат ПоляОписанияТранзакции;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЖурналОбменаСЭТП.ДатаОбмена) КАК ДатаОбмена
		|ПОМЕСТИТЬ ДатаПоследнегоОбмена
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|ГДЕ
		|	ЖурналОбменаСЭТП.ОбъектОбмена = &ОбъектОбмена
		|	И (ЖурналОбменаСЭТП.ЭТП = &ЭТП
		|			ИЛИ НЕ &ОтборПоЭТП)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(ЖурналОбменаСЭТП.НомерЗаписи) КАК НомерЗаписи,
		|	ЖурналОбменаСЭТП.ДатаОбмена КАК ДатаОбмена
		|ПОМЕСТИТЬ НомерПоследнегоОбмена
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДатаПоследнегоОбмена КАК ДатаПоследнегоОбмена
		|		ПО ЖурналОбменаСЭТП.ДатаОбмена = ДатаПоследнегоОбмена.ДатаОбмена
		|			И (ЖурналОбменаСЭТП.ОбъектОбмена = &ОбъектОбмена)
		|			И (ЖурналОбменаСЭТП.ЭТП = &ЭТП
		|				ИЛИ НЕ &ОтборПоЭТП)
		|ГДЕ
		|	ЖурналОбменаСЭТП.ОбъектОбмена = &ОбъектОбмена
		|
		|СГРУППИРОВАТЬ ПО
		|	ЖурналОбменаСЭТП.ДатаОбмена
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатусыПубликацииОбъектовНаЭТПСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыПубликацииОбъектовНаЭТП.СрезПоследних(
		|			,
		|			ОбъектОбмена = &ОбъектОбмена
		|				И (ЭТП = &ЭТП
		|					ИЛИ НЕ &ОтборПоЭТП)) КАК СтатусыПубликацииОбъектовНаЭТПСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.Сотрудник, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Сотрудник,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.ЭТП, ЗНАЧЕНИЕ(Справочник.ЭлектронныеТорговыеПлощадки.ПустаяСсылка)) КАК ЭТП,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.ОписаниеСобытия, """") КАК ОписаниеСобытия,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.Ошибка, ЛОЖЬ) КАК ОшибкаОбменаСЭТП,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.ТекстОшибки, """") КАК ТекстОшибки,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.ОтЭТПК1С, ЛОЖЬ) КАК ОтЭТПК1С,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.ВидТранзакции, НЕОПРЕДЕЛЕНО) КАК ВидТранзакции,
		|	ЕСТЬNULL(ЖурналОбменаСЭТП.Завершена, ЛОЖЬ) КАК Завершена,
		|	ЖурналОбменаСЭТП.КлючСообщения КАК КлючСообщения,
		|	ЖурналОбменаСЭТП.КлючОтвета КАК КлючОтвета
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомерПоследнегоОбмена КАК НомерПоследнегоОбмена
		|		ПО (ЖурналОбменаСЭТП.ОбъектОбмена = &ОбъектОбмена)
		|			И ЖурналОбменаСЭТП.НомерЗаписи = НомерПоследнегоОбмена.НомерЗаписи
		|			И ЖурналОбменаСЭТП.ДатаОбмена = НомерПоследнегоОбмена.ДатаОбмена";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектОбмена);
	Запрос.УстановитьПараметр("ЭТП", ЭТП);
	Запрос.УстановитьПараметр("ОтборПоЭТП", ЗначениеЗаполнено(ЭТП));
	
	мРезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗапроса = мРезультатЗапроса[2].Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ПоляОписанияТранзакции.Статус = ВыборкаЗапроса.Статус;
	КонецЕсли;
	
	ВыборкаЗапроса = мРезультатЗапроса[3].Выбрать();
	Если ВыборкаЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ПоляОписанияТранзакции, ВыборкаЗапроса);
		Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
			ПоляОписанияТранзакции.ЗаписанаВЖурнал = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПоляОписанияТранзакции;
КонецФункции

// Записывает в журнал обмена с ЭТП описание транзакции обмена данными. Устанавливает флаг ПоляОписания.ЗаписанаВЖурнал = Истина.
// Параметры:
//	ОбъектОбмена - ОпределяемыйТип.ОбъектыЦУЗОбменаСЭТП_УХ. Ссылка на объект для которого необходимо записать событие.
//  ЭТП - СправочникСсылка.ЭлектронныеТорговыеПлощадки.
//	ДатаСобытия - Дата+Время события.
//	ПоляОписанияТранзакции - Структура. См. описание функции ШаблонОписанияТранзакцииОбмена().
Процедура ЗаписатьСобытиеЖурнала(ОбъектОбмена, ЭТП, ПоляОписанияТранзакции) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ОбъектОбмена) ИЛИ НЕ ЗначениеЗаполнено(ЭТП) Тогда
		Возврат;
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ЖурналОбменаСЭТП");
	ЭлементБлокировки.УстановитьЗначение("ОбъектОбмена", ОбъектОбмена);
	ЭлементБлокировки.УстановитьЗначение("ДатаОбмена", ПоляОписанияТранзакции.ДатаОбмена);
	Блокировка.Заблокировать();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(МАКСИМУМ(ЖурналОбменаСЭТП.НомерЗаписи), 0) + 1 КАК НомерЗаписи
		|ИЗ
		|	РегистрСведений.ЖурналОбменаСЭТП КАК ЖурналОбменаСЭТП
		|ГДЕ
		|	ЖурналОбменаСЭТП.ДатаОбмена = &ДатаОбмена
		|	И ЖурналОбменаСЭТП.ОбъектОбмена = &ОбъектОбмена";
	
	Запрос.УстановитьПараметр("ОбъектОбмена", ОбъектОбмена);
	Запрос.УстановитьПараметр("ДатаОбмена", ПоляОписанияТранзакции.ДатаОбмена);
	
	НомерЗаписи = Запрос.Выполнить().Выгрузить()[0].НомерЗаписи;
	
	МенеджерЗаписи                  = РегистрыСведений.ЖурналОбменаСЭТП.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ОбъектОбмена		= ОбъектОбмена;
	МенеджерЗаписи.ДатаОбмена	    = ПоляОписанияТранзакции.ДатаОбмена;
	МенеджерЗаписи.НомерЗаписи      = НомерЗаписи;
	
	МенеджерЗаписи.ЭТП      		= ЭТП;
	МенеджерЗаписи.ОписаниеСобытия	= ПоляОписанияТранзакции.ОписаниеСобытия;
	МенеджерЗаписи.Ошибка      		= ПоляОписанияТранзакции.ОшибкаОбменаСЭТП;
	МенеджерЗаписи.ТекстОшибки      = ПоляОписанияТранзакции.ТекстОшибки;
	МенеджерЗаписи.Сотрудник        = ПоляОписанияТранзакции.Сотрудник;
	МенеджерЗаписи.ОтЭТПК1С      	= ПоляОписанияТранзакции.ОтЭТПК1С;
	МенеджерЗаписи.ВидТранзакции	= ПоляОписанияТранзакции.ВидТранзакции;
	МенеджерЗаписи.Завершена		= ПоляОписанияТранзакции.Завершена;
	
	МенеджерЗаписи.КлючСообщения	= ПоляОписанияТранзакции.КлючСообщения;
	МенеджерЗаписи.КлючОтвета		= ПоляОписанияТранзакции.КлючОтвета;
	
	МенеджерЗаписи.Записать();
	
	ЗафиксироватьТранзакцию();
	
	Если ПоляОписанияТранзакции.ОшибкаОбменаСЭТП Тогда
		ПоляОписанияТранзакции.ЗаписанаВЖурнал = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область НеЭкспортныеФункции


Функция ПолучитьСсылкиНаВерсииПоУИД(УИДСтрока)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииОбъектовДляЕИС.Объект КАК Ссылка,
		|	ВерсииОбъектовДляЕИС.НомерВерсии КАК НомерВерсии
		|ИЗ
		|	РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииОбъектовДляЕИС
		|ГДЕ
		|	ВерсииОбъектовДляЕИС.ГУИДВерсии = &ГУИДВерсии";
	Запрос.УстановитьПараметр("ГУИДВерсии", УИДСтрока);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить();
КонецФункции

Функция ПолучитьСсылкиНаОбъектыПоУИД(УИДСтрока)
	УИД = Новый УникальныйИдентификатор(УИДСтрока);
	мСсылок = Новый Массив;
	ДобавитьСсылкуПоУИДИВидуОбъекта(мСсылок, Справочники, УИД);
	ДобавитьСсылкуПоУИДИВидуОбъекта(мСсылок, Документы, УИД);
	ДобавитьСсылкуПоУИДИВидуОбъекта(мСсылок, ПланыВидовХарактеристик, УИД);
	Возврат мСсылок;
КонецФункции

Процедура ДобавитьСсылкуПоУИДИВидуОбъекта(мСсылок, ВидОбъекта, УИД)
	Для Каждого Менеджер Из ВидОбъекта Цикл
		Ссылка = Менеджер.ПолучитьСсылку(УИД);
		Если Ссылка.ПолучитьОбъект() <> Неопределено Тогда
			мСсылок.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


#КонецОбласти

