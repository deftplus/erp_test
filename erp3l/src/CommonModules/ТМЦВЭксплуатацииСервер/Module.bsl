////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции подсистемы ТМЦ в эксплуатации.
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	ТипДокумента = ТипЗнч(Документ);
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		//++ НЕ УТ
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации);
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.НаработкиТМЦВЭксплуатации);
		//-- НЕ УТ
		
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		
		//++ НЕ УТ
		Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение
				И (ТипДокумента = Тип("ДокументОбъект.ПрочееОприходованиеТоваров")
					ИЛИ ТипДокумента = Тип("ДокументОбъект.СписаниеИзЭксплуатации"))
			ИЛИ Не Свойства.ЭтоНовый
				И (ТипДокумента = Тип("ДокументОбъект.ВводОстатков") 
					ИЛИ ТипДокумента = Тип("ДокументОбъект.ВводОстатковТМЦВЭксплуатации")
					ИЛИ ТипДокумента = Тип("ДокументОбъект.ВнутреннееПотреблениеТоваров"))
			ИЛИ ТипДокумента = Тип("ДокументОбъект.ПеремещениеВЭксплуатации") Тогда
			
			Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации);
		КонецЕсли;
		//-- НЕ УТ
		
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам взаиморасчетов.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "ТМЦВЭксплуатации");
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "НаработкиТМЦВЭксплуатации");
	
КонецПроцедуры

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	//++ НЕ УТ
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТаблицаОборотов.Организация  КАК Организация,
			|	ТаблицаОборотов.Подразделение КАК Подразделение,
			|	ТаблицаОборотов.ФизическоеЛицо КАК ФизическоеЛицо,
			|	ТаблицаОборотов.Номенклатура КАК Номенклатура,
			|	ТаблицаОборотов.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаОборотов.Характеристика КАК Характеристика,
			|	ТаблицаОборотов.Серия КАК Серия,
			|	ТаблицаОборотов.Партия КАК Партия,
			|	ТаблицаОборотов.НаправлениеДеятельности КАК НаправлениеДеятельности,
			|	ТаблицаОборотов.ИнвентарныйНомер КАК ИнвентарныйНомер,
			|	ТаблицаОборотов.КоличествоОстаток КАК Количество
			|ИЗ
			|	РегистрНакопления.ТМЦВЭксплуатации.Остатки(,
			|			(Организация, Подразделение, ФизическоеЛицо, Номенклатура, Характеристика, Серия, Партия, НаправлениеДеятельности, ИнвентарныйНомер) В
			|				(ВЫБРАТЬ
			|					Таблица.Организация,
			|					Таблица.Подразделение,
			|					Таблица.ФизическоеЛицо,
			|					Таблица.Номенклатура,
			|					Таблица.Характеристика,
			|					Таблица.Серия,
			|					Таблица.Партия,
			|					Таблица.НаправлениеДеятельности,
			|					Таблица.ИнвентарныйНомер
			|				ИЗ
			|					ДвиженияТМЦВЭксплуатацииИзменение КАК Таблица)
			|	) КАК ТаблицаОборотов
			|ГДЕ
			|	ТаблицаОборотов.КоличествоОстаток < 0";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиТМЦВЭксплуатации");
		
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияТМЦВЭксплуатацииИзменение") Тогда
		
		ШаблонСообщения = НСтр("ru = 'Превышен оперативный остаток в подразделении %1, на %2 %3';
								|en = 'Operational stock balance in business unit %1 is exceeded by %2 %3'");
		ШаблонСообщенияФизЛицо = НСтр("ru = 'Превышен оперативный остаток в подразделении %1 (физ. лицо %2), на %3 %4';
										|en = 'Operational stock balance in business unit %1 (individual %2) is exceeded by %3 %4'");
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиТМЦВЭксплуатации Цикл
			
			Строки = Новый Массив;
			
			ПредставлениеНоменклатуры = НоменклатураКлиентСервер.ПредставлениеНоменклатуры(
				СтрокаОшибки.Номенклатура,
				СтрокаОшибки.Характеристика,,
				СтрокаОшибки.Серия);
			Строки.Добавить(СтрШаблон(НСтр("ru = 'Номенклатура: %1';
											|en = 'Items: %1'"), ПредставлениеНоменклатуры));

			Если ЗначениеЗаполнено(СтрокаОшибки.ИнвентарныйНомер) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Инв.№: %1';
													|en = 'Inv. No. %1'"), СтрокаОшибки.ИнвентарныйНомер));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаОшибки.НаправлениеДеятельности) Тогда
				Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Направление деятельности: %1';
													|en = 'Line of business: %1'"), СтрокаОшибки.НаправлениеДеятельности));
			КонецЕсли;

			Строки.Добавить(" " + СтрШаблон(НСтр("ru = 'Партия: %1';
												|en = 'Lot: %1'"), СтрокаОшибки.Партия));
				
			ТекстСообщения = СтрСоединить(Строки, НСтр("ru = ';';
														|en = ';'"));
			
			Если ЗначениеЗаполнено(СтрокаОшибки.ФизическоеЛицо) Тогда
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщенияФизЛицо, СтрокаОшибки.Подразделение, СтрокаОшибки.ФизическоеЛицо, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			Иначе	
				
				ТекстСообщения = 
					ТекстСообщения
					+ Символы.ПС
					+ СтрШаблон(ШаблонСообщения, СтрокаОшибки.Подразделение, -СтрокаОшибки.Количество, СтрокаОшибки.ЕдиницаИзмерения);
					
			КонецЕсли;
			
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из соответствующего обработчика документа
// 
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотреблениеТоваров - Обрабатываемый объект
//  Отказ - Булево - Признак отказа от записи.
//  РежимЗаписи - РежимЗаписиДокумента - Текущий режим записи документа.
//  РежимПроведения - РежимПроведенияДокумента - Текущий режим проведения.
Процедура ВнутреннееПотреблениеТоваров_ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	//++ НЕ УТ
	
	СписокКатегорий = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.КатегорияЭксплуатации)
			И СписокКатегорий.Найти(СтрокаТЧ.КатегорияЭксплуатации) = Неопределено Тогда
			СписокКатегорий.Добавить(СтрокаТЧ.КатегорияЭксплуатации);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыКатегорий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
			СписокКатегорий, "УчитыватьВВидеГрупповогоОС,ИнвентарныйУчет");
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КатегорияЭксплуатации) Тогда
			Продолжить
		КонецЕсли;
				
		СвойстваКатегории = РеквизитыКатегорий.Получить(СтрокаТЧ.КатегорияЭксплуатации);
		
		Если СвойстваКатегории.ИнвентарныйУчет Тогда
			СтрокаТЧ.Упаковка = Справочники.УпаковкиЕдиницыИзмерения.ПустаяСсылка();
			СтрокаТЧ.КоличествоУпаковок = 1;
			СтрокаТЧ.Количество = 1;
		Иначе
			СтрокаТЧ.ИнвентарныйНомер = "";
		КонецЕсли;
		
	КонецЦикла;
	
	//-- НЕ УТ
	
	Справочники.ПартииТМЦВЭксплуатации.ЗаполнитьПартии(Объект, РежимЗаписи);
	
	//++ НЕ УТ

	СписокПартий = Новый Массив;
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.Партия)
			И СписокПартий.Найти(СтрокаТЧ.Партия) = Неопределено Тогда
			СписокПартий.Добавить(СтрокаТЧ.Партия);
		КонецЕсли;
	КонецЦикла;
	
	РеквизитыПартий = Неопределено;
	
	Для Каждого СтрокаТЧ Из Объект.Товары Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.КатегорияЭксплуатации)
			ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.Партия) Тогда
			Продолжить;
		КонецЕсли;
				
		СвойстваКатегории = РеквизитыКатегорий.Получить(СтрокаТЧ.КатегорияЭксплуатации);
		
		Если СвойстваКатегории.УчитыватьВВидеГрупповогоОС Тогда
			
			Если РеквизитыПартий = Неопределено Тогда
				РеквизитыПартий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(СписокПартий, "ОсновноеСредство");
			КонецЕсли;
			
			СвойстваПартии = РеквизитыПартий.Получить(СтрокаТЧ.Партия);
			СтрокаТЧ.АналитикаРасходов = СвойстваПартии.ОсновноеСредство;
			
		КонецЕсли;
			
	КонецЦикла;
	
	//-- НЕ УТ
	
КонецПроцедуры

//++ НЕ УТ

// Проверяет заполнение инвентарного номера и количества.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ.
//  НепроверяемыеРеквизиты - Массив - Непроверяемые реквизиты.
//  Отказ - Булево - Истина, если проверка не пройдена.
//  ПараметрыПроверки - см. ПараметрыПроверкиИнвентарногоУчета
//
Процедура ПроверитьИнвентарныйУчет(Объект, НепроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт

	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиИнвентарногоУчета();
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыПроверки.ИмяТЧ]; // ТабличнаяЧасть
	
	НепроверяемыеРеквизиты.Добавить(ПараметрыПроверки.ИмяТЧ + ".ИнвентарныйНомер");
	
	СписокПартий = Новый Массив;
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		Если ЗначениеЗаполнено(ДанныеСтроки.Партия)
			И (НЕ ЗначениеЗаполнено(ДанныеСтроки.ИнвентарныйНомер)
				ИЛИ ДанныеСтроки.Количество > 1) Тогда
			
			СписокПартий.Добавить(ДанныеСтроки.Партия);
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦВЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
	|ГДЕ
	|	ПартииТМЦВЭксплуатации.Ссылка В (&СписокПартий)
	|	И ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.ИнвентарныйУчет";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПартииСИнвентарнымУчетом = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ПартииСИнвентарнымУчетом.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	ШаблонСообщенияИнвентарныйНомер = НСтр("ru = 'Не заполнена колонка ""Инв. №"" в строке %1 списка ""%2""';
											|en = 'Column ""Inv. #"" in line %1 of list ""%2"" is not filled in'");
	
	ШаблонСообщенияКоличество = НСтр("ru = 'По партии ведется инвентарный учет, количество в единицах хранения должно быть установлено равным 1 в строке %1 списка ""%2""';
									|en = 'An inventory accounting is kept for the batch, the quantity in storage units must be set equal to 1 in the line %1 of the ""%2"" list'");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия)
			ИЛИ ПартииСИнвентарнымУчетом.Получить(ДанныеСтроки.Партия) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ИнвентарныйНомер) Тогда
			
			ТекстСообщения = 
				СтрШаблон(ШаблонСообщенияИнвентарныйНомер, 
					Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0;"),
					ПараметрыПроверки.ПредставлениеТЧ);
			
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, ДанныеСтроки.НомерСтроки, "ИнвентарныйНомер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			
		КонецЕсли;

		Если ДанныеСтроки.Количество > 1 Тогда
			
			ТекстСообщения = 
				СтрШаблон(ШаблонСообщенияКоличество, 
					Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0;"),
					ПараметрыПроверки.ПредставлениеТЧ);
				
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, ДанныеСтроки.НомерСтроки, ПараметрыПроверки.ИмяРеквизитаКоличество);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры проверки инвентарного учета.
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ПредставлениеТЧ - Строка - значение по умолчанию "ТМЦ в эксплуатации".
//			* ИмяРеквизитаКоличество - Строка - значение по умолчанию "Количество".
//
Функция ПараметрыПроверкиИнвентарногоУчета() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ", "Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ", НСтр("ru = 'ТМЦ в эксплуатации';
														|en = 'Inventory in operation'"));
	ПараметрыПроверки.Вставить("ИмяРеквизитаКоличество", "Количество");
	
	Возврат ПараметрыПроверки;
	
КонецФункции

// Проверяет заполнение физ. лица.
// 
// Параметры:
//  Объект - ДокументОбъект - Документ.
//  НепроверяемыеРеквизиты - Массив - Непроверяемые реквизиты.
//  Отказ - Булево - Истина, если проверка не пройдена.
//  ПараметрыПроверки - см. ПараметрыПроверкиУчетаПоФизЛицам
//
Процедура ПроверитьУчетПоФизЛицам(Объект, НепроверяемыеРеквизиты, Отказ, ПараметрыПроверки = Неопределено) Экспорт
	
	Если ПараметрыПроверки = Неопределено Тогда
		ПараметрыПроверки = ПараметрыПроверкиУчетаПоФизЛицам();
	КонецЕсли;
	
	ТабличнаяЧасть = Объект[ПараметрыПроверки.ИмяТЧ]; // ТабличнаяЧасть

	Для Каждого ПараметрыРеквизита Из ПараметрыПроверки.РеквизитыФизическоеЛицо Цикл
		НепроверяемыеРеквизиты.Добавить(ПараметрыПроверки.ИмяТЧ + "." + ПараметрыРеквизита.Значение);
	КонецЦикла;

	СписокПартий = Новый Массив;
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрыРеквизита Из ПараметрыПроверки.РеквизитыФизическоеЛицо Цикл
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ПараметрыРеквизита.Значение]) Тогда
				СписокПартий.Добавить(ДанныеСтроки.Партия);
				Прервать;
			КонецЕсли;
		КонецЦикла;

	КонецЦикла;
	
	Если СписокПартий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦВЭксплуатации.Ссылка
	|ИЗ
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
	|ГДЕ
	|	ПартииТМЦВЭксплуатации.Ссылка В (&СписокПартий)
	|	И ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.УчетПоФизЛицам";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПартииСУчетомПоФизЛицам = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ПартииСУчетомПоФизЛицам.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	ШаблонСообщения = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""%3""';
							|en = 'Column ""%1"" in line %2 of list ""%3"" is required'");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Партия)
			ИЛИ ПартииСУчетомПоФизЛицам.Получить(ДанныеСтроки.Партия) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПараметрыРеквизита Из ПараметрыПроверки.РеквизитыФизическоеЛицо Цикл
			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки[ПараметрыРеквизита.Значение]) Тогда
				
				ТекстСообщения = 
					СтрШаблон(ШаблонСообщения, 
						ПараметрыРеквизита.Представление,
						Формат(ДанныеСтроки.НомерСтроки, "ЧГ=0;"),
						ПараметрыПроверки.ПредставлениеТЧ);
				
				Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(ПараметрыПроверки.ИмяТЧ, ДанныеСтроки.НомерСтроки, ПараметрыРеквизита.Значение);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект", Отказ);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает параметры проверки учета по физ. лицам.
//
//	Возвращаемое значение:
//		Структура  - структура со следующими ключами:
//			* ИмяТЧ - Строка - значение по умолчанию "Товары".
//			* ПредставлениеТЧ - Строка - значение по умолчанию "ТМЦ в эксплуатации".
//			* РеквизитыФизическоеЛицо - СписокЗначений - значение по умолчанию "ФизическоеЛицо".
//
Функция ПараметрыПроверкиУчетаПоФизЛицам() Экспорт
	
	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ИмяТЧ", "Товары");
	ПараметрыПроверки.Вставить("ПредставлениеТЧ", НСтр("ru = 'ТМЦ в эксплуатации';
														|en = 'Inventory in operation'"));
	
	СписокРеквизитов = Новый СписокЗначений();
	СписокРеквизитов.Добавить("ФизическоеЛицо", НСтр("ru = 'Физическое лицо';
													|en = 'Person'"));
	ПараметрыПроверки.Вставить("РеквизитыФизическоеЛицо", СписокРеквизитов);
	
	Возврат ПараметрыПроверки;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область Прочее

// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт

	//++ НЕ УТ
	
	#Область ВедомостьТМЦВЭксплуатации
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ВедомостьТМЦВЭксплуатации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ количественного движения ТМЦ в эксплуатации.';
									|en = 'Analysis of quantitative movement of inventory in operation.'");
	
	#КонецОбласти
	
	#Область ОстаткиТМЦВЭксплуатации
	
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТМЦВЭксплуатации);
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ остатков ТМЦ в эксплуатации.';
									|en = 'Analysis of balance of inventory in operation.'");
	
	#КонецОбласти

	//-- НЕ УТ

	#Область ОстаткиТМЦВЭксплуатацииУТ
	ОписаниеОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ОстаткиТМЦВЭксплуатацииУТ);
	ОписаниеОтчета.ФункциональныеОпции.Добавить("УправлениеТорговлей");
	ОписаниеОтчета.ОпределитьНастройкиФормы = Истина;
	
	ОписаниеВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, ОписаниеОтчета, "");
	ОписаниеВарианта.Описание = НСтр("ru = 'Анализ остатков ТМЦ в эксплуатации с действующим сроком эксплуатации.';
									|en = 'Analysis of balance of inventory in operation with the valid operation life.'");
	#КонецОбласти
	
КонецПроцедуры

// Определяет возможен ли учет серий в эксплуатации.
// 
// Возвращаемое значение:
//  Булево - Истина, если есть учетная политика с включенным учетом серий в эксплуатации
Функция ВозможенУчетСерийВЭксплуатации() Экспорт
	
	ИспользоватьСерии = ПолучитьФункциональнуюОпцию("ИспользоватьСерииНоменклатурыСклад", Новый Структура());
	
	Если НЕ ИспользоватьСерии Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	|ГДЕ
	|	ВидыНоменклатуры.ПолитикаУчетаСерий.УчитыватьСерииТМЦВЭксплуатации
	|	И НЕ ВидыНоменклатуры.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции

//++ НЕ УТ

Процедура СформироватьЗаписиРегистровЗаданий(ДокументСсылка, ДанныеТаблиц) Экспорт

	ОписаниеЗамера = ОценкаПроизводительности.НачатьЗамерДлительнойОперации("ТМЦВЭксплуатацииСервер.ФормированиеЗаданийКЗакрытиюМесяца");
	
	СписокТаблиц = Новый Массив;
	СписокТаблиц.Добавить("ПрочееОприходованиеТоваров");
	
	ТекстОбъединенияДанных = ВнеоборотныеАктивы.СформироватьТекстОбъединенияДанныхДляФормированияЗадания(СписокТаблиц, ДанныеТаблиц, "Партия");
	
	Если ТекстОбъединенияДанных = "" Тогда
		Возврат;
	КонецЕсли;
	
	СписокЗапросов = Новый Массив;
	
	#Область ИзмененныеДанные
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация КАК Организация,
	|	ИзмененныеДанные.Партия      КАК Партия,
	|	ИзмененныеДанные.Документ    КАК Документ,
	|	ИзмененныеДанные.Период      КАК Период
	|ПОМЕСТИТЬ ИзмененныеДанные
	|ИЗ
	|	(" + ТекстОбъединенияДанных + ") КАК ИзмененныеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Партия,
	|	ИзмененныеДанные.Документ,
	|	ИзмененныеДанные.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Партия";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	#Область ФормированиеЗаданий
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ,
	|	ЕСТЬNULL(ПакетыПогашенияСтоимостиТМЦ.НомерПакета, 0) КАК НомерПакета,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВнутреннееПотреблениеТоваров)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ИзмененныеДанные.Период, МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатков)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатков.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковТМЦВЭксплуатации)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатковТМЦВЭксплуатации.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ПрочееОприходованиеТоваров)
	|					И НАЧАЛОПЕРИОДА(ПрочееОприходованиеТоваров.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).Дата, МЕСЯЦ)
	|				ТОГДА НАЧАЛОПЕРИОДА(ПрочееОприходованиеТоваров.Дата, МЕСЯЦ)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ПеремещениеВЭксплуатации)
	|					И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).Дата, МЕСЯЦ)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.СписаниеИзЭксплуатации)
	|					И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).Дата, МЕСЯЦ)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			ИНАЧЕ ИзмененныеДанные.Период
	|		КОНЕЦ) КАК Месяц
	|ИЗ
	|	ИзмененныеДанные КАК ИзмененныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатков КАК ВводОстатков
	|		ПО (ВводОстатков.Ссылка = ИзмененныеДанные.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВводОстатковТМЦВЭксплуатации КАК ВводОстатковТМЦВЭксплуатации
	|		ПО (ВводОстатковТМЦВЭксплуатации.Ссылка = ИзмененныеДанные.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПрочееОприходованиеТоваров КАК ПрочееОприходованиеТоваров
	|		ПО (ПрочееОприходованиеТоваров.Ссылка = ИзмененныеДанные.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПеремещениеВЭксплуатации КАК ПеремещениеВЭксплуатации
	|		ПО (ПеремещениеВЭксплуатации.Ссылка = ИзмененныеДанные.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеИзЭксплуатации КАК СписаниеИзЭксплуатации
	|		ПО (СписаниеИзЭксплуатации.Ссылка = ИзмененныеДанные.Документ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПакетыПогашенияСтоимостиТМЦ КАК ПакетыПогашенияСтоимостиТМЦ
	|		ПО (ПакетыПогашенияСтоимостиТМЦ.Организация = ИзмененныеДанные.Организация)
	|			И (ПакетыПогашенияСтоимостиТМЦ.Партия = ИзмененныеДанные.Партия)
	|ГДЕ
	|	(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ В (
	|						ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоСроку), 
	|						ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПоНаработке))
	|			ИЛИ ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ПрочееОприходованиеТоваров)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ПеремещениеВЭксплуатации)
	|			ИЛИ ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.СписаниеИзЭксплуатации))
	|
	|СГРУППИРОВАТЬ ПО
	|	ИзмененныеДанные.Организация,
	|	ИзмененныеДанные.Документ,
	|	ЕСТЬNULL(ПакетыПогашенияСтоимостиТМЦ.НомерПакета, 0)
	|
	|ИМЕЮЩИЕ МИНИМУМ(ВЫБОР
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВнутреннееПотреблениеТоваров)
	|				ТОГДА ДОБАВИТЬКДАТЕ(ИзмененныеДанные.Период, МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатков)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатков.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ВводОстатковТМЦВЭксплуатации)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВводОстатковТМЦВЭксплуатации.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ПрочееОприходованиеТоваров)
	|					И НАЧАЛОПЕРИОДА(ПрочееОприходованиеТоваров.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).Дата, МЕСЯЦ)
	|				ТОГДА НАЧАЛОПЕРИОДА(ПрочееОприходованиеТоваров.Дата, МЕСЯЦ)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.ПеремещениеВЭксплуатации)
	|					И НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).Дата, МЕСЯЦ)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ПеремещениеВЭксплуатации.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			КОГДА ТИПЗНАЧЕНИЯ(ИзмененныеДанные.Документ) = ТИП(Документ.СписаниеИзЭксплуатации)
	|					И НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ) = НАЧАЛОПЕРИОДА(ВЫРАЗИТЬ(ИзмененныеДанные.Партия КАК Справочник.ПартииТМЦВЭксплуатации).Дата, МЕСЯЦ)
	|				ТОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(СписаниеИзЭксплуатации.Дата, МЕСЯЦ), МЕСЯЦ, 1)
	|			ИНАЧЕ ИзмененныеДанные.Период
	|		КОНЕЦ) < &ДатаНачалаДействияФСБУ5";
	
	СписокЗапросов.Добавить(ТекстЗапроса);
	#КонецОбласти
	
	ИспользуемыеВременныеТаблицы = ОбщегоНазначенияУТ.СписокВременныхТаблиц(ДанныеТаблиц.МенеджерВременныхТаблиц);
	
	ТекстЗапроса = СтрСоединить(СписокЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДатаНачалаДействияФСБУ5", РеглУчетКлиентСервер.НачалоПримененияФСБУ5_2019());
	РезультатЗапроса = Запрос.Выполнить();
	
	ОбщегоНазначенияУТ.УничтожитьВременныеТаблицы(ДанныеТаблиц.МенеджерВременныхТаблиц,, ИспользуемыеВременныеТаблицы);
	
	РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.СоздатьЗаписиРегистраПоДаннымВыборки(РезультатЗапроса.Выбрать());
	
	ОценкаПроизводительности.ЗакончитьЗамерДлительнойОперации(ОписаниеЗамера, 1);
	
КонецПроцедуры

// Устанавливает условное оформление инвентарного номера.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой устанавливается условное оформление.
//  ИмяПоляИнвентарныйНомер - Строка - Имя поля "ИнвентарныйНомер" на форме.
//  ПутьКПолюИнвентарныйУчет - Строка - Путь к полю "ИнвентарныйНомер".
//  ПутьКПолюПартия - Строка - Путь к полю "Партия".
Процедура УстановитьУсловноеОформлениеИнвентарногоНомера(Форма, ИмяПоляИнвентарныйНомер = "", ПутьКПолюИнвентарныйУчет = "", ПутьКПолюПартия = "") Экспорт
	
	Если ИмяПоляИнвентарныйНомер = "" Тогда
		ИмяПоляИнвентарныйНомер = "ТоварыИнвентарныйНомер";
	КонецЕсли;
	
	Если ПутьКПолюИнвентарныйУчет = "" Тогда
		ПутьКПолюИнвентарныйУчет = "Объект.Товары.ИнвентарныйУчет";
	КонецЕсли;
	
	Если ПутьКПолюПартия = "" Тогда
		ПутьКПолюПартия = "Объект.Товары.Партия";
	КонецЕсли;

	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляИнвентарныйНомер]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюИнвентарныйУчет);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюПартия);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																					|en = '<not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Устанавливает условное оформление физ. лица.
// 
// Параметры:
//  Форма - ФормаКлиентскогоПриложения - Форма в которой устанавливается условное оформление.
//  ИмяПоляФизЛицо - Строка - Имя поля "ФизическоеЛицо" на форме.
//  ПутьКПолюУчетПоФизЛицам - Строка - Путь к полю "УчетПоФизЛицам".
//  ПутьКПолюПартия - Строка - Путь к полю "Партия".
Процедура УстановитьУсловноеОформлениеФизЛица(Форма, ИмяПоляФизЛицо = "", ПутьКПолюУчетПоФизЛицам = "", ПутьКПолюПартия = "") Экспорт
	
	Если ИмяПоляФизЛицо = "" Тогда
		ИмяПоляФизЛицо = "ТоварыФизическоеЛицо";
	КонецЕсли;
	
	Если ПутьКПолюУчетПоФизЛицам = "" Тогда
		ПутьКПолюУчетПоФизЛицам = "Объект.Товары.УчетПоФизЛицам";
	КонецЕсли;
	
	Если ПутьКПолюПартия = "" Тогда
		ПутьКПолюПартия = "Объект.Товары.Партия";
	КонецЕсли;

	УсловноеОформление = Форма.УсловноеОформление;
	ЭлементыФормы = Форма.Элементы;
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеФормы = ЭлементыФормы[ИмяПоляФизЛицо]; // ПолеФормы
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ПолеФормы.Имя);
	
	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюУчетПоФизЛицам);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьКПолюПартия);
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;

	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не используется>';
																					|en = '<not used>'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
КонецПроцедуры

// Заполнить служебные реквизиты по партии ТМЦ.
// 
// Параметры:
//  ТабличнаяЧасть - ДанныеФормыКоллекция - Табличная часть.
Процедура ЗаполнитьСлужебныеРеквизитыПоПартииТМЦ(ТабличнаяЧасть) Экспорт

	СписокПартий = Новый Массив;
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		СписокПартий.Добавить(ДанныеСтроки.Партия); 
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ПартииТМЦВЭксплуатации.Ссылка КАК Ссылка,
	|	ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.ИнвентарныйУчет КАК ИнвентарныйУчет,
	|	ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.УчетПоФизЛицам КАК УчетПоФизЛицам,
	|	ПартииТМЦВЭксплуатации.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС КАК УчитыватьВВидеГрупповогоОС
	|ИЗ 
	|	Справочник.ПартииТМЦВЭксплуатации КАК ПартииТМЦВЭксплуатации
	|ГДЕ
	|	ПартииТМЦВЭксплуатации.Ссылка В (&СписокПартий)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("СписокПартий", СписокПартий);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	ПараметрыПартий = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		ПараметрыПартии = Новый Структура;
		ПараметрыПартии.Вставить("ИнвентарныйУчет", Выборка.ИнвентарныйУчет);
		ПараметрыПартии.Вставить("УчетПоФизЛицам", Выборка.УчетПоФизЛицам);
		ПараметрыПартии.Вставить("УчитыватьВВидеГрупповогоОС", Выборка.УчитыватьВВидеГрупповогоОС);
		ПараметрыПартий.Вставить(Выборка.Ссылка, ПараметрыПартии);
	КонецЦикла;
	
	ЗначенияЗаполнения = Новый Структура("ИнвентарныйУчет,УчетПоФизЛицам,УчитыватьВВидеГрупповогоОС");
	
	Для Каждого ДанныеСтроки Из ТабличнаяЧасть Цикл
		
		ПараметрыПартии = ПараметрыПартий.Получить(ДанныеСтроки.Партия);
		
		Если ПараметрыПартии <> Неопределено Тогда
			ЗначенияЗаполнения.ИнвентарныйУчет = ПараметрыПартии.ИнвентарныйУчет;
			ЗначенияЗаполнения.УчетПоФизЛицам = ПараметрыПартии.УчетПоФизЛицам;
			ЗначенияЗаполнения.УчитыватьВВидеГрупповогоОС = ПараметрыПартии.УчитыватьВВидеГрупповогоОС;
		Иначе
			ЗначенияЗаполнения.ИнвентарныйУчет = Ложь;
			ЗначенияЗаполнения.УчетПоФизЛицам = Ложь;
			ЗначенияЗаполнения.УчитыватьВВидеГрупповогоОС = Ложь;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ЗначенияЗаполнения);
	
	КонецЦикла;
	
КонецПроцедуры

// Генерирует новый инвентарный номер.
// 
// Параметры:
//  УчестьИнвентарныеНомера - Массив - Учесть инвентарные номера.
//  ИсключитьДокумент - ДокументСсылка - Исключить движения документа.
// 
// Возвращаемое значение:
//	Строка - Новый инвентарный номер.
Функция НовыйИнвентарныйНомер(УчестьИнвентарныеНомера = Неопределено, ИсключитьДокумент = Неопределено) Экспорт

	ДлинаНомера = Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип.КвалификаторыСтроки.Длина;
	
	ШаблонПоиска = "";
	Для индекс = 1 По ДлинаНомера Цикл
		ШаблонПоиска = ШаблонПоиска + "[0123456789]";
	КонецЦикла;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПОДСТРОКА(ТМЦВЭксплуатации.ИнвентарныйНомер, 1, &ДлинаНомера) КАК ИнвентарныйНомер
	|ИЗ
	|	РегистрНакопления.ТМЦВЭксплуатации КАК ТМЦВЭксплуатации
	|ГДЕ
	|	ТМЦВЭксплуатации.ИнвентарныйНомер ПОДОБНО ""&ШаблонПоиска""
	|	И ТМЦВЭксплуатации.ИнвентарныйНомер <> """"
	|	И ТМЦВЭксплуатации.Регистратор <> &ИсключитьДокумент
	|	И ТМЦВЭксплуатации.Активность
	|	
	|УПОРЯДОЧИТЬ ПО
	|	ТМЦВЭксплуатации.ИнвентарныйНомер УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ШаблонПоиска", ШаблонПоиска);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДлинаНомера", ДлинаНомера);
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИсключитьДокумент", ИсключитьДокумент);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);

	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомера, 0);
		ИнвентарныйНомерЧислом = ОписаниеТипаЧисла.ПривестиЗначение(Выборка.ИнвентарныйНомер) + 1;
	Иначе	
		ИнвентарныйНомерЧислом = 1;
	КонецЕсли;
	
	Если УчестьИнвентарныеНомера <> Неопределено Тогда
		
		ВсеИнвентарныеНомера = Новый СписокЗначений();
		ВсеИнвентарныеНомера.Добавить(ИнвентарныйНомерЧислом);
		
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомера, 0);
		Для Каждого ИнвентарныйНомер Из УчестьИнвентарныеНомера Цикл
			ИнвентарныйНомерЧислом = ОписаниеТипаЧисла.ПривестиЗначение(ИнвентарныйНомер);
			Если ИнвентарныйНомерЧислом <> 0 Тогда
				ВсеИнвентарныеНомера.Добавить(ИнвентарныйНомерЧислом + 1);
			КонецЕсли;
		КонецЦикла;
		
		ВсеИнвентарныеНомера.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
		
		ИнвентарныйНомерЧислом = ВсеИнвентарныеНомера.Получить(0).Значение;
		
	КонецЕсли;
	
	Возврат Формат(ИнвентарныйНомерЧислом, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=;", Строка(ДлинаНомера)));
	
КонецФункции

// Генерирует новые инвентарные номера.
// 
// Параметры:
//	Количество - Число - Количество номеров.
//  УчестьИнвентарныеНомера - Массив - Учесть инвентарные номера.
//  ИсключитьДокумент - ДокументСсылка - Исключить движения документа.
// 
// Возвращаемое значение:
//	Массив из Строка - Новые инвентарные номера.
Функция НовыеИнвентарныеНомера(Количество, УчестьИнвентарныеНомера = Неопределено, ИсключитьДокумент = Неопределено) Экспорт
	
	НовыйИнвентарныйНомер = НовыйИнвентарныйНомер(УчестьИнвентарныеНомера, ИсключитьДокумент);
	
	НовыеИнвентарныеНомера = Новый Массив;
	НовыеИнвентарныеНомера.Добавить(НовыйИнвентарныйНомер);

	Если Количество > 1 Тогда
		
		ДлинаНомера = Метаданные.ОпределяемыеТипы.ИнвентарныйНомерТМЦВЭксплуатации.Тип.КвалификаторыСтроки.Длина;
		ОписаниеТипаЧисла = ОбщегоНазначения.ОписаниеТипаЧисло(ДлинаНомера, 0);
		
		ИнвентарныйНомерЧислом = ОписаниеТипаЧисла.ПривестиЗначение(НовыйИнвентарныйНомер) + 1;
		Для Индекс = 2 По Количество Цикл
			НовыеИнвентарныеНомера.Добавить(Формат(ИнвентарныйНомерЧислом, СтрШаблон("ЧЦ=%1; ЧВН=; ЧГ=;", Строка(ДлинаНомера))));
			ИнвентарныйНомерЧислом = ИнвентарныйНомерЧислом + 1;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат НовыеИнвентарныеНомера;
	
КонецФункции

// Проверяет документ передачи ТМЦ в эксплуатацию.
//
// Параметры:
//  Объект - ДокументОбъект.ВнутреннееПотреблениеТоваров - Обрабатываемый объект
//  НепроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет отключена проверка заполнения.
//  Отказ - Булево - Истина, если есть ошибки.
//
Процедура ПроверитьПередачуВЭксплуатацию(Объект, НепроверяемыеРеквизиты, Отказ) Экспорт
	
	НепроверяемыеРеквизиты.Добавить("Товары.ИнвентарныйНомер");
	НепроверяемыеРеквизиты.Добавить("Товары.ФизическоеЛицо");
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	НепроверяемыеРеквизиты.Добавить("Товары.СтатьяРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаАктивовПассивов");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации,
	|	ТаблицаДокумента.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.ОсновноеСредство КАК Справочник.ОбъектыЭксплуатации) КАК ОсновноеСредство,
	|	ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ТаблицаДокумента.Количество КАК Количество
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ДублиИнвентраныхНомеров
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаДокумента КАК ТаблицаДублей
	|		ПО ТаблицаДублей.ИнвентарныйНомер = ТаблицаДокумента.ИнвентарныйНомер
	|			И ТаблицаДублей.НомерСтроки <> ТаблицаДокумента.НомерСтроки
	|ГДЕ
	|	ТаблицаДокумента.ИнвентарныйНомер <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.НомерСтроки
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТаблицаДублей.НомерСтроки) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПроверки.НомерСтроки КАК НомерСтроки,
	|	РезультатПроверки.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	РезультатПроверки.СтатьяРасходов КАК СтатьяРасходов,
	|	РезультатПроверки.АналитикаРасходов КАК АналитикаРасходов,
	|	РезультатПроверки.ОсновноеСредство КАК ОсновноеСредство,
	|	РезультатПроверки.КатегорияЭксплуатации.Представление КАК КатегорияЭксплуатацииПредставление,
	|	РезультатПроверки.НеЗаполненИнвентарныйНомер КАК НеЗаполненИнвентарныйНомер,
	|	РезультатПроверки.НеЗаполненоФизическоеЛицо КАК НеЗаполненоФизическоеЛицо,
	|	РезультатПроверки.ОшибкаЗаполненияКоличества КАК ОшибкаЗаполненияКоличества,
	|	РезультатПроверки.ОшибкаДубль КАК ОшибкаДубль,
	|	РезультатПроверки.СтатьяНеФормированиеСтоимости КАК СтатьяНеФормированиеСтоимости,
	|	РезультатПроверки.ВыбраноНеГрупповоеОС КАК ВыбраноНеГрупповоеОС,
	|	РезультатПроверки.НеЗаполненаСтатьяРасходов КАК НеЗаполненаСтатьяРасходов,
	|	РезультатПроверки.ПроверитьАналитику КАК ПроверитьАналитику,
	|	РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС КАК НеПоддерживаетсяУчетВВидеГрупповогоОС,
	|	РезультатПроверки.НеУказанСпособПогашенияСтоимости КАК НеУказанСпособПогашенияСтоимости
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|		ТаблицаДокумента.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|		ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|		ТаблицаДокумента.ОсновноеСредство КАК ОсновноеСредство,
	|		ТаблицаДокумента.КатегорияЭксплуатации КАК КатегорияЭксплуатации,
	|	
	|		ТаблицаДокумента.ИнвентарныйНомер = """" 
	|			И ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.ИнвентарныйУчет, ЛОЖЬ) КАК НеЗаполненИнвентарныйНомер,
	|
	|		ТаблицаДокумента.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) 
	|			И ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчетПоФизЛицам, ЛОЖЬ) КАК НеЗаполненоФизическоеЛицо,
	|
	|		ТаблицаДокумента.Количество > 1 
	|			И ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.ИнвентарныйУчет, ЛОЖЬ) КАК ОшибкаЗаполненияКоличества,
	|
	|		НЕ ДублиИнвентраныхНомеров.НомерСтроки ЕСТЬ NULL КАК ОшибкаДубль,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И НЕ (ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.ТипРасходов, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.РасходыНаОбъектыЭксплуатации, ЛОЖЬ)
	|				И (ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовУпр, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					ИЛИ ЕСТЬNULL(ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовРегл, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))) КАК СтатьяНеФормированиеСтоимости,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И ТаблицаДокумента.ОсновноеСредство <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)
	|			И ЕСТЬNULL(ТаблицаДокумента.ОсновноеСредство.ТипОС, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.ТипыОС.ГрупповоеОС) КАК ВыбраноНеГрупповоеОС,
	|
	|		ТаблицаДокумента.СтатьяРасходов В (
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка),
	|				НЕОПРЕДЕЛЕНО) КАК НеЗаполненаСтатьяРасходов,
	|
	|		НЕ ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И ТаблицаДокумента.СтатьяРасходов В (&СтатьиСОбязательнымЗаполнениемАналитики) КАК ПроверитьАналитику,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И &Дата < &НачалоПримененияФСБУ5 КАК НеПоддерживаетсяУчетВВидеГрупповогоОС,
	|
	|		&Дата < &НачалоПримененияФСБУ5
	|			И ТаблицаДокумента.КатегорияЭксплуатации <> ЗНАЧЕНИЕ(Справочник.КатегорииЭксплуатации.ПустаяСсылка)
	|			И ТаблицаДокумента.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПустаяСсылка) КАК НеУказанСпособПогашенияСтоимости
	|	ИЗ
	|		ТаблицаДокумента КАК ТаблицаДокумента
	|
	|			ЛЕВОЕ СОЕДИНЕНИЕ ДублиИнвентраныхНомеров КАК ДублиИнвентраныхНомеров
	|			ПО ДублиИнвентраныхНомеров.НомерСтроки = ТаблицаДокумента.НомерСтроки
	|
	|	) КАК РезультатПроверки
	|
	|ГДЕ
	|	(РезультатПроверки.НеЗаполненИнвентарныйНомер
	|		ИЛИ РезультатПроверки.НеЗаполненоФизическоеЛицо
	|		ИЛИ РезультатПроверки.ОшибкаЗаполненияКоличества
	|		ИЛИ РезультатПроверки.ОшибкаДубль
	|		ИЛИ РезультатПроверки.СтатьяНеФормированиеСтоимости
	|		ИЛИ РезультатПроверки.ВыбраноНеГрупповоеОС
	|		ИЛИ РезультатПроверки.НеЗаполненаСтатьяРасходов
	|		ИЛИ РезультатПроверки.ПроверитьАналитику
	|		ИЛИ РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС
	|		ИЛИ РезультатПроверки.НеУказанСпособПогашенияСтоимости)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СписокСтатей = Новый Массив;
	ТаблицаДокумента = Объект.Товары.Выгрузить(, "НомерСтроки,КатегорияЭксплуатации,ФизическоеЛицо,ИнвентарныйНомер,СтатьяРасходов,АналитикаРасходов,ОсновноеСредство,Количество");
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		СтрокаТЧ.ИнвентарныйНомер = СокрЛП(СтрокаТЧ.ИнвентарныйНомер);
		Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
			СписокСтатей.Добавить(СтрокаТЧ.СтатьяРасходов);
		КонецЕсли;
	КонецЦикла;
	
	НачалоПримененияФСБУ5 = РеглУчетКлиентСервер.НачалоПримененияФСБУ5_2019();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("НачалоПримененияФСБУ5", НачалоПримененияФСБУ5);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("СтатьиСОбязательнымЗаполнениемАналитики", ПланыВидовХарактеристик.СтатьиРасходов.СтатьиСОбязательнымЗаполнениемАналитики(СписокСтатей));
	
	Результат = Запрос.Выполнить();
		
	ШаблонНеЗаполненоПоле = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Товары""';
								|en = 'Column ""%1"" in line %2 of the ""Goods"" list is not filled in'");
	
	ШаблонОшибкаЗаполненияКоличества = 
		НСтр("ru = 'По категории эксплуатации ведется инвентарный учет, количество в единицах хранения должно быть установлено равным 1 в строке %1 списка ""Товары""';
			|en = 'Inventory accounting is kept for the operation category, the quantity in stock UOM must be equal to 1 in the %1 line of the ""Goods"" list'");
			
	ШаблонОшибкаДубль = НСтр("ru = 'Инвентарный номер ""%1"" в строке %2 списка ""Товары"" повторяется в других строках документа';
							|en = 'The ""%1"" inventory number in the %2 line of the ""Goods"" list is repeated in other lines of the document'");
		
	ШаблонСтатьяНеФормированиеСтоимости = НСтр("ru = 'В строке %1 списка ""Товары"" необходимо выбрать статью, расходы по которой относятся на стоимость основного средства';
												|en = 'In the %1line of the ""Goods"" list, select an item whose expenses are allocated to the fixed asset cost'");

	ШаблонВыбраноНеГрупповоеОС = НСтр("ru = 'В строке %1 списка ""Товары"" необходимо выбрать групповое основное средство или оставить его пустым';
										|en = 'In the %1 line of the ""Goods"" list, select a group fixed asset or leave it blank'");

	ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС = НСтр("ru = 'В строке %1 списка ""Товары"" выбрана категория эксплуатации с учетом в виде группового ОС. Учет в виде группового ОС поддерживается с %2.';
														|en = 'Operation category with accounting as group fixed assets is selected in the %1 line of the ""Goods"" list. Accounting as group fixed assets is supported with %2.'");
	
	ШаблонСпособПогашенияСтоимости = НСтр("ru = 'Необходимо заполнить порядок погашения стоимости в категории эксплуатации ""%1"" в строке %2 списка ""Товары""';
											|en = 'Fill in the repayment procedure in the ""%1"" operation category in the %2 line of the ""Goods"" list'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.НеЗаполненИнвентарныйНомер Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Инвентарный номер';
																	|en = 'Inventory number'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ИнвентарныйНомер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеЗаполненоФизическоеЛицо Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Физическое лицо';
																	|en = 'Person'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ФизическоеЛицо");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ОшибкаЗаполненияКоличества Тогда
			ТекстСообщения = СтрШаблон(ШаблонОшибкаЗаполненияКоличества, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КоличествоУпаковок");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ОшибкаДубль Тогда
			ТекстСообщения = СтрШаблон(ШаблонОшибкаДубль, Выборка.ИнвентарныйНомер, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ИнвентарныйНомер");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;

		Если Выборка.СтатьяНеФормированиеСтоимости Тогда
			ТекстСообщения = СтрШаблон(ШаблонСтатьяНеФормированиеСтоимости, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ВыбраноНеГрупповоеОС
			И ЗначениеЗаполнено(Выборка.ОсновноеСредство) Тогда
			ТекстСообщения = СтрШаблон(ШаблонВыбраноНеГрупповоеОС, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "ОсновноеСредство");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеЗаполненаСтатьяРасходов Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ПроверитьАналитику
			И НЕ ЗначениеЗаполнено(Выборка.АналитикаРасходов)
			И ЗначениеЗаполнено(Выборка.СтатьяРасходов) Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "АналитикаРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеПоддерживаетсяУчетВВидеГрупповогоОС Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС, Выборка.НомерСтроки, Формат(НачалоПримененияФСБУ5, "ДЛФ=D;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КатегорияЭксплуатации");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеУказанСпособПогашенияСтоимости Тогда
			ТекстСообщения = СтрШаблон(ШаблонСпособПогашенияСтоимости, Выборка.КатегорияЭксплуатацииПредставление, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КатегорияЭксплуатации");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет заказ на передачу ТМЦ в эксплуатацию.
//
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаВнутреннееПотребление - Обрабатываемый объект
//  НепроверяемыеРеквизиты - Массив - Массив путей к реквизитам, для которых будет отключена проверка заполнения.
//  Отказ - Булево - Истина, если есть ошибки.
//
Процедура ПроверитьЗаказНаПередачуВЭксплуатацию(Объект, НепроверяемыеРеквизиты, Отказ) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	НепроверяемыеРеквизиты.Добавить("Товары.СтатьяРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаРасходов");
	НепроверяемыеРеквизиты.Добавить("Товары.АналитикаАктивовПассивов");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.СтатьяРасходов КАК ПланВидовХарактеристик.СтатьиРасходов) КАК СтатьяРасходов,
	|	ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатПроверки.НомерСтроки КАК НомерСтроки,
	|	РезультатПроверки.СтатьяРасходов КАК СтатьяРасходов,
	|	РезультатПроверки.АналитикаРасходов КАК АналитикаРасходов,
	|	РезультатПроверки.СтатьяНеФормированиеСтоимости КАК СтатьяНеФормированиеСтоимости,
	|	РезультатПроверки.НеЗаполненаСтатьяРасходов КАК НеЗаполненаСтатьяРасходов,
	|	РезультатПроверки.ПроверитьАналитику КАК ПроверитьАналитику,
	|	РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС КАК НеПоддерживаетсяУчетВВидеГрупповогоОС
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|		ТаблицаДокумента.СтатьяРасходов КАК СтатьяРасходов,
	|		ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов,
	|	
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И НЕ (ТаблицаДокумента.СтатьяРасходов.ТипРасходов = ЗНАЧЕНИЕ(Перечисление.ТипыРасходов.ФормированиеСтоимостиВНА)
	|				И ТаблицаДокумента.СтатьяРасходов.РасходыНаОбъектыЭксплуатации
	|				И (ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы)
	|					ИЛИ ТаблицаДокумента.СтатьяРасходов.ВариантРаспределенияРасходовРегл = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаВнеоборотныеАктивы))) КАК СтатьяНеФормированиеСтоимости,
	|
	|		ТаблицаДокумента.СтатьяРасходов В (
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ПустаяСсылка),
	|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПустаяСсылка),
	|				НЕОПРЕДЕЛЕНО) КАК НеЗаполненаСтатьяРасходов,
	|
	|		НЕ ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И ТаблицаДокумента.СтатьяРасходов В (&СтатьиСОбязательнымЗаполнениемАналитики) КАК ПроверитьАналитику,
	|
	|		ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|			И &Дата < &НачалоПримененияФСБУ5 КАК НеПоддерживаетсяУчетВВидеГрупповогоОС
	|	ИЗ
	|		ТаблицаДокумента КАК ТаблицаДокумента
	|
	|	) КАК РезультатПроверки
	|
	|ГДЕ
	|	(РезультатПроверки.СтатьяНеФормированиеСтоимости
	|		ИЛИ РезультатПроверки.НеЗаполненаСтатьяРасходов
	|		ИЛИ РезультатПроверки.ПроверитьАналитику
	|		ИЛИ РезультатПроверки.НеПоддерживаетсяУчетВВидеГрупповогоОС)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СписокСтатей = Новый Массив;
	ТаблицаДокумента = Объект.Товары.Выгрузить(, "НомерСтроки,КатегорияЭксплуатации,СтатьяРасходов,АналитикаРасходов,");
	Для Каждого СтрокаТЧ Из ТаблицаДокумента Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.СтатьяРасходов) Тогда
			СписокСтатей.Добавить(СтрокаТЧ.СтатьяРасходов);
		КонецЕсли;
	КонецЦикла;
	
	НачалоПримененияФСБУ5 = РеглУчетКлиентСервер.НачалоПримененияФСБУ5_2019();
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Запрос.УстановитьПараметр("НачалоПримененияФСБУ5", НачалоПримененияФСБУ5);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	Запрос.УстановитьПараметр("СтатьиСОбязательнымЗаполнениемАналитики", ПланыВидовХарактеристик.СтатьиРасходов.СтатьиСОбязательнымЗаполнениемАналитики(СписокСтатей));
	
	Результат = Запрос.Выполнить();
		
	ШаблонНеЗаполненоПоле = НСтр("ru = 'Не заполнена колонка ""%1"" в строке %2 списка ""Товары""';
								|en = 'Column ""%1"" in line %2 of the ""Goods"" list is not filled in'");
	
	ШаблонСтатьяНеФормированиеСтоимости = НСтр("ru = 'В строке %1 списка ""Товары"" необходимо выбрать статью, расходы по которой относятся на стоимость основного средства';
												|en = 'In the %1line of the ""Goods"" list, select an item whose expenses are allocated to the fixed asset cost'");

	ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС = НСтр("ru = 'В строке %1 списка ""Товары"" выбрана категория эксплуатации с учетом в виде группового ОС. Учет в виде группового ОС поддерживается с %2.';
														|en = 'Operation category with accounting as group fixed assets is selected in the %1 line of the ""Goods"" list. Accounting as group fixed assets is supported with %2.'");
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.СтатьяНеФормированиеСтоимости Тогда
			ТекстСообщения = СтрШаблон(ШаблонСтатьяНеФормированиеСтоимости, Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеЗаполненаСтатьяРасходов Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Статья расходов';
																	|en = 'Expense item'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "СтатьяРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.ПроверитьАналитику
			И НЕ ЗначениеЗаполнено(Выборка.АналитикаРасходов)
			И ЗначениеЗаполнено(Выборка.СтатьяРасходов) Тогда
			
			ТекстСообщения = СтрШаблон(ШаблонНеЗаполненоПоле, НСтр("ru = 'Аналитика расходов';
																	|en = 'Expense dimension'"), Выборка.НомерСтроки);
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "АналитикаРасходов");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
		Если Выборка.НеПоддерживаетсяУчетВВидеГрупповогоОС Тогда
			ТекстСообщения = СтрШаблон(ШаблонНеПоддерживаетсяУчетВВидеГрупповогоОС, Выборка.НомерСтроки, Формат(НачалоПримененияФСБУ5, "ДЛФ=D;"));
			Поле = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("Товары", Выборка.НомерСтроки, "КатегорияЭксплуатации");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект, Поле, "Объект", Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Вызывается перед записью заказа на передачу в эксплуатацию.
// 
// Параметры:
//  Объект - ДокументОбъект.ЗаказНаВнутреннееПотребление - Обрабатываемый объект.
//  Отказ - Булево - Истина, если есть ошибки.
Процедура ПередЗаписьюЗаказаНаПередачуВЭксплуатацию(Объект, Отказ) Экспорт
	
	Если Объект.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ПередачаВЭксплуатацию Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаДокумента.НомерСтроки КАК ЧИСЛО) КАК НомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаДокумента.КатегорияЭксплуатации КАК Справочник.КатегорииЭксплуатации) КАК КатегорияЭксплуатации,
	|	ТаблицаДокумента.АналитикаРасходов КАК АналитикаРасходов
	|ПОМЕСТИТЬ ТаблицаДокумента
	|ИЗ
	|	&ТаблицаДокумента КАК ТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ТаблицаДокумента КАК ТаблицаДокумента
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаДокумента.КатегорияЭксплуатации.УчитыватьВВидеГрупповогоОС, ЛОЖЬ)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаДокумента.АналитикаРасходов) = ТИП(Справочник.ОбъектыЭксплуатации)
	|	И ТаблицаДокумента.АналитикаРасходов <> ЗНАЧЕНИЕ(Справочник.ОбъектыЭксплуатации.ПустаяСсылка)";
	
	ТаблицаДокумента = Объект.Товары.Выгрузить(, "НомерСтроки,КатегорияЭксплуатации,АналитикаРасходов,");

	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаДокумента", ТаблицаДокумента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДанныеСтроки = Объект.Товары[Выборка.НомерСтроки - 1];
		ДанныеСтроки.АналитикаРасходов= Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// См. ПланВидовХарактеристик.СтатьиРасходов.ОбработкаПараметровВыбора
Процедура ОбработкаПараметровВыбораСтатьиРасходов(Параметры) Экспорт
	
	Если Параметры.Свойство("УчитыватьВВидеГрупповогоОС")
		И Параметры.УчитыватьВВидеГрупповогоОС Тогда
		Параметры.Отбор.Вставить("РасходыНаОбъектыЭксплуатации", Истина);
		Параметры.Отбор.Вставить("ТипРасходов", Перечисления.ТипыРасходов.ФормированиеСтоимостиВНА);
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

//++ НЕ УТ

#Область ОбработчикиЭтаповЗакрытияМесяца

#Область ПогашениеСтоимостиТМЦВЭксплуатации

// Добавляет этап в таблицу этапов закрытия месяца.
// Элементы данной таблицы являются элементами второго уровня в дереве этапов в форме закрытия месяца.
// 
// Параметры:
// 	ТаблицаЭтапов - (См. Обработки.ОперацииЗакрытияМесяца.ЗаполнитьОписаниеЭтаповЗакрытияМесяца)
// 	ТекущийРодитель - Строка - идентификатор группы.
Процедура ДобавитьЭтап_ПогашениеСтоимостиТМЦВЭксплуатации(ТаблицаЭтапов,ТекущийРодитель) Экспорт
	НоваяСтрока = ЗакрытиеМесяцаСервер.ДобавитьЭтапВТаблицу(ТаблицаЭтапов, ТекущийРодитель,
		Перечисления.ОперацииЗакрытияМесяца.ПогашениеСтоимостиТМЦВЭксплуатации,,,,
		Перечисления.ОперацииЗакрытияМесяца.ПризнаниеВНалоговомУчетеАрендныхПлатежей);
	НоваяСтрока.ТекстВыполнить = НСтр("ru = 'Погасить';
										|en = 'Pay off'");
	НоваяСтрока.ДействиеИспользование = ЗакрытиеМесяцаСервер.ОписаниеДействия_СервернаяПроцедура(
		"ТМЦВЭксплуатацииСервер.Использование_ПогашениеСтоимостиТМЦВЭксплуатации");
	НоваяСтрока.ДействиеВыполнить  = ЗакрытиеМесяцаСервер.ОписаниеДействия_ВыполнитьРасчет(
		"ТМЦВЭксплуатацииСервер.Выполнить_ПогашениеСтоимостиТМЦВЭксплуатации");
	НоваяСтрока.ДействиеПодробнее = ЗакрытиеМесяцаСервер.ОписаниеДействия_ОткрытьФорму(
		Метаданные.Документы.ПогашениеСтоимостиТМЦВЭксплуатации.Формы.ФормаСписка.ПолноеИмя());
КонецПроцедуры

// Обработчики этапа.

Процедура Использование_ПогашениеСтоимостиТМЦВЭксплуатации(ПараметрыОбработчика) Экспорт
	
	ЗакрытиеМесяцаСервер.ПроверитьИспользованиеРегламентированногоУчета(ПараметрыОбработчика);
	
	Если ЗакрытиеМесяцаСервер.РасчетЭтапаНеТребуется(ПараметрыОбработчика.ДанныеЭтапа) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗакрытиеМесяцаСервер.ПроверитьНаличиеЗаданийКЗакрытиюМесяца(ПараметрыОбработчика,Истина,, "ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации") Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеМесяцаСервер.ПроверитьНаличиеРегламентногоДокументаЭтапаЗакрытияМесяца(
		ПараметрыОбработчика,
		Метаданные.Документы.ПогашениеСтоимостиТМЦВЭксплуатации.Имя);
	
КонецПроцедуры

Процедура Выполнить_ПогашениеСтоимостиТМЦВЭксплуатации(ПараметрыОбработчика) Экспорт
	
	ПараметрыРасчета = ПараметрыОбработчика.ПараметрыРасчета;
	
	НачалоРасчета = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.НачалоРасчета(
		ПараметрыРасчета.КонецПериода,
		ПараметрыРасчета.МассивОрганизаций);
	
	ЕстьОшибки = Ложь;
	
	Пока НачалоРасчета <= ПараметрыРасчета.КонецПериода Цикл
		
		ОкончаниеПериода = КонецМесяца(НачалоРасчета);
		
		Документы.ПогашениеСтоимостиТМЦВЭксплуатации.СоздатьПакетыПогашенияСтоимостиТМЦ(
			НачалоРасчета,
			ПараметрыРасчета.МассивОрганизаций,
			ЕстьОшибки);
		
		Если ЕстьОшибки Тогда
			Прервать;
		КонецЕсли;
		
		НомерЗадания = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.УвеличитьНомерЗадания();
		
		НачатьТранзакцию();
		
		Попытка
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций);
			
			ЗаданияКРасчету = РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаданияКРасчетуЗаМесяц(
				НачалоРасчета,
				ОкончаниеПериода,
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		Если ЗаданияКРасчету.Организация.Количество() <> 0 Тогда
		
			Попытка
				
				Документы.ПогашениеСтоимостиТМЦВЭксплуатации.СоздатьДокументы(
					НачалоРасчета,
					ПараметрыРасчета.МассивОрганизаций,
					ЕстьОшибки);
					
				ЕстьОшибкиВыполненияРасчета = ЗакрытиеМесяцаСервер.ЕстьОшибкиВыполненияРасчета(
					ПараметрыОбработчика.ДанныеЭтапа.Код,
					ПараметрыРасчета.МассивОрганизаций, 
					НачалоРасчета);
													
				Если ЕстьОшибкиВыполненияРасчета Тогда
					ЕстьОшибки = Истина;
				КонецЕсли;
				
			Исключение
				
				ЕстьОшибки = Истина;
				
				ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
					ПараметрыОбработчика,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
					,
					НачалоРасчета);
			
			КонецПопытки;
			
			Если ЕстьОшибки Тогда
				Прервать;
			КонецЕсли;
		
		КонецЕсли; 
		
		НачатьТранзакцию();
		
		Попытка
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗаблокироватьРегистрЗаданий(
				НомерЗадания,
				ПараметрыРасчета.МассивОрганизаций); 
			
			РегистрыСведений.ЗаданияКПогашениюСтоимостиТМЦВЭксплуатации.ЗафиксироватьРасчет(
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета,
				ЗаданияКРасчету);
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении расчета за период %1 произошла ошибка:
					|%2';
					|en = 'An error occurred when calculating for the %1 period:
					|%2'", ОбщегоНазначения.КодОсновногоЯзыка()),
				РасчетСебестоимостиПротоколРасчета.ПредставлениеПериодаРасчета(ПараметрыРасчета.ПериодРегистрации),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗакрытиеМесяцаСервер.ЗафиксироватьНаличиеПроблемыПриВыполненииРасчета(
				ПараметрыОбработчика,
				ТекстОшибки,
				ПараметрыРасчета.МассивОрганизаций,
				НачалоРасчета);
			
		КонецПопытки;
		
		НачалоРасчета = КонецМесяца(НачалоРасчета) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

#Область Прочее

// Формирует описание запроса для выбора партии ТМЦ.
// 
// Параметры:
//  Параметры - см. ТМЦВЭксплуатацииКлиентСервер.ПараметрыПодбораТМЦВЭксплуатации.
// 
// Возвращаемое значение:
//  Структура - Описание запроса для выбора партии ТМЦ:
// 		* ТекстЗапроса - Строка - Текст запроса.
// 		* ПараметрыЗапроса - Структура - Параметры запроса.
Функция ОписаниеЗапросаДляВыбораПартииТМЦ(Параметры) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	|	ТМЦВЭксплуатации.Организация КАК Организация,
	|	ТМЦВЭксплуатации.Подразделение КАК Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура КАК Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика КАК Характеристика,
	|	ТМЦВЭксплуатации.Серия КАК Серия,
	|	ТМЦВЭксплуатации.Партия КАК Партия,
	|	ТМЦВЭксплуатации.Партия.Наименование КАК ПартияПредставление,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ИнвентарныйУчет КАК ИнвентарныйУчет,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.УчетПоФизЛицам КАК УчетПоФизЛицам,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ КАК СпособПогашенияСтоимостиБУ,
	|	ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ОбъемНаработки КАК ОбъемНаработки,
	|	ТМЦВЭксплуатации.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|
	|	СУММА(ТМЦВЭксплуатации.Количество) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТМЦВЭксплуатацииПереопределяемый.Организация КАК Организация,
	|		ТМЦВЭксплуатацииПереопределяемый.Подразделение КАК Подразделение,
	|		ТМЦВЭксплуатацииПереопределяемый.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТМЦВЭксплуатацииПереопределяемый.Номенклатура КАК Номенклатура,
	|		ТМЦВЭксплуатацииПереопределяемый.Характеристика КАК Характеристика,
	|		ТМЦВЭксплуатацииПереопределяемый.Серия КАК Серия,
	|		ТМЦВЭксплуатацииПереопределяемый.Партия КАК Партия,
	|		ТМЦВЭксплуатацииПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ТМЦВЭксплуатацииПереопределяемый.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ТМЦВЭксплуатацииПереопределяемый.КоличествоОстаток КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации.Остатки(
	|			&ОтборДата,
	|			(Организация = &ОтборОрганизация
	|					ИЛИ &ОтборОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|				И (Подразделение = &ОтборПодразделение
	|					ИЛИ &ОтборПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|				И (&ПодборПоДаннымСтроки
	|					ИЛИ ФизическоеЛицо = &ОтборФизическоеЛицо
	|					ИЛИ &ОтборФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|				И (ИнвентарныйНомер = &ИнвентарныйНомер
	|					ИЛИ НЕ &ИспользоватьОтборПоИнвентарномуНомеру)
	|
	|				И (ИнвентарныйНомер ПОДОБНО &ИнвентарныйНомерСодержит
	|					ИЛИ &ИнвентарныйНомерСодержит = """")
	|
	|				И (НЕ &ПодборПоДаннымСтроки
	|					ИЛИ Номенклатура = &ОтборНоменклатура
	|							И Характеристика = &ОтборХарактеристика
	|							И Серия = &ОтборСерия
	|							И ФизическоеЛицо = &ОтборФизическоеЛицо)) КАК ТМЦВЭксплуатацииПереопределяемый
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ТМЦВЭксплуатацииПереопределяемый.Организация КАК Организация,
	|		ТМЦВЭксплуатацииПереопределяемый.Подразделение КАК Подразделение,
	|		ТМЦВЭксплуатацииПереопределяемый.ФизическоеЛицо КАК ФизическоеЛицо,
	|		ТМЦВЭксплуатацииПереопределяемый.Номенклатура КАК Номенклатура,
	|		ТМЦВЭксплуатацииПереопределяемый.Характеристика КАК Характеристика,
	|		ТМЦВЭксплуатацииПереопределяемый.Серия КАК Серия,
	|		ТМЦВЭксплуатацииПереопределяемый.Партия КАК Партия,
	|		ТМЦВЭксплуатацииПереопределяемый.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|		ТМЦВЭксплуатацииПереопределяемый.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|		ВЫБОР
	|			КОГДА ТМЦВЭксплуатацииПереопределяемый.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ТМЦВЭксплуатацииПереопределяемый.Количество
	|			ИНАЧЕ ТМЦВЭксплуатацииПереопределяемый.Количество
	|		КОНЕЦ КАК Количество
	|	ИЗ
	|		РегистрНакопления.ТМЦВЭксплуатации КАК ТМЦВЭксплуатацииПереопределяемый
	|	ГДЕ
	|		ТМЦВЭксплуатацииПереопределяемый.Регистратор = &ТекущийРегистратор
	|
	|		И (ТМЦВЭксплуатацииПереопределяемый.Период < &ОтборДата
	|			ИЛИ &ОтборДата = ДАТАВРЕМЯ(1,1,1))
	|
	|		И (ТМЦВЭксплуатацииПереопределяемый.Организация = &ОтборОрганизация
	|				ИЛИ &ОтборОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|
	|		И (ТМЦВЭксплуатацииПереопределяемый.Подразделение = &ОтборПодразделение
	|				ИЛИ &ОтборПодразделение = ЗНАЧЕНИЕ(Справочник.СтруктураПредприятия.ПустаяСсылка))
	|
	|		И (&ПодборПоДаннымСтроки
	|				ИЛИ ТМЦВЭксплуатацииПереопределяемый.ФизическоеЛицо = &ОтборФизическоеЛицо
	|				ИЛИ &ОтборФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|
	|		И (ТМЦВЭксплуатацииПереопределяемый.ИнвентарныйНомер = &ИнвентарныйНомер
	|				ИЛИ НЕ &ИспользоватьОтборПоИнвентарномуНомеру)
	|
	|		И (ТМЦВЭксплуатацииПереопределяемый.ИнвентарныйНомер ПОДОБНО &ИнвентарныйНомерСодержит
	|				ИЛИ &ИнвентарныйНомерСодержит = """")
	|
	|		И (НЕ &ПодборПоДаннымСтроки
	|				ИЛИ ТМЦВЭксплуатацииПереопределяемый.Номенклатура = &ОтборНоменклатура
	|					И ТМЦВЭксплуатацииПереопределяемый.Характеристика = &ОтборХарактеристика
	|					И ТМЦВЭксплуатацииПереопределяемый.Серия = &ОтборСерия
	|					И ТМЦВЭксплуатацииПереопределяемый.ФизическоеЛицо = &ОтборФизическоеЛицо)
	|
	|	) КАК ТМЦВЭксплуатации
	|
	|ГДЕ
	|	(&ОтборНазначенныйРесурс = """"
	|		ИЛИ &ОтборНазначенныйРесурс = ""Выработан""
	|			И ТМЦВЭксплуатации.Партия.ДатаЗавершенияЭксплуатации < &ОтборДата
	|		ИЛИ &ОтборНазначенныйРесурс = ""НеВыработан""
	|			И ТМЦВЭксплуатации.Партия.ДатаЗавершенияЭксплуатации >= &ОтборДата)
	|
	|	И (&ОтборИнвентарныйУчет = 0
	|		ИЛИ &ОтборИнвентарныйУчет = 1
	|				И НЕ ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ИнвентарныйУчет
	|		ИЛИ &ОтборИнвентарныйУчет = 2
	|				И ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.ИнвентарныйУчет)
	|
	|	И (&СпособПогашенияСтоимостиБУ = ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияСтоимостиТМЦ.ПустаяСсылка)
	|		ИЛИ ТМЦВЭксплуатации.Партия.КатегорияЭксплуатации.СпособПогашенияСтоимостиБУ = &СпособПогашенияСтоимостиБУ)
	|
	|	И (&ДатаНачалаЭксплуатацииС = ДАТАВРЕМЯ(1,1,1)
	|		ИЛИ ТМЦВЭксплуатации.Партия.ДатаНачалаЭксплуатации >= &ДатаНачалаЭксплуатацииС)
	|
	|	И (&ДатаНачалаЭксплуатацииПо = ДАТАВРЕМЯ(1,1,1)
	|		ИЛИ ТМЦВЭксплуатации.Партия.ДатаНачалаЭксплуатации <= &ДатаНачалаЭксплуатацииПо)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТМЦВЭксплуатации.Организация,
	|	ТМЦВЭксплуатации.Подразделение,
	|	ТМЦВЭксплуатации.ФизическоеЛицо,
	|	ТМЦВЭксплуатации.Номенклатура,
	|	ТМЦВЭксплуатации.Характеристика,
	|	ТМЦВЭксплуатации.Серия,
	|	ТМЦВЭксплуатации.Партия,
	|	ТМЦВЭксплуатации.НаправлениеДеятельности,
	|	ТМЦВЭксплуатации.ИнвентарныйНомер
	|
	|ИМЕЮЩИЕ
	|	СУММА(ТМЦВЭксплуатации.Количество) > 0";
	
	Если НЕ Параметры.ДляДинамическогоСписка Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организация,
		|	Подразделение,
		|	ФизическоеЛицо,
		|	Номенклатура,
		|	Характеристика,
		|	Серия,
		|	НаправлениеДеятельности,
		|	ИнвентарныйНомер";
		
	КонецЕсли;
	
	ОтборДата = ?(
		Параметры.Дата <> Неопределено И Параметры.Дата <> '000101010000', 
		КонецДня(Параметры.Дата) + 1, 
		'000101010000');
	
	ОтборНазначенныйРесурс = ?(
		Параметры.НазначенныйРесурс <> Неопределено, 
		Параметры.НазначенныйРесурс, 
		"");
	
	ОтборОрганизация = ?(
		Параметры.Организация <> Неопределено, 
		Параметры.Организация, 
		Справочники.Организации.ПустаяСсылка());

	ОтборПодразделение = ?(
		Параметры.Подразделение <> Неопределено, 
		Параметры.Подразделение, 
		Справочники.СтруктураПредприятия.ПустаяСсылка());

	ОтборНоменклатура = ?(
		Параметры.Номенклатура <> Неопределено, 
		Параметры.Номенклатура, 
		Справочники.Номенклатура.ПустаяСсылка());

	ОтборХарактеристика = ?(
		Параметры.Характеристика <> Неопределено, 
		Параметры.Характеристика, 
		Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());

	Если Параметры.Серия <> Неопределено
		И (Параметры.СтатусУказанияСерий = Неопределено
			ИЛИ Параметры.СтатусУказанияСерий <> 0) Тогда
		ОтборСерия = Параметры.Серия;
	Иначе
		ОтборСерия = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;

	ОтборФизическоеЛицо = ?(
		Параметры.ФизическоеЛицо <> Неопределено, 
		Параметры.ФизическоеЛицо, 
		Справочники.ФизическиеЛица.ПустаяСсылка());
	
	ОтборСпособПогашенияСтоимостиБУ = ?(
		Параметры.СпособПогашенияСтоимостиБУ <> Неопределено, 
		Параметры.СпособПогашенияСтоимостиБУ, 
		Перечисления.СпособыПогашенияСтоимостиТМЦ.ПустаяСсылка());
	
	ТекущийРегистратор = Параметры.ТекущийРегистратор;
		
	ИнвентарныйНомер = ?(
		Параметры.ИнвентарныйНомер <> Неопределено, 
		Параметры.ИнвентарныйНомер, 
		"");
		
	ИспользоватьОтборПоИнвентарномуНомеру = ЗначениеЗаполнено(Параметры.ИнвентарныйНомер);
	
	ИнвентарныйНомерСодержит = ?(
		Параметры.ИнвентарныйНомерСодержит <> Неопределено, 
		"%" + Параметры.ИнвентарныйНомерСодержит + "%", 
		"");
		
	ОтборИнвентарныйУчет = ?(
		ТипЗнч(Параметры.ИнвентарныйУчет) = Тип("Булево"),
		?(Параметры.ИнвентарныйУчет, 2, 0),
		Параметры.ИнвентарныйУчет);
		
	ПодборПоДаннымСтроки = 
		Параметры.Номенклатура <> Неопределено
		ИЛИ Параметры.Характеристика <> Неопределено
		ИЛИ Параметры.Серия <> Неопределено;
	
	Если Параметры.ВыбратьПервые > 0 Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 10", "ПЕРВЫЕ" + " " + Формат(Параметры.ВыбратьПервые, "ЧГ=0;"));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 10", "");
	КонецЕсли;
	
	Если Параметры.ДляДинамическогоСписка Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", "ВЫБРАТЬ");
	КонецЕсли;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("ОтборДата", ОтборДата);
	ПараметрыЗапроса.Вставить("ОтборНазначенныйРесурс", ОтборНазначенныйРесурс);
	ПараметрыЗапроса.Вставить("ОтборОрганизация", ОтборОрганизация);
	ПараметрыЗапроса.Вставить("ОтборПодразделение", ОтборПодразделение);
	ПараметрыЗапроса.Вставить("ОтборНоменклатура", ОтборНоменклатура);
	ПараметрыЗапроса.Вставить("ОтборХарактеристика", ОтборХарактеристика);
	ПараметрыЗапроса.Вставить("ОтборСерия", ОтборСерия);
	ПараметрыЗапроса.Вставить("ОтборФизическоеЛицо", ОтборФизическоеЛицо);
	ПараметрыЗапроса.Вставить("СпособПогашенияСтоимостиБУ", ОтборСпособПогашенияСтоимостиБУ);
	ПараметрыЗапроса.Вставить("ПодборПоДаннымСтроки", ПодборПоДаннымСтроки);
	ПараметрыЗапроса.Вставить("ТекущийРегистратор", ТекущийРегистратор);
	ПараметрыЗапроса.Вставить("ИнвентарныйНомер", ИнвентарныйНомер);
	ПараметрыЗапроса.Вставить("ИспользоватьОтборПоИнвентарномуНомеру", ИспользоватьОтборПоИнвентарномуНомеру);
	ПараметрыЗапроса.Вставить("ИнвентарныйНомерСодержит", ИнвентарныйНомерСодержит);
	ПараметрыЗапроса.Вставить("ОтборИнвентарныйУчет", ОтборИнвентарныйУчет);
	ПараметрыЗапроса.Вставить("ДатаНачалаЭксплуатацииС", Параметры.ДатаНачалаЭксплуатацииС);
	ПараметрыЗапроса.Вставить("ДатаНачалаЭксплуатацииПо",Параметры.ДатаНачалаЭксплуатацииПо);
	
	ОписаниеЗапросаДляВыбора = Новый Структура("ТекстЗапроса,ПараметрыЗапроса", ТекстЗапроса, ПараметрыЗапроса);
	
	Возврат ОписаниеЗапросаДляВыбора;
	
КонецФункции

#КонецОбласти

//-- НЕ УТ

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ТМЦВЭксплуатацииСервер.ИспользоватьТМЦВЭксплуатации_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.1.20";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4ef67970-2b74-4971-b50a-e3eaa3e9c099");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ТМЦВЭксплуатацииСервер.ИспользоватьТМЦВЭксплуатации_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "";
	Обработчик.Комментарий = НСтр("ru = 'Устанавливает константу ""Использовать ТМЦ в эксплуатации""';
									|en = 'Sets up the constant ""Use supplies in operation""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

#Область УстановкаКонстанты_ИспользоватьТМЦВЭксплуатации

Процедура ИспользоватьТМЦВЭксплуатации_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьТМЦВЭксплуатации_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Если НЕ Константы.ИспользоватьТМЦВЭксплуатации.Получить() Тогда
		МенеджерЗначения = Константы.ИспользоватьТМЦВЭксплуатации.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти
