
#Область СлужебныеПроцедурыИФункции

// Проверяет имя реквизита, если имя некорректно, то возвращает
// описание причины и новое подходящее имя.
//
// Параметры:
//	ИмяДляПроверки - Строка - имя реквизита для проверки.
//	Префикс - Строка - технический префикс реквизита. Используется
//		для генерации нового имени, если текущее с ошибкой.
//	СтопЛист - Массив(Строка) | Неопределено - массив строк, которые
//		запрещены к использованию в качестве имени аналитики.
//
// Возвращает:
//	Структура:
//		Успех - Булево - Истина, если имя корректно.
//		Имя - Строка - если имя некорректно, то содержит
//			имя предложенное системой, для постановки.
//		ТекстОшибки - Строка - описание, почему имя некорректно,
//			в случае если Успех == Ложь.
//
Функция ПроверитьИмяРеквизита(Знач ИмяДляПроверки, Префикс, СтопЛист=Неопределено) Экспорт
	Результат = Новый Структура("Успех, Имя, ТекстОшибки", Ложь, "", "");
	
	Если СтопЛист = Неопределено Тогда
		мИмен = Новый Массив;
	Иначе
		мИмен = СтопЛист;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ИмяДляПроверки) Тогда
		НовоеИмя = ОбщегоНазначенияКлиентСерверУХ.ВернутьАлфавитноЦифровоеПредставление(
					ИмяДляПроверки);
		Если ИмяДляПроверки = НовоеИмя Тогда
			Результат.Успех = Истина;
		Иначе
			Результат.ТекстОшибки = 
				НСтр("ru = 'Имя содержит недопустимые символы. Они удалены.'");
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(НовоеИмя) Тогда
			Если мИмен.Найти(НовоеИмя) = Неопределено Тогда
				Результат.Имя = НовоеИмя;
				Возврат Результат;
				
			Иначе
				Результат.Успех = Ложь;
				Результат.ТекстОшибки = Результат.ТекстОшибки +
					?(ПустаяСтрока(Результат.ТекстОшибки), "", Символы.ПС) +
					НСтр("ru = 'Полученное имя уже используется. '");
			КонецЕсли;
		Иначе
			Результат.ТекстОшибки = Результат.ТекстОшибки +
					?(ПустаяСтрока(Результат.ТекстОшибки), "", Символы.ПС) +
					НСтр("ru = 'Получено пустое имя. '");
		КонецЕсли;
			
		ИмяДляПроверки = "";
	Иначе
		Результат.ТекстОшибки =	НСтр("ru = 'Имя не заполнено. '");
	КонецЕсли;
	
	Результат.Имя = СгенерироватьНовоеИмяРеквизита(мИмен, Префикс);
	Результат.ТекстОшибки = Результат.ТекстОшибки +
		НСтр("ru = ' Сгенерировано стандартное имя.'");
	
	Возврат Результат;
КонецФункции

// Получить новое стандартное имя реквизита в формате Префикс[Номер].
// Так, что это имя отсутствует в массиве мИмен.
//
// Параметры:
//  мИмен - Массив(Строка) - уже используемые имена реквизитов.
//  Префикс - Строка - префикс. Используется,
//		если нужно сгенерировать техническое имя реквизита.
// 
// Возвращаемое значение:
//	Строка - новое имя реквизита.
//
Функция СгенерироватьНовоеИмяРеквизита(мИмен, Префикс) Экспорт
	Возврат Префикс + (МаксимальныйНомерПослеПрефикса(
						мИмен, Префикс) + 1);
КонецФункции

// В переданном массиве строк ищет строки вида
// ПрефиксИмени[Номер]. Возвращает максимальный номер.
//
// Параметры:
//	мИмен - Массив(Строка) - массив строк для поиска.
//	ПрефиксИмени - Строка - префикс перед номером.
//
// Возвращает:
//	Число - максимальный номер, встреченный после префикса.
//
Функция МаксимальныйНомерПослеПрефикса(мИмен, ПрефиксИмени) Экспорт
	МаксНомер = 0;
	ПозицияПоискаНомера = СтрДлина(ПрефиксИмени) + 1;
	Для Каждого Имя Из мИмен Цикл
		Если СтрНачинаетсяС(Имя, ПрефиксИмени) Тогда
			Попытка
				Номер = Число(Сред(Имя, ПозицияПоискаНомера));
			Исключение
				Номер = 0;
			КонецПопытки;
			Если МаксНомер < Номер Тогда
				МаксНомер = Номер;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат МаксНомер;
КонецФункции

// Возвращает массив из ДанныеФормыКоллекция.
//
// Параметры:
//  КоллекцияФормы - ДанныеФормыКоллекция - таблица из которой нужно
//		выгрузить колонку с данными.
//  ИмяСвойства - Строка - имя колонки для выгрузки.
//  ИсключитьСтроку - ДанныеФормыЭлементКоллекции  - строка, которую
//		не нужно включать в выгрузку.
// 
// Возвращаемое значение:
//   Массив - значения из указанной колонки.
//
Функция ВыгрузитьКолонкуКоллекцииФормыВМассив(КоллекцияФормы,
					ИмяСвойства, ИсключитьСтроку=Неопределено) Экспорт
	Результат = Новый Массив;
	Для Каждого Строка Из КоллекцияФормы Цикл
		Если ИсключитьСтроку <> Неопределено И
				Строка = ИсключитьСтроку Тогда
			Продолжить;
		КонецЕсли;
		
		Значение = Строка[ИмяСвойства];
		Если ЗначениеЗаполнено(Значение) Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

#КонецОбласти