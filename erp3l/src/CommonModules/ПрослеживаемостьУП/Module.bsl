
#Область ПрограммныйИнтерфейс

//++ НЕ УТ

// Метод возвращает ссылку на элемент справочника КодыОперацийПрослеживаемости по коду
// 
// Параметры:
//  КодОперации - Строка - Код операции
// 
// Возвращаемое значение:
//  СправочникСсылка.КодыОперацийПрослеживаемости - Операция прослеживаемости
//
Функция ОперацияПрослеживаемости(КодОперации = "") Экспорт
	
	КОП = Справочники.КодыОперацийПрослеживаемости;
	
	Если КодОперации = "01" Тогда
		Операция = КОП.ПередачаВПроизводство;
	ИначеЕсли КодОперации = "02" Тогда
		Операция = КОП.ЗахоронениеОбезвреживаниеУтилизацияТовара;
	ИначеЕсли КодОперации = "03" Тогда
		Операция = КОП.УничтожениеУтратаВследствиеДействияНепреодолимойСилы;
	ИначеЕсли КодОперации = "04" Тогда
		Операция = КОП.РеализацияРозничная;
	ИначеЕсли КодОперации = "05" Тогда
		Операция = КОП.ВывозТовараЗаПределыРФ;
	ИначеЕсли КодОперации = "06" Тогда
		Операция = КОП.БезвозмезднаяПередачаТовараФизическимЛицам;
	ИначеЕсли КодОперации = "07" Тогда
		Операция = КОП.КонфискацияГосударством;
	ИначеЕсли КодОперации = "08" Тогда
		Операция = КОП.РеализацияТовараДипломатическимИКонсульскимУчрежденям;
	ИначеЕсли КодОперации = "09" Тогда
		Операция = КОП.НедостачаВыявленнаяВХодеИнвентаризации;
	ИначеЕсли КодОперации = "10" Тогда
		Операция = КОП.ВозвратРанееУтраченногоТовара;
	ИначеЕсли КодОперации = "11" Тогда
		Операция = КОП.ВозвратОтРозничногоПокупателя;
	ИначеЕсли КодОперации = "12" Тогда
		Операция = КОП.ВозвратИзПроизводства;
	ИначеЕсли КодОперации = "13" Тогда
		Операция = КОП.ПередачаНеСвязаннаяСРеализацией;
	ИначеЕсли КодОперации = "14" Тогда
		Операция = КОП.ПолучениеНеСвязанноеСРеализацией;
	ИначеЕсли КодОперации = "15" Тогда
		Операция = КОП.Реализация;
	ИначеЕсли КодОперации = "16" Тогда
		Операция = КОП.БезвозмезднаяПередача;
	ИначеЕсли КодОперации = "17" Тогда
		Операция = КОП.Приобретение;
	ИначеЕсли КодОперации = "18" Тогда
		Операция = КОП.БезвозмездноеПолучение;
	ИначеЕсли КодОперации = "19" Тогда
		Операция = КОП.УКДНаУменьшениеВыданный;
	ИначеЕсли КодОперации = "20" Тогда
		Операция = КОП.УКДНаУвеличениеВыданный;
	ИначеЕсли КодОперации = "21" Тогда
		Операция = КОП.УКДНаУменьшениеПолученный;
	ИначеЕсли КодОперации = "22" Тогда
		Операция = КОП.УКДНаУвеличениеПолученный;
	ИначеЕсли КодОперации = "23" Тогда
		Операция = КОП.РеализацияТовараКомитента;
	ИначеЕсли КодОперации = "24" Тогда
		Операция = КОП.ПередачаСведенийОРеализацииКомитенту;
	ИначеЕсли КодОперации = "25" Тогда
		Операция = КОП.ПолучениеКомитентомСведенийОРеализацииТовараКомиссионером;
	ИначеЕсли КодОперации = "26" Тогда
		Операция = КОП.ПриобретениеТовараДляКомитента;
	ИначеЕсли КодОперации = "27" Тогда
		Операция = КОП.ПередачаСведенийОЗакупкеКомитенту;
	ИначеЕсли КодОперации = "28" Тогда
		Операция = КОП.ПолучениеКомитентомСведенийОПриобретенииТовараКомиссионером;
	ИначеЕсли КодОперации = "29" Тогда
		Операция = КОП.СоставлениеКомиссионеромКорректировкиНаУменьшение;
	ИначеЕсли КодОперации = "30" Тогда
		Операция = КОП.ПередачаКомиссионеромКомитентуСведенийОВозвратеТовара;
	ИначеЕсли КодОперации = "31" Тогда
		Операция = КОП.ПолучениеКомитентомСведенийОВозвратеТовараКомиссионеру;
	ИначеЕсли КодОперации = "32" Тогда
		Операция = КОП.ПолучениеКомитентомКорректировкиНаУменьшение;
	ИначеЕсли КодОперации = "33" Тогда
		Операция = КОП.ОтражениеКомиссионеромПоЗакупкеВозвратаКомитентомТоваров;
	ИначеЕсли КодОперации = "34" Тогда
		Операция = КОП.ПолучениеКомиссионеромКорректировкиВСторонуУменьшения;
	ИначеЕсли КодОперации = "35" Тогда
		Операция = КОП.ОтражениеКомитентомВозвратаТовараПриобретенногоКомиссионером;
	ИначеЕсли КодОперации = "36" Тогда
		Операция = КОП.ПередачаСведенийОРозничнойРеализацииКомитенту;
	ИначеЕсли КодОперации = "37" Тогда
		Операция = КОП.ПолучениеКомитентомСведенийОРозничнойРеализацииТовараКомиссионером;
	ИначеЕсли КодОперации = "38" Тогда
		Операция = КОП.ПередачаКомиссионеромКомитентуСведенийОРозничномВозвратеТовара;
	ИначеЕсли КодОперации = "39" Тогда
		Операция = КОП.ПолучениеКомитентомСведенийОРозничномВозвратеТовараКомиссионеру;
	Иначе
		Операция = КОП.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Операция;
	
КонецФункции

// Метод подписки на событие, отслеживающий изменение регистров товары организаций и товары переданных на комиссию.
// 
// Параметры:
//  Источник - РегистрНакопленияНаборЗаписей.ТоварыОрганизаций, РегистрНакопленияНаборЗаписей.ТоварыПереданныеНаКомиссию - набор записей регистра накоплений
//  Отказ - Булево - Отказ
//  Замещение - Булево - Замещение
//
Процедура ОтразитьОперацииСПрослеживаемымиТоварами(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Регистратор = Источник.Отбор.Регистратор.Значение;
	Если Не ДокументТребуетсяОтразитьВЖурнале(Регистратор.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоПроведениеДокумента =
		Источник.ДополнительныеСвойства.Свойство("СвойстваДокумента")
		И Источник.ДополнительныеСвойства.СвойстваДокумента.Свойство("РежимЗаписи")
		И Источник.ДополнительныеСвойства.СвойстваДокумента.РежимЗаписи = РежимЗаписиДокумента.Проведение;
	ЭтоОтменаРучногоРедактирования =
		Источник.ДополнительныеСвойства.Свойство("ОтменаРучногоРедактирования")
			И Источник.ДополнительныеСвойства.ОтменаРучногоРедактирования;
	
	Если ЭтоПроведениеДокумента ИЛИ ЭтоОтменаРучногоРедактирования Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистратор", Регистратор);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Операции.Период КАК Период,
		|	Операции.Организация КАК Организация,
		|	Операции.ТипЗапасов КАК ТипЗапасов,
		|	Операции.КодОперации КАК КодОперации,
		|	Операции.Контрагент КАК Контрагент,
		|	Операции.ТипДокументаВПрослеживаемости КАК ТипДокументаВПрослеживаемости,
		|	Операции.ОтражениеВОтчетности КАК ОтражениеВОтчетности
		|ИЗ
		|	РегистрСведений.ОперацииСПрослеживаемымиТоварами КАК Операции
		|ГДЕ
		|	Операции.Регистратор = &Регистратор
		|	И Операции.РучноеРедактирование";
		
		Блокировка = Новый БлокировкаДанных;

		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ОперацииСПрослеживаемымиТоварами.НаборЗаписей");
		ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		Блокировка.Заблокировать();
		
		ТаблицаОпераций = Запрос.Выполнить().Выгрузить();
		Если ЭтоОтменаРучногоРедактирования Тогда
			ТаблицаОпераций.Очистить();
		ИначеЕсли ЗначениеЗаполнено(ТаблицаОпераций) Тогда
			// Если таблица операций не пустая, значит есть ручные корректировки
			// в этом случае операцию отражать не нужно
			Возврат;
		КонецЕсли;
		
		ОперацииПрослеживаемости = ОперацииПрослеживаемости(Регистратор, Источник.Выгрузить());
		Для Каждого СвойстваОперации Из ОперацииПрослеживаемости Цикл
			
			НоваяОперация = ТаблицаОпераций.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяОперация, СвойстваОперации, "Организация, ТипЗапасов, Контрагент");
			
			НоваяОперация.КодОперации = КодПрослеживаемойОперации(СвойстваОперации);
			НоваяОперация.ОтражениеВОтчетности = ОтчетПрослеживаемойОперации(СвойстваОперации);
			НоваяОперация.ТипДокументаВПрослеживаемости = ТипДокументаПрослеживаемойОперации(СвойстваОперации);
			
		КонецЦикла;
		
		ТаблицаОпераций.Свернуть(
			"Период, Организация, ТипЗапасов, Контрагент,
			|КодОперации, ТипДокументаВПрослеживаемости, ОтражениеВОтчетности");
		ТаблицаОпераций.ЗаполнитьЗначения(Регистратор.Дата, "Период");
		
	Иначе
		
		ТаблицаОпераций = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ОперацииСПрослеживаемымиТоварами.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	НаборЗаписей.Загрузить(ТаблицаОпераций);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Выполняет отмену ручных корректировок в регистре операций с прослеживаемыми товарами.
// 
// Параметры:
//  СписокДокументов - Массив - Список документов
//
Процедура ОтменитьРучныеКорректировкиОпераций(СписокДокументов) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Регистраторы", СписокДокументов);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операции.Регистратор КАК Документ,
		|	""ТоварыОрганизаций"" КАК ИмяРегистра
		|ИЗ
		|	РегистрСведений.ОперацииСПрослеживаемымиТоварами КАК Операции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
		|		ПО Операции.Регистратор = ТоварыОрганизаций.Регистратор
		|ГДЕ
		|	Операции.Регистратор В (&Регистраторы)
		|	И Операции.РучноеРедактирование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Операции.Регистратор КАК Документ,
		|	""ТоварыПереданныеНаКомиссию"" КАК ИмяРегистра
		|ИЗ
		|	РегистрСведений.ОперацииСПрослеживаемымиТоварами КАК Операции
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыПереданныеНаКомиссию КАК ТоварыПереданныеНаКомиссию
		|		ПО Операции.Регистратор = ТоварыПереданныеНаКомиссию.Регистратор
		|ГДЕ
		|	Операции.Регистратор В (&Регистраторы)
		|	И Операции.РучноеРедактирование";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			НаборЗаписей = РегистрыНакопления[Выборка.ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Документ);
			НаборЗаписей.Прочитать();
			
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменаРучногоРедактирования", Истина);
			
			ОтразитьОперацииСПрослеживаемымиТоварами(НаборЗаписей, Ложь, Истина);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет подготовку и заполнение данных для регламентированного отчета.
// 
// Параметры:
//  ПараметрыОтчета - Структура - Параметры отчета
//  Контейнер - Структура - Контейнер
//
Процедура ЗаполнитьОтчетОбОперациях(ПараметрыОтчета, Контейнер) Экспорт
	
	Если ПараметрыОтчета.Свойство("ДатаНачалаРасширенногоПериодаОтчета") Тогда
		НачалоПериодаОтчета = ПараметрыОтчета.ДатаНачалаРасширенногоПериодаОтчета;
	Иначе
		НачалоПериодаОтчета = ПараметрыОтчета.мДатаНачалаПериодаОтчета;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Организация", Новый ФиксированныйМассив(БухгалтерскийУчетПереопределяемый.ВсяОрганизация(ПараметрыОтчета.Организация)));
	Запрос.УстановитьПараметр("НачалоПериода", НачалоКвартала(НачалоПериодаОтчета));
	Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ПараметрыОтчета.мДатаКонцаПериодаОтчета));
	Запрос.УстановитьПараметр("ДатаПодписи", КонецДня(Макс(ПараметрыОтчета.ДатаПодписи, ПараметрыОтчета.мДатаКонцаПериодаОтчета)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Операции.Период КАК ДатаОперации,
	|	Операции.Организация КАК Организация,
	|	Операции.Регистратор КАК ДокументОперации,
	|	Операции.ТипЗапасов КАК ТипЗапасов,
	|	Операции.КодОперации КАК КодОперации,
	|	Операции.Контрагент КАК Контрагент,
	|	Операции.ТипДокументаВПрослеживаемости КАК ТипДокумента,
	|	ТоварыОрганизаций.Номенклатура.КодТНВЭД КАК КодТНВЭД,
	|	ТоварыОрганизаций.НомерГТД КАК РНПТ,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(ТоварыОрганизаций.КоличествоПоРНПТ) КАК Количество
	|ПОМЕСТИТЬ ВТ_ПрослеживаемыеОперации
	|ИЗ
	|	РегистрСведений.ОперацииСПрослеживаемымиТоварами КАК Операции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ТоварыОрганизаций КАК ТоварыОрганизаций
	|		ПО Операции.Регистратор = ТоварыОрганизаций.Регистратор
	|			И Операции.Организация = ТоварыОрганизаций.Организация
	|			И Операции.ТипЗапасов = ТоварыОрганизаций.ВидЗапасов.ТипЗапасов
	|			И (ТоварыОрганизаций.НомерГТД.РНПТ)
	|ГДЕ
	|	Операции.ОтражениеВОтчетности = ЗНАЧЕНИЕ(Перечисление.ПорядокОтраженияВОтчетностиПоПрослеживаемости.ОтчетОбОперациях)
	|	И Операции.Период >= &НачалоПериода
	|	И Операции.Период <= &КонецПериода
	|	И Операции.Организация В(&Организация)
	|	И Операции.Активность
	|	И ТоварыОрганизаций.Активность
	|	И НЕ ТоварыОрганизаций.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.Период,
	|	Операции.Организация,
	|	Операции.Регистратор,
	|	Операции.ТипЗапасов,
	|	Операции.КодОперации,
	|	Операции.Контрагент,
	|	Операции.ТипДокументаВПрослеживаемости,
	|	ТоварыОрганизаций.Номенклатура.КодТНВЭД,
	|	ТоварыОрганизаций.НомерГТД,
	|	ТоварыОрганизаций.АналитикаУчетаНоменклатуры,
	|	ТоварыОрганизаций.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СебестоимостьТоваров.Регистратор КАК Регистратор,
	|	СебестоимостьТоваров.Организация КАК Организация,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(СебестоимостьТоваров.СтоимостьРегл - СебестоимостьТоваров.НДСРегл) КАК СтоимостьРегл
	|ПОМЕСТИТЬ ВТ_СебестоимостьТоваров
	|ИЗ
	|	РегистрНакопления.СебестоимостьТоваров КАК СебестоимостьТоваров
	|ГДЕ
	|	СебестоимостьТоваров.Активность
	|	И (СебестоимостьТоваров.Регистратор, СебестоимостьТоваров.Организация, СебестоимостьТоваров.АналитикаУчетаНоменклатуры, СебестоимостьТоваров.ВидЗапасов) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПрослеживаемыеОперации.ДокументОперации,
	|				ВТ_ПрослеживаемыеОперации.Организация,
	|				ВТ_ПрослеживаемыеОперации.АналитикаУчетаНоменклатуры,
	|				ВТ_ПрослеживаемыеОперации.ВидЗапасов
	|			ИЗ
	|				ВТ_ПрослеживаемыеОперации)
	|	И НЕ СебестоимостьТоваров.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПередачаВПроизводство)
	|
	|СГРУППИРОВАТЬ ПО
	|	СебестоимостьТоваров.Регистратор,
	|	СебестоимостьТоваров.Организация,
	|	СебестоимостьТоваров.АналитикаУчетаНоменклатуры,
	|	СебестоимостьТоваров.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыручкаИСебестоимостьПродаж.Регистратор КАК Регистратор,
	|	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры КАК АналитикаУчетаНоменклатуры,
	|	ВыручкаИСебестоимостьПродаж.ВидЗапасов КАК ВидЗапасов,
	|	СУММА(ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл) КАК СуммаВыручкиРегл
	|ПОМЕСТИТЬ ВТ_ВыручкаИСебестоимостьПродаж
	|ИЗ
	|	РегистрНакопления.ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|ГДЕ
	|	ВыручкаИСебестоимостьПродаж.Активность
	|	И (ВыручкаИСебестоимостьПродаж.Регистратор, ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры, ВыручкаИСебестоимостьПродаж.ВидЗапасов) В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ВТ_ПрослеживаемыеОперации.ДокументОперации,
	|				ВТ_ПрослеживаемыеОперации.АналитикаУчетаНоменклатуры,
	|				ВТ_ПрослеживаемыеОперации.ВидЗапасов
	|			ИЗ
	|				ВТ_ПрослеживаемыеОперации)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыручкаИСебестоимостьПродаж.Регистратор,
	|	ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры,
	|	ВыручкаИСебестоимостьПродаж.ВидЗапасов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПрослеживаемыеОперации.ДокументОперации КАК ДокументОперации,
	|	ПрослеживаемыеОперации.ТипЗапасов КАК ТипЗапасов,
	|	ПрослеживаемыеОперации.КодОперации КАК КодОперации,
	|	ПрослеживаемыеОперации.ДатаОперации КАК ДатаОперации,
	|	ВЫБОР ПрослеживаемыеОперации.ТипДокумента
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.СчетФактура)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.КорректировочныйСчетФактура)
	|			ТОГДА 2
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.УПД)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.УКД)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК КодТипаДокумента,
	|	ДанныеПервичныхДокументов.Номер КАК НомерДокумента,
	|	ДанныеПервичныхДокументов.Дата КАК ДатаДокумента,
	|	ПрослеживаемыеОперации.Контрагент КАК Контрагент,
	|	ПрослеживаемыеОперации.Контрагент.ИНН КАК ИНН,
	|	ПрослеживаемыеОперации.Контрагент.КПП КАК КПП,
	|	ПрослеживаемыеОперации.Контрагент.НаименованиеПолное КАК НаименованиеКонтрагента,
	|	ПрослеживаемыеОперации.РНПТ КАК РНПТ,
	|	ПрослеживаемыеОперации.КодТНВЭД.ЕдиницаИзмерения.Код КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА ПрослеживаемыеОперации.Количество >= 0
	|				ТОГДА ПрослеживаемыеОперации.Количество
	|			ИНАЧЕ -ПрослеживаемыеОперации.Количество
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл, ЕСТЬNULL(СебестоимостьТоваров.СтоимостьРегл, 0)) >= 0
	|				ТОГДА ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл, ЕСТЬNULL(СебестоимостьТоваров.СтоимостьРегл, 0))
	|			ИНАЧЕ -ЕСТЬNULL(ВыручкаИСебестоимостьПродаж.СуммаВыручкиРегл, ЕСТЬNULL(СебестоимостьТоваров.СтоимостьРегл, 0))
	|		КОНЕЦ) КАК СуммаБезНДС
	|ИЗ
	|	ВТ_ПрослеживаемыеОперации КАК ПрослеживаемыеОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СебестоимостьТоваров КАК СебестоимостьТоваров
	|		ПО ПрослеживаемыеОперации.ДокументОперации = СебестоимостьТоваров.Регистратор
	|			И ПрослеживаемыеОперации.Организация = СебестоимостьТоваров.Организация
	|			И ПрослеживаемыеОперации.АналитикаУчетаНоменклатуры = СебестоимостьТоваров.АналитикаУчетаНоменклатуры
	|			И ПрослеживаемыеОперации.ВидЗапасов = СебестоимостьТоваров.ВидЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыручкаИСебестоимостьПродаж КАК ВыручкаИСебестоимостьПродаж
	|		ПО ПрослеживаемыеОперации.ДокументОперации = ВыручкаИСебестоимостьПродаж.Регистратор
	|			И ПрослеживаемыеОперации.АналитикаУчетаНоменклатуры = ВыручкаИСебестоимостьПродаж.АналитикаУчетаНоменклатуры
	|			И ПрослеживаемыеОперации.ВидЗапасов = ВыручкаИСебестоимостьПродаж.ВидЗапасов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ПрослеживаемыеОперации.Организация = ДанныеПервичныхДокументов.Организация
	|			И ПрослеживаемыеОперации.ДокументОперации = ДанныеПервичныхДокументов.Документ
	|
	|СГРУППИРОВАТЬ ПО
	|	ПрослеживаемыеОперации.ДокументОперации,
	|	ПрослеживаемыеОперации.ТипЗапасов,
	|	ПрослеживаемыеОперации.КодОперации,
	|	ПрослеживаемыеОперации.ДатаОперации,
	|	ВЫБОР ПрослеживаемыеОперации.ТипДокумента
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.СчетФактура)
	|			ТОГДА 1
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.КорректировочныйСчетФактура)
	|			ТОГДА 2
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.УПД)
	|			ТОГДА 3
	|		КОГДА ЗНАЧЕНИЕ(Справочник.ТипыДокументов.УКД)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ,
	|	ДанныеПервичныхДокументов.Номер,
	|	ДанныеПервичныхДокументов.Дата,
	|	ПрослеживаемыеОперации.Контрагент,
	|	ПрослеживаемыеОперации.Контрагент.ИНН,
	|	ПрослеживаемыеОперации.Контрагент.КПП,
	|	ПрослеживаемыеОперации.Контрагент.НаименованиеПолное,
	|	ПрослеживаемыеОперации.РНПТ,
	|	ПрослеживаемыеОперации.КодТНВЭД.ЕдиницаИзмерения.Код
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрослеживаемыеОперации.ДокументОперации,
	|	ПрослеживаемыеОперации.ТипЗапасов";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Реестр = Контейнер.Реестр;
		Реестр.Строки.Очистить();
		НоваяСтраница = Реестр.Строки.Добавить();
		
		НоваяСтраница.Данные = Новый Структура("СтоимостьИтого", 0);
		НоваяСтраница.ДанныеМногострочныхЧастей = Новый Структура("П10000", ДеревоЗначенийОтчетОбОперациях());
		Сч = 1;
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ДокументОперации") Цикл
			Пока Выборка.СледующийПоЗначениюПоля("ТипЗапасов") Цикл
				
				Если Сч > ПараметрыОтчета.МаксКолСтрокНаСтранице Тогда
					
					НоваяСтраница = Реестр.Строки.Добавить();
					НоваяСтраница.Данные = Новый Структура("СтоимостьИтого", 0);
					НоваяСтраница.ДанныеМногострочныхЧастей = Новый Структура("П10000", ДеревоЗначенийОтчетОбОперациях());
					
					Сч = 1;
					
				КонецЕсли;
				
				НоваяСтрокаОперации = НоваяСтраница.ДанныеМногострочныхЧастей.П10000.Строки.Добавить();
				СтруктураДанныхОперации = Новый Структура;
				СтруктураДанныхОперации.Вставить("П1000001", 0);
				СтруктураДанныхОперации.Вставить("П1000002", Выборка.ДатаОперации);
				СтруктураДанныхОперации.Вставить("П1000003", Выборка.КодОперации);
				СтруктураДанныхОперации.Вставить("П1000004", Выборка.КодТипаДокумента);
				СтруктураДанныхОперации.Вставить("П1000005", Выборка.НомерДокумента);
				СтруктураДанныхОперации.Вставить("П1000006", Выборка.ДатаДокумента);
				СтруктураДанныхОперации.Вставить("П1000007", Выборка.НаименованиеКонтрагента);
				СтруктураДанныхОперации.Вставить("П1000008", Выборка.ИНН);
				СтруктураДанныхОперации.Вставить("П1000009", Выборка.КПП);
				
				НоваяСтрокаОперации.Данные = СтруктураДанныхОперации;
				НоваяСтрокаОперации.ДанныеМногострочныхЧастей = Новый Структура("П11000", ДеревоЗначенийОтчетОбОперациях());
				
				Пока Выборка.СледующийПоЗначениюПоля("РНПТ") Цикл
					НовыйРНПТ = НоваяСтрокаОперации.ДанныеМногострочныхЧастей.П11000.Строки.Добавить();
					
					НовыйРНПТ.Данные = Новый Структура;
					НовыйРНПТ.Данные.Вставить("П1100010", Выборка.РНПТ);
					НовыйРНПТ.Данные.Вставить("П1100011", Выборка.ЕдиницаИзмерения);
					НовыйРНПТ.Данные.Вставить("П1100012", Выборка.Количество);
					НовыйРНПТ.Данные.Вставить("П1100013", Выборка.СуммаБезНДС);
				КонецЦикла;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет реквизиты объекта значениями, полученными в структуре ДанныхЗаполнения.
//	Заполнение возможно только в случае, когда в качестве ДанныхЗаполнения получена структура.
//	Заполнены будут только те реквизиты, для которых в метаданных установлен флаг "ЗаполнятьИзДанныхЗаполнения".
//
//
// Параметры
//  <Объект>  - <СправочникОбъект>, <ДокументОбъект> и т.д. - Заполняемый объект.
//  <ДанныеЗаполнения>  - <произвольный тип> - параметр, полученный в ОбработкеЗаполнения объекта.
//  <МетаданныеОбъекта>  - <Метаданные>.
//
//
Процедура ЗаполнитьПоСтруктуре(Объект, ДанныеЗаполнения, МетаданныеОбъекта = Неопределено)	Экспорт

	Если Объект = Неопределено
		ИЛИ ТипЗнч(ДанныеЗаполнения) <> Тип("Структура")
		ИЛИ ДанныеЗаполнения.Количество() = 0 Тогда

		Возврат;

	КонецЕсли;

	Если МетаданныеОбъекта = Неопределено Тогда
		МетаданныеОбъекта = Объект.Метаданные();
	КонецЕсли;
	Если  Метаданные.Справочники.Содержит(МетаданныеОбъекта)
		ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта) Тогда
		РазличатьГруппыИЭлементы = МетаданныеОбъекта.Иерархический;
	Иначе
		РазличатьГруппыИЭлементы = Ложь;
	КонецЕсли;

	СтруктураЗаполнения = Новый Структура;
	Для Каждого Реквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			СтруктураЗаполнения.Вставить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
		Если Реквизит.ЗаполнятьИзДанныхЗаполнения
			И ДанныеЗаполнения.Свойство(Реквизит.Имя) Тогда
			Если РазличатьГруппыИЭлементы Тогда
				Если (Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента)
					ИЛИ (НЕ Объект.ЭтоГруппа И Реквизит.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы) Тогда
					СтруктураЗаполнения.Вставить(Реквизит.Имя);
				КонецЕсли;
			Иначе
				СтруктураЗаполнения.Вставить(Реквизит.Имя);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ЗаполняемыйЭлемент Из СтруктураЗаполнения Цикл
		ЗначениеЗаполнения = ДанныеЗаполнения[ЗаполняемыйЭлемент.Ключ];
		Если ТипЗнч(ЗначениеЗаполнения) = Тип("Массив")
			ИЛИ ТипЗнч(ЗначениеЗаполнения) = Тип("ФиксированныйМассив") Тогда
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения[0];
		Иначе
			СтруктураЗаполнения[ЗаполняемыйЭлемент.Ключ] = ЗначениеЗаполнения;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Объект, СтруктураЗаполнения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ
Функция ДеревоЗначенийОтчетОбОперациях()
	
	НовоеДеревоЗначений = Новый ДеревоЗначений();
	НовоеДеревоЗначений.Колонки.Добавить("Данные");
	НовоеДеревоЗначений.Колонки.Добавить("ДанныеМногострочныхЧастей");
	НовоеДеревоЗначений.Колонки.Добавить("АдресТабличногоДокумента");
	
	Возврат НовоеДеревоЗначений;
	
КонецФункции

Функция ДокументТребуетсяОтразитьВЖурнале(МетаданныеДокумента)
	
	Если МетаданныеДокумента = Метаданные.Документы.ВводОстатков
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковДенежныхСредств
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковНДСПредъявленного
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковОПродажахЗаПрошлыеПериоды
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковПоФинансовымИнструментам
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковПрочиеРасходы
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковПрочихАктивовПассивов
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковРасходовПриУСН
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковРасчетовПоЭквайрингу
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковСПодотчетниками
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковТМЦВЭксплуатации
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковТоваров
		ИЛИ МетаданныеДокумента = Метаданные.Документы.УведомлениеОбОстаткахПрослеживаемыхТоваров
		ИЛИ МетаданныеДокумента = Метаданные.Документы.УведомлениеОВвозеПрослеживаемыхТоваров
		ИЛИ МетаданныеДокумента = Метаданные.Документы.УведомлениеОПеремещенииПрослеживаемыхТоваров
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВводОстатковВнеоборотныхАктивов2_4
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ВнутреннееПотреблениеТоваров
		ИЛИ МетаданныеДокумента = Метаданные.Документы.ОбъединениеОС
		ИЛИ МетаданныеДокумента = Метаданные.Документы.РазукомплектацияОС
		ИЛИ МетаданныеДокумента = Метаданные.Документы.СписаниеТоваровУХранителя
		ИЛИ МетаданныеДокумента = Метаданные.Документы.КорректировкаРегистров Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ МетаданныеДокумента.Движения.Содержит(
		Метаданные.РегистрыСведений.ОперацииСПрослеживаемымиТоварами) Тогда
		ВызватьИсключение НСтр("ru = 'Документ не является регистратором для регистра сведений ""Операции с прослеживаемыми товарами""';
								|en = 'The document is not a recorder for the ""Operations with traceable goods"" information register'");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура СформироватьТаблицуКонтрагентовДокумента(МенеджерВременныхТаблиц, Регистратор)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РеестрДокументов.Организация КАК Организация,
	|	КлючиРеестра.Ключ КАК Контрагент
	|ПОМЕСТИТЬ КонтрагентыДокумента
	|ИЗ
	|	РегистрСведений.РеестрДокументов КАК РеестрДокументов
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиРеестраДокументов КАК КлючиРеестра
	|	ПО РеестрДокументов.Контрагент = КлючиРеестра.Ссылка
	|		И (КлючиРеестра.Ключ ССЫЛКА Справочник.Контрагенты
	|			ИЛИ КлючиРеестра.Ключ ССЫЛКА Справочник.Организации)
	|
	|ГДЕ
	|	РеестрДокументов.Ссылка = &Регистратор
	|	И НЕ РеестрДокументов.Ссылка ССЫЛКА Документ.ПередачаТоваровМеждуОрганизациями
	|	И НЕ РеестрДокументов.Ссылка ССЫЛКА Документ.ВозвратТоваровМеждуОрганизациями
	|	И НЕ КлючиРеестра.Ключ В (
	|		ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ОрганизацияПолучатель
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Организация
	|ИЗ
	|	Документ.ПередачаТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.Организация,
	|	ДанныеДокумента.ОрганизацияПолучатель
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДанныеДокумента.ОрганизацияПолучатель,
	|	ДанныеДокумента.Организация
	|ИЗ
	|	Документ.ВозвратТоваровМеждуОрганизациями КАК ДанныеДокумента
	|
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Регистратор";
	
	Запрос.Выполнить();
	
КонецПроцедуры

Функция ТекстЗапросаДвиженияПрослеживаемогоТовара(ЕстьКолонкаРНПТ = Ложь)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Движения.ВидДвижения КАК ВидДвижения,
	|	Движения.Организация КАК Организация,
	|	Движения.ВидЗапасов КАК ВидЗапасов,
	|	Движения.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Движения.НомерГТД КАК НомерГТД,
	|	Движения.КоличествоПоРНПТ
	|ПОМЕСТИТЬ ДвиженияДокумента
	|ИЗ
	|	&ТаблицаДвижений КАК Движения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Движения.Организация,
	|	ЕСТЬNULL(Контрагенты.Контрагент, НЕОПРЕДЕЛЕНО) КАК Контрагент,
	|	ЕСТЬNULL(ВидыЗапасов.ТипЗапасов, ЗНАЧЕНИЕ(Перечисление.ТипыЗапасов.Товар)) КАК ТипЗапасов,
	|	Движения.ХозяйственнаяОперация,
	|	Движения.НомерГТД КАК РНПТ,
	|	ВЫБОР Движения.ВидДвижения
	|		КОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|			ТОГДА Движения.КоличествоПоРНПТ
	|		ИНАЧЕ -Движения.КоличествоПоРНПТ
	|	КОНЕЦ КАК КоличествоПоРНПТ,
	|	Движения.КоличествоПоРНПТ < 0  КАК СторноКоличества
	|ПОМЕСТИТЬ ДвижениеПрослеживаемыхТоваров
	|ИЗ
	|	ДвиженияДокумента КАК Движения
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НомераГТД КАК НомераГТД
	|		ПО Движения.НомерГТД = НомераГТД.Ссылка
	|			И НомераГТД.РНПТ
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыЗапасов КАК ВидыЗапасов
	|		ПО Движения.ВидЗапасов = ВидыЗапасов.Ссылка
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ КонтрагентыДокумента КАК Контрагенты
	|		ПО Движения.Организация = Контрагенты.Организация
	|;
	|
	|ВЫБРАТЬ
	|	ДвижениеТоваров.Организация КАК Организация,
	|	ДвижениеТоваров.Контрагент КАК Контрагент,
	|	ДвижениеТоваров.ТипЗапасов КАК ТипЗапасов,
	|	ДвижениеТоваров.ХозяйственнаяОперация,
	|	ВЫБОР
	|		КОГДА СУММА(ДвижениеТоваров.КоличествоПоРНПТ) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Поступление,
	|	ВЫБОР
	|		КОГДА СУММА(ДвижениеТоваров.КоличествоПоРНПТ) < 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Выбытие,
	|	МАКСИМУМ(ДвижениеТоваров.СторноКоличества) КАК Сторно
	|ИЗ
	|	ДвижениеПрослеживаемыхТоваров КАК ДвижениеТоваров
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвижениеТоваров.Организация,
	|	ДвижениеТоваров.Контрагент,
	|	ДвижениеТоваров.ТипЗапасов,
	|	ДвижениеТоваров.ХозяйственнаяОперация
	|
	|ИМЕЮЩИЕ
	|	СУММА(ДвижениеТоваров.КоличествоПоРНПТ) <> 0";
	
	Если ЕстьКолонкаРНПТ Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Движения.НомерГТД КАК НомерГТД", "Движения.РНПТ КАК НомерГТД");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция СобственныйТовар(ТипЗапасов)
	Возврат ТипЗапасов = Перечисления.ТипыЗапасов.Товар
		ИЛИ ТипЗапасов = Перечисления.ТипыЗапасов.ТоварПереданный
		ИЛИ ТипЗапасов = Перечисления.ТипыЗапасов.СобственныйТоварВПути
		ИЛИ ТипЗапасов = Перечисления.ТипыЗапасов.СобственныйТоварПоНеотфактурованнойПоставке;
КонецФункции

Функция ОперацииПрослеживаемости(Регистратор, ТаблицаДвижений)
	
	Операции = Новый Массив;
	
	СвойстваРегистратора = ПолучитьСвойстваРегистратора(Регистратор);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	СформироватьТаблицуКонтрагентовДокумента(МенеджерВременныхТаблиц, Регистратор);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДвижений", ТаблицаДвижений);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Если ТаблицаДвижений.Колонки.Найти("ВидЗапасов") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("ВидЗапасов", Новый ОписаниеТипов("СправочникСсылка.ВидыЗапасов"));
	КонецЕсли;
	Если ТаблицаДвижений.Колонки.Найти("ХозяйственнаяОперация") = Неопределено Тогда
		ТаблицаДвижений.Колонки.Добавить("ХозяйственнаяОперация", Новый ОписаниеТипов("ПеречислениеСсылка.ХозяйственныеОперации"));
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапросаДвиженияПрослеживаемогоТовара(ТаблицаДвижений.Колонки.Найти("РНПТ") <> Неопределено);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.СледующийПоЗначениюПоля("Организация") Цикл
		
		СвойстваОрганизации = ПолучитьСвойстваОрганизации(Выборка.Организация, Регистратор.Дата);
		
		Пока Выборка.Следующий() Цикл
			
			СвойстваОперации = НоваяСтруктураСвойствОперации();
			ЗаполнитьЗначенияСвойств(СвойстваОперации, Выборка);
			ЗаполнитьЗначенияСвойств(СвойстваОперации, СвойстваОрганизации);
			ЗаполнитьЗначенияСвойств(СвойстваОперации, СвойстваРегистратора);
			
			Если СвойстваОрганизации.ПлательщикНДС Тогда
				СвойстваОперации.ОблагаетсяНДС = НЕ СвойстваРегистратора.Свойство("НалогообложениеНДС")
					ИЛИ СвойстваРегистратора.НалогообложениеНДС <> Перечисления.ТипыНалогообложенияНДС.ПродажаНеОблагаетсяНДС;
			КонецЕсли;
			
			Если ОперациюТребуетсяОтразитьВЖурнале(СвойстваОперации) Тогда
				Операции.Добавить(СвойстваОперации);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Операции;
	
КонецФункции

Функция НоваяСтруктураСвойствОперации()
	
	Свойства = Новый Структура;
	
	Свойства.Вставить("Организация", Справочники.Организации.ПустаяСсылка());
	Свойства.Вставить("Контрагент", Неопределено);
	
	Свойства.Вставить("ТипРегистратора", Неопределено);
	Свойства.Вставить("ТипЗапасов", Перечисления.ТипыЗапасов.ПустаяСсылка());
	Свойства.Вставить("ХозяйственнаяОперация", Перечисления.ХозяйственныеОперации.ПустаяСсылка());
	Свойства.Вставить("ОблагаетсяНДС", Ложь);
	Свойства.Вставить("Поступление", Ложь);
	Свойства.Вставить("Выбытие", Ложь);
	Свойства.Вставить("Сторно", Ложь);
	
	Возврат Свойства;
	
КонецФункции

Функция ПолучитьСвойстваРегистратора(Регистратор)
	
	Свойства = Новый Структура;
	Свойства.Вставить("ТипРегистратора", ТипЗнч(Регистратор));
	
	Если Свойства.ТипРегистратора = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Свойства.Вставить("НалогообложениеНДС", Регистратор.НалогообложениеНДС);
		
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция ПолучитьСвойстваОрганизации(Организация, Дата)
	
	Свойства = Новый Структура;
	Свойства.Вставить("Организация", Организация);
	Свойства.Вставить("ПлательщикНДС", Ложь);
	
	НастройкиУчетаНДС = НастройкиНалоговУчетныхПолитикПовтИсп.ДействующиеПараметрыНалоговУчетныхПолитик(
		"НастройкиУчетаНДС", Организация, Дата);
	
	Если НЕ НастройкиУчетаНДС = Неопределено И ТипЗнч(НастройкиУчетаНДС) = Тип("Структура") Тогда
		Свойства.ПлательщикНДС =
			НастройкиУчетаНДС.Свойство("ПлательщикНДС") И НастройкиУчетаНДС.ПлательщикНДС
			И НЕ (НастройкиУчетаНДС.Свойство("ПрименяетсяОсвобождениеОтУплатыНДС") И НастройкиУчетаНДС.ПрименяетсяОсвобождениеОтУплатыНДС);
	КонецЕсли;
	
	Возврат Свойства;
	
КонецФункции

Функция ОперациюТребуетсяОтразитьВЖурнале(СвойстваОперации)
	
	Если СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		И СвойстваОперации.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПередачаНаКомиссию Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ОтчетПрослеживаемойОперации(СвойстваОперации)
	
	ОтражатьВОтчете = Перечисления.ПорядокОтраженияВОтчетностиПоПрослеживаемости;
	
	Если НЕ ОтражатьВОтчетахПрослеживаемости(СвойстваОперации.ТипРегистратора) Тогда
		
		Возврат ОтражатьВОтчете.ПустаяСсылка();
		
	ИначеЕсли НЕ ЭтоТорговыйДокумент(СвойстваОперации.ТипРегистратора) Тогда
		
		Возврат ОтражатьВОтчете.ОтчетОбОперациях;
		
	ИначеЕсли НЕ СобственныйТовар(СвойстваОперации.ТипЗапасов) Тогда
		
		Возврат ОтражатьВОтчете.ЖурналСФ;
		
	ИначеЕсли НЕ СвойстваОперации.ОблагаетсяНДС Тогда
		
		Возврат ОтражатьВОтчете.ОтчетОбОперациях;
		
	ИначеЕсли СвойстваОперации.Поступление Тогда
		
		Возврат ОтражатьВОтчете.КнигаПокупок;
		
	ИначеЕсли СвойстваОперации.Выбытие Тогда
		
		Возврат ОтражатьВОтчете.КнигаПродаж;
		
	КонецЕсли;
	
КонецФункции

Функция КодПрослеживаемойОперации(СвойстваОперации)
	
	КодОперации = ОперацияПрослеживаемости();
	
	Если НЕ ОтражатьВОтчетахПрослеживаемости(СвойстваОперации.ТипРегистратора) Тогда
		Возврат КодОперации;
	КонецЕсли;
	
	ХозОперации = Перечисления.ХозяйственныеОперации;
	
	Если СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВыпускПродукции")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ДвижениеПродукцииИМатериалов")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетКомиссионераОСписании")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациямиОСписании")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПередачаМатериаловВПроизводство")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПередачаСырьяПереработчику")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПроизводствоБезЗаказа")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.РаспределениеВозвратныхОтходов")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.РаспределениеПроизводственныхЗатрат")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.СборкаТоваров")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.СписаниеТоваровУХранителя") Тогда
		
		КодОперации = ОперацияПрослеживаемости("01");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		КодОперации = ОперацияПрослеживаемости("04");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.СписаниеНедостачТоваров") Тогда
		
		КодОперации = ОперацияПрослеживаемости("09");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПрочееОприходованиеТоваров")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров") Тогда
			
		КодОперации = ОперацияПрослеживаемости("10");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратСырьяОтПереработчика")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратМатериаловИзПроизводства") Тогда
		
		КодОперации = ОперацияПрослеживаемости("12");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтКлиента") Тогда
		
		Если СвойстваОперации.ХозяйственнаяОперация = ХозОперации.ВозвратОтРозничногоПокупателя Тогда
			КодОперации = ОперацияПрослеживаемости("11");
		Иначе
			КодОперации = ОперацияПрослеживаемости("19");
		КонецЕсли;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВыкупТоваровХранителем")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения") Тогда
		
		КодОперации = ОперацияПрослеживаемости("15");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт") Тогда
		
		КодОперации = ОперацияПрослеживаемости("17");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		
		Если СвойстваОперации.ХозяйственнаяОперация = ХозОперации.ПриемНаКомиссию Тогда
		Иначе 
			КодОперации = ОперацияПрослеживаемости("17");
		КонецЕсли;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		Если СвойстваОперации.ХозяйственнаяОперация = ХозОперации.ПередачаНаКомиссию Тогда
			
		ИначеЕсли СобственныйТовар(СвойстваОперации.ТипЗапасов) Тогда
			КодОперации = ОперацияПрослеживаемости("15");
		КонецЕсли;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями") Тогда
		
		Если СвойстваОперации.ХозяйственнаяОперация = ХозОперации.РеализацияТоваровВДругуюОрганизацию Тогда
			Если СвойстваОперации.Поступление Тогда
				КодОперации = ОперацияПрослеживаемости("17");
			ИначеЕсли СобственныйТовар(СвойстваОперации.ТипЗапасов) Тогда
				КодОперации = ОперацияПрослеживаемости("15");
			Иначе
				// Реализация комиссионных товаров
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		Если СвойстваОперации.ХозяйственнаяОперация = ХозОперации.ВозвратТоваровМеждуОрганизациями Тогда
			Если СвойстваОперации.Сторно Тогда
				КодОперации = ОперацияПрослеживаемости("19");
			Иначе
				КодОперации = ОперацияПрослеживаемости("21");
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		КодОперации = ОперацияПрослеживаемости("21");
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
		
		Если СвойстваОперации.Выбытие Тогда
			КодОперации = ОперацияПрослеживаемости("20");
		Иначе
			КодОперации = ОперацияПрослеживаемости("19");
		КонецЕсли;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаПриобретения") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ИсправлениеРазвернутогоСальдоТоваровОрганизаций") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаВидаДеятельностиНДС") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаНазначенияТоваров") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаНалогообложенияНДСПартийТоваров") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаОбособленногоУчетаЗапасов") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.МаркировкаТоваровГИСМ") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетКомиссионера") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПеремаркировкаТоваровГИСМ") Тогда
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.Сторно") Тогда
//++ НЕ УТКА
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ЭтапПроизводства2_2") Тогда
//-- НЕ УТКА
	КонецЕсли;
	
	Возврат КодОперации;
	
КонецФункции

Функция ТипДокументаПрослеживаемойОперации(СвойстваОперации)
	
	// Согласно правилам заполнения отчета об операциях требуется выделять следующие типы документов: 
	//   1 – счет-фактура
	//   2 – корректировочный счет-фактура
	//   3 – универсальный передаточный документ
	//   4 – универсальный корректировочный документ
	//
	// Во всех остальных случаях указывается код:
	//   5 – иной первичный учетный документ
	
	ТипДокумента = Справочники.ТипыДокументов.ПустаяСсылка();
	
	Если СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетОРозничныхПродажах") Тогда
		
		ТипДокумента = Справочники.ТипыДокументов.ОтчетОРозничныхПродажах
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетКомитенту")
		//++ НЕ УТКА
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетДавальцу")
		//-- НЕ УТКА
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОприходованиеИзлишковТоваров")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.АктВыполненныхРабот") Тогда
		
		ТипДокумента = Справочники.ТипыДокументов.Акт;
		
	ИначеЕсли СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ СвойстваОперации.ТипРегистратора = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями") Тогда
		
		ТипДокумента = Справочники.ТипыДокументов.Накладная;
		
	КонецЕсли;
	
	Возврат ТипДокумента;
	
КонецФункции

Функция ЭтоТорговыйДокумент(ТипДокумента)
	
	Возврат ТипДокумента = Тип("ДокументСсылка.ПриобретениеТоваровУслуг")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РеализацияТоваровУслуг")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.КорректировкаПриобретения")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.КорректировкаРеализации")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ТаможеннаяДекларацияИмпорт")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетКомиссионера")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетОРозничныхПродажах")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ОтгрузкаТоваровСХранения")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыкупПринятыхНаХранениеТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыкупТоваровХранителем")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриобретениеУслугПрочихАктивов")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВыкупАрендованныхОС")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеОС2_4")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.РеализацияУслугПрочихАктивов");
	
КонецФункции

Функция ОтражатьВОтчетахПрослеживаемости(ТипДокумента)
	
	Возврат НЕ (ТипДокумента = Тип("ДокументСсылка.ПорчаТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПеремещениеТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПересортицаТоваров")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПередачаТоваровХранителю")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПриемкаТоваровНаХранение")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеОтПереработчика")
//++ НЕ УТКА
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеСырьяОтДавальца")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ВозвратСырьяДавальцу")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПередачаДавальцу")
//-- НЕ УТКА
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровНаСклад")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровОтХранителя")
		ИЛИ ТипДокумента = Тип("ДокументСсылка.СписаниеПринятыхНаХранениеТоваров"));
	
КонецФункции

//-- НЕ УТ

#КонецОбласти
