////////////////////////////////////////////////////////////////////////////////
// Модуль содержит серверные методы, общие для форм финансовых инструментов.
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриСозданииНаСервереФормыГрафика(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	
	Если Параметры.ОткрыватьСтраницуГрафик Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаГрафик;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьУсловноеОформлениеФормыГрафика(УсловноеОформление, ОписаниеГрафика) Экспорт
	
		// Изменяем цвет расчетных значений, к которым применена корректировка.
		Для Каждого ТекСекцияГрафика Из ОписаниеГрафика Цикл
			ОписаниеСекции = ТекСекцияГрафика.Значение;
			Если ОписаниеСекции.ЭтоРасчетнаяСекция Тогда
				ДобавитьЭлементУсловногоОформленияЕстьКорректировка(УсловноеОформление, ОписаниеСекции.КолонкаПриход);
				ДобавитьЭлементУсловногоОформленияЕстьКорректировка(УсловноеОформление, ОписаниеСекции.КолонкаРасход);
			КонецЕсли;
		КонецЦикла;
		
		// Даты, выходящие за рамки действия инструмента.
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ГрафикРасчетовДата");
		
		ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(ЭлементУО.Отбор.Элементы,"Группа ИЛИ", ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"ГрафикРасчетов.Дата", ВидСравненияКомпоновкиДанных.Больше,Новый ПолеКомпоновкиДанных("Объект.ДатаОкончанияДействия"),,Истина);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ГруппаОтбора,
			"ГрафикРасчетов.Дата", ВидСравненияКомпоновкиДанных.Меньше,Новый ПолеКомпоновкиДанных("Объект.ДатаНачалаДействия"),,Истина);
		
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Кирпичный);
		
КонецПроцедуры

Процедура ПриСозданииНаСервереФормыСпискаВыбораГрафиков(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Параметры = Форма.Параметры;
	Элементы = Форма.Элементы;
	Список = Форма.Список;
	
	УправлениеФормойУХ.УстановитьПредставлениеОтбора(Форма, ,,,,Новый Структура("ДоговорКонтрагента", "Договор"));
	
	// Выделим актуальный график.
	Список.УсловноеОформление.Элементы.Очистить();
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"АктуальныйГрафик", ВидСравненияКомпоновкиДанных.Равно,Истина,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,, Истина));
	
	// Выделим неа
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Проведен", ВидСравненияКомпоновкиДанных.Равно,Ложь,,Истина);
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерДополнительногоСоглашения");
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Сохраненный черновик'"));
	
КонецПроцедуры

Процедура ЗаполнитьСписокВыбораВерсииДляСравнения(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
КонецПроцедуры

Функция РасчетныеКолонки(ОписаниеГрафика) Экспорт
	
	РасчетныеКолонки = Новый Массив;
	Для Каждого СекцияГрафика Из ОписаниеГрафика Цикл
		ОписаниеСекции = СекцияГрафика.Значение;
		Если ОписаниеСекции.ЭтоРасчетнаяСекция Тогда
			РасчетныеКолонки.Добавить(ОписаниеСекции.КолонкаПриход);
			РасчетныеКолонки.Добавить(ОписаниеСекции.КолонкаРасход);
		КонецЕсли;
	КонецЦикла;
	Возврат ОбщегоНазначения.ФиксированныеДанные(РасчетныеКолонки);

КонецФункции

Процедура ПересчетТаблицыИзменений(Форма) Экспорт
		
КонецПроцедуры

Процедура ПриИзмененииДаты(Форма, Знач СекцииКПересчету) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ОписаниеГрафика = Форма.ОписаниеГрафика;
	ОперацииГрафика = Форма.ОперацииГрафика;
	
	ДанныеСтроки = Форма.ГрафикРасчетов.НайтиПоИдентификатору(Элементы.ГрафикРасчетов.ТекущаяСтрока);
	НоваяДата = ДанныеСтроки.Дата;
	
	СтруктураДействий = Новый Структура;
	Если Объект.АвтоматическиеВычисления И (ДанныеСтроки.ОсновнойДолгРазмещение <> 0 ИЛИ ДанныеСтроки.ОсновнойДолгВозврат <> 0) Тогда
		СтруктураДействий.Вставить("Пересчитать", Новый Структура("СекцииГрафика", СекцииКПересчету));
	КонецЕсли;
	СтруктураДействий.Вставить("Сортировать");
	
	ФинансовыеИнструментыУХ.ПересчетГрафика(Объект, 0, ОписаниеГрафика, ОперацииГрафика, СтруктураДействий);
		
	Строки = Форма.ГрафикРасчетов.НайтиСтроки(Новый Структура("Дата", НоваяДата));
	Если Строки.Количество() Тогда
		Элементы.ГрафикРасчетов.ТекущаяСтрока = Строки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс_СчетаУчета

Процедура ПриСозданииНаСервере_СчетаУчета(Форма) Экспорт

	Если Форма.КэшируемыеЗначения = Неопределено Тогда
		Форма.КэшируемыеЗначения = Новый Структура;
	КонецЕсли;
	
	Объект = Форма.Объект;
	
	МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(Форма.Объект.Ссылка));
	
	ИмяДокумента = МетаданныеОбъекта.Имя;
	
	СчетаДокумента = Новый Структура;
	СчетаДокумента.Вставить("СчетВзаиморасчетов", ПредопределенноеЗначение("Справочник.ВидыСчетовФИ.СчетВзаиморасчетов"));
	СчетаДокумента.Вставить("СчетВзаиморасчетовСПлательщиком", ПредопределенноеЗначение("Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком"));
	
	СчетаУчета = Новый Соответствие;
	Для каждого СчетДокумента Из СчетаДокумента Цикл
		Если МетаданныеОбъекта.Реквизиты.Найти(СчетДокумента.Ключ) <> Неопределено Тогда
			СчетаУчета.Вставить(СчетДокумента.Значение, Новый Структура("Счет,Субконто1,Субконто2,Субконто3", Объект[СчетДокумента.Ключ]));
		КонецЕсли;
	КонецЦикла;
	
	Если МетаданныеОбъекта.Реквизиты.Найти("Организация") <> Неопределено Тогда
		Форма.КэшируемыеЗначения.Вставить("Организация", Объект.Организация);
	КонецЕсли;	
	
	Для каждого ТекСтрока Из Объект.СчетаУчета Цикл
		
		СчетСубконто = Новый Структура("Счет,Субконто1,Субконто2,Субконто3");
		ЗаполнитьЗначенияСвойств(СчетСубконто, ТекСтрока);
		СчетаУчета.Вставить(ТекСтрока.ВидСчетаФИ, СчетСубконто);
		
	КонецЦикла;
	
	Форма.КэшируемыеЗначения.Вставить("ИмяДокумента", 		ИмяДокумента);
	Форма.КэшируемыеЗначения.Вставить("КлючевыеСубконто",	ИнвестицииКлиентСервер.ПолучитьКлючевыеСубконтоИнвестиций(Истина));
	Форма.КэшируемыеЗначения.Вставить("СчетаУчета", 		СчетаУчета);
		
	Если Форма.Параметры.Ключ.Пустая() Тогда // Заполним счета при создании ФИ
		ЕстьСчетВзаиморасчетов = (СчетаУчета.Получить("СчетВзаиморасчетов") <> Неопределено) Или (СчетаУчета.Получить("СчетВзаиморасчетовСПлательщиком") <> Неопределено);
		ФинансовыеИнструментыФормыКлиентСервер.УправлениеФормой_СчетаУчета(Форма, Истина, ЕстьСчетВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчета(Форма, КэшируемыеСчетаУчета) Экспорт
	
	СчетаУчета = Форма.СчетаУчета;
	
	Для каждого СчетИсточник Из КэшируемыеСчетаУчета Цикл
		
		НоваяСтрока = СчетаУчета.Добавить();
		НоваяСтрока.ВидСчетаФИ = СчетИсточник.Ключ;
		Если ЗначениеЗаполнено(СчетИсточник.Значение) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СчетИсточник.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	СчетаУчета.Сортировать("ВидСчетаФИ");

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьЭлементУсловногоОформленияЕстьКорректировка(УсловноеОформление, ИмяКолонки)
	//
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "График" + ИмяКолонки);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		СтрШаблон("Объект.График.%1Корректировка", ИмяКолонки), ВидСравненияКомпоновкиДанных.Заполнено,,,Истина);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.ЦианНейтральный);
	
КонецПроцедуры

Функция ТаблицаИзменений(ИсходнаяТаблица,ГрафикДляСравнения,КолонкиГрафика,КолонкиРасчет)
	
	ИсходнаяТаблица.ЗаполнитьЗначения(Ложь, "ПустаяСтрока"); // служебное поле, потом заполним.
	
	Для Каждого ТекСтрока Из ГрафикДляСравнения.График Цикл
		НовСтрока = ИсходнаяТаблица.Добавить();
		НовСтрока.Дата = ТекСтрока.Дата;
		Для Каждого ТекКолонка Из ИсходнаяТаблица.Колонки Цикл
			// Добавим строки графика для сравнения, все числа - со знаком минус.
			Если ТипЗнч(НовСтрока[ТекКолонка.Имя]) = Тип("Число") Тогда
				НовСтрока[ТекКолонка.Имя] = -ТекСтрока[ТекКолонка.Имя];
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
	
	// Свернем таблицу
	ИсходнаяТаблица.Свернуть("Дата,ПустаяСтрока",КолонкиГрафика);
	
	// Проведем постобработку таблицы. Установим признак "ПустаяСтрока" по аналогии с ручной корректировкой,
	// удалим строки со всеми нулями.
	МассивСтрокКУдалению = Новый Массив;
	
	Для Каждого ТекСтрока Из ИсходнаяТаблица Цикл
		
		Для Каждого ТекКолонкаРасчет Из КолонкиРасчет Цикл
			Если ТекСтрока[ТекКолонкаРасчет] = 0 И ТекСтрока[ТекКолонкаРасчет + "Расчет"] <> 0 Тогда
				ТекСтрока.ПустаяСтрока = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		НеобходимоУдалить = Истина;
		Для Каждого ТекКолонка из ИсходнаяТаблица.Колонки Цикл
			
			Если ТипЗнч(ТекСтрока[ТекКолонка.Имя]) = Тип("Число") И ТекСтрока[ТекКолонка.Имя] <> 0 Тогда
				НеобходимоУдалить = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеобходимоУдалить Тогда
			МассивСтрокКУдалению.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивСтрокКУдалению Цикл
		ИсходнаяТаблица.Удалить(ТекСтрока);
	КонецЦикла;
	
	Возврат ИсходнаяТаблица;
КонецФункции

#КонецОбласти
