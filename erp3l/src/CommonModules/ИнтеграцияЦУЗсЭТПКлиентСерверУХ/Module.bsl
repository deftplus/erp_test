// Проверяет корректность имени команды обмена
Функция КорректнаяКомандаОбмена(КомандаОбмена) Экспорт
	КомандыОбмена = 
		"ОтправитьПроцедуруЗакупкиНаЭТП,
		|ПолучитьПротоколВыбораПоставщиков,
		|ПолучитьСтатусОбъектаНаЭТП,
		|ОтменитьЗакупку,
		|ОтправитьПроектПланаЗакупки,
		|ОтправитьПланЗакупки,
		|ОтправитьПротоколВыбораПобедителей,
		|ОтправитьПротоколВскрытияКонвертов,
		|ОтправитьПротоколРассмотренияЗаявок,
		|ОтправитьДоговорНаЭТП,
		|ОтправитьИсполнениеДоговора,
		|ОтправитьОбъемЗакупокУМCП";
	Возврат СтрНайти(КомандыОбмена, КомандаОбмена) > 0;
КонецФункции

// Установить значения полей описания транзакции для переданной ошибки.
Процедура УстановитьЗначениеОшибки(ПоляОписанияТранзакции, ТекстОшибки) Экспорт
	ПоляОписанияТранзакции.ТекстОшибки = ПоляОписанияТранзакции.ТекстОшибки + ТекстОшибки;
	ПоляОписанияТранзакции.ОшибкаОбменаСЭТП = Истина;
КонецПроцедуры

Функция ПолучитьОписаниеОбмена(КомандаОбмена, ЭТП, ОбъектВыгрузки, ПараметрыПодключенияКЭТП, ПоляОписанияТранзакции) Экспорт
		
	ОписаниеОбмена = Новый Структура;
	ОписаниеОбмена.Вставить("КомандаОбмена", КомандаОбмена);
	ОписаниеОбмена.Вставить("ЭТП", ЭТП);
	ОписаниеОбмена.Вставить("ОбъектВыгрузки", ОбъектВыгрузки);
	ОписаниеОбмена.Вставить("ПараметрыПодключенияКЭТП", ПараметрыПодключенияКЭТП);
	ОписаниеОбмена.Вставить("ПоляОписанияТранзакции", ПоляОписанияТранзакции);
	ОписаниеОбмена.Вставить("флТранзакцияЗавершиласьУспешно", Ложь);
		
	Если НЕ ЗначениеЗаполнено(ПоляОписанияТранзакции) Тогда
		ПоляОписанияТранзакции = ИнтеграцияЦУЗсЭТПСерверУХ.ШаблонОписанияТранзакцииОбмена();
		ТекстОшибки = НСтр("ru = 'Не указаны поля описания транзакции обмена.'");
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Символы.ПС + ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭТП) Тогда
		ТекстОшибки = НСтр("ru = 'Не указана тороговая площадка.'");
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Символы.ПС + ТекстОшибки);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектВыгрузки) Тогда
		ТекстОшибки = НСтр("ru = 'Не указан объект выгрузки.'");
		ИнтеграцияЦУЗсЭТПКлиентСерверУХ.УстановитьЗначениеОшибки(ПоляОписанияТранзакции, Символы.ПС + ТекстОшибки);
	КонецЕсли;
	
	Возврат ОписаниеОбмена;
КонецФункции


#Область ФункцииРаботыСXDTO

Функция ТипСвойстваИзТипаОбъекта(ТипОбъекта, ИмяСвойства) Экспорт
	Возврат ТипОбъекта.Свойства.Получить(ИмяСвойства).Тип;
КонецФункции

Функция ПолучитьКорневыеОбъектыПространстваИмен(ФабрикаXDTO, ПространствоИмен) Экспорт
	Для Каждого Пакет ИЗ ФабрикаXDTO.Пакеты Цикл
		Если ПространствоИмен = Пакет.URIПространстваИмен Тогда
			Возврат Пакет.КорневыеСвойства;
		КонецЕсли;
	КонецЦикла;
  	Возврат Неопределено;
КонецФункции

// Преобразуем объект-XDTO в текст XML
//
// Параметры:
//  ФабрикаXDTO	- ФабрикаXDTO - фабрика.
//  Объект		- ОбъектXDTO | ЗначениеXDTO - 
//  ИмяТэга		- Строка - имя тэга в который нужно сделать запись.
// 
// Возвращаемое значение:
//   - Строка - текст XML представления переданного объекта.
//
Функция ПолучитьТекстОписанияОбъекта(ФабрикаXDTO, Объект, ИмяТэга) Экспорт
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку("UTF-8");
	ФабрикаXDTO.ЗаписатьXML(Запись, Объект, ИмяТэга);
	Возврат Запись.Закрыть();
КонецФункции

// Преобразуем объект-XDTO в текст XML
//
// Параметры:
//  ФабрикаXDTO	- ФабрикаXDTO - фабрика.
//	ТекстXML	- Строка - текст представления объекта.
//  ТипXDTO		- ТипЗначенияXDTO | ТипОбъектаXDTO | Неопределно - тип
//					объекта для чтения. Если не указан, то будем
//					пытаться определить тип из текста.
// 
// Возвращаемое значение:
//   - ЗначенияXDTO | ОбъектаXDTO - прочитанный объект.
//
Функция ТекстXMLВОбъектXDTO(ФабрикаXDTO, ТекстXML, ТипXDTO) Экспорт
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(ТекстXML);
	Объект = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипXDTO);
	Чтение.Закрыть();
	Возврат Объект;
КонецФункции

// Удаляем лишние пробельные символы
Функция УбратьПовторяющиесяСимволы(Текст, СимволДляПроверки) Экспорт
	ДваСимволаДляПоиска = СимволДляПроверки + СимволДляПроверки;
	
	ВремТекст = СокрЛП(Текст);
	ДлиннаИсходная = СтрДлина(ВремТекст);
	ВремТекст = СтрЗаменить(ВремТекст, ДваСимволаДляПоиска, СимволДляПроверки);
	
	Пока Истина Цикл
		Длинна = СтрДлина(ВремТекст);
		Если ДлиннаИсходная = Длинна Тогда
			Возврат ВремТекст;
		КонецЕсли;
		ДлиннаИсходная = Длинна;
		ВремТекст = СтрЗаменить(ВремТекст, ДваСимволаДляПоиска, СимволДляПроверки);
	КонецЦикла;
	
	Возврат ВремТекст;
КонецФункции

Функция ПодготовитьWhiteSpaceCollapse(Текст) Экспорт
	Если ПустаяСтрока(Текст) Тогда
		Возврат "";
	КонецЕсли;
	
	ВремТекст = СокрЛП(Текст);
	
	ВремТекст = СтрЗаменить(ВремТекст, Символы.ПС, " ");
	ВремТекст = СтрЗаменить(ВремТекст, Символы.ВК, " ");
	ВремТекст = СтрЗаменить(ВремТекст, Символы.Таб, " ");
	ВремТекст = СтрЗаменить(ВремТекст, Символы.ВТаб, " ");
	ВремТекст = СтрЗаменить(ВремТекст, Символы.ПФ, " ");
	ВремТекст = СтрЗаменить(ВремТекст, Символы.НПП, " ");
	
	ВремТекст = УбратьПовторяющиесяСимволы(ВремТекст, " ");
	
	Возврат ВремТекст;
КонецФункции


#КонецОбласти
