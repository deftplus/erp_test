////////////////////////////////////////////////////////////////////////////////
// Модуль содержит переопределяемые в данном решении методы логики управления 
// согласованием в контексте клиент-серверного кода 
////////////////////////////////////////////////////////////////////////////////

// Возвращает текст запроса для списка заявок формы Мои оповещения.
Функция ПолучитьТекстЗапросаЗаявкиНаОперациюМоиОповещения() Экспорт
	РезультатФункции = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗаявкаНаОперацию.Ссылка КАК Ссылка,
	|	ЗаявкаНаОперацию.Номер КАК Номер,
	|	ЗаявкаНаОперацию.Дата КАК Дата,
	|	ЗаявкаНаОперацию.ФормаОплатыЗаявки КАК ФормаОплаты,
	|	ЗаявкаНаОперацию.Валюта КАК ВалютаДокумента,
	|	ЗаявкаНаОперацию.СуммаДокумента КАК СуммаДокумента,
	|	ЗаявкаНаОперацию.Контрагент КАК Контрагент,
	|	ЗаявкаНаОперацию.Организация КАК Организация,
	|	ЗаявкаНаОперацию.ЦФО КАК ЦФО,
	|	ЗаявкаНаОперацию.Приоритет КАК Приоритет,
	|	ЗаявкаНаОперацию.БанковскийСчетКонтрагента КАК СчетКонтрагента,
	|	ЗаявкаНаОперацию.Договор КАК ДоговорКонтрагента,
	|	ЗаявкаНаОперацию.Проект КАК Проект,
	|	ЗаявкаНаОперацию.ВидОперацииУХ КАК ВидОперацииУХ,
	|	ЗаявкаНаОперацию.КрайняяДата КАК КрайняяДата,
	|	ЗаявкаНаОперацию.ЕстьПревышениеЛимитов КАК ЕстьПревышениеЛимитыБюджет,
	|	ЗадачиУниверсальныхПроцессов.ВидДействия КАК ВидДействия,
	|	ЗадачиУниверсальныхПроцессов.Ответственный КАК Ответственный
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ЗадачиУниверсальныхПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаОперацию
	|		ПО ЗадачиУниверсальныхПроцессов.Задача.СвязанныйОбъект = ЗаявкаНаОперацию.Ссылка
	|ГДЕ
	|	ЗадачиУниверсальныхПроцессов.Выполнено = ЛОЖЬ
	|	И ЗадачиУниверсальныхПроцессов.ВидДействия В (ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования), ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа))
	|	И ЗадачиУниверсальныхПроцессов.ДокументПроцесса.ПометкаУдаления = ЛОЖЬ";
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьТекстЗапросаЗаявкиНаОперациюМоиОповещения()

// Возвращает текст запроса построителя запросов для условного перехода
// при согласовании заявки на оплату.
Функция ПолучитьТекстЗапросаУсловныйПереходВЗаявке(МассивРеквизитов, ИндексРеквизита) Экспорт
		
	ДополнительныеРеквизитыИСведения1 = "";
	ДополнительныеРеквизитыИСведенияПоляГруппировки = "";
	ДополнительныеРеквизитыИСведения2 = "";
	ДополнительныеРеквизитыИСведенияУсловие = "";
	УсловияСоединенияДопРеквизиты = "";
	УсловияСоединенияДопСведения = "";
	ДобавленныеРеквизиты = Новый Массив;
	
	ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(Метаданные.Документы.ЗаявкаНаРасходованиеДенежныхСредств, 
		МассивРеквизитов, ИндексРеквизита,, ДобавленныеРеквизиты,
		ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, 
		ДополнительныеРеквизитыИСведения2, ДополнительныеРеквизитыИСведенияУсловие, 
		УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения);	
			
	РезультатФункции = "ВЫБРАТЬ
	|	ЗаявкаНаОперацию.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ЗаявкаНаОперацию.Комментарий КАК Строка(1024)) КАК Комментарий" + ДополнительныеРеквизитыИСведения1 + "
	|ПОМЕСТИТЬ ВТЗаявкаИДопРеквизитыИСведения
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаОперацию" + УсловияСоединенияДопРеквизиты + УсловияСоединенияДопСведения + "
	|ГДЕ
	|	ЗаявкаНаОперацию.Ссылка = &Заявка
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкаНаОперацию.Ссылка" + ДополнительныеРеквизитыИСведенияПоляГруппировки + "
	|;
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаявкаНаОперацию.Ссылка КАК Ссылка" + ДополнительныеРеквизитыИСведения2 + "
	|ИЗ
	|	ВТЗаявкаИДопРеквизитыИСведения КАК ДопРеквизитыИСведения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаОперацию
	|		ПО ДопРеквизитыИСведения.Ссылка = ЗаявкаНаОперацию.Ссылка
	|{ГДЕ
	|	ЗаявкаНаОперацию.Ссылка.*,
	|	ЗаявкаНаОперацию.Организация.*,
	|	ЗаявкаНаОперацию.Контрагент.*,
	|	ЗаявкаНаОперацию.ДоговорКонтрагента.*,
	|	ЗаявкаНаОперацию.Приоритет.*,
	|	ДопРеквизитыИСведения.Комментарий" + ДополнительныеРеквизитыИСведенияУсловие + "}";
	
	Возврат РезультатФункции;
		
КонецФункции		// ПолучитьТекстЗапросаУсловныйПереходВЗаявке()

// Преобразует состояние согласования СостояниеОбъектаВход в значение перечисления
// СтатусыПланов.
Функция ПреобразоватьСостояниеПланаЗакупок(СостояниеОбъектаВход)
	РезультатФункции = Перечисления.СтатусыПланов.ПустаяСсылка();
	Если СостояниеОбъектаВход = Перечисления.СостоянияСогласования.Черновик Тогда
		РезультатФункции = Перечисления.СтатусыПланов.ВПодготовке;
	ИначеЕсли СостояниеОбъектаВход = Перечисления.СостоянияСогласования.НаУтверждении Тогда
		РезультатФункции = Перечисления.СтатусыПланов.НаУтверждении;
	ИначеЕсли СостояниеОбъектаВход = Перечисления.СостоянияСогласования.Утверждена Тогда
		РезультатФункции = Перечисления.СтатусыПланов.Утвержден;
	ИначеЕсли СостояниеОбъектаВход = Перечисления.СостоянияСогласования.Отклонена Тогда
		РезультатФункции = Перечисления.СтатусыПланов.Отменен;
	ИначеЕсли СостояниеОбъектаВход = Перечисления.СостоянияСогласования.ПустаяСсылка() Тогда
		РезультатФункции = Перечисления.СтатусыПланов.ВПодготовке;
	Иначе
		РезультатФункции = Перечисления.СтатусыПланов.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьСостояниеПланаЗакупок()

// Устанавливает статус для объекта ДокументВход.
Функция УстановитьСтатусДокумента(ДокументВход, СтатусВход) Экспорт
	
	РезультатФункции = Истина;
	
	Попытка
		
		ДокументОбъект = ДокументВход.ПолучитьОбъект();
				
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументВход, "Статус") Тогда
			
			ДокументОбъект.Статус = СтатусВход;
			
			РежимЗаписи = РежимЗаписиДокумента.Запись;
			Если (НЕ ЗначениеЗаполнено(СтатусВход)) ИЛИ (СтатусВход = Перечисления.СтатусыПланов.ВПодготовке) Тогда
				РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения;
			Иначе
				РежимЗаписи = РежимЗаписиДокумента.Проведение; 
				ДокументОбъект.Записать(РежимЗаписи);
			КонецЕсли;	
			
			РезультатФункции = Истина;
			
		Иначе
			
			ТекстСообщения = НСтр("ru = 'У объекта %Документ% не найдено поле Статус'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			
			РезультатФункции = Ложь;
			
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'При изменении статуса документа %Документ% в %Статус% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ДокументВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Строка(СтатусВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		
		РезультатФункции = Ложь;
		
	КонецПопытки;
	
	Возврат РезультатФункции;
	
КонецФункции		// УстановитьСтатусДокумента()

// Выполняет обработку изменения состояния объекта ОбъектСсылкаВход в состояние
// СостояниеОбъектаВход. Возвращает успешность операции.
Функция ОбработатьИзменениеСостоянияОбъекта(ОбъектСсылкаВход, СостояниеОбъектаВход) Экспорт
	РезультатФункции = Истина;
	Если ТипЗнч(ОбъектСсылкаВход) = Тип("ДокументСсылка.ПланЗакупок") Тогда
		НовоеСостояние = ПреобразоватьСостояниеПланаЗакупок(СостояниеОбъектаВход);
		РезультатФункции = УстановитьСтатусДокумента(ОбъектСсылкаВход, НовоеСостояние);
	Иначе
		// Прочие объекты пропускаем.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОбработатьИзменениеСостоянияОбъекта()

// Дополняет условный переход анализом Дополнительных реквизитов и значений
Процедура ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(МетаданныеОбъекта, 
	МассивРеквизитов, ИндексРеквизита, ПутьКРеквизиту = "", ДобавленныеРеквизиты,
	ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, 
	ДополнительныеРеквизитыИСведения2, ДополнительныеРеквизитыИСведенияУсловие, 
	УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения)
	
	Если ИндексРеквизита >= МассивРеквизитов.Количество() - 1 тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = МассивРеквизитов[ИндексРеквизита];
	ИмяВложенногоРеквизита = МассивРеквизитов[ИндексРеквизита + 1];
	
	ОпределениеПустогоЗначения = "";
		
	Для Каждого РеквизитМетаданных Из МетаданныеОбъекта.Реквизиты Цикл
				
		Если РеквизитМетаданных.Имя <> ИмяРеквизита тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяРеквизита = ПутьКРеквизиту + РеквизитМетаданных.Имя;
		ПсевдонимРеквизита = СтрЗаменить(ПолноеИмяРеквизита, ".", "");
		
		Для Каждого ТипРеквизита Из РеквизитМетаданных.Тип.Типы() Цикл
			
			Если ТипРеквизита = Тип("Число") ИЛИ ТипРеквизита = Тип("Строка") ИЛИ ТипРеквизита = Тип("Булево") 
				ИЛИ ТипРеквизита = Тип("Дата") ИЛИ ТипРеквизита = Тип("УникальныйИдентификатор") тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектТипа = Новый (ТипРеквизита);
			МетаданныеРеквизита = ОбъектТипа.Метаданные();
			
			ТипМетаданныхРеквизита = "";
			ПолноеИмяОбъектаМетаданных = МетаданныеРеквизита.ПолноеИмя();
			СправочникБД = (СтрНайти(ПолноеИмяОбъектаМетаданных, "Справочник.") <> 0);
			ДокументБД = (СтрНайти(ПолноеИмяОбъектаМетаданных, "Документ.") <> 0);
			
			Если СправочникБД тогда
				ТипМетаданныхРеквизита = "Справочник";
			ИначеЕсли ДокументБД тогда
				ТипМетаданныхРеквизита = "Документ";
			Иначе
				Продолжить;
			КонецЕсли;
						
			Если МетаданныеРеквизита.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено тогда
				
				ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
				|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
				|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ТипЗначения КАК СвойствоТипЗначения
				|ИЗ
				|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
				|ГДЕ
				|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Наименование = &Наименование
				|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = &ВложенныйРеквизит");
				
				ЗапросДопРеквизитыИСведения.УстановитьПараметр("ВложенныйРеквизит", ИмяВложенногоРеквизита);
				ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеРеквизита.Синоним);
				
				ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
				
				Если ВыборкаДопРеквизитыИСведения.Количество() > 0 
					И ДобавленныеРеквизиты.Найти(ПолноеИмяРеквизита) = неопределено тогда
					
					ДобавленныеРеквизиты.Добавить(ПолноеИмяРеквизита);
					
					ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
					|	ВЫРАЗИТЬ(ЗаявкаНаОперацию." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ") КАК " + ПсевдонимРеквизита;
					
					ДополнительныеРеквизитыИСведенияПоляГруппировки = ДополнительныеРеквизитыИСведенияПоляГруппировки + ",
					|	ВЫРАЗИТЬ(ЗаявкаНаОперацию." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ")";
					
					ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + " КАК " + ПсевдонимРеквизита;
					
					ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + ".*";
					
					УсловияСоединенияДопРеквизиты = УсловияСоединенияДопРеквизиты + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипМетаданныхРеквизита + "." + МетаданныеРеквизита.Имя + ".ДополнительныеРеквизиты КАК ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + "
					|		ПО (ЗаявкаНаОперацию." + ПолноеИмяРеквизита + " = ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Ссылка)";
					
					Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
						
						Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
							ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
							
							Если ТипСвойства = Тип("Число") тогда
								ОпределениеПустогоЗначения = "0";
							ИначеЕсли ТипСвойства = Тип("Строка") тогда
								ОпределениеПустогоЗначения = """""";
							ИначеЕсли ТипСвойства = Тип("Булево") тогда
								ОпределениеПустогоЗначения = "ЛОЖЬ";
							ИначеЕсли ТипСвойства = Тип("Дата") тогда
								ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
							Иначе
								ОбъектСвойства = Новый (ТипСвойства);
								МетаданныеСвойства = ОбъектСвойства.Метаданные();
								ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
							КонецЕсли;
						Иначе
							ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
						КонецЕсли;
						
						СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
						
						ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
						|	МАКСИМУМ(ВЫБОР 
						|		КОГДА ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
						|			ТОГДА ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Значение
						|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
						|	КОНЕЦ) КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
						
						ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
						|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + " КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
						
						ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
						|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + ".*";
					КонецЦикла;
				КонецЕсли;	
			КонецЕсли;
			
			ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ТипЗначения КАК СвойствоТипЗначения
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Наименование = &Наименование
			|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул = &ВложенныйРеквизит");
			
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("ВложенныйРеквизит", ИмяВложенногоРеквизита);
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеРеквизита.Синоним);
			
			ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
			
			Если ВыборкаДопРеквизитыИСведения.Количество() > 0 
				И ДобавленныеРеквизиты.Найти(ПолноеИмяРеквизита) = неопределено тогда
				
				ДобавленныеРеквизиты.Добавить(ПолноеИмяРеквизита);
				
				ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
				|	ВЫРАЗИТЬ(ЗаявкаНаОперацию." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ") КАК " + ПсевдонимРеквизита;
				
				ДополнительныеРеквизитыИСведенияПоляГруппировки = ДополнительныеРеквизитыИСведенияПоляГруппировки + ",
				|	ВЫРАЗИТЬ(ЗаявкаНаОперацию." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ")";
				
				ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
				|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + " КАК " + ПсевдонимРеквизита;
				
				ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
				|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + ".*";
				
				УсловияСоединенияДопСведения = УсловияСоединенияДопСведения + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + "
				|		ПО (ЗаявкаНаОперацию." + ПолноеИмяРеквизита + " = ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Объект)";
				
				Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
					
					Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
						ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
						
						Если ТипСвойства = Тип("Число") тогда
							ОпределениеПустогоЗначения = "0";
						ИначеЕсли ТипСвойства = Тип("Строка") тогда
							ОпределениеПустогоЗначения = """""";
						ИначеЕсли ТипСвойства = Тип("Булево") тогда
							ОпределениеПустогоЗначения = "ЛОЖЬ";
						ИначеЕсли ТипСвойства = Тип("Дата") тогда
							ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
						Иначе
							ОбъектСвойства = Новый (ТипСвойства);
							МетаданныеСвойства = ОбъектСвойства.Метаданные();
							ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
						КонецЕсли;
					Иначе
						ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
					КонецЕсли;
					
					СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
					
					ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
					|	МАКСИМУМ(ВЫБОР 
					|		КОГДА ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
					|			ТОГДА ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Значение
					|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
					|	КОНЕЦ) КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
					
					ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + " КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
					
					ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + ".*";
				КонецЦикла;
			КонецЕсли;
			
			ИндексРеквизита = ИндексРеквизита + 1;
			ПутьКРеквизитуДоРекурсии = ПутьКРеквизиту;
			ПутьКРеквизиту = ПолноеИмяРеквизита + ".";
			
			ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(МетаданныеРеквизита, МассивРеквизитов, ИндексРеквизита, ПутьКРеквизиту, ДобавленныеРеквизиты,
				ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, ДополнительныеРеквизитыИСведения2, 
				ДополнительныеРеквизитыИСведенияУсловие, УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения);
				
			ИндексРеквизита = ИндексРеквизита - 1;
			ПутьКРеквизиту = ПутьКРеквизитуДоРекурсии;
				
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры