
#Область СКД_НастройкиКомпоновки

#Область СКД_ЭлементыКомпоновщика

Функция ПолеЯвляетсяРодителемДругого(КомпоновщикНастроек, Поле1, Поле2)
	
	ДоступноеПоле1 = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Поле1, КомпоновщикНастроек);
	ДоступноеПоле2 = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Поле2, КомпоновщикНастроек);
	Если ДоступноеПоле1 = ДоступноеПоле2 Тогда
		Возврат Истина;
	КонецЕсли;
	Пока ДоступноеПоле2.Родитель <> Неопределено Цикл
		ДоступноеПоле2 = ДоступноеПоле2.Родитель;
		Если ДоступноеПоле1 = ДоступноеПоле2 Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

// Возвращает группировку - детальные записи компоновщика настроек
Функция ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) Экспорт
	
	ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);
	Если ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0 Тогда
			Возврат ПоследнийЭлементСтруктуры;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Компирует элементы из одной коллекции в другую
Процедура СкопироватьЭлементы(ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина) Экспорт
	
	Если ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных")
	 ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных") Тогда
		СоздаватьПоТипу = Ложь;
	Иначе
		СоздаватьПоТипу = Истина;
	КонецЕсли;
	
	ЗаполнитьСвойстваПН(ПриемникЗначения, ИсточникЗначения);
	
	ПриемникЭлементов = ПриемникЗначения.Элементы;
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	
	Если ОчищатьПриемник Тогда
		ПриемникЭлементов.Очистить();
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из ИсточникЭлементов Цикл
		
		Если ТипЗнч(ЭлементИсточник) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
			// Элементы порядка добавляем в начало
			Индекс = ИсточникЭлементов.Индекс(ЭлементИсточник);
			ЭлементПриемник = ПриемникЭлементов.Вставить(Индекс, ТипЗнч(ЭлементИсточник));
		Иначе
			Если СоздаватьПоТипу Тогда
				ЭлементПриемник = ПриемникЭлементов.Добавить(ТипЗнч(ЭлементИсточник));
			Иначе
				ЭлементПриемник = ПриемникЭлементов.Добавить();
			КонецЕсли;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		// В некоторых коллекциях необходимо заполнить другие коллекции
		Если ТипЗнч(ИсточникЭлементов) = Тип("КоллекцияЭлементовУсловногоОформленияКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Поля, ЭлементИсточник.Поля);
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
			ЗаполнитьЭлементы(ЭлементПриемник.Оформление, ЭлементИсточник.Оформление); 
		ИначеЕсли ТипЗнч(ИсточникЭлементов)	= Тип("КоллекцияВариантовПользовательскогоПоляВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Отбор, ЭлементИсточник.Отбор);
		КонецЕсли;
		
		// В некоторых элементах коллекции необходимо заполнить другие коллекции
		Если ТипЗнч(ЭлементИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник, ЭлементИсточник);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") Тогда
			СкопироватьЭлементы(ЭлементПриемник.Варианты, ЭлементИсточник.Варианты);
		ИначеЕсли ТипЗнч(ЭлементИсточник) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
			ЭлементПриемник.УстановитьВыражениеДетальныхЗаписей (ЭлементИсточник.ПолучитьВыражениеДетальныхЗаписей());
			ЭлементПриемник.УстановитьВыражениеИтоговыхЗаписей(ЭлементИсточник.ПолучитьВыражениеИтоговыхЗаписей());
			ЭлементПриемник.УстановитьПредставлениеВыраженияДетальныхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияДетальныхЗаписей ());
			ЭлементПриемник.УстановитьПредставлениеВыраженияИтоговыхЗаписей(ЭлементИсточник.ПолучитьПредставлениеВыраженияИтоговыхЗаписей ());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Заполняет одну коллекцию элементов на основании другой
Процедура ЗаполнитьЭлементы(ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено) Экспорт
	
	Если ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		КоллекцияЗначений = ИсточникЗначения;
	Иначе
		КоллекцияЗначений = ИсточникЗначения.Элементы;
	КонецЕсли;
	
	Для каждого ЭлементИсточник Из КоллекцияЗначений Цикл
		Если ПервыйУровень = Неопределено Тогда
			ЭлементПриемник = ПриемникЗначения.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		Иначе
			ЭлементПриемник = ПервыйУровень.НайтиЗначениеПараметра(ЭлементИсточник.Параметр);
		КонецЕсли;
		Если ЭлементПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементПриемник.Значение) = Тип("СписокЗначений") Тогда
			ЭлементПриемник.Значение.Очистить();
			Если ТипЗнч(ЭлементИсточник.Значение) = Тип("СписокЗначений") Тогда
				ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник,, "Значение");
				Для каждого ЭлементСпискаИсточник Из ЭлементИсточник.Значение Цикл
					ЭлементПриемник.Значение.Добавить(ЭлементСпискаИсточник.Значение);
				КонецЦикла;
			Иначе
				ЭлементПриемник.Значение.Добавить(ЭлементИсточник.Значение);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ЭлементПриемник, ЭлементИсточник);
		КонецЕсли;
				
		Если ТипЗнч(ЭлементИсточник) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Если ЭлементИсточник.ЗначенияВложенныхПараметров.Количество() <> 0 Тогда
				ЗаполнитьЭлементы(ЭлементПриемник.ЗначенияВложенныхПараметров, ЭлементИсточник.ЗначенияВложенныхПараметров, ПриемникЗначения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает последний элемент структуры - группировку
Функция ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки = Истина) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	
	Если Структура.Количество() = 0 Тогда
		Возврат КомпоновщикНастроек.Настройки;
	КонецЕсли;
	
	Если Строки Тогда
		ИмяСтруктурыТаблицы = "Строки";
		ИмяСтруктурыДиаграммы = "Серии";
	Иначе
		ИмяСтруктурыТаблицы = "Колонки";
		ИмяСтруктурыДиаграммы = "Точки";
	КонецЕсли;
	
	Пока Истина Цикл
		ЭлементСтруктуры = Структура[0];
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыДиаграммы].Количество() > 0 Тогда
			Если ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура.Количество() = 0 Тогда
				Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры[ИмяСтруктурыДиаграммы][0].Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			  ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
				Прервать;
			КонецЕсли;
			Структура = ЭлементСтруктуры.Структура;
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыТаблицы];
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных")	Тогда
			Возврат ЭлементСтруктуры[ИмяСтруктурыДиаграммы];
		Иначе
			Возврат ЭлементСтруктуры;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Структура[0];
	
КонецФункции

Процедура СброситьФлажкиИспользования(ПараметрыДанных)
	
	Для Каждого ТекЭлемент Из ПараметрыДанных Цикл
		ТекЭлемент.Использование = Ложь;
		СброситьФлажкиИспользования(ТекЭлемент.ЗначенияВложенныхПараметров);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСвойстваПН(ЭлементПриемник, ЭлементИсточник) Экспорт

	СвойстваПН = "ИдентификаторПользовательскойНастройки, ПредставлениеПользовательскойНастройки, РежимОтображения";
	Контекст = Новый Структура(СвойстваПН);
	ЗаполнитьЗначенияСвойств(Контекст, ЭлементИсточник);
	
	Если Контекст.ИдентификаторПользовательскойНастройки = Неопределено Тогда
		Контекст.Удалить("ИдентификаторПользовательскойНастройки");
	КонецЕсли;
	Если Контекст.ПредставлениеПользовательскойНастройки = Неопределено Тогда
		Контекст.Удалить("ПредставлениеПользовательскойНастройки");
	КонецЕсли;
	Если Контекст.РежимОтображения = Неопределено Тогда
		Контекст.Удалить("РежимОтображения");
	КонецЕсли;
	
	Если Контекст.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭлементПриемник, Контекст);//только имеющиеся в источнике

КонецПроцедуры

#КонецОбласти

#Область СКД_Параметры

// Находит пользовательскую настройку по имени параметра.
//   Если пользовательская настройка не найдена (например,
//   если параметр не выведен в пользовательские настройки),
//   то получает общую настройку параметра.
//
// Параметры:
//   КомпоновщикНастроекКД - КомпоновщикНастроекКомпоновкиДанных - Компоновщик настроек.
//   ИмяПараметра          - Строка - Имя параметра.
//
// Возвращаемое значение:
//   ЗначениеПараметраНастроекКомпоновкиДанных - Пользовательская настройка параметра.
//   Неопределено - Если параметр не найден.
//
Функция ПолучитьПараметр(КомпоновщикНастроекКД, ИмяПараметра) Экспорт
	
	ПараметрКД = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроекКД.ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;
	
	Возврат КомпоновщикНастроекКД.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
	
КонецФункции

Функция ПолучитьЗначениеПараметра(ИсточникНастроек, Параметр) Экспорт

	Если ТипЗнч(ИсточникНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		
		Настройки = ИсточникНастроек.ПолучитьНастройки();
		ПараметрыДанных = Настройки.ПараметрыДанных;
		
	ИначеЕсли ТипЗнч(ИсточникНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		ПараметрыДанных = ИсточникНастроек.ПараметрыДанных;
	ИначеЕсли ТипЗнч(ИсточникНастроек) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		ПараметрыДанных = ИсточникНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрКД = ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	
	ЗначениеПараметра = ПараметрыДанных.НайтиЗначениеПараметра(ПараметрКД);
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		Возврат ЗначениеПараметра.Значение;
	КонецЕсли;

КонецФункции

// Устанавливает параметр данных компоновщика настроек
Функция УстановитьПараметр(ИсточникНастроек, ИмяПараметра, Значение) Экспорт
	
	Если ТипЗнч(ИсточникНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Настройки = ИсточникНастроек.Настройки;
	ИначеЕсли ТипЗнч(ИсточникНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		Настройки = ИсточникНастроек;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЗначениеПараметра = Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

Функция ДобавитьПараметр(ИсточникНастроек, Знач Параметр, Значение) Экспорт

	Если ТипЗнч(ИсточникНастроек) = Тип("ЗначенияПараметровДанныхКомпоновкиДанных") Тогда
		ПараметрыДанных = ИсточникНастроек;	
	ИначеЕсли ТипЗнч(ИсточникНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ПараметрыДанных = ИсточникНастроек.Настройки.ПараметрыДанных;
	ИначеЕсли ТипЗнч(ИсточникНастроек) = Тип("НастройкиКомпоновкиДанных") Тогда
		ПараметрыДанных = ИсточникНастроек.ПараметрыДанных;		
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	ЗначениеПараметра = ПараметрыДанных.Элементы.Добавить();
	
	ЗначениеПараметра.Параметр 		= ?(ТипЗнч(Параметр) = Тип("Строка"), Новый ПараметрКомпоновкиДанных(Параметр), Параметр);
	ЗначениеПараметра.Значение 		= Значение;
	ЗначениеПараметра.Использование = Истина;
	
	Возврат ЗначениеПараметра;

КонецФункции

// Функция - Добавить параметр в схему
//
// Параметры:
//  ИсточникПараметров	 - 	<СхемаКомпоновкиДанных,ПараметрыСхемыКомпоновкиДанных> - 
//  ИмяПараметра		 - <Строка>	 - 
//  Значение			 - 	 - 
// Возвращаемое значение:
//   - ПараметрСхемыКомпоновкиДанных
Функция ДобавитьПараметрВСхему(ИсточникПараметров, ИмяПараметра, Значение, ИспользованиеПараметраКД = Неопределено) Экспорт

	Если ТипЗнч(ИсточникПараметров) = Тип("СхемаКомпоновкиДанных") Тогда
		ПараметрыКД = ИсточникПараметров.Параметры;
	Иначе
		ПараметрыКД = ИсточникПараметров;
	КонецЕсли;
		
	ПараметрСКД = ПараметрыКД.Добавить();
	
	Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ПараметрСКД.ДоступенСписокЗначений = Истина;
	КонецЕсли;
	
	ПараметрСКД.Имя 			= ИмяПараметра;		
	ПараметрСКД.Значение 		= Значение;
	
	Возврат ПараметрСКД;

КонецФункции

Процедура УстановитьЗначенияПараметров(ПриемникЗначения, ИсточникЗначения)
	
	Для Каждого ТекЭлемент Из ИсточникЗначения Цикл
		Если ТекЭлемент.Использование Тогда
			
			Попытка
				ПриемникЗначения.УстановитьЗначениеПараметра(ТекЭлемент.параметр, ТекЭлемент.Значение);
			Исключение;
			КонецПопытки;
			УстановитьЗначенияПараметров(ПриемникЗначения, ТекЭлемент.ЗначенияВложенныхПараметров);
			
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СКД_МакетыКомпоновки

// Добавляет в макеты макета компоновки расшифровку для ресурсов
Процедура ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, КомпоновщикНастроек) Экспорт
	
	Для каждого Макет Из МакетКомпоновки.Макеты Цикл
		// Получим массив параметров расшифровки
		МассивВыраженийПолей = Новый Массив;
		Для каждого Параметр Из Макет.Параметры Цикл
			Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
				Если Не ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек) Тогда
					МассивВыраженийПолей.Добавить(ВыражениеПоля);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		// Установим параметры расшифровки у ресурсов
		Для каждого Параметр Из Макет.Параметры Цикл
			Если ТипЗнч(Параметр) <> Тип("ПараметрОбластиРасшифровкаКомпоновкиДанных") Тогда
				Продолжить;
			КонецЕсли;
			Ресурс = Ложь;
			Для каждого ВыражениеПоля Из Параметр.ВыраженияПолей Цикл
				Если ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек) Тогда
					Ресурс = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не Ресурс Тогда
				Продолжить;
			КонецЕсли;
			Для каждого ВыражениеПоля Из МассивВыраженийПолей Цикл
				Если Параметр.ВыраженияПолей.Найти(ВыражениеПоля.Поле) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НовоеВыражениеПоля = Параметр.ВыраженияПолей.Добавить();
				ЗаполнитьЗначенияСвойств(НовоеВыражениеПоля, ВыражениеПоля);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭтоВыражениеПоляПараметраРасшифровкиРесурс(ВыражениеПоля, КомпоновщикНастроек)
	
	ДоступныеРесурсы = ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек);
	ДостуныйРесурс = ДоступныеРесурсы.НайтиПоЗначению(Новый ПолеКомпоновкиДанных(ВыражениеПоля.Поле));
	Возврат ДостуныйРесурс <> Неопределено;
	
КонецФункции

#КонецОбласти

#Область СКД_НастройкиКомпоновщика

// Копирует настройки компоновки данных из одного компоновщика настроек в другой
Процедура СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник, НастройкиИсточник) Экспорт
	
	Если НастройкиИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных") Тогда
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл
			ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
			Если ЗначениеПараметра <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);
		Возврат;
	КонецЕсли;
	
	// Копирование настроек
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных") Тогда
		
		ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);
		СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		
		СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);
		СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);
		СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);
		ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);
		
	КонецЕсли;
	
	СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);
	СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);
	ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);
	
	// Копирование структуры
	Если ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных") Тогда
	 
	 	ЗаполнитьСвойстваПН(НастройкиПриемник.Структура, НастройкиИсточник.Структура);
			
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
	 
	 	ЗаполнитьСвойстваПН(НастройкиПриемник.Структура, НастройкиИсточник.Структура);
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Структура Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Структура.Добавить(ТипЗнч(ЭлементСтруктурыИсточник));
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных") Тогда
		
		ЗаполнитьСвойстваПН(НастройкиПриемник.Строки, НастройкиИсточник.Строки);
		ЗаполнитьСвойстваПН(НастройкиПриемник.Колонки, НастройкиИсточник.Колонки);
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Строки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Строки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Колонки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Колонки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		
		ЗаполнитьСвойстваПН(НастройкиПриемник.Серии, НастройкиИсточник.Серии);
		ЗаполнитьСвойстваПН(НастройкиПриемник.Точки, НастройкиИсточник.Точки);
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Серии Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Серии.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
		Для каждого ЭлементСтруктурыИсточник Из НастройкиИсточник.Точки Цикл
			ЭлементСтруктурыПриемник = НастройкиПриемник.Точки.Добавить();
			СкопироватьНастройкиКомпоновкиДанных(ЭлементСтруктурыПриемник, ЭлементСтруктурыИсточник);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СКД_Группировки

// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля
Функция ДобавитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);
	Если ЭлементСтруктуры = Неопределено 
	 ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
	   И Поле = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	Если Поле <> Неопределено Тогда
		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
	КонецЕсли;
	Возврат НоваяГруппировка;
	
КонецФункции

// Функция - Добавить группировку структуры
//
// Параметры:
//  ЭлементСтруктуры - ГруппировкаТаблицыКомпоновкиДанных,ГруппировкаДиаграммыКомпоновкиДанных,КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных,
//  					КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных,КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных,НастройкиКомпоновкиДанных
//  Поле			 - Строка,ПолеКомпоновкиДанных
// Возвращаемое значение:
//   - Группировка структуры 
Функция ДобавитьГруппировкуСтруктуры(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
			ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		НоваяГруппировка = ЭлементСтруктуры.Добавить();
	Иначе
		НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	КонецЕсли;
	
	НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	Если Поле <> Неопределено Тогда
		
		Если ТипЗнч(Поле) = Тип("Строка") Тогда
			Поле = Новый ПолеКомпоновкиДанных(Поле);
		КонецЕсли;

		ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Поле;
		
	КонецЕсли;
	
	Возврат НоваяГруппировка;
	
КонецФункции

// Функция удаляет из компоновщика настроек указанную в параметре группировку, если параметр не указан, удаляет все группировки
Функция УдалитьГруппировку(КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	Элемент = КомпоновщикНастроек.Настройки.Структура[0];
	Если ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Строки.Количество() > 0 Тогда
			Элемент = Элемент.Строки[0];
		ИначеЕсли Не Строки И Элемент.Колонки.Количество() > 0 Тогда
			Элемент = Элемент.Колонки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Элемент) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Строки И Элемент.Серии.Количество() > 0 Тогда
			Элемент = Элемент.Серии[0];
		ИначеЕсли Не Строки И Элемент.Точки.Количество() > 0 Тогда
			Элемент = Элемент.Точки[0];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	Если Поле = Неопределено Тогда
		КомпоновщикНастроек.Настройки.Структура.Очистить();
		Возврат Неопределено;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	Пока Истина Цикл
		Если Элемент.ПоляГруппировки.Элементы.Количество() > 0 
		   И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле Тогда
			Элемент.Родитель.Структура.Очистить();
			Прервать;
			Возврат Истина;
		ИначеЕсли Элемент.Структура.Количество() > 0 Тогда
			Элемент = Элемент.Структура[0];
		Иначе 
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает массив полей группировок всех группировок компоновщика настроек
Функция ПолучитьМассивПолейГруппировки(КомпоновщикНастроек, БезПользовательскихПолей = Ложь) Экспорт
	
	МассивПолей = Новый Массив;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Строки, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Колонки, МассивПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Серии, МассивПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Точки, МассивПолей, БезПользовательскихПолей);
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
                	МассивПолей.Добавить(ТекущееПолеГруппировки);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировкиВМассив(ЭлементСтруктуры.Структура, МассивПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает группировку по полю группировки
Функция ПолучитьЭлементСтруктурыПоПолюГруппировки(ПолеГруппировки, КомпоновщикНастроек) Экспорт
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	Возврат НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки);
	
КонецФункции

Функция НайтиЭлементСтруктурыПоПолюГруппировки(Структура, ПолеГруппировки) Экспорт
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			
			НовыйЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Строки, ПолеГруппировки);
			Если НовыйЭлементСтруктуры = Неопределено Тогда
				
				Элемент = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Колонки, ПолеГруппировки);
				Если Элемент <> Неопределено Тогда
					Возврат Элемент;
				КонецЕсли;
				
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			
			НайденныйЭлементСтруктуры = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Серии, ПолеГруппировки);
			Если НайденныйЭлементСтруктуры = Неопределено Тогда
				
				Элемент =  НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Точки, ПолеГруппировки);
				Если Элемент <> Неопределено Тогда
					Возврат Элемент;
				КонецЕсли;
				
			Иначе
				Возврат ЭлементСтруктуры;
			КонецЕсли;
			
		Иначе
			
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				Если ПолеГруппировки = ТекущееПолеГруппировки.Поле Тогда
					Возврат ЭлементСтруктуры;
				КонецЕсли;
			КонецЦикла;
			
			Элемент = НайтиЭлементСтруктурыПоПолюГруппировки(ЭлементСтруктуры.Структура, ПолеГруппировки);
			Если Элемент <> Неопределено Тогда
				Возврат Элемент;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает массив группировок компоновщика настроек
Функция ПолучитьМассивГруппировок(ЭлементСтруктуры, КомпоновщикНастроек, МассивГруппировок = Неопределено) Экспорт
	
	Если МассивГруппировок = Неопределено Тогда
		МассивГруппировок = Новый Массив;
	КонецЕсли;
	
	Для каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
		Если Не ПолеГруппировки.Использование Тогда
			Продолжить;
		КонецЕсли;
		ДоступноеПоле = ПолучитьДоступноеПоле(ПолеГруппировки.Поле, КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок);
		Если ДоступноеПоле = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		МассивГруппировок.Добавить(ДоступноеПоле.Заголовок);
	КонецЦикла;
	
	Если ЭлементСтруктуры.Структура.Количество() = 0 Тогда
		Возврат МассивГруппировок;
	Иначе
		Возврат ПолучитьМассивГруппировок(ЭлементСтруктуры.Структура[0], КомпоновщикНастроек, МассивГруппировок);
	КонецЕсли;
	
КонецФункции

// Возвращает список полей группировок всех группировок компоновщика настроек
Функция ПолучитьПоляГруппировок(КомпоновщикНастроек, БезПользовательскихПолей = Ложь, ДобавлятьДетальныеЗаписи = Ложь) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);
	
	Если ДобавлятьДетальныеЗаписи И ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено Тогда
		СписокПолей.Добавить("ДетальныеЗаписи", Нстр("ru = '<Детальные записи>'"));
	КонецЕсли;
	
	Возврат СписокПолей;
	
КонецФункции

Процедура ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Строки, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Колонки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Серии, СписокПолей, БезПользовательскихПолей);
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Точки, СписокПолей, БезПользовательскихПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Настройки.Структура, СписокПолей, БезПользовательскихПолей);
			
		Иначе
			Для каждого ТекущееПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
				ДоступноеПоле = ЭлементСтруктуры.Выбор.ДоступныеПоляВыбора.НайтиПоле(ТекущееПолеГруппировки.Поле);
				Если ДоступноеПоле <> Неопределено 
				  И (ДоступноеПоле.Родитель = Неопределено ИЛИ Не БезПользовательскихПолей ИЛИ ДоступноеПоле.Родитель.Поле <> Новый ПолеКомпоновкиДанных("UserFields")) Тогда
					СписокПолей.Добавить(Строка(ДоступноеПоле.Поле), ДоступноеПоле.Заголовок);
				КонецЕсли;
			КонецЦикла;
			ДобавитьПоляГруппировки(ЭлементСтруктуры.Структура, СписокПолей, БезПользовательскихПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает список всех группировок компоновщика настроек
Функция ПолучитьГруппировки(КомпоновщикНастроек) Экспорт
	
	СписокПолей = Новый СписокЗначений;
	
	Структура = КомпоновщикНастроек.Настройки.Структура;
	ДобавитьГруппировки(Структура, СписокПолей);
	Возврат СписокПолей;
	
КонецФункции

Процедура ДобавитьГруппировки(Структура, СписокПолей)
	
	Для каждого ЭлементСтруктуры Из Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Строки, СписокПолей);
			ДобавитьГруппировки(ЭлементСтруктуры.Колонки, СписокПолей);
		ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			ДобавитьГруппировки(ЭлементСтруктуры.Серии, СписокПолей);
			ДобавитьГруппировки(ЭлементСтруктуры.Точки, СписокПолей);
		Иначе
			СписокПолей.Добавить(ЭлементСтруктуры);
			ДобавитьГруппировки(ЭлементСтруктуры.Структура, СписокПолей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет в группировку автовыбранное поле
Функция ДобавитьАвтоВыбранноеПоле(Структура) Экспорт
	
	ВыбранноеПоле = Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Возврат ВыбранноеПоле;
	
КонецФункции

#КонецОбласти

#Область СКД_Отборы

Функция ПолучитьПоляОтборов(ЭлементСтруктуры, ТолькоИспользуемые = Истина) Экспорт 
	
	ЭлементыОтбора = ТиповыеОтчетыУХ.ПолучитьЭлементыОтбора(ЭлементСтруктуры, Ложь);
	
	ПоляОтборов = Новый Массив;
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТолькоИспользуемые И Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементОтбора.ЛевоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ПоляОтборов.Добавить(ЭлементОтбора.ЛевоеЗначение);	
		ИначеЕсли ТипЗнч(ЭлементОтбора.ПравоеЗначение) = Тип("ПолеКомпоновкиДанных") Тогда
			ПоляОтборов.Добавить(ЭлементОтбора.ПравоеЗначение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ПоляОтборов;

КонецФункции

// Возвращает массив элементов отбора или групп элементов отбора
Функция ПолучитьЭлементыОтбора(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	
	ДобавитьЭлементыОтбораВМассив(ЭлементСтруктуры.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
Функция УдалитьОтбор(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
		
	Если Поле = Неопределено Тогда
		Отбор.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ПолеУдалено = Ложь;
	Элементы = ПолучитьЭлементыОтбора(Отбор);
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ЛевоеЗначение = Поле Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУдаляемыхЭлементов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтбор(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, ПроверятьДоступныеПоляОтбора = Истина) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если (ПроверятьДоступныеПоляОтбора = Истина) И (Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле) = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
			ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе	
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;		
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если Элемент.ЛевоеЗначение = Поле Тогда
				ЭлементОтбора = Элемент;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Поле;
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтборПоля(ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, ПроверятьДоступныеПоляОтбора = Ложь, ПроверятьСуществующиеОтборы = Ложь) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ОтборКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры;	
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;	
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Отбор;		
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	Если (ПроверятьДоступныеПоляОтбора = Истина) И (Отбор.ДоступныеПоляОтбора.НайтиПоле(Поле) = Неопределено) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		
		ТипЗначения = ТипЗнч(Значение);
		Если ТипЗначения = Тип("СписокЗначений") Или ТипЗначения = Тип("Массив") Тогда
		    ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		Иначе	
			ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверятьСуществующиеОтборы = Истина Тогда
	
		ЭлементОтбора = Неопределено;
	
		Для Каждого Элемент Из Отбор.Элементы Цикл
			Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если Элемент.ЛевоеЗначение = Поле Тогда
					ЭлементОтбора = Элемент;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если ЭлементОтбора = Неопределено Тогда
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Поле;
		КонецЕсли;
		
	Иначе
		
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Поле;
		
	КонецЕсли;
		
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции

Процедура УдалитьДублиОтбора(КомпоновщикНастроек) Экспорт
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы;
		
	Количество = Отбор.Количество();
	Для Индекс = 1 По Количество Цикл
		ЭлементСКонца = Отбор[Количество - Индекс];
		Для ИндексВнутр = 0 По Количество - Индекс - 1 Цикл
			ЭлементВнутр = Отбор[ИндексВнутр];
			Если ТипЗнч(ЭлементВнутр) = Тип("ЭлементОтбораКомпоновкиДанных")
			   И ТипЗнч(ЭлементСКонца) = Тип("ЭлементОтбораКомпоновкиДанных")
			   И ЭлементВнутр.ЛевоеЗначение = ЭлементСКонца.ЛевоеЗначение
			   И ЭлементВнутр.ВидСравнения = ЭлементСКонца.ВидСравнения
			   И ЭлементВнутр.Использование = ЭлементСКонца.Использование
			   И ПравыеЗначенияОтборовСовпадают(ЭлементВнутр.ПравоеЗначение, ЭлементСКонца.ПравоеЗначение)
		       И ЭлементВнутр.Применение = ЭлементСКонца.Применение Тогда
				Отбор.Удалить(ЭлементСКонца);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	      	
КонецПроцедуры

Функция ПравыеЗначенияОтборовСовпадают(Значение1, Значение2)
	
	Если ТипЗнч(Значение1) <> ТипЗнч(Значение2) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(Значение1) <> Тип("СписокЗначений") Тогда
		Возврат Значение1 = Значение2;
 	ИначеЕсли ТипЗнч(Значение1) = Тип("СписокЗначений") Тогда
		Если Значение1.Количество() <> Значение2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		Совпадают = Истина;
		Для каждого Элемент1 Из Значение1 Цикл
			Если Значение2.НайтиПоЗначению(Элемент1.Значение) = Неопределено Тогда
				Совпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Для каждого Элемент2 Из Значение2 Цикл
			Если Значение1.НайтиПоЗначению(Элемент2.Значение) = Неопределено Тогда
				Совпадают = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Возврат Совпадают;
	КонецЕсли;
	Возврат Ложь;
	
КонецФункции

Функция ДобавитьИзменитьЭлементОтбора(ОбластьПоискаДобавления,
								ИмяПоля = Неопределено,
								Представление = Неопределено,
								ПравоеЗначение = Неопределено,
								ВидСравнения = Неопределено,
								Использование = Неопределено,
								РежимОтображения = Неопределено,
								ИдентификаторПользовательскойНастройки = Неопределено) Экспорт
								
	КоличествоИзмененных = ОбщегоНазначенияКлиентСервер
								.ИзменитьЭлементыОтбора(
									ОбластьПоискаДобавления, 
									ИмяПоля, 
									Представление, 
									ПравоеЗначение, 
									ВидСравнения, 
									Использование, 
									РежимОтображения, 
									ИдентификаторПользовательскойНастройки
								);

	Если КоличествоИзмененных = 0 Тогда
		ОбщегоНазначенияКлиентСервер
			.ДобавитьЭлементКомпоновки(
				ОбластьПоискаДобавления, 
				ИмяПоля, 				
				ВидСравнения, 
				ПравоеЗначение, 				
				Представление, 
				Использование, 
				РежимОтображения, 
				ИдентификаторПользовательскойНастройки
			);
	КонецЕсли;							
								
КонецФункции

#КонецОбласти

#Область СКД_ПоляПорядка

Функция ДобавитьПорядок(ЭлементСтруктуры, ПолеКД, ПоВозрастанию = Истина) Экспорт

	ЭлементПорядка = ЭлементСтруктуры.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	
	ЭлементПорядка.Поле = ?(ТипЗнч(ПолеКД) = Тип("Строка"), Новый ПолеКомпоновкиДанных(ПолеКД), ПолеКД);	
	ЭлементПорядка.ТипУпорядочивания = ?(ПоВозрастанию, НаправлениеСортировкиКомпоновкиДанных.Возр, НаправлениеСортировкиКомпоновкиДанных.Убыв);
	ЭлементПорядка.Использование = Истина;
	
	Возврат ЭлементПорядка;

КонецФункции

#КонецОбласти

#Область СКД_ПользовательскиеНастройки

// Вспомогательная функция, для указанного компоновщика и пользовательских настроек устанавливает отбор по имени поля и его значению.
// Функция ищет в пользовательских настройках элементы отбора, если находит, то проверяет их наличие в компоновщике, если и там они есть,
// функция устанавливает отбор по переданному имени и значению. Если такого поля не найдено, то в элемент пользовательских настроек
// "ОтборКомпоновкиДанных" добавляет новый отбор.
// ВАЖНО: У пользовательских настроек должен быть элемент "ОтборКомпоновкиДанных", чтобы отбор устанавливался по полям, отсутствующим в
//	пользовательских настройках отбора компоновщика.
// Параметры:
//	Компоновщик - КомпоновщикНастроекКомпоновкиДанных, для поиска элементов пользовательскогго отбора.
//	Настройки - ПользовательскиеНастройкиКомпоновкиДанных, для установки элементов отбора.
//	Имя - Строка, левое значение отбора.
//	Значение - Произвольное значение, правое значение отбора.
//
Процедура УстановитьЗначениеПользовательскойНастройки(Компоновщик, Настройки, Имя, Значение) Экспорт
	
	Отбор = Компоновщик.Настройки.Отбор.Элементы;
	КоллекцияЭлементовОтбора = Неопределено;
	
	флНайденЭлемент_ = Ложь;
	Для Каждого Элемент Из Настройки.Элементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ОтборКомпоновкиДанных") Тогда
			
			КоллекцияЭлементовОтбора = Элемент.Элементы;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если Строка(Элемент.Параметр) = Имя Тогда
				флНайденЭлемент_ = Истина;
                Элемент.Значение = Значение;
                Элемент.Использование = Истина;
				Прервать;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ЭлементПроверки = Элемент;
			Если ЗначениеЗаполнено(Элемент.ИдентификаторПользовательскойНастройки) Тогда
				ЭлементПроверки = ПолучитьЭлементНастройкиПоИдентификатору(Отбор, Элемент.ИдентификаторПользовательскойНастройки);
			КонецЕсли;
			
			флНайденЭлемент_ = (Строка(ЭлементПроверки.ЛевоеЗначение) = Имя);
			
			Если флНайденЭлемент_ = Истина Тогда
				
				Элемент.ПравоеЗначение = Значение;
				Элемент.ВидСравнения = ?(ТипЗнч(Значение)=Тип("Массив"), ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
                Элемент.Использование = Истина;
				
				Прервать;
				
			КонецЕсли;
			
        КонецЕсли;
	КонецЦикла;
	
	Если НЕ флНайденЭлемент_ И КоллекцияЭлементовОтбора <> Неопределено Тогда
		
		Элемент = КоллекцияЭлементовОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Имя);
		Элемент.ПравоеЗначение = Значение;
		Элемент.ВидСравнения = ?(ТипЗнч(Значение)=Тип("Массив"), ВидСравненияКомпоновкиДанных.ВСписке, ВидСравненияКомпоновкиДанных.Равно);
		Элемент.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Для указанного отчета получает пользовательские настройки, заполняет их по параметрам отбора.
// Параметры:
//	ИмяОтчета - Строка, имя отчета, как оно заданно в конфигураторе.
//	ПараметрыОтбора - Структура, имена полей отбора и их значения. Если значение - массив, то условие сравнения в отборе устанавливается в "ВСписке".
// Возвращает - ПользовательскиеНастройкиКомпоновкиДанных.
//
Функция ПолучитьПользовательскиеНастройкиОтчета(ИмяОтчета, ПараметрыОтбора) Экспорт
	
	КомпоновщикНастроек = Отчеты[ИмяОтчета].Создать().КомпоновщикНастроек;
    ПользовательскиеНастройки = КомпоновщикНастроек.ПользовательскиеНастройки;
	
	Для Каждого ПараметрОтбора Из ПараметрыОтбора Цикл
		УстановитьЗначениеПользовательскойНастройки(КомпоновщикНастроек, ПользовательскиеНастройки, ПараметрОтбора.Ключ, ПараметрОтбора.Значение);
	КонецЦикла;
	
	Возврат ПользовательскиеНастройки;
	
КонецФункции

Функция ПолучитьПользовательскуюНастройку(ЭлементНастроек, ПользовательскиеНастройки) Экспорт

	Если Не ЗначениеЗаполнено(ЭлементНастроек.ИдентификаторПользовательскойНастройки) Тогда		
		Возврат ЭлементНастроек; 
	КонецЕсли;
	
	ЭлементПН = ПользовательскиеНастройки.Элементы.Найти(ЭлементНастроек.ИдентификаторПользовательскойНастройки);
	
	Возврат ?(ЭлементПН = Неопределено, ЭлементНастроек, ЭлементПН);
	
КонецФункции

Функция ПолучитьЭлементНастройкиПоИдентификатору(ЭлементНастроек, ИдентификаторПользовательскойНастройки)

	Результат = Неопределено;
	
	Для Каждого ЭлементДляПоиска Из ЭлементНастроек Цикл
		
		Если ЭлементДляПоиска.ИдентификаторПользовательскойНастройки = ИдентификаторПользовательскойНастройки Тогда
			Результат = ЭлементДляПоиска;
			Прервать;
		КонецЕсли;
		
		Если ТипЗнч(ЭлементДляПоиска) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Результат = ПолучитьЭлементНастройкиПоИдентификатору(ЭлементДляПоиска.Элементы, ИдентификаторПользовательскойНастройки);
			Если Результат <> Неопределено Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция УстановитьЗначенияПолей(Компоновщик, ЗначенияПолейОтбора) Экспорт

	ПользовательскиеНастройки = Компоновщик.ПользовательскиеНастройки;
	ПараметрыКД = Компоновщик.Настройки.ПараметрыДанных;
	ОтборыКД = Компоновщик.Настройки.Отбор;
	
	Для Каждого КлючИЗначение Из ЗначенияПолейОтбора Цикл
		
		Имя = КлючИЗначение.Ключ;
		Значение = ПолучитьЗначениеОтбора(КлючИЗначение.Значение);
		
		ПараметрКД = ПараметрыКД.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(Имя));
		Если (ТипЗнч(ПараметрКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")) 
			И (ПараметрКД.РежимОтображения <> РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный) Тогда
			
			ПараметрКД.Использование    = Истина;			
			ПараметрКД.Значение         = Значение;
			
			Если ЗначениеЗаполнено(ПараметрКД.ИдентификаторПользовательскойНастройки) Тогда
				
				ЗначениеПН = ПользовательскиеНастройки.Элементы.Найти(ПараметрКД.ИдентификаторПользовательскойНастройки);
				Если ЗначениеПН <> Неопределено Тогда
					ЗначениеПН.Значение = Значение;	
				КонецЕсли;
				
			КонецЕсли;
			
			Продолжить;		
			
		КонецЕсли;
		
		//Если НоваяСКД.НаборыДанных[0].Поля.Найти(СтрРазделить(Имя, ".")[0]) = Неопределено Тогда
		//	Продолжить;
		//КонецЕсли;
		
		ВидСравненияКД = ПолучитьВидСравненияКД(Значение);
		ДобавитьИзменитьЭлементОтбора(ОтборыКД, Имя, , Значение, ВидСравненияКД, Истина);
		
		ЭлементыОтбора = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборыКД, Имя);
		Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
			
			Если Не ЗначениеЗаполнено(ЭлементОтбора.ИдентификаторПользовательскойНастройки) Тогда				
				Продолжить;
			КонецЕсли;
			
			ЭлементОтбораПН = ПользовательскиеНастройки.Элементы.Найти(ЭлементОтбора.ИдентификаторПользовательскойНастройки);
			Если ЭлементОтбораПН = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ЭлементОтбораПН.ПравоеЗначение = Значение;
			ЭлементОтбораПН.Использование = Истина;
			ЭлементОтбораПН.ВидСравнения = ВидСравненияКД;
			
		КонецЦикла;
		
	КонецЦикла;

КонецФункции

Функция ПолучитьВидСравненияКД(Значение)
	
	Если ТипЗнч(Значение) = Тип("Структура") Тогда
		ВидСравненияКД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Значение, "ВидСравнения", ВидСравненияКомпоновкиДанных.Равно);
		Значение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Значение, "ПравоеЗначение");
	ИначеЕсли ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
		ВидСравненияКД = ВидСравненияКомпоновкиДанных.ВСписке;
	Иначе
		ВидСравненияКД = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	Возврат ВидСравненияКД;

КонецФункции

Функция ПолучитьЗначениеОтбора(ЗначениеОтбора)
	
	Результат = ЗначениеОтбора;
	
	Если ТипЗнч(Результат) = Тип("ФиксированныйМассив") Тогда
		Результат = Новый Массив(Результат);
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		
		Список = Новый СписокЗначений;
		Список.ЗагрузитьЗначения(Результат);
		
		Результат = Список;
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьЭлементОтбора(ИмяПоля, Настройки, ПользовательскиеНастройки = Неопределено) Экспорт

	Отборы = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(Настройки.Отбор, ИмяПоля);
	Для каждого Отбор Из Отборы Цикл
		Если ЗначениеЗаполнено(Отбор.ИдентификаторПользовательскойНастройки) Тогда
			Возврат ПолучитьПользовательскуюНастройку(
							Отбор, ПользовательскиеНастройки);			
		Иначе 
			Возврат	Отбор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ЗначениеПараметраПользовательскихНастроек(ПользовательскиеНастройки, Знач ПараметрСКД) Экспорт

	Если ТипЗнч(ПараметрСКД) = Тип("Строка") Тогда
		ПараметрСКД = Новый ПараметрКомпоновкиДанных(ПараметрСКД);
	КонецЕсли;
	
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройки.Элементы Цикл
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = ПараметрСКД Тогда
			Возврат ПользовательскаяНастройка;
		КонецЕсли;
	КонецЦикла;

КонецФункции

#КонецОбласти

#Область СКД_ПоляИтогов

// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)
Функция ДобавитьПолеИтога(СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено) Экспорт
	
	Если Выражение = Неопределено Тогда
		Выражение = "Сумма(" + ПутьКДанным + ")";
	КонецЕсли;
	
	ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();
	ПолеИтога.ПутьКДанным = ПутьКДанным;
	ПолеИтога.Выражение = Выражение;
	
	Возврат ПолеИтога;
	
КонецФункции

Функция ДобавитьПолеИтогаСКД(СКД, ПутьКДанным, Выражение, Группировки = Неопределено) Экспорт
	
	НовоеПоле = СКД.ПоляИтога.Добавить();
	НовоеПоле.ПутьКДанным = ПутьКДанным;
	НовоеПоле.Выражение = Выражение;
	
	Если Группировки <> Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НовоеПоле.Группировки, Группировки);		
	КонецЕсли;	

КонецФункции

#КонецОбласти

#Область СКД_ВыбранныеПоля

// Удаляет указанное выбранное поле из компоновщика настроек, если поле не указано - очищает все поля
Функция УдалитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если Поле = Неопределено Тогда
		ВыбранныеПоля.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ПолеУдалено = Ложь;
	Элементы = ПолучитьВыбранныеПоля(ВыбранныеПоля);
	Для каждого Элемент Из Элементы Цикл
		Если Элемент.Использование И Элемент.Поле = Поле Тогда
			Элемент.Использование = Ложь;
			ПолеУдалено = Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат ПолеУдалено;
	
КонецФункции

// Функция добавляет выбранное поле в набор выбранных полей
Функция ДобавитьВыбранноеПоле(ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ВыбранноеПоле.Поле = Поле;
	Если Заголовок <> Неопределено Тогда
		ВыбранноеПоле.Заголовок = Заголовок;
	КонецЕсли;
	Возврат ВыбранноеПоле;
	
КонецФункции

// Функция добавляет выбранное поле в набор выбранных полей
Функция ДобавитьВыбранныеПоля(ЭлементСтруктуры, СоответствиеЗаголовокПоле) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Элементы = ВыбранныеПоля.Элементы;
	ТипПоле = Тип("ВыбранноеПолеКомпоновкиДанных");
	
	Для каждого ЗаголовокПоле Из СоответствиеЗаголовокПоле Цикл
	
		Если ЗаголовокПоле.Значение = Неопределено Тогда
			
			ВыбранноеПоле = Элементы.Добавить(ТипПоле);
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ЗаголовокПоле.Ключ);
			//ВыбранноеПоле.Заголовок = ЗаголовокПоле.Ключ;
			
		ИначеЕсли ТипЗнч(ЗаголовокПоле.Значение) = Тип("Строка") Тогда 
			
			ВыбранноеПоле = Элементы.Добавить(ТипПоле);
			ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(ЗаголовокПоле.Значение);
			//ВыбранноеПоле.Заголовок = ЗаголовокПоле.Ключ;
			
		Иначе
			
			ВыбранноеПоле = Элементы.Добавить(ТипПоле);
			ВыбранноеПоле.Поле = ЗаголовокПоле.Значение;
			//ВыбранноеПоле.Заголовок = ЗаголовокПоле.Ключ;
						
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ВыбранныеПоля;
	
КонецФункции

Процедура ДобавитьВыбранныеПоляВМассив(ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь)
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	Для каждого Элемент Из ЭлементСтруктуры Цикл
		Если ТипЗнч(Элемент) = Тип("АвтоВыбранноеПолеКомпоновкиДанных") Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(Элемент) = Тип("ГруппаВыбранныхПолейКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьВыбранныеПоляВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив выбранных полей или групп выбранных полей
Функция ПолучитьВыбранныеПоля(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
	 ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
		ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;
	Иначе
		ВыбранныеПоля = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	ДобавитьВыбранныеПоляВМассив(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Функция ДобавитьГруппуПолейВыбора(ЭлементСтруктуры, ЗаголовокГруппы, СвойстваГруппы = Неопределено, ВыбранныеПоля = Неопределено) Экспорт

	НоваяГруппа = ЭлементСтруктуры.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	
	НоваяГруппа.Заголовок 		= ЗаголовокГруппы;
	НоваяГруппа.Использование 	= Истина;
	
	Если СвойстваГруппы <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(НоваяГруппа, СвойстваГруппы);
	КонецЕсли;
	
	Если ВыбранныеПоля <> Неопределено Тогда
		ТиповыеОтчетыУХ.ДобавитьВыбранныеПоля(НоваяГруппа, ВыбранныеПоля);
	КонецЕсли;	
	
	Возврат НоваяГруппа;

КонецФункции

Процедура УстановитьИспользованиеВыбранныхПолей(КомпоновщикНастроек, ИменаПолейДляУстановки, Использование) Экспорт
	
	ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	УстановитьИспользованиеПолей(ВыбранныеПоля, ИменаПолейДляУстановки, Использование);
	
КонецПроцедуры

Процедура УстановитьИспользованиеПолей(КоллекцияВыбранныхПолей, ИменаПолейДляУстановки, Использование) Экспорт
	
	Для каждого ВыбранноеПоле Из КоллекцияВыбранныхПолей Цикл
		Если ИменаПолейДляУстановки.Найти(Строка(ВыбранноеПоле.Поле)) <> Неопределено Тогда
			ВыбранноеПоле.Использование = Использование;
		КонецЕсли;	
	КонецЦикла
	
КонецПроцедуры


#КонецОбласти

#Область СКД_ВычисляемыеПоля

Функция ДобавитьВычисляемоеПоле(СхемаКомпоновкиДанных, ПутьКДанным, Выражение, Заголовок = Неопределено, ТипЗначения = Неопределено) Экспорт

	ВычисляемоеПоле = СхемаКомпоновкиДанных.ВычисляемыеПоля.Добавить();
	ВычисляемоеПоле.ПутьКДанным = ПутьКДанным;
	ВычисляемоеПоле.Выражение = Выражение;
	ВычисляемоеПоле.Заголовок = ?(Заголовок = Неопределено, ВычисляемоеПоле.ПутьКДанным, Заголовок);
	
	Если ТипЗначения <> Неопределено Тогда	
		ВычисляемоеПоле.ТипЗначения = ТипЗначения;	
	КонецЕсли;
	
	Возврат ВычисляемоеПоле;

КонецФункции


#КонецОбласти

#Область СКД_ПараметрыВывода

// Устанавливает параметр вывода компоновщика настроек
Функция УстановитьПараметрВывода(КомпоновщикНастроек, ИмяПараметра, Значение) Экспорт
	
	ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));
	Если ЗначениеПараметра = Неопределено Тогда
		Возврат Неопределено;
	Иначе
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Значение;
		Возврат ЗначениеПараметра;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СКД_ПользовательскиеПоля

// Функция - Добавить пользовательское поле выражение
//
// Параметры:
//  ЭлементСтруктуры			 - Пользовательские поля СКД
//  Заголовок					 - Заголовок отображения
//  ВыражениеДетальныхЗаписей	 - Выражение детальных записей
//  ВыражениеИтоговыхЗаписей	 - Выражение итоговых записей
// Возвращаемое значение:
//   - Пользовательское поле
Функция ДобавитьПользовательскоеПолеВыражение(ЭлементСтруктуры, 
												Заголовок, 
												ВыражениеДетальныхЗаписей = Неопределено, 
												ВыражениеИтоговыхЗаписей = Неопределено) Экспорт
	
	ПолеВыражение = ЭлементСтруктуры.Элементы.Добавить(Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных"));
	ПолеВыражение.Заголовок = Заголовок;
	
	Если ВыражениеДетальныхЗаписей <> Неопределено Тогда
		ПолеВыражение.УстановитьВыражениеДетальныхЗаписей(ВыражениеДетальныхЗаписей);
	КонецЕсли;
	
	Если ВыражениеИтоговыхЗаписей <> Неопределено Тогда
		ПолеВыражение.УстановитьВыражениеИтоговыхЗаписей(ВыражениеИтоговыхЗаписей);
	КонецЕсли;
		
	Возврат ПолеВыражение;

КонецФункции

// Процедура - Переименовать колонки пользовательских полей
//	переименовывает колонки коллекции значений из системных наименований в заголовки
Процедура ПереименоватьКолонкиПользовательскихПолей(КоллекцияЗначений, ЗаголовкиПолей) Экспорт

	Для каждого Колонка Из КоллекцияЗначений.Колонки Цикл
	
		Если Колонка.Имя = Колонка.Заголовок Тогда
			Продолжить;		
		КонецЕсли;
		
		Если ЗаголовкиПолей.Найти(Колонка.Заголовок) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Колонка.Имя = Колонка.Заголовок;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СКД_ДоступныеЭлементы

Функция ПолучитьДоступноеПоле(Знач Поле, ОбластьПоиска) Экспорт
	
	Возврат ОбластьПоиска.НайтиПоле(Поле);
	
КонецФункции

// Возвращает доступное поле по полю компоновки
Функция ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ПолеКомпоновкиДанных, ОбластьПоиска) Экспорт
	
	Если ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка") Тогда
		ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);
	Иначе
		ПолеПоиска = ПолеКомпоновкиДанных;
	КонецЕсли;
	
	Если ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
	 ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		Возврат ОбластьПоиска.Настройки.ДоступныеПоляВыбора.НайтиПоле(ПолеПоиска);
	Иначе
		Возврат ОбластьПоиска.НайтиПоле(ПолеПоиска);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СКД_Ресурсы

// Возвращает список доступных для выбора ресурсов
Функция ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение = Истина, ВключаяПользовательскиеПоляВыбор = Истина) Экспорт
	
	СписокРесурсов = Новый СписокЗначений;
	ДобавитьРесурсы(СписокРесурсов, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);
	Возврат СписокРесурсов;
	
КонецФункции

Функция ДобавитьРесурсы(СписокРесурсов, КоллекцияПолей, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор)
	
	Для каждого ДоступноеПоле Из КоллекцияПолей.Элементы Цикл
		Если ДоступноеПоле.Ресурс Тогда
			ПользовательскоеПоле = НайтиПользовательскоеПоле(КомпоновщикНастроек, ДоступноеПоле.Поле);
			Если ПользовательскоеПоле <> Неопределено Тогда
				Если Не (ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") И ВключаяПользовательскиеПоляВыражение
					ИЛИ ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных") И ВключаяПользовательскиеПоляВыбор) Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			СписокРесурсов.Добавить(ДоступноеПоле.Поле, ДоступноеПоле.Заголовок);
		КонецЕсли;
		Если ДоступноеПоле.Папка Тогда
			ДобавитьРесурсы(СписокРесурсов, ДоступноеПоле, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Возвращает пользовательское поле по полю компоновки данных
Функция НайтиПользовательскоеПоле(КомпоновщикНастроек, ПолеКомпоновкиДанных) Экспорт
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ПользовательскоеПоле.ПутьКДанным = Строка(ПолеКомпоновкиДанных) Тогда
			Возврат ПользовательскоеПоле;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции


#КонецОбласти

#КонецОбласти

#Область СКД_ПодготовкаВыполнение

#Область СКД_НаборыДанных

Функция ДобавитьПапкуПолейНабораДанных(ПоляНабораДанных, ПутьКДанным, ЗаголовокПоля = Неопределено) Экспорт

	ПапкаПолей = ПоляНабораДанных.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));	
	ПапкаПолей.ПутьКДанным = ПутьКДанным;
	ПапкаПолей.Заголовок = ?(ЗаголовокПоля = Неопределено, ПутьКДанным, ЗаголовокПоля);
	
	Возврат ПапкаПолей;
	
КонецФункции

// Функция добавляет в схему компоновки источник данных с типом "Local"
Функция ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных, ИмяИсточникаДанных = Неопределено) Экспорт
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = ?(ИмяИсточникаДанных = Неопределено, "ИсточникДанных1", ИмяИсточникаДанных);
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	Возврат ИсточникДанных;
	
КонецФункции

// Функция добавляет набор данных - запрос в указанную в параметре коллекцию наборов данных
Функция ДобавитьНаборДанныхЗапрос(НаборыДанных, ИсточникДанных, ИмяНабораДанных = Неопределено) Экспорт
	
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ?(ИмяНабораДанных = Неопределено, "НаборДанных1", ИмяНабораДанных);
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	
	Возврат НаборДанных;
	
КонецФункции

// Функция добавляет набор данных - объединение в указанную в параметре коллекцию наборов данных
Функция ДобавитьНаборДанныхОбъединение(НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1") Экспорт
	
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
	НаборДанных.Имя = ИмяНабораДанных;
	Возврат НаборДанных;
	
КонецФункции

// Функция добавляет набор данных - объединение в указанную в параметре коллекцию наборов данных
Функция ДобавитьНаборДанныхОбъект(НаборыДанных, ИсточникДанных = "ИсточникДанных1", ИмяНабораДанных = "НаборДанных1", ИмяОбъекта = "ОбъектИсточник") Экспорт
	
	НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	
	НаборДанных.ИсточникДанных	= ИсточникДанных;
	НаборДанных.Имя 			= ИмяНабораДанных;	
	НаборДанных.ИмяОбъекта     	= ИмяОбъекта;	

	Возврат НаборДанных;
	
КонецФункции

#КонецОбласти

#Область СКД_ПоляНабораДанных

// Добавляет в набор данных поле набора данных
Функция ДобавитьПолеНабораДанных(НаборДанных, Поле, Знач Заголовок = Неопределено, Знач ПутьКДанным = Неопределено, Знач ТипЗначения = Неопределено) Экспорт
	
	Если Заголовок = Неопределено Тогда
		Заголовок = Поле;
	КонецЕсли;
	
	Если ПутьКДанным = Неопределено Тогда
		ПутьКДанным = Поле;
	КонецЕсли;
		
	ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	
	ПолеНабораДанных.Поле        = Поле;
	ПолеНабораДанных.Заголовок   = Заголовок;
	ПолеНабораДанных.ПутьКДанным = ПутьКДанным;
	
	Если ТипЗначения <> Неопределено Тогда
		ПолеНабораДанных.ТипЗначения = ТипЗначения;
	КонецЕсли;
	
	Возврат ПолеНабораДанных;
	
КонецФункции

// Добавляет в набор данных поля периода Период секунда, минута, час ....
Функция ДобавитьПоляПериодаВНаборДанных(НаборДанных) Экспорт
	
	СписокПериодов = Новый СписокЗначений;
	СписокПериодов.Добавить("ПериодСекунда",   Нстр("ru = 'Период секунда'"));
	СписокПериодов.Добавить("ПериодМинута",    Нстр("ru = 'Период минута'"));
	СписокПериодов.Добавить("ПериодЧас",       Нстр("ru = 'Период час'"));
	СписокПериодов.Добавить("ПериодДень",      Нстр("ru = 'Период день'"));
	СписокПериодов.Добавить("ПериодНеделя",    Нстр("ru = 'Период неделя'"));
	СписокПериодов.Добавить("ПериодДекада",    Нстр("ru = 'Период декада'"));
	СписокПериодов.Добавить("ПериодМесяц",     Нстр("ru = 'Период месяц'"));
	СписокПериодов.Добавить("ПериодКвартал",   Нстр("ru = 'Период квартал'"));
	СписокПериодов.Добавить("ПериодПолугодие", Нстр("ru = 'Период полугодие'"));
	СписокПериодов.Добавить("ПериодГод",       Нстр("ru = 'Период год'"));
	
	ИмяПапки = "Периоды";
	СписокПолейНабораДанных = Новый СписокЗначений;
	ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));
	ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;
	ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;
	
	Для каждого Период Из СписокПериодов Цикл
		ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		ПолеНабораДанных.Поле        = Период.Значение;
		ПолеНабораДанных.Заголовок   = Период.Представление;
		ПолеНабораДанных.ПутьКДанным = ИмяПапки + "." + Период.Значение;
		СписокПолейНабораДанных.Добавить(ПолеНабораДанных);
	КонецЦикла;
	
	Возврат СписокПолейНабораДанных;
	
КонецФункции

Функция ДобавитьПолеИзмерение(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения) Экспорт
	
	ПолеНД = ТиповыеОтчетыУХ.ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения);
	
	ПолеНД.Роль.Измерение = Истина;
	ПолеНД.Роль.ИгнорироватьЗначенияNULL = Истина;
	
	ВыражениеПредставления = "Выбор Когда Не ЗначениеЗаполнено(%1) Тогда ""<...>"" Иначе %1Представление Конец";
	ПолеНД.ВыражениеПредставления = СтрШаблон(ВыражениеПредставления, Поле);
	
	Возврат ПолеНД;

КонецФункции

Функция ДобавитьПолеРесурс(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения, ТекСуффикс) Экспорт
	
	ПолеНД = ТиповыеОтчетыУХ.ДобавитьПолеНабораДанных(НаборДанных, Поле + ТекСуффикс.Ключ, Заголовок, ПутьКДанным, ТипЗначения);
	
	ПолеНД.Роль.Остаток 					= Истина;
	ПолеНД.Роль.ГруппаОстатка 				= Поле;
	ПолеНД.Роль.ТипОстатка 					= ТекСуффикс.Значение.ТипОстатка;
	ПолеНД.Роль.ТипБухгалтерскогоОстатка 	= ТекСуффикс.Значение.ТипБухгалтерскогоОстатка;
	ПолеНД.Роль.ПолеСчета 					= "Счет";

	Возврат ПолеНД; 
	
КонецФункции

Функция ДобавитьПолеСчет(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения) Экспорт

	ПолеНД = ТиповыеОтчетыУХ.ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения);
	
	ПолеНД.Роль.Счет = Истина;
	ПолеНД.Роль.ВыражениеВидаСчета = "Счет.Вид";
	
	Возврат ПолеНД;

КонецФункции

Функция ДобавитьПолеПериод(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения, НомерПериода = 1) Экспорт

	ПолеНД = ТиповыеОтчетыУХ.ДобавитьПолеНабораДанных(НаборДанных, Поле, Заголовок, ПутьКДанным, ТипЗначения);
	
	ПолеНД.Роль.НомерПериода = НомерПериода;
	ПолеНД.Роль.ВыражениеВидаСчета = "Счет.Вид";
	
	ВыражениеПредставления = 
	"ВЫБОР   
	|	КОГДА &Периодичность = 6 
	|  		ТОГДА Формат(Период, ""ДФ=dd.MM.yy"")  
	|  	КОГДА &Периодичность = 7
	|		ТОГДА Формат(КонецПериода(Период, ""Неделя""), ""ДФ=dd.MM.yy"") 
	|   КОГДА &Периодичность = 8
	|   	ТОГДА Формат(КонецПериода(Период, ""Декада""), ""ДФ=dd.MM.yy"")
	|   КОГДА &Периодичность = 9
	|   	ТОГДА Формат(Период, ""ДФ = 'MMM yy'"")
	|   КОГДА &Периодичность = 10
	|   	ТОГДА 
	|      		ВЫБОР
	|         		КОГДА Квартал(Период) = 1 
	|         			ТОГДА Формат(Период, ""ДФ = '""1 кв."" yy'"")
	|         		КОГДА Квартал(Период) = 2 
	|         			ТОГДА Формат(Период, ""ДФ = '""2 кв."" yy'"")
	|         		КОГДА Квартал(Период) = 3 
	|         			ТОГДА Формат(Период, ""ДФ = '""3 кв."" yy'"")
	|         		КОГДА Квартал(Период) = 4 
	|         			ТОГДА Формат(Период, ""ДФ = '""4 кв."" yy'"")
	|      		КОНЕЦ
	|   КОГДА &Периодичность = 11
	|   	ТОГДА 
	|      		ВЫБОР
	|         		КОГДА Квартал(Период) < 2 
	|         			ТОГДА Формат(Период, ""ДФ = '""1 полугодие"" yy'"")
	|         		ИНАЧЕ Формат(Период, ""ДФ = '""2 полугодие"" yy'"")
	|      		КОНЕЦ
	|   КОГДА &Периодичность = 12
	|   	ТОГДА Формат(Период, ""ДФ = 'yyyy'"")
	|КОНЕЦ";
	
	ПолеНД.ВыражениеПредставления = ВыражениеПредставления;
	
	Возврат ПолеНД;

КонецФункции

#КонецОбласти

#Область СКД_Расшифровка

// Функция возвращает значения полей, установленные в отборе расшифровки
//
// Параметры:
//  СхемаКомпоновкиДанных	 - 	СхемаКомпоновкиДанных, Строка - исходная схема компоновки данных 
// 																или ее адрес во временном хранилище.
//  ДанныеРасшифровки		 - 	ДанныеРасшифровкиКомпоновкиДанных, Строка - данные расшифровки 
// 																			или их адрес во временном хранилище
//  Расшифровка				 - 	ИдентификаторРасшифровкиКомпоновкиДанных - идентификатор расшифровки
//  СписокПолей				 - 	Строка - список полей, значения которых необходимо получить, перечисленных через запятую
// 
// Возвращаемое значение:
//  Структура - структура, ключами которой являются имена полей, а значениями - найденные значения отборов. 
// 				Если значение отбора не найдено, либо отбор установлен не с видом сравнения Равно, устанавливается значение Неопределено.
//
Функция ПолучитьЗначенияИзРасшифровки(Знач СхемаКомпоновкиДанных, Знач ДанныеРасшифровки, Знач Расшифровка, Знач СписокПолей) Экспорт
	
	МассивСтрок = СтрРазделить(СписокПолей, ",", Ложь);
	ЗначенияРеквизитов = Новый Структура;
	
	Для Каждого ТекРеквизит Из МассивСтрок Цикл
		ЗначенияРеквизитов.Вставить(СокрЛП(ТекРеквизит));
	КонецЦикла;
	
	Если Расшифровка = Неопределено Тогда
		Возврат ЗначенияРеквизитов;
	КонецЕсли;
	
	ИсточникНастроек = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, ИсточникНастроек);
		НастройкаРасшифровки = ОбработкаРасшифровки.Расшифровать(Расшифровка, Новый ПолеКомпоновкиДанных(СокрЛП(МассивСтрок[0])));
		Для Каждого ТекОтбор Из НастройкаРасшифровки.Отбор.Элементы Цикл
			
			Если НЕ ТекОтбор.Использование ИЛИ ТекОтбор.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоля = Строка(ТекОтбор.ЛевоеЗначение);
			// Может быть реквизит "через точку", в этом случае его игнорируем.
			Если СтрНайти(ИмяПоля, ".") Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначенияРеквизитов.Свойство(ИмяПоля) Тогда
				ЗначенияРеквизитов[ИмяПоля] = ТекОтбор.ПравоеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
	Возврат ЗначенияРеквизитов;
	
	
КонецФункции

Функция ПолучитьОтборРасшифровки(Знач Расшифровка, Знач ДанныеРасшифровкиВход, ВключатьРесурсы = Ложь) Экспорт
		
	Если ТипЗнч(ДанныеРасшифровкиВход) = Тип("Строка") Тогда		
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиВход);
	Иначе 
		ДанныеРасшифровки = ДанныеРасшифровкиВход;
	КонецЕсли;
	
	ОтборРезультат = Новый Соответствие;
		
	Для Каждого ЭлементОтбора Из ПолучитьЭлементыОтбора(ДанныеРасшифровки.Настройки.Отбор) Цикл
		
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно) 
			Или ((ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии)) Тогда
			ОтборРезультат.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		ИначеЕсли ((ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке)
			Или (ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии)) Тогда
			ОтборРезультат.Вставить(Строка(ЭлементОтбора.ЛевоеЗначение), ЭлементОтбора.ПравоеЗначение);
		Иначе 
			
			Отборы = ОтборРезультат.Получить("Отборы");
			Если Отборы = Неопределено Тогда
				Отборы = Новый Массив;
			КонецЕсли;
			Отборы.Добавить(ЭлементОтбора);
			ОтборРезультат.Вставить("Отборы", Отборы);
			
		КонецЕсли;
				
	КонецЦикла;
	
	Для каждого Параметр Из ДанныеРасшифровки.Настройки.ПараметрыДанных.Элементы Цикл
	    Если Параметр.Использование Тогда
			ОтборРезультат.Вставить(Строка(Параметр.Параметр), Параметр.Значение);
		КонецЕсли;	
	КонецЦикла;
	
	МассивПолейРасшифровки = Новый Массив;	
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ДанныеРасшифровки, МассивПолейРасшифровки, ВключатьРесурсы);
	ЗаменыПолей = Новый Соответствие;
	Для каждого Поле Из МассивПолейРасшифровки Цикл
		Если Поле.Иерархия И (ЗаменыПолей.Получить(Поле.Поле) <> Неопределено) Тогда
			Продолжить;
		КонецЕсли;
		ОтборРезультат.Вставить(Поле.Поле, Поле.Значение);
		ЗаменыПолей.Вставить(Поле.Поле, Истина);
	КонецЦикла;
	
	Возврат ОтборРезультат;
	
КонецФункции

// Возвращает массив, по которому следует расшифровать отчет
Функция ПолучитьМассивПолейРасшифровки(Знач Расшифровка, Знач ДанныеРасшифровкиВход, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь) Экспорт
	
	Если ТипЗнч(ДанныеРасшифровкиВход) = Тип("Строка") Тогда		
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиВход);
	Иначе 
		ДанныеРасшифровки = ДанныеРасшифровкиВход;
	КонецЕсли;
	
	МассивПолейРасшифровки = Новый Массив;
	
	Если ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
	   И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных") Тогда
		Возврат МассивПолейРасшифровки;
	КонецЕсли;
	
	Если ТекущийОтчет = Неопределено Тогда
		ТекущийОтчет = ДанныеРасшифровки;
	КонецЕсли;
	
	// Добавим поля родительских группировок
	ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	
	Количество = МассивПолейРасшифровки.Количество();
	Для Индекс = 1 По Количество Цикл
		ОбратныйИндекс = Количество - Индекс;
		Для ИндексВнутри = 0 По ОбратныйИндекс - 1 Цикл
			Если МассивПолейРасшифровки[ОбратныйИндекс].Поле = МассивПолейРасшифровки[ИндексВнутри].Поле Тогда
				МассивПолейРасшифровки.Удалить(ОбратныйИндекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ЭлементОтбора Из ПолучитьЭлементыОтбора(ТекущийОтчет.Настройки.Отбор) Цикл
		Если НЕ ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		МассивПолейРасшифровки.Добавить(ЭлементОтбора);
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ДобавитьРодителей(ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь)
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Новый ПолеКомпоновкиДанных(Поле.Поле), ТекущийОтчет);
			Если Не ВключатьРесурсы И (ДоступноеПоле = Неопределено Или ДоступноеПоле.Ресурс) Тогда
				Продолжить;
			КонецЕсли;
			МассивПолейРасшифровки.Добавить(Поле);
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителей(Родитель, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);
	КонецЦикла;
	
КонецФункции

Функция ПолучитьНастройкиПоРасшифровке(Знач Расшифровка, Знач ДанныеРасшифровки) Экспорт
	
	ПоляРасшифровки = ПолучитьЗначенияИзРасшифровки(, ДанныеРасшифровки, Расшифровка, Ложь);
	
	//ДанныеРасшифровкиСКД = ПолучитьИзВременногоХранилища(ДанныеРасшифровки);
	//
	//ДанныеРасшифровкиСКД.Элементы[ДополнительныеПараметры.Расшифровка] 
	//
	//ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	//РезультирующиеНастройки = ОбработкаРасшифровки.ПрименитьНастройки(ДополнительныеПараметры.Расшифровка, ДанныеРасшифровкиСКД.Настройки);
	//
	//ЗначенияРасшифровки = МСФОКлиентСерверУХ.ПолучитьПоляРасшифровки(ДанныеРасшифровкиСКД, ДополнительныеПараметры.Расшифровка);			
	//
	//Если ТипЗнч(РезультирующиеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
	//	Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультирующиеНастройки);
	//ИначеЕсли ТипЗнч(РезультирующиеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
	//	Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультирующиеНастройки);
	//КонецЕсли;
	//
	//НастройкиИсточник = Отчет.КомпоновщикНастроек.ПолучитьНастройки();
	//МСФОКлиентСерверУХ.ДоработатьНастройкиПоПолямРасшифровки(НастройкиИсточник, ЗначенияРасшифровки);				
	//МСФОКлиентСерверУХ.СкопироватьЭлементыПоНастройкамИзРасшифровки(НастройкиПриемник, НастройкиИсточник);		
	
КонецФункции

Функция ПолучитьНастройкиПриемникаПоРасшифровке(Знач Расшифровка, Знач ДанныеРасшифровки, Знач ОписаниеОтчетаПриемника, Знач НастройкиИсточник = Неопределено) Экспорт
		
	ЗначенияРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, ДанныеРасшифровки, Неопределено, Ложь);
	
	ОтчетПриемник_Имя = ОписаниеОтчетаПриемника.ИмяОтчета;	
	ОтчетПриемник_Макет = ?(ОписаниеОтчетаПриемника.Свойство("ИмяМакета"), ОписаниеОтчетаПриемника.ИмяМакета, "ОсновнаяСхемаКомпоновкиДанных");
	ОтчетПриемник_ИмяВарианта = ?(ОписаниеОтчетаПриемника.Свойство("ИмяВарианта"), ОписаниеОтчетаПриемника.ИмяВарианта, "Основной");
	
	ВариантНастройки = Отчеты[ОтчетПриемник_Имя].ПолучитьМакет(ОтчетПриемник_Макет).ВариантыНастроек[ОтчетПриемник_ИмяВарианта];
	НастройкиПриемник = ВариантНастройки.Настройки;
	НастройкиПриемник.ДополнительныеСвойства.Вставить("ПредставлениеВарианта", ВариантНастройки.Представление);
	
	Для каждого ЭлементРасшифровки Из ЗначенияРасшифровки Цикл
		
 		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												НастройкиПриемник.Отбор, 
												ЭлементРасшифровки.ЛевоеЗначение, 
												ЭлементРасшифровки.ПравоеЗначение, 
												ЭлементРасшифровки.ВидСравнения,
												ЭлементРасшифровки.Представление,
												ЭлементРасшифровки.Использование,
												ЭлементРасшифровки.РежимОтображения,
												ЭлементРасшифровки.ИдентификаторРасшифровкиКомпоновкиДанных
											);
											
		Иначе 
			
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
												НастройкиПриемник.Отбор, 
												ЭлементРасшифровки.Поле, 
												ЭлементРасшифровки.Значение,
												,
												,
												Истина
											);
											
		КонецЕсли;
		
	КонецЦикла;
	
	Если НастройкиИсточник <> Неопределено Тогда 
		Для каждого Параметр Из НастройкиИсточник.ПараметрыДанных.Элементы Цикл			
			
			Если Параметр.Использование Тогда
				ЗначениеПараметра = НастройкиПриемник.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
				Если ЗначениеПараметра <> Неопределено Тогда
					ЗначениеПараметра.Значение = Параметр.Значение;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат НастройкиПриемник;

КонецФункции

#КонецОбласти

#Область СКД_МакетыКомпоновки

// Функция - Получить макет компоновки данных для коллекции по схеме и настройкам компоновки данных
//
// Возвращаемое значение:
//   - МакетКомпоновкиДанных
Функция ПолучитьМакетКомпоновкиДанныхКоллекции(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных = Неопределено, ДанныеРасшифровки = Неопределено, 
													ПроверятьДоступностьПолей = Ложь, ПараметрыФункциональныхОпций = Неопределено,
													Знач ТипГенератора = Неопределено) Экспорт

	Перем ВычисляемыеПоля;	
													
	КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если НастройкиКомпоновкиДанных = Неопределено Тогда
		НастройкиКомпоновкиДанных = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	Если НастройкиКомпоновкиДанных.ДополнительныеСвойства.Свойство("ВычисляемыеПоля", ВычисляемыеПоля) Тогда
		Для каждого ПолеИсточник Из ВычисляемыеПоля Цикл
			Если ТипЗнч(ПолеИсточник.Значение) = Тип("Структура") Тогда
				
				ВычисляемоеПоле = ДобавитьВычисляемоеПоле(СхемаКомпоновкиДанных, ПолеИсточник.Ключ, ПолеИсточник.Значение.Выражение);
				Для каждого СвойствоПоля Из ПолеИсточник.Значение Цикл
					ВычисляемоеПоле[СвойствоПоля.Ключ] = СвойствоПоля.Значение;
				КонецЦикла;
				
			Иначе	
				ДобавитьВычисляемоеПоле(СхемаКомпоновкиДанных, ПолеИсточник.Ключ, ПолеИсточник.Значение);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ТипГенератора = Неопределено Тогда	
		ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений");	
	КонецЕсли;
	
	Возврат КомпоновщикМакетаКД.Выполнить(СхемаКомпоновкиДанных, 
											НастройкиКомпоновкиДанных,
											ДанныеРасшифровки,
											, 
											ТипГенератора, 
											ПроверятьДоступностьПолей, 
											ПараметрыФункциональныхОпций);
	
КонецФункции
	
#КонецОбласти 

#Область СКД_ПодготовкаИсполнениеСКД

Функция ПолучитьСхемуКомпоновкиДанных(ТекстЗапроса, ИмяНабораДанных = Неопределено, ИмяИсточникаДанных = Неопределено) Экспорт

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;	

	ИсточникДанныхСКД = ТиповыеОтчетыУХ.ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных, ИмяИсточникаДанных);
	Если ИмяИсточникаДанных <> Неопределено Тогда
		ИсточникДанныхСКД.Имя = ИмяИсточникаДанных;
	КонецЕсли;
	ТиповыеОтчетыУХ.ДобавитьНаборДанныхЗапрос(СхемаКомпоновкиДанных.НаборыДанных, ИсточникДанныхСКД, ИмяНабораДанных).Запрос = ТекстЗапроса;
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция ПолучитьСхемуКомпоновкиДанныхПоОбъекту(ИмяОбъекта = "ОбъектИсточник", ИмяНабораДанных = Неопределено, ИмяИсточникаДанных = Неопределено) Экспорт

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;	

	ИсточникДанныхСКД = ТиповыеОтчетыУХ.ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных, ИмяИсточникаДанных);
	Если ИмяИсточникаДанных <> Неопределено Тогда
		ИсточникДанныхСКД.Имя = ИмяИсточникаДанных;
	КонецЕсли;
	ТиповыеОтчетыУХ.ДобавитьНаборДанныхОбъект(СхемаКомпоновкиДанных.НаборыДанных, ИсточникДанныхСКД.Имя, ИмяНабораДанных, ИмяОбъекта);
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

Функция ПолучитьТабличныйДокументПоТаблицеЗначений(ТаблицаИсточник, НастройкиСКД = Неопределено) Экспорт 

	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	ИсточникДанныхСКД = ДобавитьЛокальныйИсточникДанных(СхемаКомпоновкиДанных);
	
	НаборДанныхСКД = ТиповыеОтчетыУХ.ДобавитьНаборДанныхОбъект(СхемаКомпоновкиДанных.НаборыДанных, ИсточникДанныхСКД.Имя);
	
	Если НастройкиСКД = Неопределено Тогда
		
		НастройкиСКД = Новый НастройкиКомпоновкиДанных;				
		ДобавитьГруппировкуСтруктуры(НастройкиСКД);
		
		Для каждого КолонкаТаб Из ТаблицаИсточник.Колонки Цикл
			
			ПолеКД = Новый ПолеКомпоновкиДанных(КолонкаТаб.Имя);
			ДобавитьПолеНабораДанных(НаборДанныхСКД, КолонкаТаб.Имя, КолонкаТаб.Заголовок).ТипЗначения = КолонкаТаб.ТипЗначения; 
			ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, ПолеКД);
			
		КонецЦикла;
		
	Иначе 
		
		Для каждого КолонкаТаб Из ТаблицаИсточник.Колонки Цикл		
			ДобавитьПолеНабораДанных(НаборДанныхСКД, КолонкаТаб.Имя, КолонкаТаб.Заголовок).ТипЗначения = КолонкаТаб.ТипЗначения;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Не НастройкиСКД.ДополнительныеСвойства.Свойство("ВнешниеНаборыДанных") Тогда		
		НастройкиСКД.ДополнительныеСвойства.Вставить("ВнешниеНаборыДанных", Новый Структура("ОбъектИсточник", ТаблицаИсточник));
	КонецЕсли;
	
	Возврат ВывестиСКД(СхемаКомпоновкиДанных, НастройкиСКД, , , Ложь);

КонецФункции

// Функция - Получить коллекцию результат по схеме и настройкам компоновки данных
// 
// Возвращаемое значение:
//		- Коллекция значений (Таблица значений, Дерево значений)
Функция ПолучитьКоллекциюРезультат(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных = Неопределено, ВнешниеНаборыДанных = Неопределено,
									ДанныеРасшифровки = Неопределено, ВозможностьИспользованияВнешнихФункций = Ложь, 
									ПроверятьДоступностьПолей = Ложь, ПараметрыФункциональныхОпций = Неопределено, 
									Результат = Неопределено) Экспорт
									
	Перем ТипГенератора, ПроцессорВыводаСКД, УстановитьОбъект;								
									
	Если Результат = Неопределено Тогда
				
		ПроцессорВыводаСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;	
		
	Иначе
		
		ТипРезультата = ТипЗнч(Результат);
		
		Если ТипРезультата = Тип("ТаблицаЗначений") Тогда
			
			УстановитьОбъект = Истина;
			ПроцессорВыводаСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			
		ИначеЕсли ТипЗнч(Результат) = Тип("ДеревоЗначений") Тогда
			
			УстановитьОбъект = Истина;
			ПроцессорВыводаСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			
		Иначе
			
			УстановитьОбъект = Ложь;
			ПроцессорВыводаСКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных");
			
		КонецЕсли;
				
	КонецЕсли;
									
	МакетКД = ПолучитьМакетКомпоновкиДанныхКоллекции(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки, 
													ПроверятьДоступностьПолей, ПараметрыФункциональныхОпций, ТипГенератора);
	//МакетКомпоновкиВXML(МакетКД);//для отладки в консоли запросов								
    ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
    ПроцессорКД.Инициализировать(МакетКД, ВнешниеНаборыДанных, ДанныеРасшифровки, ВозможностьИспользованияВнешнихФункций);
		
	Если УстановитьОбъект = Истина Тогда
		ПроцессорВыводаСКД.УстановитьОбъект(Результат);
	ИначеЕсли УстановитьОбъект = Ложь Тогда
		ПроцессорВыводаСКД.УстановитьДокумент(Результат);		
	КонецЕсли;
	
    Возврат ПроцессорВыводаСКД.Вывести(ПроцессорКД);

КонецФункции

Функция МакетКомпоновкиВXML(МакетКомпоновки, ЗаменитьКоллекцииНаМассив = Истина) Экспорт

	ПараметрыЗапроса = Новый Структура;
	Для каждого ТекПараметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		
		ТекущееЗначение = ТекПараметр.Значение;
		Если ЗаменитьКоллекцииНаМассив Тогда
			
			ТекущийТип = ТипЗнч(ТекПараметр.Значение);
			Если ТекущийТип = Тип("СписокЗначений") Тогда
				ТекущееЗначение = ТекПараметр.Значение.ВыгрузитьЗначения();
			КонецЕсли;
			
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить(ТекПараметр.Имя, ТекущееЗначение);
		
	КонецЦикла;
	
	КонтекстЗапроса = Новый Структура("Текст,Параметры", МакетКомпоновки.НаборыДанных.Получить(0).Запрос, ПараметрыЗапроса);
	Возврат ОбщегоНазначения.ЗначениеВСтрокуXML(КонтекстЗапроса);

КонецФункции

Функция МакетКомпоновкиВЗапрос(МакетКомпоновки, ЗаменитьКоллекцииНаМассив = Истина) Экспорт

	Запрос = Новый Запрос(МакетКомпоновки.НаборыДанных.Получить(0).Запрос);
	
	Для каждого ТекПараметр Из МакетКомпоновки.ЗначенияПараметров Цикл
		
		ТекущееЗначение = ТекПараметр.Значение;
		Если ЗаменитьКоллекцииНаМассив Тогда
			
			ТекущийТип = ТипЗнч(ТекПараметр.Значение);
			Если ТекущийТип = Тип("СписокЗначений") Тогда
				ТекущееЗначение = ТекПараметр.Значение.ВыгрузитьЗначения();
			КонецЕсли;
			
		КонецЕсли;
		
		Запрос.Параметры.Вставить(ТекПараметр.Имя, ТекущееЗначение);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ЗапросВСтрокуXML(Запрос);

КонецФункции

// Возвращает массив наборов данных - запрос в схеме компоновки данных
Функция ПолучитьНаборыДанныхЗапрос(СхемаКомпоновкиДанных, НаборыДанных = Неопределено, МассивНаборовДанных = Неопределено) Экспорт
	
	Если МассивНаборовДанных = Неопределено Тогда
		МассивНаборовДанных = Новый Массив;
	КонецЕсли;
	Если НаборыДанных = Неопределено Тогда
		НаборыДанных = СхемаКомпоновкиДанных.НаборыДанных;
	КонецЕсли;
	
	Для каждого НаборДанных Из НаборыДанных Цикл
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных") Тогда
			МассивНаборовДанных.Добавить(НаборДанных);
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных") Тогда
			ПолучитьНаборыДанныхЗапрос(СхемаКомпоновкиДанных, НаборДанных.Элементы, МассивНаборовДанных)
		КонецЕсли;
	КонецЦикла;
	Возврат МассивНаборовДанных;
	
КонецФункции

// Функция - Получить коллекцию по настройкам компоновки данных
//
// Возвращаемое значение:
//   - Коллекция значений (Таблица значений, Дерево значений)
Функция ПолучитьКоллекциюПоНастройкамКомпоновкиДанных(ТекстЗапроса, НастройкиКомпоновкиДанных, ВнешниеНаборыДанных = Неопределено,
									ДанныеРасшифровки = Неопределено, ВозможностьИспользованияВнешнихФункций = Ложь, 
									ПроверятьДоступностьПолей = Ложь, ПараметрыФункциональныхОпций = Неопределено,
									Результат = Неопределено) Экспорт

	Возврат ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(
									ПолучитьСхемуКомпоновкиДанных(ТекстЗапроса), 
									НастройкиКомпоновкиДанных, 
									ВнешниеНаборыДанных,
									ДанныеРасшифровки, 
									ВозможностьИспользованияВнешнихФункций, 
									ПроверятьДоступностьПолей, 
									ПараметрыФункциональныхОпций,
									Результат
								);

КонецФункции

// Процедура подменяет настройки по умолчанию для схемы компоновки данных.
//
Процедура ЗагрузитьВСхемуНастройкиКомпоновщика(Схема, Настройки) Экспорт
	
	НастройкиXDTO = СериализаторXDTO.ЗаписатьXDTO(Настройки);
	СхемаXDTO = СериализаторXDTO.ЗаписатьXDTO(Схема);
	Если НастройкиXDTO <> Неопределено Тогда
		
		СхемаXDTO.defaultSettings = НастройкиXDTO;
		
	КонецЕсли;
	Схема = СериализаторXDTO.ПрочитатьXDTO(СхемаXDTO);
	
КонецПроцедуры

Функция ВывестиСКД(СхемаКД, Настройки = Неопределено, ДанныеРасшифровкиКД = Неопределено, Параметры = Неопределено, ДеревоЗначений = Ложь) Экспорт
	
	Если ТипЗнч(СхемаКД) = Тип("Строка") Тогда
		Схема = ПолучитьИзВременногоХранилища(СхемаКД);
	Иначе
		Схема = СхемаКД;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеРасшифровкиКД) = Тип("Строка") Тогда
		ДанныеРасшифровки = ПолучитьИзВременногоХранилища(ДанныеРасшифровкиКД);
		Если ДанныеРасшифровки = Неопределено Тогда
			ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
		КонецЕсли;
	Иначе
		ДанныеРасшифровки = ДанныеРасшифровкиКД;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры) Тогда
		Для Каждого Параметр Из Параметры Цикл
			Схема.Параметры.Найти(Параметр.Ключ).Значение = Параметр.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		НастройкиКомпоновки = Настройки;
	ИначеЕсли ТипЗнч(Настройки) = Тип("Строка") Тогда
		НастройкиКомпоновки = Схема.ВариантыНастроек.Найти(Настройки).Настройки;
	Иначе
		НастройкиКомпоновки = Схема.НастройкиПоУмолчанию;
	КонецЕсли;
	
	ТипГенератора = Тип("ГенераторМакетаКомпоновкиДанных" + ?(ДеревоЗначений, "ДляКоллекцииЗначений", ""));
	
	Компоновщик = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = Компоновщик.Выполнить(Схема, НастройкиКомпоновки, ДанныеРасшифровки,, ТипГенератора);
	
	ВнешниеНаборыДанных = ?(НастройкиКомпоновки.ДополнительныеСвойства.Свойство("ВнешниеНаборыДанных"), НастройкиКомпоновки.ДополнительныеСвойства.ВнешниеНаборыДанных, Неопределено);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	Если ДеревоЗначений Тогда
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Новый ДеревоЗначений);
	Иначе
		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеРасшифровкиКД) = Тип("Строка") Тогда
		ПоместитьВоВременноеХранилище(ДанныеРасшифровки, ДанныеРасшифровкиКД);
	КонецЕсли;
	
	Возврат ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СхемаЗапроса

Функция ПолучитьТекстЗапросаПоместитьПоследний(ТекстЗапроса, ТаблицаДляПомещения) Экспорт

	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	НомерПоследнего = СхемаЗапроса.ПакетЗапросов.Количество()-1;
	СхемаЗапроса.ПакетЗапросов[НомерПоследнего].ТаблицаДляПомещения = ТаблицаДляПомещения;
	
	Возврат СхемаЗапроса.ПолучитьТекстЗапроса();

КонецФункции

#КонецОбласти

#Область ПостроителиЗапросовОтчетов

Процедура ДобавитьОтборыВПостроитель(Построитель, КоллекцияОтборов) Экспорт

	ТипСписокЗначений = Тип("СписокЗначений");
	ТипМассив = Тип("Массив");
	ТипСтруктура = Тип("Структура");//ВидСравнения,Использование,Значение=Неопределено,ЗначениеC=Неопределено,ЗначениеПо=Неопределено
	
	Для Каждого ИсточникОтбора Из КоллекцияОтборов Цикл
		
		ТипЗначенияОтбора = ТипЗнч(ИсточникОтбора.Значение);
		
		ЭлементОтбора = Построитель.Отбор.Добавить(ИсточникОтбора.Ключ);
		ЭлементОтбора.Использование = Истина;
		
		Если ТипЗначенияОтбора = ТипСписокЗначений Тогда  
			
			// Поле В (&Список)			
			ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
			ЭлементОтбора.Значение = ИсточникОтбора.Значение;
			
		ИначеЕсли ТипЗначенияОтбора = ТипМассив Тогда
			
			//Поле В (&Массив)
			ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
			Список = Новый СписокЗначений;
			Список.ЗагрузитьЗначения(ИсточникОтбора.Значение);
			ЭлементОтбора.Значение = Список;
			
		ИначеЕсли ТипЗначенияОтбора = ТипСтруктура Тогда
			
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ИсточникОтбора.Значение); 
			
		Иначе
			
			ЭлементОтбора.Значение = ИсточникОтбора.Значение;
			
		КонецЕсли;		
		
	КонецЦикла;	

КонецПроцедуры

// Заполняет отбор построителя по отбору компоновщика
Процедура ЗаполнитьОтборПоОтборуКомпоновщика(Отбор, ОтборКомпоновщика) Экспорт
	
	ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");
	
	Если ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		Отбор.ВидСравнения = ВидСравнения.Больше;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Отбор.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.ВИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Отбор.ВидСравнения = ВидСравнения.ВСписке;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Отбор.ВидСравнения = ВидСравнения.Меньше;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Отбор.ВидСравнения = ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.НеВИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Отбор.ВидСравнения = ВидСравнения.НеВСписке;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Отбор.ВидСравнения = ВидСравнения.НеВСпискеПоИерархии;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Отбор.ВидСравнения = ВидСравнения.НеРавно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Отбор.ВидСравнения = ВидСравнения.НеСодержит;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		Отбор.ВидСравнения = ВидСравнения.Равно;
	ИначеЕсли ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Отбор.ВидСравнения = ВидСравнения.Содержит;
	Иначе
		// Не нашли соответствие - не применяем отбор
		Отбор.Использование = Ложь;
		Возврат;
	КонецЕсли;
	
	Отбор.Значение = ОтборКомпоновщика.ПравоеЗначение;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыОтчетов

Процедура ВывестиОтчетВXML(ПроцессорКомпоновки, ДанныеРасшифровкиКомпоновки, РезультатXML, ДанныеРасшифровкиXML) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("result");
	Пока Истина Цикл
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		Если ЭлементРезультата = Неопределено Тогда
			Прервать;
		КонецЕсли;
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементРезультата, "item", "http://v8.1c.ru/8.1/data-composition-system/result");
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	РезультатXML = ЗаписьXML.Закрыть();
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("details");
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеРасшифровкиКомпоновки, "item", "http://v8.1c.ru/8.1/data-composition-system/details");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ДанныеРасшифровкиXML = ЗаписьXML.Закрыть();
	
КонецПроцедуры

Функция ЭтоПроизвольныйОтчет(ОтчетОбъект = Неопределено) Экспорт
	
	Если ОтчетОбъект <> Неопределено Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоТипу(ТипЗнч(ОтчетОбъект));
		Если ТипЗнч(ОтчетОбъект) = Тип("Структура") 
		 ИЛИ МетаданныеОбъекта <> Неопределено 
		   И Метаданные.Справочники.Найти(Метаданные.НайтиПоТипу(ТипЗнч(ОтчетОбъект)).Имя) <> Неопределено Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат (СтрНайти(Метаданные.Имя, "Консолидация") > 0);
	КонецЕсли;
	
КонецФункции

// По структуре параметров восстанавливает состояние отчета
Процедура ПрименитьСтруктуруПараметровОтчета(ОтчетОбъект, СтруктураПараметров) Экспорт
	
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОтчетОбъект, СтруктураПараметров);
	ОтчетОбъект.ИнициализацияОтчета();
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураПараметров.НастройкиКомпоновщика);
	
КонецПроцедуры

Процедура ИнициализацияТиповогоОтчета(ОтчетОбъект) Экспорт
	
КонецПроцедуры

// Возвращает структуру параметров отчета для сохранения
Функция ПолучитьСтруктуруПараметровТиповогоОтчета(ОтчетОбъект) Экспорт
	
	СтруктураПараметров = Новый Структура;
	Для каждого Реквизит Из ОтчетОбъект.Метаданные().Реквизиты Цикл
		Если Реквизит.Имя = "СхемаКомпоновкиДанных" 
		 ИЛИ Реквизит.Имя = "ДатаВерсииИсточникаДанных"
		 ИЛИ Реквизит.Имя = "ИсточникДанныхОтчета"
		 ИЛИ Реквизит.Имя = "Описание"
		 ИЛИ Реквизит.Имя = "ПодлежитПередачеВПодчиненныеУзлыПриОбменеПоОрганизации" Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПараметров.Вставить(Реквизит.Имя, ОтчетОбъект[Реквизит.Имя])
	КонецЦикла;
	
	// Проверка - была ли вызвана функция из формы отчета или из другой процедуры.
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) И ОтчетОбъект.Ссылка = ОтчетОбъект Тогда
		НастройкиКомпоновщика = ОтчетОбъект.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
		
		Если НастройкиКомпоновщика = Неопределено Тогда
			НастройкиКомпоновщика = ОтчетОбъект.СхемаКомпоновкиДанных.Получить().НастройкиПоУмолчанию;
		КонецЕсли;
		
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);
	Иначе
		СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());
	КонецЕсли;
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект) Экспорт
	
	Возврат СформироватьСхемуКомпоновкиДанных(ОтчетОбъект);
	
КонецФункции

Процедура ПеренестиНастройкиПараметровОтчета(ПриемникЗначения, ИсточникЗначения) Экспорт
	
	ИсточникЭлементов = ИсточникЗначения.Элементы;
	СброситьФлажкиИспользования(ПриемникЗначения.Элементы);
	УстановитьЗначенияПараметров(ПриемникЗначения, ИсточникЗначения.Элементы);
	
КонецПроцедуры

Функция СохранитьМассивПолейВXML(МассивПолей) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку();
	ЗаписьXML.ЗаписатьНачалоЭлемента("array");
	Для Каждого Поле Из МассивПолей Цикл
		СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Поле);
	КонецЦикла;
	ЗаписьXML.ЗаписатьКонецЭлемента();
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

Функция ВосстановитьМассивПолейИзXML(XMLПредставление) Экспорт
	
	МассивПолейРасшифровки = Новый Массив();
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.УстановитьСтроку(XMLПредставление);
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();            	
	Пока ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента Цикл
		МассивПолейРасшифровки.Добавить(СериализаторXDTO.ПрочитатьXML(ЧтениеXML));
	КонецЦикла;
	
	Возврат МассивПолейРасшифровки;
	
КонецФункции

Функция ПолучитьСписокПериодов(ПериодСохраненный, Параметры)
		
	СписокПериодов = Новый СписокЗначений;
	Если ПериодСохраненный = Справочники.Периоды.ПустаяСсылка() Тогда
		СписокПериодов.Добавить(ПериодСохраненный);
		Возврат СписокПериодов;
	КонецЕсли;
	Периодичность = ПериодСохраненный.Периодичность;	
	Строка = Параметры.ДоступныеПериодичности.НайтиСтроки(Новый Структура("Периодичность", Периодичность))[0];
	РассчитыватьЧерез = Строка.РассчитыватьЧерез;
	Если Периодичность = РассчитыватьЧерез Тогда
		СписокПериодов.Добавить(ПериодСохраненный);
		Возврат СписокПериодов;
	КонецЕсли;
	
	Найдено = Ложь;
	ТекстРодитель = "Родитель";
	Пока Не Найдено Цикл
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ Разрешенные
		|	Периоды.Ссылка
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды." + ТекстРодитель + " = &Родитель";
		Запрос.УстановитьПараметр("Родитель", ПериодСохраненный);
		ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
		Если ТаблицаРезультат.Количество() = 0 Тогда
			СписокПериодов.Добавить(ПериодСохраненный);
			Возврат СписокПериодов;
		ИначеЕсли ТаблицаРезультат[0].Ссылка.Периодичность = РассчитыватьЧерез Тогда
			Для каждого Строка Из ТаблицаРезультат Цикл
				СписокПериодов.Добавить(Строка.Ссылка);
			КонецЦикла;
			Возврат СписокПериодов;
		Иначе
			ТекстРодитель = ТекстРодитель + ".Родитель";
		КонецЕсли;
		
	КонецЦикла
	
КонецФункции

// Возвращает имя формы, с помощью которого следует редактировать пользовательское поле
Функция ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) Экспорт
	
	Если ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных") Тогда
		Если ПолучитьВыражениеАгрегатаИтоговыхЗаписей(ПользовательскоеПоле) <> Неопределено Тогда
			ИмяФормы = "Форма" + "Формула";
			Возврат ИмяФормы;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательскоеПоле.Варианты.Элементы.Количество() > 0
	   И ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы" Тогда
		ИмяФормы = "Форма" + ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение, 2);
	КонецЕсли;
	Если ПользовательскоеПоле.Варианты.Элементы.Количество() > 2
	   И (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд"
	 ИЛИ ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Состояние") Тогда
		ИмяФормы = "ФормаИнтервал";
	ИначеЕсли ПользовательскоеПоле.Варианты.Элементы.Количество() > 1
			И ПользовательскоеПоле.Варианты.Элементы[0].Значение = "0ИГ" Тогда
		ИмяФормы = "ФормаИнтервалы";
	КонецЕсли;
	Возврат ИмяФормы;
	
КонецФункции

Функция ПолучитьВыражениеАгрегатаИтоговыхЗаписей(ПользовательскоеПоле) Экспорт
	
	ВыражениеДетальныхЗаписей = ПользовательскоеПоле.ПолучитьПредставлениеВыраженияДетальныхЗаписей();
	ВыражениеИтоговыхЗаписей = ПользовательскоеПоле.ПолучитьПредставлениеВыраженияИтоговыхЗаписей();
	ВыражениеАгрегата = СтрЗаменить(ВыражениеИтоговыхЗаписей, ВыражениеДетальныхЗаписей, "");
	ВыражениеАгрегата = СтрЗаменить(ВыражениеАгрегата, ")", "");
	Если ВыражениеАгрегата = "Сумма("
	 ИЛИ ВыражениеАгрегата = "Количество(Различные "
	 ИЛИ ВыражениеАгрегата = "Количество("
	 ИЛИ ВыражениеАгрегата = "Максимум("
	 ИЛИ ВыражениеАгрегата = "Минимум("
	 ИЛИ ВыражениеАгрегата = "Среднее(" Тогда
		Возврат ВыражениеАгрегата;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПараметрИзСтроки(Знач Строка, НомерПараметра = 1) Экспорт
	
	Для Индекс = 1 По НомерПараметра Цикл
		ПоложениеЗапятой = СтрНайти(Строка, ",");
		Если ПоложениеЗапятой = 0 Тогда
			ПодСтрока = Строка;
			Возврат Подстрока;
		Иначе
			ПодСтрока = Лев(Строка, ПоложениеЗапятой - 1);
		КонецЕсли;
		Строка = Сред(Строка, ПоложениеЗапятой + 1);
	КонецЦикла;
	
	Возврат ПодСтрока;
	
КонецФункции

#КонецОбласти

#Область ДинамическиеОтборы

Функция ЭтоСтараяВерсияОтчета(ОтчетОбъект) Экспорт
	
	Возврат Не ЭтоПроизвольныйОтчет(ОтчетОбъект) И (ОтчетОбъект.Метаданные().Реквизиты.Найти("НастройкаПериода") <> Неопределено);
	
КонецФункции

Функция ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект) Экспорт
	
	ПараметрыПанели = Неопределено;
	
	Если ОтчетОбъект.ПараметрыПанелиПользователя <> Неопределено Тогда
		ПараметрыПанели = ОтчетОбъект.ПараметрыПанелиПользователя.Получить();
	КонецЕсли;
	
	Если ПараметрыПанели = Неопределено Тогда
		ПараметрыПанели = ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект);
	КонецЕсли;
	
	Возврат ПараметрыПанели;
	
КонецФункции

Функция ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ДеревоНастроекСтандартныхСтраниц  = Новый ДеревоЗначений;
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Использование");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Имя");
	ДеревоНастроекСтандартныхСтраниц.Колонки.Добавить("Представление");
	
	//АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Период", "Период");
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Прогноз", "Прогноз");
		АналитическиеОтборы = ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "АналитическиеОтборы", Нстр("ru = 'Аналитические отборы'"));
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "КоличествоЗаписей", Нстр("ru = 'Ограничение на количество записей'"));
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "Порог", Нстр("ru = 'Порог существенности'"));
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "Индикаторы", Нстр("ru = 'Индикаторы (тренд, состояние)'"));
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "ABCКлассификация", Нстр("ru = 'ABC - Классификация'"));
		ДобавитьИЗаполнитьСтроку(АналитическиеОтборы, Истина, "СкрытьНулевые", Нстр("ru = 'Скрытие нулевых строк и колонок'"));
	КонецЕсли;
	
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "КомпоновщикНастроекПользовательскиеНастройки", Нстр("ru = 'Пользовательские настройки'"));
	
	Параметры  = ложь;
	Показатели = ложь;
	Отбор      = ложь;
	Порядок    = ложь;
	
	Если ФормаОтчета <> Неопределено тогда
		Если ФормаОтчета.ЭлементыФормы.Найти("ПанельЗакладок") <> Неопределено тогда
			Страницы = ФормаОтчета.ЭлементыФормы.ПанельЗакладок.Страницы;
			Параметры  = ?(Страницы.Найти("Параметры") <> Неопределено И Страницы.Параметры.Видимость, Страницы.Параметры.Видимость, Параметры);
			Показатели = ?(Страницы.Найти("Показатели") <> Неопределено И Страницы.Показатели.Видимость, Страницы.Показатели.Видимость, Показатели);
			Отбор      = ?(Страницы.Найти("Отбор") <> Неопределено И Страницы.Отбор.Видимость, Страницы.Отбор.Видимость, Отбор);
			Порядок    = ?(Страницы.Найти("Порядок") <> Неопределено И Страницы.Порядок.Видимость, Страницы.Порядок.Видимость, Порядок);
		КонецЕсли;
	КонецЕсли;

	
	//ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Параметры", "Параметры");
	//ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Отбор", "Отбор");
	ДобавитьИЗаполнитьСтроку(ДеревоНастроекСтандартныхСтраниц, Истина, "Порядок", "Сортировка");
	
	Параметры = Новый Структура;
	Параметры.Вставить("ДеревоНастроекСтандартныхСтраниц", ДеревоНастроекСтандартныхСтраниц);
	Параметры.Вставить("Отборы", Новый ТаблицаЗначений);
	
	СписокДоступныхОтносительныхПериодов = Новый СписокЗначений;
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		СписокДоступныхОтносительныхПериодов.Добавить("Предыдущий", Нстр("ru = 'Предыдущий'"), Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Текущий", Нстр("ru = 'Текущий'"), Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Следующий", Нстр("ru = 'Следующий'"), Истина);
	Иначе
		СписокДоступныхОтносительныхПериодов.Добавить("Предыдущий", Нстр("ru = 'Предыдущий'"), Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("СНачала", Нстр("ru = 'С начала текущего'"), Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Текущий", Нстр("ru = 'Текущий'"), Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("ДоКонца", Нстр("ru = 'До конца текущего'"), Истина);
		СписокДоступныхОтносительныхПериодов.Добавить("Следующий", Нстр("ru = 'Следующий'"), Истина);
	КонецЕсли;
	Параметры.Вставить("СписокДоступныхОтносительныхПериодов", СписокДоступныхОтносительныхПериодов);
	
	Параметры.Вставить("ПроизвольныйПериод", Истина);
	
	ДоступныеПериодичности = Новый ТаблицаЗначений;
	ДоступныеПериодичности.Колонки.Добавить("Периодичность");
	ДоступныеПериодичности.Колонки.Добавить("РассчитыватьЧерез");
	ДоступныеПериодичности.Колонки.Добавить("Использование");
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные
		|	Периодичность.Ссылка
		|ИЗ
		|	Перечисление.Периодичность КАК Периодичность";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			НоваяСтрока = ДоступныеПериодичности.Добавить();
			НоваяСтрока.Периодичность = Выборка.Ссылка;
			НоваяСтрока.РассчитыватьЧерез = Выборка.Ссылка;
			НоваяСтрока.Использование = Истина;
		КонецЦикла;
	Иначе
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Год",       Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Полугодие", Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Квартал",   Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Месяц",     Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Декада",    Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "Неделя",    Истина);
		ДобавитьСтрокуПериодичности(ДоступныеПериодичности, "День",      Истина);
	КонецЕсли;
	
	Параметры.Вставить("ДоступныеПериодичности", ДоступныеПериодичности);
	
	Возврат Параметры;
			
КонецФункции

Функция ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ЗначенияНастроек = Неопределено;
	
	Если ОтчетОбъект.ЗначенияНастроекПанелиПользователя <> Неопределено Тогда
		
		ЗначенияНастроек = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
		Если ТипЗнч(ЗначенияНастроек) <> Тип("Структура") И ЗначенияНастроек <> Неопределено Тогда
			ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект);
			Если ОтчетОбъект.ЗначенияНастроекПанелиПользователя <> Неопределено Тогда
				ЗначенияНастроек = ОтчетОбъект.ЗначенияНастроекПанелиПользователя.Получить();
			Иначе
				ЗначенияНастроек = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначенияНастроек = Неопределено Тогда
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект);
	КонецЕсли;
	
	Возврат ЗначенияНастроек;		
	
КонецФункции

Функция ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	ЗначенияНастроек = Новый Структура;
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		
		//АналитическиеОтборы
		ЗначенияАналитическихОтборов = Новый Структура;
		ЗначенияАналитическихОтборов.Вставить("КоличествоТоп", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ПроцентТоп", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ПолеТоп", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ПолеОтборТренд", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборТренд", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ПолеОтборСостояние", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборСостояние", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ПолеОтборABCКлассификация", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("ЗначениеОтборABCКлассификация", Неопределено);
		ЗначенияАналитическихОтборов.Вставить("СкрытьНулевые", Неопределено);
		ЗначенияНастроек.Вставить("АналитическиеОтборы", ЗначенияАналитическихОтборов);
		
		//НастройкиПрогноза
		ЗначенияНастроекПрогноза = Новый Структура;
		ЗначенияНастроекПрогноза.Вставить("Прогноз", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("ДатаОтсчета", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("КоличествоАнализ", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("КоличествоПрогноз", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("ПоказательПрогноза", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("ПолеПрогноза", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("Периодичность", Неопределено);
		ЗначенияНастроекПрогноза.Вставить("Кратность", Неопределено);
		ЗначенияНастроек.Вставить("НастройкиПрогноза", ЗначенияНастроекПрогноза);
		
		// НастройкаПериода
		НП = Новый Структура;
		НП.Вставить("Период", Справочники.Периоды.ПустаяСсылка());
		НП.Вставить("ТекущаяДата", ТекущаяДата());
		ЗначенияНастроек.Вставить("НастройкаПериода", НП);
		
	Иначе
		ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Истина);
		ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);
	КонецЕсли;
	
	//ДинамическиеОтборы
	ЗначенияНастроек.Вставить("ДинамическиеОтборы", Новый Соответствие);
	
	Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;
	ПутьКСхемеОбъекта = ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);
	Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКСхемеОбъекта));
	СхемаОбъекта = ПолучитьИзВременногоХранилища(ПутьКСхемеОбъекта);
	ЗаполнитьЭлементы(Компоновщик.Настройки["ПараметрыДанных"], СхемаОбъекта.НастройкиПоУмолчанию["ПараметрыДанных"]);
	
	ЗначенияНастроек.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());
	
	
	// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
	// брать из значений по умолчанию или из запомненных значений
	ВидимостьСтраниц = Новый Соответствие;
	ВидимостьСтраниц.Вставить("Параметры", Истина);
	ВидимостьСтраниц.Вставить("Отбор", Истина);
	ВидимостьСтраниц.Вставить("Порядок", Ложь);
	ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);
	
	// Стандартный период
	ЗначенияНастроек.Вставить("СтандартныйПериод", Новый СтандартныйПериод);
	
	// Стандартная дата начала
	ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", Новый СтандартнаяДатаНачала);
	
	// Периодичность
	ЗначенияНастроек.Вставить("Периодичность", Перечисления.Периодичность.Месяц);
	ЗначенияНастроек.Вставить("СмещениеПериода", -1);
	
	Возврат ЗначенияНастроек;
	
КонецФункции

Функция СформироватьСхемуКомпоновкиДанных(Объект, УникальныйИдентификатор = Неопределено) Экспорт
	
	
	Если Объект.ВидПроизвольногоОтчета = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ИсточникДанныхОтчета) Тогда
			СКД = Новый СхемаКомпоновкиДанных;
		Иначе
			
			СКД = ТиповыеОтчетыУХ.ПолучитьСхемуКомпоновкиПоИсточникуДанных(Объект.ИсточникДанныхОтчета);
			Если СКД = Неопределено Тогда
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = Нстр("ru = 'Для источника данных не задана СКД. Измените источник данных'");
				СообщениеПользователю.Поле  = "ИсточникДанныхОтчета";
				СообщениеПользователю.Сообщить();
				СКД = Новый СхемаКомпоновкиДанных;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СКД = ПолучитьОбщийМакет("ВыводРезультата");
		
	КонецЕсли;
	
	Если Объект.ВидПроизвольногоОтчета = 1 Тогда
		ДополнитьСКДПараметрамиИсточника(Объект.Ссылка, СКД);
	КонецЕсли;

	Если УникальныйИдентификатор = Неопределено Тогда
		Возврат ПоместитьВоВременноеХранилище(СКД);
	Иначе
		Возврат ПоместитьВоВременноеХранилище(СКД, УникальныйИдентификатор);
	КонецЕсли;
	
КонецФункции

Процедура ДополнитьСКДПараметрамиИсточника(Объект, СКД)
	
	
	ТаблицаДобавляемыхПараметров = Новый ТаблицаЗначений;
	ТаблицаДобавляемыхПараметров.Колонки.Добавить("Имя");
	ТаблицаДобавляемыхПараметров.Колонки.Добавить("ТипЗначения");
			
	ДобавитьПараметрВТаблицу(ТаблицаДобавляемыхПараметров, "Организация"      , Тип("СправочникСсылка.Организации"));
	ДобавитьПараметрВТаблицу(ТаблицаДобавляемыхПараметров, "Сценарий"         , Тип("СправочникСсылка.Сценарии"));
	ДобавитьПараметрВТаблицу(ТаблицаДобавляемыхПараметров, "ПериодОтчета"     , Тип("СправочникСсылка.Периоды"));
	ДобавитьПараметрВТаблицу(ТаблицаДобавляемыхПараметров, "ОсновнаяВалюта"   , Тип("СправочникСсылка.Валюты"));
	
	Для Каждого Строка Из ТаблицаДобавляемыхПараметров Цикл
		
		Если СКД.Параметры.Найти(Строка.Имя) = Неопределено Тогда
							
			Параметр                          = СКД.Параметры.ДОбавить();
			Параметр.Имя                      = Строка.Имя;
			Параметр.ОграничениеИспользования = Ложь;
			
			МассивТипов                       = Новый Массив;
			МассивТипов.Добавить(Строка.ТипЗначения);
			
			Параметр.ТипЗначения = Новый ОписаниеТипов(МассивТипов);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПараметрВТаблицу(Таблица, ИмяПараметра, ТипПараметра)
	
	НайденныйЭлемент = Таблица.Найти(ИмяПараметра, "Имя");
	
	Если НайденныйЭлемент = Неопределено Тогда
		
		НоваяСтрока             = Таблица.Добавить();
		НоваяСтрока.Имя         = ИмяПараметра;
		НоваяСтрока.ТипЗначения = ТипПараметра;
		
	ИначеЕсли НЕ НайденныйЭлемент.ТипЗначения.СодержитТип(ТипПараметра) Тогда
		
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = Нстр("ru = 'Обнаружены параметры различного типа с одинаковым именем'");
		СообщениеПользователю.Сообщить();
		
	КонецЕсли;
	
КонецПроцедуры

Функция ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, Схема = Неопределено, ЗагружатьНастройкиПоУмолчанию = Ложь) Экспорт
	
	Если Не ТиповыеОтчетыУХ.ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных;
	КонецЕсли;
	
	Если Схема = Неопределено Тогда
		Схема = ОтчетОбъект.СхемаКомпоновкиДанных.Получить();
	КонецЕсли;
	
	Если Схема = Неопределено Тогда
		// Если схема компоновки еще не редактировалась, создадим новую
		Схема = Новый СхемаКомпоновкиДанных;
		ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Схема);
		
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(Схема)));
	
	Если ЗагружатьНастройкиПоУмолчанию Тогда
		
		// Загрузим настройки по умолчанию
		ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	
	Возврат Схема;
	
КонецФункции

Функция ДобавитьИЗаполнитьСтроку(Родитель, Использование, Имя, Представление)

	НоваяСтрока = Родитель.Строки.Добавить();
	НоваяСтрока.Использование = Использование;
	НоваяСтрока.Имя = Имя;
	НоваяСтрока.Представление = Представление;
	Возврат НоваяСтрока;
	
КонецФункции

Функция ДобавитьСтрокуПериодичности(Таблица, Периодичность, Использование)
	
	НоваяСтрока = Таблица.Добавить();
	НоваяСтрока.Периодичность = Периодичность;
	НоваяСтрока.Использование = Использование;
	Возврат НоваяСтрока;
	
КонецФункции

// Функция возвращает таблицу доступных вариантов настроек для объекта.
Функция ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, ТипНастройки, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь) Экспорт
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование КАК Наименование,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СохраненныеНастройкиПользователи.ПравоИзменения
	|					ИЛИ &ПолныеПраваУХ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПравоИзменения,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|ИЗ
	|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект
	|	И (СохраненныеНастройкиПользователи.Пользователь.Ссылка = &Пользователь
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка В
	|				(ВЫБРАТЬ
	|					ГруппыПользователейПользователиГруппы.Ссылка
	|				ИЗ
	|					Справочник.ГруппыПользователей.Состав КАК ГруппыПользователейПользователиГруппы
	|				ГДЕ
	|					ГруппыПользователейПользователиГруппы.Пользователь.Ссылка = &Пользователь)
	|			ИЛИ СохраненныеНастройкиПользователи.Пользователь.Ссылка = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ВсеПользователи))
	|	И (&СПомеченнымиНаУдаление ИЛИ НЕ СохраненныеНастройкиПользователи.Ссылка.ПометкаУдаления)
	|	И (НЕ СохраненныеНастройкиПользователи.Ссылка.ЭтоГруппа)
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|
	|СГРУППИРОВАТЬ ПО
	|	СохраненныеНастройкиПользователи.Ссылка,
	|	СохраненныеНастройкиПользователи.Ссылка.Наименование,
	|	СохраненныеНастройкиПользователи.Ссылка.Описание
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	Запрос.УстановитьПараметр("ТипНастройки", ТипНастройки);
	Запрос.УстановитьПараметр("ПолныеПраваУХ", Пользователи.ЭтоПолноправныйПользователь());
	Запрос.УстановитьПараметр("СПомеченнымиНаУдаление", СПомеченнымиНаУдаление);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект) Экспорт
	
	ТаблицаВариантовОтчета = ПолучитьТаблицуДоступныхВариантов(ПолучитьИдентификаторОбъекта(ОтчетОбъект),Перечисления.ТипыНастроек.НастройкиОтчета, Пользователи.ТекущийПользователь());
	
	//Добавление основной настройки
	НоваяСтрока = ТаблицаВариантовОтчета.Вставить(0);
	НоваяСтрока.Ссылка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	
	//НоваяСтрока.Наименование = "<Основной вариант отчета>";
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		НоваяСтрока.Наименование = ОтчетОбъект.Наименование;
	Иначе
		НоваяСтрока.Наименование = ОтчетОбъект.Метаданные().Синоним;
	КонецЕсли;
	
	НоваяСтрока.Описание = Нстр("ru = 'Основной вариант отчета, отображаемый всем пользователям'");
	НоваяСтрока.ПравоИзменения = Ложь;
	
	Возврат ТаблицаВариантовОтчета;
	
КонецФункции

Функция ПолучитьИдентификаторОбъекта(ОтчетОбъект) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОтчетОбъект)) Тогда
			Возврат ОтчетОбъект;
		Иначе
			СсылкаНаОбъект = ?(ОтчетОбъект.ЭтоНовый(), ОтчетОбъект.ПолучитьСсылкуНового(), ОтчетОбъект.Ссылка); 
			Возврат СсылкаНаОбъект;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ОтчетОбъект) = Тип("Строка") Тогда
		Возврат ОтчетОбъект;
	Иначе
		
		Если Метаданные.Отчеты.Содержит(ОтчетОбъект.Метаданные()) ИЛИ ОтчетОбъект.Метаданные().Имя="ПроизвольныеОтчеты" Тогда 	
			Возврат "ОтчетОбъект." + ОтчетОбъект.Метаданные().Имя;
		ИначеЕсли  Метаданные.Обработки.Содержит(ОтчетОбъект.Метаданные()) Тогда
			Возврат "ОбработкаОбъект." + ОтчетОбъект.Метаданные().Имя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект) Экспорт
	
	СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект); 
	НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);
	Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);
	Если Настройка <> Неопределено Тогда
		Настройка = Настройка.ПолучитьОбъект();
		Значение = Настройка.ХранилищеНастроек.Получить();
		ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(Значение["ЗначенияНастроекПанелиПользователя"]);
	Иначе
		ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект, Пользователь = Неопределено)
	
	Если Пользователь = Неопределено Тогда
		Пользователь = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	СохраненныеНастройкиПользователи.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Пользователь = &Пользователь
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|	И СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект";
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета);
	Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, Настройки) Экспорт
	
	СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект); 
	НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);
	
	Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);
	Если Настройка <> Неопределено Тогда
		Настройка = Настройка.ПолучитьОбъект();
		Значение = Настройка.ХранилищеНастроек.Получить();
	Иначе
		Настройка = Справочники.СохраненныеНастройки.СоздатьЭлемент();
		Настройка.НастраиваемыйОбъект = НастраиваемыйОбъект;
		Настройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета;
		Настройка.Владелец = Пользователи.ТекущийПользователь();
		Настройка.Наименование = "НастройкиПользователяНастройкиОтчета";
		НовыйПользователь = Настройка.Пользователи.Добавить();
		НовыйПользователь.Пользователь = Пользователи.ТекущийПользователь();
		Значение = Новый Соответствие;
	КонецЕсли;
	Значение["ЗначенияНастроекПанелиПользователя"] = Настройки;
	Настройка.ХранилищеНастроек = Новый ХранилищеЗначения(Значение);
	Настройка.Записать();
	
КонецПроцедуры

Функция ПолучитьЗначенияЭлементаСтруктуры(Структура, Ключ) Экспорт
	
	Если Структура = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	Значение = Неопределено;
	Структура.Свойство(Ключ, Значение);
	Возврат Значение;
	
КонецФункции

Функция ПолучитьПользовательскиеПоляДляНастройкиABCКлассификации(КомпоновщикНастроек) Экспорт
	
	СписокПользовательскихПолей = Новый СписокЗначений;
	СписокПользовательскихПолей.Добавить("", "");
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> Неопределено 
		   И ТипЗнч(ПользовательскоеПоле) <> Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных")
		   И ПользовательскоеПоле.Варианты.Элементы.Количество() > 0 
		   И ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы" Тогда
			СписокПользовательскихПолей.Добавить(ПользовательскоеПоле.ПутьКДанным, ПользовательскоеПоле.Заголовок);
		КонецЕсли;
	КонецЦикла; 
	
	Возврат СписокПользовательскихПолей;
	
КонецФункции

// Возвращает компоновщик настроек по схеме компоновки и настройкам компоновщика
Функция ПолучитьКомопновщикПоСхемеИНастройкам(Схема, Настройки = Неопределено) Экспорт
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));
	Если Настройки <> Неопределено Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	Иначе
		КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);
	КонецЕсли;
	Возврат КомпоновщикНастроек;
	
КонецФункции

// Добавляет в группировку автоэлемент порядка
Процедура ДобавитьАвтоЭлементПорядка(Строка) Экспорт
	
	ПолеПолеПорядок = Строка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
КонецПроцедуры

// Возвращает представление по типу элемента структуры
Функция ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементСтруктуры) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Возврат Перечисления.ПредставленияЭлементовОтчетов.Таблица;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Возврат Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица;
	ИначеЕсли ТипЗнч(ЭлементСтруктуры) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Возврат Перечисления.ПредставленияЭлементовОтчетов.Диаграмма;
	КонецЕсли;
	
КонецФункции

// Возвращает тип элемента структуры по представлению
Функция ПолучитьТипЭлементаПоПредставлению(Представление) Экспорт
	
	Если Представление = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Возврат Тип("ГруппировкаКомпоновкиДанных")
	ИначеЕсли Представление = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Возврат Тип("ТаблицаКомпоновкиДанных")
	ИначеЕсли Представление = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Возврат Тип("ДиаграммаКомпоновкиДанных")
	КонецЕсли;
	
КонецФункции

//Процедура назначает форме уникальный ключ идентификации для возможности открытия нескольких одинаковых форм
Процедура НазначитьФормеУникальныйКлючИдентификации(Форма) Экспорт
	
	Если Форма.КлючУникальности = Неопределено Тогда
		Форма.КлючУникальности = Новый УникальныйИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбщиеПроцедурыОтчетов

// Скрывает или отображает быстрый отбор на форме
Процедура УправлениеОтображениемЭлементовФормыТиповогоОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
	Иначе
		Если Не ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
			
			ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект, ФормаОтчета);
			ЗначенияНастроек["ВыводитьЗаголовокОтчета"] = ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка;
			ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначенияНастроек);
			
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Скрывает и показывает заголовок типового отчета
Процедура УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, Результат) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) 
	 ИЛИ ОтчетОбъект.РасширеннаяНастройка 
	 ИЛИ Результат.ВысотаТаблицы = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбластьЗаголовок = Результат.Области.Найти("Заголовок");
	Если ОбластьЗаголовок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		ПоказыватьЗаголовок = (ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);
	Иначе
		ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
		ПоказыватьЗаголовок = ЗначенияНастроек["ВыводитьЗаголовокОтчета"];
	КонецЕсли;
	
	ОбластьЗаголовок.Видимость = ПоказыватьЗаголовок;
	
КонецПроцедуры

Функция ПолучитьОписаниеНастроекОтчета(КомпоновщикНастроек)
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Период
	ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
	ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
	ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
	
	ОписаниеПериода = "";
	Если ЗначениеПараметраНачалоПериода <> Неопределено 
	   И ЗначениеПараметраКонецПериода <> Неопределено Тогда
		НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;
		КонецПериода = ЗначениеПараметраКонецПериода.Значение;
		Если ТипЗнч(НачалоПериода) = Тип("СтандартнаяДатаНачала") Тогда
		   НачалоПериода = НачалоПериода.Дата;
		КонецЕсли;
	    Если ТипЗнч(КонецПериода) = Тип("СтандартнаяДатаНачала") Тогда
			КонецПериода = КонецПериода.Дата;
		КонецЕсли;
		Если НачалоПериода = '00010101' И КонецПериода = '00010101' Тогда
			ОписаниеПериода = НСтр("ru='Период не установлен'");
		ИначеЕсли НачалоПериода = '00010101' ИЛИ КонецПериода = '00010101' Тогда
			ОписаниеПериода = Формат(НачалоПериода, "ДФ = дд.ММ.гггг; ДП = ...") + " - " + Формат(КонецПериода, "ДФ = дд.ММ.гггг; ДП = ...");
		ИначеЕсли НачалоПериода <= КонецПериода Тогда
			ОписаниеПериода = ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), Нстр("ru = 'ФП = Истина'"));
		Иначе
			ОписаниеПериода = НСтр("ru='Неправильно задан период!'");
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеПараметраПериод <> Неопределено Тогда
		Период = ЗначениеПараметраПериод.Значение;
		Если Период = '00010101' Тогда
			ОписаниеПериода = НСтр("ru='на '") + Формат(ТекущаяДата(), "ДП = ...");
		Иначе
			ОписаниеПериода = НСтр("ru='на конец дня '") + Формат(Период, Нстр("ru = 'ДФ = дд.ММ.гггг; ДП = ...'"));
		КонецЕсли;
	КонецЕсли;

	Если Не ПустаяСтрока(ОписаниеПериода) Тогда
		ОписаниеПериода = СтрШаблон(Нстр("ru = 'Период: %1%2'"), ОписаниеПериода, Символы.ПС);
	КонецЕсли;
	
	ЭлементОтчета = КомпоновщикНастроек.Настройки.Структура[0];
	ПредставлениеЭлементаОтчета = ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементОтчета);
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Строки = ПолучитьМассивГруппировок(ЭлементОтчета, КомпоновщикНастроек);
		ТипСтрок = Нстр("ru = 'Группировки строк'");
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Если ЭлементОтчета.Строки.Количество() > 0 Тогда
			Строки = ПолучитьМассивГруппировок(ЭлементОтчета.Строки[0], КомпоновщикНастроек);
		Иначе
			Строки = Новый Массив;
		КонецЕсли;
		ТипСтрок = Нстр("ru = 'Группировки строк'");
		Если ЭлементОтчета.Колонки.Количество() > 0 Тогда
			Колонки = ПолучитьМассивГруппировок(ЭлементОтчета.Колонки[0], КомпоновщикНастроек); 
		Иначе
			Колонки = Новый Массив;
		КонецЕсли;
		ТипКолонок = Нстр("ru = 'Группировки колонок'");
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Если ЭлементОтчета.Серии.Количество() > 0 Тогда
			Строки = ПолучитьМассивГруппировок(ЭлементОтчета.Серии[0], КомпоновщикНастроек);
		Иначе
			Строки = Новый Массив;
		КонецЕсли;
		ТипСтрок = Нстр("ru = 'Группировки серий'");
		Если ЭлементОтчета.Точки.Количество() > 0 Тогда
			Колонки = ПолучитьМассивГруппировок(ЭлементОтчета.Точки[0], КомпоновщикНастроек); 
		Иначе
			Колонки = Новый Массив;
		КонецЕсли;
		ТипКолонок = Нстр("ru = 'Группировки точек'");
	КонецЕсли;
	
	Показатели = ПолучитьПоказатели(КомпоновщикНастроек);
	ДополнительныеПоля = ПолучитьДополнительныеПоля(КомпоновщикНастроек);
	
	СтрокаОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);
	ОписаниеНастроекОтчета = 
	ОписаниеПериода +
	СформироватьСтрокуПолей(ТипСтрок, Строки) + 
	СформироватьСтрокуПолей(ТипКолонок, Колонки) + 
	СформироватьСтрокуПолей(Нстр("ru = 'Дополнительные поля'"), ДополнительныеПоля) +
	СформироватьСтрокуПолей("Показатели", Показатели) +
	?(ПустаяСтрока(СтрокаОтбор) , "", СтрШаблон(Нстр("ru = 'Отбор: %1'"), СтрокаОтбор));
	
	Возврат ОписаниеНастроекОтчета;		
	
КонецФункции

Функция СформироватьСтрокуПолей(ТипПолей, МассивПолей)
	
	Если МассивПолей = Неопределено ИЛИ МассивПолей.Количество() = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	СтрокаПолей = ТипПолей + ": ";
	Для каждого Поле Из МассивПолей Цикл
		СтрокаПолей = СтрокаПолей + Поле + "; ";
	КонецЦикла;
	
	СтрокаПолей = СтрокаПолей + Символы.ПС;     	
	
	Возврат СтрокаПолей;
	
КонецФункции

Функция ПолучитьПоказатели(КомпоновщикНастроек)
	
	Элементы = Новый Массив;
	ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
		Если ДоступноеПоле <> Неопределено и ДоступноеПоле.Ресурс Тогда
			Элементы.Добавить(ДоступноеПоле.Заголовок);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Элементы;
	
КонецФункции

Функция ПолучитьДополнительныеПоля(КомпоновщикНастроек)
	
	Элементы = Новый Массив;
	ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ДоступноеПоле = ПолучитьДоступноеПоле(ВыбранноеПоле.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
		Если ДоступноеПоле <> Неопределено И Не ДоступноеПоле.Ресурс Тогда
			Элементы.Добавить(ДоступноеПоле.Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Элементы;
	
КонецФункции

Функция ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке) Экспорт
	
	Пока ИнформацияОбОшибке.Причина <> Неопределено Цикл
		ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;
	КонецЦикла;
	Возврат ИнформацияОбОшибке.Описание;

КонецФункции

// Обновляет заголовок типового отчета
Процедура ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета) Экспорт
	
	ФормаОтчета.Заголовок = ПолучитьЗаголовокОтчета(ОтчетОбъект, ФормаОтчета);
		
КонецПроцедуры

Функция ПолучитьЗаголовокОтчета(ОтчетОбъект, ФормаОтчета = Неопределено) Экспорт
	
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		Если ФормаОтчета.РежимРедактированияНастройки Тогда
			Заголовок = СтрШаблон(Нстр("ru = 'Отчет: %1: %2'"), ОтчетОбъект.Наименование, ФормаОтчета.ПредставлениеНастройки);
		ИначеЕсли ОтчетОбъект.СохраненнаяНастройка.Пустая() ИЛИ ОтчетОбъект.СохраненнаяНастройка.ХранилищеНастроек.Получить() = Неопределено Тогда
			Заголовок = СтрШаблон(Нстр("ru = 'Отчет: %1'"), ОтчетОбъект.Наименование);
		Иначе
			Заголовок = СтрШаблон(Нстр("ru = 'Отчет: %1 [%2]'"), ОтчетОбъект.Наименование, ОтчетОбъект.СохраненнаяНастройка);
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

Функция ЭтоДетальнаяЗапись(ДанныеРасшифровки, Расшифровка) Экспорт
	
	ЭтоДетальнаяЗапись = Ложь;
	Элемент = ДанныеРасшифровки.Элементы[Расшифровка];
	Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Элементы = Элемент.ПолучитьРодителей();
		Если Элементы.Количество() > 0 Тогда
			Элемент = Элементы[0];
			Если ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка") Тогда
				ЭтоДетальнаяЗапись = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат ЭтоДетальнаяЗапись;
	
КонецФункции

// Возвращает картинку представления элемента отчета
Функция ПолучитьКартинкуПредставленияЭлементаОтчета(ПредставлениеЭлементаОтчета) Экспорт
	
	Если ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица Тогда
		Возврат  БиблиотекаКартинок.ВнешнийИсточникДанныхТаблица;
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.КроссТаблица Тогда
		Возврат  БиблиотекаКартинок.КроссТаблица;
	ИначеЕсли ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Диаграмма Тогда
		Возврат БиблиотекаКартинок.Диаграмма;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

Функция ПолучитьСписокДоступныхВариантов(НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь) Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	
	СправочникПанелиОтчетов = "ПанелиОтчетов";
	Если Метаданные.Справочники.Найти(СправочникПанелиОтчетов) <> Неопределено 
			И ТипЗнч(НастраиваемыйОбъект) = Тип("СправочникСсылка." + СправочникПанелиОтчетов) Тогда
		ТипНастройки = Перечисления.ТипыНастроек.НастройкиПанели;
	ИначеЕсли СтрНайти(НастраиваемыйОбъект, "ОбработкаОбъект") > 0 Тогда
		ТипНастройки=Перечисления.ТипыНастроек.НастройкиОбработки;
	ИначеЕсли СтрНайти(НастраиваемыйОбъект, "ДокументСписок") > 0 Тогда
		ТипНастройки = Перечисления.ТипыНастроек.НастройкиФормы;
	Иначе
		ТипНастройки=Перечисления.ТипыНастроек.НастройкиОтчета;
	КонецЕсли;
	
	ТаблицаДоступныхНастроек = ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, ТипНастройки, Пользователь, СПомеченнымиНаУдаление);
	Для каждого Строка Из ТаблицаДоступныхНастроек Цикл
		СписокНастроек.Добавить(Строка.Ссылка, Строка.Наименование, Строка.ПравоИзменения);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(СписокНастроек);
	
КонецФункции

Функция ПолучитьСписокДоступныхВариантовДляПанелиОтчетов(ПанельОтчетов, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь) Экспорт
	
	СписокНастроек = Новый СписокЗначений;
	
	ТаблицаДоступныхНастроек = ПолучитьТаблицуДоступныхВариантов(ПанельОтчетов, Перечисления.ТипыНастроек.НастройкиПанели, Пользователь, СПомеченнымиНаУдаление);
	Для Каждого Строка Из ТаблицаДоступныхНастроек Цикл
		СписокНастроек.Добавить(Строка.Ссылка, Строка.Наименование, Строка.ПравоИзменения);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(СписокНастроек);
	
КонецФункции

Функция НастройкиКомпоновщикаПростые(КомпоновщикНастроек) Экспорт
	
	Если КомпоновщикНастроек.Настройки.Структура.Количество() = 1 Тогда
		Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ГруппировкаКомпоновкиДанных") Тогда
			Возврат ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0]);
		ИначеЕсли ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ТаблицаКомпоновкиДанных") Тогда
			Возврат ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Строки)
			      И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Колонки)
				  И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0]);
		ИначеЕсли ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") Тогда
			Возврат ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Серии)
			      И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0].Точки)
				  И ЭтоПростаяСтруктура(КомпоновщикНастроек.Настройки.Структура[0]);
		КонецЕсли;
	ИначеЕсли КомпоновщикНастроек.Настройки.Структура.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
				
	Возврат Ложь;
	
КонецФункции

Функция ЭтоПростаяСтруктура(Структура)
	
	// Количество структур везде должно быть 1
	// Таблица и Диаграмма могут быть только на верхнем уровне
	НастройкиПростые = Истина;
	Если ТипЗнч(Структура) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
	 ИЛИ ТипЗнч(Структура) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
		Если Структура.Количество() > 1
		ИЛИ (Структура.Количество() = 1 И Не ЭтоПростаяСтруктура(Структура[0])) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") 
		  ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		  ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Если Структура.Структура.Количество() > 1
		   ИЛИ (Структура.Структура.Количество() = 1 И Не ЭтоПростаяСтруктура(Структура.Структура[0])) Тогда
			Возврат Ложь;
		КонецЕсли;
		Если Структура.Выбор.Элементы.Количество() <> 1 ИЛИ ТипЗнч(Структура.Выбор.Элементы[0]) <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		 ИЛИ Структура.Порядок.Элементы.Количество() <> 1 ИЛИ ТипЗнч(Структура.Порядок.Элементы[0]) <> Тип("АвтоЭлементПорядкаКомпоновкиДанных")
		 ИЛИ Структура.Отбор.Элементы.Количество() > 0
		 ИЛИ Структура.УсловноеОформление.Элементы.Количество() > 0
		 ИЛИ Структура.ПоляГруппировки.Элементы.Количество() > 1 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ЭтоПростаяСтруктура(Структура.ПараметрыВывода);
	ИначеЕсли ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") Тогда
		Если Структура.Выбор.Элементы.Количество() <> 0
		 ИЛИ Структура.УсловноеОформление.Элементы.Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ЭтоПростаяСтруктура(Структура.ПараметрыВывода);
	ИначеЕсли ТипЗнч(Структура) = Тип("ДиаграммаКомпоновкиДанных") Тогда
		Если Структура.Выбор.Элементы.Количество() <> 1 ИЛИ ТипЗнч(Структура.Выбор.Элементы[0]) <> Тип("АвтоВыбранноеПолеКомпоновкиДанных")
		 ИЛИ Структура.УсловноеОформление.Элементы.Количество() > 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		Возврат ЭтоПростаяСтруктура(Структура.ПараметрыВывода);
	ИначеЕсли ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаГруппировкиКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаГруппировкиТаблицыКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаГруппировкиДиаграммыКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаТаблицыКомпоновкиДанных")
		  ИЛИ ТипЗнч(Структура) = Тип("ЗначенияПараметровВыводаДиаграммыКомпоновкиДанных") Тогда
		  
		Для каждого Элемент Из Структура.Элементы Цикл
			Если Элемент.Использование Тогда
				Возврат Ложь;
			КонецЕсли;
			НастройкиПростые = ЭтоПростаяСтруктура(Элемент.ЗначенияВложенныхПараметров);
			Если Не НастройкиПростые Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТипЗнч(Структура) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных") Тогда
		Для каждого Элемент Из Структура Цикл
			Если Элемент.Использование Тогда
				Возврат Ложь;
			КонецЕсли;
			НастройкиПростые = ЭтоПростаяСтруктура(Элемент.ЗначенияВложенныхПараметров);
			Если Не НастройкиПростые Тогда
				Возврат Ложь;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	Возврат Истина;

КонецФункции

Процедура ОбновитьЦветаДиаграммы(Результат, ТаблицаЦветовСерий) Экспорт
	
	Если ТаблицаЦветовСерий = Неопределено 
	 ИЛИ ТаблицаЦветовСерий.Колонки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Рисунки = Результат.Рисунки;
	Для каждого Рисунок Из Рисунки Цикл
		Если ТипЗнч(Рисунок.Объект) <> Тип("Диаграмма") Тогда
			Продолжить;
		КонецЕсли;
		Серии = Рисунок.Объект.Серии;
		Для каждого Серия Из Серии Цикл
			СтруктураПоиска = Новый Структура("Текст", Серия.Текст);
			МассивЦветовСерий = ТаблицаЦветовСерий.НайтиСтроки(СтруктураПоиска);
			Если МассивЦветовСерий.Количество() > 0 Тогда
				Серия.Цвет = МассивЦветовСерий[0].Цвет;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаписьОтчетаДоступна(ОтчетОбъект, ПроверяемаяСохраненнаяНастройка = Неопределено) Экспорт
	
	Если ПроверяемаяСохраненнаяНастройка = Неопределено Тогда
		ПроверяемаяСохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;
	КонецЕсли;
		
	СписокДоступныхНастроек = ПолучитьИзВременногоХранилища(ТиповыеОтчетыУХ.ПолучитьСписокДоступныхВариантов(ТиповыеОтчетыУХ.ПолучитьИдентификаторОбъекта(ОтчетОбъект), Пользователи.ТекущийПользователь()));
	Элемент = СписокДоступныхНастроек.НайтиПоЗначению(ПроверяемаяСохраненнаяНастройка);
	Если ЭтоПроизвольныйОтчет(ОтчетОбъект) Тогда
		ПользовательНайден = Ложь;
		Если ТипЗнч(ОтчетОбъект.Ссылка.Владелец) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
			Если ОтчетОбъект.Ссылка.Владелец = Справочники.ГруппыПользователей.ВсеПользователи Тогда
				ПользовательНайден = Истина;
			Иначе
				ПользовательНайден = ОтчетОбъект.Ссылка.Владелец.Состав.Найти(Пользователи.ТекущийПользователь(), "Пользователь") <> Неопределено;
			КонецЕсли;
	
		Иначе
			ПользовательНайден = (ОтчетОбъект.Ссылка.Владелец = Пользователи.ТекущийПользователь());
		КонецЕсли;
		
			
			
		Возврат ОтчетОбъект.ЭтоНовый()
			ИЛИ ПроверяемаяСохраненнаяНастройка.Пустая() И ПользовательНайден
			ИЛИ Элемент <> Неопределено И Элемент.Пометка
			ИЛИ Пользователи.ЭтоПолноправныйПользователь();
	Иначе
		Если ПроверяемаяСохраненнаяНастройка.Пустая() Тогда
			// Основную настройку типового отчета сохранять нельзя
			Возврат Ложь;
		Иначе
			Возврат Элемент <> Неопределено И Элемент.Пометка 
		        ИЛИ Пользователи.ЭтоПолноправныйПользователь();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ВернутьКодПредставленияТренда(КодТренда) Экспорт
	
	Если КодТренда = 0 Тогда
		Возврат БиблиотекаКартинок.СостояниеХорошее; // Состояние хорошее
	ИначеЕсли КодТренда = 1 Тогда
		Возврат БиблиотекаКартинок.СостояниеУдовлетворительное;   // Состояние удовлетворительное
	ИначеЕсли КодТренда = 2 Тогда
		Возврат БиблиотекаКартинок.СостояниеТревожное; // Состояние тревожное
	ИначеЕсли КодТренда = 3 Тогда
		Возврат БиблиотекаКартинок.ЧерныйТреугольникВверх;       // Тренд положительный
	ИначеЕсли КодТренда = 4 Тогда
		Возврат БиблиотекаКартинок.ЧерныйТреугольникВправо;   // Тренд нулевой
	ИначеЕсли КодТренда = 5 Тогда
		Возврат БиблиотекаКартинок.ЧерныйТреугольникВниз;     // Тренд отрицательный
	Иначе
		Возврат Новый Картинка;  // Неопределено
	КонецЕсли;
	
КонецФункции

Функция ВернутьЦветТрендаПоПредставлению(Представление) Экспорт
	
	Если Представление = БиблиотекаКартинок.СостояниеХорошее Тогда
		Возврат Новый Цвет(192, 220, 192);
	ИначеЕсли Представление = БиблиотекаКартинок.СостояниеУдовлетворительное Тогда
		Возврат Новый Цвет(255, 255, 190);
	ИначеЕсли Представление = БиблиотекаКартинок.СостояниеТревожное Тогда
		Возврат Новый Цвет(245, 160, 140);
	Иначе
		Возврат Новый Цвет;
	КонецЕсли;
	
КонецФункции

Процедура ОтобразитьТрендГрафически(ТаблДок) Экспорт
	
	ОтобразитьВидТрендаГрафически(ТаблДок, ВернутьКодПредставленияТренда(0), БиблиотекаКартинок.СостояниеХорошее);
	ОтобразитьВидТрендаГрафически(ТаблДок, ВернутьКодПредставленияТренда(1), БиблиотекаКартинок.СостояниеУдовлетворительное);
	ОтобразитьВидТрендаГрафически(ТаблДок, ВернутьКодПредставленияТренда(2), БиблиотекаКартинок.СостояниеТревожное);
	ОтобразитьВидТрендаГрафически(ТаблДок, ВернутьКодПредставленияТренда(3), БиблиотекаКартинок.СтрелкаВверх);
	ОтобразитьВидТрендаГрафически(ТаблДок, ВернутьКодПредставленияТренда(4), БиблиотекаКартинок.СтрелкаВправо);
	ОтобразитьВидТрендаГрафически(ТаблДок, ВернутьКодПредставленияТренда(5), БиблиотекаКартинок.СтрелкаВниз);
	
КонецПроцедуры

Процедура ОтобразитьВидТрендаГрафически(ТаблДок, СтрокаПоиска, Картинка)
	
	ОбластьПоиска = ТаблДок.НайтиТекст(СтрокаПоиска);
	
	Пока ОбластьПоиска <> Неопределено Цикл
		
		НовыйРисунок = ТаблДок.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
		НовыйРисунок.ГраницаСлева  = Ложь;
		НовыйРисунок.ГраницаСправа = Ложь;
		НовыйРисунок.ГраницаСверху = Ложь;
		НовыйРисунок.ГраницаСнизу  = Ложь;
		
		НовыйРисунок.картинка = Картинка;
		НовыйРисунок.Расположить(ОбластьПоиска);
		НовыйРисунок.РазмерКартинки          = РазмерКартинки.АвтоРазмер;
		НовыйРисунок.Лево   = НовыйРисунок.Лево;
		НовыйРисунок.Верх   = НовыйРисунок.Верх;
		НовыйРисунок.Ширина = НовыйРисунок.Ширина - 1;
		НовыйРисунок.Высота = НовыйРисунок.Высота - 1;
		ОбластьПоиска.Текст                  = "";
		
		ОбластьПоиска = ТаблДок.НайтиТекст(СтрокаПоиска, ОбластьПоиска);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ Управляемого режима.
//

#Область ВидыОтчетов_ИсточникиДанных

Функция ПолучитьСхемуКомпоновкиПоИсточникуДанных(ИсточникДанных) Экспорт
	
	СправочникПоказателиМонитораКлючевыхПоказателей = "ПоказателиМонитораКлючевыхПоказателей";
	СправочникЗапросы = "Запросы";
	Если Метаданные.Справочники.Найти(СправочникПоказателиМонитораКлючевыхПоказателей) <> Неопределено 
			И ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка." + СправочникПоказателиМонитораКлючевыхПоказателей) Тогда
		// Показатели монитора эффективности не имеют собственной схемы компоновки данных
		СКДИсточника = ПолучитьОбщийМакет("ВыводРезультата");
	ИначеЕсли Метаданные.Справочники.Найти(СправочникЗапросы) <> Неопределено 
			И ТипЗнч(ИсточникДанных) = Тип("СправочникСсылка." + СправочникЗапросы) Тогда
		СКДИсточника = ИсточникДанных.СхемаКомпоновкиДанных.Получить();
	ИначеЕсли ИсточникДанных.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		СКДИсточника = СформироватьСКДПоИсточникуПоказатель(ИсточникДанных);
	Иначе	
		СКДИсточника = СформироватьСКДПоИсточнику(ИсточникДанных);
	КонецЕсли;
	
	Возврат СКДИсточника;
	
КонецФункции

// Вовзращает описание типа для поля по имени поля ИмяПоляВход по значениям
// вида аналитик из операнда ОперандВход. Когда не удалось получить значение,
// возвращает описание строкового типа.
Функция ПолучитьОписаниеТипаПоАналитике(ИмяПоляВход, ОперандВход)
	ОписаниеСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная));
	РезультатФункции = ОписаниеСтрока;
	Если ЗначениеЗаполнено(ОперандВход) Тогда
		ИмяПоляРабочий = СокрЛП(ИмяПоляВход);
		ЭтоАналитика1 = (ИмяПоляРабочий = "Аналитика1");
		ЭтоАналитика2 = (ИмяПоляРабочий = "Аналитика2");
		ЭтоАналитика3 = (ИмяПоляРабочий = "Аналитика3");
		ЭтоАналитика4 = (ИмяПоляРабочий = "Аналитика4");
		ЭтоАналитика5 = (ИмяПоляРабочий = "Аналитика5");
		ЭтоАналитика6 = (ИмяПоляРабочий = "Аналитика6");
		ЭтоАналитикаПоказателя = (ЭтоАналитика1 ИЛИ ЭтоАналитика2 ИЛи ЭтоАналитика3 ИЛИ ЭтоАналитика4 ИЛИ ЭтоАналитика5 ИЛИ ЭтоАналитика6);
		Если ЭтоАналитикаПоказателя Тогда
			Если ЗначениеЗаполнено(ОперандВход.ПоказательОтбор) Тогда
				Если ЗначениеЗаполнено(ОперандВход.ПоказательОтбор.ГруппаРаскрытия) Тогда
					ТекВидАналитики = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
					Если ЭтоАналитика1 Тогда
						ТекВидАналитики = ОперандВход.ПоказательОтбор.ГруппаРаскрытия.ВидАналитики1;
					ИначеЕсли ЭтоАналитика2 Тогда
						ТекВидАналитики = ОперандВход.ПоказательОтбор.ГруппаРаскрытия.ВидАналитики2;
					ИначеЕсли ЭтоАналитика3 Тогда
						ТекВидАналитики = ОперандВход.ПоказательОтбор.ГруппаРаскрытия.ВидАналитики3;
					ИначеЕсли ЭтоАналитика4 Тогда
						ТекВидАналитики = ОперандВход.ПоказательОтбор.ГруппаРаскрытия.ВидАналитики4;
					ИначеЕсли ЭтоАналитика5 Тогда
						ТекВидАналитики = ОперандВход.ПоказательОтбор.ГруппаРаскрытия.ВидАналитики5;
					ИначеЕсли ЭтоАналитика6 Тогда
						ТекВидАналитики = ОперандВход.ПоказательОтбор.ГруппаРаскрытия.ВидАналитики6;
					Иначе
						ТекВидАналитики = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка();
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекВидАналитики) Тогда
						РезультатФункции = ТекВидАналитики.ТипЗначения;
					Иначе
						РезультатФункции = ОписаниеСтрока;
					КонецЕсли;	
				Иначе
					РезультатФункции = ОписаниеСтрока;
				КонецЕсли;
			Иначе
				РезультатФункции = ОписаниеСтрока;
			КонецЕсли;
		Иначе
			РезультатФункции = ОписаниеСтрока;
		КонецЕсли;
	Иначе
		РезультатФункции = ОписаниеСтрока;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция СформироватьСКДПоИсточникуПоказатель(ИсточникДанныхДляРасчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Синоним,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле,
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики,
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия = СоответствиеВнешнимИБ.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанныхДляРасчетов";
	
	Запрос.УстановитьПараметр("ИсточникДанныхДляРасчетов", ИсточникДанныхДляРасчетов);
	
	ОбъектИсточник=ИсточникДанныхДляРасчетов.ПолучитьОбъект();
	ОбъектИсточник.ПодготовитьТаблицыСопоставленийИОтборов();
	
	МассивРесурсов = Новый Массив;
	ТипЧисло       = Тип("Число");
	
	Таблица=ОбъектИсточник.мТаблицаПоказателейБД;
	
	Для Каждого Элемент Из Таблица Цикл
		Если Элемент.ТипЗначения.НайтиПоЗначению(ТипЧисло) <> Неопределено Тогда
			МассивРесурсов.Добавить(Элемент.ПолеБД);
		КонецЕсли;
	КонецЦикла;
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных             = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя         = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных                = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИмяОбъекта     = "ИсточникДанныхДляРасчетов";
	НаборДанных.ИсточникДанных = "ИсточникДанных";	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		
		Если МассивРесурсов.Найти(Выборка.Поле) <> Неопределено Тогда
			
			ПолеИтога = СКД.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = Выборка.Поле;
			ПолеИтога.Выражение   = "СУММА(" +Выборка.Поле + ")";

			Поле.Заголовок   = СтрЗаменить(Выборка.Синоним,"Показатель__","");
			Поле.Поле        = Выборка.Поле;
			Поле.ПутьКДанным = Выборка.Поле;
			Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 5));
			
		ИначеЕсли Выборка.КодАналитики = "Значение" Тогда
			
			ПолеИтога = СКД.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = Выборка.Поле;
			ПолеИтога.Выражение   = "СУММА(" +Выборка.Поле + ")";

			Поле.Заголовок   = Выборка.Синоним;
			Поле.Поле        = Выборка.Поле;
			Поле.ПутьКДанным = Выборка.Поле;
			Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 5));

		Иначе
			
			Поле.Заголовок   = Выборка.Синоним;
			Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				 Поле.Заголовок   = СтрЗАменить(Поле.Заголовок,"Аналитика"+Строка(Инд)+"__","");
			КонецЦикла;
			
			Поле.Поле        = СтрЗаменить(Выборка.Поле,"Версия.","");
			Поле.ПутьКДанным = СтрЗаменить(Выборка.Поле,"Версия.","");
			
							
			Если Выборка.ТипОбъектаКонсолидации = NULL Тогда
				НовыйТипПоля = ПолучитьОписаниеТипаПоАналитике(Выборка.Поле, Выборка.Ссылка);
				Поле.ТипЗначения = НовыйТипПоля;
			ИначеЕсли Выборка.ТипОбъектаКонсолидации = "ВидСубконто" Тогда
				Поле.ТипЗначения = Выборка.ИмяОбъектаМетаданных.ТипЗначения;
			Иначе
				Поле.ТипЗначения = Новый ОписаниеТипов(Выборка.ТипОБъектаКонсолидации + "Ссылка." + Выборка.ИмяОбъектаМетаданных);
			КонецЕсли;
			
			Если Выборка.Поле="Версия.ПериодОтчета" Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");	
			ИначеЕсли  Выборка.Поле="Версия.Сценарий" Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
			ИначеЕсли  Выборка.Поле="Версия.Организация" Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
			ИначеЕсли  Выборка.Поле="Версия.Проект" Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Проекты");
			КонецЕсли;	
	
		КонецЕсли;	
		
	КонецЦикла;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Организация";
	НовыйПараметр.Заголовок = Нстр("ru = 'Организационная единица отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Сценарий";
	НовыйПараметр.Заголовок = Нстр("ru = 'Сценарий отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ПериодОтчета";
	НовыйПараметр.Заголовок = Нстр("ru = 'Период отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ОсновнаяВалюта";
	НовыйПараметр.Заголовок = Нстр("ru = 'Валюта отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	Если ОбъектИсточник.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		Поле.Заголовок   = "Показатель";
		Поле.Поле        = "Показатель";
		Поле.ПутьКДанным = "Показатель";
		Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПоказателиОтчетов");
	КонецЕсли;
	
	Возврат СКД;
	
КонецФункции

Функция СформироватьСКДПоИсточнику(ИсточникДанныхДляРасчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Синоним,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле,
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики,
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия = СоответствиеВнешнимИБ.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанныхДляРасчетов";
	
	Запрос.УстановитьПараметр("ИсточникДанныхДляРасчетов", ИсточникДанныхДляРасчетов);
	
	ОбъектИсточник=ИсточникДанныхДляРасчетов.ПолучитьОбъект();
	ОбъектИсточник.ПодготовитьТаблицыСопоставленийИОтборов();
	
	МассивРесурсов = Новый Массив;
	ТипЧисло       = Тип("Число");
	
	Таблица=ОбъектИсточник.мТаблицаПоказателейБД;
	
	Для Каждого Элемент Из Таблица Цикл
		Если Элемент.ТипЗначения.НайтиПоЗначению(ТипЧисло) <> Неопределено Тогда
			МассивРесурсов.Добавить(Элемент.ПолеБД);
		КонецЕсли;
	КонецЦикла;
	
	СКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных             = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя         = "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных                = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	НаборДанных.Имя            = "НаборДанных1";
	НаборДанных.ИмяОбъекта     = "ИсточникДанныхДляРасчетов";
	НаборДанных.ИсточникДанных = "ИсточникДанных";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		
		Если МассивРесурсов.Найти(Выборка.Поле) <> Неопределено Тогда
			
			ПолеИтога = СКД.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = Выборка.Синоним;
			ПолеИтога.Выражение   = "СУММА(" + Выборка.Синоним + ")";

			Поле.Заголовок   = Выборка.КодАналитики;
			Поле.Поле        = Выборка.Синоним;
			Поле.ПутьКДанным = Выборка.Синоним;
			Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 5));
			
		ИначеЕсли Выборка.КодАналитики = "Значение" Тогда
			
			ПолеИтога = СКД.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = "Значение";
			ПолеИтога.Выражение   = "СУММА(Значение)";

			Поле.Заголовок   = "Значение";
			Поле.Поле        = "Значение";
			Поле.ПутьКДанным = "Значение";
			Поле.ТипЗначения = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 5));

		Иначе
			
			Поле.Заголовок   = Выборка.Синоним;
			Поле.Поле        = ?(ЗначениеЗаполнено(Выборка.КодАналитики),Выборка.КодАналитики,ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Выборка.Синоним,,,Ложь));
			Поле.ПутьКДанным = ?(ЗначениеЗаполнено(Выборка.КодАналитики),Выборка.КодАналитики,ОбщегоНазначенияУХ.ВернутьАлфавитноЦифровоеПредставление(Выборка.Синоним,,,Ложь));
			
			Если Выборка.ТипОбъектаКонсолидации = NULL Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500, ДопустимаяДлина.Переменная));
			ИначеЕсли Выборка.ТипОбъектаКонсолидации = "ВидСубконто" Тогда
				Поле.ТипЗначения = Выборка.ИмяОбъектаМетаданных.ТипЗначения;
			Иначе
				Поле.ТипЗначения = Новый ОписаниеТипов(Выборка.ТипОБъектаКонсолидации + "Ссылка." + Выборка.ИмяОбъектаМетаданных);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Организация";
	НовыйПараметр.Заголовок = Нстр("ru = 'Организационная единица отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Организации");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "Сценарий";
	НовыйПараметр.Заголовок = Нстр("ru = 'Сценарий отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Сценарии");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ПериодОтчета";
	НовыйПараметр.Заголовок = Нстр("ru = 'Период отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Периоды");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	НовыйПараметр = СКД.Параметры.Добавить();
	НовыйПараметр.Имя = "ОсновнаяВалюта";
	НовыйПараметр.Заголовок = Нстр("ru = 'Валюта отчета'");
	НовыйПараметр.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.Валюты");
	НовыйПараметр.ОграничениеИспользования = Ложь;
	
	Возврат СКД;
	
КонецФункции

Процедура СформироватьНаборДанныхПоИсточнику(СКД, Набор_Объединение, ИмяНабора, ИмяОбъекта, ИсточникДанныхСКД, ИмяПоляЗначения, НаименованиеПоляЗначения, ИсточникДанныхДляРасчета)
	
	НаборДанных = Набор_Объединение.Элементы.Добавить(Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"));
	
	НаборДанных.Имя            = ИмяНабора;
	НаборДанных.ИмяОбъекта     = ИмяОбъекта;
	НаборДанных.ИсточникДанных = ИсточникДанныхСКД.Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Синоним,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле,
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации,
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.КодАналитики,
	|	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|		ПО ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.НастройкаСоответствия = СоответствиеВнешнимИБ.Ссылка
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка = &ИсточникДанныхДляРасчетов";
	
	Запрос.УстановитьПараметр("ИсточникДанныхДляРасчетов", ИсточникДанныхДляРасчета);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Поле = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		
		Если Выборка.КодАналитики = "Значение" Тогда
			
			Поле.Заголовок   = НаименованиеПоляЗначения;
			Поле.Поле        = "Значение";
			Поле.ПутьКДанным = ИмяПоляЗначения;
			Поле.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5);
			
			ПолеИтога = СКД.ПоляИтога.Добавить();
			ПолеИтога.ПутьКДанным = ИмяПоляЗначения;
			ПолеИтога.Выражение   = "СУММА(" + ИмяПоляЗначения + ")";
			
		Иначе
			Поле.Заголовок   = Выборка.КодАналитики;
			Поле.Поле        = Выборка.Синоним;
			Поле.ПутьКДанным = Выборка.Синоним;
			Если Выборка.ТипОбъектаКонсолидации = "ВидСубконто" Тогда
				Поле.ТипЗначения = Выборка.ИмяОбъектаМетаданных.ТипЗначения;
			ИначеЕсли Выборка.ТипОбъектаКонсолидации = NULL Тогда
				Поле.ТипЗначения = Новый ОписаниеТипов("Число, Строка, Булево, Дата");
			Иначе
				Поле.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка." + Выборка.ИмяОбъектаМетаданных);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

#КонецОбласти


#Область ВидыОтчетов_РасчетПараметрическихЗначений

// Процедура подготавливает таблицу значений операндов формулы.
Функция ВернутьТаблицуОперандов(Объект, ОбщиеНастройкиОтбора, ПутьКТаблицеПоказателей) Экспорт
	
	СКД_Получения = Новый СхемаКомпоновкиДанных;
	ТаблицаПоказателей = ПолучитьИзВременногоХранилища(ПутьКТаблицеПоказателей);
	
	ИД = СКД_Получения.ИсточникиДанных.Добавить();
	ИД.Имя = "Источник";
	ИД.ТипИсточникаДанных = "Local";
	
	ТаблицаОтборов = Новый ТаблицаЗначений;
	
	ТаблицаОтборов.Колонки.Добавить("ЛевоеЗначение");
	ТаблицаОтборов.Колонки.Добавить("ВидСравнения");
	ТаблицаОтборов.Колонки.Добавить("ПравоеЗначение");
	
	ПоказателиОтчета = Объект.ПоказателиОтчета.Выгрузить();
	
	НД_Объединение                = СКД_Получения.НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
	НД_Объединение.Имя            = "ОбщийЗапрос";
	
	СписокПоказателей = Новый СписокЗначений;
	
	Для Каждого Элемент Из ПоказателиОтчета Цикл
		
		СписокПоказателей.Добавить(Элемент.Показатель);
		СтрокаТаблицыПоказателя = ТаблицаПоказателей.Найти(Элемент.Показатель, "Показатель");
		ТекстЗапроса            = Элемент.ТекстЗапроса;
		
		НД                = НД_Объединение.Элементы.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
		НД.Имя            = СокрЛП(Элемент.КодПоказателя);
		
		НД.ИсточникДанных = "Источник";
		
		Для Каждого СтрокаОтбора Из СтрокаТаблицыПоказателя.НастройкиОтбора Цикл
			ИмяПоля = Строка(СтрокаОтбора.ЛевоеЗначение);
			
			Если СтрокаОтбора.Использование И СтрокаОтбора.ОбщийОтбор Тогда
				ТекстЗапроса = СтрЗаменить(текстЗапроса, "%Отбор" + ИмяПоля + "%", ИмяПоля);
			Иначе
				ТекстЗапроса = СтрЗаменить(текстЗапроса, "%Отбор" + ИмяПоля + "%", ИмяПоля + "_" + СокрЛП(Элемент.КодПоказателя));
				
				Если СтрокаОтбора.Использование Тогда
					
					НоваяСтрокаТаблицыОтборов = ТаблицаОтборов.Добавить();
					НоваяСтрокаТаблицыОтборов.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля + "_" + СокрЛП(Элемент.КодПоказателя));
					НоваяСтрокаТаблицыОтборов.ВидСравнения   = СтрокаОтбора.ВидСравнения;
					НоваяСтрокаТаблицыОтборов.ПравоеЗначение = СтрокаОтбора.ПравоеЗначение;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		НД.Запрос = ТекстЗапроса;
		
	КонецЦикла;
	
	НовоеПолеИтога = СКД_Получения.ПоляИтога.Добавить();
	НовоеПолеИтога.Выражение = "СУММА(Значение)";
	НовоеПолеИтога.ПутьКДанным = "Значение";
	
	НастройкиКомпоновщика = СКД_Получения.НастройкиПоУмолчанию;
	
	// Частные отборы.
	Для Каждого СтрокаТаблицыОтборов Из ТаблицаОтборов Цикл
		
		НовыйОтбор = НастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = СтрокаТаблицыОтборов.ЛевоеЗначение;
		НовыйОтбор.ВидСравнения   = СтрокаТаблицыОтборов.ВидСравнения;
		НовыйОтбор.ПравоеЗначение = СтрокаТаблицыОтборов.ПравоеЗначение;
		НовыйОтбор.Использование  = Истина;
		
	КонецЦикла;
	
	// Общие отборы.
	Для Каждого ЭлементОбщегоОтбора Из ОбщиеНастройкиОтбора.Отбор.Элементы Цикл
		
		НовыйОтбор = НастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = ЭлементОбщегоОтбора.ЛевоеЗначение;
		НовыйОтбор.ВидСравнения   = ЭлементОбщегоОтбора.ВидСравнения;
		НовыйОтбор.ПравоеЗначение = ЭлементОбщегоОтбора.ПравоеЗначение;
		НовыйОтбор.Использование  = ЭлементОбщегоОтбора.Использование;
	
	КонецЦикла;
	
	НовыйОтбор = НастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Показатель");
	НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
	НовыйОтбор.ПравоеЗначение = СписокПоказателей;
	НовыйОтбор.Использование  = Истина;
	
	Для Каждого Элемент Из НастройкиКомпоновщика.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		Если НЕ Элемент.Папка И Элемент.ТипЗначения <> NULL Тогда
			ТекВыбор = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ТекВыбор.Поле      = Элемент.Поле;
			ТекВыбор.Заголовок = Элемент.Заголовок;
		КонецЕсли;
	КонецЦикла;
	
	НовоеПоле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Показатель");
	НовоеПоле.Использование = Истина;
	
	НовоеПоле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИтоговоеЗначение");
	НовоеПоле.Использование = Истина;
	
	НовоеПоле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Значение");
	НовоеПоле.Использование = Истина;
	
	НовоеПоле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Период");
	НовоеПоле.Использование = Истина;
	
	Если Объект.РасчетПланаПрогнозированием = 0 Тогда
		
		НовоеПоле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Сценарий");
		НовоеПоле.Использование = Истина;
		
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		НовоеПоле = НастройкиКомпоновщика.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НовоеПоле.Поле = Новый ПолеКомпоновкиДанных("Аналитика" + Инд);
		НовоеПоле.Использование = Истина;
	КонецЦикла;
	
	ДетальныеЗаписи = НастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ПолеГруппировки = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Период");
	ПолеГруппировки.Использование = Истина;
	
	Если Объект.РасчетПланаПрогнозированием = 0 Тогда
		
		ПолеГруппировки = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Сценарий");
		ПолеГруппировки.Использование = Истина;
		
	КонецЕсли;
	
	ПолеГруппировки = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Показатель");
	ПолеГруппировки.Использование = Истина;
	
	ПолеГруппировки = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("ИтоговоеЗначение");
	ПолеГруппировки.Использование = Истина;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ИмяАналитики = "Аналитика" + Инд;
		НовоеПоле = ДетальныеЗаписи.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		НовоеПоле.Поле          = Новый ПолеКомпоновкиДанных(ИмяАналитики);
		НовоеПоле.Использование = Истина;
	КонецЦикла;
	
	НовоеПоле = ДетальныеЗаписи.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	НовоеПоле.Использование = Истина;
	
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиКомпоновщика.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	
	ТЗ = Новый ТаблицаЗначений;
	
	КомпоновщикДанных = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновкиДанных = КомпоновщикДанных.Выполнить(СКД_Получения, НастройкиКомпоновщика, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗ);
	ПроцессорВывода.НачатьВывод();
	
	Пока Истина Цикл
		ЭлементРезультатаКомпоновкиДанных = ПроцессорКомпоновкиДанных.Следующий();
		Если ЭлементРезультатаКомпоновкиДанных = Неопределено Тогда
			Прервать;
		КонецЕсли;
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультатаКомпоновкиДанных);
	КонецЦикла;

	ПроцессорВывода.ЗакончитьВывод();
	
	Возврат ТЗ;
	
КонецФункции

Функция РассчитатьЗначениеОперанда(Объект, ТаблицаОперандов, ПериодРасчета, СценарийРасчета = Неопределено)
	
	СтруктураРасчета = Новый Структура;
	
	ТекФормула = Объект.Формула;
	
	Для Каждого Элемент Из Объект.ПоказателиОтчета Цикл
		КодПоказателя = СокрЛП(Элемент.КодПоказателя);
		ПредставлениеПоказателя = ?(Объект.ПоказателиВВидеКода = 1, КодПоказателя ,СокрЛП(Элемент.НаименованиеПоказателя));
		ТекФормула = СтрЗаменить(ТекФормула, "[" + ПредставлениеПоказателя + "]", "СтруктураРасчета._" + КодПоказателя);
		СтруктураОтбора = Новый Структура("Показатель, ИтоговоеЗначение, Период", Элемент.Показатель, Истина, ПериодРасчета);
		
		Если Объект.РасчетПланаПрогнозированием = 0 Тогда
			СтруктураОтбора.Вставить("Сценарий", СценарийРасчета);
		КонецЕсли;
		
		ТекСтрока = ТаблицаОперандов.НайтиСтроки(СтруктураОтбора);
		Если ТекСтрока.Количество() > 0 Тогда
			СтруктураРасчета.Вставить("_" + СокрЛП(Элемент.КодПоказателя), ТекСтрока[0].Значение);
		Иначе
			СтруктураРасчета.Вставить("_" + СокрЛП(Элемент.КодПоказателя), 0);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаИтог = 0;
	ТекФормула = "СтрокаИтог =" +  ТекФормула;
	Выполнить(ТекФормула);
	
	Возврат СтрокаИтог;
	
КонецФункции

Функция ПровестиРасчетПоказателяИзВнешнегоИсточника(Объект, ВнешнийКонтекст, ИмяОтчета="", НастройкиМонитораЭффективности = Неопределено, ЧисловоеПредставлениеСостояния = 0, Тренд = 0) Экспорт
	
	Перем ТрактовкаПоложительногоОтклонения;
	Перем ПорогЗначимостиТренда;
	Перем Состояние_ЛевыйДиапазон;
	Перем Состояние_ПравыйДиапазон;
	
	ТрактовкаПоложительногоЗначения = Объект.ТрактовкаПоложительногоОтклонения;
	ПорогЗначимостиТренда           = Объект.ПорогЗначимостиТренда;
	ДопустимоеОтклонение            = Объект.ДопустимоеОтклонениеОтПлана;
	ПредельноеОтклонение            = Объект.ПредельноеОтклонениеОтПлана;
	
	Контекст = Новый Структура;
	Контекст.Вставить("Организация",    ?(ВнешнийКонтекст.Свойство("Организация"), ВнешнийКонтекст.Организация, Справочники.Организации.ПустаяСсылка()));
	Контекст.Вставить("ОсновнаяВалюта", ?(ВнешнийКонтекст.Свойство("ОсновнаяВалюта"), ВнешнийКонтекст.ОсновнаяВалюта, Справочники.Валюты.ПустаяСсылка()));
	Контекст.Вставить("ИспользуемаяИБ", ВнешнийКонтекст.ИспользуемаяИБ);
	Контекст.Вставить("ЧтениеНеактуальныхЗаписей", Истина);
	Контекст.Вставить("АнализЧувствительности", Ложь);
	
	БазовыйПериод    = ?(ВнешнийКонтекст.Свойство("БазовыйПериод"), ВнешнийКонтекст.БазовыйПериод, Справочники.Периоды.ПустаяСсылка());
	ПериодСравнения  = ?(ВнешнийКонтекст.Свойство("ПериодСравнения"), ВнешнийКонтекст.ПериодСравнения, Справочники.Периоды.ПустаяСсылка());
	БазовыйСценарий  = ?(ВнешнийКонтекст.Свойство("БазовыйСценарий"), ВнешнийКонтекст.БазовыйСценарий, Справочники.Сценарии.ПустаяСсылка());
	ПлановыйСценарий = ?(ВнешнийКонтекст.Свойство("ПлановыйСценарий"), ВнешнийКонтекст.ПлановыйСценарий, Справочники.Сценарии.ПустаяСсылка());
	ПериодПрогноза   = ?(ВнешнийКонтекст.Свойство("ПериодПрогноза"), ВнешнийКонтекст.ПериодПрогноза, Справочники.Периоды.ПустаяСсылка());
	
	Контекст.Вставить("Сценарий"    , БазовыйСценарий);
	Контекст.Вставить("ПериодОтчета", БазовыйПериод);
	
	СтруктураОтвета = Новый Структура;
	СтруктураОтвета.Вставить(ИмяОтчета + "Показатель"                           , Объект.Ссылка);
	СтруктураОтвета.Вставить(ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"   , NULL);
	СтруктураОтвета.Вставить(ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода", NULL);
	СтруктураОтвета.Вставить(ИмяОтчета + "ПлановоеЗначение"                     , NULL);
	СтруктураОтвета.Вставить(ИмяОтчета + "ЗначениеПрогноз"                      , NULL);
	
	// Определение значений границ диапазона состояний.
	Если ТипЗнч(Объект.Состояние_ЛевыйДиапазон) = Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов") Тогда
		Попытка
			Состояние_ЛевыйДиапазон = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.Состояние_ЛевыйДиапазон, Ложь).Итог("Значение");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Состояние_ЛевыйДиапазон = Объект.Состояние_ЛевыйДиапазон;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Состояние_ПравыйДиапазон) = Тип("СправочникСсылка.ИсточникиДанныхДляРасчетов") Тогда
		Попытка
			Состояние_ПравыйДиапазон = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.Состояние_ПравыйДиапазон, Ложь).Итог("Значение");
		Исключение
			Возврат Неопределено;
		КонецПопытки;
	Иначе
		Состояние_ПравыйДиапазон = Объект.Состояние_ПравыйДиапазон;
	КонецЕсли;
	
	
	Если НЕ Объект.ИсточникЗначенияТекущегоПериода.Пустая() Тогда
		Контекст.Вставить("Сценарий", БазовыйСценарий);
		Контекст.Вставить("ПериодОтчета", БазовыйПериод);
		Попытка
			ТЗ = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.ИсточникЗначенияТекущегоПериода, Ложь);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		СтруктураОтвета.Вставить(ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"   , ТЗ.Итог("Значение"));
	КонецЕсли;
	
	Если НЕ Объект.ИсточникЗначенияПериодаСравнения.Пустая() Тогда
		Контекст.Вставить("Сценарий", БазовыйСценарий);
		Контекст.Вставить("ПериодОтчета", ПериодСравнения);
		Попытка
			ТЗ = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.ИсточникЗначенияПериодаСравнения, Ложь);
		Исключение
			Возврат Неопределено;
		КонецПопытки;
		СтруктураОтвета.Вставить(ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"   , ТЗ.Итог("Значение"));
	КонецЕсли;
	
	Если НЕ Объект.ИсточникПлановогоЗначения.Пустая() Тогда
		Контекст.Вставить("Сценарий", ПлановыйСценарий);
		Контекст.Вставить("ПериодОтчета", БазовыйПериод);
		Попытка
			ТЗ = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Контекст, Объект.ИсточникПлановогоЗначения, Ложь);
		Исключение
			Возврат Неопределено;
		КонецПопытки;

		СтруктураОтвета.Вставить(ИмяОтчета + "ПлановоеЗначение"   , ТЗ.Итог("Значение"));
	КонецЕсли;

	СтруктураОтвета.Вставить(ИмяОтчета + "Смещение", 0);
	СтруктураОтвета.Вставить(ИмяОтчета + "ИспользуетсяПрогноз", Ложь);
	СтруктураОтвета.Вставить(ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода"   , НЕ Объект.ИсточникЗначенияТекущегоПериода.Пустая());
	СтруктураОтвета.Вставить(ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода", НЕ Объект.ИсточникЗначенияПериодаСравнения.Пустая());
	СтруктураОтвета.Вставить(ИмяОтчета + "ИспользуетсяПлановоеЗначение"                     , НЕ Объект.ИсточникПлановогоЗначения.Пустая());
	
	
	Если СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"] = NULL Тогда
			СтруктураОтвета.Вставить(ИмяОтчета + "ИзменениеАбсолютное",            NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ИзменениеОтносительное",         NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "Тренд",                          NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ОтклонениеОтПланаАбсолютное",    NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ОтклонениеОтПланаОтносительное", NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ПроцентВыполненияПлана",         NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "Состояние",                      NULL);
			ЧисловоеПредставлениеСостояния = 0;
	Иначе
		Если СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"] = NULL Тогда
			СтруктураОтвета.Вставить(ИмяОтчета + "ИзменениеАбсолютное", NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ИзменениеОтносительное", NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "Тренд", NULL);
		Иначе
			СтруктураОтвета.Вставить(ИмяОтчета + "ИзменениеАбсолютное", 
									СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"] - СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода"]);
			СтруктураОтвета.Вставить(ИмяОтчета + "ИзменениеОтносительное", 
									?(СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"] = 0, 0, 100 * СтруктураОтвета[ИмяОтчета + "ИзменениеАбсолютное"]/СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"]));
			Если ОбщегоНазначенияУХ.ЗначениеПоМодулю(СтруктураОтвета[ИмяОтчета + "ИзменениеОтносительное"]) < ПорогЗначимостиТренда Тогда
				Тренд = 4;
			Иначе
				Тренд = ?(СтруктураОтвета[ИмяОтчета + "ИзменениеАбсолютное"] >= 0, 3, 5);
			КонецЕсли;
			
			// Отбор по тренду накладывается, если установлен хотя бы один флажок у полей отбора по тренду.
			Если ЗначениеЗаполнено(НастройкиМонитораЭффективности)
			   И (НастройкиМонитораЭффективности.ОтборТрендНулевой
			      ИЛИ НастройкиМонитораЭффективности.ОтборТрендПоложительный
				  ИЛИ НастройкиМонитораЭффективности.ОтборТрендОтрицательный) Тогда
				Если НЕ 
					(НастройкиМонитораЭффективности.ОтборТрендНулевой и Тренд = 4
				 ИЛИ НастройкиМонитораЭффективности.ОтборТрендПоложительный и Тренд = 3
				 ИЛИ НастройкиМонитораЭффективности.ОтборТрендОтрицательный и Тренд = 5) Тогда
					Возврат Неопределено;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураОтвета.Вставить(ИмяОтчета + "Тренд", ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Тренд));
		КонецЕсли;
		
		Если СтруктураОтвета[ИмяОтчета + "ПлановоеЗначение"] = NULL Тогда
			СтруктураОтвета.Вставить(ИмяОтчета + "ОтклонениеОтПланаАбсолютное", NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ОтклонениеОтПланаОтносительное", NULL);
			СтруктураОтвета.Вставить(ИмяОтчета + "ПроцентВыполненияПлана", NULL);
			Состояние = 0;
		Иначе
			СтруктураОтвета.Вставить(ИмяОтчета + "ОтклонениеОтПланаАбсолютное", 
									СтруктураОтвета[ИмяОтчета + "ФактическоеЗначениеТекущегоПериода"] - СтруктураОтвета[ИмяОтчета + "ПлановоеЗначение"]);
			СтруктураОтвета.Вставить(ИмяОтчета + "ОтклонениеОтПланаОтносительное", ?(СтруктураОтвета[ИмяОтчета + "ПлановоеЗначение"] = 0, 0, 100* СтруктураОтвета[ИмяОтчета + "ОтклонениеОтПланаАбсолютное"] / СтруктураОтвета[ИмяОтчета + "ПлановоеЗначение"]));
			СтруктураОтвета.Вставить(ИмяОтчета + "ПроцентВыполненияПлана", 100 - СтруктураОтвета[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]);
			
			Если СтруктураОтвета[ИмяОтчета + "ОтклонениеОтПланаОтносительное"] >=0 = ТрактовкаПоложительногоЗначения Тогда
				Состояние = 0;
				СтруктураОтвета[ИмяОтчета + "ПроцентВыполненияПлана"] = 100;
			Иначе
				ОтклонениеПоМодулю = ОбщегоНазначенияУХ.ЗначениеПоМодулю(СтруктураОтвета[ИмяОтчета + "ОтклонениеОтПланаОтносительное"]);
				
				Если ОтклонениеПоМодулю > 100 Тогда
					СтруктураОтвета[ИмяОтчета + "ПроцентВыполненияПлана"] = 0;
				Иначе
					СтруктураОтвета[ИмяОтчета + "ПроцентВыполненияПлана"] = 100 - ОтклонениеПоМодулю;
				КонецЕсли;
				
				Если ОтклонениеПоМодулю < ДопустимоеОтклонение Тогда
					Состояние = 0;
				ИначеЕсли ОтклонениеПоМодулю < ПредельноеОтклонение Тогда
					Состояние = 1;
				Иначе
					Состояние = 2;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Отбор по состоянию показателя накладывается, если установлен хотя бы один флажок у полей отбора по состоянию.
		Если ЗначениеЗаполнено(НастройкиМонитораЭффективности)
		   И (НастройкиМонитораЭффективности.ОтборСостояниеХорошее
		      ИЛИ НастройкиМонитораЭффективности.ОтборСостояниеУдовлетворительное
			  ИЛИ НастройкиМонитораЭффективности.ОтборСостояниеТревожное) Тогда
				Если НЕ 
					(Состояние = 0 И НастройкиМонитораЭффективности.ОтборСостояниеХорошее
				 	ИЛИ Состояние = 1 И НастройкиМонитораЭффективности.ОтборСостояниеУдовлетворительное
				 	ИЛИ Состояние = 2 И НастройкиМонитораЭффективности.ОтборСостояниеТревожное) Тогда
					Возврат Неопределено;
				КонецЕсли;
		КонецЕсли;
		
		СтруктураОтвета.Вставить(ИмяОтчета + "Состояние", ТиповыеОтчетыУХ.ВернутьКодПредставленияТренда(Состояние));
		ЧисловоеПредставлениеСостояния = Состояние;
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ПровестиГрупповойРасчетПоказателейИзВнешнегоИсточника(ТаблицаОбъектов, ВнешнийКонтекст, ИмяОтчета = "", НастройкиМонитораЭффективности = Неопределено, ЧисловоеПредставлениеСостояния = 0, Тренд = 0) Экспорт
	
	Контекст = Новый Структура("Организация, ОсновнаяВалюта, ЧтениеНеАктуальныхЗаписей"
							, ?(ВнешнийКонтекст.Свойство("Организация"), ВнешнийКонтекст.Организация, Справочники.Организации.ПустаяСсылка())
							, ?(ВнешнийКонтекст.Свойство("ОсновнаяВалюта"), ВнешнийКонтекст.ОсновнаяВалюта, Справочники.Валюты.ПустаяСсылка())
							, Истина);
	
	БазовыйПериод    = ?(ВнешнийКонтекст.Свойство("БазовыйПериод"), ВнешнийКонтекст.БазовыйПериод, Справочники.Периоды.ПустаяСсылка());
	ПериодСравнения  = ?(ВнешнийКонтекст.Свойство("ПериодСравнения"), ВнешнийКонтекст.ПериодСравнения, Справочники.Периоды.ПустаяСсылка());
	БазовыйСценарий  = ?(ВнешнийКонтекст.Свойство("БазовыйСценарий"), ВнешнийКонтекст.БазовыйСценарий, Справочники.Сценарии.ПустаяСсылка());
	ПлановыйСценарий = ?(ВнешнийКонтекст.Свойство("ПлановыйСценарий"), ВнешнийКонтекст.ПлановыйСценарий, Справочники.Сценарии.ПустаяСсылка());
	ПериодПрогноза   = ?(ВнешнийКонтекст.Свойство("ПериодПрогноза"), ВнешнийКонтекст.ПериодПрогноза, Справочники.Периоды.ПустаяСсылка());

КонецФункции

Функция ВернутьСКД(Объект) Экспорт
	
	Возврат ОБъект.СхемаКомпоновкиДляРасшифровки.Получить();
	
КонецФункции

#КонецОбласти

#Область МКП

// Функция формирует схему компоновки данных, которая будет использована при расшифровке
// показателя монитора ключевых показателей.
//
Функция ПолучитьСхемуКомпоновкиДанныхДляРасшифровкиПоказателяМонитора(ИсточникДанных) Экспорт
	
	СКД = Новый СхемаКомпоновкиДанных;
	ИД  = СКД.ИсточникиДанных.Добавить();
	ИД.Имя = "ИсточникДанных1";
	ИД.ТипИсточникаДанных = "Local";
	                                                              
	НД_Объединение = СКД.НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));
	НД_Объединение.Имя = "ОбъединениеТаблиц";
	
	Если НЕ ИсточникДанных.ИсточникЗначенияТекущегоПериода.Пустая() Тогда
		СформироватьНаборДанныхПоИсточнику(СКД, НД_Объединение, "БАЗА_Набор", "БАЗА_Таблица", ИД, "ФактическоеЗначение",Нстр("ru = 'Фактическое значение'"), ИсточникДанных.ИсточникЗначенияТекущегоПериода);
	КонецЕсли;
	
	Если НЕ ИсточникДанных.ИсточникЗначенияПериодаСравнения.Пустая() Тогда
		СформироватьНаборДанныхПоИсточнику(СКД, НД_Объединение, "СРАВНЕНИЕ_Набор", "Сравнение_Таблица", ИД, "ЗначениеСравнения","ЗначениеСравнения", ИсточникДанных.ИсточникЗначенияПериодаСравнения);
	КонецЕсли;
	
	Если НЕ ИсточникДанных.ИсточникПлановогоЗначения.Пустая() Тогда
		СформироватьНаборДанныхПоИсточнику(СКД, НД_Объединение, "ПЛАН_Набор", "План_Таблица", ИД, "ПланируемоеЗначение","ПланируемоеЗначение", ИсточникДанных.ИсточникПлановогоЗначения);
	КонецЕсли;
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СКД)));
	
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка Тогда
			НовоеПоле = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			НовоеПоле.Поле = Элемент.Поле;
			НовоеПоле.Использование = Истина;
			НовоеПоле.Заголовок     = Элемент.Заголовок;
		КонецЕсли;
		
	КонецЦикла;
	
	
	Группировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Для Каждого Элемент Из КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора.Элементы Цикл
		
		Если НЕ Элемент.Папка И НЕ Элемент.Ресурс Тогда
			ПолеГруппировки = Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Элемент.Поле;
			ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
			ПолеГруппировки.Использование  = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Группировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Группировка.Использование = Истина;
	
	ЗагрузитьВСхемуНастройкиКомпоновщика(СКД, КомпоновщикНастроек.Настройки);
	
	Возврат СКД;
	
КонецФункции

Функция ВывестиОтчетПоМонитору(Знач Объект, Знач АдресТаблиц) Экспорт
	
	Перем ДанныеРасшифровки;
	Результат = новый ТабличныйДокумент;
	
	СКД = Объект.СхемаКомпоновкиДляРасшифровки.Получить();
	
	Таблицы = ПолучитьИзВременногоХранилища(АдресТаблиц);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СКД, СКД.НастройкиПоУмолчанию);
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, Таблицы, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.НачатьВывод();
	
	Пока Истина Цикл
		ЭлементРезультата = ПроцессорКомпоновки.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			Прервать;
		Иначе
			ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		КонецЕсли;
		
	КонецЦикла;
	
	ПроцессорВывода.ЗакончитьВывод();
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ПоместитьВоВременноеХранилище(Результат);

	
КонецФункции

#Область МКП_АнализПоказателей

Функция ПолучитьСписокПериодовОтчета(ИсходныйПериод, КоличествоПериодов) Экспорт
	
	СписокПериодов = Новый СписокЗначений;
	ТаблицаРезультат = ПолучитьТаблицуПериодовОтчета(ИсходныйПериод, КоличествоПериодов);
	Если ТаблицаРезультат <> Неопределено Тогда
		СписокПериодов.ЗагрузитьЗначения(ТаблицаРезультат.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	Возврат СписокПериодов;
	
КонецФункции

Функция ПолучитьТаблицуПериодовОтчета(ИсходныйПериод, КоличествоПериодов) Экспорт
	
	ДатаНачалаОтносительногоПериода = ОбщегоНазначенияУХ.ВернутьОтносительнуюДату(ИсходныйПериод.ДатаНачала, ИсходныйПериод.Периодичность, -КоличествоПериодов);
	
	Если ДатаНачалаОтносительногоПериода = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка,
	|	Периоды.ДатаНачала
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала >= &ДатаНачала
	|	И Периоды.ДатаОкончания <= &ДатаОкончания";
	
	Запрос.УстановитьПараметр("Периодичность", ИсходныйПериод.Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала"   , ДатаНачалаОтносительногоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", ИсходныйПериод.ДатаОкончания);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает структуру, содержащую поля для подстановки периода отчета по текущей дате.
Функция ПолучитьСтруктуруПериодаТекущегоДня(ДатаВход = Неопределено) Экспорт
	Если ДатаВход = Неопределено Тогда
		ДатаРабочая = ТекущаяДатаСеанса();
	Иначе
		ДатаРабочая = ДатаВход;
	КонецЕсли;
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДатаНачала", НачалоДня(ДатаРабочая));
	РезультатФункции.Вставить("ДатаОкончания", КонецДня(ДатаРабочая));
	РезультатФункции.Вставить("Периодичность", Перечисления.Периодичность.День);
	РезультатФункции.Вставить("Наименование", Строка(ДатаРабочая));
	Возврат РезультатФункции;
КонецФункции

// Значение без знака.
Функция Абс(Значение) Экспорт
	Возврат Макс(Значение, -Значение);
КонецФункции

// Возвращает сокращенное представление длиных чисел (при необходимости 
// выводит в миллионах/в тысячах).
Функция ПолучитьСокращенноеПредставлениеЧисла(ЧислоВход, ЕдиницаИзмеренияВход = Неопределено, РазрядностьВход = 2, ПереноситьРасшифровку = Истина, ПредставлениеНуляВход = " ") Экспорт
	// Инициализация.
	РезультатФункции = Строка(ЧислоВход);
	НовоеЧисло = ЧислоВход;
	Постфикс = "";
	// Получим значение постфикса.
	Если Абс(ЧислоВход / 1000000000) > 1 Тогда
		НовоеЧисло = ЧислоВход / 1000000000;
		Постфикс = Нстр("ru = 'млрд'");
	ИначеЕсли Абс(ЧислоВход / 1000000) > 1 Тогда
		НовоеЧисло = ЧислоВход / 1000000;
		Постфикс = Нстр("ru = 'млн'");
	ИначеЕсли Абс(ЧислоВход / 1000) > 1 Тогда
		НовоеЧисло = ЧислоВход / 1000;
		Постфикс = Нстр("ru = 'тыс'");
	Иначе	
		НовоеЧисло = ЧислоВход;
		Постфикс = "";
	КонецЕсли;
	// Добавим постфикс в представление числа.
	ПредставлениеЧислаФормат = Формат(НовоеЧисло, "ЧДЦ=" + Строка(РазрядностьВход) + ";ЧН=" + Строка(ПредставлениеНуляВход));
	Если ЗначениеЗаполнено(Постфикс) Тогда
		Если ПереноситьРасшифровку Тогда
			РезультатФункции = "%ПредставлениеЧислаФормат%" + Символы.ПС + "%Постфикс%.";
		Иначе
			РезультатФункции = "%ПредставлениеЧислаФормат%" + " " + "%Постфикс%.";
		КонецЕсли;
		РезультатФункции = СтрЗаменить(РезультатФункции, "%ПредставлениеЧислаФормат%", ПредставлениеЧислаФормат);
		РезультатФункции = СтрЗаменить(РезультатФункции, "%Постфикс%", ПостФикс);
	Иначе
		РезультатФункции = ПредставлениеЧислаФормат;
	КонецЕсли;
	// Добавим единицу измерения.
	Если ЗначениеЗаполнено(ЕдиницаИзмеренияВход) Тогда
		РезультатФункции = РезультатФункции + " " + ЕдиницаИзмеренияВход.КраткоеНаименование;
	Иначе
		// Не изменяем выходную строку, т.к. единица измерения не указана.
	КонецЕсли;
	// Заменим пустую строку на "-".
	Если СокрЛП(РезультатФункции) = "" Тогда
		РезультатФункции = "-";
	Иначе
		// Не требуется замена.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции

// Удаляет в таблице ТаблицаВход строки с Итоговыми показателями, если
// такая колонка есть и значения по ней различаются.
Функция УдалитьИтоговыеСтрокиДанныхПоИсточнику(ТаблицаВход) Экспорт
	РезультатФункции = ТаблицаВход.СкопироватьКолонки();
	Если ТаблицаВход.Колонки.Найти("ИтогПоПоказателю") <> Неопределено Тогда
		КолонкаИтог = ТаблицаВход.ВыгрузитьКолонку("ИтогПоПоказателю");
		КолонкаИтогСвертка = ОбщегоНазначенияКлиентСервер.СвернутьМассив(КолонкаИтог);
		НужноУдалять = (КолонкаИтогСвертка.Количество() > 1);			// Есть различные значения итогов.
		Если НужноУдалять Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ИтогПоПоказателю", Ложь);
			НайденныеСтроки = ТаблицаВход.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденныеСтроки);
			КонецЦикла;
		Иначе
			РезультатФункции = ТаблицаВход.Скопировать();		// Значение в поле ИтогПоПоказателю совпадает.
		КонецЕсли;
	Иначе
		РезультатФункции = ТаблицаВход.Скопировать();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция РасшифровкаИсточникаВИБОтчетом(Объект, ВнешнийКонтекст) Экспорт
	
	Возврат ПолучитьОтчетПоРегиструВИБ_УР(Объект.ИсточникЗначенияТекущегоПериода, ВнешнийКонтекст);
	
КонецФункции

// Вовзращает таблицу данных по источнику ИсточникДанныхВход и контексту КонтекстОтчетаВход,
// очищенную от итоговых записей.
Функция ПолучитьТаблицуДанныеПоИсточникуБезИтогов(КонтекстОтчетаВход, ИсточникДанныхВход) Экспорт
	ТаблицаИсточника = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстОтчетаВход, ИсточникДанныхВход, Ложь);
	РезультатФункции = УдалитьИтоговыеСтрокиДанныхПоИсточнику(ТаблицаИсточника);
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру, содержащую таблицы для базового периода, периода сравнения и плана
// по показателелю Объект, параметрам ВнешнийКонтекст и операнду ИмяОперанда.
Функция ПолучитьСтруктуруОтветаТаблицПоказателяМКП(Объект, ВнешнийКонтекст, ИмяОперанда = "") Экспорт
	Контекст = Новый Структура;
	
	ИспользуемаяИбКонтекст	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВнешнийКонтекст, "ИспользуемаяИБ", Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ);
	ОрганизацияКонтекст		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВнешнийКонтекст, "Организация", Справочники.Организации.ПустаяСсылка());
	ВалютаКонтекст			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ВнешнийКонтекст, "ОсновнаяВалюта", Справочники.Валюты.ПустаяСсылка());
	Контекст.Вставить("АнализЧувствительности",		 Ложь);
	Контекст.Вставить("ИспользуемаяИБ",				 ИспользуемаяИбКонтекст);
	Контекст.Вставить("Организация",				 ОрганизацияКонтекст);
	Контекст.Вставить("ОсновнаяВалюта",				 ВалютаКонтекст);
	Контекст.Вставить("ЧтениеНеактуальныхЗаписей",	 Истина);
	
	БазовыйПериод    = ?(ВнешнийКонтекст.Свойство("БазовыйПериод"), ВнешнийКонтекст.БазовыйПериод, Справочники.Периоды.ПустаяСсылка());
	ПериодСравнения  = ?(ВнешнийКонтекст.Свойство("ПериодСравнения"), ВнешнийКонтекст.ПериодСравнения, Справочники.Периоды.ПустаяСсылка());
	ПериодПрогноза   = ?(ВнешнийКонтекст.Свойство("ПериодПрогноза"), ВнешнийКонтекст.ПериодПрогноза, Справочники.Сценарии.ПустаяСсылка());

	БазовыйСценарий  = ?(ВнешнийКонтекст.Свойство("БазовыйСценарий"), ВнешнийКонтекст.БазовыйСценарий, Справочники.Сценарии.ПустаяСсылка());
	ПлановыйСценарий = ?(ВнешнийКонтекст.Свойство("ПлановыйСценарий"), ВнешнийКонтекст.ПлановыйСценарий, Справочники.Сценарии.ПустаяСсылка());
	
	СтруктураОтвета = Новый Структура;
	ПустаяТаблицаОтвета = Новый ТаблицаЗначений;
	ПустаяТаблицаОтвета.Колонки.Добавить("Значение");
	
	Если ИмяОперанда = "" ИЛИ ИмяОперанда = "ФактическоеЗначениеТекущегоПериода" Тогда
		Если ЗначениеЗаполнено(Объект.ИсточникЗначенияТекущегоПериода) Тогда
			Контекст.Вставить("Сценарий", БазовыйСценарий);
			Контекст.Вставить("ПериодОтчета", БазовыйПериод);
			БазаТаблица = ПолучитьТаблицуДанныеПоИсточникуБезИтогов(Контекст, Объект.ИсточникЗначенияТекущегоПериода);
			СтруктураОтвета.Вставить("БАЗА_Таблица", БазаТаблица);
		Иначе
			СтруктураОтвета.Вставить("БАЗА_Таблица", ПустаяТаблицаОтвета);
		КонецЕсли;
	Иначе
		СтруктураОтвета.Вставить("БАЗА_Таблица", ПустаяТаблицаОтвета);
	КонецЕсли;

	Если ИмяОперанда = "" ИЛИ ИмяОперанда = "ФактическоеЗначениеПредыдущегоПериода" Тогда
		Если ЗначениеЗаполнено(Объект.ИсточникЗначенияПериодаСравнения) Тогда
			Контекст.Вставить("Сценарий", БазовыйСценарий);
			Контекст.Вставить("ПериодОтчета", ПериодСравнения);
			СравнениеТаблица = ПолучитьТаблицуДанныеПоИсточникуБезИтогов(Контекст, Объект.ИсточникЗначенияПериодаСравнения);
			СтруктураОтвета.Вставить("Сравнение_Таблица", СравнениеТаблица);
		КонецЕсли;
	Иначе
		СтруктураОтвета.Вставить("Сравнение_Таблица", ПустаяТаблицаОтвета);
	КонецЕсли;
	
	Если ИмяОперанда = "" ИЛИ ИмяОперанда = "ПлановоеЗначение" Тогда
		Если ЗначениеЗаполнено(Объект.ИсточникПлановогоЗначения) Тогда
			Контекст.Вставить("Сценарий", ПлановыйСценарий);
			Контекст.Вставить("ПериодОтчета", БазовыйПериод);
			ПланТаблица = ПолучитьТаблицуДанныеПоИсточникуБезИтогов(Контекст, Объект.ИсточникПлановогоЗначения);
			СтруктураОтвета.Вставить("План_Таблица", ПланТаблица);
		КонецЕсли;
	Иначе
		СтруктураОтвета.Вставить("План_Таблица", ПустаяТаблицаОтвета);
	КонецЕсли;
	Возврат СтруктураОтвета;
КонецФункции

Функция ВернутьТаблицыПоказателяМонитораКлючевыхПоказателей(Объект, ВнешнийКонтекст, ИмяОперанда = "") Экспорт
	
	СтруктураОтвета = ПолучитьСтруктуруОтветаТаблицПоказателяМКП(Объект, ВнешнийКонтекст, ИмяОперанда);
	Возврат ПоместитьВоВременноеХранилище(СтруктураОтвета);
	
КонецФункции

Функция ПровестиРасчетПоказателяПоФормуле(ИсточникДанных, ПутьКСхемеКомпоновкиДанных, СтруктураНастроек, ПутьКТаблицеПоказателей) Экспорт
	
	Перем Периодичность;
	Перем СмещениеПредыдущегоПериода;
	Перем СценарийПлан;
	Перем СценарийФакт;
	Перем ПорогЗначимостиТренда;
	Перем Состояние_ЛевыйДиапазон;
	Перем Состояние_ПравыйДиапазон;
	
	СтруктураНастроек.Свойство("Периодичность"             , Периодичность);
	СтруктураНастроек.Свойство("СмещениеПредыдущегоПериода", СмещениеПредыдущегоПериода);
	СтруктураНастроек.Свойство("СценарийПлан"              , СценарийПлан);
	СтруктураНастроек.Свойство("СценарийФакт"              , СценарийФакт);
	СтруктураНастроек.Свойство("ПорогЗначимостиТренда"     , ПорогЗначимостиТренда);
	СтруктураНастроек.Свойство("Состояние_ЛевыйДиапазон"   , Состояние_ЛевыйДиапазон);
	СтруктураНастроек.Свойство("Состояние_ПравыйДиапазон"  , Состояние_ПравыйДиапазон);
	
	КомпоновщикНастроек   = Новый КомпоновщикНастроекКомпоновкиДанных;
	СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(ПутьКСхемеКомпоновкиДанных);
	КомпоновщикНастроек.Инициализировать(НОвый ИсточникДоступныхНастроекКомпоновкиДанных(ПутьКСхемеКомпоновкиДанных));
	
	ПолеПоиска = Новый ПолеКомпоновкиДанных("Период");
	Найден = Ложь;
	ЧислоОтборов = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();
	ТекИндекс    = 0;
	Пока НЕ Найден И ТекИндекс < ЧислоОтборов Цикл
		ТекЭлемент = КомпоновщикНастроек.Настройки.Отбор.Элементы[ТекИндекс];
		ТекИндекс  = ТекИндекс + 1;
		Если ТекЭлемент.ЛевоеЗначение = ПолеПоиска Тогда
			Найден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Найден Тогда
		
		ТекущийПериод        = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(НачалоДня(ТекущаяДата()), Периодичность);
		ТекущаяПериодичность = Периодичность;
		
	ИначеЕсли ТекЭлемент.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно Тогда
		
		ТекущийПериод        = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(ТекущаяДата(), Периодичность);
		ТекущаяПериодичность = Периодичность;
		
	Иначе
		
		ТекущийПериод        = ТекЭлемент.ПравоеЗначение;
		ТекущаяПериодичность = ТекущийПериод.Периодичность;
		
	КонецЕсли;
	
	ПредыдущийПериод         = ОбщегоНазначенияУХ.глОтносительныйПериод(ТекущийПериод, -СмещениеПредыдущегоПериода, Истина);
	
	ОбщийСписок = Новый СписокЗначений;
	
	Если ИсточникДанных.РасчетПланаПрогнозированием = 1 Тогда
		ТаблицаПериодовДляАнализа = ВернутьТаблицуПериодов(ИсточникДанных.РазмерДиапазонаДляПрогонозирования, ТекущаяПериодичность, ТекущийПериод.ДатаНачала);
		ОбщийСписок.ЗагрузитьЗначения(ТаблицаПериодовДляАнализа.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	
	
	ОбщийСписок.Добавить(ТекущийПериод);
	ОбщийСписок.Добавить(ПредыдущийПериод);
	
	НастройкиОтбора = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПолеПериод   = Новый ПолеКомпоновкиДанных("Период");
	ИзменитьЗначениеОтбора(НастройкиОтбора, ПолеПериод, ВидСравненияКомпоновкиДанных.ВСписке, ОбщийСписок);

	// Если прогноз определяются по значению показателя для определенного сценария зададим отборы по сценарию.
	Если ИсточникДанных.РасчетПланаПрогнозированием = 0 Тогда
		
		ПолеСценарий = Новый ПолеКомпоновкиДанных("Сценарий");
		СписокСценарий = Новый СписокЗначений;
		СписокСценарий.Добавить(СценарийПлан);
		СписокСценарий.Добавить(СценарийФакт);
		ИзменитьЗначениеОтбора(НастройкиОтбора, ПолеСценарий, ВидСравненияКомпоновкиДанных.ВСписке, СписокСценарий);
		
	КонецЕсли;
	
	ТаблицаОперандов = ТиповыеОтчетыУХ.ВернутьТаблицуОперандов(ИсточникДанных, НастройкиОтбора, ПутьКТаблицеПоказателей);
	
	Если ИсточникДанных.РасчетПланаПрогнозированием = 1 Тогда
		ТекущееЗначениеОперанда    = РассчитатьЗначениеОперанда(ИсточникДанных, ТаблицаОперандов, ТекущийПериод);
		ПредыдущееЗначениеОперанда = РассчитатьЗначениеОперанда(ИсточникДанных, ТаблицаОперандов, ПредыдущийПериод);
	Иначе
		ТекущееЗначениеОперанда    = РассчитатьЗначениеОперанда(ИсточникДанных, ТаблицаОперандов, ТекущийПериод, СценарийФакт);
		ПредыдущееЗначениеОперанда = РассчитатьЗначениеОперанда(ИсточникДанных, ТаблицаОперандов, ПредыдущийПериод, СценарийФакт);
	КонецЕсли;
	
	ТаблицаАнализа = Новый ТаблицаЗначений;
	ТаблицаАнализа.Колонки.Добавить("ПериодОтчетаДатаНачала");
	ТаблицаАнализа.Колонки.Добавить("Значение");
	
	Если ИсточникДанных.РасчетПланаПрогнозированием = 1 Тогда
		Для Каждого Элемент Из ТаблицаПериодовДляАнализа Цикл
			
			НоваяСтрока                        = ТаблицаАнализа.Добавить();
			НоваяСтрока.ПериодОтчетаДатаНачала = Элемент.ДатаНачала;
			НоваяСтрока.Значение               = РассчитатьЗначениеОперанда(ИсточникДанных, ТаблицаОперандов, Элемент.Ссылка);
			
		КонецЦикла;
		
		РезультатПрогнозирования = УправлениеОтчетамиУХ.РасчетТренда(ТаблицаАнализа, "ПериодОтчетаДатаНачала", "Значение",
																  , Новый Структура("ДатаНачала, Период, КоличествоПериодов", ТекущийПериод.ДатаНачала, ВернутьТипЕдиницыИзмеренияИнтервалаПоПериодичности(ТекущаяПериодичность), 1)
																  , ИсточникДанных.РазмерДиапазонаДляПрогонозирования, ИсточникДанных.Смещение, Истина);
	Иначе
		
		РезультатПрогнозирования = РассчитатьЗначениеОперанда(ИсточникДанных, ТаблицаОперандов, ТекущийПериод, СценарийПлан);
		
	КонецЕсли;
	
	СтруктураОтвета = Новый Структура;
	
	СтруктураОтвета.Вставить("Показатель", ИсточникДанных.Ссылка);
	СтруктураОтвета.Вставить("ФактическоеЗначениеТекущегоПериода"   , ТекущееЗначениеОперанда);
	СтруктураОтвета.Вставить("ФактическоеЗначениеПредыдущегоПериода", ПредыдущееЗначениеОперанда);
	СтруктураОтвета.Вставить("ПлановоеЗначение"                     , ?(РезультатПрогнозирования = Неопределено, 0, РезультатПрогнозирования));
	СтруктураОтвета.Вставить("ИзменениеАбсолютное", СтруктураОтвета.ФактическоеЗначениеТекущегоПериода - СтруктураОтвета.ФактическоеЗначениеПредыдущегоПериода);
	СтруктураОтвета.Вставить("ИзменениеОтносительное", ?(СтруктураОтвета.ФактическоеЗначениеТекущегоПериода = 0, 0, 100 * СтруктураОтвета.ИзменениеАбсолютное/СтруктураОтвета.ФактическоеЗначениеТекущегоПериода));
	СтруктураОтвета.Вставить("ОтклонениеОтПланаАбсолютное", СтруктураОтвета.ПлановоеЗначение - СтруктураОтвета.ФактическоеЗначениеТекущегоПериода);
	СтруктураОтвета.Вставить("ОтклонениеОтПланаОтносительное", ?(СтруктураОтвета.ПлановоеЗначение = 0, 0, 100* СтруктураОтвета.ОтклонениеОтПланаАбсолютное / СтруктураОтвета.ПлановоеЗначение));
	СтруктураОтвета.Вставить("ПроцентВыполненияПлана", 100 - СтруктураОтвета.ОтклонениеОтПланаОтносительное);
	
	Если ОбщегоНазначенияУХ.ЗначениеПоМодулю(СтруктураОтвета.ИзменениеОтносительное) < ПорогЗначимостиТренда Тогда
		СтруктураОтвета.Вставить("Тренд", 0);
	Иначе
		НаправлениеТренда = СтруктураОтвета.ИзменениеАбсолютное >= 0;
		СтруктураОтвета.Вставить("Тренд", ?(НаправлениеТренда = ИсточникДанных.ТрактовкаПоложительногоОтклонения, 1, -1));
	КонецЕсли;
	
	Если СтруктураОтвета.ФактическоеЗначениеТекущегоПериода < Состояние_ЛевыйДиапазон Тогда
		СтруктураОтвета.Вставить("Состояние", ?(ИсточникДанных.ТрактовкаПоложительногоОтклонения, -1, 1));
	ИначеЕсли СтруктураОтвета.ФактическоеЗначениеТекущегоПериода > Состояние_ПравыйДиапазон Тогда
		СтруктураОтвета.Вставить("Состояние", ?(ИсточникДанных.ТрактовкаПоложительногоОтклонения, 1, -1));
	Иначе
		СтруктураОтвета.Вставить("Состояние", 0);
	КонецЕсли;
	
	Возврат СтруктураОтвета;
	
КонецФункции

Функция ИзменитьЗначениеОтбора(НастройкиОтбора, Поле, ВидСравнения, Значение)
	
	Для Каждого Элемент Из НастройкиОтбора.Отбор.Элементы Цикл
		Если Элемент.ЛевоеЗначение = Поле Тогда
			Элемент.ВидСравнения = ВидСравнения;
			Элемент.ПравоеЗначение = Значение;
			Возврат НастройкиОтбора;
		КонецЕсли;
	КонецЦикла;
	
	Если НастройкиОтбора.ДоступныеПоляОтбора.НайтиПоле(Поле) <> Неопределено Тогда
		НовыйОтбор = НастройкиОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = Поле;
		НовыйОтбор.ВидСравнения   = ВидСравнения;
		НовыйОтбор.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Возврат НастройкиОтбора;
	
КонецФункции

Функция ВернутьТипЕдиницыИзмеренияИнтервалаПоПериодичности(Периодичность) Экспорт
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Год;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Полугодие;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Месяц;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Декада;
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.День;
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		Возврат ТипЕдиницыИнтервалаВремениАнализаДанных.Квартал;
	КонецЕсли;
	
КонецФункции

Функция ВернутьМассивПериодов(ГлубинаАнализа, Периодичность, ДатаНачала) Экспорт
	
	Возврат ВернутьСписокПериодов(ГлубинаАнализа, Периодичность, ДатаНачала, Ложь);
	
КонецФункции

Функция ВернутьТаблицуПериодов(ГлубинаАнализа, Периодичность, ДатаНачала) Экспорт
	
	Возврат ВернутьСписокПериодов(ГлубинаАнализа, Периодичность, ДатаНачала, Истина);
	
КонецФункции

Функция ВернутьСписокПериодов(ГлубинаАнализа, Периодичность, ДатаНачала, ПредставлениеВВидеТаблицы)
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ %ЧислоПериодов%
	|	%ВыбранныеПоля%
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.Периодичность = &Периодичность
	|	И Периоды.ДатаНачала <= &ДатаНачала
	|
	|УПОРЯДОЧИТЬ ПО
	|	Периоды.ДатаНачала УБЫВ";
			
	Запрос.Текст = СтрЗаменить(СтрЗаменить(ТекстЗапроса, "%ЧислоПериодов%", Строка(ГлубинаАнализа)), "%ВыбранныеПоля%", ?(ПредставлениеВВидеТаблицы, "Периоды.Ссылка КАК Ссылка, Периоды.ДатаНачала КАК ДатаНачала", "Периоды.Ссылка КАК Ссылка"));
	
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
	
	Если ПредставлениеВВидеТаблицы Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ СОХРАНЕНИЯ НАСТРОЕК АНАЛИТИЧЕСКИХ ОТЧЕТОВ ДЛЯ УПРАВЛЯЕМОГО
// ПРИЛОЖЕНИЯ.
//

Функция ПроверитьВозможностьЗаписиНастройки(Объект, СохраненнаяНастройка) Экспорт
	
	// Проверка на наличие сохраненной настройки.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1 ИСТИНА КАК ЕстьСсылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СохраненнаяНастройка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если Выборка.ЕстьСсылка <> Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	СписокДоступныхНастроек = ПолучитьИзВременногоХранилища(ТиповыеОтчетыУХ.ПолучитьСписокДоступныхВариантов(ТиповыеОтчетыУХ.ПолучитьИдентификаторОбъекта(Объект), Пользователи.ТекущийПользователь()));
	
	Элемент = СписокДоступныхНастроек.НайтиПоЗначению(СохраненнаяНастройка);

	Возврат Элемент <> Неопределено И Элемент.Пометка
		ИЛИ Пользователи.ЭтоПолноправныйПользователь();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ РАСШИФРОВКИ ОТЧЕТОВ, ДАННЫЕ КОТОРЫХ ПОЛУЧЕНЫ ИЗ ВИБ.

Функция ПолучитьОтчетПоРегиструВИБ_УР(СтрОперанд, Контекст, ДополнительныйОтбор = Неопределено) Экспорт
	
	Перем ИспользуемаяИБ;
	
	Контекст.Свойство("ИспользуемаяИБ", ИспользуемаяИБ);
	
	ИспользованиеWS = ИспользуемаяИБ.ИспользоватьWS;
	
	СтруктураЗапроса=Новый Структура;
	
	База = РасширениеИнтеграцииУХ.ПолучитьСоединение(ИспользуемаяИБ, 1);
	
	СтруктураЗапроса.Вставить("ТекстЗапроса",СтрОперанд.ТекстЗапросаМодуля);
	
	Если ТипЗнч(СтрОперанд.ПравилаВычисленияПараметровЗапроса) = Тип("ТаблицаЗначений") Тогда
		ТекПравилаВычисленияПараметров=СтрОперанд.ПравилаВычисленияПараметровЗапроса.Скопировать();
	Иначе
		ТекПравилаВычисленияПараметров = СтрОперанд.ПравилаВычисленияПараметровЗапроса.ВыгрузитьКолонки();
		Для Каждого Строка Из СтрОперанд.ПравилаВычисленияПараметровЗапроса Цикл
			
			ЗаполнитьЗначенияСвойств(ТекПравилаВычисленияПараметров.Добавить(), Строка);
			
		КонецЦикла;
	КонецЕсли;
	
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого СтрокаПараметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		СтрЗначения=ПолучитьСвойстваПараметра(СтрокаПараметр, Контекст);
		
	КонецЦикла;
	
	// Обработаем дополнительные ограничения.
	
	Если ЗначениеЗаполнено(ДополнительныйОтбор) Тогда
		
		Для Каждого ТекЗапись Из ДополнительныйОтбор Цикл
			НайденныеСтроки = СтрОперанд.ПравилаИспользованияПолейЗапроса.НайтиСтроки(Новый Структура("КодАналитики, ИспользоватьДляСинхронизации", ТекЗапись.Ключ, Истина));
				
				Для Каждого ТекСтрока Из НайденныеСтроки Цикл
					
					Значение     = ТекЗапись.Значение[ТекСтрока.РеквизитАналитики];
					ИмяПараметра = ТекСтрока.Поле;
					
					ТекСтрокаИсправления = ТекПравилаВычисленияПараметров.Найти(ИмяПараметра, "ИмяПараметра");
					
					Если ТекСтрокаИсправления = Неопределено Тогда
						ТекСтрокаИсправления = ТекПравилаВычисленияПараметров.Добавить();
						ТекСтрокаИсправления.ИмяПараметра = ИмяПараметра;
						ТекСтрокаИсправления.ТипРасчета   = "Простой";
						ТекСтрокаИсправления.ИзКонтекста  = Ложь;
						ТекСтрокаИсправления.Ссылка       = СтрОперанд.Ссылка;
					КонецЕсли;
					
					ТекСтрокаИсправления.СпособВычисленияПараметра   = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
					ТекСтрокаИсправления.УточнениеСпособаОпределения = Новый ХранилищеЗначения(Значение);
					
				КонецЦикла;
				
		КонецЦикла;
			

		
	КонецЕсли;
	
	СтруктураЗапроса.Вставить("ТаблицаВычисленияПараметров",ТекПравилаВычисленияПараметров);
	СтруктураЗапроса.Вставить("База",База);
	
	СтруктураЗапроса.Вставить("ВИБ",Новый Структура("ВИБ,ТипПодключения",ИспользуемаяИБ,0));
	СтруктураЗапроса.Вставить("ПроизвольныйЗапрос",Ложь);
	СтруктураЗапроса.Вставить("ПланСчетов",?(ЗначениеЗаполнено(СтрОперанд.Счет),СтрОперанд.Счет.Наименование,Неопределено));
					
	СтруктураЗапроса.Вставить("СтруктураПолей",Новый Структура);
	
	РасширениеИнтеграцииУХ.НастроитьОбъектЗапрос(СтруктураЗапроса, , Истина);
	
	// Проверка на вид запроса: по остаткам или оборотам.
	Остаток = Ложь;
	Для Каждого Элемент Из СтрОперанд.ПравилаИспользованияПолейЗапроса Цикл
		Если СтрНайти(Элемент.Поле, "Остаток") И ПустаяСтрока(Элемент.АналитикаОперанда) Тогда
			Остаток = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Если в справочнике Типы Внешних ИБ не указаны наименования отчетов
	// формируем название отчета по умолчанию, для чего из текста запроса
	// получаем наименование регистра бухгалтерии.
	
	//Если ПустаяСтрока(НаименованиеОтчета) ИЛИ ИспользованиеWS Тогда
		
		Если СтрОперанд.СпособПолучения = Перечисления.СпособыПолученияОперандов.ВнешниеДанныеРегистрНакопления Тогда
			НаименованиеОтчета = "УниверсальныйОтчет";
		Иначе	
			
			ПозСимвола  = СтрНайти(СтрОперанд.ТекстЗапросаМодуля, " ИЗ ");
			ВремСтрока  = Сред(СтрОперанд.ТекстЗапросаМодуля, ПозСимвола + 3);
			ПозСимвола  = СтрНайти(ВремСтрока, "РегистрБухгалтерии");
			ВремСтрока  = Сред(ВремСтрока, ПозСимвола + 19);
			ПозСимвола  = СтрНайти(ВремСтрока, ".");
			ИмяРегистра = Сред(ВремСтрока, 1, ПозСимвола - 1);
		
			Если ПустаяСтрока(ИмяРегистра) Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Невозможно получить наименование регистра бухгалтерии'"));
				Возврат Новый ТабличныйДокумент;
			КонецЕсли;
			
			Если СтрНайти(СтрОперанд.ТекстЗапросаМодуля, "ОборотыДтКт") <> 0 Тогда
				НаименованиеОтчета = "АнализСчета" + ИмяРегистра;
			Иначе
				НаименованиеОтчета = "ОборотноСальдоваяВедомостьПоСчету" + ИмяРегистра;
			КонецЕсли;

		КонецЕсли;
		// В случае если запрос является запросом по оборотам по счетам 
	    //используется отчет "АналитикаСчета", иначе
		// "ОборотноСальдоваяВедомость".
	//КонецЕсли;
	
		
	СтрОперанд_Структура = Новый Структура("СпособПолучения, ТекстЗапросаМодуля, Код, Счет, КоррСчет, РесурсРегистра");
	
	СтрОперанд_Структура.СпособПолучения=СтрОперанд.СпособПолучения;
	СтрОперанд_Структура.ТекстЗапросаМодуля=СтрОперанд.ТекстЗапросаМодуля;
	СтрОперанд_Структура.Код=СтрОперанд.Код;
	СтрОперанд_Структура.Счет=СтрОперанд.Счет.Код;
	СтрОперанд_Структура.КоррСчет=СтрОперанд.КоррСчет.Код;
	СтрОперанд_Структура.РесурсРегистра=СтрОперанд.РесурсРегистра;
	
	Обработка = Обработки["ПолучениеОтчетностиВИБ"].Создать();
	Обработка.СтрОперанд        = СтрОперанд_Структура;
	Обработка.СтруктураЗапроса  = СтруктураЗапроса;
	Обработка.ИсточникДанных 	= СтрОперанд.Ссылка;
	Обработка.ИмяРегистра       = ИмяРегистра;
	
	Возврат Обработка.ПодготовитьОтчет();
	
КонецФункции

// Вычисляет значение параметра операнда в зависимости от способа его вычисления
//
Функция ПолучитьСвойстваПараметра(СтрокаПараметр, Контекст) Экспорт
	
	Перем ЗначениеПараметра;
	
	ОсновнаяВалюта 	= Контекст.Валюта;
	ПериодОтчета   	= Контекст.БазовыйПериод;
	Организация 	= Контекст.Организация;
	Проект		    = Контекст.Проект;
	Сценарий       	= Контекст.БазовыйСценарий;
	
	СвойстваПараметра=Новый Структура("ВидСравнения,Значение");
	
	Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОсновнаяВалюта;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=Организация;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=Проект;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.ВИерархии;
		СвойстваПараметра.Значение=Проект;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ПериодОтчета;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		
		СвойстваПараметра.Значение=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=Сценарий;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ПериодОтчета.ДатаОкончания);
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ПериодОтчета.ДатаНачала;
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение = ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод = ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ОтнПериод.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ОтнПериод.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод.ДатаНачала;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод.ДатаНачала;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
				
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоГода(ПериодОтчета.ДатаНачала);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
				
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецГода(ПериодОтчета.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, -1);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоГода(ОтнПериод.ДатаНачала);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецГода(ОтнПериод.ДатаНачала);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Булево
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Строка
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Число
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.НеРавно;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.ВСпискеПоИерархии;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.НеВСпискеПоИерархии;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	 ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
		
		Попытка
			
			ИсходныйТекстПараметра   = СтрокаПараметр.ТекстМодуля;
			ТекстВычисленияПараметра = ИсходныйТекстПараметра;
	
			Выполнить(ТекстВычисленияПараметра);
			
			СвойстваПараметра.ВидСравнения=?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений,ВидСравнения.ВСписке,ВидСравнения.Равно); 
			СвойстваПараметра.Значение=ЗначениеПараметра;
			
			СтрокаПараметр.ИзКонтекста=Истина;
			СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
			
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Во время исполнения процедуры вычисления параметра %1
			|произошла следующая критическая ошибка:%2%3'"), 
			                                    	СокрЛП(СтрокаПараметр.ПредставлениеПараметра), Символы.ПС, 
			                                    	ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
		КонецПопытки;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		СвойстваПараметра.ВидСравнения = ?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета,ВидСравнения.ВСписке,ВидСравнения.НеВСписке);
		
		ТипыОрганизаций=Новый СписокЗначений;
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
			// Элиминирующие организации также исключаем
			ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
			
			
		КонецЕсли;
				
		ВладелецПериметра=СтрокаПараметр.УточнениеСпособаОпределения;
		
		Если ТипЗнч(ВладелецПериметра)=Тип("Структура") Тогда
			
			// Отбор из ВИБ по организациям периметра
			
			КонсолидирующаяОрганизация=ВладелецПериметра.МассивОтбора[0]._ЗначениеКонсолидации.Значение;
			
			Если Не ЗначениеЗаполнено(КонсолидирующаяОрганизация) Тогда
				КонсолидирующаяОрганизация=Организация;
			КонецЕсли;
			
			СписокПериметр=Новый СписокЗначений;
			
			СписокПериметр.ЗагрузитьЗначения(СоставПериметра(Сценарий, ПериодОтчета, КонсолидирующаяОрганизация, , , , ТипыОрганизаций));
			
			Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СписокПериметр.Добавить(КонсолидирующаяОрганизация);
				
			КонецЕсли;
			
			МассивПериметр=Новый Массив;
			
			// Сформируем массив отбора по составу периметра.
			Для Каждого ТекЭлемент ИЗ СписокПериметр Цикл
				
				СтруктураЭлемент=Новый Структура;
				СтруктураЭлемент.Вставить("_ЗначениеКонсолидации",ТекЭлемент);
				
				Если ВладелецПериметра.Свойство("СписокЭлементов") Тогда
					
					Для Каждого РеквизитСоответствия ИЗ ВладелецПериметра.СписокЭлементов Цикл
						
						СтруктураЭлемент.Вставить(РеквизитСоответствия.РеквизитОбъектаВнешнейИБ,ТекЭлемент.Значение[РеквизитСоответствия.РеквизитОбъектаКонсолидации]);
						
					КонецЦикла;
					
				Иначе
					
					Для Каждого РеквизитСоответствия ИЗ ВладелецПериметра.МассивОтбора[0] Цикл     
						
						Если РеквизитСоответствия.Ключ="_ЗначениеКонсолидации" Тогда        
							Продолжить;       
						КонецЕсли;      
						
						СтруктураЭлемент.Вставить(РеквизитСоответствия.Ключ,ТекЭлемент.Значение[РеквизитСоответствия.Ключ]);
						
					КонецЦикла;
					
				КонецЕсли;
				
				МассивПериметр.Добавить(СтруктураЭлемент);
				
			КонецЦикла;
			
			ВладелецПериметра.Вставить("МассивОтбора",МассивПериметр);
			СтрокаПараметр.УточнениеСпособаОпределения=Новый ХранилищеЗначения(ВладелецПериметра);
			
		Иначе
			
			ТекСоставПериметра             = СоставПериметра(Сценарий, ПериодОтчета,?(ЗначениеЗаполнено(ВладелецПериметра),ВладелецПериметра,Организация) , , , ,ТипыОрганизаций);
			
			СвойстваПараметра.Значение     = Новый СписокЗначений; // Функция СоставПериметра() возвращает массив организаций. Преобразуем к СЗ.
			
			Для Каждого ЭлементМассива Из ТекСоставПериметра Цикл
				СвойстваПараметра.Значение.Добавить(ЭлементМассива);
			КонецЦикла;
			
			Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СвойстваПараметра.Значение.Добавить(?(ЗначениеЗаполнено(ВладелецПериметра),ВладелецПериметра,Организация));
				
			КонецЕсли;
				
			
			СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
			СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СвойстваПараметра;
	
КонецФункции

// Возвращает состав периметра организаций по заданным периоду, сценарию с учетом дополнительных отборов.
//
// Параметры:
//	локСценарий - сценарий, для котороого требуется получить периметр, СправочникСсылка.Сценарии;
//	локПериодОтчета - для котороого требуется получить периметр, СправочникСсылка.Периоды;
//	локОрганизация - организация консолидирующая организация, СправочникСсылка.Организации;
//	локМетодКонсолидации - метод консолидации, ПеречислениеСсылка.МетодыКонсолидации;
//	локМинПолнаяДоляВладения - максимальная полная доля владения, число;
//	локМаксПолнаяДоляВладения - минимальная полная доля владения, число;
//	локТипыОрганизаций - типы организаций, для которых требуется получить периметр.
//
// Возвращаемое значение:
//	Массив элементов типа СпарвочникСсылка.Организация.
//
Функция СоставПериметра(локСценарий = Неопределено, локПериодОтчета = Неопределено, локОрганизация = Неопределено, локМетодКонсолидации = Неопределено, 
				локМинПолнаяДоляВладения = 0, локМаксПолнаяДоляВладения = 100, локТипыОрганизаций = Неопределено, ВладелецПериметра = Неопределено) Экспорт

	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(локСценарий, локПериодОтчета, локОрганизация,
												локМетодКонсолидации,
												локМинПолнаяДоляВладения,
												локМаксПолнаяДоляВладения,
												локТипыОрганизаций,
												ВладелецПериметра).ВыгрузитьКолонку("ИндивидуальнаяОрганизация");

КонецФункции

#Область АналитическиеПанели

#КонецОбласти

Функция ПредставлениеПроцентовВВидеШкалы(Проценты, ДлиннаШкалы = 20) Экспорт
	
	Если ТипЗнч(Проценты) <> Тип("Число") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Окр(Проценты) = 0 Тогда
		Возврат "";
	КонецЕсли;
	Стр = "";
	Для Инд = 1 По ДлиннаШкалы Цикл
		Стр = Стр + "█";
	КонецЦикла;
	Возврат Лев(Стр, Проценты * 0.2);
	
КонецФункции
