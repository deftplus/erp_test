////////////////////////////////////////////////////////////////////////////////
// Модуль содержит вызовы кэшируемых методов логики управления согласованием
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция ТребуетсяПроверкаПередУстановкойСтатуса(ОбъектСсылка) Экспорт
	
	ВерсияУправлениеХолдингом = ИдентификацияПродуктаУХКлиентСервер.ВерсияУправлениеХолдингом();
	ОбъектыТребующиеПроверки = Новый Массив;
	ОбъектыТребующиеПроверки.Добавить("Документ.ЗаявкаНаРасходованиеДенежныхСредств");
	ОбъектыТребующиеПроверки.Добавить("Документ.ОжидаемоеПоступлениеДенежныхСредств");
	ОбъектыТребующиеПроверки.Добавить("Документ.ЗаявкаНаРасход");
	ОбъектыТребующиеПроверки.Добавить("Документ.ПланируемыйДоход"); 
	Если ВерсияУправлениеХолдингом = "3.2" Тогда
		ТипДокумента = "Документ.ЗаявкаНаПривлечениеФинансирования";
		ОбъектыТребующиеПроверки.Добавить(ТипДокумента);		
	КонецЕсли;
	
	
	Возврат ОбъектыТребующиеПроверки.Найти(ОбъектСсылка.Метаданные().ПолноеИмя()) <> Неопределено;
	
КонецФункции

Функция ПолучитьЭтапыПредшественники(ЭтапВход, ДокументПроцессаВход = Неопределено, ПроходитьУсловие = Истина) Экспорт
	РезультатФункции = Новый Массив;
	ДополнитьМассивПредшественников(РезультатФункции, ЭтапВход, , ДокументПроцессаВход, ПроходитьУсловие);
	Возврат РезультатФункции;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Добавляет в массив МассивРезультат этапы-предшественники этапа ЭтапВход. Параметр ГлубинаВход
// защищает от бесконечной рекурсии.
Процедура ДополнитьМассивПредшественников(МассивРезультат, ЭтапВход, ГлубинаВход = 0, ДокументПроцессаВход = Неопределено, ПроходитьУсловие = Истина) Экспорт
	Если ГлубинаВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(ДокументПроцессаВход) Тогда
		// Когда документ процесса задан, скорректируем на сформированный маршрут процесса.
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап,
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап.ТипЭтапа КАК ТипЭтапа,
		|	ТекущийМаршрутПроцесса.ЭтапИсточник,
		|	ТекущийМаршрутПроцесса.ЭтапПриемник
		|ИЗ
		|	РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыУниверсальныхПроцессовЭтапыПредшественники
		|		ПО ТекущийМаршрутПроцесса.ЭтапИсточник = ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап
		|			И ТекущийМаршрутПроцесса.ЭтапПриемник = ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка
		|ГДЕ
		|	НЕ ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка.ПометкаУдаления
		|	И ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка = &Ссылка
		|	И ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументПроцесса";
		Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцессаВход);
	Иначе
		// Документ процесса не задан. Выведем все этапы, предшествующие текущему.
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап,
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап.ТипЭтапа КАК ТипЭтапа
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыУниверсальныхПроцессовЭтапыПредшественники
		|ГДЕ
		|	НЕ ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка.ПометкаУдаления
		|	И ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка = &Ссылка";
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ЭтапВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если МассивРезультат.Найти(ВыборкаДетальныеЗаписи.Этап) <> Неопределено тогда
			Возврат;
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
			// Не требуется получать предшественников для данного этапа.
			МассивРезультат.Добавить(ВыборкаДетальныеЗаписи.Этап);
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
			// Не требуется получать предшественников для данного этапа.
			МассивРезультат.Добавить(ВыборкаДетальныеЗаписи.Этап);
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут Тогда
			// Не требуется получать предшественников для данного этапа.
			МассивРезультат.Добавить(ВыборкаДетальныеЗаписи.Этап);
		ИначеЕсли ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
			// Условный переход. Убедимся, что он ссылается на этот этап.
			МассивПоследователей = Новый Массив;
			МодульРегламентныхЗаданийУХ.ДополнитьМассивПоследователей(МассивПоследователей, ВыборкаДетальныеЗаписи.Этап, ГлубинаВход + 1, ДокументПроцессаВход);
			Если МассивПоследователей.Найти(ЭтапВход) <> Неопределено Тогда
				МассивРезультат.Добавить(ВыборкаДетальныеЗаписи.Этап);
				Если ПроходитьУсловие тогда
					ДополнитьМассивПредшественников(МассивРезультат, ВыборкаДетальныеЗаписи.Этап, ГлубинаВход + 1, ДокументПроцессаВход, ПроходитьУсловие);
				КонецЕсли;
			Иначе
				// Условный переход на этот этап не ссылается. Не добавляем.
			КонецЕсли;
		Иначе	
			// Это не этап согласования. Получим его предшественников.
			МассивРезультат.Добавить(ВыборкаДетальныеЗаписи.Этап);
			ДополнитьМассивПредшественников(МассивРезультат, ВыборкаДетальныеЗаписи.Этап, ГлубинаВход + 1, ДокументПроцессаВход, ПроходитьУсловие);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти
