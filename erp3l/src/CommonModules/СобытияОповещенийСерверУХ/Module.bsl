// Записывает в регистр СобытияОповещений запись об оповещении. Возвращает успешность операции.
Функция СоздатьЗаписьСобытия(СпособОповещенияВход, ПолучательВход, ВидСобытияВход, ИсточникВход, ШаблонОповещенияВход, 
		ДатаДобавленияВход = Неопределено, ПараметрыСобытияВход = Неопределено, ВложенияВход = Неопределено, 
		ИдентификаторОповещенияВход = "", ДатаОтправкиВход = Неопределено, ТемаВход = "", ЗадачаВход = Неопределено,
		ЭтапВход = Неопределено, ТекстСообщенияВход = "", ЗамещаемыйВход = Неопределено, ВнешняяПечатнаяФормаВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	// Получение параметров.
	// -Дата добавления.
	Если ДатаДобавленияВход = Неопределено Тогда
		ДатаДобавленияРабочий = ТекущаяДатаСеанса();										// По умолчанию используем текущую дату отправления.	
	Иначе
		ДатаДобавленияРабочий = ДатаДобавленияВход;
	КонецЕсли;	
	// -Дополнительные параметры.
	ТекПользователь = Пользователи.ТекущийПользователь(); 
	Если ПараметрыСобытияВход = Неопределено Тогда
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекущийПользователь", ТекПользователь);				// Т.к. отправка осуществляется из фонового задания, пользователь в дальнейшем не будет доступен.
		ПараметрыСобытияРабочий = Новый ХранилищеЗначения(СтруктураПараметров);
	ИначеЕсли ТипЗнч(ПараметрыСобытияВход) = Тип("Структура") Тогда	
		ПараметрыСобытияВход.Вставить("ТекущийПользователь", ТекПользователь);				// Т.к. отправка осуществляется из фонового задания, пользователь в дальнейшем не будет доступен.
		ПараметрыСобытияРабочий = Новый ХранилищеЗначения(ПараметрыСобытияВход);
	ИначеЕсли ТипЗнч(ПараметрыСобытияВход) = Тип("ХранилищеЗначения") Тогда	
		ПараметрыСобытияРабочий = ПараметрыСобытияВход;
	ИначеЕсли ТипЗнч(ПараметрыСобытияВход) = Тип("ТаблицаЗначений") Тогда		
		ЕстьКолонкаКодПарамтера			 = (ПараметрыСобытияВход.Колонки.Найти("КодПараметра") <> Неопределено);
		ЕстьКолонкаЗначениеПоУмолчанию	 = (ПараметрыСобытияВход.Колонки.Найти("ЗначениеПоУмолчанию") <> Неопределено);
		Если (ЕстьКолонкаКодПарамтера) И (ЕстьКолонкаЗначениеПоУмолчанию) Тогда
			НоваяСтрока = ПараметрыСобытияВход.Добавить();
			НоваяСтрока.КодПараметра		 = "ТекущийПользователь";
			НоваяСтрока.ЗначениеПоУмолчанию	 = ТекПользователь;
		Иначе
			// Не добавляем текущего пользователя.
		КонецЕсли;	
		ПараметрыСобытияРабочий = Новый ХранилищеЗначения(ПараметрыСобытияВход);					
	Иначе
		ПараметрыСобытияРабочий = Новый ХранилищеЗначения(ПараметрыСобытияВход);			// По умолчанию завернём в хранилище входные данные.
	КонецЕсли;
	// -Вложенные файлы.
	Если ВложенияВход = Неопределено Тогда
		ВложенияРабочий = Новый ХранилищеЗначения(Новый Массив);
	ИначеЕсли ТипЗнч(ВложенияВход) = Тип("Массив") Тогда	
		ВложенияРабочий = Новый ХранилищеЗначения(ВложенияВход);
	ИначеЕсли ТипЗнч(ВложенияВход) = Тип("ХранилищеЗначения") Тогда	
		ВложенияРабочий = ВложенияВход;
	Иначе
		ВложенияРабочий = Новый ХранилищеЗначения(ВложенияВход);							// По умолчанию завернём в хранилище входные данные.
	КонецЕсли;
	// - Идентификатор оповещения.
	Если ИдентификаторОповещенияВход = "" Тогда
		ИдентификаторРабочий = Строка(Новый УникальныйИдентификатор);						// Сформируем новый идентификатор, если не указан явно.
	Иначе
		ИдентификаторРабочий = ИдентификаторОповещенияВход;
	КонецЕсли;
	// - Дата отправки.
	Если ДатаОтправкиВход = Неопределено Тогда
		ДатаОтправкиРабочий = Дата(1, 1, 1);												// По умолчанию выставляем пустую дату отправки.
	Иначе
		ДатаОтправкиРабочий = ДатаОтправкиВход;
	КонецЕсли;
	// - Задача.
	Если ЗадачаВход = Неопределено Тогда
		ЗадачаРабочий = Справочники.Задачи.ПустаяСсылка();									// Не указываем задачу по умолчанию.
	Иначе
		ЗадачаРабочий = ЗадачаВход;
	КонецЕсли;
	// -Этап процесса.
	Если ЭтапВход = Неопределено Тогда
		ЭтапРабочий = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();				// Не указываем этап процесса по умолчанию.
	Иначе
		ЭтапРабочий = ЭтапВход;
	КонецЕсли;
	// -Замещаемый пользователь.
	Если ЗамещаемыйВход = Неопределено Тогда
		ЗамещаемыйРабочий = Справочники.Пользователи.ПустаяСсылка();
	Иначе
		ЗамещаемыйРабочий = ЗамещаемыйВход;
	КонецЕсли;
	// -Внешняя печатная форма.
	Если ВнешняяПечатнаяФормаВход = Неопределено Тогда
		ВнешняяПечатнаяФормаРабочий = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка();
	Иначе
		ВнешняяПечатнаяФормаРабочий = ВнешняяПечатнаяФормаВход;
	КонецЕсли;
	// Запись в регистр.
	Попытка
		МенеджерЗаписи = РегистрыСведений.СобытияОповещений.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СпособОповещения			 = СпособОповещенияВход;
		МенеджерЗаписи.Получатель				 = ПолучательВход;
		МенеджерЗаписи.ВидСобытияОповещения		 = ВидСобытияВход;
		МенеджерЗаписи.Источник					 = ИсточникВход;
		МенеджерЗаписи.ДатаДобавления			 = ДатаДобавленияРабочий;
		МенеджерЗаписи.ИдентификаторОповещения	 = ИдентификаторРабочий;
		МенеджерЗаписи.ДатаОтправки				 = ДатаОтправкиРабочий;
		МенеджерЗаписи.ТекстСообщения			 = ТекстСообщенияВход;
		МенеджерЗаписи.ПараметрыСобытия			 = ПараметрыСобытияРабочий;
		МенеджерЗаписи.Вложения					 = ВложенияРабочий;
		МенеджерЗаписи.Тема						 = ТемаВход;
		МенеджерЗаписи.Задача					 = ЗадачаРабочий;
		МенеджерЗаписи.ХранилищеШаблона			 = ШаблонОповещенияВход;
		МенеджерЗаписи.Этап						 = ЭтапРабочий;
		МенеджерЗаписи.Замещаемый				 = ЗамещаемыйРабочий;
		МенеджерЗаписи.ВнешняяПечатнаяФорма		 = ВнешняяПечатнаяФормаРабочий;
		МенеджерЗаписи.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'При записи события оповещения %ВидСобытия% получателю %Получатель% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСобытия%", ВидСобытияВход);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Получатель%", ПолучательВход);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьЗаписьСобытия()

// Записывает в регистр СобытияОповещений запись об оповещении, принимая в качестве параметра
// структуру данных. Возвращает успешность операции.
Функция СоздатьЗаписьСобытияПоСтруктуре(СтруктураВход) Экспорт
	РезультатФункции = Истина;
	// Считывание данных структуры.
	СпособОповещенияЗапись			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "СпособОповещения", Перечисления.СпособыОповещения.ПустаяСсылка());
	ПолучательЗапись				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Получатель", Справочники.Пользователи.ПустаяСсылка());
	ВидСобытияЗапись				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ВидСобытия", Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	ИсточникЗапись					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Источник", Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка());
	ДатаДобавленияЗапись			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ДатаДобавления", Неопределено);
	ИдентификаторОповещенияЗапись	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ИдентифкаторОповещения", "");
	ДатаОтправкиЗапись				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ДатаОтправки", Неопределено);	
	ШаблонОповещенияЗапись			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ШаблонОповещения", Справочники.ШаблоныОповещений.ПустаяСсылка());
	ПараметрыСобытияЗапись			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ПараметрыСобытия", Неопределено);
	ВложенияЗапись					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Вложения", Неопределено);
	ТемаЗапись						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Тема", "");
	ЗадачаЗапись					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Задача", Неопределено);
	ТекстСообщенияЗапись			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ТекстСообщения", "");
	ЭтапЗапись						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Этап", Неопределено);
	ЗамещаемыйЗапись				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "Замещаемый", Неопределено);
	ВнешняяПечатнаяФормаЗапись		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВход, "ВнешняяПечатнаяФорма", Неопределено);
	// Запись данных в регистр.
	Если ТипЗнч(ПолучательЗапись) = Тип("Массив") Тогда
		Для Каждого ТекПолучательЗапись Из ПолучательЗапись Цикл
			РезультатФункции = СоздатьЗаписьСобытия(СпособОповещенияЗапись, ТекПолучательЗапись, ВидСобытияЗапись, ИсточникЗапись, ШаблонОповещенияЗапись, ДатаДобавленияЗапись,
				ПараметрыСобытияЗапись, ВложенияЗапись, ИдентификаторОповещенияЗапись, ДатаОтправкиЗапись, ТемаЗапись, ЗадачаЗапись, ЭтапЗапись, ТекстСообщенияЗапись, ЗамещаемыйЗапись, ВнешняяПечатнаяФормаЗапись);
		КонецЦикла;
	Иначе
		РезультатФункции = СоздатьЗаписьСобытия(СпособОповещенияЗапись, ПолучательЗапись, ВидСобытияЗапись, ИсточникЗапись, ШаблонОповещенияЗапись, ДатаДобавленияЗапись,
			ПараметрыСобытияЗапись, ВложенияЗапись, ИдентификаторОповещенияЗапись, ДатаОтправкиЗапись, ТемаЗапись, ЗадачаЗапись, ЭтапЗапись, ТекстСообщенияЗапись, ЗамещаемыйЗапись, ВнешняяПечатнаяФормаЗапись);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Получает таблицу значений, содержащую параметры оповещений, которые в данный моент требуют отправки.
Функция ПолучитьТаблицуОповещенийКОтправке() Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СобытияОповещений.СпособОповещения КАК СпособОповещения,
		|	СобытияОповещений.Получатель КАК Получатель,
		|	СобытияОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
		|	СобытияОповещений.Источник КАК Источник,
		|	СобытияОповещений.ДатаДобавления КАК ДатаДобавления,
		|	СобытияОповещений.ИдентификаторОповещения КАК ИдентификаторОповещения,
		|	СобытияОповещений.ДатаОтправки КАК ДатаОтправки,
		|	СобытияОповещений.ТекстСообщения КАК ТекстСообщения,
		|	СобытияОповещений.ПараметрыСобытия КАК ПараметрыСобытия,
		|	СобытияОповещений.Вложения КАК Вложения,
		|	СобытияОповещений.Тема КАК Тема,
		|	СобытияОповещений.Задача КАК Задача,
		|	СобытияОповещений.ХранилищеШаблона КАК ХранилищеШаблона,
		|	СобытияОповещений.ВнешняяПечатнаяФорма КАК ВнешняяПечатнаяФорма,
		|	СобытияОповещений.Этап КАК Этап,
		|	СобытияОповещений.Замещаемый КАК Замещаемый
		|ИЗ
		|	РегистрСведений.СобытияОповещений КАК СобытияОповещений
		|ГДЕ
		|	СобытияОповещений.ДатаОтправки = &ПустаяДата";
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Вовзращает основной текст оповещения по структуре данных СтруктураОповещенияВход.
// Параметр ПоЭлектроннойПочтеВход определяет необходимость спецэфических данных 
// для вставки в электронное письмо.
Функция ПолучитьТекстОповещения(СтруктураОповещенияВход, ПоЭлектроннойПочтеВход)
	// Инициализация.
	РезультатФункции = "";
	ТекстСообщенияВход		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ТекстСообщения", "");
	ХранилищеШаблонаВход	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ХранилищеШаблона", Справочники.ШаблоныОповещений.ПустаяСсылка());
	ВидСобытияВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ВидСобытияОповещения", Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	ИсточникВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Источник", Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка());
	ПараметрыСобытияВход	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ПараметрыСобытия", Новый ТаблицаЗначений);	
	ЗадачаВход				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Задача", Справочники.Задачи.ПустаяСсылка());
	ПользовательВход		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Получатель", Справочники.Пользователи.ПустаяСсылка());
	ЭтапВход				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	ЗамещаемыйВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Замещаемый", Справочники.Пользователи.ПустаяСсылка());
	КатегорияСобытия = ВидСобытияВход.КатегорияСобытия;
	// Получение шаблона текста сообщения.
	Если ЗначениеЗаполнено(ХранилищеШаблонаВход) Тогда
		ДанныеШаблона = ХранилищеШаблонаВход.Шаблон.Получить();
		Если ТипЗнч(ДанныеШаблона) = Тип("Строка") Тогда
			РезультатФункции = ДанныеШаблона;
		Иначе
			РезультатФункции = МодульУправленияОповещениямиУХ.ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияСобытия, ВидСобытияВход, ИсточникВход);
		КонецЕсли;
	Иначе	
		Если СокрЛП(ТекстСообщенияВход) <> "" Тогда
			РезультатФункции = ТекстСообщенияВход;
		Иначе	
			РезультатФункции = МодульУправленияОповещениямиУХ.ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияСобытия, ВидСобытияВход, ИсточникВход);
		КонецЕсли;
	КонецЕсли;
	// Добавим текст замещаемого.
	Если ЗначениеЗаполнено(ЗамещаемыйВход) Тогда
		РезультатФункции = МодульУправленияОповещениямиУХ.ДобавитьТекстЗамещения(РезультатФункции, ЗамещаемыйВход);
	Иначе
		// Не добавляем текст замещаемого.
	КонецЕсли;
	// Преобразование таблицы параметров.
	Если ТипЗнч(ПараметрыСобытияВход) = Тип("ХранилищеЗначения") Тогда
		ПараметрыСобытияТаблица = ПараметрыСобытияВход.Получить();
	Иначе
		ПараметрыСобытияТаблица = ПараметрыСобытияВход;
	КонецЕсли;
	// Получение текста письма по шаблону.
	РезультатФункции = МодульУправленияОповещениямиУХ.ПолучитьТекстСообщенияПоШаблону(ВидСобытияВход, ИсточникВход, КатегорияСобытия, , РезультатФункции, ПараметрыСобытияТаблица);
	// Добавим текст для вида события.
	Если ВидСобытияВход = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование Тогда
		РезультатФункции	 = МодульРегламентныхЗаданийУХ.ДобавитьТекстСогласованияПоЗадаче(РезультатФункции, ЗадачаВход, ПользовательВход, ПоЭлектроннойПочтеВход, ЭтапВход);
	ИначеЕсли ВидСобытияВход = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа Тогда				
		РезультатФункции	 = МодульРегламентныхЗаданийУХ.ДобавитьТекстВыбораЭтапаПоЗадаче(РезультатФункции, ЗадачаВход, ПользовательВход, ПоЭлектроннойПочтеВход, ЭтапВход);
	Иначе
		// Не изменяем текст оповещения.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТекстОповещения()

// Выполняет отправку оповещения в системе по событию, заданного
// структурой СтруктураОповещенияВход. 
Функция ОтправитьОповещениеВСистеме(СтруктураОповещенияВход)
	// Инициализация.
	РезультатФункции = Истина;
	Пользователь		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Получатель", Справочники.Пользователи.ПустаяСсылка());
	ВидСобытия			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ВидСобытияОповещения", Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	ЗадачаВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Задача", Справочники.Задачи.ПустаяСсылка());
	ТемаВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Тема", "");
	КатегорияСобытия = ВидСобытия.КатегорияСобытия;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		РезультатФункции = Ложь;
	Иначе	
		ТекстСообщенияСистемы = ПолучитьТекстОповещения(СтруктураОповещенияВход, Ложь);
		// Получение текста темы оповещения.
		Если Не ЗначениеЗаполнено(ТемаВход) Тогда
			ДокФормат = Новый ФорматированныйДокумент;
			ДокФормат.УстановитьHTML(ТекстСообщенияСистемы, Новый Структура);
			ТекстТемы = ДокФормат.ПолучитьТекст();
		Иначе
			ТекстТемы = ТемаВход;
		КонецЕсли;
		//Когда задача задана, заполним её в ресурс. Иначе заполним пустую ссылку
		Если ЗначениеЗаполнено(ЗадачаВход) Тогда
			ЗадачаРабочий = ЗадачаВход;
		Иначе
			ЗадачаРабочий = Справочники.Задачи.ПустаяСсылка();
		КонецЕсли;
		// Запись оповещения в регистр.
		Попытка
			ОповещениеОбъект = РегистрыСведений.ОповещенияПользователей.СоздатьМенеджерЗаписи();	
			ОповещениеОбъект.ВидОповещения				 = ВидСобытия;
			ОповещениеОбъект.Пользователь				 = Пользователь;
			ОповещениеОбъект.КатегорияОповещений		 = КатегорияСобытия;
			ОповещениеОбъект.ВидОповещения				 = ВидСобытия;
			ОповещениеОбъект.Тема						 = ТекстТемы; 
			ОповещениеОбъект.Сообщение					 = ТекстСообщенияСистемы;
			ОповещениеОбъект.ДатаСоздания				 = ТекущаяДата();
			ОповещениеОбъект.ИдентификаторОповещения	 = Новый УникальныйИдентификатор;
			ОповещениеОбъект.Задача						 = ЗадачаРабочий;
			ОповещениеОбъект.Записать();
			РезультатФункции = Истина;
		Исключение
			ТекстОшибки = "<" + Строка(ВидСобытия) + ">" + "<" + Строка(Пользователь) + ">";
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru='Не удалось записать ';en='Failed to write '") + ТекстОшибки + НСтр("ru=' пользователю по причине ';en=' for the user: '") + ОписаниеОшибки());
			РезультатФункции = Ложь;
		КонецПопытки; 	
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОтправитьОповещениеВСистеме()

// Возвращает почтовое вложение в виде печатной формы ВнешняяПечатнаяФормаВход
// для объекта оповещения ВнешняяПечатнаяФормаВход.
Функция СформироватьВложениеПоПечатнойФорме(ОбъектОповещенияВход, ВнешняяПечатнаяФормаВход)
	РезультатФункции = Неопределено;
	Попытка
		Если (ЗначениеЗаполнено(ОбъектОповещенияВход)) И (ЗначениеЗаполнено(ВнешняяПечатнаяФормаВход)) Тогда
			// Параметры печати.
			МассивОбъектов = Новый Массив;
			МассивОбъектов.Добавить(ОбъектОповещенияВход);
			ПараметрыИсточника = Новый Структура;
			ПараметрыИсточника.Вставить("ИдентификаторКоманды", "СогласованиеДокумента");
			ПараметрыИсточника.Вставить("ОбъектыНазначения", МассивОбъектов);
			ТабДокРезультат = Новый ТабличныйДокумент;
			ПараметрыВывода = Новый Структура;
			ВыходнойДокумент = Новый ТаблицаЗначений;
			ПараметрыВывода.Вставить("ДополнительнаяОбработкаСсылка", ВнешняяПечатнаяФормаВход);
			ПараметрыВывода.Вставить("ДоступнаПечатьПоКомплектно", Ложь);
			ПараметрыВывода.Вставить("ПараметрыОтправки", Новый Структура);
			СписокОбъектыПечати = Новый СписокЗначений;
			СписокОбъектыПечати.ЗагрузитьЗначения(МассивОбъектов);   
			// Формирование табличного документа.
			ДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФормаВход,	ПараметрыИсточника, ВыходнойДокумент, СписокОбъектыПечати, ПараметрыВывода);
			Если ВыходнойДокумент.Количество() > 0 Тогда
				ПерваяСтрока = ВыходнойДокумент[0];
				ТабДокРезультат = ПерваяСтрока.ТабличныйДокумент;
			Иначе
				ТабДокРезультат = Новый ТабличныйДокумент;
			КонецЕсли;
			// Получение PDF из табличного документа.
			ИмяФайлаТабДок = ПолучитьИмяВременногоФайла("pdf");
			ТабДокРезультат.Записать(ИмяФайлаТабДок, ТипФайлаТабличногоДокумента.PDF);
			РезультатФункции = ИмяФайлаТабДок;
		Иначе
			РезультатФункции = Неопределено;
		КонецЕсли;	
	Исключение
		ТекстСообщения = НСтр("ru = 'При формировании печатной формы %ПечатнаяФорма% по объекту %Объект% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПечатнаяФорма%", Строка(ВнешняяПечатнаяФормаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектОповещенияВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СформироватьВложениеПоПечатнойФорме()

// Выполняет отправку по электронной почте оповещения по событию, заданного
// структурой СтруктураОповещенияВход.
Функция ОтправитьОповещениеПоЭлектроннойПочте(СтруктураОповещенияВход)
	// Инициализация
	РезультатФункции = Истина;
	Пользователь		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Получатель", Справочники.Пользователи.ПустаяСсылка());
	ВидСобытия			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ВидСобытияОповещения", Справочники.ВидыСобытийОповещений.ПустаяСсылка());
	ЗадачаВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Задача", Справочники.Задачи.ПустаяСсылка());
	ТемаВход			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Тема", "");
	Вложение = Неопределено;			
	КатегорияСобытия = ВидСобытия.КатегорияСобытия;
	Если Не ЗначениеЗаполнено(Пользователь) Тогда
		РезультатФункции = Ложь;
	Иначе	
		// Получим электронный адрес для отправки.
		ПочтаОтветственного = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Пользователь, Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		Если (ПустаяСтрока(ПочтаОтветственного) ИЛИ ПочтаОтветственного = Неопределено) Тогда
			РезультатФункции = Ложь;			// Электронный адрес не задан.
		Иначе
			Попытка	
				// Тема письма.
				Если Не ЗначениеЗаполнено(ТемаВход) Тогда
					Если ВидСобытия = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование Тогда
						Если ЗначениеЗаполнено(ЗадачаВход) Тогда
							СвязанныйОбъект = ЗадачаВход.СвязанныйОбъект;
							ПредставлениеОбъекта = Строка(СвязанныйОбъект);
							ТемаПисьма = НСтр("ru = 'Оповещение 1С:УХ: Требуется согласование <'") + ПредставлениеОбъекта + ">";
						Иначе
							ТемаПисьма = НСтр("ru = 'Оповещение 1С:УХ: '") + Строка(ВидСобытия);
						КонецЕсли;
					Иначе
						ТемаПисьма = НСтр("ru = 'Оповещение 1С:УХ: '") + Строка(ВидСобытия);
					КонецЕсли;
				Иначе
					ТемаПисьма = ТемаВход;
				КонецЕсли;
				// Сформируем письмо.
				Письмо = Новый ИнтернетПочтовоеСообщение;
				Письмо.Кодировка = "utf-8";
				Письмо.Получатели.Добавить(ПочтаОтветственного);
				Письмо.Отправитель = МодульУправленияОповещениямиУХ.УчетнаяЗаписьДляРассылкиУведомлений();			
				// Сформируем тело письма.
				ТекстПочтовогоСообщения = ПолучитьТекстОповещения(СтруктураОповещенияВход, Истина);
				ТекстПочтовогоСообщения = МодульУправленияОповещениямиУХ.ПреобразоватьНавигационныеСсылкиВоВнешние(ТекстПочтовогоСообщения);
				// Формирование вложения в PDF.
				СформироватьПоРакурсу = Ложь;
				Если ЗначениеЗаполнено(ЗадачаВход) Тогда
					СформироватьПоРакурсу = (ТипЗнч(ЗадачаВход.СвязанныйОбъект) = Тип("ДокументСсылка.РакурсДанных"));
				Иначе
					СформироватьПоРакурсу = Ложь;
				КонецЕсли;
				Если СформироватьПоРакурсу Тогда
					Вложение = СводнаяТаблицаУх.СохранитьДанныеОбластиВPDF(ЗадачаВход.СвязанныйОбъект);
				Иначе
					ВнешняяПечатнаяФорма = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ВнешняяПечатнаяФорма", Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка());
					Источник = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "Источник", Неопределено);
					Если (ЗначениеЗаполнено(ВнешняяПечатнаяФорма)) И (ЗначениеЗаполнено(Источник)) Тогда
						Вложение = СформироватьВложениеПоПечатнойФорме(Источник, ВнешняяПечатнаяФорма);		
					Иначе
						Вложение = Неопределено;
					КонецЕсли;
				КонецЕсли;
				Если Вложение <> Неопределено Тогда
					Письмо.Вложения.Добавить(Вложение);                
				КонецЕсли;	
				// Добавим текст и тему письма.
				Письмо.Тексты.Добавить(ТекстПочтовогоСообщения, ТипТекстаПочтовогоСообщения.HTML);
				Для Каждого Текст Из Письмо.Тексты Цикл
					Текст.Кодировка = "utf-8";
				КонецЦикла;
				Для Каждого Вложение Из Письмо.Вложения Цикл
					Вложение.Кодировка = "utf-8";
				КонецЦикла;
				Письмо.Тема = ТемаПисьма;
				// Отправим готовое письмо.
				УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Неопределено);
				РезультатФункции = Истина;
			Исключение
				ТекстСообщенияОшибки = НСтр("ru = 'Не удалось отправить электронное письмо %Тема% пользователю %Пользователь%'");
				ТекстСообщенияОшибки = СтрЗаменить(ТекстСообщенияОшибки, "%Тема%", Строка(ТемаПисьма));
				ТекстСообщенияОшибки = СтрЗаменить(ТекстСообщенияОшибки, "%Пользователь%", Строка(Пользователь));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщенияОшибки);
				РезультатФункции = Ложь;
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Выполняет отправку оповещения по структуре СтруктураОповещенияВход.
Функция ОтправитьОповещениеПоСтруктуреОповещения(СтруктураОповещенияВход)
	РезультатФункции = Ложь;
	СпособОповещения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "СпособОповещения", Перечисления.СпособыОповещения.ПустаяСсылка());
	ИдентификаторСообщения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОповещенияВход, "ИдентификаторСообщения", "");
	Если СпособОповещения = Перечисления.СпособыОповещения.ВСистеме Тогда
		РезультатФункции = ОтправитьОповещениеВСистеме(СтруктураОповещенияВход);
	ИначеЕсли СпособОповещения = Перечисления.СпособыОповещения.ЭлектроннаяПочта Тогда		
		РезультатФункции = ОтправитьОповещениеПоЭлектроннойПочте(СтруктураОповещенияВход);
	ИначеЕсли СпособОповещения = Перечисления.СпособыОповещения.ПустаяСсылка() Тогда
		// Способ не указан. Пропускаем.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный способ оповещения %СпособОповещения% для сообщения %ИдентификаторСообщения%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СпособОповещения%", Строка(СпособОповещения));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИдентификаторСообщения%", Строка(ИдентификаторСообщения));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Выполняет отправку оповещений по событиям, заданных таблицей ТаблицаОтправкиВход.
Процедура ОтправитьОповещенияПоСобытиям(ТаблицаОтправкиВход) Экспорт
	Для Каждого ТекТаблицаОтправкиВход Из ТаблицаОтправкиВход Цикл
		СтруктураОповещения = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(ТекТаблицаОтправкиВход);
		РезультатОтправки = ОтправитьОповещениеПоСтруктуреОповещения(СтруктураОповещения);
	КонецЦикла;
	УстановитьДатуОтправки(ТаблицаОтправкиВход);
КонецПроцедуры

// Устанавливает по таблице записей ТаблицаВход дату отправки в ДатаОтправкиВход.
// Когда ДатаОтправкиВход не указана - выставляет текущую дату. Возвращает успешность
// выполнения операции.
Функция УстановитьДатуОтправки(ТаблицаВход, ДатаОтправкиВход = Неопределено) Экспорт
	// Инициализация и получение параметров.
	РезультатФункции = Истина;
	Если ТаблицаВход.Количество() > 0 Тогда
		Если ДатаОтправкиВход <> Неопределено Тогда
			НоваяДатаОтправки = ДатаОтправкиВход;
		Иначе
			НоваяДатаОтправки = ТекущаяДатаСеанса();
		КонецЕсли;
		ЕстьОшибки = Ложь;
		// Непосредственная запись данных.
		НачатьТранзакцию();
		Попытка
			Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
				НаборЗаписей = РегистрыСведений.СобытияОповещений.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторОповещения.Установить(ТекТаблицаВход.ИдентификаторОповещения);
				НаборЗаписей.Прочитать();
				Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
					ТекНаборЗаписей.ДатаОтправки = НоваяДатаОтправки;
				КонецЦикла;
				НаборЗаписей.Записать();
			КонецЦикла;	
		Исключение
			ТекстСообщенияОшибки = НСтр("ru = 'Во время установки даты отправки оповещения о событиях возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщенияОшибки = СтрЗаменить(ТекстСообщенияОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщенияОшибки);
			ЕстьОшибки = Истина;
		КонецПопытки;
		// Обработка транзации и возврат результирующего значения.
		Если Не ЕстьОшибки Тогда
			ЗафиксироватьТранзакцию();
			РезультатФункции = Истина;
		Иначе
			ОтменитьТранзакцию();
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;			// Таблица оповещений пуста.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции
