
#Область ДвиженияРегистровЕРП

#Область ОбработкаПроведенияФИ

Процедура ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если ЭтотОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ПроверитьОбъектОбработан(ЭтотОбъект);	
	ПроведениеДокументов.ПередЗаписьюДокумента(ЭтотОбъект, РежимЗаписи, РежимПроведения);	
	
	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
	Если ЭтоРеализация(ЭтотОбъект) Тогда
		ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов");
	КонецЕсли;
	
	Если ТипЗнч(ЭтотОбъект) <> Тип("ДокументОбъект.НачисленияПоФинансовымИнструментам") Тогда //требуется заполнить вид расчетов
		
		//**ПараметрыВзаиморасчеты = ПараметрыВзаиморасчеты(ХозяйственнаяОперация, ЭтотОбъект);
		ВзаиморасчетыСервер.ПередЗаписью(ЭтотОбъект, Отказ, РежимЗаписи);
	
	КонецЕсли;
	
	//ПараметрыВыбораСтатейИАналитик = Документы.ПриобретениеУслугПрочихАктивов.ПараметрыВыбораСтатейИАналитик(ХозяйственнаяОперация);
	//ДоходыИРасходыСервер.ПередЗаписью(ЭтотОбъект, ПараметрыВыбораСтатейИАналитик);
	
	ЭтотОбъект.ДополнительныеСвойства.Вставить("НеРегистрироватьКОтражениюВРеглУчете", Истина);
	
	ОбщегоНазначенияУТ.ЗаполнитьИдентификаторыДокумента(ЭтотОбъект, , Ложь);

КонецПроцедуры

Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения) Экспорт

	ПроведениеДокументов.ОбработкаПроведенияДокумента(Объект, Отказ);

КонецПроцедуры

Функция ПараметрыВзаиморасчетыУХ(ДанныеЗаполнения) Экспорт

	ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика");
	Если ЭтоРеализация(ДанныеЗаполнения) Тогда
		ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов");
	КонецЕсли;
	
	Возврат ПараметрыВзаиморасчеты(ХозяйственнаяОперация, ДанныеЗаполнения);
	
КонецФункции

// Возвращает параметры механизма взаиморасчетов.
// 
// Параметры:
// 	ХозяйственнаяОперация - ПеречислениеСсылка.ХозяйственныеОперации - Хозяйственная операция документа.
// 	
// Возвращаемое значение:
// 	Структура - См. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Функция ПараметрыВзаиморасчеты(ХозяйственнаяОперация = Неопределено, ЭтотОбъект = Неопределено) Экспорт
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	
	#Область ОбязательныеПараметры
	
	ТипОбъекта = ТипЗнч(ЭтотОбъект);
	ЭтоАкцепт = (ТипОбъекта = Тип("ДокументОбъект.АкцептПротестПереводногоВекселя"));
	Если ЭтоАкцепт Тогда
	   	СтруктураПараметров.Договор	= "Объект.ДоговорАкцепта";
	Иначе		
		СтруктураПараметров.Договор	= "Объект.ДоговорКонтрагента";	
	КонецЕсли;
	СтруктураПараметров.Партнер	= "Объект.Контрагент.Партнер";
	СтруктураПараметров.ОбъектРасчетов = "Объект.ОбъектРасчетов";
	СтруктураПараметров.ВалютаДокумента = СтруктураПараметров.Договор + ".ВалютаВзаиморасчетов";
	
	СтруктураПараметров.Соглашение = "";
	СтруктураПараметров.БанковскийСчетКонтрагента = "";
	СтруктураПараметров.БанковскийСчетОрганизации = "";
	СтруктураПараметров.ГруппаФинансовогоУчета = "";
	СтруктураПараметров.ИдентификаторПлатежа	= "";
	СтруктураПараметров.ИмяРеквизитаТЧСуммаСНДС	= "";
	СтруктураПараметров.Касса	= "";
	СтруктураПараметров.НалогообложениеНДС	= "";
	СтруктураПараметров.ОплатаВВалюте	= "";
	СтруктураПараметров.ПорядокРасчетов	= "";
	СтруктураПараметров.СуммаДокумента	= "";
	СтруктураПараметров.ФормаОплаты	= "";

	СтруктураПараметров.ЭтоПродажаЗакупка                = Истина;
	
	Если ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.РеализацияПрочихАктивов Тогда
		СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСДебитором;
	Иначе
		СтруктураПараметров.ТипРасчетов = Перечисления.ТипыРасчетовСПартнерами.РасчетыСКредитором;
	КонецЕсли;
	
	СтруктураПараметров.ИзменяетПланОплаты              = Истина;
	СтруктураПараметров.ИзменяетПланОтгрузкиПоставки	= Истина;
	
	#КонецОбласти
	
	#Область НеобязательныеПараметры
	
	#КонецОбласти
	
	#Область РедактированиеВалютИВалютныхСуммДокумента
 
	#КонецОбласти
	
	#Область ГрафикПлановойОплатыИДатаПлатежа
 
	#КонецОбласти
	
	#Область СостояниеВзаиморасчетов
 
	#КонецОбласти
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ЭтоРеализация(ДокументОбъект)

	ТипДокумента = ТипЗнч(ДокументОбъект);
	
	Возврат 
	(ТипДокумента = Тип("ДокументОбъект.ПродажаЦеннойБумаги"))
	Или (ТипДокумента = Тип("ДокументОбъект.ВыбытиеИнвестиций"))
	Или (ТипДокумента = Тип("ДокументОбъект.ВыбытиеВекселей") 
		И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийВыбытиеВекселя.ПродажаВекселя)
	Или (ТипДокумента = Тип("ДокументОбъект.АкцептПротестПереводногоВекселя") 
		И ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийАкцептПротестПереводногоВекселя.УведомлениеОбАкцептеВекселя);
	
КонецФункции

#КонецОбласти

#Область Проведение

// Описывает учетные механизмы используемые в документе для регистрации в механизме проведения.
//
// Параметры:
//  МеханизмыДокумента - Массив - список имен учетных механизмов, для которых будет выполнена
//              регистрация в механизме проведения.
//
Процедура ЗарегистрироватьУчетныеМеханизмы(МеханизмыДокумента, мВзаиморасчеты = Истина, мСебестоимостьИПартионныйУчет = Истина) Экспорт
	
	Если мВзаиморасчеты Тогда
		МеханизмыДокумента.Добавить("Взаиморасчеты");
	КонецЕсли;
	
	МеханизмыДокумента.Добавить("ОборотныеРегистрыУправленческогоУчета");
	МеханизмыДокумента.Добавить("РеестрДокументов");
	
	Если мСебестоимостьИПартионныйУчет Тогда
		МеханизмыДокумента.Добавить("СебестоимостьИПартионныйУчет");
	КонецЕсли;
	
	МеханизмыДокумента.Добавить("СуммыДокументовВВалютахУчета");
	МеханизмыДокумента.Добавить("УчетДоходовРасходов");
	//МеханизмыДокумента.Добавить("УчетНДС");
	МеханизмыДокумента.Добавить("УчетПрочихАктивовПассивов");
	МеханизмыДокумента.Добавить("ФинансовыеИнструменты");
	МеханизмыДокумента.Добавить("ФинансовыеИнструментыУХ");//УХ
	
	МеханизмыДокумента.Добавить("РегламентированныйУчет"); //локализация
	
КонецПроцедуры

// Возвращает таблицы для движений, необходимые для проведения документа по регистрам учетных механизмов.
//
// Параметры:
//  Документ - ДокументСсылка - ссылка на документ, по которому необходимо получить данные
//  Регистры - Структура - список имен регистров, для которых необходимо получить таблицы
//  ДопПараметры - Структура - дополнительные параметры для получения данных, определяющие контекст проведения.
//
// Возвращаемое значение:
//  Структура - коллекция элементов:
//     * Таблица<ИмяРегистра> - ТаблицаЗначений - таблица данных для отражения в регистр.
//
Функция ДанныеДокументаДляПроведения(Документ, Регистры, ДопПараметры = Неопределено) Экспорт
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	КонецЕсли;
	
	Запрос			= Новый Запрос;
	ТекстыЗапроса	= Новый СписокЗначений;
	
	Если Не ДопПараметры.ПолучитьТекстыЗапроса Тогда		
		ПодготовитьЗапросФинансовыеИнструменты(Документ, Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Получим таблицы для движений
	Возврат ПроведениеДокументов.ИнициализироватьДанныеДокументаДляПроведения(Запрос, ТекстыЗапроса, ДопПараметры);
	
КонецФункции

Процедура ПодготовитьЗапросФинансовыеИнструменты(Документ, Запрос, ТекстыЗапроса, Регистры) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	ФинансовыеИнструментыУХ.ЗаполнитьПараметрыИнициализации(Запрос, Документ);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);

КонецПроцедуры

#КонецОбласти

#Область УчетныеМеханизмыКонфигурации_ФинансовыеИнструментыУХ

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		ТипДокумента = ТипЗнч(Документ.Ссылка);

		Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеИнвестиций")
			Или ТипДокумента = Тип("ДокументСсылка.ВыбытиеИнвестиций") Тогда
			
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиФакт);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ДатыПоследовательностейУчастия);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ПоследовательностиУчастия);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СтатусыОбъектовИнвестирования);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СамостоятельноеПризнаниеКонтроля);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ДвижениеИнвестиций);
			
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачисленияКредитовИДепозитов") Тогда
			
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиФакт);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.НачисленияПоФинансовымИнструментам") Тогда
			
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиФакт);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииЦенныхБумаг);
			
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеВекселя")
			Или ТипДокумента = Тип("ДокументСсылка.ВыбытиеВекселей")
			Или ТипДокумента = Тип("ДокументСсылка.АкцептПротестПереводногоВекселя") Тогда  
			
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиФакт);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиГрафики);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ВерсииРасчетов);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.СтатусыАкцептаПереводныхВекселей);
						
		ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПриобретениеЦеннойБумаги")
			Или ТипДокумента = Тип("ДокументСсылка.ПродажаЦеннойБумаги")
			Или ТипДокумента = Тип("ДокументСсылка.ВыпускЦеннойБумаги")
			Или ТипДокумента = Тип("ДокументСсылка.ВыкупЦеннойБумаги") Тогда  
			
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиФакт);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыСКонтрагентамиГрафики);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.ВерсииРасчетов);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыСведений.РасшифровкиГрафиковЦБ);
			Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.ПартииЦенныхБумаг);
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ТекстыЗапросов = Новый Соответствие();
	
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по подчиненным регистрам бюджетирования.
//
// Параметры:
//   ТаблицыДляДвижений - Структура - таблицы данных документа
//   Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//   Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ИменаТаблиц = 
	"РасчетыСКонтрагентамиФакт, 
	|РасчетыСКонтрагентамиГрафики,
	|ВерсииРасчетов,	
	|РасшифровкиГрафиковЦБ,
	|ПартииЦенныхБумаг,	
	|СтатусыАкцептаПереводныхВекселей,	
	|ДвижениеИнвестиций,
	|СамостоятельноеПризнаниеКонтроля,
	|Хозрасчетный";
	
	ТаблицыФИ = Новый Структура(ИменаТаблиц);
	Для каждого ИмяТаблицы Из ТаблицыФИ Цикл
		
		Если Движения.Найти(ИмяТаблицы.Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, ИмяТаблицы.Ключ);
		
	КонецЦикла;
	
	//СтатусыОбъектовИнвестирования, ПоследовательностиУчастия, ДатыПоследовательностейУчастия
	//Если Движения.Найти("СтатусыОбъектовИнвестирования") <> Неопределено Тогда
	//	ДляРасчета = ТаблицыДляДвижений.ТаблицаДляРасчетаПоследовательностей;
	//	РасчетДолейВладения.СформироватьДвижения(Движения, ДляРасчета, ТаблицыДляДвижений.ТаблицаДвижениеИнвестиций, Отказ);
	//КонецЕсли;
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

#КонецОбласти

//Устарела вексели ссылаются
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	мд = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяДокумента", мд.Имя);
	
	ФинансовыеИнструментыУХ.ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры);
	
	ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры);
	
	//**ПроведениеДокументов.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

#Область втСобытия

Функция ТекстЗапроса_втСобытия(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "втСобытия"; 
	
	Если Запрос.Параметры.ИмяДокумента = "НачисленияПоФинансовымИнструментам" Тогда
		Документы.НачисленияПоФинансовымИнструментам.ТекстЗапроса_втОперации(Запрос, ТекстыЗапроса);		
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтДатыКурсовВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтДатыКурсовВалют(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если НЕ ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтТаблицаАналитикУчетаПартий", ТекстыЗапроса) Тогда
		ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос);

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	т.Ссылка КАК Ссылка,
	|	&Событие КАК Событие,
	|	&ВидОперации КАК ВидОперации,
	|	&Событие В (""ПродажаЦеннойБумаги"", ""ВыбытиеИнвестиций"", ""ВыбытиеИнвестиций"") КАК ЭтоПродажа,
	|	ВЫБОР
	|		КОГДА &Событие В (""ВыпускЦеннойБумаги"", ""ВыкупЦеннойБумаги"")
	|			ТОГДА ИСТИНА
	|		КОГДА &Событие = ""ПоступлениеВекселя""
	|			ТОГДА &ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеВекселя.ПриобретениеВекселей)
	|		КОГДА &Событие = ""ВыбытиеВекселей""
	|			ТОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийВыбытиеВекселя.ПогашениеВекселя)
	|		КОГДА &Событие = ""АкцептПротестПереводногоВекселя""
	|			ТОГДА &ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийАкцептПротестПереводногоВекселя.УведомлениеОПротестеПоВекселю)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВыданнаяЦБ,
	|	ВЫБОР
	|		КОГДА &Событие = ""АкцептПротестПереводногоВекселя""
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыАкцептаВекселя.Акцептован)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусАкцепта,
	|	т.Дата КАК Дата,
	|	ТаблицаАналитикУчетаПартий.ВидЦенности КАК ВидЦенности,
	|	т.ДоговорКонтрагента.НалогообложениеНДС КАК ВидДеятельностиНДС,
	|	ТаблицаАналитикУчетаПартий.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	ЕСТЬNULL(АналитикаПоПартнерам.КлючАналитики, НЕОПРЕДЕЛЕНО) КАК АналитикаУчетаПоПартнерам,
	|	ЕСТЬNULL(т.ОбъектРасчетов, НЕОПРЕДЕЛЕНО) КАК ОбъектРасчетов,
	|	т.ДоговорКонтрагента.ПорядокРасчетов = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетов.ПоДоговорамКонтрагентов) КАК РасчетыПоДоговорам,
	|	НАЧАЛОПЕРИОДА(т.Дата, ДЕНЬ) КАК ДатаОперации,
	|	т.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	т.Контрагент КАК Контрагент,
	|	т.Контрагент.Партнер КАК Партнер,
	|	т.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	т.Количество КАК Количество,
	|	т.НКД КАК НКД,
	|	т.Премия КАК Премия,
	|	т.Подразделение КАК Подразделение,
	|	т.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	т.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК Валюта,
	|	т.ФинансовыйИнструмент.ВидФинансовогоИнструмента КАК ВидФИ,
	|	т.ФинансовыйИнструмент.ДатаВыпуска КАК ДатаВыпуска,
	|	т.ФинансовыйИнструмент.СрокПогашения КАК СрокПогашения,
	|	т.ФинансовыйИнструмент.Биржа КАК Биржа,
	|	т.ФинансовыйИнструмент.ПараметрыЦеннойБумаги КАК ПараметрыЦеннойБумаги,
	|	т.Стоимость КАК Сумма,
	|	АВТОНОМЕРЗАПИСИ() КАК НомерСобытия
	|ПОМЕСТИТЬ втСобытия
	|ИЗ
	|	Документ.ПродажаЦеннойБумаги КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтТаблицаАналитикУчетаПартий КАК ТаблицаАналитикУчетаПартий
	|		ПО (1 = ТаблицаАналитикУчетаПартий.НомерСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК АналитикаПоПартнерам
	|		ПО (АналитикаПоПартнерам.Организация = &Организация)
	|			И т.Контрагент.Партнер = АналитикаПоПартнерам.Партнер
	|			И т.Контрагент = АналитикаПоПартнерам.Контрагент
	|			И (АналитикаПоПартнерам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			И т.НаправлениеДеятельности = АналитикаПоПартнерам.НаправлениеДеятельности
	|ГДЕ
	|	т.Ссылка = &Ссылка";
	
	Если Запрос.Параметры.ИмяДокумента = "НачисленияПоФинансовымИнструментам" Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПродажаЦеннойБумаги", "втОперации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.НКД",			"0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Премия", 		"0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Стоимость", 	"т.Сумма");
		
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПродажаЦеннойБумаги", "Документ." + Запрос.Параметры.ИмяДокумента);
	КонецЕсли;

	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Событие", СтрШаблон(" ""%1"" ", Запрос.Параметры.ИмяДокумента));
	
	Если Запрос.Параметры.ИмяДокумента = "ВыпускЦеннойБумаги" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.НКД", "0");		
	ИначеЕсли (Запрос.Параметры.ИмяДокумента = "ПоступлениеИнвестиций") 
		Или (Запрос.Параметры.ИмяДокумента = "ВыбытиеИнвестиций") Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ДоговорКонтрагента.ВалютаВзаиморасчетов", 		"т.ВалютаДокумента");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ФинансовыйИнструмент.ДатаВыпуска", 				"т.Дата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ФинансовыйИнструмент.СрокПогашения", 			"т.Дата");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ФинансовыйИнструмент.ПараметрыЦеннойБумаги",	"НЕОПРЕДЕЛЕНО");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ФинансовыйИнструмент.Биржа",					"ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ФинансовыйИнструмент.ВидФинансовогоИнструмента","ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Акция)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Стоимость", 									"т.Инвестиции");
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.НКД", 					"0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Премия", 				"0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ФинансовыйИнструмент", 	"т.Контрагент");
		
	КонецЕсли;
	
	Если (Запрос.Параметры.ИмяДокумента = "ПоступлениеВекселя") 
		Или (Запрос.Параметры.ИмяДокумента = "ВыбытиеВекселей") 
		Или (Запрос.Параметры.ИмяДокумента = "АкцептПротестПереводногоВекселя") Тогда	
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидОперации",	"т.ВидОперации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Количество",	"1");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.НКД",			"0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Премия", 		"0");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.Стоимость",		"т.СуммаОперации");
		
		Если Запрос.Параметры.ИмяДокумента = "ПоступлениеВекселя" Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ДоговорКонтрагента.ВалютаВзаиморасчетов", 		"т.ВалютаНоминала");
		ИначеЕсли Запрос.Параметры.ИмяДокумента = "ВыбытиеВекселей" Тогда	
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ДоговорКонтрагента.ВалютаВзаиморасчетов", 		"т.ВалютаДокумента");
		Иначе  //АкцептПротестПереводногоВекселя
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "т.ДоговорКонтрагента.ВалютаВзаиморасчетов", 		"т.ВалютаДокумента");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".ДоговорКонтрагента", ".ДоговорАкцепта");
		КонецЕсли;
		
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ВидОперации", "1");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтКурсыВалют"; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	КурсыВалют.Период    КАК Период,
	|	КурсыВалют.Валюта    КАК Валюта,
	|	КурсыВалют.Курс      КАК Курс,
	|	КурсыВалют.Кратность КАК Кратность
	|ПОМЕСТИТЬ ВтКурсыВалют
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаНачала, ) КАК КурсыВалют
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта,
	|	КурсыВалют.Курс,
	|	КурсыВалют.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют КАК КурсыВалют
	|ГДЕ
	|	КурсыВалют.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КурсыВалют.Период,
	|	КурсыВалют.Валюта";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаВтДатыКурсовВалют(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтДатыКурсовВалют"; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтКурсыВалют", ТекстыЗапроса) Тогда
		ТекстЗапросаВтКурсыВалют(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Операции.Дата КАК Дата,
	|	Операции.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	МАКСИМУМ(КурсыВалют.Период) КАК ДатаКурсаВалюты,
	|	МАКСИМУМ(КурсыВалютыУпр.Период) КАК ДатаКурсаУпр,
	|	МАКСИМУМ(КурсыВалютыРегл.Период) КАК ДатаКурсаРегл
	|ПОМЕСТИТЬ ВтДатыКурсовВалют
	|ИЗ
	|	Документ.ПродажаЦеннойБумаги КАК Операции
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалют
	|		ПО Операции.ДоговорКонтрагента.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|			И Операции.Дата >= КурсыВалют.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыУпр
	|		ПО (&ВалютаУправленческогоУчета = КурсыВалютыУпр.Валюта)
	|			И Операции.Дата >= КурсыВалютыУпр.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыРегл
	|		ПО (&ВалютаРегламентированногоУчета = КурсыВалютыРегл.Валюта)
	|			И Операции.Дата >= КурсыВалютыРегл.Период
	|ГДЕ
	|	&ГдеСсылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Операции.ДоговорКонтрагента.ВалютаВзаиморасчетов,
	|	Операции.Дата";
	
	Если Запрос.Параметры.ИмяДокумента = "НачисленияПоФинансовымИнструментам" Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПродажаЦеннойБумаги", "втОперации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГдеСсылка", "ИСТИНА");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПродажаЦеннойБумаги", Запрос.Параметры.ИмяДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ГдеСсылка", "Операции.Ссылка = &Ссылка");
	КонецЕсли;
		
	Если Запрос.Параметры.ИмяДокумента = "ПоступлениеВекселя" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорКонтрагента.ВалютаВзаиморасчетов", "ВалютаНоминала");
	ИначеЕсли Запрос.Параметры.ИмяДокумента = "ВыбытиеВекселей" Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорКонтрагента.ВалютаВзаиморасчетов", "ВалютаДокумента");
	ИначеЕсли Запрос.Параметры.ИмяДокумента = "АкцептПротестПереводногоВекселя" Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорКонтрагента.ВалютаВзаиморасчетов", "ВалютаДокумента");
	КонецЕсли;
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса, Регистры = Неопределено)
	
	//ИмяРегистра = "втПроводки";
	//
	//Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
	//	Возврат "";
	//КонецЕсли; 
			
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втСобытия", ТекстыЗапроса) Тогда
		ТекстЗапроса_втСобытия(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	МассивТекстовЗапроса = Новый Массив;
	НомераТаблиц = Новый Структура;
	ФинансовыеИнструментыУХ.ТекстЗапроса_ДанныеЦБ(Запрос, МассивТекстовЗапроса, НомераТаблиц);
	
	ВстраиваниеУХ.ДополнитьТекстыЗапроса(ТекстыЗапроса, НомераТаблиц, МассивТекстовЗапроса);

КонецФункции

Функция ТекстЗапросаВтТаблицаАналитикУчетаПартий(Запрос, ТекстыЗапроса)
	
	// Создадим временную таблицу "ВтТаблицаАналитикУчетаПартий"
	
	ТекстВыборкаПоляАналитик =
	"ВЫБРАТЬ
	|	""Расходы"" КАК ИмяТабличнойЧасти,
	|	1 КАК НомерСтроки,
	|	т.Контрагент.Партнер КАК Поставщик,
	|	т.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыНалогообложенияНДС.ПустаяСсылка) КАК НалогообложениеНДС,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЦенностей.ПустаяСсылка) КАК ВидЦенности,
	|	0 КАК КодСтроки
	|ПОМЕСТИТЬ ВТПоляАналитикУчетаПартий
	|ИЗ
	|	Документ.ПродажаЦеннойБумаги КАК т
	|ГДЕ
	|	т.Ссылка = &Ссылка";
	
	Если Запрос.Параметры.ИмяДокумента = "НачисленияПоФинансовымИнструментам" Тогда
		ТекстВыборкаПоляАналитик = СтрЗаменить(ТекстВыборкаПоляАналитик, "Документ.ПродажаЦеннойБумаги", "втОперации");
	Иначе	
		ТекстВыборкаПоляАналитик = СтрЗаменить(ТекстВыборкаПоляАналитик, "ПродажаЦеннойБумаги", Запрос.Параметры.ИмяДокумента);
	КонецЕсли;
	
	ТекстЗапроса = Справочники.КлючиАналитикиУчетаПартий.ТекстЗапросаВтТаблицаАналитикУчетаПартий(ТекстВыборкаПоляАналитик, Запрос, ТекстыЗапроса);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура ИнициализироватьКлючиАналитикиУчетаПоПартнерам(Запрос)
	
	Если Запрос.Параметры.Свойство("КлючиАналитикиУчетаПоПартнерамИнициализированы") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	&Организация КАК Организация,
	|	т.Контрагент.Партнер КАК Партнер,
	|	т.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК Договор,
	|	т.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	Документ.ПродажаЦеннойБумаги КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Аналитика
	|		ПО (&Организация = Аналитика.Организация)
	|			И т.Контрагент = Аналитика.Контрагент
	|			И т.Контрагент.Партнер = Аналитика.Партнер
	|			И (Аналитика.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			И т.НаправлениеДеятельности = Аналитика.НаправлениеДеятельности
	|ГДЕ
	|	&ОтборСсылка
	|	И Аналитика.КлючАналитики ЕСТЬ NULL";
	
	Если Запрос.Параметры.ИмяДокумента = "НачисленияПоФинансовымИнструментам" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ПродажаЦеннойБумаги", "втОперации");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСсылка", "ИСТИНА");	
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПродажаЦеннойБумаги", Запрос.Параметры.ИмяДокумента);
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборСсылка", "т.Ссылка = &Ссылка");		
	КонецЕсли;
	
	ЗапросАналитик = Новый Запрос(ТекстЗапроса);
	ЗапросАналитик.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;//втОперации
	
	ЗапросАналитик.УстановитьПараметр("Ссылка",      Запрос.Параметры.Ссылка);
	ЗапросАналитик.УстановитьПараметр("Организация", Запрос.Параметры.Организация);

	Выборка = ЗапросАналитик.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АналитикаУчетаПоПартнерам.СоздатьКлючАналитики(Выборка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("КлючиАналитикиУчетаПоПартнерамИнициализированы", Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ТекстыЗапросов_Движения

Функция ТекстЗапросаТаблицаПрочиеРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаПрочиеРасходы(); //Использует:ВтПрочиеРасходы
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеДоходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПрочиеДоходы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	&Организация КАК Организация,
	|	втПроводки.Подразделение КАК Подразделение,
	|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	втПроводки.СтатьяКт КАК СтатьяДоходов,
	|	втПроводки.АналитикаКт КАК АналитикаДоходов,
	|	втПроводки.СуммаВВалюте КАК Сумма,
	|	ВЫБОР
	|		КОГДА &УправленческийУчетОрганизаций
	|			ТОГДА втПроводки.СуммаУпр
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	ВЫБОР
	|		КОГДА НЕ &ИспользоватьУчетПрочихДоходовРасходовРегл
	|			ТОГДА 0
	|		ИНАЧЕ втПроводки.Сумма
	|	КОНЕЦ КАК СуммаРегл,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаДтФИ = ""К""
	|	И втПроводки.ТипСчетаКтФИ = ""ДР""
	|	И &ИспользоватьУчетПрочихДоходовРасходов";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция _ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	#Область Закупка
	
	ТекстЗакупка = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                                         КАК Ссылка,
		|	Таблица.Дата                                                           КАК ДатаРегистратора,
		|	Таблица.Номер                                                          КАК НомерРегистратора,
		|	
		|	Таблица.Партнер                                                        КАК Партнер,
		|	Таблица.Организация                                                    КАК Организация,
		|	Таблица.Контрагент                                                     КАК Контрагент,
		|	Таблица.Договор                                                        КАК Договор,
		|	Таблица.НаправлениеДеятельности                                        КАК НаправлениеДеятельности,
		|	
		|	Таблица.ОбъектРасчетов                                                 КАК ОбъектРасчетов,
		|	Таблица.ДатаПлатежа                                                    КАК ДатаПлатежа,
		|	Неопределено                                                           КАК ЗаказЗакупки,
		|	Таблица.СуммаДокумента                                                 КАК Сумма,
		|	Таблица.СуммаВзаиморасчетов                                            КАК СуммаВзаиморасчетов,
		|	0                                                                      КАК СуммаВзаиморасчетовПоТаре,
		|	0                                                                      КАК КПоступлению, //Уменьшение к поступлению
		|
		|	Таблица.ПорядокРасчетов                                                КАК ПорядокРасчетов,
		|	ЛОЖЬ                                                                   КАК НакладнаяПоЗаказам,
		|	Таблица.ВалютаВзаиморасчетов                                           КАК ВалютаВзаиморасчетов,
		|	Таблица.ХозяйственнаяОперация                                          КАК ХозяйственнаяОперация,
		|	Таблица.ФормаОплаты                                                    КАК ФормаОплаты,
		|	Таблица.Валюта                                                         КАК ВалютаДокумента,
		|	Таблица.Дата                                                           КАК ДатаКурса,
		|	Неопределено                                                           КАК СвязанныйДокумент
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|	И Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)";
	
	#КонецОбласти
	
	#Область УвеличениеПланаОплаты
	
	ТекстПланОплаты = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                                         КАК Ссылка,
		|	Таблица.Дата                                                           КАК ДатаРегистратора,
		|	Таблица.Номер                                                          КАК НомерРегистратора,
		|	Таблица.ДатаПлатежа                                                    КАК ДатаПлатежа,
		|	
		|	Таблица.Партнер                                                        КАК Партнер,
		|	Таблица.Организация                                                    КАК Организация,
		|	Таблица.Контрагент                                                     КАК Контрагент,
		|	Таблица.Договор                                                        КАК Договор,
		|	Таблица.НаправлениеДеятельности                                        КАК НаправлениеДеятельности,
		|	
		|	Таблица.ОбъектРасчетов                                                 КАК ОбъектРасчетов,
		|	Таблица.ПорядокРасчетов                                                КАК ПорядокРасчетов,
		|	ЛОЖЬ                                                                   КАК НакладнаяПоЗаказам,
		|	ЛОЖЬ                                                                   КАК СверхЗаказа,
		|	Неопределено                                                           КАК ЗаказЗакупки,
		|	Таблица.СуммаВзаиморасчетов                                            КАК КОплате,
		|	Таблица.ВалютаВзаиморасчетов                                           КАК ВалютаВзаиморасчетов,
		|	Таблица.ХозяйственнаяОперация                                          КАК ХозяйственнаяОперация,
		|	Таблица.ФормаОплаты                                                    КАК ФормаОплаты,
		|	Таблица.Валюта                                                         КАК ВалютаДокумента,
		|	ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитПослеПоступления) КАК ВариантОплаты,
		|	Неопределено                                                           КАК СвязанныйДокумент
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика)
		|	И Таблица.Ссылка В (&Ссылка)";

	#КонецОбласти
	
	#Область ЗачетАвансов
	
	ТекстЗачетАванса = "
		|ВЫБРАТЬ
		|	Таблица.Ссылка                                                           КАК Ссылка,
		|	
		|	Таблица.ОбъектРасчетов                                                   КАК ОбъектРасчетовИсточник,
		|	Таблица.Ссылка.ОбъектРасчетов                                            КАК ОбъектРасчетовПриемник,
		|	
		|	Таблица.Ссылка.Партнер                                                   КАК Партнер,
		|	Таблица.Ссылка.Организация                                               КАК Организация,
		|	Таблица.Ссылка.Контрагент                                                КАК Контрагент,
		|	Таблица.Ссылка.Договор                                                   КАК Договор,
		|	Таблица.Ссылка.НаправлениеДеятельности                                   КАК НаправлениеДеятельности,
		|
		|	Таблица.Ссылка.ВалютаВзаиморасчетов                                      КАК ВалютаВзаиморасчетов,
		|	Таблица.СуммаВзаиморасчетов                                              КАК СуммаВзаиморасчетов,
		|	Таблица.Ссылка.Валюта                                                    КАК ВалютаДокумента,
		|	Таблица.Сумма                                                            КАК Сумма,
		|
		|	Таблица.Ссылка.Дата                                                      КАК ДатаРегистратора,
		|	Таблица.Ссылка.Номер                                                     КАК НомерРегистратора,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПереносАванса)               КАК ХозяйственнаяОперация
		|	
		|ИЗ
		|	Документ.ПриобретениеУслугПрочихАктивов.РасшифровкаПлатежа КАК Таблица
		|ГДЕ
		|	Таблица.Ссылка В (&Ссылка)
		|";
	
	#КонецОбласти
	
	ВзаиморасчетыСервер.ПроведениеЗакупки(Запрос, ТекстыЗапроса, Регистры, ТекстЗакупка, ТекстПланОплаты, ТекстЗачетАванса);
	
КонецФункции

//устарела
Функция ТекстЗапросаТаблицаРасчетыСПоставщиками(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСПоставщиками";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	//Порядок и состав полей запроса проведения
	ШаблонПолей = "
	|ВЫБРАТЬ
	|	Шаблон.Период                    КАК Период,
	|	Шаблон.ДатаРегистратора          КАК ДатаРегистратора,
	|	Шаблон.НомерРегистратора         КАК НомерРегистратора,
	|	Шаблон.ДатаПлатежа               КАК ДатаПлатежа,
	|	Шаблон.ВидДвижения               КАК ВидДвижения,
	|	Шаблон.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	Шаблон.ЗаказПоставщику           КАК ЗаказПоставщику,
	|	Шаблон.Валюта                    КАК Валюта,
	|	Шаблон.ХозяйственнаяОперация     КАК ХозяйственнаяОперация,
	|	Шаблон.ФормаОплаты               КАК ФормаОплаты,
	|	Шаблон.Сумма                     КАК Сумма,
	|	Шаблон.СуммаРегл                 КАК СуммаРегл,
	|	Шаблон.СуммаУпр                  КАК СуммаУпр,
	|	Шаблон.КОплате                   КАК КОплате,
	|	Шаблон.КПоступлению              КАК КПоступлению,
	|	Шаблон.Организация               КАК Организация,
	|	Шаблон.ВалютаДокумента           КАК ВалютаДокумента,
	|	Шаблон.КорОбъектРасчетов         КАК КорОбъектРасчетов,
	|	Шаблон.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	#Шаблон КАК Шаблон
	|ГДЕ
	|	&ОтборШаблон
	|";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	втПроводки.Период КАК ДатаРегистратора,
	|	1 КАК НомерРегистратора,
	|	""2"" КАК Вид,
	|	втПроводки.Период КАК ДатаПлатежа,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	втПроводки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втПроводки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	втПроводки.Валюта КАК Валюта,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика) КАК ХозяйственнаяОперация,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) КАК ФормаОплаты,
	|	втПроводки.СуммаВВалюте КАК Сумма,
	|	втПроводки.Сумма КАК СуммаРегл,
	|	втПроводки.СуммаУпр КАК СуммаУпр,
	|	0 КАК КОплате,
	|	0 КАК КПоступлению,
	|	&Организация КАК Организация,
	|	втПроводки.Валюта КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаКтФИ = ""К""";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаРасчетыСКлиентами(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "РасчетыСКлиентами";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
 	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли;
		 
	//Порядок и состав полей запроса проведения
	ШаблонПолей = "
	|ВЫБРАТЬ
	|	ВЫБОР КОГДА &ПереходПраваСобственности И НЕ &НоваяАрхитектураВзаиморасчетов
	|		ТОГДА &ДатаПереходаПраваСобственности
	|		ИНАЧЕ &Период
	|	КОНЕЦ                               КАК Период,
	|	Шаблон.ВидДвижения                  КАК ВидДвижения,
	|	Шаблон.АналитикаУчетаПоПартнерам    КАК АналитикаУчетаПоПартнерам,
	|	Шаблон.ЗаказКлиента                 КАК ЗаказКлиента,
	|	Шаблон.Валюта                       КАК Валюта,
	|	Шаблон.Сумма                        КАК Сумма,
	|	Шаблон.СуммаРегл                    КАК СуммаРегл,
	|	Шаблон.СуммаУпр                     КАК СуммаУпр,
	|	Шаблон.КОплате                      КАК КОплате,
	|	Шаблон.КОтгрузке                    КАК КОтгрузке,
	|	Шаблон.ХозяйственнаяОперация        КАК ХозяйственнаяОперация,
	|	Шаблон.ФормаОплаты                  КАК ФормаОплаты,
	|	Шаблон.ДатаРегистратора             КАК ДатаРегистратора,
	|	Шаблон.НомерРегистратора            КАК НомерРегистратора,
	|	Шаблон.ДатаПлатежа                  КАК ДатаПлатежа,
	|	Шаблон.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	Шаблон.Организация                  КАК Организация,
	|	Шаблон.ВалютаДокумента              КАК ВалютаДокумента,
	|	Шаблон.КорОбъектРасчетов            КАК КорОбъектРасчетов,
	|	Шаблон.КорАналитикаУчетаПоПартнерам КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	#Шаблон КАК Шаблон
	|ГДЕ
	|	&ОтборШаблон";
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	""2"" КАК Вид,
	|	втПроводки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	втПроводки.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втПроводки.ОбъектРасчетов КАК ОбъектРасчетов,
	|	втПроводки.Валюта КАК Валюта,
	|	втПроводки.СуммаВВалюте КАК Сумма,
	|	втПроводки.Сумма КАК СуммаРегл,
	|	втПроводки.СуммаУпр КАК СуммаУпр,
	|	0 КАК КОплате,
	|	0 КАК КОтгрузке,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК ФормаОплаты,
	|	втПроводки.Период КАК ДатаРегистратора,
	|	77 КАК НомерРегистратора,
	|	втПроводки.Период КАК ДатаПлатежа,
	|	втПроводки.ДоговорКонтрагента.ДопустимаяСуммаЗадолженности КАК ДопустимаяСуммаЗадолженности,
	|	&Организация КАК Организация,
	|	втПроводки.Валюта КАК ВалютаДокумента,
	|	НЕОПРЕДЕЛЕНО КАК КорОбъектРасчетов,
	|	ЗНАЧЕНИЕ(Справочник.КлючиАналитикиУчетаПоПартнерам.ПустаяСсылка) КАК КорАналитикаУчетаПоПартнерам
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаДтФИ = ""К""";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаСуммыДокументовВВалютеРегл(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "СуммыДокументовВВалютеРегл";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втПроводки.НомерПроводки КАК НомерСтроки,
	|	втПроводки.Период КАК Период,
	|	втПроводки.ВалютаДт КАК Валюта,
	|	втПроводки.НомерПроводки КАК ИдентификаторСтроки,
	|	втПроводки.Сумма КАК СуммаБезНДС,
	|	ЗНАЧЕНИЕ(Справочник.СтавкиНДС.ПустаяСсылка) КАК СтавкаНДС,
	|	0 КАК СуммаНДС,
	|	втПроводки.Сумма КАК СуммаБезНДСРегл,
	|	0 КАК СуммаНДСРегл,
	|	втПроводки.Сумма КАК БазаНДСРегл,
	|	втПроводки.СуммаУпр КАК БазаНДСУпр,
	|	втПроводки.СуммаУпр КАК СуммаБезНДСУпр,
	|	0 КАК СуммаНДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком) КАК ТипРасчетов,
	|	втПроводки.Сумма КАК СуммаВзаиморасчетов,
	|	втПроводки.ВалютаДт КАК ВалютаВзаиморасчетов
	|ИЗ
	|	втПроводки КАК втПроводки";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПартииПрочихРасходов(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ПартииПрочихРасходов";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаПартииПрочихРасходов();//Использует:ВтПартииПрочихРасходов
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	//Движения УХ(ЕРП формирует движения основе следующих регистров): 
	//Продажа: Выручка-Взаиморасчеты(РасчетыСКлиентамиПоСрокам,ПрочиеДоходы), себестоимость(на основе проводок)
	//Приобретение: приобретение(ПартииПрочихРасходов,ПрочиеРасходы,РасчетыСПоставщикамиПоСрокам)
	
	ИмяРегистра = "ПрочиеАктивыПассивы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	ВЫБОР
	|		КОГДА втПроводки.ТипСчетаКтФИ = ""АП""
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения,
	|	втПроводки.Организация КАК Организация,
	|	втПроводки.Подразделение КАК Подразделение,
	|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втПроводки.ФинансовыйИнструмент) В (ТИП(Справочник.ЦенныеБумаги))
	|			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеАктивы)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ВложенияСобственныхСредств)
	|	КОНЕЦ КАК Статья,
	|	втПроводки.АналитикаДт КАК Аналитика,
	|	втПроводки.СуммаУпр КАК Сумма
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	(втПроводки.ТипСчетаДтФИ = ""АП""
	|			ИЛИ втПроводки.ТипСчетаКтФИ = ""АП"")";
	
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ "
		+ РегистрыНакопления.ПрочиеАктивыПассивы.ТекстЗапросаТаблицаПрочиеАктивыПассивы();//Использует:ВтПрочиеРасходы,ВтПартииПрочихРасходов
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаДвиженияКонтрагентДоходыРасходы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентДоходыРасходы";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса, Регистры);
	КонецЕсли; 
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов) КАК ХозяйственнаяОперация,
	|	втПроводки.Организация КАК Организация,
	|	втПроводки.Подразделение КАК Подразделение,
	|	втПроводки.Контрагент.Партнер КАК Партнер,
	|	втПроводки.Контрагент КАК Контрагент,
	|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельностиКонтрагента,
	|	втПроводки.ДоговорКонтрагента КАК Договор,
	|	ВЫБОР
	|		КОГДА втПроводки.РасчетыПоДоговорам
	|			ТОГДА втПроводки.ДоговорКонтрагента
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК ОбъектРасчетов,
	|	втПроводки.СтатьяКт КАК СтатьяДоходовРасходов,
	|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельностиСтатьи,
	|	втПроводки.АналитикаКт КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	втПроводки.Сумма КАК Сумма,
	|	втПроводки.Сумма КАК СуммаБезНДС,
	|	втПроводки.Сумма КАК СуммаРегл,
	|	втПроводки.Сумма КАК СуммаРеглБезНДС,
	|	втПроводки.Валюта КАК Валюта,
	|	втПроводки.СуммаВВалюте КАК СуммаВВалюте,
	|	втПроводки.СуммаВВалюте КАК СуммаБезНДСВВалюте,
	|	втПроводки.Валюта КАК ВалютаВзаиморасчетов,
	|	втПроводки.СуммаВВалюте КАК СуммаВВалютеВзаиморасчетов,
	|	втПроводки.СуммаВВалюте КАК СуммаБезНДСВВалютеВзаиморасчетов,
	|	втПроводки.ДоговорКонтрагента КАК ИсточникГФУРасчетов
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаДтФИ = ""К""
	|	И втПроводки.ТипСчетаКтФИ В (""ДР"",""АП"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПроводки.Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов),
	|	втПроводки.Организация,
	|	втПроводки.Подразделение,
	|	втПроводки.Контрагент.Партнер,
	|	втПроводки.Контрагент,
	|	втПроводки.НаправлениеДеятельности,
	|	втПроводки.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА втПроводки.РасчетыПоДоговорам
	|			ТОГДА втПроводки.ДоговорКонтрагента
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ,
	|	втПроводки.СтатьяДт,
	|	втПроводки.НаправлениеДеятельности,
	|	втПроводки.АналитикаДт,
	|	НЕОПРЕДЕЛЕНО,
	|	втПроводки.Сумма,
	|	втПроводки.Сумма,
	|	втПроводки.Сумма,
	|	втПроводки.Сумма,
	|	втПроводки.Валюта,
	|	втПроводки.СуммаВВалюте,
	|	втПроводки.СуммаВВалюте,
	|	втПроводки.Валюта,
	|	втПроводки.СуммаВВалюте,
	|	втПроводки.СуммаВВалюте,
	|	втПроводки.ДоговорКонтрагента
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаДтФИ В (""ДР"",""АП"")
	|	И втПроводки.ТипСчетаКтФИ = ""К"""; 

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаДвиженияДоходыРасходыПрочиеАктивыПассивы(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияДоходыРасходыПрочиеАктивыПассивы";
	
	Если Не ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли; 
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПрочиеРасходыАктивыПассивы) КАК ХозяйственнаяОперация,
	|	&Организация КАК Организация,
	|	втПроводки.ПодразделениеКт КАК Подразделение,
	|	втПроводки.НаправлениеДеятельностиКт КАК НаправлениеДеятельности,
	|	втПроводки.СтатьяДт КАК Статья,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаДоходов,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаРасходов,
	|	втПроводки.АналитикаДт КАК АналитикаАктивовПассивов,
	|	НЕОПРЕДЕЛЕНО КАК ГруппаФинансовогоУчета,
	|	втПроводки.ПодразделениеКт КАК КорПодразделение,
	|	втПроводки.ПодразделениеКт КАК КорНаправлениеДеятельности,
	|	втПроводки.СтатьяКт КАК КорСтатья,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаДоходов,
	|	втПроводки.АналитикаКт КАК КорАналитикаРасходов,
	|	НЕОПРЕДЕЛЕНО КАК КорАналитикаАктивовПассивов,
	|	втПроводки.ДоговорКонтрагента.ГруппаФинансовогоУчета КАК КорГруппаФинансовогоУчета,
	|	втПроводки.СуммаВВалюте КАК Сумма,
	|	ВЫБОР
	|		КОГДА втПроводки.СтатьяДт.ВариантРаспределенияРасходовУпр = ЗНАЧЕНИЕ(Перечисление.ВариантыРаспределенияРасходов.НаСебестоимостьТоваров)
	|				ИЛИ НЕ &УправленческийУчетОрганизаций
	|			ТОГДА 0
	|		ИНАЧЕ втПроводки.Сумма
	|	КОНЕЦ КАК СуммаУпр,
	|	втПроводки.Сумма КАК СуммаРегл,
	|	втПроводки.ВалютаДт КАК Валюта,
	|	втПроводки.СуммаВВалюте КАК СуммаВВалюте
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.СчетДтФИ В (ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетРасходовОтВыбытия))
	|	И втПроводки.СчетКтФИ В (ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаФИ), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетНКД), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконта))";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаДвиженияКонтрагентКонтрагент(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ДвиженияКонтрагентКонтрагент";
	
	Если НЕ ПроведениеДокументов.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
		
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	втПроводки.Период КАК Период,
		|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.КорректировкаЗадолженности) КАК ХозяйственнаяОперация,
		|	&Организация КАК Организация,
		|	втПроводки.Подразделение КАК Подразделение,
		|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельности,
		|	втПроводки.СубконтоДт1.Партнер КАК Партнер,
		|	втПроводки.СубконтоДт1 КАК Контрагент,
		|	втПроводки.СубконтоДт2 КАК Договор,
		|	втПроводки.НаправлениеДеятельности КАК КорНаправлениеДеятельности,
		|	втПроводки.СубконтоДт1.Партнер КАК КорПартнер,
		|	втПроводки.СубконтоКт1 КАК КорКонтрагент,
		|	втПроводки.СубконтоКт2 КАК КорДоговор,
		|	втПроводки.СуммаУпр КАК Сумма,
		|	0 КАК СуммаБезНДС,
		|	втПроводки.Сумма КАК СуммаРегл,
		|	0 КАК СуммаРеглБезНДС,
		|	втПроводки.Валюта КАК Валюта,
		|	втПроводки.СуммаВВалюте КАК СуммаВВалюте,
		|	0 КАК СуммаБезНДСВВалюте,
		|	втПроводки.Валюта КАК ВалютаВзаиморасчетов,
		|	втПроводки.СуммаВВалюте КАК СуммаВВалютеВзаиморасчетов,
		|	0 КАК СуммаБезНДСВВалютеВзаиморасчетов,
		|	втПроводки.СуммаВВалюте КАК КорВалютаВзаиморасчетов,
		|	втПроводки.Сумма КАК КорСуммаВВалютеВзаиморасчетов,
		|	0 КАК КорСуммаБезНДСВВалютеВзаиморасчетов,
		|	втПроводки.СубконтоДт1 КАК ИсточникГФУРасчетов,
		|	втПроводки.СубконтоКт1 КАК КорИсточникГФУРасчетов
		|ИЗ
		|	втПроводки КАК втПроводки
		|ГДЕ
		|	втПроводки.ТипСчетаДтФИ В (""К"")
		|	И втПроводки.ТипСчетаКтФИ В (""К"")";
	

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов_Вспомогательные

Функция ЗначенияПараметровПроведения(Реквизиты = Неопределено)

	ЗначенияПараметровПроведения = Новый Структура;
	ЗначенияПараметровПроведения.Вставить("ИдентификаторМетаданных", ОбщегоНазначения.ИдентификаторОбъектаМетаданных("Документ." + Реквизиты.ИмяДокумента));
	
	Возврат ЗначенияПараметровПроведения;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	//Поступление(Кт:ДКЗ):приобретение 
	//Реализация(Дт:ДКЗ)
		
	//для продажи - Аналитика=Расход91
	//для покупки - Аналитика=Аналитика91
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстОписаниеВтИсходныеПрочиеРасходы();
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + 
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	втПроводки.Организация КАК Организация,
	|	втПроводки.Подразделение КАК Подразделение,
	|	втПроводки.СтатьяДт КАК СтатьяРасходов,
	|	втПроводки.АналитикаДт КАК АналитикаРасходов,
	|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	втПроводки.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	втПроводки.СуммаУпр КАК СуммаСНДС,
	|	втПроводки.СуммаУпр КАК СуммаБезНДС,
	|	втПроводки.СуммаУпр КАК СуммаБезНДСУпр,
	|	втПроводки.Сумма КАК СуммаСНДСРегл,
	|	втПроводки.Сумма КАК СуммаБезНДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов) КАК ХозяйственнаяОперация,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	втПроводки.НомерПроводки КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаДтФИ В (""ДР"")
	|	И втПроводки.ТипСчетаКтФИ В (""К"", ""АП"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПроводки.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	втПроводки.Организация,
	|	втПроводки.Подразделение,
	|	втПроводки.СтатьяДт,
	|	втПроводки.АналитикаДт,
	|	втПроводки.НаправлениеДеятельности,
	|	втПроводки.ВидДеятельностиНДС,
	|	втПроводки.СуммаУпр,
	|	втПроводки.СуммаУпр,
	|	втПроводки.СуммаУпр,
	|	втПроводки.Сумма,
	|	втПроводки.Сумма,
	|	0,
	|	0,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаУПоставщика),
	|	НЕОПРЕДЕЛЕНО,
	|	втПроводки.НомерПроводки,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	втПроводки КАК втПроводки
	|ГДЕ
	|	втПроводки.ТипСчетаДтФИ В (""АП"")
	|	И втПроводки.ТипСчетаКтФИ В (""К"")";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтИсходныеПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("втПроводки", ТекстыЗапроса) Тогда
		ТекстЗапроса_ПроводкиДляРегистров(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстОписаниеВтИсходныеПартииПрочихРасходов();
	ТекстЗапроса = ТекстЗапроса + " ОБЪЕДИНИТЬ ВСЕ " + 
	"ВЫБРАТЬ
	|	втПроводки.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	втПроводки.Организация КАК Организация,
	|	втПроводки.Подразделение КАК Подразделение,
	|	втПроводки.СтатьяДт КАК СтатьяРасходов,
	|	втПроводки.АналитикаКт КАК АналитикаРасходов,
	|	втПроводки.АналитикаКт КАК АналитикаАктивовПассивов,
	|	&Ссылка КАК ДокументПоступленияРасходов,
	|	втПроводки.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	втПроводки.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	НЕОПРЕДЕЛЕНО КАК АналитикаУчетаНоменклатуры,
	|	втПроводки.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	втПроводки.СуммаВВалюте КАК Стоимость,
	|	втПроводки.СуммаВВалюте КАК СтоимостьБезНДС,
	|	0 КАК НДСУпр,
	|	втПроводки.Сумма КАК СтоимостьРегл,
	|	0 КАК НДСРегл,
	|	0 КАК ПостояннаяРазница,
	|	0 КАК ВременнаяРазница,
	|	ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.РеализацияПрочихАктивов) КАК ХозяйственнаяОперация,
	|	втПроводки.НомерПроводки КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО КАК НастройкаХозяйственнойОперации
	|ИЗ
	|	втПроводки КАК втПроводки";

	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс_ЕРП

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных; 

КонецФункции

Функция АдаптированныйТекстЗапросаДвиженийПоРегистру(ИмяРегистра) Экспорт

	Запрос = Новый Запрос;
	ТекстыЗапроса = Новый СписокЗначений;
	
	ПолноеИмяДокумента = "Документ.ПриобретениеЦеннойБумаги";
	
	ВЗапросеЕстьИсточник = Истина;
	
	ЗначенияПараметров = ЗначенияПараметровПроведения();
	ПереопределениеРасчетаПараметров = Новый Структура;
	ПереопределениеРасчетаПараметров.Вставить("ИнформацияПоДоговору",    """""");
	ПереопределениеРасчетаПараметров.Вставить("НомерВходящегоДокумента", """""");
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		//ТекстЗапроса = ТекстЗапросаТаблицаРеестрДокументов(ТекстыЗапроса, ИмяРегистра);
		СинонимТаблицыДокумента = "ДанныеДокумента";
		ВЗапросеЕстьИсточник = Ложь;
		
	Иначе
		ТекстИсключения = НСтр("ru = 'В документе %ПолноеИмяДокумента% не реализована адаптация текста запроса формирования движений по регистру %ИмяРегистра%.';
								|en = 'In document %ПолноеИмяДокумента%, adaptation of request for generating records of register %ИмяРегистра% is not implemented.'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ПолноеИмяДокумента%", ПолноеИмяДокумента);
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяРегистра%", ИмяРегистра);
		
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;
	
	Если ИмяРегистра = "РеестрДокументов" Тогда
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросПроведенияПоНезависимомуРегистру(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ВЗапросеЕстьИсточник,
										ПереопределениеРасчетаПараметров);
	Иначе	
		
		ТекстЗапроса = ОбновлениеИнформационнойБазыУТ.АдаптироватьЗапросМеханизмаПроведения(
										ТекстЗапроса,
										ПолноеИмяДокумента,
										СинонимТаблицыДокумента,
										ПереопределениеРасчетаПараметров);
	КонецЕсли; 

	Результат = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
	Результат.ЗначенияПараметров = ЗначенияПараметров;
	Результат.ТекстЗапроса = ТекстЗапроса;
	
	Возврат Результат;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПартииПрочихРасходов(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПартииПрочихРасходов";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПартииПрочихРасходов", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПартииПрочихРасходов(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПартииПрочихРасходов.ТекстЗапросаТаблицаВтПартииПрочихРасходов();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаТаблицаВтПрочиеРасходы(Запрос, ТекстыЗапроса)
	
	ИмяРегистра = "ВтПрочиеРасходы";
	
	Если Не ПроведениеДокументов.ЕстьТаблицаЗапроса("ВтИсходныеПрочиеРасходы", ТекстыЗапроса) Тогда
		ТекстЗапросаТаблицаВтИсходныеПрочиеРасходы(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ТекстЗапроса = РегистрыНакопления.ПрочиеРасходы.ТекстЗапросаТаблицаВтПрочиеРасходы();
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Проведение_ЕРПУХ

Процедура ТекстЗапроса_Проводки(МассивТекстовЗапроса, НомераТаблиц, Регистры = Неопределено) Экспорт
		
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втПроводки(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_Хозрасчетный(НомераТаблиц));
	
КонецПроцедуры

Процедура УстановитьПараметры(Запрос) Экспорт

	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",  Константы.ВалютаРегламентированногоУчета.Получить());
	
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета",  Константы.ВалютаРегламентированногоУчета.Получить());
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета",      Константы.ВалютаУправленческогоУчета.Получить());
	
	РасчетСебестоимостиПрикладныеАлгоритмы.ЗаполнитьПараметрыИнициализации(Запрос, Запрос.Параметры);
	Запрос.УстановитьПараметр("СтатьяАП_ЦФ", ПланыВидовХарактеристик.СтатьиАктивовПассивов.ЦелевоеФинансирование);
	Запрос.УстановитьПараметр("НоваяАрхитектураВзаиморасчетов", ПолучитьФункциональнуюОпцию("НоваяАрхитектураВзаиморасчетов"));	

	Запрос.УстановитьПараметр("ИспользоватьУчетПрочихДоходовРасходов", 
		ПолучитьФункциональнуюОпцию("ИспользоватьУчетПрочихДоходовРасходов")); 
		
	ЗначенияПараметровПроведения = ЗначенияПараметровПроведения(Запрос.Параметры);
	Для каждого КлючИЗначение Из ЗначенияПараметровПроведения Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

Функция ТекстЗапроса_втПроводки(НомераТаблиц, СписокФИ = Ложь)

	НомераТаблиц.Вставить("втПроводки", НомераТаблиц.Количество());
		
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	АВТОНОМЕРЗАПИСИ() КАК НомерПроводки,
	|	втСобытия.Валюта КАК Валюта,
	|	втСобытия.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	втСобытия.Контрагент КАК Контрагент,
	|	втСобытия.ВидЦенности КАК ВидЦенности,
	|	втСобытия.ВидДеятельностиНДС КАК ВидДеятельностиНДС,
	|	втСобытия.АналитикаУчетаПартий КАК АналитикаУчетаПартий,
	|	втСобытия.АналитикаУчетаПоПартнерам КАК АналитикаУчетаПоПартнерам,
	|	втСобытия.ОбъектРасчетов КАК ОбъектРасчетов,
	|	втСчетДт.Статья КАК СтатьяДт,
	|	втСчетДт.Аналитика КАК АналитикаДт,
	|	втСчетКт.Статья КАК СтатьяКт,
	|	втСчетКт.Аналитика КАК АналитикаКт,
	|	втСобытия.РасчетыПоДоговорам КАК РасчетыПоДоговорам,
	|	втСобытия.Подразделение КАК Подразделение,
	|	втСобытия.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ТаблицаПроводок.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	ТаблицаПроводок.Период КАК Период,
	|	&Организация КАК Организация,
	|	втСчетДт.Подразделение КАК ПодразделениеДт,
	|	втСчетДт.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	втСчетКт.Подразделение КАК ПодразделениеКт,
	|	втСчетКт.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	ВЫБОР
	|		КОГДА втСчетДт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Валюта
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА втСчетКт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Валюта
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА втСчетДт.СчетКоличественный
	|			ТОГДА ТаблицаПроводок.Количество
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА втСчетКт.СчетКоличественный
	|			ТОГДА ТаблицаПроводок.Количество
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КоличествоКт,
	|	ТаблицаПроводок.Сумма КАК СуммаВВалюте,
	|	ВЫРАЗИТЬ(ТаблицаПроводок.Сумма * ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалютыУпр.Кратность, 1) / (ЕСТЬNULL(КурсыВалют.Кратность, 1) * ЕСТЬNULL(КурсыВалютыУпр.Курс, 1)) КАК ЧИСЛО(31, 2)) КАК СуммаУпр,
	|	ВЫРАЗИТЬ(ТаблицаПроводок.Сумма * ЕСТЬNULL(КурсыВалют.Курс, 1) * ЕСТЬNULL(КурсыВалютыРегл.Кратность, 1) / (ЕСТЬNULL(КурсыВалют.Кратность, 1) * ЕСТЬNULL(КурсыВалютыРегл.Курс, 1)) КАК ЧИСЛО(31, 2)) КАК Сумма,
	|	ВЫБОР
	|		КОГДА втСчетДт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаДт,
	|	ВЫБОР
	|		КОГДА втСчетКт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	втСчетДт.Счет КАК СчетДт,
	|	ТаблицаПроводок.СчетДт КАК СчетДтФИ,
	|	втСчетДт.ТипСчета КАК ТипСчетаДтФИ,
	|	втСчетДт.Субконто1 КАК СубконтоДт1,
	|	втСчетДт.Субконто2 КАК СубконтоДт2,
	|	втСчетДт.Субконто3 КАК СубконтоДт3,
	|	ЕСТЬNULL(втСчетДт.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(втСчетДт.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(втСчетДт.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	втСчетКт.Счет КАК СчетКт,
	|	ТаблицаПроводок.СчетКт КАК СчетКтФИ,
	|	втСчетКт.ТипСчета КАК ТипСчетаКтФИ,
	|	втСчетКт.Субконто1 КАК СубконтоКт1,
	|	втСчетКт.Субконто2 КАК СубконтоКт2,
	|	втСчетКт.Субконто3 КАК СубконтоКт3,
	|	ЕСТЬNULL(втСчетКт.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(втСчетКт.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(втСчетКт.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	ТаблицаПроводок.Комментарий КАК Содержание
	|ПОМЕСТИТЬ втПроводки
	|ИЗ
	|	втТаблицаПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаФИ КАК втСчетДт
	|		ПО ТаблицаПроводок.СчетДт = втСчетДт.ВидСчетаФИ
	|			И (&УсловиеСчетДт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаФИ КАК втСчетКт
	|		ПО ТаблицаПроводок.СчетКт = втСчетКт.ВидСчетаФИ
	|			И (&УсловиеСчетКт)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВтДатыКурсовВалют КАК ДатыКурсовВалют
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалют
	|			ПО ДатыКурсовВалют.ВалютаВзаиморасчетов = КурсыВалют.Валюта
	|				И ДатыКурсовВалют.ДатаКурсаВалюты = КурсыВалют.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыУпр
	|			ПО (&ВалютаУправленческогоУчета = КурсыВалютыУпр.Валюта)
	|				И ДатыКурсовВалют.ДатаКурсаУпр = КурсыВалютыУпр.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВтКурсыВалют КАК КурсыВалютыРегл
	|			ПО (&ВалютаРегламентированногоУчета = КурсыВалютыРегл.Валюта)
	|				И ДатыКурсовВалют.ДатаКурсаРегл = КурсыВалютыРегл.Период
	|		ПО ТаблицаПроводок.Валюта = ДатыКурсовВалют.ВалютаВзаиморасчетов
	|			И ТаблицаПроводок.Период = ДатыКурсовВалют.Дата
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобытия КАК втСобытия
	|		ПО ТаблицаПроводок.ФинансовыйИнструмент = втСобытия.ФинансовыйИнструмент
	|			И ТаблицаПроводок.Период = втСобытия.Дата
	|ГДЕ
	|	ТаблицаПроводок.Сумма <> 0
	|	И НЕ втСчетДт.Счет ЕСТЬ NULL
	|	И НЕ втСчетКт.Счет ЕСТЬ NULL";

	Если СписокФИ Тогда //НачисленияКредитовИДепозитов
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетДт", "ТаблицаПроводок.ФинансовыйИнструмент = втСчетДт.ФинансовыйИнструмент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетКт", "ТаблицаПроводок.ФинансовыйИнструмент = втСчетКт.ФинансовыйИнструмент");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФинансовыйИнструмент", "ТаблицаПроводок.ФИ");
		
	Иначе 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетДт", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетКт", "ИСТИНА");
				
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапроса_Хозрасчетный(НомераТаблиц, СписокФИ = Ложь) Экспорт
	
	НомераТаблиц.Вставить("Хозрасчетный", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втПроводки.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	втПроводки.Период КАК Период,
	|	втПроводки.Организация КАК Организация,
	|	втПроводки.ПодразделениеДт КАК ПодразделениеДт,
	|	втПроводки.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	втПроводки.ПодразделениеКт КАК ПодразделениеКт,
	|	втПроводки.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	втПроводки.ВалютаДт КАК ВалютаДт,
	|	втПроводки.ВалютаКт КАК ВалютаКт,
	|	втПроводки.КоличествоДт КАК КоличествоДт,
	|	втПроводки.КоличествоКт КАК КоличествоКт,
	|	втПроводки.Сумма КАК Сумма,
	|	втПроводки.СуммаУпр КАК СуммаУУ,
	|	втПроводки.СуммаУпр КАК СуммаФО,
	|	втПроводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	втПроводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	втПроводки.СчетДт КАК СчетДт,
	|	втПроводки.СубконтоДт1 КАК СубконтоДт1,
	|	втПроводки.СубконтоДт2 КАК СубконтоДт2,
	|	втПроводки.СубконтоДт3 КАК СубконтоДт3,
	|	втПроводки.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	втПроводки.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	втПроводки.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	втПроводки.СчетКт КАК СчетКт,
	|	втПроводки.СубконтоКт1 КАК СубконтоКт1,
	|	втПроводки.СубконтоКт2 КАК СубконтоКт2,
	|	втПроводки.СубконтоКт3 КАК СубконтоКт3,
	|	втПроводки.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	втПроводки.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	втПроводки.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	втПроводки.Содержание КАК Содержание
	|ИЗ
	|	втПроводки КАК втПроводки";
	
КонецФункции

Функция ТекстЗапроса_СчетаУчета(НомераТаблиц, СписокФИ = Ложь) Экспорт

	НомераТаблиц.Вставить("втСчетаФИ", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СчетаУчета.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	СчетаУчета.ВидСчетаФИ КАК ВидСчетаФИ,
	|	ВЫБОР
	|		КОГДА СчетаУчета.ВидСчетаФИ В (ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаФИ), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетНоминала), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконта), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетНКД))
	|			ТОГДА ""АП""
	|		КОГДА СчетаУчета.ВидСчетаФИ В (ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетов), ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком))
	|			ТОГДА ""К""
	|		ИНАЧЕ ""ДР""
	|	КОНЕЦ КАК ТипСчета,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетаУчета.Субконто1) В (ТИП(ПланВидовХарактеристик.СтатьиРасходов), ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов), ТИП(ПланВидовХарактеристик.СтатьиДоходов))
	|			ТОГДА СчетаУчета.Субконто1
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетаУчета.Субконто2) В (ТИП(ПланВидовХарактеристик.СтатьиРасходов), ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов), ТИП(ПланВидовХарактеристик.СтатьиДоходов))
	|			ТОГДА СчетаУчета.Субконто2
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетаУчета.Субконто3) В (ТИП(ПланВидовХарактеристик.СтатьиРасходов), ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов), ТИП(ПланВидовХарактеристик.СтатьиДоходов))
	|			ТОГДА СчетаУчета.Субконто3
	|		КОГДА ВидСубконто1.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПрочиеДоходыИРасходы)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|						ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиДоходов.ВыручкаОтПродаж)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиРасходов.ЦенныеБумаги)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПланВидовХарактеристик.СтатьиАктивовПассивов.ПрочиеАктивы)
	|	КОНЕЦ КАК Статья,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(СчетаУчета.Субконто1) В (ТИП(ПланВидовХарактеристик.СтатьиРасходов), ТИП(ПланВидовХарактеристик.СтатьиАктивовПассивов), ТИП(ПланВидовХарактеристик.СтатьиДоходов))
	|			ТОГДА СчетаУчета.Субконто2
	|		ИНАЧЕ СчетаУчета.ФинансовыйИнструмент
	|	КОНЕЦ КАК Аналитика,
	|	СчетаУчета.Счет КАК Счет,
	|	СчетаУчета.Счет.Валютный КАК СчетВалютный,
	|	СчетаУчета.Счет.Количественный КАК СчетКоличественный,
	|	ВЫБОР ВидСубконто1.ВидСубконто
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком)
	|						ТОГДА СчетаУчета.Субконто2
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика)
	|						ТОГДА СчетаУчета.Субконто1
	|					ИНАЧЕ СчетаУчета.Ссылка.ДоговорКонтрагента
	|				КОНЕЦ
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком)
	|						ТОГДА СчетаУчета.Субконто1
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика)
	|						ТОГДА СчетаУчета.Субконто1
	|					ИНАЧЕ СчетаУчета.Ссылка.Контрагент
	|				КОНЕЦ
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги)
	|			ТОГДА СчетаУчета.ФинансовыйИнструмент
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы)
	|			ТОГДА СчетаУчета.ФинансовыйИнструмент
	|		ИНАЧЕ СчетаУчета.Субконто1
	|	КОНЕЦ КАК Субконто1,
	|	ВЫБОР ВидСубконто2.ВидСубконто
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком)
	|						ТОГДА СчетаУчета.Субконто2
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика)
	|						ТОГДА СчетаУчета.Субконто2
	|					ИНАЧЕ СчетаУчета.Ссылка.ДоговорКонтрагента
	|				КОНЕЦ
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком)
	|						ТОГДА СчетаУчета.Субконто1
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика)
	|						ТОГДА СчетаУчета.Субконто2
	|					ИНАЧЕ СчетаУчета.Ссылка.Контрагент
	|				КОНЕЦ
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги)
	|			ТОГДА СчетаУчета.ФинансовыйИнструмент
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы)
	|			ТОГДА СчетаУчета.ФинансовыйИнструмент
	|		ИНАЧЕ СчетаУчета.Субконто2
	|	КОНЕЦ КАК Субконто2,
	|	ВЫБОР ВидСубконто3.ВидСубконто
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком)
	|						ТОГДА СчетаУчета.Субконто2
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика)
	|						ТОГДА СчетаУчета.Субконто3
	|					ИНАЧЕ СчетаУчета.Ссылка.ДоговорКонтрагента
	|				КОНЕЦ
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты)
	|			ТОГДА ВЫБОР
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетВзаиморасчетовСПлательщиком)
	|						ТОГДА СчетаУчета.Субконто1
	|					КОГДА СчетаУчета.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаДисконтаПлательщика)
	|						ТОГДА СчетаУчета.Субконто3
	|					ИНАЧЕ СчетаУчета.Ссылка.Контрагент
	|				КОНЕЦ
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги)
	|			ТОГДА СчетаУчета.ФинансовыйИнструмент
	|		КОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.РеализуемыеАктивы)
	|			ТОГДА СчетаУчета.ФинансовыйИнструмент
	|		ИНАЧЕ СчетаУчета.Субконто3
	|	КОНЕЦ КАК Субконто3,
	|	ВЫБОР
	|		КОГДА СчетаУчета.Счет.УчетПоПодразделениям
	|			ТОГДА СчетаУчета.Ссылка.Подразделение
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА &УчетПоНаправлениямДеятельности
	|			ТОГДА СчетаУчета.Ссылка.НаправлениеДеятельности
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НаправлениеДеятельности,
	|	ВидСубконто1.ВидСубконто КАК ВидСубконто1,
	|	ВидСубконто2.ВидСубконто КАК ВидСубконто2,
	|	ВидСубконто3.ВидСубконто КАК ВидСубконто3
	|ПОМЕСТИТЬ втСчетаФИ
	|ИЗ
	|	втСчетаДокумента КАК СчетаУчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконто1
	|		ПО СчетаУчета.Счет = ВидСубконто1.Ссылка
	|			И (ВидСубконто1.НомерСтроки = 1)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконто2
	|		ПО СчетаУчета.Счет = ВидСубконто2.Ссылка
	|			И (ВидСубконто2.НомерСтроки = 2)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидСубконто3
	|		ПО СчетаУчета.Счет = ВидСубконто3.Ссылка
	|			И (ВидСубконто3.НомерСтроки = 3)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФинансовыйИнструмент,
	|	ВидСчетаФИ";

	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УчетПоНаправлениямДеятельности", "СчетаУчета.Счет.УчетПоНаправлениямДеятельности");
	Иначе	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УчетПоНаправлениямДеятельности", "ЛОЖЬ");
	КонецЕсли;
	
	Возврат ТекстЗапроса; 
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ЗаполнениеНаОсновании

Функция ПолучитьПараметрыОткрытияФИ(Ссылка, ИдентификаторКоманды) Экспорт
	
	ЗначенияЗаполнения = Ссылка;
	ИмяФормы = "Документ.ПродажаЦеннойБумаги.ФормаОбъекта";
	
	Возврат Новый Структура("ИмяФормы,ЗначенияЗаполнения", ИмяФормы, ЗначенияЗаполнения);
	
КонецФункции

Процедура ДобавитьКомандыСозданияНаОсновании_ВариантыОплат(КомандыСозданияНаОсновании, Параметры) Экспорт

	Представление = НСтр("ru = 'Оплата ценной бумаги'");
	ФинансовыеИнструментыУХ.ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, "ОплатаЦеннойБумаги", Представление);

КонецПроцедуры

Функция ИмяФормыОплатаЦБ() Экспорт

	Возврат "Документ.СписаниеБезналичныхДенежныхСредств.ФормаОбъекта";

КонецФункции

#КонецОбласти

#Область СобытияФорм

Процедура ПриобретениеУслугПоЛизингу_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	
	Команды = Форма.Команды;
	
	Команды.ЗаполнитьНачисления.Действие = "ЗаполнитьНачисленияУХ";
	
КонецПроцедуры
	
#КонецОбласти

#Область ЗаполнениеОтчетностиВБанки

Процедура ПереопределитьЗапросГрафикПлатежейЛизинга(ДанныеДоговора, Период, Запрос) Экспорт
	
	Запрос.УстановитьПараметр("ВерсияГрафика", ДанныеДоговора.ВерсияСоглашения);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКонтрагентамиГрафикиОбороты.ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.УслугаПоАренде)
	|				ТОГДА РасчетыСКонтрагентамиГрафикиОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК УслугаПоЛизингу,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКонтрагентамиГрафикиОбороты.ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ВыкупнаяСтоимость)
	|				ТОГДА РасчетыСКонтрагентамиГрафикиОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВыкупнаяСтоимость,
	|	СУММА(ВЫБОР
	|			КОГДА РасчетыСКонтрагентамиГрафикиОбороты.ЭлементСтруктурыЗадолженности = ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.ОбеспечительныйПлатеж)
	|				ТОГДА РасчетыСКонтрагентамиГрафикиОбороты.СуммаПриход
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЗачетОбеспечительногоПлатежа,
	|	РасчетыСКонтрагентамиГрафикиОбороты.Период КАК ДатаПлатежа
	|ПОМЕСТИТЬ ВТ_ГрафикОплат
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики.Обороты(, , День, ВерсияГрафика = &ВерсияГрафика) КАК РасчетыСКонтрагентамиГрафикиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыСКонтрагентамиГрафикиОбороты.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикОплат.ДатаПлатежа КАК ДатаПлатежа,
	|	ГрафикОплат.УслугаПоЛизингу + ГрафикОплат.ЗачетОбеспечительногоПлатежа + ГрафикОплат.ВыкупнаяСтоимость КАК СуммаПлатежа,
	|	&ОсновнойДолг - (ГрафикОплат.УслугаПоЛизингу + ГрафикОплат.ЗачетОбеспечительногоПлатежа + ГрафикОплат.ВыкупнаяСтоимость) КАК ОсновнойДолг,
	|	ВЫРАЗИТЬ((ГрафикОплат.УслугаПоЛизингу + ГрафикОплат.ЗачетОбеспечительногоПлатежа + ГрафикОплат.ВыкупнаяСтоимость) * &КоэффПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК СуммаПлатежаРегл,
	|	ВЫРАЗИТЬ((&ОсновнойДолг - (ГрафикОплат.УслугаПоЛизингу + ГрафикОплат.ЗачетОбеспечительногоПлатежа + ГрафикОплат.ВыкупнаяСтоимость)) * &КоэффПересчетаВВалютуРегл КАК ЧИСЛО(15, 2)) КАК ОсновнойДолгРегл
	|ИЗ
	|	ВТ_ГрафикОплат КАК ГрафикОплат"
	
КонецПроцедуры
	
#КонецОбласти