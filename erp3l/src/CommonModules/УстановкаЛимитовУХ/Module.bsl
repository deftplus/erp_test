
#Область ПрограммныйИнтерфейс

// Вызывается и процедуры ПередЗаписью(..) набора записей регистра сведений РегистрСостоянийОбъектов 
Процедура РегистрСостоянийОбъектовПередЗаписью(НаборЗаписей) Экспорт
	
	Если НаборЗаписей.Отбор.Объект.Использование И ЗначениеЗаполнено(НаборЗаписей.Отбор.Объект.Значение)
		И (ТипЗнч(НаборЗаписей.Отбор.Объект.Значение) = Тип("ДокументСсылка.НастраиваемыйОтчет") 
			ИЛИ ТипЗнч(НаборЗаписей.Отбор.Объект.Значение) = Тип("ДокументСсылка.РакурсДанных"))
		И НаборЗаписей.Отбор.Период.Использование И ЗначениеЗаполнено(НаборЗаписей.Отбор.Период.Значение) Тогда
		
		НовыйПериод = НаборЗаписей.Отбор.Период.Значение;		
		Документ = НаборЗаписей.Отбор.Объект.Значение;
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НовоеСостояние = НаборЗаписей[0].СостояниеОбъекта;
		Иначе
			НовоеСостояние = Перечисления.СостоянияОтчетов.ПустаяСсылка();
		КонецЕсли;	
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Объект", Документ);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеОбъекта,
		|	РегистрСостоянийОбъектовСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект = &Объект) КАК РегистрСостоянийОбъектовСрезПоследних";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ТекущееСостояние = Выборка.СостояниеОбъекта;
			ТекущийПериод = Выборка.Период;
		Иначе
			ТекущееСостояние = Перечисления.СостоянияОтчетов.ПустаяСсылка();
			ТекущийПериод = Дата(1, 1, 1);
		КонецЕсли;
		
		Если ТекущееСостояние <> НовоеСостояние И НовыйПериод > ТекущийПериод Тогда
			СнятьАктуальностьЛимитовПоДокументу(Документ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьАктуальностьЛимитовПоДокументу(Документ) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Организация КАК Организация,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
	|	НастраиваемыйОтчет.УправлениеПериодом КАК УправлениеПериодом,
	|	ЗНАЧЕНИЕ(Справочник.ОбластиДанныхВидовОтчетов.ПустаяСсылка) КАК Область,
	|	НастраиваемыйОтчет.Проект КАК Проект
	|ПОМЕСТИТЬ ВТ_Документ
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РакурсДанных.Организация,
	|	РакурсДанных.Область.Владелец,
	|	УправлениеПериодомСценария.Ссылка,
	|	РакурсДанных.Область,
	|	РакурсДанных.Проект
	|ИЗ
	|	Документ.РакурсДанных КАК РакурсДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ПО РакурсДанных.Сценарий = УправлениеПериодомСценария.Сценарий
	|			И (НЕ УправлениеПериодомСценария.ПометкаУдаления)
	|			И РакурсДанных.Периодичность = УправлениеПериодомСценария.ТекущаяПериодичность
	|			И РакурсДанных.ПериодНачалоДата = УправлениеПериодомСценария.ПериодСценария.ДатаНачала
	|			И РакурсДанных.ПериодОкончаниеДата = УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания
	|			И (УправлениеПериодомСценария.УстанавливатьЛимиты)
	|ГДЕ
	|	РакурсДанных.Ссылка = &Документ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаСинтетика.Организация,
	|	КорректировкаСинтетика.ВидОтчета,
	|	КорректировкаСинтетика.Ссылка.УправлениеПериодом,
	|	ЗНАЧЕНИЕ(Справочник.ОбластиДанныхВидовОтчетов.ПустаяСсылка),
	|	КорректировкаСинтетика.Проект
	|ИЗ
	|	Документ.КорректировкаЗначенийПоказателей.КорректировкаСинтетика КАК КорректировкаСинтетика
	|ГДЕ
	|	КорректировкаСинтетика.Ссылка = &Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АктуальностьУстановленныхЛимитовСрезПоследних.Организация КАК Организация,
	|	АктуальностьУстановленныхЛимитовСрезПоследних.ВидОтчета КАК ВидОтчета,
	|	АктуальностьУстановленныхЛимитовСрезПоследних.Область КАК Область,
	|	АктуальностьУстановленныхЛимитовСрезПоследних.УОП КАК УОП,
	|	ЛОЖЬ КАК Актуальность,
	|	АктуальностьУстановленныхЛимитовСрезПоследних.Предназначение КАК Предназначение,
	|	АктуальностьУстановленныхЛимитовСрезПоследних.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.АктуальностьУстановленныхЛимитов.СрезПоследних(
	|			,
	|			(Организация, ВидОтчета, УОП, Область, Проект) В
	|				(ВЫБРАТЬ
	|					ВТ_Документ.Организация КАК Организация,
	|					ВТ_Документ.ВидОтчета КАК ВидОтчета,
	|					ВТ_Документ.УправлениеПериодом КАК УправлениеПериодом,
	|					ВТ_Документ.Область КАК Область,
	|					ВТ_Документ.Проект КАК Проект
	|				ИЗ
	|					ВТ_Документ КАК ВТ_Документ)) КАК АктуальностьУстановленныхЛимитовСрезПоследних
	|ГДЕ
	|	АктуальностьУстановленныхЛимитовСрезПоследних.Актуальность";
	Запрос.УстановитьПараметр("Документ", Документ);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Запись = РегистрыСведений.АктуальностьУстановленныхЛимитов.СоздатьМенеджерЗаписи();
		Запись.Период = ТекущаяДатаСеанса();
		ЗаполнитьЗначенияСвойств(Запись, Выборка);
		Запись.Документ = Документ;
		Запись.Пользователь = Пользователи.ТекущийПользователь();
		Запись.Записать();
	КонецЦикла;

КонецПроцедуры

// Процедура выполняет проверку документа УправлениеПериодомСценария  перед его записью.
Процедура ПроверкаУстановкиЛимитовПередЗаписьюУправлениеПериодомСценария(Объект, Отказ) Экспорт
	
	Если Объект.УстанавливатьЛимиты Тогда
		ПараметрыУОП = Новый Структура("ТекущаяПериодичность, ВерсияОрганизационнойСтруктуры, ВидыОтчетовДляУстановкиЛимитов, ПериодСценария, ПериодСценарияОкончание");
		ЗаполнитьЗначенияСвойств(ПараметрыУОП, Объект);
		ПараметрыУОП.ВидыОтчетовДляУстановкиЛимитов = Объект.ВидыОтчетовДляУстановкиЛимитов.Выгрузить();
		РезультатВозможнаУстановкаЛимитов = ВозможнаУстановкаЛимитовИзУОП(ПараметрыУОП);
		Если Не РезультатВозможнаУстановкаЛимитов.ВозможнаУстановка Тогда
			ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(Объект, Отказ, РезультатВозможнаУстановкаЛимитов.ТекстОшибки);
		КонецЕсли;
	Иначе
		Если УстановленыЛимитыПоУОП(Объект.Ссылка) Тогда
			ТекстСообщения = НСтр("ru = 'По некоторым экземплярам УОП лимиты уже установлены.
			|Необходимо отменить установку лимитов и после чего повторить попытку изменения необходимости установки лимитов УОП.'");
			ВстраиваниеОПКПереопределяемый.СообщитьОбОшибке(Объект, Отказ, ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение МассивНепроверяемыхРеквизитов именами неиспользуемых реквизитов
Процедура ОбработкаПроверкиЗаполненияВидаОтчета(Объект, МассивНепроверяемыхРеквизитов) Экспорт
	
	ИспользуютсяБюджеты = ПолучитьФункциональнуюОпцию("БюджетДвиженияДенежныхСредствИспользуется")
		ИЛИ ПолучитьФункциональнуюОпцию("БюджетДоходовРасходовИспользуется") 
		ИЛИ ПолучитьФункциональнуюОпцию("БюджетЗакупокИспользуется");
	
	Если Объект.ЭтоГруппа ИЛИ НЕ Объект.МожетИспользоватьсяДляУстановкиЛимитов ИЛИ НЕ ИспользуютсяБюджеты Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрыУстановкиЛимитов");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрыУстановкиЛимитов.КолонкаОтчета");
		МассивНепроверяемыхРеквизитов.Добавить("ПараметрыУстановкиЛимитов.ВидБюджета");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру ИспользованиеБюджетов значениями функциональных опций использования бюджетов
Процедура ПолучитьИспользованиеБюджетов(ИспользованиеБюджетов) Экспорт
	
	ИспользованиеБюджетов.Вставить("БюджетДвиженияДенежныхСредствИспользуется",
		ПолучитьФункциональнуюОпцию("БюджетДвиженияДенежныхСредствИспользуется"));
	ИспользованиеБюджетов.Вставить("БюджетДоходовРасходовИспользуется",
		ПолучитьФункциональнуюОпцию("БюджетДоходовРасходовИспользуется"));
	ИспользованиеБюджетов.Вставить("БюджетЗакупокИспользуется",
		ПолучитьФункциональнуюОпцию("БюджетЗакупокИспользуется"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ВозможнаУстановкаЛимитовИзУОП(ПараметрыУОП) Экспорт
	
	// проверка наличия видов отчетов по которым возможна установка лимитов
	// проверка что по этим отчетам включено лимитирование
	// проверка периодичности УОП и периодичности лимитирования
	// проверка заполненности функциональной валюты для организации
	// проверка что функциональная валюта организации есть в шаблоне заполнения отчетов
		
	Результат = Новый Структура("ВозможнаУстановка, ТекстОшибки", Истина, "");
	
	ПериодичностьСценария = ПараметрыУОП.ТекущаяПериодичность;
	Регламент = ПараметрыУОП.ВерсияОрганизационнойСтруктуры;
	ТабВидыОтчетов = ПараметрыУОП.ВидыОтчетовДляУстановкиЛимитов;
	
	МассивВидовОтчета = ТабВидыОтчетов.ВыгрузитьКолонку("ВидОтчета");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка КАК ВидОтчета
	|ПОМЕСТИТЬ ВТ_ВидыОтчетов
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Ссылка В(&ВидыОтчетов)
	|	И ВидыОтчетов.МожетИспользоватьсяДляУстановкиЛимитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыОтчетовУстановкаЛимитов.Предназначение КАК Предназначение
	|ПОМЕСТИТЬ ВТ_ВидыБюджетов
	|ИЗ
	|	Справочник.ВидыОтчетов.ПараметрыУстановкиЛимитов КАК ВидыОтчетовУстановкаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыОтчетов КАК ВТ_ВидыОтчетов
	|		ПО ВидыОтчетовУстановкаЛимитов.Ссылка = ВТ_ВидыОтчетов.ВидОтчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Предназначение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ЕСТЬNULL(ПараметрыЛимитированияЦФО.ВалютаЛимитирования, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаЛимитированияЦФО,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОсновнаяВалюта = ЕСТЬNULL(ПараметрыЛимитированияЦФО.ВалютаЛимитирования, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			КОГДА ВерсииРегламентовПодготовкиОтчетностиДополнительныеВалюты.Валюта = ЕСТЬNULL(ПараметрыЛимитированияЦФО.ВалютаЛимитирования, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьВалютаЛимитированияЦФОВШаблоне,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОсновнаяВалюта = &ВалютаУпрУчета
	|				ТОГДА ИСТИНА
	|			КОГДА ВерсииРегламентовПодготовкиОтчетностиДополнительныеВалюты.Валюта = &ВалютаУпрУчета
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ЕстьУправленческаяВалютаВШаблоне
	|ПОМЕСТИТЬ ВТ_Организации
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЛимитированияЦФО КАК ПараметрыЛимитированияЦФО
	|		ПО ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница = ПараметрыЛимитированияЦФО.ЦФО
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ДополнительныеВалюты КАК ВерсииРегламентовПодготовкиОтчетностиДополнительныеВалюты
	|		ПО ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка = ВерсииРегламентовПодготовкиОтчетностиДополнительныеВалюты.Ссылка
	|			И ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница = ВерсииРегламентовПодготовкиОтчетностиДополнительныеВалюты.ОрганизационнаяЕдиница
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка = &Регламент
	|
	|СГРУППИРОВАТЬ ПО
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница,
	|	ЕСТЬNULL(ПараметрыЛимитированияЦФО.ВалютаЛимитирования, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыБюджетов.Предназначение КАК Предназначение,
	|	ЕСТЬNULL(ПараметрыЛимитирования.ИспользоватьЛимитирование, ЛОЖЬ) КАК ИспользоватьЛимитирование,
	|	ЕСТЬNULL(ПараметрыЛимитирования.СпособОпределенияВалютыЛимитирования, НЕОПРЕДЕЛЕНО) КАК СпособОпределенияВалютыЛимитирования,
	|	ПараметрыЛимитирования.ПериодичностьЛимитирования КАК ПериодичностьЛимитирования
	|ИЗ
	|	ВТ_ВидыБюджетов КАК ВТ_ВидыБюджетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыЛимитирования КАК ПараметрыЛимитирования
	|		ПО ВТ_ВидыБюджетов.Предназначение = ПараметрыЛимитирования.ВидБюджета.Предназначение
	|			И ПараметрыЛимитирования.Период = &ГодЛимитирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Организации.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ВТ_Организации.ВалютаЛимитированияЦФО КАК ВалютаЛимитированияЦФО,
	|	ВТ_Организации.ЕстьВалютаЛимитированияЦФОВШаблоне КАК ЕстьВалютаЛимитированияЦФОВШаблоне,
	|	ВТ_Организации.ЕстьУправленческаяВалютаВШаблоне КАК ЕстьУправленческаяВалютаВШаблоне
	|ИЗ
	|	ВТ_Организации КАК ВТ_Организации");
	Запрос.УстановитьПараметр("ВидыОтчетов", МассивВидовОтчета);
	Запрос.УстановитьПараметр("Регламент", Регламент);
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Запрос.УстановитьПараметр("ВалютаУпрУчета", ВалютаУпрУчета);
	
	НачалоПериодаСценария = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыУОП.ПериодСценария, "ДатаНачала");
	Запрос.УстановитьПараметр("ГодЛимитирования", НачалоГода(НачалоПериодаСценария));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();	
	
	ПараметрыВидовБюджетов = РезультатЗапроса[3].Выгрузить();
	ПараметрыОрганизаций = РезультатЗапроса[4].Выгрузить();
	
	// 1. проверка наличия бюджетов с лимитами в виде отчета
	Если ПараметрыВидовБюджетов.Количество() = 0 Тогда
		 Результат.ВозможнаУстановка = Ложь;
		 Результат.ТекстОшибки = НСтр("ru = 'Из регламента не удалось получить виды отчетов, по которым необходимо установить лимиты.
                                       |Виды отчета определяются либо в шаблоне процесса, либо в поле регламента ""Виды отчета регламента""'");
		 Возврат Результат;
	КонецЕсли;
		
	// 2. проверка лимитирования по бюджетам
	СтрокаВидыБюджета = "";
	Для каждого СтрокаБюджета Из ПараметрыВидовБюджетов Цикл
		Если НЕ СтрокаБюджета.ИспользоватьЛимитирование Тогда
			СтрокаВидыБюджета = СтрокаВидыБюджета + ?(СтрокаВидыБюджета <> "", ", ", "") + Строка(СтрокаБюджета.Предназначение);
		КонецЕсли;		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрокаВидыБюджета) Тогда
		ТекстОшибки = СтрШаблон(НСтр("ru = 'В параметрах оперативного планирования отключено лимитирование для видов бюджетов: %1. 
                  |Поменяйте настройку установки лимитов УОП или настройки оперативного планирования. 
                  |После чего повторите попытку открытия отчетного периода'"), СтрокаВидыБюджета);
		
		Результат.ВозможнаУстановка = Ложь;
		Результат.ТекстОшибки = ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	// 3. проверка периода УОП
	СтрОшибкаПериода = "";
	Для каждого СтрокаБюджета Из ПараметрыВидовБюджетов Цикл
		Если СтрокаБюджета.ИспользоватьЛимитирование Тогда
			РезультатСравнения = СравнитьПериодичность(ПериодичностьСценария, СтрокаБюджета.ПериодичностьЛимитирования);
			Если РезультатСравнения > 0 Тогда
				 СтрОшибкаПериода = СтрШаблон(НСтр("ru = 'Периодичность УОП: ""%1"" крупнее периодичности лимитирования в настройках: ""%2""'"), 
				 	ПериодичностьСценария, СтрокаБюджета.ПериодичностьЛимитирования);
				Прервать;	
			КонецЕсли;
		КонецЕсли;			
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СтрОшибкаПериода) Тогда
		Результат.ВозможнаУстановка = Ложь;
		Результат.ТекстОшибки = СтрОшибкаПериода;
		Возврат Результат;
	КонецЕсли;
	
	// 4. Проверка лимитирования по функциональной валюте
	ЕстьЛимитированиеПоВалютеЛимитированияЦФО = Ложь;
	Для каждого СтрокаБюджета Из ПараметрыВидовБюджетов Цикл
		Если СтрокаБюджета.ИспользоватьЛимитирование И СтрокаБюджета.СпособОпределенияВалютыЛимитирования = Перечисления.СпособыОпределенияВалютыЛимитирования.ВалютаЛимитированияЦФО Тогда
			ЕстьЛимитированиеПоВалютеЛимитированияЦФО = Истина;	
		КонецЕсли;
	КонецЦикла;

	Если ЕстьЛимитированиеПоВалютеЛимитированияЦФО Тогда
		
		// проверка наличия функциональной валюты в организации
		СтрокаОрганизацииСОшибками = "";
		Для каждого СтрокаОрганизаций Из ПараметрыОрганизаций Цикл
			Если НЕ ЗначениеЗаполнено(СтрокаОрганизаций.ВалютаЛимитированияЦФО) Тогда
				СтрокаОрганизацииСОшибками = СтрокаОрганизацииСОшибками + ?(СтрокаОрганизацииСОшибками <> "", ", ", "") + СтрокаОрганизаций.ОрганизационнаяЕдиница;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(СтрокаОрганизацииСОшибками) Тогда
			ТекстОшибки = СтрШаблон(НСтр("ru = 'Для организаций: %1 не заполнена валюта лимитирования ЦФО и задан способ лимитирования бюджета по функциональной валюте'"), СтрокаОрганизацииСОшибками);
			Результат.ВозможнаУстановка = Ложь;
			Результат.ТекстОшибки = ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
		// проверка наличия функциональной валюты в шаблоне
		ТекстОшибки = "";
		Для каждого СтрокаОрганизаций Из ПараметрыОрганизаций Цикл
			Если ЗначениеЗаполнено(СтрокаОрганизаций.ВалютаЛимитированияЦФО) И НЕ СтрокаОрганизаций.ЕстьВалютаЛимитированияЦФОВШаблоне Тогда
				ШаблонСообщения = НСтр(
					"ru = '%1В список валют  регламента для организации %2 не включена ее валюта лимитирования ЦФО %3.
					|Добавьте валюту лимитирования ЦФО в список валют организации и повторите попытку сохранения документа.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ?(ТекстОшибки <> "", Символы.ПС, ""),
						СтрокаОрганизаций.ОрганизационнаяЕдиница, СтрокаОрганизаций.ВалютаЛимитированияЦФО);
				ТекстОшибки = ТекстОшибки + ТекстСообщения;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Результат.ВозможнаУстановка = Ложь;
			Результат.ТекстОшибки = ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
			
	КонецЕсли;
	
	// 5. проверка лимитирования по управленческой валюте
	ЕстьЛимитированиеПоУправленческойВалюте = Ложь;
	Для каждого СтрокаБюджета Из ПараметрыВидовБюджетов Цикл
		Если СтрокаБюджета.ИспользоватьЛимитирование И СтрокаБюджета.СпособОпределенияВалютыЛимитирования = Перечисления.СпособыОпределенияВалютыЛимитирования.ВалютаУпрУчета Тогда
			ЕстьЛимитированиеПоУправленческойВалюте = Истина;	
		КонецЕсли;
	КонецЦикла;

	Если ЕстьЛимитированиеПоУправленческойВалюте Тогда
		
		// проверка наличия функциональной валюты в шаблоне
		ТекстОшибки = "";
		Для каждого СтрокаОрганизаций Из ПараметрыОрганизаций Цикл
			Если НЕ СтрокаОрганизаций.ЕстьУправленческаяВалютаВШаблоне Тогда
				 ТекстОшибки = ТекстОшибки + ?(ТекстОшибки <> "", Символы.ПС, "") + 
				 	СтрШаблон(НСтр("ru = 'Для организации %1 не указана валюта управленческого учета %2 в настройках регламента и задан способ лимитирования бюджета по управленческой валюте'"), 
						СтрокаОрганизаций.ОрганизационнаяЕдиница, ВалютаУпрУчета);
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Результат.ВозможнаУстановка = Ложь;
			Результат.ТекстОшибки = ТекстОшибки;
			Возврат Результат;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка настроек вида отчета при записи УОП: По указанной колонке лимитирования отсутствуют строки/показатели, связанные со статьями лимитируемого бюджета
	РезультатПроверки = ПроверитьНаличиеПоказателейУстанавливающихЛимиты(МассивВидовОтчета);
	Если НЕ РезультатПроверки.Успешно Тогда
		Результат.ВозможнаУстановка = Ложь;
		Результат.ТекстОшибки = РезультатПроверки.ТекстОшибки;
		Возврат Результат;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция УстановленыЛимитыПоУОП(УОП) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УОП", УОП);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостояниеУстановкиЛимитовОбъектамиСрезПоследних.Состояние КАК Состояние
	|ИЗ
	|	РегистрСведений.СостояниеУстановкиЛимитовОбъектами.СрезПоследних(, УОП = &УОП) КАК СостояниеУстановкиЛимитовОбъектамиСрезПоследних
	|ГДЕ
	|	СостояниеУстановкиЛимитовОбъектамиСрезПоследних.Состояние В(ЗНАЧЕНИЕ(Перечисление.СостоянияУстановкиЛимитов.Установлен), ЗНАЧЕНИЕ(Перечисление.СостоянияУстановкиЛимитов.УстановленПоНеутвержденнымДанным))";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция УстанавливаемыеВидыБюджетов(УОП) Экспорт
	
	РеквизитыУОП = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УОП, "ТекущаяПериодичность, ВерсияОрганизационнойСтруктуры, Сценарий, ПериодСценария.ДатаНачала, ПериодСценарияОкончание.ДатаОкончания");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", РеквизитыУОП.Сценарий);
	Запрос.УстановитьПараметр("ДатаНачала", РеквизитыУОП.ПериодСценарияДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", РеквизитыУОП.ПериодСценарияОкончаниеДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность", РеквизитыУОП.ТекущаяПериодичность);
	Запрос.УстановитьПараметр("УправлениеПериодом", УОП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыОтчетовУстановкаЛимитов.Предназначение КАК Предназначение
	|ИЗ
	|	Документ.РакурсДанных КАК РакурсДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов.ПараметрыУстановкиЛимитов КАК ВидыОтчетовУстановкаЛимитов
	|		ПО РакурсДанных.Область.Владелец = ВидыОтчетовУстановкаЛимитов.Ссылка
	|			И (ВидыОтчетовУстановкаЛимитов.Ссылка.ОбъектДляСогласованияЗначений = ЗНАЧЕНИЕ(Перечисление.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс))
	|ГДЕ
	|	НЕ РакурсДанных.ПометкаУдаления
	|	И РакурсДанных.Сценарий = &Сценарий
	|	И РакурсДанных.ПериодНачалоДата >= &ДатаНачала
	|	И РакурсДанных.ПериодОкончаниеДата <= &ДатаОкончания
	|	И РакурсДанных.Периодичность = &Периодичность
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВидыОтчетовУстановкаЛимитов.Предназначение
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОтчетов.ПараметрыУстановкиЛимитов КАК ВидыОтчетовУстановкаЛимитов
	|		ПО НастраиваемыйОтчет.ВидОтчета = ВидыОтчетовУстановкаЛимитов.Ссылка
	|			И (ВидыОтчетовУстановкаЛимитов.Ссылка.ОбъектДляСогласованияЗначений = ЗНАЧЕНИЕ(Перечисление.ОбъектыСогласованияЗначенийПоказателейОтчетов.ЭкземплярОтчета))
	|ГДЕ
	|	НЕ НастраиваемыйОтчет.ПометкаУдаления
	|	И НастраиваемыйОтчет.УправлениеПериодом = &УправлениеПериодом";
	
	МассивВидовБюджета = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Предназначение");
	
	Возврат МассивВидовБюджета;
	
КонецФункции

Функция ПараметрыОткрытияДокументаЛимита(ДанныеЯчейки) Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ДанныеЯчейки.УстановкаЛимита);
	
	РасшифровкаПоказателей = Новый Структура;
	РасшифровкаПоказателей.Вставить("Показатель", ДанныеЯчейки.Показатель);
	РасшифровкаПоказателей.Вставить("ПериодОтчета", ДанныеЯчейки.ПериодОтчета);
	РасшифровкаПоказателей.Вставить("Валюта", ДанныеЯчейки.Валюта);
	Для ном = 1 По ВстраиваниеОПКПереопределяемый.ПараметрСеанса_ЧислоДопАналитик() Цикл
		ЗначениеАналитики = ДанныеЯчейки["АналитикаПоказателя" + ном];
		Если ЗначениеАналитики <> Неопределено Тогда
			РасшифровкаПоказателей.Вставить("Аналитика" + ном, ЗначениеАналитики);
		КонецЕсли;	
	КонецЦикла;
	
	ПараметрыОткрытия.Вставить("РасшифровкаПоказателей", РасшифровкаПоказателей);
	
	Возврат ПараметрыОткрытия;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СравнитьПериодичность(Периодичность1, Периодичность2)
	
	Индекс1 = Перечисления.Периодичность.Индекс(Периодичность1);
	Индекс2 = Перечисления.Периодичность.Индекс(Периодичность2);
	
	Если Индекс1 > Индекс2 Тогда
		РезультатСравнения = 1;
	ИначеЕсли Индекс1 < Индекс2	Тогда
		РезультатСравнения = -1;
	Иначе
		РезультатСравнения = 0;
	КонецЕсли;
	
	Возврат РезультатСравнения;
	
КонецФункции

Функция ПроверитьНаличиеПоказателейУстанавливающихЛимиты(МассивВидовОтчета)
	
	Результат = Новый Структура("Успешно, ТекстОшибки", Истина, ""); 
	 
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка КАК ВидОтчета
	|ПОМЕСТИТЬ ВТ_ВидыОтчетов
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Ссылка В(&ВидыОтчетов)
	|	И ВидыОтчетов.МожетИспользоватьсяДляУстановкиЛимитов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_ВидыОтчетов.ВидОтчета КАК ВидОтчета,
	|	ВидыОтчетовУстановкаЛимитов.Предназначение КАК Предназначение,
	|	ВидыОтчетовУстановкаЛимитов.КолонкаОтчета КАК КолонкаОтчета
	|ПОМЕСТИТЬ ВТ_ВидыБюджетов
	|ИЗ
	|	Справочник.ВидыОтчетов.ПараметрыУстановкиЛимитов КАК ВидыОтчетовУстановкаЛимитов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВидыОтчетов КАК ВТ_ВидыОтчетов
	|		ПО ВидыОтчетовУстановкаЛимитов.Ссылка = ВТ_ВидыОтчетов.ВидОтчета
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ВидыБюджетов.ВидОтчета КАК ВидОтчета,
	|	ВТ_ВидыБюджетов.Предназначение КАК Предназначение,
	|	ПоказателиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_ВидыБюджетов КАК ВТ_ВидыБюджетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ВТ_ВидыБюджетов.ВидОтчета = ПоказателиОтчетов.Владелец
	|			И ВТ_ВидыБюджетов.КолонкаОтчета = ПоказателиОтчетов.Колонка
	|			И ВТ_ВидыБюджетов.Предназначение = ПоказателиОтчетов.Предназначение
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка ЕСТЬ NULL"
	);
	
	Запрос.УстановитьПараметр("ВидыОтчетов", МассивВидовОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	МассивОшибок = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		Текст = СтрШаблон(НСтр("ru = 'Для вида отчета: %1 не найдены показатели для установки бюджета: %2'"), Выборка.ВидОтчета, Выборка.Предназначение);
		МассивОшибок.Добавить(Текст);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(МассивОшибок) Тогда
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = СтрСоединить(МассивОшибок, Символы.ПС);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
