
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННЫМИ ПИСЬМАМИ

// Формирует почтовый профиль по учетной записи
//
// Параметры
//  УчетнаяЗапись
//
// Возвращаемое значение:
//   ИнтернетПочтовыйПрофиль
//
Функция ПолучитьИнтернетПочтовыйПрофиль(УчетнаяЗапись) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	Пароли = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(УчетнаяЗапись, "Пароль, ПарольSMTP");
	УстановитьПривилегированныйРежим(Ложь);
	Пароль = ?(ЗначениеЗаполнено(Пароли.Пароль), Пароли.Пароль, "");
	ПарольSMTP = ?(ЗначениеЗаполнено(Пароли.ПарольSMTP), Пароли.ПарольSMTP, "");
	
	ЭтоИМАП = (УчетнаяЗапись.ПротоколВходящейПочты = "IMAP");
	
	Профиль = Новый ИнтернетПочтовыйПрофиль;
	
	ВремяОжидания_ = УчетнаяЗапись.ВремяОжидания;
	Если ВремяОжидания_ > 0 Тогда
		Профиль.ВремяОжидания = ВремяОжидания_;
	КонецЕсли; 
	Профиль.Пароль = Пароль;
	Профиль.Пользователь = УчетнаяЗапись.Пользователь;
	
	Если ЭтоИМАП Тогда
		Профиль.АдресСервераIMAP = УчетнаяЗапись.СерверВходящейПочты;
		Профиль.ПортIMAP = УчетнаяЗапись.ПортСервераВходящейПочты;
		Профиль.ИспользоватьSSLIMAP = УчетнаяЗапись.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
		Профиль.ПарольIMAP = Пароль;
		Профиль.ПользовательIMAP = УчетнаяЗапись.Пользователь;
		
	Иначе
		Профиль.АдресСервераPOP3 = УчетнаяЗапись.СерверВходящейПочты;
		Профиль.ПортPOP3 = УчетнаяЗапись.ПортСервераВходящейПочты;
		Профиль.ИспользоватьSSLPOP3 = УчетнаяЗапись.ИспользоватьЗащищенноеСоединениеДляВходящейПочты;
		
	КонецЕсли;
	
	Профиль.АдресСервераSMTP = УчетнаяЗапись.СерверИсходящейПочты;
	Профиль.ПортSMTP = УчетнаяЗапись.ПортСервераИсходящейПочты;
	Профиль.ИспользоватьSSLSMTP = УчетнаяЗапись.ИспользоватьЗащищенноеСоединениеДляИсходящейПочты;
	Профиль.ПарольSMTP = ПарольSMTP;
	Профиль.ПользовательSMTP = УчетнаяЗапись.ПользовательSMTP;
		
	Если УчетнаяЗапись.ТребуетсяВходНаСерверПередОтправкой Тогда
		Профиль.POP3ПередSMTP = Истина;
		Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;
	//Иначе
	//	Профиль.АутентификацияSMTP = СпособSMTPАутентификации.БезАутентификации;
	КонецЕсли; 
	
	Возврат Профиль;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТЕКСТАМИ ЭЛЕКТРОННЫХ ПИСЕМ И ХТМЛ ТЕКСТАМИ

// Функция ищет вхождение в переданную строку значений из списка значений
//
// Параметры
//  Строка - исходная строка для поиска
//  ПодстрокиПоиска - список значений с коллекцией подстрок для поиска
//  СтрокаПоиска - элемент, в который возвращается найденное значение строки подпоиска
//
// Возвращаемое значение:
//  Наименьшая позиция найденного значения
//
Функция ПоискПервойПодстроки(Строка,ПодстрокиПоиска,СтрокаПоиска)
	
	Результат = 0;
	
	Для каждого Подстрока из ПодстрокиПоиска Цикл
		Нашли = СтрНайти(Строка,Подстрока.Значение);
		Если Нашли > 0 Тогда
			Если Результат=0 ИЛИ Нашли < Результат Тогда
				Результат = Нашли;
				СтрокаПоиска = Подстрока.Значение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает по переданному тексту строку
// в формате HTML с выделенными ссылками на ресурсы www
//
// Параметры
//  ТекстПисьма - текстовая строка
//
// Возвращаемое значение:
//  Текст в формате HTML
//
Функция ВернутьТекстПисьмаВФорматеHTML(ТекстПисьма) Экспорт
	Перем СтрокаПоиска;
	
	Текст = ТекстПисьма;
	ТекстПоиска = Текст;
	
	СмещениеВТексте = 0;
	
	ПодстрокиПоиска = Новый СписокЗначений;
	ПодстрокиПоиска.Добавить("http://");
	ПодстрокиПоиска.Добавить("www.");
	ПодстрокиПоиска.Добавить("mailto:");

	ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);

	// пробежимся по всем найденным ссылкам
	Пока ПозицияПризнакаСсылки>0 Цикл
		
		НачалоСсылки = ПозицияПризнакаСсылки;
		
		// найдем последний символ ссылки
		КонецСсылки = НачалоСсылки+СтрДлина(СтрокаПоиска)-1;
		Для а=КонецСсылки+1 по СтрДлина(ТекстПоиска) Цикл
			ТекСимвол = Сред(ТекстПоиска,а,1);
			Если КодСимвола(ТекСимвол) < 33 ИЛИ КодСимвола(ТекСимвол)>127 ИЛИ КодСимвола(ТекСимвол)=91 ИЛИ КодСимвола(ТекСимвол)=93 Тогда
				Прервать;
			КонецЕсли;
			КонецСсылки = а;
		КонецЦикла;
		
		Если КонецСсылки > НачалоСсылки+СтрДлина(СтрокаПоиска)-1 Тогда
			
			ТекстСсылки   = Сред(ТекстПоиска,НачалоСсылки,КонецСсылки-НачалоСсылки+1);
			ТекстСсылкиHTML = "<a href="""+?(СтрокаПоиска="www.","http://","")+ТекстСсылки+""">"+ТекстСсылки+"</a>";
			
			ТекстДоСсылки = Лев(Текст,НачалоСсылки+СмещениеВТексте-1);
			ТекстПослеСсылки = Прав(Текст,СтрДлина(Текст)-(КонецСсылки+СмещениеВТексте));
			
			Текст = ТекстДоСсылки + ТекстСсылкиHTML + ТекстПослеСсылки;
			
			СмещениеВТексте = СмещениеВТексте + КонецСсылки + (СтрДлина(ТекстСсылкиHTML)-СтрДлина(ТекстСсылки));

		Иначе
			
			СмещениеВТексте = СмещениеВТексте + КонецСсылки;
			
		КонецЕсли;
		
		ТекстПоиска = Прав(ТекстПоиска,СтрДлина(ТекстПоиска)-КонецСсылки);
		
		ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);
		
	КонецЦикла;
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "<BR>");
	
	ТекстВформатеHTML = "<HTML>        
	|<HEAD>
	|<META http-equiv=Content-Type content=""text/html; charset=utf-8"">
	|<META content=""MSHTML 6.00.2800.1400"" name=GENERATOR>
	|<STYLE>
	|body
	|{
	|	font-size:15px;
	|	font-family:Arial,Helvetica,Sans-Serif;
	|}
	|a
	|{	
	|	font-size:15px;
	|	font-family:Arial,Helvetica,Sans-Serif;
	|}
	|</STYLE>
	|</HEAD>
	|<BODY scroll=""auto"">" + Текст + "</BODY>
	|</HTML>";
	Возврат ТекстВформатеHTML;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ УВЕДОМЛЕНИЯМИ ПО ЭЛЕКТРОННОЙ ПОЧТЕ.
//

Функция ВернутьТекстПисьма(Заголовок, Содержание) Экспорт
	
	ТекстПисьма = 
	"<HTML>
	|<BODY>
	|<H3>" + Заголовок + "</H3> 
	|<HR>
	|<BR>" + Содержание + "
	|</BODY>
	|</HTML>";
	
	Возврат ТекстПисьма;
	
КонецФункции

Процедура ЗаписатьПисьмоВРегистр(Письмо, Источник) Экспорт
	НовыйИдентифкатор = Новый УникальныйИдентификатор;
	МенеджерЗаписей = РегистрыСведений.УведомленияПоЭлектроннойПочте.СоздатьМенеджерЗаписи();
	МенеджерЗаписей.Активность = Истина;
	МенеджерЗаписей.ДатаСоздания		 = ТекущаяДатаСеанса();
	МенеджерЗаписей.Источник			 = Источник;
	МенеджерЗаписей.Письмо				 = Новый ХранилищеЗначения(Письмо);
	МенеджерЗаписей.ИдентификаторПисьма	 = Строка(НовыйИдентифкатор);
	МенеджерЗаписей.Записать(Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ УВЕДОМЛЕНИЯМИ ПО ЭЛЕКТРОННОЙ ПОЧТЕ.
//

Процедура РазослатьПротоколыПоОтветственным(СоответствиеПротоколов) Экспорт
	
	МассивДокументов	= Новый Массив;
	МассивОрганизаций	= Новый Массив;
	
	Для Каждого ОбъектПротокол ИЗ СоответствиеПротоколов Цикл
		
		Если ТипЗнч(ОбъектПротокол.Ключ)=Тип("ДокументСсылка.НастраиваемыйОтчет")
			ИЛИ ТипЗнч(ОбъектПротокол.Ключ)=Тип("ДокументСсылка.Трансляция")
			ИЛИ ТипЗнч(ОбъектПротокол.Ключ)=Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
			
			МассивДокументов.Добавить(ОбъектПротокол.Ключ);
			
		ИначеЕсли ТипЗнч(ОбъектПротокол.Ключ)=Тип("СправочникСсылка.Организации") Тогда
			
			МассивОрганизаций.Добавить(ОбъектПротокол.Ключ);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОтветственных = Новый ТаблицаЗначений;
	
	ТаблицаОтветственных.Колонки.Добавить("Пользователь",				);
	ТаблицаОтветственных.Колонки.Добавить("ДокументыПользователя",		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	ТаблицаОтветственных.Колонки.Добавить("ОрганизацииПользователя",	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСписокЗначений());
	
	Для Каждого Документ ИЗ МассивДокументов Цикл
				
		ФизЛицоОтветственныйОрганизация = Документ.Организация.ОсновноеКонтактноеЛицо;
		
		ДобавитьДокументОтветственногоЛица(Документ, ФизЛицоОтветственныйОрганизация, ТаблицаОтветственных);
		
		Ответ = УправлениеОтчетамиУХ.ПолучитьТекущегоИсполнителяИПроверяющего(Документ);
		
		Если Ответ.Количество() > 0 Тогда
			
			ДобавитьДокументОтветственногоЛица(Документ, Ответ[0].Исполняющий, ТаблицаОтветственных);
			ДобавитьДокументОтветственногоЛица(Документ, Ответ[0].Согласование, ТаблицаОтветственных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Организация ИЗ МассивОрганизаций Цикл		
		ДобавитьОрганизациюОтветственногоЛица(Организация, Документ.Организация.ОсновноеКонтактноеЛицо, ТаблицаОтветственных);					
	КонецЦикла;
	
	КэшЭлАдресов = ПолучитьКэшЭлАдресов(ТаблицаОтветственных);
	
	Для Каждого СтрОтветственный ИЗ ТаблицаОтветственных Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрОтветственный.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийЭлАдрес = КэшЭлАдресов.Получить(СтрОтветственный.Пользователь);
		Если Не ЗначениеЗаполнено(ТекущийЭлАдрес) Тогда
			Продолжить;
		КонецЕсли;		
		
		// Формируем письмо пользователю по протоколам загрузки и записи объектов
		
		Если СтрОтветственный.ДокументыПользователя.Количество()>0 Тогда
			
			ПротоколОтветственного=Новый ТабличныйДокумент;
			ДокументовСОшибками=0;
			ДокументовОбработано=0;
			МассивОрганизаций=Новый Массив;
			
			Для Каждого СтрДокумент ИЗ СтрОтветственный.ДокументыПользователя Цикл
				
				ПротоколОбъекта=СоответствиеПротоколов[СтрДокумент.Значение];
				
				Если ТипЗнч(ПротоколОбъекта)=Тип("ТабличныйДокумент") Тогда
					
					ПротоколОтветственного.Вывести(ПротоколОбъекта);
					
				КонецЕсли;
				
				Если ПротоколируемыеСобытияУХ.ЕстьПротоколыПоОбъекту(СтрДокумент.Значение) Тогда
					
					ДокументовСОшибками=ДокументовСОшибками+1;
					
				КонецЕсли;
				
				ДокументовОбработано=ДокументовОбработано+1;
				
				Если МассивОрганизаций.Найти(СтрДокумент.Значение.Организация)=Неопределено Тогда
					МассивОрганизаций.Добавить(СтрДокумент.Значение.Организация);
				КонецЕсли;
				
			КонецЦикла;
			
			Расширение 	= ".htm";
			ТипФайла 	= ТипФайлаТабличногоДокумента.HTML;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
			ПротоколОтветственного.Записать(ИмяВременногоФайла,ТипФайла);
			
			ДанныеДокумента 	= Новый ДвоичныеДанные(ИмяВременногоФайла);	
			
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
			КонецПопытки;
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			
			Письмо.Получатели.Добавить(ТекущийЭлАдрес);
			
			Если МассивОрганизаций.Количество()=1 Тогда
				
				Письмо.Тема="По организации "+МассивОрганизаций[0]+" обработано "+ДокументовОбработано+" документов, признано ошибочными "+ДокументовСОшибками;
				
				ТекстЗаголовка=Письмо.Тема;
				ТекстСодержания=".</LI></UL>
				|<P>Подробности во вложенном файле ""Протокол обработки""</P>";
				
			Иначе
				
				Письмо.Тема="Обработано "+ДокументовОбработано+" документов по "+МассивОрганизаций.Количество()+", признано ошибочными "+ДокументовСОшибками;
				
				ТекстЗаголовка=Письмо.Тема;
				ТекстСодержания="Организации:<BR>
				|<UL>";
				
				Для Каждого Организация ИЗ МассивОрганизаций Цикл
					ТекстСодержания=ТекстСодержания+"
					|  <LI>" + Организация;
				КонецЦикла;
				
				ТекстСодержания=ТекстСодержания+".</LI></UL>
				|<P>Подробности во вложенном файле ""Протокол обработки""</P>";
				
			КонецЕсли;
			
			Письмо.Тексты.Добавить(ВернутьТекстПисьма(ТекстЗаголовка,ТекстСодержания),ТипТекстаПочтовогоСообщения.HTML);
			
			Письмо.Вложения.Добавить(ДанныеДокумента,"Протокол обработки"+Расширение);
			
			ЗаписатьПисьмоВРегистр(Письмо,СтрОтветственный.Пользователь);
			
		КонецЕсли;
		
		Если СтрОтветственный.ОрганизацииПользователя.Количество()>0 Тогда
			
			ПротоколОтветственного=Новый ТабличныйДокумент;
			
			Для Каждого СтрОрганизация ИЗ СтрОтветственный.ОрганизацииПользователя Цикл
				
				ПротоколОбъекта=СоответствиеПротоколов[СтрОрганизация.Значение];
				
				Если ТипЗнч(ПротоколОбъекта)=Тип("ТабличныйДокумент") Тогда
					
					ПротоколОтветственного.Вывести(ПротоколОбъекта);
					
				КонецЕсли;
								
			КонецЦикла;
			
			Расширение 	= ".htm";
			ТипФайла 	= ТипФайлаТабличногоДокумента.HTML;
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
			ПротоколОтветственного.Записать(ИмяВременногоФайла,ТипФайла);
			
			ДанныеДокумента 	= Новый ДвоичныеДанные(ИмяВременногоФайла);	
			
			Попытка
				УдалитьФайлы(ИмяВременногоФайла);
			Исключение
			КонецПопытки;
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			
			Письмо.Получатели.Добавить(ТекущийЭлАдрес);
			
			Если СтрОтветственный.ОрганизацииПользователя.Количество()=1 Тогда
				
				Письмо.Тема="При сверке внутригрупповых отношений по организации "+СтрОтветственный.ОрганизацииПользователя[0].Значение+" обнаружены расхождения."; ;
				
				ТекстЗаголовка=Письмо.Тема;
				ТекстСодержания=".</LI></UL>
				|<P>Подробности во вложенном файле ""Протокол сверки ВГО""</P>";
				
			Иначе
				
				Письмо.Тема="При сверке внутригрупповых отношений обнаружены расхождения по "+МассивОрганизаций.Количество()+" организациям.";
				
				ТекстЗаголовка=Письмо.Тема;
				ТекстСодержания="Организации:<BR>
				|<UL>";
				
				Для Каждого СтрОрганизация ИЗ СтрОтветственный.ОрганизацииПользователя Цикл
					ТекстСодержания=ТекстСодержания+"
					|  <LI>" + СтрОрганизация.Значение;
				КонецЦикла;
				
				ТекстСодержания=ТекстСодержания+".</LI></UL>
				|<P>Подробности во вложенном файле ""Протокол сверки ВГО""</P>";
				
			КонецЕсли;
			
			Письмо.Тексты.Добавить(ВернутьТекстПисьма(ТекстЗаголовка,ТекстСодержания),ТипТекстаПочтовогоСообщения.HTML);
			
			Письмо.Вложения.Добавить(ДанныеДокумента,"Протокол сверки ВГО"+Расширение);
			
			ЗаписатьПисьмоВРегистр(Письмо,СтрОтветственный.Пользователь);
				
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьКэшЭлАдресов(ТаблицаОтветственных)
	
	Результат = Новый Соответствие;
	
	КэшПользователиФизЛица = Новый Массив;
	Для каждого СтрОтветственный Из ТаблицаОтветственных Цикл		
		
		Если Не ЗначениеЗаполнено(СтрОтветственный.Пользователь) Тогда
			Продолжить;
		ИначеЕсли ТипЗнч(СтрОтветственный.Пользователь) = Тип("СправочникСсылка.КонтактныеЛицаОрганизаций") Тогда
			Результат.Вставить(СтрОтветственный.Пользователь, СтрОтветственный.Пользователь.ОсновнойАдресЭлектроннойПочты);
		Иначе
			КэшПользователиФизЛица.Добавить(СтрОтветственный.Пользователь);
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийВидыКИ = Новый Массив;
	ТекущийВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	ТекущийВидыКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
	
	ТабКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(
						КэшПользователиФизЛица, 
						ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты),
						ТекущийВидыКИ
					);
		
	Для каждого ТекущаяКИ Из ТабКИ Цикл
	
		Результат.Вставить(ТекущаяКИ.Объект, СокрЛП(ТекущаяКИ.Представление));
	
	КонецЦикла;				
					
	Возврат Результат;

КонецФункции

Процедура ДобавитьДокументОтветственногоЛица(Документ,Ответственный,ТаблицаОтветственных)
	
	СтрОтветственный=ТаблицаОтветственных.Найти(Ответственный,"Пользователь");
	
	Если СтрОтветственный=Неопределено Тогда
		
		СтрОтветственный=ТаблицаОтветственных.Добавить();
		СтрОтветственный.Пользователь=Ответственный;
		
	КонецЕсли;
	
	Если СтрОтветственный.ДокументыПользователя.НайтиПоЗначению(Документ)=Неопределено Тогда
		
		СтрОтветственный.ДокументыПользователя.Добавить(Документ);
		
	КонецЕсли;
			
КонецПроцедуры // ДобавитьДокументОтветственногоЛица()

Процедура ДобавитьОрганизациюОтветственногоЛица(Организация,Ответственный,ТаблицаОтветственных)
	
	СтрОтветственный=ТаблицаОтветственных.Найти(Ответственный,"Пользователь");
	
	Если СтрОтветственный=Неопределено Тогда
		
		СтрОтветственный=ТаблицаОтветственных.Добавить();
		СтрОтветственный.Пользователь=Ответственный;
		
	КонецЕсли;
	
	Если СтрОтветственный.ОрганизацииПользователя.НайтиПоЗначению(Организация)=Неопределено Тогда
		
		СтрОтветственный.ОрганизацииПользователя.Добавить(Организация);
		
	КонецЕсли;
			
КонецПроцедуры // ДобавитьДокументОтветственногоЛица()