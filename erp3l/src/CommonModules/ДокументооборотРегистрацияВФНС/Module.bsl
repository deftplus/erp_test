////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции общего назначения:
// - осуществляет подключение и авторизацию на сервисе регистрации;
// - выполняет запросы к сервису регистрации
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СервисРегистрации

// Инициализирует подключение к сервису регистрации
// Общая схема работы с сервисом:
// - получение временного токена см. СервисРегистрацииФНСПодключение
// - подписание данных токена с помощью СЭП
// - получение токена авторизации см. СервисРегистрацииФНСАвторизация
// - выполнение запросов к сервису регистрации с помощью токена полученного на предыдущем шаге
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено		- Булево - Истина, если функция успешно выполнена
//		* Ошибка		- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* СрокДействия	- Дата - дата и время окончания действия полученного токена
//		* Токен			- Строка - токен авторизации в формате Base64
//
Функция СервисРегистрацииФНСПодключение() Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("Подключение");
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Вставить("СрокДействия", ТекущаяДатаСеанса() + РезультатВызова.Результат.expires_in / 1000);
		Результат.Вставить("Токен", РезультатВызова.Результат.token);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает токен авторизации, требующийся для выполнения всех последующих операций
//
// Параметры:
//	Токен 				- Строка - строка с содержимым токена авторизации
//	Подпись 			- ДвоичныеДанные, Строка - сформированная ЭП в формате PKSC#7
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено		- Булево - Истина, если функция успешно выполнена
//		* Ошибка		- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* СрокДействия	- Дата - дата и время окончания действия полученного токена
//		* Токен			- Строка - токен авторизации в формате Base64
//
Функция СервисРегистрацииФНСАвторизация(Токен, Подпись) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ПараметрыВызова = Новый Структура;
	ПараметрыВызова.Вставить("token", Токен);
	
	Если ТипЗнч(Подпись) = Тип("ДвоичныеДанные") Тогда
		ЗначениеПодписи = Base64URL(Подпись);
	Иначе
		ЗначениеПодписи = Подпись;
	КонецЕсли;
	ПараметрыВызова.Вставить("sign", ЗначениеПодписи);
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("Авторизация");
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения, ПараметрыВызова);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Вставить("СрокДействия", ТекущаяДатаСеанса() + РезультатВызова.Результат.expires_in / 1000);
		Результат.Вставить("Токен", РезультатВызова.Результат.token);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает список ранее принятых заявлений в сервисе регистрации
//
// Параметры:
//	Токен 								- Строка - строка с содержимым токена авторизации в формате Base64
//	ИмяФайла 							- Строка - имя файла контейнера для фильтрации запроса
//	Период								- Строка - период для фильтрации запроса
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено						- Булево - Истина, если функция успешно выполнена
//		* Ошибка						- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Заявления						- Массив из Структур - каждая строка содержит поля
//			** ИдентификаторЗаявления	- Строка - идентификатор принятого заявления
//			** ИмяФайла					- Строка - имя файла транспортного контейнера
//			** ДатаПолучения			- Дата - дата получения заявления
//			** КодСостояния				- Строка - код состояния ответа
//			** Описание					- Строка - описание состояния ответа
//
Функция СервисРегистрацииФНССписокЗаявок(Токен, ИмяФайла = Неопределено, Период = Неопределено) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	Результат.Вставить("Заявления", Новый Массив);
	
	ПараметрыВызова = Новый Структура;
	
	Если ЗначениеЗаполнено(Период) Тогда
		ПараметрыВызова.Вставить("period", Период);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		ПараметрыВызова.Вставить("fileName", ИмяФайла);
	КонецЕсли;
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("СписокЗаявок", Токен);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения, ПараметрыВызова);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Для Каждого СтрокаМассива Из РезультатВызова.Результат.FILE_LIST Цикл
			НоваяСтрока = Новый Структура;
			НоваяСтрока.Вставить("ИдентификаторЗаявления", XMLСтрока(СтрокаМассива.ID));
			НоваяСтрока.Вставить("ИмяФайла", СтрокаМассива.FILE_NAME);
			НоваяСтрока.Вставить("ДатаПолучения", Дата(СтрокаМассива.DT));
			НоваяСтрока.Вставить("КодСостояния", СтрокаМассива.STATE_CODE);
			НоваяСтрока.Вставить("Описание", СтрокаМассива.STATE);
			Результат.Заявления.Добавить(НоваяСтрока);
		КонецЦикла;	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает содержимое файла транспортного контейнера отправленного заявления в сервис регистрации
// Требуется уточнение описания метода, т.к. наблюдаются противоречия в документации
//
// Параметры:
//	Токен 				- Строка - строка с содержимым токена авторизации в формате Base64
//	ИмяФайла 			- Строка - имя файла транспортного контейнера
//	ДанныеФайла			- ДвоичныеДанные - содержимое транспортного контейнера (ZIP)
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено		- Булево - Истина, если функция успешно выполнена
//		* Ошибка		- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Идентификатор	- Строка - идентификатор, присвоенный заявлению сервисом регистрации в случае успешной проверки
//		* ДатаОтправки	- Дата - дата и время успешной отправки
//
Функция СервисРегистрацииФНСОтправитьЗаявку(Токен, ИмяФайла, ДанныеФайла) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ЭлементыОтправки = Новый Массив;
	
	НовыйЭлемент = ОписаниеСоставнойЧастиТелаЗапроса();
	НовыйЭлемент.Описание = "name=""file""; filename=""" + ИмяФайла + """";
	НовыйЭлемент.Содержимое = ДанныеФайла;
	НовыйЭлемент.Заголовки.Вставить("Content-Type", "application/x-zip-compressed");
	ЭлементыОтправки.Добавить(НовыйЭлемент);
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("ОтправитьЗаявку", Токен);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения, , ЭлементыОтправки);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Вставить("ИдентификаторЗаявления", XMLСтрока(РезультатВызова.Результат.ID));
		Результат.Вставить("ДатаОтправки", ТекущаяДатаСеанса());
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает содержимое файла транспортного контейнера отправленного заявления в сервис регистрации
//
// Параметры:
//	Токен 							- Строка - строка с содержимым токена авторизации в формате Base64
//	ИдентификаторЗаявления 			- Строка - идентификатор, присвоенный сервисом после получения заявления
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено					- Булево - Истина, если функция успешно выполнена
//		* Ошибка					- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Файл						- ДвоичныеДанные - содержимое транспортного контейнера (ZIP)
//
Функция СервисРегистрацииФНСПолучитьЗаявку(Токен, ИдентификаторЗаявления) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("ПолучитьЗаявку", Токен, ИдентификаторЗаявления);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Вставить("Файл", РезультатВызова.Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает состояние принятого сервисом регистрации заявления
//
// Параметры:
//	Токен 							- Строка - строка с содержимым токена авторизации в формате Base64
//	ИдентификаторЗаявления 			- Строка - идентификатор, присвоенный сервисом после получения заявления
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено					- Булево - Истина, если функция успешно выполнена
//		* Ошибка					- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* ИмяФайла					- Строка - имя файла транспортного контейнера отправленного заявления
//		* ДатаПолучения				- Дата - дата приема заявления сервисом регистрации
//		* ДатаПолученияНО			- Дата - дата приема заявления в налоговом органе
//		* КодНО						- Строка - код налогового органа, принявшее заявление в обработку
//		* НаименованиеНО			- Строка - наименование налогового органа, принявшее заявление в обработку
//		* КодСостояния				- Строка - код состояния ответа
//		* Описание					- Строка - описание состояния ответа
//		* СообщениеПроверки			- Строка - сообщение проверки
//		* НаименованиеОрганизации	- Строка - наименование регистрируемой организации
//		* Идентификатор				- Строка
//		* ИдентификаторЗаявления	- Строка - наименование регистрируемой организации
//		* СписокОтветов				- Массив - содержит структуры см. ПодготовитьРеестрОтветовНаЗаявления
//
Функция СервисРегистрацииФНСИнформацияОЗаявке(Токен, ИдентификаторЗаявления) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("ИнформацияОЗаявке", Токен, ИдентификаторЗаявления);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		СостояниеЗаявления = Новый Структура("FILE_NAME, ID, CID, RO_CODE, RO_NAME, STATE_CODE, STATE, NAME, REPLY_LIST, MSG");
		СостояниеЗаявления.Вставить("DT_RO", '00010101');
		СостояниеЗаявления.Вставить("DT", '00010101');
		СостояниеЗаявления.Вставить("REPLY_LIST", Новый Массив);
		
		ЗаполнитьЗначенияСвойств(СостояниеЗаявления, РезультатВызова.Результат.INFO);
		Результат.Вставить("ИмяФайла", СостояниеЗаявления.FILE_NAME);
		Результат.Вставить("ДатаПолучения", Дата(СостояниеЗаявления.DT));
		Результат.Вставить("ДатаПолученияНО", Дата(СостояниеЗаявления.DT_RO));
		Результат.Вставить("ИдентификаторЗаявления", XMLСтрока(СостояниеЗаявления.ID));
		Результат.Вставить("Идентификатор", СостояниеЗаявления.CID);
		Результат.Вставить("КодНО", СостояниеЗаявления.RO_CODE);
		Результат.Вставить("НаименованиеНО", СостояниеЗаявления.RO_NAME);
		Результат.Вставить("КодСостояния", СостояниеЗаявления.STATE_CODE);
		Результат.Вставить("Описание", СостояниеЗаявления.STATE);
		Результат.Вставить("СообщениеПроверки", СостояниеЗаявления.MSG);
		Результат.Вставить("НаименованиеОрганизации", СостояниеЗаявления.NAME);
		Результат.Вставить("СписокОтветов", ПодготовитьРеестрОтветовНаЗаявления(СостояниеЗаявления.REPLY_LIST));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает список сформированных ответов сервисом регистрации на ранее отправленное заявление
//
// Параметры:
//	Токен 						- Строка - строка с содержимым токена авторизации в формате Base64
//	ИдентификаторЗаявления 		- Строка - идентификатор, присвоенный сервисом после получения заявления
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено				- Булево - Истина, если функция успешно выполнена
//		* Ошибка				- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Ответы				- Массив - каждая строка содержит структуру см. ПодготовитьРеестрОтветовНаЗаявления
//
Функция СервисРегистрацииФНССписокОтветов(Токен, ИдентификаторЗаявления) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	Результат.Вставить("Ответы", Новый Массив);
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("СписокОтветов", Токен, ИдентификаторЗаявления);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Ответы = ПодготовитьРеестрОтветовНаЗаявления(РезультатВызова.Результат.REPLY_LIST);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает файл транспортного контейнера (ZIP) c ответом сервиса регистрации на ранее отправленное заявление
//
// Параметры:
//	Токен 					- Строка - строка с содержимым токена авторизации в формате Base64
//	ИдентификаторЗаявления 	- Строка - идентификатор, присвоенный сервисом после получения заявления
//	ИдентификаторОтвета 	- Строка - идентификатор ответа, полученный с помощью функции СервисРегистрацииФНССписокОтветов
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено			- Булево - Истина, если функция успешно выполнена
//		* Ошибка			- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Файл				- ДвоичныеДанные - содержимое файла
//
Функция СервисРегистрацииФНСФайлОтвета(Токен, ИдентификаторЗаявления, ИдентификаторОтвета) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("ФайлОтвета", Токен, ИдентификаторЗаявления, ИдентификаторОтвета);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Вставить("Файл", РезультатВызова.Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает файл в PDF формате содержащий платежный документ
//
// Параметры:
//	Токен 					- Строка - строка с содержимым токена авторизации в формате Base64
//	ПлатежныйДокумент   	- Структура - содержит поля
//		* КодНО				- Строка - код налогового органа
//		* ОКАТО				- Строка - код ОКАТО
//		* КБК				- Строка - код КБК
//		* Сумма				- Число - сумма для оплаты
//		* ИННПлательщика	- Строка - ИНН физического лица плательщика
//		* Фамилия			- Строка - фамилия физического лица плательщика
//		* Имя				- Строка - имя физического лица плательщик
//		* Отчество			- Строка - отчество физического лица плательщика
//		* АдресПлательщика	- Строка - адрес физического лица плательщика
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено			- Булево - Истина, если функция успешно выполнена
//		* Ошибка			- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Файл				- ДвоичныеДанные - содержимое файла
//
Функция СервисРегистрацииФНСПлатежныйДокумент(Токен, ПлатежныйДокумент) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию();
	
	ПараметрыВызова = Новый Соответствие;
	ПараметрыВызова.Вставить("codeno", ПлатежныйДокумент.КодНО);
	ПараметрыВызова.Вставить("okato", ПлатежныйДокумент.ОКАТО);
	ПараметрыВызова.Вставить("kbk", ПлатежныйДокумент.КБК);
	ПараметрыВызова.Вставить("summa", XMLСтрока(ПлатежныйДокумент.Сумма));
	ПараметрыВызова.Вставить("innfl", ПлатежныйДокумент.ИННПлательщика); // физическое лицо
	ПараметрыВызова.Вставить("fam", ПлатежныйДокумент.Фамилия);
	ПараметрыВызова.Вставить("nam", ПлатежныйДокумент.Имя);
	ПараметрыВызова.Вставить("otch", ПлатежныйДокумент.Отчество);
	ПараметрыВызова.Вставить("adrfl", ПлатежныйДокумент.АдресПлательщика);

	ПараметрыПодключения = ПараметрыПодключенияСервисаРегистрации("ПлатежныйДокумент", Токен);
	РезультатВызова = ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения, ПараметрыВызова);
	
	Если ПодготовитьРезультатЗапроса(РезультатВызова, Результат) Тогда
		Результат.Вставить("Файл", РезультатВызова.Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработкаОбъектовОтправки

// Отправка пакета на сервер ФНС, регистрация факта отправки
//
// Параметры:
//	ПараметрыОтправки			- Структура - содержит поля для отправки заявления:
//		* Токен					- Строка
//		* ИмяФайлаТранспортногоКонтейнера - Строка - имя файла для отправляемого контейнера
//		* ДанныеФайла			- ДвоичныеДанные - содержимое транспортного контейнера
//		* ПредметОтправки		- ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//		* ОтпечатокСертификата	- Строка - отпечаток сертификата с помощью которого создавалась отправка
//		* КодНО					- Строка - необязательный, содержит код налогового органа
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено 			- Булево
//		* Ошибка				- Строка
//		* Отправка				- СправочникСсылка.ОтправкиРегистрацияЮЛ - присутствует, если Выполнено = Истина
//		* ИдентификаторЗаявления- Строка
//
Функция СоздатьОтправкуРегистрацииЮЛ(ПараметрыОтправки) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	
	РезультатОтправки = СервисРегистрацииФНСОтправитьЗаявку(ПараметрыОтправки.Токен, ПараметрыОтправки.ИмяФайлаТранспортногоКонтейнера, ПараметрыОтправки.ДанныеФайла);
	
	Если ПодготовитьРезультатЗапроса(РезультатОтправки, Результат) Тогда

		ПредметОтправки = ПараметрыОтправки.ПредметОтправки;
		СвойстваФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ПараметрыОтправки.ИмяФайлаТранспортногоКонтейнера);
		РазделыИмени = СтрРазделить(СвойстваФайла.ИмяБезРасширения, "_", Ложь);
		КодНО = "";
		Если РазделыИмени.Количество() > 5 Тогда
			КодНО = РазделыИмени[2];
		КонецЕсли;
		КодНО = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОтправки, "КодНО", КодНО);
		
		ОбъектОтправки = Справочники.ОтправкиРегистрацияЮЛ.СоздатьЭлемент();
		ОбъектОтправки.Наименование = СокрЛП(ПредметОтправки);
		ОбъектОтправки.ИмяФайлаПакета = ПараметрыОтправки.ИмяФайлаТранспортногоКонтейнера;
		ОбъектОтправки.СертификатПодписи = ПараметрыОтправки.ОтпечатокСертификата;
		ОбъектОтправки.ПредметОтправки = ПредметОтправки;
		ОбъектОтправки.ДатаОтправки	= РезультатОтправки.ДатаОтправки;
		ОбъектОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен;
		ОбъектОтправки.ИдентификаторНаСервере = РезультатОтправки.ИдентификаторЗаявления;
		ОбъектОтправки.Организация = ?(ПредметОтправки <> Неопределено, ПредметОтправки.Организация, Неопределено);
		ОбъектОтправки.КодОрганаФНС = КодНО;
		ОбъектОтправки.ДатаПолученияРезультата = РезультатОтправки.ДатаОтправки;
		
		ОбъектОтправки.Версия = 0;
		ОбъектОтправки.ПредставлениеПериода = ПредставлениеПериода(ОбъектОтправки.ДатаОтправки, КонецДня(ОбъектОтправки.ДатаОтправки), "ФП=Истина");
		ОбъектОтправки.ПредставлениеВидаДокумента = НСтр("ru = 'Заявление на регистрацию изменений в ФНС';
														|en = 'Заявление на регистрацию изменений в ФНС'");
		
		НачатьТранзакцию();
		
		Попытка
			Удачно = ЗаписатьОбъектОтправки(ОбъектОтправки);
			Если Удачно Тогда
				ЗаписатьСтатусОтправкиРегистрацииЮЛ(ПредметОтправки, ОбъектОтправки.СтатусОтправки, ОбъектОтправки.Ссылка);
				
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("ОтправкаСсылка", ОбъектОтправки.Ссылка);
				ПараметрыФайла.Вставить("АдресФайла", ПоместитьВоВременноеХранилище(ПараметрыОтправки.ДанныеФайла));
				ПараметрыФайла.Вставить("ИмяФайла", ПараметрыОтправки.ИмяФайлаТранспортногоКонтейнера);
				ПараметрыФайла.Вставить("НазначениеФайла", Перечисления.НазначенияФайловРегистрацииЮЛ.Контейнер);
				ПараметрыФайла.Вставить("ТипСодержимого", Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка());
				ПараметрыФайла.Вставить("ИдентификаторОтвета", "");
				ПараметрыФайла.Вставить("КодОтвета", "10");
				ПараметрыФайла.Вставить("ОписаниеСервиса", НСтр("ru = 'Заявка поставлена в очередь на обработку';
																|en = 'Заявка поставлена в очередь на обработку'"));
				ПараметрыФайла.Вставить("Описание", НСтр("ru = 'Пакет для отправки';
														|en = 'Пакет для отправки'"));
				ПараметрыФайла.Вставить("НомерТранзакции", "01");
				НовыйФайл = ПрисоединитьФайлОтправкиРегистрацииЮЛ(ПараметрыФайла);
				Удачно = ЗначениеЗаполнено(НовыйФайл);
				
			КонецЕсли;
			
			Если Удачно Тогда
				ЗафиксироватьТранзакцию();
			Иначе
				ОтменитьТранзакцию();
			КонецЕсли;
			
		Исключение
			ОтменитьТранзакцию();
			Удачно = Ложь;
			Результат.Ошибка = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ЗаписьЖурналаРегистрацииДляОшибки(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ПредметОтправки)
			
		КонецПопытки;
		
		Результат.Выполнено = Удачно;
		
		Если Удачно Тогда
			Результат.Вставить("Отправка", ОбъектОтправки.Ссылка);
			Результат.Вставить("ИдентификаторЗаявления", РезультатОтправки.ИдентификаторЗаявления);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Проверяет наличие ответов по заявке, обрабатывает их и меняет статус в ИБ
//
// Параметры:
//	ПараметрыОтправки		- Структура - содержит поля:
//		* Токен 			- Строка - строка с содержимым токена авторизации в формате Base64
//		* ОтправкаСсылка	- СправочникСсылка - ссылка на объект отправки
//		* Принудительно		- Булево - обновляет все этапы
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено			- Булево - Истина, если функция успешно выполнена
//		* Ошибка			- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* Файлы				- Массив - 
//
Функция ОбновитьСтатусОтправкиРегистрацииЮЛ(ПараметрыОтправки) Экспорт
		
	ВсеКонтейнеры = Новый Массив;
	Результат = ОтветСервисаПоУмолчанию();
	СвойстваОтправки = СвойстваОтправкиРегистрацииЮЛ(ПараметрыОтправки.ОтправкаСсылка);
	СостояниеЗаявки = СервисРегистрацииФНСИнформацияОЗаявке(ПараметрыОтправки.Токен, СвойстваОтправки.ИдентификаторЗаявления);
	
	Если ПодготовитьРезультатЗапроса(СостояниеЗаявки, Результат) Тогда
		
		РеестрОтветов = Новый Соответствие;
		ТаблицаОтветов = РеестрПолученныхОтветов(ПараметрыОтправки.ОтправкаСсылка);
		Для Каждого СтрокаТаблицы Из ТаблицаОтветов Цикл
			РеестрОтветов.Вставить(СтрокаТаблицы.ИдентификаторОтвета, СтрокаТаблицы.Ссылка);
		КонецЦикла;
		
		РеквизитыОбновления = Новый Структура;
		РеквизитыОбновления.Вставить("ДатаПолученияРезультата", ТекущаяДатаСеанса());
		Если СвойстваОтправки.КодОтвета <> СостояниеЗаявки.КодСостояния Тогда
			РеквизитыОбновления.Вставить("КодОтвета", СостояниеЗаявки.КодСостояния);
			РеквизитыОбновления.Вставить("ОписаниеОтвета", СостояниеЗаявки.Описание);
			Если ЗначениеЗаполнено(СостояниеЗаявки.СообщениеПроверки) Тогда
				РеквизитыОбновления.ОписаниеОтвета = РеквизитыОбновления.ОписаниеОтвета + " " + СостояниеЗаявки.СообщениеПроверки;
			КонецЕсли;
			СвойстваОтправки.ОписаниеОтвета = РеквизитыОбновления.ОписаниеОтвета;
		КонецЕсли;
		
		ВсеОтветы = СостояниеЗаявки.СписокОтветов;

		Если ВсеОтветы.Количество() = 0 Тогда
			РеестрКодов = РеестрКодовРегистрацииЮЛ();
			АнализКода = РеестрКодов[СвойстваОтправки.КодОтвета];
			Если АнализКода <> Неопределено И АнализКода.ТипКода = "1" Тогда
				РеквизитыОбновления.Вставить("СтатусОтправки", Перечисления.СтатусыОтправки.НеПринят);
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из ВсеОтветы Цикл
			НашлиОтвет = РеестрОтветов[СтрокаМассива.ИдентификаторОтвета];
			Если НашлиОтвет = Неопределено Тогда
				КонтейнерОтвета = СервисРегистрацииФНСФайлОтвета(ПараметрыОтправки.Токен, СвойстваОтправки.ИдентификаторЗаявления, СтрокаМассива.ИдентификаторОтвета);
				Если ПодготовитьРезультатЗапроса(КонтейнерОтвета, Результат) Тогда
					НашлиОтвет = КонтейнерОтвета.Файл;
				Иначе
					Прервать;
				КонецЕсли;
			ИначеЕсли НЕ ПараметрыОтправки.Принудительно Тогда
				Продолжить;	
			КонецЕсли;
		
			СоздалиОтвет = ОбновитьСтатусЗаявкиРегистрацииЮЛ(СвойстваОтправки, СтрокаМассива, НашлиОтвет);
			Если СоздалиОтвет.Выполнено Тогда
				РеквизитыОбновления.Вставить("СтатусОтправки", СоздалиОтвет.СтатусОтправки);
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеКонтейнеры, СоздалиОтвет.Файлы);
			Иначе
				Результат.Ошибка = НСтр("ru = 'Ошибка при создании транспортного контейнера';
										|en = 'Ошибка при создании транспортного контейнера'");
				Результат.Выполнено = Ложь;
				Прервать;
			КонецЕсли;	
			
		КонецЦикла;
		
		Результат.Выполнено = ОбновитьОтправкуРегистрацииЮЛ(ПараметрыОтправки.ОтправкаСсылка, РеквизитыОбновления);
		
	КонецЕсли;
	
	Результат.Вставить("Файлы", ВсеКонтейнеры);
	
	Возврат Результат;
	
КонецФункции

// Обновляет данные справочника ОтправкиРегистрацияЮЛ, и статусы отправки при необходимости
//
// Параметры:
//	ОтправкаСсылка 		- СправочникСсылка.ОтправкиРегистрацияЮЛ
//	ИзменяемыеРеквизиты - Структура - содержит поля для обновления реквизитов справочника
//
// Возвращаемое значение:
//	Булево - Истина, когда успешно обновлен элемент справочника
//
Функция ОбновитьОтправкуРегистрацииЮЛ(ОтправкаСсылка, ИзменяемыеРеквизиты) Экспорт
	
	ИзменитьСтатус = ИзменяемыеРеквизиты.Свойство("СтатусОтправки");
	ОбъектОтправки = ОтправкаСсылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ОбъектОтправки, ИзменяемыеРеквизиты);
	
	НачатьТранзакцию();
	
	Попытка
		
		Результат = ЗаписатьОбъектОтправки(ОбъектОтправки);
		
		Если Результат И ИзменитьСтатус Тогда
			ЗаписатьСтатусОтправкиРегистрацииЮЛ(ОбъектОтправки.ПредметОтправки, ИзменяемыеРеквизиты.СтатусОтправки, ОтправкаСсылка);
		КонецЕсли;
		
		Если Результат Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
		
	Исключение
		ОтменитьТранзакцию();
		Результат = Ложь;
		ЗаписьЖурналаРегистрацииДляОшибки(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОтправкаСсылка)
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Проверяет статус закрытия объекта отправки при его записи
//
// Параметры:
//	ОбъектОтправки - СправочникОбъект.ОтправкиРегистрацияЮЛ
//
Процедура ПроверитьСтатусЗакрытия(ОбъектОтправки) Экспорт
	
	Если ОбъектОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.Отправлен Тогда
		ОбъектОтправки.ДатаЗакрытия = '00010101';
	ИначеЕсли (ОбъектОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан
		ИЛИ ОбъектОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят) Тогда
		ОбъектОтправки.ДатаЗакрытия = ОбъектОтправки.ДатаПолученияРезультата;
	КонецЕсли;
	
КонецПроцедуры

//Присоединяет файл к отправке регистрации ЮЛ
//
// Параметры:
//	СвойстваФайла			- Структура - содержит поля:
//		* ОтправкаСсылка	- СправочникСсылка.ОтправкиРегистрацияЮЛ
//		* АдресФайла		- Строка - адрес временного хранилища
//		* НазначениеФайла	- ПеречислениеСсылка.НазначенияФайловРегистрацииЮЛ
//		* Идентификатор		- Строка - идентификатор ответа
//		* КодОтвета			- Строка
//		* ИмяФайла			- Строка - имя исходного файла
//		* Описание			- Строка - описание содержимого файла
//		* ОписаниеСервиса	- Строка - описание состояния заявления
//		* ТипСодержимого	- ПеречислениеСсылка.ТипыСодержимогоФайлов
//
// Возвращаемое значение:
//	СправочникСсылка.ОтправкиРегистрацияЮЛПрисоединенныеФайлы
//
Функция ПрисоединитьФайлОтправкиРегистрацииЮЛ(СвойстваФайла) Экспорт
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СвойстваФайла.ИмяФайла);
	РасширениеФайлаБезТочки = Сред(КомпонентыИмениФайла.Расширение, 2);
	
	УникальноеИмяФайлаБезРасширения = ОбщегоНазначенияЭДКОКлиентСервер.УникальнаяСтрока(КомпонентыИмениФайла.ИмяБезРасширения, 150);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ИдентификаторОтвета", СвойстваФайла.ИдентификаторОтвета);
	ПараметрыФайла.Вставить("ТипСодержимого", СвойстваФайла.ТипСодержимого);
	ПараметрыФайла.Вставить("НазначениеФайла", СвойстваФайла.НазначениеФайла);
	ПараметрыФайла.Вставить("ИсходноеИмяФайла", КомпонентыИмениФайла.Имя);
	ПараметрыФайла.Вставить("КодОтвета", СвойстваФайла.КодОтвета);
	ПараметрыФайла.Вставить("ОписаниеОтвета", СвойстваФайла.ОписаниеСервиса);
	ПараметрыФайла.Вставить("НомерТранзакции", СвойстваФайла.НомерТранзакции);
	
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла(ПараметрыФайла);
	ПараметрыФайла.Вставить("ВладелецФайлов", СвойстваФайла.ОтправкаСсылка);
	ПараметрыФайла.Вставить("ИмяБезРасширения", УникальноеИмяФайлаБезРасширения);
	ПараметрыФайла.Вставить("РасширениеБезТочки", РасширениеФайлаБезТочки);
	
	ТаблицаОтветов = РеестрПолученныхОтветов(СвойстваФайла.ОтправкаСсылка);
	НашлиОтветов = ТаблицаОтветов.НайтиСтроки(Новый Структура("ИсходноеИмяФайла, ИдентификаторОтвета", КомпонентыИмениФайла.Имя, СвойстваФайла.ИдентификаторОтвета));
	Если НашлиОтветов.Количество() = 0 Тогда
		НоваяСсылкаНаФайл = РаботаСФайлами.НоваяСсылкаНаФайл(СвойстваФайла.ОтправкаСсылка, "ОтправкиРегистрацияЮЛПрисоединенныеФайлы");
		ПрисоединенныйФайл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, СвойстваФайла.АдресФайла,,СвойстваФайла.Описание, НоваяСсылкаНаФайл);
	Иначе
		ПрисоединенныйФайл = НашлиОтветов[0].Ссылка;
		ПараметрыФайла = Новый Структура;
		ПараметрыФайла.Вставить("АдресФайлаВоВременномХранилище", СвойстваФайла.АдресФайла); 
		ПараметрыФайла.Вставить("АдресВременногоХранилищаТекста", ""); 
		РаботаСФайлами.ОбновитьФайл(ПрисоединенныйФайл, ПараметрыФайла);
	КонецЕсли;
	
	Возврат ПрисоединенныйФайл;
	
КонецФункции

// Формирует базовую информацию об отправке
//
// Параметры:
//	СсылкаПоиска 					- СправочникСсылка.ОтправкиРегистрацияЮЛ, ДокументСсылка - можно передать как саму отправку, так и предмет отправки
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* ОтпечатокСертификата 		- Строка - отпечаток сертификата который использовался при подключении к сервису
//		* ОтправкаСсылка			- СправочникСсылка.ОтправкиРегистрацияЮЛ
//		* ПредметОтправки			- ДокументСсылка
//		* ИдентификаторЗаявления    - Строка - присвоенный сервером идентификатор заявки при отправке
//		* ДатаОтправки				- Дата
//		* ОписаниеОтвета			- Строка - описание состояния заявки полученное при обновлении статусов
//		* КодОтвета					- Строка - код состояния заявки полученное при обновлении статусов
//		* СтатусОтправки			- ПеречислениеСсылка.СтатусыОтправки
//
Функция СвойстваОтправкиРегистрацииЮЛ(СсылкаПоиска) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ОтпечатокСертификата", "");
	Результат.Вставить("ОтправкаСсылка", Неопределено);
	Результат.Вставить("ПредметОтправки", Неопределено);
	Результат.Вставить("ИдентификаторЗаявления", "");
	Результат.Вставить("ДатаОтправки", Неопределено);
	Результат.Вставить("ОписаниеОтвета", "");
	Результат.Вставить("КодОтвета", "");
	Результат.Вставить("СтатусОтправки", Неопределено);
	Результат.Вставить("Протокол", Неопределено);

	Если ТипЗнч(СсылкаПоиска) = Тип("СправочникСсылка.ОтправкиРегистрацияЮЛ") Тогда
		ОтправкаСсылка = СсылкаПоиска;
	Иначе
		ОтправкаСсылка = ПоследняяОтправкаПоПредмету(СсылкаПоиска);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ДанныеОтправки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОтправкаСсылка, "ИдентификаторНаСервере, ДатаОтправки, КодОтвета, ОписаниеОтвета, ПредметОтправки, СертификатПодписи, СтатусОтправки");
	Результат.ОтпечатокСертификата = ДанныеОтправки.СертификатПодписи;
	Результат.ОтправкаСсылка = ОтправкаСсылка;
	Результат.ПредметОтправки = ДанныеОтправки.ПредметОтправки;
	Результат.ИдентификаторЗаявления = ДанныеОтправки.ИдентификаторНаСервере;
	Результат.ДатаОтправки = ДанныеОтправки.ДатаОтправки;
	Результат.ОписаниеОтвета = ДанныеОтправки.ОписаниеОтвета;
	Результат.КодОтвета = ДанныеОтправки.КодОтвета;
	Результат.СтатусОтправки = ДанныеОтправки.СтатусОтправки;
	
	ВсеЭтапы = СформироватьЭтапыОтправки(ОтправкаСсылка);
	Если ВсеЭтапы.Отправлено.Выполнен И НЕ ВсеЭтапы.Отправлено.Успешно Тогда
		Результат.Протокол = ВсеЭтапы.Отправлено.Протокол;
	ИначеЕсли ВсеЭтапы.ПринятВОбработку.Выполнен И НЕ ВсеЭтапы.ПринятВОбработку.Успешно Тогда
		Результат.Протокол = ВсеЭтапы.ПринятВОбработку.Протокол;
	ИначеЕсли ВсеЭтапы.Рассмотрение.Выполнен И НЕ ВсеЭтапы.Рассмотрение.Успешно Тогда
		Результат.Протокол = ВсеЭтапы.Рассмотрение.Протокол;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует базовую информацию об заявлении на регистрацию
//
// Параметры:
//	СсылкаПоиска 					- ДокументСсылка - можно передать как саму отправку, так и предмет отправки
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* ОтпечатокСертификата 		- Строка - отпечаток сертификата который использовался при подключении к сервису
//		* ОтправкаСсылка			- СправочникСсылка.ОтправкиРегистрацияЮЛ
//		* ПредметОтправки			- ДокументСсылка
//		* ИдентификаторЗаявления    - Строка - присвоенный сервером идентификатор заявки при отправке
//		* ДатаОтправки				- Дата
//		* ОписаниеОтвета			- Строка - описание состояния заявки полученное при обновлении статусов
//		* КодОтвета					- Строка - код состояния заявки полученное при обновлении статусов
//		* СтатусОтправки			- ПеречислениеСсылка.СтатусыОтправки
//
Функция СвойстваЗаявленияРегистрацииЮЛ(СсылкаПоиска) Экспорт
	
	Результат = СвойстваОтправкиРегистрацииЮЛ(СсылкаПоиска);
	Результат.Вставить("ЭлектроннаяПочта", "");
	Результат.Вставить("КодНО", "");
	Результат.Вставить("ВидДокумента", Неопределено);
	Результат.Вставить("Организация", Неопределено);
	Результат.Вставить("Файлы", Новый Массив);
	Результат.Вставить("СпособПредоставленияОтвета", Перечисления.СпособыПолученияОтветаНаЭлГосРегистрацию.НеПредоставлять);
	
	Возврат Результат;
	
КонецФункции

// Ищет последнюю отправку по указанному предмету отправки
//
// Параметры:
//	ПредметОтправки - ДокументСсылка
//
// Возвращаемое значение:
//	СправочникСсылка.ОтправкиРегистрацияЮЛ
//
Функция ПоследняяОтправкаПоПредмету(ПредметОтправки) Экспорт
	
	Результат = Неопределено;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОтправкиРегистрацияЮЛ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ОтправкиРегистрацияЮЛ КАК ОтправкиРегистрацияЮЛ
	|ГДЕ
	|	НЕ ОтправкиРегистрацияЮЛ.ПометкаУдаления
	|	И ОтправкиРегистрацияЮЛ.ПредметОтправки = &ПредметОтправки
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправкиРегистрацияЮЛ.ДатаОтправки УБЫВ";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПредметОтправки", ПредметОтправки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Возвращает информацию о текущем состоянии отправленного заявления
//
// Параметры:
//	ОтправкаСсылка 			- СправочникСсылка.ОтправкиРегистрацияЮЛ
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Отправлено 		- Структура - подробнее в ТекущееСостояниеЭтапа()
//		* ПринятВОбработку 	- Структура - подробнее в ТекущееСостояниеЭтапа()
//		* Рассмотрение		- Структура - подробнее в ТекущееСостояниеЭтапа()
//
Функция СформироватьЭтапыОтправки(ОтправкаСсылка) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Отправлено", ТекущееСостояниеЭтапа("Отправка", НСтр("ru = 'Пакет документов заявления.';
																			|en = 'Пакет документов заявления.'"), Истина));
	Результат.Вставить("ПринятВОбработку", ТекущееСостояниеЭтапа("Обработка", НСтр("ru = 'Подтверждение приема заявления.';
																					|en = 'Подтверждение приема заявления.'")));
	Результат.Вставить("Рассмотрение", ТекущееСостояниеЭтапа("Рассмотрения", НСтр("ru = 'Решение рассмотрения заявления. ';
																					|en = 'Решение рассмотрения заявления. '")));
	Результат.Вставить("ИдентификаторНаСервере", ""); 
	
	ЧитаемыеФайлы = Новый Массив;
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.ms_excel);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.ms_word);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.jpeg);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.tiff);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.odf_spreadsheet);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.odf_text);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.pdf);
	ЧитаемыеФайлы.Добавить(Перечисления.ТипыСодержимогоФайлов.rtf);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.КодОтвета КАК КодОтвета,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ОписаниеОтвета КАК ОписаниеОтвета,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ИдентификаторОтвета КАК ИдентификаторОтвета,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ТипСодержимого КАК ТипСодержимого,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.НазначениеФайла КАК НазначениеФайла,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.НомерТранзакции КАК НомерТранзакции,
	|	ВЫБОР
	|		КОГДА ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ТипСодержимого В (&ЧитаемыеФайлы)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Читаемые
	|ИЗ
	|	Справочник.ОтправкиРегистрацияЮЛПрисоединенныеФайлы КАК ОтправкиРегистрацияЮЛПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ПометкаУдаления
	|	И ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ВладелецФайла = &ОтправкаСсылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Читаемые,
	|	ДатаСоздания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтправкиРегистрацияЮЛ.КодОтвета КАК КодОтвета,
	|	ОтправкиРегистрацияЮЛ.ИдентификаторНаСервере КАК ИдентификаторЗаявления,
	|	ОтправкиРегистрацияЮЛ.ОписаниеОтвета КАК ОписаниеОтвета,
	|	ОтправкиРегистрацияЮЛ.СтатусОтправки КАК СтатусОтправки
	|ИЗ
	|	Справочник.ОтправкиРегистрацияЮЛ КАК ОтправкиРегистрацияЮЛ
	|ГДЕ
	|	ОтправкиРегистрацияЮЛ.Ссылка = &ОтправкаСсылка";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтправкаСсылка", ОтправкаСсылка);
	Запрос.УстановитьПараметр("ЧитаемыеФайлы", ЧитаемыеФайлы);
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	ТаблицаФайлов = ПакетЗапросов[0].Выгрузить();
	ВыборкаОтправки = ПакетЗапросов[1].Выбрать();
	МассивПротоколов = Новый Массив;
	ЕстьФайлы = Ложь;
	
	Если НЕ ВыборкаОтправки.Следующий() Тогда
		Возврат Результат;
	КонецЕсли;
	
	Результат.ИдентификаторНаСервере = ВыборкаОтправки.ИдентификаторЗаявления;
	
	Для каждого СтрокаТаблица Из ТаблицаФайлов Цикл
		
		Если СтрокаТаблица.НомерТранзакции = "01" Тогда
			ОбновитьСостояниеЭтапа(Результат.Отправлено, ВыборкаОтправки.ИдентификаторЗаявления, СтрокаТаблица);
		ИначеЕсли СтрокаТаблица.НомерТранзакции = "02" Тогда
			ОбновитьСостояниеЭтапа(Результат.ПринятВОбработку, СтрокаТаблица.ИдентификаторОтвета, СтрокаТаблица);
			ЕстьФайлы = Истина;
		ИначеЕсли СтрокаТаблица.НомерТранзакции = "03"
			ИЛИ СтрокаТаблица.НомерТранзакции = "04" Тогда
			ОбновитьСостояниеЭтапа(Результат.Рассмотрение, СтрокаТаблица.ИдентификаторОтвета, СтрокаТаблица);
			ЕстьФайлы = Истина;
		ИначеЕсли СтрокаТаблица.НомерТранзакции = "05" Тогда
			ОбновитьСостояниеЭтапа(Результат.Рассмотрение, СтрокаТаблица.ИдентификаторОтвета, СтрокаТаблица);
			Результат.Рассмотрение.Успешно = Ложь;
			Результат.Рассмотрение.Приостановлено = Истина;
			ЕстьФайлы = Истина;
		Иначе
			МассивПротоколов.Добавить(СтрокаТаблица);
			ЕстьФайлы = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивПротоколов.Количество() > 0 Тогда
		
		Если НЕ Результат.Отправлено.Выполнен Тогда
			ТекущийЭтап = Результат.Отправлено;
		ИначеЕсли НЕ Результат.ПринятВОбработку.Выполнен Тогда
			ТекущийЭтап = Результат.ПринятВОбработку;
		Иначе
			ТекущийЭтап = Результат.Рассмотрение;
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из МассивПротоколов Цикл
			ОбновитьСостояниеЭтапа(ТекущийЭтап, СтрокаМассива.ИдентификаторОтвета, СтрокаМассива);
		КонецЦикла;
		ТекущийЭтап.Успешно = Ложь;
		
	КонецЕсли;
	
	Если НЕ ЕстьФайлы И ВыборкаОтправки.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят Тогда
		ИнформацияФайла = Новый Структура;
		ИнформацияФайла.Вставить("Ссылка", Неопределено);
		ИнформацияФайла.Вставить("ДатаСоздания", Неопределено);
		ИнформацияФайла.Вставить("ОписаниеОтвета", ВыборкаОтправки.ОписаниеОтвета);
		ИнформацияФайла.Вставить("КодОтвета", ВыборкаОтправки.КодОтвета);
		ИнформацияФайла.Вставить("ТипСодержимого", Неопределено);
		ОбновитьСостояниеЭтапа(Результат.Отправлено, ВыборкаОтправки.ИдентификаторЗаявления, ИнформацияФайла);
		Результат.Отправлено.Успешно = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу этапов для отображения в общих механизмах подсистемы
//
// Параметры:
//	ПредметОтправки 			- СправочникСсылка.ОтправкиРегистрацияЮЛ
//	ДополнительныеПараметры     - Структура - может содержать поле "Отправка"
//
// Возвращаемое значение:
//	ТаблицаЗначений
//
Функция ТаблицаЭтаповОтправки(ПредметОтправки, ДополнительныеПараметры) Экспорт
	
	НачальныйСтатус = ПредставлениеСтатусаОтправки(ПредметОтправки);
	ТипУведомления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредметОтправки, "ВидУведомления", Истина);
	
	ТаблицаЭтаповОтправки = ЗаготовкаТаблицыЭтаповОтправки();
	
	// определяем последнюю отправку
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("Отправка") Тогда
		ОтправкаСсылка = ДополнительныеПараметры.Отправка;
	Иначе
		ОтправкаСсылка =  ПоследняяОтправкаПоПредмету(ПредметОтправки);
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НачальныйСтатус;
	СтрокаЭтапа.ТекстСтатуса				= НачальныйСтатус;
	СтрокаЭтапа.Дата						= Дата(1,1,1);
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Не отправлено';
													|en = 'Не отправлено'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= Неопределено;
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	Если НЕ ЗначениеЗаполнено(ОтправкаСсылка) Тогда
		Возврат ТаблицаЭтаповОтправки;
	КонецЕсли;
	
	ВсеСтатусы = СформироватьЭтапыОтправки(ОтправкаСсылка);
	КодФНС = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОтправкаСсылка, "КодОрганаФНС", Истина);
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Отправлено в сервис';
													|en = 'Отправлено в сервис'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Отправлено в сервис';
													|en = 'Отправлено в сервис'");
	СтрокаЭтапа.Дата						= ВсеСтатусы.Отправлено.Дата;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается проверка заявления сервисом и перенаправление в регистрирующий орган';
													|en = 'Ожидается проверка заявления сервисом и перенаправление в регистрирующий орган'");
	СтрокаЭтапа.НаименованиеПротокола		= "";
	СтрокаЭтапа.Протокол					= Неопределено;
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
	СтрокаЭтапа.ЭтапПройден					= Истина;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Направлено в ИФНС';
													|en = 'Направлено в ИФНС'") + " " + КодФНС;
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Направлено в ИФНС';
													|en = 'Направлено в ИФНС'") + " " + КодФНС;
	СтрокаЭтапа.Дата						= ВсеСтатусы.ПринятВОбработку.Дата;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается прием заявления в обработку';
													|en = 'Ожидается прием заявления в обработку'");
	СтрокаЭтапа.НаименованиеПротокола		= ПредставлениеОтвета(ВсеСтатусы.ПринятВОбработку);
	СтрокаЭтапа.Протокол					= СтрокаЭтапа.НаименованиеПротокола;
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= ВсеСтатусы.ПринятВОбработку.Выполнен;
	
	Если ВсеСтатусы.ПринятВОбработку.Выполнен И НЕ ВсеСтатусы.ПринятВОбработку.Успешно Тогда
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Не принят';
														|en = 'Не принят'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Не принят';
														|en = 'Не принят'");
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Исправьте ошибки и отправьте заявление еще раз';
														|en = 'Исправьте ошибки и отправьте заявление еще раз'");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		
	ИначеЕсли ВсеСтатусы.ПринятВОбработку.Выполнен Тогда
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Принято ИФНС';
														|en = 'Принято ИФНС'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Принято ИФНС';
														|en = 'Принято ИФНС'");
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Заявление принято ИФНС';
														|en = 'Заявление принято ИФНС'");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНачат;
			
	КонецЕсли;
	
	СтрокаЭтапа = ТаблицаЭтаповОтправки.Добавить();
	СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Доставлено в ИФНС';
													|en = 'Доставлено в ИФНС'");
	СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Доставлено в ИФНС';
													|en = 'Доставлено в ИФНС'");
	СтрокаЭтапа.Дата						= ВсеСтатусы.Рассмотрение.Дата;
	СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Ожидается результат рассмотрения заявления';
													|en = 'Ожидается результат рассмотрения заявления'");
	СтрокаЭтапа.НаименованиеПротокола		= ПредставлениеРассмотрения(ВсеСтатусы.Рассмотрение);
	СтрокаЭтапа.Протокол					= СтрокаЭтапа.НаименованиеПротокола;
	СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ДокументооборотНеНачат;
	СтрокаЭтапа.ЭтапПройден					= ВсеСтатусы.Рассмотрение.Выполнен;
	
	Если ВсеСтатусы.Рассмотрение.Выполнен И НЕ ВсеСтатусы.Рассмотрение.Успешно Тогда
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Решение об отказе';
														|en = 'Решение об отказе'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Решение об отказе';
														|en = 'Решение об отказе'");
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Получен отказ в рассмотрении заявления';
														|en = 'Получен отказ в рассмотрении заявления'");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		
	ИначеЕсли ВсеСтатусы.Рассмотрение.Выполнен И ВсеСтатусы.Рассмотрение.Приостановлено Тогда
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Регистрация приостановлена';
														|en = 'Регистрация приостановлена'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Регистрация приостановлена';
														|en = 'Регистрация приостановлена'");
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Решение о приостановлении государственной регистрации';
														|en = 'Решение о приостановлении государственной регистрации'");
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ОтрицательныйРезультатДокументооборота;
		
	ИначеЕсли ВсеСтатусы.Рассмотрение.Выполнен Тогда
		СтрокаЭтапа.ТекстНадписи				= НСтр("ru = 'Изменение зарегистрировано';
														|en = 'Изменение зарегистрировано'");
		СтрокаЭтапа.ТекстСтатуса				= НСтр("ru = 'Изменение зарегистрировано';
														|en = 'Изменение зарегистрировано'");
		СтрокаЭтапа.КомментарийКСостоянию		= НСтр("ru = 'Заявление рассмотрено';
														|en = 'Заявление рассмотрено'");
		Если ТипУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР11001
			ИЛИ ТипУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ФормаР21001 Тогда
			СтрокаЭтапа.ТекстНадписи			= НСтр("ru = 'Предприятие зарегистрировано';
														|en = 'Предприятие зарегистрировано'");
			СтрокаЭтапа.ТекстСтатуса			= НСтр("ru = 'Предприятие зарегистрировано';
														|en = 'Предприятие зарегистрировано'");
		КонецЕсли;
		
		СтрокаЭтапа.СостояниеСдачиОтчетности	= Перечисления.СостояниеСдачиОтчетности.ПоложительныйРезультатДокументооборота;
			
	КонецЕсли;
	
	Возврат ТаблицаЭтаповОтправки;

КонецФункции

// Получает представление текущего статуса отправки
//
// Параметры:
//	ОтправкаСсылка - СправочникСсылка.ОтправкиРегистрацияЮЛ
//
// Возвращаемое значение:
//	Строка
//
Функция ПредставлениеСтатусаОтправки(ОтправкаСсылка) Экспорт
	
	ВыборкаЖОКО = РегистрыСведений.ЖурналОтправокВКонтролирующиеОрганы.Выбрать(Новый Структура("Ссылка", ОтправкаСсылка));
	Если ВыборкаЖОКО.Следующий() Тогда
		ТекСтатус = ВыборкаЖОКО.СтатусОтправки;
	КонецЕсли;

	Если ТекСтатус = Неопределено Тогда
		Возврат НСтр("ru = 'В работе';
					|en = 'В работе'");
	КонецЕсли;

	ТекСтатус = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1';
																			|en = '%1'"), ТекСтатус);

	СтатусыОбъектов =
		РегламентированнаяОтчетностьКлиентСервер.СтатусыОбъектовРеглОтчетностиПриРучномВводе(ОтправкаСсылка);

	Если СтатусыОбъектов.Найти(ТекСтатус) = Неопределено Тогда
		Возврат НСтр("ru = 'В работе';
					|en = 'В работе'");
	КонецЕсли;

	Возврат ТекСтатус;

КонецФункции

#КонецОбласти

#Область Прочие

// Проверяет возможность отправки / обмена с сервисом для указанной организации
//
// Параметры:
//	ОрганизацияСсылка - СправочникСсылка.Организации
//
// Возвращаемое значение:
//	Булево
//
Функция ИспользуетОбмен(ОрганизацияСсылка) Экспорт
	
	Возврат Истина;
	
КонецФункции

// Формируется файловый архив на основе переданных данных и помещает его во временное хранилище
//
// Параметры:
//	ОписаниеПакета - Структура - где "Ключ" имя папки, "Значение" массив из СправочникСсылка.ОтправкиРегистрацияЮЛПрисоединенныеФайлы (или другие).
//								Если передан ключ "Корень", то файлы помещаются вне папок
//
// Возвращаемое значение:
//	Структура - содержит поля
//		* Выполнено		- Булево - Истина, если функция успешно выполнена
//		* Ошибка		- Строка - описание ошибки, в случае если Выполнено = Ложь
//		* АдресФайла 	- Строка - адрес во временном хранилище
//
Функция ПодготовитьВыгрузкуФайлов(ОписаниеПакета) Экспорт
	
	Результат = ОтветСервисаПоУмолчанию(Ложь);
	
	ИмяВременногоКаталога = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяВременногоКаталога);       
	ПапкаФайлов = ИмяВременногоКаталога + ПолучитьРазделительПути();

	Для Каждого СтрокаКлюча Из ОписаниеПакета Цикл
		Если СтрокаКлюча.Ключ = "Корень" Тогда
			НоваяПапка = ПапкаФайлов;
		Иначе
			НоваяПапка = ПапкаФайлов + СтрокаКлюча.Ключ + ПолучитьРазделительПути();
		КонецЕсли;
		
		Для Каждого СтрокаМассива Из СтрокаКлюча.Значение Цикл
			СвойстваФайла = РаботаСФайлами.ДанныеФайла(СтрокаМассива);
			ИмяФайла = НоваяПапка + СвойстваФайла.ИмяФайла;
			ЗначениеФайла = ПолучитьИзВременногоХранилища(СвойстваФайла.СсылкаНаДвоичныеДанныеФайла);
			ЗначениеФайла.Записать(ИмяФайла);
		КонецЦикла;
		
	КонецЦикла;
	
	УпаковщикФайлов = Новый ЗаписьZipФайла();
	УпаковщикФайлов.Добавить(ПапкаФайлов + "*", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
	ДанныеАрхива = УпаковщикФайлов.ПолучитьДвоичныеДанные(, , МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный);
	
	УдалитьФайлы(ИмяВременногоКаталога);
	
	Результат.Выполнено = Истина;
	Результат.Вставить("АдресФайла", ДанныеАрхива);
	
	Возврат Результат;
	
КонецФункции

// Формирует описание основных объектов подсистемы.
//
// Возвращаемое значение:
//	Структура:
//		* ТипСправочникаОтправки - Тип
//
Функция ОписаниеОбъектовПодсистемы() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТипСправочникаОтправки", Тип("СправочникСсылка.ОтправкиРегистрацияЮЛ"));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ФизическаяПоддержкаRESTСервисов

// Преобразуется строку в формате в структуру или другое значение 1С
//
// Параметры:
//	СтрокаJSON 				- Строка
//	ПараметрыПреобразования - Неопределено, Структура
//
// Возвращаемое значение:
//	Структура, Массив
//	
Функция JsonВСтруктуру(СтрокаJSON, ПараметрыПреобразования = Неопределено)
	
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	
	Если ТипЗнч(ПараметрыПреобразования) = Тип("Структура")
		И ПараметрыПреобразования.Свойство("ИменаСвойствДляВосстановления")
		И ЗначениеЗаполнено(ПараметрыПреобразования.ИменаСвойствДляВосстановления) Тогда
		Объект = ПрочитатьJSON(
			ЧтениеJSON,,,, 
			"ПреобразоватьBase64ВДвоичныеДанные", 
			СервисКриптографииСлужебный, 
			ПараметрыПреобразования,
			ПараметрыПреобразования.ИменаСвойствДляВосстановления);
	Иначе
		Объект = ПрочитатьJSON(ЧтениеJSON);
	КонецЕсли;
	
	ЧтениеJSON.Закрыть();
	
	Возврат Объект;
	
КонецФункции

// Преобразует структуру, соответствие или иное значение в строку JSON. 
// Двоичные данные преобразуются в строки Base64.
//
// Параметры:
//  СтрокаJSON              - Структура, Соответствие - структура, которую необходимо преобразовать в строку JSON.
//
// Возвращаемое значение:
//	Строка - текстовое представление JSON 
//
Функция JsonИзСтруктуры(Объект)
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();
	
КонецФункции

// Описание данных, необходимых для поддержки работы multipart/form-data
//
// Возвращаемое значение:
//	Структура
//
Функция ОписаниеСоставнойЧастиТелаЗапроса()
	
	Результат = Новый Структура;
	Результат.Вставить("Описание", "");
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("Содержимое", Неопределено);
	
	Возврат Результат;
	
КонецФункции

// Производит подготовку данных, создает соединение, выполняет запрос к HTTP-сервису и 
// при необходимости преобразует результат запроса
//
// Параметры:
//	ПараметрыПодключения 	- Структура - содержит обязательные поля
//		* АдресСервиса		- Строка - адрес сервера для выполнения запроса
//		* ТочкаПодключения	- Строка - адрес на сервере для выполнения запроса
//		* Метод				- Строка - метод для выполнения запроса, например POST, GET
//		* Заголовки			- Соответствие - заголовки запроса
//		* КодОтвета			- Число - ожидаемый код успешного выполнения запроса, если 0, то не проверяется
//		* ТипТела			- Строка - правило формирования содержимого тела запроса, ожидаемые значения JSON, BodyURL, URL, BodyMulti
//		* ТипОтвета			- Строка - правило обработки результата запроса, ожидаемые значения BASE64, JSON, BIN, String
//	ПараметрыЗапроса 		- Структура, Строка - данные для подстановки в адрес запроса
//	ПараметрыТела			- Структура, Строка, ДвоичныеДанные - данные для подстановки в тело запроса
//
// Возвращаемое значение:
//	 Структура - содержит поля
//		* Выполнено 		- Булево
//		* Ошибка 			- Строка - текс ошибки
//		* КодСостояния 		- Число
//		* Результат 		- Произвольный
//		* Заголовки			- Соответствие
//
Функция ВыполнитьЗапросREST(ПараметрыПодключения, ПараметрыЗапроса = Неопределено, ПараметрыТела = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("КодСостояния", 0);
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Заголовки", Новый Соответствие);
	
	Путь = ПараметрыПодключения.ТочкаПодключения;
	ТипПараметров = ПараметрыПодключения.ТипТела;
	ТипОтвета = ПараметрыПодключения.ТипОтвета;
	
	СодержимоеЗапроса = "";
	СодержимоеТела = "";
	
	Если ЗначениеЗаполнено(ПараметрыТела) Тогда
		Если ТипПараметров = "BodyMulti" Тогда
			ПереводСтроки = Символы.ВК + Символы.ПС; 
			Разделитель = "------separator" + ПредставлениеГУИД();
			ПараметрыПодключения.Заголовки.Вставить("Content-Type", "multipart/form-data; boundary=" + Разделитель);
			ТелоЗапроса = Новый Массив;
			ДобавитьПредставлениеДанных(ТелоЗапроса, "--" + Разделитель);
			Для Каждого СтрокаКлюча Из ПараметрыТела Цикл
				ДобавитьПредставлениеДанных(ТелоЗапроса, ПереводСтроки);
				ДобавитьПредставлениеДанных(ТелоЗапроса, "Content-Disposition: form-data; " + СтрокаКлюча.Описание + ПереводСтроки);
				Для Каждого СтрокаЗаголовка Из СтрокаКлюча.Заголовки Цикл
					ДобавитьПредставлениеДанных(ТелоЗапроса, СтрокаЗаголовка.Ключ + ": " + СтрокаЗаголовка.Значение + ПереводСтроки);
				КонецЦикла;	
				ДобавитьПредставлениеДанных(ТелоЗапроса, ПереводСтроки);
				ДобавитьПредставлениеДанных(ТелоЗапроса, СтрокаКлюча.Содержимое);
				ДобавитьПредставлениеДанных(ТелоЗапроса, ПереводСтроки);
				ДобавитьПредставлениеДанных(ТелоЗапроса, "--" + Разделитель);
			КонецЦикла;
			ДобавитьПредставлениеДанных(ТелоЗапроса, "--" + ПереводСтроки);
			СодержимоеТела = СоединитьДвоичныеДанные(ТелоЗапроса);
		ИначеЕсли ТипПараметров = "URL" Тогда
			Для Каждого СтрокаКлюча Из ПараметрыТела Цикл
				СодержимоеТела = СодержимоеТела + ?(ПустаяСтрока(СодержимоеТела), "", "&");
				СодержимоеТела = СодержимоеТела + СтрокаКлюча.Ключ + "=" + СтрокаКлюча.Значение;
			КонецЦикла;
		ИначеЕсли ТипПараметров = "JSON" Тогда
			СодержимоеТела = JsonИзСтруктуры(ПараметрыТела);
		Иначе
			СодержимоеТела = ПараметрыТела;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыЗапроса) Тогда
		Для Каждого СтрокаКлюча Из ПараметрыЗапроса Цикл
			СодержимоеЗапроса = СодержимоеЗапроса + ?(ПустаяСтрока(СодержимоеЗапроса), "", "&");
			СодержимоеЗапроса = СодержимоеЗапроса + СтрокаКлюча.Ключ + "=" + СтрокаКлюча.Значение;
		КонецЦикла;
		Путь = Путь + "?" + СодержимоеЗапроса;
	КонецЕсли;

	Попытка 
		Соединение = ДокументооборотСКО.УстановитьСоединениеССерверомИнтернета(ПараметрыПодключения.АдресСервиса);
		Запрос = Новый HTTPЗапрос(Путь, ПараметрыПодключения.Заголовки);
		
		РазмерТела = 0;
		Если ЗначениеЗаполнено(СодержимоеТела) И ТипЗнч(СодержимоеТела) = Тип("ДвоичныеДанные") Тогда
			РазмерТела = СодержимоеТела.Размер();
			Запрос.УстановитьТелоИзДвоичныхДанных(СодержимоеТела);
		ИначеЕсли ЗначениеЗаполнено(СодержимоеТела) Тогда
			РазмерТела = СтрДлина(СодержимоеТела);
			Запрос.УстановитьТелоИзСтроки(СодержимоеТела);
		КонецЕсли;	
		
		ОтветСервиса = Соединение.ВызватьHTTPМетод(ПараметрыПодключения.Метод, Запрос);
		
		ТелоКакСтрока = ОтветСервиса.ПолучитьТелоКакСтроку();
		
		Результат.Выполнено = ОтветСервиса.КодСостояния = ПараметрыПодключения.КодОтвета ИЛИ ПараметрыПодключения.КодОтвета = 0;
		Результат.КодСостояния = ОтветСервиса.КодСостояния;
		Результат.Заголовки = ОтветСервиса.Заголовки;
		
		Если НЕ Результат.Выполнено Тогда
			Результат.Ошибка = ТелоКакСтрока;
		ИначеЕсли ТипОтвета = "JSON" Тогда
			Результат.Результат = JsonВСтруктуру(ТелоКакСтрока);
		ИначеЕсли ТипОтвета = "BIN" Тогда
			Результат.Результат = ОтветСервиса.ПолучитьТелоКакДвоичныеДанные();
		ИначеЕсли ТипОтвета = "BASE64" Тогда
			Результат.Результат = Base64Значение(ТелоКакСтрока);
		ИначеЕсли ТипОтвета = "String" Тогда
			Результат.Результат = ТелоКакСтрока;
		Иначе
			Результат.Результат = ТелоКакСтрока;
		КонецЕсли;
		
	Исключение
		ДанныеОшибки = ИнформацияОбОшибке();
		ПодробныйТекстОшибки = ПодробноеПредставлениеОшибки(ДанныеОшибки) + Символы.ПС
						+ ПараметрыПодключения.АдресСервиса + ПараметрыПодключения.ТочкаПодключения + Символы.ПС
						+ НСтр("ru = 'Путь адреса: ';
								|en = 'Путь адреса: '") + СтрДлина(Путь) + Символы.ПС
						+ НСтр("ru = 'Объем тела: ';
								|en = 'Объем тела: '") + РазмерТела + Символы.ПС
						+ НСтр("ru = 'Содержимое адреса: ';
								|en = 'Содержимое адреса: '") + Путь;
						
		ЗаписьЖурналаРегистрацииДляОшибки(ПодробныйТекстОшибки);
		Результат.Ошибка = КраткоеПредставлениеОшибки(ДанныеОшибки);
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции	

// Служебная функция для преобразования двоичных данных по формату Base64URL
//
// Параметры:
//  ЗначениеСтроки 		- Строка
//
// Возвращаемое значение:
//	Строка - преобразованное значение строки и закодированное в Base64URL
//
Функция Base64URL(ЗначениеСтроки)
	     
	НовоеЗначение = ПолучитьBase64СтрокуИзДвоичныхДанных(ЗначениеСтроки);
	НовоеЗначение = КодироватьСтроку(НовоеЗначение, СпособКодированияСтроки.КодировкаURL);
	
	Возврат НовоеЗначение;
	
КонецФункции

// Дополняет массив данных для поддержки режима multipart/form-data
//
// Параметры:
//	Накопитель 		- Массив
//	ТекущиеДанные   - Строка, ДвоичныеДанные
//
Процедура ДобавитьПредставлениеДанных(Накопитель, ТекущиеДанные)
	
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		ДобавитьДанные = ТекущиеДанные;
	Иначе
		ДобавитьДанные = ПолучитьДвоичныеДанныеИзСтроки(ТекущиеДанные, КодировкаТекста.UTF8);
	КонецЕсли;	
	
	Накопитель.Добавить(ДобавитьДанные);
	
КонецПроцедуры

Процедура ЗаписьЖурналаРегистрацииДляОшибки(ПодробныйТекстОшибки, ДанныеБазы = Неопределено)
	
	ИмяСобытия = НСтр("ru = 'Электронный документооборот с контролирующими органами. Работа с сервисом регистрации ФНС.';
						|en = 'Электронный документооборот с контролирующими органами. Работа с сервисом регистрации ФНС.'", ОбщегоНазначения.КодОсновногоЯзыка());
	
	ЗаписьЖурналаРегистрации(
		ИмяСобытия,
		УровеньЖурналаРегистрации.Ошибка,,
		ДанныеБазы,
		ПодробныйТекстОшибки);
	
КонецПроцедуры

#КонецОбласти

#Область ЛогическаяПоддержкаRESTСервисов

// Возвращает описание всех сервисов используемые в обработке заявления
//
// Возвращаемое значение:
//	Структура
//
Функция МетодыСервисаОбработкиЗаявления()
	
	Результат = Новый Структура;
	Результат.Вставить("СписокЗаявок", 		"getFileList;200;GET;regin/rs/file;;;JSON");
	Результат.Вставить("ОтправитьЗаявку", 	"uploadFile;201;POST;regin/rs/file;;BodyMulti;JSON");
	Результат.Вставить("ПолучитьЗаявку", 	"downloadFile;200;GET;regin/rs/file/%1;;;BIN");
	Результат.Вставить("ИнформацияОЗаявке", "getFileInfo;200;GET;regin/rs/file/%1/info;;;JSON");
	Результат.Вставить("СписокОтветов", 	"getReplyList;200;GET;regin/rs/file/%1/reply;;;JSON");
	Результат.Вставить("ФайлОтвета", 		"downloadReply;200;GET;regin/rs/file/%1/reply/%2;;;BIN");
	Результат.Вставить("ПлатежныйДокумент", "createPlatDoc;200;POST;regin/rs/gp;application/x-www-form-urlencoded;;BIN");
	Результат.Вставить("Подключение", 		"getAuthToken;200;GET;regin/rs/auth/token;;;JSON");
	Результат.Вставить("Авторизация", 		"signIn;200;POST;regin/rs/auth/signin;application/x-www-form-urlencoded;;JSON");
	
	// служебные адреса
	Результат.Вставить("ОписаниеСервиса", 	"https://service.nalog.ru/regin/rs/application.wadl");
	Результат.Вставить("АдресСервиса", 		"https://service.nalog.ru");
	Если ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("РегистрацияЮЛ", "ТестовыйСервер", Ложь) = Истина Тогда
		Результат.Вставить("АдресСервиса", 		"http://94.125.90.50:6336");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗапросСервисаРегистрации(ПараметрыПодключения, ПараметрыМетода = Неопределено, МассивСоставляющих = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("Результат", Неопределено);
	Результат.Вставить("Расположение", "");
	
	РезультатВыполнения = ВыполнитьЗапросREST(ПараметрыПодключения, ПараметрыМетода, МассивСоставляющих);
	СодержимоеОшибки = Неопределено;
	
	Если РезультатВыполнения.Выполнено Тогда
		Если ТипЗнч(РезультатВыполнения.Результат) = Тип("Структура") Тогда
			Результат.Выполнено = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатВыполнения.Результат, "STATUS", "") = "OK";
		Иначе	
			Результат.Выполнено = Истина;
		КонецЕсли;
		
		Если Результат.Выполнено Тогда
			Результат.Результат = РезультатВыполнения.Результат;
		Иначе
			СодержимоеОшибки = РезультатВыполнения.Результат;
		КонецЕсли;
		
		Результат.Расположение = ?(РезультатВыполнения.Заголовки["location"] <> Неопределено, РезультатВыполнения.Заголовки["location"], "");
		
	ИначеЕсли РезультатВыполнения.КодСостояния = 0 Тогда
		Результат.Ошибка = РезультатВыполнения.Ошибка;
		
	Иначе
		СодержимоеОшибки = РезультатВыполнения.Ошибка;
		
	КонецЕсли;
	
	Если СодержимоеОшибки <> Неопределено Тогда
		Результат.Ошибка = ОбработкаОшибкаСервисаРегистрации(ПараметрыПодключения, СодержимоеОшибки);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ОбработкаОшибкаСервисаРегистрации(ПараметрыПодключения, ТекстОшибкиСервиса)
	
	Результат = "";
	ДеталиОшибки = "";
	Попытка
		СодержимоеОшибки = JsonВСтруктуру(ТекстОшибкиСервиса);
		Результат = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СодержимоеОшибки, "STATUS", "") + Символы.ПС;
		ДеталиОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СодержимоеОшибки, "ERRORS");
		Если ДеталиОшибки = Неопределено Тогда
			ДеталиОшибки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СодержимоеОшибки, "ERROR");
		КонецЕсли;	
	Исключение
		ДеталиОшибки = ТекстОшибкиСервиса;
	КонецПопытки;	
	
	Если ТипЗнч(ДеталиОшибки) = Тип("Строка") Тогда
		Результат = Результат + ДеталиОшибки;
		
	ИначеЕсли ДеталиОшибки <> Неопределено Тогда
		Результат = Результат + JsonИзСтруктуры(ДеталиОшибки);
		
	КонецЕсли;
	
	Результат = СокрЛП(Результат);
	
	Если НЕ ПустаяСтрока(Результат) Тогда
		ПодробныйТекстОшибки = НСтр("ru = 'Ошибка выполнения метода';
									|en = 'Ошибка выполнения метода'") + Символы.ПС 
						+ Результат + Символы.ПС
						+ ПараметрыПодключения.АдресСервиса + ПараметрыПодключения.ТочкаПодключения;
		ЗаписьЖурналаРегистрацииДляОшибки(ПодробныйТекстОшибки);
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ПараметрыПодключенияСервисаРегистрации(ИмяМетода, ТокенБезопасности = Неопределено, Параметр1 = Неопределено, Параметр2 = Неопределено)
	
	ПараметрыПодключения = ПараметрыМетодаСервиса(ИмяМетода);
	
	Если ТокенБезопасности <> Неопределено Тогда
		ПараметрыПодключения.Заголовки.Вставить("Authorization", "RiToken " + ТокенБезопасности);
	КонецЕсли;
	
	Если Параметр2 <> Неопределено Тогда
		ПараметрыПодключения.ТочкаПодключения = СтрШаблон(ПараметрыПодключения.ТочкаПодключения, Параметр1, Параметр2);
	ИначеЕсли Параметр1 <> Неопределено Тогда
		ПараметрыПодключения.ТочкаПодключения = СтрШаблон(ПараметрыПодключения.ТочкаПодключения, Параметр1);
	КонецЕсли;	

	Возврат ПараметрыПодключения;
	
КонецФункции

Функция ПараметрыМетодаСервиса(ТочкаПодключения)
	
	ВсеТочкиПодключения = МетодыСервисаОбработкиЗаявления();
	ИнформацияОПодключении = ВсеТочкиПодключения[ТочкаПодключения];
	
	Если ИнформацияОПодключении = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не обнаружено подключение к сервису';
								|en = 'Не обнаружено подключение к сервису'") + " " + ИнформацияОПодключении;
	КонецЕсли;
	
	Результат = ПодготовитьПараметрыПодключенияКСервису(ВсеТочкиПодключения.АдресСервиса, ИнформацияОПодключении);
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьПараметрыПодключенияКСервису(АдресСервиса, ТочкаПодключения)
	
	ВсеПараметры = ПараметрыТочкиПодключения(ТочкаПодключения);
	
	Результат = Новый Структура;
	Результат.Вставить("АдресСервиса", АдресСервиса);
	Результат.Вставить("ТочкаПодключения", ВсеПараметры.АдресМетода);
	Результат.Вставить("Метод", ВсеПараметры.Метод);
	Результат.Вставить("Заголовки", Новый Соответствие);
	Результат.Вставить("КодОтвета", Число(ВсеПараметры.КодОтвета));
	Если ЗначениеЗаполнено(ВсеПараметры.Заголовок)  Тогда
		Результат.Заголовки.Вставить("Content-Type", ВсеПараметры.Заголовок);
	КонецЕсли;	
	
	Результат.Вставить("ТипТела", "URL");
	Если ВсеПараметры.Метод <> "GET" И ЗначениеЗаполнено(ВсеПараметры.ТипПараметра) Тогда
		Результат.Вставить("ТипТела", ВсеПараметры.ТипПараметра);
	ИначеЕсли ВсеПараметры.Метод <> "GET" Тогда
		Результат.Вставить("ТипТела", "JSON");
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(ВсеПараметры.ТипОтвета) Тогда
		Результат.Вставить("ТипОтвета", ВсеПараметры.ТипОтвета)
	Иначе
		Результат.Вставить("ТипОтвета", "JSON")
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыТочкиПодключения(ИнформацияОПодключении)
	
	Результат = Новый Структура;
	
	ДопустимыеПараметры = Новый Массив(7);
	ВсеПараметры = СтрРазделить(ИнформацияОПодключении, ";");
	
	Для Счетчик = 0 По Мин(ВсеПараметры.Количество(), ДопустимыеПараметры.Количество()) - 1 Цикл
		ДопустимыеПараметры[Счетчик] = ВсеПараметры[Счетчик];
	КонецЦикла;	
	
	Результат.Вставить("ИмяМетода", ДопустимыеПараметры[0]); // для информации
	Результат.Вставить("КодОтвета", ?(ЗначениеЗаполнено(ДопустимыеПараметры[1]), ДопустимыеПараметры[1], 0)); // код успешного ответа
	Результат.Вставить("Метод", ДопустимыеПараметры[2]); // HTTP метод
	Результат.Вставить("АдресМетода", ДопустимыеПараметры[3]);
	Результат.Вставить("Заголовок", ДопустимыеПараметры[4]);
	Результат.Вставить("ТипПараметра", ДопустимыеПараметры[5]); // Ожидаемые: JSON, BodyURL, URL, BodyMulti,    
	Результат.Вставить("ТипОтвета", ДопустимыеПараметры[6]); // Ожидаемые: BASE64, JSON, BIN, String 
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область РаботаСОтправкамиНаРегистрациюЮЛ

// Формирования массива с ответами для отправленного заявления
//
// Возвращаемое значение:
//	Массив - состоит из структур с полями
//		* ИдентификаторОтвета - Строка
//		* ИмяФайла - Строка
//		* РазмерФайла - Строка
//		* КодСостояния - Строка
//		* Описание - Строка
//		* РазмещениеФайла - Строка - ftp путь файла для скачивания
//
Функция ПодготовитьРеестрОтветовНаЗаявления(МассивОтветов)
	
	Результат = Новый Массив;
	
	Для Каждого СтрокаМассива Из МассивОтветов Цикл
		СтрокаОтвета = Новый Структура("FILE_NAME, FILE_SIZE, ID, STATE_CODE, STATE, Файл_SFTP");
		ЗаполнитьЗначенияСвойств(СтрокаОтвета, СтрокаМассива);
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ИдентификаторОтвета", XMLСтрока(СтрокаОтвета.ID));
		НоваяСтрока.Вставить("ИмяФайла", СтрокаОтвета.FILE_NAME);
		НоваяСтрока.Вставить("РазмерФайла", СтрокаОтвета.FILE_SIZE);
		НоваяСтрока.Вставить("КодСостояния", СтрокаОтвета.STATE_CODE);
		НоваяСтрока.Вставить("Описание", СтрокаОтвета.STATE);
		НоваяСтрока.Вставить("РазмещениеФайла", СтрокаОтвета.Файл_SFTP);
		Результат.Добавить(НоваяСтрока);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьОбъектОтправки(ОбъектОтправки)
	
	Удачно = Ложь;
	
	Если ОбъектОтправки.ПроверитьЗаполнение() Тогда
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ОтправкиРегистрацияЮЛ");
		Если НЕ ОбъектОтправки.ЭтоНовый() Тогда
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбъектОтправки.Ссылка);
		КонецЕсли;	
		
		Удачно = Истина;
		
		Попытка
			Блокировка.Заблокировать();
			ОбъектОтправки.Записать();
			
		Исключение
			ЗаписьЖурналаРегистрацииДляОшибки(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ОбъектОтправки.Ссылка);
			Удачно = Ложь;
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Удачно;
	
КонецФункции

Функция ПодготовитьОписаниеФайлов(ПолноеИмя, ВременныйКаталог)
	
	Результат = Новый Структура();
	Результат.Вставить("Выполнено", Ложь);
	Результат.Вставить("Получатель", "");
	Результат.Вставить("Отправитель", "");
	Результат.Вставить("ИдентификаторДокументооборота", "");
	Результат.Вставить("КодТранзакции", "");
	Результат.Вставить("ТипДокументооборота", "");
	Результат.Вставить("Файлы", Новый Массив);

	ТипДокументооборота = "";
	
	ТекущийДОМ = ПодготовитьДокументDOM(ПолноеИмя);
	
	Если ТекущийДОМ = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ВсеАтрибуты = ПолучитьВыборкуЭлементовDOM(ТекущийДОМ, "//ТрансИнф/@*");
	
	Для Каждого СтрокаМассива Из ВсеАтрибуты Цикл
		ИмяЭлемента = НРег(СтрокаМассива.Имя);
		
		Если ТождественностьИмени(ИмяЭлемента, "идентификаторДокументооборота") Тогда
			Результат.ИдентификаторДокументооборота = СтрокаМассива.Значение;	
		ИначеЕсли ТождественностьИмени(ИмяЭлемента, "кодТипаТранзакции") Тогда
			Результат.КодТранзакции = СтрокаМассива.Значение;	
		ИначеЕсли ТождественностьИмени(ИмяЭлемента, "типДокументооборота") Тогда
			Результат.ТипДокументооборота = СтрокаМассива.Значение;	
		ИначеЕсли ТождественностьИмени(ИмяЭлемента, "кодТипаДокументооборота") Тогда
			ТипДокументооборота = СтрокаМассива.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ВсеФайлы = ПолучитьВыборкуЭлементовDOM(ТекущийДОМ, "//документ");
	
	Для Каждого СтрокаМассива Из ВсеФайлы Цикл
		ВсеАтрибуты = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "@*");
		НовыйФайл = Новый Структура;
		НовыйФайл.Вставить("НазначениеФайла", Неопределено);
		НовыйФайл.Вставить("Расширение", "");
		НовыйФайл.Вставить("ИсходноеИмя", "");
		НовыйФайл.Вставить("ПолноеИмя", "");
		НовыйФайл.Вставить("Имя", "");
		НовыйФайл.Вставить("Зашифрован", Ложь);
		НовыйФайл.Вставить("Подпись", "");
		НовыйФайл.Вставить("Сжат", Ложь);
		
		Для Каждого СтрокаАтрибута Из ВсеАтрибуты Цикл
			ИмяЭлемента = НРег(СтрокаАтрибута.Имя);
			
			Если ТождественностьИмени(ИмяЭлемента, "кодТипаДокумента") Тогда
				НовыйФайл.НазначениеФайла = КодыТиповДокументов(СтрокаАтрибута.Значение, ТипДокументооборота);
			ИначеЕсли ТождественностьИмени(ИмяЭлемента, "типСодержимого") Тогда
				НовыйФайл.Расширение = СтрокаАтрибута.Значение;
			ИначеЕсли ТождественностьИмени(ИмяЭлемента, "исходноеИмяФайла") Тогда
				НовыйФайл.ИсходноеИмя = СтрокаАтрибута.Значение;
			ИначеЕсли ТождественностьИмени(ИмяЭлемента, "зашифрован") Тогда
				НовыйФайл.Зашифрован = СтрокаАтрибута.Значение = "true";
			ИначеЕсли ТождественностьИмени(ИмяЭлемента, "сжат") Тогда
				НовыйФайл.Сжат = СтрокаАтрибута.Значение = "true";
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаФайла = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "содержимое/@имяФайла");
		Если СтрокаФайла.Количество() = 1 Тогда
			НовыйФайл.Имя = СтрокаФайла[0].Значение;
			НовыйФайл.ПолноеИмя = ВременныйКаталог + НовыйФайл.Имя;
		КонецЕсли;
		
		СтрокаПодписи = ПолучитьВыборкуЭлементовDOM(СтрокаМассива, "подпись/@имяФайла");
		Если СтрокаПодписи.Количество() > 0 Тогда
			ФайлПодписи = ОбщегоНазначения.СкопироватьРекурсивно(НовыйФайл);
			ФайлПодписи.Расширение = "p7s";
			ФайлПодписи.Имя = СтрокаПодписи[0].Значение;
			ФайлПодписи.ПолноеИмя = ВременныйКаталог + ФайлПодписи.Имя;
			ФайлПодписи.ИсходноеИмя = ФайлПодписи.ИсходноеИмя + ".p7s";
			ФайлПодписи.НазначениеФайла = Перечисления.НазначенияФайловРегистрацииЮЛ.ЭлектроннаяПодпись;
			Результат.Файлы.Добавить(ФайлПодписи);
			
			НовыйФайл.Подпись = ФайлПодписи.Имя;
		КонецЕсли;
		
		Результат.Файлы.Добавить(НовыйФайл);
	КонецЦикла;
	
	Получатель = ПолучитьВыборкуЭлементовDOM(ТекущийДОМ, "//получатель/@идентификаторСубъекта");
	Отправитель = ПолучитьВыборкуЭлементовDOM(ТекущийДОМ, "//отправитель/@идентификаторСубъекта");
	
	Если Получатель.Количество() = 1 Тогда
		Результат.Получатель = Получатель[0].Значение;
	КонецЕсли;
	
	Если Отправитель.Количество() = 1 Тогда
		Результат.Отправитель = Отправитель[0].Значение;
	КонецЕсли;
	
	Результат.Выполнено = Результат.Файлы.Количество() > 0;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСодержимоеАрхива(ДанныеКонтейнера, РежимВосстановления = Неопределено)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("Ошибка", "");
	Результат.Вставить("Файлы", Новый Соответствие);
	Результат.Вставить("ВременныйКаталог", "");
	
	Если РежимВосстановления = Неопределено Тогда
		РежимВосстановления = РежимВосстановленияПутейФайловZIP.НеВосстанавливать;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДанныеКонтейнера) Тогда
		ДанныеКонтейнера = ПолучитьИзВременногоХранилища(ДанныеКонтейнера);
	КонецЕсли;
	
	Попытка
		ВременныйКаталог = ПолучитьИмяВременногоФайла() + ПредставлениеГУИД() + ПолучитьРазделительПути();
		СоздатьКаталог(ВременныйКаталог);
		
		ИмяФайлаАрхива = ВременныйКаталог + ПредставлениеГУИД() + ".zip";
		ДанныеКонтейнера.Записать(ИмяФайлаАрхива);
		
		ЧтениеZIP = Новый ЧтениеZipФайла(ИмяФайлаАрхива);
		ЧтениеZIP.ИзвлечьВсе(ВременныйКаталог, РежимВосстановления);
		РаспакованныеФайлы = НайтиФайлы(ВременныйКаталог, ПолучитьМаскуВсеФайлыСервера(), Истина);
		
		Для Каждого СтрокаМассива Из РаспакованныеФайлы Цикл
			ПолноеИмя = СтрЗаменить(СтрокаМассива.ПолноеИмя, ВременныйКаталог, "");
			ЭтоКаталог = СтрокаМассива.ЭтоКаталог();
			
			Если СтрокаМассива.ПолноеИмя = ИмяФайлаАрхива Тогда
				Продолжить;
			КонецЕсли;
			
			ТекущийКаталог = ПолучитьКаталогФайла(Результат.Файлы, ПолноеИмя, ЭтоКаталог);
			
			Если НЕ ЭтоКаталог Тогда
				ТекущийКаталог.Вставить(СтрокаМассива.Имя, СтрокаМассива);
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.ВременныйКаталог = ВременныйКаталог;
		
	Исключение
		Результат.Выполнено = Ложь;
		Результат.Ошибка = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Попытка
		Файл = Новый Файл(ВременныйКаталог);
		
		Если НЕ Результат.Выполнено И Файл.Существует() Тогда
			УдалитьФайлы(ВременныйКаталог);
		КонецЕсли;
		
	Исключение
		Результат.Ошибка = Результат.Ошибка + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьКаталогФайла(ВсеКаталоги, ПолноеИмя, ЭтоКаталог)
	
	МассивПутей = СтрРазделить(ПолноеИмя, ПолучитьРазделительПути(), Ложь);
	
	Если НЕ ЭтоКаталог Тогда
		МассивПутей.Удалить(МассивПутей.Количество() - 1);
	КонецЕсли;
	
	ТекущийУровень = ВсеКаталоги;
	Для Счетчик = 0 По МассивПутей.Количество() - 1 Цикл
		ИмяКаталога = МассивПутей[0];
		НашлиКаталог = ТекущийУровень[ИмяКаталога];
		Если НашлиКаталог = Неопределено Тогда
			НашлиКаталог = Новый Соответствие();
			ТекущийУровень.Вставить(ИмяКаталога, НашлиКаталог);
		КонецЕсли;
		
		ТекущийУровень = НашлиКаталог;
		
	КонецЦикла;
	
	Возврат ТекущийУровень;
	
КонецФункции

Функция ПодготовитьДокументDOM(СсылкаНаДанные)
	
	ЭтоФайл = Ложь;
	ТекущиеДанные = СсылкаНаДанные;
	Если ТипЗнч(СсылкаНаДанные) = Тип("ДвоичныеДанные") Тогда
		ТекущиеДанные = СсылкаНаДанные;
	ИначеЕсли ЭтоАдресВременногоХранилища(СсылкаНаДанные) Тогда
		ТекущиеДанные = ПолучитьИзВременногоХранилища(СсылкаНаДанные);
	ИначеЕсли ТипЗнч(СсылкаНаДанные) = Тип("Строка") И НайтиФайлы(СсылкаНаДанные).Количество() > 0 Тогда
		ЭтоФайл = Истина;
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	Если ТипЗнч(ТекущиеДанные) = Тип("ДвоичныеДанные") Тогда
		БуферДанных = ПолучитьБуферДвоичныхДанныхИзДвоичныхДанных(ТекущиеДанные);
		ЧтениеXML.ОткрытьПоток(Новый ПотокВПамяти(БуферДанных));
	ИначеЕсли ЭтоФайл Тогда
		ЧтениеXML.ОткрытьФайл(ТекущиеДанные);
	Иначе	
		ЧтениеXML.УстановитьСтроку(ТекущиеДанные);
	КонецЕсли;
	
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM  = ПостроительDOM.Прочитать(ЧтениеXML);
	
	Возврат ДокументDOM;
	
КонецФункции

Функция ПолучитьВыборкуЭлементовDOM(УзелВладелец, ИмяЭлемента)
	
	Результат = Новый Массив;

	ДокументВладелец = УзелВладелец.ДокументВладелец;
	РазыменовательИмен = Новый РазыменовательПространствИменDOM(ДокументВладелец);
	НашлиЭлементы = ДокументВладелец.ВычислитьВыражениеXPath(ИмяЭлемента, УзелВладелец, РазыменовательИмен);
	
	ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	Пока ОчереднойЭлемент <> Неопределено Цикл
		Результат.Добавить(ОчереднойЭлемент);
		ОчереднойЭлемент = НашлиЭлементы.ПолучитьСледующий();
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

Функция ТождественностьИмени(ТекущееИмя, ЭталонноеИмя)
	
	Возврат НРег(ТекущееИмя) = НРег(ЭталонноеИмя);
	
КонецФункции

Функция ПредставлениеГУИД()
	
	Возврат СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
	
КонецФункции

Функция КодыТиповДокументов(ТекущийКод, ТипДокументооборота = "")
	
	ВсеКоды = Новый Соответствие;
	ВсеКоды.Вставить("01_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеИП);
	ВсеКоды.Вставить("01_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеЮЛ);
	ВсеКоды.Вставить("02_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеИПФормат);
	ВсеКоды.Вставить("02_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеЮЛФормат);
	ВсеКоды.Вставить("03", Перечисления.НазначенияФайловРегистрацииЮЛ.ПриложенныйДокумент);
	ВсеКоды.Вставить("04", Перечисления.НазначенияФайловРегистрацииЮЛ.ПДГоспошлина);
	ВсеКоды.Вставить("05", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеУСН);
	ВсеКоды.Вставить("06", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеУСНФормат);
	ВсеКоды.Вставить("07_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.ОписьДокументовИП);
	ВсеКоды.Вставить("07_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.ОписьДокументовЮЛ);
	ВсеКоды.Вставить("08", Перечисления.НазначенияФайловРегистрацииЮЛ.ГПформат);
	ВсеКоды.Вставить("09", Перечисления.НазначенияФайловРегистрацииЮЛ.УчредительныйДокумент);
	ВсеКоды.Вставить("10", Перечисления.НазначенияФайловРегистрацииЮЛ.ИзмененияУчредительныйДокумент);
	ВсеКоды.Вставить("11", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеПатент);
	ВсеКоды.Вставить("12", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеПатентФормат);
	ВсеКоды.Вставить("13", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеЕСХН);
	ВсеКоды.Вставить("14", Перечисления.НазначенияФайловРегистрацииЮЛ.ЗаявлениеЕСХНФормат);
	ВсеКоды.Вставить("21", Перечисления.НазначенияФайловРегистрацииЮЛ.РешениеЦБРФ);
	ВсеКоды.Вставить("22", Перечисления.НазначенияФайловРегистрацииЮЛ.РешениеМинюста);
	ВсеКоды.Вставить("31", Перечисления.НазначенияФайловРегистрацииЮЛ.РаспискаПриемДокум);
	ВсеКоды.Вставить("32", Перечисления.НазначенияФайловРегистрацииЮЛ.РешениеОбОтказе);
	ВсеКоды.Вставить("35_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.СвидетельствоУчетЮЛ);
	ВсеКоды.Вставить("35_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.СвидетельствоУчетФЛ);
	ВсеКоды.Вставить("36", Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеУчетИП);
	ВсеКоды.Вставить("37_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеСнятииУчетЮЛ);
	ВсеКоды.Вставить("37_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеСнятииУчетИП);
	ВсеКоды.Вставить("38_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.ВыпискаЗапЕГРЮЛ);
	ВсеКоды.Вставить("38_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.ВыпискаЗапЕГРИП);
	ВсеКоды.Вставить("39", Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеУчетЮЛ);
	ВсеКоды.Вставить("41_ЮЛ", Перечисления.НазначенияФайловРегистрацииЮЛ.ВыпискаЕГРЮЛФормат);
	ВсеКоды.Вставить("41_ИП", Перечисления.НазначенияФайловРегистрацииЮЛ.ВыпискаЕГРИПФормат);
	ВсеКоды.Вставить("42", Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеБезРасм);
	ВсеКоды.Вставить("51", Перечисления.НазначенияФайловРегистрацииЮЛ.Патент);
	ВсеКоды.Вставить("52", Перечисления.НазначенияФайловРегистрацииЮЛ.ПатентОтказ);
	ВсеКоды.Вставить("53", Перечисления.НазначенияФайловРегистрацииЮЛ.ИнфПисьмоНО);
	ВсеКоды.Вставить("43", Перечисления.НазначенияФайловРегистрацииЮЛ.РешениеОПриостановлении);
	
	Результат = ВсеКоды[ТекущийКод];
	Если Результат = Неопределено Тогда
		Результат = ВсеКоды[ТекущийКод + "_" + ТипДокументооборота];
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Результат = Перечисления.НазначенияФайловРегистрацииЮЛ.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьСтатусОтправкиРегистрацииЮЛ(ПредметОтправки, СтатусОтправки, ОснованиеСтатуса)
	
	Если ЗначениеЗаполнено(СтатусОтправки) Тогда
		ЗаписьРегистра = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект = ПредметОтправки;
		ЗаписьРегистра.Статус = СтатусОтправки;
		ЗаписьРегистра.Основание = ОснованиеСтатуса;
		ЗаписьРегистра.Записать(Истина);
	Иначе
		ЗаписьРегистра = РегистрыСведений.СтатусыОтправки.СоздатьМенеджерЗаписи();
		ЗаписьРегистра.Объект = ПредметОтправки;
		ЗаписьРегистра.Прочитать();
		Если ЗаписьРегистра.Выбран() Тогда
			ЗаписьРегистра.Удалить();
		КонецЕсли;
	КонецЕсли;
	
	// вызываем переопределяемую процедуру отработки изменения статуса отправки
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиВызовСервераПереопределяемый.ПриИзмененииСтатусаОтправкиДокумента(ПредметОтправки, СтатусОтправки);
	ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьУведомлениеОСпецрежимахНалогообложенияВРегистрЖурналОтправокВКонтролирующиеОрганы(ПредметОтправки);
	
КонецПроцедуры

Функция ТекущееСостояниеЭтапа(ИмяЭтапа, ЗаголовокОжидания, Отправка = Ложь)
	
	СостояниеЭтапа = Новый Структура;
	СостояниеЭтапа.Вставить("Выполнен", Ложь);
	СостояниеЭтапа.Вставить("Идентификатор", "");
	СостояниеЭтапа.Вставить("Файлы", Новый Массив);
	СостояниеЭтапа.Вставить("Успешно", Ложь);
	СостояниеЭтапа.Вставить("Приостановлено", Ложь);
	СостояниеЭтапа.Вставить("Дата", '00010101');
	СостояниеЭтапа.Вставить("Описание", "");
	СостояниеЭтапа.Вставить("Наименование", ЗаголовокОжидания);
	СостояниеЭтапа.Вставить("КодОтвета", "");
	СостояниеЭтапа.Вставить("Отправка", Отправка);
	СостояниеЭтапа.Вставить("Протокол", Неопределено);
	СостояниеЭтапа.Вставить("Имя", ИмяЭтапа);
	
	Возврат СостояниеЭтапа;
	
КонецФункции

Функция РеестрКодовРегистрацииЮЛ()
	
	// 0 - Успешная регистрация
	// 1 - Ошибка
	// 2 - Информация
	
	Результат = Новый Соответствие();
	
	Реестр = Новый Соответствие();
	Реестр.Вставить("10", "2,Отправлено,0,Заявка поставлена в очередь на обработку");
	Реестр.Вставить("11", "1,Отправлено,0,Не пройдена проверка ЭЦП");
	Реестр.Вставить("12", "1,Отправлено,0,Сведения не прошли логический контроль");
	Реестр.Вставить("13", "1,ПринятВОбработку,0,Сведения о гражданстве и виде регистрации на территории Российской Федерации, указанные в заявлении, не удовлетворяют условиям работы сервиса");
	Реестр.Вставить("14", "1,ПринятВОбработку,0,Для повторного получения свидетельства о постановке на учет необходимо обратиться в налоговый орган лично");
	Реестр.Вставить("15", "2,ПринятВОбработку,0,Осуществляется проверка сведений в ФМС");
	Реестр.Вставить("16", "1,ПринятВОбработку,0,Сведения о паспортных данных , указанные в заявление о постановке на учет, не прошли проверку в ФМС России");
	Реестр.Вставить("17", "1,ПринятВОбработку,0,Сведения о месте жительства, указанные в заявление о постановке на учет, не прошли проверку в ФМС России");
	Реестр.Вставить("18", "1,ПринятВОбработку,0,Не поступил ответ от ФМС");
	Реестр.Вставить("19", "2,ПринятВОбработку,0,Заявление готово к передаче в ИФНС");
	Реестр.Вставить("20", "1,ПринятВОбработку,0,Заявка не может быть выполнена");
	Реестр.Вставить("21", "1,ПринятВОбработку,0,Заявка не может быть выполнена по техническим причинам");
	Реестр.Вставить("23", "1,ПринятВОбработку,0,Срок жизни заявки истек");
	Реестр.Вставить("24", "1,ПринятВОбработку,0,Не поступил ответ от ФМС");
	Реестр.Вставить("25", "1,ПринятВОбработку,0,Заявка предназначена для другого регистрирующего органа");
	Реестр.Вставить("30", "2,Отправлено,0,Заявка принята к исполнению");
	Реестр.Вставить("40", "1,Рассмотрение,1,Принято решение об отказе в регистрации");
	Реестр.Вставить("48", "1,Рассмотрение,1,Принято решение о приостановлении государственной регистрации");
	Реестр.Вставить("50", "2,ПринятВОбработку,1,Запись о регистрации внесена в реестр");
	Реестр.Вставить("51", "0,Рассмотрение,1,Заявка выполнена, свидетельство в электронном виде направлено");
	Реестр.Вставить("52", "0,Рассмотрение,1,Заявка выполнена, свидетельство направлено заказным письмом");
	Реестр.Вставить("53", "1,ПринятВОбработку,1,Заявка не может быть исполнена. Сведения об адресе регистрации по месту жительства, указанные в заявлении, не подтверждены ФМС России");
	Реестр.Вставить("99", "1,Отправлено,0,Контейнер загружен не полностью. Повторите загрузку.");
	
	Для Каждого СтрокаКлюча Из Реестр Цикл
		МассивДанных = СтрРазделить(СтрокаКлюча.Значение, ",");
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("ТипКода", МассивДанных[0]);
		НоваяСтрока.Вставить("Этап", МассивДанных[1]);
		НоваяСтрока.Вставить("Транзакция", МассивДанных[2]);
		НоваяСтрока.Вставить("Описание", МассивДанных[3]);
		Результат.Вставить(СтрокаКлюча.Ключ, НоваяСтрока);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьТипФайла(РасширениеФайла)
	
	РеестрРасширений = Новый Соответствие;
	РеестрРасширений.Вставить("zip", Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка());
	РеестрРасширений.Вставить("pdf", Перечисления.ТипыСодержимогоФайлов.pdf);
	РеестрРасширений.Вставить("jpeg", Перечисления.ТипыСодержимогоФайлов.jpeg);
	РеестрРасширений.Вставить("jpg", Перечисления.ТипыСодержимогоФайлов.jpeg);
	РеестрРасширений.Вставить("xml", Перечисления.ТипыСодержимогоФайлов.xml);
	РеестрРасширений.Вставить("doc", Перечисления.ТипыСодержимогоФайлов.ms_word);
	РеестрРасширений.Вставить("docx", Перечисления.ТипыСодержимогоФайлов.ms_word);
	РеестрРасширений.Вставить("xls", Перечисления.ТипыСодержимогоФайлов.ms_excel);
	РеестрРасширений.Вставить("xlsx", Перечисления.ТипыСодержимогоФайлов.ms_excel);
	РеестрРасширений.Вставить("rtf", Перечисления.ТипыСодержимогоФайлов.rtf);
	РеестрРасширений.Вставить("odf", Перечисления.ТипыСодержимогоФайлов.odf_text);
	РеестрРасширений.Вставить("sgn", Перечисления.ТипыСодержимогоФайлов.sgn);
	РеестрРасширений.Вставить("p7s", Перечисления.ТипыСодержимогоФайлов.sgn);
	РеестрРасширений.Вставить("tiff", Перечисления.ТипыСодержимогоФайлов.tiff);
	
	Результат = РеестрРасширений[НРег(РасширениеФайла)]; 
	Если Результат = Неопределено Тогда
		Результат = Перечисления.ТипыСодержимогоФайлов.ПустаяСсылка();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеестрПолученныхОтветов(ОтправкаСсылка)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ИдентификаторОтвета КАК ИдентификаторОтвета,
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ИсходноеИмяФайла КАК ИсходноеИмяФайла
	|ИЗ
	|	Справочник.ОтправкиРегистрацияЮЛПрисоединенныеФайлы КАК ОтправкиРегистрацияЮЛПрисоединенныеФайлы
	|ГДЕ
	|	НЕ ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ПометкаУдаления
	|	И ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ВладелецФайла = &ОтправкаСсылка
	|	И ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ИдентификаторОтвета <> """"
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОтправкиРегистрацияЮЛПрисоединенныеФайлы.ДатаСоздания";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОтправкаСсылка", ОтправкаСсылка);
	ТаблицаОтветов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаОтветов;
	
КонецФункции

Процедура ОбновитьСостояниеЭтапа(СостояниеЭтапа, ИдентификаторЭтапа, ИнформацияФайла)
	
	СостояниеЭтапа.Выполнен = Истина;
	СостояниеЭтапа.Успешно = Истина;
	СостояниеЭтапа.Идентификатор = ?(ИдентификаторЭтапа <> Неопределено, ИдентификаторЭтапа, СостояниеЭтапа.Идентификатор);
	СостояниеЭтапа.Дата = ?(ИнформацияФайла.ДатаСоздания <> Неопределено, ИнформацияФайла.ДатаСоздания, СостояниеЭтапа.Дата);
	СостояниеЭтапа.Описание = ?(ИнформацияФайла.ОписаниеОтвета <> Неопределено, ИнформацияФайла.ОписаниеОтвета, СостояниеЭтапа.Описание);
	СостояниеЭтапа.КодОтвета = ?(ИнформацияФайла.КодОтвета <> Неопределено, ИнформацияФайла.КодОтвета, СостояниеЭтапа.КодОтвета);
	
	Если ЗначениеЗаполнено(ИнформацияФайла.Ссылка) Тогда
		СостояниеЭтапа.Файлы.Добавить(ИнформацияФайла.Ссылка);
	КонецЕсли;	
	
КонецПроцедуры

// Отражает статус ответа в отправке
//
// Параметры:
//	СвойствоОтвета - Структура - см. СервисРегистрацииФНССписокОтветов
//
// Возвращаемое значение:
//	 СправочникСсылка.ОтправкиРегистрацияЮЛПрисоединенныеФайлы
//
Функция ОбновитьСтатусЗаявкиРегистрацииЮЛ(СвойстваОтправки, СвойствоОтвета, ТранспортныйКонтейнер)
	
	КомпонентыИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(СвойствоОтвета.ИмяФайла);
	РасширениеФайлаБезТочки = ВРег(Сред(КомпонентыИмениФайла.Расширение, 2));
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Истина);
	Результат.Вставить("СтатусОтправки", СвойстваОтправки.СтатусОтправки);
	Результат.Вставить("Файлы", Новый Массив);
	
	РеестрКодов = РеестрКодовРегистрацииЮЛ();
	АнализКода = РеестрКодов[СвойствоОтвета.КодСостояния];
	СвойстваФайла = СвойствоОтвета.ИмяФайла;
	РазобратьТранзакцию = РасширениеФайлаБезТочки = "ZIP";
	НомерТранзакции = "";
	
	Если ТипЗнч(ТранспортныйКонтейнер) = Тип("ДвоичныеДанные") Тогда
		ДанныеФайла = ТранспортныйКонтейнер;
	Иначе
		ДанныеФайла = РаботаСФайлами.ДанныеФайла(ТранспортныйКонтейнер);
	КонецЕсли;

	Если АнализКода = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	НазначениеФайла = Неопределено;
	Если РазобратьТранзакцию Тогда
		НазначениеФайла = Перечисления.НазначенияФайловРегистрацииЮЛ.Контейнер;
		ДанныеКонтейнера = РазборТранспортногоКонтейнера(КомпонентыИмениФайла.Имя, ДанныеФайла);
		Результат.Выполнено = ДанныеКонтейнера.Выполнено;
		
		Если ДанныеКонтейнера.Выполнено Тогда
			НомерТранзакции = ДанныеКонтейнера.НомерТранзакции;
			
			Для Каждого СтрокаМассива Из ДанныеКонтейнера.Файлы Цикл
				ПараметрыФайла = Новый Структура;
				ПараметрыФайла.Вставить("ОтправкаСсылка", СвойстваОтправки.ОтправкаСсылка);
				ПараметрыФайла.Вставить("АдресФайла", СтрокаМассива.АдресФайла);
				ПараметрыФайла.Вставить("ИмяФайла", СтрокаМассива.ИсходноеИмя);
				ПараметрыФайла.Вставить("НазначениеФайла", СтрокаМассива.НазначениеФайла);
				ПараметрыФайла.Вставить("ТипСодержимого", СтрокаМассива.ТипСодержимого);
				ПараметрыФайла.Вставить("ИдентификаторОтвета", СвойствоОтвета.ИдентификаторОтвета);
				ПараметрыФайла.Вставить("КодОтвета", СвойствоОтвета.КодСостояния);
				ПараметрыФайла.Вставить("Описание", СвойствоОтвета.Описание);
				ПараметрыФайла.Вставить("ОписаниеСервиса", СвойстваОтправки.ОписаниеОтвета);
				ПараметрыФайла.Вставить("НомерТранзакции", НомерТранзакции);

				НовыйФайл = ПрисоединитьФайлОтправкиРегистрацииЮЛ(ПараметрыФайла);
				Если ЗначениеЗаполнено(НовыйФайл) Тогда
					Результат.Файлы.Добавить(НовыйФайл);
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли НЕ ДанныеКонтейнера.Выполнено Тогда
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если АнализКода.ТипКода = "1" Тогда
		Результат.СтатусОтправки = Перечисления.СтатусыОтправки.НеПринят;
	ИначеЕсли АнализКода.ТипКода = "0" Тогда
		Если НомерТранзакции = "02" Тогда
			Результат.СтатусОтправки = Перечисления.СтатусыОтправки.Доставлен;
		Иначе
			Результат.СтатусОтправки = Перечисления.СтатусыОтправки.Сдан;
		КонецЕсли;	
	КонецЕсли;
	
	НазначениеФайла = ?(НазначениеФайла = Неопределено, Перечисления.НазначенияФайловРегистрацииЮЛ.Протокол, НазначениеФайла);
	
	ПараметрыФайла = Новый Структура;
	ПараметрыФайла.Вставить("ОтправкаСсылка", СвойстваОтправки.ОтправкаСсылка);
	ПараметрыФайла.Вставить("АдресФайла", ПоместитьВоВременноеХранилище(ТранспортныйКонтейнер));
	ПараметрыФайла.Вставить("ИмяФайла", СвойствоОтвета.ИмяФайла);
	ПараметрыФайла.Вставить("НазначениеФайла", НазначениеФайла);
	ПараметрыФайла.Вставить("ТипСодержимого", ПолучитьТипФайла(РасширениеФайлаБезТочки));
	ПараметрыФайла.Вставить("ИдентификаторОтвета", СвойствоОтвета.ИдентификаторОтвета);
	ПараметрыФайла.Вставить("КодОтвета", СвойствоОтвета.КодСостояния);
	ПараметрыФайла.Вставить("Описание", СвойствоОтвета.Описание);
	ПараметрыФайла.Вставить("ОписаниеСервиса", АнализКода.Описание);
	ПараметрыФайла.Вставить("НомерТранзакции", НомерТранзакции);

	НовыйФайл = ПрисоединитьФайлОтправкиРегистрацииЮЛ(ПараметрыФайла);
	Если ЗначениеЗаполнено(НовыйФайл) Тогда
		Результат.Файлы.Добавить(НовыйФайл);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Разбирает данные контейнера в организованные данные
//
// Параметры:
//	ИмяФайла 			- Строка
//	ДанныеКонтейнера 	- Строка
//						- ДвоичныеДанные
//
// Возвращаемое значение:
//	Структура:
//		* НомерТранзакции- Строка
//		* Файлы 		- Массив из Структура
//			** АдресФайла 		- Строка
//			** ИмяФайла 		- Строка
//			** НазначениеФайла 	- ПеречислениеСсылка.НазначенияФайловРегистрацииЮЛ
//			** ТипСодержимого 	- ПеречислениеСсылка.ТипыСодержимогоТранспортногоКонтейнера
//			** ИсходноеИмя 		- Строка
//		* Выполнено		- Булево
//
Функция РазборТранспортногоКонтейнера(ИмяФайла, ДанныеКонтейнера)
	
	РазделыИмени = СтрРазделить(ИмяФайла, "_", Ложь);
	
	Результат = Новый Структура;
	Результат.Вставить("НомерТранзакции", РазделыИмени[5]);
	Результат.Вставить("Файлы", Новый Массив);
	Результат.Вставить("Выполнено", Ложь);
	
	СодержимоеАрхива = ПолучитьСодержимоеАрхива(ДанныеКонтейнера);
	ОписаниеПакета = Неопределено;
	
	Если НЕ СодержимоеАрхива.Выполнено Тогда
		Возврат СодержимоеАрхива;
	КонецЕсли;
	
	Для Каждого СтрокаКлюча Из СодержимоеАрхива.Файлы Цикл
		Если НРег(СтрокаКлюча.Ключ) = "packagedescription.xml" Тогда
			ОписаниеПакета = ПодготовитьОписаниеФайлов(СтрокаКлюча.Значение.ПолноеИмя, СодержимоеАрхива.ВременныйКаталог);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ОписаниеПакета = Неопределено Тогда
		УдалитьФайлы(СодержимоеАрхива.ВременныйКаталог);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Выполнено = Истина;
	
	Для Каждого СтрокаМассива Из ОписаниеПакета.Файлы Цикл
		ДанныеФайла = Новый ДвоичныеДанные(СтрокаМассива.ПолноеИмя);
		НоваяСтрока = Новый Структура;
		НоваяСтрока.Вставить("АдресФайла", ПоместитьВоВременноеХранилище(ДанныеФайла));
		НоваяСтрока.Вставить("ИмяФайла", СтрокаМассива.Имя);
		НоваяСтрока.Вставить("НазначениеФайла", СтрокаМассива.НазначениеФайла);
		НоваяСтрока.Вставить("ТипСодержимого", ПолучитьТипФайла(СтрокаМассива.Расширение));
		НоваяСтрока.Вставить("ИсходноеИмя", СтрокаМассива.ИсходноеИмя);
		Результат.Файлы.Добавить(НоваяСтрока);
	КонецЦикла;
	
	УдалитьФайлы(СодержимоеАрхива.ВременныйКаталог);
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область Прочее

Функция ОтветСервисаПоУмолчанию(Выполнено = Ложь)
	
	Результат = Новый Структура;
	Результат.Вставить("Выполнено", Выполнено);
	Результат.Вставить("Ошибка", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьРезультатЗапроса(РезультатВызова, РезультатФункции)
	
	Если НЕ РезультатВызова.Выполнено Тогда
		РезультатФункции.Ошибка = РезультатВызова.Ошибка;
	Иначе
		РезультатФункции.Выполнено = Истина;
	КонецЕсли;
	
	Возврат РезультатВызова.Выполнено
	
КонецФункции

Функция ЗаготовкаТаблицыЭтаповОтправки()
	
	ТаблицаЭтаповОтправки = Новый ТаблицаЗначений;
	ТаблицаЭтаповОтправки.Колонки.Добавить("ТекстНадписи", 				Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("ТекстСтатуса", 				Новый ОписаниеТипов("Строка"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("Дата" 						);
	ТаблицаЭтаповОтправки.Колонки.Добавить("КомментарийКСостоянию", 	Новый ОписаниеТипов("Строка,ФорматированнаяСтрока"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("НаименованиеПротокола", 	Новый ОписаниеТипов("Строка,ФорматированнаяСтрока"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("Протокол");
	ТаблицаЭтаповОтправки.Колонки.Добавить("Отправка");
	ТаблицаЭтаповОтправки.Колонки.Добавить("Сообщение");
	ТаблицаЭтаповОтправки.Колонки.Добавить("СостояниеСдачиОтчетности", 	Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("ЭтапПройден", 				Новый ОписаниеТипов("Булево"));
	ТаблицаЭтаповОтправки.Колонки.Добавить("КоличествоОтветов", 		Новый ОписаниеТипов("Строка"));
	
	Возврат ТаблицаЭтаповОтправки;
	
КонецФункции

Функция ПредставлениеНавигационнойСсылки(СодержимоеТекста, СодержимоеСсылки)
	
	Результат = "";
	
	Если НЕ ЗначениеЗаполнено(СодержимоеСсылки) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если ТипЗнч(СодержимоеСсылки) = Тип("Строка") Тогда
		ПредставлениеСсылка = СодержимоеСсылки;
	Иначе
		ПредставлениеСсылка = ПолучитьНавигационнуюСсылку(СодержимоеСсылки);
	КонецЕсли;
	
	Результат = СтрШаблон("<a href = ""%1"">%2</a>", ПредставлениеСсылка, СодержимоеТекста);
	
	Возврат Результат;
	
КонецФункции

Функция ПредставлениеОтвета(ТекущийЭтап)
	
	ОжидаемыеФайлы = Новый Соответствие;
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.РаспискаПриемДокум, НСтр("ru = 'Расписка о приеме документов';
																								|en = 'Расписка о приеме документов'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ПриложенныйДокумент, НСтр("ru = 'Приложение';
																								|en = 'Приложение'"));
	
	Возврат ПолучитьПредставленияФайлов(ОжидаемыеФайлы, ТекущийЭтап);
	
КонецФункции

Функция ПредставлениеРассмотрения(ТекущийЭтап)
	
	ОжидаемыеФайлы = Новый Соответствие;
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.РешениеОбОтказе, НСтр("ru = 'Решение об отказе';
																							|en = 'Решение об отказе'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ВыпискаЗапЕГРИП, НСтр("ru = 'Лист изменений';
																							|en = 'Лист изменений'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ВыпискаЗапЕГРЮЛ, НСтр("ru = 'Лист изменений';
																							|en = 'Лист изменений'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.СвидетельствоУчетФЛ, НСтр("ru = 'Свидетельство';
																								|en = 'Свидетельство'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.СвидетельствоУчетЮЛ, НСтр("ru = 'Свидетельство';
																								|en = 'Свидетельство'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеУчетИП, НСтр("ru = 'Уведомление';
																								|en = 'Уведомление'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеУчетЮЛ, НСтр("ru = 'Уведомление';
																								|en = 'Уведомление'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеСнятииУчетИП, НСтр("ru = 'Уведомление о снятии';
																									|en = 'Уведомление о снятии'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеСнятииУчетЮЛ, НСтр("ru = 'Уведомление о снятии';
																									|en = 'Уведомление о снятии'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.Патент, НСтр("ru = 'Патент';
																					|en = 'Патент'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ПатентОтказ, НСтр("ru = 'Отказ в патенте';
																						|en = 'Отказ в патенте'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.УведомлениеБезРасм, НСтр("ru = 'Без рассмотрения';
																								|en = 'Без рассмотрения'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.УчредительныйДокумент, НСтр("ru = 'Учредительный документ';
																									|en = 'Учредительный документ'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ИзмененияУчредительныйДокумент, НСтр("ru = 'Учредительный документ';
																											|en = 'Учредительный документ'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.РешениеОПриостановлении, НСтр("ru = 'Приостановление';
																									|en = 'Приостановление'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ИнфПисьмоНО, НСтр("ru = 'Письмо';
																						|en = 'Письмо'"));
	ОжидаемыеФайлы.Вставить(Перечисления.НазначенияФайловРегистрацииЮЛ.ПриложенныйДокумент, НСтр("ru = 'Приложение';
																								|en = 'Приложение'"));
	
	Возврат ПолучитьПредставленияФайлов(ОжидаемыеФайлы, ТекущийЭтап);
	
КонецФункции

Функция ПолучитьПредставленияФайлов(ОжидаемыеФайлы, ТекущийЭтап)
	
	Результат = "";
	
	Для Каждого СтрокаМассива Из ТекущийЭтап.Файлы Цикл
		ПредставлениеФайла = ОжидаемыеФайлы[СтрокаМассива.НазначениеФайла];
		Если ПредставлениеФайла <> Неопределено 
			И СтрокаМассива.ТипСодержимого <> Перечисления.ТипыСодержимогоФайлов.sgn Тогда
			Результат = Результат + ?(ПустаяСтрока(Результат), "", "  ") + ПредставлениеНавигационнойСсылки(ПредставлениеФайла, СтрокаМассива);
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) И ТекущийЭтап.Файлы.Количество() > 0 Тогда
		Результат = ПредставлениеНавигационнойСсылки(НСтр("ru = 'Протокол';
															|en = 'Протокол'"), ТекущийЭтап.Файлы[0]);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти