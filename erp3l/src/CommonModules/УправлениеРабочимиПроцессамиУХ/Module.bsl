
// Получает все организации которые подчинены КонсолидирующаяОрганизация на любом уровне вложенности.
// Параметры:
//	Сценарий - <СправочникСсылка.Сценарии> - сценарий регламента
//	ПериодОтчета - <СправочникСсылка.Периоды> - период регламента
//	КонсолидирующаяОрганизация - <СправочникСсылка.Организации> - консолидирующая организация.
// Возвращает:
//	<Массив> - элементы - организации периметра подчиненные на любом уровне организации КонсолидирующаяОрганизация.
//
Функция ПолучитьВсеУровниОрганизацийПериметраПоКонсолидируемой(Сценарий, ПериодОтчета, КонсолидирующаяОрганизация) Экспорт
	ПоляВыбора = Новый Структура("КонсолидирующаяОрганизация");
	
	Отбор = Новый Соответствие;
	Если Отбор.Получить("Сценарий") = Неопределено Тогда
		Отбор.Вставить("Сценарий", Сценарий);
	КонецЕсли;
	
	Если Отбор.Получить("ПериодОтчета") = Неопределено Тогда
		Отбор.Вставить("ПериодОтчета", ПериодОтчета);
	КонецЕсли;
	
	ЭлементОтбораРодительЗаполнен = Новый Структура;
	ЭлементОтбораРодительЗаполнен.Вставить("ВидСравнения", ВидСравнения.НеРавно);
	ЭлементОтбораРодительЗаполнен.Вставить("Значение",     Справочники.Организации.ПустаяСсылка());
	Отбор.Вставить("КонсолидирующаяОрганизация", ЭлементОтбораРодительЗаполнен);
	
	Отбор.Вставить("ИндивидуальнаяОрганизация.ЭлиминирующаяОрганизация", Ложь);
	
	// Организации без отбора по иерархии
	ТЗРезультат = ПолучитьДанныеРегламента(Отбор, ПоляВыбора);
	
	мРезультат = Новый Массив;
	Если ТЗРезультат = Неопределено Тогда
		Возврат мРезультат;
	КонецЕсли;
	
	мРодителиДляОтбора = Новый Массив;
	мРодителиДляОтбора.Добавить(КонсолидирующаяОрганизация);
	
	Пока мРодителиДляОтбора.Количество() > 0 Цикл
		мНовыеРодителиДляОтбора = Новый Массив;
		Для Каждого Родитель Из мРодителиДляОтбора Цикл
			ОтборПоРодителю = Новый Структура("КонсолидирующаяОрганизация", Родитель);
			мПодчиненныеСтроки = ТЗРезультат.НайтиСтроки(ОтборПоРодителю);
			Для Каждого Строка_ Из мПодчиненныеСтроки Цикл
				мРезультат.Добавить(Строка_.ИндивидуальнаяОрганизация);
				мНовыеРодителиДляОтбора.Добавить(Строка_.ИндивидуальнаяОрганизация);
				ТЗРезультат.Удалить(Строка_);
			КонецЦикла;
		КонецЦикла;
		мРодителиДляОтбора = мНовыеРодителиДляОтбора;
	КонецЦикла;
	
	Возврат мРезультат;
КонецФункции

Функция ПолучитьСоставПериметраКонсолидации(
					Сценарий, 
					ПериодСценария, 
					Знач Организация = Неопределено, 
					МетодКонсолидации = Неопределено, 
					МинПолнаяДоляВладения = 0, 
					МаксПолнаяДоляВладения = 100, 
					ТипИндивидуальнойОрганизации = Неопределено, 
					Знач ВладелецПериметра = Неопределено) Экспорт

	Если (ВладелецПериметра = Неопределено) И (НЕ Организация.ЭлиминирующаяОрганизация) Тогда
		
		//Если передали в параметр "Организация" обычную организацию,
		//то считаем что она может быть консолидирующей.
		//Используем ее владельца периметра чтобы получить ее дочерние организации		
		ВладелецПериметра = Организация;
		Организация = Неопределено;
		
	КонецЕсли;

	Отбор = Новый Соответствие;
	
	Отбор.Вставить("Сценарий", 		Сценарий);
	Отбор.Вставить("ПериодОтчета", 	ПериодСценария);
	
	Если ВладелецПериметра <> Неопределено Тогда
		Отбор.Вставить("КонсолидирующаяОрганизация", ВладелецПериметра);
	КонецЕсли;
	
	Если Организация <> Неопределено Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если МетодКонсолидации <> Неопределено Тогда
		
		МассивМетодов = МетодКонсолидации;
		Если ТипЗнч(МетодКонсолидации) = Тип("СписокЗначений") Тогда
			МассивМетодов = МетодКонсолидации.ВыгрузитьЗначения();
		ИначеЕсли ТипЗнч(МетодКонсолидации) = Тип("ПеречислениеСсылка.МетодыКонсолидации") Тогда
			МассивМетодов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(МетодКонсолидации);
		КонецЕсли;
		
		ВидыОтношений = Новый Массив;
		
		Для каждого ТекущийМетод Из МассивМетодов Цикл						
			
			Если ТекущийМетод = Перечисления.МетодыКонсолидации.Полная Тогда
				ВидыОтношений.Добавить(Перечисления.ВидыОтношенийКГруппе.Материнское);
				ВидыОтношений.Добавить(Перечисления.ВидыОтношенийКГруппе.Дочернее);
			ИначеЕсли ТекущийМетод = Перечисления.МетодыКонсолидации.ДолевоеУчастие Тогда
				ВидыОтношений.Добавить(Перечисления.ВидыОтношенийКГруппе.Совместное);
				ВидыОтношений.Добавить(Перечисления.ВидыОтношенийКГруппе.Ассоциированное);
			Иначе	// неконсолидируется
				ВидыОтношений.Добавить(Перечисления.ВидыОтношенийКГруппе.СвязанныеСтороны);
				ВидыОтношений.Добавить(Перечисления.ВидыОтношенийКГруппе.ТретьиСтороны);
			КонецЕсли;
						
		КонецЦикла;
		
		Отбор.Вставить("ВидОтношенияКГруппе", ВидыОтношений);
		
	КонецЕсли;
	
	Если ТипИндивидуальнойОрганизации <> Неопределено Тогда
		
		ЭлиминирующаяОрг = (ТипИндивидуальнойОрганизации = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
		Отбор.Вставить("ИндивидуальнаяОрганизация.ЭлиминирующаяОрганизация", ЭлиминирующаяОрг);
		
	КонецЕсли;
	
	Если (МинПолнаяДоляВладения <> Неопределено) Или (МаксПолнаяДоляВладения <> Неопределено) Тогда
		
		ЭлементОтбораДоли = Новый Структура;
		ЭлементОтбораДоли.Вставить("ВидСравнения", 	ВидСравнения.ИнтервалВключаяГраницы);
		ЭлементОтбораДоли.Вставить("ЗначениеС", 	МинПолнаяДоляВладения);
		ЭлементОтбораДоли.Вставить("ЗначениеПо", 	МаксПолнаяДоляВладения);
		
		Отбор.Вставить("ЭффективнаяДоля", ЭлементОтбораДоли);
		
	КонецЕсли;
	
	ПоляВыборки = Новый Структура("КонсолидирующаяОрганизация, ВидОтношенияКГруппе,
									|Сценарий, ПериодСценария");

	ПоляВыборки.Вставить("ПолнаяДоляГруппы",	"ЭффективнаяДоля");
	ПоляВыборки.Вставить("ПериодСценария", 		"ПериодОтчета");
	ПоляВыборки.Вставить("ГруппаКонтрагента",	"ОтношениеКГруппе");
	
	Возврат ПолучитьДанныеРегламента(Отбор, ПоляВыборки);

КонецФункции

// Функция - Получить данные регламента
//		
// Параметры:
//  ОтборПостроителя - <Структура,Соотвествие>(ПутьОтбора, ЗначениеОтбора) - Отборы регламента, д
//  доступные поля отбора: 
//  		КонсолидирующаяОрганизация 	- периметр по консолидирующей,
//  		Организация 				- периметры, в которые входит организации(элиминирующая организация, если нет, то возвр)
//  		ИндивидуальнаяОрганизация 	- отбор индивидуальных органиха по периметр данной организации(элиминирующая организация)
//	Отборы для получения периметра
//  ПоляВыборки		 - <Структура,Соотвествие>(имя колонки возвращаемой таблицы, Путь к полю) - дополнительные колонки
// Возвращаемое значение:
//   - <ТаблицаЗначений> данные регламента
Функция ПолучитьДанныеРегламента(ОтборПостроителя, ПоляВыборки = Неопределено) Экспорт
	Возврат ПолучитьЗапросДанныеРегламента(ОтборПостроителя, ПоляВыборки).Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьЗапросДанныеРегламента(ОтборПостроителя, ПоляВыборки = Неопределено) Экспорт

	Перем ПериодОтчета, ДатаОкончания;
	
	Построитель = Новый ПостроительЗапроса;
	Построитель.Текст = ПолучитьТекстЗапросаРегламента();
		
	Для Каждого ИсточникОтбора Из ОтборПостроителя Цикл
		
		Если ИсточникОтбора.Ключ = "ПериодОтчета" Тогда 
			ПериодОтчета = ИсточникОтбора.Значение;
		КонецЕсли;
		
		Если ИсточникОтбора.Ключ = "ДатаОкончания" Тогда 
			ДатаОкончания = ИсточникОтбора.Значение;
		КонецЕсли;
		
		Если ИсточникОтбора.Ключ = "Организация" Тогда
			
			//Если в отборе организация - то возвращаем все периметры, в которых она присутствует
			//рекомендуется использовать только для элиминирующих (чтобы вернуть периметр по элиминирующей)			
			Построитель.Параметры.Вставить("ОрганизацияОтбор", ИсточникОтбора.Значение);
			Построитель.Отбор.Добавить("ИспользоватьОтборПоОрганизации").Установить(Истина, Истина);
			ОтборПостроителя.Удалить("Организация");
			
		КонецЕсли;
				
	КонецЦикла;
	
	Если Не Построитель.Параметры.Свойство("ОрганизацияОтбор") Тогда
		Построитель.Параметры.Вставить("ОрганизацияОтбор", Неопределено);
	КонецЕсли;	
	
	ТиповыеОтчетыУХ.ДобавитьОтборыВПостроитель(Построитель, ОтборПостроителя);
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
	    Построитель.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	ИначеЕсли ЗначениеЗаполнено(ПериодОтчета) Тогда 
		Построитель.Параметры.Вставить("ДатаОкончания", КонецДня(ПериодОтчета.ДатаОкончания));
	Иначе 
		Построитель.Параметры.Вставить("ДатаОкончания", КонецДня(ТекущаяДата()));
	КонецЕсли;
		
	Если ПоляВыборки <> Неопределено Тогда		
		Для каждого ПолеИсточник Из ПоляВыборки Цикл
			ИмяЭлемента = ?(ПолеИсточник.Значение = Неопределено, ПолеИсточник.Ключ, ПолеИсточник.Значение);
			Построитель.ВыбранныеПоля.Добавить(ИмяЭлемента, ПолеИсточник.Ключ);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Построитель.ПолучитьЗапрос();

КонецФункции

Функция ПолучитьТекстЗапросаРегламента()

	//ДоляВладения - Эффективная доля владения
	//ДоляВладенияРасчет - доля владения по МСФО(если организация является материнской или дочерней тогда 100, иначе 0)	
	//КонсолидирующаяОрганизация - (поле выбора и отбор) консолидирующая организация для дочерних
	//ИндивидуальнаяОрганизация - (поле выбора и отбор) отбор накладывается непосредственно на сам возвращаемый список организаций
	//Организация - (отбор) по данной организации осуществляется поиск Консолидирующей организации (например для Элиминирующей организации)
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СтатусыПериодовСценариев.Сценарии КАК Сценарий,
	|	ВЫБОР
	|		КОГДА СтатусыПериодовСценариев.ВерсияРегламента.РасчетЭффективныхДолей
	|			ТОГДА СтатусыПериодовСценариев.Сценарии
	|		ИНАЧЕ СтатусыПериодовСценариев.ВерсияРегламента.Сценарий
	|	КОНЕЦ КАК СценарийСтатусов,
	|	СтатусыПериодовСценариев.ВерсияРегламента.РасчетЭффективныхДолей КАК РасчетЭффективныхДолей,
	|	СтатусыПериодовСценариев.ВерсияРегламента КАК ВерсияРегламента,
	|	СтатусыПериодовСценариев.ВерсияРегламента.МеткаВремени КАК МеткаВремени,
	|	СтатусыПериодовСценариев.Периоды КАК ПериодОтчета
	|ПОМЕСТИТЬ втПроцесс
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|{ГДЕ
	|	СтатусыПериодовСценариев.Сценарии.* КАК Сценарий,
	|	СтатусыПериодовСценариев.Периоды.* КАК ПериодОтчета,
	|	СтатусыПериодовСценариев.ВерсияРегламента.* КАК ВерсияРегламента}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВерсияРегламента,
	|	Сценарий,
	|	МеткаВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииВерсии.Ссылка КАК ВерсияРегламента,
	|	ОрганизацииВерсии.Ссылка.МеткаВремени КАК МеткаВремени,
	|	ОрганизацииВерсии.Ссылка.РасчетЭффективныхДолей КАК РасчетЭффективныхДолей,
	|	ОрганизацииВерсии.ОрганизационнаяЕдиницаРодитель КАК КонсолидирующаяОрганизация,
	|	ОрганизацииВерсии.ОрганизационнаяЕдиница КАК ИндивидуальнаяОрганизация,
	|	ОрганизацииВерсии.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	ОрганизацииВерсии.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы,
	|	НЕ ОрганизацииВерсии.ОрганизационнаяЕдиница.ИспользоватьВРегламентированномУчете
	|		И НЕ ОрганизацииВерсии.ОрганизационнаяЕдиница.ИностранныйНалоговыйРезидент КАК ЭлиминирующаяОрганизацияИлиЦФО,
	|	ВЫБОР
	|		КОГДА ОрганизацииВерсии.ОтношениеКГруппе.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЯвляетсяМатеринской,
	|	ОрганизацииВерсии.ОтношениеКГруппе КАК ОтношениеКГруппе,
	|	ОрганизацииВерсии.ЭффективнаяДоля КАК ЭффективнаяДоля,
	|	ОрганизацииВерсии.МетодИсключенияВГО КАК МетодИсключенияВГО
	|ПОМЕСТИТЬ втОрганизацииВерсии
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ОрганизацииВерсии
	|ГДЕ
	|	ОрганизацииВерсии.Ссылка В
	|			(ВЫБРАТЬ
	|				т.ВерсияРегламента
	|			ИЗ
	|				втПроцесс КАК т)
	|{ГДЕ
	|	ОрганизацииВерсии.ОрганизационнаяЕдиница.* КАК ИндивидуальнаяОрганизация,
	|	((ОрганизацииВерсии.Ссылка, ОрганизацииВерсии.ОрганизационнаяЕдиницаРодитель) В
	|			(ВЫБРАТЬ
	|				ОрганизацииВерсии.Ссылка,
	|				ОрганизацииВерсии.ОрганизационнаяЕдиницаРодитель
	|			ИЗ
	|				Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ОрганизацииВерсии
	|			ГДЕ
	|				ОрганизацииВерсии.Ссылка В
	|					(ВЫБРАТЬ
	|						т.ВерсияРегламента
	|					ИЗ
	|						втПроцесс КАК т)
	|				И ОрганизацииВерсии.ОрганизационнаяЕдиница В (&ОрганизацияОтбор))) КАК ИспользоватьОтборПоОрганизации,
	|	ОрганизацииВерсии.ОрганизационнаяЕдиницаРодитель.* КАК КонсолидирующаяОрганизация}
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КонсолидирующаяОрганизация,
	|	ИндивидуальнаяОрганизация,
	|	ЯвляетсяМатеринской,
	|	ВерсияРегламента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СрезПоследних.Период) КАК Период,
	|	втПроцесс.ВерсияРегламента КАК ВерсияРегламента,
	|	СрезПоследних.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	СрезПоследних.Инвестор КАК Инвестор,
	|	СрезПоследних.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ втСрезПоследних
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования КАК СрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПроцесс КАК втПроцесс
	|		ПО (СрезПоследних.Активность)
	|			И СрезПоследних.Период <= втПроцесс.МеткаВремени
	|			И (втПроцесс.РасчетЭффективныхДолей)
	|			И СрезПоследних.Сценарий = втПроцесс.СценарийСтатусов
	|			И (СрезПоследних.Инвестор В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					т.ИндивидуальнаяОрганизация
	|				ИЗ
	|					втОрганизацииВерсии КАК т
	|				ГДЕ
	|					т.ЯвляетсяМатеринской))
	|
	|СГРУППИРОВАТЬ ПО
	|	втПроцесс.ВерсияРегламента,
	|	СрезПоследних.ОбъектИнвестирования,
	|	СрезПоследних.Инвестор,
	|	СрезПоследних.Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования,
	|	Инвестор,
	|	Сценарий,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОрганизацииВерсии.ИндивидуальнаяОрганизация КАК ИндивидуальнаяОрганизация
	|{ВЫБРАТЬ
	|	втОрганизацииВерсии.КонсолидирующаяОрганизация.*,
	|	втОрганизацииВерсии.ИндивидуальнаяОрганизация.*,
	|	втОрганизацииВерсии.ВерсияРегламента.*,
	|	втОрганизацииВерсии.ОсновнаяВалюта.*,
	|	втОрганизацииВерсии.ВидОрганизационнойЕдиницы.*,
	|	(ВЫБОР
	|			КОГДА втОрганизацииВерсии.ЭлиминирующаяОрганизацияИлиЦФО
	|					ИЛИ втОрганизацииВерсии.ЯвляетсяМатеринской
	|				ТОГДА 100
	|			ИНАЧЕ втОрганизацииВерсии.ЭффективнаяДоля
	|		КОНЕЦ) КАК ЭффективнаяДоля,
	|	(ВЫБОР
	|			КОГДА втОрганизацииВерсии.ЭлиминирующаяОрганизацияИлиЦФО
	|					ИЛИ втОрганизацииВерсии.ЯвляетсяМатеринской
	|				ТОГДА 100
	|			КОГДА втОрганизацииВерсии.ОтношениеКГруппе.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)
	|				ТОГДА 100
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЭффективнаяДоляРасчет,
	|	втОрганизацииВерсии.ОтношениеКГруппе.* КАК ОтношениеКГруппе,
	|	(ВЫБОР
	|			КОГДА втОрганизацииВерсии.ЭлиминирующаяОрганизацияИлиЦФО
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)
	|			КОГДА втОрганизацииВерсии.ЯвляетсяМатеринской
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское)
	|			ИНАЧЕ втОрганизацииВерсии.ОтношениеКГруппе.ВидОтношенияКГруппе
	|		КОНЕЦ) КАК ВидОтношенияКГруппе,
	|	втОрганизацииВерсии.МетодИсключенияВГО,
	|	втПроцесс.Сценарий.*,
	|	втПроцесс.ПериодОтчета.*}
	|ИЗ
	|	втПроцесс КАК втПроцесс
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизацииВерсии КАК втОрганизацииВерсии
	|		ПО втПроцесс.ВерсияРегламента = втОрганизацииВерсии.ВерсияРегламента
	|{ГДЕ
	|	втОрганизацииВерсии.ОсновнаяВалюта.*,
	|	втОрганизацииВерсии.КонсолидирующаяОрганизация.*,
	|	втОрганизацииВерсии.ИндивидуальнаяОрганизация.*,
	|	втОрганизацииВерсии.ВерсияРегламента.*,
	|	втОрганизацииВерсии.ВидОрганизационнойЕдиницы.*,
	|	втПроцесс.Сценарий.*,
	|	втПроцесс.ПериодОтчета.*,
	|	(ВЫБОР
	|			КОГДА втОрганизацииВерсии.ЭлиминирующаяОрганизацияИлиЦФО
	|					ИЛИ втОрганизацииВерсии.ЯвляетсяМатеринской
	|				ТОГДА 100
	|			ИНАЧЕ втОрганизацииВерсии.ЭффективнаяДоля
	|		КОНЕЦ) КАК ЭффективнаяДоля,
	|	(ВЫБОР
	|			КОГДА втОрганизацииВерсии.ЭлиминирующаяОрганизацияИлиЦФО
	|					ИЛИ втОрганизацииВерсии.ЯвляетсяМатеринской
	|				ТОГДА 100
	|			КОГДА втОрганизацииВерсии.ОтношениеКГруппе.ВидОтношенияКГруппе = ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)
	|				ТОГДА 100
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЭффективнаяДоляРасчет,
	|	втОрганизацииВерсии.ОтношениеКГруппе.* КАК ОтношениеКГруппе,
	|	(ВЫБОР
	|			КОГДА втОрганизацииВерсии.ЭлиминирующаяОрганизацияИлиЦФО
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее)
	|			КОГДА втОрганизацииВерсии.ЯвляетсяМатеринской
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское)
	|			ИНАЧЕ втОрганизацииВерсии.ОтношениеКГруппе.ВидОтношенияКГруппе
	|		КОНЕЦ) КАК ВидОтношенияКГруппе}";

КонецФункции

// Функция - Получить данные регламента отчета
//
// Параметры:
//  КонтекстОтчета	 - <Структура,ДокументОбъект.НастраиваемыйОтчет,ДокументСсылка.НастраиваемыйОтчет> - контекст документа "настраиваемый отчет"
//  ПоляОтбора		 - <Соответствие,Структура,Неопределено> - Основной отбор
//  ПоляВыбора		 - <Соответствие,Структура,Неопределено> - дополнительные поля выбора
// Возвращаемое значение:
//   - ТаблицаЗначений
Функция ПолучитьДанныеРегламентаОтчета(КонтекстОтчета, ПоляВыбора = Неопределено, ПоляОтбора = Неопределено) Экспорт

	Перем КонсолидирующаяОрганизация;
	
	Если ПоляВыбора = Неопределено Тогда	
		ПоляВыбора = Новый Структура("ДоляВладения,ВидОтношенияКГруппе", 
									"ЭффективнаяДоляРасчет", "ВидОтношенияКГруппе");
	КонецЕсли;
	
	Отбор = Новый Соответствие;
	
	Если ПоляОтбора <> Неопределено Тогда		
		Для каждого ПолеОтбора Из ПоляОтбора Цикл			
			Отбор.Вставить(ПолеОтбора.Ключ, ПолеОтбора.Значение);			
		КонецЦикла;		
	КонецЕсли;
	
	Если Отбор.Получить("Сценарий") = Неопределено Тогда
		Отбор.Вставить("Сценарий", КонтекстОтчета.Сценарий);
	КонецЕсли;
	
	Если Отбор.Получить("ПериодОтчета") = Неопределено Тогда
		Отбор.Вставить("ПериодОтчета", КонтекстОтчета.ПериодОтчета);
	КонецЕсли;
	
	Если (Отбор.Получить("КонсолидирующаяОрганизация") = Неопределено)
		И (Отбор.Получить("Организация") = Неопределено) Тогда
		
		Если КонтекстОтчета.Организация.ЭлиминирующаяОрганизация Тогда
			Отбор.Вставить("Организация", КонтекстОтчета.Организация);
		Иначе	
			Отбор.Вставить("КонсолидирующаяОрганизация", КонтекстОтчета.Организация);
		КонецЕсли;
		
	КонецЕсли;
				
	Возврат ПолучитьДанныеРегламента(Отбор, ПоляВыбора);

КонецФункции

Функция ПолучитьМатеринскиеОрганизации(КонтекстОтчета) Экспорт

	ОтборДополнительный = Новый Структура("ВидОтношенияКГруппе", Перечисления.ВидыОтношенийКГруппе.Материнское);	
	Возврат ПолучитьДанныеРегламентаОтчета(КонтекстОтчета,,ОтборДополнительный).ВыгрузитьКолонку("ИндивидуальнаяОрганизация");

КонецФункции

// Функция - Получает периметр организаций, которые находятся по
//
// Параметры:
//  КонтекстОтчета		 - <Структура,ДокументОбъект.НастраиваемыйОтчет,ДокументСсылка.НастраиваемыйОтчет> - 
//  локСценарий			 - <СправочникСсылка.Сценарий>	 - сценарий отбора 
//  локПериод			 - <СправочникСсылка.ПериодОтчета> - период отчета отбора 
//  локОрганизация		 - <СправочникСсылка.Организации> - Организация чей периметр требуется получить(элиминирующая организация)
//  ВладелецПериметра	 - <СправочникСсылка.Организации> - консолидирующая организация
// Возвращаемое значение:
//   -  ТаблицаЗначений(Колонки: ИндивидуальнаяОрганизация, ПолнаяДоляГруппы, ИндексКонтроляВПериоде)
Функция ПолучитьПериметрКонтролируемыхОрганизаций(	КонтекстОтчета, 
										Знач локСценарий = Неопределено, 
										Знач локПериод = Неопределено, 
										Знач локОрганизация = Неопределено, 
										Знач ВладелецПериметра = Неопределено) Экспорт

	Если локСценарий = Неопределено Тогда
		локСценарий = КонтекстОтчета.Сценарий;
	КонецЕсли;
	
	Если локПериод = Неопределено Тогда
		локПериод = КонтекстОтчета.ПериодОтчета;
	КонецЕсли;
	
	Если локОрганизация = Неопределено Тогда
		локОрганизация = КонтекстОтчета.Организация;
	КонецЕсли;
	
	Если (ВладелецПериметра = Неопределено) И (НЕ локОрганизация.ЭлиминирующаяОрганизация) Тогда
		
		//Если передали в параметр "Организация" обычную организацию,
		//то считаем что она может быть консолидирующей.
		//Используем ее владельца периметра чтобы получить ее дочерние организации		
		ВладелецПериметра = локОрганизация;
		локОрганизация = Неопределено;		
		
	КонецЕсли;
	
	Отбор = Новый Структура("Сценарий,ПериодОтчета", локСценарий, локПериод);
	
	Если (ВладелецПериметра <> Неопределено) Тогда
		Отбор.Вставить("КонсолидирующаяОрганизация", ВладелецПериметра);
	КонецЕсли;
	
	ВидыОтношенийКГруппе = Новый Массив;
	ВидыОтношенийКГруппе.Добавить(Перечисления.ВидыОтношенийКГруппе.Материнское);
	ВидыОтношенийКГруппе.Добавить(Перечисления.ВидыОтношенийКГруппе.Дочернее);
	Отбор.Вставить("ВидОтношенияКГруппе", ВидыОтношенийКГруппе);
	
	ПоляВыборки = Новый Структура("ПолнаяДоляГруппы", "ЭффективнаяДоля");
	ТаблицаПериметр = ПолучитьДанныеРегламента(Отбор, ПоляВыборки);	
	
	//Удалим лишние колонки
	КоличествоКолонок = ТаблицаПериметр.Колонки.Количество();
	Для Инд = 1 По КоличествоКолонок Цикл
		ТекКолонка = ТаблицаПериметр.Колонки.Получить(КоличествоКолонок - Инд);
		Если (ТекКолонка.Имя <> "ИндивидуальнаяОрганизация") 
			И (ТекКолонка.Имя <> "ПолнаяДоляГруппы") Тогда
			ТаблицаПериметр.Колонки.Удалить(ТекКолонка);
		КонецЕсли;
	КонецЦикла;
	
	//ИндексКонтроляВПериоде - оставлена для совместимости
	ТаблицаПериметр.Колонки.Добавить("ИндексКонтроляВПериоде", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 2));	
	ТаблицаПериметр.ЗаполнитьЗначения(1, "ИндексКонтроляВПериоде");
	
	Возврат ТаблицаПериметр;

КонецФункции

Функция ОрганизацияЯвляетсяКонсолидирующей(Организация, Сценарий, ПериодОтчета) Экспорт

	 Запрос = Новый Запрос(
	 "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	 |	СтруктураГруппы.ОрганизационнаяЕдиницаРодитель
	 |ИЗ
	 |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	 |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК СтруктураГруппы
	 |		ПО СтатусыПериодовСценариев.ВерсияРегламента = СтруктураГруппы.Ссылка
	 |			И (СтруктураГруппы.ОрганизационнаяЕдиницаРодитель = &Организация)
	 |			И (СтатусыПериодовСценариев.Сценарии = &Сценарий)
	 |			И (СтатусыПериодовСценариев.Периоды = &ПериодОтчета)");
	 
	 Запрос.УстановитьПараметр("Организация", 	Организация);
	 Запрос.УстановитьПараметр("Сценарий", 		Сценарий); 
	 Запрос.УстановитьПараметр("ПериодОтчета", 	ПериодОтчета);
	 
	 Возврат Не Запрос.Выполнить().Пустой();	 

КонецФункции

// Возвращает элиминирующе организации регламента и их основные валюты.
//
// Параметры:
//  ПериодОтчета - СправочникСсылка.Периоды	 - период для поиска регламента.
//  Сценарий	 - СправочникСсылка.Сценарии - сценарий для поиска регламента.
// 
// Возвращаемое значение:
//   - ТаблицаЗначений - элиминирующие организации. Колонки:
//			- Организация - СправочникСсылка.Организации - элиминирующая организация.
//			- Валюта - СправочникСсылка.Валюты - валюта организации.
//
Функция ПолучитьЭлиминирующиеОрганизацииРегламента(ПериодОтчета, Сценарий) Экспорт
		Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК Организация,
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОсновнаяВалюта КАК Валюта
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|		ПО СтатусыПериодовСценариев.ВерсияРегламента = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка
	|			И (СтатусыПериодовСценариев.Периоды = &ПериодОтчета)
	|			И (СтатусыПериодовСценариев.Сценарии = &Сценарий)
	|			И (ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница.ЭлиминирующаяОрганизация)");
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьКонсолидирующуюОрганизацию(ЭлиминирующаяОрганизация, Сценарий, ПериодОтчета) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК КонсолидирующаяОрганизация
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК СтруктураГруппы
	|		ПО СтатусыПериодовСценариев.ВерсияРегламента = СтруктураГруппы.Ссылка
	|			И (СтруктураГруппы.ОрганизационнаяЕдиница = &Организация)
	|			И (СтатусыПериодовСценариев.Сценарии = &Сценарий)
	|			И (СтатусыПериодовСценариев.Периоды = &ПериодОтчета)");
	
	Запрос.УстановитьПараметр("Организация", 	ЭлиминирующаяОрганизация);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий); 
	Запрос.УстановитьПараметр("ПериодОтчета", 	ПериодОтчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат ?(РезультатЗапроса.Пустой(), Справочники.Организации.ПустаяСсылка(), РезультатЗапроса.Выгрузить()[0].КонсолидирующаяОрганизация);

КонецФункции

// Функция возвращает структуру, в которой хранятся данные в следующих полях:
// - ЧистыеАктивы  - чистые активы объекта инвестирования на момент входа в период.
// - ДенежныйЭквивалентВЧА - денежный эквивалент доли инвестора в чистых активах объекта инвестирования.
// - ЗатратыНаПриобретение - затраты на приобретение объекта инвестирования.
// - Гудвилл        - гудвилл.
// - ПроцентГолосующихАкций - процент голосующих акций в объекте инвестирования.
// - ДатаВхожденияВПериметр - дата вхождения объекта инвестирования в периметр.
Функция ПолучитьСтруктуруВхожденияВПериметр(КонтекстОтчета, Знач локОрганизация) Экспорт

	МассивПересчитываемыхПоказателей = Новый Массив;
	МассивПересчитываемыхПоказателей.Добавить("ЧистыеАктивы_НаНачалоПериода");
	МассивПересчитываемыхПоказателей.Добавить("ЧистыеАктивы_НаКонецПериода");
	МассивПересчитываемыхПоказателей.Добавить("ЧистыеАктивы_Оборот");
	
	МассивПересчитываемыхПоказателей.Добавить("ДенежныйЭквивалентвЧА_НаНачалоПериода");
	МассивПересчитываемыхПоказателей.Добавить("ДенежныйЭквивалентвЧА_НаКонецПериода");
	МассивПересчитываемыхПоказателей.Добавить("ДенежныйЭквивалентвЧА_Оборот");
	
	МассивПересчитываемыхПоказателей.Добавить("Гудвилл_НаНачалоПериода");
	МассивПересчитываемыхПоказателей.Добавить("Гудвилл_НаКонецПериода");
	МассивПересчитываемыхПоказателей.Добавить("Гудвилл_Оборот");
	
	МассивПересчитываемыхПоказателей.Добавить("Инвестиции_НаНачалоПериода");
	МассивПересчитываемыхПоказателей.Добавить("Инвестиции_НаКонецПериода");
	МассивПересчитываемыхПоказателей.Добавить("Инвестиции_Оборот");
	
	ЛокСтруктураОтвета = Новый Структура("ЧистыеАктивы_НаНачалоПериода,
	|	ЧистыеАктивы_НаКонецПериода,
	|	ЧистыеАктивы_Оборот,
	|	ПолнаяДоляВладения_НаНачалоПериода,
	|	ПолнаяДоляВладения_НаКонецПериода,
	|	ПолнаяДоляВладения_Оборот,
	|	ДенежныйЭквивалентвЧА_НаНачалоПериода,
	|	ДенежныйЭквивалентвЧА_НаКонецПериода,
	|	ДенежныйЭквивалентвЧА_Оборот,
	|	Гудвилл_НаНачалоПериода,
	|	Гудвилл_НаКонецПериода,
	|	Гудвилл_Оборот,
	|	Инвестиции_НаНачалоПериода,
	|	Инвестиции_НаКонецПериода,
	|	Инвестиции_Оборот,
	|	ПроцентПривилегированныхАкций_НаНачалоПериода,
	|	ПроцентПривилегированныхАкций_НаКонецПериода,
	|	ПроцентПривилегированныхАкций_Оборот,
	|	ИндексКонтроляВПериоде,
	|	МетодКонсолидации,
	|	ПредыдущийМетодКонсолидации,
	|   ДатаВхожденияВПериметр,
	|	ДатаПотериКонтроля,
	|	Период_НаМоментПриобретения,
	|	Период_НаМоментВыбытия,
	|	Сценарий_НаМоментВыбытия,
	|	Сценарий_НаМоментПриобретения");
	
	ВерсияРегламента = УправлениеРабочимиПроцессамиУХ.ПолучитьВерсиюРегламентаПодготовкиОтчетности(
														КонтекстОтчета.Сценарий, КонтекстОтчета.ПериодОтчета);
	
	Запрос =  Новый Запрос;	
	Запрос.УстановитьПараметр("Ссылка", 				ВерсияРегламента);
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница",	локОрганизация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОрганизационныеЕдиницы.ЧистыеАктивы_НаНачалоПериода,
	|	ОрганизационныеЕдиницы.ЧистыеАктивы_НаКонецПериода,
	|	ОрганизационныеЕдиницы.ЧистыеАктивы_Оборот,
	|	ОрганизационныеЕдиницы.ПолнаяДоляВладения_НаНачалоПериода,
	|	ОрганизационныеЕдиницы.ПолнаяДоляВладения_НаКонецПериода,
	|	ОрганизационныеЕдиницы.ПолнаяДоляВладения_Оборот,
	|	ОрганизационныеЕдиницы.ДенежныйЭквивалентвЧА_НаНачалоПериода,
	|	ОрганизационныеЕдиницы.ДенежныйЭквивалентвЧА_НаКонецПериода,
	|	ОрганизационныеЕдиницы.ДенежныйЭквивалентвЧА_Оборот,
	|	ОрганизационныеЕдиницы.Гудвилл_НаНачалоПериода,
	|	ОрганизационныеЕдиницы.Гудвилл_НаКонецПериода,
	|	ОрганизационныеЕдиницы.Гудвилл_Оборот,
	|	ОрганизационныеЕдиницы.Инвестиции_НаНачалоПериода,
	|	ОрганизационныеЕдиницы.Инвестиции_НаКонецПериода,
	|	ОрганизационныеЕдиницы.Инвестиции_Оборот,
	|	ОрганизационныеЕдиницы.ПроцентПривилегированныхАкций_НаНачалоПериода,
	|	ОрганизационныеЕдиницы.ПроцентПривилегированныхАкций_НаКонецПериода,
	|	ОрганизационныеЕдиницы.ПроцентПривилегированныхАкций_Оборот,
	|	ОрганизационныеЕдиницы.ИндексКонтроляВПериоде,
	|	ОрганизационныеЕдиницы.МетодКонсолидации,
	|	ОрганизационныеЕдиницы.ПредыдущийМетодКонсолидации,
	|	ОрганизационныеЕдиницы.ДатаВхожденияВПериметр,
	|	ОрганизационныеЕдиницы.ДатаПотериКонтроля,
	|	ОрганизационныеЕдиницы.Период_НаМоментПриобретения,
	|	ОрганизационныеЕдиницы.Период_НаМоментВыбытия,
	|	ОрганизационныеЕдиницы.Сценарий_НаМоментВыбытия,
	|	ОрганизационныеЕдиницы.Сценарий_НаМоментПриобретения,
	|	ОрганизационныеЕдиницы.ОсновнаяВалюта КАК ВалютаПоказателей
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ОрганизационныеЕдиницы
	|ГДЕ
	|	ОрганизационныеЕдиницы.Ссылка = &Ссылка
	|	И ОрганизационныеЕдиницы.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ИсходнаяВалюта = Выборка.ВалютаПоказателей;
		ЗаполнитьЗначенияСвойств(ЛокСтруктураОтвета, Выборка);
		
		Если (ЗначениеЗаполнено(ИсходнаяВалюта) И ЗначениеЗаполнено(КонтекстОтчета.ОсновнаяВалюта))
			И (ИсходнаяВалюта <> КонтекстОтчета.ОсновнаяВалюта) Тогда
			
			Для Каждого Элемент Из МассивПересчитываемыхПоказателей Цикл
				
				ЛокСтруктураОтвета[Элемент] = УправлениеРабочимиПроцессамиУХ
													.ПересчитатьПоКурсу(ЛокСтруктураОтвета[Элемент],
														ИсходнаяВалюта,
														КонтекстОтчета.ОсновнаяВалюта,
														Перечисления.ВидыКурсов.КурсНаМоментНачисления,
														,
														,
														КонтекстОтчета.Дата,
														,
														,
														КонтекстОтчета.КэшТаблицыКурсов
														);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЛокСтруктураОтвета;

КонецФункции

// Функция - возвращает перечень консолидирующих организаций регламента (ищем по периоду и сценарию)
//
// Параметры:
//	ПериодОтчета - <СправочникСсылка.Периоды>, период для нахождения регламента.
//	Сценарий - <СправочникСсылка.Сценарии>, сценарий для нахождения регламента.
// Возвращаемое значение:
//	ТаблицаЗначений с колонками:
//		Организация - <СправочникСсылка.Организации> - консолидирующая организация;
//		Валюта - <СправочникСсылка.Валюты> - валюта (предоставления отчетности) периметра.
//	Если строк нет, то периметры не найдены.
//
Функция ПолучитьКонсолидирующиеОрганизацииРегламента(ПериодОтчета, Сценарий) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК Организация,
	|	ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОсновнаяВалюта КАК Валюта
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|		ПО СтатусыПериодовСценариев.ВерсияРегламента = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка
	|			И (ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиницаРодитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|			И (СтатусыПериодовСценариев.Периоды = &ПериодОтчета)
	|			И (СтатусыПериодовСценариев.Сценарии = &Сценарий)");
	
	
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПолучитьВсеКонсолидирующиеОрганизации(КонсолидируемаяОрганизация, Сценарий, ПериодОтчета) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК КонсолидирующаяОрганизация
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК СтруктураГруппы
	|		ПО СтатусыПериодовСценариев.ВерсияРегламента = СтруктураГруппы.Ссылка
	|			И (СтруктураГруппы.ОрганизационнаяЕдиница = &Организация)
	|			И (СтатусыПериодовСценариев.Сценарии = &Сценарий)
	|			И (СтатусыПериодовСценариев.Периоды = &ПериодОтчета)");
	
	Запрос.УстановитьПараметр("Организация", 	КонсолидируемаяОрганизация);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий); 
	Запрос.УстановитьПараметр("ПериодОтчета", 	ПериодОтчета);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КонсолидирующаяОрганизация");
	
КонецФункции

Функция ПолучитьВсеОрганизацииПериметров(КонсолидируемаяОрганизация, Сценарий, ПериодОтчета) Экспорт
	
	Перем ТаблицаОрганизаций;
	
	МассивПериметров=ПолучитьВсеКонсолидирующиеОрганизации(КонсолидируемаяОрганизация, Сценарий, ПериодОтчета);
	
	ПоляВыбора = Новый Структура("ДоляВладения,ВидОтношенияКГруппе", "ЭффективнаяДоляРасчет", "ВидОтношенияКГруппе");
	
	МассивОрганизаций=Новый Массив;
	
	Для Каждого Периметр ИЗ МассивПериметров Цикл
		
		Отбор=Новый Структура("КонсолидирующаяОрганизация,ПериодОтчета,Сценарий",Периметр,ПериодОтчета,Сценарий);
		ТекСоставПериметра=ПолучитьДанныеРегламента(Отбор, ПоляВыбора);
		
		Если ТаблицаОрганизаций=Неопределено Тогда
			
			ТаблицаОрганизаций=ТекСоставПериметра.СкопироватьКолонки();
			
		КонецЕсли;
		
		Для Каждого Строка ИЗ ТекСоставПериметра Цикл
			
			Если Строка.ВидОтношенияКГруппе=Перечисления.ВидыОтношенийКГруппе.Дочернее
				И (НЕ Строка.ИндивидуальнаяОрганизация=КонсолидируемаяОрганизация)
				И ТаблицаОрганизаций.Найти(Строка.ИндивидуальнаяОрганизация,"ИндивидуальнаяОрганизация")=Неопределено
				И (НЕ Строка.ИндивидуальнаяОрганизация.ЭлиминирующаяОрганизация) Тогда
				
				НоваяСтрока=ТаблицаОрганизаций.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ?(ТаблицаОрганизаций=Неопределено ИЛИ ТаблицаОрганизаций.Количество()=0,Неопределено,ТаблицаОрганизаций); 
	
КонецФункции // ПолучитьВсеОрганизацииПериметров()


#Область РегламентИПроцесс

Функция ПолучитьСоответствиеСценариюПериоду(Сценарий, Период, Имя)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЗначениеЗаполнено(Период) Тогда	
		Возврат Неопределено;		
	КонецЕсли;	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УправлениеПериодомСценария.Ссылка КАК УправлениеОтчетнымПериодом,
	|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияРегламентаПодготовкиОтчетности
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПериодСценария.Периодичность = &Периодичность
	|	И УправлениеПериодомСценария.ПериодСценария.ДатаНачала <= &ПериодОтчетаДатаНачала
	|	И УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания >= &ПериодОтчетаДатаОкончания";

		
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаНачала",Период.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаОкончания",Период.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность",Период.Периодичность);
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка[Имя];
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДокументУправленияПериодомСценария(Сценарий, Период) Экспорт
	
	Возврат ПолучитьСоответствиеСценариюПериоду(Сценарий, Период, "УправлениеОтчетнымПериодом");
	
КонецФункции

Функция ОпределитьДокументУправленияПериодомСценария(Сценарий,Период,ЭталонныйДокумент=Неопределено,ПериодСценарияОкончание=Неопределено,ВерсияРегламента = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
		
	Если ЗначениеЗаполнено(ЭталонныйДокумент) Тогда	
		НовыйДокумент=ЭталонныйДокумент.Скопировать();	
	Иначе	
		НовыйДокумент=Документы.УправлениеПериодомСценария.СоздатьДокумент();
		НовыйДокумент.ВерсияОрганизационнойСтруктуры = ВерсияРегламента;
		НовыйДокумент.ПериодСценария=Период;
		НовыйДокумент.Сценарий=Сценарий;	
	КонецЕсли;
	
	НовыйДокумент.Дата=ТекущаяДата();
	НовыйДокумент.УстановитьНовыйНомер();	
	НовыйДокумент.ПериодСценария=Период;
	НовыйДокумент.ПериодСценарияОкончание=Период;
	
	ЭталонныйДокумент_ = Неопределено;
	
	Если  НЕ ЗначениеЗаполнено(Сценарий.Периодичность) Тогда   //Ищем по совпадению периода сценария
		
		Если (НЕ ЭталонныйДокумент=Неопределено)
			И ЭталонныйДокумент.Сценарий=Сценарий И ЭталонныйДокумент.ПериодСценария=Период Тогда	
			Возврат ЭталонныйДокумент;	
		Иначе
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
			|	УправлениеПериодомСценария.Ссылка,
			|	УправлениеПериодомСценария.ПериодСценария,
			|	УправлениеПериодомСценария.Сценарий
			|ИЗ
			|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
			|ГДЕ
			|	УправлениеПериодомСценария.Сценарий = &Сценарий
			|	И УправлениеПериодомСценария.ПериодСценария.Периодичность = &Периодичность
			|	И УправлениеПериодомСценария.ПериодСценария.ДатаНачала <= &ДатаНачала
			|
			|УПОРЯДОЧИТЬ ПО
			|	УправлениеПериодомСценария.ПериодСценария.ДатаНачала УБЫВ";
			
			Запрос.УстановитьПараметр("Сценарий",Сценарий);
			Запрос.УстановитьПараметр("Периодичность",Период.Периодичность);
			Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда	
				Если Результат.ПериодСценария=Период И Результат.Сценарий=Сценарий Тогда	
					Возврат Результат.Ссылка;		
				Иначе		
					ЭталонныйДокумент_=Результат.Ссылка;		
				КонецЕсли;	
			КонецЕсли;			
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ЭталонныйДокумент_) Тогда		
			НовыйДокумент=ЭталонныйДокумент_.Скопировать();	
		Иначе		
			НовыйДокумент=Документы.УправлениеПериодомСценария.СоздатьДокумент();
			НовыйДокумент.ВерсияОрганизационнойСтруктуры = ВерсияРегламента;
			НовыйДокумент.ПериодСценария=Период;
			НовыйДокумент.Сценарий=Сценарий;	
		КонецЕсли;
		
		НовыйДокумент.Дата=ТекущаяДата();
		НовыйДокумент.УстановитьНовыйНомер();
		
		НовыйДокумент.ПериодСценария=Период;
		НовыйДокумент.ПериодСценарияОкончание=Период;
		
		Если ЗначениеЗаполнено(ЭталонныйДокумент) И ЭталонныйДокумент.ЗапускатьПроцесс Тогда
			НовыйДокумент.ДатаНачалаПроцесса=УправлениеОтчетамиУХ.ПолучитьДатуСоСмещением(ЭталонныйДокумент.ДатаНачалаПроцесса, Период.Периодичность, ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(Период.ДатаНачала,ЭталонныйДокумент.ПериодСценария.ДатаНачала,Период.Периодичность));
		КонецЕсли; 
		
	Иначе       //Ищем по пересечению периода начала и периода окончания
		
		Если (НЕ ЭталонныйДокумент=Неопределено)
			И ЭталонныйДокумент.Сценарий=Сценарий
			И ЭталонныйДокумент.ПериодСценария.Периодичность = Сценарий.Периодичность
			И ЭталонныйДокумент.ПериодСценария.ДатаНачала<=Период.ДатаНачала 
			И ЭталонныйДокумент.ПериодСценарияОкончание.ДатаНачала>=Период.ДатаНачала Тогда
			
			Возврат ЭталонныйДокумент;	
		Иначе
			
			Запрос=Новый Запрос;
			Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
			|	УправлениеПериодомСценария.Ссылка,
			|	УправлениеПериодомСценария.ПериодСценария,
			|	УправлениеПериодомСценария.Сценарий
			|ИЗ
			|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
			|ГДЕ
			|	УправлениеПериодомСценария.Сценарий = &Сценарий
			|	И УправлениеПериодомСценария.ПериодСценария.Периодичность = &Периодичность
			|	И УправлениеПериодомСценария.ПериодСценария.ДатаНачала <= &ДатаНачала
			|	И УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаНачала >= &ДатаНачала
			|
			|УПОРЯДОЧИТЬ ПО
			|	УправлениеПериодомСценария.ПериодСценария.ДатаНачала УБЫВ";
			
			Запрос.УстановитьПараметр("Сценарий",Сценарий);
			Запрос.УстановитьПараметр("Периодичность",Сценарий.Периодичность);
			Запрос.УстановитьПараметр("ДатаНачала",Период.ДатаНачала);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Если Результат.Следующий() Тогда	
				Если  Результат.Сценарий=Сценарий Тогда	
					Возврат Результат.Ссылка;		
				Иначе			
					ЭталонныйДокумент_=Результат.Ссылка;			
				КонецЕсли;		
			КонецЕсли;				
		КонецЕсли;
	
		Если ЗначениеЗаполнено(ЭталонныйДокумент_) Тогда	
			НовыйДокумент=ЭталонныйДокумент_.Скопировать();	
		Иначе		
			НовыйДокумент=Документы.УправлениеПериодомСценария.СоздатьДокумент();
			НовыйДокумент.ВерсияОрганизационнойСтруктуры = ВерсияРегламента;
			НовыйДокумент.Сценарий=Сценарий;	
		КонецЕсли;
		
		НовыйДокумент.Дата=ТекущаяДата();
		НовыйДокумент.УстановитьНовыйНомер();
		
		НовыйДокумент.ПериодСценария=Период;
		НовыйДокумент.ПериодСценарияОкончание=?(ЗначениеЗаполнено(ПериодСценарияОкончание),ПериодСценарияОкончание,Период);

		Если ЗначениеЗаполнено(ЭталонныйДокумент) И ЭталонныйДокумент.ЗапускатьПроцесс Тогда
			НовыйДокумент.ДатаНачалаПроцесса=УправлениеОтчетамиУХ.ПолучитьДатуСоСмещением(ЭталонныйДокумент.ДатаНачалаПроцесса, Период.Периодичность, ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(Период.ДатаНачала,ЭталонныйДокумент.ПериодСценария.ДатаНачала,Период.Периодичность));
		КонецЕсли; 
	
	КонецЕсли;
		
	Попытка	
		НовыйДокумент.Записать(РежимЗаписиДокумента.Запись);
		Возврат НовыйДокумент.Ссылка; 	
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось создать документ ""Управление периодом сценария"" для периода %1 и сценария %2'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Период, Сценарий),,, СтатусСообщения.Внимание);
		КонецЕсли;
		
		Возврат Неопределено;	
	КонецПопытки;
	
КонецФункции // СоздатьДокументУправленияПериодомСценария()

Функция ПолучитьВерсиюРегламентаПодготовкиОтчетности(Сценарий, Период) Экспорт
	
	Возврат ПолучитьСоответствиеСценариюПериоду(Сценарий, Период, "ВерсияРегламентаПодготовкиОтчетности");
	
КонецФункции

Функция ПолучитьТаблицуКурсов(Сценарий, ПериодСценария) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПериодическиеКурсы.Валюта,
	|	ПериодическиеКурсы.Кратность,
	|	ПериодическиеКурсы.СреднийКурсЗаПериод,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсы.КурсНаНачалоПериода,
	|	ПериодическиеКурсы.КурсНаКонецПериода,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода
	|ИЗ
	|	РегистрСведений.ПериодическиеКурсы КАК ПериодическиеКурсы
	|ГДЕ
	|	ПериодическиеКурсы.Сценарий = &Сценарий
	|	И ПериодическиеКурсы.ПериодКурса = &ПериодКурса";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодКурса", ПериодСценария);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция пересчитывает сумму из одной валюты в другую по переданному виду курса
// 
// Сумма            - Сумма, которую необходимо пересчитать
// Валюта           - Валюта, из которой пересчитываем
// ВалютаПересчета  - Валюта, в которую пересчитываем
// ВидКурса         - Вид курса
// Сценарий         - Сценарий
// ПериодСценария   - Период сценария
// ДатаКурса        - Дата курса, для расчета вида курса "Курс на момент начисления"
// Отказ            - Отказ
// ШапкаОшибки      - Шапка ошибки
// КэшТаблицыКурсов - Параметр, в который возвращается таблица курсов документа версия состава курсов, используется для кэширования иногократного вызова функции
//
// Возвращаемое значение: сумма персчитанная по курсу
//
Функция ПересчитатьПоКурсу(Сумма, Валюта, ВалютаПересчета, ВидКурса, Сценарий = Неопределено, ПериодСценария = Неопределено, ДатаКурса = Неопределено, Отказ = Ложь, ШапкаОшибки = "", КэшТаблицыКурсов = Неопределено, Курс = Неопределено) Экспорт
	
	Если Валюта = ВалютаПересчета Тогда
		Возврат Сумма;
	КонецЕсли;
	
	Если ВидКурса = Перечисления.ВидыКурсов.КурсНаМоментНачисления Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КурсыВалют.Курс КАК Курс,
		|	КурсыВалют.Кратность КАК Кратность,
		|	КурсыВалютПересчета.Курс КАК КурсПересчета,
		|	КурсыВалютПересчета.Кратность КАК КратностьПересчета
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта = &Валюта) КАК КурсыВалют,
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаКурса, Валюта = &ВалютаПересчета) КАК КурсыВалютПересчета";
		
		Запрос.УстановитьПараметр("ДатаКурса"      , ДатаКурса);
		
		Запрос.УстановитьПараметр("Валюта"         , Валюта);
		Запрос.УстановитьПараметр("ВалютаПересчета", ВалютаПересчета);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Если Выборка.Следующий() Тогда
			Курс = (Выборка.Курс/Выборка.Кратность)/(Выборка.КурсПересчета/Выборка.КратностьПересчета);
			Возврат Сумма * Курс;
		Иначе
			
			СтрокаШаблона = НСтр("ru = ' - не определен %1 при пересчете из валюты: ""%2"" в валюту ""%3"" на дату: %4!'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидКурса, Валюта, ВалютаПересчета, ДатаКурса), Отказ, ШапкаОшибки);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат Сумма;
		КонецЕсли;
			
	Иначе
		Если ВидКурса = Перечисления.ВидыКурсов.КурсНаНачалоПериода Тогда
			ИмяРесурса = "КурсНаНачалоПериода";
		ИначеЕсли ВидКурса = Перечисления.ВидыКурсов.КурсНаКонецПериода Тогда
			ИмяРесурса = "КурсНаКонецПериода";
		ИначеЕсли ВидКурса = Перечисления.ВидыКурсов.СреднийКурсЗаПериод Тогда
			ИмяРесурса = "СреднийКурсЗаПериод";
		ИначеЕсли ВидКурса = Перечисления.ВидыКурсов.СреднийКурсЗаПериодМСФО Тогда
			ИмяРесурса = "СреднийКурсЗаПериодМСФО";
		Иначе
			
			СтрокаШаблона = НСтр("ru = ' - неверно определен вид курса: ""%1""!'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидКурса), Отказ, ШапкаОшибки, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат Сумма;
		КонецЕсли;
		
		Если КэшТаблицыКурсов = Неопределено Тогда
			
			КэшТаблицыКурсов = Новый ТаблицаЗначений;
			КэшТаблицыКурсов.Колонки.Добавить("ПериодСценария", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
			КэшТаблицыКурсов.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			КэшТаблицыКурсов.Колонки.Добавить("Кратность", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 0));
			КэшТаблицыКурсов.Колонки.Добавить("СреднийКурсЗаПериод", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
			КэшТаблицыКурсов.Колонки.Добавить("СреднийКурсЗаПериодМСФО", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
			КэшТаблицыКурсов.Колонки.Добавить("КурсНаНачалоПериода", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
			КэшТаблицыКурсов.Колонки.Добавить("КурсНаКонецПериода", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
			КэшТаблицыКурсов.Колонки.Добавить("СреднеквадратичныйКурсЗаПериод", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10, 4));
			
			КэшТаблицыКурсов.Индексы.Добавить("ПериодСценария,Валюта");
			
		КонецЕсли;
		
		ТекКэш = КэшТаблицыКурсов.НайтиСтроки(Новый Структура("ПериодСценария", ПериодСценария));
		
		Если ТекКэш.Количество() = 0 Тогда
			
			ТаблицаКурсов = ПолучитьТаблицуКурсов(Сценарий, ПериодСценария);
			
			Если ТаблицаКурсов.Количество()>0 Тогда
				
				Для Каждого Элемент Из ТаблицаКурсов Цикл
					НоваяСтрока = КэшТаблицыКурсов.Добавить();
					НоваяСтрока.ПериодСценария = ПериодСценария;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент);
				КонецЦикла;
				
			Иначе
				
				СтрокаШаблона = НСтр("ru = ' - не определен %1 при пересчете из валюты: ""%2"" в валюту ""%3"" по сценарию ""%4"" в периоде ""%5""!'");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидКурса, Валюта, ВалютаПересчета, Сценарий, ПериодСценария), Отказ, ШапкаОшибки);
				КонецЕсли;
				
				Отказ = Истина;
				Возврат Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаКурса          = КэшТаблицыКурсов.НайтиСтроки(Новый Структура("ПериодСценария, Валюта", ПериодСценария, Валюта));
		СтрокаКурсаПересчета = КэшТаблицыКурсов.НайтиСтроки(Новый Структура("ПериодСценария, Валюта", ПериодСценария, ВалютаПересчета));
		
		Если СтрокаКурса.КОличество() = 0 или СтрокаКурсаПересчета.Количество() = 0 Тогда
			
			СтрокаШаблона = НСтр("ru = ' - не определен %1 при пересчете из валюты: ""%2"" в валюту ""%3"" по сценарию ""%4"" в периоде ""%5""!'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидКурса, Валюта, ВалютаПересчета, Сценарий, ПериодСценария), Отказ, ШапкаОшибки);
			КонецЕсли;
			
			Отказ = Истина;
			Возврат Сумма;
		КонецЕсли; 
		Курс = (СтрокаКурса[0][ИмяРесурса]/СтрокаКурса[0].Кратность)/(СтрокаКурсаПересчета[0][ИмяРесурса]/СтрокаКурсаПересчета[0].Кратность);
		Возврат Сумма * Курс ;
		
	КонецЕсли;
	
	
КонецФункции // () 

#КонецОбласти

#Область ДокументыУправленияПериодомСценария

// Процедура устанавливает/снимает пометку на удаление настраиваемых отчетов по периоду и сценарию
//
// Сценарий         - Сценарий
// ПериодСценария   - Период сценария
// ПометкаУдаления  - если Истина, настраиваемые отчеты помечаются на удаление.
//                         Ложь  - иначе
//
Процедура ПометитьНаУдалениеНастраиваемыеОтчеты(Сценарий, ПериодСценария, ПометкаУдаления = Истина) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
	|	И НастраиваемыйОтчет.ПометкаУдаления = &ПометкаУдаления");
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("ПометкаУдаления", Не ПометкаУдаления);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект.УстановитьПометкуУдаления(ПометкаУдаления);
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОпределитьВалютыОтчетаПоПараметрам(Сценарий,ПериодСценария,Организация,ВидОтчета) Экспорт
	
	ВерсияРегламентаПодготовкиОтчетности=ПолучитьВерсиюРегламентаПодготовкиОтчетности(Сценарий, ПериодСценария);
	
	Если ЗначениеЗаполнено(ВерсияРегламентаПодготовкиОтчетности) Тогда
		
		Возврат УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ВерсияРегламентаПодготовкиОтчетности, ВидОтчета, Организация);
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УдалитьПромежуточныеВерсииЭкземпляровОтчета(Сценарий, ПериодСценария) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НЕ НастраиваемыйОтчет.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодСценария);
	
	Результат=Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		
		ОтчетОбъект=Результат.Ссылка.ПолучитьОбъект();
		ОтчетОбъект.ВсегдаЗаполнятьАналитики=Истина;
		ОтчетОбъект.ИнициализироватьКонтекст();
		ОтчетОбъект.УдалитьПромежуточныеВерсии=Истина;
		
		Попытка
			ОтчетОбъект.Записать();
		Исключение
			
		КонецПопытки;
		
	КонецЦикла;
		
КонецПроцедуры // УдалитьПромежуточныеВерсииЭкземпляровОтчета()

#КонецОбласти

#Область ЭтапыПроцесса

Функция ОстанавливатьсяПриОшибке(Отладка, ОстанавливатьсяПриОшике)
	
	Если Отладка Тогда
		Если ОстанавливатьсяПриОшике Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ЭтапУтвержден(Период, Сценарий, Этап)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Этап", Этап);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Утверждено,
	|	СУММА(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК НеУтверждено
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Сценарий = &Сценарий
	|				И ЭтапПроцесса = &Этап) КАК СостоянияВыполненияПроцессовСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НеУтверждено = 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСостояниеЭтапа(Период, Сценарий, Этап, Расширенно = Ложь) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СостоянияВыполненияПроцессовСрезПоследних.Организация,
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа,
	|	СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала,
	|	СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания,
	|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап";
	Если Расширенно Тогда
		ТекстЗапроса = ТекстЗапроса + ",
		|СостоянияВыполненияПроцессовСрезПоследних.Организация.ТипОрганизации";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Сценарий = &Сценарий
	|				И ЭтапПроцесса = &Этап) КАК СостоянияВыполненияПроцессовСрезПоследних";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Период", 	Период);
	Запрос.УстановитьПараметр("Сценарий",	Сценарий);
	Запрос.УстановитьПараметр("Этап", 		Этап);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
		
КонецФункции

Функция ОбработатьЭкземплярыОтчетовЭтапаПоОрганизации(Период, Сценарий, Организация, ВидОтчета, ДатаНачала, Отладка, ОстанавливатьсяПриОшибке)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.Ссылка КАК НастраиваемыйОтчет,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
	|	НастраиваемыйОтчет.ШаблонОтчета КАК ШаблонОтчета,
	|	НастраиваемыйОтчет.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(РегистрСогласованияОбъектов.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.ПустаяСсылка)) КАК Состояние,
	|	НастраиваемыйОтчет.НеВноситьИзменения КАК НеВноситьИзменения
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект.Организация = &Организация
	|					И Объект.ПериодОтчета = &ПериодОтчета) КАК РегистрСогласованияОбъектов
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСогласованияОбъектов.Объект
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",       Период);
	Запрос.УстановитьПараметр("Сценарий",           Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета",          ВидОтчета);
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
			
		ВерсияОрганизационнойСтруктуры = ПолучитьВерсиюРегламентаПодготовкиОтчетности(Сценарий, Период);
		
		ДанныеДляЗаполнения = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета, Сценарий, Организация, Период, ВерсияОрганизационнойСтруктуры);			
	
		НастраиваемыйОтчет = Документы.НастраиваемыйОтчет.СоздатьДокумент();
		
		Если Отладка Тогда
			НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей = Истина;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НастраиваемыйОтчет, ДанныеДляЗаполнения);
		
		Если НастраиваемыйОтчет.ПравилоОбработки = Неопределено Тогда
			
			СтрокаШаблона = НСтр("ru = 'Формируемый отчет для вида отчета: %1 не может быть записан. Не установлено правило обработки по умолчанию.'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета.Наименование));
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если НастраиваемыйОтчет.ПравилоОбработки.ТипБД <> Справочники.ТипыБазДанных.ПустаяСсылка() Тогда
			
			НастраиваемыйОтчет.ИспользуемаяИБ = ДанныеДляЗаполнения.ВИБ;
			
			Если НЕ ЗначениеЗаполнено(НастраиваемыйОтчет.ИспользуемаяИБ) Тогда
				
				СтрокаШаблона = НСтр("ru = 'Формируемый отчет для вида отчета: %1 не может быть записан. Не установлена используемая внешняя информационная база по умолчанию.'");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ВидОтчета.Наименование));
				КонецЕсли;
				
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		НастраиваемыйОтчет.ШаблонОтчета = ДанныеДляЗаполнения.БланкОтчета;
		НастраиваемыйОтчет.мНеПрерыватьИмпортПриОшибкахВычисления = Ложь; 
		
		НастраиваемыйОтчет.УстановитьНовыйНомер();
		НастраиваемыйОтчет.Дата           = ?(ЗначениеЗаполнено(ДатаНачала),ДатаНачала,ТекущаяДата());
		НастраиваемыйОтчет.ВидОтчета      = ВидОтчета;
		НастраиваемыйОтчет.Организация    = Организация;
		НастраиваемыйОтчет.Сценарий       = Сценарий;
		НастраиваемыйОтчет.ПериодОтчета   = Период;
		
		СтруктураВалют = УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ВерсияОрганизационнойСтруктуры, ВидОтчета, Организация);
		НастраиваемыйОтчет.ОсновнаяВалюта = СтруктураВалют.ОсновнаяВалюта;
		
		Для Каждого ДопВалюта Из СтруктураВалют.ДополнительныеВалюты Цикл
			НастраиваемыйОтчет.ДополнительныеВалюты.Добавить().Валюта = ДопВалюта.Значение;
		КонецЦикла;
		
		НастраиваемыйОтчет.Заполнить(ДанныеДляЗаполнения.БланкОтчета);
		
		Если НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию() Тогда
			НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Перечисления.СостоянияОтчетов.Подготовлен);
		Иначе
			НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Перечисления.СостоянияОтчетов.Выполняется);
		КонецЕсли;
		
		Попытка
			НастраиваемыйОтчет.Записать();
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, НастраиваемыйОтчет),,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Возврат Ложь;
		КонецПопытки;
		
	Иначе
		
		Результат=Рез.Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НастраиваемыйОтчет = Результат.НастраиваемыйОтчет.ПолучитьОбъект();
			
			Если Отладка Тогда
				ЧтениеНеактуальныхЗаписей_Исх = НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей;
				НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей = Истина;
			КонецЕсли;
			
			Если Результат.ПометкаУдаления Тогда
				НастраиваемыйОтчет.ПометкаУдаления       = Ложь;
				Если Результат.Состояние = Перечисления.СостоянияОтчетов.Подготовлен
					ИЛИ Результат.Состояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
					
					НастраиваемыйОтчет.ОбменДанными.Загрузка = Истина;
					НастраиваемыйОтчет.ПроверкаПриЗаписи             = Ложь;
					НастраиваемыйОтчет.ФормированиеДвиженийПриЗаписи = Ложь;
					
				Иначе
					
					РезультатЗаполнения = НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию();
					
					Если Не Отладка Тогда
						
						Если РезультатЗаполнения Тогда							
							НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Перечисления.СостоянияОтчетов.Подготовлен);
						Иначе							
							НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Перечисления.СостоянияОтчетов.Выполняется);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Результат.Состояние = Перечисления.СостоянияОтчетов.Подготовлен
				ИЛИ Результат.Состояние = Перечисления.СостоянияОтчетов.Утвержден
				ИЛИ Результат.НеВноситьИзменения Тогда
				
				Продолжить;
				
			Иначе
				
				РезультатЗаполнения = НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию();
				
				Если НЕ Отладка Тогда
					
					Если РезультатЗаполнения Тогда
						НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Перечисления.СостоянияОтчетов.Подготовлен);
					Иначе
						НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Перечисления.СостоянияОтчетов.Выполняется);
					КонецЕсли;

				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				
				Если Отладка Тогда
					НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей = ЧтениеНеактуальныхЗаписей_Исх;
				КонецЕсли;
				
				НастраиваемыйОтчет.Записать();
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1'");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, НастраиваемыйОтчет),,, СтатусСообщения.Внимание);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецПопытки; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

Функция ОбработатьКорректировкиПоПараметрам(ВидКорректировки,
											ПериодСценария, 
											Сценарий, 
											Организация, 
											ШаблонКорректировки, 
											ДатаНачалаРасчетная,
											ДокументКорректировки=Неопределено,
											ПериодОтражения=Неопределено,
											ИсходныйДокумент=Неопределено) Экспорт
		
	Если НЕ Метаданные.ОбщиеМодули.Найти("КорректировкиЗначенийПоказателей32")=Неопределено Тогда
		
		МодульКорректировки=ОбщегоНазначения.ОбщийМодуль("КорректировкиЗначенийПоказателей32");
		Возврат МодульКорректировки.ОбработатьКорректировкиПоПараметрам(ВидКорректировки,
											ПериодСценария, 
											Сценарий, 
											Организация, 
											ШаблонКорректировки, 
											ДатаНачалаРасчетная,
											ДокументКорректировки,
											ПериодОтражения,
											ИсходныйДокумент);
											
		
	Иначе
		
		Возврат Обработки.КорректировкиЗначенийПоказателей.ОбработатьКорректировкиПоПараметрам(ВидКорректировки,
											ПериодСценария, 
											Сценарий, 
											Организация, 
											ШаблонКорректировки, 
											ДатаНачалаРасчетная,
											ДокументКорректировки,
											ПериодОтражения,
											ИсходныйДокумент);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область ПроцедурыНачальногоФормированияОтчетовИРучныхОперацийПриЗапускеПроцесса

// Процедура создает при необходимости, заполняет по регламенту и записывает
// документ(ы), для которых определены правила заполнения
// Параметры
// - ВерсияРегламентаПодготовкиОтчетности: Справочник "ВерсииРегламентовПодготовкиОтчетности"
// - МассивКлючевыхНастроек: массив структур следующего вида:
//		- Организация
//		- ПериодОтчета
//		- Сценарий
//		- ОсновнаяВалюта
//		- ДокументБД: 
//		- ШаблонДокументаБД: если документы загружаются не через универсальный импорт, тогда значение реквизита, имя которого указано в реквизите "РеквизитШаблонаДокумета" справочника "ДокументыБД" 
//		- ДокументСсылка: заполняется в случае, когда документ уже создан и записан; в данном случае он будет перезаполнен
//		- ДокументОбъект: передается объект в случае, когда необходимо вручную обновить объект
//		- ПробныйПроцесс: добавляется в случае выполнения пробного процесса подготовки отчетности
//
Процедура ОбработатьДокументыПоРегламенту(МассивКлючевыхНастроек,ВерсияРегламентаПодготовкиОтчетности=Неопределено,Утвердить=Ложь) Экспорт
	
	ОбновлениеДокумента=(МассивКлючевыхНастроек.Количество()=1 И ЗначениеЗаполнено(МассивКлючевыхНастроек[0].ДокументОбъект)); 
		
	Для Каждого СтруктураНастроек ИЗ МассивКлючевыхНастроек Цикл
		
		ПробныйПроцесс=СтруктураНастроек.Свойство("ПробныйПроцесс") И СтруктураНастроек.ПробныйПроцесс=Истина;
		
		// Определим параметры поиска в случае, когда передана ссылка или объект
		
		Если ЗначениеЗаполнено(СтруктураНастроек.ДокументСсылка) ИЛИ ЗначениеЗаполнено(СтруктураНастроек.ДокументОбъект) Тогда
			
			ОбъектОбработки=?(ЗначениеЗаполнено(СтруктураНастроек.ДокументОбъект),СтруктураНастроек.ДокументОбъект,СтруктураНастроек.ДокументСсылка);
			
			СтруктураНастроек.ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию(ОбъектОбработки.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
			Если СокрЛП(СтруктураНастроек.ДокументБД.РеквизитШаблонаДокумета)<>"" Тогда
				
				СтруктураНастроек.ШаблонДокументаБД = ОбъектОбработки[СтруктураНастроек.ДокументБД.РеквизитШаблонаДокумета];
				
			Иначе	
				
				СтруктураНастроек.ШаблонДокументаБД = СтруктураНастроек.ДокументБД;
				
			КонецЕсли;
			
			Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
				ОбщийМодульМодульУправленияПроцессамиУХ = ОбщегоНазначения.ОбщийМодуль("МодульУправленияПроцессамиУХ");
				СтруктураИсточника = ОбщийМодульМодульУправленияПроцессамиУХ.ПолучитьСценарийПериодПоИсточнику(ОбъектОбработки);
			Иначе
				СтруктураИсточника = УправлениеРабочимиПроцессамиУХ.ПолучитьСценарийПериодПоИсточникуМСФО(ОбъектОбработки);
			КонецЕсли;
			СтруктураНастроек.Сценарий		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИсточника, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
			СтруктураНастроек.Организация	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИсточника, "Организация", Справочники.Организации.ПустаяСсылка());
			СтруктураНастроек.ПериодОтчета	= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураИсточника, "Период", Справочники.Периоды.ПустаяСсылка());
			
		КонецЕсли;
		
		Если ВерсияРегламентаПодготовкиОтчетности=Неопределено Тогда
			
			КонтекстПроцесса 		= ПолучитьКонтекстУправленияПериодомСценария(СтруктураНастроек.Сценарий,СтруктураНастроек.ПериодОтчета);
			РабочаяВерсияРегламента	= КонтекстПроцесса.ВерсияОрганизационнойСтруктуры;
			
			Если РабочаяВерсияРегламента=Неопределено Тогда
							
				СтрокаШаблона = НСтр("ru = 'Не удалось определить версию регламента подготовки отчетности для сценария %1 и периода %2.
					|Обработка документов не выполнена.'");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СтруктураНастроек.Сценарий, СтруктураНастроек.ПериодОтчета),,, СтатусСообщения.Внимание);
				КонецЕсли;
								
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			РабочаяВерсияРегламента	= ВерсияРегламентаПодготовкиОтчетности;
			
		КонецЕсли;
		
		// Определим настройки обработки документов по версии регламента
		
		Запрос = УправлениеОтчетамиУХ.ИнициализироватьЗапрос(РабочаяВерсияРегламента,,,,СтруктураНастроек.ДокументБД);
		
		ТаблицаВыверки 			= УправлениеОтчетамиУХ.ПолучитьТаблицуПолномочий(СтруктураНастроек.ПериодОтчета, СтруктураНастроек.Сценарий, РабочаяВерсияРегламента,Запрос,,СтруктураНастроек.Организация,,,,,,,,"Данные");

		
		СтруктураПоиска=Новый Структура;
		СтруктураПоиска.Вставить("Организация",	СтруктураНастроек.Организация);
		СтруктураПоиска.Вставить("ВидОтчета",	СтруктураНастроек.ШаблонДокументаБД);
		СтруктураПоиска.Вставить("ДокументБД",	СтруктураНастроек.ДокументБД);
		
		МассивНастроек=ТаблицаВыверки.НайтиСтроки(СтруктураПоиска);
		
		Если МассивНастроек.Количество()=0 Тогда
							
			СтрокаШаблона = НСтр("ru = 'Версия регламента %1 не содержит настроек для заполнения документа %2 по шаблону %3.
				|Обработка документов не выполнена.'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, РабочаяВерсияРегламента, СтруктураНастроек.ДокументБД, СтруктураНастроек.ШаблонДокументаБД),,, СтатусСообщения.Внимание);
			КонецЕсли;
		
			Возврат;
			
		КонецЕсли;
		
		Если СтруктураНастроек.ДокументБД.Наименование="НастраиваемыйОтчет" Тогда
			
			ТаблицаВалютОтчетности 	= УправлениеОтчетамиУХ.ПолучитьТаблицуВалютДляВерсииОрганизационнойСтруктуры(РабочаяВерсияРегламента);
			
		Иначе 
			
			ТаблицаВалютОтчетности = Новый ТаблицаЗначений;
			
			ТаблицаВалютОтчетности.Колонки.Добавить("Организация"         , Новый ОписаниеТипов("СправочникСсылка.Организации"));
			ТаблицаВалютОтчетности.Колонки.Добавить("ВидОтчета"           , );
			ТаблицаВалютОтчетности.Колонки.Добавить("ОсновнаяВалюта"      , Новый ОписаниеТипов("СправочникСсылка.Валюты"));
			ТаблицаВалютОтчетности.Колонки.Добавить("ДополнительныеВалюты", Новый ОписаниеТипов("СписокЗначений"));
			
			НоваяСтрока=ТаблицаВалютОтчетности.Добавить();
			НоваяСтрока.Организация		= СтруктураНастроек.Организация;
			НоваяСтрока.ОсновнаяВалюта	= ?(ЗначениеЗаполнено(СтруктураНастроек.ОсновнаяВалюта),СтруктураНастроек.ОсновнаяВалюта,СтруктураНастроек.Организация.ФункциональнаяВалюта);
			
		КонецЕсли;		
			
		Если СтруктураНастроек.ДокументБД.ЕстьУниверсальныйИмпорт Тогда // Вызываем обработку универсального импорта объектов
			
			ОбработатьДокументыУниверсальногоИмпорта(СтруктураНастроек,МассивНастроек[0],ТаблицаВалютОтчетности);
			Продолжить;
						
		ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ДокументОбъект) Тогда
			
			РабочийОбъект = СтруктураНастроек.ДокументОбъект;
			
		ИначеЕсли ЗначениеЗаполнено(СтруктураНастроек.ДокументСсылка) Тогда
			
			РабочийОбъект = СтруктураНастроек.ДокументСсылка.ПолучитьОбъект();
			
		Иначе
			
			ТЗДетальныеЗаписи = УправлениеРабочимиПроцессамиУХ.ПолучитьКонсолидирующиеОрганизацииРегламента(СтруктураНастроек.ПериодОтчета, СтруктураНастроек.Сценарий);
			КонсолидирующаяОрганизация = УправлениеРабочимиПроцессамиУХ.ПолучитьКонсолидирующуюОрганизацию(
																	СтруктураНастроек.Организация,
																	СтруктураНастроек.Сценарий, 
																	СтруктураНастроек.ПериодОтчета);
			СтруктураНастроек.Вставить("ПериметрДляЭлиминации", КонсолидирующаяОрганизация);														
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Организация", КонсолидирующаяОрганизация);
			мСтрокиВалюты = ТЗДетальныеЗаписи.НайтиСтроки(СтруктураПоиска);
			Если мСтрокиВалюты.Количество() > 0 Тогда
				ВалютаЭлиминационныхПроводок = мСтрокиВалюты[0].Валюта;
				СтруктураНастроек.Вставить("ВалютаЭлиминационныхПроводок", ВалютаЭлиминационныхПроводок);
			Иначе
				СтруктураНастроек.Вставить("ВалютаЭлиминационныхПроводок", Справочники.Валюты.ПустаяСсылка());
			КонецЕсли;
			РабочийОбъект = ПолучитьОбъектДляОбработки(СтруктураНастроек);
			
		КонецЕсли;
		
		Если РабочийОбъект <> Неопределено Тогда
			
			// Основные настройки валюты из регламента.
			
			СтрокиВалюты 					= ТаблицаВалютОтчетности.НайтиСтроки(Новый Структура("Организация",СтруктураНастроек.Организация));
			Если СтрокиВалюты.Количество()=0 Тогда
				
				СтрокаШаблона = НСтр("ru = 'Версия регламента %1 не содержит настроек для заполнения основной валюты документа %2 по шаблону %3.
					|Обработка документов не выполнена.'");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, РабочаяВерсияРегламента, СтруктураНастроек.ДокументБД, СтруктураНастроек.ШаблонДокументаБД),,, СтатусСообщения.Внимание);
				КонецЕсли;
											
				Возврат;
					
			КонецЕсли;	
			
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(РабочийОбъект, "ОсновнаяВалюта") Тогда
				РабочийОбъект.ОсновнаяВалюта 	= СтрокиВалюты[0].ОсновнаяВалюта;
			Иначе
				// Нет реквизита ОсновнаяВалюта. Не заполняем.
			КонецЕсли;
			
			Если ОбщегоНазначенияУХ.ЕстьТабличнаяЧастьОбъекта("ДополнительныеВалюты",РабочийОбъект) Тогда
				
				РабочийОбъект.ДополнительныеВалюты.Очистить();
				
				Для Каждого Элемент Из СтрокиВалюты[0].ДополнительныеВалюты Цикл
					
					РабочийОбъект.ДополнительныеВалюты.Добавить().Валюта = Элемент.Значение;
					
				КонецЦикла;
				
			КонецЕсли;
			
			РезультатОбработки = Истина;
			
			Если СтруктураНастроек.ДокументБД.Наименование="НастраиваемыйОтчет" Тогда
				
				ТребуетсяСогласование = Ложь;
				Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
				КонецЕсли;
				Если Утвердить Тогда
					Если Модуль <> Неопределено Тогда
						Модуль.ВернутьТребуетсяСогласованиеЭкземпляраОтчета(РабочийОбъект.Ссылка, ТребуетсяСогласование);
					КонецЕсли;
				КонецЕсли;
				Если Модуль <> Неопределено Тогда
					Модуль.ВыполнитьОбработкуЭкземпляраОтчета(РабочийОбъект, МассивНастроек[0], ОбновлениеДокумента, ПробныйПроцесс, Утвердить, ТребуетсяСогласование, СтруктураНастроек, РезультатОбработки);
				КонецЕсли;
				
			ИначеЕсли СтруктураНастроек.ДокументБД.Наименование="Трансляция"
				ИЛИ СтруктураНастроек.ДокументБД.Наименование="ТрансформационнаяКорректировка" Тогда
				
				РезультатОбработки = ОбработатьДокументКорректировки(СтруктураНастроек, РабочийОбъект, МассивНастроек[0], Истина);
				
			ИначеЕсли СтруктураНастроек.ДокументБД.Наименование="Элиминация" Тогда
				Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
					Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
					Модуль.ВыполитьОбработкуЭлиминации(РабочийОбъект, Утвердить, РезультатОбработки);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Документ не создан. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатОбработки = Ложь;
		КонецЕсли;
			
	КонецЦикла;	
					
КонецПроцедуры // ОбработатьДокументПоРегламенту()

// Возвращает структуру, содержащую сценарий, организацию и период по объекту ИсточникВход
// для продукта Бухгалтерия МСФО.
Функция ПолучитьСценарийПериодПоИсточникуМСФО(ИсточникВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура; 
	ПустойСценарий = Справочники.Сценарии.ПустаяСсылка();
	ПустойПериод = Справочники.Периоды.ПустаяСсылка();
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	СценарийРабочий		 = ПустойСценарий;
	ПериодРабочий		 = ПустойПериод;
	ОрганизацияРабочий	 = ПустаяОрганизация;
	// Получение сценария, организации и периода из документа.
	ТипИсточника = ТипЗнч(ИсточникВход);
	Если ТипИсточника = Тип("ДокументОбъект.НастраиваемыйОтчет") ИЛИ ТипИсточника = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		СценарийРабочий		 = ИсточникВход.Сценарий;
		ПериодРабочий		 = ИсточникВход.ПериодОтчета;
		ОрганизацияРабочий	 = ИсточникВход.Организация;
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.Трансляция") ИЛИ ТипИсточника = Тип("ДокументСсылка.Трансляция") Тогда
		СценарийРабочий		 = ИсточникВход.Сценарий;
		ПериодРабочий		 = ИсточникВход.ПериодОтчета;
		ОрганизацияРабочий	 = ИсточникВход.Организация;
	ИначеЕсли ТипИсточника = Тип("Структура") Тогда
		СценарийРабочий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "Сценарий", ПустойСценарий);
		ПериодРабочий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "Период", ПустойПериод);
		ОрганизацияРабочий	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "Организация", ПустойПериод);
	Иначе
		СценарийРабочий		 = ПустойСценарий;
		ПериодРабочий		 = ПустойПериод;
		ОрганизацияРабочий	 = ПустаяОрганизация;
	КонецЕсли;
	// Вывод результата.
	РезультатФункции.Вставить("Сценарий", СценарийРабочий);
	РезультатФункции.Вставить("Период", ПериодРабочий);
	РезультатФункции.Вставить("Организация", ОрганизацияРабочий);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСценарийПериодПоИсточникуМСФО()

Функция ОбработатьДокументыУниверсальногоИмпорта(СтруктураНастроек,Реквизиты,ТаблицаВалютОтчетности)
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ОбработкаОбъект = Обработки["ГенерацияОбъектовБД"].Создать();
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект,СтруктураНастроек,"Организация,ПериодОтчета,Сценарий");
	
	ОбработкаОбъект.ОбъектБД		=СтруктураНастроек.ДокументБД;
	ОбработкаОбъект.ПравилоИмпорта	=Реквизиты.ПравилоИмпортаОбъекта;
	ОбработкаОбъект.ДатаОбработки	=ТекущаяДата();
	ОбработкаОбъект.ИспользуемаяИБ  = Реквизиты.ВнешняяИнформационнаяБаза;
	ОбработкаОбъект.ПроводитьДокументы=Истина;
	
	СтрокиВалюты 					= ТаблицаВалютОтчетности.НайтиСтроки(Новый Структура("Организация",СтруктураНастроек.Организация));
	ОбработкаОбъект.ОсновнаяВалюта 	= СтрокиВалюты[0].ОсновнаяВалюта;
	
	Попытка
		
		ОбработкаОбъект.ОбработатьОбъектыБД();
		Возврат Истина;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;	
	
КонецФункции // ОбработатьДокументыУниверсальногоИмпорта()

Функция ОбработатьДокументКорректировки(СтруктураНастроек,РабочийОбъект,Реквизиты, ПеренестиДанныеВОбъектВход = Ложь)
	
	ОбработкаОбъект=Обработки.КорректировкиЗначенийПоказателей.Создать();
	
	ЗаполнитьЗначенияСвойств(ОбработкаОбъект,РабочийОбъект);	
	ОбработкаОбъект.ИмяОбъектаМетаданных=СтруктураНастроек.ДокументБД.Наименование;
	
	ДанныеШаблона=Обработки.УстановкаСоответствияСчетов.ПолучитьДанныеШаблона(ОбработкаОбъект.ШаблонКорректировки);
	ОбработкаОбъект.НаправлениеТрансляции=ДанныеШаблона.НаправлениеТрансляции;
	
	ОбработкаОбъект.ИнициализироватьКонтекст();
	
	Если ОбработкаОбъект.ИмяОбъектаМетаданных="ТрансформационнаяКорректировка" Тогда
		
		ОбработкаОбъект.ЗаполнитьПоШаблонуТрансформации();
		
	ИначеЕсли ОбработкаОбъект.ИмяОбъектаМетаданных="Трансляция" Тогда
		
		ОбработкаОбъект.ЗаполнитьПоШаблонуТрансляции();
		
	КонецЕсли;
	
	ОбработкаОбъект.ДанныеПараметрикиАктуальны=Ложь;
	Если ОбработкаОбъект.ДокументОбъект = Неопределено Тогда
		// Нет объекта для заполнения. Подставим рабочий объект.
		ОбработкаОбъект.ДокументОбъект = РабочийОбъект;
	Иначе
		// Объект заполнен.
	КонецЕсли;
	ОбработкаОбъект.ЗаполнитьАвтоматически();
	// Перенесём рассчитанные значения из объекта обработки в объект документа.
	Если ПеренестиДанныеВОбъектВход Тогда
		ЗаполнитьЗначенияСвойств(РабочийОбъект, ОбработкаОбъект);
	Иначе
		// Перенос не требуется.
	КонецЕсли;
	Попытка
				
		ОбработкаОбъект.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Проведение);		
		Возврат Истина;
		
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1: '");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, РабочийОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецПопытки
		
		
КонецФункции // ОбработатьДокументКорректировки() 

// Создаёт объект документа по структуре настроек и возвращает его. Когда создать не удалось,
// возвращает Неопределено.
Функция СоздатьОбъектДокумента(СтруктураНастроекВход)
	РезультатФункции = Неопределено;
	Попытка
		// Считаем значения из структуры.
		ВалютаЭлиминационныхПроводок = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ВалютаЭлиминационныхПроводок", Справочники.Валюты.ПустаяСсылка());
		ДокументБД					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ДокументБД", Справочники.ДокументыБД.ПустаяСсылка());
		КонсолидирующаяОрганизация	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериметрДляЭлиминации", Справочники.Организации.ПустаяСсылка());
		Организация					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Организация", Справочники.Организации.ПустаяСсылка());
		ПериодОтчета				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
		Сценарий					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
		// Создадим документ.
		Если ДокументБД.Наименование = "Элиминация" Тогда
			Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
				Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
				Модуль.ВыполнитьСозданиеДокументаЭлиминация(ВалютаЭлиминационныхПроводок, Организация, КонсолидирующаяОрганизация, ПериодОтчета, Сценарий, РезультатФункции);
			КонецЕсли;
		Иначе
			РезультатФункции = Документы[ДокументБД.Наименование].СоздатьДокумент();
			РезультатФункции.УстановитьНовыйНомер();
			РезультатФункции.Дата = ТекущаяДата();
			// Заполним основные измерения.
			РезультатФункции.Организация	= Организация;
			РезультатФункции.ПериодОтчета	= ПериодОтчета;
			Если НЕ РезультатФункции.Метаданные().Реквизиты.Найти("ПериодОкончания") = Неопределено Тогда
				Если СтруктураНастроекВход.Свойство("ПериодОтчетаОкончание") Тогда
					РезультатФункции.ПериодОкончания 		= СтруктураНастроекВход.ПериодОтчетаОкончание;
				КонецЕсли;
			КонецЕсли;	
			Если НЕ РезультатФункции.Метаданные().Реквизиты.Найти("УправлениеПериодом") = Неопределено Тогда
				КонтекстПроцесса 		= ПолучитьКонтекстУправленияПериодомСценария(СтруктураНастроекВход.Сценарий,СтруктураНастроекВход.ПериодОтчета);
				УОП						= КонтекстПроцесса.Ссылка;
				РезультатФункции.УправлениеПериодом =  УОП;	
				Если НЕ РезультатФункции.Метаданные().Реквизиты.Найти("ПериодОкончания") = Неопределено  Тогда
					Если  Не ЗначениеЗаполнено(РезультатФункции.ПериодОкончания) Тогда
						РезультатФункции.ПериодОкончания =  УОП.ПериодСценарияОкончание;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
				
			РезультатФункции.Сценарий		= Сценарий;
			
			// Заполним шаблон документа.
			Если НЕ ПустаяСтрока(ДокументБД.РеквизитШаблонаДокумета) Тогда
				ШаблонДокументаБД = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроекВход, "ШаблонДокументаБД", Неопределено);
				РезультатФункции[ДокументБД.РеквизитШаблонаДокумета] = ШаблонДокументаБД;
			Иначе
				// Реквизит шаблона не задан. Не заполняем его.
			КонецЕсли;
			
			Если  ДокументБД.Наименование = "НастраиваемыйОтчет" Тогда
				РезультатФункции.БланкИмпорта 	= УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта, РезультатФункции.ВидОтчета, Сценарий, Организация, ПериодОтчета);
				РезультатФункции.ШаблонОтчета 	= УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения, РезультатФункции.ВидОтчета, Сценарий, Организация, ПериодОтчета);
                РезультатФункции.ИспользуемаяИБ = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.ВнешняяИнформационнаяБаза, РезультатФункции.ВидОтчета, Сценарий, Организация, ПериодОтчета);
				РезультатФункции.СпособВывода = "Бланк";
			КонецЕсли;	
			
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать документ %ДокументБД% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументБД%", Строка(ДокументБД));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьОбъектДокумента()

// Функция возвращает объект - периодический документ для дальнейшего заполнения по регламенту
// Параметры
// - ТаблицаВалютОтчетности: Таблица валют, используемых для объекта
// - СтруктураНастроек: структура следующего вида:
//		- Организация
//		- ПериодОтчета
//		- Сценарий
//		- ОсновнаяВалюта
//		- ДокументБД: 
//		- ШаблонДокументаБД: 	если документы загружаются не через универсальный импорт, тогда значение реквизита, имя которого указано в реквизите "РеквизитШаблонаДокумета" справочника "ДокументыБД" 
//		- ДокументСсылка: 		заполняется в случае, когда документ уже создан и записан; в данном случае он будет перезаполнен
//		- ДокументОбъект: 		передается объект в случае, когда необходимо вручную обновить объект
//
Функция ПолучитьОбъектДляОбработки(СтруктураНастроек) Экспорт 
	
	// Проверим наличие в информационной базе объекта по заданным параметрам
	
	Запрос=Новый Запрос;
	Если СтруктураНастроек.ДокументБД.Наименование = "Элиминация" Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументБД.Ссылка
		|ИЗ
		|	Документ.Элиминация КАК ДокументБД
		|ГДЕ
		|	ДокументБД.ОрганизацияДляЭлиминации = &Организация
		|	И ДокументБД.ПериодОтчета = &ПериодОтчета
		|	И ДокументБД.Сценарий = &Сценарий";
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДокументБД.Ссылка
		|ИЗ
		|	Документ."+СтруктураНастроек.ДокументБД.Наименование+" КАК ДокументБД
		|ГДЕ
		|	ДокументБД.Организация = &Организация
		|	И ДокументБД.ПериодОтчета = &ПериодОтчета
		|	И ДокументБД.Сценарий = &Сценарий";
	КонецЕсли;	
	
	Если НЕ ПустаяСтрока(СтруктураНастроек.ДокументБД.РеквизитШаблонаДокумета) Тогда
		
		Запрос.Текст=Запрос.Текст+"	
		|	И ДокументБД."+СтруктураНастроек.ДокументБД.РеквизитШаблонаДокумета+" = &ШаблонДокументаБД";
		
		Запрос.УстановитьПараметр("ШаблонДокументаБД",	СтруктураНастроек.ШаблонДокументаБД);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",		СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",		СтруктураНастроек.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",			СтруктураНастроек.Сценарий);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ДокументОбъект = Результат.Ссылка.ПолучитьОбъект();
		
	Иначе
		ДокументОбъект = СоздатьОбъектДокумента(СтруктураНастроек);
	КонецЕсли;
	
	Возврат ДокументОбъект; 
	
КонецФункции // ПолучитьОбъектДляОбработки() 

Функция ПолучитьКонтекстУправленияПериодомСценария(СценарийИсточник, ПериодОтчетаИсточник) Экспорт

	Если Не ЗначениеЗаполнено(ПериодОтчетаИсточник) Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УправлениеПериодомСценария.Ссылка,
	|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры,
	|	УправлениеПериодомСценария.ДатаНачалаПроцесса
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПериодСценария.Периодичность = &Периодичность
	|	И УправлениеПериодомСценария.ПериодСценария.ДатаНачала <= &ПериодОтчетаДатаНачала
	|	И УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания >= &ПериодОтчетаДатаОкончания";
	
	Запрос.УстановитьПараметр("Сценарий",СценарийИсточник);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаНачала",ПериодОтчетаИсточник.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаОкончания",ПериодОтчетаИсточник.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность",ПериодОтчетаИсточник.Периодичность);
	
	Результат=Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Новый Структура("Ссылка,ВерсияОрганизационнойСтруктуры,ДатаНачалаПроцесса", 
									Выборка.Ссылка, Выборка.ВерсияОрганизационнойСтруктуры, Выборка.ДатаНачалаПроцесса);
		
	КонецЕсли;
	
КонецФункции

Процедура ИнициализироватьПроцесс(Знач ПериодСценария, Знач Сценарий, Знач Дата, СостоянияВыполненияПроцесса = Неопределено, мПоследователиСтрок=Неопределено, мПредшественникиСтрок=Неопределено) Экспорт
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
		Модуль.ИнициализироватьПроцесс(ПериодСценария, Сценарий, Дата, СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	КонецЕсли;
КонецПроцедуры

// Возвращает индекс строки таблицы значений либо строки таблицы формы СтрокаВход.
Функция ПолучитьИндексСтрокиТаблицы(СтрокаВход) Экспорт
	РезультатФункции = 0;
	Если ТипЗнч(СтрокаВход) = Тип("СтрокаТаблицыЗначений") Тогда
		ТаблицаВладец = СтрокаВход.Владелец();
		РезультатФункции = ТаблицаВладец.Индекс(СтрокаВход);
	Иначе	
		РезультатФункции = СтрокаВход.ПолучитьИдентификатор();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает соответствие, содержащее необходимые организации для элиминирующей
// организации ОрганизацияВход из таблицы ТаблицаОрганизацийВход.
Функция ПолучитьСоответствиеЭлиминирующейОрганизации(ОрганизацияВход, ТаблицаОрганизацийВход)
	РезультатФункции = Новый Соответствие;
	// Найдём родителя исходной организации.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ОрганизационнаяЕдиница", ОрганизацияВход);
	НайденныеСтроки = ТаблицаОрганизацийВход.НайтиСтроки(СтруктураПоиска);
	РодительИсходной = Справочники.Организации.ПустаяСсылка();
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		РодительИсходной = ТекНайденныеСтроки.ОрганизационнаяЕдиницаРодитель;
	КонецЦикла;	
	// Найдём прочие организации с тем же родителем.
	Если ЗначениеЗаполнено(РодительИсходной) Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ОрганизационнаяЕдиницаРодитель", РодительИсходной);
		НайденныеСтроки = ТаблицаОрганизацийВход.НайтиСтроки(СтруктураПоиска);
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			ТекОрганизация = ТекНайденныеСтроки.ОрганизационнаяЕдиница;
			Если ЗначениеЗаполнено(ТекОрганизация) Тогда
				ОрганизацияСовпадаетСИсходной = (ТекОрганизация = ОрганизацияВход);
				ОрганизацияЭлиминирующая = ТекОрганизация.ЭлиминирующаяОрганизация;
				Если (НЕ ОрганизацияСовпадаетСИсходной) И (НЕ ОрганизацияЭлиминирующая) Тогда
					РезультатФункции.Вставить(ТекОрганизация, Истина);
				Иначе
					// Пропускаем.
				КонецЕсли;
			Иначе
				// Пустая организация. Пропускаем.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = Новый Соответствие;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСоответствиеЭлиминирующейОрганизации()

Функция ПолучитьПериметры(Сценарий, ПериодСценария) Экспорт
	ТипОрганизацииЭлиминирующая = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий",		 Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария",	 ПериодСценария);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК ОрганизационнаяЕдиницаРодитель,
	|	СтруктураГруппы.ОрганизационнаяЕдиница,
	|	СтруктураГруппы.ОрганизационнаяЕдиница.ТипОрганизации КАК ТипОрганизации
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК СтруктураГруппы
	|		ПО СтатусыПериодовСценариев.ВерсияРегламента = СтруктураГруппы.Ссылка
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
	|ИТОГИ ПО
	|	ОрганизационнаяЕдиницаРодитель";
	
	Результат = Новый Соответствие;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаКонсолидирующих = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонсолидирующих.Следующий() Цикл
		ТекОрганизацияРодитель = ВыборкаКонсолидирующих.ОрганизационнаяЕдиницаРодитель;
		Если ЗначениеЗаполнено(ТекОрганизацияРодитель) Тогда
			СоставГруппы = Новый Соответствие;
			СоставГруппы.Вставить(ТекОрганизацияРодитель, Истина);
			
			Результат.Вставить(ТекОрганизацияРодитель, СоставГруппы);
			
			Выборка = ВыборкаКонсолидирующих.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ТипОрганизации = ТипОрганизацииЭлиминирующая Тогда
					Результат.Вставить(Выборка.ОрганизационнаяЕдиница, СоставГруппы);
				КонецЕсли;
				
				СоставГруппы.Вставить(Выборка.ОрганизационнаяЕдиница, Истина);
			КонецЦикла;
		Иначе
			// Пропускаем пустую организацию.
		КонецЕсли;
	КонецЦикла;
	// Для элиминирующих организаций добавим в группу все компании, включая зависимые.
	
	Выгрузка = РезультатЗапроса.Выгрузить();
	ТабКопия = Выгрузка.Скопировать();
	ТабКопия.Свернуть("ОрганизационнаяЕдиница, ОрганизационнаяЕдиницаРодитель");

	Для Каждого ТекРезультат Из Результат Цикл
		ТекОрганизацияРезультат = ТекРезультат.Ключ;
		Если ЗначениеЗаполнено(ТекОрганизацияРезультат) Тогда
			Если ТекОрганизацияРезультат.ЭлиминирующаяОрганизация Тогда
				СоответствиеГруппыОрганизации = ПолучитьСоответствиеЭлиминирующейОрганизации(ТекОрганизацияРезультат, ТабКопия);
				Результат.Вставить(ТекОрганизацияРезультат, СоответствиеГруппыОрганизации);
			Иначе
				// Не обновляем результирующее соответствие для прочих организаций.
			КонецЕсли;
		Иначе
			// Организация не заполнена. Пропускаем строку.
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

Функция ОбработкаДокументовКорректировки(ТекущиеДанные,ОсновныеРеквизиты, ВидДокумента, ШаблонКорректировки, ПробныйПроцесс = Ложь) Экспорт
	
	Перем Сценарий;
	Перем ПериодСценария;
	Перем ШаблонПроцесса;
	
	ОсновныеРеквизиты.Свойство("Сценарий", 			Сценарий);
	ОсновныеРеквизиты.Свойство("ПериодСценария",	ПериодСценария);
	ОсновныеРеквизиты.Свойство("ШаблонПроцесса",	ШаблонПроцесса);
	
	ВерсияОрганизационнойСтруктуры = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодСценария, Сценарий);
	
	ИмяОбъектаМетаданных = ?(ВидДокумента = Перечисления.ВидыДокументовЭтапа.ДокументыТрансляции, "Трансляция", "ТрансформационнаяКорректировка");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыКорректировки.Ссылка КАК ДокументКорректировки,
	|	ДокументыКорректировки.ПометкаУдаления КАК ПометкаУдаления,	
	|	ДокументыКорректировки.НеВноситьИзменения КАК НеВноситьИзменения
	|ИЗ
	|	Документ."+ИмяОбъектаМетаданных+" КАК ДокументыКорректировки
	|ГДЕ
	|	ДокументыКорректировки.Организация 				= &Организация
	|	И ДокументыКорректировки.ПериодОтчета 			= &ПериодОтчета
	|	И ДокументыКорректировки.Сценарий 				= &Сценарий
	|	И ДокументыКорректировки.ШаблонКорректировки 	= &ШаблонКорректировки";
	
	Запрос.УстановитьПараметр("Организация",       	 	ТекущиеДанные.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",       	ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий",           	Сценарий);
	Запрос.УстановитьПараметр("ШаблонКорректировки",	ШаблонКорректировки);
	
	ЗначениеВыполнения = Запрос.Выполнить();
	
	Если ЗначениеВыполнения.Пустой() Тогда
		
		КлючевыеРеквизиты = Новый Структура;
		КлючевыеРеквизиты.Вставить("Организация",			ТекущиеДанные.Организация);
		КлючевыеРеквизиты.Вставить("ПериодОтчета",			ПериодСценария);
		КлючевыеРеквизиты.Вставить("Сценарий",				Сценарий);
		КлючевыеРеквизиты.Вставить("ШаблонКорректировки",	ШаблонКорректировки);
		КлючевыеРеквизиты.Вставить("Состояние",				Перечисления.СостоянияОтчетов.Запланирован);
		КлючевыеРеквизиты.Вставить("ИмяОбъектаМетаданных",	ИмяОбъектаМетаданных);
		
		СтруктураВалют = УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ВерсияОрганизационнойСтруктуры, ШаблонКорректировки, ТекущиеДанные.Организация);
		
		Если ЗначениеЗаполнено(СтруктураВалют.ОсновнаяВалюта) Тогда
			ОсновнаяВалюта = СтруктураВалют.ОсновнаяВалюта;
		Иначе
			ОсновнаяВалюта = ТекущиеДанные.Организация.ФункциональнаяВалюта;
		КонецЕсли;
		
		КлючевыеРеквизиты.Вставить("ОсновнаяВалюта", ОсновнаяВалюта);
		
		ОбработкаОбъект = Обработки.КорректировкиЗначенийПоказателей.Создать();
		ЗаполнитьЗначенияСвойств(ОбработкаОбъект,КлючевыеРеквизиты);
		ОбработкаОбъект.ИнициализироватьКонтекст();
		
		Если ИмяОбъектаМетаданных = "ТрансформационнаяКорректировка" Тогда
			
			ОбработкаОбъект.ЗаполнитьПоШаблонуТрансформации();
			
		ИначеЕсли ИмяОбъектаМетаданных = "Трансляция" Тогда
			
			ОбработкаОбъект.ЗаполнитьПоШаблонуТрансляции();
			
		КонецЕсли;
		
		ОбработкаОбъект.ДанныеПараметрикиАктуальны = Ложь;
		
		ОбработкаОбъект.ЗаполнитьАвтоматически();
		
		ОбработкаОбъект.ДокументОбъект=Документы[ИмяОбъектаМетаданных].СоздатьДокумент();
		ОбработкаОбъект.ДокументОбъект.Дата=?(ЗначениеЗаполнено(ТекущиеДанные.ДатаНачалаРасчетная),ТекущиеДанные.ДатаНачалаРасчетная,ТекущаяДата());
		ОбработкаОбъект.ДокументОбъект.УстановитьНовыйНомер();
		
		ЗаполнитьЗначенияСвойств(ОбработкаОбъект.ДокументОбъект,ОбработкаОбъект,,"Ссылка");
		
		Попытка
			
			ОбработкаОбъект.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Запись,РежимЗаписиДокумента.Проведение);
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1: '");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОбработкаОбъект.ДокументОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
			КонецЕсли;
		
			Возврат Ложь;
			
		КонецПопытки;
		
	Иначе
		
		Результат=ЗначениеВыполнения.Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			ОбработкаОбъект=Обработки.КорректировкиЗначенийПоказателей.Создать();
			ДокументОбъект=Результат.ДокументКорректировки.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
				Заблокирован=Истина;
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось заблокировать объект %1: '");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ДокументОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецПопытки;
			
			ЗаполнитьЗначенияСвойств(ОбработкаОбъект,ДокументОбъект);
			
			ОбработкаОбъект.ДанныеПараметрикиАктуальны=Ложь;			
			ОбработкаОбъект.ДокументОбъект=ДокументОбъект;
			ОбработкаОбъект.ИмяОбъектаМетаданных=ИмяОбъектаМетаданных;
			
			ОбработкаОбъект.ИнициализироватьКонтекст();	
			ОбработкаОбъект.ЗаполнитьАвтоматически();

			Попытка
				
				ОбработкаОбъект.ЗаписатьРабочийОбъект(РежимЗаписиДокумента.Запись,РежимЗаписиДокумента.Запись);
				
			Исключение
				
				СтрокаШаблона = НСтр("ru = 'Не удалось записать документ %1: '");
				
				Если ЗначениеЗаполнено(СтрокаШаблона) тогда
					ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ОбработкаОбъект.ДокументОбъект) + ОписаниеОшибки(),,, СтатусСообщения.Важное);
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ОбработкаДокументовКорректировки()

// Процедура обновляет строки последователей для строки ТекущиеДанные
// устанавливает им признак модификации и расчитывает дату начала и окончания этапа для
// запланированных и отмененных этапов
//
Процедура ОбновитьСрокиПоследователей(ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок) Экспорт
	
	Если ТекущиеДанные.СостояниеЭтапаРасчетное = Перечисления.СостоянияЭтаповПроцессов.Отменен
	 или ТекущиеДанные.СостояниеЭтапаРасчетное = Перечисления.СостоянияЭтаповПроцессов.Запланирован
	Тогда
		ПредшественникиСтроки = мПредшественникиСтрок[ТекущиеДанные.ПолучитьИдентификатор()];
		ДатаНачалаРасчетная = Неопределено;
		Для каждого Ид_ПредшественникСтроки Из ПредшественникиСтроки Цикл
			ПредшественникСтроки = СостоянияВыполненияПроцесса.НайтиПоИдентификатору(Ид_ПредшественникСтроки);
			Если ДатаНачалаРасчетная = Неопределено или ПредшественникСтроки.ДатаОкончанияРасчетная > ДатаНачалаРасчетная Тогда
				ДатаНачалаРасчетная = ПредшественникСтроки.ДатаОкончанияРасчетная;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДатаНачалаРасчетная = Неопределено Тогда
			ОбщегоНазначенияУХ.УстановитьНовоеЗначение(ТекущиеДанные.ДатаОкончанияРасчетная, ДатаНачалаРасчетная + (ТекущиеДанные.ДатаОкончанияРасчетная - ТекущиеДанные.ДатаНачалаРасчетная));
			ОбщегоНазначенияУХ.УстановитьНовоеЗначение(ТекущиеДанные.ДатаНачалаРасчетная, ДатаНачалаРасчетная)
		КонецЕсли;
		
		Если ТекущиеДанные.СостояниеЭтапаРасчетное = Перечисления.СостоянияЭтаповПроцессов.Отменен Тогда
			ОбщегоНазначенияУХ.УстановитьНовоеЗначение(ТекущиеДанные.ДатаОкончанияРасчетная, ТекущиеДанные.ДатаНачалаРасчетная);
		КонецЕсли;
		
	КонецЕсли;
	
	НовыйИндекс = ПолучитьИндексСтрокиТаблицы(ТекущиеДанные);
	Для каждого Ид_СтрокаПоследователь Из мПоследователиСтрок[НовыйИндекс] Цикл
		Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
			СтрокаПоследователь = СостоянияВыполненияПроцесса.Получить(Ид_СтрокаПоследователь);
		Иначе
			СтрокаПоследователь = СостоянияВыполненияПроцесса.НайтиПоИдентификатору(Ид_СтрокаПоследователь);
		КонецЕсли;
		ОбновитьСрокиПоследователей(СтрокаПоследователь, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок);
	КонецЦикла;
	
	Если ТекущиеДанные.МодификацияСтроки = 0 Тогда
		ТекущиеДанные.МодификацияСтроки = 2;
	КонецЕсли;
	
КонецПроцедуры

// Процедура обновляет строки предшественников для строки ТекущиеДанные
// и устанавливает им признак модификации
//
Процедура ОбновитьСрокиПредшественников(ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок) Экспорт
	НовыйИндекс = ПолучитьИндексСтрокиТаблицы(ТекущиеДанные);
	Для каждого Ид_СтрокаПредшественник Из мПредшественникиСтрок[НовыйИндекс] Цикл
		СтрокаПредшественник = СостоянияВыполненияПроцесса.НайтиПоИдентификатору(Ид_СтрокаПредшественник);
		ОбновитьСрокиПредшественников(СтрокаПредшественник, СостоянияВыполненияПроцесса, мПредшественникиСтрок);
	КонецЦикла;
	
	Если ТекущиеДанные.МодификацияСтроки = 0 Тогда
		ТекущиеДанные.МодификацияСтроки = 2;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

Процедура ОбновитьДокументыУОП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект_УОП =  Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект_УОП.ОбновитьСвойстваПериодов();
			Объект_УОП.ЗаполнитьНастройкиПодПериодов();
			Объект_УОП.ОбменДанными.Загрузка = Истина;
			Объект_УОП.Записать();
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			
			ЗаписьЖурналаРегистрации("ОбновитьДокументыУОП", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);	
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры	




