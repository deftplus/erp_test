///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ФОРМИРОВАНИЯ РАССЫЛКИ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Функция РассчитатьОтносительныйПериод(ВидСравненияДляРассылки, Смещение, Период)
	
	Если ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Год Тогда
		Периодичность = Перечисления.Периодичность.Год;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Декада Тогда
		Периодичность = Перечисления.Периодичность.Декада;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_День Тогда
		Периодичность = Перечисления.Периодичность.День;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Квартал Тогда
		Периодичность = Перечисления.Периодичность.Квартал;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Месяц Тогда
		Периодичность = Перечисления.Периодичность.Месяц;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Неделя Тогда
		Периодичность = Перечисления.Периодичность.Неделя;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ОтносительныйПериод_Полугодие Тогда
		Периодичность = Перечисления.Периодичность.Полугодие;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	Период = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ТекущаяДата(), Периодичность, Смещение, Истина);
	Возврат Истина;
	
КонецФункции

Функция ВернутьВидСравненияДляСКД(ВидСравненияДляРассылки)
	
	Если ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.Равно Тогда
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.НеРавно Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.ВСписке Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли ВидСравненияДляРассылки = Перечисления.ВидыСравненияДляАналитическихПодписок.НеВСписке Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСписке;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ВернутьСтруктуруПараметровШаблонаПисьма(ШаблонПисьма)
	
	СтруктураПараметров = Новый Структура;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%Пользователь%%")>0 Тогда
		СтруктураПараметров.Вставить("Пользователь");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%Дата%%")>0 Тогда
		СтруктураПараметров.Вставить("Дата");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%Ссылка%%")>0 Тогда
		СтруктураПараметров.Вставить("Ссылка");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%ОтборОрганизация%%")>0 Тогда
		СтруктураПараметров.Вставить("ОтборОрганизация");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%ОтборПериод%%")>0 Тогда
		СтруктураПараметров.Вставить("ОтборПериод");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%ОтборСценарий%%")>0 Тогда
		СтруктураПараметров.Вставить("ОтборСценарий");
	КонецЕсли;
	
	Если СтрЧислоВхождений(ШаблонПисьма, "%%ОтборВалюта%%")>0 Тогда
		СтруктураПараметров.Вставить("ОтборВалюта");
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции

Функция ВернутьПредставлениеОтбора(ПравоеЗначениеОтбора)
	
	Если ТипЗнч(ПравоеЗначениеОтбора) = Тип("СписокЗначений") Тогда
		
		ТекСтрока = "";
		Для Каждого Элемент Из ПравоеЗначениеОтбора Цикл
			
			ТекСтрока = ТекСтрока + ", " + Элемент.Значение;
			
		КонецЦикла;
		Возврат "(" + ТекСтрока + ")";
	Иначе
		
		Возврат Строка(ПравоеЗначениеОтбора);
		
	КонецЕсли;

	
КонецФункции

Процедура РегламентноеЗаданиеПоРассылке(ПараметрРассылки) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.РассылкаПоНастройкамРассылки);	
	ПодготовитьРассылкуПоНастройкамРассылки(ПараметрРассылки);
	
КонецПроцедуры

// Добавляет в настройки НастройкиКомпоновщикаВход отбор по полю ИмяПоляВход
// с видом сравнения ВидСравненияВход по значению ЗначениеПоляВход, когда
// включено использование ИспользованиеВход.
Процедура УстановитьОтборАналитическойРасылки(НастройкиКомпоновщикаВход, ВидСравненияВход, ИспользованиеВход, ЗначениеПоляВход, ИмяПоляВход);
	Если ИспользованиеВход Тогда
		// Поиск поля ИмяПоляВход среди доступных полей.
		ПолеСКД = Новый ПолеКомпоновкиДанных(ИмяПоляВход);
		ВыбранныеЭлементы = НастройкиКомпоновщикаВход.Выбор.Элементы;
		ПолеНайдено = Ложь;
		Для Каждого ТекВыбранныеЭлементы Из ВыбранныеЭлементы Цикл
			Если ТекВыбранныеЭлементы.Поле = ПолеСКД Тогда
				ПолеНайдено = Истина;
			Иначе
				Продолжить;		// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
		// Установка отбора по найденному полю.
		Если ПолеНайдено Тогда
			ТекВидСравнения = ВернутьВидСравненияДляСКД(ВидСравненияВход);
			ТиповыеОтчетыУХ.ДобавитьОтбор(НастройкиКомпоновщикаВход.Отбор, ИмяПоляВход, ЗначениеПоляВход, ТекВидСравнения, Ложь);
		Иначе
			// Нет такого поля, не устанавляием отбор.
		КонецЕсли;
	Иначе
		// Не требуется добавлять отбор.
	КонецЕсли;
КонецПроцедуры

// Добавляет настройки вывода отчета из АналитическаяПодпискаВход в настройки компоновщика данных 
// НастройкиКомпоновщикаВход.
Процедура ПеренестиНастройкиРассылкиВНастройкиКомпоновщика(НастройкиКомпоновщикаВход, АналитическаяПодпискаВход)
	Если ТипЗнч(АналитическаяПодпискаВход) = Тип("СправочникСсылка.АналитическаяПодписка") Тогда
		ХранилищеЗначенийОтбора = АналитическаяПодпискаВход.ХранилищеЗначенийОтбора;
		Если ХранилищеЗначенийОтбора <> Неопределено Тогда
			СтруктураОтбора = ХранилищеЗначенийОтбора.Получить();
			Если СтруктураОтбора <> Неопределено Тогда
				УстановитьОтборАналитическойРасылки(НастройкиКомпоновщикаВход, АналитическаяПодпискаВход.ВидСравнения_Валюта, АналитическаяПодпискаВход.Использование_Валюта, СтруктураОтбора.Валюта, "ОсновнаяВалюта"); 
				УстановитьОтборАналитическойРасылки(НастройкиКомпоновщикаВход, АналитическаяПодпискаВход.ВидСравнения_Организация, АналитическаяПодпискаВход.Использование_Организация, СтруктураОтбора.Организация, "Организация"); 
				УстановитьОтборАналитическойРасылки(НастройкиКомпоновщикаВход, АналитическаяПодпискаВход.ВидСравнения_Сценарий, АналитическаяПодпискаВход.Использование_Сценарий, СтруктураОтбора.Сценарий, "Сценарий"); 
				УстановитьОтборАналитическойРасылки(НастройкиКомпоновщикаВход, АналитическаяПодпискаВход.ВидСравнения_Период, АналитическаяПодпискаВход.Использование_Период, СтруктураОтбора.Период, "Период"); 
			Иначе
				// Не удалось получить значение из хранилища настроек. Не переносим.
			КонецЕсли;
		Иначе
			// Хранилище значений отбора пустое. Не переносим настройки.
		КонецЕсли;
	Иначе
		// Нет данных для переноса. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

// Выставляет для настроек компоновщика НастройкиКомпоновщикаВход параметр с имененем
// ИмяПараметраВход в значение ЗначениеПараметраВход.
Процедура УстановитьПараметрВывода(НастройкиКомпоновщикаВход, ИмяПараметраВход, ЗначениеПараметраВход, ИспользованиеВход = Истина)
	ЭлементыПараметров = НастройкиКомпоновщикаВход.ПараметрыВывода.Элементы;
	ИскомыйПараметр = Новый ПараметрКомпоновкиДанных(ИмяПараметраВход);
	Для Каждого ТекЭлементыПараметров Из ЭлементыПараметров Цикл
		Если ТекЭлементыПараметров.Параметр = ИскомыйПараметр Тогда
			ТекЭлементыПараметров.Значение		 = ЗначениеПараметраВход;
			ТекЭлементыПараметров.Использование	 = ИспользованиеВход;
		Иначе
			Продолжить;			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// В настройки НастройкиКомпоновщика выставляет параметры аналитической панели, заданные
// настройками панели из аналитической рассылки АналитическаяПодпискаВход.
Процедура УстановитьПараметрыИзНастроекПанели(АналитическаяПодпискаВход, НастройкиКомпоновщика)
	Если ТипЗнч(АналитическаяПодпискаВход) = Тип("СправочникСсылка.АналитическаяПодписка") Тогда
		ТекНастройкаПанелей = АналитическаяПодпискаВход.НастройкаПанели;
		Если ЗначениеЗаполнено(ТекНастройкаПанелей) Тогда
			Если ТипЗнч(ТекНастройкаПанелей.ХранилищеНастроек) = Тип("ХранилищеЗначения") Тогда
				ЗначениеХранилищаНастроек = ТекНастройкаПанелей.ХранилищеНастроек.Получить();
				Если ТипЗнч(ЗначениеХранилищаНастроек) = Тип("Структура") Тогда
					// Получим значения отборов из настроек панели.
					ЗначенияНастроек = ЗначениеХранилищаНастроек.ЗначенияНастроекПанелиОтчета;
					НастройкиМонитора = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияНастроек, "НастройкиМонитораЭффективности", Новый Структура);
					НастройкиПериода = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ЗначенияНастроек, "НастройкаПериода", Новый Структура);
					ОтборПоОрганизации		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиМонитора, "ОтборОрганизация", Справочники.Организации.ПустаяСсылка());
					ОтборПоСценарию			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиМонитора, "СценарийФакт", Справочники.Сценарии.ПустаяСсылка());
					ОтборПоВалюте			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиМонитора, "ОтборВалюта", Справочники.Валюты.ПустаяСсылка());
					ОтборПоПериодуОтчета	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиПериода, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
					// Перенесём значения в настройки компоновщика.
					ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиКомпоновщика, "Организация", ОтборПоОрганизации);
					ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиКомпоновщика, "ОсновнаяВалюта", ОтборПоВалюте);
					ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиКомпоновщика, "Сценарий", ОтборПоСценарию);
					ТиповыеОтчетыУХ.УстановитьПараметр(НастройкиКомпоновщика, "ПериодОтчета", ОтборПоПериодуОтчета);
				Иначе
					// Неизвестный вариант значения настроек, либо хранилище пустое.
				КонецЕсли;
			Иначе
				// Неизвестный вариант настройки панелей. Не изменяем настройки компоновщика.
			КонецЕсли;
		Иначе
			// Нет настроек.
		КонецЕсли;
	Иначе
		// Аналитическая подписка не передана. Не изменяем настройки компоновщика.
	КонецЕсли;
КонецПроцедуры

// Добавляет в массив МассивВложенийВход pdf-представление табличного документа
// ТабДокументВход по аналитическому отчету ОтчетВход, предварительно сохранив
// табличный документ во временный pdf-файл.
Процедура ДобавитьВМассивВложениеАналитическогоОтчета(ОтчетВход, ТабДокументВход, МассивВложенийВход)
	// Запишем во временный файл.
	Каталог = КаталогВременныхФайлов();
	ИмяВременногоФайла = "";
	ИмяВременногоФайла = ИмяВременногоФайла + Каталог;
	ИмяВременногоФайла = ИмяВременногоФайла + ОтчетВход.Наименование;
	ИмяВременногоФайла = ИмяВременногоФайла + Строка(Новый УникальныйИдентификатор);
	ИмяВременногоФайла = ИмяВременногоФайла + ".pdf" ;
	ТабДокументВход.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.PDF);
	// Добавим в результирующий массив.
	ПредставлениеОтчета = ОтчетВход.Наименование;
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("ИмяФайла", ИмяВременногоФайла);
	СтруктураРезультат.Вставить("Представление", ПредставлениеОтчета);
	МассивВложенийВход.Добавить(СтруктураРезультат);	
КонецПроцедуры

// Возвращает массив, содержащий пути файлов для вложения в аналитическую
// рассылку по аналитической панели ПанельВход.
Функция ПолучитьМассивПутейФайловВложенийАналитическойПанели(ПанельВход, АналитическаяПодпискаВход = Неопределено)
	Перем ДанныеРасшифровки;
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(ПанельВход) Тогда
		Для Каждого ТекСостав Из ПанельВход.Состав Цикл
			ТекОтчет = ТекСостав.УниверсальныйОтчет;
			Если ЗначениеЗаполнено(ТекОтчет) И НЕ ЗначениеЗаполнено(ТекСостав.РасшифровываемаяОбласть) Тогда
				Попытка
					Если ТипЗнч(ТекОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
						Если ТекОтчет.ВидПроизвольногоОтчета = 0 Тогда
							// Аналитический отчет.
							// Получим схему компоновки.
							ПредставлениеОтчета = ТекОтчет.Наименование;
							ТабДокумент = Новый ТабличныйДокумент;
							ОбъектОтчета = ТекОтчет.ПолучитьОбъект();
							URLСхемы = ТиповыеОтчетыУХ.СформироватьСхемуКомпоновкиДанных(ОбъектОтчета, Новый УникальныйИдентификатор);
							СхемаСКД = ПолучитьИзВременногоХранилища(URLСхемы);
							// Установим настройки схемы.
							НастройкиОтчета = ТекОтчет.НастройкиСхемыКомпоновкиДанныхПоУмолчанию.Получить();
							Если НастройкиОтчета <> Неопределено Тогда
								НастройкиКомпоновщика = НастройкиОтчета;
							Иначе	
								НастройкиКомпоновщика = СхемаСКД.НастройкиПоУмолчанию;
							КонецЕсли;
							ПеренестиНастройкиРассылкиВНастройкиКомпоновщика(НастройкиКомпоновщика, АналитическаяПодпискаВход);
							УстановитьПараметрВывода(НастройкиКомпоновщика, "ВыводитьЗаголовок", ТипВыводаТекстаКомпоновкиДанных.Выводить);
							УстановитьПараметрВывода(НастройкиКомпоновщика, "Заголовок", ПредставлениеОтчета);
							УстановитьПараметрыИзНастроекПанели(АналитическаяПодпискаВход, НастройкиКомпоновщика);
							// Выведем схему компоновки в табличный документ.
							СтруктураПараметров = Новый Структура();
							СтруктураПараметров.Вставить("НастройкиКомпоновщика", НастройкиКомпоновщика);
							СтруктураПараметров.Вставить("ЗначенияНастроекПанелиПользователя", Неопределено);
							ВнешнийКонтекст = Неопределено;
							Справочники.ПроизвольныеОтчеты.ОбновитьОтчет(ТабДокумент, ОбъектОтчета, СтруктураПараметров, ДанныеРасшифровки, , , URLСхемы, ВнешнийКонтекст);
							// Запишем табличный документ в pdf на диске.
							ДобавитьВМассивВложениеАналитическогоОтчета(ТекОтчет, ТабДокумент, РезультатФункции);
						ИначеЕсли ТекОтчет.ВидПроизвольногоОтчета = 1 Тогда	
							// Монитор эффективности.
							// Обновим данные в регистре и получим таблицу значений показателей МКП.
							ТаблицаПоказателей = БизнесАнализСерверУХ.СформироватьТаблицуПоказателейРассылкиПоМониторуМКП(ТекОтчет);
							Если ТипЗнч(АналитическаяПодпискаВход) = Тип("СправочникСсылка.АналитическаяПодписка") Тогда
								НастройкаПанели = АналитическаяПодпискаВход.НастройкаПанели;
							Иначе
								НастройкаПанели = Справочники.СохраненныеНастройки.ПустаяСсылка();
							КонецЕсли;
							РезультатАнализа = Справочники.ПроизвольныеОтчеты.ОбновитьДанныеОтчетаВРегистре(ТекОтчет, НастройкаПанели, ТаблицаПоказателей);
							// Выведем таблицу значений в табличный документ.
							ТабДокумент = БизнесАнализСерверУХ.ВывестиРезультатАнализаВТабДок(РезультатАнализа, ТекОтчет.Наименование);
							// Запишем табличный документ в pdf на диске.
							ДобавитьВМассивВложениеАналитическогоОтчета(ТекОтчет, ТабДокумент, РезультатФункции);
						Иначе
							// Неизвестный вариант аналитического отчета. Пропускаем.
						КонецЕсли;
					Иначе
						// Не аналитический отчет. Пропускаем.
					КонецЕсли;
				Исключение
					ТекстСообщения = НСтр("ru = 'Не удалось получить представление отчета %Отчет%: %ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отчет%", Строка(ТекОтчет));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецПопытки;
			Иначе
				// Нет рассылаемого элемента. Пропускаем.
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатФункции = Новый Массив;		// Панель не задана. Вернём пустой массив.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Вовзращает текст в формате HTML, содержащий список вложений из массива 
// МассивПутейВложенийВход.
Функция ПолучитьТекстСпискаВложений(МассивПутейВложенийВход)
	РезультатФункции = "";
	Если ЗначениеЗаполнено(МассивПутейВложенийВход) Тогда
		Если МассивПутейВложенийВход.Количество() > 0 Тогда
			РезультатФункции = РезультатФункции + "<ul>";
			Для Каждого ТекМассивПутейВложенийВход Из МассивПутейВложенийВход Цикл
				РезультатФункции = РезультатФункции + "<li>";
				РезультатФункции = РезультатФункции + ТекМассивПутейВложенийВход.Представление;
			КонецЦикла;
			РезультатФункции = РезультатФункции + "</ul>";
		Иначе
			РезультатФункции = "";
		КонецЕсли;
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает значение отбора из настроек панели НастройкаПанелиВход.
// Параметр ИмяОтбораВход определяет выбираемый отбор. Когда
// получить значение не удалось - возвращает Неопределено.
Функция ПолучитьОтборИзНастройкиПанели(НастройкаПанелиВход, ИмяОтбораВход)
	РезультатФункции = Неопределено;
	Если ТипЗнч(НастройкаПанелиВход.ХранилищеНастроек) = Тип("ХранилищеЗначения") Тогда
		ЗначениеХранилищаНастроек = НастройкаПанелиВход.ХранилищеНастроек.Получить();
		Если ТипЗнч(ЗначениеХранилищаНастроек) = Тип("Структура") Тогда
			Если СокрЛП(ИмяОтбораВход) = "ОтборОрганизация" Тогда
				РезультатФункции = ЗначениеХранилищаНастроек.ЗначенияНастроекПанелиОтчета.НастройкиМонитораЭффективности.ОтборОрганизация;
			ИначеЕсли СокрЛП(ИмяОтбораВход) = "ОтборСценарий" Тогда
				РезультатФункции = ЗначениеХранилищаНастроек.ЗначенияНастроекПанелиОтчета.НастройкиМонитораЭффективности.СценарийФакт;
			ИначеЕсли СокрЛП(ИмяОтбораВход) = "ОтборВалюта" Тогда
				РезультатФункции = ЗначениеХранилищаНастроек.ЗначенияНастроекПанелиОтчета.НастройкиМонитораЭффективности.ОтборВалюта;
			ИначеЕсли СокрЛП(ИмяОтбораВход) = "ОтборПериод" Тогда
				РезультатФункции = ЗначениеХранилищаНастроек.ЗначенияНастроекПанелиОтчета.НастройкаПериода.ПериодОтчета;
			Иначе
				РезультатФункции = Неопределено;		// Неизвестный вариант.
			КонецЕсли;
		Иначе
			// Неизвестный вариант значения настроек, либо хранилище пустое.
		КонецЕсли;
	Иначе
		// Хранилище пустое.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Отправляет получателю с адресом АдресПолучателяВход письмо с заголовком ЗаголовокПисьмаВход,
// текстом ТекстПисьмаВход и вложениями из массива МассивПутейВложенийВход с учетной записи
// УчетнаяЗаписьОтправкиВход. Добавляет в строку протокола рассылки СтрокаПротоколаВход
// информацию об успешности отправки.
Процедура ОтправитьПисьмоАналитическойРассылки(ЗаголовокПисьмаВход, ТекстПисьмаВход, МассивПутейВложенийВход, УчетнаяЗаписьОтправкиВход, АдресПолучателяВход, СтрокаПротоколаВход)
	// Сформируем письмо.
	Письмо = Новый ИнтернетПочтовоеСообщение;
	Письмо.Тексты.Добавить(ТекстПисьмаВход, ТипТекстаПочтовогоСообщения.HTML);
	Письмо.Тема = ЗаголовокПисьмаВход;
	Письмо.ИмяОтправителя    = УчетнаяЗаписьОтправкиВход.ИмяПользователя;
	Письмо.Отправитель.Адрес = УчетнаяЗаписьОтправкиВход.АдресЭлектроннойПочты;
	Письмо.Получатели.Добавить(АдресПолучателяВход);
	Письмо.ОбработатьТексты();
	//Добавим вложения.
	Для Каждого ТекМассивПутейВложений Из МассивПутейВложенийВход Цикл
		Письмо.Вложения.Добавить(ТекМассивПутейВложений.ИмяФайла);
	КонецЦикла;
	// Отправим письмо.
	Попытка
		УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Справочники.Пользователи.ПустаяСсылка());
		СтрокаПротоколаВход.РезультатРассылки = "ОК";
	Исключение
		СтрокаПротоколаВход.РезультатРассылки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
КонецПроцедуры

Процедура ПодготовитьРассылкуПоНастройкамРассылки(ПараметрРассылки, ОбъектРассылки = Неопределено) Экспорт

	Если ТипЗнч(ПараметрРассылки) = Тип("УникальныйИдентификатор") Тогда
		ИспользуетсяУникальныйИдентификатор = Истина;
	ИначеЕсли ТипЗнч(ПараметрРассылки) = Тип("СправочникСсылка.АналитическаяПодписка") Тогда
		ИспользуетсяУникальныйИдентификатор = Ложь;
	Иначе
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналитическаяПодписка.Ссылка КАК Ссылка,
	|	АналитическаяПодписка.ВерсияДанных КАК ВерсияДанных,
	|	АналитическаяПодписка.Код КАК Код,
	|	АналитическаяПодписка.Наименование КАК Наименование,
	|	АналитическаяПодписка.РегламентноеЗадание КАК РегламентноеЗадание,
	|	АналитическаяПодписка.ИнициацияРассылки КАК ИнициацияРассылки,
	|	АналитическаяПодписка.ШаблонСообщения КАК ШаблонСообщения,
	|	АналитическаяПодписка.ВидСравнения_Организация КАК ВидСравнения_Организация,
	|	АналитическаяПодписка.ВидСравнения_Период КАК ВидСравнения_Период,
	|	АналитическаяПодписка.ВидСравнения_Сценарий КАК ВидСравнения_Сценарий,
	|	АналитическаяПодписка.ВидСравнения_Валюта КАК ВидСравнения_Валюта,
	|	АналитическаяПодписка.Использование_Организация КАК Использование_Организация,
	|	АналитическаяПодписка.Использование_Период КАК Использование_Период,
	|	АналитическаяПодписка.Использование_Сценарий КАК Использование_Сценарий,
	|	АналитическаяПодписка.Использование_Валюта КАК Использование_Валюта,
	|	АналитическаяПодписка.СмещениеПериода КАК СмещениеПериода,
	|	АналитическаяПодписка.ХранилищеЗначенийОтбора КАК ХранилищеЗначенийОтбора,
	|	АналитическаяПодписка.НастройкаПанели КАК НастройкаПанели,
	|	АналитическаяПодписка.ЗаголовокПисьма КАК ЗаголовокПисьма,
	|	АналитическаяПодписка.РассылаемыйОбъект КАК РассылаемыйОбъект,
	|	ВЫБОР
	|		КОГДА АналитическаяПодписка.РассылаемыйОбъект ССЫЛКА Справочник.ПанелиОтчетов
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Панель,
	|	АналитическаяПодписка.КонтролируемыеПоказатели.(
	|		Показатель КАК Показатель,
	|		КонтрольСостояния КАК КонтрольСостояния,
	|		КонтрольДинамики КАК КонтрольДинамики,
	|		ИмяГруппыИсточников КАК ИмяГруппыИсточников
	|	) КАК КонтролируемыеПоказатели
	|ИЗ
	|	Справочник.АналитическаяПодписка КАК АналитическаяПодписка" 
	+ ?(ИспользуетсяУникальныйИдентификатор, "
	|ГДЕ
	|	АналитическаяПодписка.РегламентноеЗадание = &ПараметрРассылки"
	,"
	|ГДЕ
	|	АналитическаяПодписка.Ссылка = &ПараметрРассылки");
	
	Запрос.УстановитьПараметр("ПараметрРассылки", ПараметрРассылки);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		СтруктураЗначений = Выборка.ХранилищеЗначенийОтбора.Получить();
		КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
		ЗаголовокПисьма   = Выборка.ЗаголовокПисьма;
		ШаблонПисьма      = Выборка.ШаблонСообщения;
		СтруктураПараметровШаблона = ВернутьСтруктуруПараметровШаблонаПисьма(ШаблонПисьма);
		МассивПутейВложений = Новый Массив;
		
		Если Выборка.Использование_Организация Тогда
			ТекОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация");
			ТекОтбор.ВидСравнения  = ВернутьВидСравненияДляСКД(Выборка.ВидСравнения_Организация);
			ТекОтбор.Использование = Истина;
			СтруктураЗначений.Свойство("Организация", ТекОтбор.ПравоеЗначение);
			
			Если СтруктураПараметровШаблона.Свойство("ОтборОрганизация") Тогда
				СтруктураПараметровШаблона.Вставить("ОтборОрганизация", ВернутьПредставлениеОтбора(ТекОтбор.ПравоеЗначение));
			КонецЕсли;
		Иначе
			СтруктураПараметровШаблона.Вставить("ОтборОрганизация", НСтр("ru = 'отбор не установлен'"));
		КонецЕсли;
		
		Если Выборка.Использование_Сценарий Тогда
			ТекОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Сценарий");
			ТекОтбор.ВидСравнения  = ВернутьВидСравненияДляСКД(Выборка.ВидСравнения_Сценарий);
			ТекОтбор.Использование = Истина;
			СтруктураЗначений.Свойство("Сценарий", ТекОтбор.ПравоеЗначение);
			Если СтруктураПараметровШаблона.Свойство("ОтборСценарий") Тогда
				СтруктураПараметровШаблона.Вставить("ОтборСценарий", ВернутьПредставлениеОтбора(ТекОтбор.ПравоеЗначение));
			КонецЕсли;
		Иначе
			СтруктураПараметровШаблона.Вставить("ОтборСценарий", НСтр("ru = 'отбор не установлен'"));
			
		КонецЕсли;
		
		Если Выборка.Использование_Валюта Тогда
			ТекОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Валюта");
			ТекОтбор.ВидСравнения  = ВернутьВидСравненияДляСКД(Выборка.ВидСравнения_Валюта);
			ТекОтбор.Использование = Истина;
			СтруктураЗначений.Свойство("Валюта", ТекОтбор.ПравоеЗначение);
			Если СтруктураПараметровШаблона.Свойство("ОтборВалюта") Тогда
				СтруктураПараметровШаблона.Вставить("ОтборВалюта", ВернутьПредставлениеОтбора(ТекОтбор.ПравоеЗначение));
			КонецЕсли;
		Иначе
			СтруктураПараметровШаблона.Вставить("ОтборВалюта", НСтр("ru = 'отбор не установлен'"));
			
		КонецЕсли;
		
		Если Выборка.Использование_Период Тогда
			ТекОтбор = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ТекОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ПериодОтчета");
			Период = Справочники.Периоды.ПустаяСсылка();
			
			Если РассчитатьОтносительныйПериод(Выборка.ВидСравнения_Период, СтруктураЗначений.Период, Период) Тогда
				ТекОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно;
				ТекОтбор.ПравоеЗначение = Период;
			Иначе
				ТекОтбор.ВидСравнения  = ВернутьВидСравненияДляСКД(Выборка.ВидСравнения_Период);
				Если СтруктураЗначений.Свойство("Значение_Период") Тогда
					ТекОтбор.ПравоеЗначение = СтруктураЗначений.Значение_Период;
				Иначе
					ТекОтбор.ПравоеЗначение = СтруктураЗначений.Период;
				КонецЕсли;	
			КонецЕсли;
			
			ТекОтбор.Использование = Истина;
			Если СтруктураПараметровШаблона.Свойство("ОтборПериод") Тогда
				СтруктураПараметровШаблона.Вставить("ОтборПериод", ВернутьПредставлениеОтбора(ТекОтбор.ПравоеЗначение));
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Выборка.НастройкаПанели) Тогда
				// Отбор Организация.
				НоваяОрганизация = ПолучитьОтборИзНастройкиПанели(Выборка.НастройкаПанели, "ОтборОрганизация");
				СтруктураПараметровШаблона.Вставить("ОтборОрганизация", НоваяОрганизация);
				// Отбор Сценарий.
				НовыйСценарий = ПолучитьОтборИзНастройкиПанели(Выборка.НастройкаПанели, "ОтборСценарий");
				СтруктураПараметровШаблона.Вставить("ОтборСценарий", НовыйСценарий);
				// Отбор Валюта.
				НоваяВалюта = ПолучитьОтборИзНастройкиПанели(Выборка.НастройкаПанели, "ОтборВалюта");
				СтруктураПараметровШаблона.Вставить("ОтборВалюта", НоваяВалюта);
				// Отбор Период.
				НовыйПериод = ПолучитьОтборИзНастройкиПанели(Выборка.НастройкаПанели, "ОтборПериод");
				СтруктураПараметровШаблона.Вставить("ОтборПериод", НовыйПериод);
			Иначе	
				СтруктураПараметровШаблона.Вставить("ОтборОрганизация", НСтр("ru = 'отбор не установлен'"));
				СтруктураПараметровШаблона.Вставить("ОтборСценарий", НСтр("ru = 'отбор не установлен'"));
				СтруктураПараметровШаблона.Вставить("ОтборВалюта", НСтр("ru = 'отбор не установлен'"));
				СтруктураПараметровШаблона.Вставить("ОтборПериод", НСтр("ru = 'отбор не установлен'"));
			КонецЕсли;
		КонецЕсли;
		
		НоваяЗапись                           = Справочники.ПротоколРассылки.СоздатьЭлемент();
		НоваяЗапись.Источник                  = Выборка.Ссылка;
		НоваяЗапись.АналитическаяПанель_Отчет = Выборка.РассылаемыйОбъект;
		НоваяЗапись.Наименование              = СтрШаблон(
			Нстр("ru = 'Рассылка от %1'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			Формат(ТекущаяДата(), 
				Нстр("ru='Л=ru; ДФ=dd.MM.yyyy; ДЛФ=DD; ДП=2'", ОбщегоНазначения.КодОсновногоЯзыка()) ));
		НоваяЗапись.НастройкиКомпоновщика     = Новый ХранилищеЗначения(КомпоновщикНастроек.ПолучитьНастройки());
		НоваяЗапись.СохраненнаяНастройка      = Выборка.НастройкаПанели;
		
		ТекстПоПоказателям = "";
		Если Выборка.ИнициацияРассылки = Перечисления.ВидыИнициацииРассылки.КонтрольПоказателяМКП Тогда
			// Сформируем таблицу показатаелей МКП и поместим его в переменную ТекстПоПоказателям.
			ВыгрузкаТаблицыПоказателей = Выборка.КонтролируемыеПоказатели.Выгрузить();
			ТекстПоПоказателям = БизнесАнализСерверУХ.ПолучитьHtmlТаблицуПоказателейМкп(Выборка.РассылаемыйОбъект, Выборка.НастройкаПанели, ВыгрузкаТаблицыПоказателей, Выборка.Ссылка);
		ИначеЕсли Выборка.ИнициацияРассылки = Перечисления.ВидыИнициацииРассылки.РегламентноеЗадание Тогда	
			// Аналитическая панель. Вложим выгрузку аналитических отчетов.
			МассивПутейВложений = ПолучитьМассивПутейФайловВложенийАналитическойПанели(Выборка.РассылаемыйОбъект, ПараметрРассылки);
		Иначе
			// Неизвестный вариант. Выведем ошибку.
			ТекстПоПоказателям = ТекстПоПоказателям + "<div>" + "ru = 'Неизвестный вариант формирования рассылки: %ВариантРассылки%'" + "</div>";
			ТекстПоПоказателям = СтрЗаменить(ТекстПоПоказателям, "%ВариантРассылки%", Строка(Выборка.ИнициацияРассылки));
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант формирования рассылки: %ВариантРассылки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВариантРассылки%", Строка(Выборка.ИнициацияРассылки));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		ТекстСписокВложений = ПолучитьТекстСпискаВложений(МассивПутейВложений);
		СтруктураПараметровШаблона.Вставить("СписокВложений", ТекстСписокВложений);
		СтруктураПараметровШаблона.Вставить("КонтролируемыеПоказатели", ТекстПоПоказателям);
		СписокПользователей = БизнесАнализСерверУХ.ПолучитьСписокПользователейАналитическойРассылки(ОбъектРассылки, Выборка.Ссылка);
		Если СписокПользователей.Количество() = 0 Тогда
			Возврат;		// Нет получателей рассылки.
		Иначе
			// Выполняем рассылку далее.
		КонецЕсли;
		
		ТекстОшибки = "";
		
		Попытка
			НоваяЗапись.Записать();
		Исключение
			ЗаписьЖурналаРегистрации("ОшибкаОтправкиПочтовогоСообщения", УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
		
		УчетнаяЗапись = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
		Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ТекстСообщениеОбОшибке = НСтр("ru = 'Не определена учетная запись для отправки электронной почты'");
			ЗаписьЖурналаРегистрации("ОшибкаОтправкиПочтовогоСообщения", УровеньЖурналаРегистрации.Ошибка, , , ТекстСообщениеОбОшибке);
			Возврат;
		КонецЕсли;
		
		ТаблицаОтправки = УправлениеКонтактнойИнформациейПереопределяемыйУХ.ПолучитьТаблицуЭлектронныхАдресов(СписокПользователей);
		Для Каждого СтрокаТаблицы Из ТаблицаОтправки Цикл
			
			АдресПолучателя = СтрокаТаблицы.Адрес;
			ПолучательСсылка = СтрокаТаблицы.Объект;
			ДатаРассылки = ТекущаяДата();
			
			Если СтруктураПараметровШаблона.Свойство("Пользователь") Тогда
				СтруктураПараметровШаблона.Вставить("Пользователь", ПолучательСсылка);
			КонецЕсли;
			
			Если СтруктураПараметровШаблона.Свойство("Дата") Тогда
				СтруктураПараметровШаблона.Вставить("Дата", ДатаРассылки);
			КонецЕсли;
			
			Если СтруктураПараметровШаблона.Свойство("Ссылка") Тогда
				ТекстСсылки = НСтр("ru = '<a href=""%НавигационнаяСсылка%"">%Представление%</a>'");
				ТекстСсылки = СтрЗаменить(ТекстСсылки, "%НавигационнаяСсылка%", Строка(ПолучитьНавигационнуюСсылку(НоваяЗапись.Ссылка)));
				ТекстСсылки = СтрЗаменить(ТекстСсылки, "%Представление%", Строка(НоваяЗапись.Ссылка));
				СтруктураПараметровШаблона.Вставить("Ссылка", ТекстСсылки);	
			КонецЕсли;
			
			ТекстПисьма = ШаблонПисьма;
			
			Для Каждого Элемент Из СтруктураПараметровШаблона Цикл
				ТекстПисьма = СтрЗаменить(ТекстПисьма, "%%" + Элемент.Ключ + "%%", Элемент.Значение);
			КонецЦикла;
			// Преобразуем ссылки во внешние.
			ТекстПисьма = МодульУправленияОповещениямиУХ.ПреобразоватьНавигационныеСсылкиВоВнешние(ТекстПисьма);
			// Добавим строку записи в протокол.
			НоваяСтрока                  = НоваяЗапись.РезультатРассылки.Добавить();
			НоваяСтрока.Пользователь     = ПолучательСсылка;
			НоваяСтрока.ЭлектроннаяПочта = АдресПолучателя;
			НоваяСтрока.ДатаРассылки     = ДатаРассылки;
			// Сформируем и отправим письмо.
			ОтправитьПисьмоАналитическойРассылки(ЗаголовокПисьма, ТекстПисьма, МассивПутейВложений, УчетнаяЗапись, АдресПолучателя, НоваяСтрока);
		КонецЦикла;
		
		НоваяЗапись.Результат = ?(ПустаяСтрока(ТекстОшибки), "ОК", ТекстОшибки);
		НоваяЗапись.Записать();
		
	КонецЕсли;

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ОБРАБОТКИ УПРАВЛЕНИЯ ПРОЦЕССОМ
///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

Процедура ОбновитьДанныеМониторовКлючевыхПоказателей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбновлениеМонитораКлючевыхПоказателей);	
	
	ПустаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПроизвольныеОтчеты.Ссылка КАК Ссылка,
		|	ПроизвольныеОтчеты.ВидПроизвольногоОтчета КАК ВидПроизвольногоОтчета
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
		|ГДЕ
		|	НЕ ПроизвольныеОтчеты.ПометкаУдаления
		|	И ПроизвольныеОтчеты.ВидПроизвольногоОтчета = 1";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Справочники.ПроизвольныеОтчеты.ОбновитьДанныеОтчетаВРегистре(ВыборкаДетальныеЗаписи.Ссылка, ПустаяНастройка);
	КонецЦикла;
КонецПроцедуры

// Возвращает структуру, содержащую свойства регламентного задания с именем ИмяЗаданияВход.
Функция ПолучитьСтруктуруДанныхРегламентногоЗадания(ИмяЗаданияВход) Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИдентификаторЗадания", "");
	РезультатФункции.Вставить("Использование", Ложь);
	РегламентныеЗаданияДляОбработки = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	Для Каждого ТекРегламентныеЗаданияДляОбработки Из РегламентныеЗаданияДляОбработки Цикл
		Если СокрЛП(ТекРегламентныеЗаданияДляОбработки.Метаданные.Имя) = СокрЛП(ИмяЗаданияВход) Тогда
			РезультатФункции.Вставить("ИдентификаторЗадания", Строка(ТекРегламентныеЗаданияДляОбработки.УникальныйИдентификатор));
			РезультатФункции.Вставить("Использование", ТекРегламентныеЗаданияДляОбработки.Использование);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

#Область ОбработкаУниверсальныхПроцессов

Процедура ДобавитьЗаданиеНаЭтап(ДокументПроцесса, ЭтапПроцесса, ОтветственныеТекущегоЭтапа = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	элЗадачи = Справочники.Задачи.СоздатьЭлемент();
	элЗадачи.СвязанныйОбъект = ДокументПроцесса.КлючевойОбъектПроцесса;
	элЗадачи.Записать();

	Если ОтветственныеТекущегоЭтапа=Неопределено Тогда
		СоздатьЗадачу(элЗадачи, Справочники.Пользователи.ПустаяСсылка(), ДокументПроцесса, ЭтапПроцесса, Перечисления.СобытияОтложеннойОбработкиПроцессов.АвтоВыполнениеЭтапа, ДополнительныеПараметры);
	Иначе
		Для Каждого Ответственный Из ОтветственныеТекущегоЭтапа Цикл
			
			Если ТипЗнч(Ответственный.Пользователь) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
				ОрганизацияОтветственного = ?(ЗначениеЗаполнено(Ответственный.Организация), Ответственный.Организация, ДокументПроцесса.Организация);
				ПолучателиПоРоли = МодульУправленияПроцессамиУХ.ПолучитьПользователейПоРоли(Ответственный.Пользователь,	ОрганизацияОтветственного);
				Для Каждого ТекПолучатель из ПолучателиПоРоли Цикл				
					СоздатьЗадачу(элЗадачи, ТекПолучатель.Пользователь, ДокументПроцесса, ЭтапПроцесса, Перечисления.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования, ДополнительныеПараметры);
				КонецЦикла;	
			Иначе 
				СоздатьЗадачу(элЗадачи, Ответственный.Пользователь, ДокументПроцесса, ЭтапПроцесса, Перечисления.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования, ДополнительныеПараметры);
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбработкаЭтаповПроцессов(ЭтапВход = Неопределено) Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаЭтаповПроцессов);
	
	// Выборка незавершённых заданий.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтложеннаяОбработкаЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса КАК ДокументПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ВидДействия КАК ВидДействия,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ВремяЗавершенияЗадания КАК ВремяЗавершенияЗадания,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса.Организация КАК Организация,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ВремяСобытия КАК ВремяСобытия
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ОтложеннаяОбработкаЭтаповПроцессов
	|ГДЕ
	|	ОтложеннаяОбработкаЭтаповПроцессов.Ответственный = &АвтоОтветственный
	|	И ОтложеннаяОбработкаЭтаповПроцессов.Выполнено = ЛОЖЬ
	|	И ОтложеннаяОбработкаЭтаповПроцессов.ВидДействия = &АвтоЭтап
	|	И ВЫБОР
	|			КОГДА &ЭтапПроцесса = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтложеннаяОбработкаЭтаповПроцессов.ЭтапПроцесса = &ЭтапПроцесса
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтложеннаяОбработкаЭтаповПроцессов.ЭтапПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса.КлючевойОбъектПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ВидДействия,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ВремяЗавершенияЗадания,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса.Организация,
	|	ОтложеннаяОбработкаЭтаповПроцессов.ВремяСобытия
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ОтложеннаяОбработкаЭтаповПроцессов
	|ГДЕ
	|	РАЗНОСТЬДАТ(ОтложеннаяОбработкаЭтаповПроцессов.ВремяНачалаЗадания, &ТекущаяДата, СЕКУНДА) / (60 * 60) >= ОтложеннаяОбработкаЭтаповПроцессов.ВремяСобытия
	|	И ОтложеннаяОбработкаЭтаповПроцессов.ВидДействия = &АвтоТаймаут
	|	И ОтложеннаяОбработкаЭтаповПроцессов.Выполнено = ЛОЖЬ
	|	И ВЫБОР
	|			КОГДА &ЭтапПроцесса = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОтложеннаяОбработкаЭтаповПроцессов.ЭтапПроцесса = &ЭтапПроцесса
	|		КОНЕЦ";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("АвтоОтветственный", Справочники.Пользователи.ПустаяСсылка());
	Запрос.УстановитьПараметр("АвтоЭтап", Перечисления.СобытияОтложеннойОбработкиПроцессов.АвтоВыполнениеЭтапа);
	Запрос.УстановитьПараметр("АвтоТаймаут", Перечисления.СобытияОтложеннойОбработкиПроцессов.АвтоУтверждениеПоТаймауту);	
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапВход);	
	Выборка = Запрос.Выполнить().Выбрать();
	// Обход результатов выборки и утверждение этапов.	
	Пока Выборка.Следующий() Цикл
		ТекстКомментария = НСтр("ru = 'Автоматическое утверждение этапа по завершении интервала согласования (%ВремяСобытия% ч.) '");
		ТекстКомментария = СтрЗаменить(ТекстКомментария, "%ВремяСобытия%", Строка(Выборка.ВремяСобытия));
		СтруктураЭтапа = Новый Структура;
		СтруктураЭтапа.Вставить("Этап", 					Выборка.ЭтапПроцесса);
		СтруктураЭтапа.Вставить("Организация", 				Выборка.Организация);
		СтруктураЭтапа.Вставить("ДокументСогласования", 	Выборка.ДокументПроцесса);
		СтруктураЭтапа.Вставить("КомментарийСистемы", 		"");
		СтруктураЭтапа.Вставить("Комментарий", 				ТекстКомментария);
		МодульУправленияПроцессамиУХ.УтвердитьЭтап(, СтруктураЭтапа, Выборка.КлючевойОбъектПроцесса);	
	КонецЦикла;
КонецПроцедуры

// Возвращает таблицу, в которой указаны этапы, у которых
// нужно выполнять действия по расписанию, а также
// даты посленеднего и следующего выполнения.
Функция ПолучитьТаблицуДатыВыполненияДействийПоРасписаниямЭтапов()
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка,
		|	ЭтапыУниверсальныхПроцессов.ДействиеПоРасписанию,
		|	ЭтапыУниверсальныхПроцессов.Владелец
		|ПОМЕСТИТЬ ВТ_ЭтапыПроцессов
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|ГДЕ
		|	НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
		|	И ЭтапыУниверсальныхПроцессов.ДействиеПоРасписанию <> &ПустоеДействие
		|	И ЭтапыУниверсальныхПроцессов.ДействиеПоРасписанию <> &ДействиеНеВыполнять
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ЭтапыПроцессов.Ссылка КАК ЭтапПроцесса,
		|	ВТ_ЭтапыПроцессов.Владелец КАК ШаблонПроцесса,
		|	ЕСТЬNULL(ЭкземплярПроцесса.СостояниеВыполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.ПустаяСсылка)) КАК СостояниеВыполнения,
		|	ЕСТЬNULL(ЭкземплярПроцесса.Ссылка, ЗНАЧЕНИЕ(Документ.ЭкземплярПроцесса.ПустаяСсылка)) КАК ЭкземплярПроцесса
		|ПОМЕСТИТЬ ВТ_ЭкземплярыПроцессов
		|ИЗ
		|	ВТ_ЭтапыПроцессов КАК ВТ_ЭтапыПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|		ПО ВТ_ЭтапыПроцессов.Владелец = ЭкземплярПроцесса.ШаблонПроцесса
		|ГДЕ
		|	НЕ ЭкземплярПроцесса.ПометкаУдаления
		|	И ЕСТЬNULL(ЭкземплярПроцесса.СостояниеВыполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.ВРаботе)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ЭкземплярыПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВТ_ЭкземплярыПроцессов.ЭтапПроцесса.ДействиеПоРасписанию КАК ДействиеПоРасписанию,
		|	ЕСТЬNULL(ДатыВыполненияДействийПоРасписаниямЭтапов.ДатаПоследнегоИсполнения, &ПустаяДата) КАК ДатаПоследнегоИсполнения,
		|	ЕСТЬNULL(ДатыВыполненияДействийПоРасписаниямЭтапов.ДатаСледующегоИсполнения, &ПустаяДата) КАК ДатаСледующегоИсполнения,
		|	ЕСТЬNULL(ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)) КАК СостояниеЭтапа,
		|	ВТ_ЭкземплярыПроцессов.ЭкземплярПроцесса
		|ИЗ
		|	ВТ_ЭкземплярыПроцессов КАК ВТ_ЭкземплярыПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДатыВыполненияДействийПоРасписаниямЭтапов КАК ДатыВыполненияДействийПоРасписаниямЭтапов
		|		ПО ВТ_ЭкземплярыПроцессов.ЭтапПроцесса = ДатыВыполненияДействийПоРасписаниямЭтапов.ЭтапПроцесса
		|			И ВТ_ЭкземплярыПроцессов.ЭкземплярПроцесса = ДатыВыполненияДействийПоРасписаниямЭтапов.ЭкземплярПроцесса
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессовСрезПоследних
		|		ПО ВТ_ЭкземплярыПроцессов.ЭтапПроцесса = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
		|			И ВТ_ЭкземплярыПроцессов.ЭкземплярПроцесса = ВыполнениеПроцессовСрезПоследних.ДокументПроцесса";
	Запрос.УстановитьПараметр("ДействиеНеВыполнять", Перечисления.ДействияЭтапаПоРасписанию.НеВыполнятьДействий);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	Запрос.УстановитьПараметр("ПустоеДействие", Перечисления.ДействияЭтапаПоРасписанию.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Регламентная обработка действий по расписанию этапов процессов.
Процедура ВыполнитьДействияПоРасписаниюЭтапов() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыполнениеДействийПоРасписаниюЭтапов);
	
	ТаблицаДатВыполнения = ПолучитьТаблицуДатыВыполненияДействийПоРасписаниямЭтапов();
	ТекДата = ТекущаяДата();
	Для Каждого ТекТаблицаДатВыполнения Из ТаблицаДатВыполнения Цикл
		НетДатыПоследнегоИсполнения = НЕ ЗначениеЗаполнено(ТекТаблицаДатВыполнения.ДатаПоследнегоИсполнения);
		НетДатыСледующегоИсполнения = НЕ ЗначениеЗаполнено(ТекТаблицаДатВыполнения.ДатаСледующегоИсполнения);
		НеВыполнялосьРанее = НетДатыПоследнегоИсполнения ИЛИ НетДатыСледующегоИсполнения;
		Если НеВыполнялосьРанее Тогда
			МодульУправленияПроцессамиУХ.ВыполнитьНазначенноеДействиеДляЭтапа(ТекТаблицаДатВыполнения.ЭтапПроцесса, ТекТаблицаДатВыполнения.ЭкземплярПроцесса, ТекТаблицаДатВыполнения.СостояниеЭтапа);
		Иначе
			Если ТекТаблицаДатВыполнения.ДатаСледующегоИсполнения < ТекДата Тогда
				МодульУправленияПроцессамиУХ.ВыполнитьНазначенноеДействиеДляЭтапа(ТекТаблицаДатВыполнения.ЭтапПроцесса, ТекТаблицаДатВыполнения.ЭкземплярПроцесса, ТекТаблицаДатВыполнения.СостояниеЭтапа);
			Иначе
				// Дата ещё не наступила.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ЦентрализованноеКазначейство

Процедура ВыполнитьПереоценкуЗаявок() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПереоценкаЗаявок);
	ПлатежныеПозиции.ВыполнитьПереоценкуЗаявок();
	
КонецПроцедуры

Процедура СформироватьЗаявкиПоДоговорам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ФормированиеЗаявокПоГрафикамОплаты);
	РасчетГрафиковОперацийУХ.СформироватьЗаявкиПоГрафикуОплаты();
КонецПроцедуры

Процедура ОтправитьПроведенныеЗаявкиНаСогласование() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаНаСогласованиеЗаявокНаОперации);
	
	Интервал = Константы.СрокАвтоОтправкиЗаявокНаСогласование.Получить();
	МаксДата = КонецДня(ТекущаяДата() + 86400 * Интервал);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегистрСостоянийОбъектовСрезПоследних.Объект КАК Ссылка
	|ИЗ
	|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|			,
	|			Объект В
	|				(ВЫБРАТЬ
	|					ЗаявкаНаРасходованиеДенежныхСредств.Ссылка
	|				ИЗ
	|					Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|				ГДЕ
	|					ЗаявкаНаРасходованиеДенежныхСредств.Проведен
	|					И ЗаявкаНаРасходованиеДенежныхСредств.ДатаНачала <= &КрайняяДата
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ
	|					ОжидаемоеПоступлениеДенежныхСредств.Ссылка
	|				ИЗ
	|					Документ.ОжидаемоеПоступлениеДенежныхСредств КАК ОжидаемоеПоступлениеДенежныхСредств
	|				ГДЕ
	|					ОжидаемоеПоступлениеДенежныхСредств.Проведен
	|					И ОжидаемоеПоступлениеДенежныхСредств.ДатаНачала <= &КрайняяДата
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ
	|					ЗаявкаНаРасход.Ссылка
	|				ИЗ
	|					Документ.ЗаявкаНаРасход КАК ЗаявкаНаРасход
	|				ГДЕ
	|					ЗаявкаНаРасход.Проведен
	|					И ЗаявкаНаРасход.ДатаНачала <= &КрайняяДата
	|			
	|				ОБЪЕДИНИТЬ ВСЕ
	|			
	|				ВЫБРАТЬ
	|					ПланируемыйДоход.Ссылка
	|				ИЗ
	|					Документ.ПланируемыйДоход КАК ПланируемыйДоход
	|				ГДЕ
	|					ПланируемыйДоход.Проведен
	|					И ПланируемыйДоход.ДатаНачала <= &КрайняяДата)) КАК РегистрСостоянийОбъектовСрезПоследних
	|ГДЕ
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)";
	
	Запрос.УстановитьПараметр("КрайняяДата", МаксДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ИмяСобытия = МодульУправленияПроцессамиУХ.ПринятьКОбработке(, Выборка.Ссылка);
				
	КонецЦикла;
	
КонецПроцедуры

Процедура СформироватьЗаявкиНаПереводИзлишковСредств() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПереводИзлишковДенежныхСредств);
	
	ОбработкаОбъект = Обработки.ГенерацияЗаявокНаРазмещениеСвободныхОстатковДС.Создать();
	ОбработкаОбъект.ДатаОстатков = НачалоДня(ТекущаяДатаСеанса());
	ОбработкаОбъект.АвтоматическаяГенерация = Истина;
	ОбработкаОбъект.ЗаполнитьТаблицуЗаявокНаРазмещение();
	ОбработкаОбъект.СформироватьЗаявкиНаРазмещение();
	
КонецПроцедуры

Процедура ЗагрузитьСтавкиМосПрайм() Экспорт

	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ЗагрузкаСтавокМосПрайм);
	Обработки.ЗагрузкаСтавокМоспрайм.ЗагрузитьСтавкиМосПрайм();

КонецПроцедуры


#КонецОбласти

#Область УправлениеЗадачами

// Формирует тело письма для ссылки mailto по задаче ЗадачаПроцессаВход. Когда
// НомерДействия - 1, то формируется задача согласования; 2 - отклонения; 3 - на шаг назад
Функция СформироватьТелоПисьмаСогласование(ЗадачаПроцессаВход, НомерДействия, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход)
	РезультатФункции = "";         
	РезультатФункции = РезультатФункции + Нстр("ru = 'Ваше решение: '");
	РезультатФункции = РезультатФункции + "%0D%0A";
	ДокументПроцесса = ПолучитьДокументПроцессаПоЗадачеЭтапа(ЗадачаПроцессаВход, ОтветственныйВход, ЭтапПроцессаВход);
	ТаблицаОтветственных = ДокументПроцесса.ДополнительныеСогласующие.Выгрузить();
	Если НомерДействия = 1 Тогда 		
		// Согласование.
		РезультатФункции = РезультатФункции + Нстр("ru = '[Согласовано]'");
		РезультатФункции = РезультатФункции + "%0D%0A";
		РезультатФункции = РезультатФункции + "%0D%0A";
		РезультатФункции = РезультатФункции + Нстр("ru = 'Следующий этап согласования: '");
		РезультатФункции = РезультатФункции + "%0D%0A";
		РезультатФункции = РезультатФункции + ПолучитьСтрокуЭтаповПоследователей(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцесса);
		РезультатФункции = РезультатФункции + "%0D%0A";
		РезультатФункции = РезультатФункции + "%0D%0A";
	ИначеЕсли НомерДействия = 2 Тогда
		// Отклонение.
		РезультатФункции = РезультатФункции + Нстр("ru = '[Возвращено инициатору]'");
		РезультатФункции = РезультатФункции + "%0D%0A";
		СвязанныйОбъект = ЗадачаПроцессаВход.СвязанныйОбъект;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвязанныйОбъект, "Ответственный") Тогда
			ОтвественныйОбъекта = СвязанныйОбъект.Ответственный;
			РезультатФункции = РезультатФункции + Строка(ОтвественныйОбъекта);
			РезультатФункции = РезультатФункции + "%0D%0A";
			РезультатФункции = РезультатФункции + "%0D%0A";
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвязанныйОбъект, "Автор") Тогда
			ОтвественныйОбъекта = СвязанныйОбъект.Автор;
			РезультатФункции = РезультатФункции + Строка(ОтвественныйОбъекта);
			РезультатФункции = РезультатФункции + "%0D%0A";
			РезультатФункции = РезультатФункции + "%0D%0A";
		Иначе
			// Не удалось получить ответственного. Пропускаем.
		КонецЕсли;
	ИначеЕсли НомерДействия = 3 Тогда
		// На шаг назад
		РезультатФункции = РезультатФункции + Нстр("ru = '[Возвращено на предыдущий этап согласования]'");
		РезультатФункции = РезультатФункции + "%0D%0A";
		РезультатФункции = РезультатФункции + ПолучитьСтрокуЭтаповПредшественников(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцесса);
		РезультатФункции = РезультатФункции + "%0D%0A";
		РезультатФункции = РезультатФункции + "%0D%0A";
	Иначе	
		// Неизвестный вариант. Пропускаем.
	КонецЕсли;
	Если НомерДействия = 2 Тогда
		РезультатФункции = РезультатФункции + Нстр("ru = 'Обязательно вставьте здесь Ваш комментарий:'");
	Иначе
		РезультатФункции = РезультатФункции + Нстр("ru = 'Вставьте здесь Ваш комментарий:'");
	КонецЕсли;
	РезультатФункции = РезультатФункции + "%0D%0A";        
	РезультатФункции = РезультатФункции + "%0D%0A";
	РезультатФункции = РезультатФункции + "%0D%0A";
	РезультатФункции = РезультатФункции + Нстр("ru = '*****ВНИМАНИЕ!*****'");
	РезультатФункции = РезультатФункции + "%0D%0A ";
	РезультатФункции = РезультатФункции + Нстр("ru = 'Далее приводится служебная информация для обработки согласования. Данная информация сформирована почтовым роботом. Не изменяйте и не удаляйте данный текст: '");
	РезультатФункции = РезультатФункции + МодульУправленияОповещениямиУХ.ПолучитьСлужебнуюЧастьПисьмаЗадачи();
	РезультатФункции = РезультатФункции + "%0D%0A";
	РезультатФункции = РезультатФункции + "msg_id:";
	Если ТипЗнч(ЗадачаПроцессаВход) = Тип("СправочникСсылка.Задачи") Тогда
		РезультатФункции = РезультатФункции + СокрЛП(ИдентификаторСообщения);
	Иначе
		РезультатФункции = РезультатФункции + "";			// Нет задачи, оставляем поле пустым.
	КонецЕсли;
	РезультатФункции = РезультатФункции + ";%0D%0A";
	РезультатФункции = РезультатФункции + "agreement_value:";
	Если НомерДействия = 1 Тогда
		РезультатФункции = РезультатФункции + "1";			// Согласование.
	ИначеЕсли НомерДействия = 2 Тогда
		РезультатФункции = РезультатФункции + "2";			// Отклонение.
	ИначеЕсли НомерДействия = 3 Тогда
		РезультатФункции = РезультатФункции + "3";			// На шаг назад
	Иначе	
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант действия по задаче %Задача%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Задача%", Строка(ЗадачаПроцессаВход));
		РезультатФункции = РезультатФункции + ""; 
	КонецЕсли;
	РезультатФункции = РезультатФункции + ";";
	Возврат РезультатФункции;
КонецФункции		// СформироватьТелоПисьмаСогласование()

// Формирует тело письма для ссылки mailto по задаче ЗадачаПроцессаВход для выбора этапа. 
Функция СформироватьТелоПисьмаВыборЭтапа(ЗадачаПроцессаВход, ИдентификаторЭтапа, ИдентификаторСообщения)
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + Нстр("ru = 'Вставьте Ваш комментарий здесь:'");
	РезультатФункции = РезультатФункции + "%0D%0A ";        // Символ перевода каретки.
	РезультатФункции = РезультатФункции + "%0D%0A ";
	РезультатФункции = РезультатФункции + "%0D%0A ";
	РезультатФункции = РезультатФункции + Нстр("ru = '*****ВНИМАНИЕ!*****'");
	РезультатФункции = РезультатФункции + "%0D%0A ";
	РезультатФункции = РезультатФункции + Нстр("ru = 'Далее приводится служебная информация для обработки согласования. Данная информация сформирована почтовым роботом. Не изменяйте и не удаляйте данный текст: '");
	РезультатФункции = РезультатФункции + МодульУправленияОповещениямиУХ.ПолучитьСлужебнуюЧастьПисьмаЗадачи();
	РезультатФункции = РезультатФункции + "%0D%0A";
	РезультатФункции = РезультатФункции + "msg_id:";
	Если ТипЗнч(ЗадачаПроцессаВход) = Тип("СправочникСсылка.Задачи") Тогда
		РезультатФункции = РезультатФункции + СокрЛП(ИдентификаторСообщения);
	Иначе
		РезультатФункции = РезультатФункции + "";			// Нет задачи, оставляем поле пустым.
	КонецЕсли;
	РезультатФункции = РезультатФункции + ";%0D%0A";
	РезультатФункции = РезультатФункции + "agreement_value:";
	РезультатФункции = РезультатФункции + ИдентификаторЭтапа;
	РезультатФункции = РезультатФункции + ";";
	Возврат РезультатФункции;
КонецФункции

// Формирует ссылку mailto для утверждения задачи ЗадачаПроцессаВход по ответственному ОтветственныйВход.
Функция СформироватьСсылкуУтверждение(ЗадачаПроцессаВход, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход = Неопределено)
	// Исходный формат ссылки: <a href="mailto:mail@example.com?subject=my subject&body=my message">Согласовано</a>
	// Формирование полей ссылки.
	УчетнаяЗаписьПолучатель = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	АдресПолучатель = УчетнаяЗаписьПолучатель.АдресЭлектроннойПочты;
	Если ЭтапПроцессаВход = Неопределено Тогда
		ТемаПисьма = НСтр("ru = 'Согласование этапа'");
	Иначе
		ТемаПисьма = НСтр("ru = 'Согласование этапа %ЭтапПроцесса%'");
		ТемаПисьма = СтрЗаменить(ТемаПисьма, "%ЭтапПроцесса%", Строка(ЭтапПроцессаВход));
	КонецЕсли;
	ТелоПисьма = СформироватьТелоПисьмаСогласование(ЗадачаПроцессаВход, 1, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход);
	// Непосредственное заполнение шаблона ссылки.
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + "<a href='mailto:";
	РезультатФункции = РезультатФункции + Строка(АдресПолучатель);
	РезультатФункции = РезультатФункции + "?subject=";
	РезультатФункции = РезультатФункции + Строка(ТемаПисьма);
	РезультатФункции = РезультатФункции + "&body=";
	РезультатФункции = РезультатФункции + Строка(ТелоПисьма);
	РезультатФункции = РезультатФункции + "' style='color: Lightseagreen'>";
	РезультатФункции = РезультатФункции + НСтр("ru = 'Согласовано'");
	РезультатФункции = РезультатФункции + "</a>";
	Возврат РезультатФункции;
КонецФункции

// Формирует ссылку mailto для отклонения задачи ЗадачаПроцессаВход по ответственному ОтветственныйВход.
Функция СформироватьСсылкуОтклонения(ЗадачаПроцессаВход, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход = Неопределено)
	// Исходный формат ссылки: <a href="mailto:mail@example.com?subject=my subject&body=my message">Возвращено инициатору</a>
	// Формирование полей ссылки.
	УчетнаяЗаписьПолучатель = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	АдресПолучатель = УчетнаяЗаписьПолучатель.АдресЭлектроннойПочты;
	Если ЭтапПроцессаВход = Неопределено Тогда
		ТемаПисьма = НСтр("ru = 'Согласование этапа'");
	Иначе
		ТемаПисьма = НСтр("ru = 'Согласование этапа %ЭтапПроцесса%'");
		ТемаПисьма = СтрЗаменить(ТемаПисьма, "%ЭтапПроцесса%", Строка(ЭтапПроцессаВход));
	КонецЕсли;
	ТелоПисьма = СформироватьТелоПисьмаСогласование(ЗадачаПроцессаВход, 2, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход);
	// Непосредственное заполнение шаблона ссылки.
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + "<a href='mailto:";
	РезультатФункции = РезультатФункции + Строка(АдресПолучатель);
	РезультатФункции = РезультатФункции + "?subject=";
	РезультатФункции = РезультатФункции + Строка(ТемаПисьма);
	РезультатФункции = РезультатФункции + "&body=";
	РезультатФункции = РезультатФункции + Строка(ТелоПисьма);
	РезультатФункции = РезультатФункции + "' style='color: Crimson'>";
	РезультатФункции = РезультатФункции + НСтр("ru = 'Возвращено инициатору'");
	РезультатФункции = РезультатФункции + "</a>";
	Возврат РезультатФункции;
КонецФункции

// Формирует ссылку mailto для возвращения задачи ЗадачаПроцессаВход на шаг назад по ответственному ОтветственныйВход.
Функция СформироватьСсылкуШагНазад(ЗадачаПроцессаВход, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход = Неопределено)
	// Исходный формат ссылки: <a href="mailto:mail@example.com?subject=my subject&body=my message">Возвращено на предыдущий этап согласования</a>
	// Формирование полей ссылки.
	УчетнаяЗаписьПолучатель = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	АдресПолучатель = УчетнаяЗаписьПолучатель.АдресЭлектроннойПочты;
	Если ЭтапПроцессаВход = Неопределено Тогда
		ТемаПисьма = НСтр("ru = 'Согласование этапа'");
	Иначе
		ТемаПисьма = НСтр("ru = 'Согласование этапа %ЭтапПроцесса%'");
		ТемаПисьма = СтрЗаменить(ТемаПисьма, "%ЭтапПроцесса%", Строка(ЭтапПроцессаВход));
	КонецЕсли;
	ТелоПисьма = СформироватьТелоПисьмаСогласование(ЗадачаПроцессаВход, 3, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход);
	// Непосредственное заполнение шаблона ссылки.
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + "<a href='mailto:";
	РезультатФункции = РезультатФункции + Строка(АдресПолучатель);
	РезультатФункции = РезультатФункции + "?subject=";
	РезультатФункции = РезультатФункции + Строка(ТемаПисьма);
	РезультатФункции = РезультатФункции + "&body=";
	РезультатФункции = РезультатФункции + Строка(ТелоПисьма);
	РезультатФункции = РезультатФункции + "' style='color: Goldenrod'>";
	РезультатФункции = РезультатФункции + НСтр("ru = 'Возвращено на предыдущий этап согласования'");
	РезультатФункции = РезультатФункции + "</a>";
	Возврат РезультатФункции;
КонецФункции

// Формирует ссылку mailto для выбора этапа с идентификатором ИдентификаторЭтапаВход задачи ЗадачаПроцессаВход
// в сообщении ИдентификаторСообщения.
Функция СформироватьСсылкуВыборЭтапа(ЗадачаПроцессаВход, ИдентификаторЭтапаВход, ИдентификаторСообщения, НаименованиеЭтапаВход)
	// Формирование полей ссылки.
	УчетнаяЗаписьПолучатель = РаботаСПочтовымиСообщениями.СистемнаяУчетнаяЗапись();
	АдресПолучатель = УчетнаяЗаписьПолучатель.АдресЭлектроннойПочты;
	ТемаПисьма = НСтр("ru = 'Выбор этапа'");
	ТелоПисьма = СформироватьТелоПисьмаВыборЭтапа(ЗадачаПроцессаВход, ИдентификаторЭтапаВход, ИдентификаторСообщения);
	// Непосредственное заполнение шаблона ссылки.
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + "<a href='mailto:";
	РезультатФункции = РезультатФункции + Строка(АдресПолучатель);
	РезультатФункции = РезультатФункции + "?subject=";
	РезультатФункции = РезультатФункции + Строка(ТемаПисьма);
	РезультатФункции = РезультатФункции + "&body=";
	РезультатФункции = РезультатФункции + Строка(ТелоПисьма);
	РезультатФункции = РезультатФункции + "'>";
	РезультатФункции = РезультатФункции + Строка(НаименованиеЭтапаВход);
	РезультатФункции = РезультатФункции + "</a>";
	Возврат РезультатФункции;
КонецФункции

// Формирует навигационную ссылку с заголовком ЗаголовокСсылкиВход для согласования в системе 
// задачи ЗадачаПроцессаВход. Когда установлено значение СтрокаЦветаВход - ссылка будет выведена
// заданным цветом (формат HTML-цвета).
Функция СформироватьСсылкуСогласованияВСистеме(ЗадачаПроцессаВход, ЗаголовокСсылкиВход, СтрокаЦветаВход = "", ИдентификаторЭлемента = "")
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(ЗадачаПроцессаВход);
	РезультатФункции = "";
	РезультатФункции = РезультатФункции + "<a href='";
	РезультатФункции = РезультатФункции + Строка(НавигационнаяСсылка);
	Если ЗначениеЗаполнено(СтрокаЦветаВход) Тогда
		РезультатФункции = РезультатФункции + "' style='color: ";
		РезультатФункции = РезультатФункции + Строка(СтрокаЦветаВход);
	Иначе
		// Не добавляем
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторЭлемента) Тогда
		РезультатФункции = РезультатФункции + "' id='";
		РезультатФункции = РезультатФункции + Строка(ИдентификаторЭлемента);
	Иначе
		// Не добавляем
	КонецЕсли;
	РезультатФункции = РезультатФункции + "'>";
	РезультатФункции = РезультатФункции + СокрЛП(Строка(ЗаголовокСсылкиВход));
	РезультатФункции = РезультатФункции + "</a>";
	Возврат РезультатФункции;
КонецФункции

// Добавляет в массив МассивРезультат этапы-последователи этапа ЭтапВход. Параметр ГлубинаВход
// защищает от бесконечной рекурсии.
Процедура ДополнитьМассивПоследователей(МассивРезультат, ЭтапВход, ГлубинаВход = 0, ДокументПроцессаВход = Неопределено) Экспорт
	Если ГлубинаВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	ЭтоУсловныйПереход = (ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
	Если ЭтоУсловныйПереход И ЗначениеЗаполнено(ДокументПроцессаВход) Тогда
		ДеревоПереходов = ЭтапВход.УсловияСогласования.Получить();
		Если ЗначениеЗаполнено(ДеревоПереходов) Тогда
			МассивОпределенныхЭтапов = Новый Массив;
			СвязанныйОбъект = ДокументПроцессаВход.КлючевойОбъектПроцесса;
			ТаблицаЗначенийПараметровЭтапа = ЭтапВход.ЗначенияПараметров.Выгрузить(); 
			ТаблицаЗначенийТекущихПараметров = ДокументПроцессаВход.ПараметрыПроцесса.Выгрузить();
			МодульУправленияПроцессамиУХ.ОбработатьСпособПерехода(ДеревоПереходов.Строки, СвязанныйОбъект, МассивОпределенныхЭтапов, Истина, Неопределено, Истина, ТаблицаЗначенийТекущихПараметров, ТаблицаЗначенийПараметровЭтапа, ДокументПроцессаВход);
			Для Каждого ТекМассивОпределенныхЭтапов Из МассивОпределенныхЭтапов Цикл
				
				Если МассивРезультат.Найти(ТекМассивОпределенныхЭтапов) <> Неопределено тогда
					Возврат;
				КонецЕсли;
				
				МассивРезультат.Добавить(ТекМассивОпределенныхЭтапов);
				Если ТекМассивОпределенныхЭтапов.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
					// Не требуется получать последователей для данного этапа.
				Иначе
					// Это не этап согласования. Получим его последователей.
					ДополнитьМассивПоследователей(МассивРезультат, ТекМассивОпределенныхЭтапов, ГлубинаВход + 1, ДокументПроцессаВход);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Пустое дерево переходов. Нет последователей.
		КонецЕсли;
	Иначе	
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка,
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка.ТипЭтапа
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыУниверсальныхПроцессовЭтапыПредшественники
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап = &Этап
		|	И НЕ ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка.ПометкаУдаления";
		Запрос.УстановитьПараметр("Этап", ЭтапВход);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если МассивРезультат.Найти(ВыборкаДетальныеЗаписи.Ссылка) <> Неопределено тогда
				Возврат;
			КонецЕсли;
			
			МассивРезультат.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
			Если ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
				// Не требуется получать последователей для данного этапа.
			Иначе
				// Это не этап согласования. Получим его последователей.
				ДополнитьМассивПоследователей(МассивРезультат, ВыборкаДетальныеЗаписи.Ссылка, ГлубинаВход + 1, ДокументПроцессаВход);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Получает массив этапов-предшественников этапа ЭтапВход по документу процесса ДокументПроцессаВход. 
// Когда параметр ВключаяВложенныеМаршрутыВход установлен в Истина, также будут получены этапы вышестоящих 
// процессов.
Функция ПолучитьМассивПредшественниковЭтапаРекурсивно(ЭтапВход, ДокументПроцессаВход, ВключаяВложенныеМаршрутыВход = Ложь) Экспорт
	РезультатФункции = Новый Массив;
	ТаблицаЭтапов = ПолучитьТаблицуПредшественниковЭтапаРекурсивно(ЭтапВход, ДокументПроцессаВход, ВключаяВложенныеМаршрутыВход);
	РезультатФункции = ТаблицаЭтапов.ВыгрузитьКолонку("ЭтапПроцесса");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивПредшественниковЭтапаРекурсивно()

// Возвращает таблицу этапов-предшественников и их документов процесса для этапа
// ЭтапВход и документа процесса ДокументПроцессаВход. Когда параметр ВключаяВложенныеМаршрутыВход
// Истина, будут получены также этапы вышестоящих процессов.
Функция ПолучитьТаблицуПредшественниковЭтапаРекурсивно(ЭтапВход, ДокументПроцессаВход, ВключаяВложенныеМаршрутыВход = Ложь) Экспорт
	// Инициализация.
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("ДокументПроцесса");
	РезультатФункции.Колонки.Добавить("ЭтапПроцесса");
	ТекПроцесс = ДокументПроцессаВход;
	ТекЭтап = ЭтапВход;
	ЕстьРодительскийПроцесс = Истина;
	Счетчик = 0;
	Пока (ЕстьРодительскийПроцесс) И (Счетчик < 1000) Цикл
		// Получение массива предшественников текущего процесса.
		МассивПредшественниковТекущегоЭтапа = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ТекЭтап, ТекПроцесс);
		// Добавление полученных этапов в таблицу.
		Для Каждого ТекМассивПредшественниковТекущегоЭтапа Из МассивПредшественниковТекущегоЭтапа Цикл
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.ДокументПроцесса = ТекПроцесс;
			НоваяСтрока.ЭтапПроцесса = ТекМассивПредшественниковТекущегоЭтапа;
		КонецЦикла;	
		// Переопределение текущего процесса.
		Если ВключаяВложенныеМаршрутыВход Тогда
			ТекЭтап = ТекПроцесс.ЭтапРодитель;
			ТекПроцесс = ТекПроцесс.ПроцессРодитель;
			ЕстьРодительскийПроцесс = ((ЗначениеЗаполнено(ТекПроцесс)) И (ЗначениеЗаполнено(ТекЭтап)));
		Иначе
			ЕстьРодительскийПроцесс = Ложь;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуПредшественниковЭтапаРекурсивно()

// Рекурсивно дополняет последователей этапа ЭтапВход по процессу ДокументПроцессаВход в
// массив МассивИзм. Параметр ГлубинаРекурсииВход защищает от бесконечной рекурсии.
Процедура ВыполнитьПолучениеПоследователейЭтапаРекурсивно(ЭтапВход, ДокументПроцессаВход, МассивИзм, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	МассивНов = Новый Массив;
	ДополнитьМассивПоследователей(МассивНов, ЭтапВход, ГлубинаРекурсииВход, ДокументПроцессаВход);
	Для Каждого ТекМассивНов Из МассивНов Цикл
		
		Если ГлубинаРекурсииВход > 0 И МассивИзм.Найти(ТекМассивНов) <> Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		МассивИзм.Добавить(ТекМассивНов);
		ВыполнитьПолучениеПоследователейЭтапаРекурсивно(ТекМассивНов, ДокументПроцессаВход, МассивИзм, ГлубинаРекурсииВход + 1)
	КонецЦикла;	
КонецПроцедуры		// ВыполнитьПолучениеПоследователейЭтапаРекурсивно()

// Возвращает массив всех последователей этапа ЭтапВход для процесса ДокументПроцессаВход.
Функция ПолучитьМассивПоследователейЭтапаРекурсивно(ЭтапВход, ДокументПроцессаВход) Экспорт
	РезультатФункции = Новый Массив;
	ВыполнитьПолучениеПоследователейЭтапаРекурсивно(ЭтапВход, ДокументПроцессаВход, РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивПоследователейЭтапаРекурсивно()

// Возвращает копию массива этапов процессов МассивЭтаповВход, из которого удалены 
//все этапы, которые не являются этапами согласования.
Функция ОтделитьНеЭтапыСогласования(МассивЭтаповВход) Экспорт
	РезультатФункции = Новый Массив;
	Для Каждого ТекМассивЭтаповВход Из МассивЭтаповВход Цикл
		ЭтоДочернийМаршрут = (ТекМассивЭтаповВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
		ЭтоРучнойПереход = (ТекМассивЭтаповВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
		ЭтоЭтапСогласования = (ТекМассивЭтаповВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
		Если ЭтоЭтапСогласования ИЛИ ЭтоРучнойПереход ИЛИ ЭтоДочернийМаршрут Тогда
			РезультатФункции.Добавить(ТекМассивЭтаповВход);
		Иначе
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает экземпляр процесса по задаче ЗадачаПроцессаВход для ответственного 
// ОтветственныйВход в этапе ЭтапПроцессаВход.
Функция ПолучитьДокументПроцессаПоЗадачеЭтапа(ЗадачаПроцессаВход, ОтветственныйВход, ЭтапПроцессаВход)
	РезультатФункции = Документы.ЭкземплярПроцесса.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса = &ЭтапПроцесса
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный = &Ответственный
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача = &Задача";
	Запрос.УстановитьПараметр("Задача", ЗадачаПроцессаВход);
	Запрос.УстановитьПараметр("Ответственный", ОтветственныйВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции = ВыборкаДетальныеЗаписи.ДокументПроцесса;
	КонецЦикла;
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьДокументПроцессаПоЗадачеЭтапа()

// Добавляет служебную информацию для согласования в сообщение ТекстСообщенияВход
// по задаче ЗадачаПроцессаВход по согласующему ОтветственныйВход. Параметр ПоПочтеВход
// влияет на формат ссылок - mailto для почты и навигационные ссылки для оповещения
// в системе.
Функция ДобавитьТекстСогласованияПоЗадаче(ТекстСообщенияВход, ЗадачаПроцессаВход, ОтветственныйВход, ПоПочтеВход, ЭтапПроцессаВход = Неопределено) Экспорт
	РезультатФункции = ТекстСообщенияВход;
	ИдентификаторСообщения = МодульУправленияОповещениямиУХ.СоздатьЗаписьОтправленныеЗадачи(ЗадачаПроцессаВход, ОтветственныйВход);
	Если ПоПочтеВход Тогда   
		// Формирование ссылок mailto.
		ТекстСсылкиУтверждения	 = СформироватьСсылкуУтверждение(ЗадачаПроцессаВход, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход);
		ТекстСсылкиШагНазад		 = СформироватьСсылкуШагНазад(ЗадачаПроцессаВход, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход);
		ТекстСсылкиОтклонения	 = СформироватьСсылкуОтклонения(ЗадачаПроцессаВход, ОтветственныйВход, ИдентификаторСообщения, ЭтапПроцессаВход);
	Иначе
		// Формирование навигационных ссылок.
		ТекстСсылкиУтверждения	 = СформироватьСсылкуСогласованияВСистеме(ЗадачаПроцессаВход, НСтр("ru = 'Согласовано'"), "Lightseagreen", "cpm_accept");
		ТекстСсылкиШагНазад		 = СформироватьСсылкуСогласованияВСистеме(ЗадачаПроцессаВход, НСтр("ru = 'Возвращено на предыдущий этап согласования'"), "Goldenrod", "cpm_stepback");
		ТекстСсылкиОтклонения	 = СформироватьСсылкуСогласованияВСистеме(ЗадачаПроцессаВход, НСтр("ru = 'Возвращено инициатору'"), "Crimson", "cpm_decline");
	КонецЕсли;
	// Вставка сформированных ссылок в шаблон письма.
	ДокументПроцесса = ПолучитьДокументПроцессаПоЗадачеЭтапа(ЗадачаПроцессаВход, ОтветственныйВход, ЭтапПроцессаВход);
	ТаблицаОтветственных = ДокументПроцесса.ДополнительныеСогласующие.Выгрузить();
	ПозицияПоиска = СтрНайти(РезультатФункции, "</body>");
	Если ПозицияПоиска <> 0 Тогда  	// Найден закрывающий html-тег body. Вставим ссылки перед ним.
		ДлинаСтроки = СтрДлина(РезультатФункции);
		ЛеваяЧасть = Лев(РезультатФункции, ПозицияПоиска-1);
		ПраваяЧасть = Сред(РезультатФункции, ПозицияПоиска, ДлинаСтроки - ПозицияПоиска+1);
		РезультатФункции = ЛеваяЧасть;
		РезультатФункции = РезультатФункции + "<br>";
		РезультатФункции = РезультатФункции + " [";
		РезультатФункции = РезультатФункции + ТекстСсылкиУтверждения;
		РезультатФункции = РезультатФункции + "]<br><i>";
		СтрокаПоследователей = ПолучитьСтрокуЭтаповПоследователей(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцесса);
		РезультатФункции = РезультатФункции + СтрокаПоследователей;
		РезультатФункции = РезультатФункции + "</i><br><br>[";
		РезультатФункции = РезультатФункции + ТекстСсылкиШагНазад;
		РезультатФункции = РезультатФункции + "]<br><i>";
		СтрокаПредшественников = ПолучитьСтрокуЭтаповПредшественников(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцесса);
		РезультатФункции = РезультатФункции + СтрокаПредшественников;
		РезультатФункции = РезультатФункции + "</i>";
		РезультатФункции = РезультатФункции + " <br><br>[";
		РезультатФункции = РезультатФункции + ТекстСсылкиОтклонения;
		РезультатФункции = РезультатФункции + "]<br>";
		СвязанныйОбъект = ЗадачаПроцессаВход.СвязанныйОбъект;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвязанныйОбъект, "Ответственный") Тогда
			ОтвественныйОбъекта = СвязанныйОбъект.Ответственный;
			РезультатФункции = РезультатФункции + "<i>";
			РезультатФункции = РезультатФункции + Строка(ОтвественныйОбъекта);
			РезультатФункции = РезультатФункции + "</i>";
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвязанныйОбъект, "Автор") Тогда
			ОтвественныйОбъекта = СвязанныйОбъект.Автор;
			РезультатФункции = РезультатФункции + "<i>";
			РезультатФункции = РезультатФункции + Строка(ОтвественныйОбъекта);
			РезультатФункции = РезультатФункции + "</i>";
		Иначе
			// Оставляем.
		КонецЕсли;	
	Иначе			
		// Тег не найден. Допишем ссылку в конец.
		РезультатФункции = РезультатФункции + "<br>";
		РезультатФункции = РезультатФункции + " [";
		РезультатФункции = РезультатФункции + ТекстСсылкиУтверждения;
		РезультатФункции = РезультатФункции + "]<br><i>";
		СтрокаПоследователей = ПолучитьСтрокуЭтаповПоследователей(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцесса);
		РезультатФункции = РезультатФункции + СтрокаПоследователей;
		РезультатФункции = РезультатФункции + "</i><br><br>[";
		РезультатФункции = РезультатФункции + ТекстСсылкиШагНазад;
		РезультатФункции = РезультатФункции + "]<br><i>";
		СтрокаПредшественников = ПолучитьСтрокуЭтаповПредшественников(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцесса);
		РезультатФункции = РезультатФункции + СтрокаПредшественников;
		РезультатФункции = РезультатФункции + "</i>";
		РезультатФункции = РезультатФункции + " <br><br>[";
		РезультатФункции = РезультатФункции + ТекстСсылкиОтклонения;
		РезультатФункции = РезультатФункции + "]<br>";
		СвязанныйОбъект = ЗадачаПроцессаВход.СвязанныйОбъект;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвязанныйОбъект, "Ответственный") Тогда
			ОтвественныйОбъекта = СвязанныйОбъект.Ответственный;
			РезультатФункции = РезультатФункции + "<i>";
			РезультатФункции = РезультатФункции + Строка(ОтвественныйОбъекта);
			РезультатФункции = РезультатФункции + "</i>";
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СвязанныйОбъект, "Автор") Тогда
			ОтвественныйОбъекта = СвязанныйОбъект.Автор;
			РезультатФункции = РезультатФункции + "<i>";
			РезультатФункции = РезультатФункции + Строка(ОтвественныйОбъекта);
			РезультатФункции = РезультатФункции + "</i>";
		Иначе
			// Оставляем.
		КонецЕсли;	
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

// Добавляет в строку СтрокаТекстаСообщенияВход текст выбора этапов
// для оповещения в системе из списка СписокЭтаповВход по задаче ЗадачаПроцессаВход.
Процедура ДобавитьТекстСпискаВыбораЭтапов(СтрокаТекстаСообщенияВход, СписокЭтаповВход, ЗадачаПроцессаВход, ИдентификаторСообщения, ПоПочте = Ложь)
	КоличествоКолонокВывода = 5;
	Счетчик = 0;
	Для Каждого ТекСписокЭтаповВход Из СписокЭтаповВход Цикл
		Если (Счетчик % КоличествоКолонокВывода = 0) И (Счетчик > 0) Тогда
			// Переведём на новую строчку, чтобы не создавать горионтальной прокурутки в письме.
			СтрокаТекстаСообщенияВход = СтрокаТекстаСообщенияВход + "<br>";
		Иначе
			// Не достигнут конец строки, не переводим.
		КонецЕсли;
		СтрокаТекстаСообщенияВход = СтрокаТекстаСообщенияВход + " [";
		ИдентификаторЭтапа = ТекСписокЭтаповВход.Значение.УникальныйИдентификатор();
		Если ПоПочте Тогда
			СтрокаТекстаСообщенияВход = СтрокаТекстаСообщенияВход + СформироватьСсылкуВыборЭтапа(ЗадачаПроцессаВход, ИдентификаторЭтапа, ИдентификаторСообщения, Строка(ТекСписокЭтаповВход.Значение));
		Иначе	
			СтрокаТекстаСообщенияВход = СтрокаТекстаСообщенияВход + СформироватьСсылкуСогласованияВСистеме(ЗадачаПроцессаВход, Строка(ТекСписокЭтаповВход.Значение), , Строка(ИдентификаторЭтапа));
		КонецЕсли;
		СтрокаТекстаСообщенияВход = СтрокаТекстаСообщенияВход + "]";
		Счетчик = Счетчик + 1;
	КонецЦикла;
КонецПроцедуры

// Добавляет служебную информацию для выбора этапа в сообщение ТекстСообщенияВход
// по задаче ЗадачаПроцессаВход по согласующему ОтветственныйВход. Параметр ПоПочтеВход
// влияет на формат ссылок - mailto для почты и навигационные ссылки для оповещения
// в системе.
Функция ДобавитьТекстВыбораЭтапаПоЗадаче(ТекстСообщенияВход, ЗадачаПроцессаВход, ОтветственныйВход, ПоПочтеВход, ЭтапПроцессаВход) Экспорт
	РезультатФункции = ТекстСообщенияВход;
	ИдентификаторСообщения = МодульУправленияОповещениямиУХ.СоздатьЗаписьОтправленныеЗадачи(ЗадачаПроцессаВход, ОтветственныйВход);
	СписокЭтаповВход = МодульСогласованияДокументовУХ.ПолучитьЭтапыВыбораРучногоПерехода(ЭтапПроцессаВход);
	Если ПоПочтеВход Тогда   
		// Формирование ссылок mailto.
		ТекстСсылкиУтверждения	 = "";
		ТекстСсылкиШагНазад		 = "";
		ТекстСсылкиОтклонения	 = "";
	Иначе
		// Формирование навигационных ссылок.
	КонецЕсли;
	// Вставка сформированных ссылок в шаблон письма.
	ПозицияПоиска = СтрНайти(РезультатФункции, "</body>");
	Если ПозицияПоиска <> 0 Тогда  	// Найден закрывающий html-тег body. Вставим ссылки перед ним.
		ДлинаСтроки = СтрДлина(РезультатФункции);
		ЛеваяЧасть = Лев(РезультатФункции, ПозицияПоиска-1);
		ПраваяЧасть = Сред(РезультатФункции, ПозицияПоиска, ДлинаСтроки - ПозицияПоиска+1);
		РезультатФункции = ЛеваяЧасть;
		РезультатФункции = РезультатФункции + "<hr>";
		ДобавитьТекстСпискаВыбораЭтапов(РезультатФункции, СписокЭтаповВход, ЗадачаПроцессаВход, ИдентификаторСообщения, ПоПочтеВход);
		РезультатФункции = РезультатФункции + ПраваяЧасть;
	Иначе			// Тег не найден. Допишем ссылку в конец.
		РезультатФункции = РезультатФункции + "<hr>"; 
		ДобавитьТекстСпискаВыбораЭтапов(РезультатФункции, СписокЭтаповВход, ЗадачаПроцессаВход, ИдентификаторСообщения, ПоПочтеВход);
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции

// Возвращает текстовое представление последующих за ЭтапПроцессаВход этапов и их ответственным
// по таблице ответственных ТаблицаОтветственныхВход и документу процесса ДокументПроцессаВход.
Функция ПолучитьСтрокуЭтаповПоследователей(ТаблицаОтветственныхВход, ЭтапПроцессаВход, ДокументПроцессаВход)
	РезультатФункции = "";
	МассивЭтаповПоследователей = Новый Массив;
	ДополнитьМассивПоследователей(МассивЭтаповПоследователей, ЭтапПроцессаВход, 0 , ДокументПроцессаВход);
	МассивЭтаповПоследователей		 = ОтделитьНеЭтапыСогласования(МассивЭтаповПоследователей); 
	Для Каждого ТекМассивЭтаповПоследователей Из МассивЭтаповПоследователей Цикл
		РезультатФункции = РезультатФункции + Строка(ТекМассивЭтаповПоследователей);
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Этап", ТекМассивЭтаповПоследователей);
		НайденныеСтроки = ТаблицаОтветственныхВход.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПерваяСтрока = НайденныеСтроки[0];
			РезультатФункции = РезультатФункции + " (";
			РезультатФункции = РезультатФункции + Строка(ПерваяСтрока.Пользователь);
			РезультатФункции = РезультатФункции + "), ";
		Иначе
			// Не добавляем информацию об ответственных.
		КонецЕсли;
		РезультатФункции = РезультатФункции + "; ";
		РезультатФункции = РезультатФункции + Символы.ПС;
	КонецЦикла;	
	Если СтрДлина(РезультатФункции) > 4 Тогда
		РезультатФункции = Лев(РезультатФункции, СтрДлина(РезультатФункции) - 5);
	Иначе
		РезультатФункции = НСтр("ru = '<Нет последующих этапов>'");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСтрокуЭтаповПоследователей()

// Возвращает текстовое представление предыдущих перед ЭтапПроцессаВход этапов и их ответственным
// по таблице ответственных ТаблицаОтветственныхВход и документу процесса ДокументПроцессаВход.
Функция ПолучитьСтрокуЭтаповПредшественников(ТаблицаОтветственныхВход, ЭтапПроцессаВход, ДокументПроцессаВход)
	МассивЭтаповПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ЭтапПроцессаВход, ДокументПроцессаВход);
	МассивЭтаповПредшественников = ОтделитьНеЭтапыСогласования(МассивЭтаповПредшественников); 
	МассивПредшественников = МодульУправленияПроцессамиУХ.ОчиститьНепройденныеЭтапы(ДокументПроцессаВход, МассивПредшественников);
	РезультатФункции = "";
	Для Каждого ТекМассивЭтаповПредшественников Из МассивЭтаповПредшественников Цикл
		РезультатФункции = РезультатФункции + Строка(ТекМассивЭтаповПредшественников);
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Этап", ТекМассивЭтаповПредшественников);
		НайденныеСтроки = ТаблицаОтветственныхВход.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПерваяСтрока = НайденныеСтроки[0];
			РезультатФункции = РезультатФункции + " (";
			РезультатФункции = РезультатФункции + Строка(ПерваяСтрока.Пользователь);
			РезультатФункции = РезультатФункции + "), ";
		Иначе
			// Не добавляем информацию об ответственных.
		КонецЕсли;
		РезультатФункции = РезультатФункции + "; ";
		РезультатФункции = РезультатФункции + Символы.ПС;
	КонецЦикла;	
	Если СтрДлина(РезультатФункции) > 4 Тогда
		РезультатФункции = Лев(РезультатФункции, СтрДлина(РезультатФункции) - 5);
	Иначе
		РезультатФункции = НСтр("ru = '<Нет предшествующих этапов>'");
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру с дополнительными параметрами оповещения ответственному 
// ОтветственныйВход для этапа ЭтапПроцессаВход по задаче ЗадачаПроцессаВход.
Функция СформироватьСтруктуруДополнительныхПараметровОповещенийПоЗадаче(ЗадачаПроцессаВход, ОтветственныйВход, ЭтапПроцессаВход, ДокументПроцессаВход)
	РезультатФункции = Новый Структура;
	// Текущий этап.
	РезультатФункции.Вставить("ЭтапСогласования", ЭтапПроцессаВход);
	// Этапы-последователи.
	ТаблицаОтветственных = ДокументПроцессаВход.ДополнительныеСогласующие.Выгрузить();
	СтрокаЭтапыПоследователи = ПолучитьСтрокуЭтаповПоследователей(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцессаВход);
	РезультатФункции.Вставить("ЭтапыПоследователи", СтрокаЭтапыПоследователи);
	// Этапы-предшественники.
	СтрокаЭтапыПредшественники = ПолучитьСтрокуЭтаповПредшественников(ТаблицаОтветственных, ЭтапПроцессаВход, ДокументПроцессаВход);
	РезультатФункции.Вставить("ЭтапыПредшественники", СтрокаЭтапыПредшественники);
	// Инициатор.
	ИсточникСсылка = ЗадачаПроцессаВход.СвязанныйОбъект;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникСсылка, "Ответственный") Тогда
		РезультатФункции.Вставить("Инициатор", ИсточникСсылка.Ответственный);	
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ИсточникСсылка, "Автор") Тогда
		РезультатФункции.Вставить("Инициатор", ИсточникСсылка.Автор);	
	Иначе
		РезультатФункции.Вставить("Инициатор", Справочники.Пользователи.ПустаяСсылка());
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// СформироватьСтруктуруДополнительныхПараметровОповещенийПоЗадаче()

// По данной задаче ЗадачаПроцессаВход и ответственному ОтветственныйВход создаёт оповещение.
Процедура СоздатьОповещениеПоЗадаче(ЗадачаПроцессаВход, ОтветственныйВход, ЭтапПроцессаВход = Неопределено, ДокументПроцессаВход, ДополнительныеПараметры = Неопределено)
	// Определим вид события.
	Если ЭтапПроцессаВход <> Неопределено Тогда
		Если ЭтапПроцессаВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
			ВидСобытияТребуетсяСогласование = Справочники.ВидыСобытийОповещений.ТребуетсяОбработка;
		ИначеЕсли ЭтапПроцессаВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
			ВидСобытияТребуетсяСогласование = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа;
		ИначеЕсли ЭтапПроцессаВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
			ВидСобытияТребуетсяСогласование = Справочники.ВидыСобытийОповещений.ТребуетсяВыборЭтапа;			
		Иначе	
			ВидСобытияТребуетсяСогласование = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование;
		КонецЕсли;	
	Иначе
		ВидСобытияТребуетсяСогласование = Справочники.ВидыСобытийОповещений.ТребуетсяСогласование;
	КонецЕсли;	
	ИсточникСсылка = ЗадачаПроцессаВход.СвязанныйОбъект;
	// Добавим получателей.
	МассивРассылки = Новый Массив;
	МассивРассылки.Добавить(ОтветственныйВход);
	// Добавим дополнительные параметры.
	СтруктураДопПараметров = СформироватьСтруктуруДополнительныхПараметровОповещенийПоЗадаче(ЗадачаПроцессаВход, ОтветственныйВход, ЭтапПроцессаВход, ДокументПроцессаВход);
	
	ВспомогательныеТипыЭтапов = Новый Массив();
	
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение);
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение);
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
	ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
	
	Если ДополнительныеПараметры <> неопределено тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДополнительныеПараметры, "ТекущийЭтап") тогда
			
			ТекущийЭтап = неопределено;
			
			Если ВспомогательныеТипыЭтапов.Найти(ДополнительныеПараметры.ТекущийЭтап.ТипЭтапа) <> Неопределено тогда
				
				МассивПредшественниковЭтапаПроцесса = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ДополнительныеПараметры.ТекущийЭтап, ДокументПроцессаВход);
				
				Для каждого ПредшествующийЭтап Из МассивПредшественниковЭтапаПроцесса Цикл
					Если  ВспомогательныеТипыЭтапов.Найти(ПредшествующийЭтап.ТипЭтапа) = Неопределено тогда
						ТекущийЭтап = ПредшествующийЭтап;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			Иначе	
				ТекущийЭтап = ДополнительныеПараметры.ТекущийЭтап;
			КонецЕсли;
			
			Если ТекущийЭтап <> неопределено тогда	
				СтруктураДопПараметров.Вставить("ТекущийЭтап", ТекущийЭтап);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Непосредственная отправка.
	МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияТребуетсяСогласование, , ИсточникСсылка, МассивРассылки, СтруктураДопПараметров, ЗадачаПроцессаВход, ЭтапПроцессаВход);
КонецПроцедуры

// Снимает выполнение задачи ЗадачаВход
Процедура СброситьЗадачу(ЗадачаВход) Экспорт
	НаборЗаписей = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Задача.Установить(ЗадачаВход);
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

// Сбрасывает все задачи по объекту СвязанныйОбъектВход
Процедура СброситьЗадачиПоСвязанномуОбъекту(СвязанныйОбъектВход) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Задачи.Ссылка,
		|	Задачи.СвязанныйОбъект
		|ИЗ
		|	Справочник.Задачи КАК Задачи
		|ГДЕ
		|	Задачи.СвязанныйОбъект = &СвязанныйОбъект
		|	И Задачи.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъектВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СброситьЗадачу(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗадачу(ЗадачаПроцесса, Ответственный, ДокументПроцесса, ЭтапПроцесса, ВидДействия, ДополнительныеПараметры = Неопределено) Экспорт
		
	ЗадачиУП = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();
	ЗадачиУП.Отбор.Ответственный.Установить(Ответственный);
	ЗадачиУП.Отбор.ДокументПроцесса.Установить(ДокументПроцесса);
    ЗадачиУП.Отбор.ЭтапПроцесса.Установить(ЭтапПроцесса);
	ЗадачиУП.Отбор.Задача.Установить(ЗадачаПроцесса.Ссылка);
	
	НоваяЗадача = ЗадачиУП.Добавить();
	НоваяЗадача.ДокументПроцесса = ДокументПроцесса;
	НоваяЗадача.ЭтапПроцесса = ЭтапПроцесса;
	НоваяЗадача.Ответственный = Ответственный;
	НоваяЗадача.Задача = ЗадачаПроцесса.Ссылка;
	НоваяЗадача.Период = ТекущаяДата();
	НоваяЗадача.ВидДействия = ВидДействия;
	НоваяЗадача.ТипКлючевогоОбъекта = МодульСогласованияДокументовУХ.ПолучитьТипСогласуемогоОбъекта(ЗадачаПроцесса.СвязанныйОбъект);
	ЗадачиУП.Записать();
	// Создадим по данной задаче оповещение и укажем задачу в ресурсах.
	Если ВидДействия = Перечисления.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования Тогда
		СоздатьОповещениеПоЗадаче(ЗадачаПроцесса.Ссылка, Ответственный, ЭтапПроцесса, ДокументПроцесса, ДополнительныеПараметры);
	ИначеЕсли ВидДействия = Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа Тогда
		СоздатьОповещениеПоЗадаче(ЗадачаПроцесса.Ссылка, Ответственный, ЭтапПроцесса, ДокументПроцесса, ДополнительныеПараметры);
	Иначе
		// Не создаём задачу для остальных вариантов вида действия.
	КонецЕсли;
		
КонецПроцедуры	

Процедура ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцесса, ЭтапПроцесса) Экспорт
	
	ДлительностьСогласования = ?(ЗначениеЗаполнено(ЭтапПроцесса.ДлительностьСогласования), ЭтапПроцесса.ДлительностьСогласования, 0);
	АвтоматическоеУтверждение = ?(ЗначениеЗаполнено(ЭтапПроцесса.АвтоматическоеУтверждение) , ЭтапПроцесса.АвтоматическоеУтверждение, Ложь);
	
	Если НЕ ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза Тогда	
		Если НЕ АвтоматическоеУтверждение Тогда
			Возврат;
		КонецЕсли;	
	КонецЕсли;
			
	ТекВремя = ТекущаяДатаСеанса();
	ВремяЗавершенияЗадания = ТекВремя + 3600 * ДлительностьСогласования;
	
	НаборЗаписей = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭтапПроцесса.Значение      = ЭтапПроцесса;
	НаборЗаписей.Отбор.ЭтапПроцесса.Использование = Истина;
	
	НаборЗаписей.Отбор.ВидДействия.Значение      = Перечисления.СобытияОтложеннойОбработкиПроцессов.АвтоУтверждениеПоТаймауту;
	НаборЗаписей.Отбор.ВидДействия.Использование = Истина;
	
	НаборЗаписей.Отбор.ДокументПроцесса.Значение      = ДокументПроцесса;
	НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;
	
	НоваяСтрока                        = НаборЗаписей.Добавить();
	НоваяСтрока.ДокументПроцесса   =     ДокументПроцесса;
	НоваяСтрока.ЭтапПроцесса       =     ЭтапПроцесса;
	НоваяСтрока.ВремяНачалаЗадания     = ТекВремя;
	НоваяСтрока.ВремяСобытия           = ДлительностьСогласования;
	НоваяСтрока.ВремяЗавершенияЗадания = ВремяЗавершенияЗадания;
	НоваяСтрока.ВидДействия            = Перечисления.СобытияОтложеннойОбработкиПроцессов.АвтоУтверждениеПоТаймауту;
	НоваяСтрока.Выполнено     = Ложь;
	НоваяСтрока.ТипКлючевогоОбъекта     = ДокументПроцесса.ТипКлючевогоОбъекта;
	НоваяСтрока.КлючевойОбъект     = ДокументПроцесса.КлючевойОбъектПроцесса;
	НоваяСтрока.Ответственный          = Справочники.Пользователи.ПустаяСсылка();
	НоваяСтрока.Период = ТекущаяДата();		
	
	НаборЗаписей.Записать(Истина);
	
	
КонецПроцедуры

Процедура СброситьЗаданияПоЭтапуПроцесса(ДокументПроцесса, ЭтапПроцесса, ВидДействия = Неопределено,ОтветственныеТекущегоЭтапа=Неопределено) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.ЭтапПроцесса.Значение      = ЭтапПроцесса;
	НаборЗаписей.Отбор.ЭтапПроцесса.Использование = Истина;
	
	НаборЗаписей.Отбор.ДокументПроцесса.Значение      = ДокументПроцесса;
	НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;
	

	НаборЗаписей.Отбор.Выполнено.Значение		 = Ложь;
	НаборЗаписей.Отбор.Выполнено.Использование	 = Истина;		
	
	Если ВидДействия <> Неопределено Тогда
		НаборЗаписей.Отбор.ВидДействия.Значение      = ВидДействия;
		НаборЗаписей.Отбор.ВидДействия.Использование = Истина;
	КонецЕсли;
	НаборЗаписей.Прочитать();
	Выгрузка = НаборЗаписей.Выгрузить();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
	ВидДействияДопСогласование = Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа;
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		НоваяЗапись = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекВыгрузка);
		ЭтоДопСогласование = (НоваяЗапись.ВидДействия = ВидДействияДопСогласование);
		ЕстьАктивноеДопСогласование = МодульСогласованияДокументовУХ.ЕстьАктивноеДопСогласованиеПоЗадаче(НоваяЗапись.Задача);
		Если ЭтоДопСогласование И ЕстьАктивноеДопСогласование Тогда
			// Не обновляем такие записи.
		Иначе	
			НоваяЗапись.ВремяЗавершенияЗадания = ТекущаяДатаСеанса();
			НоваяЗапись.Выполнено = Истина;
		КонецЕсли;
		НоваяЗапись.Записать();
	КонецЦикла;

КонецПроцедуры

Процедура СброситьЗаданияПоПроцессу(ДокументПроцесса) Экспорт
	
	НаборЗаписей = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();	
	НаборЗаписей.Отбор.ДокументПроцесса.Значение      = ДокументПроцесса;
	НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;		
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ИнициализироватьТаблицуВыполненияПроцесса() Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("МодификацияСтроки");
	РезультатФункции.Колонки.Добавить("Этап");
	РезультатФункции.Колонки.Добавить("Организация");
	РезультатФункции.Колонки.Добавить("СостояниеЭтапа");
	РезультатФункции.Колонки.Добавить("ДатаНачала");
	РезультатФункции.Колонки.Добавить("ДатаОкончания");
	РезультатФункции.Колонки.Добавить("СостояниеЭтапаРасчетное");
	РезультатФункции.Колонки.Добавить("ДатаНачалаРасчетная");
	РезультатФункции.Колонки.Добавить("ДатаОкончанияРасчетная");
	РезультатФункции.Колонки.Добавить("ПлановаяДлительностьЭтапа");
	РезультатФункции.Колонки.Добавить("ПрофильОрганизации");
	РезультатФункции.Колонки.Добавить("ОтветственныйЗаЭтап");
	РезультатФункции.Колонки.Добавить("ДатаОкончанияПлановая");
	РезультатФункции.Колонки.Добавить("ВидДокументовЭтапа");
	Возврат РезультатФункции;			
КонецФункции		// ИнициализироватьТаблицуВыполненияПроцесса()

// Утверждает этап ЭтапПроцессаВход с типом обработка в процессе подготовки
// отчетности ДокументПроцессаВход. Возвращает успешность выполнения операции.
Функция УтвердитьЭтапОбработкаПодготовкиОтчетности(ЭтапПроцессаВход, ДокументПроцессаВход)
	РезультатФункции = Истина;
	Если (ЗначениеЗаполнено(ЭтапПроцессаВход)) И (ЗначениеЗаполнено(ДокументПроцессаВход)) Тогда
		Попытка
			НовоеСостояние = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
			КлючевойОбъект = ДокументПроцессаВход.КлючевойОбъектПроцесса;
			Если ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
				мПоследователиСтрок = Неопределено;
				мПредшественникиСтрок = Неопределено;
				ПериодОтчета		 = КлючевойОбъект.ПериодСценария;
				Сценарий			 = КлючевойОбъект.Сценарий;
				ВерсияРегламента	 = КлючевойОбъект.ВерсияОрганизационнойСтруктуры;
				СостоянияВыполненияПроцесса = ИнициализироватьТаблицуВыполненияПроцесса();
				УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(ПериодОтчета, Сценарий, ТекущаяДатаСеанса(), СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
				РезультатФункции = МодульУправленияПроцессамиУХ.ОбработатьЭтапОбработкаВПодготовкеОтчетности(ЭтапПроцессаВход, НовоеСостояние, ВерсияРегламента, ПериодОтчета, Сценарий, ДокументПроцессаВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок);
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант ключевого объекта %КлючевойОбъект% при переходе в этапе %Этап%. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КлючевойОбъект%", Строка(КлючевойОбъект));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцессаВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Ложь;
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'При утверждении этапа %Этапа% возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этапа%", Строка(ЭтапПроцессаВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не заполнены необходимые данные для перехода по этапу подгтовки отчетности. Операция отменена.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// УтвердитьЭтапОбработкаПодготовкиОтчетности()

// Выполняет согласование текущего и инициализацию следующих этапов
// для этапа с типом ТипЭтапаВход. Возвращает успешность выполнения.
Функция ОбработатьПереходПоЭтапуСТипом(ЗадачаВход, ТипЭтапаВход, КомментарийВход = "", ВыбранныйЭтапВход = Неопределено)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача КАК Задача,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия КАК ВидДействия,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса.Организация КАК Организация,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса.Владелец.НазначениеПроцесса КАК НазначениеПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа КАК ТипЭтапа
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
	|ГДЕ
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача = &Задача
	|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия = &ВидДействия
	|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа = &ТипЭтапа";
	Запрос.УстановитьПараметр("Задача", ЗадачаВход);
	Запрос.УстановитьПараметр("ВидДействия", Перечисления.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования);
	Запрос.УстановитьПараметр("ТипЭтапа", ТипЭтапаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТипЭтапаОбработка = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка;
	РезультатФункции = Истина;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтруктураУтверждения = Новый Структура();
		СтруктураУтверждения.Вставить("Этап", ВыборкаДетальныеЗаписи.ЭтапПроцесса);
		СтруктураУтверждения.Вставить("ДокументСогласования", ВыборкаДетальныеЗаписи.ДокументПроцесса);
		СтруктураУтверждения.Вставить("Организация", ВыборкаДетальныеЗаписи.Организация);
		СтруктураУтверждения.Вставить("Комментарий", КомментарийВход);
		СтруктураУтверждения.Вставить("ВыбранныйЭтап", ВыбранныйЭтапВход);
		СтатусТранзакции = МодульУправленияПроцессамиУХ.УтвердитьЭтап(, СтруктураУтверждения, ВыборкаДетальныеЗаписи.КлючевойОбъектПроцесса);	
		Если (СтатусТранзакции <> "ЭтапСогласован") И (СтатусТранзакции <> "ОбъектСогласован") Тогда
			РезультатФункции = Ложь;
			ТекстСообщения = НСтр("ru = 'Не удалось обработать этап %Этап% для объекта %ОбъектСогласования%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ВыборкаДетальныеЗаписи.ЭтапПроцесса));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(ВыборкаДетальныеЗаписи.КлючевойОбъектПроцесса));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Иначе
			// Для процесса подготовки отчетности и этапа Обработка запустим последователей этапа.
			Если ВыборкаДетальныеЗаписи.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
				Если ВыборкаДетальныеЗаписи.ТипЭтапа = ТипЭтапаОбработка Тогда
					РезультатОбработки = УтвердитьЭтапОбработкаПодготовкиОтчетности(ВыборкаДетальныеЗаписи.ЭтапПроцесса, ВыборкаДетальныеЗаписи.ДокументПроцесса);
					Если Не РезультатОбработки Тогда
						РезультатФункции = Ложь;
						Прервать;
					Иначе
						// Этап исполнен успешно. Продолжаем.
					КонецЕсли;
				Иначе
					// Для прочих этапов не требуется обработки.
				КонецЕсли;	
			Иначе
				// Для прочих процессов не запускаем обработку.
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ОбработатьПереходПоЭтапуСТипом()

// Устанавливание задаче ЗадачаВход статус "выполнено" с комментарием КомментарийВход, 
// а также выполняет переход по этапам для задачи обработки. Возвращает успешность выполняения 
// операции.
Функция ВыполнитьИОбработатьЗадачу(ЗадачаВход, КомментарийВход = "") Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	ТипЭтапаОбработка = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка;
	// Выполнение задачи.
	РезультатВыполнения = ВыполнитьЗадачу(ЗадачаВход, КомментарийВход);
	Если Не РезультатВыполнения Тогда
		РезультатФункции = Ложь;
	Иначе
		// Задача выполнена успешно.
	КонецЕсли;
	// Переход по этапам.
	РезультатВыполнения = ОбработатьПереходПоЭтапуСТипом(ЗадачаВход, ТипЭтапаОбработка, КомментарийВход);
	Если Не РезультатВыполнения Тогда
		РезультатФункции = Ложь;
	Иначе
		// Задача выполнена успешно.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВыполнитьИОбработатьЗадачу()

// Устанавливание задаче ЗадачаВход статус "выполнено" с комментарием КомментарийВход, 
// а также выполняет переход на этап ВыбранныйЭтапВход. Возвращает успешность выполнения операции.
Функция ВыполнитьЗадачуРучногоПерехода(ЗадачаВход, ВыбранныйЭтапВход, КомментарийВход = "", ПользовательВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	Попытка
		ТипЭтапаРучнойПереход = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход;
		Если ПользовательВход = Неопределено Тогда
			ПользовательРабочий = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Иначе
			ПользовательРабочий = ПользовательВход;
		КонецЕсли;
		// Получим доступные этапы и сравним с переданным.
		СписокЗадач = Новый СписокЗначений;
		СписокЗадач.Добавить(ЗадачаВход);
		СтруктураСогласованияСтроки = МодульСогласованияДокументовУХ.ПолучитьСтруктуруСогласованияСтроки(СписокЗадач, ПользовательРабочий);
		ЭтапРучногоПерехода = СтруктураСогласованияСтроки.ЭтапПроцесса;
		СписокЭтаповРезультат = МодульСогласованияДокументовУХ.ПолучитьЭтапыВыбораРучногоПерехода(ЭтапРучногоПерехода);
		Если СписокЭтаповРезультат.НайтиПоЗначению(ВыбранныйЭтапВход) <> Неопределено Тогда
			// Непосредственный переход по этапам.
			ВыполнитьЗадачу(ЗадачаВход, КомментарийВход);
			ТипЭтапаИзЭтапаРучнойПереход = ЭтапРучногоПерехода.ТипЭтапа;       // Это может быть как непосредственно ручной переход, так и ошибочный этап условного перехода.
			РезультатПерехода = ОбработатьПереходПоЭтапуСТипом(ЗадачаВход, ТипЭтапаИзЭтапаРучнойПереход, КомментарийВход, ВыбранныйЭтапВход);
			ДокументПроцесса =  СтруктураСогласованияСтроки.ДокументПроцесса;
			СвязанныйОбъект = ДокументПроцесса.КлючевойОбъектПроцесса;
			МодульУправленияПроцессамиУХ.ПостроитьМаршрутПроцесса(ДокументПроцесса, СвязанныйОбъект, , , Ложь, , , Истина);
			Если Не РезультатПерехода Тогда 
				РезультатФункции = Ложь;
			Иначе
				// Переход выполнен успешно. Не немяем результат функции.
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось выбрать этап %ВыбранныйЭтап% для %ОбъектСогласования%: такой этап не зарегистрирован для дальнейшего выбора.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранныйЭтап%", Строка(ВыбранныйЭтапВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(ЗадачаВход.СвязанныйОбъект));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось выбрать этап %ВыбранныйЭтап% для %ОбъектСогласования%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВыбранныйЭтап%", Строка(ВыбранныйЭтапВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(ЗадачаВход.СвязанныйОбъект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Устанавливание задаче ЗадачаВход статус "выполнено" с комментарием КомментарийВход. 
// Возвращает успешность выполняения операции.
Функция ВыполнитьЗадачу(ЗадачаВход, КомментарийВход = "") Экспорт
	РезультатФункции = Истина;
	Попытка
		// Считаем текущие значения из регистра ОтложеннаяОбработкаЭтаповПроцессов.
		НаборЗаписей = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Задача.Значение      = ЗадачаВход;
		НаборЗаписей.Отбор.Задача.Использование = Истина;
		НаборЗаписей.Прочитать();
		// Обновим нужные поля.
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
			ТекНаборЗаписей.ВремяЗавершенияЗадания = ТекущаяДатаСеанса();
			ТекНаборЗаписей.Выполнено = Истина;
			ТекНаборЗаписей.ТекстКомментария = КомментарийВход;
		КонецЦикла;
		// Запишем обновлённые данные.
		НаборЗаписей.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'При завершении задачи по объекту %Объект% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ЗадачаВход.СвязанныйОбъект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

Процедура СброситьЗаданияПоОбъектуПроцесса(КлючевойОбъектПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭкземплярПроцесса.Ссылка
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.ПометкаУдаления = Ложь
	|	И ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса";
	
	Запрос.УстановитьПараметр("", );
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьНаборЗаписей();	
		НаборЗаписей.Отбор.ДокументПроцесса.Значение      = Выборка.Ссылка;
		НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;		
		НаборЗаписей.Отбор.Выполнено.Значение		 = Ложь;
		НаборЗаписей.Отбор.Выполнено.Использование	 = Истина;		
		НаборЗаписей.Прочитать();
		Выгрузка = НаборЗаписей.Выгрузить();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		Для Каждого ТекВыгрузка Из Выгрузка Цикл
			НоваяЗапись = РегистрыСведений.ОтложеннаяОбработкаЭтаповПроцессов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекВыгрузка);
			НоваяЗапись.Период = ТекущаяДатаСеанса();
			НоваяЗапись.Выполнено = Истина;
		КонецЦикла;
		НаборЗаписей.Записать();

	КонецЦикла;
			
КонецПроцедуры

// Выделяет в тексте письма ТекстВход значение служебного поля
//с именем НазваниеПоляВход.
Функция ПолучитьЗначениеПоляПисьма(ТекстВход, НазваниеПоляВход)
	РезультатФункции = "";
	НайденнаяПозиция = СтрНайти(ТекстВход, НазваниеПоляВход);
	Если НайденнаяПозиция <> 0 Тогда
		ДлинаПоля = СтрДлина(НазваниеПоляВход);
		ПозицияРазделителя = СтрНайти(ТекстВход, ";", , НайденнаяПозиция + ДлинаПоля, 1);
		Если ПозицияРазделителя <> 0 Тогда
			РезультатФункции = Сред(ТекстВход, НайденнаяПозиция + ДлинаПоля + 1, ПозицияРазделителя - ДлинаПоля - НайденнаяПозиция -1);
		Иначе
			РезультатФункции = "";
		КонецЕсли;	
	Иначе
		РезультатФункции = "";
	КонецЕсли;	
	Возврат СокрЛП(РезультатФункции);
КонецФункции

// Возвращает тело html-документа из ТекстВход.
Функция ОчиститьHtmlВКомментарии(ТекстВход)
	РезультатФункции = ТекстВход;
	Если ЗначениеЗаполнено(ТекстВход) Тогда
		Построитель = Новый ПостроительDOM;
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(РезультатФункции);
		ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
		ТелоДокумента = ДокументHTML.Тело;
		РезультатФункции = ТелоДокумента.ТекстовоеСодержимое;
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОчиститьHtmlВКомментарии()

// Выделяет в тексте письма ТекстВход значение комментария пользователя.
Функция ВыделитьКомментарийВПисьме(ТекстВход)
	РезультатФункции = "";
	НайденнаяПозиция = СтрНайти(ТекстВход, Нстр("ru = '*****ВНИМАНИЕ!*****'"));
	Если НайденнаяПозиция <> 0 Тогда
		РезультатФункции = Лев(ТекстВход, НайденнаяПозиция - 1);
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Разделитель = Нстр("ru = 'Вставьте здесь Ваш комментарий:'");
	ПозицияРазделителя = СтрНайти(РезультатФункции, Разделитель);
	Если ПозицияРазделителя <> 0 Тогда
		ДлинаРазделителя = СтрДлина(Разделитель);
		ОбщаяДлина = СтрДлина(РезультатФункции);
		НачальнаяПозиция = ДлинаРазделителя + ПозицияРазделителя;
		РезультатФункции = Сред(РезультатФункции, НачальнаяПозиция, ОбщаяДлина - НачальнаяПозиция + 1);
		РезультатФункции = ОчиститьHtmlВКомментарии(РезультатФункции);
	Иначе
		// Не отделяем разделитель.
	КонецЕсли;
	Возврат СокрЛП(РезультатФункции);
КонецФункции

// Утверждает все этапы по пользователю ПользовательВход по документу ЗаявкаВход,
//устанавливая комментарий КомментарийВход. Возвращает успешность выполнения
Функция УтвердитьЭтапыПользователя(ПользовательВход, ЗаявкаВход, КомментарийВход, ДопСогласованиеВход = Ложь)
	РезультатФункции = Истина;
	Попытка
		ЭтапыПользователя = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляПользователя(ЗаявкаВход, ПользовательВход); 
		ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Замещение = (ПользовательВход <> ТекПользователь);
		Для Каждого ТекЭтапыПользователя Из ЭтапыПользователя Цикл
			ТекущийЭтапСтруктура = Новый Структура;
			ТекущийЭтапСтруктура.Вставить("Этап", ТекЭтапыПользователя.ЭтапПроцесса);
			ТекущийЭтапСтруктура.Вставить("ДокументСогласования", ТекЭтапыПользователя.ДокументПроцесса);
			ТекущийЭтапСтруктура.Вставить("Организация", ТекЭтапыПользователя.Организация);
			ТекущийЭтапСтруктура.Вставить("Комментарий", КомментарийВход);
			Если ДопСогласованиеВход Тогда
				РезультатСогласования = МодульСогласованияДокументовУХ.УтвердитьЭтапДополнительногоСогласования(ПользовательВход, ТекЭтапыПользователя.ДокументПроцесса, ТекЭтапыПользователя.ЭтапПроцесса, КомментарийВход, ТекЭтапыПользователя.Организация, Замещение);
				Если (Не РезультатСогласования) Тогда
					РезультатФункции = Ложь;
				Иначе
					Продолжить;
				КонецЕсли;
			Иначе
				РезультатСогласования = МодульУправленияПроцессамиУХ.УтвердитьЭтап(, ТекущийЭтапСтруктура, ЗаявкаВход, ПользовательВход);
				ДокументСогласованПолностью = (СокрЛП(РезультатСогласования) = "ОбъектСогласован");
				СогласованЭтап = (СокрЛП(РезультатСогласования) = "ЭтапСогласован");
				Если (Не СогласованЭтап) И (Не ДокументСогласованПолностью) Тогда
					РезультатФункции = Ложь;
				Иначе
					Продолжить;			
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;    
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время утверждения документа %Заявка% для пользователя %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заявка%", Строка(ЗаявкаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", Строка(ПользовательВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
		Возврат РезультатФункции;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Отклоняет все этапы по пользователю ПользовательВход по документу ЗаявкаВход,
// устанавливая комментарий КомментарийВход. Параметр ДопСогласование показывает,
// нужно ли ставить визу доп согласования. Возвращает успешность выполнения.
Функция ОтклонитьЭтапыПользователя(ПользовательВход, ЗаявкаВход, КомментарийВход, ДопСогласование = Ложь)
	РезультатФункции = Истина;
	НачатьТранзакцию();
	Попытка
		ЭтапыПользователя = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляПользователя(ЗаявкаВход, ПользовательВход); 
		ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Замещение = (ПользовательВход <> ТекПользователь);
		Для Каждого ТекЭтапыПользователя Из ЭтапыПользователя Цикл
			// Дополнительное согласование.
			Если ДопСогласование Тогда
				РезультатСогласования = МодульСогласованияДокументовУХ.ПоставитьДопВизу(ПользовательВход, ТекЭтапыПользователя.ДокументПроцесса, ТекЭтапыПользователя.ЭтапПроцесса, Ложь, КомментарийВход, ТекЭтапыПользователя.Организация);
				Если Не РезультатСогласования Тогда
					РезультатФункции = Ложь;
				Иначе
					// Согласование доп согласующего прошло успешно. Выполняем далее.
				КонецЕсли;
			Иначе
				// Доп виза не требуется. Выполняем далее.
			КонецЕсли;
			// Основное согласование.
			ТекущийЭтапСтруктура = Новый Структура;
			ТекущийЭтапСтруктура.Вставить("Этап", ТекЭтапыПользователя.ЭтапПроцесса);
			ТекущийЭтапСтруктура.Вставить("ДокументСогласования", ТекЭтапыПользователя.ДокументПроцесса);
			ТекущийЭтапСтруктура.Вставить("Организация", ТекЭтапыПользователя.Организация);
			ТекущийЭтапСтруктура.Вставить("Комментарий", КомментарийВход);
			РезультатСогласования = МодульУправленияПроцессамиУХ.ВернутьДокументНаДоработку(, ТекущийЭтапСтруктура, ЗаявкаВход, ПользовательВход);
			Если НЕ РезультатСогласования Тогда
				РезультатФункции = Ложь;
			Иначе
				Продолжить;			
			КонецЕсли;
		КонецЦикла;    
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время отклонения документа %Заявка% для пользователя %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заявка%", Строка(ЗаявкаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", Строка(ПользовательВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
		Возврат РезультатФункции;
	КонецПопытки;
	Если РезультатФункции Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Снимает все этапы по пользователю ПользовательВход по документу ЗаявкаВход,
// устанавливая комментарий КомментарийВход. После чего переводит согласование 
// на предыдущие этапы. Параметр ДопСогласование показывает, нужно ли ставить визу 
// доп согласования. Возвращает успешность выполнения.
Функция ПерейтиНаШагНазадПоЭтапу(ПользовательВход, ЗаявкаВход, КомментарийВход, ДопСогласование = Ложь)
	РезультатФункции = Истина;
	НачатьТранзакцию();
	Попытка
		ЭтапыПользователя = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляПользователя(ЗаявкаВход, ПользовательВход); 
		Для Каждого ТекЭтапыПользователя Из ЭтапыПользователя Цикл
			// Дополнительное согласование.
			Если ДопСогласование Тогда
				РезультатСогласования = МодульСогласованияДокументовУХ.ПоставитьДопВизу(ПользовательВход, ТекЭтапыПользователя.ДокументПроцесса, ТекЭтапыПользователя.ЭтапПроцесса, Ложь, КомментарийВход, ТекЭтапыПользователя.Организация);
				Если Не РезультатСогласования Тогда
					РезультатФункции = Ложь;
				Иначе
					// Согласование доп согласуюющего прошло успешно. Выполняем далее.
				КонецЕсли;
			Иначе
				// Доп виза не требуется. Выполняем далее.
			КонецЕсли;
			// Основное согласование.
			ТекущийЭтапСтруктура = Новый Структура;
			ТекущийЭтапСтруктура.Вставить("Этап", ТекЭтапыПользователя.ЭтапПроцесса);
			ТекущийЭтапСтруктура.Вставить("ДокументСогласования", ТекЭтапыПользователя.ДокументПроцесса);
			ТекущийЭтапСтруктура.Вставить("Организация", ТекЭтапыПользователя.Организация);
			ТекущийЭтапСтруктура.Вставить("Комментарий", КомментарийВход);
			РезультатСогласования = МодульУправленияПроцессамиУХ.ОтклонитьЭтап(, ТекущийЭтапСтруктура, ЗаявкаВход, ПользовательВход);
			Если НЕ РезультатСогласования Тогда
				РезультатФункции = Ложь;
			Иначе
				Продолжить;			
			КонецЕсли;
		КонецЦикла;    
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время возвращения документа %Заявка% для пользователя %Пользователь% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заявка%", Строка(ЗаявкаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Пользователь%", Строка(ПользовательВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
		Возврат РезультатФункции;
	КонецПопытки;
	Если РезультатФункции Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

//Оповещает пользователя ПользовательВход о результате согласования/отклонения документа ДокументВход
Процедура УведомитьПользователяОРезультатахСогласованияПоПочте(ПользовательВход, ДокументВход, КодДействияВход, УспешностьВход)
	КатегорияСогласование = Справочники.КатегорииСобытийОповещений.СобытияСогласования;
	ТекстСообщения = "";
	ДопПараметры = Неопределено;
	Если УспешностьВход Тогда
		// Уведомление об успешном согласовании было отправлено ранее.
	Иначе
		МассивРассылки = Новый Массив;
		МассивРассылки.Добавить(ПользовательВход);
		ВидСобытияОшибка = Справочники.ВидыСобытийОповещений.ОшибкаОбработкиСогласованияПоЭлектроннойПочте;
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияОшибка, , ДокументВход, МассивРассылки, , );
	КонецЕсли;
КонецПроцедуры

// Осуществляет обработку письма согласования ПисьмоВход.
Процедура ОбработатьПисьмоСогласование(ПисьмоВход)
	Попытка
		Для Каждого ТекТексты Из ПисьмоВход.Тексты Цикл
			// Проверка на сответствие письма письму согласования.
			ТекстПисьма = ТекТексты["Текст"];
			СлужебнаяЧастьПисьма = МодульУправленияОповещениямиУХ.ПолучитьСлужебнуюЧастьПисьмаЗадачи();
			НайденнаяПозиция = СтрНайти(ТекстПисьма, СлужебнаяЧастьПисьма);
			Если НайденнаяПозиция = 0 Тогда
				Продолжить;				// В письме не найдена служебная часть - письмо не относится к согласованию. Пропускаем его.
			Иначе
				// Получение служебных полей в письме.
				СтрокаИдентификаторСообщения	 = ПолучитьЗначениеПоляПисьма(ТекстПисьма, "msg_id");
				СтрокаКодДействия				 = ПолучитьЗначениеПоляПисьма(ТекстПисьма, "agreement_value");
				СтрокаКомментарий				 = ВыделитьКомментарийВПисьме(ТекстПисьма);
				// Обработка полученных значений полей.
				Если ЗначениеЗаполнено(СтрокаИдентификаторСообщения) И ЗначениеЗаполнено(СтрокаКодДействия) Тогда
					ПустаяЗаявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.ПустаяСсылка();
					ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
					ПустойТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ПустаяСсылка();
					ПустаяЗадача = Справочники.Задачи.ПустаяСсылка();
					СтруктураСообщения = МодульУправленияОповещениямиУХ.ПолучитьСтруктуруПоИдентификаторуСообщения(СтрокаИдентификаторСообщения);
					СсылкаЗаявка		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "СвязанныйОбъект", ПустаяЗаявка);
					СсылкаПользователь	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "Пользователь", ПустаяЗаявка);
					ЗадачаИсполнена		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "Исполнено", Ложь);
					ОшибкаВЗадаче		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "Ошибка", Ложь);
					ДопСогласование		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "ДопСогласование", Ложь);
					ТипЭтапа			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "ТипЭтапа", ПустойТипЭтапа);
					Задача				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураСообщения, "Задача", );
					Если (НЕ ЗадачаИсполнена) И (НЕ ОшибкаВЗадаче) И (ЗначениеЗаполнено(СсылкаЗаявка)) Тогда
						// Выполнение действий с заявкой.
						РезультатОперации = Ложь;
						Если (ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования) Тогда
							Если СтрокаКодДействия = "1" Тогда			// Согласование.
								РезультатОперации = УтвердитьЭтапыПользователя(СсылкаПользователь, СсылкаЗаявка, СтрокаКомментарий, ДопСогласование);							
							ИначеЕсли СтрокаКодДействия = "2" Тогда		// Отклонение.
								РезультатОперации = ОтклонитьЭтапыПользователя(СсылкаПользователь, СсылкаЗаявка, СтрокаКомментарий, ДопСогласование);
							ИначеЕсли СтрокаКодДействия = "3" Тогда		// На шаг назад.
								РезультатОперации = ПерейтиНаШагНазадПоЭтапу(СсылкаПользователь, СсылкаЗаявка, СтрокаКомментарий, ДопСогласование);
							Иначе
								Продолжить;								// Неизвестный вариант действия.
							КонецЕсли;
						ИначеЕсли (ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход) Тогда
							УникальныйИдентификаторЭтапа = Новый УникальныйИдентификатор(СтрокаКодДействия);
							СсылкаНаЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьСсылку(УникальныйИдентификаторЭтапа);
							Если ЗначениеЗаполнено(СсылкаНаЭтап) Тогда
								РезультатОперации = ВыполнитьЗадачуРучногоПерехода(Задача, СсылкаНаЭтап, СтрокаКомментарий, СсылкаПользователь);
							Иначе
								РезультатОперации = Ложь;
							КонецЕсли;
						Иначе
							РезультатОперации = Ложь;
						КонецЕсли;
						// Пост-обработка результатов согласования.
						Если РезультатОперации Тогда
							МодульУправленияОповещениямиУХ.УстановитьИсполнениеОтправленнойЗадачи(СтрокаИдентификаторСообщения, Истина);
							Прервать;	                            // По данному письму действие уже выполнено.
						Иначе
							МодульУправленияОповещениямиУХ.УстановитьСтатусОшибкиОтправленнойЗадачи(СтрокаИдентификаторСообщения, Истина);
							УведомитьПользователяОРезультатахСогласованияПоПочте(СсылкаПользователь, СсылкаЗаявка, СтрокаКодДействия, Ложь);
							Прервать;	                            // По данному письму действие уже выполнено.
						КонецЕсли;
					Иначе
						АдресОтправителя = "";
						Если ТипЗнч(ПисьмоВход.Отправитель) = Тип("Строка") Тогда
							АдресОтправителя = ПисьмоВход.Отправитель;
						ИначеЕсли ТипЗнч(ПисьмоВход.Отправитель) = Тип("ИнтернетПочтовыйАдрес") Тогда	
							АдресОтправителя = ПисьмоВход.Отправитель.Адрес;
						Иначе
							ТекстСообщения = НСтр("ru = 'Неизвестный вариант отправителя письма: %Отправитель%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Отправитель%", Строка(ПисьмоВход.Отправитель));
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							АдресОтправителя = "";
						КонецЕсли;
						Если (СтруктураСообщения.Количество() = 0) И (ЗначениеЗаполнено(АдресОтправителя)) Тогда	
							// Не найдена задача с данным идентификатором. Отправим ответное сообщение с ошибкой.
							ПисьмоОшибка = Новый ИнтернетПочтовоеСообщение;
							ПисьмоОшибка.Получатели.Добавить(АдресОтправителя);
							ПисьмоОшибка.Тема = Нстр("ru = 'Не удалось распознать задачу согласования'");
							ТелоПисьмаОшибка = НСтр("ru = 'Задача согласования %ИдентификаторСообщения% не была найдена'");
							ТелоПисьмаОшибка = СтрЗаменить(ТелоПисьмаОшибка, "%ИдентификаторСообщения%", СтрокаИдентификаторСообщения);
							ТекстПисьмаОшибка = УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ПисьмоОшибка.Тема, ТелоПисьмаОшибка);
							ПисьмоОшибка.Тексты.Добавить(ТекстПисьмаОшибка, ТипТекстаПочтовогоСообщения.HTML);
							УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(ПисьмоОшибка, Неопределено);
							МодульУправленияОповещениямиУХ.УстановитьСтатусОшибкиОтправленнойЗадачи(СтрокаИдентификаторСообщения, Истина);
						Иначе	
							Продолжить;								// Задача обработана ранее
						КонецЕсли;
					КонецЕсли;
				Иначе  
					Продолжить;										// Не удалось получить значения полей. Пропускаем.
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстСообщения = "";
		ТекстСообщения = ТекстСообщения + НСтр("ru = 'Не удалось обработать письмо: '");
		ТекстСообщения = ТекстСообщения + ПисьмоВход.Тема;
		ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Регламентная обработка согласования по почте.
Процедура ОбработатьВходящееСогласованиеПоПочте() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.СогласованиеПоПочте);
	
	// Получение писем с почтового ящика.
	УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты;
	Попытка
		ПериодСбораПисемСогласования = Константы.ПериодСбораПисемСогласования.Получить();
		ИспользуетсяОтборПоДатеОтправления = (ПериодСбораПисемСогласования > 0);
		Если ИспользуетсяОтборПоДатеОтправления Тогда
			МинимальнаяДатаОтправления = НачалоДня(ТекущаяДата() - ПериодСбораПисемСогласования * 60*60*24);
		Иначе
			МинимальнаяДатаОтправления = Дата(1, 1, 1);
		КонецЕсли;
		ПараметрыЗагрузкиПисем = Новый Структура;
		НаборПисем = РаботаСПочтовымиСообщениямиСлужебный.ЗагрузитьСообщения(УчетнаяЗапись, ПараметрыЗагрузкиПисем);
		// Обход полученных писем.
		Для Каждого ТекПисьма Из НаборПисем Цикл
			ПисьмоМоложеМинимальнойДаты = (ТекПисьма.ДатаОтправления >= МинимальнаяДатаОтправления);
			Если (ПисьмоМоложеМинимальнойДаты) Или (НЕ ИспользуетсяОтборПоДатеОтправления) Тогда			// Для протокола IMAP отбор накладывается выше. Дополнительно обработаем для протокола POP3.
				ОбработатьПисьмоСогласование(ТекПисьма);
			Иначе
				Продолжить;										
			КонецЕсли;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время получения электронной почты произошли ошибки: '");
		ТекстСообщения = ТекстСообщения + ОписаниеОшибки();
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Регламентная обработка переноса и оповещения напоминаний пользователя.
Процедура ОбработатьНапоминанияПользователей() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОбработкаНапоминаний);	
	МодульУправленияОповещениямиУХ.ОбработатьНапоминанияПользователей();
	
КонецПроцедуры

#КонецОбласти

// Регламентная обработка отправки оповещений по событиям.
Процедура ВыполнитьОтправкуОповещенийСобытий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаОповещенийСобытий);
	
	ТаблицаКОтправке = СобытияОповещенийСерверУХ.ПолучитьТаблицуОповещенийКОтправке();
	СобытияОповещенийСерверУХ.ОтправитьОповещенияПоСобытиям(ТаблицаКОтправке);
	
КонецПроцедуры

// Регламентная обработка очистки отправленных событий.
Процедура ВыполнитьОчисткуОтправленныхСобытий() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОчисткаСобытий);
	
	ПериодХранения = Константы.ПериодХраненияСобытий.Получить();
	Если ПериодХранения > 0 Тогда
		ЕстьОшибки = Ложь;
		НачатьТранзакцию();
		// Очистка событий оповещений.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СобытияОповещений.СпособОповещения,
		|	СобытияОповещений.Получатель,
		|	СобытияОповещений.ВидСобытияОповещения,
		|	СобытияОповещений.Источник,
		|	СобытияОповещений.ДатаДобавления,
		|	СобытияОповещений.ИдентификаторОповещения
		|ИЗ
		|	РегистрСведений.СобытияОповещений КАК СобытияОповещений
		|ГДЕ
		|	СобытияОповещений.ДатаОтправки <> &ПустаяДата
		|	И РАЗНОСТЬДАТ(СобытияОповещений.ДатаДобавления, &ТекущаяДата, ДЕНЬ) > &ПериодХранения";
		ПустаяДата = Дата(1, 1, 1);
		ТекДата = ТекущаяДатаСеанса();
		Запрос.УстановитьПараметр("ПериодХранения", ПериодХранения);
		Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Попытка
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТекИдентификаторОповещения = ВыборкаДетальныеЗаписи.ИдентификаторОповещения;
				НаборЗаписей = РегистрыСведений.СобытияОповещений.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторОповещения.Установить(ТекИдентификаторОповещения);
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru = 'При очистке устаревших событий оповещений произошли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ЕстьОшибки = Истина;
		КонецПопытки;
		// Очистка уведомлений по почте.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УведомленияПоЭлектроннойПочте.Источник,
		|	УведомленияПоЭлектроннойПочте.ДатаСоздания,
		|	УведомленияПоЭлектроннойПочте.ДатаОтправки,
		|	УведомленияПоЭлектроннойПочте.ИдентификаторПисьма
		|ИЗ
		|	РегистрСведений.УведомленияПоЭлектроннойПочте КАК УведомленияПоЭлектроннойПочте
		|ГДЕ
		|	УведомленияПоЭлектроннойПочте.ДатаОтправки <> &ПустаяДата
		|	И РАЗНОСТЬДАТ(УведомленияПоЭлектроннойПочте.ДатаСоздания, &ТекущаяДата, ДЕНЬ) > &ПериодХранения";
		ПустаяДата = Дата(1, 1, 1);
		ТекДата = ТекущаяДатаСеанса();
		Запрос.УстановитьПараметр("ПериодХранения", ПериодХранения);
		Запрос.УстановитьПараметр("ПустаяДата", ПустаяДата);
		Запрос.УстановитьПараметр("ТекущаяДата", ТекДата);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Попытка
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТекИдентификаторПисьма = ВыборкаДетальныеЗаписи.ИдентификаторПисьма;
				НаборЗаписей = РегистрыСведений.УведомленияПоЭлектроннойПочте.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИдентификаторПисьма.Установить(ТекИдентификаторПисьма);
				НаборЗаписей.Очистить();
				НаборЗаписей.Записать();
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru = 'При очистке устаревших уведомлений по электронной почте произошли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ЕстьОшибки = Истина;
		КонецПопытки;
		// Фиксирование транзакции
		Если ЕстьОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Иначе
		// Не требуется удалять устаревшие события.
	КонецЕсли;
КонецПроцедуры

Процедура ОтправкаУведомлений() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтправкаУведомлений);
	ОбщегоНазначенияПереопределяемыйУХ.ОтправитьПисьмаИзРегистра();
КонецПроцедуры

Процедура ПроверкаСроковВыполненияСверкиВГО() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ПроверкаСроковВыполненияСверкиВГО);
	СверкаВГОУХ.ПроверитьСрокиВыполненияСверкиВГО();
КонецПроцедуры

// Регламентная обработка создания мероприятий по расписанию.
Процедура СоздатьМероприятияПоРасписанию() Экспорт
	  	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ВыполнениеДействийПоРасписаниюЭтапов);
	УправлениеРисками.СоздатьМероприятияПоРасписанию();
	
КонецПроцедуры		// СоздатьМероприятияПоРасписанию()

#Область КорректировкиПоШаблонам

Процедура ОтразитьДокументыПоШаблонам() Экспорт
	
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания(Метаданные.РегламентныеЗадания.ОтражениеДокументовПоШаблонам);
	РегистрыСведений.ОтражениеДокументовПоШаблонам.ОтразитьДокументыПоШаблонам(,Истина);	
	
КонецПроцедуры // ОтразитьДокументыПоШаблонам()  

#КонецОбласти

Процедура ПроверитьВводИсполненияКовенантов() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	РаботаСДоговорамиКонтрагентовУХ.ПроверитьВводИсполненияКовенантов();
КонецПроцедуры

Процедура ПроверитьИсполнениеОбязательствПоДоговорам() Экспорт
	ОбщегоНазначения.ПриНачалеВыполненияРегламентногоЗадания();
	РаботаСДоговорамиКонтрагентовУХ.ПроверитьИсполнениеОбязательствПоДоговорам();
КонецПроцедуры