
#Область ДокументыВНА

#Область ПрограммныйИнтерфейс_ВНА

Функция ПолучитьКэшируемыеЗначения_ВНА(СтрокаТЧ = Неопределено, ТЧ = Неопределено, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем Контекст, СтруктураПолученияКэша;
	
	ТребуетсяЗапросСервера = Ложь;
	СтруктураПолученияКэша = Новый Структура("СчетаНСБУ", Новый Массив);
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;

	СтрокиКэширования = ТЧ;
	Если СтрокиКэширования = Неопределено Тогда
		СтрокиКэширования = Новый Массив;
		СтрокиКэширования.Добавить(СтрокаТЧ);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаМСФОИзТрансляции", Контекст) Тогда
		
		ТребуетсяЗапросСервера = Истина;
		
		Для каждого СтрокаТЧ Из СтрокиКэширования Цикл
			Для каждого СоответствиеКолонок Из Контекст Цикл
				
				СчетИсточник = СтрокаТЧ[СоответствиеКолонок.Значение];
				Если СтруктураПолученияКэша.СчетаНСБУ.Найти(СчетИсточник) = Неопределено Тогда
					СтруктураПолученияКэша.СчетаНСБУ.Добавить(СчетИсточник);
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаМСФОПоНеклассифицированным", Контекст) Тогда
		
		ТребуетсяЗапросСервера = Истина;
		СтруктураПолученияКэша.Вставить("СчетаНеклассифицированные", Новый Массив);
		
		Для каждого СтрокаТЧ Из СтрокиКэширования Цикл
			Для каждого СоответствиеКолонок Из Контекст Цикл
				
				СчетИсточник = СтрокаТЧ[СоответствиеКолонок.Ключ];
				Если СтруктураПолученияКэша.СчетаНеклассифицированные.Найти(СчетИсточник) = Неопределено Тогда
					СтруктураПолученияКэша.СчетаНеклассифицированные.Добавить(СчетИсточник);
					Если СтруктураПолученияКэша.СчетаНСБУ.Найти(СчетИсточник) = Неопределено Тогда
						СтруктураПолученияКэша.СчетаНСБУ.Добавить(СчетИсточник);
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ГрупповойВвод") Тогда
		КэшированныеЗначения.Вставить("СобытиеПоступлениеВНА", ПредопределенноеЗначение("Справочник.ВидыОпераций.ПринятиеКУчетуВНА"));
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьПараметрыВНА", Контекст) Тогда
		
		ТребуетсяЗапросСервера = Истина;
		//Контекст в виде: Новый структура("НСБУ,МСФО", Неопределено, Новый Структура("ПереоценкаМСФО", "Переоценка"))
		
		ПоляВыбора = Новый Массив;
		ПоляВыбора.Добавить("ВНА");
		ПоляВыбора.Добавить("ГруппаВНА");
		ПоляВыбора.Добавить("ВидУчета");
		Для каждого ПоляВидаУчета Из Контекст Цикл
			Для каждого ПолеВидаУчета Из ПоляВидаУчета.Значение Цикл
				Если ЗначениеЗаполнено(ПолеВидаУчета.Значение) И (ПоляВыбора.Найти(ПолеВидаУчета.Значение) = Неопределено) Тогда
					ПоляВыбора.Добавить(ПолеВидаУчета.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		
		ЗаполнитьПараметрыВНА = Новый Структура;
		
		ЗаполнитьПараметрыВНА.Вставить("ПоляВыбора", 	ПоляВыбора);
		ЗаполнитьПараметрыВНА.Вставить("ВидыУчета", 	КэшированныеЗначения.ВидыУчета);
		ЗаполнитьПараметрыВНА.Вставить("Ссылка", 		КэшированныеЗначения.Ссылка);
		ЗаполнитьПараметрыВНА.Вставить("ДатаДокумента", КэшированныеЗначения.ДатаДокумента);
		ЗаполнитьПараметрыВНА.Вставить("Организация", 	КэшированныеЗначения.Организация);
		ЗаполнитьПараметрыВНА.Вставить("Сценарий", 		КэшированныеЗначения.Сценарий);
		
		Если КэшированныеЗначения.Свойство("АлгоритмРСБУ") Тогда
			ЗаполнитьПараметрыВНА.Вставить("АлгоритмРСБУ", КэшированныеЗначения.АлгоритмРСБУ);
		КонецЕсли;
		
		СтруктураПолученияКэша.Вставить("ЗаполнитьПараметрыВНА", ЗаполнитьПараметрыВНА);
		
	КонецЕсли;
		
	Если СтруктураДействий.Свойство("ЗаполнитьПоОстаткам", Контекст) Тогда
		ТребуетсяЗапросСервера = Истина;
		СтруктураПолученияКэша.Вставить("ЗаполнитьПоОстаткам", Контекст);
	КонецЕсли;	
		
	Если ТребуетсяЗапросСервера Тогда
		
		Если КэшированныеЗначения.Свойство("ШаблонТрансляции") Тогда
			СтруктураПолученияКэша.Вставить("ШаблонТрансляции", КэшированныеЗначения.ШаблонТрансляции);
		КонецЕсли;
		
		Если СтруктураДействий.Свойство("ЗаполнитьПараметрыВНА") Тогда
			
			ОбъектыВНА = Неопределено;
			Если Не СтруктураПолученияКэша.Свойство("ВНА", ОбъектыВНА) Тогда
				ОбъектыВНА = Новый Массив;
			КонецЕсли;
			
			Для каждого ТекущаяСтрока Из СтрокиКэширования Цикл
				ОбъектыВНА.Добавить(ТекущаяСтрока.ВНА);
			КонецЦикла;
			
			СтруктураПолученияКэша.Вставить("ВНА", ОбъектыВНА);
			
		КонецЕсли;
		
		КэшированныеЗначенияСервера = МСФОВызовСервераУХ.ПолучитьКэшируемыеЗначения_ВНА(СтруктураПолученияКэша, СтруктураДействий);
		Для каждого ЭлементКэша Из КэшированныеЗначенияСервера Цикл
			КэшированныеЗначения.Вставить(ЭлементКэша.Ключ, ЭлементКэша.Значение);
		КонецЦикла;

	КонецЕсли;
	
	Возврат КэшированныеЗначения;
	
КонецФункции

Процедура ОбработатьСтрокуТЧ_ВНА(ТекущаяСтрока, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	КэшированныеЗначения = ПолучитьКэшируемыеЗначения_ВНА(ТекущаяСтрока, Неопределено, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьИсточникГруппаВНАНаДату(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьЗависимыеРеквизитыИсточникГруппаВНА(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	ЗаполнитьЗависимыеРеквизитыГруппыВНА(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьЗависимыеРеквизитыПараметровАмортизации(	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСчетаМСФОПоНеклассифицированным(			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСчетаМСФОИзТрансляции(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСубконтоИзТрансляции(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//Заполнение Параметров ВНА(например, сумм)
	ЗаполнитьПараметрыВНА(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//Расчеты документов ВНА
	ЗаполнитьНакопленнаяАмортизацияПередВыбытием(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьПоОстаткам(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПоКолонкамИсточникам(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСправедливуюСтоимостьБезРасходов(			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьВозмещаемуюСтоимость(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьПереоценку(								ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
			
	ЗаполнитьКолонкиРасхождений(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДоступностьПоИменамСубконто(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОбработатьТЧ_ВНА(ТЧ, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_ВНА(Неопределено, ТЧ, СтруктураДействий);
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ_ВНА(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ГруппыВНА

Процедура ЗаполнитьИсточникГруппаВНАНаДату(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ПараметрыДействия, ПараметрыУчетаПоВНА, ДатаОперации;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьИсточникГруппаВНАНаДату", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ЗависимостиРеквизитов = ПараметрыДействия.ЗависимостиРеквизитов;
	
	Если Не ПараметрыДействия.Свойство("Дата", ДатаОперации) Тогда
	    КолонкаДата = ПараметрыДействия.КолонкаДата;
		ДатаОперации = ТекущаяСтрока[КолонкаДата];
	КонецЕсли;	
		
	Если КэшированныеЗначения.Свойство("ПараметрыУчетаВНА", ПараметрыУчетаПоВНА) Тогда
		
		ПараметрыУчетаВНА = ПараметрыУчетаПоВНА.Получить(ТекущаяСтрока.ВНА);
		
	Иначе
		
		ПараметрыУчетаВНА = МСФОВызовСервераУХ
								.ПолучитьПараметрыУчетаВНА(
											ДатаОперации,
											КэшированныеЗначения.Организация,
											ТекущаяСтрока.ВНА, 
											КэшированныеЗначения.ВидУчетаМСФО,
											КэшированныеЗначения.Сценарий
										);
		
	КонецЕсли;	
	
	Если ПараметрыУчетаВНА <> Неопределено Тогда
		
		Для каждого Реквизит Из ЗависимостиРеквизитов Цикл	
			ТекущаяСтрока[Реквизит.Ключ] = ПараметрыУчетаВНА[Реквизит.Значение];
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЗависимыеРеквизитыИсточникГруппаВНА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ПараметрыДействия;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьЗависимыеРеквизитыИсточникГруппаВНА", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	ТипСчетБД = Тип("СправочникСсылка.СчетаБД");
	ЗависимостиРеквизитов = ПараметрыДействия.ЗависимостиРеквизитов;
	
	Для каждого Реквизит Из ЗависимостиРеквизитов Цикл	
		ТекущаяСтрока[Реквизит.Ключ] = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ИсточникГруппаВНАМСФО, Реквизит.Значение);
		Если ТипЗнч(ТекущаяСтрока[Реквизит.Ключ]) = ТипСчетБД Тогда
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьЗависимыеРеквизитыГруппыВНА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ПараметрыДействия;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьЗависимыеРеквизитыГруппыВНА", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ПараметрыДействия) = Тип("Структура") Тогда
	
		Для каждого КлючГруппаВНА Из ПараметрыДействия Цикл
			Для каждого КлючЗависимыйРеквизит Из КлючГруппаВНА.Значение Цикл
				ТекущаяСтрока[КлючЗависимыйРеквизит.Ключ] = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(
																	ТекущаяСтрока[КлючГруппаВНА.Ключ],
																	КлючЗависимыйРеквизит.Значение
																);
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		
		СтрокиОбработки = ПараметрыДействия.НайтиСтроки(Новый Структура("Источник", "ГруппаВНА"));	
		
		ТипСчетБД = Тип("СправочникСсылка.СчетаБД");
		
		Для каждого Реквизит Из СтрокиОбработки Цикл
			ТекущаяСтрока[Реквизит.Приемник] = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ГруппаВНА, Реквизит.РеквизитГруппы);
			Если ТипЗнч(ТекущаяСтрока[Реквизит.Приемник]) = ТипСчетБД Тогда
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПараметрыАмортизацииВНА

Процедура ЗаполнитьЗависимыеРеквизитыПараметровАмортизации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ЗависимостиРеквизитов;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьЗависимыеРеквизитыПараметровАмортизации", ЗависимостиРеквизитов) Тогда
		Возврат;
	КонецЕсли;

	СтрокиОбработки = ЗависимостиРеквизитов.НайтиСтроки(Новый Структура("Источник", "ПараметрыАмортизацииВНАМСФО"));
	
	ТипСчетБД = Тип("СправочникСсылка.СчетаБД");
	
	Для каждого Реквизит Из СтрокиОбработки Цикл	
		ТекущаяСтрока[Реквизит.Приемник] = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ТекущаяСтрока.ПараметрыАмортизацииВНАМСФО, Реквизит.РеквизитГруппы);
		Если ТипЗнч(ТекущаяСтрока[Реквизит.Приемник]) = ТипСчетБД Тогда
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СчетаСубконто

Процедура ЗаполнитьСчетаМСФОПоНеклассифицированным(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СоответствиеКолонок;//Соответствие(СчетНСБУ,СчетМСФО)
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетаМСФОПоНеклассифицированным", СоответствиеКолонок) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ГрупповойВвод") Тогда
		Если КэшированныеЗначения.СобытиеПоступлениеВНА <> ТекущаяСтрока.ВидОперации Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СчетаНеклассифицированные = КэшированныеЗначения.СчетаНеклассифицированные;
	ИменаСубконто = КэшированныеЗначения.ИменаСубконто;
		
	Для каждого СчетМСФО Из СоответствиеКолонок Цикл
		
		Если НЕ ТекущаяСтрока[СчетМСФО.Значение].Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		СчетПриемник = СчетаНеклассифицированные.Получить(ТекущаяСтрока[СчетМСФО.Ключ]);
		Если СчетПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока[СчетМСФО.Значение] = СчетПриемник;
		
		ЗаполнитьСубконтоСчетаПриемникаПоИсточнику(ТекущаяСтрока, СчетМСФО.Значение, СчетМСФО.Ключ, ИменаСубконто);
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Форма

Процедура ЗаполнитьКолонкиРасхождений(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем КолонкиРасхождений;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьКолонкиРасхождений", КолонкиРасхождений) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Расхождение Из КолонкиРасхождений Цикл
		ТекущаяСтрока[Расхождение.Имя + "Расхождение"] = ТекущаяСтрока[Расхождение.Имя + "МСФО"] - ТекущаяСтрока[Расхождение.Имя + "НСБУ"];
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДоступностьПоИменамСубконто(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ИменаСубконто;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьДоступностьПоИменамСубконто", ИменаСубконто) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СубконтоСчета Из ИменаСубконто Цикл
		
		Если СубконтоСчета.Ключ = "ИсключенияСкрытияСубконто" Тогда
			Продолжить;
		КонецЕсли;
		
		ИменаСубконто = Новый Структура;
		Для каждого НомерСубконто Из СубконтоСчета.Значение Цикл
			ИменаСубконто.Вставить("Субконто" + НомерСубконто.Ключ, НомерСубконто.Значение);
		КонецЦикла;
		
		СчетИсточник = ТекущаяСтрока[СубконтоСчета.Ключ];
		МСФОКлиентСерверУХ.УстановитьДоступностьСубконто(СчетИсточник, ТекущаяСтрока, ИменаСубконто);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_Суммы

Процедура ЗаполнитьПоКолонкамИсточникам(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия, ТолькоНезаполненные, ЗаполнитьКолонкуИзменения, СоответствиеКолонок;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПоКолонкамИсточникам", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
		
	Если Не ПараметрыДействия.Свойство("ТолькоНезаполненные", ТолькоНезаполненные) Тогда
		ТолькоНезаполненные = Ложь;	
	КонецЕсли;
	
	Если Не ПараметрыДействия.Свойство("ЗаполнитьКолонкуИзменения", ЗаполнитьКолонкуИзменения) Тогда
		ЗаполнитьКолонкуИзменения = Ложь;	
	КонецЕсли;
	
	Если Не ПараметрыДействия.Свойство("СоответствиеКолонок", СоответствиеКолонок) Тогда
		Возврат;	
	КонецЕсли;
	
	Для каждого КолонкаПриемник Из СоответствиеКолонок Цикл  //Соответствие(КолонкаПриемник,КолонкаИсточник)
		
		ЗначениеПриемник = ТекущаяСтрока[КолонкаПриемник.Ключ];
		
		Если ТолькоНезаполненные И (ЗначениеПриемник <> Ложь) И ЗначениеЗаполнено(ЗначениеПриемник) Тогда
			Продолжить; //Уже заполнено
		КонецЕсли;
		
		ТекущаяСтрока[КолонкаПриемник.Ключ] = ТекущаяСтрока[КолонкаПриемник.Значение];
		
		Если ЗаполнитьКолонкуИзменения Тогда
			ТекущаяСтрока.ЕстьИзменение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Например, для заполнения суммы на основе СчетКт и СубконтоКт(Дт 01 Кт 08)
Процедура ЗаполнитьПоОстаткам(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ПараметрыДействия;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПоОстаткам", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущиеПараметры Из ПараметрыДействия Цикл
		ТекущаяСтрока[ТекущиеПараметры.Значение.Сумма] = КэшированныеЗначения.ЗаполнитьПоОстаткам.Получить(ТекущаяСтрока[ТекущиеПараметры.Ключ]);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПараметрыВНА

Процедура ЗаполнитьПараметрыВНА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ПараметрыДействия;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПараметрыВНА", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("НСБУ") Тогда
		
		КэшПараметровВНА = КэшированныеЗначения.ЗаполнитьПараметрыВНА.НСБУ;
		Для каждого Заполнение Из ПараметрыДействия.НСБУ Цикл
			ТекущаяСтрока[Заполнение.Ключ] = КэшПараметровВНА[Заполнение.Значение];
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПараметрыДействия.Свойство("МСФО") Тогда
		
		КэшПараметровВНА = КэшированныеЗначения.ЗаполнитьПараметрыВНА.МСФО.Получить(ТекущаяСтрока.ВНА);
		Для каждого Заполнение Из ПараметрыДействия.МСФО Цикл
			
			Если ЗначениеЗаполнено(КэшПараметровВНА) Тогда
				ТекущаяСтрока[Заполнение.Ключ] = КэшПараметровВНА[Заполнение.Значение];
			Иначе	
				ТекущаяСтрока[Заполнение.Ключ] = Неопределено;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПереоценкаОбесценение

Процедура ЗаполнитьСправедливуюСтоимостьБезРасходов(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСправедливуюСтоимостьБезРасходов") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.СправедливаяСтоимостьБезРасходов = ТекущаяСтрока.СправедливаяСтоимость - ТекущаяСтрока.РасходыНаПродажу;
	
КонецПроцедуры

Процедура ЗаполнитьВозмещаемуюСтоимость(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьВозмещаемуюСтоимость") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ВозмещаемаяСтоимость = Макс(ТекущаяСтрока.ЦенностьИспользованияМСФО, ТекущаяСтрока.СправедливаяСтоимостьБезРасходов);
	
КонецПроцедуры

Процедура ЗаполнитьПереоценку(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьПереоценку") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.СправедливаяСтоимость = 0 Тогда
	    ТекущаяСтрока.ИзменениеПереоценки = 0;
	Иначе
		ТекущаяСтрока.ИзменениеПереоценки = ТекущаяСтрока.СправедливаяСтоимость - ТекущаяСтрока.БалансоваяСтоимость + ТекущаяСтрока.АмортизацияРасчет;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ВыбытиеВНА

Процедура ЗаполнитьНакопленнаяАмортизацияПередВыбытием(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьНакопленнаяАмортизацияПередВыбытием") Тогда
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСубконтоСчетаПриемникаПоИсточнику(ТекущаяСтрока, КолонкаПриемник, КолонкаИсточник, ИменаСубконто)
	
	ИменаСубконтоПриемник = ИменаСубконто[КолонкаПриемник];
	Для каждого СубконтоПриемник Из ИменаСубконто[КолонкаИсточник] Цикл
		
		ИмяСубконто = ИменаСубконтоПриемник.Получить(СубконтоПриемник.Ключ);
		Если ИмяСубконто <> Неопределено Тогда
			ТекущаяСтрока[ИмяСубконто] = ТекущаяСтрока[СубконтоПриемник.Значение];
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ПереоценкаВНА

Функция ПолучитьСуммуПереоценки(ВозмещаемаяСтоимость, БалансоваяСтоимость, ИспользоватьМодельПереоценки = Истина) Экспорт

	Возврат ?(ИспользоватьМодельПереоценки, 
				ВозмещаемаяСтоимость - БалансоваяСтоимость, 
				Мин(ВозмещаемаяСтоимость - БалансоваяСтоимость, 0));

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ДокументыФИ

#Область ПрограммныйИнтерфейс

Процедура ОбработатьТЧ_ПереоценкаФИ(ТЧ, СтруктураДействий, КэшируемыеЗначения) Экспорт

	Для каждого СтрокаТЧ Из ТЧ Цикл		
		ОбработатьСтрокуТЧ_ПереоценкаФИ(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСтрокуТЧ_ПереоценкаФИ(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения) Экспорт
	
	ЗаполнитьСведенияФИ(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьДоступноСписаниеПереоценки(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	
	ЗаполнитьПереоцененнаяСтоимостьВД(	СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);			
	ЗаполнитьСуммаПереоценкиВД(			СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);	
	ЗаполнитьСписаниеПереоценкиВД(		СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);	
	
	ЗаполнитьДатуВыбытияФИ(				СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьВыбытиеКоличество(			СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьВыбытиеСтоимостиВД(		СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьВыбытиеСтоимостиФВ(		СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьВыбытиеСтоимостиФВПоВД(	СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения);

КонецПроцедуры

Процедура ОбработатьТЧ_РасходыФИ(ТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт

	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_ВНА(Неопределено, ТЧ, СтруктураДействий);
	КонецЕсли;
	
	Для каждого СтрокаТЧ Из ТЧ Цикл
		ОбработатьСтрокуТЧ_РасходыФИ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьСтрокуТЧ_РасходыФИ(СтрокаТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	КэшированныеЗначения = ПолучитьКэшируемыеЗначения_ВНА(СтрокаТЧ, Неопределено, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСчетаМСФОИзТрансляции(			СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьДоступностьПоИменамСубконто(	СтрокаТЧ, СтруктураДействий, КэшированныеЗначения);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьСведенияФИ(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)
		
	Если Не СтруктураДействий.Свойство("ЗаполнитьСведенияФИ") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.ФИ.Пустая() Тогда
		Возврат;
	КонецЕсли;
		
	Если СтрокаТЧ.ДатаПризнания = Дата(1,1,1) Тогда
		СтрокаТЧ.ДатаПризнания = КэшируемыеЗначения.ДатаОкончанияПериода;
		Если Не ЗначениеЗаполнено(СтрокаТЧ.ДатаПризнания) Тогда
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТЧ, КэшируемыеЗначения.СведенияФИ); //(ФИ,ПараметрыУчетаФИ,Количество,Валюта,ПСФВ,ПСВД,Контрагент)
	
КонецПроцедуры

Процедура ЗаполнитьПереоцененнаяСтоимостьВД(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьПереоцененнаяСтоимостьВД") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЦБ = (ТипЗнч(СтрокаТЧ.ФИ) = Тип("СправочникСсылка.ЦенныеБумаги"));
	ЗначениеКотировкиФИ = ?(СтрокаТЧ.ЗначениеКотировкиФИ = 0, 1, СтрокаТЧ.ЗначениеКотировкиФИ);
	Количество 			= ?(СтрокаТЧ.Количество = 0 И Не ЭтоЦБ, 1, СтрокаТЧ.Количество);
	ВалютаКотировки 	= ?(СтрокаТЧ.Котировка.Пустая(), СтрокаТЧ.ВалютаНоминала, СтрокаТЧ.ВалютаКотировки);
	Если Не ЭтоЦБ И (СтрокаТЧ.ВалютаНоминала = ВалютаКотировки) Тогда
		ВалютаКотировки = КэшируемыеЗначения.ФункциональнаяВалюта;//для договора в валюте с котировкой - котировка как "ФВ за ВН"
	КонецЕсли;
	
	СтрокаТЧ.ПереоцененнаяСтоимостьВД = ПересчитатьИзВалютыВВалюту(
												ЗначениеКотировкиФИ * Количество * СтрокаТЧ.Номинал,
												ВалютаКотировки,
												СтрокаТЧ.ВалютаНоминала,
												0,
												0,
												0,
												0,
												СтрокаТЧ.ДатаПереоценки,
												КэшируемыеЗначения.КэшКурсов
											);
	
КонецПроцедуры

Процедура ЗаполнитьДоступноСписаниеПереоценки(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)
		
	Если Не СтруктураДействий.Свойство("ЗаполнитьДоступноСписаниеПереоценки") Тогда
		Возврат;
	КонецЕсли;

	СтрокаТЧ.ДоступноСписаниеПереоценки = КэшируемыеЗначения.ПараметрыДоступностьСписанияПереоценки.Найти(СтрокаТЧ.ПараметрыУчетаФИ) <> Неопределено;
	
КонецПроцедуры

Процедура ЗаполнитьДатуВыбытияФИ(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьДатуВыбытияФИ") Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТЧ.ДатаВыбытия) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.ПараметрыУчетаФИДоРекласса = СтрокаТЧ.ПараметрыУчетаФИ Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.ДатаВыбытия = КэшируемыеЗначения.ДатаОкончанияПериода;

КонецПроцедуры

Процедура ЗаполнитьВыбытиеКоличество(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьВыбытиеКоличество") Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.ДатаВыбытия = Дата(1,1,1) Тогда
		Возврат; 
	КонецЕсли;
	
	СтрокаТЧ.ВыбытиеКоличество = СтрокаТЧ.Количество;
		
КонецПроцедуры

Процедура ЗаполнитьВыбытиеСтоимостиВД(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьВыбытиеСтоимостиВД") Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.ДатаВыбытия = Дата(1,1,1) Тогда
		Возврат; 
	КонецЕсли;
	
	СтрокаТЧ.ВыбытиеСтоимостиВД = СтрокаТЧ.ПереоцененнаяСтоимостьВД;
		
КонецПроцедуры

Процедура ЗаполнитьВыбытиеСтоимостиФВ(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьВыбытиеСтоимостиФВ") Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.ДатаВыбытия = Дата(1,1,1) Тогда
		Возврат; 
	КонецЕсли;
	
	СтрокаТЧ.ВыбытиеСтоимостиФВ = СтрокаТЧ.ПереоцененнаяСтоимостьФВ;
		
КонецПроцедуры

Процедура ЗаполнитьВыбытиеСтоимостиФВПоВД(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьВыбытиеСтоимостиФВПоВД") Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.ДатаВыбытия = Дата(1,1,1) Тогда
		Возврат; 
	КонецЕсли;
	
	КурсВД = ПолучитьКурс(СтрокаТЧ.ВалютаНоминала, СтрокаТЧ.ДатаВыбытия, КэшируемыеЗначения.КэшКурсов);
	КурсФВ = ПолучитьКурс(КэшируемыеЗначения.ФункциональнаяВалюта, СтрокаТЧ.ДатаВыбытия, КэшируемыеЗначения.КэшКурсов);
	
	КурсНоминала = Новый Структура("Валюта,Курс,Кратность", СтрокаТЧ.ВалютаНоминала, 1, 1);
	
	СтрокаТЧ.ВыбытиеСтоимостиФВ = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(СтрокаТЧ.ВыбытиеСтоимостиВД, КурсНоминала, КурсФВ);
		
КонецПроцедуры

Функция ПолучитьКурс(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	
	Если КэшКурсов <> Неопределено Тогда
		
		СтрокиНач = КэшКурсов.НайтиСтроки(Новый Структура("Валюта,Период", Валюта, ДатаКурса));
		Если СтрокиНач.Количество() Тогда
			Возврат СтрокиНач[0];
		КонецЕсли;

	КонецЕсли;
	
	НовыйКурс = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(Валюта, ДатаКурса);
	
	Если КэшКурсов <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(КэшКурсов.Добавить(), НовыйКурс);
	КонецЕсли;
	
	Возврат НовыйКурс;
	
КонецФункции

Процедура ЗаполнитьСуммаПереоценкиВД(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьСуммаПереоценкиВД") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ.СуммаПереоценкиВД = СтрокаТЧ.ПереоцененнаяСтоимостьВД - СтрокаТЧ.БалансоваяСтоимостьВД;	
	СтрокаТЧ.СуммаПереоценкиФВ = ПересчитатьИзВалютыВВалюту(
												СтрокаТЧ.СуммаПереоценкиВД,
												СтрокаТЧ.ВалютаНоминала,
												КэшируемыеЗначения.ФункциональнаяВалюта,
												0,
												0,
												0,
												0,
												СтрокаТЧ.ДатаПереоценки,
												КэшируемыеЗначения.КэшКурсов
											);

КонецПроцедуры

Процедура ЗаполнитьСписаниеПереоценкиВД(СтрокаТЧ, СтруктураДействий, КэшируемыеЗначения)
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьСписаниеПереоценкиВД") Тогда
		Возврат;
	КонецЕсли;
	
	ДоступноСписаниеПереоценки = КэшируемыеЗначения.ПараметрыДоступностьСписанияПереоценки.Найти(СтрокаТЧ.ПараметрыУчетаФИ) <> Неопределено;
	Если Не ДоступноСписаниеПереоценки Тогда
		СтрокаТЧ.СписаниеПереоценкиФВ = 0;
		Возврат;
	КонецЕсли;

	ТекущаяСтроимость = СтрокаТЧ.БалансоваяСтоимостьВД + СтрокаТЧ.НакопленнаяПереоценкаВД + СтрокаТЧ.СуммаПереоценкиВД;
	Если ТекущаяСтроимость < (СтрокаТЧ.БалансоваяСтоимостьВД * КэшируемыеЗначения.ПроцентСниженияСтоимостиФИ / 100) Тогда		
		СтрокаТЧ.СписаниеПереоценкиВД = - СтрокаТЧ.СуммаПереоценкиВД;//-(СтрокаТЧ.НакопленнаяПереоценкаФВ + СтрокаТЧ.СуммаПереоценкиФВ);
	Иначе 
		СтрокаТЧ.СписаниеПереоценкиВД = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инвестиции


#Область ПрограммныйИнтерфейс_Инвестиции

Процедура ОбработатьСтрокуТЧ_Инвестиции(ТекущаяСтрока, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	КэшированныеЗначения = ПолучитьКэшируемыеЗначения_Инвестиции(ТекущаяСтрока, Неопределено, СтруктураДействий, КэшированныеЗначения);
	
	//ТЧ.ИзменениеДолей	
	ЗаполнитьОтношениеКГруппеНаНачалоИзРегистра(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОтношениеКГруппеНаНачалоПоДоле(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьОтношениеКГруппеНаКонецПоУмолчанию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьОтношениеКГруппеНаКонец(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
		
	РассчитатьПоЧА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	РассчитатьОбесценениеГудвила(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСчетУчетаМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);	
	РассчитатьЧА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
		
КонецПроцедуры

Процедура ОбработатьТЧ_Инвестиции(ТЧ, СтруктураДействий, КэшированныеЗначения = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_Инвестиции(Неопределено, ТЧ, СтруктураДействий);
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ_Инвестиции(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКэшируемыеЗначения_Инвестиции(СтрокаТЧ = Неопределено, ТЧ = Неопределено, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем Контекст;
	
	ТребуетсяЗапросСервера = Ложь;	
	Организации = Новый Массив;
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;
		
	СтрокиКэширования = ТЧ;
	Если СтрокиКэширования = Неопределено Тогда
		СтрокиКэширования = Новый Массив;
		СтрокиКэширования.Добавить(СтрокаТЧ);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоИзРегистра") Тогда
		
		ТребуетсяЗапросСервера = Истина;
		Для Каждого СтрокаКэширования Из СтрокиКэширования Цикл
			Организации.Добавить(СтрокаКэширования.ОбъектИнвестирования);
		КонецЦикла;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаКонец")
		Или СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаКонецПоУмолчанию") Тогда
		
		ТребуетсяЗапросСервера = Истина;
		
		Если Организации.Количество() = 0 Тогда
			Для Каждого СтрокаКэширования Из СтрокиКэширования Цикл
				Организации.Добавить(СтрокаКэширования.ОбъектИнвестирования);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоИзРегистра", Контекст)
		Или СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоПоДоле", Контекст)
		Или СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаКонец", Контекст)
		Или СтруктураДействий.Свойство("РассчитатьНДУ", Контекст)
		Или СтруктураДействий.Свойство("РассчитатьГудвил", Контекст)
		Или СтруктураДействий.Свойство("РассчитатьДолюВФинансовомРезультате", Контекст)
		Или СтруктураДействий.Свойство("РассчитатьИзменениеНДУПриИзмененииДоли", Контекст) 
		Или СтруктураДействий.Свойство("РассчитатьРезультатАкционеровОтИзмененияДоли", Контекст)
		Тогда
	
		ТребуетсяЗапросСервера = Истина;
		СтруктураДействий.Вставить("КэшироватьВидыОтношенийКГруппе", Контекст);
	
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоИзРегистра") 
		И НЕ КэшированныеЗначения.Свойство("ДанныеПредыдущихИнтервалов") Тогда 
		КэшированныеЗначения.Вставить("ДанныеПредыдущихИнтервалов", Новый Соответствие);
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетДляМДУ") Тогда
		ТребуетсяЗапросСервера = Истина;
		Если Организации.Количество() = 0 Тогда
			Для Каждого СтрокаКэширования Из СтрокиКэширования Цикл
				Организации.Добавить(СтрокаКэширования.ОбъектИнвестирования);
			КонецЦикла;
		КонецЕсли;

	КонецЕсли;
	
	Если ТребуетсяЗапросСервера Тогда
		
		КэшированныеЗначенияСервера = МСФОВызовСервераУХ.ПолучитьКэшируемыеЗначения_Инвестиции(СтруктураДействий, Организации);
		Для каждого ЭлементКэша Из КэшированныеЗначенияСервера Цикл
			КэшированныеЗначения.Вставить(ЭлементКэша.Ключ, ЭлементКэша.Значение);
		КонецЦикла;

	КонецЕсли;
	
	Возврат КэшированныеЗначения;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции_Инвестиции

Процедура ЗаполнитьОтношениеКГруппеНаНачалоИзРегистра(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоИзРегистра") Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения.Свойство("ДанныеПредыдущихИнтервалов") Тогда
		ДанныеИнтервала = КэшированныеЗначения.ДанныеПредыдущихИнтервалов.Получить(ТекущаяСтрока.ОбъектИнвестирования);
		Если ДанныеИнтервала <> Неопределено Тогда
			ТекущаяСтрока.ОтношениеКГруппеНаНачало = ДанныеИнтервала.ОтношениеКГруппе;
			ТекущаяСтрока.ЭффективнаяДоляНаНачало = ДанныеИнтервала.ЭффективнаяДоля;
			Возврат; 
		КонецЕсли;
	КонецЕсли;
	
	ПоказателиРегламента = КэшированныеЗначения.ПоказателиНаНачало.Получить(ТекущаяСтрока.ОбъектИнвестирования);
	
	Если ПоказателиРегламента = Неопределено Тогда	
		
		ТекущаяСтрока.ОтношениеКГруппеНаНачало = КэшированныеЗначения.ОтношенияКГруппе.ТретьиСтороны;
		ТекущаяСтрока.ЭффективнаяДоляНаНачало = 0;
		
	Иначе
		
		ТекущаяСтрока.ОтношениеКГруппеНаНачало = ПоказателиРегламента.ОтношениеКГруппе;
		ТекущаяСтрока.ЭффективнаяДоляНаНачало = ПоказателиРегламента.ЭффективнаяДоля;
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОтношениеКГруппеНаНачалоПоДоле(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаНачалоПоДоле") Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущаяСтрока.ОтношениеКГруппеНаНачало = КэшированныеЗначения.ОтношенияКГруппе.Материнское Тогда
		ТекущаяСтрока.ОтношениеКГруппеНаНачало = КэшированныеЗначения.ОтношенияКГруппе.Материнское;
	ИначеЕсли ТекущаяСтрока.ЭффективнаяДоляНаНачало >= 50 Тогда
		ТекущаяСтрока.ОтношениеКГруппеНаНачало = КэшированныеЗначения.ОтношенияКГруппе.Дочернее;
	ИначеЕсли ТекущаяСтрока.ЭффективнаяДоляНаНачало >= 20 Тогда
		ТекущаяСтрока.ОтношениеКГруппеНаНачало = КэшированныеЗначения.ОтношенияКГруппе.Ассоциированное;
	Иначе	
		ТекущаяСтрока.ОтношениеКГруппеНаНачало = КэшированныеЗначения.ОтношенияКГруппе.ТретьиСтороны;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьОтношениеКГруппеНаКонецПоУмолчанию(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаКонецПоУмолчанию") Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ЭффективнаяДоляНаКонец = 0 Тогда
		ТекущаяСтрока.ОтношениеКГруппеНаКонец =  КэшированныеЗначения.ОтношенияКГруппе.ТретьиСтороны;
	Иначе
		ТекущаяСтрока.ОтношениеКГруппеНаКонец = ТекущаяСтрока.ОтношениеКГруппеНаНачало;
	КонецЕсли;
		
	Если КэшированныеЗначения.Свойство("ДанныеПредыдущихИнтервалов") Тогда
		ДанныеИнтервала = Новый Структура("ОтношениеКГруппе,ЭффективнаяДоля", ТекущаяСтрока.ОтношениеКГруппеНаКонец, ТекущаяСтрока.ЭффективнаяДоляНаКонец);
		КэшированныеЗначения.ДанныеПредыдущихИнтервалов.Вставить(ТекущаяСтрока.ОбъектИнвестирования, ДанныеИнтервала);
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьОтношениеКГруппеНаКонец(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьОтношениеКГруппеНаКонец") Тогда
		Возврат;
	КонецЕсли;
		
	ТекущаяСтрока.ОтношениеКГруппеНаКонец = ТекущаяСтрока.ОтношениеКГруппеНаНачало;
	
	Если КэшированныеЗначения.Свойство("ДанныеПредыдущихИнтервалов") Тогда
		ДанныеИнтервала = Новый Структура("ОтношениеКГруппе,ЭффективнаяДоля", ТекущаяСтрока.ОтношениеКГруппеНаКонец, ТекущаяСтрока.ЭффективнаяДоляНаКонец);
		КэшированныеЗначения.ДанныеПредыдущихИнтервалов.Вставить(ТекущаяСтрока.ОбъектИнвестирования, ДанныеИнтервала);
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьПоЧА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Перем ИзменениеДоли,ПоступлениеВПериоде,ИтогиЧА;
	
	Если СтруктураДействий.Свойство("РассчитатьГудвил")
		Или СтруктураДействий.Свойство("РассчитатьНДУ") 
		Или СтруктураДействий.Свойство("РассчитатьИзменениеНДУПриИзмененииДоли") 
		Или СтруктураДействий.Свойство("РассчитатьРезультатАкционеровОтИзмененияДоли") Тогда
		
		Если (ТекущаяСтрока.ОтношениеКГруппеНаКонец = КэшированныеЗначения.ОтношенияКГруппе.Дочернее)
			Или (ТекущаяСтрока.ОтношениеКГруппеНаКонец = КэшированныеЗначения.ОтношенияКГруппе.Материнское)
			Или (ТекущаяСтрока.ОтношениеКГруппеНаКонец = КэшированныеЗначения.ОтношенияКГруппе.Ассоциированное)
			Или (ТекущаяСтрока.ОтношениеКГруппеНаКонец = КэшированныеЗначения.ОтношенияКГруппе.Совместное) Тогда
			
			ИтогиЧА = КэшированныеЗначения.ИтогиЧА.Получить(ТекущаяСтрока.КлючСтроки);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
		Если ИтогиЧА = Неопределено Тогда
			
			ИзменениеЧистыхАктивов = 0;
			ЧА_ДоИзменения = 0;
			ЧА_ПослеИзменения = 0;
			
		Иначе
			
			//Рассчитываем изменение, т.к. колонка "ИзменениеЧистыхАктивов" может быть неактуально
			ИзменениеЧистыхАктивов = ИтогиЧА.ЧистыеАктивыПослеИзменения - ИтогиЧА.ЧистыеАктивыДоИзменения;
			ЧА_ДоИзменения = ИтогиЧА.ЧистыеАктивыДоИзменения;
			ЧА_ПослеИзменения = ИтогиЧА.ЧистыеАктивыПослеИзменения;
			
		КонецЕсли;
		
	Иначе
		Возврат;
	КонецЕсли;
			
	Если СтруктураДействий.Свойство("РассчитатьНДУ") Тогда
		
		ПоступлениеВПериоде = (ТекущаяСтрока.ОтношениеКГруппеНаКонец = КэшированныеЗначения.ОтношенияКГруппе.Дочернее)
								И (ТекущаяСтрока.ОтношениеКГруппеНаНачало <> КэшированныеЗначения.ОтношенияКГруппе.Дочернее
								И ТекущаяСтрока.ОтношениеКГруппеНаНачало <> КэшированныеЗначения.ОтношенияКГруппе.Материнское);
		
		Если ПоступлениеВПериоде Тогда
			ТекущаяСтрока.НДУ = (100 - ТекущаяСтрока.ЭффективнаяДоляНаКонец) * ЧА_ПослеИзменения / 100;
		Иначе
			ТекущаяСтрока.НДУ = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьГудвил") Тогда
		
		Если ПоступлениеВПериоде = Неопределено Тогда
			
			ПоступлениеВПериоде = (ТекущаяСтрока.ОтношениеКГруппеНаКонец = КэшированныеЗначения.ОтношенияКГруппе.Дочернее)
									И (ТекущаяСтрока.ОтношениеКГруппеНаНачало <> КэшированныеЗначения.ОтношенияКГруппе.Дочернее
									И ТекущаяСтрока.ОтношениеКГруппеНаНачало <> КэшированныеЗначения.ОтношенияКГруппе.Материнское);
		
		КонецЕсли;
		
		Если ПоступлениеВПериоде Тогда
			ТекущаяСтрока.Гудвил = ТекущаяСтрока.Инвестиции + ТекущаяСтрока.НДУ - ЧА_ПослеИзменения;
		Иначе
			ТекущаяСтрока.Гудвил = 0;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьИзменениеНДУПриИзмененииДоли") Тогда
		
		ИзменениеДоли = ТекущаяСтрока.ЭффективнаяДоляНаКонец - ТекущаяСтрока.ЭффективнаяДоляНаНачало;
		ТекущаяСтрока.ИзменениеНДУПриИзмененииДоли = ЧА_ДоИзменения * ИзменениеДоли / 100;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьРезультатАкционеровОтИзмененияДоли") Тогда
		ТекущаяСтрока.РезультатАкционеровОтИзмененияДоли = ТекущаяСтрока.Инвестиции 
				- (ТекущаяСтрока.ЭффективнаяДоляНаКонец - ТекущаяСтрока.ЭффективнаяДоляНаНачало) / 100
				* ЧА_ДоИзменения;
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьОбесценениеГудвила(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("РассчитатьОбесценениеГудвила") Тогда
		Возврат; 
	КонецЕсли;
	
	Если ТекущаяСтрока.ВозмещаемаяСтоимостьНаОтчетнуюДату = 0 Тогда
	
		ТекущаяСтрока.ОбесценениеГудвилаИнвестицииПоМДУ = 0;
		
	Иначе
		
		ТекущаяСтрока.ОбесценениеГудвилаИнвестицииПоМДУ = ТекущаяСтрока.ВозмещаемаяСтоимостьНаОтчетнуюДату
															- (ТекущаяСтрока.ЧистыеАктивыНаОтчетнуюДату 
															+ ТекущаяСтрока.ГудвилНаОтчетнуюДату);
	
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьЧА(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СтрокаПоКлючу;
	
	Если КэшированныеЗначения.Свойство("КэшПоКлючуСтроки") Тогда
	
		СтрокаПоКлючу = КэшированныеЗначения.КэшПоКлючуСтроки.Получить(ТекущаяСтрока.КлючСтроки);
		Если СтрокаПоКлючу = Неопределено Тогда
			
			СтрокаПоКлючу = Новый Структура;
			СтрокаПоКлючу.Вставить("ОбъектИнвестирования", Неопределено);
			СтрокаПоКлючу.Вставить("ЭффективнаяДоляНаНачало",0);
			СтрокаПоКлючу.Вставить("ЭффективнаяДоляНаКонец", 0);
			СтрокаПоКлючу.Вставить("ОтношениеКГруппеНаКонец", Неопределено);
			СтрокаПоКлючу.Вставить("КоэффициентЧА", 0);
			
		КонецЕсли;
	
	КонецЕсли;

	Если СтруктураДействий.Свойство("РассчитатьИзменениеЧистыхАктивов") Тогда
		
		Если СтрокаПоКлючу.КоэффициентЧА = 0 Тогда
			ТекущаяСтрока.ИзменениеЧистыхАктивов = ТекущаяСтрока.ЧистыеАктивыПослеИзменения - ТекущаяСтрока.ЧистыеАктивыДоИзменения;
		Иначе	
			ТекущаяСтрока.ИзменениеЧистыхАктивов = СтрокаПоКлючу.КоэффициентЧА 
								*(ТекущаяСтрока.ЧистыеАктивыПослеИзменения - ТекущаяСтрока.ЧистыеАктивыДоИзменения);
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьФинансовыйРезультат") Тогда
		
		Если СтрокаПоКлючу = Неопределено Тогда
			ДоляМеньшинста = 0;
		Иначе
			ДоляМеньшинста = 100 - СтрокаПоКлючу.ЭффективнаяДоляНаКонец;
		КонецЕсли;
		
		ТекущаяСтрока.ФинансовыйРезультат = ТекущаяСтрока.ИзменениеЧистыхАктивов * ДоляМеньшинста / 100;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьДолюВФинансовомРезультате") Тогда
		
		Если СтрокаПоКлючу = Неопределено Тогда		
			СтрокаПоКлючу = КэшированныеЗначения.КэшПоКлючуСтроки.Получить(ТекущаяСтрока.КлючСтроки);
		КонецЕсли;
		
		СчетНРППриДолевом = Истина;
		ВидыОтношенийКГруппе = КэшированныеЗначения.ОтношенияКГруппе;
		
		Если СтрокаПоКлючу = Неопределено Тогда
			
			ТекущаяСтрока.ДоляВФинансовомРезультате = 0;
						
		ИначеЕсли (СтрокаПоКлючу.ОтношениеКГруппеНаКонец = ВидыОтношенийКГруппе.Ассоциированное)
			Или (СтрокаПоКлючу.ОтношениеКГруппеНаКонец = ВидыОтношенийКГруппе.Совместное)
			И (ТекущаяСтрока.СчетЧА = КэшированныеЗначения.СчетНРПОтчетногоПериода) Тогда
			
			ТекущаяСтрока.ДоляВФинансовомРезультате = ТекущаяСтрока.ФинансовыйРезультат 
									- (СтрокаПоКлючу.ЭффективнаяДоляНаКонец - СтрокаПоКлючу.ЭффективнаяДоляНаНачало) / 100
									* (ТекущаяСтрока.Дивиденды - ТекущаяСтрока.НалогНаДивиденды);
				
		Иначе
			
			ТекущаяСтрока.ДоляВФинансовомРезультате = ТекущаяСтрока.ФинансовыйРезультат 
									- (СтрокаПоКлючу.ЭффективнаяДоляНаКонец - СтрокаПоКлючу.ЭффективнаяДоляНаНачало) / 100;

		КонецЕсли;

	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетДляМДУ") Тогда
		
		ПоОрганизации = КэшированныеЗначения.СчетаДляМДУ.Получить(СтрокаПоКлючу.ОбъектИнвестирования);
		Если ПоОрганизации = Неопределено Тогда
			ТекущаяСтрока.СчетДляМДУ = Неопределено;
		Иначе	
			ТекущаяСтрока.СчетДляМДУ = ПоОрганизации.Получить(ТекущаяСтрока.СчетЧА);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьКоэффициентЧА(ПериодОтчета, ДатаНачала, ДатаОкончания) Экспорт
	Возврат (ДатаОкончания - ДатаНачала) / (ПериодОтчета.ДатаОкончания - ПериодОтчета.ДатаНачала);
КонецФункции

#КонецОбласти

Функция ПолучитьОтношениеКГруппеПоДолеВладения(ДоляВладения) Экспорт
	
	Если ДоляВладения <= 20 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.ТретьиСтороны");
	ИначеЕсли ДоляВладения <= 50 Тогда
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Ассоциированное");
	Иначе
		Возврат ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.Дочернее");
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РезервыДЗ


#Область ПрограммныйИнтерфейс_РезервыДЗ

Процедура ОбработатьСтрокуТЧ_РезервыДЗ(ТекущаяСтрока, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда	
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_РезервыДЗ(ТекущаяСтрока, Неопределено, СтруктураДействий);
	КонецЕсли;
	
	//ТЧ Резервы
	ЗаполнитьДатуОкончанияОтсрочки(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСчетаЗадолженностиПоСчетуМСФО(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКоличествоДнейОтсрочки(			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКоличествоДнейПросрочки(			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьКоэффициентыРезерва(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьКоэффициентРезерва(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьРезервМСФО(						ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьНачислениеРезерваМСФО(			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьНачислениеРезерваВВалютеМСФО(		ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьОстатокЗадолженностиМСФО(			ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьОстатокЗадолженностиВВалютеМСФО(	ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
	//ТЧ ДвижениеРезервовНСБУ
	ЗаполнитьСчетаПоВидуДвижений(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьСуммуОперации(					ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьСуммуОперацииВВалюте(				ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОбработатьТЧ_РезервыДЗ(ТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_РезервыДЗ(Неопределено, ТЧ, СтруктураДействий);
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ_РезервыДЗ(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКэшируемыеЗначения_РезервыДЗ(СтрокаТЧ = Неопределено, ТЧ = Неопределено, СтруктураДействий = Неопределено) Экспорт
	
	СтруктураДействия = Неопределено;
	Контекст = Неопределено;
	РеквизитыДоговораСтрокой = "";
	
	Если СтруктураДействий = Неопределено Тогда
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьДатуОкончанияОтсрочки") 
		Или СтруктураДействий.Свойство("ЗаполнитьКоличествоДнейПросрочки") Тогда
		
		РеквизитыДоговораСтрокой = "ИспользоватьДатуОплаты,ДатаОплаты,СрокОплаты";
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьНачислениеРезерваМСФО", СтруктураДействия)
		Или СтруктураДействий.Свойство("РассчитатьНачислениеРезерваВВалютеМСФО", СтруктураДействия)
		Или СтруктураДействий.Свойство("РассчитатьОстатокЗадолженностиМСФО", СтруктураДействия)
		Или СтруктураДействий.Свойство("РассчитатьОстатокЗадолженностиВВалютеМСФО", СтруктураДействия)
		Или СтруктураДействий.Свойство("РассчитатьСуммуОперации", СтруктураДействия) Тогда
		
		Контекст = СтруктураДействия.Контекст;
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьРезервМСФО") Тогда
		РеквизитыДоговораСтрокой = ?(РеквизитыДоговораСтрокой="", "", РеквизитыДоговораСтрокой + ",") + "РучнойРасчетРезерваПоЗадолженности";
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ", СтруктураДействия) Тогда 
		Контекст = СтруктураДействия.Контекст;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаЗадолженностиПоСчетуМСФО", СтруктураДействия) Тогда 
		Контекст = СтруктураДействия.Контекст;
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетаПоВидуДвижений", СтруктураДействия) Тогда 
		Контекст = СтруктураДействия.Контекст;
	КонецЕсли;
	
	Контрагенты = Новый Массив;
	Договоры = Новый Массив;
	ТребуютсяКонтрагенты = СтруктураДействий.Свойство("ЗаполнитьКоэффициентыРезерва");
	
	Если СтрокаТЧ <> Неопределено Тогда
		
		Если ТребуютсяКонтрагенты Тогда
			Контрагенты.Добавить(СтрокаТЧ.Контрагент);	
		КонецЕсли;
		
		Договоры.Добавить(СтрокаТЧ.Договор);
		
	ИначеЕсли ТЧ <> Неопределено Тогда
		
		Для каждого СтрокаТЧ Из ТЧ Цикл
			
			Если ТребуютсяКонтрагенты Тогда
				Контрагенты.Добавить(СтрокаТЧ.Контрагент);
			КонецЕсли;
			
			Договоры.Добавить(СтрокаТЧ.Договор);
			
		КонецЦикла;
		
	КонецЕсли;

	ТекущийКонтекст = Новый Структура("Организация,ПериодОтчета", Контекст.Организация, Контекст.ПериодОтчета);
	Возврат МСФОВызовСервераУХ.ПолучитьКэшируемыеЗначения_РезервыДЗ(СтруктураДействий, ТекущийКонтекст, РеквизитыДоговораСтрокой, Договоры, Контрагенты);
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции_РезервыДЗ

Процедура ЗаполнитьДатуОкончанияОтсрочки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьДатуОкончанияОтсрочки") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ДатаПогашенияПоДокументуНСБУ = ПолучитьДатуОкончанияОтсрочки(ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ЗаполнитьКоличествоДнейОтсрочки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьКоличествоДнейОтсрочки") Тогда
		Возврат;	
	КонецЕсли;
	
	РеквизитыДоговора = ПолучитьРеквизитыДоговора(ТекущаяСтрока.Договор, КэшированныеЗначения);
	
	Если РеквизитыДоговора.ИспользоватьДатуОплаты Тогда
		
		Отклонение = НачалоДня(ТекущаяСтрока.ДатаПогашенияПоДокументуНСБУ) - НачалоДня(ТекущаяСтрока.ДатаДокументаРасчета);
		ТекущаяСтрока.ОтсрочкаДниМСФО = ?(Отклонение > 0, Отклонение / (24*60*60), 0);
		
	Иначе
		ТекущаяСтрока.ОтсрочкаДниМСФО = РеквизитыДоговора.СрокОплаты;
	КонецЕсли;
	
КонецПроцедуры


Процедура ЗаполнитьКоличествоДнейПросрочки(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьКоличествоДнейПросрочки") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ПросрочкаДниМСФО = ПолучитьКоличествоДнейПросрочки(ТекущаяСтрока, СтруктураДействий.ЗаполнитьКоличествоДнейПросрочки.КонецПериода);
	
КонецПроцедуры

Процедура ЗаполнитьКоэффициентыРезерва(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем ТипыПараметров;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьКоэффициентыРезерва") Тогда
		Возврат;	
	КонецЕсли;
	
	Если НЕ КэшированныеЗначения.Свойство("ТипыПараметровРасчетаРезерва", ТипыПараметров) Тогда
		ТипыПараметров = МСФОВызовСервераУХ.ПолучитьСтруктуруСоЗначениямиПеречисления("ТипыПараметровРасчетаРезерва");
	    КэшированныеЗначения.Вставить("ТипыПараметровРасчетаРезерва", ТипыПараметров);
	КонецЕсли;
	
	Если НЕ КэшированныеЗначения.Свойство("ПустойКлючСвязи") Тогда
		КэшированныеЗначения.Вставить("ПустойКлючСвязи", МСФОКлиентСерверУХ.ПолучитьПустойУникальныйИдентификатор());
	КонецЕсли;
	
	Если ТекущаяСтрока.КлючСвязи = КэшированныеЗначения.ПустойКлючСвязи Тогда
		ТекущаяСтрока.КлючСвязи = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Контекст 				= СтруктураДействий.ЗаполнитьКоэффициентыРезерва.Контекст;
	ТаблицаВычисляемые 		= КэшированныеЗначения.ТаблицыДляКоэффициентов.Вычисляемые;
	ТаблицаНеВычисляемые 	= КэшированныеЗначения.ТаблицыДляКоэффициентов.Невычисляемые;
		
	Для каждого ПараметрРасчета Из КэшированныеЗначения.ТаблицыДляКоэффициентов.ПараметрыРасчета Цикл
		
		Если ПараметрРасчета.ТипПараметраРасчетаРезервов = ТипыПараметров.ПоДоговору Тогда
			
			СтрокаПараметра = ПолучитьСтрокуПараметраНеВычисляемый(ТаблицаНеВычисляемые, ТекущаяСтрока.Договор, ПараметрРасчета.ПараметрРасчета);
		    РасчетноеЗначение = СтрокаПараметра.РасчетноеЗначение;
			Коэффициент = СтрокаПараметра.РасчетноеЗначение;
			
		ИначеЕсли ПараметрРасчета.ТипПараметраРасчетаРезервов = ТипыПараметров.ПоКонтрагенту Тогда
			
			СтрокаПараметра = ПолучитьСтрокуПараметраНеВычисляемый(ТаблицаНеВычисляемые, ТекущаяСтрока.Контрагент, ПараметрРасчета.ПараметрРасчета);
			РасчетноеЗначение = СтрокаПараметра.РасчетноеЗначение;
			Коэффициент = СтрокаПараметра.РасчетноеЗначение;
			
		ИначеЕсли ПараметрРасчета.ТипПараметраРасчетаРезервов = ТипыПараметров.Вычисляемый Тогда
			
			РасчетноеЗначение = ВычислитьЗначениеПризнака(ПараметрРасчета.Алгоритм, ТекущаяСтрока, Контекст);
			СтрокаПараметра = ПолучитьСтрокуПараметраВычисляемый(ТаблицаВычисляемые, ПараметрРасчета, РасчетноеЗначение);
			Коэффициент = СтрокаПараметра.РасчетноеЗначение;
			
		КонецЕсли;

		СтруктураПараметра = Новый Структура;
		СтруктураПараметра.Вставить("КлючСвязи", 				ТекущаяСтрока.КлючСвязи);
		СтруктураПараметра.Вставить("ПараметрРасчета", 			ПараметрРасчета.ПараметрРасчета);
		СтруктураПараметра.Вставить("ГруппаПараметраРасчета", 	СтрокаПараметра.ГруппаПараметраРасчета);
		СтруктураПараметра.Вставить("РасчетноеЗначение", 		РасчетноеЗначение);
		СтруктураПараметра.Вставить("Коэффициент", 				Коэффициент);
		
		КэшированныеЗначения.РасчетныеЗначенияПараметров.Добавить(Новый ФиксированнаяСтруктура(СтруктураПараметра));
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РассчитатьКоэффициентРезерва(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("РассчитатьКоэффициентРезерва") Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущаяСтрока.КоэффициентРезерва = ПолучитьКоэффициентРезерва(ТекущаяСтрока, КэшированныеЗначения);
	
КонецПроцедуры

Процедура РассчитатьРезервМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("РассчитатьРезервМСФО") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПолучитьРеквизитыДоговора(ТекущаяСтрока.Договор, КэшированныеЗначения).РучнойРасчетРезерваПоЗадолженности Тогда
		ТекущаяСтрока.НачислениеРезерваВВалютеМСФО = ТекущаяСтрока.ОстатокЗадолженностиВВалютеМСФО * ТекущаяСтрока.КоэффициентРезерва;
	КонецЕсли;	
	
КонецПроцедуры

Процедура РассчитатьНачислениеРезерваМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("РассчитатьНачислениеРезерваМСФО") Тогда
		Возврат;	
	КонецЕсли;
	
	ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, "НачислениеРезерваВВалютеМСФО", "НачислениеРезерваМСФО", Ложь);
	
КонецПроцедуры

Процедура РассчитатьНачислениеРезерваВВалютеМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("РассчитатьНачислениеРезерваВВалютеМСФО") Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, "НачислениеРезерваМСФО", "НачислениеРезерваВВалютеМСФО", Истина);
	
КонецПроцедуры

Процедура РассчитатьОстатокЗадолженностиМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("РассчитатьОстатокЗадолженностиМСФО") Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, "ОстатокЗадолженностиВВалютеМСФО", "ОстатокЗадолженностиМСФО", Ложь);
	
КонецПроцедуры

Процедура РассчитатьОстатокЗадолженностиВВалютеМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("РассчитатьОстатокЗадолженностиВВалютеМСФО") Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, "ОстатокЗадолженностиМСФО", "ОстатокЗадолженностиВВалютеМСФО", Истина);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ") Тогда
		Возврат;
	КонецЕсли;

	Если НЕ КэшированныеЗначения.Свойство("СчетаЗадолженностиНСБУ") Тогда
		
		КэшированныеЗначения.Вставить("СчетаЗадолженностиНСБУ", Новый Соответствие);
				
	КонецЕсли;
	
	СчетаЗадолженностиНСБУ = КэшированныеЗначения.СчетаЗадолженностиНСБУ.Получить(ТекущаяСтрока.СчетЗадолженностиНСБУ);
	
	Если СчетаЗадолженностиНСБУ = Неопределено Тогда
		
		Контекст = СтруктураДействий.ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ.Контекст;
		
		ТекущаяСтрока.СчетЗадолженностиМСФО = МСФОВНАВызовСервераУХ.ПолучитьСчетМСФОТрансформации(ТекущаяСтрока.СчетЗадолженностиНСБУ, Контекст.Организация,
			Контекст.Сценарий, Контекст.ПериодОтчета, КэшированныеЗначения.ПланСчетовМСФО);
			
		СчетаЗадолженностиНСБУ = МСФОВызовСервераУХ.ПолучитьСчетаЗадолженности(ТекущаяСтрока.СчетЗадолженностиМСФО);
		КэшированныеЗначения.СчетаЗадолженностиНСБУ.Вставить(ТекущаяСтрока.СчетЗадолженностиНСБУ, СчетаЗадолженностиНСБУ);
		
	Иначе
		
		Контекст = СтруктураДействий.ЗаполнитьСчетаЗадолженностиПоСчетуНСБУ.Контекст;
		ТекущаяСтрока.СчетЗадолженностиМСФО = МСФОВНАВызовСервераУХ.ПолучитьСчетМСФОТрансформации(ТекущаяСтрока.СчетЗадолженностиНСБУ, Контекст.Организация,
			Контекст.Сценарий, Контекст.ПериодОтчета, КэшированныеЗначения.ПланСчетовМСФО);
				
	КонецЕсли;
	
	ТекущаяСтрока.СчетРасходаМСФО 					= СчетаЗадолженностиНСБУ.СчетРасхода;
	ТекущаяСтрока.СчетРасходаСубконто1МСФО 			= СчетаЗадолженностиНСБУ.СчетРасходаСубконто1;
	ТекущаяСтрока.СчетРасходаСубконто2МСФО 			= СчетаЗадолженностиНСБУ.СчетРасходаСубконто2;
	ТекущаяСтрока.СчетРасходаСубконто3МСФО 			= СчетаЗадолженностиНСБУ.СчетРасходаСубконто3;

	ТекущаяСтрока.СчетРезерваМСФО					= СчетаЗадолженностиНСБУ.СчетРезерва;
	ТекущаяСтрока.СчетОбесцененнойЗадолженностиМСФО = СчетаЗадолженностиНСБУ.СчетОбесцененнойЗадолженности;
	
	ТекущаяСтрока.СчетДолгосрочнойЗадолженностиМСФО 			= СчетаЗадолженностиНСБУ.СчетДолгосрочнойЗадолженности;	
	ТекущаяСтрока.СчетОбесцененнойДолгосрочнойЗадолженностиМСФО = СчетаЗадолженностиНСБУ.СчетОбесцененнойДолгосрочнойЗадолженности;
	ТекущаяСтрока.СчетРезерваДляДолгосрочнойЗадолженностиМСФО 	= СчетаЗадолженностиНСБУ.СчетРезерваДляДолгосрочнойЗадолженности;
				
КонецПроцедуры

Процедура ЗаполнитьСчетаЗадолженностиПоСчетуМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетаЗадолженностиПоСчетуМСФО") Тогда
		Возврат;	
	КонецЕсли;

	Если НЕ КэшированныеЗначения.Свойство("СчетаЗадолженностиМСФО") Тогда
		
		КэшированныеЗначения.Вставить("СчетаЗадолженностиМСФО", Новый Соответствие);
		
	КонецЕсли;
	
	СчетаЗадолженностиМСФО = КэшированныеЗначения.СчетаЗадолженностиМСФО.Получить(ТекущаяСтрока.СчетЗадолженностиМСФО);
	
	Если СчетаЗадолженностиМСФО = Неопределено Тогда
		
		СчетаЗадолженностиМСФО = МСФОВызовСервераУХ.ПолучитьСчетаЗадолженности(ТекущаяСтрока.СчетЗадолженностиМСФО);
		КэшированныеЗначения.СчетаЗадолженностиМСФО.Вставить(ТекущаяСтрока.СчетЗадолженностиНСБУ, СчетаЗадолженностиМСФО);
		
	КонецЕсли;
	
	ТекущаяСтрока.СчетРасходаМСФО 					= СчетаЗадолженностиМСФО.СчетРасхода;
	ТекущаяСтрока.СчетРасходаСубконто1МСФО 			= СчетаЗадолженностиМСФО.СчетРасходаСубконто1;
	ТекущаяСтрока.СчетРасходаСубконто2МСФО 			= СчетаЗадолженностиМСФО.СчетРасходаСубконто2;
	ТекущаяСтрока.СчетРасходаСубконто3МСФО 			= СчетаЗадолженностиМСФО.СчетРасходаСубконто3;

	ТекущаяСтрока.СчетРезерваМСФО					= СчетаЗадолженностиМСФО.СчетРезерва;
	ТекущаяСтрока.СчетОбесцененнойЗадолженностиМСФО = СчетаЗадолженностиМСФО.СчетОбесцененнойЗадолженности;
	
	ТекущаяСтрока.СчетДолгосрочнойЗадолженностиМСФО 			= СчетаЗадолженностиМСФО.СчетДолгосрочнойЗадолженности;	
	ТекущаяСтрока.СчетОбесцененнойДолгосрочнойЗадолженностиМСФО = СчетаЗадолженностиМСФО.СчетОбесцененнойДолгосрочнойЗадолженности;
	ТекущаяСтрока.СчетРезерваДляДолгосрочнойЗадолженностиМСФО 	= СчетаЗадолженностиМСФО.СчетРезерваДляДолгосрочнойЗадолженности;
		
КонецПроцедуры

Процедура РассчитатьСуммуОперации(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("РассчитатьСуммуОперации") Тогда
		Возврат;	
	КонецЕсли;
	
	ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, "СуммаОперацииВВалюте", "СуммаОперации", Ложь);
	
КонецПроцедуры

Процедура РассчитатьСуммуОперацииВВалюте(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("РассчитатьСуммуОперацииВВалюте") Тогда
		Возврат;	
	КонецЕсли;
	
	ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, "СуммаОперации", "СуммаОперацииВВалюте", Истина);
	
КонецПроцедуры

#КонецОбласти


#Область ПрикладныеФункции_РезервыДЗ

Функция ПолучитьРеквизитыДоговора(Договор, КэшированныеЗначения = Неопределено)

	Если КэшированныеЗначения = Неопределено Тогда
		Возврат Договор;
	Иначе
		
		КэшированныйДоговор = КэшированныеЗначения.РеквизитыДоговоров.Получить(Договор);
		Если КэшированныйДоговор = Неопределено Тогда
			Возврат Договор;
		Иначе
			Возврат КэшированныйДоговор;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьДатуОкончанияОтсрочки(ТекущаяСтрока, КэшированныеЗначения = Неопределено) Экспорт

	ПустаяДата = Дата(1,1,1);
	
	ТекущийДоговор = ПолучитьРеквизитыДоговора(ТекущаяСтрока.Договор, КэшированныеЗначения);

	Если ТекущийДоговор.ИспользоватьДатуОплаты И (ТекущийДоговор.ДатаОплаты <> ПустаяДата)Тогда
		Возврат ТекущийДоговор.ДатаОплаты;
	ИначеЕсли НЕ ТекущийДоговор.ИспользоватьДатуОплаты И (ТекущаяСтрока.ДатаДокументаРасчета <> ПустаяДата) Тогда 
		Возврат ОбщегоНазначенияУХ.ДобавитьДень(ТекущаяСтрока.ДатаДокументаРасчета, ТекущийДоговор.СрокОплаты);
	Иначе
		Возврат ПустаяДата;
	КонецЕсли;

КонецФункции

Функция ПолучитьКоличествоДнейПросрочки(ТекущаяСтрока, ДатаОкончанияПериода) Экспорт

	ОтклонениеОплаты = НачалоДня(ДатаОкончанияПериода) - НачалоДня(ТекущаяСтрока.ДатаПогашенияПоДокументуНСБУ);
	Возврат ?(ОтклонениеОплаты > 0, ОтклонениеОплаты / (24*60*60), 0);
		
КонецФункции

Функция ПолучитьДолюПросрочки(ТекущаяСтрока, КэшированныеЗначения = Неопределено) Экспорт

	ДнейОтсрочки = ОбщегоНазначенияКлиентСерверУХ.РазностьДатВДнях(
										НачалоДня(ТекущаяСтрока.ДатаПогашенияПоДокументуНСБУ),
										НачалоДня(ТекущаяСтрока.ДатаДокументаРасчета));
										
	ДнейОтсрочки = ?(ДнейОтсрочки > 0, ДнейОтсрочки, 0);
	
	Если ДнейОтсрочки = 0 Тогда
	    Возврат ?(ТекущаяСтрока.ПросрочкаДниМСФО > 0, ТекущаяСтрока.ПросрочкаДниМСФО, 0);
	Иначе	
		Возврат ТекущаяСтрока.ПросрочкаДниМСФО / ДнейОтсрочки;
	КонецЕсли;
	     
КонецФункции

Функция ПолучитьКоэффициентРезерва(ТекущаяСтрока, КэшированныеЗначения = Неопределено) Экспорт

	Если КэшированныеЗначения = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;
	
	Коэффициент = 1;
	
	Для каждого СтрокаРасчет Из КэшированныеЗначения.РасчетныеЗначенияПараметров Цикл
		
		Если (СтрокаРасчет.КлючСвязи = ТекущаяСтрока.КлючСвязи) И (СтрокаРасчет.ГруппаПараметраРасчета <> Неопределено) Тогда
			
			Коэффициент = Коэффициент * (1 - ?(СтрокаРасчет.Коэффициент>1, 1, СтрокаРасчет.Коэффициент));
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат 1 - Коэффициент; // вероятность наступления хотя бы одного из событий

КонецФункции

Функция ВычислитьЗначениеПризнака(АлгоритмВычисляемогоПризнака, СтрокаДокументаРезерв, ДокументРезерв) Экспорт

	РасчетноеЗначение = 1;
	
	Если Ложь Тогда 
		РасчетноеЗначение = ПолучитьДолюПросрочки(СтрокаДокументаРезерв);
	КонецЕсли;
		
	Попытка
		Выполнить(АлгоритмВычисляемогоПризнака);
	Исключение
		ШаблонОшибки = НСтр("ru = 'При выполнении алгоритма по договору <%1> произвошла ошибка: '");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ШаблонОшибки, СтрокаДокументаРезерв.Договор) + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат РасчетноеЗначение;

КонецФункции

Функция ПолучитьСтрокуПараметраНеВычисляемый(ТаблицаНеВычисляемые, Объект, ПараметрРасчета)

	СтрокаПараметра = Неопределено;	
	Отбор = Новый Структура("Объект,ПараметрРасчета", Объект, ПараметрРасчета);
		
	Для каждого СтрокаПризнакиРезервов Из ТаблицаНеВычисляемые.НайтиСтроки(Отбор) Цикл
		
		СтрокаПараметра = СтрокаПризнакиРезервов;
		Прервать;
		
	КонецЦикла;
	
	Если СтрокаПараметра = Неопределено Тогда
		Возврат Новый Структура("ГруппаПараметраРасчета,РасчетноеЗначение,Коэффициент", Неопределено, 0, 0);
	Иначе	
		Возврат СтрокаПараметра
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСтрокуПараметраВычисляемый(ТаблицаВычисляемые, ПараметрРасчета, РасчетноеЗначение)
	
	Отбор = Новый Структура("ПараметрРасчета", ПараметрРасчета.ПараметрРасчета);
	
	Для каждого УзелКоэффицента Из ТаблицаВычисляемые.НайтиСтроки(Отбор) Цикл
		Если (УзелКоэффицента.ЗначениеКон <> NULL) И (УзелКоэффицента.ЗначениеНач <= РасчетноеЗначение) И (УзелКоэффицента.ЗначениеКон >= РасчетноеЗначение) Тогда
			
			Возврат УзелКоэффицента;

		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый Структура("ГруппаПараметраРасчета,РасчетноеЗначение,Коэффициент", Неопределено, 0, 0);
		
КонецФункции

#КонецОбласти

#КонецОбласти

#Область РезервыМПЗ


#Область ПрограммныйИнтерфейс_РезервыМПЗ

Процедура ОбработатьСтрокуТЧ_РезервыМПЗ(ТекущаяСтрока, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_РезервыМПЗ(ТекущаяСтрока, Неопределено, СтруктураДействий, КэшированныеЗначения);
		КэшированныеЗначения.Вставить("ПланСчетовБДМСФО", МСФОВызовСервераУХ.ПланСчетовУП());
	КонецЕсли;

	ЗаполнитьЧистуюЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСчетУчетаМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСчетРезерваМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	РассчитатьВычисляемыеПоля(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	ЗаполнитьСчетаПоВидуДвижений(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения);
	
КонецПроцедуры

Процедура ОбработатьТЧ_РезервыМПЗ(ТЧ, СтруктураДействий, КэшированныеЗначения) Экспорт
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = ПолучитьКэшируемыеЗначения_РезервыМПЗ(Неопределено, ТЧ, СтруктураДействий);
	КонецЕсли;
	
	Для Каждого СтрТабл из ТЧ Цикл
		ОбработатьСтрокуТЧ_РезервыМПЗ(СтрТабл, СтруктураДействий, КэшированныеЗначения);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьКэшируемыеЗначения_РезервыМПЗ(СтрокаТЧ = Неопределено, ТЧ = Неопределено, СтруктураДействий = Неопределено, КэшированныеЗначения = Неопределено) Экспорт
	
	Перем ДанныеДействия, ПериодОтчета;
	
	СтруктураПолученияЗначений = Новый Структура;
	
	Если КэшированныеЗначения = Неопределено Тогда
		КэшированныеЗначения = Новый Структура;
	КонецЕсли;
		
	СтрокиКэширования = ТЧ;
	Если СтрокиКэширования = Неопределено Тогда
		СтрокиКэширования = Новый Массив;
		СтрокиКэширования.Добавить(СтрокаТЧ);
	КонецЕсли;
		
	Если СтруктураДействий.Свойство("РассчитатьВычисляемыеПоля", ПериодОтчета) Тогда
		
		СписокНоменклатуры = Новый Массив;
		СчетаУчетаНСБУ = Новый Массив;

		Для каждого ТекущаяСтрокаТЧ Из СтрокиКэширования Цикл
			
			СписокНоменклатуры.Добавить(ТекущаяСтрокаТЧ.Номенклатура);
			Если НЕ ТекущаяСтрокаТЧ.СчетЗапасовНСБУ.Пустая() 
				Или СчетаУчетаНСБУ.Найти(ТекущаяСтрокаТЧ.СчетЗапасовНСБУ) <> Неопределено Тогда
				СчетаУчетаНСБУ.Добавить(ТекущаяСтрокаТЧ.СчетЗапасовНСБУ);
			КонецЕсли;
			
		КонецЦикла;

		СтруктураПолученияЗначений.Вставить("СписокНоменклатуры", СписокНоменклатуры);
		СтруктураПолученияЗначений.Вставить("СчетаУчетаНСБУ", СчетаУчетаНСБУ);
		СтруктураПолученияЗначений.Вставить("ЧислоДнейПериода", ПериодОтчета);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьЧистуюЦенуПродажи")
		И Не СтруктураПолученияЗначений.Свойство("СписокНоменклатуры") Тогда
		
		СписокНоменклатуры = Новый Массив;
		Для каждого ТекущаяСтрокаТЧ Из СтрокиКэширования Цикл
			СписокНоменклатуры.Добавить(ТекущаяСтрокаТЧ.Номенклатура);
		КонецЦикла;
		
		СтруктураПолученияЗначений.Вставить("СписокНоменклатуры", СписокНоменклатуры);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетУчетаМСФО") 
		И НЕ СтруктураПолученияЗначений.Свойство("CчетаЗапасовНСБУ") Тогда
		
		СчетаУчетаНСБУ = Новый Массив;
		Для каждого ТекущаяСтрокаТЧ Из СтрокиКэширования Цикл
			
			Если ТекущаяСтрокаТЧ.СчетЗапасовНСБУ.Пустая() 
				Или СчетаУчетаНСБУ.Найти(ТекущаяСтрокаТЧ.СчетЗапасовНСБУ) <> Неопределено Тогда
			
				Продолжить;
			
			КонецЕсли;
			
			СчетаУчетаНСБУ.Добавить(ТекущаяСтрокаТЧ.СчетЗапасовНСБУ);
		
		КонецЦикла;
		
		СтруктураПолученияЗначений.Вставить("CчетаЗапасовНСБУ", СчетаУчетаНСБУ);
		
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("ЗаполнитьСчетРезерваМСФО")  Тогда		
		СтруктураПолученияЗначений.Вставить("ЗаполнитьСчетРезерваМСФО", Неопределено);			
	КонецЕсли;
	
	Если СтруктураПолученияЗначений.Количество() <> 0 Тогда
		
		КэшированныеЗначенияСервера = МСФОВызовСервераУХ.ПолучитьКэшируемыеЗначения_РезервыМПЗ(СтруктураПолученияЗначений, СтруктураДействий);
		Для каждого ЭлементКэша Из КэшированныеЗначенияСервера Цикл
			КэшированныеЗначения.Вставить(ЭлементКэша.Ключ, ЭлементКэша.Значение);
		КонецЦикла;

	КонецЕсли;
	
	Возврат КэшированныеЗначения; 

КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции_РезервыМПЗ

Процедура ЗаполнитьЧистуюЦенуПродажи(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Если НЕ СтруктураДействий.Свойство("ЗаполнитьЧистуюЦенуПродажи") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.ЧистаяЦенаПродажиЗаЕдиницу = КэшированныеЗначения.ЦеныНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);

КонецПроцедуры

Процедура ЗаполнитьСчетУчетаМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетУчетаМСФО") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.СчетЗапасов = КэшированныеЗначения.СчетаТрансляции.Получить(ТекущаяСтрока.СчетЗапасовНСБУ);
		
КонецПроцедуры

Процедура ЗаполнитьСчетРезерваМСФО(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетРезерваМСФО") Тогда
		Возврат;	
	КонецЕсли;
	
	ТекущаяСтрока.СчетРезерва = КэшированныеЗначения.СчетаРезерва.Получить(ТекущаяСтрока.СчетЗапасов);
		
КонецПроцедуры

Процедура РассчитатьВычисляемыеПоля(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)
		
	Если НЕ СтруктураДействий.Свойство("РассчитатьВычисляемыеПоля") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока.СтоимостьОстаткаПоЧистойЦенеПродажи 	= ТекущаяСтрока.КоличествоОстаткаЗапасовНаКонецПериода * ТекущаяСтрока.ЧистаяЦенаПродажиЗаЕдиницу;
	ТекущаяСтрока.Оборачиваемость 					= ПолучитьОборачиваемость(ТекущаяСтрока, КэшированныеЗначения);	
	
	РеквизитыНоменклатуры = КэшированныеЗначения.РеквизитыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
	Если РеквизитыНоменклатуры.СпособОценкиРезерва = КэшированныеЗначения.СпособыОценкиРезервовПоЗапасамМСФО.ПоЧистойСтоимостиРеализации Тогда
		ТекущаяСтрока.РезервПоОбесценениюМСФО 		= ПолучитьРезервПоОбесценению(ТекущаяСтрока);
		ТекущаяСтрока.РезервПоОборачиваемостиМСФО 	= 0;
	ИначеЕсли РеквизитыНоменклатуры.СпособОценкиРезерва = КэшированныеЗначения.СпособыОценкиРезервовПоЗапасамМСФО.ПоОборачиваемости Тогда 
		ТекущаяСтрока.РезервПоОбесценениюМСФО 		= 0;
		ТекущаяСтрока.РезервПоОборачиваемостиМСФО 	= ПолучитьРезервПоОборачиваемости(ТекущаяСтрока, КэшированныеЗначения);
	ИначеЕсли РеквизитыНоменклатуры.СпособОценкиРезерва = КэшированныеЗначения.СпособыОценкиРезервовПоЗапасамМСФО.ПоЧистойСтоимостиРеализацииИлиОборачиваемости Тогда
		
		ТекущаяСтрока.РезервПоОбесценениюМСФО 	= ПолучитьРезервПоОбесценению(ТекущаяСтрока);	
		Если ТекущаяСтрока.РезервПоОбесценениюМСФО = 0 Тогда
			ТекущаяСтрока.РезервПоОборачиваемостиМСФО = ПолучитьРезервПоОборачиваемости(ТекущаяСтрока, КэшированныеЗначения);
		КонецЕсли;
	Иначе
		ТекущаяСтрока.РезервПоОбесценениюМСФО 		= 0;
		ТекущаяСтрока.РезервПоОборачиваемостиМСФО 	= 0;
	КонецЕсли;	
		
	ТекущаяСтрока.РезервИтогоМСФО = ПолучитьИтоговыйРезерв(ТекущаяСтрока, КэшированныеЗначения);	
	
КонецПроцедуры

#КонецОбласти


#Область ПрикладныеФункции_РезервыМПЗ

Функция ПолучитьОборачиваемость(ТекущаяСтрока, КэшированныеЗначения)

	РеквизитыНоменклатуры = КэшированныеЗначения.РеквизитыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
	НормативнаяОборачиваемость = ?(РеквизитыНоменклатуры = Неопределено, 0, ?(ЗначениеЗаполнено(РеквизитыНоменклатуры.НормативнаяОборачиваемость), РеквизитыНоменклатуры.НормативнаяОборачиваемость, 0));
	
	ТекущаяОборачиваемость = ?(КэшированныеЗначения.Свойство("ЧислоДнейПериода"), КэшированныеЗначения.ЧислоДнейПериода, НормативнаяОборачиваемость);//
	
	Если ТекущаяСтрока.СписаниеЗапасовЗаПериодМСФО = 0 Тогда
		Возврат НормативнаяОборачиваемость+1;
	ИначеЕсли ТекущаяСтрока.СтоимостьОстаткаЗапасовНаНачалоПериода + ТекущаяСтрока.СтоимостьОстаткаЗапасовНаКонецПериодаМСФО = 0 Тогда 
	 	Возврат 1;
	Иначе 
		Возврат ТекущаяОборачиваемость / (2 * ТекущаяСтрока.СписаниеЗапасовЗаПериодМСФО 
											/ (ТекущаяСтрока.СтоимостьОстаткаЗапасовНаНачалоПериода + ТекущаяСтрока.СтоимостьОстаткаЗапасовНаКонецПериодаМСФО));
	КонецЕсли;

КонецФункции

Функция ПолучитьРезервПоОборачиваемости(ТекущаяСтрока, КэшированныеЗначения)
	
	РеквизитыНоменклатуры = КэшированныеЗначения.РеквизитыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
	НормативнаяОборачиваемость = ?(РеквизитыНоменклатуры = Неопределено, 0, РеквизитыНоменклатуры.НормативнаяОборачиваемость);
	
	Если (ТекущаяСтрока.СтоимостьОстаткаЗапасовНаНачалоПериода = 0) Тогда		
		
		Возврат 0;
		
	ИначеЕсли ТекущаяСтрока.СтоимостьОстаткаЗапасовНаНачалоПериода <= ТекущаяСтрока.СписаниеЗапасовЗаПериодМСФО Тогда 
		
		Возврат 0;
		
	ИначеЕсли ТекущаяСтрока.Оборачиваемость > НормативнаяОборачиваемость Тогда
		
		Возврат ТекущаяСтрока.СтоимостьОстаткаЗапасовНаКонецПериодаМСФО;
		
	Иначе
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьРезервПоОбесценению(ТекущаяСтрока)

	Если ТекущаяСтрока.СтоимостьОстаткаПоЧистойЦенеПродажи = 0 Тогда
	     Возврат 0;
	Иначе
		 Обесценение = (ТекущаяСтрока.СтоимостьОстаткаЗапасовНаКонецПериодаМСФО - ТекущаяСтрока.СтоимостьОстаткаПоЧистойЦенеПродажи);
		 Возврат ?(Обесценение > 0, Обесценение, 0);	
	 КонецЕсли;
	 
КонецФункции

Функция ПолучитьИтоговыйРезерв(ТекущаяСтрока, КэшированныеЗначения)

	РеквизитыНоменклатуры = КэшированныеЗначения.РеквизитыНоменклатуры.Получить(ТекущаяСтрока.Номенклатура);
	
	Если РеквизитыНоменклатуры.СпособОценкиРезерва = КэшированныеЗначения.СпособыОценкиРезервовПоЗапасамМСФО.ПоЧистойСтоимостиРеализации Тогда
		
		Возврат ТекущаяСтрока.РезервПоОбесценениюМСФО;
		
	ИначеЕсли РеквизитыНоменклатуры.СпособОценкиРезерва = КэшированныеЗначения.СпособыОценкиРезервовПоЗапасамМСФО.ПоОборачиваемости Тогда
		
		Возврат ТекущаяСтрока.РезервПоОборачиваемостиМСФО;
		
	ИначеЕсли РеквизитыНоменклатуры.СпособОценкиРезерва = КэшированныеЗначения.СпособыОценкиРезервовПоЗапасамМСФО.ПоЧистойСтоимостиРеализацииИлиОборачиваемости Тогда 	
		
		Возврат ?(ТекущаяСтрока.РезервПоОбесценениюМСФО=0, ТекущаяСтрока.РезервПоОборачиваемостиМСФО, ТекущаяСтрока.РезервПоОбесценениюМСФО);
		
	Иначе //Если СпособОценкиРезерва = ПредопределенноеЗначение("Перечисление.СпособыОценкиРезервовПоЗапасамМСФО.НеИспользовать") Тогда
		
		Возврат 0;
		
	КонецЕсли;

КонецФункции

Процедура ПересчитатьВалютнуюСумму(ТекущаяСтрока, КэшированныеЗначения, РеквизитНач, РеквизитКон, ИзФункциональнойВалюты = Истина)

	ВалютаДоговора = ПолучитьРеквизитыДоговора(ТекущаяСтрока.Договор, КэшированныеЗначения).ВалютаВзаиморасчетов;
	Если ВалютаДоговора.Пустая() Тогда
		
		ТекущаяСтрока[РеквизитКон] = ТекущаяСтрока[РеквизитНач];
		
	Иначе
		
		ФункВалюта = КэшированныеЗначения.ДанныеКурсов.ФункциональнаяВалюта;
		
		ВалютаНач = ?(ИзФункциональнойВалюты, ФункВалюта, ВалютаДоговора);
		ВалютаКон = ?(ИзФункциональнойВалюты, ВалютаДоговора, ФункВалюта);
		
		КурсНач = КэшированныеЗначения.ДанныеКурсов.КэшКурсов.Получить(ВалютаНач);
		КурсКон = КэшированныеЗначения.ДанныеКурсов.КэшКурсов.Получить(ВалютаКон);
		
		Если (КурсКон = Неопределено) Или (КурсНач = Неопределено) Тогда
			Возврат;		
		КонецЕсли;
		
		ТекущаяСтрока[РеквизитКон] = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(ТекущаяСтрока[РеквизитНач], КурсНач, КурсКон);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Общие_СчетаСубконто

Процедура ЗаполнитьСчетаПоВидуДвижений(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СчетаМСФО;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетаПоВидуДвижений") Тогда
		Возврат;
	КонецЕсли;

	Если ТекущаяСтрока.ВидДвижения.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если КэшированныеЗначения.Свойство("ВидыДвижений") Тогда
		СчетаМСФО = КэшированныеЗначения.ВидыДвижений.Получить(ТекущаяСтрока.ВидДвижения);
	Иначе
		КэшированныеЗначения.Вставить("ВидыДвижений", Новый Соответствие);
	КонецЕсли;
	
	Если СчетаМСФО = Неопределено Тогда	
		
		Контекст = СтруктураДействий.ЗаполнитьСчетаПоВидуДвижений.Контекст;
		СчетаМСФО = МСФОВызовСервераУХ.ПолучитьСчетаПоВидуДвижений(ТекущаяСтрока.ВидДвижения, КэшированныеЗначения.ПланСчетовБДМСФО);
		КэшированныеЗначения.ВидыДвижений.Вставить(ТекущаяСтрока.ВидДвижения, СчетаМСФО);
		
	КонецЕсли;
		
	Если (СчетаМСФО.СчетДт <> Неопределено) И НЕ СчетаМСФО.СчетДт.Пустая() Тогда
		ТекущаяСтрока.СчетДтМСФО = СчетаМСФО.СчетДт;
	КонецЕсли;
	
	Если (СчетаМСФО.СчетКт <> Неопределено) И НЕ СчетаМСФО.СчетКт.Пустая() Тогда
		ТекущаяСтрока.СчетКтМСФО = СчетаМСФО.СчетКт;
	КонецЕсли;	
		
КонецПроцедуры

Процедура ЗаполнитьСчетаМСФОИзТрансляции(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	Перем СоответствиеКолонок;//Соответствие(СчетНСБУ,СчетМСФО)
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСчетаМСФОИзТрансляции", СоответствиеКолонок) Тогда
		Возврат;
	КонецЕсли;
	
	СчетаТрансляции = КэшированныеЗначения.СчетаТрансляции;
	ТипСтруктура = Тип("Структура");
	
	Для каждого СчетМСФО Из СоответствиеКолонок Цикл
		
		Если НЕ ТекущаяСтрока[СчетМСФО.Ключ].Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		СчетПриемник = СчетаТрансляции.Получить(ТекущаяСтрока[СчетМСФО.Значение]);
		Если СчетПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущаяСтрока[СчетМСФО.Ключ] = СчетПриемник;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСубконтоИзТрансляции(ТекущаяСтрока, СтруктураДействий, КэшированныеЗначения)

	//ПараметрыДействия:
	//Структура:
	//	Ключ<Строка>:Имя колонки Счета-приемника, 
	//	Значение<Структура("КолонкаСчетИсточник<Строка>,СубконтоПриемник<Соответствие>,СубконтоИсточник<Соответствие>")>
	//
	//СоответствияСубконто:
	// Соответствие:
	// 	Ключ<Справочник.СчетБД> - счет приемник
	// 	Значение <Соответвие:
	// 				Ключ<Справочник.СчетБД> - счет источник
	// 				Значение<Структура(КолонкаСубконтоПриемник,КолонкаСубконтоИсточник)>
	
	Перем ПараметрыДействия, Кэш;
	
	Если НЕ СтруктураДействий.Свойство("ЗаполнитьСубконтоИзТрансляции", ПараметрыДействия) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ КэшированныеЗначения.Свойство("СоответвияСубконто", Кэш) Тогда
		Кэш = Новый Соответствие;
		КэшированныеЗначения.Вставить("СоответвияСубконто", Кэш);
	Иначе
		Кэш = КэшированныеЗначения.СоответвияСубконто;
	КонецЕсли;
		
	Для каждого КлючПриемник Из ПараметрыДействия Цикл
		
		СчетПриемник = ТекущаяСтрока[КлючПриемник.Ключ];
		СчетИсточник = ТекущаяСтрока[КлючПриемник.Значение.КолонкаСчетИсточник];
		
		КэшПриемника = Кэш.Получить(СчетПриемник);
		Если КэшПриемника = Неопределено Тогда
			Кэш.Вставить(СчетПриемник, Новый Соответствие);
			КэшПриемника = Кэш[СчетПриемник];
		КонецЕсли;		
		
		КэшИсточника = КэшПриемника.Получить(СчетИсточник);
		Если КэшИсточника = Неопределено Тогда
			
			КэшИсточника = ПолучитьСоответствиеСубконтоСчетовТрансляции(
								СчетПриемник, 
								СчетИсточник, 
								КлючПриемник.Значение.СубконтоПриемник,
								КлючПриемник.Значение.СубконтоИсточник);
			
			КэшПриемника.Вставить(СчетИсточник, КэшИсточника);
			
		КонецЕсли;
		
		Для каждого СоответствиеСубконто Из КэшИсточника Цикл
			
			Если СоответствиеСубконто.Значение = Неопределено Тогда
				ТекущаяСтрока[СоответствиеСубконто.Ключ] = Неопределено;
			Иначе	
				ТекущаяСтрока[СоответствиеСубконто.Ключ] = ТекущаяСтрока[СоответствиеСубконто.Значение];
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

// Функция - Получить соответствие субконто счетов трансляции
//
// Параметры:
//  СчетПриемник	 - Справочник.СчетаБД	 - счет приемник
//  СчетИсточник	 - Справочник.СчетаБД	 - счет источник
//  СубконтоПриемник - Соответствие(Ключ<Число> - номер субконто приемника, Значение <Строка> - имя реквизита субконто приемника)
//  СубконтоИсточник - Соответствие(Ключ<Число> - номер субконто источника, Значение <Строка> - имя реквизита субконто источника)
// Возвращаемое значение:
//   - Соответствие(Ключ<Строка> - имя реквизита субконто источника, Значение <Строка> - имя реквизита субконто приемника)
Функция ПолучитьСоответствиеСубконтоСчетовТрансляции(СчетПриемник, СчетИсточник, СубконтоПриемник, СубконтоИсточник) Экспорт
	
	Результат = Новый Соответствие;
	
	СвойстваИсточника = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СчетИсточник);
	СвойстваПриемника = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СчетПриемник);
		
	Для Каждого НомерПриемника Из СубконтоПриемник Цикл
		
		НайденИсточник = Ложь;
		Если ТипЗнч(НомерПриемника.Ключ) = Тип("Число") Тогда
			отПриемник = СвойстваПриемника["ВидСубконто" + НомерПриемника.Ключ + "ТипЗначения"];
		ИначеЕсли НомерПриемника.Ключ = "Подразделение" Тогда 
			отПриемник = Новый ОписаниеТипов("СправочникСсылка.Организации"); 
		ИначеЕсли НомерПриемника.Ключ = "НаправлениеДеятельности" Тогда 
			отПриемник = Новый ОписаниеТипов("СправочникСсылка.НаправленияДеятельности"); 
		КонецЕсли;
				
		Если отПриемник = Неопределено Тогда
		    Результат.Вставить(НомерПриемника.Значение, Неопределено);
			Продолжить;
		КонецЕсли;
		
		Для Каждого НомерИсточника Из СубконтоИсточник Цикл
			
			отИсточник = СвойстваИсточника["ВидСубконто" + НомерИсточника.Ключ + "ТипЗначения"];
			
			Если отИсточник = Неопределено Тогда 
				
				Результат.Вставить(НомерПриемника.Значение, Неопределено);
				
			ИначеЕсли отПриемник.СодержитТип(отИсточник.Типы()[0]) Тогда
				
				Результат.Вставить(НомерПриемника.Значение, НомерИсточника.Значение);
				НайденИсточник = Истина;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не НайденИсточник Тогда
			Результат.Вставить(НомерПриемника.Значение, Неопределено);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область КлючСтрокиКоллекцийВладелецДетали

// Функция - Получить кэш владельца по ключу строки
//
// Параметры:
//  КоллекцияВладелец	 - ТаблицаЗначения(или ТабличнаяЧасть) - В которой будет производиться поиск по КлючСтроки
//  КлючСтроки			 - Произвольный(по умолчанию "Неопределено") - Значение ключа строки для поиска. Если Неопределено, тогда кэширование коллекции-владельца по всем ключам строк
//  ИмяКолонкиКлючСтроки - Строка(по умолчанию "КлючСтроки") - Имя колонки ключа строки
// Возвращаемое значение:
//   - Соответствие(КлючСтроки,СтрокаКоллекцииВладелец)
Функция ПолучитьКэшВладельцаПоКлючуСтроки(КоллекцияВладелец, КлючСтроки = Неопределено, ИмяКолонкиКлючСтроки = "КлючСтроки") Экспорт

	КэшПоКлючуСтроки = Новый Соответствие;
	
	Если КлючСтроки = Неопределено Тогда
		
		Для каждого СтрокаКоллекции Из КоллекцияВладелец Цикл
			КэшПоКлючуСтроки.Вставить(СтрокаКоллекции[ИмяКолонкиКлючСтроки], СтрокаКоллекции);
		КонецЦикла;
		
	Иначе
		
		СтрокиПоКлючу = КоллекцияВладелец.НайтиСтроки(Новый Структура(ИмяКолонкиКлючСтроки, КлючСтроки));
		Если СтрокиПоКлючу.Количество() > 0 Тогда
			КэшПоКлючуСтроки.Вставить(КлючСтроки, СтрокиПоКлючу[0]); 
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат КэшПоКлючуСтроки;

КонецФункции

Функция ПолучитьКэшДеталиПоКлючуСтроки(КоллекцияДетали, КлючСтроки = Неопределено, ИмяКолонкиКлючСтроки = "КлючСтроки", КопироватьСтроки = Ложь) Экспорт

	КэшПоКлючуСтроки = Новый Соответствие;
	
	Если КлючСтроки = Неопределено Тогда
	
	Иначе
		
		Если КопироватьСтроки Тогда
			КэшПоКлючуСтроки.Вставить(КлючСтроки, КоллекцияДетали.Скопировать(Новый Структура(ИмяКолонкиКлючСтроки, КлючСтроки)));
		Иначе	
			КэшПоКлючуСтроки.Вставить(КлючСтроки, КоллекцияДетали.НайтиСтроки(Новый Структура(ИмяКолонкиКлючСтроки, КлючСтроки)));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат КэшПоКлючуСтроки;

КонецФункции

Функция ПолучитьКэшИтоговДеталиПоКлючуСтроки(КоллекцияДетали, КолонкиИтогаСтрокой, КлючСтроки = Неопределено, ИмяКолонкиКлючСтроки = "КлючСтроки") Экспорт

	КэшПоКлючуСтроки = Новый Соответствие;	
	КолонкиИсточники = Новый Структура(КолонкиИтогаСтрокой);
		
	Если КлючСтроки = Неопределено Тогда
		
		ТребуемыеКолонки = ИмяКолонкиКлючСтроки + "," + КолонкиИтогаСтрокой;
		Если ТипЗнч(КоллекцияДетали) = Тип("ТаблицаЗначений") Тогда
			ТаблицаДляКэша = КоллекцияДетали.Скопировать(,ТребуемыеКолонки);
		Иначе
			ТаблицаДляКэша = КоллекцияДетали.Выгрузить(,ТребуемыеКолонки);
		КонецЕсли;
		
		ТаблицаДляКэша.Свернуть(ИмяКолонкиКлючСтроки, КолонкиИтогаСтрокой);
		Для Каждого СтрокаДляКэша Из ТаблицаДляКэша Цикл
			КэшПоКлючуСтроки.Вставить(СтрокаДляКэша[ИмяКолонкиКлючСтроки], СтрокаДляКэша);
		КонецЦикла;
		
	Иначе

		#Если НаКлиенте Тогда
			
			ЗначенияИтогов = Новый Структура(КолонкиИтогаСтрокой);
			Для Каждого КолонкаИтога Из КолонкиИсточники Цикл
				ЗначенияИтогов.Вставить(КолонкаИтога.Ключ, 0);
			КонецЦикла;
			
			ОтборСтрок = Новый Структура(ИмяКолонкиКлючСтроки, КлючСтроки);
			Для Каждого СтрокаОтбора Из КоллекцияДетали.НайтиСтроки(ОтборСтрок) Цикл
				Для каждого КолонкаИтога Из КолонкиИсточники Цикл
					ЗначенияИтогов.Вставить(КолонкаИтога.Ключ, СтрокаОтбора[КолонкаИтога.Ключ] + ЗначенияИтогов[КолонкаИтога.Ключ]);
				КонецЦикла;
			КонецЦикла;
			
		#Иначе
			
			ЗначенияИтогов = Новый Структура;
			Для каждого КолонкаИтога Из КолонкиИсточники Цикл
				 ЗначенияИтогов.Вставить(КолонкаИтога.Ключ, КоллекцияДетали.Итог(КолонкаИтога.Ключ));
			КонецЦикла;
			 
		#КонецЕсли
		
		КэшПоКлючуСтроки.Вставить(КлючСтроки, ЗначенияИтогов); 
		
	КонецЕсли;
	
	Возврат КэшПоКлючуСтроки;

КонецФункции

Функция ПолучитьНовыйКлючСтроки(КоллекцияВладелец, ИмяКолонкиКлючСтроки = "КлючСтроки") Экспорт

	// Инициализируем значение "КлючСтроки" для установки связи между коллекциями
	// Значение должно быть уникальным в пределах коллекции мастер
	НеУстановлено = Истина;
	Кандидат = КоллекцияВладелец.Количество();
	
	Пока НеУстановлено Цикл
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить(ИмяКолонкиКлючСтроки, Кандидат);
		
		Если НЕ ЗначениеЗаполнено(КоллекцияВладелец.НайтиСтроки(ПараметрыОтбора)) Тогда
			
			НеУстановлено = Ложь;
			
			Возврат Кандидат
		Иначе
			// Такое значение ключа уже использовано
			Кандидат = Кандидат + 1;
			
		КонецЕсли;
		
	КонецЦикла;

КонецФункции

Процедура ПронумероватьКлючСтрокиВладельца(КоллекцияВладелец, ИмяКолонкиКлючСтроки = "КлючСтроки", НачальныйНомер = 1) Экспорт

	Для каждого СтрокаКоллекции Из КоллекцияВладелец Цикл
		СтрокаКоллекции[ИмяКолонкиКлючСтроки] = НачальныйНомер;
		НачальныйНомер = НачальныйНомер + 1;
	КонецЦикла;

КонецПроцедуры

Процедура УдалитьСтрокиДеталиПоКлючуСтроки(КоллекцияДетали, ИмяКолонкиКлючСтроки = "КлючСтроки", УдаляемыйКлючСтроки) Экспорт

	СтрокиДляУдаления = КоллекцияДетали.НайтиСтроки(Новый Структура(ИмяКолонкиКлючСтроки, УдаляемыйКлючСтроки));
	Для каждого СтрокаДляУдаления Из СтрокиДляУдаления Цикл
		КоллекцияДетали.Удалить(СтрокаДляУдаления);
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьКлючСтрокиДеталейИзОтбораСтрок(КоллекцияДетали, ТекущаяСтрокаДетали, ИмяКолонкиКлючСтроки = "КлючСтроки") Экспорт

	ТекущаяСтрокаДетали[ИмяКолонкиКлючСтроки] = КоллекцияДетали.ОтборСтрок[ИмяКолонкиКлючСтроки];

КонецПроцедуры

#КонецОбласти

#Область Общие_СчетаСубконто

Функция ПересчитатьИзВалютыВВалюту(Сумма, ВалютаНач, ВалютаКон, ПоКурсуНач = 0, ПоКурсуКон = 0, 
	               ПоКратностьНач = 1, ПоКратностьКон = 1, ДатаКурса = Неопределено, КэшКурсов = Неопределено) Экспорт
				   
	Если ДатаКурса <> Неопределено Тогда
	
		Если ПоКурсуНач = 0 Тогда		
			
			Если КэшКурсов = Неопределено Тогда
				КурсНач = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаНач, ДатаКурса);
				ПоКурсуНач = КурсНач.Курс;
				ПоКратностьНач = КурсНач.Кратность;
			Иначе 
				
				СтрокиНач = КэшКурсов.НайтиСтроки(Новый Структура("Валюта,Период", ВалютаНач, ДатаКурса));
				Если СтрокиНач.Количество() Тогда
					ПоКурсуНач = СтрокиНач[0].Курс;
					ПоКратностьНач = СтрокиНач[0].Кратность;
				Иначе 
					КурсНач = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаНач, ДатаКурса);
					ПоКурсуНач = КурсНач.Курс;
					ПоКратностьНач = КурсНач.Кратность;
				КонецЕсли;
				
			КонецЕсли;
					
		КонецЕсли;
		
		Если ПоКурсуКон = 0 Тогда		
			
			Если КэшКурсов = Неопределено Тогда
				КурсКон = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаКон, ДатаКурса);
				ПоКурсуКон = КурсКон.Курс;
				ПоКратностьКон = КурсКон.Кратность;
			Иначе 
				
				СтрокиКон = КэшКурсов.НайтиСтроки(Новый Структура("Валюта,Период", ВалютаКон, ДатаКурса));
				Если СтрокиКон.Количество() Тогда
					ПоКурсуКон = СтрокиКон[0].Курс;
					ПоКратностьКон = СтрокиКон[0].Кратность;
				Иначе 
					КурсКон = РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(ВалютаКон, ДатаКурса);
					ПоКурсуКон = КурсКон.Курс;
					ПоКратностьКон = КурсКон.Кратность;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	ТекущийКурс = Новый Структура("Валюта,Курс,Кратность", ВалютаНач, ПоКурсуНач, ПоКратностьНач);
	НовыйКурс = Новый Структура("Валюта,Курс,Кратность", ВалютаКон, ПоКурсуКон, ПоКратностьКон);
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(Сумма, ТекущийКурс, НовыйКурс);

КонецФункции

#КонецОбласти
