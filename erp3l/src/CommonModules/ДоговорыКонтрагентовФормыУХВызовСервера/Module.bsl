#Область ПрограммныйИнтерфейс

Процедура ЗаписатьВРегистрСклонения(ОбъектСоСклоняемымиРеквизитами, Представление, СтруктураСклонения) Экспорт
		
	УстановитьОтключениеБезопасногоРежима(Истина);
	УстановитьПривилегированныйРежим(Истина);
	
	ХешПредставления = ОбщегоНазначения.КонтрольнаяСуммаСтрокой(Представление);
	НаборЗаписейСклонения = РегистрыСведений.СклоненияПредставленийОбъектов.СоздатьНаборЗаписей();
	
	НаборЗаписейСклонения.Отбор.ХешПредставления.Установить(ХешПредставления);
	Если Не ЗначениеЗаполнено(ОбъектСоСклоняемымиРеквизитами) Тогда
		// Может быть несколько склонений представлений, относимых к одному пустому значению.
		НаборЗаписейСклонения.Отбор.Объект.Установить(ОбъектСоСклоняемымиРеквизитами);
	КонецЕсли;
	
	НоваяСтрока = НаборЗаписейСклонения.Добавить();
	НоваяСтрока.Объект           = ОбъектСоСклоняемымиРеквизитами;
	НоваяСтрока.ХешПредставления = ХешПредставления;
	Для каждого Падеж Из СтруктураСклонения Цикл
		НоваяСтрока[Падеж.Ключ + "Падеж"] = Падеж.Значение;
	КонецЦикла; 
	НаборЗаписейСклонения.Записать();

	
КонецПроцедуры

Функция ПолучитьВстречныйДоговор(ДоговорИсточник) Экспорт	
	Возврат РегистрыСведений.СвязанныеДоговоры.ПолучитьВстречныйДоговор(ДоговорИсточник);
КонецФункции

Функция ВеличинаОбеспеченияПоДоговору(Знач ДоговорСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА СвязанныеДоговоры.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ОбеспечениеВыданное)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияПредоставленияОбеспечения.Выданное)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияПредоставленияОбеспечения.Полученное)
	|	КОНЕЦ КАК Направление,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(СвязанныеДоговоры.СвязанныйДоговор, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|				ТОГДА 0
	|			ИНАЧЕ СвязанныеДоговоры.СвязанныйДоговор.Сумма
	|		КОНЕЦ) КАК Сумма
	|ИЗ
	|	РегистрСведений.СвязанныеДоговоры КАК СвязанныеДоговоры
	|ГДЕ
	|	СвязанныеДоговоры.БазовыйДоговор = &ДоговорКонтрагента
	|	И СвязанныеДоговоры.ВидСвязи В (ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ОбеспечениеВыданное), ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ОбеспечениеПолученное))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА СвязанныеДоговоры.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ОбеспечениеВыданное)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НаправленияПредоставленияОбеспечения.Выданное)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НаправленияПредоставленияОбеспечения.Полученное)
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СуммыОбеспечения = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		СуммыОбеспечения.Вставить(Выборка.Направление, Выборка.Сумма);
		
	КонецЦикла;
	
	Возврат СуммыОбеспечения;

КонецФункции

Функция ПолучитьИдентификаторПлатежаНаСервере(ПараметрыДоговора) Экспорт
	Возврат УправлениеДенежнымиСредствамиУХ.ПолучитьУникальныйИдентификаторПлатежа(ПараметрыДоговора);
КонецФункции

Функция ТреубетсяПостановкаКонтрактаНаУчет(ВидДоговораУХ, СуммаДоговора, ВалютаВзаиморасчетов, ДатаДоговора) Экспорт
	Возврат ВалютныйКонтрольУХ.ТребуетсяПостановкаКонтрактаНаУчет(ВидДоговораУХ, СуммаДоговора, ВалютаВзаиморасчетов, ДатаДоговора);
КонецФункции

Функция ПолучитьПараметрыУчетаФИ(ВидДоговораИлиВидФинансовогоИнструмента, Организация, ЭтоВалютныйИнструмент = Ложь) Экспорт
	
	Если ТипЗнч(ВидДоговораИлиВидФинансовогоИнструмента) = Тип("СправочникСсылка.ВидыДоговоровКонтрагентовУХ") Тогда
		ВидФинансовогоИнструмента = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьВидФинансовогоИнструментаПоВидуДоговора(ВидДоговораИлиВидФинансовогоИнструмента);
	Иначе
		ВидФинансовогоИнструмента = ВидДоговораИлиВидФинансовогоИнструмента;
	КонецЕсли;
	
	Возврат РегистрыСведений.ПараметрыУчетаВидовФИМСФО.ПолучитьПараметрыФИ(
														ВидФинансовогоИнструмента, 
														Организация, 
														ЭтоВалютныйИнструмент, 
														Неопределено
													);

КонецФункции

Функция ПолучитьСписокКонтактныхЛиц(Знач Контрагент) Экспорт
	
	Возврат ДоговорыКонтрагентовВстраиваниеУХВызовСервера.ПолучитьСписокКонтактныхЛиц(Контрагент);

КонецФункции

Функция РеквизитыСклоненияРуководителя(Руководитель) Экспорт
	
	РеквизитыСклонения 		= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Руководитель, "ФИО,Пол");
	
	РеквизитыСклонения.Пол 	= ДоговорыКонтрагентовВстраиваниеУХКлиентСервер.ПорядковыйНомерПола(РеквизитыСклонения.Пол);
	
	РеквизитыСклонения.Вставить("ТолькоПросмотр", Не ПравоНаРедактирование(Истина));
	
	Возврат РеквизитыСклонения;
	
КонецФункции

Функция ПравоНаРедактирование(ЭтоФИО) Экспорт
	
	ПроверяемыйСправочник = ?(ЭтоФИО, Метаданные.Справочники.ФизическиеЛица, Метаданные.Справочники.Должности);
	Возврат ПравоДоступа("Редактирование", ПроверяемыйСправочник);
	
КонецФункции

Процедура ЗаписатьСостояниеДоговора(Договор, Состояние) Экспорт

	УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Договор, Состояние);

КонецПроцедуры

Функция ТекстВыбораПараметровФИ(ФИ, ПараметрыВыбораФИ = Неопределено) Экспорт
	Возврат РегистрыСведений.ВыборПараметровУчетаФИ.ПолучитьТекстВыбора(ФИ, ПараметрыВыбораФИ)
КонецФункции

Функция ПросклонятьПредставлениеПоВсемПадежам(Знач Представление, Знач ПараметрыСклонения) Экспорт
	
	Возврат СклонениеПредставленийОбъектов.ДанныеСклонения(Представление, ПараметрыСклонения, Истина);
	
КонецФункции

Функция АктуальнаяВерсияГрафикаРасчетов(ОбъектРасчетов) Экспорт
	
	АктуальнаяВерсияГрафикаРасчетов = 
		РегистрыСведений.ВерсииРасчетов.ПолучитьАктуальнуюВерсиюФинансовогоИнструмента(ОбъектРасчетов);
			
	Возврат АктуальнаяВерсияГрафикаРасчетов;

КонецФункции	

// Функция - возвращает отбор отчета по ковенантам по кредиту
//
// Параметры:
//  ДокументСсылка	 - ДокументСсылка.ВерсияСоглашенияКредит 
// 
// Возвращаемое значение:
//   - Структура
//
Функция ОтборОтчетаПоКовенантамПоКредиту(ДокументСсылка) Экспорт	
	Возврат ДоговорыКонтрагентовФормыУХ.ОтборОтчетаПоКовенантамПоКредиту(ДокументСсылка);	
КонецФункции	

#Область ДоговорыКонтрагентов
Функция ДанныеДляОткрытияНовойВерсииСоглашенияПоДоговору(ДоговорКонтрагента) Экспорт
	
	Параметры = Новый Структура;
	Параметры.Вставить("ЗначенияЗаполнения", Новый Структура);
	Параметры.ЗначенияЗаполнения.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	Параметры.ЗначенияЗаполнения.Вставить("РежимИнициализацииВерсииПоДоговору");
	
	ВидДоговораУХ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДоговорКонтрагента, "ВидДоговораУХ");
	Если Не ЗначениеЗаполнено(ВидДоговораУХ) Тогда
		
		ИмяФормы = "Справочник.ДоговорыКонтрагентов.Форма.ФормаВыбораВидаДоговора";
		// Добавим фильтр по виду справочника.
		Если Не Параметры.Свойство("Отбор") Тогда
			Параметры.Вставить("Отбор", Новый Структура);
		КонецЕсли;
		
		Параметры.Отбор.Вставить(
			"ТипСправочникаДоговора",
			ДоговорКонтрагента.Метаданные().Имя);
		
	Иначе
		ИмяДокумента = УправлениеДоговорамиУХВызовСервераПовтИсп.ПолучитьИмяДокументаПоВидуДоговора(ВидДоговораУХ);
		Если ЗначениеЗаполнено(ИмяДокумента) Тогда
			ИмяФормы = Метаданные.Документы[ИмяДокумента].ОсновнаяФормаОбъекта.ПолноеИмя();
		Иначе
			ВызватьИсключение НСтр("ru = 'Невозможно определить тип версии соглашения.'");
		КонецЕсли;
	КонецЕсли;

	Результат = Новый Структура;
	Результат.Вставить("ИмяФормы", ИмяФормы);
	Результат.Вставить("Параметры", Параметры);
	Результат.Вставить("Уникальность", ДоговорКонтрагента);
	
	Возврат Результат;
	
КонецФункции	
#КонецОбласти

Функция ПредставлениеКолонокГрафикаВерсииСоглашения(Ссылка) Экспорт
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка);
	ПредставленияКолонок = МенеджерОбъекта.ПредставленияКолонокГрафика();
	Возврат ПредставленияКолонок;
КонецФункции
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти
