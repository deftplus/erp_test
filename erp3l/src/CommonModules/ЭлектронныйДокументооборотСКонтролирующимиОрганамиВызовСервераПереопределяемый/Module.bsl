
#Область ПрограммныйИнтерфейс

// Процедура вызывается при изменении статуса отправки (сдачи) документа.
//
// Параметры:
//	Ссылка - ссылка на документ.
//	СтатусОтправки - ПеречислениеСсылка.СтатусыОтправки - актуальный статус.
//
Процедура ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки) Экспорт
	
	// ЗарплатаКадрыПодсистемы
	ЗарплатаКадры.ПриИзмененииСтатусаОтправкиДокумента(Ссылка, СтатусОтправки);
	// Конец ЗарплатаКадрыПодсистемы
	
КонецПроцедуры

// Функция должна возвращать дату начала и дату окончания периода
// документа (отчета) по заданной ссылке.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
// 
// Результат:
//	Структура, если документ (отчет) представляется за период.
//	Ключи структуры: ДатаНачала, ДатаОкончания. Ключи содержат дату начала
//	и дату окончания периода, за который оформлен документ. Если документ
//	(отчет) представляется не за период, то в ключах ДатаНачала и ДатаОкончания
//	возвращается дата документа.
//
Функция ПолучитьДатыПериодаДокумента(Ссылка) Экспорт
	
	ПериодОтчета = Новый Структура("ДатаНачала, ДатаОкончания");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ГодОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НалоговыйПериод");
		ПериодОтчета.ДатаНачала = Дата(ГодОтчета, 1, 1);
		ПериодОтчета.ДатаОкончания = Дата(ГодОтчета, 12, 31);
		Возврат ПериодОтчета;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ") Тогда
		ГодОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "НалоговыйПериод");
		ПериодОтчета.ДатаНачала = Дата(ГодОтчета, 1, 1);
		ПериодОтчета.ДатаОкончания = Дата(ГодОтчета, 12, 31);
		Возврат ПериодОтчета;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		ПериодОтчета.ДатаНачала = Ссылка.Дата;
		ПериодОтчета.ДатаОкончания = Ссылка.Дата;
		Возврат ПериодОтчета;
	Иначе
		Возврат ПерсонифицированныйУчет.ПолучитьДатыПериодаДокумента(Ссылка);
	КонецЕсли;
	
КонецФункции

// Функция выгружает заданный документ и возвращает свойства файла выгрузки.
//
// Параметры:
//  Ссылка - ссылка на отчет (документ).
//
// Результат:
//	Структура или Неопределено, если не удалось сформировать файл выгрузки.
//	Ключи структуры:
//		- АдресФайлаВыгрузки - адрес двоичных данных файла выгрузки во временном хранилище,
//		допустимо значение Неопределено при ошибках,
//		- ТипФайлаВыгрузки - строка,
//		- ИмяФайлаВыгрузки - короткое имя файла выгрузки (с расширением),
//		- КодировкаФайлаВыгрузки - перечисление КодировкаТекста,
//		- Ошибки - массив строк, не обязательный параметр, в норме ошибки выгрузки отображает сам метод,
//		согласно специфике выгружаемого документа, альтернативно при ошибках метод может возвращать этот ключ с ошибками,
//		а в ключе "АдресФайлаВыгрузки" возвращать Неопределено, ошибки будут отображены стандартным образом.
Функция ВыгрузитьДокумент(Ссылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлДляОтправки = Новый Структура("АдресФайлаВыгрузки, ИмяФайлаВыгрузки, ТипФайлаВыгрузки, КодировкаФайлаВыгрузки, Ошибки");
	
	Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СправкиНДФЛДляПередачиВНалоговыйОрган") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = НеОпределено Тогда
			Возврат НеОпределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "СправкиНДФЛДляПередачиВНалоговыйОрган";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ") Тогда
		ИнформацияОФайле = ЗарплатаКадры.ПолучитьДанныеФайла(Ссылка, УникальныйИдентификатор, Истина);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайла;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.СсылкаНаДвоичныеДанныеФайла;
		ФайлДляОтправки.ТипФайлаВыгрузки = "ЗаявлениеОПодтвержденииПраваНаЗачетАвансовПоНДФЛ";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки; 	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		ИнформацияОФайле = Документы.ЗаявлениеОВвозеТоваров.ВыгрузитьЗаявлениеОВвозеТоваров(УникальныйИдентификатор, Ссылка);
		Если ИнформацияОФайле = НеОпределено Тогда
			Возврат НеОпределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле[0].ИмяФайлаВыгрузки;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле[0].АдресФайлаВыгрузки;
		ФайлДляОтправки.ТипФайлаВыгрузки = "ЗаявлениеОВвозеТоваров";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий") Тогда
		
		Отказ = Ложь;
		
		ФайлДляОтправки = Документы.РеестрСведенийНеобходимыхДляНазначенияИВыплатыПособий.ПолучитьФайлДляОтправки(Ссылка, Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОбОстаткахПрослеживаемыхТоваров") Тогда
		ИнформацияОФайле = ПрослеживаемостьБРУ.ВыгрузитьУведомлениеОбОстаткахПрослеживаемыхТоваров(Ссылка);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайлаВыгрузки;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.АдресФайлаВыгрузки;
		ФайлДляОтправки.Ошибки = ИнформацияОФайле.Ошибки;
		ФайлДляОтправки.ТипФайлаВыгрузки = "УведомлениеОбОстаткахПрослеживаемыхТоваров";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОВвозеПрослеживаемыхТоваров") Тогда
		ИнформацияОФайле = ПрослеживаемостьБРУ.ВыгрузитьУведомлениеОВвозеПрослеживаемыхТоваров(Ссылка);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайлаВыгрузки;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.АдресФайлаВыгрузки;
		ФайлДляОтправки.Ошибки = ИнформацияОФайле.Ошибки;
		ФайлДляОтправки.ТипФайлаВыгрузки = "УведомлениеОВвозеПрослеживаемыхТоваров";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;	
	ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.УведомлениеОПеремещенииПрослеживаемыхТоваров") Тогда
		ИнформацияОФайле = ПрослеживаемостьБРУ.ВыгрузитьУведомлениеОПеремещенииПрослеживаемыхТоваров(Ссылка);
		Если ИнформацияОФайле = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		ФайлДляОтправки.ИмяФайлаВыгрузки = ИнформацияОФайле.ИмяФайлаВыгрузки;
		ФайлДляОтправки.АдресФайлаВыгрузки = ИнформацияОФайле.АдресФайлаВыгрузки;
		ФайлДляОтправки.Ошибки = ИнформацияОФайле.Ошибки;
		ФайлДляОтправки.ТипФайлаВыгрузки = "УведомлениеОПеремещенииПрослеживаемыхТоваров";
		ФайлДляОтправки.КодировкаФайлаВыгрузки =  КодировкаТекста.ANSI;
		Возврат ФайлДляОтправки;
	Иначе
		Возврат ПерсонифицированныйУчет.ВыгрузитьДокументы(Ссылка, УникальныйИдентификатор);		
	КонецЕсли;
	
КонецФункции
    
// Получает пакет электронных представлений документов.
//
// Параметры
//  МассивНДС - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - сответствие переданных ссылок на документы и массива структур с полями:
//                 ТипФайла - Строка - описание типа файла;
//                 ИмяФайла - Строка - имя файла с расширением;
//                 АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
Функция ПолучитьФайлыВыгрузкиНДС(МассивНДС, УникальныйИдентификаторФормы) Экспорт
	
	Возврат УчетНДС.ПолучитьЭлектронныеДокументы(МассивНДС, УникальныйИдентификаторФормы);	
	
КонецФункции

// Получает пакет электронных представлений документов.
//
// Параметры
//  МассивЭД - Массив - перечень документов для которых
//                 необходимо получить электронные представления в виде двоичных данных.
//  УникальныйИдентификаторФормы - УникальныйИдентификатор - уникальный идентификатор по которому
//                 осуществляется привязка двоичных данных во временном хранилище.
//
// Возвращаемое значение:
//   Соответствие - сответствие переданных ссылок на документы и массива структур с полями:
//                 ТипФайла - Строка - описание типа файла;
//                 ИмяФайла - Строка - имя файла с расширением;
//                 АдресВременногоХранилища - Строка - адрес временного хранилища, в котором размещены двоичные данные файла.
Функция ПолучитьФайлыВыгрузкиЭД(МассивЭД, УникальныйИдентификаторФормы) Экспорт

	Возврат ОбменСКонтрагентами.ВыгрузкаДокументовДляПередачиВФНС(МассивЭД, УникальныйИдентификаторФормы);
	
КонецФункции

// Функция возвращает свойства договоров для массива документов
//
//Параметры 
//	МассивСсылок -  массив ссылок на документы ИБ, на основании которых в данном прикладном решении 
//  формируется электронный документ вида «Акт приемки-сдачи работ (услуг)».
//
// Возвращаемое значение: 
//	Соответствие со следующими свойствами:
//	-	ключ соответствия - ссылка на выгружаемый документ ИБ, взятая из входящего параметра
//	-	значение соответствия - Структура, с полями:
//		-	НомерДоговора, тип: Строка 
//		-	ДатаДоговора, тип: Дата 
// В случае, если требуемые реквизиты у договора не заполнены или при невозможности получения данных реквизитов, следует
// помещать пустые значения указанных типов.
Функция ПолучитьНомерДатаДоговораДокументов(МассивСсылок) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КорректировкаРеализации.Договор.Номер КАК НомерДоговора,
	|	КорректировкаРеализации.Договор.Дата КАК ДатаДоговора,
	|	КорректировкаРеализации.Ссылка
	|ИЗ
	|	Документ.КорректировкаРеализации КАК КорректировкаРеализации
	|ГДЕ
	|	КорректировкаРеализации.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаПриобретения.Договор.Номер,
	|	КорректировкаПриобретения.Договор.Дата,
	|	КорректировкаПриобретения.Ссылка
	|ИЗ
	|	Документ.КорректировкаПриобретения КАК КорректировкаПриобретения
	|ГДЕ
	|	КорректировкаПриобретения.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	АктВыполненныхРабот.Договор.Номер,
	|	АктВыполненныхРабот.Договор.Дата,
	|	АктВыполненныхРабот.Ссылка
	|ИЗ
	|	Документ.АктВыполненныхРабот КАК АктВыполненныхРабот
	|ГДЕ
	|	АктВыполненныхРабот.Ссылка В(&МассивСсылок)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПриобретениеУслугПрочихАктивов.Договор.Номер,
	|	ПриобретениеУслугПрочихАктивов.Договор.Дата,
	|	ПриобретениеУслугПрочихАктивов.Ссылка
	|ИЗ
	|	Документ.ПриобретениеУслугПрочихАктивов КАК ПриобретениеУслугПрочихАктивов
	|ГДЕ
	|	ПриобретениеУслугПрочихАктивов.Ссылка В(&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок",МассивСсылок); 
	
	Соответствие = Новый Соответствие;
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Соответствие.Вставить(Ссылка,Новый Структура("НомерДоговора, ДатаДоговора","",'00010101'));
		
	КонецЦикла;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Соответствие.Вставить(Выборка.Ссылка, Новый Структура("НомерДоговора, ДатаДоговора",Выборка.НомерДоговора,Выборка.ДатаДоговора));
		
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции 

// Функция возвращает свойства сотрудника по СправочникСсылка.ФизическиеЛица и СправочникСсылка.Организации.
//
// Параметры функции:
// 	СсылкаФизЛицо 		- СправочникСсылка.ФизическиеЛица
// 	ОрганизацияСсылка 	- СправочникСсылка.Организации.
//
// Возвращаемое значение:
// Структура со следующими полями:
//  ФИО - структура:
// 		* Фамилия	- Строка 	- фамилия сотрудника.
// 		* Имя		- Строка 	- имя сотрудника.
// 		* Отчество	- Строка 	- отчество сотрудника.
//  Серия			- Строка 	- серия документа, удостоверяющего личность сотрудника.
//  Номер			- Строка 	- номер документа, удостоверяющего личность сотрудника.
//  ДатаВыдачи		- Дата 		- дата выдачи документа, удостоверяющего личность сотрудника.
//  КемВыдан		- Строка 	- кем выдан документ, удостоверяющий личность сотрудника.
//  ВидДокумента	- СправочникСсылка.ВидыДокументовФизическихЛиц - вид документа, удостоверяющего личность сотрудника.
//  Должность		- Строка 	- должность сотрудника.
//  Подразделение	- Строка 	- подразделение, в котором работает сотрудник.
//  СНИЛС			- Строка 	- СНИЛС сотрудника.
//  ДатаРождения	- Дата 		- Дата рождения.
//  МестоРождения	- Строка 	- Длина не более 50 символов. Место рождения.
//  КодПодразделения - Строка 	- Код подразделения организации, выдавшего документ, удостоверяющий личность.
//  Пол             - Строка 	- пол физ. лица "Мужской" или "Женский".
//  Гражданство     - СправочникСсылка.СтраныМира - гражданство сотрудника.
//  ТелефонРабочий  - Строка 	- Рабочий телефон сотрудника.
// 
Функция ПолучитьДанныеИсполнителя(СсылкаФизЛицо, ОрганизацияСсылка) Экспорт
	
	Структура		= Новый Структура("ФИО,Серия,Номер,ДатаВыдачи,КемВыдан,КодПодразделения,ВидДокумента");
	СтруктураФИО	= Новый Структура("Фамилия,Имя,Отчество");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних КАК ФИОФизическихЛицСрезПоследних
	|ГДЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо = &ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ФизическоеЛицо", СсылкаФизЛицо);
	
	Попытка
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			СтруктураФИО.Вставить("Фамилия",	Выборка.Фамилия);
			СтруктураФИО.Вставить("Имя",		Выборка.Имя);
			СтруктураФИО.Вставить("Отчество",	Выборка.Отчество);
			Структура.Вставить("ФИО",			СтруктураФИО);
		КонецЦикла;
	Исключение	КонецПопытки;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыФизическихЛицСрезПоследних.Серия,
	|	ДокументыФизическихЛицСрезПоследних.Номер,
	|	ДокументыФизическихЛицСрезПоследних.ДатаВыдачи,
	|	ДокументыФизическихЛицСрезПоследних.КемВыдан,
	|	ДокументыФизическихЛицСрезПоследних.ВидДокумента,
	|	ДокументыФизическихЛицСрезПоследних.КодПодразделения
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|ГДЕ
	|	ДокументыФизическихЛицСрезПоследних.Физлицо = &Физлицо
	|	И ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность = ИСТИНА";
	
	Запрос.УстановитьПараметр("Физлицо", СсылкаФизЛицо);
	
	Попытка
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Структура.Вставить("Серия",				Выборка.Серия);
			Структура.Вставить("Номер",				Выборка.Номер);
			Структура.Вставить("ДатаВыдачи",		Выборка.ДатаВыдачи);
			Структура.Вставить("КемВыдан",			Выборка.КемВыдан);
			Структура.Вставить("КодПодразделения",	Выборка.КодПодразделения);
			Структура.Вставить("ВидДокумента",		Выборка.ВидДокумента);
		КонецЦикла;
	Исключение	КонецПопытки;
	
	СотрудникСсылка = РегламентированнаяОтчетностьУП.ПолучитьСотрудникаПоФизЛицу(СсылкаФизЛицо, ОрганизацияСсылка);
	Если НЕ СотрудникСсылка = Неопределено Тогда
		
		ДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Ложь, СотрудникСсылка, "Подразделение,Должность", НачалоДня(ТекущаяДатаСеанса()) - 1);
		
		Если НЕ ДанныеСотрудников = Неопределено
			И ДанныеСотрудников.Количество() > 0 Тогда
			ДанныеСотрудников = ДанныеСотрудников[0];
			Структура.Вставить("Должность", ДанныеСотрудников.Должность);
			Структура.Вставить("Подразделение", СокрЛП(Строка(ДанныеСотрудников.Подразделение)));
		КонецЕсли;
	КонецЕсли;
	
	// получим СНИЛС сотрудника
	Структура.Вставить("СНИЛС", ?(ЗначениеЗаполнено(СсылкаФизЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаФизЛицо, "СтраховойНомерПФР"), ""));
	
	// заполним гражданство сотрудника
	Гражд = РегистрыСведений.ГражданствоФизическихЛиц.СрезПоследних(, Новый Структура("ФизическоеЛицо", СсылкаФизЛицо));

	Если Гражд.Количество() > 0 Тогда
		Структура.Вставить("Гражданство", Гражд[0].Страна);
	Иначе
		Структура.Вставить("Гражданство", "");
	КонецЕсли;
	
	// заполним остальные параметы
	Структура.Вставить("ДатаРождения", ?(ЗначениеЗаполнено(СсылкаФизЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаФизЛицо, "ДатаРождения"), ""));
	Структура.Вставить("МестоРождения", ?(ЗначениеЗаполнено(СсылкаФизЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаФизЛицо, "МестоРождения"), ""));
	Структура.Вставить("Пол", ?(ЗначениеЗаполнено(СсылкаФизЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаФизЛицо, "Пол"), ""));
	ДополнительныеПараметры = Новый Структура("ТолькоПервая", Истина);
	ТелефонРабочий = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформацииОбъекта(
		СсылкаФизЛицо, Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица, , , ДополнительныеПараметры);
	Если ЗначениеЗаполнено(ТелефонРабочий) Тогда
		Структура.Вставить("ТелефонРабочий", ТелефонРабочий);
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции

// Функция возвращает соответствие или массив данных об ответственных лицах организации
//	Параметры функции:
//		ОрганизацияСсылка - СправочникСсылка.Организации;
//		ПолучитьСоответствие - Булево.
//
//	Возвращаемое значение:
//			Соответствие или массив, сведений об ответственных лицах организации.
//		Если значение параметра "ПолучитьСоответствие" указано и значение параметра 
//		равно "Истина", то функция вернет коллекцию соответствие с ключем признака ответственного лица (тип "Строка")
//		и стуктуру данных физ. лица.
//			Структура данных физ. лца состоит из значения "должность" должности ответветственного лица (тип "Строка") 
//			и "СНИЛС" значение реквизита "СтраховойНомерПФР" справочника физ. лица (тип "Строка").
//		В противном случаи вернется массив ссылок с типом СправочникСсылка.ФизическиеЛица.
//
Функция ПолучитьДанныеОтветственныхЛиц(ОрганизацияСсылка, ПолучитьСоответствие = Ложь) Экспорт
	
	Если ПолучитьСоответствие Тогда
		Результат = Новый Соответствие;
	Иначе
		Результат = Новый Массив();
	КонецЕсли;
	
	// Руководитель
	СведенияПоРуководителю = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(ОрганизацияСсылка, ТекущаяДатаСеанса(), 
		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);

	Если ЗначениеЗаполнено(СведенияПоРуководителю.ФизическоеЛицо) Тогда
		Если ПолучитьСоответствие Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Должность", СведенияПоРуководителю.Должность);
			СтруктураДанных.Вставить("СНИЛС", ?(ЗначениеЗаполнено(СведенияПоРуководителю.ФизическоеЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияПоРуководителю.ФизическоеЛицо, "СтраховойНомерПФР"), ""));
			Результат.Вставить("Руководитель", СтруктураДанных);
		Иначе
			Результат.Добавить(СведенияПоРуководителю.ФизическоеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	// Гл Бухгалтер
	СведенияПоГлБухгалтеру = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(ОрганизацияСсылка, ТекущаяДатаСеанса(), 
		Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер);

	Если ЗначениеЗаполнено(СведенияПоГлБухгалтеру.ФизическоеЛицо) Тогда
		Если ПолучитьСоответствие Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Должность", СведенияПоГлБухгалтеру.Должность);
			СтруктураДанных.Вставить("СНИЛС", ?(ЗначениеЗаполнено(СведенияПоГлБухгалтеру.ФизическоеЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияПоГлБухгалтеру.ФизическоеЛицо, "СтраховойНомерПФР"), ""));
			Результат.Вставить("ГлавныйБухгалтер", СтруктураДанных);
		Иначе
			Результат.Добавить(СведенияПоГлБухгалтеру.ФизическоеЛицо);
		КонецЕсли;
	КонецЕсли;
	
	// Кассир
	СведенияПоКассиру = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(ОрганизацияСсылка, ТекущаяДатаСеанса(), 
		Перечисления.ОтветственныеЛицаОрганизаций.Кассир);

	Если ЗначениеЗаполнено(СведенияПоКассиру.ФизическоеЛицо) Тогда
		Если ПолучитьСоответствие Тогда
			СтруктураДанных = Новый Структура;
			СтруктураДанных.Вставить("Должность", СведенияПоКассиру.Должность);
			СтруктураДанных.Вставить("СНИЛС", ?(ЗначениеЗаполнено(СведенияПоКассиру.ФизическоеЛицо), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СведенияПоКассиру.ФизическоеЛицо, "СтраховойНомерПФР"), ""));
			Результат.Вставить("Кассир", СтруктураДанных);
		Иначе
			Результат.Добавить(СведенияПоКассиру.ФизическоеЛицо);
		КонецЕсли;
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

// Функция должна возвращать код подчиненности реестра сведений на выплату пособий в ФСС по заданной ссылке
// Параметры:      
//  Ссылка - ссылка реестр сведений на выплату пособий в ФСС.
// 
// Результат:
//  Строка, 5 символов.  В случае неудачи – пустая строка.
Функция ПолучитьКодПодчиненностиРеестраСведенийНаВыплатуПособийФСС(Ссылка) Экспорт
	КодПодчиненности = "";
	Попытка
		КодПодчиненности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "КодПодчиненностиФСС");
	Исключение
	КонецПопытки;
	Возврат КодПодчиненности;
КонецФункции

// Функция должна возвращать код ИФНС получателя отправляемого объекта
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
// Строка, длина 4. В случае неудачи - пустая строка.
Функция ПолучитьКодИФНСПолучателяПоСсылке(ОбъектСсылка) Экспорт
	
	Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров") Тогда
		СтруктураРеквизитовВыгрузки = ОбъектСсылка.СтруктураРеквизитовВыгрузки.Получить();
		Возврат СтруктураРеквизитовВыгрузки.КодИФНС;
	КонецЕсли;
	
КонецФункции

// Возвращает ключ записи регистра сведений ОтветственныеЛицаОрганизаций
//
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, по которой необходимо получить записи в регистре сведений 
//  ОтветственноеЛицо - СправочникСсылка.ФизическиеЛица - физическое лицо, по которому необходимо получить записи в
//                                                        регистре сведений.
//
// Возвращаемое значение:
//   РегистрСведенийКлючЗаписи - ключ записи регистра сведений, полученный по указанным входящим параметрам
//   РегистрыСведений.ОтветственныеЛицаОрганизаций.ПустойКлюч() - в случае, если ключ не найден.
//
Функция ПолучитьКлючЗаписиРегистраОтветственныеЛицаОрганизаций(Организация,ОтветственноеЛицо) Экспорт
	
КонецФункции

// Возвращает ссылку на Главного бухгалтера 
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, главного бухгалтера которой необходимо получить.
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - главный бухгалтер организации
//   Неопределено, если главный бухгалтер отсутствует.
//
Функция ГлБухгалтер(Организация) Экспорт
	
	ФизЛицо = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(
		Организация,
		,
		Перечисления.ОтветственныеЛицаОрганизаций.ГлавныйБухгалтер).ФизическоеЛицо;
	
	Возврат ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо, Неопределено);
	
КонецФункции

// Возвращает ссылку на Руководителя организации
//
// Параметры:
//  Организация - СправочникСсылка.Организации - организация, руководителя которой необходимо получить.
//
// Возвращаемое значение:
//   СправочникСсылка.ФизическиеЛица - руководитель организации
//   Неопределено, если руководитель отсутствует.
//
Функция Руководитель(Организация) Экспорт
	
	ФизЛицо = ОтветственныеЛицаСервер.ПолучитьДанныеОтветственногоЛица(
		Организация,
		,
		Перечисления.ОтветственныеЛицаОрганизаций.Руководитель).ФизическоеЛицо;
	
	Возврат ?(ЗначениеЗаполнено(ФизЛицо), ФизЛицо, Неопределено);
	
КонецФункции

// Функция для объекта-источника возвращает ссылку на организацию. 
// В данной функции необходимо определить получение организации для всех типов объектов, которые должны отоборажаться
// в журнале Управление обменом и не имеют реквизита с именем "Организация".
// 
// Параметры:
//  Источник - ДокументСсылка, СправочникСсылка  - объект, который отборажается в форме Управление обменом.
//
// Результат:
//  СправочникСсылка.Организации,
//	Неопределено, если получить ссылку на организацию не получилось.
//
Функция ПолучитьСсылкуНаОрганизациюИсточника(Источник) Экспорт
	
	Организация = Неопределено;

	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЖурналУчетаСчетовФактурДляПередачиВЭлектронномВиде") Тогда
		Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник, "Организация");
	КонецЕсли;
	
	Возврат Организация;
	
КонецФункции

// Возвращает ИНН контрагента для случая, когда ИНН в справочнике Контрагенты не хранится в реквизите с именем ИНН.
//
// Параметры
//  Контрагент  - <Справочник.Контрагент> - Контрагент, для котрого необходимо получить ИНН
// Возвращаемое значение:
//   ИНН   - строка - ИНН контрагента.
//
Функция ИННКонтрагента(Контрагент) Экспорт

КонецФункции

// Функция предназначена для поиска физического лица, найденного по переданным фамилии, имени и отчеству.
//
// Параметры
//  Фамилия		- Строка - Фамилия физического лица
//  Имя			- Строка - Имя физического лица
//  Отчество	- Строка - Отчество физического лица
//  СНИЛС		- Строка - СНИЛС физического лица
//  Организация - СправочникиСсылка.Организации - организация, в которой работает физическое лицо.
//
// Возвращаемое значение:
//   СправочникиСсылка.ФизическиеЛица - Физическое лицо, найденное по переданным фамилии, имени и отчеству
//		Если найдено несколько физических лиц, брать первого.
//
Функция ФизЛицоПоФИО(Фамилия, Имя, Отчество, СНИЛС, Организация) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&Период,
	|			Имя = &Имя
	|				И Отчество = &Отчество
	|				И Фамилия = &Фамилия) КАК ФИОФизическихЛицСрезПоследних
	|ГДЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо.СтраховойНомерПФР = &СНИЛС";
	
	Запрос.УстановитьПараметр("Имя", 		Имя);
	Запрос.УстановитьПараметр("Отчество", 	Отчество);
	Запрос.УстановитьПараметр("Фамилия", 	Фамилия);
	Запрос.УстановитьПараметр("Период", 	ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("СНИЛС", 		СНИЛС);

	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Возврат ВыборкаДетальныеЗаписи.ФизическоеЛицо; 
	Иначе
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция возвращает вид отправляемого документа 
// Параметры:      
//  ОбъектСсылка - ссылка на отправляемый объект.
// Результат:
//	СправочникСсылка.ВидыОтправляемыхДокументов, в случае неудачи - пустая ссылка данного типа.
//
Функция ПолучитьВидОтправляемогоДокументаПоСсылке(ОбъектСсылка) Экспорт

КонецФункции

#Область ДокументыПоТребованиюФНС

// Помещает присоединенные файлы объектов ИБ, 
// являющихся источниками для заполнения реквизитов сканированных документов, 
// представляемых по требованию ФНС, во временное хранилище и возвращает их свойства.
//
// Не требуется заполнять, если указанные присоединенные файлы хранятся при участии механизма БСП "Присоединенные файлы".
//
// Следует возвращать свойства всех файлов следующих типов: JPEG, TIFF, PNG, PDF.
//
// Параметры 
//	ИдентификаторФормыВладельца	- УникальныйИдентификатор, уникальный идентификатор формы, 
//		во временное хранилище которой требуется поместить данные присоединенных файлов.
//	ФайлыИсточников				- Соответствие, соответствие переданных ссылок на источники и массива структур 
//		Ключ 		- ссылка на источник
//		Значение 	- Массив, массив структур (начальное значение: пустой массив)
//		(каждый элемент массива -  структура свойств одного файла).
//
//		Поля структуры:
//			Имя			- Строка, короткое имя файла с расширением
//			Размер		- Число, размер файла в байтах
//			АдресДанных	- Строка, адрес временного хранилища.
//
Процедура ПолучитьИзображенияПрисоединенныхФайловИсточников(ФайлыИсточников, ИдентификаторФормыВладельца) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
