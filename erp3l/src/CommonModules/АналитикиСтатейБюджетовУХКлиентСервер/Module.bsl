
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает строку доп.реквизитов всех аналитик
//
// Возвращаемое значение:
//   Строка      - Реквизиты аналитик строки через запятую
//
Функция РеквизитыАналитикСтрокой() Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("Аналитика%1");
	Для Каждого Реквизит Из ДопРеквизитыАналитик() Цикл
		Реквизиты.Добавить("ВидАналитики%1"+Реквизит);
	КонецЦикла;
	Реквизиты = СтрСоединить(Реквизиты, ",");
	
	Возврат РеквизитыАналитикИзШаблона(Реквизиты);
	
КонецФункции

// Возвращает массив имен доп.реквизитов аналитики статьи бюджета
Функция ДопРеквизитыАналитик() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить("");						// ВидАналитики*
	Результат.Добавить("Наименование");			// ВидАналитики*1Наименование
	Результат.Добавить("ТипЗначения");			// ВидАналитики*ТипЗначения
	Результат.Добавить("ПараметрыВыбора");		// ВидАналитики*ПараметрыВыбора
	Результат.Добавить("СвязиАналитики");		// ВидАналитики*ПараметрыВыбора
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает список реквизитов аналитик
//
// Параметры:
//  ШаблонПолей  - Строка - Пример: "ВидАналитики%1, ВидАналитики%1Наименование, ВидАналитики%1ТипЗначения";
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   Строка      - Реквизиты аналитик строки через запятую
//
Функция РеквизитыАналитикИзШаблона(ШаблонПолей) Экспорт
	КоличествоАналитик = КоличествоАналитикСтатьи();
	ПоляВыбора = Новый Массив;
	Для Номер = 1 По КоличествоАналитик Цикл
		ПоляВыбора.Добавить(СтрШаблон(ШаблонПолей, Номер));
	КонецЦикла;
	Возврат СтрСоединить(ПоляВыбора, ",");
КонецФункции

// Возвращает максимальное ко-во аналитик статьи бюджета
Функция КоличествоАналитикСтатьи() Экспорт
	Возврат 6;
КонецФункции

Функция ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным, ИдентификаторСтроки = Неопределено) Экспорт
	
	Путь = СтрРазделить(ПутьКДанным, ".");
	Если Путь.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Реквизит = Форма;
	Для Каждого ЭлементПути Из Путь Цикл
		Если ЭлементПути = "" Тогда
			Прервать;
		КонецЕсли;
		
		Реквизит = Реквизит[ЭлементПути];
		
		Если ТипЗнч(Реквизит) = Тип("ДанныеФормыКоллекция") Тогда
			Если ИдентификаторСтроки = Неопределено Тогда
				Прервать;
			Иначе
				Реквизит = Реквизит.НайтиПоИдентификатору(ИдентификаторСтроки);
			КонецЕсли;
				
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Реквизит;
	
КонецФункции

Функция ПолучитьЗначениеПоПутиКДанным(Форма, ПутьКДанным, ИдентификаторСтроки = 0) Экспорт
	
	Путь = СтрРазделить(ПутьКДанным, ".");
	Если Путь.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Путь[0] = "Элементы" Тогда
		
		Элемент = Форма.Элементы[Путь[1]];
		
		Если ТипЗнч(Элемент) = Тип("ТаблицаФормы") Тогда
			
			Если Путь[2] = "ТекущиеДанные" Тогда
				
				ПутьКТаблице = Элемент.ПутьКДанным;
				РеквизитТаблица = ПолучитьРеквизитФормыПоПути(Форма, ПутьКТаблице);
				
				ТекущиеДанные = РеквизитТаблица.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
				
				Возврат ТекущиеДанные[Путь[3]];
				
			КонецЕсли;
				
		КонецЕсли;
		
	Иначе
		Возврат ПолучитьРеквизитФормыПоПути(Форма, ПутьКДанным, ИдентификаторСтроки);
	КонецЕсли;
	
КонецФункции

// Процедура заполняет реквизиты ВидыАналитик** в приемнике исходя из видов аналитик СтатьиБюджета
Процедура ЗаполнитьСведенияОВидахАналитик(СтатьяБюджета, Приемник, ОписаниеСтатьи, ПараметрыЛимитирования = неопределено) Экспорт
	
	ВидыАналитик = АналитикиСтатейБюджетовУХКлиентСерверПовтИсп.ВидыАналитикСтатьи(СтатьяБюджета, ОписаниеСтатьи.ТолькоЛимитируемыеАналитики, ПараметрыЛимитирования);
	Для Сч = 1 По ОписаниеСтатьи.КолвоАналитик Цикл
		ИмяРеквизитаПриемника = СтрШаблон(ОписаниеСтатьи.Аналитики.ВидАналитикиИмяРеквизита, Сч);
		ИмяРеквизитаИсточника = СтрШаблон("ВидАналитики%1", Сч);
		Приемник[ИмяРеквизитаПриемника] = ВидыАналитик[ИмяРеквизитаИсточника];
		Приемник[ИмяРеквизитаПриемника+"Наименование"] = ВидыАналитик[ИмяРеквизитаИсточника+"Наименование"];
		Приемник[ИмяРеквизитаПриемника+"ТипЗначения"] = ВидыАналитик[ИмяРеквизитаИсточника+"ТипЗначения"];
		Приемник[ИмяРеквизитаПриемника+"ПараметрыВыбора"] = ВидыАналитик[ИмяРеквизитаИсточника+"ПараметрыВыбора"];
		Приемник[ИмяРеквизитаПриемника+"СвязиАналитик"] = ВидыАналитик[ИмяРеквизитаИсточника+"СвязиАналитик"];
	КонецЦикла;
	
КонецПроцедуры

// Процедура настроивает элементы формы аналитики статьи бюджетов
// Процедура может выполнить следующие действия:
//		- ПривестиЗначенияАналитик 
//		- ОчиститьЗначенияАналитик
//		- НастроитьЭлементыАналитик
Процедура НастроитьПоляВводаАналитик(Форма, ОписаниеСтатьи, ДанныеВидАналитики) Экспорт
	
	Если ДанныеВидАналитики = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	ОбязательностьЗаполненияАналитик = Ложь;
	
	// Видимость элемента статья 
	ВидимостьСтатьи = Ложь;
	Для Каждого КлючИЗначение Из ОписаниеСтатьи.ЭлементыФормы Цикл
		ИмяЭлемента = КлючИЗначение.Значение.ИмяЭлемента;
		ВидимостьСтатьи = ВидимостьСтатьи ИЛИ Форма.Элементы[ИмяЭлемента].Видимость;
	КонецЦикла;
	
	//
	Для ИндексАналитики = 1 По ОписаниеСтатьи.КолвоАналитик Цикл
		
		ПолеВидаАналитики = СтрШаблон(ОписаниеСтатьи.Аналитики.ВидАналитикиИмяРеквизита, ИндексАналитики);
		
		АналитикаИспользуется = ЗначениеЗаполнено(ДанныеВидАналитики[ПолеВидаАналитики]);
		
		СвойстваЭлементаОбщие = Новый Структура;
		СвойстваЭлементаНеВТаблицеФормы = Новый Структура;
		Если ОбязательностьЗаполненияАналитик Тогда
			СвойстваЭлементаОбщие.Вставить("АвтоВыборНезаполненного", АналитикаИспользуется);
			СвойстваЭлементаОбщие.Вставить("АвтоОтметкаНезаполненного", АналитикаИспользуется);
		КонецЕсли;
		
		Если АналитикаИспользуется Тогда
			//СвойстваЭлементаОбщие.Вставить("ВыбиратьТип", Ложь);
			СвойстваЭлементаОбщие.Вставить("ВыбиратьТип", Истина);
			СвойстваЭлементаОбщие.Вставить("ПодсказкаВвода", ДанныеВидАналитики[ПолеВидаАналитики+"Наименование"]);
			Если ДанныеВидАналитики[ПолеВидаАналитики+"ПараметрыВыбора"] = неопределено Тогда
				СвойстваЭлементаОбщие.Вставить("ПараметрыВыбора", Новый ФиксированныйМассив(Новый Массив));
			Иначе
				СвойстваЭлементаОбщие.Вставить("ПараметрыВыбора", ДанныеВидАналитики[ПолеВидаАналитики+"ПараметрыВыбора"]);
			КонецЕсли;
		Иначе
			СвойстваЭлементаОбщие.Вставить("ВыбиратьТип", Истина);
			СвойстваЭлементаОбщие.Вставить("ПодсказкаВвода", НСтр("ru='<Не используется>'"));
			СвойстваЭлементаОбщие.Вставить("ПараметрыВыбора", Новый ФиксированныйМассив(Новый Массив));
		КонецЕсли;
		
		СвойстваЭлементаНеВТаблицеФормы.Вставить("ТолькоПросмотр", НЕ АналитикаИспользуется);
		СвойстваЭлементаНеВТаблицеФормы.Вставить("Видимость", ВидимостьСтатьи И АналитикаИспользуется);
		СвойстваЭлементаНеВТаблицеФормы.Вставить("ОграничениеТипа", ДанныеВидАналитики[ПолеВидаАналитики+"ТипЗначения"]);
		
		// Для всех элементов формы, связанных с этим реквизитом-статьей установить элементы формы
		Для Каждого КлючЗначение Из ОписаниеСтатьи.ЭлементыФормы Цикл
			
			ОписаниеЭлементаСтатья = КлючЗначение.Значение;
			ОписаниеЭлементаАналитики = ОписаниеЭлементаСтатья.ЭлементыАналитики[ИндексАналитики-1];
			Элемент = Форма.Элементы[ОписаниеЭлементаАналитики.ИмяЭлемента];
			
			ЗаполнитьЗначенияСвойств(Элемент, СвойстваЭлементаОбщие);
			
			Если НЕ ОписаниеЭлементаСтатья.ЭтоТаблицаФормы Тогда
				ЗаполнитьЗначенияСвойств(Элемент, СвойстваЭлементаНеВТаблицеФормы);
			КонецЕсли;
			
			Если ОбязательностьЗаполненияАналитик Тогда
				СкорректироватьОтметкуЗаполнения(Элемент);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура настраивает связи аналитик для элементов формы
Процедура НастроитьСвязиАналитик(Форма, ОписаниеСтатьи, ДанныеВидАналитики, ДанныеАналитика) Экспорт
	
	Если ДанныеВидАналитики = Неопределено ИЛИ ДанныеАналитика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	//
	Для ИндексАналитики = 1 По ОписаниеСтатьи.КолвоАналитик Цикл
		
		ПолеВидаАналитики = СтрШаблон(ОписаниеСтатьи.Аналитики.ВидАналитикиИмяРеквизита, ИндексАналитики);
		Если ДанныеВидАналитики[ПолеВидаАналитики + "СвязиАналитик"] = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыВыбора = Новый Соответствие;
		СвязиАналитик = Новый Массив(ДанныеВидАналитики[ПолеВидаАналитики + "СвязиАналитик"]);
		Для Каждого Связь Из СвязиАналитик Цикл
			ИмяАналитики = СтрШаблон(ОписаниеСтатьи.Аналитики.АналитикаИмяРеквизита, Связь.НомерАналитики);
			ПараметрыВыбора.Вставить(Связь.Имя, ДанныеАналитика[ИмяАналитики]);
		КонецЦикла;
		
		// Для всех элементов формы, связанных с этим реквизитом-статьей установить связи параметров выбора
		Для Каждого КлючЗначение Из ОписаниеСтатьи.ЭлементыФормы Цикл
			
			ОписаниеЭлементаСтатья = КлючЗначение.Значение;
			ОписаниеЭлементаАналитики = ОписаниеЭлементаСтатья.ЭлементыАналитики[ИндексАналитики-1];
			Элемент = Форма.Элементы[ОписаниеЭлементаАналитики.ИмяЭлемента];
			
			Для Каждого КлючЗначение Из ПараметрыВыбора Цикл
				ФормыУХКлиентСервер.ДобавитьПараметрВыбора(Элемент, КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура очищает значения аналитик или приводит их значения к заданным видам аналитик статьи
Процедура ОбработатьЗначенияАналитик(Форма, ОписаниеСтатьи, ДанныеВидАналитики, ДанныеАналитика, Действия) Экспорт
	
	//
	Для ИндексАналитики = 1 По ОписаниеСтатьи.КолвоАналитик Цикл
		
		ПолеАналитики = СтрШаблон(ОписаниеСтатьи.Аналитики.АналитикаИмяРеквизита, ИндексАналитики);
		ПолеВидаАналитики = СтрШаблон(ОписаниеСтатьи.Аналитики.ВидАналитикиИмяРеквизита, ИндексАналитики);
		
		ВидАналитикиТипЗначения = ДанныеВидАналитики[ПолеВидаАналитики+"ТипЗначения"];
		
		Если Действия.Свойство("ОчиститьЗначенияАналитик") Тогда
			ДанныеАналитика[ПолеАналитики] = ВидАналитикиТипЗначения.ПривестиЗначение(неопределено);
		ИначеЕсли Действия.Свойство("ПривестиЗначенияАналитик") Тогда
			// Приведение значения аналитики к типу ВидаАналитики
			Если ЗначениеЗаполнено(ВидАналитикиТипЗначения) Тогда
				ДанныеТекущегоПоля = ВидАналитикиТипЗначения.ПривестиЗначение(ДанныеАналитика[ПолеАналитики]);
			Иначе
				ДанныеТекущегоПоля = Неопределено
			КонецЕсли;
			ДанныеАналитика[ПолеАналитики] = ДанныеТекущегоПоля;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вычисляет номер последней заполнненной аналитики для таблицы видов аналитик форм элементов статей бюджетов
Процедура ВычислитьМаксимальныйНомерЗаполненнойАналитики(Форма) Экспорт
	
	МаксимальныйНомер = 0;
	
	Для Каждого Строка Из Форма.ВидыАналитик Цикл
		Если ЗначениеЗаполнено(Строка.ВидАналитики) Тогда
			МаксимальныйНомер = Строка.НомерАналитики;
		КонецЕсли;
	КонецЦикла;
	
	Форма.МаксимальныйНомерЗаполненнойАналитики = МаксимальныйНомер;
	
КонецПроцедуры

Функция ПолучитьПараметрыЛимитированияСтатьиБюджета(Форма, ИмяЭлемента) Экспорт
	
	Результат = Новый Структура;
	СвязиПараметров = Форма.Элементы[ИмяЭлемента].СвязиПараметровВыбора;
	
	Для Каждого СвязьПараметровВыбора Из СвязиПараметров Цикл
		
		Если СвязьПараметровВыбора.Имя = "Отбор.ПараметрыЛимитирования_ВидБюджета" Тогда
			Значение = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СвязьПараметровВыбора.ПутьКДанным);
			Результат.Вставить("ПараметрыЛимитирования_ВидБюджета", Значение);
		ИначеЕсли СвязьПараметровВыбора.Имя = "Отбор.ПараметрыЛимитирования_Период" Тогда
			Значение = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, СвязьПараметровВыбора.ПутьКДанным);
			Результат.Вставить("ПараметрыЛимитирования_Период", Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Заполнены", Результат.Свойство("ПараметрыЛимитирования_ВидБюджета") И Результат.Свойство("ПараметрыЛимитирования_Период"));
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПутиКДаннымЛимитированияОбъекта(Форма, ОписаниеСтатьи) Экспорт
	
	Результат = Новый Структура;
	
	// Имя элемента статья
	Для Каждого КлючЗначение Из ОписаниеСтатьи.ЭлементыФормы Цикл
		ЭлементИмя = КлючЗначение.Ключ;
		ЭлементОписание = КлючЗначение.Значение;
		Прервать;
	КонецЦикла;
	
	//
	СвязиПараметровВыбора = Форма.Элементы[ЭлементИмя].СвязиПараметровВыбора;
	Для Каждого СвязьПараметровВыбора Из СвязиПараметровВыбора Цикл
		
		Если СвязьПараметровВыбора.Имя = "Отбор.ПараметрыЛимитирования_ВидБюджета" Тогда
			ПутьКДанным = СтрЗаменить(
				СвязьПараметровВыбора.ПутьКДанным,
				"Элементы."+ОписаниеСтатьи.ИмяЭлементаТаблицаФормы+".ТекущиеДанные",
				ОписаниеСтатьи.ПутьКДанным
			);
			Результат.Вставить("ВидБюджета", ПутьКДанным);
		ИначеЕсли СвязьПараметровВыбора.Имя = "Отбор.ПараметрыЛимитирования_Период" Тогда
			ПутьКДанным = СтрЗаменить(
				СвязьПараметровВыбора.ПутьКДанным,
				"Элементы."+ОписаниеСтатьи.ИмяЭлементаТаблицаФормы+".ТекущиеДанные",
				ОписаниеСтатьи.ПутьКДанным
			);
			Результат.Вставить("Период", ПутьКДанным);
		КонецЕсли;
		
	КонецЦикла;
	
	Результат.Вставить("Заполнены", Результат.Свойство("ВидБюджета") И Результат.Свойство("Период"));
	
	Возврат Результат;
	
КонецФункции

// Процедура устанавливает связи аналитик статьи бюджета и при необходимости очищает зависимую аналитику при изменении
// Параметры:
//		- Форма - УправляемаяФорма 
//		- ИмяЭлемента - Строка - Имя элемента аналитики статьи бюджета
//		- ЭтоИзменениеЗначенияАналитики - булево - Истина, если это изменение аналитики вызвано пользователем. Ложь в другом случае
Процедура ИнициализироватьСвязиАналитикСтатьиБюджета(Форма, ИмяЭлемента, ЭтоИзменениеЗначенияАналитики) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ОписаниеФормы") Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеФормы = Форма.ОписаниеФормы;
	Если ОписаниеФормы = Неопределено 
		ИЛИ ТипЗнч(ОписаниеФормы) <> Тип("ФиксированнаяСтруктура") 
		ИЛИ НЕ ОписаниеФормы.Свойство("СтатьиБюджетов") 
		ИЛИ ТипЗнч(ОписаниеФормы.СтатьиБюджетов) <> Тип("Соответствие")
		ИЛИ НЕ ОписаниеФормы.Свойство("АналитикиСтатейБюджетов") 
		ИЛИ ТипЗнч(ОписаниеФормы.АналитикиСтатейБюджетов) <> Тип("Соответствие")	Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеЭлементаАналитики = ОписаниеФормы.АналитикиСтатейБюджетов[ИмяЭлемента];
	Если ОписаниеЭлементаАналитики = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСтатьи = ОписаниеФормы.СтатьиБюджетов[ОписаниеЭлементаАналитики.СтатьяБюджета];
	Если ОписаниеСтатьи = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Получение контекста 
	Если ОписаниеСтатьи.ЭтоТаблица Тогда
		ТекущаяСтрока = Форма.Элементы[ОписаниеСтатьи.ИмяЭлементаТаблицаФормы].ТекущаяСтрока;
		Если ТекущаяСтрока = неопределено Тогда
			Возврат;
		КонецЕсли;
		Таблица = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеСтатьи.ПутьКДанным);
		Если Таблица.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		СтрокаТаблицы = Таблица.НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаТаблицы = неопределено Тогда
			Возврат;
		КонецЕсли;
		ЗначениеСтатьи = СтрокаТаблицы[ОписаниеСтатьи.ИмяРеквизита];
		ДанныеВидАналитики	= СтрокаТаблицы;
		ДанныеАналитика		= СтрокаТаблицы;
	Иначе
		ПутьКДанным = ОписаниеСтатьи.ИмяРеквизита;
		Если ЗначениеЗаполнено(ОписаниеСтатьи.ПутьКДанным) Тогда
			ПутьКДанным = ОписаниеСтатьи.ПутьКДанным + "." + ПутьКДанным;
		КонецЕсли;
		ЗначениеСтатьи = АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьЗначениеПоПутиКДанным(Форма, ПутьКДанным);
		ДанныеВидАналитики	= АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеСтатьи.Аналитики.ВидАналитикиПуть);
		ДанныеАналитика		= АналитикиСтатейБюджетовУХКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ОписаниеСтатьи.Аналитики.АналитикаПуть);
	КонецЕсли;
	
	//
	АналитикиСтатейБюджетовУХКлиентСервер.НастроитьСвязиАналитик(Форма, ОписаниеСтатьи, ДанныеВидАналитики, ДанныеАналитика);
	Если ЭтоИзменениеЗначенияАналитики = Истина Тогда
		ОчиститьАналитикуСтатьиПриИзмененииАналитикиСтатьи(ОписаниеСтатьи, ДанныеАналитика, ДанныеВидАналитики, ОписаниеЭлементаАналитики.НомерАналитики);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура корректно снимает АвтоОтметкуНезаполненного для элемента формы
Процедура СкорректироватьОтметкуЗаполнения(Элемент) Экспорт
	
	// Выключение свойства АвтоОтметкаНезаполненного, т.е. перевод его значения из Истина в Ложь, 
	// не приводит к изменению текущего значения свойства ОтметкаНезаполненного.
	Если Элемент.АвтоОтметкаНезаполненного <> Истина И Элемент.ОтметкаНезаполненного = Истина Тогда
		Элемент.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьАналитикуСтатьиПриИзмененииАналитикиСтатьи(ОписаниеСтатьи, ДанныеАналитика, ДанныеВидАналитики, НомерАналитики)
	
	ШаблонРеквизитаАналитики = ОписаниеСтатьи.Аналитики.АналитикаИмяРеквизита;
	ШаблонВидАналитики = ОписаниеСтатьи.Аналитики.ВидАналитикиИмяРеквизита;
	
	ИмяРеквизитаВидАналитики = СтрШаблон(ШаблонВидАналитики, НомерАналитики);
	ТипИзмененнойАналитки = ДанныеВидАналитики[ИмяРеквизитаВидАналитики + "ТипЗначения"];
	
	Для Индекс = НомерАналитики + 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		ИмяРеквизита = СтрШаблон(ШаблонРеквизитаАналитики, Индекс);
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеАналитика, ИмяРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаВидАналитики = СтрШаблон(ШаблонВидАналитики, Индекс);
		СвязиАналитик = ДанныеВидАналитики[ИмяРеквизитаВидАналитики+"СвязиАналитик"];
		Если СвязиАналитик = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Очищаем, если изменилась аналитика с тем же номером
		Если ТребуетсяОчистка(СвязиАналитик, НомерАналитики) Тогда
			ТипЗначенияАналитики = ТипЗнч(ДанныеАналитика[ИмяРеквизита]);
			ДанныеАналитика[ИмяРеквизита] = Новый (ТипЗначенияАналитики);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТребуетсяОчистка(СвязиАналитик, НомерИзмененнойАналитики)
	
	Для Каждого Связь Из СвязиАналитик Цикл
		Если Связь.НомерАналитики = НомерИзмененнойАналитики Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

#КонецОбласти

